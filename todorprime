Next step:
Parse refCell data with possible .in
--read nds
--analyze to build plane normals, transforms.
--extend constant evaluation as needed.
--connectivity information required.
--build the two methods
--how do we combination?
--fix reallit bug


AIM TO BE UP AND RUNNING TOWARDS BY FRIDAY: THURSDAY HELL/BE UP LATE/PUSHPUSH
-Geometric data structures and mesh operatoins
-First do geometrices via c code insert and changes to json file
-Changes to type generation
-Do a fem function via firedrake and pass the damn thing
-Also do the affine optimization and get that test right.

NOTE: need tensor 7s
Minor code task:
make newtoneps return a meshpos - better for error checking?
Means error code can be inserted when done
Make authorative list of places to call error code.
Steps:
in simplyfStrand:
-find pos var - add _pos and great property - find it as needed and replcae
in ast:
-modify the spatial query options
-two places...
-or do basis vars
---spatial querry check--sphere
New TODO:
LATER:0. FIGURE OUT FUNCTION NAMES ISSUE
DONE: 1. Fix pos mechanics: lazyness, use in template, SAVING
LATER:2. Fix precedence.
DONE: 3. Figure out portion of functionality completed in correspondence with spec, clean up the names
4. RefCell, MeshPos methods along with C++ code inserts, call backs, mesh file, new variables hanging out of cells, export of mesh struct, verticies.
5. Loading in meshCells sequences, funcCell Sequences, meshPos: saving out both meshCell, funcCell, and meshPos sequences - meshCell is all that is needed.
EXPAND: (1(half), 2, 4,5)
-precdence
-Load in meshCells, sequences of meshCells
-meshPos, functions - disallow import sequences of meshes, etc?
-geometrices queries for newton
-cell connectivity, verticies, other imports
-refCeoo geomery queries, C code insets
-meshPos geometry queriesi
6. More general cleanup of the function name message, the use of femItemN, and the names in checkGlobal and hiding of hte env
7. Considerations to the rpesentation of data in the C++: the use of pointers vs. raw data, how and when to extract from pointers.
8. Considerpations in simple to make mesh,fns, etc more like images - i.e kind last definition of something and follow back to it.
9. Better basis functoin evaluation scanning of tensor and sum product basises: https://arxiv.org/pdf/1711.02473.pdf
10. Identification of linear derivatives and replacement of this -- afine
11. Loading nrrd files as a group for loading fem stuff.
12. Living tuning in newton paramters
13. Debbuging logs and performance logs: (see 15, think about basis evaluation counts - better tools for performance analysis.)
14. Border Control applied to a mesh.
15. Error checking and warning: located and identified at certian points: check if indecies are valid before doing certain calls: basically when indexing into arrays, we should generate bordercontrol, error test.
16. Inconsteycny in ast construction of fem types: SOME(name) vs none, use of fem type when it should be named type
17. Caching data: mid-ir
18. Test with KirbyData
19. Closer thing about the big field data.
20. indexed by meshHang outs
21. Better type checking: checktypefile doesn't type check much against the rest of the file... to what extent are they compatible - what about loading them togeather
22. Better import structsfor femdata - currently mirror when they shouldn't - generally better header op
23. Sumshift potentially incorrect index numbering in ein?
24. Would be nice to integrate fem stuff into type vars
25. conflict in basis evaluation
8. Field parsing: c.t, field variables in a function, or field arguments to a function or c$T (binding strength of .) -- diffOp diff expression and suffix are out of order -- move selct suffix into diffExpr optioin - atomixExpr (SR)* 
26. Add basis evaluation functions?
27. wrapping expanded func calls and potential mistakes there.
28. more sequence operations; break operation










































What I want to do before figures:
-C code inserts for geometries
-C code inserts for for Meshpos geometric queries and function coordination
-Geometric data structure
-load in meshcells, seqs of mesh cells
-border control
During:
-Precdence
-Basis eval better
-Caching/locality
-verticies


Settled solution to cell seq, pos seq, cell, pos etc loads with an extra argument - assume if default is non-emtpy that there is something
Expand consts to include these defaults.
-generate input with two things
-do the copying work there
-Figure out how the get works for defaults---fuck---ignore the get function - supress it.
-All work in the: 
-generation of dynamic sequence types (gen-tys-ops.sml)
-gen-inputs (headers and actual functions.)
--need to be override for fem stuff.

---load the dynamic sequence
---itter over it.

GORDON:
-NO DEFAULTS FOR CELL Inputs (constants issue)
-$ issue
-tupple, _ fields, Transform->T
-Write more for me.





CHAINGS:
Add opt: loadCells, loadPositions
Take int or sequence * mesh or func--MAIN
Take vec7{} * mesh--LATER
Look for them as constants
-In simple input processing, if you get an input, you change it to the sequence ty
-pass it through loadCells
-so your inputs become lists of ints
-just with funcs,etc - generate arbitrary forloop length function


NOTE ON OUTPUTS:
possible int32 to double conversions when converting meshPos


just restrict cell inputs
mesh pointer, mesh have id; fixing printing

gen-inputs.sml
GenAPI.inputSetbyName....
make sure builder functions are are exported...
We will provide ints and other things...