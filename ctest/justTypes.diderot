#version 3.0

type mesh msh = file("test.json");
type functionSpace{msh}[] fns = file("test.json");
type femFunction{fns} FUNC = file("test.json");

input msh a;
input fns b = fns(a);
input FUNC c = FUNC(b);
refCell{msh} AAA = a.refcell();
field(2)[] F = c.F;
int[] umm = {1,2,3};
strand gg(cell{msh} j){
  output vec2 pos = [0.333333333333333333, 0.333333333333333];

  update{
    print(a.numCell,"\n");
    print(j.transformDofs(), "\n");
    vec2 r = [1 - pos[0] - pos[1], pos[0], pos[1]] • j.transformDofs();
    print("real:", r , "\n");
    print("start:", pos, "\n");
    pos = j.transform(pos);
    print("world:", pos, "\n");
    pos = j.invTransform(pos);
    print("return:", pos, "\n");
    pos = j.transform(pos);
    position{msh} umm = a.findPos(pos);
    print(umm,"...", umm.refPos(),"...", umm.worldPos(),"...\n");
    
    print("\nfin: ",∇⊗(j.transform)(pos), "\n");
    
    stabilize;
  }
} create_collection {gg(k) |k in a.cells()};
