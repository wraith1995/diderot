/* ParseTree: After parsing */
  Program @ [evalProg.diderot:4.1-182.0] 
    [
      Type: mesh_t= @ [evalProg.diderot:4.1-5.0] 
        Mesh @ [evalProg.diderot:4.6-10] 
        From File : evalProg.json @ [evalProg.diderot:4.1-5.0] 
      Const: dim= @ [evalProg.diderot:5.1-6.0] 
        Select @ [evalProg.diderot:5.17-27] 
          Var: mesh_t @ [evalProg.diderot:5.17-23] 
          dim
      Var @ [evalProg.diderot:6.1-7.0] 
        Decl: dimm= @ [evalProg.diderot:6.1-7.0] 
          Var: dim @ [evalProg.diderot:6.12-15] 
      Type: fns_t= @ [evalProg.diderot:7.1-8.0] 
        FunctionSpace(mesh_t) @ [evalProg.diderot:7.6-29] 
          [ ]
        From File : evalProg.json @ [evalProg.diderot:7.1-8.0] 
      Type: func_t= @ [evalProg.diderot:8.1-9.0] 
        FemFunction(fns_t) @ [evalProg.diderot:8.6-24] 
        From File : evalProg.json @ [evalProg.diderot:8.1-9.0] 
      Input: meshData @ [evalProg.diderot:10.1-11.0] 
      Input: space= @ [evalProg.diderot:11.1-12.0] 
        Apply @ [evalProg.diderot:11.21-36] 
          Var: fns_t @ [evalProg.diderot:11.21-26] 
          [
            Var: meshData @ [evalProg.diderot:11.27-35] 
          ]
      Input: data= @ [evalProg.diderot:12.1-13.0] 
        Apply @ [evalProg.diderot:12.21-34] 
          Var: func_t @ [evalProg.diderot:12.21-27] 
          [
            Var: space @ [evalProg.diderot:12.28-33] 
          ]
      Var @ [evalProg.diderot:14.1-15.0] 
        Decl: F= @ [evalProg.diderot:14.1-15.0] 
          Select @ [evalProg.diderot:14.18-24] 
            Var: data @ [evalProg.diderot:14.18-22] 
            F
      Var @ [evalProg.diderot:16.1-17.0] 
        Decl: simplex= @ [evalProg.diderot:16.1-17.0] 
          Apply @ [evalProg.diderot:16.27-45] 
            Select @ [evalProg.diderot:16.27-45] 
              Var: meshData @ [evalProg.diderot:16.27-35] 
              refcell
            [ ]
      Func: insideTest @ [evalProg.diderot:18.1-24.1] 
        Bool @ [evalProg.diderot:18.10-15] 
        [
          Param: x @ [evalProg.diderot:18.26-32] 
            Tensor @ [evalProg.diderot:18.26-31] 
              [
                Lit: 3 @ [evalProg.diderot:18.26-31] 
              ]
        ]
        Stmt @ [evalProg.diderot:18.1-24.1] 
          Block @ [evalProg.diderot:18.33-22.0] 
            [
              Decl @ [evalProg.diderot:18.33-22.0] 
                Decl: mid= @ [evalProg.diderot:19.3-20.0] 
                  BinOp: - @ [evalProg.diderot:19.14-33] 
                    Var: x @ [evalProg.diderot:19.14-15] 
                    Cons @ [evalProg.diderot:19.18-33] 
                      [
                        Lit: 0.e0 @ [evalProg.diderot:19.19-22] 
                        Lit: 0.e0 @ [evalProg.diderot:19.24-27] 
                        Lit: 0.e0 @ [evalProg.diderot:19.29-32] 
                      ]
              Return @ [evalProg.diderot:20.3-21.0] 
                AndAlso @ [evalProg.diderot:20.10-63] 
                  BinOp: <= @ [evalProg.diderot:20.10-26] 
                    UnaryOp: |()| @ [evalProg.diderot:20.10-18] 
                      Subscript @ [evalProg.diderot:20.11-17] 
                        Var: mid @ [evalProg.diderot:20.11-14] 
                        [
                          Lit: 0 @ [evalProg.diderot:20.15-16] 
                        ]
                    Lit: 0.4e1 @ [evalProg.diderot:20.22-25] 
                  AndAlso @ [evalProg.diderot:20.26-63] 
                    BinOp: <= @ [evalProg.diderot:20.29-45] 
                      UnaryOp: |()| @ [evalProg.diderot:20.29-37] 
                        Subscript @ [evalProg.diderot:20.30-36] 
                          Var: mid @ [evalProg.diderot:20.30-33] 
                          [
                            Lit: 1 @ [evalProg.diderot:20.34-35] 
                          ]
                      Lit: 0.4e1 @ [evalProg.diderot:20.41-44] 
                    BinOp: <= @ [evalProg.diderot:20.48-63] 
                      UnaryOp: |()| @ [evalProg.diderot:20.48-56] 
                        Subscript @ [evalProg.diderot:20.49-55] 
                          Var: mid @ [evalProg.diderot:20.49-52] 
                          [
                            Lit: 2 @ [evalProg.diderot:20.53-54] 
                          ]
                      Lit: 0.4e1 @ [evalProg.diderot:20.60-63] 
            ]
      Input: rad= @ [evalProg.diderot:24.1-25.0] 
        Lit: 0.1e-1 @ [evalProg.diderot:24.18-22] 
      Input: eps= @ [evalProg.diderot:25.1-26.0] 
        Lit: 0.1e-1 @ [evalProg.diderot:25.18-22] 
      Input: v0= @ [evalProg.diderot:26.1-27.0] 
        Lit: 0.625e-1 @ [evalProg.diderot:26.17-23] 
      Input: fBias= @ [evalProg.diderot:27.1-28.0] 
        Lit: 0.1e-1 @ [evalProg.diderot:27.20-24] 
      Input: fStren= @ [evalProg.diderot:28.1-29.0] 
        Lit: 0.1e-1 @ [evalProg.diderot:28.21-25] 
      Input: zfuz= @ [evalProg.diderot:29.1-30.0] 
        Lit: 0.1e-1 @ [evalProg.diderot:29.19-23] 
      Input: ipos @ [evalProg.diderot:30.1-31.0] 
      Func: fStep @ [evalProg.diderot:33.1-49.1] 
        Tensor @ [evalProg.diderot:33.10-15] 
          [
            Lit: 3 @ [evalProg.diderot:33.10-15] 
          ]
        [
          Param: s @ [evalProg.diderot:33.21-27] 
            Tensor @ [evalProg.diderot:33.21-26] 
              [
                Lit: 3 @ [evalProg.diderot:33.21-26] 
              ]
        ]
        Stmt @ [evalProg.diderot:33.1-49.1] 
          Block @ [evalProg.diderot:33.29-48.0] 
            [
              Decl @ [evalProg.diderot:33.29-48.0] 
                Decl: x= @ [evalProg.diderot:34.3-35.0] 
                  Subscript @ [evalProg.diderot:34.12-16] 
                    Var: s @ [evalProg.diderot:34.12-13] 
                    [
                      Lit: 0 @ [evalProg.diderot:34.14-15] 
                    ]
              Decl @ [evalProg.diderot:33.29-48.0] 
                Decl: y= @ [evalProg.diderot:35.3-36.0] 
                  Subscript @ [evalProg.diderot:35.12-16] 
                    Var: s @ [evalProg.diderot:35.12-13] 
                    [
                      Lit: 1 @ [evalProg.diderot:35.14-15] 
                    ]
              Decl @ [evalProg.diderot:33.29-48.0] 
                Decl: z= @ [evalProg.diderot:36.3-37.0] 
                  Subscript @ [evalProg.diderot:36.12-16] 
                    Var: s @ [evalProg.diderot:36.12-13] 
                    [
                      Lit: 2 @ [evalProg.diderot:36.14-15] 
                    ]
              Decl @ [evalProg.diderot:33.29-48.0] 
                Decl: H= @ [evalProg.diderot:37.3-38.0] 
                  Cons @ [evalProg.diderot:37.24-136] 
                    [
                      Cons @ [evalProg.diderot:37.25-94] 
                        [
                          BinOp: - @ [evalProg.diderot:37.26-73] 
                            BinOp: * @ [evalProg.diderot:37.26-44] 
                              Lit: 2 @ [evalProg.diderot:37.26-27] 
                              BinOp: ^ @ [evalProg.diderot:37.30-44] 
                                BinOp: - @ [evalProg.diderot:37.31-40] 
                                  Lit: 2 @ [evalProg.diderot:37.31-32] 
                                  BinOp: * @ [evalProg.diderot:37.35-40] 
                                    Lit: 3 @ [evalProg.diderot:37.35-36] 
                                    BinOp: ^ @ [evalProg.diderot:37.37-40] 
                                      Var: x @ [evalProg.diderot:37.37-38] 
                                      Lit: 2 @ [evalProg.diderot:37.39-40] 
                                Lit: 2 @ [evalProg.diderot:37.42-43] 
                            BinOp: * @ [evalProg.diderot:37.46-73] 
                              BinOp: * @ [evalProg.diderot:37.46-53] 
                                Lit: 12 @ [evalProg.diderot:37.46-48] 
                                Var: x @ [evalProg.diderot:37.51-52] 
                              BinOp: + @ [evalProg.diderot:37.56-72] 
                                BinOp: + @ [evalProg.diderot:37.56-69] 
                                  UnaryOp: unary - @ [evalProg.diderot:37.56-61] 
                                    BinOp: ^ @ [evalProg.diderot:37.57-61] 
                                      Var: x @ [evalProg.diderot:37.57-58] 
                                      Lit: 3 @ [evalProg.diderot:37.59-60] 
                                  BinOp: * @ [evalProg.diderot:37.63-69] 
                                    Lit: 2 @ [evalProg.diderot:37.63-64] 
                                    Var: x @ [evalProg.diderot:37.67-68] 
                                Var: y @ [evalProg.diderot:37.71-72] 
                          BinOp: * @ [evalProg.diderot:37.75-90] 
                            Lit: 2 @ [evalProg.diderot:37.75-76] 
                            BinOp: - @ [evalProg.diderot:37.80-89] 
                              Lit: 2 @ [evalProg.diderot:37.80-81] 
                              BinOp: * @ [evalProg.diderot:37.84-89] 
                                Lit: 3 @ [evalProg.diderot:37.84-85] 
                                BinOp: ^ @ [evalProg.diderot:37.86-89] 
                                  Var: x @ [evalProg.diderot:37.86-87] 
                                  Lit: 2 @ [evalProg.diderot:37.88-89] 
                          Lit: 0 @ [evalProg.diderot:37.92-93] 
                        ]
                      Cons @ [evalProg.diderot:37.96-117] 
                        [
                          BinOp: * @ [evalProg.diderot:37.97-110] 
                            Lit: 2 @ [evalProg.diderot:37.97-98] 
                            BinOp: - @ [evalProg.diderot:37.101-109] 
                              Lit: 2 @ [evalProg.diderot:37.101-102] 
                              BinOp: * @ [evalProg.diderot:37.104-109] 
                                Lit: 3 @ [evalProg.diderot:37.104-105] 
                                BinOp: ^ @ [evalProg.diderot:37.106-109] 
                                  Var: x @ [evalProg.diderot:37.106-107] 
                                  Lit: 2 @ [evalProg.diderot:37.108-109] 
                          Lit: 2 @ [evalProg.diderot:37.112-113] 
                          Lit: 0 @ [evalProg.diderot:37.115-116] 
                        ]
                      Cons @ [evalProg.diderot:37.119-135] 
                        [
                          Lit: 0 @ [evalProg.diderot:37.120-121] 
                          Lit: 0 @ [evalProg.diderot:37.123-124] 
                          BinOp: * @ [evalProg.diderot:37.126-134] 
                            Lit: 2 @ [evalProg.diderot:37.126-127] 
                            Var: zfuz @ [evalProg.diderot:37.130-134] 
                        ]
                    ]
              Decl @ [evalProg.diderot:33.29-48.0] 
                Decl: g= @ [evalProg.diderot:38.3-39.0] 
                  Cons @ [evalProg.diderot:38.12-86] 
                    [
                      BinOp: * @ [evalProg.diderot:38.13-50] 
                        BinOp: * @ [evalProg.diderot:38.13-31] 
                          Lit: 2 @ [evalProg.diderot:38.13-14] 
                          BinOp: - @ [evalProg.diderot:38.18-29] 
                            Lit: 2 @ [evalProg.diderot:38.18-19] 
                            BinOp: * @ [evalProg.diderot:38.22-29] 
                              Lit: 3 @ [evalProg.diderot:38.22-23] 
                              BinOp: ^ @ [evalProg.diderot:38.26-29] 
                                Var: x @ [evalProg.diderot:38.26-27] 
                                Lit: 2 @ [evalProg.diderot:38.28-29] 
                        BinOp: + @ [evalProg.diderot:38.33-49] 
                          BinOp: + @ [evalProg.diderot:38.33-46] 
                            UnaryOp: unary - @ [evalProg.diderot:38.33-38] 
                              BinOp: ^ @ [evalProg.diderot:38.34-38] 
                                Var: x @ [evalProg.diderot:38.34-35] 
                                Lit: 3 @ [evalProg.diderot:38.36-37] 
                            BinOp: * @ [evalProg.diderot:38.40-46] 
                              Lit: 2 @ [evalProg.diderot:38.40-41] 
                              Var: x @ [evalProg.diderot:38.44-45] 
                          Var: y @ [evalProg.diderot:38.48-49] 
                      BinOp: * @ [evalProg.diderot:38.52-71] 
                        Lit: 2 @ [evalProg.diderot:38.52-53] 
                        BinOp: + @ [evalProg.diderot:38.56-70] 
                          BinOp: + @ [evalProg.diderot:38.56-67] 
                            UnaryOp: unary - @ [evalProg.diderot:38.56-61] 
                              BinOp: ^ @ [evalProg.diderot:38.57-61] 
                                Var: x @ [evalProg.diderot:38.57-58] 
                                Lit: 3 @ [evalProg.diderot:38.59-60] 
                            BinOp: * @ [evalProg.diderot:38.63-67] 
                              Lit: 2 @ [evalProg.diderot:38.63-64] 
                              Var: x @ [evalProg.diderot:38.65-66] 
                          Var: y @ [evalProg.diderot:38.69-70] 
                      BinOp: * @ [evalProg.diderot:38.73-85] 
                        BinOp: * @ [evalProg.diderot:38.73-82] 
                          Lit: 2 @ [evalProg.diderot:38.73-74] 
                          Var: zfuz @ [evalProg.diderot:38.77-81] 
                        Var: z @ [evalProg.diderot:38.84-85] 
                    ]
              Decl @ [evalProg.diderot:33.29-48.0] 
                Decl: E= @ [evalProg.diderot:39.3-40.0] 
                  Apply @ [evalProg.diderot:39.15-23] 
                    Var: evecs @ [evalProg.diderot:39.15-20] 
                    [
                      Var: H @ [evalProg.diderot:39.21-22] 
                    ]
              Decl @ [evalProg.diderot:33.29-48.0] 
                Decl: L= @ [evalProg.diderot:40.3-41.0] 
                  Apply @ [evalProg.diderot:40.15-23] 
                    Var: evals @ [evalProg.diderot:40.15-20] 
                    [
                      Var: H @ [evalProg.diderot:40.21-22] 
                    ]
              Decl @ [evalProg.diderot:33.29-48.0] 
                Decl: up= @ [evalProg.diderot:41.3-42.0] 
                  BinOp: • @ [evalProg.diderot:41.14-39] 
                    BinOp: ⊗ @ [evalProg.diderot:41.14-35] 
                      BinOp: * @ [evalProg.diderot:41.14-28] 
                        UnaryOp: unary - @ [evalProg.diderot:41.14-23] 
                          BinOp: / @ [evalProg.diderot:41.16-22] 
                            Lit: 1 @ [evalProg.diderot:41.16-17] 
                            Subscript @ [evalProg.diderot:41.18-22] 
                              Var: L @ [evalProg.diderot:41.18-19] 
                              [
                                Lit: 0 @ [evalProg.diderot:41.20-21] 
                              ]
                        Subscript @ [evalProg.diderot:41.24-28] 
                          Var: E @ [evalProg.diderot:41.24-25] 
                          [
                            Lit: 0 @ [evalProg.diderot:41.26-27] 
                          ]
                      Subscript @ [evalProg.diderot:41.31-35] 
                        Var: E @ [evalProg.diderot:41.31-32] 
                        [
                          Lit: 0 @ [evalProg.diderot:41.33-34] 
                        ]
                    Var: g @ [evalProg.diderot:41.38-39] 
              IfThen @ [evalProg.diderot:42.3-45.3] 
                OrElse @ [evalProg.diderot:42.6-66] 
                  UnaryOp: ! @ [evalProg.diderot:42.6-24] 
                    BinOp: == @ [evalProg.diderot:42.8-22] 
                      Subscript @ [evalProg.diderot:42.8-13] 
                        Var: up @ [evalProg.diderot:42.8-10] 
                        [
                          Lit: 0 @ [evalProg.diderot:42.11-12] 
                        ]
                      Subscript @ [evalProg.diderot:42.17-22] 
                        Var: up @ [evalProg.diderot:42.17-19] 
                        [
                          Lit: 0 @ [evalProg.diderot:42.20-21] 
                        ]
                  OrElse @ [evalProg.diderot:42.24-66] 
                    UnaryOp: ! @ [evalProg.diderot:42.28-46] 
                      BinOp: == @ [evalProg.diderot:42.30-44] 
                        Subscript @ [evalProg.diderot:42.30-35] 
                          Var: up @ [evalProg.diderot:42.30-32] 
                          [
                            Lit: 1 @ [evalProg.diderot:42.33-34] 
                          ]
                        Subscript @ [evalProg.diderot:42.39-44] 
                          Var: up @ [evalProg.diderot:42.39-41] 
                          [
                            Lit: 1 @ [evalProg.diderot:42.42-43] 
                          ]
                    UnaryOp: ! @ [evalProg.diderot:42.49-66] 
                      BinOp: == @ [evalProg.diderot:42.51-65] 
                        Subscript @ [evalProg.diderot:42.51-56] 
                          Var: up @ [evalProg.diderot:42.51-53] 
                          [
                            Lit: 2 @ [evalProg.diderot:42.54-55] 
                          ]
                        Subscript @ [evalProg.diderot:42.60-65] 
                          Var: up @ [evalProg.diderot:42.60-62] 
                          [
                            Lit: 2 @ [evalProg.diderot:42.63-64] 
                          ]
                Return @ [evalProg.diderot:43.5-44.0] 
                  Cons @ [evalProg.diderot:43.12-27] 
                    [
                      Lit: +inf @ [evalProg.diderot:43.13-16] 
                      Lit: +inf @ [evalProg.diderot:43.18-21] 
                      Lit: +inf @ [evalProg.diderot:43.23-26] 
                    ]
              Return @ [evalProg.diderot:45.3-46.0] 
                Var: up @ [evalProg.diderot:45.10-12] 
            ]
      Func: posNanCheck @ [evalProg.diderot:49.1-53.1] 
        Bool @ [evalProg.diderot:49.10-15] 
        [
          Param: up @ [evalProg.diderot:49.27-34] 
            Tensor @ [evalProg.diderot:49.27-32] 
              [
                Lit: 3 @ [evalProg.diderot:49.27-32] 
              ]
        ]
        Stmt @ [evalProg.diderot:49.1-53.1] 
          Return @ [evalProg.diderot:50.3-51.0] 
            OrElse @ [evalProg.diderot:50.11-71] 
              UnaryOp: ! @ [evalProg.diderot:50.11-29] 
                BinOp: == @ [evalProg.diderot:50.13-27] 
                  Subscript @ [evalProg.diderot:50.13-18] 
                    Var: up @ [evalProg.diderot:50.13-15] 
                    [
                      Lit: 0 @ [evalProg.diderot:50.16-17] 
                    ]
                  Subscript @ [evalProg.diderot:50.22-27] 
                    Var: up @ [evalProg.diderot:50.22-24] 
                    [
                      Lit: 0 @ [evalProg.diderot:50.25-26] 
                    ]
              OrElse @ [evalProg.diderot:50.29-71] 
                UnaryOp: ! @ [evalProg.diderot:50.33-51] 
                  BinOp: == @ [evalProg.diderot:50.35-49] 
                    Subscript @ [evalProg.diderot:50.35-40] 
                      Var: up @ [evalProg.diderot:50.35-37] 
                      [
                        Lit: 1 @ [evalProg.diderot:50.38-39] 
                      ]
                    Subscript @ [evalProg.diderot:50.44-49] 
                      Var: up @ [evalProg.diderot:50.44-46] 
                      [
                        Lit: 1 @ [evalProg.diderot:50.47-48] 
                      ]
                UnaryOp: ! @ [evalProg.diderot:50.54-71] 
                  BinOp: == @ [evalProg.diderot:50.56-70] 
                    Subscript @ [evalProg.diderot:50.56-61] 
                      Var: up @ [evalProg.diderot:50.56-58] 
                      [
                        Lit: 2 @ [evalProg.diderot:50.59-60] 
                      ]
                    Subscript @ [evalProg.diderot:50.65-70] 
                      Var: up @ [evalProg.diderot:50.65-67] 
                      [
                        Lit: 2 @ [evalProg.diderot:50.68-69] 
                      ]
      Func: fPerp @ [evalProg.diderot:53.1-68.1] 
        Tensor @ [evalProg.diderot:53.10-21] 
          [
            Lit: 3 @ [evalProg.diderot:53.17-18] 
            Lit: 3 @ [evalProg.diderot:53.19-20] 
          ]
        [
          Param: s @ [evalProg.diderot:53.28-34] 
            Tensor @ [evalProg.diderot:53.28-33] 
              [
                Lit: 3 @ [evalProg.diderot:53.28-33] 
              ]
        ]
        Stmt @ [evalProg.diderot:53.1-68.1] 
          Block @ [evalProg.diderot:53.36-67.0] 
            [
              Decl @ [evalProg.diderot:53.36-67.0] 
                Decl: x= @ [evalProg.diderot:54.3-55.0] 
                  Subscript @ [evalProg.diderot:54.12-16] 
                    Var: s @ [evalProg.diderot:54.12-13] 
                    [
                      Lit: 0 @ [evalProg.diderot:54.14-15] 
                    ]
              Decl @ [evalProg.diderot:53.36-67.0] 
                Decl: y= @ [evalProg.diderot:55.3-56.0] 
                  Subscript @ [evalProg.diderot:55.12-16] 
                    Var: s @ [evalProg.diderot:55.12-13] 
                    [
                      Lit: 1 @ [evalProg.diderot:55.14-15] 
                    ]
              Decl @ [evalProg.diderot:53.36-67.0] 
                Decl: z= @ [evalProg.diderot:56.3-57.0] 
                  Subscript @ [evalProg.diderot:56.12-16] 
                    Var: s @ [evalProg.diderot:56.12-13] 
                    [
                      Lit: 2 @ [evalProg.diderot:56.14-15] 
                    ]
              Decl @ [evalProg.diderot:53.36-67.0] 
                Decl: H= @ [evalProg.diderot:57.3-58.0] 
                  Cons @ [evalProg.diderot:57.24-136] 
                    [
                      Cons @ [evalProg.diderot:57.25-94] 
                        [
                          BinOp: - @ [evalProg.diderot:57.26-73] 
                            BinOp: * @ [evalProg.diderot:57.26-44] 
                              Lit: 2 @ [evalProg.diderot:57.26-27] 
                              BinOp: ^ @ [evalProg.diderot:57.30-44] 
                                BinOp: - @ [evalProg.diderot:57.31-40] 
                                  Lit: 2 @ [evalProg.diderot:57.31-32] 
                                  BinOp: * @ [evalProg.diderot:57.35-40] 
                                    Lit: 3 @ [evalProg.diderot:57.35-36] 
                                    BinOp: ^ @ [evalProg.diderot:57.37-40] 
                                      Var: x @ [evalProg.diderot:57.37-38] 
                                      Lit: 2 @ [evalProg.diderot:57.39-40] 
                                Lit: 2 @ [evalProg.diderot:57.42-43] 
                            BinOp: * @ [evalProg.diderot:57.46-73] 
                              BinOp: * @ [evalProg.diderot:57.46-53] 
                                Lit: 12 @ [evalProg.diderot:57.46-48] 
                                Var: x @ [evalProg.diderot:57.51-52] 
                              BinOp: + @ [evalProg.diderot:57.56-72] 
                                BinOp: + @ [evalProg.diderot:57.56-69] 
                                  UnaryOp: unary - @ [evalProg.diderot:57.56-61] 
                                    BinOp: ^ @ [evalProg.diderot:57.57-61] 
                                      Var: x @ [evalProg.diderot:57.57-58] 
                                      Lit: 3 @ [evalProg.diderot:57.59-60] 
                                  BinOp: * @ [evalProg.diderot:57.63-69] 
                                    Lit: 2 @ [evalProg.diderot:57.63-64] 
                                    Var: x @ [evalProg.diderot:57.67-68] 
                                Var: y @ [evalProg.diderot:57.71-72] 
                          BinOp: * @ [evalProg.diderot:57.75-90] 
                            Lit: 2 @ [evalProg.diderot:57.75-76] 
                            BinOp: - @ [evalProg.diderot:57.80-89] 
                              Lit: 2 @ [evalProg.diderot:57.80-81] 
                              BinOp: * @ [evalProg.diderot:57.84-89] 
                                Lit: 3 @ [evalProg.diderot:57.84-85] 
                                BinOp: ^ @ [evalProg.diderot:57.86-89] 
                                  Var: x @ [evalProg.diderot:57.86-87] 
                                  Lit: 2 @ [evalProg.diderot:57.88-89] 
                          Lit: 0 @ [evalProg.diderot:57.92-93] 
                        ]
                      Cons @ [evalProg.diderot:57.96-117] 
                        [
                          BinOp: * @ [evalProg.diderot:57.97-110] 
                            Lit: 2 @ [evalProg.diderot:57.97-98] 
                            BinOp: - @ [evalProg.diderot:57.101-109] 
                              Lit: 2 @ [evalProg.diderot:57.101-102] 
                              BinOp: * @ [evalProg.diderot:57.104-109] 
                                Lit: 3 @ [evalProg.diderot:57.104-105] 
                                BinOp: ^ @ [evalProg.diderot:57.106-109] 
                                  Var: x @ [evalProg.diderot:57.106-107] 
                                  Lit: 2 @ [evalProg.diderot:57.108-109] 
                          Lit: 2 @ [evalProg.diderot:57.112-113] 
                          Lit: 0 @ [evalProg.diderot:57.115-116] 
                        ]
                      Cons @ [evalProg.diderot:57.119-135] 
                        [
                          Lit: 0 @ [evalProg.diderot:57.120-121] 
                          Lit: 0 @ [evalProg.diderot:57.123-124] 
                          BinOp: * @ [evalProg.diderot:57.126-134] 
                            Lit: 2 @ [evalProg.diderot:57.126-127] 
                            Var: zfuz @ [evalProg.diderot:57.130-134] 
                        ]
                    ]
              Decl @ [evalProg.diderot:53.36-67.0] 
                Decl: E2= @ [evalProg.diderot:58.3-59.0] 
                  Subscript @ [evalProg.diderot:58.13-24] 
                    Apply @ [evalProg.diderot:58.13-24] 
                      Var: evecs @ [evalProg.diderot:58.13-18] 
                      [
                        Var: H @ [evalProg.diderot:58.19-20] 
                      ]
                    [
                      Lit: 0 @ [evalProg.diderot:58.22-23] 
                    ]
              Decl @ [evalProg.diderot:53.36-67.0] 
                Decl: m= @ [evalProg.diderot:60.3-61.0] 
                  BinOp: - @ [evalProg.diderot:60.13-34] 
                    Id @ [evalProg.diderot:60.13-24] 
                      Lit: 3 @ [evalProg.diderot:60.22-23] 
                    BinOp: ⊗ @ [evalProg.diderot:60.27-34] 
                      Var: E2 @ [evalProg.diderot:60.27-29] 
                      Var: E2 @ [evalProg.diderot:60.32-34] 
              Decl @ [evalProg.diderot:53.36-67.0] 
                Decl: t= @ [evalProg.diderot:61.3-62.0] 
                  BinOp: : @ [evalProg.diderot:61.12-17] 
                    Var: m @ [evalProg.diderot:61.12-13] 
                    Var: m @ [evalProg.diderot:61.16-17] 
              IfThen @ [evalProg.diderot:62.3-65.3] 
                UnaryOp: ! @ [evalProg.diderot:62.6-15] 
                  BinOp: == @ [evalProg.diderot:62.8-14] 
                    Var: t @ [evalProg.diderot:62.8-9] 
                    Var: t @ [evalProg.diderot:62.13-14] 
                Return @ [evalProg.diderot:63.5-64.0] 
                  Zero @ [evalProg.diderot:63.12-22] 
                    [
                      Lit: 3 @ [evalProg.diderot:63.18-19] 
                      Lit: 3 @ [evalProg.diderot:63.20-21] 
                    ]
              Return @ [evalProg.diderot:65.3-66.0] 
                Var: m @ [evalProg.diderot:65.10-11] 
            ]
      Func: fStrength @ [evalProg.diderot:68.1-77.1] 
        Tensor @ [evalProg.diderot:68.10-15] 
          [ ]
        [
          Param: s @ [evalProg.diderot:68.25-31] 
            Tensor @ [evalProg.diderot:68.25-30] 
              [
                Lit: 3 @ [evalProg.diderot:68.25-30] 
              ]
        ]
        Stmt @ [evalProg.diderot:68.1-77.1] 
          Block @ [evalProg.diderot:68.33-76.0] 
            [
              Decl @ [evalProg.diderot:68.33-76.0] 
                Decl: x= @ [evalProg.diderot:69.3-70.0] 
                  Subscript @ [evalProg.diderot:69.12-16] 
                    Var: s @ [evalProg.diderot:69.12-13] 
                    [
                      Lit: 0 @ [evalProg.diderot:69.14-15] 
                    ]
              Decl @ [evalProg.diderot:68.33-76.0] 
                Decl: y= @ [evalProg.diderot:70.3-71.0] 
                  Subscript @ [evalProg.diderot:70.12-16] 
                    Var: s @ [evalProg.diderot:70.12-13] 
                    [
                      Lit: 1 @ [evalProg.diderot:70.14-15] 
                    ]
              Decl @ [evalProg.diderot:68.33-76.0] 
                Decl: z= @ [evalProg.diderot:71.3-72.0] 
                  Subscript @ [evalProg.diderot:71.12-16] 
                    Var: s @ [evalProg.diderot:71.12-13] 
                    [
                      Lit: 2 @ [evalProg.diderot:71.14-15] 
                    ]
              Decl @ [evalProg.diderot:68.33-76.0] 
                Decl: H= @ [evalProg.diderot:72.3-73.0] 
                  Cons @ [evalProg.diderot:72.24-136] 
                    [
                      Cons @ [evalProg.diderot:72.25-94] 
                        [
                          BinOp: - @ [evalProg.diderot:72.26-73] 
                            BinOp: * @ [evalProg.diderot:72.26-44] 
                              Lit: 2 @ [evalProg.diderot:72.26-27] 
                              BinOp: ^ @ [evalProg.diderot:72.30-44] 
                                BinOp: - @ [evalProg.diderot:72.31-40] 
                                  Lit: 2 @ [evalProg.diderot:72.31-32] 
                                  BinOp: * @ [evalProg.diderot:72.35-40] 
                                    Lit: 3 @ [evalProg.diderot:72.35-36] 
                                    BinOp: ^ @ [evalProg.diderot:72.37-40] 
                                      Var: x @ [evalProg.diderot:72.37-38] 
                                      Lit: 2 @ [evalProg.diderot:72.39-40] 
                                Lit: 2 @ [evalProg.diderot:72.42-43] 
                            BinOp: * @ [evalProg.diderot:72.46-73] 
                              BinOp: * @ [evalProg.diderot:72.46-53] 
                                Lit: 12 @ [evalProg.diderot:72.46-48] 
                                Var: x @ [evalProg.diderot:72.51-52] 
                              BinOp: + @ [evalProg.diderot:72.56-72] 
                                BinOp: + @ [evalProg.diderot:72.56-69] 
                                  UnaryOp: unary - @ [evalProg.diderot:72.56-61] 
                                    BinOp: ^ @ [evalProg.diderot:72.57-61] 
                                      Var: x @ [evalProg.diderot:72.57-58] 
                                      Lit: 3 @ [evalProg.diderot:72.59-60] 
                                  BinOp: * @ [evalProg.diderot:72.63-69] 
                                    Lit: 2 @ [evalProg.diderot:72.63-64] 
                                    Var: x @ [evalProg.diderot:72.67-68] 
                                Var: y @ [evalProg.diderot:72.71-72] 
                          BinOp: * @ [evalProg.diderot:72.75-90] 
                            Lit: 2 @ [evalProg.diderot:72.75-76] 
                            BinOp: - @ [evalProg.diderot:72.80-89] 
                              Lit: 2 @ [evalProg.diderot:72.80-81] 
                              BinOp: * @ [evalProg.diderot:72.84-89] 
                                Lit: 3 @ [evalProg.diderot:72.84-85] 
                                BinOp: ^ @ [evalProg.diderot:72.86-89] 
                                  Var: x @ [evalProg.diderot:72.86-87] 
                                  Lit: 2 @ [evalProg.diderot:72.88-89] 
                          Lit: 0 @ [evalProg.diderot:72.92-93] 
                        ]
                      Cons @ [evalProg.diderot:72.96-117] 
                        [
                          BinOp: * @ [evalProg.diderot:72.97-110] 
                            Lit: 2 @ [evalProg.diderot:72.97-98] 
                            BinOp: - @ [evalProg.diderot:72.101-109] 
                              Lit: 2 @ [evalProg.diderot:72.101-102] 
                              BinOp: * @ [evalProg.diderot:72.104-109] 
                                Lit: 3 @ [evalProg.diderot:72.104-105] 
                                BinOp: ^ @ [evalProg.diderot:72.106-109] 
                                  Var: x @ [evalProg.diderot:72.106-107] 
                                  Lit: 2 @ [evalProg.diderot:72.108-109] 
                          Lit: 2 @ [evalProg.diderot:72.112-113] 
                          Lit: 0 @ [evalProg.diderot:72.115-116] 
                        ]
                      Cons @ [evalProg.diderot:72.119-135] 
                        [
                          Lit: 0 @ [evalProg.diderot:72.120-121] 
                          Lit: 0 @ [evalProg.diderot:72.123-124] 
                          BinOp: * @ [evalProg.diderot:72.126-134] 
                            Lit: 2 @ [evalProg.diderot:72.126-127] 
                            Var: zfuz @ [evalProg.diderot:72.130-134] 
                        ]
                    ]
              Decl @ [evalProg.diderot:68.33-76.0] 
                Decl: g= @ [evalProg.diderot:73.3-74.0] 
                  Cons @ [evalProg.diderot:73.12-86] 
                    [
                      BinOp: * @ [evalProg.diderot:73.13-50] 
                        BinOp: * @ [evalProg.diderot:73.13-31] 
                          Lit: 2 @ [evalProg.diderot:73.13-14] 
                          BinOp: - @ [evalProg.diderot:73.18-29] 
                            Lit: 2 @ [evalProg.diderot:73.18-19] 
                            BinOp: * @ [evalProg.diderot:73.22-29] 
                              Lit: 3 @ [evalProg.diderot:73.22-23] 
                              BinOp: ^ @ [evalProg.diderot:73.26-29] 
                                Var: x @ [evalProg.diderot:73.26-27] 
                                Lit: 2 @ [evalProg.diderot:73.28-29] 
                        BinOp: + @ [evalProg.diderot:73.33-49] 
                          BinOp: + @ [evalProg.diderot:73.33-46] 
                            UnaryOp: unary - @ [evalProg.diderot:73.33-38] 
                              BinOp: ^ @ [evalProg.diderot:73.34-38] 
                                Var: x @ [evalProg.diderot:73.34-35] 
                                Lit: 3 @ [evalProg.diderot:73.36-37] 
                            BinOp: * @ [evalProg.diderot:73.40-46] 
                              Lit: 2 @ [evalProg.diderot:73.40-41] 
                              Var: x @ [evalProg.diderot:73.44-45] 
                          Var: y @ [evalProg.diderot:73.48-49] 
                      BinOp: * @ [evalProg.diderot:73.52-71] 
                        Lit: 2 @ [evalProg.diderot:73.52-53] 
                        BinOp: + @ [evalProg.diderot:73.56-70] 
                          BinOp: + @ [evalProg.diderot:73.56-67] 
                            UnaryOp: unary - @ [evalProg.diderot:73.56-61] 
                              BinOp: ^ @ [evalProg.diderot:73.57-61] 
                                Var: x @ [evalProg.diderot:73.57-58] 
                                Lit: 3 @ [evalProg.diderot:73.59-60] 
                            BinOp: * @ [evalProg.diderot:73.63-67] 
                              Lit: 2 @ [evalProg.diderot:73.63-64] 
                              Var: x @ [evalProg.diderot:73.65-66] 
                          Var: y @ [evalProg.diderot:73.69-70] 
                      BinOp: * @ [evalProg.diderot:73.73-85] 
                        BinOp: * @ [evalProg.diderot:73.73-82] 
                          Lit: 2 @ [evalProg.diderot:73.73-74] 
                          Var: zfuz @ [evalProg.diderot:73.77-81] 
                        Var: z @ [evalProg.diderot:73.84-85] 
                    ]
              Return @ [evalProg.diderot:74.3-75.0] 
                BinOp: / @ [evalProg.diderot:74.10-35] 
                  Subscript @ [evalProg.diderot:74.10-21] 
                    Apply @ [evalProg.diderot:74.10-21] 
                      Var: evals @ [evalProg.diderot:74.10-15] 
                      [
                        Var: H @ [evalProg.diderot:74.16-17] 
                      ]
                    [
                      Lit: 0 @ [evalProg.diderot:74.19-20] 
                    ]
                  BinOp: + @ [evalProg.diderot:74.23-34] 
                    Var: fBias @ [evalProg.diderot:74.23-28] 
                    UnaryOp: |()| @ [evalProg.diderot:74.31-34] 
                      Var: g @ [evalProg.diderot:74.32-33] 
            ]
      Func: phi @ [evalProg.diderot:77.1-78.0] 
        Tensor @ [evalProg.diderot:77.10-15] 
          [ ]
        [
          Param: r @ [evalProg.diderot:77.19-25] 
            Tensor @ [evalProg.diderot:77.19-24] 
              [ ]
        ]
        Expr @ [evalProg.diderot:77.1-78.0] 
          BinOp: ^ @ [evalProg.diderot:77.29-36] 
            BinOp: - @ [evalProg.diderot:77.30-33] 
              Lit: 1 @ [evalProg.diderot:77.30-31] 
              Var: r @ [evalProg.diderot:77.32-33] 
            Lit: 4 @ [evalProg.diderot:77.35-36] 
      Func: phi' @ [evalProg.diderot:78.1-79.0] 
        Tensor @ [evalProg.diderot:78.10-15] 
          [ ]
        [
          Param: r @ [evalProg.diderot:78.20-26] 
            Tensor @ [evalProg.diderot:78.20-25] 
              [ ]
        ]
        Expr @ [evalProg.diderot:78.1-79.0] 
          BinOp: * @ [evalProg.diderot:78.30-42] 
            UnaryOp: unary - @ [evalProg.diderot:78.30-33] 
              Lit: 4 @ [evalProg.diderot:78.31-32] 
            BinOp: ^ @ [evalProg.diderot:78.35-42] 
              BinOp: - @ [evalProg.diderot:78.36-39] 
                Lit: 1 @ [evalProg.diderot:78.36-37] 
                Var: r @ [evalProg.diderot:78.38-39] 
              Lit: 3 @ [evalProg.diderot:78.41-42] 
      Func: enr @ [evalProg.diderot:79.1-80.0] 
        Tensor @ [evalProg.diderot:79.10-15] 
          [ ]
        [
          Param: x @ [evalProg.diderot:79.19-32] 
            Tensor @ [evalProg.diderot:79.19-30] 
              [
                Var: dim @ [evalProg.diderot:79.26-29] 
              ]
        ]
        Expr @ [evalProg.diderot:79.1-80.0] 
          Apply @ [evalProg.diderot:79.36-48] 
            Var: phi @ [evalProg.diderot:79.36-39] 
            [
              BinOp: / @ [evalProg.diderot:79.40-47] 
                UnaryOp: |()| @ [evalProg.diderot:79.40-43] 
                  Var: x @ [evalProg.diderot:79.41-42] 
                Var: rad @ [evalProg.diderot:79.44-47] 
            ]
      Func: frc @ [evalProg.diderot:80.1-81.0] 
        Tensor @ [evalProg.diderot:80.10-21] 
          [
            Var: dim @ [evalProg.diderot:80.17-20] 
          ]
        [
          Param: x @ [evalProg.diderot:80.26-39] 
            Tensor @ [evalProg.diderot:80.26-37] 
              [
                Var: dim @ [evalProg.diderot:80.33-36] 
              ]
        ]
        Expr @ [evalProg.diderot:80.1-81.0] 
          BinOp: / @ [evalProg.diderot:80.43-74] 
            BinOp: * @ [evalProg.diderot:80.43-70] 
              BinOp: * @ [evalProg.diderot:80.43-67] 
                Apply @ [evalProg.diderot:80.43-56] 
                  Var: phi' @ [evalProg.diderot:80.43-47] 
                  [
                    BinOp: / @ [evalProg.diderot:80.48-55] 
                      UnaryOp: |()| @ [evalProg.diderot:80.48-51] 
                        Var: x @ [evalProg.diderot:80.49-50] 
                      Var: rad @ [evalProg.diderot:80.52-55] 
                  ]
                BinOp: / @ [evalProg.diderot:80.60-65] 
                  Lit: 1 @ [evalProg.diderot:80.60-61] 
                  Var: rad @ [evalProg.diderot:80.62-65] 
              Var: x @ [evalProg.diderot:80.69-70] 
            UnaryOp: |()| @ [evalProg.diderot:80.71-74] 
              Var: x @ [evalProg.diderot:80.72-73] 
      Func: posTest @ [evalProg.diderot:82.1-86.1] 
        Bool @ [evalProg.diderot:82.10-15] 
        [
          Param: pos @ [evalProg.diderot:82.23-31] 
            Tensor @ [evalProg.diderot:82.23-28] 
              [
                Lit: 3 @ [evalProg.diderot:82.23-28] 
              ]
        ]
        Stmt @ [evalProg.diderot:82.1-86.1] 
          Return @ [evalProg.diderot:83.3-84.0] 
            AndAlso @ [evalProg.diderot:83.11-77] 
              Apply @ [evalProg.diderot:83.11-26] 
                Var: insideTest @ [evalProg.diderot:83.11-21] 
                [
                  Var: pos @ [evalProg.diderot:83.22-25] 
                ]
              AndAlso @ [evalProg.diderot:83.27-77] 
                UnaryOp: ! @ [evalProg.diderot:83.30-48] 
                  Apply @ [evalProg.diderot:83.31-47] 
                    Var: posNanCheck @ [evalProg.diderot:83.31-42] 
                    [
                      Var: pos @ [evalProg.diderot:83.43-46] 
                    ]
                BinOp: >= @ [evalProg.diderot:83.52-76] 
                  Apply @ [evalProg.diderot:83.52-66] 
                    Var: fStrength @ [evalProg.diderot:83.52-61] 
                    [
                      Var: pos @ [evalProg.diderot:83.62-65] 
                    ]
                  Var: fStren @ [evalProg.diderot:83.70-76] 
    ]
    Strand: particle @ [evalProg.diderot:86.1-171.1] 
      [
        Param: pos0 @ [evalProg.diderot:86.17-33] 
          Tensor @ [evalProg.diderot:86.17-28] 
            [
              Var: dim @ [evalProg.diderot:86.24-27] 
            ]
        Param: hh0 @ [evalProg.diderot:86.35-43] 
          Tensor @ [evalProg.diderot:86.35-40] 
            [ ]
      ]
      [
        VarDcl: output @ [evalProg.diderot:87.3-88.0] 
        VarDcl @ [evalProg.diderot:88.3-89.0] 
        VarDcl @ [evalProg.diderot:89.3-90.0] 
        VarDcl @ [evalProg.diderot:90.3-91.0] 
        VarDcl @ [evalProg.diderot:91.3-92.0] 
        VarDcl @ [evalProg.diderot:92.3-93.0] 
        VarDcl @ [evalProg.diderot:93.3-94.0] 
        VarDcl @ [evalProg.diderot:94.3-95.0] 
      ]
      [
        Method: Update @ [evalProg.diderot:95.3-170.1] 
          Block @ [evalProg.diderot:95.10-170.0] 
            [
              Assign: steps+= @ [evalProg.diderot:96.5-97.0] 
                Lit: 1 @ [evalProg.diderot:96.12-13] 
              IfThen @ [evalProg.diderot:97.5-100.5] 
                UnaryOp: ! @ [evalProg.diderot:97.8-21] 
                  Apply @ [evalProg.diderot:97.9-21] 
                    Var: posTest @ [evalProg.diderot:97.9-16] 
                    [
                      Var: pos @ [evalProg.diderot:97.17-20] 
                    ]
                Die @ [evalProg.diderot:98.7-99.0] 
              IfThenElse @ [evalProg.diderot:100.5-169.0] 
                UnaryOp: ! @ [evalProg.diderot:100.8-14] 
                  Var: found @ [evalProg.diderot:100.9-14] 
                Block @ [evalProg.diderot:100.16-113.0] 
                  [
                    Assign: step= @ [evalProg.diderot:101.7-102.0] 
                      Apply @ [evalProg.diderot:101.14-24] 
                        Var: fStep @ [evalProg.diderot:101.14-19] 
                        [
                          Var: pos @ [evalProg.diderot:101.20-23] 
                        ]
                    Assign: pos= @ [evalProg.diderot:102.7-103.0] 
                      BinOp: + @ [evalProg.diderot:102.13-23] 
                        Var: pos @ [evalProg.diderot:102.13-16] 
                        Var: step @ [evalProg.diderot:102.19-23] 
                    IfThen @ [evalProg.diderot:103.7-104.7] 
                      Apply @ [evalProg.diderot:103.10-26] 
                        Var: posNanCheck @ [evalProg.diderot:103.10-21] 
                        [
                          Var: pos @ [evalProg.diderot:103.22-25] 
                        ]
                      Die @ [evalProg.diderot:103.28-32] 
                    IfThenElse @ [evalProg.diderot:104.7-112.0] 
                      BinOp: > @ [evalProg.diderot:104.10-26] 
                        BinOp: / @ [evalProg.diderot:104.10-21] 
                          UnaryOp: |()| @ [evalProg.diderot:104.10-16] 
                            Var: step @ [evalProg.diderot:104.11-15] 
                          Var: rad @ [evalProg.diderot:104.17-20] 
                        Var: eps @ [evalProg.diderot:104.23-26] 
                      Block @ [evalProg.diderot:104.27-108.8] 
                        [
                          Assign: nfs+= @ [evalProg.diderot:105.2-106.0] 
                            Lit: 1 @ [evalProg.diderot:105.9-10] 
                          IfThen @ [evalProg.diderot:106.2-108.7] 
                            BinOp: > @ [evalProg.diderot:106.5-13] 
                              Var: nfs @ [evalProg.diderot:106.5-8] 
                              Lit: 10 @ [evalProg.diderot:106.11-13] 
                            Die @ [evalProg.diderot:106.17-21] 
                        ]
                      Block @ [evalProg.diderot:108.14-112.0] 
                        [
                          Assign: found= @ [evalProg.diderot:109.2-15] 
                            Lit: true @ [evalProg.diderot:109.10-14] 
                          Assign: testp= @ [evalProg.diderot:109.16-110.0] 
                            Lit: 1 @ [evalProg.diderot:109.22-23] 
                        ]
                  ]
                Block @ [evalProg.diderot:113.10-169.0] 
                  [
                    Assign: pos= @ [evalProg.diderot:114.2-115.0] 
                      BinOp: + @ [evalProg.diderot:114.8-24] 
                        Var: pos @ [evalProg.diderot:114.8-11] 
                        Apply @ [evalProg.diderot:114.14-24] 
                          Var: fStep @ [evalProg.diderot:114.14-19] 
                          [
                            Var: pos @ [evalProg.diderot:114.20-23] 
                          ]
                    IfThen @ [evalProg.diderot:115.2-116.2] 
                      Apply @ [evalProg.diderot:115.5-21] 
                        Var: posNanCheck @ [evalProg.diderot:115.5-16] 
                        [
                          Var: pos @ [evalProg.diderot:115.17-20] 
                        ]
                      Die @ [evalProg.diderot:115.23-27] 
                    Assign: step= @ [evalProg.diderot:116.2-117.0] 
                      Zero @ [evalProg.diderot:116.9-19] 
                        [
                          Var: dim @ [evalProg.diderot:116.15-18] 
                        ]
                    Decl @ [evalProg.diderot:113.10-169.0] 
                      Decl: oldE= @ [evalProg.diderot:117.2-118.0] 
                        Lit: 0 @ [evalProg.diderot:117.14-15] 
                    Decl @ [evalProg.diderot:113.10-169.0] 
                      Decl: force= @ [evalProg.diderot:118.2-119.0] 
                        Zero @ [evalProg.diderot:118.22-32] 
                          [
                            Var: dim @ [evalProg.diderot:118.28-31] 
                          ]
                    Decl @ [evalProg.diderot:113.10-169.0] 
                      Decl: nn= @ [evalProg.diderot:119.2-120.0] 
                        Lit: 0 @ [evalProg.diderot:119.11-12] 
                    Foreach @ [evalProg.diderot:123.2-128.0] 
                      Id: particle @ [evalProg.diderot:123.11-20] 
                      Iterator: P @ [evalProg.diderot:123.20-36] 
                        Apply @ [evalProg.diderot:123.25-36] 
                          Var: sphere @ [evalProg.diderot:123.25-31] 
                          [
                            Var: rad @ [evalProg.diderot:123.32-35] 
                          ]
                      Block @ [evalProg.diderot:123.37-128.0] 
                        [
                          Assign: oldE+= @ [evalProg.diderot:124.4-125.0] 
                            Apply @ [evalProg.diderot:124.12-28] 
                              Var: enr @ [evalProg.diderot:124.12-15] 
                              [
                                BinOp: - @ [evalProg.diderot:124.16-27] 
                                  Select @ [evalProg.diderot:124.16-21] 
                                    Var: P @ [evalProg.diderot:124.16-17] 
                                    pos
                                  Var: pos @ [evalProg.diderot:124.24-27] 
                              ]
                          Assign: force+= @ [evalProg.diderot:125.4-126.0] 
                            Apply @ [evalProg.diderot:125.13-29] 
                              Var: frc @ [evalProg.diderot:125.13-16] 
                              [
                                BinOp: - @ [evalProg.diderot:125.17-28] 
                                  Select @ [evalProg.diderot:125.17-22] 
                                    Var: P @ [evalProg.diderot:125.17-18] 
                                    pos
                                  Var: pos @ [evalProg.diderot:125.25-28] 
                              ]
                          Assign: nn+= @ [evalProg.diderot:126.4-127.0] 
                            Lit: 1 @ [evalProg.diderot:126.10-11] 
                        ]
                    IfThen @ [evalProg.diderot:128.2-137.2] 
                      BinOp: == @ [evalProg.diderot:128.6-13] 
                        Lit: 0 @ [evalProg.diderot:128.6-7] 
                        Var: nn @ [evalProg.diderot:128.11-13] 
                      Block @ [evalProg.diderot:128.14-137.0] 
                        [
                          Decl @ [evalProg.diderot:128.14-137.0] 
                            Decl: npos= @ [evalProg.diderot:131.4-132.0] 
                              BinOp: + @ [evalProg.diderot:131.16-37] 
                                Var: pos @ [evalProg.diderot:131.16-19] 
                                Cons @ [evalProg.diderot:131.22-37] 
                                  [
                                    BinOp: * @ [evalProg.diderot:131.23-30] 
                                      Lit: 0.5e0 @ [evalProg.diderot:131.23-26] 
                                      Var: rad @ [evalProg.diderot:131.27-30] 
                                    Lit: 0 @ [evalProg.diderot:131.32-33] 
                                    Lit: 0 @ [evalProg.diderot:131.34-35] 
                                  ]
                          IfThen @ [evalProg.diderot:132.4-135.4] 
                            Apply @ [evalProg.diderot:132.7-20] 
                              Var: posTest @ [evalProg.diderot:132.7-14] 
                              [
                                Var: npos @ [evalProg.diderot:132.15-19] 
                              ]
                            New: particle @ [evalProg.diderot:133.6-134.0] 
                              [
                                Var: npos @ [evalProg.diderot:133.19-23] 
                                Var: hh @ [evalProg.diderot:133.25-27] 
                              ]
                          Continue @ [evalProg.diderot:135.4-136.0] 
                        ]
                    Assign: force= @ [evalProg.diderot:137.2-138.0] 
                      BinOp: • @ [evalProg.diderot:137.10-30] 
                        Apply @ [evalProg.diderot:137.10-20] 
                          Var: fPerp @ [evalProg.diderot:137.10-15] 
                          [
                            Var: pos @ [evalProg.diderot:137.16-19] 
                          ]
                        Var: force @ [evalProg.diderot:137.25-30] 
                    Decl @ [evalProg.diderot:113.10-169.0] 
                      Decl: es= @ [evalProg.diderot:138.2-139.0] 
                        BinOp: * @ [evalProg.diderot:138.19-27] 
                          Var: hh @ [evalProg.diderot:138.19-21] 
                          Var: force @ [evalProg.diderot:138.22-27] 
                    IfThen @ [evalProg.diderot:139.2-143.2] 
                      BinOp: > @ [evalProg.diderot:139.5-15] 
                        UnaryOp: |()| @ [evalProg.diderot:139.5-9] 
                          Var: es @ [evalProg.diderot:139.6-8] 
                        Var: rad @ [evalProg.diderot:139.12-15] 
                      Block @ [evalProg.diderot:139.16-143.0] 
                        [
                          Assign: hh*= @ [evalProg.diderot:140.4-141.0] 
                            BinOp: / @ [evalProg.diderot:140.10-18] 
                              Var: rad @ [evalProg.diderot:140.10-13] 
                              UnaryOp: |()| @ [evalProg.diderot:140.14-18] 
                                Var: es @ [evalProg.diderot:140.15-17] 
                          Assign: es*= @ [evalProg.diderot:141.4-142.0] 
                            BinOp: / @ [evalProg.diderot:141.10-18] 
                              Var: rad @ [evalProg.diderot:141.10-13] 
                              UnaryOp: |()| @ [evalProg.diderot:141.14-18] 
                                Var: es @ [evalProg.diderot:141.15-17] 
                        ]
                    Decl @ [evalProg.diderot:113.10-169.0] 
                      Decl: samplePos= @ [evalProg.diderot:143.2-144.0] 
                        BinOp: + @ [evalProg.diderot:143.26-34] 
                          Var: pos @ [evalProg.diderot:143.26-29] 
                          Var: es @ [evalProg.diderot:143.32-34] 
                    Decl @ [evalProg.diderot:113.10-169.0] 
                      Decl: fs= @ [evalProg.diderot:144.2-145.0] 
                        Apply @ [evalProg.diderot:144.19-35] 
                          Var: fStep @ [evalProg.diderot:144.19-24] 
                          [
                            Var: samplePos @ [evalProg.diderot:144.25-34] 
                          ]
                    IfThen @ [evalProg.diderot:145.2-149.2] 
                      BinOp: > @ [evalProg.diderot:145.6-21] 
                        BinOp: / @ [evalProg.diderot:145.6-16] 
                          UnaryOp: |()| @ [evalProg.diderot:145.6-10] 
                            Var: fs @ [evalProg.diderot:145.7-9] 
                          UnaryOp: |()| @ [evalProg.diderot:145.11-15] 
                            Var: es @ [evalProg.diderot:145.12-14] 
                        Lit: 0.5e0 @ [evalProg.diderot:145.18-21] 
                      Block @ [evalProg.diderot:145.22-149.0] 
                        [
                          Assign: hh*= @ [evalProg.diderot:146.4-147.0] 
                            Lit: 0.5e0 @ [evalProg.diderot:146.10-13] 
                          Continue @ [evalProg.diderot:147.4-148.0] 
                        ]
                    Decl @ [evalProg.diderot:113.10-169.0] 
                      Decl: oldPos= @ [evalProg.diderot:149.2-150.0] 
                        Var: pos @ [evalProg.diderot:149.23-26] 
                    Decl @ [evalProg.diderot:113.10-169.0] 
                      Decl: up= @ [evalProg.diderot:150.2-151.0] 
                        BinOp: + @ [evalProg.diderot:150.19-26] 
                          Var: fs @ [evalProg.diderot:150.19-21] 
                          Var: es @ [evalProg.diderot:150.24-26] 
                    Assign: pos+= @ [evalProg.diderot:151.2-152.0] 
                      Var: up @ [evalProg.diderot:151.9-11] 
                    Decl @ [evalProg.diderot:113.10-169.0] 
                      Decl: newE= @ [evalProg.diderot:152.2-153.0] 
                        Apply @ [evalProg.diderot:152.14-55] 
                          Var: sum @ [evalProg.diderot:152.14-17] 
                          [
                            SeqComp @ [evalProg.diderot:152.14-55] 
                              Comprehension @ [evalProg.diderot:152.14-55] 
                                Apply @ [evalProg.diderot:152.19-35] 
                                  Var: enr @ [evalProg.diderot:152.19-22] 
                                  [
                                    BinOp: - @ [evalProg.diderot:152.23-34] 
                                      Var: pos @ [evalProg.diderot:152.23-26] 
                                      Select @ [evalProg.diderot:152.29-34] 
                                        Var: P @ [evalProg.diderot:152.29-30] 
                                        pos
                                  ]
                                [
                                  Iterator: P @ [evalProg.diderot:152.38-54] 
                                    Apply @ [evalProg.diderot:152.43-54] 
                                      Var: sphere @ [evalProg.diderot:152.43-49] 
                                      [
                                        Var: rad @ [evalProg.diderot:152.50-53] 
                                      ]
                                ]
                          ]
                    IfThen @ [evalProg.diderot:153.2-158.2] 
                      BinOp: > @ [evalProg.diderot:153.6-54] 
                        BinOp: - @ [evalProg.diderot:153.6-18] 
                          Var: newE @ [evalProg.diderot:153.6-10] 
                          Var: oldE @ [evalProg.diderot:153.13-17] 
                        BinOp: • @ [evalProg.diderot:153.20-54] 
                          BinOp: * @ [evalProg.diderot:153.20-41] 
                            Lit: 0.5e0 @ [evalProg.diderot:153.20-23] 
                            BinOp: - @ [evalProg.diderot:153.27-39] 
                              Var: pos @ [evalProg.diderot:153.27-30] 
                              Var: oldPos @ [evalProg.diderot:153.33-39] 
                          UnaryOp: unary - @ [evalProg.diderot:153.46-53] 
                            Var: force @ [evalProg.diderot:153.47-52] 
                      Block @ [evalProg.diderot:153.56-158.0] 
                        [
                          Assign: pos= @ [evalProg.diderot:154.4-155.0] 
                            Var: oldPos @ [evalProg.diderot:154.10-16] 
                          Assign: hh*= @ [evalProg.diderot:155.4-156.0] 
                            Lit: 0.5e0 @ [evalProg.diderot:155.10-13] 
                          Continue @ [evalProg.diderot:156.4-157.0] 
                        ]
                    Assign: hh*= @ [evalProg.diderot:158.2-159.0] 
                      Lit: 0.11e1 @ [evalProg.diderot:158.8-11] 
                    Assign: step= @ [evalProg.diderot:159.2-160.0] 
                      Var: up @ [evalProg.diderot:159.9-11] 
                    IfThen @ [evalProg.diderot:160.2-162.2] 
                      Apply @ [evalProg.diderot:160.5-21] 
                        Var: posNanCheck @ [evalProg.diderot:160.5-16] 
                        [
                          Var: pos @ [evalProg.diderot:160.17-20] 
                        ]
                      Die @ [evalProg.diderot:160.23-27] 
                    IfThen @ [evalProg.diderot:162.2-168.7] 
                      BinOp: < @ [evalProg.diderot:162.6-12] 
                        Var: nn @ [evalProg.diderot:162.6-8] 
                        Lit: 5 @ [evalProg.diderot:162.11-12] 
                      Block @ [evalProg.diderot:162.13-168.0] 
                        [
                          Decl @ [evalProg.diderot:162.13-168.0] 
                            Decl: npos= @ [evalProg.diderot:163.4-164.0] 
                              BinOp: + @ [evalProg.diderot:163.16-47] 
                                Var: pos @ [evalProg.diderot:163.16-19] 
                                BinOp: * @ [evalProg.diderot:163.22-47] 
                                  BinOp: * @ [evalProg.diderot:163.22-32] 
                                    Lit: 0.5e0 @ [evalProg.diderot:163.22-25] 
                                    Var: rad @ [evalProg.diderot:163.28-31] 
                                  Apply @ [evalProg.diderot:163.34-47] 
                                    Var: normalize @ [evalProg.diderot:163.34-43] 
                                    [
                                      Var: es @ [evalProg.diderot:163.44-46] 
                                    ]
                          IfThen @ [evalProg.diderot:164.4-167.2] 
                            Apply @ [evalProg.diderot:164.7-20] 
                              Var: posTest @ [evalProg.diderot:164.7-14] 
                              [
                                Var: npos @ [evalProg.diderot:164.15-19] 
                              ]
                            New: particle @ [evalProg.diderot:165.6-166.0] 
                              [
                                Var: npos @ [evalProg.diderot:165.19-23] 
                                Var: hh @ [evalProg.diderot:165.25-27] 
                              ]
                        ]
                  ]
            ]
      ]
    Collection @ [evalProg.diderot:181.1-182.0] 
      Comprehension @ [evalProg.diderot:181.19-47] 
        Apply @ [evalProg.diderot:181.20-34] 
          Var: particle @ [evalProg.diderot:181.20-28] 
          [
            Var: x @ [evalProg.diderot:181.29-30] 
            Lit: 1 @ [evalProg.diderot:181.32-33] 
          ]
        [
          Iterator: x @ [evalProg.diderot:181.37-46] 
            Var: ipos @ [evalProg.diderot:181.42-46] 
        ]
    Block @ [evalProg.diderot:171.8-181.0] 
      [
        Decl @ [evalProg.diderot:171.8-181.0] 
          Decl: num= @ [evalProg.diderot:172.3-173.0] 
            Apply @ [evalProg.diderot:172.13-45] 
              Var: sum @ [evalProg.diderot:172.13-16] 
              [
                SeqComp @ [evalProg.diderot:172.13-45] 
                  Comprehension @ [evalProg.diderot:172.13-45] 
                    Select @ [evalProg.diderot:172.18-24] 
                      Var: P @ [evalProg.diderot:172.18-19] 
                      test
                    [
                      Iterator: P @ [evalProg.diderot:172.27-44] 
                        Select @ [evalProg.diderot:172.32-44] 
                          Var: particle @ [evalProg.diderot:172.32-40] 
                          all
                    ]
              ]
        Decl @ [evalProg.diderot:171.8-181.0] 
          Decl: steps= @ [evalProg.diderot:173.3-174.0] 
            Apply @ [evalProg.diderot:173.15-48] 
              Var: max @ [evalProg.diderot:173.15-18] 
              [
                SeqComp @ [evalProg.diderot:173.15-48] 
                  Comprehension @ [evalProg.diderot:173.15-48] 
                    Select @ [evalProg.diderot:173.20-27] 
                      Var: P @ [evalProg.diderot:173.20-21] 
                      steps
                    [
                      Iterator: P @ [evalProg.diderot:173.30-47] 
                        Select @ [evalProg.diderot:173.35-47] 
                          Var: particle @ [evalProg.diderot:173.35-43] 
                          all
                    ]
              ]
        Decl @ [evalProg.diderot:171.8-181.0] 
          Decl: numFound= @ [evalProg.diderot:174.3-175.0] 
            Apply @ [evalProg.diderot:174.18-51] 
              Var: sum @ [evalProg.diderot:174.18-21] 
              [
                SeqComp @ [evalProg.diderot:174.18-51] 
                  Comprehension @ [evalProg.diderot:174.18-51] 
                    Select @ [evalProg.diderot:174.23-30] 
                      Var: P @ [evalProg.diderot:174.23-24] 
                      testp
                    [
                      Iterator: P @ [evalProg.diderot:174.33-50] 
                        Select @ [evalProg.diderot:174.38-50] 
                          Var: particle @ [evalProg.diderot:174.38-46] 
                          all
                    ]
              ]
        Decl @ [evalProg.diderot:171.8-181.0] 
          Decl: allFound= @ [evalProg.diderot:175.3-176.0] 
            Apply @ [evalProg.diderot:175.19-52] 
              Var: all @ [evalProg.diderot:175.19-22] 
              [
                SeqComp @ [evalProg.diderot:175.19-52] 
                  Comprehension @ [evalProg.diderot:175.19-52] 
                    Select @ [evalProg.diderot:175.24-31] 
                      Var: P @ [evalProg.diderot:175.24-25] 
                      found
                    [
                      Iterator: P @ [evalProg.diderot:175.34-51] 
                        Select @ [evalProg.diderot:175.39-51] 
                          Var: particle @ [evalProg.diderot:175.39-47] 
                          all
                    ]
              ]
        Decl @ [evalProg.diderot:171.8-181.0] 
          Decl: maxStep= @ [evalProg.diderot:176.3-177.0] 
            Apply @ [evalProg.diderot:176.18-52] 
              Var: max @ [evalProg.diderot:176.18-21] 
              [
                SeqComp @ [evalProg.diderot:176.18-52] 
                  Comprehension @ [evalProg.diderot:176.18-52] 
                    UnaryOp: |()| @ [evalProg.diderot:176.23-31] 
                      Select @ [evalProg.diderot:176.24-30] 
                        Var: P @ [evalProg.diderot:176.24-25] 
                        step
                    [
                      Iterator: P @ [evalProg.diderot:176.34-51] 
                        Select @ [evalProg.diderot:176.39-51] 
                          Var: particle @ [evalProg.diderot:176.39-47] 
                          all
                    ]
              ]
        Print @ [evalProg.diderot:177.3-178.0] 
          [
            Lit: "One run:" @ [evalProg.diderot:177.9-19] 
            Var: allFound @ [evalProg.diderot:177.21-29] 
            Lit: " and " @ [evalProg.diderot:177.31-38] 
            BinOp: / @ [evalProg.diderot:177.40-51] 
              Var: maxStep @ [evalProg.diderot:177.40-47] 
              Var: rad @ [evalProg.diderot:177.48-51] 
            Lit: " and " @ [evalProg.diderot:177.53-60] 
            BinOp: < @ [evalProg.diderot:177.63-80] 
              BinOp: / @ [evalProg.diderot:177.63-75] 
                Var: maxStep @ [evalProg.diderot:177.63-70] 
                Var: rad @ [evalProg.diderot:177.71-74] 
              Var: eps @ [evalProg.diderot:177.77-80] 
            Lit: " and " @ [evalProg.diderot:177.82-89] 
            Var: numFound @ [evalProg.diderot:177.91-99] 
            Lit: " of " @ [evalProg.diderot:177.101-107] 
            Var: num @ [evalProg.diderot:177.109-112] 
            Lit: "\n" @ [evalProg.diderot:177.114-118] 
          ]
        IfThen @ [evalProg.diderot:178.3-179.3] 
          AndAlso @ [evalProg.diderot:178.7-37] 
            Var: allFound @ [evalProg.diderot:178.7-15] 
            BinOp: < @ [evalProg.diderot:178.20-37] 
              BinOp: / @ [evalProg.diderot:178.20-32] 
                Var: maxStep @ [evalProg.diderot:178.20-27] 
                Var: rad @ [evalProg.diderot:178.28-31] 
              Var: eps @ [evalProg.diderot:178.34-37] 
          Block @ [evalProg.diderot:178.39-179.0] 
            [
              Print @ [evalProg.diderot:178.40-62] 
                [
                  Lit: "CONVERGED!\n" @ [evalProg.diderot:178.46-60] 
                ]
              Stabilize @ [evalProg.diderot:178.63-73] 
            ]
        IfThen @ [evalProg.diderot:179.3-180.1] 
          BinOp: > @ [evalProg.diderot:179.6-18] 
            Var: steps @ [evalProg.diderot:179.6-11] 
            Lit: 5000 @ [evalProg.diderot:179.14-18] 
          Stabilize @ [evalProg.diderot:179.20-30] 
      ]
/* end program */
/* AST: After typechecking */
properties: StabilizeAll,GlobalReduce,StrandSets,GlobalUpdate,NewStrands,StrandCommunication,StrandsMayDie,HasInputs,HasGlobals,HasConsts,ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
const int dim = 3;
input FemType: Mesh with type var:NONE meshData = loadFem(Mesh);
input FemType: Space with type var:mesh_t space = loadFem(Space);
input FemType: FemFunc with type var:fns_t data = loadFem(FemFunc);
input real rad = 0.1e-1;
input real eps = 0.1e-1;
input real v0 = 0.625e-1;
input real fBias = 0.1e-1;
input real fStren = 0.1e-1;
input real zfuz = 0.1e-1;
input vec3[] ipos;
function bool != (FemType: MeshCell with type var:mesh_t cell1, FemType: MeshCell with type var:mesh_t cell1)
{
  return != (extractFemItem(cell1, int, CellIndex(Mesh)), extractFemItem(cell1, int, CellIndex(Mesh)));
  }
function bool == (FemType: MeshCell with type var:mesh_t cell1, FemType: MeshCell with type var:mesh_t cell1)
{
  return == (extractFemItem(cell1, int, CellIndex(Mesh)), extractFemItem(cell1, int, CellIndex(Mesh)));
  }
function FemType: MeshPos with type var:mesh_t findPos (FemType: Mesh with type var:mesh_t mesh, vec3 pos)
{
  xn = [0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0, 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0, 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0];
  newtonInt = 0;
  cellInt = extractFemItem(mesh, int, StartCell(Mesh));
  numCell = - (extractFemItem(mesh, int, NumCell(Mesh)), 1);
  yayCells = extractFemItem(mesh, pos : vec3, int[], NearbyCell(File=spat.in)(Mesh));
  foreach (int cellItter in yayCells) {
    xn = [0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0, 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0, 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0];
    cellInt = cellItter;
    A = @<#; %3; $[3,3]> (inv<#; %3> (∇⊗<#; %3; $[]; %3> (femField(mesh,cellInt,field(3)[3], Transform, ))), [0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0, 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0, 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0]);
    foreach (int newtonItter in $range (0, 16)) {
      delta = @<#; %3; $[3]> (•<#; %3; $[3,3]; $[3]; $[3]> (A, -<#; %3; $[3]> (femField(mesh,cellInt,field(3)[3], Transform, ), pos)), xn);
      xn = -<$[3]> (xn, delta);
      if >= (* (0.1e-7, 0.1e-7), •<$[3]; $[3]; $[]> (delta, delta)) {
        if $and (> (+<$[]> (0.1e1, 0.1e-7), •<$[3]; $[3]; $[]> ([0.1e1, 0.1e1, 0.1e1], xn)), $and (> (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], xn)[0], -0.e0), $and (> (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], xn)[1], -0.e0), > (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], xn)[2], -0.e0)))) {
          return extractFemItemN(AllBuild(MeshPos),FemType: Mesh with type var:NONE,int,vec3,vec3 (mesh, cellInt, xn, pos)):FemType: MeshPos with type var:mesh_t;
          }
        }
      }
    }
  return extractFemItemN(InvalidBuild(MeshPos),FemType: Mesh with type var:NONE (mesh)):FemType: MeshPos with type var:mesh_t;
  }
function FemType: RefCell with type var:mesh_t refcell (FemType: Mesh with type var:NONE arg0)
{
  return extractFemItem(arg0, FemType: RefCell with type var:mesh_t, RefCell(Mesh));
  }
function FemType: MeshCell with type var:mesh_t[] cells (FemType: Mesh with type var:NONE arg0)
{
  return extractFemItem(arg0, FemType: MeshCell with type var:mesh_t[], Cells(Mesh));
  }
function FemType: MeshCell with type var:mesh_t[] cells (FemType: Mesh with type var:NONE arg0)
{
  return {loadFem(MeshCell) | int i in $range (0, extractFemItem(arg0, int, NumCell(Mesh)))};
  }
function int numCell (FemType: Mesh with type var:NONE arg0)
{
  return extractFemItem(arg0, int, NumCell(Mesh));
  }
function tensor[3,3,3,3] mesh_t_transform_3 (vec3 pos, int cell, FemType: Mesh with type var:NONE mesh)
{
  return @<#; %3; $[3,3,3,3]> (∇⊗<#; %3; $[3,3]; %3> (∇⊗<#; %3; $[3]; %3> (∇⊗<#; %3; $[]; %3> (femField(mesh,cell,field(3)[3], Transform, )))), pos);
  }
function tensor[3,3,3] mesh_t_transform_2 (vec3 pos, int cell, FemType: Mesh with type var:NONE mesh)
{
  return @<#; %3; $[3,3,3]> (∇⊗<#; %3; $[3]; %3> (∇⊗<#; %3; $[]; %3> (femField(mesh,cell,field(3)[3], Transform, ))), pos);
  }
function mat3 mesh_t_transform_1 (vec3 pos, int cell, FemType: Mesh with type var:NONE mesh)
{
  return @<#; %3; $[3,3]> (∇⊗<#; %3; $[]; %3> (femField(mesh,cell,field(3)[3], Transform, )), pos);
  }
function vec3 mesh_t_transform_0 (vec3 pos, int cell, FemType: Mesh with type var:NONE mesh)
{
  return @<#; %3; $[3]> (femField(mesh,cell,field(3)[3], Transform, ), pos);
  }
function FemType: MeshPos with type var:mesh_t _mesh_t_newtonInverse (vec3 pos, int cellInt, FemType: Mesh with type var:NONE mesh)
{
  xn = [0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0, 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0, 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0];
  A = @<#; %3; $[3,3]> (inv<#; %3> (∇⊗<#; %3; $[]; %3> (femField(mesh,cellInt,field(3)[3], Transform, ))), [0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0, 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0, 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0]);
  foreach (int itter in $range (0, 16)) {
    delta = @<#; %3; $[3]> (•<#; %3; $[3,3]; $[3]; $[3]> (A, -<#; %3; $[3]> (femField(mesh,cellInt,field(3)[3], Transform, ), pos)), xn);
    xn = -<$[3]> (xn, delta);
    if >= (* (0.1e-7, 0.1e-7), •<$[3]; $[3]; $[]> (delta, delta)) {
      if $and (> (+<$[]> (0.1e1, 0.1e-7), •<$[3]; $[3]; $[]> ([0.1e1, 0.1e1, 0.1e1], xn)), $and (> (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], xn)[0], -0.e0), $and (> (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], xn)[1], -0.e0), > (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], xn)[2], -0.e0)))) {
        return extractFemItemN(AllBuild(MeshPos),FemType: Mesh with type var:NONE,int,vec3,vec3 (mesh, cellInt, xn, pos)):FemType: MeshPos with type var:mesh_t;
        }
      else {
        return extractFemItemN(InvalidBuild(MeshPos),FemType: Mesh with type var:NONE (mesh)):FemType: MeshPos with type var:mesh_t;
        }
      }
    }
  return extractFemItemN(InvalidBuild(MeshPos),FemType: Mesh with type var:NONE (mesh)):FemType: MeshPos with type var:mesh_t;
  }
function FemType: MeshPos with type var:mesh_t _mesh_pos_mesh_t_build_world_pos (FemType: MeshPos with type var:mesh_t pos)
{
  if extractFemItem(pos, bool, WorldTest(MeshPos)) {
    return extractFemItemN(NewWorld(MeshPos),FemType: MeshPos with type var:mesh_t,vec3 (pos, mesh_t_transform_0 (extractFemItem(pos, vec3, RefPos(MeshPos)), extractFemItem(pos, int, CellIndex(MeshPos)), extractFem(Mesh,pos )))):FemType: MeshPos with type var:mesh_t;
    }
  else {
    return pos;
    }
  }
function vec3 worldPos (FemType: MeshPos with type var:mesh_t pos)
{
  return mesh_t_transform_0 (extractFemItem(pos, vec3, RefPos(MeshPos)), extractFemItem(pos, int, CellIndex(MeshPos)), extractFem(Mesh,pos ));
  }
function FemType: MeshPos with type var:mesh_t $exitPos (FemType: Mesh with type var:NONE mesh, int cellId, vec3 refPos, vec3 dPos, real[2] time)
{
  if != (-1, $sub<int; %2> (nextCell4 ($r2i (time[1]), cellId, mesh), 0)) {
    {
      }
    return extractFemItemN(RefBuild(Mesh),FemType: Mesh with type var:NONE,int,vec3,int (mesh, $sub<int; %2> (nextCell4 ($r2i (time[1]), cellId, mesh), 0), [•<$[4,4]; $[4]; $[4]> ($sub<mat4; %4> ($sub<mat4[4]; %4> ({{[[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.971445146547e-16, 0.e0, 0.e0, 0.1e1]], [[0.57735026919e0, 0.57735026919e0, 0.57735026919e0, -0.57735026919e0], [-0.333333333333e0, 0.666666666667e0, -0.333333333333e0, 0.333333333333e0], [-0.333333333333e0, -0.333333333333e0, 0.666666666667e0, 0.333333333333e0], [0.971445146547e-16, 0.e0, 0.e0, 0.1e1]], [[-0.333333333333e0, 0.666666666667e0, -0.333333333333e0, 0.333333333333e0], [-0.57735026919e0, -0.57735026919e0, -0.57735026919e0, 0.57735026919e0], [-0.333333333333e0, -0.333333333333e0, 0.666666666667e0, 0.333333333333e0], [0.971445146547e-16, 0.e0, 0.e0, 0.1e1]], [[-0.333333333333e0, 0.666666666667e0, -0.333333333333e0, 0.333333333333e0], [-0.333333333333e0, -0.333333333333e0, 0.666666666667e0, 0.333333333333e0], [0.57735026919e0, 0.57735026919e0, 0.57735026919e0, -0.57735026919e0], [0.971445146547e-16, 0.e0, 0.e0, 0.1e1]]}, {[[0.57735026919e0, -0.1e1, -0.1e1, 0.1e1], [0.57735026919e0, 0.1e1, 0.e0, 0.e0], [0.57735026919e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.e0, 0.1e1, 0.e0, 0.e0], [-0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]]}, {[[-0.1e1, -0.57735026919e0, -0.1e1, 0.1e1], [0.1e1, -0.57735026919e0, 0.e0, 0.e0], [0.e0, -0.57735026919e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.e0, -0.1e1, 0.e0, 0.e0], [0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, -0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]]}, {[[-0.1e1, -0.1e1, 0.57735026919e0, 0.1e1], [0.1e1, 0.e0, 0.57735026919e0, 0.e0], [0.e0, 0.1e1, 0.57735026919e0, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.e0, 0.e0, 0.1e1, 0.e0], [0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.e0, -0.1e1, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]]}}, $r2i (time[1])), $sub<int; %2> (nextCell4 ($r2i (time[1]), cellId, mesh), 1)), [+<$[3]> (*<$[3]> (time[0], dPos), refPos)[0], +<$[3]> (*<$[3]> (time[0], dPos), refPos)[1], +<$[3]> (*<$[3]> (time[0], dPos), refPos)[2], 0.1e1])[0], •<$[4,4]; $[4]; $[4]> ($sub<mat4; %4> ($sub<mat4[4]; %4> ({{[[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.971445146547e-16, 0.e0, 0.e0, 0.1e1]], [[0.57735026919e0, 0.57735026919e0, 0.57735026919e0, -0.57735026919e0], [-0.333333333333e0, 0.666666666667e0, -0.333333333333e0, 0.333333333333e0], [-0.333333333333e0, -0.333333333333e0, 0.666666666667e0, 0.333333333333e0], [0.971445146547e-16, 0.e0, 0.e0, 0.1e1]], [[-0.333333333333e0, 0.666666666667e0, -0.333333333333e0, 0.333333333333e0], [-0.57735026919e0, -0.57735026919e0, -0.57735026919e0, 0.57735026919e0], [-0.333333333333e0, -0.333333333333e0, 0.666666666667e0, 0.333333333333e0], [0.971445146547e-16, 0.e0, 0.e0, 0.1e1]], [[-0.333333333333e0, 0.666666666667e0, -0.333333333333e0, 0.333333333333e0], [-0.333333333333e0, -0.333333333333e0, 0.666666666667e0, 0.333333333333e0], [0.57735026919e0, 0.57735026919e0, 0.57735026919e0, -0.57735026919e0], [0.971445146547e-16, 0.e0, 0.e0, 0.1e1]]}, {[[0.57735026919e0, -0.1e1, -0.1e1, 0.1e1], [0.57735026919e0, 0.1e1, 0.e0, 0.e0], [0.57735026919e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.e0, 0.1e1, 0.e0, 0.e0], [-0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]]}, {[[-0.1e1, -0.57735026919e0, -0.1e1, 0.1e1], [0.1e1, -0.57735026919e0, 0.e0, 0.e0], [0.e0, -0.57735026919e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.e0, -0.1e1, 0.e0, 0.e0], [0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, -0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]]}, {[[-0.1e1, -0.1e1, 0.57735026919e0, 0.1e1], [0.1e1, 0.e0, 0.57735026919e0, 0.e0], [0.e0, 0.1e1, 0.57735026919e0, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.e0, 0.e0, 0.1e1, 0.e0], [0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.e0, -0.1e1, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]]}}, $r2i (time[1])), $sub<int; %2> (nextCell4 ($r2i (time[1]), cellId, mesh), 1)), [+<$[3]> (*<$[3]> (time[0], dPos), refPos)[0], +<$[3]> (*<$[3]> (time[0], dPos), refPos)[1], +<$[3]> (*<$[3]> (time[0], dPos), refPos)[2], 0.1e1])[1], •<$[4,4]; $[4]; $[4]> ($sub<mat4; %4> ($sub<mat4[4]; %4> ({{[[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.971445146547e-16, 0.e0, 0.e0, 0.1e1]], [[0.57735026919e0, 0.57735026919e0, 0.57735026919e0, -0.57735026919e0], [-0.333333333333e0, 0.666666666667e0, -0.333333333333e0, 0.333333333333e0], [-0.333333333333e0, -0.333333333333e0, 0.666666666667e0, 0.333333333333e0], [0.971445146547e-16, 0.e0, 0.e0, 0.1e1]], [[-0.333333333333e0, 0.666666666667e0, -0.333333333333e0, 0.333333333333e0], [-0.57735026919e0, -0.57735026919e0, -0.57735026919e0, 0.57735026919e0], [-0.333333333333e0, -0.333333333333e0, 0.666666666667e0, 0.333333333333e0], [0.971445146547e-16, 0.e0, 0.e0, 0.1e1]], [[-0.333333333333e0, 0.666666666667e0, -0.333333333333e0, 0.333333333333e0], [-0.333333333333e0, -0.333333333333e0, 0.666666666667e0, 0.333333333333e0], [0.57735026919e0, 0.57735026919e0, 0.57735026919e0, -0.57735026919e0], [0.971445146547e-16, 0.e0, 0.e0, 0.1e1]]}, {[[0.57735026919e0, -0.1e1, -0.1e1, 0.1e1], [0.57735026919e0, 0.1e1, 0.e0, 0.e0], [0.57735026919e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.e0, 0.1e1, 0.e0, 0.e0], [-0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]]}, {[[-0.1e1, -0.57735026919e0, -0.1e1, 0.1e1], [0.1e1, -0.57735026919e0, 0.e0, 0.e0], [0.e0, -0.57735026919e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.e0, -0.1e1, 0.e0, 0.e0], [0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, -0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]]}, {[[-0.1e1, -0.1e1, 0.57735026919e0, 0.1e1], [0.1e1, 0.e0, 0.57735026919e0, 0.e0], [0.e0, 0.1e1, 0.57735026919e0, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.e0, 0.e0, 0.1e1, 0.e0], [0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.e0, -0.1e1, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]]}}, $r2i (time[1])), $sub<int; %2> (nextCell4 ($r2i (time[1]), cellId, mesh), 1)), [+<$[3]> (*<$[3]> (time[0], dPos), refPos)[0], +<$[3]> (*<$[3]> (time[0], dPos), refPos)[1], +<$[3]> (*<$[3]> (time[0], dPos), refPos)[2], 0.1e1])[2]], $sub<int; %2> (nextCell4 ($r2i (time[1]), cellId, mesh), 1))):FemType: MeshPos with type var:mesh_t;
    }
  else {
    return extractFemItemN(InvalidBuildBoundary(MeshPos),FemType: Mesh with type var:NONE,vec3 (mesh, +<$[3]> (*<$[3]> (time[0], dPos), refPos))):FemType: MeshPos with type var:mesh_t;
    }
  }
function int[2] nextCell4 (int faceIdx, int cell, FemType: Mesh with type var:NONE mesh)
{
  {
    if == (faceIdx, -1) {
      return {-1, -1};
      }
    else {
      return extractFemItemN(CellFaceCell(Mesh),FemType: Mesh with type var:NONE,int (mesh, + (* (cell, 8), * (faceIdx, 2)))):int[2];
      }
    }
  }
function vec2 _enter (vec3 refPos, vec3 dPos)
{
  real time = +inf;
  int face = -1;
  real faceTime = -inf;
  if $and (>= (/ (-<$[]> (0.57735026919e0, •<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], refPos)), •<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], dPos)), -0.1e-7), $and (> (time, / (-<$[]> (0.57735026919e0, •<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], refPos)), •<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], dPos))), >= (|()|<$[]> (•<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], dPos)), 0.1e-7)))
    if $and (> (+<$[]> (0.1e1, 0.1e-7), •<$[3]; $[3]; $[]> ([0.1e1, 0.1e1, 0.1e1], +<$[3]> (refPos, *<$[3]> (dPos, / (-<$[]> (0.57735026919e0, •<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], refPos)), •<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], dPos)))))), $and (> (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], +<$[3]> (refPos, *<$[3]> (dPos, / (-<$[]> (0.57735026919e0, •<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], refPos)), •<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], dPos)))))[0], -0.e0), $and (> (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], +<$[3]> (refPos, *<$[3]> (dPos, / (-<$[]> (0.57735026919e0, •<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], refPos)), •<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], dPos)))))[1], -0.e0), > (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], +<$[3]> (refPos, *<$[3]> (dPos, / (-<$[]> (0.57735026919e0, •<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], refPos)), •<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], dPos)))))[2], -0.e0)))) {
      time = / (-<$[]> (0.57735026919e0, •<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], refPos)), •<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], dPos));
      face = 0;
      }
    if $and (>= (/ (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], dPos)), -0.1e-7), $and (> (time, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], dPos))), >= (|()|<$[]> (•<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], dPos)), 0.1e-7)))
    if $and (> (+<$[]> (0.1e1, 0.1e-7), •<$[3]; $[3]; $[]> ([0.1e1, 0.1e1, 0.1e1], +<$[3]> (refPos, *<$[3]> (dPos, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], dPos)))))), $and (> (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], +<$[3]> (refPos, *<$[3]> (dPos, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], dPos)))))[0], -0.e0), $and (> (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], +<$[3]> (refPos, *<$[3]> (dPos, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], dPos)))))[1], -0.e0), > (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], +<$[3]> (refPos, *<$[3]> (dPos, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], dPos)))))[2], -0.e0)))) {
      time = / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], dPos));
      face = 1;
      }
    if $and (>= (/ (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], dPos)), -0.1e-7), $and (> (time, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], dPos))), >= (|()|<$[]> (•<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], dPos)), 0.1e-7)))
    if $and (> (+<$[]> (0.1e1, 0.1e-7), •<$[3]; $[3]; $[]> ([0.1e1, 0.1e1, 0.1e1], +<$[3]> (refPos, *<$[3]> (dPos, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], dPos)))))), $and (> (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], +<$[3]> (refPos, *<$[3]> (dPos, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], dPos)))))[0], -0.e0), $and (> (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], +<$[3]> (refPos, *<$[3]> (dPos, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], dPos)))))[1], -0.e0), > (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], +<$[3]> (refPos, *<$[3]> (dPos, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], dPos)))))[2], -0.e0)))) {
      time = / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], dPos));
      face = 2;
      }
    if $and (>= (/ (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], refPos)), •<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], dPos)), -0.1e-7), $and (> (time, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], refPos)), •<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], dPos))), >= (|()|<$[]> (•<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], dPos)), 0.1e-7)))
    if $and (> (+<$[]> (0.1e1, 0.1e-7), •<$[3]; $[3]; $[]> ([0.1e1, 0.1e1, 0.1e1], +<$[3]> (refPos, *<$[3]> (dPos, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], refPos)), •<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], dPos)))))), $and (> (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], +<$[3]> (refPos, *<$[3]> (dPos, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], refPos)), •<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], dPos)))))[0], -0.e0), $and (> (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], +<$[3]> (refPos, *<$[3]> (dPos, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], refPos)), •<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], dPos)))))[1], -0.e0), > (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], +<$[3]> (refPos, *<$[3]> (dPos, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], refPos)), •<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], dPos)))))[2], -0.e0)))) {
      time = / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], refPos)), •<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], dPos));
      face = 3;
      }
    if $and (!= (face, -1), $and (> (+<$[]> (0.1e1, 0.1e-7), •<$[3]; $[3]; $[]> ([0.1e1, 0.1e1, 0.1e1], +<$[3]> (refPos, *<$[3]> (dPos, max (time, 0.e0))))), $and (> (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], +<$[3]> (refPos, *<$[3]> (dPos, max (time, 0.e0))))[0], -0.e0), $and (> (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], +<$[3]> (refPos, *<$[3]> (dPos, max (time, 0.e0))))[1], -0.e0), > (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], +<$[3]> (refPos, *<$[3]> (dPos, max (time, 0.e0))))[2], -0.e0))))) {
    return [max (time, 0.e0), (real)face];
    }
  else {
    return [(real)-1, (real)-1];
    }
  }
function vec2 _exit (vec3 refPos, vec3 dPos, int i)
{
  real time = +inf;
  int face = -1;
  real faceTime = -inf;
  if $and (>= (/ (-<$[]> (0.57735026919e0, •<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], refPos)), •<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], dPos)), -0.1e-7), $and (> (time, / (-<$[]> (0.57735026919e0, •<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], refPos)), •<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], dPos))), >= (|()|<$[]> (•<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], dPos)), 0.1e-7)))
    if != (i, 0) {
      time = / (-<$[]> (0.57735026919e0, •<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], refPos)), •<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], dPos));
      face = 0;
      }
    else {
      faceTime = / (-<$[]> (0.57735026919e0, •<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], refPos)), •<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], dPos));
      }
    if $and (>= (/ (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], dPos)), -0.1e-7), $and (> (time, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], dPos))), >= (|()|<$[]> (•<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], dPos)), 0.1e-7)))
    if != (i, 1) {
      time = / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], dPos));
      face = 1;
      }
    else {
      faceTime = / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], dPos));
      }
    if $and (>= (/ (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], dPos)), -0.1e-7), $and (> (time, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], dPos))), >= (|()|<$[]> (•<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], dPos)), 0.1e-7)))
    if != (i, 2) {
      time = / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], dPos));
      face = 2;
      }
    else {
      faceTime = / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], dPos));
      }
    if $and (>= (/ (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], refPos)), •<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], dPos)), -0.1e-7), $and (> (time, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], refPos)), •<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], dPos))), >= (|()|<$[]> (•<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], dPos)), 0.1e-7)))
    if != (i, 3) {
      time = / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], refPos)), •<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], dPos));
      face = 3;
      }
    else {
      faceTime = / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], refPos)), •<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], dPos));
      }
    if $and (!= (face, -1), $and (> (+<$[]> (0.1e1, 0.1e-7), •<$[3]; $[3]; $[]> ([0.1e1, 0.1e1, 0.1e1], +<$[3]> (refPos, *<$[3]> (dPos, max (time, 0.e0))))), $and (> (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], +<$[3]> (refPos, *<$[3]> (dPos, max (time, 0.e0))))[0], -0.e0), $and (> (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], +<$[3]> (refPos, *<$[3]> (dPos, max (time, 0.e0))))[1], -0.e0), > (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], +<$[3]> (refPos, *<$[3]> (dPos, max (time, 0.e0))))[2], -0.e0))))) {
    return [max (time, 0.e0), (real)face];
    }
  else {
    if == (-inf, faceTime) {
      return [(real)-1, (real)-1];
      }
    else {
      return [max (faceTime, 0.e0), (real)i];
      }
    }
  }
int dimm = dim;
function FemType: Mesh with type var:mesh_t domain (FemType: Space with type var:mesh_t arg0)
{
  return extractFem(Mesh,arg0 );
  }
function FemType: Space with type var:mesh_t space (FemType: FemFunc with type var:fns_t arg0)
{
  return extractFem(Space,arg0 );
  }
function FemType: FuncCell with type var:func_t funcCell (FemType: FemFunc with type var:fns_t arg0, FemType: MeshCell with type var:mesh_t arg1)
{
  return loadFem(FuncCell);
  }
field(3)[] F = ∘<#; %3; $[]; %3; $[3]> (femField(data,extractFem(Mesh,extractFem(Space,data ) ),field(3)[], refField, findPos), femField(extractFem(Mesh,extractFem(Space,data ) ),extractFem(Mesh,extractFem(Space,data ) ),field(3)[3], InvTransform, findPos));
FemType: RefCell with type var:mesh_t simplex = refcell (meshData);
function bool insideTest (vec3 x)
{
  vec3 mid = -<$[3]> (x, [0.e0, 0.e0, 0.e0]);
  return (<= (|()|<$[]> (mid[0]), 0.4e1) && (<= (|()|<$[]> (mid[1]), 0.4e1) && <= (|()|<$[]> (mid[2]), 0.4e1)));
  }
function vec3 fStep (vec3 s)
{
  real x = s[0];
  real y = s[1];
  real z = s[2];
  mat3 H = [[-<$[]> (* ((real)2, ^ (-<$[]> ((real)2, * ((real)3, ^ (x, 2))), 2)), * (* ((real)12, x), +<$[]> (+<$[]> (unary -<$[]> (^ (x, 3)), * ((real)2, x)), y))), * ((real)2, -<$[]> ((real)2, * ((real)3, ^ (x, 2)))), 0.e0], [* ((real)2, -<$[]> ((real)2, * ((real)3, ^ (x, 2)))), 0.2e1, 0.e0], [0.e0, 0.e0, * ((real)2, zfuz)]];
  vec3 g = [* (* ((real)2, -<$[]> ((real)2, * ((real)3, ^ (x, 2)))), +<$[]> (+<$[]> (unary -<$[]> (^ (x, 3)), * ((real)2, x)), y)), * ((real)2, +<$[]> (+<$[]> (unary -<$[]> (^ (x, 3)), * ((real)2, x)), y)), * (* ((real)2, zfuz), z)];
  vec3[3] E = evecs (H);
  real[3] L = evals (H);
  vec3 up = •<$[3,3]; $[3]; $[3]> (⊗<$[3]; $[3]; $[3,3]> (*<$[3]> (unary -<$[]> (/ ((real)1, $sub<real; %3> (L, 0))), $sub<vec3; %3> (E, 0)), $sub<vec3; %3> (E, 0)), g);
  if (! (== (up[0], up[0])) || (! (== (up[1], up[1])) || ! (== (up[2], up[2]))))
    return [+inf, +inf, +inf];
    return up;
  }
function bool posNanCheck (vec3 up)
{
  return (! (== (up[0], up[0])) || (! (== (up[1], up[1])) || ! (== (up[2], up[2]))));
  }
function mat3 fPerp (vec3 s)
{
  real x = s[0];
  real y = s[1];
  real z = s[2];
  mat3 H = [[-<$[]> (* ((real)2, ^ (-<$[]> ((real)2, * ((real)3, ^ (x, 2))), 2)), * (* ((real)12, x), +<$[]> (+<$[]> (unary -<$[]> (^ (x, 3)), * ((real)2, x)), y))), * ((real)2, -<$[]> ((real)2, * ((real)3, ^ (x, 2)))), 0.e0], [* ((real)2, -<$[]> ((real)2, * ((real)3, ^ (x, 2)))), 0.2e1, 0.e0], [0.e0, 0.e0, * ((real)2, zfuz)]];
  vec3 E2 = $sub<vec3; %3> (evecs (H), 0);
  mat3 m = -<$[3,3]> ($id<%3> (), ⊗<$[3]; $[3]; $[3,3]> (E2, E2));
  real t = :<$[3,3]; $[3,3]; $[]> (m, m);
  if ! (== (t, t))
    return $zero<$[3,3]> ();
    return m;
  }
function real fStrength (vec3 s)
{
  real x = s[0];
  real y = s[1];
  real z = s[2];
  mat3 H = [[-<$[]> (* ((real)2, ^ (-<$[]> ((real)2, * ((real)3, ^ (x, 2))), 2)), * (* ((real)12, x), +<$[]> (+<$[]> (unary -<$[]> (^ (x, 3)), * ((real)2, x)), y))), * ((real)2, -<$[]> ((real)2, * ((real)3, ^ (x, 2)))), 0.e0], [* ((real)2, -<$[]> ((real)2, * ((real)3, ^ (x, 2)))), 0.2e1, 0.e0], [0.e0, 0.e0, * ((real)2, zfuz)]];
  vec3 g = [* (* ((real)2, -<$[]> ((real)2, * ((real)3, ^ (x, 2)))), +<$[]> (+<$[]> (unary -<$[]> (^ (x, 3)), * ((real)2, x)), y)), * ((real)2, +<$[]> (+<$[]> (unary -<$[]> (^ (x, 3)), * ((real)2, x)), y)), * (* ((real)2, zfuz), z)];
  return / ($sub<real; %3> (evals (H), 0), +<$[]> (fBias, |()|<$[3]> (g)));
  }
function real phi (real r)
{
  return ^ (-<$[]> ((real)1, r), 4);
  }
function real phi' (real r)
{
  return * ((real)(unary - (4)), ^ (-<$[]> ((real)1, r), 3));
  }
function real enr (vec3 x)
{
  return phi (/ (|()|<$[3]> (x), rad));
  }
function vec3 frc (vec3 x)
{
  return /<$[3]> (*<$[3]> (* (phi' (/ (|()|<$[3]> (x), rad)), / ((real)1, rad)), x), |()|<$[3]> (x));
  }
function bool posTest (vec3 pos)
{
  return (insideTest (pos) && (! (posNanCheck (pos)) && >= (fStrength (pos), fStren)));
  }
strand particle (vec3 pos0, real hh0) in 3D
{
  output vec3 pos = pos0;
  real hh = hh0;
  vec3 step = $zero<$[3]> ();
  bool found = false;
  int nfs = 0;
  int test = 1;
  int testp = 0;
  int steps = 0;
  update {
    steps = + (steps, 1);
    if ! (posTest (pos))
      die;
      if ! (found) {
      step = fStep (pos);
      pos = +<$[3]> (pos, step);
      if posNanCheck (pos)
        die;
        if > (/ (|()|<$[3]> (step), rad), eps) {
        nfs = + (nfs, 1);
        if > (nfs, 10)
          die;
          }
      else {
        found = true;
        testp = 1;
        }
      }
    else {
      pos = +<$[3]> (pos, fStep (pos));
      if posNanCheck (pos)
        die;
        step = $zero<$[3]> ();
      real oldE = 0.e0;
      vec3 force = $zero<$[3]> ();
      int nn = 0;
      foreach (particle P in sphere<particle> (rad)) {
        oldE = +<$[]> (oldE, enr (-<$[3]> (P.pos, pos)));
        force = +<$[3]> (force, frc (-<$[3]> (P.pos, pos)));
        nn = + (nn, 1);
        }
      if == (0, nn) {
        vec3 npos = +<$[3]> (pos, [* (0.5e0, rad), 0.e0, 0.e0]);
        if posTest (npos)
          new particle (npos, hh);
          continue;
        }
      force = •<$[3,3]; $[3]; $[3]> (fPerp (pos), force);
      vec3 es = *<$[3]> (hh, force);
      if > (|()|<$[3]> (es), rad) {
        hh = * (hh, / (rad, |()|<$[3]> (es)));
        es = *<$[3]> (es, / (rad, |()|<$[3]> (es)));
        }
      vec3 samplePos = +<$[3]> (pos, es);
      vec3 fs = fStep (samplePos);
      if > (/ (|()|<$[3]> (fs), |()|<$[3]> (es)), 0.5e0) {
        hh = * (hh, 0.5e0);
        continue;
        }
      vec3 oldPos = pos;
      vec3 up = +<$[3]> (fs, es);
      pos = +<$[3]> (pos, up);
      real newE = sum ({enr (-<$[3]> (pos, P.pos)) | particle P in sphere<particle> (rad)});
      if > (-<$[]> (newE, oldE), •<$[3]; $[3]; $[]> (*<$[3]> (0.5e0, -<$[3]> (pos, oldPos)), unary -<$[3]> (force))) {
        pos = oldPos;
        hh = * (hh, 0.5e0);
        continue;
        }
      hh = * (hh, 0.11e1);
      step = up;
      if posNanCheck (pos)
        die;
        if < (nn, 5) {
        vec3 npos = +<$[3]> (pos, *<$[3]> (* (0.5e0, rad), normalize<$[3]> (es)));
        if posTest (npos)
          new particle (npos, hh);
          }
      }
    }
  
}
collection {
    foreach (vec3 x in ipos) {
      new particle (x, 0.1e1);
      }
    }
  
update {
  int num = sum ({|P.test | particle P in all|});
  int steps = max ({|P.steps | particle P in all|});
  int numFound = sum ({|P.testp | particle P in all|});
  bool allFound = all ({|P.found | particle P in all|});
  real maxStep = max ({||()|<$[3]> (P.step) | particle P in all|});
  print ("One run:", allFound, " and ", / (maxStep, rad), " and ", < (/ (maxStep, rad), eps), " and ", numFound, " of ", num, "\n");
  if (allFound && < (/ (maxStep, rad), eps)) {
    print ("CONVERGED!\n");
    stabilize_all;}
  if > (steps, 5000)
    stabilize_all;}
/* Program end */
/* Simplified Program (after after simplify) start */
properties: GlobalInit,StabilizeAll,GlobalReduce,StrandSets,GlobalUpdate,NewStrands,StrandCommunication,StrandsMayDie,HasInputs,HasGlobals,ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
input FemData:Mesh meshData0847;
input FemData:Space 0space0853_intermedateGlobal0854;
input FemData:FemFunc 0data0855_intermedateGlobal0856;
input real rad0857 = <default>;
input real eps0858 = <default>;
input real v00859 = <default>;
input real fBias085A = <default>;
input real fStren085B = <default>;
input real zfuz085C = <default>;
input vec3[] ipos085D;
constants {
  rad0857 = 0.1e-1;
  eps0858 = 0.1e-1;
  v00859 = 0.625e-1;
  fBias085A = 0.1e-1;
  fStren085B = 0.1e-1;
  zfuz085C = 0.1e-1;
}
global Femdata: MeshCell[] 0cell_meshData0848;
global Femdata: Space space0853;
global Femdata: FemFunc data0855;
global int dimm117D;
global field(3)[] F1194;
global Femdata: RefCell simplex1195;
function bool#0 !=085E (Femdata: MeshCell cell1085F, Femdata: MeshCell cell10860)
{
  int _t0861 = extractFemItem(CellIndex(Mesh), int, cell1085F);
  int _t0862 = extractFemItem(CellIndex(Mesh), int, cell10860);
  bool _t0863 = prim !=0086 (_t0861, _t0862);
  return _t0863;
}
function bool#0 ==0864 (Femdata: MeshCell cell1085F, Femdata: MeshCell cell10860)
{
  int _t0865 = extractFemItem(CellIndex(Mesh), int, cell1085F);
  int _t0866 = extractFemItem(CellIndex(Mesh), int, cell10860);
  bool _t0867 = prim ==0082 (_t0865, _t0866);
  return _t0867;
}
function Femdata: MeshPos#2 findPos0868 (Femdata: Mesh mesh0869, vec3 pos086A)
{
  real _t086B = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t086C = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t086D = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  xn086E = [_t086B, _t086C, _t086D];
  newtonInt086F = 0;
  cellInt0870 = extractFemItem(StartCell(Mesh), int, mesh0869);
  int _t0871 = extractFemItem(NumCell(Mesh), int, mesh0869);
  int _t0872 = 1;
  numCell0873 = prim -0024 (_t0871, _t0872);
  yayCells0874 = extractFemItem2(NearbyCell(File=spat.in)(Mesh), vec3, mesh0869, pos086A : vec3);
  foreach cellItter0878 in yayCells0874 {
    real _t0875 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    real _t0876 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    real _t0877 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    xn086E = [_t0875, _t0876, _t0877];
    cellInt0870 = cellItter0878;
    field(3)[3] _t0879 = femField(mesh0869,cellInt0870,field(3)[3],Transform,);
    field(3)[3,3] _t087A = prim ∇⊗00AD<#∞; %3; $[]; %3> (_t0879);
    field(3)[3,3] _t087B = prim inv015E<#∞; %3> (_t087A);
    real _t087C = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    real _t087D = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    real _t087E = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    vec3 _t087F = [_t087C, _t087D, _t087E];
    A0880 = prim @00A5<#∞; %3; $[3,3]> (_t087B, _t087F);
    int _t0881 = 0;
    int _t0882 = 16;
    int[] _t0883 = prim $range01C3 (_t0881, _t0882);
    foreach newtonItter08B2 in _t0883 {
      field(3)[3] _t0884 = femField(mesh0869,cellInt0870,field(3)[3],Transform,);
      field(3)[3] _t0885 = prim -002E<#∞; %3; $[3]> (_t0884, pos086A);
      field(3)[3] _t0886 = prim •00D4<#∞; %3; $[3,3]; $[3]; $[3]> (A0880, _t0885);
      delta0887 = prim @00A5<#∞; %3; $[3]> (_t0886, xn086E);
      xn086E = prim -0026<$[3]> (xn086E, delta0887);
      real _t0888 = 0.1e-7;
      real _t0889 = 0.1e-7;
      real _t088A = prim *0034 (_t0888, _t0889);
      real _t088B = prim •00CE<$[3]; $[3]; $[]> (delta0887, delta0887);
      bool _t088C = prim >=007E (_t088A, _t088B);
      if _t088C {
        real _t088D = 0.1e1;
        real _t088E = 0.1e-7;
        real _t088F = prim +0017<$[]> (_t088D, _t088E);
        real _t0890 = 0.1e1;
        real _t0891 = 0.1e1;
        real _t0892 = 0.1e1;
        vec3 _t0893 = [_t0890, _t0891, _t0892];
        real _t0894 = prim •00CE<$[3]; $[3]; $[]> (_t0893, xn086E);
        bool _t0895 = prim >0080 (_t088F, _t0894);
        real _t0896 = 0.1e-7;
        real _t0897 = 0.1e-7;
        real _t0898 = 0.1e-7;
        vec3 _t0899 = [_t0896, _t0897, _t0898];
        vec3 _t089A = prim +0017<$[3]> (_t0899, xn086E);
        real _t089B = _t089A[0];
        real _t089C = -0.e0;
        bool _t089D = prim >0080 (_t089B, _t089C);
        real _t089E = 0.1e-7;
        real _t089F = 0.1e-7;
        real _t08A0 = 0.1e-7;
        vec3 _t08A1 = [_t089E, _t089F, _t08A0];
        vec3 _t08A2 = prim +0017<$[3]> (_t08A1, xn086E);
        real _t08A3 = _t08A2[1];
        real _t08A4 = -0.e0;
        bool _t08A5 = prim >0080 (_t08A3, _t08A4);
        real _t08A6 = 0.1e-7;
        real _t08A7 = 0.1e-7;
        real _t08A8 = 0.1e-7;
        vec3 _t08A9 = [_t08A6, _t08A7, _t08A8];
        vec3 _t08AA = prim +0017<$[3]> (_t08A9, xn086E);
        real _t08AB = _t08AA[2];
        real _t08AC = -0.e0;
        bool _t08AD = prim >0080 (_t08AB, _t08AC);
        bool _t08AE = prim $and01C4 (_t08A5, _t08AD);
        bool _t08AF = prim $and01C4 (_t089D, _t08AE);
        bool _t08B0 = prim $and01C4 (_t0895, _t08AF);
        if _t08B0 {
          Femdata: MeshPos _t08B1 = extractFemItemN((mesh0869, cellInt0870, xn086E, pos086A),AllBuild(MeshPos),);
          return _t08B1;
        }
      }
    }
  }
  Femdata: MeshPos _t08B3 = extractFemItemN((mesh0869),InvalidBuild(MeshPos),);
  return _t08B3;
}
function Femdata: RefCell#1 refcell08B4 (Femdata: Mesh arg008B5)
{
  Femdata: RefCell _t08B6 = extractFemItem(RefCell(Mesh), Femdata: RefCell, arg008B5);
  return _t08B6;
}
function Femdata: MeshCell[]#0 cells08B7 (Femdata: Mesh arg008B8)
{
  Femdata: MeshCell[] _t08B9 = extractFemItem(Cells(Mesh), Femdata: MeshCell[], arg008B8);
  return _t08B9;
}
function Femdata: MeshCell[]#0 cells08BA (Femdata: Mesh arg008B8)
{
  int _t08BB = 0;
  int _t08BC = extractFemItem(NumCell(Mesh), int, arg008B8);
  int[] _t08BD = prim $range01C3 (_t08BB, _t08BC);
  Femdata: MeshCell[] accum08C0 = {};
  foreach i08BE in _t08BD {
    Femdata: MeshCell _t08BF = loadFem(MeshCell, arg008B8, i08BE);
    accum08C0 = prim @0010<Femdata: MeshCell> (accum08C0, _t08BF);
  }
  return accum08C0;
}
function int#0 numCell08C1 (Femdata: Mesh arg008B5)
{
  int _t08C2 = extractFemItem(NumCell(Mesh), int, arg008B5);
  return _t08C2;
}
function tensor[3,3,3,3]#0 mesh_t_transform_308C3 (vec3 pos08C4, int cell08C5, Femdata: Mesh mesh08C6)
{
  field(3)[3] _t08C7 = femField(mesh08C6,cell08C5,field(3)[3],Transform,);
  field(3)[3,3] _t08C8 = prim ∇⊗00AD<#∞; %3; $[]; %3> (_t08C7);
  field(3)[3,3,3] _t08C9 = prim ∇⊗00AD<#∞; %3; $[3]; %3> (_t08C8);
  field(3)[3,3,3,3] _t08CA = prim ∇⊗00AD<#∞; %3; $[3,3]; %3> (_t08C9);
  tensor[3,3,3,3] _t08CB = prim @00A5<#∞; %3; $[3,3,3,3]> (_t08CA, pos08C4);
  return _t08CB;
}
function tensor[3,3,3]#0 mesh_t_transform_208CC (vec3 pos08C4, int cell08C5, Femdata: Mesh mesh08C6)
{
  field(3)[3] _t08CD = femField(mesh08C6,cell08C5,field(3)[3],Transform,);
  field(3)[3,3] _t08CE = prim ∇⊗00AD<#∞; %3; $[]; %3> (_t08CD);
  field(3)[3,3,3] _t08CF = prim ∇⊗00AD<#∞; %3; $[3]; %3> (_t08CE);
  tensor[3,3,3] _t08D0 = prim @00A5<#∞; %3; $[3,3,3]> (_t08CF, pos08C4);
  return _t08D0;
}
function tensor[3,3]#0 mesh_t_transform_108D1 (vec3 pos08C4, int cell08C5, Femdata: Mesh mesh08C6)
{
  field(3)[3] _t08D2 = femField(mesh08C6,cell08C5,field(3)[3],Transform,);
  field(3)[3,3] _t08D3 = prim ∇⊗00AD<#∞; %3; $[]; %3> (_t08D2);
  tensor[3,3] _t08D4 = prim @00A5<#∞; %3; $[3,3]> (_t08D3, pos08C4);
  return _t08D4;
}
function vec3#2 mesh_t_transform_008D5 (vec3 pos08C4, int cell08C5, Femdata: Mesh mesh08C6)
{
  field(3)[3] _t08D6 = femField(mesh08C6,cell08C5,field(3)[3],Transform,);
  vec3 _t08D7 = prim @00A5<#∞; %3; $[3]> (_t08D6, pos08C4);
  return _t08D7;
}
function Femdata: MeshPos#0 _mesh_t_newtonInverse08D8 (vec3 pos08D9, int cellInt08DA, Femdata: Mesh mesh08DB)
{
  real _t08DC = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t08DD = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t08DE = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  xn08DF = [_t08DC, _t08DD, _t08DE];
  field(3)[3] _t08E0 = femField(mesh08DB,cellInt08DA,field(3)[3],Transform,);
  field(3)[3,3] _t08E1 = prim ∇⊗00AD<#∞; %3; $[]; %3> (_t08E0);
  field(3)[3,3] _t08E2 = prim inv015E<#∞; %3> (_t08E1);
  real _t08E3 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t08E4 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t08E5 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  vec3 _t08E6 = [_t08E3, _t08E4, _t08E5];
  A08E7 = prim @00A5<#∞; %3; $[3,3]> (_t08E2, _t08E6);
  int _t08E8 = 0;
  int _t08E9 = 16;
  int[] _t08EA = prim $range01C3 (_t08E8, _t08E9);
  foreach itter091A in _t08EA {
    field(3)[3] _t08EB = femField(mesh08DB,cellInt08DA,field(3)[3],Transform,);
    field(3)[3] _t08EC = prim -002E<#∞; %3; $[3]> (_t08EB, pos08D9);
    field(3)[3] _t08ED = prim •00D4<#∞; %3; $[3,3]; $[3]; $[3]> (A08E7, _t08EC);
    delta08EE = prim @00A5<#∞; %3; $[3]> (_t08ED, xn08DF);
    xn08DF = prim -0026<$[3]> (xn08DF, delta08EE);
    real _t08EF = 0.1e-7;
    real _t08F0 = 0.1e-7;
    real _t08F1 = prim *0034 (_t08EF, _t08F0);
    real _t08F2 = prim •00CE<$[3]; $[3]; $[]> (delta08EE, delta08EE);
    bool _t08F3 = prim >=007E (_t08F1, _t08F2);
    if _t08F3 {
      real _t08F4 = 0.1e1;
      real _t08F5 = 0.1e-7;
      real _t08F6 = prim +0017<$[]> (_t08F4, _t08F5);
      real _t08F7 = 0.1e1;
      real _t08F8 = 0.1e1;
      real _t08F9 = 0.1e1;
      vec3 _t08FA = [_t08F7, _t08F8, _t08F9];
      real _t08FB = prim •00CE<$[3]; $[3]; $[]> (_t08FA, xn08DF);
      bool _t08FC = prim >0080 (_t08F6, _t08FB);
      real _t08FD = 0.1e-7;
      real _t08FE = 0.1e-7;
      real _t08FF = 0.1e-7;
      vec3 _t0900 = [_t08FD, _t08FE, _t08FF];
      vec3 _t0901 = prim +0017<$[3]> (_t0900, xn08DF);
      real _t0902 = _t0901[0];
      real _t0903 = -0.e0;
      bool _t0904 = prim >0080 (_t0902, _t0903);
      real _t0905 = 0.1e-7;
      real _t0906 = 0.1e-7;
      real _t0907 = 0.1e-7;
      vec3 _t0908 = [_t0905, _t0906, _t0907];
      vec3 _t0909 = prim +0017<$[3]> (_t0908, xn08DF);
      real _t090A = _t0909[1];
      real _t090B = -0.e0;
      bool _t090C = prim >0080 (_t090A, _t090B);
      real _t090D = 0.1e-7;
      real _t090E = 0.1e-7;
      real _t090F = 0.1e-7;
      vec3 _t0910 = [_t090D, _t090E, _t090F];
      vec3 _t0911 = prim +0017<$[3]> (_t0910, xn08DF);
      real _t0912 = _t0911[2];
      real _t0913 = -0.e0;
      bool _t0914 = prim >0080 (_t0912, _t0913);
      bool _t0915 = prim $and01C4 (_t090C, _t0914);
      bool _t0916 = prim $and01C4 (_t0904, _t0915);
      bool _t0917 = prim $and01C4 (_t08FC, _t0916);
      if _t0917 {
        Femdata: MeshPos _t0918 = extractFemItemN((mesh08DB, cellInt08DA, xn08DF, pos08D9),AllBuild(MeshPos),);
        return _t0918;
      } else {
        Femdata: MeshPos _t0919 = extractFemItemN((mesh08DB),InvalidBuild(MeshPos),);
        return _t0919;
      }
    }
  }
  Femdata: MeshPos _t091B = extractFemItemN((mesh08DB),InvalidBuild(MeshPos),);
  return _t091B;
}
function Femdata: MeshPos#0 _mesh_pos_mesh_t_build_world_pos091C (Femdata: MeshPos pos091D)
{
  bool _t091E = extractFemItem(WorldTest(MeshPos), bool, pos091D);
  if _t091E {
    vec3 _t091F = extractFemItem(RefPos(MeshPos), vec3, pos091D);
    int _t0920 = extractFemItem(CellIndex(MeshPos), int, pos091D);
    Femdata: Mesh _t0921 = extractFem(pos091D, Mesh);
    vec3 _t0922 = func mesh_t_transform_008D5 (_t091F, _t0920, _t0921);
    Femdata: MeshPos _t0923 = extractFemItemN((pos091D, _t0922),NewWorld(MeshPos),);
    return _t0923;
  } else {
    return pos091D;
  }
}
function vec3#0 worldPos0924 (Femdata: MeshPos pos091D)
{
  vec3 _t0925 = extractFemItem(RefPos(MeshPos), vec3, pos091D);
  int _t0926 = extractFemItem(CellIndex(MeshPos), int, pos091D);
  Femdata: Mesh _t0927 = extractFem(pos091D, Mesh);
  vec3 _t0928 = func mesh_t_transform_008D5 (_t0925, _t0926, _t0927);
  return _t0928;
}
function Femdata: MeshPos#0 $exitPos0929 (Femdata: Mesh mesh092A, int cellId092B, vec3 refPos092C, vec3 dPos092D, real[2] time092E)
{
  int _t092F = -1;
  real _t0930 = time092E[1];
  int _t0931 = prim $r2i01B7 (_t0930);
  int[2] _t0933 = func nextCell40932 (_t0931, cellId092B, mesh092A);
  int _t0934 = 0;
  int _t0935 = prim $sub01C0<int; %2> (_t0933, _t0934);
  bool _t0936 = prim !=0086 (_t092F, _t0935);
  if _t0936 {
    real _t0937 = time092E[1];
    int _t0938 = prim $r2i01B7 (_t0937);
    int[2] _t0939 = func nextCell40932 (_t0938, cellId092B, mesh092A);
    int _t093A = 0;
    int _t093B = prim $sub01C0<int; %2> (_t0939, _t093A);
    real _t093C = 0.1e1;
    real _t093D = 0.e0;
    real _t093E = 0.e0;
    real _t093F = 0.e0;
    vec4 _t0940 = [_t093C, _t093D, _t093E, _t093F];
    real _t0941 = 0.e0;
    real _t0942 = 0.1e1;
    real _t0943 = 0.e0;
    real _t0944 = 0.e0;
    vec4 _t0945 = [_t0941, _t0942, _t0943, _t0944];
    real _t0946 = 0.e0;
    real _t0947 = 0.e0;
    real _t0948 = 0.1e1;
    real _t0949 = 0.e0;
    vec4 _t094A = [_t0946, _t0947, _t0948, _t0949];
    real _t094B = 0.971445146547e-16;
    real _t094C = 0.e0;
    real _t094D = 0.e0;
    real _t094E = 0.1e1;
    vec4 _t094F = [_t094B, _t094C, _t094D, _t094E];
    tensor[4,4] _t0950 = [_t0940, _t0945, _t094A, _t094F];
    real _t0951 = 0.57735026919e0;
    real _t0952 = 0.57735026919e0;
    real _t0953 = 0.57735026919e0;
    real _t0954 = -0.57735026919e0;
    vec4 _t0955 = [_t0951, _t0952, _t0953, _t0954];
    real _t0956 = -0.333333333333e0;
    real _t0957 = 0.666666666667e0;
    real _t0958 = -0.333333333333e0;
    real _t0959 = 0.333333333333e0;
    vec4 _t095A = [_t0956, _t0957, _t0958, _t0959];
    real _t095B = -0.333333333333e0;
    real _t095C = -0.333333333333e0;
    real _t095D = 0.666666666667e0;
    real _t095E = 0.333333333333e0;
    vec4 _t095F = [_t095B, _t095C, _t095D, _t095E];
    real _t0960 = 0.971445146547e-16;
    real _t0961 = 0.e0;
    real _t0962 = 0.e0;
    real _t0963 = 0.1e1;
    vec4 _t0964 = [_t0960, _t0961, _t0962, _t0963];
    tensor[4,4] _t0965 = [_t0955, _t095A, _t095F, _t0964];
    real _t0966 = -0.333333333333e0;
    real _t0967 = 0.666666666667e0;
    real _t0968 = -0.333333333333e0;
    real _t0969 = 0.333333333333e0;
    vec4 _t096A = [_t0966, _t0967, _t0968, _t0969];
    real _t096B = -0.57735026919e0;
    real _t096C = -0.57735026919e0;
    real _t096D = -0.57735026919e0;
    real _t096E = 0.57735026919e0;
    vec4 _t096F = [_t096B, _t096C, _t096D, _t096E];
    real _t0970 = -0.333333333333e0;
    real _t0971 = -0.333333333333e0;
    real _t0972 = 0.666666666667e0;
    real _t0973 = 0.333333333333e0;
    vec4 _t0974 = [_t0970, _t0971, _t0972, _t0973];
    real _t0975 = 0.971445146547e-16;
    real _t0976 = 0.e0;
    real _t0977 = 0.e0;
    real _t0978 = 0.1e1;
    vec4 _t0979 = [_t0975, _t0976, _t0977, _t0978];
    tensor[4,4] _t097A = [_t096A, _t096F, _t0974, _t0979];
    real _t097B = -0.333333333333e0;
    real _t097C = 0.666666666667e0;
    real _t097D = -0.333333333333e0;
    real _t097E = 0.333333333333e0;
    vec4 _t097F = [_t097B, _t097C, _t097D, _t097E];
    real _t0980 = -0.333333333333e0;
    real _t0981 = -0.333333333333e0;
    real _t0982 = 0.666666666667e0;
    real _t0983 = 0.333333333333e0;
    vec4 _t0984 = [_t0980, _t0981, _t0982, _t0983];
    real _t0985 = 0.57735026919e0;
    real _t0986 = 0.57735026919e0;
    real _t0987 = 0.57735026919e0;
    real _t0988 = -0.57735026919e0;
    vec4 _t0989 = [_t0985, _t0986, _t0987, _t0988];
    real _t098A = 0.971445146547e-16;
    real _t098B = 0.e0;
    real _t098C = 0.e0;
    real _t098D = 0.1e1;
    vec4 _t098E = [_t098A, _t098B, _t098C, _t098D];
    tensor[4,4] _t098F = [_t097F, _t0984, _t0989, _t098E];
    tensor[4,4][4] _t0990 = {_t0950, _t0965, _t097A, _t098F};
    real _t0991 = 0.57735026919e0;
    real _t0992 = -0.1e1;
    real _t0993 = -0.1e1;
    real _t0994 = 0.1e1;
    vec4 _t0995 = [_t0991, _t0992, _t0993, _t0994];
    real _t0996 = 0.57735026919e0;
    real _t0997 = 0.1e1;
    real _t0998 = 0.e0;
    real _t0999 = 0.e0;
    vec4 _t099A = [_t0996, _t0997, _t0998, _t0999];
    real _t099B = 0.57735026919e0;
    real _t099C = 0.e0;
    real _t099D = 0.1e1;
    real _t099E = 0.e0;
    vec4 _t099F = [_t099B, _t099C, _t099D, _t099E];
    real _t09A0 = 0.e0;
    real _t09A1 = 0.e0;
    real _t09A2 = 0.e0;
    real _t09A3 = 0.1e1;
    vec4 _t09A4 = [_t09A0, _t09A1, _t09A2, _t09A3];
    tensor[4,4] _t09A5 = [_t0995, _t099A, _t099F, _t09A4];
    real _t09A6 = 0.1e1;
    real _t09A7 = 0.e0;
    real _t09A8 = 0.e0;
    real _t09A9 = 0.e0;
    vec4 _t09AA = [_t09A6, _t09A7, _t09A8, _t09A9];
    real _t09AB = 0.e0;
    real _t09AC = 0.1e1;
    real _t09AD = 0.e0;
    real _t09AE = 0.e0;
    vec4 _t09AF = [_t09AB, _t09AC, _t09AD, _t09AE];
    real _t09B0 = 0.e0;
    real _t09B1 = 0.e0;
    real _t09B2 = 0.1e1;
    real _t09B3 = 0.e0;
    vec4 _t09B4 = [_t09B0, _t09B1, _t09B2, _t09B3];
    real _t09B5 = 0.e0;
    real _t09B6 = 0.e0;
    real _t09B7 = 0.e0;
    real _t09B8 = 0.1e1;
    vec4 _t09B9 = [_t09B5, _t09B6, _t09B7, _t09B8];
    tensor[4,4] _t09BA = [_t09AA, _t09AF, _t09B4, _t09B9];
    real _t09BB = 0.e0;
    real _t09BC = 0.1e1;
    real _t09BD = 0.e0;
    real _t09BE = 0.e0;
    vec4 _t09BF = [_t09BB, _t09BC, _t09BD, _t09BE];
    real _t09C0 = -0.1e1;
    real _t09C1 = 0.e0;
    real _t09C2 = 0.e0;
    real _t09C3 = 0.e0;
    vec4 _t09C4 = [_t09C0, _t09C1, _t09C2, _t09C3];
    real _t09C5 = 0.e0;
    real _t09C6 = 0.e0;
    real _t09C7 = 0.1e1;
    real _t09C8 = 0.e0;
    vec4 _t09C9 = [_t09C5, _t09C6, _t09C7, _t09C8];
    real _t09CA = 0.e0;
    real _t09CB = 0.e0;
    real _t09CC = 0.e0;
    real _t09CD = 0.1e1;
    vec4 _t09CE = [_t09CA, _t09CB, _t09CC, _t09CD];
    tensor[4,4] _t09CF = [_t09BF, _t09C4, _t09C9, _t09CE];
    real _t09D0 = 0.e0;
    real _t09D1 = 0.1e1;
    real _t09D2 = 0.e0;
    real _t09D3 = 0.e0;
    vec4 _t09D4 = [_t09D0, _t09D1, _t09D2, _t09D3];
    real _t09D5 = 0.e0;
    real _t09D6 = 0.e0;
    real _t09D7 = 0.1e1;
    real _t09D8 = 0.e0;
    vec4 _t09D9 = [_t09D5, _t09D6, _t09D7, _t09D8];
    real _t09DA = 0.1e1;
    real _t09DB = 0.e0;
    real _t09DC = 0.e0;
    real _t09DD = 0.e0;
    vec4 _t09DE = [_t09DA, _t09DB, _t09DC, _t09DD];
    real _t09DF = 0.e0;
    real _t09E0 = 0.e0;
    real _t09E1 = 0.e0;
    real _t09E2 = 0.1e1;
    vec4 _t09E3 = [_t09DF, _t09E0, _t09E1, _t09E2];
    tensor[4,4] _t09E4 = [_t09D4, _t09D9, _t09DE, _t09E3];
    tensor[4,4][4] _t09E5 = {_t09A5, _t09BA, _t09CF, _t09E4};
    real _t09E6 = -0.1e1;
    real _t09E7 = -0.57735026919e0;
    real _t09E8 = -0.1e1;
    real _t09E9 = 0.1e1;
    vec4 _t09EA = [_t09E6, _t09E7, _t09E8, _t09E9];
    real _t09EB = 0.1e1;
    real _t09EC = -0.57735026919e0;
    real _t09ED = 0.e0;
    real _t09EE = 0.e0;
    vec4 _t09EF = [_t09EB, _t09EC, _t09ED, _t09EE];
    real _t09F0 = 0.e0;
    real _t09F1 = -0.57735026919e0;
    real _t09F2 = 0.1e1;
    real _t09F3 = 0.e0;
    vec4 _t09F4 = [_t09F0, _t09F1, _t09F2, _t09F3];
    real _t09F5 = 0.e0;
    real _t09F6 = 0.e0;
    real _t09F7 = 0.e0;
    real _t09F8 = 0.1e1;
    vec4 _t09F9 = [_t09F5, _t09F6, _t09F7, _t09F8];
    tensor[4,4] _t09FA = [_t09EA, _t09EF, _t09F4, _t09F9];
    real _t09FB = 0.e0;
    real _t09FC = -0.1e1;
    real _t09FD = 0.e0;
    real _t09FE = 0.e0;
    vec4 _t09FF = [_t09FB, _t09FC, _t09FD, _t09FE];
    real _t0A00 = 0.1e1;
    real _t0A01 = 0.e0;
    real _t0A02 = 0.e0;
    real _t0A03 = 0.e0;
    vec4 _t0A04 = [_t0A00, _t0A01, _t0A02, _t0A03];
    real _t0A05 = 0.e0;
    real _t0A06 = 0.e0;
    real _t0A07 = 0.1e1;
    real _t0A08 = 0.e0;
    vec4 _t0A09 = [_t0A05, _t0A06, _t0A07, _t0A08];
    real _t0A0A = 0.e0;
    real _t0A0B = 0.e0;
    real _t0A0C = 0.e0;
    real _t0A0D = 0.1e1;
    vec4 _t0A0E = [_t0A0A, _t0A0B, _t0A0C, _t0A0D];
    tensor[4,4] _t0A0F = [_t09FF, _t0A04, _t0A09, _t0A0E];
    real _t0A10 = 0.1e1;
    real _t0A11 = 0.e0;
    real _t0A12 = 0.e0;
    real _t0A13 = 0.e0;
    vec4 _t0A14 = [_t0A10, _t0A11, _t0A12, _t0A13];
    real _t0A15 = 0.e0;
    real _t0A16 = 0.1e1;
    real _t0A17 = 0.e0;
    real _t0A18 = 0.e0;
    vec4 _t0A19 = [_t0A15, _t0A16, _t0A17, _t0A18];
    real _t0A1A = 0.e0;
    real _t0A1B = 0.e0;
    real _t0A1C = 0.1e1;
    real _t0A1D = 0.e0;
    vec4 _t0A1E = [_t0A1A, _t0A1B, _t0A1C, _t0A1D];
    real _t0A1F = 0.e0;
    real _t0A20 = 0.e0;
    real _t0A21 = 0.e0;
    real _t0A22 = 0.1e1;
    vec4 _t0A23 = [_t0A1F, _t0A20, _t0A21, _t0A22];
    tensor[4,4] _t0A24 = [_t0A14, _t0A19, _t0A1E, _t0A23];
    real _t0A25 = 0.1e1;
    real _t0A26 = 0.e0;
    real _t0A27 = 0.e0;
    real _t0A28 = 0.e0;
    vec4 _t0A29 = [_t0A25, _t0A26, _t0A27, _t0A28];
    real _t0A2A = 0.e0;
    real _t0A2B = 0.e0;
    real _t0A2C = 0.1e1;
    real _t0A2D = 0.e0;
    vec4 _t0A2E = [_t0A2A, _t0A2B, _t0A2C, _t0A2D];
    real _t0A2F = 0.e0;
    real _t0A30 = -0.1e1;
    real _t0A31 = 0.e0;
    real _t0A32 = 0.e0;
    vec4 _t0A33 = [_t0A2F, _t0A30, _t0A31, _t0A32];
    real _t0A34 = 0.e0;
    real _t0A35 = 0.e0;
    real _t0A36 = 0.e0;
    real _t0A37 = 0.1e1;
    vec4 _t0A38 = [_t0A34, _t0A35, _t0A36, _t0A37];
    tensor[4,4] _t0A39 = [_t0A29, _t0A2E, _t0A33, _t0A38];
    tensor[4,4][4] _t0A3A = {_t09FA, _t0A0F, _t0A24, _t0A39};
    real _t0A3B = -0.1e1;
    real _t0A3C = -0.1e1;
    real _t0A3D = 0.57735026919e0;
    real _t0A3E = 0.1e1;
    vec4 _t0A3F = [_t0A3B, _t0A3C, _t0A3D, _t0A3E];
    real _t0A40 = 0.1e1;
    real _t0A41 = 0.e0;
    real _t0A42 = 0.57735026919e0;
    real _t0A43 = 0.e0;
    vec4 _t0A44 = [_t0A40, _t0A41, _t0A42, _t0A43];
    real _t0A45 = 0.e0;
    real _t0A46 = 0.1e1;
    real _t0A47 = 0.57735026919e0;
    real _t0A48 = 0.e0;
    vec4 _t0A49 = [_t0A45, _t0A46, _t0A47, _t0A48];
    real _t0A4A = 0.e0;
    real _t0A4B = 0.e0;
    real _t0A4C = 0.e0;
    real _t0A4D = 0.1e1;
    vec4 _t0A4E = [_t0A4A, _t0A4B, _t0A4C, _t0A4D];
    tensor[4,4] _t0A4F = [_t0A3F, _t0A44, _t0A49, _t0A4E];
    real _t0A50 = 0.e0;
    real _t0A51 = 0.e0;
    real _t0A52 = 0.1e1;
    real _t0A53 = 0.e0;
    vec4 _t0A54 = [_t0A50, _t0A51, _t0A52, _t0A53];
    real _t0A55 = 0.1e1;
    real _t0A56 = 0.e0;
    real _t0A57 = 0.e0;
    real _t0A58 = 0.e0;
    vec4 _t0A59 = [_t0A55, _t0A56, _t0A57, _t0A58];
    real _t0A5A = 0.e0;
    real _t0A5B = 0.1e1;
    real _t0A5C = 0.e0;
    real _t0A5D = 0.e0;
    vec4 _t0A5E = [_t0A5A, _t0A5B, _t0A5C, _t0A5D];
    real _t0A5F = 0.e0;
    real _t0A60 = 0.e0;
    real _t0A61 = 0.e0;
    real _t0A62 = 0.1e1;
    vec4 _t0A63 = [_t0A5F, _t0A60, _t0A61, _t0A62];
    tensor[4,4] _t0A64 = [_t0A54, _t0A59, _t0A5E, _t0A63];
    real _t0A65 = 0.1e1;
    real _t0A66 = 0.e0;
    real _t0A67 = 0.e0;
    real _t0A68 = 0.e0;
    vec4 _t0A69 = [_t0A65, _t0A66, _t0A67, _t0A68];
    real _t0A6A = 0.e0;
    real _t0A6B = 0.e0;
    real _t0A6C = -0.1e1;
    real _t0A6D = 0.e0;
    vec4 _t0A6E = [_t0A6A, _t0A6B, _t0A6C, _t0A6D];
    real _t0A6F = 0.e0;
    real _t0A70 = 0.1e1;
    real _t0A71 = 0.e0;
    real _t0A72 = 0.e0;
    vec4 _t0A73 = [_t0A6F, _t0A70, _t0A71, _t0A72];
    real _t0A74 = 0.e0;
    real _t0A75 = 0.e0;
    real _t0A76 = 0.e0;
    real _t0A77 = 0.1e1;
    vec4 _t0A78 = [_t0A74, _t0A75, _t0A76, _t0A77];
    tensor[4,4] _t0A79 = [_t0A69, _t0A6E, _t0A73, _t0A78];
    real _t0A7A = 0.1e1;
    real _t0A7B = 0.e0;
    real _t0A7C = 0.e0;
    real _t0A7D = 0.e0;
    vec4 _t0A7E = [_t0A7A, _t0A7B, _t0A7C, _t0A7D];
    real _t0A7F = 0.e0;
    real _t0A80 = 0.1e1;
    real _t0A81 = 0.e0;
    real _t0A82 = 0.e0;
    vec4 _t0A83 = [_t0A7F, _t0A80, _t0A81, _t0A82];
    real _t0A84 = 0.e0;
    real _t0A85 = 0.e0;
    real _t0A86 = 0.1e1;
    real _t0A87 = 0.e0;
    vec4 _t0A88 = [_t0A84, _t0A85, _t0A86, _t0A87];
    real _t0A89 = 0.e0;
    real _t0A8A = 0.e0;
    real _t0A8B = 0.e0;
    real _t0A8C = 0.1e1;
    vec4 _t0A8D = [_t0A89, _t0A8A, _t0A8B, _t0A8C];
    tensor[4,4] _t0A8E = [_t0A7E, _t0A83, _t0A88, _t0A8D];
    tensor[4,4][4] _t0A8F = {_t0A4F, _t0A64, _t0A79, _t0A8E};
    tensor[4,4][4][4] _t0A90 = {_t0990, _t09E5, _t0A3A, _t0A8F};
    real _t0A91 = time092E[1];
    int _t0A92 = prim $r2i01B7 (_t0A91);
    tensor[4,4][4] _t0A93 = prim $sub01C0<tensor[4,4][4]; %4> (_t0A90, _t0A92);
    real _t0A94 = time092E[1];
    int _t0A95 = prim $r2i01B7 (_t0A94);
    int[2] _t0A96 = func nextCell40932 (_t0A95, cellId092B, mesh092A);
    int _t0A97 = 1;
    int _t0A98 = prim $sub01C0<int; %2> (_t0A96, _t0A97);
    tensor[4,4] _t0A99 = prim $sub01C0<tensor[4,4]; %4> (_t0A93, _t0A98);
    real _t0A9A = time092E[0];
    vec3 _t0A9B = prim *0036<$[3]> (_t0A9A, dPos092D);
    vec3 _t0A9C = prim +0017<$[3]> (_t0A9B, refPos092C);
    real _t0A9D = _t0A9C[0];
    real _t0A9E = time092E[0];
    vec3 _t0A9F = prim *0036<$[3]> (_t0A9E, dPos092D);
    vec3 _t0AA0 = prim +0017<$[3]> (_t0A9F, refPos092C);
    real _t0AA1 = _t0AA0[1];
    real _t0AA2 = time092E[0];
    vec3 _t0AA3 = prim *0036<$[3]> (_t0AA2, dPos092D);
    vec3 _t0AA4 = prim +0017<$[3]> (_t0AA3, refPos092C);
    real _t0AA5 = _t0AA4[2];
    real _t0AA6 = 0.1e1;
    vec4 _t0AA7 = [_t0A9D, _t0AA1, _t0AA5, _t0AA6];
    vec4 _t0AA8 = prim •00CE<$[4,4]; $[4]; $[4]> (_t0A99, _t0AA7);
    real _t0AA9 = _t0AA8[0];
    real _t0AAA = 0.1e1;
    real _t0AAB = 0.e0;
    real _t0AAC = 0.e0;
    real _t0AAD = 0.e0;
    vec4 _t0AAE = [_t0AAA, _t0AAB, _t0AAC, _t0AAD];
    real _t0AAF = 0.e0;
    real _t0AB0 = 0.1e1;
    real _t0AB1 = 0.e0;
    real _t0AB2 = 0.e0;
    vec4 _t0AB3 = [_t0AAF, _t0AB0, _t0AB1, _t0AB2];
    real _t0AB4 = 0.e0;
    real _t0AB5 = 0.e0;
    real _t0AB6 = 0.1e1;
    real _t0AB7 = 0.e0;
    vec4 _t0AB8 = [_t0AB4, _t0AB5, _t0AB6, _t0AB7];
    real _t0AB9 = 0.971445146547e-16;
    real _t0ABA = 0.e0;
    real _t0ABB = 0.e0;
    real _t0ABC = 0.1e1;
    vec4 _t0ABD = [_t0AB9, _t0ABA, _t0ABB, _t0ABC];
    tensor[4,4] _t0ABE = [_t0AAE, _t0AB3, _t0AB8, _t0ABD];
    real _t0ABF = 0.57735026919e0;
    real _t0AC0 = 0.57735026919e0;
    real _t0AC1 = 0.57735026919e0;
    real _t0AC2 = -0.57735026919e0;
    vec4 _t0AC3 = [_t0ABF, _t0AC0, _t0AC1, _t0AC2];
    real _t0AC4 = -0.333333333333e0;
    real _t0AC5 = 0.666666666667e0;
    real _t0AC6 = -0.333333333333e0;
    real _t0AC7 = 0.333333333333e0;
    vec4 _t0AC8 = [_t0AC4, _t0AC5, _t0AC6, _t0AC7];
    real _t0AC9 = -0.333333333333e0;
    real _t0ACA = -0.333333333333e0;
    real _t0ACB = 0.666666666667e0;
    real _t0ACC = 0.333333333333e0;
    vec4 _t0ACD = [_t0AC9, _t0ACA, _t0ACB, _t0ACC];
    real _t0ACE = 0.971445146547e-16;
    real _t0ACF = 0.e0;
    real _t0AD0 = 0.e0;
    real _t0AD1 = 0.1e1;
    vec4 _t0AD2 = [_t0ACE, _t0ACF, _t0AD0, _t0AD1];
    tensor[4,4] _t0AD3 = [_t0AC3, _t0AC8, _t0ACD, _t0AD2];
    real _t0AD4 = -0.333333333333e0;
    real _t0AD5 = 0.666666666667e0;
    real _t0AD6 = -0.333333333333e0;
    real _t0AD7 = 0.333333333333e0;
    vec4 _t0AD8 = [_t0AD4, _t0AD5, _t0AD6, _t0AD7];
    real _t0AD9 = -0.57735026919e0;
    real _t0ADA = -0.57735026919e0;
    real _t0ADB = -0.57735026919e0;
    real _t0ADC = 0.57735026919e0;
    vec4 _t0ADD = [_t0AD9, _t0ADA, _t0ADB, _t0ADC];
    real _t0ADE = -0.333333333333e0;
    real _t0ADF = -0.333333333333e0;
    real _t0AE0 = 0.666666666667e0;
    real _t0AE1 = 0.333333333333e0;
    vec4 _t0AE2 = [_t0ADE, _t0ADF, _t0AE0, _t0AE1];
    real _t0AE3 = 0.971445146547e-16;
    real _t0AE4 = 0.e0;
    real _t0AE5 = 0.e0;
    real _t0AE6 = 0.1e1;
    vec4 _t0AE7 = [_t0AE3, _t0AE4, _t0AE5, _t0AE6];
    tensor[4,4] _t0AE8 = [_t0AD8, _t0ADD, _t0AE2, _t0AE7];
    real _t0AE9 = -0.333333333333e0;
    real _t0AEA = 0.666666666667e0;
    real _t0AEB = -0.333333333333e0;
    real _t0AEC = 0.333333333333e0;
    vec4 _t0AED = [_t0AE9, _t0AEA, _t0AEB, _t0AEC];
    real _t0AEE = -0.333333333333e0;
    real _t0AEF = -0.333333333333e0;
    real _t0AF0 = 0.666666666667e0;
    real _t0AF1 = 0.333333333333e0;
    vec4 _t0AF2 = [_t0AEE, _t0AEF, _t0AF0, _t0AF1];
    real _t0AF3 = 0.57735026919e0;
    real _t0AF4 = 0.57735026919e0;
    real _t0AF5 = 0.57735026919e0;
    real _t0AF6 = -0.57735026919e0;
    vec4 _t0AF7 = [_t0AF3, _t0AF4, _t0AF5, _t0AF6];
    real _t0AF8 = 0.971445146547e-16;
    real _t0AF9 = 0.e0;
    real _t0AFA = 0.e0;
    real _t0AFB = 0.1e1;
    vec4 _t0AFC = [_t0AF8, _t0AF9, _t0AFA, _t0AFB];
    tensor[4,4] _t0AFD = [_t0AED, _t0AF2, _t0AF7, _t0AFC];
    tensor[4,4][4] _t0AFE = {_t0ABE, _t0AD3, _t0AE8, _t0AFD};
    real _t0AFF = 0.57735026919e0;
    real _t0B00 = -0.1e1;
    real _t0B01 = -0.1e1;
    real _t0B02 = 0.1e1;
    vec4 _t0B03 = [_t0AFF, _t0B00, _t0B01, _t0B02];
    real _t0B04 = 0.57735026919e0;
    real _t0B05 = 0.1e1;
    real _t0B06 = 0.e0;
    real _t0B07 = 0.e0;
    vec4 _t0B08 = [_t0B04, _t0B05, _t0B06, _t0B07];
    real _t0B09 = 0.57735026919e0;
    real _t0B0A = 0.e0;
    real _t0B0B = 0.1e1;
    real _t0B0C = 0.e0;
    vec4 _t0B0D = [_t0B09, _t0B0A, _t0B0B, _t0B0C];
    real _t0B0E = 0.e0;
    real _t0B0F = 0.e0;
    real _t0B10 = 0.e0;
    real _t0B11 = 0.1e1;
    vec4 _t0B12 = [_t0B0E, _t0B0F, _t0B10, _t0B11];
    tensor[4,4] _t0B13 = [_t0B03, _t0B08, _t0B0D, _t0B12];
    real _t0B14 = 0.1e1;
    real _t0B15 = 0.e0;
    real _t0B16 = 0.e0;
    real _t0B17 = 0.e0;
    vec4 _t0B18 = [_t0B14, _t0B15, _t0B16, _t0B17];
    real _t0B19 = 0.e0;
    real _t0B1A = 0.1e1;
    real _t0B1B = 0.e0;
    real _t0B1C = 0.e0;
    vec4 _t0B1D = [_t0B19, _t0B1A, _t0B1B, _t0B1C];
    real _t0B1E = 0.e0;
    real _t0B1F = 0.e0;
    real _t0B20 = 0.1e1;
    real _t0B21 = 0.e0;
    vec4 _t0B22 = [_t0B1E, _t0B1F, _t0B20, _t0B21];
    real _t0B23 = 0.e0;
    real _t0B24 = 0.e0;
    real _t0B25 = 0.e0;
    real _t0B26 = 0.1e1;
    vec4 _t0B27 = [_t0B23, _t0B24, _t0B25, _t0B26];
    tensor[4,4] _t0B28 = [_t0B18, _t0B1D, _t0B22, _t0B27];
    real _t0B29 = 0.e0;
    real _t0B2A = 0.1e1;
    real _t0B2B = 0.e0;
    real _t0B2C = 0.e0;
    vec4 _t0B2D = [_t0B29, _t0B2A, _t0B2B, _t0B2C];
    real _t0B2E = -0.1e1;
    real _t0B2F = 0.e0;
    real _t0B30 = 0.e0;
    real _t0B31 = 0.e0;
    vec4 _t0B32 = [_t0B2E, _t0B2F, _t0B30, _t0B31];
    real _t0B33 = 0.e0;
    real _t0B34 = 0.e0;
    real _t0B35 = 0.1e1;
    real _t0B36 = 0.e0;
    vec4 _t0B37 = [_t0B33, _t0B34, _t0B35, _t0B36];
    real _t0B38 = 0.e0;
    real _t0B39 = 0.e0;
    real _t0B3A = 0.e0;
    real _t0B3B = 0.1e1;
    vec4 _t0B3C = [_t0B38, _t0B39, _t0B3A, _t0B3B];
    tensor[4,4] _t0B3D = [_t0B2D, _t0B32, _t0B37, _t0B3C];
    real _t0B3E = 0.e0;
    real _t0B3F = 0.1e1;
    real _t0B40 = 0.e0;
    real _t0B41 = 0.e0;
    vec4 _t0B42 = [_t0B3E, _t0B3F, _t0B40, _t0B41];
    real _t0B43 = 0.e0;
    real _t0B44 = 0.e0;
    real _t0B45 = 0.1e1;
    real _t0B46 = 0.e0;
    vec4 _t0B47 = [_t0B43, _t0B44, _t0B45, _t0B46];
    real _t0B48 = 0.1e1;
    real _t0B49 = 0.e0;
    real _t0B4A = 0.e0;
    real _t0B4B = 0.e0;
    vec4 _t0B4C = [_t0B48, _t0B49, _t0B4A, _t0B4B];
    real _t0B4D = 0.e0;
    real _t0B4E = 0.e0;
    real _t0B4F = 0.e0;
    real _t0B50 = 0.1e1;
    vec4 _t0B51 = [_t0B4D, _t0B4E, _t0B4F, _t0B50];
    tensor[4,4] _t0B52 = [_t0B42, _t0B47, _t0B4C, _t0B51];
    tensor[4,4][4] _t0B53 = {_t0B13, _t0B28, _t0B3D, _t0B52};
    real _t0B54 = -0.1e1;
    real _t0B55 = -0.57735026919e0;
    real _t0B56 = -0.1e1;
    real _t0B57 = 0.1e1;
    vec4 _t0B58 = [_t0B54, _t0B55, _t0B56, _t0B57];
    real _t0B59 = 0.1e1;
    real _t0B5A = -0.57735026919e0;
    real _t0B5B = 0.e0;
    real _t0B5C = 0.e0;
    vec4 _t0B5D = [_t0B59, _t0B5A, _t0B5B, _t0B5C];
    real _t0B5E = 0.e0;
    real _t0B5F = -0.57735026919e0;
    real _t0B60 = 0.1e1;
    real _t0B61 = 0.e0;
    vec4 _t0B62 = [_t0B5E, _t0B5F, _t0B60, _t0B61];
    real _t0B63 = 0.e0;
    real _t0B64 = 0.e0;
    real _t0B65 = 0.e0;
    real _t0B66 = 0.1e1;
    vec4 _t0B67 = [_t0B63, _t0B64, _t0B65, _t0B66];
    tensor[4,4] _t0B68 = [_t0B58, _t0B5D, _t0B62, _t0B67];
    real _t0B69 = 0.e0;
    real _t0B6A = -0.1e1;
    real _t0B6B = 0.e0;
    real _t0B6C = 0.e0;
    vec4 _t0B6D = [_t0B69, _t0B6A, _t0B6B, _t0B6C];
    real _t0B6E = 0.1e1;
    real _t0B6F = 0.e0;
    real _t0B70 = 0.e0;
    real _t0B71 = 0.e0;
    vec4 _t0B72 = [_t0B6E, _t0B6F, _t0B70, _t0B71];
    real _t0B73 = 0.e0;
    real _t0B74 = 0.e0;
    real _t0B75 = 0.1e1;
    real _t0B76 = 0.e0;
    vec4 _t0B77 = [_t0B73, _t0B74, _t0B75, _t0B76];
    real _t0B78 = 0.e0;
    real _t0B79 = 0.e0;
    real _t0B7A = 0.e0;
    real _t0B7B = 0.1e1;
    vec4 _t0B7C = [_t0B78, _t0B79, _t0B7A, _t0B7B];
    tensor[4,4] _t0B7D = [_t0B6D, _t0B72, _t0B77, _t0B7C];
    real _t0B7E = 0.1e1;
    real _t0B7F = 0.e0;
    real _t0B80 = 0.e0;
    real _t0B81 = 0.e0;
    vec4 _t0B82 = [_t0B7E, _t0B7F, _t0B80, _t0B81];
    real _t0B83 = 0.e0;
    real _t0B84 = 0.1e1;
    real _t0B85 = 0.e0;
    real _t0B86 = 0.e0;
    vec4 _t0B87 = [_t0B83, _t0B84, _t0B85, _t0B86];
    real _t0B88 = 0.e0;
    real _t0B89 = 0.e0;
    real _t0B8A = 0.1e1;
    real _t0B8B = 0.e0;
    vec4 _t0B8C = [_t0B88, _t0B89, _t0B8A, _t0B8B];
    real _t0B8D = 0.e0;
    real _t0B8E = 0.e0;
    real _t0B8F = 0.e0;
    real _t0B90 = 0.1e1;
    vec4 _t0B91 = [_t0B8D, _t0B8E, _t0B8F, _t0B90];
    tensor[4,4] _t0B92 = [_t0B82, _t0B87, _t0B8C, _t0B91];
    real _t0B93 = 0.1e1;
    real _t0B94 = 0.e0;
    real _t0B95 = 0.e0;
    real _t0B96 = 0.e0;
    vec4 _t0B97 = [_t0B93, _t0B94, _t0B95, _t0B96];
    real _t0B98 = 0.e0;
    real _t0B99 = 0.e0;
    real _t0B9A = 0.1e1;
    real _t0B9B = 0.e0;
    vec4 _t0B9C = [_t0B98, _t0B99, _t0B9A, _t0B9B];
    real _t0B9D = 0.e0;
    real _t0B9E = -0.1e1;
    real _t0B9F = 0.e0;
    real _t0BA0 = 0.e0;
    vec4 _t0BA1 = [_t0B9D, _t0B9E, _t0B9F, _t0BA0];
    real _t0BA2 = 0.e0;
    real _t0BA3 = 0.e0;
    real _t0BA4 = 0.e0;
    real _t0BA5 = 0.1e1;
    vec4 _t0BA6 = [_t0BA2, _t0BA3, _t0BA4, _t0BA5];
    tensor[4,4] _t0BA7 = [_t0B97, _t0B9C, _t0BA1, _t0BA6];
    tensor[4,4][4] _t0BA8 = {_t0B68, _t0B7D, _t0B92, _t0BA7};
    real _t0BA9 = -0.1e1;
    real _t0BAA = -0.1e1;
    real _t0BAB = 0.57735026919e0;
    real _t0BAC = 0.1e1;
    vec4 _t0BAD = [_t0BA9, _t0BAA, _t0BAB, _t0BAC];
    real _t0BAE = 0.1e1;
    real _t0BAF = 0.e0;
    real _t0BB0 = 0.57735026919e0;
    real _t0BB1 = 0.e0;
    vec4 _t0BB2 = [_t0BAE, _t0BAF, _t0BB0, _t0BB1];
    real _t0BB3 = 0.e0;
    real _t0BB4 = 0.1e1;
    real _t0BB5 = 0.57735026919e0;
    real _t0BB6 = 0.e0;
    vec4 _t0BB7 = [_t0BB3, _t0BB4, _t0BB5, _t0BB6];
    real _t0BB8 = 0.e0;
    real _t0BB9 = 0.e0;
    real _t0BBA = 0.e0;
    real _t0BBB = 0.1e1;
    vec4 _t0BBC = [_t0BB8, _t0BB9, _t0BBA, _t0BBB];
    tensor[4,4] _t0BBD = [_t0BAD, _t0BB2, _t0BB7, _t0BBC];
    real _t0BBE = 0.e0;
    real _t0BBF = 0.e0;
    real _t0BC0 = 0.1e1;
    real _t0BC1 = 0.e0;
    vec4 _t0BC2 = [_t0BBE, _t0BBF, _t0BC0, _t0BC1];
    real _t0BC3 = 0.1e1;
    real _t0BC4 = 0.e0;
    real _t0BC5 = 0.e0;
    real _t0BC6 = 0.e0;
    vec4 _t0BC7 = [_t0BC3, _t0BC4, _t0BC5, _t0BC6];
    real _t0BC8 = 0.e0;
    real _t0BC9 = 0.1e1;
    real _t0BCA = 0.e0;
    real _t0BCB = 0.e0;
    vec4 _t0BCC = [_t0BC8, _t0BC9, _t0BCA, _t0BCB];
    real _t0BCD = 0.e0;
    real _t0BCE = 0.e0;
    real _t0BCF = 0.e0;
    real _t0BD0 = 0.1e1;
    vec4 _t0BD1 = [_t0BCD, _t0BCE, _t0BCF, _t0BD0];
    tensor[4,4] _t0BD2 = [_t0BC2, _t0BC7, _t0BCC, _t0BD1];
    real _t0BD3 = 0.1e1;
    real _t0BD4 = 0.e0;
    real _t0BD5 = 0.e0;
    real _t0BD6 = 0.e0;
    vec4 _t0BD7 = [_t0BD3, _t0BD4, _t0BD5, _t0BD6];
    real _t0BD8 = 0.e0;
    real _t0BD9 = 0.e0;
    real _t0BDA = -0.1e1;
    real _t0BDB = 0.e0;
    vec4 _t0BDC = [_t0BD8, _t0BD9, _t0BDA, _t0BDB];
    real _t0BDD = 0.e0;
    real _t0BDE = 0.1e1;
    real _t0BDF = 0.e0;
    real _t0BE0 = 0.e0;
    vec4 _t0BE1 = [_t0BDD, _t0BDE, _t0BDF, _t0BE0];
    real _t0BE2 = 0.e0;
    real _t0BE3 = 0.e0;
    real _t0BE4 = 0.e0;
    real _t0BE5 = 0.1e1;
    vec4 _t0BE6 = [_t0BE2, _t0BE3, _t0BE4, _t0BE5];
    tensor[4,4] _t0BE7 = [_t0BD7, _t0BDC, _t0BE1, _t0BE6];
    real _t0BE8 = 0.1e1;
    real _t0BE9 = 0.e0;
    real _t0BEA = 0.e0;
    real _t0BEB = 0.e0;
    vec4 _t0BEC = [_t0BE8, _t0BE9, _t0BEA, _t0BEB];
    real _t0BED = 0.e0;
    real _t0BEE = 0.1e1;
    real _t0BEF = 0.e0;
    real _t0BF0 = 0.e0;
    vec4 _t0BF1 = [_t0BED, _t0BEE, _t0BEF, _t0BF0];
    real _t0BF2 = 0.e0;
    real _t0BF3 = 0.e0;
    real _t0BF4 = 0.1e1;
    real _t0BF5 = 0.e0;
    vec4 _t0BF6 = [_t0BF2, _t0BF3, _t0BF4, _t0BF5];
    real _t0BF7 = 0.e0;
    real _t0BF8 = 0.e0;
    real _t0BF9 = 0.e0;
    real _t0BFA = 0.1e1;
    vec4 _t0BFB = [_t0BF7, _t0BF8, _t0BF9, _t0BFA];
    tensor[4,4] _t0BFC = [_t0BEC, _t0BF1, _t0BF6, _t0BFB];
    tensor[4,4][4] _t0BFD = {_t0BBD, _t0BD2, _t0BE7, _t0BFC};
    tensor[4,4][4][4] _t0BFE = {_t0AFE, _t0B53, _t0BA8, _t0BFD};
    real _t0BFF = time092E[1];
    int _t0C00 = prim $r2i01B7 (_t0BFF);
    tensor[4,4][4] _t0C01 = prim $sub01C0<tensor[4,4][4]; %4> (_t0BFE, _t0C00);
    real _t0C02 = time092E[1];
    int _t0C03 = prim $r2i01B7 (_t0C02);
    int[2] _t0C04 = func nextCell40932 (_t0C03, cellId092B, mesh092A);
    int _t0C05 = 1;
    int _t0C06 = prim $sub01C0<int; %2> (_t0C04, _t0C05);
    tensor[4,4] _t0C07 = prim $sub01C0<tensor[4,4]; %4> (_t0C01, _t0C06);
    real _t0C08 = time092E[0];
    vec3 _t0C09 = prim *0036<$[3]> (_t0C08, dPos092D);
    vec3 _t0C0A = prim +0017<$[3]> (_t0C09, refPos092C);
    real _t0C0B = _t0C0A[0];
    real _t0C0C = time092E[0];
    vec3 _t0C0D = prim *0036<$[3]> (_t0C0C, dPos092D);
    vec3 _t0C0E = prim +0017<$[3]> (_t0C0D, refPos092C);
    real _t0C0F = _t0C0E[1];
    real _t0C10 = time092E[0];
    vec3 _t0C11 = prim *0036<$[3]> (_t0C10, dPos092D);
    vec3 _t0C12 = prim +0017<$[3]> (_t0C11, refPos092C);
    real _t0C13 = _t0C12[2];
    real _t0C14 = 0.1e1;
    vec4 _t0C15 = [_t0C0B, _t0C0F, _t0C13, _t0C14];
    vec4 _t0C16 = prim •00CE<$[4,4]; $[4]; $[4]> (_t0C07, _t0C15);
    real _t0C17 = _t0C16[1];
    real _t0C18 = 0.1e1;
    real _t0C19 = 0.e0;
    real _t0C1A = 0.e0;
    real _t0C1B = 0.e0;
    vec4 _t0C1C = [_t0C18, _t0C19, _t0C1A, _t0C1B];
    real _t0C1D = 0.e0;
    real _t0C1E = 0.1e1;
    real _t0C1F = 0.e0;
    real _t0C20 = 0.e0;
    vec4 _t0C21 = [_t0C1D, _t0C1E, _t0C1F, _t0C20];
    real _t0C22 = 0.e0;
    real _t0C23 = 0.e0;
    real _t0C24 = 0.1e1;
    real _t0C25 = 0.e0;
    vec4 _t0C26 = [_t0C22, _t0C23, _t0C24, _t0C25];
    real _t0C27 = 0.971445146547e-16;
    real _t0C28 = 0.e0;
    real _t0C29 = 0.e0;
    real _t0C2A = 0.1e1;
    vec4 _t0C2B = [_t0C27, _t0C28, _t0C29, _t0C2A];
    tensor[4,4] _t0C2C = [_t0C1C, _t0C21, _t0C26, _t0C2B];
    real _t0C2D = 0.57735026919e0;
    real _t0C2E = 0.57735026919e0;
    real _t0C2F = 0.57735026919e0;
    real _t0C30 = -0.57735026919e0;
    vec4 _t0C31 = [_t0C2D, _t0C2E, _t0C2F, _t0C30];
    real _t0C32 = -0.333333333333e0;
    real _t0C33 = 0.666666666667e0;
    real _t0C34 = -0.333333333333e0;
    real _t0C35 = 0.333333333333e0;
    vec4 _t0C36 = [_t0C32, _t0C33, _t0C34, _t0C35];
    real _t0C37 = -0.333333333333e0;
    real _t0C38 = -0.333333333333e0;
    real _t0C39 = 0.666666666667e0;
    real _t0C3A = 0.333333333333e0;
    vec4 _t0C3B = [_t0C37, _t0C38, _t0C39, _t0C3A];
    real _t0C3C = 0.971445146547e-16;
    real _t0C3D = 0.e0;
    real _t0C3E = 0.e0;
    real _t0C3F = 0.1e1;
    vec4 _t0C40 = [_t0C3C, _t0C3D, _t0C3E, _t0C3F];
    tensor[4,4] _t0C41 = [_t0C31, _t0C36, _t0C3B, _t0C40];
    real _t0C42 = -0.333333333333e0;
    real _t0C43 = 0.666666666667e0;
    real _t0C44 = -0.333333333333e0;
    real _t0C45 = 0.333333333333e0;
    vec4 _t0C46 = [_t0C42, _t0C43, _t0C44, _t0C45];
    real _t0C47 = -0.57735026919e0;
    real _t0C48 = -0.57735026919e0;
    real _t0C49 = -0.57735026919e0;
    real _t0C4A = 0.57735026919e0;
    vec4 _t0C4B = [_t0C47, _t0C48, _t0C49, _t0C4A];
    real _t0C4C = -0.333333333333e0;
    real _t0C4D = -0.333333333333e0;
    real _t0C4E = 0.666666666667e0;
    real _t0C4F = 0.333333333333e0;
    vec4 _t0C50 = [_t0C4C, _t0C4D, _t0C4E, _t0C4F];
    real _t0C51 = 0.971445146547e-16;
    real _t0C52 = 0.e0;
    real _t0C53 = 0.e0;
    real _t0C54 = 0.1e1;
    vec4 _t0C55 = [_t0C51, _t0C52, _t0C53, _t0C54];
    tensor[4,4] _t0C56 = [_t0C46, _t0C4B, _t0C50, _t0C55];
    real _t0C57 = -0.333333333333e0;
    real _t0C58 = 0.666666666667e0;
    real _t0C59 = -0.333333333333e0;
    real _t0C5A = 0.333333333333e0;
    vec4 _t0C5B = [_t0C57, _t0C58, _t0C59, _t0C5A];
    real _t0C5C = -0.333333333333e0;
    real _t0C5D = -0.333333333333e0;
    real _t0C5E = 0.666666666667e0;
    real _t0C5F = 0.333333333333e0;
    vec4 _t0C60 = [_t0C5C, _t0C5D, _t0C5E, _t0C5F];
    real _t0C61 = 0.57735026919e0;
    real _t0C62 = 0.57735026919e0;
    real _t0C63 = 0.57735026919e0;
    real _t0C64 = -0.57735026919e0;
    vec4 _t0C65 = [_t0C61, _t0C62, _t0C63, _t0C64];
    real _t0C66 = 0.971445146547e-16;
    real _t0C67 = 0.e0;
    real _t0C68 = 0.e0;
    real _t0C69 = 0.1e1;
    vec4 _t0C6A = [_t0C66, _t0C67, _t0C68, _t0C69];
    tensor[4,4] _t0C6B = [_t0C5B, _t0C60, _t0C65, _t0C6A];
    tensor[4,4][4] _t0C6C = {_t0C2C, _t0C41, _t0C56, _t0C6B};
    real _t0C6D = 0.57735026919e0;
    real _t0C6E = -0.1e1;
    real _t0C6F = -0.1e1;
    real _t0C70 = 0.1e1;
    vec4 _t0C71 = [_t0C6D, _t0C6E, _t0C6F, _t0C70];
    real _t0C72 = 0.57735026919e0;
    real _t0C73 = 0.1e1;
    real _t0C74 = 0.e0;
    real _t0C75 = 0.e0;
    vec4 _t0C76 = [_t0C72, _t0C73, _t0C74, _t0C75];
    real _t0C77 = 0.57735026919e0;
    real _t0C78 = 0.e0;
    real _t0C79 = 0.1e1;
    real _t0C7A = 0.e0;
    vec4 _t0C7B = [_t0C77, _t0C78, _t0C79, _t0C7A];
    real _t0C7C = 0.e0;
    real _t0C7D = 0.e0;
    real _t0C7E = 0.e0;
    real _t0C7F = 0.1e1;
    vec4 _t0C80 = [_t0C7C, _t0C7D, _t0C7E, _t0C7F];
    tensor[4,4] _t0C81 = [_t0C71, _t0C76, _t0C7B, _t0C80];
    real _t0C82 = 0.1e1;
    real _t0C83 = 0.e0;
    real _t0C84 = 0.e0;
    real _t0C85 = 0.e0;
    vec4 _t0C86 = [_t0C82, _t0C83, _t0C84, _t0C85];
    real _t0C87 = 0.e0;
    real _t0C88 = 0.1e1;
    real _t0C89 = 0.e0;
    real _t0C8A = 0.e0;
    vec4 _t0C8B = [_t0C87, _t0C88, _t0C89, _t0C8A];
    real _t0C8C = 0.e0;
    real _t0C8D = 0.e0;
    real _t0C8E = 0.1e1;
    real _t0C8F = 0.e0;
    vec4 _t0C90 = [_t0C8C, _t0C8D, _t0C8E, _t0C8F];
    real _t0C91 = 0.e0;
    real _t0C92 = 0.e0;
    real _t0C93 = 0.e0;
    real _t0C94 = 0.1e1;
    vec4 _t0C95 = [_t0C91, _t0C92, _t0C93, _t0C94];
    tensor[4,4] _t0C96 = [_t0C86, _t0C8B, _t0C90, _t0C95];
    real _t0C97 = 0.e0;
    real _t0C98 = 0.1e1;
    real _t0C99 = 0.e0;
    real _t0C9A = 0.e0;
    vec4 _t0C9B = [_t0C97, _t0C98, _t0C99, _t0C9A];
    real _t0C9C = -0.1e1;
    real _t0C9D = 0.e0;
    real _t0C9E = 0.e0;
    real _t0C9F = 0.e0;
    vec4 _t0CA0 = [_t0C9C, _t0C9D, _t0C9E, _t0C9F];
    real _t0CA1 = 0.e0;
    real _t0CA2 = 0.e0;
    real _t0CA3 = 0.1e1;
    real _t0CA4 = 0.e0;
    vec4 _t0CA5 = [_t0CA1, _t0CA2, _t0CA3, _t0CA4];
    real _t0CA6 = 0.e0;
    real _t0CA7 = 0.e0;
    real _t0CA8 = 0.e0;
    real _t0CA9 = 0.1e1;
    vec4 _t0CAA = [_t0CA6, _t0CA7, _t0CA8, _t0CA9];
    tensor[4,4] _t0CAB = [_t0C9B, _t0CA0, _t0CA5, _t0CAA];
    real _t0CAC = 0.e0;
    real _t0CAD = 0.1e1;
    real _t0CAE = 0.e0;
    real _t0CAF = 0.e0;
    vec4 _t0CB0 = [_t0CAC, _t0CAD, _t0CAE, _t0CAF];
    real _t0CB1 = 0.e0;
    real _t0CB2 = 0.e0;
    real _t0CB3 = 0.1e1;
    real _t0CB4 = 0.e0;
    vec4 _t0CB5 = [_t0CB1, _t0CB2, _t0CB3, _t0CB4];
    real _t0CB6 = 0.1e1;
    real _t0CB7 = 0.e0;
    real _t0CB8 = 0.e0;
    real _t0CB9 = 0.e0;
    vec4 _t0CBA = [_t0CB6, _t0CB7, _t0CB8, _t0CB9];
    real _t0CBB = 0.e0;
    real _t0CBC = 0.e0;
    real _t0CBD = 0.e0;
    real _t0CBE = 0.1e1;
    vec4 _t0CBF = [_t0CBB, _t0CBC, _t0CBD, _t0CBE];
    tensor[4,4] _t0CC0 = [_t0CB0, _t0CB5, _t0CBA, _t0CBF];
    tensor[4,4][4] _t0CC1 = {_t0C81, _t0C96, _t0CAB, _t0CC0};
    real _t0CC2 = -0.1e1;
    real _t0CC3 = -0.57735026919e0;
    real _t0CC4 = -0.1e1;
    real _t0CC5 = 0.1e1;
    vec4 _t0CC6 = [_t0CC2, _t0CC3, _t0CC4, _t0CC5];
    real _t0CC7 = 0.1e1;
    real _t0CC8 = -0.57735026919e0;
    real _t0CC9 = 0.e0;
    real _t0CCA = 0.e0;
    vec4 _t0CCB = [_t0CC7, _t0CC8, _t0CC9, _t0CCA];
    real _t0CCC = 0.e0;
    real _t0CCD = -0.57735026919e0;
    real _t0CCE = 0.1e1;
    real _t0CCF = 0.e0;
    vec4 _t0CD0 = [_t0CCC, _t0CCD, _t0CCE, _t0CCF];
    real _t0CD1 = 0.e0;
    real _t0CD2 = 0.e0;
    real _t0CD3 = 0.e0;
    real _t0CD4 = 0.1e1;
    vec4 _t0CD5 = [_t0CD1, _t0CD2, _t0CD3, _t0CD4];
    tensor[4,4] _t0CD6 = [_t0CC6, _t0CCB, _t0CD0, _t0CD5];
    real _t0CD7 = 0.e0;
    real _t0CD8 = -0.1e1;
    real _t0CD9 = 0.e0;
    real _t0CDA = 0.e0;
    vec4 _t0CDB = [_t0CD7, _t0CD8, _t0CD9, _t0CDA];
    real _t0CDC = 0.1e1;
    real _t0CDD = 0.e0;
    real _t0CDE = 0.e0;
    real _t0CDF = 0.e0;
    vec4 _t0CE0 = [_t0CDC, _t0CDD, _t0CDE, _t0CDF];
    real _t0CE1 = 0.e0;
    real _t0CE2 = 0.e0;
    real _t0CE3 = 0.1e1;
    real _t0CE4 = 0.e0;
    vec4 _t0CE5 = [_t0CE1, _t0CE2, _t0CE3, _t0CE4];
    real _t0CE6 = 0.e0;
    real _t0CE7 = 0.e0;
    real _t0CE8 = 0.e0;
    real _t0CE9 = 0.1e1;
    vec4 _t0CEA = [_t0CE6, _t0CE7, _t0CE8, _t0CE9];
    tensor[4,4] _t0CEB = [_t0CDB, _t0CE0, _t0CE5, _t0CEA];
    real _t0CEC = 0.1e1;
    real _t0CED = 0.e0;
    real _t0CEE = 0.e0;
    real _t0CEF = 0.e0;
    vec4 _t0CF0 = [_t0CEC, _t0CED, _t0CEE, _t0CEF];
    real _t0CF1 = 0.e0;
    real _t0CF2 = 0.1e1;
    real _t0CF3 = 0.e0;
    real _t0CF4 = 0.e0;
    vec4 _t0CF5 = [_t0CF1, _t0CF2, _t0CF3, _t0CF4];
    real _t0CF6 = 0.e0;
    real _t0CF7 = 0.e0;
    real _t0CF8 = 0.1e1;
    real _t0CF9 = 0.e0;
    vec4 _t0CFA = [_t0CF6, _t0CF7, _t0CF8, _t0CF9];
    real _t0CFB = 0.e0;
    real _t0CFC = 0.e0;
    real _t0CFD = 0.e0;
    real _t0CFE = 0.1e1;
    vec4 _t0CFF = [_t0CFB, _t0CFC, _t0CFD, _t0CFE];
    tensor[4,4] _t0D00 = [_t0CF0, _t0CF5, _t0CFA, _t0CFF];
    real _t0D01 = 0.1e1;
    real _t0D02 = 0.e0;
    real _t0D03 = 0.e0;
    real _t0D04 = 0.e0;
    vec4 _t0D05 = [_t0D01, _t0D02, _t0D03, _t0D04];
    real _t0D06 = 0.e0;
    real _t0D07 = 0.e0;
    real _t0D08 = 0.1e1;
    real _t0D09 = 0.e0;
    vec4 _t0D0A = [_t0D06, _t0D07, _t0D08, _t0D09];
    real _t0D0B = 0.e0;
    real _t0D0C = -0.1e1;
    real _t0D0D = 0.e0;
    real _t0D0E = 0.e0;
    vec4 _t0D0F = [_t0D0B, _t0D0C, _t0D0D, _t0D0E];
    real _t0D10 = 0.e0;
    real _t0D11 = 0.e0;
    real _t0D12 = 0.e0;
    real _t0D13 = 0.1e1;
    vec4 _t0D14 = [_t0D10, _t0D11, _t0D12, _t0D13];
    tensor[4,4] _t0D15 = [_t0D05, _t0D0A, _t0D0F, _t0D14];
    tensor[4,4][4] _t0D16 = {_t0CD6, _t0CEB, _t0D00, _t0D15};
    real _t0D17 = -0.1e1;
    real _t0D18 = -0.1e1;
    real _t0D19 = 0.57735026919e0;
    real _t0D1A = 0.1e1;
    vec4 _t0D1B = [_t0D17, _t0D18, _t0D19, _t0D1A];
    real _t0D1C = 0.1e1;
    real _t0D1D = 0.e0;
    real _t0D1E = 0.57735026919e0;
    real _t0D1F = 0.e0;
    vec4 _t0D20 = [_t0D1C, _t0D1D, _t0D1E, _t0D1F];
    real _t0D21 = 0.e0;
    real _t0D22 = 0.1e1;
    real _t0D23 = 0.57735026919e0;
    real _t0D24 = 0.e0;
    vec4 _t0D25 = [_t0D21, _t0D22, _t0D23, _t0D24];
    real _t0D26 = 0.e0;
    real _t0D27 = 0.e0;
    real _t0D28 = 0.e0;
    real _t0D29 = 0.1e1;
    vec4 _t0D2A = [_t0D26, _t0D27, _t0D28, _t0D29];
    tensor[4,4] _t0D2B = [_t0D1B, _t0D20, _t0D25, _t0D2A];
    real _t0D2C = 0.e0;
    real _t0D2D = 0.e0;
    real _t0D2E = 0.1e1;
    real _t0D2F = 0.e0;
    vec4 _t0D30 = [_t0D2C, _t0D2D, _t0D2E, _t0D2F];
    real _t0D31 = 0.1e1;
    real _t0D32 = 0.e0;
    real _t0D33 = 0.e0;
    real _t0D34 = 0.e0;
    vec4 _t0D35 = [_t0D31, _t0D32, _t0D33, _t0D34];
    real _t0D36 = 0.e0;
    real _t0D37 = 0.1e1;
    real _t0D38 = 0.e0;
    real _t0D39 = 0.e0;
    vec4 _t0D3A = [_t0D36, _t0D37, _t0D38, _t0D39];
    real _t0D3B = 0.e0;
    real _t0D3C = 0.e0;
    real _t0D3D = 0.e0;
    real _t0D3E = 0.1e1;
    vec4 _t0D3F = [_t0D3B, _t0D3C, _t0D3D, _t0D3E];
    tensor[4,4] _t0D40 = [_t0D30, _t0D35, _t0D3A, _t0D3F];
    real _t0D41 = 0.1e1;
    real _t0D42 = 0.e0;
    real _t0D43 = 0.e0;
    real _t0D44 = 0.e0;
    vec4 _t0D45 = [_t0D41, _t0D42, _t0D43, _t0D44];
    real _t0D46 = 0.e0;
    real _t0D47 = 0.e0;
    real _t0D48 = -0.1e1;
    real _t0D49 = 0.e0;
    vec4 _t0D4A = [_t0D46, _t0D47, _t0D48, _t0D49];
    real _t0D4B = 0.e0;
    real _t0D4C = 0.1e1;
    real _t0D4D = 0.e0;
    real _t0D4E = 0.e0;
    vec4 _t0D4F = [_t0D4B, _t0D4C, _t0D4D, _t0D4E];
    real _t0D50 = 0.e0;
    real _t0D51 = 0.e0;
    real _t0D52 = 0.e0;
    real _t0D53 = 0.1e1;
    vec4 _t0D54 = [_t0D50, _t0D51, _t0D52, _t0D53];
    tensor[4,4] _t0D55 = [_t0D45, _t0D4A, _t0D4F, _t0D54];
    real _t0D56 = 0.1e1;
    real _t0D57 = 0.e0;
    real _t0D58 = 0.e0;
    real _t0D59 = 0.e0;
    vec4 _t0D5A = [_t0D56, _t0D57, _t0D58, _t0D59];
    real _t0D5B = 0.e0;
    real _t0D5C = 0.1e1;
    real _t0D5D = 0.e0;
    real _t0D5E = 0.e0;
    vec4 _t0D5F = [_t0D5B, _t0D5C, _t0D5D, _t0D5E];
    real _t0D60 = 0.e0;
    real _t0D61 = 0.e0;
    real _t0D62 = 0.1e1;
    real _t0D63 = 0.e0;
    vec4 _t0D64 = [_t0D60, _t0D61, _t0D62, _t0D63];
    real _t0D65 = 0.e0;
    real _t0D66 = 0.e0;
    real _t0D67 = 0.e0;
    real _t0D68 = 0.1e1;
    vec4 _t0D69 = [_t0D65, _t0D66, _t0D67, _t0D68];
    tensor[4,4] _t0D6A = [_t0D5A, _t0D5F, _t0D64, _t0D69];
    tensor[4,4][4] _t0D6B = {_t0D2B, _t0D40, _t0D55, _t0D6A};
    tensor[4,4][4][4] _t0D6C = {_t0C6C, _t0CC1, _t0D16, _t0D6B};
    real _t0D6D = time092E[1];
    int _t0D6E = prim $r2i01B7 (_t0D6D);
    tensor[4,4][4] _t0D6F = prim $sub01C0<tensor[4,4][4]; %4> (_t0D6C, _t0D6E);
    real _t0D70 = time092E[1];
    int _t0D71 = prim $r2i01B7 (_t0D70);
    int[2] _t0D72 = func nextCell40932 (_t0D71, cellId092B, mesh092A);
    int _t0D73 = 1;
    int _t0D74 = prim $sub01C0<int; %2> (_t0D72, _t0D73);
    tensor[4,4] _t0D75 = prim $sub01C0<tensor[4,4]; %4> (_t0D6F, _t0D74);
    real _t0D76 = time092E[0];
    vec3 _t0D77 = prim *0036<$[3]> (_t0D76, dPos092D);
    vec3 _t0D78 = prim +0017<$[3]> (_t0D77, refPos092C);
    real _t0D79 = _t0D78[0];
    real _t0D7A = time092E[0];
    vec3 _t0D7B = prim *0036<$[3]> (_t0D7A, dPos092D);
    vec3 _t0D7C = prim +0017<$[3]> (_t0D7B, refPos092C);
    real _t0D7D = _t0D7C[1];
    real _t0D7E = time092E[0];
    vec3 _t0D7F = prim *0036<$[3]> (_t0D7E, dPos092D);
    vec3 _t0D80 = prim +0017<$[3]> (_t0D7F, refPos092C);
    real _t0D81 = _t0D80[2];
    real _t0D82 = 0.1e1;
    vec4 _t0D83 = [_t0D79, _t0D7D, _t0D81, _t0D82];
    vec4 _t0D84 = prim •00CE<$[4,4]; $[4]; $[4]> (_t0D75, _t0D83);
    real _t0D85 = _t0D84[2];
    vec3 _t0D86 = [_t0AA9, _t0C17, _t0D85];
    real _t0D87 = time092E[1];
    int _t0D88 = prim $r2i01B7 (_t0D87);
    int[2] _t0D89 = func nextCell40932 (_t0D88, cellId092B, mesh092A);
    int _t0D8A = 1;
    int _t0D8B = prim $sub01C0<int; %2> (_t0D89, _t0D8A);
    Femdata: MeshPos _t0D8C = extractFemItemN((mesh092A, _t093B, _t0D86, _t0D8B),RefBuild(Mesh),);
    return _t0D8C;
  } else {
    real _t0D8D = time092E[0];
    vec3 _t0D8E = prim *0036<$[3]> (_t0D8D, dPos092D);
    vec3 _t0D8F = prim +0017<$[3]> (_t0D8E, refPos092C);
    Femdata: MeshPos _t0D90 = extractFemItemN((mesh092A, _t0D8F),InvalidBuildBoundary(MeshPos),);
    return _t0D90;
  }
}
function int[2]#6 nextCell40932 (int faceIdx0D91, int cell0D92, Femdata: Mesh mesh0D93)
{
  int _t0D94 = -1;
  bool _t0D95 = prim ==0082 (faceIdx0D91, _t0D94);
  if _t0D95 {
    int _t0D96 = -1;
    int _t0D97 = -1;
    int[2] _t0D98 = {_t0D96, _t0D97};
    return _t0D98;
  } else {
    int _t0D99 = 8;
    int _t0D9A = prim *0033 (cell0D92, _t0D99);
    int _t0D9B = 2;
    int _t0D9C = prim *0033 (faceIdx0D91, _t0D9B);
    int _t0D9D = prim +0015 (_t0D9A, _t0D9C);
    int[2] _t0D9E = extractFemItemN((mesh0D93, _t0D9D),CellFaceCell(Mesh),);
    return _t0D9E;
  }
}
function vec2#0 _enter0D9F (vec3 refPos0DA0, vec3 dPos0DA1)
{
  real time0DA2 = +inf;
  int face0DA3 = -1;
  real faceTime0DA4 = -inf;
  real _t0DA5 = 0.57735026919e0;
  real _t0DA6 = 0.57735026919e0;
  real _t0DA7 = 0.57735026919e0;
  real _t0DA8 = 0.57735026919e0;
  vec3 _t0DA9 = [_t0DA6, _t0DA7, _t0DA8];
  real _t0DAA = prim •00CE<$[3]; $[3]; $[]> (_t0DA9, refPos0DA0);
  real _t0DAB = prim -0026<$[]> (_t0DA5, _t0DAA);
  real _t0DAC = 0.57735026919e0;
  real _t0DAD = 0.57735026919e0;
  real _t0DAE = 0.57735026919e0;
  vec3 _t0DAF = [_t0DAC, _t0DAD, _t0DAE];
  real _t0DB0 = prim •00CE<$[3]; $[3]; $[]> (_t0DAF, dPos0DA1);
  real _t0DB1 = prim /0055 (_t0DAB, _t0DB0);
  real _t0DB2 = -0.1e-7;
  bool _t0DB3 = prim >=007E (_t0DB1, _t0DB2);
  real _t0DB4 = 0.57735026919e0;
  real _t0DB5 = 0.57735026919e0;
  real _t0DB6 = 0.57735026919e0;
  real _t0DB7 = 0.57735026919e0;
  vec3 _t0DB8 = [_t0DB5, _t0DB6, _t0DB7];
  real _t0DB9 = prim •00CE<$[3]; $[3]; $[]> (_t0DB8, refPos0DA0);
  real _t0DBA = prim -0026<$[]> (_t0DB4, _t0DB9);
  real _t0DBB = 0.57735026919e0;
  real _t0DBC = 0.57735026919e0;
  real _t0DBD = 0.57735026919e0;
  vec3 _t0DBE = [_t0DBB, _t0DBC, _t0DBD];
  real _t0DBF = prim •00CE<$[3]; $[3]; $[]> (_t0DBE, dPos0DA1);
  real _t0DC0 = prim /0055 (_t0DBA, _t0DBF);
  bool _t0DC1 = prim >0080 (time0DA2, _t0DC0);
  real _t0DC2 = 0.57735026919e0;
  real _t0DC3 = 0.57735026919e0;
  real _t0DC4 = 0.57735026919e0;
  vec3 _t0DC5 = [_t0DC2, _t0DC3, _t0DC4];
  real _t0DC6 = prim •00CE<$[3]; $[3]; $[]> (_t0DC5, dPos0DA1);
  real _t0DC7 = prim |()|00B5<$[]> (_t0DC6);
  real _t0DC8 = 0.1e-7;
  bool _t0DC9 = prim >=007E (_t0DC7, _t0DC8);
  bool _t0DCA = prim $and01C4 (_t0DC1, _t0DC9);
  bool _t0DCB = prim $and01C4 (_t0DB3, _t0DCA);
  if _t0DCB {
    real _t0DCC = 0.1e1;
    real _t0DCD = 0.1e-7;
    real _t0DCE = prim +0017<$[]> (_t0DCC, _t0DCD);
    real _t0DCF = 0.1e1;
    real _t0DD0 = 0.1e1;
    real _t0DD1 = 0.1e1;
    vec3 _t0DD2 = [_t0DCF, _t0DD0, _t0DD1];
    real _t0DD3 = 0.57735026919e0;
    real _t0DD4 = 0.57735026919e0;
    real _t0DD5 = 0.57735026919e0;
    real _t0DD6 = 0.57735026919e0;
    vec3 _t0DD7 = [_t0DD4, _t0DD5, _t0DD6];
    real _t0DD8 = prim •00CE<$[3]; $[3]; $[]> (_t0DD7, refPos0DA0);
    real _t0DD9 = prim -0026<$[]> (_t0DD3, _t0DD8);
    real _t0DDA = 0.57735026919e0;
    real _t0DDB = 0.57735026919e0;
    real _t0DDC = 0.57735026919e0;
    vec3 _t0DDD = [_t0DDA, _t0DDB, _t0DDC];
    real _t0DDE = prim •00CE<$[3]; $[3]; $[]> (_t0DDD, dPos0DA1);
    real _t0DDF = prim /0055 (_t0DD9, _t0DDE);
    vec3 _t0DE0 = prim *0038<$[3]> (dPos0DA1, _t0DDF);
    vec3 _t0DE1 = prim +0017<$[3]> (refPos0DA0, _t0DE0);
    real _t0DE2 = prim •00CE<$[3]; $[3]; $[]> (_t0DD2, _t0DE1);
    bool _t0DE3 = prim >0080 (_t0DCE, _t0DE2);
    real _t0DE4 = 0.1e-7;
    real _t0DE5 = 0.1e-7;
    real _t0DE6 = 0.1e-7;
    vec3 _t0DE7 = [_t0DE4, _t0DE5, _t0DE6];
    real _t0DE8 = 0.57735026919e0;
    real _t0DE9 = 0.57735026919e0;
    real _t0DEA = 0.57735026919e0;
    real _t0DEB = 0.57735026919e0;
    vec3 _t0DEC = [_t0DE9, _t0DEA, _t0DEB];
    real _t0DED = prim •00CE<$[3]; $[3]; $[]> (_t0DEC, refPos0DA0);
    real _t0DEE = prim -0026<$[]> (_t0DE8, _t0DED);
    real _t0DEF = 0.57735026919e0;
    real _t0DF0 = 0.57735026919e0;
    real _t0DF1 = 0.57735026919e0;
    vec3 _t0DF2 = [_t0DEF, _t0DF0, _t0DF1];
    real _t0DF3 = prim •00CE<$[3]; $[3]; $[]> (_t0DF2, dPos0DA1);
    real _t0DF4 = prim /0055 (_t0DEE, _t0DF3);
    vec3 _t0DF5 = prim *0038<$[3]> (dPos0DA1, _t0DF4);
    vec3 _t0DF6 = prim +0017<$[3]> (refPos0DA0, _t0DF5);
    vec3 _t0DF7 = prim +0017<$[3]> (_t0DE7, _t0DF6);
    real _t0DF8 = _t0DF7[0];
    real _t0DF9 = -0.e0;
    bool _t0DFA = prim >0080 (_t0DF8, _t0DF9);
    real _t0DFB = 0.1e-7;
    real _t0DFC = 0.1e-7;
    real _t0DFD = 0.1e-7;
    vec3 _t0DFE = [_t0DFB, _t0DFC, _t0DFD];
    real _t0DFF = 0.57735026919e0;
    real _t0E00 = 0.57735026919e0;
    real _t0E01 = 0.57735026919e0;
    real _t0E02 = 0.57735026919e0;
    vec3 _t0E03 = [_t0E00, _t0E01, _t0E02];
    real _t0E04 = prim •00CE<$[3]; $[3]; $[]> (_t0E03, refPos0DA0);
    real _t0E05 = prim -0026<$[]> (_t0DFF, _t0E04);
    real _t0E06 = 0.57735026919e0;
    real _t0E07 = 0.57735026919e0;
    real _t0E08 = 0.57735026919e0;
    vec3 _t0E09 = [_t0E06, _t0E07, _t0E08];
    real _t0E0A = prim •00CE<$[3]; $[3]; $[]> (_t0E09, dPos0DA1);
    real _t0E0B = prim /0055 (_t0E05, _t0E0A);
    vec3 _t0E0C = prim *0038<$[3]> (dPos0DA1, _t0E0B);
    vec3 _t0E0D = prim +0017<$[3]> (refPos0DA0, _t0E0C);
    vec3 _t0E0E = prim +0017<$[3]> (_t0DFE, _t0E0D);
    real _t0E0F = _t0E0E[1];
    real _t0E10 = -0.e0;
    bool _t0E11 = prim >0080 (_t0E0F, _t0E10);
    real _t0E12 = 0.1e-7;
    real _t0E13 = 0.1e-7;
    real _t0E14 = 0.1e-7;
    vec3 _t0E15 = [_t0E12, _t0E13, _t0E14];
    real _t0E16 = 0.57735026919e0;
    real _t0E17 = 0.57735026919e0;
    real _t0E18 = 0.57735026919e0;
    real _t0E19 = 0.57735026919e0;
    vec3 _t0E1A = [_t0E17, _t0E18, _t0E19];
    real _t0E1B = prim •00CE<$[3]; $[3]; $[]> (_t0E1A, refPos0DA0);
    real _t0E1C = prim -0026<$[]> (_t0E16, _t0E1B);
    real _t0E1D = 0.57735026919e0;
    real _t0E1E = 0.57735026919e0;
    real _t0E1F = 0.57735026919e0;
    vec3 _t0E20 = [_t0E1D, _t0E1E, _t0E1F];
    real _t0E21 = prim •00CE<$[3]; $[3]; $[]> (_t0E20, dPos0DA1);
    real _t0E22 = prim /0055 (_t0E1C, _t0E21);
    vec3 _t0E23 = prim *0038<$[3]> (dPos0DA1, _t0E22);
    vec3 _t0E24 = prim +0017<$[3]> (refPos0DA0, _t0E23);
    vec3 _t0E25 = prim +0017<$[3]> (_t0E15, _t0E24);
    real _t0E26 = _t0E25[2];
    real _t0E27 = -0.e0;
    bool _t0E28 = prim >0080 (_t0E26, _t0E27);
    bool _t0E29 = prim $and01C4 (_t0E11, _t0E28);
    bool _t0E2A = prim $and01C4 (_t0DFA, _t0E29);
    bool _t0E2B = prim $and01C4 (_t0DE3, _t0E2A);
    if _t0E2B {
      real _t0E2C = 0.57735026919e0;
      real _t0E2D = 0.57735026919e0;
      real _t0E2E = 0.57735026919e0;
      real _t0E2F = 0.57735026919e0;
      vec3 _t0E30 = [_t0E2D, _t0E2E, _t0E2F];
      real _t0E31 = prim •00CE<$[3]; $[3]; $[]> (_t0E30, refPos0DA0);
      real _t0E32 = prim -0026<$[]> (_t0E2C, _t0E31);
      real _t0E33 = 0.57735026919e0;
      real _t0E34 = 0.57735026919e0;
      real _t0E35 = 0.57735026919e0;
      vec3 _t0E36 = [_t0E33, _t0E34, _t0E35];
      real _t0E37 = prim •00CE<$[3]; $[3]; $[]> (_t0E36, dPos0DA1);
      time0DA2 = prim /0055 (_t0E32, _t0E37);
      face0DA3 = 0;
    }
  }
  real _t0E38 = 0.e0;
  real _t0E39 = -0.1e1;
  real _t0E3A = 0.e0;
  real _t0E3B = 0.e0;
  vec3 _t0E3C = [_t0E39, _t0E3A, _t0E3B];
  real _t0E3D = prim •00CE<$[3]; $[3]; $[]> (_t0E3C, refPos0DA0);
  real _t0E3E = prim -0026<$[]> (_t0E38, _t0E3D);
  real _t0E3F = -0.1e1;
  real _t0E40 = 0.e0;
  real _t0E41 = 0.e0;
  vec3 _t0E42 = [_t0E3F, _t0E40, _t0E41];
  real _t0E43 = prim •00CE<$[3]; $[3]; $[]> (_t0E42, dPos0DA1);
  real _t0E44 = prim /0055 (_t0E3E, _t0E43);
  real _t0E45 = -0.1e-7;
  bool _t0E46 = prim >=007E (_t0E44, _t0E45);
  real _t0E47 = 0.e0;
  real _t0E48 = -0.1e1;
  real _t0E49 = 0.e0;
  real _t0E4A = 0.e0;
  vec3 _t0E4B = [_t0E48, _t0E49, _t0E4A];
  real _t0E4C = prim •00CE<$[3]; $[3]; $[]> (_t0E4B, refPos0DA0);
  real _t0E4D = prim -0026<$[]> (_t0E47, _t0E4C);
  real _t0E4E = -0.1e1;
  real _t0E4F = 0.e0;
  real _t0E50 = 0.e0;
  vec3 _t0E51 = [_t0E4E, _t0E4F, _t0E50];
  real _t0E52 = prim •00CE<$[3]; $[3]; $[]> (_t0E51, dPos0DA1);
  real _t0E53 = prim /0055 (_t0E4D, _t0E52);
  bool _t0E54 = prim >0080 (time0DA2, _t0E53);
  real _t0E55 = -0.1e1;
  real _t0E56 = 0.e0;
  real _t0E57 = 0.e0;
  vec3 _t0E58 = [_t0E55, _t0E56, _t0E57];
  real _t0E59 = prim •00CE<$[3]; $[3]; $[]> (_t0E58, dPos0DA1);
  real _t0E5A = prim |()|00B5<$[]> (_t0E59);
  real _t0E5B = 0.1e-7;
  bool _t0E5C = prim >=007E (_t0E5A, _t0E5B);
  bool _t0E5D = prim $and01C4 (_t0E54, _t0E5C);
  bool _t0E5E = prim $and01C4 (_t0E46, _t0E5D);
  if _t0E5E {
    real _t0E5F = 0.1e1;
    real _t0E60 = 0.1e-7;
    real _t0E61 = prim +0017<$[]> (_t0E5F, _t0E60);
    real _t0E62 = 0.1e1;
    real _t0E63 = 0.1e1;
    real _t0E64 = 0.1e1;
    vec3 _t0E65 = [_t0E62, _t0E63, _t0E64];
    real _t0E66 = 0.e0;
    real _t0E67 = -0.1e1;
    real _t0E68 = 0.e0;
    real _t0E69 = 0.e0;
    vec3 _t0E6A = [_t0E67, _t0E68, _t0E69];
    real _t0E6B = prim •00CE<$[3]; $[3]; $[]> (_t0E6A, refPos0DA0);
    real _t0E6C = prim -0026<$[]> (_t0E66, _t0E6B);
    real _t0E6D = -0.1e1;
    real _t0E6E = 0.e0;
    real _t0E6F = 0.e0;
    vec3 _t0E70 = [_t0E6D, _t0E6E, _t0E6F];
    real _t0E71 = prim •00CE<$[3]; $[3]; $[]> (_t0E70, dPos0DA1);
    real _t0E72 = prim /0055 (_t0E6C, _t0E71);
    vec3 _t0E73 = prim *0038<$[3]> (dPos0DA1, _t0E72);
    vec3 _t0E74 = prim +0017<$[3]> (refPos0DA0, _t0E73);
    real _t0E75 = prim •00CE<$[3]; $[3]; $[]> (_t0E65, _t0E74);
    bool _t0E76 = prim >0080 (_t0E61, _t0E75);
    real _t0E77 = 0.1e-7;
    real _t0E78 = 0.1e-7;
    real _t0E79 = 0.1e-7;
    vec3 _t0E7A = [_t0E77, _t0E78, _t0E79];
    real _t0E7B = 0.e0;
    real _t0E7C = -0.1e1;
    real _t0E7D = 0.e0;
    real _t0E7E = 0.e0;
    vec3 _t0E7F = [_t0E7C, _t0E7D, _t0E7E];
    real _t0E80 = prim •00CE<$[3]; $[3]; $[]> (_t0E7F, refPos0DA0);
    real _t0E81 = prim -0026<$[]> (_t0E7B, _t0E80);
    real _t0E82 = -0.1e1;
    real _t0E83 = 0.e0;
    real _t0E84 = 0.e0;
    vec3 _t0E85 = [_t0E82, _t0E83, _t0E84];
    real _t0E86 = prim •00CE<$[3]; $[3]; $[]> (_t0E85, dPos0DA1);
    real _t0E87 = prim /0055 (_t0E81, _t0E86);
    vec3 _t0E88 = prim *0038<$[3]> (dPos0DA1, _t0E87);
    vec3 _t0E89 = prim +0017<$[3]> (refPos0DA0, _t0E88);
    vec3 _t0E8A = prim +0017<$[3]> (_t0E7A, _t0E89);
    real _t0E8B = _t0E8A[0];
    real _t0E8C = -0.e0;
    bool _t0E8D = prim >0080 (_t0E8B, _t0E8C);
    real _t0E8E = 0.1e-7;
    real _t0E8F = 0.1e-7;
    real _t0E90 = 0.1e-7;
    vec3 _t0E91 = [_t0E8E, _t0E8F, _t0E90];
    real _t0E92 = 0.e0;
    real _t0E93 = -0.1e1;
    real _t0E94 = 0.e0;
    real _t0E95 = 0.e0;
    vec3 _t0E96 = [_t0E93, _t0E94, _t0E95];
    real _t0E97 = prim •00CE<$[3]; $[3]; $[]> (_t0E96, refPos0DA0);
    real _t0E98 = prim -0026<$[]> (_t0E92, _t0E97);
    real _t0E99 = -0.1e1;
    real _t0E9A = 0.e0;
    real _t0E9B = 0.e0;
    vec3 _t0E9C = [_t0E99, _t0E9A, _t0E9B];
    real _t0E9D = prim •00CE<$[3]; $[3]; $[]> (_t0E9C, dPos0DA1);
    real _t0E9E = prim /0055 (_t0E98, _t0E9D);
    vec3 _t0E9F = prim *0038<$[3]> (dPos0DA1, _t0E9E);
    vec3 _t0EA0 = prim +0017<$[3]> (refPos0DA0, _t0E9F);
    vec3 _t0EA1 = prim +0017<$[3]> (_t0E91, _t0EA0);
    real _t0EA2 = _t0EA1[1];
    real _t0EA3 = -0.e0;
    bool _t0EA4 = prim >0080 (_t0EA2, _t0EA3);
    real _t0EA5 = 0.1e-7;
    real _t0EA6 = 0.1e-7;
    real _t0EA7 = 0.1e-7;
    vec3 _t0EA8 = [_t0EA5, _t0EA6, _t0EA7];
    real _t0EA9 = 0.e0;
    real _t0EAA = -0.1e1;
    real _t0EAB = 0.e0;
    real _t0EAC = 0.e0;
    vec3 _t0EAD = [_t0EAA, _t0EAB, _t0EAC];
    real _t0EAE = prim •00CE<$[3]; $[3]; $[]> (_t0EAD, refPos0DA0);
    real _t0EAF = prim -0026<$[]> (_t0EA9, _t0EAE);
    real _t0EB0 = -0.1e1;
    real _t0EB1 = 0.e0;
    real _t0EB2 = 0.e0;
    vec3 _t0EB3 = [_t0EB0, _t0EB1, _t0EB2];
    real _t0EB4 = prim •00CE<$[3]; $[3]; $[]> (_t0EB3, dPos0DA1);
    real _t0EB5 = prim /0055 (_t0EAF, _t0EB4);
    vec3 _t0EB6 = prim *0038<$[3]> (dPos0DA1, _t0EB5);
    vec3 _t0EB7 = prim +0017<$[3]> (refPos0DA0, _t0EB6);
    vec3 _t0EB8 = prim +0017<$[3]> (_t0EA8, _t0EB7);
    real _t0EB9 = _t0EB8[2];
    real _t0EBA = -0.e0;
    bool _t0EBB = prim >0080 (_t0EB9, _t0EBA);
    bool _t0EBC = prim $and01C4 (_t0EA4, _t0EBB);
    bool _t0EBD = prim $and01C4 (_t0E8D, _t0EBC);
    bool _t0EBE = prim $and01C4 (_t0E76, _t0EBD);
    if _t0EBE {
      real _t0EBF = 0.e0;
      real _t0EC0 = -0.1e1;
      real _t0EC1 = 0.e0;
      real _t0EC2 = 0.e0;
      vec3 _t0EC3 = [_t0EC0, _t0EC1, _t0EC2];
      real _t0EC4 = prim •00CE<$[3]; $[3]; $[]> (_t0EC3, refPos0DA0);
      real _t0EC5 = prim -0026<$[]> (_t0EBF, _t0EC4);
      real _t0EC6 = -0.1e1;
      real _t0EC7 = 0.e0;
      real _t0EC8 = 0.e0;
      vec3 _t0EC9 = [_t0EC6, _t0EC7, _t0EC8];
      real _t0ECA = prim •00CE<$[3]; $[3]; $[]> (_t0EC9, dPos0DA1);
      time0DA2 = prim /0055 (_t0EC5, _t0ECA);
      face0DA3 = 1;
    }
  }
  real _t0ECB = 0.e0;
  real _t0ECC = 0.e0;
  real _t0ECD = -0.1e1;
  real _t0ECE = 0.e0;
  vec3 _t0ECF = [_t0ECC, _t0ECD, _t0ECE];
  real _t0ED0 = prim •00CE<$[3]; $[3]; $[]> (_t0ECF, refPos0DA0);
  real _t0ED1 = prim -0026<$[]> (_t0ECB, _t0ED0);
  real _t0ED2 = 0.e0;
  real _t0ED3 = -0.1e1;
  real _t0ED4 = 0.e0;
  vec3 _t0ED5 = [_t0ED2, _t0ED3, _t0ED4];
  real _t0ED6 = prim •00CE<$[3]; $[3]; $[]> (_t0ED5, dPos0DA1);
  real _t0ED7 = prim /0055 (_t0ED1, _t0ED6);
  real _t0ED8 = -0.1e-7;
  bool _t0ED9 = prim >=007E (_t0ED7, _t0ED8);
  real _t0EDA = 0.e0;
  real _t0EDB = 0.e0;
  real _t0EDC = -0.1e1;
  real _t0EDD = 0.e0;
  vec3 _t0EDE = [_t0EDB, _t0EDC, _t0EDD];
  real _t0EDF = prim •00CE<$[3]; $[3]; $[]> (_t0EDE, refPos0DA0);
  real _t0EE0 = prim -0026<$[]> (_t0EDA, _t0EDF);
  real _t0EE1 = 0.e0;
  real _t0EE2 = -0.1e1;
  real _t0EE3 = 0.e0;
  vec3 _t0EE4 = [_t0EE1, _t0EE2, _t0EE3];
  real _t0EE5 = prim •00CE<$[3]; $[3]; $[]> (_t0EE4, dPos0DA1);
  real _t0EE6 = prim /0055 (_t0EE0, _t0EE5);
  bool _t0EE7 = prim >0080 (time0DA2, _t0EE6);
  real _t0EE8 = 0.e0;
  real _t0EE9 = -0.1e1;
  real _t0EEA = 0.e0;
  vec3 _t0EEB = [_t0EE8, _t0EE9, _t0EEA];
  real _t0EEC = prim •00CE<$[3]; $[3]; $[]> (_t0EEB, dPos0DA1);
  real _t0EED = prim |()|00B5<$[]> (_t0EEC);
  real _t0EEE = 0.1e-7;
  bool _t0EEF = prim >=007E (_t0EED, _t0EEE);
  bool _t0EF0 = prim $and01C4 (_t0EE7, _t0EEF);
  bool _t0EF1 = prim $and01C4 (_t0ED9, _t0EF0);
  if _t0EF1 {
    real _t0EF2 = 0.1e1;
    real _t0EF3 = 0.1e-7;
    real _t0EF4 = prim +0017<$[]> (_t0EF2, _t0EF3);
    real _t0EF5 = 0.1e1;
    real _t0EF6 = 0.1e1;
    real _t0EF7 = 0.1e1;
    vec3 _t0EF8 = [_t0EF5, _t0EF6, _t0EF7];
    real _t0EF9 = 0.e0;
    real _t0EFA = 0.e0;
    real _t0EFB = -0.1e1;
    real _t0EFC = 0.e0;
    vec3 _t0EFD = [_t0EFA, _t0EFB, _t0EFC];
    real _t0EFE = prim •00CE<$[3]; $[3]; $[]> (_t0EFD, refPos0DA0);
    real _t0EFF = prim -0026<$[]> (_t0EF9, _t0EFE);
    real _t0F00 = 0.e0;
    real _t0F01 = -0.1e1;
    real _t0F02 = 0.e0;
    vec3 _t0F03 = [_t0F00, _t0F01, _t0F02];
    real _t0F04 = prim •00CE<$[3]; $[3]; $[]> (_t0F03, dPos0DA1);
    real _t0F05 = prim /0055 (_t0EFF, _t0F04);
    vec3 _t0F06 = prim *0038<$[3]> (dPos0DA1, _t0F05);
    vec3 _t0F07 = prim +0017<$[3]> (refPos0DA0, _t0F06);
    real _t0F08 = prim •00CE<$[3]; $[3]; $[]> (_t0EF8, _t0F07);
    bool _t0F09 = prim >0080 (_t0EF4, _t0F08);
    real _t0F0A = 0.1e-7;
    real _t0F0B = 0.1e-7;
    real _t0F0C = 0.1e-7;
    vec3 _t0F0D = [_t0F0A, _t0F0B, _t0F0C];
    real _t0F0E = 0.e0;
    real _t0F0F = 0.e0;
    real _t0F10 = -0.1e1;
    real _t0F11 = 0.e0;
    vec3 _t0F12 = [_t0F0F, _t0F10, _t0F11];
    real _t0F13 = prim •00CE<$[3]; $[3]; $[]> (_t0F12, refPos0DA0);
    real _t0F14 = prim -0026<$[]> (_t0F0E, _t0F13);
    real _t0F15 = 0.e0;
    real _t0F16 = -0.1e1;
    real _t0F17 = 0.e0;
    vec3 _t0F18 = [_t0F15, _t0F16, _t0F17];
    real _t0F19 = prim •00CE<$[3]; $[3]; $[]> (_t0F18, dPos0DA1);
    real _t0F1A = prim /0055 (_t0F14, _t0F19);
    vec3 _t0F1B = prim *0038<$[3]> (dPos0DA1, _t0F1A);
    vec3 _t0F1C = prim +0017<$[3]> (refPos0DA0, _t0F1B);
    vec3 _t0F1D = prim +0017<$[3]> (_t0F0D, _t0F1C);
    real _t0F1E = _t0F1D[0];
    real _t0F1F = -0.e0;
    bool _t0F20 = prim >0080 (_t0F1E, _t0F1F);
    real _t0F21 = 0.1e-7;
    real _t0F22 = 0.1e-7;
    real _t0F23 = 0.1e-7;
    vec3 _t0F24 = [_t0F21, _t0F22, _t0F23];
    real _t0F25 = 0.e0;
    real _t0F26 = 0.e0;
    real _t0F27 = -0.1e1;
    real _t0F28 = 0.e0;
    vec3 _t0F29 = [_t0F26, _t0F27, _t0F28];
    real _t0F2A = prim •00CE<$[3]; $[3]; $[]> (_t0F29, refPos0DA0);
    real _t0F2B = prim -0026<$[]> (_t0F25, _t0F2A);
    real _t0F2C = 0.e0;
    real _t0F2D = -0.1e1;
    real _t0F2E = 0.e0;
    vec3 _t0F2F = [_t0F2C, _t0F2D, _t0F2E];
    real _t0F30 = prim •00CE<$[3]; $[3]; $[]> (_t0F2F, dPos0DA1);
    real _t0F31 = prim /0055 (_t0F2B, _t0F30);
    vec3 _t0F32 = prim *0038<$[3]> (dPos0DA1, _t0F31);
    vec3 _t0F33 = prim +0017<$[3]> (refPos0DA0, _t0F32);
    vec3 _t0F34 = prim +0017<$[3]> (_t0F24, _t0F33);
    real _t0F35 = _t0F34[1];
    real _t0F36 = -0.e0;
    bool _t0F37 = prim >0080 (_t0F35, _t0F36);
    real _t0F38 = 0.1e-7;
    real _t0F39 = 0.1e-7;
    real _t0F3A = 0.1e-7;
    vec3 _t0F3B = [_t0F38, _t0F39, _t0F3A];
    real _t0F3C = 0.e0;
    real _t0F3D = 0.e0;
    real _t0F3E = -0.1e1;
    real _t0F3F = 0.e0;
    vec3 _t0F40 = [_t0F3D, _t0F3E, _t0F3F];
    real _t0F41 = prim •00CE<$[3]; $[3]; $[]> (_t0F40, refPos0DA0);
    real _t0F42 = prim -0026<$[]> (_t0F3C, _t0F41);
    real _t0F43 = 0.e0;
    real _t0F44 = -0.1e1;
    real _t0F45 = 0.e0;
    vec3 _t0F46 = [_t0F43, _t0F44, _t0F45];
    real _t0F47 = prim •00CE<$[3]; $[3]; $[]> (_t0F46, dPos0DA1);
    real _t0F48 = prim /0055 (_t0F42, _t0F47);
    vec3 _t0F49 = prim *0038<$[3]> (dPos0DA1, _t0F48);
    vec3 _t0F4A = prim +0017<$[3]> (refPos0DA0, _t0F49);
    vec3 _t0F4B = prim +0017<$[3]> (_t0F3B, _t0F4A);
    real _t0F4C = _t0F4B[2];
    real _t0F4D = -0.e0;
    bool _t0F4E = prim >0080 (_t0F4C, _t0F4D);
    bool _t0F4F = prim $and01C4 (_t0F37, _t0F4E);
    bool _t0F50 = prim $and01C4 (_t0F20, _t0F4F);
    bool _t0F51 = prim $and01C4 (_t0F09, _t0F50);
    if _t0F51 {
      real _t0F52 = 0.e0;
      real _t0F53 = 0.e0;
      real _t0F54 = -0.1e1;
      real _t0F55 = 0.e0;
      vec3 _t0F56 = [_t0F53, _t0F54, _t0F55];
      real _t0F57 = prim •00CE<$[3]; $[3]; $[]> (_t0F56, refPos0DA0);
      real _t0F58 = prim -0026<$[]> (_t0F52, _t0F57);
      real _t0F59 = 0.e0;
      real _t0F5A = -0.1e1;
      real _t0F5B = 0.e0;
      vec3 _t0F5C = [_t0F59, _t0F5A, _t0F5B];
      real _t0F5D = prim •00CE<$[3]; $[3]; $[]> (_t0F5C, dPos0DA1);
      time0DA2 = prim /0055 (_t0F58, _t0F5D);
      face0DA3 = 2;
    }
  }
  real _t0F5E = 0.e0;
  real _t0F5F = 0.e0;
  real _t0F60 = 0.e0;
  real _t0F61 = -0.1e1;
  vec3 _t0F62 = [_t0F5F, _t0F60, _t0F61];
  real _t0F63 = prim •00CE<$[3]; $[3]; $[]> (_t0F62, refPos0DA0);
  real _t0F64 = prim -0026<$[]> (_t0F5E, _t0F63);
  real _t0F65 = 0.e0;
  real _t0F66 = 0.e0;
  real _t0F67 = -0.1e1;
  vec3 _t0F68 = [_t0F65, _t0F66, _t0F67];
  real _t0F69 = prim •00CE<$[3]; $[3]; $[]> (_t0F68, dPos0DA1);
  real _t0F6A = prim /0055 (_t0F64, _t0F69);
  real _t0F6B = -0.1e-7;
  bool _t0F6C = prim >=007E (_t0F6A, _t0F6B);
  real _t0F6D = 0.e0;
  real _t0F6E = 0.e0;
  real _t0F6F = 0.e0;
  real _t0F70 = -0.1e1;
  vec3 _t0F71 = [_t0F6E, _t0F6F, _t0F70];
  real _t0F72 = prim •00CE<$[3]; $[3]; $[]> (_t0F71, refPos0DA0);
  real _t0F73 = prim -0026<$[]> (_t0F6D, _t0F72);
  real _t0F74 = 0.e0;
  real _t0F75 = 0.e0;
  real _t0F76 = -0.1e1;
  vec3 _t0F77 = [_t0F74, _t0F75, _t0F76];
  real _t0F78 = prim •00CE<$[3]; $[3]; $[]> (_t0F77, dPos0DA1);
  real _t0F79 = prim /0055 (_t0F73, _t0F78);
  bool _t0F7A = prim >0080 (time0DA2, _t0F79);
  real _t0F7B = 0.e0;
  real _t0F7C = 0.e0;
  real _t0F7D = -0.1e1;
  vec3 _t0F7E = [_t0F7B, _t0F7C, _t0F7D];
  real _t0F7F = prim •00CE<$[3]; $[3]; $[]> (_t0F7E, dPos0DA1);
  real _t0F80 = prim |()|00B5<$[]> (_t0F7F);
  real _t0F81 = 0.1e-7;
  bool _t0F82 = prim >=007E (_t0F80, _t0F81);
  bool _t0F83 = prim $and01C4 (_t0F7A, _t0F82);
  bool _t0F84 = prim $and01C4 (_t0F6C, _t0F83);
  if _t0F84 {
    real _t0F85 = 0.1e1;
    real _t0F86 = 0.1e-7;
    real _t0F87 = prim +0017<$[]> (_t0F85, _t0F86);
    real _t0F88 = 0.1e1;
    real _t0F89 = 0.1e1;
    real _t0F8A = 0.1e1;
    vec3 _t0F8B = [_t0F88, _t0F89, _t0F8A];
    real _t0F8C = 0.e0;
    real _t0F8D = 0.e0;
    real _t0F8E = 0.e0;
    real _t0F8F = -0.1e1;
    vec3 _t0F90 = [_t0F8D, _t0F8E, _t0F8F];
    real _t0F91 = prim •00CE<$[3]; $[3]; $[]> (_t0F90, refPos0DA0);
    real _t0F92 = prim -0026<$[]> (_t0F8C, _t0F91);
    real _t0F93 = 0.e0;
    real _t0F94 = 0.e0;
    real _t0F95 = -0.1e1;
    vec3 _t0F96 = [_t0F93, _t0F94, _t0F95];
    real _t0F97 = prim •00CE<$[3]; $[3]; $[]> (_t0F96, dPos0DA1);
    real _t0F98 = prim /0055 (_t0F92, _t0F97);
    vec3 _t0F99 = prim *0038<$[3]> (dPos0DA1, _t0F98);
    vec3 _t0F9A = prim +0017<$[3]> (refPos0DA0, _t0F99);
    real _t0F9B = prim •00CE<$[3]; $[3]; $[]> (_t0F8B, _t0F9A);
    bool _t0F9C = prim >0080 (_t0F87, _t0F9B);
    real _t0F9D = 0.1e-7;
    real _t0F9E = 0.1e-7;
    real _t0F9F = 0.1e-7;
    vec3 _t0FA0 = [_t0F9D, _t0F9E, _t0F9F];
    real _t0FA1 = 0.e0;
    real _t0FA2 = 0.e0;
    real _t0FA3 = 0.e0;
    real _t0FA4 = -0.1e1;
    vec3 _t0FA5 = [_t0FA2, _t0FA3, _t0FA4];
    real _t0FA6 = prim •00CE<$[3]; $[3]; $[]> (_t0FA5, refPos0DA0);
    real _t0FA7 = prim -0026<$[]> (_t0FA1, _t0FA6);
    real _t0FA8 = 0.e0;
    real _t0FA9 = 0.e0;
    real _t0FAA = -0.1e1;
    vec3 _t0FAB = [_t0FA8, _t0FA9, _t0FAA];
    real _t0FAC = prim •00CE<$[3]; $[3]; $[]> (_t0FAB, dPos0DA1);
    real _t0FAD = prim /0055 (_t0FA7, _t0FAC);
    vec3 _t0FAE = prim *0038<$[3]> (dPos0DA1, _t0FAD);
    vec3 _t0FAF = prim +0017<$[3]> (refPos0DA0, _t0FAE);
    vec3 _t0FB0 = prim +0017<$[3]> (_t0FA0, _t0FAF);
    real _t0FB1 = _t0FB0[0];
    real _t0FB2 = -0.e0;
    bool _t0FB3 = prim >0080 (_t0FB1, _t0FB2);
    real _t0FB4 = 0.1e-7;
    real _t0FB5 = 0.1e-7;
    real _t0FB6 = 0.1e-7;
    vec3 _t0FB7 = [_t0FB4, _t0FB5, _t0FB6];
    real _t0FB8 = 0.e0;
    real _t0FB9 = 0.e0;
    real _t0FBA = 0.e0;
    real _t0FBB = -0.1e1;
    vec3 _t0FBC = [_t0FB9, _t0FBA, _t0FBB];
    real _t0FBD = prim •00CE<$[3]; $[3]; $[]> (_t0FBC, refPos0DA0);
    real _t0FBE = prim -0026<$[]> (_t0FB8, _t0FBD);
    real _t0FBF = 0.e0;
    real _t0FC0 = 0.e0;
    real _t0FC1 = -0.1e1;
    vec3 _t0FC2 = [_t0FBF, _t0FC0, _t0FC1];
    real _t0FC3 = prim •00CE<$[3]; $[3]; $[]> (_t0FC2, dPos0DA1);
    real _t0FC4 = prim /0055 (_t0FBE, _t0FC3);
    vec3 _t0FC5 = prim *0038<$[3]> (dPos0DA1, _t0FC4);
    vec3 _t0FC6 = prim +0017<$[3]> (refPos0DA0, _t0FC5);
    vec3 _t0FC7 = prim +0017<$[3]> (_t0FB7, _t0FC6);
    real _t0FC8 = _t0FC7[1];
    real _t0FC9 = -0.e0;
    bool _t0FCA = prim >0080 (_t0FC8, _t0FC9);
    real _t0FCB = 0.1e-7;
    real _t0FCC = 0.1e-7;
    real _t0FCD = 0.1e-7;
    vec3 _t0FCE = [_t0FCB, _t0FCC, _t0FCD];
    real _t0FCF = 0.e0;
    real _t0FD0 = 0.e0;
    real _t0FD1 = 0.e0;
    real _t0FD2 = -0.1e1;
    vec3 _t0FD3 = [_t0FD0, _t0FD1, _t0FD2];
    real _t0FD4 = prim •00CE<$[3]; $[3]; $[]> (_t0FD3, refPos0DA0);
    real _t0FD5 = prim -0026<$[]> (_t0FCF, _t0FD4);
    real _t0FD6 = 0.e0;
    real _t0FD7 = 0.e0;
    real _t0FD8 = -0.1e1;
    vec3 _t0FD9 = [_t0FD6, _t0FD7, _t0FD8];
    real _t0FDA = prim •00CE<$[3]; $[3]; $[]> (_t0FD9, dPos0DA1);
    real _t0FDB = prim /0055 (_t0FD5, _t0FDA);
    vec3 _t0FDC = prim *0038<$[3]> (dPos0DA1, _t0FDB);
    vec3 _t0FDD = prim +0017<$[3]> (refPos0DA0, _t0FDC);
    vec3 _t0FDE = prim +0017<$[3]> (_t0FCE, _t0FDD);
    real _t0FDF = _t0FDE[2];
    real _t0FE0 = -0.e0;
    bool _t0FE1 = prim >0080 (_t0FDF, _t0FE0);
    bool _t0FE2 = prim $and01C4 (_t0FCA, _t0FE1);
    bool _t0FE3 = prim $and01C4 (_t0FB3, _t0FE2);
    bool _t0FE4 = prim $and01C4 (_t0F9C, _t0FE3);
    if _t0FE4 {
      real _t0FE5 = 0.e0;
      real _t0FE6 = 0.e0;
      real _t0FE7 = 0.e0;
      real _t0FE8 = -0.1e1;
      vec3 _t0FE9 = [_t0FE6, _t0FE7, _t0FE8];
      real _t0FEA = prim •00CE<$[3]; $[3]; $[]> (_t0FE9, refPos0DA0);
      real _t0FEB = prim -0026<$[]> (_t0FE5, _t0FEA);
      real _t0FEC = 0.e0;
      real _t0FED = 0.e0;
      real _t0FEE = -0.1e1;
      vec3 _t0FEF = [_t0FEC, _t0FED, _t0FEE];
      real _t0FF0 = prim •00CE<$[3]; $[3]; $[]> (_t0FEF, dPos0DA1);
      time0DA2 = prim /0055 (_t0FEB, _t0FF0);
      face0DA3 = 3;
    }
  }
  int _t0FF1 = -1;
  bool _t0FF2 = prim !=0086 (face0DA3, _t0FF1);
  real _t0FF3 = 0.1e1;
  real _t0FF4 = 0.1e-7;
  real _t0FF5 = prim +0017<$[]> (_t0FF3, _t0FF4);
  real _t0FF6 = 0.1e1;
  real _t0FF7 = 0.1e1;
  real _t0FF8 = 0.1e1;
  vec3 _t0FF9 = [_t0FF6, _t0FF7, _t0FF8];
  real _t0FFA = 0.e0;
  real _t0FFB = prim max0125 (time0DA2, _t0FFA);
  vec3 _t0FFC = prim *0038<$[3]> (dPos0DA1, _t0FFB);
  vec3 _t0FFD = prim +0017<$[3]> (refPos0DA0, _t0FFC);
  real _t0FFE = prim •00CE<$[3]; $[3]; $[]> (_t0FF9, _t0FFD);
  bool _t0FFF = prim >0080 (_t0FF5, _t0FFE);
  real _t1000 = 0.1e-7;
  real _t1001 = 0.1e-7;
  real _t1002 = 0.1e-7;
  vec3 _t1003 = [_t1000, _t1001, _t1002];
  real _t1004 = 0.e0;
  real _t1005 = prim max0125 (time0DA2, _t1004);
  vec3 _t1006 = prim *0038<$[3]> (dPos0DA1, _t1005);
  vec3 _t1007 = prim +0017<$[3]> (refPos0DA0, _t1006);
  vec3 _t1008 = prim +0017<$[3]> (_t1003, _t1007);
  real _t1009 = _t1008[0];
  real _t100A = -0.e0;
  bool _t100B = prim >0080 (_t1009, _t100A);
  real _t100C = 0.1e-7;
  real _t100D = 0.1e-7;
  real _t100E = 0.1e-7;
  vec3 _t100F = [_t100C, _t100D, _t100E];
  real _t1010 = 0.e0;
  real _t1011 = prim max0125 (time0DA2, _t1010);
  vec3 _t1012 = prim *0038<$[3]> (dPos0DA1, _t1011);
  vec3 _t1013 = prim +0017<$[3]> (refPos0DA0, _t1012);
  vec3 _t1014 = prim +0017<$[3]> (_t100F, _t1013);
  real _t1015 = _t1014[1];
  real _t1016 = -0.e0;
  bool _t1017 = prim >0080 (_t1015, _t1016);
  real _t1018 = 0.1e-7;
  real _t1019 = 0.1e-7;
  real _t101A = 0.1e-7;
  vec3 _t101B = [_t1018, _t1019, _t101A];
  real _t101C = 0.e0;
  real _t101D = prim max0125 (time0DA2, _t101C);
  vec3 _t101E = prim *0038<$[3]> (dPos0DA1, _t101D);
  vec3 _t101F = prim +0017<$[3]> (refPos0DA0, _t101E);
  vec3 _t1020 = prim +0017<$[3]> (_t101B, _t101F);
  real _t1021 = _t1020[2];
  real _t1022 = -0.e0;
  bool _t1023 = prim >0080 (_t1021, _t1022);
  bool _t1024 = prim $and01C4 (_t1017, _t1023);
  bool _t1025 = prim $and01C4 (_t100B, _t1024);
  bool _t1026 = prim $and01C4 (_t0FFF, _t1025);
  bool _t1027 = prim $and01C4 (_t0FF2, _t1026);
  if _t1027 {
    real _t1028 = 0.e0;
    real _t1029 = prim max0125 (time0DA2, _t1028);
    real _t102A = (real)face0DA3;
    vec2 _t102B = [_t1029, _t102A];
    return _t102B;
  } else {
    real _t102C = -0.1e1;
    real _t102D = -0.1e1;
    vec2 _t102E = [_t102C, _t102D];
    return _t102E;
  }
}
function vec2#0 _exit102F (vec3 refPos0DA0, vec3 dPos0DA1, int i1030)
{
  real time1031 = +inf;
  int face1032 = -1;
  real faceTime1033 = -inf;
  real _t1034 = 0.57735026919e0;
  real _t1035 = 0.57735026919e0;
  real _t1036 = 0.57735026919e0;
  real _t1037 = 0.57735026919e0;
  vec3 _t1038 = [_t1035, _t1036, _t1037];
  real _t1039 = prim •00CE<$[3]; $[3]; $[]> (_t1038, refPos0DA0);
  real _t103A = prim -0026<$[]> (_t1034, _t1039);
  real _t103B = 0.57735026919e0;
  real _t103C = 0.57735026919e0;
  real _t103D = 0.57735026919e0;
  vec3 _t103E = [_t103B, _t103C, _t103D];
  real _t103F = prim •00CE<$[3]; $[3]; $[]> (_t103E, dPos0DA1);
  real _t1040 = prim /0055 (_t103A, _t103F);
  real _t1041 = -0.1e-7;
  bool _t1042 = prim >=007E (_t1040, _t1041);
  real _t1043 = 0.57735026919e0;
  real _t1044 = 0.57735026919e0;
  real _t1045 = 0.57735026919e0;
  real _t1046 = 0.57735026919e0;
  vec3 _t1047 = [_t1044, _t1045, _t1046];
  real _t1048 = prim •00CE<$[3]; $[3]; $[]> (_t1047, refPos0DA0);
  real _t1049 = prim -0026<$[]> (_t1043, _t1048);
  real _t104A = 0.57735026919e0;
  real _t104B = 0.57735026919e0;
  real _t104C = 0.57735026919e0;
  vec3 _t104D = [_t104A, _t104B, _t104C];
  real _t104E = prim •00CE<$[3]; $[3]; $[]> (_t104D, dPos0DA1);
  real _t104F = prim /0055 (_t1049, _t104E);
  bool _t1050 = prim >0080 (time1031, _t104F);
  real _t1051 = 0.57735026919e0;
  real _t1052 = 0.57735026919e0;
  real _t1053 = 0.57735026919e0;
  vec3 _t1054 = [_t1051, _t1052, _t1053];
  real _t1055 = prim •00CE<$[3]; $[3]; $[]> (_t1054, dPos0DA1);
  real _t1056 = prim |()|00B5<$[]> (_t1055);
  real _t1057 = 0.1e-7;
  bool _t1058 = prim >=007E (_t1056, _t1057);
  bool _t1059 = prim $and01C4 (_t1050, _t1058);
  bool _t105A = prim $and01C4 (_t1042, _t1059);
  if _t105A {
    int _t105B = 0;
    bool _t105C = prim !=0086 (i1030, _t105B);
    if _t105C {
      real _t105D = 0.57735026919e0;
      real _t105E = 0.57735026919e0;
      real _t105F = 0.57735026919e0;
      real _t1060 = 0.57735026919e0;
      vec3 _t1061 = [_t105E, _t105F, _t1060];
      real _t1062 = prim •00CE<$[3]; $[3]; $[]> (_t1061, refPos0DA0);
      real _t1063 = prim -0026<$[]> (_t105D, _t1062);
      real _t1064 = 0.57735026919e0;
      real _t1065 = 0.57735026919e0;
      real _t1066 = 0.57735026919e0;
      vec3 _t1067 = [_t1064, _t1065, _t1066];
      real _t1068 = prim •00CE<$[3]; $[3]; $[]> (_t1067, dPos0DA1);
      time1031 = prim /0055 (_t1063, _t1068);
      face1032 = 0;
    } else {
      real _t1069 = 0.57735026919e0;
      real _t106A = 0.57735026919e0;
      real _t106B = 0.57735026919e0;
      real _t106C = 0.57735026919e0;
      vec3 _t106D = [_t106A, _t106B, _t106C];
      real _t106E = prim •00CE<$[3]; $[3]; $[]> (_t106D, refPos0DA0);
      real _t106F = prim -0026<$[]> (_t1069, _t106E);
      real _t1070 = 0.57735026919e0;
      real _t1071 = 0.57735026919e0;
      real _t1072 = 0.57735026919e0;
      vec3 _t1073 = [_t1070, _t1071, _t1072];
      real _t1074 = prim •00CE<$[3]; $[3]; $[]> (_t1073, dPos0DA1);
      faceTime1033 = prim /0055 (_t106F, _t1074);
    }
  }
  real _t1075 = 0.e0;
  real _t1076 = -0.1e1;
  real _t1077 = 0.e0;
  real _t1078 = 0.e0;
  vec3 _t1079 = [_t1076, _t1077, _t1078];
  real _t107A = prim •00CE<$[3]; $[3]; $[]> (_t1079, refPos0DA0);
  real _t107B = prim -0026<$[]> (_t1075, _t107A);
  real _t107C = -0.1e1;
  real _t107D = 0.e0;
  real _t107E = 0.e0;
  vec3 _t107F = [_t107C, _t107D, _t107E];
  real _t1080 = prim •00CE<$[3]; $[3]; $[]> (_t107F, dPos0DA1);
  real _t1081 = prim /0055 (_t107B, _t1080);
  real _t1082 = -0.1e-7;
  bool _t1083 = prim >=007E (_t1081, _t1082);
  real _t1084 = 0.e0;
  real _t1085 = -0.1e1;
  real _t1086 = 0.e0;
  real _t1087 = 0.e0;
  vec3 _t1088 = [_t1085, _t1086, _t1087];
  real _t1089 = prim •00CE<$[3]; $[3]; $[]> (_t1088, refPos0DA0);
  real _t108A = prim -0026<$[]> (_t1084, _t1089);
  real _t108B = -0.1e1;
  real _t108C = 0.e0;
  real _t108D = 0.e0;
  vec3 _t108E = [_t108B, _t108C, _t108D];
  real _t108F = prim •00CE<$[3]; $[3]; $[]> (_t108E, dPos0DA1);
  real _t1090 = prim /0055 (_t108A, _t108F);
  bool _t1091 = prim >0080 (time1031, _t1090);
  real _t1092 = -0.1e1;
  real _t1093 = 0.e0;
  real _t1094 = 0.e0;
  vec3 _t1095 = [_t1092, _t1093, _t1094];
  real _t1096 = prim •00CE<$[3]; $[3]; $[]> (_t1095, dPos0DA1);
  real _t1097 = prim |()|00B5<$[]> (_t1096);
  real _t1098 = 0.1e-7;
  bool _t1099 = prim >=007E (_t1097, _t1098);
  bool _t109A = prim $and01C4 (_t1091, _t1099);
  bool _t109B = prim $and01C4 (_t1083, _t109A);
  if _t109B {
    int _t109C = 1;
    bool _t109D = prim !=0086 (i1030, _t109C);
    if _t109D {
      real _t109E = 0.e0;
      real _t109F = -0.1e1;
      real _t10A0 = 0.e0;
      real _t10A1 = 0.e0;
      vec3 _t10A2 = [_t109F, _t10A0, _t10A1];
      real _t10A3 = prim •00CE<$[3]; $[3]; $[]> (_t10A2, refPos0DA0);
      real _t10A4 = prim -0026<$[]> (_t109E, _t10A3);
      real _t10A5 = -0.1e1;
      real _t10A6 = 0.e0;
      real _t10A7 = 0.e0;
      vec3 _t10A8 = [_t10A5, _t10A6, _t10A7];
      real _t10A9 = prim •00CE<$[3]; $[3]; $[]> (_t10A8, dPos0DA1);
      time1031 = prim /0055 (_t10A4, _t10A9);
      face1032 = 1;
    } else {
      real _t10AA = 0.e0;
      real _t10AB = -0.1e1;
      real _t10AC = 0.e0;
      real _t10AD = 0.e0;
      vec3 _t10AE = [_t10AB, _t10AC, _t10AD];
      real _t10AF = prim •00CE<$[3]; $[3]; $[]> (_t10AE, refPos0DA0);
      real _t10B0 = prim -0026<$[]> (_t10AA, _t10AF);
      real _t10B1 = -0.1e1;
      real _t10B2 = 0.e0;
      real _t10B3 = 0.e0;
      vec3 _t10B4 = [_t10B1, _t10B2, _t10B3];
      real _t10B5 = prim •00CE<$[3]; $[3]; $[]> (_t10B4, dPos0DA1);
      faceTime1033 = prim /0055 (_t10B0, _t10B5);
    }
  }
  real _t10B6 = 0.e0;
  real _t10B7 = 0.e0;
  real _t10B8 = -0.1e1;
  real _t10B9 = 0.e0;
  vec3 _t10BA = [_t10B7, _t10B8, _t10B9];
  real _t10BB = prim •00CE<$[3]; $[3]; $[]> (_t10BA, refPos0DA0);
  real _t10BC = prim -0026<$[]> (_t10B6, _t10BB);
  real _t10BD = 0.e0;
  real _t10BE = -0.1e1;
  real _t10BF = 0.e0;
  vec3 _t10C0 = [_t10BD, _t10BE, _t10BF];
  real _t10C1 = prim •00CE<$[3]; $[3]; $[]> (_t10C0, dPos0DA1);
  real _t10C2 = prim /0055 (_t10BC, _t10C1);
  real _t10C3 = -0.1e-7;
  bool _t10C4 = prim >=007E (_t10C2, _t10C3);
  real _t10C5 = 0.e0;
  real _t10C6 = 0.e0;
  real _t10C7 = -0.1e1;
  real _t10C8 = 0.e0;
  vec3 _t10C9 = [_t10C6, _t10C7, _t10C8];
  real _t10CA = prim •00CE<$[3]; $[3]; $[]> (_t10C9, refPos0DA0);
  real _t10CB = prim -0026<$[]> (_t10C5, _t10CA);
  real _t10CC = 0.e0;
  real _t10CD = -0.1e1;
  real _t10CE = 0.e0;
  vec3 _t10CF = [_t10CC, _t10CD, _t10CE];
  real _t10D0 = prim •00CE<$[3]; $[3]; $[]> (_t10CF, dPos0DA1);
  real _t10D1 = prim /0055 (_t10CB, _t10D0);
  bool _t10D2 = prim >0080 (time1031, _t10D1);
  real _t10D3 = 0.e0;
  real _t10D4 = -0.1e1;
  real _t10D5 = 0.e0;
  vec3 _t10D6 = [_t10D3, _t10D4, _t10D5];
  real _t10D7 = prim •00CE<$[3]; $[3]; $[]> (_t10D6, dPos0DA1);
  real _t10D8 = prim |()|00B5<$[]> (_t10D7);
  real _t10D9 = 0.1e-7;
  bool _t10DA = prim >=007E (_t10D8, _t10D9);
  bool _t10DB = prim $and01C4 (_t10D2, _t10DA);
  bool _t10DC = prim $and01C4 (_t10C4, _t10DB);
  if _t10DC {
    int _t10DD = 2;
    bool _t10DE = prim !=0086 (i1030, _t10DD);
    if _t10DE {
      real _t10DF = 0.e0;
      real _t10E0 = 0.e0;
      real _t10E1 = -0.1e1;
      real _t10E2 = 0.e0;
      vec3 _t10E3 = [_t10E0, _t10E1, _t10E2];
      real _t10E4 = prim •00CE<$[3]; $[3]; $[]> (_t10E3, refPos0DA0);
      real _t10E5 = prim -0026<$[]> (_t10DF, _t10E4);
      real _t10E6 = 0.e0;
      real _t10E7 = -0.1e1;
      real _t10E8 = 0.e0;
      vec3 _t10E9 = [_t10E6, _t10E7, _t10E8];
      real _t10EA = prim •00CE<$[3]; $[3]; $[]> (_t10E9, dPos0DA1);
      time1031 = prim /0055 (_t10E5, _t10EA);
      face1032 = 2;
    } else {
      real _t10EB = 0.e0;
      real _t10EC = 0.e0;
      real _t10ED = -0.1e1;
      real _t10EE = 0.e0;
      vec3 _t10EF = [_t10EC, _t10ED, _t10EE];
      real _t10F0 = prim •00CE<$[3]; $[3]; $[]> (_t10EF, refPos0DA0);
      real _t10F1 = prim -0026<$[]> (_t10EB, _t10F0);
      real _t10F2 = 0.e0;
      real _t10F3 = -0.1e1;
      real _t10F4 = 0.e0;
      vec3 _t10F5 = [_t10F2, _t10F3, _t10F4];
      real _t10F6 = prim •00CE<$[3]; $[3]; $[]> (_t10F5, dPos0DA1);
      faceTime1033 = prim /0055 (_t10F1, _t10F6);
    }
  }
  real _t10F7 = 0.e0;
  real _t10F8 = 0.e0;
  real _t10F9 = 0.e0;
  real _t10FA = -0.1e1;
  vec3 _t10FB = [_t10F8, _t10F9, _t10FA];
  real _t10FC = prim •00CE<$[3]; $[3]; $[]> (_t10FB, refPos0DA0);
  real _t10FD = prim -0026<$[]> (_t10F7, _t10FC);
  real _t10FE = 0.e0;
  real _t10FF = 0.e0;
  real _t1100 = -0.1e1;
  vec3 _t1101 = [_t10FE, _t10FF, _t1100];
  real _t1102 = prim •00CE<$[3]; $[3]; $[]> (_t1101, dPos0DA1);
  real _t1103 = prim /0055 (_t10FD, _t1102);
  real _t1104 = -0.1e-7;
  bool _t1105 = prim >=007E (_t1103, _t1104);
  real _t1106 = 0.e0;
  real _t1107 = 0.e0;
  real _t1108 = 0.e0;
  real _t1109 = -0.1e1;
  vec3 _t110A = [_t1107, _t1108, _t1109];
  real _t110B = prim •00CE<$[3]; $[3]; $[]> (_t110A, refPos0DA0);
  real _t110C = prim -0026<$[]> (_t1106, _t110B);
  real _t110D = 0.e0;
  real _t110E = 0.e0;
  real _t110F = -0.1e1;
  vec3 _t1110 = [_t110D, _t110E, _t110F];
  real _t1111 = prim •00CE<$[3]; $[3]; $[]> (_t1110, dPos0DA1);
  real _t1112 = prim /0055 (_t110C, _t1111);
  bool _t1113 = prim >0080 (time1031, _t1112);
  real _t1114 = 0.e0;
  real _t1115 = 0.e0;
  real _t1116 = -0.1e1;
  vec3 _t1117 = [_t1114, _t1115, _t1116];
  real _t1118 = prim •00CE<$[3]; $[3]; $[]> (_t1117, dPos0DA1);
  real _t1119 = prim |()|00B5<$[]> (_t1118);
  real _t111A = 0.1e-7;
  bool _t111B = prim >=007E (_t1119, _t111A);
  bool _t111C = prim $and01C4 (_t1113, _t111B);
  bool _t111D = prim $and01C4 (_t1105, _t111C);
  if _t111D {
    int _t111E = 3;
    bool _t111F = prim !=0086 (i1030, _t111E);
    if _t111F {
      real _t1120 = 0.e0;
      real _t1121 = 0.e0;
      real _t1122 = 0.e0;
      real _t1123 = -0.1e1;
      vec3 _t1124 = [_t1121, _t1122, _t1123];
      real _t1125 = prim •00CE<$[3]; $[3]; $[]> (_t1124, refPos0DA0);
      real _t1126 = prim -0026<$[]> (_t1120, _t1125);
      real _t1127 = 0.e0;
      real _t1128 = 0.e0;
      real _t1129 = -0.1e1;
      vec3 _t112A = [_t1127, _t1128, _t1129];
      real _t112B = prim •00CE<$[3]; $[3]; $[]> (_t112A, dPos0DA1);
      time1031 = prim /0055 (_t1126, _t112B);
      face1032 = 3;
    } else {
      real _t112C = 0.e0;
      real _t112D = 0.e0;
      real _t112E = 0.e0;
      real _t112F = -0.1e1;
      vec3 _t1130 = [_t112D, _t112E, _t112F];
      real _t1131 = prim •00CE<$[3]; $[3]; $[]> (_t1130, refPos0DA0);
      real _t1132 = prim -0026<$[]> (_t112C, _t1131);
      real _t1133 = 0.e0;
      real _t1134 = 0.e0;
      real _t1135 = -0.1e1;
      vec3 _t1136 = [_t1133, _t1134, _t1135];
      real _t1137 = prim •00CE<$[3]; $[3]; $[]> (_t1136, dPos0DA1);
      faceTime1033 = prim /0055 (_t1132, _t1137);
    }
  }
  int _t1138 = -1;
  bool _t1139 = prim !=0086 (face1032, _t1138);
  real _t113A = 0.1e1;
  real _t113B = 0.1e-7;
  real _t113C = prim +0017<$[]> (_t113A, _t113B);
  real _t113D = 0.1e1;
  real _t113E = 0.1e1;
  real _t113F = 0.1e1;
  vec3 _t1140 = [_t113D, _t113E, _t113F];
  real _t1141 = 0.e0;
  real _t1142 = prim max0125 (time1031, _t1141);
  vec3 _t1143 = prim *0038<$[3]> (dPos0DA1, _t1142);
  vec3 _t1144 = prim +0017<$[3]> (refPos0DA0, _t1143);
  real _t1145 = prim •00CE<$[3]; $[3]; $[]> (_t1140, _t1144);
  bool _t1146 = prim >0080 (_t113C, _t1145);
  real _t1147 = 0.1e-7;
  real _t1148 = 0.1e-7;
  real _t1149 = 0.1e-7;
  vec3 _t114A = [_t1147, _t1148, _t1149];
  real _t114B = 0.e0;
  real _t114C = prim max0125 (time1031, _t114B);
  vec3 _t114D = prim *0038<$[3]> (dPos0DA1, _t114C);
  vec3 _t114E = prim +0017<$[3]> (refPos0DA0, _t114D);
  vec3 _t114F = prim +0017<$[3]> (_t114A, _t114E);
  real _t1150 = _t114F[0];
  real _t1151 = -0.e0;
  bool _t1152 = prim >0080 (_t1150, _t1151);
  real _t1153 = 0.1e-7;
  real _t1154 = 0.1e-7;
  real _t1155 = 0.1e-7;
  vec3 _t1156 = [_t1153, _t1154, _t1155];
  real _t1157 = 0.e0;
  real _t1158 = prim max0125 (time1031, _t1157);
  vec3 _t1159 = prim *0038<$[3]> (dPos0DA1, _t1158);
  vec3 _t115A = prim +0017<$[3]> (refPos0DA0, _t1159);
  vec3 _t115B = prim +0017<$[3]> (_t1156, _t115A);
  real _t115C = _t115B[1];
  real _t115D = -0.e0;
  bool _t115E = prim >0080 (_t115C, _t115D);
  real _t115F = 0.1e-7;
  real _t1160 = 0.1e-7;
  real _t1161 = 0.1e-7;
  vec3 _t1162 = [_t115F, _t1160, _t1161];
  real _t1163 = 0.e0;
  real _t1164 = prim max0125 (time1031, _t1163);
  vec3 _t1165 = prim *0038<$[3]> (dPos0DA1, _t1164);
  vec3 _t1166 = prim +0017<$[3]> (refPos0DA0, _t1165);
  vec3 _t1167 = prim +0017<$[3]> (_t1162, _t1166);
  real _t1168 = _t1167[2];
  real _t1169 = -0.e0;
  bool _t116A = prim >0080 (_t1168, _t1169);
  bool _t116B = prim $and01C4 (_t115E, _t116A);
  bool _t116C = prim $and01C4 (_t1152, _t116B);
  bool _t116D = prim $and01C4 (_t1146, _t116C);
  bool _t116E = prim $and01C4 (_t1139, _t116D);
  if _t116E {
    real _t116F = 0.e0;
    real _t1170 = prim max0125 (time1031, _t116F);
    real _t1171 = (real)face1032;
    vec2 _t1172 = [_t1170, _t1171];
    return _t1172;
  } else {
    real _t1173 = -inf;
    bool _t1174 = prim ==0084 (_t1173, faceTime1033);
    if _t1174 {
      real _t1175 = -0.1e1;
      real _t1176 = -0.1e1;
      vec2 _t1177 = [_t1175, _t1176];
      return _t1177;
    } else {
      real _t1178 = 0.e0;
      real _t1179 = prim max0125 (faceTime1033, _t1178);
      real _t117A = (real)i1030;
      vec2 _t117B = [_t1179, _t117A];
      return _t117B;
    }
  }
}
function Femdata: Mesh#0 domain117E (Femdata: Space arg0117F)
{
  Femdata: Mesh _t1180 = extractFem(arg0117F, Mesh);
  return _t1180;
}
function Femdata: Space#0 space1181 (Femdata: FemFunc arg01182)
{
  Femdata: Space _t1183 = extractFem(arg01182, Space);
  return _t1183;
}
function Femdata: FuncCell#0 funcCell1184 (Femdata: FemFunc arg01185, Femdata: MeshCell arg11186)
{
  int _t1187 = extractFemItem(CellIndex(MeshCell), int, arg11186);
  Femdata: FuncCell _t1188 = loadFem(FuncCell, arg01185, _t1187);
  return _t1188;
}
function bool#1 insideTest1196 (vec3 x1197)
{
  real _t1198 = 0.e0;
  real _t1199 = 0.e0;
  real _t119A = 0.e0;
  vec3 _t119B = [_t1198, _t1199, _t119A];
  vec3 mid119C = prim -0026<$[3]> (x1197, _t119B);
  bool _t119D;
  real _t119E = mid119C[0];
  real _t119F = prim |()|00B5<$[]> (_t119E);
  real _t11A0 = 0.4e1;
  bool _t11A1 = prim <=007C (_t119F, _t11A0);
  if _t11A1 {
    bool _t11A2;
    real _t11A3 = mid119C[1];
    real _t11A4 = prim |()|00B5<$[]> (_t11A3);
    real _t11A5 = 0.4e1;
    bool _t11A6 = prim <=007C (_t11A4, _t11A5);
    if _t11A6 {
      real _t11A7 = mid119C[2];
      real _t11A8 = prim |()|00B5<$[]> (_t11A7);
      real _t11A9 = 0.4e1;
      _t11A2 = prim <=007C (_t11A8, _t11A9);
    } else {
      _t11A2 = false;
    }
    _t119D = _t11A2;
  } else {
    _t119D = false;
  }
  return _t119D;
}
function vec3#3 fStep11AA (vec3 s11AB)
{
  real x11AC = s11AB[0];
  real y11AD = s11AB[1];
  real z11AE = s11AB[2];
  real _t11AF = 0.2e1;
  real _t11B0 = 0.2e1;
  real _t11B1 = 0.3e1;
  int _t11B2 = 2;
  real _t11B3 = prim ^0068 (x11AC, _t11B2);
  real _t11B4 = prim *0034 (_t11B1, _t11B3);
  real _t11B5 = prim -0026<$[]> (_t11B0, _t11B4);
  int _t11B6 = 2;
  real _t11B7 = prim ^0068 (_t11B5, _t11B6);
  real _t11B8 = prim *0034 (_t11AF, _t11B7);
  real _t11B9 = 0.12e2;
  real _t11BA = prim *0034 (_t11B9, x11AC);
  int _t11BB = 3;
  real _t11BC = prim ^0068 (x11AC, _t11BB);
  real _t11BD = prim unary -008B<$[]> (_t11BC);
  real _t11BE = 0.2e1;
  real _t11BF = prim *0034 (_t11BE, x11AC);
  real _t11C0 = prim +0017<$[]> (_t11BD, _t11BF);
  real _t11C1 = prim +0017<$[]> (_t11C0, y11AD);
  real _t11C2 = prim *0034 (_t11BA, _t11C1);
  real _t11C3 = prim -0026<$[]> (_t11B8, _t11C2);
  real _t11C4 = 0.2e1;
  real _t11C5 = 0.2e1;
  real _t11C6 = 0.3e1;
  int _t11C7 = 2;
  real _t11C8 = prim ^0068 (x11AC, _t11C7);
  real _t11C9 = prim *0034 (_t11C6, _t11C8);
  real _t11CA = prim -0026<$[]> (_t11C5, _t11C9);
  real _t11CB = prim *0034 (_t11C4, _t11CA);
  real _t11CC = 0.e0;
  vec3 _t11CD = [_t11C3, _t11CB, _t11CC];
  real _t11CE = 0.2e1;
  real _t11CF = 0.2e1;
  real _t11D0 = 0.3e1;
  int _t11D1 = 2;
  real _t11D2 = prim ^0068 (x11AC, _t11D1);
  real _t11D3 = prim *0034 (_t11D0, _t11D2);
  real _t11D4 = prim -0026<$[]> (_t11CF, _t11D3);
  real _t11D5 = prim *0034 (_t11CE, _t11D4);
  real _t11D6 = 0.2e1;
  real _t11D7 = 0.e0;
  vec3 _t11D8 = [_t11D5, _t11D6, _t11D7];
  real _t11D9 = 0.e0;
  real _t11DA = 0.e0;
  real _t11DB = 0.2e1;
  real _t11DC = prim *0034 (_t11DB, zfuz085C);
  vec3 _t11DD = [_t11D9, _t11DA, _t11DC];
  tensor[3,3] H11DE = [_t11CD, _t11D8, _t11DD];
  real _t11DF = 0.2e1;
  real _t11E0 = 0.2e1;
  real _t11E1 = 0.3e1;
  int _t11E2 = 2;
  real _t11E3 = prim ^0068 (x11AC, _t11E2);
  real _t11E4 = prim *0034 (_t11E1, _t11E3);
  real _t11E5 = prim -0026<$[]> (_t11E0, _t11E4);
  real _t11E6 = prim *0034 (_t11DF, _t11E5);
  int _t11E7 = 3;
  real _t11E8 = prim ^0068 (x11AC, _t11E7);
  real _t11E9 = prim unary -008B<$[]> (_t11E8);
  real _t11EA = 0.2e1;
  real _t11EB = prim *0034 (_t11EA, x11AC);
  real _t11EC = prim +0017<$[]> (_t11E9, _t11EB);
  real _t11ED = prim +0017<$[]> (_t11EC, y11AD);
  real _t11EE = prim *0034 (_t11E6, _t11ED);
  real _t11EF = 0.2e1;
  int _t11F0 = 3;
  real _t11F1 = prim ^0068 (x11AC, _t11F0);
  real _t11F2 = prim unary -008B<$[]> (_t11F1);
  real _t11F3 = 0.2e1;
  real _t11F4 = prim *0034 (_t11F3, x11AC);
  real _t11F5 = prim +0017<$[]> (_t11F2, _t11F4);
  real _t11F6 = prim +0017<$[]> (_t11F5, y11AD);
  real _t11F7 = prim *0034 (_t11EF, _t11F6);
  real _t11F8 = 0.2e1;
  real _t11F9 = prim *0034 (_t11F8, zfuz085C);
  real _t11FA = prim *0034 (_t11F9, z11AE);
  vec3 g11FB = [_t11EE, _t11F7, _t11FA];
  vec3[3] E11FC = prim evecs00A0 (H11DE);
  real[3] L11FD = prim evals009F (H11DE);
  real _t11FE = 0.1e1;
  int _t11FF = 0;
  real _t1200 = prim $sub01C0<real; %3> (L11FD, _t11FF);
  real _t1201 = prim /0055 (_t11FE, _t1200);
  real _t1202 = prim unary -008B<$[]> (_t1201);
  int _t1203 = 0;
  vec3 _t1204 = prim $sub01C0<vec3; %3> (E11FC, _t1203);
  vec3 _t1205 = prim *0036<$[3]> (_t1202, _t1204);
  int _t1206 = 0;
  vec3 _t1207 = prim $sub01C0<vec3; %3> (E11FC, _t1206);
  tensor[3,3] _t1208 = prim ⊗00E5<$[3]; $[3]; $[3,3]> (_t1205, _t1207);
  vec3 up1209 = prim •00CE<$[3,3]; $[3]; $[3]> (_t1208, g11FB);
  bool _t120A;
  real _t120B = up1209[0];
  real _t120C = up1209[0];
  bool _t120D = prim ==0084 (_t120B, _t120C);
  bool _t120E = prim !00BC (_t120D);
  if _t120E {
    _t120A = true;
  } else {
    bool _t120F;
    real _t1210 = up1209[1];
    real _t1211 = up1209[1];
    bool _t1212 = prim ==0084 (_t1210, _t1211);
    bool _t1213 = prim !00BC (_t1212);
    if _t1213 {
      _t120F = true;
    } else {
      real _t1214 = up1209[2];
      real _t1215 = up1209[2];
      bool _t1216 = prim ==0084 (_t1214, _t1215);
      _t120F = prim !00BC (_t1216);
    }
    _t120A = _t120F;
  }
  if _t120A {
    real _t1217 = +inf;
    real _t1218 = +inf;
    real _t1219 = +inf;
    vec3 _t121A = [_t1217, _t1218, _t1219];
    return _t121A;
  }
  return up1209;
}
function bool#4 posNanCheck121B (vec3 up121C)
{
  bool _t121D;
  real _t121E = up121C[0];
  real _t121F = up121C[0];
  bool _t1220 = prim ==0084 (_t121E, _t121F);
  bool _t1221 = prim !00BC (_t1220);
  if _t1221 {
    _t121D = true;
  } else {
    bool _t1222;
    real _t1223 = up121C[1];
    real _t1224 = up121C[1];
    bool _t1225 = prim ==0084 (_t1223, _t1224);
    bool _t1226 = prim !00BC (_t1225);
    if _t1226 {
      _t1222 = true;
    } else {
      real _t1227 = up121C[2];
      real _t1228 = up121C[2];
      bool _t1229 = prim ==0084 (_t1227, _t1228);
      _t1222 = prim !00BC (_t1229);
    }
    _t121D = _t1222;
  }
  return _t121D;
}
function tensor[3,3]#1 fPerp122A (vec3 s122B)
{
  real x122C = s122B[0];
  real y122D = s122B[1];
  real z122E = s122B[2];
  real _t122F = 0.2e1;
  real _t1230 = 0.2e1;
  real _t1231 = 0.3e1;
  int _t1232 = 2;
  real _t1233 = prim ^0068 (x122C, _t1232);
  real _t1234 = prim *0034 (_t1231, _t1233);
  real _t1235 = prim -0026<$[]> (_t1230, _t1234);
  int _t1236 = 2;
  real _t1237 = prim ^0068 (_t1235, _t1236);
  real _t1238 = prim *0034 (_t122F, _t1237);
  real _t1239 = 0.12e2;
  real _t123A = prim *0034 (_t1239, x122C);
  int _t123B = 3;
  real _t123C = prim ^0068 (x122C, _t123B);
  real _t123D = prim unary -008B<$[]> (_t123C);
  real _t123E = 0.2e1;
  real _t123F = prim *0034 (_t123E, x122C);
  real _t1240 = prim +0017<$[]> (_t123D, _t123F);
  real _t1241 = prim +0017<$[]> (_t1240, y122D);
  real _t1242 = prim *0034 (_t123A, _t1241);
  real _t1243 = prim -0026<$[]> (_t1238, _t1242);
  real _t1244 = 0.2e1;
  real _t1245 = 0.2e1;
  real _t1246 = 0.3e1;
  int _t1247 = 2;
  real _t1248 = prim ^0068 (x122C, _t1247);
  real _t1249 = prim *0034 (_t1246, _t1248);
  real _t124A = prim -0026<$[]> (_t1245, _t1249);
  real _t124B = prim *0034 (_t1244, _t124A);
  real _t124C = 0.e0;
  vec3 _t124D = [_t1243, _t124B, _t124C];
  real _t124E = 0.2e1;
  real _t124F = 0.2e1;
  real _t1250 = 0.3e1;
  int _t1251 = 2;
  real _t1252 = prim ^0068 (x122C, _t1251);
  real _t1253 = prim *0034 (_t1250, _t1252);
  real _t1254 = prim -0026<$[]> (_t124F, _t1253);
  real _t1255 = prim *0034 (_t124E, _t1254);
  real _t1256 = 0.2e1;
  real _t1257 = 0.e0;
  vec3 _t1258 = [_t1255, _t1256, _t1257];
  real _t1259 = 0.e0;
  real _t125A = 0.e0;
  real _t125B = 0.2e1;
  real _t125C = prim *0034 (_t125B, zfuz085C);
  vec3 _t125D = [_t1259, _t125A, _t125C];
  tensor[3,3] H125E = [_t124D, _t1258, _t125D];
  vec3[3] _t125F = prim evecs00A0 (H125E);
  int _t1260 = 0;
  vec3 E21261 = prim $sub01C0<vec3; %3> (_t125F, _t1260);
  tensor[3,3] _t1262 = prim $id01B9<%3> ();
  tensor[3,3] _t1263 = prim ⊗00E5<$[3]; $[3]; $[3,3]> (E21261, E21261);
  tensor[3,3] m1264 = prim -0026<$[3,3]> (_t1262, _t1263);
  real t1265 = prim :00FC<$[3,3]; $[3,3]; $[]> (m1264, m1264);
  bool _t1266 = prim ==0084 (t1265, t1265);
  bool _t1267 = prim !00BC (_t1266);
  if _t1267 {
    tensor[3,3] _t1268 = prim $zero01BB<$[3,3]> ();
    return _t1268;
  }
  return m1264;
}
function real#1 fStrength1269 (vec3 s126A)
{
  real x126B = s126A[0];
  real y126C = s126A[1];
  real z126D = s126A[2];
  real _t126E = 0.2e1;
  real _t126F = 0.2e1;
  real _t1270 = 0.3e1;
  int _t1271 = 2;
  real _t1272 = prim ^0068 (x126B, _t1271);
  real _t1273 = prim *0034 (_t1270, _t1272);
  real _t1274 = prim -0026<$[]> (_t126F, _t1273);
  int _t1275 = 2;
  real _t1276 = prim ^0068 (_t1274, _t1275);
  real _t1277 = prim *0034 (_t126E, _t1276);
  real _t1278 = 0.12e2;
  real _t1279 = prim *0034 (_t1278, x126B);
  int _t127A = 3;
  real _t127B = prim ^0068 (x126B, _t127A);
  real _t127C = prim unary -008B<$[]> (_t127B);
  real _t127D = 0.2e1;
  real _t127E = prim *0034 (_t127D, x126B);
  real _t127F = prim +0017<$[]> (_t127C, _t127E);
  real _t1280 = prim +0017<$[]> (_t127F, y126C);
  real _t1281 = prim *0034 (_t1279, _t1280);
  real _t1282 = prim -0026<$[]> (_t1277, _t1281);
  real _t1283 = 0.2e1;
  real _t1284 = 0.2e1;
  real _t1285 = 0.3e1;
  int _t1286 = 2;
  real _t1287 = prim ^0068 (x126B, _t1286);
  real _t1288 = prim *0034 (_t1285, _t1287);
  real _t1289 = prim -0026<$[]> (_t1284, _t1288);
  real _t128A = prim *0034 (_t1283, _t1289);
  real _t128B = 0.e0;
  vec3 _t128C = [_t1282, _t128A, _t128B];
  real _t128D = 0.2e1;
  real _t128E = 0.2e1;
  real _t128F = 0.3e1;
  int _t1290 = 2;
  real _t1291 = prim ^0068 (x126B, _t1290);
  real _t1292 = prim *0034 (_t128F, _t1291);
  real _t1293 = prim -0026<$[]> (_t128E, _t1292);
  real _t1294 = prim *0034 (_t128D, _t1293);
  real _t1295 = 0.2e1;
  real _t1296 = 0.e0;
  vec3 _t1297 = [_t1294, _t1295, _t1296];
  real _t1298 = 0.e0;
  real _t1299 = 0.e0;
  real _t129A = 0.2e1;
  real _t129B = prim *0034 (_t129A, zfuz085C);
  vec3 _t129C = [_t1298, _t1299, _t129B];
  tensor[3,3] H129D = [_t128C, _t1297, _t129C];
  real _t129E = 0.2e1;
  real _t129F = 0.2e1;
  real _t12A0 = 0.3e1;
  int _t12A1 = 2;
  real _t12A2 = prim ^0068 (x126B, _t12A1);
  real _t12A3 = prim *0034 (_t12A0, _t12A2);
  real _t12A4 = prim -0026<$[]> (_t129F, _t12A3);
  real _t12A5 = prim *0034 (_t129E, _t12A4);
  int _t12A6 = 3;
  real _t12A7 = prim ^0068 (x126B, _t12A6);
  real _t12A8 = prim unary -008B<$[]> (_t12A7);
  real _t12A9 = 0.2e1;
  real _t12AA = prim *0034 (_t12A9, x126B);
  real _t12AB = prim +0017<$[]> (_t12A8, _t12AA);
  real _t12AC = prim +0017<$[]> (_t12AB, y126C);
  real _t12AD = prim *0034 (_t12A5, _t12AC);
  real _t12AE = 0.2e1;
  int _t12AF = 3;
  real _t12B0 = prim ^0068 (x126B, _t12AF);
  real _t12B1 = prim unary -008B<$[]> (_t12B0);
  real _t12B2 = 0.2e1;
  real _t12B3 = prim *0034 (_t12B2, x126B);
  real _t12B4 = prim +0017<$[]> (_t12B1, _t12B3);
  real _t12B5 = prim +0017<$[]> (_t12B4, y126C);
  real _t12B6 = prim *0034 (_t12AE, _t12B5);
  real _t12B7 = 0.2e1;
  real _t12B8 = prim *0034 (_t12B7, zfuz085C);
  real _t12B9 = prim *0034 (_t12B8, z126D);
  vec3 g12BA = [_t12AD, _t12B6, _t12B9];
  real[3] _t12BB = prim evals009F (H129D);
  int _t12BC = 0;
  real _t12BD = prim $sub01C0<real; %3> (_t12BB, _t12BC);
  real _t12BE = prim |()|00B5<$[3]> (g12BA);
  real _t12BF = prim +0017<$[]> (fBias085A, _t12BE);
  real _t12C0 = prim /0055 (_t12BD, _t12BF);
  return _t12C0;
}
function real#1 phi12C1 (real r12C2)
{
  real _t12C3 = 0.1e1;
  real _t12C4 = prim -0026<$[]> (_t12C3, r12C2);
  int _t12C5 = 4;
  real _t12C6 = prim ^0068 (_t12C4, _t12C5);
  return _t12C6;
}
function real#1 phi'12C7 (real r12C8)
{
  int _t12C9 = -4;
  real _t12CA = (real)_t12C9;
  real _t12CB = 0.1e1;
  real _t12CC = prim -0026<$[]> (_t12CB, r12C8);
  int _t12CD = 3;
  real _t12CE = prim ^0068 (_t12CC, _t12CD);
  real _t12CF = prim *0034 (_t12CA, _t12CE);
  return _t12CF;
}
function real#2 enr12D0 (vec3 x12D1)
{
  real _t12D2 = prim |()|00B5<$[3]> (x12D1);
  real _t12D3 = prim /0055 (_t12D2, rad0857);
  real _t12D4 = func phi12C1 (_t12D3);
  return _t12D4;
}
function vec3#1 frc12D5 (vec3 x12D6)
{
  real _t12D7 = prim |()|00B5<$[3]> (x12D6);
  real _t12D8 = prim /0055 (_t12D7, rad0857);
  real _t12D9 = func phi'12C7 (_t12D8);
  real _t12DA = 0.1e1;
  real _t12DB = prim /0055 (_t12DA, rad0857);
  real _t12DC = prim *0034 (_t12D9, _t12DB);
  vec3 _t12DD = prim *0036<$[3]> (_t12DC, x12D6);
  real _t12DE = prim |()|00B5<$[3]> (x12D6);
  vec3 _t12DF = prim /0057<$[3]> (_t12DD, _t12DE);
  return _t12DF;
}
function bool#3 posTest12E0 (vec3 pos12E1)
{
  bool _t12E2;
  bool _t12E3 = func insideTest1196 (pos12E1);
  if _t12E3 {
    bool _t12E4;
    bool _t12E5 = func posNanCheck121B (pos12E1);
    bool _t12E6 = prim !00BC (_t12E5);
    if _t12E6 {
      real _t12E7 = func fStrength1269 (pos12E1);
      _t12E4 = prim >=007E (_t12E7, fStren085B);
    } else {
      _t12E4 = false;
    }
    _t12E2 = _t12E4;
  } else {
    _t12E2 = false;
  }
  return _t12E2;
}
globalInit {
  int _t084B = 0;
  int _t0849 = 1;
  int _t084D = extractFemItem(NumCell(Mesh), int, meshData0847);
  int _t084C = prim -0024 (_t084D, _t0849);
  int[] _t0850 = prim $range01C3 (_t084B, _t084C);
  Femdata: MeshCell[] _t0851 = {};
  foreach _t084F in _t0850 {
    Femdata: MeshCell _t0852 = loadFem(MeshCell, meshData0847, _t084F);
    _t0851 = prim @0010<Femdata: MeshCell> (_t0851, _t0852);
  }
  0cell_meshData0848 = _t0851;
  space0853 = loadFem(Space, 0space0853_intermedateGlobal0854, meshData0847);
  data0855 = loadFem(FemFunc, 0data0855_intermedateGlobal0856, space0853);
  int _t117C = 3;
  dimm117D = _t117C;
  Femdata: Space _t1189 = extractFem(data0855, Space);
  Femdata: Space _t118A = extractFem(data0855, Space);
  Femdata: Mesh _t118B = extractFem(_t118A, Mesh);
  field(3)[] _t118C = femField(data0855,_t118B,field(3)[],refField,findPos0868 );
  Femdata: Space _t118D = extractFem(data0855, Space);
  Femdata: Mesh _t118E = extractFem(_t118D, Mesh);
  Femdata: Space _t118F = extractFem(data0855, Space);
  Femdata: Mesh _t1190 = extractFem(_t118F, Mesh);
  Femdata: Space _t1191 = extractFem(data0855, Space);
  Femdata: Mesh _t1192 = extractFem(_t1191, Mesh);
  field(3)[3] _t1193 = femField(_t118E,_t1192,field(3)[3],InvTransform,findPos0868 );
  F1194 = prim ∘0164<#∞; %3; $[]; %3; $[3]> (_t118C, _t1193);
  simplex1195 = func refcell08B4 (meshData0847);
}
strand particle (vec3 pos012E8, real hh012E9) in 3D {
  output vec3 pos12EA;
  output vec3 _pos12EB;
  real hh12EC;
  vec3 step12ED;
  bool found12EE;
  int nfs12EF;
  int test12F0;
  int testp12F1;
  int steps12F2;
  {
    pos12EA = pos012E8;
    _pos12EB = pos12EA;
    hh12EC = hh012E9;
    step12ED = prim $zero01BB<$[3]> ();
    found12EE = false;
    nfs12EF = 0;
    test12F0 = 1;
    testp12F1 = 0;
    steps12F2 = 0;
  }
  update
  {
    int _t12F3 = 1;
    steps12F2 = prim +0015 (steps12F2, _t12F3);
    bool _t12F4 = func posTest12E0 (pos12EA);
    bool _t12F5 = prim !00BC (_t12F4);
    if _t12F5 {
      die;
    }
    bool _t12F6 = prim !00BC (found12EE);
    if _t12F6 {
      step12ED = func fStep11AA (pos12EA);
      pos12EA = prim +0017<$[3]> (pos12EA, step12ED);
      _pos12EB = pos12EA;
      bool _t12F7 = func posNanCheck121B (pos12EA);
      if _t12F7 {
        die;
      }
      real _t12F8 = prim |()|00B5<$[3]> (step12ED);
      real _t12F9 = prim /0055 (_t12F8, rad0857);
      bool _t12FA = prim >0080 (_t12F9, eps0858);
      if _t12FA {
        int _t12FB = 1;
        nfs12EF = prim +0015 (nfs12EF, _t12FB);
        int _t12FC = 10;
        bool _t12FD = prim >007F (nfs12EF, _t12FC);
        if _t12FD {
          die;
        }
      } else {
        found12EE = true;
        testp12F1 = 1;
      }
    } else {
      vec3 _t12FE = func fStep11AA (pos12EA);
      pos12EA = prim +0017<$[3]> (pos12EA, _t12FE);
      _pos12EB = pos12EA;
      bool _t12FF = func posNanCheck121B (pos12EA);
      if _t12FF {
        die;
      }
      step12ED = prim $zero01BB<$[3]> ();
      real oldE1300 = 0.e0;
      vec3 force1301 = prim $zero01BB<$[3]> ();
      int nn1302 = 0;
      particle[] _t1303 = prim sphere0198<particle> (_pos12EB, rad0857);
      foreach P1304 in _t1303 {
        vec3 _t1305 = P1304.pos12EA;
        vec3 _t1306 = prim -0026<$[3]> (_t1305, pos12EA);
        real _t1307 = func enr12D0 (_t1306);
        oldE1300 = prim +0017<$[]> (oldE1300, _t1307);
        vec3 _t1308 = P1304.pos12EA;
        vec3 _t1309 = prim -0026<$[3]> (_t1308, pos12EA);
        vec3 _t130A = func frc12D5 (_t1309);
        force1301 = prim +0017<$[3]> (force1301, _t130A);
        int _t130B = 1;
        nn1302 = prim +0015 (nn1302, _t130B);
      }
      int _t130C = 0;
      bool _t130D = prim ==0082 (_t130C, nn1302);
      if _t130D {
        real _t130E = 0.5e0;
        real _t130F = prim *0034 (_t130E, rad0857);
        real _t1310 = 0.e0;
        real _t1311 = 0.e0;
        vec3 _t1312 = [_t130F, _t1310, _t1311];
        vec3 npos1313 = prim +0017<$[3]> (pos12EA, _t1312);
        bool _t1314 = func posTest12E0 (npos1313);
        if _t1314 {
          new particle (npos1313, hh12EC);
        }
        continue;
      }
      tensor[3,3] _t1315 = func fPerp122A (pos12EA);
      force1301 = prim •00CE<$[3,3]; $[3]; $[3]> (_t1315, force1301);
      vec3 es1316 = prim *0036<$[3]> (hh12EC, force1301);
      real _t1317 = prim |()|00B5<$[3]> (es1316);
      bool _t1318 = prim >0080 (_t1317, rad0857);
      if _t1318 {
        real _t1319 = prim |()|00B5<$[3]> (es1316);
        real _t131A = prim /0055 (rad0857, _t1319);
        hh12EC = prim *0034 (hh12EC, _t131A);
        real _t131B = prim |()|00B5<$[3]> (es1316);
        real _t131C = prim /0055 (rad0857, _t131B);
        es1316 = prim *0038<$[3]> (es1316, _t131C);
      }
      vec3 samplePos131D = prim +0017<$[3]> (pos12EA, es1316);
      vec3 fs131E = func fStep11AA (samplePos131D);
      real _t131F = prim |()|00B5<$[3]> (fs131E);
      real _t1320 = prim |()|00B5<$[3]> (es1316);
      real _t1321 = prim /0055 (_t131F, _t1320);
      real _t1322 = 0.5e0;
      bool _t1323 = prim >0080 (_t1321, _t1322);
      if _t1323 {
        real _t1324 = 0.5e0;
        hh12EC = prim *0034 (hh12EC, _t1324);
        continue;
      }
      vec3 oldPos1325 = pos12EA;
      vec3 up1326 = prim +0017<$[3]> (fs131E, es1316);
      pos12EA = prim +0017<$[3]> (pos12EA, up1326);
      _pos12EB = pos12EA;
      particle[] _t1327 = prim sphere0198<particle> (_pos12EB, rad0857);
      real accum132C = 0.e0;
      foreach P1328 in _t1327 {
        vec3 _t1329 = P1328.pos12EA;
        vec3 _t132A = prim -0026<$[3]> (pos12EA, _t1329);
        real _t132B = func enr12D0 (_t132A);
        accum132C = prim +0017<$[]> (accum132C, _t132B);
      }
      real newE132D = accum132C;
      real _t132E = prim -0026<$[]> (newE132D, oldE1300);
      real _t132F = 0.5e0;
      vec3 _t1330 = prim -0026<$[3]> (pos12EA, oldPos1325);
      vec3 _t1331 = prim *0036<$[3]> (_t132F, _t1330);
      vec3 _t1332 = prim unary -008B<$[3]> (force1301);
      real _t1333 = prim •00CE<$[3]; $[3]; $[]> (_t1331, _t1332);
      bool _t1334 = prim >0080 (_t132E, _t1333);
      if _t1334 {
        pos12EA = oldPos1325;
        _pos12EB = pos12EA;
        real _t1335 = 0.5e0;
        hh12EC = prim *0034 (hh12EC, _t1335);
        continue;
      }
      real _t1336 = 0.11e1;
      hh12EC = prim *0034 (hh12EC, _t1336);
      step12ED = up1326;
      bool _t1337 = func posNanCheck121B (pos12EA);
      if _t1337 {
        die;
      }
      int _t1338 = 5;
      bool _t1339 = prim <0079 (nn1302, _t1338);
      if _t1339 {
        real _t133A = 0.5e0;
        real _t133B = prim *0034 (_t133A, rad0857);
        vec3 _t133C = prim normalize0137<$[3]> (es1316);
        vec3 _t133D = prim *0036<$[3]> (_t133B, _t133C);
        vec3 npos133E = prim +0017<$[3]> (pos12EA, _t133D);
        bool _t133F = func posTest12E0 (npos133E);
        if _t133F {
          new particle (npos133E, hh12EC);
        }
      }
    }
  }
}
collection {
  foreach x1340 in ipos085D {
    real _t1341 = 0.1e1;
    new particle (x1340, _t1341);
  }
}
update {
  int res1342= sum<int> { (P1345) => {
      int _t1346 = P1345.test12F0;
      return _t1346;
    } (P1343, P1343)
  | P1343 in all };
  int num1348 = res1342;
  int res1349= max<int> { (P134C) => {
      int _t134D = P134C.steps12F2;
      return _t134D;
    } (P134A, P134A)
  | P134A in all };
  int steps134F = res1349;
  int res1350= sum<int> { (P1353) => {
      int _t1354 = P1353.testp12F1;
      return _t1354;
    } (P1351, P1351)
  | P1351 in all };
  int numFound1356 = res1350;
  bool res1357= all { (P135A) => {
      bool _t135B = P135A.found12EE;
      return _t135B;
    } (P1358, P1358)
  | P1358 in all };
  bool allFound135D = res1357;
  real res135E= max<real> { (P1362) => {
      vec3 _t1363 = P1362.step12ED;
      real _t1364 = prim |()|00B5<$[3]> (_t1363);
      return _t1364;
    } (P135F, P135F)
  | P135F in all };
  real maxStep1366 = res135E;
  string _t1367 = "One run:";
  string _t1368 = " and ";
  real _t1369 = prim /0055 (maxStep1366, rad0857);
  string _t136A = " and ";
  real _t136B = prim /0055 (maxStep1366, rad0857);
  bool _t136C = prim <007A (_t136B, eps0858);
  string _t136D = " and ";
  string _t136E = " of ";
  string _t136F = "\n";
  print (_t1367, allFound135D, _t1368, _t1369, _t136A, _t136C, _t136D, numFound1356, _t136E, num1348, _t136F);
  if allFound135D {
    real _t1370 = prim /0055 (maxStep1366, rad0857);
    bool _t1371 = prim <007A (_t1370, eps0858);
    if _t1371 {
      string _t1372 = "CONVERGED!\n";
      print (_t1372);
      stabilize_all;
    }
  }
  int _t1373 = 5000;
  bool _t1374 = prim >007F (steps134F, _t1373);
  if _t1374 {
    stabilize_all;
  }
}
/* Program end */
/* Simplified Program (after after contraction (1)) start */
properties: GlobalInit,StabilizeAll,GlobalReduce,StrandSets,GlobalUpdate,NewStrands,StrandCommunication,StrandsMayDie,HasInputs,HasGlobals,ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
input FemData:Mesh meshData0847;
input FemData:Space 0space0853_intermedateGlobal0854;
input FemData:FemFunc 0data0855_intermedateGlobal0856;
input real rad0857 = <default>;
input real eps0858 = <default>;
input real v00859 = <default>;
input real fBias085A = <default>;
input real fStren085B = <default>;
input real zfuz085C = <default>;
input vec3[] ipos085D;
constants {
  rad0857 = 0.1e-1;
  eps0858 = 0.1e-1;
  v00859 = 0.625e-1;
  fBias085A = 0.1e-1;
  fStren085B = 0.1e-1;
  zfuz085C = 0.1e-1;
}
function bool#0 !=085E (Femdata: MeshCell cell1085F, Femdata: MeshCell cell10860)
{
  int _t0861 = extractFemItem(CellIndex(Mesh), int, cell1085F);
  int _t0862 = extractFemItem(CellIndex(Mesh), int, cell10860);
  bool _t0863 = prim !=0086 (_t0861, _t0862);
  return _t0863;
}
function bool#0 ==0864 (Femdata: MeshCell cell1085F, Femdata: MeshCell cell10860)
{
  int _t0865 = extractFemItem(CellIndex(Mesh), int, cell1085F);
  int _t0866 = extractFemItem(CellIndex(Mesh), int, cell10860);
  bool _t0867 = prim ==0082 (_t0865, _t0866);
  return _t0867;
}
function Femdata: MeshPos#0 findPos0868 (Femdata: Mesh mesh0869, vec3 pos086A)
{
  real _t086B = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t086C = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t086D = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  xn086E = [_t086B, _t086C, _t086D];
  newtonInt086F = 0;
  cellInt0870 = extractFemItem(StartCell(Mesh), int, mesh0869);
  int _t0871 = extractFemItem(NumCell(Mesh), int, mesh0869);
  int _t0872 = 1;
  numCell0873 = prim -0024 (_t0871, _t0872);
  yayCells0874 = extractFemItem2(NearbyCell(File=spat.in)(Mesh), vec3, mesh0869, pos086A : vec3);
  foreach cellItter0878 in yayCells0874 {
    real _t0875 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    real _t0876 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    real _t0877 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    xn086E = [_t0875, _t0876, _t0877];
    cellInt0870 = cellItter0878;
    field(3)[3] _t0879 = femField(mesh0869,cellInt0870,field(3)[3],Transform,);
    field(3)[3,3] _t087A = prim ∇⊗00AD<#∞; %3; $[]; %3> (_t0879);
    field(3)[3,3] _t087B = prim inv015E<#∞; %3> (_t087A);
    real _t087C = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    real _t087D = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    real _t087E = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    vec3 _t087F = [_t087C, _t087D, _t087E];
    A0880 = prim @00A5<#∞; %3; $[3,3]> (_t087B, _t087F);
    int _t0881 = 0;
    int _t0882 = 16;
    int[] _t0883 = prim $range01C3 (_t0881, _t0882);
    foreach newtonItter08B2 in _t0883 {
      field(3)[3] _t0884 = femField(mesh0869,cellInt0870,field(3)[3],Transform,);
      field(3)[3] _t0885 = prim -002E<#∞; %3; $[3]> (_t0884, pos086A);
      field(3)[3] _t0886 = prim •00D4<#∞; %3; $[3,3]; $[3]; $[3]> (A0880, _t0885);
      delta0887 = prim @00A5<#∞; %3; $[3]> (_t0886, xn086E);
      xn086E = prim -0026<$[3]> (xn086E, delta0887);
      real _t0888 = 0.1e-7;
      real _t0889 = 0.1e-7;
      real _t088A = prim *0034 (_t0888, _t0889);
      real _t088B = prim •00CE<$[3]; $[3]; $[]> (delta0887, delta0887);
      bool _t088C = prim >=007E (_t088A, _t088B);
      if _t088C {
        real _t088D = 0.1e1;
        real _t088E = 0.1e-7;
        real _t088F = prim +0017<$[]> (_t088D, _t088E);
        real _t0890 = 0.1e1;
        real _t0891 = 0.1e1;
        real _t0892 = 0.1e1;
        vec3 _t0893 = [_t0890, _t0891, _t0892];
        real _t0894 = prim •00CE<$[3]; $[3]; $[]> (_t0893, xn086E);
        bool _t0895 = prim >0080 (_t088F, _t0894);
        real _t0896 = 0.1e-7;
        real _t0897 = 0.1e-7;
        real _t0898 = 0.1e-7;
        vec3 _t0899 = [_t0896, _t0897, _t0898];
        vec3 _t089A = prim +0017<$[3]> (_t0899, xn086E);
        real _t089B = _t089A[0];
        real _t089C = -0.e0;
        bool _t089D = prim >0080 (_t089B, _t089C);
        real _t089E = 0.1e-7;
        real _t089F = 0.1e-7;
        real _t08A0 = 0.1e-7;
        vec3 _t08A1 = [_t089E, _t089F, _t08A0];
        vec3 _t08A2 = prim +0017<$[3]> (_t08A1, xn086E);
        real _t08A3 = _t08A2[1];
        real _t08A4 = -0.e0;
        bool _t08A5 = prim >0080 (_t08A3, _t08A4);
        real _t08A6 = 0.1e-7;
        real _t08A7 = 0.1e-7;
        real _t08A8 = 0.1e-7;
        vec3 _t08A9 = [_t08A6, _t08A7, _t08A8];
        vec3 _t08AA = prim +0017<$[3]> (_t08A9, xn086E);
        real _t08AB = _t08AA[2];
        real _t08AC = -0.e0;
        bool _t08AD = prim >0080 (_t08AB, _t08AC);
        bool _t08AE = prim $and01C4 (_t08A5, _t08AD);
        bool _t08AF = prim $and01C4 (_t089D, _t08AE);
        bool _t08B0 = prim $and01C4 (_t0895, _t08AF);
        if _t08B0 {
          Femdata: MeshPos _t08B1 = extractFemItemN((mesh0869, cellInt0870, xn086E, pos086A),AllBuild(MeshPos),);
          return _t08B1;
        }
      }
    }
  }
  Femdata: MeshPos _t08B3 = extractFemItemN((mesh0869),InvalidBuild(MeshPos),);
  return _t08B3;
}
function Femdata: RefCell#1 refcell08B4 (Femdata: Mesh arg008B5)
{
  Femdata: RefCell _t08B6 = extractFemItem(RefCell(Mesh), Femdata: RefCell, arg008B5);
  return _t08B6;
}
function Femdata: MeshCell[]#0 cells08B7 (Femdata: Mesh arg008B8)
{
  Femdata: MeshCell[] _t08B9 = extractFemItem(Cells(Mesh), Femdata: MeshCell[], arg008B8);
  return _t08B9;
}
function Femdata: MeshCell[]#0 cells08BA (Femdata: Mesh arg008B8)
{
  int _t08BB = 0;
  int _t08BC = extractFemItem(NumCell(Mesh), int, arg008B8);
  int[] _t08BD = prim $range01C3 (_t08BB, _t08BC);
  Femdata: MeshCell[] accum08C0 = {};
  foreach i08BE in _t08BD {
    Femdata: MeshCell _t08BF = loadFem(MeshCell, arg008B8, i08BE);
    accum08C0 = prim @0010<Femdata: MeshCell> (accum08C0, _t08BF);
  }
  return accum08C0;
}
function int#0 numCell08C1 (Femdata: Mesh arg008B5)
{
  int _t08C2 = extractFemItem(NumCell(Mesh), int, arg008B5);
  return _t08C2;
}
function tensor[3,3,3,3]#0 mesh_t_transform_308C3 (vec3 pos08C4, int cell08C5, Femdata: Mesh mesh08C6)
{
  field(3)[3] _t08C7 = femField(mesh08C6,cell08C5,field(3)[3],Transform,);
  field(3)[3,3] _t08C8 = prim ∇⊗00AD<#∞; %3; $[]; %3> (_t08C7);
  field(3)[3,3,3] _t08C9 = prim ∇⊗00AD<#∞; %3; $[3]; %3> (_t08C8);
  field(3)[3,3,3,3] _t08CA = prim ∇⊗00AD<#∞; %3; $[3,3]; %3> (_t08C9);
  tensor[3,3,3,3] _t08CB = prim @00A5<#∞; %3; $[3,3,3,3]> (_t08CA, pos08C4);
  return _t08CB;
}
function tensor[3,3,3]#0 mesh_t_transform_208CC (vec3 pos08C4, int cell08C5, Femdata: Mesh mesh08C6)
{
  field(3)[3] _t08CD = femField(mesh08C6,cell08C5,field(3)[3],Transform,);
  field(3)[3,3] _t08CE = prim ∇⊗00AD<#∞; %3; $[]; %3> (_t08CD);
  field(3)[3,3,3] _t08CF = prim ∇⊗00AD<#∞; %3; $[3]; %3> (_t08CE);
  tensor[3,3,3] _t08D0 = prim @00A5<#∞; %3; $[3,3,3]> (_t08CF, pos08C4);
  return _t08D0;
}
function tensor[3,3]#0 mesh_t_transform_108D1 (vec3 pos08C4, int cell08C5, Femdata: Mesh mesh08C6)
{
  field(3)[3] _t08D2 = femField(mesh08C6,cell08C5,field(3)[3],Transform,);
  field(3)[3,3] _t08D3 = prim ∇⊗00AD<#∞; %3; $[]; %3> (_t08D2);
  tensor[3,3] _t08D4 = prim @00A5<#∞; %3; $[3,3]> (_t08D3, pos08C4);
  return _t08D4;
}
function vec3#2 mesh_t_transform_008D5 (vec3 pos08C4, int cell08C5, Femdata: Mesh mesh08C6)
{
  field(3)[3] _t08D6 = femField(mesh08C6,cell08C5,field(3)[3],Transform,);
  vec3 _t08D7 = prim @00A5<#∞; %3; $[3]> (_t08D6, pos08C4);
  return _t08D7;
}
function Femdata: MeshPos#0 _mesh_t_newtonInverse08D8 (vec3 pos08D9, int cellInt08DA, Femdata: Mesh mesh08DB)
{
  real _t08DC = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t08DD = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t08DE = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  xn08DF = [_t08DC, _t08DD, _t08DE];
  field(3)[3] _t08E0 = femField(mesh08DB,cellInt08DA,field(3)[3],Transform,);
  field(3)[3,3] _t08E1 = prim ∇⊗00AD<#∞; %3; $[]; %3> (_t08E0);
  field(3)[3,3] _t08E2 = prim inv015E<#∞; %3> (_t08E1);
  real _t08E3 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t08E4 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t08E5 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  vec3 _t08E6 = [_t08E3, _t08E4, _t08E5];
  A08E7 = prim @00A5<#∞; %3; $[3,3]> (_t08E2, _t08E6);
  int _t08E8 = 0;
  int _t08E9 = 16;
  int[] _t08EA = prim $range01C3 (_t08E8, _t08E9);
  foreach itter091A in _t08EA {
    field(3)[3] _t08EB = femField(mesh08DB,cellInt08DA,field(3)[3],Transform,);
    field(3)[3] _t08EC = prim -002E<#∞; %3; $[3]> (_t08EB, pos08D9);
    field(3)[3] _t08ED = prim •00D4<#∞; %3; $[3,3]; $[3]; $[3]> (A08E7, _t08EC);
    delta08EE = prim @00A5<#∞; %3; $[3]> (_t08ED, xn08DF);
    xn08DF = prim -0026<$[3]> (xn08DF, delta08EE);
    real _t08EF = 0.1e-7;
    real _t08F0 = 0.1e-7;
    real _t08F1 = prim *0034 (_t08EF, _t08F0);
    real _t08F2 = prim •00CE<$[3]; $[3]; $[]> (delta08EE, delta08EE);
    bool _t08F3 = prim >=007E (_t08F1, _t08F2);
    if _t08F3 {
      real _t08F4 = 0.1e1;
      real _t08F5 = 0.1e-7;
      real _t08F6 = prim +0017<$[]> (_t08F4, _t08F5);
      real _t08F7 = 0.1e1;
      real _t08F8 = 0.1e1;
      real _t08F9 = 0.1e1;
      vec3 _t08FA = [_t08F7, _t08F8, _t08F9];
      real _t08FB = prim •00CE<$[3]; $[3]; $[]> (_t08FA, xn08DF);
      bool _t08FC = prim >0080 (_t08F6, _t08FB);
      real _t08FD = 0.1e-7;
      real _t08FE = 0.1e-7;
      real _t08FF = 0.1e-7;
      vec3 _t0900 = [_t08FD, _t08FE, _t08FF];
      vec3 _t0901 = prim +0017<$[3]> (_t0900, xn08DF);
      real _t0902 = _t0901[0];
      real _t0903 = -0.e0;
      bool _t0904 = prim >0080 (_t0902, _t0903);
      real _t0905 = 0.1e-7;
      real _t0906 = 0.1e-7;
      real _t0907 = 0.1e-7;
      vec3 _t0908 = [_t0905, _t0906, _t0907];
      vec3 _t0909 = prim +0017<$[3]> (_t0908, xn08DF);
      real _t090A = _t0909[1];
      real _t090B = -0.e0;
      bool _t090C = prim >0080 (_t090A, _t090B);
      real _t090D = 0.1e-7;
      real _t090E = 0.1e-7;
      real _t090F = 0.1e-7;
      vec3 _t0910 = [_t090D, _t090E, _t090F];
      vec3 _t0911 = prim +0017<$[3]> (_t0910, xn08DF);
      real _t0912 = _t0911[2];
      real _t0913 = -0.e0;
      bool _t0914 = prim >0080 (_t0912, _t0913);
      bool _t0915 = prim $and01C4 (_t090C, _t0914);
      bool _t0916 = prim $and01C4 (_t0904, _t0915);
      bool _t0917 = prim $and01C4 (_t08FC, _t0916);
      if _t0917 {
        Femdata: MeshPos _t0918 = extractFemItemN((mesh08DB, cellInt08DA, xn08DF, pos08D9),AllBuild(MeshPos),);
        return _t0918;
      } else {
        Femdata: MeshPos _t0919 = extractFemItemN((mesh08DB),InvalidBuild(MeshPos),);
        return _t0919;
      }
    }
  }
  Femdata: MeshPos _t091B = extractFemItemN((mesh08DB),InvalidBuild(MeshPos),);
  return _t091B;
}
function Femdata: MeshPos#0 _mesh_pos_mesh_t_build_world_pos091C (Femdata: MeshPos pos091D)
{
  bool _t091E = extractFemItem(WorldTest(MeshPos), bool, pos091D);
  if _t091E {
    vec3 _t091F = extractFemItem(RefPos(MeshPos), vec3, pos091D);
    int _t0920 = extractFemItem(CellIndex(MeshPos), int, pos091D);
    Femdata: Mesh _t0921 = extractFem(pos091D, Mesh);
    vec3 _t0922 = func mesh_t_transform_008D5 (_t091F, _t0920, _t0921);
    Femdata: MeshPos _t0923 = extractFemItemN((pos091D, _t0922),NewWorld(MeshPos),);
    return _t0923;
  } else {
    return pos091D;
  }
}
function vec3#0 worldPos0924 (Femdata: MeshPos pos091D)
{
  vec3 _t0925 = extractFemItem(RefPos(MeshPos), vec3, pos091D);
  int _t0926 = extractFemItem(CellIndex(MeshPos), int, pos091D);
  Femdata: Mesh _t0927 = extractFem(pos091D, Mesh);
  vec3 _t0928 = func mesh_t_transform_008D5 (_t0925, _t0926, _t0927);
  return _t0928;
}
function Femdata: MeshPos#0 $exitPos0929 (Femdata: Mesh mesh092A, int cellId092B, vec3 refPos092C, vec3 dPos092D, real[2] time092E)
{
  int _t092F = -1;
  real _t0930 = time092E[1];
  int _t0931 = prim $r2i01B7 (_t0930);
  int[2] _t0933 = func nextCell40932 (_t0931, cellId092B, mesh092A);
  int _t0934 = 0;
  int _t0935 = prim $sub01C0<int; %2> (_t0933, _t0934);
  bool _t0936 = prim !=0086 (_t092F, _t0935);
  if _t0936 {
    real _t0937 = time092E[1];
    int _t0938 = prim $r2i01B7 (_t0937);
    int[2] _t0939 = func nextCell40932 (_t0938, cellId092B, mesh092A);
    int _t093A = 0;
    int _t093B = prim $sub01C0<int; %2> (_t0939, _t093A);
    real _t093C = 0.1e1;
    real _t093D = 0.e0;
    real _t093E = 0.e0;
    real _t093F = 0.e0;
    vec4 _t0940 = [_t093C, _t093D, _t093E, _t093F];
    real _t0941 = 0.e0;
    real _t0942 = 0.1e1;
    real _t0943 = 0.e0;
    real _t0944 = 0.e0;
    vec4 _t0945 = [_t0941, _t0942, _t0943, _t0944];
    real _t0946 = 0.e0;
    real _t0947 = 0.e0;
    real _t0948 = 0.1e1;
    real _t0949 = 0.e0;
    vec4 _t094A = [_t0946, _t0947, _t0948, _t0949];
    real _t094B = 0.971445146547e-16;
    real _t094C = 0.e0;
    real _t094D = 0.e0;
    real _t094E = 0.1e1;
    vec4 _t094F = [_t094B, _t094C, _t094D, _t094E];
    tensor[4,4] _t0950 = [_t0940, _t0945, _t094A, _t094F];
    real _t0951 = 0.57735026919e0;
    real _t0952 = 0.57735026919e0;
    real _t0953 = 0.57735026919e0;
    real _t0954 = -0.57735026919e0;
    vec4 _t0955 = [_t0951, _t0952, _t0953, _t0954];
    real _t0956 = -0.333333333333e0;
    real _t0957 = 0.666666666667e0;
    real _t0958 = -0.333333333333e0;
    real _t0959 = 0.333333333333e0;
    vec4 _t095A = [_t0956, _t0957, _t0958, _t0959];
    real _t095B = -0.333333333333e0;
    real _t095C = -0.333333333333e0;
    real _t095D = 0.666666666667e0;
    real _t095E = 0.333333333333e0;
    vec4 _t095F = [_t095B, _t095C, _t095D, _t095E];
    real _t0960 = 0.971445146547e-16;
    real _t0961 = 0.e0;
    real _t0962 = 0.e0;
    real _t0963 = 0.1e1;
    vec4 _t0964 = [_t0960, _t0961, _t0962, _t0963];
    tensor[4,4] _t0965 = [_t0955, _t095A, _t095F, _t0964];
    real _t0966 = -0.333333333333e0;
    real _t0967 = 0.666666666667e0;
    real _t0968 = -0.333333333333e0;
    real _t0969 = 0.333333333333e0;
    vec4 _t096A = [_t0966, _t0967, _t0968, _t0969];
    real _t096B = -0.57735026919e0;
    real _t096C = -0.57735026919e0;
    real _t096D = -0.57735026919e0;
    real _t096E = 0.57735026919e0;
    vec4 _t096F = [_t096B, _t096C, _t096D, _t096E];
    real _t0970 = -0.333333333333e0;
    real _t0971 = -0.333333333333e0;
    real _t0972 = 0.666666666667e0;
    real _t0973 = 0.333333333333e0;
    vec4 _t0974 = [_t0970, _t0971, _t0972, _t0973];
    real _t0975 = 0.971445146547e-16;
    real _t0976 = 0.e0;
    real _t0977 = 0.e0;
    real _t0978 = 0.1e1;
    vec4 _t0979 = [_t0975, _t0976, _t0977, _t0978];
    tensor[4,4] _t097A = [_t096A, _t096F, _t0974, _t0979];
    real _t097B = -0.333333333333e0;
    real _t097C = 0.666666666667e0;
    real _t097D = -0.333333333333e0;
    real _t097E = 0.333333333333e0;
    vec4 _t097F = [_t097B, _t097C, _t097D, _t097E];
    real _t0980 = -0.333333333333e0;
    real _t0981 = -0.333333333333e0;
    real _t0982 = 0.666666666667e0;
    real _t0983 = 0.333333333333e0;
    vec4 _t0984 = [_t0980, _t0981, _t0982, _t0983];
    real _t0985 = 0.57735026919e0;
    real _t0986 = 0.57735026919e0;
    real _t0987 = 0.57735026919e0;
    real _t0988 = -0.57735026919e0;
    vec4 _t0989 = [_t0985, _t0986, _t0987, _t0988];
    real _t098A = 0.971445146547e-16;
    real _t098B = 0.e0;
    real _t098C = 0.e0;
    real _t098D = 0.1e1;
    vec4 _t098E = [_t098A, _t098B, _t098C, _t098D];
    tensor[4,4] _t098F = [_t097F, _t0984, _t0989, _t098E];
    tensor[4,4][4] _t0990 = {_t0950, _t0965, _t097A, _t098F};
    real _t0991 = 0.57735026919e0;
    real _t0992 = -0.1e1;
    real _t0993 = -0.1e1;
    real _t0994 = 0.1e1;
    vec4 _t0995 = [_t0991, _t0992, _t0993, _t0994];
    real _t0996 = 0.57735026919e0;
    real _t0997 = 0.1e1;
    real _t0998 = 0.e0;
    real _t0999 = 0.e0;
    vec4 _t099A = [_t0996, _t0997, _t0998, _t0999];
    real _t099B = 0.57735026919e0;
    real _t099C = 0.e0;
    real _t099D = 0.1e1;
    real _t099E = 0.e0;
    vec4 _t099F = [_t099B, _t099C, _t099D, _t099E];
    real _t09A0 = 0.e0;
    real _t09A1 = 0.e0;
    real _t09A2 = 0.e0;
    real _t09A3 = 0.1e1;
    vec4 _t09A4 = [_t09A0, _t09A1, _t09A2, _t09A3];
    tensor[4,4] _t09A5 = [_t0995, _t099A, _t099F, _t09A4];
    real _t09A6 = 0.1e1;
    real _t09A7 = 0.e0;
    real _t09A8 = 0.e0;
    real _t09A9 = 0.e0;
    vec4 _t09AA = [_t09A6, _t09A7, _t09A8, _t09A9];
    real _t09AB = 0.e0;
    real _t09AC = 0.1e1;
    real _t09AD = 0.e0;
    real _t09AE = 0.e0;
    vec4 _t09AF = [_t09AB, _t09AC, _t09AD, _t09AE];
    real _t09B0 = 0.e0;
    real _t09B1 = 0.e0;
    real _t09B2 = 0.1e1;
    real _t09B3 = 0.e0;
    vec4 _t09B4 = [_t09B0, _t09B1, _t09B2, _t09B3];
    real _t09B5 = 0.e0;
    real _t09B6 = 0.e0;
    real _t09B7 = 0.e0;
    real _t09B8 = 0.1e1;
    vec4 _t09B9 = [_t09B5, _t09B6, _t09B7, _t09B8];
    tensor[4,4] _t09BA = [_t09AA, _t09AF, _t09B4, _t09B9];
    real _t09BB = 0.e0;
    real _t09BC = 0.1e1;
    real _t09BD = 0.e0;
    real _t09BE = 0.e0;
    vec4 _t09BF = [_t09BB, _t09BC, _t09BD, _t09BE];
    real _t09C0 = -0.1e1;
    real _t09C1 = 0.e0;
    real _t09C2 = 0.e0;
    real _t09C3 = 0.e0;
    vec4 _t09C4 = [_t09C0, _t09C1, _t09C2, _t09C3];
    real _t09C5 = 0.e0;
    real _t09C6 = 0.e0;
    real _t09C7 = 0.1e1;
    real _t09C8 = 0.e0;
    vec4 _t09C9 = [_t09C5, _t09C6, _t09C7, _t09C8];
    real _t09CA = 0.e0;
    real _t09CB = 0.e0;
    real _t09CC = 0.e0;
    real _t09CD = 0.1e1;
    vec4 _t09CE = [_t09CA, _t09CB, _t09CC, _t09CD];
    tensor[4,4] _t09CF = [_t09BF, _t09C4, _t09C9, _t09CE];
    real _t09D0 = 0.e0;
    real _t09D1 = 0.1e1;
    real _t09D2 = 0.e0;
    real _t09D3 = 0.e0;
    vec4 _t09D4 = [_t09D0, _t09D1, _t09D2, _t09D3];
    real _t09D5 = 0.e0;
    real _t09D6 = 0.e0;
    real _t09D7 = 0.1e1;
    real _t09D8 = 0.e0;
    vec4 _t09D9 = [_t09D5, _t09D6, _t09D7, _t09D8];
    real _t09DA = 0.1e1;
    real _t09DB = 0.e0;
    real _t09DC = 0.e0;
    real _t09DD = 0.e0;
    vec4 _t09DE = [_t09DA, _t09DB, _t09DC, _t09DD];
    real _t09DF = 0.e0;
    real _t09E0 = 0.e0;
    real _t09E1 = 0.e0;
    real _t09E2 = 0.1e1;
    vec4 _t09E3 = [_t09DF, _t09E0, _t09E1, _t09E2];
    tensor[4,4] _t09E4 = [_t09D4, _t09D9, _t09DE, _t09E3];
    tensor[4,4][4] _t09E5 = {_t09A5, _t09BA, _t09CF, _t09E4};
    real _t09E6 = -0.1e1;
    real _t09E7 = -0.57735026919e0;
    real _t09E8 = -0.1e1;
    real _t09E9 = 0.1e1;
    vec4 _t09EA = [_t09E6, _t09E7, _t09E8, _t09E9];
    real _t09EB = 0.1e1;
    real _t09EC = -0.57735026919e0;
    real _t09ED = 0.e0;
    real _t09EE = 0.e0;
    vec4 _t09EF = [_t09EB, _t09EC, _t09ED, _t09EE];
    real _t09F0 = 0.e0;
    real _t09F1 = -0.57735026919e0;
    real _t09F2 = 0.1e1;
    real _t09F3 = 0.e0;
    vec4 _t09F4 = [_t09F0, _t09F1, _t09F2, _t09F3];
    real _t09F5 = 0.e0;
    real _t09F6 = 0.e0;
    real _t09F7 = 0.e0;
    real _t09F8 = 0.1e1;
    vec4 _t09F9 = [_t09F5, _t09F6, _t09F7, _t09F8];
    tensor[4,4] _t09FA = [_t09EA, _t09EF, _t09F4, _t09F9];
    real _t09FB = 0.e0;
    real _t09FC = -0.1e1;
    real _t09FD = 0.e0;
    real _t09FE = 0.e0;
    vec4 _t09FF = [_t09FB, _t09FC, _t09FD, _t09FE];
    real _t0A00 = 0.1e1;
    real _t0A01 = 0.e0;
    real _t0A02 = 0.e0;
    real _t0A03 = 0.e0;
    vec4 _t0A04 = [_t0A00, _t0A01, _t0A02, _t0A03];
    real _t0A05 = 0.e0;
    real _t0A06 = 0.e0;
    real _t0A07 = 0.1e1;
    real _t0A08 = 0.e0;
    vec4 _t0A09 = [_t0A05, _t0A06, _t0A07, _t0A08];
    real _t0A0A = 0.e0;
    real _t0A0B = 0.e0;
    real _t0A0C = 0.e0;
    real _t0A0D = 0.1e1;
    vec4 _t0A0E = [_t0A0A, _t0A0B, _t0A0C, _t0A0D];
    tensor[4,4] _t0A0F = [_t09FF, _t0A04, _t0A09, _t0A0E];
    real _t0A10 = 0.1e1;
    real _t0A11 = 0.e0;
    real _t0A12 = 0.e0;
    real _t0A13 = 0.e0;
    vec4 _t0A14 = [_t0A10, _t0A11, _t0A12, _t0A13];
    real _t0A15 = 0.e0;
    real _t0A16 = 0.1e1;
    real _t0A17 = 0.e0;
    real _t0A18 = 0.e0;
    vec4 _t0A19 = [_t0A15, _t0A16, _t0A17, _t0A18];
    real _t0A1A = 0.e0;
    real _t0A1B = 0.e0;
    real _t0A1C = 0.1e1;
    real _t0A1D = 0.e0;
    vec4 _t0A1E = [_t0A1A, _t0A1B, _t0A1C, _t0A1D];
    real _t0A1F = 0.e0;
    real _t0A20 = 0.e0;
    real _t0A21 = 0.e0;
    real _t0A22 = 0.1e1;
    vec4 _t0A23 = [_t0A1F, _t0A20, _t0A21, _t0A22];
    tensor[4,4] _t0A24 = [_t0A14, _t0A19, _t0A1E, _t0A23];
    real _t0A25 = 0.1e1;
    real _t0A26 = 0.e0;
    real _t0A27 = 0.e0;
    real _t0A28 = 0.e0;
    vec4 _t0A29 = [_t0A25, _t0A26, _t0A27, _t0A28];
    real _t0A2A = 0.e0;
    real _t0A2B = 0.e0;
    real _t0A2C = 0.1e1;
    real _t0A2D = 0.e0;
    vec4 _t0A2E = [_t0A2A, _t0A2B, _t0A2C, _t0A2D];
    real _t0A2F = 0.e0;
    real _t0A30 = -0.1e1;
    real _t0A31 = 0.e0;
    real _t0A32 = 0.e0;
    vec4 _t0A33 = [_t0A2F, _t0A30, _t0A31, _t0A32];
    real _t0A34 = 0.e0;
    real _t0A35 = 0.e0;
    real _t0A36 = 0.e0;
    real _t0A37 = 0.1e1;
    vec4 _t0A38 = [_t0A34, _t0A35, _t0A36, _t0A37];
    tensor[4,4] _t0A39 = [_t0A29, _t0A2E, _t0A33, _t0A38];
    tensor[4,4][4] _t0A3A = {_t09FA, _t0A0F, _t0A24, _t0A39};
    real _t0A3B = -0.1e1;
    real _t0A3C = -0.1e1;
    real _t0A3D = 0.57735026919e0;
    real _t0A3E = 0.1e1;
    vec4 _t0A3F = [_t0A3B, _t0A3C, _t0A3D, _t0A3E];
    real _t0A40 = 0.1e1;
    real _t0A41 = 0.e0;
    real _t0A42 = 0.57735026919e0;
    real _t0A43 = 0.e0;
    vec4 _t0A44 = [_t0A40, _t0A41, _t0A42, _t0A43];
    real _t0A45 = 0.e0;
    real _t0A46 = 0.1e1;
    real _t0A47 = 0.57735026919e0;
    real _t0A48 = 0.e0;
    vec4 _t0A49 = [_t0A45, _t0A46, _t0A47, _t0A48];
    real _t0A4A = 0.e0;
    real _t0A4B = 0.e0;
    real _t0A4C = 0.e0;
    real _t0A4D = 0.1e1;
    vec4 _t0A4E = [_t0A4A, _t0A4B, _t0A4C, _t0A4D];
    tensor[4,4] _t0A4F = [_t0A3F, _t0A44, _t0A49, _t0A4E];
    real _t0A50 = 0.e0;
    real _t0A51 = 0.e0;
    real _t0A52 = 0.1e1;
    real _t0A53 = 0.e0;
    vec4 _t0A54 = [_t0A50, _t0A51, _t0A52, _t0A53];
    real _t0A55 = 0.1e1;
    real _t0A56 = 0.e0;
    real _t0A57 = 0.e0;
    real _t0A58 = 0.e0;
    vec4 _t0A59 = [_t0A55, _t0A56, _t0A57, _t0A58];
    real _t0A5A = 0.e0;
    real _t0A5B = 0.1e1;
    real _t0A5C = 0.e0;
    real _t0A5D = 0.e0;
    vec4 _t0A5E = [_t0A5A, _t0A5B, _t0A5C, _t0A5D];
    real _t0A5F = 0.e0;
    real _t0A60 = 0.e0;
    real _t0A61 = 0.e0;
    real _t0A62 = 0.1e1;
    vec4 _t0A63 = [_t0A5F, _t0A60, _t0A61, _t0A62];
    tensor[4,4] _t0A64 = [_t0A54, _t0A59, _t0A5E, _t0A63];
    real _t0A65 = 0.1e1;
    real _t0A66 = 0.e0;
    real _t0A67 = 0.e0;
    real _t0A68 = 0.e0;
    vec4 _t0A69 = [_t0A65, _t0A66, _t0A67, _t0A68];
    real _t0A6A = 0.e0;
    real _t0A6B = 0.e0;
    real _t0A6C = -0.1e1;
    real _t0A6D = 0.e0;
    vec4 _t0A6E = [_t0A6A, _t0A6B, _t0A6C, _t0A6D];
    real _t0A6F = 0.e0;
    real _t0A70 = 0.1e1;
    real _t0A71 = 0.e0;
    real _t0A72 = 0.e0;
    vec4 _t0A73 = [_t0A6F, _t0A70, _t0A71, _t0A72];
    real _t0A74 = 0.e0;
    real _t0A75 = 0.e0;
    real _t0A76 = 0.e0;
    real _t0A77 = 0.1e1;
    vec4 _t0A78 = [_t0A74, _t0A75, _t0A76, _t0A77];
    tensor[4,4] _t0A79 = [_t0A69, _t0A6E, _t0A73, _t0A78];
    real _t0A7A = 0.1e1;
    real _t0A7B = 0.e0;
    real _t0A7C = 0.e0;
    real _t0A7D = 0.e0;
    vec4 _t0A7E = [_t0A7A, _t0A7B, _t0A7C, _t0A7D];
    real _t0A7F = 0.e0;
    real _t0A80 = 0.1e1;
    real _t0A81 = 0.e0;
    real _t0A82 = 0.e0;
    vec4 _t0A83 = [_t0A7F, _t0A80, _t0A81, _t0A82];
    real _t0A84 = 0.e0;
    real _t0A85 = 0.e0;
    real _t0A86 = 0.1e1;
    real _t0A87 = 0.e0;
    vec4 _t0A88 = [_t0A84, _t0A85, _t0A86, _t0A87];
    real _t0A89 = 0.e0;
    real _t0A8A = 0.e0;
    real _t0A8B = 0.e0;
    real _t0A8C = 0.1e1;
    vec4 _t0A8D = [_t0A89, _t0A8A, _t0A8B, _t0A8C];
    tensor[4,4] _t0A8E = [_t0A7E, _t0A83, _t0A88, _t0A8D];
    tensor[4,4][4] _t0A8F = {_t0A4F, _t0A64, _t0A79, _t0A8E};
    tensor[4,4][4][4] _t0A90 = {_t0990, _t09E5, _t0A3A, _t0A8F};
    real _t0A91 = time092E[1];
    int _t0A92 = prim $r2i01B7 (_t0A91);
    tensor[4,4][4] _t0A93 = prim $sub01C0<tensor[4,4][4]; %4> (_t0A90, _t0A92);
    real _t0A94 = time092E[1];
    int _t0A95 = prim $r2i01B7 (_t0A94);
    int[2] _t0A96 = func nextCell40932 (_t0A95, cellId092B, mesh092A);
    int _t0A97 = 1;
    int _t0A98 = prim $sub01C0<int; %2> (_t0A96, _t0A97);
    tensor[4,4] _t0A99 = prim $sub01C0<tensor[4,4]; %4> (_t0A93, _t0A98);
    real _t0A9A = time092E[0];
    vec3 _t0A9B = prim *0036<$[3]> (_t0A9A, dPos092D);
    vec3 _t0A9C = prim +0017<$[3]> (_t0A9B, refPos092C);
    real _t0A9D = _t0A9C[0];
    real _t0A9E = time092E[0];
    vec3 _t0A9F = prim *0036<$[3]> (_t0A9E, dPos092D);
    vec3 _t0AA0 = prim +0017<$[3]> (_t0A9F, refPos092C);
    real _t0AA1 = _t0AA0[1];
    real _t0AA2 = time092E[0];
    vec3 _t0AA3 = prim *0036<$[3]> (_t0AA2, dPos092D);
    vec3 _t0AA4 = prim +0017<$[3]> (_t0AA3, refPos092C);
    real _t0AA5 = _t0AA4[2];
    real _t0AA6 = 0.1e1;
    vec4 _t0AA7 = [_t0A9D, _t0AA1, _t0AA5, _t0AA6];
    vec4 _t0AA8 = prim •00CE<$[4,4]; $[4]; $[4]> (_t0A99, _t0AA7);
    real _t0AA9 = _t0AA8[0];
    real _t0AAA = 0.1e1;
    real _t0AAB = 0.e0;
    real _t0AAC = 0.e0;
    real _t0AAD = 0.e0;
    vec4 _t0AAE = [_t0AAA, _t0AAB, _t0AAC, _t0AAD];
    real _t0AAF = 0.e0;
    real _t0AB0 = 0.1e1;
    real _t0AB1 = 0.e0;
    real _t0AB2 = 0.e0;
    vec4 _t0AB3 = [_t0AAF, _t0AB0, _t0AB1, _t0AB2];
    real _t0AB4 = 0.e0;
    real _t0AB5 = 0.e0;
    real _t0AB6 = 0.1e1;
    real _t0AB7 = 0.e0;
    vec4 _t0AB8 = [_t0AB4, _t0AB5, _t0AB6, _t0AB7];
    real _t0AB9 = 0.971445146547e-16;
    real _t0ABA = 0.e0;
    real _t0ABB = 0.e0;
    real _t0ABC = 0.1e1;
    vec4 _t0ABD = [_t0AB9, _t0ABA, _t0ABB, _t0ABC];
    tensor[4,4] _t0ABE = [_t0AAE, _t0AB3, _t0AB8, _t0ABD];
    real _t0ABF = 0.57735026919e0;
    real _t0AC0 = 0.57735026919e0;
    real _t0AC1 = 0.57735026919e0;
    real _t0AC2 = -0.57735026919e0;
    vec4 _t0AC3 = [_t0ABF, _t0AC0, _t0AC1, _t0AC2];
    real _t0AC4 = -0.333333333333e0;
    real _t0AC5 = 0.666666666667e0;
    real _t0AC6 = -0.333333333333e0;
    real _t0AC7 = 0.333333333333e0;
    vec4 _t0AC8 = [_t0AC4, _t0AC5, _t0AC6, _t0AC7];
    real _t0AC9 = -0.333333333333e0;
    real _t0ACA = -0.333333333333e0;
    real _t0ACB = 0.666666666667e0;
    real _t0ACC = 0.333333333333e0;
    vec4 _t0ACD = [_t0AC9, _t0ACA, _t0ACB, _t0ACC];
    real _t0ACE = 0.971445146547e-16;
    real _t0ACF = 0.e0;
    real _t0AD0 = 0.e0;
    real _t0AD1 = 0.1e1;
    vec4 _t0AD2 = [_t0ACE, _t0ACF, _t0AD0, _t0AD1];
    tensor[4,4] _t0AD3 = [_t0AC3, _t0AC8, _t0ACD, _t0AD2];
    real _t0AD4 = -0.333333333333e0;
    real _t0AD5 = 0.666666666667e0;
    real _t0AD6 = -0.333333333333e0;
    real _t0AD7 = 0.333333333333e0;
    vec4 _t0AD8 = [_t0AD4, _t0AD5, _t0AD6, _t0AD7];
    real _t0AD9 = -0.57735026919e0;
    real _t0ADA = -0.57735026919e0;
    real _t0ADB = -0.57735026919e0;
    real _t0ADC = 0.57735026919e0;
    vec4 _t0ADD = [_t0AD9, _t0ADA, _t0ADB, _t0ADC];
    real _t0ADE = -0.333333333333e0;
    real _t0ADF = -0.333333333333e0;
    real _t0AE0 = 0.666666666667e0;
    real _t0AE1 = 0.333333333333e0;
    vec4 _t0AE2 = [_t0ADE, _t0ADF, _t0AE0, _t0AE1];
    real _t0AE3 = 0.971445146547e-16;
    real _t0AE4 = 0.e0;
    real _t0AE5 = 0.e0;
    real _t0AE6 = 0.1e1;
    vec4 _t0AE7 = [_t0AE3, _t0AE4, _t0AE5, _t0AE6];
    tensor[4,4] _t0AE8 = [_t0AD8, _t0ADD, _t0AE2, _t0AE7];
    real _t0AE9 = -0.333333333333e0;
    real _t0AEA = 0.666666666667e0;
    real _t0AEB = -0.333333333333e0;
    real _t0AEC = 0.333333333333e0;
    vec4 _t0AED = [_t0AE9, _t0AEA, _t0AEB, _t0AEC];
    real _t0AEE = -0.333333333333e0;
    real _t0AEF = -0.333333333333e0;
    real _t0AF0 = 0.666666666667e0;
    real _t0AF1 = 0.333333333333e0;
    vec4 _t0AF2 = [_t0AEE, _t0AEF, _t0AF0, _t0AF1];
    real _t0AF3 = 0.57735026919e0;
    real _t0AF4 = 0.57735026919e0;
    real _t0AF5 = 0.57735026919e0;
    real _t0AF6 = -0.57735026919e0;
    vec4 _t0AF7 = [_t0AF3, _t0AF4, _t0AF5, _t0AF6];
    real _t0AF8 = 0.971445146547e-16;
    real _t0AF9 = 0.e0;
    real _t0AFA = 0.e0;
    real _t0AFB = 0.1e1;
    vec4 _t0AFC = [_t0AF8, _t0AF9, _t0AFA, _t0AFB];
    tensor[4,4] _t0AFD = [_t0AED, _t0AF2, _t0AF7, _t0AFC];
    tensor[4,4][4] _t0AFE = {_t0ABE, _t0AD3, _t0AE8, _t0AFD};
    real _t0AFF = 0.57735026919e0;
    real _t0B00 = -0.1e1;
    real _t0B01 = -0.1e1;
    real _t0B02 = 0.1e1;
    vec4 _t0B03 = [_t0AFF, _t0B00, _t0B01, _t0B02];
    real _t0B04 = 0.57735026919e0;
    real _t0B05 = 0.1e1;
    real _t0B06 = 0.e0;
    real _t0B07 = 0.e0;
    vec4 _t0B08 = [_t0B04, _t0B05, _t0B06, _t0B07];
    real _t0B09 = 0.57735026919e0;
    real _t0B0A = 0.e0;
    real _t0B0B = 0.1e1;
    real _t0B0C = 0.e0;
    vec4 _t0B0D = [_t0B09, _t0B0A, _t0B0B, _t0B0C];
    real _t0B0E = 0.e0;
    real _t0B0F = 0.e0;
    real _t0B10 = 0.e0;
    real _t0B11 = 0.1e1;
    vec4 _t0B12 = [_t0B0E, _t0B0F, _t0B10, _t0B11];
    tensor[4,4] _t0B13 = [_t0B03, _t0B08, _t0B0D, _t0B12];
    real _t0B14 = 0.1e1;
    real _t0B15 = 0.e0;
    real _t0B16 = 0.e0;
    real _t0B17 = 0.e0;
    vec4 _t0B18 = [_t0B14, _t0B15, _t0B16, _t0B17];
    real _t0B19 = 0.e0;
    real _t0B1A = 0.1e1;
    real _t0B1B = 0.e0;
    real _t0B1C = 0.e0;
    vec4 _t0B1D = [_t0B19, _t0B1A, _t0B1B, _t0B1C];
    real _t0B1E = 0.e0;
    real _t0B1F = 0.e0;
    real _t0B20 = 0.1e1;
    real _t0B21 = 0.e0;
    vec4 _t0B22 = [_t0B1E, _t0B1F, _t0B20, _t0B21];
    real _t0B23 = 0.e0;
    real _t0B24 = 0.e0;
    real _t0B25 = 0.e0;
    real _t0B26 = 0.1e1;
    vec4 _t0B27 = [_t0B23, _t0B24, _t0B25, _t0B26];
    tensor[4,4] _t0B28 = [_t0B18, _t0B1D, _t0B22, _t0B27];
    real _t0B29 = 0.e0;
    real _t0B2A = 0.1e1;
    real _t0B2B = 0.e0;
    real _t0B2C = 0.e0;
    vec4 _t0B2D = [_t0B29, _t0B2A, _t0B2B, _t0B2C];
    real _t0B2E = -0.1e1;
    real _t0B2F = 0.e0;
    real _t0B30 = 0.e0;
    real _t0B31 = 0.e0;
    vec4 _t0B32 = [_t0B2E, _t0B2F, _t0B30, _t0B31];
    real _t0B33 = 0.e0;
    real _t0B34 = 0.e0;
    real _t0B35 = 0.1e1;
    real _t0B36 = 0.e0;
    vec4 _t0B37 = [_t0B33, _t0B34, _t0B35, _t0B36];
    real _t0B38 = 0.e0;
    real _t0B39 = 0.e0;
    real _t0B3A = 0.e0;
    real _t0B3B = 0.1e1;
    vec4 _t0B3C = [_t0B38, _t0B39, _t0B3A, _t0B3B];
    tensor[4,4] _t0B3D = [_t0B2D, _t0B32, _t0B37, _t0B3C];
    real _t0B3E = 0.e0;
    real _t0B3F = 0.1e1;
    real _t0B40 = 0.e0;
    real _t0B41 = 0.e0;
    vec4 _t0B42 = [_t0B3E, _t0B3F, _t0B40, _t0B41];
    real _t0B43 = 0.e0;
    real _t0B44 = 0.e0;
    real _t0B45 = 0.1e1;
    real _t0B46 = 0.e0;
    vec4 _t0B47 = [_t0B43, _t0B44, _t0B45, _t0B46];
    real _t0B48 = 0.1e1;
    real _t0B49 = 0.e0;
    real _t0B4A = 0.e0;
    real _t0B4B = 0.e0;
    vec4 _t0B4C = [_t0B48, _t0B49, _t0B4A, _t0B4B];
    real _t0B4D = 0.e0;
    real _t0B4E = 0.e0;
    real _t0B4F = 0.e0;
    real _t0B50 = 0.1e1;
    vec4 _t0B51 = [_t0B4D, _t0B4E, _t0B4F, _t0B50];
    tensor[4,4] _t0B52 = [_t0B42, _t0B47, _t0B4C, _t0B51];
    tensor[4,4][4] _t0B53 = {_t0B13, _t0B28, _t0B3D, _t0B52};
    real _t0B54 = -0.1e1;
    real _t0B55 = -0.57735026919e0;
    real _t0B56 = -0.1e1;
    real _t0B57 = 0.1e1;
    vec4 _t0B58 = [_t0B54, _t0B55, _t0B56, _t0B57];
    real _t0B59 = 0.1e1;
    real _t0B5A = -0.57735026919e0;
    real _t0B5B = 0.e0;
    real _t0B5C = 0.e0;
    vec4 _t0B5D = [_t0B59, _t0B5A, _t0B5B, _t0B5C];
    real _t0B5E = 0.e0;
    real _t0B5F = -0.57735026919e0;
    real _t0B60 = 0.1e1;
    real _t0B61 = 0.e0;
    vec4 _t0B62 = [_t0B5E, _t0B5F, _t0B60, _t0B61];
    real _t0B63 = 0.e0;
    real _t0B64 = 0.e0;
    real _t0B65 = 0.e0;
    real _t0B66 = 0.1e1;
    vec4 _t0B67 = [_t0B63, _t0B64, _t0B65, _t0B66];
    tensor[4,4] _t0B68 = [_t0B58, _t0B5D, _t0B62, _t0B67];
    real _t0B69 = 0.e0;
    real _t0B6A = -0.1e1;
    real _t0B6B = 0.e0;
    real _t0B6C = 0.e0;
    vec4 _t0B6D = [_t0B69, _t0B6A, _t0B6B, _t0B6C];
    real _t0B6E = 0.1e1;
    real _t0B6F = 0.e0;
    real _t0B70 = 0.e0;
    real _t0B71 = 0.e0;
    vec4 _t0B72 = [_t0B6E, _t0B6F, _t0B70, _t0B71];
    real _t0B73 = 0.e0;
    real _t0B74 = 0.e0;
    real _t0B75 = 0.1e1;
    real _t0B76 = 0.e0;
    vec4 _t0B77 = [_t0B73, _t0B74, _t0B75, _t0B76];
    real _t0B78 = 0.e0;
    real _t0B79 = 0.e0;
    real _t0B7A = 0.e0;
    real _t0B7B = 0.1e1;
    vec4 _t0B7C = [_t0B78, _t0B79, _t0B7A, _t0B7B];
    tensor[4,4] _t0B7D = [_t0B6D, _t0B72, _t0B77, _t0B7C];
    real _t0B7E = 0.1e1;
    real _t0B7F = 0.e0;
    real _t0B80 = 0.e0;
    real _t0B81 = 0.e0;
    vec4 _t0B82 = [_t0B7E, _t0B7F, _t0B80, _t0B81];
    real _t0B83 = 0.e0;
    real _t0B84 = 0.1e1;
    real _t0B85 = 0.e0;
    real _t0B86 = 0.e0;
    vec4 _t0B87 = [_t0B83, _t0B84, _t0B85, _t0B86];
    real _t0B88 = 0.e0;
    real _t0B89 = 0.e0;
    real _t0B8A = 0.1e1;
    real _t0B8B = 0.e0;
    vec4 _t0B8C = [_t0B88, _t0B89, _t0B8A, _t0B8B];
    real _t0B8D = 0.e0;
    real _t0B8E = 0.e0;
    real _t0B8F = 0.e0;
    real _t0B90 = 0.1e1;
    vec4 _t0B91 = [_t0B8D, _t0B8E, _t0B8F, _t0B90];
    tensor[4,4] _t0B92 = [_t0B82, _t0B87, _t0B8C, _t0B91];
    real _t0B93 = 0.1e1;
    real _t0B94 = 0.e0;
    real _t0B95 = 0.e0;
    real _t0B96 = 0.e0;
    vec4 _t0B97 = [_t0B93, _t0B94, _t0B95, _t0B96];
    real _t0B98 = 0.e0;
    real _t0B99 = 0.e0;
    real _t0B9A = 0.1e1;
    real _t0B9B = 0.e0;
    vec4 _t0B9C = [_t0B98, _t0B99, _t0B9A, _t0B9B];
    real _t0B9D = 0.e0;
    real _t0B9E = -0.1e1;
    real _t0B9F = 0.e0;
    real _t0BA0 = 0.e0;
    vec4 _t0BA1 = [_t0B9D, _t0B9E, _t0B9F, _t0BA0];
    real _t0BA2 = 0.e0;
    real _t0BA3 = 0.e0;
    real _t0BA4 = 0.e0;
    real _t0BA5 = 0.1e1;
    vec4 _t0BA6 = [_t0BA2, _t0BA3, _t0BA4, _t0BA5];
    tensor[4,4] _t0BA7 = [_t0B97, _t0B9C, _t0BA1, _t0BA6];
    tensor[4,4][4] _t0BA8 = {_t0B68, _t0B7D, _t0B92, _t0BA7};
    real _t0BA9 = -0.1e1;
    real _t0BAA = -0.1e1;
    real _t0BAB = 0.57735026919e0;
    real _t0BAC = 0.1e1;
    vec4 _t0BAD = [_t0BA9, _t0BAA, _t0BAB, _t0BAC];
    real _t0BAE = 0.1e1;
    real _t0BAF = 0.e0;
    real _t0BB0 = 0.57735026919e0;
    real _t0BB1 = 0.e0;
    vec4 _t0BB2 = [_t0BAE, _t0BAF, _t0BB0, _t0BB1];
    real _t0BB3 = 0.e0;
    real _t0BB4 = 0.1e1;
    real _t0BB5 = 0.57735026919e0;
    real _t0BB6 = 0.e0;
    vec4 _t0BB7 = [_t0BB3, _t0BB4, _t0BB5, _t0BB6];
    real _t0BB8 = 0.e0;
    real _t0BB9 = 0.e0;
    real _t0BBA = 0.e0;
    real _t0BBB = 0.1e1;
    vec4 _t0BBC = [_t0BB8, _t0BB9, _t0BBA, _t0BBB];
    tensor[4,4] _t0BBD = [_t0BAD, _t0BB2, _t0BB7, _t0BBC];
    real _t0BBE = 0.e0;
    real _t0BBF = 0.e0;
    real _t0BC0 = 0.1e1;
    real _t0BC1 = 0.e0;
    vec4 _t0BC2 = [_t0BBE, _t0BBF, _t0BC0, _t0BC1];
    real _t0BC3 = 0.1e1;
    real _t0BC4 = 0.e0;
    real _t0BC5 = 0.e0;
    real _t0BC6 = 0.e0;
    vec4 _t0BC7 = [_t0BC3, _t0BC4, _t0BC5, _t0BC6];
    real _t0BC8 = 0.e0;
    real _t0BC9 = 0.1e1;
    real _t0BCA = 0.e0;
    real _t0BCB = 0.e0;
    vec4 _t0BCC = [_t0BC8, _t0BC9, _t0BCA, _t0BCB];
    real _t0BCD = 0.e0;
    real _t0BCE = 0.e0;
    real _t0BCF = 0.e0;
    real _t0BD0 = 0.1e1;
    vec4 _t0BD1 = [_t0BCD, _t0BCE, _t0BCF, _t0BD0];
    tensor[4,4] _t0BD2 = [_t0BC2, _t0BC7, _t0BCC, _t0BD1];
    real _t0BD3 = 0.1e1;
    real _t0BD4 = 0.e0;
    real _t0BD5 = 0.e0;
    real _t0BD6 = 0.e0;
    vec4 _t0BD7 = [_t0BD3, _t0BD4, _t0BD5, _t0BD6];
    real _t0BD8 = 0.e0;
    real _t0BD9 = 0.e0;
    real _t0BDA = -0.1e1;
    real _t0BDB = 0.e0;
    vec4 _t0BDC = [_t0BD8, _t0BD9, _t0BDA, _t0BDB];
    real _t0BDD = 0.e0;
    real _t0BDE = 0.1e1;
    real _t0BDF = 0.e0;
    real _t0BE0 = 0.e0;
    vec4 _t0BE1 = [_t0BDD, _t0BDE, _t0BDF, _t0BE0];
    real _t0BE2 = 0.e0;
    real _t0BE3 = 0.e0;
    real _t0BE4 = 0.e0;
    real _t0BE5 = 0.1e1;
    vec4 _t0BE6 = [_t0BE2, _t0BE3, _t0BE4, _t0BE5];
    tensor[4,4] _t0BE7 = [_t0BD7, _t0BDC, _t0BE1, _t0BE6];
    real _t0BE8 = 0.1e1;
    real _t0BE9 = 0.e0;
    real _t0BEA = 0.e0;
    real _t0BEB = 0.e0;
    vec4 _t0BEC = [_t0BE8, _t0BE9, _t0BEA, _t0BEB];
    real _t0BED = 0.e0;
    real _t0BEE = 0.1e1;
    real _t0BEF = 0.e0;
    real _t0BF0 = 0.e0;
    vec4 _t0BF1 = [_t0BED, _t0BEE, _t0BEF, _t0BF0];
    real _t0BF2 = 0.e0;
    real _t0BF3 = 0.e0;
    real _t0BF4 = 0.1e1;
    real _t0BF5 = 0.e0;
    vec4 _t0BF6 = [_t0BF2, _t0BF3, _t0BF4, _t0BF5];
    real _t0BF7 = 0.e0;
    real _t0BF8 = 0.e0;
    real _t0BF9 = 0.e0;
    real _t0BFA = 0.1e1;
    vec4 _t0BFB = [_t0BF7, _t0BF8, _t0BF9, _t0BFA];
    tensor[4,4] _t0BFC = [_t0BEC, _t0BF1, _t0BF6, _t0BFB];
    tensor[4,4][4] _t0BFD = {_t0BBD, _t0BD2, _t0BE7, _t0BFC};
    tensor[4,4][4][4] _t0BFE = {_t0AFE, _t0B53, _t0BA8, _t0BFD};
    real _t0BFF = time092E[1];
    int _t0C00 = prim $r2i01B7 (_t0BFF);
    tensor[4,4][4] _t0C01 = prim $sub01C0<tensor[4,4][4]; %4> (_t0BFE, _t0C00);
    real _t0C02 = time092E[1];
    int _t0C03 = prim $r2i01B7 (_t0C02);
    int[2] _t0C04 = func nextCell40932 (_t0C03, cellId092B, mesh092A);
    int _t0C05 = 1;
    int _t0C06 = prim $sub01C0<int; %2> (_t0C04, _t0C05);
    tensor[4,4] _t0C07 = prim $sub01C0<tensor[4,4]; %4> (_t0C01, _t0C06);
    real _t0C08 = time092E[0];
    vec3 _t0C09 = prim *0036<$[3]> (_t0C08, dPos092D);
    vec3 _t0C0A = prim +0017<$[3]> (_t0C09, refPos092C);
    real _t0C0B = _t0C0A[0];
    real _t0C0C = time092E[0];
    vec3 _t0C0D = prim *0036<$[3]> (_t0C0C, dPos092D);
    vec3 _t0C0E = prim +0017<$[3]> (_t0C0D, refPos092C);
    real _t0C0F = _t0C0E[1];
    real _t0C10 = time092E[0];
    vec3 _t0C11 = prim *0036<$[3]> (_t0C10, dPos092D);
    vec3 _t0C12 = prim +0017<$[3]> (_t0C11, refPos092C);
    real _t0C13 = _t0C12[2];
    real _t0C14 = 0.1e1;
    vec4 _t0C15 = [_t0C0B, _t0C0F, _t0C13, _t0C14];
    vec4 _t0C16 = prim •00CE<$[4,4]; $[4]; $[4]> (_t0C07, _t0C15);
    real _t0C17 = _t0C16[1];
    real _t0C18 = 0.1e1;
    real _t0C19 = 0.e0;
    real _t0C1A = 0.e0;
    real _t0C1B = 0.e0;
    vec4 _t0C1C = [_t0C18, _t0C19, _t0C1A, _t0C1B];
    real _t0C1D = 0.e0;
    real _t0C1E = 0.1e1;
    real _t0C1F = 0.e0;
    real _t0C20 = 0.e0;
    vec4 _t0C21 = [_t0C1D, _t0C1E, _t0C1F, _t0C20];
    real _t0C22 = 0.e0;
    real _t0C23 = 0.e0;
    real _t0C24 = 0.1e1;
    real _t0C25 = 0.e0;
    vec4 _t0C26 = [_t0C22, _t0C23, _t0C24, _t0C25];
    real _t0C27 = 0.971445146547e-16;
    real _t0C28 = 0.e0;
    real _t0C29 = 0.e0;
    real _t0C2A = 0.1e1;
    vec4 _t0C2B = [_t0C27, _t0C28, _t0C29, _t0C2A];
    tensor[4,4] _t0C2C = [_t0C1C, _t0C21, _t0C26, _t0C2B];
    real _t0C2D = 0.57735026919e0;
    real _t0C2E = 0.57735026919e0;
    real _t0C2F = 0.57735026919e0;
    real _t0C30 = -0.57735026919e0;
    vec4 _t0C31 = [_t0C2D, _t0C2E, _t0C2F, _t0C30];
    real _t0C32 = -0.333333333333e0;
    real _t0C33 = 0.666666666667e0;
    real _t0C34 = -0.333333333333e0;
    real _t0C35 = 0.333333333333e0;
    vec4 _t0C36 = [_t0C32, _t0C33, _t0C34, _t0C35];
    real _t0C37 = -0.333333333333e0;
    real _t0C38 = -0.333333333333e0;
    real _t0C39 = 0.666666666667e0;
    real _t0C3A = 0.333333333333e0;
    vec4 _t0C3B = [_t0C37, _t0C38, _t0C39, _t0C3A];
    real _t0C3C = 0.971445146547e-16;
    real _t0C3D = 0.e0;
    real _t0C3E = 0.e0;
    real _t0C3F = 0.1e1;
    vec4 _t0C40 = [_t0C3C, _t0C3D, _t0C3E, _t0C3F];
    tensor[4,4] _t0C41 = [_t0C31, _t0C36, _t0C3B, _t0C40];
    real _t0C42 = -0.333333333333e0;
    real _t0C43 = 0.666666666667e0;
    real _t0C44 = -0.333333333333e0;
    real _t0C45 = 0.333333333333e0;
    vec4 _t0C46 = [_t0C42, _t0C43, _t0C44, _t0C45];
    real _t0C47 = -0.57735026919e0;
    real _t0C48 = -0.57735026919e0;
    real _t0C49 = -0.57735026919e0;
    real _t0C4A = 0.57735026919e0;
    vec4 _t0C4B = [_t0C47, _t0C48, _t0C49, _t0C4A];
    real _t0C4C = -0.333333333333e0;
    real _t0C4D = -0.333333333333e0;
    real _t0C4E = 0.666666666667e0;
    real _t0C4F = 0.333333333333e0;
    vec4 _t0C50 = [_t0C4C, _t0C4D, _t0C4E, _t0C4F];
    real _t0C51 = 0.971445146547e-16;
    real _t0C52 = 0.e0;
    real _t0C53 = 0.e0;
    real _t0C54 = 0.1e1;
    vec4 _t0C55 = [_t0C51, _t0C52, _t0C53, _t0C54];
    tensor[4,4] _t0C56 = [_t0C46, _t0C4B, _t0C50, _t0C55];
    real _t0C57 = -0.333333333333e0;
    real _t0C58 = 0.666666666667e0;
    real _t0C59 = -0.333333333333e0;
    real _t0C5A = 0.333333333333e0;
    vec4 _t0C5B = [_t0C57, _t0C58, _t0C59, _t0C5A];
    real _t0C5C = -0.333333333333e0;
    real _t0C5D = -0.333333333333e0;
    real _t0C5E = 0.666666666667e0;
    real _t0C5F = 0.333333333333e0;
    vec4 _t0C60 = [_t0C5C, _t0C5D, _t0C5E, _t0C5F];
    real _t0C61 = 0.57735026919e0;
    real _t0C62 = 0.57735026919e0;
    real _t0C63 = 0.57735026919e0;
    real _t0C64 = -0.57735026919e0;
    vec4 _t0C65 = [_t0C61, _t0C62, _t0C63, _t0C64];
    real _t0C66 = 0.971445146547e-16;
    real _t0C67 = 0.e0;
    real _t0C68 = 0.e0;
    real _t0C69 = 0.1e1;
    vec4 _t0C6A = [_t0C66, _t0C67, _t0C68, _t0C69];
    tensor[4,4] _t0C6B = [_t0C5B, _t0C60, _t0C65, _t0C6A];
    tensor[4,4][4] _t0C6C = {_t0C2C, _t0C41, _t0C56, _t0C6B};
    real _t0C6D = 0.57735026919e0;
    real _t0C6E = -0.1e1;
    real _t0C6F = -0.1e1;
    real _t0C70 = 0.1e1;
    vec4 _t0C71 = [_t0C6D, _t0C6E, _t0C6F, _t0C70];
    real _t0C72 = 0.57735026919e0;
    real _t0C73 = 0.1e1;
    real _t0C74 = 0.e0;
    real _t0C75 = 0.e0;
    vec4 _t0C76 = [_t0C72, _t0C73, _t0C74, _t0C75];
    real _t0C77 = 0.57735026919e0;
    real _t0C78 = 0.e0;
    real _t0C79 = 0.1e1;
    real _t0C7A = 0.e0;
    vec4 _t0C7B = [_t0C77, _t0C78, _t0C79, _t0C7A];
    real _t0C7C = 0.e0;
    real _t0C7D = 0.e0;
    real _t0C7E = 0.e0;
    real _t0C7F = 0.1e1;
    vec4 _t0C80 = [_t0C7C, _t0C7D, _t0C7E, _t0C7F];
    tensor[4,4] _t0C81 = [_t0C71, _t0C76, _t0C7B, _t0C80];
    real _t0C82 = 0.1e1;
    real _t0C83 = 0.e0;
    real _t0C84 = 0.e0;
    real _t0C85 = 0.e0;
    vec4 _t0C86 = [_t0C82, _t0C83, _t0C84, _t0C85];
    real _t0C87 = 0.e0;
    real _t0C88 = 0.1e1;
    real _t0C89 = 0.e0;
    real _t0C8A = 0.e0;
    vec4 _t0C8B = [_t0C87, _t0C88, _t0C89, _t0C8A];
    real _t0C8C = 0.e0;
    real _t0C8D = 0.e0;
    real _t0C8E = 0.1e1;
    real _t0C8F = 0.e0;
    vec4 _t0C90 = [_t0C8C, _t0C8D, _t0C8E, _t0C8F];
    real _t0C91 = 0.e0;
    real _t0C92 = 0.e0;
    real _t0C93 = 0.e0;
    real _t0C94 = 0.1e1;
    vec4 _t0C95 = [_t0C91, _t0C92, _t0C93, _t0C94];
    tensor[4,4] _t0C96 = [_t0C86, _t0C8B, _t0C90, _t0C95];
    real _t0C97 = 0.e0;
    real _t0C98 = 0.1e1;
    real _t0C99 = 0.e0;
    real _t0C9A = 0.e0;
    vec4 _t0C9B = [_t0C97, _t0C98, _t0C99, _t0C9A];
    real _t0C9C = -0.1e1;
    real _t0C9D = 0.e0;
    real _t0C9E = 0.e0;
    real _t0C9F = 0.e0;
    vec4 _t0CA0 = [_t0C9C, _t0C9D, _t0C9E, _t0C9F];
    real _t0CA1 = 0.e0;
    real _t0CA2 = 0.e0;
    real _t0CA3 = 0.1e1;
    real _t0CA4 = 0.e0;
    vec4 _t0CA5 = [_t0CA1, _t0CA2, _t0CA3, _t0CA4];
    real _t0CA6 = 0.e0;
    real _t0CA7 = 0.e0;
    real _t0CA8 = 0.e0;
    real _t0CA9 = 0.1e1;
    vec4 _t0CAA = [_t0CA6, _t0CA7, _t0CA8, _t0CA9];
    tensor[4,4] _t0CAB = [_t0C9B, _t0CA0, _t0CA5, _t0CAA];
    real _t0CAC = 0.e0;
    real _t0CAD = 0.1e1;
    real _t0CAE = 0.e0;
    real _t0CAF = 0.e0;
    vec4 _t0CB0 = [_t0CAC, _t0CAD, _t0CAE, _t0CAF];
    real _t0CB1 = 0.e0;
    real _t0CB2 = 0.e0;
    real _t0CB3 = 0.1e1;
    real _t0CB4 = 0.e0;
    vec4 _t0CB5 = [_t0CB1, _t0CB2, _t0CB3, _t0CB4];
    real _t0CB6 = 0.1e1;
    real _t0CB7 = 0.e0;
    real _t0CB8 = 0.e0;
    real _t0CB9 = 0.e0;
    vec4 _t0CBA = [_t0CB6, _t0CB7, _t0CB8, _t0CB9];
    real _t0CBB = 0.e0;
    real _t0CBC = 0.e0;
    real _t0CBD = 0.e0;
    real _t0CBE = 0.1e1;
    vec4 _t0CBF = [_t0CBB, _t0CBC, _t0CBD, _t0CBE];
    tensor[4,4] _t0CC0 = [_t0CB0, _t0CB5, _t0CBA, _t0CBF];
    tensor[4,4][4] _t0CC1 = {_t0C81, _t0C96, _t0CAB, _t0CC0};
    real _t0CC2 = -0.1e1;
    real _t0CC3 = -0.57735026919e0;
    real _t0CC4 = -0.1e1;
    real _t0CC5 = 0.1e1;
    vec4 _t0CC6 = [_t0CC2, _t0CC3, _t0CC4, _t0CC5];
    real _t0CC7 = 0.1e1;
    real _t0CC8 = -0.57735026919e0;
    real _t0CC9 = 0.e0;
    real _t0CCA = 0.e0;
    vec4 _t0CCB = [_t0CC7, _t0CC8, _t0CC9, _t0CCA];
    real _t0CCC = 0.e0;
    real _t0CCD = -0.57735026919e0;
    real _t0CCE = 0.1e1;
    real _t0CCF = 0.e0;
    vec4 _t0CD0 = [_t0CCC, _t0CCD, _t0CCE, _t0CCF];
    real _t0CD1 = 0.e0;
    real _t0CD2 = 0.e0;
    real _t0CD3 = 0.e0;
    real _t0CD4 = 0.1e1;
    vec4 _t0CD5 = [_t0CD1, _t0CD2, _t0CD3, _t0CD4];
    tensor[4,4] _t0CD6 = [_t0CC6, _t0CCB, _t0CD0, _t0CD5];
    real _t0CD7 = 0.e0;
    real _t0CD8 = -0.1e1;
    real _t0CD9 = 0.e0;
    real _t0CDA = 0.e0;
    vec4 _t0CDB = [_t0CD7, _t0CD8, _t0CD9, _t0CDA];
    real _t0CDC = 0.1e1;
    real _t0CDD = 0.e0;
    real _t0CDE = 0.e0;
    real _t0CDF = 0.e0;
    vec4 _t0CE0 = [_t0CDC, _t0CDD, _t0CDE, _t0CDF];
    real _t0CE1 = 0.e0;
    real _t0CE2 = 0.e0;
    real _t0CE3 = 0.1e1;
    real _t0CE4 = 0.e0;
    vec4 _t0CE5 = [_t0CE1, _t0CE2, _t0CE3, _t0CE4];
    real _t0CE6 = 0.e0;
    real _t0CE7 = 0.e0;
    real _t0CE8 = 0.e0;
    real _t0CE9 = 0.1e1;
    vec4 _t0CEA = [_t0CE6, _t0CE7, _t0CE8, _t0CE9];
    tensor[4,4] _t0CEB = [_t0CDB, _t0CE0, _t0CE5, _t0CEA];
    real _t0CEC = 0.1e1;
    real _t0CED = 0.e0;
    real _t0CEE = 0.e0;
    real _t0CEF = 0.e0;
    vec4 _t0CF0 = [_t0CEC, _t0CED, _t0CEE, _t0CEF];
    real _t0CF1 = 0.e0;
    real _t0CF2 = 0.1e1;
    real _t0CF3 = 0.e0;
    real _t0CF4 = 0.e0;
    vec4 _t0CF5 = [_t0CF1, _t0CF2, _t0CF3, _t0CF4];
    real _t0CF6 = 0.e0;
    real _t0CF7 = 0.e0;
    real _t0CF8 = 0.1e1;
    real _t0CF9 = 0.e0;
    vec4 _t0CFA = [_t0CF6, _t0CF7, _t0CF8, _t0CF9];
    real _t0CFB = 0.e0;
    real _t0CFC = 0.e0;
    real _t0CFD = 0.e0;
    real _t0CFE = 0.1e1;
    vec4 _t0CFF = [_t0CFB, _t0CFC, _t0CFD, _t0CFE];
    tensor[4,4] _t0D00 = [_t0CF0, _t0CF5, _t0CFA, _t0CFF];
    real _t0D01 = 0.1e1;
    real _t0D02 = 0.e0;
    real _t0D03 = 0.e0;
    real _t0D04 = 0.e0;
    vec4 _t0D05 = [_t0D01, _t0D02, _t0D03, _t0D04];
    real _t0D06 = 0.e0;
    real _t0D07 = 0.e0;
    real _t0D08 = 0.1e1;
    real _t0D09 = 0.e0;
    vec4 _t0D0A = [_t0D06, _t0D07, _t0D08, _t0D09];
    real _t0D0B = 0.e0;
    real _t0D0C = -0.1e1;
    real _t0D0D = 0.e0;
    real _t0D0E = 0.e0;
    vec4 _t0D0F = [_t0D0B, _t0D0C, _t0D0D, _t0D0E];
    real _t0D10 = 0.e0;
    real _t0D11 = 0.e0;
    real _t0D12 = 0.e0;
    real _t0D13 = 0.1e1;
    vec4 _t0D14 = [_t0D10, _t0D11, _t0D12, _t0D13];
    tensor[4,4] _t0D15 = [_t0D05, _t0D0A, _t0D0F, _t0D14];
    tensor[4,4][4] _t0D16 = {_t0CD6, _t0CEB, _t0D00, _t0D15};
    real _t0D17 = -0.1e1;
    real _t0D18 = -0.1e1;
    real _t0D19 = 0.57735026919e0;
    real _t0D1A = 0.1e1;
    vec4 _t0D1B = [_t0D17, _t0D18, _t0D19, _t0D1A];
    real _t0D1C = 0.1e1;
    real _t0D1D = 0.e0;
    real _t0D1E = 0.57735026919e0;
    real _t0D1F = 0.e0;
    vec4 _t0D20 = [_t0D1C, _t0D1D, _t0D1E, _t0D1F];
    real _t0D21 = 0.e0;
    real _t0D22 = 0.1e1;
    real _t0D23 = 0.57735026919e0;
    real _t0D24 = 0.e0;
    vec4 _t0D25 = [_t0D21, _t0D22, _t0D23, _t0D24];
    real _t0D26 = 0.e0;
    real _t0D27 = 0.e0;
    real _t0D28 = 0.e0;
    real _t0D29 = 0.1e1;
    vec4 _t0D2A = [_t0D26, _t0D27, _t0D28, _t0D29];
    tensor[4,4] _t0D2B = [_t0D1B, _t0D20, _t0D25, _t0D2A];
    real _t0D2C = 0.e0;
    real _t0D2D = 0.e0;
    real _t0D2E = 0.1e1;
    real _t0D2F = 0.e0;
    vec4 _t0D30 = [_t0D2C, _t0D2D, _t0D2E, _t0D2F];
    real _t0D31 = 0.1e1;
    real _t0D32 = 0.e0;
    real _t0D33 = 0.e0;
    real _t0D34 = 0.e0;
    vec4 _t0D35 = [_t0D31, _t0D32, _t0D33, _t0D34];
    real _t0D36 = 0.e0;
    real _t0D37 = 0.1e1;
    real _t0D38 = 0.e0;
    real _t0D39 = 0.e0;
    vec4 _t0D3A = [_t0D36, _t0D37, _t0D38, _t0D39];
    real _t0D3B = 0.e0;
    real _t0D3C = 0.e0;
    real _t0D3D = 0.e0;
    real _t0D3E = 0.1e1;
    vec4 _t0D3F = [_t0D3B, _t0D3C, _t0D3D, _t0D3E];
    tensor[4,4] _t0D40 = [_t0D30, _t0D35, _t0D3A, _t0D3F];
    real _t0D41 = 0.1e1;
    real _t0D42 = 0.e0;
    real _t0D43 = 0.e0;
    real _t0D44 = 0.e0;
    vec4 _t0D45 = [_t0D41, _t0D42, _t0D43, _t0D44];
    real _t0D46 = 0.e0;
    real _t0D47 = 0.e0;
    real _t0D48 = -0.1e1;
    real _t0D49 = 0.e0;
    vec4 _t0D4A = [_t0D46, _t0D47, _t0D48, _t0D49];
    real _t0D4B = 0.e0;
    real _t0D4C = 0.1e1;
    real _t0D4D = 0.e0;
    real _t0D4E = 0.e0;
    vec4 _t0D4F = [_t0D4B, _t0D4C, _t0D4D, _t0D4E];
    real _t0D50 = 0.e0;
    real _t0D51 = 0.e0;
    real _t0D52 = 0.e0;
    real _t0D53 = 0.1e1;
    vec4 _t0D54 = [_t0D50, _t0D51, _t0D52, _t0D53];
    tensor[4,4] _t0D55 = [_t0D45, _t0D4A, _t0D4F, _t0D54];
    real _t0D56 = 0.1e1;
    real _t0D57 = 0.e0;
    real _t0D58 = 0.e0;
    real _t0D59 = 0.e0;
    vec4 _t0D5A = [_t0D56, _t0D57, _t0D58, _t0D59];
    real _t0D5B = 0.e0;
    real _t0D5C = 0.1e1;
    real _t0D5D = 0.e0;
    real _t0D5E = 0.e0;
    vec4 _t0D5F = [_t0D5B, _t0D5C, _t0D5D, _t0D5E];
    real _t0D60 = 0.e0;
    real _t0D61 = 0.e0;
    real _t0D62 = 0.1e1;
    real _t0D63 = 0.e0;
    vec4 _t0D64 = [_t0D60, _t0D61, _t0D62, _t0D63];
    real _t0D65 = 0.e0;
    real _t0D66 = 0.e0;
    real _t0D67 = 0.e0;
    real _t0D68 = 0.1e1;
    vec4 _t0D69 = [_t0D65, _t0D66, _t0D67, _t0D68];
    tensor[4,4] _t0D6A = [_t0D5A, _t0D5F, _t0D64, _t0D69];
    tensor[4,4][4] _t0D6B = {_t0D2B, _t0D40, _t0D55, _t0D6A};
    tensor[4,4][4][4] _t0D6C = {_t0C6C, _t0CC1, _t0D16, _t0D6B};
    real _t0D6D = time092E[1];
    int _t0D6E = prim $r2i01B7 (_t0D6D);
    tensor[4,4][4] _t0D6F = prim $sub01C0<tensor[4,4][4]; %4> (_t0D6C, _t0D6E);
    real _t0D70 = time092E[1];
    int _t0D71 = prim $r2i01B7 (_t0D70);
    int[2] _t0D72 = func nextCell40932 (_t0D71, cellId092B, mesh092A);
    int _t0D73 = 1;
    int _t0D74 = prim $sub01C0<int; %2> (_t0D72, _t0D73);
    tensor[4,4] _t0D75 = prim $sub01C0<tensor[4,4]; %4> (_t0D6F, _t0D74);
    real _t0D76 = time092E[0];
    vec3 _t0D77 = prim *0036<$[3]> (_t0D76, dPos092D);
    vec3 _t0D78 = prim +0017<$[3]> (_t0D77, refPos092C);
    real _t0D79 = _t0D78[0];
    real _t0D7A = time092E[0];
    vec3 _t0D7B = prim *0036<$[3]> (_t0D7A, dPos092D);
    vec3 _t0D7C = prim +0017<$[3]> (_t0D7B, refPos092C);
    real _t0D7D = _t0D7C[1];
    real _t0D7E = time092E[0];
    vec3 _t0D7F = prim *0036<$[3]> (_t0D7E, dPos092D);
    vec3 _t0D80 = prim +0017<$[3]> (_t0D7F, refPos092C);
    real _t0D81 = _t0D80[2];
    real _t0D82 = 0.1e1;
    vec4 _t0D83 = [_t0D79, _t0D7D, _t0D81, _t0D82];
    vec4 _t0D84 = prim •00CE<$[4,4]; $[4]; $[4]> (_t0D75, _t0D83);
    real _t0D85 = _t0D84[2];
    vec3 _t0D86 = [_t0AA9, _t0C17, _t0D85];
    real _t0D87 = time092E[1];
    int _t0D88 = prim $r2i01B7 (_t0D87);
    int[2] _t0D89 = func nextCell40932 (_t0D88, cellId092B, mesh092A);
    int _t0D8A = 1;
    int _t0D8B = prim $sub01C0<int; %2> (_t0D89, _t0D8A);
    Femdata: MeshPos _t0D8C = extractFemItemN((mesh092A, _t093B, _t0D86, _t0D8B),RefBuild(Mesh),);
    return _t0D8C;
  } else {
    real _t0D8D = time092E[0];
    vec3 _t0D8E = prim *0036<$[3]> (_t0D8D, dPos092D);
    vec3 _t0D8F = prim +0017<$[3]> (_t0D8E, refPos092C);
    Femdata: MeshPos _t0D90 = extractFemItemN((mesh092A, _t0D8F),InvalidBuildBoundary(MeshPos),);
    return _t0D90;
  }
}
function int[2]#6 nextCell40932 (int faceIdx0D91, int cell0D92, Femdata: Mesh mesh0D93)
{
  int _t0D94 = -1;
  bool _t0D95 = prim ==0082 (faceIdx0D91, _t0D94);
  if _t0D95 {
    int _t0D96 = -1;
    int _t0D97 = -1;
    int[2] _t0D98 = {_t0D96, _t0D97};
    return _t0D98;
  } else {
    int _t0D99 = 8;
    int _t0D9A = prim *0033 (cell0D92, _t0D99);
    int _t0D9B = 2;
    int _t0D9C = prim *0033 (faceIdx0D91, _t0D9B);
    int _t0D9D = prim +0015 (_t0D9A, _t0D9C);
    int[2] _t0D9E = extractFemItemN((mesh0D93, _t0D9D),CellFaceCell(Mesh),);
    return _t0D9E;
  }
}
function vec2#0 _enter0D9F (vec3 refPos0DA0, vec3 dPos0DA1)
{
  real time0DA2 = +inf;
  int face0DA3 = -1;
  real faceTime0DA4 = -inf;
  real _t0DA5 = 0.57735026919e0;
  real _t0DA6 = 0.57735026919e0;
  real _t0DA7 = 0.57735026919e0;
  real _t0DA8 = 0.57735026919e0;
  vec3 _t0DA9 = [_t0DA6, _t0DA7, _t0DA8];
  real _t0DAA = prim •00CE<$[3]; $[3]; $[]> (_t0DA9, refPos0DA0);
  real _t0DAB = prim -0026<$[]> (_t0DA5, _t0DAA);
  real _t0DAC = 0.57735026919e0;
  real _t0DAD = 0.57735026919e0;
  real _t0DAE = 0.57735026919e0;
  vec3 _t0DAF = [_t0DAC, _t0DAD, _t0DAE];
  real _t0DB0 = prim •00CE<$[3]; $[3]; $[]> (_t0DAF, dPos0DA1);
  real _t0DB1 = prim /0055 (_t0DAB, _t0DB0);
  real _t0DB2 = -0.1e-7;
  bool _t0DB3 = prim >=007E (_t0DB1, _t0DB2);
  real _t0DB4 = 0.57735026919e0;
  real _t0DB5 = 0.57735026919e0;
  real _t0DB6 = 0.57735026919e0;
  real _t0DB7 = 0.57735026919e0;
  vec3 _t0DB8 = [_t0DB5, _t0DB6, _t0DB7];
  real _t0DB9 = prim •00CE<$[3]; $[3]; $[]> (_t0DB8, refPos0DA0);
  real _t0DBA = prim -0026<$[]> (_t0DB4, _t0DB9);
  real _t0DBB = 0.57735026919e0;
  real _t0DBC = 0.57735026919e0;
  real _t0DBD = 0.57735026919e0;
  vec3 _t0DBE = [_t0DBB, _t0DBC, _t0DBD];
  real _t0DBF = prim •00CE<$[3]; $[3]; $[]> (_t0DBE, dPos0DA1);
  real _t0DC0 = prim /0055 (_t0DBA, _t0DBF);
  bool _t0DC1 = prim >0080 (time0DA2, _t0DC0);
  real _t0DC2 = 0.57735026919e0;
  real _t0DC3 = 0.57735026919e0;
  real _t0DC4 = 0.57735026919e0;
  vec3 _t0DC5 = [_t0DC2, _t0DC3, _t0DC4];
  real _t0DC6 = prim •00CE<$[3]; $[3]; $[]> (_t0DC5, dPos0DA1);
  real _t0DC7 = prim |()|00B5<$[]> (_t0DC6);
  real _t0DC8 = 0.1e-7;
  bool _t0DC9 = prim >=007E (_t0DC7, _t0DC8);
  bool _t0DCA = prim $and01C4 (_t0DC1, _t0DC9);
  bool _t0DCB = prim $and01C4 (_t0DB3, _t0DCA);
  if _t0DCB {
    real _t0DCC = 0.1e1;
    real _t0DCD = 0.1e-7;
    real _t0DCE = prim +0017<$[]> (_t0DCC, _t0DCD);
    real _t0DCF = 0.1e1;
    real _t0DD0 = 0.1e1;
    real _t0DD1 = 0.1e1;
    vec3 _t0DD2 = [_t0DCF, _t0DD0, _t0DD1];
    real _t0DD3 = 0.57735026919e0;
    real _t0DD4 = 0.57735026919e0;
    real _t0DD5 = 0.57735026919e0;
    real _t0DD6 = 0.57735026919e0;
    vec3 _t0DD7 = [_t0DD4, _t0DD5, _t0DD6];
    real _t0DD8 = prim •00CE<$[3]; $[3]; $[]> (_t0DD7, refPos0DA0);
    real _t0DD9 = prim -0026<$[]> (_t0DD3, _t0DD8);
    real _t0DDA = 0.57735026919e0;
    real _t0DDB = 0.57735026919e0;
    real _t0DDC = 0.57735026919e0;
    vec3 _t0DDD = [_t0DDA, _t0DDB, _t0DDC];
    real _t0DDE = prim •00CE<$[3]; $[3]; $[]> (_t0DDD, dPos0DA1);
    real _t0DDF = prim /0055 (_t0DD9, _t0DDE);
    vec3 _t0DE0 = prim *0038<$[3]> (dPos0DA1, _t0DDF);
    vec3 _t0DE1 = prim +0017<$[3]> (refPos0DA0, _t0DE0);
    real _t0DE2 = prim •00CE<$[3]; $[3]; $[]> (_t0DD2, _t0DE1);
    bool _t0DE3 = prim >0080 (_t0DCE, _t0DE2);
    real _t0DE4 = 0.1e-7;
    real _t0DE5 = 0.1e-7;
    real _t0DE6 = 0.1e-7;
    vec3 _t0DE7 = [_t0DE4, _t0DE5, _t0DE6];
    real _t0DE8 = 0.57735026919e0;
    real _t0DE9 = 0.57735026919e0;
    real _t0DEA = 0.57735026919e0;
    real _t0DEB = 0.57735026919e0;
    vec3 _t0DEC = [_t0DE9, _t0DEA, _t0DEB];
    real _t0DED = prim •00CE<$[3]; $[3]; $[]> (_t0DEC, refPos0DA0);
    real _t0DEE = prim -0026<$[]> (_t0DE8, _t0DED);
    real _t0DEF = 0.57735026919e0;
    real _t0DF0 = 0.57735026919e0;
    real _t0DF1 = 0.57735026919e0;
    vec3 _t0DF2 = [_t0DEF, _t0DF0, _t0DF1];
    real _t0DF3 = prim •00CE<$[3]; $[3]; $[]> (_t0DF2, dPos0DA1);
    real _t0DF4 = prim /0055 (_t0DEE, _t0DF3);
    vec3 _t0DF5 = prim *0038<$[3]> (dPos0DA1, _t0DF4);
    vec3 _t0DF6 = prim +0017<$[3]> (refPos0DA0, _t0DF5);
    vec3 _t0DF7 = prim +0017<$[3]> (_t0DE7, _t0DF6);
    real _t0DF8 = _t0DF7[0];
    real _t0DF9 = -0.e0;
    bool _t0DFA = prim >0080 (_t0DF8, _t0DF9);
    real _t0DFB = 0.1e-7;
    real _t0DFC = 0.1e-7;
    real _t0DFD = 0.1e-7;
    vec3 _t0DFE = [_t0DFB, _t0DFC, _t0DFD];
    real _t0DFF = 0.57735026919e0;
    real _t0E00 = 0.57735026919e0;
    real _t0E01 = 0.57735026919e0;
    real _t0E02 = 0.57735026919e0;
    vec3 _t0E03 = [_t0E00, _t0E01, _t0E02];
    real _t0E04 = prim •00CE<$[3]; $[3]; $[]> (_t0E03, refPos0DA0);
    real _t0E05 = prim -0026<$[]> (_t0DFF, _t0E04);
    real _t0E06 = 0.57735026919e0;
    real _t0E07 = 0.57735026919e0;
    real _t0E08 = 0.57735026919e0;
    vec3 _t0E09 = [_t0E06, _t0E07, _t0E08];
    real _t0E0A = prim •00CE<$[3]; $[3]; $[]> (_t0E09, dPos0DA1);
    real _t0E0B = prim /0055 (_t0E05, _t0E0A);
    vec3 _t0E0C = prim *0038<$[3]> (dPos0DA1, _t0E0B);
    vec3 _t0E0D = prim +0017<$[3]> (refPos0DA0, _t0E0C);
    vec3 _t0E0E = prim +0017<$[3]> (_t0DFE, _t0E0D);
    real _t0E0F = _t0E0E[1];
    real _t0E10 = -0.e0;
    bool _t0E11 = prim >0080 (_t0E0F, _t0E10);
    real _t0E12 = 0.1e-7;
    real _t0E13 = 0.1e-7;
    real _t0E14 = 0.1e-7;
    vec3 _t0E15 = [_t0E12, _t0E13, _t0E14];
    real _t0E16 = 0.57735026919e0;
    real _t0E17 = 0.57735026919e0;
    real _t0E18 = 0.57735026919e0;
    real _t0E19 = 0.57735026919e0;
    vec3 _t0E1A = [_t0E17, _t0E18, _t0E19];
    real _t0E1B = prim •00CE<$[3]; $[3]; $[]> (_t0E1A, refPos0DA0);
    real _t0E1C = prim -0026<$[]> (_t0E16, _t0E1B);
    real _t0E1D = 0.57735026919e0;
    real _t0E1E = 0.57735026919e0;
    real _t0E1F = 0.57735026919e0;
    vec3 _t0E20 = [_t0E1D, _t0E1E, _t0E1F];
    real _t0E21 = prim •00CE<$[3]; $[3]; $[]> (_t0E20, dPos0DA1);
    real _t0E22 = prim /0055 (_t0E1C, _t0E21);
    vec3 _t0E23 = prim *0038<$[3]> (dPos0DA1, _t0E22);
    vec3 _t0E24 = prim +0017<$[3]> (refPos0DA0, _t0E23);
    vec3 _t0E25 = prim +0017<$[3]> (_t0E15, _t0E24);
    real _t0E26 = _t0E25[2];
    real _t0E27 = -0.e0;
    bool _t0E28 = prim >0080 (_t0E26, _t0E27);
    bool _t0E29 = prim $and01C4 (_t0E11, _t0E28);
    bool _t0E2A = prim $and01C4 (_t0DFA, _t0E29);
    bool _t0E2B = prim $and01C4 (_t0DE3, _t0E2A);
    if _t0E2B {
      real _t0E2C = 0.57735026919e0;
      real _t0E2D = 0.57735026919e0;
      real _t0E2E = 0.57735026919e0;
      real _t0E2F = 0.57735026919e0;
      vec3 _t0E30 = [_t0E2D, _t0E2E, _t0E2F];
      real _t0E31 = prim •00CE<$[3]; $[3]; $[]> (_t0E30, refPos0DA0);
      real _t0E32 = prim -0026<$[]> (_t0E2C, _t0E31);
      real _t0E33 = 0.57735026919e0;
      real _t0E34 = 0.57735026919e0;
      real _t0E35 = 0.57735026919e0;
      vec3 _t0E36 = [_t0E33, _t0E34, _t0E35];
      real _t0E37 = prim •00CE<$[3]; $[3]; $[]> (_t0E36, dPos0DA1);
      time0DA2 = prim /0055 (_t0E32, _t0E37);
      face0DA3 = 0;
    }
  }
  real _t0E38 = 0.e0;
  real _t0E39 = -0.1e1;
  real _t0E3A = 0.e0;
  real _t0E3B = 0.e0;
  vec3 _t0E3C = [_t0E39, _t0E3A, _t0E3B];
  real _t0E3D = prim •00CE<$[3]; $[3]; $[]> (_t0E3C, refPos0DA0);
  real _t0E3E = prim -0026<$[]> (_t0E38, _t0E3D);
  real _t0E3F = -0.1e1;
  real _t0E40 = 0.e0;
  real _t0E41 = 0.e0;
  vec3 _t0E42 = [_t0E3F, _t0E40, _t0E41];
  real _t0E43 = prim •00CE<$[3]; $[3]; $[]> (_t0E42, dPos0DA1);
  real _t0E44 = prim /0055 (_t0E3E, _t0E43);
  real _t0E45 = -0.1e-7;
  bool _t0E46 = prim >=007E (_t0E44, _t0E45);
  real _t0E47 = 0.e0;
  real _t0E48 = -0.1e1;
  real _t0E49 = 0.e0;
  real _t0E4A = 0.e0;
  vec3 _t0E4B = [_t0E48, _t0E49, _t0E4A];
  real _t0E4C = prim •00CE<$[3]; $[3]; $[]> (_t0E4B, refPos0DA0);
  real _t0E4D = prim -0026<$[]> (_t0E47, _t0E4C);
  real _t0E4E = -0.1e1;
  real _t0E4F = 0.e0;
  real _t0E50 = 0.e0;
  vec3 _t0E51 = [_t0E4E, _t0E4F, _t0E50];
  real _t0E52 = prim •00CE<$[3]; $[3]; $[]> (_t0E51, dPos0DA1);
  real _t0E53 = prim /0055 (_t0E4D, _t0E52);
  bool _t0E54 = prim >0080 (time0DA2, _t0E53);
  real _t0E55 = -0.1e1;
  real _t0E56 = 0.e0;
  real _t0E57 = 0.e0;
  vec3 _t0E58 = [_t0E55, _t0E56, _t0E57];
  real _t0E59 = prim •00CE<$[3]; $[3]; $[]> (_t0E58, dPos0DA1);
  real _t0E5A = prim |()|00B5<$[]> (_t0E59);
  real _t0E5B = 0.1e-7;
  bool _t0E5C = prim >=007E (_t0E5A, _t0E5B);
  bool _t0E5D = prim $and01C4 (_t0E54, _t0E5C);
  bool _t0E5E = prim $and01C4 (_t0E46, _t0E5D);
  if _t0E5E {
    real _t0E5F = 0.1e1;
    real _t0E60 = 0.1e-7;
    real _t0E61 = prim +0017<$[]> (_t0E5F, _t0E60);
    real _t0E62 = 0.1e1;
    real _t0E63 = 0.1e1;
    real _t0E64 = 0.1e1;
    vec3 _t0E65 = [_t0E62, _t0E63, _t0E64];
    real _t0E66 = 0.e0;
    real _t0E67 = -0.1e1;
    real _t0E68 = 0.e0;
    real _t0E69 = 0.e0;
    vec3 _t0E6A = [_t0E67, _t0E68, _t0E69];
    real _t0E6B = prim •00CE<$[3]; $[3]; $[]> (_t0E6A, refPos0DA0);
    real _t0E6C = prim -0026<$[]> (_t0E66, _t0E6B);
    real _t0E6D = -0.1e1;
    real _t0E6E = 0.e0;
    real _t0E6F = 0.e0;
    vec3 _t0E70 = [_t0E6D, _t0E6E, _t0E6F];
    real _t0E71 = prim •00CE<$[3]; $[3]; $[]> (_t0E70, dPos0DA1);
    real _t0E72 = prim /0055 (_t0E6C, _t0E71);
    vec3 _t0E73 = prim *0038<$[3]> (dPos0DA1, _t0E72);
    vec3 _t0E74 = prim +0017<$[3]> (refPos0DA0, _t0E73);
    real _t0E75 = prim •00CE<$[3]; $[3]; $[]> (_t0E65, _t0E74);
    bool _t0E76 = prim >0080 (_t0E61, _t0E75);
    real _t0E77 = 0.1e-7;
    real _t0E78 = 0.1e-7;
    real _t0E79 = 0.1e-7;
    vec3 _t0E7A = [_t0E77, _t0E78, _t0E79];
    real _t0E7B = 0.e0;
    real _t0E7C = -0.1e1;
    real _t0E7D = 0.e0;
    real _t0E7E = 0.e0;
    vec3 _t0E7F = [_t0E7C, _t0E7D, _t0E7E];
    real _t0E80 = prim •00CE<$[3]; $[3]; $[]> (_t0E7F, refPos0DA0);
    real _t0E81 = prim -0026<$[]> (_t0E7B, _t0E80);
    real _t0E82 = -0.1e1;
    real _t0E83 = 0.e0;
    real _t0E84 = 0.e0;
    vec3 _t0E85 = [_t0E82, _t0E83, _t0E84];
    real _t0E86 = prim •00CE<$[3]; $[3]; $[]> (_t0E85, dPos0DA1);
    real _t0E87 = prim /0055 (_t0E81, _t0E86);
    vec3 _t0E88 = prim *0038<$[3]> (dPos0DA1, _t0E87);
    vec3 _t0E89 = prim +0017<$[3]> (refPos0DA0, _t0E88);
    vec3 _t0E8A = prim +0017<$[3]> (_t0E7A, _t0E89);
    real _t0E8B = _t0E8A[0];
    real _t0E8C = -0.e0;
    bool _t0E8D = prim >0080 (_t0E8B, _t0E8C);
    real _t0E8E = 0.1e-7;
    real _t0E8F = 0.1e-7;
    real _t0E90 = 0.1e-7;
    vec3 _t0E91 = [_t0E8E, _t0E8F, _t0E90];
    real _t0E92 = 0.e0;
    real _t0E93 = -0.1e1;
    real _t0E94 = 0.e0;
    real _t0E95 = 0.e0;
    vec3 _t0E96 = [_t0E93, _t0E94, _t0E95];
    real _t0E97 = prim •00CE<$[3]; $[3]; $[]> (_t0E96, refPos0DA0);
    real _t0E98 = prim -0026<$[]> (_t0E92, _t0E97);
    real _t0E99 = -0.1e1;
    real _t0E9A = 0.e0;
    real _t0E9B = 0.e0;
    vec3 _t0E9C = [_t0E99, _t0E9A, _t0E9B];
    real _t0E9D = prim •00CE<$[3]; $[3]; $[]> (_t0E9C, dPos0DA1);
    real _t0E9E = prim /0055 (_t0E98, _t0E9D);
    vec3 _t0E9F = prim *0038<$[3]> (dPos0DA1, _t0E9E);
    vec3 _t0EA0 = prim +0017<$[3]> (refPos0DA0, _t0E9F);
    vec3 _t0EA1 = prim +0017<$[3]> (_t0E91, _t0EA0);
    real _t0EA2 = _t0EA1[1];
    real _t0EA3 = -0.e0;
    bool _t0EA4 = prim >0080 (_t0EA2, _t0EA3);
    real _t0EA5 = 0.1e-7;
    real _t0EA6 = 0.1e-7;
    real _t0EA7 = 0.1e-7;
    vec3 _t0EA8 = [_t0EA5, _t0EA6, _t0EA7];
    real _t0EA9 = 0.e0;
    real _t0EAA = -0.1e1;
    real _t0EAB = 0.e0;
    real _t0EAC = 0.e0;
    vec3 _t0EAD = [_t0EAA, _t0EAB, _t0EAC];
    real _t0EAE = prim •00CE<$[3]; $[3]; $[]> (_t0EAD, refPos0DA0);
    real _t0EAF = prim -0026<$[]> (_t0EA9, _t0EAE);
    real _t0EB0 = -0.1e1;
    real _t0EB1 = 0.e0;
    real _t0EB2 = 0.e0;
    vec3 _t0EB3 = [_t0EB0, _t0EB1, _t0EB2];
    real _t0EB4 = prim •00CE<$[3]; $[3]; $[]> (_t0EB3, dPos0DA1);
    real _t0EB5 = prim /0055 (_t0EAF, _t0EB4);
    vec3 _t0EB6 = prim *0038<$[3]> (dPos0DA1, _t0EB5);
    vec3 _t0EB7 = prim +0017<$[3]> (refPos0DA0, _t0EB6);
    vec3 _t0EB8 = prim +0017<$[3]> (_t0EA8, _t0EB7);
    real _t0EB9 = _t0EB8[2];
    real _t0EBA = -0.e0;
    bool _t0EBB = prim >0080 (_t0EB9, _t0EBA);
    bool _t0EBC = prim $and01C4 (_t0EA4, _t0EBB);
    bool _t0EBD = prim $and01C4 (_t0E8D, _t0EBC);
    bool _t0EBE = prim $and01C4 (_t0E76, _t0EBD);
    if _t0EBE {
      real _t0EBF = 0.e0;
      real _t0EC0 = -0.1e1;
      real _t0EC1 = 0.e0;
      real _t0EC2 = 0.e0;
      vec3 _t0EC3 = [_t0EC0, _t0EC1, _t0EC2];
      real _t0EC4 = prim •00CE<$[3]; $[3]; $[]> (_t0EC3, refPos0DA0);
      real _t0EC5 = prim -0026<$[]> (_t0EBF, _t0EC4);
      real _t0EC6 = -0.1e1;
      real _t0EC7 = 0.e0;
      real _t0EC8 = 0.e0;
      vec3 _t0EC9 = [_t0EC6, _t0EC7, _t0EC8];
      real _t0ECA = prim •00CE<$[3]; $[3]; $[]> (_t0EC9, dPos0DA1);
      time0DA2 = prim /0055 (_t0EC5, _t0ECA);
      face0DA3 = 1;
    }
  }
  real _t0ECB = 0.e0;
  real _t0ECC = 0.e0;
  real _t0ECD = -0.1e1;
  real _t0ECE = 0.e0;
  vec3 _t0ECF = [_t0ECC, _t0ECD, _t0ECE];
  real _t0ED0 = prim •00CE<$[3]; $[3]; $[]> (_t0ECF, refPos0DA0);
  real _t0ED1 = prim -0026<$[]> (_t0ECB, _t0ED0);
  real _t0ED2 = 0.e0;
  real _t0ED3 = -0.1e1;
  real _t0ED4 = 0.e0;
  vec3 _t0ED5 = [_t0ED2, _t0ED3, _t0ED4];
  real _t0ED6 = prim •00CE<$[3]; $[3]; $[]> (_t0ED5, dPos0DA1);
  real _t0ED7 = prim /0055 (_t0ED1, _t0ED6);
  real _t0ED8 = -0.1e-7;
  bool _t0ED9 = prim >=007E (_t0ED7, _t0ED8);
  real _t0EDA = 0.e0;
  real _t0EDB = 0.e0;
  real _t0EDC = -0.1e1;
  real _t0EDD = 0.e0;
  vec3 _t0EDE = [_t0EDB, _t0EDC, _t0EDD];
  real _t0EDF = prim •00CE<$[3]; $[3]; $[]> (_t0EDE, refPos0DA0);
  real _t0EE0 = prim -0026<$[]> (_t0EDA, _t0EDF);
  real _t0EE1 = 0.e0;
  real _t0EE2 = -0.1e1;
  real _t0EE3 = 0.e0;
  vec3 _t0EE4 = [_t0EE1, _t0EE2, _t0EE3];
  real _t0EE5 = prim •00CE<$[3]; $[3]; $[]> (_t0EE4, dPos0DA1);
  real _t0EE6 = prim /0055 (_t0EE0, _t0EE5);
  bool _t0EE7 = prim >0080 (time0DA2, _t0EE6);
  real _t0EE8 = 0.e0;
  real _t0EE9 = -0.1e1;
  real _t0EEA = 0.e0;
  vec3 _t0EEB = [_t0EE8, _t0EE9, _t0EEA];
  real _t0EEC = prim •00CE<$[3]; $[3]; $[]> (_t0EEB, dPos0DA1);
  real _t0EED = prim |()|00B5<$[]> (_t0EEC);
  real _t0EEE = 0.1e-7;
  bool _t0EEF = prim >=007E (_t0EED, _t0EEE);
  bool _t0EF0 = prim $and01C4 (_t0EE7, _t0EEF);
  bool _t0EF1 = prim $and01C4 (_t0ED9, _t0EF0);
  if _t0EF1 {
    real _t0EF2 = 0.1e1;
    real _t0EF3 = 0.1e-7;
    real _t0EF4 = prim +0017<$[]> (_t0EF2, _t0EF3);
    real _t0EF5 = 0.1e1;
    real _t0EF6 = 0.1e1;
    real _t0EF7 = 0.1e1;
    vec3 _t0EF8 = [_t0EF5, _t0EF6, _t0EF7];
    real _t0EF9 = 0.e0;
    real _t0EFA = 0.e0;
    real _t0EFB = -0.1e1;
    real _t0EFC = 0.e0;
    vec3 _t0EFD = [_t0EFA, _t0EFB, _t0EFC];
    real _t0EFE = prim •00CE<$[3]; $[3]; $[]> (_t0EFD, refPos0DA0);
    real _t0EFF = prim -0026<$[]> (_t0EF9, _t0EFE);
    real _t0F00 = 0.e0;
    real _t0F01 = -0.1e1;
    real _t0F02 = 0.e0;
    vec3 _t0F03 = [_t0F00, _t0F01, _t0F02];
    real _t0F04 = prim •00CE<$[3]; $[3]; $[]> (_t0F03, dPos0DA1);
    real _t0F05 = prim /0055 (_t0EFF, _t0F04);
    vec3 _t0F06 = prim *0038<$[3]> (dPos0DA1, _t0F05);
    vec3 _t0F07 = prim +0017<$[3]> (refPos0DA0, _t0F06);
    real _t0F08 = prim •00CE<$[3]; $[3]; $[]> (_t0EF8, _t0F07);
    bool _t0F09 = prim >0080 (_t0EF4, _t0F08);
    real _t0F0A = 0.1e-7;
    real _t0F0B = 0.1e-7;
    real _t0F0C = 0.1e-7;
    vec3 _t0F0D = [_t0F0A, _t0F0B, _t0F0C];
    real _t0F0E = 0.e0;
    real _t0F0F = 0.e0;
    real _t0F10 = -0.1e1;
    real _t0F11 = 0.e0;
    vec3 _t0F12 = [_t0F0F, _t0F10, _t0F11];
    real _t0F13 = prim •00CE<$[3]; $[3]; $[]> (_t0F12, refPos0DA0);
    real _t0F14 = prim -0026<$[]> (_t0F0E, _t0F13);
    real _t0F15 = 0.e0;
    real _t0F16 = -0.1e1;
    real _t0F17 = 0.e0;
    vec3 _t0F18 = [_t0F15, _t0F16, _t0F17];
    real _t0F19 = prim •00CE<$[3]; $[3]; $[]> (_t0F18, dPos0DA1);
    real _t0F1A = prim /0055 (_t0F14, _t0F19);
    vec3 _t0F1B = prim *0038<$[3]> (dPos0DA1, _t0F1A);
    vec3 _t0F1C = prim +0017<$[3]> (refPos0DA0, _t0F1B);
    vec3 _t0F1D = prim +0017<$[3]> (_t0F0D, _t0F1C);
    real _t0F1E = _t0F1D[0];
    real _t0F1F = -0.e0;
    bool _t0F20 = prim >0080 (_t0F1E, _t0F1F);
    real _t0F21 = 0.1e-7;
    real _t0F22 = 0.1e-7;
    real _t0F23 = 0.1e-7;
    vec3 _t0F24 = [_t0F21, _t0F22, _t0F23];
    real _t0F25 = 0.e0;
    real _t0F26 = 0.e0;
    real _t0F27 = -0.1e1;
    real _t0F28 = 0.e0;
    vec3 _t0F29 = [_t0F26, _t0F27, _t0F28];
    real _t0F2A = prim •00CE<$[3]; $[3]; $[]> (_t0F29, refPos0DA0);
    real _t0F2B = prim -0026<$[]> (_t0F25, _t0F2A);
    real _t0F2C = 0.e0;
    real _t0F2D = -0.1e1;
    real _t0F2E = 0.e0;
    vec3 _t0F2F = [_t0F2C, _t0F2D, _t0F2E];
    real _t0F30 = prim •00CE<$[3]; $[3]; $[]> (_t0F2F, dPos0DA1);
    real _t0F31 = prim /0055 (_t0F2B, _t0F30);
    vec3 _t0F32 = prim *0038<$[3]> (dPos0DA1, _t0F31);
    vec3 _t0F33 = prim +0017<$[3]> (refPos0DA0, _t0F32);
    vec3 _t0F34 = prim +0017<$[3]> (_t0F24, _t0F33);
    real _t0F35 = _t0F34[1];
    real _t0F36 = -0.e0;
    bool _t0F37 = prim >0080 (_t0F35, _t0F36);
    real _t0F38 = 0.1e-7;
    real _t0F39 = 0.1e-7;
    real _t0F3A = 0.1e-7;
    vec3 _t0F3B = [_t0F38, _t0F39, _t0F3A];
    real _t0F3C = 0.e0;
    real _t0F3D = 0.e0;
    real _t0F3E = -0.1e1;
    real _t0F3F = 0.e0;
    vec3 _t0F40 = [_t0F3D, _t0F3E, _t0F3F];
    real _t0F41 = prim •00CE<$[3]; $[3]; $[]> (_t0F40, refPos0DA0);
    real _t0F42 = prim -0026<$[]> (_t0F3C, _t0F41);
    real _t0F43 = 0.e0;
    real _t0F44 = -0.1e1;
    real _t0F45 = 0.e0;
    vec3 _t0F46 = [_t0F43, _t0F44, _t0F45];
    real _t0F47 = prim •00CE<$[3]; $[3]; $[]> (_t0F46, dPos0DA1);
    real _t0F48 = prim /0055 (_t0F42, _t0F47);
    vec3 _t0F49 = prim *0038<$[3]> (dPos0DA1, _t0F48);
    vec3 _t0F4A = prim +0017<$[3]> (refPos0DA0, _t0F49);
    vec3 _t0F4B = prim +0017<$[3]> (_t0F3B, _t0F4A);
    real _t0F4C = _t0F4B[2];
    real _t0F4D = -0.e0;
    bool _t0F4E = prim >0080 (_t0F4C, _t0F4D);
    bool _t0F4F = prim $and01C4 (_t0F37, _t0F4E);
    bool _t0F50 = prim $and01C4 (_t0F20, _t0F4F);
    bool _t0F51 = prim $and01C4 (_t0F09, _t0F50);
    if _t0F51 {
      real _t0F52 = 0.e0;
      real _t0F53 = 0.e0;
      real _t0F54 = -0.1e1;
      real _t0F55 = 0.e0;
      vec3 _t0F56 = [_t0F53, _t0F54, _t0F55];
      real _t0F57 = prim •00CE<$[3]; $[3]; $[]> (_t0F56, refPos0DA0);
      real _t0F58 = prim -0026<$[]> (_t0F52, _t0F57);
      real _t0F59 = 0.e0;
      real _t0F5A = -0.1e1;
      real _t0F5B = 0.e0;
      vec3 _t0F5C = [_t0F59, _t0F5A, _t0F5B];
      real _t0F5D = prim •00CE<$[3]; $[3]; $[]> (_t0F5C, dPos0DA1);
      time0DA2 = prim /0055 (_t0F58, _t0F5D);
      face0DA3 = 2;
    }
  }
  real _t0F5E = 0.e0;
  real _t0F5F = 0.e0;
  real _t0F60 = 0.e0;
  real _t0F61 = -0.1e1;
  vec3 _t0F62 = [_t0F5F, _t0F60, _t0F61];
  real _t0F63 = prim •00CE<$[3]; $[3]; $[]> (_t0F62, refPos0DA0);
  real _t0F64 = prim -0026<$[]> (_t0F5E, _t0F63);
  real _t0F65 = 0.e0;
  real _t0F66 = 0.e0;
  real _t0F67 = -0.1e1;
  vec3 _t0F68 = [_t0F65, _t0F66, _t0F67];
  real _t0F69 = prim •00CE<$[3]; $[3]; $[]> (_t0F68, dPos0DA1);
  real _t0F6A = prim /0055 (_t0F64, _t0F69);
  real _t0F6B = -0.1e-7;
  bool _t0F6C = prim >=007E (_t0F6A, _t0F6B);
  real _t0F6D = 0.e0;
  real _t0F6E = 0.e0;
  real _t0F6F = 0.e0;
  real _t0F70 = -0.1e1;
  vec3 _t0F71 = [_t0F6E, _t0F6F, _t0F70];
  real _t0F72 = prim •00CE<$[3]; $[3]; $[]> (_t0F71, refPos0DA0);
  real _t0F73 = prim -0026<$[]> (_t0F6D, _t0F72);
  real _t0F74 = 0.e0;
  real _t0F75 = 0.e0;
  real _t0F76 = -0.1e1;
  vec3 _t0F77 = [_t0F74, _t0F75, _t0F76];
  real _t0F78 = prim •00CE<$[3]; $[3]; $[]> (_t0F77, dPos0DA1);
  real _t0F79 = prim /0055 (_t0F73, _t0F78);
  bool _t0F7A = prim >0080 (time0DA2, _t0F79);
  real _t0F7B = 0.e0;
  real _t0F7C = 0.e0;
  real _t0F7D = -0.1e1;
  vec3 _t0F7E = [_t0F7B, _t0F7C, _t0F7D];
  real _t0F7F = prim •00CE<$[3]; $[3]; $[]> (_t0F7E, dPos0DA1);
  real _t0F80 = prim |()|00B5<$[]> (_t0F7F);
  real _t0F81 = 0.1e-7;
  bool _t0F82 = prim >=007E (_t0F80, _t0F81);
  bool _t0F83 = prim $and01C4 (_t0F7A, _t0F82);
  bool _t0F84 = prim $and01C4 (_t0F6C, _t0F83);
  if _t0F84 {
    real _t0F85 = 0.1e1;
    real _t0F86 = 0.1e-7;
    real _t0F87 = prim +0017<$[]> (_t0F85, _t0F86);
    real _t0F88 = 0.1e1;
    real _t0F89 = 0.1e1;
    real _t0F8A = 0.1e1;
    vec3 _t0F8B = [_t0F88, _t0F89, _t0F8A];
    real _t0F8C = 0.e0;
    real _t0F8D = 0.e0;
    real _t0F8E = 0.e0;
    real _t0F8F = -0.1e1;
    vec3 _t0F90 = [_t0F8D, _t0F8E, _t0F8F];
    real _t0F91 = prim •00CE<$[3]; $[3]; $[]> (_t0F90, refPos0DA0);
    real _t0F92 = prim -0026<$[]> (_t0F8C, _t0F91);
    real _t0F93 = 0.e0;
    real _t0F94 = 0.e0;
    real _t0F95 = -0.1e1;
    vec3 _t0F96 = [_t0F93, _t0F94, _t0F95];
    real _t0F97 = prim •00CE<$[3]; $[3]; $[]> (_t0F96, dPos0DA1);
    real _t0F98 = prim /0055 (_t0F92, _t0F97);
    vec3 _t0F99 = prim *0038<$[3]> (dPos0DA1, _t0F98);
    vec3 _t0F9A = prim +0017<$[3]> (refPos0DA0, _t0F99);
    real _t0F9B = prim •00CE<$[3]; $[3]; $[]> (_t0F8B, _t0F9A);
    bool _t0F9C = prim >0080 (_t0F87, _t0F9B);
    real _t0F9D = 0.1e-7;
    real _t0F9E = 0.1e-7;
    real _t0F9F = 0.1e-7;
    vec3 _t0FA0 = [_t0F9D, _t0F9E, _t0F9F];
    real _t0FA1 = 0.e0;
    real _t0FA2 = 0.e0;
    real _t0FA3 = 0.e0;
    real _t0FA4 = -0.1e1;
    vec3 _t0FA5 = [_t0FA2, _t0FA3, _t0FA4];
    real _t0FA6 = prim •00CE<$[3]; $[3]; $[]> (_t0FA5, refPos0DA0);
    real _t0FA7 = prim -0026<$[]> (_t0FA1, _t0FA6);
    real _t0FA8 = 0.e0;
    real _t0FA9 = 0.e0;
    real _t0FAA = -0.1e1;
    vec3 _t0FAB = [_t0FA8, _t0FA9, _t0FAA];
    real _t0FAC = prim •00CE<$[3]; $[3]; $[]> (_t0FAB, dPos0DA1);
    real _t0FAD = prim /0055 (_t0FA7, _t0FAC);
    vec3 _t0FAE = prim *0038<$[3]> (dPos0DA1, _t0FAD);
    vec3 _t0FAF = prim +0017<$[3]> (refPos0DA0, _t0FAE);
    vec3 _t0FB0 = prim +0017<$[3]> (_t0FA0, _t0FAF);
    real _t0FB1 = _t0FB0[0];
    real _t0FB2 = -0.e0;
    bool _t0FB3 = prim >0080 (_t0FB1, _t0FB2);
    real _t0FB4 = 0.1e-7;
    real _t0FB5 = 0.1e-7;
    real _t0FB6 = 0.1e-7;
    vec3 _t0FB7 = [_t0FB4, _t0FB5, _t0FB6];
    real _t0FB8 = 0.e0;
    real _t0FB9 = 0.e0;
    real _t0FBA = 0.e0;
    real _t0FBB = -0.1e1;
    vec3 _t0FBC = [_t0FB9, _t0FBA, _t0FBB];
    real _t0FBD = prim •00CE<$[3]; $[3]; $[]> (_t0FBC, refPos0DA0);
    real _t0FBE = prim -0026<$[]> (_t0FB8, _t0FBD);
    real _t0FBF = 0.e0;
    real _t0FC0 = 0.e0;
    real _t0FC1 = -0.1e1;
    vec3 _t0FC2 = [_t0FBF, _t0FC0, _t0FC1];
    real _t0FC3 = prim •00CE<$[3]; $[3]; $[]> (_t0FC2, dPos0DA1);
    real _t0FC4 = prim /0055 (_t0FBE, _t0FC3);
    vec3 _t0FC5 = prim *0038<$[3]> (dPos0DA1, _t0FC4);
    vec3 _t0FC6 = prim +0017<$[3]> (refPos0DA0, _t0FC5);
    vec3 _t0FC7 = prim +0017<$[3]> (_t0FB7, _t0FC6);
    real _t0FC8 = _t0FC7[1];
    real _t0FC9 = -0.e0;
    bool _t0FCA = prim >0080 (_t0FC8, _t0FC9);
    real _t0FCB = 0.1e-7;
    real _t0FCC = 0.1e-7;
    real _t0FCD = 0.1e-7;
    vec3 _t0FCE = [_t0FCB, _t0FCC, _t0FCD];
    real _t0FCF = 0.e0;
    real _t0FD0 = 0.e0;
    real _t0FD1 = 0.e0;
    real _t0FD2 = -0.1e1;
    vec3 _t0FD3 = [_t0FD0, _t0FD1, _t0FD2];
    real _t0FD4 = prim •00CE<$[3]; $[3]; $[]> (_t0FD3, refPos0DA0);
    real _t0FD5 = prim -0026<$[]> (_t0FCF, _t0FD4);
    real _t0FD6 = 0.e0;
    real _t0FD7 = 0.e0;
    real _t0FD8 = -0.1e1;
    vec3 _t0FD9 = [_t0FD6, _t0FD7, _t0FD8];
    real _t0FDA = prim •00CE<$[3]; $[3]; $[]> (_t0FD9, dPos0DA1);
    real _t0FDB = prim /0055 (_t0FD5, _t0FDA);
    vec3 _t0FDC = prim *0038<$[3]> (dPos0DA1, _t0FDB);
    vec3 _t0FDD = prim +0017<$[3]> (refPos0DA0, _t0FDC);
    vec3 _t0FDE = prim +0017<$[3]> (_t0FCE, _t0FDD);
    real _t0FDF = _t0FDE[2];
    real _t0FE0 = -0.e0;
    bool _t0FE1 = prim >0080 (_t0FDF, _t0FE0);
    bool _t0FE2 = prim $and01C4 (_t0FCA, _t0FE1);
    bool _t0FE3 = prim $and01C4 (_t0FB3, _t0FE2);
    bool _t0FE4 = prim $and01C4 (_t0F9C, _t0FE3);
    if _t0FE4 {
      real _t0FE5 = 0.e0;
      real _t0FE6 = 0.e0;
      real _t0FE7 = 0.e0;
      real _t0FE8 = -0.1e1;
      vec3 _t0FE9 = [_t0FE6, _t0FE7, _t0FE8];
      real _t0FEA = prim •00CE<$[3]; $[3]; $[]> (_t0FE9, refPos0DA0);
      real _t0FEB = prim -0026<$[]> (_t0FE5, _t0FEA);
      real _t0FEC = 0.e0;
      real _t0FED = 0.e0;
      real _t0FEE = -0.1e1;
      vec3 _t0FEF = [_t0FEC, _t0FED, _t0FEE];
      real _t0FF0 = prim •00CE<$[3]; $[3]; $[]> (_t0FEF, dPos0DA1);
      time0DA2 = prim /0055 (_t0FEB, _t0FF0);
      face0DA3 = 3;
    }
  }
  int _t0FF1 = -1;
  bool _t0FF2 = prim !=0086 (face0DA3, _t0FF1);
  real _t0FF3 = 0.1e1;
  real _t0FF4 = 0.1e-7;
  real _t0FF5 = prim +0017<$[]> (_t0FF3, _t0FF4);
  real _t0FF6 = 0.1e1;
  real _t0FF7 = 0.1e1;
  real _t0FF8 = 0.1e1;
  vec3 _t0FF9 = [_t0FF6, _t0FF7, _t0FF8];
  real _t0FFA = 0.e0;
  real _t0FFB = prim max0125 (time0DA2, _t0FFA);
  vec3 _t0FFC = prim *0038<$[3]> (dPos0DA1, _t0FFB);
  vec3 _t0FFD = prim +0017<$[3]> (refPos0DA0, _t0FFC);
  real _t0FFE = prim •00CE<$[3]; $[3]; $[]> (_t0FF9, _t0FFD);
  bool _t0FFF = prim >0080 (_t0FF5, _t0FFE);
  real _t1000 = 0.1e-7;
  real _t1001 = 0.1e-7;
  real _t1002 = 0.1e-7;
  vec3 _t1003 = [_t1000, _t1001, _t1002];
  real _t1004 = 0.e0;
  real _t1005 = prim max0125 (time0DA2, _t1004);
  vec3 _t1006 = prim *0038<$[3]> (dPos0DA1, _t1005);
  vec3 _t1007 = prim +0017<$[3]> (refPos0DA0, _t1006);
  vec3 _t1008 = prim +0017<$[3]> (_t1003, _t1007);
  real _t1009 = _t1008[0];
  real _t100A = -0.e0;
  bool _t100B = prim >0080 (_t1009, _t100A);
  real _t100C = 0.1e-7;
  real _t100D = 0.1e-7;
  real _t100E = 0.1e-7;
  vec3 _t100F = [_t100C, _t100D, _t100E];
  real _t1010 = 0.e0;
  real _t1011 = prim max0125 (time0DA2, _t1010);
  vec3 _t1012 = prim *0038<$[3]> (dPos0DA1, _t1011);
  vec3 _t1013 = prim +0017<$[3]> (refPos0DA0, _t1012);
  vec3 _t1014 = prim +0017<$[3]> (_t100F, _t1013);
  real _t1015 = _t1014[1];
  real _t1016 = -0.e0;
  bool _t1017 = prim >0080 (_t1015, _t1016);
  real _t1018 = 0.1e-7;
  real _t1019 = 0.1e-7;
  real _t101A = 0.1e-7;
  vec3 _t101B = [_t1018, _t1019, _t101A];
  real _t101C = 0.e0;
  real _t101D = prim max0125 (time0DA2, _t101C);
  vec3 _t101E = prim *0038<$[3]> (dPos0DA1, _t101D);
  vec3 _t101F = prim +0017<$[3]> (refPos0DA0, _t101E);
  vec3 _t1020 = prim +0017<$[3]> (_t101B, _t101F);
  real _t1021 = _t1020[2];
  real _t1022 = -0.e0;
  bool _t1023 = prim >0080 (_t1021, _t1022);
  bool _t1024 = prim $and01C4 (_t1017, _t1023);
  bool _t1025 = prim $and01C4 (_t100B, _t1024);
  bool _t1026 = prim $and01C4 (_t0FFF, _t1025);
  bool _t1027 = prim $and01C4 (_t0FF2, _t1026);
  if _t1027 {
    real _t1028 = 0.e0;
    real _t1029 = prim max0125 (time0DA2, _t1028);
    real _t102A = (real)face0DA3;
    vec2 _t102B = [_t1029, _t102A];
    return _t102B;
  } else {
    real _t102C = -0.1e1;
    real _t102D = -0.1e1;
    vec2 _t102E = [_t102C, _t102D];
    return _t102E;
  }
}
function vec2#0 _exit102F (vec3 refPos0DA0, vec3 dPos0DA1, int i1030)
{
  real time1031 = +inf;
  int face1032 = -1;
  real faceTime1033 = -inf;
  real _t1034 = 0.57735026919e0;
  real _t1035 = 0.57735026919e0;
  real _t1036 = 0.57735026919e0;
  real _t1037 = 0.57735026919e0;
  vec3 _t1038 = [_t1035, _t1036, _t1037];
  real _t1039 = prim •00CE<$[3]; $[3]; $[]> (_t1038, refPos0DA0);
  real _t103A = prim -0026<$[]> (_t1034, _t1039);
  real _t103B = 0.57735026919e0;
  real _t103C = 0.57735026919e0;
  real _t103D = 0.57735026919e0;
  vec3 _t103E = [_t103B, _t103C, _t103D];
  real _t103F = prim •00CE<$[3]; $[3]; $[]> (_t103E, dPos0DA1);
  real _t1040 = prim /0055 (_t103A, _t103F);
  real _t1041 = -0.1e-7;
  bool _t1042 = prim >=007E (_t1040, _t1041);
  real _t1043 = 0.57735026919e0;
  real _t1044 = 0.57735026919e0;
  real _t1045 = 0.57735026919e0;
  real _t1046 = 0.57735026919e0;
  vec3 _t1047 = [_t1044, _t1045, _t1046];
  real _t1048 = prim •00CE<$[3]; $[3]; $[]> (_t1047, refPos0DA0);
  real _t1049 = prim -0026<$[]> (_t1043, _t1048);
  real _t104A = 0.57735026919e0;
  real _t104B = 0.57735026919e0;
  real _t104C = 0.57735026919e0;
  vec3 _t104D = [_t104A, _t104B, _t104C];
  real _t104E = prim •00CE<$[3]; $[3]; $[]> (_t104D, dPos0DA1);
  real _t104F = prim /0055 (_t1049, _t104E);
  bool _t1050 = prim >0080 (time1031, _t104F);
  real _t1051 = 0.57735026919e0;
  real _t1052 = 0.57735026919e0;
  real _t1053 = 0.57735026919e0;
  vec3 _t1054 = [_t1051, _t1052, _t1053];
  real _t1055 = prim •00CE<$[3]; $[3]; $[]> (_t1054, dPos0DA1);
  real _t1056 = prim |()|00B5<$[]> (_t1055);
  real _t1057 = 0.1e-7;
  bool _t1058 = prim >=007E (_t1056, _t1057);
  bool _t1059 = prim $and01C4 (_t1050, _t1058);
  bool _t105A = prim $and01C4 (_t1042, _t1059);
  if _t105A {
    int _t105B = 0;
    bool _t105C = prim !=0086 (i1030, _t105B);
    if _t105C {
      real _t105D = 0.57735026919e0;
      real _t105E = 0.57735026919e0;
      real _t105F = 0.57735026919e0;
      real _t1060 = 0.57735026919e0;
      vec3 _t1061 = [_t105E, _t105F, _t1060];
      real _t1062 = prim •00CE<$[3]; $[3]; $[]> (_t1061, refPos0DA0);
      real _t1063 = prim -0026<$[]> (_t105D, _t1062);
      real _t1064 = 0.57735026919e0;
      real _t1065 = 0.57735026919e0;
      real _t1066 = 0.57735026919e0;
      vec3 _t1067 = [_t1064, _t1065, _t1066];
      real _t1068 = prim •00CE<$[3]; $[3]; $[]> (_t1067, dPos0DA1);
      time1031 = prim /0055 (_t1063, _t1068);
      face1032 = 0;
    } else {
      real _t1069 = 0.57735026919e0;
      real _t106A = 0.57735026919e0;
      real _t106B = 0.57735026919e0;
      real _t106C = 0.57735026919e0;
      vec3 _t106D = [_t106A, _t106B, _t106C];
      real _t106E = prim •00CE<$[3]; $[3]; $[]> (_t106D, refPos0DA0);
      real _t106F = prim -0026<$[]> (_t1069, _t106E);
      real _t1070 = 0.57735026919e0;
      real _t1071 = 0.57735026919e0;
      real _t1072 = 0.57735026919e0;
      vec3 _t1073 = [_t1070, _t1071, _t1072];
      real _t1074 = prim •00CE<$[3]; $[3]; $[]> (_t1073, dPos0DA1);
      faceTime1033 = prim /0055 (_t106F, _t1074);
    }
  }
  real _t1075 = 0.e0;
  real _t1076 = -0.1e1;
  real _t1077 = 0.e0;
  real _t1078 = 0.e0;
  vec3 _t1079 = [_t1076, _t1077, _t1078];
  real _t107A = prim •00CE<$[3]; $[3]; $[]> (_t1079, refPos0DA0);
  real _t107B = prim -0026<$[]> (_t1075, _t107A);
  real _t107C = -0.1e1;
  real _t107D = 0.e0;
  real _t107E = 0.e0;
  vec3 _t107F = [_t107C, _t107D, _t107E];
  real _t1080 = prim •00CE<$[3]; $[3]; $[]> (_t107F, dPos0DA1);
  real _t1081 = prim /0055 (_t107B, _t1080);
  real _t1082 = -0.1e-7;
  bool _t1083 = prim >=007E (_t1081, _t1082);
  real _t1084 = 0.e0;
  real _t1085 = -0.1e1;
  real _t1086 = 0.e0;
  real _t1087 = 0.e0;
  vec3 _t1088 = [_t1085, _t1086, _t1087];
  real _t1089 = prim •00CE<$[3]; $[3]; $[]> (_t1088, refPos0DA0);
  real _t108A = prim -0026<$[]> (_t1084, _t1089);
  real _t108B = -0.1e1;
  real _t108C = 0.e0;
  real _t108D = 0.e0;
  vec3 _t108E = [_t108B, _t108C, _t108D];
  real _t108F = prim •00CE<$[3]; $[3]; $[]> (_t108E, dPos0DA1);
  real _t1090 = prim /0055 (_t108A, _t108F);
  bool _t1091 = prim >0080 (time1031, _t1090);
  real _t1092 = -0.1e1;
  real _t1093 = 0.e0;
  real _t1094 = 0.e0;
  vec3 _t1095 = [_t1092, _t1093, _t1094];
  real _t1096 = prim •00CE<$[3]; $[3]; $[]> (_t1095, dPos0DA1);
  real _t1097 = prim |()|00B5<$[]> (_t1096);
  real _t1098 = 0.1e-7;
  bool _t1099 = prim >=007E (_t1097, _t1098);
  bool _t109A = prim $and01C4 (_t1091, _t1099);
  bool _t109B = prim $and01C4 (_t1083, _t109A);
  if _t109B {
    int _t109C = 1;
    bool _t109D = prim !=0086 (i1030, _t109C);
    if _t109D {
      real _t109E = 0.e0;
      real _t109F = -0.1e1;
      real _t10A0 = 0.e0;
      real _t10A1 = 0.e0;
      vec3 _t10A2 = [_t109F, _t10A0, _t10A1];
      real _t10A3 = prim •00CE<$[3]; $[3]; $[]> (_t10A2, refPos0DA0);
      real _t10A4 = prim -0026<$[]> (_t109E, _t10A3);
      real _t10A5 = -0.1e1;
      real _t10A6 = 0.e0;
      real _t10A7 = 0.e0;
      vec3 _t10A8 = [_t10A5, _t10A6, _t10A7];
      real _t10A9 = prim •00CE<$[3]; $[3]; $[]> (_t10A8, dPos0DA1);
      time1031 = prim /0055 (_t10A4, _t10A9);
      face1032 = 1;
    } else {
      real _t10AA = 0.e0;
      real _t10AB = -0.1e1;
      real _t10AC = 0.e0;
      real _t10AD = 0.e0;
      vec3 _t10AE = [_t10AB, _t10AC, _t10AD];
      real _t10AF = prim •00CE<$[3]; $[3]; $[]> (_t10AE, refPos0DA0);
      real _t10B0 = prim -0026<$[]> (_t10AA, _t10AF);
      real _t10B1 = -0.1e1;
      real _t10B2 = 0.e0;
      real _t10B3 = 0.e0;
      vec3 _t10B4 = [_t10B1, _t10B2, _t10B3];
      real _t10B5 = prim •00CE<$[3]; $[3]; $[]> (_t10B4, dPos0DA1);
      faceTime1033 = prim /0055 (_t10B0, _t10B5);
    }
  }
  real _t10B6 = 0.e0;
  real _t10B7 = 0.e0;
  real _t10B8 = -0.1e1;
  real _t10B9 = 0.e0;
  vec3 _t10BA = [_t10B7, _t10B8, _t10B9];
  real _t10BB = prim •00CE<$[3]; $[3]; $[]> (_t10BA, refPos0DA0);
  real _t10BC = prim -0026<$[]> (_t10B6, _t10BB);
  real _t10BD = 0.e0;
  real _t10BE = -0.1e1;
  real _t10BF = 0.e0;
  vec3 _t10C0 = [_t10BD, _t10BE, _t10BF];
  real _t10C1 = prim •00CE<$[3]; $[3]; $[]> (_t10C0, dPos0DA1);
  real _t10C2 = prim /0055 (_t10BC, _t10C1);
  real _t10C3 = -0.1e-7;
  bool _t10C4 = prim >=007E (_t10C2, _t10C3);
  real _t10C5 = 0.e0;
  real _t10C6 = 0.e0;
  real _t10C7 = -0.1e1;
  real _t10C8 = 0.e0;
  vec3 _t10C9 = [_t10C6, _t10C7, _t10C8];
  real _t10CA = prim •00CE<$[3]; $[3]; $[]> (_t10C9, refPos0DA0);
  real _t10CB = prim -0026<$[]> (_t10C5, _t10CA);
  real _t10CC = 0.e0;
  real _t10CD = -0.1e1;
  real _t10CE = 0.e0;
  vec3 _t10CF = [_t10CC, _t10CD, _t10CE];
  real _t10D0 = prim •00CE<$[3]; $[3]; $[]> (_t10CF, dPos0DA1);
  real _t10D1 = prim /0055 (_t10CB, _t10D0);
  bool _t10D2 = prim >0080 (time1031, _t10D1);
  real _t10D3 = 0.e0;
  real _t10D4 = -0.1e1;
  real _t10D5 = 0.e0;
  vec3 _t10D6 = [_t10D3, _t10D4, _t10D5];
  real _t10D7 = prim •00CE<$[3]; $[3]; $[]> (_t10D6, dPos0DA1);
  real _t10D8 = prim |()|00B5<$[]> (_t10D7);
  real _t10D9 = 0.1e-7;
  bool _t10DA = prim >=007E (_t10D8, _t10D9);
  bool _t10DB = prim $and01C4 (_t10D2, _t10DA);
  bool _t10DC = prim $and01C4 (_t10C4, _t10DB);
  if _t10DC {
    int _t10DD = 2;
    bool _t10DE = prim !=0086 (i1030, _t10DD);
    if _t10DE {
      real _t10DF = 0.e0;
      real _t10E0 = 0.e0;
      real _t10E1 = -0.1e1;
      real _t10E2 = 0.e0;
      vec3 _t10E3 = [_t10E0, _t10E1, _t10E2];
      real _t10E4 = prim •00CE<$[3]; $[3]; $[]> (_t10E3, refPos0DA0);
      real _t10E5 = prim -0026<$[]> (_t10DF, _t10E4);
      real _t10E6 = 0.e0;
      real _t10E7 = -0.1e1;
      real _t10E8 = 0.e0;
      vec3 _t10E9 = [_t10E6, _t10E7, _t10E8];
      real _t10EA = prim •00CE<$[3]; $[3]; $[]> (_t10E9, dPos0DA1);
      time1031 = prim /0055 (_t10E5, _t10EA);
      face1032 = 2;
    } else {
      real _t10EB = 0.e0;
      real _t10EC = 0.e0;
      real _t10ED = -0.1e1;
      real _t10EE = 0.e0;
      vec3 _t10EF = [_t10EC, _t10ED, _t10EE];
      real _t10F0 = prim •00CE<$[3]; $[3]; $[]> (_t10EF, refPos0DA0);
      real _t10F1 = prim -0026<$[]> (_t10EB, _t10F0);
      real _t10F2 = 0.e0;
      real _t10F3 = -0.1e1;
      real _t10F4 = 0.e0;
      vec3 _t10F5 = [_t10F2, _t10F3, _t10F4];
      real _t10F6 = prim •00CE<$[3]; $[3]; $[]> (_t10F5, dPos0DA1);
      faceTime1033 = prim /0055 (_t10F1, _t10F6);
    }
  }
  real _t10F7 = 0.e0;
  real _t10F8 = 0.e0;
  real _t10F9 = 0.e0;
  real _t10FA = -0.1e1;
  vec3 _t10FB = [_t10F8, _t10F9, _t10FA];
  real _t10FC = prim •00CE<$[3]; $[3]; $[]> (_t10FB, refPos0DA0);
  real _t10FD = prim -0026<$[]> (_t10F7, _t10FC);
  real _t10FE = 0.e0;
  real _t10FF = 0.e0;
  real _t1100 = -0.1e1;
  vec3 _t1101 = [_t10FE, _t10FF, _t1100];
  real _t1102 = prim •00CE<$[3]; $[3]; $[]> (_t1101, dPos0DA1);
  real _t1103 = prim /0055 (_t10FD, _t1102);
  real _t1104 = -0.1e-7;
  bool _t1105 = prim >=007E (_t1103, _t1104);
  real _t1106 = 0.e0;
  real _t1107 = 0.e0;
  real _t1108 = 0.e0;
  real _t1109 = -0.1e1;
  vec3 _t110A = [_t1107, _t1108, _t1109];
  real _t110B = prim •00CE<$[3]; $[3]; $[]> (_t110A, refPos0DA0);
  real _t110C = prim -0026<$[]> (_t1106, _t110B);
  real _t110D = 0.e0;
  real _t110E = 0.e0;
  real _t110F = -0.1e1;
  vec3 _t1110 = [_t110D, _t110E, _t110F];
  real _t1111 = prim •00CE<$[3]; $[3]; $[]> (_t1110, dPos0DA1);
  real _t1112 = prim /0055 (_t110C, _t1111);
  bool _t1113 = prim >0080 (time1031, _t1112);
  real _t1114 = 0.e0;
  real _t1115 = 0.e0;
  real _t1116 = -0.1e1;
  vec3 _t1117 = [_t1114, _t1115, _t1116];
  real _t1118 = prim •00CE<$[3]; $[3]; $[]> (_t1117, dPos0DA1);
  real _t1119 = prim |()|00B5<$[]> (_t1118);
  real _t111A = 0.1e-7;
  bool _t111B = prim >=007E (_t1119, _t111A);
  bool _t111C = prim $and01C4 (_t1113, _t111B);
  bool _t111D = prim $and01C4 (_t1105, _t111C);
  if _t111D {
    int _t111E = 3;
    bool _t111F = prim !=0086 (i1030, _t111E);
    if _t111F {
      real _t1120 = 0.e0;
      real _t1121 = 0.e0;
      real _t1122 = 0.e0;
      real _t1123 = -0.1e1;
      vec3 _t1124 = [_t1121, _t1122, _t1123];
      real _t1125 = prim •00CE<$[3]; $[3]; $[]> (_t1124, refPos0DA0);
      real _t1126 = prim -0026<$[]> (_t1120, _t1125);
      real _t1127 = 0.e0;
      real _t1128 = 0.e0;
      real _t1129 = -0.1e1;
      vec3 _t112A = [_t1127, _t1128, _t1129];
      real _t112B = prim •00CE<$[3]; $[3]; $[]> (_t112A, dPos0DA1);
      time1031 = prim /0055 (_t1126, _t112B);
      face1032 = 3;
    } else {
      real _t112C = 0.e0;
      real _t112D = 0.e0;
      real _t112E = 0.e0;
      real _t112F = -0.1e1;
      vec3 _t1130 = [_t112D, _t112E, _t112F];
      real _t1131 = prim •00CE<$[3]; $[3]; $[]> (_t1130, refPos0DA0);
      real _t1132 = prim -0026<$[]> (_t112C, _t1131);
      real _t1133 = 0.e0;
      real _t1134 = 0.e0;
      real _t1135 = -0.1e1;
      vec3 _t1136 = [_t1133, _t1134, _t1135];
      real _t1137 = prim •00CE<$[3]; $[3]; $[]> (_t1136, dPos0DA1);
      faceTime1033 = prim /0055 (_t1132, _t1137);
    }
  }
  int _t1138 = -1;
  bool _t1139 = prim !=0086 (face1032, _t1138);
  real _t113A = 0.1e1;
  real _t113B = 0.1e-7;
  real _t113C = prim +0017<$[]> (_t113A, _t113B);
  real _t113D = 0.1e1;
  real _t113E = 0.1e1;
  real _t113F = 0.1e1;
  vec3 _t1140 = [_t113D, _t113E, _t113F];
  real _t1141 = 0.e0;
  real _t1142 = prim max0125 (time1031, _t1141);
  vec3 _t1143 = prim *0038<$[3]> (dPos0DA1, _t1142);
  vec3 _t1144 = prim +0017<$[3]> (refPos0DA0, _t1143);
  real _t1145 = prim •00CE<$[3]; $[3]; $[]> (_t1140, _t1144);
  bool _t1146 = prim >0080 (_t113C, _t1145);
  real _t1147 = 0.1e-7;
  real _t1148 = 0.1e-7;
  real _t1149 = 0.1e-7;
  vec3 _t114A = [_t1147, _t1148, _t1149];
  real _t114B = 0.e0;
  real _t114C = prim max0125 (time1031, _t114B);
  vec3 _t114D = prim *0038<$[3]> (dPos0DA1, _t114C);
  vec3 _t114E = prim +0017<$[3]> (refPos0DA0, _t114D);
  vec3 _t114F = prim +0017<$[3]> (_t114A, _t114E);
  real _t1150 = _t114F[0];
  real _t1151 = -0.e0;
  bool _t1152 = prim >0080 (_t1150, _t1151);
  real _t1153 = 0.1e-7;
  real _t1154 = 0.1e-7;
  real _t1155 = 0.1e-7;
  vec3 _t1156 = [_t1153, _t1154, _t1155];
  real _t1157 = 0.e0;
  real _t1158 = prim max0125 (time1031, _t1157);
  vec3 _t1159 = prim *0038<$[3]> (dPos0DA1, _t1158);
  vec3 _t115A = prim +0017<$[3]> (refPos0DA0, _t1159);
  vec3 _t115B = prim +0017<$[3]> (_t1156, _t115A);
  real _t115C = _t115B[1];
  real _t115D = -0.e0;
  bool _t115E = prim >0080 (_t115C, _t115D);
  real _t115F = 0.1e-7;
  real _t1160 = 0.1e-7;
  real _t1161 = 0.1e-7;
  vec3 _t1162 = [_t115F, _t1160, _t1161];
  real _t1163 = 0.e0;
  real _t1164 = prim max0125 (time1031, _t1163);
  vec3 _t1165 = prim *0038<$[3]> (dPos0DA1, _t1164);
  vec3 _t1166 = prim +0017<$[3]> (refPos0DA0, _t1165);
  vec3 _t1167 = prim +0017<$[3]> (_t1162, _t1166);
  real _t1168 = _t1167[2];
  real _t1169 = -0.e0;
  bool _t116A = prim >0080 (_t1168, _t1169);
  bool _t116B = prim $and01C4 (_t115E, _t116A);
  bool _t116C = prim $and01C4 (_t1152, _t116B);
  bool _t116D = prim $and01C4 (_t1146, _t116C);
  bool _t116E = prim $and01C4 (_t1139, _t116D);
  if _t116E {
    real _t116F = 0.e0;
    real _t1170 = prim max0125 (time1031, _t116F);
    real _t1171 = (real)face1032;
    vec2 _t1172 = [_t1170, _t1171];
    return _t1172;
  } else {
    real _t1173 = -inf;
    bool _t1174 = prim ==0084 (_t1173, faceTime1033);
    if _t1174 {
      real _t1175 = -0.1e1;
      real _t1176 = -0.1e1;
      vec2 _t1177 = [_t1175, _t1176];
      return _t1177;
    } else {
      real _t1178 = 0.e0;
      real _t1179 = prim max0125 (faceTime1033, _t1178);
      real _t117A = (real)i1030;
      vec2 _t117B = [_t1179, _t117A];
      return _t117B;
    }
  }
}
function Femdata: Mesh#0 domain117E (Femdata: Space arg0117F)
{
  Femdata: Mesh _t1180 = extractFem(arg0117F, Mesh);
  return _t1180;
}
function Femdata: Space#0 space1181 (Femdata: FemFunc arg01182)
{
  Femdata: Space _t1183 = extractFem(arg01182, Space);
  return _t1183;
}
function Femdata: FuncCell#0 funcCell1184 (Femdata: FemFunc arg01185, Femdata: MeshCell arg11186)
{
  int _t1187 = extractFemItem(CellIndex(MeshCell), int, arg11186);
  Femdata: FuncCell _t1188 = loadFem(FuncCell, arg01185, _t1187);
  return _t1188;
}
function bool#1 insideTest1196 (vec3 x1197)
{
  real _t1198 = 0.e0;
  real _t1199 = 0.e0;
  real _t119A = 0.e0;
  vec3 _t119B = [_t1198, _t1199, _t119A];
  vec3 mid119C = prim -0026<$[3]> (x1197, _t119B);
  bool _t119D;
  real _t119E = mid119C[0];
  real _t119F = prim |()|00B5<$[]> (_t119E);
  real _t11A0 = 0.4e1;
  bool _t11A1 = prim <=007C (_t119F, _t11A0);
  if _t11A1 {
    bool _t11A2;
    real _t11A3 = mid119C[1];
    real _t11A4 = prim |()|00B5<$[]> (_t11A3);
    real _t11A5 = 0.4e1;
    bool _t11A6 = prim <=007C (_t11A4, _t11A5);
    if _t11A6 {
      real _t11A7 = mid119C[2];
      real _t11A8 = prim |()|00B5<$[]> (_t11A7);
      real _t11A9 = 0.4e1;
      _t11A2 = prim <=007C (_t11A8, _t11A9);
    } else {
      _t11A2 = false;
    }
    _t119D = _t11A2;
  } else {
    _t119D = false;
  }
  return _t119D;
}
function vec3#3 fStep11AA (vec3 s11AB)
{
  real x11AC = s11AB[0];
  real y11AD = s11AB[1];
  real z11AE = s11AB[2];
  real _t11AF = 0.2e1;
  real _t11B0 = 0.2e1;
  real _t11B1 = 0.3e1;
  int _t11B2 = 2;
  real _t11B3 = prim ^0068 (x11AC, _t11B2);
  real _t11B4 = prim *0034 (_t11B1, _t11B3);
  real _t11B5 = prim -0026<$[]> (_t11B0, _t11B4);
  int _t11B6 = 2;
  real _t11B7 = prim ^0068 (_t11B5, _t11B6);
  real _t11B8 = prim *0034 (_t11AF, _t11B7);
  real _t11B9 = 0.12e2;
  real _t11BA = prim *0034 (_t11B9, x11AC);
  int _t11BB = 3;
  real _t11BC = prim ^0068 (x11AC, _t11BB);
  real _t11BD = prim unary -008B<$[]> (_t11BC);
  real _t11BE = 0.2e1;
  real _t11BF = prim *0034 (_t11BE, x11AC);
  real _t11C0 = prim +0017<$[]> (_t11BD, _t11BF);
  real _t11C1 = prim +0017<$[]> (_t11C0, y11AD);
  real _t11C2 = prim *0034 (_t11BA, _t11C1);
  real _t11C3 = prim -0026<$[]> (_t11B8, _t11C2);
  real _t11C4 = 0.2e1;
  real _t11C5 = 0.2e1;
  real _t11C6 = 0.3e1;
  int _t11C7 = 2;
  real _t11C8 = prim ^0068 (x11AC, _t11C7);
  real _t11C9 = prim *0034 (_t11C6, _t11C8);
  real _t11CA = prim -0026<$[]> (_t11C5, _t11C9);
  real _t11CB = prim *0034 (_t11C4, _t11CA);
  real _t11CC = 0.e0;
  vec3 _t11CD = [_t11C3, _t11CB, _t11CC];
  real _t11CE = 0.2e1;
  real _t11CF = 0.2e1;
  real _t11D0 = 0.3e1;
  int _t11D1 = 2;
  real _t11D2 = prim ^0068 (x11AC, _t11D1);
  real _t11D3 = prim *0034 (_t11D0, _t11D2);
  real _t11D4 = prim -0026<$[]> (_t11CF, _t11D3);
  real _t11D5 = prim *0034 (_t11CE, _t11D4);
  real _t11D6 = 0.2e1;
  real _t11D7 = 0.e0;
  vec3 _t11D8 = [_t11D5, _t11D6, _t11D7];
  real _t11D9 = 0.e0;
  real _t11DA = 0.e0;
  real _t11DB = 0.2e1;
  real _t11DC = prim *0034 (_t11DB, zfuz085C);
  vec3 _t11DD = [_t11D9, _t11DA, _t11DC];
  tensor[3,3] H11DE = [_t11CD, _t11D8, _t11DD];
  real _t11DF = 0.2e1;
  real _t11E0 = 0.2e1;
  real _t11E1 = 0.3e1;
  int _t11E2 = 2;
  real _t11E3 = prim ^0068 (x11AC, _t11E2);
  real _t11E4 = prim *0034 (_t11E1, _t11E3);
  real _t11E5 = prim -0026<$[]> (_t11E0, _t11E4);
  real _t11E6 = prim *0034 (_t11DF, _t11E5);
  int _t11E7 = 3;
  real _t11E8 = prim ^0068 (x11AC, _t11E7);
  real _t11E9 = prim unary -008B<$[]> (_t11E8);
  real _t11EA = 0.2e1;
  real _t11EB = prim *0034 (_t11EA, x11AC);
  real _t11EC = prim +0017<$[]> (_t11E9, _t11EB);
  real _t11ED = prim +0017<$[]> (_t11EC, y11AD);
  real _t11EE = prim *0034 (_t11E6, _t11ED);
  real _t11EF = 0.2e1;
  int _t11F0 = 3;
  real _t11F1 = prim ^0068 (x11AC, _t11F0);
  real _t11F2 = prim unary -008B<$[]> (_t11F1);
  real _t11F3 = 0.2e1;
  real _t11F4 = prim *0034 (_t11F3, x11AC);
  real _t11F5 = prim +0017<$[]> (_t11F2, _t11F4);
  real _t11F6 = prim +0017<$[]> (_t11F5, y11AD);
  real _t11F7 = prim *0034 (_t11EF, _t11F6);
  real _t11F8 = 0.2e1;
  real _t11F9 = prim *0034 (_t11F8, zfuz085C);
  real _t11FA = prim *0034 (_t11F9, z11AE);
  vec3 g11FB = [_t11EE, _t11F7, _t11FA];
  vec3[3] E11FC = prim evecs00A0 (H11DE);
  real[3] L11FD = prim evals009F (H11DE);
  real _t11FE = 0.1e1;
  int _t11FF = 0;
  real _t1200 = prim $sub01C0<real; %3> (L11FD, _t11FF);
  real _t1201 = prim /0055 (_t11FE, _t1200);
  real _t1202 = prim unary -008B<$[]> (_t1201);
  int _t1203 = 0;
  vec3 _t1204 = prim $sub01C0<vec3; %3> (E11FC, _t1203);
  vec3 _t1205 = prim *0036<$[3]> (_t1202, _t1204);
  int _t1206 = 0;
  vec3 _t1207 = prim $sub01C0<vec3; %3> (E11FC, _t1206);
  tensor[3,3] _t1208 = prim ⊗00E5<$[3]; $[3]; $[3,3]> (_t1205, _t1207);
  vec3 up1209 = prim •00CE<$[3,3]; $[3]; $[3]> (_t1208, g11FB);
  bool _t120A;
  real _t120B = up1209[0];
  real _t120C = up1209[0];
  bool _t120D = prim ==0084 (_t120B, _t120C);
  bool _t120E = prim !00BC (_t120D);
  if _t120E {
    _t120A = true;
  } else {
    bool _t120F;
    real _t1210 = up1209[1];
    real _t1211 = up1209[1];
    bool _t1212 = prim ==0084 (_t1210, _t1211);
    bool _t1213 = prim !00BC (_t1212);
    if _t1213 {
      _t120F = true;
    } else {
      real _t1214 = up1209[2];
      real _t1215 = up1209[2];
      bool _t1216 = prim ==0084 (_t1214, _t1215);
      _t120F = prim !00BC (_t1216);
    }
    _t120A = _t120F;
  }
  if _t120A {
    real _t1217 = +inf;
    real _t1218 = +inf;
    real _t1219 = +inf;
    vec3 _t121A = [_t1217, _t1218, _t1219];
    return _t121A;
  }
  return up1209;
}
function bool#4 posNanCheck121B (vec3 up121C)
{
  bool _t121D;
  real _t121E = up121C[0];
  real _t121F = up121C[0];
  bool _t1220 = prim ==0084 (_t121E, _t121F);
  bool _t1221 = prim !00BC (_t1220);
  if _t1221 {
    _t121D = true;
  } else {
    bool _t1222;
    real _t1223 = up121C[1];
    real _t1224 = up121C[1];
    bool _t1225 = prim ==0084 (_t1223, _t1224);
    bool _t1226 = prim !00BC (_t1225);
    if _t1226 {
      _t1222 = true;
    } else {
      real _t1227 = up121C[2];
      real _t1228 = up121C[2];
      bool _t1229 = prim ==0084 (_t1227, _t1228);
      _t1222 = prim !00BC (_t1229);
    }
    _t121D = _t1222;
  }
  return _t121D;
}
function tensor[3,3]#1 fPerp122A (vec3 s122B)
{
  real x122C = s122B[0];
  real y122D = s122B[1];
  real z122E = s122B[2];
  real _t122F = 0.2e1;
  real _t1230 = 0.2e1;
  real _t1231 = 0.3e1;
  int _t1232 = 2;
  real _t1233 = prim ^0068 (x122C, _t1232);
  real _t1234 = prim *0034 (_t1231, _t1233);
  real _t1235 = prim -0026<$[]> (_t1230, _t1234);
  int _t1236 = 2;
  real _t1237 = prim ^0068 (_t1235, _t1236);
  real _t1238 = prim *0034 (_t122F, _t1237);
  real _t1239 = 0.12e2;
  real _t123A = prim *0034 (_t1239, x122C);
  int _t123B = 3;
  real _t123C = prim ^0068 (x122C, _t123B);
  real _t123D = prim unary -008B<$[]> (_t123C);
  real _t123E = 0.2e1;
  real _t123F = prim *0034 (_t123E, x122C);
  real _t1240 = prim +0017<$[]> (_t123D, _t123F);
  real _t1241 = prim +0017<$[]> (_t1240, y122D);
  real _t1242 = prim *0034 (_t123A, _t1241);
  real _t1243 = prim -0026<$[]> (_t1238, _t1242);
  real _t1244 = 0.2e1;
  real _t1245 = 0.2e1;
  real _t1246 = 0.3e1;
  int _t1247 = 2;
  real _t1248 = prim ^0068 (x122C, _t1247);
  real _t1249 = prim *0034 (_t1246, _t1248);
  real _t124A = prim -0026<$[]> (_t1245, _t1249);
  real _t124B = prim *0034 (_t1244, _t124A);
  real _t124C = 0.e0;
  vec3 _t124D = [_t1243, _t124B, _t124C];
  real _t124E = 0.2e1;
  real _t124F = 0.2e1;
  real _t1250 = 0.3e1;
  int _t1251 = 2;
  real _t1252 = prim ^0068 (x122C, _t1251);
  real _t1253 = prim *0034 (_t1250, _t1252);
  real _t1254 = prim -0026<$[]> (_t124F, _t1253);
  real _t1255 = prim *0034 (_t124E, _t1254);
  real _t1256 = 0.2e1;
  real _t1257 = 0.e0;
  vec3 _t1258 = [_t1255, _t1256, _t1257];
  real _t1259 = 0.e0;
  real _t125A = 0.e0;
  real _t125B = 0.2e1;
  real _t125C = prim *0034 (_t125B, zfuz085C);
  vec3 _t125D = [_t1259, _t125A, _t125C];
  tensor[3,3] H125E = [_t124D, _t1258, _t125D];
  vec3[3] _t125F = prim evecs00A0 (H125E);
  int _t1260 = 0;
  vec3 E21261 = prim $sub01C0<vec3; %3> (_t125F, _t1260);
  tensor[3,3] _t1262 = prim $id01B9<%3> ();
  tensor[3,3] _t1263 = prim ⊗00E5<$[3]; $[3]; $[3,3]> (E21261, E21261);
  tensor[3,3] m1264 = prim -0026<$[3,3]> (_t1262, _t1263);
  real t1265 = prim :00FC<$[3,3]; $[3,3]; $[]> (m1264, m1264);
  bool _t1266 = prim ==0084 (t1265, t1265);
  bool _t1267 = prim !00BC (_t1266);
  if _t1267 {
    tensor[3,3] _t1268 = prim $zero01BB<$[3,3]> ();
    return _t1268;
  }
  return m1264;
}
function real#1 fStrength1269 (vec3 s126A)
{
  real x126B = s126A[0];
  real y126C = s126A[1];
  real z126D = s126A[2];
  real _t126E = 0.2e1;
  real _t126F = 0.2e1;
  real _t1270 = 0.3e1;
  int _t1271 = 2;
  real _t1272 = prim ^0068 (x126B, _t1271);
  real _t1273 = prim *0034 (_t1270, _t1272);
  real _t1274 = prim -0026<$[]> (_t126F, _t1273);
  int _t1275 = 2;
  real _t1276 = prim ^0068 (_t1274, _t1275);
  real _t1277 = prim *0034 (_t126E, _t1276);
  real _t1278 = 0.12e2;
  real _t1279 = prim *0034 (_t1278, x126B);
  int _t127A = 3;
  real _t127B = prim ^0068 (x126B, _t127A);
  real _t127C = prim unary -008B<$[]> (_t127B);
  real _t127D = 0.2e1;
  real _t127E = prim *0034 (_t127D, x126B);
  real _t127F = prim +0017<$[]> (_t127C, _t127E);
  real _t1280 = prim +0017<$[]> (_t127F, y126C);
  real _t1281 = prim *0034 (_t1279, _t1280);
  real _t1282 = prim -0026<$[]> (_t1277, _t1281);
  real _t1283 = 0.2e1;
  real _t1284 = 0.2e1;
  real _t1285 = 0.3e1;
  int _t1286 = 2;
  real _t1287 = prim ^0068 (x126B, _t1286);
  real _t1288 = prim *0034 (_t1285, _t1287);
  real _t1289 = prim -0026<$[]> (_t1284, _t1288);
  real _t128A = prim *0034 (_t1283, _t1289);
  real _t128B = 0.e0;
  vec3 _t128C = [_t1282, _t128A, _t128B];
  real _t128D = 0.2e1;
  real _t128E = 0.2e1;
  real _t128F = 0.3e1;
  int _t1290 = 2;
  real _t1291 = prim ^0068 (x126B, _t1290);
  real _t1292 = prim *0034 (_t128F, _t1291);
  real _t1293 = prim -0026<$[]> (_t128E, _t1292);
  real _t1294 = prim *0034 (_t128D, _t1293);
  real _t1295 = 0.2e1;
  real _t1296 = 0.e0;
  vec3 _t1297 = [_t1294, _t1295, _t1296];
  real _t1298 = 0.e0;
  real _t1299 = 0.e0;
  real _t129A = 0.2e1;
  real _t129B = prim *0034 (_t129A, zfuz085C);
  vec3 _t129C = [_t1298, _t1299, _t129B];
  tensor[3,3] H129D = [_t128C, _t1297, _t129C];
  real _t129E = 0.2e1;
  real _t129F = 0.2e1;
  real _t12A0 = 0.3e1;
  int _t12A1 = 2;
  real _t12A2 = prim ^0068 (x126B, _t12A1);
  real _t12A3 = prim *0034 (_t12A0, _t12A2);
  real _t12A4 = prim -0026<$[]> (_t129F, _t12A3);
  real _t12A5 = prim *0034 (_t129E, _t12A4);
  int _t12A6 = 3;
  real _t12A7 = prim ^0068 (x126B, _t12A6);
  real _t12A8 = prim unary -008B<$[]> (_t12A7);
  real _t12A9 = 0.2e1;
  real _t12AA = prim *0034 (_t12A9, x126B);
  real _t12AB = prim +0017<$[]> (_t12A8, _t12AA);
  real _t12AC = prim +0017<$[]> (_t12AB, y126C);
  real _t12AD = prim *0034 (_t12A5, _t12AC);
  real _t12AE = 0.2e1;
  int _t12AF = 3;
  real _t12B0 = prim ^0068 (x126B, _t12AF);
  real _t12B1 = prim unary -008B<$[]> (_t12B0);
  real _t12B2 = 0.2e1;
  real _t12B3 = prim *0034 (_t12B2, x126B);
  real _t12B4 = prim +0017<$[]> (_t12B1, _t12B3);
  real _t12B5 = prim +0017<$[]> (_t12B4, y126C);
  real _t12B6 = prim *0034 (_t12AE, _t12B5);
  real _t12B7 = 0.2e1;
  real _t12B8 = prim *0034 (_t12B7, zfuz085C);
  real _t12B9 = prim *0034 (_t12B8, z126D);
  vec3 g12BA = [_t12AD, _t12B6, _t12B9];
  real[3] _t12BB = prim evals009F (H129D);
  int _t12BC = 0;
  real _t12BD = prim $sub01C0<real; %3> (_t12BB, _t12BC);
  real _t12BE = prim |()|00B5<$[3]> (g12BA);
  real _t12BF = prim +0017<$[]> (fBias085A, _t12BE);
  real _t12C0 = prim /0055 (_t12BD, _t12BF);
  return _t12C0;
}
function real#1 phi12C1 (real r12C2)
{
  real _t12C3 = 0.1e1;
  real _t12C4 = prim -0026<$[]> (_t12C3, r12C2);
  int _t12C5 = 4;
  real _t12C6 = prim ^0068 (_t12C4, _t12C5);
  return _t12C6;
}
function real#1 phi'12C7 (real r12C8)
{
  int _t12C9 = -4;
  real _t12CA = (real)_t12C9;
  real _t12CB = 0.1e1;
  real _t12CC = prim -0026<$[]> (_t12CB, r12C8);
  int _t12CD = 3;
  real _t12CE = prim ^0068 (_t12CC, _t12CD);
  real _t12CF = prim *0034 (_t12CA, _t12CE);
  return _t12CF;
}
function real#2 enr12D0 (vec3 x12D1)
{
  real _t12D2 = prim |()|00B5<$[3]> (x12D1);
  real _t12D3 = prim /0055 (_t12D2, rad0857);
  real _t12D4 = func phi12C1 (_t12D3);
  return _t12D4;
}
function vec3#1 frc12D5 (vec3 x12D6)
{
  real _t12D7 = prim |()|00B5<$[3]> (x12D6);
  real _t12D8 = prim /0055 (_t12D7, rad0857);
  real _t12D9 = func phi'12C7 (_t12D8);
  real _t12DA = 0.1e1;
  real _t12DB = prim /0055 (_t12DA, rad0857);
  real _t12DC = prim *0034 (_t12D9, _t12DB);
  vec3 _t12DD = prim *0036<$[3]> (_t12DC, x12D6);
  real _t12DE = prim |()|00B5<$[3]> (x12D6);
  vec3 _t12DF = prim /0057<$[3]> (_t12DD, _t12DE);
  return _t12DF;
}
function bool#3 posTest12E0 (vec3 pos12E1)
{
  bool _t12E2;
  bool _t12E3 = func insideTest1196 (pos12E1);
  if _t12E3 {
    bool _t12E4;
    bool _t12E5 = func posNanCheck121B (pos12E1);
    bool _t12E6 = prim !00BC (_t12E5);
    if _t12E6 {
      real _t12E7 = func fStrength1269 (pos12E1);
      _t12E4 = prim >=007E (_t12E7, fStren085B);
    } else {
      _t12E4 = false;
    }
    _t12E2 = _t12E4;
  } else {
    _t12E2 = false;
  }
  return _t12E2;
}
globalInit {
  int _t084B = 0;
  int _t0849 = 1;
  int _t084D = extractFemItem(NumCell(Mesh), int, meshData0847);
  int _t084C = prim -0024 (_t084D, _t0849);
  int[] _t0850 = prim $range01C3 (_t084B, _t084C);
  Femdata: MeshCell[] _t0851 = {};
  foreach _t084F in _t0850 {
    Femdata: MeshCell _t0852 = loadFem(MeshCell, meshData0847, _t084F);
    _t0851 = prim @0010<Femdata: MeshCell> (_t0851, _t0852);
  }
  simplex1195 = func refcell08B4 (meshData0847);
}
strand particle (vec3 pos012E8, real hh012E9) in 3D {
  output vec3 pos12EA;
  output vec3 _pos12EB;
  real hh12EC;
  vec3 step12ED;
  bool found12EE;
  int nfs12EF;
  int test12F0;
  int testp12F1;
  int steps12F2;
  {
    pos12EA = pos012E8;
    _pos12EB = pos12EA;
    hh12EC = hh012E9;
    step12ED = prim $zero01BB<$[3]> ();
    found12EE = false;
    nfs12EF = 0;
    test12F0 = 1;
    testp12F1 = 0;
    steps12F2 = 0;
  }
  update
  {
    int _t12F3 = 1;
    steps12F2 = prim +0015 (steps12F2, _t12F3);
    bool _t12F4 = func posTest12E0 (pos12EA);
    bool _t12F5 = prim !00BC (_t12F4);
    if _t12F5 {
      die;
    }
    bool _t12F6 = prim !00BC (found12EE);
    if _t12F6 {
      step12ED = func fStep11AA (pos12EA);
      pos12EA = prim +0017<$[3]> (pos12EA, step12ED);
      _pos12EB = pos12EA;
      bool _t12F7 = func posNanCheck121B (pos12EA);
      if _t12F7 {
        die;
      }
      real _t12F8 = prim |()|00B5<$[3]> (step12ED);
      real _t12F9 = prim /0055 (_t12F8, rad0857);
      bool _t12FA = prim >0080 (_t12F9, eps0858);
      if _t12FA {
        int _t12FB = 1;
        nfs12EF = prim +0015 (nfs12EF, _t12FB);
        int _t12FC = 10;
        bool _t12FD = prim >007F (nfs12EF, _t12FC);
        if _t12FD {
          die;
        }
      } else {
        found12EE = true;
        testp12F1 = 1;
      }
    } else {
      vec3 _t12FE = func fStep11AA (pos12EA);
      pos12EA = prim +0017<$[3]> (pos12EA, _t12FE);
      _pos12EB = pos12EA;
      bool _t12FF = func posNanCheck121B (pos12EA);
      if _t12FF {
        die;
      }
      step12ED = prim $zero01BB<$[3]> ();
      real oldE1300 = 0.e0;
      vec3 force1301 = prim $zero01BB<$[3]> ();
      int nn1302 = 0;
      particle[] _t1303 = prim sphere0198<particle> (_pos12EB, rad0857);
      foreach P1304 in _t1303 {
        vec3 _t1305 = P1304.pos12EA;
        vec3 _t1306 = prim -0026<$[3]> (_t1305, pos12EA);
        real _t1307 = func enr12D0 (_t1306);
        oldE1300 = prim +0017<$[]> (oldE1300, _t1307);
        vec3 _t1308 = P1304.pos12EA;
        vec3 _t1309 = prim -0026<$[3]> (_t1308, pos12EA);
        vec3 _t130A = func frc12D5 (_t1309);
        force1301 = prim +0017<$[3]> (force1301, _t130A);
        int _t130B = 1;
        nn1302 = prim +0015 (nn1302, _t130B);
      }
      int _t130C = 0;
      bool _t130D = prim ==0082 (_t130C, nn1302);
      if _t130D {
        real _t130E = 0.5e0;
        real _t130F = prim *0034 (_t130E, rad0857);
        real _t1310 = 0.e0;
        real _t1311 = 0.e0;
        vec3 _t1312 = [_t130F, _t1310, _t1311];
        vec3 npos1313 = prim +0017<$[3]> (pos12EA, _t1312);
        bool _t1314 = func posTest12E0 (npos1313);
        if _t1314 {
          new particle (npos1313, hh12EC);
        }
        continue;
      }
      tensor[3,3] _t1315 = func fPerp122A (pos12EA);
      force1301 = prim •00CE<$[3,3]; $[3]; $[3]> (_t1315, force1301);
      vec3 es1316 = prim *0036<$[3]> (hh12EC, force1301);
      real _t1317 = prim |()|00B5<$[3]> (es1316);
      bool _t1318 = prim >0080 (_t1317, rad0857);
      if _t1318 {
        real _t1319 = prim |()|00B5<$[3]> (es1316);
        real _t131A = prim /0055 (rad0857, _t1319);
        hh12EC = prim *0034 (hh12EC, _t131A);
        real _t131B = prim |()|00B5<$[3]> (es1316);
        real _t131C = prim /0055 (rad0857, _t131B);
        es1316 = prim *0038<$[3]> (es1316, _t131C);
      }
      vec3 samplePos131D = prim +0017<$[3]> (pos12EA, es1316);
      vec3 fs131E = func fStep11AA (samplePos131D);
      real _t131F = prim |()|00B5<$[3]> (fs131E);
      real _t1320 = prim |()|00B5<$[3]> (es1316);
      real _t1321 = prim /0055 (_t131F, _t1320);
      real _t1322 = 0.5e0;
      bool _t1323 = prim >0080 (_t1321, _t1322);
      if _t1323 {
        real _t1324 = 0.5e0;
        hh12EC = prim *0034 (hh12EC, _t1324);
        continue;
      }
      vec3 oldPos1325 = pos12EA;
      vec3 up1326 = prim +0017<$[3]> (fs131E, es1316);
      pos12EA = prim +0017<$[3]> (pos12EA, up1326);
      _pos12EB = pos12EA;
      particle[] _t1327 = prim sphere0198<particle> (_pos12EB, rad0857);
      real accum132C = 0.e0;
      foreach P1328 in _t1327 {
        vec3 _t1329 = P1328.pos12EA;
        vec3 _t132A = prim -0026<$[3]> (pos12EA, _t1329);
        real _t132B = func enr12D0 (_t132A);
        accum132C = prim +0017<$[]> (accum132C, _t132B);
      }
      real newE132D = accum132C;
      real _t132E = prim -0026<$[]> (newE132D, oldE1300);
      real _t132F = 0.5e0;
      vec3 _t1330 = prim -0026<$[3]> (pos12EA, oldPos1325);
      vec3 _t1331 = prim *0036<$[3]> (_t132F, _t1330);
      vec3 _t1332 = prim unary -008B<$[3]> (force1301);
      real _t1333 = prim •00CE<$[3]; $[3]; $[]> (_t1331, _t1332);
      bool _t1334 = prim >0080 (_t132E, _t1333);
      if _t1334 {
        pos12EA = oldPos1325;
        _pos12EB = pos12EA;
        real _t1335 = 0.5e0;
        hh12EC = prim *0034 (hh12EC, _t1335);
        continue;
      }
      real _t1336 = 0.11e1;
      hh12EC = prim *0034 (hh12EC, _t1336);
      step12ED = up1326;
      bool _t1337 = func posNanCheck121B (pos12EA);
      if _t1337 {
        die;
      }
      int _t1338 = 5;
      bool _t1339 = prim <0079 (nn1302, _t1338);
      if _t1339 {
        real _t133A = 0.5e0;
        real _t133B = prim *0034 (_t133A, rad0857);
        vec3 _t133C = prim normalize0137<$[3]> (es1316);
        vec3 _t133D = prim *0036<$[3]> (_t133B, _t133C);
        vec3 npos133E = prim +0017<$[3]> (pos12EA, _t133D);
        bool _t133F = func posTest12E0 (npos133E);
        if _t133F {
          new particle (npos133E, hh12EC);
        }
      }
    }
  }
}
collection {
  foreach x1340 in ipos085D {
    real _t1341 = 0.1e1;
    new particle (x1340, _t1341);
  }
}
update {
  int res1342= sum<int> { (P1345) => {
      int _t1346 = P1345.test12F0;
      return _t1346;
    } (P1343, P1343)
  | P1343 in all };
  int num1348 = res1342;
  int res1349= max<int> { (P134C) => {
      int _t134D = P134C.steps12F2;
      return _t134D;
    } (P134A, P134A)
  | P134A in all };
  int steps134F = res1349;
  int res1350= sum<int> { (P1353) => {
      int _t1354 = P1353.testp12F1;
      return _t1354;
    } (P1351, P1351)
  | P1351 in all };
  int numFound1356 = res1350;
  bool res1357= all { (P135A) => {
      bool _t135B = P135A.found12EE;
      return _t135B;
    } (P1358, P1358)
  | P1358 in all };
  bool allFound135D = res1357;
  real res135E= max<real> { (P1362) => {
      vec3 _t1363 = P1362.step12ED;
      real _t1364 = prim |()|00B5<$[3]> (_t1363);
      return _t1364;
    } (P135F, P135F)
  | P135F in all };
  real maxStep1366 = res135E;
  string _t1367 = "One run:";
  string _t1368 = " and ";
  real _t1369 = prim /0055 (maxStep1366, rad0857);
  string _t136A = " and ";
  real _t136B = prim /0055 (maxStep1366, rad0857);
  bool _t136C = prim <007A (_t136B, eps0858);
  string _t136D = " and ";
  string _t136E = " of ";
  string _t136F = "\n";
  print (_t1367, allFound135D, _t1368, _t1369, _t136A, _t136C, _t136D, numFound1356, _t136E, num1348, _t136F);
  if allFound135D {
    real _t1370 = prim /0055 (maxStep1366, rad0857);
    bool _t1371 = prim <007A (_t1370, eps0858);
    if _t1371 {
      string _t1372 = "CONVERGED!\n";
      print (_t1372);
      stabilize_all;
    }
  }
  int _t1373 = 5000;
  bool _t1374 = prim >007F (steps134F, _t1373);
  if _t1374 {
    stabilize_all;
  }
}
/* Program end */
/* Simplified Program (after after map-reduce-fusion) start */
properties: GlobalInit,StabilizeAll,GlobalReduce,StrandSets,GlobalUpdate,NewStrands,StrandCommunication,StrandsMayDie,HasInputs,HasGlobals,ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
input FemData:Mesh meshData0847;
input FemData:Space 0space0853_intermedateGlobal0854;
input FemData:FemFunc 0data0855_intermedateGlobal0856;
input real rad0857 = <default>;
input real eps0858 = <default>;
input real v00859 = <default>;
input real fBias085A = <default>;
input real fStren085B = <default>;
input real zfuz085C = <default>;
input vec3[] ipos085D;
constants {
  rad0857 = 0.1e-1;
  eps0858 = 0.1e-1;
  v00859 = 0.625e-1;
  fBias085A = 0.1e-1;
  fStren085B = 0.1e-1;
  zfuz085C = 0.1e-1;
}
function bool#0 !=085E (Femdata: MeshCell cell1085F, Femdata: MeshCell cell10860)
{
  int _t0861 = extractFemItem(CellIndex(Mesh), int, cell1085F);
  int _t0862 = extractFemItem(CellIndex(Mesh), int, cell10860);
  bool _t0863 = prim !=0086 (_t0861, _t0862);
  return _t0863;
}
function bool#0 ==0864 (Femdata: MeshCell cell1085F, Femdata: MeshCell cell10860)
{
  int _t0865 = extractFemItem(CellIndex(Mesh), int, cell1085F);
  int _t0866 = extractFemItem(CellIndex(Mesh), int, cell10860);
  bool _t0867 = prim ==0082 (_t0865, _t0866);
  return _t0867;
}
function Femdata: MeshPos#0 findPos0868 (Femdata: Mesh mesh0869, vec3 pos086A)
{
  real _t086B = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t086C = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t086D = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  xn086E = [_t086B, _t086C, _t086D];
  newtonInt086F = 0;
  cellInt0870 = extractFemItem(StartCell(Mesh), int, mesh0869);
  int _t0871 = extractFemItem(NumCell(Mesh), int, mesh0869);
  int _t0872 = 1;
  numCell0873 = prim -0024 (_t0871, _t0872);
  yayCells0874 = extractFemItem2(NearbyCell(File=spat.in)(Mesh), vec3, mesh0869, pos086A : vec3);
  foreach cellItter0878 in yayCells0874 {
    real _t0875 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    real _t0876 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    real _t0877 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    xn086E = [_t0875, _t0876, _t0877];
    cellInt0870 = cellItter0878;
    field(3)[3] _t0879 = femField(mesh0869,cellInt0870,field(3)[3],Transform,);
    field(3)[3,3] _t087A = prim ∇⊗00AD<#∞; %3; $[]; %3> (_t0879);
    field(3)[3,3] _t087B = prim inv015E<#∞; %3> (_t087A);
    real _t087C = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    real _t087D = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    real _t087E = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    vec3 _t087F = [_t087C, _t087D, _t087E];
    A0880 = prim @00A5<#∞; %3; $[3,3]> (_t087B, _t087F);
    int _t0881 = 0;
    int _t0882 = 16;
    int[] _t0883 = prim $range01C3 (_t0881, _t0882);
    foreach newtonItter08B2 in _t0883 {
      field(3)[3] _t0884 = femField(mesh0869,cellInt0870,field(3)[3],Transform,);
      field(3)[3] _t0885 = prim -002E<#∞; %3; $[3]> (_t0884, pos086A);
      field(3)[3] _t0886 = prim •00D4<#∞; %3; $[3,3]; $[3]; $[3]> (A0880, _t0885);
      delta0887 = prim @00A5<#∞; %3; $[3]> (_t0886, xn086E);
      xn086E = prim -0026<$[3]> (xn086E, delta0887);
      real _t0888 = 0.1e-7;
      real _t0889 = 0.1e-7;
      real _t088A = prim *0034 (_t0888, _t0889);
      real _t088B = prim •00CE<$[3]; $[3]; $[]> (delta0887, delta0887);
      bool _t088C = prim >=007E (_t088A, _t088B);
      if _t088C {
        real _t088D = 0.1e1;
        real _t088E = 0.1e-7;
        real _t088F = prim +0017<$[]> (_t088D, _t088E);
        real _t0890 = 0.1e1;
        real _t0891 = 0.1e1;
        real _t0892 = 0.1e1;
        vec3 _t0893 = [_t0890, _t0891, _t0892];
        real _t0894 = prim •00CE<$[3]; $[3]; $[]> (_t0893, xn086E);
        bool _t0895 = prim >0080 (_t088F, _t0894);
        real _t0896 = 0.1e-7;
        real _t0897 = 0.1e-7;
        real _t0898 = 0.1e-7;
        vec3 _t0899 = [_t0896, _t0897, _t0898];
        vec3 _t089A = prim +0017<$[3]> (_t0899, xn086E);
        real _t089B = _t089A[0];
        real _t089C = -0.e0;
        bool _t089D = prim >0080 (_t089B, _t089C);
        real _t089E = 0.1e-7;
        real _t089F = 0.1e-7;
        real _t08A0 = 0.1e-7;
        vec3 _t08A1 = [_t089E, _t089F, _t08A0];
        vec3 _t08A2 = prim +0017<$[3]> (_t08A1, xn086E);
        real _t08A3 = _t08A2[1];
        real _t08A4 = -0.e0;
        bool _t08A5 = prim >0080 (_t08A3, _t08A4);
        real _t08A6 = 0.1e-7;
        real _t08A7 = 0.1e-7;
        real _t08A8 = 0.1e-7;
        vec3 _t08A9 = [_t08A6, _t08A7, _t08A8];
        vec3 _t08AA = prim +0017<$[3]> (_t08A9, xn086E);
        real _t08AB = _t08AA[2];
        real _t08AC = -0.e0;
        bool _t08AD = prim >0080 (_t08AB, _t08AC);
        bool _t08AE = prim $and01C4 (_t08A5, _t08AD);
        bool _t08AF = prim $and01C4 (_t089D, _t08AE);
        bool _t08B0 = prim $and01C4 (_t0895, _t08AF);
        if _t08B0 {
          Femdata: MeshPos _t08B1 = extractFemItemN((mesh0869, cellInt0870, xn086E, pos086A),AllBuild(MeshPos),);
          return _t08B1;
        }
      }
    }
  }
  Femdata: MeshPos _t08B3 = extractFemItemN((mesh0869),InvalidBuild(MeshPos),);
  return _t08B3;
}
function Femdata: RefCell#1 refcell08B4 (Femdata: Mesh arg008B5)
{
  Femdata: RefCell _t08B6 = extractFemItem(RefCell(Mesh), Femdata: RefCell, arg008B5);
  return _t08B6;
}
function Femdata: MeshCell[]#0 cells08B7 (Femdata: Mesh arg008B8)
{
  Femdata: MeshCell[] _t08B9 = extractFemItem(Cells(Mesh), Femdata: MeshCell[], arg008B8);
  return _t08B9;
}
function Femdata: MeshCell[]#0 cells08BA (Femdata: Mesh arg008B8)
{
  int _t08BB = 0;
  int _t08BC = extractFemItem(NumCell(Mesh), int, arg008B8);
  int[] _t08BD = prim $range01C3 (_t08BB, _t08BC);
  Femdata: MeshCell[] accum08C0 = {};
  foreach i08BE in _t08BD {
    Femdata: MeshCell _t08BF = loadFem(MeshCell, arg008B8, i08BE);
    accum08C0 = prim @0010<Femdata: MeshCell> (accum08C0, _t08BF);
  }
  return accum08C0;
}
function int#0 numCell08C1 (Femdata: Mesh arg008B5)
{
  int _t08C2 = extractFemItem(NumCell(Mesh), int, arg008B5);
  return _t08C2;
}
function tensor[3,3,3,3]#0 mesh_t_transform_308C3 (vec3 pos08C4, int cell08C5, Femdata: Mesh mesh08C6)
{
  field(3)[3] _t08C7 = femField(mesh08C6,cell08C5,field(3)[3],Transform,);
  field(3)[3,3] _t08C8 = prim ∇⊗00AD<#∞; %3; $[]; %3> (_t08C7);
  field(3)[3,3,3] _t08C9 = prim ∇⊗00AD<#∞; %3; $[3]; %3> (_t08C8);
  field(3)[3,3,3,3] _t08CA = prim ∇⊗00AD<#∞; %3; $[3,3]; %3> (_t08C9);
  tensor[3,3,3,3] _t08CB = prim @00A5<#∞; %3; $[3,3,3,3]> (_t08CA, pos08C4);
  return _t08CB;
}
function tensor[3,3,3]#0 mesh_t_transform_208CC (vec3 pos08C4, int cell08C5, Femdata: Mesh mesh08C6)
{
  field(3)[3] _t08CD = femField(mesh08C6,cell08C5,field(3)[3],Transform,);
  field(3)[3,3] _t08CE = prim ∇⊗00AD<#∞; %3; $[]; %3> (_t08CD);
  field(3)[3,3,3] _t08CF = prim ∇⊗00AD<#∞; %3; $[3]; %3> (_t08CE);
  tensor[3,3,3] _t08D0 = prim @00A5<#∞; %3; $[3,3,3]> (_t08CF, pos08C4);
  return _t08D0;
}
function tensor[3,3]#0 mesh_t_transform_108D1 (vec3 pos08C4, int cell08C5, Femdata: Mesh mesh08C6)
{
  field(3)[3] _t08D2 = femField(mesh08C6,cell08C5,field(3)[3],Transform,);
  field(3)[3,3] _t08D3 = prim ∇⊗00AD<#∞; %3; $[]; %3> (_t08D2);
  tensor[3,3] _t08D4 = prim @00A5<#∞; %3; $[3,3]> (_t08D3, pos08C4);
  return _t08D4;
}
function vec3#2 mesh_t_transform_008D5 (vec3 pos08C4, int cell08C5, Femdata: Mesh mesh08C6)
{
  field(3)[3] _t08D6 = femField(mesh08C6,cell08C5,field(3)[3],Transform,);
  vec3 _t08D7 = prim @00A5<#∞; %3; $[3]> (_t08D6, pos08C4);
  return _t08D7;
}
function Femdata: MeshPos#0 _mesh_t_newtonInverse08D8 (vec3 pos08D9, int cellInt08DA, Femdata: Mesh mesh08DB)
{
  real _t08DC = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t08DD = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t08DE = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  xn08DF = [_t08DC, _t08DD, _t08DE];
  field(3)[3] _t08E0 = femField(mesh08DB,cellInt08DA,field(3)[3],Transform,);
  field(3)[3,3] _t08E1 = prim ∇⊗00AD<#∞; %3; $[]; %3> (_t08E0);
  field(3)[3,3] _t08E2 = prim inv015E<#∞; %3> (_t08E1);
  real _t08E3 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t08E4 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t08E5 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  vec3 _t08E6 = [_t08E3, _t08E4, _t08E5];
  A08E7 = prim @00A5<#∞; %3; $[3,3]> (_t08E2, _t08E6);
  int _t08E8 = 0;
  int _t08E9 = 16;
  int[] _t08EA = prim $range01C3 (_t08E8, _t08E9);
  foreach itter091A in _t08EA {
    field(3)[3] _t08EB = femField(mesh08DB,cellInt08DA,field(3)[3],Transform,);
    field(3)[3] _t08EC = prim -002E<#∞; %3; $[3]> (_t08EB, pos08D9);
    field(3)[3] _t08ED = prim •00D4<#∞; %3; $[3,3]; $[3]; $[3]> (A08E7, _t08EC);
    delta08EE = prim @00A5<#∞; %3; $[3]> (_t08ED, xn08DF);
    xn08DF = prim -0026<$[3]> (xn08DF, delta08EE);
    real _t08EF = 0.1e-7;
    real _t08F0 = 0.1e-7;
    real _t08F1 = prim *0034 (_t08EF, _t08F0);
    real _t08F2 = prim •00CE<$[3]; $[3]; $[]> (delta08EE, delta08EE);
    bool _t08F3 = prim >=007E (_t08F1, _t08F2);
    if _t08F3 {
      real _t08F4 = 0.1e1;
      real _t08F5 = 0.1e-7;
      real _t08F6 = prim +0017<$[]> (_t08F4, _t08F5);
      real _t08F7 = 0.1e1;
      real _t08F8 = 0.1e1;
      real _t08F9 = 0.1e1;
      vec3 _t08FA = [_t08F7, _t08F8, _t08F9];
      real _t08FB = prim •00CE<$[3]; $[3]; $[]> (_t08FA, xn08DF);
      bool _t08FC = prim >0080 (_t08F6, _t08FB);
      real _t08FD = 0.1e-7;
      real _t08FE = 0.1e-7;
      real _t08FF = 0.1e-7;
      vec3 _t0900 = [_t08FD, _t08FE, _t08FF];
      vec3 _t0901 = prim +0017<$[3]> (_t0900, xn08DF);
      real _t0902 = _t0901[0];
      real _t0903 = -0.e0;
      bool _t0904 = prim >0080 (_t0902, _t0903);
      real _t0905 = 0.1e-7;
      real _t0906 = 0.1e-7;
      real _t0907 = 0.1e-7;
      vec3 _t0908 = [_t0905, _t0906, _t0907];
      vec3 _t0909 = prim +0017<$[3]> (_t0908, xn08DF);
      real _t090A = _t0909[1];
      real _t090B = -0.e0;
      bool _t090C = prim >0080 (_t090A, _t090B);
      real _t090D = 0.1e-7;
      real _t090E = 0.1e-7;
      real _t090F = 0.1e-7;
      vec3 _t0910 = [_t090D, _t090E, _t090F];
      vec3 _t0911 = prim +0017<$[3]> (_t0910, xn08DF);
      real _t0912 = _t0911[2];
      real _t0913 = -0.e0;
      bool _t0914 = prim >0080 (_t0912, _t0913);
      bool _t0915 = prim $and01C4 (_t090C, _t0914);
      bool _t0916 = prim $and01C4 (_t0904, _t0915);
      bool _t0917 = prim $and01C4 (_t08FC, _t0916);
      if _t0917 {
        Femdata: MeshPos _t0918 = extractFemItemN((mesh08DB, cellInt08DA, xn08DF, pos08D9),AllBuild(MeshPos),);
        return _t0918;
      } else {
        Femdata: MeshPos _t0919 = extractFemItemN((mesh08DB),InvalidBuild(MeshPos),);
        return _t0919;
      }
    }
  }
  Femdata: MeshPos _t091B = extractFemItemN((mesh08DB),InvalidBuild(MeshPos),);
  return _t091B;
}
function Femdata: MeshPos#0 _mesh_pos_mesh_t_build_world_pos091C (Femdata: MeshPos pos091D)
{
  bool _t091E = extractFemItem(WorldTest(MeshPos), bool, pos091D);
  if _t091E {
    vec3 _t091F = extractFemItem(RefPos(MeshPos), vec3, pos091D);
    int _t0920 = extractFemItem(CellIndex(MeshPos), int, pos091D);
    Femdata: Mesh _t0921 = extractFem(pos091D, Mesh);
    vec3 _t0922 = func mesh_t_transform_008D5 (_t091F, _t0920, _t0921);
    Femdata: MeshPos _t0923 = extractFemItemN((pos091D, _t0922),NewWorld(MeshPos),);
    return _t0923;
  } else {
    return pos091D;
  }
}
function vec3#0 worldPos0924 (Femdata: MeshPos pos091D)
{
  vec3 _t0925 = extractFemItem(RefPos(MeshPos), vec3, pos091D);
  int _t0926 = extractFemItem(CellIndex(MeshPos), int, pos091D);
  Femdata: Mesh _t0927 = extractFem(pos091D, Mesh);
  vec3 _t0928 = func mesh_t_transform_008D5 (_t0925, _t0926, _t0927);
  return _t0928;
}
function Femdata: MeshPos#0 $exitPos0929 (Femdata: Mesh mesh092A, int cellId092B, vec3 refPos092C, vec3 dPos092D, real[2] time092E)
{
  int _t092F = -1;
  real _t0930 = time092E[1];
  int _t0931 = prim $r2i01B7 (_t0930);
  int[2] _t0933 = func nextCell40932 (_t0931, cellId092B, mesh092A);
  int _t0934 = 0;
  int _t0935 = prim $sub01C0<int; %2> (_t0933, _t0934);
  bool _t0936 = prim !=0086 (_t092F, _t0935);
  if _t0936 {
    real _t0937 = time092E[1];
    int _t0938 = prim $r2i01B7 (_t0937);
    int[2] _t0939 = func nextCell40932 (_t0938, cellId092B, mesh092A);
    int _t093A = 0;
    int _t093B = prim $sub01C0<int; %2> (_t0939, _t093A);
    real _t093C = 0.1e1;
    real _t093D = 0.e0;
    real _t093E = 0.e0;
    real _t093F = 0.e0;
    vec4 _t0940 = [_t093C, _t093D, _t093E, _t093F];
    real _t0941 = 0.e0;
    real _t0942 = 0.1e1;
    real _t0943 = 0.e0;
    real _t0944 = 0.e0;
    vec4 _t0945 = [_t0941, _t0942, _t0943, _t0944];
    real _t0946 = 0.e0;
    real _t0947 = 0.e0;
    real _t0948 = 0.1e1;
    real _t0949 = 0.e0;
    vec4 _t094A = [_t0946, _t0947, _t0948, _t0949];
    real _t094B = 0.971445146547e-16;
    real _t094C = 0.e0;
    real _t094D = 0.e0;
    real _t094E = 0.1e1;
    vec4 _t094F = [_t094B, _t094C, _t094D, _t094E];
    tensor[4,4] _t0950 = [_t0940, _t0945, _t094A, _t094F];
    real _t0951 = 0.57735026919e0;
    real _t0952 = 0.57735026919e0;
    real _t0953 = 0.57735026919e0;
    real _t0954 = -0.57735026919e0;
    vec4 _t0955 = [_t0951, _t0952, _t0953, _t0954];
    real _t0956 = -0.333333333333e0;
    real _t0957 = 0.666666666667e0;
    real _t0958 = -0.333333333333e0;
    real _t0959 = 0.333333333333e0;
    vec4 _t095A = [_t0956, _t0957, _t0958, _t0959];
    real _t095B = -0.333333333333e0;
    real _t095C = -0.333333333333e0;
    real _t095D = 0.666666666667e0;
    real _t095E = 0.333333333333e0;
    vec4 _t095F = [_t095B, _t095C, _t095D, _t095E];
    real _t0960 = 0.971445146547e-16;
    real _t0961 = 0.e0;
    real _t0962 = 0.e0;
    real _t0963 = 0.1e1;
    vec4 _t0964 = [_t0960, _t0961, _t0962, _t0963];
    tensor[4,4] _t0965 = [_t0955, _t095A, _t095F, _t0964];
    real _t0966 = -0.333333333333e0;
    real _t0967 = 0.666666666667e0;
    real _t0968 = -0.333333333333e0;
    real _t0969 = 0.333333333333e0;
    vec4 _t096A = [_t0966, _t0967, _t0968, _t0969];
    real _t096B = -0.57735026919e0;
    real _t096C = -0.57735026919e0;
    real _t096D = -0.57735026919e0;
    real _t096E = 0.57735026919e0;
    vec4 _t096F = [_t096B, _t096C, _t096D, _t096E];
    real _t0970 = -0.333333333333e0;
    real _t0971 = -0.333333333333e0;
    real _t0972 = 0.666666666667e0;
    real _t0973 = 0.333333333333e0;
    vec4 _t0974 = [_t0970, _t0971, _t0972, _t0973];
    real _t0975 = 0.971445146547e-16;
    real _t0976 = 0.e0;
    real _t0977 = 0.e0;
    real _t0978 = 0.1e1;
    vec4 _t0979 = [_t0975, _t0976, _t0977, _t0978];
    tensor[4,4] _t097A = [_t096A, _t096F, _t0974, _t0979];
    real _t097B = -0.333333333333e0;
    real _t097C = 0.666666666667e0;
    real _t097D = -0.333333333333e0;
    real _t097E = 0.333333333333e0;
    vec4 _t097F = [_t097B, _t097C, _t097D, _t097E];
    real _t0980 = -0.333333333333e0;
    real _t0981 = -0.333333333333e0;
    real _t0982 = 0.666666666667e0;
    real _t0983 = 0.333333333333e0;
    vec4 _t0984 = [_t0980, _t0981, _t0982, _t0983];
    real _t0985 = 0.57735026919e0;
    real _t0986 = 0.57735026919e0;
    real _t0987 = 0.57735026919e0;
    real _t0988 = -0.57735026919e0;
    vec4 _t0989 = [_t0985, _t0986, _t0987, _t0988];
    real _t098A = 0.971445146547e-16;
    real _t098B = 0.e0;
    real _t098C = 0.e0;
    real _t098D = 0.1e1;
    vec4 _t098E = [_t098A, _t098B, _t098C, _t098D];
    tensor[4,4] _t098F = [_t097F, _t0984, _t0989, _t098E];
    tensor[4,4][4] _t0990 = {_t0950, _t0965, _t097A, _t098F};
    real _t0991 = 0.57735026919e0;
    real _t0992 = -0.1e1;
    real _t0993 = -0.1e1;
    real _t0994 = 0.1e1;
    vec4 _t0995 = [_t0991, _t0992, _t0993, _t0994];
    real _t0996 = 0.57735026919e0;
    real _t0997 = 0.1e1;
    real _t0998 = 0.e0;
    real _t0999 = 0.e0;
    vec4 _t099A = [_t0996, _t0997, _t0998, _t0999];
    real _t099B = 0.57735026919e0;
    real _t099C = 0.e0;
    real _t099D = 0.1e1;
    real _t099E = 0.e0;
    vec4 _t099F = [_t099B, _t099C, _t099D, _t099E];
    real _t09A0 = 0.e0;
    real _t09A1 = 0.e0;
    real _t09A2 = 0.e0;
    real _t09A3 = 0.1e1;
    vec4 _t09A4 = [_t09A0, _t09A1, _t09A2, _t09A3];
    tensor[4,4] _t09A5 = [_t0995, _t099A, _t099F, _t09A4];
    real _t09A6 = 0.1e1;
    real _t09A7 = 0.e0;
    real _t09A8 = 0.e0;
    real _t09A9 = 0.e0;
    vec4 _t09AA = [_t09A6, _t09A7, _t09A8, _t09A9];
    real _t09AB = 0.e0;
    real _t09AC = 0.1e1;
    real _t09AD = 0.e0;
    real _t09AE = 0.e0;
    vec4 _t09AF = [_t09AB, _t09AC, _t09AD, _t09AE];
    real _t09B0 = 0.e0;
    real _t09B1 = 0.e0;
    real _t09B2 = 0.1e1;
    real _t09B3 = 0.e0;
    vec4 _t09B4 = [_t09B0, _t09B1, _t09B2, _t09B3];
    real _t09B5 = 0.e0;
    real _t09B6 = 0.e0;
    real _t09B7 = 0.e0;
    real _t09B8 = 0.1e1;
    vec4 _t09B9 = [_t09B5, _t09B6, _t09B7, _t09B8];
    tensor[4,4] _t09BA = [_t09AA, _t09AF, _t09B4, _t09B9];
    real _t09BB = 0.e0;
    real _t09BC = 0.1e1;
    real _t09BD = 0.e0;
    real _t09BE = 0.e0;
    vec4 _t09BF = [_t09BB, _t09BC, _t09BD, _t09BE];
    real _t09C0 = -0.1e1;
    real _t09C1 = 0.e0;
    real _t09C2 = 0.e0;
    real _t09C3 = 0.e0;
    vec4 _t09C4 = [_t09C0, _t09C1, _t09C2, _t09C3];
    real _t09C5 = 0.e0;
    real _t09C6 = 0.e0;
    real _t09C7 = 0.1e1;
    real _t09C8 = 0.e0;
    vec4 _t09C9 = [_t09C5, _t09C6, _t09C7, _t09C8];
    real _t09CA = 0.e0;
    real _t09CB = 0.e0;
    real _t09CC = 0.e0;
    real _t09CD = 0.1e1;
    vec4 _t09CE = [_t09CA, _t09CB, _t09CC, _t09CD];
    tensor[4,4] _t09CF = [_t09BF, _t09C4, _t09C9, _t09CE];
    real _t09D0 = 0.e0;
    real _t09D1 = 0.1e1;
    real _t09D2 = 0.e0;
    real _t09D3 = 0.e0;
    vec4 _t09D4 = [_t09D0, _t09D1, _t09D2, _t09D3];
    real _t09D5 = 0.e0;
    real _t09D6 = 0.e0;
    real _t09D7 = 0.1e1;
    real _t09D8 = 0.e0;
    vec4 _t09D9 = [_t09D5, _t09D6, _t09D7, _t09D8];
    real _t09DA = 0.1e1;
    real _t09DB = 0.e0;
    real _t09DC = 0.e0;
    real _t09DD = 0.e0;
    vec4 _t09DE = [_t09DA, _t09DB, _t09DC, _t09DD];
    real _t09DF = 0.e0;
    real _t09E0 = 0.e0;
    real _t09E1 = 0.e0;
    real _t09E2 = 0.1e1;
    vec4 _t09E3 = [_t09DF, _t09E0, _t09E1, _t09E2];
    tensor[4,4] _t09E4 = [_t09D4, _t09D9, _t09DE, _t09E3];
    tensor[4,4][4] _t09E5 = {_t09A5, _t09BA, _t09CF, _t09E4};
    real _t09E6 = -0.1e1;
    real _t09E7 = -0.57735026919e0;
    real _t09E8 = -0.1e1;
    real _t09E9 = 0.1e1;
    vec4 _t09EA = [_t09E6, _t09E7, _t09E8, _t09E9];
    real _t09EB = 0.1e1;
    real _t09EC = -0.57735026919e0;
    real _t09ED = 0.e0;
    real _t09EE = 0.e0;
    vec4 _t09EF = [_t09EB, _t09EC, _t09ED, _t09EE];
    real _t09F0 = 0.e0;
    real _t09F1 = -0.57735026919e0;
    real _t09F2 = 0.1e1;
    real _t09F3 = 0.e0;
    vec4 _t09F4 = [_t09F0, _t09F1, _t09F2, _t09F3];
    real _t09F5 = 0.e0;
    real _t09F6 = 0.e0;
    real _t09F7 = 0.e0;
    real _t09F8 = 0.1e1;
    vec4 _t09F9 = [_t09F5, _t09F6, _t09F7, _t09F8];
    tensor[4,4] _t09FA = [_t09EA, _t09EF, _t09F4, _t09F9];
    real _t09FB = 0.e0;
    real _t09FC = -0.1e1;
    real _t09FD = 0.e0;
    real _t09FE = 0.e0;
    vec4 _t09FF = [_t09FB, _t09FC, _t09FD, _t09FE];
    real _t0A00 = 0.1e1;
    real _t0A01 = 0.e0;
    real _t0A02 = 0.e0;
    real _t0A03 = 0.e0;
    vec4 _t0A04 = [_t0A00, _t0A01, _t0A02, _t0A03];
    real _t0A05 = 0.e0;
    real _t0A06 = 0.e0;
    real _t0A07 = 0.1e1;
    real _t0A08 = 0.e0;
    vec4 _t0A09 = [_t0A05, _t0A06, _t0A07, _t0A08];
    real _t0A0A = 0.e0;
    real _t0A0B = 0.e0;
    real _t0A0C = 0.e0;
    real _t0A0D = 0.1e1;
    vec4 _t0A0E = [_t0A0A, _t0A0B, _t0A0C, _t0A0D];
    tensor[4,4] _t0A0F = [_t09FF, _t0A04, _t0A09, _t0A0E];
    real _t0A10 = 0.1e1;
    real _t0A11 = 0.e0;
    real _t0A12 = 0.e0;
    real _t0A13 = 0.e0;
    vec4 _t0A14 = [_t0A10, _t0A11, _t0A12, _t0A13];
    real _t0A15 = 0.e0;
    real _t0A16 = 0.1e1;
    real _t0A17 = 0.e0;
    real _t0A18 = 0.e0;
    vec4 _t0A19 = [_t0A15, _t0A16, _t0A17, _t0A18];
    real _t0A1A = 0.e0;
    real _t0A1B = 0.e0;
    real _t0A1C = 0.1e1;
    real _t0A1D = 0.e0;
    vec4 _t0A1E = [_t0A1A, _t0A1B, _t0A1C, _t0A1D];
    real _t0A1F = 0.e0;
    real _t0A20 = 0.e0;
    real _t0A21 = 0.e0;
    real _t0A22 = 0.1e1;
    vec4 _t0A23 = [_t0A1F, _t0A20, _t0A21, _t0A22];
    tensor[4,4] _t0A24 = [_t0A14, _t0A19, _t0A1E, _t0A23];
    real _t0A25 = 0.1e1;
    real _t0A26 = 0.e0;
    real _t0A27 = 0.e0;
    real _t0A28 = 0.e0;
    vec4 _t0A29 = [_t0A25, _t0A26, _t0A27, _t0A28];
    real _t0A2A = 0.e0;
    real _t0A2B = 0.e0;
    real _t0A2C = 0.1e1;
    real _t0A2D = 0.e0;
    vec4 _t0A2E = [_t0A2A, _t0A2B, _t0A2C, _t0A2D];
    real _t0A2F = 0.e0;
    real _t0A30 = -0.1e1;
    real _t0A31 = 0.e0;
    real _t0A32 = 0.e0;
    vec4 _t0A33 = [_t0A2F, _t0A30, _t0A31, _t0A32];
    real _t0A34 = 0.e0;
    real _t0A35 = 0.e0;
    real _t0A36 = 0.e0;
    real _t0A37 = 0.1e1;
    vec4 _t0A38 = [_t0A34, _t0A35, _t0A36, _t0A37];
    tensor[4,4] _t0A39 = [_t0A29, _t0A2E, _t0A33, _t0A38];
    tensor[4,4][4] _t0A3A = {_t09FA, _t0A0F, _t0A24, _t0A39};
    real _t0A3B = -0.1e1;
    real _t0A3C = -0.1e1;
    real _t0A3D = 0.57735026919e0;
    real _t0A3E = 0.1e1;
    vec4 _t0A3F = [_t0A3B, _t0A3C, _t0A3D, _t0A3E];
    real _t0A40 = 0.1e1;
    real _t0A41 = 0.e0;
    real _t0A42 = 0.57735026919e0;
    real _t0A43 = 0.e0;
    vec4 _t0A44 = [_t0A40, _t0A41, _t0A42, _t0A43];
    real _t0A45 = 0.e0;
    real _t0A46 = 0.1e1;
    real _t0A47 = 0.57735026919e0;
    real _t0A48 = 0.e0;
    vec4 _t0A49 = [_t0A45, _t0A46, _t0A47, _t0A48];
    real _t0A4A = 0.e0;
    real _t0A4B = 0.e0;
    real _t0A4C = 0.e0;
    real _t0A4D = 0.1e1;
    vec4 _t0A4E = [_t0A4A, _t0A4B, _t0A4C, _t0A4D];
    tensor[4,4] _t0A4F = [_t0A3F, _t0A44, _t0A49, _t0A4E];
    real _t0A50 = 0.e0;
    real _t0A51 = 0.e0;
    real _t0A52 = 0.1e1;
    real _t0A53 = 0.e0;
    vec4 _t0A54 = [_t0A50, _t0A51, _t0A52, _t0A53];
    real _t0A55 = 0.1e1;
    real _t0A56 = 0.e0;
    real _t0A57 = 0.e0;
    real _t0A58 = 0.e0;
    vec4 _t0A59 = [_t0A55, _t0A56, _t0A57, _t0A58];
    real _t0A5A = 0.e0;
    real _t0A5B = 0.1e1;
    real _t0A5C = 0.e0;
    real _t0A5D = 0.e0;
    vec4 _t0A5E = [_t0A5A, _t0A5B, _t0A5C, _t0A5D];
    real _t0A5F = 0.e0;
    real _t0A60 = 0.e0;
    real _t0A61 = 0.e0;
    real _t0A62 = 0.1e1;
    vec4 _t0A63 = [_t0A5F, _t0A60, _t0A61, _t0A62];
    tensor[4,4] _t0A64 = [_t0A54, _t0A59, _t0A5E, _t0A63];
    real _t0A65 = 0.1e1;
    real _t0A66 = 0.e0;
    real _t0A67 = 0.e0;
    real _t0A68 = 0.e0;
    vec4 _t0A69 = [_t0A65, _t0A66, _t0A67, _t0A68];
    real _t0A6A = 0.e0;
    real _t0A6B = 0.e0;
    real _t0A6C = -0.1e1;
    real _t0A6D = 0.e0;
    vec4 _t0A6E = [_t0A6A, _t0A6B, _t0A6C, _t0A6D];
    real _t0A6F = 0.e0;
    real _t0A70 = 0.1e1;
    real _t0A71 = 0.e0;
    real _t0A72 = 0.e0;
    vec4 _t0A73 = [_t0A6F, _t0A70, _t0A71, _t0A72];
    real _t0A74 = 0.e0;
    real _t0A75 = 0.e0;
    real _t0A76 = 0.e0;
    real _t0A77 = 0.1e1;
    vec4 _t0A78 = [_t0A74, _t0A75, _t0A76, _t0A77];
    tensor[4,4] _t0A79 = [_t0A69, _t0A6E, _t0A73, _t0A78];
    real _t0A7A = 0.1e1;
    real _t0A7B = 0.e0;
    real _t0A7C = 0.e0;
    real _t0A7D = 0.e0;
    vec4 _t0A7E = [_t0A7A, _t0A7B, _t0A7C, _t0A7D];
    real _t0A7F = 0.e0;
    real _t0A80 = 0.1e1;
    real _t0A81 = 0.e0;
    real _t0A82 = 0.e0;
    vec4 _t0A83 = [_t0A7F, _t0A80, _t0A81, _t0A82];
    real _t0A84 = 0.e0;
    real _t0A85 = 0.e0;
    real _t0A86 = 0.1e1;
    real _t0A87 = 0.e0;
    vec4 _t0A88 = [_t0A84, _t0A85, _t0A86, _t0A87];
    real _t0A89 = 0.e0;
    real _t0A8A = 0.e0;
    real _t0A8B = 0.e0;
    real _t0A8C = 0.1e1;
    vec4 _t0A8D = [_t0A89, _t0A8A, _t0A8B, _t0A8C];
    tensor[4,4] _t0A8E = [_t0A7E, _t0A83, _t0A88, _t0A8D];
    tensor[4,4][4] _t0A8F = {_t0A4F, _t0A64, _t0A79, _t0A8E};
    tensor[4,4][4][4] _t0A90 = {_t0990, _t09E5, _t0A3A, _t0A8F};
    real _t0A91 = time092E[1];
    int _t0A92 = prim $r2i01B7 (_t0A91);
    tensor[4,4][4] _t0A93 = prim $sub01C0<tensor[4,4][4]; %4> (_t0A90, _t0A92);
    real _t0A94 = time092E[1];
    int _t0A95 = prim $r2i01B7 (_t0A94);
    int[2] _t0A96 = func nextCell40932 (_t0A95, cellId092B, mesh092A);
    int _t0A97 = 1;
    int _t0A98 = prim $sub01C0<int; %2> (_t0A96, _t0A97);
    tensor[4,4] _t0A99 = prim $sub01C0<tensor[4,4]; %4> (_t0A93, _t0A98);
    real _t0A9A = time092E[0];
    vec3 _t0A9B = prim *0036<$[3]> (_t0A9A, dPos092D);
    vec3 _t0A9C = prim +0017<$[3]> (_t0A9B, refPos092C);
    real _t0A9D = _t0A9C[0];
    real _t0A9E = time092E[0];
    vec3 _t0A9F = prim *0036<$[3]> (_t0A9E, dPos092D);
    vec3 _t0AA0 = prim +0017<$[3]> (_t0A9F, refPos092C);
    real _t0AA1 = _t0AA0[1];
    real _t0AA2 = time092E[0];
    vec3 _t0AA3 = prim *0036<$[3]> (_t0AA2, dPos092D);
    vec3 _t0AA4 = prim +0017<$[3]> (_t0AA3, refPos092C);
    real _t0AA5 = _t0AA4[2];
    real _t0AA6 = 0.1e1;
    vec4 _t0AA7 = [_t0A9D, _t0AA1, _t0AA5, _t0AA6];
    vec4 _t0AA8 = prim •00CE<$[4,4]; $[4]; $[4]> (_t0A99, _t0AA7);
    real _t0AA9 = _t0AA8[0];
    real _t0AAA = 0.1e1;
    real _t0AAB = 0.e0;
    real _t0AAC = 0.e0;
    real _t0AAD = 0.e0;
    vec4 _t0AAE = [_t0AAA, _t0AAB, _t0AAC, _t0AAD];
    real _t0AAF = 0.e0;
    real _t0AB0 = 0.1e1;
    real _t0AB1 = 0.e0;
    real _t0AB2 = 0.e0;
    vec4 _t0AB3 = [_t0AAF, _t0AB0, _t0AB1, _t0AB2];
    real _t0AB4 = 0.e0;
    real _t0AB5 = 0.e0;
    real _t0AB6 = 0.1e1;
    real _t0AB7 = 0.e0;
    vec4 _t0AB8 = [_t0AB4, _t0AB5, _t0AB6, _t0AB7];
    real _t0AB9 = 0.971445146547e-16;
    real _t0ABA = 0.e0;
    real _t0ABB = 0.e0;
    real _t0ABC = 0.1e1;
    vec4 _t0ABD = [_t0AB9, _t0ABA, _t0ABB, _t0ABC];
    tensor[4,4] _t0ABE = [_t0AAE, _t0AB3, _t0AB8, _t0ABD];
    real _t0ABF = 0.57735026919e0;
    real _t0AC0 = 0.57735026919e0;
    real _t0AC1 = 0.57735026919e0;
    real _t0AC2 = -0.57735026919e0;
    vec4 _t0AC3 = [_t0ABF, _t0AC0, _t0AC1, _t0AC2];
    real _t0AC4 = -0.333333333333e0;
    real _t0AC5 = 0.666666666667e0;
    real _t0AC6 = -0.333333333333e0;
    real _t0AC7 = 0.333333333333e0;
    vec4 _t0AC8 = [_t0AC4, _t0AC5, _t0AC6, _t0AC7];
    real _t0AC9 = -0.333333333333e0;
    real _t0ACA = -0.333333333333e0;
    real _t0ACB = 0.666666666667e0;
    real _t0ACC = 0.333333333333e0;
    vec4 _t0ACD = [_t0AC9, _t0ACA, _t0ACB, _t0ACC];
    real _t0ACE = 0.971445146547e-16;
    real _t0ACF = 0.e0;
    real _t0AD0 = 0.e0;
    real _t0AD1 = 0.1e1;
    vec4 _t0AD2 = [_t0ACE, _t0ACF, _t0AD0, _t0AD1];
    tensor[4,4] _t0AD3 = [_t0AC3, _t0AC8, _t0ACD, _t0AD2];
    real _t0AD4 = -0.333333333333e0;
    real _t0AD5 = 0.666666666667e0;
    real _t0AD6 = -0.333333333333e0;
    real _t0AD7 = 0.333333333333e0;
    vec4 _t0AD8 = [_t0AD4, _t0AD5, _t0AD6, _t0AD7];
    real _t0AD9 = -0.57735026919e0;
    real _t0ADA = -0.57735026919e0;
    real _t0ADB = -0.57735026919e0;
    real _t0ADC = 0.57735026919e0;
    vec4 _t0ADD = [_t0AD9, _t0ADA, _t0ADB, _t0ADC];
    real _t0ADE = -0.333333333333e0;
    real _t0ADF = -0.333333333333e0;
    real _t0AE0 = 0.666666666667e0;
    real _t0AE1 = 0.333333333333e0;
    vec4 _t0AE2 = [_t0ADE, _t0ADF, _t0AE0, _t0AE1];
    real _t0AE3 = 0.971445146547e-16;
    real _t0AE4 = 0.e0;
    real _t0AE5 = 0.e0;
    real _t0AE6 = 0.1e1;
    vec4 _t0AE7 = [_t0AE3, _t0AE4, _t0AE5, _t0AE6];
    tensor[4,4] _t0AE8 = [_t0AD8, _t0ADD, _t0AE2, _t0AE7];
    real _t0AE9 = -0.333333333333e0;
    real _t0AEA = 0.666666666667e0;
    real _t0AEB = -0.333333333333e0;
    real _t0AEC = 0.333333333333e0;
    vec4 _t0AED = [_t0AE9, _t0AEA, _t0AEB, _t0AEC];
    real _t0AEE = -0.333333333333e0;
    real _t0AEF = -0.333333333333e0;
    real _t0AF0 = 0.666666666667e0;
    real _t0AF1 = 0.333333333333e0;
    vec4 _t0AF2 = [_t0AEE, _t0AEF, _t0AF0, _t0AF1];
    real _t0AF3 = 0.57735026919e0;
    real _t0AF4 = 0.57735026919e0;
    real _t0AF5 = 0.57735026919e0;
    real _t0AF6 = -0.57735026919e0;
    vec4 _t0AF7 = [_t0AF3, _t0AF4, _t0AF5, _t0AF6];
    real _t0AF8 = 0.971445146547e-16;
    real _t0AF9 = 0.e0;
    real _t0AFA = 0.e0;
    real _t0AFB = 0.1e1;
    vec4 _t0AFC = [_t0AF8, _t0AF9, _t0AFA, _t0AFB];
    tensor[4,4] _t0AFD = [_t0AED, _t0AF2, _t0AF7, _t0AFC];
    tensor[4,4][4] _t0AFE = {_t0ABE, _t0AD3, _t0AE8, _t0AFD};
    real _t0AFF = 0.57735026919e0;
    real _t0B00 = -0.1e1;
    real _t0B01 = -0.1e1;
    real _t0B02 = 0.1e1;
    vec4 _t0B03 = [_t0AFF, _t0B00, _t0B01, _t0B02];
    real _t0B04 = 0.57735026919e0;
    real _t0B05 = 0.1e1;
    real _t0B06 = 0.e0;
    real _t0B07 = 0.e0;
    vec4 _t0B08 = [_t0B04, _t0B05, _t0B06, _t0B07];
    real _t0B09 = 0.57735026919e0;
    real _t0B0A = 0.e0;
    real _t0B0B = 0.1e1;
    real _t0B0C = 0.e0;
    vec4 _t0B0D = [_t0B09, _t0B0A, _t0B0B, _t0B0C];
    real _t0B0E = 0.e0;
    real _t0B0F = 0.e0;
    real _t0B10 = 0.e0;
    real _t0B11 = 0.1e1;
    vec4 _t0B12 = [_t0B0E, _t0B0F, _t0B10, _t0B11];
    tensor[4,4] _t0B13 = [_t0B03, _t0B08, _t0B0D, _t0B12];
    real _t0B14 = 0.1e1;
    real _t0B15 = 0.e0;
    real _t0B16 = 0.e0;
    real _t0B17 = 0.e0;
    vec4 _t0B18 = [_t0B14, _t0B15, _t0B16, _t0B17];
    real _t0B19 = 0.e0;
    real _t0B1A = 0.1e1;
    real _t0B1B = 0.e0;
    real _t0B1C = 0.e0;
    vec4 _t0B1D = [_t0B19, _t0B1A, _t0B1B, _t0B1C];
    real _t0B1E = 0.e0;
    real _t0B1F = 0.e0;
    real _t0B20 = 0.1e1;
    real _t0B21 = 0.e0;
    vec4 _t0B22 = [_t0B1E, _t0B1F, _t0B20, _t0B21];
    real _t0B23 = 0.e0;
    real _t0B24 = 0.e0;
    real _t0B25 = 0.e0;
    real _t0B26 = 0.1e1;
    vec4 _t0B27 = [_t0B23, _t0B24, _t0B25, _t0B26];
    tensor[4,4] _t0B28 = [_t0B18, _t0B1D, _t0B22, _t0B27];
    real _t0B29 = 0.e0;
    real _t0B2A = 0.1e1;
    real _t0B2B = 0.e0;
    real _t0B2C = 0.e0;
    vec4 _t0B2D = [_t0B29, _t0B2A, _t0B2B, _t0B2C];
    real _t0B2E = -0.1e1;
    real _t0B2F = 0.e0;
    real _t0B30 = 0.e0;
    real _t0B31 = 0.e0;
    vec4 _t0B32 = [_t0B2E, _t0B2F, _t0B30, _t0B31];
    real _t0B33 = 0.e0;
    real _t0B34 = 0.e0;
    real _t0B35 = 0.1e1;
    real _t0B36 = 0.e0;
    vec4 _t0B37 = [_t0B33, _t0B34, _t0B35, _t0B36];
    real _t0B38 = 0.e0;
    real _t0B39 = 0.e0;
    real _t0B3A = 0.e0;
    real _t0B3B = 0.1e1;
    vec4 _t0B3C = [_t0B38, _t0B39, _t0B3A, _t0B3B];
    tensor[4,4] _t0B3D = [_t0B2D, _t0B32, _t0B37, _t0B3C];
    real _t0B3E = 0.e0;
    real _t0B3F = 0.1e1;
    real _t0B40 = 0.e0;
    real _t0B41 = 0.e0;
    vec4 _t0B42 = [_t0B3E, _t0B3F, _t0B40, _t0B41];
    real _t0B43 = 0.e0;
    real _t0B44 = 0.e0;
    real _t0B45 = 0.1e1;
    real _t0B46 = 0.e0;
    vec4 _t0B47 = [_t0B43, _t0B44, _t0B45, _t0B46];
    real _t0B48 = 0.1e1;
    real _t0B49 = 0.e0;
    real _t0B4A = 0.e0;
    real _t0B4B = 0.e0;
    vec4 _t0B4C = [_t0B48, _t0B49, _t0B4A, _t0B4B];
    real _t0B4D = 0.e0;
    real _t0B4E = 0.e0;
    real _t0B4F = 0.e0;
    real _t0B50 = 0.1e1;
    vec4 _t0B51 = [_t0B4D, _t0B4E, _t0B4F, _t0B50];
    tensor[4,4] _t0B52 = [_t0B42, _t0B47, _t0B4C, _t0B51];
    tensor[4,4][4] _t0B53 = {_t0B13, _t0B28, _t0B3D, _t0B52};
    real _t0B54 = -0.1e1;
    real _t0B55 = -0.57735026919e0;
    real _t0B56 = -0.1e1;
    real _t0B57 = 0.1e1;
    vec4 _t0B58 = [_t0B54, _t0B55, _t0B56, _t0B57];
    real _t0B59 = 0.1e1;
    real _t0B5A = -0.57735026919e0;
    real _t0B5B = 0.e0;
    real _t0B5C = 0.e0;
    vec4 _t0B5D = [_t0B59, _t0B5A, _t0B5B, _t0B5C];
    real _t0B5E = 0.e0;
    real _t0B5F = -0.57735026919e0;
    real _t0B60 = 0.1e1;
    real _t0B61 = 0.e0;
    vec4 _t0B62 = [_t0B5E, _t0B5F, _t0B60, _t0B61];
    real _t0B63 = 0.e0;
    real _t0B64 = 0.e0;
    real _t0B65 = 0.e0;
    real _t0B66 = 0.1e1;
    vec4 _t0B67 = [_t0B63, _t0B64, _t0B65, _t0B66];
    tensor[4,4] _t0B68 = [_t0B58, _t0B5D, _t0B62, _t0B67];
    real _t0B69 = 0.e0;
    real _t0B6A = -0.1e1;
    real _t0B6B = 0.e0;
    real _t0B6C = 0.e0;
    vec4 _t0B6D = [_t0B69, _t0B6A, _t0B6B, _t0B6C];
    real _t0B6E = 0.1e1;
    real _t0B6F = 0.e0;
    real _t0B70 = 0.e0;
    real _t0B71 = 0.e0;
    vec4 _t0B72 = [_t0B6E, _t0B6F, _t0B70, _t0B71];
    real _t0B73 = 0.e0;
    real _t0B74 = 0.e0;
    real _t0B75 = 0.1e1;
    real _t0B76 = 0.e0;
    vec4 _t0B77 = [_t0B73, _t0B74, _t0B75, _t0B76];
    real _t0B78 = 0.e0;
    real _t0B79 = 0.e0;
    real _t0B7A = 0.e0;
    real _t0B7B = 0.1e1;
    vec4 _t0B7C = [_t0B78, _t0B79, _t0B7A, _t0B7B];
    tensor[4,4] _t0B7D = [_t0B6D, _t0B72, _t0B77, _t0B7C];
    real _t0B7E = 0.1e1;
    real _t0B7F = 0.e0;
    real _t0B80 = 0.e0;
    real _t0B81 = 0.e0;
    vec4 _t0B82 = [_t0B7E, _t0B7F, _t0B80, _t0B81];
    real _t0B83 = 0.e0;
    real _t0B84 = 0.1e1;
    real _t0B85 = 0.e0;
    real _t0B86 = 0.e0;
    vec4 _t0B87 = [_t0B83, _t0B84, _t0B85, _t0B86];
    real _t0B88 = 0.e0;
    real _t0B89 = 0.e0;
    real _t0B8A = 0.1e1;
    real _t0B8B = 0.e0;
    vec4 _t0B8C = [_t0B88, _t0B89, _t0B8A, _t0B8B];
    real _t0B8D = 0.e0;
    real _t0B8E = 0.e0;
    real _t0B8F = 0.e0;
    real _t0B90 = 0.1e1;
    vec4 _t0B91 = [_t0B8D, _t0B8E, _t0B8F, _t0B90];
    tensor[4,4] _t0B92 = [_t0B82, _t0B87, _t0B8C, _t0B91];
    real _t0B93 = 0.1e1;
    real _t0B94 = 0.e0;
    real _t0B95 = 0.e0;
    real _t0B96 = 0.e0;
    vec4 _t0B97 = [_t0B93, _t0B94, _t0B95, _t0B96];
    real _t0B98 = 0.e0;
    real _t0B99 = 0.e0;
    real _t0B9A = 0.1e1;
    real _t0B9B = 0.e0;
    vec4 _t0B9C = [_t0B98, _t0B99, _t0B9A, _t0B9B];
    real _t0B9D = 0.e0;
    real _t0B9E = -0.1e1;
    real _t0B9F = 0.e0;
    real _t0BA0 = 0.e0;
    vec4 _t0BA1 = [_t0B9D, _t0B9E, _t0B9F, _t0BA0];
    real _t0BA2 = 0.e0;
    real _t0BA3 = 0.e0;
    real _t0BA4 = 0.e0;
    real _t0BA5 = 0.1e1;
    vec4 _t0BA6 = [_t0BA2, _t0BA3, _t0BA4, _t0BA5];
    tensor[4,4] _t0BA7 = [_t0B97, _t0B9C, _t0BA1, _t0BA6];
    tensor[4,4][4] _t0BA8 = {_t0B68, _t0B7D, _t0B92, _t0BA7};
    real _t0BA9 = -0.1e1;
    real _t0BAA = -0.1e1;
    real _t0BAB = 0.57735026919e0;
    real _t0BAC = 0.1e1;
    vec4 _t0BAD = [_t0BA9, _t0BAA, _t0BAB, _t0BAC];
    real _t0BAE = 0.1e1;
    real _t0BAF = 0.e0;
    real _t0BB0 = 0.57735026919e0;
    real _t0BB1 = 0.e0;
    vec4 _t0BB2 = [_t0BAE, _t0BAF, _t0BB0, _t0BB1];
    real _t0BB3 = 0.e0;
    real _t0BB4 = 0.1e1;
    real _t0BB5 = 0.57735026919e0;
    real _t0BB6 = 0.e0;
    vec4 _t0BB7 = [_t0BB3, _t0BB4, _t0BB5, _t0BB6];
    real _t0BB8 = 0.e0;
    real _t0BB9 = 0.e0;
    real _t0BBA = 0.e0;
    real _t0BBB = 0.1e1;
    vec4 _t0BBC = [_t0BB8, _t0BB9, _t0BBA, _t0BBB];
    tensor[4,4] _t0BBD = [_t0BAD, _t0BB2, _t0BB7, _t0BBC];
    real _t0BBE = 0.e0;
    real _t0BBF = 0.e0;
    real _t0BC0 = 0.1e1;
    real _t0BC1 = 0.e0;
    vec4 _t0BC2 = [_t0BBE, _t0BBF, _t0BC0, _t0BC1];
    real _t0BC3 = 0.1e1;
    real _t0BC4 = 0.e0;
    real _t0BC5 = 0.e0;
    real _t0BC6 = 0.e0;
    vec4 _t0BC7 = [_t0BC3, _t0BC4, _t0BC5, _t0BC6];
    real _t0BC8 = 0.e0;
    real _t0BC9 = 0.1e1;
    real _t0BCA = 0.e0;
    real _t0BCB = 0.e0;
    vec4 _t0BCC = [_t0BC8, _t0BC9, _t0BCA, _t0BCB];
    real _t0BCD = 0.e0;
    real _t0BCE = 0.e0;
    real _t0BCF = 0.e0;
    real _t0BD0 = 0.1e1;
    vec4 _t0BD1 = [_t0BCD, _t0BCE, _t0BCF, _t0BD0];
    tensor[4,4] _t0BD2 = [_t0BC2, _t0BC7, _t0BCC, _t0BD1];
    real _t0BD3 = 0.1e1;
    real _t0BD4 = 0.e0;
    real _t0BD5 = 0.e0;
    real _t0BD6 = 0.e0;
    vec4 _t0BD7 = [_t0BD3, _t0BD4, _t0BD5, _t0BD6];
    real _t0BD8 = 0.e0;
    real _t0BD9 = 0.e0;
    real _t0BDA = -0.1e1;
    real _t0BDB = 0.e0;
    vec4 _t0BDC = [_t0BD8, _t0BD9, _t0BDA, _t0BDB];
    real _t0BDD = 0.e0;
    real _t0BDE = 0.1e1;
    real _t0BDF = 0.e0;
    real _t0BE0 = 0.e0;
    vec4 _t0BE1 = [_t0BDD, _t0BDE, _t0BDF, _t0BE0];
    real _t0BE2 = 0.e0;
    real _t0BE3 = 0.e0;
    real _t0BE4 = 0.e0;
    real _t0BE5 = 0.1e1;
    vec4 _t0BE6 = [_t0BE2, _t0BE3, _t0BE4, _t0BE5];
    tensor[4,4] _t0BE7 = [_t0BD7, _t0BDC, _t0BE1, _t0BE6];
    real _t0BE8 = 0.1e1;
    real _t0BE9 = 0.e0;
    real _t0BEA = 0.e0;
    real _t0BEB = 0.e0;
    vec4 _t0BEC = [_t0BE8, _t0BE9, _t0BEA, _t0BEB];
    real _t0BED = 0.e0;
    real _t0BEE = 0.1e1;
    real _t0BEF = 0.e0;
    real _t0BF0 = 0.e0;
    vec4 _t0BF1 = [_t0BED, _t0BEE, _t0BEF, _t0BF0];
    real _t0BF2 = 0.e0;
    real _t0BF3 = 0.e0;
    real _t0BF4 = 0.1e1;
    real _t0BF5 = 0.e0;
    vec4 _t0BF6 = [_t0BF2, _t0BF3, _t0BF4, _t0BF5];
    real _t0BF7 = 0.e0;
    real _t0BF8 = 0.e0;
    real _t0BF9 = 0.e0;
    real _t0BFA = 0.1e1;
    vec4 _t0BFB = [_t0BF7, _t0BF8, _t0BF9, _t0BFA];
    tensor[4,4] _t0BFC = [_t0BEC, _t0BF1, _t0BF6, _t0BFB];
    tensor[4,4][4] _t0BFD = {_t0BBD, _t0BD2, _t0BE7, _t0BFC};
    tensor[4,4][4][4] _t0BFE = {_t0AFE, _t0B53, _t0BA8, _t0BFD};
    real _t0BFF = time092E[1];
    int _t0C00 = prim $r2i01B7 (_t0BFF);
    tensor[4,4][4] _t0C01 = prim $sub01C0<tensor[4,4][4]; %4> (_t0BFE, _t0C00);
    real _t0C02 = time092E[1];
    int _t0C03 = prim $r2i01B7 (_t0C02);
    int[2] _t0C04 = func nextCell40932 (_t0C03, cellId092B, mesh092A);
    int _t0C05 = 1;
    int _t0C06 = prim $sub01C0<int; %2> (_t0C04, _t0C05);
    tensor[4,4] _t0C07 = prim $sub01C0<tensor[4,4]; %4> (_t0C01, _t0C06);
    real _t0C08 = time092E[0];
    vec3 _t0C09 = prim *0036<$[3]> (_t0C08, dPos092D);
    vec3 _t0C0A = prim +0017<$[3]> (_t0C09, refPos092C);
    real _t0C0B = _t0C0A[0];
    real _t0C0C = time092E[0];
    vec3 _t0C0D = prim *0036<$[3]> (_t0C0C, dPos092D);
    vec3 _t0C0E = prim +0017<$[3]> (_t0C0D, refPos092C);
    real _t0C0F = _t0C0E[1];
    real _t0C10 = time092E[0];
    vec3 _t0C11 = prim *0036<$[3]> (_t0C10, dPos092D);
    vec3 _t0C12 = prim +0017<$[3]> (_t0C11, refPos092C);
    real _t0C13 = _t0C12[2];
    real _t0C14 = 0.1e1;
    vec4 _t0C15 = [_t0C0B, _t0C0F, _t0C13, _t0C14];
    vec4 _t0C16 = prim •00CE<$[4,4]; $[4]; $[4]> (_t0C07, _t0C15);
    real _t0C17 = _t0C16[1];
    real _t0C18 = 0.1e1;
    real _t0C19 = 0.e0;
    real _t0C1A = 0.e0;
    real _t0C1B = 0.e0;
    vec4 _t0C1C = [_t0C18, _t0C19, _t0C1A, _t0C1B];
    real _t0C1D = 0.e0;
    real _t0C1E = 0.1e1;
    real _t0C1F = 0.e0;
    real _t0C20 = 0.e0;
    vec4 _t0C21 = [_t0C1D, _t0C1E, _t0C1F, _t0C20];
    real _t0C22 = 0.e0;
    real _t0C23 = 0.e0;
    real _t0C24 = 0.1e1;
    real _t0C25 = 0.e0;
    vec4 _t0C26 = [_t0C22, _t0C23, _t0C24, _t0C25];
    real _t0C27 = 0.971445146547e-16;
    real _t0C28 = 0.e0;
    real _t0C29 = 0.e0;
    real _t0C2A = 0.1e1;
    vec4 _t0C2B = [_t0C27, _t0C28, _t0C29, _t0C2A];
    tensor[4,4] _t0C2C = [_t0C1C, _t0C21, _t0C26, _t0C2B];
    real _t0C2D = 0.57735026919e0;
    real _t0C2E = 0.57735026919e0;
    real _t0C2F = 0.57735026919e0;
    real _t0C30 = -0.57735026919e0;
    vec4 _t0C31 = [_t0C2D, _t0C2E, _t0C2F, _t0C30];
    real _t0C32 = -0.333333333333e0;
    real _t0C33 = 0.666666666667e0;
    real _t0C34 = -0.333333333333e0;
    real _t0C35 = 0.333333333333e0;
    vec4 _t0C36 = [_t0C32, _t0C33, _t0C34, _t0C35];
    real _t0C37 = -0.333333333333e0;
    real _t0C38 = -0.333333333333e0;
    real _t0C39 = 0.666666666667e0;
    real _t0C3A = 0.333333333333e0;
    vec4 _t0C3B = [_t0C37, _t0C38, _t0C39, _t0C3A];
    real _t0C3C = 0.971445146547e-16;
    real _t0C3D = 0.e0;
    real _t0C3E = 0.e0;
    real _t0C3F = 0.1e1;
    vec4 _t0C40 = [_t0C3C, _t0C3D, _t0C3E, _t0C3F];
    tensor[4,4] _t0C41 = [_t0C31, _t0C36, _t0C3B, _t0C40];
    real _t0C42 = -0.333333333333e0;
    real _t0C43 = 0.666666666667e0;
    real _t0C44 = -0.333333333333e0;
    real _t0C45 = 0.333333333333e0;
    vec4 _t0C46 = [_t0C42, _t0C43, _t0C44, _t0C45];
    real _t0C47 = -0.57735026919e0;
    real _t0C48 = -0.57735026919e0;
    real _t0C49 = -0.57735026919e0;
    real _t0C4A = 0.57735026919e0;
    vec4 _t0C4B = [_t0C47, _t0C48, _t0C49, _t0C4A];
    real _t0C4C = -0.333333333333e0;
    real _t0C4D = -0.333333333333e0;
    real _t0C4E = 0.666666666667e0;
    real _t0C4F = 0.333333333333e0;
    vec4 _t0C50 = [_t0C4C, _t0C4D, _t0C4E, _t0C4F];
    real _t0C51 = 0.971445146547e-16;
    real _t0C52 = 0.e0;
    real _t0C53 = 0.e0;
    real _t0C54 = 0.1e1;
    vec4 _t0C55 = [_t0C51, _t0C52, _t0C53, _t0C54];
    tensor[4,4] _t0C56 = [_t0C46, _t0C4B, _t0C50, _t0C55];
    real _t0C57 = -0.333333333333e0;
    real _t0C58 = 0.666666666667e0;
    real _t0C59 = -0.333333333333e0;
    real _t0C5A = 0.333333333333e0;
    vec4 _t0C5B = [_t0C57, _t0C58, _t0C59, _t0C5A];
    real _t0C5C = -0.333333333333e0;
    real _t0C5D = -0.333333333333e0;
    real _t0C5E = 0.666666666667e0;
    real _t0C5F = 0.333333333333e0;
    vec4 _t0C60 = [_t0C5C, _t0C5D, _t0C5E, _t0C5F];
    real _t0C61 = 0.57735026919e0;
    real _t0C62 = 0.57735026919e0;
    real _t0C63 = 0.57735026919e0;
    real _t0C64 = -0.57735026919e0;
    vec4 _t0C65 = [_t0C61, _t0C62, _t0C63, _t0C64];
    real _t0C66 = 0.971445146547e-16;
    real _t0C67 = 0.e0;
    real _t0C68 = 0.e0;
    real _t0C69 = 0.1e1;
    vec4 _t0C6A = [_t0C66, _t0C67, _t0C68, _t0C69];
    tensor[4,4] _t0C6B = [_t0C5B, _t0C60, _t0C65, _t0C6A];
    tensor[4,4][4] _t0C6C = {_t0C2C, _t0C41, _t0C56, _t0C6B};
    real _t0C6D = 0.57735026919e0;
    real _t0C6E = -0.1e1;
    real _t0C6F = -0.1e1;
    real _t0C70 = 0.1e1;
    vec4 _t0C71 = [_t0C6D, _t0C6E, _t0C6F, _t0C70];
    real _t0C72 = 0.57735026919e0;
    real _t0C73 = 0.1e1;
    real _t0C74 = 0.e0;
    real _t0C75 = 0.e0;
    vec4 _t0C76 = [_t0C72, _t0C73, _t0C74, _t0C75];
    real _t0C77 = 0.57735026919e0;
    real _t0C78 = 0.e0;
    real _t0C79 = 0.1e1;
    real _t0C7A = 0.e0;
    vec4 _t0C7B = [_t0C77, _t0C78, _t0C79, _t0C7A];
    real _t0C7C = 0.e0;
    real _t0C7D = 0.e0;
    real _t0C7E = 0.e0;
    real _t0C7F = 0.1e1;
    vec4 _t0C80 = [_t0C7C, _t0C7D, _t0C7E, _t0C7F];
    tensor[4,4] _t0C81 = [_t0C71, _t0C76, _t0C7B, _t0C80];
    real _t0C82 = 0.1e1;
    real _t0C83 = 0.e0;
    real _t0C84 = 0.e0;
    real _t0C85 = 0.e0;
    vec4 _t0C86 = [_t0C82, _t0C83, _t0C84, _t0C85];
    real _t0C87 = 0.e0;
    real _t0C88 = 0.1e1;
    real _t0C89 = 0.e0;
    real _t0C8A = 0.e0;
    vec4 _t0C8B = [_t0C87, _t0C88, _t0C89, _t0C8A];
    real _t0C8C = 0.e0;
    real _t0C8D = 0.e0;
    real _t0C8E = 0.1e1;
    real _t0C8F = 0.e0;
    vec4 _t0C90 = [_t0C8C, _t0C8D, _t0C8E, _t0C8F];
    real _t0C91 = 0.e0;
    real _t0C92 = 0.e0;
    real _t0C93 = 0.e0;
    real _t0C94 = 0.1e1;
    vec4 _t0C95 = [_t0C91, _t0C92, _t0C93, _t0C94];
    tensor[4,4] _t0C96 = [_t0C86, _t0C8B, _t0C90, _t0C95];
    real _t0C97 = 0.e0;
    real _t0C98 = 0.1e1;
    real _t0C99 = 0.e0;
    real _t0C9A = 0.e0;
    vec4 _t0C9B = [_t0C97, _t0C98, _t0C99, _t0C9A];
    real _t0C9C = -0.1e1;
    real _t0C9D = 0.e0;
    real _t0C9E = 0.e0;
    real _t0C9F = 0.e0;
    vec4 _t0CA0 = [_t0C9C, _t0C9D, _t0C9E, _t0C9F];
    real _t0CA1 = 0.e0;
    real _t0CA2 = 0.e0;
    real _t0CA3 = 0.1e1;
    real _t0CA4 = 0.e0;
    vec4 _t0CA5 = [_t0CA1, _t0CA2, _t0CA3, _t0CA4];
    real _t0CA6 = 0.e0;
    real _t0CA7 = 0.e0;
    real _t0CA8 = 0.e0;
    real _t0CA9 = 0.1e1;
    vec4 _t0CAA = [_t0CA6, _t0CA7, _t0CA8, _t0CA9];
    tensor[4,4] _t0CAB = [_t0C9B, _t0CA0, _t0CA5, _t0CAA];
    real _t0CAC = 0.e0;
    real _t0CAD = 0.1e1;
    real _t0CAE = 0.e0;
    real _t0CAF = 0.e0;
    vec4 _t0CB0 = [_t0CAC, _t0CAD, _t0CAE, _t0CAF];
    real _t0CB1 = 0.e0;
    real _t0CB2 = 0.e0;
    real _t0CB3 = 0.1e1;
    real _t0CB4 = 0.e0;
    vec4 _t0CB5 = [_t0CB1, _t0CB2, _t0CB3, _t0CB4];
    real _t0CB6 = 0.1e1;
    real _t0CB7 = 0.e0;
    real _t0CB8 = 0.e0;
    real _t0CB9 = 0.e0;
    vec4 _t0CBA = [_t0CB6, _t0CB7, _t0CB8, _t0CB9];
    real _t0CBB = 0.e0;
    real _t0CBC = 0.e0;
    real _t0CBD = 0.e0;
    real _t0CBE = 0.1e1;
    vec4 _t0CBF = [_t0CBB, _t0CBC, _t0CBD, _t0CBE];
    tensor[4,4] _t0CC0 = [_t0CB0, _t0CB5, _t0CBA, _t0CBF];
    tensor[4,4][4] _t0CC1 = {_t0C81, _t0C96, _t0CAB, _t0CC0};
    real _t0CC2 = -0.1e1;
    real _t0CC3 = -0.57735026919e0;
    real _t0CC4 = -0.1e1;
    real _t0CC5 = 0.1e1;
    vec4 _t0CC6 = [_t0CC2, _t0CC3, _t0CC4, _t0CC5];
    real _t0CC7 = 0.1e1;
    real _t0CC8 = -0.57735026919e0;
    real _t0CC9 = 0.e0;
    real _t0CCA = 0.e0;
    vec4 _t0CCB = [_t0CC7, _t0CC8, _t0CC9, _t0CCA];
    real _t0CCC = 0.e0;
    real _t0CCD = -0.57735026919e0;
    real _t0CCE = 0.1e1;
    real _t0CCF = 0.e0;
    vec4 _t0CD0 = [_t0CCC, _t0CCD, _t0CCE, _t0CCF];
    real _t0CD1 = 0.e0;
    real _t0CD2 = 0.e0;
    real _t0CD3 = 0.e0;
    real _t0CD4 = 0.1e1;
    vec4 _t0CD5 = [_t0CD1, _t0CD2, _t0CD3, _t0CD4];
    tensor[4,4] _t0CD6 = [_t0CC6, _t0CCB, _t0CD0, _t0CD5];
    real _t0CD7 = 0.e0;
    real _t0CD8 = -0.1e1;
    real _t0CD9 = 0.e0;
    real _t0CDA = 0.e0;
    vec4 _t0CDB = [_t0CD7, _t0CD8, _t0CD9, _t0CDA];
    real _t0CDC = 0.1e1;
    real _t0CDD = 0.e0;
    real _t0CDE = 0.e0;
    real _t0CDF = 0.e0;
    vec4 _t0CE0 = [_t0CDC, _t0CDD, _t0CDE, _t0CDF];
    real _t0CE1 = 0.e0;
    real _t0CE2 = 0.e0;
    real _t0CE3 = 0.1e1;
    real _t0CE4 = 0.e0;
    vec4 _t0CE5 = [_t0CE1, _t0CE2, _t0CE3, _t0CE4];
    real _t0CE6 = 0.e0;
    real _t0CE7 = 0.e0;
    real _t0CE8 = 0.e0;
    real _t0CE9 = 0.1e1;
    vec4 _t0CEA = [_t0CE6, _t0CE7, _t0CE8, _t0CE9];
    tensor[4,4] _t0CEB = [_t0CDB, _t0CE0, _t0CE5, _t0CEA];
    real _t0CEC = 0.1e1;
    real _t0CED = 0.e0;
    real _t0CEE = 0.e0;
    real _t0CEF = 0.e0;
    vec4 _t0CF0 = [_t0CEC, _t0CED, _t0CEE, _t0CEF];
    real _t0CF1 = 0.e0;
    real _t0CF2 = 0.1e1;
    real _t0CF3 = 0.e0;
    real _t0CF4 = 0.e0;
    vec4 _t0CF5 = [_t0CF1, _t0CF2, _t0CF3, _t0CF4];
    real _t0CF6 = 0.e0;
    real _t0CF7 = 0.e0;
    real _t0CF8 = 0.1e1;
    real _t0CF9 = 0.e0;
    vec4 _t0CFA = [_t0CF6, _t0CF7, _t0CF8, _t0CF9];
    real _t0CFB = 0.e0;
    real _t0CFC = 0.e0;
    real _t0CFD = 0.e0;
    real _t0CFE = 0.1e1;
    vec4 _t0CFF = [_t0CFB, _t0CFC, _t0CFD, _t0CFE];
    tensor[4,4] _t0D00 = [_t0CF0, _t0CF5, _t0CFA, _t0CFF];
    real _t0D01 = 0.1e1;
    real _t0D02 = 0.e0;
    real _t0D03 = 0.e0;
    real _t0D04 = 0.e0;
    vec4 _t0D05 = [_t0D01, _t0D02, _t0D03, _t0D04];
    real _t0D06 = 0.e0;
    real _t0D07 = 0.e0;
    real _t0D08 = 0.1e1;
    real _t0D09 = 0.e0;
    vec4 _t0D0A = [_t0D06, _t0D07, _t0D08, _t0D09];
    real _t0D0B = 0.e0;
    real _t0D0C = -0.1e1;
    real _t0D0D = 0.e0;
    real _t0D0E = 0.e0;
    vec4 _t0D0F = [_t0D0B, _t0D0C, _t0D0D, _t0D0E];
    real _t0D10 = 0.e0;
    real _t0D11 = 0.e0;
    real _t0D12 = 0.e0;
    real _t0D13 = 0.1e1;
    vec4 _t0D14 = [_t0D10, _t0D11, _t0D12, _t0D13];
    tensor[4,4] _t0D15 = [_t0D05, _t0D0A, _t0D0F, _t0D14];
    tensor[4,4][4] _t0D16 = {_t0CD6, _t0CEB, _t0D00, _t0D15};
    real _t0D17 = -0.1e1;
    real _t0D18 = -0.1e1;
    real _t0D19 = 0.57735026919e0;
    real _t0D1A = 0.1e1;
    vec4 _t0D1B = [_t0D17, _t0D18, _t0D19, _t0D1A];
    real _t0D1C = 0.1e1;
    real _t0D1D = 0.e0;
    real _t0D1E = 0.57735026919e0;
    real _t0D1F = 0.e0;
    vec4 _t0D20 = [_t0D1C, _t0D1D, _t0D1E, _t0D1F];
    real _t0D21 = 0.e0;
    real _t0D22 = 0.1e1;
    real _t0D23 = 0.57735026919e0;
    real _t0D24 = 0.e0;
    vec4 _t0D25 = [_t0D21, _t0D22, _t0D23, _t0D24];
    real _t0D26 = 0.e0;
    real _t0D27 = 0.e0;
    real _t0D28 = 0.e0;
    real _t0D29 = 0.1e1;
    vec4 _t0D2A = [_t0D26, _t0D27, _t0D28, _t0D29];
    tensor[4,4] _t0D2B = [_t0D1B, _t0D20, _t0D25, _t0D2A];
    real _t0D2C = 0.e0;
    real _t0D2D = 0.e0;
    real _t0D2E = 0.1e1;
    real _t0D2F = 0.e0;
    vec4 _t0D30 = [_t0D2C, _t0D2D, _t0D2E, _t0D2F];
    real _t0D31 = 0.1e1;
    real _t0D32 = 0.e0;
    real _t0D33 = 0.e0;
    real _t0D34 = 0.e0;
    vec4 _t0D35 = [_t0D31, _t0D32, _t0D33, _t0D34];
    real _t0D36 = 0.e0;
    real _t0D37 = 0.1e1;
    real _t0D38 = 0.e0;
    real _t0D39 = 0.e0;
    vec4 _t0D3A = [_t0D36, _t0D37, _t0D38, _t0D39];
    real _t0D3B = 0.e0;
    real _t0D3C = 0.e0;
    real _t0D3D = 0.e0;
    real _t0D3E = 0.1e1;
    vec4 _t0D3F = [_t0D3B, _t0D3C, _t0D3D, _t0D3E];
    tensor[4,4] _t0D40 = [_t0D30, _t0D35, _t0D3A, _t0D3F];
    real _t0D41 = 0.1e1;
    real _t0D42 = 0.e0;
    real _t0D43 = 0.e0;
    real _t0D44 = 0.e0;
    vec4 _t0D45 = [_t0D41, _t0D42, _t0D43, _t0D44];
    real _t0D46 = 0.e0;
    real _t0D47 = 0.e0;
    real _t0D48 = -0.1e1;
    real _t0D49 = 0.e0;
    vec4 _t0D4A = [_t0D46, _t0D47, _t0D48, _t0D49];
    real _t0D4B = 0.e0;
    real _t0D4C = 0.1e1;
    real _t0D4D = 0.e0;
    real _t0D4E = 0.e0;
    vec4 _t0D4F = [_t0D4B, _t0D4C, _t0D4D, _t0D4E];
    real _t0D50 = 0.e0;
    real _t0D51 = 0.e0;
    real _t0D52 = 0.e0;
    real _t0D53 = 0.1e1;
    vec4 _t0D54 = [_t0D50, _t0D51, _t0D52, _t0D53];
    tensor[4,4] _t0D55 = [_t0D45, _t0D4A, _t0D4F, _t0D54];
    real _t0D56 = 0.1e1;
    real _t0D57 = 0.e0;
    real _t0D58 = 0.e0;
    real _t0D59 = 0.e0;
    vec4 _t0D5A = [_t0D56, _t0D57, _t0D58, _t0D59];
    real _t0D5B = 0.e0;
    real _t0D5C = 0.1e1;
    real _t0D5D = 0.e0;
    real _t0D5E = 0.e0;
    vec4 _t0D5F = [_t0D5B, _t0D5C, _t0D5D, _t0D5E];
    real _t0D60 = 0.e0;
    real _t0D61 = 0.e0;
    real _t0D62 = 0.1e1;
    real _t0D63 = 0.e0;
    vec4 _t0D64 = [_t0D60, _t0D61, _t0D62, _t0D63];
    real _t0D65 = 0.e0;
    real _t0D66 = 0.e0;
    real _t0D67 = 0.e0;
    real _t0D68 = 0.1e1;
    vec4 _t0D69 = [_t0D65, _t0D66, _t0D67, _t0D68];
    tensor[4,4] _t0D6A = [_t0D5A, _t0D5F, _t0D64, _t0D69];
    tensor[4,4][4] _t0D6B = {_t0D2B, _t0D40, _t0D55, _t0D6A};
    tensor[4,4][4][4] _t0D6C = {_t0C6C, _t0CC1, _t0D16, _t0D6B};
    real _t0D6D = time092E[1];
    int _t0D6E = prim $r2i01B7 (_t0D6D);
    tensor[4,4][4] _t0D6F = prim $sub01C0<tensor[4,4][4]; %4> (_t0D6C, _t0D6E);
    real _t0D70 = time092E[1];
    int _t0D71 = prim $r2i01B7 (_t0D70);
    int[2] _t0D72 = func nextCell40932 (_t0D71, cellId092B, mesh092A);
    int _t0D73 = 1;
    int _t0D74 = prim $sub01C0<int; %2> (_t0D72, _t0D73);
    tensor[4,4] _t0D75 = prim $sub01C0<tensor[4,4]; %4> (_t0D6F, _t0D74);
    real _t0D76 = time092E[0];
    vec3 _t0D77 = prim *0036<$[3]> (_t0D76, dPos092D);
    vec3 _t0D78 = prim +0017<$[3]> (_t0D77, refPos092C);
    real _t0D79 = _t0D78[0];
    real _t0D7A = time092E[0];
    vec3 _t0D7B = prim *0036<$[3]> (_t0D7A, dPos092D);
    vec3 _t0D7C = prim +0017<$[3]> (_t0D7B, refPos092C);
    real _t0D7D = _t0D7C[1];
    real _t0D7E = time092E[0];
    vec3 _t0D7F = prim *0036<$[3]> (_t0D7E, dPos092D);
    vec3 _t0D80 = prim +0017<$[3]> (_t0D7F, refPos092C);
    real _t0D81 = _t0D80[2];
    real _t0D82 = 0.1e1;
    vec4 _t0D83 = [_t0D79, _t0D7D, _t0D81, _t0D82];
    vec4 _t0D84 = prim •00CE<$[4,4]; $[4]; $[4]> (_t0D75, _t0D83);
    real _t0D85 = _t0D84[2];
    vec3 _t0D86 = [_t0AA9, _t0C17, _t0D85];
    real _t0D87 = time092E[1];
    int _t0D88 = prim $r2i01B7 (_t0D87);
    int[2] _t0D89 = func nextCell40932 (_t0D88, cellId092B, mesh092A);
    int _t0D8A = 1;
    int _t0D8B = prim $sub01C0<int; %2> (_t0D89, _t0D8A);
    Femdata: MeshPos _t0D8C = extractFemItemN((mesh092A, _t093B, _t0D86, _t0D8B),RefBuild(Mesh),);
    return _t0D8C;
  } else {
    real _t0D8D = time092E[0];
    vec3 _t0D8E = prim *0036<$[3]> (_t0D8D, dPos092D);
    vec3 _t0D8F = prim +0017<$[3]> (_t0D8E, refPos092C);
    Femdata: MeshPos _t0D90 = extractFemItemN((mesh092A, _t0D8F),InvalidBuildBoundary(MeshPos),);
    return _t0D90;
  }
}
function int[2]#6 nextCell40932 (int faceIdx0D91, int cell0D92, Femdata: Mesh mesh0D93)
{
  int _t0D94 = -1;
  bool _t0D95 = prim ==0082 (faceIdx0D91, _t0D94);
  if _t0D95 {
    int _t0D96 = -1;
    int _t0D97 = -1;
    int[2] _t0D98 = {_t0D96, _t0D97};
    return _t0D98;
  } else {
    int _t0D99 = 8;
    int _t0D9A = prim *0033 (cell0D92, _t0D99);
    int _t0D9B = 2;
    int _t0D9C = prim *0033 (faceIdx0D91, _t0D9B);
    int _t0D9D = prim +0015 (_t0D9A, _t0D9C);
    int[2] _t0D9E = extractFemItemN((mesh0D93, _t0D9D),CellFaceCell(Mesh),);
    return _t0D9E;
  }
}
function vec2#0 _enter0D9F (vec3 refPos0DA0, vec3 dPos0DA1)
{
  real time0DA2 = +inf;
  int face0DA3 = -1;
  real faceTime0DA4 = -inf;
  real _t0DA5 = 0.57735026919e0;
  real _t0DA6 = 0.57735026919e0;
  real _t0DA7 = 0.57735026919e0;
  real _t0DA8 = 0.57735026919e0;
  vec3 _t0DA9 = [_t0DA6, _t0DA7, _t0DA8];
  real _t0DAA = prim •00CE<$[3]; $[3]; $[]> (_t0DA9, refPos0DA0);
  real _t0DAB = prim -0026<$[]> (_t0DA5, _t0DAA);
  real _t0DAC = 0.57735026919e0;
  real _t0DAD = 0.57735026919e0;
  real _t0DAE = 0.57735026919e0;
  vec3 _t0DAF = [_t0DAC, _t0DAD, _t0DAE];
  real _t0DB0 = prim •00CE<$[3]; $[3]; $[]> (_t0DAF, dPos0DA1);
  real _t0DB1 = prim /0055 (_t0DAB, _t0DB0);
  real _t0DB2 = -0.1e-7;
  bool _t0DB3 = prim >=007E (_t0DB1, _t0DB2);
  real _t0DB4 = 0.57735026919e0;
  real _t0DB5 = 0.57735026919e0;
  real _t0DB6 = 0.57735026919e0;
  real _t0DB7 = 0.57735026919e0;
  vec3 _t0DB8 = [_t0DB5, _t0DB6, _t0DB7];
  real _t0DB9 = prim •00CE<$[3]; $[3]; $[]> (_t0DB8, refPos0DA0);
  real _t0DBA = prim -0026<$[]> (_t0DB4, _t0DB9);
  real _t0DBB = 0.57735026919e0;
  real _t0DBC = 0.57735026919e0;
  real _t0DBD = 0.57735026919e0;
  vec3 _t0DBE = [_t0DBB, _t0DBC, _t0DBD];
  real _t0DBF = prim •00CE<$[3]; $[3]; $[]> (_t0DBE, dPos0DA1);
  real _t0DC0 = prim /0055 (_t0DBA, _t0DBF);
  bool _t0DC1 = prim >0080 (time0DA2, _t0DC0);
  real _t0DC2 = 0.57735026919e0;
  real _t0DC3 = 0.57735026919e0;
  real _t0DC4 = 0.57735026919e0;
  vec3 _t0DC5 = [_t0DC2, _t0DC3, _t0DC4];
  real _t0DC6 = prim •00CE<$[3]; $[3]; $[]> (_t0DC5, dPos0DA1);
  real _t0DC7 = prim |()|00B5<$[]> (_t0DC6);
  real _t0DC8 = 0.1e-7;
  bool _t0DC9 = prim >=007E (_t0DC7, _t0DC8);
  bool _t0DCA = prim $and01C4 (_t0DC1, _t0DC9);
  bool _t0DCB = prim $and01C4 (_t0DB3, _t0DCA);
  if _t0DCB {
    real _t0DCC = 0.1e1;
    real _t0DCD = 0.1e-7;
    real _t0DCE = prim +0017<$[]> (_t0DCC, _t0DCD);
    real _t0DCF = 0.1e1;
    real _t0DD0 = 0.1e1;
    real _t0DD1 = 0.1e1;
    vec3 _t0DD2 = [_t0DCF, _t0DD0, _t0DD1];
    real _t0DD3 = 0.57735026919e0;
    real _t0DD4 = 0.57735026919e0;
    real _t0DD5 = 0.57735026919e0;
    real _t0DD6 = 0.57735026919e0;
    vec3 _t0DD7 = [_t0DD4, _t0DD5, _t0DD6];
    real _t0DD8 = prim •00CE<$[3]; $[3]; $[]> (_t0DD7, refPos0DA0);
    real _t0DD9 = prim -0026<$[]> (_t0DD3, _t0DD8);
    real _t0DDA = 0.57735026919e0;
    real _t0DDB = 0.57735026919e0;
    real _t0DDC = 0.57735026919e0;
    vec3 _t0DDD = [_t0DDA, _t0DDB, _t0DDC];
    real _t0DDE = prim •00CE<$[3]; $[3]; $[]> (_t0DDD, dPos0DA1);
    real _t0DDF = prim /0055 (_t0DD9, _t0DDE);
    vec3 _t0DE0 = prim *0038<$[3]> (dPos0DA1, _t0DDF);
    vec3 _t0DE1 = prim +0017<$[3]> (refPos0DA0, _t0DE0);
    real _t0DE2 = prim •00CE<$[3]; $[3]; $[]> (_t0DD2, _t0DE1);
    bool _t0DE3 = prim >0080 (_t0DCE, _t0DE2);
    real _t0DE4 = 0.1e-7;
    real _t0DE5 = 0.1e-7;
    real _t0DE6 = 0.1e-7;
    vec3 _t0DE7 = [_t0DE4, _t0DE5, _t0DE6];
    real _t0DE8 = 0.57735026919e0;
    real _t0DE9 = 0.57735026919e0;
    real _t0DEA = 0.57735026919e0;
    real _t0DEB = 0.57735026919e0;
    vec3 _t0DEC = [_t0DE9, _t0DEA, _t0DEB];
    real _t0DED = prim •00CE<$[3]; $[3]; $[]> (_t0DEC, refPos0DA0);
    real _t0DEE = prim -0026<$[]> (_t0DE8, _t0DED);
    real _t0DEF = 0.57735026919e0;
    real _t0DF0 = 0.57735026919e0;
    real _t0DF1 = 0.57735026919e0;
    vec3 _t0DF2 = [_t0DEF, _t0DF0, _t0DF1];
    real _t0DF3 = prim •00CE<$[3]; $[3]; $[]> (_t0DF2, dPos0DA1);
    real _t0DF4 = prim /0055 (_t0DEE, _t0DF3);
    vec3 _t0DF5 = prim *0038<$[3]> (dPos0DA1, _t0DF4);
    vec3 _t0DF6 = prim +0017<$[3]> (refPos0DA0, _t0DF5);
    vec3 _t0DF7 = prim +0017<$[3]> (_t0DE7, _t0DF6);
    real _t0DF8 = _t0DF7[0];
    real _t0DF9 = -0.e0;
    bool _t0DFA = prim >0080 (_t0DF8, _t0DF9);
    real _t0DFB = 0.1e-7;
    real _t0DFC = 0.1e-7;
    real _t0DFD = 0.1e-7;
    vec3 _t0DFE = [_t0DFB, _t0DFC, _t0DFD];
    real _t0DFF = 0.57735026919e0;
    real _t0E00 = 0.57735026919e0;
    real _t0E01 = 0.57735026919e0;
    real _t0E02 = 0.57735026919e0;
    vec3 _t0E03 = [_t0E00, _t0E01, _t0E02];
    real _t0E04 = prim •00CE<$[3]; $[3]; $[]> (_t0E03, refPos0DA0);
    real _t0E05 = prim -0026<$[]> (_t0DFF, _t0E04);
    real _t0E06 = 0.57735026919e0;
    real _t0E07 = 0.57735026919e0;
    real _t0E08 = 0.57735026919e0;
    vec3 _t0E09 = [_t0E06, _t0E07, _t0E08];
    real _t0E0A = prim •00CE<$[3]; $[3]; $[]> (_t0E09, dPos0DA1);
    real _t0E0B = prim /0055 (_t0E05, _t0E0A);
    vec3 _t0E0C = prim *0038<$[3]> (dPos0DA1, _t0E0B);
    vec3 _t0E0D = prim +0017<$[3]> (refPos0DA0, _t0E0C);
    vec3 _t0E0E = prim +0017<$[3]> (_t0DFE, _t0E0D);
    real _t0E0F = _t0E0E[1];
    real _t0E10 = -0.e0;
    bool _t0E11 = prim >0080 (_t0E0F, _t0E10);
    real _t0E12 = 0.1e-7;
    real _t0E13 = 0.1e-7;
    real _t0E14 = 0.1e-7;
    vec3 _t0E15 = [_t0E12, _t0E13, _t0E14];
    real _t0E16 = 0.57735026919e0;
    real _t0E17 = 0.57735026919e0;
    real _t0E18 = 0.57735026919e0;
    real _t0E19 = 0.57735026919e0;
    vec3 _t0E1A = [_t0E17, _t0E18, _t0E19];
    real _t0E1B = prim •00CE<$[3]; $[3]; $[]> (_t0E1A, refPos0DA0);
    real _t0E1C = prim -0026<$[]> (_t0E16, _t0E1B);
    real _t0E1D = 0.57735026919e0;
    real _t0E1E = 0.57735026919e0;
    real _t0E1F = 0.57735026919e0;
    vec3 _t0E20 = [_t0E1D, _t0E1E, _t0E1F];
    real _t0E21 = prim •00CE<$[3]; $[3]; $[]> (_t0E20, dPos0DA1);
    real _t0E22 = prim /0055 (_t0E1C, _t0E21);
    vec3 _t0E23 = prim *0038<$[3]> (dPos0DA1, _t0E22);
    vec3 _t0E24 = prim +0017<$[3]> (refPos0DA0, _t0E23);
    vec3 _t0E25 = prim +0017<$[3]> (_t0E15, _t0E24);
    real _t0E26 = _t0E25[2];
    real _t0E27 = -0.e0;
    bool _t0E28 = prim >0080 (_t0E26, _t0E27);
    bool _t0E29 = prim $and01C4 (_t0E11, _t0E28);
    bool _t0E2A = prim $and01C4 (_t0DFA, _t0E29);
    bool _t0E2B = prim $and01C4 (_t0DE3, _t0E2A);
    if _t0E2B {
      real _t0E2C = 0.57735026919e0;
      real _t0E2D = 0.57735026919e0;
      real _t0E2E = 0.57735026919e0;
      real _t0E2F = 0.57735026919e0;
      vec3 _t0E30 = [_t0E2D, _t0E2E, _t0E2F];
      real _t0E31 = prim •00CE<$[3]; $[3]; $[]> (_t0E30, refPos0DA0);
      real _t0E32 = prim -0026<$[]> (_t0E2C, _t0E31);
      real _t0E33 = 0.57735026919e0;
      real _t0E34 = 0.57735026919e0;
      real _t0E35 = 0.57735026919e0;
      vec3 _t0E36 = [_t0E33, _t0E34, _t0E35];
      real _t0E37 = prim •00CE<$[3]; $[3]; $[]> (_t0E36, dPos0DA1);
      time0DA2 = prim /0055 (_t0E32, _t0E37);
      face0DA3 = 0;
    }
  }
  real _t0E38 = 0.e0;
  real _t0E39 = -0.1e1;
  real _t0E3A = 0.e0;
  real _t0E3B = 0.e0;
  vec3 _t0E3C = [_t0E39, _t0E3A, _t0E3B];
  real _t0E3D = prim •00CE<$[3]; $[3]; $[]> (_t0E3C, refPos0DA0);
  real _t0E3E = prim -0026<$[]> (_t0E38, _t0E3D);
  real _t0E3F = -0.1e1;
  real _t0E40 = 0.e0;
  real _t0E41 = 0.e0;
  vec3 _t0E42 = [_t0E3F, _t0E40, _t0E41];
  real _t0E43 = prim •00CE<$[3]; $[3]; $[]> (_t0E42, dPos0DA1);
  real _t0E44 = prim /0055 (_t0E3E, _t0E43);
  real _t0E45 = -0.1e-7;
  bool _t0E46 = prim >=007E (_t0E44, _t0E45);
  real _t0E47 = 0.e0;
  real _t0E48 = -0.1e1;
  real _t0E49 = 0.e0;
  real _t0E4A = 0.e0;
  vec3 _t0E4B = [_t0E48, _t0E49, _t0E4A];
  real _t0E4C = prim •00CE<$[3]; $[3]; $[]> (_t0E4B, refPos0DA0);
  real _t0E4D = prim -0026<$[]> (_t0E47, _t0E4C);
  real _t0E4E = -0.1e1;
  real _t0E4F = 0.e0;
  real _t0E50 = 0.e0;
  vec3 _t0E51 = [_t0E4E, _t0E4F, _t0E50];
  real _t0E52 = prim •00CE<$[3]; $[3]; $[]> (_t0E51, dPos0DA1);
  real _t0E53 = prim /0055 (_t0E4D, _t0E52);
  bool _t0E54 = prim >0080 (time0DA2, _t0E53);
  real _t0E55 = -0.1e1;
  real _t0E56 = 0.e0;
  real _t0E57 = 0.e0;
  vec3 _t0E58 = [_t0E55, _t0E56, _t0E57];
  real _t0E59 = prim •00CE<$[3]; $[3]; $[]> (_t0E58, dPos0DA1);
  real _t0E5A = prim |()|00B5<$[]> (_t0E59);
  real _t0E5B = 0.1e-7;
  bool _t0E5C = prim >=007E (_t0E5A, _t0E5B);
  bool _t0E5D = prim $and01C4 (_t0E54, _t0E5C);
  bool _t0E5E = prim $and01C4 (_t0E46, _t0E5D);
  if _t0E5E {
    real _t0E5F = 0.1e1;
    real _t0E60 = 0.1e-7;
    real _t0E61 = prim +0017<$[]> (_t0E5F, _t0E60);
    real _t0E62 = 0.1e1;
    real _t0E63 = 0.1e1;
    real _t0E64 = 0.1e1;
    vec3 _t0E65 = [_t0E62, _t0E63, _t0E64];
    real _t0E66 = 0.e0;
    real _t0E67 = -0.1e1;
    real _t0E68 = 0.e0;
    real _t0E69 = 0.e0;
    vec3 _t0E6A = [_t0E67, _t0E68, _t0E69];
    real _t0E6B = prim •00CE<$[3]; $[3]; $[]> (_t0E6A, refPos0DA0);
    real _t0E6C = prim -0026<$[]> (_t0E66, _t0E6B);
    real _t0E6D = -0.1e1;
    real _t0E6E = 0.e0;
    real _t0E6F = 0.e0;
    vec3 _t0E70 = [_t0E6D, _t0E6E, _t0E6F];
    real _t0E71 = prim •00CE<$[3]; $[3]; $[]> (_t0E70, dPos0DA1);
    real _t0E72 = prim /0055 (_t0E6C, _t0E71);
    vec3 _t0E73 = prim *0038<$[3]> (dPos0DA1, _t0E72);
    vec3 _t0E74 = prim +0017<$[3]> (refPos0DA0, _t0E73);
    real _t0E75 = prim •00CE<$[3]; $[3]; $[]> (_t0E65, _t0E74);
    bool _t0E76 = prim >0080 (_t0E61, _t0E75);
    real _t0E77 = 0.1e-7;
    real _t0E78 = 0.1e-7;
    real _t0E79 = 0.1e-7;
    vec3 _t0E7A = [_t0E77, _t0E78, _t0E79];
    real _t0E7B = 0.e0;
    real _t0E7C = -0.1e1;
    real _t0E7D = 0.e0;
    real _t0E7E = 0.e0;
    vec3 _t0E7F = [_t0E7C, _t0E7D, _t0E7E];
    real _t0E80 = prim •00CE<$[3]; $[3]; $[]> (_t0E7F, refPos0DA0);
    real _t0E81 = prim -0026<$[]> (_t0E7B, _t0E80);
    real _t0E82 = -0.1e1;
    real _t0E83 = 0.e0;
    real _t0E84 = 0.e0;
    vec3 _t0E85 = [_t0E82, _t0E83, _t0E84];
    real _t0E86 = prim •00CE<$[3]; $[3]; $[]> (_t0E85, dPos0DA1);
    real _t0E87 = prim /0055 (_t0E81, _t0E86);
    vec3 _t0E88 = prim *0038<$[3]> (dPos0DA1, _t0E87);
    vec3 _t0E89 = prim +0017<$[3]> (refPos0DA0, _t0E88);
    vec3 _t0E8A = prim +0017<$[3]> (_t0E7A, _t0E89);
    real _t0E8B = _t0E8A[0];
    real _t0E8C = -0.e0;
    bool _t0E8D = prim >0080 (_t0E8B, _t0E8C);
    real _t0E8E = 0.1e-7;
    real _t0E8F = 0.1e-7;
    real _t0E90 = 0.1e-7;
    vec3 _t0E91 = [_t0E8E, _t0E8F, _t0E90];
    real _t0E92 = 0.e0;
    real _t0E93 = -0.1e1;
    real _t0E94 = 0.e0;
    real _t0E95 = 0.e0;
    vec3 _t0E96 = [_t0E93, _t0E94, _t0E95];
    real _t0E97 = prim •00CE<$[3]; $[3]; $[]> (_t0E96, refPos0DA0);
    real _t0E98 = prim -0026<$[]> (_t0E92, _t0E97);
    real _t0E99 = -0.1e1;
    real _t0E9A = 0.e0;
    real _t0E9B = 0.e0;
    vec3 _t0E9C = [_t0E99, _t0E9A, _t0E9B];
    real _t0E9D = prim •00CE<$[3]; $[3]; $[]> (_t0E9C, dPos0DA1);
    real _t0E9E = prim /0055 (_t0E98, _t0E9D);
    vec3 _t0E9F = prim *0038<$[3]> (dPos0DA1, _t0E9E);
    vec3 _t0EA0 = prim +0017<$[3]> (refPos0DA0, _t0E9F);
    vec3 _t0EA1 = prim +0017<$[3]> (_t0E91, _t0EA0);
    real _t0EA2 = _t0EA1[1];
    real _t0EA3 = -0.e0;
    bool _t0EA4 = prim >0080 (_t0EA2, _t0EA3);
    real _t0EA5 = 0.1e-7;
    real _t0EA6 = 0.1e-7;
    real _t0EA7 = 0.1e-7;
    vec3 _t0EA8 = [_t0EA5, _t0EA6, _t0EA7];
    real _t0EA9 = 0.e0;
    real _t0EAA = -0.1e1;
    real _t0EAB = 0.e0;
    real _t0EAC = 0.e0;
    vec3 _t0EAD = [_t0EAA, _t0EAB, _t0EAC];
    real _t0EAE = prim •00CE<$[3]; $[3]; $[]> (_t0EAD, refPos0DA0);
    real _t0EAF = prim -0026<$[]> (_t0EA9, _t0EAE);
    real _t0EB0 = -0.1e1;
    real _t0EB1 = 0.e0;
    real _t0EB2 = 0.e0;
    vec3 _t0EB3 = [_t0EB0, _t0EB1, _t0EB2];
    real _t0EB4 = prim •00CE<$[3]; $[3]; $[]> (_t0EB3, dPos0DA1);
    real _t0EB5 = prim /0055 (_t0EAF, _t0EB4);
    vec3 _t0EB6 = prim *0038<$[3]> (dPos0DA1, _t0EB5);
    vec3 _t0EB7 = prim +0017<$[3]> (refPos0DA0, _t0EB6);
    vec3 _t0EB8 = prim +0017<$[3]> (_t0EA8, _t0EB7);
    real _t0EB9 = _t0EB8[2];
    real _t0EBA = -0.e0;
    bool _t0EBB = prim >0080 (_t0EB9, _t0EBA);
    bool _t0EBC = prim $and01C4 (_t0EA4, _t0EBB);
    bool _t0EBD = prim $and01C4 (_t0E8D, _t0EBC);
    bool _t0EBE = prim $and01C4 (_t0E76, _t0EBD);
    if _t0EBE {
      real _t0EBF = 0.e0;
      real _t0EC0 = -0.1e1;
      real _t0EC1 = 0.e0;
      real _t0EC2 = 0.e0;
      vec3 _t0EC3 = [_t0EC0, _t0EC1, _t0EC2];
      real _t0EC4 = prim •00CE<$[3]; $[3]; $[]> (_t0EC3, refPos0DA0);
      real _t0EC5 = prim -0026<$[]> (_t0EBF, _t0EC4);
      real _t0EC6 = -0.1e1;
      real _t0EC7 = 0.e0;
      real _t0EC8 = 0.e0;
      vec3 _t0EC9 = [_t0EC6, _t0EC7, _t0EC8];
      real _t0ECA = prim •00CE<$[3]; $[3]; $[]> (_t0EC9, dPos0DA1);
      time0DA2 = prim /0055 (_t0EC5, _t0ECA);
      face0DA3 = 1;
    }
  }
  real _t0ECB = 0.e0;
  real _t0ECC = 0.e0;
  real _t0ECD = -0.1e1;
  real _t0ECE = 0.e0;
  vec3 _t0ECF = [_t0ECC, _t0ECD, _t0ECE];
  real _t0ED0 = prim •00CE<$[3]; $[3]; $[]> (_t0ECF, refPos0DA0);
  real _t0ED1 = prim -0026<$[]> (_t0ECB, _t0ED0);
  real _t0ED2 = 0.e0;
  real _t0ED3 = -0.1e1;
  real _t0ED4 = 0.e0;
  vec3 _t0ED5 = [_t0ED2, _t0ED3, _t0ED4];
  real _t0ED6 = prim •00CE<$[3]; $[3]; $[]> (_t0ED5, dPos0DA1);
  real _t0ED7 = prim /0055 (_t0ED1, _t0ED6);
  real _t0ED8 = -0.1e-7;
  bool _t0ED9 = prim >=007E (_t0ED7, _t0ED8);
  real _t0EDA = 0.e0;
  real _t0EDB = 0.e0;
  real _t0EDC = -0.1e1;
  real _t0EDD = 0.e0;
  vec3 _t0EDE = [_t0EDB, _t0EDC, _t0EDD];
  real _t0EDF = prim •00CE<$[3]; $[3]; $[]> (_t0EDE, refPos0DA0);
  real _t0EE0 = prim -0026<$[]> (_t0EDA, _t0EDF);
  real _t0EE1 = 0.e0;
  real _t0EE2 = -0.1e1;
  real _t0EE3 = 0.e0;
  vec3 _t0EE4 = [_t0EE1, _t0EE2, _t0EE3];
  real _t0EE5 = prim •00CE<$[3]; $[3]; $[]> (_t0EE4, dPos0DA1);
  real _t0EE6 = prim /0055 (_t0EE0, _t0EE5);
  bool _t0EE7 = prim >0080 (time0DA2, _t0EE6);
  real _t0EE8 = 0.e0;
  real _t0EE9 = -0.1e1;
  real _t0EEA = 0.e0;
  vec3 _t0EEB = [_t0EE8, _t0EE9, _t0EEA];
  real _t0EEC = prim •00CE<$[3]; $[3]; $[]> (_t0EEB, dPos0DA1);
  real _t0EED = prim |()|00B5<$[]> (_t0EEC);
  real _t0EEE = 0.1e-7;
  bool _t0EEF = prim >=007E (_t0EED, _t0EEE);
  bool _t0EF0 = prim $and01C4 (_t0EE7, _t0EEF);
  bool _t0EF1 = prim $and01C4 (_t0ED9, _t0EF0);
  if _t0EF1 {
    real _t0EF2 = 0.1e1;
    real _t0EF3 = 0.1e-7;
    real _t0EF4 = prim +0017<$[]> (_t0EF2, _t0EF3);
    real _t0EF5 = 0.1e1;
    real _t0EF6 = 0.1e1;
    real _t0EF7 = 0.1e1;
    vec3 _t0EF8 = [_t0EF5, _t0EF6, _t0EF7];
    real _t0EF9 = 0.e0;
    real _t0EFA = 0.e0;
    real _t0EFB = -0.1e1;
    real _t0EFC = 0.e0;
    vec3 _t0EFD = [_t0EFA, _t0EFB, _t0EFC];
    real _t0EFE = prim •00CE<$[3]; $[3]; $[]> (_t0EFD, refPos0DA0);
    real _t0EFF = prim -0026<$[]> (_t0EF9, _t0EFE);
    real _t0F00 = 0.e0;
    real _t0F01 = -0.1e1;
    real _t0F02 = 0.e0;
    vec3 _t0F03 = [_t0F00, _t0F01, _t0F02];
    real _t0F04 = prim •00CE<$[3]; $[3]; $[]> (_t0F03, dPos0DA1);
    real _t0F05 = prim /0055 (_t0EFF, _t0F04);
    vec3 _t0F06 = prim *0038<$[3]> (dPos0DA1, _t0F05);
    vec3 _t0F07 = prim +0017<$[3]> (refPos0DA0, _t0F06);
    real _t0F08 = prim •00CE<$[3]; $[3]; $[]> (_t0EF8, _t0F07);
    bool _t0F09 = prim >0080 (_t0EF4, _t0F08);
    real _t0F0A = 0.1e-7;
    real _t0F0B = 0.1e-7;
    real _t0F0C = 0.1e-7;
    vec3 _t0F0D = [_t0F0A, _t0F0B, _t0F0C];
    real _t0F0E = 0.e0;
    real _t0F0F = 0.e0;
    real _t0F10 = -0.1e1;
    real _t0F11 = 0.e0;
    vec3 _t0F12 = [_t0F0F, _t0F10, _t0F11];
    real _t0F13 = prim •00CE<$[3]; $[3]; $[]> (_t0F12, refPos0DA0);
    real _t0F14 = prim -0026<$[]> (_t0F0E, _t0F13);
    real _t0F15 = 0.e0;
    real _t0F16 = -0.1e1;
    real _t0F17 = 0.e0;
    vec3 _t0F18 = [_t0F15, _t0F16, _t0F17];
    real _t0F19 = prim •00CE<$[3]; $[3]; $[]> (_t0F18, dPos0DA1);
    real _t0F1A = prim /0055 (_t0F14, _t0F19);
    vec3 _t0F1B = prim *0038<$[3]> (dPos0DA1, _t0F1A);
    vec3 _t0F1C = prim +0017<$[3]> (refPos0DA0, _t0F1B);
    vec3 _t0F1D = prim +0017<$[3]> (_t0F0D, _t0F1C);
    real _t0F1E = _t0F1D[0];
    real _t0F1F = -0.e0;
    bool _t0F20 = prim >0080 (_t0F1E, _t0F1F);
    real _t0F21 = 0.1e-7;
    real _t0F22 = 0.1e-7;
    real _t0F23 = 0.1e-7;
    vec3 _t0F24 = [_t0F21, _t0F22, _t0F23];
    real _t0F25 = 0.e0;
    real _t0F26 = 0.e0;
    real _t0F27 = -0.1e1;
    real _t0F28 = 0.e0;
    vec3 _t0F29 = [_t0F26, _t0F27, _t0F28];
    real _t0F2A = prim •00CE<$[3]; $[3]; $[]> (_t0F29, refPos0DA0);
    real _t0F2B = prim -0026<$[]> (_t0F25, _t0F2A);
    real _t0F2C = 0.e0;
    real _t0F2D = -0.1e1;
    real _t0F2E = 0.e0;
    vec3 _t0F2F = [_t0F2C, _t0F2D, _t0F2E];
    real _t0F30 = prim •00CE<$[3]; $[3]; $[]> (_t0F2F, dPos0DA1);
    real _t0F31 = prim /0055 (_t0F2B, _t0F30);
    vec3 _t0F32 = prim *0038<$[3]> (dPos0DA1, _t0F31);
    vec3 _t0F33 = prim +0017<$[3]> (refPos0DA0, _t0F32);
    vec3 _t0F34 = prim +0017<$[3]> (_t0F24, _t0F33);
    real _t0F35 = _t0F34[1];
    real _t0F36 = -0.e0;
    bool _t0F37 = prim >0080 (_t0F35, _t0F36);
    real _t0F38 = 0.1e-7;
    real _t0F39 = 0.1e-7;
    real _t0F3A = 0.1e-7;
    vec3 _t0F3B = [_t0F38, _t0F39, _t0F3A];
    real _t0F3C = 0.e0;
    real _t0F3D = 0.e0;
    real _t0F3E = -0.1e1;
    real _t0F3F = 0.e0;
    vec3 _t0F40 = [_t0F3D, _t0F3E, _t0F3F];
    real _t0F41 = prim •00CE<$[3]; $[3]; $[]> (_t0F40, refPos0DA0);
    real _t0F42 = prim -0026<$[]> (_t0F3C, _t0F41);
    real _t0F43 = 0.e0;
    real _t0F44 = -0.1e1;
    real _t0F45 = 0.e0;
    vec3 _t0F46 = [_t0F43, _t0F44, _t0F45];
    real _t0F47 = prim •00CE<$[3]; $[3]; $[]> (_t0F46, dPos0DA1);
    real _t0F48 = prim /0055 (_t0F42, _t0F47);
    vec3 _t0F49 = prim *0038<$[3]> (dPos0DA1, _t0F48);
    vec3 _t0F4A = prim +0017<$[3]> (refPos0DA0, _t0F49);
    vec3 _t0F4B = prim +0017<$[3]> (_t0F3B, _t0F4A);
    real _t0F4C = _t0F4B[2];
    real _t0F4D = -0.e0;
    bool _t0F4E = prim >0080 (_t0F4C, _t0F4D);
    bool _t0F4F = prim $and01C4 (_t0F37, _t0F4E);
    bool _t0F50 = prim $and01C4 (_t0F20, _t0F4F);
    bool _t0F51 = prim $and01C4 (_t0F09, _t0F50);
    if _t0F51 {
      real _t0F52 = 0.e0;
      real _t0F53 = 0.e0;
      real _t0F54 = -0.1e1;
      real _t0F55 = 0.e0;
      vec3 _t0F56 = [_t0F53, _t0F54, _t0F55];
      real _t0F57 = prim •00CE<$[3]; $[3]; $[]> (_t0F56, refPos0DA0);
      real _t0F58 = prim -0026<$[]> (_t0F52, _t0F57);
      real _t0F59 = 0.e0;
      real _t0F5A = -0.1e1;
      real _t0F5B = 0.e0;
      vec3 _t0F5C = [_t0F59, _t0F5A, _t0F5B];
      real _t0F5D = prim •00CE<$[3]; $[3]; $[]> (_t0F5C, dPos0DA1);
      time0DA2 = prim /0055 (_t0F58, _t0F5D);
      face0DA3 = 2;
    }
  }
  real _t0F5E = 0.e0;
  real _t0F5F = 0.e0;
  real _t0F60 = 0.e0;
  real _t0F61 = -0.1e1;
  vec3 _t0F62 = [_t0F5F, _t0F60, _t0F61];
  real _t0F63 = prim •00CE<$[3]; $[3]; $[]> (_t0F62, refPos0DA0);
  real _t0F64 = prim -0026<$[]> (_t0F5E, _t0F63);
  real _t0F65 = 0.e0;
  real _t0F66 = 0.e0;
  real _t0F67 = -0.1e1;
  vec3 _t0F68 = [_t0F65, _t0F66, _t0F67];
  real _t0F69 = prim •00CE<$[3]; $[3]; $[]> (_t0F68, dPos0DA1);
  real _t0F6A = prim /0055 (_t0F64, _t0F69);
  real _t0F6B = -0.1e-7;
  bool _t0F6C = prim >=007E (_t0F6A, _t0F6B);
  real _t0F6D = 0.e0;
  real _t0F6E = 0.e0;
  real _t0F6F = 0.e0;
  real _t0F70 = -0.1e1;
  vec3 _t0F71 = [_t0F6E, _t0F6F, _t0F70];
  real _t0F72 = prim •00CE<$[3]; $[3]; $[]> (_t0F71, refPos0DA0);
  real _t0F73 = prim -0026<$[]> (_t0F6D, _t0F72);
  real _t0F74 = 0.e0;
  real _t0F75 = 0.e0;
  real _t0F76 = -0.1e1;
  vec3 _t0F77 = [_t0F74, _t0F75, _t0F76];
  real _t0F78 = prim •00CE<$[3]; $[3]; $[]> (_t0F77, dPos0DA1);
  real _t0F79 = prim /0055 (_t0F73, _t0F78);
  bool _t0F7A = prim >0080 (time0DA2, _t0F79);
  real _t0F7B = 0.e0;
  real _t0F7C = 0.e0;
  real _t0F7D = -0.1e1;
  vec3 _t0F7E = [_t0F7B, _t0F7C, _t0F7D];
  real _t0F7F = prim •00CE<$[3]; $[3]; $[]> (_t0F7E, dPos0DA1);
  real _t0F80 = prim |()|00B5<$[]> (_t0F7F);
  real _t0F81 = 0.1e-7;
  bool _t0F82 = prim >=007E (_t0F80, _t0F81);
  bool _t0F83 = prim $and01C4 (_t0F7A, _t0F82);
  bool _t0F84 = prim $and01C4 (_t0F6C, _t0F83);
  if _t0F84 {
    real _t0F85 = 0.1e1;
    real _t0F86 = 0.1e-7;
    real _t0F87 = prim +0017<$[]> (_t0F85, _t0F86);
    real _t0F88 = 0.1e1;
    real _t0F89 = 0.1e1;
    real _t0F8A = 0.1e1;
    vec3 _t0F8B = [_t0F88, _t0F89, _t0F8A];
    real _t0F8C = 0.e0;
    real _t0F8D = 0.e0;
    real _t0F8E = 0.e0;
    real _t0F8F = -0.1e1;
    vec3 _t0F90 = [_t0F8D, _t0F8E, _t0F8F];
    real _t0F91 = prim •00CE<$[3]; $[3]; $[]> (_t0F90, refPos0DA0);
    real _t0F92 = prim -0026<$[]> (_t0F8C, _t0F91);
    real _t0F93 = 0.e0;
    real _t0F94 = 0.e0;
    real _t0F95 = -0.1e1;
    vec3 _t0F96 = [_t0F93, _t0F94, _t0F95];
    real _t0F97 = prim •00CE<$[3]; $[3]; $[]> (_t0F96, dPos0DA1);
    real _t0F98 = prim /0055 (_t0F92, _t0F97);
    vec3 _t0F99 = prim *0038<$[3]> (dPos0DA1, _t0F98);
    vec3 _t0F9A = prim +0017<$[3]> (refPos0DA0, _t0F99);
    real _t0F9B = prim •00CE<$[3]; $[3]; $[]> (_t0F8B, _t0F9A);
    bool _t0F9C = prim >0080 (_t0F87, _t0F9B);
    real _t0F9D = 0.1e-7;
    real _t0F9E = 0.1e-7;
    real _t0F9F = 0.1e-7;
    vec3 _t0FA0 = [_t0F9D, _t0F9E, _t0F9F];
    real _t0FA1 = 0.e0;
    real _t0FA2 = 0.e0;
    real _t0FA3 = 0.e0;
    real _t0FA4 = -0.1e1;
    vec3 _t0FA5 = [_t0FA2, _t0FA3, _t0FA4];
    real _t0FA6 = prim •00CE<$[3]; $[3]; $[]> (_t0FA5, refPos0DA0);
    real _t0FA7 = prim -0026<$[]> (_t0FA1, _t0FA6);
    real _t0FA8 = 0.e0;
    real _t0FA9 = 0.e0;
    real _t0FAA = -0.1e1;
    vec3 _t0FAB = [_t0FA8, _t0FA9, _t0FAA];
    real _t0FAC = prim •00CE<$[3]; $[3]; $[]> (_t0FAB, dPos0DA1);
    real _t0FAD = prim /0055 (_t0FA7, _t0FAC);
    vec3 _t0FAE = prim *0038<$[3]> (dPos0DA1, _t0FAD);
    vec3 _t0FAF = prim +0017<$[3]> (refPos0DA0, _t0FAE);
    vec3 _t0FB0 = prim +0017<$[3]> (_t0FA0, _t0FAF);
    real _t0FB1 = _t0FB0[0];
    real _t0FB2 = -0.e0;
    bool _t0FB3 = prim >0080 (_t0FB1, _t0FB2);
    real _t0FB4 = 0.1e-7;
    real _t0FB5 = 0.1e-7;
    real _t0FB6 = 0.1e-7;
    vec3 _t0FB7 = [_t0FB4, _t0FB5, _t0FB6];
    real _t0FB8 = 0.e0;
    real _t0FB9 = 0.e0;
    real _t0FBA = 0.e0;
    real _t0FBB = -0.1e1;
    vec3 _t0FBC = [_t0FB9, _t0FBA, _t0FBB];
    real _t0FBD = prim •00CE<$[3]; $[3]; $[]> (_t0FBC, refPos0DA0);
    real _t0FBE = prim -0026<$[]> (_t0FB8, _t0FBD);
    real _t0FBF = 0.e0;
    real _t0FC0 = 0.e0;
    real _t0FC1 = -0.1e1;
    vec3 _t0FC2 = [_t0FBF, _t0FC0, _t0FC1];
    real _t0FC3 = prim •00CE<$[3]; $[3]; $[]> (_t0FC2, dPos0DA1);
    real _t0FC4 = prim /0055 (_t0FBE, _t0FC3);
    vec3 _t0FC5 = prim *0038<$[3]> (dPos0DA1, _t0FC4);
    vec3 _t0FC6 = prim +0017<$[3]> (refPos0DA0, _t0FC5);
    vec3 _t0FC7 = prim +0017<$[3]> (_t0FB7, _t0FC6);
    real _t0FC8 = _t0FC7[1];
    real _t0FC9 = -0.e0;
    bool _t0FCA = prim >0080 (_t0FC8, _t0FC9);
    real _t0FCB = 0.1e-7;
    real _t0FCC = 0.1e-7;
    real _t0FCD = 0.1e-7;
    vec3 _t0FCE = [_t0FCB, _t0FCC, _t0FCD];
    real _t0FCF = 0.e0;
    real _t0FD0 = 0.e0;
    real _t0FD1 = 0.e0;
    real _t0FD2 = -0.1e1;
    vec3 _t0FD3 = [_t0FD0, _t0FD1, _t0FD2];
    real _t0FD4 = prim •00CE<$[3]; $[3]; $[]> (_t0FD3, refPos0DA0);
    real _t0FD5 = prim -0026<$[]> (_t0FCF, _t0FD4);
    real _t0FD6 = 0.e0;
    real _t0FD7 = 0.e0;
    real _t0FD8 = -0.1e1;
    vec3 _t0FD9 = [_t0FD6, _t0FD7, _t0FD8];
    real _t0FDA = prim •00CE<$[3]; $[3]; $[]> (_t0FD9, dPos0DA1);
    real _t0FDB = prim /0055 (_t0FD5, _t0FDA);
    vec3 _t0FDC = prim *0038<$[3]> (dPos0DA1, _t0FDB);
    vec3 _t0FDD = prim +0017<$[3]> (refPos0DA0, _t0FDC);
    vec3 _t0FDE = prim +0017<$[3]> (_t0FCE, _t0FDD);
    real _t0FDF = _t0FDE[2];
    real _t0FE0 = -0.e0;
    bool _t0FE1 = prim >0080 (_t0FDF, _t0FE0);
    bool _t0FE2 = prim $and01C4 (_t0FCA, _t0FE1);
    bool _t0FE3 = prim $and01C4 (_t0FB3, _t0FE2);
    bool _t0FE4 = prim $and01C4 (_t0F9C, _t0FE3);
    if _t0FE4 {
      real _t0FE5 = 0.e0;
      real _t0FE6 = 0.e0;
      real _t0FE7 = 0.e0;
      real _t0FE8 = -0.1e1;
      vec3 _t0FE9 = [_t0FE6, _t0FE7, _t0FE8];
      real _t0FEA = prim •00CE<$[3]; $[3]; $[]> (_t0FE9, refPos0DA0);
      real _t0FEB = prim -0026<$[]> (_t0FE5, _t0FEA);
      real _t0FEC = 0.e0;
      real _t0FED = 0.e0;
      real _t0FEE = -0.1e1;
      vec3 _t0FEF = [_t0FEC, _t0FED, _t0FEE];
      real _t0FF0 = prim •00CE<$[3]; $[3]; $[]> (_t0FEF, dPos0DA1);
      time0DA2 = prim /0055 (_t0FEB, _t0FF0);
      face0DA3 = 3;
    }
  }
  int _t0FF1 = -1;
  bool _t0FF2 = prim !=0086 (face0DA3, _t0FF1);
  real _t0FF3 = 0.1e1;
  real _t0FF4 = 0.1e-7;
  real _t0FF5 = prim +0017<$[]> (_t0FF3, _t0FF4);
  real _t0FF6 = 0.1e1;
  real _t0FF7 = 0.1e1;
  real _t0FF8 = 0.1e1;
  vec3 _t0FF9 = [_t0FF6, _t0FF7, _t0FF8];
  real _t0FFA = 0.e0;
  real _t0FFB = prim max0125 (time0DA2, _t0FFA);
  vec3 _t0FFC = prim *0038<$[3]> (dPos0DA1, _t0FFB);
  vec3 _t0FFD = prim +0017<$[3]> (refPos0DA0, _t0FFC);
  real _t0FFE = prim •00CE<$[3]; $[3]; $[]> (_t0FF9, _t0FFD);
  bool _t0FFF = prim >0080 (_t0FF5, _t0FFE);
  real _t1000 = 0.1e-7;
  real _t1001 = 0.1e-7;
  real _t1002 = 0.1e-7;
  vec3 _t1003 = [_t1000, _t1001, _t1002];
  real _t1004 = 0.e0;
  real _t1005 = prim max0125 (time0DA2, _t1004);
  vec3 _t1006 = prim *0038<$[3]> (dPos0DA1, _t1005);
  vec3 _t1007 = prim +0017<$[3]> (refPos0DA0, _t1006);
  vec3 _t1008 = prim +0017<$[3]> (_t1003, _t1007);
  real _t1009 = _t1008[0];
  real _t100A = -0.e0;
  bool _t100B = prim >0080 (_t1009, _t100A);
  real _t100C = 0.1e-7;
  real _t100D = 0.1e-7;
  real _t100E = 0.1e-7;
  vec3 _t100F = [_t100C, _t100D, _t100E];
  real _t1010 = 0.e0;
  real _t1011 = prim max0125 (time0DA2, _t1010);
  vec3 _t1012 = prim *0038<$[3]> (dPos0DA1, _t1011);
  vec3 _t1013 = prim +0017<$[3]> (refPos0DA0, _t1012);
  vec3 _t1014 = prim +0017<$[3]> (_t100F, _t1013);
  real _t1015 = _t1014[1];
  real _t1016 = -0.e0;
  bool _t1017 = prim >0080 (_t1015, _t1016);
  real _t1018 = 0.1e-7;
  real _t1019 = 0.1e-7;
  real _t101A = 0.1e-7;
  vec3 _t101B = [_t1018, _t1019, _t101A];
  real _t101C = 0.e0;
  real _t101D = prim max0125 (time0DA2, _t101C);
  vec3 _t101E = prim *0038<$[3]> (dPos0DA1, _t101D);
  vec3 _t101F = prim +0017<$[3]> (refPos0DA0, _t101E);
  vec3 _t1020 = prim +0017<$[3]> (_t101B, _t101F);
  real _t1021 = _t1020[2];
  real _t1022 = -0.e0;
  bool _t1023 = prim >0080 (_t1021, _t1022);
  bool _t1024 = prim $and01C4 (_t1017, _t1023);
  bool _t1025 = prim $and01C4 (_t100B, _t1024);
  bool _t1026 = prim $and01C4 (_t0FFF, _t1025);
  bool _t1027 = prim $and01C4 (_t0FF2, _t1026);
  if _t1027 {
    real _t1028 = 0.e0;
    real _t1029 = prim max0125 (time0DA2, _t1028);
    real _t102A = (real)face0DA3;
    vec2 _t102B = [_t1029, _t102A];
    return _t102B;
  } else {
    real _t102C = -0.1e1;
    real _t102D = -0.1e1;
    vec2 _t102E = [_t102C, _t102D];
    return _t102E;
  }
}
function vec2#0 _exit102F (vec3 refPos0DA0, vec3 dPos0DA1, int i1030)
{
  real time1031 = +inf;
  int face1032 = -1;
  real faceTime1033 = -inf;
  real _t1034 = 0.57735026919e0;
  real _t1035 = 0.57735026919e0;
  real _t1036 = 0.57735026919e0;
  real _t1037 = 0.57735026919e0;
  vec3 _t1038 = [_t1035, _t1036, _t1037];
  real _t1039 = prim •00CE<$[3]; $[3]; $[]> (_t1038, refPos0DA0);
  real _t103A = prim -0026<$[]> (_t1034, _t1039);
  real _t103B = 0.57735026919e0;
  real _t103C = 0.57735026919e0;
  real _t103D = 0.57735026919e0;
  vec3 _t103E = [_t103B, _t103C, _t103D];
  real _t103F = prim •00CE<$[3]; $[3]; $[]> (_t103E, dPos0DA1);
  real _t1040 = prim /0055 (_t103A, _t103F);
  real _t1041 = -0.1e-7;
  bool _t1042 = prim >=007E (_t1040, _t1041);
  real _t1043 = 0.57735026919e0;
  real _t1044 = 0.57735026919e0;
  real _t1045 = 0.57735026919e0;
  real _t1046 = 0.57735026919e0;
  vec3 _t1047 = [_t1044, _t1045, _t1046];
  real _t1048 = prim •00CE<$[3]; $[3]; $[]> (_t1047, refPos0DA0);
  real _t1049 = prim -0026<$[]> (_t1043, _t1048);
  real _t104A = 0.57735026919e0;
  real _t104B = 0.57735026919e0;
  real _t104C = 0.57735026919e0;
  vec3 _t104D = [_t104A, _t104B, _t104C];
  real _t104E = prim •00CE<$[3]; $[3]; $[]> (_t104D, dPos0DA1);
  real _t104F = prim /0055 (_t1049, _t104E);
  bool _t1050 = prim >0080 (time1031, _t104F);
  real _t1051 = 0.57735026919e0;
  real _t1052 = 0.57735026919e0;
  real _t1053 = 0.57735026919e0;
  vec3 _t1054 = [_t1051, _t1052, _t1053];
  real _t1055 = prim •00CE<$[3]; $[3]; $[]> (_t1054, dPos0DA1);
  real _t1056 = prim |()|00B5<$[]> (_t1055);
  real _t1057 = 0.1e-7;
  bool _t1058 = prim >=007E (_t1056, _t1057);
  bool _t1059 = prim $and01C4 (_t1050, _t1058);
  bool _t105A = prim $and01C4 (_t1042, _t1059);
  if _t105A {
    int _t105B = 0;
    bool _t105C = prim !=0086 (i1030, _t105B);
    if _t105C {
      real _t105D = 0.57735026919e0;
      real _t105E = 0.57735026919e0;
      real _t105F = 0.57735026919e0;
      real _t1060 = 0.57735026919e0;
      vec3 _t1061 = [_t105E, _t105F, _t1060];
      real _t1062 = prim •00CE<$[3]; $[3]; $[]> (_t1061, refPos0DA0);
      real _t1063 = prim -0026<$[]> (_t105D, _t1062);
      real _t1064 = 0.57735026919e0;
      real _t1065 = 0.57735026919e0;
      real _t1066 = 0.57735026919e0;
      vec3 _t1067 = [_t1064, _t1065, _t1066];
      real _t1068 = prim •00CE<$[3]; $[3]; $[]> (_t1067, dPos0DA1);
      time1031 = prim /0055 (_t1063, _t1068);
      face1032 = 0;
    } else {
      real _t1069 = 0.57735026919e0;
      real _t106A = 0.57735026919e0;
      real _t106B = 0.57735026919e0;
      real _t106C = 0.57735026919e0;
      vec3 _t106D = [_t106A, _t106B, _t106C];
      real _t106E = prim •00CE<$[3]; $[3]; $[]> (_t106D, refPos0DA0);
      real _t106F = prim -0026<$[]> (_t1069, _t106E);
      real _t1070 = 0.57735026919e0;
      real _t1071 = 0.57735026919e0;
      real _t1072 = 0.57735026919e0;
      vec3 _t1073 = [_t1070, _t1071, _t1072];
      real _t1074 = prim •00CE<$[3]; $[3]; $[]> (_t1073, dPos0DA1);
      faceTime1033 = prim /0055 (_t106F, _t1074);
    }
  }
  real _t1075 = 0.e0;
  real _t1076 = -0.1e1;
  real _t1077 = 0.e0;
  real _t1078 = 0.e0;
  vec3 _t1079 = [_t1076, _t1077, _t1078];
  real _t107A = prim •00CE<$[3]; $[3]; $[]> (_t1079, refPos0DA0);
  real _t107B = prim -0026<$[]> (_t1075, _t107A);
  real _t107C = -0.1e1;
  real _t107D = 0.e0;
  real _t107E = 0.e0;
  vec3 _t107F = [_t107C, _t107D, _t107E];
  real _t1080 = prim •00CE<$[3]; $[3]; $[]> (_t107F, dPos0DA1);
  real _t1081 = prim /0055 (_t107B, _t1080);
  real _t1082 = -0.1e-7;
  bool _t1083 = prim >=007E (_t1081, _t1082);
  real _t1084 = 0.e0;
  real _t1085 = -0.1e1;
  real _t1086 = 0.e0;
  real _t1087 = 0.e0;
  vec3 _t1088 = [_t1085, _t1086, _t1087];
  real _t1089 = prim •00CE<$[3]; $[3]; $[]> (_t1088, refPos0DA0);
  real _t108A = prim -0026<$[]> (_t1084, _t1089);
  real _t108B = -0.1e1;
  real _t108C = 0.e0;
  real _t108D = 0.e0;
  vec3 _t108E = [_t108B, _t108C, _t108D];
  real _t108F = prim •00CE<$[3]; $[3]; $[]> (_t108E, dPos0DA1);
  real _t1090 = prim /0055 (_t108A, _t108F);
  bool _t1091 = prim >0080 (time1031, _t1090);
  real _t1092 = -0.1e1;
  real _t1093 = 0.e0;
  real _t1094 = 0.e0;
  vec3 _t1095 = [_t1092, _t1093, _t1094];
  real _t1096 = prim •00CE<$[3]; $[3]; $[]> (_t1095, dPos0DA1);
  real _t1097 = prim |()|00B5<$[]> (_t1096);
  real _t1098 = 0.1e-7;
  bool _t1099 = prim >=007E (_t1097, _t1098);
  bool _t109A = prim $and01C4 (_t1091, _t1099);
  bool _t109B = prim $and01C4 (_t1083, _t109A);
  if _t109B {
    int _t109C = 1;
    bool _t109D = prim !=0086 (i1030, _t109C);
    if _t109D {
      real _t109E = 0.e0;
      real _t109F = -0.1e1;
      real _t10A0 = 0.e0;
      real _t10A1 = 0.e0;
      vec3 _t10A2 = [_t109F, _t10A0, _t10A1];
      real _t10A3 = prim •00CE<$[3]; $[3]; $[]> (_t10A2, refPos0DA0);
      real _t10A4 = prim -0026<$[]> (_t109E, _t10A3);
      real _t10A5 = -0.1e1;
      real _t10A6 = 0.e0;
      real _t10A7 = 0.e0;
      vec3 _t10A8 = [_t10A5, _t10A6, _t10A7];
      real _t10A9 = prim •00CE<$[3]; $[3]; $[]> (_t10A8, dPos0DA1);
      time1031 = prim /0055 (_t10A4, _t10A9);
      face1032 = 1;
    } else {
      real _t10AA = 0.e0;
      real _t10AB = -0.1e1;
      real _t10AC = 0.e0;
      real _t10AD = 0.e0;
      vec3 _t10AE = [_t10AB, _t10AC, _t10AD];
      real _t10AF = prim •00CE<$[3]; $[3]; $[]> (_t10AE, refPos0DA0);
      real _t10B0 = prim -0026<$[]> (_t10AA, _t10AF);
      real _t10B1 = -0.1e1;
      real _t10B2 = 0.e0;
      real _t10B3 = 0.e0;
      vec3 _t10B4 = [_t10B1, _t10B2, _t10B3];
      real _t10B5 = prim •00CE<$[3]; $[3]; $[]> (_t10B4, dPos0DA1);
      faceTime1033 = prim /0055 (_t10B0, _t10B5);
    }
  }
  real _t10B6 = 0.e0;
  real _t10B7 = 0.e0;
  real _t10B8 = -0.1e1;
  real _t10B9 = 0.e0;
  vec3 _t10BA = [_t10B7, _t10B8, _t10B9];
  real _t10BB = prim •00CE<$[3]; $[3]; $[]> (_t10BA, refPos0DA0);
  real _t10BC = prim -0026<$[]> (_t10B6, _t10BB);
  real _t10BD = 0.e0;
  real _t10BE = -0.1e1;
  real _t10BF = 0.e0;
  vec3 _t10C0 = [_t10BD, _t10BE, _t10BF];
  real _t10C1 = prim •00CE<$[3]; $[3]; $[]> (_t10C0, dPos0DA1);
  real _t10C2 = prim /0055 (_t10BC, _t10C1);
  real _t10C3 = -0.1e-7;
  bool _t10C4 = prim >=007E (_t10C2, _t10C3);
  real _t10C5 = 0.e0;
  real _t10C6 = 0.e0;
  real _t10C7 = -0.1e1;
  real _t10C8 = 0.e0;
  vec3 _t10C9 = [_t10C6, _t10C7, _t10C8];
  real _t10CA = prim •00CE<$[3]; $[3]; $[]> (_t10C9, refPos0DA0);
  real _t10CB = prim -0026<$[]> (_t10C5, _t10CA);
  real _t10CC = 0.e0;
  real _t10CD = -0.1e1;
  real _t10CE = 0.e0;
  vec3 _t10CF = [_t10CC, _t10CD, _t10CE];
  real _t10D0 = prim •00CE<$[3]; $[3]; $[]> (_t10CF, dPos0DA1);
  real _t10D1 = prim /0055 (_t10CB, _t10D0);
  bool _t10D2 = prim >0080 (time1031, _t10D1);
  real _t10D3 = 0.e0;
  real _t10D4 = -0.1e1;
  real _t10D5 = 0.e0;
  vec3 _t10D6 = [_t10D3, _t10D4, _t10D5];
  real _t10D7 = prim •00CE<$[3]; $[3]; $[]> (_t10D6, dPos0DA1);
  real _t10D8 = prim |()|00B5<$[]> (_t10D7);
  real _t10D9 = 0.1e-7;
  bool _t10DA = prim >=007E (_t10D8, _t10D9);
  bool _t10DB = prim $and01C4 (_t10D2, _t10DA);
  bool _t10DC = prim $and01C4 (_t10C4, _t10DB);
  if _t10DC {
    int _t10DD = 2;
    bool _t10DE = prim !=0086 (i1030, _t10DD);
    if _t10DE {
      real _t10DF = 0.e0;
      real _t10E0 = 0.e0;
      real _t10E1 = -0.1e1;
      real _t10E2 = 0.e0;
      vec3 _t10E3 = [_t10E0, _t10E1, _t10E2];
      real _t10E4 = prim •00CE<$[3]; $[3]; $[]> (_t10E3, refPos0DA0);
      real _t10E5 = prim -0026<$[]> (_t10DF, _t10E4);
      real _t10E6 = 0.e0;
      real _t10E7 = -0.1e1;
      real _t10E8 = 0.e0;
      vec3 _t10E9 = [_t10E6, _t10E7, _t10E8];
      real _t10EA = prim •00CE<$[3]; $[3]; $[]> (_t10E9, dPos0DA1);
      time1031 = prim /0055 (_t10E5, _t10EA);
      face1032 = 2;
    } else {
      real _t10EB = 0.e0;
      real _t10EC = 0.e0;
      real _t10ED = -0.1e1;
      real _t10EE = 0.e0;
      vec3 _t10EF = [_t10EC, _t10ED, _t10EE];
      real _t10F0 = prim •00CE<$[3]; $[3]; $[]> (_t10EF, refPos0DA0);
      real _t10F1 = prim -0026<$[]> (_t10EB, _t10F0);
      real _t10F2 = 0.e0;
      real _t10F3 = -0.1e1;
      real _t10F4 = 0.e0;
      vec3 _t10F5 = [_t10F2, _t10F3, _t10F4];
      real _t10F6 = prim •00CE<$[3]; $[3]; $[]> (_t10F5, dPos0DA1);
      faceTime1033 = prim /0055 (_t10F1, _t10F6);
    }
  }
  real _t10F7 = 0.e0;
  real _t10F8 = 0.e0;
  real _t10F9 = 0.e0;
  real _t10FA = -0.1e1;
  vec3 _t10FB = [_t10F8, _t10F9, _t10FA];
  real _t10FC = prim •00CE<$[3]; $[3]; $[]> (_t10FB, refPos0DA0);
  real _t10FD = prim -0026<$[]> (_t10F7, _t10FC);
  real _t10FE = 0.e0;
  real _t10FF = 0.e0;
  real _t1100 = -0.1e1;
  vec3 _t1101 = [_t10FE, _t10FF, _t1100];
  real _t1102 = prim •00CE<$[3]; $[3]; $[]> (_t1101, dPos0DA1);
  real _t1103 = prim /0055 (_t10FD, _t1102);
  real _t1104 = -0.1e-7;
  bool _t1105 = prim >=007E (_t1103, _t1104);
  real _t1106 = 0.e0;
  real _t1107 = 0.e0;
  real _t1108 = 0.e0;
  real _t1109 = -0.1e1;
  vec3 _t110A = [_t1107, _t1108, _t1109];
  real _t110B = prim •00CE<$[3]; $[3]; $[]> (_t110A, refPos0DA0);
  real _t110C = prim -0026<$[]> (_t1106, _t110B);
  real _t110D = 0.e0;
  real _t110E = 0.e0;
  real _t110F = -0.1e1;
  vec3 _t1110 = [_t110D, _t110E, _t110F];
  real _t1111 = prim •00CE<$[3]; $[3]; $[]> (_t1110, dPos0DA1);
  real _t1112 = prim /0055 (_t110C, _t1111);
  bool _t1113 = prim >0080 (time1031, _t1112);
  real _t1114 = 0.e0;
  real _t1115 = 0.e0;
  real _t1116 = -0.1e1;
  vec3 _t1117 = [_t1114, _t1115, _t1116];
  real _t1118 = prim •00CE<$[3]; $[3]; $[]> (_t1117, dPos0DA1);
  real _t1119 = prim |()|00B5<$[]> (_t1118);
  real _t111A = 0.1e-7;
  bool _t111B = prim >=007E (_t1119, _t111A);
  bool _t111C = prim $and01C4 (_t1113, _t111B);
  bool _t111D = prim $and01C4 (_t1105, _t111C);
  if _t111D {
    int _t111E = 3;
    bool _t111F = prim !=0086 (i1030, _t111E);
    if _t111F {
      real _t1120 = 0.e0;
      real _t1121 = 0.e0;
      real _t1122 = 0.e0;
      real _t1123 = -0.1e1;
      vec3 _t1124 = [_t1121, _t1122, _t1123];
      real _t1125 = prim •00CE<$[3]; $[3]; $[]> (_t1124, refPos0DA0);
      real _t1126 = prim -0026<$[]> (_t1120, _t1125);
      real _t1127 = 0.e0;
      real _t1128 = 0.e0;
      real _t1129 = -0.1e1;
      vec3 _t112A = [_t1127, _t1128, _t1129];
      real _t112B = prim •00CE<$[3]; $[3]; $[]> (_t112A, dPos0DA1);
      time1031 = prim /0055 (_t1126, _t112B);
      face1032 = 3;
    } else {
      real _t112C = 0.e0;
      real _t112D = 0.e0;
      real _t112E = 0.e0;
      real _t112F = -0.1e1;
      vec3 _t1130 = [_t112D, _t112E, _t112F];
      real _t1131 = prim •00CE<$[3]; $[3]; $[]> (_t1130, refPos0DA0);
      real _t1132 = prim -0026<$[]> (_t112C, _t1131);
      real _t1133 = 0.e0;
      real _t1134 = 0.e0;
      real _t1135 = -0.1e1;
      vec3 _t1136 = [_t1133, _t1134, _t1135];
      real _t1137 = prim •00CE<$[3]; $[3]; $[]> (_t1136, dPos0DA1);
      faceTime1033 = prim /0055 (_t1132, _t1137);
    }
  }
  int _t1138 = -1;
  bool _t1139 = prim !=0086 (face1032, _t1138);
  real _t113A = 0.1e1;
  real _t113B = 0.1e-7;
  real _t113C = prim +0017<$[]> (_t113A, _t113B);
  real _t113D = 0.1e1;
  real _t113E = 0.1e1;
  real _t113F = 0.1e1;
  vec3 _t1140 = [_t113D, _t113E, _t113F];
  real _t1141 = 0.e0;
  real _t1142 = prim max0125 (time1031, _t1141);
  vec3 _t1143 = prim *0038<$[3]> (dPos0DA1, _t1142);
  vec3 _t1144 = prim +0017<$[3]> (refPos0DA0, _t1143);
  real _t1145 = prim •00CE<$[3]; $[3]; $[]> (_t1140, _t1144);
  bool _t1146 = prim >0080 (_t113C, _t1145);
  real _t1147 = 0.1e-7;
  real _t1148 = 0.1e-7;
  real _t1149 = 0.1e-7;
  vec3 _t114A = [_t1147, _t1148, _t1149];
  real _t114B = 0.e0;
  real _t114C = prim max0125 (time1031, _t114B);
  vec3 _t114D = prim *0038<$[3]> (dPos0DA1, _t114C);
  vec3 _t114E = prim +0017<$[3]> (refPos0DA0, _t114D);
  vec3 _t114F = prim +0017<$[3]> (_t114A, _t114E);
  real _t1150 = _t114F[0];
  real _t1151 = -0.e0;
  bool _t1152 = prim >0080 (_t1150, _t1151);
  real _t1153 = 0.1e-7;
  real _t1154 = 0.1e-7;
  real _t1155 = 0.1e-7;
  vec3 _t1156 = [_t1153, _t1154, _t1155];
  real _t1157 = 0.e0;
  real _t1158 = prim max0125 (time1031, _t1157);
  vec3 _t1159 = prim *0038<$[3]> (dPos0DA1, _t1158);
  vec3 _t115A = prim +0017<$[3]> (refPos0DA0, _t1159);
  vec3 _t115B = prim +0017<$[3]> (_t1156, _t115A);
  real _t115C = _t115B[1];
  real _t115D = -0.e0;
  bool _t115E = prim >0080 (_t115C, _t115D);
  real _t115F = 0.1e-7;
  real _t1160 = 0.1e-7;
  real _t1161 = 0.1e-7;
  vec3 _t1162 = [_t115F, _t1160, _t1161];
  real _t1163 = 0.e0;
  real _t1164 = prim max0125 (time1031, _t1163);
  vec3 _t1165 = prim *0038<$[3]> (dPos0DA1, _t1164);
  vec3 _t1166 = prim +0017<$[3]> (refPos0DA0, _t1165);
  vec3 _t1167 = prim +0017<$[3]> (_t1162, _t1166);
  real _t1168 = _t1167[2];
  real _t1169 = -0.e0;
  bool _t116A = prim >0080 (_t1168, _t1169);
  bool _t116B = prim $and01C4 (_t115E, _t116A);
  bool _t116C = prim $and01C4 (_t1152, _t116B);
  bool _t116D = prim $and01C4 (_t1146, _t116C);
  bool _t116E = prim $and01C4 (_t1139, _t116D);
  if _t116E {
    real _t116F = 0.e0;
    real _t1170 = prim max0125 (time1031, _t116F);
    real _t1171 = (real)face1032;
    vec2 _t1172 = [_t1170, _t1171];
    return _t1172;
  } else {
    real _t1173 = -inf;
    bool _t1174 = prim ==0084 (_t1173, faceTime1033);
    if _t1174 {
      real _t1175 = -0.1e1;
      real _t1176 = -0.1e1;
      vec2 _t1177 = [_t1175, _t1176];
      return _t1177;
    } else {
      real _t1178 = 0.e0;
      real _t1179 = prim max0125 (faceTime1033, _t1178);
      real _t117A = (real)i1030;
      vec2 _t117B = [_t1179, _t117A];
      return _t117B;
    }
  }
}
function Femdata: Mesh#0 domain117E (Femdata: Space arg0117F)
{
  Femdata: Mesh _t1180 = extractFem(arg0117F, Mesh);
  return _t1180;
}
function Femdata: Space#0 space1181 (Femdata: FemFunc arg01182)
{
  Femdata: Space _t1183 = extractFem(arg01182, Space);
  return _t1183;
}
function Femdata: FuncCell#0 funcCell1184 (Femdata: FemFunc arg01185, Femdata: MeshCell arg11186)
{
  int _t1187 = extractFemItem(CellIndex(MeshCell), int, arg11186);
  Femdata: FuncCell _t1188 = loadFem(FuncCell, arg01185, _t1187);
  return _t1188;
}
function bool#1 insideTest1196 (vec3 x1197)
{
  real _t1198 = 0.e0;
  real _t1199 = 0.e0;
  real _t119A = 0.e0;
  vec3 _t119B = [_t1198, _t1199, _t119A];
  vec3 mid119C = prim -0026<$[3]> (x1197, _t119B);
  bool _t119D;
  real _t119E = mid119C[0];
  real _t119F = prim |()|00B5<$[]> (_t119E);
  real _t11A0 = 0.4e1;
  bool _t11A1 = prim <=007C (_t119F, _t11A0);
  if _t11A1 {
    bool _t11A2;
    real _t11A3 = mid119C[1];
    real _t11A4 = prim |()|00B5<$[]> (_t11A3);
    real _t11A5 = 0.4e1;
    bool _t11A6 = prim <=007C (_t11A4, _t11A5);
    if _t11A6 {
      real _t11A7 = mid119C[2];
      real _t11A8 = prim |()|00B5<$[]> (_t11A7);
      real _t11A9 = 0.4e1;
      _t11A2 = prim <=007C (_t11A8, _t11A9);
    } else {
      _t11A2 = false;
    }
    _t119D = _t11A2;
  } else {
    _t119D = false;
  }
  return _t119D;
}
function vec3#3 fStep11AA (vec3 s11AB)
{
  real x11AC = s11AB[0];
  real y11AD = s11AB[1];
  real z11AE = s11AB[2];
  real _t11AF = 0.2e1;
  real _t11B0 = 0.2e1;
  real _t11B1 = 0.3e1;
  int _t11B2 = 2;
  real _t11B3 = prim ^0068 (x11AC, _t11B2);
  real _t11B4 = prim *0034 (_t11B1, _t11B3);
  real _t11B5 = prim -0026<$[]> (_t11B0, _t11B4);
  int _t11B6 = 2;
  real _t11B7 = prim ^0068 (_t11B5, _t11B6);
  real _t11B8 = prim *0034 (_t11AF, _t11B7);
  real _t11B9 = 0.12e2;
  real _t11BA = prim *0034 (_t11B9, x11AC);
  int _t11BB = 3;
  real _t11BC = prim ^0068 (x11AC, _t11BB);
  real _t11BD = prim unary -008B<$[]> (_t11BC);
  real _t11BE = 0.2e1;
  real _t11BF = prim *0034 (_t11BE, x11AC);
  real _t11C0 = prim +0017<$[]> (_t11BD, _t11BF);
  real _t11C1 = prim +0017<$[]> (_t11C0, y11AD);
  real _t11C2 = prim *0034 (_t11BA, _t11C1);
  real _t11C3 = prim -0026<$[]> (_t11B8, _t11C2);
  real _t11C4 = 0.2e1;
  real _t11C5 = 0.2e1;
  real _t11C6 = 0.3e1;
  int _t11C7 = 2;
  real _t11C8 = prim ^0068 (x11AC, _t11C7);
  real _t11C9 = prim *0034 (_t11C6, _t11C8);
  real _t11CA = prim -0026<$[]> (_t11C5, _t11C9);
  real _t11CB = prim *0034 (_t11C4, _t11CA);
  real _t11CC = 0.e0;
  vec3 _t11CD = [_t11C3, _t11CB, _t11CC];
  real _t11CE = 0.2e1;
  real _t11CF = 0.2e1;
  real _t11D0 = 0.3e1;
  int _t11D1 = 2;
  real _t11D2 = prim ^0068 (x11AC, _t11D1);
  real _t11D3 = prim *0034 (_t11D0, _t11D2);
  real _t11D4 = prim -0026<$[]> (_t11CF, _t11D3);
  real _t11D5 = prim *0034 (_t11CE, _t11D4);
  real _t11D6 = 0.2e1;
  real _t11D7 = 0.e0;
  vec3 _t11D8 = [_t11D5, _t11D6, _t11D7];
  real _t11D9 = 0.e0;
  real _t11DA = 0.e0;
  real _t11DB = 0.2e1;
  real _t11DC = prim *0034 (_t11DB, zfuz085C);
  vec3 _t11DD = [_t11D9, _t11DA, _t11DC];
  tensor[3,3] H11DE = [_t11CD, _t11D8, _t11DD];
  real _t11DF = 0.2e1;
  real _t11E0 = 0.2e1;
  real _t11E1 = 0.3e1;
  int _t11E2 = 2;
  real _t11E3 = prim ^0068 (x11AC, _t11E2);
  real _t11E4 = prim *0034 (_t11E1, _t11E3);
  real _t11E5 = prim -0026<$[]> (_t11E0, _t11E4);
  real _t11E6 = prim *0034 (_t11DF, _t11E5);
  int _t11E7 = 3;
  real _t11E8 = prim ^0068 (x11AC, _t11E7);
  real _t11E9 = prim unary -008B<$[]> (_t11E8);
  real _t11EA = 0.2e1;
  real _t11EB = prim *0034 (_t11EA, x11AC);
  real _t11EC = prim +0017<$[]> (_t11E9, _t11EB);
  real _t11ED = prim +0017<$[]> (_t11EC, y11AD);
  real _t11EE = prim *0034 (_t11E6, _t11ED);
  real _t11EF = 0.2e1;
  int _t11F0 = 3;
  real _t11F1 = prim ^0068 (x11AC, _t11F0);
  real _t11F2 = prim unary -008B<$[]> (_t11F1);
  real _t11F3 = 0.2e1;
  real _t11F4 = prim *0034 (_t11F3, x11AC);
  real _t11F5 = prim +0017<$[]> (_t11F2, _t11F4);
  real _t11F6 = prim +0017<$[]> (_t11F5, y11AD);
  real _t11F7 = prim *0034 (_t11EF, _t11F6);
  real _t11F8 = 0.2e1;
  real _t11F9 = prim *0034 (_t11F8, zfuz085C);
  real _t11FA = prim *0034 (_t11F9, z11AE);
  vec3 g11FB = [_t11EE, _t11F7, _t11FA];
  vec3[3] E11FC = prim evecs00A0 (H11DE);
  real[3] L11FD = prim evals009F (H11DE);
  real _t11FE = 0.1e1;
  int _t11FF = 0;
  real _t1200 = prim $sub01C0<real; %3> (L11FD, _t11FF);
  real _t1201 = prim /0055 (_t11FE, _t1200);
  real _t1202 = prim unary -008B<$[]> (_t1201);
  int _t1203 = 0;
  vec3 _t1204 = prim $sub01C0<vec3; %3> (E11FC, _t1203);
  vec3 _t1205 = prim *0036<$[3]> (_t1202, _t1204);
  int _t1206 = 0;
  vec3 _t1207 = prim $sub01C0<vec3; %3> (E11FC, _t1206);
  tensor[3,3] _t1208 = prim ⊗00E5<$[3]; $[3]; $[3,3]> (_t1205, _t1207);
  vec3 up1209 = prim •00CE<$[3,3]; $[3]; $[3]> (_t1208, g11FB);
  bool _t120A;
  real _t120B = up1209[0];
  real _t120C = up1209[0];
  bool _t120D = prim ==0084 (_t120B, _t120C);
  bool _t120E = prim !00BC (_t120D);
  if _t120E {
    _t120A = true;
  } else {
    bool _t120F;
    real _t1210 = up1209[1];
    real _t1211 = up1209[1];
    bool _t1212 = prim ==0084 (_t1210, _t1211);
    bool _t1213 = prim !00BC (_t1212);
    if _t1213 {
      _t120F = true;
    } else {
      real _t1214 = up1209[2];
      real _t1215 = up1209[2];
      bool _t1216 = prim ==0084 (_t1214, _t1215);
      _t120F = prim !00BC (_t1216);
    }
    _t120A = _t120F;
  }
  if _t120A {
    real _t1217 = +inf;
    real _t1218 = +inf;
    real _t1219 = +inf;
    vec3 _t121A = [_t1217, _t1218, _t1219];
    return _t121A;
  }
  return up1209;
}
function bool#4 posNanCheck121B (vec3 up121C)
{
  bool _t121D;
  real _t121E = up121C[0];
  real _t121F = up121C[0];
  bool _t1220 = prim ==0084 (_t121E, _t121F);
  bool _t1221 = prim !00BC (_t1220);
  if _t1221 {
    _t121D = true;
  } else {
    bool _t1222;
    real _t1223 = up121C[1];
    real _t1224 = up121C[1];
    bool _t1225 = prim ==0084 (_t1223, _t1224);
    bool _t1226 = prim !00BC (_t1225);
    if _t1226 {
      _t1222 = true;
    } else {
      real _t1227 = up121C[2];
      real _t1228 = up121C[2];
      bool _t1229 = prim ==0084 (_t1227, _t1228);
      _t1222 = prim !00BC (_t1229);
    }
    _t121D = _t1222;
  }
  return _t121D;
}
function tensor[3,3]#1 fPerp122A (vec3 s122B)
{
  real x122C = s122B[0];
  real y122D = s122B[1];
  real z122E = s122B[2];
  real _t122F = 0.2e1;
  real _t1230 = 0.2e1;
  real _t1231 = 0.3e1;
  int _t1232 = 2;
  real _t1233 = prim ^0068 (x122C, _t1232);
  real _t1234 = prim *0034 (_t1231, _t1233);
  real _t1235 = prim -0026<$[]> (_t1230, _t1234);
  int _t1236 = 2;
  real _t1237 = prim ^0068 (_t1235, _t1236);
  real _t1238 = prim *0034 (_t122F, _t1237);
  real _t1239 = 0.12e2;
  real _t123A = prim *0034 (_t1239, x122C);
  int _t123B = 3;
  real _t123C = prim ^0068 (x122C, _t123B);
  real _t123D = prim unary -008B<$[]> (_t123C);
  real _t123E = 0.2e1;
  real _t123F = prim *0034 (_t123E, x122C);
  real _t1240 = prim +0017<$[]> (_t123D, _t123F);
  real _t1241 = prim +0017<$[]> (_t1240, y122D);
  real _t1242 = prim *0034 (_t123A, _t1241);
  real _t1243 = prim -0026<$[]> (_t1238, _t1242);
  real _t1244 = 0.2e1;
  real _t1245 = 0.2e1;
  real _t1246 = 0.3e1;
  int _t1247 = 2;
  real _t1248 = prim ^0068 (x122C, _t1247);
  real _t1249 = prim *0034 (_t1246, _t1248);
  real _t124A = prim -0026<$[]> (_t1245, _t1249);
  real _t124B = prim *0034 (_t1244, _t124A);
  real _t124C = 0.e0;
  vec3 _t124D = [_t1243, _t124B, _t124C];
  real _t124E = 0.2e1;
  real _t124F = 0.2e1;
  real _t1250 = 0.3e1;
  int _t1251 = 2;
  real _t1252 = prim ^0068 (x122C, _t1251);
  real _t1253 = prim *0034 (_t1250, _t1252);
  real _t1254 = prim -0026<$[]> (_t124F, _t1253);
  real _t1255 = prim *0034 (_t124E, _t1254);
  real _t1256 = 0.2e1;
  real _t1257 = 0.e0;
  vec3 _t1258 = [_t1255, _t1256, _t1257];
  real _t1259 = 0.e0;
  real _t125A = 0.e0;
  real _t125B = 0.2e1;
  real _t125C = prim *0034 (_t125B, zfuz085C);
  vec3 _t125D = [_t1259, _t125A, _t125C];
  tensor[3,3] H125E = [_t124D, _t1258, _t125D];
  vec3[3] _t125F = prim evecs00A0 (H125E);
  int _t1260 = 0;
  vec3 E21261 = prim $sub01C0<vec3; %3> (_t125F, _t1260);
  tensor[3,3] _t1262 = prim $id01B9<%3> ();
  tensor[3,3] _t1263 = prim ⊗00E5<$[3]; $[3]; $[3,3]> (E21261, E21261);
  tensor[3,3] m1264 = prim -0026<$[3,3]> (_t1262, _t1263);
  real t1265 = prim :00FC<$[3,3]; $[3,3]; $[]> (m1264, m1264);
  bool _t1266 = prim ==0084 (t1265, t1265);
  bool _t1267 = prim !00BC (_t1266);
  if _t1267 {
    tensor[3,3] _t1268 = prim $zero01BB<$[3,3]> ();
    return _t1268;
  }
  return m1264;
}
function real#1 fStrength1269 (vec3 s126A)
{
  real x126B = s126A[0];
  real y126C = s126A[1];
  real z126D = s126A[2];
  real _t126E = 0.2e1;
  real _t126F = 0.2e1;
  real _t1270 = 0.3e1;
  int _t1271 = 2;
  real _t1272 = prim ^0068 (x126B, _t1271);
  real _t1273 = prim *0034 (_t1270, _t1272);
  real _t1274 = prim -0026<$[]> (_t126F, _t1273);
  int _t1275 = 2;
  real _t1276 = prim ^0068 (_t1274, _t1275);
  real _t1277 = prim *0034 (_t126E, _t1276);
  real _t1278 = 0.12e2;
  real _t1279 = prim *0034 (_t1278, x126B);
  int _t127A = 3;
  real _t127B = prim ^0068 (x126B, _t127A);
  real _t127C = prim unary -008B<$[]> (_t127B);
  real _t127D = 0.2e1;
  real _t127E = prim *0034 (_t127D, x126B);
  real _t127F = prim +0017<$[]> (_t127C, _t127E);
  real _t1280 = prim +0017<$[]> (_t127F, y126C);
  real _t1281 = prim *0034 (_t1279, _t1280);
  real _t1282 = prim -0026<$[]> (_t1277, _t1281);
  real _t1283 = 0.2e1;
  real _t1284 = 0.2e1;
  real _t1285 = 0.3e1;
  int _t1286 = 2;
  real _t1287 = prim ^0068 (x126B, _t1286);
  real _t1288 = prim *0034 (_t1285, _t1287);
  real _t1289 = prim -0026<$[]> (_t1284, _t1288);
  real _t128A = prim *0034 (_t1283, _t1289);
  real _t128B = 0.e0;
  vec3 _t128C = [_t1282, _t128A, _t128B];
  real _t128D = 0.2e1;
  real _t128E = 0.2e1;
  real _t128F = 0.3e1;
  int _t1290 = 2;
  real _t1291 = prim ^0068 (x126B, _t1290);
  real _t1292 = prim *0034 (_t128F, _t1291);
  real _t1293 = prim -0026<$[]> (_t128E, _t1292);
  real _t1294 = prim *0034 (_t128D, _t1293);
  real _t1295 = 0.2e1;
  real _t1296 = 0.e0;
  vec3 _t1297 = [_t1294, _t1295, _t1296];
  real _t1298 = 0.e0;
  real _t1299 = 0.e0;
  real _t129A = 0.2e1;
  real _t129B = prim *0034 (_t129A, zfuz085C);
  vec3 _t129C = [_t1298, _t1299, _t129B];
  tensor[3,3] H129D = [_t128C, _t1297, _t129C];
  real _t129E = 0.2e1;
  real _t129F = 0.2e1;
  real _t12A0 = 0.3e1;
  int _t12A1 = 2;
  real _t12A2 = prim ^0068 (x126B, _t12A1);
  real _t12A3 = prim *0034 (_t12A0, _t12A2);
  real _t12A4 = prim -0026<$[]> (_t129F, _t12A3);
  real _t12A5 = prim *0034 (_t129E, _t12A4);
  int _t12A6 = 3;
  real _t12A7 = prim ^0068 (x126B, _t12A6);
  real _t12A8 = prim unary -008B<$[]> (_t12A7);
  real _t12A9 = 0.2e1;
  real _t12AA = prim *0034 (_t12A9, x126B);
  real _t12AB = prim +0017<$[]> (_t12A8, _t12AA);
  real _t12AC = prim +0017<$[]> (_t12AB, y126C);
  real _t12AD = prim *0034 (_t12A5, _t12AC);
  real _t12AE = 0.2e1;
  int _t12AF = 3;
  real _t12B0 = prim ^0068 (x126B, _t12AF);
  real _t12B1 = prim unary -008B<$[]> (_t12B0);
  real _t12B2 = 0.2e1;
  real _t12B3 = prim *0034 (_t12B2, x126B);
  real _t12B4 = prim +0017<$[]> (_t12B1, _t12B3);
  real _t12B5 = prim +0017<$[]> (_t12B4, y126C);
  real _t12B6 = prim *0034 (_t12AE, _t12B5);
  real _t12B7 = 0.2e1;
  real _t12B8 = prim *0034 (_t12B7, zfuz085C);
  real _t12B9 = prim *0034 (_t12B8, z126D);
  vec3 g12BA = [_t12AD, _t12B6, _t12B9];
  real[3] _t12BB = prim evals009F (H129D);
  int _t12BC = 0;
  real _t12BD = prim $sub01C0<real; %3> (_t12BB, _t12BC);
  real _t12BE = prim |()|00B5<$[3]> (g12BA);
  real _t12BF = prim +0017<$[]> (fBias085A, _t12BE);
  real _t12C0 = prim /0055 (_t12BD, _t12BF);
  return _t12C0;
}
function real#1 phi12C1 (real r12C2)
{
  real _t12C3 = 0.1e1;
  real _t12C4 = prim -0026<$[]> (_t12C3, r12C2);
  int _t12C5 = 4;
  real _t12C6 = prim ^0068 (_t12C4, _t12C5);
  return _t12C6;
}
function real#1 phi'12C7 (real r12C8)
{
  int _t12C9 = -4;
  real _t12CA = (real)_t12C9;
  real _t12CB = 0.1e1;
  real _t12CC = prim -0026<$[]> (_t12CB, r12C8);
  int _t12CD = 3;
  real _t12CE = prim ^0068 (_t12CC, _t12CD);
  real _t12CF = prim *0034 (_t12CA, _t12CE);
  return _t12CF;
}
function real#2 enr12D0 (vec3 x12D1)
{
  real _t12D2 = prim |()|00B5<$[3]> (x12D1);
  real _t12D3 = prim /0055 (_t12D2, rad0857);
  real _t12D4 = func phi12C1 (_t12D3);
  return _t12D4;
}
function vec3#1 frc12D5 (vec3 x12D6)
{
  real _t12D7 = prim |()|00B5<$[3]> (x12D6);
  real _t12D8 = prim /0055 (_t12D7, rad0857);
  real _t12D9 = func phi'12C7 (_t12D8);
  real _t12DA = 0.1e1;
  real _t12DB = prim /0055 (_t12DA, rad0857);
  real _t12DC = prim *0034 (_t12D9, _t12DB);
  vec3 _t12DD = prim *0036<$[3]> (_t12DC, x12D6);
  real _t12DE = prim |()|00B5<$[3]> (x12D6);
  vec3 _t12DF = prim /0057<$[3]> (_t12DD, _t12DE);
  return _t12DF;
}
function bool#3 posTest12E0 (vec3 pos12E1)
{
  bool _t12E2;
  bool _t12E3 = func insideTest1196 (pos12E1);
  if _t12E3 {
    bool _t12E4;
    bool _t12E5 = func posNanCheck121B (pos12E1);
    bool _t12E6 = prim !00BC (_t12E5);
    if _t12E6 {
      real _t12E7 = func fStrength1269 (pos12E1);
      _t12E4 = prim >=007E (_t12E7, fStren085B);
    } else {
      _t12E4 = false;
    }
    _t12E2 = _t12E4;
  } else {
    _t12E2 = false;
  }
  return _t12E2;
}
globalInit {
  int _t084B = 0;
  int _t0849 = 1;
  int _t084D = extractFemItem(NumCell(Mesh), int, meshData0847);
  int _t084C = prim -0024 (_t084D, _t0849);
  int[] _t0850 = prim $range01C3 (_t084B, _t084C);
  Femdata: MeshCell[] _t0851 = {};
  foreach _t084F in _t0850 {
    Femdata: MeshCell _t0852 = loadFem(MeshCell, meshData0847, _t084F);
    _t0851 = prim @0010<Femdata: MeshCell> (_t0851, _t0852);
  }
  simplex1195 = func refcell08B4 (meshData0847);
}
strand particle (vec3 pos012E8, real hh012E9) in 3D {
  output vec3 pos12EA;
  output vec3 _pos12EB;
  real hh12EC;
  vec3 step12ED;
  bool found12EE;
  int nfs12EF;
  int test12F0;
  int testp12F1;
  int steps12F2;
  {
    pos12EA = pos012E8;
    _pos12EB = pos12EA;
    hh12EC = hh012E9;
    step12ED = prim $zero01BB<$[3]> ();
    found12EE = false;
    nfs12EF = 0;
    test12F0 = 1;
    testp12F1 = 0;
    steps12F2 = 0;
  }
  update
  {
    int _t12F3 = 1;
    steps12F2 = prim +0015 (steps12F2, _t12F3);
    bool _t12F4 = func posTest12E0 (pos12EA);
    bool _t12F5 = prim !00BC (_t12F4);
    if _t12F5 {
      die;
    }
    bool _t12F6 = prim !00BC (found12EE);
    if _t12F6 {
      step12ED = func fStep11AA (pos12EA);
      pos12EA = prim +0017<$[3]> (pos12EA, step12ED);
      _pos12EB = pos12EA;
      bool _t12F7 = func posNanCheck121B (pos12EA);
      if _t12F7 {
        die;
      }
      real _t12F8 = prim |()|00B5<$[3]> (step12ED);
      real _t12F9 = prim /0055 (_t12F8, rad0857);
      bool _t12FA = prim >0080 (_t12F9, eps0858);
      if _t12FA {
        int _t12FB = 1;
        nfs12EF = prim +0015 (nfs12EF, _t12FB);
        int _t12FC = 10;
        bool _t12FD = prim >007F (nfs12EF, _t12FC);
        if _t12FD {
          die;
        }
      } else {
        found12EE = true;
        testp12F1 = 1;
      }
    } else {
      vec3 _t12FE = func fStep11AA (pos12EA);
      pos12EA = prim +0017<$[3]> (pos12EA, _t12FE);
      _pos12EB = pos12EA;
      bool _t12FF = func posNanCheck121B (pos12EA);
      if _t12FF {
        die;
      }
      step12ED = prim $zero01BB<$[3]> ();
      real oldE1300 = 0.e0;
      vec3 force1301 = prim $zero01BB<$[3]> ();
      int nn1302 = 0;
      particle[] _t1303 = prim sphere0198<particle> (_pos12EB, rad0857);
      foreach P1304 in _t1303 {
        vec3 _t1305 = P1304.pos12EA;
        vec3 _t1306 = prim -0026<$[3]> (_t1305, pos12EA);
        real _t1307 = func enr12D0 (_t1306);
        oldE1300 = prim +0017<$[]> (oldE1300, _t1307);
        vec3 _t1308 = P1304.pos12EA;
        vec3 _t1309 = prim -0026<$[3]> (_t1308, pos12EA);
        vec3 _t130A = func frc12D5 (_t1309);
        force1301 = prim +0017<$[3]> (force1301, _t130A);
        int _t130B = 1;
        nn1302 = prim +0015 (nn1302, _t130B);
      }
      int _t130C = 0;
      bool _t130D = prim ==0082 (_t130C, nn1302);
      if _t130D {
        real _t130E = 0.5e0;
        real _t130F = prim *0034 (_t130E, rad0857);
        real _t1310 = 0.e0;
        real _t1311 = 0.e0;
        vec3 _t1312 = [_t130F, _t1310, _t1311];
        vec3 npos1313 = prim +0017<$[3]> (pos12EA, _t1312);
        bool _t1314 = func posTest12E0 (npos1313);
        if _t1314 {
          new particle (npos1313, hh12EC);
        }
        continue;
      }
      tensor[3,3] _t1315 = func fPerp122A (pos12EA);
      force1301 = prim •00CE<$[3,3]; $[3]; $[3]> (_t1315, force1301);
      vec3 es1316 = prim *0036<$[3]> (hh12EC, force1301);
      real _t1317 = prim |()|00B5<$[3]> (es1316);
      bool _t1318 = prim >0080 (_t1317, rad0857);
      if _t1318 {
        real _t1319 = prim |()|00B5<$[3]> (es1316);
        real _t131A = prim /0055 (rad0857, _t1319);
        hh12EC = prim *0034 (hh12EC, _t131A);
        real _t131B = prim |()|00B5<$[3]> (es1316);
        real _t131C = prim /0055 (rad0857, _t131B);
        es1316 = prim *0038<$[3]> (es1316, _t131C);
      }
      vec3 samplePos131D = prim +0017<$[3]> (pos12EA, es1316);
      vec3 fs131E = func fStep11AA (samplePos131D);
      real _t131F = prim |()|00B5<$[3]> (fs131E);
      real _t1320 = prim |()|00B5<$[3]> (es1316);
      real _t1321 = prim /0055 (_t131F, _t1320);
      real _t1322 = 0.5e0;
      bool _t1323 = prim >0080 (_t1321, _t1322);
      if _t1323 {
        real _t1324 = 0.5e0;
        hh12EC = prim *0034 (hh12EC, _t1324);
        continue;
      }
      vec3 oldPos1325 = pos12EA;
      vec3 up1326 = prim +0017<$[3]> (fs131E, es1316);
      pos12EA = prim +0017<$[3]> (pos12EA, up1326);
      _pos12EB = pos12EA;
      particle[] _t1327 = prim sphere0198<particle> (_pos12EB, rad0857);
      real accum132C = 0.e0;
      foreach P1328 in _t1327 {
        vec3 _t1329 = P1328.pos12EA;
        vec3 _t132A = prim -0026<$[3]> (pos12EA, _t1329);
        real _t132B = func enr12D0 (_t132A);
        accum132C = prim +0017<$[]> (accum132C, _t132B);
      }
      real newE132D = accum132C;
      real _t132E = prim -0026<$[]> (newE132D, oldE1300);
      real _t132F = 0.5e0;
      vec3 _t1330 = prim -0026<$[3]> (pos12EA, oldPos1325);
      vec3 _t1331 = prim *0036<$[3]> (_t132F, _t1330);
      vec3 _t1332 = prim unary -008B<$[3]> (force1301);
      real _t1333 = prim •00CE<$[3]; $[3]; $[]> (_t1331, _t1332);
      bool _t1334 = prim >0080 (_t132E, _t1333);
      if _t1334 {
        pos12EA = oldPos1325;
        _pos12EB = pos12EA;
        real _t1335 = 0.5e0;
        hh12EC = prim *0034 (hh12EC, _t1335);
        continue;
      }
      real _t1336 = 0.11e1;
      hh12EC = prim *0034 (hh12EC, _t1336);
      step12ED = up1326;
      bool _t1337 = func posNanCheck121B (pos12EA);
      if _t1337 {
        die;
      }
      int _t1338 = 5;
      bool _t1339 = prim <0079 (nn1302, _t1338);
      if _t1339 {
        real _t133A = 0.5e0;
        real _t133B = prim *0034 (_t133A, rad0857);
        vec3 _t133C = prim normalize0137<$[3]> (es1316);
        vec3 _t133D = prim *0036<$[3]> (_t133B, _t133C);
        vec3 npos133E = prim +0017<$[3]> (pos12EA, _t133D);
        bool _t133F = func posTest12E0 (npos133E);
        if _t133F {
          new particle (npos133E, hh12EC);
        }
      }
    }
  }
}
collection {
  foreach x1340 in ipos085D {
    real _t1341 = 0.1e1;
    new particle (x1340, _t1341);
  }
}
update {
  int res1342= sum<int> { (P1345) => {
      int _t1346 = P1345.test12F0;
      return _t1346;
    } (P1343, P1343)
  | P1343 in all };
  int num1348 = res1342;
  int res1349= max<int> { (P134C) => {
      int _t134D = P134C.steps12F2;
      return _t134D;
    } (P134A, P134A)
  | P134A in all };
  int steps134F = res1349;
  int res1350= sum<int> { (P1353) => {
      int _t1354 = P1353.testp12F1;
      return _t1354;
    } (P1351, P1351)
  | P1351 in all };
  int numFound1356 = res1350;
  bool res1357= all { (P135A) => {
      bool _t135B = P135A.found12EE;
      return _t135B;
    } (P1358, P1358)
  | P1358 in all };
  bool allFound135D = res1357;
  real res135E= max<real> { (P1362) => {
      vec3 _t1363 = P1362.step12ED;
      real _t1364 = prim |()|00B5<$[3]> (_t1363);
      return _t1364;
    } (P135F, P135F)
  | P135F in all };
  real maxStep1366 = res135E;
  string _t1367 = "One run:";
  string _t1368 = " and ";
  real _t1369 = prim /0055 (maxStep1366, rad0857);
  string _t136A = " and ";
  real _t136B = prim /0055 (maxStep1366, rad0857);
  bool _t136C = prim <007A (_t136B, eps0858);
  string _t136D = " and ";
  string _t136E = " of ";
  string _t136F = "\n";
  print (_t1367, allFound135D, _t1368, _t1369, _t136A, _t136C, _t136D, numFound1356, _t136E, num1348, _t136F);
  if allFound135D {
    real _t1370 = prim /0055 (maxStep1366, rad0857);
    bool _t1371 = prim <007A (_t1370, eps0858);
    if _t1371 {
      string _t1372 = "CONVERGED!\n";
      print (_t1372);
      stabilize_all;
    }
  }
  int _t1373 = 5000;
  bool _t1374 = prim >007F (steps134F, _t1373);
  if _t1374 {
    stabilize_all;
  }
}
/* Program end */
/* Simplified Program (after after inlining) start */
properties: GlobalInit,StabilizeAll,GlobalReduce,StrandSets,GlobalUpdate,NewStrands,StrandCommunication,StrandsMayDie,HasInputs,HasGlobals,ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
input FemData:Mesh meshData0847;
input FemData:Space 0space0853_intermedateGlobal0854;
input FemData:FemFunc 0data0855_intermedateGlobal0856;
input real rad0857 = <default>;
input real eps0858 = <default>;
input real v00859 = <default>;
input real fBias085A = <default>;
input real fStren085B = <default>;
input real zfuz085C = <default>;
input vec3[] ipos085D;
constants {
  rad0857 = 0.1e-1;
  eps0858 = 0.1e-1;
  v00859 = 0.625e-1;
  fBias085A = 0.1e-1;
  fStren085B = 0.1e-1;
  zfuz085C = 0.1e-1;
}
function int[2]#6 nextCell40932 (int faceIdx0D91, int cell0D92, Femdata: Mesh mesh0D93)
{
  int _t0D94 = -1;
  bool _t0D95 = prim ==0082 (faceIdx0D91, _t0D94);
  if _t0D95 {
    int _t0D96 = -1;
    int _t0D97 = -1;
    int[2] _t0D98 = {_t0D96, _t0D97};
    return _t0D98;
  } else {
    int _t0D99 = 8;
    int _t0D9A = prim *0033 (cell0D92, _t0D99);
    int _t0D9B = 2;
    int _t0D9C = prim *0033 (faceIdx0D91, _t0D9B);
    int _t0D9D = prim +0015 (_t0D9A, _t0D9C);
    int[2] _t0D9E = extractFemItemN((mesh0D93, _t0D9D),CellFaceCell(Mesh),);
    return _t0D9E;
  }
}
function vec3#3 fStep11AA (vec3 s11AB)
{
  real x11AC = s11AB[0];
  real y11AD = s11AB[1];
  real z11AE = s11AB[2];
  real _t11AF = 0.2e1;
  real _t11B0 = 0.2e1;
  real _t11B1 = 0.3e1;
  int _t11B2 = 2;
  real _t11B3 = prim ^0068 (x11AC, _t11B2);
  real _t11B4 = prim *0034 (_t11B1, _t11B3);
  real _t11B5 = prim -0026<$[]> (_t11B0, _t11B4);
  int _t11B6 = 2;
  real _t11B7 = prim ^0068 (_t11B5, _t11B6);
  real _t11B8 = prim *0034 (_t11AF, _t11B7);
  real _t11B9 = 0.12e2;
  real _t11BA = prim *0034 (_t11B9, x11AC);
  int _t11BB = 3;
  real _t11BC = prim ^0068 (x11AC, _t11BB);
  real _t11BD = prim unary -008B<$[]> (_t11BC);
  real _t11BE = 0.2e1;
  real _t11BF = prim *0034 (_t11BE, x11AC);
  real _t11C0 = prim +0017<$[]> (_t11BD, _t11BF);
  real _t11C1 = prim +0017<$[]> (_t11C0, y11AD);
  real _t11C2 = prim *0034 (_t11BA, _t11C1);
  real _t11C3 = prim -0026<$[]> (_t11B8, _t11C2);
  real _t11C4 = 0.2e1;
  real _t11C5 = 0.2e1;
  real _t11C6 = 0.3e1;
  int _t11C7 = 2;
  real _t11C8 = prim ^0068 (x11AC, _t11C7);
  real _t11C9 = prim *0034 (_t11C6, _t11C8);
  real _t11CA = prim -0026<$[]> (_t11C5, _t11C9);
  real _t11CB = prim *0034 (_t11C4, _t11CA);
  real _t11CC = 0.e0;
  vec3 _t11CD = [_t11C3, _t11CB, _t11CC];
  real _t11CE = 0.2e1;
  real _t11CF = 0.2e1;
  real _t11D0 = 0.3e1;
  int _t11D1 = 2;
  real _t11D2 = prim ^0068 (x11AC, _t11D1);
  real _t11D3 = prim *0034 (_t11D0, _t11D2);
  real _t11D4 = prim -0026<$[]> (_t11CF, _t11D3);
  real _t11D5 = prim *0034 (_t11CE, _t11D4);
  real _t11D6 = 0.2e1;
  real _t11D7 = 0.e0;
  vec3 _t11D8 = [_t11D5, _t11D6, _t11D7];
  real _t11D9 = 0.e0;
  real _t11DA = 0.e0;
  real _t11DB = 0.2e1;
  real _t11DC = prim *0034 (_t11DB, zfuz085C);
  vec3 _t11DD = [_t11D9, _t11DA, _t11DC];
  tensor[3,3] H11DE = [_t11CD, _t11D8, _t11DD];
  real _t11DF = 0.2e1;
  real _t11E0 = 0.2e1;
  real _t11E1 = 0.3e1;
  int _t11E2 = 2;
  real _t11E3 = prim ^0068 (x11AC, _t11E2);
  real _t11E4 = prim *0034 (_t11E1, _t11E3);
  real _t11E5 = prim -0026<$[]> (_t11E0, _t11E4);
  real _t11E6 = prim *0034 (_t11DF, _t11E5);
  int _t11E7 = 3;
  real _t11E8 = prim ^0068 (x11AC, _t11E7);
  real _t11E9 = prim unary -008B<$[]> (_t11E8);
  real _t11EA = 0.2e1;
  real _t11EB = prim *0034 (_t11EA, x11AC);
  real _t11EC = prim +0017<$[]> (_t11E9, _t11EB);
  real _t11ED = prim +0017<$[]> (_t11EC, y11AD);
  real _t11EE = prim *0034 (_t11E6, _t11ED);
  real _t11EF = 0.2e1;
  int _t11F0 = 3;
  real _t11F1 = prim ^0068 (x11AC, _t11F0);
  real _t11F2 = prim unary -008B<$[]> (_t11F1);
  real _t11F3 = 0.2e1;
  real _t11F4 = prim *0034 (_t11F3, x11AC);
  real _t11F5 = prim +0017<$[]> (_t11F2, _t11F4);
  real _t11F6 = prim +0017<$[]> (_t11F5, y11AD);
  real _t11F7 = prim *0034 (_t11EF, _t11F6);
  real _t11F8 = 0.2e1;
  real _t11F9 = prim *0034 (_t11F8, zfuz085C);
  real _t11FA = prim *0034 (_t11F9, z11AE);
  vec3 g11FB = [_t11EE, _t11F7, _t11FA];
  vec3[3] E11FC = prim evecs00A0 (H11DE);
  real[3] L11FD = prim evals009F (H11DE);
  real _t11FE = 0.1e1;
  int _t11FF = 0;
  real _t1200 = prim $sub01C0<real; %3> (L11FD, _t11FF);
  real _t1201 = prim /0055 (_t11FE, _t1200);
  real _t1202 = prim unary -008B<$[]> (_t1201);
  int _t1203 = 0;
  vec3 _t1204 = prim $sub01C0<vec3; %3> (E11FC, _t1203);
  vec3 _t1205 = prim *0036<$[3]> (_t1202, _t1204);
  int _t1206 = 0;
  vec3 _t1207 = prim $sub01C0<vec3; %3> (E11FC, _t1206);
  tensor[3,3] _t1208 = prim ⊗00E5<$[3]; $[3]; $[3,3]> (_t1205, _t1207);
  vec3 up1209 = prim •00CE<$[3,3]; $[3]; $[3]> (_t1208, g11FB);
  bool _t120A;
  real _t120B = up1209[0];
  real _t120C = up1209[0];
  bool _t120D = prim ==0084 (_t120B, _t120C);
  bool _t120E = prim !00BC (_t120D);
  if _t120E {
    _t120A = true;
  } else {
    bool _t120F;
    real _t1210 = up1209[1];
    real _t1211 = up1209[1];
    bool _t1212 = prim ==0084 (_t1210, _t1211);
    bool _t1213 = prim !00BC (_t1212);
    if _t1213 {
      _t120F = true;
    } else {
      real _t1214 = up1209[2];
      real _t1215 = up1209[2];
      bool _t1216 = prim ==0084 (_t1214, _t1215);
      _t120F = prim !00BC (_t1216);
    }
    _t120A = _t120F;
  }
  if _t120A {
    real _t1217 = +inf;
    real _t1218 = +inf;
    real _t1219 = +inf;
    vec3 _t121A = [_t1217, _t1218, _t1219];
    return _t121A;
  }
  return up1209;
}
function tensor[3,3]#1 fPerp122A (vec3 s122B)
{
  real x122C = s122B[0];
  real y122D = s122B[1];
  real z122E = s122B[2];
  real _t122F = 0.2e1;
  real _t1230 = 0.2e1;
  real _t1231 = 0.3e1;
  int _t1232 = 2;
  real _t1233 = prim ^0068 (x122C, _t1232);
  real _t1234 = prim *0034 (_t1231, _t1233);
  real _t1235 = prim -0026<$[]> (_t1230, _t1234);
  int _t1236 = 2;
  real _t1237 = prim ^0068 (_t1235, _t1236);
  real _t1238 = prim *0034 (_t122F, _t1237);
  real _t1239 = 0.12e2;
  real _t123A = prim *0034 (_t1239, x122C);
  int _t123B = 3;
  real _t123C = prim ^0068 (x122C, _t123B);
  real _t123D = prim unary -008B<$[]> (_t123C);
  real _t123E = 0.2e1;
  real _t123F = prim *0034 (_t123E, x122C);
  real _t1240 = prim +0017<$[]> (_t123D, _t123F);
  real _t1241 = prim +0017<$[]> (_t1240, y122D);
  real _t1242 = prim *0034 (_t123A, _t1241);
  real _t1243 = prim -0026<$[]> (_t1238, _t1242);
  real _t1244 = 0.2e1;
  real _t1245 = 0.2e1;
  real _t1246 = 0.3e1;
  int _t1247 = 2;
  real _t1248 = prim ^0068 (x122C, _t1247);
  real _t1249 = prim *0034 (_t1246, _t1248);
  real _t124A = prim -0026<$[]> (_t1245, _t1249);
  real _t124B = prim *0034 (_t1244, _t124A);
  real _t124C = 0.e0;
  vec3 _t124D = [_t1243, _t124B, _t124C];
  real _t124E = 0.2e1;
  real _t124F = 0.2e1;
  real _t1250 = 0.3e1;
  int _t1251 = 2;
  real _t1252 = prim ^0068 (x122C, _t1251);
  real _t1253 = prim *0034 (_t1250, _t1252);
  real _t1254 = prim -0026<$[]> (_t124F, _t1253);
  real _t1255 = prim *0034 (_t124E, _t1254);
  real _t1256 = 0.2e1;
  real _t1257 = 0.e0;
  vec3 _t1258 = [_t1255, _t1256, _t1257];
  real _t1259 = 0.e0;
  real _t125A = 0.e0;
  real _t125B = 0.2e1;
  real _t125C = prim *0034 (_t125B, zfuz085C);
  vec3 _t125D = [_t1259, _t125A, _t125C];
  tensor[3,3] H125E = [_t124D, _t1258, _t125D];
  vec3[3] _t125F = prim evecs00A0 (H125E);
  int _t1260 = 0;
  vec3 E21261 = prim $sub01C0<vec3; %3> (_t125F, _t1260);
  tensor[3,3] _t1262 = prim $id01B9<%3> ();
  tensor[3,3] _t1263 = prim ⊗00E5<$[3]; $[3]; $[3,3]> (E21261, E21261);
  tensor[3,3] m1264 = prim -0026<$[3,3]> (_t1262, _t1263);
  real t1265 = prim :00FC<$[3,3]; $[3,3]; $[]> (m1264, m1264);
  bool _t1266 = prim ==0084 (t1265, t1265);
  bool _t1267 = prim !00BC (_t1266);
  if _t1267 {
    tensor[3,3] _t1268 = prim $zero01BB<$[3,3]> ();
    return _t1268;
  }
  return m1264;
}
globalInit {
  int _t084B = 0;
  int _t0849 = 1;
  int _t084D = extractFemItem(NumCell(Mesh), int, meshData0847);
  int _t084C = prim -0024 (_t084D, _t0849);
  int[] _t0850 = prim $range01C3 (_t084B, _t084C);
  Femdata: MeshCell[] _t0851 = {};
  foreach _t084F in _t0850 {
    Femdata: MeshCell _t0852 = loadFem(MeshCell, meshData0847, _t084F);
    _t0851 = prim @0010<Femdata: MeshCell> (_t0851, _t0852);
  }
  Femdata: RefCell simplex13F9;
  Femdata: RefCell _t13FA = extractFemItem(RefCell(Mesh), Femdata: RefCell, meshData0847);
  simplex13F9 = _t13FA;
  simplex1195 = simplex13F9;
}
strand particle (vec3 pos012E8, real hh012E9) in 3D {
  output vec3 pos12EA;
  output vec3 _pos12EB;
  real hh12EC;
  vec3 step12ED;
  bool found12EE;
  int nfs12EF;
  int test12F0;
  int testp12F1;
  int steps12F2;
  {
    pos12EA = pos012E8;
    _pos12EB = pos12EA;
    hh12EC = hh012E9;
    step12ED = prim $zero01BB<$[3]> ();
    found12EE = false;
    nfs12EF = 0;
    test12F0 = 1;
    testp12F1 = 0;
    steps12F2 = 0;
  }
  update
  {
    int _t12F3 = 1;
    steps12F2 = prim +0015 (steps12F2, _t12F3);
    bool _t12F4;
    bool _t1536;
    bool _t1537;
    real _t1538 = 0.e0;
    real _t1539 = 0.e0;
    real _t153A = 0.e0;
    vec3 _t153B = [_t1538, _t1539, _t153A];
    vec3 mid153C = prim -0026<$[3]> (pos12EA, _t153B);
    bool _t153D;
    real _t153E = mid153C[0];
    real _t153F = prim |()|00B5<$[]> (_t153E);
    real _t1540 = 0.4e1;
    bool _t1541 = prim <=007C (_t153F, _t1540);
    if _t1541 {
      bool _t1542;
      real _t1543 = mid153C[1];
      real _t1544 = prim |()|00B5<$[]> (_t1543);
      real _t1545 = 0.4e1;
      bool _t1546 = prim <=007C (_t1544, _t1545);
      if _t1546 {
        real _t1547 = mid153C[2];
        real _t1548 = prim |()|00B5<$[]> (_t1547);
        real _t1549 = 0.4e1;
        _t1542 = prim <=007C (_t1548, _t1549);
      } else {
        _t1542 = false;
      }
      _t153D = _t1542;
    } else {
      _t153D = false;
    }
    _t1537 = _t153D;
    if _t1537 {
      bool _t154A;
      bool _t154B;
      bool _t154C;
      real _t154D = pos12EA[0];
      real _t154E = pos12EA[0];
      bool _t154F = prim ==0084 (_t154D, _t154E);
      bool _t1550 = prim !00BC (_t154F);
      if _t1550 {
        _t154C = true;
      } else {
        bool _t1551;
        real _t1552 = pos12EA[1];
        real _t1553 = pos12EA[1];
        bool _t1554 = prim ==0084 (_t1552, _t1553);
        bool _t1555 = prim !00BC (_t1554);
        if _t1555 {
          _t1551 = true;
        } else {
          real _t1556 = pos12EA[2];
          real _t1557 = pos12EA[2];
          bool _t1558 = prim ==0084 (_t1556, _t1557);
          _t1551 = prim !00BC (_t1558);
        }
        _t154C = _t1551;
      }
      _t154B = _t154C;
      bool _t1559 = prim !00BC (_t154B);
      if _t1559 {
        real _t155A;
        real x155B = pos12EA[0];
        real y155C = pos12EA[1];
        real z155D = pos12EA[2];
        real _t155E = 0.2e1;
        real _t155F = 0.2e1;
        real _t1560 = 0.3e1;
        int _t1561 = 2;
        real _t1562 = prim ^0068 (x155B, _t1561);
        real _t1563 = prim *0034 (_t1560, _t1562);
        real _t1564 = prim -0026<$[]> (_t155F, _t1563);
        int _t1565 = 2;
        real _t1566 = prim ^0068 (_t1564, _t1565);
        real _t1567 = prim *0034 (_t155E, _t1566);
        real _t1568 = 0.12e2;
        real _t1569 = prim *0034 (_t1568, x155B);
        int _t156A = 3;
        real _t156B = prim ^0068 (x155B, _t156A);
        real _t156C = prim unary -008B<$[]> (_t156B);
        real _t156D = 0.2e1;
        real _t156E = prim *0034 (_t156D, x155B);
        real _t156F = prim +0017<$[]> (_t156C, _t156E);
        real _t1570 = prim +0017<$[]> (_t156F, y155C);
        real _t1571 = prim *0034 (_t1569, _t1570);
        real _t1572 = prim -0026<$[]> (_t1567, _t1571);
        real _t1573 = 0.2e1;
        real _t1574 = 0.2e1;
        real _t1575 = 0.3e1;
        int _t1576 = 2;
        real _t1577 = prim ^0068 (x155B, _t1576);
        real _t1578 = prim *0034 (_t1575, _t1577);
        real _t1579 = prim -0026<$[]> (_t1574, _t1578);
        real _t157A = prim *0034 (_t1573, _t1579);
        real _t157B = 0.e0;
        vec3 _t157C = [_t1572, _t157A, _t157B];
        real _t157D = 0.2e1;
        real _t157E = 0.2e1;
        real _t157F = 0.3e1;
        int _t1580 = 2;
        real _t1581 = prim ^0068 (x155B, _t1580);
        real _t1582 = prim *0034 (_t157F, _t1581);
        real _t1583 = prim -0026<$[]> (_t157E, _t1582);
        real _t1584 = prim *0034 (_t157D, _t1583);
        real _t1585 = 0.2e1;
        real _t1586 = 0.e0;
        vec3 _t1587 = [_t1584, _t1585, _t1586];
        real _t1588 = 0.e0;
        real _t1589 = 0.e0;
        real _t158A = 0.2e1;
        real _t158B = prim *0034 (_t158A, zfuz085C);
        vec3 _t158C = [_t1588, _t1589, _t158B];
        tensor[3,3] H158D = [_t157C, _t1587, _t158C];
        real _t158E = 0.2e1;
        real _t158F = 0.2e1;
        real _t1590 = 0.3e1;
        int _t1591 = 2;
        real _t1592 = prim ^0068 (x155B, _t1591);
        real _t1593 = prim *0034 (_t1590, _t1592);
        real _t1594 = prim -0026<$[]> (_t158F, _t1593);
        real _t1595 = prim *0034 (_t158E, _t1594);
        int _t1596 = 3;
        real _t1597 = prim ^0068 (x155B, _t1596);
        real _t1598 = prim unary -008B<$[]> (_t1597);
        real _t1599 = 0.2e1;
        real _t159A = prim *0034 (_t1599, x155B);
        real _t159B = prim +0017<$[]> (_t1598, _t159A);
        real _t159C = prim +0017<$[]> (_t159B, y155C);
        real _t159D = prim *0034 (_t1595, _t159C);
        real _t159E = 0.2e1;
        int _t159F = 3;
        real _t15A0 = prim ^0068 (x155B, _t159F);
        real _t15A1 = prim unary -008B<$[]> (_t15A0);
        real _t15A2 = 0.2e1;
        real _t15A3 = prim *0034 (_t15A2, x155B);
        real _t15A4 = prim +0017<$[]> (_t15A1, _t15A3);
        real _t15A5 = prim +0017<$[]> (_t15A4, y155C);
        real _t15A6 = prim *0034 (_t159E, _t15A5);
        real _t15A7 = 0.2e1;
        real _t15A8 = prim *0034 (_t15A7, zfuz085C);
        real _t15A9 = prim *0034 (_t15A8, z155D);
        vec3 g15AA = [_t159D, _t15A6, _t15A9];
        real[3] _t15AB = prim evals009F (H158D);
        int _t15AC = 0;
        real _t15AD = prim $sub01C0<real; %3> (_t15AB, _t15AC);
        real _t15AE = prim |()|00B5<$[3]> (g15AA);
        real _t15AF = prim +0017<$[]> (fBias085A, _t15AE);
        real _t15B0 = prim /0055 (_t15AD, _t15AF);
        _t155A = _t15B0;
        _t154A = prim >=007E (_t155A, fStren085B);
      } else {
        _t154A = false;
      }
      _t1536 = _t154A;
    } else {
      _t1536 = false;
    }
    _t12F4 = _t1536;
    bool _t12F5 = prim !00BC (_t12F4);
    if _t12F5 {
      die;
    }
    bool _t12F6 = prim !00BC (found12EE);
    if _t12F6 {
      step12ED = func fStep11AA (pos12EA);
      pos12EA = prim +0017<$[3]> (pos12EA, step12ED);
      _pos12EB = pos12EA;
      bool _t12F7;
      bool _t13FB;
      real _t13FC = pos12EA[0];
      real _t13FD = pos12EA[0];
      bool _t13FE = prim ==0084 (_t13FC, _t13FD);
      bool _t13FF = prim !00BC (_t13FE);
      if _t13FF {
        _t13FB = true;
      } else {
        bool _t1400;
        real _t1401 = pos12EA[1];
        real _t1402 = pos12EA[1];
        bool _t1403 = prim ==0084 (_t1401, _t1402);
        bool _t1404 = prim !00BC (_t1403);
        if _t1404 {
          _t1400 = true;
        } else {
          real _t1405 = pos12EA[2];
          real _t1406 = pos12EA[2];
          bool _t1407 = prim ==0084 (_t1405, _t1406);
          _t1400 = prim !00BC (_t1407);
        }
        _t13FB = _t1400;
      }
      _t12F7 = _t13FB;
      if _t12F7 {
        die;
      }
      real _t12F8 = prim |()|00B5<$[3]> (step12ED);
      real _t12F9 = prim /0055 (_t12F8, rad0857);
      bool _t12FA = prim >0080 (_t12F9, eps0858);
      if _t12FA {
        int _t12FB = 1;
        nfs12EF = prim +0015 (nfs12EF, _t12FB);
        int _t12FC = 10;
        bool _t12FD = prim >007F (nfs12EF, _t12FC);
        if _t12FD {
          die;
        }
      } else {
        found12EE = true;
        testp12F1 = 1;
      }
    } else {
      vec3 _t12FE = func fStep11AA (pos12EA);
      pos12EA = prim +0017<$[3]> (pos12EA, _t12FE);
      _pos12EB = pos12EA;
      bool _t12FF;
      bool _t1529;
      real _t152A = pos12EA[0];
      real _t152B = pos12EA[0];
      bool _t152C = prim ==0084 (_t152A, _t152B);
      bool _t152D = prim !00BC (_t152C);
      if _t152D {
        _t1529 = true;
      } else {
        bool _t152E;
        real _t152F = pos12EA[1];
        real _t1530 = pos12EA[1];
        bool _t1531 = prim ==0084 (_t152F, _t1530);
        bool _t1532 = prim !00BC (_t1531);
        if _t1532 {
          _t152E = true;
        } else {
          real _t1533 = pos12EA[2];
          real _t1534 = pos12EA[2];
          bool _t1535 = prim ==0084 (_t1533, _t1534);
          _t152E = prim !00BC (_t1535);
        }
        _t1529 = _t152E;
      }
      _t12FF = _t1529;
      if _t12FF {
        die;
      }
      step12ED = prim $zero01BB<$[3]> ();
      real oldE1300 = 0.e0;
      vec3 force1301 = prim $zero01BB<$[3]> ();
      int nn1302 = 0;
      particle[] _t1303 = prim sphere0198<particle> (_pos12EB, rad0857);
      foreach P1304 in _t1303 {
        vec3 _t1305 = P1304.pos12EA;
        vec3 _t1306 = prim -0026<$[3]> (_t1305, pos12EA);
        real _t1307;
        real _t1522 = prim |()|00B5<$[3]> (_t1306);
        real _t1523 = prim /0055 (_t1522, rad0857);
        real _t1524;
        real _t1525 = 0.1e1;
        real _t1526 = prim -0026<$[]> (_t1525, _t1523);
        int _t1527 = 4;
        real _t1528 = prim ^0068 (_t1526, _t1527);
        _t1524 = _t1528;
        _t1307 = _t1524;
        oldE1300 = prim +0017<$[]> (oldE1300, _t1307);
        vec3 _t1308 = P1304.pos12EA;
        vec3 _t1309 = prim -0026<$[3]> (_t1308, pos12EA);
        vec3 _t130A;
        real _t1512 = prim |()|00B5<$[3]> (_t1309);
        real _t1513 = prim /0055 (_t1512, rad0857);
        real _t1514;
        int _t1515 = -4;
        real _t1516 = (real)_t1515;
        real _t1517 = 0.1e1;
        real _t1518 = prim -0026<$[]> (_t1517, _t1513);
        int _t1519 = 3;
        real _t151A = prim ^0068 (_t1518, _t1519);
        real _t151B = prim *0034 (_t1516, _t151A);
        _t1514 = _t151B;
        real _t151C = 0.1e1;
        real _t151D = prim /0055 (_t151C, rad0857);
        real _t151E = prim *0034 (_t1514, _t151D);
        vec3 _t151F = prim *0036<$[3]> (_t151E, _t1309);
        real _t1520 = prim |()|00B5<$[3]> (_t1309);
        vec3 _t1521 = prim /0057<$[3]> (_t151F, _t1520);
        _t130A = _t1521;
        force1301 = prim +0017<$[3]> (force1301, _t130A);
        int _t130B = 1;
        nn1302 = prim +0015 (nn1302, _t130B);
      }
      int _t130C = 0;
      bool _t130D = prim ==0082 (_t130C, nn1302);
      if _t130D {
        real _t130E = 0.5e0;
        real _t130F = prim *0034 (_t130E, rad0857);
        real _t1310 = 0.e0;
        real _t1311 = 0.e0;
        vec3 _t1312 = [_t130F, _t1310, _t1311];
        vec3 npos1313 = prim +0017<$[3]> (pos12EA, _t1312);
        bool _t1314;
        bool _t1497;
        bool _t1498;
        real _t1499 = 0.e0;
        real _t149A = 0.e0;
        real _t149B = 0.e0;
        vec3 _t149C = [_t1499, _t149A, _t149B];
        vec3 mid149D = prim -0026<$[3]> (npos1313, _t149C);
        bool _t149E;
        real _t149F = mid149D[0];
        real _t14A0 = prim |()|00B5<$[]> (_t149F);
        real _t14A1 = 0.4e1;
        bool _t14A2 = prim <=007C (_t14A0, _t14A1);
        if _t14A2 {
          bool _t14A3;
          real _t14A4 = mid149D[1];
          real _t14A5 = prim |()|00B5<$[]> (_t14A4);
          real _t14A6 = 0.4e1;
          bool _t14A7 = prim <=007C (_t14A5, _t14A6);
          if _t14A7 {
            real _t14A8 = mid149D[2];
            real _t14A9 = prim |()|00B5<$[]> (_t14A8);
            real _t14AA = 0.4e1;
            _t14A3 = prim <=007C (_t14A9, _t14AA);
          } else {
            _t14A3 = false;
          }
          _t149E = _t14A3;
        } else {
          _t149E = false;
        }
        _t1498 = _t149E;
        if _t1498 {
          bool _t14AB;
          bool _t14AC;
          bool _t14AD;
          real _t14AE = npos1313[0];
          real _t14AF = npos1313[0];
          bool _t14B0 = prim ==0084 (_t14AE, _t14AF);
          bool _t14B1 = prim !00BC (_t14B0);
          if _t14B1 {
            _t14AD = true;
          } else {
            bool _t14B2;
            real _t14B3 = npos1313[1];
            real _t14B4 = npos1313[1];
            bool _t14B5 = prim ==0084 (_t14B3, _t14B4);
            bool _t14B6 = prim !00BC (_t14B5);
            if _t14B6 {
              _t14B2 = true;
            } else {
              real _t14B7 = npos1313[2];
              real _t14B8 = npos1313[2];
              bool _t14B9 = prim ==0084 (_t14B7, _t14B8);
              _t14B2 = prim !00BC (_t14B9);
            }
            _t14AD = _t14B2;
          }
          _t14AC = _t14AD;
          bool _t14BA = prim !00BC (_t14AC);
          if _t14BA {
            real _t14BB;
            real x14BC = npos1313[0];
            real y14BD = npos1313[1];
            real z14BE = npos1313[2];
            real _t14BF = 0.2e1;
            real _t14C0 = 0.2e1;
            real _t14C1 = 0.3e1;
            int _t14C2 = 2;
            real _t14C3 = prim ^0068 (x14BC, _t14C2);
            real _t14C4 = prim *0034 (_t14C1, _t14C3);
            real _t14C5 = prim -0026<$[]> (_t14C0, _t14C4);
            int _t14C6 = 2;
            real _t14C7 = prim ^0068 (_t14C5, _t14C6);
            real _t14C8 = prim *0034 (_t14BF, _t14C7);
            real _t14C9 = 0.12e2;
            real _t14CA = prim *0034 (_t14C9, x14BC);
            int _t14CB = 3;
            real _t14CC = prim ^0068 (x14BC, _t14CB);
            real _t14CD = prim unary -008B<$[]> (_t14CC);
            real _t14CE = 0.2e1;
            real _t14CF = prim *0034 (_t14CE, x14BC);
            real _t14D0 = prim +0017<$[]> (_t14CD, _t14CF);
            real _t14D1 = prim +0017<$[]> (_t14D0, y14BD);
            real _t14D2 = prim *0034 (_t14CA, _t14D1);
            real _t14D3 = prim -0026<$[]> (_t14C8, _t14D2);
            real _t14D4 = 0.2e1;
            real _t14D5 = 0.2e1;
            real _t14D6 = 0.3e1;
            int _t14D7 = 2;
            real _t14D8 = prim ^0068 (x14BC, _t14D7);
            real _t14D9 = prim *0034 (_t14D6, _t14D8);
            real _t14DA = prim -0026<$[]> (_t14D5, _t14D9);
            real _t14DB = prim *0034 (_t14D4, _t14DA);
            real _t14DC = 0.e0;
            vec3 _t14DD = [_t14D3, _t14DB, _t14DC];
            real _t14DE = 0.2e1;
            real _t14DF = 0.2e1;
            real _t14E0 = 0.3e1;
            int _t14E1 = 2;
            real _t14E2 = prim ^0068 (x14BC, _t14E1);
            real _t14E3 = prim *0034 (_t14E0, _t14E2);
            real _t14E4 = prim -0026<$[]> (_t14DF, _t14E3);
            real _t14E5 = prim *0034 (_t14DE, _t14E4);
            real _t14E6 = 0.2e1;
            real _t14E7 = 0.e0;
            vec3 _t14E8 = [_t14E5, _t14E6, _t14E7];
            real _t14E9 = 0.e0;
            real _t14EA = 0.e0;
            real _t14EB = 0.2e1;
            real _t14EC = prim *0034 (_t14EB, zfuz085C);
            vec3 _t14ED = [_t14E9, _t14EA, _t14EC];
            tensor[3,3] H14EE = [_t14DD, _t14E8, _t14ED];
            real _t14EF = 0.2e1;
            real _t14F0 = 0.2e1;
            real _t14F1 = 0.3e1;
            int _t14F2 = 2;
            real _t14F3 = prim ^0068 (x14BC, _t14F2);
            real _t14F4 = prim *0034 (_t14F1, _t14F3);
            real _t14F5 = prim -0026<$[]> (_t14F0, _t14F4);
            real _t14F6 = prim *0034 (_t14EF, _t14F5);
            int _t14F7 = 3;
            real _t14F8 = prim ^0068 (x14BC, _t14F7);
            real _t14F9 = prim unary -008B<$[]> (_t14F8);
            real _t14FA = 0.2e1;
            real _t14FB = prim *0034 (_t14FA, x14BC);
            real _t14FC = prim +0017<$[]> (_t14F9, _t14FB);
            real _t14FD = prim +0017<$[]> (_t14FC, y14BD);
            real _t14FE = prim *0034 (_t14F6, _t14FD);
            real _t14FF = 0.2e1;
            int _t1500 = 3;
            real _t1501 = prim ^0068 (x14BC, _t1500);
            real _t1502 = prim unary -008B<$[]> (_t1501);
            real _t1503 = 0.2e1;
            real _t1504 = prim *0034 (_t1503, x14BC);
            real _t1505 = prim +0017<$[]> (_t1502, _t1504);
            real _t1506 = prim +0017<$[]> (_t1505, y14BD);
            real _t1507 = prim *0034 (_t14FF, _t1506);
            real _t1508 = 0.2e1;
            real _t1509 = prim *0034 (_t1508, zfuz085C);
            real _t150A = prim *0034 (_t1509, z14BE);
            vec3 g150B = [_t14FE, _t1507, _t150A];
            real[3] _t150C = prim evals009F (H14EE);
            int _t150D = 0;
            real _t150E = prim $sub01C0<real; %3> (_t150C, _t150D);
            real _t150F = prim |()|00B5<$[3]> (g150B);
            real _t1510 = prim +0017<$[]> (fBias085A, _t150F);
            real _t1511 = prim /0055 (_t150E, _t1510);
            _t14BB = _t1511;
            _t14AB = prim >=007E (_t14BB, fStren085B);
          } else {
            _t14AB = false;
          }
          _t1497 = _t14AB;
        } else {
          _t1497 = false;
        }
        _t1314 = _t1497;
        if _t1314 {
          new particle (npos1313, hh12EC);
        }
        continue;
      }
      tensor[3,3] _t1315 = func fPerp122A (pos12EA);
      force1301 = prim •00CE<$[3,3]; $[3]; $[3]> (_t1315, force1301);
      vec3 es1316 = prim *0036<$[3]> (hh12EC, force1301);
      real _t1317 = prim |()|00B5<$[3]> (es1316);
      bool _t1318 = prim >0080 (_t1317, rad0857);
      if _t1318 {
        real _t1319 = prim |()|00B5<$[3]> (es1316);
        real _t131A = prim /0055 (rad0857, _t1319);
        hh12EC = prim *0034 (hh12EC, _t131A);
        real _t131B = prim |()|00B5<$[3]> (es1316);
        real _t131C = prim /0055 (rad0857, _t131B);
        es1316 = prim *0038<$[3]> (es1316, _t131C);
      }
      vec3 samplePos131D = prim +0017<$[3]> (pos12EA, es1316);
      vec3 fs131E = func fStep11AA (samplePos131D);
      real _t131F = prim |()|00B5<$[3]> (fs131E);
      real _t1320 = prim |()|00B5<$[3]> (es1316);
      real _t1321 = prim /0055 (_t131F, _t1320);
      real _t1322 = 0.5e0;
      bool _t1323 = prim >0080 (_t1321, _t1322);
      if _t1323 {
        real _t1324 = 0.5e0;
        hh12EC = prim *0034 (hh12EC, _t1324);
        continue;
      }
      vec3 oldPos1325 = pos12EA;
      vec3 up1326 = prim +0017<$[3]> (fs131E, es1316);
      pos12EA = prim +0017<$[3]> (pos12EA, up1326);
      _pos12EB = pos12EA;
      particle[] _t1327 = prim sphere0198<particle> (_pos12EB, rad0857);
      real accum132C = 0.e0;
      foreach P1328 in _t1327 {
        vec3 _t1329 = P1328.pos12EA;
        vec3 _t132A = prim -0026<$[3]> (pos12EA, _t1329);
        real _t132B;
        real _t1490 = prim |()|00B5<$[3]> (_t132A);
        real _t1491 = prim /0055 (_t1490, rad0857);
        real _t1492;
        real _t1493 = 0.1e1;
        real _t1494 = prim -0026<$[]> (_t1493, _t1491);
        int _t1495 = 4;
        real _t1496 = prim ^0068 (_t1494, _t1495);
        _t1492 = _t1496;
        _t132B = _t1492;
        accum132C = prim +0017<$[]> (accum132C, _t132B);
      }
      real newE132D = accum132C;
      real _t132E = prim -0026<$[]> (newE132D, oldE1300);
      real _t132F = 0.5e0;
      vec3 _t1330 = prim -0026<$[3]> (pos12EA, oldPos1325);
      vec3 _t1331 = prim *0036<$[3]> (_t132F, _t1330);
      vec3 _t1332 = prim unary -008B<$[3]> (force1301);
      real _t1333 = prim •00CE<$[3]; $[3]; $[]> (_t1331, _t1332);
      bool _t1334 = prim >0080 (_t132E, _t1333);
      if _t1334 {
        pos12EA = oldPos1325;
        _pos12EB = pos12EA;
        real _t1335 = 0.5e0;
        hh12EC = prim *0034 (hh12EC, _t1335);
        continue;
      }
      real _t1336 = 0.11e1;
      hh12EC = prim *0034 (hh12EC, _t1336);
      step12ED = up1326;
      bool _t1337;
      bool _t1483;
      real _t1484 = pos12EA[0];
      real _t1485 = pos12EA[0];
      bool _t1486 = prim ==0084 (_t1484, _t1485);
      bool _t1487 = prim !00BC (_t1486);
      if _t1487 {
        _t1483 = true;
      } else {
        bool _t1488;
        real _t1489 = pos12EA[1];
        real _t148A = pos12EA[1];
        bool _t148B = prim ==0084 (_t1489, _t148A);
        bool _t148C = prim !00BC (_t148B);
        if _t148C {
          _t1488 = true;
        } else {
          real _t148D = pos12EA[2];
          real _t148E = pos12EA[2];
          bool _t148F = prim ==0084 (_t148D, _t148E);
          _t1488 = prim !00BC (_t148F);
        }
        _t1483 = _t1488;
      }
      _t1337 = _t1483;
      if _t1337 {
        die;
      }
      int _t1338 = 5;
      bool _t1339 = prim <0079 (nn1302, _t1338);
      if _t1339 {
        real _t133A = 0.5e0;
        real _t133B = prim *0034 (_t133A, rad0857);
        vec3 _t133C = prim normalize0137<$[3]> (es1316);
        vec3 _t133D = prim *0036<$[3]> (_t133B, _t133C);
        vec3 npos133E = prim +0017<$[3]> (pos12EA, _t133D);
        bool _t133F;
        bool _t1408;
        bool _t1409;
        real _t140A = 0.e0;
        real _t140B = 0.e0;
        real _t140C = 0.e0;
        vec3 _t140D = [_t140A, _t140B, _t140C];
        vec3 mid140E = prim -0026<$[3]> (npos133E, _t140D);
        bool _t140F;
        real _t1410 = mid140E[0];
        real _t1411 = prim |()|00B5<$[]> (_t1410);
        real _t1412 = 0.4e1;
        bool _t1413 = prim <=007C (_t1411, _t1412);
        if _t1413 {
          bool _t1414;
          real _t1415 = mid140E[1];
          real _t1416 = prim |()|00B5<$[]> (_t1415);
          real _t1417 = 0.4e1;
          bool _t1418 = prim <=007C (_t1416, _t1417);
          if _t1418 {
            real _t1419 = mid140E[2];
            real _t141A = prim |()|00B5<$[]> (_t1419);
            real _t141B = 0.4e1;
            _t1414 = prim <=007C (_t141A, _t141B);
          } else {
            _t1414 = false;
          }
          _t140F = _t1414;
        } else {
          _t140F = false;
        }
        _t1409 = _t140F;
        if _t1409 {
          bool _t141C;
          bool _t141D;
          bool _t141E;
          real _t141F = npos133E[0];
          real _t1420 = npos133E[0];
          bool _t1421 = prim ==0084 (_t141F, _t1420);
          bool _t1422 = prim !00BC (_t1421);
          if _t1422 {
            _t141E = true;
          } else {
            bool _t1423;
            real _t1424 = npos133E[1];
            real _t1425 = npos133E[1];
            bool _t1426 = prim ==0084 (_t1424, _t1425);
            bool _t1427 = prim !00BC (_t1426);
            if _t1427 {
              _t1423 = true;
            } else {
              real _t1428 = npos133E[2];
              real _t1429 = npos133E[2];
              bool _t142A = prim ==0084 (_t1428, _t1429);
              _t1423 = prim !00BC (_t142A);
            }
            _t141E = _t1423;
          }
          _t141D = _t141E;
          bool _t142B = prim !00BC (_t141D);
          if _t142B {
            real _t142C;
            real x142D = npos133E[0];
            real y142E = npos133E[1];
            real z142F = npos133E[2];
            real _t1430 = 0.2e1;
            real _t1431 = 0.2e1;
            real _t1432 = 0.3e1;
            int _t1433 = 2;
            real _t1434 = prim ^0068 (x142D, _t1433);
            real _t1435 = prim *0034 (_t1432, _t1434);
            real _t1436 = prim -0026<$[]> (_t1431, _t1435);
            int _t1437 = 2;
            real _t1438 = prim ^0068 (_t1436, _t1437);
            real _t1439 = prim *0034 (_t1430, _t1438);
            real _t143A = 0.12e2;
            real _t143B = prim *0034 (_t143A, x142D);
            int _t143C = 3;
            real _t143D = prim ^0068 (x142D, _t143C);
            real _t143E = prim unary -008B<$[]> (_t143D);
            real _t143F = 0.2e1;
            real _t1440 = prim *0034 (_t143F, x142D);
            real _t1441 = prim +0017<$[]> (_t143E, _t1440);
            real _t1442 = prim +0017<$[]> (_t1441, y142E);
            real _t1443 = prim *0034 (_t143B, _t1442);
            real _t1444 = prim -0026<$[]> (_t1439, _t1443);
            real _t1445 = 0.2e1;
            real _t1446 = 0.2e1;
            real _t1447 = 0.3e1;
            int _t1448 = 2;
            real _t1449 = prim ^0068 (x142D, _t1448);
            real _t144A = prim *0034 (_t1447, _t1449);
            real _t144B = prim -0026<$[]> (_t1446, _t144A);
            real _t144C = prim *0034 (_t1445, _t144B);
            real _t144D = 0.e0;
            vec3 _t144E = [_t1444, _t144C, _t144D];
            real _t144F = 0.2e1;
            real _t1450 = 0.2e1;
            real _t1451 = 0.3e1;
            int _t1452 = 2;
            real _t1453 = prim ^0068 (x142D, _t1452);
            real _t1454 = prim *0034 (_t1451, _t1453);
            real _t1455 = prim -0026<$[]> (_t1450, _t1454);
            real _t1456 = prim *0034 (_t144F, _t1455);
            real _t1457 = 0.2e1;
            real _t1458 = 0.e0;
            vec3 _t1459 = [_t1456, _t1457, _t1458];
            real _t145A = 0.e0;
            real _t145B = 0.e0;
            real _t145C = 0.2e1;
            real _t145D = prim *0034 (_t145C, zfuz085C);
            vec3 _t145E = [_t145A, _t145B, _t145D];
            tensor[3,3] H145F = [_t144E, _t1459, _t145E];
            real _t1460 = 0.2e1;
            real _t1461 = 0.2e1;
            real _t1462 = 0.3e1;
            int _t1463 = 2;
            real _t1464 = prim ^0068 (x142D, _t1463);
            real _t1465 = prim *0034 (_t1462, _t1464);
            real _t1466 = prim -0026<$[]> (_t1461, _t1465);
            real _t1467 = prim *0034 (_t1460, _t1466);
            int _t1468 = 3;
            real _t1469 = prim ^0068 (x142D, _t1468);
            real _t146A = prim unary -008B<$[]> (_t1469);
            real _t146B = 0.2e1;
            real _t146C = prim *0034 (_t146B, x142D);
            real _t146D = prim +0017<$[]> (_t146A, _t146C);
            real _t146E = prim +0017<$[]> (_t146D, y142E);
            real _t146F = prim *0034 (_t1467, _t146E);
            real _t1470 = 0.2e1;
            int _t1471 = 3;
            real _t1472 = prim ^0068 (x142D, _t1471);
            real _t1473 = prim unary -008B<$[]> (_t1472);
            real _t1474 = 0.2e1;
            real _t1475 = prim *0034 (_t1474, x142D);
            real _t1476 = prim +0017<$[]> (_t1473, _t1475);
            real _t1477 = prim +0017<$[]> (_t1476, y142E);
            real _t1478 = prim *0034 (_t1470, _t1477);
            real _t1479 = 0.2e1;
            real _t147A = prim *0034 (_t1479, zfuz085C);
            real _t147B = prim *0034 (_t147A, z142F);
            vec3 g147C = [_t146F, _t1478, _t147B];
            real[3] _t147D = prim evals009F (H145F);
            int _t147E = 0;
            real _t147F = prim $sub01C0<real; %3> (_t147D, _t147E);
            real _t1480 = prim |()|00B5<$[3]> (g147C);
            real _t1481 = prim +0017<$[]> (fBias085A, _t1480);
            real _t1482 = prim /0055 (_t147F, _t1481);
            _t142C = _t1482;
            _t141C = prim >=007E (_t142C, fStren085B);
          } else {
            _t141C = false;
          }
          _t1408 = _t141C;
        } else {
          _t1408 = false;
        }
        _t133F = _t1408;
        if _t133F {
          new particle (npos133E, hh12EC);
        }
      }
    }
  }
}
collection {
  foreach x1340 in ipos085D {
    real _t1341 = 0.1e1;
    new particle (x1340, _t1341);
  }
}
update {
  int res1342= sum<int> { (P1345) => {
      int _t1346 = P1345.test12F0;
      return _t1346;
    } (P1343, P1343)
  | P1343 in all };
  int num1348 = res1342;
  int res1349= max<int> { (P134C) => {
      int _t134D = P134C.steps12F2;
      return _t134D;
    } (P134A, P134A)
  | P134A in all };
  int steps134F = res1349;
  int res1350= sum<int> { (P1353) => {
      int _t1354 = P1353.testp12F1;
      return _t1354;
    } (P1351, P1351)
  | P1351 in all };
  int numFound1356 = res1350;
  bool res1357= all { (P135A) => {
      bool _t135B = P135A.found12EE;
      return _t135B;
    } (P1358, P1358)
  | P1358 in all };
  bool allFound135D = res1357;
  real res135E= max<real> { (P1362) => {
      vec3 _t1363 = P1362.step12ED;
      real _t1364 = prim |()|00B5<$[3]> (_t1363);
      return _t1364;
    } (P135F, P135F)
  | P135F in all };
  real maxStep1366 = res135E;
  string _t1367 = "One run:";
  string _t1368 = " and ";
  real _t1369 = prim /0055 (maxStep1366, rad0857);
  string _t136A = " and ";
  real _t136B = prim /0055 (maxStep1366, rad0857);
  bool _t136C = prim <007A (_t136B, eps0858);
  string _t136D = " and ";
  string _t136E = " of ";
  string _t136F = "\n";
  print (_t1367, allFound135D, _t1368, _t1369, _t136A, _t136C, _t136D, numFound1356, _t136E, num1348, _t136F);
  if allFound135D {
    real _t1370 = prim /0055 (maxStep1366, rad0857);
    bool _t1371 = prim <007A (_t1370, eps0858);
    if _t1371 {
      string _t1372 = "CONVERGED!\n";
      print (_t1372);
      stabilize_all;
    }
  }
  int _t1373 = 5000;
  bool _t1374 = prim >007F (steps134F, _t1373);
  if _t1374 {
    stabilize_all;
  }
}
/* Program end */
/* Simplified Program (after after contraction (2)) start */
properties: GlobalInit,StabilizeAll,GlobalReduce,StrandSets,GlobalUpdate,NewStrands,StrandCommunication,StrandsMayDie,HasInputs,HasGlobals,ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
input FemData:Mesh meshData0847;
input FemData:Space 0space0853_intermedateGlobal0854;
input FemData:FemFunc 0data0855_intermedateGlobal0856;
input real rad0857 = <default>;
input real eps0858 = <default>;
input real v00859 = <default>;
input real fBias085A = <default>;
input real fStren085B = <default>;
input real zfuz085C = <default>;
input vec3[] ipos085D;
constants {
  rad0857 = 0.1e-1;
  eps0858 = 0.1e-1;
  v00859 = 0.625e-1;
  fBias085A = 0.1e-1;
  fStren085B = 0.1e-1;
  zfuz085C = 0.1e-1;
}
function int[2]#6 nextCell40932 (int faceIdx0D91, int cell0D92, Femdata: Mesh mesh0D93)
{
  int _t0D94 = -1;
  bool _t0D95 = prim ==0082 (faceIdx0D91, _t0D94);
  if _t0D95 {
    int _t0D96 = -1;
    int _t0D97 = -1;
    int[2] _t0D98 = {_t0D96, _t0D97};
    return _t0D98;
  } else {
    int _t0D99 = 8;
    int _t0D9A = prim *0033 (cell0D92, _t0D99);
    int _t0D9B = 2;
    int _t0D9C = prim *0033 (faceIdx0D91, _t0D9B);
    int _t0D9D = prim +0015 (_t0D9A, _t0D9C);
    int[2] _t0D9E = extractFemItemN((mesh0D93, _t0D9D),CellFaceCell(Mesh),);
    return _t0D9E;
  }
}
function vec3#3 fStep11AA (vec3 s11AB)
{
  real x11AC = s11AB[0];
  real y11AD = s11AB[1];
  real z11AE = s11AB[2];
  real _t11AF = 0.2e1;
  real _t11B0 = 0.2e1;
  real _t11B1 = 0.3e1;
  int _t11B2 = 2;
  real _t11B3 = prim ^0068 (x11AC, _t11B2);
  real _t11B4 = prim *0034 (_t11B1, _t11B3);
  real _t11B5 = prim -0026<$[]> (_t11B0, _t11B4);
  int _t11B6 = 2;
  real _t11B7 = prim ^0068 (_t11B5, _t11B6);
  real _t11B8 = prim *0034 (_t11AF, _t11B7);
  real _t11B9 = 0.12e2;
  real _t11BA = prim *0034 (_t11B9, x11AC);
  int _t11BB = 3;
  real _t11BC = prim ^0068 (x11AC, _t11BB);
  real _t11BD = prim unary -008B<$[]> (_t11BC);
  real _t11BE = 0.2e1;
  real _t11BF = prim *0034 (_t11BE, x11AC);
  real _t11C0 = prim +0017<$[]> (_t11BD, _t11BF);
  real _t11C1 = prim +0017<$[]> (_t11C0, y11AD);
  real _t11C2 = prim *0034 (_t11BA, _t11C1);
  real _t11C3 = prim -0026<$[]> (_t11B8, _t11C2);
  real _t11C4 = 0.2e1;
  real _t11C5 = 0.2e1;
  real _t11C6 = 0.3e1;
  int _t11C7 = 2;
  real _t11C8 = prim ^0068 (x11AC, _t11C7);
  real _t11C9 = prim *0034 (_t11C6, _t11C8);
  real _t11CA = prim -0026<$[]> (_t11C5, _t11C9);
  real _t11CB = prim *0034 (_t11C4, _t11CA);
  real _t11CC = 0.e0;
  vec3 _t11CD = [_t11C3, _t11CB, _t11CC];
  real _t11CE = 0.2e1;
  real _t11CF = 0.2e1;
  real _t11D0 = 0.3e1;
  int _t11D1 = 2;
  real _t11D2 = prim ^0068 (x11AC, _t11D1);
  real _t11D3 = prim *0034 (_t11D0, _t11D2);
  real _t11D4 = prim -0026<$[]> (_t11CF, _t11D3);
  real _t11D5 = prim *0034 (_t11CE, _t11D4);
  real _t11D6 = 0.2e1;
  real _t11D7 = 0.e0;
  vec3 _t11D8 = [_t11D5, _t11D6, _t11D7];
  real _t11D9 = 0.e0;
  real _t11DA = 0.e0;
  real _t11DB = 0.2e1;
  real _t11DC = prim *0034 (_t11DB, zfuz085C);
  vec3 _t11DD = [_t11D9, _t11DA, _t11DC];
  tensor[3,3] H11DE = [_t11CD, _t11D8, _t11DD];
  real _t11DF = 0.2e1;
  real _t11E0 = 0.2e1;
  real _t11E1 = 0.3e1;
  int _t11E2 = 2;
  real _t11E3 = prim ^0068 (x11AC, _t11E2);
  real _t11E4 = prim *0034 (_t11E1, _t11E3);
  real _t11E5 = prim -0026<$[]> (_t11E0, _t11E4);
  real _t11E6 = prim *0034 (_t11DF, _t11E5);
  int _t11E7 = 3;
  real _t11E8 = prim ^0068 (x11AC, _t11E7);
  real _t11E9 = prim unary -008B<$[]> (_t11E8);
  real _t11EA = 0.2e1;
  real _t11EB = prim *0034 (_t11EA, x11AC);
  real _t11EC = prim +0017<$[]> (_t11E9, _t11EB);
  real _t11ED = prim +0017<$[]> (_t11EC, y11AD);
  real _t11EE = prim *0034 (_t11E6, _t11ED);
  real _t11EF = 0.2e1;
  int _t11F0 = 3;
  real _t11F1 = prim ^0068 (x11AC, _t11F0);
  real _t11F2 = prim unary -008B<$[]> (_t11F1);
  real _t11F3 = 0.2e1;
  real _t11F4 = prim *0034 (_t11F3, x11AC);
  real _t11F5 = prim +0017<$[]> (_t11F2, _t11F4);
  real _t11F6 = prim +0017<$[]> (_t11F5, y11AD);
  real _t11F7 = prim *0034 (_t11EF, _t11F6);
  real _t11F8 = 0.2e1;
  real _t11F9 = prim *0034 (_t11F8, zfuz085C);
  real _t11FA = prim *0034 (_t11F9, z11AE);
  vec3 g11FB = [_t11EE, _t11F7, _t11FA];
  vec3[3] E11FC = prim evecs00A0 (H11DE);
  real[3] L11FD = prim evals009F (H11DE);
  real _t11FE = 0.1e1;
  int _t11FF = 0;
  real _t1200 = prim $sub01C0<real; %3> (L11FD, _t11FF);
  real _t1201 = prim /0055 (_t11FE, _t1200);
  real _t1202 = prim unary -008B<$[]> (_t1201);
  int _t1203 = 0;
  vec3 _t1204 = prim $sub01C0<vec3; %3> (E11FC, _t1203);
  vec3 _t1205 = prim *0036<$[3]> (_t1202, _t1204);
  int _t1206 = 0;
  vec3 _t1207 = prim $sub01C0<vec3; %3> (E11FC, _t1206);
  tensor[3,3] _t1208 = prim ⊗00E5<$[3]; $[3]; $[3,3]> (_t1205, _t1207);
  vec3 up1209 = prim •00CE<$[3,3]; $[3]; $[3]> (_t1208, g11FB);
  bool _t120A;
  real _t120B = up1209[0];
  real _t120C = up1209[0];
  bool _t120D = prim ==0084 (_t120B, _t120C);
  bool _t120E = prim !00BC (_t120D);
  if _t120E {
    _t120A = true;
  } else {
    bool _t120F;
    real _t1210 = up1209[1];
    real _t1211 = up1209[1];
    bool _t1212 = prim ==0084 (_t1210, _t1211);
    bool _t1213 = prim !00BC (_t1212);
    if _t1213 {
      _t120F = true;
    } else {
      real _t1214 = up1209[2];
      real _t1215 = up1209[2];
      bool _t1216 = prim ==0084 (_t1214, _t1215);
      _t120F = prim !00BC (_t1216);
    }
    _t120A = _t120F;
  }
  if _t120A {
    real _t1217 = +inf;
    real _t1218 = +inf;
    real _t1219 = +inf;
    vec3 _t121A = [_t1217, _t1218, _t1219];
    return _t121A;
  }
  return up1209;
}
function tensor[3,3]#1 fPerp122A (vec3 s122B)
{
  real x122C = s122B[0];
  real y122D = s122B[1];
  real z122E = s122B[2];
  real _t122F = 0.2e1;
  real _t1230 = 0.2e1;
  real _t1231 = 0.3e1;
  int _t1232 = 2;
  real _t1233 = prim ^0068 (x122C, _t1232);
  real _t1234 = prim *0034 (_t1231, _t1233);
  real _t1235 = prim -0026<$[]> (_t1230, _t1234);
  int _t1236 = 2;
  real _t1237 = prim ^0068 (_t1235, _t1236);
  real _t1238 = prim *0034 (_t122F, _t1237);
  real _t1239 = 0.12e2;
  real _t123A = prim *0034 (_t1239, x122C);
  int _t123B = 3;
  real _t123C = prim ^0068 (x122C, _t123B);
  real _t123D = prim unary -008B<$[]> (_t123C);
  real _t123E = 0.2e1;
  real _t123F = prim *0034 (_t123E, x122C);
  real _t1240 = prim +0017<$[]> (_t123D, _t123F);
  real _t1241 = prim +0017<$[]> (_t1240, y122D);
  real _t1242 = prim *0034 (_t123A, _t1241);
  real _t1243 = prim -0026<$[]> (_t1238, _t1242);
  real _t1244 = 0.2e1;
  real _t1245 = 0.2e1;
  real _t1246 = 0.3e1;
  int _t1247 = 2;
  real _t1248 = prim ^0068 (x122C, _t1247);
  real _t1249 = prim *0034 (_t1246, _t1248);
  real _t124A = prim -0026<$[]> (_t1245, _t1249);
  real _t124B = prim *0034 (_t1244, _t124A);
  real _t124C = 0.e0;
  vec3 _t124D = [_t1243, _t124B, _t124C];
  real _t124E = 0.2e1;
  real _t124F = 0.2e1;
  real _t1250 = 0.3e1;
  int _t1251 = 2;
  real _t1252 = prim ^0068 (x122C, _t1251);
  real _t1253 = prim *0034 (_t1250, _t1252);
  real _t1254 = prim -0026<$[]> (_t124F, _t1253);
  real _t1255 = prim *0034 (_t124E, _t1254);
  real _t1256 = 0.2e1;
  real _t1257 = 0.e0;
  vec3 _t1258 = [_t1255, _t1256, _t1257];
  real _t1259 = 0.e0;
  real _t125A = 0.e0;
  real _t125B = 0.2e1;
  real _t125C = prim *0034 (_t125B, zfuz085C);
  vec3 _t125D = [_t1259, _t125A, _t125C];
  tensor[3,3] H125E = [_t124D, _t1258, _t125D];
  vec3[3] _t125F = prim evecs00A0 (H125E);
  int _t1260 = 0;
  vec3 E21261 = prim $sub01C0<vec3; %3> (_t125F, _t1260);
  tensor[3,3] _t1262 = prim $id01B9<%3> ();
  tensor[3,3] _t1263 = prim ⊗00E5<$[3]; $[3]; $[3,3]> (E21261, E21261);
  tensor[3,3] m1264 = prim -0026<$[3,3]> (_t1262, _t1263);
  real t1265 = prim :00FC<$[3,3]; $[3,3]; $[]> (m1264, m1264);
  bool _t1266 = prim ==0084 (t1265, t1265);
  bool _t1267 = prim !00BC (_t1266);
  if _t1267 {
    tensor[3,3] _t1268 = prim $zero01BB<$[3,3]> ();
    return _t1268;
  }
  return m1264;
}
globalInit {
  int _t084B = 0;
  int _t0849 = 1;
  int _t084D = extractFemItem(NumCell(Mesh), int, meshData0847);
  int _t084C = prim -0024 (_t084D, _t0849);
  int[] _t0850 = prim $range01C3 (_t084B, _t084C);
  Femdata: MeshCell[] _t0851 = {};
  foreach _t084F in _t0850 {
    Femdata: MeshCell _t0852 = loadFem(MeshCell, meshData0847, _t084F);
    _t0851 = prim @0010<Femdata: MeshCell> (_t0851, _t0852);
  }
}
strand particle (vec3 pos012E8, real hh012E9) in 3D {
  output vec3 pos12EA;
  output vec3 _pos12EB;
  real hh12EC;
  vec3 step12ED;
  bool found12EE;
  int nfs12EF;
  int test12F0;
  int testp12F1;
  int steps12F2;
  {
    pos12EA = pos012E8;
    _pos12EB = pos12EA;
    hh12EC = hh012E9;
    step12ED = prim $zero01BB<$[3]> ();
    found12EE = false;
    nfs12EF = 0;
    test12F0 = 1;
    testp12F1 = 0;
    steps12F2 = 0;
  }
  update
  {
    int _t12F3 = 1;
    steps12F2 = prim +0015 (steps12F2, _t12F3);
    bool _t12F4;
    bool _t1536;
    bool _t1537;
    real _t1538 = 0.e0;
    real _t1539 = 0.e0;
    real _t153A = 0.e0;
    vec3 _t153B = [_t1538, _t1539, _t153A];
    vec3 mid153C = prim -0026<$[3]> (pos12EA, _t153B);
    bool _t153D;
    real _t153E = mid153C[0];
    real _t153F = prim |()|00B5<$[]> (_t153E);
    real _t1540 = 0.4e1;
    bool _t1541 = prim <=007C (_t153F, _t1540);
    if _t1541 {
      bool _t1542;
      real _t1543 = mid153C[1];
      real _t1544 = prim |()|00B5<$[]> (_t1543);
      real _t1545 = 0.4e1;
      bool _t1546 = prim <=007C (_t1544, _t1545);
      if _t1546 {
        real _t1547 = mid153C[2];
        real _t1548 = prim |()|00B5<$[]> (_t1547);
        real _t1549 = 0.4e1;
        _t1542 = prim <=007C (_t1548, _t1549);
      } else {
        _t1542 = false;
      }
      _t153D = _t1542;
    } else {
      _t153D = false;
    }
    _t1537 = _t153D;
    if _t1537 {
      bool _t154A;
      bool _t154B;
      bool _t154C;
      real _t154D = pos12EA[0];
      real _t154E = pos12EA[0];
      bool _t154F = prim ==0084 (_t154D, _t154E);
      bool _t1550 = prim !00BC (_t154F);
      if _t1550 {
        _t154C = true;
      } else {
        bool _t1551;
        real _t1552 = pos12EA[1];
        real _t1553 = pos12EA[1];
        bool _t1554 = prim ==0084 (_t1552, _t1553);
        bool _t1555 = prim !00BC (_t1554);
        if _t1555 {
          _t1551 = true;
        } else {
          real _t1556 = pos12EA[2];
          real _t1557 = pos12EA[2];
          bool _t1558 = prim ==0084 (_t1556, _t1557);
          _t1551 = prim !00BC (_t1558);
        }
        _t154C = _t1551;
      }
      _t154B = _t154C;
      bool _t1559 = prim !00BC (_t154B);
      if _t1559 {
        real _t155A;
        real x155B = pos12EA[0];
        real y155C = pos12EA[1];
        real z155D = pos12EA[2];
        real _t155E = 0.2e1;
        real _t155F = 0.2e1;
        real _t1560 = 0.3e1;
        int _t1561 = 2;
        real _t1562 = prim ^0068 (x155B, _t1561);
        real _t1563 = prim *0034 (_t1560, _t1562);
        real _t1564 = prim -0026<$[]> (_t155F, _t1563);
        int _t1565 = 2;
        real _t1566 = prim ^0068 (_t1564, _t1565);
        real _t1567 = prim *0034 (_t155E, _t1566);
        real _t1568 = 0.12e2;
        real _t1569 = prim *0034 (_t1568, x155B);
        int _t156A = 3;
        real _t156B = prim ^0068 (x155B, _t156A);
        real _t156C = prim unary -008B<$[]> (_t156B);
        real _t156D = 0.2e1;
        real _t156E = prim *0034 (_t156D, x155B);
        real _t156F = prim +0017<$[]> (_t156C, _t156E);
        real _t1570 = prim +0017<$[]> (_t156F, y155C);
        real _t1571 = prim *0034 (_t1569, _t1570);
        real _t1572 = prim -0026<$[]> (_t1567, _t1571);
        real _t1573 = 0.2e1;
        real _t1574 = 0.2e1;
        real _t1575 = 0.3e1;
        int _t1576 = 2;
        real _t1577 = prim ^0068 (x155B, _t1576);
        real _t1578 = prim *0034 (_t1575, _t1577);
        real _t1579 = prim -0026<$[]> (_t1574, _t1578);
        real _t157A = prim *0034 (_t1573, _t1579);
        real _t157B = 0.e0;
        vec3 _t157C = [_t1572, _t157A, _t157B];
        real _t157D = 0.2e1;
        real _t157E = 0.2e1;
        real _t157F = 0.3e1;
        int _t1580 = 2;
        real _t1581 = prim ^0068 (x155B, _t1580);
        real _t1582 = prim *0034 (_t157F, _t1581);
        real _t1583 = prim -0026<$[]> (_t157E, _t1582);
        real _t1584 = prim *0034 (_t157D, _t1583);
        real _t1585 = 0.2e1;
        real _t1586 = 0.e0;
        vec3 _t1587 = [_t1584, _t1585, _t1586];
        real _t1588 = 0.e0;
        real _t1589 = 0.e0;
        real _t158A = 0.2e1;
        real _t158B = prim *0034 (_t158A, zfuz085C);
        vec3 _t158C = [_t1588, _t1589, _t158B];
        tensor[3,3] H158D = [_t157C, _t1587, _t158C];
        real _t158E = 0.2e1;
        real _t158F = 0.2e1;
        real _t1590 = 0.3e1;
        int _t1591 = 2;
        real _t1592 = prim ^0068 (x155B, _t1591);
        real _t1593 = prim *0034 (_t1590, _t1592);
        real _t1594 = prim -0026<$[]> (_t158F, _t1593);
        real _t1595 = prim *0034 (_t158E, _t1594);
        int _t1596 = 3;
        real _t1597 = prim ^0068 (x155B, _t1596);
        real _t1598 = prim unary -008B<$[]> (_t1597);
        real _t1599 = 0.2e1;
        real _t159A = prim *0034 (_t1599, x155B);
        real _t159B = prim +0017<$[]> (_t1598, _t159A);
        real _t159C = prim +0017<$[]> (_t159B, y155C);
        real _t159D = prim *0034 (_t1595, _t159C);
        real _t159E = 0.2e1;
        int _t159F = 3;
        real _t15A0 = prim ^0068 (x155B, _t159F);
        real _t15A1 = prim unary -008B<$[]> (_t15A0);
        real _t15A2 = 0.2e1;
        real _t15A3 = prim *0034 (_t15A2, x155B);
        real _t15A4 = prim +0017<$[]> (_t15A1, _t15A3);
        real _t15A5 = prim +0017<$[]> (_t15A4, y155C);
        real _t15A6 = prim *0034 (_t159E, _t15A5);
        real _t15A7 = 0.2e1;
        real _t15A8 = prim *0034 (_t15A7, zfuz085C);
        real _t15A9 = prim *0034 (_t15A8, z155D);
        vec3 g15AA = [_t159D, _t15A6, _t15A9];
        real[3] _t15AB = prim evals009F (H158D);
        int _t15AC = 0;
        real _t15AD = prim $sub01C0<real; %3> (_t15AB, _t15AC);
        real _t15AE = prim |()|00B5<$[3]> (g15AA);
        real _t15AF = prim +0017<$[]> (fBias085A, _t15AE);
        real _t15B0 = prim /0055 (_t15AD, _t15AF);
        _t155A = _t15B0;
        _t154A = prim >=007E (_t155A, fStren085B);
      } else {
        _t154A = false;
      }
      _t1536 = _t154A;
    } else {
      _t1536 = false;
    }
    _t12F4 = _t1536;
    bool _t12F5 = prim !00BC (_t12F4);
    if _t12F5 {
      die;
    }
    bool _t12F6 = prim !00BC (found12EE);
    if _t12F6 {
      step12ED = func fStep11AA (pos12EA);
      pos12EA = prim +0017<$[3]> (pos12EA, step12ED);
      _pos12EB = pos12EA;
      bool _t12F7;
      bool _t13FB;
      real _t13FC = pos12EA[0];
      real _t13FD = pos12EA[0];
      bool _t13FE = prim ==0084 (_t13FC, _t13FD);
      bool _t13FF = prim !00BC (_t13FE);
      if _t13FF {
        _t13FB = true;
      } else {
        bool _t1400;
        real _t1401 = pos12EA[1];
        real _t1402 = pos12EA[1];
        bool _t1403 = prim ==0084 (_t1401, _t1402);
        bool _t1404 = prim !00BC (_t1403);
        if _t1404 {
          _t1400 = true;
        } else {
          real _t1405 = pos12EA[2];
          real _t1406 = pos12EA[2];
          bool _t1407 = prim ==0084 (_t1405, _t1406);
          _t1400 = prim !00BC (_t1407);
        }
        _t13FB = _t1400;
      }
      _t12F7 = _t13FB;
      if _t12F7 {
        die;
      }
      real _t12F8 = prim |()|00B5<$[3]> (step12ED);
      real _t12F9 = prim /0055 (_t12F8, rad0857);
      bool _t12FA = prim >0080 (_t12F9, eps0858);
      if _t12FA {
        int _t12FB = 1;
        nfs12EF = prim +0015 (nfs12EF, _t12FB);
        int _t12FC = 10;
        bool _t12FD = prim >007F (nfs12EF, _t12FC);
        if _t12FD {
          die;
        }
      } else {
        found12EE = true;
        testp12F1 = 1;
      }
    } else {
      vec3 _t12FE = func fStep11AA (pos12EA);
      pos12EA = prim +0017<$[3]> (pos12EA, _t12FE);
      _pos12EB = pos12EA;
      bool _t12FF;
      bool _t1529;
      real _t152A = pos12EA[0];
      real _t152B = pos12EA[0];
      bool _t152C = prim ==0084 (_t152A, _t152B);
      bool _t152D = prim !00BC (_t152C);
      if _t152D {
        _t1529 = true;
      } else {
        bool _t152E;
        real _t152F = pos12EA[1];
        real _t1530 = pos12EA[1];
        bool _t1531 = prim ==0084 (_t152F, _t1530);
        bool _t1532 = prim !00BC (_t1531);
        if _t1532 {
          _t152E = true;
        } else {
          real _t1533 = pos12EA[2];
          real _t1534 = pos12EA[2];
          bool _t1535 = prim ==0084 (_t1533, _t1534);
          _t152E = prim !00BC (_t1535);
        }
        _t1529 = _t152E;
      }
      _t12FF = _t1529;
      if _t12FF {
        die;
      }
      step12ED = prim $zero01BB<$[3]> ();
      real oldE1300 = 0.e0;
      vec3 force1301 = prim $zero01BB<$[3]> ();
      int nn1302 = 0;
      particle[] _t1303 = prim sphere0198<particle> (_pos12EB, rad0857);
      foreach P1304 in _t1303 {
        vec3 _t1305 = P1304.pos12EA;
        vec3 _t1306 = prim -0026<$[3]> (_t1305, pos12EA);
        real _t1307;
        real _t1522 = prim |()|00B5<$[3]> (_t1306);
        real _t1523 = prim /0055 (_t1522, rad0857);
        real _t1524;
        real _t1525 = 0.1e1;
        real _t1526 = prim -0026<$[]> (_t1525, _t1523);
        int _t1527 = 4;
        real _t1528 = prim ^0068 (_t1526, _t1527);
        _t1524 = _t1528;
        _t1307 = _t1524;
        oldE1300 = prim +0017<$[]> (oldE1300, _t1307);
        vec3 _t1308 = P1304.pos12EA;
        vec3 _t1309 = prim -0026<$[3]> (_t1308, pos12EA);
        vec3 _t130A;
        real _t1512 = prim |()|00B5<$[3]> (_t1309);
        real _t1513 = prim /0055 (_t1512, rad0857);
        real _t1514;
        int _t1515 = -4;
        real _t1516 = (real)_t1515;
        real _t1517 = 0.1e1;
        real _t1518 = prim -0026<$[]> (_t1517, _t1513);
        int _t1519 = 3;
        real _t151A = prim ^0068 (_t1518, _t1519);
        real _t151B = prim *0034 (_t1516, _t151A);
        _t1514 = _t151B;
        real _t151C = 0.1e1;
        real _t151D = prim /0055 (_t151C, rad0857);
        real _t151E = prim *0034 (_t1514, _t151D);
        vec3 _t151F = prim *0036<$[3]> (_t151E, _t1309);
        real _t1520 = prim |()|00B5<$[3]> (_t1309);
        vec3 _t1521 = prim /0057<$[3]> (_t151F, _t1520);
        _t130A = _t1521;
        force1301 = prim +0017<$[3]> (force1301, _t130A);
        int _t130B = 1;
        nn1302 = prim +0015 (nn1302, _t130B);
      }
      int _t130C = 0;
      bool _t130D = prim ==0082 (_t130C, nn1302);
      if _t130D {
        real _t130E = 0.5e0;
        real _t130F = prim *0034 (_t130E, rad0857);
        real _t1310 = 0.e0;
        real _t1311 = 0.e0;
        vec3 _t1312 = [_t130F, _t1310, _t1311];
        vec3 npos1313 = prim +0017<$[3]> (pos12EA, _t1312);
        bool _t1314;
        bool _t1497;
        bool _t1498;
        real _t1499 = 0.e0;
        real _t149A = 0.e0;
        real _t149B = 0.e0;
        vec3 _t149C = [_t1499, _t149A, _t149B];
        vec3 mid149D = prim -0026<$[3]> (npos1313, _t149C);
        bool _t149E;
        real _t149F = mid149D[0];
        real _t14A0 = prim |()|00B5<$[]> (_t149F);
        real _t14A1 = 0.4e1;
        bool _t14A2 = prim <=007C (_t14A0, _t14A1);
        if _t14A2 {
          bool _t14A3;
          real _t14A4 = mid149D[1];
          real _t14A5 = prim |()|00B5<$[]> (_t14A4);
          real _t14A6 = 0.4e1;
          bool _t14A7 = prim <=007C (_t14A5, _t14A6);
          if _t14A7 {
            real _t14A8 = mid149D[2];
            real _t14A9 = prim |()|00B5<$[]> (_t14A8);
            real _t14AA = 0.4e1;
            _t14A3 = prim <=007C (_t14A9, _t14AA);
          } else {
            _t14A3 = false;
          }
          _t149E = _t14A3;
        } else {
          _t149E = false;
        }
        _t1498 = _t149E;
        if _t1498 {
          bool _t14AB;
          bool _t14AC;
          bool _t14AD;
          real _t14AE = npos1313[0];
          real _t14AF = npos1313[0];
          bool _t14B0 = prim ==0084 (_t14AE, _t14AF);
          bool _t14B1 = prim !00BC (_t14B0);
          if _t14B1 {
            _t14AD = true;
          } else {
            bool _t14B2;
            real _t14B3 = npos1313[1];
            real _t14B4 = npos1313[1];
            bool _t14B5 = prim ==0084 (_t14B3, _t14B4);
            bool _t14B6 = prim !00BC (_t14B5);
            if _t14B6 {
              _t14B2 = true;
            } else {
              real _t14B7 = npos1313[2];
              real _t14B8 = npos1313[2];
              bool _t14B9 = prim ==0084 (_t14B7, _t14B8);
              _t14B2 = prim !00BC (_t14B9);
            }
            _t14AD = _t14B2;
          }
          _t14AC = _t14AD;
          bool _t14BA = prim !00BC (_t14AC);
          if _t14BA {
            real _t14BB;
            real x14BC = npos1313[0];
            real y14BD = npos1313[1];
            real z14BE = npos1313[2];
            real _t14BF = 0.2e1;
            real _t14C0 = 0.2e1;
            real _t14C1 = 0.3e1;
            int _t14C2 = 2;
            real _t14C3 = prim ^0068 (x14BC, _t14C2);
            real _t14C4 = prim *0034 (_t14C1, _t14C3);
            real _t14C5 = prim -0026<$[]> (_t14C0, _t14C4);
            int _t14C6 = 2;
            real _t14C7 = prim ^0068 (_t14C5, _t14C6);
            real _t14C8 = prim *0034 (_t14BF, _t14C7);
            real _t14C9 = 0.12e2;
            real _t14CA = prim *0034 (_t14C9, x14BC);
            int _t14CB = 3;
            real _t14CC = prim ^0068 (x14BC, _t14CB);
            real _t14CD = prim unary -008B<$[]> (_t14CC);
            real _t14CE = 0.2e1;
            real _t14CF = prim *0034 (_t14CE, x14BC);
            real _t14D0 = prim +0017<$[]> (_t14CD, _t14CF);
            real _t14D1 = prim +0017<$[]> (_t14D0, y14BD);
            real _t14D2 = prim *0034 (_t14CA, _t14D1);
            real _t14D3 = prim -0026<$[]> (_t14C8, _t14D2);
            real _t14D4 = 0.2e1;
            real _t14D5 = 0.2e1;
            real _t14D6 = 0.3e1;
            int _t14D7 = 2;
            real _t14D8 = prim ^0068 (x14BC, _t14D7);
            real _t14D9 = prim *0034 (_t14D6, _t14D8);
            real _t14DA = prim -0026<$[]> (_t14D5, _t14D9);
            real _t14DB = prim *0034 (_t14D4, _t14DA);
            real _t14DC = 0.e0;
            vec3 _t14DD = [_t14D3, _t14DB, _t14DC];
            real _t14DE = 0.2e1;
            real _t14DF = 0.2e1;
            real _t14E0 = 0.3e1;
            int _t14E1 = 2;
            real _t14E2 = prim ^0068 (x14BC, _t14E1);
            real _t14E3 = prim *0034 (_t14E0, _t14E2);
            real _t14E4 = prim -0026<$[]> (_t14DF, _t14E3);
            real _t14E5 = prim *0034 (_t14DE, _t14E4);
            real _t14E6 = 0.2e1;
            real _t14E7 = 0.e0;
            vec3 _t14E8 = [_t14E5, _t14E6, _t14E7];
            real _t14E9 = 0.e0;
            real _t14EA = 0.e0;
            real _t14EB = 0.2e1;
            real _t14EC = prim *0034 (_t14EB, zfuz085C);
            vec3 _t14ED = [_t14E9, _t14EA, _t14EC];
            tensor[3,3] H14EE = [_t14DD, _t14E8, _t14ED];
            real _t14EF = 0.2e1;
            real _t14F0 = 0.2e1;
            real _t14F1 = 0.3e1;
            int _t14F2 = 2;
            real _t14F3 = prim ^0068 (x14BC, _t14F2);
            real _t14F4 = prim *0034 (_t14F1, _t14F3);
            real _t14F5 = prim -0026<$[]> (_t14F0, _t14F4);
            real _t14F6 = prim *0034 (_t14EF, _t14F5);
            int _t14F7 = 3;
            real _t14F8 = prim ^0068 (x14BC, _t14F7);
            real _t14F9 = prim unary -008B<$[]> (_t14F8);
            real _t14FA = 0.2e1;
            real _t14FB = prim *0034 (_t14FA, x14BC);
            real _t14FC = prim +0017<$[]> (_t14F9, _t14FB);
            real _t14FD = prim +0017<$[]> (_t14FC, y14BD);
            real _t14FE = prim *0034 (_t14F6, _t14FD);
            real _t14FF = 0.2e1;
            int _t1500 = 3;
            real _t1501 = prim ^0068 (x14BC, _t1500);
            real _t1502 = prim unary -008B<$[]> (_t1501);
            real _t1503 = 0.2e1;
            real _t1504 = prim *0034 (_t1503, x14BC);
            real _t1505 = prim +0017<$[]> (_t1502, _t1504);
            real _t1506 = prim +0017<$[]> (_t1505, y14BD);
            real _t1507 = prim *0034 (_t14FF, _t1506);
            real _t1508 = 0.2e1;
            real _t1509 = prim *0034 (_t1508, zfuz085C);
            real _t150A = prim *0034 (_t1509, z14BE);
            vec3 g150B = [_t14FE, _t1507, _t150A];
            real[3] _t150C = prim evals009F (H14EE);
            int _t150D = 0;
            real _t150E = prim $sub01C0<real; %3> (_t150C, _t150D);
            real _t150F = prim |()|00B5<$[3]> (g150B);
            real _t1510 = prim +0017<$[]> (fBias085A, _t150F);
            real _t1511 = prim /0055 (_t150E, _t1510);
            _t14BB = _t1511;
            _t14AB = prim >=007E (_t14BB, fStren085B);
          } else {
            _t14AB = false;
          }
          _t1497 = _t14AB;
        } else {
          _t1497 = false;
        }
        _t1314 = _t1497;
        if _t1314 {
          new particle (npos1313, hh12EC);
        }
        continue;
      }
      tensor[3,3] _t1315 = func fPerp122A (pos12EA);
      force1301 = prim •00CE<$[3,3]; $[3]; $[3]> (_t1315, force1301);
      vec3 es1316 = prim *0036<$[3]> (hh12EC, force1301);
      real _t1317 = prim |()|00B5<$[3]> (es1316);
      bool _t1318 = prim >0080 (_t1317, rad0857);
      if _t1318 {
        real _t1319 = prim |()|00B5<$[3]> (es1316);
        real _t131A = prim /0055 (rad0857, _t1319);
        hh12EC = prim *0034 (hh12EC, _t131A);
        real _t131B = prim |()|00B5<$[3]> (es1316);
        real _t131C = prim /0055 (rad0857, _t131B);
        es1316 = prim *0038<$[3]> (es1316, _t131C);
      }
      vec3 samplePos131D = prim +0017<$[3]> (pos12EA, es1316);
      vec3 fs131E = func fStep11AA (samplePos131D);
      real _t131F = prim |()|00B5<$[3]> (fs131E);
      real _t1320 = prim |()|00B5<$[3]> (es1316);
      real _t1321 = prim /0055 (_t131F, _t1320);
      real _t1322 = 0.5e0;
      bool _t1323 = prim >0080 (_t1321, _t1322);
      if _t1323 {
        real _t1324 = 0.5e0;
        hh12EC = prim *0034 (hh12EC, _t1324);
        continue;
      }
      vec3 oldPos1325 = pos12EA;
      vec3 up1326 = prim +0017<$[3]> (fs131E, es1316);
      pos12EA = prim +0017<$[3]> (pos12EA, up1326);
      _pos12EB = pos12EA;
      particle[] _t1327 = prim sphere0198<particle> (_pos12EB, rad0857);
      real accum132C = 0.e0;
      foreach P1328 in _t1327 {
        vec3 _t1329 = P1328.pos12EA;
        vec3 _t132A = prim -0026<$[3]> (pos12EA, _t1329);
        real _t132B;
        real _t1490 = prim |()|00B5<$[3]> (_t132A);
        real _t1491 = prim /0055 (_t1490, rad0857);
        real _t1492;
        real _t1493 = 0.1e1;
        real _t1494 = prim -0026<$[]> (_t1493, _t1491);
        int _t1495 = 4;
        real _t1496 = prim ^0068 (_t1494, _t1495);
        _t1492 = _t1496;
        _t132B = _t1492;
        accum132C = prim +0017<$[]> (accum132C, _t132B);
      }
      real newE132D = accum132C;
      real _t132E = prim -0026<$[]> (newE132D, oldE1300);
      real _t132F = 0.5e0;
      vec3 _t1330 = prim -0026<$[3]> (pos12EA, oldPos1325);
      vec3 _t1331 = prim *0036<$[3]> (_t132F, _t1330);
      vec3 _t1332 = prim unary -008B<$[3]> (force1301);
      real _t1333 = prim •00CE<$[3]; $[3]; $[]> (_t1331, _t1332);
      bool _t1334 = prim >0080 (_t132E, _t1333);
      if _t1334 {
        pos12EA = oldPos1325;
        _pos12EB = pos12EA;
        real _t1335 = 0.5e0;
        hh12EC = prim *0034 (hh12EC, _t1335);
        continue;
      }
      real _t1336 = 0.11e1;
      hh12EC = prim *0034 (hh12EC, _t1336);
      step12ED = up1326;
      bool _t1337;
      bool _t1483;
      real _t1484 = pos12EA[0];
      real _t1485 = pos12EA[0];
      bool _t1486 = prim ==0084 (_t1484, _t1485);
      bool _t1487 = prim !00BC (_t1486);
      if _t1487 {
        _t1483 = true;
      } else {
        bool _t1488;
        real _t1489 = pos12EA[1];
        real _t148A = pos12EA[1];
        bool _t148B = prim ==0084 (_t1489, _t148A);
        bool _t148C = prim !00BC (_t148B);
        if _t148C {
          _t1488 = true;
        } else {
          real _t148D = pos12EA[2];
          real _t148E = pos12EA[2];
          bool _t148F = prim ==0084 (_t148D, _t148E);
          _t1488 = prim !00BC (_t148F);
        }
        _t1483 = _t1488;
      }
      _t1337 = _t1483;
      if _t1337 {
        die;
      }
      int _t1338 = 5;
      bool _t1339 = prim <0079 (nn1302, _t1338);
      if _t1339 {
        real _t133A = 0.5e0;
        real _t133B = prim *0034 (_t133A, rad0857);
        vec3 _t133C = prim normalize0137<$[3]> (es1316);
        vec3 _t133D = prim *0036<$[3]> (_t133B, _t133C);
        vec3 npos133E = prim +0017<$[3]> (pos12EA, _t133D);
        bool _t133F;
        bool _t1408;
        bool _t1409;
        real _t140A = 0.e0;
        real _t140B = 0.e0;
        real _t140C = 0.e0;
        vec3 _t140D = [_t140A, _t140B, _t140C];
        vec3 mid140E = prim -0026<$[3]> (npos133E, _t140D);
        bool _t140F;
        real _t1410 = mid140E[0];
        real _t1411 = prim |()|00B5<$[]> (_t1410);
        real _t1412 = 0.4e1;
        bool _t1413 = prim <=007C (_t1411, _t1412);
        if _t1413 {
          bool _t1414;
          real _t1415 = mid140E[1];
          real _t1416 = prim |()|00B5<$[]> (_t1415);
          real _t1417 = 0.4e1;
          bool _t1418 = prim <=007C (_t1416, _t1417);
          if _t1418 {
            real _t1419 = mid140E[2];
            real _t141A = prim |()|00B5<$[]> (_t1419);
            real _t141B = 0.4e1;
            _t1414 = prim <=007C (_t141A, _t141B);
          } else {
            _t1414 = false;
          }
          _t140F = _t1414;
        } else {
          _t140F = false;
        }
        _t1409 = _t140F;
        if _t1409 {
          bool _t141C;
          bool _t141D;
          bool _t141E;
          real _t141F = npos133E[0];
          real _t1420 = npos133E[0];
          bool _t1421 = prim ==0084 (_t141F, _t1420);
          bool _t1422 = prim !00BC (_t1421);
          if _t1422 {
            _t141E = true;
          } else {
            bool _t1423;
            real _t1424 = npos133E[1];
            real _t1425 = npos133E[1];
            bool _t1426 = prim ==0084 (_t1424, _t1425);
            bool _t1427 = prim !00BC (_t1426);
            if _t1427 {
              _t1423 = true;
            } else {
              real _t1428 = npos133E[2];
              real _t1429 = npos133E[2];
              bool _t142A = prim ==0084 (_t1428, _t1429);
              _t1423 = prim !00BC (_t142A);
            }
            _t141E = _t1423;
          }
          _t141D = _t141E;
          bool _t142B = prim !00BC (_t141D);
          if _t142B {
            real _t142C;
            real x142D = npos133E[0];
            real y142E = npos133E[1];
            real z142F = npos133E[2];
            real _t1430 = 0.2e1;
            real _t1431 = 0.2e1;
            real _t1432 = 0.3e1;
            int _t1433 = 2;
            real _t1434 = prim ^0068 (x142D, _t1433);
            real _t1435 = prim *0034 (_t1432, _t1434);
            real _t1436 = prim -0026<$[]> (_t1431, _t1435);
            int _t1437 = 2;
            real _t1438 = prim ^0068 (_t1436, _t1437);
            real _t1439 = prim *0034 (_t1430, _t1438);
            real _t143A = 0.12e2;
            real _t143B = prim *0034 (_t143A, x142D);
            int _t143C = 3;
            real _t143D = prim ^0068 (x142D, _t143C);
            real _t143E = prim unary -008B<$[]> (_t143D);
            real _t143F = 0.2e1;
            real _t1440 = prim *0034 (_t143F, x142D);
            real _t1441 = prim +0017<$[]> (_t143E, _t1440);
            real _t1442 = prim +0017<$[]> (_t1441, y142E);
            real _t1443 = prim *0034 (_t143B, _t1442);
            real _t1444 = prim -0026<$[]> (_t1439, _t1443);
            real _t1445 = 0.2e1;
            real _t1446 = 0.2e1;
            real _t1447 = 0.3e1;
            int _t1448 = 2;
            real _t1449 = prim ^0068 (x142D, _t1448);
            real _t144A = prim *0034 (_t1447, _t1449);
            real _t144B = prim -0026<$[]> (_t1446, _t144A);
            real _t144C = prim *0034 (_t1445, _t144B);
            real _t144D = 0.e0;
            vec3 _t144E = [_t1444, _t144C, _t144D];
            real _t144F = 0.2e1;
            real _t1450 = 0.2e1;
            real _t1451 = 0.3e1;
            int _t1452 = 2;
            real _t1453 = prim ^0068 (x142D, _t1452);
            real _t1454 = prim *0034 (_t1451, _t1453);
            real _t1455 = prim -0026<$[]> (_t1450, _t1454);
            real _t1456 = prim *0034 (_t144F, _t1455);
            real _t1457 = 0.2e1;
            real _t1458 = 0.e0;
            vec3 _t1459 = [_t1456, _t1457, _t1458];
            real _t145A = 0.e0;
            real _t145B = 0.e0;
            real _t145C = 0.2e1;
            real _t145D = prim *0034 (_t145C, zfuz085C);
            vec3 _t145E = [_t145A, _t145B, _t145D];
            tensor[3,3] H145F = [_t144E, _t1459, _t145E];
            real _t1460 = 0.2e1;
            real _t1461 = 0.2e1;
            real _t1462 = 0.3e1;
            int _t1463 = 2;
            real _t1464 = prim ^0068 (x142D, _t1463);
            real _t1465 = prim *0034 (_t1462, _t1464);
            real _t1466 = prim -0026<$[]> (_t1461, _t1465);
            real _t1467 = prim *0034 (_t1460, _t1466);
            int _t1468 = 3;
            real _t1469 = prim ^0068 (x142D, _t1468);
            real _t146A = prim unary -008B<$[]> (_t1469);
            real _t146B = 0.2e1;
            real _t146C = prim *0034 (_t146B, x142D);
            real _t146D = prim +0017<$[]> (_t146A, _t146C);
            real _t146E = prim +0017<$[]> (_t146D, y142E);
            real _t146F = prim *0034 (_t1467, _t146E);
            real _t1470 = 0.2e1;
            int _t1471 = 3;
            real _t1472 = prim ^0068 (x142D, _t1471);
            real _t1473 = prim unary -008B<$[]> (_t1472);
            real _t1474 = 0.2e1;
            real _t1475 = prim *0034 (_t1474, x142D);
            real _t1476 = prim +0017<$[]> (_t1473, _t1475);
            real _t1477 = prim +0017<$[]> (_t1476, y142E);
            real _t1478 = prim *0034 (_t1470, _t1477);
            real _t1479 = 0.2e1;
            real _t147A = prim *0034 (_t1479, zfuz085C);
            real _t147B = prim *0034 (_t147A, z142F);
            vec3 g147C = [_t146F, _t1478, _t147B];
            real[3] _t147D = prim evals009F (H145F);
            int _t147E = 0;
            real _t147F = prim $sub01C0<real; %3> (_t147D, _t147E);
            real _t1480 = prim |()|00B5<$[3]> (g147C);
            real _t1481 = prim +0017<$[]> (fBias085A, _t1480);
            real _t1482 = prim /0055 (_t147F, _t1481);
            _t142C = _t1482;
            _t141C = prim >=007E (_t142C, fStren085B);
          } else {
            _t141C = false;
          }
          _t1408 = _t141C;
        } else {
          _t1408 = false;
        }
        _t133F = _t1408;
        if _t133F {
          new particle (npos133E, hh12EC);
        }
      }
    }
  }
}
collection {
  foreach x1340 in ipos085D {
    real _t1341 = 0.1e1;
    new particle (x1340, _t1341);
  }
}
update {
  int res1342= sum<int> { (P1345) => {
      int _t1346 = P1345.test12F0;
      return _t1346;
    } (P1343, P1343)
  | P1343 in all };
  int num1348 = res1342;
  int res1349= max<int> { (P134C) => {
      int _t134D = P134C.steps12F2;
      return _t134D;
    } (P134A, P134A)
  | P134A in all };
  int steps134F = res1349;
  int res1350= sum<int> { (P1353) => {
      int _t1354 = P1353.testp12F1;
      return _t1354;
    } (P1351, P1351)
  | P1351 in all };
  int numFound1356 = res1350;
  bool res1357= all { (P135A) => {
      bool _t135B = P135A.found12EE;
      return _t135B;
    } (P1358, P1358)
  | P1358 in all };
  bool allFound135D = res1357;
  real res135E= max<real> { (P1362) => {
      vec3 _t1363 = P1362.step12ED;
      real _t1364 = prim |()|00B5<$[3]> (_t1363);
      return _t1364;
    } (P135F, P135F)
  | P135F in all };
  real maxStep1366 = res135E;
  string _t1367 = "One run:";
  string _t1368 = " and ";
  real _t1369 = prim /0055 (maxStep1366, rad0857);
  string _t136A = " and ";
  real _t136B = prim /0055 (maxStep1366, rad0857);
  bool _t136C = prim <007A (_t136B, eps0858);
  string _t136D = " and ";
  string _t136E = " of ";
  string _t136F = "\n";
  print (_t1367, allFound135D, _t1368, _t1369, _t136A, _t136C, _t136D, numFound1356, _t136E, num1348, _t136F);
  if allFound135D {
    real _t1370 = prim /0055 (maxStep1366, rad0857);
    bool _t1371 = prim <007A (_t1370, eps0858);
    if _t1371 {
      string _t1372 = "CONVERGED!\n";
      print (_t1372);
      stabilize_all;
    }
  }
  int _t1373 = 5000;
  bool _t1374 = prim >007F (steps134F, _t1373);
  if _t1374 {
    stabilize_all;
  }
}
/* Program end */
/* Simplified Program (after after simplify fields) start */
properties: GlobalInit,StabilizeAll,GlobalReduce,StrandSets,GlobalUpdate,NewStrands,StrandCommunication,StrandsMayDie,HasInputs,HasGlobals,ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
input FemData:Mesh meshData0847;
input FemData:Space 0space0853_intermedateGlobal0854;
input FemData:FemFunc 0data0855_intermedateGlobal0856;
input real rad0857 = <default>;
input real eps0858 = <default>;
input real v00859 = <default>;
input real fBias085A = <default>;
input real fStren085B = <default>;
input real zfuz085C = <default>;
input vec3[] ipos085D;
constants {
  rad0857 = 0.1e-1;
  eps0858 = 0.1e-1;
  v00859 = 0.625e-1;
  fBias085A = 0.1e-1;
  fStren085B = 0.1e-1;
  zfuz085C = 0.1e-1;
}
function int[2]#6 nextCell40932 (int faceIdx0D91, int cell0D92, Femdata: Mesh mesh0D93)
{
  int _t0D94 = -1;
  bool _t0D95 = prim ==0082 (faceIdx0D91, _t0D94);
  if _t0D95 {
    int _t0D96 = -1;
    int _t0D97 = -1;
    int[2] _t0D98 = {_t0D96, _t0D97};
    return _t0D98;
  } else {
    int _t0D99 = 8;
    int _t0D9A = prim *0033 (cell0D92, _t0D99);
    int _t0D9B = 2;
    int _t0D9C = prim *0033 (faceIdx0D91, _t0D9B);
    int _t0D9D = prim +0015 (_t0D9A, _t0D9C);
    int[2] _t0D9E = extractFemItemN((mesh0D93, _t0D9D),CellFaceCell(Mesh),);
    return _t0D9E;
  }
}
function vec3#3 fStep11AA (vec3 s11AB)
{
  real x11AC = s11AB[0];
  real y11AD = s11AB[1];
  real z11AE = s11AB[2];
  real _t11AF = 0.2e1;
  real _t11B0 = 0.2e1;
  real _t11B1 = 0.3e1;
  int _t11B2 = 2;
  real _t11B3 = prim ^0068 (x11AC, _t11B2);
  real _t11B4 = prim *0034 (_t11B1, _t11B3);
  real _t11B5 = prim -0026<$[]> (_t11B0, _t11B4);
  int _t11B6 = 2;
  real _t11B7 = prim ^0068 (_t11B5, _t11B6);
  real _t11B8 = prim *0034 (_t11AF, _t11B7);
  real _t11B9 = 0.12e2;
  real _t11BA = prim *0034 (_t11B9, x11AC);
  int _t11BB = 3;
  real _t11BC = prim ^0068 (x11AC, _t11BB);
  real _t11BD = prim unary -008B<$[]> (_t11BC);
  real _t11BE = 0.2e1;
  real _t11BF = prim *0034 (_t11BE, x11AC);
  real _t11C0 = prim +0017<$[]> (_t11BD, _t11BF);
  real _t11C1 = prim +0017<$[]> (_t11C0, y11AD);
  real _t11C2 = prim *0034 (_t11BA, _t11C1);
  real _t11C3 = prim -0026<$[]> (_t11B8, _t11C2);
  real _t11C4 = 0.2e1;
  real _t11C5 = 0.2e1;
  real _t11C6 = 0.3e1;
  int _t11C7 = 2;
  real _t11C8 = prim ^0068 (x11AC, _t11C7);
  real _t11C9 = prim *0034 (_t11C6, _t11C8);
  real _t11CA = prim -0026<$[]> (_t11C5, _t11C9);
  real _t11CB = prim *0034 (_t11C4, _t11CA);
  real _t11CC = 0.e0;
  vec3 _t11CD = [_t11C3, _t11CB, _t11CC];
  real _t11CE = 0.2e1;
  real _t11CF = 0.2e1;
  real _t11D0 = 0.3e1;
  int _t11D1 = 2;
  real _t11D2 = prim ^0068 (x11AC, _t11D1);
  real _t11D3 = prim *0034 (_t11D0, _t11D2);
  real _t11D4 = prim -0026<$[]> (_t11CF, _t11D3);
  real _t11D5 = prim *0034 (_t11CE, _t11D4);
  real _t11D6 = 0.2e1;
  real _t11D7 = 0.e0;
  vec3 _t11D8 = [_t11D5, _t11D6, _t11D7];
  real _t11D9 = 0.e0;
  real _t11DA = 0.e0;
  real _t11DB = 0.2e1;
  real _t11DC = prim *0034 (_t11DB, zfuz085C);
  vec3 _t11DD = [_t11D9, _t11DA, _t11DC];
  tensor[3,3] H11DE = [_t11CD, _t11D8, _t11DD];
  real _t11DF = 0.2e1;
  real _t11E0 = 0.2e1;
  real _t11E1 = 0.3e1;
  int _t11E2 = 2;
  real _t11E3 = prim ^0068 (x11AC, _t11E2);
  real _t11E4 = prim *0034 (_t11E1, _t11E3);
  real _t11E5 = prim -0026<$[]> (_t11E0, _t11E4);
  real _t11E6 = prim *0034 (_t11DF, _t11E5);
  int _t11E7 = 3;
  real _t11E8 = prim ^0068 (x11AC, _t11E7);
  real _t11E9 = prim unary -008B<$[]> (_t11E8);
  real _t11EA = 0.2e1;
  real _t11EB = prim *0034 (_t11EA, x11AC);
  real _t11EC = prim +0017<$[]> (_t11E9, _t11EB);
  real _t11ED = prim +0017<$[]> (_t11EC, y11AD);
  real _t11EE = prim *0034 (_t11E6, _t11ED);
  real _t11EF = 0.2e1;
  int _t11F0 = 3;
  real _t11F1 = prim ^0068 (x11AC, _t11F0);
  real _t11F2 = prim unary -008B<$[]> (_t11F1);
  real _t11F3 = 0.2e1;
  real _t11F4 = prim *0034 (_t11F3, x11AC);
  real _t11F5 = prim +0017<$[]> (_t11F2, _t11F4);
  real _t11F6 = prim +0017<$[]> (_t11F5, y11AD);
  real _t11F7 = prim *0034 (_t11EF, _t11F6);
  real _t11F8 = 0.2e1;
  real _t11F9 = prim *0034 (_t11F8, zfuz085C);
  real _t11FA = prim *0034 (_t11F9, z11AE);
  vec3 g11FB = [_t11EE, _t11F7, _t11FA];
  vec3[3] E11FC = prim evecs00A0 (H11DE);
  real[3] L11FD = prim evals009F (H11DE);
  real _t11FE = 0.1e1;
  int _t11FF = 0;
  real _t1200 = prim $sub01C0<real; %3> (L11FD, _t11FF);
  real _t1201 = prim /0055 (_t11FE, _t1200);
  real _t1202 = prim unary -008B<$[]> (_t1201);
  int _t1203 = 0;
  vec3 _t1204 = prim $sub01C0<vec3; %3> (E11FC, _t1203);
  vec3 _t1205 = prim *0036<$[3]> (_t1202, _t1204);
  int _t1206 = 0;
  vec3 _t1207 = prim $sub01C0<vec3; %3> (E11FC, _t1206);
  tensor[3,3] _t1208 = prim ⊗00E5<$[3]; $[3]; $[3,3]> (_t1205, _t1207);
  vec3 up1209 = prim •00CE<$[3,3]; $[3]; $[3]> (_t1208, g11FB);
  bool _t120A;
  real _t120B = up1209[0];
  real _t120C = up1209[0];
  bool _t120D = prim ==0084 (_t120B, _t120C);
  bool _t120E = prim !00BC (_t120D);
  if _t120E {
    _t120A = true;
  } else {
    bool _t120F;
    real _t1210 = up1209[1];
    real _t1211 = up1209[1];
    bool _t1212 = prim ==0084 (_t1210, _t1211);
    bool _t1213 = prim !00BC (_t1212);
    if _t1213 {
      _t120F = true;
    } else {
      real _t1214 = up1209[2];
      real _t1215 = up1209[2];
      bool _t1216 = prim ==0084 (_t1214, _t1215);
      _t120F = prim !00BC (_t1216);
    }
    _t120A = _t120F;
  }
  if _t120A {
    real _t1217 = +inf;
    real _t1218 = +inf;
    real _t1219 = +inf;
    vec3 _t121A = [_t1217, _t1218, _t1219];
    return _t121A;
  }
  return up1209;
}
function tensor[3,3]#1 fPerp122A (vec3 s122B)
{
  real x122C = s122B[0];
  real y122D = s122B[1];
  real z122E = s122B[2];
  real _t122F = 0.2e1;
  real _t1230 = 0.2e1;
  real _t1231 = 0.3e1;
  int _t1232 = 2;
  real _t1233 = prim ^0068 (x122C, _t1232);
  real _t1234 = prim *0034 (_t1231, _t1233);
  real _t1235 = prim -0026<$[]> (_t1230, _t1234);
  int _t1236 = 2;
  real _t1237 = prim ^0068 (_t1235, _t1236);
  real _t1238 = prim *0034 (_t122F, _t1237);
  real _t1239 = 0.12e2;
  real _t123A = prim *0034 (_t1239, x122C);
  int _t123B = 3;
  real _t123C = prim ^0068 (x122C, _t123B);
  real _t123D = prim unary -008B<$[]> (_t123C);
  real _t123E = 0.2e1;
  real _t123F = prim *0034 (_t123E, x122C);
  real _t1240 = prim +0017<$[]> (_t123D, _t123F);
  real _t1241 = prim +0017<$[]> (_t1240, y122D);
  real _t1242 = prim *0034 (_t123A, _t1241);
  real _t1243 = prim -0026<$[]> (_t1238, _t1242);
  real _t1244 = 0.2e1;
  real _t1245 = 0.2e1;
  real _t1246 = 0.3e1;
  int _t1247 = 2;
  real _t1248 = prim ^0068 (x122C, _t1247);
  real _t1249 = prim *0034 (_t1246, _t1248);
  real _t124A = prim -0026<$[]> (_t1245, _t1249);
  real _t124B = prim *0034 (_t1244, _t124A);
  real _t124C = 0.e0;
  vec3 _t124D = [_t1243, _t124B, _t124C];
  real _t124E = 0.2e1;
  real _t124F = 0.2e1;
  real _t1250 = 0.3e1;
  int _t1251 = 2;
  real _t1252 = prim ^0068 (x122C, _t1251);
  real _t1253 = prim *0034 (_t1250, _t1252);
  real _t1254 = prim -0026<$[]> (_t124F, _t1253);
  real _t1255 = prim *0034 (_t124E, _t1254);
  real _t1256 = 0.2e1;
  real _t1257 = 0.e0;
  vec3 _t1258 = [_t1255, _t1256, _t1257];
  real _t1259 = 0.e0;
  real _t125A = 0.e0;
  real _t125B = 0.2e1;
  real _t125C = prim *0034 (_t125B, zfuz085C);
  vec3 _t125D = [_t1259, _t125A, _t125C];
  tensor[3,3] H125E = [_t124D, _t1258, _t125D];
  vec3[3] _t125F = prim evecs00A0 (H125E);
  int _t1260 = 0;
  vec3 E21261 = prim $sub01C0<vec3; %3> (_t125F, _t1260);
  tensor[3,3] _t1262 = prim $id01B9<%3> ();
  tensor[3,3] _t1263 = prim ⊗00E5<$[3]; $[3]; $[3,3]> (E21261, E21261);
  tensor[3,3] m1264 = prim -0026<$[3,3]> (_t1262, _t1263);
  real t1265 = prim :00FC<$[3,3]; $[3,3]; $[]> (m1264, m1264);
  bool _t1266 = prim ==0084 (t1265, t1265);
  bool _t1267 = prim !00BC (_t1266);
  if _t1267 {
    tensor[3,3] _t1268 = prim $zero01BB<$[3,3]> ();
    return _t1268;
  }
  return m1264;
}
globalInit {
  int _t084B = 0;
  int _t0849 = 1;
  int _t084D = extractFemItem(NumCell(Mesh), int, meshData0847);
  int _t084C = prim -0024 (_t084D, _t0849);
  int[] _t0850 = prim $range01C3 (_t084B, _t084C);
  Femdata: MeshCell[] _t0851 = {};
  foreach _t084F in _t0850 {
    Femdata: MeshCell _t0852 = loadFem(MeshCell, meshData0847, _t084F);
    _t0851 = prim @0010<Femdata: MeshCell> (_t0851, _t0852);
  }
}
strand particle (vec3 pos012E8, real hh012E9) in 3D {
  output vec3 pos12EA;
  output vec3 _pos12EB;
  real hh12EC;
  vec3 step12ED;
  bool found12EE;
  int nfs12EF;
  int test12F0;
  int testp12F1;
  int steps12F2;
  {
    pos12EA = pos012E8;
    _pos12EB = pos12EA;
    hh12EC = hh012E9;
    step12ED = prim $zero01BB<$[3]> ();
    found12EE = false;
    nfs12EF = 0;
    test12F0 = 1;
    testp12F1 = 0;
    steps12F2 = 0;
  }
  update
  {
    int _t12F3 = 1;
    steps12F2 = prim +0015 (steps12F2, _t12F3);
    bool _t12F4;
    bool _t1536;
    bool _t1537;
    real _t1538 = 0.e0;
    real _t1539 = 0.e0;
    real _t153A = 0.e0;
    vec3 _t153B = [_t1538, _t1539, _t153A];
    vec3 mid153C = prim -0026<$[3]> (pos12EA, _t153B);
    bool _t153D;
    real _t153E = mid153C[0];
    real _t153F = prim |()|00B5<$[]> (_t153E);
    real _t1540 = 0.4e1;
    bool _t1541 = prim <=007C (_t153F, _t1540);
    if _t1541 {
      bool _t1542;
      real _t1543 = mid153C[1];
      real _t1544 = prim |()|00B5<$[]> (_t1543);
      real _t1545 = 0.4e1;
      bool _t1546 = prim <=007C (_t1544, _t1545);
      if _t1546 {
        real _t1547 = mid153C[2];
        real _t1548 = prim |()|00B5<$[]> (_t1547);
        real _t1549 = 0.4e1;
        _t1542 = prim <=007C (_t1548, _t1549);
      } else {
        _t1542 = false;
      }
      _t153D = _t1542;
    } else {
      _t153D = false;
    }
    _t1537 = _t153D;
    if _t1537 {
      bool _t154A;
      bool _t154B;
      bool _t154C;
      real _t154D = pos12EA[0];
      real _t154E = pos12EA[0];
      bool _t154F = prim ==0084 (_t154D, _t154E);
      bool _t1550 = prim !00BC (_t154F);
      if _t1550 {
        _t154C = true;
      } else {
        bool _t1551;
        real _t1552 = pos12EA[1];
        real _t1553 = pos12EA[1];
        bool _t1554 = prim ==0084 (_t1552, _t1553);
        bool _t1555 = prim !00BC (_t1554);
        if _t1555 {
          _t1551 = true;
        } else {
          real _t1556 = pos12EA[2];
          real _t1557 = pos12EA[2];
          bool _t1558 = prim ==0084 (_t1556, _t1557);
          _t1551 = prim !00BC (_t1558);
        }
        _t154C = _t1551;
      }
      _t154B = _t154C;
      bool _t1559 = prim !00BC (_t154B);
      if _t1559 {
        real _t155A;
        real x155B = pos12EA[0];
        real y155C = pos12EA[1];
        real z155D = pos12EA[2];
        real _t155E = 0.2e1;
        real _t155F = 0.2e1;
        real _t1560 = 0.3e1;
        int _t1561 = 2;
        real _t1562 = prim ^0068 (x155B, _t1561);
        real _t1563 = prim *0034 (_t1560, _t1562);
        real _t1564 = prim -0026<$[]> (_t155F, _t1563);
        int _t1565 = 2;
        real _t1566 = prim ^0068 (_t1564, _t1565);
        real _t1567 = prim *0034 (_t155E, _t1566);
        real _t1568 = 0.12e2;
        real _t1569 = prim *0034 (_t1568, x155B);
        int _t156A = 3;
        real _t156B = prim ^0068 (x155B, _t156A);
        real _t156C = prim unary -008B<$[]> (_t156B);
        real _t156D = 0.2e1;
        real _t156E = prim *0034 (_t156D, x155B);
        real _t156F = prim +0017<$[]> (_t156C, _t156E);
        real _t1570 = prim +0017<$[]> (_t156F, y155C);
        real _t1571 = prim *0034 (_t1569, _t1570);
        real _t1572 = prim -0026<$[]> (_t1567, _t1571);
        real _t1573 = 0.2e1;
        real _t1574 = 0.2e1;
        real _t1575 = 0.3e1;
        int _t1576 = 2;
        real _t1577 = prim ^0068 (x155B, _t1576);
        real _t1578 = prim *0034 (_t1575, _t1577);
        real _t1579 = prim -0026<$[]> (_t1574, _t1578);
        real _t157A = prim *0034 (_t1573, _t1579);
        real _t157B = 0.e0;
        vec3 _t157C = [_t1572, _t157A, _t157B];
        real _t157D = 0.2e1;
        real _t157E = 0.2e1;
        real _t157F = 0.3e1;
        int _t1580 = 2;
        real _t1581 = prim ^0068 (x155B, _t1580);
        real _t1582 = prim *0034 (_t157F, _t1581);
        real _t1583 = prim -0026<$[]> (_t157E, _t1582);
        real _t1584 = prim *0034 (_t157D, _t1583);
        real _t1585 = 0.2e1;
        real _t1586 = 0.e0;
        vec3 _t1587 = [_t1584, _t1585, _t1586];
        real _t1588 = 0.e0;
        real _t1589 = 0.e0;
        real _t158A = 0.2e1;
        real _t158B = prim *0034 (_t158A, zfuz085C);
        vec3 _t158C = [_t1588, _t1589, _t158B];
        tensor[3,3] H158D = [_t157C, _t1587, _t158C];
        real _t158E = 0.2e1;
        real _t158F = 0.2e1;
        real _t1590 = 0.3e1;
        int _t1591 = 2;
        real _t1592 = prim ^0068 (x155B, _t1591);
        real _t1593 = prim *0034 (_t1590, _t1592);
        real _t1594 = prim -0026<$[]> (_t158F, _t1593);
        real _t1595 = prim *0034 (_t158E, _t1594);
        int _t1596 = 3;
        real _t1597 = prim ^0068 (x155B, _t1596);
        real _t1598 = prim unary -008B<$[]> (_t1597);
        real _t1599 = 0.2e1;
        real _t159A = prim *0034 (_t1599, x155B);
        real _t159B = prim +0017<$[]> (_t1598, _t159A);
        real _t159C = prim +0017<$[]> (_t159B, y155C);
        real _t159D = prim *0034 (_t1595, _t159C);
        real _t159E = 0.2e1;
        int _t159F = 3;
        real _t15A0 = prim ^0068 (x155B, _t159F);
        real _t15A1 = prim unary -008B<$[]> (_t15A0);
        real _t15A2 = 0.2e1;
        real _t15A3 = prim *0034 (_t15A2, x155B);
        real _t15A4 = prim +0017<$[]> (_t15A1, _t15A3);
        real _t15A5 = prim +0017<$[]> (_t15A4, y155C);
        real _t15A6 = prim *0034 (_t159E, _t15A5);
        real _t15A7 = 0.2e1;
        real _t15A8 = prim *0034 (_t15A7, zfuz085C);
        real _t15A9 = prim *0034 (_t15A8, z155D);
        vec3 g15AA = [_t159D, _t15A6, _t15A9];
        real[3] _t15AB = prim evals009F (H158D);
        int _t15AC = 0;
        real _t15AD = prim $sub01C0<real; %3> (_t15AB, _t15AC);
        real _t15AE = prim |()|00B5<$[3]> (g15AA);
        real _t15AF = prim +0017<$[]> (fBias085A, _t15AE);
        real _t15B0 = prim /0055 (_t15AD, _t15AF);
        _t155A = _t15B0;
        _t154A = prim >=007E (_t155A, fStren085B);
      } else {
        _t154A = false;
      }
      _t1536 = _t154A;
    } else {
      _t1536 = false;
    }
    _t12F4 = _t1536;
    bool _t12F5 = prim !00BC (_t12F4);
    if _t12F5 {
      die;
    }
    bool _t12F6 = prim !00BC (found12EE);
    if _t12F6 {
      step12ED = func fStep11AA (pos12EA);
      pos12EA = prim +0017<$[3]> (pos12EA, step12ED);
      _pos12EB = pos12EA;
      bool _t12F7;
      bool _t13FB;
      real _t13FC = pos12EA[0];
      real _t13FD = pos12EA[0];
      bool _t13FE = prim ==0084 (_t13FC, _t13FD);
      bool _t13FF = prim !00BC (_t13FE);
      if _t13FF {
        _t13FB = true;
      } else {
        bool _t1400;
        real _t1401 = pos12EA[1];
        real _t1402 = pos12EA[1];
        bool _t1403 = prim ==0084 (_t1401, _t1402);
        bool _t1404 = prim !00BC (_t1403);
        if _t1404 {
          _t1400 = true;
        } else {
          real _t1405 = pos12EA[2];
          real _t1406 = pos12EA[2];
          bool _t1407 = prim ==0084 (_t1405, _t1406);
          _t1400 = prim !00BC (_t1407);
        }
        _t13FB = _t1400;
      }
      _t12F7 = _t13FB;
      if _t12F7 {
        die;
      }
      real _t12F8 = prim |()|00B5<$[3]> (step12ED);
      real _t12F9 = prim /0055 (_t12F8, rad0857);
      bool _t12FA = prim >0080 (_t12F9, eps0858);
      if _t12FA {
        int _t12FB = 1;
        nfs12EF = prim +0015 (nfs12EF, _t12FB);
        int _t12FC = 10;
        bool _t12FD = prim >007F (nfs12EF, _t12FC);
        if _t12FD {
          die;
        }
      } else {
        found12EE = true;
        testp12F1 = 1;
      }
    } else {
      vec3 _t12FE = func fStep11AA (pos12EA);
      pos12EA = prim +0017<$[3]> (pos12EA, _t12FE);
      _pos12EB = pos12EA;
      bool _t12FF;
      bool _t1529;
      real _t152A = pos12EA[0];
      real _t152B = pos12EA[0];
      bool _t152C = prim ==0084 (_t152A, _t152B);
      bool _t152D = prim !00BC (_t152C);
      if _t152D {
        _t1529 = true;
      } else {
        bool _t152E;
        real _t152F = pos12EA[1];
        real _t1530 = pos12EA[1];
        bool _t1531 = prim ==0084 (_t152F, _t1530);
        bool _t1532 = prim !00BC (_t1531);
        if _t1532 {
          _t152E = true;
        } else {
          real _t1533 = pos12EA[2];
          real _t1534 = pos12EA[2];
          bool _t1535 = prim ==0084 (_t1533, _t1534);
          _t152E = prim !00BC (_t1535);
        }
        _t1529 = _t152E;
      }
      _t12FF = _t1529;
      if _t12FF {
        die;
      }
      step12ED = prim $zero01BB<$[3]> ();
      real oldE1300 = 0.e0;
      vec3 force1301 = prim $zero01BB<$[3]> ();
      int nn1302 = 0;
      particle[] _t1303 = prim sphere0198<particle> (_pos12EB, rad0857);
      foreach P1304 in _t1303 {
        vec3 _t1305 = P1304.pos12EA;
        vec3 _t1306 = prim -0026<$[3]> (_t1305, pos12EA);
        real _t1307;
        real _t1522 = prim |()|00B5<$[3]> (_t1306);
        real _t1523 = prim /0055 (_t1522, rad0857);
        real _t1524;
        real _t1525 = 0.1e1;
        real _t1526 = prim -0026<$[]> (_t1525, _t1523);
        int _t1527 = 4;
        real _t1528 = prim ^0068 (_t1526, _t1527);
        _t1524 = _t1528;
        _t1307 = _t1524;
        oldE1300 = prim +0017<$[]> (oldE1300, _t1307);
        vec3 _t1308 = P1304.pos12EA;
        vec3 _t1309 = prim -0026<$[3]> (_t1308, pos12EA);
        vec3 _t130A;
        real _t1512 = prim |()|00B5<$[3]> (_t1309);
        real _t1513 = prim /0055 (_t1512, rad0857);
        real _t1514;
        int _t1515 = -4;
        real _t1516 = (real)_t1515;
        real _t1517 = 0.1e1;
        real _t1518 = prim -0026<$[]> (_t1517, _t1513);
        int _t1519 = 3;
        real _t151A = prim ^0068 (_t1518, _t1519);
        real _t151B = prim *0034 (_t1516, _t151A);
        _t1514 = _t151B;
        real _t151C = 0.1e1;
        real _t151D = prim /0055 (_t151C, rad0857);
        real _t151E = prim *0034 (_t1514, _t151D);
        vec3 _t151F = prim *0036<$[3]> (_t151E, _t1309);
        real _t1520 = prim |()|00B5<$[3]> (_t1309);
        vec3 _t1521 = prim /0057<$[3]> (_t151F, _t1520);
        _t130A = _t1521;
        force1301 = prim +0017<$[3]> (force1301, _t130A);
        int _t130B = 1;
        nn1302 = prim +0015 (nn1302, _t130B);
      }
      int _t130C = 0;
      bool _t130D = prim ==0082 (_t130C, nn1302);
      if _t130D {
        real _t130E = 0.5e0;
        real _t130F = prim *0034 (_t130E, rad0857);
        real _t1310 = 0.e0;
        real _t1311 = 0.e0;
        vec3 _t1312 = [_t130F, _t1310, _t1311];
        vec3 npos1313 = prim +0017<$[3]> (pos12EA, _t1312);
        bool _t1314;
        bool _t1497;
        bool _t1498;
        real _t1499 = 0.e0;
        real _t149A = 0.e0;
        real _t149B = 0.e0;
        vec3 _t149C = [_t1499, _t149A, _t149B];
        vec3 mid149D = prim -0026<$[3]> (npos1313, _t149C);
        bool _t149E;
        real _t149F = mid149D[0];
        real _t14A0 = prim |()|00B5<$[]> (_t149F);
        real _t14A1 = 0.4e1;
        bool _t14A2 = prim <=007C (_t14A0, _t14A1);
        if _t14A2 {
          bool _t14A3;
          real _t14A4 = mid149D[1];
          real _t14A5 = prim |()|00B5<$[]> (_t14A4);
          real _t14A6 = 0.4e1;
          bool _t14A7 = prim <=007C (_t14A5, _t14A6);
          if _t14A7 {
            real _t14A8 = mid149D[2];
            real _t14A9 = prim |()|00B5<$[]> (_t14A8);
            real _t14AA = 0.4e1;
            _t14A3 = prim <=007C (_t14A9, _t14AA);
          } else {
            _t14A3 = false;
          }
          _t149E = _t14A3;
        } else {
          _t149E = false;
        }
        _t1498 = _t149E;
        if _t1498 {
          bool _t14AB;
          bool _t14AC;
          bool _t14AD;
          real _t14AE = npos1313[0];
          real _t14AF = npos1313[0];
          bool _t14B0 = prim ==0084 (_t14AE, _t14AF);
          bool _t14B1 = prim !00BC (_t14B0);
          if _t14B1 {
            _t14AD = true;
          } else {
            bool _t14B2;
            real _t14B3 = npos1313[1];
            real _t14B4 = npos1313[1];
            bool _t14B5 = prim ==0084 (_t14B3, _t14B4);
            bool _t14B6 = prim !00BC (_t14B5);
            if _t14B6 {
              _t14B2 = true;
            } else {
              real _t14B7 = npos1313[2];
              real _t14B8 = npos1313[2];
              bool _t14B9 = prim ==0084 (_t14B7, _t14B8);
              _t14B2 = prim !00BC (_t14B9);
            }
            _t14AD = _t14B2;
          }
          _t14AC = _t14AD;
          bool _t14BA = prim !00BC (_t14AC);
          if _t14BA {
            real _t14BB;
            real x14BC = npos1313[0];
            real y14BD = npos1313[1];
            real z14BE = npos1313[2];
            real _t14BF = 0.2e1;
            real _t14C0 = 0.2e1;
            real _t14C1 = 0.3e1;
            int _t14C2 = 2;
            real _t14C3 = prim ^0068 (x14BC, _t14C2);
            real _t14C4 = prim *0034 (_t14C1, _t14C3);
            real _t14C5 = prim -0026<$[]> (_t14C0, _t14C4);
            int _t14C6 = 2;
            real _t14C7 = prim ^0068 (_t14C5, _t14C6);
            real _t14C8 = prim *0034 (_t14BF, _t14C7);
            real _t14C9 = 0.12e2;
            real _t14CA = prim *0034 (_t14C9, x14BC);
            int _t14CB = 3;
            real _t14CC = prim ^0068 (x14BC, _t14CB);
            real _t14CD = prim unary -008B<$[]> (_t14CC);
            real _t14CE = 0.2e1;
            real _t14CF = prim *0034 (_t14CE, x14BC);
            real _t14D0 = prim +0017<$[]> (_t14CD, _t14CF);
            real _t14D1 = prim +0017<$[]> (_t14D0, y14BD);
            real _t14D2 = prim *0034 (_t14CA, _t14D1);
            real _t14D3 = prim -0026<$[]> (_t14C8, _t14D2);
            real _t14D4 = 0.2e1;
            real _t14D5 = 0.2e1;
            real _t14D6 = 0.3e1;
            int _t14D7 = 2;
            real _t14D8 = prim ^0068 (x14BC, _t14D7);
            real _t14D9 = prim *0034 (_t14D6, _t14D8);
            real _t14DA = prim -0026<$[]> (_t14D5, _t14D9);
            real _t14DB = prim *0034 (_t14D4, _t14DA);
            real _t14DC = 0.e0;
            vec3 _t14DD = [_t14D3, _t14DB, _t14DC];
            real _t14DE = 0.2e1;
            real _t14DF = 0.2e1;
            real _t14E0 = 0.3e1;
            int _t14E1 = 2;
            real _t14E2 = prim ^0068 (x14BC, _t14E1);
            real _t14E3 = prim *0034 (_t14E0, _t14E2);
            real _t14E4 = prim -0026<$[]> (_t14DF, _t14E3);
            real _t14E5 = prim *0034 (_t14DE, _t14E4);
            real _t14E6 = 0.2e1;
            real _t14E7 = 0.e0;
            vec3 _t14E8 = [_t14E5, _t14E6, _t14E7];
            real _t14E9 = 0.e0;
            real _t14EA = 0.e0;
            real _t14EB = 0.2e1;
            real _t14EC = prim *0034 (_t14EB, zfuz085C);
            vec3 _t14ED = [_t14E9, _t14EA, _t14EC];
            tensor[3,3] H14EE = [_t14DD, _t14E8, _t14ED];
            real _t14EF = 0.2e1;
            real _t14F0 = 0.2e1;
            real _t14F1 = 0.3e1;
            int _t14F2 = 2;
            real _t14F3 = prim ^0068 (x14BC, _t14F2);
            real _t14F4 = prim *0034 (_t14F1, _t14F3);
            real _t14F5 = prim -0026<$[]> (_t14F0, _t14F4);
            real _t14F6 = prim *0034 (_t14EF, _t14F5);
            int _t14F7 = 3;
            real _t14F8 = prim ^0068 (x14BC, _t14F7);
            real _t14F9 = prim unary -008B<$[]> (_t14F8);
            real _t14FA = 0.2e1;
            real _t14FB = prim *0034 (_t14FA, x14BC);
            real _t14FC = prim +0017<$[]> (_t14F9, _t14FB);
            real _t14FD = prim +0017<$[]> (_t14FC, y14BD);
            real _t14FE = prim *0034 (_t14F6, _t14FD);
            real _t14FF = 0.2e1;
            int _t1500 = 3;
            real _t1501 = prim ^0068 (x14BC, _t1500);
            real _t1502 = prim unary -008B<$[]> (_t1501);
            real _t1503 = 0.2e1;
            real _t1504 = prim *0034 (_t1503, x14BC);
            real _t1505 = prim +0017<$[]> (_t1502, _t1504);
            real _t1506 = prim +0017<$[]> (_t1505, y14BD);
            real _t1507 = prim *0034 (_t14FF, _t1506);
            real _t1508 = 0.2e1;
            real _t1509 = prim *0034 (_t1508, zfuz085C);
            real _t150A = prim *0034 (_t1509, z14BE);
            vec3 g150B = [_t14FE, _t1507, _t150A];
            real[3] _t150C = prim evals009F (H14EE);
            int _t150D = 0;
            real _t150E = prim $sub01C0<real; %3> (_t150C, _t150D);
            real _t150F = prim |()|00B5<$[3]> (g150B);
            real _t1510 = prim +0017<$[]> (fBias085A, _t150F);
            real _t1511 = prim /0055 (_t150E, _t1510);
            _t14BB = _t1511;
            _t14AB = prim >=007E (_t14BB, fStren085B);
          } else {
            _t14AB = false;
          }
          _t1497 = _t14AB;
        } else {
          _t1497 = false;
        }
        _t1314 = _t1497;
        if _t1314 {
          new particle (npos1313, hh12EC);
        }
        continue;
      }
      tensor[3,3] _t1315 = func fPerp122A (pos12EA);
      force1301 = prim •00CE<$[3,3]; $[3]; $[3]> (_t1315, force1301);
      vec3 es1316 = prim *0036<$[3]> (hh12EC, force1301);
      real _t1317 = prim |()|00B5<$[3]> (es1316);
      bool _t1318 = prim >0080 (_t1317, rad0857);
      if _t1318 {
        real _t1319 = prim |()|00B5<$[3]> (es1316);
        real _t131A = prim /0055 (rad0857, _t1319);
        hh12EC = prim *0034 (hh12EC, _t131A);
        real _t131B = prim |()|00B5<$[3]> (es1316);
        real _t131C = prim /0055 (rad0857, _t131B);
        es1316 = prim *0038<$[3]> (es1316, _t131C);
      }
      vec3 samplePos131D = prim +0017<$[3]> (pos12EA, es1316);
      vec3 fs131E = func fStep11AA (samplePos131D);
      real _t131F = prim |()|00B5<$[3]> (fs131E);
      real _t1320 = prim |()|00B5<$[3]> (es1316);
      real _t1321 = prim /0055 (_t131F, _t1320);
      real _t1322 = 0.5e0;
      bool _t1323 = prim >0080 (_t1321, _t1322);
      if _t1323 {
        real _t1324 = 0.5e0;
        hh12EC = prim *0034 (hh12EC, _t1324);
        continue;
      }
      vec3 oldPos1325 = pos12EA;
      vec3 up1326 = prim +0017<$[3]> (fs131E, es1316);
      pos12EA = prim +0017<$[3]> (pos12EA, up1326);
      _pos12EB = pos12EA;
      particle[] _t1327 = prim sphere0198<particle> (_pos12EB, rad0857);
      real accum132C = 0.e0;
      foreach P1328 in _t1327 {
        vec3 _t1329 = P1328.pos12EA;
        vec3 _t132A = prim -0026<$[3]> (pos12EA, _t1329);
        real _t132B;
        real _t1490 = prim |()|00B5<$[3]> (_t132A);
        real _t1491 = prim /0055 (_t1490, rad0857);
        real _t1492;
        real _t1493 = 0.1e1;
        real _t1494 = prim -0026<$[]> (_t1493, _t1491);
        int _t1495 = 4;
        real _t1496 = prim ^0068 (_t1494, _t1495);
        _t1492 = _t1496;
        _t132B = _t1492;
        accum132C = prim +0017<$[]> (accum132C, _t132B);
      }
      real newE132D = accum132C;
      real _t132E = prim -0026<$[]> (newE132D, oldE1300);
      real _t132F = 0.5e0;
      vec3 _t1330 = prim -0026<$[3]> (pos12EA, oldPos1325);
      vec3 _t1331 = prim *0036<$[3]> (_t132F, _t1330);
      vec3 _t1332 = prim unary -008B<$[3]> (force1301);
      real _t1333 = prim •00CE<$[3]; $[3]; $[]> (_t1331, _t1332);
      bool _t1334 = prim >0080 (_t132E, _t1333);
      if _t1334 {
        pos12EA = oldPos1325;
        _pos12EB = pos12EA;
        real _t1335 = 0.5e0;
        hh12EC = prim *0034 (hh12EC, _t1335);
        continue;
      }
      real _t1336 = 0.11e1;
      hh12EC = prim *0034 (hh12EC, _t1336);
      step12ED = up1326;
      bool _t1337;
      bool _t1483;
      real _t1484 = pos12EA[0];
      real _t1485 = pos12EA[0];
      bool _t1486 = prim ==0084 (_t1484, _t1485);
      bool _t1487 = prim !00BC (_t1486);
      if _t1487 {
        _t1483 = true;
      } else {
        bool _t1488;
        real _t1489 = pos12EA[1];
        real _t148A = pos12EA[1];
        bool _t148B = prim ==0084 (_t1489, _t148A);
        bool _t148C = prim !00BC (_t148B);
        if _t148C {
          _t1488 = true;
        } else {
          real _t148D = pos12EA[2];
          real _t148E = pos12EA[2];
          bool _t148F = prim ==0084 (_t148D, _t148E);
          _t1488 = prim !00BC (_t148F);
        }
        _t1483 = _t1488;
      }
      _t1337 = _t1483;
      if _t1337 {
        die;
      }
      int _t1338 = 5;
      bool _t1339 = prim <0079 (nn1302, _t1338);
      if _t1339 {
        real _t133A = 0.5e0;
        real _t133B = prim *0034 (_t133A, rad0857);
        vec3 _t133C = prim normalize0137<$[3]> (es1316);
        vec3 _t133D = prim *0036<$[3]> (_t133B, _t133C);
        vec3 npos133E = prim +0017<$[3]> (pos12EA, _t133D);
        bool _t133F;
        bool _t1408;
        bool _t1409;
        real _t140A = 0.e0;
        real _t140B = 0.e0;
        real _t140C = 0.e0;
        vec3 _t140D = [_t140A, _t140B, _t140C];
        vec3 mid140E = prim -0026<$[3]> (npos133E, _t140D);
        bool _t140F;
        real _t1410 = mid140E[0];
        real _t1411 = prim |()|00B5<$[]> (_t1410);
        real _t1412 = 0.4e1;
        bool _t1413 = prim <=007C (_t1411, _t1412);
        if _t1413 {
          bool _t1414;
          real _t1415 = mid140E[1];
          real _t1416 = prim |()|00B5<$[]> (_t1415);
          real _t1417 = 0.4e1;
          bool _t1418 = prim <=007C (_t1416, _t1417);
          if _t1418 {
            real _t1419 = mid140E[2];
            real _t141A = prim |()|00B5<$[]> (_t1419);
            real _t141B = 0.4e1;
            _t1414 = prim <=007C (_t141A, _t141B);
          } else {
            _t1414 = false;
          }
          _t140F = _t1414;
        } else {
          _t140F = false;
        }
        _t1409 = _t140F;
        if _t1409 {
          bool _t141C;
          bool _t141D;
          bool _t141E;
          real _t141F = npos133E[0];
          real _t1420 = npos133E[0];
          bool _t1421 = prim ==0084 (_t141F, _t1420);
          bool _t1422 = prim !00BC (_t1421);
          if _t1422 {
            _t141E = true;
          } else {
            bool _t1423;
            real _t1424 = npos133E[1];
            real _t1425 = npos133E[1];
            bool _t1426 = prim ==0084 (_t1424, _t1425);
            bool _t1427 = prim !00BC (_t1426);
            if _t1427 {
              _t1423 = true;
            } else {
              real _t1428 = npos133E[2];
              real _t1429 = npos133E[2];
              bool _t142A = prim ==0084 (_t1428, _t1429);
              _t1423 = prim !00BC (_t142A);
            }
            _t141E = _t1423;
          }
          _t141D = _t141E;
          bool _t142B = prim !00BC (_t141D);
          if _t142B {
            real _t142C;
            real x142D = npos133E[0];
            real y142E = npos133E[1];
            real z142F = npos133E[2];
            real _t1430 = 0.2e1;
            real _t1431 = 0.2e1;
            real _t1432 = 0.3e1;
            int _t1433 = 2;
            real _t1434 = prim ^0068 (x142D, _t1433);
            real _t1435 = prim *0034 (_t1432, _t1434);
            real _t1436 = prim -0026<$[]> (_t1431, _t1435);
            int _t1437 = 2;
            real _t1438 = prim ^0068 (_t1436, _t1437);
            real _t1439 = prim *0034 (_t1430, _t1438);
            real _t143A = 0.12e2;
            real _t143B = prim *0034 (_t143A, x142D);
            int _t143C = 3;
            real _t143D = prim ^0068 (x142D, _t143C);
            real _t143E = prim unary -008B<$[]> (_t143D);
            real _t143F = 0.2e1;
            real _t1440 = prim *0034 (_t143F, x142D);
            real _t1441 = prim +0017<$[]> (_t143E, _t1440);
            real _t1442 = prim +0017<$[]> (_t1441, y142E);
            real _t1443 = prim *0034 (_t143B, _t1442);
            real _t1444 = prim -0026<$[]> (_t1439, _t1443);
            real _t1445 = 0.2e1;
            real _t1446 = 0.2e1;
            real _t1447 = 0.3e1;
            int _t1448 = 2;
            real _t1449 = prim ^0068 (x142D, _t1448);
            real _t144A = prim *0034 (_t1447, _t1449);
            real _t144B = prim -0026<$[]> (_t1446, _t144A);
            real _t144C = prim *0034 (_t1445, _t144B);
            real _t144D = 0.e0;
            vec3 _t144E = [_t1444, _t144C, _t144D];
            real _t144F = 0.2e1;
            real _t1450 = 0.2e1;
            real _t1451 = 0.3e1;
            int _t1452 = 2;
            real _t1453 = prim ^0068 (x142D, _t1452);
            real _t1454 = prim *0034 (_t1451, _t1453);
            real _t1455 = prim -0026<$[]> (_t1450, _t1454);
            real _t1456 = prim *0034 (_t144F, _t1455);
            real _t1457 = 0.2e1;
            real _t1458 = 0.e0;
            vec3 _t1459 = [_t1456, _t1457, _t1458];
            real _t145A = 0.e0;
            real _t145B = 0.e0;
            real _t145C = 0.2e1;
            real _t145D = prim *0034 (_t145C, zfuz085C);
            vec3 _t145E = [_t145A, _t145B, _t145D];
            tensor[3,3] H145F = [_t144E, _t1459, _t145E];
            real _t1460 = 0.2e1;
            real _t1461 = 0.2e1;
            real _t1462 = 0.3e1;
            int _t1463 = 2;
            real _t1464 = prim ^0068 (x142D, _t1463);
            real _t1465 = prim *0034 (_t1462, _t1464);
            real _t1466 = prim -0026<$[]> (_t1461, _t1465);
            real _t1467 = prim *0034 (_t1460, _t1466);
            int _t1468 = 3;
            real _t1469 = prim ^0068 (x142D, _t1468);
            real _t146A = prim unary -008B<$[]> (_t1469);
            real _t146B = 0.2e1;
            real _t146C = prim *0034 (_t146B, x142D);
            real _t146D = prim +0017<$[]> (_t146A, _t146C);
            real _t146E = prim +0017<$[]> (_t146D, y142E);
            real _t146F = prim *0034 (_t1467, _t146E);
            real _t1470 = 0.2e1;
            int _t1471 = 3;
            real _t1472 = prim ^0068 (x142D, _t1471);
            real _t1473 = prim unary -008B<$[]> (_t1472);
            real _t1474 = 0.2e1;
            real _t1475 = prim *0034 (_t1474, x142D);
            real _t1476 = prim +0017<$[]> (_t1473, _t1475);
            real _t1477 = prim +0017<$[]> (_t1476, y142E);
            real _t1478 = prim *0034 (_t1470, _t1477);
            real _t1479 = 0.2e1;
            real _t147A = prim *0034 (_t1479, zfuz085C);
            real _t147B = prim *0034 (_t147A, z142F);
            vec3 g147C = [_t146F, _t1478, _t147B];
            real[3] _t147D = prim evals009F (H145F);
            int _t147E = 0;
            real _t147F = prim $sub01C0<real; %3> (_t147D, _t147E);
            real _t1480 = prim |()|00B5<$[3]> (g147C);
            real _t1481 = prim +0017<$[]> (fBias085A, _t1480);
            real _t1482 = prim /0055 (_t147F, _t1481);
            _t142C = _t1482;
            _t141C = prim >=007E (_t142C, fStren085B);
          } else {
            _t141C = false;
          }
          _t1408 = _t141C;
        } else {
          _t1408 = false;
        }
        _t133F = _t1408;
        if _t133F {
          new particle (npos133E, hh12EC);
        }
      }
    }
  }
}
collection {
  foreach x1340 in ipos085D {
    real _t1341 = 0.1e1;
    new particle (x1340, _t1341);
  }
}
update {
  int res1342= sum<int> { (P1345) => {
      int _t1346 = P1345.test12F0;
      return _t1346;
    } (P1343, P1343)
  | P1343 in all };
  int num1348 = res1342;
  int res1349= max<int> { (P134C) => {
      int _t134D = P134C.steps12F2;
      return _t134D;
    } (P134A, P134A)
  | P134A in all };
  int steps134F = res1349;
  int res1350= sum<int> { (P1353) => {
      int _t1354 = P1353.testp12F1;
      return _t1354;
    } (P1351, P1351)
  | P1351 in all };
  int numFound1356 = res1350;
  bool res1357= all { (P135A) => {
      bool _t135B = P135A.found12EE;
      return _t135B;
    } (P1358, P1358)
  | P1358 in all };
  bool allFound135D = res1357;
  real res135E= max<real> { (P1362) => {
      vec3 _t1363 = P1362.step12ED;
      real _t1364 = prim |()|00B5<$[3]> (_t1363);
      return _t1364;
    } (P135F, P135F)
  | P135F in all };
  real maxStep1366 = res135E;
  string _t1367 = "One run:";
  string _t1368 = " and ";
  real _t1369 = prim /0055 (maxStep1366, rad0857);
  string _t136A = " and ";
  real _t136B = prim /0055 (maxStep1366, rad0857);
  bool _t136C = prim <007A (_t136B, eps0858);
  string _t136D = " and ";
  string _t136E = " of ";
  string _t136F = "\n";
  print (_t1367, allFound135D, _t1368, _t1369, _t136A, _t136C, _t136D, numFound1356, _t136E, num1348, _t136F);
  if allFound135D {
    real _t1370 = prim /0055 (maxStep1366, rad0857);
    bool _t1371 = prim <007A (_t1370, eps0858);
    if _t1371 {
      string _t1372 = "CONVERGED!\n";
      print (_t1372);
      stabilize_all;
    }
  }
  int _t1373 = 5000;
  bool _t1374 = prim >007F (steps134F, _t1373);
  if _t1374 {
    stabilize_all;
  }
}
/* Program end */
/* Simplified Program (after after simplify variables) start */
properties: GlobalInit,StabilizeAll,GlobalReduce,StrandSets,GlobalUpdate,NewStrands,StrandCommunication,StrandsMayDie,HasInputs,HasGlobals,ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
input FemData:Mesh meshData0847;
input FemData:Space 0space0853_intermedateGlobal0854;
input FemData:FemFunc 0data0855_intermedateGlobal0856;
input real rad0857 = <default>;
input real eps0858 = <default>;
input real v00859 = <default>;
input real fBias085A = <default>;
input real fStren085B = <default>;
input real zfuz085C = <default>;
input vec3[] ipos085D;
constants {
  rad0857 = 0.1e-1;
  eps0858 = 0.1e-1;
  v00859 = 0.625e-1;
  fBias085A = 0.1e-1;
  fStren085B = 0.1e-1;
  zfuz085C = 0.1e-1;
}
function int[2]#6 nextCell40932 (int faceIdx0D91, int cell0D92, Femdata: Mesh mesh0D93)
{
  int _t0D94 = -1;
  bool _t0D95 = prim ==0082 (faceIdx0D91, _t0D94);
  if _t0D95 {
    int _t0D96 = -1;
    int _t0D97 = -1;
    int[2] _t0D98 = {_t0D96, _t0D97};
    return _t0D98;
  } else {
    int _t0D99 = 8;
    int _t0D9A = prim *0033 (cell0D92, _t0D99);
    int _t0D9B = 2;
    int _t0D9C = prim *0033 (faceIdx0D91, _t0D9B);
    int _t0D9D = prim +0015 (_t0D9A, _t0D9C);
    int[2] _t0D9E = extractFemItemN((mesh0D93, _t0D9D),CellFaceCell(Mesh),);
    return _t0D9E;
  }
}
function vec3#3 fStep11AA (vec3 s11AB)
{
  real x11AC = s11AB[0];
  real y11AD = s11AB[1];
  real z11AE = s11AB[2];
  real _t11AF = 0.2e1;
  real _t11B0 = 0.2e1;
  real _t11B1 = 0.3e1;
  int _t11B2 = 2;
  real _t11B3 = prim ^0068 (x11AC, _t11B2);
  real _t11B4 = prim *0034 (_t11B1, _t11B3);
  real _t11B5 = prim -0026<$[]> (_t11B0, _t11B4);
  int _t11B6 = 2;
  real _t11B7 = prim ^0068 (_t11B5, _t11B6);
  real _t11B8 = prim *0034 (_t11AF, _t11B7);
  real _t11B9 = 0.12e2;
  real _t11BA = prim *0034 (_t11B9, x11AC);
  int _t11BB = 3;
  real _t11BC = prim ^0068 (x11AC, _t11BB);
  real _t11BD = prim unary -008B<$[]> (_t11BC);
  real _t11BE = 0.2e1;
  real _t11BF = prim *0034 (_t11BE, x11AC);
  real _t11C0 = prim +0017<$[]> (_t11BD, _t11BF);
  real _t11C1 = prim +0017<$[]> (_t11C0, y11AD);
  real _t11C2 = prim *0034 (_t11BA, _t11C1);
  real _t11C3 = prim -0026<$[]> (_t11B8, _t11C2);
  real _t11C4 = 0.2e1;
  real _t11C5 = 0.2e1;
  real _t11C6 = 0.3e1;
  int _t11C7 = 2;
  real _t11C8 = prim ^0068 (x11AC, _t11C7);
  real _t11C9 = prim *0034 (_t11C6, _t11C8);
  real _t11CA = prim -0026<$[]> (_t11C5, _t11C9);
  real _t11CB = prim *0034 (_t11C4, _t11CA);
  real _t11CC = 0.e0;
  vec3 _t11CD = [_t11C3, _t11CB, _t11CC];
  real _t11CE = 0.2e1;
  real _t11CF = 0.2e1;
  real _t11D0 = 0.3e1;
  int _t11D1 = 2;
  real _t11D2 = prim ^0068 (x11AC, _t11D1);
  real _t11D3 = prim *0034 (_t11D0, _t11D2);
  real _t11D4 = prim -0026<$[]> (_t11CF, _t11D3);
  real _t11D5 = prim *0034 (_t11CE, _t11D4);
  real _t11D6 = 0.2e1;
  real _t11D7 = 0.e0;
  vec3 _t11D8 = [_t11D5, _t11D6, _t11D7];
  real _t11D9 = 0.e0;
  real _t11DA = 0.e0;
  real _t11DB = 0.2e1;
  real _t11DC = prim *0034 (_t11DB, zfuz085C);
  vec3 _t11DD = [_t11D9, _t11DA, _t11DC];
  tensor[3,3] H11DE = [_t11CD, _t11D8, _t11DD];
  real _t11DF = 0.2e1;
  real _t11E0 = 0.2e1;
  real _t11E1 = 0.3e1;
  int _t11E2 = 2;
  real _t11E3 = prim ^0068 (x11AC, _t11E2);
  real _t11E4 = prim *0034 (_t11E1, _t11E3);
  real _t11E5 = prim -0026<$[]> (_t11E0, _t11E4);
  real _t11E6 = prim *0034 (_t11DF, _t11E5);
  int _t11E7 = 3;
  real _t11E8 = prim ^0068 (x11AC, _t11E7);
  real _t11E9 = prim unary -008B<$[]> (_t11E8);
  real _t11EA = 0.2e1;
  real _t11EB = prim *0034 (_t11EA, x11AC);
  real _t11EC = prim +0017<$[]> (_t11E9, _t11EB);
  real _t11ED = prim +0017<$[]> (_t11EC, y11AD);
  real _t11EE = prim *0034 (_t11E6, _t11ED);
  real _t11EF = 0.2e1;
  int _t11F0 = 3;
  real _t11F1 = prim ^0068 (x11AC, _t11F0);
  real _t11F2 = prim unary -008B<$[]> (_t11F1);
  real _t11F3 = 0.2e1;
  real _t11F4 = prim *0034 (_t11F3, x11AC);
  real _t11F5 = prim +0017<$[]> (_t11F2, _t11F4);
  real _t11F6 = prim +0017<$[]> (_t11F5, y11AD);
  real _t11F7 = prim *0034 (_t11EF, _t11F6);
  real _t11F8 = 0.2e1;
  real _t11F9 = prim *0034 (_t11F8, zfuz085C);
  real _t11FA = prim *0034 (_t11F9, z11AE);
  vec3 g11FB = [_t11EE, _t11F7, _t11FA];
  vec3[3] E11FC = prim evecs00A0 (H11DE);
  real[3] L11FD = prim evals009F (H11DE);
  real _t11FE = 0.1e1;
  int _t11FF = 0;
  real _t1200 = prim $sub01C0<real; %3> (L11FD, _t11FF);
  real _t1201 = prim /0055 (_t11FE, _t1200);
  real _t1202 = prim unary -008B<$[]> (_t1201);
  int _t1203 = 0;
  vec3 _t1204 = prim $sub01C0<vec3; %3> (E11FC, _t1203);
  vec3 _t1205 = prim *0036<$[3]> (_t1202, _t1204);
  int _t1206 = 0;
  vec3 _t1207 = prim $sub01C0<vec3; %3> (E11FC, _t1206);
  tensor[3,3] _t1208 = prim ⊗00E5<$[3]; $[3]; $[3,3]> (_t1205, _t1207);
  vec3 up1209 = prim •00CE<$[3,3]; $[3]; $[3]> (_t1208, g11FB);
  bool _t120A;
  real _t120B = up1209[0];
  real _t120C = up1209[0];
  bool _t120D = prim ==0084 (_t120B, _t120C);
  bool _t120E = prim !00BC (_t120D);
  if _t120E {
    _t120A = true;
  } else {
    bool _t120F;
    real _t1210 = up1209[1];
    real _t1211 = up1209[1];
    bool _t1212 = prim ==0084 (_t1210, _t1211);
    bool _t1213 = prim !00BC (_t1212);
    if _t1213 {
      _t120F = true;
    } else {
      real _t1214 = up1209[2];
      real _t1215 = up1209[2];
      bool _t1216 = prim ==0084 (_t1214, _t1215);
      _t120F = prim !00BC (_t1216);
    }
    _t120A = _t120F;
  }
  if _t120A {
    real _t1217 = +inf;
    real _t1218 = +inf;
    real _t1219 = +inf;
    vec3 _t121A = [_t1217, _t1218, _t1219];
    return _t121A;
  }
  return up1209;
}
function tensor[3,3]#1 fPerp122A (vec3 s122B)
{
  real x122C = s122B[0];
  real y122D = s122B[1];
  real z122E = s122B[2];
  real _t122F = 0.2e1;
  real _t1230 = 0.2e1;
  real _t1231 = 0.3e1;
  int _t1232 = 2;
  real _t1233 = prim ^0068 (x122C, _t1232);
  real _t1234 = prim *0034 (_t1231, _t1233);
  real _t1235 = prim -0026<$[]> (_t1230, _t1234);
  int _t1236 = 2;
  real _t1237 = prim ^0068 (_t1235, _t1236);
  real _t1238 = prim *0034 (_t122F, _t1237);
  real _t1239 = 0.12e2;
  real _t123A = prim *0034 (_t1239, x122C);
  int _t123B = 3;
  real _t123C = prim ^0068 (x122C, _t123B);
  real _t123D = prim unary -008B<$[]> (_t123C);
  real _t123E = 0.2e1;
  real _t123F = prim *0034 (_t123E, x122C);
  real _t1240 = prim +0017<$[]> (_t123D, _t123F);
  real _t1241 = prim +0017<$[]> (_t1240, y122D);
  real _t1242 = prim *0034 (_t123A, _t1241);
  real _t1243 = prim -0026<$[]> (_t1238, _t1242);
  real _t1244 = 0.2e1;
  real _t1245 = 0.2e1;
  real _t1246 = 0.3e1;
  int _t1247 = 2;
  real _t1248 = prim ^0068 (x122C, _t1247);
  real _t1249 = prim *0034 (_t1246, _t1248);
  real _t124A = prim -0026<$[]> (_t1245, _t1249);
  real _t124B = prim *0034 (_t1244, _t124A);
  real _t124C = 0.e0;
  vec3 _t124D = [_t1243, _t124B, _t124C];
  real _t124E = 0.2e1;
  real _t124F = 0.2e1;
  real _t1250 = 0.3e1;
  int _t1251 = 2;
  real _t1252 = prim ^0068 (x122C, _t1251);
  real _t1253 = prim *0034 (_t1250, _t1252);
  real _t1254 = prim -0026<$[]> (_t124F, _t1253);
  real _t1255 = prim *0034 (_t124E, _t1254);
  real _t1256 = 0.2e1;
  real _t1257 = 0.e0;
  vec3 _t1258 = [_t1255, _t1256, _t1257];
  real _t1259 = 0.e0;
  real _t125A = 0.e0;
  real _t125B = 0.2e1;
  real _t125C = prim *0034 (_t125B, zfuz085C);
  vec3 _t125D = [_t1259, _t125A, _t125C];
  tensor[3,3] H125E = [_t124D, _t1258, _t125D];
  vec3[3] _t125F = prim evecs00A0 (H125E);
  int _t1260 = 0;
  vec3 E21261 = prim $sub01C0<vec3; %3> (_t125F, _t1260);
  tensor[3,3] _t1262 = prim $id01B9<%3> ();
  tensor[3,3] _t1263 = prim ⊗00E5<$[3]; $[3]; $[3,3]> (E21261, E21261);
  tensor[3,3] m1264 = prim -0026<$[3,3]> (_t1262, _t1263);
  real t1265 = prim :00FC<$[3,3]; $[3,3]; $[]> (m1264, m1264);
  bool _t1266 = prim ==0084 (t1265, t1265);
  bool _t1267 = prim !00BC (_t1266);
  if _t1267 {
    tensor[3,3] _t1268 = prim $zero01BB<$[3,3]> ();
    return _t1268;
  }
  return m1264;
}
globalInit {
  int _t084B = 0;
  int _t0849 = 1;
  int _t084D = extractFemItem(NumCell(Mesh), int, meshData0847);
  int _t084C = prim -0024 (_t084D, _t0849);
  int[] _t0850 = prim $range01C3 (_t084B, _t084C);
  Femdata: MeshCell[] _t0851 = {};
  foreach _t084F in _t0850 {
    Femdata: MeshCell _t0852 = loadFem(MeshCell, meshData0847, _t084F);
    _t0851 = prim @0010<Femdata: MeshCell> (_t0851, _t0852);
  }
}
strand particle (vec3 pos012E8, real hh012E9) in 3D {
  output vec3 pos12EA;
  output vec3 _pos12EB;
  real hh12EC;
  vec3 step12ED;
  bool found12EE;
  int nfs12EF;
  int test12F0;
  int testp12F1;
  int steps12F2;
  {
    pos12EA = pos012E8;
    _pos12EB = pos12EA;
    hh12EC = hh012E9;
    step12ED = prim $zero01BB<$[3]> ();
    found12EE = false;
    nfs12EF = 0;
    test12F0 = 1;
    testp12F1 = 0;
    steps12F2 = 0;
  }
  update
  {
    int _t12F3 = 1;
    steps12F2 = prim +0015 (steps12F2, _t12F3);
    bool _t12F4;
    bool _t1536;
    bool _t1537;
    real _t1538 = 0.e0;
    real _t1539 = 0.e0;
    real _t153A = 0.e0;
    vec3 _t153B = [_t1538, _t1539, _t153A];
    vec3 mid153C = prim -0026<$[3]> (pos12EA, _t153B);
    bool _t153D;
    real _t153E = mid153C[0];
    real _t153F = prim |()|00B5<$[]> (_t153E);
    real _t1540 = 0.4e1;
    bool _t1541 = prim <=007C (_t153F, _t1540);
    if _t1541 {
      bool _t1542;
      real _t1543 = mid153C[1];
      real _t1544 = prim |()|00B5<$[]> (_t1543);
      real _t1545 = 0.4e1;
      bool _t1546 = prim <=007C (_t1544, _t1545);
      if _t1546 {
        real _t1547 = mid153C[2];
        real _t1548 = prim |()|00B5<$[]> (_t1547);
        real _t1549 = 0.4e1;
        _t1542 = prim <=007C (_t1548, _t1549);
      } else {
        _t1542 = false;
      }
      _t153D = _t1542;
    } else {
      _t153D = false;
    }
    _t1537 = _t153D;
    if _t1537 {
      bool _t154A;
      bool _t154B;
      bool _t154C;
      real _t154D = pos12EA[0];
      real _t154E = pos12EA[0];
      bool _t154F = prim ==0084 (_t154D, _t154E);
      bool _t1550 = prim !00BC (_t154F);
      if _t1550 {
        _t154C = true;
      } else {
        bool _t1551;
        real _t1552 = pos12EA[1];
        real _t1553 = pos12EA[1];
        bool _t1554 = prim ==0084 (_t1552, _t1553);
        bool _t1555 = prim !00BC (_t1554);
        if _t1555 {
          _t1551 = true;
        } else {
          real _t1556 = pos12EA[2];
          real _t1557 = pos12EA[2];
          bool _t1558 = prim ==0084 (_t1556, _t1557);
          _t1551 = prim !00BC (_t1558);
        }
        _t154C = _t1551;
      }
      _t154B = _t154C;
      bool _t1559 = prim !00BC (_t154B);
      if _t1559 {
        real _t155A;
        real x155B = pos12EA[0];
        real y155C = pos12EA[1];
        real z155D = pos12EA[2];
        real _t155E = 0.2e1;
        real _t155F = 0.2e1;
        real _t1560 = 0.3e1;
        int _t1561 = 2;
        real _t1562 = prim ^0068 (x155B, _t1561);
        real _t1563 = prim *0034 (_t1560, _t1562);
        real _t1564 = prim -0026<$[]> (_t155F, _t1563);
        int _t1565 = 2;
        real _t1566 = prim ^0068 (_t1564, _t1565);
        real _t1567 = prim *0034 (_t155E, _t1566);
        real _t1568 = 0.12e2;
        real _t1569 = prim *0034 (_t1568, x155B);
        int _t156A = 3;
        real _t156B = prim ^0068 (x155B, _t156A);
        real _t156C = prim unary -008B<$[]> (_t156B);
        real _t156D = 0.2e1;
        real _t156E = prim *0034 (_t156D, x155B);
        real _t156F = prim +0017<$[]> (_t156C, _t156E);
        real _t1570 = prim +0017<$[]> (_t156F, y155C);
        real _t1571 = prim *0034 (_t1569, _t1570);
        real _t1572 = prim -0026<$[]> (_t1567, _t1571);
        real _t1573 = 0.2e1;
        real _t1574 = 0.2e1;
        real _t1575 = 0.3e1;
        int _t1576 = 2;
        real _t1577 = prim ^0068 (x155B, _t1576);
        real _t1578 = prim *0034 (_t1575, _t1577);
        real _t1579 = prim -0026<$[]> (_t1574, _t1578);
        real _t157A = prim *0034 (_t1573, _t1579);
        real _t157B = 0.e0;
        vec3 _t157C = [_t1572, _t157A, _t157B];
        real _t157D = 0.2e1;
        real _t157E = 0.2e1;
        real _t157F = 0.3e1;
        int _t1580 = 2;
        real _t1581 = prim ^0068 (x155B, _t1580);
        real _t1582 = prim *0034 (_t157F, _t1581);
        real _t1583 = prim -0026<$[]> (_t157E, _t1582);
        real _t1584 = prim *0034 (_t157D, _t1583);
        real _t1585 = 0.2e1;
        real _t1586 = 0.e0;
        vec3 _t1587 = [_t1584, _t1585, _t1586];
        real _t1588 = 0.e0;
        real _t1589 = 0.e0;
        real _t158A = 0.2e1;
        real _t158B = prim *0034 (_t158A, zfuz085C);
        vec3 _t158C = [_t1588, _t1589, _t158B];
        tensor[3,3] H158D = [_t157C, _t1587, _t158C];
        real _t158E = 0.2e1;
        real _t158F = 0.2e1;
        real _t1590 = 0.3e1;
        int _t1591 = 2;
        real _t1592 = prim ^0068 (x155B, _t1591);
        real _t1593 = prim *0034 (_t1590, _t1592);
        real _t1594 = prim -0026<$[]> (_t158F, _t1593);
        real _t1595 = prim *0034 (_t158E, _t1594);
        int _t1596 = 3;
        real _t1597 = prim ^0068 (x155B, _t1596);
        real _t1598 = prim unary -008B<$[]> (_t1597);
        real _t1599 = 0.2e1;
        real _t159A = prim *0034 (_t1599, x155B);
        real _t159B = prim +0017<$[]> (_t1598, _t159A);
        real _t159C = prim +0017<$[]> (_t159B, y155C);
        real _t159D = prim *0034 (_t1595, _t159C);
        real _t159E = 0.2e1;
        int _t159F = 3;
        real _t15A0 = prim ^0068 (x155B, _t159F);
        real _t15A1 = prim unary -008B<$[]> (_t15A0);
        real _t15A2 = 0.2e1;
        real _t15A3 = prim *0034 (_t15A2, x155B);
        real _t15A4 = prim +0017<$[]> (_t15A1, _t15A3);
        real _t15A5 = prim +0017<$[]> (_t15A4, y155C);
        real _t15A6 = prim *0034 (_t159E, _t15A5);
        real _t15A7 = 0.2e1;
        real _t15A8 = prim *0034 (_t15A7, zfuz085C);
        real _t15A9 = prim *0034 (_t15A8, z155D);
        vec3 g15AA = [_t159D, _t15A6, _t15A9];
        real[3] _t15AB = prim evals009F (H158D);
        int _t15AC = 0;
        real _t15AD = prim $sub01C0<real; %3> (_t15AB, _t15AC);
        real _t15AE = prim |()|00B5<$[3]> (g15AA);
        real _t15AF = prim +0017<$[]> (fBias085A, _t15AE);
        real _t15B0 = prim /0055 (_t15AD, _t15AF);
        _t155A = _t15B0;
        _t154A = prim >=007E (_t155A, fStren085B);
      } else {
        _t154A = false;
      }
      _t1536 = _t154A;
    } else {
      _t1536 = false;
    }
    _t12F4 = _t1536;
    bool _t12F5 = prim !00BC (_t12F4);
    if _t12F5 {
      die;
    }
    bool _t12F6 = prim !00BC (found12EE);
    if _t12F6 {
      step12ED = func fStep11AA (pos12EA);
      pos12EA = prim +0017<$[3]> (pos12EA, step12ED);
      _pos12EB = pos12EA;
      bool _t12F7;
      bool _t13FB;
      real _t13FC = pos12EA[0];
      real _t13FD = pos12EA[0];
      bool _t13FE = prim ==0084 (_t13FC, _t13FD);
      bool _t13FF = prim !00BC (_t13FE);
      if _t13FF {
        _t13FB = true;
      } else {
        bool _t1400;
        real _t1401 = pos12EA[1];
        real _t1402 = pos12EA[1];
        bool _t1403 = prim ==0084 (_t1401, _t1402);
        bool _t1404 = prim !00BC (_t1403);
        if _t1404 {
          _t1400 = true;
        } else {
          real _t1405 = pos12EA[2];
          real _t1406 = pos12EA[2];
          bool _t1407 = prim ==0084 (_t1405, _t1406);
          _t1400 = prim !00BC (_t1407);
        }
        _t13FB = _t1400;
      }
      _t12F7 = _t13FB;
      if _t12F7 {
        die;
      }
      real _t12F8 = prim |()|00B5<$[3]> (step12ED);
      real _t12F9 = prim /0055 (_t12F8, rad0857);
      bool _t12FA = prim >0080 (_t12F9, eps0858);
      if _t12FA {
        int _t12FB = 1;
        nfs12EF = prim +0015 (nfs12EF, _t12FB);
        int _t12FC = 10;
        bool _t12FD = prim >007F (nfs12EF, _t12FC);
        if _t12FD {
          die;
        }
      } else {
        found12EE = true;
        testp12F1 = 1;
      }
    } else {
      vec3 _t12FE = func fStep11AA (pos12EA);
      pos12EA = prim +0017<$[3]> (pos12EA, _t12FE);
      _pos12EB = pos12EA;
      bool _t12FF;
      bool _t1529;
      real _t152A = pos12EA[0];
      real _t152B = pos12EA[0];
      bool _t152C = prim ==0084 (_t152A, _t152B);
      bool _t152D = prim !00BC (_t152C);
      if _t152D {
        _t1529 = true;
      } else {
        bool _t152E;
        real _t152F = pos12EA[1];
        real _t1530 = pos12EA[1];
        bool _t1531 = prim ==0084 (_t152F, _t1530);
        bool _t1532 = prim !00BC (_t1531);
        if _t1532 {
          _t152E = true;
        } else {
          real _t1533 = pos12EA[2];
          real _t1534 = pos12EA[2];
          bool _t1535 = prim ==0084 (_t1533, _t1534);
          _t152E = prim !00BC (_t1535);
        }
        _t1529 = _t152E;
      }
      _t12FF = _t1529;
      if _t12FF {
        die;
      }
      step12ED = prim $zero01BB<$[3]> ();
      real oldE1300 = 0.e0;
      vec3 force1301 = prim $zero01BB<$[3]> ();
      int nn1302 = 0;
      particle[] _t1303 = prim sphere0198<particle> (_pos12EB, rad0857);
      foreach P1304 in _t1303 {
        vec3 _t1305 = P1304.pos12EA;
        vec3 _t1306 = prim -0026<$[3]> (_t1305, pos12EA);
        real _t1307;
        real _t1522 = prim |()|00B5<$[3]> (_t1306);
        real _t1523 = prim /0055 (_t1522, rad0857);
        real _t1524;
        real _t1525 = 0.1e1;
        real _t1526 = prim -0026<$[]> (_t1525, _t1523);
        int _t1527 = 4;
        real _t1528 = prim ^0068 (_t1526, _t1527);
        _t1524 = _t1528;
        _t1307 = _t1524;
        oldE1300 = prim +0017<$[]> (oldE1300, _t1307);
        vec3 _t1308 = P1304.pos12EA;
        vec3 _t1309 = prim -0026<$[3]> (_t1308, pos12EA);
        vec3 _t130A;
        real _t1512 = prim |()|00B5<$[3]> (_t1309);
        real _t1513 = prim /0055 (_t1512, rad0857);
        real _t1514;
        int _t1515 = -4;
        real _t1516 = (real)_t1515;
        real _t1517 = 0.1e1;
        real _t1518 = prim -0026<$[]> (_t1517, _t1513);
        int _t1519 = 3;
        real _t151A = prim ^0068 (_t1518, _t1519);
        real _t151B = prim *0034 (_t1516, _t151A);
        _t1514 = _t151B;
        real _t151C = 0.1e1;
        real _t151D = prim /0055 (_t151C, rad0857);
        real _t151E = prim *0034 (_t1514, _t151D);
        vec3 _t151F = prim *0036<$[3]> (_t151E, _t1309);
        real _t1520 = prim |()|00B5<$[3]> (_t1309);
        vec3 _t1521 = prim /0057<$[3]> (_t151F, _t1520);
        _t130A = _t1521;
        force1301 = prim +0017<$[3]> (force1301, _t130A);
        int _t130B = 1;
        nn1302 = prim +0015 (nn1302, _t130B);
      }
      int _t130C = 0;
      bool _t130D = prim ==0082 (_t130C, nn1302);
      if _t130D {
        real _t130E = 0.5e0;
        real _t130F = prim *0034 (_t130E, rad0857);
        real _t1310 = 0.e0;
        real _t1311 = 0.e0;
        vec3 _t1312 = [_t130F, _t1310, _t1311];
        vec3 npos1313 = prim +0017<$[3]> (pos12EA, _t1312);
        bool _t1314;
        bool _t1497;
        bool _t1498;
        real _t1499 = 0.e0;
        real _t149A = 0.e0;
        real _t149B = 0.e0;
        vec3 _t149C = [_t1499, _t149A, _t149B];
        vec3 mid149D = prim -0026<$[3]> (npos1313, _t149C);
        bool _t149E;
        real _t149F = mid149D[0];
        real _t14A0 = prim |()|00B5<$[]> (_t149F);
        real _t14A1 = 0.4e1;
        bool _t14A2 = prim <=007C (_t14A0, _t14A1);
        if _t14A2 {
          bool _t14A3;
          real _t14A4 = mid149D[1];
          real _t14A5 = prim |()|00B5<$[]> (_t14A4);
          real _t14A6 = 0.4e1;
          bool _t14A7 = prim <=007C (_t14A5, _t14A6);
          if _t14A7 {
            real _t14A8 = mid149D[2];
            real _t14A9 = prim |()|00B5<$[]> (_t14A8);
            real _t14AA = 0.4e1;
            _t14A3 = prim <=007C (_t14A9, _t14AA);
          } else {
            _t14A3 = false;
          }
          _t149E = _t14A3;
        } else {
          _t149E = false;
        }
        _t1498 = _t149E;
        if _t1498 {
          bool _t14AB;
          bool _t14AC;
          bool _t14AD;
          real _t14AE = npos1313[0];
          real _t14AF = npos1313[0];
          bool _t14B0 = prim ==0084 (_t14AE, _t14AF);
          bool _t14B1 = prim !00BC (_t14B0);
          if _t14B1 {
            _t14AD = true;
          } else {
            bool _t14B2;
            real _t14B3 = npos1313[1];
            real _t14B4 = npos1313[1];
            bool _t14B5 = prim ==0084 (_t14B3, _t14B4);
            bool _t14B6 = prim !00BC (_t14B5);
            if _t14B6 {
              _t14B2 = true;
            } else {
              real _t14B7 = npos1313[2];
              real _t14B8 = npos1313[2];
              bool _t14B9 = prim ==0084 (_t14B7, _t14B8);
              _t14B2 = prim !00BC (_t14B9);
            }
            _t14AD = _t14B2;
          }
          _t14AC = _t14AD;
          bool _t14BA = prim !00BC (_t14AC);
          if _t14BA {
            real _t14BB;
            real x14BC = npos1313[0];
            real y14BD = npos1313[1];
            real z14BE = npos1313[2];
            real _t14BF = 0.2e1;
            real _t14C0 = 0.2e1;
            real _t14C1 = 0.3e1;
            int _t14C2 = 2;
            real _t14C3 = prim ^0068 (x14BC, _t14C2);
            real _t14C4 = prim *0034 (_t14C1, _t14C3);
            real _t14C5 = prim -0026<$[]> (_t14C0, _t14C4);
            int _t14C6 = 2;
            real _t14C7 = prim ^0068 (_t14C5, _t14C6);
            real _t14C8 = prim *0034 (_t14BF, _t14C7);
            real _t14C9 = 0.12e2;
            real _t14CA = prim *0034 (_t14C9, x14BC);
            int _t14CB = 3;
            real _t14CC = prim ^0068 (x14BC, _t14CB);
            real _t14CD = prim unary -008B<$[]> (_t14CC);
            real _t14CE = 0.2e1;
            real _t14CF = prim *0034 (_t14CE, x14BC);
            real _t14D0 = prim +0017<$[]> (_t14CD, _t14CF);
            real _t14D1 = prim +0017<$[]> (_t14D0, y14BD);
            real _t14D2 = prim *0034 (_t14CA, _t14D1);
            real _t14D3 = prim -0026<$[]> (_t14C8, _t14D2);
            real _t14D4 = 0.2e1;
            real _t14D5 = 0.2e1;
            real _t14D6 = 0.3e1;
            int _t14D7 = 2;
            real _t14D8 = prim ^0068 (x14BC, _t14D7);
            real _t14D9 = prim *0034 (_t14D6, _t14D8);
            real _t14DA = prim -0026<$[]> (_t14D5, _t14D9);
            real _t14DB = prim *0034 (_t14D4, _t14DA);
            real _t14DC = 0.e0;
            vec3 _t14DD = [_t14D3, _t14DB, _t14DC];
            real _t14DE = 0.2e1;
            real _t14DF = 0.2e1;
            real _t14E0 = 0.3e1;
            int _t14E1 = 2;
            real _t14E2 = prim ^0068 (x14BC, _t14E1);
            real _t14E3 = prim *0034 (_t14E0, _t14E2);
            real _t14E4 = prim -0026<$[]> (_t14DF, _t14E3);
            real _t14E5 = prim *0034 (_t14DE, _t14E4);
            real _t14E6 = 0.2e1;
            real _t14E7 = 0.e0;
            vec3 _t14E8 = [_t14E5, _t14E6, _t14E7];
            real _t14E9 = 0.e0;
            real _t14EA = 0.e0;
            real _t14EB = 0.2e1;
            real _t14EC = prim *0034 (_t14EB, zfuz085C);
            vec3 _t14ED = [_t14E9, _t14EA, _t14EC];
            tensor[3,3] H14EE = [_t14DD, _t14E8, _t14ED];
            real _t14EF = 0.2e1;
            real _t14F0 = 0.2e1;
            real _t14F1 = 0.3e1;
            int _t14F2 = 2;
            real _t14F3 = prim ^0068 (x14BC, _t14F2);
            real _t14F4 = prim *0034 (_t14F1, _t14F3);
            real _t14F5 = prim -0026<$[]> (_t14F0, _t14F4);
            real _t14F6 = prim *0034 (_t14EF, _t14F5);
            int _t14F7 = 3;
            real _t14F8 = prim ^0068 (x14BC, _t14F7);
            real _t14F9 = prim unary -008B<$[]> (_t14F8);
            real _t14FA = 0.2e1;
            real _t14FB = prim *0034 (_t14FA, x14BC);
            real _t14FC = prim +0017<$[]> (_t14F9, _t14FB);
            real _t14FD = prim +0017<$[]> (_t14FC, y14BD);
            real _t14FE = prim *0034 (_t14F6, _t14FD);
            real _t14FF = 0.2e1;
            int _t1500 = 3;
            real _t1501 = prim ^0068 (x14BC, _t1500);
            real _t1502 = prim unary -008B<$[]> (_t1501);
            real _t1503 = 0.2e1;
            real _t1504 = prim *0034 (_t1503, x14BC);
            real _t1505 = prim +0017<$[]> (_t1502, _t1504);
            real _t1506 = prim +0017<$[]> (_t1505, y14BD);
            real _t1507 = prim *0034 (_t14FF, _t1506);
            real _t1508 = 0.2e1;
            real _t1509 = prim *0034 (_t1508, zfuz085C);
            real _t150A = prim *0034 (_t1509, z14BE);
            vec3 g150B = [_t14FE, _t1507, _t150A];
            real[3] _t150C = prim evals009F (H14EE);
            int _t150D = 0;
            real _t150E = prim $sub01C0<real; %3> (_t150C, _t150D);
            real _t150F = prim |()|00B5<$[3]> (g150B);
            real _t1510 = prim +0017<$[]> (fBias085A, _t150F);
            real _t1511 = prim /0055 (_t150E, _t1510);
            _t14BB = _t1511;
            _t14AB = prim >=007E (_t14BB, fStren085B);
          } else {
            _t14AB = false;
          }
          _t1497 = _t14AB;
        } else {
          _t1497 = false;
        }
        _t1314 = _t1497;
        if _t1314 {
          new particle (npos1313, hh12EC);
        }
        continue;
      }
      tensor[3,3] _t1315 = func fPerp122A (pos12EA);
      force1301 = prim •00CE<$[3,3]; $[3]; $[3]> (_t1315, force1301);
      vec3 es1316 = prim *0036<$[3]> (hh12EC, force1301);
      real _t1317 = prim |()|00B5<$[3]> (es1316);
      bool _t1318 = prim >0080 (_t1317, rad0857);
      if _t1318 {
        real _t1319 = prim |()|00B5<$[3]> (es1316);
        real _t131A = prim /0055 (rad0857, _t1319);
        hh12EC = prim *0034 (hh12EC, _t131A);
        real _t131B = prim |()|00B5<$[3]> (es1316);
        real _t131C = prim /0055 (rad0857, _t131B);
        es1316 = prim *0038<$[3]> (es1316, _t131C);
      }
      vec3 samplePos131D = prim +0017<$[3]> (pos12EA, es1316);
      vec3 fs131E = func fStep11AA (samplePos131D);
      real _t131F = prim |()|00B5<$[3]> (fs131E);
      real _t1320 = prim |()|00B5<$[3]> (es1316);
      real _t1321 = prim /0055 (_t131F, _t1320);
      real _t1322 = 0.5e0;
      bool _t1323 = prim >0080 (_t1321, _t1322);
      if _t1323 {
        real _t1324 = 0.5e0;
        hh12EC = prim *0034 (hh12EC, _t1324);
        continue;
      }
      vec3 oldPos1325 = pos12EA;
      vec3 up1326 = prim +0017<$[3]> (fs131E, es1316);
      pos12EA = prim +0017<$[3]> (pos12EA, up1326);
      _pos12EB = pos12EA;
      particle[] _t1327 = prim sphere0198<particle> (_pos12EB, rad0857);
      real accum132C = 0.e0;
      foreach P1328 in _t1327 {
        vec3 _t1329 = P1328.pos12EA;
        vec3 _t132A = prim -0026<$[3]> (pos12EA, _t1329);
        real _t132B;
        real _t1490 = prim |()|00B5<$[3]> (_t132A);
        real _t1491 = prim /0055 (_t1490, rad0857);
        real _t1492;
        real _t1493 = 0.1e1;
        real _t1494 = prim -0026<$[]> (_t1493, _t1491);
        int _t1495 = 4;
        real _t1496 = prim ^0068 (_t1494, _t1495);
        _t1492 = _t1496;
        _t132B = _t1492;
        accum132C = prim +0017<$[]> (accum132C, _t132B);
      }
      real newE132D = accum132C;
      real _t132E = prim -0026<$[]> (newE132D, oldE1300);
      real _t132F = 0.5e0;
      vec3 _t1330 = prim -0026<$[3]> (pos12EA, oldPos1325);
      vec3 _t1331 = prim *0036<$[3]> (_t132F, _t1330);
      vec3 _t1332 = prim unary -008B<$[3]> (force1301);
      real _t1333 = prim •00CE<$[3]; $[3]; $[]> (_t1331, _t1332);
      bool _t1334 = prim >0080 (_t132E, _t1333);
      if _t1334 {
        pos12EA = oldPos1325;
        _pos12EB = pos12EA;
        real _t1335 = 0.5e0;
        hh12EC = prim *0034 (hh12EC, _t1335);
        continue;
      }
      real _t1336 = 0.11e1;
      hh12EC = prim *0034 (hh12EC, _t1336);
      step12ED = up1326;
      bool _t1337;
      bool _t1483;
      real _t1484 = pos12EA[0];
      real _t1485 = pos12EA[0];
      bool _t1486 = prim ==0084 (_t1484, _t1485);
      bool _t1487 = prim !00BC (_t1486);
      if _t1487 {
        _t1483 = true;
      } else {
        bool _t1488;
        real _t1489 = pos12EA[1];
        real _t148A = pos12EA[1];
        bool _t148B = prim ==0084 (_t1489, _t148A);
        bool _t148C = prim !00BC (_t148B);
        if _t148C {
          _t1488 = true;
        } else {
          real _t148D = pos12EA[2];
          real _t148E = pos12EA[2];
          bool _t148F = prim ==0084 (_t148D, _t148E);
          _t1488 = prim !00BC (_t148F);
        }
        _t1483 = _t1488;
      }
      _t1337 = _t1483;
      if _t1337 {
        die;
      }
      int _t1338 = 5;
      bool _t1339 = prim <0079 (nn1302, _t1338);
      if _t1339 {
        real _t133A = 0.5e0;
        real _t133B = prim *0034 (_t133A, rad0857);
        vec3 _t133C = prim normalize0137<$[3]> (es1316);
        vec3 _t133D = prim *0036<$[3]> (_t133B, _t133C);
        vec3 npos133E = prim +0017<$[3]> (pos12EA, _t133D);
        bool _t133F;
        bool _t1408;
        bool _t1409;
        real _t140A = 0.e0;
        real _t140B = 0.e0;
        real _t140C = 0.e0;
        vec3 _t140D = [_t140A, _t140B, _t140C];
        vec3 mid140E = prim -0026<$[3]> (npos133E, _t140D);
        bool _t140F;
        real _t1410 = mid140E[0];
        real _t1411 = prim |()|00B5<$[]> (_t1410);
        real _t1412 = 0.4e1;
        bool _t1413 = prim <=007C (_t1411, _t1412);
        if _t1413 {
          bool _t1414;
          real _t1415 = mid140E[1];
          real _t1416 = prim |()|00B5<$[]> (_t1415);
          real _t1417 = 0.4e1;
          bool _t1418 = prim <=007C (_t1416, _t1417);
          if _t1418 {
            real _t1419 = mid140E[2];
            real _t141A = prim |()|00B5<$[]> (_t1419);
            real _t141B = 0.4e1;
            _t1414 = prim <=007C (_t141A, _t141B);
          } else {
            _t1414 = false;
          }
          _t140F = _t1414;
        } else {
          _t140F = false;
        }
        _t1409 = _t140F;
        if _t1409 {
          bool _t141C;
          bool _t141D;
          bool _t141E;
          real _t141F = npos133E[0];
          real _t1420 = npos133E[0];
          bool _t1421 = prim ==0084 (_t141F, _t1420);
          bool _t1422 = prim !00BC (_t1421);
          if _t1422 {
            _t141E = true;
          } else {
            bool _t1423;
            real _t1424 = npos133E[1];
            real _t1425 = npos133E[1];
            bool _t1426 = prim ==0084 (_t1424, _t1425);
            bool _t1427 = prim !00BC (_t1426);
            if _t1427 {
              _t1423 = true;
            } else {
              real _t1428 = npos133E[2];
              real _t1429 = npos133E[2];
              bool _t142A = prim ==0084 (_t1428, _t1429);
              _t1423 = prim !00BC (_t142A);
            }
            _t141E = _t1423;
          }
          _t141D = _t141E;
          bool _t142B = prim !00BC (_t141D);
          if _t142B {
            real _t142C;
            real x142D = npos133E[0];
            real y142E = npos133E[1];
            real z142F = npos133E[2];
            real _t1430 = 0.2e1;
            real _t1431 = 0.2e1;
            real _t1432 = 0.3e1;
            int _t1433 = 2;
            real _t1434 = prim ^0068 (x142D, _t1433);
            real _t1435 = prim *0034 (_t1432, _t1434);
            real _t1436 = prim -0026<$[]> (_t1431, _t1435);
            int _t1437 = 2;
            real _t1438 = prim ^0068 (_t1436, _t1437);
            real _t1439 = prim *0034 (_t1430, _t1438);
            real _t143A = 0.12e2;
            real _t143B = prim *0034 (_t143A, x142D);
            int _t143C = 3;
            real _t143D = prim ^0068 (x142D, _t143C);
            real _t143E = prim unary -008B<$[]> (_t143D);
            real _t143F = 0.2e1;
            real _t1440 = prim *0034 (_t143F, x142D);
            real _t1441 = prim +0017<$[]> (_t143E, _t1440);
            real _t1442 = prim +0017<$[]> (_t1441, y142E);
            real _t1443 = prim *0034 (_t143B, _t1442);
            real _t1444 = prim -0026<$[]> (_t1439, _t1443);
            real _t1445 = 0.2e1;
            real _t1446 = 0.2e1;
            real _t1447 = 0.3e1;
            int _t1448 = 2;
            real _t1449 = prim ^0068 (x142D, _t1448);
            real _t144A = prim *0034 (_t1447, _t1449);
            real _t144B = prim -0026<$[]> (_t1446, _t144A);
            real _t144C = prim *0034 (_t1445, _t144B);
            real _t144D = 0.e0;
            vec3 _t144E = [_t1444, _t144C, _t144D];
            real _t144F = 0.2e1;
            real _t1450 = 0.2e1;
            real _t1451 = 0.3e1;
            int _t1452 = 2;
            real _t1453 = prim ^0068 (x142D, _t1452);
            real _t1454 = prim *0034 (_t1451, _t1453);
            real _t1455 = prim -0026<$[]> (_t1450, _t1454);
            real _t1456 = prim *0034 (_t144F, _t1455);
            real _t1457 = 0.2e1;
            real _t1458 = 0.e0;
            vec3 _t1459 = [_t1456, _t1457, _t1458];
            real _t145A = 0.e0;
            real _t145B = 0.e0;
            real _t145C = 0.2e1;
            real _t145D = prim *0034 (_t145C, zfuz085C);
            vec3 _t145E = [_t145A, _t145B, _t145D];
            tensor[3,3] H145F = [_t144E, _t1459, _t145E];
            real _t1460 = 0.2e1;
            real _t1461 = 0.2e1;
            real _t1462 = 0.3e1;
            int _t1463 = 2;
            real _t1464 = prim ^0068 (x142D, _t1463);
            real _t1465 = prim *0034 (_t1462, _t1464);
            real _t1466 = prim -0026<$[]> (_t1461, _t1465);
            real _t1467 = prim *0034 (_t1460, _t1466);
            int _t1468 = 3;
            real _t1469 = prim ^0068 (x142D, _t1468);
            real _t146A = prim unary -008B<$[]> (_t1469);
            real _t146B = 0.2e1;
            real _t146C = prim *0034 (_t146B, x142D);
            real _t146D = prim +0017<$[]> (_t146A, _t146C);
            real _t146E = prim +0017<$[]> (_t146D, y142E);
            real _t146F = prim *0034 (_t1467, _t146E);
            real _t1470 = 0.2e1;
            int _t1471 = 3;
            real _t1472 = prim ^0068 (x142D, _t1471);
            real _t1473 = prim unary -008B<$[]> (_t1472);
            real _t1474 = 0.2e1;
            real _t1475 = prim *0034 (_t1474, x142D);
            real _t1476 = prim +0017<$[]> (_t1473, _t1475);
            real _t1477 = prim +0017<$[]> (_t1476, y142E);
            real _t1478 = prim *0034 (_t1470, _t1477);
            real _t1479 = 0.2e1;
            real _t147A = prim *0034 (_t1479, zfuz085C);
            real _t147B = prim *0034 (_t147A, z142F);
            vec3 g147C = [_t146F, _t1478, _t147B];
            real[3] _t147D = prim evals009F (H145F);
            int _t147E = 0;
            real _t147F = prim $sub01C0<real; %3> (_t147D, _t147E);
            real _t1480 = prim |()|00B5<$[3]> (g147C);
            real _t1481 = prim +0017<$[]> (fBias085A, _t1480);
            real _t1482 = prim /0055 (_t147F, _t1481);
            _t142C = _t1482;
            _t141C = prim >=007E (_t142C, fStren085B);
          } else {
            _t141C = false;
          }
          _t1408 = _t141C;
        } else {
          _t1408 = false;
        }
        _t133F = _t1408;
        if _t133F {
          new particle (npos133E, hh12EC);
        }
      }
    }
  }
}
collection {
  foreach x1340 in ipos085D {
    real _t1341 = 0.1e1;
    new particle (x1340, _t1341);
  }
}
update {
  int res1342= sum<int> { (P1345) => {
      int _t1346 = P1345.test12F0;
      return _t1346;
    } (P1343, P1343)
  | P1343 in all };
  int num1348 = res1342;
  int res1349= max<int> { (P134C) => {
      int _t134D = P134C.steps12F2;
      return _t134D;
    } (P134A, P134A)
  | P134A in all };
  int steps134F = res1349;
  int res1350= sum<int> { (P1353) => {
      int _t1354 = P1353.testp12F1;
      return _t1354;
    } (P1351, P1351)
  | P1351 in all };
  int numFound1356 = res1350;
  bool res1357= all { (P135A) => {
      bool _t135B = P135A.found12EE;
      return _t135B;
    } (P1358, P1358)
  | P1358 in all };
  bool allFound135D = res1357;
  real res135E= max<real> { (P1362) => {
      vec3 _t1363 = P1362.step12ED;
      real _t1364 = prim |()|00B5<$[3]> (_t1363);
      return _t1364;
    } (P135F, P135F)
  | P135F in all };
  real maxStep1366 = res135E;
  string _t1367 = "One run:";
  string _t1368 = " and ";
  real _t1369 = prim /0055 (maxStep1366, rad0857);
  string _t136A = " and ";
  real _t136B = prim /0055 (maxStep1366, rad0857);
  bool _t136C = prim <007A (_t136B, eps0858);
  string _t136D = " and ";
  string _t136E = " of ";
  string _t136F = "\n";
  print (_t1367, allFound135D, _t1368, _t1369, _t136A, _t136C, _t136D, numFound1356, _t136E, num1348, _t136F);
  if allFound135D {
    real _t1370 = prim /0055 (maxStep1366, rad0857);
    bool _t1371 = prim <007A (_t1370, eps0858);
    if _t1371 {
      string _t1372 = "CONVERGED!\n";
      print (_t1372);
      stabilize_all;
    }
  }
  int _t1373 = 5000;
  bool _t1374 = prim >007F (steps134F, _t1373);
  if _t1374 {
    stabilize_all;
  }
}
/* Program end */
/* Simplified Program (after after simplify fem vars) start */
properties: GlobalInit,StabilizeAll,GlobalReduce,StrandSets,GlobalUpdate,NewStrands,StrandCommunication,StrandsMayDie,HasInputs,HasGlobals,ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
input FemData:Mesh meshData0847;
input FemData:Space 0space0853_intermedateGlobal0854;
input FemData:FemFunc 0data0855_intermedateGlobal0856;
input real rad0857 = <default>;
input real eps0858 = <default>;
input real v00859 = <default>;
input real fBias085A = <default>;
input real fStren085B = <default>;
input real zfuz085C = <default>;
input vec3[] ipos085D;
constants {
  rad0857 = 0.1e-1;
  eps0858 = 0.1e-1;
  v00859 = 0.625e-1;
  fBias085A = 0.1e-1;
  fStren085B = 0.1e-1;
  zfuz085C = 0.1e-1;
}
function int[2]#6 nextCell40932 (int faceIdx0D91, int cell0D92, Femdata: Mesh mesh0D93)
{
  int _t0D94 = -1;
  bool _t0D95 = prim ==0082 (faceIdx0D91, _t0D94);
  if _t0D95 {
    int _t0D96 = -1;
    int _t0D97 = -1;
    int[2] _t0D98 = {_t0D96, _t0D97};
    return _t0D98;
  } else {
    int _t0D99 = 8;
    int _t0D9A = prim *0033 (cell0D92, _t0D99);
    int _t0D9B = 2;
    int _t0D9C = prim *0033 (faceIdx0D91, _t0D9B);
    int _t0D9D = prim +0015 (_t0D9A, _t0D9C);
    int[2] _t0D9E = extractFemItemN((mesh0D93, _t0D9D),CellFaceCell(Mesh),);
    return _t0D9E;
  }
}
function vec3#3 fStep11AA (vec3 s11AB)
{
  real x11AC = s11AB[0];
  real y11AD = s11AB[1];
  real z11AE = s11AB[2];
  real _t11AF = 0.2e1;
  real _t11B0 = 0.2e1;
  real _t11B1 = 0.3e1;
  int _t11B2 = 2;
  real _t11B3 = prim ^0068 (x11AC, _t11B2);
  real _t11B4 = prim *0034 (_t11B1, _t11B3);
  real _t11B5 = prim -0026<$[]> (_t11B0, _t11B4);
  int _t11B6 = 2;
  real _t11B7 = prim ^0068 (_t11B5, _t11B6);
  real _t11B8 = prim *0034 (_t11AF, _t11B7);
  real _t11B9 = 0.12e2;
  real _t11BA = prim *0034 (_t11B9, x11AC);
  int _t11BB = 3;
  real _t11BC = prim ^0068 (x11AC, _t11BB);
  real _t11BD = prim unary -008B<$[]> (_t11BC);
  real _t11BE = 0.2e1;
  real _t11BF = prim *0034 (_t11BE, x11AC);
  real _t11C0 = prim +0017<$[]> (_t11BD, _t11BF);
  real _t11C1 = prim +0017<$[]> (_t11C0, y11AD);
  real _t11C2 = prim *0034 (_t11BA, _t11C1);
  real _t11C3 = prim -0026<$[]> (_t11B8, _t11C2);
  real _t11C4 = 0.2e1;
  real _t11C5 = 0.2e1;
  real _t11C6 = 0.3e1;
  int _t11C7 = 2;
  real _t11C8 = prim ^0068 (x11AC, _t11C7);
  real _t11C9 = prim *0034 (_t11C6, _t11C8);
  real _t11CA = prim -0026<$[]> (_t11C5, _t11C9);
  real _t11CB = prim *0034 (_t11C4, _t11CA);
  real _t11CC = 0.e0;
  vec3 _t11CD = [_t11C3, _t11CB, _t11CC];
  real _t11CE = 0.2e1;
  real _t11CF = 0.2e1;
  real _t11D0 = 0.3e1;
  int _t11D1 = 2;
  real _t11D2 = prim ^0068 (x11AC, _t11D1);
  real _t11D3 = prim *0034 (_t11D0, _t11D2);
  real _t11D4 = prim -0026<$[]> (_t11CF, _t11D3);
  real _t11D5 = prim *0034 (_t11CE, _t11D4);
  real _t11D6 = 0.2e1;
  real _t11D7 = 0.e0;
  vec3 _t11D8 = [_t11D5, _t11D6, _t11D7];
  real _t11D9 = 0.e0;
  real _t11DA = 0.e0;
  real _t11DB = 0.2e1;
  real _t11DC = prim *0034 (_t11DB, zfuz085C);
  vec3 _t11DD = [_t11D9, _t11DA, _t11DC];
  tensor[3,3] H11DE = [_t11CD, _t11D8, _t11DD];
  real _t11DF = 0.2e1;
  real _t11E0 = 0.2e1;
  real _t11E1 = 0.3e1;
  int _t11E2 = 2;
  real _t11E3 = prim ^0068 (x11AC, _t11E2);
  real _t11E4 = prim *0034 (_t11E1, _t11E3);
  real _t11E5 = prim -0026<$[]> (_t11E0, _t11E4);
  real _t11E6 = prim *0034 (_t11DF, _t11E5);
  int _t11E7 = 3;
  real _t11E8 = prim ^0068 (x11AC, _t11E7);
  real _t11E9 = prim unary -008B<$[]> (_t11E8);
  real _t11EA = 0.2e1;
  real _t11EB = prim *0034 (_t11EA, x11AC);
  real _t11EC = prim +0017<$[]> (_t11E9, _t11EB);
  real _t11ED = prim +0017<$[]> (_t11EC, y11AD);
  real _t11EE = prim *0034 (_t11E6, _t11ED);
  real _t11EF = 0.2e1;
  int _t11F0 = 3;
  real _t11F1 = prim ^0068 (x11AC, _t11F0);
  real _t11F2 = prim unary -008B<$[]> (_t11F1);
  real _t11F3 = 0.2e1;
  real _t11F4 = prim *0034 (_t11F3, x11AC);
  real _t11F5 = prim +0017<$[]> (_t11F2, _t11F4);
  real _t11F6 = prim +0017<$[]> (_t11F5, y11AD);
  real _t11F7 = prim *0034 (_t11EF, _t11F6);
  real _t11F8 = 0.2e1;
  real _t11F9 = prim *0034 (_t11F8, zfuz085C);
  real _t11FA = prim *0034 (_t11F9, z11AE);
  vec3 g11FB = [_t11EE, _t11F7, _t11FA];
  vec3[3] E11FC = prim evecs00A0 (H11DE);
  real[3] L11FD = prim evals009F (H11DE);
  real _t11FE = 0.1e1;
  int _t11FF = 0;
  real _t1200 = prim $sub01C0<real; %3> (L11FD, _t11FF);
  real _t1201 = prim /0055 (_t11FE, _t1200);
  real _t1202 = prim unary -008B<$[]> (_t1201);
  int _t1203 = 0;
  vec3 _t1204 = prim $sub01C0<vec3; %3> (E11FC, _t1203);
  vec3 _t1205 = prim *0036<$[3]> (_t1202, _t1204);
  int _t1206 = 0;
  vec3 _t1207 = prim $sub01C0<vec3; %3> (E11FC, _t1206);
  tensor[3,3] _t1208 = prim ⊗00E5<$[3]; $[3]; $[3,3]> (_t1205, _t1207);
  vec3 up1209 = prim •00CE<$[3,3]; $[3]; $[3]> (_t1208, g11FB);
  bool _t120A;
  real _t120B = up1209[0];
  real _t120C = up1209[0];
  bool _t120D = prim ==0084 (_t120B, _t120C);
  bool _t120E = prim !00BC (_t120D);
  if _t120E {
    _t120A = true;
  } else {
    bool _t120F;
    real _t1210 = up1209[1];
    real _t1211 = up1209[1];
    bool _t1212 = prim ==0084 (_t1210, _t1211);
    bool _t1213 = prim !00BC (_t1212);
    if _t1213 {
      _t120F = true;
    } else {
      real _t1214 = up1209[2];
      real _t1215 = up1209[2];
      bool _t1216 = prim ==0084 (_t1214, _t1215);
      _t120F = prim !00BC (_t1216);
    }
    _t120A = _t120F;
  }
  if _t120A {
    real _t1217 = +inf;
    real _t1218 = +inf;
    real _t1219 = +inf;
    vec3 _t121A = [_t1217, _t1218, _t1219];
    return _t121A;
  }
  return up1209;
}
function tensor[3,3]#1 fPerp122A (vec3 s122B)
{
  real x122C = s122B[0];
  real y122D = s122B[1];
  real z122E = s122B[2];
  real _t122F = 0.2e1;
  real _t1230 = 0.2e1;
  real _t1231 = 0.3e1;
  int _t1232 = 2;
  real _t1233 = prim ^0068 (x122C, _t1232);
  real _t1234 = prim *0034 (_t1231, _t1233);
  real _t1235 = prim -0026<$[]> (_t1230, _t1234);
  int _t1236 = 2;
  real _t1237 = prim ^0068 (_t1235, _t1236);
  real _t1238 = prim *0034 (_t122F, _t1237);
  real _t1239 = 0.12e2;
  real _t123A = prim *0034 (_t1239, x122C);
  int _t123B = 3;
  real _t123C = prim ^0068 (x122C, _t123B);
  real _t123D = prim unary -008B<$[]> (_t123C);
  real _t123E = 0.2e1;
  real _t123F = prim *0034 (_t123E, x122C);
  real _t1240 = prim +0017<$[]> (_t123D, _t123F);
  real _t1241 = prim +0017<$[]> (_t1240, y122D);
  real _t1242 = prim *0034 (_t123A, _t1241);
  real _t1243 = prim -0026<$[]> (_t1238, _t1242);
  real _t1244 = 0.2e1;
  real _t1245 = 0.2e1;
  real _t1246 = 0.3e1;
  int _t1247 = 2;
  real _t1248 = prim ^0068 (x122C, _t1247);
  real _t1249 = prim *0034 (_t1246, _t1248);
  real _t124A = prim -0026<$[]> (_t1245, _t1249);
  real _t124B = prim *0034 (_t1244, _t124A);
  real _t124C = 0.e0;
  vec3 _t124D = [_t1243, _t124B, _t124C];
  real _t124E = 0.2e1;
  real _t124F = 0.2e1;
  real _t1250 = 0.3e1;
  int _t1251 = 2;
  real _t1252 = prim ^0068 (x122C, _t1251);
  real _t1253 = prim *0034 (_t1250, _t1252);
  real _t1254 = prim -0026<$[]> (_t124F, _t1253);
  real _t1255 = prim *0034 (_t124E, _t1254);
  real _t1256 = 0.2e1;
  real _t1257 = 0.e0;
  vec3 _t1258 = [_t1255, _t1256, _t1257];
  real _t1259 = 0.e0;
  real _t125A = 0.e0;
  real _t125B = 0.2e1;
  real _t125C = prim *0034 (_t125B, zfuz085C);
  vec3 _t125D = [_t1259, _t125A, _t125C];
  tensor[3,3] H125E = [_t124D, _t1258, _t125D];
  vec3[3] _t125F = prim evecs00A0 (H125E);
  int _t1260 = 0;
  vec3 E21261 = prim $sub01C0<vec3; %3> (_t125F, _t1260);
  tensor[3,3] _t1262 = prim $id01B9<%3> ();
  tensor[3,3] _t1263 = prim ⊗00E5<$[3]; $[3]; $[3,3]> (E21261, E21261);
  tensor[3,3] m1264 = prim -0026<$[3,3]> (_t1262, _t1263);
  real t1265 = prim :00FC<$[3,3]; $[3,3]; $[]> (m1264, m1264);
  bool _t1266 = prim ==0084 (t1265, t1265);
  bool _t1267 = prim !00BC (_t1266);
  if _t1267 {
    tensor[3,3] _t1268 = prim $zero01BB<$[3,3]> ();
    return _t1268;
  }
  return m1264;
}
globalInit {
  int _t084B = 0;
  int _t0849 = 1;
  int _t084D = extractFemItem(NumCell(Mesh), int, meshData0847);
  int _t084C = prim -0024 (_t084D, _t0849);
  int[] _t0850 = prim $range01C3 (_t084B, _t084C);
  Femdata: MeshCell[] _t0851 = {};
  foreach _t084F in _t0850 {
    Femdata: MeshCell _t0852 = loadFem(MeshCell, meshData0847, _t084F);
    _t0851 = prim @0010<Femdata: MeshCell> (_t0851, _t0852);
  }
}
strand particle (vec3 pos012E8, real hh012E9) in 3D {
  output vec3 pos12EA;
  output vec3 _pos12EB;
  real hh12EC;
  vec3 step12ED;
  bool found12EE;
  int nfs12EF;
  int test12F0;
  int testp12F1;
  int steps12F2;
  {
    pos12EA = pos012E8;
    _pos12EB = pos12EA;
    hh12EC = hh012E9;
    step12ED = prim $zero01BB<$[3]> ();
    found12EE = false;
    nfs12EF = 0;
    test12F0 = 1;
    testp12F1 = 0;
    steps12F2 = 0;
  }
  update
  {
    int _t12F3 = 1;
    steps12F2 = prim +0015 (steps12F2, _t12F3);
    bool _t12F4;
    bool _t1536;
    bool _t1537;
    real _t1538 = 0.e0;
    real _t1539 = 0.e0;
    real _t153A = 0.e0;
    vec3 _t153B = [_t1538, _t1539, _t153A];
    vec3 mid153C = prim -0026<$[3]> (pos12EA, _t153B);
    bool _t153D;
    real _t153E = mid153C[0];
    real _t153F = prim |()|00B5<$[]> (_t153E);
    real _t1540 = 0.4e1;
    bool _t1541 = prim <=007C (_t153F, _t1540);
    if _t1541 {
      bool _t1542;
      real _t1543 = mid153C[1];
      real _t1544 = prim |()|00B5<$[]> (_t1543);
      real _t1545 = 0.4e1;
      bool _t1546 = prim <=007C (_t1544, _t1545);
      if _t1546 {
        real _t1547 = mid153C[2];
        real _t1548 = prim |()|00B5<$[]> (_t1547);
        real _t1549 = 0.4e1;
        _t1542 = prim <=007C (_t1548, _t1549);
      } else {
        _t1542 = false;
      }
      _t153D = _t1542;
    } else {
      _t153D = false;
    }
    _t1537 = _t153D;
    if _t1537 {
      bool _t154A;
      bool _t154B;
      bool _t154C;
      real _t154D = pos12EA[0];
      real _t154E = pos12EA[0];
      bool _t154F = prim ==0084 (_t154D, _t154E);
      bool _t1550 = prim !00BC (_t154F);
      if _t1550 {
        _t154C = true;
      } else {
        bool _t1551;
        real _t1552 = pos12EA[1];
        real _t1553 = pos12EA[1];
        bool _t1554 = prim ==0084 (_t1552, _t1553);
        bool _t1555 = prim !00BC (_t1554);
        if _t1555 {
          _t1551 = true;
        } else {
          real _t1556 = pos12EA[2];
          real _t1557 = pos12EA[2];
          bool _t1558 = prim ==0084 (_t1556, _t1557);
          _t1551 = prim !00BC (_t1558);
        }
        _t154C = _t1551;
      }
      _t154B = _t154C;
      bool _t1559 = prim !00BC (_t154B);
      if _t1559 {
        real _t155A;
        real x155B = pos12EA[0];
        real y155C = pos12EA[1];
        real z155D = pos12EA[2];
        real _t155E = 0.2e1;
        real _t155F = 0.2e1;
        real _t1560 = 0.3e1;
        int _t1561 = 2;
        real _t1562 = prim ^0068 (x155B, _t1561);
        real _t1563 = prim *0034 (_t1560, _t1562);
        real _t1564 = prim -0026<$[]> (_t155F, _t1563);
        int _t1565 = 2;
        real _t1566 = prim ^0068 (_t1564, _t1565);
        real _t1567 = prim *0034 (_t155E, _t1566);
        real _t1568 = 0.12e2;
        real _t1569 = prim *0034 (_t1568, x155B);
        int _t156A = 3;
        real _t156B = prim ^0068 (x155B, _t156A);
        real _t156C = prim unary -008B<$[]> (_t156B);
        real _t156D = 0.2e1;
        real _t156E = prim *0034 (_t156D, x155B);
        real _t156F = prim +0017<$[]> (_t156C, _t156E);
        real _t1570 = prim +0017<$[]> (_t156F, y155C);
        real _t1571 = prim *0034 (_t1569, _t1570);
        real _t1572 = prim -0026<$[]> (_t1567, _t1571);
        real _t1573 = 0.2e1;
        real _t1574 = 0.2e1;
        real _t1575 = 0.3e1;
        int _t1576 = 2;
        real _t1577 = prim ^0068 (x155B, _t1576);
        real _t1578 = prim *0034 (_t1575, _t1577);
        real _t1579 = prim -0026<$[]> (_t1574, _t1578);
        real _t157A = prim *0034 (_t1573, _t1579);
        real _t157B = 0.e0;
        vec3 _t157C = [_t1572, _t157A, _t157B];
        real _t157D = 0.2e1;
        real _t157E = 0.2e1;
        real _t157F = 0.3e1;
        int _t1580 = 2;
        real _t1581 = prim ^0068 (x155B, _t1580);
        real _t1582 = prim *0034 (_t157F, _t1581);
        real _t1583 = prim -0026<$[]> (_t157E, _t1582);
        real _t1584 = prim *0034 (_t157D, _t1583);
        real _t1585 = 0.2e1;
        real _t1586 = 0.e0;
        vec3 _t1587 = [_t1584, _t1585, _t1586];
        real _t1588 = 0.e0;
        real _t1589 = 0.e0;
        real _t158A = 0.2e1;
        real _t158B = prim *0034 (_t158A, zfuz085C);
        vec3 _t158C = [_t1588, _t1589, _t158B];
        tensor[3,3] H158D = [_t157C, _t1587, _t158C];
        real _t158E = 0.2e1;
        real _t158F = 0.2e1;
        real _t1590 = 0.3e1;
        int _t1591 = 2;
        real _t1592 = prim ^0068 (x155B, _t1591);
        real _t1593 = prim *0034 (_t1590, _t1592);
        real _t1594 = prim -0026<$[]> (_t158F, _t1593);
        real _t1595 = prim *0034 (_t158E, _t1594);
        int _t1596 = 3;
        real _t1597 = prim ^0068 (x155B, _t1596);
        real _t1598 = prim unary -008B<$[]> (_t1597);
        real _t1599 = 0.2e1;
        real _t159A = prim *0034 (_t1599, x155B);
        real _t159B = prim +0017<$[]> (_t1598, _t159A);
        real _t159C = prim +0017<$[]> (_t159B, y155C);
        real _t159D = prim *0034 (_t1595, _t159C);
        real _t159E = 0.2e1;
        int _t159F = 3;
        real _t15A0 = prim ^0068 (x155B, _t159F);
        real _t15A1 = prim unary -008B<$[]> (_t15A0);
        real _t15A2 = 0.2e1;
        real _t15A3 = prim *0034 (_t15A2, x155B);
        real _t15A4 = prim +0017<$[]> (_t15A1, _t15A3);
        real _t15A5 = prim +0017<$[]> (_t15A4, y155C);
        real _t15A6 = prim *0034 (_t159E, _t15A5);
        real _t15A7 = 0.2e1;
        real _t15A8 = prim *0034 (_t15A7, zfuz085C);
        real _t15A9 = prim *0034 (_t15A8, z155D);
        vec3 g15AA = [_t159D, _t15A6, _t15A9];
        real[3] _t15AB = prim evals009F (H158D);
        int _t15AC = 0;
        real _t15AD = prim $sub01C0<real; %3> (_t15AB, _t15AC);
        real _t15AE = prim |()|00B5<$[3]> (g15AA);
        real _t15AF = prim +0017<$[]> (fBias085A, _t15AE);
        real _t15B0 = prim /0055 (_t15AD, _t15AF);
        _t155A = _t15B0;
        _t154A = prim >=007E (_t155A, fStren085B);
      } else {
        _t154A = false;
      }
      _t1536 = _t154A;
    } else {
      _t1536 = false;
    }
    _t12F4 = _t1536;
    bool _t12F5 = prim !00BC (_t12F4);
    if _t12F5 {
      die;
    }
    bool _t12F6 = prim !00BC (found12EE);
    if _t12F6 {
      step12ED = func fStep11AA (pos12EA);
      pos12EA = prim +0017<$[3]> (pos12EA, step12ED);
      _pos12EB = pos12EA;
      bool _t12F7;
      bool _t13FB;
      real _t13FC = pos12EA[0];
      real _t13FD = pos12EA[0];
      bool _t13FE = prim ==0084 (_t13FC, _t13FD);
      bool _t13FF = prim !00BC (_t13FE);
      if _t13FF {
        _t13FB = true;
      } else {
        bool _t1400;
        real _t1401 = pos12EA[1];
        real _t1402 = pos12EA[1];
        bool _t1403 = prim ==0084 (_t1401, _t1402);
        bool _t1404 = prim !00BC (_t1403);
        if _t1404 {
          _t1400 = true;
        } else {
          real _t1405 = pos12EA[2];
          real _t1406 = pos12EA[2];
          bool _t1407 = prim ==0084 (_t1405, _t1406);
          _t1400 = prim !00BC (_t1407);
        }
        _t13FB = _t1400;
      }
      _t12F7 = _t13FB;
      if _t12F7 {
        die;
      }
      real _t12F8 = prim |()|00B5<$[3]> (step12ED);
      real _t12F9 = prim /0055 (_t12F8, rad0857);
      bool _t12FA = prim >0080 (_t12F9, eps0858);
      if _t12FA {
        int _t12FB = 1;
        nfs12EF = prim +0015 (nfs12EF, _t12FB);
        int _t12FC = 10;
        bool _t12FD = prim >007F (nfs12EF, _t12FC);
        if _t12FD {
          die;
        }
      } else {
        found12EE = true;
        testp12F1 = 1;
      }
    } else {
      vec3 _t12FE = func fStep11AA (pos12EA);
      pos12EA = prim +0017<$[3]> (pos12EA, _t12FE);
      _pos12EB = pos12EA;
      bool _t12FF;
      bool _t1529;
      real _t152A = pos12EA[0];
      real _t152B = pos12EA[0];
      bool _t152C = prim ==0084 (_t152A, _t152B);
      bool _t152D = prim !00BC (_t152C);
      if _t152D {
        _t1529 = true;
      } else {
        bool _t152E;
        real _t152F = pos12EA[1];
        real _t1530 = pos12EA[1];
        bool _t1531 = prim ==0084 (_t152F, _t1530);
        bool _t1532 = prim !00BC (_t1531);
        if _t1532 {
          _t152E = true;
        } else {
          real _t1533 = pos12EA[2];
          real _t1534 = pos12EA[2];
          bool _t1535 = prim ==0084 (_t1533, _t1534);
          _t152E = prim !00BC (_t1535);
        }
        _t1529 = _t152E;
      }
      _t12FF = _t1529;
      if _t12FF {
        die;
      }
      step12ED = prim $zero01BB<$[3]> ();
      real oldE1300 = 0.e0;
      vec3 force1301 = prim $zero01BB<$[3]> ();
      int nn1302 = 0;
      particle[] _t1303 = prim sphere0198<particle> (_pos12EB, rad0857);
      foreach P1304 in _t1303 {
        vec3 _t1305 = P1304.pos12EA;
        vec3 _t1306 = prim -0026<$[3]> (_t1305, pos12EA);
        real _t1307;
        real _t1522 = prim |()|00B5<$[3]> (_t1306);
        real _t1523 = prim /0055 (_t1522, rad0857);
        real _t1524;
        real _t1525 = 0.1e1;
        real _t1526 = prim -0026<$[]> (_t1525, _t1523);
        int _t1527 = 4;
        real _t1528 = prim ^0068 (_t1526, _t1527);
        _t1524 = _t1528;
        _t1307 = _t1524;
        oldE1300 = prim +0017<$[]> (oldE1300, _t1307);
        vec3 _t1308 = P1304.pos12EA;
        vec3 _t1309 = prim -0026<$[3]> (_t1308, pos12EA);
        vec3 _t130A;
        real _t1512 = prim |()|00B5<$[3]> (_t1309);
        real _t1513 = prim /0055 (_t1512, rad0857);
        real _t1514;
        int _t1515 = -4;
        real _t1516 = (real)_t1515;
        real _t1517 = 0.1e1;
        real _t1518 = prim -0026<$[]> (_t1517, _t1513);
        int _t1519 = 3;
        real _t151A = prim ^0068 (_t1518, _t1519);
        real _t151B = prim *0034 (_t1516, _t151A);
        _t1514 = _t151B;
        real _t151C = 0.1e1;
        real _t151D = prim /0055 (_t151C, rad0857);
        real _t151E = prim *0034 (_t1514, _t151D);
        vec3 _t151F = prim *0036<$[3]> (_t151E, _t1309);
        real _t1520 = prim |()|00B5<$[3]> (_t1309);
        vec3 _t1521 = prim /0057<$[3]> (_t151F, _t1520);
        _t130A = _t1521;
        force1301 = prim +0017<$[3]> (force1301, _t130A);
        int _t130B = 1;
        nn1302 = prim +0015 (nn1302, _t130B);
      }
      int _t130C = 0;
      bool _t130D = prim ==0082 (_t130C, nn1302);
      if _t130D {
        real _t130E = 0.5e0;
        real _t130F = prim *0034 (_t130E, rad0857);
        real _t1310 = 0.e0;
        real _t1311 = 0.e0;
        vec3 _t1312 = [_t130F, _t1310, _t1311];
        vec3 npos1313 = prim +0017<$[3]> (pos12EA, _t1312);
        bool _t1314;
        bool _t1497;
        bool _t1498;
        real _t1499 = 0.e0;
        real _t149A = 0.e0;
        real _t149B = 0.e0;
        vec3 _t149C = [_t1499, _t149A, _t149B];
        vec3 mid149D = prim -0026<$[3]> (npos1313, _t149C);
        bool _t149E;
        real _t149F = mid149D[0];
        real _t14A0 = prim |()|00B5<$[]> (_t149F);
        real _t14A1 = 0.4e1;
        bool _t14A2 = prim <=007C (_t14A0, _t14A1);
        if _t14A2 {
          bool _t14A3;
          real _t14A4 = mid149D[1];
          real _t14A5 = prim |()|00B5<$[]> (_t14A4);
          real _t14A6 = 0.4e1;
          bool _t14A7 = prim <=007C (_t14A5, _t14A6);
          if _t14A7 {
            real _t14A8 = mid149D[2];
            real _t14A9 = prim |()|00B5<$[]> (_t14A8);
            real _t14AA = 0.4e1;
            _t14A3 = prim <=007C (_t14A9, _t14AA);
          } else {
            _t14A3 = false;
          }
          _t149E = _t14A3;
        } else {
          _t149E = false;
        }
        _t1498 = _t149E;
        if _t1498 {
          bool _t14AB;
          bool _t14AC;
          bool _t14AD;
          real _t14AE = npos1313[0];
          real _t14AF = npos1313[0];
          bool _t14B0 = prim ==0084 (_t14AE, _t14AF);
          bool _t14B1 = prim !00BC (_t14B0);
          if _t14B1 {
            _t14AD = true;
          } else {
            bool _t14B2;
            real _t14B3 = npos1313[1];
            real _t14B4 = npos1313[1];
            bool _t14B5 = prim ==0084 (_t14B3, _t14B4);
            bool _t14B6 = prim !00BC (_t14B5);
            if _t14B6 {
              _t14B2 = true;
            } else {
              real _t14B7 = npos1313[2];
              real _t14B8 = npos1313[2];
              bool _t14B9 = prim ==0084 (_t14B7, _t14B8);
              _t14B2 = prim !00BC (_t14B9);
            }
            _t14AD = _t14B2;
          }
          _t14AC = _t14AD;
          bool _t14BA = prim !00BC (_t14AC);
          if _t14BA {
            real _t14BB;
            real x14BC = npos1313[0];
            real y14BD = npos1313[1];
            real z14BE = npos1313[2];
            real _t14BF = 0.2e1;
            real _t14C0 = 0.2e1;
            real _t14C1 = 0.3e1;
            int _t14C2 = 2;
            real _t14C3 = prim ^0068 (x14BC, _t14C2);
            real _t14C4 = prim *0034 (_t14C1, _t14C3);
            real _t14C5 = prim -0026<$[]> (_t14C0, _t14C4);
            int _t14C6 = 2;
            real _t14C7 = prim ^0068 (_t14C5, _t14C6);
            real _t14C8 = prim *0034 (_t14BF, _t14C7);
            real _t14C9 = 0.12e2;
            real _t14CA = prim *0034 (_t14C9, x14BC);
            int _t14CB = 3;
            real _t14CC = prim ^0068 (x14BC, _t14CB);
            real _t14CD = prim unary -008B<$[]> (_t14CC);
            real _t14CE = 0.2e1;
            real _t14CF = prim *0034 (_t14CE, x14BC);
            real _t14D0 = prim +0017<$[]> (_t14CD, _t14CF);
            real _t14D1 = prim +0017<$[]> (_t14D0, y14BD);
            real _t14D2 = prim *0034 (_t14CA, _t14D1);
            real _t14D3 = prim -0026<$[]> (_t14C8, _t14D2);
            real _t14D4 = 0.2e1;
            real _t14D5 = 0.2e1;
            real _t14D6 = 0.3e1;
            int _t14D7 = 2;
            real _t14D8 = prim ^0068 (x14BC, _t14D7);
            real _t14D9 = prim *0034 (_t14D6, _t14D8);
            real _t14DA = prim -0026<$[]> (_t14D5, _t14D9);
            real _t14DB = prim *0034 (_t14D4, _t14DA);
            real _t14DC = 0.e0;
            vec3 _t14DD = [_t14D3, _t14DB, _t14DC];
            real _t14DE = 0.2e1;
            real _t14DF = 0.2e1;
            real _t14E0 = 0.3e1;
            int _t14E1 = 2;
            real _t14E2 = prim ^0068 (x14BC, _t14E1);
            real _t14E3 = prim *0034 (_t14E0, _t14E2);
            real _t14E4 = prim -0026<$[]> (_t14DF, _t14E3);
            real _t14E5 = prim *0034 (_t14DE, _t14E4);
            real _t14E6 = 0.2e1;
            real _t14E7 = 0.e0;
            vec3 _t14E8 = [_t14E5, _t14E6, _t14E7];
            real _t14E9 = 0.e0;
            real _t14EA = 0.e0;
            real _t14EB = 0.2e1;
            real _t14EC = prim *0034 (_t14EB, zfuz085C);
            vec3 _t14ED = [_t14E9, _t14EA, _t14EC];
            tensor[3,3] H14EE = [_t14DD, _t14E8, _t14ED];
            real _t14EF = 0.2e1;
            real _t14F0 = 0.2e1;
            real _t14F1 = 0.3e1;
            int _t14F2 = 2;
            real _t14F3 = prim ^0068 (x14BC, _t14F2);
            real _t14F4 = prim *0034 (_t14F1, _t14F3);
            real _t14F5 = prim -0026<$[]> (_t14F0, _t14F4);
            real _t14F6 = prim *0034 (_t14EF, _t14F5);
            int _t14F7 = 3;
            real _t14F8 = prim ^0068 (x14BC, _t14F7);
            real _t14F9 = prim unary -008B<$[]> (_t14F8);
            real _t14FA = 0.2e1;
            real _t14FB = prim *0034 (_t14FA, x14BC);
            real _t14FC = prim +0017<$[]> (_t14F9, _t14FB);
            real _t14FD = prim +0017<$[]> (_t14FC, y14BD);
            real _t14FE = prim *0034 (_t14F6, _t14FD);
            real _t14FF = 0.2e1;
            int _t1500 = 3;
            real _t1501 = prim ^0068 (x14BC, _t1500);
            real _t1502 = prim unary -008B<$[]> (_t1501);
            real _t1503 = 0.2e1;
            real _t1504 = prim *0034 (_t1503, x14BC);
            real _t1505 = prim +0017<$[]> (_t1502, _t1504);
            real _t1506 = prim +0017<$[]> (_t1505, y14BD);
            real _t1507 = prim *0034 (_t14FF, _t1506);
            real _t1508 = 0.2e1;
            real _t1509 = prim *0034 (_t1508, zfuz085C);
            real _t150A = prim *0034 (_t1509, z14BE);
            vec3 g150B = [_t14FE, _t1507, _t150A];
            real[3] _t150C = prim evals009F (H14EE);
            int _t150D = 0;
            real _t150E = prim $sub01C0<real; %3> (_t150C, _t150D);
            real _t150F = prim |()|00B5<$[3]> (g150B);
            real _t1510 = prim +0017<$[]> (fBias085A, _t150F);
            real _t1511 = prim /0055 (_t150E, _t1510);
            _t14BB = _t1511;
            _t14AB = prim >=007E (_t14BB, fStren085B);
          } else {
            _t14AB = false;
          }
          _t1497 = _t14AB;
        } else {
          _t1497 = false;
        }
        _t1314 = _t1497;
        if _t1314 {
          new particle (npos1313, hh12EC);
        }
        continue;
      }
      tensor[3,3] _t1315 = func fPerp122A (pos12EA);
      force1301 = prim •00CE<$[3,3]; $[3]; $[3]> (_t1315, force1301);
      vec3 es1316 = prim *0036<$[3]> (hh12EC, force1301);
      real _t1317 = prim |()|00B5<$[3]> (es1316);
      bool _t1318 = prim >0080 (_t1317, rad0857);
      if _t1318 {
        real _t1319 = prim |()|00B5<$[3]> (es1316);
        real _t131A = prim /0055 (rad0857, _t1319);
        hh12EC = prim *0034 (hh12EC, _t131A);
        real _t131B = prim |()|00B5<$[3]> (es1316);
        real _t131C = prim /0055 (rad0857, _t131B);
        es1316 = prim *0038<$[3]> (es1316, _t131C);
      }
      vec3 samplePos131D = prim +0017<$[3]> (pos12EA, es1316);
      vec3 fs131E = func fStep11AA (samplePos131D);
      real _t131F = prim |()|00B5<$[3]> (fs131E);
      real _t1320 = prim |()|00B5<$[3]> (es1316);
      real _t1321 = prim /0055 (_t131F, _t1320);
      real _t1322 = 0.5e0;
      bool _t1323 = prim >0080 (_t1321, _t1322);
      if _t1323 {
        real _t1324 = 0.5e0;
        hh12EC = prim *0034 (hh12EC, _t1324);
        continue;
      }
      vec3 oldPos1325 = pos12EA;
      vec3 up1326 = prim +0017<$[3]> (fs131E, es1316);
      pos12EA = prim +0017<$[3]> (pos12EA, up1326);
      _pos12EB = pos12EA;
      particle[] _t1327 = prim sphere0198<particle> (_pos12EB, rad0857);
      real accum132C = 0.e0;
      foreach P1328 in _t1327 {
        vec3 _t1329 = P1328.pos12EA;
        vec3 _t132A = prim -0026<$[3]> (pos12EA, _t1329);
        real _t132B;
        real _t1490 = prim |()|00B5<$[3]> (_t132A);
        real _t1491 = prim /0055 (_t1490, rad0857);
        real _t1492;
        real _t1493 = 0.1e1;
        real _t1494 = prim -0026<$[]> (_t1493, _t1491);
        int _t1495 = 4;
        real _t1496 = prim ^0068 (_t1494, _t1495);
        _t1492 = _t1496;
        _t132B = _t1492;
        accum132C = prim +0017<$[]> (accum132C, _t132B);
      }
      real newE132D = accum132C;
      real _t132E = prim -0026<$[]> (newE132D, oldE1300);
      real _t132F = 0.5e0;
      vec3 _t1330 = prim -0026<$[3]> (pos12EA, oldPos1325);
      vec3 _t1331 = prim *0036<$[3]> (_t132F, _t1330);
      vec3 _t1332 = prim unary -008B<$[3]> (force1301);
      real _t1333 = prim •00CE<$[3]; $[3]; $[]> (_t1331, _t1332);
      bool _t1334 = prim >0080 (_t132E, _t1333);
      if _t1334 {
        pos12EA = oldPos1325;
        _pos12EB = pos12EA;
        real _t1335 = 0.5e0;
        hh12EC = prim *0034 (hh12EC, _t1335);
        continue;
      }
      real _t1336 = 0.11e1;
      hh12EC = prim *0034 (hh12EC, _t1336);
      step12ED = up1326;
      bool _t1337;
      bool _t1483;
      real _t1484 = pos12EA[0];
      real _t1485 = pos12EA[0];
      bool _t1486 = prim ==0084 (_t1484, _t1485);
      bool _t1487 = prim !00BC (_t1486);
      if _t1487 {
        _t1483 = true;
      } else {
        bool _t1488;
        real _t1489 = pos12EA[1];
        real _t148A = pos12EA[1];
        bool _t148B = prim ==0084 (_t1489, _t148A);
        bool _t148C = prim !00BC (_t148B);
        if _t148C {
          _t1488 = true;
        } else {
          real _t148D = pos12EA[2];
          real _t148E = pos12EA[2];
          bool _t148F = prim ==0084 (_t148D, _t148E);
          _t1488 = prim !00BC (_t148F);
        }
        _t1483 = _t1488;
      }
      _t1337 = _t1483;
      if _t1337 {
        die;
      }
      int _t1338 = 5;
      bool _t1339 = prim <0079 (nn1302, _t1338);
      if _t1339 {
        real _t133A = 0.5e0;
        real _t133B = prim *0034 (_t133A, rad0857);
        vec3 _t133C = prim normalize0137<$[3]> (es1316);
        vec3 _t133D = prim *0036<$[3]> (_t133B, _t133C);
        vec3 npos133E = prim +0017<$[3]> (pos12EA, _t133D);
        bool _t133F;
        bool _t1408;
        bool _t1409;
        real _t140A = 0.e0;
        real _t140B = 0.e0;
        real _t140C = 0.e0;
        vec3 _t140D = [_t140A, _t140B, _t140C];
        vec3 mid140E = prim -0026<$[3]> (npos133E, _t140D);
        bool _t140F;
        real _t1410 = mid140E[0];
        real _t1411 = prim |()|00B5<$[]> (_t1410);
        real _t1412 = 0.4e1;
        bool _t1413 = prim <=007C (_t1411, _t1412);
        if _t1413 {
          bool _t1414;
          real _t1415 = mid140E[1];
          real _t1416 = prim |()|00B5<$[]> (_t1415);
          real _t1417 = 0.4e1;
          bool _t1418 = prim <=007C (_t1416, _t1417);
          if _t1418 {
            real _t1419 = mid140E[2];
            real _t141A = prim |()|00B5<$[]> (_t1419);
            real _t141B = 0.4e1;
            _t1414 = prim <=007C (_t141A, _t141B);
          } else {
            _t1414 = false;
          }
          _t140F = _t1414;
        } else {
          _t140F = false;
        }
        _t1409 = _t140F;
        if _t1409 {
          bool _t141C;
          bool _t141D;
          bool _t141E;
          real _t141F = npos133E[0];
          real _t1420 = npos133E[0];
          bool _t1421 = prim ==0084 (_t141F, _t1420);
          bool _t1422 = prim !00BC (_t1421);
          if _t1422 {
            _t141E = true;
          } else {
            bool _t1423;
            real _t1424 = npos133E[1];
            real _t1425 = npos133E[1];
            bool _t1426 = prim ==0084 (_t1424, _t1425);
            bool _t1427 = prim !00BC (_t1426);
            if _t1427 {
              _t1423 = true;
            } else {
              real _t1428 = npos133E[2];
              real _t1429 = npos133E[2];
              bool _t142A = prim ==0084 (_t1428, _t1429);
              _t1423 = prim !00BC (_t142A);
            }
            _t141E = _t1423;
          }
          _t141D = _t141E;
          bool _t142B = prim !00BC (_t141D);
          if _t142B {
            real _t142C;
            real x142D = npos133E[0];
            real y142E = npos133E[1];
            real z142F = npos133E[2];
            real _t1430 = 0.2e1;
            real _t1431 = 0.2e1;
            real _t1432 = 0.3e1;
            int _t1433 = 2;
            real _t1434 = prim ^0068 (x142D, _t1433);
            real _t1435 = prim *0034 (_t1432, _t1434);
            real _t1436 = prim -0026<$[]> (_t1431, _t1435);
            int _t1437 = 2;
            real _t1438 = prim ^0068 (_t1436, _t1437);
            real _t1439 = prim *0034 (_t1430, _t1438);
            real _t143A = 0.12e2;
            real _t143B = prim *0034 (_t143A, x142D);
            int _t143C = 3;
            real _t143D = prim ^0068 (x142D, _t143C);
            real _t143E = prim unary -008B<$[]> (_t143D);
            real _t143F = 0.2e1;
            real _t1440 = prim *0034 (_t143F, x142D);
            real _t1441 = prim +0017<$[]> (_t143E, _t1440);
            real _t1442 = prim +0017<$[]> (_t1441, y142E);
            real _t1443 = prim *0034 (_t143B, _t1442);
            real _t1444 = prim -0026<$[]> (_t1439, _t1443);
            real _t1445 = 0.2e1;
            real _t1446 = 0.2e1;
            real _t1447 = 0.3e1;
            int _t1448 = 2;
            real _t1449 = prim ^0068 (x142D, _t1448);
            real _t144A = prim *0034 (_t1447, _t1449);
            real _t144B = prim -0026<$[]> (_t1446, _t144A);
            real _t144C = prim *0034 (_t1445, _t144B);
            real _t144D = 0.e0;
            vec3 _t144E = [_t1444, _t144C, _t144D];
            real _t144F = 0.2e1;
            real _t1450 = 0.2e1;
            real _t1451 = 0.3e1;
            int _t1452 = 2;
            real _t1453 = prim ^0068 (x142D, _t1452);
            real _t1454 = prim *0034 (_t1451, _t1453);
            real _t1455 = prim -0026<$[]> (_t1450, _t1454);
            real _t1456 = prim *0034 (_t144F, _t1455);
            real _t1457 = 0.2e1;
            real _t1458 = 0.e0;
            vec3 _t1459 = [_t1456, _t1457, _t1458];
            real _t145A = 0.e0;
            real _t145B = 0.e0;
            real _t145C = 0.2e1;
            real _t145D = prim *0034 (_t145C, zfuz085C);
            vec3 _t145E = [_t145A, _t145B, _t145D];
            tensor[3,3] H145F = [_t144E, _t1459, _t145E];
            real _t1460 = 0.2e1;
            real _t1461 = 0.2e1;
            real _t1462 = 0.3e1;
            int _t1463 = 2;
            real _t1464 = prim ^0068 (x142D, _t1463);
            real _t1465 = prim *0034 (_t1462, _t1464);
            real _t1466 = prim -0026<$[]> (_t1461, _t1465);
            real _t1467 = prim *0034 (_t1460, _t1466);
            int _t1468 = 3;
            real _t1469 = prim ^0068 (x142D, _t1468);
            real _t146A = prim unary -008B<$[]> (_t1469);
            real _t146B = 0.2e1;
            real _t146C = prim *0034 (_t146B, x142D);
            real _t146D = prim +0017<$[]> (_t146A, _t146C);
            real _t146E = prim +0017<$[]> (_t146D, y142E);
            real _t146F = prim *0034 (_t1467, _t146E);
            real _t1470 = 0.2e1;
            int _t1471 = 3;
            real _t1472 = prim ^0068 (x142D, _t1471);
            real _t1473 = prim unary -008B<$[]> (_t1472);
            real _t1474 = 0.2e1;
            real _t1475 = prim *0034 (_t1474, x142D);
            real _t1476 = prim +0017<$[]> (_t1473, _t1475);
            real _t1477 = prim +0017<$[]> (_t1476, y142E);
            real _t1478 = prim *0034 (_t1470, _t1477);
            real _t1479 = 0.2e1;
            real _t147A = prim *0034 (_t1479, zfuz085C);
            real _t147B = prim *0034 (_t147A, z142F);
            vec3 g147C = [_t146F, _t1478, _t147B];
            real[3] _t147D = prim evals009F (H145F);
            int _t147E = 0;
            real _t147F = prim $sub01C0<real; %3> (_t147D, _t147E);
            real _t1480 = prim |()|00B5<$[3]> (g147C);
            real _t1481 = prim +0017<$[]> (fBias085A, _t1480);
            real _t1482 = prim /0055 (_t147F, _t1481);
            _t142C = _t1482;
            _t141C = prim >=007E (_t142C, fStren085B);
          } else {
            _t141C = false;
          }
          _t1408 = _t141C;
        } else {
          _t1408 = false;
        }
        _t133F = _t1408;
        if _t133F {
          new particle (npos133E, hh12EC);
        }
      }
    }
  }
}
collection {
  foreach x1340 in ipos085D {
    real _t1341 = 0.1e1;
    new particle (x1340, _t1341);
  }
}
update {
  int res1342= sum<int> { (P1345) => {
      int _t1346 = P1345.test12F0;
      return _t1346;
    } (P1343, P1343)
  | P1343 in all };
  int num1348 = res1342;
  int res1349= max<int> { (P134C) => {
      int _t134D = P134C.steps12F2;
      return _t134D;
    } (P134A, P134A)
  | P134A in all };
  int steps134F = res1349;
  int res1350= sum<int> { (P1353) => {
      int _t1354 = P1353.testp12F1;
      return _t1354;
    } (P1351, P1351)
  | P1351 in all };
  int numFound1356 = res1350;
  bool res1357= all { (P135A) => {
      bool _t135B = P135A.found12EE;
      return _t135B;
    } (P1358, P1358)
  | P1358 in all };
  bool allFound135D = res1357;
  real res135E= max<real> { (P1362) => {
      vec3 _t1363 = P1362.step12ED;
      real _t1364 = prim |()|00B5<$[3]> (_t1363);
      return _t1364;
    } (P135F, P135F)
  | P135F in all };
  real maxStep1366 = res135E;
  string _t1367 = "One run:";
  string _t1368 = " and ";
  real _t1369 = prim /0055 (maxStep1366, rad0857);
  string _t136A = " and ";
  real _t136B = prim /0055 (maxStep1366, rad0857);
  bool _t136C = prim <007A (_t136B, eps0858);
  string _t136D = " and ";
  string _t136E = " of ";
  string _t136F = "\n";
  print (_t1367, allFound135D, _t1368, _t1369, _t136A, _t136C, _t136D, numFound1356, _t136E, num1348, _t136F);
  if allFound135D {
    real _t1370 = prim /0055 (maxStep1366, rad0857);
    bool _t1371 = prim <007A (_t1370, eps0858);
    if _t1371 {
      string _t1372 = "CONVERGED!\n";
      print (_t1372);
      stabilize_all;
    }
  }
  int _t1373 = 5000;
  bool _t1374 = prim >007F (steps134F, _t1373);
  if _t1374 {
    stabilize_all;
  }
}
/* Program end */
##### high-ir: after simple-to-high translation ####
## properties
  GlobalInit StabilizeAll GlobalReduce StrandSets GlobalUpdate NewStrands StrandCommunication StrandsMayDie HasInputs HasGlobals ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
## globals
  input meshData15B1 (meshData) = <no-default>
  input 0space0853_intermedateGlobal15B2 (space) = <no-default>
  input 0data0855_intermedateGlobal15B3 (data) = <no-default>
  input rad15B4 (rad) = <default>
  input eps15B5 (eps) = <default>
  input v015B6 (v0) = <default>
  input fBias15B7 (fBias) = <default>
  input fStren15B8 (fStren) = <default>
  input zfuz15B9 (zfuz) = <default>
  input ipos15BA (ipos) = <no-default>
## functions
  function real max178C (particle P1784#1) {
    ENTRY178B:  preds = []
      tensor[3] _t1785#1 = P1784.step;
      real _t1788#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (_t1785);
      return _t1788
}
  function bool all1783 (particle P177D#1) {
    ENTRY1782:  preds = []
      bool _t177E#1 = P177D.found;
      return _t177E
}
  function int sum177C (particle P1776#1) {
    ENTRY177B:  preds = []
      int _t1777#1 = P1776.testp;
      return _t1777
}
  function int max1775 (particle P176F#1) {
    ENTRY1774:  preds = []
      int _t1770#1 = P176F.steps;
      return _t1770
}
  function int sum176E (particle P1768#1) {
    ENTRY176D:  preds = []
      int _t1769#1 = P1768.test;
      return _t1769
}
  function int[2] nextCell415EE (int faceIdx15CF#2, int cell15D0#1, femData:Mesh mesh15D1#1) {
    ENTRY15ED:  preds = []
      int _t15D2#1 = -1;
      bool _t15D4#1 = EQ<int>(faceIdx15CF,_t15D2);
      if _t15D4 then goto ASSIGN15D8 else goto ASSIGN15DF
    ASSIGN15D8:  preds = [COND15EB]
      int _t15D7#1 = -1;
      int _t15D9#1 = -1;
      int[2] _t15DB#1 = <int[2]>{_t15D7,_t15D9};
      return _t15DB
      goto JOIN15D6
    JOIN15D6:  preds = [*RETURN(_t15DB)15DD,*RETURN(_t15E8)15EA]
      unreachable
    ASSIGN15DF:  preds = [COND15EB]
      int _t15DE#1 = 8;
      int _t15E0#1 = IMul(cell15D0,_t15DE);
      int _t15E2#1 = 2;
      int _t15E4#1 = IMul(faceIdx15CF,_t15E2);
      int _t15E6#1 = IAdd(_t15E0,_t15E4);
      int[2] _t15E8#1 = ExtractFemItemN<[femData:Mesh,int],int[2],CellFaceCell(Mesh),0000,"",[],int>(mesh15D1,_t15E6);
      return _t15E8
      goto JOIN15D6
}
  function tensor[3] fStep16E3 (tensor[3] s15EF#3) {
    ENTRY16E2:  preds = []
      real zfuz15F0#2 = globals.zfuz15B9;
      real x15F2#11 = TensorIndex<tensor[3],[0]>(s15EF);
      real y15F4#3 = TensorIndex<tensor[3],[1]>(s15EF);
      real z15F6#1 = TensorIndex<tensor[3],[2]>(s15EF);
      real _t15F8#1 = 0.2e1;
      real _t15FA#1 = 0.2e1;
      real _t15FC#1 = 0.3e1;
      int _t15FE#0 = 2;
      real _t1600#1 = λ(T0[])<(T0)^2> (x15F2);
      real _t1602#1 = λ(T0[],T1[])<(T0 * T1)> (_t15FC,_t1600);
      real _t1604#1 = λ(T0[],T1[])<(T0) - (T1)> (_t15FA,_t1602);
      int _t1606#0 = 2;
      real _t1608#1 = λ(T0[])<(T0)^2> (_t1604);
      real _t160A#1 = λ(T0[],T1[])<(T0 * T1)> (_t15F8,_t1608);
      real _t160C#1 = 0.12e2;
      real _t160E#1 = λ(T0[],T1[])<(T0 * T1)> (_t160C,x15F2);
      int _t1610#0 = 3;
      real _t1612#1 = λ(T0[])<(T0)^3> (x15F2);
      real _t1614#1 = λ(T0[])<Neg(T0)> (_t1612);
      real _t1616#1 = 0.2e1;
      real _t1618#1 = λ(T0[],T1[])<(T0 * T1)> (_t1616,x15F2);
      real _t161A#1 = λ(T0[],T1[])<(T0 + T1)> (_t1614,_t1618);
      real _t161C#1 = λ(T0[],T1[])<(T0 + T1)> (_t161A,y15F4);
      real _t161E#1 = λ(T0[],T1[])<(T0 * T1)> (_t160E,_t161C);
      real _t1620#1 = λ(T0[],T1[])<(T0) - (T1)> (_t160A,_t161E);
      real _t1622#1 = 0.2e1;
      real _t1624#1 = 0.2e1;
      real _t1626#1 = 0.3e1;
      int _t1628#0 = 2;
      real _t162A#1 = λ(T0[])<(T0)^2> (x15F2);
      real _t162C#1 = λ(T0[],T1[])<(T0 * T1)> (_t1626,_t162A);
      real _t162E#1 = λ(T0[],T1[])<(T0) - (T1)> (_t1624,_t162C);
      real _t1630#1 = λ(T0[],T1[])<(T0 * T1)> (_t1622,_t162E);
      real _t1632#1 = 0.e0;
      tensor[3] _t1634#1 = <tensor[3]>[_t1620,_t1630,_t1632];
      real _t1636#1 = 0.2e1;
      real _t1638#1 = 0.2e1;
      real _t163A#1 = 0.3e1;
      int _t163C#0 = 2;
      real _t163E#1 = λ(T0[])<(T0)^2> (x15F2);
      real _t1640#1 = λ(T0[],T1[])<(T0 * T1)> (_t163A,_t163E);
      real _t1642#1 = λ(T0[],T1[])<(T0) - (T1)> (_t1638,_t1640);
      real _t1644#1 = λ(T0[],T1[])<(T0 * T1)> (_t1636,_t1642);
      real _t1646#1 = 0.2e1;
      real _t1648#1 = 0.e0;
      tensor[3] _t164A#1 = <tensor[3]>[_t1644,_t1646,_t1648];
      real _t164C#1 = 0.e0;
      real _t164E#1 = 0.e0;
      real _t1650#1 = 0.2e1;
      real _t1652#1 = λ(T0[],T1[])<(T0 * T1)> (_t1650,zfuz15F0);
      tensor[3] _t1654#1 = <tensor[3]>[_t164C,_t164E,_t1652];
      tensor[3,3] H1656#2 = <tensor[3,3]>[_t1634,_t164A,_t1654];
      real _t1658#1 = 0.2e1;
      real _t165A#1 = 0.2e1;
      real _t165C#1 = 0.3e1;
      int _t165E#0 = 2;
      real _t1660#1 = λ(T0[])<(T0)^2> (x15F2);
      real _t1662#1 = λ(T0[],T1[])<(T0 * T1)> (_t165C,_t1660);
      real _t1664#1 = λ(T0[],T1[])<(T0) - (T1)> (_t165A,_t1662);
      real _t1666#1 = λ(T0[],T1[])<(T0 * T1)> (_t1658,_t1664);
      int _t1668#0 = 3;
      real _t166A#1 = λ(T0[])<(T0)^3> (x15F2);
      real _t166C#1 = λ(T0[])<Neg(T0)> (_t166A);
      real _t166E#1 = 0.2e1;
      real _t1670#1 = λ(T0[],T1[])<(T0 * T1)> (_t166E,x15F2);
      real _t1672#1 = λ(T0[],T1[])<(T0 + T1)> (_t166C,_t1670);
      real _t1674#1 = λ(T0[],T1[])<(T0 + T1)> (_t1672,y15F4);
      real _t1676#1 = λ(T0[],T1[])<(T0 * T1)> (_t1666,_t1674);
      real _t1678#1 = 0.2e1;
      int _t167A#0 = 3;
      real _t167C#1 = λ(T0[])<(T0)^3> (x15F2);
      real _t167E#1 = λ(T0[])<Neg(T0)> (_t167C);
      real _t1680#1 = 0.2e1;
      real _t1682#1 = λ(T0[],T1[])<(T0 * T1)> (_t1680,x15F2);
      real _t1684#1 = λ(T0[],T1[])<(T0 + T1)> (_t167E,_t1682);
      real _t1686#1 = λ(T0[],T1[])<(T0 + T1)> (_t1684,y15F4);
      real _t1688#1 = λ(T0[],T1[])<(T0 * T1)> (_t1678,_t1686);
      real _t168A#1 = 0.2e1;
      real _t168C#1 = λ(T0[],T1[])<(T0 * T1)> (_t168A,zfuz15F0);
      real _t168E#1 = λ(T0[],T1[])<(T0 * T1)> (_t168C,z15F6);
      tensor[3] g1690#1 = <tensor[3]>[_t1676,_t1688,_t168E];
      (real[3] evals1693#0,tensor[3][3] E1692#2) = Eigen3x3(H1656);
      (real[3] L1695#1,tensor[3][3] evecs1696#0) = Eigen3x3(H1656);
      real _t1698#1 = 0.1e1;
      int _t169A#1 = 0;
      real _t169C#1 = Subscript<real[3]>(L1695,_t169A);
      real _t169E#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t1698,_t169C);
      real _t16A0#1 = λ(T0[])<Neg(T0)> (_t169E);
      int _t16A2#1 = 0;
      tensor[3] _t16A4#1 = Subscript<tensor[3][3]>(E1692,_t16A2);
      tensor[3] _t16A6#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (_t16A0,_t16A4);
      int _t16A8#1 = 0;
      tensor[3] _t16AA#1 = Subscript<tensor[3][3]>(E1692,_t16A8);
      tensor[3,3] _t16AC#1 = λ(T0[3],T1[3])<(T0_{i0} * T1_{i1})>_{3 3} (_t16A6,_t16AA);
      tensor[3] up16AE#7 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (_t16AC,g1690);
      real _t16B1#1 = TensorIndex<tensor[3],[0]>(up16AE);
      real _t16B3#1 = TensorIndex<tensor[3],[0]>(up16AE);
      bool _t16B5#1 = EQ<real>(_t16B1,_t16B3);
      bool _t16B7#1 = BNot(_t16B5);
      if _t16B7 then goto ASSIGN16BC else goto ASSIGN16BF
    ASSIGN16BC:  preds = [COND16D5]
      bool _t16BA#1 = true;
      goto JOIN16B9
    JOIN16B9:  preds = [ASSIGN16BC,ASSIGN16D4]
      bool _t16BB#1 = phi(_t16BA,_t16D3)
      if _t16BB then goto ASSIGN16D8 else goto JOIN16D6
    ASSIGN16D8:  preds = [COND16E0]
      real _t16D7#1 = +inf;
      real _t16D9#1 = +inf;
      real _t16DB#1 = +inf;
      tensor[3] _t16DD#1 = <tensor[3]>[_t16D7,_t16D9,_t16DB];
      return _t16DD
      goto JOIN16D6
    JOIN16D6:  preds = [*RETURN(_t16DD)16DF,COND16E0]
      return up16AE
    ASSIGN16BF:  preds = [COND16D5]
      real _t16BE#1 = TensorIndex<tensor[3],[1]>(up16AE);
      real _t16C0#1 = TensorIndex<tensor[3],[1]>(up16AE);
      bool _t16C2#1 = EQ<real>(_t16BE,_t16C0);
      bool _t16C4#1 = BNot(_t16C2);
      if _t16C4 then goto ASSIGN16C9 else goto ASSIGN16CB
    ASSIGN16C9:  preds = [COND16D2]
      bool _t16C7#1 = true;
      goto JOIN16C6
    JOIN16C6:  preds = [ASSIGN16C9,ASSIGN16D1]
      bool _t16C8#1 = phi(_t16C7,_t16D0)
      bool _t16D3#1 = _t16C8;
      goto JOIN16B9
    ASSIGN16CB:  preds = [COND16D2]
      real _t16CA#1 = TensorIndex<tensor[3],[2]>(up16AE);
      real _t16CC#1 = TensorIndex<tensor[3],[2]>(up16AE);
      bool _t16CE#1 = EQ<real>(_t16CA,_t16CC);
      bool _t16D0#1 = BNot(_t16CE);
      goto JOIN16C6
}
  function tensor[3,3] fPerp1767 (tensor[3] s16E4#3) {
    ENTRY1766:  preds = []
      real zfuz16E5#1 = globals.zfuz15B9;
      real x16E7#6 = TensorIndex<tensor[3],[0]>(s16E4);
      real y16E9#1 = TensorIndex<tensor[3],[1]>(s16E4);
      real z16EB#0 = TensorIndex<tensor[3],[2]>(s16E4);
      real _t16ED#1 = 0.2e1;
      real _t16EF#1 = 0.2e1;
      real _t16F1#1 = 0.3e1;
      int _t16F3#0 = 2;
      real _t16F5#1 = λ(T0[])<(T0)^2> (x16E7);
      real _t16F7#1 = λ(T0[],T1[])<(T0 * T1)> (_t16F1,_t16F5);
      real _t16F9#1 = λ(T0[],T1[])<(T0) - (T1)> (_t16EF,_t16F7);
      int _t16FB#0 = 2;
      real _t16FD#1 = λ(T0[])<(T0)^2> (_t16F9);
      real _t16FF#1 = λ(T0[],T1[])<(T0 * T1)> (_t16ED,_t16FD);
      real _t1701#1 = 0.12e2;
      real _t1703#1 = λ(T0[],T1[])<(T0 * T1)> (_t1701,x16E7);
      int _t1705#0 = 3;
      real _t1707#1 = λ(T0[])<(T0)^3> (x16E7);
      real _t1709#1 = λ(T0[])<Neg(T0)> (_t1707);
      real _t170B#1 = 0.2e1;
      real _t170D#1 = λ(T0[],T1[])<(T0 * T1)> (_t170B,x16E7);
      real _t170F#1 = λ(T0[],T1[])<(T0 + T1)> (_t1709,_t170D);
      real _t1711#1 = λ(T0[],T1[])<(T0 + T1)> (_t170F,y16E9);
      real _t1713#1 = λ(T0[],T1[])<(T0 * T1)> (_t1703,_t1711);
      real _t1715#1 = λ(T0[],T1[])<(T0) - (T1)> (_t16FF,_t1713);
      real _t1717#1 = 0.2e1;
      real _t1719#1 = 0.2e1;
      real _t171B#1 = 0.3e1;
      int _t171D#0 = 2;
      real _t171F#1 = λ(T0[])<(T0)^2> (x16E7);
      real _t1721#1 = λ(T0[],T1[])<(T0 * T1)> (_t171B,_t171F);
      real _t1723#1 = λ(T0[],T1[])<(T0) - (T1)> (_t1719,_t1721);
      real _t1725#1 = λ(T0[],T1[])<(T0 * T1)> (_t1717,_t1723);
      real _t1727#1 = 0.e0;
      tensor[3] _t1729#1 = <tensor[3]>[_t1715,_t1725,_t1727];
      real _t172B#1 = 0.2e1;
      real _t172D#1 = 0.2e1;
      real _t172F#1 = 0.3e1;
      int _t1731#0 = 2;
      real _t1733#1 = λ(T0[])<(T0)^2> (x16E7);
      real _t1735#1 = λ(T0[],T1[])<(T0 * T1)> (_t172F,_t1733);
      real _t1737#1 = λ(T0[],T1[])<(T0) - (T1)> (_t172D,_t1735);
      real _t1739#1 = λ(T0[],T1[])<(T0 * T1)> (_t172B,_t1737);
      real _t173B#1 = 0.2e1;
      real _t173D#1 = 0.e0;
      tensor[3] _t173F#1 = <tensor[3]>[_t1739,_t173B,_t173D];
      real _t1741#1 = 0.e0;
      real _t1743#1 = 0.e0;
      real _t1745#1 = 0.2e1;
      real _t1747#1 = λ(T0[],T1[])<(T0 * T1)> (_t1745,zfuz16E5);
      tensor[3] _t1749#1 = <tensor[3]>[_t1741,_t1743,_t1747];
      tensor[3,3] H174B#1 = <tensor[3,3]>[_t1729,_t173F,_t1749];
      (real[3] evals174E#0,tensor[3][3] _t174D#1) = Eigen3x3(H174B);
      int _t1750#1 = 0;
      tensor[3] E21752#2 = Subscript<tensor[3][3]>(_t174D,_t1750);
      tensor[3,3] _t1754#1 = λ()<δ_{i0,i1}>_{3 3} ();
      tensor[3,3] _t1756#1 = λ(T0[3],T1[3])<(T0_{i0} * T1_{i1})>_{3 3} (E21752,E21752);
      tensor[3,3] m1758#3 = λ(T0[3 3],T1[3 3])<(T0_{i0,i1}) - (T1_{i0,i1})>_{3 3} (_t1754,_t1756);
      real t175A#2 = λ(T0[3 3],T1[3 3])<Σ(i0=0..2)(i1=0..2)<((T0_{i0,i1} * T1_{i0,i1}))>(i0=0..2)(i1=0..2)> (m1758,m1758);
      bool _t175C#1 = EQ<real>(t175A,t175A);
      bool _t175E#1 = BNot(_t175C);
      if _t175E then goto ASSIGN1762 else goto JOIN1760
    ASSIGN1762:  preds = [COND1764]
      tensor[3,3] _t1761#1 = λ()<Z_{i0,i1}>_{3 3} ();
      return _t1761
      goto JOIN1760
    JOIN1760:  preds = [*RETURN(_t1761)1763,COND1764]
      return m1758
}
## input initialization
  ENTRY15CD:  preds = []
    real rad15BB#1 = 0.1e-1;
    globals.rad15B4 = rad15BB;
    real eps15BE#1 = 0.1e-1;
    globals.eps15B5 = eps15BE;
    real v015C1#1 = 0.625e-1;
    globals.v015B6 = v015C1;
    real fBias15C4#1 = 0.1e-1;
    globals.fBias15B7 = fBias15C4;
    real fStren15C7#1 = 0.1e-1;
    globals.fStren15B8 = fStren15C7;
    real zfuz15CA#1 = 0.1e-1;
    globals.zfuz15B9 = zfuz15CA;
    return
## global-variable initialization
  ENTRY17A3:  preds = []
    femData:Mesh meshData178D#2 = globals.meshData15B1;
    int _t178F#1 = 0;
    int _t1791#1 = 1;
    int _t1793#1 = ExtractFemItem<int,NumCell(Mesh)>(meshData178D);
    int _t1795#1 = ISub(_t1793,_t1791);
    int[] _t1797#1 = Range(_t178F,_t1795);
    femData:MeshCell[] _t1799#1 = <femData:MeshCell[]>{};
  FOREACH179D:  preds = [ASSIGN179A,NEXT17A2]
    foreach (_t179B in _t1797) on exit goto RETURN17A4
      femData:MeshCell[] _t179C#1 = phi(_t1799,_t17A0)
    femData:MeshCell _t179E#1 = LoadFem<femData:MeshCell>(meshData178D,_t179B);
    femData:MeshCell[] _t17A0#1 = Append<femData:MeshCell>(_t179C,_t179E);
    goto FOREACH179D
  RETURN17A4:  preds = [FOREACH179D]
    return
## strand
  strand particle (tensor[3] pos017AF#1, real hh017B0#1) in 3D
    state:
      output tensor[3] pos;
      output tensor[3] _pos;
      real hh;
      tensor[3] step;
      bool found;
      int nfs;
      int test;
      int testp;
      int steps;
    state init
      ENTRY17D0:  preds = []
        tensor[3] pos17BE#2 = pos017AF;
        tensor[3] _pos17C0#1 = pos17BE;
        real hh17C2#1 = hh017B0;
        tensor[3] step17C4#1 = λ()<Z_{i0}>_{3} ();
        bool found17C6#1 = false;
        int nfs17C8#1 = 0;
        int test17CA#1 = 1;
        int testp17CC#1 = 0;
        int steps17CE#1 = 0;
        self.pos = pos17BE;
        self._pos = _pos17C0;
        self.hh = hh17C2;
        self.step = step17C4;
        self.found = found17C6;
        self.nfs = nfs17C8;
        self.test = test17CA;
        self.testp = testp17CC;
        self.steps = steps17CE;
        return
    end state init
    method update
        ENTRY1D2B:  preds = []
          real rad17DF#12 = globals.rad15B4;
          real eps17DE#1 = globals.eps15B5;
          real fBias17DD#3 = globals.fBias15B7;
          real fStren17DC#3 = globals.fStren15B8;
          real zfuz17DB#6 = globals.zfuz15B9;
          tensor[3] pos17E5#14 = self.pos;
          tensor[3] _pos17E6#0 = self._pos;
          real hh17E7#6 = self.hh;
          tensor[3] step17E8#0 = self.step;
          bool found17E9#6 = self.found;
          int nfs17EA#6 = self.nfs;
          int test17EB#0 = self.test;
          int testp17EC#5 = self.testp;
          int steps17ED#1 = self.steps;
          int _t17F7#1 = 1;
          int steps17F9#4 = IAdd(steps17ED,_t17F7);
          real _t17FE#1 = 0.e0;
          real _t1800#1 = 0.e0;
          real _t1802#1 = 0.e0;
          tensor[3] _t1804#1 = <tensor[3]>[_t17FE,_t1800,_t1802];
          tensor[3] mid1806#3 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (pos17E5,_t1804);
          real _t1809#1 = TensorIndex<tensor[3],[0]>(mid1806);
          real _t180B#1 = λ(T0[])<Abs(T0)> (_t1809);
          real _t180D#1 = 0.4e1;
          bool _t180F#1 = LTE<real>(_t180B,_t180D);
          if _t180F then goto ASSIGN1814 else goto ASSIGN182C
        ASSIGN1814:  preds = [COND182D]
          real _t1813#1 = TensorIndex<tensor[3],[1]>(mid1806);
          real _t1815#1 = λ(T0[])<Abs(T0)> (_t1813);
          real _t1817#1 = 0.4e1;
          bool _t1819#1 = LTE<real>(_t1815,_t1817);
          if _t1819 then goto ASSIGN181D else goto ASSIGN1826
        ASSIGN181D:  preds = [COND1827]
          real _t181C#1 = TensorIndex<tensor[3],[2]>(mid1806);
          real _t181E#1 = λ(T0[])<Abs(T0)> (_t181C);
          real _t1820#1 = 0.4e1;
          bool _t1822#1 = LTE<real>(_t181E,_t1820);
          goto JOIN181B
        JOIN181B:  preds = [ASSIGN1824,ASSIGN1826]
          bool _t1823#1 = phi(_t1822,_t1825)
          bool _t1828#1 = _t1823;
          goto JOIN1811
        JOIN1811:  preds = [ASSIGN182A,ASSIGN182C]
          bool _t1829#1 = phi(_t1828,_t182B)
          bool _t182E#1 = _t1829;
          if _t182E then goto ASSIGN1835 else goto ASSIGN1918
        ASSIGN1835:  preds = [COND1919]
          real _t1834#1 = TensorIndex<tensor[3],[0]>(pos17E5);
          real _t1836#1 = TensorIndex<tensor[3],[0]>(pos17E5);
          bool _t1838#1 = EQ<real>(_t1834,_t1836);
          bool _t183A#1 = BNot(_t1838);
          if _t183A then goto ASSIGN183F else goto ASSIGN1842
        ASSIGN183F:  preds = [COND1858]
          bool _t183D#1 = true;
          goto JOIN183C
        JOIN183C:  preds = [ASSIGN183F,ASSIGN1857]
          bool _t183E#1 = phi(_t183D,_t1856)
          bool _t1859#1 = _t183E;
          bool _t185B#1 = BNot(_t1859);
          if _t185B then goto ASSIGN1860 else goto ASSIGN1912
        ASSIGN1860:  preds = [COND1913]
          real x185F#11 = TensorIndex<tensor[3],[0]>(pos17E5);
          real y1861#3 = TensorIndex<tensor[3],[1]>(pos17E5);
          real z1863#1 = TensorIndex<tensor[3],[2]>(pos17E5);
          real _t1865#1 = 0.2e1;
          real _t1867#1 = 0.2e1;
          real _t1869#1 = 0.3e1;
          int _t186B#0 = 2;
          real _t186D#1 = λ(T0[])<(T0)^2> (x185F);
          real _t186F#1 = λ(T0[],T1[])<(T0 * T1)> (_t1869,_t186D);
          real _t1871#1 = λ(T0[],T1[])<(T0) - (T1)> (_t1867,_t186F);
          int _t1873#0 = 2;
          real _t1875#1 = λ(T0[])<(T0)^2> (_t1871);
          real _t1877#1 = λ(T0[],T1[])<(T0 * T1)> (_t1865,_t1875);
          real _t1879#1 = 0.12e2;
          real _t187B#1 = λ(T0[],T1[])<(T0 * T1)> (_t1879,x185F);
          int _t187D#0 = 3;
          real _t187F#1 = λ(T0[])<(T0)^3> (x185F);
          real _t1881#1 = λ(T0[])<Neg(T0)> (_t187F);
          real _t1883#1 = 0.2e1;
          real _t1885#1 = λ(T0[],T1[])<(T0 * T1)> (_t1883,x185F);
          real _t1887#1 = λ(T0[],T1[])<(T0 + T1)> (_t1881,_t1885);
          real _t1889#1 = λ(T0[],T1[])<(T0 + T1)> (_t1887,y1861);
          real _t188B#1 = λ(T0[],T1[])<(T0 * T1)> (_t187B,_t1889);
          real _t188D#1 = λ(T0[],T1[])<(T0) - (T1)> (_t1877,_t188B);
          real _t188F#1 = 0.2e1;
          real _t1891#1 = 0.2e1;
          real _t1893#1 = 0.3e1;
          int _t1895#0 = 2;
          real _t1897#1 = λ(T0[])<(T0)^2> (x185F);
          real _t1899#1 = λ(T0[],T1[])<(T0 * T1)> (_t1893,_t1897);
          real _t189B#1 = λ(T0[],T1[])<(T0) - (T1)> (_t1891,_t1899);
          real _t189D#1 = λ(T0[],T1[])<(T0 * T1)> (_t188F,_t189B);
          real _t189F#1 = 0.e0;
          tensor[3] _t18A1#1 = <tensor[3]>[_t188D,_t189D,_t189F];
          real _t18A3#1 = 0.2e1;
          real _t18A5#1 = 0.2e1;
          real _t18A7#1 = 0.3e1;
          int _t18A9#0 = 2;
          real _t18AB#1 = λ(T0[])<(T0)^2> (x185F);
          real _t18AD#1 = λ(T0[],T1[])<(T0 * T1)> (_t18A7,_t18AB);
          real _t18AF#1 = λ(T0[],T1[])<(T0) - (T1)> (_t18A5,_t18AD);
          real _t18B1#1 = λ(T0[],T1[])<(T0 * T1)> (_t18A3,_t18AF);
          real _t18B3#1 = 0.2e1;
          real _t18B5#1 = 0.e0;
          tensor[3] _t18B7#1 = <tensor[3]>[_t18B1,_t18B3,_t18B5];
          real _t18B9#1 = 0.e0;
          real _t18BB#1 = 0.e0;
          real _t18BD#1 = 0.2e1;
          real _t18BF#1 = λ(T0[],T1[])<(T0 * T1)> (_t18BD,zfuz17DB);
          tensor[3] _t18C1#1 = <tensor[3]>[_t18B9,_t18BB,_t18BF];
          tensor[3,3] H18C3#1 = <tensor[3,3]>[_t18A1,_t18B7,_t18C1];
          real _t18C5#1 = 0.2e1;
          real _t18C7#1 = 0.2e1;
          real _t18C9#1 = 0.3e1;
          int _t18CB#0 = 2;
          real _t18CD#1 = λ(T0[])<(T0)^2> (x185F);
          real _t18CF#1 = λ(T0[],T1[])<(T0 * T1)> (_t18C9,_t18CD);
          real _t18D1#1 = λ(T0[],T1[])<(T0) - (T1)> (_t18C7,_t18CF);
          real _t18D3#1 = λ(T0[],T1[])<(T0 * T1)> (_t18C5,_t18D1);
          int _t18D5#0 = 3;
          real _t18D7#1 = λ(T0[])<(T0)^3> (x185F);
          real _t18D9#1 = λ(T0[])<Neg(T0)> (_t18D7);
          real _t18DB#1 = 0.2e1;
          real _t18DD#1 = λ(T0[],T1[])<(T0 * T1)> (_t18DB,x185F);
          real _t18DF#1 = λ(T0[],T1[])<(T0 + T1)> (_t18D9,_t18DD);
          real _t18E1#1 = λ(T0[],T1[])<(T0 + T1)> (_t18DF,y1861);
          real _t18E3#1 = λ(T0[],T1[])<(T0 * T1)> (_t18D3,_t18E1);
          real _t18E5#1 = 0.2e1;
          int _t18E7#0 = 3;
          real _t18E9#1 = λ(T0[])<(T0)^3> (x185F);
          real _t18EB#1 = λ(T0[])<Neg(T0)> (_t18E9);
          real _t18ED#1 = 0.2e1;
          real _t18EF#1 = λ(T0[],T1[])<(T0 * T1)> (_t18ED,x185F);
          real _t18F1#1 = λ(T0[],T1[])<(T0 + T1)> (_t18EB,_t18EF);
          real _t18F3#1 = λ(T0[],T1[])<(T0 + T1)> (_t18F1,y1861);
          real _t18F5#1 = λ(T0[],T1[])<(T0 * T1)> (_t18E5,_t18F3);
          real _t18F7#1 = 0.2e1;
          real _t18F9#1 = λ(T0[],T1[])<(T0 * T1)> (_t18F7,zfuz17DB);
          real _t18FB#1 = λ(T0[],T1[])<(T0 * T1)> (_t18F9,z1863);
          tensor[3] g18FD#1 = <tensor[3]>[_t18E3,_t18F5,_t18FB];
          (real[3] _t18FF#1,tensor[3][3] evecs1900#0) = Eigen3x3(H18C3);
          int _t1902#1 = 0;
          real _t1904#1 = Subscript<real[3]>(_t18FF,_t1902);
          real _t1906#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (g18FD);
          real _t1908#1 = λ(T0[],T1[])<(T0 + T1)> (fBias17DD,_t1906);
          real _t190A#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t1904,_t1908);
          real _t190C#1 = _t190A;
          bool _t190E#1 = GTE<real>(_t190C,fStren17DC);
          goto JOIN185D
        JOIN185D:  preds = [ASSIGN1910,ASSIGN1912]
          bool _t190F#1 = phi(_t190E,_t1911)
          bool _t1914#1 = _t190F;
          goto JOIN1830
        JOIN1830:  preds = [ASSIGN1916,ASSIGN1918]
          bool _t1915#1 = phi(_t1914,_t1917)
          bool _t191A#1 = _t1915;
          bool _t191C#1 = BNot(_t191A);
          if _t191C then goto DIE191F else goto JOIN191E
        DIE191F:  preds = [COND1920]
          die
          goto JOIN191E
        JOIN191E:  preds = [*DIE191F,COND1920]
          bool _t1921#1 = BNot(found17E9);
          if _t1921 then goto ASSIGN1926 else goto ASSIGN1977
        ASSIGN1926:  preds = [COND1D2A]
          tensor[3] step1924#3 = fStep16E3 (pos17E5);
          tensor[3] pos1927#8 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos17E5,step1924);
          tensor[3] _pos192A#1 = pos1927;
          real _t192F#1 = TensorIndex<tensor[3],[0]>(pos1927);
          real _t1931#1 = TensorIndex<tensor[3],[0]>(pos1927);
          bool _t1933#1 = EQ<real>(_t192F,_t1931);
          bool _t1935#1 = BNot(_t1933);
          if _t1935 then goto ASSIGN193A else goto ASSIGN193D
        ASSIGN193A:  preds = [COND1953]
          bool _t1938#1 = true;
          goto JOIN1937
        JOIN1937:  preds = [ASSIGN193A,ASSIGN1952]
          bool _t1939#1 = phi(_t1938,_t1951)
          bool _t1954#1 = _t1939;
          if _t1954 then goto DIE1957 else goto JOIN1956
        DIE1957:  preds = [COND1958]
          die
          goto JOIN1956
        JOIN1956:  preds = [*DIE1957,COND1958]
          real _t1959#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (step1924);
          real _t195B#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t1959,rad17DF);
          bool _t195D#1 = GT<real>(_t195B,eps17DE);
          if _t195D then goto ASSIGN1961 else goto ASSIGN196E
        ASSIGN1961:  preds = [COND1972]
          int _t1960#1 = 1;
          int nfs1962#2 = IAdd(nfs17EA,_t1960);
          int _t1965#1 = 10;
          bool _t1967#1 = GT<int>(nfs1962,_t1965);
          if _t1967 then goto DIE196A else goto JOIN1969
        DIE196A:  preds = [COND196B]
          die
          goto JOIN1969
        JOIN1969:  preds = [*DIE196A,COND196B]
          goto JOIN195F
        JOIN195F:  preds = [JOIN1969,ASSIGN1971]
          int testp1970#1 = phi(testp17EC,testp196F)
          int nfs1963#1 = phi(nfs1962,nfs17EA)
          bool found196D#1 = phi(found17E9,found196C)
          goto JOIN1923
        JOIN1923:  preds = [JOIN195F,JOIN1BFA]
          int testp1975#1 = phi(testp1970,testp17EC)
          int nfs1974#1 = phi(nfs1963,nfs17EA)
          bool found1973#1 = phi(found196D,found17E9)
          tensor[3] step1925#1 = phi(step1924,step1BC8)
          real hh1B57#1 = phi(hh17E7,hh1BC6)
          tensor[3] _pos192B#1 = phi(_pos192A,_pos1BB3)
          tensor[3] pos1928#1 = phi(pos1927,pos1BB0)
          self.pos = pos1928;
          self._pos = _pos192B;
          self.hh = hh1B57;
          self.step = step1925;
          self.found = found1973;
          self.nfs = nfs1974;
          self.testp = testp1975;
          self.steps = steps17F9;
          active
        ASSIGN196E:  preds = [COND1972]
          bool found196C#1 = true;
          int testp196F#1 = 1;
          goto JOIN195F
        ASSIGN193D:  preds = [COND1953]
          real _t193C#1 = TensorIndex<tensor[3],[1]>(pos1927);
          real _t193E#1 = TensorIndex<tensor[3],[1]>(pos1927);
          bool _t1940#1 = EQ<real>(_t193C,_t193E);
          bool _t1942#1 = BNot(_t1940);
          if _t1942 then goto ASSIGN1947 else goto ASSIGN1949
        ASSIGN1947:  preds = [COND1950]
          bool _t1945#1 = true;
          goto JOIN1944
        JOIN1944:  preds = [ASSIGN1947,ASSIGN194F]
          bool _t1946#1 = phi(_t1945,_t194E)
          bool _t1951#1 = _t1946;
          goto JOIN1937
        ASSIGN1949:  preds = [COND1950]
          real _t1948#1 = TensorIndex<tensor[3],[2]>(pos1927);
          real _t194A#1 = TensorIndex<tensor[3],[2]>(pos1927);
          bool _t194C#1 = EQ<real>(_t1948,_t194A);
          bool _t194E#1 = BNot(_t194C);
          goto JOIN1944
        ASSIGN1977:  preds = [COND1D2A]
          tensor[3] _t1976#1 = fStep16E3 (pos17E5);
          tensor[3] pos1978#16 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos17E5,_t1976);
          tensor[3] _pos197A#3 = pos1978;
          real _t197E#1 = TensorIndex<tensor[3],[0]>(pos1978);
          real _t1980#1 = TensorIndex<tensor[3],[0]>(pos1978);
          bool _t1982#1 = EQ<real>(_t197E,_t1980);
          bool _t1984#1 = BNot(_t1982);
          if _t1984 then goto ASSIGN1989 else goto ASSIGN198C
        ASSIGN1989:  preds = [COND19A2]
          bool _t1987#1 = true;
          goto JOIN1986
        JOIN1986:  preds = [ASSIGN1989,ASSIGN19A1]
          bool _t1988#1 = phi(_t1987,_t19A0)
          bool _t19A3#1 = _t1988;
          if _t19A3 then goto DIE19A6 else goto JOIN19A5
        DIE19A6:  preds = [COND19A7]
          die
          goto JOIN19A5
        JOIN19A5:  preds = [*DIE19A6,COND19A7]
          tensor[3] step19A8#3 = λ()<Z_{i0}>_{3} ();
          real oldE19AA#1 = 0.e0;
          tensor[3] force19AC#1 = λ()<Z_{i0}>_{3} ();
          int nn19AE#1 = 0;
          particle[] _t19B0#1 = SphereQuery<3,particle>(_pos197A,rad17DF);
        FOREACH19B6:  preds = [ASSIGN19B1,NEXT19FD]
          foreach (P19B2 in _t19B0) on exit goto ASSIGN19FF
            int nn19B5#3 = phi(nn19AE,nn19FB)
            tensor[3] force19B4#2 = phi(force19AC,force19F7)
            real oldE19B3#2 = phi(oldE19AA,oldE19CD)
          tensor[3] _t19B7#1 = P19B2.pos;
          tensor[3] _t19B9#1 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (_t19B7,pos1978);
          real _t19BC#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (_t19B9);
          real _t19BE#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t19BC,rad17DF);
          real _t19C1#1 = 0.1e1;
          real _t19C3#1 = λ(T0[],T1[])<(T0) - (T1)> (_t19C1,_t19BE);
          int _t19C5#0 = 4;
          real _t19C7#1 = λ(T0[])<(T0)^4> (_t19C3);
          real _t19C9#1 = _t19C7;
          real _t19CB#1 = _t19C9;
          real oldE19CD#1 = λ(T0[],T1[])<(T0 + T1)> (oldE19B3,_t19CB);
          tensor[3] _t19CF#1 = P19B2.pos;
          tensor[3] _t19D1#3 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (_t19CF,pos1978);
          real _t19D4#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (_t19D1);
          real _t19D6#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t19D4,rad17DF);
          int _t19D9#1 = -4;
          real _t19DB#1 = IntToReal(_t19D9);
          real _t19DD#1 = 0.1e1;
          real _t19DF#1 = λ(T0[],T1[])<(T0) - (T1)> (_t19DD,_t19D6);
          int _t19E1#0 = 3;
          real _t19E3#1 = λ(T0[])<(T0)^3> (_t19DF);
          real _t19E5#1 = λ(T0[],T1[])<(T0 * T1)> (_t19DB,_t19E3);
          real _t19E7#1 = _t19E5;
          real _t19E9#1 = 0.1e1;
          real _t19EB#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t19E9,rad17DF);
          real _t19ED#1 = λ(T0[],T1[])<(T0 * T1)> (_t19E7,_t19EB);
          tensor[3] _t19EF#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (_t19ED,_t19D1);
          real _t19F1#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (_t19D1);
          tensor[3] _t19F3#1 = λ(T0[3],T1[])<(T0_{i0}) / ( T1)>_{3} (_t19EF,_t19F1);
          tensor[3] _t19F5#1 = _t19F3;
          tensor[3] force19F7#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (force19B4,_t19F5);
          int _t19F9#1 = 1;
          int nn19FB#1 = IAdd(nn19B5,_t19F9);
          goto FOREACH19B6
        ASSIGN19FF:  preds = [FOREACH19B6]
          int _t19FE#1 = 0;
          bool _t1A00#1 = EQ<int>(_t19FE,nn19B5);
          if _t1A00 then goto ASSIGN1A04 else goto JOIN1A02
        ASSIGN1A04:  preds = [COND1B3C]
          real _t1A03#1 = 0.5e0;
          real _t1A05#1 = λ(T0[],T1[])<(T0 * T1)> (_t1A03,rad17DF);
          real _t1A07#1 = 0.e0;
          real _t1A09#1 = 0.e0;
          tensor[3] _t1A0B#1 = <tensor[3]>[_t1A05,_t1A07,_t1A09];
          tensor[3] npos1A0D#11 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos1978,_t1A0B);
          real _t1A12#1 = 0.e0;
          real _t1A14#1 = 0.e0;
          real _t1A16#1 = 0.e0;
          tensor[3] _t1A18#1 = <tensor[3]>[_t1A12,_t1A14,_t1A16];
          tensor[3] mid1A1A#3 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (npos1A0D,_t1A18);
          real _t1A1D#1 = TensorIndex<tensor[3],[0]>(mid1A1A);
          real _t1A1F#1 = λ(T0[])<Abs(T0)> (_t1A1D);
          real _t1A21#1 = 0.4e1;
          bool _t1A23#1 = LTE<real>(_t1A1F,_t1A21);
          if _t1A23 then goto ASSIGN1A28 else goto ASSIGN1A40
        ASSIGN1A28:  preds = [COND1A41]
          real _t1A27#1 = TensorIndex<tensor[3],[1]>(mid1A1A);
          real _t1A29#1 = λ(T0[])<Abs(T0)> (_t1A27);
          real _t1A2B#1 = 0.4e1;
          bool _t1A2D#1 = LTE<real>(_t1A29,_t1A2B);
          if _t1A2D then goto ASSIGN1A31 else goto ASSIGN1A3A
        ASSIGN1A31:  preds = [COND1A3B]
          real _t1A30#1 = TensorIndex<tensor[3],[2]>(mid1A1A);
          real _t1A32#1 = λ(T0[])<Abs(T0)> (_t1A30);
          real _t1A34#1 = 0.4e1;
          bool _t1A36#1 = LTE<real>(_t1A32,_t1A34);
          goto JOIN1A2F
        JOIN1A2F:  preds = [ASSIGN1A38,ASSIGN1A3A]
          bool _t1A37#1 = phi(_t1A36,_t1A39)
          bool _t1A3C#1 = _t1A37;
          goto JOIN1A25
        JOIN1A25:  preds = [ASSIGN1A3E,ASSIGN1A40]
          bool _t1A3D#1 = phi(_t1A3C,_t1A3F)
          bool _t1A42#1 = _t1A3D;
          if _t1A42 then goto ASSIGN1A49 else goto ASSIGN1B2C
        ASSIGN1A49:  preds = [COND1B2D]
          real _t1A48#1 = TensorIndex<tensor[3],[0]>(npos1A0D);
          real _t1A4A#1 = TensorIndex<tensor[3],[0]>(npos1A0D);
          bool _t1A4C#1 = EQ<real>(_t1A48,_t1A4A);
          bool _t1A4E#1 = BNot(_t1A4C);
          if _t1A4E then goto ASSIGN1A53 else goto ASSIGN1A56
        ASSIGN1A53:  preds = [COND1A6C]
          bool _t1A51#1 = true;
          goto JOIN1A50
        JOIN1A50:  preds = [ASSIGN1A53,ASSIGN1A6B]
          bool _t1A52#1 = phi(_t1A51,_t1A6A)
          bool _t1A6D#1 = _t1A52;
          bool _t1A6F#1 = BNot(_t1A6D);
          if _t1A6F then goto ASSIGN1A74 else goto ASSIGN1B26
        ASSIGN1A74:  preds = [COND1B27]
          real x1A73#11 = TensorIndex<tensor[3],[0]>(npos1A0D);
          real y1A75#3 = TensorIndex<tensor[3],[1]>(npos1A0D);
          real z1A77#1 = TensorIndex<tensor[3],[2]>(npos1A0D);
          real _t1A79#1 = 0.2e1;
          real _t1A7B#1 = 0.2e1;
          real _t1A7D#1 = 0.3e1;
          int _t1A7F#0 = 2;
          real _t1A81#1 = λ(T0[])<(T0)^2> (x1A73);
          real _t1A83#1 = λ(T0[],T1[])<(T0 * T1)> (_t1A7D,_t1A81);
          real _t1A85#1 = λ(T0[],T1[])<(T0) - (T1)> (_t1A7B,_t1A83);
          int _t1A87#0 = 2;
          real _t1A89#1 = λ(T0[])<(T0)^2> (_t1A85);
          real _t1A8B#1 = λ(T0[],T1[])<(T0 * T1)> (_t1A79,_t1A89);
          real _t1A8D#1 = 0.12e2;
          real _t1A8F#1 = λ(T0[],T1[])<(T0 * T1)> (_t1A8D,x1A73);
          int _t1A91#0 = 3;
          real _t1A93#1 = λ(T0[])<(T0)^3> (x1A73);
          real _t1A95#1 = λ(T0[])<Neg(T0)> (_t1A93);
          real _t1A97#1 = 0.2e1;
          real _t1A99#1 = λ(T0[],T1[])<(T0 * T1)> (_t1A97,x1A73);
          real _t1A9B#1 = λ(T0[],T1[])<(T0 + T1)> (_t1A95,_t1A99);
          real _t1A9D#1 = λ(T0[],T1[])<(T0 + T1)> (_t1A9B,y1A75);
          real _t1A9F#1 = λ(T0[],T1[])<(T0 * T1)> (_t1A8F,_t1A9D);
          real _t1AA1#1 = λ(T0[],T1[])<(T0) - (T1)> (_t1A8B,_t1A9F);
          real _t1AA3#1 = 0.2e1;
          real _t1AA5#1 = 0.2e1;
          real _t1AA7#1 = 0.3e1;
          int _t1AA9#0 = 2;
          real _t1AAB#1 = λ(T0[])<(T0)^2> (x1A73);
          real _t1AAD#1 = λ(T0[],T1[])<(T0 * T1)> (_t1AA7,_t1AAB);
          real _t1AAF#1 = λ(T0[],T1[])<(T0) - (T1)> (_t1AA5,_t1AAD);
          real _t1AB1#1 = λ(T0[],T1[])<(T0 * T1)> (_t1AA3,_t1AAF);
          real _t1AB3#1 = 0.e0;
          tensor[3] _t1AB5#1 = <tensor[3]>[_t1AA1,_t1AB1,_t1AB3];
          real _t1AB7#1 = 0.2e1;
          real _t1AB9#1 = 0.2e1;
          real _t1ABB#1 = 0.3e1;
          int _t1ABD#0 = 2;
          real _t1ABF#1 = λ(T0[])<(T0)^2> (x1A73);
          real _t1AC1#1 = λ(T0[],T1[])<(T0 * T1)> (_t1ABB,_t1ABF);
          real _t1AC3#1 = λ(T0[],T1[])<(T0) - (T1)> (_t1AB9,_t1AC1);
          real _t1AC5#1 = λ(T0[],T1[])<(T0 * T1)> (_t1AB7,_t1AC3);
          real _t1AC7#1 = 0.2e1;
          real _t1AC9#1 = 0.e0;
          tensor[3] _t1ACB#1 = <tensor[3]>[_t1AC5,_t1AC7,_t1AC9];
          real _t1ACD#1 = 0.e0;
          real _t1ACF#1 = 0.e0;
          real _t1AD1#1 = 0.2e1;
          real _t1AD3#1 = λ(T0[],T1[])<(T0 * T1)> (_t1AD1,zfuz17DB);
          tensor[3] _t1AD5#1 = <tensor[3]>[_t1ACD,_t1ACF,_t1AD3];
          tensor[3,3] H1AD7#1 = <tensor[3,3]>[_t1AB5,_t1ACB,_t1AD5];
          real _t1AD9#1 = 0.2e1;
          real _t1ADB#1 = 0.2e1;
          real _t1ADD#1 = 0.3e1;
          int _t1ADF#0 = 2;
          real _t1AE1#1 = λ(T0[])<(T0)^2> (x1A73);
          real _t1AE3#1 = λ(T0[],T1[])<(T0 * T1)> (_t1ADD,_t1AE1);
          real _t1AE5#1 = λ(T0[],T1[])<(T0) - (T1)> (_t1ADB,_t1AE3);
          real _t1AE7#1 = λ(T0[],T1[])<(T0 * T1)> (_t1AD9,_t1AE5);
          int _t1AE9#0 = 3;
          real _t1AEB#1 = λ(T0[])<(T0)^3> (x1A73);
          real _t1AED#1 = λ(T0[])<Neg(T0)> (_t1AEB);
          real _t1AEF#1 = 0.2e1;
          real _t1AF1#1 = λ(T0[],T1[])<(T0 * T1)> (_t1AEF,x1A73);
          real _t1AF3#1 = λ(T0[],T1[])<(T0 + T1)> (_t1AED,_t1AF1);
          real _t1AF5#1 = λ(T0[],T1[])<(T0 + T1)> (_t1AF3,y1A75);
          real _t1AF7#1 = λ(T0[],T1[])<(T0 * T1)> (_t1AE7,_t1AF5);
          real _t1AF9#1 = 0.2e1;
          int _t1AFB#0 = 3;
          real _t1AFD#1 = λ(T0[])<(T0)^3> (x1A73);
          real _t1AFF#1 = λ(T0[])<Neg(T0)> (_t1AFD);
          real _t1B01#1 = 0.2e1;
          real _t1B03#1 = λ(T0[],T1[])<(T0 * T1)> (_t1B01,x1A73);
          real _t1B05#1 = λ(T0[],T1[])<(T0 + T1)> (_t1AFF,_t1B03);
          real _t1B07#1 = λ(T0[],T1[])<(T0 + T1)> (_t1B05,y1A75);
          real _t1B09#1 = λ(T0[],T1[])<(T0 * T1)> (_t1AF9,_t1B07);
          real _t1B0B#1 = 0.2e1;
          real _t1B0D#1 = λ(T0[],T1[])<(T0 * T1)> (_t1B0B,zfuz17DB);
          real _t1B0F#1 = λ(T0[],T1[])<(T0 * T1)> (_t1B0D,z1A77);
          tensor[3] g1B11#1 = <tensor[3]>[_t1AF7,_t1B09,_t1B0F];
          (real[3] _t1B13#1,tensor[3][3] evecs1B14#0) = Eigen3x3(H1AD7);
          int _t1B16#1 = 0;
          real _t1B18#1 = Subscript<real[3]>(_t1B13,_t1B16);
          real _t1B1A#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (g1B11);
          real _t1B1C#1 = λ(T0[],T1[])<(T0 + T1)> (fBias17DD,_t1B1A);
          real _t1B1E#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t1B18,_t1B1C);
          real _t1B20#1 = _t1B1E;
          bool _t1B22#1 = GTE<real>(_t1B20,fStren17DC);
          goto JOIN1A71
        JOIN1A71:  preds = [ASSIGN1B24,ASSIGN1B26]
          bool _t1B23#1 = phi(_t1B22,_t1B25)
          bool _t1B28#1 = _t1B23;
          goto JOIN1A44
        JOIN1A44:  preds = [ASSIGN1B2A,ASSIGN1B2C]
          bool _t1B29#1 = phi(_t1B28,_t1B2B)
          bool _t1B2E#1 = _t1B29;
          if _t1B2E then goto NEW1B31 else goto JOIN1B30
        NEW1B31:  preds = [COND1B32]
          new particle(npos1A0D,hh17E7);
          goto JOIN1B30
        JOIN1B30:  preds = [NEW1B31,COND1B32]
          self.pos = pos1978;
          self._pos = _pos197A;
          self.hh = hh17E7;
          self.step = step19A8;
          self.found = found17E9;
          self.nfs = nfs17EA;
          self.testp = testp17EC;
          self.steps = steps17F9;
          active
          goto JOIN1A02
        JOIN1A02:  preds = [*ACTIVE1B33,COND1B3C]
          tensor[3,3] _t1B3D#1 = fPerp1767 (pos1978);
          tensor[3] force1B3F#2 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (_t1B3D,force19B4);
          tensor[3] es1B41#5 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (hh17E7,force1B3F);
          real _t1B43#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (es1B41);
          bool _t1B45#1 = GT<real>(_t1B43,rad17DF);
          if _t1B45 then goto ASSIGN1B49 else goto JOIN1B47
        ASSIGN1B49:  preds = [COND1B56]
          real _t1B48#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (es1B41);
          real _t1B4A#1 = λ(T0[],T1[])<(T0) / ( T1)> (rad17DF,_t1B48);
          real hh1B4C#1 = λ(T0[],T1[])<(T0 * T1)> (hh17E7,_t1B4A);
          real _t1B4F#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (es1B41);
          real _t1B51#1 = λ(T0[],T1[])<(T0) / ( T1)> (rad17DF,_t1B4F);
          tensor[3] es1B53#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (_t1B51,es1B41);
          goto JOIN1B47
        JOIN1B47:  preds = [ASSIGN1B55,COND1B56]
          tensor[3] es1B54#5 = phi(es1B53,es1B41)
          real hh1B4D#2 = phi(hh1B4C,hh17E7)
          tensor[3] samplePos1B58#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos1978,es1B54);
          tensor[3] fs1B5A#2 = fStep16E3 (samplePos1B58);
          real _t1B5C#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (fs1B5A);
          real _t1B5E#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (es1B54);
          real _t1B60#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t1B5C,_t1B5E);
          real _t1B62#1 = 0.5e0;
          bool _t1B64#1 = GT<real>(_t1B60,_t1B62);
          if _t1B64 then goto ASSIGN1B68 else goto JOIN1B66
        ASSIGN1B68:  preds = [COND1B75]
          real _t1B67#1 = 0.5e0;
          real hh1B69#1 = λ(T0[],T1[])<(T0 * T1)> (hh1B4D,_t1B67);
          self.pos = pos1978;
          self._pos = _pos197A;
          self.hh = hh1B69;
          self.step = step19A8;
          self.found = found17E9;
          self.nfs = nfs17EA;
          self.testp = testp17EC;
          self.steps = steps17F9;
          active
          goto JOIN1B66
        JOIN1B66:  preds = [*ACTIVE1B6C,COND1B75]
          real hh1B6A#2 = phi(hh1B4D)
          tensor[3] oldPos1B76#2 = pos1978;
          tensor[3] up1B78#2 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (fs1B5A,es1B54);
          tensor[3] pos1B7A#4 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos1978,up1B78);
          tensor[3] _pos1B7C#2 = pos1B7A;
          particle[] _t1B7E#1 = SphereQuery<3,particle>(_pos1B7C,rad17DF);
          real accum1B80#1 = 0.e0;
        FOREACH1B84:  preds = [ASSIGN1B81,NEXT1B9D]
          foreach (P1B82 in _t1B7E) on exit goto ASSIGN1B9F
            real accum1B83#2 = phi(accum1B80,accum1B9B)
          tensor[3] _t1B85#1 = P1B82.pos;
          tensor[3] _t1B87#1 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (pos1B7A,_t1B85);
          real _t1B8A#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (_t1B87);
          real _t1B8C#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t1B8A,rad17DF);
          real _t1B8F#1 = 0.1e1;
          real _t1B91#1 = λ(T0[],T1[])<(T0) - (T1)> (_t1B8F,_t1B8C);
          int _t1B93#0 = 4;
          real _t1B95#1 = λ(T0[])<(T0)^4> (_t1B91);
          real _t1B97#1 = _t1B95;
          real _t1B99#1 = _t1B97;
          real accum1B9B#1 = λ(T0[],T1[])<(T0 + T1)> (accum1B83,_t1B99);
          goto FOREACH1B84
        ASSIGN1B9F:  preds = [FOREACH1B84]
          real newE1B9E#1 = accum1B83;
          real _t1BA0#1 = λ(T0[],T1[])<(T0) - (T1)> (newE1B9E,oldE19B3);
          real _t1BA2#1 = 0.5e0;
          tensor[3] _t1BA4#1 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (pos1B7A,oldPos1B76);
          tensor[3] _t1BA6#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (_t1BA2,_t1BA4);
          tensor[3] _t1BA8#1 = λ(T0[3])<Neg(T0_{i0})>_{3} (force1B3F);
          real _t1BAA#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (_t1BA6,_t1BA8);
          bool _t1BAC#1 = GT<real>(_t1BA0,_t1BAA);
          if _t1BAC then goto ASSIGN1BB1 else goto JOIN1BAE
        ASSIGN1BB1:  preds = [COND1BC3]
          tensor[3] pos1BAF#2 = oldPos1B76;
          tensor[3] _pos1BB2#1 = pos1BAF;
          real _t1BB5#1 = 0.5e0;
          real hh1BB7#1 = λ(T0[],T1[])<(T0 * T1)> (hh1B6A,_t1BB5);
          self.pos = pos1BAF;
          self._pos = _pos1BB2;
          self.hh = hh1BB7;
          self.step = step19A8;
          self.found = found17E9;
          self.nfs = nfs17EA;
          self.testp = testp17EC;
          self.steps = steps17F9;
          active
          goto JOIN1BAE
        JOIN1BAE:  preds = [*ACTIVE1BBA,COND1BC3]
          real hh1BB8#1 = phi(hh1B6A)
          tensor[3] _pos1BB3#1 = phi(_pos1B7C)
          tensor[3] pos1BB0#8 = phi(pos1B7A)
          real _t1BC4#1 = 0.11e1;
          real hh1BC6#2 = λ(T0[],T1[])<(T0 * T1)> (hh1BB8,_t1BC4);
          tensor[3] step1BC8#1 = up1B78;
          real _t1BCC#1 = TensorIndex<tensor[3],[0]>(pos1BB0);
          real _t1BCE#1 = TensorIndex<tensor[3],[0]>(pos1BB0);
          bool _t1BD0#1 = EQ<real>(_t1BCC,_t1BCE);
          bool _t1BD2#1 = BNot(_t1BD0);
          if _t1BD2 then goto ASSIGN1BD7 else goto ASSIGN1BDA
        ASSIGN1BD7:  preds = [COND1BF0]
          bool _t1BD5#1 = true;
          goto JOIN1BD4
        JOIN1BD4:  preds = [ASSIGN1BD7,ASSIGN1BEF]
          bool _t1BD6#1 = phi(_t1BD5,_t1BEE)
          bool _t1BF1#1 = _t1BD6;
          if _t1BF1 then goto DIE1BF4 else goto JOIN1BF3
        DIE1BF4:  preds = [COND1BF5]
          die
          goto JOIN1BF3
        JOIN1BF3:  preds = [*DIE1BF4,COND1BF5]
          int _t1BF6#1 = 5;
          bool _t1BF8#1 = LT<int>(nn19B5,_t1BF6);
          if _t1BF8 then goto ASSIGN1BFC else goto JOIN1BFA
        ASSIGN1BFC:  preds = [COND1D29]
          real _t1BFB#1 = 0.5e0;
          real _t1BFD#1 = λ(T0[],T1[])<(T0 * T1)> (_t1BFB,rad17DF);
          tensor[3] _t1BFF#1 = λ(T0[3],T1[3])<(T0_{i0} * (1) / ( Sqrt(Σ(i1=0..2)<((T1_{i1} * T1_{i1}))>(i1=0..2))))>_{3} (es1B54,es1B54);
          tensor[3] _t1C01#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (_t1BFD,_t1BFF);
          tensor[3] npos1C03#11 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos1BB0,_t1C01);
          real _t1C08#1 = 0.e0;
          real _t1C0A#1 = 0.e0;
          real _t1C0C#1 = 0.e0;
          tensor[3] _t1C0E#1 = <tensor[3]>[_t1C08,_t1C0A,_t1C0C];
          tensor[3] mid1C10#3 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (npos1C03,_t1C0E);
          real _t1C13#1 = TensorIndex<tensor[3],[0]>(mid1C10);
          real _t1C15#1 = λ(T0[])<Abs(T0)> (_t1C13);
          real _t1C17#1 = 0.4e1;
          bool _t1C19#1 = LTE<real>(_t1C15,_t1C17);
          if _t1C19 then goto ASSIGN1C1E else goto ASSIGN1C36
        ASSIGN1C1E:  preds = [COND1C37]
          real _t1C1D#1 = TensorIndex<tensor[3],[1]>(mid1C10);
          real _t1C1F#1 = λ(T0[])<Abs(T0)> (_t1C1D);
          real _t1C21#1 = 0.4e1;
          bool _t1C23#1 = LTE<real>(_t1C1F,_t1C21);
          if _t1C23 then goto ASSIGN1C27 else goto ASSIGN1C30
        ASSIGN1C27:  preds = [COND1C31]
          real _t1C26#1 = TensorIndex<tensor[3],[2]>(mid1C10);
          real _t1C28#1 = λ(T0[])<Abs(T0)> (_t1C26);
          real _t1C2A#1 = 0.4e1;
          bool _t1C2C#1 = LTE<real>(_t1C28,_t1C2A);
          goto JOIN1C25
        JOIN1C25:  preds = [ASSIGN1C2E,ASSIGN1C30]
          bool _t1C2D#1 = phi(_t1C2C,_t1C2F)
          bool _t1C32#1 = _t1C2D;
          goto JOIN1C1B
        JOIN1C1B:  preds = [ASSIGN1C34,ASSIGN1C36]
          bool _t1C33#1 = phi(_t1C32,_t1C35)
          bool _t1C38#1 = _t1C33;
          if _t1C38 then goto ASSIGN1C3F else goto ASSIGN1D22
        ASSIGN1C3F:  preds = [COND1D23]
          real _t1C3E#1 = TensorIndex<tensor[3],[0]>(npos1C03);
          real _t1C40#1 = TensorIndex<tensor[3],[0]>(npos1C03);
          bool _t1C42#1 = EQ<real>(_t1C3E,_t1C40);
          bool _t1C44#1 = BNot(_t1C42);
          if _t1C44 then goto ASSIGN1C49 else goto ASSIGN1C4C
        ASSIGN1C49:  preds = [COND1C62]
          bool _t1C47#1 = true;
          goto JOIN1C46
        JOIN1C46:  preds = [ASSIGN1C49,ASSIGN1C61]
          bool _t1C48#1 = phi(_t1C47,_t1C60)
          bool _t1C63#1 = _t1C48;
          bool _t1C65#1 = BNot(_t1C63);
          if _t1C65 then goto ASSIGN1C6A else goto ASSIGN1D1C
        ASSIGN1C6A:  preds = [COND1D1D]
          real x1C69#11 = TensorIndex<tensor[3],[0]>(npos1C03);
          real y1C6B#3 = TensorIndex<tensor[3],[1]>(npos1C03);
          real z1C6D#1 = TensorIndex<tensor[3],[2]>(npos1C03);
          real _t1C6F#1 = 0.2e1;
          real _t1C71#1 = 0.2e1;
          real _t1C73#1 = 0.3e1;
          int _t1C75#0 = 2;
          real _t1C77#1 = λ(T0[])<(T0)^2> (x1C69);
          real _t1C79#1 = λ(T0[],T1[])<(T0 * T1)> (_t1C73,_t1C77);
          real _t1C7B#1 = λ(T0[],T1[])<(T0) - (T1)> (_t1C71,_t1C79);
          int _t1C7D#0 = 2;
          real _t1C7F#1 = λ(T0[])<(T0)^2> (_t1C7B);
          real _t1C81#1 = λ(T0[],T1[])<(T0 * T1)> (_t1C6F,_t1C7F);
          real _t1C83#1 = 0.12e2;
          real _t1C85#1 = λ(T0[],T1[])<(T0 * T1)> (_t1C83,x1C69);
          int _t1C87#0 = 3;
          real _t1C89#1 = λ(T0[])<(T0)^3> (x1C69);
          real _t1C8B#1 = λ(T0[])<Neg(T0)> (_t1C89);
          real _t1C8D#1 = 0.2e1;
          real _t1C8F#1 = λ(T0[],T1[])<(T0 * T1)> (_t1C8D,x1C69);
          real _t1C91#1 = λ(T0[],T1[])<(T0 + T1)> (_t1C8B,_t1C8F);
          real _t1C93#1 = λ(T0[],T1[])<(T0 + T1)> (_t1C91,y1C6B);
          real _t1C95#1 = λ(T0[],T1[])<(T0 * T1)> (_t1C85,_t1C93);
          real _t1C97#1 = λ(T0[],T1[])<(T0) - (T1)> (_t1C81,_t1C95);
          real _t1C99#1 = 0.2e1;
          real _t1C9B#1 = 0.2e1;
          real _t1C9D#1 = 0.3e1;
          int _t1C9F#0 = 2;
          real _t1CA1#1 = λ(T0[])<(T0)^2> (x1C69);
          real _t1CA3#1 = λ(T0[],T1[])<(T0 * T1)> (_t1C9D,_t1CA1);
          real _t1CA5#1 = λ(T0[],T1[])<(T0) - (T1)> (_t1C9B,_t1CA3);
          real _t1CA7#1 = λ(T0[],T1[])<(T0 * T1)> (_t1C99,_t1CA5);
          real _t1CA9#1 = 0.e0;
          tensor[3] _t1CAB#1 = <tensor[3]>[_t1C97,_t1CA7,_t1CA9];
          real _t1CAD#1 = 0.2e1;
          real _t1CAF#1 = 0.2e1;
          real _t1CB1#1 = 0.3e1;
          int _t1CB3#0 = 2;
          real _t1CB5#1 = λ(T0[])<(T0)^2> (x1C69);
          real _t1CB7#1 = λ(T0[],T1[])<(T0 * T1)> (_t1CB1,_t1CB5);
          real _t1CB9#1 = λ(T0[],T1[])<(T0) - (T1)> (_t1CAF,_t1CB7);
          real _t1CBB#1 = λ(T0[],T1[])<(T0 * T1)> (_t1CAD,_t1CB9);
          real _t1CBD#1 = 0.2e1;
          real _t1CBF#1 = 0.e0;
          tensor[3] _t1CC1#1 = <tensor[3]>[_t1CBB,_t1CBD,_t1CBF];
          real _t1CC3#1 = 0.e0;
          real _t1CC5#1 = 0.e0;
          real _t1CC7#1 = 0.2e1;
          real _t1CC9#1 = λ(T0[],T1[])<(T0 * T1)> (_t1CC7,zfuz17DB);
          tensor[3] _t1CCB#1 = <tensor[3]>[_t1CC3,_t1CC5,_t1CC9];
          tensor[3,3] H1CCD#1 = <tensor[3,3]>[_t1CAB,_t1CC1,_t1CCB];
          real _t1CCF#1 = 0.2e1;
          real _t1CD1#1 = 0.2e1;
          real _t1CD3#1 = 0.3e1;
          int _t1CD5#0 = 2;
          real _t1CD7#1 = λ(T0[])<(T0)^2> (x1C69);
          real _t1CD9#1 = λ(T0[],T1[])<(T0 * T1)> (_t1CD3,_t1CD7);
          real _t1CDB#1 = λ(T0[],T1[])<(T0) - (T1)> (_t1CD1,_t1CD9);
          real _t1CDD#1 = λ(T0[],T1[])<(T0 * T1)> (_t1CCF,_t1CDB);
          int _t1CDF#0 = 3;
          real _t1CE1#1 = λ(T0[])<(T0)^3> (x1C69);
          real _t1CE3#1 = λ(T0[])<Neg(T0)> (_t1CE1);
          real _t1CE5#1 = 0.2e1;
          real _t1CE7#1 = λ(T0[],T1[])<(T0 * T1)> (_t1CE5,x1C69);
          real _t1CE9#1 = λ(T0[],T1[])<(T0 + T1)> (_t1CE3,_t1CE7);
          real _t1CEB#1 = λ(T0[],T1[])<(T0 + T1)> (_t1CE9,y1C6B);
          real _t1CED#1 = λ(T0[],T1[])<(T0 * T1)> (_t1CDD,_t1CEB);
          real _t1CEF#1 = 0.2e1;
          int _t1CF1#0 = 3;
          real _t1CF3#1 = λ(T0[])<(T0)^3> (x1C69);
          real _t1CF5#1 = λ(T0[])<Neg(T0)> (_t1CF3);
          real _t1CF7#1 = 0.2e1;
          real _t1CF9#1 = λ(T0[],T1[])<(T0 * T1)> (_t1CF7,x1C69);
          real _t1CFB#1 = λ(T0[],T1[])<(T0 + T1)> (_t1CF5,_t1CF9);
          real _t1CFD#1 = λ(T0[],T1[])<(T0 + T1)> (_t1CFB,y1C6B);
          real _t1CFF#1 = λ(T0[],T1[])<(T0 * T1)> (_t1CEF,_t1CFD);
          real _t1D01#1 = 0.2e1;
          real _t1D03#1 = λ(T0[],T1[])<(T0 * T1)> (_t1D01,zfuz17DB);
          real _t1D05#1 = λ(T0[],T1[])<(T0 * T1)> (_t1D03,z1C6D);
          tensor[3] g1D07#1 = <tensor[3]>[_t1CED,_t1CFF,_t1D05];
          (real[3] _t1D09#1,tensor[3][3] evecs1D0A#0) = Eigen3x3(H1CCD);
          int _t1D0C#1 = 0;
          real _t1D0E#1 = Subscript<real[3]>(_t1D09,_t1D0C);
          real _t1D10#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (g1D07);
          real _t1D12#1 = λ(T0[],T1[])<(T0 + T1)> (fBias17DD,_t1D10);
          real _t1D14#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t1D0E,_t1D12);
          real _t1D16#1 = _t1D14;
          bool _t1D18#1 = GTE<real>(_t1D16,fStren17DC);
          goto JOIN1C67
        JOIN1C67:  preds = [ASSIGN1D1A,ASSIGN1D1C]
          bool _t1D19#1 = phi(_t1D18,_t1D1B)
          bool _t1D1E#1 = _t1D19;
          goto JOIN1C3A
        JOIN1C3A:  preds = [ASSIGN1D20,ASSIGN1D22]
          bool _t1D1F#1 = phi(_t1D1E,_t1D21)
          bool _t1D24#1 = _t1D1F;
          if _t1D24 then goto NEW1D27 else goto JOIN1D26
        NEW1D27:  preds = [COND1D28]
          new particle(npos1C03,hh1BC6);
          goto JOIN1D26
        JOIN1D26:  preds = [NEW1D27,COND1D28]
          goto JOIN1BFA
        JOIN1BFA:  preds = [JOIN1D26,COND1D29]
          goto JOIN1923
        ASSIGN1D1C:  preds = [COND1D1D]
          bool _t1D1B#1 = false;
          goto JOIN1C67
        ASSIGN1C4C:  preds = [COND1C62]
          real _t1C4B#1 = TensorIndex<tensor[3],[1]>(npos1C03);
          real _t1C4D#1 = TensorIndex<tensor[3],[1]>(npos1C03);
          bool _t1C4F#1 = EQ<real>(_t1C4B,_t1C4D);
          bool _t1C51#1 = BNot(_t1C4F);
          if _t1C51 then goto ASSIGN1C56 else goto ASSIGN1C58
        ASSIGN1C56:  preds = [COND1C5F]
          bool _t1C54#1 = true;
          goto JOIN1C53
        JOIN1C53:  preds = [ASSIGN1C56,ASSIGN1C5E]
          bool _t1C55#1 = phi(_t1C54,_t1C5D)
          bool _t1C60#1 = _t1C55;
          goto JOIN1C46
        ASSIGN1C58:  preds = [COND1C5F]
          real _t1C57#1 = TensorIndex<tensor[3],[2]>(npos1C03);
          real _t1C59#1 = TensorIndex<tensor[3],[2]>(npos1C03);
          bool _t1C5B#1 = EQ<real>(_t1C57,_t1C59);
          bool _t1C5D#1 = BNot(_t1C5B);
          goto JOIN1C53
        ASSIGN1D22:  preds = [COND1D23]
          bool _t1D21#1 = false;
          goto JOIN1C3A
        ASSIGN1C30:  preds = [COND1C31]
          bool _t1C2F#1 = false;
          goto JOIN1C25
        ASSIGN1C36:  preds = [COND1C37]
          bool _t1C35#1 = false;
          goto JOIN1C1B
        ASSIGN1BDA:  preds = [COND1BF0]
          real _t1BD9#1 = TensorIndex<tensor[3],[1]>(pos1BB0);
          real _t1BDB#1 = TensorIndex<tensor[3],[1]>(pos1BB0);
          bool _t1BDD#1 = EQ<real>(_t1BD9,_t1BDB);
          bool _t1BDF#1 = BNot(_t1BDD);
          if _t1BDF then goto ASSIGN1BE4 else goto ASSIGN1BE6
        ASSIGN1BE4:  preds = [COND1BED]
          bool _t1BE2#1 = true;
          goto JOIN1BE1
        JOIN1BE1:  preds = [ASSIGN1BE4,ASSIGN1BEC]
          bool _t1BE3#1 = phi(_t1BE2,_t1BEB)
          bool _t1BEE#1 = _t1BE3;
          goto JOIN1BD4
        ASSIGN1BE6:  preds = [COND1BED]
          real _t1BE5#1 = TensorIndex<tensor[3],[2]>(pos1BB0);
          real _t1BE7#1 = TensorIndex<tensor[3],[2]>(pos1BB0);
          bool _t1BE9#1 = EQ<real>(_t1BE5,_t1BE7);
          bool _t1BEB#1 = BNot(_t1BE9);
          goto JOIN1BE1
        ASSIGN1B26:  preds = [COND1B27]
          bool _t1B25#1 = false;
          goto JOIN1A71
        ASSIGN1A56:  preds = [COND1A6C]
          real _t1A55#1 = TensorIndex<tensor[3],[1]>(npos1A0D);
          real _t1A57#1 = TensorIndex<tensor[3],[1]>(npos1A0D);
          bool _t1A59#1 = EQ<real>(_t1A55,_t1A57);
          bool _t1A5B#1 = BNot(_t1A59);
          if _t1A5B then goto ASSIGN1A60 else goto ASSIGN1A62
        ASSIGN1A60:  preds = [COND1A69]
          bool _t1A5E#1 = true;
          goto JOIN1A5D
        JOIN1A5D:  preds = [ASSIGN1A60,ASSIGN1A68]
          bool _t1A5F#1 = phi(_t1A5E,_t1A67)
          bool _t1A6A#1 = _t1A5F;
          goto JOIN1A50
        ASSIGN1A62:  preds = [COND1A69]
          real _t1A61#1 = TensorIndex<tensor[3],[2]>(npos1A0D);
          real _t1A63#1 = TensorIndex<tensor[3],[2]>(npos1A0D);
          bool _t1A65#1 = EQ<real>(_t1A61,_t1A63);
          bool _t1A67#1 = BNot(_t1A65);
          goto JOIN1A5D
        ASSIGN1B2C:  preds = [COND1B2D]
          bool _t1B2B#1 = false;
          goto JOIN1A44
        ASSIGN1A3A:  preds = [COND1A3B]
          bool _t1A39#1 = false;
          goto JOIN1A2F
        ASSIGN1A40:  preds = [COND1A41]
          bool _t1A3F#1 = false;
          goto JOIN1A25
        ASSIGN198C:  preds = [COND19A2]
          real _t198B#1 = TensorIndex<tensor[3],[1]>(pos1978);
          real _t198D#1 = TensorIndex<tensor[3],[1]>(pos1978);
          bool _t198F#1 = EQ<real>(_t198B,_t198D);
          bool _t1991#1 = BNot(_t198F);
          if _t1991 then goto ASSIGN1996 else goto ASSIGN1998
        ASSIGN1996:  preds = [COND199F]
          bool _t1994#1 = true;
          goto JOIN1993
        JOIN1993:  preds = [ASSIGN1996,ASSIGN199E]
          bool _t1995#1 = phi(_t1994,_t199D)
          bool _t19A0#1 = _t1995;
          goto JOIN1986
        ASSIGN1998:  preds = [COND199F]
          real _t1997#1 = TensorIndex<tensor[3],[2]>(pos1978);
          real _t1999#1 = TensorIndex<tensor[3],[2]>(pos1978);
          bool _t199B#1 = EQ<real>(_t1997,_t1999);
          bool _t199D#1 = BNot(_t199B);
          goto JOIN1993
        ASSIGN1912:  preds = [COND1913]
          bool _t1911#1 = false;
          goto JOIN185D
        ASSIGN1842:  preds = [COND1858]
          real _t1841#1 = TensorIndex<tensor[3],[1]>(pos17E5);
          real _t1843#1 = TensorIndex<tensor[3],[1]>(pos17E5);
          bool _t1845#1 = EQ<real>(_t1841,_t1843);
          bool _t1847#1 = BNot(_t1845);
          if _t1847 then goto ASSIGN184C else goto ASSIGN184E
        ASSIGN184C:  preds = [COND1855]
          bool _t184A#1 = true;
          goto JOIN1849
        JOIN1849:  preds = [ASSIGN184C,ASSIGN1854]
          bool _t184B#1 = phi(_t184A,_t1853)
          bool _t1856#1 = _t184B;
          goto JOIN183C
        ASSIGN184E:  preds = [COND1855]
          real _t184D#1 = TensorIndex<tensor[3],[2]>(pos17E5);
          real _t184F#1 = TensorIndex<tensor[3],[2]>(pos17E5);
          bool _t1851#1 = EQ<real>(_t184D,_t184F);
          bool _t1853#1 = BNot(_t1851);
          goto JOIN1849
        ASSIGN1918:  preds = [COND1919]
          bool _t1917#1 = false;
          goto JOIN1830
        ASSIGN1826:  preds = [COND1827]
          bool _t1825#1 = false;
          goto JOIN181B
        ASSIGN182C:  preds = [COND182D]
          bool _t182B#1 = false;
          goto JOIN1811
    end update
  end particle
## initial strand creation
  COLLECTION
    ENTRY17AD:  preds = []
      tensor[3][] ipos17A5#1 = globals.ipos15BA;
    FOREACH17A8:  preds = [ASSIGN17A6,NEXT17AC]
      foreach (x17A7 in ipos17A5) on exit goto RETURN17AE
      real _t17A9#1 = 0.1e1;
      new particle(x17A7,_t17A9);
      goto FOREACH17A8
    RETURN17AE:  preds = [FOREACH17A8]
      return
## global update
  ENTRY1D7D:  preds = []
    real rad1D36#3 = globals.rad15B4;
    real eps1D35#2 = globals.eps15B5;
    particle[] P1D39#1 = Strands<particle,all>;
    (int res1D3A#1) = sum<int>(MAP sum176E (P1D39));
    int num1D3D#1 = res1D3A;
    particle[] P1D3F#1 = Strands<particle,all>;
    (int res1D40#1) = max<int>(MAP max1775 (P1D3F));
    int steps1D43#1 = res1D40;
    particle[] P1D45#1 = Strands<particle,all>;
    (int res1D46#1) = sum<int>(MAP sum177C (P1D45));
    int numFound1D49#1 = res1D46;
    particle[] P1D4B#1 = Strands<particle,all>;
    (bool res1D4C#1) = all(MAP all1783 (P1D4B));
    bool allFound1D4F#2 = res1D4C;
    particle[] P1D51#1 = Strands<particle,all>;
    (real res1D52#1) = max<real>(MAP max178C (P1D51));
    real maxStep1D55#3 = res1D52;
    string _t1D57#1 = "One run:";
    string _t1D59#1 = " and ";
    real _t1D5B#1 = λ(T0[],T1[])<(T0) / ( T1)> (maxStep1D55,rad1D36);
    string _t1D5D#1 = " and ";
    real _t1D5F#1 = λ(T0[],T1[])<(T0) / ( T1)> (maxStep1D55,rad1D36);
    bool _t1D61#1 = LT<real>(_t1D5F,eps1D35);
    string _t1D63#1 = " and ";
    string _t1D65#1 = " of ";
    string _t1D67#1 = "\n";
    Print<[string,bool,string,real,string,bool,string,int,string,int,string]>(_t1D57,allFound1D4F,_t1D59,_t1D5B,_t1D5D,_t1D61,_t1D63,numFound1D49,_t1D65,num1D3D,_t1D67);
    if allFound1D4F then goto ASSIGN1D6C else goto JOIN1D6A
  ASSIGN1D6C:  preds = [COND1D75]
    real _t1D6B#1 = λ(T0[],T1[])<(T0) / ( T1)> (maxStep1D55,rad1D36);
    bool _t1D6D#1 = LT<real>(_t1D6B,eps1D35);
    if _t1D6D then goto ASSIGN1D71 else goto JOIN1D6F
  ASSIGN1D71:  preds = [COND1D74]
    string _t1D70#1 = "CONVERGED!\n";
    Print<[string]>(_t1D70);
    StabilizeAll;
    goto JOIN1D6F
  JOIN1D6F:  preds = [MASSIGN1D73,COND1D74]
    goto JOIN1D6A
  JOIN1D6A:  preds = [JOIN1D6F,COND1D75]
    int _t1D76#1 = 5000;
    bool _t1D78#1 = GT<int>(steps1D43,_t1D76);
    if _t1D78 then goto MASSIGN1D7B else goto JOIN1D7A
  MASSIGN1D7B:  preds = [COND1D7C]
    StabilizeAll;
    goto JOIN1D7A
  JOIN1D7A:  preds = [MASSIGN1D7B,COND1D7C]
    continue
#### end program ####
##### high-ir: after value numbering ####
## properties
  GlobalInit StabilizeAll GlobalReduce StrandSets GlobalUpdate NewStrands StrandCommunication StrandsMayDie HasInputs HasGlobals ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
## globals
  input meshData15B1 (meshData) = <no-default>
  input 0space0853_intermedateGlobal15B2 (space) = <no-default>
  input 0data0855_intermedateGlobal15B3 (data) = <no-default>
  input rad15B4 (rad) = <default>
  input eps15B5 (eps) = <default>
  input v015B6 (v0) = <default>
  input fBias15B7 (fBias) = <default>
  input fStren15B8 (fStren) = <default>
  input zfuz15B9 (zfuz) = <default>
  input ipos15BA (ipos) = <no-default>
## functions
  function real max178C (particle P1784#1) {
    ENTRY178B:  preds = []
      tensor[3] _t1785#1 = P1784.step;
      real _t1788#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (_t1785);
      return _t1788
}
  function bool all1783 (particle P177D#1) {
    ENTRY1782:  preds = []
      bool _t177E#1 = P177D.found;
      return _t177E
}
  function int sum177C (particle P1776#1) {
    ENTRY177B:  preds = []
      int _t1777#1 = P1776.testp;
      return _t1777
}
  function int max1775 (particle P176F#1) {
    ENTRY1774:  preds = []
      int _t1770#1 = P176F.steps;
      return _t1770
}
  function int sum176E (particle P1768#1) {
    ENTRY176D:  preds = []
      int _t1769#1 = P1768.test;
      return _t1769
}
  function int[2] nextCell415EE (int faceIdx15CF#2, int cell15D0#1, femData:Mesh mesh15D1#1) {
    ENTRY15ED:  preds = []
      int _t15D2#3 = -1;
      bool _t15D4#1 = EQ<int>(faceIdx15CF,_t15D2);
      if _t15D4 then goto ASSIGN1D83 else goto ASSIGN15DF
    ASSIGN1D83:  preds = [COND15EB]
      int[2] _t15DB#1 = <int[2]>{_t15D2,_t15D2};
      return _t15DB
      goto JOIN15D6
    JOIN15D6:  preds = [*RETURN(_t15DB)15DD,*RETURN(_t15E8)15EA]
      unreachable
    ASSIGN15DF:  preds = [COND15EB]
      int _t15DE#1 = 8;
      int _t15E0#1 = IMul(cell15D0,_t15DE);
      int _t15E2#1 = 2;
      int _t15E4#1 = IMul(faceIdx15CF,_t15E2);
      int _t15E6#1 = IAdd(_t15E0,_t15E4);
      int[2] _t15E8#1 = ExtractFemItemN<[femData:Mesh,int],int[2],CellFaceCell(Mesh),0000,"",[],int>(mesh15D1,_t15E6);
      return _t15E8
      goto JOIN15D6
}
  function tensor[3] fStep16E3 (tensor[3] s15EF#3) {
    ENTRY16E2:  preds = []
      real zfuz15F0#1 = globals.zfuz15B9;
      real x15F2#4 = TensorIndex<tensor[3],[0]>(s15EF);
      real y15F4#1 = TensorIndex<tensor[3],[1]>(s15EF);
      real z15F6#1 = TensorIndex<tensor[3],[2]>(s15EF);
      real _t15F8#7 = 0.2e1;
      real _t15FC#1 = 0.3e1;
      int _t15FE#0 = 2;
      real _t1600#1 = λ(T0[])<(T0)^2> (x15F2);
      real _t1602#1 = λ(T0[],T1[])<(T0 * T1)> (_t15FC,_t1600);
      real _t1604#2 = λ(T0[],T1[])<(T0) - (T1)> (_t15F8,_t1602);
      real _t1608#1 = λ(T0[])<(T0)^2> (_t1604);
      real _t160A#1 = λ(T0[],T1[])<(T0 * T1)> (_t15F8,_t1608);
      real _t160C#1 = 0.12e2;
      real _t160E#1 = λ(T0[],T1[])<(T0 * T1)> (_t160C,x15F2);
      int _t1610#0 = 3;
      real _t1612#1 = λ(T0[])<(T0)^3> (x15F2);
      real _t1614#1 = λ(T0[])<Neg(T0)> (_t1612);
      real _t1618#1 = λ(T0[],T1[])<(T0 * T1)> (_t15F8,x15F2);
      real _t161A#1 = λ(T0[],T1[])<(T0 + T1)> (_t1614,_t1618);
      real _t161C#3 = λ(T0[],T1[])<(T0 + T1)> (_t161A,y15F4);
      real _t161E#1 = λ(T0[],T1[])<(T0 * T1)> (_t160E,_t161C);
      real _t1620#1 = λ(T0[],T1[])<(T0) - (T1)> (_t160A,_t161E);
      real _t1630#3 = λ(T0[],T1[])<(T0 * T1)> (_t15F8,_t1604);
      real _t1632#4 = 0.e0;
      tensor[3] _t1634#1 = <tensor[3]>[_t1620,_t1630,_t1632];
      tensor[3] _t164A#1 = <tensor[3]>[_t1630,_t15F8,_t1632];
      real _t1652#2 = λ(T0[],T1[])<(T0 * T1)> (_t15F8,zfuz15F0);
      tensor[3] _t1654#1 = <tensor[3]>[_t1632,_t1632,_t1652];
      tensor[3,3] H1656#1 = <tensor[3,3]>[_t1634,_t164A,_t1654];
      real _t1676#1 = λ(T0[],T1[])<(T0 * T1)> (_t1630,_t161C);
      real _t1688#1 = λ(T0[],T1[])<(T0 * T1)> (_t15F8,_t161C);
      real _t168E#1 = λ(T0[],T1[])<(T0 * T1)> (_t1652,z15F6);
      tensor[3] g1690#1 = <tensor[3]>[_t1676,_t1688,_t168E];
      (real[3] evals1693#1,tensor[3][3] E1692#1) = Eigen3x3(H1656);
      real _t1698#1 = 0.1e1;
      int _t169A#2 = 0;
      real _t169C#1 = Subscript<real[3]>(evals1693,_t169A);
      real _t169E#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t1698,_t169C);
      real _t16A0#1 = λ(T0[])<Neg(T0)> (_t169E);
      tensor[3] _t16A4#2 = Subscript<tensor[3][3]>(E1692,_t169A);
      tensor[3] _t16A6#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (_t16A0,_t16A4);
      tensor[3,3] _t16AC#1 = λ(T0[3],T1[3])<(T0_{i0} * T1_{i1})>_{3 3} (_t16A6,_t16A4);
      tensor[3] up16AE#4 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (_t16AC,g1690);
      real _t16B1#2 = TensorIndex<tensor[3],[0]>(up16AE);
      bool _t16B5#1 = EQ<real>(_t16B1,_t16B1);
      bool _t16B7#1 = BNot(_t16B5);
      if _t16B7 then goto ASSIGN16BC else goto ASSIGN16BF
    ASSIGN16BC:  preds = [COND16D5]
      bool _t16BA#1 = true;
      goto JOIN16B9
    JOIN16B9:  preds = [ASSIGN16BC,JOIN16C6]
      bool _t16BB#1 = phi(_t16BA,_t16C8)
      if _t16BB then goto ASSIGN16D8 else goto JOIN16D6
    ASSIGN16D8:  preds = [COND16E0]
      real _t16D7#3 = +inf;
      tensor[3] _t16DD#1 = <tensor[3]>[_t16D7,_t16D7,_t16D7];
      return _t16DD
      goto JOIN16D6
    JOIN16D6:  preds = [*RETURN(_t16DD)16DF,COND16E0]
      return up16AE
    ASSIGN16BF:  preds = [COND16D5]
      real _t16BE#2 = TensorIndex<tensor[3],[1]>(up16AE);
      bool _t16C2#1 = EQ<real>(_t16BE,_t16BE);
      bool _t16C4#1 = BNot(_t16C2);
      if _t16C4 then goto ASSIGN16C9 else goto ASSIGN16CB
    ASSIGN16C9:  preds = [COND16D2]
      bool _t16C7#1 = true;
      goto JOIN16C6
    JOIN16C6:  preds = [ASSIGN16C9,ASSIGN16D1]
      bool _t16C8#1 = phi(_t16C7,_t16D0)
      goto JOIN16B9
    ASSIGN16CB:  preds = [COND16D2]
      real _t16CA#2 = TensorIndex<tensor[3],[2]>(up16AE);
      bool _t16CE#1 = EQ<real>(_t16CA,_t16CA);
      bool _t16D0#1 = BNot(_t16CE);
      goto JOIN16C6
}
  function tensor[3,3] fPerp1767 (tensor[3] s16E4#3) {
    ENTRY1766:  preds = []
      real zfuz16E5#1 = globals.zfuz15B9;
      real x16E7#4 = TensorIndex<tensor[3],[0]>(s16E4);
      real y16E9#1 = TensorIndex<tensor[3],[1]>(s16E4);
      real z16EB#0 = TensorIndex<tensor[3],[2]>(s16E4);
      real _t16ED#6 = 0.2e1;
      real _t16F1#1 = 0.3e1;
      int _t16F3#0 = 2;
      real _t16F5#1 = λ(T0[])<(T0)^2> (x16E7);
      real _t16F7#1 = λ(T0[],T1[])<(T0 * T1)> (_t16F1,_t16F5);
      real _t16F9#2 = λ(T0[],T1[])<(T0) - (T1)> (_t16ED,_t16F7);
      real _t16FD#1 = λ(T0[])<(T0)^2> (_t16F9);
      real _t16FF#1 = λ(T0[],T1[])<(T0 * T1)> (_t16ED,_t16FD);
      real _t1701#1 = 0.12e2;
      real _t1703#1 = λ(T0[],T1[])<(T0 * T1)> (_t1701,x16E7);
      int _t1705#0 = 3;
      real _t1707#1 = λ(T0[])<(T0)^3> (x16E7);
      real _t1709#1 = λ(T0[])<Neg(T0)> (_t1707);
      real _t170D#1 = λ(T0[],T1[])<(T0 * T1)> (_t16ED,x16E7);
      real _t170F#1 = λ(T0[],T1[])<(T0 + T1)> (_t1709,_t170D);
      real _t1711#1 = λ(T0[],T1[])<(T0 + T1)> (_t170F,y16E9);
      real _t1713#1 = λ(T0[],T1[])<(T0 * T1)> (_t1703,_t1711);
      real _t1715#1 = λ(T0[],T1[])<(T0) - (T1)> (_t16FF,_t1713);
      real _t1725#2 = λ(T0[],T1[])<(T0 * T1)> (_t16ED,_t16F9);
      real _t1727#4 = 0.e0;
      tensor[3] _t1729#1 = <tensor[3]>[_t1715,_t1725,_t1727];
      tensor[3] _t173F#1 = <tensor[3]>[_t1725,_t16ED,_t1727];
      real _t1747#1 = λ(T0[],T1[])<(T0 * T1)> (_t16ED,zfuz16E5);
      tensor[3] _t1749#1 = <tensor[3]>[_t1727,_t1727,_t1747];
      tensor[3,3] H174B#1 = <tensor[3,3]>[_t1729,_t173F,_t1749];
      (real[3] evals174E#0,tensor[3][3] _t174D#1) = Eigen3x3(H174B);
      int _t1750#1 = 0;
      tensor[3] E21752#2 = Subscript<tensor[3][3]>(_t174D,_t1750);
      tensor[3,3] _t1754#1 = λ()<δ_{i0,i1}>_{3 3} ();
      tensor[3,3] _t1756#1 = λ(T0[3],T1[3])<(T0_{i0} * T1_{i1})>_{3 3} (E21752,E21752);
      tensor[3,3] m1758#3 = λ(T0[3 3],T1[3 3])<(T0_{i0,i1}) - (T1_{i0,i1})>_{3 3} (_t1754,_t1756);
      real t175A#2 = λ(T0[3 3],T1[3 3])<Σ(i0=0..2)(i1=0..2)<((T0_{i0,i1} * T1_{i0,i1}))>(i0=0..2)(i1=0..2)> (m1758,m1758);
      bool _t175C#1 = EQ<real>(t175A,t175A);
      bool _t175E#1 = BNot(_t175C);
      if _t175E then goto ASSIGN1762 else goto JOIN1760
    ASSIGN1762:  preds = [COND1764]
      tensor[3,3] _t1761#1 = λ()<Z_{i0,i1}>_{3 3} ();
      return _t1761
      goto JOIN1760
    JOIN1760:  preds = [*RETURN(_t1761)1763,COND1764]
      return m1758
}
## input initialization
  ENTRY15CD:  preds = []
    real rad15BB#5 = 0.1e-1;
    globals.rad15B4 = rad15BB;
    globals.eps15B5 = rad15BB;
    real v015C1#1 = 0.625e-1;
    globals.v015B6 = v015C1;
    globals.fBias15B7 = rad15BB;
    globals.fStren15B8 = rad15BB;
    globals.zfuz15B9 = rad15BB;
    return
## global-variable initialization
  ENTRY17A3:  preds = []
    femData:Mesh meshData178D#2 = globals.meshData15B1;
    int _t178F#1 = 0;
    int _t1791#1 = 1;
    int _t1793#1 = ExtractFemItem<int,NumCell(Mesh)>(meshData178D);
    int _t1795#1 = ISub(_t1793,_t1791);
    int[] _t1797#1 = Range(_t178F,_t1795);
    femData:MeshCell[] _t1799#1 = <femData:MeshCell[]>{};
  FOREACH179D:  preds = [ASSIGN179A,NEXT17A2]
    foreach (_t179B in _t1797) on exit goto RETURN17A4
      femData:MeshCell[] _t179C#1 = phi(_t1799,_t17A0)
    femData:MeshCell _t179E#1 = LoadFem<femData:MeshCell>(meshData178D,_t179B);
    femData:MeshCell[] _t17A0#1 = Append<femData:MeshCell>(_t179C,_t179E);
    goto FOREACH179D
  RETURN17A4:  preds = [FOREACH179D]
    return
## strand
  strand particle (tensor[3] pos017AF#2, real hh017B0#1) in 3D
    state:
      output tensor[3] pos;
      output tensor[3] _pos;
      real hh;
      tensor[3] step;
      bool found;
      int nfs;
      int test;
      int testp;
      int steps;
    state init
      ENTRY17D0:  preds = []
        tensor[3] step17C4#1 = λ()<Z_{i0}>_{3} ();
        bool found17C6#1 = false;
        int nfs17C8#3 = 0;
        int test17CA#1 = 1;
        self.pos = pos017AF;
        self._pos = pos017AF;
        self.hh = hh017B0;
        self.step = step17C4;
        self.found = found17C6;
        self.nfs = nfs17C8;
        self.test = test17CA;
        self.testp = nfs17C8;
        self.steps = nfs17C8;
        return
    end state init
    method update
        ENTRY1D2B:  preds = []
          real rad17DF#10 = globals.rad15B4;
          real eps17DE#1 = globals.eps15B5;
          real fBias17DD#3 = globals.fBias15B7;
          real fStren17DC#3 = globals.fStren15B8;
          real zfuz17DB#3 = globals.zfuz15B9;
          tensor[3] pos17E5#10 = self.pos;
          tensor[3] _pos17E6#0 = self._pos;
          real hh17E7#5 = self.hh;
          tensor[3] step17E8#0 = self.step;
          bool found17E9#3 = self.found;
          int nfs17EA#3 = self.nfs;
          int test17EB#0 = self.test;
          int testp17EC#2 = self.testp;
          int steps17ED#1 = self.steps;
          int _t17F7#4 = 1;
          int steps17F9#4 = IAdd(steps17ED,_t17F7);
          real _t17FE#19 = 0.e0;
          tensor[3] _t1804#3 = <tensor[3]>[_t17FE,_t17FE,_t17FE];
          tensor[3] mid1806#3 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (pos17E5,_t1804);
          real _t1809#1 = TensorIndex<tensor[3],[0]>(mid1806);
          real _t180B#1 = λ(T0[])<Abs(T0)> (_t1809);
          real _t180D#9 = 0.4e1;
          bool _t180F#1 = LTE<real>(_t180B,_t180D);
          if _t180F then goto ASSIGN1814 else goto ASSIGN182C
        ASSIGN1814:  preds = [COND182D]
          real _t1813#1 = TensorIndex<tensor[3],[1]>(mid1806);
          real _t1815#1 = λ(T0[])<Abs(T0)> (_t1813);
          bool _t1819#1 = LTE<real>(_t1815,_t180D);
          if _t1819 then goto ASSIGN181D else goto ASSIGN1826
        ASSIGN181D:  preds = [COND1827]
          real _t181C#1 = TensorIndex<tensor[3],[2]>(mid1806);
          real _t181E#1 = λ(T0[])<Abs(T0)> (_t181C);
          bool _t1822#1 = LTE<real>(_t181E,_t180D);
          goto JOIN181B
        JOIN181B:  preds = [ASSIGN1DA1,ASSIGN1826]
          bool _t1823#1 = phi(_t1822,_t1825)
          goto JOIN1811
        JOIN1811:  preds = [JOIN181B,ASSIGN182C]
          bool _t1829#1 = phi(_t1823,_t182B)
          if _t1829 then goto ASSIGN1835 else goto ASSIGN1918
        ASSIGN1835:  preds = [COND1919]
          real _t1834#6 = TensorIndex<tensor[3],[0]>(pos17E5);
          bool _t1838#1 = EQ<real>(_t1834,_t1834);
          bool _t183A#1 = BNot(_t1838);
          if _t183A then goto ASSIGN183F else goto ASSIGN1842
        ASSIGN183F:  preds = [COND1858]
          bool _t183D#1 = true;
          goto JOIN183C
        JOIN183C:  preds = [ASSIGN183F,JOIN1849]
          bool _t183E#1 = phi(_t183D,_t184B)
          bool _t185B#1 = BNot(_t183E);
          if _t185B then goto ASSIGN1862 else goto ASSIGN1912
        ASSIGN1862:  preds = [COND1913]
          real y1861#1 = TensorIndex<tensor[3],[1]>(pos17E5);
          real z1863#1 = TensorIndex<tensor[3],[2]>(pos17E5);
          real _t1865#7 = 0.2e1;
          real _t1869#1 = 0.3e1;
          int _t186B#0 = 2;
          real _t186D#1 = λ(T0[])<(T0)^2> (_t1834);
          real _t186F#1 = λ(T0[],T1[])<(T0 * T1)> (_t1869,_t186D);
          real _t1871#2 = λ(T0[],T1[])<(T0) - (T1)> (_t1865,_t186F);
          real _t1875#1 = λ(T0[])<(T0)^2> (_t1871);
          real _t1877#1 = λ(T0[],T1[])<(T0 * T1)> (_t1865,_t1875);
          real _t1879#1 = 0.12e2;
          real _t187B#1 = λ(T0[],T1[])<(T0 * T1)> (_t1879,_t1834);
          int _t187D#0 = 3;
          real _t187F#1 = λ(T0[])<(T0)^3> (_t1834);
          real _t1881#1 = λ(T0[])<Neg(T0)> (_t187F);
          real _t1885#1 = λ(T0[],T1[])<(T0 * T1)> (_t1865,_t1834);
          real _t1887#1 = λ(T0[],T1[])<(T0 + T1)> (_t1881,_t1885);
          real _t1889#3 = λ(T0[],T1[])<(T0 + T1)> (_t1887,y1861);
          real _t188B#1 = λ(T0[],T1[])<(T0 * T1)> (_t187B,_t1889);
          real _t188D#1 = λ(T0[],T1[])<(T0) - (T1)> (_t1877,_t188B);
          real _t189D#3 = λ(T0[],T1[])<(T0 * T1)> (_t1865,_t1871);
          tensor[3] _t18A1#1 = <tensor[3]>[_t188D,_t189D,_t17FE];
          tensor[3] _t18B7#1 = <tensor[3]>[_t189D,_t1865,_t17FE];
          real _t18BF#2 = λ(T0[],T1[])<(T0 * T1)> (_t1865,zfuz17DB);
          tensor[3] _t18C1#1 = <tensor[3]>[_t17FE,_t17FE,_t18BF];
          tensor[3,3] H18C3#1 = <tensor[3,3]>[_t18A1,_t18B7,_t18C1];
          real _t18E3#1 = λ(T0[],T1[])<(T0 * T1)> (_t189D,_t1889);
          real _t18F5#1 = λ(T0[],T1[])<(T0 * T1)> (_t1865,_t1889);
          real _t18FB#1 = λ(T0[],T1[])<(T0 * T1)> (_t18BF,z1863);
          tensor[3] g18FD#1 = <tensor[3]>[_t18E3,_t18F5,_t18FB];
          (real[3] _t18FF#1,tensor[3][3] evecs1900#0) = Eigen3x3(H18C3);
          int _t1902#1 = 0;
          real _t1904#1 = Subscript<real[3]>(_t18FF,_t1902);
          real _t1906#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (g18FD);
          real _t1908#1 = λ(T0[],T1[])<(T0 + T1)> (fBias17DD,_t1906);
          real _t190A#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t1904,_t1908);
          bool _t190E#1 = GTE<real>(_t190A,fStren17DC);
          goto JOIN185D
        JOIN185D:  preds = [ASSIGN1DB3,ASSIGN1912]
          bool _t190F#1 = phi(_t190E,_t1911)
          goto JOIN1830
        JOIN1830:  preds = [JOIN185D,ASSIGN1918]
          bool _t1915#1 = phi(_t190F,_t1917)
          bool _t191C#1 = BNot(_t1915);
          if _t191C then goto DIE191F else goto JOIN191E
        DIE191F:  preds = [COND1920]
          die
          goto JOIN191E
        JOIN191E:  preds = [*DIE191F,COND1920]
          bool _t1921#1 = BNot(found17E9);
          if _t1921 then goto ASSIGN1926 else goto ASSIGN1977
        ASSIGN1926:  preds = [COND1D2A]
          tensor[3] step1924#3 = fStep16E3 (pos17E5);
          tensor[3] pos1927#4 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos17E5,step1924);
          real _t192F#2 = TensorIndex<tensor[3],[0]>(pos1927);
          bool _t1933#1 = EQ<real>(_t192F,_t192F);
          bool _t1935#1 = BNot(_t1933);
          if _t1935 then goto ASSIGN193A else goto ASSIGN193D
        ASSIGN193A:  preds = [COND1953]
          bool _t1938#1 = true;
          goto JOIN1937
        JOIN1937:  preds = [ASSIGN193A,JOIN1944]
          bool _t1939#1 = phi(_t1938,_t1946)
          if _t1939 then goto DIE1957 else goto JOIN1956
        DIE1957:  preds = [COND1958]
          die
          goto JOIN1956
        JOIN1956:  preds = [*DIE1957,COND1958]
          real _t1959#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (step1924);
          real _t195B#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t1959,rad17DF);
          bool _t195D#1 = GT<real>(_t195B,eps17DE);
          if _t195D then goto ASSIGN1E05 else goto ASSIGN196E
        ASSIGN1E05:  preds = [COND1972]
          int nfs1962#2 = IAdd(nfs17EA,_t17F7);
          int _t1965#1 = 10;
          bool _t1967#1 = GT<int>(nfs1962,_t1965);
          if _t1967 then goto DIE196A else goto JOIN1969
        DIE196A:  preds = [COND196B]
          die
          goto JOIN1969
        JOIN1969:  preds = [*DIE196A,COND196B]
          goto JOIN195F
        JOIN195F:  preds = [JOIN1969,ASSIGN196E]
          int testp1970#1 = phi(testp17EC,_t17F7)
          int nfs1963#1 = phi(nfs1962,nfs17EA)
          bool found196D#1 = phi(found17E9,found196C)
          goto JOIN1923
        JOIN1923:  preds = [JOIN195F,JOIN1BFA]
          int testp1975#1 = phi(testp1970,testp17EC)
          int nfs1974#1 = phi(nfs1963,nfs17EA)
          bool found1973#1 = phi(found196D,found17E9)
          tensor[3] step1925#1 = phi(step1924,up1B78)
          real hh1B57#1 = phi(hh17E7,hh1BC6)
          tensor[3] pos1928#2 = phi(pos1927,pos1BB0)
          self.pos = pos1928;
          self._pos = pos1928;
          self.hh = hh1B57;
          self.step = step1925;
          self.found = found1973;
          self.nfs = nfs1974;
          self.testp = testp1975;
          self.steps = steps17F9;
          active
        ASSIGN196E:  preds = [COND1972]
          bool found196C#1 = true;
          goto JOIN195F
        ASSIGN193D:  preds = [COND1953]
          real _t193C#2 = TensorIndex<tensor[3],[1]>(pos1927);
          bool _t1940#1 = EQ<real>(_t193C,_t193C);
          bool _t1942#1 = BNot(_t1940);
          if _t1942 then goto ASSIGN1947 else goto ASSIGN1949
        ASSIGN1947:  preds = [COND1950]
          bool _t1945#1 = true;
          goto JOIN1944
        JOIN1944:  preds = [ASSIGN1947,ASSIGN194F]
          bool _t1946#1 = phi(_t1945,_t194E)
          goto JOIN1937
        ASSIGN1949:  preds = [COND1950]
          real _t1948#2 = TensorIndex<tensor[3],[2]>(pos1927);
          bool _t194C#1 = EQ<real>(_t1948,_t1948);
          bool _t194E#1 = BNot(_t194C);
          goto JOIN1944
        ASSIGN1977:  preds = [COND1D2A]
          tensor[3] _t1976#1 = fStep16E3 (pos17E5);
          tensor[3] pos1978#16 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos17E5,_t1976);
          real _t197E#2 = TensorIndex<tensor[3],[0]>(pos1978);
          bool _t1982#1 = EQ<real>(_t197E,_t197E);
          bool _t1984#1 = BNot(_t1982);
          if _t1984 then goto ASSIGN1989 else goto ASSIGN198C
        ASSIGN1989:  preds = [COND19A2]
          bool _t1987#1 = true;
          goto JOIN1986
        JOIN1986:  preds = [ASSIGN1989,JOIN1993]
          bool _t1988#1 = phi(_t1987,_t1995)
          if _t1988 then goto DIE19A6 else goto JOIN19A5
        DIE19A6:  preds = [COND19A7]
          die
          goto JOIN19A5
        JOIN19A5:  preds = [*DIE19A6,COND19A7]
          tensor[3] step19A8#4 = λ()<Z_{i0}>_{3} ();
          int nn19AE#4 = 0;
          particle[] _t19B0#1 = SphereQuery<3,particle>(pos1978,rad17DF);
        FOREACH19B6:  preds = [ASSIGN1DB8,NEXT19FD]
          foreach (P19B2 in _t19B0) on exit goto ASSIGN1DB9
            int nn19B5#3 = phi(nn19AE,nn19FB)
            tensor[3] force19B4#2 = phi(step19A8,force19F7)
            real oldE19B3#2 = phi(_t17FE,oldE19CD)
          tensor[3] _t19B7#1 = P19B2.pos;
          tensor[3] _t19B9#2 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (_t19B7,pos1978);
          real _t19BC#2 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (_t19B9);
          real _t19BE#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t19BC,rad17DF);
          real _t19C1#2 = 0.1e1;
          real _t19C3#2 = λ(T0[],T1[])<(T0) - (T1)> (_t19C1,_t19BE);
          int _t19C5#0 = 4;
          real _t19C7#1 = λ(T0[])<(T0)^4> (_t19C3);
          real oldE19CD#1 = λ(T0[],T1[])<(T0 + T1)> (oldE19B3,_t19C7);
          int _t19D9#1 = -4;
          real _t19DB#1 = IntToReal(_t19D9);
          int _t19E1#0 = 3;
          real _t19E3#1 = λ(T0[])<(T0)^3> (_t19C3);
          real _t19E5#1 = λ(T0[],T1[])<(T0 * T1)> (_t19DB,_t19E3);
          real _t19EB#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t19C1,rad17DF);
          real _t19ED#1 = λ(T0[],T1[])<(T0 * T1)> (_t19E5,_t19EB);
          tensor[3] _t19EF#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (_t19ED,_t19B9);
          tensor[3] _t19F3#1 = λ(T0[3],T1[])<(T0_{i0}) / ( T1)>_{3} (_t19EF,_t19BC);
          tensor[3] force19F7#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (force19B4,_t19F3);
          int nn19FB#1 = IAdd(nn19B5,_t17F7);
          goto FOREACH19B6
        ASSIGN1DB9:  preds = [FOREACH19B6]
          bool _t1A00#1 = EQ<int>(nn19AE,nn19B5);
          if _t1A00 then goto ASSIGN1A04 else goto JOIN1A02
        ASSIGN1A04:  preds = [COND1B3C]
          real _t1A03#1 = 0.5e0;
          real _t1A05#1 = λ(T0[],T1[])<(T0 * T1)> (_t1A03,rad17DF);
          tensor[3] _t1A0B#1 = <tensor[3]>[_t1A05,_t17FE,_t17FE];
          tensor[3] npos1A0D#7 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos1978,_t1A0B);
          tensor[3] mid1A1A#3 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (npos1A0D,_t1804);
          real _t1A1D#1 = TensorIndex<tensor[3],[0]>(mid1A1A);
          real _t1A1F#1 = λ(T0[])<Abs(T0)> (_t1A1D);
          bool _t1A23#1 = LTE<real>(_t1A1F,_t180D);
          if _t1A23 then goto ASSIGN1A28 else goto ASSIGN1A40
        ASSIGN1A28:  preds = [COND1A41]
          real _t1A27#1 = TensorIndex<tensor[3],[1]>(mid1A1A);
          real _t1A29#1 = λ(T0[])<Abs(T0)> (_t1A27);
          bool _t1A2D#1 = LTE<real>(_t1A29,_t180D);
          if _t1A2D then goto ASSIGN1A31 else goto ASSIGN1A3A
        ASSIGN1A31:  preds = [COND1A3B]
          real _t1A30#1 = TensorIndex<tensor[3],[2]>(mid1A1A);
          real _t1A32#1 = λ(T0[])<Abs(T0)> (_t1A30);
          bool _t1A36#1 = LTE<real>(_t1A32,_t180D);
          goto JOIN1A2F
        JOIN1A2F:  preds = [ASSIGN1DBE,ASSIGN1A3A]
          bool _t1A37#1 = phi(_t1A36,_t1A39)
          goto JOIN1A25
        JOIN1A25:  preds = [JOIN1A2F,ASSIGN1A40]
          bool _t1A3D#1 = phi(_t1A37,_t1A3F)
          if _t1A3D then goto ASSIGN1A49 else goto ASSIGN1B2C
        ASSIGN1A49:  preds = [COND1B2D]
          real _t1A48#6 = TensorIndex<tensor[3],[0]>(npos1A0D);
          bool _t1A4C#1 = EQ<real>(_t1A48,_t1A48);
          bool _t1A4E#1 = BNot(_t1A4C);
          if _t1A4E then goto ASSIGN1A53 else goto ASSIGN1A56
        ASSIGN1A53:  preds = [COND1A6C]
          bool _t1A51#1 = true;
          goto JOIN1A50
        JOIN1A50:  preds = [ASSIGN1A53,JOIN1A5D]
          bool _t1A52#1 = phi(_t1A51,_t1A5F)
          bool _t1A6F#1 = BNot(_t1A52);
          if _t1A6F then goto ASSIGN1A76 else goto ASSIGN1B26
        ASSIGN1A76:  preds = [COND1B27]
          real y1A75#1 = TensorIndex<tensor[3],[1]>(npos1A0D);
          real z1A77#1 = TensorIndex<tensor[3],[2]>(npos1A0D);
          real _t1A79#7 = 0.2e1;
          real _t1A7D#1 = 0.3e1;
          int _t1A7F#0 = 2;
          real _t1A81#1 = λ(T0[])<(T0)^2> (_t1A48);
          real _t1A83#1 = λ(T0[],T1[])<(T0 * T1)> (_t1A7D,_t1A81);
          real _t1A85#2 = λ(T0[],T1[])<(T0) - (T1)> (_t1A79,_t1A83);
          real _t1A89#1 = λ(T0[])<(T0)^2> (_t1A85);
          real _t1A8B#1 = λ(T0[],T1[])<(T0 * T1)> (_t1A79,_t1A89);
          real _t1A8D#1 = 0.12e2;
          real _t1A8F#1 = λ(T0[],T1[])<(T0 * T1)> (_t1A8D,_t1A48);
          int _t1A91#0 = 3;
          real _t1A93#1 = λ(T0[])<(T0)^3> (_t1A48);
          real _t1A95#1 = λ(T0[])<Neg(T0)> (_t1A93);
          real _t1A99#1 = λ(T0[],T1[])<(T0 * T1)> (_t1A79,_t1A48);
          real _t1A9B#1 = λ(T0[],T1[])<(T0 + T1)> (_t1A95,_t1A99);
          real _t1A9D#3 = λ(T0[],T1[])<(T0 + T1)> (_t1A9B,y1A75);
          real _t1A9F#1 = λ(T0[],T1[])<(T0 * T1)> (_t1A8F,_t1A9D);
          real _t1AA1#1 = λ(T0[],T1[])<(T0) - (T1)> (_t1A8B,_t1A9F);
          real _t1AB1#3 = λ(T0[],T1[])<(T0 * T1)> (_t1A79,_t1A85);
          tensor[3] _t1AB5#1 = <tensor[3]>[_t1AA1,_t1AB1,_t17FE];
          tensor[3] _t1ACB#1 = <tensor[3]>[_t1AB1,_t1A79,_t17FE];
          real _t1AD3#2 = λ(T0[],T1[])<(T0 * T1)> (_t1A79,zfuz17DB);
          tensor[3] _t1AD5#1 = <tensor[3]>[_t17FE,_t17FE,_t1AD3];
          tensor[3,3] H1AD7#1 = <tensor[3,3]>[_t1AB5,_t1ACB,_t1AD5];
          real _t1AF7#1 = λ(T0[],T1[])<(T0 * T1)> (_t1AB1,_t1A9D);
          real _t1B09#1 = λ(T0[],T1[])<(T0 * T1)> (_t1A79,_t1A9D);
          real _t1B0F#1 = λ(T0[],T1[])<(T0 * T1)> (_t1AD3,z1A77);
          tensor[3] g1B11#1 = <tensor[3]>[_t1AF7,_t1B09,_t1B0F];
          (real[3] _t1B13#1,tensor[3][3] evecs1B14#0) = Eigen3x3(H1AD7);
          real _t1B18#1 = Subscript<real[3]>(_t1B13,nn19AE);
          real _t1B1A#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (g1B11);
          real _t1B1C#1 = λ(T0[],T1[])<(T0 + T1)> (fBias17DD,_t1B1A);
          real _t1B1E#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t1B18,_t1B1C);
          bool _t1B22#1 = GTE<real>(_t1B1E,fStren17DC);
          goto JOIN1A71
        JOIN1A71:  preds = [ASSIGN1DD1,ASSIGN1B26]
          bool _t1B23#1 = phi(_t1B22,_t1B25)
          goto JOIN1A44
        JOIN1A44:  preds = [JOIN1A71,ASSIGN1B2C]
          bool _t1B29#1 = phi(_t1B23,_t1B2B)
          if _t1B29 then goto NEW1B31 else goto JOIN1B30
        NEW1B31:  preds = [COND1B32]
          new particle(npos1A0D,hh17E7);
          goto JOIN1B30
        JOIN1B30:  preds = [NEW1B31,COND1B32]
          self.pos = pos1978;
          self._pos = pos1978;
          self.step = step19A8;
          self.steps = steps17F9;
          active
          goto JOIN1A02
        JOIN1A02:  preds = [*ACTIVE1B33,COND1B3C]
          tensor[3,3] _t1B3D#1 = fPerp1767 (pos1978);
          tensor[3] force1B3F#2 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (_t1B3D,force19B4);
          tensor[3] es1B41#3 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (hh17E7,force1B3F);
          real _t1B43#2 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (es1B41);
          bool _t1B45#1 = GT<real>(_t1B43,rad17DF);
          if _t1B45 then goto ASSIGN1DD3 else goto JOIN1B47
        ASSIGN1DD3:  preds = [COND1B56]
          real _t1B4A#2 = λ(T0[],T1[])<(T0) / ( T1)> (rad17DF,_t1B43);
          real hh1B4C#1 = λ(T0[],T1[])<(T0 * T1)> (hh17E7,_t1B4A);
          tensor[3] es1B53#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (_t1B4A,es1B41);
          goto JOIN1B47
        JOIN1B47:  preds = [ASSIGN1DD4,COND1B56]
          tensor[3] es1B54#5 = phi(es1B53,es1B41)
          real hh1B4D#2 = phi(hh1B4C,hh17E7)
          tensor[3] samplePos1B58#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos1978,es1B54);
          tensor[3] fs1B5A#2 = fStep16E3 (samplePos1B58);
          real _t1B5C#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (fs1B5A);
          real _t1B5E#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (es1B54);
          real _t1B60#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t1B5C,_t1B5E);
          real _t1B62#5 = 0.5e0;
          bool _t1B64#1 = GT<real>(_t1B60,_t1B62);
          if _t1B64 then goto ASSIGN1DD5 else goto JOIN1B66
        ASSIGN1DD5:  preds = [COND1B75]
          real hh1B69#1 = λ(T0[],T1[])<(T0 * T1)> (hh1B4D,_t1B62);
          self.pos = pos1978;
          self._pos = pos1978;
          self.hh = hh1B69;
          self.step = step19A8;
          self.steps = steps17F9;
          active
          goto JOIN1B66
        JOIN1B66:  preds = [*ACTIVE1B6C,COND1B75]
          real hh1B6A#2 = phi(hh1B4D)
          tensor[3] up1B78#2 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (fs1B5A,es1B54);
          tensor[3] pos1B7A#4 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos1978,up1B78);
          particle[] _t1B7E#1 = SphereQuery<3,particle>(pos1B7A,rad17DF);
        FOREACH1B84:  preds = [ASSIGN1DD7,NEXT1B9D]
          foreach (P1B82 in _t1B7E) on exit goto ASSIGN1DD8
            real accum1B83#2 = phi(_t17FE,accum1B9B)
          tensor[3] _t1B85#1 = P1B82.pos;
          tensor[3] _t1B87#1 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (pos1B7A,_t1B85);
          real _t1B8A#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (_t1B87);
          real _t1B8C#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t1B8A,rad17DF);
          real _t1B8F#1 = 0.1e1;
          real _t1B91#1 = λ(T0[],T1[])<(T0) - (T1)> (_t1B8F,_t1B8C);
          int _t1B93#0 = 4;
          real _t1B95#1 = λ(T0[])<(T0)^4> (_t1B91);
          real accum1B9B#1 = λ(T0[],T1[])<(T0 + T1)> (accum1B83,_t1B95);
          goto FOREACH1B84
        ASSIGN1DD8:  preds = [FOREACH1B84]
          real _t1BA0#1 = λ(T0[],T1[])<(T0) - (T1)> (accum1B83,oldE19B3);
          tensor[3] _t1BA4#1 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (pos1B7A,pos1978);
          tensor[3] _t1BA6#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (_t1B62,_t1BA4);
          tensor[3] _t1BA8#1 = λ(T0[3])<Neg(T0_{i0})>_{3} (force1B3F);
          real _t1BAA#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (_t1BA6,_t1BA8);
          bool _t1BAC#1 = GT<real>(_t1BA0,_t1BAA);
          if _t1BAC then goto ASSIGN1DDB else goto JOIN1BAE
        ASSIGN1DDB:  preds = [COND1BC3]
          real hh1BB7#1 = λ(T0[],T1[])<(T0 * T1)> (hh1B6A,_t1B62);
          self.pos = pos1978;
          self._pos = pos1978;
          self.hh = hh1BB7;
          self.step = step19A8;
          self.steps = steps17F9;
          active
          goto JOIN1BAE
        JOIN1BAE:  preds = [*ACTIVE1BBA,COND1BC3]
          real hh1BB8#1 = phi(hh1B6A)
          tensor[3] pos1BB0#5 = phi(pos1B7A)
          real _t1BC4#1 = 0.11e1;
          real hh1BC6#2 = λ(T0[],T1[])<(T0 * T1)> (hh1BB8,_t1BC4);
          real _t1BCC#2 = TensorIndex<tensor[3],[0]>(pos1BB0);
          bool _t1BD0#1 = EQ<real>(_t1BCC,_t1BCC);
          bool _t1BD2#1 = BNot(_t1BD0);
          if _t1BD2 then goto ASSIGN1BD7 else goto ASSIGN1BDA
        ASSIGN1BD7:  preds = [COND1BF0]
          bool _t1BD5#1 = true;
          goto JOIN1BD4
        JOIN1BD4:  preds = [ASSIGN1BD7,JOIN1BE1]
          bool _t1BD6#1 = phi(_t1BD5,_t1BE3)
          if _t1BD6 then goto DIE1BF4 else goto JOIN1BF3
        DIE1BF4:  preds = [COND1BF5]
          die
          goto JOIN1BF3
        JOIN1BF3:  preds = [*DIE1BF4,COND1BF5]
          int _t1BF6#1 = 5;
          bool _t1BF8#1 = LT<int>(nn19B5,_t1BF6);
          if _t1BF8 then goto ASSIGN1DE1 else goto JOIN1BFA
        ASSIGN1DE1:  preds = [COND1D29]
          real _t1BFD#1 = λ(T0[],T1[])<(T0 * T1)> (_t1B62,rad17DF);
          tensor[3] _t1BFF#1 = λ(T0[3],T1[3])<(T0_{i0} * (1) / ( Sqrt(Σ(i1=0..2)<((T1_{i1} * T1_{i1}))>(i1=0..2))))>_{3} (es1B54,es1B54);
          tensor[3] _t1C01#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (_t1BFD,_t1BFF);
          tensor[3] npos1C03#7 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos1BB0,_t1C01);
          tensor[3] mid1C10#3 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (npos1C03,_t1804);
          real _t1C13#1 = TensorIndex<tensor[3],[0]>(mid1C10);
          real _t1C15#1 = λ(T0[])<Abs(T0)> (_t1C13);
          bool _t1C19#1 = LTE<real>(_t1C15,_t180D);
          if _t1C19 then goto ASSIGN1C1E else goto ASSIGN1C36
        ASSIGN1C1E:  preds = [COND1C37]
          real _t1C1D#1 = TensorIndex<tensor[3],[1]>(mid1C10);
          real _t1C1F#1 = λ(T0[])<Abs(T0)> (_t1C1D);
          bool _t1C23#1 = LTE<real>(_t1C1F,_t180D);
          if _t1C23 then goto ASSIGN1C27 else goto ASSIGN1C30
        ASSIGN1C27:  preds = [COND1C31]
          real _t1C26#1 = TensorIndex<tensor[3],[2]>(mid1C10);
          real _t1C28#1 = λ(T0[])<Abs(T0)> (_t1C26);
          bool _t1C2C#1 = LTE<real>(_t1C28,_t180D);
          goto JOIN1C25
        JOIN1C25:  preds = [ASSIGN1DE5,ASSIGN1C30]
          bool _t1C2D#1 = phi(_t1C2C,_t1C2F)
          goto JOIN1C1B
        JOIN1C1B:  preds = [JOIN1C25,ASSIGN1C36]
          bool _t1C33#1 = phi(_t1C2D,_t1C35)
          if _t1C33 then goto ASSIGN1C3F else goto ASSIGN1D22
        ASSIGN1C3F:  preds = [COND1D23]
          real _t1C3E#6 = TensorIndex<tensor[3],[0]>(npos1C03);
          bool _t1C42#1 = EQ<real>(_t1C3E,_t1C3E);
          bool _t1C44#1 = BNot(_t1C42);
          if _t1C44 then goto ASSIGN1C49 else goto ASSIGN1C4C
        ASSIGN1C49:  preds = [COND1C62]
          bool _t1C47#1 = true;
          goto JOIN1C46
        JOIN1C46:  preds = [ASSIGN1C49,JOIN1C53]
          bool _t1C48#1 = phi(_t1C47,_t1C55)
          bool _t1C65#1 = BNot(_t1C48);
          if _t1C65 then goto ASSIGN1C6C else goto ASSIGN1D1C
        ASSIGN1C6C:  preds = [COND1D1D]
          real y1C6B#1 = TensorIndex<tensor[3],[1]>(npos1C03);
          real z1C6D#1 = TensorIndex<tensor[3],[2]>(npos1C03);
          real _t1C6F#7 = 0.2e1;
          real _t1C73#1 = 0.3e1;
          int _t1C75#0 = 2;
          real _t1C77#1 = λ(T0[])<(T0)^2> (_t1C3E);
          real _t1C79#1 = λ(T0[],T1[])<(T0 * T1)> (_t1C73,_t1C77);
          real _t1C7B#2 = λ(T0[],T1[])<(T0) - (T1)> (_t1C6F,_t1C79);
          real _t1C7F#1 = λ(T0[])<(T0)^2> (_t1C7B);
          real _t1C81#1 = λ(T0[],T1[])<(T0 * T1)> (_t1C6F,_t1C7F);
          real _t1C83#1 = 0.12e2;
          real _t1C85#1 = λ(T0[],T1[])<(T0 * T1)> (_t1C83,_t1C3E);
          int _t1C87#0 = 3;
          real _t1C89#1 = λ(T0[])<(T0)^3> (_t1C3E);
          real _t1C8B#1 = λ(T0[])<Neg(T0)> (_t1C89);
          real _t1C8F#1 = λ(T0[],T1[])<(T0 * T1)> (_t1C6F,_t1C3E);
          real _t1C91#1 = λ(T0[],T1[])<(T0 + T1)> (_t1C8B,_t1C8F);
          real _t1C93#3 = λ(T0[],T1[])<(T0 + T1)> (_t1C91,y1C6B);
          real _t1C95#1 = λ(T0[],T1[])<(T0 * T1)> (_t1C85,_t1C93);
          real _t1C97#1 = λ(T0[],T1[])<(T0) - (T1)> (_t1C81,_t1C95);
          real _t1CA7#3 = λ(T0[],T1[])<(T0 * T1)> (_t1C6F,_t1C7B);
          tensor[3] _t1CAB#1 = <tensor[3]>[_t1C97,_t1CA7,_t17FE];
          tensor[3] _t1CC1#1 = <tensor[3]>[_t1CA7,_t1C6F,_t17FE];
          real _t1CC9#2 = λ(T0[],T1[])<(T0 * T1)> (_t1C6F,zfuz17DB);
          tensor[3] _t1CCB#1 = <tensor[3]>[_t17FE,_t17FE,_t1CC9];
          tensor[3,3] H1CCD#1 = <tensor[3,3]>[_t1CAB,_t1CC1,_t1CCB];
          real _t1CED#1 = λ(T0[],T1[])<(T0 * T1)> (_t1CA7,_t1C93);
          real _t1CFF#1 = λ(T0[],T1[])<(T0 * T1)> (_t1C6F,_t1C93);
          real _t1D05#1 = λ(T0[],T1[])<(T0 * T1)> (_t1CC9,z1C6D);
          tensor[3] g1D07#1 = <tensor[3]>[_t1CED,_t1CFF,_t1D05];
          (real[3] _t1D09#1,tensor[3][3] evecs1D0A#0) = Eigen3x3(H1CCD);
          real _t1D0E#1 = Subscript<real[3]>(_t1D09,nn19AE);
          real _t1D10#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (g1D07);
          real _t1D12#1 = λ(T0[],T1[])<(T0 + T1)> (fBias17DD,_t1D10);
          real _t1D14#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t1D0E,_t1D12);
          bool _t1D18#1 = GTE<real>(_t1D14,fStren17DC);
          goto JOIN1C67
        JOIN1C67:  preds = [ASSIGN1DF8,ASSIGN1D1C]
          bool _t1D19#1 = phi(_t1D18,_t1D1B)
          goto JOIN1C3A
        JOIN1C3A:  preds = [JOIN1C67,ASSIGN1D22]
          bool _t1D1F#1 = phi(_t1D19,_t1D21)
          if _t1D1F then goto NEW1D27 else goto JOIN1D26
        NEW1D27:  preds = [COND1D28]
          new particle(npos1C03,hh1BC6);
          goto JOIN1D26
        JOIN1D26:  preds = [NEW1D27,COND1D28]
          goto JOIN1BFA
        JOIN1BFA:  preds = [JOIN1D26,COND1D29]
          goto JOIN1923
        ASSIGN1D1C:  preds = [COND1D1D]
          bool _t1D1B#1 = false;
          goto JOIN1C67
        ASSIGN1C4C:  preds = [COND1C62]
          real _t1C4B#2 = TensorIndex<tensor[3],[1]>(npos1C03);
          bool _t1C4F#1 = EQ<real>(_t1C4B,_t1C4B);
          bool _t1C51#1 = BNot(_t1C4F);
          if _t1C51 then goto ASSIGN1C56 else goto ASSIGN1C58
        ASSIGN1C56:  preds = [COND1C5F]
          bool _t1C54#1 = true;
          goto JOIN1C53
        JOIN1C53:  preds = [ASSIGN1C56,ASSIGN1C5E]
          bool _t1C55#1 = phi(_t1C54,_t1C5D)
          goto JOIN1C46
        ASSIGN1C58:  preds = [COND1C5F]
          real _t1C57#2 = TensorIndex<tensor[3],[2]>(npos1C03);
          bool _t1C5B#1 = EQ<real>(_t1C57,_t1C57);
          bool _t1C5D#1 = BNot(_t1C5B);
          goto JOIN1C53
        ASSIGN1D22:  preds = [COND1D23]
          bool _t1D21#1 = false;
          goto JOIN1C3A
        ASSIGN1C30:  preds = [COND1C31]
          bool _t1C2F#1 = false;
          goto JOIN1C25
        ASSIGN1C36:  preds = [COND1C37]
          bool _t1C35#1 = false;
          goto JOIN1C1B
        ASSIGN1BDA:  preds = [COND1BF0]
          real _t1BD9#2 = TensorIndex<tensor[3],[1]>(pos1BB0);
          bool _t1BDD#1 = EQ<real>(_t1BD9,_t1BD9);
          bool _t1BDF#1 = BNot(_t1BDD);
          if _t1BDF then goto ASSIGN1BE4 else goto ASSIGN1BE6
        ASSIGN1BE4:  preds = [COND1BED]
          bool _t1BE2#1 = true;
          goto JOIN1BE1
        JOIN1BE1:  preds = [ASSIGN1BE4,ASSIGN1BEC]
          bool _t1BE3#1 = phi(_t1BE2,_t1BEB)
          goto JOIN1BD4
        ASSIGN1BE6:  preds = [COND1BED]
          real _t1BE5#2 = TensorIndex<tensor[3],[2]>(pos1BB0);
          bool _t1BE9#1 = EQ<real>(_t1BE5,_t1BE5);
          bool _t1BEB#1 = BNot(_t1BE9);
          goto JOIN1BE1
        ASSIGN1B26:  preds = [COND1B27]
          bool _t1B25#1 = false;
          goto JOIN1A71
        ASSIGN1A56:  preds = [COND1A6C]
          real _t1A55#2 = TensorIndex<tensor[3],[1]>(npos1A0D);
          bool _t1A59#1 = EQ<real>(_t1A55,_t1A55);
          bool _t1A5B#1 = BNot(_t1A59);
          if _t1A5B then goto ASSIGN1A60 else goto ASSIGN1A62
        ASSIGN1A60:  preds = [COND1A69]
          bool _t1A5E#1 = true;
          goto JOIN1A5D
        JOIN1A5D:  preds = [ASSIGN1A60,ASSIGN1A68]
          bool _t1A5F#1 = phi(_t1A5E,_t1A67)
          goto JOIN1A50
        ASSIGN1A62:  preds = [COND1A69]
          real _t1A61#2 = TensorIndex<tensor[3],[2]>(npos1A0D);
          bool _t1A65#1 = EQ<real>(_t1A61,_t1A61);
          bool _t1A67#1 = BNot(_t1A65);
          goto JOIN1A5D
        ASSIGN1B2C:  preds = [COND1B2D]
          bool _t1B2B#1 = false;
          goto JOIN1A44
        ASSIGN1A3A:  preds = [COND1A3B]
          bool _t1A39#1 = false;
          goto JOIN1A2F
        ASSIGN1A40:  preds = [COND1A41]
          bool _t1A3F#1 = false;
          goto JOIN1A25
        ASSIGN198C:  preds = [COND19A2]
          real _t198B#2 = TensorIndex<tensor[3],[1]>(pos1978);
          bool _t198F#1 = EQ<real>(_t198B,_t198B);
          bool _t1991#1 = BNot(_t198F);
          if _t1991 then goto ASSIGN1996 else goto ASSIGN1998
        ASSIGN1996:  preds = [COND199F]
          bool _t1994#1 = true;
          goto JOIN1993
        JOIN1993:  preds = [ASSIGN1996,ASSIGN199E]
          bool _t1995#1 = phi(_t1994,_t199D)
          goto JOIN1986
        ASSIGN1998:  preds = [COND199F]
          real _t1997#2 = TensorIndex<tensor[3],[2]>(pos1978);
          bool _t199B#1 = EQ<real>(_t1997,_t1997);
          bool _t199D#1 = BNot(_t199B);
          goto JOIN1993
        ASSIGN1912:  preds = [COND1913]
          bool _t1911#1 = false;
          goto JOIN185D
        ASSIGN1842:  preds = [COND1858]
          real _t1841#2 = TensorIndex<tensor[3],[1]>(pos17E5);
          bool _t1845#1 = EQ<real>(_t1841,_t1841);
          bool _t1847#1 = BNot(_t1845);
          if _t1847 then goto ASSIGN184C else goto ASSIGN184E
        ASSIGN184C:  preds = [COND1855]
          bool _t184A#1 = true;
          goto JOIN1849
        JOIN1849:  preds = [ASSIGN184C,ASSIGN1854]
          bool _t184B#1 = phi(_t184A,_t1853)
          goto JOIN183C
        ASSIGN184E:  preds = [COND1855]
          real _t184D#2 = TensorIndex<tensor[3],[2]>(pos17E5);
          bool _t1851#1 = EQ<real>(_t184D,_t184D);
          bool _t1853#1 = BNot(_t1851);
          goto JOIN1849
        ASSIGN1918:  preds = [COND1919]
          bool _t1917#1 = false;
          goto JOIN1830
        ASSIGN1826:  preds = [COND1827]
          bool _t1825#1 = false;
          goto JOIN181B
        ASSIGN182C:  preds = [COND182D]
          bool _t182B#1 = false;
          goto JOIN1811
    end update
  end particle
## initial strand creation
  COLLECTION
    ENTRY17AD:  preds = []
      tensor[3][] ipos17A5#1 = globals.ipos15BA;
    FOREACH17A8:  preds = [ASSIGN17A6,NEXT17AC]
      foreach (x17A7 in ipos17A5) on exit goto RETURN17AE
      real _t17A9#1 = 0.1e1;
      new particle(x17A7,_t17A9);
      goto FOREACH17A8
    RETURN17AE:  preds = [FOREACH17A8]
      return
## global update
  ENTRY1D7D:  preds = []
    real rad1D36#1 = globals.rad15B4;
    real eps1D35#1 = globals.eps15B5;
    particle[] P1D39#5 = Strands<particle,all>;
    (int res1D3A#1) = sum<int>(MAP sum176E (P1D39));
    (int res1D40#1) = max<int>(MAP max1775 (P1D39));
    (int res1D46#1) = sum<int>(MAP sum177C (P1D39));
    (bool res1D4C#2) = all(MAP all1783 (P1D39));
    (real res1D52#1) = max<real>(MAP max178C (P1D39));
    string _t1D57#1 = "One run:";
    string _t1D59#3 = " and ";
    real _t1D5B#2 = λ(T0[],T1[])<(T0) / ( T1)> (res1D52,rad1D36);
    bool _t1D61#2 = LT<real>(_t1D5B,eps1D35);
    string _t1D65#1 = " of ";
    string _t1D67#1 = "\n";
    Print<[string,bool,string,real,string,bool,string,int,string,int,string]>(_t1D57,res1D4C,_t1D59,_t1D5B,_t1D59,_t1D61,_t1D59,res1D46,_t1D65,res1D3A,_t1D67);
    if res1D4C then goto COND1D74 else goto JOIN1D6A
  COND1D74:  preds = [COND1D75]
    if _t1D61 then goto ASSIGN1D71 else goto JOIN1D6F
  ASSIGN1D71:  preds = [COND1D74]
    string _t1D70#1 = "CONVERGED!\n";
    Print<[string]>(_t1D70);
    StabilizeAll;
    goto JOIN1D6F
  JOIN1D6F:  preds = [MASSIGN1D73,COND1D74]
    goto JOIN1D6A
  JOIN1D6A:  preds = [JOIN1D6F,COND1D75]
    int _t1D76#1 = 5000;
    bool _t1D78#1 = GT<int>(res1D40,_t1D76);
    if _t1D78 then goto MASSIGN1D7B else goto JOIN1D7A
  MASSIGN1D7B:  preds = [COND1D7C]
    StabilizeAll;
    goto JOIN1D7A
  JOIN1D7A:  preds = [MASSIGN1D7B,COND1D7C]
    continue
#### end program ####
##### high-ir: after normalization rewriting ####
## properties
  GlobalInit StabilizeAll GlobalReduce StrandSets GlobalUpdate NewStrands StrandCommunication StrandsMayDie HasInputs HasGlobals ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
## globals
  input meshData15B1 (meshData) = <no-default>
  input 0space0853_intermedateGlobal15B2 (space) = <no-default>
  input 0data0855_intermedateGlobal15B3 (data) = <no-default>
  input rad15B4 (rad) = <default>
  input eps15B5 (eps) = <default>
  input v015B6 (v0) = <default>
  input fBias15B7 (fBias) = <default>
  input fStren15B8 (fStren) = <default>
  input zfuz15B9 (zfuz) = <default>
  input ipos15BA (ipos) = <no-default>
## functions
  function real max178C (particle P1784#1) {
    ENTRY178B:  preds = []
      tensor[3] _t1785#1 = P1784.step;
      real _t1788#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (_t1785);
      return _t1788
}
  function bool all1783 (particle P177D#1) {
    ENTRY1782:  preds = []
      bool _t177E#1 = P177D.found;
      return _t177E
}
  function int sum177C (particle P1776#1) {
    ENTRY177B:  preds = []
      int _t1777#1 = P1776.testp;
      return _t1777
}
  function int max1775 (particle P176F#1) {
    ENTRY1774:  preds = []
      int _t1770#1 = P176F.steps;
      return _t1770
}
  function int sum176E (particle P1768#1) {
    ENTRY176D:  preds = []
      int _t1769#1 = P1768.test;
      return _t1769
}
  function int[2] nextCell415EE (int faceIdx15CF#2, int cell15D0#1, femData:Mesh mesh15D1#1) {
    ENTRY15ED:  preds = []
      int _t15D2#3 = -1;
      bool _t15D4#1 = EQ<int>(faceIdx15CF,_t15D2);
      if _t15D4 then goto ASSIGN1D83 else goto ASSIGN15DF
    ASSIGN1D83:  preds = [COND15EB]
      int[2] _t15DB#1 = <int[2]>{_t15D2,_t15D2};
      return _t15DB
      goto JOIN15D6
    JOIN15D6:  preds = [*RETURN(_t15DB)15DD,*RETURN(_t15E8)15EA]
      unreachable
    ASSIGN15DF:  preds = [COND15EB]
      int _t15DE#1 = 8;
      int _t15E0#1 = IMul(cell15D0,_t15DE);
      int _t15E2#1 = 2;
      int _t15E4#1 = IMul(faceIdx15CF,_t15E2);
      int _t15E6#1 = IAdd(_t15E0,_t15E4);
      int[2] _t15E8#1 = ExtractFemItemN<[femData:Mesh,int],int[2],CellFaceCell(Mesh),0000,"",[],int>(mesh15D1,_t15E6);
      return _t15E8
      goto JOIN15D6
}
  function tensor[3] fStep16E3 (tensor[3] s15EF#3) {
    ENTRY16E2:  preds = []
      real zfuz15F0#2 = globals.zfuz15B9;
      real x15F2#10 = TensorIndex<tensor[3],[0]>(s15EF);
      real y15F4#3 = TensorIndex<tensor[3],[1]>(s15EF);
      real z15F6#1 = TensorIndex<tensor[3],[2]>(s15EF);
      real _t15F8#13 = 0.2e1;
      real _t15FC#3 = 0.3e1;
      real _t160C#1 = 0.12e2;
      real _t1620#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[])<((T0 * ((T0) - ((T2 * (T3)^2)))^2)) - ((T4 * T3 * (Neg((T3)^3) + (T0 * T3) + T9)))> (_t15F8,_t15F8,_t15FC,x15F2,_t160C,x15F2,x15F2,_t15F8,x15F2,y15F4);
      real _t1630#2 = λ(T0[],T1[],T2[],T3[])<(T0 * (T0) - ((T2 * (T3)^2)))> (_t15F8,_t15F8,_t15FC,x15F2);
      real _t1632#4 = 0.e0;
      tensor[3] _t1634#1 = <tensor[3]>[_t1620,_t1630,_t1632];
      tensor[3] _t164A#1 = <tensor[3]>[_t1630,_t15F8,_t1632];
      real _t1652#1 = λ(T0[],T1[])<(T0 * T1)> (_t15F8,zfuz15F0);
      tensor[3] _t1654#1 = <tensor[3]>[_t1632,_t1632,_t1652];
      tensor[3,3] H1656#1 = <tensor[3,3]>[_t1634,_t164A,_t1654];
      real _t1676#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[])<(T0 * (T0) - ((T2 * (T3)^2)) * (Neg((T3)^3) + (T0 * T3) + T7))> (_t15F8,_t15F8,_t15FC,x15F2,x15F2,_t15F8,x15F2,y15F4);
      real _t1688#1 = λ(T0[],T1[],T2[],T3[],T4[])<(T0 * (Neg((T1)^3) + (T0 * T1) + T4))> (_t15F8,x15F2,_t15F8,x15F2,y15F4);
      real _t168E#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t15F8,zfuz15F0,z15F6);
      tensor[3] g1690#1 = <tensor[3]>[_t1676,_t1688,_t168E];
      (real[3] evals1693#1,tensor[3][3] E1692#1) = Eigen3x3(H1656);
      real _t1698#1 = 0.1e1;
      int _t169A#2 = 0;
      real _t169C#1 = Subscript<real[3]>(evals1693,_t169A);
      tensor[3] _t16A4#2 = Subscript<tensor[3][3]>(E1692,_t169A);
      tensor[3] up16AE#4 = λ(T0[],T1[],T2[3],T3[3],T4[3])<Σ(i1=0..2)<((Neg((T0) / ( T1)) * T2_{i0} * T2_{i1} * T4_{i1}))>(i1=0..2)>_{3} (_t1698,_t169C,_t16A4,_t16A4,g1690);
      real _t16B1#2 = TensorIndex<tensor[3],[0]>(up16AE);
      bool _t16B5#1 = EQ<real>(_t16B1,_t16B1);
      bool _t16B7#1 = BNot(_t16B5);
      if _t16B7 then goto ASSIGN16BC else goto ASSIGN16BF
    ASSIGN16BC:  preds = [COND16D5]
      bool _t16BA#1 = true;
      goto JOIN16B9
    JOIN16B9:  preds = [ASSIGN16BC,JOIN16C6]
      bool _t16BB#1 = phi(_t16BA,_t16C8)
      if _t16BB then goto ASSIGN16D8 else goto JOIN16D6
    ASSIGN16D8:  preds = [COND16E0]
      real _t16D7#3 = +inf;
      tensor[3] _t16DD#1 = <tensor[3]>[_t16D7,_t16D7,_t16D7];
      return _t16DD
      goto JOIN16D6
    JOIN16D6:  preds = [*RETURN(_t16DD)16DF,COND16E0]
      return up16AE
    ASSIGN16BF:  preds = [COND16D5]
      real _t16BE#2 = TensorIndex<tensor[3],[1]>(up16AE);
      bool _t16C2#1 = EQ<real>(_t16BE,_t16BE);
      bool _t16C4#1 = BNot(_t16C2);
      if _t16C4 then goto ASSIGN16C9 else goto ASSIGN16CB
    ASSIGN16C9:  preds = [COND16D2]
      bool _t16C7#1 = true;
      goto JOIN16C6
    JOIN16C6:  preds = [ASSIGN16C9,ASSIGN16D1]
      bool _t16C8#1 = phi(_t16C7,_t16D0)
      goto JOIN16B9
    ASSIGN16CB:  preds = [COND16D2]
      real _t16CA#2 = TensorIndex<tensor[3],[2]>(up16AE);
      bool _t16CE#1 = EQ<real>(_t16CA,_t16CA);
      bool _t16D0#1 = BNot(_t16CE);
      goto JOIN16C6
}
  function tensor[3,3] fPerp1767 (tensor[3] s16E4#2) {
    ENTRY1766:  preds = []
      real zfuz16E5#1 = globals.zfuz15B9;
      real x16E7#5 = TensorIndex<tensor[3],[0]>(s16E4);
      real y16E9#1 = TensorIndex<tensor[3],[1]>(s16E4);
      real _t16ED#7 = 0.2e1;
      real _t16F1#2 = 0.3e1;
      real _t1701#1 = 0.12e2;
      real _t1715#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[])<((T0 * ((T0) - ((T2 * (T3)^2)))^2)) - ((T4 * T3 * (Neg((T3)^3) + (T0 * T3) + T9)))> (_t16ED,_t16ED,_t16F1,x16E7,_t1701,x16E7,x16E7,_t16ED,x16E7,y16E9);
      real _t1725#2 = λ(T0[],T1[],T2[],T3[])<(T0 * (T0) - ((T2 * (T3)^2)))> (_t16ED,_t16ED,_t16F1,x16E7);
      real _t1727#4 = 0.e0;
      tensor[3] _t1729#1 = <tensor[3]>[_t1715,_t1725,_t1727];
      tensor[3] _t173F#1 = <tensor[3]>[_t1725,_t16ED,_t1727];
      real _t1747#1 = λ(T0[],T1[])<(T0 * T1)> (_t16ED,zfuz16E5);
      tensor[3] _t1749#1 = <tensor[3]>[_t1727,_t1727,_t1747];
      tensor[3,3] H174B#1 = <tensor[3,3]>[_t1729,_t173F,_t1749];
      (real[3] evals174E#0,tensor[3][3] _t174D#1) = Eigen3x3(H174B);
      int _t1750#1 = 0;
      tensor[3] E21752#6 = Subscript<tensor[3][3]>(_t174D,_t1750);
      tensor[3,3] m1758#1 = λ(T0[3],T1[3])<(δ_{i0,i1}) - ((T0_{i0} * T0_{i1}))>_{3 3} (E21752,E21752);
      real t175A#2 = λ(T0[3],T1[3],T2[3],T3[3])<Σ(i0=0..2)(i1=0..2)<(((δ_{i0,i1}) - ((T0_{i0} * T0_{i1})) * (δ_{i0,i1}) - ((T0_{i0} * T0_{i1}))))>(i0=0..2)(i1=0..2)> (E21752,E21752,E21752,E21752);
      bool _t175C#1 = EQ<real>(t175A,t175A);
      bool _t175E#1 = BNot(_t175C);
      if _t175E then goto ASSIGN1762 else goto JOIN1760
    ASSIGN1762:  preds = [COND1764]
      tensor[3,3] _t1761#1 = λ()<Z_{i0,i1}>_{3 3} ();
      return _t1761
      goto JOIN1760
    JOIN1760:  preds = [*RETURN(_t1761)1763,COND1764]
      return m1758
}
## input initialization
  ENTRY15CD:  preds = []
    real rad15BB#5 = 0.1e-1;
    globals.rad15B4 = rad15BB;
    globals.eps15B5 = rad15BB;
    real v015C1#1 = 0.625e-1;
    globals.v015B6 = v015C1;
    globals.fBias15B7 = rad15BB;
    globals.fStren15B8 = rad15BB;
    globals.zfuz15B9 = rad15BB;
    return
## global-variable initialization
  ENTRY17A3:  preds = []
    femData:Mesh meshData178D#2 = globals.meshData15B1;
    int _t178F#1 = 0;
    int _t1791#1 = 1;
    int _t1793#1 = ExtractFemItem<int,NumCell(Mesh)>(meshData178D);
    int _t1795#1 = ISub(_t1793,_t1791);
    int[] _t1797#1 = Range(_t178F,_t1795);
    femData:MeshCell[] _t1799#1 = <femData:MeshCell[]>{};
  FOREACH179D:  preds = [ASSIGN179A,NEXT17A2]
    foreach (_t179B in _t1797) on exit goto RETURN17A4
      femData:MeshCell[] _t179C#1 = phi(_t1799,_t17A0)
    femData:MeshCell _t179E#1 = LoadFem<femData:MeshCell>(meshData178D,_t179B);
    femData:MeshCell[] _t17A0#1 = Append<femData:MeshCell>(_t179C,_t179E);
    goto FOREACH179D
  RETURN17A4:  preds = [FOREACH179D]
    return
## strand
  strand particle (tensor[3] pos017AF#2, real hh017B0#1) in 3D
    state:
      output tensor[3] pos;
      output tensor[3] _pos;
      real hh;
      tensor[3] step;
      bool found;
      int nfs;
      int test;
      int testp;
      int steps;
    state init
      ENTRY17D0:  preds = []
        tensor[3] step17C4#1 = λ()<Z_{i0}>_{3} ();
        bool found17C6#1 = false;
        int nfs17C8#3 = 0;
        int test17CA#1 = 1;
        self.pos = pos017AF;
        self._pos = pos017AF;
        self.hh = hh017B0;
        self.step = step17C4;
        self.found = found17C6;
        self.nfs = nfs17C8;
        self.test = test17CA;
        self.testp = nfs17C8;
        self.steps = nfs17C8;
        return
    end state init
    method update
        ENTRY1D2B:  preds = []
          real rad17DF#13 = globals.rad15B4;
          real eps17DE#1 = globals.eps15B5;
          real fBias17DD#3 = globals.fBias15B7;
          real fStren17DC#3 = globals.fStren15B8;
          real zfuz17DB#6 = globals.zfuz15B9;
          tensor[3] pos17E5#21 = self.pos;
          real hh17E7#9 = self.hh;
          bool found17E9#3 = self.found;
          int nfs17EA#3 = self.nfs;
          int testp17EC#2 = self.testp;
          int steps17ED#1 = self.steps;
          int _t17F7#4 = 1;
          int steps17F9#4 = IAdd(steps17ED,_t17F7);
          real _t17FE#19 = 0.e0;
          tensor[3] _t1804#3 = <tensor[3]>[_t17FE,_t17FE,_t17FE];
          tensor[3] mid1806#3 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (pos17E5,_t1804);
          real _t1809#1 = TensorIndex<tensor[3],[0]>(mid1806);
          real _t180B#1 = λ(T0[])<Abs(T0)> (_t1809);
          real _t180D#9 = 0.4e1;
          bool _t180F#1 = LTE<real>(_t180B,_t180D);
          if _t180F then goto ASSIGN1814 else goto ASSIGN182C
        ASSIGN1814:  preds = [COND182D]
          real _t1813#1 = TensorIndex<tensor[3],[1]>(mid1806);
          real _t1815#1 = λ(T0[])<Abs(T0)> (_t1813);
          bool _t1819#1 = LTE<real>(_t1815,_t180D);
          if _t1819 then goto ASSIGN181D else goto ASSIGN1826
        ASSIGN181D:  preds = [COND1827]
          real _t181C#1 = TensorIndex<tensor[3],[2]>(mid1806);
          real _t181E#1 = λ(T0[])<Abs(T0)> (_t181C);
          bool _t1822#1 = LTE<real>(_t181E,_t180D);
          goto JOIN181B
        JOIN181B:  preds = [ASSIGN1DA1,ASSIGN1826]
          bool _t1823#1 = phi(_t1822,_t1825)
          goto JOIN1811
        JOIN1811:  preds = [JOIN181B,ASSIGN182C]
          bool _t1829#1 = phi(_t1823,_t182B)
          if _t1829 then goto ASSIGN1835 else goto ASSIGN1918
        ASSIGN1835:  preds = [COND1919]
          real _t1834#12 = TensorIndex<tensor[3],[0]>(pos17E5);
          bool _t1838#1 = EQ<real>(_t1834,_t1834);
          bool _t183A#1 = BNot(_t1838);
          if _t183A then goto ASSIGN183F else goto ASSIGN1842
        ASSIGN183F:  preds = [COND1858]
          bool _t183D#1 = true;
          goto JOIN183C
        JOIN183C:  preds = [ASSIGN183F,JOIN1849]
          bool _t183E#1 = phi(_t183D,_t184B)
          bool _t185B#1 = BNot(_t183E);
          if _t185B then goto ASSIGN1862 else goto ASSIGN1912
        ASSIGN1862:  preds = [COND1913]
          real y1861#3 = TensorIndex<tensor[3],[1]>(pos17E5);
          real z1863#1 = TensorIndex<tensor[3],[2]>(pos17E5);
          real _t1865#13 = 0.2e1;
          real _t1869#3 = 0.3e1;
          real _t1879#1 = 0.12e2;
          real _t188D#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[])<((T0 * ((T0) - ((T2 * (T3)^2)))^2)) - ((T4 * T3 * (Neg((T3)^3) + (T0 * T3) + T9)))> (_t1865,_t1865,_t1869,_t1834,_t1879,_t1834,_t1834,_t1865,_t1834,y1861);
          real _t189D#2 = λ(T0[],T1[],T2[],T3[])<(T0 * (T0) - ((T2 * (T3)^2)))> (_t1865,_t1865,_t1869,_t1834);
          tensor[3] _t18A1#1 = <tensor[3]>[_t188D,_t189D,_t17FE];
          tensor[3] _t18B7#1 = <tensor[3]>[_t189D,_t1865,_t17FE];
          real _t18BF#1 = λ(T0[],T1[])<(T0 * T1)> (_t1865,zfuz17DB);
          tensor[3] _t18C1#1 = <tensor[3]>[_t17FE,_t17FE,_t18BF];
          tensor[3,3] H18C3#1 = <tensor[3,3]>[_t18A1,_t18B7,_t18C1];
          real _t18E3#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[])<(T0 * (T0) - ((T2 * (T3)^2)) * (Neg((T3)^3) + (T0 * T3) + T7))> (_t1865,_t1865,_t1869,_t1834,_t1834,_t1865,_t1834,y1861);
          real _t18F5#1 = λ(T0[],T1[],T2[],T3[],T4[])<(T0 * (Neg((T1)^3) + (T0 * T1) + T4))> (_t1865,_t1834,_t1865,_t1834,y1861);
          real _t18FB#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1865,zfuz17DB,z1863);
          tensor[3] g18FD#1 = <tensor[3]>[_t18E3,_t18F5,_t18FB];
          (real[3] _t18FF#1,tensor[3][3] evecs1900#0) = Eigen3x3(H18C3);
          int _t1902#1 = 0;
          real _t1904#1 = Subscript<real[3]>(_t18FF,_t1902);
          real _t190A#1 = λ(T0[],T1[],T2[3])<(T0) / ( (T1 + Sqrt(Σ(i0=0..2)<((T2_{i0} * T2_{i0}))>(i0=0..2))))> (_t1904,fBias17DD,g18FD);
          bool _t190E#1 = GTE<real>(_t190A,fStren17DC);
          goto JOIN185D
        JOIN185D:  preds = [ASSIGN1DB3,ASSIGN1912]
          bool _t190F#1 = phi(_t190E,_t1911)
          goto JOIN1830
        JOIN1830:  preds = [JOIN185D,ASSIGN1918]
          bool _t1915#1 = phi(_t190F,_t1917)
          bool _t191C#1 = BNot(_t1915);
          if _t191C then goto DIE191F else goto JOIN191E
        DIE191F:  preds = [COND1920]
          die
          goto JOIN191E
        JOIN191E:  preds = [*DIE191F,COND1920]
          bool _t1921#1 = BNot(found17E9);
          if _t1921 then goto ASSIGN1926 else goto ASSIGN1977
        ASSIGN1926:  preds = [COND1D2A]
          tensor[3] step1924#3 = fStep16E3 (pos17E5);
          tensor[3] pos1927#4 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos17E5,step1924);
          real _t192F#2 = TensorIndex<tensor[3],[0]>(pos1927);
          bool _t1933#1 = EQ<real>(_t192F,_t192F);
          bool _t1935#1 = BNot(_t1933);
          if _t1935 then goto ASSIGN193A else goto ASSIGN193D
        ASSIGN193A:  preds = [COND1953]
          bool _t1938#1 = true;
          goto JOIN1937
        JOIN1937:  preds = [ASSIGN193A,JOIN1944]
          bool _t1939#1 = phi(_t1938,_t1946)
          if _t1939 then goto DIE1957 else goto JOIN1956
        DIE1957:  preds = [COND1958]
          die
          goto JOIN1956
        JOIN1956:  preds = [*DIE1957,COND1958]
          real _t195B#1 = λ(T0[3],T1[])<(Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))) / ( T1)> (step1924,rad17DF);
          bool _t195D#1 = GT<real>(_t195B,eps17DE);
          if _t195D then goto ASSIGN1E05 else goto ASSIGN196E
        ASSIGN1E05:  preds = [COND1972]
          int nfs1962#2 = IAdd(nfs17EA,_t17F7);
          int _t1965#1 = 10;
          bool _t1967#1 = GT<int>(nfs1962,_t1965);
          if _t1967 then goto DIE196A else goto JOIN1969
        DIE196A:  preds = [COND196B]
          die
          goto JOIN1969
        JOIN1969:  preds = [*DIE196A,COND196B]
          goto JOIN195F
        JOIN195F:  preds = [JOIN1969,ASSIGN196E]
          int testp1970#1 = phi(testp17EC,_t17F7)
          int nfs1963#1 = phi(nfs1962,nfs17EA)
          bool found196D#1 = phi(found17E9,found196C)
          goto JOIN1923
        JOIN1923:  preds = [JOIN195F,JOIN1BFA]
          int testp1975#1 = phi(testp1970,testp17EC)
          int nfs1974#1 = phi(nfs1963,nfs17EA)
          bool found1973#1 = phi(found196D,found17E9)
          tensor[3] step1925#1 = phi(step1924,up1B78)
          real hh1B57#1 = phi(hh17E7,hh1BC6)
          tensor[3] pos1928#2 = phi(pos1927,pos1BB0)
          self.pos = pos1928;
          self._pos = pos1928;
          self.hh = hh1B57;
          self.step = step1925;
          self.found = found1973;
          self.nfs = nfs1974;
          self.testp = testp1975;
          self.steps = steps17F9;
          active
        ASSIGN196E:  preds = [COND1972]
          bool found196C#1 = true;
          goto JOIN195F
        ASSIGN193D:  preds = [COND1953]
          real _t193C#2 = TensorIndex<tensor[3],[1]>(pos1927);
          bool _t1940#1 = EQ<real>(_t193C,_t193C);
          bool _t1942#1 = BNot(_t1940);
          if _t1942 then goto ASSIGN1947 else goto ASSIGN1949
        ASSIGN1947:  preds = [COND1950]
          bool _t1945#1 = true;
          goto JOIN1944
        JOIN1944:  preds = [ASSIGN1947,ASSIGN194F]
          bool _t1946#1 = phi(_t1945,_t194E)
          goto JOIN1937
        ASSIGN1949:  preds = [COND1950]
          real _t1948#2 = TensorIndex<tensor[3],[2]>(pos1927);
          bool _t194C#1 = EQ<real>(_t1948,_t1948);
          bool _t194E#1 = BNot(_t194C);
          goto JOIN1944
        ASSIGN1977:  preds = [COND1D2A]
          tensor[3] _t1976#12 = fStep16E3 (pos17E5);
          tensor[3] pos1978#11 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos17E5,_t1976);
          real _t197E#2 = TensorIndex<tensor[3],[0]>(pos1978);
          bool _t1982#1 = EQ<real>(_t197E,_t197E);
          bool _t1984#1 = BNot(_t1982);
          if _t1984 then goto ASSIGN1989 else goto ASSIGN198C
        ASSIGN1989:  preds = [COND19A2]
          bool _t1987#1 = true;
          goto JOIN1986
        JOIN1986:  preds = [ASSIGN1989,JOIN1993]
          bool _t1988#1 = phi(_t1987,_t1995)
          if _t1988 then goto DIE19A6 else goto JOIN19A5
        DIE19A6:  preds = [COND19A7]
          die
          goto JOIN19A5
        JOIN19A5:  preds = [*DIE19A6,COND19A7]
          tensor[3] step19A8#4 = λ()<Z_{i0}>_{3} ();
          int nn19AE#4 = 0;
          particle[] _t19B0#1 = SphereQuery<3,particle>(pos1978,rad17DF);
        FOREACH19B6:  preds = [ASSIGN1DB8,NEXT19FD]
          foreach (P19B2 in _t19B0) on exit goto ASSIGN1DB9
            int nn19B5#3 = phi(nn19AE,nn19FB)
            tensor[3] force19B4#7 = phi(step19A8,force19F7)
            real oldE19B3#2 = phi(_t17FE,oldE19CD)
          tensor[3] _t19B7#4 = P19B2.pos;
          real _t19C1#3 = 0.1e1;
          real oldE19CD#1 = λ(T0[],T1[],T2[3],T3[3],T4[3],T5[])<(T0 + ((T1) - ((Sqrt(Σ(i0=0..2)<(((T2_{i0}) - ((T3_{i0} + T4_{i0})) * (T2_{i0}) - ((T3_{i0} + T4_{i0}))))>(i0=0..2))) / ( T5)))^4)> (oldE19B3,_t19C1,_t19B7,pos17E5,_t1976,rad17DF);
          int _t19D9#1 = -4;
          real _t19DB#1 = IntToReal(_t19D9);
          tensor[3] force19F7#1 = λ(T0[3],T1[],T2[],T3[3],T4[3],T5[3],T6[],T7[],T8[],T9[3],T10[3],T11[3],T12[3],T13[3],T14[3])<(T0_{i0} + ((T1 * ((T2) - ((Sqrt(Σ(i3=0..2)<(((T3_{i3}) - ((T4_{i3} + T5_{i3})) * (T3_{i3}) - ((T4_{i3} + T5_{i3}))))>(i3=0..2))) / ( T6)))^3 * (T2) / ( T6) * (T3_{i0}) - ((T4_{i0} + T5_{i0})))) / ( Sqrt(Σ(i3=0..2)<(((T3_{i3}) - ((T4_{i3} + T5_{i3})) * (T3_{i3}) - ((T4_{i3} + T5_{i3}))))>(i3=0..2))))>_{3} (force19B4,_t19DB,_t19C1,_t19B7,pos17E5,_t1976,rad17DF,_t19C1,rad17DF,_t19B7,pos17E5,_t1976,_t19B7,pos17E5,_t1976);
          int nn19FB#1 = IAdd(nn19B5,_t17F7);
          goto FOREACH19B6
        ASSIGN1DB9:  preds = [FOREACH19B6]
          bool _t1A00#1 = EQ<int>(nn19AE,nn19B5);
          if _t1A00 then goto ASSIGN1A04 else goto JOIN1A02
        ASSIGN1A04:  preds = [COND1B3C]
          real _t1A03#1 = 0.5e0;
          real _t1A05#1 = λ(T0[],T1[])<(T0 * T1)> (_t1A03,rad17DF);
          tensor[3] _t1A0B#2 = <tensor[3]>[_t1A05,_t17FE,_t17FE];
          tensor[3] npos1A0D#6 = λ(T0[3],T1[3],T2[3])<(T0_{i0} + T1_{i0} + T2_{i0})>_{3} (pos17E5,_t1976,_t1A0B);
          tensor[3] mid1A1A#3 = λ(T0[3],T1[3],T2[3],T3[3])<((T0_{i0} + T1_{i0} + T2_{i0})) - (T3_{i0})>_{3} (pos17E5,_t1976,_t1A0B,_t1804);
          real _t1A1D#1 = TensorIndex<tensor[3],[0]>(mid1A1A);
          real _t1A1F#1 = λ(T0[])<Abs(T0)> (_t1A1D);
          bool _t1A23#1 = LTE<real>(_t1A1F,_t180D);
          if _t1A23 then goto ASSIGN1A28 else goto ASSIGN1A40
        ASSIGN1A28:  preds = [COND1A41]
          real _t1A27#1 = TensorIndex<tensor[3],[1]>(mid1A1A);
          real _t1A29#1 = λ(T0[])<Abs(T0)> (_t1A27);
          bool _t1A2D#1 = LTE<real>(_t1A29,_t180D);
          if _t1A2D then goto ASSIGN1A31 else goto ASSIGN1A3A
        ASSIGN1A31:  preds = [COND1A3B]
          real _t1A30#1 = TensorIndex<tensor[3],[2]>(mid1A1A);
          real _t1A32#1 = λ(T0[])<Abs(T0)> (_t1A30);
          bool _t1A36#1 = LTE<real>(_t1A32,_t180D);
          goto JOIN1A2F
        JOIN1A2F:  preds = [ASSIGN1DBE,ASSIGN1A3A]
          bool _t1A37#1 = phi(_t1A36,_t1A39)
          goto JOIN1A25
        JOIN1A25:  preds = [JOIN1A2F,ASSIGN1A40]
          bool _t1A3D#1 = phi(_t1A37,_t1A3F)
          if _t1A3D then goto ASSIGN1A49 else goto ASSIGN1B2C
        ASSIGN1A49:  preds = [COND1B2D]
          real _t1A48#12 = TensorIndex<tensor[3],[0]>(npos1A0D);
          bool _t1A4C#1 = EQ<real>(_t1A48,_t1A48);
          bool _t1A4E#1 = BNot(_t1A4C);
          if _t1A4E then goto ASSIGN1A53 else goto ASSIGN1A56
        ASSIGN1A53:  preds = [COND1A6C]
          bool _t1A51#1 = true;
          goto JOIN1A50
        JOIN1A50:  preds = [ASSIGN1A53,JOIN1A5D]
          bool _t1A52#1 = phi(_t1A51,_t1A5F)
          bool _t1A6F#1 = BNot(_t1A52);
          if _t1A6F then goto ASSIGN1A76 else goto ASSIGN1B26
        ASSIGN1A76:  preds = [COND1B27]
          real y1A75#3 = TensorIndex<tensor[3],[1]>(npos1A0D);
          real z1A77#1 = TensorIndex<tensor[3],[2]>(npos1A0D);
          real _t1A79#13 = 0.2e1;
          real _t1A7D#3 = 0.3e1;
          real _t1A8D#1 = 0.12e2;
          real _t1AA1#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[])<((T0 * ((T0) - ((T2 * (T3)^2)))^2)) - ((T4 * T3 * (Neg((T3)^3) + (T0 * T3) + T9)))> (_t1A79,_t1A79,_t1A7D,_t1A48,_t1A8D,_t1A48,_t1A48,_t1A79,_t1A48,y1A75);
          real _t1AB1#2 = λ(T0[],T1[],T2[],T3[])<(T0 * (T0) - ((T2 * (T3)^2)))> (_t1A79,_t1A79,_t1A7D,_t1A48);
          tensor[3] _t1AB5#1 = <tensor[3]>[_t1AA1,_t1AB1,_t17FE];
          tensor[3] _t1ACB#1 = <tensor[3]>[_t1AB1,_t1A79,_t17FE];
          real _t1AD3#1 = λ(T0[],T1[])<(T0 * T1)> (_t1A79,zfuz17DB);
          tensor[3] _t1AD5#1 = <tensor[3]>[_t17FE,_t17FE,_t1AD3];
          tensor[3,3] H1AD7#1 = <tensor[3,3]>[_t1AB5,_t1ACB,_t1AD5];
          real _t1AF7#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[])<(T0 * (T0) - ((T2 * (T3)^2)) * (Neg((T3)^3) + (T0 * T3) + T7))> (_t1A79,_t1A79,_t1A7D,_t1A48,_t1A48,_t1A79,_t1A48,y1A75);
          real _t1B09#1 = λ(T0[],T1[],T2[],T3[],T4[])<(T0 * (Neg((T1)^3) + (T0 * T1) + T4))> (_t1A79,_t1A48,_t1A79,_t1A48,y1A75);
          real _t1B0F#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1A79,zfuz17DB,z1A77);
          tensor[3] g1B11#1 = <tensor[3]>[_t1AF7,_t1B09,_t1B0F];
          (real[3] _t1B13#1,tensor[3][3] evecs1B14#0) = Eigen3x3(H1AD7);
          real _t1B18#1 = Subscript<real[3]>(_t1B13,nn19AE);
          real _t1B1E#1 = λ(T0[],T1[],T2[3])<(T0) / ( (T1 + Sqrt(Σ(i0=0..2)<((T2_{i0} * T2_{i0}))>(i0=0..2))))> (_t1B18,fBias17DD,g1B11);
          bool _t1B22#1 = GTE<real>(_t1B1E,fStren17DC);
          goto JOIN1A71
        JOIN1A71:  preds = [ASSIGN1DD1,ASSIGN1B26]
          bool _t1B23#1 = phi(_t1B22,_t1B25)
          goto JOIN1A44
        JOIN1A44:  preds = [JOIN1A71,ASSIGN1B2C]
          bool _t1B29#1 = phi(_t1B23,_t1B2B)
          if _t1B29 then goto NEW1B31 else goto JOIN1B30
        NEW1B31:  preds = [COND1B32]
          new particle(npos1A0D,hh17E7);
          goto JOIN1B30
        JOIN1B30:  preds = [NEW1B31,COND1B32]
          self.pos = pos1978;
          self._pos = pos1978;
          self.step = step19A8;
          self.steps = steps17F9;
          active
          goto JOIN1A02
        JOIN1A02:  preds = [*ACTIVE1B33,COND1B3C]
          tensor[3,3] _t1B3D#6 = fPerp1767 (pos1978);
          tensor[3] es1B41#1 = λ(T0[],T1[3 3],T2[3])<(T0 * Σ(i2=0..2)<((T1_{i0,i2} * T2_{i2}))>(i2=0..2))>_{3} (hh17E7,_t1B3D,force19B4);
          real _t1B43#1 = λ(T0[],T1[3 3],T2[3])<Sqrt((T0 * T0 * Σ(i0=0..2)<((Σ(i2=0..2)<((T1_{i0,i2} * T2_{i2}))>(i2=0..2) * Σ(i2=0..2)<((T1_{i0,i2} * T2_{i2}))>(i2=0..2)))>(i0=0..2)))> (hh17E7,_t1B3D,force19B4);
          bool _t1B45#1 = GT<real>(_t1B43,rad17DF);
          if _t1B45 then goto ASSIGN1E5C else goto JOIN1B47
        ASSIGN1E5C:  preds = [COND1B56]
          real hh1B4C#1 = λ(T0[],T1[],T2[],T3[3 3],T4[3])<(T0 * (T1) / ( Sqrt((T0 * T0 * Σ(i0=0..2)<((Σ(i2=0..2)<((T3_{i0,i2} * T4_{i2}))>(i2=0..2) * Σ(i2=0..2)<((T3_{i0,i2} * T4_{i2}))>(i2=0..2)))>(i0=0..2)))))> (hh17E7,rad17DF,hh17E7,_t1B3D,force19B4);
          tensor[3] es1B53#1 = λ(T0[],T1[],T2[3 3],T3[3],T4[],T5[3 3],T6[3])<(T1 * (T0) / ( Sqrt((T1 * T1 * Σ(i1=0..2)<((Σ(i3=0..2)<((T2_{i1,i3} * T3_{i3}))>(i3=0..2) * Σ(i3=0..2)<((T2_{i1,i3} * T3_{i3}))>(i3=0..2)))>(i1=0..2)))) * Σ(i5=0..2)<((T2_{i0,i5} * T3_{i5}))>(i5=0..2))>_{3} (rad17DF,hh17E7,_t1B3D,force19B4,hh17E7,_t1B3D,force19B4);
          goto JOIN1B47
        JOIN1B47:  preds = [ASSIGN1E5D,COND1B56]
          tensor[3] es1B54#10 = phi(es1B53,es1B41)
          real hh1B4D#2 = phi(hh1B4C,hh17E7)
          tensor[3] samplePos1B58#1 = λ(T0[3],T1[3],T2[3])<(T0_{i0} + T1_{i0} + T2_{i0})>_{3} (pos17E5,_t1976,es1B54);
          tensor[3] fs1B5A#5 = fStep16E3 (samplePos1B58);
          real _t1B60#1 = λ(T0[3],T1[3])<(Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))) / ( Sqrt(Σ(i0=0..2)<((T1_{i0} * T1_{i0}))>(i0=0..2)))> (fs1B5A,es1B54);
          real _t1B62#6 = 0.5e0;
          bool _t1B64#1 = GT<real>(_t1B60,_t1B62);
          if _t1B64 then goto ASSIGN1DD5 else goto JOIN1B66
        ASSIGN1DD5:  preds = [COND1B75]
          real hh1B69#1 = λ(T0[],T1[])<(T0 * T1)> (hh1B4D,_t1B62);
          self.pos = pos1978;
          self._pos = pos1978;
          self.hh = hh1B69;
          self.step = step19A8;
          self.steps = steps17F9;
          active
          goto JOIN1B66
        JOIN1B66:  preds = [*ACTIVE1B6C,COND1B75]
          real hh1B6A#2 = phi(hh1B4D)
          tensor[3] up1B78#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (fs1B5A,es1B54);
          tensor[3] pos1B7A#2 = λ(T0[3],T1[3],T2[3],T3[3])<(T0_{i0} + T1_{i0} + T2_{i0} + T3_{i0})>_{3} (pos17E5,_t1976,fs1B5A,es1B54);
          particle[] _t1B7E#1 = SphereQuery<3,particle>(pos1B7A,rad17DF);
        FOREACH1B84:  preds = [ASSIGN1DD7,NEXT1B9D]
          foreach (P1B82 in _t1B7E) on exit goto ASSIGN1DD8
            real accum1B83#2 = phi(_t17FE,accum1B9B)
          tensor[3] _t1B85#1 = P1B82.pos;
          real _t1B8F#1 = 0.1e1;
          real accum1B9B#1 = λ(T0[],T1[],T2[3],T3[3],T4[3],T5[3],T6[3],T7[])<(T0 + ((T1) - ((Sqrt(Σ(i0=0..2)<((((T2_{i0} + T3_{i0} + T4_{i0} + T5_{i0})) - (T6_{i0}) * ((T2_{i0} + T3_{i0} + T4_{i0} + T5_{i0})) - (T6_{i0})))>(i0=0..2))) / ( T7)))^4)> (accum1B83,_t1B8F,pos17E5,_t1976,fs1B5A,es1B54,_t1B85,rad17DF);
          goto FOREACH1B84
        ASSIGN1DD8:  preds = [FOREACH1B84]
          real _t1BA0#1 = λ(T0[],T1[])<(T0) - (T1)> (accum1B83,oldE19B3);
          real _t1BAA#1 = λ(T0[],T1[3],T2[3],T3[3],T4[3],T5[3],T6[3],T7[3 3],T8[3])<(T0 * Σ(i0=0..2)<((((T1_{i0} + T2_{i0} + T3_{i0} + T4_{i0})) - ((T1_{i0} + T2_{i0})) * Neg(Σ(i2=0..2)<((T7_{i0,i2} * T8_{i2}))>(i2=0..2))))>(i0=0..2))> (_t1B62,pos17E5,_t1976,fs1B5A,es1B54,pos17E5,_t1976,_t1B3D,force19B4);
          bool _t1BAC#1 = GT<real>(_t1BA0,_t1BAA);
          if _t1BAC then goto ASSIGN1DDB else goto JOIN1BAE
        ASSIGN1DDB:  preds = [COND1BC3]
          real hh1BB7#1 = λ(T0[],T1[])<(T0 * T1)> (hh1B6A,_t1B62);
          self.pos = pos1978;
          self._pos = pos1978;
          self.hh = hh1BB7;
          self.step = step19A8;
          self.steps = steps17F9;
          active
          goto JOIN1BAE
        JOIN1BAE:  preds = [*ACTIVE1BBA,COND1BC3]
          real hh1BB8#1 = phi(hh1B6A)
          tensor[3] pos1BB0#6 = phi(pos1B7A)
          real _t1BC4#1 = 0.11e1;
          real hh1BC6#2 = λ(T0[],T1[])<(T0 * T1)> (hh1BB8,_t1BC4);
          real _t1BCC#2 = TensorIndex<tensor[3],[0]>(pos1BB0);
          bool _t1BD0#1 = EQ<real>(_t1BCC,_t1BCC);
          bool _t1BD2#1 = BNot(_t1BD0);
          if _t1BD2 then goto ASSIGN1BD7 else goto ASSIGN1BDA
        ASSIGN1BD7:  preds = [COND1BF0]
          bool _t1BD5#1 = true;
          goto JOIN1BD4
        JOIN1BD4:  preds = [ASSIGN1BD7,JOIN1BE1]
          bool _t1BD6#1 = phi(_t1BD5,_t1BE3)
          if _t1BD6 then goto DIE1BF4 else goto JOIN1BF3
        DIE1BF4:  preds = [COND1BF5]
          die
          goto JOIN1BF3
        JOIN1BF3:  preds = [*DIE1BF4,COND1BF5]
          int _t1BF6#1 = 5;
          bool _t1BF8#1 = LT<int>(nn19B5,_t1BF6);
          if _t1BF8 then goto ASSIGN1E6C else goto JOIN1BFA
        ASSIGN1E6C:  preds = [COND1D29]
          tensor[3] npos1C03#6 = λ(T0[3],T1[],T2[],T3[3],T4[3])<(T0_{i0} + (T1 * T2 * T3_{i0} * (1) / ( Sqrt(Σ(i3=0..2)<((T3_{i3} * T3_{i3}))>(i3=0..2)))))>_{3} (pos1BB0,_t1B62,rad17DF,es1B54,es1B54);
          tensor[3] mid1C10#3 = λ(T0[3],T1[],T2[],T3[3],T4[3],T5[3])<((T0_{i0} + (T1 * T2 * T3_{i0} * (1) / ( Sqrt(Σ(i4=0..2)<((T3_{i4} * T3_{i4}))>(i4=0..2)))))) - (T5_{i0})>_{3} (pos1BB0,_t1B62,rad17DF,es1B54,es1B54,_t1804);
          real _t1C13#1 = TensorIndex<tensor[3],[0]>(mid1C10);
          real _t1C15#1 = λ(T0[])<Abs(T0)> (_t1C13);
          bool _t1C19#1 = LTE<real>(_t1C15,_t180D);
          if _t1C19 then goto ASSIGN1C1E else goto ASSIGN1C36
        ASSIGN1C1E:  preds = [COND1C37]
          real _t1C1D#1 = TensorIndex<tensor[3],[1]>(mid1C10);
          real _t1C1F#1 = λ(T0[])<Abs(T0)> (_t1C1D);
          bool _t1C23#1 = LTE<real>(_t1C1F,_t180D);
          if _t1C23 then goto ASSIGN1C27 else goto ASSIGN1C30
        ASSIGN1C27:  preds = [COND1C31]
          real _t1C26#1 = TensorIndex<tensor[3],[2]>(mid1C10);
          real _t1C28#1 = λ(T0[])<Abs(T0)> (_t1C26);
          bool _t1C2C#1 = LTE<real>(_t1C28,_t180D);
          goto JOIN1C25
        JOIN1C25:  preds = [ASSIGN1DE5,ASSIGN1C30]
          bool _t1C2D#1 = phi(_t1C2C,_t1C2F)
          goto JOIN1C1B
        JOIN1C1B:  preds = [JOIN1C25,ASSIGN1C36]
          bool _t1C33#1 = phi(_t1C2D,_t1C35)
          if _t1C33 then goto ASSIGN1C3F else goto ASSIGN1D22
        ASSIGN1C3F:  preds = [COND1D23]
          real _t1C3E#12 = TensorIndex<tensor[3],[0]>(npos1C03);
          bool _t1C42#1 = EQ<real>(_t1C3E,_t1C3E);
          bool _t1C44#1 = BNot(_t1C42);
          if _t1C44 then goto ASSIGN1C49 else goto ASSIGN1C4C
        ASSIGN1C49:  preds = [COND1C62]
          bool _t1C47#1 = true;
          goto JOIN1C46
        JOIN1C46:  preds = [ASSIGN1C49,JOIN1C53]
          bool _t1C48#1 = phi(_t1C47,_t1C55)
          bool _t1C65#1 = BNot(_t1C48);
          if _t1C65 then goto ASSIGN1C6C else goto ASSIGN1D1C
        ASSIGN1C6C:  preds = [COND1D1D]
          real y1C6B#3 = TensorIndex<tensor[3],[1]>(npos1C03);
          real z1C6D#1 = TensorIndex<tensor[3],[2]>(npos1C03);
          real _t1C6F#13 = 0.2e1;
          real _t1C73#3 = 0.3e1;
          real _t1C83#1 = 0.12e2;
          real _t1C97#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[])<((T0 * ((T0) - ((T2 * (T3)^2)))^2)) - ((T4 * T3 * (Neg((T3)^3) + (T0 * T3) + T9)))> (_t1C6F,_t1C6F,_t1C73,_t1C3E,_t1C83,_t1C3E,_t1C3E,_t1C6F,_t1C3E,y1C6B);
          real _t1CA7#2 = λ(T0[],T1[],T2[],T3[])<(T0 * (T0) - ((T2 * (T3)^2)))> (_t1C6F,_t1C6F,_t1C73,_t1C3E);
          tensor[3] _t1CAB#1 = <tensor[3]>[_t1C97,_t1CA7,_t17FE];
          tensor[3] _t1CC1#1 = <tensor[3]>[_t1CA7,_t1C6F,_t17FE];
          real _t1CC9#1 = λ(T0[],T1[])<(T0 * T1)> (_t1C6F,zfuz17DB);
          tensor[3] _t1CCB#1 = <tensor[3]>[_t17FE,_t17FE,_t1CC9];
          tensor[3,3] H1CCD#1 = <tensor[3,3]>[_t1CAB,_t1CC1,_t1CCB];
          real _t1CED#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[])<(T0 * (T0) - ((T2 * (T3)^2)) * (Neg((T3)^3) + (T0 * T3) + T7))> (_t1C6F,_t1C6F,_t1C73,_t1C3E,_t1C3E,_t1C6F,_t1C3E,y1C6B);
          real _t1CFF#1 = λ(T0[],T1[],T2[],T3[],T4[])<(T0 * (Neg((T1)^3) + (T0 * T1) + T4))> (_t1C6F,_t1C3E,_t1C6F,_t1C3E,y1C6B);
          real _t1D05#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1C6F,zfuz17DB,z1C6D);
          tensor[3] g1D07#1 = <tensor[3]>[_t1CED,_t1CFF,_t1D05];
          (real[3] _t1D09#1,tensor[3][3] evecs1D0A#0) = Eigen3x3(H1CCD);
          real _t1D0E#1 = Subscript<real[3]>(_t1D09,nn19AE);
          real _t1D14#1 = λ(T0[],T1[],T2[3])<(T0) / ( (T1 + Sqrt(Σ(i0=0..2)<((T2_{i0} * T2_{i0}))>(i0=0..2))))> (_t1D0E,fBias17DD,g1D07);
          bool _t1D18#1 = GTE<real>(_t1D14,fStren17DC);
          goto JOIN1C67
        JOIN1C67:  preds = [ASSIGN1DF8,ASSIGN1D1C]
          bool _t1D19#1 = phi(_t1D18,_t1D1B)
          goto JOIN1C3A
        JOIN1C3A:  preds = [JOIN1C67,ASSIGN1D22]
          bool _t1D1F#1 = phi(_t1D19,_t1D21)
          if _t1D1F then goto NEW1D27 else goto JOIN1D26
        NEW1D27:  preds = [COND1D28]
          new particle(npos1C03,hh1BC6);
          goto JOIN1D26
        JOIN1D26:  preds = [NEW1D27,COND1D28]
          goto JOIN1BFA
        JOIN1BFA:  preds = [JOIN1D26,COND1D29]
          goto JOIN1923
        ASSIGN1D1C:  preds = [COND1D1D]
          bool _t1D1B#1 = false;
          goto JOIN1C67
        ASSIGN1C4C:  preds = [COND1C62]
          real _t1C4B#2 = TensorIndex<tensor[3],[1]>(npos1C03);
          bool _t1C4F#1 = EQ<real>(_t1C4B,_t1C4B);
          bool _t1C51#1 = BNot(_t1C4F);
          if _t1C51 then goto ASSIGN1C56 else goto ASSIGN1C58
        ASSIGN1C56:  preds = [COND1C5F]
          bool _t1C54#1 = true;
          goto JOIN1C53
        JOIN1C53:  preds = [ASSIGN1C56,ASSIGN1C5E]
          bool _t1C55#1 = phi(_t1C54,_t1C5D)
          goto JOIN1C46
        ASSIGN1C58:  preds = [COND1C5F]
          real _t1C57#2 = TensorIndex<tensor[3],[2]>(npos1C03);
          bool _t1C5B#1 = EQ<real>(_t1C57,_t1C57);
          bool _t1C5D#1 = BNot(_t1C5B);
          goto JOIN1C53
        ASSIGN1D22:  preds = [COND1D23]
          bool _t1D21#1 = false;
          goto JOIN1C3A
        ASSIGN1C30:  preds = [COND1C31]
          bool _t1C2F#1 = false;
          goto JOIN1C25
        ASSIGN1C36:  preds = [COND1C37]
          bool _t1C35#1 = false;
          goto JOIN1C1B
        ASSIGN1BDA:  preds = [COND1BF0]
          real _t1BD9#2 = TensorIndex<tensor[3],[1]>(pos1BB0);
          bool _t1BDD#1 = EQ<real>(_t1BD9,_t1BD9);
          bool _t1BDF#1 = BNot(_t1BDD);
          if _t1BDF then goto ASSIGN1BE4 else goto ASSIGN1BE6
        ASSIGN1BE4:  preds = [COND1BED]
          bool _t1BE2#1 = true;
          goto JOIN1BE1
        JOIN1BE1:  preds = [ASSIGN1BE4,ASSIGN1BEC]
          bool _t1BE3#1 = phi(_t1BE2,_t1BEB)
          goto JOIN1BD4
        ASSIGN1BE6:  preds = [COND1BED]
          real _t1BE5#2 = TensorIndex<tensor[3],[2]>(pos1BB0);
          bool _t1BE9#1 = EQ<real>(_t1BE5,_t1BE5);
          bool _t1BEB#1 = BNot(_t1BE9);
          goto JOIN1BE1
        ASSIGN1B26:  preds = [COND1B27]
          bool _t1B25#1 = false;
          goto JOIN1A71
        ASSIGN1A56:  preds = [COND1A6C]
          real _t1A55#2 = TensorIndex<tensor[3],[1]>(npos1A0D);
          bool _t1A59#1 = EQ<real>(_t1A55,_t1A55);
          bool _t1A5B#1 = BNot(_t1A59);
          if _t1A5B then goto ASSIGN1A60 else goto ASSIGN1A62
        ASSIGN1A60:  preds = [COND1A69]
          bool _t1A5E#1 = true;
          goto JOIN1A5D
        JOIN1A5D:  preds = [ASSIGN1A60,ASSIGN1A68]
          bool _t1A5F#1 = phi(_t1A5E,_t1A67)
          goto JOIN1A50
        ASSIGN1A62:  preds = [COND1A69]
          real _t1A61#2 = TensorIndex<tensor[3],[2]>(npos1A0D);
          bool _t1A65#1 = EQ<real>(_t1A61,_t1A61);
          bool _t1A67#1 = BNot(_t1A65);
          goto JOIN1A5D
        ASSIGN1B2C:  preds = [COND1B2D]
          bool _t1B2B#1 = false;
          goto JOIN1A44
        ASSIGN1A3A:  preds = [COND1A3B]
          bool _t1A39#1 = false;
          goto JOIN1A2F
        ASSIGN1A40:  preds = [COND1A41]
          bool _t1A3F#1 = false;
          goto JOIN1A25
        ASSIGN198C:  preds = [COND19A2]
          real _t198B#2 = TensorIndex<tensor[3],[1]>(pos1978);
          bool _t198F#1 = EQ<real>(_t198B,_t198B);
          bool _t1991#1 = BNot(_t198F);
          if _t1991 then goto ASSIGN1996 else goto ASSIGN1998
        ASSIGN1996:  preds = [COND199F]
          bool _t1994#1 = true;
          goto JOIN1993
        JOIN1993:  preds = [ASSIGN1996,ASSIGN199E]
          bool _t1995#1 = phi(_t1994,_t199D)
          goto JOIN1986
        ASSIGN1998:  preds = [COND199F]
          real _t1997#2 = TensorIndex<tensor[3],[2]>(pos1978);
          bool _t199B#1 = EQ<real>(_t1997,_t1997);
          bool _t199D#1 = BNot(_t199B);
          goto JOIN1993
        ASSIGN1912:  preds = [COND1913]
          bool _t1911#1 = false;
          goto JOIN185D
        ASSIGN1842:  preds = [COND1858]
          real _t1841#2 = TensorIndex<tensor[3],[1]>(pos17E5);
          bool _t1845#1 = EQ<real>(_t1841,_t1841);
          bool _t1847#1 = BNot(_t1845);
          if _t1847 then goto ASSIGN184C else goto ASSIGN184E
        ASSIGN184C:  preds = [COND1855]
          bool _t184A#1 = true;
          goto JOIN1849
        JOIN1849:  preds = [ASSIGN184C,ASSIGN1854]
          bool _t184B#1 = phi(_t184A,_t1853)
          goto JOIN183C
        ASSIGN184E:  preds = [COND1855]
          real _t184D#2 = TensorIndex<tensor[3],[2]>(pos17E5);
          bool _t1851#1 = EQ<real>(_t184D,_t184D);
          bool _t1853#1 = BNot(_t1851);
          goto JOIN1849
        ASSIGN1918:  preds = [COND1919]
          bool _t1917#1 = false;
          goto JOIN1830
        ASSIGN1826:  preds = [COND1827]
          bool _t1825#1 = false;
          goto JOIN181B
        ASSIGN182C:  preds = [COND182D]
          bool _t182B#1 = false;
          goto JOIN1811
    end update
  end particle
## initial strand creation
  COLLECTION
    ENTRY17AD:  preds = []
      tensor[3][] ipos17A5#1 = globals.ipos15BA;
    FOREACH17A8:  preds = [ASSIGN17A6,NEXT17AC]
      foreach (x17A7 in ipos17A5) on exit goto RETURN17AE
      real _t17A9#1 = 0.1e1;
      new particle(x17A7,_t17A9);
      goto FOREACH17A8
    RETURN17AE:  preds = [FOREACH17A8]
      return
## global update
  ENTRY1D7D:  preds = []
    real rad1D36#1 = globals.rad15B4;
    real eps1D35#1 = globals.eps15B5;
    particle[] P1D39#5 = Strands<particle,all>;
    (int res1D3A#1) = sum<int>(MAP sum176E (P1D39));
    (int res1D40#1) = max<int>(MAP max1775 (P1D39));
    (int res1D46#1) = sum<int>(MAP sum177C (P1D39));
    (bool res1D4C#2) = all(MAP all1783 (P1D39));
    (real res1D52#1) = max<real>(MAP max178C (P1D39));
    string _t1D57#1 = "One run:";
    string _t1D59#3 = " and ";
    real _t1D5B#2 = λ(T0[],T1[])<(T0) / ( T1)> (res1D52,rad1D36);
    bool _t1D61#2 = LT<real>(_t1D5B,eps1D35);
    string _t1D65#1 = " of ";
    string _t1D67#1 = "\n";
    Print<[string,bool,string,real,string,bool,string,int,string,int,string]>(_t1D57,res1D4C,_t1D59,_t1D5B,_t1D59,_t1D61,_t1D59,res1D46,_t1D65,res1D3A,_t1D67);
    if res1D4C then goto COND1D74 else goto JOIN1D6A
  COND1D74:  preds = [COND1D75]
    if _t1D61 then goto ASSIGN1D71 else goto JOIN1D6F
  ASSIGN1D71:  preds = [COND1D74]
    string _t1D70#1 = "CONVERGED!\n";
    Print<[string]>(_t1D70);
    StabilizeAll;
    goto JOIN1D6F
  JOIN1D6F:  preds = [MASSIGN1D73,COND1D74]
    goto JOIN1D6A
  JOIN1D6A:  preds = [JOIN1D6F,COND1D75]
    int _t1D76#1 = 5000;
    bool _t1D78#1 = GT<int>(res1D40,_t1D76);
    if _t1D78 then goto MASSIGN1D7B else goto JOIN1D7A
  MASSIGN1D7B:  preds = [COND1D7C]
    StabilizeAll;
    goto JOIN1D7A
  JOIN1D7A:  preds = [MASSIGN1D7B,COND1D7C]
    continue
#### end program ####
##### high-ir: after normalization promotion ####
## properties
  GlobalInit StabilizeAll GlobalReduce StrandSets GlobalUpdate NewStrands StrandCommunication StrandsMayDie HasInputs HasGlobals ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
## globals
  input meshData15B1 (meshData) = <no-default>
  input 0space0853_intermedateGlobal15B2 (space) = <no-default>
  input 0data0855_intermedateGlobal15B3 (data) = <no-default>
  input rad15B4 (rad) = <default>
  input eps15B5 (eps) = <default>
  input v015B6 (v0) = <default>
  input fBias15B7 (fBias) = <default>
  input fStren15B8 (fStren) = <default>
  input zfuz15B9 (zfuz) = <default>
  input ipos15BA (ipos) = <no-default>
## functions
  function real max178C (particle P1784#1) {
    ENTRY178B:  preds = []
      tensor[3] _t1785#1 = P1784.step;
      real _t1788#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (_t1785);
      return _t1788
}
  function bool all1783 (particle P177D#1) {
    ENTRY1782:  preds = []
      bool _t177E#1 = P177D.found;
      return _t177E
}
  function int sum177C (particle P1776#1) {
    ENTRY177B:  preds = []
      int _t1777#1 = P1776.testp;
      return _t1777
}
  function int max1775 (particle P176F#1) {
    ENTRY1774:  preds = []
      int _t1770#1 = P176F.steps;
      return _t1770
}
  function int sum176E (particle P1768#1) {
    ENTRY176D:  preds = []
      int _t1769#1 = P1768.test;
      return _t1769
}
  function int[2] nextCell415EE (int faceIdx15CF#2, int cell15D0#1, femData:Mesh mesh15D1#1) {
    ENTRY15ED:  preds = []
      int _t15D2#3 = -1;
      bool _t15D4#1 = EQ<int>(faceIdx15CF,_t15D2);
      if _t15D4 then goto ASSIGN1D83 else goto ASSIGN15DF
    ASSIGN1D83:  preds = [COND15EB]
      int[2] _t15DB#1 = <int[2]>{_t15D2,_t15D2};
      return _t15DB
      goto JOIN15D6
    JOIN15D6:  preds = [*RETURN(_t15DB)15DD,*RETURN(_t15E8)15EA]
      unreachable
    ASSIGN15DF:  preds = [COND15EB]
      int _t15DE#1 = 8;
      int _t15E0#1 = IMul(cell15D0,_t15DE);
      int _t15E2#1 = 2;
      int _t15E4#1 = IMul(faceIdx15CF,_t15E2);
      int _t15E6#1 = IAdd(_t15E0,_t15E4);
      int[2] _t15E8#1 = ExtractFemItemN<[femData:Mesh,int],int[2],CellFaceCell(Mesh),0000,"",[],int>(mesh15D1,_t15E6);
      return _t15E8
      goto JOIN15D6
}
  function tensor[3] fStep16E3 (tensor[3] s15EF#3) {
    ENTRY16E2:  preds = []
      real zfuz15F0#2 = globals.zfuz15B9;
      real x15F2#10 = TensorIndex<tensor[3],[0]>(s15EF);
      real y15F4#3 = TensorIndex<tensor[3],[1]>(s15EF);
      real z15F6#1 = TensorIndex<tensor[3],[2]>(s15EF);
      real _t15F8#13 = 0.2e1;
      real _t15FC#3 = 0.3e1;
      real _t160C#1 = 0.12e2;
      real _t1620#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[])<((T0 * ((T0) - ((T2 * (T3)^2)))^2)) - ((T4 * T3 * (Neg((T3)^3) + (T0 * T3) + T9)))> (_t15F8,_t15F8,_t15FC,x15F2,_t160C,x15F2,x15F2,_t15F8,x15F2,y15F4);
      real _t1630#2 = λ(T0[],T1[],T2[],T3[])<(T0 * (T0) - ((T2 * (T3)^2)))> (_t15F8,_t15F8,_t15FC,x15F2);
      real _t1632#4 = 0.e0;
      tensor[3] _t1634#1 = <tensor[3]>[_t1620,_t1630,_t1632];
      tensor[3] _t164A#1 = <tensor[3]>[_t1630,_t15F8,_t1632];
      real _t1652#1 = λ(T0[],T1[])<(T0 * T1)> (_t15F8,zfuz15F0);
      tensor[3] _t1654#1 = <tensor[3]>[_t1632,_t1632,_t1652];
      tensor[3,3] H1656#1 = <tensor[3,3]>[_t1634,_t164A,_t1654];
      real _t1676#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[])<(T0 * (T0) - ((T2 * (T3)^2)) * (Neg((T3)^3) + (T0 * T3) + T7))> (_t15F8,_t15F8,_t15FC,x15F2,x15F2,_t15F8,x15F2,y15F4);
      real _t1688#1 = λ(T0[],T1[],T2[],T3[],T4[])<(T0 * (Neg((T1)^3) + (T0 * T1) + T4))> (_t15F8,x15F2,_t15F8,x15F2,y15F4);
      real _t168E#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t15F8,zfuz15F0,z15F6);
      tensor[3] g1690#1 = <tensor[3]>[_t1676,_t1688,_t168E];
      (real[3] evals1693#1,tensor[3][3] E1692#1) = Eigen3x3(H1656);
      real _t1698#1 = 0.1e1;
      int _t169A#2 = 0;
      real _t169C#1 = Subscript<real[3]>(evals1693,_t169A);
      tensor[3] _t16A4#2 = Subscript<tensor[3][3]>(E1692,_t169A);
      tensor[3] up16AE#4 = λ(T0[],T1[],T2[3],T3[3],T4[3])<Σ(i1=0..2)<((Neg((T0) / ( T1)) * T2_{i0} * T2_{i1} * T4_{i1}))>(i1=0..2)>_{3} (_t1698,_t169C,_t16A4,_t16A4,g1690);
      real _t16B1#2 = TensorIndex<tensor[3],[0]>(up16AE);
      bool _t16B5#1 = EQ<real>(_t16B1,_t16B1);
      bool _t16B7#1 = BNot(_t16B5);
      if _t16B7 then goto ASSIGN16BC else goto ASSIGN16BF
    ASSIGN16BC:  preds = [COND16D5]
      bool _t16BA#1 = true;
      goto JOIN16B9
    JOIN16B9:  preds = [ASSIGN16BC,JOIN16C6]
      bool _t16BB#1 = phi(_t16BA,_t16C8)
      if _t16BB then goto ASSIGN16D8 else goto JOIN16D6
    ASSIGN16D8:  preds = [COND16E0]
      real _t16D7#3 = +inf;
      tensor[3] _t16DD#1 = <tensor[3]>[_t16D7,_t16D7,_t16D7];
      return _t16DD
      goto JOIN16D6
    JOIN16D6:  preds = [*RETURN(_t16DD)16DF,COND16E0]
      return up16AE
    ASSIGN16BF:  preds = [COND16D5]
      real _t16BE#2 = TensorIndex<tensor[3],[1]>(up16AE);
      bool _t16C2#1 = EQ<real>(_t16BE,_t16BE);
      bool _t16C4#1 = BNot(_t16C2);
      if _t16C4 then goto ASSIGN16C9 else goto ASSIGN16CB
    ASSIGN16C9:  preds = [COND16D2]
      bool _t16C7#1 = true;
      goto JOIN16C6
    JOIN16C6:  preds = [ASSIGN16C9,ASSIGN16D1]
      bool _t16C8#1 = phi(_t16C7,_t16D0)
      goto JOIN16B9
    ASSIGN16CB:  preds = [COND16D2]
      real _t16CA#2 = TensorIndex<tensor[3],[2]>(up16AE);
      bool _t16CE#1 = EQ<real>(_t16CA,_t16CA);
      bool _t16D0#1 = BNot(_t16CE);
      goto JOIN16C6
}
  function tensor[3,3] fPerp1767 (tensor[3] s16E4#2) {
    ENTRY1766:  preds = []
      real zfuz16E5#1 = globals.zfuz15B9;
      real x16E7#5 = TensorIndex<tensor[3],[0]>(s16E4);
      real y16E9#1 = TensorIndex<tensor[3],[1]>(s16E4);
      real _t16ED#7 = 0.2e1;
      real _t16F1#2 = 0.3e1;
      real _t1701#1 = 0.12e2;
      real _t1715#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[])<((T0 * ((T0) - ((T2 * (T3)^2)))^2)) - ((T4 * T3 * (Neg((T3)^3) + (T0 * T3) + T9)))> (_t16ED,_t16ED,_t16F1,x16E7,_t1701,x16E7,x16E7,_t16ED,x16E7,y16E9);
      real _t1725#2 = λ(T0[],T1[],T2[],T3[])<(T0 * (T0) - ((T2 * (T3)^2)))> (_t16ED,_t16ED,_t16F1,x16E7);
      real _t1727#4 = 0.e0;
      tensor[3] _t1729#1 = <tensor[3]>[_t1715,_t1725,_t1727];
      tensor[3] _t173F#1 = <tensor[3]>[_t1725,_t16ED,_t1727];
      real _t1747#1 = λ(T0[],T1[])<(T0 * T1)> (_t16ED,zfuz16E5);
      tensor[3] _t1749#1 = <tensor[3]>[_t1727,_t1727,_t1747];
      tensor[3,3] H174B#1 = <tensor[3,3]>[_t1729,_t173F,_t1749];
      (real[3] evals174E#0,tensor[3][3] _t174D#1) = Eigen3x3(H174B);
      int _t1750#1 = 0;
      tensor[3] E21752#6 = Subscript<tensor[3][3]>(_t174D,_t1750);
      tensor[3,3] m1758#1 = λ(T0[3],T1[3])<(δ_{i0,i1}) - ((T0_{i0} * T0_{i1}))>_{3 3} (E21752,E21752);
      real t175A#2 = λ(T0[3],T1[3],T2[3],T3[3])<Σ(i0=0..2)(i1=0..2)<(((δ_{i0,i1}) - ((T0_{i0} * T0_{i1})) * (δ_{i0,i1}) - ((T0_{i0} * T0_{i1}))))>(i0=0..2)(i1=0..2)> (E21752,E21752,E21752,E21752);
      bool _t175C#1 = EQ<real>(t175A,t175A);
      bool _t175E#1 = BNot(_t175C);
      if _t175E then goto ASSIGN1762 else goto JOIN1760
    ASSIGN1762:  preds = [COND1764]
      tensor[3,3] _t1761#1 = λ()<Z_{i0,i1}>_{3 3} ();
      return _t1761
      goto JOIN1760
    JOIN1760:  preds = [*RETURN(_t1761)1763,COND1764]
      return m1758
}
## input initialization
  ENTRY15CD:  preds = []
    real rad15BB#5 = 0.1e-1;
    globals.rad15B4 = rad15BB;
    globals.eps15B5 = rad15BB;
    real v015C1#1 = 0.625e-1;
    globals.v015B6 = v015C1;
    globals.fBias15B7 = rad15BB;
    globals.fStren15B8 = rad15BB;
    globals.zfuz15B9 = rad15BB;
    return
## global-variable initialization
  ENTRY17A3:  preds = []
    femData:Mesh meshData178D#2 = globals.meshData15B1;
    int _t178F#1 = 0;
    int _t1791#1 = 1;
    int _t1793#1 = ExtractFemItem<int,NumCell(Mesh)>(meshData178D);
    int _t1795#1 = ISub(_t1793,_t1791);
    int[] _t1797#1 = Range(_t178F,_t1795);
    femData:MeshCell[] _t1799#1 = <femData:MeshCell[]>{};
  FOREACH179D:  preds = [ASSIGN179A,NEXT17A2]
    foreach (_t179B in _t1797) on exit goto RETURN17A4
      femData:MeshCell[] _t179C#1 = phi(_t1799,_t17A0)
    femData:MeshCell _t179E#1 = LoadFem<femData:MeshCell>(meshData178D,_t179B);
    femData:MeshCell[] _t17A0#1 = Append<femData:MeshCell>(_t179C,_t179E);
    goto FOREACH179D
  RETURN17A4:  preds = [FOREACH179D]
    return
## strand
  strand particle (tensor[3] pos017AF#2, real hh017B0#1) in 3D
    state:
      output tensor[3] pos;
      output tensor[3] _pos;
      real hh;
      tensor[3] step;
      bool found;
      int nfs;
      int test;
      int testp;
      int steps;
    state init
      ENTRY17D0:  preds = []
        tensor[3] step17C4#1 = λ()<Z_{i0}>_{3} ();
        bool found17C6#1 = false;
        int nfs17C8#3 = 0;
        int test17CA#1 = 1;
        self.pos = pos017AF;
        self._pos = pos017AF;
        self.hh = hh017B0;
        self.step = step17C4;
        self.found = found17C6;
        self.nfs = nfs17C8;
        self.test = test17CA;
        self.testp = nfs17C8;
        self.steps = nfs17C8;
        return
    end state init
    method update
        ENTRY1D2B:  preds = []
          real rad17DF#13 = globals.rad15B4;
          real eps17DE#1 = globals.eps15B5;
          real fBias17DD#3 = globals.fBias15B7;
          real fStren17DC#3 = globals.fStren15B8;
          real zfuz17DB#6 = globals.zfuz15B9;
          tensor[3] pos17E5#21 = self.pos;
          real hh17E7#9 = self.hh;
          bool found17E9#3 = self.found;
          int nfs17EA#3 = self.nfs;
          int testp17EC#2 = self.testp;
          int steps17ED#1 = self.steps;
          int _t17F7#4 = 1;
          int steps17F9#4 = IAdd(steps17ED,_t17F7);
          real _t17FE#19 = 0.e0;
          tensor[3] _t1804#3 = <tensor[3]>[_t17FE,_t17FE,_t17FE];
          tensor[3] mid1806#3 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (pos17E5,_t1804);
          real _t1809#1 = TensorIndex<tensor[3],[0]>(mid1806);
          real _t180B#1 = λ(T0[])<Abs(T0)> (_t1809);
          real _t180D#9 = 0.4e1;
          bool _t180F#1 = LTE<real>(_t180B,_t180D);
          if _t180F then goto ASSIGN1814 else goto ASSIGN182C
        ASSIGN1814:  preds = [COND182D]
          real _t1813#1 = TensorIndex<tensor[3],[1]>(mid1806);
          real _t1815#1 = λ(T0[])<Abs(T0)> (_t1813);
          bool _t1819#1 = LTE<real>(_t1815,_t180D);
          if _t1819 then goto ASSIGN181D else goto ASSIGN1826
        ASSIGN181D:  preds = [COND1827]
          real _t181C#1 = TensorIndex<tensor[3],[2]>(mid1806);
          real _t181E#1 = λ(T0[])<Abs(T0)> (_t181C);
          bool _t1822#1 = LTE<real>(_t181E,_t180D);
          goto JOIN181B
        JOIN181B:  preds = [ASSIGN1DA1,ASSIGN1826]
          bool _t1823#1 = phi(_t1822,_t1825)
          goto JOIN1811
        JOIN1811:  preds = [JOIN181B,ASSIGN182C]
          bool _t1829#1 = phi(_t1823,_t182B)
          if _t1829 then goto ASSIGN1835 else goto ASSIGN1918
        ASSIGN1835:  preds = [COND1919]
          real _t1834#12 = TensorIndex<tensor[3],[0]>(pos17E5);
          bool _t1838#1 = EQ<real>(_t1834,_t1834);
          bool _t183A#1 = BNot(_t1838);
          if _t183A then goto ASSIGN183F else goto ASSIGN1842
        ASSIGN183F:  preds = [COND1858]
          bool _t183D#1 = true;
          goto JOIN183C
        JOIN183C:  preds = [ASSIGN183F,JOIN1849]
          bool _t183E#1 = phi(_t183D,_t184B)
          bool _t185B#1 = BNot(_t183E);
          if _t185B then goto ASSIGN1862 else goto ASSIGN1912
        ASSIGN1862:  preds = [COND1913]
          real y1861#3 = TensorIndex<tensor[3],[1]>(pos17E5);
          real z1863#1 = TensorIndex<tensor[3],[2]>(pos17E5);
          real _t1865#13 = 0.2e1;
          real _t1869#3 = 0.3e1;
          real _t1879#1 = 0.12e2;
          real _t188D#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[])<((T0 * ((T0) - ((T2 * (T3)^2)))^2)) - ((T4 * T3 * (Neg((T3)^3) + (T0 * T3) + T9)))> (_t1865,_t1865,_t1869,_t1834,_t1879,_t1834,_t1834,_t1865,_t1834,y1861);
          real _t189D#2 = λ(T0[],T1[],T2[],T3[])<(T0 * (T0) - ((T2 * (T3)^2)))> (_t1865,_t1865,_t1869,_t1834);
          tensor[3] _t18A1#1 = <tensor[3]>[_t188D,_t189D,_t17FE];
          tensor[3] _t18B7#1 = <tensor[3]>[_t189D,_t1865,_t17FE];
          real _t18BF#1 = λ(T0[],T1[])<(T0 * T1)> (_t1865,zfuz17DB);
          tensor[3] _t18C1#1 = <tensor[3]>[_t17FE,_t17FE,_t18BF];
          tensor[3,3] H18C3#1 = <tensor[3,3]>[_t18A1,_t18B7,_t18C1];
          real _t18E3#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[])<(T0 * (T0) - ((T2 * (T3)^2)) * (Neg((T3)^3) + (T0 * T3) + T7))> (_t1865,_t1865,_t1869,_t1834,_t1834,_t1865,_t1834,y1861);
          real _t18F5#1 = λ(T0[],T1[],T2[],T3[],T4[])<(T0 * (Neg((T1)^3) + (T0 * T1) + T4))> (_t1865,_t1834,_t1865,_t1834,y1861);
          real _t18FB#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1865,zfuz17DB,z1863);
          tensor[3] g18FD#1 = <tensor[3]>[_t18E3,_t18F5,_t18FB];
          (real[3] _t18FF#1,tensor[3][3] evecs1900#0) = Eigen3x3(H18C3);
          int _t1902#1 = 0;
          real _t1904#1 = Subscript<real[3]>(_t18FF,_t1902);
          real _t190A#1 = λ(T0[],T1[],T2[3])<(T0) / ( (T1 + Sqrt(Σ(i0=0..2)<((T2_{i0} * T2_{i0}))>(i0=0..2))))> (_t1904,fBias17DD,g18FD);
          bool _t190E#1 = GTE<real>(_t190A,fStren17DC);
          goto JOIN185D
        JOIN185D:  preds = [ASSIGN1DB3,ASSIGN1912]
          bool _t190F#1 = phi(_t190E,_t1911)
          goto JOIN1830
        JOIN1830:  preds = [JOIN185D,ASSIGN1918]
          bool _t1915#1 = phi(_t190F,_t1917)
          bool _t191C#1 = BNot(_t1915);
          if _t191C then goto DIE191F else goto JOIN191E
        DIE191F:  preds = [COND1920]
          die
          goto JOIN191E
        JOIN191E:  preds = [*DIE191F,COND1920]
          bool _t1921#1 = BNot(found17E9);
          if _t1921 then goto ASSIGN1926 else goto ASSIGN1977
        ASSIGN1926:  preds = [COND1D2A]
          tensor[3] step1924#3 = fStep16E3 (pos17E5);
          tensor[3] pos1927#4 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos17E5,step1924);
          real _t192F#2 = TensorIndex<tensor[3],[0]>(pos1927);
          bool _t1933#1 = EQ<real>(_t192F,_t192F);
          bool _t1935#1 = BNot(_t1933);
          if _t1935 then goto ASSIGN193A else goto ASSIGN193D
        ASSIGN193A:  preds = [COND1953]
          bool _t1938#1 = true;
          goto JOIN1937
        JOIN1937:  preds = [ASSIGN193A,JOIN1944]
          bool _t1939#1 = phi(_t1938,_t1946)
          if _t1939 then goto DIE1957 else goto JOIN1956
        DIE1957:  preds = [COND1958]
          die
          goto JOIN1956
        JOIN1956:  preds = [*DIE1957,COND1958]
          real _t195B#1 = λ(T0[3],T1[])<(Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))) / ( T1)> (step1924,rad17DF);
          bool _t195D#1 = GT<real>(_t195B,eps17DE);
          if _t195D then goto ASSIGN1E05 else goto ASSIGN196E
        ASSIGN1E05:  preds = [COND1972]
          int nfs1962#2 = IAdd(nfs17EA,_t17F7);
          int _t1965#1 = 10;
          bool _t1967#1 = GT<int>(nfs1962,_t1965);
          if _t1967 then goto DIE196A else goto JOIN1969
        DIE196A:  preds = [COND196B]
          die
          goto JOIN1969
        JOIN1969:  preds = [*DIE196A,COND196B]
          goto JOIN195F
        JOIN195F:  preds = [JOIN1969,ASSIGN196E]
          int testp1970#1 = phi(testp17EC,_t17F7)
          int nfs1963#1 = phi(nfs1962,nfs17EA)
          bool found196D#1 = phi(found17E9,found196C)
          goto JOIN1923
        JOIN1923:  preds = [JOIN195F,JOIN1BFA]
          int testp1975#1 = phi(testp1970,testp17EC)
          int nfs1974#1 = phi(nfs1963,nfs17EA)
          bool found1973#1 = phi(found196D,found17E9)
          tensor[3] step1925#1 = phi(step1924,up1B78)
          real hh1B57#1 = phi(hh17E7,hh1BC6)
          tensor[3] pos1928#2 = phi(pos1927,pos1BB0)
          self.pos = pos1928;
          self._pos = pos1928;
          self.hh = hh1B57;
          self.step = step1925;
          self.found = found1973;
          self.nfs = nfs1974;
          self.testp = testp1975;
          self.steps = steps17F9;
          active
        ASSIGN196E:  preds = [COND1972]
          bool found196C#1 = true;
          goto JOIN195F
        ASSIGN193D:  preds = [COND1953]
          real _t193C#2 = TensorIndex<tensor[3],[1]>(pos1927);
          bool _t1940#1 = EQ<real>(_t193C,_t193C);
          bool _t1942#1 = BNot(_t1940);
          if _t1942 then goto ASSIGN1947 else goto ASSIGN1949
        ASSIGN1947:  preds = [COND1950]
          bool _t1945#1 = true;
          goto JOIN1944
        JOIN1944:  preds = [ASSIGN1947,ASSIGN194F]
          bool _t1946#1 = phi(_t1945,_t194E)
          goto JOIN1937
        ASSIGN1949:  preds = [COND1950]
          real _t1948#2 = TensorIndex<tensor[3],[2]>(pos1927);
          bool _t194C#1 = EQ<real>(_t1948,_t1948);
          bool _t194E#1 = BNot(_t194C);
          goto JOIN1944
        ASSIGN1977:  preds = [COND1D2A]
          tensor[3] _t1976#12 = fStep16E3 (pos17E5);
          tensor[3] pos1978#11 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos17E5,_t1976);
          real _t197E#2 = TensorIndex<tensor[3],[0]>(pos1978);
          bool _t1982#1 = EQ<real>(_t197E,_t197E);
          bool _t1984#1 = BNot(_t1982);
          if _t1984 then goto ASSIGN1989 else goto ASSIGN198C
        ASSIGN1989:  preds = [COND19A2]
          bool _t1987#1 = true;
          goto JOIN1986
        JOIN1986:  preds = [ASSIGN1989,JOIN1993]
          bool _t1988#1 = phi(_t1987,_t1995)
          if _t1988 then goto DIE19A6 else goto JOIN19A5
        DIE19A6:  preds = [COND19A7]
          die
          goto JOIN19A5
        JOIN19A5:  preds = [*DIE19A6,COND19A7]
          tensor[3] step19A8#4 = λ()<Z_{i0}>_{3} ();
          int nn19AE#4 = 0;
          particle[] _t19B0#1 = SphereQuery<3,particle>(pos1978,rad17DF);
        FOREACH19B6:  preds = [ASSIGN1DB8,NEXT19FD]
          foreach (P19B2 in _t19B0) on exit goto ASSIGN1DB9
            int nn19B5#3 = phi(nn19AE,nn19FB)
            tensor[3] force19B4#7 = phi(step19A8,force19F7)
            real oldE19B3#2 = phi(_t17FE,oldE19CD)
          tensor[3] _t19B7#4 = P19B2.pos;
          real _t19C1#3 = 0.1e1;
          real oldE19CD#1 = λ(T0[],T1[],T2[3],T3[3],T4[3],T5[])<(T0 + ((T1) - ((Sqrt(Σ(i0=0..2)<(((T2_{i0}) - ((T3_{i0} + T4_{i0})) * (T2_{i0}) - ((T3_{i0} + T4_{i0}))))>(i0=0..2))) / ( T5)))^4)> (oldE19B3,_t19C1,_t19B7,pos17E5,_t1976,rad17DF);
          int _t19D9#1 = -4;
          real _t19DB#1 = IntToReal(_t19D9);
          tensor[3] force19F7#1 = λ(T0[3],T1[],T2[],T3[3],T4[3],T5[3],T6[],T7[],T8[],T9[3],T10[3],T11[3],T12[3],T13[3],T14[3])<(T0_{i0} + ((T1 * ((T2) - ((Sqrt(Σ(i3=0..2)<(((T3_{i3}) - ((T4_{i3} + T5_{i3})) * (T3_{i3}) - ((T4_{i3} + T5_{i3}))))>(i3=0..2))) / ( T6)))^3 * (T2) / ( T6) * (T3_{i0}) - ((T4_{i0} + T5_{i0})))) / ( Sqrt(Σ(i3=0..2)<(((T3_{i3}) - ((T4_{i3} + T5_{i3})) * (T3_{i3}) - ((T4_{i3} + T5_{i3}))))>(i3=0..2))))>_{3} (force19B4,_t19DB,_t19C1,_t19B7,pos17E5,_t1976,rad17DF,_t19C1,rad17DF,_t19B7,pos17E5,_t1976,_t19B7,pos17E5,_t1976);
          int nn19FB#1 = IAdd(nn19B5,_t17F7);
          goto FOREACH19B6
        ASSIGN1DB9:  preds = [FOREACH19B6]
          bool _t1A00#1 = EQ<int>(nn19AE,nn19B5);
          if _t1A00 then goto ASSIGN1A04 else goto JOIN1A02
        ASSIGN1A04:  preds = [COND1B3C]
          real _t1A03#1 = 0.5e0;
          real _t1A05#1 = λ(T0[],T1[])<(T0 * T1)> (_t1A03,rad17DF);
          tensor[3] _t1A0B#2 = <tensor[3]>[_t1A05,_t17FE,_t17FE];
          tensor[3] npos1A0D#6 = λ(T0[3],T1[3],T2[3])<(T0_{i0} + T1_{i0} + T2_{i0})>_{3} (pos17E5,_t1976,_t1A0B);
          tensor[3] mid1A1A#3 = λ(T0[3],T1[3],T2[3],T3[3])<((T0_{i0} + T1_{i0} + T2_{i0})) - (T3_{i0})>_{3} (pos17E5,_t1976,_t1A0B,_t1804);
          real _t1A1D#1 = TensorIndex<tensor[3],[0]>(mid1A1A);
          real _t1A1F#1 = λ(T0[])<Abs(T0)> (_t1A1D);
          bool _t1A23#1 = LTE<real>(_t1A1F,_t180D);
          if _t1A23 then goto ASSIGN1A28 else goto ASSIGN1A40
        ASSIGN1A28:  preds = [COND1A41]
          real _t1A27#1 = TensorIndex<tensor[3],[1]>(mid1A1A);
          real _t1A29#1 = λ(T0[])<Abs(T0)> (_t1A27);
          bool _t1A2D#1 = LTE<real>(_t1A29,_t180D);
          if _t1A2D then goto ASSIGN1A31 else goto ASSIGN1A3A
        ASSIGN1A31:  preds = [COND1A3B]
          real _t1A30#1 = TensorIndex<tensor[3],[2]>(mid1A1A);
          real _t1A32#1 = λ(T0[])<Abs(T0)> (_t1A30);
          bool _t1A36#1 = LTE<real>(_t1A32,_t180D);
          goto JOIN1A2F
        JOIN1A2F:  preds = [ASSIGN1DBE,ASSIGN1A3A]
          bool _t1A37#1 = phi(_t1A36,_t1A39)
          goto JOIN1A25
        JOIN1A25:  preds = [JOIN1A2F,ASSIGN1A40]
          bool _t1A3D#1 = phi(_t1A37,_t1A3F)
          if _t1A3D then goto ASSIGN1A49 else goto ASSIGN1B2C
        ASSIGN1A49:  preds = [COND1B2D]
          real _t1A48#12 = TensorIndex<tensor[3],[0]>(npos1A0D);
          bool _t1A4C#1 = EQ<real>(_t1A48,_t1A48);
          bool _t1A4E#1 = BNot(_t1A4C);
          if _t1A4E then goto ASSIGN1A53 else goto ASSIGN1A56
        ASSIGN1A53:  preds = [COND1A6C]
          bool _t1A51#1 = true;
          goto JOIN1A50
        JOIN1A50:  preds = [ASSIGN1A53,JOIN1A5D]
          bool _t1A52#1 = phi(_t1A51,_t1A5F)
          bool _t1A6F#1 = BNot(_t1A52);
          if _t1A6F then goto ASSIGN1A76 else goto ASSIGN1B26
        ASSIGN1A76:  preds = [COND1B27]
          real y1A75#3 = TensorIndex<tensor[3],[1]>(npos1A0D);
          real z1A77#1 = TensorIndex<tensor[3],[2]>(npos1A0D);
          real _t1A79#13 = 0.2e1;
          real _t1A7D#3 = 0.3e1;
          real _t1A8D#1 = 0.12e2;
          real _t1AA1#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[])<((T0 * ((T0) - ((T2 * (T3)^2)))^2)) - ((T4 * T3 * (Neg((T3)^3) + (T0 * T3) + T9)))> (_t1A79,_t1A79,_t1A7D,_t1A48,_t1A8D,_t1A48,_t1A48,_t1A79,_t1A48,y1A75);
          real _t1AB1#2 = λ(T0[],T1[],T2[],T3[])<(T0 * (T0) - ((T2 * (T3)^2)))> (_t1A79,_t1A79,_t1A7D,_t1A48);
          tensor[3] _t1AB5#1 = <tensor[3]>[_t1AA1,_t1AB1,_t17FE];
          tensor[3] _t1ACB#1 = <tensor[3]>[_t1AB1,_t1A79,_t17FE];
          real _t1AD3#1 = λ(T0[],T1[])<(T0 * T1)> (_t1A79,zfuz17DB);
          tensor[3] _t1AD5#1 = <tensor[3]>[_t17FE,_t17FE,_t1AD3];
          tensor[3,3] H1AD7#1 = <tensor[3,3]>[_t1AB5,_t1ACB,_t1AD5];
          real _t1AF7#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[])<(T0 * (T0) - ((T2 * (T3)^2)) * (Neg((T3)^3) + (T0 * T3) + T7))> (_t1A79,_t1A79,_t1A7D,_t1A48,_t1A48,_t1A79,_t1A48,y1A75);
          real _t1B09#1 = λ(T0[],T1[],T2[],T3[],T4[])<(T0 * (Neg((T1)^3) + (T0 * T1) + T4))> (_t1A79,_t1A48,_t1A79,_t1A48,y1A75);
          real _t1B0F#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1A79,zfuz17DB,z1A77);
          tensor[3] g1B11#1 = <tensor[3]>[_t1AF7,_t1B09,_t1B0F];
          (real[3] _t1B13#1,tensor[3][3] evecs1B14#0) = Eigen3x3(H1AD7);
          real _t1B18#1 = Subscript<real[3]>(_t1B13,nn19AE);
          real _t1B1E#1 = λ(T0[],T1[],T2[3])<(T0) / ( (T1 + Sqrt(Σ(i0=0..2)<((T2_{i0} * T2_{i0}))>(i0=0..2))))> (_t1B18,fBias17DD,g1B11);
          bool _t1B22#1 = GTE<real>(_t1B1E,fStren17DC);
          goto JOIN1A71
        JOIN1A71:  preds = [ASSIGN1DD1,ASSIGN1B26]
          bool _t1B23#1 = phi(_t1B22,_t1B25)
          goto JOIN1A44
        JOIN1A44:  preds = [JOIN1A71,ASSIGN1B2C]
          bool _t1B29#1 = phi(_t1B23,_t1B2B)
          if _t1B29 then goto NEW1B31 else goto JOIN1B30
        NEW1B31:  preds = [COND1B32]
          new particle(npos1A0D,hh17E7);
          goto JOIN1B30
        JOIN1B30:  preds = [NEW1B31,COND1B32]
          self.pos = pos1978;
          self._pos = pos1978;
          self.step = step19A8;
          self.steps = steps17F9;
          active
          goto JOIN1A02
        JOIN1A02:  preds = [*ACTIVE1B33,COND1B3C]
          tensor[3,3] _t1B3D#6 = fPerp1767 (pos1978);
          tensor[3] es1B41#1 = λ(T0[],T1[3 3],T2[3])<(T0 * Σ(i2=0..2)<((T1_{i0,i2} * T2_{i2}))>(i2=0..2))>_{3} (hh17E7,_t1B3D,force19B4);
          real _t1B43#1 = λ(T0[],T1[3 3],T2[3])<Sqrt((T0 * T0 * Σ(i0=0..2)<((Σ(i2=0..2)<((T1_{i0,i2} * T2_{i2}))>(i2=0..2) * Σ(i2=0..2)<((T1_{i0,i2} * T2_{i2}))>(i2=0..2)))>(i0=0..2)))> (hh17E7,_t1B3D,force19B4);
          bool _t1B45#1 = GT<real>(_t1B43,rad17DF);
          if _t1B45 then goto ASSIGN1E5C else goto JOIN1B47
        ASSIGN1E5C:  preds = [COND1B56]
          real hh1B4C#1 = λ(T0[],T1[],T2[],T3[3 3],T4[3])<(T0 * (T1) / ( Sqrt((T0 * T0 * Σ(i0=0..2)<((Σ(i2=0..2)<((T3_{i0,i2} * T4_{i2}))>(i2=0..2) * Σ(i2=0..2)<((T3_{i0,i2} * T4_{i2}))>(i2=0..2)))>(i0=0..2)))))> (hh17E7,rad17DF,hh17E7,_t1B3D,force19B4);
          tensor[3] es1B53#1 = λ(T0[],T1[],T2[3 3],T3[3],T4[],T5[3 3],T6[3])<(T1 * (T0) / ( Sqrt((T1 * T1 * Σ(i1=0..2)<((Σ(i3=0..2)<((T2_{i1,i3} * T3_{i3}))>(i3=0..2) * Σ(i3=0..2)<((T2_{i1,i3} * T3_{i3}))>(i3=0..2)))>(i1=0..2)))) * Σ(i5=0..2)<((T2_{i0,i5} * T3_{i5}))>(i5=0..2))>_{3} (rad17DF,hh17E7,_t1B3D,force19B4,hh17E7,_t1B3D,force19B4);
          goto JOIN1B47
        JOIN1B47:  preds = [ASSIGN1E5D,COND1B56]
          tensor[3] es1B54#10 = phi(es1B53,es1B41)
          real hh1B4D#2 = phi(hh1B4C,hh17E7)
          tensor[3] samplePos1B58#1 = λ(T0[3],T1[3],T2[3])<(T0_{i0} + T1_{i0} + T2_{i0})>_{3} (pos17E5,_t1976,es1B54);
          tensor[3] fs1B5A#5 = fStep16E3 (samplePos1B58);
          real _t1B60#1 = λ(T0[3],T1[3])<(Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))) / ( Sqrt(Σ(i0=0..2)<((T1_{i0} * T1_{i0}))>(i0=0..2)))> (fs1B5A,es1B54);
          real _t1B62#6 = 0.5e0;
          bool _t1B64#1 = GT<real>(_t1B60,_t1B62);
          if _t1B64 then goto ASSIGN1DD5 else goto JOIN1B66
        ASSIGN1DD5:  preds = [COND1B75]
          real hh1B69#1 = λ(T0[],T1[])<(T0 * T1)> (hh1B4D,_t1B62);
          self.pos = pos1978;
          self._pos = pos1978;
          self.hh = hh1B69;
          self.step = step19A8;
          self.steps = steps17F9;
          active
          goto JOIN1B66
        JOIN1B66:  preds = [*ACTIVE1B6C,COND1B75]
          real hh1B6A#2 = phi(hh1B4D)
          tensor[3] up1B78#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (fs1B5A,es1B54);
          tensor[3] pos1B7A#2 = λ(T0[3],T1[3],T2[3],T3[3])<(T0_{i0} + T1_{i0} + T2_{i0} + T3_{i0})>_{3} (pos17E5,_t1976,fs1B5A,es1B54);
          particle[] _t1B7E#1 = SphereQuery<3,particle>(pos1B7A,rad17DF);
        FOREACH1B84:  preds = [ASSIGN1DD7,NEXT1B9D]
          foreach (P1B82 in _t1B7E) on exit goto ASSIGN1DD8
            real accum1B83#2 = phi(_t17FE,accum1B9B)
          tensor[3] _t1B85#1 = P1B82.pos;
          real _t1B8F#1 = 0.1e1;
          real accum1B9B#1 = λ(T0[],T1[],T2[3],T3[3],T4[3],T5[3],T6[3],T7[])<(T0 + ((T1) - ((Sqrt(Σ(i0=0..2)<((((T2_{i0} + T3_{i0} + T4_{i0} + T5_{i0})) - (T6_{i0}) * ((T2_{i0} + T3_{i0} + T4_{i0} + T5_{i0})) - (T6_{i0})))>(i0=0..2))) / ( T7)))^4)> (accum1B83,_t1B8F,pos17E5,_t1976,fs1B5A,es1B54,_t1B85,rad17DF);
          goto FOREACH1B84
        ASSIGN1DD8:  preds = [FOREACH1B84]
          real _t1BA0#1 = λ(T0[],T1[])<(T0) - (T1)> (accum1B83,oldE19B3);
          real _t1BAA#1 = λ(T0[],T1[3],T2[3],T3[3],T4[3],T5[3],T6[3],T7[3 3],T8[3])<(T0 * Σ(i0=0..2)<((((T1_{i0} + T2_{i0} + T3_{i0} + T4_{i0})) - ((T1_{i0} + T2_{i0})) * Neg(Σ(i2=0..2)<((T7_{i0,i2} * T8_{i2}))>(i2=0..2))))>(i0=0..2))> (_t1B62,pos17E5,_t1976,fs1B5A,es1B54,pos17E5,_t1976,_t1B3D,force19B4);
          bool _t1BAC#1 = GT<real>(_t1BA0,_t1BAA);
          if _t1BAC then goto ASSIGN1DDB else goto JOIN1BAE
        ASSIGN1DDB:  preds = [COND1BC3]
          real hh1BB7#1 = λ(T0[],T1[])<(T0 * T1)> (hh1B6A,_t1B62);
          self.pos = pos1978;
          self._pos = pos1978;
          self.hh = hh1BB7;
          self.step = step19A8;
          self.steps = steps17F9;
          active
          goto JOIN1BAE
        JOIN1BAE:  preds = [*ACTIVE1BBA,COND1BC3]
          real hh1BB8#1 = phi(hh1B6A)
          tensor[3] pos1BB0#6 = phi(pos1B7A)
          real _t1BC4#1 = 0.11e1;
          real hh1BC6#2 = λ(T0[],T1[])<(T0 * T1)> (hh1BB8,_t1BC4);
          real _t1BCC#2 = TensorIndex<tensor[3],[0]>(pos1BB0);
          bool _t1BD0#1 = EQ<real>(_t1BCC,_t1BCC);
          bool _t1BD2#1 = BNot(_t1BD0);
          if _t1BD2 then goto ASSIGN1BD7 else goto ASSIGN1BDA
        ASSIGN1BD7:  preds = [COND1BF0]
          bool _t1BD5#1 = true;
          goto JOIN1BD4
        JOIN1BD4:  preds = [ASSIGN1BD7,JOIN1BE1]
          bool _t1BD6#1 = phi(_t1BD5,_t1BE3)
          if _t1BD6 then goto DIE1BF4 else goto JOIN1BF3
        DIE1BF4:  preds = [COND1BF5]
          die
          goto JOIN1BF3
        JOIN1BF3:  preds = [*DIE1BF4,COND1BF5]
          int _t1BF6#1 = 5;
          bool _t1BF8#1 = LT<int>(nn19B5,_t1BF6);
          if _t1BF8 then goto ASSIGN1E6C else goto JOIN1BFA
        ASSIGN1E6C:  preds = [COND1D29]
          tensor[3] npos1C03#6 = λ(T0[3],T1[],T2[],T3[3],T4[3])<(T0_{i0} + (T1 * T2 * T3_{i0} * (1) / ( Sqrt(Σ(i3=0..2)<((T3_{i3} * T3_{i3}))>(i3=0..2)))))>_{3} (pos1BB0,_t1B62,rad17DF,es1B54,es1B54);
          tensor[3] mid1C10#3 = λ(T0[3],T1[],T2[],T3[3],T4[3],T5[3])<((T0_{i0} + (T1 * T2 * T3_{i0} * (1) / ( Sqrt(Σ(i4=0..2)<((T3_{i4} * T3_{i4}))>(i4=0..2)))))) - (T5_{i0})>_{3} (pos1BB0,_t1B62,rad17DF,es1B54,es1B54,_t1804);
          real _t1C13#1 = TensorIndex<tensor[3],[0]>(mid1C10);
          real _t1C15#1 = λ(T0[])<Abs(T0)> (_t1C13);
          bool _t1C19#1 = LTE<real>(_t1C15,_t180D);
          if _t1C19 then goto ASSIGN1C1E else goto ASSIGN1C36
        ASSIGN1C1E:  preds = [COND1C37]
          real _t1C1D#1 = TensorIndex<tensor[3],[1]>(mid1C10);
          real _t1C1F#1 = λ(T0[])<Abs(T0)> (_t1C1D);
          bool _t1C23#1 = LTE<real>(_t1C1F,_t180D);
          if _t1C23 then goto ASSIGN1C27 else goto ASSIGN1C30
        ASSIGN1C27:  preds = [COND1C31]
          real _t1C26#1 = TensorIndex<tensor[3],[2]>(mid1C10);
          real _t1C28#1 = λ(T0[])<Abs(T0)> (_t1C26);
          bool _t1C2C#1 = LTE<real>(_t1C28,_t180D);
          goto JOIN1C25
        JOIN1C25:  preds = [ASSIGN1DE5,ASSIGN1C30]
          bool _t1C2D#1 = phi(_t1C2C,_t1C2F)
          goto JOIN1C1B
        JOIN1C1B:  preds = [JOIN1C25,ASSIGN1C36]
          bool _t1C33#1 = phi(_t1C2D,_t1C35)
          if _t1C33 then goto ASSIGN1C3F else goto ASSIGN1D22
        ASSIGN1C3F:  preds = [COND1D23]
          real _t1C3E#12 = TensorIndex<tensor[3],[0]>(npos1C03);
          bool _t1C42#1 = EQ<real>(_t1C3E,_t1C3E);
          bool _t1C44#1 = BNot(_t1C42);
          if _t1C44 then goto ASSIGN1C49 else goto ASSIGN1C4C
        ASSIGN1C49:  preds = [COND1C62]
          bool _t1C47#1 = true;
          goto JOIN1C46
        JOIN1C46:  preds = [ASSIGN1C49,JOIN1C53]
          bool _t1C48#1 = phi(_t1C47,_t1C55)
          bool _t1C65#1 = BNot(_t1C48);
          if _t1C65 then goto ASSIGN1C6C else goto ASSIGN1D1C
        ASSIGN1C6C:  preds = [COND1D1D]
          real y1C6B#3 = TensorIndex<tensor[3],[1]>(npos1C03);
          real z1C6D#1 = TensorIndex<tensor[3],[2]>(npos1C03);
          real _t1C6F#13 = 0.2e1;
          real _t1C73#3 = 0.3e1;
          real _t1C83#1 = 0.12e2;
          real _t1C97#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[])<((T0 * ((T0) - ((T2 * (T3)^2)))^2)) - ((T4 * T3 * (Neg((T3)^3) + (T0 * T3) + T9)))> (_t1C6F,_t1C6F,_t1C73,_t1C3E,_t1C83,_t1C3E,_t1C3E,_t1C6F,_t1C3E,y1C6B);
          real _t1CA7#2 = λ(T0[],T1[],T2[],T3[])<(T0 * (T0) - ((T2 * (T3)^2)))> (_t1C6F,_t1C6F,_t1C73,_t1C3E);
          tensor[3] _t1CAB#1 = <tensor[3]>[_t1C97,_t1CA7,_t17FE];
          tensor[3] _t1CC1#1 = <tensor[3]>[_t1CA7,_t1C6F,_t17FE];
          real _t1CC9#1 = λ(T0[],T1[])<(T0 * T1)> (_t1C6F,zfuz17DB);
          tensor[3] _t1CCB#1 = <tensor[3]>[_t17FE,_t17FE,_t1CC9];
          tensor[3,3] H1CCD#1 = <tensor[3,3]>[_t1CAB,_t1CC1,_t1CCB];
          real _t1CED#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[])<(T0 * (T0) - ((T2 * (T3)^2)) * (Neg((T3)^3) + (T0 * T3) + T7))> (_t1C6F,_t1C6F,_t1C73,_t1C3E,_t1C3E,_t1C6F,_t1C3E,y1C6B);
          real _t1CFF#1 = λ(T0[],T1[],T2[],T3[],T4[])<(T0 * (Neg((T1)^3) + (T0 * T1) + T4))> (_t1C6F,_t1C3E,_t1C6F,_t1C3E,y1C6B);
          real _t1D05#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1C6F,zfuz17DB,z1C6D);
          tensor[3] g1D07#1 = <tensor[3]>[_t1CED,_t1CFF,_t1D05];
          (real[3] _t1D09#1,tensor[3][3] evecs1D0A#0) = Eigen3x3(H1CCD);
          real _t1D0E#1 = Subscript<real[3]>(_t1D09,nn19AE);
          real _t1D14#1 = λ(T0[],T1[],T2[3])<(T0) / ( (T1 + Sqrt(Σ(i0=0..2)<((T2_{i0} * T2_{i0}))>(i0=0..2))))> (_t1D0E,fBias17DD,g1D07);
          bool _t1D18#1 = GTE<real>(_t1D14,fStren17DC);
          goto JOIN1C67
        JOIN1C67:  preds = [ASSIGN1DF8,ASSIGN1D1C]
          bool _t1D19#1 = phi(_t1D18,_t1D1B)
          goto JOIN1C3A
        JOIN1C3A:  preds = [JOIN1C67,ASSIGN1D22]
          bool _t1D1F#1 = phi(_t1D19,_t1D21)
          if _t1D1F then goto NEW1D27 else goto JOIN1D26
        NEW1D27:  preds = [COND1D28]
          new particle(npos1C03,hh1BC6);
          goto JOIN1D26
        JOIN1D26:  preds = [NEW1D27,COND1D28]
          goto JOIN1BFA
        JOIN1BFA:  preds = [JOIN1D26,COND1D29]
          goto JOIN1923
        ASSIGN1D1C:  preds = [COND1D1D]
          bool _t1D1B#1 = false;
          goto JOIN1C67
        ASSIGN1C4C:  preds = [COND1C62]
          real _t1C4B#2 = TensorIndex<tensor[3],[1]>(npos1C03);
          bool _t1C4F#1 = EQ<real>(_t1C4B,_t1C4B);
          bool _t1C51#1 = BNot(_t1C4F);
          if _t1C51 then goto ASSIGN1C56 else goto ASSIGN1C58
        ASSIGN1C56:  preds = [COND1C5F]
          bool _t1C54#1 = true;
          goto JOIN1C53
        JOIN1C53:  preds = [ASSIGN1C56,ASSIGN1C5E]
          bool _t1C55#1 = phi(_t1C54,_t1C5D)
          goto JOIN1C46
        ASSIGN1C58:  preds = [COND1C5F]
          real _t1C57#2 = TensorIndex<tensor[3],[2]>(npos1C03);
          bool _t1C5B#1 = EQ<real>(_t1C57,_t1C57);
          bool _t1C5D#1 = BNot(_t1C5B);
          goto JOIN1C53
        ASSIGN1D22:  preds = [COND1D23]
          bool _t1D21#1 = false;
          goto JOIN1C3A
        ASSIGN1C30:  preds = [COND1C31]
          bool _t1C2F#1 = false;
          goto JOIN1C25
        ASSIGN1C36:  preds = [COND1C37]
          bool _t1C35#1 = false;
          goto JOIN1C1B
        ASSIGN1BDA:  preds = [COND1BF0]
          real _t1BD9#2 = TensorIndex<tensor[3],[1]>(pos1BB0);
          bool _t1BDD#1 = EQ<real>(_t1BD9,_t1BD9);
          bool _t1BDF#1 = BNot(_t1BDD);
          if _t1BDF then goto ASSIGN1BE4 else goto ASSIGN1BE6
        ASSIGN1BE4:  preds = [COND1BED]
          bool _t1BE2#1 = true;
          goto JOIN1BE1
        JOIN1BE1:  preds = [ASSIGN1BE4,ASSIGN1BEC]
          bool _t1BE3#1 = phi(_t1BE2,_t1BEB)
          goto JOIN1BD4
        ASSIGN1BE6:  preds = [COND1BED]
          real _t1BE5#2 = TensorIndex<tensor[3],[2]>(pos1BB0);
          bool _t1BE9#1 = EQ<real>(_t1BE5,_t1BE5);
          bool _t1BEB#1 = BNot(_t1BE9);
          goto JOIN1BE1
        ASSIGN1B26:  preds = [COND1B27]
          bool _t1B25#1 = false;
          goto JOIN1A71
        ASSIGN1A56:  preds = [COND1A6C]
          real _t1A55#2 = TensorIndex<tensor[3],[1]>(npos1A0D);
          bool _t1A59#1 = EQ<real>(_t1A55,_t1A55);
          bool _t1A5B#1 = BNot(_t1A59);
          if _t1A5B then goto ASSIGN1A60 else goto ASSIGN1A62
        ASSIGN1A60:  preds = [COND1A69]
          bool _t1A5E#1 = true;
          goto JOIN1A5D
        JOIN1A5D:  preds = [ASSIGN1A60,ASSIGN1A68]
          bool _t1A5F#1 = phi(_t1A5E,_t1A67)
          goto JOIN1A50
        ASSIGN1A62:  preds = [COND1A69]
          real _t1A61#2 = TensorIndex<tensor[3],[2]>(npos1A0D);
          bool _t1A65#1 = EQ<real>(_t1A61,_t1A61);
          bool _t1A67#1 = BNot(_t1A65);
          goto JOIN1A5D
        ASSIGN1B2C:  preds = [COND1B2D]
          bool _t1B2B#1 = false;
          goto JOIN1A44
        ASSIGN1A3A:  preds = [COND1A3B]
          bool _t1A39#1 = false;
          goto JOIN1A2F
        ASSIGN1A40:  preds = [COND1A41]
          bool _t1A3F#1 = false;
          goto JOIN1A25
        ASSIGN198C:  preds = [COND19A2]
          real _t198B#2 = TensorIndex<tensor[3],[1]>(pos1978);
          bool _t198F#1 = EQ<real>(_t198B,_t198B);
          bool _t1991#1 = BNot(_t198F);
          if _t1991 then goto ASSIGN1996 else goto ASSIGN1998
        ASSIGN1996:  preds = [COND199F]
          bool _t1994#1 = true;
          goto JOIN1993
        JOIN1993:  preds = [ASSIGN1996,ASSIGN199E]
          bool _t1995#1 = phi(_t1994,_t199D)
          goto JOIN1986
        ASSIGN1998:  preds = [COND199F]
          real _t1997#2 = TensorIndex<tensor[3],[2]>(pos1978);
          bool _t199B#1 = EQ<real>(_t1997,_t1997);
          bool _t199D#1 = BNot(_t199B);
          goto JOIN1993
        ASSIGN1912:  preds = [COND1913]
          bool _t1911#1 = false;
          goto JOIN185D
        ASSIGN1842:  preds = [COND1858]
          real _t1841#2 = TensorIndex<tensor[3],[1]>(pos17E5);
          bool _t1845#1 = EQ<real>(_t1841,_t1841);
          bool _t1847#1 = BNot(_t1845);
          if _t1847 then goto ASSIGN184C else goto ASSIGN184E
        ASSIGN184C:  preds = [COND1855]
          bool _t184A#1 = true;
          goto JOIN1849
        JOIN1849:  preds = [ASSIGN184C,ASSIGN1854]
          bool _t184B#1 = phi(_t184A,_t1853)
          goto JOIN183C
        ASSIGN184E:  preds = [COND1855]
          real _t184D#2 = TensorIndex<tensor[3],[2]>(pos17E5);
          bool _t1851#1 = EQ<real>(_t184D,_t184D);
          bool _t1853#1 = BNot(_t1851);
          goto JOIN1849
        ASSIGN1918:  preds = [COND1919]
          bool _t1917#1 = false;
          goto JOIN1830
        ASSIGN1826:  preds = [COND1827]
          bool _t1825#1 = false;
          goto JOIN181B
        ASSIGN182C:  preds = [COND182D]
          bool _t182B#1 = false;
          goto JOIN1811
    end update
  end particle
## initial strand creation
  COLLECTION
    ENTRY17AD:  preds = []
      tensor[3][] ipos17A5#1 = globals.ipos15BA;
    FOREACH17A8:  preds = [ASSIGN17A6,NEXT17AC]
      foreach (x17A7 in ipos17A5) on exit goto RETURN17AE
      real _t17A9#1 = 0.1e1;
      new particle(x17A7,_t17A9);
      goto FOREACH17A8
    RETURN17AE:  preds = [FOREACH17A8]
      return
## global update
  ENTRY1D7D:  preds = []
    real rad1D36#1 = globals.rad15B4;
    real eps1D35#1 = globals.eps15B5;
    particle[] P1D39#5 = Strands<particle,all>;
    (int res1D3A#1) = sum<int>(MAP sum176E (P1D39));
    (int res1D40#1) = max<int>(MAP max1775 (P1D39));
    (int res1D46#1) = sum<int>(MAP sum177C (P1D39));
    (bool res1D4C#2) = all(MAP all1783 (P1D39));
    (real res1D52#1) = max<real>(MAP max178C (P1D39));
    string _t1D57#1 = "One run:";
    string _t1D59#3 = " and ";
    real _t1D5B#2 = λ(T0[],T1[])<(T0) / ( T1)> (res1D52,rad1D36);
    bool _t1D61#2 = LT<real>(_t1D5B,eps1D35);
    string _t1D65#1 = " of ";
    string _t1D67#1 = "\n";
    Print<[string,bool,string,real,string,bool,string,int,string,int,string]>(_t1D57,res1D4C,_t1D59,_t1D5B,_t1D59,_t1D61,_t1D59,res1D46,_t1D65,res1D3A,_t1D67);
    if res1D4C then goto COND1D74 else goto JOIN1D6A
  COND1D74:  preds = [COND1D75]
    if _t1D61 then goto ASSIGN1D71 else goto JOIN1D6F
  ASSIGN1D71:  preds = [COND1D74]
    string _t1D70#1 = "CONVERGED!\n";
    Print<[string]>(_t1D70);
    StabilizeAll;
    goto JOIN1D6F
  JOIN1D6F:  preds = [MASSIGN1D73,COND1D74]
    goto JOIN1D6A
  JOIN1D6A:  preds = [JOIN1D6F,COND1D75]
    int _t1D76#1 = 5000;
    bool _t1D78#1 = GT<int>(res1D40,_t1D76);
    if _t1D78 then goto MASSIGN1D7B else goto JOIN1D7A
  MASSIGN1D7B:  preds = [COND1D7C]
    StabilizeAll;
    goto JOIN1D7A
  JOIN1D7A:  preds = [MASSIGN1D7B,COND1D7C]
    continue
#### end program ####
##### mid-ir: after high-to-mid translation ####
## properties
  GlobalInit StabilizeAll GlobalReduce StrandSets GlobalUpdate NewStrands StrandCommunication StrandsMayDie HasInputs HasGlobals ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
## globals
  input meshData1E7D (meshData) = <no-default>
  input 0space0853_intermedateGlobal1E7E (space) = <no-default>
  input 0data0855_intermedateGlobal1E7F (data) = <no-default>
  input rad1E80 (rad) = <default>
  input eps1E81 (eps) = <default>
  input v01E82 (v0) = <default>
  input fBias1E83 (fBias) = <default>
  input fStren1E84 (fStren) = <default>
  input zfuz1E85 (zfuz) = <default>
  input ipos1E86 (ipos) = <no-default>
## functions
  function tensor[3] fStep1F85 (tensor[3] s1F86#3) {
    ENTRY1F87:  preds = []
      real zfuz1F88#2 = globals.zfuz1E85;
      real x1F8A#10 = TensorIndex<tensor[3],[0]>(s1F86);
      real y1F8C#3 = TensorIndex<tensor[3],[1]>(s1F86);
      real z1F8E#1 = TensorIndex<tensor[3],[2]>(s1F86);
      real _t1F90#13 = 0.2e1;
      real _t1F92#3 = 0.3e1;
      real _t1F94#1 = 0.12e2;
      real op1_e3_l_101F97#1 = λ(T0[])<(T0)^2> (x1F8A);
      real op1_e3_l_111F98#1 = λ(T0[],T1[])<(T0 * T1)> (_t1F92,op1_e3_l_101F97);
      real op1_e3_l_121F99#1 = λ(T0[],T1[])<(T0) - (T1)> (_t1F90,op1_e3_l_111F98);
      real op1_e3_l_131F9A#1 = λ(T0[])<(T0)^2> (op1_e3_l_121F99);
      real op1_e3_l_141F9B#1 = λ(T0[])<(T0)^3> (x1F8A);
      real op1_e3_l_151F9C#1 = λ(T0[])<Neg(T0)> (op1_e3_l_141F9B);
      real op1_e3_l_161F9D#1 = λ(T0[],T1[])<(T0 * T1)> (_t1F90,x1F8A);
      real op1_e3_l_171F9E#1 = λ(T0[],T1[],T2[])<(T1 + T2 + T0)> (y1F8C,op1_e3_l_151F9C,op1_e3_l_161F9D);
      real op1_e3_l_181F9F#1 = λ(T0[],T1[])<(T0 * T1)> (_t1F90,op1_e3_l_131F9A);
      real op1_e3_l_191FA0#1 = λ(T0[],T1[],T2[])<(T1 * T0 * T2)> (x1F8A,_t1F94,op1_e3_l_171F9E);
      real _t1F96#1 = λ(T0[],T1[])<(T0) - (T1)> (op1_e3_l_181F9F,op1_e3_l_191FA0);
      real op1_e3_l_41FAD#1 = λ(T0[])<(T0)^2> (x1F8A);
      real op1_e3_l_51FAE#1 = λ(T0[],T1[])<(T0 * T1)> (_t1F92,op1_e3_l_41FAD);
      real op1_e3_l_61FAF#1 = λ(T0[],T1[])<(T0) - (T1)> (_t1F90,op1_e3_l_51FAE);
      real _t1FAC#2 = λ(T0[],T1[])<(T0 * T1)> (_t1F90,op1_e3_l_61FAF);
      real _t1FB4#4 = 0.e0;
      tensor[3] _t1FB6#1 = <tensor[3]>[_t1F96,_t1FAC,_t1FB4];
      tensor[3] _t1FB8#1 = <tensor[3]>[_t1FAC,_t1F90,_t1FB4];
      real _t1FBA#1 = λ(T0[],T1[])<(T0 * T1)> (_t1F90,zfuz1F88);
      tensor[3] _t1FBC#1 = <tensor[3]>[_t1FB4,_t1FB4,_t1FBA];
      tensor[3,3] H1FBE#1 = <tensor[3,3]>[_t1FB6,_t1FB8,_t1FBC];
      real op1_e3_l_81FC1#1 = λ(T0[])<(T0)^2> (x1F8A);
      real op1_e3_l_91FC2#1 = λ(T0[],T1[])<(T0 * T1)> (_t1F92,op1_e3_l_81FC1);
      real op1_e3_l_101FC3#1 = λ(T0[])<(T0)^3> (x1F8A);
      real op1_e3_l_111FC4#1 = λ(T0[])<Neg(T0)> (op1_e3_l_101FC3);
      real op1_e3_l_121FC5#1 = λ(T0[],T1[])<(T0 * T1)> (_t1F90,x1F8A);
      real op1_e3_l_131FC6#1 = λ(T0[],T1[])<(T0) - (T1)> (_t1F90,op1_e3_l_91FC2);
      real op1_e3_l_141FC7#1 = λ(T0[],T1[],T2[])<(T1 + T2 + T0)> (y1F8C,op1_e3_l_111FC4,op1_e3_l_121FC5);
      real _t1FC0#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1F90,op1_e3_l_131FC6,op1_e3_l_141FC7);
      real op1_e3_l_51FD1#1 = λ(T0[])<(T0)^3> (x1F8A);
      real op1_e3_l_61FD2#1 = λ(T0[])<Neg(T0)> (op1_e3_l_51FD1);
      real op1_e3_l_71FD3#1 = λ(T0[],T1[])<(T0 * T1)> (_t1F90,x1F8A);
      real op1_e3_l_81FD4#1 = λ(T0[],T1[],T2[])<(T1 + T2 + T0)> (y1F8C,op1_e3_l_61FD2,op1_e3_l_71FD3);
      real _t1FD0#1 = λ(T0[],T1[])<(T0 * T1)> (_t1F90,op1_e3_l_81FD4);
      real _t1FDA#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1F90,zfuz1F88,z1F8E);
      tensor[3] g1FDC#1 = <tensor[3]>[_t1FC0,_t1FD0,_t1FDA];
      (real[3] evals1FDE#1,tensor[3][3] E1FDF#1) = EigenVecs3x3(H1FBE);
      real _t1FE1#1 = 0.1e1;
      int _t1FE3#2 = 0;
      real _t1FE5#1 = Subscript<real[3]>(evals1FDE,_t1FE3);
      tensor[3] _t1FE7#2 = Subscript<tensor[3][3]>(E1FDF,_t1FE3);
      real op1_e3_l_51FEA#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t1FE1,_t1FE5);
      real op1_e3_l_61FEB#1 = λ(T0[])<Neg(T0)> (op1_e3_l_51FEA);
      real op1_e3_l_71FEC#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (_t1FE7,g1FDC);
      tensor[3] up1FE9#4 = λ(T0[3],T1[],T2[])<(T1 * T0_{i0} * T2)>_{3} (_t1FE7,op1_e3_l_61FEB,op1_e3_l_71FEC);
      real _t1FF1#2 = TensorIndex<tensor[3],[0]>(up1FE9);
      bool _t1FF3#1 = EQ<real>(_t1FF1,_t1FF1);
      bool _t1FF5#1 = BNot(_t1FF3);
      if _t1FF5 then goto ASSIGN1FF9 else goto ASSIGN2006
    ASSIGN1FF9:  preds = [COND1FF7]
      bool _t1FF8#1 = true;
      goto JOIN1FFC
    JOIN1FFC:  preds = [ASSIGN1FF9,JOIN200F]
      bool _t1FFA#1 = phi(_t1FF8,_t1FFB)
      if _t1FFA then goto ASSIGN1FFF else goto JOIN2003
    ASSIGN1FFF:  preds = [COND1FFD]
      real _t1FFE#3 = +inf;
      tensor[3] _t2000#1 = <tensor[3]>[_t1FFE,_t1FFE,_t1FFE];
      return _t2000
      goto JOIN2003
    JOIN2003:  preds = [*RETURN(_t2000)2002,COND1FFD]
      return up1FE9
    ASSIGN2006:  preds = [COND1FF7]
      real _t2005#2 = TensorIndex<tensor[3],[1]>(up1FE9);
      bool _t2007#1 = EQ<real>(_t2005,_t2005);
      bool _t2009#1 = BNot(_t2007);
      if _t2009 then goto ASSIGN200D else goto ASSIGN2011
    ASSIGN200D:  preds = [COND200B]
      bool _t200C#1 = true;
      goto JOIN200F
    JOIN200F:  preds = [ASSIGN200D,ASSIGN2014]
      bool _t1FFB#1 = phi(_t200C,_t200E)
      goto JOIN1FFC
    ASSIGN2011:  preds = [COND200B]
      real _t2010#2 = TensorIndex<tensor[3],[2]>(up1FE9);
      bool _t2012#1 = EQ<real>(_t2010,_t2010);
      bool _t200E#1 = BNot(_t2012);
      goto JOIN200F
}
  function tensor[3,3] fPerp2159 (tensor[3] s215A#2) {
    ENTRY215B:  preds = []
      real zfuz215C#1 = globals.zfuz1E85;
      real x215E#5 = TensorIndex<tensor[3],[0]>(s215A);
      real y2160#1 = TensorIndex<tensor[3],[1]>(s215A);
      real _t2162#7 = 0.2e1;
      real _t2164#2 = 0.3e1;
      real _t2166#1 = 0.12e2;
      real op1_e3_l_102169#1 = λ(T0[])<(T0)^2> (x215E);
      real op1_e3_l_11216A#1 = λ(T0[],T1[])<(T0 * T1)> (_t2164,op1_e3_l_102169);
      real op1_e3_l_12216B#1 = λ(T0[],T1[])<(T0) - (T1)> (_t2162,op1_e3_l_11216A);
      real op1_e3_l_13216C#1 = λ(T0[])<(T0)^2> (op1_e3_l_12216B);
      real op1_e3_l_14216D#1 = λ(T0[])<(T0)^3> (x215E);
      real op1_e3_l_15216E#1 = λ(T0[])<Neg(T0)> (op1_e3_l_14216D);
      real op1_e3_l_16216F#1 = λ(T0[],T1[])<(T0 * T1)> (_t2162,x215E);
      real op1_e3_l_172170#1 = λ(T0[],T1[],T2[])<(T1 + T2 + T0)> (y2160,op1_e3_l_15216E,op1_e3_l_16216F);
      real op1_e3_l_182171#1 = λ(T0[],T1[])<(T0 * T1)> (_t2162,op1_e3_l_13216C);
      real op1_e3_l_192172#1 = λ(T0[],T1[],T2[])<(T1 * T0 * T2)> (x215E,_t2166,op1_e3_l_172170);
      real _t2168#1 = λ(T0[],T1[])<(T0) - (T1)> (op1_e3_l_182171,op1_e3_l_192172);
      real op1_e3_l_4217F#1 = λ(T0[])<(T0)^2> (x215E);
      real op1_e3_l_52180#1 = λ(T0[],T1[])<(T0 * T1)> (_t2164,op1_e3_l_4217F);
      real op1_e3_l_62181#1 = λ(T0[],T1[])<(T0) - (T1)> (_t2162,op1_e3_l_52180);
      real _t217E#2 = λ(T0[],T1[])<(T0 * T1)> (_t2162,op1_e3_l_62181);
      real _t2186#4 = 0.e0;
      tensor[3] _t2188#1 = <tensor[3]>[_t2168,_t217E,_t2186];
      tensor[3] _t218A#1 = <tensor[3]>[_t217E,_t2162,_t2186];
      real _t218C#1 = λ(T0[],T1[])<(T0 * T1)> (_t2162,zfuz215C);
      tensor[3] _t218E#1 = <tensor[3]>[_t2186,_t2186,_t218C];
      tensor[3,3] H2190#1 = <tensor[3,3]>[_t2188,_t218A,_t218E];
      (real[3] evals2192#0,tensor[3][3] _t2193#1) = EigenVecs3x3(H2190);
      int _t2195#1 = 0;
      tensor[3] E22197#2 = Subscript<tensor[3][3]>(_t2193,_t2195);
      tensor[3,3] op1_e3_l_2219A#1 = λ(T0[3])<(T0_{i0} * T0_{i1})>_{3 3} (E22197);
      tensor[3,3] m2199#1 = λ(T0[3 3])<(δ_{i0,i1}) - (T0_{i0,i1})>_{3 3} (op1_e3_l_2219A);
      tensor[3,3] op1_e3_l_4219E#1 = λ(T0[3])<(T0_{i0} * T0_{i1})>_{3 3} (E22197);
      tensor[3,3] op1_e3_l_6219F#2 = λ(T0[3 3])<(δ_{i0,i1}) - (T0_{i0,i1})>_{3 3} (op1_e3_l_4219E);
      real t219D#2 = λ(T0[3 3],T1[3 3])<Σ(i0=0..2)(i1=0..2)<((T0_{i0,i1} * T1_{i0,i1}))>(i0=0..2)(i1=0..2)> (op1_e3_l_6219F,op1_e3_l_6219F);
      bool _t21A3#1 = EQ<real>(t219D,t219D);
      bool _t21A5#1 = BNot(_t21A3);
      if _t21A5 then goto ASSIGN21A9 else goto JOIN21AB
    ASSIGN21A9:  preds = [COND21A7]
      tensor[3,3] _t21A8#1 = λ()<Z_{i0,i1}>_{3 3} ();
      return _t21A8
      goto JOIN21AB
    JOIN21AB:  preds = [*RETURN(_t21A8)21AA,COND21A7]
      return m2199
}
  function int sum235D (particle P235E#1) {
    ENTRY235F:  preds = []
      int _t2360#1 = P235E.test;
      return _t2360
}
  function int max2365 (particle P2366#1) {
    ENTRY2367:  preds = []
      int _t2368#1 = P2366.steps;
      return _t2368
}
  function int sum236D (particle P236E#1) {
    ENTRY236F:  preds = []
      int _t2370#1 = P236E.testp;
      return _t2370
}
  function bool all2375 (particle P2376#1) {
    ENTRY2377:  preds = []
      bool _t2378#1 = P2376.found;
      return _t2378
}
  function real max237D (particle P237E#1) {
    ENTRY237F:  preds = []
      tensor[3] _t2380#1 = P237E.step;
      real op1_e3_l_12383#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (_t2380);
      real _t2382#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_12383);
      return _t2382
}
## input initialization
  ENTRY1E87:  preds = []
    real rad1E88#5 = 0.1e-1;
    globals.rad1E80 = rad1E88;
    globals.eps1E81 = rad1E88;
    real v01E8C#1 = 0.625e-1;
    globals.v01E82 = v01E8C;
    globals.fBias1E83 = rad1E88;
    globals.fStren1E84 = rad1E88;
    globals.zfuz1E85 = rad1E88;
    return
## global-variable initialization
  ENTRY1E93:  preds = []
    femData:Mesh meshData1E94#2 = globals.meshData1E7D;
    int _t1E96#1 = 0;
    int _t1E98#1 = 1;
    int _t1E9A#1 = ExtractFemItem<int,NumCell(Mesh)>(meshData1E94);
    int _t1E9C#1 = ISub(_t1E9A,_t1E98);
    int[] _t1E9E#1 = Range(_t1E96,_t1E9C);
    femData:MeshCell[] _t1EA0#1 = <femData:MeshCell[]>{};
  FOREACH1EA3:  preds = [ASSIGN1EA1,NEXT1EA9]
    foreach (_t1EA2 in _t1E9E) on exit goto RETURN1EAA
      femData:MeshCell[] _t1EA7#1 = phi(_t1EA0,_t1EA6)
    femData:MeshCell _t1EA4#1 = LoadFem<femData:MeshCell>(meshData1E94,_t1EA2);
    femData:MeshCell[] _t1EA6#1 = Append<femData:MeshCell>(_t1EA7,_t1EA4);
    goto FOREACH1EA3
  RETURN1EAA:  preds = [FOREACH1EA3]
    return
## strand
  strand particle (tensor[3] pos01EAB#2, real hh01EAC#1) in 3D
    state:
      output tensor[3] pos;
      output tensor[3] _pos;
      real hh;
      tensor[3] step;
      bool found;
      int nfs;
      int test;
      int testp;
      int steps;
    state init
      ENTRY1EB6:  preds = []
        tensor[3] step1EB7#1 = λ()<Z_{i0}>_{3} ();
        bool found1EB9#1 = false;
        int nfs1EBB#3 = 0;
        int test1EBD#1 = 1;
        self.pos = pos01EAB;
        self._pos = pos01EAB;
        self.hh = hh01EAC;
        self.step = step1EB7;
        self.found = found1EB9;
        self.nfs = nfs1EBB;
        self.test = test1EBD;
        self.testp = nfs1EBB;
        self.steps = nfs1EBB;
        return
    end state init
    method update
        ENTRY1EC9:  preds = []
          real rad1ECA#13 = globals.rad1E80;
          real eps1ECC#1 = globals.eps1E81;
          real fBias1ECE#3 = globals.fBias1E83;
          real fStren1ED0#3 = globals.fStren1E84;
          real zfuz1ED2#6 = globals.zfuz1E85;
          tensor[3] pos1ED4#19 = self.pos;
          real hh1ED6#9 = self.hh;
          bool found1ED8#3 = self.found;
          int nfs1EDA#3 = self.nfs;
          int testp1EDC#2 = self.testp;
          int steps1EDE#1 = self.steps;
          int _t1EE0#4 = 1;
          int steps1EE2#4 = IAdd(steps1EDE,_t1EE0);
          real _t1EE4#19 = 0.e0;
          tensor[3] _t1EE6#3 = <tensor[3]>[_t1EE4,_t1EE4,_t1EE4];
          tensor[3] mid1EE8#3 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (pos1ED4,_t1EE6);
          real _t1EEA#1 = TensorIndex<tensor[3],[0]>(mid1EE8);
          real _t1EEC#1 = λ(T0[])<Abs(T0)> (_t1EEA);
          real _t1EEE#9 = 0.4e1;
          bool _t1EF0#1 = LTE<real>(_t1EEC,_t1EEE);
          if _t1EF0 then goto ASSIGN1EF4 else goto ASSIGN234B
        ASSIGN1EF4:  preds = [COND1EF2]
          real _t1EF3#1 = TensorIndex<tensor[3],[1]>(mid1EE8);
          real _t1EF5#1 = λ(T0[])<Abs(T0)> (_t1EF3);
          bool _t1EF7#1 = LTE<real>(_t1EF5,_t1EEE);
          if _t1EF7 then goto ASSIGN1EFB else goto ASSIGN234A
        ASSIGN1EFB:  preds = [COND1EF9]
          real _t1EFA#1 = TensorIndex<tensor[3],[2]>(mid1EE8);
          real _t1EFC#1 = λ(T0[])<Abs(T0)> (_t1EFA);
          bool _t1EFE#1 = LTE<real>(_t1EFC,_t1EEE);
          goto JOIN1F02
        JOIN1F02:  preds = [ASSIGN1EFF,ASSIGN234A]
          bool _t1F00#1 = phi(_t1EFE,_t1F01)
          goto JOIN1F05
        JOIN1F05:  preds = [JOIN1F02,ASSIGN234B]
          bool _t1F03#1 = phi(_t1F00,_t1F04)
          if _t1F03 then goto ASSIGN1F08 else goto ASSIGN2349
        ASSIGN1F08:  preds = [COND1F06]
          real _t1F07#12 = TensorIndex<tensor[3],[0]>(pos1ED4);
          bool _t1F09#1 = EQ<real>(_t1F07,_t1F07);
          bool _t1F0B#1 = BNot(_t1F09);
          if _t1F0B then goto ASSIGN1F0F else goto ASSIGN233A
        ASSIGN1F0F:  preds = [COND1F0D]
          bool _t1F0E#1 = true;
          goto JOIN1F12
        JOIN1F12:  preds = [ASSIGN1F0F,JOIN2343]
          bool _t1F10#1 = phi(_t1F0E,_t1F11)
          bool _t1F13#1 = BNot(_t1F10);
          if _t1F13 then goto ASSIGN1F17 else goto ASSIGN2338
        ASSIGN1F17:  preds = [COND1F15]
          real y1F16#3 = TensorIndex<tensor[3],[1]>(pos1ED4);
          real z1F18#1 = TensorIndex<tensor[3],[2]>(pos1ED4);
          real _t1F1A#13 = 0.2e1;
          real _t1F1C#3 = 0.3e1;
          real _t1F1E#1 = 0.12e2;
          real op1_e3_l_101F21#1 = λ(T0[])<(T0)^2> (_t1F07);
          real op1_e3_l_111F22#1 = λ(T0[],T1[])<(T0 * T1)> (_t1F1C,op1_e3_l_101F21);
          real op1_e3_l_121F23#1 = λ(T0[],T1[])<(T0) - (T1)> (_t1F1A,op1_e3_l_111F22);
          real op1_e3_l_131F24#1 = λ(T0[])<(T0)^2> (op1_e3_l_121F23);
          real op1_e3_l_141F25#1 = λ(T0[])<(T0)^3> (_t1F07);
          real op1_e3_l_151F26#1 = λ(T0[])<Neg(T0)> (op1_e3_l_141F25);
          real op1_e3_l_161F27#1 = λ(T0[],T1[])<(T0 * T1)> (_t1F1A,_t1F07);
          real op1_e3_l_171F28#1 = λ(T0[],T1[],T2[])<(T1 + T2 + T0)> (y1F16,op1_e3_l_151F26,op1_e3_l_161F27);
          real op1_e3_l_181F29#1 = λ(T0[],T1[])<(T0 * T1)> (_t1F1A,op1_e3_l_131F24);
          real op1_e3_l_191F2A#1 = λ(T0[],T1[],T2[])<(T1 * T0 * T2)> (_t1F07,_t1F1E,op1_e3_l_171F28);
          real _t1F20#1 = λ(T0[],T1[])<(T0) - (T1)> (op1_e3_l_181F29,op1_e3_l_191F2A);
          real op1_e3_l_41F37#1 = λ(T0[])<(T0)^2> (_t1F07);
          real op1_e3_l_51F38#1 = λ(T0[],T1[])<(T0 * T1)> (_t1F1C,op1_e3_l_41F37);
          real op1_e3_l_61F39#1 = λ(T0[],T1[])<(T0) - (T1)> (_t1F1A,op1_e3_l_51F38);
          real _t1F36#2 = λ(T0[],T1[])<(T0 * T1)> (_t1F1A,op1_e3_l_61F39);
          tensor[3] _t1F3E#1 = <tensor[3]>[_t1F20,_t1F36,_t1EE4];
          tensor[3] _t1F40#1 = <tensor[3]>[_t1F36,_t1F1A,_t1EE4];
          real _t1F42#1 = λ(T0[],T1[])<(T0 * T1)> (_t1F1A,zfuz1ED2);
          tensor[3] _t1F44#1 = <tensor[3]>[_t1EE4,_t1EE4,_t1F42];
          tensor[3,3] H1F46#1 = <tensor[3,3]>[_t1F3E,_t1F40,_t1F44];
          real op1_e3_l_81F49#1 = λ(T0[])<(T0)^2> (_t1F07);
          real op1_e3_l_91F4A#1 = λ(T0[],T1[])<(T0 * T1)> (_t1F1C,op1_e3_l_81F49);
          real op1_e3_l_101F4B#1 = λ(T0[])<(T0)^3> (_t1F07);
          real op1_e3_l_111F4C#1 = λ(T0[])<Neg(T0)> (op1_e3_l_101F4B);
          real op1_e3_l_121F4D#1 = λ(T0[],T1[])<(T0 * T1)> (_t1F1A,_t1F07);
          real op1_e3_l_131F4E#1 = λ(T0[],T1[])<(T0) - (T1)> (_t1F1A,op1_e3_l_91F4A);
          real op1_e3_l_141F4F#1 = λ(T0[],T1[],T2[])<(T1 + T2 + T0)> (y1F16,op1_e3_l_111F4C,op1_e3_l_121F4D);
          real _t1F48#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1F1A,op1_e3_l_131F4E,op1_e3_l_141F4F);
          real op1_e3_l_51F59#1 = λ(T0[])<(T0)^3> (_t1F07);
          real op1_e3_l_61F5A#1 = λ(T0[])<Neg(T0)> (op1_e3_l_51F59);
          real op1_e3_l_71F5B#1 = λ(T0[],T1[])<(T0 * T1)> (_t1F1A,_t1F07);
          real op1_e3_l_81F5C#1 = λ(T0[],T1[],T2[])<(T1 + T2 + T0)> (y1F16,op1_e3_l_61F5A,op1_e3_l_71F5B);
          real _t1F58#1 = λ(T0[],T1[])<(T0 * T1)> (_t1F1A,op1_e3_l_81F5C);
          real _t1F62#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1F1A,zfuz1ED2,z1F18);
          tensor[3] g1F64#1 = <tensor[3]>[_t1F48,_t1F58,_t1F62];
          (real[3] _t1F66#1,tensor[3][3] evecs1F67#0) = EigenVecs3x3(H1F46);
          int _t1F69#1 = 0;
          real _t1F6B#1 = Subscript<real[3]>(_t1F66,_t1F69);
          real op1_e3_l_31F6E#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (g1F64);
          real op1_e3_l_41F6F#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_31F6E);
          real op1_e3_l_51F70#1 = λ(T0[],T1[])<(T0 + T1)> (fBias1ECE,op1_e3_l_41F6F);
          real _t1F6D#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t1F6B,op1_e3_l_51F70);
          bool _t1F75#1 = GTE<real>(_t1F6D,fStren1ED0);
          goto JOIN1F79
        JOIN1F79:  preds = [ASSIGN1F76,ASSIGN2338]
          bool _t1F77#1 = phi(_t1F75,_t1F78)
          goto JOIN1F7C
        JOIN1F7C:  preds = [JOIN1F79,ASSIGN2349]
          bool _t1F7A#1 = phi(_t1F77,_t1F7B)
          bool _t1F7D#1 = BNot(_t1F7A);
          if _t1F7D then goto DIE1F80 else goto JOIN1F81
        DIE1F80:  preds = [COND1F7F]
          die
          goto JOIN1F81
        JOIN1F81:  preds = [*DIE1F80,COND1F7F]
          bool _t1F82#1 = BNot(found1ED8);
          if _t1F82 then goto ASSIGN2016 else goto ASSIGN2064
        ASSIGN2016:  preds = [COND1F84]
          tensor[3] step2015#3 = fStep1F85 (pos1ED4);
          tensor[3] pos2017#4 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos1ED4,step2015);
          real _t2019#2 = TensorIndex<tensor[3],[0]>(pos2017);
          bool _t201B#1 = EQ<real>(_t2019,_t2019);
          bool _t201D#1 = BNot(_t201B);
          if _t201D then goto ASSIGN2021 else goto ASSIGN2054
        ASSIGN2021:  preds = [COND201F]
          bool _t2020#1 = true;
          goto JOIN2024
        JOIN2024:  preds = [ASSIGN2021,JOIN205D]
          bool _t2022#1 = phi(_t2020,_t2023)
          if _t2022 then goto DIE2026 else goto JOIN2027
        DIE2026:  preds = [COND2025]
          die
          goto JOIN2027
        JOIN2027:  preds = [*DIE2026,COND2025]
          real op1_e3_l_22029#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (step2015);
          real op1_e3_l_3202A#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_22029);
          real _t2028#1 = λ(T0[],T1[])<(T1) / ( T0)> (rad1ECA,op1_e3_l_3202A);
          bool _t202E#1 = GT<real>(_t2028,eps1ECC);
          if _t202E then goto ASSIGN2032 else goto ASSIGN2052
        ASSIGN2032:  preds = [COND2030]
          int nfs2031#2 = IAdd(nfs1EDA,_t1EE0);
          int _t2033#1 = 10;
          bool _t2035#1 = GT<int>(nfs2031,_t2033);
          if _t2035 then goto DIE2038 else goto JOIN2039
        DIE2038:  preds = [COND2037]
          die
          goto JOIN2039
        JOIN2039:  preds = [*DIE2038,COND2037]
          goto JOIN203E
        JOIN203E:  preds = [JOIN2039,ASSIGN2052]
          int testp203A#1 = phi(testp1EDC,_t1EE0)
          int nfs203B#1 = phi(nfs2031,nfs1EDA)
          bool found203C#1 = phi(found1ED8,found203D)
          goto JOIN2048
        JOIN2048:  preds = [JOIN203E,JOIN22EF]
          int testp203F#1 = phi(testp203A,testp1EDC)
          int nfs2040#1 = phi(nfs203B,nfs1EDA)
          bool found2041#1 = phi(found203C,found1ED8)
          tensor[3] step2042#1 = phi(step2015,up2043)
          real hh2044#1 = phi(hh1ED6,hh2045)
          tensor[3] pos2046#2 = phi(pos2017,pos2047)
          self.pos = pos2046;
          self._pos = pos2046;
          self.hh = hh2044;
          self.step = step2042;
          self.found = found2041;
          self.nfs = nfs2040;
          self.testp = testp203F;
          self.steps = steps1EE2;
          active
        ASSIGN2052:  preds = [COND2030]
          bool found203D#1 = true;
          goto JOIN203E
        ASSIGN2054:  preds = [COND201F]
          real _t2053#2 = TensorIndex<tensor[3],[1]>(pos2017);
          bool _t2055#1 = EQ<real>(_t2053,_t2053);
          bool _t2057#1 = BNot(_t2055);
          if _t2057 then goto ASSIGN205B else goto ASSIGN205F
        ASSIGN205B:  preds = [COND2059]
          bool _t205A#1 = true;
          goto JOIN205D
        JOIN205D:  preds = [ASSIGN205B,ASSIGN2062]
          bool _t2023#1 = phi(_t205A,_t205C)
          goto JOIN2024
        ASSIGN205F:  preds = [COND2059]
          real _t205E#2 = TensorIndex<tensor[3],[2]>(pos2017);
          bool _t2060#1 = EQ<real>(_t205E,_t205E);
          bool _t205C#1 = BNot(_t2060);
          goto JOIN205D
        ASSIGN2064:  preds = [COND1F84]
          tensor[3] _t2063#10 = fStep1F85 (pos1ED4);
          tensor[3] pos2065#11 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos1ED4,_t2063);
          real _t2067#2 = TensorIndex<tensor[3],[0]>(pos2065);
          bool _t2069#1 = EQ<real>(_t2067,_t2067);
          bool _t206B#1 = BNot(_t2069);
          if _t206B then goto ASSIGN206F else goto ASSIGN2329
        ASSIGN206F:  preds = [COND206D]
          bool _t206E#1 = true;
          goto JOIN2072
        JOIN2072:  preds = [ASSIGN206F,JOIN2332]
          bool _t2070#1 = phi(_t206E,_t2071)
          if _t2070 then goto DIE2074 else goto JOIN2075
        DIE2074:  preds = [COND2073]
          die
          goto JOIN2075
        JOIN2075:  preds = [*DIE2074,COND2073]
          tensor[3] step2076#4 = λ()<Z_{i0}>_{3} ();
          int nn2078#4 = 0;
          particle[] _t207A#1 = SphereQuery<3,particle>(pos2065,rad1ECA);
        FOREACH207D:  preds = [ASSIGN207B,NEXT20B1]
          foreach (P207C in _t207A) on exit goto ASSIGN20B3
            int nn20AF#3 = phi(nn2078,nn20AE)
            tensor[3] force2098#6 = phi(step2076,force2097)
            real oldE2083#2 = phi(_t1EE4,oldE2082)
          tensor[3] _t207E#2 = P207C.pos;
          real _t2080#3 = 0.1e1;
          tensor[3] op1_e3_l_62084#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos1ED4,_t2063);
          tensor[3] op1_e3_l_82085#2 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (_t207E,op1_e3_l_62084);
          real op1_e3_l_102086#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_82085,op1_e3_l_82085);
          real op1_e3_l_112087#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_102086);
          real op1_e3_l_122088#1 = λ(T0[],T1[])<(T1) / ( T0)> (rad1ECA,op1_e3_l_112087);
          real op1_e3_l_132089#1 = λ(T0[],T1[])<(T0) - (T1)> (_t2080,op1_e3_l_122088);
          real op1_e3_l_14208A#1 = λ(T0[])<(T0)^4> (op1_e3_l_132089);
          real oldE2082#1 = λ(T0[],T1[])<(T0 + T1)> (oldE2083,op1_e3_l_14208A);
          int _t2093#1 = -4;
          real _t2095#1 = IntToReal(_t2093);
          tensor[3] op1_e3_l_152099#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos1ED4,_t2063);
          tensor[3] op1_e3_l_17209A#3 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (_t207E,op1_e3_l_152099);
          real op1_e3_l_19209B#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_17209A,op1_e3_l_17209A);
          real op1_e3_l_20209C#2 = λ(T0[])<Sqrt(T0)> (op1_e3_l_19209B);
          real op1_e3_l_21209D#1 = λ(T0[],T1[])<(T1) / ( T0)> (rad1ECA,op1_e3_l_20209C);
          real op1_e3_l_22209E#1 = λ(T0[],T1[])<(T0) - (T1)> (_t2080,op1_e3_l_21209D);
          real op1_e3_l_24209F#1 = λ(T0[])<(T0)^3> (op1_e3_l_22209E);
          real op1_e3_l_2520A0#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t2080,rad1ECA);
          tensor[3] op1_e3_l_3220A1#1 = λ(T0[],T1[],T2[],T3[3])<(T0 * T1 * T2 * T3_{i0})>_{3} (_t2095,op1_e3_l_24209F,op1_e3_l_2520A0,op1_e3_l_17209A);
          tensor[3] op1_e3_l_3420A2#1 = λ(T0[3],T1[])<(T0_{i0}) / ( T1)>_{3} (op1_e3_l_3220A1,op1_e3_l_20209C);
          tensor[3] force2097#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (force2098,op1_e3_l_3420A2);
          int nn20AE#1 = IAdd(nn20AF,_t1EE0);
          goto FOREACH207D
        ASSIGN20B3:  preds = [FOREACH207D]
          bool _t20B2#1 = EQ<int>(nn2078,nn20AF);
          if _t20B2 then goto ASSIGN20B6 else goto JOIN2158
        ASSIGN20B6:  preds = [COND20B4]
          real _t20B5#1 = 0.5e0;
          real _t20B7#1 = λ(T0[],T1[])<(T0 * T1)> (_t20B5,rad1ECA);
          tensor[3] _t20B9#2 = <tensor[3]>[_t20B7,_t1EE4,_t1EE4];
          tensor[3] npos20BB#6 = λ(T0[3],T1[3],T2[3])<(T0_{i0} + T1_{i0} + T2_{i0})>_{3} (pos1ED4,_t2063,_t20B9);
          tensor[3] op1_e3_l_420BE#1 = λ(T0[3],T1[3],T2[3])<(T0_{i0} + T1_{i0} + T2_{i0})>_{3} (pos1ED4,_t2063,_t20B9);
          tensor[3] mid20BD#3 = λ(T0[3],T1[3])<(T1_{i0}) - (T0_{i0})>_{3} (_t1EE6,op1_e3_l_420BE);
          real _t20C1#1 = TensorIndex<tensor[3],[0]>(mid20BD);
          real _t20C3#1 = λ(T0[])<Abs(T0)> (_t20C1);
          bool _t20C5#1 = LTE<real>(_t20C3,_t1EEE);
          if _t20C5 then goto ASSIGN20C9 else goto ASSIGN2327
        ASSIGN20C9:  preds = [COND20C7]
          real _t20C8#1 = TensorIndex<tensor[3],[1]>(mid20BD);
          real _t20CA#1 = λ(T0[])<Abs(T0)> (_t20C8);
          bool _t20CC#1 = LTE<real>(_t20CA,_t1EEE);
          if _t20CC then goto ASSIGN20D0 else goto ASSIGN2326
        ASSIGN20D0:  preds = [COND20CE]
          real _t20CF#1 = TensorIndex<tensor[3],[2]>(mid20BD);
          real _t20D1#1 = λ(T0[])<Abs(T0)> (_t20CF);
          bool _t20D3#1 = LTE<real>(_t20D1,_t1EEE);
          goto JOIN20D7
        JOIN20D7:  preds = [ASSIGN20D4,ASSIGN2326]
          bool _t20D5#1 = phi(_t20D3,_t20D6)
          goto JOIN20DA
        JOIN20DA:  preds = [JOIN20D7,ASSIGN2327]
          bool _t20D8#1 = phi(_t20D5,_t20D9)
          if _t20D8 then goto ASSIGN20DD else goto ASSIGN2325
        ASSIGN20DD:  preds = [COND20DB]
          real _t20DC#12 = TensorIndex<tensor[3],[0]>(npos20BB);
          bool _t20DE#1 = EQ<real>(_t20DC,_t20DC);
          bool _t20E0#1 = BNot(_t20DE);
          if _t20E0 then goto ASSIGN20E4 else goto ASSIGN2316
        ASSIGN20E4:  preds = [COND20E2]
          bool _t20E3#1 = true;
          goto JOIN20E7
        JOIN20E7:  preds = [ASSIGN20E4,JOIN231F]
          bool _t20E5#1 = phi(_t20E3,_t20E6)
          bool _t20E8#1 = BNot(_t20E5);
          if _t20E8 then goto ASSIGN20EC else goto ASSIGN2314
        ASSIGN20EC:  preds = [COND20EA]
          real y20EB#3 = TensorIndex<tensor[3],[1]>(npos20BB);
          real z20ED#1 = TensorIndex<tensor[3],[2]>(npos20BB);
          real _t20EF#13 = 0.2e1;
          real _t20F1#3 = 0.3e1;
          real _t20F3#1 = 0.12e2;
          real op1_e3_l_1020F6#1 = λ(T0[])<(T0)^2> (_t20DC);
          real op1_e3_l_1120F7#1 = λ(T0[],T1[])<(T0 * T1)> (_t20F1,op1_e3_l_1020F6);
          real op1_e3_l_1220F8#1 = λ(T0[],T1[])<(T0) - (T1)> (_t20EF,op1_e3_l_1120F7);
          real op1_e3_l_1320F9#1 = λ(T0[])<(T0)^2> (op1_e3_l_1220F8);
          real op1_e3_l_1420FA#1 = λ(T0[])<(T0)^3> (_t20DC);
          real op1_e3_l_1520FB#1 = λ(T0[])<Neg(T0)> (op1_e3_l_1420FA);
          real op1_e3_l_1620FC#1 = λ(T0[],T1[])<(T0 * T1)> (_t20EF,_t20DC);
          real op1_e3_l_1720FD#1 = λ(T0[],T1[],T2[])<(T1 + T2 + T0)> (y20EB,op1_e3_l_1520FB,op1_e3_l_1620FC);
          real op1_e3_l_1820FE#1 = λ(T0[],T1[])<(T0 * T1)> (_t20EF,op1_e3_l_1320F9);
          real op1_e3_l_1920FF#1 = λ(T0[],T1[],T2[])<(T1 * T0 * T2)> (_t20DC,_t20F3,op1_e3_l_1720FD);
          real _t20F5#1 = λ(T0[],T1[])<(T0) - (T1)> (op1_e3_l_1820FE,op1_e3_l_1920FF);
          real op1_e3_l_4210C#1 = λ(T0[])<(T0)^2> (_t20DC);
          real op1_e3_l_5210D#1 = λ(T0[],T1[])<(T0 * T1)> (_t20F1,op1_e3_l_4210C);
          real op1_e3_l_6210E#1 = λ(T0[],T1[])<(T0) - (T1)> (_t20EF,op1_e3_l_5210D);
          real _t210B#2 = λ(T0[],T1[])<(T0 * T1)> (_t20EF,op1_e3_l_6210E);
          tensor[3] _t2113#1 = <tensor[3]>[_t20F5,_t210B,_t1EE4];
          tensor[3] _t2115#1 = <tensor[3]>[_t210B,_t20EF,_t1EE4];
          real _t2117#1 = λ(T0[],T1[])<(T0 * T1)> (_t20EF,zfuz1ED2);
          tensor[3] _t2119#1 = <tensor[3]>[_t1EE4,_t1EE4,_t2117];
          tensor[3,3] H211B#1 = <tensor[3,3]>[_t2113,_t2115,_t2119];
          real op1_e3_l_8211E#1 = λ(T0[])<(T0)^2> (_t20DC);
          real op1_e3_l_9211F#1 = λ(T0[],T1[])<(T0 * T1)> (_t20F1,op1_e3_l_8211E);
          real op1_e3_l_102120#1 = λ(T0[])<(T0)^3> (_t20DC);
          real op1_e3_l_112121#1 = λ(T0[])<Neg(T0)> (op1_e3_l_102120);
          real op1_e3_l_122122#1 = λ(T0[],T1[])<(T0 * T1)> (_t20EF,_t20DC);
          real op1_e3_l_132123#1 = λ(T0[],T1[])<(T0) - (T1)> (_t20EF,op1_e3_l_9211F);
          real op1_e3_l_142124#1 = λ(T0[],T1[],T2[])<(T1 + T2 + T0)> (y20EB,op1_e3_l_112121,op1_e3_l_122122);
          real _t211D#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t20EF,op1_e3_l_132123,op1_e3_l_142124);
          real op1_e3_l_5212E#1 = λ(T0[])<(T0)^3> (_t20DC);
          real op1_e3_l_6212F#1 = λ(T0[])<Neg(T0)> (op1_e3_l_5212E);
          real op1_e3_l_72130#1 = λ(T0[],T1[])<(T0 * T1)> (_t20EF,_t20DC);
          real op1_e3_l_82131#1 = λ(T0[],T1[],T2[])<(T1 + T2 + T0)> (y20EB,op1_e3_l_6212F,op1_e3_l_72130);
          real _t212D#1 = λ(T0[],T1[])<(T0 * T1)> (_t20EF,op1_e3_l_82131);
          real _t2137#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t20EF,zfuz1ED2,z20ED);
          tensor[3] g2139#1 = <tensor[3]>[_t211D,_t212D,_t2137];
          (real[3] _t213B#1,tensor[3][3] evecs213C#0) = EigenVecs3x3(H211B);
          real _t213E#1 = Subscript<real[3]>(_t213B,nn2078);
          real op1_e3_l_32141#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (g2139);
          real op1_e3_l_42142#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_32141);
          real op1_e3_l_52143#1 = λ(T0[],T1[])<(T0 + T1)> (fBias1ECE,op1_e3_l_42142);
          real _t2140#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t213E,op1_e3_l_52143);
          bool _t2148#1 = GTE<real>(_t2140,fStren1ED0);
          goto JOIN214C
        JOIN214C:  preds = [ASSIGN2149,ASSIGN2314]
          bool _t214A#1 = phi(_t2148,_t214B)
          goto JOIN214F
        JOIN214F:  preds = [JOIN214C,ASSIGN2325]
          bool _t214D#1 = phi(_t214A,_t214E)
          if _t214D then goto NEW2151 else goto JOIN2152
        NEW2151:  preds = [COND2150]
          new particle(npos20BB,hh1ED6);
          goto JOIN2152
        JOIN2152:  preds = [NEW2151,COND2150]
          self.pos = pos2065;
          self._pos = pos2065;
          self.step = step2076;
          self.steps = steps1EE2;
          active
          goto JOIN2158
        JOIN2158:  preds = [*ACTIVE2157,COND20B4]
          tensor[3,3] _t21AD#5 = fPerp2159 (pos2065);
          tensor[3] op1_e3_l_321B0#1 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (_t21AD,force2098);
          tensor[3] es21AF#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (hh1ED6,op1_e3_l_321B0);
          tensor[3] op1_e3_l_321B4#2 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (_t21AD,force2098);
          real op1_e3_l_521B5#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_321B4,op1_e3_l_321B4);
          real op1_e3_l_621B6#1 = λ(T0[],T1[])<(T0 * T0 * T1)> (hh1ED6,op1_e3_l_521B5);
          real _t21B3#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_621B6);
          bool _t21BB#1 = GT<real>(_t21B3,rad1ECA);
          if _t21BB then goto ASSIGN21C4 else goto JOIN21D8
        ASSIGN21C4:  preds = [COND21BD]
          tensor[3] op1_e3_l_521BF#2 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (_t21AD,force2098);
          real op1_e3_l_721C0#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_521BF,op1_e3_l_521BF);
          real op1_e3_l_821C1#1 = λ(T0[],T1[])<(T0 * T0 * T1)> (hh1ED6,op1_e3_l_721C0);
          real op1_e3_l_921C2#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_821C1);
          real op1_e3_l_1021C3#1 = λ(T0[],T1[])<(T0) / ( T1)> (rad1ECA,op1_e3_l_921C2);
          real hh21BE#1 = λ(T0[],T1[])<(T0 * T1)> (hh1ED6,op1_e3_l_1021C3);
          tensor[3] op1_e3_l_721CB#3 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (_t21AD,force2098);
          real op1_e3_l_921CC#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_721CB,op1_e3_l_721CB);
          real op1_e3_l_1021CD#1 = λ(T0[],T1[])<(T0 * T0 * T1)> (hh1ED6,op1_e3_l_921CC);
          real op1_e3_l_1121CE#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_1021CD);
          real op1_e3_l_1221CF#1 = λ(T0[],T1[])<(T0) / ( T1)> (rad1ECA,op1_e3_l_1121CE);
          tensor[3] es21CA#1 = λ(T0[],T1[],T2[3])<(T0 * T1 * T2_{i0})>_{3} (hh1ED6,op1_e3_l_1221CF,op1_e3_l_721CB);
          goto JOIN21D8
        JOIN21D8:  preds = [ASSIGN21D5,COND21BD]
          tensor[3] es21D6#10 = phi(es21CA,es21AF)
          real hh21D7#2 = phi(hh21BE,hh1ED6)
          tensor[3] samplePos21D9#1 = λ(T0[3],T1[3],T2[3])<(T0_{i0} + T1_{i0} + T2_{i0})>_{3} (pos1ED4,_t2063,es21D6);
          tensor[3] fs21DB#5 = fStep1F85 (samplePos21D9);
          real op1_e3_l_221DE#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (fs21DB);
          real op1_e3_l_321DF#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (es21D6);
          real op1_e3_l_421E0#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_221DE);
          real op1_e3_l_521E1#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_321DF);
          real _t21DD#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_421E0,op1_e3_l_521E1);
          real _t21E7#6 = 0.5e0;
          bool _t21E9#1 = GT<real>(_t21DD,_t21E7);
          if _t21E9 then goto ASSIGN21ED else goto JOIN21F5
        ASSIGN21ED:  preds = [COND21EB]
          real hh21EC#1 = λ(T0[],T1[])<(T0 * T1)> (hh21D7,_t21E7);
          self.pos = pos2065;
          self._pos = pos2065;
          self.hh = hh21EC;
          self.step = step2076;
          self.steps = steps1EE2;
          active
          goto JOIN21F5
        JOIN21F5:  preds = [*ACTIVE21F3,COND21EB]
          real hh21F4#2 = phi(hh21D7)
          tensor[3] up2043#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (fs21DB,es21D6);
          tensor[3] pos21F7#2 = λ(T0[3],T1[3],T2[3],T3[3])<(T0_{i0} + T1_{i0} + T2_{i0} + T3_{i0})>_{3} (pos1ED4,_t2063,fs21DB,es21D6);
          particle[] _t21F9#1 = SphereQuery<3,particle>(pos21F7,rad1ECA);
        FOREACH21FC:  preds = [ASSIGN21FA,NEXT2212]
          foreach (P21FB in _t21F9) on exit goto ASSIGN2214
            real accum2202#2 = phi(_t1EE4,accum2201)
          tensor[3] _t21FD#1 = P21FB.pos;
          real _t21FF#1 = 0.1e1;
          tensor[3] op1_e3_l_82203#1 = λ(T0[3],T1[3],T2[3],T3[3])<(T0_{i0} + T1_{i0} + T2_{i0} + T3_{i0})>_{3} (pos1ED4,_t2063,fs21DB,es21D6);
          tensor[3] op1_e3_l_102204#2 = λ(T0[3],T1[3])<(T1_{i0}) - (T0_{i0})>_{3} (_t21FD,op1_e3_l_82203);
          real op1_e3_l_122205#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_102204,op1_e3_l_102204);
          real op1_e3_l_132206#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_122205);
          real op1_e3_l_142207#1 = λ(T0[],T1[])<(T1) / ( T0)> (rad1ECA,op1_e3_l_132206);
          real op1_e3_l_152208#1 = λ(T0[],T1[])<(T0) - (T1)> (_t21FF,op1_e3_l_142207);
          real op1_e3_l_162209#1 = λ(T0[])<(T0)^4> (op1_e3_l_152208);
          real accum2201#1 = λ(T0[],T1[])<(T0 + T1)> (accum2202,op1_e3_l_162209);
          goto FOREACH21FC
        ASSIGN2214:  preds = [FOREACH21FC]
          real _t2213#1 = λ(T0[],T1[])<(T0) - (T1)> (accum2202,oldE2083);
          tensor[3] op1_e3_l_92216#1 = λ(T0[3],T1[3],T2[3],T3[3])<(T0_{i0} + T1_{i0} + T2_{i0} + T3_{i0})>_{3} (pos1ED4,_t2063,fs21DB,es21D6);
          tensor[3] op1_e3_l_102217#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos1ED4,_t2063);
          tensor[3] op1_e3_l_112218#1 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (_t21AD,force2098);
          tensor[3] op1_e3_l_122219#1 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (op1_e3_l_92216,op1_e3_l_102217);
          tensor[3] op1_e3_l_13221A#1 = λ(T0[3])<Neg(T0_{i0})>_{3} (op1_e3_l_112218);
          real op1_e3_l_14221B#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_122219,op1_e3_l_13221A);
          real _t2215#1 = λ(T0[],T1[])<(T0 * T1)> (_t21E7,op1_e3_l_14221B);
          bool _t2223#1 = GT<real>(_t2213,_t2215);
          if _t2223 then goto ASSIGN2227 else goto JOIN222F
        ASSIGN2227:  preds = [COND2225]
          real hh2226#1 = λ(T0[],T1[])<(T0 * T1)> (hh21F4,_t21E7);
          self.pos = pos2065;
          self._pos = pos2065;
          self.hh = hh2226;
          self.step = step2076;
          self.steps = steps1EE2;
          active
          goto JOIN222F
        JOIN222F:  preds = [*ACTIVE222D,COND2225]
          real hh222E#1 = phi(hh21F4)
          tensor[3] pos2047#6 = phi(pos21F7)
          real _t2230#1 = 0.11e1;
          real hh2045#2 = λ(T0[],T1[])<(T0 * T1)> (hh222E,_t2230);
          real _t2233#2 = TensorIndex<tensor[3],[0]>(pos2047);
          bool _t2235#1 = EQ<real>(_t2233,_t2233);
          bool _t2237#1 = BNot(_t2235);
          if _t2237 then goto ASSIGN223B else goto ASSIGN2305
        ASSIGN223B:  preds = [COND2239]
          bool _t223A#1 = true;
          goto JOIN223E
        JOIN223E:  preds = [ASSIGN223B,JOIN230E]
          bool _t223C#1 = phi(_t223A,_t223D)
          if _t223C then goto DIE2240 else goto JOIN2241
        DIE2240:  preds = [COND223F]
          die
          goto JOIN2241
        JOIN2241:  preds = [*DIE2240,COND223F]
          int _t2242#1 = 5;
          bool _t2244#1 = LT<int>(nn20AF,_t2242);
          if _t2244 then goto ASSIGN224C else goto JOIN22EF
        ASSIGN224C:  preds = [COND2246]
          real op1_e3_l_52248#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (es21D6);
          real op1_e3_l_62249#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_52248);
          real op1_e3_l_7224A#1 = λ(T0[])<(1) / ( T0)> (op1_e3_l_62249);
          tensor[3] op1_e3_l_8224B#1 = λ(T0[],T1[],T2[3],T3[])<(T0 * T1 * T2_{i0} * T3)>_{3} (_t21E7,rad1ECA,es21D6,op1_e3_l_7224A);
          tensor[3] npos2247#6 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos2047,op1_e3_l_8224B);
          real op1_e3_l_62252#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (es21D6);
          real op1_e3_l_72253#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_62252);
          real op1_e3_l_82254#1 = λ(T0[])<(1) / ( T0)> (op1_e3_l_72253);
          tensor[3] op1_e3_l_92255#1 = λ(T0[],T1[],T2[3],T3[])<(T0 * T1 * T2_{i0} * T3)>_{3} (_t21E7,rad1ECA,es21D6,op1_e3_l_82254);
          tensor[3] op1_e3_l_102256#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos2047,op1_e3_l_92255);
          tensor[3] mid2251#3 = λ(T0[3],T1[3])<(T1_{i0}) - (T0_{i0})>_{3} (_t1EE6,op1_e3_l_102256);
          real _t225D#1 = TensorIndex<tensor[3],[0]>(mid2251);
          real _t225F#1 = λ(T0[])<Abs(T0)> (_t225D);
          bool _t2261#1 = LTE<real>(_t225F,_t1EEE);
          if _t2261 then goto ASSIGN2265 else goto ASSIGN2303
        ASSIGN2265:  preds = [COND2263]
          real _t2264#1 = TensorIndex<tensor[3],[1]>(mid2251);
          real _t2266#1 = λ(T0[])<Abs(T0)> (_t2264);
          bool _t2268#1 = LTE<real>(_t2266,_t1EEE);
          if _t2268 then goto ASSIGN226C else goto ASSIGN2302
        ASSIGN226C:  preds = [COND226A]
          real _t226B#1 = TensorIndex<tensor[3],[2]>(mid2251);
          real _t226D#1 = λ(T0[])<Abs(T0)> (_t226B);
          bool _t226F#1 = LTE<real>(_t226D,_t1EEE);
          goto JOIN2273
        JOIN2273:  preds = [ASSIGN2270,ASSIGN2302]
          bool _t2271#1 = phi(_t226F,_t2272)
          goto JOIN2276
        JOIN2276:  preds = [JOIN2273,ASSIGN2303]
          bool _t2274#1 = phi(_t2271,_t2275)
          if _t2274 then goto ASSIGN2279 else goto ASSIGN2301
        ASSIGN2279:  preds = [COND2277]
          real _t2278#12 = TensorIndex<tensor[3],[0]>(npos2247);
          bool _t227A#1 = EQ<real>(_t2278,_t2278);
          bool _t227C#1 = BNot(_t227A);
          if _t227C then goto ASSIGN2280 else goto ASSIGN22F2
        ASSIGN2280:  preds = [COND227E]
          bool _t227F#1 = true;
          goto JOIN2283
        JOIN2283:  preds = [ASSIGN2280,JOIN22FB]
          bool _t2281#1 = phi(_t227F,_t2282)
          bool _t2284#1 = BNot(_t2281);
          if _t2284 then goto ASSIGN2288 else goto ASSIGN22F0
        ASSIGN2288:  preds = [COND2286]
          real y2287#3 = TensorIndex<tensor[3],[1]>(npos2247);
          real z2289#1 = TensorIndex<tensor[3],[2]>(npos2247);
          real _t228B#13 = 0.2e1;
          real _t228D#3 = 0.3e1;
          real _t228F#1 = 0.12e2;
          real op1_e3_l_102292#1 = λ(T0[])<(T0)^2> (_t2278);
          real op1_e3_l_112293#1 = λ(T0[],T1[])<(T0 * T1)> (_t228D,op1_e3_l_102292);
          real op1_e3_l_122294#1 = λ(T0[],T1[])<(T0) - (T1)> (_t228B,op1_e3_l_112293);
          real op1_e3_l_132295#1 = λ(T0[])<(T0)^2> (op1_e3_l_122294);
          real op1_e3_l_142296#1 = λ(T0[])<(T0)^3> (_t2278);
          real op1_e3_l_152297#1 = λ(T0[])<Neg(T0)> (op1_e3_l_142296);
          real op1_e3_l_162298#1 = λ(T0[],T1[])<(T0 * T1)> (_t228B,_t2278);
          real op1_e3_l_172299#1 = λ(T0[],T1[],T2[])<(T1 + T2 + T0)> (y2287,op1_e3_l_152297,op1_e3_l_162298);
          real op1_e3_l_18229A#1 = λ(T0[],T1[])<(T0 * T1)> (_t228B,op1_e3_l_132295);
          real op1_e3_l_19229B#1 = λ(T0[],T1[],T2[])<(T1 * T0 * T2)> (_t2278,_t228F,op1_e3_l_172299);
          real _t2291#1 = λ(T0[],T1[])<(T0) - (T1)> (op1_e3_l_18229A,op1_e3_l_19229B);
          real op1_e3_l_422A8#1 = λ(T0[])<(T0)^2> (_t2278);
          real op1_e3_l_522A9#1 = λ(T0[],T1[])<(T0 * T1)> (_t228D,op1_e3_l_422A8);
          real op1_e3_l_622AA#1 = λ(T0[],T1[])<(T0) - (T1)> (_t228B,op1_e3_l_522A9);
          real _t22A7#2 = λ(T0[],T1[])<(T0 * T1)> (_t228B,op1_e3_l_622AA);
          tensor[3] _t22AF#1 = <tensor[3]>[_t2291,_t22A7,_t1EE4];
          tensor[3] _t22B1#1 = <tensor[3]>[_t22A7,_t228B,_t1EE4];
          real _t22B3#1 = λ(T0[],T1[])<(T0 * T1)> (_t228B,zfuz1ED2);
          tensor[3] _t22B5#1 = <tensor[3]>[_t1EE4,_t1EE4,_t22B3];
          tensor[3,3] H22B7#1 = <tensor[3,3]>[_t22AF,_t22B1,_t22B5];
          real op1_e3_l_822BA#1 = λ(T0[])<(T0)^2> (_t2278);
          real op1_e3_l_922BB#1 = λ(T0[],T1[])<(T0 * T1)> (_t228D,op1_e3_l_822BA);
          real op1_e3_l_1022BC#1 = λ(T0[])<(T0)^3> (_t2278);
          real op1_e3_l_1122BD#1 = λ(T0[])<Neg(T0)> (op1_e3_l_1022BC);
          real op1_e3_l_1222BE#1 = λ(T0[],T1[])<(T0 * T1)> (_t228B,_t2278);
          real op1_e3_l_1322BF#1 = λ(T0[],T1[])<(T0) - (T1)> (_t228B,op1_e3_l_922BB);
          real op1_e3_l_1422C0#1 = λ(T0[],T1[],T2[])<(T1 + T2 + T0)> (y2287,op1_e3_l_1122BD,op1_e3_l_1222BE);
          real _t22B9#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t228B,op1_e3_l_1322BF,op1_e3_l_1422C0);
          real op1_e3_l_522CA#1 = λ(T0[])<(T0)^3> (_t2278);
          real op1_e3_l_622CB#1 = λ(T0[])<Neg(T0)> (op1_e3_l_522CA);
          real op1_e3_l_722CC#1 = λ(T0[],T1[])<(T0 * T1)> (_t228B,_t2278);
          real op1_e3_l_822CD#1 = λ(T0[],T1[],T2[])<(T1 + T2 + T0)> (y2287,op1_e3_l_622CB,op1_e3_l_722CC);
          real _t22C9#1 = λ(T0[],T1[])<(T0 * T1)> (_t228B,op1_e3_l_822CD);
          real _t22D3#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t228B,zfuz1ED2,z2289);
          tensor[3] g22D5#1 = <tensor[3]>[_t22B9,_t22C9,_t22D3];
          (real[3] _t22D7#1,tensor[3][3] evecs22D8#0) = EigenVecs3x3(H22B7);
          real _t22DA#1 = Subscript<real[3]>(_t22D7,nn2078);
          real op1_e3_l_322DD#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (g22D5);
          real op1_e3_l_422DE#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_322DD);
          real op1_e3_l_522DF#1 = λ(T0[],T1[])<(T0 + T1)> (fBias1ECE,op1_e3_l_422DE);
          real _t22DC#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t22DA,op1_e3_l_522DF);
          bool _t22E4#1 = GTE<real>(_t22DC,fStren1ED0);
          goto JOIN22E8
        JOIN22E8:  preds = [ASSIGN22E5,ASSIGN22F0]
          bool _t22E6#1 = phi(_t22E4,_t22E7)
          goto JOIN22EB
        JOIN22EB:  preds = [JOIN22E8,ASSIGN2301]
          bool _t22E9#1 = phi(_t22E6,_t22EA)
          if _t22E9 then goto NEW22ED else goto JOIN22EE
        NEW22ED:  preds = [COND22EC]
          new particle(npos2247,hh2045);
          goto JOIN22EE
        JOIN22EE:  preds = [NEW22ED,COND22EC]
          goto JOIN22EF
        JOIN22EF:  preds = [JOIN22EE,COND2246]
          goto JOIN2048
        ASSIGN22F0:  preds = [COND2286]
          bool _t22E7#1 = false;
          goto JOIN22E8
        ASSIGN22F2:  preds = [COND227E]
          real _t22F1#2 = TensorIndex<tensor[3],[1]>(npos2247);
          bool _t22F3#1 = EQ<real>(_t22F1,_t22F1);
          bool _t22F5#1 = BNot(_t22F3);
          if _t22F5 then goto ASSIGN22F9 else goto ASSIGN22FD
        ASSIGN22F9:  preds = [COND22F7]
          bool _t22F8#1 = true;
          goto JOIN22FB
        JOIN22FB:  preds = [ASSIGN22F9,ASSIGN2300]
          bool _t2282#1 = phi(_t22F8,_t22FA)
          goto JOIN2283
        ASSIGN22FD:  preds = [COND22F7]
          real _t22FC#2 = TensorIndex<tensor[3],[2]>(npos2247);
          bool _t22FE#1 = EQ<real>(_t22FC,_t22FC);
          bool _t22FA#1 = BNot(_t22FE);
          goto JOIN22FB
        ASSIGN2301:  preds = [COND2277]
          bool _t22EA#1 = false;
          goto JOIN22EB
        ASSIGN2302:  preds = [COND226A]
          bool _t2272#1 = false;
          goto JOIN2273
        ASSIGN2303:  preds = [COND2263]
          bool _t2275#1 = false;
          goto JOIN2276
        ASSIGN2305:  preds = [COND2239]
          real _t2304#2 = TensorIndex<tensor[3],[1]>(pos2047);
          bool _t2306#1 = EQ<real>(_t2304,_t2304);
          bool _t2308#1 = BNot(_t2306);
          if _t2308 then goto ASSIGN230C else goto ASSIGN2310
        ASSIGN230C:  preds = [COND230A]
          bool _t230B#1 = true;
          goto JOIN230E
        JOIN230E:  preds = [ASSIGN230C,ASSIGN2313]
          bool _t223D#1 = phi(_t230B,_t230D)
          goto JOIN223E
        ASSIGN2310:  preds = [COND230A]
          real _t230F#2 = TensorIndex<tensor[3],[2]>(pos2047);
          bool _t2311#1 = EQ<real>(_t230F,_t230F);
          bool _t230D#1 = BNot(_t2311);
          goto JOIN230E
        ASSIGN2314:  preds = [COND20EA]
          bool _t214B#1 = false;
          goto JOIN214C
        ASSIGN2316:  preds = [COND20E2]
          real _t2315#2 = TensorIndex<tensor[3],[1]>(npos20BB);
          bool _t2317#1 = EQ<real>(_t2315,_t2315);
          bool _t2319#1 = BNot(_t2317);
          if _t2319 then goto ASSIGN231D else goto ASSIGN2321
        ASSIGN231D:  preds = [COND231B]
          bool _t231C#1 = true;
          goto JOIN231F
        JOIN231F:  preds = [ASSIGN231D,ASSIGN2324]
          bool _t20E6#1 = phi(_t231C,_t231E)
          goto JOIN20E7
        ASSIGN2321:  preds = [COND231B]
          real _t2320#2 = TensorIndex<tensor[3],[2]>(npos20BB);
          bool _t2322#1 = EQ<real>(_t2320,_t2320);
          bool _t231E#1 = BNot(_t2322);
          goto JOIN231F
        ASSIGN2325:  preds = [COND20DB]
          bool _t214E#1 = false;
          goto JOIN214F
        ASSIGN2326:  preds = [COND20CE]
          bool _t20D6#1 = false;
          goto JOIN20D7
        ASSIGN2327:  preds = [COND20C7]
          bool _t20D9#1 = false;
          goto JOIN20DA
        ASSIGN2329:  preds = [COND206D]
          real _t2328#2 = TensorIndex<tensor[3],[1]>(pos2065);
          bool _t232A#1 = EQ<real>(_t2328,_t2328);
          bool _t232C#1 = BNot(_t232A);
          if _t232C then goto ASSIGN2330 else goto ASSIGN2334
        ASSIGN2330:  preds = [COND232E]
          bool _t232F#1 = true;
          goto JOIN2332
        JOIN2332:  preds = [ASSIGN2330,ASSIGN2337]
          bool _t2071#1 = phi(_t232F,_t2331)
          goto JOIN2072
        ASSIGN2334:  preds = [COND232E]
          real _t2333#2 = TensorIndex<tensor[3],[2]>(pos2065);
          bool _t2335#1 = EQ<real>(_t2333,_t2333);
          bool _t2331#1 = BNot(_t2335);
          goto JOIN2332
        ASSIGN2338:  preds = [COND1F15]
          bool _t1F78#1 = false;
          goto JOIN1F79
        ASSIGN233A:  preds = [COND1F0D]
          real _t2339#2 = TensorIndex<tensor[3],[1]>(pos1ED4);
          bool _t233B#1 = EQ<real>(_t2339,_t2339);
          bool _t233D#1 = BNot(_t233B);
          if _t233D then goto ASSIGN2341 else goto ASSIGN2345
        ASSIGN2341:  preds = [COND233F]
          bool _t2340#1 = true;
          goto JOIN2343
        JOIN2343:  preds = [ASSIGN2341,ASSIGN2348]
          bool _t1F11#1 = phi(_t2340,_t2342)
          goto JOIN1F12
        ASSIGN2345:  preds = [COND233F]
          real _t2344#2 = TensorIndex<tensor[3],[2]>(pos1ED4);
          bool _t2346#1 = EQ<real>(_t2344,_t2344);
          bool _t2342#1 = BNot(_t2346);
          goto JOIN2343
        ASSIGN2349:  preds = [COND1F06]
          bool _t1F7B#1 = false;
          goto JOIN1F7C
        ASSIGN234A:  preds = [COND1EF9]
          bool _t1F01#1 = false;
          goto JOIN1F02
        ASSIGN234B:  preds = [COND1EF2]
          bool _t1F04#1 = false;
          goto JOIN1F05
    end update
  end particle
## initial strand creation
  COLLECTION
    ENTRY234C:  preds = []
      tensor[3][] ipos234D#1 = globals.ipos1E86;
    FOREACH2350:  preds = [ASSIGN234E,NEXT2354]
      foreach (x234F in ipos234D) on exit goto RETURN2355
      real _t2351#1 = 0.1e1;
      new particle(x234F,_t2351);
      goto FOREACH2350
    RETURN2355:  preds = [FOREACH2350]
      return
## global update
  ENTRY2356:  preds = []
    real rad2357#1 = globals.rad1E80;
    real eps2359#1 = globals.eps1E81;
    particle[] P235B#5 = Strands<particle,all>;
    (int res2363#1) = sum<int>(MAP sum235D (P235B));
    (int res236B#1) = max<int>(MAP max2365 (P235B));
    (int res2373#1) = sum<int>(MAP sum236D (P235B));
    (bool res237B#2) = all(MAP all2375 (P235B));
    (real res2387#1) = max<real>(MAP max237D (P235B));
    string _t2389#1 = "One run:";
    string _t238B#3 = " and ";
    real _t238D#2 = λ(T0[],T1[])<(T0) / ( T1)> (res2387,rad2357);
    bool _t238F#2 = LT<real>(_t238D,eps2359);
    string _t2391#1 = " of ";
    string _t2393#1 = "\n";
    Print<[string,bool,string,real,string,bool,string,int,string,int,string]>(_t2389,res237B,_t238B,_t238D,_t238B,_t238F,_t238B,res2373,_t2391,res2363,_t2393);
    if res237B then goto COND2397 else goto JOIN239D
  COND2397:  preds = [COND2396]
    if _t238F then goto ASSIGN2399 else goto JOIN239C
  ASSIGN2399:  preds = [COND2397]
    string _t2398#1 = "CONVERGED!\n";
    Print<[string]>(_t2398);
    StabilizeAll;
    goto JOIN239C
  JOIN239C:  preds = [MASSIGN239B,COND2397]
    goto JOIN239D
  JOIN239D:  preds = [JOIN239C,COND2396]
    int _t239E#1 = 5000;
    bool _t23A0#1 = GT<int>(res236B,_t239E);
    if _t23A0 then goto MASSIGN23A3 else goto JOIN23A4
  MASSIGN23A3:  preds = [COND23A2]
    StabilizeAll;
    goto JOIN23A4
  JOIN23A4:  preds = [MASSIGN23A3,COND23A2]
    continue
#### end program ####
##### mid-ir: after value numbering ####
## properties
  GlobalInit StabilizeAll GlobalReduce StrandSets GlobalUpdate NewStrands StrandCommunication StrandsMayDie HasInputs HasGlobals ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
## globals
  input meshData1E7D (meshData) = <no-default>
  input 0space0853_intermedateGlobal1E7E (space) = <no-default>
  input 0data0855_intermedateGlobal1E7F (data) = <no-default>
  input rad1E80 (rad) = <default>
  input eps1E81 (eps) = <default>
  input v01E82 (v0) = <default>
  input fBias1E83 (fBias) = <default>
  input fStren1E84 (fStren) = <default>
  input zfuz1E85 (zfuz) = <default>
  input ipos1E86 (ipos) = <no-default>
## functions
  function tensor[3] fStep1F85 (tensor[3] s1F86#3) {
    ENTRY1F87:  preds = []
      real zfuz1F88#2 = globals.zfuz1E85;
      real x1F8A#4 = TensorIndex<tensor[3],[0]>(s1F86);
      real y1F8C#1 = TensorIndex<tensor[3],[1]>(s1F86);
      real z1F8E#1 = TensorIndex<tensor[3],[2]>(s1F86);
      real _t1F90#9 = 0.2e1;
      real _t1F92#1 = 0.3e1;
      real _t1F94#1 = 0.12e2;
      real op1_e3_l_101F97#1 = λ(T0[])<(T0)^2> (x1F8A);
      real op1_e3_l_111F98#1 = λ(T0[],T1[])<(T0 * T1)> (_t1F92,op1_e3_l_101F97);
      real op1_e3_l_121F99#3 = λ(T0[],T1[])<(T0) - (T1)> (_t1F90,op1_e3_l_111F98);
      real op1_e3_l_131F9A#1 = λ(T0[])<(T0)^2> (op1_e3_l_121F99);
      real op1_e3_l_141F9B#1 = λ(T0[])<(T0)^3> (x1F8A);
      real op1_e3_l_151F9C#1 = λ(T0[])<Neg(T0)> (op1_e3_l_141F9B);
      real op1_e3_l_161F9D#1 = λ(T0[],T1[])<(T0 * T1)> (_t1F90,x1F8A);
      real op1_e3_l_171F9E#3 = λ(T0[],T1[],T2[])<(T1 + T2 + T0)> (y1F8C,op1_e3_l_151F9C,op1_e3_l_161F9D);
      real op1_e3_l_181F9F#1 = λ(T0[],T1[])<(T0 * T1)> (_t1F90,op1_e3_l_131F9A);
      real op1_e3_l_191FA0#1 = λ(T0[],T1[],T2[])<(T1 * T0 * T2)> (x1F8A,_t1F94,op1_e3_l_171F9E);
      real _t1F96#1 = λ(T0[],T1[])<(T0) - (T1)> (op1_e3_l_181F9F,op1_e3_l_191FA0);
      real _t1FAC#2 = λ(T0[],T1[])<(T0 * T1)> (_t1F90,op1_e3_l_121F99);
      real _t1FB4#4 = 0.e0;
      tensor[3] _t1FB6#1 = <tensor[3]>[_t1F96,_t1FAC,_t1FB4];
      tensor[3] _t1FB8#1 = <tensor[3]>[_t1FAC,_t1F90,_t1FB4];
      real _t1FBA#1 = λ(T0[],T1[])<(T0 * T1)> (_t1F90,zfuz1F88);
      tensor[3] _t1FBC#1 = <tensor[3]>[_t1FB4,_t1FB4,_t1FBA];
      tensor[3,3] H1FBE#1 = <tensor[3,3]>[_t1FB6,_t1FB8,_t1FBC];
      real _t1FC0#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1F90,op1_e3_l_121F99,op1_e3_l_171F9E);
      real _t1FD0#1 = λ(T0[],T1[])<(T0 * T1)> (_t1F90,op1_e3_l_171F9E);
      real _t1FDA#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1F90,zfuz1F88,z1F8E);
      tensor[3] g1FDC#1 = <tensor[3]>[_t1FC0,_t1FD0,_t1FDA];
      (real[3] evals1FDE#1,tensor[3][3] E1FDF#1) = EigenVecs3x3(H1FBE);
      real _t1FE1#1 = 0.1e1;
      int _t1FE3#2 = 0;
      real _t1FE5#1 = Subscript<real[3]>(evals1FDE,_t1FE3);
      tensor[3] _t1FE7#2 = Subscript<tensor[3][3]>(E1FDF,_t1FE3);
      real op1_e3_l_51FEA#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t1FE1,_t1FE5);
      real op1_e3_l_61FEB#1 = λ(T0[])<Neg(T0)> (op1_e3_l_51FEA);
      real op1_e3_l_71FEC#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (_t1FE7,g1FDC);
      tensor[3] up1FE9#4 = λ(T0[3],T1[],T2[])<(T1 * T0_{i0} * T2)>_{3} (_t1FE7,op1_e3_l_61FEB,op1_e3_l_71FEC);
      real _t1FF1#2 = TensorIndex<tensor[3],[0]>(up1FE9);
      bool _t1FF3#1 = EQ<real>(_t1FF1,_t1FF1);
      bool _t1FF5#1 = BNot(_t1FF3);
      if _t1FF5 then goto ASSIGN1FF9 else goto ASSIGN2006
    ASSIGN1FF9:  preds = [COND1FF7]
      bool _t1FF8#1 = true;
      goto JOIN1FFC
    JOIN1FFC:  preds = [ASSIGN1FF9,JOIN200F]
      bool _t1FFA#1 = phi(_t1FF8,_t1FFB)
      if _t1FFA then goto ASSIGN1FFF else goto JOIN2003
    ASSIGN1FFF:  preds = [COND1FFD]
      real _t1FFE#3 = +inf;
      tensor[3] _t2000#1 = <tensor[3]>[_t1FFE,_t1FFE,_t1FFE];
      return _t2000
      goto JOIN2003
    JOIN2003:  preds = [*RETURN(_t2000)2002,COND1FFD]
      return up1FE9
    ASSIGN2006:  preds = [COND1FF7]
      real _t2005#2 = TensorIndex<tensor[3],[1]>(up1FE9);
      bool _t2007#1 = EQ<real>(_t2005,_t2005);
      bool _t2009#1 = BNot(_t2007);
      if _t2009 then goto ASSIGN200D else goto ASSIGN2011
    ASSIGN200D:  preds = [COND200B]
      bool _t200C#1 = true;
      goto JOIN200F
    JOIN200F:  preds = [ASSIGN200D,ASSIGN2014]
      bool _t1FFB#1 = phi(_t200C,_t200E)
      goto JOIN1FFC
    ASSIGN2011:  preds = [COND200B]
      real _t2010#2 = TensorIndex<tensor[3],[2]>(up1FE9);
      bool _t2012#1 = EQ<real>(_t2010,_t2010);
      bool _t200E#1 = BNot(_t2012);
      goto JOIN200F
}
  function tensor[3,3] fPerp2159 (tensor[3] s215A#2) {
    ENTRY215B:  preds = []
      real zfuz215C#1 = globals.zfuz1E85;
      real x215E#4 = TensorIndex<tensor[3],[0]>(s215A);
      real y2160#1 = TensorIndex<tensor[3],[1]>(s215A);
      real _t2162#6 = 0.2e1;
      real _t2164#1 = 0.3e1;
      real _t2166#1 = 0.12e2;
      real op1_e3_l_102169#1 = λ(T0[])<(T0)^2> (x215E);
      real op1_e3_l_11216A#1 = λ(T0[],T1[])<(T0 * T1)> (_t2164,op1_e3_l_102169);
      real op1_e3_l_12216B#2 = λ(T0[],T1[])<(T0) - (T1)> (_t2162,op1_e3_l_11216A);
      real op1_e3_l_13216C#1 = λ(T0[])<(T0)^2> (op1_e3_l_12216B);
      real op1_e3_l_14216D#1 = λ(T0[])<(T0)^3> (x215E);
      real op1_e3_l_15216E#1 = λ(T0[])<Neg(T0)> (op1_e3_l_14216D);
      real op1_e3_l_16216F#1 = λ(T0[],T1[])<(T0 * T1)> (_t2162,x215E);
      real op1_e3_l_172170#1 = λ(T0[],T1[],T2[])<(T1 + T2 + T0)> (y2160,op1_e3_l_15216E,op1_e3_l_16216F);
      real op1_e3_l_182171#1 = λ(T0[],T1[])<(T0 * T1)> (_t2162,op1_e3_l_13216C);
      real op1_e3_l_192172#1 = λ(T0[],T1[],T2[])<(T1 * T0 * T2)> (x215E,_t2166,op1_e3_l_172170);
      real _t2168#1 = λ(T0[],T1[])<(T0) - (T1)> (op1_e3_l_182171,op1_e3_l_192172);
      real _t217E#2 = λ(T0[],T1[])<(T0 * T1)> (_t2162,op1_e3_l_12216B);
      real _t2186#4 = 0.e0;
      tensor[3] _t2188#1 = <tensor[3]>[_t2168,_t217E,_t2186];
      tensor[3] _t218A#1 = <tensor[3]>[_t217E,_t2162,_t2186];
      real _t218C#1 = λ(T0[],T1[])<(T0 * T1)> (_t2162,zfuz215C);
      tensor[3] _t218E#1 = <tensor[3]>[_t2186,_t2186,_t218C];
      tensor[3,3] H2190#1 = <tensor[3,3]>[_t2188,_t218A,_t218E];
      (real[3] evals2192#0,tensor[3][3] _t2193#1) = EigenVecs3x3(H2190);
      int _t2195#1 = 0;
      tensor[3] E22197#1 = Subscript<tensor[3][3]>(_t2193,_t2195);
      tensor[3,3] op1_e3_l_2219A#1 = λ(T0[3])<(T0_{i0} * T0_{i1})>_{3 3} (E22197);
      tensor[3,3] m2199#3 = λ(T0[3 3])<(δ_{i0,i1}) - (T0_{i0,i1})>_{3 3} (op1_e3_l_2219A);
      real t219D#2 = λ(T0[3 3],T1[3 3])<Σ(i0=0..2)(i1=0..2)<((T0_{i0,i1} * T1_{i0,i1}))>(i0=0..2)(i1=0..2)> (m2199,m2199);
      bool _t21A3#1 = EQ<real>(t219D,t219D);
      bool _t21A5#1 = BNot(_t21A3);
      if _t21A5 then goto ASSIGN21A9 else goto JOIN21AB
    ASSIGN21A9:  preds = [COND21A7]
      tensor[3,3] _t21A8#1 = λ()<Z_{i0,i1}>_{3 3} ();
      return _t21A8
      goto JOIN21AB
    JOIN21AB:  preds = [*RETURN(_t21A8)21AA,COND21A7]
      return m2199
}
  function int sum235D (particle P235E#1) {
    ENTRY235F:  preds = []
      int _t2360#1 = P235E.test;
      return _t2360
}
  function int max2365 (particle P2366#1) {
    ENTRY2367:  preds = []
      int _t2368#1 = P2366.steps;
      return _t2368
}
  function int sum236D (particle P236E#1) {
    ENTRY236F:  preds = []
      int _t2370#1 = P236E.testp;
      return _t2370
}
  function bool all2375 (particle P2376#1) {
    ENTRY2377:  preds = []
      bool _t2378#1 = P2376.found;
      return _t2378
}
  function real max237D (particle P237E#1) {
    ENTRY237F:  preds = []
      tensor[3] _t2380#1 = P237E.step;
      real op1_e3_l_12383#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (_t2380);
      real _t2382#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_12383);
      return _t2382
}
## input initialization
  ENTRY1E87:  preds = []
    real rad1E88#5 = 0.1e-1;
    globals.rad1E80 = rad1E88;
    globals.eps1E81 = rad1E88;
    real v01E8C#1 = 0.625e-1;
    globals.v01E82 = v01E8C;
    globals.fBias1E83 = rad1E88;
    globals.fStren1E84 = rad1E88;
    globals.zfuz1E85 = rad1E88;
    return
## global-variable initialization
  ENTRY1E93:  preds = []
    femData:Mesh meshData1E94#2 = globals.meshData1E7D;
    int _t1E96#1 = 0;
    int _t1E98#1 = 1;
    int _t1E9A#1 = ExtractFemItem<int,NumCell(Mesh)>(meshData1E94);
    int _t1E9C#1 = ISub(_t1E9A,_t1E98);
    int[] _t1E9E#1 = Range(_t1E96,_t1E9C);
    femData:MeshCell[] _t1EA0#1 = <femData:MeshCell[]>{};
  FOREACH1EA3:  preds = [ASSIGN1EA1,NEXT1EA9]
    foreach (_t1EA2 in _t1E9E) on exit goto RETURN1EAA
      femData:MeshCell[] _t1EA7#1 = phi(_t1EA0,_t1EA6)
    femData:MeshCell _t1EA4#1 = LoadFem<femData:MeshCell>(meshData1E94,_t1EA2);
    femData:MeshCell[] _t1EA6#1 = Append<femData:MeshCell>(_t1EA7,_t1EA4);
    goto FOREACH1EA3
  RETURN1EAA:  preds = [FOREACH1EA3]
    return
## strand
  strand particle (tensor[3] pos01EAB#2, real hh01EAC#1) in 3D
    state:
      output tensor[3] pos;
      output tensor[3] _pos;
      real hh;
      tensor[3] step;
      bool found;
      int nfs;
      int test;
      int testp;
      int steps;
    state init
      ENTRY1EB6:  preds = []
        tensor[3] step1EB7#1 = λ()<Z_{i0}>_{3} ();
        bool found1EB9#1 = false;
        int nfs1EBB#3 = 0;
        int test1EBD#1 = 1;
        self.pos = pos01EAB;
        self._pos = pos01EAB;
        self.hh = hh01EAC;
        self.step = step1EB7;
        self.found = found1EB9;
        self.nfs = nfs1EBB;
        self.test = test1EBD;
        self.testp = nfs1EBB;
        self.steps = nfs1EBB;
        return
    end state init
    method update
        ENTRY1EC9:  preds = []
          real rad1ECA#10 = globals.rad1E80;
          real eps1ECC#1 = globals.eps1E81;
          real fBias1ECE#3 = globals.fBias1E83;
          real fStren1ED0#3 = globals.fStren1E84;
          real zfuz1ED2#6 = globals.zfuz1E85;
          tensor[3] pos1ED4#13 = self.pos;
          real hh1ED6#7 = self.hh;
          bool found1ED8#3 = self.found;
          int nfs1EDA#3 = self.nfs;
          int testp1EDC#2 = self.testp;
          int steps1EDE#1 = self.steps;
          int _t1EE0#4 = 1;
          int steps1EE2#4 = IAdd(steps1EDE,_t1EE0);
          real _t1EE4#19 = 0.e0;
          tensor[3] _t1EE6#3 = <tensor[3]>[_t1EE4,_t1EE4,_t1EE4];
          tensor[3] mid1EE8#3 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (pos1ED4,_t1EE6);
          real _t1EEA#1 = TensorIndex<tensor[3],[0]>(mid1EE8);
          real _t1EEC#1 = λ(T0[])<Abs(T0)> (_t1EEA);
          real _t1EEE#9 = 0.4e1;
          bool _t1EF0#1 = LTE<real>(_t1EEC,_t1EEE);
          if _t1EF0 then goto ASSIGN1EF4 else goto ASSIGN234B
        ASSIGN1EF4:  preds = [COND1EF2]
          real _t1EF3#1 = TensorIndex<tensor[3],[1]>(mid1EE8);
          real _t1EF5#1 = λ(T0[])<Abs(T0)> (_t1EF3);
          bool _t1EF7#1 = LTE<real>(_t1EF5,_t1EEE);
          if _t1EF7 then goto ASSIGN1EFB else goto ASSIGN234A
        ASSIGN1EFB:  preds = [COND1EF9]
          real _t1EFA#1 = TensorIndex<tensor[3],[2]>(mid1EE8);
          real _t1EFC#1 = λ(T0[])<Abs(T0)> (_t1EFA);
          bool _t1EFE#1 = LTE<real>(_t1EFC,_t1EEE);
          goto JOIN1F02
        JOIN1F02:  preds = [ASSIGN1EFF,ASSIGN234A]
          bool _t1F00#1 = phi(_t1EFE,_t1F01)
          goto JOIN1F05
        JOIN1F05:  preds = [JOIN1F02,ASSIGN234B]
          bool _t1F03#1 = phi(_t1F00,_t1F04)
          if _t1F03 then goto ASSIGN1F08 else goto ASSIGN2349
        ASSIGN1F08:  preds = [COND1F06]
          real _t1F07#6 = TensorIndex<tensor[3],[0]>(pos1ED4);
          bool _t1F09#1 = EQ<real>(_t1F07,_t1F07);
          bool _t1F0B#1 = BNot(_t1F09);
          if _t1F0B then goto ASSIGN1F0F else goto ASSIGN233A
        ASSIGN1F0F:  preds = [COND1F0D]
          bool _t1F0E#1 = true;
          goto JOIN1F12
        JOIN1F12:  preds = [ASSIGN1F0F,JOIN2343]
          bool _t1F10#1 = phi(_t1F0E,_t1F11)
          bool _t1F13#1 = BNot(_t1F10);
          if _t1F13 then goto ASSIGN1F17 else goto ASSIGN2338
        ASSIGN1F17:  preds = [COND1F15]
          real y1F16#1 = TensorIndex<tensor[3],[1]>(pos1ED4);
          real z1F18#1 = TensorIndex<tensor[3],[2]>(pos1ED4);
          real _t1F1A#9 = 0.2e1;
          real _t1F1C#1 = 0.3e1;
          real _t1F1E#1 = 0.12e2;
          real op1_e3_l_101F21#1 = λ(T0[])<(T0)^2> (_t1F07);
          real op1_e3_l_111F22#1 = λ(T0[],T1[])<(T0 * T1)> (_t1F1C,op1_e3_l_101F21);
          real op1_e3_l_121F23#3 = λ(T0[],T1[])<(T0) - (T1)> (_t1F1A,op1_e3_l_111F22);
          real op1_e3_l_131F24#1 = λ(T0[])<(T0)^2> (op1_e3_l_121F23);
          real op1_e3_l_141F25#1 = λ(T0[])<(T0)^3> (_t1F07);
          real op1_e3_l_151F26#1 = λ(T0[])<Neg(T0)> (op1_e3_l_141F25);
          real op1_e3_l_161F27#1 = λ(T0[],T1[])<(T0 * T1)> (_t1F1A,_t1F07);
          real op1_e3_l_171F28#3 = λ(T0[],T1[],T2[])<(T1 + T2 + T0)> (y1F16,op1_e3_l_151F26,op1_e3_l_161F27);
          real op1_e3_l_181F29#1 = λ(T0[],T1[])<(T0 * T1)> (_t1F1A,op1_e3_l_131F24);
          real op1_e3_l_191F2A#1 = λ(T0[],T1[],T2[])<(T1 * T0 * T2)> (_t1F07,_t1F1E,op1_e3_l_171F28);
          real _t1F20#1 = λ(T0[],T1[])<(T0) - (T1)> (op1_e3_l_181F29,op1_e3_l_191F2A);
          real _t1F36#2 = λ(T0[],T1[])<(T0 * T1)> (_t1F1A,op1_e3_l_121F23);
          tensor[3] _t1F3E#1 = <tensor[3]>[_t1F20,_t1F36,_t1EE4];
          tensor[3] _t1F40#1 = <tensor[3]>[_t1F36,_t1F1A,_t1EE4];
          real _t1F42#1 = λ(T0[],T1[])<(T0 * T1)> (_t1F1A,zfuz1ED2);
          tensor[3] _t1F44#1 = <tensor[3]>[_t1EE4,_t1EE4,_t1F42];
          tensor[3,3] H1F46#1 = <tensor[3,3]>[_t1F3E,_t1F40,_t1F44];
          real _t1F48#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1F1A,op1_e3_l_121F23,op1_e3_l_171F28);
          real _t1F58#1 = λ(T0[],T1[])<(T0 * T1)> (_t1F1A,op1_e3_l_171F28);
          real _t1F62#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1F1A,zfuz1ED2,z1F18);
          tensor[3] g1F64#1 = <tensor[3]>[_t1F48,_t1F58,_t1F62];
          (real[3] _t1F66#1,tensor[3][3] evecs1F67#0) = EigenVecs3x3(H1F46);
          int _t1F69#1 = 0;
          real _t1F6B#1 = Subscript<real[3]>(_t1F66,_t1F69);
          real op1_e3_l_31F6E#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (g1F64);
          real op1_e3_l_41F6F#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_31F6E);
          real op1_e3_l_51F70#1 = λ(T0[],T1[])<(T0 + T1)> (fBias1ECE,op1_e3_l_41F6F);
          real _t1F6D#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t1F6B,op1_e3_l_51F70);
          bool _t1F75#1 = GTE<real>(_t1F6D,fStren1ED0);
          goto JOIN1F79
        JOIN1F79:  preds = [ASSIGN1F76,ASSIGN2338]
          bool _t1F77#1 = phi(_t1F75,_t1F78)
          goto JOIN1F7C
        JOIN1F7C:  preds = [JOIN1F79,ASSIGN2349]
          bool _t1F7A#1 = phi(_t1F77,_t1F7B)
          bool _t1F7D#1 = BNot(_t1F7A);
          if _t1F7D then goto DIE1F80 else goto JOIN1F81
        DIE1F80:  preds = [COND1F7F]
          die
          goto JOIN1F81
        JOIN1F81:  preds = [*DIE1F80,COND1F7F]
          bool _t1F82#1 = BNot(found1ED8);
          if _t1F82 then goto ASSIGN2016 else goto ASSIGN2064
        ASSIGN2016:  preds = [COND1F84]
          tensor[3] step2015#3 = fStep1F85 (pos1ED4);
          tensor[3] pos2017#4 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos1ED4,step2015);
          real _t2019#2 = TensorIndex<tensor[3],[0]>(pos2017);
          bool _t201B#1 = EQ<real>(_t2019,_t2019);
          bool _t201D#1 = BNot(_t201B);
          if _t201D then goto ASSIGN2021 else goto ASSIGN2054
        ASSIGN2021:  preds = [COND201F]
          bool _t2020#1 = true;
          goto JOIN2024
        JOIN2024:  preds = [ASSIGN2021,JOIN205D]
          bool _t2022#1 = phi(_t2020,_t2023)
          if _t2022 then goto DIE2026 else goto JOIN2027
        DIE2026:  preds = [COND2025]
          die
          goto JOIN2027
        JOIN2027:  preds = [*DIE2026,COND2025]
          real op1_e3_l_22029#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (step2015);
          real op1_e3_l_3202A#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_22029);
          real _t2028#1 = λ(T0[],T1[])<(T1) / ( T0)> (rad1ECA,op1_e3_l_3202A);
          bool _t202E#1 = GT<real>(_t2028,eps1ECC);
          if _t202E then goto ASSIGN2032 else goto ASSIGN2052
        ASSIGN2032:  preds = [COND2030]
          int nfs2031#2 = IAdd(nfs1EDA,_t1EE0);
          int _t2033#1 = 10;
          bool _t2035#1 = GT<int>(nfs2031,_t2033);
          if _t2035 then goto DIE2038 else goto JOIN2039
        DIE2038:  preds = [COND2037]
          die
          goto JOIN2039
        JOIN2039:  preds = [*DIE2038,COND2037]
          goto JOIN203E
        JOIN203E:  preds = [JOIN2039,ASSIGN2052]
          int testp203A#1 = phi(testp1EDC,_t1EE0)
          int nfs203B#1 = phi(nfs2031,nfs1EDA)
          bool found203C#1 = phi(found1ED8,found203D)
          goto JOIN2048
        JOIN2048:  preds = [JOIN203E,JOIN22EF]
          int testp203F#1 = phi(testp203A,testp1EDC)
          int nfs2040#1 = phi(nfs203B,nfs1EDA)
          bool found2041#1 = phi(found203C,found1ED8)
          tensor[3] step2042#1 = phi(step2015,up2043)
          real hh2044#1 = phi(hh1ED6,hh2045)
          tensor[3] pos2046#2 = phi(pos2017,pos2047)
          self.pos = pos2046;
          self._pos = pos2046;
          self.hh = hh2044;
          self.step = step2042;
          self.found = found2041;
          self.nfs = nfs2040;
          self.testp = testp203F;
          self.steps = steps1EE2;
          active
        ASSIGN2052:  preds = [COND2030]
          bool found203D#1 = true;
          goto JOIN203E
        ASSIGN2054:  preds = [COND201F]
          real _t2053#2 = TensorIndex<tensor[3],[1]>(pos2017);
          bool _t2055#1 = EQ<real>(_t2053,_t2053);
          bool _t2057#1 = BNot(_t2055);
          if _t2057 then goto ASSIGN205B else goto ASSIGN205F
        ASSIGN205B:  preds = [COND2059]
          bool _t205A#1 = true;
          goto JOIN205D
        JOIN205D:  preds = [ASSIGN205B,ASSIGN2062]
          bool _t2023#1 = phi(_t205A,_t205C)
          goto JOIN2024
        ASSIGN205F:  preds = [COND2059]
          real _t205E#2 = TensorIndex<tensor[3],[2]>(pos2017);
          bool _t2060#1 = EQ<real>(_t205E,_t205E);
          bool _t205C#1 = BNot(_t2060);
          goto JOIN205D
        ASSIGN2064:  preds = [COND1F84]
          tensor[3] _t2063#4 = fStep1F85 (pos1ED4);
          tensor[3] pos2065#13 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos1ED4,_t2063);
          real _t2067#2 = TensorIndex<tensor[3],[0]>(pos2065);
          bool _t2069#1 = EQ<real>(_t2067,_t2067);
          bool _t206B#1 = BNot(_t2069);
          if _t206B then goto ASSIGN206F else goto ASSIGN2329
        ASSIGN206F:  preds = [COND206D]
          bool _t206E#1 = true;
          goto JOIN2072
        JOIN2072:  preds = [ASSIGN206F,JOIN2332]
          bool _t2070#1 = phi(_t206E,_t2071)
          if _t2070 then goto DIE2074 else goto JOIN2075
        DIE2074:  preds = [COND2073]
          die
          goto JOIN2075
        JOIN2075:  preds = [*DIE2074,COND2073]
          tensor[3] step2076#4 = λ()<Z_{i0}>_{3} ();
          int nn2078#4 = 0;
          particle[] _t207A#1 = SphereQuery<3,particle>(pos2065,rad1ECA);
        FOREACH207D:  preds = [ASSIGN207B,NEXT20B1]
          foreach (P207C in _t207A) on exit goto ASSIGN20B3
            int nn20AF#3 = phi(nn2078,nn20AE)
            tensor[3] force2098#2 = phi(step2076,force2097)
            real oldE2083#2 = phi(_t1EE4,oldE2082)
          tensor[3] _t207E#1 = P207C.pos;
          real _t2080#2 = 0.1e1;
          tensor[3] op1_e3_l_82085#3 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (_t207E,pos2065);
          real op1_e3_l_102086#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_82085,op1_e3_l_82085);
          real op1_e3_l_112087#2 = λ(T0[])<Sqrt(T0)> (op1_e3_l_102086);
          real op1_e3_l_122088#1 = λ(T0[],T1[])<(T1) / ( T0)> (rad1ECA,op1_e3_l_112087);
          real op1_e3_l_132089#2 = λ(T0[],T1[])<(T0) - (T1)> (_t2080,op1_e3_l_122088);
          real op1_e3_l_14208A#1 = λ(T0[])<(T0)^4> (op1_e3_l_132089);
          real oldE2082#1 = λ(T0[],T1[])<(T0 + T1)> (oldE2083,op1_e3_l_14208A);
          int _t2093#1 = -4;
          real _t2095#1 = IntToReal(_t2093);
          real op1_e3_l_24209F#1 = λ(T0[])<(T0)^3> (op1_e3_l_132089);
          real op1_e3_l_2520A0#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t2080,rad1ECA);
          tensor[3] op1_e3_l_3220A1#1 = λ(T0[],T1[],T2[],T3[3])<(T0 * T1 * T2 * T3_{i0})>_{3} (_t2095,op1_e3_l_24209F,op1_e3_l_2520A0,op1_e3_l_82085);
          tensor[3] op1_e3_l_3420A2#1 = λ(T0[3],T1[])<(T0_{i0}) / ( T1)>_{3} (op1_e3_l_3220A1,op1_e3_l_112087);
          tensor[3] force2097#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (force2098,op1_e3_l_3420A2);
          int nn20AE#1 = IAdd(nn20AF,_t1EE0);
          goto FOREACH207D
        ASSIGN20B3:  preds = [FOREACH207D]
          bool _t20B2#1 = EQ<int>(nn2078,nn20AF);
          if _t20B2 then goto ASSIGN20B6 else goto JOIN2158
        ASSIGN20B6:  preds = [COND20B4]
          real _t20B5#1 = 0.5e0;
          real _t20B7#1 = λ(T0[],T1[])<(T0 * T1)> (_t20B5,rad1ECA);
          tensor[3] _t20B9#1 = <tensor[3]>[_t20B7,_t1EE4,_t1EE4];
          tensor[3] npos20BB#7 = λ(T0[3],T1[3],T2[3])<(T0_{i0} + T1_{i0} + T2_{i0})>_{3} (pos1ED4,_t2063,_t20B9);
          tensor[3] mid20BD#3 = λ(T0[3],T1[3])<(T1_{i0}) - (T0_{i0})>_{3} (_t1EE6,npos20BB);
          real _t20C1#1 = TensorIndex<tensor[3],[0]>(mid20BD);
          real _t20C3#1 = λ(T0[])<Abs(T0)> (_t20C1);
          bool _t20C5#1 = LTE<real>(_t20C3,_t1EEE);
          if _t20C5 then goto ASSIGN20C9 else goto ASSIGN2327
        ASSIGN20C9:  preds = [COND20C7]
          real _t20C8#1 = TensorIndex<tensor[3],[1]>(mid20BD);
          real _t20CA#1 = λ(T0[])<Abs(T0)> (_t20C8);
          bool _t20CC#1 = LTE<real>(_t20CA,_t1EEE);
          if _t20CC then goto ASSIGN20D0 else goto ASSIGN2326
        ASSIGN20D0:  preds = [COND20CE]
          real _t20CF#1 = TensorIndex<tensor[3],[2]>(mid20BD);
          real _t20D1#1 = λ(T0[])<Abs(T0)> (_t20CF);
          bool _t20D3#1 = LTE<real>(_t20D1,_t1EEE);
          goto JOIN20D7
        JOIN20D7:  preds = [ASSIGN20D4,ASSIGN2326]
          bool _t20D5#1 = phi(_t20D3,_t20D6)
          goto JOIN20DA
        JOIN20DA:  preds = [JOIN20D7,ASSIGN2327]
          bool _t20D8#1 = phi(_t20D5,_t20D9)
          if _t20D8 then goto ASSIGN20DD else goto ASSIGN2325
        ASSIGN20DD:  preds = [COND20DB]
          real _t20DC#6 = TensorIndex<tensor[3],[0]>(npos20BB);
          bool _t20DE#1 = EQ<real>(_t20DC,_t20DC);
          bool _t20E0#1 = BNot(_t20DE);
          if _t20E0 then goto ASSIGN20E4 else goto ASSIGN2316
        ASSIGN20E4:  preds = [COND20E2]
          bool _t20E3#1 = true;
          goto JOIN20E7
        JOIN20E7:  preds = [ASSIGN20E4,JOIN231F]
          bool _t20E5#1 = phi(_t20E3,_t20E6)
          bool _t20E8#1 = BNot(_t20E5);
          if _t20E8 then goto ASSIGN20EC else goto ASSIGN2314
        ASSIGN20EC:  preds = [COND20EA]
          real y20EB#1 = TensorIndex<tensor[3],[1]>(npos20BB);
          real z20ED#1 = TensorIndex<tensor[3],[2]>(npos20BB);
          real _t20EF#9 = 0.2e1;
          real _t20F1#1 = 0.3e1;
          real _t20F3#1 = 0.12e2;
          real op1_e3_l_1020F6#1 = λ(T0[])<(T0)^2> (_t20DC);
          real op1_e3_l_1120F7#1 = λ(T0[],T1[])<(T0 * T1)> (_t20F1,op1_e3_l_1020F6);
          real op1_e3_l_1220F8#3 = λ(T0[],T1[])<(T0) - (T1)> (_t20EF,op1_e3_l_1120F7);
          real op1_e3_l_1320F9#1 = λ(T0[])<(T0)^2> (op1_e3_l_1220F8);
          real op1_e3_l_1420FA#1 = λ(T0[])<(T0)^3> (_t20DC);
          real op1_e3_l_1520FB#1 = λ(T0[])<Neg(T0)> (op1_e3_l_1420FA);
          real op1_e3_l_1620FC#1 = λ(T0[],T1[])<(T0 * T1)> (_t20EF,_t20DC);
          real op1_e3_l_1720FD#3 = λ(T0[],T1[],T2[])<(T1 + T2 + T0)> (y20EB,op1_e3_l_1520FB,op1_e3_l_1620FC);
          real op1_e3_l_1820FE#1 = λ(T0[],T1[])<(T0 * T1)> (_t20EF,op1_e3_l_1320F9);
          real op1_e3_l_1920FF#1 = λ(T0[],T1[],T2[])<(T1 * T0 * T2)> (_t20DC,_t20F3,op1_e3_l_1720FD);
          real _t20F5#1 = λ(T0[],T1[])<(T0) - (T1)> (op1_e3_l_1820FE,op1_e3_l_1920FF);
          real _t210B#2 = λ(T0[],T1[])<(T0 * T1)> (_t20EF,op1_e3_l_1220F8);
          tensor[3] _t2113#1 = <tensor[3]>[_t20F5,_t210B,_t1EE4];
          tensor[3] _t2115#1 = <tensor[3]>[_t210B,_t20EF,_t1EE4];
          real _t2117#1 = λ(T0[],T1[])<(T0 * T1)> (_t20EF,zfuz1ED2);
          tensor[3] _t2119#1 = <tensor[3]>[_t1EE4,_t1EE4,_t2117];
          tensor[3,3] H211B#1 = <tensor[3,3]>[_t2113,_t2115,_t2119];
          real _t211D#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t20EF,op1_e3_l_1220F8,op1_e3_l_1720FD);
          real _t212D#1 = λ(T0[],T1[])<(T0 * T1)> (_t20EF,op1_e3_l_1720FD);
          real _t2137#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t20EF,zfuz1ED2,z20ED);
          tensor[3] g2139#1 = <tensor[3]>[_t211D,_t212D,_t2137];
          (real[3] _t213B#1,tensor[3][3] evecs213C#0) = EigenVecs3x3(H211B);
          real _t213E#1 = Subscript<real[3]>(_t213B,nn2078);
          real op1_e3_l_32141#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (g2139);
          real op1_e3_l_42142#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_32141);
          real op1_e3_l_52143#1 = λ(T0[],T1[])<(T0 + T1)> (fBias1ECE,op1_e3_l_42142);
          real _t2140#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t213E,op1_e3_l_52143);
          bool _t2148#1 = GTE<real>(_t2140,fStren1ED0);
          goto JOIN214C
        JOIN214C:  preds = [ASSIGN2149,ASSIGN2314]
          bool _t214A#1 = phi(_t2148,_t214B)
          goto JOIN214F
        JOIN214F:  preds = [JOIN214C,ASSIGN2325]
          bool _t214D#1 = phi(_t214A,_t214E)
          if _t214D then goto NEW2151 else goto JOIN2152
        NEW2151:  preds = [COND2150]
          new particle(npos20BB,hh1ED6);
          goto JOIN2152
        JOIN2152:  preds = [NEW2151,COND2150]
          self.pos = pos2065;
          self._pos = pos2065;
          self.step = step2076;
          self.steps = steps1EE2;
          active
          goto JOIN2158
        JOIN2158:  preds = [*ACTIVE2157,COND20B4]
          tensor[3,3] _t21AD#1 = fPerp2159 (pos2065);
          tensor[3] op1_e3_l_321B0#5 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (_t21AD,force2098);
          tensor[3] es21AF#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (hh1ED6,op1_e3_l_321B0);
          real op1_e3_l_521B5#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_321B0,op1_e3_l_321B0);
          real op1_e3_l_621B6#1 = λ(T0[],T1[])<(T0 * T0 * T1)> (hh1ED6,op1_e3_l_521B5);
          real _t21B3#2 = λ(T0[])<Sqrt(T0)> (op1_e3_l_621B6);
          bool _t21BB#1 = GT<real>(_t21B3,rad1ECA);
          if _t21BB then goto ASSIGN23B3 else goto JOIN21D8
        ASSIGN23B3:  preds = [COND21BD]
          real op1_e3_l_1021C3#2 = λ(T0[],T1[])<(T0) / ( T1)> (rad1ECA,_t21B3);
          real hh21BE#1 = λ(T0[],T1[])<(T0 * T1)> (hh1ED6,op1_e3_l_1021C3);
          tensor[3] es21CA#1 = λ(T0[],T1[],T2[3])<(T0 * T1 * T2_{i0})>_{3} (hh1ED6,op1_e3_l_1021C3,op1_e3_l_321B0);
          goto JOIN21D8
        JOIN21D8:  preds = [ASSIGN23B4,COND21BD]
          tensor[3] es21D6#5 = phi(es21CA,es21AF)
          real hh21D7#2 = phi(hh21BE,hh1ED6)
          tensor[3] samplePos21D9#1 = λ(T0[3],T1[3],T2[3])<(T0_{i0} + T1_{i0} + T2_{i0})>_{3} (pos1ED4,_t2063,es21D6);
          tensor[3] fs21DB#3 = fStep1F85 (samplePos21D9);
          real op1_e3_l_221DE#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (fs21DB);
          real op1_e3_l_321DF#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (es21D6);
          real op1_e3_l_421E0#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_221DE);
          real op1_e3_l_521E1#2 = λ(T0[])<Sqrt(T0)> (op1_e3_l_321DF);
          real _t21DD#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_421E0,op1_e3_l_521E1);
          real _t21E7#5 = 0.5e0;
          bool _t21E9#1 = GT<real>(_t21DD,_t21E7);
          if _t21E9 then goto ASSIGN21ED else goto JOIN21F5
        ASSIGN21ED:  preds = [COND21EB]
          real hh21EC#1 = λ(T0[],T1[])<(T0 * T1)> (hh21D7,_t21E7);
          self.pos = pos2065;
          self._pos = pos2065;
          self.hh = hh21EC;
          self.step = step2076;
          self.steps = steps1EE2;
          active
          goto JOIN21F5
        JOIN21F5:  preds = [*ACTIVE21F3,COND21EB]
          real hh21F4#2 = phi(hh21D7)
          tensor[3] up2043#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (fs21DB,es21D6);
          tensor[3] pos21F7#4 = λ(T0[3],T1[3],T2[3],T3[3])<(T0_{i0} + T1_{i0} + T2_{i0} + T3_{i0})>_{3} (pos1ED4,_t2063,fs21DB,es21D6);
          particle[] _t21F9#1 = SphereQuery<3,particle>(pos21F7,rad1ECA);
        FOREACH21FC:  preds = [ASSIGN21FA,NEXT2212]
          foreach (P21FB in _t21F9) on exit goto ASSIGN2214
            real accum2202#2 = phi(_t1EE4,accum2201)
          tensor[3] _t21FD#1 = P21FB.pos;
          real _t21FF#1 = 0.1e1;
          tensor[3] op1_e3_l_102204#2 = λ(T0[3],T1[3])<(T1_{i0}) - (T0_{i0})>_{3} (_t21FD,pos21F7);
          real op1_e3_l_122205#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_102204,op1_e3_l_102204);
          real op1_e3_l_132206#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_122205);
          real op1_e3_l_142207#1 = λ(T0[],T1[])<(T1) / ( T0)> (rad1ECA,op1_e3_l_132206);
          real op1_e3_l_152208#1 = λ(T0[],T1[])<(T0) - (T1)> (_t21FF,op1_e3_l_142207);
          real op1_e3_l_162209#1 = λ(T0[])<(T0)^4> (op1_e3_l_152208);
          real accum2201#1 = λ(T0[],T1[])<(T0 + T1)> (accum2202,op1_e3_l_162209);
          goto FOREACH21FC
        ASSIGN2214:  preds = [FOREACH21FC]
          real _t2213#1 = λ(T0[],T1[])<(T0) - (T1)> (accum2202,oldE2083);
          tensor[3] op1_e3_l_122219#1 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (pos21F7,pos2065);
          tensor[3] op1_e3_l_13221A#1 = λ(T0[3])<Neg(T0_{i0})>_{3} (op1_e3_l_321B0);
          real op1_e3_l_14221B#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_122219,op1_e3_l_13221A);
          real _t2215#1 = λ(T0[],T1[])<(T0 * T1)> (_t21E7,op1_e3_l_14221B);
          bool _t2223#1 = GT<real>(_t2213,_t2215);
          if _t2223 then goto ASSIGN2227 else goto JOIN222F
        ASSIGN2227:  preds = [COND2225]
          real hh2226#1 = λ(T0[],T1[])<(T0 * T1)> (hh21F4,_t21E7);
          self.pos = pos2065;
          self._pos = pos2065;
          self.hh = hh2226;
          self.step = step2076;
          self.steps = steps1EE2;
          active
          goto JOIN222F
        JOIN222F:  preds = [*ACTIVE222D,COND2225]
          real hh222E#1 = phi(hh21F4)
          tensor[3] pos2047#5 = phi(pos21F7)
          real _t2230#1 = 0.11e1;
          real hh2045#2 = λ(T0[],T1[])<(T0 * T1)> (hh222E,_t2230);
          real _t2233#2 = TensorIndex<tensor[3],[0]>(pos2047);
          bool _t2235#1 = EQ<real>(_t2233,_t2233);
          bool _t2237#1 = BNot(_t2235);
          if _t2237 then goto ASSIGN223B else goto ASSIGN2305
        ASSIGN223B:  preds = [COND2239]
          bool _t223A#1 = true;
          goto JOIN223E
        JOIN223E:  preds = [ASSIGN223B,JOIN230E]
          bool _t223C#1 = phi(_t223A,_t223D)
          if _t223C then goto DIE2240 else goto JOIN2241
        DIE2240:  preds = [COND223F]
          die
          goto JOIN2241
        JOIN2241:  preds = [*DIE2240,COND223F]
          int _t2242#1 = 5;
          bool _t2244#1 = LT<int>(nn20AF,_t2242);
          if _t2244 then goto ASSIGN23B7 else goto JOIN22EF
        ASSIGN23B7:  preds = [COND2246]
          real op1_e3_l_7224A#1 = λ(T0[])<(1) / ( T0)> (op1_e3_l_521E1);
          tensor[3] op1_e3_l_8224B#1 = λ(T0[],T1[],T2[3],T3[])<(T0 * T1 * T2_{i0} * T3)>_{3} (_t21E7,rad1ECA,es21D6,op1_e3_l_7224A);
          tensor[3] npos2247#7 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos2047,op1_e3_l_8224B);
          tensor[3] mid2251#3 = λ(T0[3],T1[3])<(T1_{i0}) - (T0_{i0})>_{3} (_t1EE6,npos2247);
          real _t225D#1 = TensorIndex<tensor[3],[0]>(mid2251);
          real _t225F#1 = λ(T0[])<Abs(T0)> (_t225D);
          bool _t2261#1 = LTE<real>(_t225F,_t1EEE);
          if _t2261 then goto ASSIGN2265 else goto ASSIGN2303
        ASSIGN2265:  preds = [COND2263]
          real _t2264#1 = TensorIndex<tensor[3],[1]>(mid2251);
          real _t2266#1 = λ(T0[])<Abs(T0)> (_t2264);
          bool _t2268#1 = LTE<real>(_t2266,_t1EEE);
          if _t2268 then goto ASSIGN226C else goto ASSIGN2302
        ASSIGN226C:  preds = [COND226A]
          real _t226B#1 = TensorIndex<tensor[3],[2]>(mid2251);
          real _t226D#1 = λ(T0[])<Abs(T0)> (_t226B);
          bool _t226F#1 = LTE<real>(_t226D,_t1EEE);
          goto JOIN2273
        JOIN2273:  preds = [ASSIGN2270,ASSIGN2302]
          bool _t2271#1 = phi(_t226F,_t2272)
          goto JOIN2276
        JOIN2276:  preds = [JOIN2273,ASSIGN2303]
          bool _t2274#1 = phi(_t2271,_t2275)
          if _t2274 then goto ASSIGN2279 else goto ASSIGN2301
        ASSIGN2279:  preds = [COND2277]
          real _t2278#6 = TensorIndex<tensor[3],[0]>(npos2247);
          bool _t227A#1 = EQ<real>(_t2278,_t2278);
          bool _t227C#1 = BNot(_t227A);
          if _t227C then goto ASSIGN2280 else goto ASSIGN22F2
        ASSIGN2280:  preds = [COND227E]
          bool _t227F#1 = true;
          goto JOIN2283
        JOIN2283:  preds = [ASSIGN2280,JOIN22FB]
          bool _t2281#1 = phi(_t227F,_t2282)
          bool _t2284#1 = BNot(_t2281);
          if _t2284 then goto ASSIGN2288 else goto ASSIGN22F0
        ASSIGN2288:  preds = [COND2286]
          real y2287#1 = TensorIndex<tensor[3],[1]>(npos2247);
          real z2289#1 = TensorIndex<tensor[3],[2]>(npos2247);
          real _t228B#9 = 0.2e1;
          real _t228D#1 = 0.3e1;
          real _t228F#1 = 0.12e2;
          real op1_e3_l_102292#1 = λ(T0[])<(T0)^2> (_t2278);
          real op1_e3_l_112293#1 = λ(T0[],T1[])<(T0 * T1)> (_t228D,op1_e3_l_102292);
          real op1_e3_l_122294#3 = λ(T0[],T1[])<(T0) - (T1)> (_t228B,op1_e3_l_112293);
          real op1_e3_l_132295#1 = λ(T0[])<(T0)^2> (op1_e3_l_122294);
          real op1_e3_l_142296#1 = λ(T0[])<(T0)^3> (_t2278);
          real op1_e3_l_152297#1 = λ(T0[])<Neg(T0)> (op1_e3_l_142296);
          real op1_e3_l_162298#1 = λ(T0[],T1[])<(T0 * T1)> (_t228B,_t2278);
          real op1_e3_l_172299#3 = λ(T0[],T1[],T2[])<(T1 + T2 + T0)> (y2287,op1_e3_l_152297,op1_e3_l_162298);
          real op1_e3_l_18229A#1 = λ(T0[],T1[])<(T0 * T1)> (_t228B,op1_e3_l_132295);
          real op1_e3_l_19229B#1 = λ(T0[],T1[],T2[])<(T1 * T0 * T2)> (_t2278,_t228F,op1_e3_l_172299);
          real _t2291#1 = λ(T0[],T1[])<(T0) - (T1)> (op1_e3_l_18229A,op1_e3_l_19229B);
          real _t22A7#2 = λ(T0[],T1[])<(T0 * T1)> (_t228B,op1_e3_l_122294);
          tensor[3] _t22AF#1 = <tensor[3]>[_t2291,_t22A7,_t1EE4];
          tensor[3] _t22B1#1 = <tensor[3]>[_t22A7,_t228B,_t1EE4];
          real _t22B3#1 = λ(T0[],T1[])<(T0 * T1)> (_t228B,zfuz1ED2);
          tensor[3] _t22B5#1 = <tensor[3]>[_t1EE4,_t1EE4,_t22B3];
          tensor[3,3] H22B7#1 = <tensor[3,3]>[_t22AF,_t22B1,_t22B5];
          real _t22B9#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t228B,op1_e3_l_122294,op1_e3_l_172299);
          real _t22C9#1 = λ(T0[],T1[])<(T0 * T1)> (_t228B,op1_e3_l_172299);
          real _t22D3#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t228B,zfuz1ED2,z2289);
          tensor[3] g22D5#1 = <tensor[3]>[_t22B9,_t22C9,_t22D3];
          (real[3] _t22D7#1,tensor[3][3] evecs22D8#0) = EigenVecs3x3(H22B7);
          real _t22DA#1 = Subscript<real[3]>(_t22D7,nn2078);
          real op1_e3_l_322DD#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (g22D5);
          real op1_e3_l_422DE#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_322DD);
          real op1_e3_l_522DF#1 = λ(T0[],T1[])<(T0 + T1)> (fBias1ECE,op1_e3_l_422DE);
          real _t22DC#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t22DA,op1_e3_l_522DF);
          bool _t22E4#1 = GTE<real>(_t22DC,fStren1ED0);
          goto JOIN22E8
        JOIN22E8:  preds = [ASSIGN22E5,ASSIGN22F0]
          bool _t22E6#1 = phi(_t22E4,_t22E7)
          goto JOIN22EB
        JOIN22EB:  preds = [JOIN22E8,ASSIGN2301]
          bool _t22E9#1 = phi(_t22E6,_t22EA)
          if _t22E9 then goto NEW22ED else goto JOIN22EE
        NEW22ED:  preds = [COND22EC]
          new particle(npos2247,hh2045);
          goto JOIN22EE
        JOIN22EE:  preds = [NEW22ED,COND22EC]
          goto JOIN22EF
        JOIN22EF:  preds = [JOIN22EE,COND2246]
          goto JOIN2048
        ASSIGN22F0:  preds = [COND2286]
          bool _t22E7#1 = false;
          goto JOIN22E8
        ASSIGN22F2:  preds = [COND227E]
          real _t22F1#2 = TensorIndex<tensor[3],[1]>(npos2247);
          bool _t22F3#1 = EQ<real>(_t22F1,_t22F1);
          bool _t22F5#1 = BNot(_t22F3);
          if _t22F5 then goto ASSIGN22F9 else goto ASSIGN22FD
        ASSIGN22F9:  preds = [COND22F7]
          bool _t22F8#1 = true;
          goto JOIN22FB
        JOIN22FB:  preds = [ASSIGN22F9,ASSIGN2300]
          bool _t2282#1 = phi(_t22F8,_t22FA)
          goto JOIN2283
        ASSIGN22FD:  preds = [COND22F7]
          real _t22FC#2 = TensorIndex<tensor[3],[2]>(npos2247);
          bool _t22FE#1 = EQ<real>(_t22FC,_t22FC);
          bool _t22FA#1 = BNot(_t22FE);
          goto JOIN22FB
        ASSIGN2301:  preds = [COND2277]
          bool _t22EA#1 = false;
          goto JOIN22EB
        ASSIGN2302:  preds = [COND226A]
          bool _t2272#1 = false;
          goto JOIN2273
        ASSIGN2303:  preds = [COND2263]
          bool _t2275#1 = false;
          goto JOIN2276
        ASSIGN2305:  preds = [COND2239]
          real _t2304#2 = TensorIndex<tensor[3],[1]>(pos2047);
          bool _t2306#1 = EQ<real>(_t2304,_t2304);
          bool _t2308#1 = BNot(_t2306);
          if _t2308 then goto ASSIGN230C else goto ASSIGN2310
        ASSIGN230C:  preds = [COND230A]
          bool _t230B#1 = true;
          goto JOIN230E
        JOIN230E:  preds = [ASSIGN230C,ASSIGN2313]
          bool _t223D#1 = phi(_t230B,_t230D)
          goto JOIN223E
        ASSIGN2310:  preds = [COND230A]
          real _t230F#2 = TensorIndex<tensor[3],[2]>(pos2047);
          bool _t2311#1 = EQ<real>(_t230F,_t230F);
          bool _t230D#1 = BNot(_t2311);
          goto JOIN230E
        ASSIGN2314:  preds = [COND20EA]
          bool _t214B#1 = false;
          goto JOIN214C
        ASSIGN2316:  preds = [COND20E2]
          real _t2315#2 = TensorIndex<tensor[3],[1]>(npos20BB);
          bool _t2317#1 = EQ<real>(_t2315,_t2315);
          bool _t2319#1 = BNot(_t2317);
          if _t2319 then goto ASSIGN231D else goto ASSIGN2321
        ASSIGN231D:  preds = [COND231B]
          bool _t231C#1 = true;
          goto JOIN231F
        JOIN231F:  preds = [ASSIGN231D,ASSIGN2324]
          bool _t20E6#1 = phi(_t231C,_t231E)
          goto JOIN20E7
        ASSIGN2321:  preds = [COND231B]
          real _t2320#2 = TensorIndex<tensor[3],[2]>(npos20BB);
          bool _t2322#1 = EQ<real>(_t2320,_t2320);
          bool _t231E#1 = BNot(_t2322);
          goto JOIN231F
        ASSIGN2325:  preds = [COND20DB]
          bool _t214E#1 = false;
          goto JOIN214F
        ASSIGN2326:  preds = [COND20CE]
          bool _t20D6#1 = false;
          goto JOIN20D7
        ASSIGN2327:  preds = [COND20C7]
          bool _t20D9#1 = false;
          goto JOIN20DA
        ASSIGN2329:  preds = [COND206D]
          real _t2328#2 = TensorIndex<tensor[3],[1]>(pos2065);
          bool _t232A#1 = EQ<real>(_t2328,_t2328);
          bool _t232C#1 = BNot(_t232A);
          if _t232C then goto ASSIGN2330 else goto ASSIGN2334
        ASSIGN2330:  preds = [COND232E]
          bool _t232F#1 = true;
          goto JOIN2332
        JOIN2332:  preds = [ASSIGN2330,ASSIGN2337]
          bool _t2071#1 = phi(_t232F,_t2331)
          goto JOIN2072
        ASSIGN2334:  preds = [COND232E]
          real _t2333#2 = TensorIndex<tensor[3],[2]>(pos2065);
          bool _t2335#1 = EQ<real>(_t2333,_t2333);
          bool _t2331#1 = BNot(_t2335);
          goto JOIN2332
        ASSIGN2338:  preds = [COND1F15]
          bool _t1F78#1 = false;
          goto JOIN1F79
        ASSIGN233A:  preds = [COND1F0D]
          real _t2339#2 = TensorIndex<tensor[3],[1]>(pos1ED4);
          bool _t233B#1 = EQ<real>(_t2339,_t2339);
          bool _t233D#1 = BNot(_t233B);
          if _t233D then goto ASSIGN2341 else goto ASSIGN2345
        ASSIGN2341:  preds = [COND233F]
          bool _t2340#1 = true;
          goto JOIN2343
        JOIN2343:  preds = [ASSIGN2341,ASSIGN2348]
          bool _t1F11#1 = phi(_t2340,_t2342)
          goto JOIN1F12
        ASSIGN2345:  preds = [COND233F]
          real _t2344#2 = TensorIndex<tensor[3],[2]>(pos1ED4);
          bool _t2346#1 = EQ<real>(_t2344,_t2344);
          bool _t2342#1 = BNot(_t2346);
          goto JOIN2343
        ASSIGN2349:  preds = [COND1F06]
          bool _t1F7B#1 = false;
          goto JOIN1F7C
        ASSIGN234A:  preds = [COND1EF9]
          bool _t1F01#1 = false;
          goto JOIN1F02
        ASSIGN234B:  preds = [COND1EF2]
          bool _t1F04#1 = false;
          goto JOIN1F05
    end update
  end particle
## initial strand creation
  COLLECTION
    ENTRY234C:  preds = []
      tensor[3][] ipos234D#1 = globals.ipos1E86;
    FOREACH2350:  preds = [ASSIGN234E,NEXT2354]
      foreach (x234F in ipos234D) on exit goto RETURN2355
      real _t2351#1 = 0.1e1;
      new particle(x234F,_t2351);
      goto FOREACH2350
    RETURN2355:  preds = [FOREACH2350]
      return
## global update
  ENTRY2356:  preds = []
    real rad2357#1 = globals.rad1E80;
    real eps2359#1 = globals.eps1E81;
    particle[] P235B#5 = Strands<particle,all>;
    (int res2363#1) = sum<int>(MAP sum235D (P235B));
    (int res236B#1) = max<int>(MAP max2365 (P235B));
    (int res2373#1) = sum<int>(MAP sum236D (P235B));
    (bool res237B#2) = all(MAP all2375 (P235B));
    (real res2387#1) = max<real>(MAP max237D (P235B));
    string _t2389#1 = "One run:";
    string _t238B#3 = " and ";
    real _t238D#2 = λ(T0[],T1[])<(T0) / ( T1)> (res2387,rad2357);
    bool _t238F#2 = LT<real>(_t238D,eps2359);
    string _t2391#1 = " of ";
    string _t2393#1 = "\n";
    Print<[string,bool,string,real,string,bool,string,int,string,int,string]>(_t2389,res237B,_t238B,_t238D,_t238B,_t238F,_t238B,res2373,_t2391,res2363,_t2393);
    if res237B then goto COND2397 else goto JOIN239D
  COND2397:  preds = [COND2396]
    if _t238F then goto ASSIGN2399 else goto JOIN239C
  ASSIGN2399:  preds = [COND2397]
    string _t2398#1 = "CONVERGED!\n";
    Print<[string]>(_t2398);
    StabilizeAll;
    goto JOIN239C
  JOIN239C:  preds = [MASSIGN239B,COND2397]
    goto JOIN239D
  JOIN239D:  preds = [JOIN239C,COND2396]
    int _t239E#1 = 5000;
    bool _t23A0#1 = GT<int>(res236B,_t239E);
    if _t23A0 then goto MASSIGN23A3 else goto JOIN23A4
  MASSIGN23A3:  preds = [COND23A2]
    StabilizeAll;
    goto JOIN23A4
  JOIN23A4:  preds = [MASSIGN23A3,COND23A2]
    continue
#### end program ####
##### mid-ir: after contraction ####
## properties
  GlobalInit StabilizeAll GlobalReduce StrandSets GlobalUpdate NewStrands StrandCommunication StrandsMayDie HasInputs HasGlobals ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
## globals
  input meshData1E7D (meshData) = <no-default>
  input 0space0853_intermedateGlobal1E7E (space) = <no-default>
  input 0data0855_intermedateGlobal1E7F (data) = <no-default>
  input rad1E80 (rad) = <default>
  input eps1E81 (eps) = <default>
  input v01E82 (v0) = <default>
  input fBias1E83 (fBias) = <default>
  input fStren1E84 (fStren) = <default>
  input zfuz1E85 (zfuz) = <default>
  input ipos1E86 (ipos) = <no-default>
## functions
  function tensor[3] fStep1F85 (tensor[3] s1F86#3) {
    ENTRY1F87:  preds = []
      real zfuz1F88#2 = globals.zfuz1E85;
      real x1F8A#4 = TensorIndex<tensor[3],[0]>(s1F86);
      real y1F8C#1 = TensorIndex<tensor[3],[1]>(s1F86);
      real z1F8E#1 = TensorIndex<tensor[3],[2]>(s1F86);
      real _t1F90#9 = 0.2e1;
      real _t1F92#1 = 0.3e1;
      real _t1F94#1 = 0.12e2;
      real op1_e3_l_101F97#1 = λ(T0[])<(T0)^2> (x1F8A);
      real op1_e3_l_111F98#1 = λ(T0[],T1[])<(T0 * T1)> (_t1F92,op1_e3_l_101F97);
      real op1_e3_l_121F99#3 = λ(T0[],T1[])<(T0) - (T1)> (_t1F90,op1_e3_l_111F98);
      real op1_e3_l_131F9A#1 = λ(T0[])<(T0)^2> (op1_e3_l_121F99);
      real op1_e3_l_141F9B#1 = λ(T0[])<(T0)^3> (x1F8A);
      real op1_e3_l_151F9C#1 = λ(T0[])<Neg(T0)> (op1_e3_l_141F9B);
      real op1_e3_l_161F9D#1 = λ(T0[],T1[])<(T0 * T1)> (_t1F90,x1F8A);
      real op1_e3_l_171F9E#3 = λ(T0[],T1[],T2[])<(T1 + T2 + T0)> (y1F8C,op1_e3_l_151F9C,op1_e3_l_161F9D);
      real op1_e3_l_181F9F#1 = λ(T0[],T1[])<(T0 * T1)> (_t1F90,op1_e3_l_131F9A);
      real op1_e3_l_191FA0#1 = λ(T0[],T1[],T2[])<(T1 * T0 * T2)> (x1F8A,_t1F94,op1_e3_l_171F9E);
      real _t1F96#1 = λ(T0[],T1[])<(T0) - (T1)> (op1_e3_l_181F9F,op1_e3_l_191FA0);
      real _t1FAC#2 = λ(T0[],T1[])<(T0 * T1)> (_t1F90,op1_e3_l_121F99);
      real _t1FB4#4 = 0.e0;
      tensor[3] _t1FB6#1 = <tensor[3]>[_t1F96,_t1FAC,_t1FB4];
      tensor[3] _t1FB8#1 = <tensor[3]>[_t1FAC,_t1F90,_t1FB4];
      real _t1FBA#1 = λ(T0[],T1[])<(T0 * T1)> (_t1F90,zfuz1F88);
      tensor[3] _t1FBC#1 = <tensor[3]>[_t1FB4,_t1FB4,_t1FBA];
      tensor[3,3] H1FBE#1 = <tensor[3,3]>[_t1FB6,_t1FB8,_t1FBC];
      real _t1FC0#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1F90,op1_e3_l_121F99,op1_e3_l_171F9E);
      real _t1FD0#1 = λ(T0[],T1[])<(T0 * T1)> (_t1F90,op1_e3_l_171F9E);
      real _t1FDA#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1F90,zfuz1F88,z1F8E);
      tensor[3] g1FDC#1 = <tensor[3]>[_t1FC0,_t1FD0,_t1FDA];
      (real[3] evals1FDE#1,tensor[3][3] E1FDF#1) = EigenVecs3x3(H1FBE);
      real _t1FE1#1 = 0.1e1;
      int _t1FE3#2 = 0;
      real _t1FE5#1 = Subscript<real[3]>(evals1FDE,_t1FE3);
      tensor[3] _t1FE7#2 = Subscript<tensor[3][3]>(E1FDF,_t1FE3);
      real op1_e3_l_51FEA#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t1FE1,_t1FE5);
      real op1_e3_l_61FEB#1 = λ(T0[])<Neg(T0)> (op1_e3_l_51FEA);
      real op1_e3_l_71FEC#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (_t1FE7,g1FDC);
      tensor[3] up1FE9#4 = λ(T0[3],T1[],T2[])<(T1 * T0_{i0} * T2)>_{3} (_t1FE7,op1_e3_l_61FEB,op1_e3_l_71FEC);
      real _t1FF1#2 = TensorIndex<tensor[3],[0]>(up1FE9);
      bool _t1FF3#1 = EQ<real>(_t1FF1,_t1FF1);
      bool _t1FF5#1 = BNot(_t1FF3);
      if _t1FF5 then goto ASSIGN1FF9 else goto ASSIGN2006
    ASSIGN1FF9:  preds = [COND1FF7]
      bool _t1FF8#1 = true;
      goto JOIN1FFC
    JOIN1FFC:  preds = [ASSIGN1FF9,JOIN200F]
      bool _t1FFA#1 = phi(_t1FF8,_t1FFB)
      if _t1FFA then goto ASSIGN1FFF else goto JOIN2003
    ASSIGN1FFF:  preds = [COND1FFD]
      real _t1FFE#3 = +inf;
      tensor[3] _t2000#1 = <tensor[3]>[_t1FFE,_t1FFE,_t1FFE];
      return _t2000
      goto JOIN2003
    JOIN2003:  preds = [*RETURN(_t2000)2002,COND1FFD]
      return up1FE9
    ASSIGN2006:  preds = [COND1FF7]
      real _t2005#2 = TensorIndex<tensor[3],[1]>(up1FE9);
      bool _t2007#1 = EQ<real>(_t2005,_t2005);
      bool _t2009#1 = BNot(_t2007);
      if _t2009 then goto ASSIGN200D else goto ASSIGN2011
    ASSIGN200D:  preds = [COND200B]
      bool _t200C#1 = true;
      goto JOIN200F
    JOIN200F:  preds = [ASSIGN200D,ASSIGN2014]
      bool _t1FFB#1 = phi(_t200C,_t200E)
      goto JOIN1FFC
    ASSIGN2011:  preds = [COND200B]
      real _t2010#2 = TensorIndex<tensor[3],[2]>(up1FE9);
      bool _t2012#1 = EQ<real>(_t2010,_t2010);
      bool _t200E#1 = BNot(_t2012);
      goto JOIN200F
}
  function tensor[3,3] fPerp2159 (tensor[3] s215A#2) {
    ENTRY215B:  preds = []
      real zfuz215C#1 = globals.zfuz1E85;
      real x215E#4 = TensorIndex<tensor[3],[0]>(s215A);
      real y2160#1 = TensorIndex<tensor[3],[1]>(s215A);
      real _t2162#6 = 0.2e1;
      real _t2164#1 = 0.3e1;
      real _t2166#1 = 0.12e2;
      real op1_e3_l_102169#1 = λ(T0[])<(T0)^2> (x215E);
      real op1_e3_l_11216A#1 = λ(T0[],T1[])<(T0 * T1)> (_t2164,op1_e3_l_102169);
      real op1_e3_l_12216B#2 = λ(T0[],T1[])<(T0) - (T1)> (_t2162,op1_e3_l_11216A);
      real op1_e3_l_13216C#1 = λ(T0[])<(T0)^2> (op1_e3_l_12216B);
      real op1_e3_l_14216D#1 = λ(T0[])<(T0)^3> (x215E);
      real op1_e3_l_15216E#1 = λ(T0[])<Neg(T0)> (op1_e3_l_14216D);
      real op1_e3_l_16216F#1 = λ(T0[],T1[])<(T0 * T1)> (_t2162,x215E);
      real op1_e3_l_172170#1 = λ(T0[],T1[],T2[])<(T1 + T2 + T0)> (y2160,op1_e3_l_15216E,op1_e3_l_16216F);
      real op1_e3_l_182171#1 = λ(T0[],T1[])<(T0 * T1)> (_t2162,op1_e3_l_13216C);
      real op1_e3_l_192172#1 = λ(T0[],T1[],T2[])<(T1 * T0 * T2)> (x215E,_t2166,op1_e3_l_172170);
      real _t2168#1 = λ(T0[],T1[])<(T0) - (T1)> (op1_e3_l_182171,op1_e3_l_192172);
      real _t217E#2 = λ(T0[],T1[])<(T0 * T1)> (_t2162,op1_e3_l_12216B);
      real _t2186#4 = 0.e0;
      tensor[3] _t2188#1 = <tensor[3]>[_t2168,_t217E,_t2186];
      tensor[3] _t218A#1 = <tensor[3]>[_t217E,_t2162,_t2186];
      real _t218C#1 = λ(T0[],T1[])<(T0 * T1)> (_t2162,zfuz215C);
      tensor[3] _t218E#1 = <tensor[3]>[_t2186,_t2186,_t218C];
      tensor[3,3] H2190#1 = <tensor[3,3]>[_t2188,_t218A,_t218E];
      (real[3] evals2192#0,tensor[3][3] _t2193#1) = EigenVecs3x3(H2190);
      int _t2195#1 = 0;
      tensor[3] E22197#1 = Subscript<tensor[3][3]>(_t2193,_t2195);
      tensor[3,3] op1_e3_l_2219A#1 = λ(T0[3])<(T0_{i0} * T0_{i1})>_{3 3} (E22197);
      tensor[3,3] m2199#3 = λ(T0[3 3])<(δ_{i0,i1}) - (T0_{i0,i1})>_{3 3} (op1_e3_l_2219A);
      real t219D#2 = λ(T0[3 3],T1[3 3])<Σ(i0=0..2)(i1=0..2)<((T0_{i0,i1} * T1_{i0,i1}))>(i0=0..2)(i1=0..2)> (m2199,m2199);
      bool _t21A3#1 = EQ<real>(t219D,t219D);
      bool _t21A5#1 = BNot(_t21A3);
      if _t21A5 then goto ASSIGN21A9 else goto JOIN21AB
    ASSIGN21A9:  preds = [COND21A7]
      tensor[3,3] _t21A8#1 = λ()<Z_{i0,i1}>_{3 3} ();
      return _t21A8
      goto JOIN21AB
    JOIN21AB:  preds = [*RETURN(_t21A8)21AA,COND21A7]
      return m2199
}
  function int sum235D (particle P235E#1) {
    ENTRY235F:  preds = []
      int _t2360#1 = P235E.test;
      return _t2360
}
  function int max2365 (particle P2366#1) {
    ENTRY2367:  preds = []
      int _t2368#1 = P2366.steps;
      return _t2368
}
  function int sum236D (particle P236E#1) {
    ENTRY236F:  preds = []
      int _t2370#1 = P236E.testp;
      return _t2370
}
  function bool all2375 (particle P2376#1) {
    ENTRY2377:  preds = []
      bool _t2378#1 = P2376.found;
      return _t2378
}
  function real max237D (particle P237E#1) {
    ENTRY237F:  preds = []
      tensor[3] _t2380#1 = P237E.step;
      real op1_e3_l_12383#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (_t2380);
      real _t2382#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_12383);
      return _t2382
}
## input initialization
  ENTRY1E87:  preds = []
    real rad1E88#5 = 0.1e-1;
    globals.rad1E80 = rad1E88;
    globals.eps1E81 = rad1E88;
    real v01E8C#1 = 0.625e-1;
    globals.v01E82 = v01E8C;
    globals.fBias1E83 = rad1E88;
    globals.fStren1E84 = rad1E88;
    globals.zfuz1E85 = rad1E88;
    return
## global-variable initialization
  ENTRY1E93:  preds = []
    femData:Mesh meshData1E94#2 = globals.meshData1E7D;
    int _t1E96#1 = 0;
    int _t1E98#1 = 1;
    int _t1E9A#1 = ExtractFemItem<int,NumCell(Mesh)>(meshData1E94);
    int _t1E9C#1 = ISub(_t1E9A,_t1E98);
    int[] _t1E9E#1 = Range(_t1E96,_t1E9C);
    femData:MeshCell[] _t1EA0#1 = <femData:MeshCell[]>{};
  FOREACH1EA3:  preds = [ASSIGN1EA1,NEXT1EA9]
    foreach (_t1EA2 in _t1E9E) on exit goto RETURN1EAA
      femData:MeshCell[] _t1EA7#1 = phi(_t1EA0,_t1EA6)
    femData:MeshCell _t1EA4#1 = LoadFem<femData:MeshCell>(meshData1E94,_t1EA2);
    femData:MeshCell[] _t1EA6#1 = Append<femData:MeshCell>(_t1EA7,_t1EA4);
    goto FOREACH1EA3
  RETURN1EAA:  preds = [FOREACH1EA3]
    return
## strand
  strand particle (tensor[3] pos01EAB#2, real hh01EAC#1) in 3D
    state:
      output tensor[3] pos;
      output tensor[3] _pos;
      real hh;
      tensor[3] step;
      bool found;
      int nfs;
      int test;
      int testp;
      int steps;
    state init
      ENTRY1EB6:  preds = []
        tensor[3] step1EB7#1 = λ()<Z_{i0}>_{3} ();
        bool found1EB9#1 = false;
        int nfs1EBB#3 = 0;
        int test1EBD#1 = 1;
        self.pos = pos01EAB;
        self._pos = pos01EAB;
        self.hh = hh01EAC;
        self.step = step1EB7;
        self.found = found1EB9;
        self.nfs = nfs1EBB;
        self.test = test1EBD;
        self.testp = nfs1EBB;
        self.steps = nfs1EBB;
        return
    end state init
    method update
        ENTRY1EC9:  preds = []
          real rad1ECA#10 = globals.rad1E80;
          real eps1ECC#1 = globals.eps1E81;
          real fBias1ECE#3 = globals.fBias1E83;
          real fStren1ED0#3 = globals.fStren1E84;
          real zfuz1ED2#6 = globals.zfuz1E85;
          tensor[3] pos1ED4#13 = self.pos;
          real hh1ED6#7 = self.hh;
          bool found1ED8#3 = self.found;
          int nfs1EDA#3 = self.nfs;
          int testp1EDC#2 = self.testp;
          int steps1EDE#1 = self.steps;
          int _t1EE0#4 = 1;
          int steps1EE2#4 = IAdd(steps1EDE,_t1EE0);
          real _t1EE4#19 = 0.e0;
          tensor[3] _t1EE6#3 = <tensor[3]>[_t1EE4,_t1EE4,_t1EE4];
          tensor[3] mid1EE8#3 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (pos1ED4,_t1EE6);
          real _t1EEA#1 = TensorIndex<tensor[3],[0]>(mid1EE8);
          real _t1EEC#1 = λ(T0[])<Abs(T0)> (_t1EEA);
          real _t1EEE#9 = 0.4e1;
          bool _t1EF0#1 = LTE<real>(_t1EEC,_t1EEE);
          if _t1EF0 then goto ASSIGN1EF4 else goto ASSIGN234B
        ASSIGN1EF4:  preds = [COND1EF2]
          real _t1EF3#1 = TensorIndex<tensor[3],[1]>(mid1EE8);
          real _t1EF5#1 = λ(T0[])<Abs(T0)> (_t1EF3);
          bool _t1EF7#1 = LTE<real>(_t1EF5,_t1EEE);
          if _t1EF7 then goto ASSIGN1EFB else goto ASSIGN234A
        ASSIGN1EFB:  preds = [COND1EF9]
          real _t1EFA#1 = TensorIndex<tensor[3],[2]>(mid1EE8);
          real _t1EFC#1 = λ(T0[])<Abs(T0)> (_t1EFA);
          bool _t1EFE#1 = LTE<real>(_t1EFC,_t1EEE);
          goto JOIN1F02
        JOIN1F02:  preds = [ASSIGN1EFF,ASSIGN234A]
          bool _t1F00#1 = phi(_t1EFE,_t1F01)
          goto JOIN1F05
        JOIN1F05:  preds = [JOIN1F02,ASSIGN234B]
          bool _t1F03#1 = phi(_t1F00,_t1F04)
          if _t1F03 then goto ASSIGN1F08 else goto ASSIGN2349
        ASSIGN1F08:  preds = [COND1F06]
          real _t1F07#6 = TensorIndex<tensor[3],[0]>(pos1ED4);
          bool _t1F09#1 = EQ<real>(_t1F07,_t1F07);
          bool _t1F0B#1 = BNot(_t1F09);
          if _t1F0B then goto ASSIGN1F0F else goto ASSIGN233A
        ASSIGN1F0F:  preds = [COND1F0D]
          bool _t1F0E#1 = true;
          goto JOIN1F12
        JOIN1F12:  preds = [ASSIGN1F0F,JOIN2343]
          bool _t1F10#1 = phi(_t1F0E,_t1F11)
          bool _t1F13#1 = BNot(_t1F10);
          if _t1F13 then goto ASSIGN1F17 else goto ASSIGN2338
        ASSIGN1F17:  preds = [COND1F15]
          real y1F16#1 = TensorIndex<tensor[3],[1]>(pos1ED4);
          real z1F18#1 = TensorIndex<tensor[3],[2]>(pos1ED4);
          real _t1F1A#9 = 0.2e1;
          real _t1F1C#1 = 0.3e1;
          real _t1F1E#1 = 0.12e2;
          real op1_e3_l_101F21#1 = λ(T0[])<(T0)^2> (_t1F07);
          real op1_e3_l_111F22#1 = λ(T0[],T1[])<(T0 * T1)> (_t1F1C,op1_e3_l_101F21);
          real op1_e3_l_121F23#3 = λ(T0[],T1[])<(T0) - (T1)> (_t1F1A,op1_e3_l_111F22);
          real op1_e3_l_131F24#1 = λ(T0[])<(T0)^2> (op1_e3_l_121F23);
          real op1_e3_l_141F25#1 = λ(T0[])<(T0)^3> (_t1F07);
          real op1_e3_l_151F26#1 = λ(T0[])<Neg(T0)> (op1_e3_l_141F25);
          real op1_e3_l_161F27#1 = λ(T0[],T1[])<(T0 * T1)> (_t1F1A,_t1F07);
          real op1_e3_l_171F28#3 = λ(T0[],T1[],T2[])<(T1 + T2 + T0)> (y1F16,op1_e3_l_151F26,op1_e3_l_161F27);
          real op1_e3_l_181F29#1 = λ(T0[],T1[])<(T0 * T1)> (_t1F1A,op1_e3_l_131F24);
          real op1_e3_l_191F2A#1 = λ(T0[],T1[],T2[])<(T1 * T0 * T2)> (_t1F07,_t1F1E,op1_e3_l_171F28);
          real _t1F20#1 = λ(T0[],T1[])<(T0) - (T1)> (op1_e3_l_181F29,op1_e3_l_191F2A);
          real _t1F36#2 = λ(T0[],T1[])<(T0 * T1)> (_t1F1A,op1_e3_l_121F23);
          tensor[3] _t1F3E#1 = <tensor[3]>[_t1F20,_t1F36,_t1EE4];
          tensor[3] _t1F40#1 = <tensor[3]>[_t1F36,_t1F1A,_t1EE4];
          real _t1F42#1 = λ(T0[],T1[])<(T0 * T1)> (_t1F1A,zfuz1ED2);
          tensor[3] _t1F44#1 = <tensor[3]>[_t1EE4,_t1EE4,_t1F42];
          tensor[3,3] H1F46#1 = <tensor[3,3]>[_t1F3E,_t1F40,_t1F44];
          real _t1F48#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1F1A,op1_e3_l_121F23,op1_e3_l_171F28);
          real _t1F58#1 = λ(T0[],T1[])<(T0 * T1)> (_t1F1A,op1_e3_l_171F28);
          real _t1F62#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1F1A,zfuz1ED2,z1F18);
          tensor[3] g1F64#1 = <tensor[3]>[_t1F48,_t1F58,_t1F62];
          real[3] _t1F66#1 = EigenVals3x3(H1F46);
          int _t1F69#1 = 0;
          real _t1F6B#1 = Subscript<real[3]>(_t1F66,_t1F69);
          real op1_e3_l_31F6E#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (g1F64);
          real op1_e3_l_41F6F#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_31F6E);
          real op1_e3_l_51F70#1 = λ(T0[],T1[])<(T0 + T1)> (fBias1ECE,op1_e3_l_41F6F);
          real _t1F6D#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t1F6B,op1_e3_l_51F70);
          bool _t1F75#1 = GTE<real>(_t1F6D,fStren1ED0);
          goto JOIN1F79
        JOIN1F79:  preds = [ASSIGN1F76,ASSIGN2338]
          bool _t1F77#1 = phi(_t1F75,_t1F78)
          goto JOIN1F7C
        JOIN1F7C:  preds = [JOIN1F79,ASSIGN2349]
          bool _t1F7A#1 = phi(_t1F77,_t1F7B)
          bool _t1F7D#1 = BNot(_t1F7A);
          if _t1F7D then goto DIE1F80 else goto JOIN1F81
        DIE1F80:  preds = [COND1F7F]
          die
          goto JOIN1F81
        JOIN1F81:  preds = [*DIE1F80,COND1F7F]
          bool _t1F82#1 = BNot(found1ED8);
          if _t1F82 then goto ASSIGN2016 else goto ASSIGN2064
        ASSIGN2016:  preds = [COND1F84]
          tensor[3] step2015#3 = fStep1F85 (pos1ED4);
          tensor[3] pos2017#4 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos1ED4,step2015);
          real _t2019#2 = TensorIndex<tensor[3],[0]>(pos2017);
          bool _t201B#1 = EQ<real>(_t2019,_t2019);
          bool _t201D#1 = BNot(_t201B);
          if _t201D then goto ASSIGN2021 else goto ASSIGN2054
        ASSIGN2021:  preds = [COND201F]
          bool _t2020#1 = true;
          goto JOIN2024
        JOIN2024:  preds = [ASSIGN2021,JOIN205D]
          bool _t2022#1 = phi(_t2020,_t2023)
          if _t2022 then goto DIE2026 else goto JOIN2027
        DIE2026:  preds = [COND2025]
          die
          goto JOIN2027
        JOIN2027:  preds = [*DIE2026,COND2025]
          real op1_e3_l_22029#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (step2015);
          real op1_e3_l_3202A#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_22029);
          real _t2028#1 = λ(T0[],T1[])<(T1) / ( T0)> (rad1ECA,op1_e3_l_3202A);
          bool _t202E#1 = GT<real>(_t2028,eps1ECC);
          if _t202E then goto ASSIGN2032 else goto ASSIGN2052
        ASSIGN2032:  preds = [COND2030]
          int nfs2031#2 = IAdd(nfs1EDA,_t1EE0);
          int _t2033#1 = 10;
          bool _t2035#1 = GT<int>(nfs2031,_t2033);
          if _t2035 then goto DIE2038 else goto JOIN2039
        DIE2038:  preds = [COND2037]
          die
          goto JOIN2039
        JOIN2039:  preds = [*DIE2038,COND2037]
          goto JOIN203E
        JOIN203E:  preds = [JOIN2039,ASSIGN2052]
          int testp203A#1 = phi(testp1EDC,_t1EE0)
          int nfs203B#1 = phi(nfs2031,nfs1EDA)
          bool found203C#1 = phi(found1ED8,found203D)
          goto JOIN2048
        JOIN2048:  preds = [JOIN203E,JOIN22EF]
          int testp203F#1 = phi(testp203A,testp1EDC)
          int nfs2040#1 = phi(nfs203B,nfs1EDA)
          bool found2041#1 = phi(found203C,found1ED8)
          tensor[3] step2042#1 = phi(step2015,up2043)
          real hh2044#1 = phi(hh1ED6,hh2045)
          tensor[3] pos2046#2 = phi(pos2017,pos2047)
          self.pos = pos2046;
          self._pos = pos2046;
          self.hh = hh2044;
          self.step = step2042;
          self.found = found2041;
          self.nfs = nfs2040;
          self.testp = testp203F;
          self.steps = steps1EE2;
          active
        ASSIGN2052:  preds = [COND2030]
          bool found203D#1 = true;
          goto JOIN203E
        ASSIGN2054:  preds = [COND201F]
          real _t2053#2 = TensorIndex<tensor[3],[1]>(pos2017);
          bool _t2055#1 = EQ<real>(_t2053,_t2053);
          bool _t2057#1 = BNot(_t2055);
          if _t2057 then goto ASSIGN205B else goto ASSIGN205F
        ASSIGN205B:  preds = [COND2059]
          bool _t205A#1 = true;
          goto JOIN205D
        JOIN205D:  preds = [ASSIGN205B,ASSIGN2062]
          bool _t2023#1 = phi(_t205A,_t205C)
          goto JOIN2024
        ASSIGN205F:  preds = [COND2059]
          real _t205E#2 = TensorIndex<tensor[3],[2]>(pos2017);
          bool _t2060#1 = EQ<real>(_t205E,_t205E);
          bool _t205C#1 = BNot(_t2060);
          goto JOIN205D
        ASSIGN2064:  preds = [COND1F84]
          tensor[3] _t2063#4 = fStep1F85 (pos1ED4);
          tensor[3] pos2065#13 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos1ED4,_t2063);
          real _t2067#2 = TensorIndex<tensor[3],[0]>(pos2065);
          bool _t2069#1 = EQ<real>(_t2067,_t2067);
          bool _t206B#1 = BNot(_t2069);
          if _t206B then goto ASSIGN206F else goto ASSIGN2329
        ASSIGN206F:  preds = [COND206D]
          bool _t206E#1 = true;
          goto JOIN2072
        JOIN2072:  preds = [ASSIGN206F,JOIN2332]
          bool _t2070#1 = phi(_t206E,_t2071)
          if _t2070 then goto DIE2074 else goto JOIN2075
        DIE2074:  preds = [COND2073]
          die
          goto JOIN2075
        JOIN2075:  preds = [*DIE2074,COND2073]
          tensor[3] step2076#4 = λ()<Z_{i0}>_{3} ();
          int nn2078#4 = 0;
          particle[] _t207A#1 = SphereQuery<3,particle>(pos2065,rad1ECA);
        FOREACH207D:  preds = [ASSIGN207B,NEXT20B1]
          foreach (P207C in _t207A) on exit goto ASSIGN20B3
            int nn20AF#3 = phi(nn2078,nn20AE)
            tensor[3] force2098#2 = phi(step2076,force2097)
            real oldE2083#2 = phi(_t1EE4,oldE2082)
          tensor[3] _t207E#1 = P207C.pos;
          real _t2080#2 = 0.1e1;
          tensor[3] op1_e3_l_82085#3 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (_t207E,pos2065);
          real op1_e3_l_102086#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_82085,op1_e3_l_82085);
          real op1_e3_l_112087#2 = λ(T0[])<Sqrt(T0)> (op1_e3_l_102086);
          real op1_e3_l_122088#1 = λ(T0[],T1[])<(T1) / ( T0)> (rad1ECA,op1_e3_l_112087);
          real op1_e3_l_132089#2 = λ(T0[],T1[])<(T0) - (T1)> (_t2080,op1_e3_l_122088);
          real op1_e3_l_14208A#1 = λ(T0[])<(T0)^4> (op1_e3_l_132089);
          real oldE2082#1 = λ(T0[],T1[])<(T0 + T1)> (oldE2083,op1_e3_l_14208A);
          real _t2095#1 = -0.4e1;
          real op1_e3_l_24209F#1 = λ(T0[])<(T0)^3> (op1_e3_l_132089);
          real op1_e3_l_2520A0#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t2080,rad1ECA);
          tensor[3] op1_e3_l_3220A1#1 = λ(T0[],T1[],T2[],T3[3])<(T0 * T1 * T2 * T3_{i0})>_{3} (_t2095,op1_e3_l_24209F,op1_e3_l_2520A0,op1_e3_l_82085);
          tensor[3] op1_e3_l_3420A2#1 = λ(T0[3],T1[])<(T0_{i0}) / ( T1)>_{3} (op1_e3_l_3220A1,op1_e3_l_112087);
          tensor[3] force2097#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (force2098,op1_e3_l_3420A2);
          int nn20AE#1 = IAdd(nn20AF,_t1EE0);
          goto FOREACH207D
        ASSIGN20B3:  preds = [FOREACH207D]
          bool _t20B2#1 = EQ<int>(nn2078,nn20AF);
          if _t20B2 then goto ASSIGN20B6 else goto JOIN2158
        ASSIGN20B6:  preds = [COND20B4]
          real _t20B5#1 = 0.5e0;
          real _t20B7#1 = λ(T0[],T1[])<(T0 * T1)> (_t20B5,rad1ECA);
          tensor[3] _t20B9#1 = <tensor[3]>[_t20B7,_t1EE4,_t1EE4];
          tensor[3] npos20BB#7 = λ(T0[3],T1[3],T2[3])<(T0_{i0} + T1_{i0} + T2_{i0})>_{3} (pos1ED4,_t2063,_t20B9);
          tensor[3] mid20BD#3 = λ(T0[3],T1[3])<(T1_{i0}) - (T0_{i0})>_{3} (_t1EE6,npos20BB);
          real _t20C1#1 = TensorIndex<tensor[3],[0]>(mid20BD);
          real _t20C3#1 = λ(T0[])<Abs(T0)> (_t20C1);
          bool _t20C5#1 = LTE<real>(_t20C3,_t1EEE);
          if _t20C5 then goto ASSIGN20C9 else goto ASSIGN2327
        ASSIGN20C9:  preds = [COND20C7]
          real _t20C8#1 = TensorIndex<tensor[3],[1]>(mid20BD);
          real _t20CA#1 = λ(T0[])<Abs(T0)> (_t20C8);
          bool _t20CC#1 = LTE<real>(_t20CA,_t1EEE);
          if _t20CC then goto ASSIGN20D0 else goto ASSIGN2326
        ASSIGN20D0:  preds = [COND20CE]
          real _t20CF#1 = TensorIndex<tensor[3],[2]>(mid20BD);
          real _t20D1#1 = λ(T0[])<Abs(T0)> (_t20CF);
          bool _t20D3#1 = LTE<real>(_t20D1,_t1EEE);
          goto JOIN20D7
        JOIN20D7:  preds = [ASSIGN20D4,ASSIGN2326]
          bool _t20D5#1 = phi(_t20D3,_t20D6)
          goto JOIN20DA
        JOIN20DA:  preds = [JOIN20D7,ASSIGN2327]
          bool _t20D8#1 = phi(_t20D5,_t20D9)
          if _t20D8 then goto ASSIGN20DD else goto ASSIGN2325
        ASSIGN20DD:  preds = [COND20DB]
          real _t20DC#6 = TensorIndex<tensor[3],[0]>(npos20BB);
          bool _t20DE#1 = EQ<real>(_t20DC,_t20DC);
          bool _t20E0#1 = BNot(_t20DE);
          if _t20E0 then goto ASSIGN20E4 else goto ASSIGN2316
        ASSIGN20E4:  preds = [COND20E2]
          bool _t20E3#1 = true;
          goto JOIN20E7
        JOIN20E7:  preds = [ASSIGN20E4,JOIN231F]
          bool _t20E5#1 = phi(_t20E3,_t20E6)
          bool _t20E8#1 = BNot(_t20E5);
          if _t20E8 then goto ASSIGN20EC else goto ASSIGN2314
        ASSIGN20EC:  preds = [COND20EA]
          real y20EB#1 = TensorIndex<tensor[3],[1]>(npos20BB);
          real z20ED#1 = TensorIndex<tensor[3],[2]>(npos20BB);
          real _t20EF#9 = 0.2e1;
          real _t20F1#1 = 0.3e1;
          real _t20F3#1 = 0.12e2;
          real op1_e3_l_1020F6#1 = λ(T0[])<(T0)^2> (_t20DC);
          real op1_e3_l_1120F7#1 = λ(T0[],T1[])<(T0 * T1)> (_t20F1,op1_e3_l_1020F6);
          real op1_e3_l_1220F8#3 = λ(T0[],T1[])<(T0) - (T1)> (_t20EF,op1_e3_l_1120F7);
          real op1_e3_l_1320F9#1 = λ(T0[])<(T0)^2> (op1_e3_l_1220F8);
          real op1_e3_l_1420FA#1 = λ(T0[])<(T0)^3> (_t20DC);
          real op1_e3_l_1520FB#1 = λ(T0[])<Neg(T0)> (op1_e3_l_1420FA);
          real op1_e3_l_1620FC#1 = λ(T0[],T1[])<(T0 * T1)> (_t20EF,_t20DC);
          real op1_e3_l_1720FD#3 = λ(T0[],T1[],T2[])<(T1 + T2 + T0)> (y20EB,op1_e3_l_1520FB,op1_e3_l_1620FC);
          real op1_e3_l_1820FE#1 = λ(T0[],T1[])<(T0 * T1)> (_t20EF,op1_e3_l_1320F9);
          real op1_e3_l_1920FF#1 = λ(T0[],T1[],T2[])<(T1 * T0 * T2)> (_t20DC,_t20F3,op1_e3_l_1720FD);
          real _t20F5#1 = λ(T0[],T1[])<(T0) - (T1)> (op1_e3_l_1820FE,op1_e3_l_1920FF);
          real _t210B#2 = λ(T0[],T1[])<(T0 * T1)> (_t20EF,op1_e3_l_1220F8);
          tensor[3] _t2113#1 = <tensor[3]>[_t20F5,_t210B,_t1EE4];
          tensor[3] _t2115#1 = <tensor[3]>[_t210B,_t20EF,_t1EE4];
          real _t2117#1 = λ(T0[],T1[])<(T0 * T1)> (_t20EF,zfuz1ED2);
          tensor[3] _t2119#1 = <tensor[3]>[_t1EE4,_t1EE4,_t2117];
          tensor[3,3] H211B#1 = <tensor[3,3]>[_t2113,_t2115,_t2119];
          real _t211D#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t20EF,op1_e3_l_1220F8,op1_e3_l_1720FD);
          real _t212D#1 = λ(T0[],T1[])<(T0 * T1)> (_t20EF,op1_e3_l_1720FD);
          real _t2137#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t20EF,zfuz1ED2,z20ED);
          tensor[3] g2139#1 = <tensor[3]>[_t211D,_t212D,_t2137];
          real[3] _t213B#1 = EigenVals3x3(H211B);
          real _t213E#1 = Subscript<real[3]>(_t213B,nn2078);
          real op1_e3_l_32141#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (g2139);
          real op1_e3_l_42142#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_32141);
          real op1_e3_l_52143#1 = λ(T0[],T1[])<(T0 + T1)> (fBias1ECE,op1_e3_l_42142);
          real _t2140#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t213E,op1_e3_l_52143);
          bool _t2148#1 = GTE<real>(_t2140,fStren1ED0);
          goto JOIN214C
        JOIN214C:  preds = [ASSIGN2149,ASSIGN2314]
          bool _t214A#1 = phi(_t2148,_t214B)
          goto JOIN214F
        JOIN214F:  preds = [JOIN214C,ASSIGN2325]
          bool _t214D#1 = phi(_t214A,_t214E)
          if _t214D then goto NEW2151 else goto JOIN2152
        NEW2151:  preds = [COND2150]
          new particle(npos20BB,hh1ED6);
          goto JOIN2152
        JOIN2152:  preds = [NEW2151,COND2150]
          self.pos = pos2065;
          self._pos = pos2065;
          self.step = step2076;
          self.steps = steps1EE2;
          active
          goto JOIN2158
        JOIN2158:  preds = [*ACTIVE2157,COND20B4]
          tensor[3,3] _t21AD#1 = fPerp2159 (pos2065);
          tensor[3] op1_e3_l_321B0#5 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (_t21AD,force2098);
          tensor[3] es21AF#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (hh1ED6,op1_e3_l_321B0);
          real op1_e3_l_521B5#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_321B0,op1_e3_l_321B0);
          real op1_e3_l_621B6#1 = λ(T0[],T1[])<(T0 * T0 * T1)> (hh1ED6,op1_e3_l_521B5);
          real _t21B3#2 = λ(T0[])<Sqrt(T0)> (op1_e3_l_621B6);
          bool _t21BB#1 = GT<real>(_t21B3,rad1ECA);
          if _t21BB then goto ASSIGN23B3 else goto JOIN21D8
        ASSIGN23B3:  preds = [COND21BD]
          real op1_e3_l_1021C3#2 = λ(T0[],T1[])<(T0) / ( T1)> (rad1ECA,_t21B3);
          real hh21BE#1 = λ(T0[],T1[])<(T0 * T1)> (hh1ED6,op1_e3_l_1021C3);
          tensor[3] es21CA#1 = λ(T0[],T1[],T2[3])<(T0 * T1 * T2_{i0})>_{3} (hh1ED6,op1_e3_l_1021C3,op1_e3_l_321B0);
          goto JOIN21D8
        JOIN21D8:  preds = [ASSIGN23B4,COND21BD]
          tensor[3] es21D6#5 = phi(es21CA,es21AF)
          real hh21D7#2 = phi(hh21BE,hh1ED6)
          tensor[3] samplePos21D9#1 = λ(T0[3],T1[3],T2[3])<(T0_{i0} + T1_{i0} + T2_{i0})>_{3} (pos1ED4,_t2063,es21D6);
          tensor[3] fs21DB#3 = fStep1F85 (samplePos21D9);
          real op1_e3_l_221DE#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (fs21DB);
          real op1_e3_l_321DF#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (es21D6);
          real op1_e3_l_421E0#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_221DE);
          real op1_e3_l_521E1#2 = λ(T0[])<Sqrt(T0)> (op1_e3_l_321DF);
          real _t21DD#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_421E0,op1_e3_l_521E1);
          real _t21E7#5 = 0.5e0;
          bool _t21E9#1 = GT<real>(_t21DD,_t21E7);
          if _t21E9 then goto ASSIGN21ED else goto JOIN21F5
        ASSIGN21ED:  preds = [COND21EB]
          real hh21EC#1 = λ(T0[],T1[])<(T0 * T1)> (hh21D7,_t21E7);
          self.pos = pos2065;
          self._pos = pos2065;
          self.hh = hh21EC;
          self.step = step2076;
          self.steps = steps1EE2;
          active
          goto JOIN21F5
        JOIN21F5:  preds = [*ACTIVE21F3,COND21EB]
          real hh21F4#2 = phi(hh21D7)
          tensor[3] up2043#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (fs21DB,es21D6);
          tensor[3] pos21F7#4 = λ(T0[3],T1[3],T2[3],T3[3])<(T0_{i0} + T1_{i0} + T2_{i0} + T3_{i0})>_{3} (pos1ED4,_t2063,fs21DB,es21D6);
          particle[] _t21F9#1 = SphereQuery<3,particle>(pos21F7,rad1ECA);
        FOREACH21FC:  preds = [ASSIGN21FA,NEXT2212]
          foreach (P21FB in _t21F9) on exit goto ASSIGN2214
            real accum2202#2 = phi(_t1EE4,accum2201)
          tensor[3] _t21FD#1 = P21FB.pos;
          real _t21FF#1 = 0.1e1;
          tensor[3] op1_e3_l_102204#2 = λ(T0[3],T1[3])<(T1_{i0}) - (T0_{i0})>_{3} (_t21FD,pos21F7);
          real op1_e3_l_122205#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_102204,op1_e3_l_102204);
          real op1_e3_l_132206#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_122205);
          real op1_e3_l_142207#1 = λ(T0[],T1[])<(T1) / ( T0)> (rad1ECA,op1_e3_l_132206);
          real op1_e3_l_152208#1 = λ(T0[],T1[])<(T0) - (T1)> (_t21FF,op1_e3_l_142207);
          real op1_e3_l_162209#1 = λ(T0[])<(T0)^4> (op1_e3_l_152208);
          real accum2201#1 = λ(T0[],T1[])<(T0 + T1)> (accum2202,op1_e3_l_162209);
          goto FOREACH21FC
        ASSIGN2214:  preds = [FOREACH21FC]
          real _t2213#1 = λ(T0[],T1[])<(T0) - (T1)> (accum2202,oldE2083);
          tensor[3] op1_e3_l_122219#1 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (pos21F7,pos2065);
          tensor[3] op1_e3_l_13221A#1 = λ(T0[3])<Neg(T0_{i0})>_{3} (op1_e3_l_321B0);
          real op1_e3_l_14221B#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_122219,op1_e3_l_13221A);
          real _t2215#1 = λ(T0[],T1[])<(T0 * T1)> (_t21E7,op1_e3_l_14221B);
          bool _t2223#1 = GT<real>(_t2213,_t2215);
          if _t2223 then goto ASSIGN2227 else goto JOIN222F
        ASSIGN2227:  preds = [COND2225]
          real hh2226#1 = λ(T0[],T1[])<(T0 * T1)> (hh21F4,_t21E7);
          self.pos = pos2065;
          self._pos = pos2065;
          self.hh = hh2226;
          self.step = step2076;
          self.steps = steps1EE2;
          active
          goto JOIN222F
        JOIN222F:  preds = [*ACTIVE222D,COND2225]
          real hh222E#1 = phi(hh21F4)
          tensor[3] pos2047#5 = phi(pos21F7)
          real _t2230#1 = 0.11e1;
          real hh2045#2 = λ(T0[],T1[])<(T0 * T1)> (hh222E,_t2230);
          real _t2233#2 = TensorIndex<tensor[3],[0]>(pos2047);
          bool _t2235#1 = EQ<real>(_t2233,_t2233);
          bool _t2237#1 = BNot(_t2235);
          if _t2237 then goto ASSIGN223B else goto ASSIGN2305
        ASSIGN223B:  preds = [COND2239]
          bool _t223A#1 = true;
          goto JOIN223E
        JOIN223E:  preds = [ASSIGN223B,JOIN230E]
          bool _t223C#1 = phi(_t223A,_t223D)
          if _t223C then goto DIE2240 else goto JOIN2241
        DIE2240:  preds = [COND223F]
          die
          goto JOIN2241
        JOIN2241:  preds = [*DIE2240,COND223F]
          int _t2242#1 = 5;
          bool _t2244#1 = LT<int>(nn20AF,_t2242);
          if _t2244 then goto ASSIGN23B7 else goto JOIN22EF
        ASSIGN23B7:  preds = [COND2246]
          real op1_e3_l_7224A#1 = λ(T0[])<(1) / ( T0)> (op1_e3_l_521E1);
          tensor[3] op1_e3_l_8224B#1 = λ(T0[],T1[],T2[3],T3[])<(T0 * T1 * T2_{i0} * T3)>_{3} (_t21E7,rad1ECA,es21D6,op1_e3_l_7224A);
          tensor[3] npos2247#7 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos2047,op1_e3_l_8224B);
          tensor[3] mid2251#3 = λ(T0[3],T1[3])<(T1_{i0}) - (T0_{i0})>_{3} (_t1EE6,npos2247);
          real _t225D#1 = TensorIndex<tensor[3],[0]>(mid2251);
          real _t225F#1 = λ(T0[])<Abs(T0)> (_t225D);
          bool _t2261#1 = LTE<real>(_t225F,_t1EEE);
          if _t2261 then goto ASSIGN2265 else goto ASSIGN2303
        ASSIGN2265:  preds = [COND2263]
          real _t2264#1 = TensorIndex<tensor[3],[1]>(mid2251);
          real _t2266#1 = λ(T0[])<Abs(T0)> (_t2264);
          bool _t2268#1 = LTE<real>(_t2266,_t1EEE);
          if _t2268 then goto ASSIGN226C else goto ASSIGN2302
        ASSIGN226C:  preds = [COND226A]
          real _t226B#1 = TensorIndex<tensor[3],[2]>(mid2251);
          real _t226D#1 = λ(T0[])<Abs(T0)> (_t226B);
          bool _t226F#1 = LTE<real>(_t226D,_t1EEE);
          goto JOIN2273
        JOIN2273:  preds = [ASSIGN2270,ASSIGN2302]
          bool _t2271#1 = phi(_t226F,_t2272)
          goto JOIN2276
        JOIN2276:  preds = [JOIN2273,ASSIGN2303]
          bool _t2274#1 = phi(_t2271,_t2275)
          if _t2274 then goto ASSIGN2279 else goto ASSIGN2301
        ASSIGN2279:  preds = [COND2277]
          real _t2278#6 = TensorIndex<tensor[3],[0]>(npos2247);
          bool _t227A#1 = EQ<real>(_t2278,_t2278);
          bool _t227C#1 = BNot(_t227A);
          if _t227C then goto ASSIGN2280 else goto ASSIGN22F2
        ASSIGN2280:  preds = [COND227E]
          bool _t227F#1 = true;
          goto JOIN2283
        JOIN2283:  preds = [ASSIGN2280,JOIN22FB]
          bool _t2281#1 = phi(_t227F,_t2282)
          bool _t2284#1 = BNot(_t2281);
          if _t2284 then goto ASSIGN2288 else goto ASSIGN22F0
        ASSIGN2288:  preds = [COND2286]
          real y2287#1 = TensorIndex<tensor[3],[1]>(npos2247);
          real z2289#1 = TensorIndex<tensor[3],[2]>(npos2247);
          real _t228B#9 = 0.2e1;
          real _t228D#1 = 0.3e1;
          real _t228F#1 = 0.12e2;
          real op1_e3_l_102292#1 = λ(T0[])<(T0)^2> (_t2278);
          real op1_e3_l_112293#1 = λ(T0[],T1[])<(T0 * T1)> (_t228D,op1_e3_l_102292);
          real op1_e3_l_122294#3 = λ(T0[],T1[])<(T0) - (T1)> (_t228B,op1_e3_l_112293);
          real op1_e3_l_132295#1 = λ(T0[])<(T0)^2> (op1_e3_l_122294);
          real op1_e3_l_142296#1 = λ(T0[])<(T0)^3> (_t2278);
          real op1_e3_l_152297#1 = λ(T0[])<Neg(T0)> (op1_e3_l_142296);
          real op1_e3_l_162298#1 = λ(T0[],T1[])<(T0 * T1)> (_t228B,_t2278);
          real op1_e3_l_172299#3 = λ(T0[],T1[],T2[])<(T1 + T2 + T0)> (y2287,op1_e3_l_152297,op1_e3_l_162298);
          real op1_e3_l_18229A#1 = λ(T0[],T1[])<(T0 * T1)> (_t228B,op1_e3_l_132295);
          real op1_e3_l_19229B#1 = λ(T0[],T1[],T2[])<(T1 * T0 * T2)> (_t2278,_t228F,op1_e3_l_172299);
          real _t2291#1 = λ(T0[],T1[])<(T0) - (T1)> (op1_e3_l_18229A,op1_e3_l_19229B);
          real _t22A7#2 = λ(T0[],T1[])<(T0 * T1)> (_t228B,op1_e3_l_122294);
          tensor[3] _t22AF#1 = <tensor[3]>[_t2291,_t22A7,_t1EE4];
          tensor[3] _t22B1#1 = <tensor[3]>[_t22A7,_t228B,_t1EE4];
          real _t22B3#1 = λ(T0[],T1[])<(T0 * T1)> (_t228B,zfuz1ED2);
          tensor[3] _t22B5#1 = <tensor[3]>[_t1EE4,_t1EE4,_t22B3];
          tensor[3,3] H22B7#1 = <tensor[3,3]>[_t22AF,_t22B1,_t22B5];
          real _t22B9#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t228B,op1_e3_l_122294,op1_e3_l_172299);
          real _t22C9#1 = λ(T0[],T1[])<(T0 * T1)> (_t228B,op1_e3_l_172299);
          real _t22D3#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t228B,zfuz1ED2,z2289);
          tensor[3] g22D5#1 = <tensor[3]>[_t22B9,_t22C9,_t22D3];
          real[3] _t22D7#1 = EigenVals3x3(H22B7);
          real _t22DA#1 = Subscript<real[3]>(_t22D7,nn2078);
          real op1_e3_l_322DD#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (g22D5);
          real op1_e3_l_422DE#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_322DD);
          real op1_e3_l_522DF#1 = λ(T0[],T1[])<(T0 + T1)> (fBias1ECE,op1_e3_l_422DE);
          real _t22DC#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t22DA,op1_e3_l_522DF);
          bool _t22E4#1 = GTE<real>(_t22DC,fStren1ED0);
          goto JOIN22E8
        JOIN22E8:  preds = [ASSIGN22E5,ASSIGN22F0]
          bool _t22E6#1 = phi(_t22E4,_t22E7)
          goto JOIN22EB
        JOIN22EB:  preds = [JOIN22E8,ASSIGN2301]
          bool _t22E9#1 = phi(_t22E6,_t22EA)
          if _t22E9 then goto NEW22ED else goto JOIN22EE
        NEW22ED:  preds = [COND22EC]
          new particle(npos2247,hh2045);
          goto JOIN22EE
        JOIN22EE:  preds = [NEW22ED,COND22EC]
          goto JOIN22EF
        JOIN22EF:  preds = [JOIN22EE,COND2246]
          goto JOIN2048
        ASSIGN22F0:  preds = [COND2286]
          bool _t22E7#1 = false;
          goto JOIN22E8
        ASSIGN22F2:  preds = [COND227E]
          real _t22F1#2 = TensorIndex<tensor[3],[1]>(npos2247);
          bool _t22F3#1 = EQ<real>(_t22F1,_t22F1);
          bool _t22F5#1 = BNot(_t22F3);
          if _t22F5 then goto ASSIGN22F9 else goto ASSIGN22FD
        ASSIGN22F9:  preds = [COND22F7]
          bool _t22F8#1 = true;
          goto JOIN22FB
        JOIN22FB:  preds = [ASSIGN22F9,ASSIGN2300]
          bool _t2282#1 = phi(_t22F8,_t22FA)
          goto JOIN2283
        ASSIGN22FD:  preds = [COND22F7]
          real _t22FC#2 = TensorIndex<tensor[3],[2]>(npos2247);
          bool _t22FE#1 = EQ<real>(_t22FC,_t22FC);
          bool _t22FA#1 = BNot(_t22FE);
          goto JOIN22FB
        ASSIGN2301:  preds = [COND2277]
          bool _t22EA#1 = false;
          goto JOIN22EB
        ASSIGN2302:  preds = [COND226A]
          bool _t2272#1 = false;
          goto JOIN2273
        ASSIGN2303:  preds = [COND2263]
          bool _t2275#1 = false;
          goto JOIN2276
        ASSIGN2305:  preds = [COND2239]
          real _t2304#2 = TensorIndex<tensor[3],[1]>(pos2047);
          bool _t2306#1 = EQ<real>(_t2304,_t2304);
          bool _t2308#1 = BNot(_t2306);
          if _t2308 then goto ASSIGN230C else goto ASSIGN2310
        ASSIGN230C:  preds = [COND230A]
          bool _t230B#1 = true;
          goto JOIN230E
        JOIN230E:  preds = [ASSIGN230C,ASSIGN2313]
          bool _t223D#1 = phi(_t230B,_t230D)
          goto JOIN223E
        ASSIGN2310:  preds = [COND230A]
          real _t230F#2 = TensorIndex<tensor[3],[2]>(pos2047);
          bool _t2311#1 = EQ<real>(_t230F,_t230F);
          bool _t230D#1 = BNot(_t2311);
          goto JOIN230E
        ASSIGN2314:  preds = [COND20EA]
          bool _t214B#1 = false;
          goto JOIN214C
        ASSIGN2316:  preds = [COND20E2]
          real _t2315#2 = TensorIndex<tensor[3],[1]>(npos20BB);
          bool _t2317#1 = EQ<real>(_t2315,_t2315);
          bool _t2319#1 = BNot(_t2317);
          if _t2319 then goto ASSIGN231D else goto ASSIGN2321
        ASSIGN231D:  preds = [COND231B]
          bool _t231C#1 = true;
          goto JOIN231F
        JOIN231F:  preds = [ASSIGN231D,ASSIGN2324]
          bool _t20E6#1 = phi(_t231C,_t231E)
          goto JOIN20E7
        ASSIGN2321:  preds = [COND231B]
          real _t2320#2 = TensorIndex<tensor[3],[2]>(npos20BB);
          bool _t2322#1 = EQ<real>(_t2320,_t2320);
          bool _t231E#1 = BNot(_t2322);
          goto JOIN231F
        ASSIGN2325:  preds = [COND20DB]
          bool _t214E#1 = false;
          goto JOIN214F
        ASSIGN2326:  preds = [COND20CE]
          bool _t20D6#1 = false;
          goto JOIN20D7
        ASSIGN2327:  preds = [COND20C7]
          bool _t20D9#1 = false;
          goto JOIN20DA
        ASSIGN2329:  preds = [COND206D]
          real _t2328#2 = TensorIndex<tensor[3],[1]>(pos2065);
          bool _t232A#1 = EQ<real>(_t2328,_t2328);
          bool _t232C#1 = BNot(_t232A);
          if _t232C then goto ASSIGN2330 else goto ASSIGN2334
        ASSIGN2330:  preds = [COND232E]
          bool _t232F#1 = true;
          goto JOIN2332
        JOIN2332:  preds = [ASSIGN2330,ASSIGN2337]
          bool _t2071#1 = phi(_t232F,_t2331)
          goto JOIN2072
        ASSIGN2334:  preds = [COND232E]
          real _t2333#2 = TensorIndex<tensor[3],[2]>(pos2065);
          bool _t2335#1 = EQ<real>(_t2333,_t2333);
          bool _t2331#1 = BNot(_t2335);
          goto JOIN2332
        ASSIGN2338:  preds = [COND1F15]
          bool _t1F78#1 = false;
          goto JOIN1F79
        ASSIGN233A:  preds = [COND1F0D]
          real _t2339#2 = TensorIndex<tensor[3],[1]>(pos1ED4);
          bool _t233B#1 = EQ<real>(_t2339,_t2339);
          bool _t233D#1 = BNot(_t233B);
          if _t233D then goto ASSIGN2341 else goto ASSIGN2345
        ASSIGN2341:  preds = [COND233F]
          bool _t2340#1 = true;
          goto JOIN2343
        JOIN2343:  preds = [ASSIGN2341,ASSIGN2348]
          bool _t1F11#1 = phi(_t2340,_t2342)
          goto JOIN1F12
        ASSIGN2345:  preds = [COND233F]
          real _t2344#2 = TensorIndex<tensor[3],[2]>(pos1ED4);
          bool _t2346#1 = EQ<real>(_t2344,_t2344);
          bool _t2342#1 = BNot(_t2346);
          goto JOIN2343
        ASSIGN2349:  preds = [COND1F06]
          bool _t1F7B#1 = false;
          goto JOIN1F7C
        ASSIGN234A:  preds = [COND1EF9]
          bool _t1F01#1 = false;
          goto JOIN1F02
        ASSIGN234B:  preds = [COND1EF2]
          bool _t1F04#1 = false;
          goto JOIN1F05
    end update
  end particle
## initial strand creation
  COLLECTION
    ENTRY234C:  preds = []
      tensor[3][] ipos234D#1 = globals.ipos1E86;
    FOREACH2350:  preds = [ASSIGN234E,NEXT2354]
      foreach (x234F in ipos234D) on exit goto RETURN2355
      real _t2351#1 = 0.1e1;
      new particle(x234F,_t2351);
      goto FOREACH2350
    RETURN2355:  preds = [FOREACH2350]
      return
## global update
  ENTRY2356:  preds = []
    real rad2357#1 = globals.rad1E80;
    real eps2359#1 = globals.eps1E81;
    particle[] P235B#5 = Strands<particle,all>;
    (int res2363#1) = sum<int>(MAP sum235D (P235B));
    (int res236B#1) = max<int>(MAP max2365 (P235B));
    (int res2373#1) = sum<int>(MAP sum236D (P235B));
    (bool res237B#2) = all(MAP all2375 (P235B));
    (real res2387#1) = max<real>(MAP max237D (P235B));
    string _t2389#1 = "One run:";
    string _t238B#3 = " and ";
    real _t238D#2 = λ(T0[],T1[])<(T0) / ( T1)> (res2387,rad2357);
    bool _t238F#2 = LT<real>(_t238D,eps2359);
    string _t2391#1 = " of ";
    string _t2393#1 = "\n";
    Print<[string,bool,string,real,string,bool,string,int,string,int,string]>(_t2389,res237B,_t238B,_t238D,_t238B,_t238F,_t238B,res2373,_t2391,res2363,_t2393);
    if res237B then goto COND2397 else goto JOIN239D
  COND2397:  preds = [COND2396]
    if _t238F then goto ASSIGN2399 else goto JOIN239C
  ASSIGN2399:  preds = [COND2397]
    string _t2398#1 = "CONVERGED!\n";
    Print<[string]>(_t2398);
    StabilizeAll;
    goto JOIN239C
  JOIN239C:  preds = [MASSIGN239B,COND2397]
    goto JOIN239D
  JOIN239D:  preds = [JOIN239C,COND2396]
    int _t239E#1 = 5000;
    bool _t23A0#1 = GT<int>(res236B,_t239E);
    if _t23A0 then goto MASSIGN23A3 else goto JOIN23A4
  MASSIGN23A3:  preds = [COND23A2]
    StabilizeAll;
    goto JOIN23A4
  JOIN23A4:  preds = [MASSIGN23A3,COND23A2]
    continue
#### end program ####
##### mid-ir: after border control ####
## properties
  GlobalInit StabilizeAll GlobalReduce StrandSets GlobalUpdate NewStrands StrandCommunication StrandsMayDie HasInputs HasGlobals ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
## globals
  input meshData1E7D (meshData) = <no-default>
  input 0space0853_intermedateGlobal1E7E (space) = <no-default>
  input 0data0855_intermedateGlobal1E7F (data) = <no-default>
  input rad1E80 (rad) = <default>
  input eps1E81 (eps) = <default>
  input v01E82 (v0) = <default>
  input fBias1E83 (fBias) = <default>
  input fStren1E84 (fStren) = <default>
  input zfuz1E85 (zfuz) = <default>
  input ipos1E86 (ipos) = <no-default>
## functions
  function tensor[3] fStep1F85 (tensor[3] s1F86#3) {
    ENTRY1F87:  preds = []
      real zfuz1F88#2 = globals.zfuz1E85;
      real x1F8A#4 = TensorIndex<tensor[3],[0]>(s1F86);
      real y1F8C#1 = TensorIndex<tensor[3],[1]>(s1F86);
      real z1F8E#1 = TensorIndex<tensor[3],[2]>(s1F86);
      real _t1F90#9 = 0.2e1;
      real _t1F92#1 = 0.3e1;
      real _t1F94#1 = 0.12e2;
      real op1_e3_l_101F97#1 = λ(T0[])<(T0)^2> (x1F8A);
      real op1_e3_l_111F98#1 = λ(T0[],T1[])<(T0 * T1)> (_t1F92,op1_e3_l_101F97);
      real op1_e3_l_121F99#3 = λ(T0[],T1[])<(T0) - (T1)> (_t1F90,op1_e3_l_111F98);
      real op1_e3_l_131F9A#1 = λ(T0[])<(T0)^2> (op1_e3_l_121F99);
      real op1_e3_l_141F9B#1 = λ(T0[])<(T0)^3> (x1F8A);
      real op1_e3_l_151F9C#1 = λ(T0[])<Neg(T0)> (op1_e3_l_141F9B);
      real op1_e3_l_161F9D#1 = λ(T0[],T1[])<(T0 * T1)> (_t1F90,x1F8A);
      real op1_e3_l_171F9E#3 = λ(T0[],T1[],T2[])<(T1 + T2 + T0)> (y1F8C,op1_e3_l_151F9C,op1_e3_l_161F9D);
      real op1_e3_l_181F9F#1 = λ(T0[],T1[])<(T0 * T1)> (_t1F90,op1_e3_l_131F9A);
      real op1_e3_l_191FA0#1 = λ(T0[],T1[],T2[])<(T1 * T0 * T2)> (x1F8A,_t1F94,op1_e3_l_171F9E);
      real _t1F96#1 = λ(T0[],T1[])<(T0) - (T1)> (op1_e3_l_181F9F,op1_e3_l_191FA0);
      real _t1FAC#2 = λ(T0[],T1[])<(T0 * T1)> (_t1F90,op1_e3_l_121F99);
      real _t1FB4#4 = 0.e0;
      tensor[3] _t1FB6#1 = <tensor[3]>[_t1F96,_t1FAC,_t1FB4];
      tensor[3] _t1FB8#1 = <tensor[3]>[_t1FAC,_t1F90,_t1FB4];
      real _t1FBA#1 = λ(T0[],T1[])<(T0 * T1)> (_t1F90,zfuz1F88);
      tensor[3] _t1FBC#1 = <tensor[3]>[_t1FB4,_t1FB4,_t1FBA];
      tensor[3,3] H1FBE#1 = <tensor[3,3]>[_t1FB6,_t1FB8,_t1FBC];
      real _t1FC0#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1F90,op1_e3_l_121F99,op1_e3_l_171F9E);
      real _t1FD0#1 = λ(T0[],T1[])<(T0 * T1)> (_t1F90,op1_e3_l_171F9E);
      real _t1FDA#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1F90,zfuz1F88,z1F8E);
      tensor[3] g1FDC#1 = <tensor[3]>[_t1FC0,_t1FD0,_t1FDA];
      (real[3] evals1FDE#1,tensor[3][3] E1FDF#1) = EigenVecs3x3(H1FBE);
      real _t1FE1#1 = 0.1e1;
      int _t1FE3#2 = 0;
      real _t1FE5#1 = Subscript<real[3]>(evals1FDE,_t1FE3);
      tensor[3] _t1FE7#2 = Subscript<tensor[3][3]>(E1FDF,_t1FE3);
      real op1_e3_l_51FEA#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t1FE1,_t1FE5);
      real op1_e3_l_61FEB#1 = λ(T0[])<Neg(T0)> (op1_e3_l_51FEA);
      real op1_e3_l_71FEC#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (_t1FE7,g1FDC);
      tensor[3] up1FE9#4 = λ(T0[3],T1[],T2[])<(T1 * T0_{i0} * T2)>_{3} (_t1FE7,op1_e3_l_61FEB,op1_e3_l_71FEC);
      real _t1FF1#2 = TensorIndex<tensor[3],[0]>(up1FE9);
      bool _t1FF3#1 = EQ<real>(_t1FF1,_t1FF1);
      bool _t1FF5#1 = BNot(_t1FF3);
      if _t1FF5 then goto ASSIGN1FF9 else goto ASSIGN2006
    ASSIGN1FF9:  preds = [COND1FF7]
      bool _t1FF8#1 = true;
      goto JOIN1FFC
    JOIN1FFC:  preds = [ASSIGN1FF9,JOIN200F]
      bool _t1FFA#1 = phi(_t1FF8,_t1FFB)
      if _t1FFA then goto ASSIGN1FFF else goto JOIN2003
    ASSIGN1FFF:  preds = [COND1FFD]
      real _t1FFE#3 = +inf;
      tensor[3] _t2000#1 = <tensor[3]>[_t1FFE,_t1FFE,_t1FFE];
      return _t2000
      goto JOIN2003
    JOIN2003:  preds = [*RETURN(_t2000)2002,COND1FFD]
      return up1FE9
    ASSIGN2006:  preds = [COND1FF7]
      real _t2005#2 = TensorIndex<tensor[3],[1]>(up1FE9);
      bool _t2007#1 = EQ<real>(_t2005,_t2005);
      bool _t2009#1 = BNot(_t2007);
      if _t2009 then goto ASSIGN200D else goto ASSIGN2011
    ASSIGN200D:  preds = [COND200B]
      bool _t200C#1 = true;
      goto JOIN200F
    JOIN200F:  preds = [ASSIGN200D,ASSIGN2014]
      bool _t1FFB#1 = phi(_t200C,_t200E)
      goto JOIN1FFC
    ASSIGN2011:  preds = [COND200B]
      real _t2010#2 = TensorIndex<tensor[3],[2]>(up1FE9);
      bool _t2012#1 = EQ<real>(_t2010,_t2010);
      bool _t200E#1 = BNot(_t2012);
      goto JOIN200F
}
  function tensor[3,3] fPerp2159 (tensor[3] s215A#2) {
    ENTRY215B:  preds = []
      real zfuz215C#1 = globals.zfuz1E85;
      real x215E#4 = TensorIndex<tensor[3],[0]>(s215A);
      real y2160#1 = TensorIndex<tensor[3],[1]>(s215A);
      real _t2162#6 = 0.2e1;
      real _t2164#1 = 0.3e1;
      real _t2166#1 = 0.12e2;
      real op1_e3_l_102169#1 = λ(T0[])<(T0)^2> (x215E);
      real op1_e3_l_11216A#1 = λ(T0[],T1[])<(T0 * T1)> (_t2164,op1_e3_l_102169);
      real op1_e3_l_12216B#2 = λ(T0[],T1[])<(T0) - (T1)> (_t2162,op1_e3_l_11216A);
      real op1_e3_l_13216C#1 = λ(T0[])<(T0)^2> (op1_e3_l_12216B);
      real op1_e3_l_14216D#1 = λ(T0[])<(T0)^3> (x215E);
      real op1_e3_l_15216E#1 = λ(T0[])<Neg(T0)> (op1_e3_l_14216D);
      real op1_e3_l_16216F#1 = λ(T0[],T1[])<(T0 * T1)> (_t2162,x215E);
      real op1_e3_l_172170#1 = λ(T0[],T1[],T2[])<(T1 + T2 + T0)> (y2160,op1_e3_l_15216E,op1_e3_l_16216F);
      real op1_e3_l_182171#1 = λ(T0[],T1[])<(T0 * T1)> (_t2162,op1_e3_l_13216C);
      real op1_e3_l_192172#1 = λ(T0[],T1[],T2[])<(T1 * T0 * T2)> (x215E,_t2166,op1_e3_l_172170);
      real _t2168#1 = λ(T0[],T1[])<(T0) - (T1)> (op1_e3_l_182171,op1_e3_l_192172);
      real _t217E#2 = λ(T0[],T1[])<(T0 * T1)> (_t2162,op1_e3_l_12216B);
      real _t2186#4 = 0.e0;
      tensor[3] _t2188#1 = <tensor[3]>[_t2168,_t217E,_t2186];
      tensor[3] _t218A#1 = <tensor[3]>[_t217E,_t2162,_t2186];
      real _t218C#1 = λ(T0[],T1[])<(T0 * T1)> (_t2162,zfuz215C);
      tensor[3] _t218E#1 = <tensor[3]>[_t2186,_t2186,_t218C];
      tensor[3,3] H2190#1 = <tensor[3,3]>[_t2188,_t218A,_t218E];
      (real[3] evals2192#0,tensor[3][3] _t2193#1) = EigenVecs3x3(H2190);
      int _t2195#1 = 0;
      tensor[3] E22197#1 = Subscript<tensor[3][3]>(_t2193,_t2195);
      tensor[3,3] op1_e3_l_2219A#1 = λ(T0[3])<(T0_{i0} * T0_{i1})>_{3 3} (E22197);
      tensor[3,3] m2199#3 = λ(T0[3 3])<(δ_{i0,i1}) - (T0_{i0,i1})>_{3 3} (op1_e3_l_2219A);
      real t219D#2 = λ(T0[3 3],T1[3 3])<Σ(i0=0..2)(i1=0..2)<((T0_{i0,i1} * T1_{i0,i1}))>(i0=0..2)(i1=0..2)> (m2199,m2199);
      bool _t21A3#1 = EQ<real>(t219D,t219D);
      bool _t21A5#1 = BNot(_t21A3);
      if _t21A5 then goto ASSIGN21A9 else goto JOIN21AB
    ASSIGN21A9:  preds = [COND21A7]
      tensor[3,3] _t21A8#1 = λ()<Z_{i0,i1}>_{3 3} ();
      return _t21A8
      goto JOIN21AB
    JOIN21AB:  preds = [*RETURN(_t21A8)21AA,COND21A7]
      return m2199
}
  function int sum235D (particle P235E#1) {
    ENTRY235F:  preds = []
      int _t2360#1 = P235E.test;
      return _t2360
}
  function int max2365 (particle P2366#1) {
    ENTRY2367:  preds = []
      int _t2368#1 = P2366.steps;
      return _t2368
}
  function int sum236D (particle P236E#1) {
    ENTRY236F:  preds = []
      int _t2370#1 = P236E.testp;
      return _t2370
}
  function bool all2375 (particle P2376#1) {
    ENTRY2377:  preds = []
      bool _t2378#1 = P2376.found;
      return _t2378
}
  function real max237D (particle P237E#1) {
    ENTRY237F:  preds = []
      tensor[3] _t2380#1 = P237E.step;
      real op1_e3_l_12383#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (_t2380);
      real _t2382#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_12383);
      return _t2382
}
## input initialization
  ENTRY1E87:  preds = []
    real rad1E88#5 = 0.1e-1;
    globals.rad1E80 = rad1E88;
    globals.eps1E81 = rad1E88;
    real v01E8C#1 = 0.625e-1;
    globals.v01E82 = v01E8C;
    globals.fBias1E83 = rad1E88;
    globals.fStren1E84 = rad1E88;
    globals.zfuz1E85 = rad1E88;
    return
## global-variable initialization
  ENTRY1E93:  preds = []
    femData:Mesh meshData1E94#2 = globals.meshData1E7D;
    int _t1E96#1 = 0;
    int _t1E98#1 = 1;
    int _t1E9A#1 = ExtractFemItem<int,NumCell(Mesh)>(meshData1E94);
    int _t1E9C#1 = ISub(_t1E9A,_t1E98);
    int[] _t1E9E#1 = Range(_t1E96,_t1E9C);
    femData:MeshCell[] _t1EA0#1 = <femData:MeshCell[]>{};
  FOREACH1EA3:  preds = [ASSIGN1EA1,NEXT1EA9]
    foreach (_t1EA2 in _t1E9E) on exit goto RETURN1EAA
      femData:MeshCell[] _t1EA7#1 = phi(_t1EA0,_t1EA6)
    femData:MeshCell _t1EA4#1 = LoadFem<femData:MeshCell>(meshData1E94,_t1EA2);
    femData:MeshCell[] _t1EA6#1 = Append<femData:MeshCell>(_t1EA7,_t1EA4);
    goto FOREACH1EA3
  RETURN1EAA:  preds = [FOREACH1EA3]
    return
## strand
  strand particle (tensor[3] pos01EAB#2, real hh01EAC#1) in 3D
    state:
      output tensor[3] pos;
      output tensor[3] _pos;
      real hh;
      tensor[3] step;
      bool found;
      int nfs;
      int test;
      int testp;
      int steps;
    state init
      ENTRY1EB6:  preds = []
        tensor[3] step1EB7#1 = λ()<Z_{i0}>_{3} ();
        bool found1EB9#1 = false;
        int nfs1EBB#3 = 0;
        int test1EBD#1 = 1;
        self.pos = pos01EAB;
        self._pos = pos01EAB;
        self.hh = hh01EAC;
        self.step = step1EB7;
        self.found = found1EB9;
        self.nfs = nfs1EBB;
        self.test = test1EBD;
        self.testp = nfs1EBB;
        self.steps = nfs1EBB;
        return
    end state init
    method update
        ENTRY1EC9:  preds = []
          real rad1ECA#10 = globals.rad1E80;
          real eps1ECC#1 = globals.eps1E81;
          real fBias1ECE#3 = globals.fBias1E83;
          real fStren1ED0#3 = globals.fStren1E84;
          real zfuz1ED2#6 = globals.zfuz1E85;
          tensor[3] pos1ED4#13 = self.pos;
          real hh1ED6#7 = self.hh;
          bool found1ED8#3 = self.found;
          int nfs1EDA#3 = self.nfs;
          int testp1EDC#2 = self.testp;
          int steps1EDE#1 = self.steps;
          int _t1EE0#4 = 1;
          int steps1EE2#4 = IAdd(steps1EDE,_t1EE0);
          real _t1EE4#19 = 0.e0;
          tensor[3] _t1EE6#3 = <tensor[3]>[_t1EE4,_t1EE4,_t1EE4];
          tensor[3] mid1EE8#3 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (pos1ED4,_t1EE6);
          real _t1EEA#1 = TensorIndex<tensor[3],[0]>(mid1EE8);
          real _t1EEC#1 = λ(T0[])<Abs(T0)> (_t1EEA);
          real _t1EEE#9 = 0.4e1;
          bool _t1EF0#1 = LTE<real>(_t1EEC,_t1EEE);
          if _t1EF0 then goto ASSIGN1EF4 else goto ASSIGN234B
        ASSIGN1EF4:  preds = [COND1EF2]
          real _t1EF3#1 = TensorIndex<tensor[3],[1]>(mid1EE8);
          real _t1EF5#1 = λ(T0[])<Abs(T0)> (_t1EF3);
          bool _t1EF7#1 = LTE<real>(_t1EF5,_t1EEE);
          if _t1EF7 then goto ASSIGN1EFB else goto ASSIGN234A
        ASSIGN1EFB:  preds = [COND1EF9]
          real _t1EFA#1 = TensorIndex<tensor[3],[2]>(mid1EE8);
          real _t1EFC#1 = λ(T0[])<Abs(T0)> (_t1EFA);
          bool _t1EFE#1 = LTE<real>(_t1EFC,_t1EEE);
          goto JOIN1F02
        JOIN1F02:  preds = [ASSIGN1EFF,ASSIGN234A]
          bool _t1F00#1 = phi(_t1EFE,_t1F01)
          goto JOIN1F05
        JOIN1F05:  preds = [JOIN1F02,ASSIGN234B]
          bool _t1F03#1 = phi(_t1F00,_t1F04)
          if _t1F03 then goto ASSIGN1F08 else goto ASSIGN2349
        ASSIGN1F08:  preds = [COND1F06]
          real _t1F07#6 = TensorIndex<tensor[3],[0]>(pos1ED4);
          bool _t1F09#1 = EQ<real>(_t1F07,_t1F07);
          bool _t1F0B#1 = BNot(_t1F09);
          if _t1F0B then goto ASSIGN1F0F else goto ASSIGN233A
        ASSIGN1F0F:  preds = [COND1F0D]
          bool _t1F0E#1 = true;
          goto JOIN1F12
        JOIN1F12:  preds = [ASSIGN1F0F,JOIN2343]
          bool _t1F10#1 = phi(_t1F0E,_t1F11)
          bool _t1F13#1 = BNot(_t1F10);
          if _t1F13 then goto ASSIGN1F17 else goto ASSIGN2338
        ASSIGN1F17:  preds = [COND1F15]
          real y1F16#1 = TensorIndex<tensor[3],[1]>(pos1ED4);
          real z1F18#1 = TensorIndex<tensor[3],[2]>(pos1ED4);
          real _t1F1A#9 = 0.2e1;
          real _t1F1C#1 = 0.3e1;
          real _t1F1E#1 = 0.12e2;
          real op1_e3_l_101F21#1 = λ(T0[])<(T0)^2> (_t1F07);
          real op1_e3_l_111F22#1 = λ(T0[],T1[])<(T0 * T1)> (_t1F1C,op1_e3_l_101F21);
          real op1_e3_l_121F23#3 = λ(T0[],T1[])<(T0) - (T1)> (_t1F1A,op1_e3_l_111F22);
          real op1_e3_l_131F24#1 = λ(T0[])<(T0)^2> (op1_e3_l_121F23);
          real op1_e3_l_141F25#1 = λ(T0[])<(T0)^3> (_t1F07);
          real op1_e3_l_151F26#1 = λ(T0[])<Neg(T0)> (op1_e3_l_141F25);
          real op1_e3_l_161F27#1 = λ(T0[],T1[])<(T0 * T1)> (_t1F1A,_t1F07);
          real op1_e3_l_171F28#3 = λ(T0[],T1[],T2[])<(T1 + T2 + T0)> (y1F16,op1_e3_l_151F26,op1_e3_l_161F27);
          real op1_e3_l_181F29#1 = λ(T0[],T1[])<(T0 * T1)> (_t1F1A,op1_e3_l_131F24);
          real op1_e3_l_191F2A#1 = λ(T0[],T1[],T2[])<(T1 * T0 * T2)> (_t1F07,_t1F1E,op1_e3_l_171F28);
          real _t1F20#1 = λ(T0[],T1[])<(T0) - (T1)> (op1_e3_l_181F29,op1_e3_l_191F2A);
          real _t1F36#2 = λ(T0[],T1[])<(T0 * T1)> (_t1F1A,op1_e3_l_121F23);
          tensor[3] _t1F3E#1 = <tensor[3]>[_t1F20,_t1F36,_t1EE4];
          tensor[3] _t1F40#1 = <tensor[3]>[_t1F36,_t1F1A,_t1EE4];
          real _t1F42#1 = λ(T0[],T1[])<(T0 * T1)> (_t1F1A,zfuz1ED2);
          tensor[3] _t1F44#1 = <tensor[3]>[_t1EE4,_t1EE4,_t1F42];
          tensor[3,3] H1F46#1 = <tensor[3,3]>[_t1F3E,_t1F40,_t1F44];
          real _t1F48#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1F1A,op1_e3_l_121F23,op1_e3_l_171F28);
          real _t1F58#1 = λ(T0[],T1[])<(T0 * T1)> (_t1F1A,op1_e3_l_171F28);
          real _t1F62#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1F1A,zfuz1ED2,z1F18);
          tensor[3] g1F64#1 = <tensor[3]>[_t1F48,_t1F58,_t1F62];
          real[3] _t1F66#1 = EigenVals3x3(H1F46);
          int _t1F69#1 = 0;
          real _t1F6B#1 = Subscript<real[3]>(_t1F66,_t1F69);
          real op1_e3_l_31F6E#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (g1F64);
          real op1_e3_l_41F6F#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_31F6E);
          real op1_e3_l_51F70#1 = λ(T0[],T1[])<(T0 + T1)> (fBias1ECE,op1_e3_l_41F6F);
          real _t1F6D#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t1F6B,op1_e3_l_51F70);
          bool _t1F75#1 = GTE<real>(_t1F6D,fStren1ED0);
          goto JOIN1F79
        JOIN1F79:  preds = [ASSIGN1F76,ASSIGN2338]
          bool _t1F77#1 = phi(_t1F75,_t1F78)
          goto JOIN1F7C
        JOIN1F7C:  preds = [JOIN1F79,ASSIGN2349]
          bool _t1F7A#1 = phi(_t1F77,_t1F7B)
          bool _t1F7D#1 = BNot(_t1F7A);
          if _t1F7D then goto DIE1F80 else goto JOIN1F81
        DIE1F80:  preds = [COND1F7F]
          die
          goto JOIN1F81
        JOIN1F81:  preds = [*DIE1F80,COND1F7F]
          bool _t1F82#1 = BNot(found1ED8);
          if _t1F82 then goto ASSIGN2016 else goto ASSIGN2064
        ASSIGN2016:  preds = [COND1F84]
          tensor[3] step2015#3 = fStep1F85 (pos1ED4);
          tensor[3] pos2017#4 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos1ED4,step2015);
          real _t2019#2 = TensorIndex<tensor[3],[0]>(pos2017);
          bool _t201B#1 = EQ<real>(_t2019,_t2019);
          bool _t201D#1 = BNot(_t201B);
          if _t201D then goto ASSIGN2021 else goto ASSIGN2054
        ASSIGN2021:  preds = [COND201F]
          bool _t2020#1 = true;
          goto JOIN2024
        JOIN2024:  preds = [ASSIGN2021,JOIN205D]
          bool _t2022#1 = phi(_t2020,_t2023)
          if _t2022 then goto DIE2026 else goto JOIN2027
        DIE2026:  preds = [COND2025]
          die
          goto JOIN2027
        JOIN2027:  preds = [*DIE2026,COND2025]
          real op1_e3_l_22029#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (step2015);
          real op1_e3_l_3202A#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_22029);
          real _t2028#1 = λ(T0[],T1[])<(T1) / ( T0)> (rad1ECA,op1_e3_l_3202A);
          bool _t202E#1 = GT<real>(_t2028,eps1ECC);
          if _t202E then goto ASSIGN2032 else goto ASSIGN2052
        ASSIGN2032:  preds = [COND2030]
          int nfs2031#2 = IAdd(nfs1EDA,_t1EE0);
          int _t2033#1 = 10;
          bool _t2035#1 = GT<int>(nfs2031,_t2033);
          if _t2035 then goto DIE2038 else goto JOIN2039
        DIE2038:  preds = [COND2037]
          die
          goto JOIN2039
        JOIN2039:  preds = [*DIE2038,COND2037]
          goto JOIN203E
        JOIN203E:  preds = [JOIN2039,ASSIGN2052]
          int testp203A#1 = phi(testp1EDC,_t1EE0)
          int nfs203B#1 = phi(nfs2031,nfs1EDA)
          bool found203C#1 = phi(found1ED8,found203D)
          goto JOIN2048
        JOIN2048:  preds = [JOIN203E,JOIN22EF]
          int testp203F#1 = phi(testp203A,testp1EDC)
          int nfs2040#1 = phi(nfs203B,nfs1EDA)
          bool found2041#1 = phi(found203C,found1ED8)
          tensor[3] step2042#1 = phi(step2015,up2043)
          real hh2044#1 = phi(hh1ED6,hh2045)
          tensor[3] pos2046#2 = phi(pos2017,pos2047)
          self.pos = pos2046;
          self._pos = pos2046;
          self.hh = hh2044;
          self.step = step2042;
          self.found = found2041;
          self.nfs = nfs2040;
          self.testp = testp203F;
          self.steps = steps1EE2;
          active
        ASSIGN2052:  preds = [COND2030]
          bool found203D#1 = true;
          goto JOIN203E
        ASSIGN2054:  preds = [COND201F]
          real _t2053#2 = TensorIndex<tensor[3],[1]>(pos2017);
          bool _t2055#1 = EQ<real>(_t2053,_t2053);
          bool _t2057#1 = BNot(_t2055);
          if _t2057 then goto ASSIGN205B else goto ASSIGN205F
        ASSIGN205B:  preds = [COND2059]
          bool _t205A#1 = true;
          goto JOIN205D
        JOIN205D:  preds = [ASSIGN205B,ASSIGN2062]
          bool _t2023#1 = phi(_t205A,_t205C)
          goto JOIN2024
        ASSIGN205F:  preds = [COND2059]
          real _t205E#2 = TensorIndex<tensor[3],[2]>(pos2017);
          bool _t2060#1 = EQ<real>(_t205E,_t205E);
          bool _t205C#1 = BNot(_t2060);
          goto JOIN205D
        ASSIGN2064:  preds = [COND1F84]
          tensor[3] _t2063#4 = fStep1F85 (pos1ED4);
          tensor[3] pos2065#13 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos1ED4,_t2063);
          real _t2067#2 = TensorIndex<tensor[3],[0]>(pos2065);
          bool _t2069#1 = EQ<real>(_t2067,_t2067);
          bool _t206B#1 = BNot(_t2069);
          if _t206B then goto ASSIGN206F else goto ASSIGN2329
        ASSIGN206F:  preds = [COND206D]
          bool _t206E#1 = true;
          goto JOIN2072
        JOIN2072:  preds = [ASSIGN206F,JOIN2332]
          bool _t2070#1 = phi(_t206E,_t2071)
          if _t2070 then goto DIE2074 else goto JOIN2075
        DIE2074:  preds = [COND2073]
          die
          goto JOIN2075
        JOIN2075:  preds = [*DIE2074,COND2073]
          tensor[3] step2076#4 = λ()<Z_{i0}>_{3} ();
          int nn2078#4 = 0;
          particle[] _t207A#1 = SphereQuery<3,particle>(pos2065,rad1ECA);
        FOREACH207D:  preds = [ASSIGN207B,NEXT20B1]
          foreach (P207C in _t207A) on exit goto ASSIGN20B3
            int nn20AF#3 = phi(nn2078,nn20AE)
            tensor[3] force2098#2 = phi(step2076,force2097)
            real oldE2083#2 = phi(_t1EE4,oldE2082)
          tensor[3] _t207E#1 = P207C.pos;
          real _t2080#2 = 0.1e1;
          tensor[3] op1_e3_l_82085#3 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (_t207E,pos2065);
          real op1_e3_l_102086#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_82085,op1_e3_l_82085);
          real op1_e3_l_112087#2 = λ(T0[])<Sqrt(T0)> (op1_e3_l_102086);
          real op1_e3_l_122088#1 = λ(T0[],T1[])<(T1) / ( T0)> (rad1ECA,op1_e3_l_112087);
          real op1_e3_l_132089#2 = λ(T0[],T1[])<(T0) - (T1)> (_t2080,op1_e3_l_122088);
          real op1_e3_l_14208A#1 = λ(T0[])<(T0)^4> (op1_e3_l_132089);
          real oldE2082#1 = λ(T0[],T1[])<(T0 + T1)> (oldE2083,op1_e3_l_14208A);
          real _t2095#1 = -0.4e1;
          real op1_e3_l_24209F#1 = λ(T0[])<(T0)^3> (op1_e3_l_132089);
          real op1_e3_l_2520A0#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t2080,rad1ECA);
          tensor[3] op1_e3_l_3220A1#1 = λ(T0[],T1[],T2[],T3[3])<(T0 * T1 * T2 * T3_{i0})>_{3} (_t2095,op1_e3_l_24209F,op1_e3_l_2520A0,op1_e3_l_82085);
          tensor[3] op1_e3_l_3420A2#1 = λ(T0[3],T1[])<(T0_{i0}) / ( T1)>_{3} (op1_e3_l_3220A1,op1_e3_l_112087);
          tensor[3] force2097#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (force2098,op1_e3_l_3420A2);
          int nn20AE#1 = IAdd(nn20AF,_t1EE0);
          goto FOREACH207D
        ASSIGN20B3:  preds = [FOREACH207D]
          bool _t20B2#1 = EQ<int>(nn2078,nn20AF);
          if _t20B2 then goto ASSIGN20B6 else goto JOIN2158
        ASSIGN20B6:  preds = [COND20B4]
          real _t20B5#1 = 0.5e0;
          real _t20B7#1 = λ(T0[],T1[])<(T0 * T1)> (_t20B5,rad1ECA);
          tensor[3] _t20B9#1 = <tensor[3]>[_t20B7,_t1EE4,_t1EE4];
          tensor[3] npos20BB#7 = λ(T0[3],T1[3],T2[3])<(T0_{i0} + T1_{i0} + T2_{i0})>_{3} (pos1ED4,_t2063,_t20B9);
          tensor[3] mid20BD#3 = λ(T0[3],T1[3])<(T1_{i0}) - (T0_{i0})>_{3} (_t1EE6,npos20BB);
          real _t20C1#1 = TensorIndex<tensor[3],[0]>(mid20BD);
          real _t20C3#1 = λ(T0[])<Abs(T0)> (_t20C1);
          bool _t20C5#1 = LTE<real>(_t20C3,_t1EEE);
          if _t20C5 then goto ASSIGN20C9 else goto ASSIGN2327
        ASSIGN20C9:  preds = [COND20C7]
          real _t20C8#1 = TensorIndex<tensor[3],[1]>(mid20BD);
          real _t20CA#1 = λ(T0[])<Abs(T0)> (_t20C8);
          bool _t20CC#1 = LTE<real>(_t20CA,_t1EEE);
          if _t20CC then goto ASSIGN20D0 else goto ASSIGN2326
        ASSIGN20D0:  preds = [COND20CE]
          real _t20CF#1 = TensorIndex<tensor[3],[2]>(mid20BD);
          real _t20D1#1 = λ(T0[])<Abs(T0)> (_t20CF);
          bool _t20D3#1 = LTE<real>(_t20D1,_t1EEE);
          goto JOIN20D7
        JOIN20D7:  preds = [ASSIGN20D4,ASSIGN2326]
          bool _t20D5#1 = phi(_t20D3,_t20D6)
          goto JOIN20DA
        JOIN20DA:  preds = [JOIN20D7,ASSIGN2327]
          bool _t20D8#1 = phi(_t20D5,_t20D9)
          if _t20D8 then goto ASSIGN20DD else goto ASSIGN2325
        ASSIGN20DD:  preds = [COND20DB]
          real _t20DC#6 = TensorIndex<tensor[3],[0]>(npos20BB);
          bool _t20DE#1 = EQ<real>(_t20DC,_t20DC);
          bool _t20E0#1 = BNot(_t20DE);
          if _t20E0 then goto ASSIGN20E4 else goto ASSIGN2316
        ASSIGN20E4:  preds = [COND20E2]
          bool _t20E3#1 = true;
          goto JOIN20E7
        JOIN20E7:  preds = [ASSIGN20E4,JOIN231F]
          bool _t20E5#1 = phi(_t20E3,_t20E6)
          bool _t20E8#1 = BNot(_t20E5);
          if _t20E8 then goto ASSIGN20EC else goto ASSIGN2314
        ASSIGN20EC:  preds = [COND20EA]
          real y20EB#1 = TensorIndex<tensor[3],[1]>(npos20BB);
          real z20ED#1 = TensorIndex<tensor[3],[2]>(npos20BB);
          real _t20EF#9 = 0.2e1;
          real _t20F1#1 = 0.3e1;
          real _t20F3#1 = 0.12e2;
          real op1_e3_l_1020F6#1 = λ(T0[])<(T0)^2> (_t20DC);
          real op1_e3_l_1120F7#1 = λ(T0[],T1[])<(T0 * T1)> (_t20F1,op1_e3_l_1020F6);
          real op1_e3_l_1220F8#3 = λ(T0[],T1[])<(T0) - (T1)> (_t20EF,op1_e3_l_1120F7);
          real op1_e3_l_1320F9#1 = λ(T0[])<(T0)^2> (op1_e3_l_1220F8);
          real op1_e3_l_1420FA#1 = λ(T0[])<(T0)^3> (_t20DC);
          real op1_e3_l_1520FB#1 = λ(T0[])<Neg(T0)> (op1_e3_l_1420FA);
          real op1_e3_l_1620FC#1 = λ(T0[],T1[])<(T0 * T1)> (_t20EF,_t20DC);
          real op1_e3_l_1720FD#3 = λ(T0[],T1[],T2[])<(T1 + T2 + T0)> (y20EB,op1_e3_l_1520FB,op1_e3_l_1620FC);
          real op1_e3_l_1820FE#1 = λ(T0[],T1[])<(T0 * T1)> (_t20EF,op1_e3_l_1320F9);
          real op1_e3_l_1920FF#1 = λ(T0[],T1[],T2[])<(T1 * T0 * T2)> (_t20DC,_t20F3,op1_e3_l_1720FD);
          real _t20F5#1 = λ(T0[],T1[])<(T0) - (T1)> (op1_e3_l_1820FE,op1_e3_l_1920FF);
          real _t210B#2 = λ(T0[],T1[])<(T0 * T1)> (_t20EF,op1_e3_l_1220F8);
          tensor[3] _t2113#1 = <tensor[3]>[_t20F5,_t210B,_t1EE4];
          tensor[3] _t2115#1 = <tensor[3]>[_t210B,_t20EF,_t1EE4];
          real _t2117#1 = λ(T0[],T1[])<(T0 * T1)> (_t20EF,zfuz1ED2);
          tensor[3] _t2119#1 = <tensor[3]>[_t1EE4,_t1EE4,_t2117];
          tensor[3,3] H211B#1 = <tensor[3,3]>[_t2113,_t2115,_t2119];
          real _t211D#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t20EF,op1_e3_l_1220F8,op1_e3_l_1720FD);
          real _t212D#1 = λ(T0[],T1[])<(T0 * T1)> (_t20EF,op1_e3_l_1720FD);
          real _t2137#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t20EF,zfuz1ED2,z20ED);
          tensor[3] g2139#1 = <tensor[3]>[_t211D,_t212D,_t2137];
          real[3] _t213B#1 = EigenVals3x3(H211B);
          real _t213E#1 = Subscript<real[3]>(_t213B,nn2078);
          real op1_e3_l_32141#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (g2139);
          real op1_e3_l_42142#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_32141);
          real op1_e3_l_52143#1 = λ(T0[],T1[])<(T0 + T1)> (fBias1ECE,op1_e3_l_42142);
          real _t2140#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t213E,op1_e3_l_52143);
          bool _t2148#1 = GTE<real>(_t2140,fStren1ED0);
          goto JOIN214C
        JOIN214C:  preds = [ASSIGN2149,ASSIGN2314]
          bool _t214A#1 = phi(_t2148,_t214B)
          goto JOIN214F
        JOIN214F:  preds = [JOIN214C,ASSIGN2325]
          bool _t214D#1 = phi(_t214A,_t214E)
          if _t214D then goto NEW2151 else goto JOIN2152
        NEW2151:  preds = [COND2150]
          new particle(npos20BB,hh1ED6);
          goto JOIN2152
        JOIN2152:  preds = [NEW2151,COND2150]
          self.pos = pos2065;
          self._pos = pos2065;
          self.step = step2076;
          self.steps = steps1EE2;
          active
          goto JOIN2158
        JOIN2158:  preds = [*ACTIVE2157,COND20B4]
          tensor[3,3] _t21AD#1 = fPerp2159 (pos2065);
          tensor[3] op1_e3_l_321B0#5 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (_t21AD,force2098);
          tensor[3] es21AF#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (hh1ED6,op1_e3_l_321B0);
          real op1_e3_l_521B5#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_321B0,op1_e3_l_321B0);
          real op1_e3_l_621B6#1 = λ(T0[],T1[])<(T0 * T0 * T1)> (hh1ED6,op1_e3_l_521B5);
          real _t21B3#2 = λ(T0[])<Sqrt(T0)> (op1_e3_l_621B6);
          bool _t21BB#1 = GT<real>(_t21B3,rad1ECA);
          if _t21BB then goto ASSIGN23B3 else goto JOIN21D8
        ASSIGN23B3:  preds = [COND21BD]
          real op1_e3_l_1021C3#2 = λ(T0[],T1[])<(T0) / ( T1)> (rad1ECA,_t21B3);
          real hh21BE#1 = λ(T0[],T1[])<(T0 * T1)> (hh1ED6,op1_e3_l_1021C3);
          tensor[3] es21CA#1 = λ(T0[],T1[],T2[3])<(T0 * T1 * T2_{i0})>_{3} (hh1ED6,op1_e3_l_1021C3,op1_e3_l_321B0);
          goto JOIN21D8
        JOIN21D8:  preds = [ASSIGN23B4,COND21BD]
          tensor[3] es21D6#5 = phi(es21CA,es21AF)
          real hh21D7#2 = phi(hh21BE,hh1ED6)
          tensor[3] samplePos21D9#1 = λ(T0[3],T1[3],T2[3])<(T0_{i0} + T1_{i0} + T2_{i0})>_{3} (pos1ED4,_t2063,es21D6);
          tensor[3] fs21DB#3 = fStep1F85 (samplePos21D9);
          real op1_e3_l_221DE#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (fs21DB);
          real op1_e3_l_321DF#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (es21D6);
          real op1_e3_l_421E0#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_221DE);
          real op1_e3_l_521E1#2 = λ(T0[])<Sqrt(T0)> (op1_e3_l_321DF);
          real _t21DD#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_421E0,op1_e3_l_521E1);
          real _t21E7#5 = 0.5e0;
          bool _t21E9#1 = GT<real>(_t21DD,_t21E7);
          if _t21E9 then goto ASSIGN21ED else goto JOIN21F5
        ASSIGN21ED:  preds = [COND21EB]
          real hh21EC#1 = λ(T0[],T1[])<(T0 * T1)> (hh21D7,_t21E7);
          self.pos = pos2065;
          self._pos = pos2065;
          self.hh = hh21EC;
          self.step = step2076;
          self.steps = steps1EE2;
          active
          goto JOIN21F5
        JOIN21F5:  preds = [*ACTIVE21F3,COND21EB]
          real hh21F4#2 = phi(hh21D7)
          tensor[3] up2043#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (fs21DB,es21D6);
          tensor[3] pos21F7#4 = λ(T0[3],T1[3],T2[3],T3[3])<(T0_{i0} + T1_{i0} + T2_{i0} + T3_{i0})>_{3} (pos1ED4,_t2063,fs21DB,es21D6);
          particle[] _t21F9#1 = SphereQuery<3,particle>(pos21F7,rad1ECA);
        FOREACH21FC:  preds = [ASSIGN21FA,NEXT2212]
          foreach (P21FB in _t21F9) on exit goto ASSIGN2214
            real accum2202#2 = phi(_t1EE4,accum2201)
          tensor[3] _t21FD#1 = P21FB.pos;
          real _t21FF#1 = 0.1e1;
          tensor[3] op1_e3_l_102204#2 = λ(T0[3],T1[3])<(T1_{i0}) - (T0_{i0})>_{3} (_t21FD,pos21F7);
          real op1_e3_l_122205#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_102204,op1_e3_l_102204);
          real op1_e3_l_132206#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_122205);
          real op1_e3_l_142207#1 = λ(T0[],T1[])<(T1) / ( T0)> (rad1ECA,op1_e3_l_132206);
          real op1_e3_l_152208#1 = λ(T0[],T1[])<(T0) - (T1)> (_t21FF,op1_e3_l_142207);
          real op1_e3_l_162209#1 = λ(T0[])<(T0)^4> (op1_e3_l_152208);
          real accum2201#1 = λ(T0[],T1[])<(T0 + T1)> (accum2202,op1_e3_l_162209);
          goto FOREACH21FC
        ASSIGN2214:  preds = [FOREACH21FC]
          real _t2213#1 = λ(T0[],T1[])<(T0) - (T1)> (accum2202,oldE2083);
          tensor[3] op1_e3_l_122219#1 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (pos21F7,pos2065);
          tensor[3] op1_e3_l_13221A#1 = λ(T0[3])<Neg(T0_{i0})>_{3} (op1_e3_l_321B0);
          real op1_e3_l_14221B#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_122219,op1_e3_l_13221A);
          real _t2215#1 = λ(T0[],T1[])<(T0 * T1)> (_t21E7,op1_e3_l_14221B);
          bool _t2223#1 = GT<real>(_t2213,_t2215);
          if _t2223 then goto ASSIGN2227 else goto JOIN222F
        ASSIGN2227:  preds = [COND2225]
          real hh2226#1 = λ(T0[],T1[])<(T0 * T1)> (hh21F4,_t21E7);
          self.pos = pos2065;
          self._pos = pos2065;
          self.hh = hh2226;
          self.step = step2076;
          self.steps = steps1EE2;
          active
          goto JOIN222F
        JOIN222F:  preds = [*ACTIVE222D,COND2225]
          real hh222E#1 = phi(hh21F4)
          tensor[3] pos2047#5 = phi(pos21F7)
          real _t2230#1 = 0.11e1;
          real hh2045#2 = λ(T0[],T1[])<(T0 * T1)> (hh222E,_t2230);
          real _t2233#2 = TensorIndex<tensor[3],[0]>(pos2047);
          bool _t2235#1 = EQ<real>(_t2233,_t2233);
          bool _t2237#1 = BNot(_t2235);
          if _t2237 then goto ASSIGN223B else goto ASSIGN2305
        ASSIGN223B:  preds = [COND2239]
          bool _t223A#1 = true;
          goto JOIN223E
        JOIN223E:  preds = [ASSIGN223B,JOIN230E]
          bool _t223C#1 = phi(_t223A,_t223D)
          if _t223C then goto DIE2240 else goto JOIN2241
        DIE2240:  preds = [COND223F]
          die
          goto JOIN2241
        JOIN2241:  preds = [*DIE2240,COND223F]
          int _t2242#1 = 5;
          bool _t2244#1 = LT<int>(nn20AF,_t2242);
          if _t2244 then goto ASSIGN23B7 else goto JOIN22EF
        ASSIGN23B7:  preds = [COND2246]
          real op1_e3_l_7224A#1 = λ(T0[])<(1) / ( T0)> (op1_e3_l_521E1);
          tensor[3] op1_e3_l_8224B#1 = λ(T0[],T1[],T2[3],T3[])<(T0 * T1 * T2_{i0} * T3)>_{3} (_t21E7,rad1ECA,es21D6,op1_e3_l_7224A);
          tensor[3] npos2247#7 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos2047,op1_e3_l_8224B);
          tensor[3] mid2251#3 = λ(T0[3],T1[3])<(T1_{i0}) - (T0_{i0})>_{3} (_t1EE6,npos2247);
          real _t225D#1 = TensorIndex<tensor[3],[0]>(mid2251);
          real _t225F#1 = λ(T0[])<Abs(T0)> (_t225D);
          bool _t2261#1 = LTE<real>(_t225F,_t1EEE);
          if _t2261 then goto ASSIGN2265 else goto ASSIGN2303
        ASSIGN2265:  preds = [COND2263]
          real _t2264#1 = TensorIndex<tensor[3],[1]>(mid2251);
          real _t2266#1 = λ(T0[])<Abs(T0)> (_t2264);
          bool _t2268#1 = LTE<real>(_t2266,_t1EEE);
          if _t2268 then goto ASSIGN226C else goto ASSIGN2302
        ASSIGN226C:  preds = [COND226A]
          real _t226B#1 = TensorIndex<tensor[3],[2]>(mid2251);
          real _t226D#1 = λ(T0[])<Abs(T0)> (_t226B);
          bool _t226F#1 = LTE<real>(_t226D,_t1EEE);
          goto JOIN2273
        JOIN2273:  preds = [ASSIGN2270,ASSIGN2302]
          bool _t2271#1 = phi(_t226F,_t2272)
          goto JOIN2276
        JOIN2276:  preds = [JOIN2273,ASSIGN2303]
          bool _t2274#1 = phi(_t2271,_t2275)
          if _t2274 then goto ASSIGN2279 else goto ASSIGN2301
        ASSIGN2279:  preds = [COND2277]
          real _t2278#6 = TensorIndex<tensor[3],[0]>(npos2247);
          bool _t227A#1 = EQ<real>(_t2278,_t2278);
          bool _t227C#1 = BNot(_t227A);
          if _t227C then goto ASSIGN2280 else goto ASSIGN22F2
        ASSIGN2280:  preds = [COND227E]
          bool _t227F#1 = true;
          goto JOIN2283
        JOIN2283:  preds = [ASSIGN2280,JOIN22FB]
          bool _t2281#1 = phi(_t227F,_t2282)
          bool _t2284#1 = BNot(_t2281);
          if _t2284 then goto ASSIGN2288 else goto ASSIGN22F0
        ASSIGN2288:  preds = [COND2286]
          real y2287#1 = TensorIndex<tensor[3],[1]>(npos2247);
          real z2289#1 = TensorIndex<tensor[3],[2]>(npos2247);
          real _t228B#9 = 0.2e1;
          real _t228D#1 = 0.3e1;
          real _t228F#1 = 0.12e2;
          real op1_e3_l_102292#1 = λ(T0[])<(T0)^2> (_t2278);
          real op1_e3_l_112293#1 = λ(T0[],T1[])<(T0 * T1)> (_t228D,op1_e3_l_102292);
          real op1_e3_l_122294#3 = λ(T0[],T1[])<(T0) - (T1)> (_t228B,op1_e3_l_112293);
          real op1_e3_l_132295#1 = λ(T0[])<(T0)^2> (op1_e3_l_122294);
          real op1_e3_l_142296#1 = λ(T0[])<(T0)^3> (_t2278);
          real op1_e3_l_152297#1 = λ(T0[])<Neg(T0)> (op1_e3_l_142296);
          real op1_e3_l_162298#1 = λ(T0[],T1[])<(T0 * T1)> (_t228B,_t2278);
          real op1_e3_l_172299#3 = λ(T0[],T1[],T2[])<(T1 + T2 + T0)> (y2287,op1_e3_l_152297,op1_e3_l_162298);
          real op1_e3_l_18229A#1 = λ(T0[],T1[])<(T0 * T1)> (_t228B,op1_e3_l_132295);
          real op1_e3_l_19229B#1 = λ(T0[],T1[],T2[])<(T1 * T0 * T2)> (_t2278,_t228F,op1_e3_l_172299);
          real _t2291#1 = λ(T0[],T1[])<(T0) - (T1)> (op1_e3_l_18229A,op1_e3_l_19229B);
          real _t22A7#2 = λ(T0[],T1[])<(T0 * T1)> (_t228B,op1_e3_l_122294);
          tensor[3] _t22AF#1 = <tensor[3]>[_t2291,_t22A7,_t1EE4];
          tensor[3] _t22B1#1 = <tensor[3]>[_t22A7,_t228B,_t1EE4];
          real _t22B3#1 = λ(T0[],T1[])<(T0 * T1)> (_t228B,zfuz1ED2);
          tensor[3] _t22B5#1 = <tensor[3]>[_t1EE4,_t1EE4,_t22B3];
          tensor[3,3] H22B7#1 = <tensor[3,3]>[_t22AF,_t22B1,_t22B5];
          real _t22B9#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t228B,op1_e3_l_122294,op1_e3_l_172299);
          real _t22C9#1 = λ(T0[],T1[])<(T0 * T1)> (_t228B,op1_e3_l_172299);
          real _t22D3#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t228B,zfuz1ED2,z2289);
          tensor[3] g22D5#1 = <tensor[3]>[_t22B9,_t22C9,_t22D3];
          real[3] _t22D7#1 = EigenVals3x3(H22B7);
          real _t22DA#1 = Subscript<real[3]>(_t22D7,nn2078);
          real op1_e3_l_322DD#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (g22D5);
          real op1_e3_l_422DE#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_322DD);
          real op1_e3_l_522DF#1 = λ(T0[],T1[])<(T0 + T1)> (fBias1ECE,op1_e3_l_422DE);
          real _t22DC#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t22DA,op1_e3_l_522DF);
          bool _t22E4#1 = GTE<real>(_t22DC,fStren1ED0);
          goto JOIN22E8
        JOIN22E8:  preds = [ASSIGN22E5,ASSIGN22F0]
          bool _t22E6#1 = phi(_t22E4,_t22E7)
          goto JOIN22EB
        JOIN22EB:  preds = [JOIN22E8,ASSIGN2301]
          bool _t22E9#1 = phi(_t22E6,_t22EA)
          if _t22E9 then goto NEW22ED else goto JOIN22EE
        NEW22ED:  preds = [COND22EC]
          new particle(npos2247,hh2045);
          goto JOIN22EE
        JOIN22EE:  preds = [NEW22ED,COND22EC]
          goto JOIN22EF
        JOIN22EF:  preds = [JOIN22EE,COND2246]
          goto JOIN2048
        ASSIGN22F0:  preds = [COND2286]
          bool _t22E7#1 = false;
          goto JOIN22E8
        ASSIGN22F2:  preds = [COND227E]
          real _t22F1#2 = TensorIndex<tensor[3],[1]>(npos2247);
          bool _t22F3#1 = EQ<real>(_t22F1,_t22F1);
          bool _t22F5#1 = BNot(_t22F3);
          if _t22F5 then goto ASSIGN22F9 else goto ASSIGN22FD
        ASSIGN22F9:  preds = [COND22F7]
          bool _t22F8#1 = true;
          goto JOIN22FB
        JOIN22FB:  preds = [ASSIGN22F9,ASSIGN2300]
          bool _t2282#1 = phi(_t22F8,_t22FA)
          goto JOIN2283
        ASSIGN22FD:  preds = [COND22F7]
          real _t22FC#2 = TensorIndex<tensor[3],[2]>(npos2247);
          bool _t22FE#1 = EQ<real>(_t22FC,_t22FC);
          bool _t22FA#1 = BNot(_t22FE);
          goto JOIN22FB
        ASSIGN2301:  preds = [COND2277]
          bool _t22EA#1 = false;
          goto JOIN22EB
        ASSIGN2302:  preds = [COND226A]
          bool _t2272#1 = false;
          goto JOIN2273
        ASSIGN2303:  preds = [COND2263]
          bool _t2275#1 = false;
          goto JOIN2276
        ASSIGN2305:  preds = [COND2239]
          real _t2304#2 = TensorIndex<tensor[3],[1]>(pos2047);
          bool _t2306#1 = EQ<real>(_t2304,_t2304);
          bool _t2308#1 = BNot(_t2306);
          if _t2308 then goto ASSIGN230C else goto ASSIGN2310
        ASSIGN230C:  preds = [COND230A]
          bool _t230B#1 = true;
          goto JOIN230E
        JOIN230E:  preds = [ASSIGN230C,ASSIGN2313]
          bool _t223D#1 = phi(_t230B,_t230D)
          goto JOIN223E
        ASSIGN2310:  preds = [COND230A]
          real _t230F#2 = TensorIndex<tensor[3],[2]>(pos2047);
          bool _t2311#1 = EQ<real>(_t230F,_t230F);
          bool _t230D#1 = BNot(_t2311);
          goto JOIN230E
        ASSIGN2314:  preds = [COND20EA]
          bool _t214B#1 = false;
          goto JOIN214C
        ASSIGN2316:  preds = [COND20E2]
          real _t2315#2 = TensorIndex<tensor[3],[1]>(npos20BB);
          bool _t2317#1 = EQ<real>(_t2315,_t2315);
          bool _t2319#1 = BNot(_t2317);
          if _t2319 then goto ASSIGN231D else goto ASSIGN2321
        ASSIGN231D:  preds = [COND231B]
          bool _t231C#1 = true;
          goto JOIN231F
        JOIN231F:  preds = [ASSIGN231D,ASSIGN2324]
          bool _t20E6#1 = phi(_t231C,_t231E)
          goto JOIN20E7
        ASSIGN2321:  preds = [COND231B]
          real _t2320#2 = TensorIndex<tensor[3],[2]>(npos20BB);
          bool _t2322#1 = EQ<real>(_t2320,_t2320);
          bool _t231E#1 = BNot(_t2322);
          goto JOIN231F
        ASSIGN2325:  preds = [COND20DB]
          bool _t214E#1 = false;
          goto JOIN214F
        ASSIGN2326:  preds = [COND20CE]
          bool _t20D6#1 = false;
          goto JOIN20D7
        ASSIGN2327:  preds = [COND20C7]
          bool _t20D9#1 = false;
          goto JOIN20DA
        ASSIGN2329:  preds = [COND206D]
          real _t2328#2 = TensorIndex<tensor[3],[1]>(pos2065);
          bool _t232A#1 = EQ<real>(_t2328,_t2328);
          bool _t232C#1 = BNot(_t232A);
          if _t232C then goto ASSIGN2330 else goto ASSIGN2334
        ASSIGN2330:  preds = [COND232E]
          bool _t232F#1 = true;
          goto JOIN2332
        JOIN2332:  preds = [ASSIGN2330,ASSIGN2337]
          bool _t2071#1 = phi(_t232F,_t2331)
          goto JOIN2072
        ASSIGN2334:  preds = [COND232E]
          real _t2333#2 = TensorIndex<tensor[3],[2]>(pos2065);
          bool _t2335#1 = EQ<real>(_t2333,_t2333);
          bool _t2331#1 = BNot(_t2335);
          goto JOIN2332
        ASSIGN2338:  preds = [COND1F15]
          bool _t1F78#1 = false;
          goto JOIN1F79
        ASSIGN233A:  preds = [COND1F0D]
          real _t2339#2 = TensorIndex<tensor[3],[1]>(pos1ED4);
          bool _t233B#1 = EQ<real>(_t2339,_t2339);
          bool _t233D#1 = BNot(_t233B);
          if _t233D then goto ASSIGN2341 else goto ASSIGN2345
        ASSIGN2341:  preds = [COND233F]
          bool _t2340#1 = true;
          goto JOIN2343
        JOIN2343:  preds = [ASSIGN2341,ASSIGN2348]
          bool _t1F11#1 = phi(_t2340,_t2342)
          goto JOIN1F12
        ASSIGN2345:  preds = [COND233F]
          real _t2344#2 = TensorIndex<tensor[3],[2]>(pos1ED4);
          bool _t2346#1 = EQ<real>(_t2344,_t2344);
          bool _t2342#1 = BNot(_t2346);
          goto JOIN2343
        ASSIGN2349:  preds = [COND1F06]
          bool _t1F7B#1 = false;
          goto JOIN1F7C
        ASSIGN234A:  preds = [COND1EF9]
          bool _t1F01#1 = false;
          goto JOIN1F02
        ASSIGN234B:  preds = [COND1EF2]
          bool _t1F04#1 = false;
          goto JOIN1F05
    end update
  end particle
## initial strand creation
  COLLECTION
    ENTRY234C:  preds = []
      tensor[3][] ipos234D#1 = globals.ipos1E86;
    FOREACH2350:  preds = [ASSIGN234E,NEXT2354]
      foreach (x234F in ipos234D) on exit goto RETURN2355
      real _t2351#1 = 0.1e1;
      new particle(x234F,_t2351);
      goto FOREACH2350
    RETURN2355:  preds = [FOREACH2350]
      return
## global update
  ENTRY2356:  preds = []
    real rad2357#1 = globals.rad1E80;
    real eps2359#1 = globals.eps1E81;
    particle[] P235B#5 = Strands<particle,all>;
    (int res2363#1) = sum<int>(MAP sum235D (P235B));
    (int res236B#1) = max<int>(MAP max2365 (P235B));
    (int res2373#1) = sum<int>(MAP sum236D (P235B));
    (bool res237B#2) = all(MAP all2375 (P235B));
    (real res2387#1) = max<real>(MAP max237D (P235B));
    string _t2389#1 = "One run:";
    string _t238B#3 = " and ";
    real _t238D#2 = λ(T0[],T1[])<(T0) / ( T1)> (res2387,rad2357);
    bool _t238F#2 = LT<real>(_t238D,eps2359);
    string _t2391#1 = " of ";
    string _t2393#1 = "\n";
    Print<[string,bool,string,real,string,bool,string,int,string,int,string]>(_t2389,res237B,_t238B,_t238D,_t238B,_t238F,_t238B,res2373,_t2391,res2363,_t2393);
    if res237B then goto COND2397 else goto JOIN239D
  COND2397:  preds = [COND2396]
    if _t238F then goto ASSIGN2399 else goto JOIN239C
  ASSIGN2399:  preds = [COND2397]
    string _t2398#1 = "CONVERGED!\n";
    Print<[string]>(_t2398);
    StabilizeAll;
    goto JOIN239C
  JOIN239C:  preds = [MASSIGN239B,COND2397]
    goto JOIN239D
  JOIN239D:  preds = [JOIN239C,COND2396]
    int _t239E#1 = 5000;
    bool _t23A0#1 = GT<int>(res236B,_t239E);
    if _t23A0 then goto MASSIGN23A3 else goto JOIN23A4
  MASSIGN23A3:  preds = [COND23A2]
    StabilizeAll;
    goto JOIN23A4
  JOIN23A4:  preds = [MASSIGN23A3,COND23A2]
    continue
#### end program ####
##### low-ir: after mid-to-low translation ####
## properties
  GlobalInit StabilizeAll GlobalReduce StrandSets GlobalUpdate NewStrands StrandCommunication StrandsMayDie HasInputs HasGlobals ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
## globals
  input meshData23C5 (meshData) = <no-default>
  input 0space0853_intermedateGlobal23C6 (space) = <no-default>
  input 0data0855_intermedateGlobal23C7 (data) = <no-default>
  input rad23C8 (rad) = <default>
  input eps23C9 (eps) = <default>
  input v023CA (v0) = <default>
  input fBias23CB (fBias) = <default>
  input fStren23CC (fStren) = <default>
  input zfuz23CD (zfuz) = <default>
  input ipos23CE (ipos) = <no-default>
## functions
  function tensor[3] fStep24D6 (tensor[3] s24D7#3) {
    ENTRY24D8:  preds = []
      real zfuz24D9#2 = globals.zfuz23CD;
      real x24DB#7 = VIndex<3,0>(s24D7);
      real y24DD#1 = VIndex<3,1>(s24D7);
      real z24DF#1 = VIndex<3,2>(s24D7);
      real _t24E1#9 = 0.2e1;
      real _t24E3#1 = 0.3e1;
      real _t24E5#1 = 0.12e2;
      real op1_e3_l_1024E7#1 = RMul(x24DB,x24DB);
      real op1_e3_l_1124EA#1 = RMul(_t24E3,op1_e3_l_1024E7);
      real op1_e3_l_1224ED#4 = RSub(_t24E1,op1_e3_l_1124EA);
      real op1_e3_l_1324F0#1 = RMul(op1_e3_l_1224ED,op1_e3_l_1224ED);
      real _Pow2_24F4#1 = RMul(x24DB,x24DB);
      real op1_e3_l_1424F3#1 = RMul(x24DB,_Pow2_24F4);
      real op1_e3_l_1524F8#1 = RNeg(op1_e3_l_1424F3);
      real op1_e3_l_1624FB#1 = RMul(_t24E1,x24DB);
      real r24FF#1 = RAdd(op1_e3_l_1524F8,op1_e3_l_1624FB);
      real op1_e3_l_1724FE#3 = RAdd(r24FF,y24DD);
      real op1_e3_l_182503#1 = RMul(_t24E1,op1_e3_l_1324F0);
      real r2507#1 = RMul(_t24E5,x24DB);
      real op1_e3_l_192506#1 = RMul(r2507,op1_e3_l_1724FE);
      real _t250B#1 = RSub(op1_e3_l_182503,op1_e3_l_192506);
      real _t250E#2 = RMul(_t24E1,op1_e3_l_1224ED);
      real _t2511#4 = 0.e0;
      tensor[3] _t2513#1 = <tensor[3]>[_t250B,_t250E,_t2511];
      tensor[3] _t2515#1 = <tensor[3]>[_t250E,_t24E1,_t2511];
      real _t2517#1 = RMul(_t24E1,zfuz24D9);
      tensor[3] _t251A#1 = <tensor[3]>[_t2511,_t2511,_t2517];
      tensor[3,3] H251C#1 = <tensor[3,3]>[_t2513,_t2515,_t251A];
      real r251F#1 = RMul(_t24E1,op1_e3_l_1224ED);
      real _t251E#1 = RMul(r251F,op1_e3_l_1724FE);
      real _t2523#1 = RMul(_t24E1,op1_e3_l_1724FE);
      real r2527#1 = RMul(_t24E1,zfuz24D9);
      real _t2526#1 = RMul(r2527,z24DF);
      tensor[3] g252B#1 = <tensor[3]>[_t251E,_t2523,_t2526];
      (real[3] evals252D#1,tensor[3][3] E252E#1) = EigenVecs3x3(H251C);
      real _t2530#1 = 0.1e1;
      int _t2532#2 = 0;
      real _t2534#1 = Subscript<real[3]>(evals252D,_t2532);
      tensor[3] _t2536#4 = Subscript<tensor[3][3]>(E252E,_t2532);
      real op1_e3_l_52538#1 = RDiv(_t2530,_t2534);
      real op1_e3_l_6253B#3 = RNeg(op1_e3_l_52538);
      real op1_e3_l_7253E#3 = VDot<3>(_t2536,g252B);
      real r2542#1 = TensorIndex<tensor[3],[0]>(_t2536);
      real r2543#1 = RMul(op1_e3_l_6253B,r2542);
      real r2544#1 = RMul(r2543,op1_e3_l_7253E);
      real r2545#1 = TensorIndex<tensor[3],[1]>(_t2536);
      real r2546#1 = RMul(op1_e3_l_6253B,r2545);
      real r2547#1 = RMul(r2546,op1_e3_l_7253E);
      real r2548#1 = TensorIndex<tensor[3],[2]>(_t2536);
      real r2549#1 = RMul(op1_e3_l_6253B,r2548);
      real r254A#1 = RMul(r2549,op1_e3_l_7253E);
      tensor[3] up2541#4 = <tensor[3]>[r2544,r2547,r254A];
      real _t2556#2 = VIndex<3,0>(up2541);
      bool _t2558#1 = EQ<real>(_t2556,_t2556);
      bool _t255A#1 = BNot(_t2558);
      if _t255A then goto ASSIGN255E else goto ASSIGN256B
    ASSIGN255E:  preds = [COND255C]
      bool _t255D#1 = true;
      goto JOIN2561
    JOIN2561:  preds = [ASSIGN255E,JOIN2574]
      bool _t255F#1 = phi(_t255D,_t2560)
      if _t255F then goto ASSIGN2564 else goto JOIN2568
    ASSIGN2564:  preds = [COND2562]
      real _t2563#3 = +inf;
      tensor[3] _t2565#1 = <tensor[3]>[_t2563,_t2563,_t2563];
      return _t2565
      goto JOIN2568
    JOIN2568:  preds = [*RETURN(_t2565)2567,COND2562]
      return up2541
    ASSIGN256B:  preds = [COND255C]
      real _t256A#2 = VIndex<3,1>(up2541);
      bool _t256C#1 = EQ<real>(_t256A,_t256A);
      bool _t256E#1 = BNot(_t256C);
      if _t256E then goto ASSIGN2572 else goto ASSIGN2576
    ASSIGN2572:  preds = [COND2570]
      bool _t2571#1 = true;
      goto JOIN2574
    JOIN2574:  preds = [ASSIGN2572,ASSIGN2579]
      bool _t2560#1 = phi(_t2571,_t2573)
      goto JOIN2561
    ASSIGN2576:  preds = [COND2570]
      real _t2575#2 = VIndex<3,2>(up2541);
      bool _t2577#1 = EQ<real>(_t2575,_t2575);
      bool _t2573#1 = BNot(_t2577);
      goto JOIN2574
}
  function tensor[3,3] fPerp26ED (tensor[3] s26EE#2) {
    ENTRY26EF:  preds = []
      real zfuz26F0#1 = globals.zfuz23CD;
      real x26F2#7 = VIndex<3,0>(s26EE);
      real y26F4#1 = VIndex<3,1>(s26EE);
      real _t26F6#6 = 0.2e1;
      real _t26F8#1 = 0.3e1;
      real _t26FA#1 = 0.12e2;
      real op1_e3_l_1026FC#1 = RMul(x26F2,x26F2);
      real op1_e3_l_1126FF#1 = RMul(_t26F8,op1_e3_l_1026FC);
      real op1_e3_l_122702#3 = RSub(_t26F6,op1_e3_l_1126FF);
      real op1_e3_l_132705#1 = RMul(op1_e3_l_122702,op1_e3_l_122702);
      real _Pow2_2709#1 = RMul(x26F2,x26F2);
      real op1_e3_l_142708#1 = RMul(x26F2,_Pow2_2709);
      real op1_e3_l_15270D#1 = RNeg(op1_e3_l_142708);
      real op1_e3_l_162710#1 = RMul(_t26F6,x26F2);
      real r2714#1 = RAdd(op1_e3_l_15270D,op1_e3_l_162710);
      real op1_e3_l_172713#1 = RAdd(r2714,y26F4);
      real op1_e3_l_182718#1 = RMul(_t26F6,op1_e3_l_132705);
      real r271C#1 = RMul(_t26FA,x26F2);
      real op1_e3_l_19271B#1 = RMul(r271C,op1_e3_l_172713);
      real _t2720#1 = RSub(op1_e3_l_182718,op1_e3_l_19271B);
      real _t2723#2 = RMul(_t26F6,op1_e3_l_122702);
      real _t2726#4 = 0.e0;
      tensor[3] _t2728#1 = <tensor[3]>[_t2720,_t2723,_t2726];
      tensor[3] _t272A#1 = <tensor[3]>[_t2723,_t26F6,_t2726];
      real _t272C#1 = RMul(_t26F6,zfuz26F0);
      tensor[3] _t272F#1 = <tensor[3]>[_t2726,_t2726,_t272C];
      tensor[3,3] H2731#1 = <tensor[3,3]>[_t2728,_t272A,_t272F];
      (real[3] evals2733#0,tensor[3][3] _t2734#1) = EigenVecs3x3(H2731);
      int _t2736#1 = 0;
      tensor[3] E22738#6 = Subscript<tensor[3][3]>(_t2734,_t2736);
      real r273B#1 = TensorIndex<tensor[3],[0]>(E22738);
      tensor[3] binopV273C#1 = VScale<3>(r273B,E22738);
      real r273D#1 = TensorIndex<tensor[3],[1]>(E22738);
      tensor[3] binopV273E#1 = VScale<3>(r273D,E22738);
      real r273F#1 = TensorIndex<tensor[3],[2]>(E22738);
      tensor[3] binopV2740#1 = VScale<3>(r273F,E22738);
      tensor[3,3] op1_e3_l_2273A#9 = <tensor[3,3]>[binopV273C,binopV273E,binopV2740];
      real realLit274A#3 = 0.1e1;
      real r274B#1 = TensorIndex<tensor[3,3],[0,0]>(op1_e3_l_2273A);
      real r274C#1 = RSub(realLit274A,r274B);
      real realLit274D#6 = 0.e0;
      real r274E#1 = TensorIndex<tensor[3,3],[0,1]>(op1_e3_l_2273A);
      real r274F#1 = RSub(realLit274D,r274E);
      real r2750#1 = TensorIndex<tensor[3,3],[0,2]>(op1_e3_l_2273A);
      real r2751#1 = RSub(realLit274D,r2750);
      tensor[3] tensor2752#1 = <tensor[3]>[r274C,r274F,r2751];
      real r2753#1 = TensorIndex<tensor[3,3],[1,0]>(op1_e3_l_2273A);
      real r2754#1 = RSub(realLit274D,r2753);
      real r2755#1 = TensorIndex<tensor[3,3],[1,1]>(op1_e3_l_2273A);
      real r2756#1 = RSub(realLit274A,r2755);
      real r2757#1 = TensorIndex<tensor[3,3],[1,2]>(op1_e3_l_2273A);
      real r2758#1 = RSub(realLit274D,r2757);
      tensor[3] tensor2759#1 = <tensor[3]>[r2754,r2756,r2758];
      real r275A#1 = TensorIndex<tensor[3,3],[2,0]>(op1_e3_l_2273A);
      real r275B#1 = RSub(realLit274D,r275A);
      real r275C#1 = TensorIndex<tensor[3,3],[2,1]>(op1_e3_l_2273A);
      real r275D#1 = RSub(realLit274D,r275C);
      real r275E#1 = TensorIndex<tensor[3,3],[2,2]>(op1_e3_l_2273A);
      real r275F#1 = RSub(realLit274A,r275E);
      tensor[3] tensor2760#1 = <tensor[3]>[r275B,r275D,r275F];
      tensor[3,3] m2749#4 = <tensor[3,3]>[tensor2752,tensor2759,tensor2760];
      tensor[3] projParam277B#2 = ProjectLast<tensor[3,3],[0]>(m2749);
      real vdot277C#1 = VDot<3>(projParam277B,projParam277B);
      tensor[3] projParam277D#2 = ProjectLast<tensor[3,3],[1]>(m2749);
      real vdot277E#1 = VDot<3>(projParam277D,projParam277D);
      real r277F#1 = RAdd(vdot277C,vdot277E);
      tensor[3] projParam2780#2 = ProjectLast<tensor[3,3],[2]>(m2749);
      real vdot2781#1 = VDot<3>(projParam2780,projParam2780);
      real t277A#2 = RAdd(r277F,vdot2781);
      bool _t278B#1 = EQ<real>(t277A,t277A);
      bool _t278D#1 = BNot(_t278B);
      if _t278D then goto ASSIGN2794 else goto JOIN2798
    ASSIGN2794:  preds = [COND278F]
      real realLit2791#3 = 0.e0;
      tensor[3] tensor2792#3 = <tensor[3]>[realLit2791,realLit2791,realLit2791];
      tensor[3,3] _t2790#1 = <tensor[3,3]>[tensor2792,tensor2792,tensor2792];
      return _t2790
      goto JOIN2798
    JOIN2798:  preds = [*RETURN(_t2790)2797,COND278F]
      return m2749
}
  function int sum2980 (particle P2981#1) {
    ENTRY2982:  preds = []
      int _t2983#1 = P2981.test;
      return _t2983
}
  function int max2988 (particle P2989#1) {
    ENTRY298A:  preds = []
      int _t298B#1 = P2989.steps;
      return _t298B
}
  function int sum2990 (particle P2991#1) {
    ENTRY2992:  preds = []
      int _t2993#1 = P2991.testp;
      return _t2993
}
  function bool all2998 (particle P2999#1) {
    ENTRY299A:  preds = []
      bool _t299B#1 = P2999.found;
      return _t299B
}
  function real max29A0 (particle P29A1#1) {
    ENTRY29A2:  preds = []
      tensor[3] _t29A3#2 = P29A1.step;
      real op1_e3_l_129A5#1 = VDot<3>(_t29A3,_t29A3);
      real _t29A8#1 = Sqrt(op1_e3_l_129A5);
      return _t29A8
}
## input initialization
  ENTRY23CF:  preds = []
    real rad23D0#5 = 0.1e-1;
    globals.rad23C8 = rad23D0;
    globals.eps23C9 = rad23D0;
    real v023D4#1 = 0.625e-1;
    globals.v023CA = v023D4;
    globals.fBias23CB = rad23D0;
    globals.fStren23CC = rad23D0;
    globals.zfuz23CD = rad23D0;
    return
## global-variable initialization
  ENTRY23DB:  preds = []
    femData:Mesh meshData23DC#2 = globals.meshData23C5;
    int _t23DE#1 = 0;
    int _t23E0#1 = 1;
    int _t23E2#1 = ExtractFemItem<int,NumCell(Mesh)>(meshData23DC);
    int _t23E4#1 = ISub(_t23E2,_t23E0);
    int[] _t23E6#1 = Range(_t23DE,_t23E4);
    femData:MeshCell[] _t23E8#1 = <femData:MeshCell[]>{};
  FOREACH23EB:  preds = [ASSIGN23E9,NEXT23F1]
    foreach (_t23EA in _t23E6) on exit goto RETURN23F2
      femData:MeshCell[] _t23EF#1 = phi(_t23E8,_t23EE)
    femData:MeshCell _t23EC#1 = LoadFem<femData:MeshCell>(meshData23DC,_t23EA);
    femData:MeshCell[] _t23EE#1 = Append<femData:MeshCell>(_t23EF,_t23EC);
    goto FOREACH23EB
  RETURN23F2:  preds = [FOREACH23EB]
    return
## strand
  strand particle (tensor[3] pos023F3#2, real hh023F4#1) in 3D
    state:
      output tensor[3] pos;
      output tensor[3] _pos;
      real hh;
      tensor[3] step;
      bool found;
      int nfs;
      int test;
      int testp;
      int steps;
    state init
      ENTRY23FE:  preds = []
        real realLit2400#3 = 0.e0;
        tensor[3] step23FF#1 = <tensor[3]>[realLit2400,realLit2400,realLit2400];
        bool found2404#1 = false;
        int nfs2406#3 = 0;
        int test2408#1 = 1;
        self.pos = pos023F3;
        self._pos = pos023F3;
        self.hh = hh023F4;
        self.step = step23FF;
        self.found = found2404;
        self.nfs = nfs2406;
        self.test = test2408;
        self.testp = nfs2406;
        self.steps = nfs2406;
        return
    end state init
    method update
        ENTRY2414:  preds = []
          real rad2415#10 = globals.rad23C8;
          real eps2417#1 = globals.eps23C9;
          real fBias2419#3 = globals.fBias23CB;
          real fStren241B#3 = globals.fStren23CC;
          real zfuz241D#6 = globals.zfuz23CD;
          tensor[3] pos241F#13 = self.pos;
          real hh2421#8 = self.hh;
          bool found2423#3 = self.found;
          int nfs2425#3 = self.nfs;
          int testp2427#2 = self.testp;
          int steps2429#1 = self.steps;
          int _t242B#4 = 1;
          int steps242D#4 = IAdd(steps2429,_t242B);
          real _t242F#19 = 0.e0;
          tensor[3] _t2431#3 = <tensor[3]>[_t242F,_t242F,_t242F];
          tensor[3] mid2433#3 = VSub<3>(pos241F,_t2431);
          real _t2436#1 = VIndex<3,0>(mid2433);
          real _t2438#1 = Abs<real>(_t2436);
          real _t243B#9 = 0.4e1;
          bool _t243D#1 = LTE<real>(_t2438,_t243B);
          if _t243D then goto ASSIGN2441 else goto ASSIGN296E
        ASSIGN2441:  preds = [COND243F]
          real _t2440#1 = VIndex<3,1>(mid2433);
          real _t2442#1 = Abs<real>(_t2440);
          bool _t2445#1 = LTE<real>(_t2442,_t243B);
          if _t2445 then goto ASSIGN2449 else goto ASSIGN296D
        ASSIGN2449:  preds = [COND2447]
          real _t2448#1 = VIndex<3,2>(mid2433);
          real _t244A#1 = Abs<real>(_t2448);
          bool _t244D#1 = LTE<real>(_t244A,_t243B);
          goto JOIN2451
        JOIN2451:  preds = [ASSIGN244E,ASSIGN296D]
          bool _t244F#1 = phi(_t244D,_t2450)
          goto JOIN2454
        JOIN2454:  preds = [JOIN2451,ASSIGN296E]
          bool _t2452#1 = phi(_t244F,_t2453)
          if _t2452 then goto ASSIGN2457 else goto ASSIGN296C
        ASSIGN2457:  preds = [COND2455]
          real _t2456#9 = VIndex<3,0>(pos241F);
          bool _t2458#1 = EQ<real>(_t2456,_t2456);
          bool _t245A#1 = BNot(_t2458);
          if _t245A then goto ASSIGN245E else goto ASSIGN295D
        ASSIGN245E:  preds = [COND245C]
          bool _t245D#1 = true;
          goto JOIN2461
        JOIN2461:  preds = [ASSIGN245E,JOIN2966]
          bool _t245F#1 = phi(_t245D,_t2460)
          bool _t2462#1 = BNot(_t245F);
          if _t2462 then goto ASSIGN2466 else goto ASSIGN295B
        ASSIGN2466:  preds = [COND2464]
          real y2465#1 = VIndex<3,1>(pos241F);
          real z2467#1 = VIndex<3,2>(pos241F);
          real _t2469#9 = 0.2e1;
          real _t246B#1 = 0.3e1;
          real _t246D#1 = 0.12e2;
          real op1_e3_l_10246F#1 = RMul(_t2456,_t2456);
          real op1_e3_l_112472#1 = RMul(_t246B,op1_e3_l_10246F);
          real op1_e3_l_122475#4 = RSub(_t2469,op1_e3_l_112472);
          real op1_e3_l_132478#1 = RMul(op1_e3_l_122475,op1_e3_l_122475);
          real _Pow2_247C#1 = RMul(_t2456,_t2456);
          real op1_e3_l_14247B#1 = RMul(_t2456,_Pow2_247C);
          real op1_e3_l_152480#1 = RNeg(op1_e3_l_14247B);
          real op1_e3_l_162483#1 = RMul(_t2469,_t2456);
          real r2487#1 = RAdd(op1_e3_l_152480,op1_e3_l_162483);
          real op1_e3_l_172486#3 = RAdd(r2487,y2465);
          real op1_e3_l_18248B#1 = RMul(_t2469,op1_e3_l_132478);
          real r248F#1 = RMul(_t246D,_t2456);
          real op1_e3_l_19248E#1 = RMul(r248F,op1_e3_l_172486);
          real _t2493#1 = RSub(op1_e3_l_18248B,op1_e3_l_19248E);
          real _t2496#2 = RMul(_t2469,op1_e3_l_122475);
          tensor[3] _t2499#1 = <tensor[3]>[_t2493,_t2496,_t242F];
          tensor[3] _t249B#1 = <tensor[3]>[_t2496,_t2469,_t242F];
          real _t249D#1 = RMul(_t2469,zfuz241D);
          tensor[3] _t24A0#1 = <tensor[3]>[_t242F,_t242F,_t249D];
          tensor[3,3] H24A2#1 = <tensor[3,3]>[_t2499,_t249B,_t24A0];
          real r24A5#1 = RMul(_t2469,op1_e3_l_122475);
          real _t24A4#1 = RMul(r24A5,op1_e3_l_172486);
          real _t24A9#1 = RMul(_t2469,op1_e3_l_172486);
          real r24AD#1 = RMul(_t2469,zfuz241D);
          real _t24AC#1 = RMul(r24AD,z2467);
          tensor[3] g24B1#2 = <tensor[3]>[_t24A4,_t24A9,_t24AC];
          real[3] _t24B3#1 = EigenVals3x3(H24A2);
          int _t24B5#1 = 0;
          real _t24B7#1 = Subscript<real[3]>(_t24B3,_t24B5);
          real op1_e3_l_324B9#1 = VDot<3>(g24B1,g24B1);
          real op1_e3_l_424BC#1 = Sqrt(op1_e3_l_324B9);
          real op1_e3_l_524BF#1 = RAdd(fBias2419,op1_e3_l_424BC);
          real _t24C2#1 = RDiv(_t24B7,op1_e3_l_524BF);
          bool _t24C5#1 = GTE<real>(_t24C2,fStren241B);
          goto JOIN24C9
        JOIN24C9:  preds = [ASSIGN24C6,ASSIGN295B]
          bool _t24C7#1 = phi(_t24C5,_t24C8)
          goto JOIN24CC
        JOIN24CC:  preds = [JOIN24C9,ASSIGN296C]
          bool _t24CA#1 = phi(_t24C7,_t24CB)
          bool _t24CD#1 = BNot(_t24CA);
          if _t24CD then goto DIE24D0 else goto JOIN24D1
        DIE24D0:  preds = [COND24CF]
          die
          goto JOIN24D1
        JOIN24D1:  preds = [*DIE24D0,COND24CF]
          bool _t24D2#1 = BNot(found2423);
          if _t24D2 then goto ASSIGN257A else goto ASSIGN25CC
        ASSIGN257A:  preds = [COND24D4]
          tensor[3] step24D5#4 = fStep24D6 (pos241F);
          tensor[3] pos257B#4 = VAdd<3>(pos241F,step24D5);
          real _t257E#2 = VIndex<3,0>(pos257B);
          bool _t2580#1 = EQ<real>(_t257E,_t257E);
          bool _t2582#1 = BNot(_t2580);
          if _t2582 then goto ASSIGN2586 else goto ASSIGN25BC
        ASSIGN2586:  preds = [COND2584]
          bool _t2585#1 = true;
          goto JOIN2589
        JOIN2589:  preds = [ASSIGN2586,JOIN25C5]
          bool _t2587#1 = phi(_t2585,_t2588)
          if _t2587 then goto DIE258B else goto JOIN258C
        DIE258B:  preds = [COND258A]
          die
          goto JOIN258C
        JOIN258C:  preds = [*DIE258B,COND258A]
          real op1_e3_l_2258D#1 = VDot<3>(step24D5,step24D5);
          real op1_e3_l_32590#1 = Sqrt(op1_e3_l_2258D);
          real _t2593#1 = RDiv(op1_e3_l_32590,rad2415);
          bool _t2596#1 = GT<real>(_t2593,eps2417);
          if _t2596 then goto ASSIGN259A else goto ASSIGN25BA
        ASSIGN259A:  preds = [COND2598]
          int nfs2599#2 = IAdd(nfs2425,_t242B);
          int _t259B#1 = 10;
          bool _t259D#1 = GT<int>(nfs2599,_t259B);
          if _t259D then goto DIE25A0 else goto JOIN25A1
        DIE25A0:  preds = [COND259F]
          die
          goto JOIN25A1
        JOIN25A1:  preds = [*DIE25A0,COND259F]
          goto JOIN25A6
        JOIN25A6:  preds = [JOIN25A1,ASSIGN25BA]
          int testp25A2#1 = phi(testp2427,_t242B)
          int nfs25A3#1 = phi(nfs2599,nfs2425)
          bool found25A4#1 = phi(found2423,found25A5)
          goto JOIN25B0
        JOIN25B0:  preds = [JOIN25A6,JOIN2912]
          int testp25A7#1 = phi(testp25A2,testp2427)
          int nfs25A8#1 = phi(nfs25A3,nfs2425)
          bool found25A9#1 = phi(found25A4,found2423)
          tensor[3] step25AA#1 = phi(step24D5,up25AB)
          real hh25AC#1 = phi(hh2421,hh25AD)
          tensor[3] pos25AE#2 = phi(pos257B,pos25AF)
          self.pos = pos25AE;
          self._pos = pos25AE;
          self.hh = hh25AC;
          self.step = step25AA;
          self.found = found25A9;
          self.nfs = nfs25A8;
          self.testp = testp25A7;
          self.steps = steps242D;
          active
        ASSIGN25BA:  preds = [COND2598]
          bool found25A5#1 = true;
          goto JOIN25A6
        ASSIGN25BC:  preds = [COND2584]
          real _t25BB#2 = VIndex<3,1>(pos257B);
          bool _t25BD#1 = EQ<real>(_t25BB,_t25BB);
          bool _t25BF#1 = BNot(_t25BD);
          if _t25BF then goto ASSIGN25C3 else goto ASSIGN25C7
        ASSIGN25C3:  preds = [COND25C1]
          bool _t25C2#1 = true;
          goto JOIN25C5
        JOIN25C5:  preds = [ASSIGN25C3,ASSIGN25CA]
          bool _t2588#1 = phi(_t25C2,_t25C4)
          goto JOIN2589
        ASSIGN25C7:  preds = [COND25C1]
          real _t25C6#2 = VIndex<3,2>(pos257B);
          bool _t25C8#1 = EQ<real>(_t25C6,_t25C6);
          bool _t25C4#1 = BNot(_t25C8);
          goto JOIN25C5
        ASSIGN25CC:  preds = [COND24D4]
          tensor[3] _t25CB#4 = fStep24D6 (pos241F);
          tensor[3] pos25CD#13 = VAdd<3>(pos241F,_t25CB);
          real _t25D0#2 = VIndex<3,0>(pos25CD);
          bool _t25D2#1 = EQ<real>(_t25D0,_t25D0);
          bool _t25D4#1 = BNot(_t25D2);
          if _t25D4 then goto ASSIGN25D8 else goto ASSIGN294C
        ASSIGN25D8:  preds = [COND25D6]
          bool _t25D7#1 = true;
          goto JOIN25DB
        JOIN25DB:  preds = [ASSIGN25D8,JOIN2955]
          bool _t25D9#1 = phi(_t25D7,_t25DA)
          if _t25D9 then goto DIE25DD else goto JOIN25DE
        DIE25DD:  preds = [COND25DC]
          die
          goto JOIN25DE
        JOIN25DE:  preds = [*DIE25DD,COND25DC]
          real realLit25E0#3 = 0.e0;
          tensor[3] step25DF#4 = <tensor[3]>[realLit25E0,realLit25E0,realLit25E0];
          int nn25E4#4 = 0;
          particle[] _t25E6#1 = SphereQuery<3,particle>(pos25CD,rad2415);
        FOREACH25E9:  preds = [ASSIGN25E7,NEXT263D]
          foreach (P25E8 in _t25E6) on exit goto ASSIGN263F
            int nn263B#3 = phi(nn25E4,nn263A)
            tensor[3] force2637#4 = phi(step25DF,force2636)
            real oldE2603#2 = phi(_t242F,oldE2602)
          tensor[3] _t25EA#1 = P25E8.pos;
          real _t25EC#2 = 0.1e1;
          tensor[3] op1_e3_l_825EE#5 = VSub<3>(_t25EA,pos25CD);
          real op1_e3_l_1025F1#1 = VDot<3>(op1_e3_l_825EE,op1_e3_l_825EE);
          real op1_e3_l_1125F4#2 = Sqrt(op1_e3_l_1025F1);
          real op1_e3_l_1225F7#1 = RDiv(op1_e3_l_1125F4,rad2415);
          real op1_e3_l_1325FA#5 = RSub(_t25EC,op1_e3_l_1225F7);
          real _Pow_225FE#2 = RMul(op1_e3_l_1325FA,op1_e3_l_1325FA);
          real op1_e3_l_1425FD#1 = RMul(_Pow_225FE,_Pow_225FE);
          real oldE2602#1 = RAdd(oldE2603,op1_e3_l_1425FD);
          real _t2606#1 = -0.4e1;
          real _Pow2_2609#1 = RMul(op1_e3_l_1325FA,op1_e3_l_1325FA);
          real op1_e3_l_242608#1 = RMul(op1_e3_l_1325FA,_Pow2_2609);
          real op1_e3_l_25260D#1 = RDiv(_t25EC,rad2415);
          real r2611#1 = TensorIndex<tensor[3],[0]>(op1_e3_l_825EE);
          real r2612#1 = RMul(_t2606,op1_e3_l_242608);
          real r2613#3 = RMul(r2612,op1_e3_l_25260D);
          real r2614#1 = RMul(r2613,r2611);
          real r2615#1 = TensorIndex<tensor[3],[1]>(op1_e3_l_825EE);
          real r2616#1 = RMul(r2613,r2615);
          real r2617#1 = TensorIndex<tensor[3],[2]>(op1_e3_l_825EE);
          real r2618#1 = RMul(r2613,r2617);
          tensor[3] op1_e3_l_322610#3 = <tensor[3]>[r2614,r2616,r2618];
          real realLit2624#1 = 0.1e1;
          real r2625#3 = RDiv(realLit2624,op1_e3_l_1125F4);
          real r2626#1 = TensorIndex<tensor[3],[0]>(op1_e3_l_322610);
          real r2627#1 = RMul(r2625,r2626);
          real r2628#1 = TensorIndex<tensor[3],[1]>(op1_e3_l_322610);
          real r2629#1 = RMul(r2625,r2628);
          real r262A#1 = TensorIndex<tensor[3],[2]>(op1_e3_l_322610);
          real r262B#1 = RMul(r2625,r262A);
          tensor[3] op1_e3_l_342623#1 = <tensor[3]>[r2627,r2629,r262B];
          tensor[3] force2636#1 = VAdd<3>(force2637,op1_e3_l_342623);
          int nn263A#1 = IAdd(nn263B,_t242B);
          goto FOREACH25E9
        ASSIGN263F:  preds = [FOREACH25E9]
          bool _t263E#1 = EQ<int>(nn25E4,nn263B);
          if _t263E then goto ASSIGN2642 else goto JOIN26EB
        ASSIGN2642:  preds = [COND2640]
          real _t2641#1 = 0.5e0;
          real _t2643#1 = RMul(_t2641,rad2415);
          tensor[3] _t2646#1 = <tensor[3]>[_t2643,_t242F,_t242F];
          tensor[3] v2649#1 = VAdd<3>(pos241F,_t25CB);
          tensor[3] npos2648#7 = VAdd<3>(v2649,_t2646);
          tensor[3] mid264D#3 = VSub<3>(npos2648,_t2431);
          real _t2650#1 = VIndex<3,0>(mid264D);
          real _t2652#1 = Abs<real>(_t2650);
          bool _t2655#1 = LTE<real>(_t2652,_t243B);
          if _t2655 then goto ASSIGN2659 else goto ASSIGN294A
        ASSIGN2659:  preds = [COND2657]
          real _t2658#1 = VIndex<3,1>(mid264D);
          real _t265A#1 = Abs<real>(_t2658);
          bool _t265D#1 = LTE<real>(_t265A,_t243B);
          if _t265D then goto ASSIGN2661 else goto ASSIGN2949
        ASSIGN2661:  preds = [COND265F]
          real _t2660#1 = VIndex<3,2>(mid264D);
          real _t2662#1 = Abs<real>(_t2660);
          bool _t2665#1 = LTE<real>(_t2662,_t243B);
          goto JOIN2669
        JOIN2669:  preds = [ASSIGN2666,ASSIGN2949]
          bool _t2667#1 = phi(_t2665,_t2668)
          goto JOIN266C
        JOIN266C:  preds = [JOIN2669,ASSIGN294A]
          bool _t266A#1 = phi(_t2667,_t266B)
          if _t266A then goto ASSIGN266F else goto ASSIGN2948
        ASSIGN266F:  preds = [COND266D]
          real _t266E#9 = VIndex<3,0>(npos2648);
          bool _t2670#1 = EQ<real>(_t266E,_t266E);
          bool _t2672#1 = BNot(_t2670);
          if _t2672 then goto ASSIGN2676 else goto ASSIGN2939
        ASSIGN2676:  preds = [COND2674]
          bool _t2675#1 = true;
          goto JOIN2679
        JOIN2679:  preds = [ASSIGN2676,JOIN2942]
          bool _t2677#1 = phi(_t2675,_t2678)
          bool _t267A#1 = BNot(_t2677);
          if _t267A then goto ASSIGN267E else goto ASSIGN2937
        ASSIGN267E:  preds = [COND267C]
          real y267D#1 = VIndex<3,1>(npos2648);
          real z267F#1 = VIndex<3,2>(npos2648);
          real _t2681#9 = 0.2e1;
          real _t2683#1 = 0.3e1;
          real _t2685#1 = 0.12e2;
          real op1_e3_l_102687#1 = RMul(_t266E,_t266E);
          real op1_e3_l_11268A#1 = RMul(_t2683,op1_e3_l_102687);
          real op1_e3_l_12268D#4 = RSub(_t2681,op1_e3_l_11268A);
          real op1_e3_l_132690#1 = RMul(op1_e3_l_12268D,op1_e3_l_12268D);
          real _Pow2_2694#1 = RMul(_t266E,_t266E);
          real op1_e3_l_142693#1 = RMul(_t266E,_Pow2_2694);
          real op1_e3_l_152698#1 = RNeg(op1_e3_l_142693);
          real op1_e3_l_16269B#1 = RMul(_t2681,_t266E);
          real r269F#1 = RAdd(op1_e3_l_152698,op1_e3_l_16269B);
          real op1_e3_l_17269E#3 = RAdd(r269F,y267D);
          real op1_e3_l_1826A3#1 = RMul(_t2681,op1_e3_l_132690);
          real r26A7#1 = RMul(_t2685,_t266E);
          real op1_e3_l_1926A6#1 = RMul(r26A7,op1_e3_l_17269E);
          real _t26AB#1 = RSub(op1_e3_l_1826A3,op1_e3_l_1926A6);
          real _t26AE#2 = RMul(_t2681,op1_e3_l_12268D);
          tensor[3] _t26B1#1 = <tensor[3]>[_t26AB,_t26AE,_t242F];
          tensor[3] _t26B3#1 = <tensor[3]>[_t26AE,_t2681,_t242F];
          real _t26B5#1 = RMul(_t2681,zfuz241D);
          tensor[3] _t26B8#1 = <tensor[3]>[_t242F,_t242F,_t26B5];
          tensor[3,3] H26BA#1 = <tensor[3,3]>[_t26B1,_t26B3,_t26B8];
          real r26BD#1 = RMul(_t2681,op1_e3_l_12268D);
          real _t26BC#1 = RMul(r26BD,op1_e3_l_17269E);
          real _t26C1#1 = RMul(_t2681,op1_e3_l_17269E);
          real r26C5#1 = RMul(_t2681,zfuz241D);
          real _t26C4#1 = RMul(r26C5,z267F);
          tensor[3] g26C9#2 = <tensor[3]>[_t26BC,_t26C1,_t26C4];
          real[3] _t26CB#1 = EigenVals3x3(H26BA);
          real _t26CD#1 = Subscript<real[3]>(_t26CB,nn25E4);
          real op1_e3_l_326CF#1 = VDot<3>(g26C9,g26C9);
          real op1_e3_l_426D2#1 = Sqrt(op1_e3_l_326CF);
          real op1_e3_l_526D5#1 = RAdd(fBias2419,op1_e3_l_426D2);
          real _t26D8#1 = RDiv(_t26CD,op1_e3_l_526D5);
          bool _t26DB#1 = GTE<real>(_t26D8,fStren241B);
          goto JOIN26DF
        JOIN26DF:  preds = [ASSIGN26DC,ASSIGN2937]
          bool _t26DD#1 = phi(_t26DB,_t26DE)
          goto JOIN26E2
        JOIN26E2:  preds = [JOIN26DF,ASSIGN2948]
          bool _t26E0#1 = phi(_t26DD,_t26E1)
          if _t26E0 then goto NEW26E4 else goto JOIN26E5
        NEW26E4:  preds = [COND26E3]
          new particle(npos2648,hh2421);
          goto JOIN26E5
        JOIN26E5:  preds = [NEW26E4,COND26E3]
          self.pos = pos25CD;
          self._pos = pos25CD;
          self.step = step25DF;
          self.steps = steps242D;
          active
          goto JOIN26EB
        JOIN26EB:  preds = [*ACTIVE26EA,COND2640]
          tensor[3,3] _t26EC#3 = fPerp26ED (pos25CD);
          tensor[3] projParam279C#1 = ProjectLast<tensor[3,3],[0]>(_t26EC);
          real vdot279D#1 = VDot<3>(projParam279C,force2637);
          tensor[3] projParam279E#1 = ProjectLast<tensor[3,3],[1]>(_t26EC);
          real vdot279F#1 = VDot<3>(projParam279E,force2637);
          tensor[3] projParam27A0#1 = ProjectLast<tensor[3,3],[2]>(_t26EC);
          real vdot27A1#1 = VDot<3>(projParam27A0,force2637);
          tensor[3] op1_e3_l_3279B#7 = <tensor[3]>[vdot279D,vdot279F,vdot27A1];
          tensor[3] es27AA#1 = VScale<3>(hh2421,op1_e3_l_3279B);
          real op1_e3_l_527AD#1 = VDot<3>(op1_e3_l_3279B,op1_e3_l_3279B);
          real r27B1#1 = RMul(hh2421,hh2421);
          real op1_e3_l_627B0#1 = RMul(r27B1,op1_e3_l_527AD);
          real _t27B5#2 = Sqrt(op1_e3_l_627B0);
          bool _t27B8#1 = GT<real>(_t27B5,rad2415);
          if _t27B8 then goto ASSIGN27BD else goto JOIN27D4
        ASSIGN27BD:  preds = [COND27BA]
          real op1_e3_l_1027BB#2 = RDiv(rad2415,_t27B5);
          real hh27BE#1 = RMul(hh2421,op1_e3_l_1027BB);
          real r27C2#1 = TensorIndex<tensor[3],[0]>(op1_e3_l_3279B);
          real r27C3#3 = RMul(hh2421,op1_e3_l_1027BB);
          real r27C4#1 = RMul(r27C3,r27C2);
          real r27C5#1 = TensorIndex<tensor[3],[1]>(op1_e3_l_3279B);
          real r27C6#1 = RMul(r27C3,r27C5);
          real r27C7#1 = TensorIndex<tensor[3],[2]>(op1_e3_l_3279B);
          real r27C8#1 = RMul(r27C3,r27C7);
          tensor[3] es27C1#1 = <tensor[3]>[r27C4,r27C6,r27C8];
          goto JOIN27D4
        JOIN27D4:  preds = [ASSIGN27D1,COND27BA]
          tensor[3] es27D2#8 = phi(es27C1,es27AA)
          real hh27D3#2 = phi(hh27BE,hh2421)
          tensor[3] v27D6#1 = VAdd<3>(pos241F,_t25CB);
          tensor[3] samplePos27D5#1 = VAdd<3>(v27D6,es27D2);
          tensor[3] fs27DA#4 = fStep24D6 (samplePos27D5);
          real op1_e3_l_227DC#1 = VDot<3>(fs27DA,fs27DA);
          real op1_e3_l_327DF#1 = VDot<3>(es27D2,es27D2);
          real op1_e3_l_427E2#1 = Sqrt(op1_e3_l_227DC);
          real op1_e3_l_527E5#2 = Sqrt(op1_e3_l_327DF);
          real _t27E8#1 = RDiv(op1_e3_l_427E2,op1_e3_l_527E5);
          real _t27EB#5 = 0.5e0;
          bool _t27ED#1 = GT<real>(_t27E8,_t27EB);
          if _t27ED then goto ASSIGN27F2 else goto JOIN27FA
        ASSIGN27F2:  preds = [COND27EF]
          real hh27F0#1 = RMul(hh27D3,_t27EB);
          self.pos = pos25CD;
          self._pos = pos25CD;
          self.hh = hh27F0;
          self.step = step25DF;
          self.steps = steps242D;
          active
          goto JOIN27FA
        JOIN27FA:  preds = [*ACTIVE27F8,COND27EF]
          real hh27F9#2 = phi(hh27D3)
          tensor[3] up25AB#1 = VAdd<3>(fs27DA,es27D2);
          tensor[3] v27FE#1 = VAdd<3>(pos241F,_t25CB);
          tensor[3] v27FF#1 = VAdd<3>(v27FE,fs27DA);
          tensor[3] pos27FD#4 = VAdd<3>(v27FF,es27D2);
          particle[] _t2804#1 = SphereQuery<3,particle>(pos27FD,rad2415);
        FOREACH2807:  preds = [ASSIGN2805,NEXT2824]
          foreach (P2806 in _t2804) on exit goto ASSIGN2827
            real accum2821#2 = phi(_t242F,accum2820)
          tensor[3] _t2808#1 = P2806.pos;
          real _t280A#1 = 0.1e1;
          tensor[3] op1_e3_l_10280C#2 = VSub<3>(pos27FD,_t2808);
          real op1_e3_l_12280F#1 = VDot<3>(op1_e3_l_10280C,op1_e3_l_10280C);
          real op1_e3_l_132812#1 = Sqrt(op1_e3_l_12280F);
          real op1_e3_l_142815#1 = RDiv(op1_e3_l_132812,rad2415);
          real op1_e3_l_152818#2 = RSub(_t280A,op1_e3_l_142815);
          real _Pow_2281C#2 = RMul(op1_e3_l_152818,op1_e3_l_152818);
          real op1_e3_l_16281B#1 = RMul(_Pow_2281C,_Pow_2281C);
          real accum2820#1 = RAdd(accum2821,op1_e3_l_16281B);
          goto FOREACH2807
        ASSIGN2827:  preds = [FOREACH2807]
          real _t2825#1 = RSub(accum2821,oldE2603);
          tensor[3] op1_e3_l_122828#1 = VSub<3>(pos27FD,pos25CD);
          tensor[3] op1_e3_l_13282B#1 = VNeg<3>(op1_e3_l_3279B);
          real op1_e3_l_14282E#1 = VDot<3>(op1_e3_l_122828,op1_e3_l_13282B);
          real _t2831#1 = RMul(_t27EB,op1_e3_l_14282E);
          bool _t2834#1 = GT<real>(_t2825,_t2831);
          if _t2834 then goto ASSIGN2839 else goto JOIN2841
        ASSIGN2839:  preds = [COND2836]
          real hh2837#1 = RMul(hh27F9,_t27EB);
          self.pos = pos25CD;
          self._pos = pos25CD;
          self.hh = hh2837;
          self.step = step25DF;
          self.steps = steps242D;
          active
          goto JOIN2841
        JOIN2841:  preds = [*ACTIVE283F,COND2836]
          real hh2840#1 = phi(hh27F9)
          tensor[3] pos25AF#5 = phi(pos27FD)
          real _t2842#1 = 0.11e1;
          real hh25AD#2 = RMul(hh2840,_t2842);
          real _t2846#2 = VIndex<3,0>(pos25AF);
          bool _t2848#1 = EQ<real>(_t2846,_t2846);
          bool _t284A#1 = BNot(_t2848);
          if _t284A then goto ASSIGN284E else goto ASSIGN2928
        ASSIGN284E:  preds = [COND284C]
          bool _t284D#1 = true;
          goto JOIN2851
        JOIN2851:  preds = [ASSIGN284E,JOIN2931]
          bool _t284F#1 = phi(_t284D,_t2850)
          if _t284F then goto DIE2853 else goto JOIN2854
        DIE2853:  preds = [COND2852]
          die
          goto JOIN2854
        JOIN2854:  preds = [*DIE2853,COND2852]
          int _t2855#1 = 5;
          bool _t2857#1 = LT<int>(nn263B,_t2855);
          if _t2857 then goto ASSIGN285D else goto JOIN2912
        ASSIGN285D:  preds = [COND2859]
          real realLit285B#1 = 0.1e1;
          real op1_e3_l_7285A#3 = RDiv(realLit285B,op1_e3_l_527E5);
          real r2860#1 = TensorIndex<tensor[3],[0]>(es27D2);
          real r2861#3 = RMul(_t27EB,rad2415);
          real r2862#1 = RMul(r2861,r2860);
          real r2863#1 = RMul(r2862,op1_e3_l_7285A);
          real r2864#1 = TensorIndex<tensor[3],[1]>(es27D2);
          real r2865#1 = RMul(r2861,r2864);
          real r2866#1 = RMul(r2865,op1_e3_l_7285A);
          real r2867#1 = TensorIndex<tensor[3],[2]>(es27D2);
          real r2868#1 = RMul(r2861,r2867);
          real r2869#1 = RMul(r2868,op1_e3_l_7285A);
          tensor[3] op1_e3_l_8285F#1 = <tensor[3]>[r2863,r2866,r2869];
          tensor[3] npos2876#7 = VAdd<3>(pos25AF,op1_e3_l_8285F);
          tensor[3] mid2879#3 = VSub<3>(npos2876,_t2431);
          real _t287C#1 = VIndex<3,0>(mid2879);
          real _t287E#1 = Abs<real>(_t287C);
          bool _t2881#1 = LTE<real>(_t287E,_t243B);
          if _t2881 then goto ASSIGN2885 else goto ASSIGN2926
        ASSIGN2885:  preds = [COND2883]
          real _t2884#1 = VIndex<3,1>(mid2879);
          real _t2886#1 = Abs<real>(_t2884);
          bool _t2889#1 = LTE<real>(_t2886,_t243B);
          if _t2889 then goto ASSIGN288D else goto ASSIGN2925
        ASSIGN288D:  preds = [COND288B]
          real _t288C#1 = VIndex<3,2>(mid2879);
          real _t288E#1 = Abs<real>(_t288C);
          bool _t2891#1 = LTE<real>(_t288E,_t243B);
          goto JOIN2895
        JOIN2895:  preds = [ASSIGN2892,ASSIGN2925]
          bool _t2893#1 = phi(_t2891,_t2894)
          goto JOIN2898
        JOIN2898:  preds = [JOIN2895,ASSIGN2926]
          bool _t2896#1 = phi(_t2893,_t2897)
          if _t2896 then goto ASSIGN289B else goto ASSIGN2924
        ASSIGN289B:  preds = [COND2899]
          real _t289A#9 = VIndex<3,0>(npos2876);
          bool _t289C#1 = EQ<real>(_t289A,_t289A);
          bool _t289E#1 = BNot(_t289C);
          if _t289E then goto ASSIGN28A2 else goto ASSIGN2915
        ASSIGN28A2:  preds = [COND28A0]
          bool _t28A1#1 = true;
          goto JOIN28A5
        JOIN28A5:  preds = [ASSIGN28A2,JOIN291E]
          bool _t28A3#1 = phi(_t28A1,_t28A4)
          bool _t28A6#1 = BNot(_t28A3);
          if _t28A6 then goto ASSIGN28AA else goto ASSIGN2913
        ASSIGN28AA:  preds = [COND28A8]
          real y28A9#1 = VIndex<3,1>(npos2876);
          real z28AB#1 = VIndex<3,2>(npos2876);
          real _t28AD#9 = 0.2e1;
          real _t28AF#1 = 0.3e1;
          real _t28B1#1 = 0.12e2;
          real op1_e3_l_1028B3#1 = RMul(_t289A,_t289A);
          real op1_e3_l_1128B6#1 = RMul(_t28AF,op1_e3_l_1028B3);
          real op1_e3_l_1228B9#4 = RSub(_t28AD,op1_e3_l_1128B6);
          real op1_e3_l_1328BC#1 = RMul(op1_e3_l_1228B9,op1_e3_l_1228B9);
          real _Pow2_28C0#1 = RMul(_t289A,_t289A);
          real op1_e3_l_1428BF#1 = RMul(_t289A,_Pow2_28C0);
          real op1_e3_l_1528C4#1 = RNeg(op1_e3_l_1428BF);
          real op1_e3_l_1628C7#1 = RMul(_t28AD,_t289A);
          real r28CB#1 = RAdd(op1_e3_l_1528C4,op1_e3_l_1628C7);
          real op1_e3_l_1728CA#3 = RAdd(r28CB,y28A9);
          real op1_e3_l_1828CF#1 = RMul(_t28AD,op1_e3_l_1328BC);
          real r28D3#1 = RMul(_t28B1,_t289A);
          real op1_e3_l_1928D2#1 = RMul(r28D3,op1_e3_l_1728CA);
          real _t28D7#1 = RSub(op1_e3_l_1828CF,op1_e3_l_1928D2);
          real _t28DA#2 = RMul(_t28AD,op1_e3_l_1228B9);
          tensor[3] _t28DD#1 = <tensor[3]>[_t28D7,_t28DA,_t242F];
          tensor[3] _t28DF#1 = <tensor[3]>[_t28DA,_t28AD,_t242F];
          real _t28E1#1 = RMul(_t28AD,zfuz241D);
          tensor[3] _t28E4#1 = <tensor[3]>[_t242F,_t242F,_t28E1];
          tensor[3,3] H28E6#1 = <tensor[3,3]>[_t28DD,_t28DF,_t28E4];
          real r28E9#1 = RMul(_t28AD,op1_e3_l_1228B9);
          real _t28E8#1 = RMul(r28E9,op1_e3_l_1728CA);
          real _t28ED#1 = RMul(_t28AD,op1_e3_l_1728CA);
          real r28F1#1 = RMul(_t28AD,zfuz241D);
          real _t28F0#1 = RMul(r28F1,z28AB);
          tensor[3] g28F5#2 = <tensor[3]>[_t28E8,_t28ED,_t28F0];
          real[3] _t28F7#1 = EigenVals3x3(H28E6);
          real _t28F9#1 = Subscript<real[3]>(_t28F7,nn25E4);
          real op1_e3_l_328FB#1 = VDot<3>(g28F5,g28F5);
          real op1_e3_l_428FE#1 = Sqrt(op1_e3_l_328FB);
          real op1_e3_l_52901#1 = RAdd(fBias2419,op1_e3_l_428FE);
          real _t2904#1 = RDiv(_t28F9,op1_e3_l_52901);
          bool _t2907#1 = GTE<real>(_t2904,fStren241B);
          goto JOIN290B
        JOIN290B:  preds = [ASSIGN2908,ASSIGN2913]
          bool _t2909#1 = phi(_t2907,_t290A)
          goto JOIN290E
        JOIN290E:  preds = [JOIN290B,ASSIGN2924]
          bool _t290C#1 = phi(_t2909,_t290D)
          if _t290C then goto NEW2910 else goto JOIN2911
        NEW2910:  preds = [COND290F]
          new particle(npos2876,hh25AD);
          goto JOIN2911
        JOIN2911:  preds = [NEW2910,COND290F]
          goto JOIN2912
        JOIN2912:  preds = [JOIN2911,COND2859]
          goto JOIN25B0
        ASSIGN2913:  preds = [COND28A8]
          bool _t290A#1 = false;
          goto JOIN290B
        ASSIGN2915:  preds = [COND28A0]
          real _t2914#2 = VIndex<3,1>(npos2876);
          bool _t2916#1 = EQ<real>(_t2914,_t2914);
          bool _t2918#1 = BNot(_t2916);
          if _t2918 then goto ASSIGN291C else goto ASSIGN2920
        ASSIGN291C:  preds = [COND291A]
          bool _t291B#1 = true;
          goto JOIN291E
        JOIN291E:  preds = [ASSIGN291C,ASSIGN2923]
          bool _t28A4#1 = phi(_t291B,_t291D)
          goto JOIN28A5
        ASSIGN2920:  preds = [COND291A]
          real _t291F#2 = VIndex<3,2>(npos2876);
          bool _t2921#1 = EQ<real>(_t291F,_t291F);
          bool _t291D#1 = BNot(_t2921);
          goto JOIN291E
        ASSIGN2924:  preds = [COND2899]
          bool _t290D#1 = false;
          goto JOIN290E
        ASSIGN2925:  preds = [COND288B]
          bool _t2894#1 = false;
          goto JOIN2895
        ASSIGN2926:  preds = [COND2883]
          bool _t2897#1 = false;
          goto JOIN2898
        ASSIGN2928:  preds = [COND284C]
          real _t2927#2 = VIndex<3,1>(pos25AF);
          bool _t2929#1 = EQ<real>(_t2927,_t2927);
          bool _t292B#1 = BNot(_t2929);
          if _t292B then goto ASSIGN292F else goto ASSIGN2933
        ASSIGN292F:  preds = [COND292D]
          bool _t292E#1 = true;
          goto JOIN2931
        JOIN2931:  preds = [ASSIGN292F,ASSIGN2936]
          bool _t2850#1 = phi(_t292E,_t2930)
          goto JOIN2851
        ASSIGN2933:  preds = [COND292D]
          real _t2932#2 = VIndex<3,2>(pos25AF);
          bool _t2934#1 = EQ<real>(_t2932,_t2932);
          bool _t2930#1 = BNot(_t2934);
          goto JOIN2931
        ASSIGN2937:  preds = [COND267C]
          bool _t26DE#1 = false;
          goto JOIN26DF
        ASSIGN2939:  preds = [COND2674]
          real _t2938#2 = VIndex<3,1>(npos2648);
          bool _t293A#1 = EQ<real>(_t2938,_t2938);
          bool _t293C#1 = BNot(_t293A);
          if _t293C then goto ASSIGN2940 else goto ASSIGN2944
        ASSIGN2940:  preds = [COND293E]
          bool _t293F#1 = true;
          goto JOIN2942
        JOIN2942:  preds = [ASSIGN2940,ASSIGN2947]
          bool _t2678#1 = phi(_t293F,_t2941)
          goto JOIN2679
        ASSIGN2944:  preds = [COND293E]
          real _t2943#2 = VIndex<3,2>(npos2648);
          bool _t2945#1 = EQ<real>(_t2943,_t2943);
          bool _t2941#1 = BNot(_t2945);
          goto JOIN2942
        ASSIGN2948:  preds = [COND266D]
          bool _t26E1#1 = false;
          goto JOIN26E2
        ASSIGN2949:  preds = [COND265F]
          bool _t2668#1 = false;
          goto JOIN2669
        ASSIGN294A:  preds = [COND2657]
          bool _t266B#1 = false;
          goto JOIN266C
        ASSIGN294C:  preds = [COND25D6]
          real _t294B#2 = VIndex<3,1>(pos25CD);
          bool _t294D#1 = EQ<real>(_t294B,_t294B);
          bool _t294F#1 = BNot(_t294D);
          if _t294F then goto ASSIGN2953 else goto ASSIGN2957
        ASSIGN2953:  preds = [COND2951]
          bool _t2952#1 = true;
          goto JOIN2955
        JOIN2955:  preds = [ASSIGN2953,ASSIGN295A]
          bool _t25DA#1 = phi(_t2952,_t2954)
          goto JOIN25DB
        ASSIGN2957:  preds = [COND2951]
          real _t2956#2 = VIndex<3,2>(pos25CD);
          bool _t2958#1 = EQ<real>(_t2956,_t2956);
          bool _t2954#1 = BNot(_t2958);
          goto JOIN2955
        ASSIGN295B:  preds = [COND2464]
          bool _t24C8#1 = false;
          goto JOIN24C9
        ASSIGN295D:  preds = [COND245C]
          real _t295C#2 = VIndex<3,1>(pos241F);
          bool _t295E#1 = EQ<real>(_t295C,_t295C);
          bool _t2960#1 = BNot(_t295E);
          if _t2960 then goto ASSIGN2964 else goto ASSIGN2968
        ASSIGN2964:  preds = [COND2962]
          bool _t2963#1 = true;
          goto JOIN2966
        JOIN2966:  preds = [ASSIGN2964,ASSIGN296B]
          bool _t2460#1 = phi(_t2963,_t2965)
          goto JOIN2461
        ASSIGN2968:  preds = [COND2962]
          real _t2967#2 = VIndex<3,2>(pos241F);
          bool _t2969#1 = EQ<real>(_t2967,_t2967);
          bool _t2965#1 = BNot(_t2969);
          goto JOIN2966
        ASSIGN296C:  preds = [COND2455]
          bool _t24CB#1 = false;
          goto JOIN24CC
        ASSIGN296D:  preds = [COND2447]
          bool _t2450#1 = false;
          goto JOIN2451
        ASSIGN296E:  preds = [COND243F]
          bool _t2453#1 = false;
          goto JOIN2454
    end update
  end particle
## initial strand creation
  COLLECTION
    ENTRY296F:  preds = []
      tensor[3][] ipos2970#1 = globals.ipos23CE;
    FOREACH2973:  preds = [ASSIGN2971,NEXT2977]
      foreach (x2972 in ipos2970) on exit goto RETURN2978
      real _t2974#1 = 0.1e1;
      new particle(x2972,_t2974);
      goto FOREACH2973
    RETURN2978:  preds = [FOREACH2973]
      return
## global update
  ENTRY2979:  preds = []
    real rad297A#1 = globals.rad23C8;
    real eps297C#1 = globals.eps23C9;
    particle[] P297E#5 = Strands<particle,all>;
    (int res2986#1) = sum<int>(MAP sum2980 (P297E));
    (int res298E#1) = max<int>(MAP max2988 (P297E));
    (int res2996#1) = sum<int>(MAP sum2990 (P297E));
    (bool res299E#2) = all(MAP all2998 (P297E));
    (real res29AC#1) = max<real>(MAP max29A0 (P297E));
    string _t29AE#1 = "One run:";
    string _t29B0#3 = " and ";
    real _t29B2#2 = RDiv(res29AC,rad297A);
    bool _t29B5#2 = LT<real>(_t29B2,eps297C);
    string _t29B7#1 = " of ";
    string _t29B9#1 = "\n";
    Print<[string,bool,string,real,string,bool,string,int,string,int,string]>(_t29AE,res299E,_t29B0,_t29B2,_t29B0,_t29B5,_t29B0,res2996,_t29B7,res2986,_t29B9);
    if res299E then goto COND29BD else goto JOIN29C3
  COND29BD:  preds = [COND29BC]
    if _t29B5 then goto ASSIGN29BF else goto JOIN29C2
  ASSIGN29BF:  preds = [COND29BD]
    string _t29BE#1 = "CONVERGED!\n";
    Print<[string]>(_t29BE);
    StabilizeAll;
    goto JOIN29C2
  JOIN29C2:  preds = [MASSIGN29C1,COND29BD]
    goto JOIN29C3
  JOIN29C3:  preds = [JOIN29C2,COND29BC]
    int _t29C4#1 = 5000;
    bool _t29C6#1 = GT<int>(res298E,_t29C4);
    if _t29C6 then goto MASSIGN29C9 else goto JOIN29CA
  MASSIGN29C9:  preds = [COND29C8]
    StabilizeAll;
    goto JOIN29CA
  JOIN29CA:  preds = [MASSIGN29C9,COND29C8]
    continue
#### end program ####
##### low-ir: after contraction(1) ####
## properties
  GlobalInit StabilizeAll GlobalReduce StrandSets GlobalUpdate NewStrands StrandCommunication StrandsMayDie HasInputs HasGlobals ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
## globals
  input meshData23C5 (meshData) = <no-default>
  input 0space0853_intermedateGlobal23C6 (space) = <no-default>
  input 0data0855_intermedateGlobal23C7 (data) = <no-default>
  input rad23C8 (rad) = <default>
  input eps23C9 (eps) = <default>
  input v023CA (v0) = <default>
  input fBias23CB (fBias) = <default>
  input fStren23CC (fStren) = <default>
  input zfuz23CD (zfuz) = <default>
  input ipos23CE (ipos) = <no-default>
## functions
  function tensor[3] fStep24D6 (tensor[3] s24D7#3) {
    ENTRY24D8:  preds = []
      real zfuz24D9#2 = globals.zfuz23CD;
      real x24DB#7 = VIndex<3,0>(s24D7);
      real y24DD#1 = VIndex<3,1>(s24D7);
      real z24DF#1 = VIndex<3,2>(s24D7);
      real _t24E1#9 = 0.2e1;
      real _t24E3#1 = 0.3e1;
      real _t24E5#1 = 0.12e2;
      real op1_e3_l_1024E7#1 = RMul(x24DB,x24DB);
      real op1_e3_l_1124EA#1 = RMul(_t24E3,op1_e3_l_1024E7);
      real op1_e3_l_1224ED#4 = RSub(_t24E1,op1_e3_l_1124EA);
      real op1_e3_l_1324F0#1 = RMul(op1_e3_l_1224ED,op1_e3_l_1224ED);
      real _Pow2_24F4#1 = RMul(x24DB,x24DB);
      real op1_e3_l_1424F3#1 = RMul(x24DB,_Pow2_24F4);
      real op1_e3_l_1524F8#1 = RNeg(op1_e3_l_1424F3);
      real op1_e3_l_1624FB#1 = RMul(_t24E1,x24DB);
      real r24FF#1 = RAdd(op1_e3_l_1524F8,op1_e3_l_1624FB);
      real op1_e3_l_1724FE#3 = RAdd(r24FF,y24DD);
      real op1_e3_l_182503#1 = RMul(_t24E1,op1_e3_l_1324F0);
      real r2507#1 = RMul(_t24E5,x24DB);
      real op1_e3_l_192506#1 = RMul(r2507,op1_e3_l_1724FE);
      real _t250B#1 = RSub(op1_e3_l_182503,op1_e3_l_192506);
      real _t250E#2 = RMul(_t24E1,op1_e3_l_1224ED);
      real _t2511#4 = 0.e0;
      tensor[3] _t2513#1 = <tensor[3]>[_t250B,_t250E,_t2511];
      tensor[3] _t2515#1 = <tensor[3]>[_t250E,_t24E1,_t2511];
      real _t2517#1 = RMul(_t24E1,zfuz24D9);
      tensor[3] _t251A#1 = <tensor[3]>[_t2511,_t2511,_t2517];
      tensor[3,3] H251C#1 = <tensor[3,3]>[_t2513,_t2515,_t251A];
      real r251F#1 = RMul(_t24E1,op1_e3_l_1224ED);
      real _t251E#1 = RMul(r251F,op1_e3_l_1724FE);
      real _t2523#1 = RMul(_t24E1,op1_e3_l_1724FE);
      real r2527#1 = RMul(_t24E1,zfuz24D9);
      real _t2526#1 = RMul(r2527,z24DF);
      tensor[3] g252B#1 = <tensor[3]>[_t251E,_t2523,_t2526];
      (real[3] evals252D#1,tensor[3][3] E252E#1) = EigenVecs3x3(H251C);
      real _t2530#1 = 0.1e1;
      int _t2532#2 = 0;
      real _t2534#1 = Subscript<real[3]>(evals252D,_t2532);
      tensor[3] _t2536#4 = Subscript<tensor[3][3]>(E252E,_t2532);
      real op1_e3_l_52538#1 = RDiv(_t2530,_t2534);
      real op1_e3_l_6253B#3 = RNeg(op1_e3_l_52538);
      real op1_e3_l_7253E#3 = VDot<3>(_t2536,g252B);
      real r2542#1 = TensorIndex<tensor[3],[0]>(_t2536);
      real r2543#1 = RMul(op1_e3_l_6253B,r2542);
      real r2544#1 = RMul(r2543,op1_e3_l_7253E);
      real r2545#1 = TensorIndex<tensor[3],[1]>(_t2536);
      real r2546#1 = RMul(op1_e3_l_6253B,r2545);
      real r2547#1 = RMul(r2546,op1_e3_l_7253E);
      real r2548#1 = TensorIndex<tensor[3],[2]>(_t2536);
      real r2549#1 = RMul(op1_e3_l_6253B,r2548);
      real r254A#1 = RMul(r2549,op1_e3_l_7253E);
      tensor[3] up2541#4 = <tensor[3]>[r2544,r2547,r254A];
      real _t2556#2 = VIndex<3,0>(up2541);
      bool _t2558#1 = EQ<real>(_t2556,_t2556);
      bool _t255A#1 = BNot(_t2558);
      if _t255A then goto ASSIGN255E else goto ASSIGN256B
    ASSIGN255E:  preds = [COND255C]
      bool _t255D#1 = true;
      goto JOIN2561
    JOIN2561:  preds = [ASSIGN255E,JOIN2574]
      bool _t255F#1 = phi(_t255D,_t2560)
      if _t255F then goto ASSIGN2564 else goto JOIN2568
    ASSIGN2564:  preds = [COND2562]
      real _t2563#3 = +inf;
      tensor[3] _t2565#1 = <tensor[3]>[_t2563,_t2563,_t2563];
      return _t2565
      goto JOIN2568
    JOIN2568:  preds = [*RETURN(_t2565)2567,COND2562]
      return up2541
    ASSIGN256B:  preds = [COND255C]
      real _t256A#2 = VIndex<3,1>(up2541);
      bool _t256C#1 = EQ<real>(_t256A,_t256A);
      bool _t256E#1 = BNot(_t256C);
      if _t256E then goto ASSIGN2572 else goto ASSIGN2576
    ASSIGN2572:  preds = [COND2570]
      bool _t2571#1 = true;
      goto JOIN2574
    JOIN2574:  preds = [ASSIGN2572,ASSIGN2579]
      bool _t2560#1 = phi(_t2571,_t2573)
      goto JOIN2561
    ASSIGN2576:  preds = [COND2570]
      real _t2575#2 = VIndex<3,2>(up2541);
      bool _t2577#1 = EQ<real>(_t2575,_t2575);
      bool _t2573#1 = BNot(_t2577);
      goto JOIN2574
}
  function tensor[3,3] fPerp26ED (tensor[3] s26EE#2) {
    ENTRY26EF:  preds = []
      real zfuz26F0#1 = globals.zfuz23CD;
      real x26F2#7 = VIndex<3,0>(s26EE);
      real y26F4#1 = VIndex<3,1>(s26EE);
      real _t26F6#6 = 0.2e1;
      real _t26F8#1 = 0.3e1;
      real _t26FA#1 = 0.12e2;
      real op1_e3_l_1026FC#1 = RMul(x26F2,x26F2);
      real op1_e3_l_1126FF#1 = RMul(_t26F8,op1_e3_l_1026FC);
      real op1_e3_l_122702#3 = RSub(_t26F6,op1_e3_l_1126FF);
      real op1_e3_l_132705#1 = RMul(op1_e3_l_122702,op1_e3_l_122702);
      real _Pow2_2709#1 = RMul(x26F2,x26F2);
      real op1_e3_l_142708#1 = RMul(x26F2,_Pow2_2709);
      real op1_e3_l_15270D#1 = RNeg(op1_e3_l_142708);
      real op1_e3_l_162710#1 = RMul(_t26F6,x26F2);
      real r2714#1 = RAdd(op1_e3_l_15270D,op1_e3_l_162710);
      real op1_e3_l_172713#1 = RAdd(r2714,y26F4);
      real op1_e3_l_182718#1 = RMul(_t26F6,op1_e3_l_132705);
      real r271C#1 = RMul(_t26FA,x26F2);
      real op1_e3_l_19271B#1 = RMul(r271C,op1_e3_l_172713);
      real _t2720#1 = RSub(op1_e3_l_182718,op1_e3_l_19271B);
      real _t2723#2 = RMul(_t26F6,op1_e3_l_122702);
      real _t2726#4 = 0.e0;
      tensor[3] _t2728#1 = <tensor[3]>[_t2720,_t2723,_t2726];
      tensor[3] _t272A#1 = <tensor[3]>[_t2723,_t26F6,_t2726];
      real _t272C#1 = RMul(_t26F6,zfuz26F0);
      tensor[3] _t272F#1 = <tensor[3]>[_t2726,_t2726,_t272C];
      tensor[3,3] H2731#1 = <tensor[3,3]>[_t2728,_t272A,_t272F];
      (real[3] evals2733#0,tensor[3][3] _t2734#1) = EigenVecs3x3(H2731);
      int _t2736#1 = 0;
      tensor[3] E22738#6 = Subscript<tensor[3][3]>(_t2734,_t2736);
      real r273B#1 = TensorIndex<tensor[3],[0]>(E22738);
      tensor[3] binopV273C#3 = VScale<3>(r273B,E22738);
      real r273D#1 = TensorIndex<tensor[3],[1]>(E22738);
      tensor[3] binopV273E#3 = VScale<3>(r273D,E22738);
      real r273F#1 = TensorIndex<tensor[3],[2]>(E22738);
      tensor[3] binopV2740#3 = VScale<3>(r273F,E22738);
      real realLit274A#3 = 0.1e1;
      real r274B#1 = VIndex<3,0>(binopV273C);
      real r274C#1 = RSub(realLit274A,r274B);
      real realLit274D#6 = 0.e0;
      real r274E#1 = VIndex<3,1>(binopV273C);
      real r274F#1 = RSub(realLit274D,r274E);
      real r2750#1 = VIndex<3,2>(binopV273C);
      real r2751#1 = RSub(realLit274D,r2750);
      tensor[3] tensor2752#2 = <tensor[3]>[r274C,r274F,r2751];
      real r2753#1 = VIndex<3,0>(binopV273E);
      real r2754#1 = RSub(realLit274D,r2753);
      real r2755#1 = VIndex<3,1>(binopV273E);
      real r2756#1 = RSub(realLit274A,r2755);
      real r2757#1 = VIndex<3,2>(binopV273E);
      real r2758#1 = RSub(realLit274D,r2757);
      tensor[3] tensor2759#2 = <tensor[3]>[r2754,r2756,r2758];
      real r275A#1 = VIndex<3,0>(binopV2740);
      real r275B#1 = RSub(realLit274D,r275A);
      real r275C#1 = VIndex<3,1>(binopV2740);
      real r275D#1 = RSub(realLit274D,r275C);
      real r275E#1 = VIndex<3,2>(binopV2740);
      real r275F#1 = RSub(realLit274A,r275E);
      tensor[3] tensor2760#2 = <tensor[3]>[r275B,r275D,r275F];
      tensor[3,3] m2749#1 = <tensor[3,3]>[tensor2752,tensor2759,tensor2760];
      tensor[3] projParam277B#2 = tensor2752;
      real vdot277C#1 = VDot<3>(projParam277B,projParam277B);
      tensor[3] projParam277D#2 = tensor2759;
      real vdot277E#1 = VDot<3>(projParam277D,projParam277D);
      real r277F#1 = RAdd(vdot277C,vdot277E);
      tensor[3] projParam2780#2 = tensor2760;
      real vdot2781#1 = VDot<3>(projParam2780,projParam2780);
      real t277A#2 = RAdd(r277F,vdot2781);
      bool _t278B#1 = EQ<real>(t277A,t277A);
      bool _t278D#1 = BNot(_t278B);
      if _t278D then goto ASSIGN2794 else goto JOIN2798
    ASSIGN2794:  preds = [COND278F]
      real realLit2791#3 = 0.e0;
      tensor[3] tensor2792#3 = <tensor[3]>[realLit2791,realLit2791,realLit2791];
      tensor[3,3] _t2790#1 = <tensor[3,3]>[tensor2792,tensor2792,tensor2792];
      return _t2790
      goto JOIN2798
    JOIN2798:  preds = [*RETURN(_t2790)2797,COND278F]
      return m2749
}
  function int sum2980 (particle P2981#1) {
    ENTRY2982:  preds = []
      int _t2983#1 = P2981.test;
      return _t2983
}
  function int max2988 (particle P2989#1) {
    ENTRY298A:  preds = []
      int _t298B#1 = P2989.steps;
      return _t298B
}
  function int sum2990 (particle P2991#1) {
    ENTRY2992:  preds = []
      int _t2993#1 = P2991.testp;
      return _t2993
}
  function bool all2998 (particle P2999#1) {
    ENTRY299A:  preds = []
      bool _t299B#1 = P2999.found;
      return _t299B
}
  function real max29A0 (particle P29A1#1) {
    ENTRY29A2:  preds = []
      tensor[3] _t29A3#2 = P29A1.step;
      real op1_e3_l_129A5#1 = VDot<3>(_t29A3,_t29A3);
      real _t29A8#1 = Sqrt(op1_e3_l_129A5);
      return _t29A8
}
## input initialization
  ENTRY23CF:  preds = []
    real rad23D0#5 = 0.1e-1;
    globals.rad23C8 = rad23D0;
    globals.eps23C9 = rad23D0;
    real v023D4#1 = 0.625e-1;
    globals.v023CA = v023D4;
    globals.fBias23CB = rad23D0;
    globals.fStren23CC = rad23D0;
    globals.zfuz23CD = rad23D0;
    return
## global-variable initialization
  ENTRY23DB:  preds = []
    femData:Mesh meshData23DC#2 = globals.meshData23C5;
    int _t23DE#1 = 0;
    int _t23E0#1 = 1;
    int _t23E2#1 = ExtractFemItem<int,NumCell(Mesh)>(meshData23DC);
    int _t23E4#1 = ISub(_t23E2,_t23E0);
    int[] _t23E6#1 = Range(_t23DE,_t23E4);
    femData:MeshCell[] _t23E8#1 = <femData:MeshCell[]>{};
  FOREACH23EB:  preds = [ASSIGN23E9,NEXT23F1]
    foreach (_t23EA in _t23E6) on exit goto RETURN23F2
      femData:MeshCell[] _t23EF#1 = phi(_t23E8,_t23EE)
    femData:MeshCell _t23EC#1 = LoadFem<femData:MeshCell>(meshData23DC,_t23EA);
    femData:MeshCell[] _t23EE#1 = Append<femData:MeshCell>(_t23EF,_t23EC);
    goto FOREACH23EB
  RETURN23F2:  preds = [FOREACH23EB]
    return
## strand
  strand particle (tensor[3] pos023F3#2, real hh023F4#1) in 3D
    state:
      output tensor[3] pos;
      output tensor[3] _pos;
      real hh;
      tensor[3] step;
      bool found;
      int nfs;
      int test;
      int testp;
      int steps;
    state init
      ENTRY23FE:  preds = []
        real realLit2400#3 = 0.e0;
        tensor[3] step23FF#1 = <tensor[3]>[realLit2400,realLit2400,realLit2400];
        bool found2404#1 = false;
        int nfs2406#3 = 0;
        int test2408#1 = 1;
        self.pos = pos023F3;
        self._pos = pos023F3;
        self.hh = hh023F4;
        self.step = step23FF;
        self.found = found2404;
        self.nfs = nfs2406;
        self.test = test2408;
        self.testp = nfs2406;
        self.steps = nfs2406;
        return
    end state init
    method update
        ENTRY2414:  preds = []
          real rad2415#10 = globals.rad23C8;
          real eps2417#1 = globals.eps23C9;
          real fBias2419#3 = globals.fBias23CB;
          real fStren241B#3 = globals.fStren23CC;
          real zfuz241D#6 = globals.zfuz23CD;
          tensor[3] pos241F#13 = self.pos;
          real hh2421#8 = self.hh;
          bool found2423#3 = self.found;
          int nfs2425#3 = self.nfs;
          int testp2427#2 = self.testp;
          int steps2429#1 = self.steps;
          int _t242B#4 = 1;
          int steps242D#4 = IAdd(steps2429,_t242B);
          real _t242F#19 = 0.e0;
          tensor[3] _t2431#3 = <tensor[3]>[_t242F,_t242F,_t242F];
          tensor[3] mid2433#3 = VSub<3>(pos241F,_t2431);
          real _t2436#1 = VIndex<3,0>(mid2433);
          real _t2438#1 = Abs<real>(_t2436);
          real _t243B#9 = 0.4e1;
          bool _t243D#1 = LTE<real>(_t2438,_t243B);
          if _t243D then goto ASSIGN2441 else goto ASSIGN296E
        ASSIGN2441:  preds = [COND243F]
          real _t2440#1 = VIndex<3,1>(mid2433);
          real _t2442#1 = Abs<real>(_t2440);
          bool _t2445#1 = LTE<real>(_t2442,_t243B);
          if _t2445 then goto ASSIGN2449 else goto ASSIGN296D
        ASSIGN2449:  preds = [COND2447]
          real _t2448#1 = VIndex<3,2>(mid2433);
          real _t244A#1 = Abs<real>(_t2448);
          bool _t244D#1 = LTE<real>(_t244A,_t243B);
          goto JOIN2451
        JOIN2451:  preds = [ASSIGN244E,ASSIGN296D]
          bool _t244F#1 = phi(_t244D,_t2450)
          goto JOIN2454
        JOIN2454:  preds = [JOIN2451,ASSIGN296E]
          bool _t2452#1 = phi(_t244F,_t2453)
          if _t2452 then goto ASSIGN2457 else goto ASSIGN296C
        ASSIGN2457:  preds = [COND2455]
          real _t2456#9 = VIndex<3,0>(pos241F);
          bool _t2458#1 = EQ<real>(_t2456,_t2456);
          bool _t245A#1 = BNot(_t2458);
          if _t245A then goto ASSIGN245E else goto ASSIGN295D
        ASSIGN245E:  preds = [COND245C]
          bool _t245D#1 = true;
          goto JOIN2461
        JOIN2461:  preds = [ASSIGN245E,JOIN2966]
          bool _t245F#1 = phi(_t245D,_t2460)
          bool _t2462#1 = BNot(_t245F);
          if _t2462 then goto ASSIGN2466 else goto ASSIGN295B
        ASSIGN2466:  preds = [COND2464]
          real y2465#1 = VIndex<3,1>(pos241F);
          real z2467#1 = VIndex<3,2>(pos241F);
          real _t2469#9 = 0.2e1;
          real _t246B#1 = 0.3e1;
          real _t246D#1 = 0.12e2;
          real op1_e3_l_10246F#1 = RMul(_t2456,_t2456);
          real op1_e3_l_112472#1 = RMul(_t246B,op1_e3_l_10246F);
          real op1_e3_l_122475#4 = RSub(_t2469,op1_e3_l_112472);
          real op1_e3_l_132478#1 = RMul(op1_e3_l_122475,op1_e3_l_122475);
          real _Pow2_247C#1 = RMul(_t2456,_t2456);
          real op1_e3_l_14247B#1 = RMul(_t2456,_Pow2_247C);
          real op1_e3_l_152480#1 = RNeg(op1_e3_l_14247B);
          real op1_e3_l_162483#1 = RMul(_t2469,_t2456);
          real r2487#1 = RAdd(op1_e3_l_152480,op1_e3_l_162483);
          real op1_e3_l_172486#3 = RAdd(r2487,y2465);
          real op1_e3_l_18248B#1 = RMul(_t2469,op1_e3_l_132478);
          real r248F#1 = RMul(_t246D,_t2456);
          real op1_e3_l_19248E#1 = RMul(r248F,op1_e3_l_172486);
          real _t2493#1 = RSub(op1_e3_l_18248B,op1_e3_l_19248E);
          real _t2496#2 = RMul(_t2469,op1_e3_l_122475);
          tensor[3] _t2499#1 = <tensor[3]>[_t2493,_t2496,_t242F];
          tensor[3] _t249B#1 = <tensor[3]>[_t2496,_t2469,_t242F];
          real _t249D#1 = RMul(_t2469,zfuz241D);
          tensor[3] _t24A0#1 = <tensor[3]>[_t242F,_t242F,_t249D];
          tensor[3,3] H24A2#1 = <tensor[3,3]>[_t2499,_t249B,_t24A0];
          real r24A5#1 = RMul(_t2469,op1_e3_l_122475);
          real _t24A4#1 = RMul(r24A5,op1_e3_l_172486);
          real _t24A9#1 = RMul(_t2469,op1_e3_l_172486);
          real r24AD#1 = RMul(_t2469,zfuz241D);
          real _t24AC#1 = RMul(r24AD,z2467);
          tensor[3] g24B1#2 = <tensor[3]>[_t24A4,_t24A9,_t24AC];
          real[3] _t24B3#1 = EigenVals3x3(H24A2);
          int _t24B5#1 = 0;
          real _t24B7#1 = Subscript<real[3]>(_t24B3,_t24B5);
          real op1_e3_l_324B9#1 = VDot<3>(g24B1,g24B1);
          real op1_e3_l_424BC#1 = Sqrt(op1_e3_l_324B9);
          real op1_e3_l_524BF#1 = RAdd(fBias2419,op1_e3_l_424BC);
          real _t24C2#1 = RDiv(_t24B7,op1_e3_l_524BF);
          bool _t24C5#1 = GTE<real>(_t24C2,fStren241B);
          goto JOIN24C9
        JOIN24C9:  preds = [ASSIGN24C6,ASSIGN295B]
          bool _t24C7#1 = phi(_t24C5,_t24C8)
          goto JOIN24CC
        JOIN24CC:  preds = [JOIN24C9,ASSIGN296C]
          bool _t24CA#1 = phi(_t24C7,_t24CB)
          bool _t24CD#1 = BNot(_t24CA);
          if _t24CD then goto DIE24D0 else goto JOIN24D1
        DIE24D0:  preds = [COND24CF]
          die
          goto JOIN24D1
        JOIN24D1:  preds = [*DIE24D0,COND24CF]
          bool _t24D2#1 = BNot(found2423);
          if _t24D2 then goto ASSIGN257A else goto ASSIGN25CC
        ASSIGN257A:  preds = [COND24D4]
          tensor[3] step24D5#4 = fStep24D6 (pos241F);
          tensor[3] pos257B#4 = VAdd<3>(pos241F,step24D5);
          real _t257E#2 = VIndex<3,0>(pos257B);
          bool _t2580#1 = EQ<real>(_t257E,_t257E);
          bool _t2582#1 = BNot(_t2580);
          if _t2582 then goto ASSIGN2586 else goto ASSIGN25BC
        ASSIGN2586:  preds = [COND2584]
          bool _t2585#1 = true;
          goto JOIN2589
        JOIN2589:  preds = [ASSIGN2586,JOIN25C5]
          bool _t2587#1 = phi(_t2585,_t2588)
          if _t2587 then goto DIE258B else goto JOIN258C
        DIE258B:  preds = [COND258A]
          die
          goto JOIN258C
        JOIN258C:  preds = [*DIE258B,COND258A]
          real op1_e3_l_2258D#1 = VDot<3>(step24D5,step24D5);
          real op1_e3_l_32590#1 = Sqrt(op1_e3_l_2258D);
          real _t2593#1 = RDiv(op1_e3_l_32590,rad2415);
          bool _t2596#1 = GT<real>(_t2593,eps2417);
          if _t2596 then goto ASSIGN259A else goto ASSIGN25BA
        ASSIGN259A:  preds = [COND2598]
          int nfs2599#2 = IAdd(nfs2425,_t242B);
          int _t259B#1 = 10;
          bool _t259D#1 = GT<int>(nfs2599,_t259B);
          if _t259D then goto DIE25A0 else goto JOIN25A1
        DIE25A0:  preds = [COND259F]
          die
          goto JOIN25A1
        JOIN25A1:  preds = [*DIE25A0,COND259F]
          goto JOIN25A6
        JOIN25A6:  preds = [JOIN25A1,ASSIGN25BA]
          int testp25A2#1 = phi(testp2427,_t242B)
          int nfs25A3#1 = phi(nfs2599,nfs2425)
          bool found25A4#1 = phi(found2423,found25A5)
          goto JOIN25B0
        JOIN25B0:  preds = [JOIN25A6,JOIN2912]
          int testp25A7#1 = phi(testp25A2,testp2427)
          int nfs25A8#1 = phi(nfs25A3,nfs2425)
          bool found25A9#1 = phi(found25A4,found2423)
          tensor[3] step25AA#1 = phi(step24D5,up25AB)
          real hh25AC#1 = phi(hh2421,hh25AD)
          tensor[3] pos25AE#2 = phi(pos257B,pos25AF)
          self.pos = pos25AE;
          self._pos = pos25AE;
          self.hh = hh25AC;
          self.step = step25AA;
          self.found = found25A9;
          self.nfs = nfs25A8;
          self.testp = testp25A7;
          self.steps = steps242D;
          active
        ASSIGN25BA:  preds = [COND2598]
          bool found25A5#1 = true;
          goto JOIN25A6
        ASSIGN25BC:  preds = [COND2584]
          real _t25BB#2 = VIndex<3,1>(pos257B);
          bool _t25BD#1 = EQ<real>(_t25BB,_t25BB);
          bool _t25BF#1 = BNot(_t25BD);
          if _t25BF then goto ASSIGN25C3 else goto ASSIGN25C7
        ASSIGN25C3:  preds = [COND25C1]
          bool _t25C2#1 = true;
          goto JOIN25C5
        JOIN25C5:  preds = [ASSIGN25C3,ASSIGN25CA]
          bool _t2588#1 = phi(_t25C2,_t25C4)
          goto JOIN2589
        ASSIGN25C7:  preds = [COND25C1]
          real _t25C6#2 = VIndex<3,2>(pos257B);
          bool _t25C8#1 = EQ<real>(_t25C6,_t25C6);
          bool _t25C4#1 = BNot(_t25C8);
          goto JOIN25C5
        ASSIGN25CC:  preds = [COND24D4]
          tensor[3] _t25CB#4 = fStep24D6 (pos241F);
          tensor[3] pos25CD#13 = VAdd<3>(pos241F,_t25CB);
          real _t25D0#2 = VIndex<3,0>(pos25CD);
          bool _t25D2#1 = EQ<real>(_t25D0,_t25D0);
          bool _t25D4#1 = BNot(_t25D2);
          if _t25D4 then goto ASSIGN25D8 else goto ASSIGN294C
        ASSIGN25D8:  preds = [COND25D6]
          bool _t25D7#1 = true;
          goto JOIN25DB
        JOIN25DB:  preds = [ASSIGN25D8,JOIN2955]
          bool _t25D9#1 = phi(_t25D7,_t25DA)
          if _t25D9 then goto DIE25DD else goto JOIN25DE
        DIE25DD:  preds = [COND25DC]
          die
          goto JOIN25DE
        JOIN25DE:  preds = [*DIE25DD,COND25DC]
          real realLit25E0#3 = 0.e0;
          tensor[3] step25DF#4 = <tensor[3]>[realLit25E0,realLit25E0,realLit25E0];
          int nn25E4#4 = 0;
          particle[] _t25E6#1 = SphereQuery<3,particle>(pos25CD,rad2415);
        FOREACH25E9:  preds = [ASSIGN25E7,NEXT263D]
          foreach (P25E8 in _t25E6) on exit goto ASSIGN263F
            int nn263B#3 = phi(nn25E4,nn263A)
            tensor[3] force2637#4 = phi(step25DF,force2636)
            real oldE2603#2 = phi(_t242F,oldE2602)
          tensor[3] _t25EA#1 = P25E8.pos;
          real _t25EC#2 = 0.1e1;
          tensor[3] op1_e3_l_825EE#5 = VSub<3>(_t25EA,pos25CD);
          real op1_e3_l_1025F1#1 = VDot<3>(op1_e3_l_825EE,op1_e3_l_825EE);
          real op1_e3_l_1125F4#2 = Sqrt(op1_e3_l_1025F1);
          real op1_e3_l_1225F7#1 = RDiv(op1_e3_l_1125F4,rad2415);
          real op1_e3_l_1325FA#5 = RSub(_t25EC,op1_e3_l_1225F7);
          real _Pow_225FE#2 = RMul(op1_e3_l_1325FA,op1_e3_l_1325FA);
          real op1_e3_l_1425FD#1 = RMul(_Pow_225FE,_Pow_225FE);
          real oldE2602#1 = RAdd(oldE2603,op1_e3_l_1425FD);
          real _t2606#1 = -0.4e1;
          real _Pow2_2609#1 = RMul(op1_e3_l_1325FA,op1_e3_l_1325FA);
          real op1_e3_l_242608#1 = RMul(op1_e3_l_1325FA,_Pow2_2609);
          real op1_e3_l_25260D#1 = RDiv(_t25EC,rad2415);
          real r2611#1 = TensorIndex<tensor[3],[0]>(op1_e3_l_825EE);
          real r2612#1 = RMul(_t2606,op1_e3_l_242608);
          real r2613#3 = RMul(r2612,op1_e3_l_25260D);
          real r2614#1 = RMul(r2613,r2611);
          real r2615#1 = TensorIndex<tensor[3],[1]>(op1_e3_l_825EE);
          real r2616#1 = RMul(r2613,r2615);
          real r2617#1 = TensorIndex<tensor[3],[2]>(op1_e3_l_825EE);
          real r2618#1 = RMul(r2613,r2617);
          real realLit2624#1 = 0.1e1;
          real r2625#3 = RDiv(realLit2624,op1_e3_l_1125F4);
          real r2626#1 = r2614;
          real r2627#1 = RMul(r2625,r2626);
          real r2628#1 = r2616;
          real r2629#1 = RMul(r2625,r2628);
          real r262A#1 = r2618;
          real r262B#1 = RMul(r2625,r262A);
          tensor[3] op1_e3_l_342623#1 = <tensor[3]>[r2627,r2629,r262B];
          tensor[3] force2636#1 = VAdd<3>(force2637,op1_e3_l_342623);
          int nn263A#1 = IAdd(nn263B,_t242B);
          goto FOREACH25E9
        ASSIGN263F:  preds = [FOREACH25E9]
          bool _t263E#1 = EQ<int>(nn25E4,nn263B);
          if _t263E then goto ASSIGN2642 else goto JOIN26EB
        ASSIGN2642:  preds = [COND2640]
          real _t2641#1 = 0.5e0;
          real _t2643#1 = RMul(_t2641,rad2415);
          tensor[3] _t2646#1 = <tensor[3]>[_t2643,_t242F,_t242F];
          tensor[3] v2649#1 = VAdd<3>(pos241F,_t25CB);
          tensor[3] npos2648#7 = VAdd<3>(v2649,_t2646);
          tensor[3] mid264D#3 = VSub<3>(npos2648,_t2431);
          real _t2650#1 = VIndex<3,0>(mid264D);
          real _t2652#1 = Abs<real>(_t2650);
          bool _t2655#1 = LTE<real>(_t2652,_t243B);
          if _t2655 then goto ASSIGN2659 else goto ASSIGN294A
        ASSIGN2659:  preds = [COND2657]
          real _t2658#1 = VIndex<3,1>(mid264D);
          real _t265A#1 = Abs<real>(_t2658);
          bool _t265D#1 = LTE<real>(_t265A,_t243B);
          if _t265D then goto ASSIGN2661 else goto ASSIGN2949
        ASSIGN2661:  preds = [COND265F]
          real _t2660#1 = VIndex<3,2>(mid264D);
          real _t2662#1 = Abs<real>(_t2660);
          bool _t2665#1 = LTE<real>(_t2662,_t243B);
          goto JOIN2669
        JOIN2669:  preds = [ASSIGN2666,ASSIGN2949]
          bool _t2667#1 = phi(_t2665,_t2668)
          goto JOIN266C
        JOIN266C:  preds = [JOIN2669,ASSIGN294A]
          bool _t266A#1 = phi(_t2667,_t266B)
          if _t266A then goto ASSIGN266F else goto ASSIGN2948
        ASSIGN266F:  preds = [COND266D]
          real _t266E#9 = VIndex<3,0>(npos2648);
          bool _t2670#1 = EQ<real>(_t266E,_t266E);
          bool _t2672#1 = BNot(_t2670);
          if _t2672 then goto ASSIGN2676 else goto ASSIGN2939
        ASSIGN2676:  preds = [COND2674]
          bool _t2675#1 = true;
          goto JOIN2679
        JOIN2679:  preds = [ASSIGN2676,JOIN2942]
          bool _t2677#1 = phi(_t2675,_t2678)
          bool _t267A#1 = BNot(_t2677);
          if _t267A then goto ASSIGN267E else goto ASSIGN2937
        ASSIGN267E:  preds = [COND267C]
          real y267D#1 = VIndex<3,1>(npos2648);
          real z267F#1 = VIndex<3,2>(npos2648);
          real _t2681#9 = 0.2e1;
          real _t2683#1 = 0.3e1;
          real _t2685#1 = 0.12e2;
          real op1_e3_l_102687#1 = RMul(_t266E,_t266E);
          real op1_e3_l_11268A#1 = RMul(_t2683,op1_e3_l_102687);
          real op1_e3_l_12268D#4 = RSub(_t2681,op1_e3_l_11268A);
          real op1_e3_l_132690#1 = RMul(op1_e3_l_12268D,op1_e3_l_12268D);
          real _Pow2_2694#1 = RMul(_t266E,_t266E);
          real op1_e3_l_142693#1 = RMul(_t266E,_Pow2_2694);
          real op1_e3_l_152698#1 = RNeg(op1_e3_l_142693);
          real op1_e3_l_16269B#1 = RMul(_t2681,_t266E);
          real r269F#1 = RAdd(op1_e3_l_152698,op1_e3_l_16269B);
          real op1_e3_l_17269E#3 = RAdd(r269F,y267D);
          real op1_e3_l_1826A3#1 = RMul(_t2681,op1_e3_l_132690);
          real r26A7#1 = RMul(_t2685,_t266E);
          real op1_e3_l_1926A6#1 = RMul(r26A7,op1_e3_l_17269E);
          real _t26AB#1 = RSub(op1_e3_l_1826A3,op1_e3_l_1926A6);
          real _t26AE#2 = RMul(_t2681,op1_e3_l_12268D);
          tensor[3] _t26B1#1 = <tensor[3]>[_t26AB,_t26AE,_t242F];
          tensor[3] _t26B3#1 = <tensor[3]>[_t26AE,_t2681,_t242F];
          real _t26B5#1 = RMul(_t2681,zfuz241D);
          tensor[3] _t26B8#1 = <tensor[3]>[_t242F,_t242F,_t26B5];
          tensor[3,3] H26BA#1 = <tensor[3,3]>[_t26B1,_t26B3,_t26B8];
          real r26BD#1 = RMul(_t2681,op1_e3_l_12268D);
          real _t26BC#1 = RMul(r26BD,op1_e3_l_17269E);
          real _t26C1#1 = RMul(_t2681,op1_e3_l_17269E);
          real r26C5#1 = RMul(_t2681,zfuz241D);
          real _t26C4#1 = RMul(r26C5,z267F);
          tensor[3] g26C9#2 = <tensor[3]>[_t26BC,_t26C1,_t26C4];
          real[3] _t26CB#1 = EigenVals3x3(H26BA);
          real _t26CD#1 = Subscript<real[3]>(_t26CB,nn25E4);
          real op1_e3_l_326CF#1 = VDot<3>(g26C9,g26C9);
          real op1_e3_l_426D2#1 = Sqrt(op1_e3_l_326CF);
          real op1_e3_l_526D5#1 = RAdd(fBias2419,op1_e3_l_426D2);
          real _t26D8#1 = RDiv(_t26CD,op1_e3_l_526D5);
          bool _t26DB#1 = GTE<real>(_t26D8,fStren241B);
          goto JOIN26DF
        JOIN26DF:  preds = [ASSIGN26DC,ASSIGN2937]
          bool _t26DD#1 = phi(_t26DB,_t26DE)
          goto JOIN26E2
        JOIN26E2:  preds = [JOIN26DF,ASSIGN2948]
          bool _t26E0#1 = phi(_t26DD,_t26E1)
          if _t26E0 then goto NEW26E4 else goto JOIN26E5
        NEW26E4:  preds = [COND26E3]
          new particle(npos2648,hh2421);
          goto JOIN26E5
        JOIN26E5:  preds = [NEW26E4,COND26E3]
          self.pos = pos25CD;
          self._pos = pos25CD;
          self.step = step25DF;
          self.steps = steps242D;
          active
          goto JOIN26EB
        JOIN26EB:  preds = [*ACTIVE26EA,COND2640]
          tensor[3,3] _t26EC#3 = fPerp26ED (pos25CD);
          tensor[3] projParam279C#1 = ProjectLast<tensor[3,3],[0]>(_t26EC);
          real vdot279D#2 = VDot<3>(projParam279C,force2637);
          tensor[3] projParam279E#1 = ProjectLast<tensor[3,3],[1]>(_t26EC);
          real vdot279F#2 = VDot<3>(projParam279E,force2637);
          tensor[3] projParam27A0#1 = ProjectLast<tensor[3,3],[2]>(_t26EC);
          real vdot27A1#2 = VDot<3>(projParam27A0,force2637);
          tensor[3] op1_e3_l_3279B#4 = <tensor[3]>[vdot279D,vdot279F,vdot27A1];
          tensor[3] es27AA#1 = VScale<3>(hh2421,op1_e3_l_3279B);
          real op1_e3_l_527AD#1 = VDot<3>(op1_e3_l_3279B,op1_e3_l_3279B);
          real r27B1#1 = RMul(hh2421,hh2421);
          real op1_e3_l_627B0#1 = RMul(r27B1,op1_e3_l_527AD);
          real _t27B5#2 = Sqrt(op1_e3_l_627B0);
          bool _t27B8#1 = GT<real>(_t27B5,rad2415);
          if _t27B8 then goto ASSIGN27BD else goto JOIN27D4
        ASSIGN27BD:  preds = [COND27BA]
          real op1_e3_l_1027BB#2 = RDiv(rad2415,_t27B5);
          real hh27BE#1 = RMul(hh2421,op1_e3_l_1027BB);
          real r27C2#1 = vdot279D;
          real r27C3#3 = RMul(hh2421,op1_e3_l_1027BB);
          real r27C4#1 = RMul(r27C3,r27C2);
          real r27C5#1 = vdot279F;
          real r27C6#1 = RMul(r27C3,r27C5);
          real r27C7#1 = vdot27A1;
          real r27C8#1 = RMul(r27C3,r27C7);
          tensor[3] es27C1#1 = <tensor[3]>[r27C4,r27C6,r27C8];
          goto JOIN27D4
        JOIN27D4:  preds = [ASSIGN27D1,COND27BA]
          tensor[3] es27D2#8 = phi(es27C1,es27AA)
          real hh27D3#2 = phi(hh27BE,hh2421)
          tensor[3] v27D6#1 = VAdd<3>(pos241F,_t25CB);
          tensor[3] samplePos27D5#1 = VAdd<3>(v27D6,es27D2);
          tensor[3] fs27DA#4 = fStep24D6 (samplePos27D5);
          real op1_e3_l_227DC#1 = VDot<3>(fs27DA,fs27DA);
          real op1_e3_l_327DF#1 = VDot<3>(es27D2,es27D2);
          real op1_e3_l_427E2#1 = Sqrt(op1_e3_l_227DC);
          real op1_e3_l_527E5#2 = Sqrt(op1_e3_l_327DF);
          real _t27E8#1 = RDiv(op1_e3_l_427E2,op1_e3_l_527E5);
          real _t27EB#5 = 0.5e0;
          bool _t27ED#1 = GT<real>(_t27E8,_t27EB);
          if _t27ED then goto ASSIGN27F2 else goto JOIN27FA
        ASSIGN27F2:  preds = [COND27EF]
          real hh27F0#1 = RMul(hh27D3,_t27EB);
          self.pos = pos25CD;
          self._pos = pos25CD;
          self.hh = hh27F0;
          self.step = step25DF;
          self.steps = steps242D;
          active
          goto JOIN27FA
        JOIN27FA:  preds = [*ACTIVE27F8,COND27EF]
          real hh27F9#2 = phi(hh27D3)
          tensor[3] up25AB#1 = VAdd<3>(fs27DA,es27D2);
          tensor[3] v27FE#1 = VAdd<3>(pos241F,_t25CB);
          tensor[3] v27FF#1 = VAdd<3>(v27FE,fs27DA);
          tensor[3] pos27FD#4 = VAdd<3>(v27FF,es27D2);
          particle[] _t2804#1 = SphereQuery<3,particle>(pos27FD,rad2415);
        FOREACH2807:  preds = [ASSIGN2805,NEXT2824]
          foreach (P2806 in _t2804) on exit goto ASSIGN2827
            real accum2821#2 = phi(_t242F,accum2820)
          tensor[3] _t2808#1 = P2806.pos;
          real _t280A#1 = 0.1e1;
          tensor[3] op1_e3_l_10280C#2 = VSub<3>(pos27FD,_t2808);
          real op1_e3_l_12280F#1 = VDot<3>(op1_e3_l_10280C,op1_e3_l_10280C);
          real op1_e3_l_132812#1 = Sqrt(op1_e3_l_12280F);
          real op1_e3_l_142815#1 = RDiv(op1_e3_l_132812,rad2415);
          real op1_e3_l_152818#2 = RSub(_t280A,op1_e3_l_142815);
          real _Pow_2281C#2 = RMul(op1_e3_l_152818,op1_e3_l_152818);
          real op1_e3_l_16281B#1 = RMul(_Pow_2281C,_Pow_2281C);
          real accum2820#1 = RAdd(accum2821,op1_e3_l_16281B);
          goto FOREACH2807
        ASSIGN2827:  preds = [FOREACH2807]
          real _t2825#1 = RSub(accum2821,oldE2603);
          tensor[3] op1_e3_l_122828#1 = VSub<3>(pos27FD,pos25CD);
          tensor[3] op1_e3_l_13282B#1 = VNeg<3>(op1_e3_l_3279B);
          real op1_e3_l_14282E#1 = VDot<3>(op1_e3_l_122828,op1_e3_l_13282B);
          real _t2831#1 = RMul(_t27EB,op1_e3_l_14282E);
          bool _t2834#1 = GT<real>(_t2825,_t2831);
          if _t2834 then goto ASSIGN2839 else goto JOIN2841
        ASSIGN2839:  preds = [COND2836]
          real hh2837#1 = RMul(hh27F9,_t27EB);
          self.pos = pos25CD;
          self._pos = pos25CD;
          self.hh = hh2837;
          self.step = step25DF;
          self.steps = steps242D;
          active
          goto JOIN2841
        JOIN2841:  preds = [*ACTIVE283F,COND2836]
          real hh2840#1 = phi(hh27F9)
          tensor[3] pos25AF#5 = phi(pos27FD)
          real _t2842#1 = 0.11e1;
          real hh25AD#2 = RMul(hh2840,_t2842);
          real _t2846#2 = VIndex<3,0>(pos25AF);
          bool _t2848#1 = EQ<real>(_t2846,_t2846);
          bool _t284A#1 = BNot(_t2848);
          if _t284A then goto ASSIGN284E else goto ASSIGN2928
        ASSIGN284E:  preds = [COND284C]
          bool _t284D#1 = true;
          goto JOIN2851
        JOIN2851:  preds = [ASSIGN284E,JOIN2931]
          bool _t284F#1 = phi(_t284D,_t2850)
          if _t284F then goto DIE2853 else goto JOIN2854
        DIE2853:  preds = [COND2852]
          die
          goto JOIN2854
        JOIN2854:  preds = [*DIE2853,COND2852]
          int _t2855#1 = 5;
          bool _t2857#1 = LT<int>(nn263B,_t2855);
          if _t2857 then goto ASSIGN285D else goto JOIN2912
        ASSIGN285D:  preds = [COND2859]
          real realLit285B#1 = 0.1e1;
          real op1_e3_l_7285A#3 = RDiv(realLit285B,op1_e3_l_527E5);
          real r2860#1 = TensorIndex<tensor[3],[0]>(es27D2);
          real r2861#3 = RMul(_t27EB,rad2415);
          real r2862#1 = RMul(r2861,r2860);
          real r2863#1 = RMul(r2862,op1_e3_l_7285A);
          real r2864#1 = TensorIndex<tensor[3],[1]>(es27D2);
          real r2865#1 = RMul(r2861,r2864);
          real r2866#1 = RMul(r2865,op1_e3_l_7285A);
          real r2867#1 = TensorIndex<tensor[3],[2]>(es27D2);
          real r2868#1 = RMul(r2861,r2867);
          real r2869#1 = RMul(r2868,op1_e3_l_7285A);
          tensor[3] op1_e3_l_8285F#1 = <tensor[3]>[r2863,r2866,r2869];
          tensor[3] npos2876#7 = VAdd<3>(pos25AF,op1_e3_l_8285F);
          tensor[3] mid2879#3 = VSub<3>(npos2876,_t2431);
          real _t287C#1 = VIndex<3,0>(mid2879);
          real _t287E#1 = Abs<real>(_t287C);
          bool _t2881#1 = LTE<real>(_t287E,_t243B);
          if _t2881 then goto ASSIGN2885 else goto ASSIGN2926
        ASSIGN2885:  preds = [COND2883]
          real _t2884#1 = VIndex<3,1>(mid2879);
          real _t2886#1 = Abs<real>(_t2884);
          bool _t2889#1 = LTE<real>(_t2886,_t243B);
          if _t2889 then goto ASSIGN288D else goto ASSIGN2925
        ASSIGN288D:  preds = [COND288B]
          real _t288C#1 = VIndex<3,2>(mid2879);
          real _t288E#1 = Abs<real>(_t288C);
          bool _t2891#1 = LTE<real>(_t288E,_t243B);
          goto JOIN2895
        JOIN2895:  preds = [ASSIGN2892,ASSIGN2925]
          bool _t2893#1 = phi(_t2891,_t2894)
          goto JOIN2898
        JOIN2898:  preds = [JOIN2895,ASSIGN2926]
          bool _t2896#1 = phi(_t2893,_t2897)
          if _t2896 then goto ASSIGN289B else goto ASSIGN2924
        ASSIGN289B:  preds = [COND2899]
          real _t289A#9 = VIndex<3,0>(npos2876);
          bool _t289C#1 = EQ<real>(_t289A,_t289A);
          bool _t289E#1 = BNot(_t289C);
          if _t289E then goto ASSIGN28A2 else goto ASSIGN2915
        ASSIGN28A2:  preds = [COND28A0]
          bool _t28A1#1 = true;
          goto JOIN28A5
        JOIN28A5:  preds = [ASSIGN28A2,JOIN291E]
          bool _t28A3#1 = phi(_t28A1,_t28A4)
          bool _t28A6#1 = BNot(_t28A3);
          if _t28A6 then goto ASSIGN28AA else goto ASSIGN2913
        ASSIGN28AA:  preds = [COND28A8]
          real y28A9#1 = VIndex<3,1>(npos2876);
          real z28AB#1 = VIndex<3,2>(npos2876);
          real _t28AD#9 = 0.2e1;
          real _t28AF#1 = 0.3e1;
          real _t28B1#1 = 0.12e2;
          real op1_e3_l_1028B3#1 = RMul(_t289A,_t289A);
          real op1_e3_l_1128B6#1 = RMul(_t28AF,op1_e3_l_1028B3);
          real op1_e3_l_1228B9#4 = RSub(_t28AD,op1_e3_l_1128B6);
          real op1_e3_l_1328BC#1 = RMul(op1_e3_l_1228B9,op1_e3_l_1228B9);
          real _Pow2_28C0#1 = RMul(_t289A,_t289A);
          real op1_e3_l_1428BF#1 = RMul(_t289A,_Pow2_28C0);
          real op1_e3_l_1528C4#1 = RNeg(op1_e3_l_1428BF);
          real op1_e3_l_1628C7#1 = RMul(_t28AD,_t289A);
          real r28CB#1 = RAdd(op1_e3_l_1528C4,op1_e3_l_1628C7);
          real op1_e3_l_1728CA#3 = RAdd(r28CB,y28A9);
          real op1_e3_l_1828CF#1 = RMul(_t28AD,op1_e3_l_1328BC);
          real r28D3#1 = RMul(_t28B1,_t289A);
          real op1_e3_l_1928D2#1 = RMul(r28D3,op1_e3_l_1728CA);
          real _t28D7#1 = RSub(op1_e3_l_1828CF,op1_e3_l_1928D2);
          real _t28DA#2 = RMul(_t28AD,op1_e3_l_1228B9);
          tensor[3] _t28DD#1 = <tensor[3]>[_t28D7,_t28DA,_t242F];
          tensor[3] _t28DF#1 = <tensor[3]>[_t28DA,_t28AD,_t242F];
          real _t28E1#1 = RMul(_t28AD,zfuz241D);
          tensor[3] _t28E4#1 = <tensor[3]>[_t242F,_t242F,_t28E1];
          tensor[3,3] H28E6#1 = <tensor[3,3]>[_t28DD,_t28DF,_t28E4];
          real r28E9#1 = RMul(_t28AD,op1_e3_l_1228B9);
          real _t28E8#1 = RMul(r28E9,op1_e3_l_1728CA);
          real _t28ED#1 = RMul(_t28AD,op1_e3_l_1728CA);
          real r28F1#1 = RMul(_t28AD,zfuz241D);
          real _t28F0#1 = RMul(r28F1,z28AB);
          tensor[3] g28F5#2 = <tensor[3]>[_t28E8,_t28ED,_t28F0];
          real[3] _t28F7#1 = EigenVals3x3(H28E6);
          real _t28F9#1 = Subscript<real[3]>(_t28F7,nn25E4);
          real op1_e3_l_328FB#1 = VDot<3>(g28F5,g28F5);
          real op1_e3_l_428FE#1 = Sqrt(op1_e3_l_328FB);
          real op1_e3_l_52901#1 = RAdd(fBias2419,op1_e3_l_428FE);
          real _t2904#1 = RDiv(_t28F9,op1_e3_l_52901);
          bool _t2907#1 = GTE<real>(_t2904,fStren241B);
          goto JOIN290B
        JOIN290B:  preds = [ASSIGN2908,ASSIGN2913]
          bool _t2909#1 = phi(_t2907,_t290A)
          goto JOIN290E
        JOIN290E:  preds = [JOIN290B,ASSIGN2924]
          bool _t290C#1 = phi(_t2909,_t290D)
          if _t290C then goto NEW2910 else goto JOIN2911
        NEW2910:  preds = [COND290F]
          new particle(npos2876,hh25AD);
          goto JOIN2911
        JOIN2911:  preds = [NEW2910,COND290F]
          goto JOIN2912
        JOIN2912:  preds = [JOIN2911,COND2859]
          goto JOIN25B0
        ASSIGN2913:  preds = [COND28A8]
          bool _t290A#1 = false;
          goto JOIN290B
        ASSIGN2915:  preds = [COND28A0]
          real _t2914#2 = VIndex<3,1>(npos2876);
          bool _t2916#1 = EQ<real>(_t2914,_t2914);
          bool _t2918#1 = BNot(_t2916);
          if _t2918 then goto ASSIGN291C else goto ASSIGN2920
        ASSIGN291C:  preds = [COND291A]
          bool _t291B#1 = true;
          goto JOIN291E
        JOIN291E:  preds = [ASSIGN291C,ASSIGN2923]
          bool _t28A4#1 = phi(_t291B,_t291D)
          goto JOIN28A5
        ASSIGN2920:  preds = [COND291A]
          real _t291F#2 = VIndex<3,2>(npos2876);
          bool _t2921#1 = EQ<real>(_t291F,_t291F);
          bool _t291D#1 = BNot(_t2921);
          goto JOIN291E
        ASSIGN2924:  preds = [COND2899]
          bool _t290D#1 = false;
          goto JOIN290E
        ASSIGN2925:  preds = [COND288B]
          bool _t2894#1 = false;
          goto JOIN2895
        ASSIGN2926:  preds = [COND2883]
          bool _t2897#1 = false;
          goto JOIN2898
        ASSIGN2928:  preds = [COND284C]
          real _t2927#2 = VIndex<3,1>(pos25AF);
          bool _t2929#1 = EQ<real>(_t2927,_t2927);
          bool _t292B#1 = BNot(_t2929);
          if _t292B then goto ASSIGN292F else goto ASSIGN2933
        ASSIGN292F:  preds = [COND292D]
          bool _t292E#1 = true;
          goto JOIN2931
        JOIN2931:  preds = [ASSIGN292F,ASSIGN2936]
          bool _t2850#1 = phi(_t292E,_t2930)
          goto JOIN2851
        ASSIGN2933:  preds = [COND292D]
          real _t2932#2 = VIndex<3,2>(pos25AF);
          bool _t2934#1 = EQ<real>(_t2932,_t2932);
          bool _t2930#1 = BNot(_t2934);
          goto JOIN2931
        ASSIGN2937:  preds = [COND267C]
          bool _t26DE#1 = false;
          goto JOIN26DF
        ASSIGN2939:  preds = [COND2674]
          real _t2938#2 = VIndex<3,1>(npos2648);
          bool _t293A#1 = EQ<real>(_t2938,_t2938);
          bool _t293C#1 = BNot(_t293A);
          if _t293C then goto ASSIGN2940 else goto ASSIGN2944
        ASSIGN2940:  preds = [COND293E]
          bool _t293F#1 = true;
          goto JOIN2942
        JOIN2942:  preds = [ASSIGN2940,ASSIGN2947]
          bool _t2678#1 = phi(_t293F,_t2941)
          goto JOIN2679
        ASSIGN2944:  preds = [COND293E]
          real _t2943#2 = VIndex<3,2>(npos2648);
          bool _t2945#1 = EQ<real>(_t2943,_t2943);
          bool _t2941#1 = BNot(_t2945);
          goto JOIN2942
        ASSIGN2948:  preds = [COND266D]
          bool _t26E1#1 = false;
          goto JOIN26E2
        ASSIGN2949:  preds = [COND265F]
          bool _t2668#1 = false;
          goto JOIN2669
        ASSIGN294A:  preds = [COND2657]
          bool _t266B#1 = false;
          goto JOIN266C
        ASSIGN294C:  preds = [COND25D6]
          real _t294B#2 = VIndex<3,1>(pos25CD);
          bool _t294D#1 = EQ<real>(_t294B,_t294B);
          bool _t294F#1 = BNot(_t294D);
          if _t294F then goto ASSIGN2953 else goto ASSIGN2957
        ASSIGN2953:  preds = [COND2951]
          bool _t2952#1 = true;
          goto JOIN2955
        JOIN2955:  preds = [ASSIGN2953,ASSIGN295A]
          bool _t25DA#1 = phi(_t2952,_t2954)
          goto JOIN25DB
        ASSIGN2957:  preds = [COND2951]
          real _t2956#2 = VIndex<3,2>(pos25CD);
          bool _t2958#1 = EQ<real>(_t2956,_t2956);
          bool _t2954#1 = BNot(_t2958);
          goto JOIN2955
        ASSIGN295B:  preds = [COND2464]
          bool _t24C8#1 = false;
          goto JOIN24C9
        ASSIGN295D:  preds = [COND245C]
          real _t295C#2 = VIndex<3,1>(pos241F);
          bool _t295E#1 = EQ<real>(_t295C,_t295C);
          bool _t2960#1 = BNot(_t295E);
          if _t2960 then goto ASSIGN2964 else goto ASSIGN2968
        ASSIGN2964:  preds = [COND2962]
          bool _t2963#1 = true;
          goto JOIN2966
        JOIN2966:  preds = [ASSIGN2964,ASSIGN296B]
          bool _t2460#1 = phi(_t2963,_t2965)
          goto JOIN2461
        ASSIGN2968:  preds = [COND2962]
          real _t2967#2 = VIndex<3,2>(pos241F);
          bool _t2969#1 = EQ<real>(_t2967,_t2967);
          bool _t2965#1 = BNot(_t2969);
          goto JOIN2966
        ASSIGN296C:  preds = [COND2455]
          bool _t24CB#1 = false;
          goto JOIN24CC
        ASSIGN296D:  preds = [COND2447]
          bool _t2450#1 = false;
          goto JOIN2451
        ASSIGN296E:  preds = [COND243F]
          bool _t2453#1 = false;
          goto JOIN2454
    end update
  end particle
## initial strand creation
  COLLECTION
    ENTRY296F:  preds = []
      tensor[3][] ipos2970#1 = globals.ipos23CE;
    FOREACH2973:  preds = [ASSIGN2971,NEXT2977]
      foreach (x2972 in ipos2970) on exit goto RETURN2978
      real _t2974#1 = 0.1e1;
      new particle(x2972,_t2974);
      goto FOREACH2973
    RETURN2978:  preds = [FOREACH2973]
      return
## global update
  ENTRY2979:  preds = []
    real rad297A#1 = globals.rad23C8;
    real eps297C#1 = globals.eps23C9;
    particle[] P297E#5 = Strands<particle,all>;
    (int res2986#1) = sum<int>(MAP sum2980 (P297E));
    (int res298E#1) = max<int>(MAP max2988 (P297E));
    (int res2996#1) = sum<int>(MAP sum2990 (P297E));
    (bool res299E#2) = all(MAP all2998 (P297E));
    (real res29AC#1) = max<real>(MAP max29A0 (P297E));
    string _t29AE#1 = "One run:";
    string _t29B0#3 = " and ";
    real _t29B2#2 = RDiv(res29AC,rad297A);
    bool _t29B5#2 = LT<real>(_t29B2,eps297C);
    string _t29B7#1 = " of ";
    string _t29B9#1 = "\n";
    Print<[string,bool,string,real,string,bool,string,int,string,int,string]>(_t29AE,res299E,_t29B0,_t29B2,_t29B0,_t29B5,_t29B0,res2996,_t29B7,res2986,_t29B9);
    if res299E then goto COND29BD else goto JOIN29C3
  COND29BD:  preds = [COND29BC]
    if _t29B5 then goto ASSIGN29BF else goto JOIN29C2
  ASSIGN29BF:  preds = [COND29BD]
    string _t29BE#1 = "CONVERGED!\n";
    Print<[string]>(_t29BE);
    StabilizeAll;
    goto JOIN29C2
  JOIN29C2:  preds = [MASSIGN29C1,COND29BD]
    goto JOIN29C3
  JOIN29C3:  preds = [JOIN29C2,COND29BC]
    int _t29C4#1 = 5000;
    bool _t29C6#1 = GT<int>(res298E,_t29C4);
    if _t29C6 then goto MASSIGN29C9 else goto JOIN29CA
  MASSIGN29C9:  preds = [COND29C8]
    StabilizeAll;
    goto JOIN29CA
  JOIN29CA:  preds = [MASSIGN29C9,COND29C8]
    continue
#### end program ####
##### low-ir: after value numbering ####
## properties
  GlobalInit StabilizeAll GlobalReduce StrandSets GlobalUpdate NewStrands StrandCommunication StrandsMayDie HasInputs HasGlobals ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
## globals
  input meshData23C5 (meshData) = <no-default>
  input 0space0853_intermedateGlobal23C6 (space) = <no-default>
  input 0data0855_intermedateGlobal23C7 (data) = <no-default>
  input rad23C8 (rad) = <default>
  input eps23C9 (eps) = <default>
  input v023CA (v0) = <default>
  input fBias23CB (fBias) = <default>
  input fStren23CC (fStren) = <default>
  input zfuz23CD (zfuz) = <default>
  input ipos23CE (ipos) = <no-default>
## functions
  function tensor[3] fStep24D6 (tensor[3] s24D7#3) {
    ENTRY24D8:  preds = []
      real zfuz24D9#1 = globals.zfuz23CD;
      real x24DB#5 = VIndex<3,0>(s24D7);
      real y24DD#1 = VIndex<3,1>(s24D7);
      real z24DF#1 = VIndex<3,2>(s24D7);
      real _t24E1#7 = 0.2e1;
      real _t24E3#1 = 0.3e1;
      real _t24E5#1 = 0.12e2;
      real op1_e3_l_1024E7#2 = RMul(x24DB,x24DB);
      real op1_e3_l_1124EA#1 = RMul(_t24E3,op1_e3_l_1024E7);
      real op1_e3_l_1224ED#3 = RSub(_t24E1,op1_e3_l_1124EA);
      real op1_e3_l_1324F0#1 = RMul(op1_e3_l_1224ED,op1_e3_l_1224ED);
      real op1_e3_l_1424F3#1 = RMul(x24DB,op1_e3_l_1024E7);
      real op1_e3_l_1524F8#1 = RNeg(op1_e3_l_1424F3);
      real op1_e3_l_1624FB#1 = RMul(_t24E1,x24DB);
      real r24FF#1 = RAdd(op1_e3_l_1524F8,op1_e3_l_1624FB);
      real op1_e3_l_1724FE#3 = RAdd(r24FF,y24DD);
      real op1_e3_l_182503#1 = RMul(_t24E1,op1_e3_l_1324F0);
      real r2507#1 = RMul(_t24E5,x24DB);
      real op1_e3_l_192506#1 = RMul(r2507,op1_e3_l_1724FE);
      real _t250B#1 = RSub(op1_e3_l_182503,op1_e3_l_192506);
      real _t250E#3 = RMul(_t24E1,op1_e3_l_1224ED);
      real _t2511#4 = 0.e0;
      tensor[3] _t2513#1 = <tensor[3]>[_t250B,_t250E,_t2511];
      tensor[3] _t2515#1 = <tensor[3]>[_t250E,_t24E1,_t2511];
      real _t2517#2 = RMul(_t24E1,zfuz24D9);
      tensor[3] _t251A#1 = <tensor[3]>[_t2511,_t2511,_t2517];
      tensor[3,3] H251C#1 = <tensor[3,3]>[_t2513,_t2515,_t251A];
      real _t251E#1 = RMul(_t250E,op1_e3_l_1724FE);
      real _t2523#1 = RMul(_t24E1,op1_e3_l_1724FE);
      real _t2526#1 = RMul(_t2517,z24DF);
      tensor[3] g252B#1 = <tensor[3]>[_t251E,_t2523,_t2526];
      (real[3] evals252D#1,tensor[3][3] E252E#1) = EigenVecs3x3(H251C);
      real _t2530#1 = 0.1e1;
      int _t2532#2 = 0;
      real _t2534#1 = Subscript<real[3]>(evals252D,_t2532);
      tensor[3] _t2536#4 = Subscript<tensor[3][3]>(E252E,_t2532);
      real op1_e3_l_52538#1 = RDiv(_t2530,_t2534);
      real op1_e3_l_6253B#3 = RNeg(op1_e3_l_52538);
      real op1_e3_l_7253E#3 = VDot<3>(_t2536,g252B);
      real r2542#1 = TensorIndex<tensor[3],[0]>(_t2536);
      real r2543#1 = RMul(op1_e3_l_6253B,r2542);
      real r2544#1 = RMul(r2543,op1_e3_l_7253E);
      real r2545#1 = TensorIndex<tensor[3],[1]>(_t2536);
      real r2546#1 = RMul(op1_e3_l_6253B,r2545);
      real r2547#1 = RMul(r2546,op1_e3_l_7253E);
      real r2548#1 = TensorIndex<tensor[3],[2]>(_t2536);
      real r2549#1 = RMul(op1_e3_l_6253B,r2548);
      real r254A#1 = RMul(r2549,op1_e3_l_7253E);
      tensor[3] up2541#4 = <tensor[3]>[r2544,r2547,r254A];
      real _t2556#2 = VIndex<3,0>(up2541);
      bool _t2558#1 = EQ<real>(_t2556,_t2556);
      bool _t255A#1 = BNot(_t2558);
      if _t255A then goto ASSIGN255E else goto ASSIGN256B
    ASSIGN255E:  preds = [COND255C]
      bool _t255D#1 = true;
      goto JOIN2561
    JOIN2561:  preds = [ASSIGN255E,JOIN2574]
      bool _t255F#1 = phi(_t255D,_t2560)
      if _t255F then goto ASSIGN2564 else goto JOIN2568
    ASSIGN2564:  preds = [COND2562]
      real _t2563#3 = +inf;
      tensor[3] _t2565#1 = <tensor[3]>[_t2563,_t2563,_t2563];
      return _t2565
      goto JOIN2568
    JOIN2568:  preds = [*RETURN(_t2565)2567,COND2562]
      return up2541
    ASSIGN256B:  preds = [COND255C]
      real _t256A#2 = VIndex<3,1>(up2541);
      bool _t256C#1 = EQ<real>(_t256A,_t256A);
      bool _t256E#1 = BNot(_t256C);
      if _t256E then goto ASSIGN2572 else goto ASSIGN2576
    ASSIGN2572:  preds = [COND2570]
      bool _t2571#1 = true;
      goto JOIN2574
    JOIN2574:  preds = [ASSIGN2572,ASSIGN2579]
      bool _t2560#1 = phi(_t2571,_t2573)
      goto JOIN2561
    ASSIGN2576:  preds = [COND2570]
      real _t2575#2 = VIndex<3,2>(up2541);
      bool _t2577#1 = EQ<real>(_t2575,_t2575);
      bool _t2573#1 = BNot(_t2577);
      goto JOIN2574
}
  function tensor[3,3] fPerp26ED (tensor[3] s26EE#2) {
    ENTRY26EF:  preds = []
      real zfuz26F0#1 = globals.zfuz23CD;
      real x26F2#5 = VIndex<3,0>(s26EE);
      real y26F4#1 = VIndex<3,1>(s26EE);
      real _t26F6#6 = 0.2e1;
      real _t26F8#1 = 0.3e1;
      real _t26FA#1 = 0.12e2;
      real op1_e3_l_1026FC#2 = RMul(x26F2,x26F2);
      real op1_e3_l_1126FF#1 = RMul(_t26F8,op1_e3_l_1026FC);
      real op1_e3_l_122702#3 = RSub(_t26F6,op1_e3_l_1126FF);
      real op1_e3_l_132705#1 = RMul(op1_e3_l_122702,op1_e3_l_122702);
      real op1_e3_l_142708#1 = RMul(x26F2,op1_e3_l_1026FC);
      real op1_e3_l_15270D#1 = RNeg(op1_e3_l_142708);
      real op1_e3_l_162710#1 = RMul(_t26F6,x26F2);
      real r2714#1 = RAdd(op1_e3_l_15270D,op1_e3_l_162710);
      real op1_e3_l_172713#1 = RAdd(r2714,y26F4);
      real op1_e3_l_182718#1 = RMul(_t26F6,op1_e3_l_132705);
      real r271C#1 = RMul(_t26FA,x26F2);
      real op1_e3_l_19271B#1 = RMul(r271C,op1_e3_l_172713);
      real _t2720#1 = RSub(op1_e3_l_182718,op1_e3_l_19271B);
      real _t2723#2 = RMul(_t26F6,op1_e3_l_122702);
      real _t2726#13 = 0.e0;
      tensor[3] _t2728#1 = <tensor[3]>[_t2720,_t2723,_t2726];
      tensor[3] _t272A#1 = <tensor[3]>[_t2723,_t26F6,_t2726];
      real _t272C#1 = RMul(_t26F6,zfuz26F0);
      tensor[3] _t272F#1 = <tensor[3]>[_t2726,_t2726,_t272C];
      tensor[3,3] H2731#1 = <tensor[3,3]>[_t2728,_t272A,_t272F];
      (real[3] evals2733#0,tensor[3][3] _t2734#1) = EigenVecs3x3(H2731);
      int _t2736#1 = 0;
      tensor[3] E22738#6 = Subscript<tensor[3][3]>(_t2734,_t2736);
      real r273B#1 = TensorIndex<tensor[3],[0]>(E22738);
      tensor[3] binopV273C#3 = VScale<3>(r273B,E22738);
      real r273D#1 = TensorIndex<tensor[3],[1]>(E22738);
      tensor[3] binopV273E#3 = VScale<3>(r273D,E22738);
      real r273F#1 = TensorIndex<tensor[3],[2]>(E22738);
      tensor[3] binopV2740#3 = VScale<3>(r273F,E22738);
      real realLit274A#3 = 0.1e1;
      real r274B#1 = VIndex<3,0>(binopV273C);
      real r274C#1 = RSub(realLit274A,r274B);
      real r274E#1 = VIndex<3,1>(binopV273C);
      real r274F#1 = RSub(_t2726,r274E);
      real r2750#1 = VIndex<3,2>(binopV273C);
      real r2751#1 = RSub(_t2726,r2750);
      tensor[3] tensor2752#3 = <tensor[3]>[r274C,r274F,r2751];
      real r2753#1 = VIndex<3,0>(binopV273E);
      real r2754#1 = RSub(_t2726,r2753);
      real r2755#1 = VIndex<3,1>(binopV273E);
      real r2756#1 = RSub(realLit274A,r2755);
      real r2757#1 = VIndex<3,2>(binopV273E);
      real r2758#1 = RSub(_t2726,r2757);
      tensor[3] tensor2759#3 = <tensor[3]>[r2754,r2756,r2758];
      real r275A#1 = VIndex<3,0>(binopV2740);
      real r275B#1 = RSub(_t2726,r275A);
      real r275C#1 = VIndex<3,1>(binopV2740);
      real r275D#1 = RSub(_t2726,r275C);
      real r275E#1 = VIndex<3,2>(binopV2740);
      real r275F#1 = RSub(realLit274A,r275E);
      tensor[3] tensor2760#3 = <tensor[3]>[r275B,r275D,r275F];
      tensor[3,3] m2749#1 = <tensor[3,3]>[tensor2752,tensor2759,tensor2760];
      real vdot277C#1 = VDot<3>(tensor2752,tensor2752);
      real vdot277E#1 = VDot<3>(tensor2759,tensor2759);
      real r277F#1 = RAdd(vdot277C,vdot277E);
      real vdot2781#1 = VDot<3>(tensor2760,tensor2760);
      real t277A#2 = RAdd(r277F,vdot2781);
      bool _t278B#1 = EQ<real>(t277A,t277A);
      bool _t278D#1 = BNot(_t278B);
      if _t278D then goto ASSIGN29EB else goto JOIN2798
    ASSIGN29EB:  preds = [COND278F]
      tensor[3] tensor2792#3 = <tensor[3]>[_t2726,_t2726,_t2726];
      tensor[3,3] _t2790#1 = <tensor[3,3]>[tensor2792,tensor2792,tensor2792];
      return _t2790
      goto JOIN2798
    JOIN2798:  preds = [*RETURN(_t2790)2797,COND278F]
      return m2749
}
  function int sum2980 (particle P2981#1) {
    ENTRY2982:  preds = []
      int _t2983#1 = P2981.test;
      return _t2983
}
  function int max2988 (particle P2989#1) {
    ENTRY298A:  preds = []
      int _t298B#1 = P2989.steps;
      return _t298B
}
  function int sum2990 (particle P2991#1) {
    ENTRY2992:  preds = []
      int _t2993#1 = P2991.testp;
      return _t2993
}
  function bool all2998 (particle P2999#1) {
    ENTRY299A:  preds = []
      bool _t299B#1 = P2999.found;
      return _t299B
}
  function real max29A0 (particle P29A1#1) {
    ENTRY29A2:  preds = []
      tensor[3] _t29A3#2 = P29A1.step;
      real op1_e3_l_129A5#1 = VDot<3>(_t29A3,_t29A3);
      real _t29A8#1 = Sqrt(op1_e3_l_129A5);
      return _t29A8
}
## input initialization
  ENTRY23CF:  preds = []
    real rad23D0#5 = 0.1e-1;
    globals.rad23C8 = rad23D0;
    globals.eps23C9 = rad23D0;
    real v023D4#1 = 0.625e-1;
    globals.v023CA = v023D4;
    globals.fBias23CB = rad23D0;
    globals.fStren23CC = rad23D0;
    globals.zfuz23CD = rad23D0;
    return
## global-variable initialization
  ENTRY23DB:  preds = []
    femData:Mesh meshData23DC#2 = globals.meshData23C5;
    int _t23DE#1 = 0;
    int _t23E0#1 = 1;
    int _t23E2#1 = ExtractFemItem<int,NumCell(Mesh)>(meshData23DC);
    int _t23E4#1 = ISub(_t23E2,_t23E0);
    int[] _t23E6#1 = Range(_t23DE,_t23E4);
    femData:MeshCell[] _t23E8#1 = <femData:MeshCell[]>{};
  FOREACH23EB:  preds = [ASSIGN23E9,NEXT23F1]
    foreach (_t23EA in _t23E6) on exit goto RETURN23F2
      femData:MeshCell[] _t23EF#1 = phi(_t23E8,_t23EE)
    femData:MeshCell _t23EC#1 = LoadFem<femData:MeshCell>(meshData23DC,_t23EA);
    femData:MeshCell[] _t23EE#1 = Append<femData:MeshCell>(_t23EF,_t23EC);
    goto FOREACH23EB
  RETURN23F2:  preds = [FOREACH23EB]
    return
## strand
  strand particle (tensor[3] pos023F3#2, real hh023F4#1) in 3D
    state:
      output tensor[3] pos;
      output tensor[3] _pos;
      real hh;
      tensor[3] step;
      bool found;
      int nfs;
      int test;
      int testp;
      int steps;
    state init
      ENTRY23FE:  preds = []
        real realLit2400#3 = 0.e0;
        tensor[3] step23FF#1 = <tensor[3]>[realLit2400,realLit2400,realLit2400];
        bool found2404#1 = false;
        int nfs2406#3 = 0;
        int test2408#1 = 1;
        self.pos = pos023F3;
        self._pos = pos023F3;
        self.hh = hh023F4;
        self.step = step23FF;
        self.found = found2404;
        self.nfs = nfs2406;
        self.test = test2408;
        self.testp = nfs2406;
        self.steps = nfs2406;
        return
    end state init
    method update
        ENTRY2414:  preds = []
          real rad2415#10 = globals.rad23C8;
          real eps2417#1 = globals.eps23C9;
          real fBias2419#3 = globals.fBias23CB;
          real fStren241B#3 = globals.fStren23CC;
          real zfuz241D#3 = globals.zfuz23CD;
          tensor[3] pos241F#10 = self.pos;
          real hh2421#7 = self.hh;
          bool found2423#3 = self.found;
          int nfs2425#3 = self.nfs;
          int testp2427#2 = self.testp;
          int steps2429#1 = self.steps;
          int _t242B#4 = 1;
          int steps242D#4 = IAdd(steps2429,_t242B);
          real _t242F#19 = 0.e0;
          tensor[3] _t2431#7 = <tensor[3]>[_t242F,_t242F,_t242F];
          tensor[3] mid2433#3 = VSub<3>(pos241F,_t2431);
          real _t2436#1 = VIndex<3,0>(mid2433);
          real _t2438#1 = Abs<real>(_t2436);
          real _t243B#9 = 0.4e1;
          bool _t243D#1 = LTE<real>(_t2438,_t243B);
          if _t243D then goto ASSIGN2441 else goto ASSIGN296E
        ASSIGN2441:  preds = [COND243F]
          real _t2440#1 = VIndex<3,1>(mid2433);
          real _t2442#1 = Abs<real>(_t2440);
          bool _t2445#1 = LTE<real>(_t2442,_t243B);
          if _t2445 then goto ASSIGN2449 else goto ASSIGN296D
        ASSIGN2449:  preds = [COND2447]
          real _t2448#1 = VIndex<3,2>(mid2433);
          real _t244A#1 = Abs<real>(_t2448);
          bool _t244D#1 = LTE<real>(_t244A,_t243B);
          goto JOIN2451
        JOIN2451:  preds = [ASSIGN244E,ASSIGN296D]
          bool _t244F#1 = phi(_t244D,_t2450)
          goto JOIN2454
        JOIN2454:  preds = [JOIN2451,ASSIGN296E]
          bool _t2452#1 = phi(_t244F,_t2453)
          if _t2452 then goto ASSIGN2457 else goto ASSIGN296C
        ASSIGN2457:  preds = [COND2455]
          real _t2456#7 = VIndex<3,0>(pos241F);
          bool _t2458#1 = EQ<real>(_t2456,_t2456);
          bool _t245A#1 = BNot(_t2458);
          if _t245A then goto ASSIGN245E else goto ASSIGN295D
        ASSIGN245E:  preds = [COND245C]
          bool _t245D#1 = true;
          goto JOIN2461
        JOIN2461:  preds = [ASSIGN245E,JOIN2966]
          bool _t245F#1 = phi(_t245D,_t2460)
          bool _t2462#1 = BNot(_t245F);
          if _t2462 then goto ASSIGN2466 else goto ASSIGN295B
        ASSIGN2466:  preds = [COND2464]
          real y2465#1 = VIndex<3,1>(pos241F);
          real z2467#1 = VIndex<3,2>(pos241F);
          real _t2469#7 = 0.2e1;
          real _t246B#1 = 0.3e1;
          real _t246D#1 = 0.12e2;
          real op1_e3_l_10246F#2 = RMul(_t2456,_t2456);
          real op1_e3_l_112472#1 = RMul(_t246B,op1_e3_l_10246F);
          real op1_e3_l_122475#3 = RSub(_t2469,op1_e3_l_112472);
          real op1_e3_l_132478#1 = RMul(op1_e3_l_122475,op1_e3_l_122475);
          real op1_e3_l_14247B#1 = RMul(_t2456,op1_e3_l_10246F);
          real op1_e3_l_152480#1 = RNeg(op1_e3_l_14247B);
          real op1_e3_l_162483#1 = RMul(_t2469,_t2456);
          real r2487#1 = RAdd(op1_e3_l_152480,op1_e3_l_162483);
          real op1_e3_l_172486#3 = RAdd(r2487,y2465);
          real op1_e3_l_18248B#1 = RMul(_t2469,op1_e3_l_132478);
          real r248F#1 = RMul(_t246D,_t2456);
          real op1_e3_l_19248E#1 = RMul(r248F,op1_e3_l_172486);
          real _t2493#1 = RSub(op1_e3_l_18248B,op1_e3_l_19248E);
          real _t2496#3 = RMul(_t2469,op1_e3_l_122475);
          tensor[3] _t2499#1 = <tensor[3]>[_t2493,_t2496,_t242F];
          tensor[3] _t249B#1 = <tensor[3]>[_t2496,_t2469,_t242F];
          real _t249D#2 = RMul(_t2469,zfuz241D);
          tensor[3] _t24A0#1 = <tensor[3]>[_t242F,_t242F,_t249D];
          tensor[3,3] H24A2#1 = <tensor[3,3]>[_t2499,_t249B,_t24A0];
          real _t24A4#1 = RMul(_t2496,op1_e3_l_172486);
          real _t24A9#1 = RMul(_t2469,op1_e3_l_172486);
          real _t24AC#1 = RMul(_t249D,z2467);
          tensor[3] g24B1#2 = <tensor[3]>[_t24A4,_t24A9,_t24AC];
          real[3] _t24B3#1 = EigenVals3x3(H24A2);
          int _t24B5#1 = 0;
          real _t24B7#1 = Subscript<real[3]>(_t24B3,_t24B5);
          real op1_e3_l_324B9#1 = VDot<3>(g24B1,g24B1);
          real op1_e3_l_424BC#1 = Sqrt(op1_e3_l_324B9);
          real op1_e3_l_524BF#1 = RAdd(fBias2419,op1_e3_l_424BC);
          real _t24C2#1 = RDiv(_t24B7,op1_e3_l_524BF);
          bool _t24C5#1 = GTE<real>(_t24C2,fStren241B);
          goto JOIN24C9
        JOIN24C9:  preds = [ASSIGN24C6,ASSIGN295B]
          bool _t24C7#1 = phi(_t24C5,_t24C8)
          goto JOIN24CC
        JOIN24CC:  preds = [JOIN24C9,ASSIGN296C]
          bool _t24CA#1 = phi(_t24C7,_t24CB)
          bool _t24CD#1 = BNot(_t24CA);
          if _t24CD then goto DIE24D0 else goto JOIN24D1
        DIE24D0:  preds = [COND24CF]
          die
          goto JOIN24D1
        JOIN24D1:  preds = [*DIE24D0,COND24CF]
          bool _t24D2#1 = BNot(found2423);
          if _t24D2 then goto ASSIGN257A else goto ASSIGN25CC
        ASSIGN257A:  preds = [COND24D4]
          tensor[3] step24D5#4 = fStep24D6 (pos241F);
          tensor[3] pos257B#4 = VAdd<3>(pos241F,step24D5);
          real _t257E#2 = VIndex<3,0>(pos257B);
          bool _t2580#1 = EQ<real>(_t257E,_t257E);
          bool _t2582#1 = BNot(_t2580);
          if _t2582 then goto ASSIGN2586 else goto ASSIGN25BC
        ASSIGN2586:  preds = [COND2584]
          bool _t2585#1 = true;
          goto JOIN2589
        JOIN2589:  preds = [ASSIGN2586,JOIN25C5]
          bool _t2587#1 = phi(_t2585,_t2588)
          if _t2587 then goto DIE258B else goto JOIN258C
        DIE258B:  preds = [COND258A]
          die
          goto JOIN258C
        JOIN258C:  preds = [*DIE258B,COND258A]
          real op1_e3_l_2258D#1 = VDot<3>(step24D5,step24D5);
          real op1_e3_l_32590#1 = Sqrt(op1_e3_l_2258D);
          real _t2593#1 = RDiv(op1_e3_l_32590,rad2415);
          bool _t2596#1 = GT<real>(_t2593,eps2417);
          if _t2596 then goto ASSIGN259A else goto ASSIGN25BA
        ASSIGN259A:  preds = [COND2598]
          int nfs2599#2 = IAdd(nfs2425,_t242B);
          int _t259B#1 = 10;
          bool _t259D#1 = GT<int>(nfs2599,_t259B);
          if _t259D then goto DIE25A0 else goto JOIN25A1
        DIE25A0:  preds = [COND259F]
          die
          goto JOIN25A1
        JOIN25A1:  preds = [*DIE25A0,COND259F]
          goto JOIN25A6
        JOIN25A6:  preds = [JOIN25A1,ASSIGN25BA]
          int testp25A2#1 = phi(testp2427,_t242B)
          int nfs25A3#1 = phi(nfs2599,nfs2425)
          bool found25A4#1 = phi(found2423,found25A5)
          goto JOIN25B0
        JOIN25B0:  preds = [JOIN25A6,JOIN2912]
          int testp25A7#1 = phi(testp25A2,testp2427)
          int nfs25A8#1 = phi(nfs25A3,nfs2425)
          bool found25A9#1 = phi(found25A4,found2423)
          tensor[3] step25AA#1 = phi(step24D5,up25AB)
          real hh25AC#1 = phi(hh2421,hh25AD)
          tensor[3] pos25AE#2 = phi(pos257B,pos25AF)
          self.pos = pos25AE;
          self._pos = pos25AE;
          self.hh = hh25AC;
          self.step = step25AA;
          self.found = found25A9;
          self.nfs = nfs25A8;
          self.testp = testp25A7;
          self.steps = steps242D;
          active
        ASSIGN25BA:  preds = [COND2598]
          bool found25A5#1 = true;
          goto JOIN25A6
        ASSIGN25BC:  preds = [COND2584]
          real _t25BB#2 = VIndex<3,1>(pos257B);
          bool _t25BD#1 = EQ<real>(_t25BB,_t25BB);
          bool _t25BF#1 = BNot(_t25BD);
          if _t25BF then goto ASSIGN25C3 else goto ASSIGN25C7
        ASSIGN25C3:  preds = [COND25C1]
          bool _t25C2#1 = true;
          goto JOIN25C5
        JOIN25C5:  preds = [ASSIGN25C3,ASSIGN25CA]
          bool _t2588#1 = phi(_t25C2,_t25C4)
          goto JOIN2589
        ASSIGN25C7:  preds = [COND25C1]
          real _t25C6#2 = VIndex<3,2>(pos257B);
          bool _t25C8#1 = EQ<real>(_t25C6,_t25C6);
          bool _t25C4#1 = BNot(_t25C8);
          goto JOIN25C5
        ASSIGN25CC:  preds = [COND24D4]
          tensor[3] _t25CB#1 = fStep24D6 (pos241F);
          tensor[3] pos25CD#16 = VAdd<3>(pos241F,_t25CB);
          real _t25D0#2 = VIndex<3,0>(pos25CD);
          bool _t25D2#1 = EQ<real>(_t25D0,_t25D0);
          bool _t25D4#1 = BNot(_t25D2);
          if _t25D4 then goto ASSIGN25D8 else goto ASSIGN294C
        ASSIGN25D8:  preds = [COND25D6]
          bool _t25D7#1 = true;
          goto JOIN25DB
        JOIN25DB:  preds = [ASSIGN25D8,JOIN2955]
          bool _t25D9#1 = phi(_t25D7,_t25DA)
          if _t25D9 then goto DIE25DD else goto JOIN25DE
        DIE25DD:  preds = [COND25DC]
          die
          goto JOIN25DE
        JOIN25DE:  preds = [*DIE25DD,COND25DC]
          int nn25E4#4 = 0;
          particle[] _t25E6#1 = SphereQuery<3,particle>(pos25CD,rad2415);
        FOREACH25E9:  preds = [ASSIGN25E7,NEXT263D]
          foreach (P25E8 in _t25E6) on exit goto ASSIGN263F
            int nn263B#3 = phi(nn25E4,nn263A)
            tensor[3] force2637#4 = phi(_t2431,force2636)
            real oldE2603#2 = phi(_t242F,oldE2602)
          tensor[3] _t25EA#1 = P25E8.pos;
          real _t25EC#3 = 0.1e1;
          tensor[3] op1_e3_l_825EE#5 = VSub<3>(_t25EA,pos25CD);
          real op1_e3_l_1025F1#1 = VDot<3>(op1_e3_l_825EE,op1_e3_l_825EE);
          real op1_e3_l_1125F4#2 = Sqrt(op1_e3_l_1025F1);
          real op1_e3_l_1225F7#1 = RDiv(op1_e3_l_1125F4,rad2415);
          real op1_e3_l_1325FA#3 = RSub(_t25EC,op1_e3_l_1225F7);
          real _Pow_225FE#3 = RMul(op1_e3_l_1325FA,op1_e3_l_1325FA);
          real op1_e3_l_1425FD#1 = RMul(_Pow_225FE,_Pow_225FE);
          real oldE2602#1 = RAdd(oldE2603,op1_e3_l_1425FD);
          real _t2606#1 = -0.4e1;
          real op1_e3_l_242608#1 = RMul(op1_e3_l_1325FA,_Pow_225FE);
          real op1_e3_l_25260D#1 = RDiv(_t25EC,rad2415);
          real r2611#1 = TensorIndex<tensor[3],[0]>(op1_e3_l_825EE);
          real r2612#1 = RMul(_t2606,op1_e3_l_242608);
          real r2613#3 = RMul(r2612,op1_e3_l_25260D);
          real r2614#1 = RMul(r2613,r2611);
          real r2615#1 = TensorIndex<tensor[3],[1]>(op1_e3_l_825EE);
          real r2616#1 = RMul(r2613,r2615);
          real r2617#1 = TensorIndex<tensor[3],[2]>(op1_e3_l_825EE);
          real r2618#1 = RMul(r2613,r2617);
          real r2625#3 = RDiv(_t25EC,op1_e3_l_1125F4);
          real r2627#1 = RMul(r2625,r2614);
          real r2629#1 = RMul(r2625,r2616);
          real r262B#1 = RMul(r2625,r2618);
          tensor[3] op1_e3_l_342623#1 = <tensor[3]>[r2627,r2629,r262B];
          tensor[3] force2636#1 = VAdd<3>(force2637,op1_e3_l_342623);
          int nn263A#1 = IAdd(nn263B,_t242B);
          goto FOREACH25E9
        ASSIGN263F:  preds = [FOREACH25E9]
          bool _t263E#1 = EQ<int>(nn25E4,nn263B);
          if _t263E then goto ASSIGN2642 else goto JOIN26EB
        ASSIGN2642:  preds = [COND2640]
          real _t2641#1 = 0.5e0;
          real _t2643#1 = RMul(_t2641,rad2415);
          tensor[3] _t2646#1 = <tensor[3]>[_t2643,_t242F,_t242F];
          tensor[3] npos2648#7 = VAdd<3>(pos25CD,_t2646);
          tensor[3] mid264D#3 = VSub<3>(npos2648,_t2431);
          real _t2650#1 = VIndex<3,0>(mid264D);
          real _t2652#1 = Abs<real>(_t2650);
          bool _t2655#1 = LTE<real>(_t2652,_t243B);
          if _t2655 then goto ASSIGN2659 else goto ASSIGN294A
        ASSIGN2659:  preds = [COND2657]
          real _t2658#1 = VIndex<3,1>(mid264D);
          real _t265A#1 = Abs<real>(_t2658);
          bool _t265D#1 = LTE<real>(_t265A,_t243B);
          if _t265D then goto ASSIGN2661 else goto ASSIGN2949
        ASSIGN2661:  preds = [COND265F]
          real _t2660#1 = VIndex<3,2>(mid264D);
          real _t2662#1 = Abs<real>(_t2660);
          bool _t2665#1 = LTE<real>(_t2662,_t243B);
          goto JOIN2669
        JOIN2669:  preds = [ASSIGN2666,ASSIGN2949]
          bool _t2667#1 = phi(_t2665,_t2668)
          goto JOIN266C
        JOIN266C:  preds = [JOIN2669,ASSIGN294A]
          bool _t266A#1 = phi(_t2667,_t266B)
          if _t266A then goto ASSIGN266F else goto ASSIGN2948
        ASSIGN266F:  preds = [COND266D]
          real _t266E#7 = VIndex<3,0>(npos2648);
          bool _t2670#1 = EQ<real>(_t266E,_t266E);
          bool _t2672#1 = BNot(_t2670);
          if _t2672 then goto ASSIGN2676 else goto ASSIGN2939
        ASSIGN2676:  preds = [COND2674]
          bool _t2675#1 = true;
          goto JOIN2679
        JOIN2679:  preds = [ASSIGN2676,JOIN2942]
          bool _t2677#1 = phi(_t2675,_t2678)
          bool _t267A#1 = BNot(_t2677);
          if _t267A then goto ASSIGN267E else goto ASSIGN2937
        ASSIGN267E:  preds = [COND267C]
          real y267D#1 = VIndex<3,1>(npos2648);
          real z267F#1 = VIndex<3,2>(npos2648);
          real _t2681#7 = 0.2e1;
          real _t2683#1 = 0.3e1;
          real _t2685#1 = 0.12e2;
          real op1_e3_l_102687#2 = RMul(_t266E,_t266E);
          real op1_e3_l_11268A#1 = RMul(_t2683,op1_e3_l_102687);
          real op1_e3_l_12268D#3 = RSub(_t2681,op1_e3_l_11268A);
          real op1_e3_l_132690#1 = RMul(op1_e3_l_12268D,op1_e3_l_12268D);
          real op1_e3_l_142693#1 = RMul(_t266E,op1_e3_l_102687);
          real op1_e3_l_152698#1 = RNeg(op1_e3_l_142693);
          real op1_e3_l_16269B#1 = RMul(_t2681,_t266E);
          real r269F#1 = RAdd(op1_e3_l_152698,op1_e3_l_16269B);
          real op1_e3_l_17269E#3 = RAdd(r269F,y267D);
          real op1_e3_l_1826A3#1 = RMul(_t2681,op1_e3_l_132690);
          real r26A7#1 = RMul(_t2685,_t266E);
          real op1_e3_l_1926A6#1 = RMul(r26A7,op1_e3_l_17269E);
          real _t26AB#1 = RSub(op1_e3_l_1826A3,op1_e3_l_1926A6);
          real _t26AE#3 = RMul(_t2681,op1_e3_l_12268D);
          tensor[3] _t26B1#1 = <tensor[3]>[_t26AB,_t26AE,_t242F];
          tensor[3] _t26B3#1 = <tensor[3]>[_t26AE,_t2681,_t242F];
          real _t26B5#2 = RMul(_t2681,zfuz241D);
          tensor[3] _t26B8#1 = <tensor[3]>[_t242F,_t242F,_t26B5];
          tensor[3,3] H26BA#1 = <tensor[3,3]>[_t26B1,_t26B3,_t26B8];
          real _t26BC#1 = RMul(_t26AE,op1_e3_l_17269E);
          real _t26C1#1 = RMul(_t2681,op1_e3_l_17269E);
          real _t26C4#1 = RMul(_t26B5,z267F);
          tensor[3] g26C9#2 = <tensor[3]>[_t26BC,_t26C1,_t26C4];
          real[3] _t26CB#1 = EigenVals3x3(H26BA);
          real _t26CD#1 = Subscript<real[3]>(_t26CB,nn25E4);
          real op1_e3_l_326CF#1 = VDot<3>(g26C9,g26C9);
          real op1_e3_l_426D2#1 = Sqrt(op1_e3_l_326CF);
          real op1_e3_l_526D5#1 = RAdd(fBias2419,op1_e3_l_426D2);
          real _t26D8#1 = RDiv(_t26CD,op1_e3_l_526D5);
          bool _t26DB#1 = GTE<real>(_t26D8,fStren241B);
          goto JOIN26DF
        JOIN26DF:  preds = [ASSIGN26DC,ASSIGN2937]
          bool _t26DD#1 = phi(_t26DB,_t26DE)
          goto JOIN26E2
        JOIN26E2:  preds = [JOIN26DF,ASSIGN2948]
          bool _t26E0#1 = phi(_t26DD,_t26E1)
          if _t26E0 then goto NEW26E4 else goto JOIN26E5
        NEW26E4:  preds = [COND26E3]
          new particle(npos2648,hh2421);
          goto JOIN26E5
        JOIN26E5:  preds = [NEW26E4,COND26E3]
          self.pos = pos25CD;
          self._pos = pos25CD;
          self.step = _t2431;
          self.steps = steps242D;
          active
          goto JOIN26EB
        JOIN26EB:  preds = [*ACTIVE26EA,COND2640]
          tensor[3,3] _t26EC#3 = fPerp26ED (pos25CD);
          tensor[3] projParam279C#1 = ProjectLast<tensor[3,3],[0]>(_t26EC);
          real vdot279D#2 = VDot<3>(projParam279C,force2637);
          tensor[3] projParam279E#1 = ProjectLast<tensor[3,3],[1]>(_t26EC);
          real vdot279F#2 = VDot<3>(projParam279E,force2637);
          tensor[3] projParam27A0#1 = ProjectLast<tensor[3,3],[2]>(_t26EC);
          real vdot27A1#2 = VDot<3>(projParam27A0,force2637);
          tensor[3] op1_e3_l_3279B#4 = <tensor[3]>[vdot279D,vdot279F,vdot27A1];
          tensor[3] es27AA#1 = VScale<3>(hh2421,op1_e3_l_3279B);
          real op1_e3_l_527AD#1 = VDot<3>(op1_e3_l_3279B,op1_e3_l_3279B);
          real r27B1#1 = RMul(hh2421,hh2421);
          real op1_e3_l_627B0#1 = RMul(r27B1,op1_e3_l_527AD);
          real _t27B5#2 = Sqrt(op1_e3_l_627B0);
          bool _t27B8#1 = GT<real>(_t27B5,rad2415);
          if _t27B8 then goto ASSIGN27BD else goto JOIN27D4
        ASSIGN27BD:  preds = [COND27BA]
          real op1_e3_l_1027BB#1 = RDiv(rad2415,_t27B5);
          real hh27BE#4 = RMul(hh2421,op1_e3_l_1027BB);
          real r27C4#1 = RMul(hh27BE,vdot279D);
          real r27C6#1 = RMul(hh27BE,vdot279F);
          real r27C8#1 = RMul(hh27BE,vdot27A1);
          tensor[3] es27C1#1 = <tensor[3]>[r27C4,r27C6,r27C8];
          goto JOIN27D4
        JOIN27D4:  preds = [ASSIGN27D1,COND27BA]
          tensor[3] es27D2#8 = phi(es27C1,es27AA)
          real hh27D3#2 = phi(hh27BE,hh2421)
          tensor[3] samplePos27D5#1 = VAdd<3>(pos25CD,es27D2);
          tensor[3] fs27DA#4 = fStep24D6 (samplePos27D5);
          real op1_e3_l_227DC#1 = VDot<3>(fs27DA,fs27DA);
          real op1_e3_l_327DF#1 = VDot<3>(es27D2,es27D2);
          real op1_e3_l_427E2#1 = Sqrt(op1_e3_l_227DC);
          real op1_e3_l_527E5#2 = Sqrt(op1_e3_l_327DF);
          real _t27E8#1 = RDiv(op1_e3_l_427E2,op1_e3_l_527E5);
          real _t27EB#5 = 0.5e0;
          bool _t27ED#1 = GT<real>(_t27E8,_t27EB);
          if _t27ED then goto ASSIGN27F2 else goto JOIN27FA
        ASSIGN27F2:  preds = [COND27EF]
          real hh27F0#1 = RMul(hh27D3,_t27EB);
          self.pos = pos25CD;
          self._pos = pos25CD;
          self.hh = hh27F0;
          self.step = _t2431;
          self.steps = steps242D;
          active
          goto JOIN27FA
        JOIN27FA:  preds = [*ACTIVE27F8,COND27EF]
          real hh27F9#2 = phi(hh27D3)
          tensor[3] up25AB#1 = VAdd<3>(fs27DA,es27D2);
          tensor[3] v27FF#1 = VAdd<3>(pos25CD,fs27DA);
          tensor[3] pos27FD#4 = VAdd<3>(v27FF,es27D2);
          particle[] _t2804#1 = SphereQuery<3,particle>(pos27FD,rad2415);
        FOREACH2807:  preds = [ASSIGN2805,NEXT2824]
          foreach (P2806 in _t2804) on exit goto ASSIGN2827
            real accum2821#2 = phi(_t242F,accum2820)
          tensor[3] _t2808#1 = P2806.pos;
          real _t280A#1 = 0.1e1;
          tensor[3] op1_e3_l_10280C#2 = VSub<3>(pos27FD,_t2808);
          real op1_e3_l_12280F#1 = VDot<3>(op1_e3_l_10280C,op1_e3_l_10280C);
          real op1_e3_l_132812#1 = Sqrt(op1_e3_l_12280F);
          real op1_e3_l_142815#1 = RDiv(op1_e3_l_132812,rad2415);
          real op1_e3_l_152818#2 = RSub(_t280A,op1_e3_l_142815);
          real _Pow_2281C#2 = RMul(op1_e3_l_152818,op1_e3_l_152818);
          real op1_e3_l_16281B#1 = RMul(_Pow_2281C,_Pow_2281C);
          real accum2820#1 = RAdd(accum2821,op1_e3_l_16281B);
          goto FOREACH2807
        ASSIGN2827:  preds = [FOREACH2807]
          real _t2825#1 = RSub(accum2821,oldE2603);
          tensor[3] op1_e3_l_122828#1 = VSub<3>(pos27FD,pos25CD);
          tensor[3] op1_e3_l_13282B#1 = VNeg<3>(op1_e3_l_3279B);
          real op1_e3_l_14282E#1 = VDot<3>(op1_e3_l_122828,op1_e3_l_13282B);
          real _t2831#1 = RMul(_t27EB,op1_e3_l_14282E);
          bool _t2834#1 = GT<real>(_t2825,_t2831);
          if _t2834 then goto ASSIGN2839 else goto JOIN2841
        ASSIGN2839:  preds = [COND2836]
          real hh2837#1 = RMul(hh27F9,_t27EB);
          self.pos = pos25CD;
          self._pos = pos25CD;
          self.hh = hh2837;
          self.step = _t2431;
          self.steps = steps242D;
          active
          goto JOIN2841
        JOIN2841:  preds = [*ACTIVE283F,COND2836]
          real hh2840#1 = phi(hh27F9)
          tensor[3] pos25AF#5 = phi(pos27FD)
          real _t2842#1 = 0.11e1;
          real hh25AD#2 = RMul(hh2840,_t2842);
          real _t2846#2 = VIndex<3,0>(pos25AF);
          bool _t2848#1 = EQ<real>(_t2846,_t2846);
          bool _t284A#1 = BNot(_t2848);
          if _t284A then goto ASSIGN284E else goto ASSIGN2928
        ASSIGN284E:  preds = [COND284C]
          bool _t284D#1 = true;
          goto JOIN2851
        JOIN2851:  preds = [ASSIGN284E,JOIN2931]
          bool _t284F#1 = phi(_t284D,_t2850)
          if _t284F then goto DIE2853 else goto JOIN2854
        DIE2853:  preds = [COND2852]
          die
          goto JOIN2854
        JOIN2854:  preds = [*DIE2853,COND2852]
          int _t2855#1 = 5;
          bool _t2857#1 = LT<int>(nn263B,_t2855);
          if _t2857 then goto ASSIGN285D else goto JOIN2912
        ASSIGN285D:  preds = [COND2859]
          real realLit285B#1 = 0.1e1;
          real op1_e3_l_7285A#3 = RDiv(realLit285B,op1_e3_l_527E5);
          real r2860#1 = TensorIndex<tensor[3],[0]>(es27D2);
          real r2861#3 = RMul(_t27EB,rad2415);
          real r2862#1 = RMul(r2861,r2860);
          real r2863#1 = RMul(r2862,op1_e3_l_7285A);
          real r2864#1 = TensorIndex<tensor[3],[1]>(es27D2);
          real r2865#1 = RMul(r2861,r2864);
          real r2866#1 = RMul(r2865,op1_e3_l_7285A);
          real r2867#1 = TensorIndex<tensor[3],[2]>(es27D2);
          real r2868#1 = RMul(r2861,r2867);
          real r2869#1 = RMul(r2868,op1_e3_l_7285A);
          tensor[3] op1_e3_l_8285F#1 = <tensor[3]>[r2863,r2866,r2869];
          tensor[3] npos2876#7 = VAdd<3>(pos25AF,op1_e3_l_8285F);
          tensor[3] mid2879#3 = VSub<3>(npos2876,_t2431);
          real _t287C#1 = VIndex<3,0>(mid2879);
          real _t287E#1 = Abs<real>(_t287C);
          bool _t2881#1 = LTE<real>(_t287E,_t243B);
          if _t2881 then goto ASSIGN2885 else goto ASSIGN2926
        ASSIGN2885:  preds = [COND2883]
          real _t2884#1 = VIndex<3,1>(mid2879);
          real _t2886#1 = Abs<real>(_t2884);
          bool _t2889#1 = LTE<real>(_t2886,_t243B);
          if _t2889 then goto ASSIGN288D else goto ASSIGN2925
        ASSIGN288D:  preds = [COND288B]
          real _t288C#1 = VIndex<3,2>(mid2879);
          real _t288E#1 = Abs<real>(_t288C);
          bool _t2891#1 = LTE<real>(_t288E,_t243B);
          goto JOIN2895
        JOIN2895:  preds = [ASSIGN2892,ASSIGN2925]
          bool _t2893#1 = phi(_t2891,_t2894)
          goto JOIN2898
        JOIN2898:  preds = [JOIN2895,ASSIGN2926]
          bool _t2896#1 = phi(_t2893,_t2897)
          if _t2896 then goto ASSIGN289B else goto ASSIGN2924
        ASSIGN289B:  preds = [COND2899]
          real _t289A#7 = VIndex<3,0>(npos2876);
          bool _t289C#1 = EQ<real>(_t289A,_t289A);
          bool _t289E#1 = BNot(_t289C);
          if _t289E then goto ASSIGN28A2 else goto ASSIGN2915
        ASSIGN28A2:  preds = [COND28A0]
          bool _t28A1#1 = true;
          goto JOIN28A5
        JOIN28A5:  preds = [ASSIGN28A2,JOIN291E]
          bool _t28A3#1 = phi(_t28A1,_t28A4)
          bool _t28A6#1 = BNot(_t28A3);
          if _t28A6 then goto ASSIGN28AA else goto ASSIGN2913
        ASSIGN28AA:  preds = [COND28A8]
          real y28A9#1 = VIndex<3,1>(npos2876);
          real z28AB#1 = VIndex<3,2>(npos2876);
          real _t28AD#7 = 0.2e1;
          real _t28AF#1 = 0.3e1;
          real _t28B1#1 = 0.12e2;
          real op1_e3_l_1028B3#2 = RMul(_t289A,_t289A);
          real op1_e3_l_1128B6#1 = RMul(_t28AF,op1_e3_l_1028B3);
          real op1_e3_l_1228B9#3 = RSub(_t28AD,op1_e3_l_1128B6);
          real op1_e3_l_1328BC#1 = RMul(op1_e3_l_1228B9,op1_e3_l_1228B9);
          real op1_e3_l_1428BF#1 = RMul(_t289A,op1_e3_l_1028B3);
          real op1_e3_l_1528C4#1 = RNeg(op1_e3_l_1428BF);
          real op1_e3_l_1628C7#1 = RMul(_t28AD,_t289A);
          real r28CB#1 = RAdd(op1_e3_l_1528C4,op1_e3_l_1628C7);
          real op1_e3_l_1728CA#3 = RAdd(r28CB,y28A9);
          real op1_e3_l_1828CF#1 = RMul(_t28AD,op1_e3_l_1328BC);
          real r28D3#1 = RMul(_t28B1,_t289A);
          real op1_e3_l_1928D2#1 = RMul(r28D3,op1_e3_l_1728CA);
          real _t28D7#1 = RSub(op1_e3_l_1828CF,op1_e3_l_1928D2);
          real _t28DA#3 = RMul(_t28AD,op1_e3_l_1228B9);
          tensor[3] _t28DD#1 = <tensor[3]>[_t28D7,_t28DA,_t242F];
          tensor[3] _t28DF#1 = <tensor[3]>[_t28DA,_t28AD,_t242F];
          real _t28E1#2 = RMul(_t28AD,zfuz241D);
          tensor[3] _t28E4#1 = <tensor[3]>[_t242F,_t242F,_t28E1];
          tensor[3,3] H28E6#1 = <tensor[3,3]>[_t28DD,_t28DF,_t28E4];
          real _t28E8#1 = RMul(_t28DA,op1_e3_l_1728CA);
          real _t28ED#1 = RMul(_t28AD,op1_e3_l_1728CA);
          real _t28F0#1 = RMul(_t28E1,z28AB);
          tensor[3] g28F5#2 = <tensor[3]>[_t28E8,_t28ED,_t28F0];
          real[3] _t28F7#1 = EigenVals3x3(H28E6);
          real _t28F9#1 = Subscript<real[3]>(_t28F7,nn25E4);
          real op1_e3_l_328FB#1 = VDot<3>(g28F5,g28F5);
          real op1_e3_l_428FE#1 = Sqrt(op1_e3_l_328FB);
          real op1_e3_l_52901#1 = RAdd(fBias2419,op1_e3_l_428FE);
          real _t2904#1 = RDiv(_t28F9,op1_e3_l_52901);
          bool _t2907#1 = GTE<real>(_t2904,fStren241B);
          goto JOIN290B
        JOIN290B:  preds = [ASSIGN2908,ASSIGN2913]
          bool _t2909#1 = phi(_t2907,_t290A)
          goto JOIN290E
        JOIN290E:  preds = [JOIN290B,ASSIGN2924]
          bool _t290C#1 = phi(_t2909,_t290D)
          if _t290C then goto NEW2910 else goto JOIN2911
        NEW2910:  preds = [COND290F]
          new particle(npos2876,hh25AD);
          goto JOIN2911
        JOIN2911:  preds = [NEW2910,COND290F]
          goto JOIN2912
        JOIN2912:  preds = [JOIN2911,COND2859]
          goto JOIN25B0
        ASSIGN2913:  preds = [COND28A8]
          bool _t290A#1 = false;
          goto JOIN290B
        ASSIGN2915:  preds = [COND28A0]
          real _t2914#2 = VIndex<3,1>(npos2876);
          bool _t2916#1 = EQ<real>(_t2914,_t2914);
          bool _t2918#1 = BNot(_t2916);
          if _t2918 then goto ASSIGN291C else goto ASSIGN2920
        ASSIGN291C:  preds = [COND291A]
          bool _t291B#1 = true;
          goto JOIN291E
        JOIN291E:  preds = [ASSIGN291C,ASSIGN2923]
          bool _t28A4#1 = phi(_t291B,_t291D)
          goto JOIN28A5
        ASSIGN2920:  preds = [COND291A]
          real _t291F#2 = VIndex<3,2>(npos2876);
          bool _t2921#1 = EQ<real>(_t291F,_t291F);
          bool _t291D#1 = BNot(_t2921);
          goto JOIN291E
        ASSIGN2924:  preds = [COND2899]
          bool _t290D#1 = false;
          goto JOIN290E
        ASSIGN2925:  preds = [COND288B]
          bool _t2894#1 = false;
          goto JOIN2895
        ASSIGN2926:  preds = [COND2883]
          bool _t2897#1 = false;
          goto JOIN2898
        ASSIGN2928:  preds = [COND284C]
          real _t2927#2 = VIndex<3,1>(pos25AF);
          bool _t2929#1 = EQ<real>(_t2927,_t2927);
          bool _t292B#1 = BNot(_t2929);
          if _t292B then goto ASSIGN292F else goto ASSIGN2933
        ASSIGN292F:  preds = [COND292D]
          bool _t292E#1 = true;
          goto JOIN2931
        JOIN2931:  preds = [ASSIGN292F,ASSIGN2936]
          bool _t2850#1 = phi(_t292E,_t2930)
          goto JOIN2851
        ASSIGN2933:  preds = [COND292D]
          real _t2932#2 = VIndex<3,2>(pos25AF);
          bool _t2934#1 = EQ<real>(_t2932,_t2932);
          bool _t2930#1 = BNot(_t2934);
          goto JOIN2931
        ASSIGN2937:  preds = [COND267C]
          bool _t26DE#1 = false;
          goto JOIN26DF
        ASSIGN2939:  preds = [COND2674]
          real _t2938#2 = VIndex<3,1>(npos2648);
          bool _t293A#1 = EQ<real>(_t2938,_t2938);
          bool _t293C#1 = BNot(_t293A);
          if _t293C then goto ASSIGN2940 else goto ASSIGN2944
        ASSIGN2940:  preds = [COND293E]
          bool _t293F#1 = true;
          goto JOIN2942
        JOIN2942:  preds = [ASSIGN2940,ASSIGN2947]
          bool _t2678#1 = phi(_t293F,_t2941)
          goto JOIN2679
        ASSIGN2944:  preds = [COND293E]
          real _t2943#2 = VIndex<3,2>(npos2648);
          bool _t2945#1 = EQ<real>(_t2943,_t2943);
          bool _t2941#1 = BNot(_t2945);
          goto JOIN2942
        ASSIGN2948:  preds = [COND266D]
          bool _t26E1#1 = false;
          goto JOIN26E2
        ASSIGN2949:  preds = [COND265F]
          bool _t2668#1 = false;
          goto JOIN2669
        ASSIGN294A:  preds = [COND2657]
          bool _t266B#1 = false;
          goto JOIN266C
        ASSIGN294C:  preds = [COND25D6]
          real _t294B#2 = VIndex<3,1>(pos25CD);
          bool _t294D#1 = EQ<real>(_t294B,_t294B);
          bool _t294F#1 = BNot(_t294D);
          if _t294F then goto ASSIGN2953 else goto ASSIGN2957
        ASSIGN2953:  preds = [COND2951]
          bool _t2952#1 = true;
          goto JOIN2955
        JOIN2955:  preds = [ASSIGN2953,ASSIGN295A]
          bool _t25DA#1 = phi(_t2952,_t2954)
          goto JOIN25DB
        ASSIGN2957:  preds = [COND2951]
          real _t2956#2 = VIndex<3,2>(pos25CD);
          bool _t2958#1 = EQ<real>(_t2956,_t2956);
          bool _t2954#1 = BNot(_t2958);
          goto JOIN2955
        ASSIGN295B:  preds = [COND2464]
          bool _t24C8#1 = false;
          goto JOIN24C9
        ASSIGN295D:  preds = [COND245C]
          real _t295C#2 = VIndex<3,1>(pos241F);
          bool _t295E#1 = EQ<real>(_t295C,_t295C);
          bool _t2960#1 = BNot(_t295E);
          if _t2960 then goto ASSIGN2964 else goto ASSIGN2968
        ASSIGN2964:  preds = [COND2962]
          bool _t2963#1 = true;
          goto JOIN2966
        JOIN2966:  preds = [ASSIGN2964,ASSIGN296B]
          bool _t2460#1 = phi(_t2963,_t2965)
          goto JOIN2461
        ASSIGN2968:  preds = [COND2962]
          real _t2967#2 = VIndex<3,2>(pos241F);
          bool _t2969#1 = EQ<real>(_t2967,_t2967);
          bool _t2965#1 = BNot(_t2969);
          goto JOIN2966
        ASSIGN296C:  preds = [COND2455]
          bool _t24CB#1 = false;
          goto JOIN24CC
        ASSIGN296D:  preds = [COND2447]
          bool _t2450#1 = false;
          goto JOIN2451
        ASSIGN296E:  preds = [COND243F]
          bool _t2453#1 = false;
          goto JOIN2454
    end update
  end particle
## initial strand creation
  COLLECTION
    ENTRY296F:  preds = []
      tensor[3][] ipos2970#1 = globals.ipos23CE;
    FOREACH2973:  preds = [ASSIGN2971,NEXT2977]
      foreach (x2972 in ipos2970) on exit goto RETURN2978
      real _t2974#1 = 0.1e1;
      new particle(x2972,_t2974);
      goto FOREACH2973
    RETURN2978:  preds = [FOREACH2973]
      return
## global update
  ENTRY2979:  preds = []
    real rad297A#1 = globals.rad23C8;
    real eps297C#1 = globals.eps23C9;
    particle[] P297E#5 = Strands<particle,all>;
    (int res2986#1) = sum<int>(MAP sum2980 (P297E));
    (int res298E#1) = max<int>(MAP max2988 (P297E));
    (int res2996#1) = sum<int>(MAP sum2990 (P297E));
    (bool res299E#2) = all(MAP all2998 (P297E));
    (real res29AC#1) = max<real>(MAP max29A0 (P297E));
    string _t29AE#1 = "One run:";
    string _t29B0#3 = " and ";
    real _t29B2#2 = RDiv(res29AC,rad297A);
    bool _t29B5#2 = LT<real>(_t29B2,eps297C);
    string _t29B7#1 = " of ";
    string _t29B9#1 = "\n";
    Print<[string,bool,string,real,string,bool,string,int,string,int,string]>(_t29AE,res299E,_t29B0,_t29B2,_t29B0,_t29B5,_t29B0,res2996,_t29B7,res2986,_t29B9);
    if res299E then goto COND29BD else goto JOIN29C3
  COND29BD:  preds = [COND29BC]
    if _t29B5 then goto ASSIGN29BF else goto JOIN29C2
  ASSIGN29BF:  preds = [COND29BD]
    string _t29BE#1 = "CONVERGED!\n";
    Print<[string]>(_t29BE);
    StabilizeAll;
    goto JOIN29C2
  JOIN29C2:  preds = [MASSIGN29C1,COND29BD]
    goto JOIN29C3
  JOIN29C3:  preds = [JOIN29C2,COND29BC]
    int _t29C4#1 = 5000;
    bool _t29C6#1 = GT<int>(res298E,_t29C4);
    if _t29C6 then goto MASSIGN29C9 else goto JOIN29CA
  MASSIGN29C9:  preds = [COND29C8]
    StabilizeAll;
    goto JOIN29CA
  JOIN29CA:  preds = [MASSIGN29C9,COND29C8]
    continue
#### end program ####
##### low-ir: after contraction(2) ####
## properties
  GlobalInit StabilizeAll GlobalReduce StrandSets GlobalUpdate NewStrands StrandCommunication StrandsMayDie HasInputs HasGlobals ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
## globals
  input meshData23C5 (meshData) = <no-default>
  input 0space0853_intermedateGlobal23C6 (space) = <no-default>
  input 0data0855_intermedateGlobal23C7 (data) = <no-default>
  input rad23C8 (rad) = <default>
  input eps23C9 (eps) = <default>
  input v023CA (v0) = <default>
  input fBias23CB (fBias) = <default>
  input fStren23CC (fStren) = <default>
  input zfuz23CD (zfuz) = <default>
  input ipos23CE (ipos) = <no-default>
## functions
  function tensor[3] fStep24D6 (tensor[3] s24D7#3) {
    ENTRY24D8:  preds = []
      real zfuz24D9#1 = globals.zfuz23CD;
      real x24DB#5 = VIndex<3,0>(s24D7);
      real y24DD#1 = VIndex<3,1>(s24D7);
      real z24DF#1 = VIndex<3,2>(s24D7);
      real _t24E1#7 = 0.2e1;
      real _t24E3#1 = 0.3e1;
      real _t24E5#1 = 0.12e2;
      real op1_e3_l_1024E7#2 = RMul(x24DB,x24DB);
      real op1_e3_l_1124EA#1 = RMul(_t24E3,op1_e3_l_1024E7);
      real op1_e3_l_1224ED#3 = RSub(_t24E1,op1_e3_l_1124EA);
      real op1_e3_l_1324F0#1 = RMul(op1_e3_l_1224ED,op1_e3_l_1224ED);
      real op1_e3_l_1424F3#1 = RMul(x24DB,op1_e3_l_1024E7);
      real op1_e3_l_1524F8#1 = RNeg(op1_e3_l_1424F3);
      real op1_e3_l_1624FB#1 = RMul(_t24E1,x24DB);
      real r24FF#1 = RAdd(op1_e3_l_1524F8,op1_e3_l_1624FB);
      real op1_e3_l_1724FE#3 = RAdd(r24FF,y24DD);
      real op1_e3_l_182503#1 = RMul(_t24E1,op1_e3_l_1324F0);
      real r2507#1 = RMul(_t24E5,x24DB);
      real op1_e3_l_192506#1 = RMul(r2507,op1_e3_l_1724FE);
      real _t250B#1 = RSub(op1_e3_l_182503,op1_e3_l_192506);
      real _t250E#3 = RMul(_t24E1,op1_e3_l_1224ED);
      real _t2511#4 = 0.e0;
      tensor[3] _t2513#1 = <tensor[3]>[_t250B,_t250E,_t2511];
      tensor[3] _t2515#1 = <tensor[3]>[_t250E,_t24E1,_t2511];
      real _t2517#2 = RMul(_t24E1,zfuz24D9);
      tensor[3] _t251A#1 = <tensor[3]>[_t2511,_t2511,_t2517];
      tensor[3,3] H251C#1 = <tensor[3,3]>[_t2513,_t2515,_t251A];
      real _t251E#1 = RMul(_t250E,op1_e3_l_1724FE);
      real _t2523#1 = RMul(_t24E1,op1_e3_l_1724FE);
      real _t2526#1 = RMul(_t2517,z24DF);
      tensor[3] g252B#1 = <tensor[3]>[_t251E,_t2523,_t2526];
      (real[3] evals252D#1,tensor[3][3] E252E#1) = EigenVecs3x3(H251C);
      real _t2530#1 = 0.1e1;
      int _t2532#2 = 0;
      real _t2534#1 = Subscript<real[3]>(evals252D,_t2532);
      tensor[3] _t2536#4 = Subscript<tensor[3][3]>(E252E,_t2532);
      real op1_e3_l_52538#1 = RDiv(_t2530,_t2534);
      real op1_e3_l_6253B#3 = RNeg(op1_e3_l_52538);
      real op1_e3_l_7253E#3 = VDot<3>(_t2536,g252B);
      real r2542#1 = TensorIndex<tensor[3],[0]>(_t2536);
      real r2543#1 = RMul(op1_e3_l_6253B,r2542);
      real r2544#1 = RMul(r2543,op1_e3_l_7253E);
      real r2545#1 = TensorIndex<tensor[3],[1]>(_t2536);
      real r2546#1 = RMul(op1_e3_l_6253B,r2545);
      real r2547#1 = RMul(r2546,op1_e3_l_7253E);
      real r2548#1 = TensorIndex<tensor[3],[2]>(_t2536);
      real r2549#1 = RMul(op1_e3_l_6253B,r2548);
      real r254A#1 = RMul(r2549,op1_e3_l_7253E);
      tensor[3] up2541#4 = <tensor[3]>[r2544,r2547,r254A];
      real _t2556#2 = VIndex<3,0>(up2541);
      bool _t2558#1 = EQ<real>(_t2556,_t2556);
      bool _t255A#1 = BNot(_t2558);
      if _t255A then goto ASSIGN255E else goto ASSIGN256B
    ASSIGN255E:  preds = [COND255C]
      bool _t255D#1 = true;
      goto JOIN2561
    JOIN2561:  preds = [ASSIGN255E,JOIN2574]
      bool _t255F#1 = phi(_t255D,_t2560)
      if _t255F then goto ASSIGN2564 else goto JOIN2568
    ASSIGN2564:  preds = [COND2562]
      real _t2563#3 = +inf;
      tensor[3] _t2565#1 = <tensor[3]>[_t2563,_t2563,_t2563];
      return _t2565
      goto JOIN2568
    JOIN2568:  preds = [*RETURN(_t2565)2567,COND2562]
      return up2541
    ASSIGN256B:  preds = [COND255C]
      real _t256A#2 = VIndex<3,1>(up2541);
      bool _t256C#1 = EQ<real>(_t256A,_t256A);
      bool _t256E#1 = BNot(_t256C);
      if _t256E then goto ASSIGN2572 else goto ASSIGN2576
    ASSIGN2572:  preds = [COND2570]
      bool _t2571#1 = true;
      goto JOIN2574
    JOIN2574:  preds = [ASSIGN2572,ASSIGN2579]
      bool _t2560#1 = phi(_t2571,_t2573)
      goto JOIN2561
    ASSIGN2576:  preds = [COND2570]
      real _t2575#2 = VIndex<3,2>(up2541);
      bool _t2577#1 = EQ<real>(_t2575,_t2575);
      bool _t2573#1 = BNot(_t2577);
      goto JOIN2574
}
  function tensor[3,3] fPerp26ED (tensor[3] s26EE#2) {
    ENTRY26EF:  preds = []
      real zfuz26F0#1 = globals.zfuz23CD;
      real x26F2#5 = VIndex<3,0>(s26EE);
      real y26F4#1 = VIndex<3,1>(s26EE);
      real _t26F6#6 = 0.2e1;
      real _t26F8#1 = 0.3e1;
      real _t26FA#1 = 0.12e2;
      real op1_e3_l_1026FC#2 = RMul(x26F2,x26F2);
      real op1_e3_l_1126FF#1 = RMul(_t26F8,op1_e3_l_1026FC);
      real op1_e3_l_122702#3 = RSub(_t26F6,op1_e3_l_1126FF);
      real op1_e3_l_132705#1 = RMul(op1_e3_l_122702,op1_e3_l_122702);
      real op1_e3_l_142708#1 = RMul(x26F2,op1_e3_l_1026FC);
      real op1_e3_l_15270D#1 = RNeg(op1_e3_l_142708);
      real op1_e3_l_162710#1 = RMul(_t26F6,x26F2);
      real r2714#1 = RAdd(op1_e3_l_15270D,op1_e3_l_162710);
      real op1_e3_l_172713#1 = RAdd(r2714,y26F4);
      real op1_e3_l_182718#1 = RMul(_t26F6,op1_e3_l_132705);
      real r271C#1 = RMul(_t26FA,x26F2);
      real op1_e3_l_19271B#1 = RMul(r271C,op1_e3_l_172713);
      real _t2720#1 = RSub(op1_e3_l_182718,op1_e3_l_19271B);
      real _t2723#2 = RMul(_t26F6,op1_e3_l_122702);
      real _t2726#13 = 0.e0;
      tensor[3] _t2728#1 = <tensor[3]>[_t2720,_t2723,_t2726];
      tensor[3] _t272A#1 = <tensor[3]>[_t2723,_t26F6,_t2726];
      real _t272C#1 = RMul(_t26F6,zfuz26F0);
      tensor[3] _t272F#1 = <tensor[3]>[_t2726,_t2726,_t272C];
      tensor[3,3] H2731#1 = <tensor[3,3]>[_t2728,_t272A,_t272F];
      (real[3] evals2733#0,tensor[3][3] _t2734#1) = EigenVecs3x3(H2731);
      int _t2736#1 = 0;
      tensor[3] E22738#6 = Subscript<tensor[3][3]>(_t2734,_t2736);
      real r273B#1 = TensorIndex<tensor[3],[0]>(E22738);
      tensor[3] binopV273C#3 = VScale<3>(r273B,E22738);
      real r273D#1 = TensorIndex<tensor[3],[1]>(E22738);
      tensor[3] binopV273E#3 = VScale<3>(r273D,E22738);
      real r273F#1 = TensorIndex<tensor[3],[2]>(E22738);
      tensor[3] binopV2740#3 = VScale<3>(r273F,E22738);
      real realLit274A#3 = 0.1e1;
      real r274B#1 = VIndex<3,0>(binopV273C);
      real r274C#1 = RSub(realLit274A,r274B);
      real r274E#1 = VIndex<3,1>(binopV273C);
      real r274F#1 = RSub(_t2726,r274E);
      real r2750#1 = VIndex<3,2>(binopV273C);
      real r2751#1 = RSub(_t2726,r2750);
      tensor[3] tensor2752#3 = <tensor[3]>[r274C,r274F,r2751];
      real r2753#1 = VIndex<3,0>(binopV273E);
      real r2754#1 = RSub(_t2726,r2753);
      real r2755#1 = VIndex<3,1>(binopV273E);
      real r2756#1 = RSub(realLit274A,r2755);
      real r2757#1 = VIndex<3,2>(binopV273E);
      real r2758#1 = RSub(_t2726,r2757);
      tensor[3] tensor2759#3 = <tensor[3]>[r2754,r2756,r2758];
      real r275A#1 = VIndex<3,0>(binopV2740);
      real r275B#1 = RSub(_t2726,r275A);
      real r275C#1 = VIndex<3,1>(binopV2740);
      real r275D#1 = RSub(_t2726,r275C);
      real r275E#1 = VIndex<3,2>(binopV2740);
      real r275F#1 = RSub(realLit274A,r275E);
      tensor[3] tensor2760#3 = <tensor[3]>[r275B,r275D,r275F];
      tensor[3,3] m2749#1 = <tensor[3,3]>[tensor2752,tensor2759,tensor2760];
      real vdot277C#1 = VDot<3>(tensor2752,tensor2752);
      real vdot277E#1 = VDot<3>(tensor2759,tensor2759);
      real r277F#1 = RAdd(vdot277C,vdot277E);
      real vdot2781#1 = VDot<3>(tensor2760,tensor2760);
      real t277A#2 = RAdd(r277F,vdot2781);
      bool _t278B#1 = EQ<real>(t277A,t277A);
      bool _t278D#1 = BNot(_t278B);
      if _t278D then goto ASSIGN29EB else goto JOIN2798
    ASSIGN29EB:  preds = [COND278F]
      tensor[3] tensor2792#3 = <tensor[3]>[_t2726,_t2726,_t2726];
      tensor[3,3] _t2790#1 = <tensor[3,3]>[tensor2792,tensor2792,tensor2792];
      return _t2790
      goto JOIN2798
    JOIN2798:  preds = [*RETURN(_t2790)2797,COND278F]
      return m2749
}
  function int sum2980 (particle P2981#1) {
    ENTRY2982:  preds = []
      int _t2983#1 = P2981.test;
      return _t2983
}
  function int max2988 (particle P2989#1) {
    ENTRY298A:  preds = []
      int _t298B#1 = P2989.steps;
      return _t298B
}
  function int sum2990 (particle P2991#1) {
    ENTRY2992:  preds = []
      int _t2993#1 = P2991.testp;
      return _t2993
}
  function bool all2998 (particle P2999#1) {
    ENTRY299A:  preds = []
      bool _t299B#1 = P2999.found;
      return _t299B
}
  function real max29A0 (particle P29A1#1) {
    ENTRY29A2:  preds = []
      tensor[3] _t29A3#2 = P29A1.step;
      real op1_e3_l_129A5#1 = VDot<3>(_t29A3,_t29A3);
      real _t29A8#1 = Sqrt(op1_e3_l_129A5);
      return _t29A8
}
## input initialization
  ENTRY23CF:  preds = []
    real rad23D0#5 = 0.1e-1;
    globals.rad23C8 = rad23D0;
    globals.eps23C9 = rad23D0;
    real v023D4#1 = 0.625e-1;
    globals.v023CA = v023D4;
    globals.fBias23CB = rad23D0;
    globals.fStren23CC = rad23D0;
    globals.zfuz23CD = rad23D0;
    return
## global-variable initialization
  ENTRY23DB:  preds = []
    femData:Mesh meshData23DC#2 = globals.meshData23C5;
    int _t23DE#1 = 0;
    int _t23E0#1 = 1;
    int _t23E2#1 = ExtractFemItem<int,NumCell(Mesh)>(meshData23DC);
    int _t23E4#1 = ISub(_t23E2,_t23E0);
    int[] _t23E6#1 = Range(_t23DE,_t23E4);
    femData:MeshCell[] _t23E8#1 = <femData:MeshCell[]>{};
  FOREACH23EB:  preds = [ASSIGN23E9,NEXT23F1]
    foreach (_t23EA in _t23E6) on exit goto RETURN23F2
      femData:MeshCell[] _t23EF#1 = phi(_t23E8,_t23EE)
    femData:MeshCell _t23EC#1 = LoadFem<femData:MeshCell>(meshData23DC,_t23EA);
    femData:MeshCell[] _t23EE#1 = Append<femData:MeshCell>(_t23EF,_t23EC);
    goto FOREACH23EB
  RETURN23F2:  preds = [FOREACH23EB]
    return
## strand
  strand particle (tensor[3] pos023F3#2, real hh023F4#1) in 3D
    state:
      output tensor[3] pos;
      output tensor[3] _pos;
      real hh;
      tensor[3] step;
      bool found;
      int nfs;
      int test;
      int testp;
      int steps;
    state init
      ENTRY23FE:  preds = []
        real realLit2400#3 = 0.e0;
        tensor[3] step23FF#1 = <tensor[3]>[realLit2400,realLit2400,realLit2400];
        bool found2404#1 = false;
        int nfs2406#3 = 0;
        int test2408#1 = 1;
        self.pos = pos023F3;
        self._pos = pos023F3;
        self.hh = hh023F4;
        self.step = step23FF;
        self.found = found2404;
        self.nfs = nfs2406;
        self.test = test2408;
        self.testp = nfs2406;
        self.steps = nfs2406;
        return
    end state init
    method update
        ENTRY2414:  preds = []
          real rad2415#10 = globals.rad23C8;
          real eps2417#1 = globals.eps23C9;
          real fBias2419#3 = globals.fBias23CB;
          real fStren241B#3 = globals.fStren23CC;
          real zfuz241D#3 = globals.zfuz23CD;
          tensor[3] pos241F#10 = self.pos;
          real hh2421#7 = self.hh;
          bool found2423#3 = self.found;
          int nfs2425#3 = self.nfs;
          int testp2427#2 = self.testp;
          int steps2429#1 = self.steps;
          int _t242B#4 = 1;
          int steps242D#4 = IAdd(steps2429,_t242B);
          real _t242F#19 = 0.e0;
          tensor[3] _t2431#7 = <tensor[3]>[_t242F,_t242F,_t242F];
          tensor[3] mid2433#3 = VSub<3>(pos241F,_t2431);
          real _t2436#1 = VIndex<3,0>(mid2433);
          real _t2438#1 = Abs<real>(_t2436);
          real _t243B#9 = 0.4e1;
          bool _t243D#1 = LTE<real>(_t2438,_t243B);
          if _t243D then goto ASSIGN2441 else goto ASSIGN296E
        ASSIGN2441:  preds = [COND243F]
          real _t2440#1 = VIndex<3,1>(mid2433);
          real _t2442#1 = Abs<real>(_t2440);
          bool _t2445#1 = LTE<real>(_t2442,_t243B);
          if _t2445 then goto ASSIGN2449 else goto ASSIGN296D
        ASSIGN2449:  preds = [COND2447]
          real _t2448#1 = VIndex<3,2>(mid2433);
          real _t244A#1 = Abs<real>(_t2448);
          bool _t244D#1 = LTE<real>(_t244A,_t243B);
          goto JOIN2451
        JOIN2451:  preds = [ASSIGN244E,ASSIGN296D]
          bool _t244F#1 = phi(_t244D,_t2450)
          goto JOIN2454
        JOIN2454:  preds = [JOIN2451,ASSIGN296E]
          bool _t2452#1 = phi(_t244F,_t2453)
          if _t2452 then goto ASSIGN2457 else goto ASSIGN296C
        ASSIGN2457:  preds = [COND2455]
          real _t2456#7 = VIndex<3,0>(pos241F);
          bool _t2458#1 = EQ<real>(_t2456,_t2456);
          bool _t245A#1 = BNot(_t2458);
          if _t245A then goto ASSIGN245E else goto ASSIGN295D
        ASSIGN245E:  preds = [COND245C]
          bool _t245D#1 = true;
          goto JOIN2461
        JOIN2461:  preds = [ASSIGN245E,JOIN2966]
          bool _t245F#1 = phi(_t245D,_t2460)
          bool _t2462#1 = BNot(_t245F);
          if _t2462 then goto ASSIGN2466 else goto ASSIGN295B
        ASSIGN2466:  preds = [COND2464]
          real y2465#1 = VIndex<3,1>(pos241F);
          real z2467#1 = VIndex<3,2>(pos241F);
          real _t2469#7 = 0.2e1;
          real _t246B#1 = 0.3e1;
          real _t246D#1 = 0.12e2;
          real op1_e3_l_10246F#2 = RMul(_t2456,_t2456);
          real op1_e3_l_112472#1 = RMul(_t246B,op1_e3_l_10246F);
          real op1_e3_l_122475#3 = RSub(_t2469,op1_e3_l_112472);
          real op1_e3_l_132478#1 = RMul(op1_e3_l_122475,op1_e3_l_122475);
          real op1_e3_l_14247B#1 = RMul(_t2456,op1_e3_l_10246F);
          real op1_e3_l_152480#1 = RNeg(op1_e3_l_14247B);
          real op1_e3_l_162483#1 = RMul(_t2469,_t2456);
          real r2487#1 = RAdd(op1_e3_l_152480,op1_e3_l_162483);
          real op1_e3_l_172486#3 = RAdd(r2487,y2465);
          real op1_e3_l_18248B#1 = RMul(_t2469,op1_e3_l_132478);
          real r248F#1 = RMul(_t246D,_t2456);
          real op1_e3_l_19248E#1 = RMul(r248F,op1_e3_l_172486);
          real _t2493#1 = RSub(op1_e3_l_18248B,op1_e3_l_19248E);
          real _t2496#3 = RMul(_t2469,op1_e3_l_122475);
          tensor[3] _t2499#1 = <tensor[3]>[_t2493,_t2496,_t242F];
          tensor[3] _t249B#1 = <tensor[3]>[_t2496,_t2469,_t242F];
          real _t249D#2 = RMul(_t2469,zfuz241D);
          tensor[3] _t24A0#1 = <tensor[3]>[_t242F,_t242F,_t249D];
          tensor[3,3] H24A2#1 = <tensor[3,3]>[_t2499,_t249B,_t24A0];
          real _t24A4#1 = RMul(_t2496,op1_e3_l_172486);
          real _t24A9#1 = RMul(_t2469,op1_e3_l_172486);
          real _t24AC#1 = RMul(_t249D,z2467);
          tensor[3] g24B1#2 = <tensor[3]>[_t24A4,_t24A9,_t24AC];
          real[3] _t24B3#1 = EigenVals3x3(H24A2);
          int _t24B5#1 = 0;
          real _t24B7#1 = Subscript<real[3]>(_t24B3,_t24B5);
          real op1_e3_l_324B9#1 = VDot<3>(g24B1,g24B1);
          real op1_e3_l_424BC#1 = Sqrt(op1_e3_l_324B9);
          real op1_e3_l_524BF#1 = RAdd(fBias2419,op1_e3_l_424BC);
          real _t24C2#1 = RDiv(_t24B7,op1_e3_l_524BF);
          bool _t24C5#1 = GTE<real>(_t24C2,fStren241B);
          goto JOIN24C9
        JOIN24C9:  preds = [ASSIGN24C6,ASSIGN295B]
          bool _t24C7#1 = phi(_t24C5,_t24C8)
          goto JOIN24CC
        JOIN24CC:  preds = [JOIN24C9,ASSIGN296C]
          bool _t24CA#1 = phi(_t24C7,_t24CB)
          bool _t24CD#1 = BNot(_t24CA);
          if _t24CD then goto DIE24D0 else goto JOIN24D1
        DIE24D0:  preds = [COND24CF]
          die
          goto JOIN24D1
        JOIN24D1:  preds = [*DIE24D0,COND24CF]
          bool _t24D2#1 = BNot(found2423);
          if _t24D2 then goto ASSIGN257A else goto ASSIGN25CC
        ASSIGN257A:  preds = [COND24D4]
          tensor[3] step24D5#4 = fStep24D6 (pos241F);
          tensor[3] pos257B#4 = VAdd<3>(pos241F,step24D5);
          real _t257E#2 = VIndex<3,0>(pos257B);
          bool _t2580#1 = EQ<real>(_t257E,_t257E);
          bool _t2582#1 = BNot(_t2580);
          if _t2582 then goto ASSIGN2586 else goto ASSIGN25BC
        ASSIGN2586:  preds = [COND2584]
          bool _t2585#1 = true;
          goto JOIN2589
        JOIN2589:  preds = [ASSIGN2586,JOIN25C5]
          bool _t2587#1 = phi(_t2585,_t2588)
          if _t2587 then goto DIE258B else goto JOIN258C
        DIE258B:  preds = [COND258A]
          die
          goto JOIN258C
        JOIN258C:  preds = [*DIE258B,COND258A]
          real op1_e3_l_2258D#1 = VDot<3>(step24D5,step24D5);
          real op1_e3_l_32590#1 = Sqrt(op1_e3_l_2258D);
          real _t2593#1 = RDiv(op1_e3_l_32590,rad2415);
          bool _t2596#1 = GT<real>(_t2593,eps2417);
          if _t2596 then goto ASSIGN259A else goto ASSIGN25BA
        ASSIGN259A:  preds = [COND2598]
          int nfs2599#2 = IAdd(nfs2425,_t242B);
          int _t259B#1 = 10;
          bool _t259D#1 = GT<int>(nfs2599,_t259B);
          if _t259D then goto DIE25A0 else goto JOIN25A1
        DIE25A0:  preds = [COND259F]
          die
          goto JOIN25A1
        JOIN25A1:  preds = [*DIE25A0,COND259F]
          goto JOIN25A6
        JOIN25A6:  preds = [JOIN25A1,ASSIGN25BA]
          int testp25A2#1 = phi(testp2427,_t242B)
          int nfs25A3#1 = phi(nfs2599,nfs2425)
          bool found25A4#1 = phi(found2423,found25A5)
          goto JOIN25B0
        JOIN25B0:  preds = [JOIN25A6,JOIN2912]
          int testp25A7#1 = phi(testp25A2,testp2427)
          int nfs25A8#1 = phi(nfs25A3,nfs2425)
          bool found25A9#1 = phi(found25A4,found2423)
          tensor[3] step25AA#1 = phi(step24D5,up25AB)
          real hh25AC#1 = phi(hh2421,hh25AD)
          tensor[3] pos25AE#2 = phi(pos257B,pos25AF)
          self.pos = pos25AE;
          self._pos = pos25AE;
          self.hh = hh25AC;
          self.step = step25AA;
          self.found = found25A9;
          self.nfs = nfs25A8;
          self.testp = testp25A7;
          self.steps = steps242D;
          active
        ASSIGN25BA:  preds = [COND2598]
          bool found25A5#1 = true;
          goto JOIN25A6
        ASSIGN25BC:  preds = [COND2584]
          real _t25BB#2 = VIndex<3,1>(pos257B);
          bool _t25BD#1 = EQ<real>(_t25BB,_t25BB);
          bool _t25BF#1 = BNot(_t25BD);
          if _t25BF then goto ASSIGN25C3 else goto ASSIGN25C7
        ASSIGN25C3:  preds = [COND25C1]
          bool _t25C2#1 = true;
          goto JOIN25C5
        JOIN25C5:  preds = [ASSIGN25C3,ASSIGN25CA]
          bool _t2588#1 = phi(_t25C2,_t25C4)
          goto JOIN2589
        ASSIGN25C7:  preds = [COND25C1]
          real _t25C6#2 = VIndex<3,2>(pos257B);
          bool _t25C8#1 = EQ<real>(_t25C6,_t25C6);
          bool _t25C4#1 = BNot(_t25C8);
          goto JOIN25C5
        ASSIGN25CC:  preds = [COND24D4]
          tensor[3] _t25CB#1 = fStep24D6 (pos241F);
          tensor[3] pos25CD#16 = VAdd<3>(pos241F,_t25CB);
          real _t25D0#2 = VIndex<3,0>(pos25CD);
          bool _t25D2#1 = EQ<real>(_t25D0,_t25D0);
          bool _t25D4#1 = BNot(_t25D2);
          if _t25D4 then goto ASSIGN25D8 else goto ASSIGN294C
        ASSIGN25D8:  preds = [COND25D6]
          bool _t25D7#1 = true;
          goto JOIN25DB
        JOIN25DB:  preds = [ASSIGN25D8,JOIN2955]
          bool _t25D9#1 = phi(_t25D7,_t25DA)
          if _t25D9 then goto DIE25DD else goto JOIN25DE
        DIE25DD:  preds = [COND25DC]
          die
          goto JOIN25DE
        JOIN25DE:  preds = [*DIE25DD,COND25DC]
          int nn25E4#4 = 0;
          particle[] _t25E6#1 = SphereQuery<3,particle>(pos25CD,rad2415);
        FOREACH25E9:  preds = [ASSIGN25E7,NEXT263D]
          foreach (P25E8 in _t25E6) on exit goto ASSIGN263F
            int nn263B#3 = phi(nn25E4,nn263A)
            tensor[3] force2637#4 = phi(_t2431,force2636)
            real oldE2603#2 = phi(_t242F,oldE2602)
          tensor[3] _t25EA#1 = P25E8.pos;
          real _t25EC#3 = 0.1e1;
          tensor[3] op1_e3_l_825EE#5 = VSub<3>(_t25EA,pos25CD);
          real op1_e3_l_1025F1#1 = VDot<3>(op1_e3_l_825EE,op1_e3_l_825EE);
          real op1_e3_l_1125F4#2 = Sqrt(op1_e3_l_1025F1);
          real op1_e3_l_1225F7#1 = RDiv(op1_e3_l_1125F4,rad2415);
          real op1_e3_l_1325FA#3 = RSub(_t25EC,op1_e3_l_1225F7);
          real _Pow_225FE#3 = RMul(op1_e3_l_1325FA,op1_e3_l_1325FA);
          real op1_e3_l_1425FD#1 = RMul(_Pow_225FE,_Pow_225FE);
          real oldE2602#1 = RAdd(oldE2603,op1_e3_l_1425FD);
          real _t2606#1 = -0.4e1;
          real op1_e3_l_242608#1 = RMul(op1_e3_l_1325FA,_Pow_225FE);
          real op1_e3_l_25260D#1 = RDiv(_t25EC,rad2415);
          real r2611#1 = TensorIndex<tensor[3],[0]>(op1_e3_l_825EE);
          real r2612#1 = RMul(_t2606,op1_e3_l_242608);
          real r2613#3 = RMul(r2612,op1_e3_l_25260D);
          real r2614#1 = RMul(r2613,r2611);
          real r2615#1 = TensorIndex<tensor[3],[1]>(op1_e3_l_825EE);
          real r2616#1 = RMul(r2613,r2615);
          real r2617#1 = TensorIndex<tensor[3],[2]>(op1_e3_l_825EE);
          real r2618#1 = RMul(r2613,r2617);
          real r2625#3 = RDiv(_t25EC,op1_e3_l_1125F4);
          real r2627#1 = RMul(r2625,r2614);
          real r2629#1 = RMul(r2625,r2616);
          real r262B#1 = RMul(r2625,r2618);
          tensor[3] op1_e3_l_342623#1 = <tensor[3]>[r2627,r2629,r262B];
          tensor[3] force2636#1 = VAdd<3>(force2637,op1_e3_l_342623);
          int nn263A#1 = IAdd(nn263B,_t242B);
          goto FOREACH25E9
        ASSIGN263F:  preds = [FOREACH25E9]
          bool _t263E#1 = EQ<int>(nn25E4,nn263B);
          if _t263E then goto ASSIGN2642 else goto JOIN26EB
        ASSIGN2642:  preds = [COND2640]
          real _t2641#1 = 0.5e0;
          real _t2643#1 = RMul(_t2641,rad2415);
          tensor[3] _t2646#1 = <tensor[3]>[_t2643,_t242F,_t242F];
          tensor[3] npos2648#7 = VAdd<3>(pos25CD,_t2646);
          tensor[3] mid264D#3 = VSub<3>(npos2648,_t2431);
          real _t2650#1 = VIndex<3,0>(mid264D);
          real _t2652#1 = Abs<real>(_t2650);
          bool _t2655#1 = LTE<real>(_t2652,_t243B);
          if _t2655 then goto ASSIGN2659 else goto ASSIGN294A
        ASSIGN2659:  preds = [COND2657]
          real _t2658#1 = VIndex<3,1>(mid264D);
          real _t265A#1 = Abs<real>(_t2658);
          bool _t265D#1 = LTE<real>(_t265A,_t243B);
          if _t265D then goto ASSIGN2661 else goto ASSIGN2949
        ASSIGN2661:  preds = [COND265F]
          real _t2660#1 = VIndex<3,2>(mid264D);
          real _t2662#1 = Abs<real>(_t2660);
          bool _t2665#1 = LTE<real>(_t2662,_t243B);
          goto JOIN2669
        JOIN2669:  preds = [ASSIGN2666,ASSIGN2949]
          bool _t2667#1 = phi(_t2665,_t2668)
          goto JOIN266C
        JOIN266C:  preds = [JOIN2669,ASSIGN294A]
          bool _t266A#1 = phi(_t2667,_t266B)
          if _t266A then goto ASSIGN266F else goto ASSIGN2948
        ASSIGN266F:  preds = [COND266D]
          real _t266E#7 = VIndex<3,0>(npos2648);
          bool _t2670#1 = EQ<real>(_t266E,_t266E);
          bool _t2672#1 = BNot(_t2670);
          if _t2672 then goto ASSIGN2676 else goto ASSIGN2939
        ASSIGN2676:  preds = [COND2674]
          bool _t2675#1 = true;
          goto JOIN2679
        JOIN2679:  preds = [ASSIGN2676,JOIN2942]
          bool _t2677#1 = phi(_t2675,_t2678)
          bool _t267A#1 = BNot(_t2677);
          if _t267A then goto ASSIGN267E else goto ASSIGN2937
        ASSIGN267E:  preds = [COND267C]
          real y267D#1 = VIndex<3,1>(npos2648);
          real z267F#1 = VIndex<3,2>(npos2648);
          real _t2681#7 = 0.2e1;
          real _t2683#1 = 0.3e1;
          real _t2685#1 = 0.12e2;
          real op1_e3_l_102687#2 = RMul(_t266E,_t266E);
          real op1_e3_l_11268A#1 = RMul(_t2683,op1_e3_l_102687);
          real op1_e3_l_12268D#3 = RSub(_t2681,op1_e3_l_11268A);
          real op1_e3_l_132690#1 = RMul(op1_e3_l_12268D,op1_e3_l_12268D);
          real op1_e3_l_142693#1 = RMul(_t266E,op1_e3_l_102687);
          real op1_e3_l_152698#1 = RNeg(op1_e3_l_142693);
          real op1_e3_l_16269B#1 = RMul(_t2681,_t266E);
          real r269F#1 = RAdd(op1_e3_l_152698,op1_e3_l_16269B);
          real op1_e3_l_17269E#3 = RAdd(r269F,y267D);
          real op1_e3_l_1826A3#1 = RMul(_t2681,op1_e3_l_132690);
          real r26A7#1 = RMul(_t2685,_t266E);
          real op1_e3_l_1926A6#1 = RMul(r26A7,op1_e3_l_17269E);
          real _t26AB#1 = RSub(op1_e3_l_1826A3,op1_e3_l_1926A6);
          real _t26AE#3 = RMul(_t2681,op1_e3_l_12268D);
          tensor[3] _t26B1#1 = <tensor[3]>[_t26AB,_t26AE,_t242F];
          tensor[3] _t26B3#1 = <tensor[3]>[_t26AE,_t2681,_t242F];
          real _t26B5#2 = RMul(_t2681,zfuz241D);
          tensor[3] _t26B8#1 = <tensor[3]>[_t242F,_t242F,_t26B5];
          tensor[3,3] H26BA#1 = <tensor[3,3]>[_t26B1,_t26B3,_t26B8];
          real _t26BC#1 = RMul(_t26AE,op1_e3_l_17269E);
          real _t26C1#1 = RMul(_t2681,op1_e3_l_17269E);
          real _t26C4#1 = RMul(_t26B5,z267F);
          tensor[3] g26C9#2 = <tensor[3]>[_t26BC,_t26C1,_t26C4];
          real[3] _t26CB#1 = EigenVals3x3(H26BA);
          real _t26CD#1 = Subscript<real[3]>(_t26CB,nn25E4);
          real op1_e3_l_326CF#1 = VDot<3>(g26C9,g26C9);
          real op1_e3_l_426D2#1 = Sqrt(op1_e3_l_326CF);
          real op1_e3_l_526D5#1 = RAdd(fBias2419,op1_e3_l_426D2);
          real _t26D8#1 = RDiv(_t26CD,op1_e3_l_526D5);
          bool _t26DB#1 = GTE<real>(_t26D8,fStren241B);
          goto JOIN26DF
        JOIN26DF:  preds = [ASSIGN26DC,ASSIGN2937]
          bool _t26DD#1 = phi(_t26DB,_t26DE)
          goto JOIN26E2
        JOIN26E2:  preds = [JOIN26DF,ASSIGN2948]
          bool _t26E0#1 = phi(_t26DD,_t26E1)
          if _t26E0 then goto NEW26E4 else goto JOIN26E5
        NEW26E4:  preds = [COND26E3]
          new particle(npos2648,hh2421);
          goto JOIN26E5
        JOIN26E5:  preds = [NEW26E4,COND26E3]
          self.pos = pos25CD;
          self._pos = pos25CD;
          self.step = _t2431;
          self.steps = steps242D;
          active
          goto JOIN26EB
        JOIN26EB:  preds = [*ACTIVE26EA,COND2640]
          tensor[3,3] _t26EC#3 = fPerp26ED (pos25CD);
          tensor[3] projParam279C#1 = ProjectLast<tensor[3,3],[0]>(_t26EC);
          real vdot279D#2 = VDot<3>(projParam279C,force2637);
          tensor[3] projParam279E#1 = ProjectLast<tensor[3,3],[1]>(_t26EC);
          real vdot279F#2 = VDot<3>(projParam279E,force2637);
          tensor[3] projParam27A0#1 = ProjectLast<tensor[3,3],[2]>(_t26EC);
          real vdot27A1#2 = VDot<3>(projParam27A0,force2637);
          tensor[3] op1_e3_l_3279B#4 = <tensor[3]>[vdot279D,vdot279F,vdot27A1];
          tensor[3] es27AA#1 = VScale<3>(hh2421,op1_e3_l_3279B);
          real op1_e3_l_527AD#1 = VDot<3>(op1_e3_l_3279B,op1_e3_l_3279B);
          real r27B1#1 = RMul(hh2421,hh2421);
          real op1_e3_l_627B0#1 = RMul(r27B1,op1_e3_l_527AD);
          real _t27B5#2 = Sqrt(op1_e3_l_627B0);
          bool _t27B8#1 = GT<real>(_t27B5,rad2415);
          if _t27B8 then goto ASSIGN27BD else goto JOIN27D4
        ASSIGN27BD:  preds = [COND27BA]
          real op1_e3_l_1027BB#1 = RDiv(rad2415,_t27B5);
          real hh27BE#4 = RMul(hh2421,op1_e3_l_1027BB);
          real r27C4#1 = RMul(hh27BE,vdot279D);
          real r27C6#1 = RMul(hh27BE,vdot279F);
          real r27C8#1 = RMul(hh27BE,vdot27A1);
          tensor[3] es27C1#1 = <tensor[3]>[r27C4,r27C6,r27C8];
          goto JOIN27D4
        JOIN27D4:  preds = [ASSIGN27D1,COND27BA]
          tensor[3] es27D2#8 = phi(es27C1,es27AA)
          real hh27D3#2 = phi(hh27BE,hh2421)
          tensor[3] samplePos27D5#1 = VAdd<3>(pos25CD,es27D2);
          tensor[3] fs27DA#4 = fStep24D6 (samplePos27D5);
          real op1_e3_l_227DC#1 = VDot<3>(fs27DA,fs27DA);
          real op1_e3_l_327DF#1 = VDot<3>(es27D2,es27D2);
          real op1_e3_l_427E2#1 = Sqrt(op1_e3_l_227DC);
          real op1_e3_l_527E5#2 = Sqrt(op1_e3_l_327DF);
          real _t27E8#1 = RDiv(op1_e3_l_427E2,op1_e3_l_527E5);
          real _t27EB#5 = 0.5e0;
          bool _t27ED#1 = GT<real>(_t27E8,_t27EB);
          if _t27ED then goto ASSIGN27F2 else goto JOIN27FA
        ASSIGN27F2:  preds = [COND27EF]
          real hh27F0#1 = RMul(hh27D3,_t27EB);
          self.pos = pos25CD;
          self._pos = pos25CD;
          self.hh = hh27F0;
          self.step = _t2431;
          self.steps = steps242D;
          active
          goto JOIN27FA
        JOIN27FA:  preds = [*ACTIVE27F8,COND27EF]
          real hh27F9#2 = phi(hh27D3)
          tensor[3] up25AB#1 = VAdd<3>(fs27DA,es27D2);
          tensor[3] v27FF#1 = VAdd<3>(pos25CD,fs27DA);
          tensor[3] pos27FD#4 = VAdd<3>(v27FF,es27D2);
          particle[] _t2804#1 = SphereQuery<3,particle>(pos27FD,rad2415);
        FOREACH2807:  preds = [ASSIGN2805,NEXT2824]
          foreach (P2806 in _t2804) on exit goto ASSIGN2827
            real accum2821#2 = phi(_t242F,accum2820)
          tensor[3] _t2808#1 = P2806.pos;
          real _t280A#1 = 0.1e1;
          tensor[3] op1_e3_l_10280C#2 = VSub<3>(pos27FD,_t2808);
          real op1_e3_l_12280F#1 = VDot<3>(op1_e3_l_10280C,op1_e3_l_10280C);
          real op1_e3_l_132812#1 = Sqrt(op1_e3_l_12280F);
          real op1_e3_l_142815#1 = RDiv(op1_e3_l_132812,rad2415);
          real op1_e3_l_152818#2 = RSub(_t280A,op1_e3_l_142815);
          real _Pow_2281C#2 = RMul(op1_e3_l_152818,op1_e3_l_152818);
          real op1_e3_l_16281B#1 = RMul(_Pow_2281C,_Pow_2281C);
          real accum2820#1 = RAdd(accum2821,op1_e3_l_16281B);
          goto FOREACH2807
        ASSIGN2827:  preds = [FOREACH2807]
          real _t2825#1 = RSub(accum2821,oldE2603);
          tensor[3] op1_e3_l_122828#1 = VSub<3>(pos27FD,pos25CD);
          tensor[3] op1_e3_l_13282B#1 = VNeg<3>(op1_e3_l_3279B);
          real op1_e3_l_14282E#1 = VDot<3>(op1_e3_l_122828,op1_e3_l_13282B);
          real _t2831#1 = RMul(_t27EB,op1_e3_l_14282E);
          bool _t2834#1 = GT<real>(_t2825,_t2831);
          if _t2834 then goto ASSIGN2839 else goto JOIN2841
        ASSIGN2839:  preds = [COND2836]
          real hh2837#1 = RMul(hh27F9,_t27EB);
          self.pos = pos25CD;
          self._pos = pos25CD;
          self.hh = hh2837;
          self.step = _t2431;
          self.steps = steps242D;
          active
          goto JOIN2841
        JOIN2841:  preds = [*ACTIVE283F,COND2836]
          real hh2840#1 = phi(hh27F9)
          tensor[3] pos25AF#5 = phi(pos27FD)
          real _t2842#1 = 0.11e1;
          real hh25AD#2 = RMul(hh2840,_t2842);
          real _t2846#2 = VIndex<3,0>(pos25AF);
          bool _t2848#1 = EQ<real>(_t2846,_t2846);
          bool _t284A#1 = BNot(_t2848);
          if _t284A then goto ASSIGN284E else goto ASSIGN2928
        ASSIGN284E:  preds = [COND284C]
          bool _t284D#1 = true;
          goto JOIN2851
        JOIN2851:  preds = [ASSIGN284E,JOIN2931]
          bool _t284F#1 = phi(_t284D,_t2850)
          if _t284F then goto DIE2853 else goto JOIN2854
        DIE2853:  preds = [COND2852]
          die
          goto JOIN2854
        JOIN2854:  preds = [*DIE2853,COND2852]
          int _t2855#1 = 5;
          bool _t2857#1 = LT<int>(nn263B,_t2855);
          if _t2857 then goto ASSIGN285D else goto JOIN2912
        ASSIGN285D:  preds = [COND2859]
          real realLit285B#1 = 0.1e1;
          real op1_e3_l_7285A#3 = RDiv(realLit285B,op1_e3_l_527E5);
          real r2860#1 = TensorIndex<tensor[3],[0]>(es27D2);
          real r2861#3 = RMul(_t27EB,rad2415);
          real r2862#1 = RMul(r2861,r2860);
          real r2863#1 = RMul(r2862,op1_e3_l_7285A);
          real r2864#1 = TensorIndex<tensor[3],[1]>(es27D2);
          real r2865#1 = RMul(r2861,r2864);
          real r2866#1 = RMul(r2865,op1_e3_l_7285A);
          real r2867#1 = TensorIndex<tensor[3],[2]>(es27D2);
          real r2868#1 = RMul(r2861,r2867);
          real r2869#1 = RMul(r2868,op1_e3_l_7285A);
          tensor[3] op1_e3_l_8285F#1 = <tensor[3]>[r2863,r2866,r2869];
          tensor[3] npos2876#7 = VAdd<3>(pos25AF,op1_e3_l_8285F);
          tensor[3] mid2879#3 = VSub<3>(npos2876,_t2431);
          real _t287C#1 = VIndex<3,0>(mid2879);
          real _t287E#1 = Abs<real>(_t287C);
          bool _t2881#1 = LTE<real>(_t287E,_t243B);
          if _t2881 then goto ASSIGN2885 else goto ASSIGN2926
        ASSIGN2885:  preds = [COND2883]
          real _t2884#1 = VIndex<3,1>(mid2879);
          real _t2886#1 = Abs<real>(_t2884);
          bool _t2889#1 = LTE<real>(_t2886,_t243B);
          if _t2889 then goto ASSIGN288D else goto ASSIGN2925
        ASSIGN288D:  preds = [COND288B]
          real _t288C#1 = VIndex<3,2>(mid2879);
          real _t288E#1 = Abs<real>(_t288C);
          bool _t2891#1 = LTE<real>(_t288E,_t243B);
          goto JOIN2895
        JOIN2895:  preds = [ASSIGN2892,ASSIGN2925]
          bool _t2893#1 = phi(_t2891,_t2894)
          goto JOIN2898
        JOIN2898:  preds = [JOIN2895,ASSIGN2926]
          bool _t2896#1 = phi(_t2893,_t2897)
          if _t2896 then goto ASSIGN289B else goto ASSIGN2924
        ASSIGN289B:  preds = [COND2899]
          real _t289A#7 = VIndex<3,0>(npos2876);
          bool _t289C#1 = EQ<real>(_t289A,_t289A);
          bool _t289E#1 = BNot(_t289C);
          if _t289E then goto ASSIGN28A2 else goto ASSIGN2915
        ASSIGN28A2:  preds = [COND28A0]
          bool _t28A1#1 = true;
          goto JOIN28A5
        JOIN28A5:  preds = [ASSIGN28A2,JOIN291E]
          bool _t28A3#1 = phi(_t28A1,_t28A4)
          bool _t28A6#1 = BNot(_t28A3);
          if _t28A6 then goto ASSIGN28AA else goto ASSIGN2913
        ASSIGN28AA:  preds = [COND28A8]
          real y28A9#1 = VIndex<3,1>(npos2876);
          real z28AB#1 = VIndex<3,2>(npos2876);
          real _t28AD#7 = 0.2e1;
          real _t28AF#1 = 0.3e1;
          real _t28B1#1 = 0.12e2;
          real op1_e3_l_1028B3#2 = RMul(_t289A,_t289A);
          real op1_e3_l_1128B6#1 = RMul(_t28AF,op1_e3_l_1028B3);
          real op1_e3_l_1228B9#3 = RSub(_t28AD,op1_e3_l_1128B6);
          real op1_e3_l_1328BC#1 = RMul(op1_e3_l_1228B9,op1_e3_l_1228B9);
          real op1_e3_l_1428BF#1 = RMul(_t289A,op1_e3_l_1028B3);
          real op1_e3_l_1528C4#1 = RNeg(op1_e3_l_1428BF);
          real op1_e3_l_1628C7#1 = RMul(_t28AD,_t289A);
          real r28CB#1 = RAdd(op1_e3_l_1528C4,op1_e3_l_1628C7);
          real op1_e3_l_1728CA#3 = RAdd(r28CB,y28A9);
          real op1_e3_l_1828CF#1 = RMul(_t28AD,op1_e3_l_1328BC);
          real r28D3#1 = RMul(_t28B1,_t289A);
          real op1_e3_l_1928D2#1 = RMul(r28D3,op1_e3_l_1728CA);
          real _t28D7#1 = RSub(op1_e3_l_1828CF,op1_e3_l_1928D2);
          real _t28DA#3 = RMul(_t28AD,op1_e3_l_1228B9);
          tensor[3] _t28DD#1 = <tensor[3]>[_t28D7,_t28DA,_t242F];
          tensor[3] _t28DF#1 = <tensor[3]>[_t28DA,_t28AD,_t242F];
          real _t28E1#2 = RMul(_t28AD,zfuz241D);
          tensor[3] _t28E4#1 = <tensor[3]>[_t242F,_t242F,_t28E1];
          tensor[3,3] H28E6#1 = <tensor[3,3]>[_t28DD,_t28DF,_t28E4];
          real _t28E8#1 = RMul(_t28DA,op1_e3_l_1728CA);
          real _t28ED#1 = RMul(_t28AD,op1_e3_l_1728CA);
          real _t28F0#1 = RMul(_t28E1,z28AB);
          tensor[3] g28F5#2 = <tensor[3]>[_t28E8,_t28ED,_t28F0];
          real[3] _t28F7#1 = EigenVals3x3(H28E6);
          real _t28F9#1 = Subscript<real[3]>(_t28F7,nn25E4);
          real op1_e3_l_328FB#1 = VDot<3>(g28F5,g28F5);
          real op1_e3_l_428FE#1 = Sqrt(op1_e3_l_328FB);
          real op1_e3_l_52901#1 = RAdd(fBias2419,op1_e3_l_428FE);
          real _t2904#1 = RDiv(_t28F9,op1_e3_l_52901);
          bool _t2907#1 = GTE<real>(_t2904,fStren241B);
          goto JOIN290B
        JOIN290B:  preds = [ASSIGN2908,ASSIGN2913]
          bool _t2909#1 = phi(_t2907,_t290A)
          goto JOIN290E
        JOIN290E:  preds = [JOIN290B,ASSIGN2924]
          bool _t290C#1 = phi(_t2909,_t290D)
          if _t290C then goto NEW2910 else goto JOIN2911
        NEW2910:  preds = [COND290F]
          new particle(npos2876,hh25AD);
          goto JOIN2911
        JOIN2911:  preds = [NEW2910,COND290F]
          goto JOIN2912
        JOIN2912:  preds = [JOIN2911,COND2859]
          goto JOIN25B0
        ASSIGN2913:  preds = [COND28A8]
          bool _t290A#1 = false;
          goto JOIN290B
        ASSIGN2915:  preds = [COND28A0]
          real _t2914#2 = VIndex<3,1>(npos2876);
          bool _t2916#1 = EQ<real>(_t2914,_t2914);
          bool _t2918#1 = BNot(_t2916);
          if _t2918 then goto ASSIGN291C else goto ASSIGN2920
        ASSIGN291C:  preds = [COND291A]
          bool _t291B#1 = true;
          goto JOIN291E
        JOIN291E:  preds = [ASSIGN291C,ASSIGN2923]
          bool _t28A4#1 = phi(_t291B,_t291D)
          goto JOIN28A5
        ASSIGN2920:  preds = [COND291A]
          real _t291F#2 = VIndex<3,2>(npos2876);
          bool _t2921#1 = EQ<real>(_t291F,_t291F);
          bool _t291D#1 = BNot(_t2921);
          goto JOIN291E
        ASSIGN2924:  preds = [COND2899]
          bool _t290D#1 = false;
          goto JOIN290E
        ASSIGN2925:  preds = [COND288B]
          bool _t2894#1 = false;
          goto JOIN2895
        ASSIGN2926:  preds = [COND2883]
          bool _t2897#1 = false;
          goto JOIN2898
        ASSIGN2928:  preds = [COND284C]
          real _t2927#2 = VIndex<3,1>(pos25AF);
          bool _t2929#1 = EQ<real>(_t2927,_t2927);
          bool _t292B#1 = BNot(_t2929);
          if _t292B then goto ASSIGN292F else goto ASSIGN2933
        ASSIGN292F:  preds = [COND292D]
          bool _t292E#1 = true;
          goto JOIN2931
        JOIN2931:  preds = [ASSIGN292F,ASSIGN2936]
          bool _t2850#1 = phi(_t292E,_t2930)
          goto JOIN2851
        ASSIGN2933:  preds = [COND292D]
          real _t2932#2 = VIndex<3,2>(pos25AF);
          bool _t2934#1 = EQ<real>(_t2932,_t2932);
          bool _t2930#1 = BNot(_t2934);
          goto JOIN2931
        ASSIGN2937:  preds = [COND267C]
          bool _t26DE#1 = false;
          goto JOIN26DF
        ASSIGN2939:  preds = [COND2674]
          real _t2938#2 = VIndex<3,1>(npos2648);
          bool _t293A#1 = EQ<real>(_t2938,_t2938);
          bool _t293C#1 = BNot(_t293A);
          if _t293C then goto ASSIGN2940 else goto ASSIGN2944
        ASSIGN2940:  preds = [COND293E]
          bool _t293F#1 = true;
          goto JOIN2942
        JOIN2942:  preds = [ASSIGN2940,ASSIGN2947]
          bool _t2678#1 = phi(_t293F,_t2941)
          goto JOIN2679
        ASSIGN2944:  preds = [COND293E]
          real _t2943#2 = VIndex<3,2>(npos2648);
          bool _t2945#1 = EQ<real>(_t2943,_t2943);
          bool _t2941#1 = BNot(_t2945);
          goto JOIN2942
        ASSIGN2948:  preds = [COND266D]
          bool _t26E1#1 = false;
          goto JOIN26E2
        ASSIGN2949:  preds = [COND265F]
          bool _t2668#1 = false;
          goto JOIN2669
        ASSIGN294A:  preds = [COND2657]
          bool _t266B#1 = false;
          goto JOIN266C
        ASSIGN294C:  preds = [COND25D6]
          real _t294B#2 = VIndex<3,1>(pos25CD);
          bool _t294D#1 = EQ<real>(_t294B,_t294B);
          bool _t294F#1 = BNot(_t294D);
          if _t294F then goto ASSIGN2953 else goto ASSIGN2957
        ASSIGN2953:  preds = [COND2951]
          bool _t2952#1 = true;
          goto JOIN2955
        JOIN2955:  preds = [ASSIGN2953,ASSIGN295A]
          bool _t25DA#1 = phi(_t2952,_t2954)
          goto JOIN25DB
        ASSIGN2957:  preds = [COND2951]
          real _t2956#2 = VIndex<3,2>(pos25CD);
          bool _t2958#1 = EQ<real>(_t2956,_t2956);
          bool _t2954#1 = BNot(_t2958);
          goto JOIN2955
        ASSIGN295B:  preds = [COND2464]
          bool _t24C8#1 = false;
          goto JOIN24C9
        ASSIGN295D:  preds = [COND245C]
          real _t295C#2 = VIndex<3,1>(pos241F);
          bool _t295E#1 = EQ<real>(_t295C,_t295C);
          bool _t2960#1 = BNot(_t295E);
          if _t2960 then goto ASSIGN2964 else goto ASSIGN2968
        ASSIGN2964:  preds = [COND2962]
          bool _t2963#1 = true;
          goto JOIN2966
        JOIN2966:  preds = [ASSIGN2964,ASSIGN296B]
          bool _t2460#1 = phi(_t2963,_t2965)
          goto JOIN2461
        ASSIGN2968:  preds = [COND2962]
          real _t2967#2 = VIndex<3,2>(pos241F);
          bool _t2969#1 = EQ<real>(_t2967,_t2967);
          bool _t2965#1 = BNot(_t2969);
          goto JOIN2966
        ASSIGN296C:  preds = [COND2455]
          bool _t24CB#1 = false;
          goto JOIN24CC
        ASSIGN296D:  preds = [COND2447]
          bool _t2450#1 = false;
          goto JOIN2451
        ASSIGN296E:  preds = [COND243F]
          bool _t2453#1 = false;
          goto JOIN2454
    end update
  end particle
## initial strand creation
  COLLECTION
    ENTRY296F:  preds = []
      tensor[3][] ipos2970#1 = globals.ipos23CE;
    FOREACH2973:  preds = [ASSIGN2971,NEXT2977]
      foreach (x2972 in ipos2970) on exit goto RETURN2978
      real _t2974#1 = 0.1e1;
      new particle(x2972,_t2974);
      goto FOREACH2973
    RETURN2978:  preds = [FOREACH2973]
      return
## global update
  ENTRY2979:  preds = []
    real rad297A#1 = globals.rad23C8;
    real eps297C#1 = globals.eps23C9;
    particle[] P297E#5 = Strands<particle,all>;
    (int res2986#1) = sum<int>(MAP sum2980 (P297E));
    (int res298E#1) = max<int>(MAP max2988 (P297E));
    (int res2996#1) = sum<int>(MAP sum2990 (P297E));
    (bool res299E#2) = all(MAP all2998 (P297E));
    (real res29AC#1) = max<real>(MAP max29A0 (P297E));
    string _t29AE#1 = "One run:";
    string _t29B0#3 = " and ";
    real _t29B2#2 = RDiv(res29AC,rad297A);
    bool _t29B5#2 = LT<real>(_t29B2,eps297C);
    string _t29B7#1 = " of ";
    string _t29B9#1 = "\n";
    Print<[string,bool,string,real,string,bool,string,int,string,int,string]>(_t29AE,res299E,_t29B0,_t29B2,_t29B0,_t29B5,_t29B0,res2996,_t29B7,res2986,_t29B9);
    if res299E then goto COND29BD else goto JOIN29C3
  COND29BD:  preds = [COND29BC]
    if _t29B5 then goto ASSIGN29BF else goto JOIN29C2
  ASSIGN29BF:  preds = [COND29BD]
    string _t29BE#1 = "CONVERGED!\n";
    Print<[string]>(_t29BE);
    StabilizeAll;
    goto JOIN29C2
  JOIN29C2:  preds = [MASSIGN29C1,COND29BD]
    goto JOIN29C3
  JOIN29C3:  preds = [JOIN29C2,COND29BC]
    int _t29C4#1 = 5000;
    bool _t29C6#1 = GT<int>(res298E,_t29C4);
    if _t29C6 then goto MASSIGN29C9 else goto JOIN29CA
  MASSIGN29C9:  preds = [COND29C8]
    StabilizeAll;
    goto JOIN29CA
  JOIN29CA:  preds = [MASSIGN29C9,COND29C8]
    continue
#### end program ####
##### low-ir: after flatten ####
## properties
  GlobalInit StabilizeAll GlobalReduce StrandSets GlobalUpdate NewStrands StrandCommunication StrandsMayDie HasInputs HasGlobals ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
## globals
  input meshData23C5 (meshData) = <no-default>
  input 0space0853_intermedateGlobal23C6 (space) = <no-default>
  input 0data0855_intermedateGlobal23C7 (data) = <no-default>
  input rad23C8 (rad) = <default>
  input eps23C9 (eps) = <default>
  input v023CA (v0) = <default>
  input fBias23CB (fBias) = <default>
  input fStren23CC (fStren) = <default>
  input zfuz23CD (zfuz) = <default>
  input ipos23CE (ipos) = <no-default>
## functions
  function tensor[3] fStep24D6 (tensor[3] s24D7#3) {
    ENTRY24D8:  preds = []
      real zfuz24D9#1 = globals.zfuz23CD;
      real x24DB#5 = VIndex<3,0>(s24D7);
      real y24DD#1 = VIndex<3,1>(s24D7);
      real z24DF#1 = VIndex<3,2>(s24D7);
      real _t24E1#7 = 0.2e1;
      real _t24E3#1 = 0.3e1;
      real _t24E5#1 = 0.12e2;
      real op1_e3_l_1024E7#2 = RMul(x24DB,x24DB);
      real op1_e3_l_1124EA#1 = RMul(_t24E3,op1_e3_l_1024E7);
      real op1_e3_l_1224ED#3 = RSub(_t24E1,op1_e3_l_1124EA);
      real op1_e3_l_1324F0#1 = RMul(op1_e3_l_1224ED,op1_e3_l_1224ED);
      real op1_e3_l_1424F3#1 = RMul(x24DB,op1_e3_l_1024E7);
      real op1_e3_l_1524F8#1 = RNeg(op1_e3_l_1424F3);
      real op1_e3_l_1624FB#1 = RMul(_t24E1,x24DB);
      real r24FF#1 = RAdd(op1_e3_l_1524F8,op1_e3_l_1624FB);
      real op1_e3_l_1724FE#3 = RAdd(r24FF,y24DD);
      real op1_e3_l_182503#1 = RMul(_t24E1,op1_e3_l_1324F0);
      real r2507#1 = RMul(_t24E5,x24DB);
      real op1_e3_l_192506#1 = RMul(r2507,op1_e3_l_1724FE);
      real _t250B#1 = RSub(op1_e3_l_182503,op1_e3_l_192506);
      real _t250E#3 = RMul(_t24E1,op1_e3_l_1224ED);
      real _t2511#4 = 0.e0;
      real _t2517#2 = RMul(_t24E1,zfuz24D9);
      tensor[3,3] H251C#1 = <tensor[3,3]>[_t250B,_t250E,_t2511,_t250E,_t24E1,_t2511,_t2511,_t2511,_t2517];
      real _t251E#1 = RMul(_t250E,op1_e3_l_1724FE);
      real _t2523#1 = RMul(_t24E1,op1_e3_l_1724FE);
      real _t2526#1 = RMul(_t2517,z24DF);
      tensor[3] g252B#1 = <tensor[3]>[_t251E,_t2523,_t2526];
      (real[3] evals252D#1,tensor[3][3] E252E#1) = EigenVecs3x3(H251C);
      real _t2530#1 = 0.1e1;
      int _t2532#2 = 0;
      real _t2534#1 = Subscript<real[3]>(evals252D,_t2532);
      tensor[3] _t2536#4 = Subscript<tensor[3][3]>(E252E,_t2532);
      real op1_e3_l_52538#1 = RDiv(_t2530,_t2534);
      real op1_e3_l_6253B#3 = RNeg(op1_e3_l_52538);
      real op1_e3_l_7253E#3 = VDot<3>(_t2536,g252B);
      real r2542#1 = TensorIndex<tensor[3],[0]>(_t2536);
      real r2543#1 = RMul(op1_e3_l_6253B,r2542);
      real r2544#1 = RMul(r2543,op1_e3_l_7253E);
      real r2545#1 = TensorIndex<tensor[3],[1]>(_t2536);
      real r2546#1 = RMul(op1_e3_l_6253B,r2545);
      real r2547#1 = RMul(r2546,op1_e3_l_7253E);
      real r2548#1 = TensorIndex<tensor[3],[2]>(_t2536);
      real r2549#1 = RMul(op1_e3_l_6253B,r2548);
      real r254A#1 = RMul(r2549,op1_e3_l_7253E);
      tensor[3] up2541#4 = <tensor[3]>[r2544,r2547,r254A];
      real _t2556#2 = VIndex<3,0>(up2541);
      bool _t2558#1 = EQ<real>(_t2556,_t2556);
      bool _t255A#1 = BNot(_t2558);
      if _t255A then goto ASSIGN255E else goto ASSIGN256B
    ASSIGN255E:  preds = [COND255C]
      bool _t255D#1 = true;
      goto JOIN2561
    JOIN2561:  preds = [ASSIGN255E,JOIN2574]
      bool _t255F#1 = phi(_t255D,_t2560)
      if _t255F then goto ASSIGN2564 else goto JOIN2568
    ASSIGN2564:  preds = [COND2562]
      real _t2563#3 = +inf;
      tensor[3] _t2565#1 = <tensor[3]>[_t2563,_t2563,_t2563];
      return _t2565
      goto JOIN2568
    JOIN2568:  preds = [*RETURN(_t2565)2567,COND2562]
      return up2541
    ASSIGN256B:  preds = [COND255C]
      real _t256A#2 = VIndex<3,1>(up2541);
      bool _t256C#1 = EQ<real>(_t256A,_t256A);
      bool _t256E#1 = BNot(_t256C);
      if _t256E then goto ASSIGN2572 else goto ASSIGN2576
    ASSIGN2572:  preds = [COND2570]
      bool _t2571#1 = true;
      goto JOIN2574
    JOIN2574:  preds = [ASSIGN2572,ASSIGN2579]
      bool _t2560#1 = phi(_t2571,_t2573)
      goto JOIN2561
    ASSIGN2576:  preds = [COND2570]
      real _t2575#2 = VIndex<3,2>(up2541);
      bool _t2577#1 = EQ<real>(_t2575,_t2575);
      bool _t2573#1 = BNot(_t2577);
      goto JOIN2574
}
  function tensor[3,3] fPerp26ED (tensor[3] s26EE#2) {
    ENTRY26EF:  preds = []
      real zfuz26F0#1 = globals.zfuz23CD;
      real x26F2#5 = VIndex<3,0>(s26EE);
      real y26F4#1 = VIndex<3,1>(s26EE);
      real _t26F6#6 = 0.2e1;
      real _t26F8#1 = 0.3e1;
      real _t26FA#1 = 0.12e2;
      real op1_e3_l_1026FC#2 = RMul(x26F2,x26F2);
      real op1_e3_l_1126FF#1 = RMul(_t26F8,op1_e3_l_1026FC);
      real op1_e3_l_122702#3 = RSub(_t26F6,op1_e3_l_1126FF);
      real op1_e3_l_132705#1 = RMul(op1_e3_l_122702,op1_e3_l_122702);
      real op1_e3_l_142708#1 = RMul(x26F2,op1_e3_l_1026FC);
      real op1_e3_l_15270D#1 = RNeg(op1_e3_l_142708);
      real op1_e3_l_162710#1 = RMul(_t26F6,x26F2);
      real r2714#1 = RAdd(op1_e3_l_15270D,op1_e3_l_162710);
      real op1_e3_l_172713#1 = RAdd(r2714,y26F4);
      real op1_e3_l_182718#1 = RMul(_t26F6,op1_e3_l_132705);
      real r271C#1 = RMul(_t26FA,x26F2);
      real op1_e3_l_19271B#1 = RMul(r271C,op1_e3_l_172713);
      real _t2720#1 = RSub(op1_e3_l_182718,op1_e3_l_19271B);
      real _t2723#2 = RMul(_t26F6,op1_e3_l_122702);
      real _t2726#19 = 0.e0;
      real _t272C#1 = RMul(_t26F6,zfuz26F0);
      tensor[3,3] H2731#1 = <tensor[3,3]>[_t2720,_t2723,_t2726,_t2723,_t26F6,_t2726,_t2726,_t2726,_t272C];
      (real[3] evals2733#0,tensor[3][3] _t2734#1) = EigenVecs3x3(H2731);
      int _t2736#1 = 0;
      tensor[3] E22738#6 = Subscript<tensor[3][3]>(_t2734,_t2736);
      real r273B#1 = TensorIndex<tensor[3],[0]>(E22738);
      tensor[3] binopV273C#3 = VScale<3>(r273B,E22738);
      real r273D#1 = TensorIndex<tensor[3],[1]>(E22738);
      tensor[3] binopV273E#3 = VScale<3>(r273D,E22738);
      real r273F#1 = TensorIndex<tensor[3],[2]>(E22738);
      tensor[3] binopV2740#3 = VScale<3>(r273F,E22738);
      real realLit274A#3 = 0.1e1;
      real r274B#1 = VIndex<3,0>(binopV273C);
      real r274C#2 = RSub(realLit274A,r274B);
      real r274E#1 = VIndex<3,1>(binopV273C);
      real r274F#2 = RSub(_t2726,r274E);
      real r2750#1 = VIndex<3,2>(binopV273C);
      real r2751#2 = RSub(_t2726,r2750);
      tensor[3] tensor2752#2 = <tensor[3]>[r274C,r274F,r2751];
      real r2753#1 = VIndex<3,0>(binopV273E);
      real r2754#2 = RSub(_t2726,r2753);
      real r2755#1 = VIndex<3,1>(binopV273E);
      real r2756#2 = RSub(realLit274A,r2755);
      real r2757#1 = VIndex<3,2>(binopV273E);
      real r2758#2 = RSub(_t2726,r2757);
      tensor[3] tensor2759#2 = <tensor[3]>[r2754,r2756,r2758];
      real r275A#1 = VIndex<3,0>(binopV2740);
      real r275B#2 = RSub(_t2726,r275A);
      real r275C#1 = VIndex<3,1>(binopV2740);
      real r275D#2 = RSub(_t2726,r275C);
      real r275E#1 = VIndex<3,2>(binopV2740);
      real r275F#2 = RSub(realLit274A,r275E);
      tensor[3] tensor2760#2 = <tensor[3]>[r275B,r275D,r275F];
      tensor[3,3] m2749#1 = <tensor[3,3]>[r274C,r274F,r2751,r2754,r2756,r2758,r275B,r275D,r275F];
      real vdot277C#1 = VDot<3>(tensor2752,tensor2752);
      real vdot277E#1 = VDot<3>(tensor2759,tensor2759);
      real r277F#1 = RAdd(vdot277C,vdot277E);
      real vdot2781#1 = VDot<3>(tensor2760,tensor2760);
      real t277A#2 = RAdd(r277F,vdot2781);
      bool _t278B#1 = EQ<real>(t277A,t277A);
      bool _t278D#1 = BNot(_t278B);
      if _t278D then goto ASSIGN2A07 else goto JOIN2798
    ASSIGN2A07:  preds = [COND278F]
      tensor[3,3] _t2790#1 = <tensor[3,3]>[_t2726,_t2726,_t2726,_t2726,_t2726,_t2726,_t2726,_t2726,_t2726];
      return _t2790
      goto JOIN2798
    JOIN2798:  preds = [*RETURN(_t2790)2797,COND278F]
      return m2749
}
  function int sum2980 (particle P2981#1) {
    ENTRY2982:  preds = []
      int _t2983#1 = P2981.test;
      return _t2983
}
  function int max2988 (particle P2989#1) {
    ENTRY298A:  preds = []
      int _t298B#1 = P2989.steps;
      return _t298B
}
  function int sum2990 (particle P2991#1) {
    ENTRY2992:  preds = []
      int _t2993#1 = P2991.testp;
      return _t2993
}
  function bool all2998 (particle P2999#1) {
    ENTRY299A:  preds = []
      bool _t299B#1 = P2999.found;
      return _t299B
}
  function real max29A0 (particle P29A1#1) {
    ENTRY29A2:  preds = []
      tensor[3] _t29A3#2 = P29A1.step;
      real op1_e3_l_129A5#1 = VDot<3>(_t29A3,_t29A3);
      real _t29A8#1 = Sqrt(op1_e3_l_129A5);
      return _t29A8
}
## input initialization
  ENTRY23CF:  preds = []
    real rad23D0#5 = 0.1e-1;
    globals.rad23C8 = rad23D0;
    globals.eps23C9 = rad23D0;
    real v023D4#1 = 0.625e-1;
    globals.v023CA = v023D4;
    globals.fBias23CB = rad23D0;
    globals.fStren23CC = rad23D0;
    globals.zfuz23CD = rad23D0;
    return
## global-variable initialization
  ENTRY23DB:  preds = []
    femData:Mesh meshData23DC#2 = globals.meshData23C5;
    int _t23DE#1 = 0;
    int _t23E0#1 = 1;
    int _t23E2#1 = ExtractFemItem<int,NumCell(Mesh)>(meshData23DC);
    int _t23E4#1 = ISub(_t23E2,_t23E0);
    int[] _t23E6#1 = Range(_t23DE,_t23E4);
    femData:MeshCell[] _t23E8#1 = <femData:MeshCell[]>{};
  FOREACH23EB:  preds = [ASSIGN23E9,NEXT23F1]
    foreach (_t23EA in _t23E6) on exit goto RETURN23F2
      femData:MeshCell[] _t23EF#1 = phi(_t23E8,_t23EE)
    femData:MeshCell _t23EC#1 = LoadFem<femData:MeshCell>(meshData23DC,_t23EA);
    femData:MeshCell[] _t23EE#1 = Append<femData:MeshCell>(_t23EF,_t23EC);
    goto FOREACH23EB
  RETURN23F2:  preds = [FOREACH23EB]
    return
## strand
  strand particle (tensor[3] pos023F3#2, real hh023F4#1) in 3D
    state:
      output tensor[3] pos;
      output tensor[3] _pos;
      real hh;
      tensor[3] step;
      bool found;
      int nfs;
      int test;
      int testp;
      int steps;
    state init
      ENTRY23FE:  preds = []
        real realLit2400#3 = 0.e0;
        tensor[3] step23FF#1 = <tensor[3]>[realLit2400,realLit2400,realLit2400];
        bool found2404#1 = false;
        int nfs2406#3 = 0;
        int test2408#1 = 1;
        self.pos = pos023F3;
        self._pos = pos023F3;
        self.hh = hh023F4;
        self.step = step23FF;
        self.found = found2404;
        self.nfs = nfs2406;
        self.test = test2408;
        self.testp = nfs2406;
        self.steps = nfs2406;
        return
    end state init
    method update
        ENTRY2414:  preds = []
          real rad2415#10 = globals.rad23C8;
          real eps2417#1 = globals.eps23C9;
          real fBias2419#3 = globals.fBias23CB;
          real fStren241B#3 = globals.fStren23CC;
          real zfuz241D#3 = globals.zfuz23CD;
          tensor[3] pos241F#10 = self.pos;
          real hh2421#7 = self.hh;
          bool found2423#3 = self.found;
          int nfs2425#3 = self.nfs;
          int testp2427#2 = self.testp;
          int steps2429#1 = self.steps;
          int _t242B#4 = 1;
          int steps242D#4 = IAdd(steps2429,_t242B);
          real _t242F#19 = 0.e0;
          tensor[3] _t2431#7 = <tensor[3]>[_t242F,_t242F,_t242F];
          tensor[3] mid2433#3 = VSub<3>(pos241F,_t2431);
          real _t2436#1 = VIndex<3,0>(mid2433);
          real _t2438#1 = Abs<real>(_t2436);
          real _t243B#9 = 0.4e1;
          bool _t243D#1 = LTE<real>(_t2438,_t243B);
          if _t243D then goto ASSIGN2441 else goto ASSIGN296E
        ASSIGN2441:  preds = [COND243F]
          real _t2440#1 = VIndex<3,1>(mid2433);
          real _t2442#1 = Abs<real>(_t2440);
          bool _t2445#1 = LTE<real>(_t2442,_t243B);
          if _t2445 then goto ASSIGN2449 else goto ASSIGN296D
        ASSIGN2449:  preds = [COND2447]
          real _t2448#1 = VIndex<3,2>(mid2433);
          real _t244A#1 = Abs<real>(_t2448);
          bool _t244D#1 = LTE<real>(_t244A,_t243B);
          goto JOIN2451
        JOIN2451:  preds = [ASSIGN244E,ASSIGN296D]
          bool _t244F#1 = phi(_t244D,_t2450)
          goto JOIN2454
        JOIN2454:  preds = [JOIN2451,ASSIGN296E]
          bool _t2452#1 = phi(_t244F,_t2453)
          if _t2452 then goto ASSIGN2457 else goto ASSIGN296C
        ASSIGN2457:  preds = [COND2455]
          real _t2456#7 = VIndex<3,0>(pos241F);
          bool _t2458#1 = EQ<real>(_t2456,_t2456);
          bool _t245A#1 = BNot(_t2458);
          if _t245A then goto ASSIGN245E else goto ASSIGN295D
        ASSIGN245E:  preds = [COND245C]
          bool _t245D#1 = true;
          goto JOIN2461
        JOIN2461:  preds = [ASSIGN245E,JOIN2966]
          bool _t245F#1 = phi(_t245D,_t2460)
          bool _t2462#1 = BNot(_t245F);
          if _t2462 then goto ASSIGN2466 else goto ASSIGN295B
        ASSIGN2466:  preds = [COND2464]
          real y2465#1 = VIndex<3,1>(pos241F);
          real z2467#1 = VIndex<3,2>(pos241F);
          real _t2469#7 = 0.2e1;
          real _t246B#1 = 0.3e1;
          real _t246D#1 = 0.12e2;
          real op1_e3_l_10246F#2 = RMul(_t2456,_t2456);
          real op1_e3_l_112472#1 = RMul(_t246B,op1_e3_l_10246F);
          real op1_e3_l_122475#3 = RSub(_t2469,op1_e3_l_112472);
          real op1_e3_l_132478#1 = RMul(op1_e3_l_122475,op1_e3_l_122475);
          real op1_e3_l_14247B#1 = RMul(_t2456,op1_e3_l_10246F);
          real op1_e3_l_152480#1 = RNeg(op1_e3_l_14247B);
          real op1_e3_l_162483#1 = RMul(_t2469,_t2456);
          real r2487#1 = RAdd(op1_e3_l_152480,op1_e3_l_162483);
          real op1_e3_l_172486#3 = RAdd(r2487,y2465);
          real op1_e3_l_18248B#1 = RMul(_t2469,op1_e3_l_132478);
          real r248F#1 = RMul(_t246D,_t2456);
          real op1_e3_l_19248E#1 = RMul(r248F,op1_e3_l_172486);
          real _t2493#1 = RSub(op1_e3_l_18248B,op1_e3_l_19248E);
          real _t2496#3 = RMul(_t2469,op1_e3_l_122475);
          real _t249D#2 = RMul(_t2469,zfuz241D);
          tensor[3,3] H24A2#1 = <tensor[3,3]>[_t2493,_t2496,_t242F,_t2496,_t2469,_t242F,_t242F,_t242F,_t249D];
          real _t24A4#1 = RMul(_t2496,op1_e3_l_172486);
          real _t24A9#1 = RMul(_t2469,op1_e3_l_172486);
          real _t24AC#1 = RMul(_t249D,z2467);
          tensor[3] g24B1#2 = <tensor[3]>[_t24A4,_t24A9,_t24AC];
          real[3] _t24B3#1 = EigenVals3x3(H24A2);
          int _t24B5#1 = 0;
          real _t24B7#1 = Subscript<real[3]>(_t24B3,_t24B5);
          real op1_e3_l_324B9#1 = VDot<3>(g24B1,g24B1);
          real op1_e3_l_424BC#1 = Sqrt(op1_e3_l_324B9);
          real op1_e3_l_524BF#1 = RAdd(fBias2419,op1_e3_l_424BC);
          real _t24C2#1 = RDiv(_t24B7,op1_e3_l_524BF);
          bool _t24C5#1 = GTE<real>(_t24C2,fStren241B);
          goto JOIN24C9
        JOIN24C9:  preds = [ASSIGN24C6,ASSIGN295B]
          bool _t24C7#1 = phi(_t24C5,_t24C8)
          goto JOIN24CC
        JOIN24CC:  preds = [JOIN24C9,ASSIGN296C]
          bool _t24CA#1 = phi(_t24C7,_t24CB)
          bool _t24CD#1 = BNot(_t24CA);
          if _t24CD then goto DIE24D0 else goto JOIN24D1
        DIE24D0:  preds = [COND24CF]
          die
          goto JOIN24D1
        JOIN24D1:  preds = [*DIE24D0,COND24CF]
          bool _t24D2#1 = BNot(found2423);
          if _t24D2 then goto ASSIGN257A else goto ASSIGN25CC
        ASSIGN257A:  preds = [COND24D4]
          tensor[3] step24D5#4 = fStep24D6 (pos241F);
          tensor[3] pos257B#4 = VAdd<3>(pos241F,step24D5);
          real _t257E#2 = VIndex<3,0>(pos257B);
          bool _t2580#1 = EQ<real>(_t257E,_t257E);
          bool _t2582#1 = BNot(_t2580);
          if _t2582 then goto ASSIGN2586 else goto ASSIGN25BC
        ASSIGN2586:  preds = [COND2584]
          bool _t2585#1 = true;
          goto JOIN2589
        JOIN2589:  preds = [ASSIGN2586,JOIN25C5]
          bool _t2587#1 = phi(_t2585,_t2588)
          if _t2587 then goto DIE258B else goto JOIN258C
        DIE258B:  preds = [COND258A]
          die
          goto JOIN258C
        JOIN258C:  preds = [*DIE258B,COND258A]
          real op1_e3_l_2258D#1 = VDot<3>(step24D5,step24D5);
          real op1_e3_l_32590#1 = Sqrt(op1_e3_l_2258D);
          real _t2593#1 = RDiv(op1_e3_l_32590,rad2415);
          bool _t2596#1 = GT<real>(_t2593,eps2417);
          if _t2596 then goto ASSIGN259A else goto ASSIGN25BA
        ASSIGN259A:  preds = [COND2598]
          int nfs2599#2 = IAdd(nfs2425,_t242B);
          int _t259B#1 = 10;
          bool _t259D#1 = GT<int>(nfs2599,_t259B);
          if _t259D then goto DIE25A0 else goto JOIN25A1
        DIE25A0:  preds = [COND259F]
          die
          goto JOIN25A1
        JOIN25A1:  preds = [*DIE25A0,COND259F]
          goto JOIN25A6
        JOIN25A6:  preds = [JOIN25A1,ASSIGN25BA]
          int testp25A2#1 = phi(testp2427,_t242B)
          int nfs25A3#1 = phi(nfs2599,nfs2425)
          bool found25A4#1 = phi(found2423,found25A5)
          goto JOIN25B0
        JOIN25B0:  preds = [JOIN25A6,JOIN2912]
          int testp25A7#1 = phi(testp25A2,testp2427)
          int nfs25A8#1 = phi(nfs25A3,nfs2425)
          bool found25A9#1 = phi(found25A4,found2423)
          tensor[3] step25AA#1 = phi(step24D5,up25AB)
          real hh25AC#1 = phi(hh2421,hh25AD)
          tensor[3] pos25AE#2 = phi(pos257B,pos25AF)
          self.pos = pos25AE;
          self._pos = pos25AE;
          self.hh = hh25AC;
          self.step = step25AA;
          self.found = found25A9;
          self.nfs = nfs25A8;
          self.testp = testp25A7;
          self.steps = steps242D;
          active
        ASSIGN25BA:  preds = [COND2598]
          bool found25A5#1 = true;
          goto JOIN25A6
        ASSIGN25BC:  preds = [COND2584]
          real _t25BB#2 = VIndex<3,1>(pos257B);
          bool _t25BD#1 = EQ<real>(_t25BB,_t25BB);
          bool _t25BF#1 = BNot(_t25BD);
          if _t25BF then goto ASSIGN25C3 else goto ASSIGN25C7
        ASSIGN25C3:  preds = [COND25C1]
          bool _t25C2#1 = true;
          goto JOIN25C5
        JOIN25C5:  preds = [ASSIGN25C3,ASSIGN25CA]
          bool _t2588#1 = phi(_t25C2,_t25C4)
          goto JOIN2589
        ASSIGN25C7:  preds = [COND25C1]
          real _t25C6#2 = VIndex<3,2>(pos257B);
          bool _t25C8#1 = EQ<real>(_t25C6,_t25C6);
          bool _t25C4#1 = BNot(_t25C8);
          goto JOIN25C5
        ASSIGN25CC:  preds = [COND24D4]
          tensor[3] _t25CB#1 = fStep24D6 (pos241F);
          tensor[3] pos25CD#16 = VAdd<3>(pos241F,_t25CB);
          real _t25D0#2 = VIndex<3,0>(pos25CD);
          bool _t25D2#1 = EQ<real>(_t25D0,_t25D0);
          bool _t25D4#1 = BNot(_t25D2);
          if _t25D4 then goto ASSIGN25D8 else goto ASSIGN294C
        ASSIGN25D8:  preds = [COND25D6]
          bool _t25D7#1 = true;
          goto JOIN25DB
        JOIN25DB:  preds = [ASSIGN25D8,JOIN2955]
          bool _t25D9#1 = phi(_t25D7,_t25DA)
          if _t25D9 then goto DIE25DD else goto JOIN25DE
        DIE25DD:  preds = [COND25DC]
          die
          goto JOIN25DE
        JOIN25DE:  preds = [*DIE25DD,COND25DC]
          int nn25E4#4 = 0;
          particle[] _t25E6#1 = SphereQuery<3,particle>(pos25CD,rad2415);
        FOREACH25E9:  preds = [ASSIGN25E7,NEXT263D]
          foreach (P25E8 in _t25E6) on exit goto ASSIGN263F
            int nn263B#3 = phi(nn25E4,nn263A)
            tensor[3] force2637#4 = phi(_t2431,force2636)
            real oldE2603#2 = phi(_t242F,oldE2602)
          tensor[3] _t25EA#1 = P25E8.pos;
          real _t25EC#3 = 0.1e1;
          tensor[3] op1_e3_l_825EE#5 = VSub<3>(_t25EA,pos25CD);
          real op1_e3_l_1025F1#1 = VDot<3>(op1_e3_l_825EE,op1_e3_l_825EE);
          real op1_e3_l_1125F4#2 = Sqrt(op1_e3_l_1025F1);
          real op1_e3_l_1225F7#1 = RDiv(op1_e3_l_1125F4,rad2415);
          real op1_e3_l_1325FA#3 = RSub(_t25EC,op1_e3_l_1225F7);
          real _Pow_225FE#3 = RMul(op1_e3_l_1325FA,op1_e3_l_1325FA);
          real op1_e3_l_1425FD#1 = RMul(_Pow_225FE,_Pow_225FE);
          real oldE2602#1 = RAdd(oldE2603,op1_e3_l_1425FD);
          real _t2606#1 = -0.4e1;
          real op1_e3_l_242608#1 = RMul(op1_e3_l_1325FA,_Pow_225FE);
          real op1_e3_l_25260D#1 = RDiv(_t25EC,rad2415);
          real r2611#1 = TensorIndex<tensor[3],[0]>(op1_e3_l_825EE);
          real r2612#1 = RMul(_t2606,op1_e3_l_242608);
          real r2613#3 = RMul(r2612,op1_e3_l_25260D);
          real r2614#1 = RMul(r2613,r2611);
          real r2615#1 = TensorIndex<tensor[3],[1]>(op1_e3_l_825EE);
          real r2616#1 = RMul(r2613,r2615);
          real r2617#1 = TensorIndex<tensor[3],[2]>(op1_e3_l_825EE);
          real r2618#1 = RMul(r2613,r2617);
          real r2625#3 = RDiv(_t25EC,op1_e3_l_1125F4);
          real r2627#1 = RMul(r2625,r2614);
          real r2629#1 = RMul(r2625,r2616);
          real r262B#1 = RMul(r2625,r2618);
          tensor[3] op1_e3_l_342623#1 = <tensor[3]>[r2627,r2629,r262B];
          tensor[3] force2636#1 = VAdd<3>(force2637,op1_e3_l_342623);
          int nn263A#1 = IAdd(nn263B,_t242B);
          goto FOREACH25E9
        ASSIGN263F:  preds = [FOREACH25E9]
          bool _t263E#1 = EQ<int>(nn25E4,nn263B);
          if _t263E then goto ASSIGN2642 else goto JOIN26EB
        ASSIGN2642:  preds = [COND2640]
          real _t2641#1 = 0.5e0;
          real _t2643#1 = RMul(_t2641,rad2415);
          tensor[3] _t2646#1 = <tensor[3]>[_t2643,_t242F,_t242F];
          tensor[3] npos2648#7 = VAdd<3>(pos25CD,_t2646);
          tensor[3] mid264D#3 = VSub<3>(npos2648,_t2431);
          real _t2650#1 = VIndex<3,0>(mid264D);
          real _t2652#1 = Abs<real>(_t2650);
          bool _t2655#1 = LTE<real>(_t2652,_t243B);
          if _t2655 then goto ASSIGN2659 else goto ASSIGN294A
        ASSIGN2659:  preds = [COND2657]
          real _t2658#1 = VIndex<3,1>(mid264D);
          real _t265A#1 = Abs<real>(_t2658);
          bool _t265D#1 = LTE<real>(_t265A,_t243B);
          if _t265D then goto ASSIGN2661 else goto ASSIGN2949
        ASSIGN2661:  preds = [COND265F]
          real _t2660#1 = VIndex<3,2>(mid264D);
          real _t2662#1 = Abs<real>(_t2660);
          bool _t2665#1 = LTE<real>(_t2662,_t243B);
          goto JOIN2669
        JOIN2669:  preds = [ASSIGN2666,ASSIGN2949]
          bool _t2667#1 = phi(_t2665,_t2668)
          goto JOIN266C
        JOIN266C:  preds = [JOIN2669,ASSIGN294A]
          bool _t266A#1 = phi(_t2667,_t266B)
          if _t266A then goto ASSIGN266F else goto ASSIGN2948
        ASSIGN266F:  preds = [COND266D]
          real _t266E#7 = VIndex<3,0>(npos2648);
          bool _t2670#1 = EQ<real>(_t266E,_t266E);
          bool _t2672#1 = BNot(_t2670);
          if _t2672 then goto ASSIGN2676 else goto ASSIGN2939
        ASSIGN2676:  preds = [COND2674]
          bool _t2675#1 = true;
          goto JOIN2679
        JOIN2679:  preds = [ASSIGN2676,JOIN2942]
          bool _t2677#1 = phi(_t2675,_t2678)
          bool _t267A#1 = BNot(_t2677);
          if _t267A then goto ASSIGN267E else goto ASSIGN2937
        ASSIGN267E:  preds = [COND267C]
          real y267D#1 = VIndex<3,1>(npos2648);
          real z267F#1 = VIndex<3,2>(npos2648);
          real _t2681#7 = 0.2e1;
          real _t2683#1 = 0.3e1;
          real _t2685#1 = 0.12e2;
          real op1_e3_l_102687#2 = RMul(_t266E,_t266E);
          real op1_e3_l_11268A#1 = RMul(_t2683,op1_e3_l_102687);
          real op1_e3_l_12268D#3 = RSub(_t2681,op1_e3_l_11268A);
          real op1_e3_l_132690#1 = RMul(op1_e3_l_12268D,op1_e3_l_12268D);
          real op1_e3_l_142693#1 = RMul(_t266E,op1_e3_l_102687);
          real op1_e3_l_152698#1 = RNeg(op1_e3_l_142693);
          real op1_e3_l_16269B#1 = RMul(_t2681,_t266E);
          real r269F#1 = RAdd(op1_e3_l_152698,op1_e3_l_16269B);
          real op1_e3_l_17269E#3 = RAdd(r269F,y267D);
          real op1_e3_l_1826A3#1 = RMul(_t2681,op1_e3_l_132690);
          real r26A7#1 = RMul(_t2685,_t266E);
          real op1_e3_l_1926A6#1 = RMul(r26A7,op1_e3_l_17269E);
          real _t26AB#1 = RSub(op1_e3_l_1826A3,op1_e3_l_1926A6);
          real _t26AE#3 = RMul(_t2681,op1_e3_l_12268D);
          real _t26B5#2 = RMul(_t2681,zfuz241D);
          tensor[3,3] H26BA#1 = <tensor[3,3]>[_t26AB,_t26AE,_t242F,_t26AE,_t2681,_t242F,_t242F,_t242F,_t26B5];
          real _t26BC#1 = RMul(_t26AE,op1_e3_l_17269E);
          real _t26C1#1 = RMul(_t2681,op1_e3_l_17269E);
          real _t26C4#1 = RMul(_t26B5,z267F);
          tensor[3] g26C9#2 = <tensor[3]>[_t26BC,_t26C1,_t26C4];
          real[3] _t26CB#1 = EigenVals3x3(H26BA);
          real _t26CD#1 = Subscript<real[3]>(_t26CB,nn25E4);
          real op1_e3_l_326CF#1 = VDot<3>(g26C9,g26C9);
          real op1_e3_l_426D2#1 = Sqrt(op1_e3_l_326CF);
          real op1_e3_l_526D5#1 = RAdd(fBias2419,op1_e3_l_426D2);
          real _t26D8#1 = RDiv(_t26CD,op1_e3_l_526D5);
          bool _t26DB#1 = GTE<real>(_t26D8,fStren241B);
          goto JOIN26DF
        JOIN26DF:  preds = [ASSIGN26DC,ASSIGN2937]
          bool _t26DD#1 = phi(_t26DB,_t26DE)
          goto JOIN26E2
        JOIN26E2:  preds = [JOIN26DF,ASSIGN2948]
          bool _t26E0#1 = phi(_t26DD,_t26E1)
          if _t26E0 then goto NEW26E4 else goto JOIN26E5
        NEW26E4:  preds = [COND26E3]
          new particle(npos2648,hh2421);
          goto JOIN26E5
        JOIN26E5:  preds = [NEW26E4,COND26E3]
          self.pos = pos25CD;
          self._pos = pos25CD;
          self.step = _t2431;
          self.steps = steps242D;
          active
          goto JOIN26EB
        JOIN26EB:  preds = [*ACTIVE26EA,COND2640]
          tensor[3,3] _t26EC#3 = fPerp26ED (pos25CD);
          tensor[3] projParam279C#1 = ProjectLast<tensor[3,3],[0]>(_t26EC);
          real vdot279D#2 = VDot<3>(projParam279C,force2637);
          tensor[3] projParam279E#1 = ProjectLast<tensor[3,3],[1]>(_t26EC);
          real vdot279F#2 = VDot<3>(projParam279E,force2637);
          tensor[3] projParam27A0#1 = ProjectLast<tensor[3,3],[2]>(_t26EC);
          real vdot27A1#2 = VDot<3>(projParam27A0,force2637);
          tensor[3] op1_e3_l_3279B#4 = <tensor[3]>[vdot279D,vdot279F,vdot27A1];
          tensor[3] es27AA#1 = VScale<3>(hh2421,op1_e3_l_3279B);
          real op1_e3_l_527AD#1 = VDot<3>(op1_e3_l_3279B,op1_e3_l_3279B);
          real r27B1#1 = RMul(hh2421,hh2421);
          real op1_e3_l_627B0#1 = RMul(r27B1,op1_e3_l_527AD);
          real _t27B5#2 = Sqrt(op1_e3_l_627B0);
          bool _t27B8#1 = GT<real>(_t27B5,rad2415);
          if _t27B8 then goto ASSIGN27BD else goto JOIN27D4
        ASSIGN27BD:  preds = [COND27BA]
          real op1_e3_l_1027BB#1 = RDiv(rad2415,_t27B5);
          real hh27BE#4 = RMul(hh2421,op1_e3_l_1027BB);
          real r27C4#1 = RMul(hh27BE,vdot279D);
          real r27C6#1 = RMul(hh27BE,vdot279F);
          real r27C8#1 = RMul(hh27BE,vdot27A1);
          tensor[3] es27C1#1 = <tensor[3]>[r27C4,r27C6,r27C8];
          goto JOIN27D4
        JOIN27D4:  preds = [ASSIGN27D1,COND27BA]
          tensor[3] es27D2#8 = phi(es27C1,es27AA)
          real hh27D3#2 = phi(hh27BE,hh2421)
          tensor[3] samplePos27D5#1 = VAdd<3>(pos25CD,es27D2);
          tensor[3] fs27DA#4 = fStep24D6 (samplePos27D5);
          real op1_e3_l_227DC#1 = VDot<3>(fs27DA,fs27DA);
          real op1_e3_l_327DF#1 = VDot<3>(es27D2,es27D2);
          real op1_e3_l_427E2#1 = Sqrt(op1_e3_l_227DC);
          real op1_e3_l_527E5#2 = Sqrt(op1_e3_l_327DF);
          real _t27E8#1 = RDiv(op1_e3_l_427E2,op1_e3_l_527E5);
          real _t27EB#5 = 0.5e0;
          bool _t27ED#1 = GT<real>(_t27E8,_t27EB);
          if _t27ED then goto ASSIGN27F2 else goto JOIN27FA
        ASSIGN27F2:  preds = [COND27EF]
          real hh27F0#1 = RMul(hh27D3,_t27EB);
          self.pos = pos25CD;
          self._pos = pos25CD;
          self.hh = hh27F0;
          self.step = _t2431;
          self.steps = steps242D;
          active
          goto JOIN27FA
        JOIN27FA:  preds = [*ACTIVE27F8,COND27EF]
          real hh27F9#2 = phi(hh27D3)
          tensor[3] up25AB#1 = VAdd<3>(fs27DA,es27D2);
          tensor[3] v27FF#1 = VAdd<3>(pos25CD,fs27DA);
          tensor[3] pos27FD#4 = VAdd<3>(v27FF,es27D2);
          particle[] _t2804#1 = SphereQuery<3,particle>(pos27FD,rad2415);
        FOREACH2807:  preds = [ASSIGN2805,NEXT2824]
          foreach (P2806 in _t2804) on exit goto ASSIGN2827
            real accum2821#2 = phi(_t242F,accum2820)
          tensor[3] _t2808#1 = P2806.pos;
          real _t280A#1 = 0.1e1;
          tensor[3] op1_e3_l_10280C#2 = VSub<3>(pos27FD,_t2808);
          real op1_e3_l_12280F#1 = VDot<3>(op1_e3_l_10280C,op1_e3_l_10280C);
          real op1_e3_l_132812#1 = Sqrt(op1_e3_l_12280F);
          real op1_e3_l_142815#1 = RDiv(op1_e3_l_132812,rad2415);
          real op1_e3_l_152818#2 = RSub(_t280A,op1_e3_l_142815);
          real _Pow_2281C#2 = RMul(op1_e3_l_152818,op1_e3_l_152818);
          real op1_e3_l_16281B#1 = RMul(_Pow_2281C,_Pow_2281C);
          real accum2820#1 = RAdd(accum2821,op1_e3_l_16281B);
          goto FOREACH2807
        ASSIGN2827:  preds = [FOREACH2807]
          real _t2825#1 = RSub(accum2821,oldE2603);
          tensor[3] op1_e3_l_122828#1 = VSub<3>(pos27FD,pos25CD);
          tensor[3] op1_e3_l_13282B#1 = VNeg<3>(op1_e3_l_3279B);
          real op1_e3_l_14282E#1 = VDot<3>(op1_e3_l_122828,op1_e3_l_13282B);
          real _t2831#1 = RMul(_t27EB,op1_e3_l_14282E);
          bool _t2834#1 = GT<real>(_t2825,_t2831);
          if _t2834 then goto ASSIGN2839 else goto JOIN2841
        ASSIGN2839:  preds = [COND2836]
          real hh2837#1 = RMul(hh27F9,_t27EB);
          self.pos = pos25CD;
          self._pos = pos25CD;
          self.hh = hh2837;
          self.step = _t2431;
          self.steps = steps242D;
          active
          goto JOIN2841
        JOIN2841:  preds = [*ACTIVE283F,COND2836]
          real hh2840#1 = phi(hh27F9)
          tensor[3] pos25AF#5 = phi(pos27FD)
          real _t2842#1 = 0.11e1;
          real hh25AD#2 = RMul(hh2840,_t2842);
          real _t2846#2 = VIndex<3,0>(pos25AF);
          bool _t2848#1 = EQ<real>(_t2846,_t2846);
          bool _t284A#1 = BNot(_t2848);
          if _t284A then goto ASSIGN284E else goto ASSIGN2928
        ASSIGN284E:  preds = [COND284C]
          bool _t284D#1 = true;
          goto JOIN2851
        JOIN2851:  preds = [ASSIGN284E,JOIN2931]
          bool _t284F#1 = phi(_t284D,_t2850)
          if _t284F then goto DIE2853 else goto JOIN2854
        DIE2853:  preds = [COND2852]
          die
          goto JOIN2854
        JOIN2854:  preds = [*DIE2853,COND2852]
          int _t2855#1 = 5;
          bool _t2857#1 = LT<int>(nn263B,_t2855);
          if _t2857 then goto ASSIGN285D else goto JOIN2912
        ASSIGN285D:  preds = [COND2859]
          real realLit285B#1 = 0.1e1;
          real op1_e3_l_7285A#3 = RDiv(realLit285B,op1_e3_l_527E5);
          real r2860#1 = TensorIndex<tensor[3],[0]>(es27D2);
          real r2861#3 = RMul(_t27EB,rad2415);
          real r2862#1 = RMul(r2861,r2860);
          real r2863#1 = RMul(r2862,op1_e3_l_7285A);
          real r2864#1 = TensorIndex<tensor[3],[1]>(es27D2);
          real r2865#1 = RMul(r2861,r2864);
          real r2866#1 = RMul(r2865,op1_e3_l_7285A);
          real r2867#1 = TensorIndex<tensor[3],[2]>(es27D2);
          real r2868#1 = RMul(r2861,r2867);
          real r2869#1 = RMul(r2868,op1_e3_l_7285A);
          tensor[3] op1_e3_l_8285F#1 = <tensor[3]>[r2863,r2866,r2869];
          tensor[3] npos2876#7 = VAdd<3>(pos25AF,op1_e3_l_8285F);
          tensor[3] mid2879#3 = VSub<3>(npos2876,_t2431);
          real _t287C#1 = VIndex<3,0>(mid2879);
          real _t287E#1 = Abs<real>(_t287C);
          bool _t2881#1 = LTE<real>(_t287E,_t243B);
          if _t2881 then goto ASSIGN2885 else goto ASSIGN2926
        ASSIGN2885:  preds = [COND2883]
          real _t2884#1 = VIndex<3,1>(mid2879);
          real _t2886#1 = Abs<real>(_t2884);
          bool _t2889#1 = LTE<real>(_t2886,_t243B);
          if _t2889 then goto ASSIGN288D else goto ASSIGN2925
        ASSIGN288D:  preds = [COND288B]
          real _t288C#1 = VIndex<3,2>(mid2879);
          real _t288E#1 = Abs<real>(_t288C);
          bool _t2891#1 = LTE<real>(_t288E,_t243B);
          goto JOIN2895
        JOIN2895:  preds = [ASSIGN2892,ASSIGN2925]
          bool _t2893#1 = phi(_t2891,_t2894)
          goto JOIN2898
        JOIN2898:  preds = [JOIN2895,ASSIGN2926]
          bool _t2896#1 = phi(_t2893,_t2897)
          if _t2896 then goto ASSIGN289B else goto ASSIGN2924
        ASSIGN289B:  preds = [COND2899]
          real _t289A#7 = VIndex<3,0>(npos2876);
          bool _t289C#1 = EQ<real>(_t289A,_t289A);
          bool _t289E#1 = BNot(_t289C);
          if _t289E then goto ASSIGN28A2 else goto ASSIGN2915
        ASSIGN28A2:  preds = [COND28A0]
          bool _t28A1#1 = true;
          goto JOIN28A5
        JOIN28A5:  preds = [ASSIGN28A2,JOIN291E]
          bool _t28A3#1 = phi(_t28A1,_t28A4)
          bool _t28A6#1 = BNot(_t28A3);
          if _t28A6 then goto ASSIGN28AA else goto ASSIGN2913
        ASSIGN28AA:  preds = [COND28A8]
          real y28A9#1 = VIndex<3,1>(npos2876);
          real z28AB#1 = VIndex<3,2>(npos2876);
          real _t28AD#7 = 0.2e1;
          real _t28AF#1 = 0.3e1;
          real _t28B1#1 = 0.12e2;
          real op1_e3_l_1028B3#2 = RMul(_t289A,_t289A);
          real op1_e3_l_1128B6#1 = RMul(_t28AF,op1_e3_l_1028B3);
          real op1_e3_l_1228B9#3 = RSub(_t28AD,op1_e3_l_1128B6);
          real op1_e3_l_1328BC#1 = RMul(op1_e3_l_1228B9,op1_e3_l_1228B9);
          real op1_e3_l_1428BF#1 = RMul(_t289A,op1_e3_l_1028B3);
          real op1_e3_l_1528C4#1 = RNeg(op1_e3_l_1428BF);
          real op1_e3_l_1628C7#1 = RMul(_t28AD,_t289A);
          real r28CB#1 = RAdd(op1_e3_l_1528C4,op1_e3_l_1628C7);
          real op1_e3_l_1728CA#3 = RAdd(r28CB,y28A9);
          real op1_e3_l_1828CF#1 = RMul(_t28AD,op1_e3_l_1328BC);
          real r28D3#1 = RMul(_t28B1,_t289A);
          real op1_e3_l_1928D2#1 = RMul(r28D3,op1_e3_l_1728CA);
          real _t28D7#1 = RSub(op1_e3_l_1828CF,op1_e3_l_1928D2);
          real _t28DA#3 = RMul(_t28AD,op1_e3_l_1228B9);
          real _t28E1#2 = RMul(_t28AD,zfuz241D);
          tensor[3,3] H28E6#1 = <tensor[3,3]>[_t28D7,_t28DA,_t242F,_t28DA,_t28AD,_t242F,_t242F,_t242F,_t28E1];
          real _t28E8#1 = RMul(_t28DA,op1_e3_l_1728CA);
          real _t28ED#1 = RMul(_t28AD,op1_e3_l_1728CA);
          real _t28F0#1 = RMul(_t28E1,z28AB);
          tensor[3] g28F5#2 = <tensor[3]>[_t28E8,_t28ED,_t28F0];
          real[3] _t28F7#1 = EigenVals3x3(H28E6);
          real _t28F9#1 = Subscript<real[3]>(_t28F7,nn25E4);
          real op1_e3_l_328FB#1 = VDot<3>(g28F5,g28F5);
          real op1_e3_l_428FE#1 = Sqrt(op1_e3_l_328FB);
          real op1_e3_l_52901#1 = RAdd(fBias2419,op1_e3_l_428FE);
          real _t2904#1 = RDiv(_t28F9,op1_e3_l_52901);
          bool _t2907#1 = GTE<real>(_t2904,fStren241B);
          goto JOIN290B
        JOIN290B:  preds = [ASSIGN2908,ASSIGN2913]
          bool _t2909#1 = phi(_t2907,_t290A)
          goto JOIN290E
        JOIN290E:  preds = [JOIN290B,ASSIGN2924]
          bool _t290C#1 = phi(_t2909,_t290D)
          if _t290C then goto NEW2910 else goto JOIN2911
        NEW2910:  preds = [COND290F]
          new particle(npos2876,hh25AD);
          goto JOIN2911
        JOIN2911:  preds = [NEW2910,COND290F]
          goto JOIN2912
        JOIN2912:  preds = [JOIN2911,COND2859]
          goto JOIN25B0
        ASSIGN2913:  preds = [COND28A8]
          bool _t290A#1 = false;
          goto JOIN290B
        ASSIGN2915:  preds = [COND28A0]
          real _t2914#2 = VIndex<3,1>(npos2876);
          bool _t2916#1 = EQ<real>(_t2914,_t2914);
          bool _t2918#1 = BNot(_t2916);
          if _t2918 then goto ASSIGN291C else goto ASSIGN2920
        ASSIGN291C:  preds = [COND291A]
          bool _t291B#1 = true;
          goto JOIN291E
        JOIN291E:  preds = [ASSIGN291C,ASSIGN2923]
          bool _t28A4#1 = phi(_t291B,_t291D)
          goto JOIN28A5
        ASSIGN2920:  preds = [COND291A]
          real _t291F#2 = VIndex<3,2>(npos2876);
          bool _t2921#1 = EQ<real>(_t291F,_t291F);
          bool _t291D#1 = BNot(_t2921);
          goto JOIN291E
        ASSIGN2924:  preds = [COND2899]
          bool _t290D#1 = false;
          goto JOIN290E
        ASSIGN2925:  preds = [COND288B]
          bool _t2894#1 = false;
          goto JOIN2895
        ASSIGN2926:  preds = [COND2883]
          bool _t2897#1 = false;
          goto JOIN2898
        ASSIGN2928:  preds = [COND284C]
          real _t2927#2 = VIndex<3,1>(pos25AF);
          bool _t2929#1 = EQ<real>(_t2927,_t2927);
          bool _t292B#1 = BNot(_t2929);
          if _t292B then goto ASSIGN292F else goto ASSIGN2933
        ASSIGN292F:  preds = [COND292D]
          bool _t292E#1 = true;
          goto JOIN2931
        JOIN2931:  preds = [ASSIGN292F,ASSIGN2936]
          bool _t2850#1 = phi(_t292E,_t2930)
          goto JOIN2851
        ASSIGN2933:  preds = [COND292D]
          real _t2932#2 = VIndex<3,2>(pos25AF);
          bool _t2934#1 = EQ<real>(_t2932,_t2932);
          bool _t2930#1 = BNot(_t2934);
          goto JOIN2931
        ASSIGN2937:  preds = [COND267C]
          bool _t26DE#1 = false;
          goto JOIN26DF
        ASSIGN2939:  preds = [COND2674]
          real _t2938#2 = VIndex<3,1>(npos2648);
          bool _t293A#1 = EQ<real>(_t2938,_t2938);
          bool _t293C#1 = BNot(_t293A);
          if _t293C then goto ASSIGN2940 else goto ASSIGN2944
        ASSIGN2940:  preds = [COND293E]
          bool _t293F#1 = true;
          goto JOIN2942
        JOIN2942:  preds = [ASSIGN2940,ASSIGN2947]
          bool _t2678#1 = phi(_t293F,_t2941)
          goto JOIN2679
        ASSIGN2944:  preds = [COND293E]
          real _t2943#2 = VIndex<3,2>(npos2648);
          bool _t2945#1 = EQ<real>(_t2943,_t2943);
          bool _t2941#1 = BNot(_t2945);
          goto JOIN2942
        ASSIGN2948:  preds = [COND266D]
          bool _t26E1#1 = false;
          goto JOIN26E2
        ASSIGN2949:  preds = [COND265F]
          bool _t2668#1 = false;
          goto JOIN2669
        ASSIGN294A:  preds = [COND2657]
          bool _t266B#1 = false;
          goto JOIN266C
        ASSIGN294C:  preds = [COND25D6]
          real _t294B#2 = VIndex<3,1>(pos25CD);
          bool _t294D#1 = EQ<real>(_t294B,_t294B);
          bool _t294F#1 = BNot(_t294D);
          if _t294F then goto ASSIGN2953 else goto ASSIGN2957
        ASSIGN2953:  preds = [COND2951]
          bool _t2952#1 = true;
          goto JOIN2955
        JOIN2955:  preds = [ASSIGN2953,ASSIGN295A]
          bool _t25DA#1 = phi(_t2952,_t2954)
          goto JOIN25DB
        ASSIGN2957:  preds = [COND2951]
          real _t2956#2 = VIndex<3,2>(pos25CD);
          bool _t2958#1 = EQ<real>(_t2956,_t2956);
          bool _t2954#1 = BNot(_t2958);
          goto JOIN2955
        ASSIGN295B:  preds = [COND2464]
          bool _t24C8#1 = false;
          goto JOIN24C9
        ASSIGN295D:  preds = [COND245C]
          real _t295C#2 = VIndex<3,1>(pos241F);
          bool _t295E#1 = EQ<real>(_t295C,_t295C);
          bool _t2960#1 = BNot(_t295E);
          if _t2960 then goto ASSIGN2964 else goto ASSIGN2968
        ASSIGN2964:  preds = [COND2962]
          bool _t2963#1 = true;
          goto JOIN2966
        JOIN2966:  preds = [ASSIGN2964,ASSIGN296B]
          bool _t2460#1 = phi(_t2963,_t2965)
          goto JOIN2461
        ASSIGN2968:  preds = [COND2962]
          real _t2967#2 = VIndex<3,2>(pos241F);
          bool _t2969#1 = EQ<real>(_t2967,_t2967);
          bool _t2965#1 = BNot(_t2969);
          goto JOIN2966
        ASSIGN296C:  preds = [COND2455]
          bool _t24CB#1 = false;
          goto JOIN24CC
        ASSIGN296D:  preds = [COND2447]
          bool _t2450#1 = false;
          goto JOIN2451
        ASSIGN296E:  preds = [COND243F]
          bool _t2453#1 = false;
          goto JOIN2454
    end update
  end particle
## initial strand creation
  COLLECTION
    ENTRY296F:  preds = []
      tensor[3][] ipos2970#1 = globals.ipos23CE;
    FOREACH2973:  preds = [ASSIGN2971,NEXT2977]
      foreach (x2972 in ipos2970) on exit goto RETURN2978
      real _t2974#1 = 0.1e1;
      new particle(x2972,_t2974);
      goto FOREACH2973
    RETURN2978:  preds = [FOREACH2973]
      return
## global update
  ENTRY2979:  preds = []
    real rad297A#1 = globals.rad23C8;
    real eps297C#1 = globals.eps23C9;
    particle[] P297E#5 = Strands<particle,all>;
    (int res2986#1) = sum<int>(MAP sum2980 (P297E));
    (int res298E#1) = max<int>(MAP max2988 (P297E));
    (int res2996#1) = sum<int>(MAP sum2990 (P297E));
    (bool res299E#2) = all(MAP all2998 (P297E));
    (real res29AC#1) = max<real>(MAP max29A0 (P297E));
    string _t29AE#1 = "One run:";
    string _t29B0#3 = " and ";
    real _t29B2#2 = RDiv(res29AC,rad297A);
    bool _t29B5#2 = LT<real>(_t29B2,eps297C);
    string _t29B7#1 = " of ";
    string _t29B9#1 = "\n";
    Print<[string,bool,string,real,string,bool,string,int,string,int,string]>(_t29AE,res299E,_t29B0,_t29B2,_t29B0,_t29B5,_t29B0,res2996,_t29B7,res2986,_t29B9);
    if res299E then goto COND29BD else goto JOIN29C3
  COND29BD:  preds = [COND29BC]
    if _t29B5 then goto ASSIGN29BF else goto JOIN29C2
  ASSIGN29BF:  preds = [COND29BD]
    string _t29BE#1 = "CONVERGED!\n";
    Print<[string]>(_t29BE);
    StabilizeAll;
    goto JOIN29C2
  JOIN29C2:  preds = [MASSIGN29C1,COND29BD]
    goto JOIN29C3
  JOIN29C3:  preds = [JOIN29C2,COND29BC]
    int _t29C4#1 = 5000;
    bool _t29C6#1 = GT<int>(res298E,_t29C4);
    if _t29C6 then goto MASSIGN29C9 else goto JOIN29CA
  MASSIGN29C9:  preds = [COND29C8]
    StabilizeAll;
    goto JOIN29CA
  JOIN29CA:  preds = [MASSIGN29C9,COND29C8]
    continue
#### end program ####
##### TreeIR: after low-to-tree translation ####
//***** PROPERTIES *****
  GlobalInit StabilizeAll GlobalReduce StrandSets GlobalUpdate NewStrands StrandCommunication StrandsMayDie HasInputs HasGlobals ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
//***** CONSTS *****
//***** INPUTS *****
input femData(Mesh) meshData;
input femData(Space) 0space0853_intermedateGlobal;
input femData(FemFunc) 0data0855_intermedateGlobal;
input real rad;
input real eps;
input real v0;
input real fBias;
input real fStren;
input real zfuz;
input tensor[3][] ipos;
//***** CONST INIT *****
  {
    globals.rad = 0.1e-1;
    globals.eps = 0.1e-1;
    globals.v0 = 0.625e-1;
    globals.fBias = 0.1e-1;
    globals.fStren = 0.1e-1;
    globals.zfuz = 0.1e-1;
  }
//***** GLOBALS *****
//***** FUNCTIONS *****
  function tensor[3] fStep (globals, &tensor[3] p_s_0) {
    bool l__t_16;
    tensor[3][3] l_E_9;
    real[3] l_evals_8;
    real l_x_1 = VIndex<3,4,0>(LOAD_0(p_s_0));
    real l_op1_e3_l_10_2 = RMul(l_x_1,l_x_1);
    real l_op1_e3_l_12_3 = RSub(0.2e1,RMul(0.3e1,l_op1_e3_l_10_2));
    real l_op1_e3_l_17_4 = RAdd(RAdd(RNeg(RMul(l_x_1,l_op1_e3_l_10_2)),RMul(0.2e1,l_x_1)),VIndex<3,4,1>(LOAD_0(p_s_0)));
    real l__t_5 = RMul(0.2e1,l_op1_e3_l_12_3);
    real l__t_6 = RMul(0.2e1,globals.zfuz);
    tensor[3,3] t_7 = <tensor[3,3]>[RSub(RMul(0.2e1,RMul(l_op1_e3_l_12_3,l_op1_e3_l_12_3)),RMul(RMul(0.12e2,l_x_1),l_op1_e3_l_17_4)),l__t_5,0.e0,l__t_5,0.2e1,0.e0,0.e0,0.e0,l__t_6];
    (l_evals_8,l_E_9) = EigenVecs3x3(TensorRef<[3,3]>(t_7));
    &tensor[3] l__t_10 = Subscript<tensor[3][3]>(l_E_9,0);
    real l_op1_e3_l_6_11 = RNeg(RDiv(0.1e1,Subscript<real[3]>(l_evals_8,0)));
    real l_op1_e3_l_7_12 = VDot<3,4>(LOAD_0(l__t_10),VEC3{4}(RMul(l__t_5,l_op1_e3_l_17_4),RMul(0.2e1,l_op1_e3_l_17_4),RMul(l__t_6,VIndex<3,4,2>(LOAD_0(p_s_0)))));
    vec3{4} v_13 = VEC3{4}(RMul(RMul(l_op1_e3_l_6_11,TensorIndex<&tensor[3],[0]>(l__t_10)),l_op1_e3_l_7_12),RMul(RMul(l_op1_e3_l_6_11,TensorIndex<&tensor[3],[1]>(l__t_10)),l_op1_e3_l_7_12),RMul(RMul(l_op1_e3_l_6_11,TensorIndex<&tensor[3],[2]>(l__t_10)),l_op1_e3_l_7_12));
    real l__t_14 = VIndex<3,4,0>(v_13);
    vec3{4} v_15 = v_13;
    if (BNot(EQ<real>(l__t_14,l__t_14))) {
      l__t_16 = true;
    } else {
      bool l__t_18;
      real l__t_17 = VIndex<3,4,1>(v_15);
      if (BNot(EQ<real>(l__t_17,l__t_17))) {
        l__t_18 = true;
      } else {
        real l__t_19 = VIndex<3,4,2>(v_15);
        l__t_18 = BNot(EQ<real>(l__t_19,l__t_19));
      }
      l__t_16 = l__t_18;
    }
    if (l__t_16) {
      tensor[3] _arg_20 = PACK(VEC3{4}(+inf,+inf,+inf));
      return _arg_20
    }
    tensor[3] _arg_21 = PACK(v_15);
    return _arg_21
  }
  function tensor[3,3] fPerp (globals, &tensor[3] p_s_22) {
    tensor[3][3] l__t_29;
    real[3] l_evals_28;
    real l_x_23 = VIndex<3,4,0>(LOAD_0(p_s_22));
    real l_op1_e3_l_10_24 = RMul(l_x_23,l_x_23);
    real l_op1_e3_l_12_25 = RSub(0.2e1,RMul(0.3e1,l_op1_e3_l_10_24));
    real l__t_26 = RMul(0.2e1,l_op1_e3_l_12_25);
    tensor[3,3] t_27 = <tensor[3,3]>[RSub(RMul(0.2e1,RMul(l_op1_e3_l_12_25,l_op1_e3_l_12_25)),RMul(RMul(0.12e2,l_x_23),RAdd(RAdd(RNeg(RMul(l_x_23,l_op1_e3_l_10_24)),RMul(0.2e1,l_x_23)),VIndex<3,4,1>(LOAD_0(p_s_22))))),l__t_26,0.e0,l__t_26,0.2e1,0.e0,0.e0,0.e0,RMul(0.2e1,globals.zfuz)];
    (l_evals_28,l__t_29) = EigenVecs3x3(TensorRef<[3,3]>(t_27));
    &tensor[3] l_E2_30 = Subscript<tensor[3][3]>(l__t_29,0);
    vec3{4} v_31 = VScale<3,4>(TensorIndex<&tensor[3],[0]>(l_E2_30),LOAD_0(l_E2_30));
    vec3{4} v_32 = VScale<3,4>(TensorIndex<&tensor[3],[1]>(l_E2_30),LOAD_0(l_E2_30));
    vec3{4} v_33 = VScale<3,4>(TensorIndex<&tensor[3],[2]>(l_E2_30),LOAD_0(l_E2_30));
    real l_r_34 = RSub(0.1e1,VIndex<3,4,0>(v_31));
    real l_r_35 = RSub(0.e0,VIndex<3,4,1>(v_31));
    real l_r_36 = RSub(0.e0,VIndex<3,4,2>(v_31));
    vec3{4} v_37 = VEC3{4}(l_r_34,l_r_35,l_r_36);
    real l_r_38 = RSub(0.e0,VIndex<3,4,0>(v_32));
    real l_r_39 = RSub(0.1e1,VIndex<3,4,1>(v_32));
    real l_r_40 = RSub(0.e0,VIndex<3,4,2>(v_32));
    vec3{4} v_41 = VEC3{4}(l_r_38,l_r_39,l_r_40);
    real l_r_42 = RSub(0.e0,VIndex<3,4,0>(v_33));
    real l_r_43 = RSub(0.e0,VIndex<3,4,1>(v_33));
    real l_r_44 = RSub(0.1e1,VIndex<3,4,2>(v_33));
    vec3{4} v_45 = VEC3{4}(l_r_42,l_r_43,l_r_44);
    real l_t_46 = RAdd(RAdd(VDot<3,4>(v_37,v_37),VDot<3,4>(v_41,v_41)),VDot<3,4>(v_45,v_45));
    if (BNot(EQ<real>(l_t_46,l_t_46))) {
      tensor[3,3] t_47 = <tensor[3,3]>[0.e0,0.e0,0.e0,0.e0,0.e0,0.e0,0.e0,0.e0,0.e0];
      return t_47
    }
    tensor[3,3] t_48 = <tensor[3,3]>[l_r_34,l_r_35,l_r_36,l_r_38,l_r_39,l_r_40,l_r_42,l_r_43,l_r_44];
    return t_48
  }
  function int sum (world, id(particle) p_P_49) {
    return p_P_49.test
  }
  function int max (world, id(particle) p_P_50) {
    return p_P_50.steps
  }
  function int sum (world, id(particle) p_P_51) {
    return p_P_51.testp
  }
  function bool all (world, id(particle) p_P_52) {
    return p_P_52.found
  }
  function real max (world, id(particle) p_P_53) {
    return Sqrt(VDot<3,4>(LOAD_0(TensorRef<[3]>(p_P_53.step)),LOAD_0(TensorRef<[3]>(p_P_53.step))))
  }
//***** GLOBAL VARIABLE INIT *****
  {
    femData(MeshCell)[] l__t_54;
    l__t_54 = <femData(MeshCell)[]>{};
    for i__t_55 = 0 to ISub(ExtractFemItem<int,NumCell(Mesh)>(globals.meshData),1) {
      l__t_54 = Append<femData(MeshCell),femData(MeshCell)>(l__t_54,LoadFem<femData(MeshCell)>(globals.meshData,i__t_55));
    }
  }
//***** STRAND *****
strand particle (&tensor[3] p_pos0_56,real p_hh0_57) in 3D {
  varying output tensor[3] pos;
  varying output tensor[3] _pos;
  varying real hh;
  varying tensor[3] step;
  varying bool found;
  varying int nfs;
  int test;
  varying int testp;
  varying int steps;
  initialize () {
    self.pos = TensorCopy<[3]>(p_pos0_56);
    self._pos = TensorCopy<[3]>(p_pos0_56);
    self.hh = p_hh0_57;
    self.step = PACK(VEC3{4}(0.e0,0.e0,0.e0));
    self.found = false;
    self.nfs = 0;
    self.test = 1;
    self.testp = 0;
    self.steps = 0;
  }
  update (world, globals) {
    vec3{4} v_98;
    real l_hh_97;
    vec3{4} v_96;
    bool l_found_95;
    int l_nfs_94;
    int l_testp_93;
    bool l__t_80;
    bool l__t_65;
    int l_steps_59 = IAdd(self.steps,1);
    vec3{4} v_60 = VEC3{4}(0.e0,0.e0,0.e0);
    vec3{4} v_61 = VSub<3,4>(LOAD_0(TensorRef<[3]>(self.pos)),v_60);
    vec3{4} v_62 = v_60;
    vec3{4} v_63 = v_61;
    if (LTE<real>(Abs<real>(VIndex<3,4,0>(v_61)),0.4e1)) {
      bool l__t_64;
      if (LTE<real>(Abs<real>(VIndex<3,4,1>(v_63)),0.4e1)) {
        l__t_64 = LTE<real>(Abs<real>(VIndex<3,4,2>(v_63)),0.4e1);
      } else {
        l__t_64 = false;
      }
      l__t_65 = l__t_64;
    } else {
      l__t_65 = false;
    }
    if (l__t_65) {
      bool l__t_79;
      bool l__t_67;
      real l__t_66 = VIndex<3,4,0>(LOAD_0(TensorRef<[3]>(self.pos)));
      if (BNot(EQ<real>(l__t_66,l__t_66))) {
        l__t_67 = true;
      } else {
        bool l__t_69;
        real l__t_68 = VIndex<3,4,1>(LOAD_0(TensorRef<[3]>(self.pos)));
        if (BNot(EQ<real>(l__t_68,l__t_68))) {
          l__t_69 = true;
        } else {
          real l__t_70 = VIndex<3,4,2>(LOAD_0(TensorRef<[3]>(self.pos)));
          l__t_69 = BNot(EQ<real>(l__t_70,l__t_70));
        }
        l__t_67 = l__t_69;
      }
      if (BNot(l__t_67)) {
        real l_op1_e3_l_10_71 = RMul(l__t_66,l__t_66);
        real l_op1_e3_l_12_72 = RSub(0.2e1,RMul(0.3e1,l_op1_e3_l_10_71));
        real l_op1_e3_l_17_73 = RAdd(RAdd(RNeg(RMul(l__t_66,l_op1_e3_l_10_71)),RMul(0.2e1,l__t_66)),VIndex<3,4,1>(LOAD_0(TensorRef<[3]>(self.pos))));
        real l__t_74 = RMul(0.2e1,l_op1_e3_l_12_72);
        real l__t_75 = RMul(0.2e1,globals.zfuz);
        vec3{4} v_76 = VEC3{4}(RMul(l__t_74,l_op1_e3_l_17_73),RMul(0.2e1,l_op1_e3_l_17_73),RMul(l__t_75,VIndex<3,4,2>(LOAD_0(TensorRef<[3]>(self.pos)))));
        tensor[3,3] t_77 = <tensor[3,3]>[RSub(RMul(0.2e1,RMul(l_op1_e3_l_12_72,l_op1_e3_l_12_72)),RMul(RMul(0.12e2,l__t_66),l_op1_e3_l_17_73)),l__t_74,0.e0,l__t_74,0.2e1,0.e0,0.e0,0.e0,l__t_75];
        real[3] l__t_78 = EigenVals3x3(TensorRef<[3,3]>(t_77));
        l__t_79 = GTE<real>(RDiv(Subscript<real[3]>(l__t_78,0),RAdd(globals.fBias,Sqrt(VDot<3,4>(v_76,v_76)))),globals.fStren);
      } else {
        l__t_79 = false;
      }
      l__t_80 = l__t_79;
    } else {
      l__t_80 = false;
    }
    if (BNot(l__t_80)) {
      die;
    }
    if (BNot(self.found)) {
      bool l_found_92;
      int l_nfs_91;
      int l_testp_90;
      bool l__t_85;
      &tensor[3] l_step_81 = fStep$2A28(TensorRef<[3]>(self.pos));
      vec3{4} v_82 = VAdd<3,4>(LOAD_0(TensorRef<[3]>(self.pos)),LOAD_0(l_step_81));
      real l__t_83 = VIndex<3,4,0>(v_82);
      vec3{4} v_84 = v_82;
      if (BNot(EQ<real>(l__t_83,l__t_83))) {
        l__t_85 = true;
      } else {
        bool l__t_87;
        real l__t_86 = VIndex<3,4,1>(v_84);
        if (BNot(EQ<real>(l__t_86,l__t_86))) {
          l__t_87 = true;
        } else {
          real l__t_88 = VIndex<3,4,2>(v_84);
          l__t_87 = BNot(EQ<real>(l__t_88,l__t_88));
        }
        l__t_85 = l__t_87;
      }
      if (l__t_85) {
        die;
      }
      if (GT<real>(RDiv(Sqrt(VDot<3,4>(LOAD_0(l_step_81),LOAD_0(l_step_81))),globals.rad),globals.eps)) {
        int l_nfs_89 = IAdd(self.nfs,1);
        if (GT<int>(l_nfs_89,10)) {
          die;
        }
        l_testp_90 = self.testp;
        l_nfs_91 = l_nfs_89;
        l_found_92 = self.found;
      } else {
        l_testp_90 = 1;
        l_nfs_91 = self.nfs;
        l_found_92 = true;
      }
      l_testp_93 = l_testp_90;
      l_nfs_94 = l_nfs_91;
      l_found_95 = l_found_92;
      v_96 = LOAD_0(l_step_81);
      l_hh_97 = self.hh;
      v_98 = v_84;
    } else {
      bool l__t_180;
      vec3{4} v_177;
      real l_hh_176;
      real l__t_165;
      real l_hh_162;
      real l_hh_155;
      vec3{4} v_154;
      real l__t_110;
      vec3{4} v_109;
      int l_nn_108;
      bool l__t_103;
      &tensor[3] l__t_99 = fStep$2A28(TensorRef<[3]>(self.pos));
      vec3{4} v_100 = VAdd<3,4>(LOAD_0(TensorRef<[3]>(self.pos)),LOAD_0(l__t_99));
      real l__t_101 = VIndex<3,4,0>(v_100);
      vec3{4} v_102 = v_100;
      if (BNot(EQ<real>(l__t_101,l__t_101))) {
        l__t_103 = true;
      } else {
        bool l__t_105;
        real l__t_104 = VIndex<3,4,1>(v_102);
        if (BNot(EQ<real>(l__t_104,l__t_104))) {
          l__t_105 = true;
        } else {
          real l__t_106 = VIndex<3,4,2>(v_102);
          l__t_105 = BNot(EQ<real>(l__t_106,l__t_106));
        }
        l__t_103 = l__t_105;
      }
      if (l__t_103) {
        die;
      }
      tensor[3] _arg_107 = PACK(v_102);
      l_nn_108 = 0;
      v_109 = v_62;
      l__t_110 = 0.e0;
      id(particle)[] t_112 = SphereQuery<3,id(particle)>(TensorRef<[3]>(_arg_107),globals.rad);
      foreach id(particle) i_P_111 in t_112 {
        vec3{4} v_113 = VSub<3,4>(LOAD_0(TensorRef<[3]>(i_P_111.pos)),v_102);
        real l_op1_e3_l_11_114 = Sqrt(VDot<3,4>(v_113,v_113));
        real l_op1_e3_l_13_115 = RSub(0.1e1,RDiv(l_op1_e3_l_11_114,globals.rad));
        real l__Pow_2_116 = RMul(l_op1_e3_l_13_115,l_op1_e3_l_13_115);
        real l_r_117 = RMul(RMul(-0.4e1,RMul(l_op1_e3_l_13_115,l__Pow_2_116)),RDiv(0.1e1,globals.rad));
        real l_r_118 = RDiv(0.1e1,l_op1_e3_l_11_114);
        l_nn_108 = IAdd(l_nn_108,1);
        v_109 = VAdd<3,4>(v_109,VEC3{4}(RMul(l_r_118,RMul(l_r_117,VIndex<3,4,0>(v_113))),RMul(l_r_118,RMul(l_r_117,VIndex<3,4,1>(v_113))),RMul(l_r_118,RMul(l_r_117,VIndex<3,4,2>(v_113)))));
        l__t_110 = RAdd(l__t_110,RMul(l__Pow_2_116,l__Pow_2_116));
      }
      if (EQ<int>(0,l_nn_108)) {
        bool l__t_139;
        bool l__t_124;
        vec3{4} v_119 = VAdd<3,4>(v_102,VEC3{4}(RMul(0.5e0,globals.rad),0.e0,0.e0));
        vec3{4} v_120 = VSub<3,4>(v_119,v_62);
        vec3{4} v_121 = v_119;
        vec3{4} v_122 = v_120;
        if (LTE<real>(Abs<real>(VIndex<3,4,0>(v_120)),0.4e1)) {
          bool l__t_123;
          if (LTE<real>(Abs<real>(VIndex<3,4,1>(v_122)),0.4e1)) {
            l__t_123 = LTE<real>(Abs<real>(VIndex<3,4,2>(v_122)),0.4e1);
          } else {
            l__t_123 = false;
          }
          l__t_124 = l__t_123;
        } else {
          l__t_124 = false;
        }
        if (l__t_124) {
          bool l__t_138;
          bool l__t_126;
          real l__t_125 = VIndex<3,4,0>(v_121);
          if (BNot(EQ<real>(l__t_125,l__t_125))) {
            l__t_126 = true;
          } else {
            bool l__t_128;
            real l__t_127 = VIndex<3,4,1>(v_121);
            if (BNot(EQ<real>(l__t_127,l__t_127))) {
              l__t_128 = true;
            } else {
              real l__t_129 = VIndex<3,4,2>(v_121);
              l__t_128 = BNot(EQ<real>(l__t_129,l__t_129));
            }
            l__t_126 = l__t_128;
          }
          if (BNot(l__t_126)) {
            real l_op1_e3_l_10_130 = RMul(l__t_125,l__t_125);
            real l_op1_e3_l_12_131 = RSub(0.2e1,RMul(0.3e1,l_op1_e3_l_10_130));
            real l_op1_e3_l_17_132 = RAdd(RAdd(RNeg(RMul(l__t_125,l_op1_e3_l_10_130)),RMul(0.2e1,l__t_125)),VIndex<3,4,1>(v_121));
            real l__t_133 = RMul(0.2e1,l_op1_e3_l_12_131);
            real l__t_134 = RMul(0.2e1,globals.zfuz);
            vec3{4} v_135 = VEC3{4}(RMul(l__t_133,l_op1_e3_l_17_132),RMul(0.2e1,l_op1_e3_l_17_132),RMul(l__t_134,VIndex<3,4,2>(v_121)));
            tensor[3,3] t_136 = <tensor[3,3]>[RSub(RMul(0.2e1,RMul(l_op1_e3_l_12_131,l_op1_e3_l_12_131)),RMul(RMul(0.12e2,l__t_125),l_op1_e3_l_17_132)),l__t_133,0.e0,l__t_133,0.2e1,0.e0,0.e0,0.e0,l__t_134];
            real[3] l__t_137 = EigenVals3x3(TensorRef<[3,3]>(t_136));
            l__t_138 = GTE<real>(RDiv(Subscript<real[3]>(l__t_137,0),RAdd(globals.fBias,Sqrt(VDot<3,4>(v_135,v_135)))),globals.fStren);
          } else {
            l__t_138 = false;
          }
          l__t_139 = l__t_138;
        } else {
          l__t_139 = false;
        }
        if (l__t_139) {
          tensor[3] _arg_140 = PACK(v_121);
          new particle(_arg_140,self.hh);
        }
        self.pos = PACK(v_102);
        self._pos = PACK(v_102);
        self.step = PACK(v_62);
        self.steps = l_steps_59;
        active;
      }
      tensor[3] _arg_144 = PACK(v_102);
      &tensor[3,3] l__t_145 = fPerp$2A44(_arg_144);
      real l_vdot_146 = VDot<3,4>(LOAD_0(ProjectLast<&tensor[3,3],[0]>(l__t_145)),v_109);
      real l_vdot_147 = VDot<3,4>(LOAD_0(ProjectLast<&tensor[3,3],[1]>(l__t_145)),v_109);
      real l_vdot_148 = VDot<3,4>(LOAD_0(ProjectLast<&tensor[3,3],[2]>(l__t_145)),v_109);
      vec3{4} v_149 = VEC3{4}(l_vdot_146,l_vdot_147,l_vdot_148);
      real l__t_150 = Sqrt(RMul(RMul(self.hh,self.hh),VDot<3,4>(v_149,v_149)));
      vec3{4} v_151 = v_149;
      vec3{4} v_152 = VScale<3,4>(self.hh,v_149);
      if (GT<real>(l__t_150,globals.rad)) {
        real l_hh_153 = RMul(self.hh,RDiv(globals.rad,l__t_150));
        v_154 = VEC3{4}(RMul(l_hh_153,l_vdot_146),RMul(l_hh_153,l_vdot_147),RMul(l_hh_153,l_vdot_148));
        l_hh_155 = l_hh_153;
      } else {
        v_154 = v_152;
        l_hh_155 = self.hh;
      }
      tensor[3] _arg_156 = PACK(VAdd<3,4>(v_102,v_154));
      &tensor[3] l_fs_157 = fStep$2A28(_arg_156);
      real l_op1_e3_l_5_158 = Sqrt(VDot<3,4>(v_154,v_154));
      if (GT<real>(RDiv(Sqrt(VDot<3,4>(LOAD_0(l_fs_157),LOAD_0(l_fs_157))),l_op1_e3_l_5_158),0.5e0)) {
        self.pos = PACK(v_102);
        self._pos = PACK(v_102);
        self.hh = RMul(l_hh_155,0.5e0);
        self.step = PACK(v_62);
        self.steps = l_steps_59;
        active;
      } else {
        l_hh_162 = l_hh_155;
      }
      vec3{4} v_163 = VAdd<3,4>(VAdd<3,4>(v_102,LOAD_0(l_fs_157)),v_154);
      tensor[3] _arg_164 = PACK(v_163);
      l__t_165 = 0.e0;
      id(particle)[] t_167 = SphereQuery<3,id(particle)>(TensorRef<[3]>(_arg_164),globals.rad);
      vec3{4} v_168 = VAdd<3,4>(LOAD_0(l_fs_157),v_154);
      vec3{4} v_169 = v_163;
      foreach id(particle) i_P_166 in t_167 {
        vec3{4} v_170 = VSub<3,4>(v_169,LOAD_0(TensorRef<[3]>(i_P_166.pos)));
        real l_op1_e3_l_15_171 = RSub(0.1e1,RDiv(Sqrt(VDot<3,4>(v_170,v_170)),globals.rad));
        real l__Pow_2_172 = RMul(l_op1_e3_l_15_171,l_op1_e3_l_15_171);
        l__t_165 = RAdd(l__t_165,RMul(l__Pow_2_172,l__Pow_2_172));
      }
      if (GT<real>(RSub(l__t_165,l__t_110),RMul(0.5e0,VDot<3,4>(VSub<3,4>(v_169,v_102),VNeg<3,4>(v_151))))) {
        self.pos = PACK(v_102);
        self._pos = PACK(v_102);
        self.hh = RMul(l_hh_162,0.5e0);
        self.step = PACK(v_62);
        self.steps = l_steps_59;
        active;
      } else {
        l_hh_176 = l_hh_162;
        v_177 = v_169;
      }
      real l_hh_178 = RMul(l_hh_176,0.11e1);
      real l__t_179 = VIndex<3,4,0>(v_177);
      if (BNot(EQ<real>(l__t_179,l__t_179))) {
        l__t_180 = true;
      } else {
        bool l__t_182;
        real l__t_181 = VIndex<3,4,1>(v_177);
        if (BNot(EQ<real>(l__t_181,l__t_181))) {
          l__t_182 = true;
        } else {
          real l__t_183 = VIndex<3,4,2>(v_177);
          l__t_182 = BNot(EQ<real>(l__t_183,l__t_183));
        }
        l__t_180 = l__t_182;
      }
      if (l__t_180) {
        die;
      }
      if (LT<int>(l_nn_108,5)) {
        bool l__t_206;
        bool l__t_191;
        real l_op1_e3_l_7_184 = RDiv(0.1e1,l_op1_e3_l_5_158);
        real l_r_185 = RMul(0.5e0,globals.rad);
        vec3{4} v_186 = VAdd<3,4>(v_177,VEC3{4}(RMul(RMul(l_r_185,VIndex<3,4,0>(v_154)),l_op1_e3_l_7_184),RMul(RMul(l_r_185,VIndex<3,4,1>(v_154)),l_op1_e3_l_7_184),RMul(RMul(l_r_185,VIndex<3,4,2>(v_154)),l_op1_e3_l_7_184)));
        vec3{4} v_187 = VSub<3,4>(v_186,v_62);
        vec3{4} v_188 = v_186;
        vec3{4} v_189 = v_187;
        if (LTE<real>(Abs<real>(VIndex<3,4,0>(v_187)),0.4e1)) {
          bool l__t_190;
          if (LTE<real>(Abs<real>(VIndex<3,4,1>(v_189)),0.4e1)) {
            l__t_190 = LTE<real>(Abs<real>(VIndex<3,4,2>(v_189)),0.4e1);
          } else {
            l__t_190 = false;
          }
          l__t_191 = l__t_190;
        } else {
          l__t_191 = false;
        }
        if (l__t_191) {
          bool l__t_205;
          bool l__t_193;
          real l__t_192 = VIndex<3,4,0>(v_188);
          if (BNot(EQ<real>(l__t_192,l__t_192))) {
            l__t_193 = true;
          } else {
            bool l__t_195;
            real l__t_194 = VIndex<3,4,1>(v_188);
            if (BNot(EQ<real>(l__t_194,l__t_194))) {
              l__t_195 = true;
            } else {
              real l__t_196 = VIndex<3,4,2>(v_188);
              l__t_195 = BNot(EQ<real>(l__t_196,l__t_196));
            }
            l__t_193 = l__t_195;
          }
          if (BNot(l__t_193)) {
            real l_op1_e3_l_10_197 = RMul(l__t_192,l__t_192);
            real l_op1_e3_l_12_198 = RSub(0.2e1,RMul(0.3e1,l_op1_e3_l_10_197));
            real l_op1_e3_l_17_199 = RAdd(RAdd(RNeg(RMul(l__t_192,l_op1_e3_l_10_197)),RMul(0.2e1,l__t_192)),VIndex<3,4,1>(v_188));
            real l__t_200 = RMul(0.2e1,l_op1_e3_l_12_198);
            real l__t_201 = RMul(0.2e1,globals.zfuz);
            vec3{4} v_202 = VEC3{4}(RMul(l__t_200,l_op1_e3_l_17_199),RMul(0.2e1,l_op1_e3_l_17_199),RMul(l__t_201,VIndex<3,4,2>(v_188)));
            tensor[3,3] t_203 = <tensor[3,3]>[RSub(RMul(0.2e1,RMul(l_op1_e3_l_12_198,l_op1_e3_l_12_198)),RMul(RMul(0.12e2,l__t_192),l_op1_e3_l_17_199)),l__t_200,0.e0,l__t_200,0.2e1,0.e0,0.e0,0.e0,l__t_201];
            real[3] l__t_204 = EigenVals3x3(TensorRef<[3,3]>(t_203));
            l__t_205 = GTE<real>(RDiv(Subscript<real[3]>(l__t_204,0),RAdd(globals.fBias,Sqrt(VDot<3,4>(v_202,v_202)))),globals.fStren);
          } else {
            l__t_205 = false;
          }
          l__t_206 = l__t_205;
        } else {
          l__t_206 = false;
        }
        if (l__t_206) {
          tensor[3] _arg_207 = PACK(v_188);
          new particle(_arg_207,l_hh_178);
        }
      }
      l_testp_93 = self.testp;
      l_nfs_94 = self.nfs;
      l_found_95 = self.found;
      v_96 = v_168;
      l_hh_97 = l_hh_178;
      v_98 = v_177;
    }
    self.pos = PACK(v_98);
    self._pos = PACK(v_98);
    self.hh = l_hh_97;
    self.step = PACK(v_96);
    self.found = l_found_95;
    self.nfs = l_nfs_94;
    self.testp = l_testp_93;
    self.steps = l_steps_59;
    active;
  }
}
//***** CREATE COLLECTION *****
  {
    foreach &tensor[3] i_x_211 in globals.ipos {
      new particle(i_x_211,0.1e1);
    }
  }
//***** GLOBAL UPDATE *****
  {
    id(particle) ix_220;
    id(particle) ix_218;
    id(particle) ix_216;
    id(particle) ix_214;
    id(particle) ix_212;
    mapreduce {
      int l_res_213 = sum<int> { sum$2A46  (ix_212) | ix_212 in all }
    }
    mapreduce {
      int l_res_215 = max<int> { max$2A48  (ix_214) | ix_214 in all }
    }
    mapreduce {
      int l_res_217 = sum<int> { sum$2A4A  (ix_216) | ix_216 in all }
    }
    mapreduce {
      bool l_res_219 = all { all$2A4C  (ix_218) | ix_218 in all }
    }
    mapreduce {
      real l_res_221 = max<real> { max$2A4E  (ix_220) | ix_220 in all }
    }
    real l__t_222 = RDiv(l_res_221,globals.rad);
    bool l__t_223 = LT<real>(l__t_222,globals.eps);
    print("One run:",l_res_219," and ",l__t_222," and ",l__t_223," and ",l_res_217," of ",l_res_213,"\n");
    if (l_res_219) {
      if (l__t_223) {
        print("CONVERGED!\n");
        stabilize_all;
      }
    }
    if (GT<int>(l_res_215,5000)) {
      stabilize_all;
    }
    return
  }
#### end program ####
##### TreeIR: after contraction ####
//***** PROPERTIES *****
  GlobalInit StabilizeAll GlobalReduce StrandSets GlobalUpdate NewStrands StrandCommunication StrandsMayDie HasInputs HasGlobals ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
//***** CONSTS *****
//***** INPUTS *****
input femData(Mesh) meshData;
input femData(Space) 0space0853_intermedateGlobal;
input femData(FemFunc) 0data0855_intermedateGlobal;
input real rad;
input real eps;
input real v0;
input real fBias;
input real fStren;
input real zfuz;
input tensor[3][] ipos;
//***** CONST INIT *****
  {
    globals.rad = 0.1e-1;
    globals.eps = 0.1e-1;
    globals.v0 = 0.625e-1;
    globals.fBias = 0.1e-1;
    globals.fStren = 0.1e-1;
    globals.zfuz = 0.1e-1;
  }
//***** GLOBALS *****
//***** FUNCTIONS *****
  function tensor[3] fStep (globals, &tensor[3] p_s_0) {
    bool l__t_16;
    tensor[3][3] l_E_9;
    real[3] l_evals_8;
    real l_x_1 = TensorIndex<&tensor[3],[0]>(p_s_0);
    real l_op1_e3_l_10_2 = RMul(l_x_1,l_x_1);
    real l_op1_e3_l_12_3 = RSub(0.2e1,RMul(0.3e1,l_op1_e3_l_10_2));
    real l_op1_e3_l_17_4 = RAdd(RAdd(RNeg(RMul(l_x_1,l_op1_e3_l_10_2)),RMul(0.2e1,l_x_1)),TensorIndex<&tensor[3],[1]>(p_s_0));
    real l__t_5 = RMul(0.2e1,l_op1_e3_l_12_3);
    real l__t_6 = RMul(0.2e1,globals.zfuz);
    tensor[3,3] t_7 = <tensor[3,3]>[RSub(RMul(0.2e1,RMul(l_op1_e3_l_12_3,l_op1_e3_l_12_3)),RMul(RMul(0.12e2,l_x_1),l_op1_e3_l_17_4)),l__t_5,0.e0,l__t_5,0.2e1,0.e0,0.e0,0.e0,l__t_6];
    (l_evals_8,l_E_9) = EigenVecs3x3(TensorRef<[3,3]>(t_7));
    &tensor[3] l__t_10 = Subscript<tensor[3][3]>(l_E_9,0);
    real l_op1_e3_l_6_11 = RNeg(RDiv(0.1e1,Subscript<real[3]>(l_evals_8,0)));
    real l_op1_e3_l_7_12 = VDot<3,4>(LOAD_0(l__t_10),VEC3{4}(RMul(l__t_5,l_op1_e3_l_17_4),RMul(0.2e1,l_op1_e3_l_17_4),RMul(l__t_6,TensorIndex<&tensor[3],[2]>(p_s_0))));
    vec3{4} v_13 = VEC3{4}(RMul(RMul(l_op1_e3_l_6_11,TensorIndex<&tensor[3],[0]>(l__t_10)),l_op1_e3_l_7_12),RMul(RMul(l_op1_e3_l_6_11,TensorIndex<&tensor[3],[1]>(l__t_10)),l_op1_e3_l_7_12),RMul(RMul(l_op1_e3_l_6_11,TensorIndex<&tensor[3],[2]>(l__t_10)),l_op1_e3_l_7_12));
    real l__t_14 = VIndex<3,4,0>(v_13);
    vec3{4} v_15 = v_13;
    if (BNot(EQ<real>(l__t_14,l__t_14))) {
      l__t_16 = true;
    } else {
      bool l__t_18;
      real l__t_17 = VIndex<3,4,1>(v_15);
      if (BNot(EQ<real>(l__t_17,l__t_17))) {
        l__t_18 = true;
      } else {
        real l__t_19 = VIndex<3,4,2>(v_15);
        l__t_18 = BNot(EQ<real>(l__t_19,l__t_19));
      }
      l__t_16 = l__t_18;
    }
    if (l__t_16) {
      tensor[3] _arg_20 = <tensor[3]>[+inf,+inf,+inf];
      return _arg_20
    }
    tensor[3] _arg_21 = PACK(v_15);
    return _arg_21
  }
  function tensor[3,3] fPerp (globals, &tensor[3] p_s_22) {
    tensor[3][3] l__t_29;
    real[3] l_evals_28;
    real l_x_23 = TensorIndex<&tensor[3],[0]>(p_s_22);
    real l_op1_e3_l_10_24 = RMul(l_x_23,l_x_23);
    real l_op1_e3_l_12_25 = RSub(0.2e1,RMul(0.3e1,l_op1_e3_l_10_24));
    real l__t_26 = RMul(0.2e1,l_op1_e3_l_12_25);
    tensor[3,3] t_27 = <tensor[3,3]>[RSub(RMul(0.2e1,RMul(l_op1_e3_l_12_25,l_op1_e3_l_12_25)),RMul(RMul(0.12e2,l_x_23),RAdd(RAdd(RNeg(RMul(l_x_23,l_op1_e3_l_10_24)),RMul(0.2e1,l_x_23)),TensorIndex<&tensor[3],[1]>(p_s_22)))),l__t_26,0.e0,l__t_26,0.2e1,0.e0,0.e0,0.e0,RMul(0.2e1,globals.zfuz)];
    (l_evals_28,l__t_29) = EigenVecs3x3(TensorRef<[3,3]>(t_27));
    &tensor[3] l_E2_30 = Subscript<tensor[3][3]>(l__t_29,0);
    vec3{4} v_31 = VScale<3,4>(TensorIndex<&tensor[3],[0]>(l_E2_30),LOAD_0(l_E2_30));
    vec3{4} v_32 = VScale<3,4>(TensorIndex<&tensor[3],[1]>(l_E2_30),LOAD_0(l_E2_30));
    vec3{4} v_33 = VScale<3,4>(TensorIndex<&tensor[3],[2]>(l_E2_30),LOAD_0(l_E2_30));
    real l_r_34 = RSub(0.1e1,VIndex<3,4,0>(v_31));
    real l_r_35 = RSub(0.e0,VIndex<3,4,1>(v_31));
    real l_r_36 = RSub(0.e0,VIndex<3,4,2>(v_31));
    vec3{4} v_37 = VEC3{4}(l_r_34,l_r_35,l_r_36);
    real l_r_38 = RSub(0.e0,VIndex<3,4,0>(v_32));
    real l_r_39 = RSub(0.1e1,VIndex<3,4,1>(v_32));
    real l_r_40 = RSub(0.e0,VIndex<3,4,2>(v_32));
    vec3{4} v_41 = VEC3{4}(l_r_38,l_r_39,l_r_40);
    real l_r_42 = RSub(0.e0,VIndex<3,4,0>(v_33));
    real l_r_43 = RSub(0.e0,VIndex<3,4,1>(v_33));
    real l_r_44 = RSub(0.1e1,VIndex<3,4,2>(v_33));
    vec3{4} v_45 = VEC3{4}(l_r_42,l_r_43,l_r_44);
    real l_t_46 = RAdd(RAdd(VDot<3,4>(v_37,v_37),VDot<3,4>(v_41,v_41)),VDot<3,4>(v_45,v_45));
    if (BNot(EQ<real>(l_t_46,l_t_46))) {
      tensor[3,3] t_47 = <tensor[3,3]>[0.e0,0.e0,0.e0,0.e0,0.e0,0.e0,0.e0,0.e0,0.e0];
      return t_47
    }
    tensor[3,3] t_48 = <tensor[3,3]>[l_r_34,l_r_35,l_r_36,l_r_38,l_r_39,l_r_40,l_r_42,l_r_43,l_r_44];
    return t_48
  }
  function int sum (world, id(particle) p_P_49) {
    return p_P_49.test
  }
  function int max (world, id(particle) p_P_50) {
    return p_P_50.steps
  }
  function int sum (world, id(particle) p_P_51) {
    return p_P_51.testp
  }
  function bool all (world, id(particle) p_P_52) {
    return p_P_52.found
  }
  function real max (world, id(particle) p_P_53) {
    return Sqrt(VDot<3,4>(LOAD_0(TensorRef<[3]>(p_P_53.step)),LOAD_0(TensorRef<[3]>(p_P_53.step))))
  }
//***** GLOBAL VARIABLE INIT *****
  {
    femData(MeshCell)[] l__t_54;
    l__t_54 = <femData(MeshCell)[]>{};
    for i__t_55 = 0 to ISub(ExtractFemItem<int,NumCell(Mesh)>(globals.meshData),1) {
      l__t_54 = Append<femData(MeshCell),femData(MeshCell)>(l__t_54,LoadFem<femData(MeshCell)>(globals.meshData,i__t_55));
    }
  }
//***** STRAND *****
strand particle (&tensor[3] p_pos0_56,real p_hh0_57) in 3D {
  varying output tensor[3] pos;
  varying output tensor[3] _pos;
  varying real hh;
  varying tensor[3] step;
  varying bool found;
  varying int nfs;
  int test;
  varying int testp;
  varying int steps;
  initialize () {
    self.pos = TensorCopy<[3]>(p_pos0_56);
    self._pos = TensorCopy<[3]>(p_pos0_56);
    self.hh = p_hh0_57;
    self.step = <tensor[3]>[0.e0,0.e0,0.e0];
    self.found = false;
    self.nfs = 0;
    self.test = 1;
    self.testp = 0;
    self.steps = 0;
  }
  update (world, globals) {
    vec3{4} v_98;
    real l_hh_97;
    vec3{4} v_96;
    bool l_found_95;
    int l_nfs_94;
    int l_testp_93;
    bool l__t_80;
    bool l__t_65;
    int l_steps_59 = IAdd(self.steps,1);
    vec3{4} v_60 = VEC3{4}(0.e0,0.e0,0.e0);
    vec3{4} v_61 = VSub<3,4>(LOAD_0(TensorRef<[3]>(self.pos)),v_60);
    vec3{4} v_62 = v_60;
    vec3{4} v_63 = v_61;
    if (LTE<real>(Abs<real>(VIndex<3,4,0>(v_61)),0.4e1)) {
      bool l__t_64;
      if (LTE<real>(Abs<real>(VIndex<3,4,1>(v_63)),0.4e1)) {
        l__t_64 = LTE<real>(Abs<real>(VIndex<3,4,2>(v_63)),0.4e1);
      } else {
        l__t_64 = false;
      }
      l__t_65 = l__t_64;
    } else {
      l__t_65 = false;
    }
    if (l__t_65) {
      bool l__t_79;
      bool l__t_67;
      real l__t_66 = TensorIndex<&tensor[3],[0]>(TensorRef<[3]>(self.pos));
      if (BNot(EQ<real>(l__t_66,l__t_66))) {
        l__t_67 = true;
      } else {
        bool l__t_69;
        real l__t_68 = TensorIndex<&tensor[3],[1]>(TensorRef<[3]>(self.pos));
        if (BNot(EQ<real>(l__t_68,l__t_68))) {
          l__t_69 = true;
        } else {
          real l__t_70 = TensorIndex<&tensor[3],[2]>(TensorRef<[3]>(self.pos));
          l__t_69 = BNot(EQ<real>(l__t_70,l__t_70));
        }
        l__t_67 = l__t_69;
      }
      if (BNot(l__t_67)) {
        real l_op1_e3_l_10_71 = RMul(l__t_66,l__t_66);
        real l_op1_e3_l_12_72 = RSub(0.2e1,RMul(0.3e1,l_op1_e3_l_10_71));
        real l_op1_e3_l_17_73 = RAdd(RAdd(RNeg(RMul(l__t_66,l_op1_e3_l_10_71)),RMul(0.2e1,l__t_66)),TensorIndex<&tensor[3],[1]>(TensorRef<[3]>(self.pos)));
        real l__t_74 = RMul(0.2e1,l_op1_e3_l_12_72);
        real l__t_75 = RMul(0.2e1,globals.zfuz);
        vec3{4} v_76 = VEC3{4}(RMul(l__t_74,l_op1_e3_l_17_73),RMul(0.2e1,l_op1_e3_l_17_73),RMul(l__t_75,TensorIndex<&tensor[3],[2]>(TensorRef<[3]>(self.pos))));
        tensor[3,3] t_77 = <tensor[3,3]>[RSub(RMul(0.2e1,RMul(l_op1_e3_l_12_72,l_op1_e3_l_12_72)),RMul(RMul(0.12e2,l__t_66),l_op1_e3_l_17_73)),l__t_74,0.e0,l__t_74,0.2e1,0.e0,0.e0,0.e0,l__t_75];
        real[3] l__t_78 = EigenVals3x3(TensorRef<[3,3]>(t_77));
        l__t_79 = GTE<real>(RDiv(Subscript<real[3]>(l__t_78,0),RAdd(globals.fBias,Sqrt(VDot<3,4>(v_76,v_76)))),globals.fStren);
      } else {
        l__t_79 = false;
      }
      l__t_80 = l__t_79;
    } else {
      l__t_80 = false;
    }
    if (BNot(l__t_80)) {
      die;
    }
    if (BNot(self.found)) {
      bool l_found_92;
      int l_nfs_91;
      int l_testp_90;
      bool l__t_85;
      &tensor[3] l_step_81 = fStep$2A28(TensorRef<[3]>(self.pos));
      vec3{4} v_82 = VAdd<3,4>(LOAD_0(TensorRef<[3]>(self.pos)),LOAD_0(l_step_81));
      real l__t_83 = VIndex<3,4,0>(v_82);
      vec3{4} v_84 = v_82;
      if (BNot(EQ<real>(l__t_83,l__t_83))) {
        l__t_85 = true;
      } else {
        bool l__t_87;
        real l__t_86 = VIndex<3,4,1>(v_84);
        if (BNot(EQ<real>(l__t_86,l__t_86))) {
          l__t_87 = true;
        } else {
          real l__t_88 = VIndex<3,4,2>(v_84);
          l__t_87 = BNot(EQ<real>(l__t_88,l__t_88));
        }
        l__t_85 = l__t_87;
      }
      if (l__t_85) {
        die;
      }
      if (GT<real>(RDiv(Sqrt(VDot<3,4>(LOAD_0(l_step_81),LOAD_0(l_step_81))),globals.rad),globals.eps)) {
        int l_nfs_89 = IAdd(self.nfs,1);
        if (GT<int>(l_nfs_89,10)) {
          die;
        }
        l_testp_90 = self.testp;
        l_nfs_91 = l_nfs_89;
        l_found_92 = self.found;
      } else {
        l_testp_90 = 1;
        l_nfs_91 = self.nfs;
        l_found_92 = true;
      }
      l_testp_93 = l_testp_90;
      l_nfs_94 = l_nfs_91;
      l_found_95 = l_found_92;
      v_96 = LOAD_0(l_step_81);
      l_hh_97 = self.hh;
      v_98 = v_84;
    } else {
      bool l__t_180;
      vec3{4} v_177;
      real l_hh_176;
      real l__t_165;
      real l_hh_162;
      real l_hh_155;
      vec3{4} v_154;
      real l__t_110;
      vec3{4} v_109;
      int l_nn_108;
      bool l__t_103;
      &tensor[3] l__t_99 = fStep$2A28(TensorRef<[3]>(self.pos));
      vec3{4} v_100 = VAdd<3,4>(LOAD_0(TensorRef<[3]>(self.pos)),LOAD_0(l__t_99));
      real l__t_101 = VIndex<3,4,0>(v_100);
      vec3{4} v_102 = v_100;
      if (BNot(EQ<real>(l__t_101,l__t_101))) {
        l__t_103 = true;
      } else {
        bool l__t_105;
        real l__t_104 = VIndex<3,4,1>(v_102);
        if (BNot(EQ<real>(l__t_104,l__t_104))) {
          l__t_105 = true;
        } else {
          real l__t_106 = VIndex<3,4,2>(v_102);
          l__t_105 = BNot(EQ<real>(l__t_106,l__t_106));
        }
        l__t_103 = l__t_105;
      }
      if (l__t_103) {
        die;
      }
      tensor[3] _arg_107 = PACK(v_102);
      l_nn_108 = 0;
      v_109 = v_62;
      l__t_110 = 0.e0;
      id(particle)[] t_112 = SphereQuery<3,id(particle)>(TensorRef<[3]>(_arg_107),globals.rad);
      foreach id(particle) i_P_111 in t_112 {
        vec3{4} v_113 = VSub<3,4>(LOAD_0(TensorRef<[3]>(i_P_111.pos)),v_102);
        real l_op1_e3_l_11_114 = Sqrt(VDot<3,4>(v_113,v_113));
        real l_op1_e3_l_13_115 = RSub(0.1e1,RDiv(l_op1_e3_l_11_114,globals.rad));
        real l__Pow_2_116 = RMul(l_op1_e3_l_13_115,l_op1_e3_l_13_115);
        real l_r_117 = RMul(RMul(-0.4e1,RMul(l_op1_e3_l_13_115,l__Pow_2_116)),RDiv(0.1e1,globals.rad));
        real l_r_118 = RDiv(0.1e1,l_op1_e3_l_11_114);
        l_nn_108 = IAdd(l_nn_108,1);
        v_109 = VAdd<3,4>(v_109,VEC3{4}(RMul(l_r_118,RMul(l_r_117,VIndex<3,4,0>(v_113))),RMul(l_r_118,RMul(l_r_117,VIndex<3,4,1>(v_113))),RMul(l_r_118,RMul(l_r_117,VIndex<3,4,2>(v_113)))));
        l__t_110 = RAdd(l__t_110,RMul(l__Pow_2_116,l__Pow_2_116));
      }
      if (EQ<int>(0,l_nn_108)) {
        bool l__t_139;
        bool l__t_124;
        vec3{4} v_119 = VAdd<3,4>(v_102,VEC3{4}(RMul(0.5e0,globals.rad),0.e0,0.e0));
        vec3{4} v_120 = VSub<3,4>(v_119,v_62);
        vec3{4} v_121 = v_119;
        vec3{4} v_122 = v_120;
        if (LTE<real>(Abs<real>(VIndex<3,4,0>(v_120)),0.4e1)) {
          bool l__t_123;
          if (LTE<real>(Abs<real>(VIndex<3,4,1>(v_122)),0.4e1)) {
            l__t_123 = LTE<real>(Abs<real>(VIndex<3,4,2>(v_122)),0.4e1);
          } else {
            l__t_123 = false;
          }
          l__t_124 = l__t_123;
        } else {
          l__t_124 = false;
        }
        if (l__t_124) {
          bool l__t_138;
          bool l__t_126;
          real l__t_125 = VIndex<3,4,0>(v_121);
          if (BNot(EQ<real>(l__t_125,l__t_125))) {
            l__t_126 = true;
          } else {
            bool l__t_128;
            real l__t_127 = VIndex<3,4,1>(v_121);
            if (BNot(EQ<real>(l__t_127,l__t_127))) {
              l__t_128 = true;
            } else {
              real l__t_129 = VIndex<3,4,2>(v_121);
              l__t_128 = BNot(EQ<real>(l__t_129,l__t_129));
            }
            l__t_126 = l__t_128;
          }
          if (BNot(l__t_126)) {
            real l_op1_e3_l_10_130 = RMul(l__t_125,l__t_125);
            real l_op1_e3_l_12_131 = RSub(0.2e1,RMul(0.3e1,l_op1_e3_l_10_130));
            real l_op1_e3_l_17_132 = RAdd(RAdd(RNeg(RMul(l__t_125,l_op1_e3_l_10_130)),RMul(0.2e1,l__t_125)),VIndex<3,4,1>(v_121));
            real l__t_133 = RMul(0.2e1,l_op1_e3_l_12_131);
            real l__t_134 = RMul(0.2e1,globals.zfuz);
            vec3{4} v_135 = VEC3{4}(RMul(l__t_133,l_op1_e3_l_17_132),RMul(0.2e1,l_op1_e3_l_17_132),RMul(l__t_134,VIndex<3,4,2>(v_121)));
            tensor[3,3] t_136 = <tensor[3,3]>[RSub(RMul(0.2e1,RMul(l_op1_e3_l_12_131,l_op1_e3_l_12_131)),RMul(RMul(0.12e2,l__t_125),l_op1_e3_l_17_132)),l__t_133,0.e0,l__t_133,0.2e1,0.e0,0.e0,0.e0,l__t_134];
            real[3] l__t_137 = EigenVals3x3(TensorRef<[3,3]>(t_136));
            l__t_138 = GTE<real>(RDiv(Subscript<real[3]>(l__t_137,0),RAdd(globals.fBias,Sqrt(VDot<3,4>(v_135,v_135)))),globals.fStren);
          } else {
            l__t_138 = false;
          }
          l__t_139 = l__t_138;
        } else {
          l__t_139 = false;
        }
        if (l__t_139) {
          tensor[3] _arg_140 = PACK(v_121);
          new particle(_arg_140,self.hh);
        }
        self.pos = PACK(v_102);
        self._pos = PACK(v_102);
        self.step = PACK(v_62);
        self.steps = l_steps_59;
        active;
      }
      tensor[3] _arg_144 = PACK(v_102);
      &tensor[3,3] l__t_145 = fPerp$2A44(_arg_144);
      real l_vdot_146 = VDot<3,4>(LOAD_0(ProjectLast<&tensor[3,3],[0]>(l__t_145)),v_109);
      real l_vdot_147 = VDot<3,4>(LOAD_0(ProjectLast<&tensor[3,3],[1]>(l__t_145)),v_109);
      real l_vdot_148 = VDot<3,4>(LOAD_0(ProjectLast<&tensor[3,3],[2]>(l__t_145)),v_109);
      vec3{4} v_149 = VEC3{4}(l_vdot_146,l_vdot_147,l_vdot_148);
      real l__t_150 = Sqrt(RMul(RMul(self.hh,self.hh),VDot<3,4>(v_149,v_149)));
      vec3{4} v_151 = v_149;
      vec3{4} v_152 = VScale<3,4>(self.hh,v_149);
      if (GT<real>(l__t_150,globals.rad)) {
        real l_hh_153 = RMul(self.hh,RDiv(globals.rad,l__t_150));
        v_154 = VEC3{4}(RMul(l_hh_153,l_vdot_146),RMul(l_hh_153,l_vdot_147),RMul(l_hh_153,l_vdot_148));
        l_hh_155 = l_hh_153;
      } else {
        v_154 = v_152;
        l_hh_155 = self.hh;
      }
      tensor[3] _arg_156 = PACK(VAdd<3,4>(v_102,v_154));
      &tensor[3] l_fs_157 = fStep$2A28(_arg_156);
      real l_op1_e3_l_5_158 = Sqrt(VDot<3,4>(v_154,v_154));
      if (GT<real>(RDiv(Sqrt(VDot<3,4>(LOAD_0(l_fs_157),LOAD_0(l_fs_157))),l_op1_e3_l_5_158),0.5e0)) {
        self.pos = PACK(v_102);
        self._pos = PACK(v_102);
        self.hh = RMul(l_hh_155,0.5e0);
        self.step = PACK(v_62);
        self.steps = l_steps_59;
        active;
      } else {
        l_hh_162 = l_hh_155;
      }
      vec3{4} v_163 = VAdd<3,4>(VAdd<3,4>(v_102,LOAD_0(l_fs_157)),v_154);
      tensor[3] _arg_164 = PACK(v_163);
      l__t_165 = 0.e0;
      id(particle)[] t_167 = SphereQuery<3,id(particle)>(TensorRef<[3]>(_arg_164),globals.rad);
      vec3{4} v_168 = VAdd<3,4>(LOAD_0(l_fs_157),v_154);
      vec3{4} v_169 = v_163;
      foreach id(particle) i_P_166 in t_167 {
        vec3{4} v_170 = VSub<3,4>(v_169,LOAD_0(TensorRef<[3]>(i_P_166.pos)));
        real l_op1_e3_l_15_171 = RSub(0.1e1,RDiv(Sqrt(VDot<3,4>(v_170,v_170)),globals.rad));
        real l__Pow_2_172 = RMul(l_op1_e3_l_15_171,l_op1_e3_l_15_171);
        l__t_165 = RAdd(l__t_165,RMul(l__Pow_2_172,l__Pow_2_172));
      }
      if (GT<real>(RSub(l__t_165,l__t_110),RMul(0.5e0,VDot<3,4>(VSub<3,4>(v_169,v_102),VNeg<3,4>(v_151))))) {
        self.pos = PACK(v_102);
        self._pos = PACK(v_102);
        self.hh = RMul(l_hh_162,0.5e0);
        self.step = PACK(v_62);
        self.steps = l_steps_59;
        active;
      } else {
        l_hh_176 = l_hh_162;
        v_177 = v_169;
      }
      real l_hh_178 = RMul(l_hh_176,0.11e1);
      real l__t_179 = VIndex<3,4,0>(v_177);
      if (BNot(EQ<real>(l__t_179,l__t_179))) {
        l__t_180 = true;
      } else {
        bool l__t_182;
        real l__t_181 = VIndex<3,4,1>(v_177);
        if (BNot(EQ<real>(l__t_181,l__t_181))) {
          l__t_182 = true;
        } else {
          real l__t_183 = VIndex<3,4,2>(v_177);
          l__t_182 = BNot(EQ<real>(l__t_183,l__t_183));
        }
        l__t_180 = l__t_182;
      }
      if (l__t_180) {
        die;
      }
      if (LT<int>(l_nn_108,5)) {
        bool l__t_206;
        bool l__t_191;
        real l_op1_e3_l_7_184 = RDiv(0.1e1,l_op1_e3_l_5_158);
        real l_r_185 = RMul(0.5e0,globals.rad);
        vec3{4} v_186 = VAdd<3,4>(v_177,VEC3{4}(RMul(RMul(l_r_185,VIndex<3,4,0>(v_154)),l_op1_e3_l_7_184),RMul(RMul(l_r_185,VIndex<3,4,1>(v_154)),l_op1_e3_l_7_184),RMul(RMul(l_r_185,VIndex<3,4,2>(v_154)),l_op1_e3_l_7_184)));
        vec3{4} v_187 = VSub<3,4>(v_186,v_62);
        vec3{4} v_188 = v_186;
        vec3{4} v_189 = v_187;
        if (LTE<real>(Abs<real>(VIndex<3,4,0>(v_187)),0.4e1)) {
          bool l__t_190;
          if (LTE<real>(Abs<real>(VIndex<3,4,1>(v_189)),0.4e1)) {
            l__t_190 = LTE<real>(Abs<real>(VIndex<3,4,2>(v_189)),0.4e1);
          } else {
            l__t_190 = false;
          }
          l__t_191 = l__t_190;
        } else {
          l__t_191 = false;
        }
        if (l__t_191) {
          bool l__t_205;
          bool l__t_193;
          real l__t_192 = VIndex<3,4,0>(v_188);
          if (BNot(EQ<real>(l__t_192,l__t_192))) {
            l__t_193 = true;
          } else {
            bool l__t_195;
            real l__t_194 = VIndex<3,4,1>(v_188);
            if (BNot(EQ<real>(l__t_194,l__t_194))) {
              l__t_195 = true;
            } else {
              real l__t_196 = VIndex<3,4,2>(v_188);
              l__t_195 = BNot(EQ<real>(l__t_196,l__t_196));
            }
            l__t_193 = l__t_195;
          }
          if (BNot(l__t_193)) {
            real l_op1_e3_l_10_197 = RMul(l__t_192,l__t_192);
            real l_op1_e3_l_12_198 = RSub(0.2e1,RMul(0.3e1,l_op1_e3_l_10_197));
            real l_op1_e3_l_17_199 = RAdd(RAdd(RNeg(RMul(l__t_192,l_op1_e3_l_10_197)),RMul(0.2e1,l__t_192)),VIndex<3,4,1>(v_188));
            real l__t_200 = RMul(0.2e1,l_op1_e3_l_12_198);
            real l__t_201 = RMul(0.2e1,globals.zfuz);
            vec3{4} v_202 = VEC3{4}(RMul(l__t_200,l_op1_e3_l_17_199),RMul(0.2e1,l_op1_e3_l_17_199),RMul(l__t_201,VIndex<3,4,2>(v_188)));
            tensor[3,3] t_203 = <tensor[3,3]>[RSub(RMul(0.2e1,RMul(l_op1_e3_l_12_198,l_op1_e3_l_12_198)),RMul(RMul(0.12e2,l__t_192),l_op1_e3_l_17_199)),l__t_200,0.e0,l__t_200,0.2e1,0.e0,0.e0,0.e0,l__t_201];
            real[3] l__t_204 = EigenVals3x3(TensorRef<[3,3]>(t_203));
            l__t_205 = GTE<real>(RDiv(Subscript<real[3]>(l__t_204,0),RAdd(globals.fBias,Sqrt(VDot<3,4>(v_202,v_202)))),globals.fStren);
          } else {
            l__t_205 = false;
          }
          l__t_206 = l__t_205;
        } else {
          l__t_206 = false;
        }
        if (l__t_206) {
          tensor[3] _arg_207 = PACK(v_188);
          new particle(_arg_207,l_hh_178);
        }
      }
      l_testp_93 = self.testp;
      l_nfs_94 = self.nfs;
      l_found_95 = self.found;
      v_96 = v_168;
      l_hh_97 = l_hh_178;
      v_98 = v_177;
    }
    self.pos = PACK(v_98);
    self._pos = PACK(v_98);
    self.hh = l_hh_97;
    self.step = PACK(v_96);
    self.found = l_found_95;
    self.nfs = l_nfs_94;
    self.testp = l_testp_93;
    self.steps = l_steps_59;
    active;
  }
}
//***** CREATE COLLECTION *****
  {
    foreach &tensor[3] i_x_211 in globals.ipos {
      new particle(i_x_211,0.1e1);
    }
  }
//***** GLOBAL UPDATE *****
  {
    id(particle) ix_220;
    id(particle) ix_218;
    id(particle) ix_216;
    id(particle) ix_214;
    id(particle) ix_212;
    mapreduce {
      int l_res_213 = sum<int> { sum$2A46  (ix_212) | ix_212 in all }
    }
    mapreduce {
      int l_res_215 = max<int> { max$2A48  (ix_214) | ix_214 in all }
    }
    mapreduce {
      int l_res_217 = sum<int> { sum$2A4A  (ix_216) | ix_216 in all }
    }
    mapreduce {
      bool l_res_219 = all { all$2A4C  (ix_218) | ix_218 in all }
    }
    mapreduce {
      real l_res_221 = max<real> { max$2A4E  (ix_220) | ix_220 in all }
    }
    real l__t_222 = RDiv(l_res_221,globals.rad);
    bool l__t_223 = LT<real>(l__t_222,globals.eps);
    print("One run:",l_res_219," and ",l__t_222," and ",l__t_223," and ",l_res_217," of ",l_res_213,"\n");
    if (l_res_219) {
      if (l__t_223) {
        print("CONVERGED!\n");
        stabilize_all;
      }
    }
    if (GT<int>(l_res_215,5000)) {
      stabilize_all;
    }
    return
  }
#### end program ####
/usr/bin/clang++ -fPIC -m64 -c -Wreturn-type -Wuninitialized -g -O0 -pthread -mavx2 -msse4.2 -I/home/teocollin/gitcode/diderot/include -I/usr/local/include evalProg.cxx
/usr/bin/clang++ -shared -o evalProg.so evalProg.o /home/teocollin/gitcode/diderot/lib/diderot-rt-par-debug.o -Wl,-rpath=/usr/local/lib -L/usr/local/lib -lteem  -lspatialindex_c   -lspatialindex 
                                       Phase                                         Exclusive    Total  
  compiler ..........................................................................   0.033     1.997
    front end .......................................................................   0.469     0.564
      parser ........................................................................   0.066     0.066
      typechecker ...................................................................   0.029     0.029
      simplify ......................................................................   0.000     0.000
    translate .......................................................................   0.018     0.018
    High IR optimization ............................................................   0.025     0.050
      High IR value numbering .......................................................   0.014     0.014
      High IR normalization .........................................................   0.011     0.011
      High IR checking ..............................................................   0.000     0.000
    High to Mid translation .........................................................   0.016     0.016
    Mid IR optimization .............................................................   0.021     0.035
      Mid IR contraction ............................................................   0.004     0.004
      Mid IR value numbering ........................................................   0.009     0.009
      Mid IR border control .........................................................   0.001     0.001
      Mid IR checking ...............................................................   0.000     0.000
    Mid to Low translation ..........................................................   0.007     0.007
    Low IR optimization .............................................................   0.021     0.036
      Low IR contraction ............................................................   0.007     0.007
      Low IR value numbering ........................................................   0.008     0.008
      Low IR checking ...............................................................   0.000     0.000
    Low to Tree translation .........................................................   0.017     0.017
    Tree IR optimization ............................................................   0.003     0.004
      Tree IR contraction ...........................................................   0.000     0.000
      Tree IR checking ..............................................................   0.000     0.000
    code generation .................................................................   0.019     1.217
      C compiler ....................................................................   1.198     1.198
