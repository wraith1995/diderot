/* ParseTree: After parsing */
  Program @ [qd.diderot:3.1-23.0] 
    [
      Input: v1= @ [qd.diderot:3.1-4.0] 
        Cons @ [qd.diderot:3.22-27] 
          [
            Lit: 1 @ [qd.diderot:3.23-24] 
            Lit: 0 @ [qd.diderot:3.25-26] 
          ]
      Input: v2= @ [qd.diderot:4.1-5.0] 
        Cons @ [qd.diderot:4.22-27] 
          [
            Lit: 2 @ [qd.diderot:4.23-24] 
            Lit: 1 @ [qd.diderot:4.25-26] 
          ]
      Input: w1= @ [qd.diderot:6.1-7.0] 
        Cons @ [qd.diderot:6.22-29] 
          [
            Lit: 1 @ [qd.diderot:6.23-24] 
            Lit: 0 @ [qd.diderot:6.25-26] 
            Lit: 0 @ [qd.diderot:6.27-28] 
          ]
      Input: w2= @ [qd.diderot:7.1-8.0] 
        Cons @ [qd.diderot:7.22-29] 
          [
            Lit: 1 @ [qd.diderot:7.23-24] 
            Lit: 1 @ [qd.diderot:7.25-26] 
            Lit: 0 @ [qd.diderot:7.27-28] 
          ]
      Input: w3= @ [qd.diderot:8.1-9.0] 
        Cons @ [qd.diderot:8.22-29] 
          [
            Lit: 1 @ [qd.diderot:8.23-24] 
            Lit: 1 @ [qd.diderot:8.25-26] 
            Lit: 1 @ [qd.diderot:8.27-28] 
          ]
      Var @ [qd.diderot:10.1-11.0] 
        Decl: itter= @ [qd.diderot:10.1-11.0] 
          Sequence @ [qd.diderot:10.15-18] 
            [
              Lit: 1 @ [qd.diderot:10.16-17] 
            ]
    ]
    Strand: dump @ [qd.diderot:12.1-22.3] 
      [
        Param: i @ [qd.diderot:12.13-18] 
          Int @ [qd.diderot:12.13-17] 
      ]
      [
        VarDcl: output @ [qd.diderot:13.3-14.0] 
        VarDcl: output @ [qd.diderot:14.3-15.0] 
      ]
      [
        Method: Update @ [qd.diderot:15.3-22.1] 
          Block @ [qd.diderot:15.9-22.0] 
            [
              Print @ [qd.diderot:16.5-17.0] 
                [
                  Var: t1 @ [qd.diderot:16.11-13] 
                  Lit: "\n" @ [qd.diderot:16.14-18] 
                ]
              Print @ [qd.diderot:17.5-18.0] 
                [
                  Apply @ [qd.diderot:17.11-18] 
                    Var: inv @ [qd.diderot:17.11-14] 
                    [
                      Var: t1 @ [qd.diderot:17.15-17] 
                    ]
                  Lit: "\n" @ [qd.diderot:17.19-23] 
                ]
              Print @ [qd.diderot:18.5-19.0] 
                [
                  Var: t2 @ [qd.diderot:18.11-13] 
                  Lit: "\n" @ [qd.diderot:18.15-19] 
                ]
              Print @ [qd.diderot:19.5-20.0] 
                [
                  Apply @ [qd.diderot:19.11-18] 
                    Var: inv @ [qd.diderot:19.11-14] 
                    [
                      Var: t2 @ [qd.diderot:19.15-17] 
                    ]
                  Lit: "\n" @ [qd.diderot:19.20-24] 
                ]
              Stabilize @ [qd.diderot:20.5-21.0] 
            ]
      ]
    Collection @ [qd.diderot:22.3-23.0] 
      Comprehension @ [qd.diderot:22.21-43] 
        Apply @ [qd.diderot:22.22-29] 
          Var: dump @ [qd.diderot:22.22-26] 
          [
            Var: i @ [qd.diderot:22.27-28] 
          ]
        [
          Iterator: i @ [qd.diderot:22.32-42] 
            Var: itter @ [qd.diderot:22.37-42] 
        ]
/* end program */
/* AST: After typechecking */
properties: HasInputs,HasGlobals
input vec2 v1 = [0.1e1, 0.e0];
input vec2 v2 = [0.2e1, 0.1e1];
input vec3 w1 = [0.1e1, 0.e0, 0.e0];
input vec3 w2 = [0.1e1, 0.1e1, 0.e0];
input vec3 w3 = [0.1e1, 0.1e1, 0.1e1];
int[] itter = (int[]){1};
strand dump (int i)
{
  output mat2 t1 = [v1, v2];
  output mat3 t2 = [w1, w2, w3];
  update {
    print (t1, "\n");
    print (inv (t1), "\n");
    print (t2, "\n");
    print (inv (t2), "\n");
    stabilize;
    }
  
}
collection {
    foreach (int i in itter) {
      new dump (i);
      }
    }
  
/* Program end */
/* Simplified Program (after after simplify) start */
properties: GlobalInit,HasInputs,HasGlobals
input vec2 v101D1 = <default>;
input vec2 v201D4 = <default>;
input vec3 w101D7 = <default>;
input vec3 w201DB = <default>;
input vec3 w301DF = <default>;
constants {
  real _t01D2 = 0.1e1;
  real _t01D3 = 0.e0;
  v101D1 = [_t01D2, _t01D3];
  real _t01D5 = 0.2e1;
  real _t01D6 = 0.1e1;
  v201D4 = [_t01D5, _t01D6];
  real _t01D8 = 0.1e1;
  real _t01D9 = 0.e0;
  real _t01DA = 0.e0;
  w101D7 = [_t01D8, _t01D9, _t01DA];
  real _t01DC = 0.1e1;
  real _t01DD = 0.1e1;
  real _t01DE = 0.e0;
  w201DB = [_t01DC, _t01DD, _t01DE];
  real _t01E0 = 0.1e1;
  real _t01E1 = 0.1e1;
  real _t01E2 = 0.1e1;
  w301DF = [_t01E0, _t01E1, _t01E2];
}
global int[] itter01E6;
globalInit {
  int _t01E3 = 1;
  int[1] _t01E4 = {_t01E3};
  int[] _t01E5 = (int[])_t01E4;
  itter01E6 = _t01E5;
}
strand dump (int i01E7) {
  output tensor[2,2] t101E8;
  output tensor[3,3] t201E9;
  {
    t101E8 = [v101D1, v201D4];
    t201E9 = [w101D7, w201DB, w301DF];
  }
  update
  {
    string _t01EA = "\n";
    print (t101E8, _t01EA);
    tensor[2,2] _t01EB = prim inv0154 (t101E8);
    string _t01EC = "\n";
    print (_t01EB, _t01EC);
    string _t01ED = "\n";
    print (t201E9, _t01ED);
    tensor[3,3] _t01EE = prim inv0155 (t201E9);
    string _t01EF = "\n";
    print (_t01EE, _t01EF);
    stabilize;
  }
}
collection {
  foreach i01F0 in itter01E6 {
    new dump (i01F0);
  }
}
/* Program end */
/* Simplified Program (after after contraction (1)) start */
properties: GlobalInit,HasInputs,HasGlobals
input vec2 v101D1 = <default>;
input vec2 v201D4 = <default>;
input vec3 w101D7 = <default>;
input vec3 w201DB = <default>;
input vec3 w301DF = <default>;
constants {
  real _t01D2 = 0.1e1;
  real _t01D3 = 0.e0;
  v101D1 = [_t01D2, _t01D3];
  real _t01D5 = 0.2e1;
  real _t01D6 = 0.1e1;
  v201D4 = [_t01D5, _t01D6];
  real _t01D8 = 0.1e1;
  real _t01D9 = 0.e0;
  real _t01DA = 0.e0;
  w101D7 = [_t01D8, _t01D9, _t01DA];
  real _t01DC = 0.1e1;
  real _t01DD = 0.1e1;
  real _t01DE = 0.e0;
  w201DB = [_t01DC, _t01DD, _t01DE];
  real _t01E0 = 0.1e1;
  real _t01E1 = 0.1e1;
  real _t01E2 = 0.1e1;
  w301DF = [_t01E0, _t01E1, _t01E2];
}
global int[] itter01E6;
globalInit {
  int _t01E3 = 1;
  int[1] _t01E4 = {_t01E3};
  int[] _t01E5 = (int[])_t01E4;
  itter01E6 = _t01E5;
}
strand dump (int i01E7) {
  output tensor[2,2] t101E8;
  output tensor[3,3] t201E9;
  {
    t101E8 = [v101D1, v201D4];
    t201E9 = [w101D7, w201DB, w301DF];
  }
  update
  {
    string _t01EA = "\n";
    print (t101E8, _t01EA);
    tensor[2,2] _t01EB = prim inv0154 (t101E8);
    string _t01EC = "\n";
    print (_t01EB, _t01EC);
    string _t01ED = "\n";
    print (t201E9, _t01ED);
    tensor[3,3] _t01EE = prim inv0155 (t201E9);
    string _t01EF = "\n";
    print (_t01EE, _t01EF);
    stabilize;
  }
}
collection {
  foreach i01F0 in itter01E6 {
    new dump (i01F0);
  }
}
/* Program end */
/* Simplified Program (after after map-reduce-fusion) start */
properties: GlobalInit,HasInputs,HasGlobals
input vec2 v101D1 = <default>;
input vec2 v201D4 = <default>;
input vec3 w101D7 = <default>;
input vec3 w201DB = <default>;
input vec3 w301DF = <default>;
constants {
  real _t01D2 = 0.1e1;
  real _t01D3 = 0.e0;
  v101D1 = [_t01D2, _t01D3];
  real _t01D5 = 0.2e1;
  real _t01D6 = 0.1e1;
  v201D4 = [_t01D5, _t01D6];
  real _t01D8 = 0.1e1;
  real _t01D9 = 0.e0;
  real _t01DA = 0.e0;
  w101D7 = [_t01D8, _t01D9, _t01DA];
  real _t01DC = 0.1e1;
  real _t01DD = 0.1e1;
  real _t01DE = 0.e0;
  w201DB = [_t01DC, _t01DD, _t01DE];
  real _t01E0 = 0.1e1;
  real _t01E1 = 0.1e1;
  real _t01E2 = 0.1e1;
  w301DF = [_t01E0, _t01E1, _t01E2];
}
global int[] itter01E6;
globalInit {
  int _t01E3 = 1;
  int[1] _t01E4 = {_t01E3};
  int[] _t01E5 = (int[])_t01E4;
  itter01E6 = _t01E5;
}
strand dump (int i01E7) {
  output tensor[2,2] t101E8;
  output tensor[3,3] t201E9;
  {
    t101E8 = [v101D1, v201D4];
    t201E9 = [w101D7, w201DB, w301DF];
  }
  update
  {
    string _t01EA = "\n";
    print (t101E8, _t01EA);
    tensor[2,2] _t01EB = prim inv0154 (t101E8);
    string _t01EC = "\n";
    print (_t01EB, _t01EC);
    string _t01ED = "\n";
    print (t201E9, _t01ED);
    tensor[3,3] _t01EE = prim inv0155 (t201E9);
    string _t01EF = "\n";
    print (_t01EE, _t01EF);
    stabilize;
  }
}
collection {
  foreach i01F0 in itter01E6 {
    new dump (i01F0);
  }
}
/* Program end */
/* Simplified Program (after after inlining) start */
properties: GlobalInit,HasInputs,HasGlobals
input vec2 v101D1 = <default>;
input vec2 v201D4 = <default>;
input vec3 w101D7 = <default>;
input vec3 w201DB = <default>;
input vec3 w301DF = <default>;
constants {
  real _t01D2 = 0.1e1;
  real _t01D3 = 0.e0;
  v101D1 = [_t01D2, _t01D3];
  real _t01D5 = 0.2e1;
  real _t01D6 = 0.1e1;
  v201D4 = [_t01D5, _t01D6];
  real _t01D8 = 0.1e1;
  real _t01D9 = 0.e0;
  real _t01DA = 0.e0;
  w101D7 = [_t01D8, _t01D9, _t01DA];
  real _t01DC = 0.1e1;
  real _t01DD = 0.1e1;
  real _t01DE = 0.e0;
  w201DB = [_t01DC, _t01DD, _t01DE];
  real _t01E0 = 0.1e1;
  real _t01E1 = 0.1e1;
  real _t01E2 = 0.1e1;
  w301DF = [_t01E0, _t01E1, _t01E2];
}
global int[] itter01E6;
globalInit {
  int _t01E3 = 1;
  int[1] _t01E4 = {_t01E3};
  int[] _t01E5 = (int[])_t01E4;
  itter01E6 = _t01E5;
}
strand dump (int i01E7) {
  output tensor[2,2] t101E8;
  output tensor[3,3] t201E9;
  {
    t101E8 = [v101D1, v201D4];
    t201E9 = [w101D7, w201DB, w301DF];
  }
  update
  {
    string _t01EA = "\n";
    print (t101E8, _t01EA);
    tensor[2,2] _t01EB = prim inv0154 (t101E8);
    string _t01EC = "\n";
    print (_t01EB, _t01EC);
    string _t01ED = "\n";
    print (t201E9, _t01ED);
    tensor[3,3] _t01EE = prim inv0155 (t201E9);
    string _t01EF = "\n";
    print (_t01EE, _t01EF);
    stabilize;
  }
}
collection {
  foreach i01F0 in itter01E6 {
    new dump (i01F0);
  }
}
/* Program end */
/* Simplified Program (after after contraction (2)) start */
properties: GlobalInit,HasInputs,HasGlobals
input vec2 v101D1 = <default>;
input vec2 v201D4 = <default>;
input vec3 w101D7 = <default>;
input vec3 w201DB = <default>;
input vec3 w301DF = <default>;
constants {
  real _t01D2 = 0.1e1;
  real _t01D3 = 0.e0;
  v101D1 = [_t01D2, _t01D3];
  real _t01D5 = 0.2e1;
  real _t01D6 = 0.1e1;
  v201D4 = [_t01D5, _t01D6];
  real _t01D8 = 0.1e1;
  real _t01D9 = 0.e0;
  real _t01DA = 0.e0;
  w101D7 = [_t01D8, _t01D9, _t01DA];
  real _t01DC = 0.1e1;
  real _t01DD = 0.1e1;
  real _t01DE = 0.e0;
  w201DB = [_t01DC, _t01DD, _t01DE];
  real _t01E0 = 0.1e1;
  real _t01E1 = 0.1e1;
  real _t01E2 = 0.1e1;
  w301DF = [_t01E0, _t01E1, _t01E2];
}
global int[] itter01E6;
globalInit {
  int _t01E3 = 1;
  int[1] _t01E4 = {_t01E3};
  int[] _t01E5 = (int[])_t01E4;
  itter01E6 = _t01E5;
}
strand dump (int i01E7) {
  output tensor[2,2] t101E8;
  output tensor[3,3] t201E9;
  {
    t101E8 = [v101D1, v201D4];
    t201E9 = [w101D7, w201DB, w301DF];
  }
  update
  {
    string _t01EA = "\n";
    print (t101E8, _t01EA);
    tensor[2,2] _t01EB = prim inv0154 (t101E8);
    string _t01EC = "\n";
    print (_t01EB, _t01EC);
    string _t01ED = "\n";
    print (t201E9, _t01ED);
    tensor[3,3] _t01EE = prim inv0155 (t201E9);
    string _t01EF = "\n";
    print (_t01EE, _t01EF);
    stabilize;
  }
}
collection {
  foreach i01F0 in itter01E6 {
    new dump (i01F0);
  }
}
/* Program end */
/* Simplified Program (after after simplify fields) start */
properties: GlobalInit,HasInputs,HasGlobals
input vec2 v101D1 = <default>;
input vec2 v201D4 = <default>;
input vec3 w101D7 = <default>;
input vec3 w201DB = <default>;
input vec3 w301DF = <default>;
constants {
  real _t01D2 = 0.1e1;
  real _t01D3 = 0.e0;
  v101D1 = [_t01D2, _t01D3];
  real _t01D5 = 0.2e1;
  real _t01D6 = 0.1e1;
  v201D4 = [_t01D5, _t01D6];
  real _t01D8 = 0.1e1;
  real _t01D9 = 0.e0;
  real _t01DA = 0.e0;
  w101D7 = [_t01D8, _t01D9, _t01DA];
  real _t01DC = 0.1e1;
  real _t01DD = 0.1e1;
  real _t01DE = 0.e0;
  w201DB = [_t01DC, _t01DD, _t01DE];
  real _t01E0 = 0.1e1;
  real _t01E1 = 0.1e1;
  real _t01E2 = 0.1e1;
  w301DF = [_t01E0, _t01E1, _t01E2];
}
global int[] itter01E6;
globalInit {
  int _t01E3 = 1;
  int[1] _t01E4 = {_t01E3};
  int[] _t01E5 = (int[])_t01E4;
  itter01E6 = _t01E5;
}
strand dump (int i01E7) {
  output tensor[2,2] t101E8;
  output tensor[3,3] t201E9;
  {
    t101E8 = [v101D1, v201D4];
    t201E9 = [w101D7, w201DB, w301DF];
  }
  update
  {
    string _t01EA = "\n";
    print (t101E8, _t01EA);
    tensor[2,2] _t01EB = prim inv0154 (t101E8);
    string _t01EC = "\n";
    print (_t01EB, _t01EC);
    string _t01ED = "\n";
    print (t201E9, _t01ED);
    tensor[3,3] _t01EE = prim inv0155 (t201E9);
    string _t01EF = "\n";
    print (_t01EE, _t01EF);
    stabilize;
  }
}
collection {
  foreach i01F0 in itter01E6 {
    new dump (i01F0);
  }
}
/* Program end */
/* Simplified Program (after after simplify variables) start */
properties: GlobalInit,HasInputs,HasGlobals
input vec2 v101D1 = <default>;
input vec2 v201D4 = <default>;
input vec3 w101D7 = <default>;
input vec3 w201DB = <default>;
input vec3 w301DF = <default>;
constants {
  real _t01D2 = 0.1e1;
  real _t01D3 = 0.e0;
  v101D1 = [_t01D2, _t01D3];
  real _t01D5 = 0.2e1;
  real _t01D6 = 0.1e1;
  v201D4 = [_t01D5, _t01D6];
  real _t01D8 = 0.1e1;
  real _t01D9 = 0.e0;
  real _t01DA = 0.e0;
  w101D7 = [_t01D8, _t01D9, _t01DA];
  real _t01DC = 0.1e1;
  real _t01DD = 0.1e1;
  real _t01DE = 0.e0;
  w201DB = [_t01DC, _t01DD, _t01DE];
  real _t01E0 = 0.1e1;
  real _t01E1 = 0.1e1;
  real _t01E2 = 0.1e1;
  w301DF = [_t01E0, _t01E1, _t01E2];
}
global int[] itter01E6;
globalInit {
  int _t01E3 = 1;
  int[1] _t01E4 = {_t01E3};
  int[] _t01E5 = (int[])_t01E4;
  itter01E6 = _t01E5;
}
strand dump (int i01E7) {
  output tensor[2,2] t101E8;
  output tensor[3,3] t201E9;
  {
    t101E8 = [v101D1, v201D4];
    t201E9 = [w101D7, w201DB, w301DF];
  }
  update
  {
    string _t01EA = "\n";
    print (t101E8, _t01EA);
    tensor[2,2] _t01EB = prim inv0154 (t101E8);
    string _t01EC = "\n";
    print (_t01EB, _t01EC);
    string _t01ED = "\n";
    print (t201E9, _t01ED);
    tensor[3,3] _t01EE = prim inv0155 (t201E9);
    string _t01EF = "\n";
    print (_t01EE, _t01EF);
    stabilize;
  }
}
collection {
  foreach i01F0 in itter01E6 {
    new dump (i01F0);
  }
}
/* Program end */
/* Simplified Program (after after simplify fem vars) start */
properties: GlobalInit,HasInputs,HasGlobals
input vec2 v101D1 = <default>;
input vec2 v201D4 = <default>;
input vec3 w101D7 = <default>;
input vec3 w201DB = <default>;
input vec3 w301DF = <default>;
constants {
  real _t01D2 = 0.1e1;
  real _t01D3 = 0.e0;
  v101D1 = [_t01D2, _t01D3];
  real _t01D5 = 0.2e1;
  real _t01D6 = 0.1e1;
  v201D4 = [_t01D5, _t01D6];
  real _t01D8 = 0.1e1;
  real _t01D9 = 0.e0;
  real _t01DA = 0.e0;
  w101D7 = [_t01D8, _t01D9, _t01DA];
  real _t01DC = 0.1e1;
  real _t01DD = 0.1e1;
  real _t01DE = 0.e0;
  w201DB = [_t01DC, _t01DD, _t01DE];
  real _t01E0 = 0.1e1;
  real _t01E1 = 0.1e1;
  real _t01E2 = 0.1e1;
  w301DF = [_t01E0, _t01E1, _t01E2];
}
global int[] itter01E6;
globalInit {
  int _t01E3 = 1;
  int[1] _t01E4 = {_t01E3};
  int[] _t01E5 = (int[])_t01E4;
  itter01E6 = _t01E5;
}
strand dump (int i01E7) {
  output tensor[2,2] t101E8;
  output tensor[3,3] t201E9;
  {
    t101E8 = [v101D1, v201D4];
    t201E9 = [w101D7, w201DB, w301DF];
  }
  update
  {
    string _t01EA = "\n";
    print (t101E8, _t01EA);
    tensor[2,2] _t01EB = prim inv0154 (t101E8);
    string _t01EC = "\n";
    print (_t01EB, _t01EC);
    string _t01ED = "\n";
    print (t201E9, _t01ED);
    tensor[3,3] _t01EE = prim inv0155 (t201E9);
    string _t01EF = "\n";
    print (_t01EE, _t01EF);
    stabilize;
  }
}
collection {
  foreach i01F0 in itter01E6 {
    new dump (i01F0);
  }
}
/* Program end */
##### high-ir: after simple-to-high translation ####
## properties
  GlobalInit HasInputs HasGlobals
## globals
  input v101F1 (v1) = <default>
  input v201F2 (v2) = <default>
  input w101F3 (w1) = <default>
  input w201F4 (w2) = <default>
  input w301F5 (w3) = <default>
  global int[] itter0221
## functions
## input initialization
  ENTRY021F:  preds = []
    real _t01F6#1 = 0.1e1;
    real _t01F8#1 = 0.e0;
    tensor[2] v101FA#1 = <tensor[2]>[_t01F6,_t01F8];
    globals.v101F1 = v101FA;
    real _t01FD#1 = 0.2e1;
    real _t01FF#1 = 0.1e1;
    tensor[2] v20201#1 = <tensor[2]>[_t01FD,_t01FF];
    globals.v201F2 = v20201;
    real _t0204#1 = 0.1e1;
    real _t0206#1 = 0.e0;
    real _t0208#1 = 0.e0;
    tensor[3] w1020A#1 = <tensor[3]>[_t0204,_t0206,_t0208];
    globals.w101F3 = w1020A;
    real _t020D#1 = 0.1e1;
    real _t020F#1 = 0.1e1;
    real _t0211#1 = 0.e0;
    tensor[3] w20213#1 = <tensor[3]>[_t020D,_t020F,_t0211];
    globals.w201F4 = w20213;
    real _t0216#1 = 0.1e1;
    real _t0218#1 = 0.1e1;
    real _t021A#1 = 0.1e1;
    tensor[3] w3021C#1 = <tensor[3]>[_t0216,_t0218,_t021A];
    globals.w301F5 = w3021C;
    return
## global-variable initialization
  ENTRY022B:  preds = []
    int _t0222#1 = 1;
    int[1] _t0224#1 = <int[1]>{_t0222};
    int[] _t0226#1 = MkDynamic<int,1>(_t0224);
    int[] itter0228#1 = _t0226;
    globals.itter0221 = itter0228;
    return
## strand
  strand dump (int i0235#0)
    state:
      output tensor[2,2] t1;
      output tensor[3,3] t2;
    state init
      ENTRY0248:  preds = []
        tensor[2] v1023C#1 = globals.v101F1;
        tensor[2] v2023B#1 = globals.v201F2;
        tensor[3] w1023A#1 = globals.w101F3;
        tensor[3] w20239#1 = globals.w201F4;
        tensor[3] w30238#1 = globals.w301F5;
        tensor[2,2] t10244#1 = <tensor[2,2]>[v1023C,v2023B];
        tensor[3,3] t20246#1 = <tensor[3,3]>[w1023A,w20239,w30238];
        self.t1 = t10244;
        self.t2 = t20246;
        return
    end state init
    method update
        ENTRY0261:  preds = []
          tensor[2,2] t1024C#2 = self.t1;
          tensor[3,3] t2024D#2 = self.t2;
          string _t0250#1 = "\n";
          Print<[tensor[2,2],string]>(t1024C,_t0250);
          tensor[2,2] _t0253#1 = λ(T0[2 2])<((Σ(i5=0..1)(i7=0..1)<((ϵ_{ii5,ii0} * ϵ_{ii7,ii1} * T0_{i5,i7}))>(i5=0..1)(i7=0..1)) / ( 1)) / ( Σ(i3=0..1)(i4=0..1)<((ϵ_{ii3,ii4} * T0_{'0',i3} * T0_{'1',i4}))>(i3=0..1)(i4=0..1))>_{2 2} (t1024C);
          string _t0255#1 = "\n";
          Print<[tensor[2,2],string]>(_t0253,_t0255);
          string _t0258#1 = "\n";
          Print<[tensor[3,3],string]>(t2024D,_t0258);
          tensor[3,3] _t025B#1 = λ(T0[3 3])<((Σ(i6=0..2)(i7=0..2)(i9=0..2)(i10=0..2)<((ϵ_{ii6,ii7,ii0} * ϵ_{ii9,ii10,ii1} * T0_{i6,i9} * T0_{i7,i10}))>(i6=0..2)(i7=0..2)(i9=0..2)(i10=0..2)) / ( 2)) / ( Σ(i3=0..2)(i4=0..2)(i5=0..2)<((ϵ_{ii3,ii4,ii5} * T0_{'0',i3} * T0_{'1',i4} * T0_{'2',i5}))>(i3=0..2)(i4=0..2)(i5=0..2))>_{3 3} (t2024D);
          string _t025D#1 = "\n";
          Print<[tensor[3,3],string]>(_t025B,_t025D);
          stabilize
    end update
  end dump
## initial strand creation
  COLLECTION
    ENTRY0233:  preds = []
      int[] itter022D#1 = globals.itter0221;
    FOREACH0230:  preds = [ASSIGN022E,NEXT0232]
      foreach (i022F in itter022D) on exit goto RETURN0234
      new dump(i022F);
      goto FOREACH0230
    RETURN0234:  preds = [FOREACH0230]
      return
#### end program ####
##### high-ir: after value numbering ####
## properties
  GlobalInit HasInputs HasGlobals
## globals
  input v101F1 (v1) = <default>
  input v201F2 (v2) = <default>
  input w101F3 (w1) = <default>
  input w201F4 (w2) = <default>
  input w301F5 (w3) = <default>
  global int[] itter0221
## functions
## input initialization
  ENTRY021F:  preds = []
    real _t01F6#8 = 0.1e1;
    real _t01F8#4 = 0.e0;
    tensor[2] v101FA#1 = <tensor[2]>[_t01F6,_t01F8];
    globals.v101F1 = v101FA;
    real _t01FD#1 = 0.2e1;
    tensor[2] v20201#1 = <tensor[2]>[_t01FD,_t01F6];
    globals.v201F2 = v20201;
    tensor[3] w1020A#1 = <tensor[3]>[_t01F6,_t01F8,_t01F8];
    globals.w101F3 = w1020A;
    tensor[3] w20213#1 = <tensor[3]>[_t01F6,_t01F6,_t01F8];
    globals.w201F4 = w20213;
    tensor[3] w3021C#1 = <tensor[3]>[_t01F6,_t01F6,_t01F6];
    globals.w301F5 = w3021C;
    return
## global-variable initialization
  ENTRY022B:  preds = []
    int _t0222#1 = 1;
    int[1] _t0224#1 = <int[1]>{_t0222};
    int[] _t0226#1 = MkDynamic<int,1>(_t0224);
    globals.itter0221 = _t0226;
    return
## strand
  strand dump (int i0235#0)
    state:
      output tensor[2,2] t1;
      output tensor[3,3] t2;
    state init
      ENTRY0248:  preds = []
        tensor[2] v1023C#1 = globals.v101F1;
        tensor[2] v2023B#1 = globals.v201F2;
        tensor[3] w1023A#1 = globals.w101F3;
        tensor[3] w20239#1 = globals.w201F4;
        tensor[3] w30238#1 = globals.w301F5;
        tensor[2,2] t10244#1 = <tensor[2,2]>[v1023C,v2023B];
        tensor[3,3] t20246#1 = <tensor[3,3]>[w1023A,w20239,w30238];
        self.t1 = t10244;
        self.t2 = t20246;
        return
    end state init
    method update
        ENTRY0261:  preds = []
          tensor[2,2] t1024C#2 = self.t1;
          tensor[3,3] t2024D#2 = self.t2;
          string _t0250#4 = "\n";
          Print<[tensor[2,2],string]>(t1024C,_t0250);
          tensor[2,2] _t0253#1 = λ(T0[2 2])<((Σ(i5=0..1)(i7=0..1)<((ϵ_{ii5,ii0} * ϵ_{ii7,ii1} * T0_{i5,i7}))>(i5=0..1)(i7=0..1)) / ( 1)) / ( Σ(i3=0..1)(i4=0..1)<((ϵ_{ii3,ii4} * T0_{'0',i3} * T0_{'1',i4}))>(i3=0..1)(i4=0..1))>_{2 2} (t1024C);
          Print<[tensor[2,2],string]>(_t0253,_t0250);
          Print<[tensor[3,3],string]>(t2024D,_t0250);
          tensor[3,3] _t025B#1 = λ(T0[3 3])<((Σ(i6=0..2)(i7=0..2)(i9=0..2)(i10=0..2)<((ϵ_{ii6,ii7,ii0} * ϵ_{ii9,ii10,ii1} * T0_{i6,i9} * T0_{i7,i10}))>(i6=0..2)(i7=0..2)(i9=0..2)(i10=0..2)) / ( 2)) / ( Σ(i3=0..2)(i4=0..2)(i5=0..2)<((ϵ_{ii3,ii4,ii5} * T0_{'0',i3} * T0_{'1',i4} * T0_{'2',i5}))>(i3=0..2)(i4=0..2)(i5=0..2))>_{3 3} (t2024D);
          Print<[tensor[3,3],string]>(_t025B,_t0250);
          stabilize
    end update
  end dump
## initial strand creation
  COLLECTION
    ENTRY0233:  preds = []
      int[] itter022D#1 = globals.itter0221;
    FOREACH0230:  preds = [ASSIGN022E,NEXT0232]
      foreach (i022F in itter022D) on exit goto RETURN0234
      new dump(i022F);
      goto FOREACH0230
    RETURN0234:  preds = [FOREACH0230]
      return
#### end program ####
##### high-ir: after normalization rewriting ####
## properties
  GlobalInit HasInputs HasGlobals
## globals
  input v101F1 (v1) = <default>
  input v201F2 (v2) = <default>
  input w101F3 (w1) = <default>
  input w201F4 (w2) = <default>
  input w301F5 (w3) = <default>
  global int[] itter0221
## functions
## input initialization
  ENTRY021F:  preds = []
    real _t01F6#8 = 0.1e1;
    real _t01F8#4 = 0.e0;
    tensor[2] v101FA#1 = <tensor[2]>[_t01F6,_t01F8];
    globals.v101F1 = v101FA;
    real _t01FD#1 = 0.2e1;
    tensor[2] v20201#1 = <tensor[2]>[_t01FD,_t01F6];
    globals.v201F2 = v20201;
    tensor[3] w1020A#1 = <tensor[3]>[_t01F6,_t01F8,_t01F8];
    globals.w101F3 = w1020A;
    tensor[3] w20213#1 = <tensor[3]>[_t01F6,_t01F6,_t01F8];
    globals.w201F4 = w20213;
    tensor[3] w3021C#1 = <tensor[3]>[_t01F6,_t01F6,_t01F6];
    globals.w301F5 = w3021C;
    return
## global-variable initialization
  ENTRY022B:  preds = []
    int _t0222#1 = 1;
    int[1] _t0224#1 = <int[1]>{_t0222};
    int[] _t0226#1 = MkDynamic<int,1>(_t0224);
    globals.itter0221 = _t0226;
    return
## strand
  strand dump (int i0235#0)
    state:
      output tensor[2,2] t1;
      output tensor[3,3] t2;
    state init
      ENTRY0248:  preds = []
        tensor[2] v1023C#1 = globals.v101F1;
        tensor[2] v2023B#1 = globals.v201F2;
        tensor[3] w1023A#1 = globals.w101F3;
        tensor[3] w20239#1 = globals.w201F4;
        tensor[3] w30238#1 = globals.w301F5;
        tensor[2,2] t10244#1 = <tensor[2,2]>[v1023C,v2023B];
        tensor[3,3] t20246#1 = <tensor[3,3]>[w1023A,w20239,w30238];
        self.t1 = t10244;
        self.t2 = t20246;
        return
    end state init
    method update
        ENTRY0261:  preds = []
          tensor[2,2] t1024C#2 = self.t1;
          tensor[3,3] t2024D#2 = self.t2;
          string _t0250#4 = "\n";
          Print<[tensor[2,2],string]>(t1024C,_t0250);
          tensor[2,2] _t0253#1 = λ(T0[2 2])<((Σ(i5=0..1)(i7=0..1)<((ϵ_{ii5,ii0} * ϵ_{ii7,ii1} * T0_{i5,i7}))>(i5=0..1)(i7=0..1)) / ( 1)) / ( Σ(i3=0..1)(i4=0..1)<((ϵ_{ii3,ii4} * T0_{'0',i3} * T0_{'1',i4}))>(i3=0..1)(i4=0..1))>_{2 2} (t1024C);
          Print<[tensor[2,2],string]>(_t0253,_t0250);
          Print<[tensor[3,3],string]>(t2024D,_t0250);
          tensor[3,3] _t025B#1 = λ(T0[3 3])<((Σ(i6=0..2)(i7=0..2)(i9=0..2)(i10=0..2)<((ϵ_{ii6,ii7,ii0} * ϵ_{ii9,ii10,ii1} * T0_{i6,i9} * T0_{i7,i10}))>(i6=0..2)(i7=0..2)(i9=0..2)(i10=0..2)) / ( 2)) / ( Σ(i3=0..2)(i4=0..2)(i5=0..2)<((ϵ_{ii3,ii4,ii5} * T0_{'0',i3} * T0_{'1',i4} * T0_{'2',i5}))>(i3=0..2)(i4=0..2)(i5=0..2))>_{3 3} (t2024D);
          Print<[tensor[3,3],string]>(_t025B,_t0250);
          stabilize
    end update
  end dump
## initial strand creation
  COLLECTION
    ENTRY0233:  preds = []
      int[] itter022D#1 = globals.itter0221;
    FOREACH0230:  preds = [ASSIGN022E,NEXT0232]
      foreach (i022F in itter022D) on exit goto RETURN0234
      new dump(i022F);
      goto FOREACH0230
    RETURN0234:  preds = [FOREACH0230]
      return
#### end program ####
##### high-ir: after normalization promotion ####
## properties
  GlobalInit HasInputs HasGlobals
## globals
  input v101F1 (v1) = <default>
  input v201F2 (v2) = <default>
  input w101F3 (w1) = <default>
  input w201F4 (w2) = <default>
  input w301F5 (w3) = <default>
  global int[] itter0221
## functions
## input initialization
  ENTRY021F:  preds = []
    real _t01F6#8 = 0.1e1;
    real _t01F8#4 = 0.e0;
    tensor[2] v101FA#1 = <tensor[2]>[_t01F6,_t01F8];
    globals.v101F1 = v101FA;
    real _t01FD#1 = 0.2e1;
    tensor[2] v20201#1 = <tensor[2]>[_t01FD,_t01F6];
    globals.v201F2 = v20201;
    tensor[3] w1020A#1 = <tensor[3]>[_t01F6,_t01F8,_t01F8];
    globals.w101F3 = w1020A;
    tensor[3] w20213#1 = <tensor[3]>[_t01F6,_t01F6,_t01F8];
    globals.w201F4 = w20213;
    tensor[3] w3021C#1 = <tensor[3]>[_t01F6,_t01F6,_t01F6];
    globals.w301F5 = w3021C;
    return
## global-variable initialization
  ENTRY022B:  preds = []
    int _t0222#1 = 1;
    int[1] _t0224#1 = <int[1]>{_t0222};
    int[] _t0226#1 = MkDynamic<int,1>(_t0224);
    globals.itter0221 = _t0226;
    return
## strand
  strand dump (int i0235#0)
    state:
      output tensor[2,2] t1;
      output tensor[3,3] t2;
    state init
      ENTRY0248:  preds = []
        tensor[2] v1023C#1 = globals.v101F1;
        tensor[2] v2023B#1 = globals.v201F2;
        tensor[3] w1023A#1 = globals.w101F3;
        tensor[3] w20239#1 = globals.w201F4;
        tensor[3] w30238#1 = globals.w301F5;
        tensor[2,2] t10244#1 = <tensor[2,2]>[v1023C,v2023B];
        tensor[3,3] t20246#1 = <tensor[3,3]>[w1023A,w20239,w30238];
        self.t1 = t10244;
        self.t2 = t20246;
        return
    end state init
    method update
        ENTRY0261:  preds = []
          tensor[2,2] t1024C#2 = self.t1;
          tensor[3,3] t2024D#2 = self.t2;
          string _t0250#4 = "\n";
          Print<[tensor[2,2],string]>(t1024C,_t0250);
          tensor[2,2] _t0253#1 = λ(T0[2 2])<((Σ(i5=0..1)(i7=0..1)<((ϵ_{ii5,ii0} * ϵ_{ii7,ii1} * T0_{i5,i7}))>(i5=0..1)(i7=0..1)) / ( 1)) / ( Σ(i3=0..1)(i4=0..1)<((ϵ_{ii3,ii4} * T0_{'0',i3} * T0_{'1',i4}))>(i3=0..1)(i4=0..1))>_{2 2} (t1024C);
          Print<[tensor[2,2],string]>(_t0253,_t0250);
          Print<[tensor[3,3],string]>(t2024D,_t0250);
          tensor[3,3] _t025B#1 = λ(T0[3 3])<((Σ(i6=0..2)(i7=0..2)(i9=0..2)(i10=0..2)<((ϵ_{ii6,ii7,ii0} * ϵ_{ii9,ii10,ii1} * T0_{i6,i9} * T0_{i7,i10}))>(i6=0..2)(i7=0..2)(i9=0..2)(i10=0..2)) / ( 2)) / ( Σ(i3=0..2)(i4=0..2)(i5=0..2)<((ϵ_{ii3,ii4,ii5} * T0_{'0',i3} * T0_{'1',i4} * T0_{'2',i5}))>(i3=0..2)(i4=0..2)(i5=0..2))>_{3 3} (t2024D);
          Print<[tensor[3,3],string]>(_t025B,_t0250);
          stabilize
    end update
  end dump
## initial strand creation
  COLLECTION
    ENTRY0233:  preds = []
      int[] itter022D#1 = globals.itter0221;
    FOREACH0230:  preds = [ASSIGN022E,NEXT0232]
      foreach (i022F in itter022D) on exit goto RETURN0234
      new dump(i022F);
      goto FOREACH0230
    RETURN0234:  preds = [FOREACH0230]
      return
#### end program ####
##### mid-ir: after high-to-mid translation ####
## properties
  GlobalInit HasInputs HasGlobals
## globals
  input v1026B (v1) = <default>
  input v2026C (v2) = <default>
  input w1026D (w1) = <default>
  input w2026E (w2) = <default>
  input w3026F (w3) = <default>
  global int[] itter0270
## functions
## input initialization
  ENTRY0271:  preds = []
    real _t0272#8 = 0.1e1;
    real _t0274#4 = 0.e0;
    tensor[2] v10276#1 = <tensor[2]>[_t0272,_t0274];
    globals.v1026B = v10276;
    real _t0279#1 = 0.2e1;
    tensor[2] v2027B#1 = <tensor[2]>[_t0279,_t0272];
    globals.v2026C = v2027B;
    tensor[3] w1027E#1 = <tensor[3]>[_t0272,_t0274,_t0274];
    globals.w1026D = w1027E;
    tensor[3] w20281#1 = <tensor[3]>[_t0272,_t0272,_t0274];
    globals.w2026E = w20281;
    tensor[3] w30284#1 = <tensor[3]>[_t0272,_t0272,_t0272];
    globals.w3026F = w30284;
    return
## global-variable initialization
  ENTRY0288:  preds = []
    int _t0289#1 = 1;
    int[1] _t028B#1 = <int[1]>{_t0289};
    int[] _t028D#1 = MkDynamic<int,1>(_t028B);
    globals.itter0270 = _t028D;
    return
## strand
  strand dump (int i0291#0)
    state:
      output tensor[2,2] t1;
      output tensor[3,3] t2;
    state init
      ENTRY0294:  preds = []
        tensor[2] v10295#1 = globals.v1026B;
        tensor[2] v20297#1 = globals.v2026C;
        tensor[3] w10299#1 = globals.w1026D;
        tensor[3] w2029B#1 = globals.w2026E;
        tensor[3] w3029D#1 = globals.w3026F;
        tensor[2,2] t1029F#1 = <tensor[2,2]>[v10295,v20297];
        tensor[3,3] t202A1#1 = <tensor[3,3]>[w10299,w2029B,w3029D];
        self.t1 = t1029F;
        self.t2 = t202A1;
        return
    end state init
    method update
        ENTRY02A6:  preds = []
          tensor[2,2] t102A7#4 = self.t1;
          tensor[3,3] t202A9#6 = self.t2;
          string _t02AB#4 = "\n";
          Print<[tensor[2,2],string]>(t102A7,_t02AB);
          tensor[2,2] op1_e3_l_102AF#1 = λ(T0[2 2])<Σ(i2=0..1)<((ϵ_{ii2,ii0} * T0_{i1,i2}))>(i2=0..1)>_{2 2} (t102A7);
          tensor[2,2] op1_e3_l_202B0#1 = λ(T0[2 2])<Σ(i2=0..1)<((ϵ_{ii2,ii0} * T0_{i1,i2}))>(i2=0..1)>_{2 2} (op1_e3_l_102AF);
          tensor[2] op1_e3_l_302B1#1 = λ(T0[2 2])<Σ(i1=0..1)<((ϵ_{ii0,ii1} * T0_{'1',i1}))>(i1=0..1)>_{2} (t102A7);
          tensor[2,2] op1_e3_l_402B2#1 = λ(T0[2 2])<(T0_{i0,i1}) / ( 1)>_{2 2} (op1_e3_l_202B0);
          real op1_e3_l_502B3#1 = λ(T0[2 2],T1[2])<Σ(i0=0..1)<((T0_{'0',i0} * T1_{i0}))>(i0=0..1)> (t102A7,op1_e3_l_302B1);
          tensor[2,2] _t02AE#1 = λ(T0[2 2],T1[])<(T0_{i0,i1}) / ( T1)>_{2 2} (op1_e3_l_402B2,op1_e3_l_502B3);
          Print<[tensor[2,2],string]>(_t02AE,_t02AB);
          Print<[tensor[3,3],string]>(t202A9,_t02AB);
          tensor[3,3,3] op1_e3_l_102BD#1 = λ(T0[3 3])<Σ(i3=0..2)<((ϵ_{ii0,ii3,ii1} * T0_{i2,i3}))>(i3=0..2)>_{3 3 3} (t202A9);
          tensor[3,3,3] op1_e3_l_202BE#1 = λ(T0[3 3],T1[3 3 3])<Σ(i3=0..2)<((T0_{i0,i3} * T1_{i3,i1,i2}))>(i3=0..2)>_{3 3 3} (t202A9,op1_e3_l_102BD);
          tensor[3,3] op1_e3_l_302BF#1 = λ(T0[3 3 3])<Σ(i2=0..2)(i3=0..2)<((ϵ_{ii2,ii3,ii0} * T0_{i2,i1,i3}))>(i2=0..2)(i3=0..2)>_{3 3} (op1_e3_l_202BE);
          tensor[3,3] op1_e3_l_402C0#1 = λ(T0[3 3])<Σ(i2=0..2)<((ϵ_{ii0,ii1,ii2} * T0_{'2',i2}))>(i2=0..2)>_{3 3} (t202A9);
          tensor[3] op1_e3_l_502C1#1 = λ(T0[3 3],T1[3 3])<Σ(i1=0..2)<((T0_{'1',i1} * T1_{i0,i1}))>(i1=0..2)>_{3} (t202A9,op1_e3_l_402C0);
          tensor[3,3] op1_e3_l_602C2#1 = λ(T0[3 3])<(T0_{i0,i1}) / ( 2)>_{3 3} (op1_e3_l_302BF);
          real op1_e3_l_702C3#1 = λ(T0[3 3],T1[3])<Σ(i0=0..2)<((T0_{'0',i0} * T1_{i0}))>(i0=0..2)> (t202A9,op1_e3_l_502C1);
          tensor[3,3] _t02BC#1 = λ(T0[3 3],T1[])<(T0_{i0,i1}) / ( T1)>_{3 3} (op1_e3_l_602C2,op1_e3_l_702C3);
          Print<[tensor[3,3],string]>(_t02BC,_t02AB);
          stabilize
    end update
  end dump
## initial strand creation
  COLLECTION
    ENTRY02CF:  preds = []
      int[] itter02D0#1 = globals.itter0270;
    FOREACH02D3:  preds = [ASSIGN02D1,NEXT02D5]
      foreach (i02D2 in itter02D0) on exit goto RETURN02D6
      new dump(i02D2);
      goto FOREACH02D3
    RETURN02D6:  preds = [FOREACH02D3]
      return
#### end program ####
##### mid-ir: after value numbering ####
## properties
  GlobalInit HasInputs HasGlobals
## globals
  input v1026B (v1) = <default>
  input v2026C (v2) = <default>
  input w1026D (w1) = <default>
  input w2026E (w2) = <default>
  input w3026F (w3) = <default>
  global int[] itter0270
## functions
## input initialization
  ENTRY0271:  preds = []
    real _t0272#8 = 0.1e1;
    real _t0274#4 = 0.e0;
    tensor[2] v10276#1 = <tensor[2]>[_t0272,_t0274];
    globals.v1026B = v10276;
    real _t0279#1 = 0.2e1;
    tensor[2] v2027B#1 = <tensor[2]>[_t0279,_t0272];
    globals.v2026C = v2027B;
    tensor[3] w1027E#1 = <tensor[3]>[_t0272,_t0274,_t0274];
    globals.w1026D = w1027E;
    tensor[3] w20281#1 = <tensor[3]>[_t0272,_t0272,_t0274];
    globals.w2026E = w20281;
    tensor[3] w30284#1 = <tensor[3]>[_t0272,_t0272,_t0272];
    globals.w3026F = w30284;
    return
## global-variable initialization
  ENTRY0288:  preds = []
    int _t0289#1 = 1;
    int[1] _t028B#1 = <int[1]>{_t0289};
    int[] _t028D#1 = MkDynamic<int,1>(_t028B);
    globals.itter0270 = _t028D;
    return
## strand
  strand dump (int i0291#0)
    state:
      output tensor[2,2] t1;
      output tensor[3,3] t2;
    state init
      ENTRY0294:  preds = []
        tensor[2] v10295#1 = globals.v1026B;
        tensor[2] v20297#1 = globals.v2026C;
        tensor[3] w10299#1 = globals.w1026D;
        tensor[3] w2029B#1 = globals.w2026E;
        tensor[3] w3029D#1 = globals.w3026F;
        tensor[2,2] t1029F#1 = <tensor[2,2]>[v10295,v20297];
        tensor[3,3] t202A1#1 = <tensor[3,3]>[w10299,w2029B,w3029D];
        self.t1 = t1029F;
        self.t2 = t202A1;
        return
    end state init
    method update
        ENTRY02A6:  preds = []
          tensor[2,2] t102A7#4 = self.t1;
          tensor[3,3] t202A9#6 = self.t2;
          string _t02AB#4 = "\n";
          Print<[tensor[2,2],string]>(t102A7,_t02AB);
          tensor[2,2] op1_e3_l_102AF#1 = λ(T0[2 2])<Σ(i2=0..1)<((ϵ_{ii2,ii0} * T0_{i1,i2}))>(i2=0..1)>_{2 2} (t102A7);
          tensor[2,2] op1_e3_l_202B0#1 = λ(T0[2 2])<Σ(i2=0..1)<((ϵ_{ii2,ii0} * T0_{i1,i2}))>(i2=0..1)>_{2 2} (op1_e3_l_102AF);
          tensor[2] op1_e3_l_302B1#1 = λ(T0[2 2])<Σ(i1=0..1)<((ϵ_{ii0,ii1} * T0_{'1',i1}))>(i1=0..1)>_{2} (t102A7);
          tensor[2,2] op1_e3_l_402B2#1 = λ(T0[2 2])<(T0_{i0,i1}) / ( 1)>_{2 2} (op1_e3_l_202B0);
          real op1_e3_l_502B3#1 = λ(T0[2 2],T1[2])<Σ(i0=0..1)<((T0_{'0',i0} * T1_{i0}))>(i0=0..1)> (t102A7,op1_e3_l_302B1);
          tensor[2,2] _t02AE#1 = λ(T0[2 2],T1[])<(T0_{i0,i1}) / ( T1)>_{2 2} (op1_e3_l_402B2,op1_e3_l_502B3);
          Print<[tensor[2,2],string]>(_t02AE,_t02AB);
          Print<[tensor[3,3],string]>(t202A9,_t02AB);
          tensor[3,3,3] op1_e3_l_102BD#1 = λ(T0[3 3])<Σ(i3=0..2)<((ϵ_{ii0,ii3,ii1} * T0_{i2,i3}))>(i3=0..2)>_{3 3 3} (t202A9);
          tensor[3,3,3] op1_e3_l_202BE#1 = λ(T0[3 3],T1[3 3 3])<Σ(i3=0..2)<((T0_{i0,i3} * T1_{i3,i1,i2}))>(i3=0..2)>_{3 3 3} (t202A9,op1_e3_l_102BD);
          tensor[3,3] op1_e3_l_302BF#1 = λ(T0[3 3 3])<Σ(i2=0..2)(i3=0..2)<((ϵ_{ii2,ii3,ii0} * T0_{i2,i1,i3}))>(i2=0..2)(i3=0..2)>_{3 3} (op1_e3_l_202BE);
          tensor[3,3] op1_e3_l_402C0#1 = λ(T0[3 3])<Σ(i2=0..2)<((ϵ_{ii0,ii1,ii2} * T0_{'2',i2}))>(i2=0..2)>_{3 3} (t202A9);
          tensor[3] op1_e3_l_502C1#1 = λ(T0[3 3],T1[3 3])<Σ(i1=0..2)<((T0_{'1',i1} * T1_{i0,i1}))>(i1=0..2)>_{3} (t202A9,op1_e3_l_402C0);
          tensor[3,3] op1_e3_l_602C2#1 = λ(T0[3 3])<(T0_{i0,i1}) / ( 2)>_{3 3} (op1_e3_l_302BF);
          real op1_e3_l_702C3#1 = λ(T0[3 3],T1[3])<Σ(i0=0..2)<((T0_{'0',i0} * T1_{i0}))>(i0=0..2)> (t202A9,op1_e3_l_502C1);
          tensor[3,3] _t02BC#1 = λ(T0[3 3],T1[])<(T0_{i0,i1}) / ( T1)>_{3 3} (op1_e3_l_602C2,op1_e3_l_702C3);
          Print<[tensor[3,3],string]>(_t02BC,_t02AB);
          stabilize
    end update
  end dump
## initial strand creation
  COLLECTION
    ENTRY02CF:  preds = []
      int[] itter02D0#1 = globals.itter0270;
    FOREACH02D3:  preds = [ASSIGN02D1,NEXT02D5]
      foreach (i02D2 in itter02D0) on exit goto RETURN02D6
      new dump(i02D2);
      goto FOREACH02D3
    RETURN02D6:  preds = [FOREACH02D3]
      return
#### end program ####
##### mid-ir: after contraction ####
## properties
  GlobalInit HasInputs HasGlobals
## globals
  input v1026B (v1) = <default>
  input v2026C (v2) = <default>
  input w1026D (w1) = <default>
  input w2026E (w2) = <default>
  input w3026F (w3) = <default>
  global int[] itter0270
## functions
## input initialization
  ENTRY0271:  preds = []
    real _t0272#8 = 0.1e1;
    real _t0274#4 = 0.e0;
    tensor[2] v10276#1 = <tensor[2]>[_t0272,_t0274];
    globals.v1026B = v10276;
    real _t0279#1 = 0.2e1;
    tensor[2] v2027B#1 = <tensor[2]>[_t0279,_t0272];
    globals.v2026C = v2027B;
    tensor[3] w1027E#1 = <tensor[3]>[_t0272,_t0274,_t0274];
    globals.w1026D = w1027E;
    tensor[3] w20281#1 = <tensor[3]>[_t0272,_t0272,_t0274];
    globals.w2026E = w20281;
    tensor[3] w30284#1 = <tensor[3]>[_t0272,_t0272,_t0272];
    globals.w3026F = w30284;
    return
## global-variable initialization
  ENTRY0288:  preds = []
    int _t0289#1 = 1;
    int[1] _t028B#1 = <int[1]>{_t0289};
    int[] _t028D#1 = MkDynamic<int,1>(_t028B);
    globals.itter0270 = _t028D;
    return
## strand
  strand dump (int i0291#0)
    state:
      output tensor[2,2] t1;
      output tensor[3,3] t2;
    state init
      ENTRY0294:  preds = []
        tensor[2] v10295#1 = globals.v1026B;
        tensor[2] v20297#1 = globals.v2026C;
        tensor[3] w10299#1 = globals.w1026D;
        tensor[3] w2029B#1 = globals.w2026E;
        tensor[3] w3029D#1 = globals.w3026F;
        tensor[2,2] t1029F#1 = <tensor[2,2]>[v10295,v20297];
        tensor[3,3] t202A1#1 = <tensor[3,3]>[w10299,w2029B,w3029D];
        self.t1 = t1029F;
        self.t2 = t202A1;
        return
    end state init
    method update
        ENTRY02A6:  preds = []
          tensor[2,2] t102A7#4 = self.t1;
          tensor[3,3] t202A9#6 = self.t2;
          string _t02AB#4 = "\n";
          Print<[tensor[2,2],string]>(t102A7,_t02AB);
          tensor[2,2] op1_e3_l_102AF#1 = λ(T0[2 2])<Σ(i2=0..1)<((ϵ_{ii2,ii0} * T0_{i1,i2}))>(i2=0..1)>_{2 2} (t102A7);
          tensor[2,2] op1_e3_l_202B0#1 = λ(T0[2 2])<Σ(i2=0..1)<((ϵ_{ii2,ii0} * T0_{i1,i2}))>(i2=0..1)>_{2 2} (op1_e3_l_102AF);
          tensor[2] op1_e3_l_302B1#1 = λ(T0[2 2])<Σ(i1=0..1)<((ϵ_{ii0,ii1} * T0_{'1',i1}))>(i1=0..1)>_{2} (t102A7);
          tensor[2,2] op1_e3_l_402B2#1 = λ(T0[2 2])<(T0_{i0,i1}) / ( 1)>_{2 2} (op1_e3_l_202B0);
          real op1_e3_l_502B3#1 = λ(T0[2 2],T1[2])<Σ(i0=0..1)<((T0_{'0',i0} * T1_{i0}))>(i0=0..1)> (t102A7,op1_e3_l_302B1);
          tensor[2,2] _t02AE#1 = λ(T0[2 2],T1[])<(T0_{i0,i1}) / ( T1)>_{2 2} (op1_e3_l_402B2,op1_e3_l_502B3);
          Print<[tensor[2,2],string]>(_t02AE,_t02AB);
          Print<[tensor[3,3],string]>(t202A9,_t02AB);
          tensor[3,3,3] op1_e3_l_102BD#1 = λ(T0[3 3])<Σ(i3=0..2)<((ϵ_{ii0,ii3,ii1} * T0_{i2,i3}))>(i3=0..2)>_{3 3 3} (t202A9);
          tensor[3,3,3] op1_e3_l_202BE#1 = λ(T0[3 3],T1[3 3 3])<Σ(i3=0..2)<((T0_{i0,i3} * T1_{i3,i1,i2}))>(i3=0..2)>_{3 3 3} (t202A9,op1_e3_l_102BD);
          tensor[3,3] op1_e3_l_302BF#1 = λ(T0[3 3 3])<Σ(i2=0..2)(i3=0..2)<((ϵ_{ii2,ii3,ii0} * T0_{i2,i1,i3}))>(i2=0..2)(i3=0..2)>_{3 3} (op1_e3_l_202BE);
          tensor[3,3] op1_e3_l_402C0#1 = λ(T0[3 3])<Σ(i2=0..2)<((ϵ_{ii0,ii1,ii2} * T0_{'2',i2}))>(i2=0..2)>_{3 3} (t202A9);
          tensor[3] op1_e3_l_502C1#1 = λ(T0[3 3],T1[3 3])<Σ(i1=0..2)<((T0_{'1',i1} * T1_{i0,i1}))>(i1=0..2)>_{3} (t202A9,op1_e3_l_402C0);
          tensor[3,3] op1_e3_l_602C2#1 = λ(T0[3 3])<(T0_{i0,i1}) / ( 2)>_{3 3} (op1_e3_l_302BF);
          real op1_e3_l_702C3#1 = λ(T0[3 3],T1[3])<Σ(i0=0..2)<((T0_{'0',i0} * T1_{i0}))>(i0=0..2)> (t202A9,op1_e3_l_502C1);
          tensor[3,3] _t02BC#1 = λ(T0[3 3],T1[])<(T0_{i0,i1}) / ( T1)>_{3 3} (op1_e3_l_602C2,op1_e3_l_702C3);
          Print<[tensor[3,3],string]>(_t02BC,_t02AB);
          stabilize
    end update
  end dump
## initial strand creation
  COLLECTION
    ENTRY02CF:  preds = []
      int[] itter02D0#1 = globals.itter0270;
    FOREACH02D3:  preds = [ASSIGN02D1,NEXT02D5]
      foreach (i02D2 in itter02D0) on exit goto RETURN02D6
      new dump(i02D2);
      goto FOREACH02D3
    RETURN02D6:  preds = [FOREACH02D3]
      return
#### end program ####
##### mid-ir: after border control ####
## properties
  GlobalInit HasInputs HasGlobals
## globals
  input v1026B (v1) = <default>
  input v2026C (v2) = <default>
  input w1026D (w1) = <default>
  input w2026E (w2) = <default>
  input w3026F (w3) = <default>
  global int[] itter0270
## functions
## input initialization
  ENTRY0271:  preds = []
    real _t0272#8 = 0.1e1;
    real _t0274#4 = 0.e0;
    tensor[2] v10276#1 = <tensor[2]>[_t0272,_t0274];
    globals.v1026B = v10276;
    real _t0279#1 = 0.2e1;
    tensor[2] v2027B#1 = <tensor[2]>[_t0279,_t0272];
    globals.v2026C = v2027B;
    tensor[3] w1027E#1 = <tensor[3]>[_t0272,_t0274,_t0274];
    globals.w1026D = w1027E;
    tensor[3] w20281#1 = <tensor[3]>[_t0272,_t0272,_t0274];
    globals.w2026E = w20281;
    tensor[3] w30284#1 = <tensor[3]>[_t0272,_t0272,_t0272];
    globals.w3026F = w30284;
    return
## global-variable initialization
  ENTRY0288:  preds = []
    int _t0289#1 = 1;
    int[1] _t028B#1 = <int[1]>{_t0289};
    int[] _t028D#1 = MkDynamic<int,1>(_t028B);
    globals.itter0270 = _t028D;
    return
## strand
  strand dump (int i0291#0)
    state:
      output tensor[2,2] t1;
      output tensor[3,3] t2;
    state init
      ENTRY0294:  preds = []
        tensor[2] v10295#1 = globals.v1026B;
        tensor[2] v20297#1 = globals.v2026C;
        tensor[3] w10299#1 = globals.w1026D;
        tensor[3] w2029B#1 = globals.w2026E;
        tensor[3] w3029D#1 = globals.w3026F;
        tensor[2,2] t1029F#1 = <tensor[2,2]>[v10295,v20297];
        tensor[3,3] t202A1#1 = <tensor[3,3]>[w10299,w2029B,w3029D];
        self.t1 = t1029F;
        self.t2 = t202A1;
        return
    end state init
    method update
        ENTRY02A6:  preds = []
          tensor[2,2] t102A7#4 = self.t1;
          tensor[3,3] t202A9#6 = self.t2;
          string _t02AB#4 = "\n";
          Print<[tensor[2,2],string]>(t102A7,_t02AB);
          tensor[2,2] op1_e3_l_102AF#1 = λ(T0[2 2])<Σ(i2=0..1)<((ϵ_{ii2,ii0} * T0_{i1,i2}))>(i2=0..1)>_{2 2} (t102A7);
          tensor[2,2] op1_e3_l_202B0#1 = λ(T0[2 2])<Σ(i2=0..1)<((ϵ_{ii2,ii0} * T0_{i1,i2}))>(i2=0..1)>_{2 2} (op1_e3_l_102AF);
          tensor[2] op1_e3_l_302B1#1 = λ(T0[2 2])<Σ(i1=0..1)<((ϵ_{ii0,ii1} * T0_{'1',i1}))>(i1=0..1)>_{2} (t102A7);
          tensor[2,2] op1_e3_l_402B2#1 = λ(T0[2 2])<(T0_{i0,i1}) / ( 1)>_{2 2} (op1_e3_l_202B0);
          real op1_e3_l_502B3#1 = λ(T0[2 2],T1[2])<Σ(i0=0..1)<((T0_{'0',i0} * T1_{i0}))>(i0=0..1)> (t102A7,op1_e3_l_302B1);
          tensor[2,2] _t02AE#1 = λ(T0[2 2],T1[])<(T0_{i0,i1}) / ( T1)>_{2 2} (op1_e3_l_402B2,op1_e3_l_502B3);
          Print<[tensor[2,2],string]>(_t02AE,_t02AB);
          Print<[tensor[3,3],string]>(t202A9,_t02AB);
          tensor[3,3,3] op1_e3_l_102BD#1 = λ(T0[3 3])<Σ(i3=0..2)<((ϵ_{ii0,ii3,ii1} * T0_{i2,i3}))>(i3=0..2)>_{3 3 3} (t202A9);
          tensor[3,3,3] op1_e3_l_202BE#1 = λ(T0[3 3],T1[3 3 3])<Σ(i3=0..2)<((T0_{i0,i3} * T1_{i3,i1,i2}))>(i3=0..2)>_{3 3 3} (t202A9,op1_e3_l_102BD);
          tensor[3,3] op1_e3_l_302BF#1 = λ(T0[3 3 3])<Σ(i2=0..2)(i3=0..2)<((ϵ_{ii2,ii3,ii0} * T0_{i2,i1,i3}))>(i2=0..2)(i3=0..2)>_{3 3} (op1_e3_l_202BE);
          tensor[3,3] op1_e3_l_402C0#1 = λ(T0[3 3])<Σ(i2=0..2)<((ϵ_{ii0,ii1,ii2} * T0_{'2',i2}))>(i2=0..2)>_{3 3} (t202A9);
          tensor[3] op1_e3_l_502C1#1 = λ(T0[3 3],T1[3 3])<Σ(i1=0..2)<((T0_{'1',i1} * T1_{i0,i1}))>(i1=0..2)>_{3} (t202A9,op1_e3_l_402C0);
          tensor[3,3] op1_e3_l_602C2#1 = λ(T0[3 3])<(T0_{i0,i1}) / ( 2)>_{3 3} (op1_e3_l_302BF);
          real op1_e3_l_702C3#1 = λ(T0[3 3],T1[3])<Σ(i0=0..2)<((T0_{'0',i0} * T1_{i0}))>(i0=0..2)> (t202A9,op1_e3_l_502C1);
          tensor[3,3] _t02BC#1 = λ(T0[3 3],T1[])<(T0_{i0,i1}) / ( T1)>_{3 3} (op1_e3_l_602C2,op1_e3_l_702C3);
          Print<[tensor[3,3],string]>(_t02BC,_t02AB);
          stabilize
    end update
  end dump
## initial strand creation
  COLLECTION
    ENTRY02CF:  preds = []
      int[] itter02D0#1 = globals.itter0270;
    FOREACH02D3:  preds = [ASSIGN02D1,NEXT02D5]
      foreach (i02D2 in itter02D0) on exit goto RETURN02D6
      new dump(i02D2);
      goto FOREACH02D3
    RETURN02D6:  preds = [FOREACH02D3]
      return
#### end program ####
##### low-ir: after mid-to-low translation ####
## properties
  GlobalInit HasInputs HasGlobals
## globals
  input v102D7 (v1) = <default>
  input v202D8 (v2) = <default>
  input w102D9 (w1) = <default>
  input w202DA (w2) = <default>
  input w302DB (w3) = <default>
  global int[] itter02DC
## functions
## input initialization
  ENTRY02DD:  preds = []
    real _t02DE#8 = 0.1e1;
    real _t02E0#4 = 0.e0;
    tensor[2] v102E2#1 = <tensor[2]>[_t02DE,_t02E0];
    globals.v102D7 = v102E2;
    real _t02E5#1 = 0.2e1;
    tensor[2] v202E7#1 = <tensor[2]>[_t02E5,_t02DE];
    globals.v202D8 = v202E7;
    tensor[3] w102EA#1 = <tensor[3]>[_t02DE,_t02E0,_t02E0];
    globals.w102D9 = w102EA;
    tensor[3] w202ED#1 = <tensor[3]>[_t02DE,_t02DE,_t02E0];
    globals.w202DA = w202ED;
    tensor[3] w302F0#1 = <tensor[3]>[_t02DE,_t02DE,_t02DE];
    globals.w302DB = w302F0;
    return
## global-variable initialization
  ENTRY02F4:  preds = []
    int _t02F5#1 = 1;
    int[1] _t02F7#1 = <int[1]>{_t02F5};
    int[] _t02F9#1 = MkDynamic<int,1>(_t02F7);
    globals.itter02DC = _t02F9;
    return
## strand
  strand dump (int i02FD#0)
    state:
      output tensor[2,2] t1;
      output tensor[3,3] t2;
    state init
      ENTRY0300:  preds = []
        tensor[2] v10301#1 = globals.v102D7;
        tensor[2] v20303#1 = globals.v202D8;
        tensor[3] w10305#1 = globals.w102D9;
        tensor[3] w20307#1 = globals.w202DA;
        tensor[3] w30309#1 = globals.w302DB;
        tensor[2,2] t1030B#1 = <tensor[2,2]>[v10301,v20303];
        tensor[3,3] t2030D#1 = <tensor[3,3]>[w10305,w20307,w30309];
        self.t1 = t1030B;
        self.t2 = t2030D;
        return
    end state init
    method update
        ENTRY0312:  preds = []
          tensor[2,2] t10313#8 = self.t1;
          tensor[3,3] t20315#24 = self.t2;
          string _t0317#4 = "\n";
          Print<[tensor[2,2],string]>(t10313,_t0317);
          real realLit031B#4 = 0.e0;
          real r031C#2 = TensorIndex<tensor[2,2],[0,0]>(t10313);
          real r031D#1 = RMul(realLit031B,r031C);
          real realLit031E#2 = -0.1e1;
          real r031F#2 = TensorIndex<tensor[2,2],[0,1]>(t10313);
          real r0320#1 = RMul(realLit031E,r031F);
          real r0321#1 = RAdd(r031D,r0320);
          real r0322#2 = TensorIndex<tensor[2,2],[1,0]>(t10313);
          real r0323#1 = RMul(realLit031B,r0322);
          real r0324#2 = TensorIndex<tensor[2,2],[1,1]>(t10313);
          real r0325#1 = RMul(realLit031E,r0324);
          real r0326#1 = RAdd(r0323,r0325);
          tensor[2] tensor0327#1 = <tensor[2]>[r0321,r0326];
          real realLit0328#2 = 0.1e1;
          real r0329#1 = RMul(realLit0328,r031C);
          real r032A#1 = RMul(realLit031B,r031F);
          real r032B#1 = RAdd(r0329,r032A);
          real r032C#1 = RMul(realLit0328,r0322);
          real r032D#1 = RMul(realLit031B,r0324);
          real r032E#1 = RAdd(r032C,r032D);
          tensor[2] tensor032F#1 = <tensor[2]>[r032B,r032E];
          tensor[2,2] op1_e3_l_1031A#4 = <tensor[2,2]>[tensor0327,tensor032F];
          real realLit0348#4 = 0.e0;
          real r0349#2 = TensorIndex<tensor[2,2],[0,0]>(op1_e3_l_1031A);
          real r034A#1 = RMul(realLit0348,r0349);
          real realLit034B#2 = -0.1e1;
          real r034C#2 = TensorIndex<tensor[2,2],[0,1]>(op1_e3_l_1031A);
          real r034D#1 = RMul(realLit034B,r034C);
          real r034E#1 = RAdd(r034A,r034D);
          real r034F#2 = TensorIndex<tensor[2,2],[1,0]>(op1_e3_l_1031A);
          real r0350#1 = RMul(realLit0348,r034F);
          real r0351#2 = TensorIndex<tensor[2,2],[1,1]>(op1_e3_l_1031A);
          real r0352#1 = RMul(realLit034B,r0351);
          real r0353#1 = RAdd(r0350,r0352);
          tensor[2] tensor0354#1 = <tensor[2]>[r034E,r0353];
          real realLit0355#2 = 0.1e1;
          real r0356#1 = RMul(realLit0355,r0349);
          real r0357#1 = RMul(realLit0348,r034C);
          real r0358#1 = RAdd(r0356,r0357);
          real r0359#1 = RMul(realLit0355,r034F);
          real r035A#1 = RMul(realLit0348,r0351);
          real r035B#1 = RAdd(r0359,r035A);
          tensor[2] tensor035C#1 = <tensor[2]>[r0358,r035B];
          tensor[2,2] op1_e3_l_20347#4 = <tensor[2,2]>[tensor0354,tensor035C];
          real realLit0375#2 = 0.e0;
          real r0376#2 = TensorIndex<tensor[2,2],[1,0]>(t10313);
          real r0377#1 = RMul(realLit0375,r0376);
          real realLit0378#1 = 0.1e1;
          real r0379#2 = TensorIndex<tensor[2,2],[1,1]>(t10313);
          real r037A#1 = RMul(realLit0378,r0379);
          real r037B#1 = RAdd(r0377,r037A);
          real realLit037C#1 = -0.1e1;
          real r037D#1 = RMul(realLit037C,r0376);
          real r037E#1 = RMul(realLit0375,r0379);
          real r037F#1 = RAdd(r037D,r037E);
          tensor[2] op1_e3_l_30374#1 = <tensor[2]>[r037B,r037F];
          real r038E#1 = TensorIndex<tensor[2,2],[0,0]>(op1_e3_l_20347);
          real realLit038F#4 = 0.1e1;
          real r0390#1 = RDiv(r038E,realLit038F);
          real r0391#1 = TensorIndex<tensor[2,2],[0,1]>(op1_e3_l_20347);
          real r0392#1 = RDiv(r0391,realLit038F);
          tensor[2] tensor0393#1 = <tensor[2]>[r0390,r0392];
          real r0394#1 = TensorIndex<tensor[2,2],[1,0]>(op1_e3_l_20347);
          real r0395#1 = RDiv(r0394,realLit038F);
          real r0396#1 = TensorIndex<tensor[2,2],[1,1]>(op1_e3_l_20347);
          real r0397#1 = RDiv(r0396,realLit038F);
          tensor[2] tensor0398#1 = <tensor[2]>[r0395,r0397];
          tensor[2,2] op1_e3_l_4038D#4 = <tensor[2,2]>[tensor0393,tensor0398];
          tensor[2] projParam03A7#1 = ProjectLast<tensor[2,2],[0]>(t10313);
          real op1_e3_l_503A6#4 = VDot<2>(projParam03A7,op1_e3_l_30374);
          real r03AC#1 = TensorIndex<tensor[2,2],[0,0]>(op1_e3_l_4038D);
          real r03AD#1 = RDiv(r03AC,op1_e3_l_503A6);
          real r03AE#1 = TensorIndex<tensor[2,2],[0,1]>(op1_e3_l_4038D);
          real r03AF#1 = RDiv(r03AE,op1_e3_l_503A6);
          tensor[2] tensor03B0#1 = <tensor[2]>[r03AD,r03AF];
          real r03B1#1 = TensorIndex<tensor[2,2],[1,0]>(op1_e3_l_4038D);
          real r03B2#1 = RDiv(r03B1,op1_e3_l_503A6);
          real r03B3#1 = TensorIndex<tensor[2,2],[1,1]>(op1_e3_l_4038D);
          real r03B4#1 = RDiv(r03B3,op1_e3_l_503A6);
          tensor[2] tensor03B5#1 = <tensor[2]>[r03B2,r03B4];
          tensor[2,2] _t03AB#1 = <tensor[2,2]>[tensor03B0,tensor03B5];
          Print<[tensor[2,2],string]>(_t03AB,_t0317);
          Print<[tensor[3,3],string]>(t20315,_t0317);
          real realLit03C5#9 = 0.e0;
          real r03C6#3 = TensorIndex<tensor[3,3],[0,0]>(t20315);
          real r03C7#3 = RMul(realLit03C5,r03C6);
          real r03C8#3 = TensorIndex<tensor[3,3],[0,1]>(t20315);
          real r03C9#3 = RMul(realLit03C5,r03C8);
          real r03CA#3 = TensorIndex<tensor[3,3],[0,2]>(t20315);
          real r03CB#5 = RMul(realLit03C5,r03CA);
          real r03CC#3 = RAdd(r03C7,r03C9);
          real r03CD#1 = RAdd(r03CC,r03CB);
          real r03CE#3 = TensorIndex<tensor[3,3],[1,0]>(t20315);
          real r03CF#3 = RMul(realLit03C5,r03CE);
          real r03D0#3 = TensorIndex<tensor[3,3],[1,1]>(t20315);
          real r03D1#3 = RMul(realLit03C5,r03D0);
          real r03D2#3 = TensorIndex<tensor[3,3],[1,2]>(t20315);
          real r03D3#5 = RMul(realLit03C5,r03D2);
          real r03D4#3 = RAdd(r03CF,r03D1);
          real r03D5#1 = RAdd(r03D4,r03D3);
          real r03D6#3 = TensorIndex<tensor[3,3],[2,0]>(t20315);
          real r03D7#3 = RMul(realLit03C5,r03D6);
          real r03D8#3 = TensorIndex<tensor[3,3],[2,1]>(t20315);
          real r03D9#3 = RMul(realLit03C5,r03D8);
          real r03DA#3 = TensorIndex<tensor[3,3],[2,2]>(t20315);
          real r03DB#5 = RMul(realLit03C5,r03DA);
          real r03DC#3 = RAdd(r03D7,r03D9);
          real r03DD#1 = RAdd(r03DC,r03DB);
          tensor[3] tensor03DE#3 = <tensor[3]>[r03CD,r03D5,r03DD];
          real realLit03DF#9 = -0.1e1;
          real r03E0#1 = RMul(realLit03DF,r03CA);
          real r03E1#1 = RAdd(r03CC,r03E0);
          real r03E2#1 = RMul(realLit03DF,r03D2);
          real r03E3#1 = RAdd(r03D4,r03E2);
          real r03E4#1 = RMul(realLit03DF,r03DA);
          real r03E5#1 = RAdd(r03DC,r03E4);
          tensor[3] tensor03E6#1 = <tensor[3]>[r03E1,r03E3,r03E5];
          real realLit03E7#9 = 0.1e1;
          real r03E8#1 = RMul(realLit03E7,r03C8);
          real r03E9#1 = RAdd(r03C7,r03E8);
          real r03EA#1 = RAdd(r03E9,r03CB);
          real r03EB#1 = RMul(realLit03E7,r03D0);
          real r03EC#1 = RAdd(r03CF,r03EB);
          real r03ED#1 = RAdd(r03EC,r03D3);
          real r03EE#1 = RMul(realLit03E7,r03D8);
          real r03EF#1 = RAdd(r03D7,r03EE);
          real r03F0#1 = RAdd(r03EF,r03DB);
          tensor[3] tensor03F1#1 = <tensor[3]>[r03EA,r03ED,r03F0];
          tensor[3,3] tensor03F2#1 = <tensor[3,3]>[tensor03DE,tensor03E6,tensor03F1];
          real r03F3#1 = RMul(realLit03E7,r03CA);
          real r03F4#1 = RAdd(r03CC,r03F3);
          real r03F5#1 = RMul(realLit03E7,r03D2);
          real r03F6#1 = RAdd(r03D4,r03F5);
          real r03F7#1 = RMul(realLit03E7,r03DA);
          real r03F8#1 = RAdd(r03DC,r03F7);
          tensor[3] tensor03F9#1 = <tensor[3]>[r03F4,r03F6,r03F8];
          real r03FA#1 = RMul(realLit03DF,r03C6);
          real r03FB#1 = RAdd(r03FA,r03C9);
          real r03FC#1 = RAdd(r03FB,r03CB);
          real r03FD#1 = RMul(realLit03DF,r03CE);
          real r03FE#1 = RAdd(r03FD,r03D1);
          real r03FF#1 = RAdd(r03FE,r03D3);
          real r0400#1 = RMul(realLit03DF,r03D6);
          real r0401#1 = RAdd(r0400,r03D9);
          real r0402#1 = RAdd(r0401,r03DB);
          tensor[3] tensor0403#1 = <tensor[3]>[r03FC,r03FF,r0402];
          tensor[3,3] tensor0404#1 = <tensor[3,3]>[tensor03F9,tensor03DE,tensor0403];
          real r0405#1 = RMul(realLit03DF,r03C8);
          real r0406#1 = RAdd(r03C7,r0405);
          real r0407#1 = RAdd(r0406,r03CB);
          real r0408#1 = RMul(realLit03DF,r03D0);
          real r0409#1 = RAdd(r03CF,r0408);
          real r040A#1 = RAdd(r0409,r03D3);
          real r040B#1 = RMul(realLit03DF,r03D8);
          real r040C#1 = RAdd(r03D7,r040B);
          real r040D#1 = RAdd(r040C,r03DB);
          tensor[3] tensor040E#1 = <tensor[3]>[r0407,r040A,r040D];
          real r040F#1 = RMul(realLit03E7,r03C6);
          real r0410#1 = RAdd(r040F,r03C9);
          real r0411#1 = RAdd(r0410,r03CB);
          real r0412#1 = RMul(realLit03E7,r03CE);
          real r0413#1 = RAdd(r0412,r03D1);
          real r0414#1 = RAdd(r0413,r03D3);
          real r0415#1 = RMul(realLit03E7,r03D6);
          real r0416#1 = RAdd(r0415,r03D9);
          real r0417#1 = RAdd(r0416,r03DB);
          tensor[3] tensor0418#1 = <tensor[3]>[r0411,r0414,r0417];
          tensor[3,3] tensor0419#1 = <tensor[3,3]>[tensor040E,tensor0418,tensor03DE];
          tensor[3,3,3] op1_e3_l_103C4#27 = <tensor[3,3,3]>[tensor03F2,tensor0404,tensor0419];
          real r0472#9 = TensorIndex<tensor[3,3],[0,0]>(t20315);
          real r0473#3 = TensorIndex<tensor[3,3,3],[0,0,0]>(op1_e3_l_103C4);
          real r0474#1 = RMul(r0472,r0473);
          real r0475#9 = TensorIndex<tensor[3,3],[0,1]>(t20315);
          real r0476#3 = TensorIndex<tensor[3,3,3],[1,0,0]>(op1_e3_l_103C4);
          real r0477#1 = RMul(r0475,r0476);
          real r0478#9 = TensorIndex<tensor[3,3],[0,2]>(t20315);
          real r0479#3 = TensorIndex<tensor[3,3,3],[2,0,0]>(op1_e3_l_103C4);
          real r047A#1 = RMul(r0478,r0479);
          real r047B#1 = RAdd(r0474,r0477);
          real r047C#1 = RAdd(r047B,r047A);
          real r047D#3 = TensorIndex<tensor[3,3,3],[0,0,1]>(op1_e3_l_103C4);
          real r047E#1 = RMul(r0472,r047D);
          real r047F#3 = TensorIndex<tensor[3,3,3],[1,0,1]>(op1_e3_l_103C4);
          real r0480#1 = RMul(r0475,r047F);
          real r0481#3 = TensorIndex<tensor[3,3,3],[2,0,1]>(op1_e3_l_103C4);
          real r0482#1 = RMul(r0478,r0481);
          real r0483#1 = RAdd(r047E,r0480);
          real r0484#1 = RAdd(r0483,r0482);
          real r0485#3 = TensorIndex<tensor[3,3,3],[0,0,2]>(op1_e3_l_103C4);
          real r0486#1 = RMul(r0472,r0485);
          real r0487#3 = TensorIndex<tensor[3,3,3],[1,0,2]>(op1_e3_l_103C4);
          real r0488#1 = RMul(r0475,r0487);
          real r0489#3 = TensorIndex<tensor[3,3,3],[2,0,2]>(op1_e3_l_103C4);
          real r048A#1 = RMul(r0478,r0489);
          real r048B#1 = RAdd(r0486,r0488);
          real r048C#1 = RAdd(r048B,r048A);
          tensor[3] tensor048D#1 = <tensor[3]>[r047C,r0484,r048C];
          real r048E#3 = TensorIndex<tensor[3,3,3],[0,1,0]>(op1_e3_l_103C4);
          real r048F#1 = RMul(r0472,r048E);
          real r0490#3 = TensorIndex<tensor[3,3,3],[1,1,0]>(op1_e3_l_103C4);
          real r0491#1 = RMul(r0475,r0490);
          real r0492#3 = TensorIndex<tensor[3,3,3],[2,1,0]>(op1_e3_l_103C4);
          real r0493#1 = RMul(r0478,r0492);
          real r0494#1 = RAdd(r048F,r0491);
          real r0495#1 = RAdd(r0494,r0493);
          real r0496#3 = TensorIndex<tensor[3,3,3],[0,1,1]>(op1_e3_l_103C4);
          real r0497#1 = RMul(r0472,r0496);
          real r0498#3 = TensorIndex<tensor[3,3,3],[1,1,1]>(op1_e3_l_103C4);
          real r0499#1 = RMul(r0475,r0498);
          real r049A#3 = TensorIndex<tensor[3,3,3],[2,1,1]>(op1_e3_l_103C4);
          real r049B#1 = RMul(r0478,r049A);
          real r049C#1 = RAdd(r0497,r0499);
          real r049D#1 = RAdd(r049C,r049B);
          real r049E#3 = TensorIndex<tensor[3,3,3],[0,1,2]>(op1_e3_l_103C4);
          real r049F#1 = RMul(r0472,r049E);
          real r04A0#3 = TensorIndex<tensor[3,3,3],[1,1,2]>(op1_e3_l_103C4);
          real r04A1#1 = RMul(r0475,r04A0);
          real r04A2#3 = TensorIndex<tensor[3,3,3],[2,1,2]>(op1_e3_l_103C4);
          real r04A3#1 = RMul(r0478,r04A2);
          real r04A4#1 = RAdd(r049F,r04A1);
          real r04A5#1 = RAdd(r04A4,r04A3);
          tensor[3] tensor04A6#1 = <tensor[3]>[r0495,r049D,r04A5];
          real r04A7#3 = TensorIndex<tensor[3,3,3],[0,2,0]>(op1_e3_l_103C4);
          real r04A8#1 = RMul(r0472,r04A7);
          real r04A9#3 = TensorIndex<tensor[3,3,3],[1,2,0]>(op1_e3_l_103C4);
          real r04AA#1 = RMul(r0475,r04A9);
          real r04AB#3 = TensorIndex<tensor[3,3,3],[2,2,0]>(op1_e3_l_103C4);
          real r04AC#1 = RMul(r0478,r04AB);
          real r04AD#1 = RAdd(r04A8,r04AA);
          real r04AE#1 = RAdd(r04AD,r04AC);
          real r04AF#3 = TensorIndex<tensor[3,3,3],[0,2,1]>(op1_e3_l_103C4);
          real r04B0#1 = RMul(r0472,r04AF);
          real r04B1#3 = TensorIndex<tensor[3,3,3],[1,2,1]>(op1_e3_l_103C4);
          real r04B2#1 = RMul(r0475,r04B1);
          real r04B3#3 = TensorIndex<tensor[3,3,3],[2,2,1]>(op1_e3_l_103C4);
          real r04B4#1 = RMul(r0478,r04B3);
          real r04B5#1 = RAdd(r04B0,r04B2);
          real r04B6#1 = RAdd(r04B5,r04B4);
          real r04B7#3 = TensorIndex<tensor[3,3,3],[0,2,2]>(op1_e3_l_103C4);
          real r04B8#1 = RMul(r0472,r04B7);
          real r04B9#3 = TensorIndex<tensor[3,3,3],[1,2,2]>(op1_e3_l_103C4);
          real r04BA#1 = RMul(r0475,r04B9);
          real r04BB#3 = TensorIndex<tensor[3,3,3],[2,2,2]>(op1_e3_l_103C4);
          real r04BC#1 = RMul(r0478,r04BB);
          real r04BD#1 = RAdd(r04B8,r04BA);
          real r04BE#1 = RAdd(r04BD,r04BC);
          tensor[3] tensor04BF#1 = <tensor[3]>[r04AE,r04B6,r04BE];
          tensor[3,3] tensor04C0#1 = <tensor[3,3]>[tensor048D,tensor04A6,tensor04BF];
          real r04C1#9 = TensorIndex<tensor[3,3],[1,0]>(t20315);
          real r04C2#1 = RMul(r04C1,r0473);
          real r04C3#9 = TensorIndex<tensor[3,3],[1,1]>(t20315);
          real r04C4#1 = RMul(r04C3,r0476);
          real r04C5#9 = TensorIndex<tensor[3,3],[1,2]>(t20315);
          real r04C6#1 = RMul(r04C5,r0479);
          real r04C7#1 = RAdd(r04C2,r04C4);
          real r04C8#1 = RAdd(r04C7,r04C6);
          real r04C9#1 = RMul(r04C1,r047D);
          real r04CA#1 = RMul(r04C3,r047F);
          real r04CB#1 = RMul(r04C5,r0481);
          real r04CC#1 = RAdd(r04C9,r04CA);
          real r04CD#1 = RAdd(r04CC,r04CB);
          real r04CE#1 = RMul(r04C1,r0485);
          real r04CF#1 = RMul(r04C3,r0487);
          real r04D0#1 = RMul(r04C5,r0489);
          real r04D1#1 = RAdd(r04CE,r04CF);
          real r04D2#1 = RAdd(r04D1,r04D0);
          tensor[3] tensor04D3#1 = <tensor[3]>[r04C8,r04CD,r04D2];
          real r04D4#1 = RMul(r04C1,r048E);
          real r04D5#1 = RMul(r04C3,r0490);
          real r04D6#1 = RMul(r04C5,r0492);
          real r04D7#1 = RAdd(r04D4,r04D5);
          real r04D8#1 = RAdd(r04D7,r04D6);
          real r04D9#1 = RMul(r04C1,r0496);
          real r04DA#1 = RMul(r04C3,r0498);
          real r04DB#1 = RMul(r04C5,r049A);
          real r04DC#1 = RAdd(r04D9,r04DA);
          real r04DD#1 = RAdd(r04DC,r04DB);
          real r04DE#1 = RMul(r04C1,r049E);
          real r04DF#1 = RMul(r04C3,r04A0);
          real r04E0#1 = RMul(r04C5,r04A2);
          real r04E1#1 = RAdd(r04DE,r04DF);
          real r04E2#1 = RAdd(r04E1,r04E0);
          tensor[3] tensor04E3#1 = <tensor[3]>[r04D8,r04DD,r04E2];
          real r04E4#1 = RMul(r04C1,r04A7);
          real r04E5#1 = RMul(r04C3,r04A9);
          real r04E6#1 = RMul(r04C5,r04AB);
          real r04E7#1 = RAdd(r04E4,r04E5);
          real r04E8#1 = RAdd(r04E7,r04E6);
          real r04E9#1 = RMul(r04C1,r04AF);
          real r04EA#1 = RMul(r04C3,r04B1);
          real r04EB#1 = RMul(r04C5,r04B3);
          real r04EC#1 = RAdd(r04E9,r04EA);
          real r04ED#1 = RAdd(r04EC,r04EB);
          real r04EE#1 = RMul(r04C1,r04B7);
          real r04EF#1 = RMul(r04C3,r04B9);
          real r04F0#1 = RMul(r04C5,r04BB);
          real r04F1#1 = RAdd(r04EE,r04EF);
          real r04F2#1 = RAdd(r04F1,r04F0);
          tensor[3] tensor04F3#1 = <tensor[3]>[r04E8,r04ED,r04F2];
          tensor[3,3] tensor04F4#1 = <tensor[3,3]>[tensor04D3,tensor04E3,tensor04F3];
          real r04F5#9 = TensorIndex<tensor[3,3],[2,0]>(t20315);
          real r04F6#1 = RMul(r04F5,r0473);
          real r04F7#9 = TensorIndex<tensor[3,3],[2,1]>(t20315);
          real r04F8#1 = RMul(r04F7,r0476);
          real r04F9#9 = TensorIndex<tensor[3,3],[2,2]>(t20315);
          real r04FA#1 = RMul(r04F9,r0479);
          real r04FB#1 = RAdd(r04F6,r04F8);
          real r04FC#1 = RAdd(r04FB,r04FA);
          real r04FD#1 = RMul(r04F5,r047D);
          real r04FE#1 = RMul(r04F7,r047F);
          real r04FF#1 = RMul(r04F9,r0481);
          real r0500#1 = RAdd(r04FD,r04FE);
          real r0501#1 = RAdd(r0500,r04FF);
          real r0502#1 = RMul(r04F5,r0485);
          real r0503#1 = RMul(r04F7,r0487);
          real r0504#1 = RMul(r04F9,r0489);
          real r0505#1 = RAdd(r0502,r0503);
          real r0506#1 = RAdd(r0505,r0504);
          tensor[3] tensor0507#1 = <tensor[3]>[r04FC,r0501,r0506];
          real r0508#1 = RMul(r04F5,r048E);
          real r0509#1 = RMul(r04F7,r0490);
          real r050A#1 = RMul(r04F9,r0492);
          real r050B#1 = RAdd(r0508,r0509);
          real r050C#1 = RAdd(r050B,r050A);
          real r050D#1 = RMul(r04F5,r0496);
          real r050E#1 = RMul(r04F7,r0498);
          real r050F#1 = RMul(r04F9,r049A);
          real r0510#1 = RAdd(r050D,r050E);
          real r0511#1 = RAdd(r0510,r050F);
          real r0512#1 = RMul(r04F5,r049E);
          real r0513#1 = RMul(r04F7,r04A0);
          real r0514#1 = RMul(r04F9,r04A2);
          real r0515#1 = RAdd(r0512,r0513);
          real r0516#1 = RAdd(r0515,r0514);
          tensor[3] tensor0517#1 = <tensor[3]>[r050C,r0511,r0516];
          real r0518#1 = RMul(r04F5,r04A7);
          real r0519#1 = RMul(r04F7,r04A9);
          real r051A#1 = RMul(r04F9,r04AB);
          real r051B#1 = RAdd(r0518,r0519);
          real r051C#1 = RAdd(r051B,r051A);
          real r051D#1 = RMul(r04F5,r04AF);
          real r051E#1 = RMul(r04F7,r04B1);
          real r051F#1 = RMul(r04F9,r04B3);
          real r0520#1 = RAdd(r051D,r051E);
          real r0521#1 = RAdd(r0520,r051F);
          real r0522#1 = RMul(r04F5,r04B7);
          real r0523#1 = RMul(r04F7,r04B9);
          real r0524#1 = RMul(r04F9,r04BB);
          real r0525#1 = RAdd(r0522,r0523);
          real r0526#1 = RAdd(r0525,r0524);
          tensor[3] tensor0527#1 = <tensor[3]>[r051C,r0521,r0526];
          tensor[3,3] tensor0528#1 = <tensor[3,3]>[tensor0507,tensor0517,tensor0527];
          tensor[3,3,3] op1_e3_l_20471#27 = <tensor[3,3,3]>[tensor04C0,tensor04F4,tensor0528];
          real realLit05E3#27 = 0.e0;
          real r05E4#1 = TensorIndex<tensor[3,3,3],[0,0,0]>(op1_e3_l_20471);
          real r05E5#2 = RMul(realLit05E3,r05E4);
          real r05E6#2 = TensorIndex<tensor[3,3,3],[0,0,1]>(op1_e3_l_20471);
          real r05E7#1 = RMul(realLit05E3,r05E6);
          real r05E8#2 = TensorIndex<tensor[3,3,3],[0,0,2]>(op1_e3_l_20471);
          real r05E9#2 = RMul(realLit05E3,r05E8);
          real r05EA#2 = TensorIndex<tensor[3,3,3],[1,0,0]>(op1_e3_l_20471);
          real r05EB#2 = RMul(realLit05E3,r05EA);
          real r05EC#1 = TensorIndex<tensor[3,3,3],[1,0,1]>(op1_e3_l_20471);
          real r05ED#3 = RMul(realLit05E3,r05EC);
          real realLit05EE#9 = 0.1e1;
          real r05EF#2 = TensorIndex<tensor[3,3,3],[1,0,2]>(op1_e3_l_20471);
          real r05F0#1 = RMul(realLit05EE,r05EF);
          real r05F1#2 = TensorIndex<tensor[3,3,3],[2,0,0]>(op1_e3_l_20471);
          real r05F2#2 = RMul(realLit05E3,r05F1);
          real realLit05F3#9 = -0.1e1;
          real r05F4#2 = TensorIndex<tensor[3,3,3],[2,0,1]>(op1_e3_l_20471);
          real r05F5#1 = RMul(realLit05F3,r05F4);
          real r05F6#1 = TensorIndex<tensor[3,3,3],[2,0,2]>(op1_e3_l_20471);
          real r05F7#3 = RMul(realLit05E3,r05F6);
          real r05F8#2 = RAdd(r05E5,r05E7);
          real r05F9#1 = RAdd(r05F8,r05E9);
          real r05FA#1 = RAdd(r05F9,r05EB);
          real r05FB#1 = RAdd(r05FA,r05ED);
          real r05FC#1 = RAdd(r05FB,r05F0);
          real r05FD#1 = RAdd(r05FC,r05F2);
          real r05FE#1 = RAdd(r05FD,r05F5);
          real r05FF#1 = RAdd(r05FE,r05F7);
          real r0600#1 = TensorIndex<tensor[3,3,3],[0,1,0]>(op1_e3_l_20471);
          real r0601#2 = RMul(realLit05E3,r0600);
          real r0602#2 = TensorIndex<tensor[3,3,3],[0,1,1]>(op1_e3_l_20471);
          real r0603#1 = RMul(realLit05E3,r0602);
          real r0604#2 = TensorIndex<tensor[3,3,3],[0,1,2]>(op1_e3_l_20471);
          real r0605#2 = RMul(realLit05E3,r0604);
          real r0606#2 = TensorIndex<tensor[3,3,3],[1,1,0]>(op1_e3_l_20471);
          real r0607#2 = RMul(realLit05E3,r0606);
          real r0608#1 = TensorIndex<tensor[3,3,3],[1,1,1]>(op1_e3_l_20471);
          real r0609#3 = RMul(realLit05E3,r0608);
          real r060A#2 = TensorIndex<tensor[3,3,3],[1,1,2]>(op1_e3_l_20471);
          real r060B#1 = RMul(realLit05EE,r060A);
          real r060C#2 = TensorIndex<tensor[3,3,3],[2,1,0]>(op1_e3_l_20471);
          real r060D#2 = RMul(realLit05E3,r060C);
          real r060E#2 = TensorIndex<tensor[3,3,3],[2,1,1]>(op1_e3_l_20471);
          real r060F#1 = RMul(realLit05F3,r060E);
          real r0610#1 = TensorIndex<tensor[3,3,3],[2,1,2]>(op1_e3_l_20471);
          real r0611#3 = RMul(realLit05E3,r0610);
          real r0612#2 = RAdd(r0601,r0603);
          real r0613#1 = RAdd(r0612,r0605);
          real r0614#1 = RAdd(r0613,r0607);
          real r0615#1 = RAdd(r0614,r0609);
          real r0616#1 = RAdd(r0615,r060B);
          real r0617#1 = RAdd(r0616,r060D);
          real r0618#1 = RAdd(r0617,r060F);
          real r0619#1 = RAdd(r0618,r0611);
          real r061A#1 = TensorIndex<tensor[3,3,3],[0,2,0]>(op1_e3_l_20471);
          real r061B#2 = RMul(realLit05E3,r061A);
          real r061C#2 = TensorIndex<tensor[3,3,3],[0,2,1]>(op1_e3_l_20471);
          real r061D#1 = RMul(realLit05E3,r061C);
          real r061E#2 = TensorIndex<tensor[3,3,3],[0,2,2]>(op1_e3_l_20471);
          real r061F#2 = RMul(realLit05E3,r061E);
          real r0620#2 = TensorIndex<tensor[3,3,3],[1,2,0]>(op1_e3_l_20471);
          real r0621#2 = RMul(realLit05E3,r0620);
          real r0622#1 = TensorIndex<tensor[3,3,3],[1,2,1]>(op1_e3_l_20471);
          real r0623#3 = RMul(realLit05E3,r0622);
          real r0624#2 = TensorIndex<tensor[3,3,3],[1,2,2]>(op1_e3_l_20471);
          real r0625#1 = RMul(realLit05EE,r0624);
          real r0626#2 = TensorIndex<tensor[3,3,3],[2,2,0]>(op1_e3_l_20471);
          real r0627#2 = RMul(realLit05E3,r0626);
          real r0628#2 = TensorIndex<tensor[3,3,3],[2,2,1]>(op1_e3_l_20471);
          real r0629#1 = RMul(realLit05F3,r0628);
          real r062A#1 = TensorIndex<tensor[3,3,3],[2,2,2]>(op1_e3_l_20471);
          real r062B#3 = RMul(realLit05E3,r062A);
          real r062C#2 = RAdd(r061B,r061D);
          real r062D#1 = RAdd(r062C,r061F);
          real r062E#1 = RAdd(r062D,r0621);
          real r062F#1 = RAdd(r062E,r0623);
          real r0630#1 = RAdd(r062F,r0625);
          real r0631#1 = RAdd(r0630,r0627);
          real r0632#1 = RAdd(r0631,r0629);
          real r0633#1 = RAdd(r0632,r062B);
          tensor[3] tensor0634#1 = <tensor[3]>[r05FF,r0619,r0633];
          real r0635#1 = RMul(realLit05F3,r05E8);
          real r0636#2 = RMul(realLit05E3,r05EF);
          real r0637#1 = RMul(realLit05EE,r05F1);
          real r0638#2 = RMul(realLit05E3,r05F4);
          real r0639#1 = RAdd(r05F8,r0635);
          real r063A#1 = RAdd(r0639,r05EB);
          real r063B#1 = RAdd(r063A,r05ED);
          real r063C#1 = RAdd(r063B,r0636);
          real r063D#1 = RAdd(r063C,r0637);
          real r063E#1 = RAdd(r063D,r0638);
          real r063F#1 = RAdd(r063E,r05F7);
          real r0640#1 = RMul(realLit05F3,r0604);
          real r0641#2 = RMul(realLit05E3,r060A);
          real r0642#1 = RMul(realLit05EE,r060C);
          real r0643#2 = RMul(realLit05E3,r060E);
          real r0644#1 = RAdd(r0612,r0640);
          real r0645#1 = RAdd(r0644,r0607);
          real r0646#1 = RAdd(r0645,r0609);
          real r0647#1 = RAdd(r0646,r0641);
          real r0648#1 = RAdd(r0647,r0642);
          real r0649#1 = RAdd(r0648,r0643);
          real r064A#1 = RAdd(r0649,r0611);
          real r064B#1 = RMul(realLit05F3,r061E);
          real r064C#2 = RMul(realLit05E3,r0624);
          real r064D#1 = RMul(realLit05EE,r0626);
          real r064E#2 = RMul(realLit05E3,r0628);
          real r064F#1 = RAdd(r062C,r064B);
          real r0650#1 = RAdd(r064F,r0621);
          real r0651#1 = RAdd(r0650,r0623);
          real r0652#1 = RAdd(r0651,r064C);
          real r0653#1 = RAdd(r0652,r064D);
          real r0654#1 = RAdd(r0653,r064E);
          real r0655#1 = RAdd(r0654,r062B);
          tensor[3] tensor0656#1 = <tensor[3]>[r063F,r064A,r0655];
          real r0657#1 = RMul(realLit05EE,r05E6);
          real r0658#1 = RMul(realLit05F3,r05EA);
          real r0659#1 = RAdd(r05E5,r0657);
          real r065A#1 = RAdd(r0659,r05E9);
          real r065B#1 = RAdd(r065A,r0658);
          real r065C#1 = RAdd(r065B,r05ED);
          real r065D#1 = RAdd(r065C,r0636);
          real r065E#1 = RAdd(r065D,r05F2);
          real r065F#1 = RAdd(r065E,r0638);
          real r0660#1 = RAdd(r065F,r05F7);
          real r0661#1 = RMul(realLit05EE,r0602);
          real r0662#1 = RMul(realLit05F3,r0606);
          real r0663#1 = RAdd(r0601,r0661);
          real r0664#1 = RAdd(r0663,r0605);
          real r0665#1 = RAdd(r0664,r0662);
          real r0666#1 = RAdd(r0665,r0609);
          real r0667#1 = RAdd(r0666,r0641);
          real r0668#1 = RAdd(r0667,r060D);
          real r0669#1 = RAdd(r0668,r0643);
          real r066A#1 = RAdd(r0669,r0611);
          real r066B#1 = RMul(realLit05EE,r061C);
          real r066C#1 = RMul(realLit05F3,r0620);
          real r066D#1 = RAdd(r061B,r066B);
          real r066E#1 = RAdd(r066D,r061F);
          real r066F#1 = RAdd(r066E,r066C);
          real r0670#1 = RAdd(r066F,r0623);
          real r0671#1 = RAdd(r0670,r064C);
          real r0672#1 = RAdd(r0671,r0627);
          real r0673#1 = RAdd(r0672,r064E);
          real r0674#1 = RAdd(r0673,r062B);
          tensor[3] tensor0675#1 = <tensor[3]>[r0660,r066A,r0674];
          tensor[3,3] op1_e3_l_305E2#9 = <tensor[3,3]>[tensor0634,tensor0656,tensor0675];
          real realLit070C#3 = 0.e0;
          real r070D#3 = TensorIndex<tensor[3,3],[2,0]>(t20315);
          real r070E#3 = RMul(realLit070C,r070D);
          real r070F#3 = TensorIndex<tensor[3,3],[2,1]>(t20315);
          real r0710#3 = RMul(realLit070C,r070F);
          real r0711#3 = TensorIndex<tensor[3,3],[2,2]>(t20315);
          real r0712#5 = RMul(realLit070C,r0711);
          real r0713#3 = RAdd(r070E,r0710);
          real r0714#3 = RAdd(r0713,r0712);
          real realLit0715#3 = 0.1e1;
          real r0716#1 = RMul(realLit0715,r0711);
          real r0717#1 = RAdd(r0713,r0716);
          real realLit0718#3 = -0.1e1;
          real r0719#1 = RMul(realLit0718,r070F);
          real r071A#1 = RAdd(r070E,r0719);
          real r071B#1 = RAdd(r071A,r0712);
          tensor[3] tensor071C#1 = <tensor[3]>[r0714,r0717,r071B];
          real r071D#1 = RMul(realLit0718,r0711);
          real r071E#1 = RAdd(r0713,r071D);
          real r071F#1 = RMul(realLit0715,r070D);
          real r0720#1 = RAdd(r071F,r0710);
          real r0721#1 = RAdd(r0720,r0712);
          tensor[3] tensor0722#1 = <tensor[3]>[r071E,r0714,r0721];
          real r0723#1 = RMul(realLit0715,r070F);
          real r0724#1 = RAdd(r070E,r0723);
          real r0725#1 = RAdd(r0724,r0712);
          real r0726#1 = RMul(realLit0718,r070D);
          real r0727#1 = RAdd(r0726,r0710);
          real r0728#1 = RAdd(r0727,r0712);
          tensor[3] tensor0729#1 = <tensor[3]>[r0725,r0728,r0714];
          tensor[3,3] op1_e3_l_4070B#3 = <tensor[3,3]>[tensor071C,tensor0722,tensor0729];
          tensor[3] projParam074B#3 = ProjectLast<tensor[3,3],[1]>(t20315);
          tensor[3] projParam074C#1 = ProjectLast<tensor[3,3],[0]>(op1_e3_l_4070B);
          real vdot074D#1 = VDot<3>(projParam074B,projParam074C);
          tensor[3] projParam074E#1 = ProjectLast<tensor[3,3],[1]>(op1_e3_l_4070B);
          real vdot074F#1 = VDot<3>(projParam074B,projParam074E);
          tensor[3] projParam0750#1 = ProjectLast<tensor[3,3],[2]>(op1_e3_l_4070B);
          real vdot0751#1 = VDot<3>(projParam074B,projParam0750);
          tensor[3] op1_e3_l_5074A#1 = <tensor[3]>[vdot074D,vdot074F,vdot0751];
          real r075C#1 = TensorIndex<tensor[3,3],[0,0]>(op1_e3_l_305E2);
          real realLit075D#9 = 0.2e1;
          real r075E#1 = RDiv(r075C,realLit075D);
          real r075F#1 = TensorIndex<tensor[3,3],[0,1]>(op1_e3_l_305E2);
          real r0760#1 = RDiv(r075F,realLit075D);
          real r0761#1 = TensorIndex<tensor[3,3],[0,2]>(op1_e3_l_305E2);
          real r0762#1 = RDiv(r0761,realLit075D);
          tensor[3] tensor0763#1 = <tensor[3]>[r075E,r0760,r0762];
          real r0764#1 = TensorIndex<tensor[3,3],[1,0]>(op1_e3_l_305E2);
          real r0765#1 = RDiv(r0764,realLit075D);
          real r0766#1 = TensorIndex<tensor[3,3],[1,1]>(op1_e3_l_305E2);
          real r0767#1 = RDiv(r0766,realLit075D);
          real r0768#1 = TensorIndex<tensor[3,3],[1,2]>(op1_e3_l_305E2);
          real r0769#1 = RDiv(r0768,realLit075D);
          tensor[3] tensor076A#1 = <tensor[3]>[r0765,r0767,r0769];
          real r076B#1 = TensorIndex<tensor[3,3],[2,0]>(op1_e3_l_305E2);
          real r076C#1 = RDiv(r076B,realLit075D);
          real r076D#1 = TensorIndex<tensor[3,3],[2,1]>(op1_e3_l_305E2);
          real r076E#1 = RDiv(r076D,realLit075D);
          real r076F#1 = TensorIndex<tensor[3,3],[2,2]>(op1_e3_l_305E2);
          real r0770#1 = RDiv(r076F,realLit075D);
          tensor[3] tensor0771#1 = <tensor[3]>[r076C,r076E,r0770];
          tensor[3,3] op1_e3_l_6075B#9 = <tensor[3,3]>[tensor0763,tensor076A,tensor0771];
          tensor[3] projParam078B#1 = ProjectLast<tensor[3,3],[0]>(t20315);
          real op1_e3_l_7078A#9 = VDot<3>(projParam078B,op1_e3_l_5074A);
          real r0790#1 = TensorIndex<tensor[3,3],[0,0]>(op1_e3_l_6075B);
          real r0791#1 = RDiv(r0790,op1_e3_l_7078A);
          real r0792#1 = TensorIndex<tensor[3,3],[0,1]>(op1_e3_l_6075B);
          real r0793#1 = RDiv(r0792,op1_e3_l_7078A);
          real r0794#1 = TensorIndex<tensor[3,3],[0,2]>(op1_e3_l_6075B);
          real r0795#1 = RDiv(r0794,op1_e3_l_7078A);
          tensor[3] tensor0796#1 = <tensor[3]>[r0791,r0793,r0795];
          real r0797#1 = TensorIndex<tensor[3,3],[1,0]>(op1_e3_l_6075B);
          real r0798#1 = RDiv(r0797,op1_e3_l_7078A);
          real r0799#1 = TensorIndex<tensor[3,3],[1,1]>(op1_e3_l_6075B);
          real r079A#1 = RDiv(r0799,op1_e3_l_7078A);
          real r079B#1 = TensorIndex<tensor[3,3],[1,2]>(op1_e3_l_6075B);
          real r079C#1 = RDiv(r079B,op1_e3_l_7078A);
          tensor[3] tensor079D#1 = <tensor[3]>[r0798,r079A,r079C];
          real r079E#1 = TensorIndex<tensor[3,3],[2,0]>(op1_e3_l_6075B);
          real r079F#1 = RDiv(r079E,op1_e3_l_7078A);
          real r07A0#1 = TensorIndex<tensor[3,3],[2,1]>(op1_e3_l_6075B);
          real r07A1#1 = RDiv(r07A0,op1_e3_l_7078A);
          real r07A2#1 = TensorIndex<tensor[3,3],[2,2]>(op1_e3_l_6075B);
          real r07A3#1 = RDiv(r07A2,op1_e3_l_7078A);
          tensor[3] tensor07A4#1 = <tensor[3]>[r079F,r07A1,r07A3];
          tensor[3,3] _t078F#1 = <tensor[3,3]>[tensor0796,tensor079D,tensor07A4];
          Print<[tensor[3,3],string]>(_t078F,_t0317);
          stabilize
    end update
  end dump
## initial strand creation
  COLLECTION
    ENTRY07BF:  preds = []
      int[] itter07C0#1 = globals.itter02DC;
    FOREACH07C3:  preds = [ASSIGN07C1,NEXT07C5]
      foreach (i07C2 in itter07C0) on exit goto RETURN07C6
      new dump(i07C2);
      goto FOREACH07C3
    RETURN07C6:  preds = [FOREACH07C3]
      return
#### end program ####
##### low-ir: after contraction(1) ####
## properties
  GlobalInit HasInputs HasGlobals
## globals
  input v102D7 (v1) = <default>
  input v202D8 (v2) = <default>
  input w102D9 (w1) = <default>
  input w202DA (w2) = <default>
  input w302DB (w3) = <default>
  global int[] itter02DC
## functions
## input initialization
  ENTRY02DD:  preds = []
    real _t02DE#8 = 0.1e1;
    real _t02E0#4 = 0.e0;
    tensor[2] v102E2#1 = <tensor[2]>[_t02DE,_t02E0];
    globals.v102D7 = v102E2;
    real _t02E5#1 = 0.2e1;
    tensor[2] v202E7#1 = <tensor[2]>[_t02E5,_t02DE];
    globals.v202D8 = v202E7;
    tensor[3] w102EA#1 = <tensor[3]>[_t02DE,_t02E0,_t02E0];
    globals.w102D9 = w102EA;
    tensor[3] w202ED#1 = <tensor[3]>[_t02DE,_t02DE,_t02E0];
    globals.w202DA = w202ED;
    tensor[3] w302F0#1 = <tensor[3]>[_t02DE,_t02DE,_t02DE];
    globals.w302DB = w302F0;
    return
## global-variable initialization
  ENTRY02F4:  preds = []
    int _t02F5#1 = 1;
    int[1] _t02F7#1 = <int[1]>{_t02F5};
    int[] _t02F9#1 = MkDynamic<int,1>(_t02F7);
    globals.itter02DC = _t02F9;
    return
## strand
  strand dump (int i02FD#0)
    state:
      output tensor[2,2] t1;
      output tensor[3,3] t2;
    state init
      ENTRY0300:  preds = []
        tensor[2] v10301#1 = globals.v102D7;
        tensor[2] v20303#1 = globals.v202D8;
        tensor[3] w10305#1 = globals.w102D9;
        tensor[3] w20307#1 = globals.w202DA;
        tensor[3] w30309#1 = globals.w302DB;
        tensor[2,2] t1030B#1 = <tensor[2,2]>[v10301,v20303];
        tensor[3,3] t2030D#1 = <tensor[3,3]>[w10305,w20307,w30309];
        self.t1 = t1030B;
        self.t2 = t2030D;
        return
    end state init
    method update
        ENTRY0312:  preds = []
          tensor[2,2] t10313#8 = self.t1;
          tensor[3,3] t20315#24 = self.t2;
          string _t0317#4 = "\n";
          Print<[tensor[2,2],string]>(t10313,_t0317);
          real realLit031B#4 = 0.e0;
          real r031C#2 = TensorIndex<tensor[2,2],[0,0]>(t10313);
          real r031D#1 = RMul(realLit031B,r031C);
          real realLit031E#2 = -0.1e1;
          real r031F#2 = TensorIndex<tensor[2,2],[0,1]>(t10313);
          real r0320#1 = RMul(realLit031E,r031F);
          real r0321#1 = RAdd(r031D,r0320);
          real r0322#2 = TensorIndex<tensor[2,2],[1,0]>(t10313);
          real r0323#1 = RMul(realLit031B,r0322);
          real r0324#2 = TensorIndex<tensor[2,2],[1,1]>(t10313);
          real r0325#1 = RMul(realLit031E,r0324);
          real r0326#1 = RAdd(r0323,r0325);
          real realLit0328#2 = 0.1e1;
          real r0329#1 = RMul(realLit0328,r031C);
          real r032A#1 = RMul(realLit031B,r031F);
          real r032B#1 = RAdd(r0329,r032A);
          real r032C#1 = RMul(realLit0328,r0322);
          real r032D#1 = RMul(realLit031B,r0324);
          real r032E#1 = RAdd(r032C,r032D);
          real realLit0348#4 = 0.e0;
          real r0349#2 = r0321;
          real r034A#1 = RMul(realLit0348,r0349);
          real realLit034B#2 = -0.1e1;
          real r034C#2 = r0326;
          real r034D#1 = RMul(realLit034B,r034C);
          real r034E#1 = RAdd(r034A,r034D);
          real r034F#2 = r032B;
          real r0350#1 = RMul(realLit0348,r034F);
          real r0351#2 = r032E;
          real r0352#1 = RMul(realLit034B,r0351);
          real r0353#1 = RAdd(r0350,r0352);
          real realLit0355#2 = 0.1e1;
          real r0356#1 = RMul(realLit0355,r0349);
          real r0357#1 = RMul(realLit0348,r034C);
          real r0358#1 = RAdd(r0356,r0357);
          real r0359#1 = RMul(realLit0355,r034F);
          real r035A#1 = RMul(realLit0348,r0351);
          real r035B#1 = RAdd(r0359,r035A);
          real realLit0375#2 = 0.e0;
          real r0376#2 = TensorIndex<tensor[2,2],[1,0]>(t10313);
          real r0377#1 = RMul(realLit0375,r0376);
          real realLit0378#1 = 0.1e1;
          real r0379#2 = TensorIndex<tensor[2,2],[1,1]>(t10313);
          real r037A#1 = RMul(realLit0378,r0379);
          real r037B#1 = RAdd(r0377,r037A);
          real realLit037C#1 = -0.1e1;
          real r037D#1 = RMul(realLit037C,r0376);
          real r037E#1 = RMul(realLit0375,r0379);
          real r037F#1 = RAdd(r037D,r037E);
          tensor[2] op1_e3_l_30374#1 = <tensor[2]>[r037B,r037F];
          real r038E#1 = r034E;
          real realLit038F#4 = 0.1e1;
          real r0390#1 = RDiv(r038E,realLit038F);
          real r0391#1 = r0353;
          real r0392#1 = RDiv(r0391,realLit038F);
          real r0394#1 = r0358;
          real r0395#1 = RDiv(r0394,realLit038F);
          real r0396#1 = r035B;
          real r0397#1 = RDiv(r0396,realLit038F);
          tensor[2] projParam03A7#1 = ProjectLast<tensor[2,2],[0]>(t10313);
          real op1_e3_l_503A6#4 = VDot<2>(projParam03A7,op1_e3_l_30374);
          real r03AC#1 = r0390;
          real r03AD#1 = RDiv(r03AC,op1_e3_l_503A6);
          real r03AE#1 = r0392;
          real r03AF#1 = RDiv(r03AE,op1_e3_l_503A6);
          tensor[2] tensor03B0#1 = <tensor[2]>[r03AD,r03AF];
          real r03B1#1 = r0395;
          real r03B2#1 = RDiv(r03B1,op1_e3_l_503A6);
          real r03B3#1 = r0397;
          real r03B4#1 = RDiv(r03B3,op1_e3_l_503A6);
          tensor[2] tensor03B5#1 = <tensor[2]>[r03B2,r03B4];
          tensor[2,2] _t03AB#1 = <tensor[2,2]>[tensor03B0,tensor03B5];
          Print<[tensor[2,2],string]>(_t03AB,_t0317);
          Print<[tensor[3,3],string]>(t20315,_t0317);
          real realLit03C5#9 = 0.e0;
          real r03C6#3 = TensorIndex<tensor[3,3],[0,0]>(t20315);
          real r03C7#3 = RMul(realLit03C5,r03C6);
          real r03C8#3 = TensorIndex<tensor[3,3],[0,1]>(t20315);
          real r03C9#3 = RMul(realLit03C5,r03C8);
          real r03CA#3 = TensorIndex<tensor[3,3],[0,2]>(t20315);
          real r03CB#5 = RMul(realLit03C5,r03CA);
          real r03CC#3 = RAdd(r03C7,r03C9);
          real r03CD#3 = RAdd(r03CC,r03CB);
          real r03CE#3 = TensorIndex<tensor[3,3],[1,0]>(t20315);
          real r03CF#3 = RMul(realLit03C5,r03CE);
          real r03D0#3 = TensorIndex<tensor[3,3],[1,1]>(t20315);
          real r03D1#3 = RMul(realLit03C5,r03D0);
          real r03D2#3 = TensorIndex<tensor[3,3],[1,2]>(t20315);
          real r03D3#5 = RMul(realLit03C5,r03D2);
          real r03D4#3 = RAdd(r03CF,r03D1);
          real r03D5#3 = RAdd(r03D4,r03D3);
          real r03D6#3 = TensorIndex<tensor[3,3],[2,0]>(t20315);
          real r03D7#3 = RMul(realLit03C5,r03D6);
          real r03D8#3 = TensorIndex<tensor[3,3],[2,1]>(t20315);
          real r03D9#3 = RMul(realLit03C5,r03D8);
          real r03DA#3 = TensorIndex<tensor[3,3],[2,2]>(t20315);
          real r03DB#5 = RMul(realLit03C5,r03DA);
          real r03DC#3 = RAdd(r03D7,r03D9);
          real r03DD#3 = RAdd(r03DC,r03DB);
          real realLit03DF#9 = -0.1e1;
          real r03E0#1 = RMul(realLit03DF,r03CA);
          real r03E1#1 = RAdd(r03CC,r03E0);
          real r03E2#1 = RMul(realLit03DF,r03D2);
          real r03E3#1 = RAdd(r03D4,r03E2);
          real r03E4#1 = RMul(realLit03DF,r03DA);
          real r03E5#1 = RAdd(r03DC,r03E4);
          real realLit03E7#9 = 0.1e1;
          real r03E8#1 = RMul(realLit03E7,r03C8);
          real r03E9#1 = RAdd(r03C7,r03E8);
          real r03EA#1 = RAdd(r03E9,r03CB);
          real r03EB#1 = RMul(realLit03E7,r03D0);
          real r03EC#1 = RAdd(r03CF,r03EB);
          real r03ED#1 = RAdd(r03EC,r03D3);
          real r03EE#1 = RMul(realLit03E7,r03D8);
          real r03EF#1 = RAdd(r03D7,r03EE);
          real r03F0#1 = RAdd(r03EF,r03DB);
          real r03F3#1 = RMul(realLit03E7,r03CA);
          real r03F4#1 = RAdd(r03CC,r03F3);
          real r03F5#1 = RMul(realLit03E7,r03D2);
          real r03F6#1 = RAdd(r03D4,r03F5);
          real r03F7#1 = RMul(realLit03E7,r03DA);
          real r03F8#1 = RAdd(r03DC,r03F7);
          real r03FA#1 = RMul(realLit03DF,r03C6);
          real r03FB#1 = RAdd(r03FA,r03C9);
          real r03FC#1 = RAdd(r03FB,r03CB);
          real r03FD#1 = RMul(realLit03DF,r03CE);
          real r03FE#1 = RAdd(r03FD,r03D1);
          real r03FF#1 = RAdd(r03FE,r03D3);
          real r0400#1 = RMul(realLit03DF,r03D6);
          real r0401#1 = RAdd(r0400,r03D9);
          real r0402#1 = RAdd(r0401,r03DB);
          real r0405#1 = RMul(realLit03DF,r03C8);
          real r0406#1 = RAdd(r03C7,r0405);
          real r0407#1 = RAdd(r0406,r03CB);
          real r0408#1 = RMul(realLit03DF,r03D0);
          real r0409#1 = RAdd(r03CF,r0408);
          real r040A#1 = RAdd(r0409,r03D3);
          real r040B#1 = RMul(realLit03DF,r03D8);
          real r040C#1 = RAdd(r03D7,r040B);
          real r040D#1 = RAdd(r040C,r03DB);
          real r040F#1 = RMul(realLit03E7,r03C6);
          real r0410#1 = RAdd(r040F,r03C9);
          real r0411#1 = RAdd(r0410,r03CB);
          real r0412#1 = RMul(realLit03E7,r03CE);
          real r0413#1 = RAdd(r0412,r03D1);
          real r0414#1 = RAdd(r0413,r03D3);
          real r0415#1 = RMul(realLit03E7,r03D6);
          real r0416#1 = RAdd(r0415,r03D9);
          real r0417#1 = RAdd(r0416,r03DB);
          real r0472#9 = TensorIndex<tensor[3,3],[0,0]>(t20315);
          real r0473#3 = r03CD;
          real r0474#1 = RMul(r0472,r0473);
          real r0475#9 = TensorIndex<tensor[3,3],[0,1]>(t20315);
          real r0476#3 = r03F4;
          real r0477#1 = RMul(r0475,r0476);
          real r0478#9 = TensorIndex<tensor[3,3],[0,2]>(t20315);
          real r0479#3 = r0407;
          real r047A#1 = RMul(r0478,r0479);
          real r047B#1 = RAdd(r0474,r0477);
          real r047C#1 = RAdd(r047B,r047A);
          real r047D#3 = r03D5;
          real r047E#1 = RMul(r0472,r047D);
          real r047F#3 = r03F6;
          real r0480#1 = RMul(r0475,r047F);
          real r0481#3 = r040A;
          real r0482#1 = RMul(r0478,r0481);
          real r0483#1 = RAdd(r047E,r0480);
          real r0484#1 = RAdd(r0483,r0482);
          real r0485#3 = r03DD;
          real r0486#1 = RMul(r0472,r0485);
          real r0487#3 = r03F8;
          real r0488#1 = RMul(r0475,r0487);
          real r0489#3 = r040D;
          real r048A#1 = RMul(r0478,r0489);
          real r048B#1 = RAdd(r0486,r0488);
          real r048C#1 = RAdd(r048B,r048A);
          real r048E#3 = r03E1;
          real r048F#1 = RMul(r0472,r048E);
          real r0490#3 = r03CD;
          real r0491#1 = RMul(r0475,r0490);
          real r0492#3 = r0411;
          real r0493#1 = RMul(r0478,r0492);
          real r0494#1 = RAdd(r048F,r0491);
          real r0495#1 = RAdd(r0494,r0493);
          real r0496#3 = r03E3;
          real r0497#1 = RMul(r0472,r0496);
          real r0498#3 = r03D5;
          real r0499#1 = RMul(r0475,r0498);
          real r049A#3 = r0414;
          real r049B#1 = RMul(r0478,r049A);
          real r049C#1 = RAdd(r0497,r0499);
          real r049D#1 = RAdd(r049C,r049B);
          real r049E#3 = r03E5;
          real r049F#1 = RMul(r0472,r049E);
          real r04A0#3 = r03DD;
          real r04A1#1 = RMul(r0475,r04A0);
          real r04A2#3 = r0417;
          real r04A3#1 = RMul(r0478,r04A2);
          real r04A4#1 = RAdd(r049F,r04A1);
          real r04A5#1 = RAdd(r04A4,r04A3);
          real r04A7#3 = r03EA;
          real r04A8#1 = RMul(r0472,r04A7);
          real r04A9#3 = r03FC;
          real r04AA#1 = RMul(r0475,r04A9);
          real r04AB#3 = r03CD;
          real r04AC#1 = RMul(r0478,r04AB);
          real r04AD#1 = RAdd(r04A8,r04AA);
          real r04AE#1 = RAdd(r04AD,r04AC);
          real r04AF#3 = r03ED;
          real r04B0#1 = RMul(r0472,r04AF);
          real r04B1#3 = r03FF;
          real r04B2#1 = RMul(r0475,r04B1);
          real r04B3#3 = r03D5;
          real r04B4#1 = RMul(r0478,r04B3);
          real r04B5#1 = RAdd(r04B0,r04B2);
          real r04B6#1 = RAdd(r04B5,r04B4);
          real r04B7#3 = r03F0;
          real r04B8#1 = RMul(r0472,r04B7);
          real r04B9#3 = r0402;
          real r04BA#1 = RMul(r0475,r04B9);
          real r04BB#3 = r03DD;
          real r04BC#1 = RMul(r0478,r04BB);
          real r04BD#1 = RAdd(r04B8,r04BA);
          real r04BE#1 = RAdd(r04BD,r04BC);
          real r04C1#9 = TensorIndex<tensor[3,3],[1,0]>(t20315);
          real r04C2#1 = RMul(r04C1,r0473);
          real r04C3#9 = TensorIndex<tensor[3,3],[1,1]>(t20315);
          real r04C4#1 = RMul(r04C3,r0476);
          real r04C5#9 = TensorIndex<tensor[3,3],[1,2]>(t20315);
          real r04C6#1 = RMul(r04C5,r0479);
          real r04C7#1 = RAdd(r04C2,r04C4);
          real r04C8#1 = RAdd(r04C7,r04C6);
          real r04C9#1 = RMul(r04C1,r047D);
          real r04CA#1 = RMul(r04C3,r047F);
          real r04CB#1 = RMul(r04C5,r0481);
          real r04CC#1 = RAdd(r04C9,r04CA);
          real r04CD#1 = RAdd(r04CC,r04CB);
          real r04CE#1 = RMul(r04C1,r0485);
          real r04CF#1 = RMul(r04C3,r0487);
          real r04D0#1 = RMul(r04C5,r0489);
          real r04D1#1 = RAdd(r04CE,r04CF);
          real r04D2#1 = RAdd(r04D1,r04D0);
          real r04D4#1 = RMul(r04C1,r048E);
          real r04D5#1 = RMul(r04C3,r0490);
          real r04D6#1 = RMul(r04C5,r0492);
          real r04D7#1 = RAdd(r04D4,r04D5);
          real r04D8#1 = RAdd(r04D7,r04D6);
          real r04D9#1 = RMul(r04C1,r0496);
          real r04DA#1 = RMul(r04C3,r0498);
          real r04DB#1 = RMul(r04C5,r049A);
          real r04DC#1 = RAdd(r04D9,r04DA);
          real r04DD#1 = RAdd(r04DC,r04DB);
          real r04DE#1 = RMul(r04C1,r049E);
          real r04DF#1 = RMul(r04C3,r04A0);
          real r04E0#1 = RMul(r04C5,r04A2);
          real r04E1#1 = RAdd(r04DE,r04DF);
          real r04E2#1 = RAdd(r04E1,r04E0);
          real r04E4#1 = RMul(r04C1,r04A7);
          real r04E5#1 = RMul(r04C3,r04A9);
          real r04E6#1 = RMul(r04C5,r04AB);
          real r04E7#1 = RAdd(r04E4,r04E5);
          real r04E8#1 = RAdd(r04E7,r04E6);
          real r04E9#1 = RMul(r04C1,r04AF);
          real r04EA#1 = RMul(r04C3,r04B1);
          real r04EB#1 = RMul(r04C5,r04B3);
          real r04EC#1 = RAdd(r04E9,r04EA);
          real r04ED#1 = RAdd(r04EC,r04EB);
          real r04EE#1 = RMul(r04C1,r04B7);
          real r04EF#1 = RMul(r04C3,r04B9);
          real r04F0#1 = RMul(r04C5,r04BB);
          real r04F1#1 = RAdd(r04EE,r04EF);
          real r04F2#1 = RAdd(r04F1,r04F0);
          real r04F5#9 = TensorIndex<tensor[3,3],[2,0]>(t20315);
          real r04F6#1 = RMul(r04F5,r0473);
          real r04F7#9 = TensorIndex<tensor[3,3],[2,1]>(t20315);
          real r04F8#1 = RMul(r04F7,r0476);
          real r04F9#9 = TensorIndex<tensor[3,3],[2,2]>(t20315);
          real r04FA#1 = RMul(r04F9,r0479);
          real r04FB#1 = RAdd(r04F6,r04F8);
          real r04FC#1 = RAdd(r04FB,r04FA);
          real r04FD#1 = RMul(r04F5,r047D);
          real r04FE#1 = RMul(r04F7,r047F);
          real r04FF#1 = RMul(r04F9,r0481);
          real r0500#1 = RAdd(r04FD,r04FE);
          real r0501#1 = RAdd(r0500,r04FF);
          real r0502#1 = RMul(r04F5,r0485);
          real r0503#1 = RMul(r04F7,r0487);
          real r0504#1 = RMul(r04F9,r0489);
          real r0505#1 = RAdd(r0502,r0503);
          real r0506#1 = RAdd(r0505,r0504);
          real r0508#1 = RMul(r04F5,r048E);
          real r0509#1 = RMul(r04F7,r0490);
          real r050A#1 = RMul(r04F9,r0492);
          real r050B#1 = RAdd(r0508,r0509);
          real r050C#1 = RAdd(r050B,r050A);
          real r050D#1 = RMul(r04F5,r0496);
          real r050E#1 = RMul(r04F7,r0498);
          real r050F#1 = RMul(r04F9,r049A);
          real r0510#1 = RAdd(r050D,r050E);
          real r0511#1 = RAdd(r0510,r050F);
          real r0512#1 = RMul(r04F5,r049E);
          real r0513#1 = RMul(r04F7,r04A0);
          real r0514#1 = RMul(r04F9,r04A2);
          real r0515#1 = RAdd(r0512,r0513);
          real r0516#1 = RAdd(r0515,r0514);
          real r0518#1 = RMul(r04F5,r04A7);
          real r0519#1 = RMul(r04F7,r04A9);
          real r051A#1 = RMul(r04F9,r04AB);
          real r051B#1 = RAdd(r0518,r0519);
          real r051C#1 = RAdd(r051B,r051A);
          real r051D#1 = RMul(r04F5,r04AF);
          real r051E#1 = RMul(r04F7,r04B1);
          real r051F#1 = RMul(r04F9,r04B3);
          real r0520#1 = RAdd(r051D,r051E);
          real r0521#1 = RAdd(r0520,r051F);
          real r0522#1 = RMul(r04F5,r04B7);
          real r0523#1 = RMul(r04F7,r04B9);
          real r0524#1 = RMul(r04F9,r04BB);
          real r0525#1 = RAdd(r0522,r0523);
          real r0526#1 = RAdd(r0525,r0524);
          real realLit05E3#27 = 0.e0;
          real r05E4#1 = r047C;
          real r05E5#2 = RMul(realLit05E3,r05E4);
          real r05E6#2 = r0484;
          real r05E7#1 = RMul(realLit05E3,r05E6);
          real r05E8#2 = r048C;
          real r05E9#2 = RMul(realLit05E3,r05E8);
          real r05EA#2 = r04C8;
          real r05EB#2 = RMul(realLit05E3,r05EA);
          real r05EC#1 = r04CD;
          real r05ED#3 = RMul(realLit05E3,r05EC);
          real realLit05EE#9 = 0.1e1;
          real r05EF#2 = r04D2;
          real r05F0#1 = RMul(realLit05EE,r05EF);
          real r05F1#2 = r04FC;
          real r05F2#2 = RMul(realLit05E3,r05F1);
          real realLit05F3#9 = -0.1e1;
          real r05F4#2 = r0501;
          real r05F5#1 = RMul(realLit05F3,r05F4);
          real r05F6#1 = r0506;
          real r05F7#3 = RMul(realLit05E3,r05F6);
          real r05F8#2 = RAdd(r05E5,r05E7);
          real r05F9#1 = RAdd(r05F8,r05E9);
          real r05FA#1 = RAdd(r05F9,r05EB);
          real r05FB#1 = RAdd(r05FA,r05ED);
          real r05FC#1 = RAdd(r05FB,r05F0);
          real r05FD#1 = RAdd(r05FC,r05F2);
          real r05FE#1 = RAdd(r05FD,r05F5);
          real r05FF#1 = RAdd(r05FE,r05F7);
          real r0600#1 = r0495;
          real r0601#2 = RMul(realLit05E3,r0600);
          real r0602#2 = r049D;
          real r0603#1 = RMul(realLit05E3,r0602);
          real r0604#2 = r04A5;
          real r0605#2 = RMul(realLit05E3,r0604);
          real r0606#2 = r04D8;
          real r0607#2 = RMul(realLit05E3,r0606);
          real r0608#1 = r04DD;
          real r0609#3 = RMul(realLit05E3,r0608);
          real r060A#2 = r04E2;
          real r060B#1 = RMul(realLit05EE,r060A);
          real r060C#2 = r050C;
          real r060D#2 = RMul(realLit05E3,r060C);
          real r060E#2 = r0511;
          real r060F#1 = RMul(realLit05F3,r060E);
          real r0610#1 = r0516;
          real r0611#3 = RMul(realLit05E3,r0610);
          real r0612#2 = RAdd(r0601,r0603);
          real r0613#1 = RAdd(r0612,r0605);
          real r0614#1 = RAdd(r0613,r0607);
          real r0615#1 = RAdd(r0614,r0609);
          real r0616#1 = RAdd(r0615,r060B);
          real r0617#1 = RAdd(r0616,r060D);
          real r0618#1 = RAdd(r0617,r060F);
          real r0619#1 = RAdd(r0618,r0611);
          real r061A#1 = r04AE;
          real r061B#2 = RMul(realLit05E3,r061A);
          real r061C#2 = r04B6;
          real r061D#1 = RMul(realLit05E3,r061C);
          real r061E#2 = r04BE;
          real r061F#2 = RMul(realLit05E3,r061E);
          real r0620#2 = r04E8;
          real r0621#2 = RMul(realLit05E3,r0620);
          real r0622#1 = r04ED;
          real r0623#3 = RMul(realLit05E3,r0622);
          real r0624#2 = r04F2;
          real r0625#1 = RMul(realLit05EE,r0624);
          real r0626#2 = r051C;
          real r0627#2 = RMul(realLit05E3,r0626);
          real r0628#2 = r0521;
          real r0629#1 = RMul(realLit05F3,r0628);
          real r062A#1 = r0526;
          real r062B#3 = RMul(realLit05E3,r062A);
          real r062C#2 = RAdd(r061B,r061D);
          real r062D#1 = RAdd(r062C,r061F);
          real r062E#1 = RAdd(r062D,r0621);
          real r062F#1 = RAdd(r062E,r0623);
          real r0630#1 = RAdd(r062F,r0625);
          real r0631#1 = RAdd(r0630,r0627);
          real r0632#1 = RAdd(r0631,r0629);
          real r0633#1 = RAdd(r0632,r062B);
          real r0635#1 = RMul(realLit05F3,r05E8);
          real r0636#2 = RMul(realLit05E3,r05EF);
          real r0637#1 = RMul(realLit05EE,r05F1);
          real r0638#2 = RMul(realLit05E3,r05F4);
          real r0639#1 = RAdd(r05F8,r0635);
          real r063A#1 = RAdd(r0639,r05EB);
          real r063B#1 = RAdd(r063A,r05ED);
          real r063C#1 = RAdd(r063B,r0636);
          real r063D#1 = RAdd(r063C,r0637);
          real r063E#1 = RAdd(r063D,r0638);
          real r063F#1 = RAdd(r063E,r05F7);
          real r0640#1 = RMul(realLit05F3,r0604);
          real r0641#2 = RMul(realLit05E3,r060A);
          real r0642#1 = RMul(realLit05EE,r060C);
          real r0643#2 = RMul(realLit05E3,r060E);
          real r0644#1 = RAdd(r0612,r0640);
          real r0645#1 = RAdd(r0644,r0607);
          real r0646#1 = RAdd(r0645,r0609);
          real r0647#1 = RAdd(r0646,r0641);
          real r0648#1 = RAdd(r0647,r0642);
          real r0649#1 = RAdd(r0648,r0643);
          real r064A#1 = RAdd(r0649,r0611);
          real r064B#1 = RMul(realLit05F3,r061E);
          real r064C#2 = RMul(realLit05E3,r0624);
          real r064D#1 = RMul(realLit05EE,r0626);
          real r064E#2 = RMul(realLit05E3,r0628);
          real r064F#1 = RAdd(r062C,r064B);
          real r0650#1 = RAdd(r064F,r0621);
          real r0651#1 = RAdd(r0650,r0623);
          real r0652#1 = RAdd(r0651,r064C);
          real r0653#1 = RAdd(r0652,r064D);
          real r0654#1 = RAdd(r0653,r064E);
          real r0655#1 = RAdd(r0654,r062B);
          real r0657#1 = RMul(realLit05EE,r05E6);
          real r0658#1 = RMul(realLit05F3,r05EA);
          real r0659#1 = RAdd(r05E5,r0657);
          real r065A#1 = RAdd(r0659,r05E9);
          real r065B#1 = RAdd(r065A,r0658);
          real r065C#1 = RAdd(r065B,r05ED);
          real r065D#1 = RAdd(r065C,r0636);
          real r065E#1 = RAdd(r065D,r05F2);
          real r065F#1 = RAdd(r065E,r0638);
          real r0660#1 = RAdd(r065F,r05F7);
          real r0661#1 = RMul(realLit05EE,r0602);
          real r0662#1 = RMul(realLit05F3,r0606);
          real r0663#1 = RAdd(r0601,r0661);
          real r0664#1 = RAdd(r0663,r0605);
          real r0665#1 = RAdd(r0664,r0662);
          real r0666#1 = RAdd(r0665,r0609);
          real r0667#1 = RAdd(r0666,r0641);
          real r0668#1 = RAdd(r0667,r060D);
          real r0669#1 = RAdd(r0668,r0643);
          real r066A#1 = RAdd(r0669,r0611);
          real r066B#1 = RMul(realLit05EE,r061C);
          real r066C#1 = RMul(realLit05F3,r0620);
          real r066D#1 = RAdd(r061B,r066B);
          real r066E#1 = RAdd(r066D,r061F);
          real r066F#1 = RAdd(r066E,r066C);
          real r0670#1 = RAdd(r066F,r0623);
          real r0671#1 = RAdd(r0670,r064C);
          real r0672#1 = RAdd(r0671,r0627);
          real r0673#1 = RAdd(r0672,r064E);
          real r0674#1 = RAdd(r0673,r062B);
          real realLit070C#3 = 0.e0;
          real r070D#3 = TensorIndex<tensor[3,3],[2,0]>(t20315);
          real r070E#3 = RMul(realLit070C,r070D);
          real r070F#3 = TensorIndex<tensor[3,3],[2,1]>(t20315);
          real r0710#3 = RMul(realLit070C,r070F);
          real r0711#3 = TensorIndex<tensor[3,3],[2,2]>(t20315);
          real r0712#5 = RMul(realLit070C,r0711);
          real r0713#3 = RAdd(r070E,r0710);
          real r0714#3 = RAdd(r0713,r0712);
          real realLit0715#3 = 0.1e1;
          real r0716#1 = RMul(realLit0715,r0711);
          real r0717#1 = RAdd(r0713,r0716);
          real realLit0718#3 = -0.1e1;
          real r0719#1 = RMul(realLit0718,r070F);
          real r071A#1 = RAdd(r070E,r0719);
          real r071B#1 = RAdd(r071A,r0712);
          tensor[3] tensor071C#1 = <tensor[3]>[r0714,r0717,r071B];
          real r071D#1 = RMul(realLit0718,r0711);
          real r071E#1 = RAdd(r0713,r071D);
          real r071F#1 = RMul(realLit0715,r070D);
          real r0720#1 = RAdd(r071F,r0710);
          real r0721#1 = RAdd(r0720,r0712);
          tensor[3] tensor0722#1 = <tensor[3]>[r071E,r0714,r0721];
          real r0723#1 = RMul(realLit0715,r070F);
          real r0724#1 = RAdd(r070E,r0723);
          real r0725#1 = RAdd(r0724,r0712);
          real r0726#1 = RMul(realLit0718,r070D);
          real r0727#1 = RAdd(r0726,r0710);
          real r0728#1 = RAdd(r0727,r0712);
          tensor[3] tensor0729#1 = <tensor[3]>[r0725,r0728,r0714];
          tensor[3] projParam074B#3 = ProjectLast<tensor[3,3],[1]>(t20315);
          tensor[3] projParam074C#1 = tensor071C;
          real vdot074D#1 = VDot<3>(projParam074B,projParam074C);
          tensor[3] projParam074E#1 = tensor0722;
          real vdot074F#1 = VDot<3>(projParam074B,projParam074E);
          tensor[3] projParam0750#1 = tensor0729;
          real vdot0751#1 = VDot<3>(projParam074B,projParam0750);
          tensor[3] op1_e3_l_5074A#1 = <tensor[3]>[vdot074D,vdot074F,vdot0751];
          real r075C#1 = r05FF;
          real realLit075D#9 = 0.2e1;
          real r075E#1 = RDiv(r075C,realLit075D);
          real r075F#1 = r0619;
          real r0760#1 = RDiv(r075F,realLit075D);
          real r0761#1 = r0633;
          real r0762#1 = RDiv(r0761,realLit075D);
          real r0764#1 = r063F;
          real r0765#1 = RDiv(r0764,realLit075D);
          real r0766#1 = r064A;
          real r0767#1 = RDiv(r0766,realLit075D);
          real r0768#1 = r0655;
          real r0769#1 = RDiv(r0768,realLit075D);
          real r076B#1 = r0660;
          real r076C#1 = RDiv(r076B,realLit075D);
          real r076D#1 = r066A;
          real r076E#1 = RDiv(r076D,realLit075D);
          real r076F#1 = r0674;
          real r0770#1 = RDiv(r076F,realLit075D);
          tensor[3] projParam078B#1 = ProjectLast<tensor[3,3],[0]>(t20315);
          real op1_e3_l_7078A#9 = VDot<3>(projParam078B,op1_e3_l_5074A);
          real r0790#1 = r075E;
          real r0791#1 = RDiv(r0790,op1_e3_l_7078A);
          real r0792#1 = r0760;
          real r0793#1 = RDiv(r0792,op1_e3_l_7078A);
          real r0794#1 = r0762;
          real r0795#1 = RDiv(r0794,op1_e3_l_7078A);
          tensor[3] tensor0796#1 = <tensor[3]>[r0791,r0793,r0795];
          real r0797#1 = r0765;
          real r0798#1 = RDiv(r0797,op1_e3_l_7078A);
          real r0799#1 = r0767;
          real r079A#1 = RDiv(r0799,op1_e3_l_7078A);
          real r079B#1 = r0769;
          real r079C#1 = RDiv(r079B,op1_e3_l_7078A);
          tensor[3] tensor079D#1 = <tensor[3]>[r0798,r079A,r079C];
          real r079E#1 = r076C;
          real r079F#1 = RDiv(r079E,op1_e3_l_7078A);
          real r07A0#1 = r076E;
          real r07A1#1 = RDiv(r07A0,op1_e3_l_7078A);
          real r07A2#1 = r0770;
          real r07A3#1 = RDiv(r07A2,op1_e3_l_7078A);
          tensor[3] tensor07A4#1 = <tensor[3]>[r079F,r07A1,r07A3];
          tensor[3,3] _t078F#1 = <tensor[3,3]>[tensor0796,tensor079D,tensor07A4];
          Print<[tensor[3,3],string]>(_t078F,_t0317);
          stabilize
    end update
  end dump
## initial strand creation
  COLLECTION
    ENTRY07BF:  preds = []
      int[] itter07C0#1 = globals.itter02DC;
    FOREACH07C3:  preds = [ASSIGN07C1,NEXT07C5]
      foreach (i07C2 in itter07C0) on exit goto RETURN07C6
      new dump(i07C2);
      goto FOREACH07C3
    RETURN07C6:  preds = [FOREACH07C3]
      return
#### end program ####
##### low-ir: after value numbering ####
## properties
  GlobalInit HasInputs HasGlobals
## globals
  input v102D7 (v1) = <default>
  input v202D8 (v2) = <default>
  input w102D9 (w1) = <default>
  input w202DA (w2) = <default>
  input w302DB (w3) = <default>
  global int[] itter02DC
## functions
## input initialization
  ENTRY02DD:  preds = []
    real _t02DE#8 = 0.1e1;
    real _t02E0#4 = 0.e0;
    tensor[2] v102E2#1 = <tensor[2]>[_t02DE,_t02E0];
    globals.v102D7 = v102E2;
    real _t02E5#1 = 0.2e1;
    tensor[2] v202E7#1 = <tensor[2]>[_t02E5,_t02DE];
    globals.v202D8 = v202E7;
    tensor[3] w102EA#1 = <tensor[3]>[_t02DE,_t02E0,_t02E0];
    globals.w102D9 = w102EA;
    tensor[3] w202ED#1 = <tensor[3]>[_t02DE,_t02DE,_t02E0];
    globals.w202DA = w202ED;
    tensor[3] w302F0#1 = <tensor[3]>[_t02DE,_t02DE,_t02DE];
    globals.w302DB = w302F0;
    return
## global-variable initialization
  ENTRY02F4:  preds = []
    int _t02F5#1 = 1;
    int[1] _t02F7#1 = <int[1]>{_t02F5};
    int[] _t02F9#1 = MkDynamic<int,1>(_t02F7);
    globals.itter02DC = _t02F9;
    return
## strand
  strand dump (int i02FD#0)
    state:
      output tensor[2,2] t1;
      output tensor[3,3] t2;
    state init
      ENTRY0300:  preds = []
        tensor[2] v10301#1 = globals.v102D7;
        tensor[2] v20303#1 = globals.v202D8;
        tensor[3] w10305#1 = globals.w102D9;
        tensor[3] w20307#1 = globals.w202DA;
        tensor[3] w30309#1 = globals.w302DB;
        tensor[2,2] t1030B#1 = <tensor[2,2]>[v10301,v20303];
        tensor[3,3] t2030D#1 = <tensor[3,3]>[w10305,w20307,w30309];
        self.t1 = t1030B;
        self.t2 = t2030D;
        return
    end state init
    method update
        ENTRY0312:  preds = []
          tensor[2,2] t10313#6 = self.t1;
          tensor[3,3] t20315#12 = self.t2;
          string _t0317#4 = "\n";
          Print<[tensor[2,2],string]>(t10313,_t0317);
          real realLit031B#44 = 0.e0;
          real r031C#2 = TensorIndex<tensor[2,2],[0,0]>(t10313);
          real r031D#1 = RMul(realLit031B,r031C);
          real realLit031E#23 = -0.1e1;
          real r031F#2 = TensorIndex<tensor[2,2],[0,1]>(t10313);
          real r0320#1 = RMul(realLit031E,r031F);
          real r0321#2 = RAdd(r031D,r0320);
          real r0322#3 = TensorIndex<tensor[2,2],[1,0]>(t10313);
          real r0323#2 = RMul(realLit031B,r0322);
          real r0324#3 = TensorIndex<tensor[2,2],[1,1]>(t10313);
          real r0325#1 = RMul(realLit031E,r0324);
          real r0326#2 = RAdd(r0323,r0325);
          real realLit0328#27 = 0.1e1;
          real r0329#1 = RMul(realLit0328,r031C);
          real r032A#1 = RMul(realLit031B,r031F);
          real r032B#2 = RAdd(r0329,r032A);
          real r032C#1 = RMul(realLit0328,r0322);
          real r032D#2 = RMul(realLit031B,r0324);
          real r032E#2 = RAdd(r032C,r032D);
          real r034A#1 = RMul(realLit031B,r0321);
          real r034D#1 = RMul(realLit031E,r0326);
          real r034E#1 = RAdd(r034A,r034D);
          real r0350#1 = RMul(realLit031B,r032B);
          real r0352#1 = RMul(realLit031E,r032E);
          real r0353#1 = RAdd(r0350,r0352);
          real r0356#1 = RMul(realLit0328,r0321);
          real r0357#1 = RMul(realLit031B,r0326);
          real r0358#1 = RAdd(r0356,r0357);
          real r0359#1 = RMul(realLit0328,r032B);
          real r035A#1 = RMul(realLit031B,r032E);
          real r035B#1 = RAdd(r0359,r035A);
          real r037A#1 = RMul(realLit0328,r0324);
          real r037B#1 = RAdd(r0323,r037A);
          real r037D#1 = RMul(realLit031E,r0322);
          real r037F#1 = RAdd(r037D,r032D);
          tensor[2] op1_e3_l_30374#1 = <tensor[2]>[r037B,r037F];
          real r0390#1 = RDiv(r034E,realLit0328);
          real r0392#1 = RDiv(r0353,realLit0328);
          real r0395#1 = RDiv(r0358,realLit0328);
          real r0397#1 = RDiv(r035B,realLit0328);
          tensor[2] projParam03A7#1 = ProjectLast<tensor[2,2],[0]>(t10313);
          real op1_e3_l_503A6#4 = VDot<2>(projParam03A7,op1_e3_l_30374);
          real r03AD#1 = RDiv(r0390,op1_e3_l_503A6);
          real r03AF#1 = RDiv(r0392,op1_e3_l_503A6);
          tensor[2] tensor03B0#1 = <tensor[2]>[r03AD,r03AF];
          real r03B2#1 = RDiv(r0395,op1_e3_l_503A6);
          real r03B4#1 = RDiv(r0397,op1_e3_l_503A6);
          tensor[2] tensor03B5#1 = <tensor[2]>[r03B2,r03B4];
          tensor[2,2] _t03AB#1 = <tensor[2,2]>[tensor03B0,tensor03B5];
          Print<[tensor[2,2],string]>(_t03AB,_t0317);
          Print<[tensor[3,3],string]>(t20315,_t0317);
          real r03C6#12 = TensorIndex<tensor[3,3],[0,0]>(t20315);
          real r03C7#3 = RMul(realLit031B,r03C6);
          real r03C8#12 = TensorIndex<tensor[3,3],[0,1]>(t20315);
          real r03C9#3 = RMul(realLit031B,r03C8);
          real r03CA#12 = TensorIndex<tensor[3,3],[0,2]>(t20315);
          real r03CB#5 = RMul(realLit031B,r03CA);
          real r03CC#3 = RAdd(r03C7,r03C9);
          real r03CD#9 = RAdd(r03CC,r03CB);
          real r03CE#12 = TensorIndex<tensor[3,3],[1,0]>(t20315);
          real r03CF#3 = RMul(realLit031B,r03CE);
          real r03D0#12 = TensorIndex<tensor[3,3],[1,1]>(t20315);
          real r03D1#3 = RMul(realLit031B,r03D0);
          real r03D2#12 = TensorIndex<tensor[3,3],[1,2]>(t20315);
          real r03D3#5 = RMul(realLit031B,r03D2);
          real r03D4#3 = RAdd(r03CF,r03D1);
          real r03D5#9 = RAdd(r03D4,r03D3);
          real r03D6#12 = TensorIndex<tensor[3,3],[2,0]>(t20315);
          real r03D7#3 = RMul(realLit031B,r03D6);
          real r03D8#12 = TensorIndex<tensor[3,3],[2,1]>(t20315);
          real r03D9#3 = RMul(realLit031B,r03D8);
          real r03DA#12 = TensorIndex<tensor[3,3],[2,2]>(t20315);
          real r03DB#5 = RMul(realLit031B,r03DA);
          real r03DC#3 = RAdd(r03D7,r03D9);
          real r03DD#12 = RAdd(r03DC,r03DB);
          real r03E0#1 = RMul(realLit031E,r03CA);
          real r03E1#3 = RAdd(r03CC,r03E0);
          real r03E2#1 = RMul(realLit031E,r03D2);
          real r03E3#3 = RAdd(r03D4,r03E2);
          real r03E4#1 = RMul(realLit031E,r03DA);
          real r03E5#4 = RAdd(r03DC,r03E4);
          real r03E8#1 = RMul(realLit0328,r03C8);
          real r03E9#1 = RAdd(r03C7,r03E8);
          real r03EA#3 = RAdd(r03E9,r03CB);
          real r03EB#1 = RMul(realLit0328,r03D0);
          real r03EC#1 = RAdd(r03CF,r03EB);
          real r03ED#3 = RAdd(r03EC,r03D3);
          real r03EE#1 = RMul(realLit0328,r03D8);
          real r03EF#1 = RAdd(r03D7,r03EE);
          real r03F0#4 = RAdd(r03EF,r03DB);
          real r03F3#1 = RMul(realLit0328,r03CA);
          real r03F4#3 = RAdd(r03CC,r03F3);
          real r03F5#1 = RMul(realLit0328,r03D2);
          real r03F6#3 = RAdd(r03D4,r03F5);
          real r03F7#1 = RMul(realLit0328,r03DA);
          real r03F8#4 = RAdd(r03DC,r03F7);
          real r03FA#1 = RMul(realLit031E,r03C6);
          real r03FB#1 = RAdd(r03FA,r03C9);
          real r03FC#3 = RAdd(r03FB,r03CB);
          real r03FD#1 = RMul(realLit031E,r03CE);
          real r03FE#1 = RAdd(r03FD,r03D1);
          real r03FF#3 = RAdd(r03FE,r03D3);
          real r0400#1 = RMul(realLit031E,r03D6);
          real r0401#1 = RAdd(r0400,r03D9);
          real r0402#4 = RAdd(r0401,r03DB);
          real r0405#1 = RMul(realLit031E,r03C8);
          real r0406#1 = RAdd(r03C7,r0405);
          real r0407#3 = RAdd(r0406,r03CB);
          real r0408#1 = RMul(realLit031E,r03D0);
          real r0409#1 = RAdd(r03CF,r0408);
          real r040A#3 = RAdd(r0409,r03D3);
          real r040B#1 = RMul(realLit031E,r03D8);
          real r040C#1 = RAdd(r03D7,r040B);
          real r040D#4 = RAdd(r040C,r03DB);
          real r040F#1 = RMul(realLit0328,r03C6);
          real r0410#1 = RAdd(r040F,r03C9);
          real r0411#3 = RAdd(r0410,r03CB);
          real r0412#1 = RMul(realLit0328,r03CE);
          real r0413#1 = RAdd(r0412,r03D1);
          real r0414#3 = RAdd(r0413,r03D3);
          real r0415#1 = RMul(realLit0328,r03D6);
          real r0416#1 = RAdd(r0415,r03D9);
          real r0417#4 = RAdd(r0416,r03DB);
          real r0474#1 = RMul(r03C6,r03CD);
          real r0477#1 = RMul(r03C8,r03F4);
          real r047A#1 = RMul(r03CA,r0407);
          real r047B#1 = RAdd(r0474,r0477);
          real r047C#1 = RAdd(r047B,r047A);
          real r047E#1 = RMul(r03C6,r03D5);
          real r0480#1 = RMul(r03C8,r03F6);
          real r0482#1 = RMul(r03CA,r040A);
          real r0483#1 = RAdd(r047E,r0480);
          real r0484#2 = RAdd(r0483,r0482);
          real r0486#1 = RMul(r03C6,r03DD);
          real r0488#1 = RMul(r03C8,r03F8);
          real r048A#1 = RMul(r03CA,r040D);
          real r048B#1 = RAdd(r0486,r0488);
          real r048C#2 = RAdd(r048B,r048A);
          real r048F#1 = RMul(r03C6,r03E1);
          real r0491#1 = RMul(r03C8,r03CD);
          real r0493#1 = RMul(r03CA,r0411);
          real r0494#1 = RAdd(r048F,r0491);
          real r0495#1 = RAdd(r0494,r0493);
          real r0497#1 = RMul(r03C6,r03E3);
          real r0499#1 = RMul(r03C8,r03D5);
          real r049B#1 = RMul(r03CA,r0414);
          real r049C#1 = RAdd(r0497,r0499);
          real r049D#2 = RAdd(r049C,r049B);
          real r049F#1 = RMul(r03C6,r03E5);
          real r04A1#1 = RMul(r03C8,r03DD);
          real r04A3#1 = RMul(r03CA,r0417);
          real r04A4#1 = RAdd(r049F,r04A1);
          real r04A5#2 = RAdd(r04A4,r04A3);
          real r04A8#1 = RMul(r03C6,r03EA);
          real r04AA#1 = RMul(r03C8,r03FC);
          real r04AC#1 = RMul(r03CA,r03CD);
          real r04AD#1 = RAdd(r04A8,r04AA);
          real r04AE#1 = RAdd(r04AD,r04AC);
          real r04B0#1 = RMul(r03C6,r03ED);
          real r04B2#1 = RMul(r03C8,r03FF);
          real r04B4#1 = RMul(r03CA,r03D5);
          real r04B5#1 = RAdd(r04B0,r04B2);
          real r04B6#2 = RAdd(r04B5,r04B4);
          real r04B8#1 = RMul(r03C6,r03F0);
          real r04BA#1 = RMul(r03C8,r0402);
          real r04BC#1 = RMul(r03CA,r03DD);
          real r04BD#1 = RAdd(r04B8,r04BA);
          real r04BE#2 = RAdd(r04BD,r04BC);
          real r04C2#1 = RMul(r03CE,r03CD);
          real r04C4#1 = RMul(r03D0,r03F4);
          real r04C6#1 = RMul(r03D2,r0407);
          real r04C7#1 = RAdd(r04C2,r04C4);
          real r04C8#2 = RAdd(r04C7,r04C6);
          real r04C9#1 = RMul(r03CE,r03D5);
          real r04CA#1 = RMul(r03D0,r03F6);
          real r04CB#1 = RMul(r03D2,r040A);
          real r04CC#1 = RAdd(r04C9,r04CA);
          real r04CD#1 = RAdd(r04CC,r04CB);
          real r04CE#1 = RMul(r03CE,r03DD);
          real r04CF#1 = RMul(r03D0,r03F8);
          real r04D0#1 = RMul(r03D2,r040D);
          real r04D1#1 = RAdd(r04CE,r04CF);
          real r04D2#2 = RAdd(r04D1,r04D0);
          real r04D4#1 = RMul(r03CE,r03E1);
          real r04D5#1 = RMul(r03D0,r03CD);
          real r04D6#1 = RMul(r03D2,r0411);
          real r04D7#1 = RAdd(r04D4,r04D5);
          real r04D8#2 = RAdd(r04D7,r04D6);
          real r04D9#1 = RMul(r03CE,r03E3);
          real r04DA#1 = RMul(r03D0,r03D5);
          real r04DB#1 = RMul(r03D2,r0414);
          real r04DC#1 = RAdd(r04D9,r04DA);
          real r04DD#1 = RAdd(r04DC,r04DB);
          real r04DE#1 = RMul(r03CE,r03E5);
          real r04DF#1 = RMul(r03D0,r03DD);
          real r04E0#1 = RMul(r03D2,r0417);
          real r04E1#1 = RAdd(r04DE,r04DF);
          real r04E2#2 = RAdd(r04E1,r04E0);
          real r04E4#1 = RMul(r03CE,r03EA);
          real r04E5#1 = RMul(r03D0,r03FC);
          real r04E6#1 = RMul(r03D2,r03CD);
          real r04E7#1 = RAdd(r04E4,r04E5);
          real r04E8#2 = RAdd(r04E7,r04E6);
          real r04E9#1 = RMul(r03CE,r03ED);
          real r04EA#1 = RMul(r03D0,r03FF);
          real r04EB#1 = RMul(r03D2,r03D5);
          real r04EC#1 = RAdd(r04E9,r04EA);
          real r04ED#1 = RAdd(r04EC,r04EB);
          real r04EE#1 = RMul(r03CE,r03F0);
          real r04EF#1 = RMul(r03D0,r0402);
          real r04F0#1 = RMul(r03D2,r03DD);
          real r04F1#1 = RAdd(r04EE,r04EF);
          real r04F2#2 = RAdd(r04F1,r04F0);
          real r04F6#1 = RMul(r03D6,r03CD);
          real r04F8#1 = RMul(r03D8,r03F4);
          real r04FA#1 = RMul(r03DA,r0407);
          real r04FB#1 = RAdd(r04F6,r04F8);
          real r04FC#2 = RAdd(r04FB,r04FA);
          real r04FD#1 = RMul(r03D6,r03D5);
          real r04FE#1 = RMul(r03D8,r03F6);
          real r04FF#1 = RMul(r03DA,r040A);
          real r0500#1 = RAdd(r04FD,r04FE);
          real r0501#2 = RAdd(r0500,r04FF);
          real r0502#1 = RMul(r03D6,r03DD);
          real r0503#1 = RMul(r03D8,r03F8);
          real r0504#1 = RMul(r03DA,r040D);
          real r0505#1 = RAdd(r0502,r0503);
          real r0506#1 = RAdd(r0505,r0504);
          real r0508#1 = RMul(r03D6,r03E1);
          real r0509#1 = RMul(r03D8,r03CD);
          real r050A#1 = RMul(r03DA,r0411);
          real r050B#1 = RAdd(r0508,r0509);
          real r050C#2 = RAdd(r050B,r050A);
          real r050D#1 = RMul(r03D6,r03E3);
          real r050E#1 = RMul(r03D8,r03D5);
          real r050F#1 = RMul(r03DA,r0414);
          real r0510#1 = RAdd(r050D,r050E);
          real r0511#2 = RAdd(r0510,r050F);
          real r0512#1 = RMul(r03D6,r03E5);
          real r0513#1 = RMul(r03D8,r03DD);
          real r0514#1 = RMul(r03DA,r0417);
          real r0515#1 = RAdd(r0512,r0513);
          real r0516#1 = RAdd(r0515,r0514);
          real r0518#1 = RMul(r03D6,r03EA);
          real r0519#1 = RMul(r03D8,r03FC);
          real r051A#1 = RMul(r03DA,r03CD);
          real r051B#1 = RAdd(r0518,r0519);
          real r051C#2 = RAdd(r051B,r051A);
          real r051D#1 = RMul(r03D6,r03ED);
          real r051E#1 = RMul(r03D8,r03FF);
          real r051F#1 = RMul(r03DA,r03D5);
          real r0520#1 = RAdd(r051D,r051E);
          real r0521#2 = RAdd(r0520,r051F);
          real r0522#1 = RMul(r03D6,r03F0);
          real r0523#1 = RMul(r03D8,r0402);
          real r0524#1 = RMul(r03DA,r03DD);
          real r0525#1 = RAdd(r0522,r0523);
          real r0526#1 = RAdd(r0525,r0524);
          real r05E5#2 = RMul(realLit031B,r047C);
          real r05E7#1 = RMul(realLit031B,r0484);
          real r05E9#2 = RMul(realLit031B,r048C);
          real r05EB#2 = RMul(realLit031B,r04C8);
          real r05ED#3 = RMul(realLit031B,r04CD);
          real r05F0#1 = RMul(realLit0328,r04D2);
          real r05F2#2 = RMul(realLit031B,r04FC);
          real r05F5#1 = RMul(realLit031E,r0501);
          real r05F7#3 = RMul(realLit031B,r0506);
          real r05F8#2 = RAdd(r05E5,r05E7);
          real r05F9#1 = RAdd(r05F8,r05E9);
          real r05FA#1 = RAdd(r05F9,r05EB);
          real r05FB#1 = RAdd(r05FA,r05ED);
          real r05FC#1 = RAdd(r05FB,r05F0);
          real r05FD#1 = RAdd(r05FC,r05F2);
          real r05FE#1 = RAdd(r05FD,r05F5);
          real r05FF#1 = RAdd(r05FE,r05F7);
          real r0601#2 = RMul(realLit031B,r0495);
          real r0603#1 = RMul(realLit031B,r049D);
          real r0605#2 = RMul(realLit031B,r04A5);
          real r0607#2 = RMul(realLit031B,r04D8);
          real r0609#3 = RMul(realLit031B,r04DD);
          real r060B#1 = RMul(realLit0328,r04E2);
          real r060D#2 = RMul(realLit031B,r050C);
          real r060F#1 = RMul(realLit031E,r0511);
          real r0611#3 = RMul(realLit031B,r0516);
          real r0612#2 = RAdd(r0601,r0603);
          real r0613#1 = RAdd(r0612,r0605);
          real r0614#1 = RAdd(r0613,r0607);
          real r0615#1 = RAdd(r0614,r0609);
          real r0616#1 = RAdd(r0615,r060B);
          real r0617#1 = RAdd(r0616,r060D);
          real r0618#1 = RAdd(r0617,r060F);
          real r0619#1 = RAdd(r0618,r0611);
          real r061B#2 = RMul(realLit031B,r04AE);
          real r061D#1 = RMul(realLit031B,r04B6);
          real r061F#2 = RMul(realLit031B,r04BE);
          real r0621#2 = RMul(realLit031B,r04E8);
          real r0623#3 = RMul(realLit031B,r04ED);
          real r0625#1 = RMul(realLit0328,r04F2);
          real r0627#2 = RMul(realLit031B,r051C);
          real r0629#1 = RMul(realLit031E,r0521);
          real r062B#3 = RMul(realLit031B,r0526);
          real r062C#2 = RAdd(r061B,r061D);
          real r062D#1 = RAdd(r062C,r061F);
          real r062E#1 = RAdd(r062D,r0621);
          real r062F#1 = RAdd(r062E,r0623);
          real r0630#1 = RAdd(r062F,r0625);
          real r0631#1 = RAdd(r0630,r0627);
          real r0632#1 = RAdd(r0631,r0629);
          real r0633#1 = RAdd(r0632,r062B);
          real r0635#1 = RMul(realLit031E,r048C);
          real r0636#2 = RMul(realLit031B,r04D2);
          real r0637#1 = RMul(realLit0328,r04FC);
          real r0638#2 = RMul(realLit031B,r0501);
          real r0639#1 = RAdd(r05F8,r0635);
          real r063A#1 = RAdd(r0639,r05EB);
          real r063B#1 = RAdd(r063A,r05ED);
          real r063C#1 = RAdd(r063B,r0636);
          real r063D#1 = RAdd(r063C,r0637);
          real r063E#1 = RAdd(r063D,r0638);
          real r063F#1 = RAdd(r063E,r05F7);
          real r0640#1 = RMul(realLit031E,r04A5);
          real r0641#2 = RMul(realLit031B,r04E2);
          real r0642#1 = RMul(realLit0328,r050C);
          real r0643#2 = RMul(realLit031B,r0511);
          real r0644#1 = RAdd(r0612,r0640);
          real r0645#1 = RAdd(r0644,r0607);
          real r0646#1 = RAdd(r0645,r0609);
          real r0647#1 = RAdd(r0646,r0641);
          real r0648#1 = RAdd(r0647,r0642);
          real r0649#1 = RAdd(r0648,r0643);
          real r064A#1 = RAdd(r0649,r0611);
          real r064B#1 = RMul(realLit031E,r04BE);
          real r064C#2 = RMul(realLit031B,r04F2);
          real r064D#1 = RMul(realLit0328,r051C);
          real r064E#2 = RMul(realLit031B,r0521);
          real r064F#1 = RAdd(r062C,r064B);
          real r0650#1 = RAdd(r064F,r0621);
          real r0651#1 = RAdd(r0650,r0623);
          real r0652#1 = RAdd(r0651,r064C);
          real r0653#1 = RAdd(r0652,r064D);
          real r0654#1 = RAdd(r0653,r064E);
          real r0655#1 = RAdd(r0654,r062B);
          real r0657#1 = RMul(realLit0328,r0484);
          real r0658#1 = RMul(realLit031E,r04C8);
          real r0659#1 = RAdd(r05E5,r0657);
          real r065A#1 = RAdd(r0659,r05E9);
          real r065B#1 = RAdd(r065A,r0658);
          real r065C#1 = RAdd(r065B,r05ED);
          real r065D#1 = RAdd(r065C,r0636);
          real r065E#1 = RAdd(r065D,r05F2);
          real r065F#1 = RAdd(r065E,r0638);
          real r0660#1 = RAdd(r065F,r05F7);
          real r0661#1 = RMul(realLit0328,r049D);
          real r0662#1 = RMul(realLit031E,r04D8);
          real r0663#1 = RAdd(r0601,r0661);
          real r0664#1 = RAdd(r0663,r0605);
          real r0665#1 = RAdd(r0664,r0662);
          real r0666#1 = RAdd(r0665,r0609);
          real r0667#1 = RAdd(r0666,r0641);
          real r0668#1 = RAdd(r0667,r060D);
          real r0669#1 = RAdd(r0668,r0643);
          real r066A#1 = RAdd(r0669,r0611);
          real r066B#1 = RMul(realLit0328,r04B6);
          real r066C#1 = RMul(realLit031E,r04E8);
          real r066D#1 = RAdd(r061B,r066B);
          real r066E#1 = RAdd(r066D,r061F);
          real r066F#1 = RAdd(r066E,r066C);
          real r0670#1 = RAdd(r066F,r0623);
          real r0671#1 = RAdd(r0670,r064C);
          real r0672#1 = RAdd(r0671,r0627);
          real r0673#1 = RAdd(r0672,r064E);
          real r0674#1 = RAdd(r0673,r062B);
          tensor[3] tensor071C#1 = <tensor[3]>[r03DD,r03F8,r040D];
          tensor[3] tensor0722#1 = <tensor[3]>[r03E5,r03DD,r0417];
          tensor[3] tensor0729#1 = <tensor[3]>[r03F0,r0402,r03DD];
          tensor[3] projParam074B#3 = ProjectLast<tensor[3,3],[1]>(t20315);
          real vdot074D#1 = VDot<3>(projParam074B,tensor071C);
          real vdot074F#1 = VDot<3>(projParam074B,tensor0722);
          real vdot0751#1 = VDot<3>(projParam074B,tensor0729);
          tensor[3] op1_e3_l_5074A#1 = <tensor[3]>[vdot074D,vdot074F,vdot0751];
          real realLit075D#9 = 0.2e1;
          real r075E#1 = RDiv(r05FF,realLit075D);
          real r0760#1 = RDiv(r0619,realLit075D);
          real r0762#1 = RDiv(r0633,realLit075D);
          real r0765#1 = RDiv(r063F,realLit075D);
          real r0767#1 = RDiv(r064A,realLit075D);
          real r0769#1 = RDiv(r0655,realLit075D);
          real r076C#1 = RDiv(r0660,realLit075D);
          real r076E#1 = RDiv(r066A,realLit075D);
          real r0770#1 = RDiv(r0674,realLit075D);
          tensor[3] projParam078B#1 = ProjectLast<tensor[3,3],[0]>(t20315);
          real op1_e3_l_7078A#9 = VDot<3>(projParam078B,op1_e3_l_5074A);
          real r0791#1 = RDiv(r075E,op1_e3_l_7078A);
          real r0793#1 = RDiv(r0760,op1_e3_l_7078A);
          real r0795#1 = RDiv(r0762,op1_e3_l_7078A);
          tensor[3] tensor0796#1 = <tensor[3]>[r0791,r0793,r0795];
          real r0798#1 = RDiv(r0765,op1_e3_l_7078A);
          real r079A#1 = RDiv(r0767,op1_e3_l_7078A);
          real r079C#1 = RDiv(r0769,op1_e3_l_7078A);
          tensor[3] tensor079D#1 = <tensor[3]>[r0798,r079A,r079C];
          real r079F#1 = RDiv(r076C,op1_e3_l_7078A);
          real r07A1#1 = RDiv(r076E,op1_e3_l_7078A);
          real r07A3#1 = RDiv(r0770,op1_e3_l_7078A);
          tensor[3] tensor07A4#1 = <tensor[3]>[r079F,r07A1,r07A3];
          tensor[3,3] _t078F#1 = <tensor[3,3]>[tensor0796,tensor079D,tensor07A4];
          Print<[tensor[3,3],string]>(_t078F,_t0317);
          stabilize
    end update
  end dump
## initial strand creation
  COLLECTION
    ENTRY07BF:  preds = []
      int[] itter07C0#1 = globals.itter02DC;
    FOREACH07C3:  preds = [ASSIGN07C1,NEXT07C5]
      foreach (i07C2 in itter07C0) on exit goto RETURN07C6
      new dump(i07C2);
      goto FOREACH07C3
    RETURN07C6:  preds = [FOREACH07C3]
      return
#### end program ####
##### low-ir: after contraction(2) ####
## properties
  GlobalInit HasInputs HasGlobals
## globals
  input v102D7 (v1) = <default>
  input v202D8 (v2) = <default>
  input w102D9 (w1) = <default>
  input w202DA (w2) = <default>
  input w302DB (w3) = <default>
  global int[] itter02DC
## functions
## input initialization
  ENTRY02DD:  preds = []
    real _t02DE#8 = 0.1e1;
    real _t02E0#4 = 0.e0;
    tensor[2] v102E2#1 = <tensor[2]>[_t02DE,_t02E0];
    globals.v102D7 = v102E2;
    real _t02E5#1 = 0.2e1;
    tensor[2] v202E7#1 = <tensor[2]>[_t02E5,_t02DE];
    globals.v202D8 = v202E7;
    tensor[3] w102EA#1 = <tensor[3]>[_t02DE,_t02E0,_t02E0];
    globals.w102D9 = w102EA;
    tensor[3] w202ED#1 = <tensor[3]>[_t02DE,_t02DE,_t02E0];
    globals.w202DA = w202ED;
    tensor[3] w302F0#1 = <tensor[3]>[_t02DE,_t02DE,_t02DE];
    globals.w302DB = w302F0;
    return
## global-variable initialization
  ENTRY02F4:  preds = []
    int _t02F5#1 = 1;
    int[1] _t02F7#1 = <int[1]>{_t02F5};
    int[] _t02F9#1 = MkDynamic<int,1>(_t02F7);
    globals.itter02DC = _t02F9;
    return
## strand
  strand dump (int i02FD#0)
    state:
      output tensor[2,2] t1;
      output tensor[3,3] t2;
    state init
      ENTRY0300:  preds = []
        tensor[2] v10301#1 = globals.v102D7;
        tensor[2] v20303#1 = globals.v202D8;
        tensor[3] w10305#1 = globals.w102D9;
        tensor[3] w20307#1 = globals.w202DA;
        tensor[3] w30309#1 = globals.w302DB;
        tensor[2,2] t1030B#1 = <tensor[2,2]>[v10301,v20303];
        tensor[3,3] t2030D#1 = <tensor[3,3]>[w10305,w20307,w30309];
        self.t1 = t1030B;
        self.t2 = t2030D;
        return
    end state init
    method update
        ENTRY0312:  preds = []
          tensor[2,2] t10313#6 = self.t1;
          tensor[3,3] t20315#12 = self.t2;
          string _t0317#4 = "\n";
          Print<[tensor[2,2],string]>(t10313,_t0317);
          real realLit031B#44 = 0.e0;
          real r031C#2 = TensorIndex<tensor[2,2],[0,0]>(t10313);
          real r031D#1 = RMul(realLit031B,r031C);
          real realLit031E#23 = -0.1e1;
          real r031F#2 = TensorIndex<tensor[2,2],[0,1]>(t10313);
          real r0320#1 = RMul(realLit031E,r031F);
          real r0321#2 = RAdd(r031D,r0320);
          real r0322#3 = TensorIndex<tensor[2,2],[1,0]>(t10313);
          real r0323#2 = RMul(realLit031B,r0322);
          real r0324#3 = TensorIndex<tensor[2,2],[1,1]>(t10313);
          real r0325#1 = RMul(realLit031E,r0324);
          real r0326#2 = RAdd(r0323,r0325);
          real realLit0328#27 = 0.1e1;
          real r0329#1 = RMul(realLit0328,r031C);
          real r032A#1 = RMul(realLit031B,r031F);
          real r032B#2 = RAdd(r0329,r032A);
          real r032C#1 = RMul(realLit0328,r0322);
          real r032D#2 = RMul(realLit031B,r0324);
          real r032E#2 = RAdd(r032C,r032D);
          real r034A#1 = RMul(realLit031B,r0321);
          real r034D#1 = RMul(realLit031E,r0326);
          real r034E#1 = RAdd(r034A,r034D);
          real r0350#1 = RMul(realLit031B,r032B);
          real r0352#1 = RMul(realLit031E,r032E);
          real r0353#1 = RAdd(r0350,r0352);
          real r0356#1 = RMul(realLit0328,r0321);
          real r0357#1 = RMul(realLit031B,r0326);
          real r0358#1 = RAdd(r0356,r0357);
          real r0359#1 = RMul(realLit0328,r032B);
          real r035A#1 = RMul(realLit031B,r032E);
          real r035B#1 = RAdd(r0359,r035A);
          real r037A#1 = RMul(realLit0328,r0324);
          real r037B#1 = RAdd(r0323,r037A);
          real r037D#1 = RMul(realLit031E,r0322);
          real r037F#1 = RAdd(r037D,r032D);
          tensor[2] op1_e3_l_30374#1 = <tensor[2]>[r037B,r037F];
          real r0390#1 = RDiv(r034E,realLit0328);
          real r0392#1 = RDiv(r0353,realLit0328);
          real r0395#1 = RDiv(r0358,realLit0328);
          real r0397#1 = RDiv(r035B,realLit0328);
          tensor[2] projParam03A7#1 = ProjectLast<tensor[2,2],[0]>(t10313);
          real op1_e3_l_503A6#4 = VDot<2>(projParam03A7,op1_e3_l_30374);
          real r03AD#1 = RDiv(r0390,op1_e3_l_503A6);
          real r03AF#1 = RDiv(r0392,op1_e3_l_503A6);
          tensor[2] tensor03B0#1 = <tensor[2]>[r03AD,r03AF];
          real r03B2#1 = RDiv(r0395,op1_e3_l_503A6);
          real r03B4#1 = RDiv(r0397,op1_e3_l_503A6);
          tensor[2] tensor03B5#1 = <tensor[2]>[r03B2,r03B4];
          tensor[2,2] _t03AB#1 = <tensor[2,2]>[tensor03B0,tensor03B5];
          Print<[tensor[2,2],string]>(_t03AB,_t0317);
          Print<[tensor[3,3],string]>(t20315,_t0317);
          real r03C6#12 = TensorIndex<tensor[3,3],[0,0]>(t20315);
          real r03C7#3 = RMul(realLit031B,r03C6);
          real r03C8#12 = TensorIndex<tensor[3,3],[0,1]>(t20315);
          real r03C9#3 = RMul(realLit031B,r03C8);
          real r03CA#12 = TensorIndex<tensor[3,3],[0,2]>(t20315);
          real r03CB#5 = RMul(realLit031B,r03CA);
          real r03CC#3 = RAdd(r03C7,r03C9);
          real r03CD#9 = RAdd(r03CC,r03CB);
          real r03CE#12 = TensorIndex<tensor[3,3],[1,0]>(t20315);
          real r03CF#3 = RMul(realLit031B,r03CE);
          real r03D0#12 = TensorIndex<tensor[3,3],[1,1]>(t20315);
          real r03D1#3 = RMul(realLit031B,r03D0);
          real r03D2#12 = TensorIndex<tensor[3,3],[1,2]>(t20315);
          real r03D3#5 = RMul(realLit031B,r03D2);
          real r03D4#3 = RAdd(r03CF,r03D1);
          real r03D5#9 = RAdd(r03D4,r03D3);
          real r03D6#12 = TensorIndex<tensor[3,3],[2,0]>(t20315);
          real r03D7#3 = RMul(realLit031B,r03D6);
          real r03D8#12 = TensorIndex<tensor[3,3],[2,1]>(t20315);
          real r03D9#3 = RMul(realLit031B,r03D8);
          real r03DA#12 = TensorIndex<tensor[3,3],[2,2]>(t20315);
          real r03DB#5 = RMul(realLit031B,r03DA);
          real r03DC#3 = RAdd(r03D7,r03D9);
          real r03DD#12 = RAdd(r03DC,r03DB);
          real r03E0#1 = RMul(realLit031E,r03CA);
          real r03E1#3 = RAdd(r03CC,r03E0);
          real r03E2#1 = RMul(realLit031E,r03D2);
          real r03E3#3 = RAdd(r03D4,r03E2);
          real r03E4#1 = RMul(realLit031E,r03DA);
          real r03E5#4 = RAdd(r03DC,r03E4);
          real r03E8#1 = RMul(realLit0328,r03C8);
          real r03E9#1 = RAdd(r03C7,r03E8);
          real r03EA#3 = RAdd(r03E9,r03CB);
          real r03EB#1 = RMul(realLit0328,r03D0);
          real r03EC#1 = RAdd(r03CF,r03EB);
          real r03ED#3 = RAdd(r03EC,r03D3);
          real r03EE#1 = RMul(realLit0328,r03D8);
          real r03EF#1 = RAdd(r03D7,r03EE);
          real r03F0#4 = RAdd(r03EF,r03DB);
          real r03F3#1 = RMul(realLit0328,r03CA);
          real r03F4#3 = RAdd(r03CC,r03F3);
          real r03F5#1 = RMul(realLit0328,r03D2);
          real r03F6#3 = RAdd(r03D4,r03F5);
          real r03F7#1 = RMul(realLit0328,r03DA);
          real r03F8#4 = RAdd(r03DC,r03F7);
          real r03FA#1 = RMul(realLit031E,r03C6);
          real r03FB#1 = RAdd(r03FA,r03C9);
          real r03FC#3 = RAdd(r03FB,r03CB);
          real r03FD#1 = RMul(realLit031E,r03CE);
          real r03FE#1 = RAdd(r03FD,r03D1);
          real r03FF#3 = RAdd(r03FE,r03D3);
          real r0400#1 = RMul(realLit031E,r03D6);
          real r0401#1 = RAdd(r0400,r03D9);
          real r0402#4 = RAdd(r0401,r03DB);
          real r0405#1 = RMul(realLit031E,r03C8);
          real r0406#1 = RAdd(r03C7,r0405);
          real r0407#3 = RAdd(r0406,r03CB);
          real r0408#1 = RMul(realLit031E,r03D0);
          real r0409#1 = RAdd(r03CF,r0408);
          real r040A#3 = RAdd(r0409,r03D3);
          real r040B#1 = RMul(realLit031E,r03D8);
          real r040C#1 = RAdd(r03D7,r040B);
          real r040D#4 = RAdd(r040C,r03DB);
          real r040F#1 = RMul(realLit0328,r03C6);
          real r0410#1 = RAdd(r040F,r03C9);
          real r0411#3 = RAdd(r0410,r03CB);
          real r0412#1 = RMul(realLit0328,r03CE);
          real r0413#1 = RAdd(r0412,r03D1);
          real r0414#3 = RAdd(r0413,r03D3);
          real r0415#1 = RMul(realLit0328,r03D6);
          real r0416#1 = RAdd(r0415,r03D9);
          real r0417#4 = RAdd(r0416,r03DB);
          real r0474#1 = RMul(r03C6,r03CD);
          real r0477#1 = RMul(r03C8,r03F4);
          real r047A#1 = RMul(r03CA,r0407);
          real r047B#1 = RAdd(r0474,r0477);
          real r047C#1 = RAdd(r047B,r047A);
          real r047E#1 = RMul(r03C6,r03D5);
          real r0480#1 = RMul(r03C8,r03F6);
          real r0482#1 = RMul(r03CA,r040A);
          real r0483#1 = RAdd(r047E,r0480);
          real r0484#2 = RAdd(r0483,r0482);
          real r0486#1 = RMul(r03C6,r03DD);
          real r0488#1 = RMul(r03C8,r03F8);
          real r048A#1 = RMul(r03CA,r040D);
          real r048B#1 = RAdd(r0486,r0488);
          real r048C#2 = RAdd(r048B,r048A);
          real r048F#1 = RMul(r03C6,r03E1);
          real r0491#1 = RMul(r03C8,r03CD);
          real r0493#1 = RMul(r03CA,r0411);
          real r0494#1 = RAdd(r048F,r0491);
          real r0495#1 = RAdd(r0494,r0493);
          real r0497#1 = RMul(r03C6,r03E3);
          real r0499#1 = RMul(r03C8,r03D5);
          real r049B#1 = RMul(r03CA,r0414);
          real r049C#1 = RAdd(r0497,r0499);
          real r049D#2 = RAdd(r049C,r049B);
          real r049F#1 = RMul(r03C6,r03E5);
          real r04A1#1 = RMul(r03C8,r03DD);
          real r04A3#1 = RMul(r03CA,r0417);
          real r04A4#1 = RAdd(r049F,r04A1);
          real r04A5#2 = RAdd(r04A4,r04A3);
          real r04A8#1 = RMul(r03C6,r03EA);
          real r04AA#1 = RMul(r03C8,r03FC);
          real r04AC#1 = RMul(r03CA,r03CD);
          real r04AD#1 = RAdd(r04A8,r04AA);
          real r04AE#1 = RAdd(r04AD,r04AC);
          real r04B0#1 = RMul(r03C6,r03ED);
          real r04B2#1 = RMul(r03C8,r03FF);
          real r04B4#1 = RMul(r03CA,r03D5);
          real r04B5#1 = RAdd(r04B0,r04B2);
          real r04B6#2 = RAdd(r04B5,r04B4);
          real r04B8#1 = RMul(r03C6,r03F0);
          real r04BA#1 = RMul(r03C8,r0402);
          real r04BC#1 = RMul(r03CA,r03DD);
          real r04BD#1 = RAdd(r04B8,r04BA);
          real r04BE#2 = RAdd(r04BD,r04BC);
          real r04C2#1 = RMul(r03CE,r03CD);
          real r04C4#1 = RMul(r03D0,r03F4);
          real r04C6#1 = RMul(r03D2,r0407);
          real r04C7#1 = RAdd(r04C2,r04C4);
          real r04C8#2 = RAdd(r04C7,r04C6);
          real r04C9#1 = RMul(r03CE,r03D5);
          real r04CA#1 = RMul(r03D0,r03F6);
          real r04CB#1 = RMul(r03D2,r040A);
          real r04CC#1 = RAdd(r04C9,r04CA);
          real r04CD#1 = RAdd(r04CC,r04CB);
          real r04CE#1 = RMul(r03CE,r03DD);
          real r04CF#1 = RMul(r03D0,r03F8);
          real r04D0#1 = RMul(r03D2,r040D);
          real r04D1#1 = RAdd(r04CE,r04CF);
          real r04D2#2 = RAdd(r04D1,r04D0);
          real r04D4#1 = RMul(r03CE,r03E1);
          real r04D5#1 = RMul(r03D0,r03CD);
          real r04D6#1 = RMul(r03D2,r0411);
          real r04D7#1 = RAdd(r04D4,r04D5);
          real r04D8#2 = RAdd(r04D7,r04D6);
          real r04D9#1 = RMul(r03CE,r03E3);
          real r04DA#1 = RMul(r03D0,r03D5);
          real r04DB#1 = RMul(r03D2,r0414);
          real r04DC#1 = RAdd(r04D9,r04DA);
          real r04DD#1 = RAdd(r04DC,r04DB);
          real r04DE#1 = RMul(r03CE,r03E5);
          real r04DF#1 = RMul(r03D0,r03DD);
          real r04E0#1 = RMul(r03D2,r0417);
          real r04E1#1 = RAdd(r04DE,r04DF);
          real r04E2#2 = RAdd(r04E1,r04E0);
          real r04E4#1 = RMul(r03CE,r03EA);
          real r04E5#1 = RMul(r03D0,r03FC);
          real r04E6#1 = RMul(r03D2,r03CD);
          real r04E7#1 = RAdd(r04E4,r04E5);
          real r04E8#2 = RAdd(r04E7,r04E6);
          real r04E9#1 = RMul(r03CE,r03ED);
          real r04EA#1 = RMul(r03D0,r03FF);
          real r04EB#1 = RMul(r03D2,r03D5);
          real r04EC#1 = RAdd(r04E9,r04EA);
          real r04ED#1 = RAdd(r04EC,r04EB);
          real r04EE#1 = RMul(r03CE,r03F0);
          real r04EF#1 = RMul(r03D0,r0402);
          real r04F0#1 = RMul(r03D2,r03DD);
          real r04F1#1 = RAdd(r04EE,r04EF);
          real r04F2#2 = RAdd(r04F1,r04F0);
          real r04F6#1 = RMul(r03D6,r03CD);
          real r04F8#1 = RMul(r03D8,r03F4);
          real r04FA#1 = RMul(r03DA,r0407);
          real r04FB#1 = RAdd(r04F6,r04F8);
          real r04FC#2 = RAdd(r04FB,r04FA);
          real r04FD#1 = RMul(r03D6,r03D5);
          real r04FE#1 = RMul(r03D8,r03F6);
          real r04FF#1 = RMul(r03DA,r040A);
          real r0500#1 = RAdd(r04FD,r04FE);
          real r0501#2 = RAdd(r0500,r04FF);
          real r0502#1 = RMul(r03D6,r03DD);
          real r0503#1 = RMul(r03D8,r03F8);
          real r0504#1 = RMul(r03DA,r040D);
          real r0505#1 = RAdd(r0502,r0503);
          real r0506#1 = RAdd(r0505,r0504);
          real r0508#1 = RMul(r03D6,r03E1);
          real r0509#1 = RMul(r03D8,r03CD);
          real r050A#1 = RMul(r03DA,r0411);
          real r050B#1 = RAdd(r0508,r0509);
          real r050C#2 = RAdd(r050B,r050A);
          real r050D#1 = RMul(r03D6,r03E3);
          real r050E#1 = RMul(r03D8,r03D5);
          real r050F#1 = RMul(r03DA,r0414);
          real r0510#1 = RAdd(r050D,r050E);
          real r0511#2 = RAdd(r0510,r050F);
          real r0512#1 = RMul(r03D6,r03E5);
          real r0513#1 = RMul(r03D8,r03DD);
          real r0514#1 = RMul(r03DA,r0417);
          real r0515#1 = RAdd(r0512,r0513);
          real r0516#1 = RAdd(r0515,r0514);
          real r0518#1 = RMul(r03D6,r03EA);
          real r0519#1 = RMul(r03D8,r03FC);
          real r051A#1 = RMul(r03DA,r03CD);
          real r051B#1 = RAdd(r0518,r0519);
          real r051C#2 = RAdd(r051B,r051A);
          real r051D#1 = RMul(r03D6,r03ED);
          real r051E#1 = RMul(r03D8,r03FF);
          real r051F#1 = RMul(r03DA,r03D5);
          real r0520#1 = RAdd(r051D,r051E);
          real r0521#2 = RAdd(r0520,r051F);
          real r0522#1 = RMul(r03D6,r03F0);
          real r0523#1 = RMul(r03D8,r0402);
          real r0524#1 = RMul(r03DA,r03DD);
          real r0525#1 = RAdd(r0522,r0523);
          real r0526#1 = RAdd(r0525,r0524);
          real r05E5#2 = RMul(realLit031B,r047C);
          real r05E7#1 = RMul(realLit031B,r0484);
          real r05E9#2 = RMul(realLit031B,r048C);
          real r05EB#2 = RMul(realLit031B,r04C8);
          real r05ED#3 = RMul(realLit031B,r04CD);
          real r05F0#1 = RMul(realLit0328,r04D2);
          real r05F2#2 = RMul(realLit031B,r04FC);
          real r05F5#1 = RMul(realLit031E,r0501);
          real r05F7#3 = RMul(realLit031B,r0506);
          real r05F8#2 = RAdd(r05E5,r05E7);
          real r05F9#1 = RAdd(r05F8,r05E9);
          real r05FA#1 = RAdd(r05F9,r05EB);
          real r05FB#1 = RAdd(r05FA,r05ED);
          real r05FC#1 = RAdd(r05FB,r05F0);
          real r05FD#1 = RAdd(r05FC,r05F2);
          real r05FE#1 = RAdd(r05FD,r05F5);
          real r05FF#1 = RAdd(r05FE,r05F7);
          real r0601#2 = RMul(realLit031B,r0495);
          real r0603#1 = RMul(realLit031B,r049D);
          real r0605#2 = RMul(realLit031B,r04A5);
          real r0607#2 = RMul(realLit031B,r04D8);
          real r0609#3 = RMul(realLit031B,r04DD);
          real r060B#1 = RMul(realLit0328,r04E2);
          real r060D#2 = RMul(realLit031B,r050C);
          real r060F#1 = RMul(realLit031E,r0511);
          real r0611#3 = RMul(realLit031B,r0516);
          real r0612#2 = RAdd(r0601,r0603);
          real r0613#1 = RAdd(r0612,r0605);
          real r0614#1 = RAdd(r0613,r0607);
          real r0615#1 = RAdd(r0614,r0609);
          real r0616#1 = RAdd(r0615,r060B);
          real r0617#1 = RAdd(r0616,r060D);
          real r0618#1 = RAdd(r0617,r060F);
          real r0619#1 = RAdd(r0618,r0611);
          real r061B#2 = RMul(realLit031B,r04AE);
          real r061D#1 = RMul(realLit031B,r04B6);
          real r061F#2 = RMul(realLit031B,r04BE);
          real r0621#2 = RMul(realLit031B,r04E8);
          real r0623#3 = RMul(realLit031B,r04ED);
          real r0625#1 = RMul(realLit0328,r04F2);
          real r0627#2 = RMul(realLit031B,r051C);
          real r0629#1 = RMul(realLit031E,r0521);
          real r062B#3 = RMul(realLit031B,r0526);
          real r062C#2 = RAdd(r061B,r061D);
          real r062D#1 = RAdd(r062C,r061F);
          real r062E#1 = RAdd(r062D,r0621);
          real r062F#1 = RAdd(r062E,r0623);
          real r0630#1 = RAdd(r062F,r0625);
          real r0631#1 = RAdd(r0630,r0627);
          real r0632#1 = RAdd(r0631,r0629);
          real r0633#1 = RAdd(r0632,r062B);
          real r0635#1 = RMul(realLit031E,r048C);
          real r0636#2 = RMul(realLit031B,r04D2);
          real r0637#1 = RMul(realLit0328,r04FC);
          real r0638#2 = RMul(realLit031B,r0501);
          real r0639#1 = RAdd(r05F8,r0635);
          real r063A#1 = RAdd(r0639,r05EB);
          real r063B#1 = RAdd(r063A,r05ED);
          real r063C#1 = RAdd(r063B,r0636);
          real r063D#1 = RAdd(r063C,r0637);
          real r063E#1 = RAdd(r063D,r0638);
          real r063F#1 = RAdd(r063E,r05F7);
          real r0640#1 = RMul(realLit031E,r04A5);
          real r0641#2 = RMul(realLit031B,r04E2);
          real r0642#1 = RMul(realLit0328,r050C);
          real r0643#2 = RMul(realLit031B,r0511);
          real r0644#1 = RAdd(r0612,r0640);
          real r0645#1 = RAdd(r0644,r0607);
          real r0646#1 = RAdd(r0645,r0609);
          real r0647#1 = RAdd(r0646,r0641);
          real r0648#1 = RAdd(r0647,r0642);
          real r0649#1 = RAdd(r0648,r0643);
          real r064A#1 = RAdd(r0649,r0611);
          real r064B#1 = RMul(realLit031E,r04BE);
          real r064C#2 = RMul(realLit031B,r04F2);
          real r064D#1 = RMul(realLit0328,r051C);
          real r064E#2 = RMul(realLit031B,r0521);
          real r064F#1 = RAdd(r062C,r064B);
          real r0650#1 = RAdd(r064F,r0621);
          real r0651#1 = RAdd(r0650,r0623);
          real r0652#1 = RAdd(r0651,r064C);
          real r0653#1 = RAdd(r0652,r064D);
          real r0654#1 = RAdd(r0653,r064E);
          real r0655#1 = RAdd(r0654,r062B);
          real r0657#1 = RMul(realLit0328,r0484);
          real r0658#1 = RMul(realLit031E,r04C8);
          real r0659#1 = RAdd(r05E5,r0657);
          real r065A#1 = RAdd(r0659,r05E9);
          real r065B#1 = RAdd(r065A,r0658);
          real r065C#1 = RAdd(r065B,r05ED);
          real r065D#1 = RAdd(r065C,r0636);
          real r065E#1 = RAdd(r065D,r05F2);
          real r065F#1 = RAdd(r065E,r0638);
          real r0660#1 = RAdd(r065F,r05F7);
          real r0661#1 = RMul(realLit0328,r049D);
          real r0662#1 = RMul(realLit031E,r04D8);
          real r0663#1 = RAdd(r0601,r0661);
          real r0664#1 = RAdd(r0663,r0605);
          real r0665#1 = RAdd(r0664,r0662);
          real r0666#1 = RAdd(r0665,r0609);
          real r0667#1 = RAdd(r0666,r0641);
          real r0668#1 = RAdd(r0667,r060D);
          real r0669#1 = RAdd(r0668,r0643);
          real r066A#1 = RAdd(r0669,r0611);
          real r066B#1 = RMul(realLit0328,r04B6);
          real r066C#1 = RMul(realLit031E,r04E8);
          real r066D#1 = RAdd(r061B,r066B);
          real r066E#1 = RAdd(r066D,r061F);
          real r066F#1 = RAdd(r066E,r066C);
          real r0670#1 = RAdd(r066F,r0623);
          real r0671#1 = RAdd(r0670,r064C);
          real r0672#1 = RAdd(r0671,r0627);
          real r0673#1 = RAdd(r0672,r064E);
          real r0674#1 = RAdd(r0673,r062B);
          tensor[3] tensor071C#1 = <tensor[3]>[r03DD,r03F8,r040D];
          tensor[3] tensor0722#1 = <tensor[3]>[r03E5,r03DD,r0417];
          tensor[3] tensor0729#1 = <tensor[3]>[r03F0,r0402,r03DD];
          tensor[3] projParam074B#3 = ProjectLast<tensor[3,3],[1]>(t20315);
          real vdot074D#1 = VDot<3>(projParam074B,tensor071C);
          real vdot074F#1 = VDot<3>(projParam074B,tensor0722);
          real vdot0751#1 = VDot<3>(projParam074B,tensor0729);
          tensor[3] op1_e3_l_5074A#1 = <tensor[3]>[vdot074D,vdot074F,vdot0751];
          real realLit075D#9 = 0.2e1;
          real r075E#1 = RDiv(r05FF,realLit075D);
          real r0760#1 = RDiv(r0619,realLit075D);
          real r0762#1 = RDiv(r0633,realLit075D);
          real r0765#1 = RDiv(r063F,realLit075D);
          real r0767#1 = RDiv(r064A,realLit075D);
          real r0769#1 = RDiv(r0655,realLit075D);
          real r076C#1 = RDiv(r0660,realLit075D);
          real r076E#1 = RDiv(r066A,realLit075D);
          real r0770#1 = RDiv(r0674,realLit075D);
          tensor[3] projParam078B#1 = ProjectLast<tensor[3,3],[0]>(t20315);
          real op1_e3_l_7078A#9 = VDot<3>(projParam078B,op1_e3_l_5074A);
          real r0791#1 = RDiv(r075E,op1_e3_l_7078A);
          real r0793#1 = RDiv(r0760,op1_e3_l_7078A);
          real r0795#1 = RDiv(r0762,op1_e3_l_7078A);
          tensor[3] tensor0796#1 = <tensor[3]>[r0791,r0793,r0795];
          real r0798#1 = RDiv(r0765,op1_e3_l_7078A);
          real r079A#1 = RDiv(r0767,op1_e3_l_7078A);
          real r079C#1 = RDiv(r0769,op1_e3_l_7078A);
          tensor[3] tensor079D#1 = <tensor[3]>[r0798,r079A,r079C];
          real r079F#1 = RDiv(r076C,op1_e3_l_7078A);
          real r07A1#1 = RDiv(r076E,op1_e3_l_7078A);
          real r07A3#1 = RDiv(r0770,op1_e3_l_7078A);
          tensor[3] tensor07A4#1 = <tensor[3]>[r079F,r07A1,r07A3];
          tensor[3,3] _t078F#1 = <tensor[3,3]>[tensor0796,tensor079D,tensor07A4];
          Print<[tensor[3,3],string]>(_t078F,_t0317);
          stabilize
    end update
  end dump
## initial strand creation
  COLLECTION
    ENTRY07BF:  preds = []
      int[] itter07C0#1 = globals.itter02DC;
    FOREACH07C3:  preds = [ASSIGN07C1,NEXT07C5]
      foreach (i07C2 in itter07C0) on exit goto RETURN07C6
      new dump(i07C2);
      goto FOREACH07C3
    RETURN07C6:  preds = [FOREACH07C3]
      return
#### end program ####
##### low-ir: after flatten ####
## properties
  GlobalInit HasInputs HasGlobals
## globals
  input v102D7 (v1) = <default>
  input v202D8 (v2) = <default>
  input w102D9 (w1) = <default>
  input w202DA (w2) = <default>
  input w302DB (w3) = <default>
  global int[] itter02DC
## functions
## input initialization
  ENTRY02DD:  preds = []
    real _t02DE#8 = 0.1e1;
    real _t02E0#4 = 0.e0;
    tensor[2] v102E2#1 = <tensor[2]>[_t02DE,_t02E0];
    globals.v102D7 = v102E2;
    real _t02E5#1 = 0.2e1;
    tensor[2] v202E7#1 = <tensor[2]>[_t02E5,_t02DE];
    globals.v202D8 = v202E7;
    tensor[3] w102EA#1 = <tensor[3]>[_t02DE,_t02E0,_t02E0];
    globals.w102D9 = w102EA;
    tensor[3] w202ED#1 = <tensor[3]>[_t02DE,_t02DE,_t02E0];
    globals.w202DA = w202ED;
    tensor[3] w302F0#1 = <tensor[3]>[_t02DE,_t02DE,_t02DE];
    globals.w302DB = w302F0;
    return
## global-variable initialization
  ENTRY02F4:  preds = []
    int _t02F5#1 = 1;
    int[1] _t02F7#1 = <int[1]>{_t02F5};
    int[] _t02F9#1 = MkDynamic<int,1>(_t02F7);
    globals.itter02DC = _t02F9;
    return
## strand
  strand dump (int i02FD#0)
    state:
      output tensor[2,2] t1;
      output tensor[3,3] t2;
    state init
      ENTRY0300:  preds = []
        tensor[2] v10301#2 = globals.v102D7;
        tensor[2] v20303#2 = globals.v202D8;
        tensor[3] w10305#3 = globals.w102D9;
        tensor[3] w20307#3 = globals.w202DA;
        tensor[3] w30309#3 = globals.w302DB;
        real t08F8#1 = VIndex<2,0>(v10301);
        real t08F9#1 = VIndex<2,1>(v10301);
        real t08FA#1 = VIndex<2,0>(v20303);
        real t08FB#1 = VIndex<2,1>(v20303);
        tensor[2,2] t1030B#1 = <tensor[2,2]>[t08F8,t08F9,t08FA,t08FB];
        real t08E5#1 = VIndex<3,0>(w10305);
        real t08E6#1 = VIndex<3,1>(w10305);
        real t08E7#1 = VIndex<3,2>(w10305);
        real t08E8#1 = VIndex<3,0>(w20307);
        real t08E9#1 = VIndex<3,1>(w20307);
        real t08EA#1 = VIndex<3,2>(w20307);
        real t08EB#1 = VIndex<3,0>(w30309);
        real t08EC#1 = VIndex<3,1>(w30309);
        real t08ED#1 = VIndex<3,2>(w30309);
        tensor[3,3] t2030D#1 = <tensor[3,3]>[t08E5,t08E6,t08E7,t08E8,t08E9,t08EA,t08EB,t08EC,t08ED];
        self.t1 = t1030B;
        self.t2 = t2030D;
        return
    end state init
    method update
        ENTRY0312:  preds = []
          tensor[2,2] t10313#6 = self.t1;
          tensor[3,3] t20315#12 = self.t2;
          string _t0317#4 = "\n";
          Print<[tensor[2,2],string]>(t10313,_t0317);
          real realLit031B#44 = 0.e0;
          real r031C#2 = TensorIndex<tensor[2,2],[0,0]>(t10313);
          real r031D#1 = RMul(realLit031B,r031C);
          real realLit031E#23 = -0.1e1;
          real r031F#2 = TensorIndex<tensor[2,2],[0,1]>(t10313);
          real r0320#1 = RMul(realLit031E,r031F);
          real r0321#2 = RAdd(r031D,r0320);
          real r0322#3 = TensorIndex<tensor[2,2],[1,0]>(t10313);
          real r0323#2 = RMul(realLit031B,r0322);
          real r0324#3 = TensorIndex<tensor[2,2],[1,1]>(t10313);
          real r0325#1 = RMul(realLit031E,r0324);
          real r0326#2 = RAdd(r0323,r0325);
          real realLit0328#27 = 0.1e1;
          real r0329#1 = RMul(realLit0328,r031C);
          real r032A#1 = RMul(realLit031B,r031F);
          real r032B#2 = RAdd(r0329,r032A);
          real r032C#1 = RMul(realLit0328,r0322);
          real r032D#2 = RMul(realLit031B,r0324);
          real r032E#2 = RAdd(r032C,r032D);
          real r034A#1 = RMul(realLit031B,r0321);
          real r034D#1 = RMul(realLit031E,r0326);
          real r034E#1 = RAdd(r034A,r034D);
          real r0350#1 = RMul(realLit031B,r032B);
          real r0352#1 = RMul(realLit031E,r032E);
          real r0353#1 = RAdd(r0350,r0352);
          real r0356#1 = RMul(realLit0328,r0321);
          real r0357#1 = RMul(realLit031B,r0326);
          real r0358#1 = RAdd(r0356,r0357);
          real r0359#1 = RMul(realLit0328,r032B);
          real r035A#1 = RMul(realLit031B,r032E);
          real r035B#1 = RAdd(r0359,r035A);
          real r037A#1 = RMul(realLit0328,r0324);
          real r037B#1 = RAdd(r0323,r037A);
          real r037D#1 = RMul(realLit031E,r0322);
          real r037F#1 = RAdd(r037D,r032D);
          tensor[2] op1_e3_l_30374#1 = <tensor[2]>[r037B,r037F];
          real r0390#1 = RDiv(r034E,realLit0328);
          real r0392#1 = RDiv(r0353,realLit0328);
          real r0395#1 = RDiv(r0358,realLit0328);
          real r0397#1 = RDiv(r035B,realLit0328);
          tensor[2] projParam03A7#1 = ProjectLast<tensor[2,2],[0]>(t10313);
          real op1_e3_l_503A6#4 = VDot<2>(projParam03A7,op1_e3_l_30374);
          real r03AD#1 = RDiv(r0390,op1_e3_l_503A6);
          real r03AF#1 = RDiv(r0392,op1_e3_l_503A6);
          real r03B2#1 = RDiv(r0395,op1_e3_l_503A6);
          real r03B4#1 = RDiv(r0397,op1_e3_l_503A6);
          tensor[2,2] _t03AB#1 = <tensor[2,2]>[r03AD,r03AF,r03B2,r03B4];
          Print<[tensor[2,2],string]>(_t03AB,_t0317);
          Print<[tensor[3,3],string]>(t20315,_t0317);
          real r03C6#12 = TensorIndex<tensor[3,3],[0,0]>(t20315);
          real r03C7#3 = RMul(realLit031B,r03C6);
          real r03C8#12 = TensorIndex<tensor[3,3],[0,1]>(t20315);
          real r03C9#3 = RMul(realLit031B,r03C8);
          real r03CA#12 = TensorIndex<tensor[3,3],[0,2]>(t20315);
          real r03CB#5 = RMul(realLit031B,r03CA);
          real r03CC#3 = RAdd(r03C7,r03C9);
          real r03CD#9 = RAdd(r03CC,r03CB);
          real r03CE#12 = TensorIndex<tensor[3,3],[1,0]>(t20315);
          real r03CF#3 = RMul(realLit031B,r03CE);
          real r03D0#12 = TensorIndex<tensor[3,3],[1,1]>(t20315);
          real r03D1#3 = RMul(realLit031B,r03D0);
          real r03D2#12 = TensorIndex<tensor[3,3],[1,2]>(t20315);
          real r03D3#5 = RMul(realLit031B,r03D2);
          real r03D4#3 = RAdd(r03CF,r03D1);
          real r03D5#9 = RAdd(r03D4,r03D3);
          real r03D6#12 = TensorIndex<tensor[3,3],[2,0]>(t20315);
          real r03D7#3 = RMul(realLit031B,r03D6);
          real r03D8#12 = TensorIndex<tensor[3,3],[2,1]>(t20315);
          real r03D9#3 = RMul(realLit031B,r03D8);
          real r03DA#12 = TensorIndex<tensor[3,3],[2,2]>(t20315);
          real r03DB#5 = RMul(realLit031B,r03DA);
          real r03DC#3 = RAdd(r03D7,r03D9);
          real r03DD#12 = RAdd(r03DC,r03DB);
          real r03E0#1 = RMul(realLit031E,r03CA);
          real r03E1#3 = RAdd(r03CC,r03E0);
          real r03E2#1 = RMul(realLit031E,r03D2);
          real r03E3#3 = RAdd(r03D4,r03E2);
          real r03E4#1 = RMul(realLit031E,r03DA);
          real r03E5#4 = RAdd(r03DC,r03E4);
          real r03E8#1 = RMul(realLit0328,r03C8);
          real r03E9#1 = RAdd(r03C7,r03E8);
          real r03EA#3 = RAdd(r03E9,r03CB);
          real r03EB#1 = RMul(realLit0328,r03D0);
          real r03EC#1 = RAdd(r03CF,r03EB);
          real r03ED#3 = RAdd(r03EC,r03D3);
          real r03EE#1 = RMul(realLit0328,r03D8);
          real r03EF#1 = RAdd(r03D7,r03EE);
          real r03F0#4 = RAdd(r03EF,r03DB);
          real r03F3#1 = RMul(realLit0328,r03CA);
          real r03F4#3 = RAdd(r03CC,r03F3);
          real r03F5#1 = RMul(realLit0328,r03D2);
          real r03F6#3 = RAdd(r03D4,r03F5);
          real r03F7#1 = RMul(realLit0328,r03DA);
          real r03F8#4 = RAdd(r03DC,r03F7);
          real r03FA#1 = RMul(realLit031E,r03C6);
          real r03FB#1 = RAdd(r03FA,r03C9);
          real r03FC#3 = RAdd(r03FB,r03CB);
          real r03FD#1 = RMul(realLit031E,r03CE);
          real r03FE#1 = RAdd(r03FD,r03D1);
          real r03FF#3 = RAdd(r03FE,r03D3);
          real r0400#1 = RMul(realLit031E,r03D6);
          real r0401#1 = RAdd(r0400,r03D9);
          real r0402#4 = RAdd(r0401,r03DB);
          real r0405#1 = RMul(realLit031E,r03C8);
          real r0406#1 = RAdd(r03C7,r0405);
          real r0407#3 = RAdd(r0406,r03CB);
          real r0408#1 = RMul(realLit031E,r03D0);
          real r0409#1 = RAdd(r03CF,r0408);
          real r040A#3 = RAdd(r0409,r03D3);
          real r040B#1 = RMul(realLit031E,r03D8);
          real r040C#1 = RAdd(r03D7,r040B);
          real r040D#4 = RAdd(r040C,r03DB);
          real r040F#1 = RMul(realLit0328,r03C6);
          real r0410#1 = RAdd(r040F,r03C9);
          real r0411#3 = RAdd(r0410,r03CB);
          real r0412#1 = RMul(realLit0328,r03CE);
          real r0413#1 = RAdd(r0412,r03D1);
          real r0414#3 = RAdd(r0413,r03D3);
          real r0415#1 = RMul(realLit0328,r03D6);
          real r0416#1 = RAdd(r0415,r03D9);
          real r0417#4 = RAdd(r0416,r03DB);
          real r0474#1 = RMul(r03C6,r03CD);
          real r0477#1 = RMul(r03C8,r03F4);
          real r047A#1 = RMul(r03CA,r0407);
          real r047B#1 = RAdd(r0474,r0477);
          real r047C#1 = RAdd(r047B,r047A);
          real r047E#1 = RMul(r03C6,r03D5);
          real r0480#1 = RMul(r03C8,r03F6);
          real r0482#1 = RMul(r03CA,r040A);
          real r0483#1 = RAdd(r047E,r0480);
          real r0484#2 = RAdd(r0483,r0482);
          real r0486#1 = RMul(r03C6,r03DD);
          real r0488#1 = RMul(r03C8,r03F8);
          real r048A#1 = RMul(r03CA,r040D);
          real r048B#1 = RAdd(r0486,r0488);
          real r048C#2 = RAdd(r048B,r048A);
          real r048F#1 = RMul(r03C6,r03E1);
          real r0491#1 = RMul(r03C8,r03CD);
          real r0493#1 = RMul(r03CA,r0411);
          real r0494#1 = RAdd(r048F,r0491);
          real r0495#1 = RAdd(r0494,r0493);
          real r0497#1 = RMul(r03C6,r03E3);
          real r0499#1 = RMul(r03C8,r03D5);
          real r049B#1 = RMul(r03CA,r0414);
          real r049C#1 = RAdd(r0497,r0499);
          real r049D#2 = RAdd(r049C,r049B);
          real r049F#1 = RMul(r03C6,r03E5);
          real r04A1#1 = RMul(r03C8,r03DD);
          real r04A3#1 = RMul(r03CA,r0417);
          real r04A4#1 = RAdd(r049F,r04A1);
          real r04A5#2 = RAdd(r04A4,r04A3);
          real r04A8#1 = RMul(r03C6,r03EA);
          real r04AA#1 = RMul(r03C8,r03FC);
          real r04AC#1 = RMul(r03CA,r03CD);
          real r04AD#1 = RAdd(r04A8,r04AA);
          real r04AE#1 = RAdd(r04AD,r04AC);
          real r04B0#1 = RMul(r03C6,r03ED);
          real r04B2#1 = RMul(r03C8,r03FF);
          real r04B4#1 = RMul(r03CA,r03D5);
          real r04B5#1 = RAdd(r04B0,r04B2);
          real r04B6#2 = RAdd(r04B5,r04B4);
          real r04B8#1 = RMul(r03C6,r03F0);
          real r04BA#1 = RMul(r03C8,r0402);
          real r04BC#1 = RMul(r03CA,r03DD);
          real r04BD#1 = RAdd(r04B8,r04BA);
          real r04BE#2 = RAdd(r04BD,r04BC);
          real r04C2#1 = RMul(r03CE,r03CD);
          real r04C4#1 = RMul(r03D0,r03F4);
          real r04C6#1 = RMul(r03D2,r0407);
          real r04C7#1 = RAdd(r04C2,r04C4);
          real r04C8#2 = RAdd(r04C7,r04C6);
          real r04C9#1 = RMul(r03CE,r03D5);
          real r04CA#1 = RMul(r03D0,r03F6);
          real r04CB#1 = RMul(r03D2,r040A);
          real r04CC#1 = RAdd(r04C9,r04CA);
          real r04CD#1 = RAdd(r04CC,r04CB);
          real r04CE#1 = RMul(r03CE,r03DD);
          real r04CF#1 = RMul(r03D0,r03F8);
          real r04D0#1 = RMul(r03D2,r040D);
          real r04D1#1 = RAdd(r04CE,r04CF);
          real r04D2#2 = RAdd(r04D1,r04D0);
          real r04D4#1 = RMul(r03CE,r03E1);
          real r04D5#1 = RMul(r03D0,r03CD);
          real r04D6#1 = RMul(r03D2,r0411);
          real r04D7#1 = RAdd(r04D4,r04D5);
          real r04D8#2 = RAdd(r04D7,r04D6);
          real r04D9#1 = RMul(r03CE,r03E3);
          real r04DA#1 = RMul(r03D0,r03D5);
          real r04DB#1 = RMul(r03D2,r0414);
          real r04DC#1 = RAdd(r04D9,r04DA);
          real r04DD#1 = RAdd(r04DC,r04DB);
          real r04DE#1 = RMul(r03CE,r03E5);
          real r04DF#1 = RMul(r03D0,r03DD);
          real r04E0#1 = RMul(r03D2,r0417);
          real r04E1#1 = RAdd(r04DE,r04DF);
          real r04E2#2 = RAdd(r04E1,r04E0);
          real r04E4#1 = RMul(r03CE,r03EA);
          real r04E5#1 = RMul(r03D0,r03FC);
          real r04E6#1 = RMul(r03D2,r03CD);
          real r04E7#1 = RAdd(r04E4,r04E5);
          real r04E8#2 = RAdd(r04E7,r04E6);
          real r04E9#1 = RMul(r03CE,r03ED);
          real r04EA#1 = RMul(r03D0,r03FF);
          real r04EB#1 = RMul(r03D2,r03D5);
          real r04EC#1 = RAdd(r04E9,r04EA);
          real r04ED#1 = RAdd(r04EC,r04EB);
          real r04EE#1 = RMul(r03CE,r03F0);
          real r04EF#1 = RMul(r03D0,r0402);
          real r04F0#1 = RMul(r03D2,r03DD);
          real r04F1#1 = RAdd(r04EE,r04EF);
          real r04F2#2 = RAdd(r04F1,r04F0);
          real r04F6#1 = RMul(r03D6,r03CD);
          real r04F8#1 = RMul(r03D8,r03F4);
          real r04FA#1 = RMul(r03DA,r0407);
          real r04FB#1 = RAdd(r04F6,r04F8);
          real r04FC#2 = RAdd(r04FB,r04FA);
          real r04FD#1 = RMul(r03D6,r03D5);
          real r04FE#1 = RMul(r03D8,r03F6);
          real r04FF#1 = RMul(r03DA,r040A);
          real r0500#1 = RAdd(r04FD,r04FE);
          real r0501#2 = RAdd(r0500,r04FF);
          real r0502#1 = RMul(r03D6,r03DD);
          real r0503#1 = RMul(r03D8,r03F8);
          real r0504#1 = RMul(r03DA,r040D);
          real r0505#1 = RAdd(r0502,r0503);
          real r0506#1 = RAdd(r0505,r0504);
          real r0508#1 = RMul(r03D6,r03E1);
          real r0509#1 = RMul(r03D8,r03CD);
          real r050A#1 = RMul(r03DA,r0411);
          real r050B#1 = RAdd(r0508,r0509);
          real r050C#2 = RAdd(r050B,r050A);
          real r050D#1 = RMul(r03D6,r03E3);
          real r050E#1 = RMul(r03D8,r03D5);
          real r050F#1 = RMul(r03DA,r0414);
          real r0510#1 = RAdd(r050D,r050E);
          real r0511#2 = RAdd(r0510,r050F);
          real r0512#1 = RMul(r03D6,r03E5);
          real r0513#1 = RMul(r03D8,r03DD);
          real r0514#1 = RMul(r03DA,r0417);
          real r0515#1 = RAdd(r0512,r0513);
          real r0516#1 = RAdd(r0515,r0514);
          real r0518#1 = RMul(r03D6,r03EA);
          real r0519#1 = RMul(r03D8,r03FC);
          real r051A#1 = RMul(r03DA,r03CD);
          real r051B#1 = RAdd(r0518,r0519);
          real r051C#2 = RAdd(r051B,r051A);
          real r051D#1 = RMul(r03D6,r03ED);
          real r051E#1 = RMul(r03D8,r03FF);
          real r051F#1 = RMul(r03DA,r03D5);
          real r0520#1 = RAdd(r051D,r051E);
          real r0521#2 = RAdd(r0520,r051F);
          real r0522#1 = RMul(r03D6,r03F0);
          real r0523#1 = RMul(r03D8,r0402);
          real r0524#1 = RMul(r03DA,r03DD);
          real r0525#1 = RAdd(r0522,r0523);
          real r0526#1 = RAdd(r0525,r0524);
          real r05E5#2 = RMul(realLit031B,r047C);
          real r05E7#1 = RMul(realLit031B,r0484);
          real r05E9#2 = RMul(realLit031B,r048C);
          real r05EB#2 = RMul(realLit031B,r04C8);
          real r05ED#3 = RMul(realLit031B,r04CD);
          real r05F0#1 = RMul(realLit0328,r04D2);
          real r05F2#2 = RMul(realLit031B,r04FC);
          real r05F5#1 = RMul(realLit031E,r0501);
          real r05F7#3 = RMul(realLit031B,r0506);
          real r05F8#2 = RAdd(r05E5,r05E7);
          real r05F9#1 = RAdd(r05F8,r05E9);
          real r05FA#1 = RAdd(r05F9,r05EB);
          real r05FB#1 = RAdd(r05FA,r05ED);
          real r05FC#1 = RAdd(r05FB,r05F0);
          real r05FD#1 = RAdd(r05FC,r05F2);
          real r05FE#1 = RAdd(r05FD,r05F5);
          real r05FF#1 = RAdd(r05FE,r05F7);
          real r0601#2 = RMul(realLit031B,r0495);
          real r0603#1 = RMul(realLit031B,r049D);
          real r0605#2 = RMul(realLit031B,r04A5);
          real r0607#2 = RMul(realLit031B,r04D8);
          real r0609#3 = RMul(realLit031B,r04DD);
          real r060B#1 = RMul(realLit0328,r04E2);
          real r060D#2 = RMul(realLit031B,r050C);
          real r060F#1 = RMul(realLit031E,r0511);
          real r0611#3 = RMul(realLit031B,r0516);
          real r0612#2 = RAdd(r0601,r0603);
          real r0613#1 = RAdd(r0612,r0605);
          real r0614#1 = RAdd(r0613,r0607);
          real r0615#1 = RAdd(r0614,r0609);
          real r0616#1 = RAdd(r0615,r060B);
          real r0617#1 = RAdd(r0616,r060D);
          real r0618#1 = RAdd(r0617,r060F);
          real r0619#1 = RAdd(r0618,r0611);
          real r061B#2 = RMul(realLit031B,r04AE);
          real r061D#1 = RMul(realLit031B,r04B6);
          real r061F#2 = RMul(realLit031B,r04BE);
          real r0621#2 = RMul(realLit031B,r04E8);
          real r0623#3 = RMul(realLit031B,r04ED);
          real r0625#1 = RMul(realLit0328,r04F2);
          real r0627#2 = RMul(realLit031B,r051C);
          real r0629#1 = RMul(realLit031E,r0521);
          real r062B#3 = RMul(realLit031B,r0526);
          real r062C#2 = RAdd(r061B,r061D);
          real r062D#1 = RAdd(r062C,r061F);
          real r062E#1 = RAdd(r062D,r0621);
          real r062F#1 = RAdd(r062E,r0623);
          real r0630#1 = RAdd(r062F,r0625);
          real r0631#1 = RAdd(r0630,r0627);
          real r0632#1 = RAdd(r0631,r0629);
          real r0633#1 = RAdd(r0632,r062B);
          real r0635#1 = RMul(realLit031E,r048C);
          real r0636#2 = RMul(realLit031B,r04D2);
          real r0637#1 = RMul(realLit0328,r04FC);
          real r0638#2 = RMul(realLit031B,r0501);
          real r0639#1 = RAdd(r05F8,r0635);
          real r063A#1 = RAdd(r0639,r05EB);
          real r063B#1 = RAdd(r063A,r05ED);
          real r063C#1 = RAdd(r063B,r0636);
          real r063D#1 = RAdd(r063C,r0637);
          real r063E#1 = RAdd(r063D,r0638);
          real r063F#1 = RAdd(r063E,r05F7);
          real r0640#1 = RMul(realLit031E,r04A5);
          real r0641#2 = RMul(realLit031B,r04E2);
          real r0642#1 = RMul(realLit0328,r050C);
          real r0643#2 = RMul(realLit031B,r0511);
          real r0644#1 = RAdd(r0612,r0640);
          real r0645#1 = RAdd(r0644,r0607);
          real r0646#1 = RAdd(r0645,r0609);
          real r0647#1 = RAdd(r0646,r0641);
          real r0648#1 = RAdd(r0647,r0642);
          real r0649#1 = RAdd(r0648,r0643);
          real r064A#1 = RAdd(r0649,r0611);
          real r064B#1 = RMul(realLit031E,r04BE);
          real r064C#2 = RMul(realLit031B,r04F2);
          real r064D#1 = RMul(realLit0328,r051C);
          real r064E#2 = RMul(realLit031B,r0521);
          real r064F#1 = RAdd(r062C,r064B);
          real r0650#1 = RAdd(r064F,r0621);
          real r0651#1 = RAdd(r0650,r0623);
          real r0652#1 = RAdd(r0651,r064C);
          real r0653#1 = RAdd(r0652,r064D);
          real r0654#1 = RAdd(r0653,r064E);
          real r0655#1 = RAdd(r0654,r062B);
          real r0657#1 = RMul(realLit0328,r0484);
          real r0658#1 = RMul(realLit031E,r04C8);
          real r0659#1 = RAdd(r05E5,r0657);
          real r065A#1 = RAdd(r0659,r05E9);
          real r065B#1 = RAdd(r065A,r0658);
          real r065C#1 = RAdd(r065B,r05ED);
          real r065D#1 = RAdd(r065C,r0636);
          real r065E#1 = RAdd(r065D,r05F2);
          real r065F#1 = RAdd(r065E,r0638);
          real r0660#1 = RAdd(r065F,r05F7);
          real r0661#1 = RMul(realLit0328,r049D);
          real r0662#1 = RMul(realLit031E,r04D8);
          real r0663#1 = RAdd(r0601,r0661);
          real r0664#1 = RAdd(r0663,r0605);
          real r0665#1 = RAdd(r0664,r0662);
          real r0666#1 = RAdd(r0665,r0609);
          real r0667#1 = RAdd(r0666,r0641);
          real r0668#1 = RAdd(r0667,r060D);
          real r0669#1 = RAdd(r0668,r0643);
          real r066A#1 = RAdd(r0669,r0611);
          real r066B#1 = RMul(realLit0328,r04B6);
          real r066C#1 = RMul(realLit031E,r04E8);
          real r066D#1 = RAdd(r061B,r066B);
          real r066E#1 = RAdd(r066D,r061F);
          real r066F#1 = RAdd(r066E,r066C);
          real r0670#1 = RAdd(r066F,r0623);
          real r0671#1 = RAdd(r0670,r064C);
          real r0672#1 = RAdd(r0671,r0627);
          real r0673#1 = RAdd(r0672,r064E);
          real r0674#1 = RAdd(r0673,r062B);
          tensor[3] tensor071C#1 = <tensor[3]>[r03DD,r03F8,r040D];
          tensor[3] tensor0722#1 = <tensor[3]>[r03E5,r03DD,r0417];
          tensor[3] tensor0729#1 = <tensor[3]>[r03F0,r0402,r03DD];
          tensor[3] projParam074B#3 = ProjectLast<tensor[3,3],[1]>(t20315);
          real vdot074D#1 = VDot<3>(projParam074B,tensor071C);
          real vdot074F#1 = VDot<3>(projParam074B,tensor0722);
          real vdot0751#1 = VDot<3>(projParam074B,tensor0729);
          tensor[3] op1_e3_l_5074A#1 = <tensor[3]>[vdot074D,vdot074F,vdot0751];
          real realLit075D#9 = 0.2e1;
          real r075E#1 = RDiv(r05FF,realLit075D);
          real r0760#1 = RDiv(r0619,realLit075D);
          real r0762#1 = RDiv(r0633,realLit075D);
          real r0765#1 = RDiv(r063F,realLit075D);
          real r0767#1 = RDiv(r064A,realLit075D);
          real r0769#1 = RDiv(r0655,realLit075D);
          real r076C#1 = RDiv(r0660,realLit075D);
          real r076E#1 = RDiv(r066A,realLit075D);
          real r0770#1 = RDiv(r0674,realLit075D);
          tensor[3] projParam078B#1 = ProjectLast<tensor[3,3],[0]>(t20315);
          real op1_e3_l_7078A#9 = VDot<3>(projParam078B,op1_e3_l_5074A);
          real r0791#1 = RDiv(r075E,op1_e3_l_7078A);
          real r0793#1 = RDiv(r0760,op1_e3_l_7078A);
          real r0795#1 = RDiv(r0762,op1_e3_l_7078A);
          real r0798#1 = RDiv(r0765,op1_e3_l_7078A);
          real r079A#1 = RDiv(r0767,op1_e3_l_7078A);
          real r079C#1 = RDiv(r0769,op1_e3_l_7078A);
          real r079F#1 = RDiv(r076C,op1_e3_l_7078A);
          real r07A1#1 = RDiv(r076E,op1_e3_l_7078A);
          real r07A3#1 = RDiv(r0770,op1_e3_l_7078A);
          tensor[3,3] _t078F#1 = <tensor[3,3]>[r0791,r0793,r0795,r0798,r079A,r079C,r079F,r07A1,r07A3];
          Print<[tensor[3,3],string]>(_t078F,_t0317);
          stabilize
    end update
  end dump
## initial strand creation
  COLLECTION
    ENTRY07BF:  preds = []
      int[] itter07C0#1 = globals.itter02DC;
    FOREACH07C3:  preds = [ASSIGN07C1,NEXT07C5]
      foreach (i07C2 in itter07C0) on exit goto RETURN07C6
      new dump(i07C2);
      goto FOREACH07C3
    RETURN07C6:  preds = [FOREACH07C3]
      return
#### end program ####
##### TreeIR: after low-to-tree translation ####
//***** PROPERTIES *****
  GlobalInit HasInputs HasGlobals
//***** CONSTS *****
//***** INPUTS *****
input tensor[2] v1;
input tensor[2] v2;
input tensor[3] w1;
input tensor[3] w2;
input tensor[3] w3;
//***** CONST INIT *****
  {
    globals.v1 = PACK(VEC2(0.1e1,0.e0));
    globals.v2 = PACK(VEC2(0.2e1,0.1e1));
    globals.w1 = PACK(VEC3{4}(0.1e1,0.e0,0.e0));
    globals.w2 = PACK(VEC3{4}(0.1e1,0.1e1,0.e0));
    globals.w3 = PACK(VEC3{4}(0.1e1,0.1e1,0.1e1));
  }
//***** GLOBALS *****
global int[] itter;
//***** FUNCTIONS *****
//***** GLOBAL VARIABLE INIT *****
  {
    int[1] t_6 = <int[1]>{1};
    int[] l__t_5 = MkDynamic<int,1>(t_6);
    globals.itter = l__t_5;
  }
//***** STRAND *****
strand dump (int p_i_7) {
  output tensor[2,2] t1;
  output tensor[3,3] t2;
  initialize (globals) {
    self.t1 = <tensor[2,2]>[VIndex<2,2,0>(LOAD_0(TensorRef<[2]>(globals.v1))),VIndex<2,2,1>(LOAD_0(TensorRef<[2]>(globals.v1))),VIndex<2,2,0>(LOAD_0(TensorRef<[2]>(globals.v2))),VIndex<2,2,1>(LOAD_0(TensorRef<[2]>(globals.v2)))];
    self.t2 = <tensor[3,3]>[VIndex<3,4,0>(LOAD_0(TensorRef<[3]>(globals.w1))),VIndex<3,4,1>(LOAD_0(TensorRef<[3]>(globals.w1))),VIndex<3,4,2>(LOAD_0(TensorRef<[3]>(globals.w1))),VIndex<3,4,0>(LOAD_0(TensorRef<[3]>(globals.w2))),VIndex<3,4,1>(LOAD_0(TensorRef<[3]>(globals.w2))),VIndex<3,4,2>(LOAD_0(TensorRef<[3]>(globals.w2))),VIndex<3,4,0>(LOAD_0(TensorRef<[3]>(globals.w3))),VIndex<3,4,1>(LOAD_0(TensorRef<[3]>(globals.w3))),VIndex<3,4,2>(LOAD_0(TensorRef<[3]>(globals.w3)))];
  }
  update (world) {
    print(TensorRef<[2,2]>(self.t1),"\n");
    real l_r_8 = TensorIndex<&tensor[2,2],[0,0]>(TensorRef<[2,2]>(self.t1));
    real l_r_9 = TensorIndex<&tensor[2,2],[0,1]>(TensorRef<[2,2]>(self.t1));
    real l_r_10 = RAdd(RMul(0.e0,l_r_8),RMul(-0.1e1,l_r_9));
    real l_r_11 = TensorIndex<&tensor[2,2],[1,0]>(TensorRef<[2,2]>(self.t1));
    real l_r_12 = RMul(0.e0,l_r_11);
    real l_r_13 = TensorIndex<&tensor[2,2],[1,1]>(TensorRef<[2,2]>(self.t1));
    real l_r_14 = RAdd(l_r_12,RMul(-0.1e1,l_r_13));
    real l_r_15 = RAdd(RMul(0.1e1,l_r_8),RMul(0.e0,l_r_9));
    real l_r_16 = RMul(0.e0,l_r_13);
    real l_r_17 = RAdd(RMul(0.1e1,l_r_11),l_r_16);
    real l_op1_e3_l_5_18 = VDot<2,2>(LOAD_0(ProjectLast<&tensor[2,2],[0]>(TensorRef<[2,2]>(self.t1))),VEC2(RAdd(l_r_12,RMul(0.1e1,l_r_13)),RAdd(RMul(-0.1e1,l_r_11),l_r_16)));
    tensor[2,2] t_19 = <tensor[2,2]>[RDiv(RDiv(RAdd(RMul(0.e0,l_r_10),RMul(-0.1e1,l_r_14)),0.1e1),l_op1_e3_l_5_18),RDiv(RDiv(RAdd(RMul(0.e0,l_r_15),RMul(-0.1e1,l_r_17)),0.1e1),l_op1_e3_l_5_18),RDiv(RDiv(RAdd(RMul(0.1e1,l_r_10),RMul(0.e0,l_r_14)),0.1e1),l_op1_e3_l_5_18),RDiv(RDiv(RAdd(RMul(0.1e1,l_r_15),RMul(0.e0,l_r_17)),0.1e1),l_op1_e3_l_5_18)];
    print(TensorRef<[2,2]>(t_19),"\n");
    print(TensorRef<[3,3]>(self.t2),"\n");
    real l_r_20 = TensorIndex<&tensor[3,3],[0,0]>(TensorRef<[3,3]>(self.t2));
    real l_r_21 = RMul(0.e0,l_r_20);
    real l_r_22 = TensorIndex<&tensor[3,3],[0,1]>(TensorRef<[3,3]>(self.t2));
    real l_r_23 = RMul(0.e0,l_r_22);
    real l_r_24 = TensorIndex<&tensor[3,3],[0,2]>(TensorRef<[3,3]>(self.t2));
    real l_r_25 = RMul(0.e0,l_r_24);
    real l_r_26 = RAdd(l_r_21,l_r_23);
    real l_r_27 = RAdd(l_r_26,l_r_25);
    real l_r_28 = TensorIndex<&tensor[3,3],[1,0]>(TensorRef<[3,3]>(self.t2));
    real l_r_29 = RMul(0.e0,l_r_28);
    real l_r_30 = TensorIndex<&tensor[3,3],[1,1]>(TensorRef<[3,3]>(self.t2));
    real l_r_31 = RMul(0.e0,l_r_30);
    real l_r_32 = TensorIndex<&tensor[3,3],[1,2]>(TensorRef<[3,3]>(self.t2));
    real l_r_33 = RMul(0.e0,l_r_32);
    real l_r_34 = RAdd(l_r_29,l_r_31);
    real l_r_35 = RAdd(l_r_34,l_r_33);
    real l_r_36 = TensorIndex<&tensor[3,3],[2,0]>(TensorRef<[3,3]>(self.t2));
    real l_r_37 = RMul(0.e0,l_r_36);
    real l_r_38 = TensorIndex<&tensor[3,3],[2,1]>(TensorRef<[3,3]>(self.t2));
    real l_r_39 = RMul(0.e0,l_r_38);
    real l_r_40 = TensorIndex<&tensor[3,3],[2,2]>(TensorRef<[3,3]>(self.t2));
    real l_r_41 = RMul(0.e0,l_r_40);
    real l_r_42 = RAdd(l_r_37,l_r_39);
    real l_r_43 = RAdd(l_r_42,l_r_41);
    real l_r_44 = RAdd(l_r_26,RMul(-0.1e1,l_r_24));
    real l_r_45 = RAdd(l_r_34,RMul(-0.1e1,l_r_32));
    real l_r_46 = RAdd(l_r_42,RMul(-0.1e1,l_r_40));
    real l_r_47 = RAdd(RAdd(l_r_21,RMul(0.1e1,l_r_22)),l_r_25);
    real l_r_48 = RAdd(RAdd(l_r_29,RMul(0.1e1,l_r_30)),l_r_33);
    real l_r_49 = RAdd(RAdd(l_r_37,RMul(0.1e1,l_r_38)),l_r_41);
    real l_r_50 = RAdd(l_r_26,RMul(0.1e1,l_r_24));
    real l_r_51 = RAdd(l_r_34,RMul(0.1e1,l_r_32));
    real l_r_52 = RAdd(l_r_42,RMul(0.1e1,l_r_40));
    real l_r_53 = RAdd(RAdd(RMul(-0.1e1,l_r_20),l_r_23),l_r_25);
    real l_r_54 = RAdd(RAdd(RMul(-0.1e1,l_r_28),l_r_31),l_r_33);
    real l_r_55 = RAdd(RAdd(RMul(-0.1e1,l_r_36),l_r_39),l_r_41);
    real l_r_56 = RAdd(RAdd(l_r_21,RMul(-0.1e1,l_r_22)),l_r_25);
    real l_r_57 = RAdd(RAdd(l_r_29,RMul(-0.1e1,l_r_30)),l_r_33);
    real l_r_58 = RAdd(RAdd(l_r_37,RMul(-0.1e1,l_r_38)),l_r_41);
    real l_r_59 = RAdd(RAdd(RMul(0.1e1,l_r_20),l_r_23),l_r_25);
    real l_r_60 = RAdd(RAdd(RMul(0.1e1,l_r_28),l_r_31),l_r_33);
    real l_r_61 = RAdd(RAdd(RMul(0.1e1,l_r_36),l_r_39),l_r_41);
    real l_r_62 = RAdd(RAdd(RMul(l_r_20,l_r_35),RMul(l_r_22,l_r_51)),RMul(l_r_24,l_r_57));
    real l_r_63 = RAdd(RAdd(RMul(l_r_20,l_r_43),RMul(l_r_22,l_r_52)),RMul(l_r_24,l_r_58));
    real l_r_64 = RAdd(RAdd(RMul(l_r_20,l_r_45),RMul(l_r_22,l_r_35)),RMul(l_r_24,l_r_60));
    real l_r_65 = RAdd(RAdd(RMul(l_r_20,l_r_46),RMul(l_r_22,l_r_43)),RMul(l_r_24,l_r_61));
    real l_r_66 = RAdd(RAdd(RMul(l_r_20,l_r_48),RMul(l_r_22,l_r_54)),RMul(l_r_24,l_r_35));
    real l_r_67 = RAdd(RAdd(RMul(l_r_20,l_r_49),RMul(l_r_22,l_r_55)),RMul(l_r_24,l_r_43));
    real l_r_68 = RAdd(RAdd(RMul(l_r_28,l_r_27),RMul(l_r_30,l_r_50)),RMul(l_r_32,l_r_56));
    real l_r_69 = RAdd(RAdd(RMul(l_r_28,l_r_43),RMul(l_r_30,l_r_52)),RMul(l_r_32,l_r_58));
    real l_r_70 = RAdd(RAdd(RMul(l_r_28,l_r_44),RMul(l_r_30,l_r_27)),RMul(l_r_32,l_r_59));
    real l_r_71 = RAdd(RAdd(RMul(l_r_28,l_r_46),RMul(l_r_30,l_r_43)),RMul(l_r_32,l_r_61));
    real l_r_72 = RAdd(RAdd(RMul(l_r_28,l_r_47),RMul(l_r_30,l_r_53)),RMul(l_r_32,l_r_27));
    real l_r_73 = RAdd(RAdd(RMul(l_r_28,l_r_49),RMul(l_r_30,l_r_55)),RMul(l_r_32,l_r_43));
    real l_r_74 = RAdd(RAdd(RMul(l_r_36,l_r_27),RMul(l_r_38,l_r_50)),RMul(l_r_40,l_r_56));
    real l_r_75 = RAdd(RAdd(RMul(l_r_36,l_r_35),RMul(l_r_38,l_r_51)),RMul(l_r_40,l_r_57));
    real l_r_76 = RAdd(RAdd(RMul(l_r_36,l_r_44),RMul(l_r_38,l_r_27)),RMul(l_r_40,l_r_59));
    real l_r_77 = RAdd(RAdd(RMul(l_r_36,l_r_45),RMul(l_r_38,l_r_35)),RMul(l_r_40,l_r_60));
    real l_r_78 = RAdd(RAdd(RMul(l_r_36,l_r_47),RMul(l_r_38,l_r_53)),RMul(l_r_40,l_r_27));
    real l_r_79 = RAdd(RAdd(RMul(l_r_36,l_r_48),RMul(l_r_38,l_r_54)),RMul(l_r_40,l_r_35));
    real l_r_80 = RMul(0.e0,RAdd(RAdd(RMul(l_r_20,l_r_27),RMul(l_r_22,l_r_50)),RMul(l_r_24,l_r_56)));
    real l_r_81 = RMul(0.e0,l_r_63);
    real l_r_82 = RMul(0.e0,l_r_68);
    real l_r_83 = RMul(0.e0,RAdd(RAdd(RMul(l_r_28,l_r_35),RMul(l_r_30,l_r_51)),RMul(l_r_32,l_r_57)));
    real l_r_84 = RMul(0.e0,l_r_74);
    real l_r_85 = RMul(0.e0,RAdd(RAdd(RMul(l_r_36,l_r_43),RMul(l_r_38,l_r_52)),RMul(l_r_40,l_r_58)));
    real l_r_86 = RAdd(l_r_80,RMul(0.e0,l_r_62));
    real l_r_87 = RMul(0.e0,RAdd(RAdd(RMul(l_r_20,l_r_44),RMul(l_r_22,l_r_27)),RMul(l_r_24,l_r_59)));
    real l_r_88 = RMul(0.e0,l_r_65);
    real l_r_89 = RMul(0.e0,l_r_70);
    real l_r_90 = RMul(0.e0,RAdd(RAdd(RMul(l_r_28,l_r_45),RMul(l_r_30,l_r_35)),RMul(l_r_32,l_r_60)));
    real l_r_91 = RMul(0.e0,l_r_76);
    real l_r_92 = RMul(0.e0,RAdd(RAdd(RMul(l_r_36,l_r_46),RMul(l_r_38,l_r_43)),RMul(l_r_40,l_r_61)));
    real l_r_93 = RAdd(l_r_87,RMul(0.e0,l_r_64));
    real l_r_94 = RMul(0.e0,RAdd(RAdd(RMul(l_r_20,l_r_47),RMul(l_r_22,l_r_53)),RMul(l_r_24,l_r_27)));
    real l_r_95 = RMul(0.e0,l_r_67);
    real l_r_96 = RMul(0.e0,l_r_72);
    real l_r_97 = RMul(0.e0,RAdd(RAdd(RMul(l_r_28,l_r_48),RMul(l_r_30,l_r_54)),RMul(l_r_32,l_r_35)));
    real l_r_98 = RMul(0.e0,l_r_78);
    real l_r_99 = RMul(0.e0,RAdd(RAdd(RMul(l_r_36,l_r_49),RMul(l_r_38,l_r_55)),RMul(l_r_40,l_r_43)));
    real l_r_100 = RAdd(l_r_94,RMul(0.e0,l_r_66));
    real l_r_101 = RMul(0.e0,l_r_69);
    real l_r_102 = RMul(0.e0,l_r_75);
    real l_r_103 = RMul(0.e0,l_r_71);
    real l_r_104 = RMul(0.e0,l_r_77);
    real l_r_105 = RMul(0.e0,l_r_73);
    real l_r_106 = RMul(0.e0,l_r_79);
    &tensor[3] l_projParam_107 = ProjectLast<&tensor[3,3],[1]>(TensorRef<[3,3]>(self.t2));
    real l_op1_e3_l_7_108 = VDot<3,4>(LOAD_0(ProjectLast<&tensor[3,3],[0]>(TensorRef<[3,3]>(self.t2))),VEC3{4}(VDot<3,4>(LOAD_0(l_projParam_107),VEC3{4}(l_r_43,l_r_52,l_r_58)),VDot<3,4>(LOAD_0(l_projParam_107),VEC3{4}(l_r_46,l_r_43,l_r_61)),VDot<3,4>(LOAD_0(l_projParam_107),VEC3{4}(l_r_49,l_r_55,l_r_43))));
    tensor[3,3] t_109 = <tensor[3,3]>[RDiv(RDiv(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(l_r_86,l_r_81),l_r_82),l_r_83),RMul(0.1e1,l_r_69)),l_r_84),RMul(-0.1e1,l_r_75)),l_r_85),0.2e1),l_op1_e3_l_7_108),RDiv(RDiv(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(l_r_93,l_r_88),l_r_89),l_r_90),RMul(0.1e1,l_r_71)),l_r_91),RMul(-0.1e1,l_r_77)),l_r_92),0.2e1),l_op1_e3_l_7_108),RDiv(RDiv(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(l_r_100,l_r_95),l_r_96),l_r_97),RMul(0.1e1,l_r_73)),l_r_98),RMul(-0.1e1,l_r_79)),l_r_99),0.2e1),l_op1_e3_l_7_108),RDiv(RDiv(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(l_r_86,RMul(-0.1e1,l_r_63)),l_r_82),l_r_83),l_r_101),RMul(0.1e1,l_r_74)),l_r_102),l_r_85),0.2e1),l_op1_e3_l_7_108),RDiv(RDiv(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(l_r_93,RMul(-0.1e1,l_r_65)),l_r_89),l_r_90),l_r_103),RMul(0.1e1,l_r_76)),l_r_104),l_r_92),0.2e1),l_op1_e3_l_7_108),RDiv(RDiv(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(l_r_100,RMul(-0.1e1,l_r_67)),l_r_96),l_r_97),l_r_105),RMul(0.1e1,l_r_78)),l_r_106),l_r_99),0.2e1),l_op1_e3_l_7_108),RDiv(RDiv(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(l_r_80,RMul(0.1e1,l_r_62)),l_r_81),RMul(-0.1e1,l_r_68)),l_r_83),l_r_101),l_r_84),l_r_102),l_r_85),0.2e1),l_op1_e3_l_7_108),RDiv(RDiv(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(l_r_87,RMul(0.1e1,l_r_64)),l_r_88),RMul(-0.1e1,l_r_70)),l_r_90),l_r_103),l_r_91),l_r_104),l_r_92),0.2e1),l_op1_e3_l_7_108),RDiv(RDiv(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(l_r_94,RMul(0.1e1,l_r_66)),l_r_95),RMul(-0.1e1,l_r_72)),l_r_97),l_r_105),l_r_98),l_r_106),l_r_99),0.2e1),l_op1_e3_l_7_108)];
    print(TensorRef<[3,3]>(t_109),"\n");
    stabilize;
  }
}
//***** CREATE COLLECTION *****
  {
    foreach int i_i_110 in globals.itter {
      new dump(i_i_110);
    }
  }
#### end program ####
##### TreeIR: after contraction ####
//***** PROPERTIES *****
  GlobalInit HasInputs HasGlobals
//***** CONSTS *****
//***** INPUTS *****
input tensor[2] v1;
input tensor[2] v2;
input tensor[3] w1;
input tensor[3] w2;
input tensor[3] w3;
//***** CONST INIT *****
  {
    globals.v1 = <tensor[2]>[0.1e1,0.e0];
    globals.v2 = <tensor[2]>[0.2e1,0.1e1];
    globals.w1 = <tensor[3]>[0.1e1,0.e0,0.e0];
    globals.w2 = <tensor[3]>[0.1e1,0.1e1,0.e0];
    globals.w3 = <tensor[3]>[0.1e1,0.1e1,0.1e1];
  }
//***** GLOBALS *****
global int[] itter;
//***** FUNCTIONS *****
//***** GLOBAL VARIABLE INIT *****
  {
    int[1] t_6 = <int[1]>{1};
    int[] l__t_5 = MkDynamic<int,1>(t_6);
    globals.itter = l__t_5;
  }
//***** STRAND *****
strand dump (int p_i_7) {
  output tensor[2,2] t1;
  output tensor[3,3] t2;
  initialize (globals) {
    self.t1 = <tensor[2,2]>[TensorIndex<&tensor[2],[0]>(TensorRef<[2]>(globals.v1)),TensorIndex<&tensor[2],[1]>(TensorRef<[2]>(globals.v1)),TensorIndex<&tensor[2],[0]>(TensorRef<[2]>(globals.v2)),TensorIndex<&tensor[2],[1]>(TensorRef<[2]>(globals.v2))];
    self.t2 = <tensor[3,3]>[TensorIndex<&tensor[3],[0]>(TensorRef<[3]>(globals.w1)),TensorIndex<&tensor[3],[1]>(TensorRef<[3]>(globals.w1)),TensorIndex<&tensor[3],[2]>(TensorRef<[3]>(globals.w1)),TensorIndex<&tensor[3],[0]>(TensorRef<[3]>(globals.w2)),TensorIndex<&tensor[3],[1]>(TensorRef<[3]>(globals.w2)),TensorIndex<&tensor[3],[2]>(TensorRef<[3]>(globals.w2)),TensorIndex<&tensor[3],[0]>(TensorRef<[3]>(globals.w3)),TensorIndex<&tensor[3],[1]>(TensorRef<[3]>(globals.w3)),TensorIndex<&tensor[3],[2]>(TensorRef<[3]>(globals.w3))];
  }
  update (world) {
    print(TensorRef<[2,2]>(self.t1),"\n");
    real l_r_8 = TensorIndex<&tensor[2,2],[0,0]>(TensorRef<[2,2]>(self.t1));
    real l_r_9 = TensorIndex<&tensor[2,2],[0,1]>(TensorRef<[2,2]>(self.t1));
    real l_r_10 = RAdd(RMul(0.e0,l_r_8),RMul(-0.1e1,l_r_9));
    real l_r_11 = TensorIndex<&tensor[2,2],[1,0]>(TensorRef<[2,2]>(self.t1));
    real l_r_12 = RMul(0.e0,l_r_11);
    real l_r_13 = TensorIndex<&tensor[2,2],[1,1]>(TensorRef<[2,2]>(self.t1));
    real l_r_14 = RAdd(l_r_12,RMul(-0.1e1,l_r_13));
    real l_r_15 = RAdd(RMul(0.1e1,l_r_8),RMul(0.e0,l_r_9));
    real l_r_16 = RMul(0.e0,l_r_13);
    real l_r_17 = RAdd(RMul(0.1e1,l_r_11),l_r_16);
    real l_op1_e3_l_5_18 = VDot<2,2>(LOAD_0(ProjectLast<&tensor[2,2],[0]>(TensorRef<[2,2]>(self.t1))),VEC2(RAdd(l_r_12,RMul(0.1e1,l_r_13)),RAdd(RMul(-0.1e1,l_r_11),l_r_16)));
    tensor[2,2] t_19 = <tensor[2,2]>[RDiv(RDiv(RAdd(RMul(0.e0,l_r_10),RMul(-0.1e1,l_r_14)),0.1e1),l_op1_e3_l_5_18),RDiv(RDiv(RAdd(RMul(0.e0,l_r_15),RMul(-0.1e1,l_r_17)),0.1e1),l_op1_e3_l_5_18),RDiv(RDiv(RAdd(RMul(0.1e1,l_r_10),RMul(0.e0,l_r_14)),0.1e1),l_op1_e3_l_5_18),RDiv(RDiv(RAdd(RMul(0.1e1,l_r_15),RMul(0.e0,l_r_17)),0.1e1),l_op1_e3_l_5_18)];
    print(TensorRef<[2,2]>(t_19),"\n");
    print(TensorRef<[3,3]>(self.t2),"\n");
    real l_r_20 = TensorIndex<&tensor[3,3],[0,0]>(TensorRef<[3,3]>(self.t2));
    real l_r_21 = RMul(0.e0,l_r_20);
    real l_r_22 = TensorIndex<&tensor[3,3],[0,1]>(TensorRef<[3,3]>(self.t2));
    real l_r_23 = RMul(0.e0,l_r_22);
    real l_r_24 = TensorIndex<&tensor[3,3],[0,2]>(TensorRef<[3,3]>(self.t2));
    real l_r_25 = RMul(0.e0,l_r_24);
    real l_r_26 = RAdd(l_r_21,l_r_23);
    real l_r_27 = RAdd(l_r_26,l_r_25);
    real l_r_28 = TensorIndex<&tensor[3,3],[1,0]>(TensorRef<[3,3]>(self.t2));
    real l_r_29 = RMul(0.e0,l_r_28);
    real l_r_30 = TensorIndex<&tensor[3,3],[1,1]>(TensorRef<[3,3]>(self.t2));
    real l_r_31 = RMul(0.e0,l_r_30);
    real l_r_32 = TensorIndex<&tensor[3,3],[1,2]>(TensorRef<[3,3]>(self.t2));
    real l_r_33 = RMul(0.e0,l_r_32);
    real l_r_34 = RAdd(l_r_29,l_r_31);
    real l_r_35 = RAdd(l_r_34,l_r_33);
    real l_r_36 = TensorIndex<&tensor[3,3],[2,0]>(TensorRef<[3,3]>(self.t2));
    real l_r_37 = RMul(0.e0,l_r_36);
    real l_r_38 = TensorIndex<&tensor[3,3],[2,1]>(TensorRef<[3,3]>(self.t2));
    real l_r_39 = RMul(0.e0,l_r_38);
    real l_r_40 = TensorIndex<&tensor[3,3],[2,2]>(TensorRef<[3,3]>(self.t2));
    real l_r_41 = RMul(0.e0,l_r_40);
    real l_r_42 = RAdd(l_r_37,l_r_39);
    real l_r_43 = RAdd(l_r_42,l_r_41);
    real l_r_44 = RAdd(l_r_26,RMul(-0.1e1,l_r_24));
    real l_r_45 = RAdd(l_r_34,RMul(-0.1e1,l_r_32));
    real l_r_46 = RAdd(l_r_42,RMul(-0.1e1,l_r_40));
    real l_r_47 = RAdd(RAdd(l_r_21,RMul(0.1e1,l_r_22)),l_r_25);
    real l_r_48 = RAdd(RAdd(l_r_29,RMul(0.1e1,l_r_30)),l_r_33);
    real l_r_49 = RAdd(RAdd(l_r_37,RMul(0.1e1,l_r_38)),l_r_41);
    real l_r_50 = RAdd(l_r_26,RMul(0.1e1,l_r_24));
    real l_r_51 = RAdd(l_r_34,RMul(0.1e1,l_r_32));
    real l_r_52 = RAdd(l_r_42,RMul(0.1e1,l_r_40));
    real l_r_53 = RAdd(RAdd(RMul(-0.1e1,l_r_20),l_r_23),l_r_25);
    real l_r_54 = RAdd(RAdd(RMul(-0.1e1,l_r_28),l_r_31),l_r_33);
    real l_r_55 = RAdd(RAdd(RMul(-0.1e1,l_r_36),l_r_39),l_r_41);
    real l_r_56 = RAdd(RAdd(l_r_21,RMul(-0.1e1,l_r_22)),l_r_25);
    real l_r_57 = RAdd(RAdd(l_r_29,RMul(-0.1e1,l_r_30)),l_r_33);
    real l_r_58 = RAdd(RAdd(l_r_37,RMul(-0.1e1,l_r_38)),l_r_41);
    real l_r_59 = RAdd(RAdd(RMul(0.1e1,l_r_20),l_r_23),l_r_25);
    real l_r_60 = RAdd(RAdd(RMul(0.1e1,l_r_28),l_r_31),l_r_33);
    real l_r_61 = RAdd(RAdd(RMul(0.1e1,l_r_36),l_r_39),l_r_41);
    real l_r_62 = RAdd(RAdd(RMul(l_r_20,l_r_35),RMul(l_r_22,l_r_51)),RMul(l_r_24,l_r_57));
    real l_r_63 = RAdd(RAdd(RMul(l_r_20,l_r_43),RMul(l_r_22,l_r_52)),RMul(l_r_24,l_r_58));
    real l_r_64 = RAdd(RAdd(RMul(l_r_20,l_r_45),RMul(l_r_22,l_r_35)),RMul(l_r_24,l_r_60));
    real l_r_65 = RAdd(RAdd(RMul(l_r_20,l_r_46),RMul(l_r_22,l_r_43)),RMul(l_r_24,l_r_61));
    real l_r_66 = RAdd(RAdd(RMul(l_r_20,l_r_48),RMul(l_r_22,l_r_54)),RMul(l_r_24,l_r_35));
    real l_r_67 = RAdd(RAdd(RMul(l_r_20,l_r_49),RMul(l_r_22,l_r_55)),RMul(l_r_24,l_r_43));
    real l_r_68 = RAdd(RAdd(RMul(l_r_28,l_r_27),RMul(l_r_30,l_r_50)),RMul(l_r_32,l_r_56));
    real l_r_69 = RAdd(RAdd(RMul(l_r_28,l_r_43),RMul(l_r_30,l_r_52)),RMul(l_r_32,l_r_58));
    real l_r_70 = RAdd(RAdd(RMul(l_r_28,l_r_44),RMul(l_r_30,l_r_27)),RMul(l_r_32,l_r_59));
    real l_r_71 = RAdd(RAdd(RMul(l_r_28,l_r_46),RMul(l_r_30,l_r_43)),RMul(l_r_32,l_r_61));
    real l_r_72 = RAdd(RAdd(RMul(l_r_28,l_r_47),RMul(l_r_30,l_r_53)),RMul(l_r_32,l_r_27));
    real l_r_73 = RAdd(RAdd(RMul(l_r_28,l_r_49),RMul(l_r_30,l_r_55)),RMul(l_r_32,l_r_43));
    real l_r_74 = RAdd(RAdd(RMul(l_r_36,l_r_27),RMul(l_r_38,l_r_50)),RMul(l_r_40,l_r_56));
    real l_r_75 = RAdd(RAdd(RMul(l_r_36,l_r_35),RMul(l_r_38,l_r_51)),RMul(l_r_40,l_r_57));
    real l_r_76 = RAdd(RAdd(RMul(l_r_36,l_r_44),RMul(l_r_38,l_r_27)),RMul(l_r_40,l_r_59));
    real l_r_77 = RAdd(RAdd(RMul(l_r_36,l_r_45),RMul(l_r_38,l_r_35)),RMul(l_r_40,l_r_60));
    real l_r_78 = RAdd(RAdd(RMul(l_r_36,l_r_47),RMul(l_r_38,l_r_53)),RMul(l_r_40,l_r_27));
    real l_r_79 = RAdd(RAdd(RMul(l_r_36,l_r_48),RMul(l_r_38,l_r_54)),RMul(l_r_40,l_r_35));
    real l_r_80 = RMul(0.e0,RAdd(RAdd(RMul(l_r_20,l_r_27),RMul(l_r_22,l_r_50)),RMul(l_r_24,l_r_56)));
    real l_r_81 = RMul(0.e0,l_r_63);
    real l_r_82 = RMul(0.e0,l_r_68);
    real l_r_83 = RMul(0.e0,RAdd(RAdd(RMul(l_r_28,l_r_35),RMul(l_r_30,l_r_51)),RMul(l_r_32,l_r_57)));
    real l_r_84 = RMul(0.e0,l_r_74);
    real l_r_85 = RMul(0.e0,RAdd(RAdd(RMul(l_r_36,l_r_43),RMul(l_r_38,l_r_52)),RMul(l_r_40,l_r_58)));
    real l_r_86 = RAdd(l_r_80,RMul(0.e0,l_r_62));
    real l_r_87 = RMul(0.e0,RAdd(RAdd(RMul(l_r_20,l_r_44),RMul(l_r_22,l_r_27)),RMul(l_r_24,l_r_59)));
    real l_r_88 = RMul(0.e0,l_r_65);
    real l_r_89 = RMul(0.e0,l_r_70);
    real l_r_90 = RMul(0.e0,RAdd(RAdd(RMul(l_r_28,l_r_45),RMul(l_r_30,l_r_35)),RMul(l_r_32,l_r_60)));
    real l_r_91 = RMul(0.e0,l_r_76);
    real l_r_92 = RMul(0.e0,RAdd(RAdd(RMul(l_r_36,l_r_46),RMul(l_r_38,l_r_43)),RMul(l_r_40,l_r_61)));
    real l_r_93 = RAdd(l_r_87,RMul(0.e0,l_r_64));
    real l_r_94 = RMul(0.e0,RAdd(RAdd(RMul(l_r_20,l_r_47),RMul(l_r_22,l_r_53)),RMul(l_r_24,l_r_27)));
    real l_r_95 = RMul(0.e0,l_r_67);
    real l_r_96 = RMul(0.e0,l_r_72);
    real l_r_97 = RMul(0.e0,RAdd(RAdd(RMul(l_r_28,l_r_48),RMul(l_r_30,l_r_54)),RMul(l_r_32,l_r_35)));
    real l_r_98 = RMul(0.e0,l_r_78);
    real l_r_99 = RMul(0.e0,RAdd(RAdd(RMul(l_r_36,l_r_49),RMul(l_r_38,l_r_55)),RMul(l_r_40,l_r_43)));
    real l_r_100 = RAdd(l_r_94,RMul(0.e0,l_r_66));
    real l_r_101 = RMul(0.e0,l_r_69);
    real l_r_102 = RMul(0.e0,l_r_75);
    real l_r_103 = RMul(0.e0,l_r_71);
    real l_r_104 = RMul(0.e0,l_r_77);
    real l_r_105 = RMul(0.e0,l_r_73);
    real l_r_106 = RMul(0.e0,l_r_79);
    &tensor[3] l_projParam_107 = ProjectLast<&tensor[3,3],[1]>(TensorRef<[3,3]>(self.t2));
    real l_op1_e3_l_7_108 = VDot<3,4>(LOAD_0(ProjectLast<&tensor[3,3],[0]>(TensorRef<[3,3]>(self.t2))),VEC3{4}(VDot<3,4>(LOAD_0(l_projParam_107),VEC3{4}(l_r_43,l_r_52,l_r_58)),VDot<3,4>(LOAD_0(l_projParam_107),VEC3{4}(l_r_46,l_r_43,l_r_61)),VDot<3,4>(LOAD_0(l_projParam_107),VEC3{4}(l_r_49,l_r_55,l_r_43))));
    tensor[3,3] t_109 = <tensor[3,3]>[RDiv(RDiv(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(l_r_86,l_r_81),l_r_82),l_r_83),RMul(0.1e1,l_r_69)),l_r_84),RMul(-0.1e1,l_r_75)),l_r_85),0.2e1),l_op1_e3_l_7_108),RDiv(RDiv(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(l_r_93,l_r_88),l_r_89),l_r_90),RMul(0.1e1,l_r_71)),l_r_91),RMul(-0.1e1,l_r_77)),l_r_92),0.2e1),l_op1_e3_l_7_108),RDiv(RDiv(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(l_r_100,l_r_95),l_r_96),l_r_97),RMul(0.1e1,l_r_73)),l_r_98),RMul(-0.1e1,l_r_79)),l_r_99),0.2e1),l_op1_e3_l_7_108),RDiv(RDiv(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(l_r_86,RMul(-0.1e1,l_r_63)),l_r_82),l_r_83),l_r_101),RMul(0.1e1,l_r_74)),l_r_102),l_r_85),0.2e1),l_op1_e3_l_7_108),RDiv(RDiv(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(l_r_93,RMul(-0.1e1,l_r_65)),l_r_89),l_r_90),l_r_103),RMul(0.1e1,l_r_76)),l_r_104),l_r_92),0.2e1),l_op1_e3_l_7_108),RDiv(RDiv(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(l_r_100,RMul(-0.1e1,l_r_67)),l_r_96),l_r_97),l_r_105),RMul(0.1e1,l_r_78)),l_r_106),l_r_99),0.2e1),l_op1_e3_l_7_108),RDiv(RDiv(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(l_r_80,RMul(0.1e1,l_r_62)),l_r_81),RMul(-0.1e1,l_r_68)),l_r_83),l_r_101),l_r_84),l_r_102),l_r_85),0.2e1),l_op1_e3_l_7_108),RDiv(RDiv(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(l_r_87,RMul(0.1e1,l_r_64)),l_r_88),RMul(-0.1e1,l_r_70)),l_r_90),l_r_103),l_r_91),l_r_104),l_r_92),0.2e1),l_op1_e3_l_7_108),RDiv(RDiv(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(l_r_94,RMul(0.1e1,l_r_66)),l_r_95),RMul(-0.1e1,l_r_72)),l_r_97),l_r_105),l_r_98),l_r_106),l_r_99),0.2e1),l_op1_e3_l_7_108)];
    print(TensorRef<[3,3]>(t_109),"\n");
    stabilize;
  }
}
//***** CREATE COLLECTION *****
  {
    foreach int i_i_110 in globals.itter {
      new dump(i_i_110);
    }
  }
#### end program ####
/usr/bin/clang++ -fPIC -m64 -c -Wreturn-type -Wuninitialized -march=native -O3 -DNDEBUG -mavx2 -msse4.2 -I/home/teocollin/gitcode/diderot/include -I/usr/local/include qd.cxx
/usr/bin/clang++ -fPIC -m64 -o qd qd.o /home/teocollin/gitcode/diderot/lib/diderot-rt-seq.o -Wl,-rpath=/usr/local/lib -L/usr/local/lib -lteem -lm
                                       Phase                                         Exclusive    Total  
  compiler ..........................................................................   0.010     0.957
    front end .......................................................................   0.015     0.023
      parser ........................................................................   0.007     0.007
      typechecker ...................................................................   0.001     0.001
      simplify ......................................................................   0.000     0.000
    translate .......................................................................   0.001     0.001
    High IR optimization ............................................................   0.002     0.003
      High IR value numbering .......................................................   0.001     0.001
      High IR normalization .........................................................   0.000     0.000
      High IR checking ..............................................................   0.000     0.000
    High to Mid translation .........................................................   0.001     0.001
    Mid IR optimization .............................................................   0.003     0.005
      Mid IR contraction ............................................................   0.000     0.000
      Mid IR value numbering ........................................................   0.002     0.002
      Mid IR border control .........................................................   0.000     0.000
      Mid IR checking ...............................................................   0.000     0.000
    Mid to Low translation ..........................................................   0.011     0.011
    Low IR optimization .............................................................   0.015     0.031
      Low IR contraction ............................................................   0.007     0.007
      Low IR value numbering ........................................................   0.009     0.009
      Low IR checking ...............................................................   0.000     0.000
    Low to Tree translation .........................................................   0.011     0.011
    Tree IR optimization ............................................................   0.001     0.001
      Tree IR contraction ...........................................................   0.000     0.000
      Tree IR checking ..............................................................   0.000     0.000
    code generation .................................................................   0.010     0.859
      C compiler ....................................................................   0.849     0.849
