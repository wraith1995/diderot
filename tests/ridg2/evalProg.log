/* ParseTree: After parsing */
  Program @ [evalProg.diderot:4.1-199.0] 
    [
      Type: mesh_t= @ [evalProg.diderot:4.1-5.0] 
        Mesh @ [evalProg.diderot:4.6-10] 
        From File : evalProg.json @ [evalProg.diderot:4.1-5.0] 
      Const: dim= @ [evalProg.diderot:5.1-6.0] 
        Select @ [evalProg.diderot:5.17-27] 
          Var: mesh_t @ [evalProg.diderot:5.17-23] 
          dim
      Var @ [evalProg.diderot:6.1-7.0] 
        Decl: dimm= @ [evalProg.diderot:6.1-7.0] 
          Var: dim @ [evalProg.diderot:6.12-15] 
      Type: fns_t= @ [evalProg.diderot:7.1-8.0] 
        FunctionSpace(mesh_t) @ [evalProg.diderot:7.6-29] 
          [ ]
        From File : evalProg.json @ [evalProg.diderot:7.1-8.0] 
      Type: func_t= @ [evalProg.diderot:8.1-9.0] 
        FemFunction(fns_t) @ [evalProg.diderot:8.6-24] 
        From File : evalProg.json @ [evalProg.diderot:8.1-9.0] 
      Input: meshData @ [evalProg.diderot:10.1-11.0] 
      Input: space= @ [evalProg.diderot:11.1-12.0] 
        Apply @ [evalProg.diderot:11.21-36] 
          Var: fns_t @ [evalProg.diderot:11.21-26] 
          [
            Var: meshData @ [evalProg.diderot:11.27-35] 
          ]
      Input: data= @ [evalProg.diderot:12.1-13.0] 
        Apply @ [evalProg.diderot:12.21-34] 
          Var: func_t @ [evalProg.diderot:12.21-27] 
          [
            Var: space @ [evalProg.diderot:12.28-33] 
          ]
      Var @ [evalProg.diderot:14.1-15.0] 
        Decl: F= @ [evalProg.diderot:14.1-15.0] 
          Select @ [evalProg.diderot:14.18-24] 
            Var: data @ [evalProg.diderot:14.18-22] 
            F
      Var @ [evalProg.diderot:16.1-17.0] 
        Decl: simplex= @ [evalProg.diderot:16.1-17.0] 
          Apply @ [evalProg.diderot:16.27-45] 
            Select @ [evalProg.diderot:16.27-45] 
              Var: meshData @ [evalProg.diderot:16.27-35] 
              refcell
            [ ]
      Func: insideTest @ [evalProg.diderot:18.1-26.1] 
        Bool @ [evalProg.diderot:18.10-15] 
        [
          Param: x @ [evalProg.diderot:18.26-32] 
            Tensor @ [evalProg.diderot:18.26-31] 
              [
                Lit: 3 @ [evalProg.diderot:18.26-31] 
              ]
        ]
        Stmt @ [evalProg.diderot:18.1-26.1] 
          Block @ [evalProg.diderot:18.33-24.0] 
            [
              Decl @ [evalProg.diderot:18.33-24.0] 
                Decl: mid= @ [evalProg.diderot:19.3-20.0] 
                  BinOp: - @ [evalProg.diderot:19.14-33] 
                    Var: x @ [evalProg.diderot:19.14-15] 
                    Cons @ [evalProg.diderot:19.18-33] 
                      [
                        Lit: 0.e0 @ [evalProg.diderot:19.19-22] 
                        Lit: 0.e0 @ [evalProg.diderot:19.24-27] 
                        Lit: 0.e0 @ [evalProg.diderot:19.29-32] 
                      ]
              Decl @ [evalProg.diderot:18.33-24.0] 
                Decl: z= @ [evalProg.diderot:20.3-21.0] 
                  AndAlso @ [evalProg.diderot:20.12-62] 
                    BinOp: > @ [evalProg.diderot:20.12-27] 
                      UnaryOp: |()| @ [evalProg.diderot:20.12-20] 
                        Subscript @ [evalProg.diderot:20.13-19] 
                          Var: mid @ [evalProg.diderot:20.13-16] 
                          [
                            Lit: 0 @ [evalProg.diderot:20.17-18] 
                          ]
                      Lit: 0.1e0 @ [evalProg.diderot:20.23-26] 
                    AndAlso @ [evalProg.diderot:20.27-62] 
                      BinOp: > @ [evalProg.diderot:20.30-45] 
                        UnaryOp: |()| @ [evalProg.diderot:20.30-38] 
                          Subscript @ [evalProg.diderot:20.31-37] 
                            Var: mid @ [evalProg.diderot:20.31-34] 
                            [
                              Lit: 1 @ [evalProg.diderot:20.35-36] 
                            ]
                        Lit: 0.1e0 @ [evalProg.diderot:20.41-44] 
                      BinOp: > @ [evalProg.diderot:20.48-62] 
                        UnaryOp: |()| @ [evalProg.diderot:20.48-56] 
                          Subscript @ [evalProg.diderot:20.49-55] 
                            Var: mid @ [evalProg.diderot:20.49-52] 
                            [
                              Lit: 2 @ [evalProg.diderot:20.53-54] 
                            ]
                        Lit: 0.1e0 @ [evalProg.diderot:20.59-62] 
              Return @ [evalProg.diderot:21.3-22.0] 
                AndAlso @ [evalProg.diderot:21.10-41] 
                  BinOp: < @ [evalProg.diderot:21.10-22] 
                    UnaryOp: |()| @ [evalProg.diderot:21.10-15] 
                      Var: mid @ [evalProg.diderot:21.11-14] 
                    Lit: 0.5e1 @ [evalProg.diderot:21.18-21] 
                  AndAlso @ [evalProg.diderot:21.22-41] 
                    BinOp: > @ [evalProg.diderot:21.25-37] 
                      UnaryOp: |()| @ [evalProg.diderot:21.25-30] 
                        Var: mid @ [evalProg.diderot:21.26-29] 
                      Lit: 0.2e1 @ [evalProg.diderot:21.33-36] 
                    Var: z @ [evalProg.diderot:21.40-41] 
            ]
      Input: rad= @ [evalProg.diderot:26.1-27.0] 
        Lit: 0.1e-1 @ [evalProg.diderot:26.18-22] 
      Input: eps= @ [evalProg.diderot:27.1-28.0] 
        Lit: 0.1e-1 @ [evalProg.diderot:27.18-22] 
      Input: v0= @ [evalProg.diderot:28.1-29.0] 
        Lit: 0.625e-1 @ [evalProg.diderot:28.17-23] 
      Input: fBias= @ [evalProg.diderot:29.1-30.0] 
        Lit: 0.1e-1 @ [evalProg.diderot:29.20-24] 
      Input: fStren= @ [evalProg.diderot:30.1-31.0] 
        Lit: 0.1e-1 @ [evalProg.diderot:30.21-25] 
      Input: zfuz= @ [evalProg.diderot:31.1-32.0] 
        Lit: 0.1e-1 @ [evalProg.diderot:31.19-23] 
      Input: ipos @ [evalProg.diderot:32.1-33.0] 
      Func: grad @ [evalProg.diderot:37.1-46.1] 
        Tensor @ [evalProg.diderot:37.10-15] 
          [
            Lit: 3 @ [evalProg.diderot:37.10-15] 
          ]
        [
          Param: s @ [evalProg.diderot:37.20-26] 
            Tensor @ [evalProg.diderot:37.20-25] 
              [
                Lit: 3 @ [evalProg.diderot:37.20-25] 
              ]
        ]
        Stmt @ [evalProg.diderot:37.1-46.1] 
          Block @ [evalProg.diderot:37.27-45.0] 
            [
              Decl @ [evalProg.diderot:37.27-45.0] 
                Decl: x= @ [evalProg.diderot:38.3-39.0] 
                  Subscript @ [evalProg.diderot:38.12-16] 
                    Var: s @ [evalProg.diderot:38.12-13] 
                    [
                      Lit: 0 @ [evalProg.diderot:38.14-15] 
                    ]
              Decl @ [evalProg.diderot:37.27-45.0] 
                Decl: y= @ [evalProg.diderot:39.3-40.0] 
                  Subscript @ [evalProg.diderot:39.12-16] 
                    Var: s @ [evalProg.diderot:39.12-13] 
                    [
                      Lit: 1 @ [evalProg.diderot:39.14-15] 
                    ]
              Decl @ [evalProg.diderot:37.27-45.0] 
                Decl: z= @ [evalProg.diderot:40.3-41.0] 
                  Subscript @ [evalProg.diderot:40.12-16] 
                    Var: s @ [evalProg.diderot:40.12-13] 
                    [
                      Lit: 2 @ [evalProg.diderot:40.14-15] 
                    ]
              Decl @ [evalProg.diderot:37.27-45.0] 
                Decl: p= @ [evalProg.diderot:41.3-42.0] 
                  UnaryOp: unary - @ [evalProg.diderot:41.12-30] 
                    BinOp: + @ [evalProg.diderot:41.14-29] 
                      BinOp: + @ [evalProg.diderot:41.14-24] 
                        BinOp: * @ [evalProg.diderot:41.14-18] 
                          Var: x @ [evalProg.diderot:41.14-15] 
                          Var: x @ [evalProg.diderot:41.16-17] 
                        BinOp: * @ [evalProg.diderot:41.20-24] 
                          Var: y @ [evalProg.diderot:41.20-21] 
                          Var: y @ [evalProg.diderot:41.22-23] 
                      BinOp: * @ [evalProg.diderot:41.26-29] 
                        Var: z @ [evalProg.diderot:41.26-27] 
                        Var: z @ [evalProg.diderot:41.28-29] 
              Decl @ [evalProg.diderot:37.27-45.0] 
                Decl: g= @ [evalProg.diderot:42.3-43.0] 
                  Cons @ [evalProg.diderot:42.12-43] 
                    [
                      BinOp: * @ [evalProg.diderot:42.13-22] 
                        BinOp: ^ @ [evalProg.diderot:42.13-20] 
                          Var: y @ [evalProg.diderot:42.14-15] 
                          Lit: 2 @ [evalProg.diderot:42.18-19] 
                        Var: z @ [evalProg.diderot:42.21-22] 
                      BinOp: * @ [evalProg.diderot:42.24-31] 
                        BinOp: * @ [evalProg.diderot:42.24-29] 
                          BinOp: * @ [evalProg.diderot:42.24-27] 
                            Lit: 2 @ [evalProg.diderot:42.24-25] 
                            Var: x @ [evalProg.diderot:42.26-27] 
                          Var: y @ [evalProg.diderot:42.28-29] 
                        Var: z @ [evalProg.diderot:42.30-31] 
                      BinOp: * @ [evalProg.diderot:42.33-42] 
                        Var: x @ [evalProg.diderot:42.33-34] 
                        BinOp: ^ @ [evalProg.diderot:42.35-42] 
                          Var: y @ [evalProg.diderot:42.36-37] 
                          Lit: 2 @ [evalProg.diderot:42.40-41] 
                    ]
              Return @ [evalProg.diderot:43.3-44.0] 
                Var: g @ [evalProg.diderot:43.10-11] 
            ]
      Func: hess @ [evalProg.diderot:46.1-56.1] 
        Tensor @ [evalProg.diderot:46.10-21] 
          [
            Lit: 3 @ [evalProg.diderot:46.17-18] 
            Lit: 3 @ [evalProg.diderot:46.19-20] 
          ]
        [
          Param: s @ [evalProg.diderot:46.27-33] 
            Tensor @ [evalProg.diderot:46.27-32] 
              [
                Lit: 3 @ [evalProg.diderot:46.27-32] 
              ]
        ]
        Stmt @ [evalProg.diderot:46.1-56.1] 
          Block @ [evalProg.diderot:46.34-55.0] 
            [
              Decl @ [evalProg.diderot:46.34-55.0] 
                Decl: x= @ [evalProg.diderot:47.3-48.0] 
                  Subscript @ [evalProg.diderot:47.12-16] 
                    Var: s @ [evalProg.diderot:47.12-13] 
                    [
                      Lit: 0 @ [evalProg.diderot:47.14-15] 
                    ]
              Decl @ [evalProg.diderot:46.34-55.0] 
                Decl: y= @ [evalProg.diderot:48.3-49.0] 
                  Subscript @ [evalProg.diderot:48.12-16] 
                    Var: s @ [evalProg.diderot:48.12-13] 
                    [
                      Lit: 1 @ [evalProg.diderot:48.14-15] 
                    ]
              Decl @ [evalProg.diderot:46.34-55.0] 
                Decl: z= @ [evalProg.diderot:49.3-50.0] 
                  Subscript @ [evalProg.diderot:49.12-16] 
                    Var: s @ [evalProg.diderot:49.12-13] 
                    [
                      Lit: 2 @ [evalProg.diderot:49.14-15] 
                    ]
              Decl @ [evalProg.diderot:46.34-55.0] 
                Decl: p= @ [evalProg.diderot:50.3-51.0] 
                  UnaryOp: unary - @ [evalProg.diderot:50.12-30] 
                    BinOp: + @ [evalProg.diderot:50.14-29] 
                      BinOp: + @ [evalProg.diderot:50.14-24] 
                        BinOp: * @ [evalProg.diderot:50.14-18] 
                          Var: x @ [evalProg.diderot:50.14-15] 
                          Var: x @ [evalProg.diderot:50.16-17] 
                        BinOp: * @ [evalProg.diderot:50.20-24] 
                          Var: y @ [evalProg.diderot:50.20-21] 
                          Var: y @ [evalProg.diderot:50.22-23] 
                      BinOp: * @ [evalProg.diderot:50.26-29] 
                        Var: z @ [evalProg.diderot:50.26-27] 
                        Var: z @ [evalProg.diderot:50.28-29] 
              Decl @ [evalProg.diderot:46.34-55.0] 
                Decl: hess= @ [evalProg.diderot:51.3-52.0] 
                  Cons @ [evalProg.diderot:51.22-87] 
                    [
                      Cons @ [evalProg.diderot:51.23-42] 
                        [
                          Lit: 0 @ [evalProg.diderot:51.24-25] 
                          BinOp: * @ [evalProg.diderot:51.27-32] 
                            BinOp: * @ [evalProg.diderot:51.27-30] 
                              Lit: 2 @ [evalProg.diderot:51.27-28] 
                              Var: y @ [evalProg.diderot:51.29-30] 
                            Var: z @ [evalProg.diderot:51.31-32] 
                          BinOp: ^ @ [evalProg.diderot:51.34-41] 
                            Var: y @ [evalProg.diderot:51.35-36] 
                            Lit: 2 @ [evalProg.diderot:51.39-40] 
                        ]
                      Cons @ [evalProg.diderot:51.44-65] 
                        [
                          BinOp: * @ [evalProg.diderot:51.45-50] 
                            BinOp: * @ [evalProg.diderot:51.45-48] 
                              Lit: 2 @ [evalProg.diderot:51.45-46] 
                              Var: y @ [evalProg.diderot:51.47-48] 
                            Var: z @ [evalProg.diderot:51.49-50] 
                          BinOp: * @ [evalProg.diderot:51.52-57] 
                            BinOp: * @ [evalProg.diderot:51.52-55] 
                              Lit: 2 @ [evalProg.diderot:51.52-53] 
                              Var: x @ [evalProg.diderot:51.54-55] 
                            Var: z @ [evalProg.diderot:51.56-57] 
                          BinOp: * @ [evalProg.diderot:51.59-64] 
                            BinOp: * @ [evalProg.diderot:51.59-62] 
                              Lit: 2 @ [evalProg.diderot:51.59-60] 
                              Var: x @ [evalProg.diderot:51.61-62] 
                            Var: y @ [evalProg.diderot:51.63-64] 
                        ]
                      Cons @ [evalProg.diderot:51.67-86] 
                        [
                          BinOp: ^ @ [evalProg.diderot:51.68-75] 
                            Var: y @ [evalProg.diderot:51.69-70] 
                            Lit: 2 @ [evalProg.diderot:51.73-74] 
                          BinOp: * @ [evalProg.diderot:51.77-82] 
                            BinOp: * @ [evalProg.diderot:51.77-80] 
                              Lit: 2 @ [evalProg.diderot:51.77-78] 
                              Var: x @ [evalProg.diderot:51.79-80] 
                            Var: y @ [evalProg.diderot:51.81-82] 
                          Lit: 0 @ [evalProg.diderot:51.84-85] 
                        ]
                    ]
              Return @ [evalProg.diderot:53.3-54.0] 
                Var: hess @ [evalProg.diderot:53.10-14] 
            ]
      Func: fStep @ [evalProg.diderot:56.1-70.1] 
        Tensor @ [evalProg.diderot:56.10-15] 
          [
            Lit: 3 @ [evalProg.diderot:56.10-15] 
          ]
        [
          Param: s @ [evalProg.diderot:56.21-27] 
            Tensor @ [evalProg.diderot:56.21-26] 
              [
                Lit: 3 @ [evalProg.diderot:56.21-26] 
              ]
        ]
        Stmt @ [evalProg.diderot:56.1-70.1] 
          Block @ [evalProg.diderot:56.29-69.0] 
            [
              Decl @ [evalProg.diderot:56.29-69.0] 
                Decl: g= @ [evalProg.diderot:57.3-58.0] 
                  Apply @ [evalProg.diderot:57.12-19] 
                    Var: grad @ [evalProg.diderot:57.12-16] 
                    [
                      Var: s @ [evalProg.diderot:57.17-18] 
                    ]
              Decl @ [evalProg.diderot:56.29-69.0] 
                Decl: H= @ [evalProg.diderot:58.3-59.0] 
                  Apply @ [evalProg.diderot:58.19-26] 
                    Var: hess @ [evalProg.diderot:58.19-23] 
                    [
                      Var: s @ [evalProg.diderot:58.24-25] 
                    ]
              Decl @ [evalProg.diderot:56.29-69.0] 
                Decl: E= @ [evalProg.diderot:59.3-60.0] 
                  Apply @ [evalProg.diderot:59.15-23] 
                    Var: evecs @ [evalProg.diderot:59.15-20] 
                    [
                      Var: H @ [evalProg.diderot:59.21-22] 
                    ]
              Decl @ [evalProg.diderot:56.29-69.0] 
                Decl: L= @ [evalProg.diderot:60.3-61.0] 
                  Apply @ [evalProg.diderot:60.15-23] 
                    Var: evals @ [evalProg.diderot:60.15-20] 
                    [
                      Var: H @ [evalProg.diderot:60.21-22] 
                    ]
              Decl @ [evalProg.diderot:56.29-69.0] 
                Decl: up= @ [evalProg.diderot:61.3-62.0] 
                  BinOp: • @ [evalProg.diderot:61.14-39] 
                    BinOp: ⊗ @ [evalProg.diderot:61.14-35] 
                      BinOp: * @ [evalProg.diderot:61.14-28] 
                        UnaryOp: unary - @ [evalProg.diderot:61.14-23] 
                          BinOp: / @ [evalProg.diderot:61.16-22] 
                            Lit: 1 @ [evalProg.diderot:61.16-17] 
                            Subscript @ [evalProg.diderot:61.18-22] 
                              Var: L @ [evalProg.diderot:61.18-19] 
                              [
                                Lit: 2 @ [evalProg.diderot:61.20-21] 
                              ]
                        Subscript @ [evalProg.diderot:61.24-28] 
                          Var: E @ [evalProg.diderot:61.24-25] 
                          [
                            Lit: 2 @ [evalProg.diderot:61.26-27] 
                          ]
                      Subscript @ [evalProg.diderot:61.31-35] 
                        Var: E @ [evalProg.diderot:61.31-32] 
                        [
                          Lit: 2 @ [evalProg.diderot:61.33-34] 
                        ]
                    Var: g @ [evalProg.diderot:61.38-39] 
              IfThen @ [evalProg.diderot:62.3-66.3] 
                OrElse @ [evalProg.diderot:62.6-66] 
                  UnaryOp: ! @ [evalProg.diderot:62.6-24] 
                    BinOp: == @ [evalProg.diderot:62.8-22] 
                      Subscript @ [evalProg.diderot:62.8-13] 
                        Var: up @ [evalProg.diderot:62.8-10] 
                        [
                          Lit: 0 @ [evalProg.diderot:62.11-12] 
                        ]
                      Subscript @ [evalProg.diderot:62.17-22] 
                        Var: up @ [evalProg.diderot:62.17-19] 
                        [
                          Lit: 0 @ [evalProg.diderot:62.20-21] 
                        ]
                  OrElse @ [evalProg.diderot:62.24-66] 
                    UnaryOp: ! @ [evalProg.diderot:62.28-46] 
                      BinOp: == @ [evalProg.diderot:62.30-44] 
                        Subscript @ [evalProg.diderot:62.30-35] 
                          Var: up @ [evalProg.diderot:62.30-32] 
                          [
                            Lit: 1 @ [evalProg.diderot:62.33-34] 
                          ]
                        Subscript @ [evalProg.diderot:62.39-44] 
                          Var: up @ [evalProg.diderot:62.39-41] 
                          [
                            Lit: 1 @ [evalProg.diderot:62.42-43] 
                          ]
                    UnaryOp: ! @ [evalProg.diderot:62.49-66] 
                      BinOp: == @ [evalProg.diderot:62.51-65] 
                        Subscript @ [evalProg.diderot:62.51-56] 
                          Var: up @ [evalProg.diderot:62.51-53] 
                          [
                            Lit: 2 @ [evalProg.diderot:62.54-55] 
                          ]
                        Subscript @ [evalProg.diderot:62.60-65] 
                          Var: up @ [evalProg.diderot:62.60-62] 
                          [
                            Lit: 2 @ [evalProg.diderot:62.63-64] 
                          ]
                Return @ [evalProg.diderot:63.5-64.0] 
                  Cons @ [evalProg.diderot:63.12-27] 
                    [
                      Lit: +inf @ [evalProg.diderot:63.13-16] 
                      Lit: +inf @ [evalProg.diderot:63.18-21] 
                      Lit: +inf @ [evalProg.diderot:63.23-26] 
                    ]
              Return @ [evalProg.diderot:66.3-67.0] 
                Var: up @ [evalProg.diderot:66.10-12] 
            ]
      Func: posNanCheck @ [evalProg.diderot:70.1-74.1] 
        Bool @ [evalProg.diderot:70.10-15] 
        [
          Param: up @ [evalProg.diderot:70.27-34] 
            Tensor @ [evalProg.diderot:70.27-32] 
              [
                Lit: 3 @ [evalProg.diderot:70.27-32] 
              ]
        ]
        Stmt @ [evalProg.diderot:70.1-74.1] 
          Return @ [evalProg.diderot:71.3-72.0] 
            OrElse @ [evalProg.diderot:71.11-71] 
              UnaryOp: ! @ [evalProg.diderot:71.11-29] 
                BinOp: == @ [evalProg.diderot:71.13-27] 
                  Subscript @ [evalProg.diderot:71.13-18] 
                    Var: up @ [evalProg.diderot:71.13-15] 
                    [
                      Lit: 0 @ [evalProg.diderot:71.16-17] 
                    ]
                  Subscript @ [evalProg.diderot:71.22-27] 
                    Var: up @ [evalProg.diderot:71.22-24] 
                    [
                      Lit: 0 @ [evalProg.diderot:71.25-26] 
                    ]
              OrElse @ [evalProg.diderot:71.29-71] 
                UnaryOp: ! @ [evalProg.diderot:71.33-51] 
                  BinOp: == @ [evalProg.diderot:71.35-49] 
                    Subscript @ [evalProg.diderot:71.35-40] 
                      Var: up @ [evalProg.diderot:71.35-37] 
                      [
                        Lit: 1 @ [evalProg.diderot:71.38-39] 
                      ]
                    Subscript @ [evalProg.diderot:71.44-49] 
                      Var: up @ [evalProg.diderot:71.44-46] 
                      [
                        Lit: 1 @ [evalProg.diderot:71.47-48] 
                      ]
                UnaryOp: ! @ [evalProg.diderot:71.54-71] 
                  BinOp: == @ [evalProg.diderot:71.56-70] 
                    Subscript @ [evalProg.diderot:71.56-61] 
                      Var: up @ [evalProg.diderot:71.56-58] 
                      [
                        Lit: 2 @ [evalProg.diderot:71.59-60] 
                      ]
                    Subscript @ [evalProg.diderot:71.65-70] 
                      Var: up @ [evalProg.diderot:71.65-67] 
                      [
                        Lit: 2 @ [evalProg.diderot:71.68-69] 
                      ]
      Func: fPerp @ [evalProg.diderot:74.1-86.1] 
        Tensor @ [evalProg.diderot:74.10-21] 
          [
            Lit: 3 @ [evalProg.diderot:74.17-18] 
            Lit: 3 @ [evalProg.diderot:74.19-20] 
          ]
        [
          Param: s @ [evalProg.diderot:74.28-34] 
            Tensor @ [evalProg.diderot:74.28-33] 
              [
                Lit: 3 @ [evalProg.diderot:74.28-33] 
              ]
        ]
        Stmt @ [evalProg.diderot:74.1-86.1] 
          Block @ [evalProg.diderot:74.36-85.0] 
            [
              Decl @ [evalProg.diderot:74.36-85.0] 
                Decl: g= @ [evalProg.diderot:75.3-76.0] 
                  Apply @ [evalProg.diderot:75.12-19] 
                    Var: grad @ [evalProg.diderot:75.12-16] 
                    [
                      Var: s @ [evalProg.diderot:75.17-18] 
                    ]
              Decl @ [evalProg.diderot:74.36-85.0] 
                Decl: H= @ [evalProg.diderot:76.3-77.0] 
                  Apply @ [evalProg.diderot:76.19-26] 
                    Var: hess @ [evalProg.diderot:76.19-23] 
                    [
                      Var: s @ [evalProg.diderot:76.24-25] 
                    ]
              Decl @ [evalProg.diderot:74.36-85.0] 
                Decl: E2= @ [evalProg.diderot:77.3-78.0] 
                  Subscript @ [evalProg.diderot:77.13-24] 
                    Apply @ [evalProg.diderot:77.13-24] 
                      Var: evecs @ [evalProg.diderot:77.13-18] 
                      [
                        Var: H @ [evalProg.diderot:77.19-20] 
                      ]
                    [
                      Lit: 2 @ [evalProg.diderot:77.22-23] 
                    ]
              Decl @ [evalProg.diderot:74.36-85.0] 
                Decl: m= @ [evalProg.diderot:78.3-79.0] 
                  BinOp: - @ [evalProg.diderot:78.13-34] 
                    Id @ [evalProg.diderot:78.13-24] 
                      Lit: 3 @ [evalProg.diderot:78.22-23] 
                    BinOp: ⊗ @ [evalProg.diderot:78.27-34] 
                      Var: E2 @ [evalProg.diderot:78.27-29] 
                      Var: E2 @ [evalProg.diderot:78.32-34] 
              Decl @ [evalProg.diderot:74.36-85.0] 
                Decl: t= @ [evalProg.diderot:79.3-80.0] 
                  BinOp: : @ [evalProg.diderot:79.12-17] 
                    Var: m @ [evalProg.diderot:79.12-13] 
                    Var: m @ [evalProg.diderot:79.16-17] 
              IfThen @ [evalProg.diderot:80.3-83.3] 
                UnaryOp: ! @ [evalProg.diderot:80.6-15] 
                  BinOp: == @ [evalProg.diderot:80.8-14] 
                    Var: t @ [evalProg.diderot:80.8-9] 
                    Var: t @ [evalProg.diderot:80.13-14] 
                Return @ [evalProg.diderot:81.5-82.0] 
                  Zero @ [evalProg.diderot:81.12-22] 
                    [
                      Lit: 3 @ [evalProg.diderot:81.18-19] 
                      Lit: 3 @ [evalProg.diderot:81.20-21] 
                    ]
              Return @ [evalProg.diderot:83.3-84.0] 
                Var: m @ [evalProg.diderot:83.10-11] 
            ]
      Func: fStrength @ [evalProg.diderot:86.1-93.1] 
        Tensor @ [evalProg.diderot:86.10-15] 
          [ ]
        [
          Param: s @ [evalProg.diderot:86.25-31] 
            Tensor @ [evalProg.diderot:86.25-30] 
              [
                Lit: 3 @ [evalProg.diderot:86.25-30] 
              ]
        ]
        Stmt @ [evalProg.diderot:86.1-93.1] 
          Block @ [evalProg.diderot:86.33-92.0] 
            [
              Decl @ [evalProg.diderot:86.33-92.0] 
                Decl: g= @ [evalProg.diderot:87.3-88.0] 
                  Apply @ [evalProg.diderot:87.12-19] 
                    Var: grad @ [evalProg.diderot:87.12-16] 
                    [
                      Var: s @ [evalProg.diderot:87.17-18] 
                    ]
              Decl @ [evalProg.diderot:86.33-92.0] 
                Decl: H= @ [evalProg.diderot:88.3-89.0] 
                  Apply @ [evalProg.diderot:88.19-26] 
                    Var: hess @ [evalProg.diderot:88.19-23] 
                    [
                      Var: s @ [evalProg.diderot:88.24-25] 
                    ]
              Decl @ [evalProg.diderot:86.33-92.0] 
                Decl: str= @ [evalProg.diderot:89.3-90.0] 
                  BinOp: / @ [evalProg.diderot:89.14-40] 
                    UnaryOp: unary - @ [evalProg.diderot:89.14-26] 
                      Subscript @ [evalProg.diderot:89.15-26] 
                        Apply @ [evalProg.diderot:89.15-26] 
                          Var: evals @ [evalProg.diderot:89.15-20] 
                          [
                            Var: H @ [evalProg.diderot:89.21-22] 
                          ]
                        [
                          Lit: 2 @ [evalProg.diderot:89.24-25] 
                        ]
                    BinOp: + @ [evalProg.diderot:89.28-39] 
                      Var: fBias @ [evalProg.diderot:89.28-33] 
                      UnaryOp: |()| @ [evalProg.diderot:89.36-39] 
                        Var: g @ [evalProg.diderot:89.37-38] 
              Return @ [evalProg.diderot:90.3-91.0] 
                Var: str @ [evalProg.diderot:90.10-13] 
            ]
      Func: phi @ [evalProg.diderot:93.1-94.0] 
        Tensor @ [evalProg.diderot:93.10-15] 
          [ ]
        [
          Param: r @ [evalProg.diderot:93.19-25] 
            Tensor @ [evalProg.diderot:93.19-24] 
              [ ]
        ]
        Expr @ [evalProg.diderot:93.1-94.0] 
          BinOp: ^ @ [evalProg.diderot:93.29-36] 
            BinOp: - @ [evalProg.diderot:93.30-33] 
              Lit: 1 @ [evalProg.diderot:93.30-31] 
              Var: r @ [evalProg.diderot:93.32-33] 
            Lit: 4 @ [evalProg.diderot:93.35-36] 
      Func: phi' @ [evalProg.diderot:94.1-95.0] 
        Tensor @ [evalProg.diderot:94.10-15] 
          [ ]
        [
          Param: r @ [evalProg.diderot:94.20-26] 
            Tensor @ [evalProg.diderot:94.20-25] 
              [ ]
        ]
        Expr @ [evalProg.diderot:94.1-95.0] 
          BinOp: * @ [evalProg.diderot:94.30-42] 
            UnaryOp: unary - @ [evalProg.diderot:94.30-33] 
              Lit: 4 @ [evalProg.diderot:94.31-32] 
            BinOp: ^ @ [evalProg.diderot:94.35-42] 
              BinOp: - @ [evalProg.diderot:94.36-39] 
                Lit: 1 @ [evalProg.diderot:94.36-37] 
                Var: r @ [evalProg.diderot:94.38-39] 
              Lit: 3 @ [evalProg.diderot:94.41-42] 
      Func: enr @ [evalProg.diderot:95.1-96.0] 
        Tensor @ [evalProg.diderot:95.10-15] 
          [ ]
        [
          Param: x @ [evalProg.diderot:95.19-32] 
            Tensor @ [evalProg.diderot:95.19-30] 
              [
                Var: dim @ [evalProg.diderot:95.26-29] 
              ]
        ]
        Expr @ [evalProg.diderot:95.1-96.0] 
          Apply @ [evalProg.diderot:95.36-48] 
            Var: phi @ [evalProg.diderot:95.36-39] 
            [
              BinOp: / @ [evalProg.diderot:95.40-47] 
                UnaryOp: |()| @ [evalProg.diderot:95.40-43] 
                  Var: x @ [evalProg.diderot:95.41-42] 
                Var: rad @ [evalProg.diderot:95.44-47] 
            ]
      Func: frc @ [evalProg.diderot:96.1-97.0] 
        Tensor @ [evalProg.diderot:96.10-21] 
          [
            Var: dim @ [evalProg.diderot:96.17-20] 
          ]
        [
          Param: x @ [evalProg.diderot:96.26-39] 
            Tensor @ [evalProg.diderot:96.26-37] 
              [
                Var: dim @ [evalProg.diderot:96.33-36] 
              ]
        ]
        Expr @ [evalProg.diderot:96.1-97.0] 
          BinOp: / @ [evalProg.diderot:96.43-74] 
            BinOp: * @ [evalProg.diderot:96.43-70] 
              BinOp: * @ [evalProg.diderot:96.43-67] 
                Apply @ [evalProg.diderot:96.43-56] 
                  Var: phi' @ [evalProg.diderot:96.43-47] 
                  [
                    BinOp: / @ [evalProg.diderot:96.48-55] 
                      UnaryOp: |()| @ [evalProg.diderot:96.48-51] 
                        Var: x @ [evalProg.diderot:96.49-50] 
                      Var: rad @ [evalProg.diderot:96.52-55] 
                  ]
                BinOp: / @ [evalProg.diderot:96.60-65] 
                  Lit: 1 @ [evalProg.diderot:96.60-61] 
                  Var: rad @ [evalProg.diderot:96.62-65] 
              Var: x @ [evalProg.diderot:96.69-70] 
            UnaryOp: |()| @ [evalProg.diderot:96.71-74] 
              Var: x @ [evalProg.diderot:96.72-73] 
      Func: posTest @ [evalProg.diderot:98.1-102.1] 
        Bool @ [evalProg.diderot:98.10-15] 
        [
          Param: pos @ [evalProg.diderot:98.23-31] 
            Tensor @ [evalProg.diderot:98.23-28] 
              [
                Lit: 3 @ [evalProg.diderot:98.23-28] 
              ]
        ]
        Stmt @ [evalProg.diderot:98.1-102.1] 
          Return @ [evalProg.diderot:99.3-100.0] 
            AndAlso @ [evalProg.diderot:99.11-77] 
              Apply @ [evalProg.diderot:99.11-26] 
                Var: insideTest @ [evalProg.diderot:99.11-21] 
                [
                  Var: pos @ [evalProg.diderot:99.22-25] 
                ]
              AndAlso @ [evalProg.diderot:99.27-77] 
                UnaryOp: ! @ [evalProg.diderot:99.30-48] 
                  Apply @ [evalProg.diderot:99.31-47] 
                    Var: posNanCheck @ [evalProg.diderot:99.31-42] 
                    [
                      Var: pos @ [evalProg.diderot:99.43-46] 
                    ]
                BinOp: >= @ [evalProg.diderot:99.52-76] 
                  Apply @ [evalProg.diderot:99.52-66] 
                    Var: fStrength @ [evalProg.diderot:99.52-61] 
                    [
                      Var: pos @ [evalProg.diderot:99.62-65] 
                    ]
                  Var: fStren @ [evalProg.diderot:99.70-76] 
    ]
    Strand: particle @ [evalProg.diderot:102.1-187.1] 
      [
        Param: pos0 @ [evalProg.diderot:102.17-33] 
          Tensor @ [evalProg.diderot:102.17-28] 
            [
              Var: dim @ [evalProg.diderot:102.24-27] 
            ]
        Param: hh0 @ [evalProg.diderot:102.35-43] 
          Tensor @ [evalProg.diderot:102.35-40] 
            [ ]
      ]
      [
        VarDcl: output @ [evalProg.diderot:103.3-104.0] 
        VarDcl @ [evalProg.diderot:104.3-105.0] 
        VarDcl @ [evalProg.diderot:105.3-106.0] 
        VarDcl @ [evalProg.diderot:106.3-107.0] 
        VarDcl @ [evalProg.diderot:107.3-108.0] 
        VarDcl @ [evalProg.diderot:108.3-109.0] 
        VarDcl @ [evalProg.diderot:109.3-110.0] 
        VarDcl @ [evalProg.diderot:110.3-111.0] 
      ]
      [
        Method: Update @ [evalProg.diderot:111.3-186.1] 
          Block @ [evalProg.diderot:111.10-186.0] 
            [
              Assign: steps+= @ [evalProg.diderot:112.5-113.0] 
                Lit: 1 @ [evalProg.diderot:112.12-13] 
              IfThen @ [evalProg.diderot:113.5-116.5] 
                UnaryOp: ! @ [evalProg.diderot:113.8-21] 
                  Apply @ [evalProg.diderot:113.9-21] 
                    Var: posTest @ [evalProg.diderot:113.9-16] 
                    [
                      Var: pos @ [evalProg.diderot:113.17-20] 
                    ]
                Die @ [evalProg.diderot:114.7-115.0] 
              IfThenElse @ [evalProg.diderot:116.5-185.0] 
                UnaryOp: ! @ [evalProg.diderot:116.8-14] 
                  Var: found @ [evalProg.diderot:116.9-14] 
                Block @ [evalProg.diderot:116.16-129.0] 
                  [
                    Assign: step= @ [evalProg.diderot:117.7-118.0] 
                      Apply @ [evalProg.diderot:117.14-24] 
                        Var: fStep @ [evalProg.diderot:117.14-19] 
                        [
                          Var: pos @ [evalProg.diderot:117.20-23] 
                        ]
                    Assign: pos= @ [evalProg.diderot:118.7-119.0] 
                      BinOp: + @ [evalProg.diderot:118.13-23] 
                        Var: pos @ [evalProg.diderot:118.13-16] 
                        Var: step @ [evalProg.diderot:118.19-23] 
                    IfThen @ [evalProg.diderot:119.7-120.7] 
                      Apply @ [evalProg.diderot:119.10-26] 
                        Var: posNanCheck @ [evalProg.diderot:119.10-21] 
                        [
                          Var: pos @ [evalProg.diderot:119.22-25] 
                        ]
                      Die @ [evalProg.diderot:119.28-32] 
                    IfThenElse @ [evalProg.diderot:120.7-128.0] 
                      BinOp: > @ [evalProg.diderot:120.10-26] 
                        BinOp: / @ [evalProg.diderot:120.10-21] 
                          UnaryOp: |()| @ [evalProg.diderot:120.10-16] 
                            Var: step @ [evalProg.diderot:120.11-15] 
                          Var: rad @ [evalProg.diderot:120.17-20] 
                        Var: eps @ [evalProg.diderot:120.23-26] 
                      Block @ [evalProg.diderot:120.27-124.8] 
                        [
                          Assign: nfs+= @ [evalProg.diderot:121.2-122.0] 
                            Lit: 1 @ [evalProg.diderot:121.9-10] 
                          IfThen @ [evalProg.diderot:122.2-124.7] 
                            BinOp: > @ [evalProg.diderot:122.5-13] 
                              Var: nfs @ [evalProg.diderot:122.5-8] 
                              Lit: 10 @ [evalProg.diderot:122.11-13] 
                            Die @ [evalProg.diderot:122.17-21] 
                        ]
                      Block @ [evalProg.diderot:124.14-128.0] 
                        [
                          Assign: found= @ [evalProg.diderot:125.2-15] 
                            Lit: true @ [evalProg.diderot:125.10-14] 
                          Assign: testp= @ [evalProg.diderot:125.16-126.0] 
                            Lit: 1 @ [evalProg.diderot:125.22-23] 
                        ]
                  ]
                Block @ [evalProg.diderot:129.10-185.0] 
                  [
                    Assign: pos= @ [evalProg.diderot:130.2-131.0] 
                      BinOp: + @ [evalProg.diderot:130.8-24] 
                        Var: pos @ [evalProg.diderot:130.8-11] 
                        Apply @ [evalProg.diderot:130.14-24] 
                          Var: fStep @ [evalProg.diderot:130.14-19] 
                          [
                            Var: pos @ [evalProg.diderot:130.20-23] 
                          ]
                    IfThen @ [evalProg.diderot:131.2-132.2] 
                      Apply @ [evalProg.diderot:131.5-21] 
                        Var: posNanCheck @ [evalProg.diderot:131.5-16] 
                        [
                          Var: pos @ [evalProg.diderot:131.17-20] 
                        ]
                      Die @ [evalProg.diderot:131.23-27] 
                    Assign: step= @ [evalProg.diderot:132.2-133.0] 
                      Zero @ [evalProg.diderot:132.9-19] 
                        [
                          Var: dim @ [evalProg.diderot:132.15-18] 
                        ]
                    Decl @ [evalProg.diderot:129.10-185.0] 
                      Decl: oldE= @ [evalProg.diderot:133.2-134.0] 
                        Lit: 0 @ [evalProg.diderot:133.14-15] 
                    Decl @ [evalProg.diderot:129.10-185.0] 
                      Decl: force= @ [evalProg.diderot:134.2-135.0] 
                        Zero @ [evalProg.diderot:134.22-32] 
                          [
                            Var: dim @ [evalProg.diderot:134.28-31] 
                          ]
                    Decl @ [evalProg.diderot:129.10-185.0] 
                      Decl: nn= @ [evalProg.diderot:135.2-136.0] 
                        Lit: 0 @ [evalProg.diderot:135.11-12] 
                    Foreach @ [evalProg.diderot:139.2-144.0] 
                      Id: particle @ [evalProg.diderot:139.11-20] 
                      Iterator: P @ [evalProg.diderot:139.20-36] 
                        Apply @ [evalProg.diderot:139.25-36] 
                          Var: sphere @ [evalProg.diderot:139.25-31] 
                          [
                            Var: rad @ [evalProg.diderot:139.32-35] 
                          ]
                      Block @ [evalProg.diderot:139.37-144.0] 
                        [
                          Assign: oldE+= @ [evalProg.diderot:140.4-141.0] 
                            Apply @ [evalProg.diderot:140.12-28] 
                              Var: enr @ [evalProg.diderot:140.12-15] 
                              [
                                BinOp: - @ [evalProg.diderot:140.16-27] 
                                  Select @ [evalProg.diderot:140.16-21] 
                                    Var: P @ [evalProg.diderot:140.16-17] 
                                    pos
                                  Var: pos @ [evalProg.diderot:140.24-27] 
                              ]
                          Assign: force+= @ [evalProg.diderot:141.4-142.0] 
                            Apply @ [evalProg.diderot:141.13-29] 
                              Var: frc @ [evalProg.diderot:141.13-16] 
                              [
                                BinOp: - @ [evalProg.diderot:141.17-28] 
                                  Select @ [evalProg.diderot:141.17-22] 
                                    Var: P @ [evalProg.diderot:141.17-18] 
                                    pos
                                  Var: pos @ [evalProg.diderot:141.25-28] 
                              ]
                          Assign: nn+= @ [evalProg.diderot:142.4-143.0] 
                            Lit: 1 @ [evalProg.diderot:142.10-11] 
                        ]
                    IfThen @ [evalProg.diderot:144.2-153.2] 
                      BinOp: == @ [evalProg.diderot:144.6-13] 
                        Lit: 0 @ [evalProg.diderot:144.6-7] 
                        Var: nn @ [evalProg.diderot:144.11-13] 
                      Block @ [evalProg.diderot:144.14-153.0] 
                        [
                          Decl @ [evalProg.diderot:144.14-153.0] 
                            Decl: npos= @ [evalProg.diderot:147.4-148.0] 
                              BinOp: + @ [evalProg.diderot:147.16-37] 
                                Var: pos @ [evalProg.diderot:147.16-19] 
                                Cons @ [evalProg.diderot:147.22-37] 
                                  [
                                    BinOp: * @ [evalProg.diderot:147.23-30] 
                                      Lit: 0.5e0 @ [evalProg.diderot:147.23-26] 
                                      Var: rad @ [evalProg.diderot:147.27-30] 
                                    Lit: 0 @ [evalProg.diderot:147.32-33] 
                                    Lit: 0 @ [evalProg.diderot:147.34-35] 
                                  ]
                          IfThen @ [evalProg.diderot:148.4-151.4] 
                            Apply @ [evalProg.diderot:148.7-20] 
                              Var: posTest @ [evalProg.diderot:148.7-14] 
                              [
                                Var: npos @ [evalProg.diderot:148.15-19] 
                              ]
                            New: particle @ [evalProg.diderot:149.6-150.0] 
                              [
                                Var: npos @ [evalProg.diderot:149.19-23] 
                                Var: hh @ [evalProg.diderot:149.25-27] 
                              ]
                          Continue @ [evalProg.diderot:151.4-152.0] 
                        ]
                    Assign: force= @ [evalProg.diderot:153.2-154.0] 
                      BinOp: • @ [evalProg.diderot:153.10-30] 
                        Apply @ [evalProg.diderot:153.10-20] 
                          Var: fPerp @ [evalProg.diderot:153.10-15] 
                          [
                            Var: pos @ [evalProg.diderot:153.16-19] 
                          ]
                        Var: force @ [evalProg.diderot:153.25-30] 
                    Decl @ [evalProg.diderot:129.10-185.0] 
                      Decl: es= @ [evalProg.diderot:154.2-155.0] 
                        BinOp: * @ [evalProg.diderot:154.19-27] 
                          Var: hh @ [evalProg.diderot:154.19-21] 
                          Var: force @ [evalProg.diderot:154.22-27] 
                    IfThen @ [evalProg.diderot:155.2-159.2] 
                      BinOp: > @ [evalProg.diderot:155.5-15] 
                        UnaryOp: |()| @ [evalProg.diderot:155.5-9] 
                          Var: es @ [evalProg.diderot:155.6-8] 
                        Var: rad @ [evalProg.diderot:155.12-15] 
                      Block @ [evalProg.diderot:155.16-159.0] 
                        [
                          Assign: hh*= @ [evalProg.diderot:156.4-157.0] 
                            BinOp: / @ [evalProg.diderot:156.10-18] 
                              Var: rad @ [evalProg.diderot:156.10-13] 
                              UnaryOp: |()| @ [evalProg.diderot:156.14-18] 
                                Var: es @ [evalProg.diderot:156.15-17] 
                          Assign: es*= @ [evalProg.diderot:157.4-158.0] 
                            BinOp: / @ [evalProg.diderot:157.10-18] 
                              Var: rad @ [evalProg.diderot:157.10-13] 
                              UnaryOp: |()| @ [evalProg.diderot:157.14-18] 
                                Var: es @ [evalProg.diderot:157.15-17] 
                        ]
                    Decl @ [evalProg.diderot:129.10-185.0] 
                      Decl: samplePos= @ [evalProg.diderot:159.2-160.0] 
                        BinOp: + @ [evalProg.diderot:159.26-34] 
                          Var: pos @ [evalProg.diderot:159.26-29] 
                          Var: es @ [evalProg.diderot:159.32-34] 
                    Decl @ [evalProg.diderot:129.10-185.0] 
                      Decl: fs= @ [evalProg.diderot:160.2-161.0] 
                        Apply @ [evalProg.diderot:160.19-35] 
                          Var: fStep @ [evalProg.diderot:160.19-24] 
                          [
                            Var: samplePos @ [evalProg.diderot:160.25-34] 
                          ]
                    IfThen @ [evalProg.diderot:161.2-165.2] 
                      BinOp: > @ [evalProg.diderot:161.6-21] 
                        BinOp: / @ [evalProg.diderot:161.6-16] 
                          UnaryOp: |()| @ [evalProg.diderot:161.6-10] 
                            Var: fs @ [evalProg.diderot:161.7-9] 
                          UnaryOp: |()| @ [evalProg.diderot:161.11-15] 
                            Var: es @ [evalProg.diderot:161.12-14] 
                        Lit: 0.5e0 @ [evalProg.diderot:161.18-21] 
                      Block @ [evalProg.diderot:161.22-165.0] 
                        [
                          Assign: hh*= @ [evalProg.diderot:162.4-163.0] 
                            Lit: 0.5e0 @ [evalProg.diderot:162.10-13] 
                          Continue @ [evalProg.diderot:163.4-164.0] 
                        ]
                    Decl @ [evalProg.diderot:129.10-185.0] 
                      Decl: oldPos= @ [evalProg.diderot:165.2-166.0] 
                        Var: pos @ [evalProg.diderot:165.23-26] 
                    Decl @ [evalProg.diderot:129.10-185.0] 
                      Decl: up= @ [evalProg.diderot:166.2-167.0] 
                        BinOp: + @ [evalProg.diderot:166.19-26] 
                          Var: fs @ [evalProg.diderot:166.19-21] 
                          Var: es @ [evalProg.diderot:166.24-26] 
                    Assign: pos+= @ [evalProg.diderot:167.2-168.0] 
                      Var: up @ [evalProg.diderot:167.9-11] 
                    Decl @ [evalProg.diderot:129.10-185.0] 
                      Decl: newE= @ [evalProg.diderot:168.2-169.0] 
                        Apply @ [evalProg.diderot:168.14-55] 
                          Var: sum @ [evalProg.diderot:168.14-17] 
                          [
                            SeqComp @ [evalProg.diderot:168.14-55] 
                              Comprehension @ [evalProg.diderot:168.14-55] 
                                Apply @ [evalProg.diderot:168.19-35] 
                                  Var: enr @ [evalProg.diderot:168.19-22] 
                                  [
                                    BinOp: - @ [evalProg.diderot:168.23-34] 
                                      Var: pos @ [evalProg.diderot:168.23-26] 
                                      Select @ [evalProg.diderot:168.29-34] 
                                        Var: P @ [evalProg.diderot:168.29-30] 
                                        pos
                                  ]
                                [
                                  Iterator: P @ [evalProg.diderot:168.38-54] 
                                    Apply @ [evalProg.diderot:168.43-54] 
                                      Var: sphere @ [evalProg.diderot:168.43-49] 
                                      [
                                        Var: rad @ [evalProg.diderot:168.50-53] 
                                      ]
                                ]
                          ]
                    IfThen @ [evalProg.diderot:169.2-174.2] 
                      BinOp: > @ [evalProg.diderot:169.6-54] 
                        BinOp: - @ [evalProg.diderot:169.6-18] 
                          Var: newE @ [evalProg.diderot:169.6-10] 
                          Var: oldE @ [evalProg.diderot:169.13-17] 
                        BinOp: • @ [evalProg.diderot:169.20-54] 
                          BinOp: * @ [evalProg.diderot:169.20-41] 
                            Lit: 0.5e0 @ [evalProg.diderot:169.20-23] 
                            BinOp: - @ [evalProg.diderot:169.27-39] 
                              Var: pos @ [evalProg.diderot:169.27-30] 
                              Var: oldPos @ [evalProg.diderot:169.33-39] 
                          UnaryOp: unary - @ [evalProg.diderot:169.46-53] 
                            Var: force @ [evalProg.diderot:169.47-52] 
                      Block @ [evalProg.diderot:169.56-174.0] 
                        [
                          Assign: pos= @ [evalProg.diderot:170.4-171.0] 
                            Var: oldPos @ [evalProg.diderot:170.10-16] 
                          Assign: hh*= @ [evalProg.diderot:171.4-172.0] 
                            Lit: 0.5e0 @ [evalProg.diderot:171.10-13] 
                          Continue @ [evalProg.diderot:172.4-173.0] 
                        ]
                    Assign: hh*= @ [evalProg.diderot:174.2-175.0] 
                      Lit: 0.11e1 @ [evalProg.diderot:174.8-11] 
                    Assign: step= @ [evalProg.diderot:175.2-176.0] 
                      Var: up @ [evalProg.diderot:175.9-11] 
                    IfThen @ [evalProg.diderot:176.2-178.2] 
                      Apply @ [evalProg.diderot:176.5-21] 
                        Var: posNanCheck @ [evalProg.diderot:176.5-16] 
                        [
                          Var: pos @ [evalProg.diderot:176.17-20] 
                        ]
                      Die @ [evalProg.diderot:176.23-27] 
                    IfThen @ [evalProg.diderot:178.2-184.7] 
                      BinOp: < @ [evalProg.diderot:178.6-12] 
                        Var: nn @ [evalProg.diderot:178.6-8] 
                        Lit: 5 @ [evalProg.diderot:178.11-12] 
                      Block @ [evalProg.diderot:178.13-184.0] 
                        [
                          Decl @ [evalProg.diderot:178.13-184.0] 
                            Decl: npos= @ [evalProg.diderot:179.4-180.0] 
                              BinOp: + @ [evalProg.diderot:179.16-47] 
                                Var: pos @ [evalProg.diderot:179.16-19] 
                                BinOp: * @ [evalProg.diderot:179.22-47] 
                                  BinOp: * @ [evalProg.diderot:179.22-32] 
                                    Lit: 0.5e0 @ [evalProg.diderot:179.22-25] 
                                    Var: rad @ [evalProg.diderot:179.28-31] 
                                  Apply @ [evalProg.diderot:179.34-47] 
                                    Var: normalize @ [evalProg.diderot:179.34-43] 
                                    [
                                      Var: es @ [evalProg.diderot:179.44-46] 
                                    ]
                          IfThen @ [evalProg.diderot:180.4-183.2] 
                            Apply @ [evalProg.diderot:180.7-20] 
                              Var: posTest @ [evalProg.diderot:180.7-14] 
                              [
                                Var: npos @ [evalProg.diderot:180.15-19] 
                              ]
                            New: particle @ [evalProg.diderot:181.6-182.0] 
                              [
                                Var: npos @ [evalProg.diderot:181.19-23] 
                                Var: hh @ [evalProg.diderot:181.25-27] 
                              ]
                        ]
                  ]
            ]
      ]
    Collection @ [evalProg.diderot:198.1-199.0] 
      Comprehension @ [evalProg.diderot:198.19-47] 
        Apply @ [evalProg.diderot:198.20-34] 
          Var: particle @ [evalProg.diderot:198.20-28] 
          [
            Var: x @ [evalProg.diderot:198.29-30] 
            Lit: 1 @ [evalProg.diderot:198.32-33] 
          ]
        [
          Iterator: x @ [evalProg.diderot:198.37-46] 
            Var: ipos @ [evalProg.diderot:198.42-46] 
        ]
    Block @ [evalProg.diderot:187.8-198.0] 
      [
        Decl @ [evalProg.diderot:187.8-198.0] 
          Decl: num= @ [evalProg.diderot:188.3-189.0] 
            Apply @ [evalProg.diderot:188.13-45] 
              Var: sum @ [evalProg.diderot:188.13-16] 
              [
                SeqComp @ [evalProg.diderot:188.13-45] 
                  Comprehension @ [evalProg.diderot:188.13-45] 
                    Select @ [evalProg.diderot:188.18-24] 
                      Var: P @ [evalProg.diderot:188.18-19] 
                      test
                    [
                      Iterator: P @ [evalProg.diderot:188.27-44] 
                        Select @ [evalProg.diderot:188.32-44] 
                          Var: particle @ [evalProg.diderot:188.32-40] 
                          all
                    ]
              ]
        Decl @ [evalProg.diderot:187.8-198.0] 
          Decl: steps= @ [evalProg.diderot:189.3-190.0] 
            Apply @ [evalProg.diderot:189.15-48] 
              Var: max @ [evalProg.diderot:189.15-18] 
              [
                SeqComp @ [evalProg.diderot:189.15-48] 
                  Comprehension @ [evalProg.diderot:189.15-48] 
                    Select @ [evalProg.diderot:189.20-27] 
                      Var: P @ [evalProg.diderot:189.20-21] 
                      steps
                    [
                      Iterator: P @ [evalProg.diderot:189.30-47] 
                        Select @ [evalProg.diderot:189.35-47] 
                          Var: particle @ [evalProg.diderot:189.35-43] 
                          all
                    ]
              ]
        Decl @ [evalProg.diderot:187.8-198.0] 
          Decl: numFound= @ [evalProg.diderot:190.3-191.0] 
            Apply @ [evalProg.diderot:190.18-51] 
              Var: sum @ [evalProg.diderot:190.18-21] 
              [
                SeqComp @ [evalProg.diderot:190.18-51] 
                  Comprehension @ [evalProg.diderot:190.18-51] 
                    Select @ [evalProg.diderot:190.23-30] 
                      Var: P @ [evalProg.diderot:190.23-24] 
                      testp
                    [
                      Iterator: P @ [evalProg.diderot:190.33-50] 
                        Select @ [evalProg.diderot:190.38-50] 
                          Var: particle @ [evalProg.diderot:190.38-46] 
                          all
                    ]
              ]
        Decl @ [evalProg.diderot:187.8-198.0] 
          Decl: allFound= @ [evalProg.diderot:191.3-192.0] 
            Apply @ [evalProg.diderot:191.19-52] 
              Var: all @ [evalProg.diderot:191.19-22] 
              [
                SeqComp @ [evalProg.diderot:191.19-52] 
                  Comprehension @ [evalProg.diderot:191.19-52] 
                    Select @ [evalProg.diderot:191.24-31] 
                      Var: P @ [evalProg.diderot:191.24-25] 
                      found
                    [
                      Iterator: P @ [evalProg.diderot:191.34-51] 
                        Select @ [evalProg.diderot:191.39-51] 
                          Var: particle @ [evalProg.diderot:191.39-47] 
                          all
                    ]
              ]
        Decl @ [evalProg.diderot:187.8-198.0] 
          Decl: maxStep= @ [evalProg.diderot:192.3-193.0] 
            Apply @ [evalProg.diderot:192.18-52] 
              Var: max @ [evalProg.diderot:192.18-21] 
              [
                SeqComp @ [evalProg.diderot:192.18-52] 
                  Comprehension @ [evalProg.diderot:192.18-52] 
                    UnaryOp: |()| @ [evalProg.diderot:192.23-31] 
                      Select @ [evalProg.diderot:192.24-30] 
                        Var: P @ [evalProg.diderot:192.24-25] 
                        step
                    [
                      Iterator: P @ [evalProg.diderot:192.34-51] 
                        Select @ [evalProg.diderot:192.39-51] 
                          Var: particle @ [evalProg.diderot:192.39-47] 
                          all
                    ]
              ]
        Print @ [evalProg.diderot:193.3-194.0] 
          [
            Lit: "One run:" @ [evalProg.diderot:193.9-19] 
            Var: allFound @ [evalProg.diderot:193.21-29] 
            Lit: " and " @ [evalProg.diderot:193.31-38] 
            BinOp: / @ [evalProg.diderot:193.40-51] 
              Var: maxStep @ [evalProg.diderot:193.40-47] 
              Var: rad @ [evalProg.diderot:193.48-51] 
            Lit: " and " @ [evalProg.diderot:193.53-60] 
            BinOp: < @ [evalProg.diderot:193.63-80] 
              BinOp: / @ [evalProg.diderot:193.63-75] 
                Var: maxStep @ [evalProg.diderot:193.63-70] 
                Var: rad @ [evalProg.diderot:193.71-74] 
              Var: eps @ [evalProg.diderot:193.77-80] 
            Lit: " and " @ [evalProg.diderot:193.82-89] 
            Var: numFound @ [evalProg.diderot:193.91-99] 
            Lit: " of " @ [evalProg.diderot:193.101-107] 
            Var: num @ [evalProg.diderot:193.109-112] 
            Lit: "\n" @ [evalProg.diderot:193.114-118] 
          ]
        IfThen @ [evalProg.diderot:194.3-195.3] 
          AndAlso @ [evalProg.diderot:194.7-37] 
            Var: allFound @ [evalProg.diderot:194.7-15] 
            BinOp: < @ [evalProg.diderot:194.20-37] 
              BinOp: / @ [evalProg.diderot:194.20-32] 
                Var: maxStep @ [evalProg.diderot:194.20-27] 
                Var: rad @ [evalProg.diderot:194.28-31] 
              Var: eps @ [evalProg.diderot:194.34-37] 
          Block @ [evalProg.diderot:194.39-195.0] 
            [
              Print @ [evalProg.diderot:194.40-62] 
                [
                  Lit: "CONVERGED!\n" @ [evalProg.diderot:194.46-60] 
                ]
              Stabilize @ [evalProg.diderot:194.63-73] 
            ]
        IfThen @ [evalProg.diderot:195.3-196.3] 
          BinOp: > @ [evalProg.diderot:195.6-18] 
            Var: steps @ [evalProg.diderot:195.6-11] 
            Lit: 2000 @ [evalProg.diderot:195.14-18] 
          Stabilize @ [evalProg.diderot:195.20-30] 
        Print @ [evalProg.diderot:196.3-197.0] 
          [
            Lit: "Current steps:" @ [evalProg.diderot:196.9-25] 
            Var: steps @ [evalProg.diderot:196.27-32] 
            Lit: "\n" @ [evalProg.diderot:196.33-37] 
          ]
      ]
/* end program */
/* AST: After typechecking */
properties: StabilizeAll,GlobalReduce,StrandSets,GlobalUpdate,NewStrands,StrandCommunication,StrandsMayDie,HasInputs,HasGlobals,HasConsts,ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
const int dim = 3;
input FemType: Mesh with type var:NONE meshData = loadFem(Mesh);
input FemType: Space with type var:mesh_t space = loadFem(Space);
input FemType: FemFunc with type var:fns_t data = loadFem(FemFunc);
input real rad = 0.1e-1;
input real eps = 0.1e-1;
input real v0 = 0.625e-1;
input real fBias = 0.1e-1;
input real fStren = 0.1e-1;
input real zfuz = 0.1e-1;
input vec3[] ipos;
function bool != (FemType: MeshCell with type var:mesh_t cell1, FemType: MeshCell with type var:mesh_t cell1)
{
  return != (extractFemItem(cell1, int, CellIndex(Mesh)), extractFemItem(cell1, int, CellIndex(Mesh)));
  }
function bool == (FemType: MeshCell with type var:mesh_t cell1, FemType: MeshCell with type var:mesh_t cell1)
{
  return == (extractFemItem(cell1, int, CellIndex(Mesh)), extractFemItem(cell1, int, CellIndex(Mesh)));
  }
function FemType: MeshPos with type var:mesh_t findPos (FemType: Mesh with type var:mesh_t mesh, vec3 pos)
{
  xn = [0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0, 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0, 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0];
  newtonInt = 0;
  cellInt = extractFemItem(mesh, int, StartCell(Mesh));
  numCell = - (extractFemItem(mesh, int, NumCell(Mesh)), 1);
  yayCells = extractFemItem(mesh, pos : vec3, int[], NearbyCell(File=spat.in)(Mesh));
  foreach (int cellItter in yayCells) {
    xn = [0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0, 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0, 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0];
    cellInt = cellItter;
    A = @<#; %3; $[3,3]> (inv<#; %3> (∇⊗<#; %3; $[]; %3> (femField(mesh,cellInt,field(3)[3], Transform, ))), [0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0, 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0, 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0]);
    foreach (int newtonItter in $range (0, 16)) {
      delta = @<#; %3; $[3]> (•<#; %3; $[3,3]; $[3]; $[3]> (A, -<#; %3; $[3]> (femField(mesh,cellInt,field(3)[3], Transform, ), pos)), xn);
      xn = -<$[3]> (xn, delta);
      if >= (* (0.1e-7, 0.1e-7), •<$[3]; $[3]; $[]> (delta, delta)) {
        if $and (> (+<$[]> (0.1e1, 0.1e-7), •<$[3]; $[3]; $[]> ([0.1e1, 0.1e1, 0.1e1], xn)), $and (> (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], xn)[0], -0.e0), $and (> (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], xn)[1], -0.e0), > (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], xn)[2], -0.e0)))) {
          return extractFemItemN(AllBuild(MeshPos),FemType: Mesh with type var:NONE,int,vec3,vec3 (mesh, cellInt, xn, pos)):FemType: MeshPos with type var:mesh_t;
          }
        }
      }
    }
  return extractFemItemN(InvalidBuild(MeshPos),FemType: Mesh with type var:NONE (mesh)):FemType: MeshPos with type var:mesh_t;
  }
function FemType: RefCell with type var:mesh_t refcell (FemType: Mesh with type var:NONE arg0)
{
  return extractFemItem(arg0, FemType: RefCell with type var:mesh_t, RefCell(Mesh));
  }
function FemType: MeshCell with type var:mesh_t[] cells (FemType: Mesh with type var:NONE arg0)
{
  return extractFemItem(arg0, FemType: MeshCell with type var:mesh_t[], Cells(Mesh));
  }
function FemType: MeshCell with type var:mesh_t[] cells (FemType: Mesh with type var:NONE arg0)
{
  return {loadFem(MeshCell) | int i in $range (0, extractFemItem(arg0, int, NumCell(Mesh)))};
  }
function int numCell (FemType: Mesh with type var:NONE arg0)
{
  return extractFemItem(arg0, int, NumCell(Mesh));
  }
function tensor[3,3,3,3] mesh_t_transform_3 (vec3 pos, int cell, FemType: Mesh with type var:NONE mesh)
{
  return @<#; %3; $[3,3,3,3]> (∇⊗<#; %3; $[3,3]; %3> (∇⊗<#; %3; $[3]; %3> (∇⊗<#; %3; $[]; %3> (femField(mesh,cell,field(3)[3], Transform, )))), pos);
  }
function tensor[3,3,3] mesh_t_transform_2 (vec3 pos, int cell, FemType: Mesh with type var:NONE mesh)
{
  return @<#; %3; $[3,3,3]> (∇⊗<#; %3; $[3]; %3> (∇⊗<#; %3; $[]; %3> (femField(mesh,cell,field(3)[3], Transform, ))), pos);
  }
function mat3 mesh_t_transform_1 (vec3 pos, int cell, FemType: Mesh with type var:NONE mesh)
{
  return @<#; %3; $[3,3]> (∇⊗<#; %3; $[]; %3> (femField(mesh,cell,field(3)[3], Transform, )), pos);
  }
function vec3 mesh_t_transform_0 (vec3 pos, int cell, FemType: Mesh with type var:NONE mesh)
{
  return @<#; %3; $[3]> (femField(mesh,cell,field(3)[3], Transform, ), pos);
  }
function FemType: MeshPos with type var:mesh_t _mesh_t_newtonInverse (vec3 pos, int cellInt, FemType: Mesh with type var:NONE mesh)
{
  xn = [0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0, 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0, 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0];
  A = @<#; %3; $[3,3]> (inv<#; %3> (∇⊗<#; %3; $[]; %3> (femField(mesh,cellInt,field(3)[3], Transform, ))), [0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0, 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0, 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0]);
  foreach (int itter in $range (0, 16)) {
    delta = @<#; %3; $[3]> (•<#; %3; $[3,3]; $[3]; $[3]> (A, -<#; %3; $[3]> (femField(mesh,cellInt,field(3)[3], Transform, ), pos)), xn);
    xn = -<$[3]> (xn, delta);
    if >= (* (0.1e-7, 0.1e-7), •<$[3]; $[3]; $[]> (delta, delta)) {
      if $and (> (+<$[]> (0.1e1, 0.1e-7), •<$[3]; $[3]; $[]> ([0.1e1, 0.1e1, 0.1e1], xn)), $and (> (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], xn)[0], -0.e0), $and (> (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], xn)[1], -0.e0), > (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], xn)[2], -0.e0)))) {
        return extractFemItemN(AllBuild(MeshPos),FemType: Mesh with type var:NONE,int,vec3,vec3 (mesh, cellInt, xn, pos)):FemType: MeshPos with type var:mesh_t;
        }
      else {
        return extractFemItemN(InvalidBuild(MeshPos),FemType: Mesh with type var:NONE (mesh)):FemType: MeshPos with type var:mesh_t;
        }
      }
    }
  return extractFemItemN(InvalidBuild(MeshPos),FemType: Mesh with type var:NONE (mesh)):FemType: MeshPos with type var:mesh_t;
  }
function FemType: MeshPos with type var:mesh_t _mesh_pos_mesh_t_build_world_pos (FemType: MeshPos with type var:mesh_t pos)
{
  if extractFemItem(pos, bool, WorldTest(MeshPos)) {
    return extractFemItemN(NewWorld(MeshPos),FemType: MeshPos with type var:mesh_t,vec3 (pos, mesh_t_transform_0 (extractFemItem(pos, vec3, RefPos(MeshPos)), extractFemItem(pos, int, CellIndex(MeshPos)), extractFem(Mesh,pos )))):FemType: MeshPos with type var:mesh_t;
    }
  else {
    return pos;
    }
  }
function vec3 worldPos (FemType: MeshPos with type var:mesh_t pos)
{
  return mesh_t_transform_0 (extractFemItem(pos, vec3, RefPos(MeshPos)), extractFemItem(pos, int, CellIndex(MeshPos)), extractFem(Mesh,pos ));
  }
function FemType: MeshPos with type var:mesh_t $exitPos (FemType: Mesh with type var:NONE mesh, int cellId, vec3 refPos, vec3 dPos, real[2] time)
{
  if != (-1, $sub<int; %2> (nextCell4 ($r2i (time[1]), cellId, mesh), 0)) {
    {
      }
    return extractFemItemN(RefBuild(Mesh),FemType: Mesh with type var:NONE,int,vec3,int (mesh, $sub<int; %2> (nextCell4 ($r2i (time[1]), cellId, mesh), 0), [•<$[4,4]; $[4]; $[4]> ($sub<mat4; %4> ($sub<mat4[4]; %4> ({{[[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.971445146547e-16, 0.e0, 0.e0, 0.1e1]], [[0.57735026919e0, 0.57735026919e0, 0.57735026919e0, -0.57735026919e0], [-0.333333333333e0, 0.666666666667e0, -0.333333333333e0, 0.333333333333e0], [-0.333333333333e0, -0.333333333333e0, 0.666666666667e0, 0.333333333333e0], [0.971445146547e-16, 0.e0, 0.e0, 0.1e1]], [[-0.333333333333e0, 0.666666666667e0, -0.333333333333e0, 0.333333333333e0], [-0.57735026919e0, -0.57735026919e0, -0.57735026919e0, 0.57735026919e0], [-0.333333333333e0, -0.333333333333e0, 0.666666666667e0, 0.333333333333e0], [0.971445146547e-16, 0.e0, 0.e0, 0.1e1]], [[-0.333333333333e0, 0.666666666667e0, -0.333333333333e0, 0.333333333333e0], [-0.333333333333e0, -0.333333333333e0, 0.666666666667e0, 0.333333333333e0], [0.57735026919e0, 0.57735026919e0, 0.57735026919e0, -0.57735026919e0], [0.971445146547e-16, 0.e0, 0.e0, 0.1e1]]}, {[[0.57735026919e0, -0.1e1, -0.1e1, 0.1e1], [0.57735026919e0, 0.1e1, 0.e0, 0.e0], [0.57735026919e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.e0, 0.1e1, 0.e0, 0.e0], [-0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]]}, {[[-0.1e1, -0.57735026919e0, -0.1e1, 0.1e1], [0.1e1, -0.57735026919e0, 0.e0, 0.e0], [0.e0, -0.57735026919e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.e0, -0.1e1, 0.e0, 0.e0], [0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, -0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]]}, {[[-0.1e1, -0.1e1, 0.57735026919e0, 0.1e1], [0.1e1, 0.e0, 0.57735026919e0, 0.e0], [0.e0, 0.1e1, 0.57735026919e0, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.e0, 0.e0, 0.1e1, 0.e0], [0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.e0, -0.1e1, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]]}}, $r2i (time[1])), $sub<int; %2> (nextCell4 ($r2i (time[1]), cellId, mesh), 1)), [+<$[3]> (*<$[3]> (time[0], dPos), refPos)[0], +<$[3]> (*<$[3]> (time[0], dPos), refPos)[1], +<$[3]> (*<$[3]> (time[0], dPos), refPos)[2], 0.1e1])[0], •<$[4,4]; $[4]; $[4]> ($sub<mat4; %4> ($sub<mat4[4]; %4> ({{[[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.971445146547e-16, 0.e0, 0.e0, 0.1e1]], [[0.57735026919e0, 0.57735026919e0, 0.57735026919e0, -0.57735026919e0], [-0.333333333333e0, 0.666666666667e0, -0.333333333333e0, 0.333333333333e0], [-0.333333333333e0, -0.333333333333e0, 0.666666666667e0, 0.333333333333e0], [0.971445146547e-16, 0.e0, 0.e0, 0.1e1]], [[-0.333333333333e0, 0.666666666667e0, -0.333333333333e0, 0.333333333333e0], [-0.57735026919e0, -0.57735026919e0, -0.57735026919e0, 0.57735026919e0], [-0.333333333333e0, -0.333333333333e0, 0.666666666667e0, 0.333333333333e0], [0.971445146547e-16, 0.e0, 0.e0, 0.1e1]], [[-0.333333333333e0, 0.666666666667e0, -0.333333333333e0, 0.333333333333e0], [-0.333333333333e0, -0.333333333333e0, 0.666666666667e0, 0.333333333333e0], [0.57735026919e0, 0.57735026919e0, 0.57735026919e0, -0.57735026919e0], [0.971445146547e-16, 0.e0, 0.e0, 0.1e1]]}, {[[0.57735026919e0, -0.1e1, -0.1e1, 0.1e1], [0.57735026919e0, 0.1e1, 0.e0, 0.e0], [0.57735026919e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.e0, 0.1e1, 0.e0, 0.e0], [-0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]]}, {[[-0.1e1, -0.57735026919e0, -0.1e1, 0.1e1], [0.1e1, -0.57735026919e0, 0.e0, 0.e0], [0.e0, -0.57735026919e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.e0, -0.1e1, 0.e0, 0.e0], [0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, -0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]]}, {[[-0.1e1, -0.1e1, 0.57735026919e0, 0.1e1], [0.1e1, 0.e0, 0.57735026919e0, 0.e0], [0.e0, 0.1e1, 0.57735026919e0, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.e0, 0.e0, 0.1e1, 0.e0], [0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.e0, -0.1e1, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]]}}, $r2i (time[1])), $sub<int; %2> (nextCell4 ($r2i (time[1]), cellId, mesh), 1)), [+<$[3]> (*<$[3]> (time[0], dPos), refPos)[0], +<$[3]> (*<$[3]> (time[0], dPos), refPos)[1], +<$[3]> (*<$[3]> (time[0], dPos), refPos)[2], 0.1e1])[1], •<$[4,4]; $[4]; $[4]> ($sub<mat4; %4> ($sub<mat4[4]; %4> ({{[[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.971445146547e-16, 0.e0, 0.e0, 0.1e1]], [[0.57735026919e0, 0.57735026919e0, 0.57735026919e0, -0.57735026919e0], [-0.333333333333e0, 0.666666666667e0, -0.333333333333e0, 0.333333333333e0], [-0.333333333333e0, -0.333333333333e0, 0.666666666667e0, 0.333333333333e0], [0.971445146547e-16, 0.e0, 0.e0, 0.1e1]], [[-0.333333333333e0, 0.666666666667e0, -0.333333333333e0, 0.333333333333e0], [-0.57735026919e0, -0.57735026919e0, -0.57735026919e0, 0.57735026919e0], [-0.333333333333e0, -0.333333333333e0, 0.666666666667e0, 0.333333333333e0], [0.971445146547e-16, 0.e0, 0.e0, 0.1e1]], [[-0.333333333333e0, 0.666666666667e0, -0.333333333333e0, 0.333333333333e0], [-0.333333333333e0, -0.333333333333e0, 0.666666666667e0, 0.333333333333e0], [0.57735026919e0, 0.57735026919e0, 0.57735026919e0, -0.57735026919e0], [0.971445146547e-16, 0.e0, 0.e0, 0.1e1]]}, {[[0.57735026919e0, -0.1e1, -0.1e1, 0.1e1], [0.57735026919e0, 0.1e1, 0.e0, 0.e0], [0.57735026919e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.e0, 0.1e1, 0.e0, 0.e0], [-0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]]}, {[[-0.1e1, -0.57735026919e0, -0.1e1, 0.1e1], [0.1e1, -0.57735026919e0, 0.e0, 0.e0], [0.e0, -0.57735026919e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.e0, -0.1e1, 0.e0, 0.e0], [0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, -0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]]}, {[[-0.1e1, -0.1e1, 0.57735026919e0, 0.1e1], [0.1e1, 0.e0, 0.57735026919e0, 0.e0], [0.e0, 0.1e1, 0.57735026919e0, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.e0, 0.e0, 0.1e1, 0.e0], [0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.e0, -0.1e1, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]]}}, $r2i (time[1])), $sub<int; %2> (nextCell4 ($r2i (time[1]), cellId, mesh), 1)), [+<$[3]> (*<$[3]> (time[0], dPos), refPos)[0], +<$[3]> (*<$[3]> (time[0], dPos), refPos)[1], +<$[3]> (*<$[3]> (time[0], dPos), refPos)[2], 0.1e1])[2]], $sub<int; %2> (nextCell4 ($r2i (time[1]), cellId, mesh), 1))):FemType: MeshPos with type var:mesh_t;
    }
  else {
    return extractFemItemN(InvalidBuildBoundary(MeshPos),FemType: Mesh with type var:NONE,vec3 (mesh, +<$[3]> (*<$[3]> (time[0], dPos), refPos))):FemType: MeshPos with type var:mesh_t;
    }
  }
function int[2] nextCell4 (int faceIdx, int cell, FemType: Mesh with type var:NONE mesh)
{
  {
    if == (faceIdx, -1) {
      return {-1, -1};
      }
    else {
      return extractFemItemN(CellFaceCell(Mesh),FemType: Mesh with type var:NONE,int (mesh, + (* (cell, 8), * (faceIdx, 2)))):int[2];
      }
    }
  }
function vec2 _enter (vec3 refPos, vec3 dPos)
{
  real time = +inf;
  int face = -1;
  real faceTime = -inf;
  if $and (>= (/ (-<$[]> (0.57735026919e0, •<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], refPos)), •<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], dPos)), -0.1e-7), $and (> (time, / (-<$[]> (0.57735026919e0, •<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], refPos)), •<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], dPos))), >= (|()|<$[]> (•<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], dPos)), 0.1e-7)))
    if $and (> (+<$[]> (0.1e1, 0.1e-7), •<$[3]; $[3]; $[]> ([0.1e1, 0.1e1, 0.1e1], +<$[3]> (refPos, *<$[3]> (dPos, / (-<$[]> (0.57735026919e0, •<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], refPos)), •<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], dPos)))))), $and (> (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], +<$[3]> (refPos, *<$[3]> (dPos, / (-<$[]> (0.57735026919e0, •<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], refPos)), •<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], dPos)))))[0], -0.e0), $and (> (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], +<$[3]> (refPos, *<$[3]> (dPos, / (-<$[]> (0.57735026919e0, •<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], refPos)), •<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], dPos)))))[1], -0.e0), > (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], +<$[3]> (refPos, *<$[3]> (dPos, / (-<$[]> (0.57735026919e0, •<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], refPos)), •<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], dPos)))))[2], -0.e0)))) {
      time = / (-<$[]> (0.57735026919e0, •<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], refPos)), •<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], dPos));
      face = 0;
      }
    if $and (>= (/ (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], dPos)), -0.1e-7), $and (> (time, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], dPos))), >= (|()|<$[]> (•<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], dPos)), 0.1e-7)))
    if $and (> (+<$[]> (0.1e1, 0.1e-7), •<$[3]; $[3]; $[]> ([0.1e1, 0.1e1, 0.1e1], +<$[3]> (refPos, *<$[3]> (dPos, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], dPos)))))), $and (> (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], +<$[3]> (refPos, *<$[3]> (dPos, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], dPos)))))[0], -0.e0), $and (> (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], +<$[3]> (refPos, *<$[3]> (dPos, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], dPos)))))[1], -0.e0), > (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], +<$[3]> (refPos, *<$[3]> (dPos, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], dPos)))))[2], -0.e0)))) {
      time = / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], dPos));
      face = 1;
      }
    if $and (>= (/ (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], dPos)), -0.1e-7), $and (> (time, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], dPos))), >= (|()|<$[]> (•<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], dPos)), 0.1e-7)))
    if $and (> (+<$[]> (0.1e1, 0.1e-7), •<$[3]; $[3]; $[]> ([0.1e1, 0.1e1, 0.1e1], +<$[3]> (refPos, *<$[3]> (dPos, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], dPos)))))), $and (> (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], +<$[3]> (refPos, *<$[3]> (dPos, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], dPos)))))[0], -0.e0), $and (> (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], +<$[3]> (refPos, *<$[3]> (dPos, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], dPos)))))[1], -0.e0), > (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], +<$[3]> (refPos, *<$[3]> (dPos, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], dPos)))))[2], -0.e0)))) {
      time = / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], dPos));
      face = 2;
      }
    if $and (>= (/ (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], refPos)), •<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], dPos)), -0.1e-7), $and (> (time, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], refPos)), •<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], dPos))), >= (|()|<$[]> (•<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], dPos)), 0.1e-7)))
    if $and (> (+<$[]> (0.1e1, 0.1e-7), •<$[3]; $[3]; $[]> ([0.1e1, 0.1e1, 0.1e1], +<$[3]> (refPos, *<$[3]> (dPos, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], refPos)), •<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], dPos)))))), $and (> (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], +<$[3]> (refPos, *<$[3]> (dPos, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], refPos)), •<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], dPos)))))[0], -0.e0), $and (> (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], +<$[3]> (refPos, *<$[3]> (dPos, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], refPos)), •<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], dPos)))))[1], -0.e0), > (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], +<$[3]> (refPos, *<$[3]> (dPos, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], refPos)), •<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], dPos)))))[2], -0.e0)))) {
      time = / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], refPos)), •<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], dPos));
      face = 3;
      }
    if $and (!= (face, -1), $and (> (+<$[]> (0.1e1, 0.1e-7), •<$[3]; $[3]; $[]> ([0.1e1, 0.1e1, 0.1e1], +<$[3]> (refPos, *<$[3]> (dPos, max (time, 0.e0))))), $and (> (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], +<$[3]> (refPos, *<$[3]> (dPos, max (time, 0.e0))))[0], -0.e0), $and (> (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], +<$[3]> (refPos, *<$[3]> (dPos, max (time, 0.e0))))[1], -0.e0), > (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], +<$[3]> (refPos, *<$[3]> (dPos, max (time, 0.e0))))[2], -0.e0))))) {
    return [max (time, 0.e0), (real)face];
    }
  else {
    return [(real)-1, (real)-1];
    }
  }
function vec2 _exit (vec3 refPos, vec3 dPos, int i)
{
  real time = +inf;
  int face = -1;
  real faceTime = -inf;
  if $and (>= (/ (-<$[]> (0.57735026919e0, •<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], refPos)), •<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], dPos)), -0.1e-7), $and (> (time, / (-<$[]> (0.57735026919e0, •<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], refPos)), •<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], dPos))), >= (|()|<$[]> (•<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], dPos)), 0.1e-7)))
    if != (i, 0) {
      time = / (-<$[]> (0.57735026919e0, •<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], refPos)), •<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], dPos));
      face = 0;
      }
    else {
      faceTime = / (-<$[]> (0.57735026919e0, •<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], refPos)), •<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], dPos));
      }
    if $and (>= (/ (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], dPos)), -0.1e-7), $and (> (time, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], dPos))), >= (|()|<$[]> (•<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], dPos)), 0.1e-7)))
    if != (i, 1) {
      time = / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], dPos));
      face = 1;
      }
    else {
      faceTime = / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], dPos));
      }
    if $and (>= (/ (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], dPos)), -0.1e-7), $and (> (time, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], dPos))), >= (|()|<$[]> (•<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], dPos)), 0.1e-7)))
    if != (i, 2) {
      time = / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], dPos));
      face = 2;
      }
    else {
      faceTime = / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], dPos));
      }
    if $and (>= (/ (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], refPos)), •<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], dPos)), -0.1e-7), $and (> (time, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], refPos)), •<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], dPos))), >= (|()|<$[]> (•<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], dPos)), 0.1e-7)))
    if != (i, 3) {
      time = / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], refPos)), •<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], dPos));
      face = 3;
      }
    else {
      faceTime = / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], refPos)), •<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], dPos));
      }
    if $and (!= (face, -1), $and (> (+<$[]> (0.1e1, 0.1e-7), •<$[3]; $[3]; $[]> ([0.1e1, 0.1e1, 0.1e1], +<$[3]> (refPos, *<$[3]> (dPos, max (time, 0.e0))))), $and (> (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], +<$[3]> (refPos, *<$[3]> (dPos, max (time, 0.e0))))[0], -0.e0), $and (> (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], +<$[3]> (refPos, *<$[3]> (dPos, max (time, 0.e0))))[1], -0.e0), > (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], +<$[3]> (refPos, *<$[3]> (dPos, max (time, 0.e0))))[2], -0.e0))))) {
    return [max (time, 0.e0), (real)face];
    }
  else {
    if == (-inf, faceTime) {
      return [(real)-1, (real)-1];
      }
    else {
      return [max (faceTime, 0.e0), (real)i];
      }
    }
  }
int dimm = dim;
function FemType: Mesh with type var:mesh_t domain (FemType: Space with type var:mesh_t arg0)
{
  return extractFem(Mesh,arg0 );
  }
function FemType: Space with type var:mesh_t space (FemType: FemFunc with type var:fns_t arg0)
{
  return extractFem(Space,arg0 );
  }
function FemType: FuncCell with type var:func_t funcCell (FemType: FemFunc with type var:fns_t arg0, FemType: MeshCell with type var:mesh_t arg1)
{
  return loadFem(FuncCell);
  }
field(3)[] F = ∘<#; %3; $[]; %3; $[3]> (femField(data,extractFem(Mesh,extractFem(Space,data ) ),field(3)[], refField, findPos), femField(extractFem(Mesh,extractFem(Space,data ) ),extractFem(Mesh,extractFem(Space,data ) ),field(3)[3], InvTransform, findPos));
FemType: RefCell with type var:mesh_t simplex = refcell (meshData);
function bool insideTest (vec3 x)
{
  vec3 mid = -<$[3]> (x, [0.e0, 0.e0, 0.e0]);
  bool z = (> (|()|<$[]> (mid[0]), 0.1e0) && (> (|()|<$[]> (mid[1]), 0.1e0) && > (|()|<$[]> (mid[2]), 0.1e0)));
  return (< (|()|<$[3]> (mid), 0.5e1) && (> (|()|<$[3]> (mid), 0.2e1) && z));
  }
function vec3 grad (vec3 s)
{
  real x = s[0];
  real y = s[1];
  real z = s[2];
  real p = unary -<$[]> (+<$[]> (+<$[]> (* (x, x), * (y, y)), * (z, z)));
  vec3 g = [* (^ (y, 2), z), * (* (* ((real)2, x), y), z), * (x, ^ (y, 2))];
  return g;
  }
function mat3 hess (vec3 s)
{
  real x = s[0];
  real y = s[1];
  real z = s[2];
  real p = unary -<$[]> (+<$[]> (+<$[]> (* (x, x), * (y, y)), * (z, z)));
  mat3 hess = [[0.e0, * (* ((real)2, y), z), ^ (y, 2)], [* (* ((real)2, y), z), * (* ((real)2, x), z), * (* ((real)2, x), y)], [^ (y, 2), * (* ((real)2, x), y), 0.e0]];
  return hess;
  }
function vec3 fStep (vec3 s)
{
  vec3 g = grad (s);
  mat3 H = hess (s);
  vec3[3] E = evecs (H);
  real[3] L = evals (H);
  vec3 up = •<$[3,3]; $[3]; $[3]> (⊗<$[3]; $[3]; $[3,3]> (*<$[3]> (unary -<$[]> (/ ((real)1, $sub<real; %3> (L, 2))), $sub<vec3; %3> (E, 2)), $sub<vec3; %3> (E, 2)), g);
  if (! (== (up[0], up[0])) || (! (== (up[1], up[1])) || ! (== (up[2], up[2]))))
    return [+inf, +inf, +inf];
    return up;
  }
function bool posNanCheck (vec3 up)
{
  return (! (== (up[0], up[0])) || (! (== (up[1], up[1])) || ! (== (up[2], up[2]))));
  }
function mat3 fPerp (vec3 s)
{
  vec3 g = grad (s);
  mat3 H = hess (s);
  vec3 E2 = $sub<vec3; %3> (evecs (H), 2);
  mat3 m = -<$[3,3]> ($id<%3> (), ⊗<$[3]; $[3]; $[3,3]> (E2, E2));
  real t = :<$[3,3]; $[3,3]; $[]> (m, m);
  if ! (== (t, t))
    return $zero<$[3,3]> ();
    return m;
  }
function real fStrength (vec3 s)
{
  vec3 g = grad (s);
  mat3 H = hess (s);
  real str = / (unary -<$[]> ($sub<real; %3> (evals (H), 2)), +<$[]> (fBias, |()|<$[3]> (g)));
  return str;
  }
function real phi (real r)
{
  return ^ (-<$[]> ((real)1, r), 4);
  }
function real phi' (real r)
{
  return * ((real)(unary - (4)), ^ (-<$[]> ((real)1, r), 3));
  }
function real enr (vec3 x)
{
  return phi (/ (|()|<$[3]> (x), rad));
  }
function vec3 frc (vec3 x)
{
  return /<$[3]> (*<$[3]> (* (phi' (/ (|()|<$[3]> (x), rad)), / ((real)1, rad)), x), |()|<$[3]> (x));
  }
function bool posTest (vec3 pos)
{
  return (insideTest (pos) && (! (posNanCheck (pos)) && >= (fStrength (pos), fStren)));
  }
strand particle (vec3 pos0, real hh0) in 3D
{
  output vec3 pos = pos0;
  real hh = hh0;
  vec3 step = $zero<$[3]> ();
  bool found = false;
  int nfs = 0;
  int test = 1;
  int testp = 0;
  int steps = 0;
  update {
    steps = + (steps, 1);
    if ! (posTest (pos))
      die;
      if ! (found) {
      step = fStep (pos);
      pos = +<$[3]> (pos, step);
      if posNanCheck (pos)
        die;
        if > (/ (|()|<$[3]> (step), rad), eps) {
        nfs = + (nfs, 1);
        if > (nfs, 10)
          die;
          }
      else {
        found = true;
        testp = 1;
        }
      }
    else {
      pos = +<$[3]> (pos, fStep (pos));
      if posNanCheck (pos)
        die;
        step = $zero<$[3]> ();
      real oldE = 0.e0;
      vec3 force = $zero<$[3]> ();
      int nn = 0;
      foreach (particle P in sphere<particle> (rad)) {
        oldE = +<$[]> (oldE, enr (-<$[3]> (P.pos, pos)));
        force = +<$[3]> (force, frc (-<$[3]> (P.pos, pos)));
        nn = + (nn, 1);
        }
      if == (0, nn) {
        vec3 npos = +<$[3]> (pos, [* (0.5e0, rad), 0.e0, 0.e0]);
        if posTest (npos)
          new particle (npos, hh);
          continue;
        }
      force = •<$[3,3]; $[3]; $[3]> (fPerp (pos), force);
      vec3 es = *<$[3]> (hh, force);
      if > (|()|<$[3]> (es), rad) {
        hh = * (hh, / (rad, |()|<$[3]> (es)));
        es = *<$[3]> (es, / (rad, |()|<$[3]> (es)));
        }
      vec3 samplePos = +<$[3]> (pos, es);
      vec3 fs = fStep (samplePos);
      if > (/ (|()|<$[3]> (fs), |()|<$[3]> (es)), 0.5e0) {
        hh = * (hh, 0.5e0);
        continue;
        }
      vec3 oldPos = pos;
      vec3 up = +<$[3]> (fs, es);
      pos = +<$[3]> (pos, up);
      real newE = sum ({enr (-<$[3]> (pos, P.pos)) | particle P in sphere<particle> (rad)});
      if > (-<$[]> (newE, oldE), •<$[3]; $[3]; $[]> (*<$[3]> (0.5e0, -<$[3]> (pos, oldPos)), unary -<$[3]> (force))) {
        pos = oldPos;
        hh = * (hh, 0.5e0);
        continue;
        }
      hh = * (hh, 0.11e1);
      step = up;
      if posNanCheck (pos)
        die;
        if < (nn, 5) {
        vec3 npos = +<$[3]> (pos, *<$[3]> (* (0.5e0, rad), normalize<$[3]> (es)));
        if posTest (npos)
          new particle (npos, hh);
          }
      }
    }
  
}
collection {
    foreach (vec3 x in ipos) {
      new particle (x, 0.1e1);
      }
    }
  
update {
  int num = sum ({|P.test | particle P in all|});
  int steps = max ({|P.steps | particle P in all|});
  int numFound = sum ({|P.testp | particle P in all|});
  bool allFound = all ({|P.found | particle P in all|});
  real maxStep = max ({||()|<$[3]> (P.step) | particle P in all|});
  print ("One run:", allFound, " and ", / (maxStep, rad), " and ", < (/ (maxStep, rad), eps), " and ", numFound, " of ", num, "\n");
  if (allFound && < (/ (maxStep, rad), eps)) {
    print ("CONVERGED!\n");
    stabilize_all;}
  if > (steps, 2000)
    stabilize_all;print ("Current steps:", steps, "\n");
  }
/* Program end */
/* Simplified Program (after after simplify) start */
properties: GlobalInit,StabilizeAll,GlobalReduce,StrandSets,GlobalUpdate,NewStrands,StrandCommunication,StrandsMayDie,HasInputs,HasGlobals,ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
input FemData:Mesh meshData04EE;
input FemData:Space 0space04FA_intermedateGlobal04FB;
input FemData:FemFunc 0data04FC_intermedateGlobal04FD;
input real rad04FE = <default>;
input real eps04FF = <default>;
input real v00500 = <default>;
input real fBias0501 = <default>;
input real fStren0502 = <default>;
input real zfuz0503 = <default>;
input vec3[] ipos0504;
constants {
  rad04FE = 0.1e-1;
  eps04FF = 0.1e-1;
  v00500 = 0.625e-1;
  fBias0501 = 0.1e-1;
  fStren0502 = 0.1e-1;
  zfuz0503 = 0.1e-1;
}
global Femdata: MeshCell[] 0cell_meshData04EF;
global Femdata: Space space04FA;
global Femdata: FemFunc data04FC;
global int dimm0E24;
global field(3)[] F0E3B;
global Femdata: RefCell simplex0E3C;
function bool#0 !=0505 (Femdata: MeshCell cell10506, Femdata: MeshCell cell10507)
{
  int _t0508 = extractFemItem(CellIndex(Mesh), int, cell10506);
  int _t0509 = extractFemItem(CellIndex(Mesh), int, cell10507);
  bool _t050A = prim !=0086 (_t0508, _t0509);
  return _t050A;
}
function bool#0 ==050B (Femdata: MeshCell cell10506, Femdata: MeshCell cell10507)
{
  int _t050C = extractFemItem(CellIndex(Mesh), int, cell10506);
  int _t050D = extractFemItem(CellIndex(Mesh), int, cell10507);
  bool _t050E = prim ==0082 (_t050C, _t050D);
  return _t050E;
}
function Femdata: MeshPos#2 findPos050F (Femdata: Mesh mesh0510, vec3 pos0511)
{
  real _t0512 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t0513 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t0514 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  xn0515 = [_t0512, _t0513, _t0514];
  newtonInt0516 = 0;
  cellInt0517 = extractFemItem(StartCell(Mesh), int, mesh0510);
  int _t0518 = extractFemItem(NumCell(Mesh), int, mesh0510);
  int _t0519 = 1;
  numCell051A = prim -0024 (_t0518, _t0519);
  yayCells051B = extractFemItem2(NearbyCell(File=spat.in)(Mesh), vec3, mesh0510, pos0511 : vec3);
  foreach cellItter051F in yayCells051B {
    real _t051C = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    real _t051D = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    real _t051E = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    xn0515 = [_t051C, _t051D, _t051E];
    cellInt0517 = cellItter051F;
    field(3)[3] _t0520 = femField(mesh0510,cellInt0517,field(3)[3],Transform,);
    field(3)[3,3] _t0521 = prim ∇⊗00AD<#∞; %3; $[]; %3> (_t0520);
    field(3)[3,3] _t0522 = prim inv015E<#∞; %3> (_t0521);
    real _t0523 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    real _t0524 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    real _t0525 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    vec3 _t0526 = [_t0523, _t0524, _t0525];
    A0527 = prim @00A5<#∞; %3; $[3,3]> (_t0522, _t0526);
    int _t0528 = 0;
    int _t0529 = 16;
    int[] _t052A = prim $range01C3 (_t0528, _t0529);
    foreach newtonItter0559 in _t052A {
      field(3)[3] _t052B = femField(mesh0510,cellInt0517,field(3)[3],Transform,);
      field(3)[3] _t052C = prim -002E<#∞; %3; $[3]> (_t052B, pos0511);
      field(3)[3] _t052D = prim •00D4<#∞; %3; $[3,3]; $[3]; $[3]> (A0527, _t052C);
      delta052E = prim @00A5<#∞; %3; $[3]> (_t052D, xn0515);
      xn0515 = prim -0026<$[3]> (xn0515, delta052E);
      real _t052F = 0.1e-7;
      real _t0530 = 0.1e-7;
      real _t0531 = prim *0034 (_t052F, _t0530);
      real _t0532 = prim •00CE<$[3]; $[3]; $[]> (delta052E, delta052E);
      bool _t0533 = prim >=007E (_t0531, _t0532);
      if _t0533 {
        real _t0534 = 0.1e1;
        real _t0535 = 0.1e-7;
        real _t0536 = prim +0017<$[]> (_t0534, _t0535);
        real _t0537 = 0.1e1;
        real _t0538 = 0.1e1;
        real _t0539 = 0.1e1;
        vec3 _t053A = [_t0537, _t0538, _t0539];
        real _t053B = prim •00CE<$[3]; $[3]; $[]> (_t053A, xn0515);
        bool _t053C = prim >0080 (_t0536, _t053B);
        real _t053D = 0.1e-7;
        real _t053E = 0.1e-7;
        real _t053F = 0.1e-7;
        vec3 _t0540 = [_t053D, _t053E, _t053F];
        vec3 _t0541 = prim +0017<$[3]> (_t0540, xn0515);
        real _t0542 = _t0541[0];
        real _t0543 = -0.e0;
        bool _t0544 = prim >0080 (_t0542, _t0543);
        real _t0545 = 0.1e-7;
        real _t0546 = 0.1e-7;
        real _t0547 = 0.1e-7;
        vec3 _t0548 = [_t0545, _t0546, _t0547];
        vec3 _t0549 = prim +0017<$[3]> (_t0548, xn0515);
        real _t054A = _t0549[1];
        real _t054B = -0.e0;
        bool _t054C = prim >0080 (_t054A, _t054B);
        real _t054D = 0.1e-7;
        real _t054E = 0.1e-7;
        real _t054F = 0.1e-7;
        vec3 _t0550 = [_t054D, _t054E, _t054F];
        vec3 _t0551 = prim +0017<$[3]> (_t0550, xn0515);
        real _t0552 = _t0551[2];
        real _t0553 = -0.e0;
        bool _t0554 = prim >0080 (_t0552, _t0553);
        bool _t0555 = prim $and01C4 (_t054C, _t0554);
        bool _t0556 = prim $and01C4 (_t0544, _t0555);
        bool _t0557 = prim $and01C4 (_t053C, _t0556);
        if _t0557 {
          Femdata: MeshPos _t0558 = extractFemItemN((mesh0510, cellInt0517, xn0515, pos0511),AllBuild(MeshPos),);
          return _t0558;
        }
      }
    }
  }
  Femdata: MeshPos _t055A = extractFemItemN((mesh0510),InvalidBuild(MeshPos),);
  return _t055A;
}
function Femdata: RefCell#1 refcell055B (Femdata: Mesh arg0055C)
{
  Femdata: RefCell _t055D = extractFemItem(RefCell(Mesh), Femdata: RefCell, arg0055C);
  return _t055D;
}
function Femdata: MeshCell[]#0 cells055E (Femdata: Mesh arg0055F)
{
  Femdata: MeshCell[] _t0560 = extractFemItem(Cells(Mesh), Femdata: MeshCell[], arg0055F);
  return _t0560;
}
function Femdata: MeshCell[]#0 cells0561 (Femdata: Mesh arg0055F)
{
  int _t0562 = 0;
  int _t0563 = extractFemItem(NumCell(Mesh), int, arg0055F);
  int[] _t0564 = prim $range01C3 (_t0562, _t0563);
  Femdata: MeshCell[] accum0567 = {};
  foreach i0565 in _t0564 {
    Femdata: MeshCell _t0566 = loadFem(MeshCell, arg0055F, i0565);
    accum0567 = prim @0010<Femdata: MeshCell> (accum0567, _t0566);
  }
  return accum0567;
}
function int#0 numCell0568 (Femdata: Mesh arg0055C)
{
  int _t0569 = extractFemItem(NumCell(Mesh), int, arg0055C);
  return _t0569;
}
function tensor[3,3,3,3]#0 mesh_t_transform_3056A (vec3 pos056B, int cell056C, Femdata: Mesh mesh056D)
{
  field(3)[3] _t056E = femField(mesh056D,cell056C,field(3)[3],Transform,);
  field(3)[3,3] _t056F = prim ∇⊗00AD<#∞; %3; $[]; %3> (_t056E);
  field(3)[3,3,3] _t0570 = prim ∇⊗00AD<#∞; %3; $[3]; %3> (_t056F);
  field(3)[3,3,3,3] _t0571 = prim ∇⊗00AD<#∞; %3; $[3,3]; %3> (_t0570);
  tensor[3,3,3,3] _t0572 = prim @00A5<#∞; %3; $[3,3,3,3]> (_t0571, pos056B);
  return _t0572;
}
function tensor[3,3,3]#0 mesh_t_transform_20573 (vec3 pos056B, int cell056C, Femdata: Mesh mesh056D)
{
  field(3)[3] _t0574 = femField(mesh056D,cell056C,field(3)[3],Transform,);
  field(3)[3,3] _t0575 = prim ∇⊗00AD<#∞; %3; $[]; %3> (_t0574);
  field(3)[3,3,3] _t0576 = prim ∇⊗00AD<#∞; %3; $[3]; %3> (_t0575);
  tensor[3,3,3] _t0577 = prim @00A5<#∞; %3; $[3,3,3]> (_t0576, pos056B);
  return _t0577;
}
function tensor[3,3]#0 mesh_t_transform_10578 (vec3 pos056B, int cell056C, Femdata: Mesh mesh056D)
{
  field(3)[3] _t0579 = femField(mesh056D,cell056C,field(3)[3],Transform,);
  field(3)[3,3] _t057A = prim ∇⊗00AD<#∞; %3; $[]; %3> (_t0579);
  tensor[3,3] _t057B = prim @00A5<#∞; %3; $[3,3]> (_t057A, pos056B);
  return _t057B;
}
function vec3#2 mesh_t_transform_0057C (vec3 pos056B, int cell056C, Femdata: Mesh mesh056D)
{
  field(3)[3] _t057D = femField(mesh056D,cell056C,field(3)[3],Transform,);
  vec3 _t057E = prim @00A5<#∞; %3; $[3]> (_t057D, pos056B);
  return _t057E;
}
function Femdata: MeshPos#0 _mesh_t_newtonInverse057F (vec3 pos0580, int cellInt0581, Femdata: Mesh mesh0582)
{
  real _t0583 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t0584 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t0585 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  xn0586 = [_t0583, _t0584, _t0585];
  field(3)[3] _t0587 = femField(mesh0582,cellInt0581,field(3)[3],Transform,);
  field(3)[3,3] _t0588 = prim ∇⊗00AD<#∞; %3; $[]; %3> (_t0587);
  field(3)[3,3] _t0589 = prim inv015E<#∞; %3> (_t0588);
  real _t058A = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t058B = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t058C = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  vec3 _t058D = [_t058A, _t058B, _t058C];
  A058E = prim @00A5<#∞; %3; $[3,3]> (_t0589, _t058D);
  int _t058F = 0;
  int _t0590 = 16;
  int[] _t0591 = prim $range01C3 (_t058F, _t0590);
  foreach itter05C1 in _t0591 {
    field(3)[3] _t0592 = femField(mesh0582,cellInt0581,field(3)[3],Transform,);
    field(3)[3] _t0593 = prim -002E<#∞; %3; $[3]> (_t0592, pos0580);
    field(3)[3] _t0594 = prim •00D4<#∞; %3; $[3,3]; $[3]; $[3]> (A058E, _t0593);
    delta0595 = prim @00A5<#∞; %3; $[3]> (_t0594, xn0586);
    xn0586 = prim -0026<$[3]> (xn0586, delta0595);
    real _t0596 = 0.1e-7;
    real _t0597 = 0.1e-7;
    real _t0598 = prim *0034 (_t0596, _t0597);
    real _t0599 = prim •00CE<$[3]; $[3]; $[]> (delta0595, delta0595);
    bool _t059A = prim >=007E (_t0598, _t0599);
    if _t059A {
      real _t059B = 0.1e1;
      real _t059C = 0.1e-7;
      real _t059D = prim +0017<$[]> (_t059B, _t059C);
      real _t059E = 0.1e1;
      real _t059F = 0.1e1;
      real _t05A0 = 0.1e1;
      vec3 _t05A1 = [_t059E, _t059F, _t05A0];
      real _t05A2 = prim •00CE<$[3]; $[3]; $[]> (_t05A1, xn0586);
      bool _t05A3 = prim >0080 (_t059D, _t05A2);
      real _t05A4 = 0.1e-7;
      real _t05A5 = 0.1e-7;
      real _t05A6 = 0.1e-7;
      vec3 _t05A7 = [_t05A4, _t05A5, _t05A6];
      vec3 _t05A8 = prim +0017<$[3]> (_t05A7, xn0586);
      real _t05A9 = _t05A8[0];
      real _t05AA = -0.e0;
      bool _t05AB = prim >0080 (_t05A9, _t05AA);
      real _t05AC = 0.1e-7;
      real _t05AD = 0.1e-7;
      real _t05AE = 0.1e-7;
      vec3 _t05AF = [_t05AC, _t05AD, _t05AE];
      vec3 _t05B0 = prim +0017<$[3]> (_t05AF, xn0586);
      real _t05B1 = _t05B0[1];
      real _t05B2 = -0.e0;
      bool _t05B3 = prim >0080 (_t05B1, _t05B2);
      real _t05B4 = 0.1e-7;
      real _t05B5 = 0.1e-7;
      real _t05B6 = 0.1e-7;
      vec3 _t05B7 = [_t05B4, _t05B5, _t05B6];
      vec3 _t05B8 = prim +0017<$[3]> (_t05B7, xn0586);
      real _t05B9 = _t05B8[2];
      real _t05BA = -0.e0;
      bool _t05BB = prim >0080 (_t05B9, _t05BA);
      bool _t05BC = prim $and01C4 (_t05B3, _t05BB);
      bool _t05BD = prim $and01C4 (_t05AB, _t05BC);
      bool _t05BE = prim $and01C4 (_t05A3, _t05BD);
      if _t05BE {
        Femdata: MeshPos _t05BF = extractFemItemN((mesh0582, cellInt0581, xn0586, pos0580),AllBuild(MeshPos),);
        return _t05BF;
      } else {
        Femdata: MeshPos _t05C0 = extractFemItemN((mesh0582),InvalidBuild(MeshPos),);
        return _t05C0;
      }
    }
  }
  Femdata: MeshPos _t05C2 = extractFemItemN((mesh0582),InvalidBuild(MeshPos),);
  return _t05C2;
}
function Femdata: MeshPos#0 _mesh_pos_mesh_t_build_world_pos05C3 (Femdata: MeshPos pos05C4)
{
  bool _t05C5 = extractFemItem(WorldTest(MeshPos), bool, pos05C4);
  if _t05C5 {
    vec3 _t05C6 = extractFemItem(RefPos(MeshPos), vec3, pos05C4);
    int _t05C7 = extractFemItem(CellIndex(MeshPos), int, pos05C4);
    Femdata: Mesh _t05C8 = extractFem(pos05C4, Mesh);
    vec3 _t05C9 = func mesh_t_transform_0057C (_t05C6, _t05C7, _t05C8);
    Femdata: MeshPos _t05CA = extractFemItemN((pos05C4, _t05C9),NewWorld(MeshPos),);
    return _t05CA;
  } else {
    return pos05C4;
  }
}
function vec3#0 worldPos05CB (Femdata: MeshPos pos05C4)
{
  vec3 _t05CC = extractFemItem(RefPos(MeshPos), vec3, pos05C4);
  int _t05CD = extractFemItem(CellIndex(MeshPos), int, pos05C4);
  Femdata: Mesh _t05CE = extractFem(pos05C4, Mesh);
  vec3 _t05CF = func mesh_t_transform_0057C (_t05CC, _t05CD, _t05CE);
  return _t05CF;
}
function Femdata: MeshPos#0 $exitPos05D0 (Femdata: Mesh mesh05D1, int cellId05D2, vec3 refPos05D3, vec3 dPos05D4, real[2] time05D5)
{
  int _t05D6 = -1;
  real _t05D7 = time05D5[1];
  int _t05D8 = prim $r2i01B7 (_t05D7);
  int[2] _t05DA = func nextCell405D9 (_t05D8, cellId05D2, mesh05D1);
  int _t05DB = 0;
  int _t05DC = prim $sub01C0<int; %2> (_t05DA, _t05DB);
  bool _t05DD = prim !=0086 (_t05D6, _t05DC);
  if _t05DD {
    real _t05DE = time05D5[1];
    int _t05DF = prim $r2i01B7 (_t05DE);
    int[2] _t05E0 = func nextCell405D9 (_t05DF, cellId05D2, mesh05D1);
    int _t05E1 = 0;
    int _t05E2 = prim $sub01C0<int; %2> (_t05E0, _t05E1);
    real _t05E3 = 0.1e1;
    real _t05E4 = 0.e0;
    real _t05E5 = 0.e0;
    real _t05E6 = 0.e0;
    vec4 _t05E7 = [_t05E3, _t05E4, _t05E5, _t05E6];
    real _t05E8 = 0.e0;
    real _t05E9 = 0.1e1;
    real _t05EA = 0.e0;
    real _t05EB = 0.e0;
    vec4 _t05EC = [_t05E8, _t05E9, _t05EA, _t05EB];
    real _t05ED = 0.e0;
    real _t05EE = 0.e0;
    real _t05EF = 0.1e1;
    real _t05F0 = 0.e0;
    vec4 _t05F1 = [_t05ED, _t05EE, _t05EF, _t05F0];
    real _t05F2 = 0.971445146547e-16;
    real _t05F3 = 0.e0;
    real _t05F4 = 0.e0;
    real _t05F5 = 0.1e1;
    vec4 _t05F6 = [_t05F2, _t05F3, _t05F4, _t05F5];
    tensor[4,4] _t05F7 = [_t05E7, _t05EC, _t05F1, _t05F6];
    real _t05F8 = 0.57735026919e0;
    real _t05F9 = 0.57735026919e0;
    real _t05FA = 0.57735026919e0;
    real _t05FB = -0.57735026919e0;
    vec4 _t05FC = [_t05F8, _t05F9, _t05FA, _t05FB];
    real _t05FD = -0.333333333333e0;
    real _t05FE = 0.666666666667e0;
    real _t05FF = -0.333333333333e0;
    real _t0600 = 0.333333333333e0;
    vec4 _t0601 = [_t05FD, _t05FE, _t05FF, _t0600];
    real _t0602 = -0.333333333333e0;
    real _t0603 = -0.333333333333e0;
    real _t0604 = 0.666666666667e0;
    real _t0605 = 0.333333333333e0;
    vec4 _t0606 = [_t0602, _t0603, _t0604, _t0605];
    real _t0607 = 0.971445146547e-16;
    real _t0608 = 0.e0;
    real _t0609 = 0.e0;
    real _t060A = 0.1e1;
    vec4 _t060B = [_t0607, _t0608, _t0609, _t060A];
    tensor[4,4] _t060C = [_t05FC, _t0601, _t0606, _t060B];
    real _t060D = -0.333333333333e0;
    real _t060E = 0.666666666667e0;
    real _t060F = -0.333333333333e0;
    real _t0610 = 0.333333333333e0;
    vec4 _t0611 = [_t060D, _t060E, _t060F, _t0610];
    real _t0612 = -0.57735026919e0;
    real _t0613 = -0.57735026919e0;
    real _t0614 = -0.57735026919e0;
    real _t0615 = 0.57735026919e0;
    vec4 _t0616 = [_t0612, _t0613, _t0614, _t0615];
    real _t0617 = -0.333333333333e0;
    real _t0618 = -0.333333333333e0;
    real _t0619 = 0.666666666667e0;
    real _t061A = 0.333333333333e0;
    vec4 _t061B = [_t0617, _t0618, _t0619, _t061A];
    real _t061C = 0.971445146547e-16;
    real _t061D = 0.e0;
    real _t061E = 0.e0;
    real _t061F = 0.1e1;
    vec4 _t0620 = [_t061C, _t061D, _t061E, _t061F];
    tensor[4,4] _t0621 = [_t0611, _t0616, _t061B, _t0620];
    real _t0622 = -0.333333333333e0;
    real _t0623 = 0.666666666667e0;
    real _t0624 = -0.333333333333e0;
    real _t0625 = 0.333333333333e0;
    vec4 _t0626 = [_t0622, _t0623, _t0624, _t0625];
    real _t0627 = -0.333333333333e0;
    real _t0628 = -0.333333333333e0;
    real _t0629 = 0.666666666667e0;
    real _t062A = 0.333333333333e0;
    vec4 _t062B = [_t0627, _t0628, _t0629, _t062A];
    real _t062C = 0.57735026919e0;
    real _t062D = 0.57735026919e0;
    real _t062E = 0.57735026919e0;
    real _t062F = -0.57735026919e0;
    vec4 _t0630 = [_t062C, _t062D, _t062E, _t062F];
    real _t0631 = 0.971445146547e-16;
    real _t0632 = 0.e0;
    real _t0633 = 0.e0;
    real _t0634 = 0.1e1;
    vec4 _t0635 = [_t0631, _t0632, _t0633, _t0634];
    tensor[4,4] _t0636 = [_t0626, _t062B, _t0630, _t0635];
    tensor[4,4][4] _t0637 = {_t05F7, _t060C, _t0621, _t0636};
    real _t0638 = 0.57735026919e0;
    real _t0639 = -0.1e1;
    real _t063A = -0.1e1;
    real _t063B = 0.1e1;
    vec4 _t063C = [_t0638, _t0639, _t063A, _t063B];
    real _t063D = 0.57735026919e0;
    real _t063E = 0.1e1;
    real _t063F = 0.e0;
    real _t0640 = 0.e0;
    vec4 _t0641 = [_t063D, _t063E, _t063F, _t0640];
    real _t0642 = 0.57735026919e0;
    real _t0643 = 0.e0;
    real _t0644 = 0.1e1;
    real _t0645 = 0.e0;
    vec4 _t0646 = [_t0642, _t0643, _t0644, _t0645];
    real _t0647 = 0.e0;
    real _t0648 = 0.e0;
    real _t0649 = 0.e0;
    real _t064A = 0.1e1;
    vec4 _t064B = [_t0647, _t0648, _t0649, _t064A];
    tensor[4,4] _t064C = [_t063C, _t0641, _t0646, _t064B];
    real _t064D = 0.1e1;
    real _t064E = 0.e0;
    real _t064F = 0.e0;
    real _t0650 = 0.e0;
    vec4 _t0651 = [_t064D, _t064E, _t064F, _t0650];
    real _t0652 = 0.e0;
    real _t0653 = 0.1e1;
    real _t0654 = 0.e0;
    real _t0655 = 0.e0;
    vec4 _t0656 = [_t0652, _t0653, _t0654, _t0655];
    real _t0657 = 0.e0;
    real _t0658 = 0.e0;
    real _t0659 = 0.1e1;
    real _t065A = 0.e0;
    vec4 _t065B = [_t0657, _t0658, _t0659, _t065A];
    real _t065C = 0.e0;
    real _t065D = 0.e0;
    real _t065E = 0.e0;
    real _t065F = 0.1e1;
    vec4 _t0660 = [_t065C, _t065D, _t065E, _t065F];
    tensor[4,4] _t0661 = [_t0651, _t0656, _t065B, _t0660];
    real _t0662 = 0.e0;
    real _t0663 = 0.1e1;
    real _t0664 = 0.e0;
    real _t0665 = 0.e0;
    vec4 _t0666 = [_t0662, _t0663, _t0664, _t0665];
    real _t0667 = -0.1e1;
    real _t0668 = 0.e0;
    real _t0669 = 0.e0;
    real _t066A = 0.e0;
    vec4 _t066B = [_t0667, _t0668, _t0669, _t066A];
    real _t066C = 0.e0;
    real _t066D = 0.e0;
    real _t066E = 0.1e1;
    real _t066F = 0.e0;
    vec4 _t0670 = [_t066C, _t066D, _t066E, _t066F];
    real _t0671 = 0.e0;
    real _t0672 = 0.e0;
    real _t0673 = 0.e0;
    real _t0674 = 0.1e1;
    vec4 _t0675 = [_t0671, _t0672, _t0673, _t0674];
    tensor[4,4] _t0676 = [_t0666, _t066B, _t0670, _t0675];
    real _t0677 = 0.e0;
    real _t0678 = 0.1e1;
    real _t0679 = 0.e0;
    real _t067A = 0.e0;
    vec4 _t067B = [_t0677, _t0678, _t0679, _t067A];
    real _t067C = 0.e0;
    real _t067D = 0.e0;
    real _t067E = 0.1e1;
    real _t067F = 0.e0;
    vec4 _t0680 = [_t067C, _t067D, _t067E, _t067F];
    real _t0681 = 0.1e1;
    real _t0682 = 0.e0;
    real _t0683 = 0.e0;
    real _t0684 = 0.e0;
    vec4 _t0685 = [_t0681, _t0682, _t0683, _t0684];
    real _t0686 = 0.e0;
    real _t0687 = 0.e0;
    real _t0688 = 0.e0;
    real _t0689 = 0.1e1;
    vec4 _t068A = [_t0686, _t0687, _t0688, _t0689];
    tensor[4,4] _t068B = [_t067B, _t0680, _t0685, _t068A];
    tensor[4,4][4] _t068C = {_t064C, _t0661, _t0676, _t068B};
    real _t068D = -0.1e1;
    real _t068E = -0.57735026919e0;
    real _t068F = -0.1e1;
    real _t0690 = 0.1e1;
    vec4 _t0691 = [_t068D, _t068E, _t068F, _t0690];
    real _t0692 = 0.1e1;
    real _t0693 = -0.57735026919e0;
    real _t0694 = 0.e0;
    real _t0695 = 0.e0;
    vec4 _t0696 = [_t0692, _t0693, _t0694, _t0695];
    real _t0697 = 0.e0;
    real _t0698 = -0.57735026919e0;
    real _t0699 = 0.1e1;
    real _t069A = 0.e0;
    vec4 _t069B = [_t0697, _t0698, _t0699, _t069A];
    real _t069C = 0.e0;
    real _t069D = 0.e0;
    real _t069E = 0.e0;
    real _t069F = 0.1e1;
    vec4 _t06A0 = [_t069C, _t069D, _t069E, _t069F];
    tensor[4,4] _t06A1 = [_t0691, _t0696, _t069B, _t06A0];
    real _t06A2 = 0.e0;
    real _t06A3 = -0.1e1;
    real _t06A4 = 0.e0;
    real _t06A5 = 0.e0;
    vec4 _t06A6 = [_t06A2, _t06A3, _t06A4, _t06A5];
    real _t06A7 = 0.1e1;
    real _t06A8 = 0.e0;
    real _t06A9 = 0.e0;
    real _t06AA = 0.e0;
    vec4 _t06AB = [_t06A7, _t06A8, _t06A9, _t06AA];
    real _t06AC = 0.e0;
    real _t06AD = 0.e0;
    real _t06AE = 0.1e1;
    real _t06AF = 0.e0;
    vec4 _t06B0 = [_t06AC, _t06AD, _t06AE, _t06AF];
    real _t06B1 = 0.e0;
    real _t06B2 = 0.e0;
    real _t06B3 = 0.e0;
    real _t06B4 = 0.1e1;
    vec4 _t06B5 = [_t06B1, _t06B2, _t06B3, _t06B4];
    tensor[4,4] _t06B6 = [_t06A6, _t06AB, _t06B0, _t06B5];
    real _t06B7 = 0.1e1;
    real _t06B8 = 0.e0;
    real _t06B9 = 0.e0;
    real _t06BA = 0.e0;
    vec4 _t06BB = [_t06B7, _t06B8, _t06B9, _t06BA];
    real _t06BC = 0.e0;
    real _t06BD = 0.1e1;
    real _t06BE = 0.e0;
    real _t06BF = 0.e0;
    vec4 _t06C0 = [_t06BC, _t06BD, _t06BE, _t06BF];
    real _t06C1 = 0.e0;
    real _t06C2 = 0.e0;
    real _t06C3 = 0.1e1;
    real _t06C4 = 0.e0;
    vec4 _t06C5 = [_t06C1, _t06C2, _t06C3, _t06C4];
    real _t06C6 = 0.e0;
    real _t06C7 = 0.e0;
    real _t06C8 = 0.e0;
    real _t06C9 = 0.1e1;
    vec4 _t06CA = [_t06C6, _t06C7, _t06C8, _t06C9];
    tensor[4,4] _t06CB = [_t06BB, _t06C0, _t06C5, _t06CA];
    real _t06CC = 0.1e1;
    real _t06CD = 0.e0;
    real _t06CE = 0.e0;
    real _t06CF = 0.e0;
    vec4 _t06D0 = [_t06CC, _t06CD, _t06CE, _t06CF];
    real _t06D1 = 0.e0;
    real _t06D2 = 0.e0;
    real _t06D3 = 0.1e1;
    real _t06D4 = 0.e0;
    vec4 _t06D5 = [_t06D1, _t06D2, _t06D3, _t06D4];
    real _t06D6 = 0.e0;
    real _t06D7 = -0.1e1;
    real _t06D8 = 0.e0;
    real _t06D9 = 0.e0;
    vec4 _t06DA = [_t06D6, _t06D7, _t06D8, _t06D9];
    real _t06DB = 0.e0;
    real _t06DC = 0.e0;
    real _t06DD = 0.e0;
    real _t06DE = 0.1e1;
    vec4 _t06DF = [_t06DB, _t06DC, _t06DD, _t06DE];
    tensor[4,4] _t06E0 = [_t06D0, _t06D5, _t06DA, _t06DF];
    tensor[4,4][4] _t06E1 = {_t06A1, _t06B6, _t06CB, _t06E0};
    real _t06E2 = -0.1e1;
    real _t06E3 = -0.1e1;
    real _t06E4 = 0.57735026919e0;
    real _t06E5 = 0.1e1;
    vec4 _t06E6 = [_t06E2, _t06E3, _t06E4, _t06E5];
    real _t06E7 = 0.1e1;
    real _t06E8 = 0.e0;
    real _t06E9 = 0.57735026919e0;
    real _t06EA = 0.e0;
    vec4 _t06EB = [_t06E7, _t06E8, _t06E9, _t06EA];
    real _t06EC = 0.e0;
    real _t06ED = 0.1e1;
    real _t06EE = 0.57735026919e0;
    real _t06EF = 0.e0;
    vec4 _t06F0 = [_t06EC, _t06ED, _t06EE, _t06EF];
    real _t06F1 = 0.e0;
    real _t06F2 = 0.e0;
    real _t06F3 = 0.e0;
    real _t06F4 = 0.1e1;
    vec4 _t06F5 = [_t06F1, _t06F2, _t06F3, _t06F4];
    tensor[4,4] _t06F6 = [_t06E6, _t06EB, _t06F0, _t06F5];
    real _t06F7 = 0.e0;
    real _t06F8 = 0.e0;
    real _t06F9 = 0.1e1;
    real _t06FA = 0.e0;
    vec4 _t06FB = [_t06F7, _t06F8, _t06F9, _t06FA];
    real _t06FC = 0.1e1;
    real _t06FD = 0.e0;
    real _t06FE = 0.e0;
    real _t06FF = 0.e0;
    vec4 _t0700 = [_t06FC, _t06FD, _t06FE, _t06FF];
    real _t0701 = 0.e0;
    real _t0702 = 0.1e1;
    real _t0703 = 0.e0;
    real _t0704 = 0.e0;
    vec4 _t0705 = [_t0701, _t0702, _t0703, _t0704];
    real _t0706 = 0.e0;
    real _t0707 = 0.e0;
    real _t0708 = 0.e0;
    real _t0709 = 0.1e1;
    vec4 _t070A = [_t0706, _t0707, _t0708, _t0709];
    tensor[4,4] _t070B = [_t06FB, _t0700, _t0705, _t070A];
    real _t070C = 0.1e1;
    real _t070D = 0.e0;
    real _t070E = 0.e0;
    real _t070F = 0.e0;
    vec4 _t0710 = [_t070C, _t070D, _t070E, _t070F];
    real _t0711 = 0.e0;
    real _t0712 = 0.e0;
    real _t0713 = -0.1e1;
    real _t0714 = 0.e0;
    vec4 _t0715 = [_t0711, _t0712, _t0713, _t0714];
    real _t0716 = 0.e0;
    real _t0717 = 0.1e1;
    real _t0718 = 0.e0;
    real _t0719 = 0.e0;
    vec4 _t071A = [_t0716, _t0717, _t0718, _t0719];
    real _t071B = 0.e0;
    real _t071C = 0.e0;
    real _t071D = 0.e0;
    real _t071E = 0.1e1;
    vec4 _t071F = [_t071B, _t071C, _t071D, _t071E];
    tensor[4,4] _t0720 = [_t0710, _t0715, _t071A, _t071F];
    real _t0721 = 0.1e1;
    real _t0722 = 0.e0;
    real _t0723 = 0.e0;
    real _t0724 = 0.e0;
    vec4 _t0725 = [_t0721, _t0722, _t0723, _t0724];
    real _t0726 = 0.e0;
    real _t0727 = 0.1e1;
    real _t0728 = 0.e0;
    real _t0729 = 0.e0;
    vec4 _t072A = [_t0726, _t0727, _t0728, _t0729];
    real _t072B = 0.e0;
    real _t072C = 0.e0;
    real _t072D = 0.1e1;
    real _t072E = 0.e0;
    vec4 _t072F = [_t072B, _t072C, _t072D, _t072E];
    real _t0730 = 0.e0;
    real _t0731 = 0.e0;
    real _t0732 = 0.e0;
    real _t0733 = 0.1e1;
    vec4 _t0734 = [_t0730, _t0731, _t0732, _t0733];
    tensor[4,4] _t0735 = [_t0725, _t072A, _t072F, _t0734];
    tensor[4,4][4] _t0736 = {_t06F6, _t070B, _t0720, _t0735};
    tensor[4,4][4][4] _t0737 = {_t0637, _t068C, _t06E1, _t0736};
    real _t0738 = time05D5[1];
    int _t0739 = prim $r2i01B7 (_t0738);
    tensor[4,4][4] _t073A = prim $sub01C0<tensor[4,4][4]; %4> (_t0737, _t0739);
    real _t073B = time05D5[1];
    int _t073C = prim $r2i01B7 (_t073B);
    int[2] _t073D = func nextCell405D9 (_t073C, cellId05D2, mesh05D1);
    int _t073E = 1;
    int _t073F = prim $sub01C0<int; %2> (_t073D, _t073E);
    tensor[4,4] _t0740 = prim $sub01C0<tensor[4,4]; %4> (_t073A, _t073F);
    real _t0741 = time05D5[0];
    vec3 _t0742 = prim *0036<$[3]> (_t0741, dPos05D4);
    vec3 _t0743 = prim +0017<$[3]> (_t0742, refPos05D3);
    real _t0744 = _t0743[0];
    real _t0745 = time05D5[0];
    vec3 _t0746 = prim *0036<$[3]> (_t0745, dPos05D4);
    vec3 _t0747 = prim +0017<$[3]> (_t0746, refPos05D3);
    real _t0748 = _t0747[1];
    real _t0749 = time05D5[0];
    vec3 _t074A = prim *0036<$[3]> (_t0749, dPos05D4);
    vec3 _t074B = prim +0017<$[3]> (_t074A, refPos05D3);
    real _t074C = _t074B[2];
    real _t074D = 0.1e1;
    vec4 _t074E = [_t0744, _t0748, _t074C, _t074D];
    vec4 _t074F = prim •00CE<$[4,4]; $[4]; $[4]> (_t0740, _t074E);
    real _t0750 = _t074F[0];
    real _t0751 = 0.1e1;
    real _t0752 = 0.e0;
    real _t0753 = 0.e0;
    real _t0754 = 0.e0;
    vec4 _t0755 = [_t0751, _t0752, _t0753, _t0754];
    real _t0756 = 0.e0;
    real _t0757 = 0.1e1;
    real _t0758 = 0.e0;
    real _t0759 = 0.e0;
    vec4 _t075A = [_t0756, _t0757, _t0758, _t0759];
    real _t075B = 0.e0;
    real _t075C = 0.e0;
    real _t075D = 0.1e1;
    real _t075E = 0.e0;
    vec4 _t075F = [_t075B, _t075C, _t075D, _t075E];
    real _t0760 = 0.971445146547e-16;
    real _t0761 = 0.e0;
    real _t0762 = 0.e0;
    real _t0763 = 0.1e1;
    vec4 _t0764 = [_t0760, _t0761, _t0762, _t0763];
    tensor[4,4] _t0765 = [_t0755, _t075A, _t075F, _t0764];
    real _t0766 = 0.57735026919e0;
    real _t0767 = 0.57735026919e0;
    real _t0768 = 0.57735026919e0;
    real _t0769 = -0.57735026919e0;
    vec4 _t076A = [_t0766, _t0767, _t0768, _t0769];
    real _t076B = -0.333333333333e0;
    real _t076C = 0.666666666667e0;
    real _t076D = -0.333333333333e0;
    real _t076E = 0.333333333333e0;
    vec4 _t076F = [_t076B, _t076C, _t076D, _t076E];
    real _t0770 = -0.333333333333e0;
    real _t0771 = -0.333333333333e0;
    real _t0772 = 0.666666666667e0;
    real _t0773 = 0.333333333333e0;
    vec4 _t0774 = [_t0770, _t0771, _t0772, _t0773];
    real _t0775 = 0.971445146547e-16;
    real _t0776 = 0.e0;
    real _t0777 = 0.e0;
    real _t0778 = 0.1e1;
    vec4 _t0779 = [_t0775, _t0776, _t0777, _t0778];
    tensor[4,4] _t077A = [_t076A, _t076F, _t0774, _t0779];
    real _t077B = -0.333333333333e0;
    real _t077C = 0.666666666667e0;
    real _t077D = -0.333333333333e0;
    real _t077E = 0.333333333333e0;
    vec4 _t077F = [_t077B, _t077C, _t077D, _t077E];
    real _t0780 = -0.57735026919e0;
    real _t0781 = -0.57735026919e0;
    real _t0782 = -0.57735026919e0;
    real _t0783 = 0.57735026919e0;
    vec4 _t0784 = [_t0780, _t0781, _t0782, _t0783];
    real _t0785 = -0.333333333333e0;
    real _t0786 = -0.333333333333e0;
    real _t0787 = 0.666666666667e0;
    real _t0788 = 0.333333333333e0;
    vec4 _t0789 = [_t0785, _t0786, _t0787, _t0788];
    real _t078A = 0.971445146547e-16;
    real _t078B = 0.e0;
    real _t078C = 0.e0;
    real _t078D = 0.1e1;
    vec4 _t078E = [_t078A, _t078B, _t078C, _t078D];
    tensor[4,4] _t078F = [_t077F, _t0784, _t0789, _t078E];
    real _t0790 = -0.333333333333e0;
    real _t0791 = 0.666666666667e0;
    real _t0792 = -0.333333333333e0;
    real _t0793 = 0.333333333333e0;
    vec4 _t0794 = [_t0790, _t0791, _t0792, _t0793];
    real _t0795 = -0.333333333333e0;
    real _t0796 = -0.333333333333e0;
    real _t0797 = 0.666666666667e0;
    real _t0798 = 0.333333333333e0;
    vec4 _t0799 = [_t0795, _t0796, _t0797, _t0798];
    real _t079A = 0.57735026919e0;
    real _t079B = 0.57735026919e0;
    real _t079C = 0.57735026919e0;
    real _t079D = -0.57735026919e0;
    vec4 _t079E = [_t079A, _t079B, _t079C, _t079D];
    real _t079F = 0.971445146547e-16;
    real _t07A0 = 0.e0;
    real _t07A1 = 0.e0;
    real _t07A2 = 0.1e1;
    vec4 _t07A3 = [_t079F, _t07A0, _t07A1, _t07A2];
    tensor[4,4] _t07A4 = [_t0794, _t0799, _t079E, _t07A3];
    tensor[4,4][4] _t07A5 = {_t0765, _t077A, _t078F, _t07A4};
    real _t07A6 = 0.57735026919e0;
    real _t07A7 = -0.1e1;
    real _t07A8 = -0.1e1;
    real _t07A9 = 0.1e1;
    vec4 _t07AA = [_t07A6, _t07A7, _t07A8, _t07A9];
    real _t07AB = 0.57735026919e0;
    real _t07AC = 0.1e1;
    real _t07AD = 0.e0;
    real _t07AE = 0.e0;
    vec4 _t07AF = [_t07AB, _t07AC, _t07AD, _t07AE];
    real _t07B0 = 0.57735026919e0;
    real _t07B1 = 0.e0;
    real _t07B2 = 0.1e1;
    real _t07B3 = 0.e0;
    vec4 _t07B4 = [_t07B0, _t07B1, _t07B2, _t07B3];
    real _t07B5 = 0.e0;
    real _t07B6 = 0.e0;
    real _t07B7 = 0.e0;
    real _t07B8 = 0.1e1;
    vec4 _t07B9 = [_t07B5, _t07B6, _t07B7, _t07B8];
    tensor[4,4] _t07BA = [_t07AA, _t07AF, _t07B4, _t07B9];
    real _t07BB = 0.1e1;
    real _t07BC = 0.e0;
    real _t07BD = 0.e0;
    real _t07BE = 0.e0;
    vec4 _t07BF = [_t07BB, _t07BC, _t07BD, _t07BE];
    real _t07C0 = 0.e0;
    real _t07C1 = 0.1e1;
    real _t07C2 = 0.e0;
    real _t07C3 = 0.e0;
    vec4 _t07C4 = [_t07C0, _t07C1, _t07C2, _t07C3];
    real _t07C5 = 0.e0;
    real _t07C6 = 0.e0;
    real _t07C7 = 0.1e1;
    real _t07C8 = 0.e0;
    vec4 _t07C9 = [_t07C5, _t07C6, _t07C7, _t07C8];
    real _t07CA = 0.e0;
    real _t07CB = 0.e0;
    real _t07CC = 0.e0;
    real _t07CD = 0.1e1;
    vec4 _t07CE = [_t07CA, _t07CB, _t07CC, _t07CD];
    tensor[4,4] _t07CF = [_t07BF, _t07C4, _t07C9, _t07CE];
    real _t07D0 = 0.e0;
    real _t07D1 = 0.1e1;
    real _t07D2 = 0.e0;
    real _t07D3 = 0.e0;
    vec4 _t07D4 = [_t07D0, _t07D1, _t07D2, _t07D3];
    real _t07D5 = -0.1e1;
    real _t07D6 = 0.e0;
    real _t07D7 = 0.e0;
    real _t07D8 = 0.e0;
    vec4 _t07D9 = [_t07D5, _t07D6, _t07D7, _t07D8];
    real _t07DA = 0.e0;
    real _t07DB = 0.e0;
    real _t07DC = 0.1e1;
    real _t07DD = 0.e0;
    vec4 _t07DE = [_t07DA, _t07DB, _t07DC, _t07DD];
    real _t07DF = 0.e0;
    real _t07E0 = 0.e0;
    real _t07E1 = 0.e0;
    real _t07E2 = 0.1e1;
    vec4 _t07E3 = [_t07DF, _t07E0, _t07E1, _t07E2];
    tensor[4,4] _t07E4 = [_t07D4, _t07D9, _t07DE, _t07E3];
    real _t07E5 = 0.e0;
    real _t07E6 = 0.1e1;
    real _t07E7 = 0.e0;
    real _t07E8 = 0.e0;
    vec4 _t07E9 = [_t07E5, _t07E6, _t07E7, _t07E8];
    real _t07EA = 0.e0;
    real _t07EB = 0.e0;
    real _t07EC = 0.1e1;
    real _t07ED = 0.e0;
    vec4 _t07EE = [_t07EA, _t07EB, _t07EC, _t07ED];
    real _t07EF = 0.1e1;
    real _t07F0 = 0.e0;
    real _t07F1 = 0.e0;
    real _t07F2 = 0.e0;
    vec4 _t07F3 = [_t07EF, _t07F0, _t07F1, _t07F2];
    real _t07F4 = 0.e0;
    real _t07F5 = 0.e0;
    real _t07F6 = 0.e0;
    real _t07F7 = 0.1e1;
    vec4 _t07F8 = [_t07F4, _t07F5, _t07F6, _t07F7];
    tensor[4,4] _t07F9 = [_t07E9, _t07EE, _t07F3, _t07F8];
    tensor[4,4][4] _t07FA = {_t07BA, _t07CF, _t07E4, _t07F9};
    real _t07FB = -0.1e1;
    real _t07FC = -0.57735026919e0;
    real _t07FD = -0.1e1;
    real _t07FE = 0.1e1;
    vec4 _t07FF = [_t07FB, _t07FC, _t07FD, _t07FE];
    real _t0800 = 0.1e1;
    real _t0801 = -0.57735026919e0;
    real _t0802 = 0.e0;
    real _t0803 = 0.e0;
    vec4 _t0804 = [_t0800, _t0801, _t0802, _t0803];
    real _t0805 = 0.e0;
    real _t0806 = -0.57735026919e0;
    real _t0807 = 0.1e1;
    real _t0808 = 0.e0;
    vec4 _t0809 = [_t0805, _t0806, _t0807, _t0808];
    real _t080A = 0.e0;
    real _t080B = 0.e0;
    real _t080C = 0.e0;
    real _t080D = 0.1e1;
    vec4 _t080E = [_t080A, _t080B, _t080C, _t080D];
    tensor[4,4] _t080F = [_t07FF, _t0804, _t0809, _t080E];
    real _t0810 = 0.e0;
    real _t0811 = -0.1e1;
    real _t0812 = 0.e0;
    real _t0813 = 0.e0;
    vec4 _t0814 = [_t0810, _t0811, _t0812, _t0813];
    real _t0815 = 0.1e1;
    real _t0816 = 0.e0;
    real _t0817 = 0.e0;
    real _t0818 = 0.e0;
    vec4 _t0819 = [_t0815, _t0816, _t0817, _t0818];
    real _t081A = 0.e0;
    real _t081B = 0.e0;
    real _t081C = 0.1e1;
    real _t081D = 0.e0;
    vec4 _t081E = [_t081A, _t081B, _t081C, _t081D];
    real _t081F = 0.e0;
    real _t0820 = 0.e0;
    real _t0821 = 0.e0;
    real _t0822 = 0.1e1;
    vec4 _t0823 = [_t081F, _t0820, _t0821, _t0822];
    tensor[4,4] _t0824 = [_t0814, _t0819, _t081E, _t0823];
    real _t0825 = 0.1e1;
    real _t0826 = 0.e0;
    real _t0827 = 0.e0;
    real _t0828 = 0.e0;
    vec4 _t0829 = [_t0825, _t0826, _t0827, _t0828];
    real _t082A = 0.e0;
    real _t082B = 0.1e1;
    real _t082C = 0.e0;
    real _t082D = 0.e0;
    vec4 _t082E = [_t082A, _t082B, _t082C, _t082D];
    real _t082F = 0.e0;
    real _t0830 = 0.e0;
    real _t0831 = 0.1e1;
    real _t0832 = 0.e0;
    vec4 _t0833 = [_t082F, _t0830, _t0831, _t0832];
    real _t0834 = 0.e0;
    real _t0835 = 0.e0;
    real _t0836 = 0.e0;
    real _t0837 = 0.1e1;
    vec4 _t0838 = [_t0834, _t0835, _t0836, _t0837];
    tensor[4,4] _t0839 = [_t0829, _t082E, _t0833, _t0838];
    real _t083A = 0.1e1;
    real _t083B = 0.e0;
    real _t083C = 0.e0;
    real _t083D = 0.e0;
    vec4 _t083E = [_t083A, _t083B, _t083C, _t083D];
    real _t083F = 0.e0;
    real _t0840 = 0.e0;
    real _t0841 = 0.1e1;
    real _t0842 = 0.e0;
    vec4 _t0843 = [_t083F, _t0840, _t0841, _t0842];
    real _t0844 = 0.e0;
    real _t0845 = -0.1e1;
    real _t0846 = 0.e0;
    real _t0847 = 0.e0;
    vec4 _t0848 = [_t0844, _t0845, _t0846, _t0847];
    real _t0849 = 0.e0;
    real _t084A = 0.e0;
    real _t084B = 0.e0;
    real _t084C = 0.1e1;
    vec4 _t084D = [_t0849, _t084A, _t084B, _t084C];
    tensor[4,4] _t084E = [_t083E, _t0843, _t0848, _t084D];
    tensor[4,4][4] _t084F = {_t080F, _t0824, _t0839, _t084E};
    real _t0850 = -0.1e1;
    real _t0851 = -0.1e1;
    real _t0852 = 0.57735026919e0;
    real _t0853 = 0.1e1;
    vec4 _t0854 = [_t0850, _t0851, _t0852, _t0853];
    real _t0855 = 0.1e1;
    real _t0856 = 0.e0;
    real _t0857 = 0.57735026919e0;
    real _t0858 = 0.e0;
    vec4 _t0859 = [_t0855, _t0856, _t0857, _t0858];
    real _t085A = 0.e0;
    real _t085B = 0.1e1;
    real _t085C = 0.57735026919e0;
    real _t085D = 0.e0;
    vec4 _t085E = [_t085A, _t085B, _t085C, _t085D];
    real _t085F = 0.e0;
    real _t0860 = 0.e0;
    real _t0861 = 0.e0;
    real _t0862 = 0.1e1;
    vec4 _t0863 = [_t085F, _t0860, _t0861, _t0862];
    tensor[4,4] _t0864 = [_t0854, _t0859, _t085E, _t0863];
    real _t0865 = 0.e0;
    real _t0866 = 0.e0;
    real _t0867 = 0.1e1;
    real _t0868 = 0.e0;
    vec4 _t0869 = [_t0865, _t0866, _t0867, _t0868];
    real _t086A = 0.1e1;
    real _t086B = 0.e0;
    real _t086C = 0.e0;
    real _t086D = 0.e0;
    vec4 _t086E = [_t086A, _t086B, _t086C, _t086D];
    real _t086F = 0.e0;
    real _t0870 = 0.1e1;
    real _t0871 = 0.e0;
    real _t0872 = 0.e0;
    vec4 _t0873 = [_t086F, _t0870, _t0871, _t0872];
    real _t0874 = 0.e0;
    real _t0875 = 0.e0;
    real _t0876 = 0.e0;
    real _t0877 = 0.1e1;
    vec4 _t0878 = [_t0874, _t0875, _t0876, _t0877];
    tensor[4,4] _t0879 = [_t0869, _t086E, _t0873, _t0878];
    real _t087A = 0.1e1;
    real _t087B = 0.e0;
    real _t087C = 0.e0;
    real _t087D = 0.e0;
    vec4 _t087E = [_t087A, _t087B, _t087C, _t087D];
    real _t087F = 0.e0;
    real _t0880 = 0.e0;
    real _t0881 = -0.1e1;
    real _t0882 = 0.e0;
    vec4 _t0883 = [_t087F, _t0880, _t0881, _t0882];
    real _t0884 = 0.e0;
    real _t0885 = 0.1e1;
    real _t0886 = 0.e0;
    real _t0887 = 0.e0;
    vec4 _t0888 = [_t0884, _t0885, _t0886, _t0887];
    real _t0889 = 0.e0;
    real _t088A = 0.e0;
    real _t088B = 0.e0;
    real _t088C = 0.1e1;
    vec4 _t088D = [_t0889, _t088A, _t088B, _t088C];
    tensor[4,4] _t088E = [_t087E, _t0883, _t0888, _t088D];
    real _t088F = 0.1e1;
    real _t0890 = 0.e0;
    real _t0891 = 0.e0;
    real _t0892 = 0.e0;
    vec4 _t0893 = [_t088F, _t0890, _t0891, _t0892];
    real _t0894 = 0.e0;
    real _t0895 = 0.1e1;
    real _t0896 = 0.e0;
    real _t0897 = 0.e0;
    vec4 _t0898 = [_t0894, _t0895, _t0896, _t0897];
    real _t0899 = 0.e0;
    real _t089A = 0.e0;
    real _t089B = 0.1e1;
    real _t089C = 0.e0;
    vec4 _t089D = [_t0899, _t089A, _t089B, _t089C];
    real _t089E = 0.e0;
    real _t089F = 0.e0;
    real _t08A0 = 0.e0;
    real _t08A1 = 0.1e1;
    vec4 _t08A2 = [_t089E, _t089F, _t08A0, _t08A1];
    tensor[4,4] _t08A3 = [_t0893, _t0898, _t089D, _t08A2];
    tensor[4,4][4] _t08A4 = {_t0864, _t0879, _t088E, _t08A3};
    tensor[4,4][4][4] _t08A5 = {_t07A5, _t07FA, _t084F, _t08A4};
    real _t08A6 = time05D5[1];
    int _t08A7 = prim $r2i01B7 (_t08A6);
    tensor[4,4][4] _t08A8 = prim $sub01C0<tensor[4,4][4]; %4> (_t08A5, _t08A7);
    real _t08A9 = time05D5[1];
    int _t08AA = prim $r2i01B7 (_t08A9);
    int[2] _t08AB = func nextCell405D9 (_t08AA, cellId05D2, mesh05D1);
    int _t08AC = 1;
    int _t08AD = prim $sub01C0<int; %2> (_t08AB, _t08AC);
    tensor[4,4] _t08AE = prim $sub01C0<tensor[4,4]; %4> (_t08A8, _t08AD);
    real _t08AF = time05D5[0];
    vec3 _t08B0 = prim *0036<$[3]> (_t08AF, dPos05D4);
    vec3 _t08B1 = prim +0017<$[3]> (_t08B0, refPos05D3);
    real _t08B2 = _t08B1[0];
    real _t08B3 = time05D5[0];
    vec3 _t08B4 = prim *0036<$[3]> (_t08B3, dPos05D4);
    vec3 _t08B5 = prim +0017<$[3]> (_t08B4, refPos05D3);
    real _t08B6 = _t08B5[1];
    real _t08B7 = time05D5[0];
    vec3 _t08B8 = prim *0036<$[3]> (_t08B7, dPos05D4);
    vec3 _t08B9 = prim +0017<$[3]> (_t08B8, refPos05D3);
    real _t08BA = _t08B9[2];
    real _t08BB = 0.1e1;
    vec4 _t08BC = [_t08B2, _t08B6, _t08BA, _t08BB];
    vec4 _t08BD = prim •00CE<$[4,4]; $[4]; $[4]> (_t08AE, _t08BC);
    real _t08BE = _t08BD[1];
    real _t08BF = 0.1e1;
    real _t08C0 = 0.e0;
    real _t08C1 = 0.e0;
    real _t08C2 = 0.e0;
    vec4 _t08C3 = [_t08BF, _t08C0, _t08C1, _t08C2];
    real _t08C4 = 0.e0;
    real _t08C5 = 0.1e1;
    real _t08C6 = 0.e0;
    real _t08C7 = 0.e0;
    vec4 _t08C8 = [_t08C4, _t08C5, _t08C6, _t08C7];
    real _t08C9 = 0.e0;
    real _t08CA = 0.e0;
    real _t08CB = 0.1e1;
    real _t08CC = 0.e0;
    vec4 _t08CD = [_t08C9, _t08CA, _t08CB, _t08CC];
    real _t08CE = 0.971445146547e-16;
    real _t08CF = 0.e0;
    real _t08D0 = 0.e0;
    real _t08D1 = 0.1e1;
    vec4 _t08D2 = [_t08CE, _t08CF, _t08D0, _t08D1];
    tensor[4,4] _t08D3 = [_t08C3, _t08C8, _t08CD, _t08D2];
    real _t08D4 = 0.57735026919e0;
    real _t08D5 = 0.57735026919e0;
    real _t08D6 = 0.57735026919e0;
    real _t08D7 = -0.57735026919e0;
    vec4 _t08D8 = [_t08D4, _t08D5, _t08D6, _t08D7];
    real _t08D9 = -0.333333333333e0;
    real _t08DA = 0.666666666667e0;
    real _t08DB = -0.333333333333e0;
    real _t08DC = 0.333333333333e0;
    vec4 _t08DD = [_t08D9, _t08DA, _t08DB, _t08DC];
    real _t08DE = -0.333333333333e0;
    real _t08DF = -0.333333333333e0;
    real _t08E0 = 0.666666666667e0;
    real _t08E1 = 0.333333333333e0;
    vec4 _t08E2 = [_t08DE, _t08DF, _t08E0, _t08E1];
    real _t08E3 = 0.971445146547e-16;
    real _t08E4 = 0.e0;
    real _t08E5 = 0.e0;
    real _t08E6 = 0.1e1;
    vec4 _t08E7 = [_t08E3, _t08E4, _t08E5, _t08E6];
    tensor[4,4] _t08E8 = [_t08D8, _t08DD, _t08E2, _t08E7];
    real _t08E9 = -0.333333333333e0;
    real _t08EA = 0.666666666667e0;
    real _t08EB = -0.333333333333e0;
    real _t08EC = 0.333333333333e0;
    vec4 _t08ED = [_t08E9, _t08EA, _t08EB, _t08EC];
    real _t08EE = -0.57735026919e0;
    real _t08EF = -0.57735026919e0;
    real _t08F0 = -0.57735026919e0;
    real _t08F1 = 0.57735026919e0;
    vec4 _t08F2 = [_t08EE, _t08EF, _t08F0, _t08F1];
    real _t08F3 = -0.333333333333e0;
    real _t08F4 = -0.333333333333e0;
    real _t08F5 = 0.666666666667e0;
    real _t08F6 = 0.333333333333e0;
    vec4 _t08F7 = [_t08F3, _t08F4, _t08F5, _t08F6];
    real _t08F8 = 0.971445146547e-16;
    real _t08F9 = 0.e0;
    real _t08FA = 0.e0;
    real _t08FB = 0.1e1;
    vec4 _t08FC = [_t08F8, _t08F9, _t08FA, _t08FB];
    tensor[4,4] _t08FD = [_t08ED, _t08F2, _t08F7, _t08FC];
    real _t08FE = -0.333333333333e0;
    real _t08FF = 0.666666666667e0;
    real _t0900 = -0.333333333333e0;
    real _t0901 = 0.333333333333e0;
    vec4 _t0902 = [_t08FE, _t08FF, _t0900, _t0901];
    real _t0903 = -0.333333333333e0;
    real _t0904 = -0.333333333333e0;
    real _t0905 = 0.666666666667e0;
    real _t0906 = 0.333333333333e0;
    vec4 _t0907 = [_t0903, _t0904, _t0905, _t0906];
    real _t0908 = 0.57735026919e0;
    real _t0909 = 0.57735026919e0;
    real _t090A = 0.57735026919e0;
    real _t090B = -0.57735026919e0;
    vec4 _t090C = [_t0908, _t0909, _t090A, _t090B];
    real _t090D = 0.971445146547e-16;
    real _t090E = 0.e0;
    real _t090F = 0.e0;
    real _t0910 = 0.1e1;
    vec4 _t0911 = [_t090D, _t090E, _t090F, _t0910];
    tensor[4,4] _t0912 = [_t0902, _t0907, _t090C, _t0911];
    tensor[4,4][4] _t0913 = {_t08D3, _t08E8, _t08FD, _t0912};
    real _t0914 = 0.57735026919e0;
    real _t0915 = -0.1e1;
    real _t0916 = -0.1e1;
    real _t0917 = 0.1e1;
    vec4 _t0918 = [_t0914, _t0915, _t0916, _t0917];
    real _t0919 = 0.57735026919e0;
    real _t091A = 0.1e1;
    real _t091B = 0.e0;
    real _t091C = 0.e0;
    vec4 _t091D = [_t0919, _t091A, _t091B, _t091C];
    real _t091E = 0.57735026919e0;
    real _t091F = 0.e0;
    real _t0920 = 0.1e1;
    real _t0921 = 0.e0;
    vec4 _t0922 = [_t091E, _t091F, _t0920, _t0921];
    real _t0923 = 0.e0;
    real _t0924 = 0.e0;
    real _t0925 = 0.e0;
    real _t0926 = 0.1e1;
    vec4 _t0927 = [_t0923, _t0924, _t0925, _t0926];
    tensor[4,4] _t0928 = [_t0918, _t091D, _t0922, _t0927];
    real _t0929 = 0.1e1;
    real _t092A = 0.e0;
    real _t092B = 0.e0;
    real _t092C = 0.e0;
    vec4 _t092D = [_t0929, _t092A, _t092B, _t092C];
    real _t092E = 0.e0;
    real _t092F = 0.1e1;
    real _t0930 = 0.e0;
    real _t0931 = 0.e0;
    vec4 _t0932 = [_t092E, _t092F, _t0930, _t0931];
    real _t0933 = 0.e0;
    real _t0934 = 0.e0;
    real _t0935 = 0.1e1;
    real _t0936 = 0.e0;
    vec4 _t0937 = [_t0933, _t0934, _t0935, _t0936];
    real _t0938 = 0.e0;
    real _t0939 = 0.e0;
    real _t093A = 0.e0;
    real _t093B = 0.1e1;
    vec4 _t093C = [_t0938, _t0939, _t093A, _t093B];
    tensor[4,4] _t093D = [_t092D, _t0932, _t0937, _t093C];
    real _t093E = 0.e0;
    real _t093F = 0.1e1;
    real _t0940 = 0.e0;
    real _t0941 = 0.e0;
    vec4 _t0942 = [_t093E, _t093F, _t0940, _t0941];
    real _t0943 = -0.1e1;
    real _t0944 = 0.e0;
    real _t0945 = 0.e0;
    real _t0946 = 0.e0;
    vec4 _t0947 = [_t0943, _t0944, _t0945, _t0946];
    real _t0948 = 0.e0;
    real _t0949 = 0.e0;
    real _t094A = 0.1e1;
    real _t094B = 0.e0;
    vec4 _t094C = [_t0948, _t0949, _t094A, _t094B];
    real _t094D = 0.e0;
    real _t094E = 0.e0;
    real _t094F = 0.e0;
    real _t0950 = 0.1e1;
    vec4 _t0951 = [_t094D, _t094E, _t094F, _t0950];
    tensor[4,4] _t0952 = [_t0942, _t0947, _t094C, _t0951];
    real _t0953 = 0.e0;
    real _t0954 = 0.1e1;
    real _t0955 = 0.e0;
    real _t0956 = 0.e0;
    vec4 _t0957 = [_t0953, _t0954, _t0955, _t0956];
    real _t0958 = 0.e0;
    real _t0959 = 0.e0;
    real _t095A = 0.1e1;
    real _t095B = 0.e0;
    vec4 _t095C = [_t0958, _t0959, _t095A, _t095B];
    real _t095D = 0.1e1;
    real _t095E = 0.e0;
    real _t095F = 0.e0;
    real _t0960 = 0.e0;
    vec4 _t0961 = [_t095D, _t095E, _t095F, _t0960];
    real _t0962 = 0.e0;
    real _t0963 = 0.e0;
    real _t0964 = 0.e0;
    real _t0965 = 0.1e1;
    vec4 _t0966 = [_t0962, _t0963, _t0964, _t0965];
    tensor[4,4] _t0967 = [_t0957, _t095C, _t0961, _t0966];
    tensor[4,4][4] _t0968 = {_t0928, _t093D, _t0952, _t0967};
    real _t0969 = -0.1e1;
    real _t096A = -0.57735026919e0;
    real _t096B = -0.1e1;
    real _t096C = 0.1e1;
    vec4 _t096D = [_t0969, _t096A, _t096B, _t096C];
    real _t096E = 0.1e1;
    real _t096F = -0.57735026919e0;
    real _t0970 = 0.e0;
    real _t0971 = 0.e0;
    vec4 _t0972 = [_t096E, _t096F, _t0970, _t0971];
    real _t0973 = 0.e0;
    real _t0974 = -0.57735026919e0;
    real _t0975 = 0.1e1;
    real _t0976 = 0.e0;
    vec4 _t0977 = [_t0973, _t0974, _t0975, _t0976];
    real _t0978 = 0.e0;
    real _t0979 = 0.e0;
    real _t097A = 0.e0;
    real _t097B = 0.1e1;
    vec4 _t097C = [_t0978, _t0979, _t097A, _t097B];
    tensor[4,4] _t097D = [_t096D, _t0972, _t0977, _t097C];
    real _t097E = 0.e0;
    real _t097F = -0.1e1;
    real _t0980 = 0.e0;
    real _t0981 = 0.e0;
    vec4 _t0982 = [_t097E, _t097F, _t0980, _t0981];
    real _t0983 = 0.1e1;
    real _t0984 = 0.e0;
    real _t0985 = 0.e0;
    real _t0986 = 0.e0;
    vec4 _t0987 = [_t0983, _t0984, _t0985, _t0986];
    real _t0988 = 0.e0;
    real _t0989 = 0.e0;
    real _t098A = 0.1e1;
    real _t098B = 0.e0;
    vec4 _t098C = [_t0988, _t0989, _t098A, _t098B];
    real _t098D = 0.e0;
    real _t098E = 0.e0;
    real _t098F = 0.e0;
    real _t0990 = 0.1e1;
    vec4 _t0991 = [_t098D, _t098E, _t098F, _t0990];
    tensor[4,4] _t0992 = [_t0982, _t0987, _t098C, _t0991];
    real _t0993 = 0.1e1;
    real _t0994 = 0.e0;
    real _t0995 = 0.e0;
    real _t0996 = 0.e0;
    vec4 _t0997 = [_t0993, _t0994, _t0995, _t0996];
    real _t0998 = 0.e0;
    real _t0999 = 0.1e1;
    real _t099A = 0.e0;
    real _t099B = 0.e0;
    vec4 _t099C = [_t0998, _t0999, _t099A, _t099B];
    real _t099D = 0.e0;
    real _t099E = 0.e0;
    real _t099F = 0.1e1;
    real _t09A0 = 0.e0;
    vec4 _t09A1 = [_t099D, _t099E, _t099F, _t09A0];
    real _t09A2 = 0.e0;
    real _t09A3 = 0.e0;
    real _t09A4 = 0.e0;
    real _t09A5 = 0.1e1;
    vec4 _t09A6 = [_t09A2, _t09A3, _t09A4, _t09A5];
    tensor[4,4] _t09A7 = [_t0997, _t099C, _t09A1, _t09A6];
    real _t09A8 = 0.1e1;
    real _t09A9 = 0.e0;
    real _t09AA = 0.e0;
    real _t09AB = 0.e0;
    vec4 _t09AC = [_t09A8, _t09A9, _t09AA, _t09AB];
    real _t09AD = 0.e0;
    real _t09AE = 0.e0;
    real _t09AF = 0.1e1;
    real _t09B0 = 0.e0;
    vec4 _t09B1 = [_t09AD, _t09AE, _t09AF, _t09B0];
    real _t09B2 = 0.e0;
    real _t09B3 = -0.1e1;
    real _t09B4 = 0.e0;
    real _t09B5 = 0.e0;
    vec4 _t09B6 = [_t09B2, _t09B3, _t09B4, _t09B5];
    real _t09B7 = 0.e0;
    real _t09B8 = 0.e0;
    real _t09B9 = 0.e0;
    real _t09BA = 0.1e1;
    vec4 _t09BB = [_t09B7, _t09B8, _t09B9, _t09BA];
    tensor[4,4] _t09BC = [_t09AC, _t09B1, _t09B6, _t09BB];
    tensor[4,4][4] _t09BD = {_t097D, _t0992, _t09A7, _t09BC};
    real _t09BE = -0.1e1;
    real _t09BF = -0.1e1;
    real _t09C0 = 0.57735026919e0;
    real _t09C1 = 0.1e1;
    vec4 _t09C2 = [_t09BE, _t09BF, _t09C0, _t09C1];
    real _t09C3 = 0.1e1;
    real _t09C4 = 0.e0;
    real _t09C5 = 0.57735026919e0;
    real _t09C6 = 0.e0;
    vec4 _t09C7 = [_t09C3, _t09C4, _t09C5, _t09C6];
    real _t09C8 = 0.e0;
    real _t09C9 = 0.1e1;
    real _t09CA = 0.57735026919e0;
    real _t09CB = 0.e0;
    vec4 _t09CC = [_t09C8, _t09C9, _t09CA, _t09CB];
    real _t09CD = 0.e0;
    real _t09CE = 0.e0;
    real _t09CF = 0.e0;
    real _t09D0 = 0.1e1;
    vec4 _t09D1 = [_t09CD, _t09CE, _t09CF, _t09D0];
    tensor[4,4] _t09D2 = [_t09C2, _t09C7, _t09CC, _t09D1];
    real _t09D3 = 0.e0;
    real _t09D4 = 0.e0;
    real _t09D5 = 0.1e1;
    real _t09D6 = 0.e0;
    vec4 _t09D7 = [_t09D3, _t09D4, _t09D5, _t09D6];
    real _t09D8 = 0.1e1;
    real _t09D9 = 0.e0;
    real _t09DA = 0.e0;
    real _t09DB = 0.e0;
    vec4 _t09DC = [_t09D8, _t09D9, _t09DA, _t09DB];
    real _t09DD = 0.e0;
    real _t09DE = 0.1e1;
    real _t09DF = 0.e0;
    real _t09E0 = 0.e0;
    vec4 _t09E1 = [_t09DD, _t09DE, _t09DF, _t09E0];
    real _t09E2 = 0.e0;
    real _t09E3 = 0.e0;
    real _t09E4 = 0.e0;
    real _t09E5 = 0.1e1;
    vec4 _t09E6 = [_t09E2, _t09E3, _t09E4, _t09E5];
    tensor[4,4] _t09E7 = [_t09D7, _t09DC, _t09E1, _t09E6];
    real _t09E8 = 0.1e1;
    real _t09E9 = 0.e0;
    real _t09EA = 0.e0;
    real _t09EB = 0.e0;
    vec4 _t09EC = [_t09E8, _t09E9, _t09EA, _t09EB];
    real _t09ED = 0.e0;
    real _t09EE = 0.e0;
    real _t09EF = -0.1e1;
    real _t09F0 = 0.e0;
    vec4 _t09F1 = [_t09ED, _t09EE, _t09EF, _t09F0];
    real _t09F2 = 0.e0;
    real _t09F3 = 0.1e1;
    real _t09F4 = 0.e0;
    real _t09F5 = 0.e0;
    vec4 _t09F6 = [_t09F2, _t09F3, _t09F4, _t09F5];
    real _t09F7 = 0.e0;
    real _t09F8 = 0.e0;
    real _t09F9 = 0.e0;
    real _t09FA = 0.1e1;
    vec4 _t09FB = [_t09F7, _t09F8, _t09F9, _t09FA];
    tensor[4,4] _t09FC = [_t09EC, _t09F1, _t09F6, _t09FB];
    real _t09FD = 0.1e1;
    real _t09FE = 0.e0;
    real _t09FF = 0.e0;
    real _t0A00 = 0.e0;
    vec4 _t0A01 = [_t09FD, _t09FE, _t09FF, _t0A00];
    real _t0A02 = 0.e0;
    real _t0A03 = 0.1e1;
    real _t0A04 = 0.e0;
    real _t0A05 = 0.e0;
    vec4 _t0A06 = [_t0A02, _t0A03, _t0A04, _t0A05];
    real _t0A07 = 0.e0;
    real _t0A08 = 0.e0;
    real _t0A09 = 0.1e1;
    real _t0A0A = 0.e0;
    vec4 _t0A0B = [_t0A07, _t0A08, _t0A09, _t0A0A];
    real _t0A0C = 0.e0;
    real _t0A0D = 0.e0;
    real _t0A0E = 0.e0;
    real _t0A0F = 0.1e1;
    vec4 _t0A10 = [_t0A0C, _t0A0D, _t0A0E, _t0A0F];
    tensor[4,4] _t0A11 = [_t0A01, _t0A06, _t0A0B, _t0A10];
    tensor[4,4][4] _t0A12 = {_t09D2, _t09E7, _t09FC, _t0A11};
    tensor[4,4][4][4] _t0A13 = {_t0913, _t0968, _t09BD, _t0A12};
    real _t0A14 = time05D5[1];
    int _t0A15 = prim $r2i01B7 (_t0A14);
    tensor[4,4][4] _t0A16 = prim $sub01C0<tensor[4,4][4]; %4> (_t0A13, _t0A15);
    real _t0A17 = time05D5[1];
    int _t0A18 = prim $r2i01B7 (_t0A17);
    int[2] _t0A19 = func nextCell405D9 (_t0A18, cellId05D2, mesh05D1);
    int _t0A1A = 1;
    int _t0A1B = prim $sub01C0<int; %2> (_t0A19, _t0A1A);
    tensor[4,4] _t0A1C = prim $sub01C0<tensor[4,4]; %4> (_t0A16, _t0A1B);
    real _t0A1D = time05D5[0];
    vec3 _t0A1E = prim *0036<$[3]> (_t0A1D, dPos05D4);
    vec3 _t0A1F = prim +0017<$[3]> (_t0A1E, refPos05D3);
    real _t0A20 = _t0A1F[0];
    real _t0A21 = time05D5[0];
    vec3 _t0A22 = prim *0036<$[3]> (_t0A21, dPos05D4);
    vec3 _t0A23 = prim +0017<$[3]> (_t0A22, refPos05D3);
    real _t0A24 = _t0A23[1];
    real _t0A25 = time05D5[0];
    vec3 _t0A26 = prim *0036<$[3]> (_t0A25, dPos05D4);
    vec3 _t0A27 = prim +0017<$[3]> (_t0A26, refPos05D3);
    real _t0A28 = _t0A27[2];
    real _t0A29 = 0.1e1;
    vec4 _t0A2A = [_t0A20, _t0A24, _t0A28, _t0A29];
    vec4 _t0A2B = prim •00CE<$[4,4]; $[4]; $[4]> (_t0A1C, _t0A2A);
    real _t0A2C = _t0A2B[2];
    vec3 _t0A2D = [_t0750, _t08BE, _t0A2C];
    real _t0A2E = time05D5[1];
    int _t0A2F = prim $r2i01B7 (_t0A2E);
    int[2] _t0A30 = func nextCell405D9 (_t0A2F, cellId05D2, mesh05D1);
    int _t0A31 = 1;
    int _t0A32 = prim $sub01C0<int; %2> (_t0A30, _t0A31);
    Femdata: MeshPos _t0A33 = extractFemItemN((mesh05D1, _t05E2, _t0A2D, _t0A32),RefBuild(Mesh),);
    return _t0A33;
  } else {
    real _t0A34 = time05D5[0];
    vec3 _t0A35 = prim *0036<$[3]> (_t0A34, dPos05D4);
    vec3 _t0A36 = prim +0017<$[3]> (_t0A35, refPos05D3);
    Femdata: MeshPos _t0A37 = extractFemItemN((mesh05D1, _t0A36),InvalidBuildBoundary(MeshPos),);
    return _t0A37;
  }
}
function int[2]#6 nextCell405D9 (int faceIdx0A38, int cell0A39, Femdata: Mesh mesh0A3A)
{
  int _t0A3B = -1;
  bool _t0A3C = prim ==0082 (faceIdx0A38, _t0A3B);
  if _t0A3C {
    int _t0A3D = -1;
    int _t0A3E = -1;
    int[2] _t0A3F = {_t0A3D, _t0A3E};
    return _t0A3F;
  } else {
    int _t0A40 = 8;
    int _t0A41 = prim *0033 (cell0A39, _t0A40);
    int _t0A42 = 2;
    int _t0A43 = prim *0033 (faceIdx0A38, _t0A42);
    int _t0A44 = prim +0015 (_t0A41, _t0A43);
    int[2] _t0A45 = extractFemItemN((mesh0A3A, _t0A44),CellFaceCell(Mesh),);
    return _t0A45;
  }
}
function vec2#0 _enter0A46 (vec3 refPos0A47, vec3 dPos0A48)
{
  real time0A49 = +inf;
  int face0A4A = -1;
  real faceTime0A4B = -inf;
  real _t0A4C = 0.57735026919e0;
  real _t0A4D = 0.57735026919e0;
  real _t0A4E = 0.57735026919e0;
  real _t0A4F = 0.57735026919e0;
  vec3 _t0A50 = [_t0A4D, _t0A4E, _t0A4F];
  real _t0A51 = prim •00CE<$[3]; $[3]; $[]> (_t0A50, refPos0A47);
  real _t0A52 = prim -0026<$[]> (_t0A4C, _t0A51);
  real _t0A53 = 0.57735026919e0;
  real _t0A54 = 0.57735026919e0;
  real _t0A55 = 0.57735026919e0;
  vec3 _t0A56 = [_t0A53, _t0A54, _t0A55];
  real _t0A57 = prim •00CE<$[3]; $[3]; $[]> (_t0A56, dPos0A48);
  real _t0A58 = prim /0055 (_t0A52, _t0A57);
  real _t0A59 = -0.1e-7;
  bool _t0A5A = prim >=007E (_t0A58, _t0A59);
  real _t0A5B = 0.57735026919e0;
  real _t0A5C = 0.57735026919e0;
  real _t0A5D = 0.57735026919e0;
  real _t0A5E = 0.57735026919e0;
  vec3 _t0A5F = [_t0A5C, _t0A5D, _t0A5E];
  real _t0A60 = prim •00CE<$[3]; $[3]; $[]> (_t0A5F, refPos0A47);
  real _t0A61 = prim -0026<$[]> (_t0A5B, _t0A60);
  real _t0A62 = 0.57735026919e0;
  real _t0A63 = 0.57735026919e0;
  real _t0A64 = 0.57735026919e0;
  vec3 _t0A65 = [_t0A62, _t0A63, _t0A64];
  real _t0A66 = prim •00CE<$[3]; $[3]; $[]> (_t0A65, dPos0A48);
  real _t0A67 = prim /0055 (_t0A61, _t0A66);
  bool _t0A68 = prim >0080 (time0A49, _t0A67);
  real _t0A69 = 0.57735026919e0;
  real _t0A6A = 0.57735026919e0;
  real _t0A6B = 0.57735026919e0;
  vec3 _t0A6C = [_t0A69, _t0A6A, _t0A6B];
  real _t0A6D = prim •00CE<$[3]; $[3]; $[]> (_t0A6C, dPos0A48);
  real _t0A6E = prim |()|00B5<$[]> (_t0A6D);
  real _t0A6F = 0.1e-7;
  bool _t0A70 = prim >=007E (_t0A6E, _t0A6F);
  bool _t0A71 = prim $and01C4 (_t0A68, _t0A70);
  bool _t0A72 = prim $and01C4 (_t0A5A, _t0A71);
  if _t0A72 {
    real _t0A73 = 0.1e1;
    real _t0A74 = 0.1e-7;
    real _t0A75 = prim +0017<$[]> (_t0A73, _t0A74);
    real _t0A76 = 0.1e1;
    real _t0A77 = 0.1e1;
    real _t0A78 = 0.1e1;
    vec3 _t0A79 = [_t0A76, _t0A77, _t0A78];
    real _t0A7A = 0.57735026919e0;
    real _t0A7B = 0.57735026919e0;
    real _t0A7C = 0.57735026919e0;
    real _t0A7D = 0.57735026919e0;
    vec3 _t0A7E = [_t0A7B, _t0A7C, _t0A7D];
    real _t0A7F = prim •00CE<$[3]; $[3]; $[]> (_t0A7E, refPos0A47);
    real _t0A80 = prim -0026<$[]> (_t0A7A, _t0A7F);
    real _t0A81 = 0.57735026919e0;
    real _t0A82 = 0.57735026919e0;
    real _t0A83 = 0.57735026919e0;
    vec3 _t0A84 = [_t0A81, _t0A82, _t0A83];
    real _t0A85 = prim •00CE<$[3]; $[3]; $[]> (_t0A84, dPos0A48);
    real _t0A86 = prim /0055 (_t0A80, _t0A85);
    vec3 _t0A87 = prim *0038<$[3]> (dPos0A48, _t0A86);
    vec3 _t0A88 = prim +0017<$[3]> (refPos0A47, _t0A87);
    real _t0A89 = prim •00CE<$[3]; $[3]; $[]> (_t0A79, _t0A88);
    bool _t0A8A = prim >0080 (_t0A75, _t0A89);
    real _t0A8B = 0.1e-7;
    real _t0A8C = 0.1e-7;
    real _t0A8D = 0.1e-7;
    vec3 _t0A8E = [_t0A8B, _t0A8C, _t0A8D];
    real _t0A8F = 0.57735026919e0;
    real _t0A90 = 0.57735026919e0;
    real _t0A91 = 0.57735026919e0;
    real _t0A92 = 0.57735026919e0;
    vec3 _t0A93 = [_t0A90, _t0A91, _t0A92];
    real _t0A94 = prim •00CE<$[3]; $[3]; $[]> (_t0A93, refPos0A47);
    real _t0A95 = prim -0026<$[]> (_t0A8F, _t0A94);
    real _t0A96 = 0.57735026919e0;
    real _t0A97 = 0.57735026919e0;
    real _t0A98 = 0.57735026919e0;
    vec3 _t0A99 = [_t0A96, _t0A97, _t0A98];
    real _t0A9A = prim •00CE<$[3]; $[3]; $[]> (_t0A99, dPos0A48);
    real _t0A9B = prim /0055 (_t0A95, _t0A9A);
    vec3 _t0A9C = prim *0038<$[3]> (dPos0A48, _t0A9B);
    vec3 _t0A9D = prim +0017<$[3]> (refPos0A47, _t0A9C);
    vec3 _t0A9E = prim +0017<$[3]> (_t0A8E, _t0A9D);
    real _t0A9F = _t0A9E[0];
    real _t0AA0 = -0.e0;
    bool _t0AA1 = prim >0080 (_t0A9F, _t0AA0);
    real _t0AA2 = 0.1e-7;
    real _t0AA3 = 0.1e-7;
    real _t0AA4 = 0.1e-7;
    vec3 _t0AA5 = [_t0AA2, _t0AA3, _t0AA4];
    real _t0AA6 = 0.57735026919e0;
    real _t0AA7 = 0.57735026919e0;
    real _t0AA8 = 0.57735026919e0;
    real _t0AA9 = 0.57735026919e0;
    vec3 _t0AAA = [_t0AA7, _t0AA8, _t0AA9];
    real _t0AAB = prim •00CE<$[3]; $[3]; $[]> (_t0AAA, refPos0A47);
    real _t0AAC = prim -0026<$[]> (_t0AA6, _t0AAB);
    real _t0AAD = 0.57735026919e0;
    real _t0AAE = 0.57735026919e0;
    real _t0AAF = 0.57735026919e0;
    vec3 _t0AB0 = [_t0AAD, _t0AAE, _t0AAF];
    real _t0AB1 = prim •00CE<$[3]; $[3]; $[]> (_t0AB0, dPos0A48);
    real _t0AB2 = prim /0055 (_t0AAC, _t0AB1);
    vec3 _t0AB3 = prim *0038<$[3]> (dPos0A48, _t0AB2);
    vec3 _t0AB4 = prim +0017<$[3]> (refPos0A47, _t0AB3);
    vec3 _t0AB5 = prim +0017<$[3]> (_t0AA5, _t0AB4);
    real _t0AB6 = _t0AB5[1];
    real _t0AB7 = -0.e0;
    bool _t0AB8 = prim >0080 (_t0AB6, _t0AB7);
    real _t0AB9 = 0.1e-7;
    real _t0ABA = 0.1e-7;
    real _t0ABB = 0.1e-7;
    vec3 _t0ABC = [_t0AB9, _t0ABA, _t0ABB];
    real _t0ABD = 0.57735026919e0;
    real _t0ABE = 0.57735026919e0;
    real _t0ABF = 0.57735026919e0;
    real _t0AC0 = 0.57735026919e0;
    vec3 _t0AC1 = [_t0ABE, _t0ABF, _t0AC0];
    real _t0AC2 = prim •00CE<$[3]; $[3]; $[]> (_t0AC1, refPos0A47);
    real _t0AC3 = prim -0026<$[]> (_t0ABD, _t0AC2);
    real _t0AC4 = 0.57735026919e0;
    real _t0AC5 = 0.57735026919e0;
    real _t0AC6 = 0.57735026919e0;
    vec3 _t0AC7 = [_t0AC4, _t0AC5, _t0AC6];
    real _t0AC8 = prim •00CE<$[3]; $[3]; $[]> (_t0AC7, dPos0A48);
    real _t0AC9 = prim /0055 (_t0AC3, _t0AC8);
    vec3 _t0ACA = prim *0038<$[3]> (dPos0A48, _t0AC9);
    vec3 _t0ACB = prim +0017<$[3]> (refPos0A47, _t0ACA);
    vec3 _t0ACC = prim +0017<$[3]> (_t0ABC, _t0ACB);
    real _t0ACD = _t0ACC[2];
    real _t0ACE = -0.e0;
    bool _t0ACF = prim >0080 (_t0ACD, _t0ACE);
    bool _t0AD0 = prim $and01C4 (_t0AB8, _t0ACF);
    bool _t0AD1 = prim $and01C4 (_t0AA1, _t0AD0);
    bool _t0AD2 = prim $and01C4 (_t0A8A, _t0AD1);
    if _t0AD2 {
      real _t0AD3 = 0.57735026919e0;
      real _t0AD4 = 0.57735026919e0;
      real _t0AD5 = 0.57735026919e0;
      real _t0AD6 = 0.57735026919e0;
      vec3 _t0AD7 = [_t0AD4, _t0AD5, _t0AD6];
      real _t0AD8 = prim •00CE<$[3]; $[3]; $[]> (_t0AD7, refPos0A47);
      real _t0AD9 = prim -0026<$[]> (_t0AD3, _t0AD8);
      real _t0ADA = 0.57735026919e0;
      real _t0ADB = 0.57735026919e0;
      real _t0ADC = 0.57735026919e0;
      vec3 _t0ADD = [_t0ADA, _t0ADB, _t0ADC];
      real _t0ADE = prim •00CE<$[3]; $[3]; $[]> (_t0ADD, dPos0A48);
      time0A49 = prim /0055 (_t0AD9, _t0ADE);
      face0A4A = 0;
    }
  }
  real _t0ADF = 0.e0;
  real _t0AE0 = -0.1e1;
  real _t0AE1 = 0.e0;
  real _t0AE2 = 0.e0;
  vec3 _t0AE3 = [_t0AE0, _t0AE1, _t0AE2];
  real _t0AE4 = prim •00CE<$[3]; $[3]; $[]> (_t0AE3, refPos0A47);
  real _t0AE5 = prim -0026<$[]> (_t0ADF, _t0AE4);
  real _t0AE6 = -0.1e1;
  real _t0AE7 = 0.e0;
  real _t0AE8 = 0.e0;
  vec3 _t0AE9 = [_t0AE6, _t0AE7, _t0AE8];
  real _t0AEA = prim •00CE<$[3]; $[3]; $[]> (_t0AE9, dPos0A48);
  real _t0AEB = prim /0055 (_t0AE5, _t0AEA);
  real _t0AEC = -0.1e-7;
  bool _t0AED = prim >=007E (_t0AEB, _t0AEC);
  real _t0AEE = 0.e0;
  real _t0AEF = -0.1e1;
  real _t0AF0 = 0.e0;
  real _t0AF1 = 0.e0;
  vec3 _t0AF2 = [_t0AEF, _t0AF0, _t0AF1];
  real _t0AF3 = prim •00CE<$[3]; $[3]; $[]> (_t0AF2, refPos0A47);
  real _t0AF4 = prim -0026<$[]> (_t0AEE, _t0AF3);
  real _t0AF5 = -0.1e1;
  real _t0AF6 = 0.e0;
  real _t0AF7 = 0.e0;
  vec3 _t0AF8 = [_t0AF5, _t0AF6, _t0AF7];
  real _t0AF9 = prim •00CE<$[3]; $[3]; $[]> (_t0AF8, dPos0A48);
  real _t0AFA = prim /0055 (_t0AF4, _t0AF9);
  bool _t0AFB = prim >0080 (time0A49, _t0AFA);
  real _t0AFC = -0.1e1;
  real _t0AFD = 0.e0;
  real _t0AFE = 0.e0;
  vec3 _t0AFF = [_t0AFC, _t0AFD, _t0AFE];
  real _t0B00 = prim •00CE<$[3]; $[3]; $[]> (_t0AFF, dPos0A48);
  real _t0B01 = prim |()|00B5<$[]> (_t0B00);
  real _t0B02 = 0.1e-7;
  bool _t0B03 = prim >=007E (_t0B01, _t0B02);
  bool _t0B04 = prim $and01C4 (_t0AFB, _t0B03);
  bool _t0B05 = prim $and01C4 (_t0AED, _t0B04);
  if _t0B05 {
    real _t0B06 = 0.1e1;
    real _t0B07 = 0.1e-7;
    real _t0B08 = prim +0017<$[]> (_t0B06, _t0B07);
    real _t0B09 = 0.1e1;
    real _t0B0A = 0.1e1;
    real _t0B0B = 0.1e1;
    vec3 _t0B0C = [_t0B09, _t0B0A, _t0B0B];
    real _t0B0D = 0.e0;
    real _t0B0E = -0.1e1;
    real _t0B0F = 0.e0;
    real _t0B10 = 0.e0;
    vec3 _t0B11 = [_t0B0E, _t0B0F, _t0B10];
    real _t0B12 = prim •00CE<$[3]; $[3]; $[]> (_t0B11, refPos0A47);
    real _t0B13 = prim -0026<$[]> (_t0B0D, _t0B12);
    real _t0B14 = -0.1e1;
    real _t0B15 = 0.e0;
    real _t0B16 = 0.e0;
    vec3 _t0B17 = [_t0B14, _t0B15, _t0B16];
    real _t0B18 = prim •00CE<$[3]; $[3]; $[]> (_t0B17, dPos0A48);
    real _t0B19 = prim /0055 (_t0B13, _t0B18);
    vec3 _t0B1A = prim *0038<$[3]> (dPos0A48, _t0B19);
    vec3 _t0B1B = prim +0017<$[3]> (refPos0A47, _t0B1A);
    real _t0B1C = prim •00CE<$[3]; $[3]; $[]> (_t0B0C, _t0B1B);
    bool _t0B1D = prim >0080 (_t0B08, _t0B1C);
    real _t0B1E = 0.1e-7;
    real _t0B1F = 0.1e-7;
    real _t0B20 = 0.1e-7;
    vec3 _t0B21 = [_t0B1E, _t0B1F, _t0B20];
    real _t0B22 = 0.e0;
    real _t0B23 = -0.1e1;
    real _t0B24 = 0.e0;
    real _t0B25 = 0.e0;
    vec3 _t0B26 = [_t0B23, _t0B24, _t0B25];
    real _t0B27 = prim •00CE<$[3]; $[3]; $[]> (_t0B26, refPos0A47);
    real _t0B28 = prim -0026<$[]> (_t0B22, _t0B27);
    real _t0B29 = -0.1e1;
    real _t0B2A = 0.e0;
    real _t0B2B = 0.e0;
    vec3 _t0B2C = [_t0B29, _t0B2A, _t0B2B];
    real _t0B2D = prim •00CE<$[3]; $[3]; $[]> (_t0B2C, dPos0A48);
    real _t0B2E = prim /0055 (_t0B28, _t0B2D);
    vec3 _t0B2F = prim *0038<$[3]> (dPos0A48, _t0B2E);
    vec3 _t0B30 = prim +0017<$[3]> (refPos0A47, _t0B2F);
    vec3 _t0B31 = prim +0017<$[3]> (_t0B21, _t0B30);
    real _t0B32 = _t0B31[0];
    real _t0B33 = -0.e0;
    bool _t0B34 = prim >0080 (_t0B32, _t0B33);
    real _t0B35 = 0.1e-7;
    real _t0B36 = 0.1e-7;
    real _t0B37 = 0.1e-7;
    vec3 _t0B38 = [_t0B35, _t0B36, _t0B37];
    real _t0B39 = 0.e0;
    real _t0B3A = -0.1e1;
    real _t0B3B = 0.e0;
    real _t0B3C = 0.e0;
    vec3 _t0B3D = [_t0B3A, _t0B3B, _t0B3C];
    real _t0B3E = prim •00CE<$[3]; $[3]; $[]> (_t0B3D, refPos0A47);
    real _t0B3F = prim -0026<$[]> (_t0B39, _t0B3E);
    real _t0B40 = -0.1e1;
    real _t0B41 = 0.e0;
    real _t0B42 = 0.e0;
    vec3 _t0B43 = [_t0B40, _t0B41, _t0B42];
    real _t0B44 = prim •00CE<$[3]; $[3]; $[]> (_t0B43, dPos0A48);
    real _t0B45 = prim /0055 (_t0B3F, _t0B44);
    vec3 _t0B46 = prim *0038<$[3]> (dPos0A48, _t0B45);
    vec3 _t0B47 = prim +0017<$[3]> (refPos0A47, _t0B46);
    vec3 _t0B48 = prim +0017<$[3]> (_t0B38, _t0B47);
    real _t0B49 = _t0B48[1];
    real _t0B4A = -0.e0;
    bool _t0B4B = prim >0080 (_t0B49, _t0B4A);
    real _t0B4C = 0.1e-7;
    real _t0B4D = 0.1e-7;
    real _t0B4E = 0.1e-7;
    vec3 _t0B4F = [_t0B4C, _t0B4D, _t0B4E];
    real _t0B50 = 0.e0;
    real _t0B51 = -0.1e1;
    real _t0B52 = 0.e0;
    real _t0B53 = 0.e0;
    vec3 _t0B54 = [_t0B51, _t0B52, _t0B53];
    real _t0B55 = prim •00CE<$[3]; $[3]; $[]> (_t0B54, refPos0A47);
    real _t0B56 = prim -0026<$[]> (_t0B50, _t0B55);
    real _t0B57 = -0.1e1;
    real _t0B58 = 0.e0;
    real _t0B59 = 0.e0;
    vec3 _t0B5A = [_t0B57, _t0B58, _t0B59];
    real _t0B5B = prim •00CE<$[3]; $[3]; $[]> (_t0B5A, dPos0A48);
    real _t0B5C = prim /0055 (_t0B56, _t0B5B);
    vec3 _t0B5D = prim *0038<$[3]> (dPos0A48, _t0B5C);
    vec3 _t0B5E = prim +0017<$[3]> (refPos0A47, _t0B5D);
    vec3 _t0B5F = prim +0017<$[3]> (_t0B4F, _t0B5E);
    real _t0B60 = _t0B5F[2];
    real _t0B61 = -0.e0;
    bool _t0B62 = prim >0080 (_t0B60, _t0B61);
    bool _t0B63 = prim $and01C4 (_t0B4B, _t0B62);
    bool _t0B64 = prim $and01C4 (_t0B34, _t0B63);
    bool _t0B65 = prim $and01C4 (_t0B1D, _t0B64);
    if _t0B65 {
      real _t0B66 = 0.e0;
      real _t0B67 = -0.1e1;
      real _t0B68 = 0.e0;
      real _t0B69 = 0.e0;
      vec3 _t0B6A = [_t0B67, _t0B68, _t0B69];
      real _t0B6B = prim •00CE<$[3]; $[3]; $[]> (_t0B6A, refPos0A47);
      real _t0B6C = prim -0026<$[]> (_t0B66, _t0B6B);
      real _t0B6D = -0.1e1;
      real _t0B6E = 0.e0;
      real _t0B6F = 0.e0;
      vec3 _t0B70 = [_t0B6D, _t0B6E, _t0B6F];
      real _t0B71 = prim •00CE<$[3]; $[3]; $[]> (_t0B70, dPos0A48);
      time0A49 = prim /0055 (_t0B6C, _t0B71);
      face0A4A = 1;
    }
  }
  real _t0B72 = 0.e0;
  real _t0B73 = 0.e0;
  real _t0B74 = -0.1e1;
  real _t0B75 = 0.e0;
  vec3 _t0B76 = [_t0B73, _t0B74, _t0B75];
  real _t0B77 = prim •00CE<$[3]; $[3]; $[]> (_t0B76, refPos0A47);
  real _t0B78 = prim -0026<$[]> (_t0B72, _t0B77);
  real _t0B79 = 0.e0;
  real _t0B7A = -0.1e1;
  real _t0B7B = 0.e0;
  vec3 _t0B7C = [_t0B79, _t0B7A, _t0B7B];
  real _t0B7D = prim •00CE<$[3]; $[3]; $[]> (_t0B7C, dPos0A48);
  real _t0B7E = prim /0055 (_t0B78, _t0B7D);
  real _t0B7F = -0.1e-7;
  bool _t0B80 = prim >=007E (_t0B7E, _t0B7F);
  real _t0B81 = 0.e0;
  real _t0B82 = 0.e0;
  real _t0B83 = -0.1e1;
  real _t0B84 = 0.e0;
  vec3 _t0B85 = [_t0B82, _t0B83, _t0B84];
  real _t0B86 = prim •00CE<$[3]; $[3]; $[]> (_t0B85, refPos0A47);
  real _t0B87 = prim -0026<$[]> (_t0B81, _t0B86);
  real _t0B88 = 0.e0;
  real _t0B89 = -0.1e1;
  real _t0B8A = 0.e0;
  vec3 _t0B8B = [_t0B88, _t0B89, _t0B8A];
  real _t0B8C = prim •00CE<$[3]; $[3]; $[]> (_t0B8B, dPos0A48);
  real _t0B8D = prim /0055 (_t0B87, _t0B8C);
  bool _t0B8E = prim >0080 (time0A49, _t0B8D);
  real _t0B8F = 0.e0;
  real _t0B90 = -0.1e1;
  real _t0B91 = 0.e0;
  vec3 _t0B92 = [_t0B8F, _t0B90, _t0B91];
  real _t0B93 = prim •00CE<$[3]; $[3]; $[]> (_t0B92, dPos0A48);
  real _t0B94 = prim |()|00B5<$[]> (_t0B93);
  real _t0B95 = 0.1e-7;
  bool _t0B96 = prim >=007E (_t0B94, _t0B95);
  bool _t0B97 = prim $and01C4 (_t0B8E, _t0B96);
  bool _t0B98 = prim $and01C4 (_t0B80, _t0B97);
  if _t0B98 {
    real _t0B99 = 0.1e1;
    real _t0B9A = 0.1e-7;
    real _t0B9B = prim +0017<$[]> (_t0B99, _t0B9A);
    real _t0B9C = 0.1e1;
    real _t0B9D = 0.1e1;
    real _t0B9E = 0.1e1;
    vec3 _t0B9F = [_t0B9C, _t0B9D, _t0B9E];
    real _t0BA0 = 0.e0;
    real _t0BA1 = 0.e0;
    real _t0BA2 = -0.1e1;
    real _t0BA3 = 0.e0;
    vec3 _t0BA4 = [_t0BA1, _t0BA2, _t0BA3];
    real _t0BA5 = prim •00CE<$[3]; $[3]; $[]> (_t0BA4, refPos0A47);
    real _t0BA6 = prim -0026<$[]> (_t0BA0, _t0BA5);
    real _t0BA7 = 0.e0;
    real _t0BA8 = -0.1e1;
    real _t0BA9 = 0.e0;
    vec3 _t0BAA = [_t0BA7, _t0BA8, _t0BA9];
    real _t0BAB = prim •00CE<$[3]; $[3]; $[]> (_t0BAA, dPos0A48);
    real _t0BAC = prim /0055 (_t0BA6, _t0BAB);
    vec3 _t0BAD = prim *0038<$[3]> (dPos0A48, _t0BAC);
    vec3 _t0BAE = prim +0017<$[3]> (refPos0A47, _t0BAD);
    real _t0BAF = prim •00CE<$[3]; $[3]; $[]> (_t0B9F, _t0BAE);
    bool _t0BB0 = prim >0080 (_t0B9B, _t0BAF);
    real _t0BB1 = 0.1e-7;
    real _t0BB2 = 0.1e-7;
    real _t0BB3 = 0.1e-7;
    vec3 _t0BB4 = [_t0BB1, _t0BB2, _t0BB3];
    real _t0BB5 = 0.e0;
    real _t0BB6 = 0.e0;
    real _t0BB7 = -0.1e1;
    real _t0BB8 = 0.e0;
    vec3 _t0BB9 = [_t0BB6, _t0BB7, _t0BB8];
    real _t0BBA = prim •00CE<$[3]; $[3]; $[]> (_t0BB9, refPos0A47);
    real _t0BBB = prim -0026<$[]> (_t0BB5, _t0BBA);
    real _t0BBC = 0.e0;
    real _t0BBD = -0.1e1;
    real _t0BBE = 0.e0;
    vec3 _t0BBF = [_t0BBC, _t0BBD, _t0BBE];
    real _t0BC0 = prim •00CE<$[3]; $[3]; $[]> (_t0BBF, dPos0A48);
    real _t0BC1 = prim /0055 (_t0BBB, _t0BC0);
    vec3 _t0BC2 = prim *0038<$[3]> (dPos0A48, _t0BC1);
    vec3 _t0BC3 = prim +0017<$[3]> (refPos0A47, _t0BC2);
    vec3 _t0BC4 = prim +0017<$[3]> (_t0BB4, _t0BC3);
    real _t0BC5 = _t0BC4[0];
    real _t0BC6 = -0.e0;
    bool _t0BC7 = prim >0080 (_t0BC5, _t0BC6);
    real _t0BC8 = 0.1e-7;
    real _t0BC9 = 0.1e-7;
    real _t0BCA = 0.1e-7;
    vec3 _t0BCB = [_t0BC8, _t0BC9, _t0BCA];
    real _t0BCC = 0.e0;
    real _t0BCD = 0.e0;
    real _t0BCE = -0.1e1;
    real _t0BCF = 0.e0;
    vec3 _t0BD0 = [_t0BCD, _t0BCE, _t0BCF];
    real _t0BD1 = prim •00CE<$[3]; $[3]; $[]> (_t0BD0, refPos0A47);
    real _t0BD2 = prim -0026<$[]> (_t0BCC, _t0BD1);
    real _t0BD3 = 0.e0;
    real _t0BD4 = -0.1e1;
    real _t0BD5 = 0.e0;
    vec3 _t0BD6 = [_t0BD3, _t0BD4, _t0BD5];
    real _t0BD7 = prim •00CE<$[3]; $[3]; $[]> (_t0BD6, dPos0A48);
    real _t0BD8 = prim /0055 (_t0BD2, _t0BD7);
    vec3 _t0BD9 = prim *0038<$[3]> (dPos0A48, _t0BD8);
    vec3 _t0BDA = prim +0017<$[3]> (refPos0A47, _t0BD9);
    vec3 _t0BDB = prim +0017<$[3]> (_t0BCB, _t0BDA);
    real _t0BDC = _t0BDB[1];
    real _t0BDD = -0.e0;
    bool _t0BDE = prim >0080 (_t0BDC, _t0BDD);
    real _t0BDF = 0.1e-7;
    real _t0BE0 = 0.1e-7;
    real _t0BE1 = 0.1e-7;
    vec3 _t0BE2 = [_t0BDF, _t0BE0, _t0BE1];
    real _t0BE3 = 0.e0;
    real _t0BE4 = 0.e0;
    real _t0BE5 = -0.1e1;
    real _t0BE6 = 0.e0;
    vec3 _t0BE7 = [_t0BE4, _t0BE5, _t0BE6];
    real _t0BE8 = prim •00CE<$[3]; $[3]; $[]> (_t0BE7, refPos0A47);
    real _t0BE9 = prim -0026<$[]> (_t0BE3, _t0BE8);
    real _t0BEA = 0.e0;
    real _t0BEB = -0.1e1;
    real _t0BEC = 0.e0;
    vec3 _t0BED = [_t0BEA, _t0BEB, _t0BEC];
    real _t0BEE = prim •00CE<$[3]; $[3]; $[]> (_t0BED, dPos0A48);
    real _t0BEF = prim /0055 (_t0BE9, _t0BEE);
    vec3 _t0BF0 = prim *0038<$[3]> (dPos0A48, _t0BEF);
    vec3 _t0BF1 = prim +0017<$[3]> (refPos0A47, _t0BF0);
    vec3 _t0BF2 = prim +0017<$[3]> (_t0BE2, _t0BF1);
    real _t0BF3 = _t0BF2[2];
    real _t0BF4 = -0.e0;
    bool _t0BF5 = prim >0080 (_t0BF3, _t0BF4);
    bool _t0BF6 = prim $and01C4 (_t0BDE, _t0BF5);
    bool _t0BF7 = prim $and01C4 (_t0BC7, _t0BF6);
    bool _t0BF8 = prim $and01C4 (_t0BB0, _t0BF7);
    if _t0BF8 {
      real _t0BF9 = 0.e0;
      real _t0BFA = 0.e0;
      real _t0BFB = -0.1e1;
      real _t0BFC = 0.e0;
      vec3 _t0BFD = [_t0BFA, _t0BFB, _t0BFC];
      real _t0BFE = prim •00CE<$[3]; $[3]; $[]> (_t0BFD, refPos0A47);
      real _t0BFF = prim -0026<$[]> (_t0BF9, _t0BFE);
      real _t0C00 = 0.e0;
      real _t0C01 = -0.1e1;
      real _t0C02 = 0.e0;
      vec3 _t0C03 = [_t0C00, _t0C01, _t0C02];
      real _t0C04 = prim •00CE<$[3]; $[3]; $[]> (_t0C03, dPos0A48);
      time0A49 = prim /0055 (_t0BFF, _t0C04);
      face0A4A = 2;
    }
  }
  real _t0C05 = 0.e0;
  real _t0C06 = 0.e0;
  real _t0C07 = 0.e0;
  real _t0C08 = -0.1e1;
  vec3 _t0C09 = [_t0C06, _t0C07, _t0C08];
  real _t0C0A = prim •00CE<$[3]; $[3]; $[]> (_t0C09, refPos0A47);
  real _t0C0B = prim -0026<$[]> (_t0C05, _t0C0A);
  real _t0C0C = 0.e0;
  real _t0C0D = 0.e0;
  real _t0C0E = -0.1e1;
  vec3 _t0C0F = [_t0C0C, _t0C0D, _t0C0E];
  real _t0C10 = prim •00CE<$[3]; $[3]; $[]> (_t0C0F, dPos0A48);
  real _t0C11 = prim /0055 (_t0C0B, _t0C10);
  real _t0C12 = -0.1e-7;
  bool _t0C13 = prim >=007E (_t0C11, _t0C12);
  real _t0C14 = 0.e0;
  real _t0C15 = 0.e0;
  real _t0C16 = 0.e0;
  real _t0C17 = -0.1e1;
  vec3 _t0C18 = [_t0C15, _t0C16, _t0C17];
  real _t0C19 = prim •00CE<$[3]; $[3]; $[]> (_t0C18, refPos0A47);
  real _t0C1A = prim -0026<$[]> (_t0C14, _t0C19);
  real _t0C1B = 0.e0;
  real _t0C1C = 0.e0;
  real _t0C1D = -0.1e1;
  vec3 _t0C1E = [_t0C1B, _t0C1C, _t0C1D];
  real _t0C1F = prim •00CE<$[3]; $[3]; $[]> (_t0C1E, dPos0A48);
  real _t0C20 = prim /0055 (_t0C1A, _t0C1F);
  bool _t0C21 = prim >0080 (time0A49, _t0C20);
  real _t0C22 = 0.e0;
  real _t0C23 = 0.e0;
  real _t0C24 = -0.1e1;
  vec3 _t0C25 = [_t0C22, _t0C23, _t0C24];
  real _t0C26 = prim •00CE<$[3]; $[3]; $[]> (_t0C25, dPos0A48);
  real _t0C27 = prim |()|00B5<$[]> (_t0C26);
  real _t0C28 = 0.1e-7;
  bool _t0C29 = prim >=007E (_t0C27, _t0C28);
  bool _t0C2A = prim $and01C4 (_t0C21, _t0C29);
  bool _t0C2B = prim $and01C4 (_t0C13, _t0C2A);
  if _t0C2B {
    real _t0C2C = 0.1e1;
    real _t0C2D = 0.1e-7;
    real _t0C2E = prim +0017<$[]> (_t0C2C, _t0C2D);
    real _t0C2F = 0.1e1;
    real _t0C30 = 0.1e1;
    real _t0C31 = 0.1e1;
    vec3 _t0C32 = [_t0C2F, _t0C30, _t0C31];
    real _t0C33 = 0.e0;
    real _t0C34 = 0.e0;
    real _t0C35 = 0.e0;
    real _t0C36 = -0.1e1;
    vec3 _t0C37 = [_t0C34, _t0C35, _t0C36];
    real _t0C38 = prim •00CE<$[3]; $[3]; $[]> (_t0C37, refPos0A47);
    real _t0C39 = prim -0026<$[]> (_t0C33, _t0C38);
    real _t0C3A = 0.e0;
    real _t0C3B = 0.e0;
    real _t0C3C = -0.1e1;
    vec3 _t0C3D = [_t0C3A, _t0C3B, _t0C3C];
    real _t0C3E = prim •00CE<$[3]; $[3]; $[]> (_t0C3D, dPos0A48);
    real _t0C3F = prim /0055 (_t0C39, _t0C3E);
    vec3 _t0C40 = prim *0038<$[3]> (dPos0A48, _t0C3F);
    vec3 _t0C41 = prim +0017<$[3]> (refPos0A47, _t0C40);
    real _t0C42 = prim •00CE<$[3]; $[3]; $[]> (_t0C32, _t0C41);
    bool _t0C43 = prim >0080 (_t0C2E, _t0C42);
    real _t0C44 = 0.1e-7;
    real _t0C45 = 0.1e-7;
    real _t0C46 = 0.1e-7;
    vec3 _t0C47 = [_t0C44, _t0C45, _t0C46];
    real _t0C48 = 0.e0;
    real _t0C49 = 0.e0;
    real _t0C4A = 0.e0;
    real _t0C4B = -0.1e1;
    vec3 _t0C4C = [_t0C49, _t0C4A, _t0C4B];
    real _t0C4D = prim •00CE<$[3]; $[3]; $[]> (_t0C4C, refPos0A47);
    real _t0C4E = prim -0026<$[]> (_t0C48, _t0C4D);
    real _t0C4F = 0.e0;
    real _t0C50 = 0.e0;
    real _t0C51 = -0.1e1;
    vec3 _t0C52 = [_t0C4F, _t0C50, _t0C51];
    real _t0C53 = prim •00CE<$[3]; $[3]; $[]> (_t0C52, dPos0A48);
    real _t0C54 = prim /0055 (_t0C4E, _t0C53);
    vec3 _t0C55 = prim *0038<$[3]> (dPos0A48, _t0C54);
    vec3 _t0C56 = prim +0017<$[3]> (refPos0A47, _t0C55);
    vec3 _t0C57 = prim +0017<$[3]> (_t0C47, _t0C56);
    real _t0C58 = _t0C57[0];
    real _t0C59 = -0.e0;
    bool _t0C5A = prim >0080 (_t0C58, _t0C59);
    real _t0C5B = 0.1e-7;
    real _t0C5C = 0.1e-7;
    real _t0C5D = 0.1e-7;
    vec3 _t0C5E = [_t0C5B, _t0C5C, _t0C5D];
    real _t0C5F = 0.e0;
    real _t0C60 = 0.e0;
    real _t0C61 = 0.e0;
    real _t0C62 = -0.1e1;
    vec3 _t0C63 = [_t0C60, _t0C61, _t0C62];
    real _t0C64 = prim •00CE<$[3]; $[3]; $[]> (_t0C63, refPos0A47);
    real _t0C65 = prim -0026<$[]> (_t0C5F, _t0C64);
    real _t0C66 = 0.e0;
    real _t0C67 = 0.e0;
    real _t0C68 = -0.1e1;
    vec3 _t0C69 = [_t0C66, _t0C67, _t0C68];
    real _t0C6A = prim •00CE<$[3]; $[3]; $[]> (_t0C69, dPos0A48);
    real _t0C6B = prim /0055 (_t0C65, _t0C6A);
    vec3 _t0C6C = prim *0038<$[3]> (dPos0A48, _t0C6B);
    vec3 _t0C6D = prim +0017<$[3]> (refPos0A47, _t0C6C);
    vec3 _t0C6E = prim +0017<$[3]> (_t0C5E, _t0C6D);
    real _t0C6F = _t0C6E[1];
    real _t0C70 = -0.e0;
    bool _t0C71 = prim >0080 (_t0C6F, _t0C70);
    real _t0C72 = 0.1e-7;
    real _t0C73 = 0.1e-7;
    real _t0C74 = 0.1e-7;
    vec3 _t0C75 = [_t0C72, _t0C73, _t0C74];
    real _t0C76 = 0.e0;
    real _t0C77 = 0.e0;
    real _t0C78 = 0.e0;
    real _t0C79 = -0.1e1;
    vec3 _t0C7A = [_t0C77, _t0C78, _t0C79];
    real _t0C7B = prim •00CE<$[3]; $[3]; $[]> (_t0C7A, refPos0A47);
    real _t0C7C = prim -0026<$[]> (_t0C76, _t0C7B);
    real _t0C7D = 0.e0;
    real _t0C7E = 0.e0;
    real _t0C7F = -0.1e1;
    vec3 _t0C80 = [_t0C7D, _t0C7E, _t0C7F];
    real _t0C81 = prim •00CE<$[3]; $[3]; $[]> (_t0C80, dPos0A48);
    real _t0C82 = prim /0055 (_t0C7C, _t0C81);
    vec3 _t0C83 = prim *0038<$[3]> (dPos0A48, _t0C82);
    vec3 _t0C84 = prim +0017<$[3]> (refPos0A47, _t0C83);
    vec3 _t0C85 = prim +0017<$[3]> (_t0C75, _t0C84);
    real _t0C86 = _t0C85[2];
    real _t0C87 = -0.e0;
    bool _t0C88 = prim >0080 (_t0C86, _t0C87);
    bool _t0C89 = prim $and01C4 (_t0C71, _t0C88);
    bool _t0C8A = prim $and01C4 (_t0C5A, _t0C89);
    bool _t0C8B = prim $and01C4 (_t0C43, _t0C8A);
    if _t0C8B {
      real _t0C8C = 0.e0;
      real _t0C8D = 0.e0;
      real _t0C8E = 0.e0;
      real _t0C8F = -0.1e1;
      vec3 _t0C90 = [_t0C8D, _t0C8E, _t0C8F];
      real _t0C91 = prim •00CE<$[3]; $[3]; $[]> (_t0C90, refPos0A47);
      real _t0C92 = prim -0026<$[]> (_t0C8C, _t0C91);
      real _t0C93 = 0.e0;
      real _t0C94 = 0.e0;
      real _t0C95 = -0.1e1;
      vec3 _t0C96 = [_t0C93, _t0C94, _t0C95];
      real _t0C97 = prim •00CE<$[3]; $[3]; $[]> (_t0C96, dPos0A48);
      time0A49 = prim /0055 (_t0C92, _t0C97);
      face0A4A = 3;
    }
  }
  int _t0C98 = -1;
  bool _t0C99 = prim !=0086 (face0A4A, _t0C98);
  real _t0C9A = 0.1e1;
  real _t0C9B = 0.1e-7;
  real _t0C9C = prim +0017<$[]> (_t0C9A, _t0C9B);
  real _t0C9D = 0.1e1;
  real _t0C9E = 0.1e1;
  real _t0C9F = 0.1e1;
  vec3 _t0CA0 = [_t0C9D, _t0C9E, _t0C9F];
  real _t0CA1 = 0.e0;
  real _t0CA2 = prim max0125 (time0A49, _t0CA1);
  vec3 _t0CA3 = prim *0038<$[3]> (dPos0A48, _t0CA2);
  vec3 _t0CA4 = prim +0017<$[3]> (refPos0A47, _t0CA3);
  real _t0CA5 = prim •00CE<$[3]; $[3]; $[]> (_t0CA0, _t0CA4);
  bool _t0CA6 = prim >0080 (_t0C9C, _t0CA5);
  real _t0CA7 = 0.1e-7;
  real _t0CA8 = 0.1e-7;
  real _t0CA9 = 0.1e-7;
  vec3 _t0CAA = [_t0CA7, _t0CA8, _t0CA9];
  real _t0CAB = 0.e0;
  real _t0CAC = prim max0125 (time0A49, _t0CAB);
  vec3 _t0CAD = prim *0038<$[3]> (dPos0A48, _t0CAC);
  vec3 _t0CAE = prim +0017<$[3]> (refPos0A47, _t0CAD);
  vec3 _t0CAF = prim +0017<$[3]> (_t0CAA, _t0CAE);
  real _t0CB0 = _t0CAF[0];
  real _t0CB1 = -0.e0;
  bool _t0CB2 = prim >0080 (_t0CB0, _t0CB1);
  real _t0CB3 = 0.1e-7;
  real _t0CB4 = 0.1e-7;
  real _t0CB5 = 0.1e-7;
  vec3 _t0CB6 = [_t0CB3, _t0CB4, _t0CB5];
  real _t0CB7 = 0.e0;
  real _t0CB8 = prim max0125 (time0A49, _t0CB7);
  vec3 _t0CB9 = prim *0038<$[3]> (dPos0A48, _t0CB8);
  vec3 _t0CBA = prim +0017<$[3]> (refPos0A47, _t0CB9);
  vec3 _t0CBB = prim +0017<$[3]> (_t0CB6, _t0CBA);
  real _t0CBC = _t0CBB[1];
  real _t0CBD = -0.e0;
  bool _t0CBE = prim >0080 (_t0CBC, _t0CBD);
  real _t0CBF = 0.1e-7;
  real _t0CC0 = 0.1e-7;
  real _t0CC1 = 0.1e-7;
  vec3 _t0CC2 = [_t0CBF, _t0CC0, _t0CC1];
  real _t0CC3 = 0.e0;
  real _t0CC4 = prim max0125 (time0A49, _t0CC3);
  vec3 _t0CC5 = prim *0038<$[3]> (dPos0A48, _t0CC4);
  vec3 _t0CC6 = prim +0017<$[3]> (refPos0A47, _t0CC5);
  vec3 _t0CC7 = prim +0017<$[3]> (_t0CC2, _t0CC6);
  real _t0CC8 = _t0CC7[2];
  real _t0CC9 = -0.e0;
  bool _t0CCA = prim >0080 (_t0CC8, _t0CC9);
  bool _t0CCB = prim $and01C4 (_t0CBE, _t0CCA);
  bool _t0CCC = prim $and01C4 (_t0CB2, _t0CCB);
  bool _t0CCD = prim $and01C4 (_t0CA6, _t0CCC);
  bool _t0CCE = prim $and01C4 (_t0C99, _t0CCD);
  if _t0CCE {
    real _t0CCF = 0.e0;
    real _t0CD0 = prim max0125 (time0A49, _t0CCF);
    real _t0CD1 = (real)face0A4A;
    vec2 _t0CD2 = [_t0CD0, _t0CD1];
    return _t0CD2;
  } else {
    real _t0CD3 = -0.1e1;
    real _t0CD4 = -0.1e1;
    vec2 _t0CD5 = [_t0CD3, _t0CD4];
    return _t0CD5;
  }
}
function vec2#0 _exit0CD6 (vec3 refPos0A47, vec3 dPos0A48, int i0CD7)
{
  real time0CD8 = +inf;
  int face0CD9 = -1;
  real faceTime0CDA = -inf;
  real _t0CDB = 0.57735026919e0;
  real _t0CDC = 0.57735026919e0;
  real _t0CDD = 0.57735026919e0;
  real _t0CDE = 0.57735026919e0;
  vec3 _t0CDF = [_t0CDC, _t0CDD, _t0CDE];
  real _t0CE0 = prim •00CE<$[3]; $[3]; $[]> (_t0CDF, refPos0A47);
  real _t0CE1 = prim -0026<$[]> (_t0CDB, _t0CE0);
  real _t0CE2 = 0.57735026919e0;
  real _t0CE3 = 0.57735026919e0;
  real _t0CE4 = 0.57735026919e0;
  vec3 _t0CE5 = [_t0CE2, _t0CE3, _t0CE4];
  real _t0CE6 = prim •00CE<$[3]; $[3]; $[]> (_t0CE5, dPos0A48);
  real _t0CE7 = prim /0055 (_t0CE1, _t0CE6);
  real _t0CE8 = -0.1e-7;
  bool _t0CE9 = prim >=007E (_t0CE7, _t0CE8);
  real _t0CEA = 0.57735026919e0;
  real _t0CEB = 0.57735026919e0;
  real _t0CEC = 0.57735026919e0;
  real _t0CED = 0.57735026919e0;
  vec3 _t0CEE = [_t0CEB, _t0CEC, _t0CED];
  real _t0CEF = prim •00CE<$[3]; $[3]; $[]> (_t0CEE, refPos0A47);
  real _t0CF0 = prim -0026<$[]> (_t0CEA, _t0CEF);
  real _t0CF1 = 0.57735026919e0;
  real _t0CF2 = 0.57735026919e0;
  real _t0CF3 = 0.57735026919e0;
  vec3 _t0CF4 = [_t0CF1, _t0CF2, _t0CF3];
  real _t0CF5 = prim •00CE<$[3]; $[3]; $[]> (_t0CF4, dPos0A48);
  real _t0CF6 = prim /0055 (_t0CF0, _t0CF5);
  bool _t0CF7 = prim >0080 (time0CD8, _t0CF6);
  real _t0CF8 = 0.57735026919e0;
  real _t0CF9 = 0.57735026919e0;
  real _t0CFA = 0.57735026919e0;
  vec3 _t0CFB = [_t0CF8, _t0CF9, _t0CFA];
  real _t0CFC = prim •00CE<$[3]; $[3]; $[]> (_t0CFB, dPos0A48);
  real _t0CFD = prim |()|00B5<$[]> (_t0CFC);
  real _t0CFE = 0.1e-7;
  bool _t0CFF = prim >=007E (_t0CFD, _t0CFE);
  bool _t0D00 = prim $and01C4 (_t0CF7, _t0CFF);
  bool _t0D01 = prim $and01C4 (_t0CE9, _t0D00);
  if _t0D01 {
    int _t0D02 = 0;
    bool _t0D03 = prim !=0086 (i0CD7, _t0D02);
    if _t0D03 {
      real _t0D04 = 0.57735026919e0;
      real _t0D05 = 0.57735026919e0;
      real _t0D06 = 0.57735026919e0;
      real _t0D07 = 0.57735026919e0;
      vec3 _t0D08 = [_t0D05, _t0D06, _t0D07];
      real _t0D09 = prim •00CE<$[3]; $[3]; $[]> (_t0D08, refPos0A47);
      real _t0D0A = prim -0026<$[]> (_t0D04, _t0D09);
      real _t0D0B = 0.57735026919e0;
      real _t0D0C = 0.57735026919e0;
      real _t0D0D = 0.57735026919e0;
      vec3 _t0D0E = [_t0D0B, _t0D0C, _t0D0D];
      real _t0D0F = prim •00CE<$[3]; $[3]; $[]> (_t0D0E, dPos0A48);
      time0CD8 = prim /0055 (_t0D0A, _t0D0F);
      face0CD9 = 0;
    } else {
      real _t0D10 = 0.57735026919e0;
      real _t0D11 = 0.57735026919e0;
      real _t0D12 = 0.57735026919e0;
      real _t0D13 = 0.57735026919e0;
      vec3 _t0D14 = [_t0D11, _t0D12, _t0D13];
      real _t0D15 = prim •00CE<$[3]; $[3]; $[]> (_t0D14, refPos0A47);
      real _t0D16 = prim -0026<$[]> (_t0D10, _t0D15);
      real _t0D17 = 0.57735026919e0;
      real _t0D18 = 0.57735026919e0;
      real _t0D19 = 0.57735026919e0;
      vec3 _t0D1A = [_t0D17, _t0D18, _t0D19];
      real _t0D1B = prim •00CE<$[3]; $[3]; $[]> (_t0D1A, dPos0A48);
      faceTime0CDA = prim /0055 (_t0D16, _t0D1B);
    }
  }
  real _t0D1C = 0.e0;
  real _t0D1D = -0.1e1;
  real _t0D1E = 0.e0;
  real _t0D1F = 0.e0;
  vec3 _t0D20 = [_t0D1D, _t0D1E, _t0D1F];
  real _t0D21 = prim •00CE<$[3]; $[3]; $[]> (_t0D20, refPos0A47);
  real _t0D22 = prim -0026<$[]> (_t0D1C, _t0D21);
  real _t0D23 = -0.1e1;
  real _t0D24 = 0.e0;
  real _t0D25 = 0.e0;
  vec3 _t0D26 = [_t0D23, _t0D24, _t0D25];
  real _t0D27 = prim •00CE<$[3]; $[3]; $[]> (_t0D26, dPos0A48);
  real _t0D28 = prim /0055 (_t0D22, _t0D27);
  real _t0D29 = -0.1e-7;
  bool _t0D2A = prim >=007E (_t0D28, _t0D29);
  real _t0D2B = 0.e0;
  real _t0D2C = -0.1e1;
  real _t0D2D = 0.e0;
  real _t0D2E = 0.e0;
  vec3 _t0D2F = [_t0D2C, _t0D2D, _t0D2E];
  real _t0D30 = prim •00CE<$[3]; $[3]; $[]> (_t0D2F, refPos0A47);
  real _t0D31 = prim -0026<$[]> (_t0D2B, _t0D30);
  real _t0D32 = -0.1e1;
  real _t0D33 = 0.e0;
  real _t0D34 = 0.e0;
  vec3 _t0D35 = [_t0D32, _t0D33, _t0D34];
  real _t0D36 = prim •00CE<$[3]; $[3]; $[]> (_t0D35, dPos0A48);
  real _t0D37 = prim /0055 (_t0D31, _t0D36);
  bool _t0D38 = prim >0080 (time0CD8, _t0D37);
  real _t0D39 = -0.1e1;
  real _t0D3A = 0.e0;
  real _t0D3B = 0.e0;
  vec3 _t0D3C = [_t0D39, _t0D3A, _t0D3B];
  real _t0D3D = prim •00CE<$[3]; $[3]; $[]> (_t0D3C, dPos0A48);
  real _t0D3E = prim |()|00B5<$[]> (_t0D3D);
  real _t0D3F = 0.1e-7;
  bool _t0D40 = prim >=007E (_t0D3E, _t0D3F);
  bool _t0D41 = prim $and01C4 (_t0D38, _t0D40);
  bool _t0D42 = prim $and01C4 (_t0D2A, _t0D41);
  if _t0D42 {
    int _t0D43 = 1;
    bool _t0D44 = prim !=0086 (i0CD7, _t0D43);
    if _t0D44 {
      real _t0D45 = 0.e0;
      real _t0D46 = -0.1e1;
      real _t0D47 = 0.e0;
      real _t0D48 = 0.e0;
      vec3 _t0D49 = [_t0D46, _t0D47, _t0D48];
      real _t0D4A = prim •00CE<$[3]; $[3]; $[]> (_t0D49, refPos0A47);
      real _t0D4B = prim -0026<$[]> (_t0D45, _t0D4A);
      real _t0D4C = -0.1e1;
      real _t0D4D = 0.e0;
      real _t0D4E = 0.e0;
      vec3 _t0D4F = [_t0D4C, _t0D4D, _t0D4E];
      real _t0D50 = prim •00CE<$[3]; $[3]; $[]> (_t0D4F, dPos0A48);
      time0CD8 = prim /0055 (_t0D4B, _t0D50);
      face0CD9 = 1;
    } else {
      real _t0D51 = 0.e0;
      real _t0D52 = -0.1e1;
      real _t0D53 = 0.e0;
      real _t0D54 = 0.e0;
      vec3 _t0D55 = [_t0D52, _t0D53, _t0D54];
      real _t0D56 = prim •00CE<$[3]; $[3]; $[]> (_t0D55, refPos0A47);
      real _t0D57 = prim -0026<$[]> (_t0D51, _t0D56);
      real _t0D58 = -0.1e1;
      real _t0D59 = 0.e0;
      real _t0D5A = 0.e0;
      vec3 _t0D5B = [_t0D58, _t0D59, _t0D5A];
      real _t0D5C = prim •00CE<$[3]; $[3]; $[]> (_t0D5B, dPos0A48);
      faceTime0CDA = prim /0055 (_t0D57, _t0D5C);
    }
  }
  real _t0D5D = 0.e0;
  real _t0D5E = 0.e0;
  real _t0D5F = -0.1e1;
  real _t0D60 = 0.e0;
  vec3 _t0D61 = [_t0D5E, _t0D5F, _t0D60];
  real _t0D62 = prim •00CE<$[3]; $[3]; $[]> (_t0D61, refPos0A47);
  real _t0D63 = prim -0026<$[]> (_t0D5D, _t0D62);
  real _t0D64 = 0.e0;
  real _t0D65 = -0.1e1;
  real _t0D66 = 0.e0;
  vec3 _t0D67 = [_t0D64, _t0D65, _t0D66];
  real _t0D68 = prim •00CE<$[3]; $[3]; $[]> (_t0D67, dPos0A48);
  real _t0D69 = prim /0055 (_t0D63, _t0D68);
  real _t0D6A = -0.1e-7;
  bool _t0D6B = prim >=007E (_t0D69, _t0D6A);
  real _t0D6C = 0.e0;
  real _t0D6D = 0.e0;
  real _t0D6E = -0.1e1;
  real _t0D6F = 0.e0;
  vec3 _t0D70 = [_t0D6D, _t0D6E, _t0D6F];
  real _t0D71 = prim •00CE<$[3]; $[3]; $[]> (_t0D70, refPos0A47);
  real _t0D72 = prim -0026<$[]> (_t0D6C, _t0D71);
  real _t0D73 = 0.e0;
  real _t0D74 = -0.1e1;
  real _t0D75 = 0.e0;
  vec3 _t0D76 = [_t0D73, _t0D74, _t0D75];
  real _t0D77 = prim •00CE<$[3]; $[3]; $[]> (_t0D76, dPos0A48);
  real _t0D78 = prim /0055 (_t0D72, _t0D77);
  bool _t0D79 = prim >0080 (time0CD8, _t0D78);
  real _t0D7A = 0.e0;
  real _t0D7B = -0.1e1;
  real _t0D7C = 0.e0;
  vec3 _t0D7D = [_t0D7A, _t0D7B, _t0D7C];
  real _t0D7E = prim •00CE<$[3]; $[3]; $[]> (_t0D7D, dPos0A48);
  real _t0D7F = prim |()|00B5<$[]> (_t0D7E);
  real _t0D80 = 0.1e-7;
  bool _t0D81 = prim >=007E (_t0D7F, _t0D80);
  bool _t0D82 = prim $and01C4 (_t0D79, _t0D81);
  bool _t0D83 = prim $and01C4 (_t0D6B, _t0D82);
  if _t0D83 {
    int _t0D84 = 2;
    bool _t0D85 = prim !=0086 (i0CD7, _t0D84);
    if _t0D85 {
      real _t0D86 = 0.e0;
      real _t0D87 = 0.e0;
      real _t0D88 = -0.1e1;
      real _t0D89 = 0.e0;
      vec3 _t0D8A = [_t0D87, _t0D88, _t0D89];
      real _t0D8B = prim •00CE<$[3]; $[3]; $[]> (_t0D8A, refPos0A47);
      real _t0D8C = prim -0026<$[]> (_t0D86, _t0D8B);
      real _t0D8D = 0.e0;
      real _t0D8E = -0.1e1;
      real _t0D8F = 0.e0;
      vec3 _t0D90 = [_t0D8D, _t0D8E, _t0D8F];
      real _t0D91 = prim •00CE<$[3]; $[3]; $[]> (_t0D90, dPos0A48);
      time0CD8 = prim /0055 (_t0D8C, _t0D91);
      face0CD9 = 2;
    } else {
      real _t0D92 = 0.e0;
      real _t0D93 = 0.e0;
      real _t0D94 = -0.1e1;
      real _t0D95 = 0.e0;
      vec3 _t0D96 = [_t0D93, _t0D94, _t0D95];
      real _t0D97 = prim •00CE<$[3]; $[3]; $[]> (_t0D96, refPos0A47);
      real _t0D98 = prim -0026<$[]> (_t0D92, _t0D97);
      real _t0D99 = 0.e0;
      real _t0D9A = -0.1e1;
      real _t0D9B = 0.e0;
      vec3 _t0D9C = [_t0D99, _t0D9A, _t0D9B];
      real _t0D9D = prim •00CE<$[3]; $[3]; $[]> (_t0D9C, dPos0A48);
      faceTime0CDA = prim /0055 (_t0D98, _t0D9D);
    }
  }
  real _t0D9E = 0.e0;
  real _t0D9F = 0.e0;
  real _t0DA0 = 0.e0;
  real _t0DA1 = -0.1e1;
  vec3 _t0DA2 = [_t0D9F, _t0DA0, _t0DA1];
  real _t0DA3 = prim •00CE<$[3]; $[3]; $[]> (_t0DA2, refPos0A47);
  real _t0DA4 = prim -0026<$[]> (_t0D9E, _t0DA3);
  real _t0DA5 = 0.e0;
  real _t0DA6 = 0.e0;
  real _t0DA7 = -0.1e1;
  vec3 _t0DA8 = [_t0DA5, _t0DA6, _t0DA7];
  real _t0DA9 = prim •00CE<$[3]; $[3]; $[]> (_t0DA8, dPos0A48);
  real _t0DAA = prim /0055 (_t0DA4, _t0DA9);
  real _t0DAB = -0.1e-7;
  bool _t0DAC = prim >=007E (_t0DAA, _t0DAB);
  real _t0DAD = 0.e0;
  real _t0DAE = 0.e0;
  real _t0DAF = 0.e0;
  real _t0DB0 = -0.1e1;
  vec3 _t0DB1 = [_t0DAE, _t0DAF, _t0DB0];
  real _t0DB2 = prim •00CE<$[3]; $[3]; $[]> (_t0DB1, refPos0A47);
  real _t0DB3 = prim -0026<$[]> (_t0DAD, _t0DB2);
  real _t0DB4 = 0.e0;
  real _t0DB5 = 0.e0;
  real _t0DB6 = -0.1e1;
  vec3 _t0DB7 = [_t0DB4, _t0DB5, _t0DB6];
  real _t0DB8 = prim •00CE<$[3]; $[3]; $[]> (_t0DB7, dPos0A48);
  real _t0DB9 = prim /0055 (_t0DB3, _t0DB8);
  bool _t0DBA = prim >0080 (time0CD8, _t0DB9);
  real _t0DBB = 0.e0;
  real _t0DBC = 0.e0;
  real _t0DBD = -0.1e1;
  vec3 _t0DBE = [_t0DBB, _t0DBC, _t0DBD];
  real _t0DBF = prim •00CE<$[3]; $[3]; $[]> (_t0DBE, dPos0A48);
  real _t0DC0 = prim |()|00B5<$[]> (_t0DBF);
  real _t0DC1 = 0.1e-7;
  bool _t0DC2 = prim >=007E (_t0DC0, _t0DC1);
  bool _t0DC3 = prim $and01C4 (_t0DBA, _t0DC2);
  bool _t0DC4 = prim $and01C4 (_t0DAC, _t0DC3);
  if _t0DC4 {
    int _t0DC5 = 3;
    bool _t0DC6 = prim !=0086 (i0CD7, _t0DC5);
    if _t0DC6 {
      real _t0DC7 = 0.e0;
      real _t0DC8 = 0.e0;
      real _t0DC9 = 0.e0;
      real _t0DCA = -0.1e1;
      vec3 _t0DCB = [_t0DC8, _t0DC9, _t0DCA];
      real _t0DCC = prim •00CE<$[3]; $[3]; $[]> (_t0DCB, refPos0A47);
      real _t0DCD = prim -0026<$[]> (_t0DC7, _t0DCC);
      real _t0DCE = 0.e0;
      real _t0DCF = 0.e0;
      real _t0DD0 = -0.1e1;
      vec3 _t0DD1 = [_t0DCE, _t0DCF, _t0DD0];
      real _t0DD2 = prim •00CE<$[3]; $[3]; $[]> (_t0DD1, dPos0A48);
      time0CD8 = prim /0055 (_t0DCD, _t0DD2);
      face0CD9 = 3;
    } else {
      real _t0DD3 = 0.e0;
      real _t0DD4 = 0.e0;
      real _t0DD5 = 0.e0;
      real _t0DD6 = -0.1e1;
      vec3 _t0DD7 = [_t0DD4, _t0DD5, _t0DD6];
      real _t0DD8 = prim •00CE<$[3]; $[3]; $[]> (_t0DD7, refPos0A47);
      real _t0DD9 = prim -0026<$[]> (_t0DD3, _t0DD8);
      real _t0DDA = 0.e0;
      real _t0DDB = 0.e0;
      real _t0DDC = -0.1e1;
      vec3 _t0DDD = [_t0DDA, _t0DDB, _t0DDC];
      real _t0DDE = prim •00CE<$[3]; $[3]; $[]> (_t0DDD, dPos0A48);
      faceTime0CDA = prim /0055 (_t0DD9, _t0DDE);
    }
  }
  int _t0DDF = -1;
  bool _t0DE0 = prim !=0086 (face0CD9, _t0DDF);
  real _t0DE1 = 0.1e1;
  real _t0DE2 = 0.1e-7;
  real _t0DE3 = prim +0017<$[]> (_t0DE1, _t0DE2);
  real _t0DE4 = 0.1e1;
  real _t0DE5 = 0.1e1;
  real _t0DE6 = 0.1e1;
  vec3 _t0DE7 = [_t0DE4, _t0DE5, _t0DE6];
  real _t0DE8 = 0.e0;
  real _t0DE9 = prim max0125 (time0CD8, _t0DE8);
  vec3 _t0DEA = prim *0038<$[3]> (dPos0A48, _t0DE9);
  vec3 _t0DEB = prim +0017<$[3]> (refPos0A47, _t0DEA);
  real _t0DEC = prim •00CE<$[3]; $[3]; $[]> (_t0DE7, _t0DEB);
  bool _t0DED = prim >0080 (_t0DE3, _t0DEC);
  real _t0DEE = 0.1e-7;
  real _t0DEF = 0.1e-7;
  real _t0DF0 = 0.1e-7;
  vec3 _t0DF1 = [_t0DEE, _t0DEF, _t0DF0];
  real _t0DF2 = 0.e0;
  real _t0DF3 = prim max0125 (time0CD8, _t0DF2);
  vec3 _t0DF4 = prim *0038<$[3]> (dPos0A48, _t0DF3);
  vec3 _t0DF5 = prim +0017<$[3]> (refPos0A47, _t0DF4);
  vec3 _t0DF6 = prim +0017<$[3]> (_t0DF1, _t0DF5);
  real _t0DF7 = _t0DF6[0];
  real _t0DF8 = -0.e0;
  bool _t0DF9 = prim >0080 (_t0DF7, _t0DF8);
  real _t0DFA = 0.1e-7;
  real _t0DFB = 0.1e-7;
  real _t0DFC = 0.1e-7;
  vec3 _t0DFD = [_t0DFA, _t0DFB, _t0DFC];
  real _t0DFE = 0.e0;
  real _t0DFF = prim max0125 (time0CD8, _t0DFE);
  vec3 _t0E00 = prim *0038<$[3]> (dPos0A48, _t0DFF);
  vec3 _t0E01 = prim +0017<$[3]> (refPos0A47, _t0E00);
  vec3 _t0E02 = prim +0017<$[3]> (_t0DFD, _t0E01);
  real _t0E03 = _t0E02[1];
  real _t0E04 = -0.e0;
  bool _t0E05 = prim >0080 (_t0E03, _t0E04);
  real _t0E06 = 0.1e-7;
  real _t0E07 = 0.1e-7;
  real _t0E08 = 0.1e-7;
  vec3 _t0E09 = [_t0E06, _t0E07, _t0E08];
  real _t0E0A = 0.e0;
  real _t0E0B = prim max0125 (time0CD8, _t0E0A);
  vec3 _t0E0C = prim *0038<$[3]> (dPos0A48, _t0E0B);
  vec3 _t0E0D = prim +0017<$[3]> (refPos0A47, _t0E0C);
  vec3 _t0E0E = prim +0017<$[3]> (_t0E09, _t0E0D);
  real _t0E0F = _t0E0E[2];
  real _t0E10 = -0.e0;
  bool _t0E11 = prim >0080 (_t0E0F, _t0E10);
  bool _t0E12 = prim $and01C4 (_t0E05, _t0E11);
  bool _t0E13 = prim $and01C4 (_t0DF9, _t0E12);
  bool _t0E14 = prim $and01C4 (_t0DED, _t0E13);
  bool _t0E15 = prim $and01C4 (_t0DE0, _t0E14);
  if _t0E15 {
    real _t0E16 = 0.e0;
    real _t0E17 = prim max0125 (time0CD8, _t0E16);
    real _t0E18 = (real)face0CD9;
    vec2 _t0E19 = [_t0E17, _t0E18];
    return _t0E19;
  } else {
    real _t0E1A = -inf;
    bool _t0E1B = prim ==0084 (_t0E1A, faceTime0CDA);
    if _t0E1B {
      real _t0E1C = -0.1e1;
      real _t0E1D = -0.1e1;
      vec2 _t0E1E = [_t0E1C, _t0E1D];
      return _t0E1E;
    } else {
      real _t0E1F = 0.e0;
      real _t0E20 = prim max0125 (faceTime0CDA, _t0E1F);
      real _t0E21 = (real)i0CD7;
      vec2 _t0E22 = [_t0E20, _t0E21];
      return _t0E22;
    }
  }
}
function Femdata: Mesh#0 domain0E25 (Femdata: Space arg00E26)
{
  Femdata: Mesh _t0E27 = extractFem(arg00E26, Mesh);
  return _t0E27;
}
function Femdata: Space#0 space0E28 (Femdata: FemFunc arg00E29)
{
  Femdata: Space _t0E2A = extractFem(arg00E29, Space);
  return _t0E2A;
}
function Femdata: FuncCell#0 funcCell0E2B (Femdata: FemFunc arg00E2C, Femdata: MeshCell arg10E2D)
{
  int _t0E2E = extractFemItem(CellIndex(MeshCell), int, arg10E2D);
  Femdata: FuncCell _t0E2F = loadFem(FuncCell, arg00E2C, _t0E2E);
  return _t0E2F;
}
function bool#1 insideTest0E3D (vec3 x0E3E)
{
  real _t0E3F = 0.e0;
  real _t0E40 = 0.e0;
  real _t0E41 = 0.e0;
  vec3 _t0E42 = [_t0E3F, _t0E40, _t0E41];
  vec3 mid0E43 = prim -0026<$[3]> (x0E3E, _t0E42);
  bool _t0E44;
  real _t0E45 = mid0E43[0];
  real _t0E46 = prim |()|00B5<$[]> (_t0E45);
  real _t0E47 = 0.1e0;
  bool _t0E48 = prim >0080 (_t0E46, _t0E47);
  if _t0E48 {
    bool _t0E49;
    real _t0E4A = mid0E43[1];
    real _t0E4B = prim |()|00B5<$[]> (_t0E4A);
    real _t0E4C = 0.1e0;
    bool _t0E4D = prim >0080 (_t0E4B, _t0E4C);
    if _t0E4D {
      real _t0E4E = mid0E43[2];
      real _t0E4F = prim |()|00B5<$[]> (_t0E4E);
      real _t0E50 = 0.1e0;
      _t0E49 = prim >0080 (_t0E4F, _t0E50);
    } else {
      _t0E49 = false;
    }
    _t0E44 = _t0E49;
  } else {
    _t0E44 = false;
  }
  bool z0E51 = _t0E44;
  bool _t0E52;
  real _t0E53 = prim |()|00B5<$[3]> (mid0E43);
  real _t0E54 = 0.5e1;
  bool _t0E55 = prim <007A (_t0E53, _t0E54);
  if _t0E55 {
    bool _t0E56;
    real _t0E57 = prim |()|00B5<$[3]> (mid0E43);
    real _t0E58 = 0.2e1;
    bool _t0E59 = prim >0080 (_t0E57, _t0E58);
    if _t0E59 {
      _t0E56 = z0E51;
    } else {
      _t0E56 = false;
    }
    _t0E52 = _t0E56;
  } else {
    _t0E52 = false;
  }
  return _t0E52;
}
function vec3#3 grad0E5A (vec3 s0E5B)
{
  real x0E5C = s0E5B[0];
  real y0E5D = s0E5B[1];
  real z0E5E = s0E5B[2];
  real _t0E5F = prim *0034 (x0E5C, x0E5C);
  real _t0E60 = prim *0034 (y0E5D, y0E5D);
  real _t0E61 = prim +0017<$[]> (_t0E5F, _t0E60);
  real _t0E62 = prim *0034 (z0E5E, z0E5E);
  real _t0E63 = prim +0017<$[]> (_t0E61, _t0E62);
  real p0E64 = prim unary -008B<$[]> (_t0E63);
  int _t0E65 = 2;
  real _t0E66 = prim ^0068 (y0E5D, _t0E65);
  real _t0E67 = prim *0034 (_t0E66, z0E5E);
  real _t0E68 = 0.2e1;
  real _t0E69 = prim *0034 (_t0E68, x0E5C);
  real _t0E6A = prim *0034 (_t0E69, y0E5D);
  real _t0E6B = prim *0034 (_t0E6A, z0E5E);
  int _t0E6C = 2;
  real _t0E6D = prim ^0068 (y0E5D, _t0E6C);
  real _t0E6E = prim *0034 (x0E5C, _t0E6D);
  vec3 g0E6F = [_t0E67, _t0E6B, _t0E6E];
  return g0E6F;
}
function tensor[3,3]#3 hess0E70 (vec3 s0E71)
{
  real x0E72 = s0E71[0];
  real y0E73 = s0E71[1];
  real z0E74 = s0E71[2];
  real _t0E75 = prim *0034 (x0E72, x0E72);
  real _t0E76 = prim *0034 (y0E73, y0E73);
  real _t0E77 = prim +0017<$[]> (_t0E75, _t0E76);
  real _t0E78 = prim *0034 (z0E74, z0E74);
  real _t0E79 = prim +0017<$[]> (_t0E77, _t0E78);
  real p0E7A = prim unary -008B<$[]> (_t0E79);
  real _t0E7B = 0.e0;
  real _t0E7C = 0.2e1;
  real _t0E7D = prim *0034 (_t0E7C, y0E73);
  real _t0E7E = prim *0034 (_t0E7D, z0E74);
  int _t0E7F = 2;
  real _t0E80 = prim ^0068 (y0E73, _t0E7F);
  vec3 _t0E81 = [_t0E7B, _t0E7E, _t0E80];
  real _t0E82 = 0.2e1;
  real _t0E83 = prim *0034 (_t0E82, y0E73);
  real _t0E84 = prim *0034 (_t0E83, z0E74);
  real _t0E85 = 0.2e1;
  real _t0E86 = prim *0034 (_t0E85, x0E72);
  real _t0E87 = prim *0034 (_t0E86, z0E74);
  real _t0E88 = 0.2e1;
  real _t0E89 = prim *0034 (_t0E88, x0E72);
  real _t0E8A = prim *0034 (_t0E89, y0E73);
  vec3 _t0E8B = [_t0E84, _t0E87, _t0E8A];
  int _t0E8C = 2;
  real _t0E8D = prim ^0068 (y0E73, _t0E8C);
  real _t0E8E = 0.2e1;
  real _t0E8F = prim *0034 (_t0E8E, x0E72);
  real _t0E90 = prim *0034 (_t0E8F, y0E73);
  real _t0E91 = 0.e0;
  vec3 _t0E92 = [_t0E8D, _t0E90, _t0E91];
  tensor[3,3] hess0E93 = [_t0E81, _t0E8B, _t0E92];
  return hess0E93;
}
function vec3#3 fStep0E94 (vec3 s0E95)
{
  vec3 g0E96 = func grad0E5A (s0E95);
  tensor[3,3] H0E97 = func hess0E70 (s0E95);
  vec3[3] E0E98 = prim evecs00A0 (H0E97);
  real[3] L0E99 = prim evals009F (H0E97);
  real _t0E9A = 0.1e1;
  int _t0E9B = 2;
  real _t0E9C = prim $sub01C0<real; %3> (L0E99, _t0E9B);
  real _t0E9D = prim /0055 (_t0E9A, _t0E9C);
  real _t0E9E = prim unary -008B<$[]> (_t0E9D);
  int _t0E9F = 2;
  vec3 _t0EA0 = prim $sub01C0<vec3; %3> (E0E98, _t0E9F);
  vec3 _t0EA1 = prim *0036<$[3]> (_t0E9E, _t0EA0);
  int _t0EA2 = 2;
  vec3 _t0EA3 = prim $sub01C0<vec3; %3> (E0E98, _t0EA2);
  tensor[3,3] _t0EA4 = prim ⊗00E5<$[3]; $[3]; $[3,3]> (_t0EA1, _t0EA3);
  vec3 up0EA5 = prim •00CE<$[3,3]; $[3]; $[3]> (_t0EA4, g0E96);
  bool _t0EA6;
  real _t0EA7 = up0EA5[0];
  real _t0EA8 = up0EA5[0];
  bool _t0EA9 = prim ==0084 (_t0EA7, _t0EA8);
  bool _t0EAA = prim !00BC (_t0EA9);
  if _t0EAA {
    _t0EA6 = true;
  } else {
    bool _t0EAB;
    real _t0EAC = up0EA5[1];
    real _t0EAD = up0EA5[1];
    bool _t0EAE = prim ==0084 (_t0EAC, _t0EAD);
    bool _t0EAF = prim !00BC (_t0EAE);
    if _t0EAF {
      _t0EAB = true;
    } else {
      real _t0EB0 = up0EA5[2];
      real _t0EB1 = up0EA5[2];
      bool _t0EB2 = prim ==0084 (_t0EB0, _t0EB1);
      _t0EAB = prim !00BC (_t0EB2);
    }
    _t0EA6 = _t0EAB;
  }
  if _t0EA6 {
    real _t0EB3 = +inf;
    real _t0EB4 = +inf;
    real _t0EB5 = +inf;
    vec3 _t0EB6 = [_t0EB3, _t0EB4, _t0EB5];
    return _t0EB6;
  }
  return up0EA5;
}
function bool#4 posNanCheck0EB7 (vec3 up0EB8)
{
  bool _t0EB9;
  real _t0EBA = up0EB8[0];
  real _t0EBB = up0EB8[0];
  bool _t0EBC = prim ==0084 (_t0EBA, _t0EBB);
  bool _t0EBD = prim !00BC (_t0EBC);
  if _t0EBD {
    _t0EB9 = true;
  } else {
    bool _t0EBE;
    real _t0EBF = up0EB8[1];
    real _t0EC0 = up0EB8[1];
    bool _t0EC1 = prim ==0084 (_t0EBF, _t0EC0);
    bool _t0EC2 = prim !00BC (_t0EC1);
    if _t0EC2 {
      _t0EBE = true;
    } else {
      real _t0EC3 = up0EB8[2];
      real _t0EC4 = up0EB8[2];
      bool _t0EC5 = prim ==0084 (_t0EC3, _t0EC4);
      _t0EBE = prim !00BC (_t0EC5);
    }
    _t0EB9 = _t0EBE;
  }
  return _t0EB9;
}
function tensor[3,3]#1 fPerp0EC6 (vec3 s0EC7)
{
  vec3 g0EC8 = func grad0E5A (s0EC7);
  tensor[3,3] H0EC9 = func hess0E70 (s0EC7);
  vec3[3] _t0ECA = prim evecs00A0 (H0EC9);
  int _t0ECB = 2;
  vec3 E20ECC = prim $sub01C0<vec3; %3> (_t0ECA, _t0ECB);
  tensor[3,3] _t0ECD = prim $id01B9<%3> ();
  tensor[3,3] _t0ECE = prim ⊗00E5<$[3]; $[3]; $[3,3]> (E20ECC, E20ECC);
  tensor[3,3] m0ECF = prim -0026<$[3,3]> (_t0ECD, _t0ECE);
  real t0ED0 = prim :00FC<$[3,3]; $[3,3]; $[]> (m0ECF, m0ECF);
  bool _t0ED1 = prim ==0084 (t0ED0, t0ED0);
  bool _t0ED2 = prim !00BC (_t0ED1);
  if _t0ED2 {
    tensor[3,3] _t0ED3 = prim $zero01BB<$[3,3]> ();
    return _t0ED3;
  }
  return m0ECF;
}
function real#1 fStrength0ED4 (vec3 s0ED5)
{
  vec3 g0ED6 = func grad0E5A (s0ED5);
  tensor[3,3] H0ED7 = func hess0E70 (s0ED5);
  real[3] _t0ED8 = prim evals009F (H0ED7);
  int _t0ED9 = 2;
  real _t0EDA = prim $sub01C0<real; %3> (_t0ED8, _t0ED9);
  real _t0EDB = prim unary -008B<$[]> (_t0EDA);
  real _t0EDC = prim |()|00B5<$[3]> (g0ED6);
  real _t0EDD = prim +0017<$[]> (fBias0501, _t0EDC);
  real str0EDE = prim /0055 (_t0EDB, _t0EDD);
  return str0EDE;
}
function real#1 phi0EDF (real r0EE0)
{
  real _t0EE1 = 0.1e1;
  real _t0EE2 = prim -0026<$[]> (_t0EE1, r0EE0);
  int _t0EE3 = 4;
  real _t0EE4 = prim ^0068 (_t0EE2, _t0EE3);
  return _t0EE4;
}
function real#1 phi'0EE5 (real r0EE6)
{
  int _t0EE7 = -4;
  real _t0EE8 = (real)_t0EE7;
  real _t0EE9 = 0.1e1;
  real _t0EEA = prim -0026<$[]> (_t0EE9, r0EE6);
  int _t0EEB = 3;
  real _t0EEC = prim ^0068 (_t0EEA, _t0EEB);
  real _t0EED = prim *0034 (_t0EE8, _t0EEC);
  return _t0EED;
}
function real#2 enr0EEE (vec3 x0EEF)
{
  real _t0EF0 = prim |()|00B5<$[3]> (x0EEF);
  real _t0EF1 = prim /0055 (_t0EF0, rad04FE);
  real _t0EF2 = func phi0EDF (_t0EF1);
  return _t0EF2;
}
function vec3#1 frc0EF3 (vec3 x0EF4)
{
  real _t0EF5 = prim |()|00B5<$[3]> (x0EF4);
  real _t0EF6 = prim /0055 (_t0EF5, rad04FE);
  real _t0EF7 = func phi'0EE5 (_t0EF6);
  real _t0EF8 = 0.1e1;
  real _t0EF9 = prim /0055 (_t0EF8, rad04FE);
  real _t0EFA = prim *0034 (_t0EF7, _t0EF9);
  vec3 _t0EFB = prim *0036<$[3]> (_t0EFA, x0EF4);
  real _t0EFC = prim |()|00B5<$[3]> (x0EF4);
  vec3 _t0EFD = prim /0057<$[3]> (_t0EFB, _t0EFC);
  return _t0EFD;
}
function bool#3 posTest0EFE (vec3 pos0EFF)
{
  bool _t0F00;
  bool _t0F01 = func insideTest0E3D (pos0EFF);
  if _t0F01 {
    bool _t0F02;
    bool _t0F03 = func posNanCheck0EB7 (pos0EFF);
    bool _t0F04 = prim !00BC (_t0F03);
    if _t0F04 {
      real _t0F05 = func fStrength0ED4 (pos0EFF);
      _t0F02 = prim >=007E (_t0F05, fStren0502);
    } else {
      _t0F02 = false;
    }
    _t0F00 = _t0F02;
  } else {
    _t0F00 = false;
  }
  return _t0F00;
}
globalInit {
  int _t04F2 = 0;
  int _t04F0 = 1;
  int _t04F4 = extractFemItem(NumCell(Mesh), int, meshData04EE);
  int _t04F3 = prim -0024 (_t04F4, _t04F0);
  int[] _t04F7 = prim $range01C3 (_t04F2, _t04F3);
  Femdata: MeshCell[] _t04F8 = {};
  foreach _t04F6 in _t04F7 {
    Femdata: MeshCell _t04F9 = loadFem(MeshCell, meshData04EE, _t04F6);
    _t04F8 = prim @0010<Femdata: MeshCell> (_t04F8, _t04F9);
  }
  0cell_meshData04EF = _t04F8;
  space04FA = loadFem(Space, 0space04FA_intermedateGlobal04FB, meshData04EE);
  data04FC = loadFem(FemFunc, 0data04FC_intermedateGlobal04FD, space04FA);
  int _t0E23 = 3;
  dimm0E24 = _t0E23;
  Femdata: Space _t0E30 = extractFem(data04FC, Space);
  Femdata: Space _t0E31 = extractFem(data04FC, Space);
  Femdata: Mesh _t0E32 = extractFem(_t0E31, Mesh);
  field(3)[] _t0E33 = femField(data04FC,_t0E32,field(3)[],refField,findPos050F );
  Femdata: Space _t0E34 = extractFem(data04FC, Space);
  Femdata: Mesh _t0E35 = extractFem(_t0E34, Mesh);
  Femdata: Space _t0E36 = extractFem(data04FC, Space);
  Femdata: Mesh _t0E37 = extractFem(_t0E36, Mesh);
  Femdata: Space _t0E38 = extractFem(data04FC, Space);
  Femdata: Mesh _t0E39 = extractFem(_t0E38, Mesh);
  field(3)[3] _t0E3A = femField(_t0E35,_t0E39,field(3)[3],InvTransform,findPos050F );
  F0E3B = prim ∘0164<#∞; %3; $[]; %3; $[3]> (_t0E33, _t0E3A);
  simplex0E3C = func refcell055B (meshData04EE);
}
strand particle (vec3 pos00F06, real hh00F07) in 3D {
  output vec3 pos0F08;
  output vec3 _pos0F09;
  real hh0F0A;
  vec3 step0F0B;
  bool found0F0C;
  int nfs0F0D;
  int test0F0E;
  int testp0F0F;
  int steps0F10;
  {
    pos0F08 = pos00F06;
    _pos0F09 = pos0F08;
    hh0F0A = hh00F07;
    step0F0B = prim $zero01BB<$[3]> ();
    found0F0C = false;
    nfs0F0D = 0;
    test0F0E = 1;
    testp0F0F = 0;
    steps0F10 = 0;
  }
  update
  {
    int _t0F11 = 1;
    steps0F10 = prim +0015 (steps0F10, _t0F11);
    bool _t0F12 = func posTest0EFE (pos0F08);
    bool _t0F13 = prim !00BC (_t0F12);
    if _t0F13 {
      die;
    }
    bool _t0F14 = prim !00BC (found0F0C);
    if _t0F14 {
      step0F0B = func fStep0E94 (pos0F08);
      pos0F08 = prim +0017<$[3]> (pos0F08, step0F0B);
      _pos0F09 = pos0F08;
      bool _t0F15 = func posNanCheck0EB7 (pos0F08);
      if _t0F15 {
        die;
      }
      real _t0F16 = prim |()|00B5<$[3]> (step0F0B);
      real _t0F17 = prim /0055 (_t0F16, rad04FE);
      bool _t0F18 = prim >0080 (_t0F17, eps04FF);
      if _t0F18 {
        int _t0F19 = 1;
        nfs0F0D = prim +0015 (nfs0F0D, _t0F19);
        int _t0F1A = 10;
        bool _t0F1B = prim >007F (nfs0F0D, _t0F1A);
        if _t0F1B {
          die;
        }
      } else {
        found0F0C = true;
        testp0F0F = 1;
      }
    } else {
      vec3 _t0F1C = func fStep0E94 (pos0F08);
      pos0F08 = prim +0017<$[3]> (pos0F08, _t0F1C);
      _pos0F09 = pos0F08;
      bool _t0F1D = func posNanCheck0EB7 (pos0F08);
      if _t0F1D {
        die;
      }
      step0F0B = prim $zero01BB<$[3]> ();
      real oldE0F1E = 0.e0;
      vec3 force0F1F = prim $zero01BB<$[3]> ();
      int nn0F20 = 0;
      particle[] _t0F21 = prim sphere0198<particle> (_pos0F09, rad04FE);
      foreach P0F22 in _t0F21 {
        vec3 _t0F23 = P0F22.pos0F08;
        vec3 _t0F24 = prim -0026<$[3]> (_t0F23, pos0F08);
        real _t0F25 = func enr0EEE (_t0F24);
        oldE0F1E = prim +0017<$[]> (oldE0F1E, _t0F25);
        vec3 _t0F26 = P0F22.pos0F08;
        vec3 _t0F27 = prim -0026<$[3]> (_t0F26, pos0F08);
        vec3 _t0F28 = func frc0EF3 (_t0F27);
        force0F1F = prim +0017<$[3]> (force0F1F, _t0F28);
        int _t0F29 = 1;
        nn0F20 = prim +0015 (nn0F20, _t0F29);
      }
      int _t0F2A = 0;
      bool _t0F2B = prim ==0082 (_t0F2A, nn0F20);
      if _t0F2B {
        real _t0F2C = 0.5e0;
        real _t0F2D = prim *0034 (_t0F2C, rad04FE);
        real _t0F2E = 0.e0;
        real _t0F2F = 0.e0;
        vec3 _t0F30 = [_t0F2D, _t0F2E, _t0F2F];
        vec3 npos0F31 = prim +0017<$[3]> (pos0F08, _t0F30);
        bool _t0F32 = func posTest0EFE (npos0F31);
        if _t0F32 {
          new particle (npos0F31, hh0F0A);
        }
        continue;
      }
      tensor[3,3] _t0F33 = func fPerp0EC6 (pos0F08);
      force0F1F = prim •00CE<$[3,3]; $[3]; $[3]> (_t0F33, force0F1F);
      vec3 es0F34 = prim *0036<$[3]> (hh0F0A, force0F1F);
      real _t0F35 = prim |()|00B5<$[3]> (es0F34);
      bool _t0F36 = prim >0080 (_t0F35, rad04FE);
      if _t0F36 {
        real _t0F37 = prim |()|00B5<$[3]> (es0F34);
        real _t0F38 = prim /0055 (rad04FE, _t0F37);
        hh0F0A = prim *0034 (hh0F0A, _t0F38);
        real _t0F39 = prim |()|00B5<$[3]> (es0F34);
        real _t0F3A = prim /0055 (rad04FE, _t0F39);
        es0F34 = prim *0038<$[3]> (es0F34, _t0F3A);
      }
      vec3 samplePos0F3B = prim +0017<$[3]> (pos0F08, es0F34);
      vec3 fs0F3C = func fStep0E94 (samplePos0F3B);
      real _t0F3D = prim |()|00B5<$[3]> (fs0F3C);
      real _t0F3E = prim |()|00B5<$[3]> (es0F34);
      real _t0F3F = prim /0055 (_t0F3D, _t0F3E);
      real _t0F40 = 0.5e0;
      bool _t0F41 = prim >0080 (_t0F3F, _t0F40);
      if _t0F41 {
        real _t0F42 = 0.5e0;
        hh0F0A = prim *0034 (hh0F0A, _t0F42);
        continue;
      }
      vec3 oldPos0F43 = pos0F08;
      vec3 up0F44 = prim +0017<$[3]> (fs0F3C, es0F34);
      pos0F08 = prim +0017<$[3]> (pos0F08, up0F44);
      _pos0F09 = pos0F08;
      particle[] _t0F45 = prim sphere0198<particle> (_pos0F09, rad04FE);
      real accum0F4A = 0.e0;
      foreach P0F46 in _t0F45 {
        vec3 _t0F47 = P0F46.pos0F08;
        vec3 _t0F48 = prim -0026<$[3]> (pos0F08, _t0F47);
        real _t0F49 = func enr0EEE (_t0F48);
        accum0F4A = prim +0017<$[]> (accum0F4A, _t0F49);
      }
      real newE0F4B = accum0F4A;
      real _t0F4C = prim -0026<$[]> (newE0F4B, oldE0F1E);
      real _t0F4D = 0.5e0;
      vec3 _t0F4E = prim -0026<$[3]> (pos0F08, oldPos0F43);
      vec3 _t0F4F = prim *0036<$[3]> (_t0F4D, _t0F4E);
      vec3 _t0F50 = prim unary -008B<$[3]> (force0F1F);
      real _t0F51 = prim •00CE<$[3]; $[3]; $[]> (_t0F4F, _t0F50);
      bool _t0F52 = prim >0080 (_t0F4C, _t0F51);
      if _t0F52 {
        pos0F08 = oldPos0F43;
        _pos0F09 = pos0F08;
        real _t0F53 = 0.5e0;
        hh0F0A = prim *0034 (hh0F0A, _t0F53);
        continue;
      }
      real _t0F54 = 0.11e1;
      hh0F0A = prim *0034 (hh0F0A, _t0F54);
      step0F0B = up0F44;
      bool _t0F55 = func posNanCheck0EB7 (pos0F08);
      if _t0F55 {
        die;
      }
      int _t0F56 = 5;
      bool _t0F57 = prim <0079 (nn0F20, _t0F56);
      if _t0F57 {
        real _t0F58 = 0.5e0;
        real _t0F59 = prim *0034 (_t0F58, rad04FE);
        vec3 _t0F5A = prim normalize0137<$[3]> (es0F34);
        vec3 _t0F5B = prim *0036<$[3]> (_t0F59, _t0F5A);
        vec3 npos0F5C = prim +0017<$[3]> (pos0F08, _t0F5B);
        bool _t0F5D = func posTest0EFE (npos0F5C);
        if _t0F5D {
          new particle (npos0F5C, hh0F0A);
        }
      }
    }
  }
}
collection {
  foreach x0F5E in ipos0504 {
    real _t0F5F = 0.1e1;
    new particle (x0F5E, _t0F5F);
  }
}
update {
  int res0F60= sum<int> { (P0F63) => {
      int _t0F64 = P0F63.test0F0E;
      return _t0F64;
    } (P0F61, P0F61)
  | P0F61 in all };
  int num0F66 = res0F60;
  int res0F67= max<int> { (P0F6A) => {
      int _t0F6B = P0F6A.steps0F10;
      return _t0F6B;
    } (P0F68, P0F68)
  | P0F68 in all };
  int steps0F6D = res0F67;
  int res0F6E= sum<int> { (P0F71) => {
      int _t0F72 = P0F71.testp0F0F;
      return _t0F72;
    } (P0F6F, P0F6F)
  | P0F6F in all };
  int numFound0F74 = res0F6E;
  bool res0F75= all { (P0F78) => {
      bool _t0F79 = P0F78.found0F0C;
      return _t0F79;
    } (P0F76, P0F76)
  | P0F76 in all };
  bool allFound0F7B = res0F75;
  real res0F7C= max<real> { (P0F80) => {
      vec3 _t0F81 = P0F80.step0F0B;
      real _t0F82 = prim |()|00B5<$[3]> (_t0F81);
      return _t0F82;
    } (P0F7D, P0F7D)
  | P0F7D in all };
  real maxStep0F84 = res0F7C;
  string _t0F85 = "One run:";
  string _t0F86 = " and ";
  real _t0F87 = prim /0055 (maxStep0F84, rad04FE);
  string _t0F88 = " and ";
  real _t0F89 = prim /0055 (maxStep0F84, rad04FE);
  bool _t0F8A = prim <007A (_t0F89, eps04FF);
  string _t0F8B = " and ";
  string _t0F8C = " of ";
  string _t0F8D = "\n";
  print (_t0F85, allFound0F7B, _t0F86, _t0F87, _t0F88, _t0F8A, _t0F8B, numFound0F74, _t0F8C, num0F66, _t0F8D);
  if allFound0F7B {
    real _t0F8E = prim /0055 (maxStep0F84, rad04FE);
    bool _t0F8F = prim <007A (_t0F8E, eps04FF);
    if _t0F8F {
      string _t0F90 = "CONVERGED!\n";
      print (_t0F90);
      stabilize_all;
    }
  }
  int _t0F91 = 2000;
  bool _t0F92 = prim >007F (steps0F6D, _t0F91);
  if _t0F92 {
    stabilize_all;
  }
  string _t0F93 = "Current steps:";
  string _t0F94 = "\n";
  print (_t0F93, steps0F6D, _t0F94);
}
/* Program end */
/* Simplified Program (after after contraction (1)) start */
properties: GlobalInit,StabilizeAll,GlobalReduce,StrandSets,GlobalUpdate,NewStrands,StrandCommunication,StrandsMayDie,HasInputs,HasGlobals,ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
input FemData:Mesh meshData04EE;
input FemData:Space 0space04FA_intermedateGlobal04FB;
input FemData:FemFunc 0data04FC_intermedateGlobal04FD;
input real rad04FE = <default>;
input real eps04FF = <default>;
input real v00500 = <default>;
input real fBias0501 = <default>;
input real fStren0502 = <default>;
input real zfuz0503 = <default>;
input vec3[] ipos0504;
constants {
  rad04FE = 0.1e-1;
  eps04FF = 0.1e-1;
  v00500 = 0.625e-1;
  fBias0501 = 0.1e-1;
  fStren0502 = 0.1e-1;
  zfuz0503 = 0.1e-1;
}
function bool#0 !=0505 (Femdata: MeshCell cell10506, Femdata: MeshCell cell10507)
{
  int _t0508 = extractFemItem(CellIndex(Mesh), int, cell10506);
  int _t0509 = extractFemItem(CellIndex(Mesh), int, cell10507);
  bool _t050A = prim !=0086 (_t0508, _t0509);
  return _t050A;
}
function bool#0 ==050B (Femdata: MeshCell cell10506, Femdata: MeshCell cell10507)
{
  int _t050C = extractFemItem(CellIndex(Mesh), int, cell10506);
  int _t050D = extractFemItem(CellIndex(Mesh), int, cell10507);
  bool _t050E = prim ==0082 (_t050C, _t050D);
  return _t050E;
}
function Femdata: MeshPos#0 findPos050F (Femdata: Mesh mesh0510, vec3 pos0511)
{
  real _t0512 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t0513 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t0514 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  xn0515 = [_t0512, _t0513, _t0514];
  newtonInt0516 = 0;
  cellInt0517 = extractFemItem(StartCell(Mesh), int, mesh0510);
  int _t0518 = extractFemItem(NumCell(Mesh), int, mesh0510);
  int _t0519 = 1;
  numCell051A = prim -0024 (_t0518, _t0519);
  yayCells051B = extractFemItem2(NearbyCell(File=spat.in)(Mesh), vec3, mesh0510, pos0511 : vec3);
  foreach cellItter051F in yayCells051B {
    real _t051C = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    real _t051D = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    real _t051E = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    xn0515 = [_t051C, _t051D, _t051E];
    cellInt0517 = cellItter051F;
    field(3)[3] _t0520 = femField(mesh0510,cellInt0517,field(3)[3],Transform,);
    field(3)[3,3] _t0521 = prim ∇⊗00AD<#∞; %3; $[]; %3> (_t0520);
    field(3)[3,3] _t0522 = prim inv015E<#∞; %3> (_t0521);
    real _t0523 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    real _t0524 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    real _t0525 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    vec3 _t0526 = [_t0523, _t0524, _t0525];
    A0527 = prim @00A5<#∞; %3; $[3,3]> (_t0522, _t0526);
    int _t0528 = 0;
    int _t0529 = 16;
    int[] _t052A = prim $range01C3 (_t0528, _t0529);
    foreach newtonItter0559 in _t052A {
      field(3)[3] _t052B = femField(mesh0510,cellInt0517,field(3)[3],Transform,);
      field(3)[3] _t052C = prim -002E<#∞; %3; $[3]> (_t052B, pos0511);
      field(3)[3] _t052D = prim •00D4<#∞; %3; $[3,3]; $[3]; $[3]> (A0527, _t052C);
      delta052E = prim @00A5<#∞; %3; $[3]> (_t052D, xn0515);
      xn0515 = prim -0026<$[3]> (xn0515, delta052E);
      real _t052F = 0.1e-7;
      real _t0530 = 0.1e-7;
      real _t0531 = prim *0034 (_t052F, _t0530);
      real _t0532 = prim •00CE<$[3]; $[3]; $[]> (delta052E, delta052E);
      bool _t0533 = prim >=007E (_t0531, _t0532);
      if _t0533 {
        real _t0534 = 0.1e1;
        real _t0535 = 0.1e-7;
        real _t0536 = prim +0017<$[]> (_t0534, _t0535);
        real _t0537 = 0.1e1;
        real _t0538 = 0.1e1;
        real _t0539 = 0.1e1;
        vec3 _t053A = [_t0537, _t0538, _t0539];
        real _t053B = prim •00CE<$[3]; $[3]; $[]> (_t053A, xn0515);
        bool _t053C = prim >0080 (_t0536, _t053B);
        real _t053D = 0.1e-7;
        real _t053E = 0.1e-7;
        real _t053F = 0.1e-7;
        vec3 _t0540 = [_t053D, _t053E, _t053F];
        vec3 _t0541 = prim +0017<$[3]> (_t0540, xn0515);
        real _t0542 = _t0541[0];
        real _t0543 = -0.e0;
        bool _t0544 = prim >0080 (_t0542, _t0543);
        real _t0545 = 0.1e-7;
        real _t0546 = 0.1e-7;
        real _t0547 = 0.1e-7;
        vec3 _t0548 = [_t0545, _t0546, _t0547];
        vec3 _t0549 = prim +0017<$[3]> (_t0548, xn0515);
        real _t054A = _t0549[1];
        real _t054B = -0.e0;
        bool _t054C = prim >0080 (_t054A, _t054B);
        real _t054D = 0.1e-7;
        real _t054E = 0.1e-7;
        real _t054F = 0.1e-7;
        vec3 _t0550 = [_t054D, _t054E, _t054F];
        vec3 _t0551 = prim +0017<$[3]> (_t0550, xn0515);
        real _t0552 = _t0551[2];
        real _t0553 = -0.e0;
        bool _t0554 = prim >0080 (_t0552, _t0553);
        bool _t0555 = prim $and01C4 (_t054C, _t0554);
        bool _t0556 = prim $and01C4 (_t0544, _t0555);
        bool _t0557 = prim $and01C4 (_t053C, _t0556);
        if _t0557 {
          Femdata: MeshPos _t0558 = extractFemItemN((mesh0510, cellInt0517, xn0515, pos0511),AllBuild(MeshPos),);
          return _t0558;
        }
      }
    }
  }
  Femdata: MeshPos _t055A = extractFemItemN((mesh0510),InvalidBuild(MeshPos),);
  return _t055A;
}
function Femdata: RefCell#1 refcell055B (Femdata: Mesh arg0055C)
{
  Femdata: RefCell _t055D = extractFemItem(RefCell(Mesh), Femdata: RefCell, arg0055C);
  return _t055D;
}
function Femdata: MeshCell[]#0 cells055E (Femdata: Mesh arg0055F)
{
  Femdata: MeshCell[] _t0560 = extractFemItem(Cells(Mesh), Femdata: MeshCell[], arg0055F);
  return _t0560;
}
function Femdata: MeshCell[]#0 cells0561 (Femdata: Mesh arg0055F)
{
  int _t0562 = 0;
  int _t0563 = extractFemItem(NumCell(Mesh), int, arg0055F);
  int[] _t0564 = prim $range01C3 (_t0562, _t0563);
  Femdata: MeshCell[] accum0567 = {};
  foreach i0565 in _t0564 {
    Femdata: MeshCell _t0566 = loadFem(MeshCell, arg0055F, i0565);
    accum0567 = prim @0010<Femdata: MeshCell> (accum0567, _t0566);
  }
  return accum0567;
}
function int#0 numCell0568 (Femdata: Mesh arg0055C)
{
  int _t0569 = extractFemItem(NumCell(Mesh), int, arg0055C);
  return _t0569;
}
function tensor[3,3,3,3]#0 mesh_t_transform_3056A (vec3 pos056B, int cell056C, Femdata: Mesh mesh056D)
{
  field(3)[3] _t056E = femField(mesh056D,cell056C,field(3)[3],Transform,);
  field(3)[3,3] _t056F = prim ∇⊗00AD<#∞; %3; $[]; %3> (_t056E);
  field(3)[3,3,3] _t0570 = prim ∇⊗00AD<#∞; %3; $[3]; %3> (_t056F);
  field(3)[3,3,3,3] _t0571 = prim ∇⊗00AD<#∞; %3; $[3,3]; %3> (_t0570);
  tensor[3,3,3,3] _t0572 = prim @00A5<#∞; %3; $[3,3,3,3]> (_t0571, pos056B);
  return _t0572;
}
function tensor[3,3,3]#0 mesh_t_transform_20573 (vec3 pos056B, int cell056C, Femdata: Mesh mesh056D)
{
  field(3)[3] _t0574 = femField(mesh056D,cell056C,field(3)[3],Transform,);
  field(3)[3,3] _t0575 = prim ∇⊗00AD<#∞; %3; $[]; %3> (_t0574);
  field(3)[3,3,3] _t0576 = prim ∇⊗00AD<#∞; %3; $[3]; %3> (_t0575);
  tensor[3,3,3] _t0577 = prim @00A5<#∞; %3; $[3,3,3]> (_t0576, pos056B);
  return _t0577;
}
function tensor[3,3]#0 mesh_t_transform_10578 (vec3 pos056B, int cell056C, Femdata: Mesh mesh056D)
{
  field(3)[3] _t0579 = femField(mesh056D,cell056C,field(3)[3],Transform,);
  field(3)[3,3] _t057A = prim ∇⊗00AD<#∞; %3; $[]; %3> (_t0579);
  tensor[3,3] _t057B = prim @00A5<#∞; %3; $[3,3]> (_t057A, pos056B);
  return _t057B;
}
function vec3#2 mesh_t_transform_0057C (vec3 pos056B, int cell056C, Femdata: Mesh mesh056D)
{
  field(3)[3] _t057D = femField(mesh056D,cell056C,field(3)[3],Transform,);
  vec3 _t057E = prim @00A5<#∞; %3; $[3]> (_t057D, pos056B);
  return _t057E;
}
function Femdata: MeshPos#0 _mesh_t_newtonInverse057F (vec3 pos0580, int cellInt0581, Femdata: Mesh mesh0582)
{
  real _t0583 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t0584 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t0585 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  xn0586 = [_t0583, _t0584, _t0585];
  field(3)[3] _t0587 = femField(mesh0582,cellInt0581,field(3)[3],Transform,);
  field(3)[3,3] _t0588 = prim ∇⊗00AD<#∞; %3; $[]; %3> (_t0587);
  field(3)[3,3] _t0589 = prim inv015E<#∞; %3> (_t0588);
  real _t058A = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t058B = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t058C = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  vec3 _t058D = [_t058A, _t058B, _t058C];
  A058E = prim @00A5<#∞; %3; $[3,3]> (_t0589, _t058D);
  int _t058F = 0;
  int _t0590 = 16;
  int[] _t0591 = prim $range01C3 (_t058F, _t0590);
  foreach itter05C1 in _t0591 {
    field(3)[3] _t0592 = femField(mesh0582,cellInt0581,field(3)[3],Transform,);
    field(3)[3] _t0593 = prim -002E<#∞; %3; $[3]> (_t0592, pos0580);
    field(3)[3] _t0594 = prim •00D4<#∞; %3; $[3,3]; $[3]; $[3]> (A058E, _t0593);
    delta0595 = prim @00A5<#∞; %3; $[3]> (_t0594, xn0586);
    xn0586 = prim -0026<$[3]> (xn0586, delta0595);
    real _t0596 = 0.1e-7;
    real _t0597 = 0.1e-7;
    real _t0598 = prim *0034 (_t0596, _t0597);
    real _t0599 = prim •00CE<$[3]; $[3]; $[]> (delta0595, delta0595);
    bool _t059A = prim >=007E (_t0598, _t0599);
    if _t059A {
      real _t059B = 0.1e1;
      real _t059C = 0.1e-7;
      real _t059D = prim +0017<$[]> (_t059B, _t059C);
      real _t059E = 0.1e1;
      real _t059F = 0.1e1;
      real _t05A0 = 0.1e1;
      vec3 _t05A1 = [_t059E, _t059F, _t05A0];
      real _t05A2 = prim •00CE<$[3]; $[3]; $[]> (_t05A1, xn0586);
      bool _t05A3 = prim >0080 (_t059D, _t05A2);
      real _t05A4 = 0.1e-7;
      real _t05A5 = 0.1e-7;
      real _t05A6 = 0.1e-7;
      vec3 _t05A7 = [_t05A4, _t05A5, _t05A6];
      vec3 _t05A8 = prim +0017<$[3]> (_t05A7, xn0586);
      real _t05A9 = _t05A8[0];
      real _t05AA = -0.e0;
      bool _t05AB = prim >0080 (_t05A9, _t05AA);
      real _t05AC = 0.1e-7;
      real _t05AD = 0.1e-7;
      real _t05AE = 0.1e-7;
      vec3 _t05AF = [_t05AC, _t05AD, _t05AE];
      vec3 _t05B0 = prim +0017<$[3]> (_t05AF, xn0586);
      real _t05B1 = _t05B0[1];
      real _t05B2 = -0.e0;
      bool _t05B3 = prim >0080 (_t05B1, _t05B2);
      real _t05B4 = 0.1e-7;
      real _t05B5 = 0.1e-7;
      real _t05B6 = 0.1e-7;
      vec3 _t05B7 = [_t05B4, _t05B5, _t05B6];
      vec3 _t05B8 = prim +0017<$[3]> (_t05B7, xn0586);
      real _t05B9 = _t05B8[2];
      real _t05BA = -0.e0;
      bool _t05BB = prim >0080 (_t05B9, _t05BA);
      bool _t05BC = prim $and01C4 (_t05B3, _t05BB);
      bool _t05BD = prim $and01C4 (_t05AB, _t05BC);
      bool _t05BE = prim $and01C4 (_t05A3, _t05BD);
      if _t05BE {
        Femdata: MeshPos _t05BF = extractFemItemN((mesh0582, cellInt0581, xn0586, pos0580),AllBuild(MeshPos),);
        return _t05BF;
      } else {
        Femdata: MeshPos _t05C0 = extractFemItemN((mesh0582),InvalidBuild(MeshPos),);
        return _t05C0;
      }
    }
  }
  Femdata: MeshPos _t05C2 = extractFemItemN((mesh0582),InvalidBuild(MeshPos),);
  return _t05C2;
}
function Femdata: MeshPos#0 _mesh_pos_mesh_t_build_world_pos05C3 (Femdata: MeshPos pos05C4)
{
  bool _t05C5 = extractFemItem(WorldTest(MeshPos), bool, pos05C4);
  if _t05C5 {
    vec3 _t05C6 = extractFemItem(RefPos(MeshPos), vec3, pos05C4);
    int _t05C7 = extractFemItem(CellIndex(MeshPos), int, pos05C4);
    Femdata: Mesh _t05C8 = extractFem(pos05C4, Mesh);
    vec3 _t05C9 = func mesh_t_transform_0057C (_t05C6, _t05C7, _t05C8);
    Femdata: MeshPos _t05CA = extractFemItemN((pos05C4, _t05C9),NewWorld(MeshPos),);
    return _t05CA;
  } else {
    return pos05C4;
  }
}
function vec3#0 worldPos05CB (Femdata: MeshPos pos05C4)
{
  vec3 _t05CC = extractFemItem(RefPos(MeshPos), vec3, pos05C4);
  int _t05CD = extractFemItem(CellIndex(MeshPos), int, pos05C4);
  Femdata: Mesh _t05CE = extractFem(pos05C4, Mesh);
  vec3 _t05CF = func mesh_t_transform_0057C (_t05CC, _t05CD, _t05CE);
  return _t05CF;
}
function Femdata: MeshPos#0 $exitPos05D0 (Femdata: Mesh mesh05D1, int cellId05D2, vec3 refPos05D3, vec3 dPos05D4, real[2] time05D5)
{
  int _t05D6 = -1;
  real _t05D7 = time05D5[1];
  int _t05D8 = prim $r2i01B7 (_t05D7);
  int[2] _t05DA = func nextCell405D9 (_t05D8, cellId05D2, mesh05D1);
  int _t05DB = 0;
  int _t05DC = prim $sub01C0<int; %2> (_t05DA, _t05DB);
  bool _t05DD = prim !=0086 (_t05D6, _t05DC);
  if _t05DD {
    real _t05DE = time05D5[1];
    int _t05DF = prim $r2i01B7 (_t05DE);
    int[2] _t05E0 = func nextCell405D9 (_t05DF, cellId05D2, mesh05D1);
    int _t05E1 = 0;
    int _t05E2 = prim $sub01C0<int; %2> (_t05E0, _t05E1);
    real _t05E3 = 0.1e1;
    real _t05E4 = 0.e0;
    real _t05E5 = 0.e0;
    real _t05E6 = 0.e0;
    vec4 _t05E7 = [_t05E3, _t05E4, _t05E5, _t05E6];
    real _t05E8 = 0.e0;
    real _t05E9 = 0.1e1;
    real _t05EA = 0.e0;
    real _t05EB = 0.e0;
    vec4 _t05EC = [_t05E8, _t05E9, _t05EA, _t05EB];
    real _t05ED = 0.e0;
    real _t05EE = 0.e0;
    real _t05EF = 0.1e1;
    real _t05F0 = 0.e0;
    vec4 _t05F1 = [_t05ED, _t05EE, _t05EF, _t05F0];
    real _t05F2 = 0.971445146547e-16;
    real _t05F3 = 0.e0;
    real _t05F4 = 0.e0;
    real _t05F5 = 0.1e1;
    vec4 _t05F6 = [_t05F2, _t05F3, _t05F4, _t05F5];
    tensor[4,4] _t05F7 = [_t05E7, _t05EC, _t05F1, _t05F6];
    real _t05F8 = 0.57735026919e0;
    real _t05F9 = 0.57735026919e0;
    real _t05FA = 0.57735026919e0;
    real _t05FB = -0.57735026919e0;
    vec4 _t05FC = [_t05F8, _t05F9, _t05FA, _t05FB];
    real _t05FD = -0.333333333333e0;
    real _t05FE = 0.666666666667e0;
    real _t05FF = -0.333333333333e0;
    real _t0600 = 0.333333333333e0;
    vec4 _t0601 = [_t05FD, _t05FE, _t05FF, _t0600];
    real _t0602 = -0.333333333333e0;
    real _t0603 = -0.333333333333e0;
    real _t0604 = 0.666666666667e0;
    real _t0605 = 0.333333333333e0;
    vec4 _t0606 = [_t0602, _t0603, _t0604, _t0605];
    real _t0607 = 0.971445146547e-16;
    real _t0608 = 0.e0;
    real _t0609 = 0.e0;
    real _t060A = 0.1e1;
    vec4 _t060B = [_t0607, _t0608, _t0609, _t060A];
    tensor[4,4] _t060C = [_t05FC, _t0601, _t0606, _t060B];
    real _t060D = -0.333333333333e0;
    real _t060E = 0.666666666667e0;
    real _t060F = -0.333333333333e0;
    real _t0610 = 0.333333333333e0;
    vec4 _t0611 = [_t060D, _t060E, _t060F, _t0610];
    real _t0612 = -0.57735026919e0;
    real _t0613 = -0.57735026919e0;
    real _t0614 = -0.57735026919e0;
    real _t0615 = 0.57735026919e0;
    vec4 _t0616 = [_t0612, _t0613, _t0614, _t0615];
    real _t0617 = -0.333333333333e0;
    real _t0618 = -0.333333333333e0;
    real _t0619 = 0.666666666667e0;
    real _t061A = 0.333333333333e0;
    vec4 _t061B = [_t0617, _t0618, _t0619, _t061A];
    real _t061C = 0.971445146547e-16;
    real _t061D = 0.e0;
    real _t061E = 0.e0;
    real _t061F = 0.1e1;
    vec4 _t0620 = [_t061C, _t061D, _t061E, _t061F];
    tensor[4,4] _t0621 = [_t0611, _t0616, _t061B, _t0620];
    real _t0622 = -0.333333333333e0;
    real _t0623 = 0.666666666667e0;
    real _t0624 = -0.333333333333e0;
    real _t0625 = 0.333333333333e0;
    vec4 _t0626 = [_t0622, _t0623, _t0624, _t0625];
    real _t0627 = -0.333333333333e0;
    real _t0628 = -0.333333333333e0;
    real _t0629 = 0.666666666667e0;
    real _t062A = 0.333333333333e0;
    vec4 _t062B = [_t0627, _t0628, _t0629, _t062A];
    real _t062C = 0.57735026919e0;
    real _t062D = 0.57735026919e0;
    real _t062E = 0.57735026919e0;
    real _t062F = -0.57735026919e0;
    vec4 _t0630 = [_t062C, _t062D, _t062E, _t062F];
    real _t0631 = 0.971445146547e-16;
    real _t0632 = 0.e0;
    real _t0633 = 0.e0;
    real _t0634 = 0.1e1;
    vec4 _t0635 = [_t0631, _t0632, _t0633, _t0634];
    tensor[4,4] _t0636 = [_t0626, _t062B, _t0630, _t0635];
    tensor[4,4][4] _t0637 = {_t05F7, _t060C, _t0621, _t0636};
    real _t0638 = 0.57735026919e0;
    real _t0639 = -0.1e1;
    real _t063A = -0.1e1;
    real _t063B = 0.1e1;
    vec4 _t063C = [_t0638, _t0639, _t063A, _t063B];
    real _t063D = 0.57735026919e0;
    real _t063E = 0.1e1;
    real _t063F = 0.e0;
    real _t0640 = 0.e0;
    vec4 _t0641 = [_t063D, _t063E, _t063F, _t0640];
    real _t0642 = 0.57735026919e0;
    real _t0643 = 0.e0;
    real _t0644 = 0.1e1;
    real _t0645 = 0.e0;
    vec4 _t0646 = [_t0642, _t0643, _t0644, _t0645];
    real _t0647 = 0.e0;
    real _t0648 = 0.e0;
    real _t0649 = 0.e0;
    real _t064A = 0.1e1;
    vec4 _t064B = [_t0647, _t0648, _t0649, _t064A];
    tensor[4,4] _t064C = [_t063C, _t0641, _t0646, _t064B];
    real _t064D = 0.1e1;
    real _t064E = 0.e0;
    real _t064F = 0.e0;
    real _t0650 = 0.e0;
    vec4 _t0651 = [_t064D, _t064E, _t064F, _t0650];
    real _t0652 = 0.e0;
    real _t0653 = 0.1e1;
    real _t0654 = 0.e0;
    real _t0655 = 0.e0;
    vec4 _t0656 = [_t0652, _t0653, _t0654, _t0655];
    real _t0657 = 0.e0;
    real _t0658 = 0.e0;
    real _t0659 = 0.1e1;
    real _t065A = 0.e0;
    vec4 _t065B = [_t0657, _t0658, _t0659, _t065A];
    real _t065C = 0.e0;
    real _t065D = 0.e0;
    real _t065E = 0.e0;
    real _t065F = 0.1e1;
    vec4 _t0660 = [_t065C, _t065D, _t065E, _t065F];
    tensor[4,4] _t0661 = [_t0651, _t0656, _t065B, _t0660];
    real _t0662 = 0.e0;
    real _t0663 = 0.1e1;
    real _t0664 = 0.e0;
    real _t0665 = 0.e0;
    vec4 _t0666 = [_t0662, _t0663, _t0664, _t0665];
    real _t0667 = -0.1e1;
    real _t0668 = 0.e0;
    real _t0669 = 0.e0;
    real _t066A = 0.e0;
    vec4 _t066B = [_t0667, _t0668, _t0669, _t066A];
    real _t066C = 0.e0;
    real _t066D = 0.e0;
    real _t066E = 0.1e1;
    real _t066F = 0.e0;
    vec4 _t0670 = [_t066C, _t066D, _t066E, _t066F];
    real _t0671 = 0.e0;
    real _t0672 = 0.e0;
    real _t0673 = 0.e0;
    real _t0674 = 0.1e1;
    vec4 _t0675 = [_t0671, _t0672, _t0673, _t0674];
    tensor[4,4] _t0676 = [_t0666, _t066B, _t0670, _t0675];
    real _t0677 = 0.e0;
    real _t0678 = 0.1e1;
    real _t0679 = 0.e0;
    real _t067A = 0.e0;
    vec4 _t067B = [_t0677, _t0678, _t0679, _t067A];
    real _t067C = 0.e0;
    real _t067D = 0.e0;
    real _t067E = 0.1e1;
    real _t067F = 0.e0;
    vec4 _t0680 = [_t067C, _t067D, _t067E, _t067F];
    real _t0681 = 0.1e1;
    real _t0682 = 0.e0;
    real _t0683 = 0.e0;
    real _t0684 = 0.e0;
    vec4 _t0685 = [_t0681, _t0682, _t0683, _t0684];
    real _t0686 = 0.e0;
    real _t0687 = 0.e0;
    real _t0688 = 0.e0;
    real _t0689 = 0.1e1;
    vec4 _t068A = [_t0686, _t0687, _t0688, _t0689];
    tensor[4,4] _t068B = [_t067B, _t0680, _t0685, _t068A];
    tensor[4,4][4] _t068C = {_t064C, _t0661, _t0676, _t068B};
    real _t068D = -0.1e1;
    real _t068E = -0.57735026919e0;
    real _t068F = -0.1e1;
    real _t0690 = 0.1e1;
    vec4 _t0691 = [_t068D, _t068E, _t068F, _t0690];
    real _t0692 = 0.1e1;
    real _t0693 = -0.57735026919e0;
    real _t0694 = 0.e0;
    real _t0695 = 0.e0;
    vec4 _t0696 = [_t0692, _t0693, _t0694, _t0695];
    real _t0697 = 0.e0;
    real _t0698 = -0.57735026919e0;
    real _t0699 = 0.1e1;
    real _t069A = 0.e0;
    vec4 _t069B = [_t0697, _t0698, _t0699, _t069A];
    real _t069C = 0.e0;
    real _t069D = 0.e0;
    real _t069E = 0.e0;
    real _t069F = 0.1e1;
    vec4 _t06A0 = [_t069C, _t069D, _t069E, _t069F];
    tensor[4,4] _t06A1 = [_t0691, _t0696, _t069B, _t06A0];
    real _t06A2 = 0.e0;
    real _t06A3 = -0.1e1;
    real _t06A4 = 0.e0;
    real _t06A5 = 0.e0;
    vec4 _t06A6 = [_t06A2, _t06A3, _t06A4, _t06A5];
    real _t06A7 = 0.1e1;
    real _t06A8 = 0.e0;
    real _t06A9 = 0.e0;
    real _t06AA = 0.e0;
    vec4 _t06AB = [_t06A7, _t06A8, _t06A9, _t06AA];
    real _t06AC = 0.e0;
    real _t06AD = 0.e0;
    real _t06AE = 0.1e1;
    real _t06AF = 0.e0;
    vec4 _t06B0 = [_t06AC, _t06AD, _t06AE, _t06AF];
    real _t06B1 = 0.e0;
    real _t06B2 = 0.e0;
    real _t06B3 = 0.e0;
    real _t06B4 = 0.1e1;
    vec4 _t06B5 = [_t06B1, _t06B2, _t06B3, _t06B4];
    tensor[4,4] _t06B6 = [_t06A6, _t06AB, _t06B0, _t06B5];
    real _t06B7 = 0.1e1;
    real _t06B8 = 0.e0;
    real _t06B9 = 0.e0;
    real _t06BA = 0.e0;
    vec4 _t06BB = [_t06B7, _t06B8, _t06B9, _t06BA];
    real _t06BC = 0.e0;
    real _t06BD = 0.1e1;
    real _t06BE = 0.e0;
    real _t06BF = 0.e0;
    vec4 _t06C0 = [_t06BC, _t06BD, _t06BE, _t06BF];
    real _t06C1 = 0.e0;
    real _t06C2 = 0.e0;
    real _t06C3 = 0.1e1;
    real _t06C4 = 0.e0;
    vec4 _t06C5 = [_t06C1, _t06C2, _t06C3, _t06C4];
    real _t06C6 = 0.e0;
    real _t06C7 = 0.e0;
    real _t06C8 = 0.e0;
    real _t06C9 = 0.1e1;
    vec4 _t06CA = [_t06C6, _t06C7, _t06C8, _t06C9];
    tensor[4,4] _t06CB = [_t06BB, _t06C0, _t06C5, _t06CA];
    real _t06CC = 0.1e1;
    real _t06CD = 0.e0;
    real _t06CE = 0.e0;
    real _t06CF = 0.e0;
    vec4 _t06D0 = [_t06CC, _t06CD, _t06CE, _t06CF];
    real _t06D1 = 0.e0;
    real _t06D2 = 0.e0;
    real _t06D3 = 0.1e1;
    real _t06D4 = 0.e0;
    vec4 _t06D5 = [_t06D1, _t06D2, _t06D3, _t06D4];
    real _t06D6 = 0.e0;
    real _t06D7 = -0.1e1;
    real _t06D8 = 0.e0;
    real _t06D9 = 0.e0;
    vec4 _t06DA = [_t06D6, _t06D7, _t06D8, _t06D9];
    real _t06DB = 0.e0;
    real _t06DC = 0.e0;
    real _t06DD = 0.e0;
    real _t06DE = 0.1e1;
    vec4 _t06DF = [_t06DB, _t06DC, _t06DD, _t06DE];
    tensor[4,4] _t06E0 = [_t06D0, _t06D5, _t06DA, _t06DF];
    tensor[4,4][4] _t06E1 = {_t06A1, _t06B6, _t06CB, _t06E0};
    real _t06E2 = -0.1e1;
    real _t06E3 = -0.1e1;
    real _t06E4 = 0.57735026919e0;
    real _t06E5 = 0.1e1;
    vec4 _t06E6 = [_t06E2, _t06E3, _t06E4, _t06E5];
    real _t06E7 = 0.1e1;
    real _t06E8 = 0.e0;
    real _t06E9 = 0.57735026919e0;
    real _t06EA = 0.e0;
    vec4 _t06EB = [_t06E7, _t06E8, _t06E9, _t06EA];
    real _t06EC = 0.e0;
    real _t06ED = 0.1e1;
    real _t06EE = 0.57735026919e0;
    real _t06EF = 0.e0;
    vec4 _t06F0 = [_t06EC, _t06ED, _t06EE, _t06EF];
    real _t06F1 = 0.e0;
    real _t06F2 = 0.e0;
    real _t06F3 = 0.e0;
    real _t06F4 = 0.1e1;
    vec4 _t06F5 = [_t06F1, _t06F2, _t06F3, _t06F4];
    tensor[4,4] _t06F6 = [_t06E6, _t06EB, _t06F0, _t06F5];
    real _t06F7 = 0.e0;
    real _t06F8 = 0.e0;
    real _t06F9 = 0.1e1;
    real _t06FA = 0.e0;
    vec4 _t06FB = [_t06F7, _t06F8, _t06F9, _t06FA];
    real _t06FC = 0.1e1;
    real _t06FD = 0.e0;
    real _t06FE = 0.e0;
    real _t06FF = 0.e0;
    vec4 _t0700 = [_t06FC, _t06FD, _t06FE, _t06FF];
    real _t0701 = 0.e0;
    real _t0702 = 0.1e1;
    real _t0703 = 0.e0;
    real _t0704 = 0.e0;
    vec4 _t0705 = [_t0701, _t0702, _t0703, _t0704];
    real _t0706 = 0.e0;
    real _t0707 = 0.e0;
    real _t0708 = 0.e0;
    real _t0709 = 0.1e1;
    vec4 _t070A = [_t0706, _t0707, _t0708, _t0709];
    tensor[4,4] _t070B = [_t06FB, _t0700, _t0705, _t070A];
    real _t070C = 0.1e1;
    real _t070D = 0.e0;
    real _t070E = 0.e0;
    real _t070F = 0.e0;
    vec4 _t0710 = [_t070C, _t070D, _t070E, _t070F];
    real _t0711 = 0.e0;
    real _t0712 = 0.e0;
    real _t0713 = -0.1e1;
    real _t0714 = 0.e0;
    vec4 _t0715 = [_t0711, _t0712, _t0713, _t0714];
    real _t0716 = 0.e0;
    real _t0717 = 0.1e1;
    real _t0718 = 0.e0;
    real _t0719 = 0.e0;
    vec4 _t071A = [_t0716, _t0717, _t0718, _t0719];
    real _t071B = 0.e0;
    real _t071C = 0.e0;
    real _t071D = 0.e0;
    real _t071E = 0.1e1;
    vec4 _t071F = [_t071B, _t071C, _t071D, _t071E];
    tensor[4,4] _t0720 = [_t0710, _t0715, _t071A, _t071F];
    real _t0721 = 0.1e1;
    real _t0722 = 0.e0;
    real _t0723 = 0.e0;
    real _t0724 = 0.e0;
    vec4 _t0725 = [_t0721, _t0722, _t0723, _t0724];
    real _t0726 = 0.e0;
    real _t0727 = 0.1e1;
    real _t0728 = 0.e0;
    real _t0729 = 0.e0;
    vec4 _t072A = [_t0726, _t0727, _t0728, _t0729];
    real _t072B = 0.e0;
    real _t072C = 0.e0;
    real _t072D = 0.1e1;
    real _t072E = 0.e0;
    vec4 _t072F = [_t072B, _t072C, _t072D, _t072E];
    real _t0730 = 0.e0;
    real _t0731 = 0.e0;
    real _t0732 = 0.e0;
    real _t0733 = 0.1e1;
    vec4 _t0734 = [_t0730, _t0731, _t0732, _t0733];
    tensor[4,4] _t0735 = [_t0725, _t072A, _t072F, _t0734];
    tensor[4,4][4] _t0736 = {_t06F6, _t070B, _t0720, _t0735};
    tensor[4,4][4][4] _t0737 = {_t0637, _t068C, _t06E1, _t0736};
    real _t0738 = time05D5[1];
    int _t0739 = prim $r2i01B7 (_t0738);
    tensor[4,4][4] _t073A = prim $sub01C0<tensor[4,4][4]; %4> (_t0737, _t0739);
    real _t073B = time05D5[1];
    int _t073C = prim $r2i01B7 (_t073B);
    int[2] _t073D = func nextCell405D9 (_t073C, cellId05D2, mesh05D1);
    int _t073E = 1;
    int _t073F = prim $sub01C0<int; %2> (_t073D, _t073E);
    tensor[4,4] _t0740 = prim $sub01C0<tensor[4,4]; %4> (_t073A, _t073F);
    real _t0741 = time05D5[0];
    vec3 _t0742 = prim *0036<$[3]> (_t0741, dPos05D4);
    vec3 _t0743 = prim +0017<$[3]> (_t0742, refPos05D3);
    real _t0744 = _t0743[0];
    real _t0745 = time05D5[0];
    vec3 _t0746 = prim *0036<$[3]> (_t0745, dPos05D4);
    vec3 _t0747 = prim +0017<$[3]> (_t0746, refPos05D3);
    real _t0748 = _t0747[1];
    real _t0749 = time05D5[0];
    vec3 _t074A = prim *0036<$[3]> (_t0749, dPos05D4);
    vec3 _t074B = prim +0017<$[3]> (_t074A, refPos05D3);
    real _t074C = _t074B[2];
    real _t074D = 0.1e1;
    vec4 _t074E = [_t0744, _t0748, _t074C, _t074D];
    vec4 _t074F = prim •00CE<$[4,4]; $[4]; $[4]> (_t0740, _t074E);
    real _t0750 = _t074F[0];
    real _t0751 = 0.1e1;
    real _t0752 = 0.e0;
    real _t0753 = 0.e0;
    real _t0754 = 0.e0;
    vec4 _t0755 = [_t0751, _t0752, _t0753, _t0754];
    real _t0756 = 0.e0;
    real _t0757 = 0.1e1;
    real _t0758 = 0.e0;
    real _t0759 = 0.e0;
    vec4 _t075A = [_t0756, _t0757, _t0758, _t0759];
    real _t075B = 0.e0;
    real _t075C = 0.e0;
    real _t075D = 0.1e1;
    real _t075E = 0.e0;
    vec4 _t075F = [_t075B, _t075C, _t075D, _t075E];
    real _t0760 = 0.971445146547e-16;
    real _t0761 = 0.e0;
    real _t0762 = 0.e0;
    real _t0763 = 0.1e1;
    vec4 _t0764 = [_t0760, _t0761, _t0762, _t0763];
    tensor[4,4] _t0765 = [_t0755, _t075A, _t075F, _t0764];
    real _t0766 = 0.57735026919e0;
    real _t0767 = 0.57735026919e0;
    real _t0768 = 0.57735026919e0;
    real _t0769 = -0.57735026919e0;
    vec4 _t076A = [_t0766, _t0767, _t0768, _t0769];
    real _t076B = -0.333333333333e0;
    real _t076C = 0.666666666667e0;
    real _t076D = -0.333333333333e0;
    real _t076E = 0.333333333333e0;
    vec4 _t076F = [_t076B, _t076C, _t076D, _t076E];
    real _t0770 = -0.333333333333e0;
    real _t0771 = -0.333333333333e0;
    real _t0772 = 0.666666666667e0;
    real _t0773 = 0.333333333333e0;
    vec4 _t0774 = [_t0770, _t0771, _t0772, _t0773];
    real _t0775 = 0.971445146547e-16;
    real _t0776 = 0.e0;
    real _t0777 = 0.e0;
    real _t0778 = 0.1e1;
    vec4 _t0779 = [_t0775, _t0776, _t0777, _t0778];
    tensor[4,4] _t077A = [_t076A, _t076F, _t0774, _t0779];
    real _t077B = -0.333333333333e0;
    real _t077C = 0.666666666667e0;
    real _t077D = -0.333333333333e0;
    real _t077E = 0.333333333333e0;
    vec4 _t077F = [_t077B, _t077C, _t077D, _t077E];
    real _t0780 = -0.57735026919e0;
    real _t0781 = -0.57735026919e0;
    real _t0782 = -0.57735026919e0;
    real _t0783 = 0.57735026919e0;
    vec4 _t0784 = [_t0780, _t0781, _t0782, _t0783];
    real _t0785 = -0.333333333333e0;
    real _t0786 = -0.333333333333e0;
    real _t0787 = 0.666666666667e0;
    real _t0788 = 0.333333333333e0;
    vec4 _t0789 = [_t0785, _t0786, _t0787, _t0788];
    real _t078A = 0.971445146547e-16;
    real _t078B = 0.e0;
    real _t078C = 0.e0;
    real _t078D = 0.1e1;
    vec4 _t078E = [_t078A, _t078B, _t078C, _t078D];
    tensor[4,4] _t078F = [_t077F, _t0784, _t0789, _t078E];
    real _t0790 = -0.333333333333e0;
    real _t0791 = 0.666666666667e0;
    real _t0792 = -0.333333333333e0;
    real _t0793 = 0.333333333333e0;
    vec4 _t0794 = [_t0790, _t0791, _t0792, _t0793];
    real _t0795 = -0.333333333333e0;
    real _t0796 = -0.333333333333e0;
    real _t0797 = 0.666666666667e0;
    real _t0798 = 0.333333333333e0;
    vec4 _t0799 = [_t0795, _t0796, _t0797, _t0798];
    real _t079A = 0.57735026919e0;
    real _t079B = 0.57735026919e0;
    real _t079C = 0.57735026919e0;
    real _t079D = -0.57735026919e0;
    vec4 _t079E = [_t079A, _t079B, _t079C, _t079D];
    real _t079F = 0.971445146547e-16;
    real _t07A0 = 0.e0;
    real _t07A1 = 0.e0;
    real _t07A2 = 0.1e1;
    vec4 _t07A3 = [_t079F, _t07A0, _t07A1, _t07A2];
    tensor[4,4] _t07A4 = [_t0794, _t0799, _t079E, _t07A3];
    tensor[4,4][4] _t07A5 = {_t0765, _t077A, _t078F, _t07A4};
    real _t07A6 = 0.57735026919e0;
    real _t07A7 = -0.1e1;
    real _t07A8 = -0.1e1;
    real _t07A9 = 0.1e1;
    vec4 _t07AA = [_t07A6, _t07A7, _t07A8, _t07A9];
    real _t07AB = 0.57735026919e0;
    real _t07AC = 0.1e1;
    real _t07AD = 0.e0;
    real _t07AE = 0.e0;
    vec4 _t07AF = [_t07AB, _t07AC, _t07AD, _t07AE];
    real _t07B0 = 0.57735026919e0;
    real _t07B1 = 0.e0;
    real _t07B2 = 0.1e1;
    real _t07B3 = 0.e0;
    vec4 _t07B4 = [_t07B0, _t07B1, _t07B2, _t07B3];
    real _t07B5 = 0.e0;
    real _t07B6 = 0.e0;
    real _t07B7 = 0.e0;
    real _t07B8 = 0.1e1;
    vec4 _t07B9 = [_t07B5, _t07B6, _t07B7, _t07B8];
    tensor[4,4] _t07BA = [_t07AA, _t07AF, _t07B4, _t07B9];
    real _t07BB = 0.1e1;
    real _t07BC = 0.e0;
    real _t07BD = 0.e0;
    real _t07BE = 0.e0;
    vec4 _t07BF = [_t07BB, _t07BC, _t07BD, _t07BE];
    real _t07C0 = 0.e0;
    real _t07C1 = 0.1e1;
    real _t07C2 = 0.e0;
    real _t07C3 = 0.e0;
    vec4 _t07C4 = [_t07C0, _t07C1, _t07C2, _t07C3];
    real _t07C5 = 0.e0;
    real _t07C6 = 0.e0;
    real _t07C7 = 0.1e1;
    real _t07C8 = 0.e0;
    vec4 _t07C9 = [_t07C5, _t07C6, _t07C7, _t07C8];
    real _t07CA = 0.e0;
    real _t07CB = 0.e0;
    real _t07CC = 0.e0;
    real _t07CD = 0.1e1;
    vec4 _t07CE = [_t07CA, _t07CB, _t07CC, _t07CD];
    tensor[4,4] _t07CF = [_t07BF, _t07C4, _t07C9, _t07CE];
    real _t07D0 = 0.e0;
    real _t07D1 = 0.1e1;
    real _t07D2 = 0.e0;
    real _t07D3 = 0.e0;
    vec4 _t07D4 = [_t07D0, _t07D1, _t07D2, _t07D3];
    real _t07D5 = -0.1e1;
    real _t07D6 = 0.e0;
    real _t07D7 = 0.e0;
    real _t07D8 = 0.e0;
    vec4 _t07D9 = [_t07D5, _t07D6, _t07D7, _t07D8];
    real _t07DA = 0.e0;
    real _t07DB = 0.e0;
    real _t07DC = 0.1e1;
    real _t07DD = 0.e0;
    vec4 _t07DE = [_t07DA, _t07DB, _t07DC, _t07DD];
    real _t07DF = 0.e0;
    real _t07E0 = 0.e0;
    real _t07E1 = 0.e0;
    real _t07E2 = 0.1e1;
    vec4 _t07E3 = [_t07DF, _t07E0, _t07E1, _t07E2];
    tensor[4,4] _t07E4 = [_t07D4, _t07D9, _t07DE, _t07E3];
    real _t07E5 = 0.e0;
    real _t07E6 = 0.1e1;
    real _t07E7 = 0.e0;
    real _t07E8 = 0.e0;
    vec4 _t07E9 = [_t07E5, _t07E6, _t07E7, _t07E8];
    real _t07EA = 0.e0;
    real _t07EB = 0.e0;
    real _t07EC = 0.1e1;
    real _t07ED = 0.e0;
    vec4 _t07EE = [_t07EA, _t07EB, _t07EC, _t07ED];
    real _t07EF = 0.1e1;
    real _t07F0 = 0.e0;
    real _t07F1 = 0.e0;
    real _t07F2 = 0.e0;
    vec4 _t07F3 = [_t07EF, _t07F0, _t07F1, _t07F2];
    real _t07F4 = 0.e0;
    real _t07F5 = 0.e0;
    real _t07F6 = 0.e0;
    real _t07F7 = 0.1e1;
    vec4 _t07F8 = [_t07F4, _t07F5, _t07F6, _t07F7];
    tensor[4,4] _t07F9 = [_t07E9, _t07EE, _t07F3, _t07F8];
    tensor[4,4][4] _t07FA = {_t07BA, _t07CF, _t07E4, _t07F9};
    real _t07FB = -0.1e1;
    real _t07FC = -0.57735026919e0;
    real _t07FD = -0.1e1;
    real _t07FE = 0.1e1;
    vec4 _t07FF = [_t07FB, _t07FC, _t07FD, _t07FE];
    real _t0800 = 0.1e1;
    real _t0801 = -0.57735026919e0;
    real _t0802 = 0.e0;
    real _t0803 = 0.e0;
    vec4 _t0804 = [_t0800, _t0801, _t0802, _t0803];
    real _t0805 = 0.e0;
    real _t0806 = -0.57735026919e0;
    real _t0807 = 0.1e1;
    real _t0808 = 0.e0;
    vec4 _t0809 = [_t0805, _t0806, _t0807, _t0808];
    real _t080A = 0.e0;
    real _t080B = 0.e0;
    real _t080C = 0.e0;
    real _t080D = 0.1e1;
    vec4 _t080E = [_t080A, _t080B, _t080C, _t080D];
    tensor[4,4] _t080F = [_t07FF, _t0804, _t0809, _t080E];
    real _t0810 = 0.e0;
    real _t0811 = -0.1e1;
    real _t0812 = 0.e0;
    real _t0813 = 0.e0;
    vec4 _t0814 = [_t0810, _t0811, _t0812, _t0813];
    real _t0815 = 0.1e1;
    real _t0816 = 0.e0;
    real _t0817 = 0.e0;
    real _t0818 = 0.e0;
    vec4 _t0819 = [_t0815, _t0816, _t0817, _t0818];
    real _t081A = 0.e0;
    real _t081B = 0.e0;
    real _t081C = 0.1e1;
    real _t081D = 0.e0;
    vec4 _t081E = [_t081A, _t081B, _t081C, _t081D];
    real _t081F = 0.e0;
    real _t0820 = 0.e0;
    real _t0821 = 0.e0;
    real _t0822 = 0.1e1;
    vec4 _t0823 = [_t081F, _t0820, _t0821, _t0822];
    tensor[4,4] _t0824 = [_t0814, _t0819, _t081E, _t0823];
    real _t0825 = 0.1e1;
    real _t0826 = 0.e0;
    real _t0827 = 0.e0;
    real _t0828 = 0.e0;
    vec4 _t0829 = [_t0825, _t0826, _t0827, _t0828];
    real _t082A = 0.e0;
    real _t082B = 0.1e1;
    real _t082C = 0.e0;
    real _t082D = 0.e0;
    vec4 _t082E = [_t082A, _t082B, _t082C, _t082D];
    real _t082F = 0.e0;
    real _t0830 = 0.e0;
    real _t0831 = 0.1e1;
    real _t0832 = 0.e0;
    vec4 _t0833 = [_t082F, _t0830, _t0831, _t0832];
    real _t0834 = 0.e0;
    real _t0835 = 0.e0;
    real _t0836 = 0.e0;
    real _t0837 = 0.1e1;
    vec4 _t0838 = [_t0834, _t0835, _t0836, _t0837];
    tensor[4,4] _t0839 = [_t0829, _t082E, _t0833, _t0838];
    real _t083A = 0.1e1;
    real _t083B = 0.e0;
    real _t083C = 0.e0;
    real _t083D = 0.e0;
    vec4 _t083E = [_t083A, _t083B, _t083C, _t083D];
    real _t083F = 0.e0;
    real _t0840 = 0.e0;
    real _t0841 = 0.1e1;
    real _t0842 = 0.e0;
    vec4 _t0843 = [_t083F, _t0840, _t0841, _t0842];
    real _t0844 = 0.e0;
    real _t0845 = -0.1e1;
    real _t0846 = 0.e0;
    real _t0847 = 0.e0;
    vec4 _t0848 = [_t0844, _t0845, _t0846, _t0847];
    real _t0849 = 0.e0;
    real _t084A = 0.e0;
    real _t084B = 0.e0;
    real _t084C = 0.1e1;
    vec4 _t084D = [_t0849, _t084A, _t084B, _t084C];
    tensor[4,4] _t084E = [_t083E, _t0843, _t0848, _t084D];
    tensor[4,4][4] _t084F = {_t080F, _t0824, _t0839, _t084E};
    real _t0850 = -0.1e1;
    real _t0851 = -0.1e1;
    real _t0852 = 0.57735026919e0;
    real _t0853 = 0.1e1;
    vec4 _t0854 = [_t0850, _t0851, _t0852, _t0853];
    real _t0855 = 0.1e1;
    real _t0856 = 0.e0;
    real _t0857 = 0.57735026919e0;
    real _t0858 = 0.e0;
    vec4 _t0859 = [_t0855, _t0856, _t0857, _t0858];
    real _t085A = 0.e0;
    real _t085B = 0.1e1;
    real _t085C = 0.57735026919e0;
    real _t085D = 0.e0;
    vec4 _t085E = [_t085A, _t085B, _t085C, _t085D];
    real _t085F = 0.e0;
    real _t0860 = 0.e0;
    real _t0861 = 0.e0;
    real _t0862 = 0.1e1;
    vec4 _t0863 = [_t085F, _t0860, _t0861, _t0862];
    tensor[4,4] _t0864 = [_t0854, _t0859, _t085E, _t0863];
    real _t0865 = 0.e0;
    real _t0866 = 0.e0;
    real _t0867 = 0.1e1;
    real _t0868 = 0.e0;
    vec4 _t0869 = [_t0865, _t0866, _t0867, _t0868];
    real _t086A = 0.1e1;
    real _t086B = 0.e0;
    real _t086C = 0.e0;
    real _t086D = 0.e0;
    vec4 _t086E = [_t086A, _t086B, _t086C, _t086D];
    real _t086F = 0.e0;
    real _t0870 = 0.1e1;
    real _t0871 = 0.e0;
    real _t0872 = 0.e0;
    vec4 _t0873 = [_t086F, _t0870, _t0871, _t0872];
    real _t0874 = 0.e0;
    real _t0875 = 0.e0;
    real _t0876 = 0.e0;
    real _t0877 = 0.1e1;
    vec4 _t0878 = [_t0874, _t0875, _t0876, _t0877];
    tensor[4,4] _t0879 = [_t0869, _t086E, _t0873, _t0878];
    real _t087A = 0.1e1;
    real _t087B = 0.e0;
    real _t087C = 0.e0;
    real _t087D = 0.e0;
    vec4 _t087E = [_t087A, _t087B, _t087C, _t087D];
    real _t087F = 0.e0;
    real _t0880 = 0.e0;
    real _t0881 = -0.1e1;
    real _t0882 = 0.e0;
    vec4 _t0883 = [_t087F, _t0880, _t0881, _t0882];
    real _t0884 = 0.e0;
    real _t0885 = 0.1e1;
    real _t0886 = 0.e0;
    real _t0887 = 0.e0;
    vec4 _t0888 = [_t0884, _t0885, _t0886, _t0887];
    real _t0889 = 0.e0;
    real _t088A = 0.e0;
    real _t088B = 0.e0;
    real _t088C = 0.1e1;
    vec4 _t088D = [_t0889, _t088A, _t088B, _t088C];
    tensor[4,4] _t088E = [_t087E, _t0883, _t0888, _t088D];
    real _t088F = 0.1e1;
    real _t0890 = 0.e0;
    real _t0891 = 0.e0;
    real _t0892 = 0.e0;
    vec4 _t0893 = [_t088F, _t0890, _t0891, _t0892];
    real _t0894 = 0.e0;
    real _t0895 = 0.1e1;
    real _t0896 = 0.e0;
    real _t0897 = 0.e0;
    vec4 _t0898 = [_t0894, _t0895, _t0896, _t0897];
    real _t0899 = 0.e0;
    real _t089A = 0.e0;
    real _t089B = 0.1e1;
    real _t089C = 0.e0;
    vec4 _t089D = [_t0899, _t089A, _t089B, _t089C];
    real _t089E = 0.e0;
    real _t089F = 0.e0;
    real _t08A0 = 0.e0;
    real _t08A1 = 0.1e1;
    vec4 _t08A2 = [_t089E, _t089F, _t08A0, _t08A1];
    tensor[4,4] _t08A3 = [_t0893, _t0898, _t089D, _t08A2];
    tensor[4,4][4] _t08A4 = {_t0864, _t0879, _t088E, _t08A3};
    tensor[4,4][4][4] _t08A5 = {_t07A5, _t07FA, _t084F, _t08A4};
    real _t08A6 = time05D5[1];
    int _t08A7 = prim $r2i01B7 (_t08A6);
    tensor[4,4][4] _t08A8 = prim $sub01C0<tensor[4,4][4]; %4> (_t08A5, _t08A7);
    real _t08A9 = time05D5[1];
    int _t08AA = prim $r2i01B7 (_t08A9);
    int[2] _t08AB = func nextCell405D9 (_t08AA, cellId05D2, mesh05D1);
    int _t08AC = 1;
    int _t08AD = prim $sub01C0<int; %2> (_t08AB, _t08AC);
    tensor[4,4] _t08AE = prim $sub01C0<tensor[4,4]; %4> (_t08A8, _t08AD);
    real _t08AF = time05D5[0];
    vec3 _t08B0 = prim *0036<$[3]> (_t08AF, dPos05D4);
    vec3 _t08B1 = prim +0017<$[3]> (_t08B0, refPos05D3);
    real _t08B2 = _t08B1[0];
    real _t08B3 = time05D5[0];
    vec3 _t08B4 = prim *0036<$[3]> (_t08B3, dPos05D4);
    vec3 _t08B5 = prim +0017<$[3]> (_t08B4, refPos05D3);
    real _t08B6 = _t08B5[1];
    real _t08B7 = time05D5[0];
    vec3 _t08B8 = prim *0036<$[3]> (_t08B7, dPos05D4);
    vec3 _t08B9 = prim +0017<$[3]> (_t08B8, refPos05D3);
    real _t08BA = _t08B9[2];
    real _t08BB = 0.1e1;
    vec4 _t08BC = [_t08B2, _t08B6, _t08BA, _t08BB];
    vec4 _t08BD = prim •00CE<$[4,4]; $[4]; $[4]> (_t08AE, _t08BC);
    real _t08BE = _t08BD[1];
    real _t08BF = 0.1e1;
    real _t08C0 = 0.e0;
    real _t08C1 = 0.e0;
    real _t08C2 = 0.e0;
    vec4 _t08C3 = [_t08BF, _t08C0, _t08C1, _t08C2];
    real _t08C4 = 0.e0;
    real _t08C5 = 0.1e1;
    real _t08C6 = 0.e0;
    real _t08C7 = 0.e0;
    vec4 _t08C8 = [_t08C4, _t08C5, _t08C6, _t08C7];
    real _t08C9 = 0.e0;
    real _t08CA = 0.e0;
    real _t08CB = 0.1e1;
    real _t08CC = 0.e0;
    vec4 _t08CD = [_t08C9, _t08CA, _t08CB, _t08CC];
    real _t08CE = 0.971445146547e-16;
    real _t08CF = 0.e0;
    real _t08D0 = 0.e0;
    real _t08D1 = 0.1e1;
    vec4 _t08D2 = [_t08CE, _t08CF, _t08D0, _t08D1];
    tensor[4,4] _t08D3 = [_t08C3, _t08C8, _t08CD, _t08D2];
    real _t08D4 = 0.57735026919e0;
    real _t08D5 = 0.57735026919e0;
    real _t08D6 = 0.57735026919e0;
    real _t08D7 = -0.57735026919e0;
    vec4 _t08D8 = [_t08D4, _t08D5, _t08D6, _t08D7];
    real _t08D9 = -0.333333333333e0;
    real _t08DA = 0.666666666667e0;
    real _t08DB = -0.333333333333e0;
    real _t08DC = 0.333333333333e0;
    vec4 _t08DD = [_t08D9, _t08DA, _t08DB, _t08DC];
    real _t08DE = -0.333333333333e0;
    real _t08DF = -0.333333333333e0;
    real _t08E0 = 0.666666666667e0;
    real _t08E1 = 0.333333333333e0;
    vec4 _t08E2 = [_t08DE, _t08DF, _t08E0, _t08E1];
    real _t08E3 = 0.971445146547e-16;
    real _t08E4 = 0.e0;
    real _t08E5 = 0.e0;
    real _t08E6 = 0.1e1;
    vec4 _t08E7 = [_t08E3, _t08E4, _t08E5, _t08E6];
    tensor[4,4] _t08E8 = [_t08D8, _t08DD, _t08E2, _t08E7];
    real _t08E9 = -0.333333333333e0;
    real _t08EA = 0.666666666667e0;
    real _t08EB = -0.333333333333e0;
    real _t08EC = 0.333333333333e0;
    vec4 _t08ED = [_t08E9, _t08EA, _t08EB, _t08EC];
    real _t08EE = -0.57735026919e0;
    real _t08EF = -0.57735026919e0;
    real _t08F0 = -0.57735026919e0;
    real _t08F1 = 0.57735026919e0;
    vec4 _t08F2 = [_t08EE, _t08EF, _t08F0, _t08F1];
    real _t08F3 = -0.333333333333e0;
    real _t08F4 = -0.333333333333e0;
    real _t08F5 = 0.666666666667e0;
    real _t08F6 = 0.333333333333e0;
    vec4 _t08F7 = [_t08F3, _t08F4, _t08F5, _t08F6];
    real _t08F8 = 0.971445146547e-16;
    real _t08F9 = 0.e0;
    real _t08FA = 0.e0;
    real _t08FB = 0.1e1;
    vec4 _t08FC = [_t08F8, _t08F9, _t08FA, _t08FB];
    tensor[4,4] _t08FD = [_t08ED, _t08F2, _t08F7, _t08FC];
    real _t08FE = -0.333333333333e0;
    real _t08FF = 0.666666666667e0;
    real _t0900 = -0.333333333333e0;
    real _t0901 = 0.333333333333e0;
    vec4 _t0902 = [_t08FE, _t08FF, _t0900, _t0901];
    real _t0903 = -0.333333333333e0;
    real _t0904 = -0.333333333333e0;
    real _t0905 = 0.666666666667e0;
    real _t0906 = 0.333333333333e0;
    vec4 _t0907 = [_t0903, _t0904, _t0905, _t0906];
    real _t0908 = 0.57735026919e0;
    real _t0909 = 0.57735026919e0;
    real _t090A = 0.57735026919e0;
    real _t090B = -0.57735026919e0;
    vec4 _t090C = [_t0908, _t0909, _t090A, _t090B];
    real _t090D = 0.971445146547e-16;
    real _t090E = 0.e0;
    real _t090F = 0.e0;
    real _t0910 = 0.1e1;
    vec4 _t0911 = [_t090D, _t090E, _t090F, _t0910];
    tensor[4,4] _t0912 = [_t0902, _t0907, _t090C, _t0911];
    tensor[4,4][4] _t0913 = {_t08D3, _t08E8, _t08FD, _t0912};
    real _t0914 = 0.57735026919e0;
    real _t0915 = -0.1e1;
    real _t0916 = -0.1e1;
    real _t0917 = 0.1e1;
    vec4 _t0918 = [_t0914, _t0915, _t0916, _t0917];
    real _t0919 = 0.57735026919e0;
    real _t091A = 0.1e1;
    real _t091B = 0.e0;
    real _t091C = 0.e0;
    vec4 _t091D = [_t0919, _t091A, _t091B, _t091C];
    real _t091E = 0.57735026919e0;
    real _t091F = 0.e0;
    real _t0920 = 0.1e1;
    real _t0921 = 0.e0;
    vec4 _t0922 = [_t091E, _t091F, _t0920, _t0921];
    real _t0923 = 0.e0;
    real _t0924 = 0.e0;
    real _t0925 = 0.e0;
    real _t0926 = 0.1e1;
    vec4 _t0927 = [_t0923, _t0924, _t0925, _t0926];
    tensor[4,4] _t0928 = [_t0918, _t091D, _t0922, _t0927];
    real _t0929 = 0.1e1;
    real _t092A = 0.e0;
    real _t092B = 0.e0;
    real _t092C = 0.e0;
    vec4 _t092D = [_t0929, _t092A, _t092B, _t092C];
    real _t092E = 0.e0;
    real _t092F = 0.1e1;
    real _t0930 = 0.e0;
    real _t0931 = 0.e0;
    vec4 _t0932 = [_t092E, _t092F, _t0930, _t0931];
    real _t0933 = 0.e0;
    real _t0934 = 0.e0;
    real _t0935 = 0.1e1;
    real _t0936 = 0.e0;
    vec4 _t0937 = [_t0933, _t0934, _t0935, _t0936];
    real _t0938 = 0.e0;
    real _t0939 = 0.e0;
    real _t093A = 0.e0;
    real _t093B = 0.1e1;
    vec4 _t093C = [_t0938, _t0939, _t093A, _t093B];
    tensor[4,4] _t093D = [_t092D, _t0932, _t0937, _t093C];
    real _t093E = 0.e0;
    real _t093F = 0.1e1;
    real _t0940 = 0.e0;
    real _t0941 = 0.e0;
    vec4 _t0942 = [_t093E, _t093F, _t0940, _t0941];
    real _t0943 = -0.1e1;
    real _t0944 = 0.e0;
    real _t0945 = 0.e0;
    real _t0946 = 0.e0;
    vec4 _t0947 = [_t0943, _t0944, _t0945, _t0946];
    real _t0948 = 0.e0;
    real _t0949 = 0.e0;
    real _t094A = 0.1e1;
    real _t094B = 0.e0;
    vec4 _t094C = [_t0948, _t0949, _t094A, _t094B];
    real _t094D = 0.e0;
    real _t094E = 0.e0;
    real _t094F = 0.e0;
    real _t0950 = 0.1e1;
    vec4 _t0951 = [_t094D, _t094E, _t094F, _t0950];
    tensor[4,4] _t0952 = [_t0942, _t0947, _t094C, _t0951];
    real _t0953 = 0.e0;
    real _t0954 = 0.1e1;
    real _t0955 = 0.e0;
    real _t0956 = 0.e0;
    vec4 _t0957 = [_t0953, _t0954, _t0955, _t0956];
    real _t0958 = 0.e0;
    real _t0959 = 0.e0;
    real _t095A = 0.1e1;
    real _t095B = 0.e0;
    vec4 _t095C = [_t0958, _t0959, _t095A, _t095B];
    real _t095D = 0.1e1;
    real _t095E = 0.e0;
    real _t095F = 0.e0;
    real _t0960 = 0.e0;
    vec4 _t0961 = [_t095D, _t095E, _t095F, _t0960];
    real _t0962 = 0.e0;
    real _t0963 = 0.e0;
    real _t0964 = 0.e0;
    real _t0965 = 0.1e1;
    vec4 _t0966 = [_t0962, _t0963, _t0964, _t0965];
    tensor[4,4] _t0967 = [_t0957, _t095C, _t0961, _t0966];
    tensor[4,4][4] _t0968 = {_t0928, _t093D, _t0952, _t0967};
    real _t0969 = -0.1e1;
    real _t096A = -0.57735026919e0;
    real _t096B = -0.1e1;
    real _t096C = 0.1e1;
    vec4 _t096D = [_t0969, _t096A, _t096B, _t096C];
    real _t096E = 0.1e1;
    real _t096F = -0.57735026919e0;
    real _t0970 = 0.e0;
    real _t0971 = 0.e0;
    vec4 _t0972 = [_t096E, _t096F, _t0970, _t0971];
    real _t0973 = 0.e0;
    real _t0974 = -0.57735026919e0;
    real _t0975 = 0.1e1;
    real _t0976 = 0.e0;
    vec4 _t0977 = [_t0973, _t0974, _t0975, _t0976];
    real _t0978 = 0.e0;
    real _t0979 = 0.e0;
    real _t097A = 0.e0;
    real _t097B = 0.1e1;
    vec4 _t097C = [_t0978, _t0979, _t097A, _t097B];
    tensor[4,4] _t097D = [_t096D, _t0972, _t0977, _t097C];
    real _t097E = 0.e0;
    real _t097F = -0.1e1;
    real _t0980 = 0.e0;
    real _t0981 = 0.e0;
    vec4 _t0982 = [_t097E, _t097F, _t0980, _t0981];
    real _t0983 = 0.1e1;
    real _t0984 = 0.e0;
    real _t0985 = 0.e0;
    real _t0986 = 0.e0;
    vec4 _t0987 = [_t0983, _t0984, _t0985, _t0986];
    real _t0988 = 0.e0;
    real _t0989 = 0.e0;
    real _t098A = 0.1e1;
    real _t098B = 0.e0;
    vec4 _t098C = [_t0988, _t0989, _t098A, _t098B];
    real _t098D = 0.e0;
    real _t098E = 0.e0;
    real _t098F = 0.e0;
    real _t0990 = 0.1e1;
    vec4 _t0991 = [_t098D, _t098E, _t098F, _t0990];
    tensor[4,4] _t0992 = [_t0982, _t0987, _t098C, _t0991];
    real _t0993 = 0.1e1;
    real _t0994 = 0.e0;
    real _t0995 = 0.e0;
    real _t0996 = 0.e0;
    vec4 _t0997 = [_t0993, _t0994, _t0995, _t0996];
    real _t0998 = 0.e0;
    real _t0999 = 0.1e1;
    real _t099A = 0.e0;
    real _t099B = 0.e0;
    vec4 _t099C = [_t0998, _t0999, _t099A, _t099B];
    real _t099D = 0.e0;
    real _t099E = 0.e0;
    real _t099F = 0.1e1;
    real _t09A0 = 0.e0;
    vec4 _t09A1 = [_t099D, _t099E, _t099F, _t09A0];
    real _t09A2 = 0.e0;
    real _t09A3 = 0.e0;
    real _t09A4 = 0.e0;
    real _t09A5 = 0.1e1;
    vec4 _t09A6 = [_t09A2, _t09A3, _t09A4, _t09A5];
    tensor[4,4] _t09A7 = [_t0997, _t099C, _t09A1, _t09A6];
    real _t09A8 = 0.1e1;
    real _t09A9 = 0.e0;
    real _t09AA = 0.e0;
    real _t09AB = 0.e0;
    vec4 _t09AC = [_t09A8, _t09A9, _t09AA, _t09AB];
    real _t09AD = 0.e0;
    real _t09AE = 0.e0;
    real _t09AF = 0.1e1;
    real _t09B0 = 0.e0;
    vec4 _t09B1 = [_t09AD, _t09AE, _t09AF, _t09B0];
    real _t09B2 = 0.e0;
    real _t09B3 = -0.1e1;
    real _t09B4 = 0.e0;
    real _t09B5 = 0.e0;
    vec4 _t09B6 = [_t09B2, _t09B3, _t09B4, _t09B5];
    real _t09B7 = 0.e0;
    real _t09B8 = 0.e0;
    real _t09B9 = 0.e0;
    real _t09BA = 0.1e1;
    vec4 _t09BB = [_t09B7, _t09B8, _t09B9, _t09BA];
    tensor[4,4] _t09BC = [_t09AC, _t09B1, _t09B6, _t09BB];
    tensor[4,4][4] _t09BD = {_t097D, _t0992, _t09A7, _t09BC};
    real _t09BE = -0.1e1;
    real _t09BF = -0.1e1;
    real _t09C0 = 0.57735026919e0;
    real _t09C1 = 0.1e1;
    vec4 _t09C2 = [_t09BE, _t09BF, _t09C0, _t09C1];
    real _t09C3 = 0.1e1;
    real _t09C4 = 0.e0;
    real _t09C5 = 0.57735026919e0;
    real _t09C6 = 0.e0;
    vec4 _t09C7 = [_t09C3, _t09C4, _t09C5, _t09C6];
    real _t09C8 = 0.e0;
    real _t09C9 = 0.1e1;
    real _t09CA = 0.57735026919e0;
    real _t09CB = 0.e0;
    vec4 _t09CC = [_t09C8, _t09C9, _t09CA, _t09CB];
    real _t09CD = 0.e0;
    real _t09CE = 0.e0;
    real _t09CF = 0.e0;
    real _t09D0 = 0.1e1;
    vec4 _t09D1 = [_t09CD, _t09CE, _t09CF, _t09D0];
    tensor[4,4] _t09D2 = [_t09C2, _t09C7, _t09CC, _t09D1];
    real _t09D3 = 0.e0;
    real _t09D4 = 0.e0;
    real _t09D5 = 0.1e1;
    real _t09D6 = 0.e0;
    vec4 _t09D7 = [_t09D3, _t09D4, _t09D5, _t09D6];
    real _t09D8 = 0.1e1;
    real _t09D9 = 0.e0;
    real _t09DA = 0.e0;
    real _t09DB = 0.e0;
    vec4 _t09DC = [_t09D8, _t09D9, _t09DA, _t09DB];
    real _t09DD = 0.e0;
    real _t09DE = 0.1e1;
    real _t09DF = 0.e0;
    real _t09E0 = 0.e0;
    vec4 _t09E1 = [_t09DD, _t09DE, _t09DF, _t09E0];
    real _t09E2 = 0.e0;
    real _t09E3 = 0.e0;
    real _t09E4 = 0.e0;
    real _t09E5 = 0.1e1;
    vec4 _t09E6 = [_t09E2, _t09E3, _t09E4, _t09E5];
    tensor[4,4] _t09E7 = [_t09D7, _t09DC, _t09E1, _t09E6];
    real _t09E8 = 0.1e1;
    real _t09E9 = 0.e0;
    real _t09EA = 0.e0;
    real _t09EB = 0.e0;
    vec4 _t09EC = [_t09E8, _t09E9, _t09EA, _t09EB];
    real _t09ED = 0.e0;
    real _t09EE = 0.e0;
    real _t09EF = -0.1e1;
    real _t09F0 = 0.e0;
    vec4 _t09F1 = [_t09ED, _t09EE, _t09EF, _t09F0];
    real _t09F2 = 0.e0;
    real _t09F3 = 0.1e1;
    real _t09F4 = 0.e0;
    real _t09F5 = 0.e0;
    vec4 _t09F6 = [_t09F2, _t09F3, _t09F4, _t09F5];
    real _t09F7 = 0.e0;
    real _t09F8 = 0.e0;
    real _t09F9 = 0.e0;
    real _t09FA = 0.1e1;
    vec4 _t09FB = [_t09F7, _t09F8, _t09F9, _t09FA];
    tensor[4,4] _t09FC = [_t09EC, _t09F1, _t09F6, _t09FB];
    real _t09FD = 0.1e1;
    real _t09FE = 0.e0;
    real _t09FF = 0.e0;
    real _t0A00 = 0.e0;
    vec4 _t0A01 = [_t09FD, _t09FE, _t09FF, _t0A00];
    real _t0A02 = 0.e0;
    real _t0A03 = 0.1e1;
    real _t0A04 = 0.e0;
    real _t0A05 = 0.e0;
    vec4 _t0A06 = [_t0A02, _t0A03, _t0A04, _t0A05];
    real _t0A07 = 0.e0;
    real _t0A08 = 0.e0;
    real _t0A09 = 0.1e1;
    real _t0A0A = 0.e0;
    vec4 _t0A0B = [_t0A07, _t0A08, _t0A09, _t0A0A];
    real _t0A0C = 0.e0;
    real _t0A0D = 0.e0;
    real _t0A0E = 0.e0;
    real _t0A0F = 0.1e1;
    vec4 _t0A10 = [_t0A0C, _t0A0D, _t0A0E, _t0A0F];
    tensor[4,4] _t0A11 = [_t0A01, _t0A06, _t0A0B, _t0A10];
    tensor[4,4][4] _t0A12 = {_t09D2, _t09E7, _t09FC, _t0A11};
    tensor[4,4][4][4] _t0A13 = {_t0913, _t0968, _t09BD, _t0A12};
    real _t0A14 = time05D5[1];
    int _t0A15 = prim $r2i01B7 (_t0A14);
    tensor[4,4][4] _t0A16 = prim $sub01C0<tensor[4,4][4]; %4> (_t0A13, _t0A15);
    real _t0A17 = time05D5[1];
    int _t0A18 = prim $r2i01B7 (_t0A17);
    int[2] _t0A19 = func nextCell405D9 (_t0A18, cellId05D2, mesh05D1);
    int _t0A1A = 1;
    int _t0A1B = prim $sub01C0<int; %2> (_t0A19, _t0A1A);
    tensor[4,4] _t0A1C = prim $sub01C0<tensor[4,4]; %4> (_t0A16, _t0A1B);
    real _t0A1D = time05D5[0];
    vec3 _t0A1E = prim *0036<$[3]> (_t0A1D, dPos05D4);
    vec3 _t0A1F = prim +0017<$[3]> (_t0A1E, refPos05D3);
    real _t0A20 = _t0A1F[0];
    real _t0A21 = time05D5[0];
    vec3 _t0A22 = prim *0036<$[3]> (_t0A21, dPos05D4);
    vec3 _t0A23 = prim +0017<$[3]> (_t0A22, refPos05D3);
    real _t0A24 = _t0A23[1];
    real _t0A25 = time05D5[0];
    vec3 _t0A26 = prim *0036<$[3]> (_t0A25, dPos05D4);
    vec3 _t0A27 = prim +0017<$[3]> (_t0A26, refPos05D3);
    real _t0A28 = _t0A27[2];
    real _t0A29 = 0.1e1;
    vec4 _t0A2A = [_t0A20, _t0A24, _t0A28, _t0A29];
    vec4 _t0A2B = prim •00CE<$[4,4]; $[4]; $[4]> (_t0A1C, _t0A2A);
    real _t0A2C = _t0A2B[2];
    vec3 _t0A2D = [_t0750, _t08BE, _t0A2C];
    real _t0A2E = time05D5[1];
    int _t0A2F = prim $r2i01B7 (_t0A2E);
    int[2] _t0A30 = func nextCell405D9 (_t0A2F, cellId05D2, mesh05D1);
    int _t0A31 = 1;
    int _t0A32 = prim $sub01C0<int; %2> (_t0A30, _t0A31);
    Femdata: MeshPos _t0A33 = extractFemItemN((mesh05D1, _t05E2, _t0A2D, _t0A32),RefBuild(Mesh),);
    return _t0A33;
  } else {
    real _t0A34 = time05D5[0];
    vec3 _t0A35 = prim *0036<$[3]> (_t0A34, dPos05D4);
    vec3 _t0A36 = prim +0017<$[3]> (_t0A35, refPos05D3);
    Femdata: MeshPos _t0A37 = extractFemItemN((mesh05D1, _t0A36),InvalidBuildBoundary(MeshPos),);
    return _t0A37;
  }
}
function int[2]#6 nextCell405D9 (int faceIdx0A38, int cell0A39, Femdata: Mesh mesh0A3A)
{
  int _t0A3B = -1;
  bool _t0A3C = prim ==0082 (faceIdx0A38, _t0A3B);
  if _t0A3C {
    int _t0A3D = -1;
    int _t0A3E = -1;
    int[2] _t0A3F = {_t0A3D, _t0A3E};
    return _t0A3F;
  } else {
    int _t0A40 = 8;
    int _t0A41 = prim *0033 (cell0A39, _t0A40);
    int _t0A42 = 2;
    int _t0A43 = prim *0033 (faceIdx0A38, _t0A42);
    int _t0A44 = prim +0015 (_t0A41, _t0A43);
    int[2] _t0A45 = extractFemItemN((mesh0A3A, _t0A44),CellFaceCell(Mesh),);
    return _t0A45;
  }
}
function vec2#0 _enter0A46 (vec3 refPos0A47, vec3 dPos0A48)
{
  real time0A49 = +inf;
  int face0A4A = -1;
  real faceTime0A4B = -inf;
  real _t0A4C = 0.57735026919e0;
  real _t0A4D = 0.57735026919e0;
  real _t0A4E = 0.57735026919e0;
  real _t0A4F = 0.57735026919e0;
  vec3 _t0A50 = [_t0A4D, _t0A4E, _t0A4F];
  real _t0A51 = prim •00CE<$[3]; $[3]; $[]> (_t0A50, refPos0A47);
  real _t0A52 = prim -0026<$[]> (_t0A4C, _t0A51);
  real _t0A53 = 0.57735026919e0;
  real _t0A54 = 0.57735026919e0;
  real _t0A55 = 0.57735026919e0;
  vec3 _t0A56 = [_t0A53, _t0A54, _t0A55];
  real _t0A57 = prim •00CE<$[3]; $[3]; $[]> (_t0A56, dPos0A48);
  real _t0A58 = prim /0055 (_t0A52, _t0A57);
  real _t0A59 = -0.1e-7;
  bool _t0A5A = prim >=007E (_t0A58, _t0A59);
  real _t0A5B = 0.57735026919e0;
  real _t0A5C = 0.57735026919e0;
  real _t0A5D = 0.57735026919e0;
  real _t0A5E = 0.57735026919e0;
  vec3 _t0A5F = [_t0A5C, _t0A5D, _t0A5E];
  real _t0A60 = prim •00CE<$[3]; $[3]; $[]> (_t0A5F, refPos0A47);
  real _t0A61 = prim -0026<$[]> (_t0A5B, _t0A60);
  real _t0A62 = 0.57735026919e0;
  real _t0A63 = 0.57735026919e0;
  real _t0A64 = 0.57735026919e0;
  vec3 _t0A65 = [_t0A62, _t0A63, _t0A64];
  real _t0A66 = prim •00CE<$[3]; $[3]; $[]> (_t0A65, dPos0A48);
  real _t0A67 = prim /0055 (_t0A61, _t0A66);
  bool _t0A68 = prim >0080 (time0A49, _t0A67);
  real _t0A69 = 0.57735026919e0;
  real _t0A6A = 0.57735026919e0;
  real _t0A6B = 0.57735026919e0;
  vec3 _t0A6C = [_t0A69, _t0A6A, _t0A6B];
  real _t0A6D = prim •00CE<$[3]; $[3]; $[]> (_t0A6C, dPos0A48);
  real _t0A6E = prim |()|00B5<$[]> (_t0A6D);
  real _t0A6F = 0.1e-7;
  bool _t0A70 = prim >=007E (_t0A6E, _t0A6F);
  bool _t0A71 = prim $and01C4 (_t0A68, _t0A70);
  bool _t0A72 = prim $and01C4 (_t0A5A, _t0A71);
  if _t0A72 {
    real _t0A73 = 0.1e1;
    real _t0A74 = 0.1e-7;
    real _t0A75 = prim +0017<$[]> (_t0A73, _t0A74);
    real _t0A76 = 0.1e1;
    real _t0A77 = 0.1e1;
    real _t0A78 = 0.1e1;
    vec3 _t0A79 = [_t0A76, _t0A77, _t0A78];
    real _t0A7A = 0.57735026919e0;
    real _t0A7B = 0.57735026919e0;
    real _t0A7C = 0.57735026919e0;
    real _t0A7D = 0.57735026919e0;
    vec3 _t0A7E = [_t0A7B, _t0A7C, _t0A7D];
    real _t0A7F = prim •00CE<$[3]; $[3]; $[]> (_t0A7E, refPos0A47);
    real _t0A80 = prim -0026<$[]> (_t0A7A, _t0A7F);
    real _t0A81 = 0.57735026919e0;
    real _t0A82 = 0.57735026919e0;
    real _t0A83 = 0.57735026919e0;
    vec3 _t0A84 = [_t0A81, _t0A82, _t0A83];
    real _t0A85 = prim •00CE<$[3]; $[3]; $[]> (_t0A84, dPos0A48);
    real _t0A86 = prim /0055 (_t0A80, _t0A85);
    vec3 _t0A87 = prim *0038<$[3]> (dPos0A48, _t0A86);
    vec3 _t0A88 = prim +0017<$[3]> (refPos0A47, _t0A87);
    real _t0A89 = prim •00CE<$[3]; $[3]; $[]> (_t0A79, _t0A88);
    bool _t0A8A = prim >0080 (_t0A75, _t0A89);
    real _t0A8B = 0.1e-7;
    real _t0A8C = 0.1e-7;
    real _t0A8D = 0.1e-7;
    vec3 _t0A8E = [_t0A8B, _t0A8C, _t0A8D];
    real _t0A8F = 0.57735026919e0;
    real _t0A90 = 0.57735026919e0;
    real _t0A91 = 0.57735026919e0;
    real _t0A92 = 0.57735026919e0;
    vec3 _t0A93 = [_t0A90, _t0A91, _t0A92];
    real _t0A94 = prim •00CE<$[3]; $[3]; $[]> (_t0A93, refPos0A47);
    real _t0A95 = prim -0026<$[]> (_t0A8F, _t0A94);
    real _t0A96 = 0.57735026919e0;
    real _t0A97 = 0.57735026919e0;
    real _t0A98 = 0.57735026919e0;
    vec3 _t0A99 = [_t0A96, _t0A97, _t0A98];
    real _t0A9A = prim •00CE<$[3]; $[3]; $[]> (_t0A99, dPos0A48);
    real _t0A9B = prim /0055 (_t0A95, _t0A9A);
    vec3 _t0A9C = prim *0038<$[3]> (dPos0A48, _t0A9B);
    vec3 _t0A9D = prim +0017<$[3]> (refPos0A47, _t0A9C);
    vec3 _t0A9E = prim +0017<$[3]> (_t0A8E, _t0A9D);
    real _t0A9F = _t0A9E[0];
    real _t0AA0 = -0.e0;
    bool _t0AA1 = prim >0080 (_t0A9F, _t0AA0);
    real _t0AA2 = 0.1e-7;
    real _t0AA3 = 0.1e-7;
    real _t0AA4 = 0.1e-7;
    vec3 _t0AA5 = [_t0AA2, _t0AA3, _t0AA4];
    real _t0AA6 = 0.57735026919e0;
    real _t0AA7 = 0.57735026919e0;
    real _t0AA8 = 0.57735026919e0;
    real _t0AA9 = 0.57735026919e0;
    vec3 _t0AAA = [_t0AA7, _t0AA8, _t0AA9];
    real _t0AAB = prim •00CE<$[3]; $[3]; $[]> (_t0AAA, refPos0A47);
    real _t0AAC = prim -0026<$[]> (_t0AA6, _t0AAB);
    real _t0AAD = 0.57735026919e0;
    real _t0AAE = 0.57735026919e0;
    real _t0AAF = 0.57735026919e0;
    vec3 _t0AB0 = [_t0AAD, _t0AAE, _t0AAF];
    real _t0AB1 = prim •00CE<$[3]; $[3]; $[]> (_t0AB0, dPos0A48);
    real _t0AB2 = prim /0055 (_t0AAC, _t0AB1);
    vec3 _t0AB3 = prim *0038<$[3]> (dPos0A48, _t0AB2);
    vec3 _t0AB4 = prim +0017<$[3]> (refPos0A47, _t0AB3);
    vec3 _t0AB5 = prim +0017<$[3]> (_t0AA5, _t0AB4);
    real _t0AB6 = _t0AB5[1];
    real _t0AB7 = -0.e0;
    bool _t0AB8 = prim >0080 (_t0AB6, _t0AB7);
    real _t0AB9 = 0.1e-7;
    real _t0ABA = 0.1e-7;
    real _t0ABB = 0.1e-7;
    vec3 _t0ABC = [_t0AB9, _t0ABA, _t0ABB];
    real _t0ABD = 0.57735026919e0;
    real _t0ABE = 0.57735026919e0;
    real _t0ABF = 0.57735026919e0;
    real _t0AC0 = 0.57735026919e0;
    vec3 _t0AC1 = [_t0ABE, _t0ABF, _t0AC0];
    real _t0AC2 = prim •00CE<$[3]; $[3]; $[]> (_t0AC1, refPos0A47);
    real _t0AC3 = prim -0026<$[]> (_t0ABD, _t0AC2);
    real _t0AC4 = 0.57735026919e0;
    real _t0AC5 = 0.57735026919e0;
    real _t0AC6 = 0.57735026919e0;
    vec3 _t0AC7 = [_t0AC4, _t0AC5, _t0AC6];
    real _t0AC8 = prim •00CE<$[3]; $[3]; $[]> (_t0AC7, dPos0A48);
    real _t0AC9 = prim /0055 (_t0AC3, _t0AC8);
    vec3 _t0ACA = prim *0038<$[3]> (dPos0A48, _t0AC9);
    vec3 _t0ACB = prim +0017<$[3]> (refPos0A47, _t0ACA);
    vec3 _t0ACC = prim +0017<$[3]> (_t0ABC, _t0ACB);
    real _t0ACD = _t0ACC[2];
    real _t0ACE = -0.e0;
    bool _t0ACF = prim >0080 (_t0ACD, _t0ACE);
    bool _t0AD0 = prim $and01C4 (_t0AB8, _t0ACF);
    bool _t0AD1 = prim $and01C4 (_t0AA1, _t0AD0);
    bool _t0AD2 = prim $and01C4 (_t0A8A, _t0AD1);
    if _t0AD2 {
      real _t0AD3 = 0.57735026919e0;
      real _t0AD4 = 0.57735026919e0;
      real _t0AD5 = 0.57735026919e0;
      real _t0AD6 = 0.57735026919e0;
      vec3 _t0AD7 = [_t0AD4, _t0AD5, _t0AD6];
      real _t0AD8 = prim •00CE<$[3]; $[3]; $[]> (_t0AD7, refPos0A47);
      real _t0AD9 = prim -0026<$[]> (_t0AD3, _t0AD8);
      real _t0ADA = 0.57735026919e0;
      real _t0ADB = 0.57735026919e0;
      real _t0ADC = 0.57735026919e0;
      vec3 _t0ADD = [_t0ADA, _t0ADB, _t0ADC];
      real _t0ADE = prim •00CE<$[3]; $[3]; $[]> (_t0ADD, dPos0A48);
      time0A49 = prim /0055 (_t0AD9, _t0ADE);
      face0A4A = 0;
    }
  }
  real _t0ADF = 0.e0;
  real _t0AE0 = -0.1e1;
  real _t0AE1 = 0.e0;
  real _t0AE2 = 0.e0;
  vec3 _t0AE3 = [_t0AE0, _t0AE1, _t0AE2];
  real _t0AE4 = prim •00CE<$[3]; $[3]; $[]> (_t0AE3, refPos0A47);
  real _t0AE5 = prim -0026<$[]> (_t0ADF, _t0AE4);
  real _t0AE6 = -0.1e1;
  real _t0AE7 = 0.e0;
  real _t0AE8 = 0.e0;
  vec3 _t0AE9 = [_t0AE6, _t0AE7, _t0AE8];
  real _t0AEA = prim •00CE<$[3]; $[3]; $[]> (_t0AE9, dPos0A48);
  real _t0AEB = prim /0055 (_t0AE5, _t0AEA);
  real _t0AEC = -0.1e-7;
  bool _t0AED = prim >=007E (_t0AEB, _t0AEC);
  real _t0AEE = 0.e0;
  real _t0AEF = -0.1e1;
  real _t0AF0 = 0.e0;
  real _t0AF1 = 0.e0;
  vec3 _t0AF2 = [_t0AEF, _t0AF0, _t0AF1];
  real _t0AF3 = prim •00CE<$[3]; $[3]; $[]> (_t0AF2, refPos0A47);
  real _t0AF4 = prim -0026<$[]> (_t0AEE, _t0AF3);
  real _t0AF5 = -0.1e1;
  real _t0AF6 = 0.e0;
  real _t0AF7 = 0.e0;
  vec3 _t0AF8 = [_t0AF5, _t0AF6, _t0AF7];
  real _t0AF9 = prim •00CE<$[3]; $[3]; $[]> (_t0AF8, dPos0A48);
  real _t0AFA = prim /0055 (_t0AF4, _t0AF9);
  bool _t0AFB = prim >0080 (time0A49, _t0AFA);
  real _t0AFC = -0.1e1;
  real _t0AFD = 0.e0;
  real _t0AFE = 0.e0;
  vec3 _t0AFF = [_t0AFC, _t0AFD, _t0AFE];
  real _t0B00 = prim •00CE<$[3]; $[3]; $[]> (_t0AFF, dPos0A48);
  real _t0B01 = prim |()|00B5<$[]> (_t0B00);
  real _t0B02 = 0.1e-7;
  bool _t0B03 = prim >=007E (_t0B01, _t0B02);
  bool _t0B04 = prim $and01C4 (_t0AFB, _t0B03);
  bool _t0B05 = prim $and01C4 (_t0AED, _t0B04);
  if _t0B05 {
    real _t0B06 = 0.1e1;
    real _t0B07 = 0.1e-7;
    real _t0B08 = prim +0017<$[]> (_t0B06, _t0B07);
    real _t0B09 = 0.1e1;
    real _t0B0A = 0.1e1;
    real _t0B0B = 0.1e1;
    vec3 _t0B0C = [_t0B09, _t0B0A, _t0B0B];
    real _t0B0D = 0.e0;
    real _t0B0E = -0.1e1;
    real _t0B0F = 0.e0;
    real _t0B10 = 0.e0;
    vec3 _t0B11 = [_t0B0E, _t0B0F, _t0B10];
    real _t0B12 = prim •00CE<$[3]; $[3]; $[]> (_t0B11, refPos0A47);
    real _t0B13 = prim -0026<$[]> (_t0B0D, _t0B12);
    real _t0B14 = -0.1e1;
    real _t0B15 = 0.e0;
    real _t0B16 = 0.e0;
    vec3 _t0B17 = [_t0B14, _t0B15, _t0B16];
    real _t0B18 = prim •00CE<$[3]; $[3]; $[]> (_t0B17, dPos0A48);
    real _t0B19 = prim /0055 (_t0B13, _t0B18);
    vec3 _t0B1A = prim *0038<$[3]> (dPos0A48, _t0B19);
    vec3 _t0B1B = prim +0017<$[3]> (refPos0A47, _t0B1A);
    real _t0B1C = prim •00CE<$[3]; $[3]; $[]> (_t0B0C, _t0B1B);
    bool _t0B1D = prim >0080 (_t0B08, _t0B1C);
    real _t0B1E = 0.1e-7;
    real _t0B1F = 0.1e-7;
    real _t0B20 = 0.1e-7;
    vec3 _t0B21 = [_t0B1E, _t0B1F, _t0B20];
    real _t0B22 = 0.e0;
    real _t0B23 = -0.1e1;
    real _t0B24 = 0.e0;
    real _t0B25 = 0.e0;
    vec3 _t0B26 = [_t0B23, _t0B24, _t0B25];
    real _t0B27 = prim •00CE<$[3]; $[3]; $[]> (_t0B26, refPos0A47);
    real _t0B28 = prim -0026<$[]> (_t0B22, _t0B27);
    real _t0B29 = -0.1e1;
    real _t0B2A = 0.e0;
    real _t0B2B = 0.e0;
    vec3 _t0B2C = [_t0B29, _t0B2A, _t0B2B];
    real _t0B2D = prim •00CE<$[3]; $[3]; $[]> (_t0B2C, dPos0A48);
    real _t0B2E = prim /0055 (_t0B28, _t0B2D);
    vec3 _t0B2F = prim *0038<$[3]> (dPos0A48, _t0B2E);
    vec3 _t0B30 = prim +0017<$[3]> (refPos0A47, _t0B2F);
    vec3 _t0B31 = prim +0017<$[3]> (_t0B21, _t0B30);
    real _t0B32 = _t0B31[0];
    real _t0B33 = -0.e0;
    bool _t0B34 = prim >0080 (_t0B32, _t0B33);
    real _t0B35 = 0.1e-7;
    real _t0B36 = 0.1e-7;
    real _t0B37 = 0.1e-7;
    vec3 _t0B38 = [_t0B35, _t0B36, _t0B37];
    real _t0B39 = 0.e0;
    real _t0B3A = -0.1e1;
    real _t0B3B = 0.e0;
    real _t0B3C = 0.e0;
    vec3 _t0B3D = [_t0B3A, _t0B3B, _t0B3C];
    real _t0B3E = prim •00CE<$[3]; $[3]; $[]> (_t0B3D, refPos0A47);
    real _t0B3F = prim -0026<$[]> (_t0B39, _t0B3E);
    real _t0B40 = -0.1e1;
    real _t0B41 = 0.e0;
    real _t0B42 = 0.e0;
    vec3 _t0B43 = [_t0B40, _t0B41, _t0B42];
    real _t0B44 = prim •00CE<$[3]; $[3]; $[]> (_t0B43, dPos0A48);
    real _t0B45 = prim /0055 (_t0B3F, _t0B44);
    vec3 _t0B46 = prim *0038<$[3]> (dPos0A48, _t0B45);
    vec3 _t0B47 = prim +0017<$[3]> (refPos0A47, _t0B46);
    vec3 _t0B48 = prim +0017<$[3]> (_t0B38, _t0B47);
    real _t0B49 = _t0B48[1];
    real _t0B4A = -0.e0;
    bool _t0B4B = prim >0080 (_t0B49, _t0B4A);
    real _t0B4C = 0.1e-7;
    real _t0B4D = 0.1e-7;
    real _t0B4E = 0.1e-7;
    vec3 _t0B4F = [_t0B4C, _t0B4D, _t0B4E];
    real _t0B50 = 0.e0;
    real _t0B51 = -0.1e1;
    real _t0B52 = 0.e0;
    real _t0B53 = 0.e0;
    vec3 _t0B54 = [_t0B51, _t0B52, _t0B53];
    real _t0B55 = prim •00CE<$[3]; $[3]; $[]> (_t0B54, refPos0A47);
    real _t0B56 = prim -0026<$[]> (_t0B50, _t0B55);
    real _t0B57 = -0.1e1;
    real _t0B58 = 0.e0;
    real _t0B59 = 0.e0;
    vec3 _t0B5A = [_t0B57, _t0B58, _t0B59];
    real _t0B5B = prim •00CE<$[3]; $[3]; $[]> (_t0B5A, dPos0A48);
    real _t0B5C = prim /0055 (_t0B56, _t0B5B);
    vec3 _t0B5D = prim *0038<$[3]> (dPos0A48, _t0B5C);
    vec3 _t0B5E = prim +0017<$[3]> (refPos0A47, _t0B5D);
    vec3 _t0B5F = prim +0017<$[3]> (_t0B4F, _t0B5E);
    real _t0B60 = _t0B5F[2];
    real _t0B61 = -0.e0;
    bool _t0B62 = prim >0080 (_t0B60, _t0B61);
    bool _t0B63 = prim $and01C4 (_t0B4B, _t0B62);
    bool _t0B64 = prim $and01C4 (_t0B34, _t0B63);
    bool _t0B65 = prim $and01C4 (_t0B1D, _t0B64);
    if _t0B65 {
      real _t0B66 = 0.e0;
      real _t0B67 = -0.1e1;
      real _t0B68 = 0.e0;
      real _t0B69 = 0.e0;
      vec3 _t0B6A = [_t0B67, _t0B68, _t0B69];
      real _t0B6B = prim •00CE<$[3]; $[3]; $[]> (_t0B6A, refPos0A47);
      real _t0B6C = prim -0026<$[]> (_t0B66, _t0B6B);
      real _t0B6D = -0.1e1;
      real _t0B6E = 0.e0;
      real _t0B6F = 0.e0;
      vec3 _t0B70 = [_t0B6D, _t0B6E, _t0B6F];
      real _t0B71 = prim •00CE<$[3]; $[3]; $[]> (_t0B70, dPos0A48);
      time0A49 = prim /0055 (_t0B6C, _t0B71);
      face0A4A = 1;
    }
  }
  real _t0B72 = 0.e0;
  real _t0B73 = 0.e0;
  real _t0B74 = -0.1e1;
  real _t0B75 = 0.e0;
  vec3 _t0B76 = [_t0B73, _t0B74, _t0B75];
  real _t0B77 = prim •00CE<$[3]; $[3]; $[]> (_t0B76, refPos0A47);
  real _t0B78 = prim -0026<$[]> (_t0B72, _t0B77);
  real _t0B79 = 0.e0;
  real _t0B7A = -0.1e1;
  real _t0B7B = 0.e0;
  vec3 _t0B7C = [_t0B79, _t0B7A, _t0B7B];
  real _t0B7D = prim •00CE<$[3]; $[3]; $[]> (_t0B7C, dPos0A48);
  real _t0B7E = prim /0055 (_t0B78, _t0B7D);
  real _t0B7F = -0.1e-7;
  bool _t0B80 = prim >=007E (_t0B7E, _t0B7F);
  real _t0B81 = 0.e0;
  real _t0B82 = 0.e0;
  real _t0B83 = -0.1e1;
  real _t0B84 = 0.e0;
  vec3 _t0B85 = [_t0B82, _t0B83, _t0B84];
  real _t0B86 = prim •00CE<$[3]; $[3]; $[]> (_t0B85, refPos0A47);
  real _t0B87 = prim -0026<$[]> (_t0B81, _t0B86);
  real _t0B88 = 0.e0;
  real _t0B89 = -0.1e1;
  real _t0B8A = 0.e0;
  vec3 _t0B8B = [_t0B88, _t0B89, _t0B8A];
  real _t0B8C = prim •00CE<$[3]; $[3]; $[]> (_t0B8B, dPos0A48);
  real _t0B8D = prim /0055 (_t0B87, _t0B8C);
  bool _t0B8E = prim >0080 (time0A49, _t0B8D);
  real _t0B8F = 0.e0;
  real _t0B90 = -0.1e1;
  real _t0B91 = 0.e0;
  vec3 _t0B92 = [_t0B8F, _t0B90, _t0B91];
  real _t0B93 = prim •00CE<$[3]; $[3]; $[]> (_t0B92, dPos0A48);
  real _t0B94 = prim |()|00B5<$[]> (_t0B93);
  real _t0B95 = 0.1e-7;
  bool _t0B96 = prim >=007E (_t0B94, _t0B95);
  bool _t0B97 = prim $and01C4 (_t0B8E, _t0B96);
  bool _t0B98 = prim $and01C4 (_t0B80, _t0B97);
  if _t0B98 {
    real _t0B99 = 0.1e1;
    real _t0B9A = 0.1e-7;
    real _t0B9B = prim +0017<$[]> (_t0B99, _t0B9A);
    real _t0B9C = 0.1e1;
    real _t0B9D = 0.1e1;
    real _t0B9E = 0.1e1;
    vec3 _t0B9F = [_t0B9C, _t0B9D, _t0B9E];
    real _t0BA0 = 0.e0;
    real _t0BA1 = 0.e0;
    real _t0BA2 = -0.1e1;
    real _t0BA3 = 0.e0;
    vec3 _t0BA4 = [_t0BA1, _t0BA2, _t0BA3];
    real _t0BA5 = prim •00CE<$[3]; $[3]; $[]> (_t0BA4, refPos0A47);
    real _t0BA6 = prim -0026<$[]> (_t0BA0, _t0BA5);
    real _t0BA7 = 0.e0;
    real _t0BA8 = -0.1e1;
    real _t0BA9 = 0.e0;
    vec3 _t0BAA = [_t0BA7, _t0BA8, _t0BA9];
    real _t0BAB = prim •00CE<$[3]; $[3]; $[]> (_t0BAA, dPos0A48);
    real _t0BAC = prim /0055 (_t0BA6, _t0BAB);
    vec3 _t0BAD = prim *0038<$[3]> (dPos0A48, _t0BAC);
    vec3 _t0BAE = prim +0017<$[3]> (refPos0A47, _t0BAD);
    real _t0BAF = prim •00CE<$[3]; $[3]; $[]> (_t0B9F, _t0BAE);
    bool _t0BB0 = prim >0080 (_t0B9B, _t0BAF);
    real _t0BB1 = 0.1e-7;
    real _t0BB2 = 0.1e-7;
    real _t0BB3 = 0.1e-7;
    vec3 _t0BB4 = [_t0BB1, _t0BB2, _t0BB3];
    real _t0BB5 = 0.e0;
    real _t0BB6 = 0.e0;
    real _t0BB7 = -0.1e1;
    real _t0BB8 = 0.e0;
    vec3 _t0BB9 = [_t0BB6, _t0BB7, _t0BB8];
    real _t0BBA = prim •00CE<$[3]; $[3]; $[]> (_t0BB9, refPos0A47);
    real _t0BBB = prim -0026<$[]> (_t0BB5, _t0BBA);
    real _t0BBC = 0.e0;
    real _t0BBD = -0.1e1;
    real _t0BBE = 0.e0;
    vec3 _t0BBF = [_t0BBC, _t0BBD, _t0BBE];
    real _t0BC0 = prim •00CE<$[3]; $[3]; $[]> (_t0BBF, dPos0A48);
    real _t0BC1 = prim /0055 (_t0BBB, _t0BC0);
    vec3 _t0BC2 = prim *0038<$[3]> (dPos0A48, _t0BC1);
    vec3 _t0BC3 = prim +0017<$[3]> (refPos0A47, _t0BC2);
    vec3 _t0BC4 = prim +0017<$[3]> (_t0BB4, _t0BC3);
    real _t0BC5 = _t0BC4[0];
    real _t0BC6 = -0.e0;
    bool _t0BC7 = prim >0080 (_t0BC5, _t0BC6);
    real _t0BC8 = 0.1e-7;
    real _t0BC9 = 0.1e-7;
    real _t0BCA = 0.1e-7;
    vec3 _t0BCB = [_t0BC8, _t0BC9, _t0BCA];
    real _t0BCC = 0.e0;
    real _t0BCD = 0.e0;
    real _t0BCE = -0.1e1;
    real _t0BCF = 0.e0;
    vec3 _t0BD0 = [_t0BCD, _t0BCE, _t0BCF];
    real _t0BD1 = prim •00CE<$[3]; $[3]; $[]> (_t0BD0, refPos0A47);
    real _t0BD2 = prim -0026<$[]> (_t0BCC, _t0BD1);
    real _t0BD3 = 0.e0;
    real _t0BD4 = -0.1e1;
    real _t0BD5 = 0.e0;
    vec3 _t0BD6 = [_t0BD3, _t0BD4, _t0BD5];
    real _t0BD7 = prim •00CE<$[3]; $[3]; $[]> (_t0BD6, dPos0A48);
    real _t0BD8 = prim /0055 (_t0BD2, _t0BD7);
    vec3 _t0BD9 = prim *0038<$[3]> (dPos0A48, _t0BD8);
    vec3 _t0BDA = prim +0017<$[3]> (refPos0A47, _t0BD9);
    vec3 _t0BDB = prim +0017<$[3]> (_t0BCB, _t0BDA);
    real _t0BDC = _t0BDB[1];
    real _t0BDD = -0.e0;
    bool _t0BDE = prim >0080 (_t0BDC, _t0BDD);
    real _t0BDF = 0.1e-7;
    real _t0BE0 = 0.1e-7;
    real _t0BE1 = 0.1e-7;
    vec3 _t0BE2 = [_t0BDF, _t0BE0, _t0BE1];
    real _t0BE3 = 0.e0;
    real _t0BE4 = 0.e0;
    real _t0BE5 = -0.1e1;
    real _t0BE6 = 0.e0;
    vec3 _t0BE7 = [_t0BE4, _t0BE5, _t0BE6];
    real _t0BE8 = prim •00CE<$[3]; $[3]; $[]> (_t0BE7, refPos0A47);
    real _t0BE9 = prim -0026<$[]> (_t0BE3, _t0BE8);
    real _t0BEA = 0.e0;
    real _t0BEB = -0.1e1;
    real _t0BEC = 0.e0;
    vec3 _t0BED = [_t0BEA, _t0BEB, _t0BEC];
    real _t0BEE = prim •00CE<$[3]; $[3]; $[]> (_t0BED, dPos0A48);
    real _t0BEF = prim /0055 (_t0BE9, _t0BEE);
    vec3 _t0BF0 = prim *0038<$[3]> (dPos0A48, _t0BEF);
    vec3 _t0BF1 = prim +0017<$[3]> (refPos0A47, _t0BF0);
    vec3 _t0BF2 = prim +0017<$[3]> (_t0BE2, _t0BF1);
    real _t0BF3 = _t0BF2[2];
    real _t0BF4 = -0.e0;
    bool _t0BF5 = prim >0080 (_t0BF3, _t0BF4);
    bool _t0BF6 = prim $and01C4 (_t0BDE, _t0BF5);
    bool _t0BF7 = prim $and01C4 (_t0BC7, _t0BF6);
    bool _t0BF8 = prim $and01C4 (_t0BB0, _t0BF7);
    if _t0BF8 {
      real _t0BF9 = 0.e0;
      real _t0BFA = 0.e0;
      real _t0BFB = -0.1e1;
      real _t0BFC = 0.e0;
      vec3 _t0BFD = [_t0BFA, _t0BFB, _t0BFC];
      real _t0BFE = prim •00CE<$[3]; $[3]; $[]> (_t0BFD, refPos0A47);
      real _t0BFF = prim -0026<$[]> (_t0BF9, _t0BFE);
      real _t0C00 = 0.e0;
      real _t0C01 = -0.1e1;
      real _t0C02 = 0.e0;
      vec3 _t0C03 = [_t0C00, _t0C01, _t0C02];
      real _t0C04 = prim •00CE<$[3]; $[3]; $[]> (_t0C03, dPos0A48);
      time0A49 = prim /0055 (_t0BFF, _t0C04);
      face0A4A = 2;
    }
  }
  real _t0C05 = 0.e0;
  real _t0C06 = 0.e0;
  real _t0C07 = 0.e0;
  real _t0C08 = -0.1e1;
  vec3 _t0C09 = [_t0C06, _t0C07, _t0C08];
  real _t0C0A = prim •00CE<$[3]; $[3]; $[]> (_t0C09, refPos0A47);
  real _t0C0B = prim -0026<$[]> (_t0C05, _t0C0A);
  real _t0C0C = 0.e0;
  real _t0C0D = 0.e0;
  real _t0C0E = -0.1e1;
  vec3 _t0C0F = [_t0C0C, _t0C0D, _t0C0E];
  real _t0C10 = prim •00CE<$[3]; $[3]; $[]> (_t0C0F, dPos0A48);
  real _t0C11 = prim /0055 (_t0C0B, _t0C10);
  real _t0C12 = -0.1e-7;
  bool _t0C13 = prim >=007E (_t0C11, _t0C12);
  real _t0C14 = 0.e0;
  real _t0C15 = 0.e0;
  real _t0C16 = 0.e0;
  real _t0C17 = -0.1e1;
  vec3 _t0C18 = [_t0C15, _t0C16, _t0C17];
  real _t0C19 = prim •00CE<$[3]; $[3]; $[]> (_t0C18, refPos0A47);
  real _t0C1A = prim -0026<$[]> (_t0C14, _t0C19);
  real _t0C1B = 0.e0;
  real _t0C1C = 0.e0;
  real _t0C1D = -0.1e1;
  vec3 _t0C1E = [_t0C1B, _t0C1C, _t0C1D];
  real _t0C1F = prim •00CE<$[3]; $[3]; $[]> (_t0C1E, dPos0A48);
  real _t0C20 = prim /0055 (_t0C1A, _t0C1F);
  bool _t0C21 = prim >0080 (time0A49, _t0C20);
  real _t0C22 = 0.e0;
  real _t0C23 = 0.e0;
  real _t0C24 = -0.1e1;
  vec3 _t0C25 = [_t0C22, _t0C23, _t0C24];
  real _t0C26 = prim •00CE<$[3]; $[3]; $[]> (_t0C25, dPos0A48);
  real _t0C27 = prim |()|00B5<$[]> (_t0C26);
  real _t0C28 = 0.1e-7;
  bool _t0C29 = prim >=007E (_t0C27, _t0C28);
  bool _t0C2A = prim $and01C4 (_t0C21, _t0C29);
  bool _t0C2B = prim $and01C4 (_t0C13, _t0C2A);
  if _t0C2B {
    real _t0C2C = 0.1e1;
    real _t0C2D = 0.1e-7;
    real _t0C2E = prim +0017<$[]> (_t0C2C, _t0C2D);
    real _t0C2F = 0.1e1;
    real _t0C30 = 0.1e1;
    real _t0C31 = 0.1e1;
    vec3 _t0C32 = [_t0C2F, _t0C30, _t0C31];
    real _t0C33 = 0.e0;
    real _t0C34 = 0.e0;
    real _t0C35 = 0.e0;
    real _t0C36 = -0.1e1;
    vec3 _t0C37 = [_t0C34, _t0C35, _t0C36];
    real _t0C38 = prim •00CE<$[3]; $[3]; $[]> (_t0C37, refPos0A47);
    real _t0C39 = prim -0026<$[]> (_t0C33, _t0C38);
    real _t0C3A = 0.e0;
    real _t0C3B = 0.e0;
    real _t0C3C = -0.1e1;
    vec3 _t0C3D = [_t0C3A, _t0C3B, _t0C3C];
    real _t0C3E = prim •00CE<$[3]; $[3]; $[]> (_t0C3D, dPos0A48);
    real _t0C3F = prim /0055 (_t0C39, _t0C3E);
    vec3 _t0C40 = prim *0038<$[3]> (dPos0A48, _t0C3F);
    vec3 _t0C41 = prim +0017<$[3]> (refPos0A47, _t0C40);
    real _t0C42 = prim •00CE<$[3]; $[3]; $[]> (_t0C32, _t0C41);
    bool _t0C43 = prim >0080 (_t0C2E, _t0C42);
    real _t0C44 = 0.1e-7;
    real _t0C45 = 0.1e-7;
    real _t0C46 = 0.1e-7;
    vec3 _t0C47 = [_t0C44, _t0C45, _t0C46];
    real _t0C48 = 0.e0;
    real _t0C49 = 0.e0;
    real _t0C4A = 0.e0;
    real _t0C4B = -0.1e1;
    vec3 _t0C4C = [_t0C49, _t0C4A, _t0C4B];
    real _t0C4D = prim •00CE<$[3]; $[3]; $[]> (_t0C4C, refPos0A47);
    real _t0C4E = prim -0026<$[]> (_t0C48, _t0C4D);
    real _t0C4F = 0.e0;
    real _t0C50 = 0.e0;
    real _t0C51 = -0.1e1;
    vec3 _t0C52 = [_t0C4F, _t0C50, _t0C51];
    real _t0C53 = prim •00CE<$[3]; $[3]; $[]> (_t0C52, dPos0A48);
    real _t0C54 = prim /0055 (_t0C4E, _t0C53);
    vec3 _t0C55 = prim *0038<$[3]> (dPos0A48, _t0C54);
    vec3 _t0C56 = prim +0017<$[3]> (refPos0A47, _t0C55);
    vec3 _t0C57 = prim +0017<$[3]> (_t0C47, _t0C56);
    real _t0C58 = _t0C57[0];
    real _t0C59 = -0.e0;
    bool _t0C5A = prim >0080 (_t0C58, _t0C59);
    real _t0C5B = 0.1e-7;
    real _t0C5C = 0.1e-7;
    real _t0C5D = 0.1e-7;
    vec3 _t0C5E = [_t0C5B, _t0C5C, _t0C5D];
    real _t0C5F = 0.e0;
    real _t0C60 = 0.e0;
    real _t0C61 = 0.e0;
    real _t0C62 = -0.1e1;
    vec3 _t0C63 = [_t0C60, _t0C61, _t0C62];
    real _t0C64 = prim •00CE<$[3]; $[3]; $[]> (_t0C63, refPos0A47);
    real _t0C65 = prim -0026<$[]> (_t0C5F, _t0C64);
    real _t0C66 = 0.e0;
    real _t0C67 = 0.e0;
    real _t0C68 = -0.1e1;
    vec3 _t0C69 = [_t0C66, _t0C67, _t0C68];
    real _t0C6A = prim •00CE<$[3]; $[3]; $[]> (_t0C69, dPos0A48);
    real _t0C6B = prim /0055 (_t0C65, _t0C6A);
    vec3 _t0C6C = prim *0038<$[3]> (dPos0A48, _t0C6B);
    vec3 _t0C6D = prim +0017<$[3]> (refPos0A47, _t0C6C);
    vec3 _t0C6E = prim +0017<$[3]> (_t0C5E, _t0C6D);
    real _t0C6F = _t0C6E[1];
    real _t0C70 = -0.e0;
    bool _t0C71 = prim >0080 (_t0C6F, _t0C70);
    real _t0C72 = 0.1e-7;
    real _t0C73 = 0.1e-7;
    real _t0C74 = 0.1e-7;
    vec3 _t0C75 = [_t0C72, _t0C73, _t0C74];
    real _t0C76 = 0.e0;
    real _t0C77 = 0.e0;
    real _t0C78 = 0.e0;
    real _t0C79 = -0.1e1;
    vec3 _t0C7A = [_t0C77, _t0C78, _t0C79];
    real _t0C7B = prim •00CE<$[3]; $[3]; $[]> (_t0C7A, refPos0A47);
    real _t0C7C = prim -0026<$[]> (_t0C76, _t0C7B);
    real _t0C7D = 0.e0;
    real _t0C7E = 0.e0;
    real _t0C7F = -0.1e1;
    vec3 _t0C80 = [_t0C7D, _t0C7E, _t0C7F];
    real _t0C81 = prim •00CE<$[3]; $[3]; $[]> (_t0C80, dPos0A48);
    real _t0C82 = prim /0055 (_t0C7C, _t0C81);
    vec3 _t0C83 = prim *0038<$[3]> (dPos0A48, _t0C82);
    vec3 _t0C84 = prim +0017<$[3]> (refPos0A47, _t0C83);
    vec3 _t0C85 = prim +0017<$[3]> (_t0C75, _t0C84);
    real _t0C86 = _t0C85[2];
    real _t0C87 = -0.e0;
    bool _t0C88 = prim >0080 (_t0C86, _t0C87);
    bool _t0C89 = prim $and01C4 (_t0C71, _t0C88);
    bool _t0C8A = prim $and01C4 (_t0C5A, _t0C89);
    bool _t0C8B = prim $and01C4 (_t0C43, _t0C8A);
    if _t0C8B {
      real _t0C8C = 0.e0;
      real _t0C8D = 0.e0;
      real _t0C8E = 0.e0;
      real _t0C8F = -0.1e1;
      vec3 _t0C90 = [_t0C8D, _t0C8E, _t0C8F];
      real _t0C91 = prim •00CE<$[3]; $[3]; $[]> (_t0C90, refPos0A47);
      real _t0C92 = prim -0026<$[]> (_t0C8C, _t0C91);
      real _t0C93 = 0.e0;
      real _t0C94 = 0.e0;
      real _t0C95 = -0.1e1;
      vec3 _t0C96 = [_t0C93, _t0C94, _t0C95];
      real _t0C97 = prim •00CE<$[3]; $[3]; $[]> (_t0C96, dPos0A48);
      time0A49 = prim /0055 (_t0C92, _t0C97);
      face0A4A = 3;
    }
  }
  int _t0C98 = -1;
  bool _t0C99 = prim !=0086 (face0A4A, _t0C98);
  real _t0C9A = 0.1e1;
  real _t0C9B = 0.1e-7;
  real _t0C9C = prim +0017<$[]> (_t0C9A, _t0C9B);
  real _t0C9D = 0.1e1;
  real _t0C9E = 0.1e1;
  real _t0C9F = 0.1e1;
  vec3 _t0CA0 = [_t0C9D, _t0C9E, _t0C9F];
  real _t0CA1 = 0.e0;
  real _t0CA2 = prim max0125 (time0A49, _t0CA1);
  vec3 _t0CA3 = prim *0038<$[3]> (dPos0A48, _t0CA2);
  vec3 _t0CA4 = prim +0017<$[3]> (refPos0A47, _t0CA3);
  real _t0CA5 = prim •00CE<$[3]; $[3]; $[]> (_t0CA0, _t0CA4);
  bool _t0CA6 = prim >0080 (_t0C9C, _t0CA5);
  real _t0CA7 = 0.1e-7;
  real _t0CA8 = 0.1e-7;
  real _t0CA9 = 0.1e-7;
  vec3 _t0CAA = [_t0CA7, _t0CA8, _t0CA9];
  real _t0CAB = 0.e0;
  real _t0CAC = prim max0125 (time0A49, _t0CAB);
  vec3 _t0CAD = prim *0038<$[3]> (dPos0A48, _t0CAC);
  vec3 _t0CAE = prim +0017<$[3]> (refPos0A47, _t0CAD);
  vec3 _t0CAF = prim +0017<$[3]> (_t0CAA, _t0CAE);
  real _t0CB0 = _t0CAF[0];
  real _t0CB1 = -0.e0;
  bool _t0CB2 = prim >0080 (_t0CB0, _t0CB1);
  real _t0CB3 = 0.1e-7;
  real _t0CB4 = 0.1e-7;
  real _t0CB5 = 0.1e-7;
  vec3 _t0CB6 = [_t0CB3, _t0CB4, _t0CB5];
  real _t0CB7 = 0.e0;
  real _t0CB8 = prim max0125 (time0A49, _t0CB7);
  vec3 _t0CB9 = prim *0038<$[3]> (dPos0A48, _t0CB8);
  vec3 _t0CBA = prim +0017<$[3]> (refPos0A47, _t0CB9);
  vec3 _t0CBB = prim +0017<$[3]> (_t0CB6, _t0CBA);
  real _t0CBC = _t0CBB[1];
  real _t0CBD = -0.e0;
  bool _t0CBE = prim >0080 (_t0CBC, _t0CBD);
  real _t0CBF = 0.1e-7;
  real _t0CC0 = 0.1e-7;
  real _t0CC1 = 0.1e-7;
  vec3 _t0CC2 = [_t0CBF, _t0CC0, _t0CC1];
  real _t0CC3 = 0.e0;
  real _t0CC4 = prim max0125 (time0A49, _t0CC3);
  vec3 _t0CC5 = prim *0038<$[3]> (dPos0A48, _t0CC4);
  vec3 _t0CC6 = prim +0017<$[3]> (refPos0A47, _t0CC5);
  vec3 _t0CC7 = prim +0017<$[3]> (_t0CC2, _t0CC6);
  real _t0CC8 = _t0CC7[2];
  real _t0CC9 = -0.e0;
  bool _t0CCA = prim >0080 (_t0CC8, _t0CC9);
  bool _t0CCB = prim $and01C4 (_t0CBE, _t0CCA);
  bool _t0CCC = prim $and01C4 (_t0CB2, _t0CCB);
  bool _t0CCD = prim $and01C4 (_t0CA6, _t0CCC);
  bool _t0CCE = prim $and01C4 (_t0C99, _t0CCD);
  if _t0CCE {
    real _t0CCF = 0.e0;
    real _t0CD0 = prim max0125 (time0A49, _t0CCF);
    real _t0CD1 = (real)face0A4A;
    vec2 _t0CD2 = [_t0CD0, _t0CD1];
    return _t0CD2;
  } else {
    real _t0CD3 = -0.1e1;
    real _t0CD4 = -0.1e1;
    vec2 _t0CD5 = [_t0CD3, _t0CD4];
    return _t0CD5;
  }
}
function vec2#0 _exit0CD6 (vec3 refPos0A47, vec3 dPos0A48, int i0CD7)
{
  real time0CD8 = +inf;
  int face0CD9 = -1;
  real faceTime0CDA = -inf;
  real _t0CDB = 0.57735026919e0;
  real _t0CDC = 0.57735026919e0;
  real _t0CDD = 0.57735026919e0;
  real _t0CDE = 0.57735026919e0;
  vec3 _t0CDF = [_t0CDC, _t0CDD, _t0CDE];
  real _t0CE0 = prim •00CE<$[3]; $[3]; $[]> (_t0CDF, refPos0A47);
  real _t0CE1 = prim -0026<$[]> (_t0CDB, _t0CE0);
  real _t0CE2 = 0.57735026919e0;
  real _t0CE3 = 0.57735026919e0;
  real _t0CE4 = 0.57735026919e0;
  vec3 _t0CE5 = [_t0CE2, _t0CE3, _t0CE4];
  real _t0CE6 = prim •00CE<$[3]; $[3]; $[]> (_t0CE5, dPos0A48);
  real _t0CE7 = prim /0055 (_t0CE1, _t0CE6);
  real _t0CE8 = -0.1e-7;
  bool _t0CE9 = prim >=007E (_t0CE7, _t0CE8);
  real _t0CEA = 0.57735026919e0;
  real _t0CEB = 0.57735026919e0;
  real _t0CEC = 0.57735026919e0;
  real _t0CED = 0.57735026919e0;
  vec3 _t0CEE = [_t0CEB, _t0CEC, _t0CED];
  real _t0CEF = prim •00CE<$[3]; $[3]; $[]> (_t0CEE, refPos0A47);
  real _t0CF0 = prim -0026<$[]> (_t0CEA, _t0CEF);
  real _t0CF1 = 0.57735026919e0;
  real _t0CF2 = 0.57735026919e0;
  real _t0CF3 = 0.57735026919e0;
  vec3 _t0CF4 = [_t0CF1, _t0CF2, _t0CF3];
  real _t0CF5 = prim •00CE<$[3]; $[3]; $[]> (_t0CF4, dPos0A48);
  real _t0CF6 = prim /0055 (_t0CF0, _t0CF5);
  bool _t0CF7 = prim >0080 (time0CD8, _t0CF6);
  real _t0CF8 = 0.57735026919e0;
  real _t0CF9 = 0.57735026919e0;
  real _t0CFA = 0.57735026919e0;
  vec3 _t0CFB = [_t0CF8, _t0CF9, _t0CFA];
  real _t0CFC = prim •00CE<$[3]; $[3]; $[]> (_t0CFB, dPos0A48);
  real _t0CFD = prim |()|00B5<$[]> (_t0CFC);
  real _t0CFE = 0.1e-7;
  bool _t0CFF = prim >=007E (_t0CFD, _t0CFE);
  bool _t0D00 = prim $and01C4 (_t0CF7, _t0CFF);
  bool _t0D01 = prim $and01C4 (_t0CE9, _t0D00);
  if _t0D01 {
    int _t0D02 = 0;
    bool _t0D03 = prim !=0086 (i0CD7, _t0D02);
    if _t0D03 {
      real _t0D04 = 0.57735026919e0;
      real _t0D05 = 0.57735026919e0;
      real _t0D06 = 0.57735026919e0;
      real _t0D07 = 0.57735026919e0;
      vec3 _t0D08 = [_t0D05, _t0D06, _t0D07];
      real _t0D09 = prim •00CE<$[3]; $[3]; $[]> (_t0D08, refPos0A47);
      real _t0D0A = prim -0026<$[]> (_t0D04, _t0D09);
      real _t0D0B = 0.57735026919e0;
      real _t0D0C = 0.57735026919e0;
      real _t0D0D = 0.57735026919e0;
      vec3 _t0D0E = [_t0D0B, _t0D0C, _t0D0D];
      real _t0D0F = prim •00CE<$[3]; $[3]; $[]> (_t0D0E, dPos0A48);
      time0CD8 = prim /0055 (_t0D0A, _t0D0F);
      face0CD9 = 0;
    } else {
      real _t0D10 = 0.57735026919e0;
      real _t0D11 = 0.57735026919e0;
      real _t0D12 = 0.57735026919e0;
      real _t0D13 = 0.57735026919e0;
      vec3 _t0D14 = [_t0D11, _t0D12, _t0D13];
      real _t0D15 = prim •00CE<$[3]; $[3]; $[]> (_t0D14, refPos0A47);
      real _t0D16 = prim -0026<$[]> (_t0D10, _t0D15);
      real _t0D17 = 0.57735026919e0;
      real _t0D18 = 0.57735026919e0;
      real _t0D19 = 0.57735026919e0;
      vec3 _t0D1A = [_t0D17, _t0D18, _t0D19];
      real _t0D1B = prim •00CE<$[3]; $[3]; $[]> (_t0D1A, dPos0A48);
      faceTime0CDA = prim /0055 (_t0D16, _t0D1B);
    }
  }
  real _t0D1C = 0.e0;
  real _t0D1D = -0.1e1;
  real _t0D1E = 0.e0;
  real _t0D1F = 0.e0;
  vec3 _t0D20 = [_t0D1D, _t0D1E, _t0D1F];
  real _t0D21 = prim •00CE<$[3]; $[3]; $[]> (_t0D20, refPos0A47);
  real _t0D22 = prim -0026<$[]> (_t0D1C, _t0D21);
  real _t0D23 = -0.1e1;
  real _t0D24 = 0.e0;
  real _t0D25 = 0.e0;
  vec3 _t0D26 = [_t0D23, _t0D24, _t0D25];
  real _t0D27 = prim •00CE<$[3]; $[3]; $[]> (_t0D26, dPos0A48);
  real _t0D28 = prim /0055 (_t0D22, _t0D27);
  real _t0D29 = -0.1e-7;
  bool _t0D2A = prim >=007E (_t0D28, _t0D29);
  real _t0D2B = 0.e0;
  real _t0D2C = -0.1e1;
  real _t0D2D = 0.e0;
  real _t0D2E = 0.e0;
  vec3 _t0D2F = [_t0D2C, _t0D2D, _t0D2E];
  real _t0D30 = prim •00CE<$[3]; $[3]; $[]> (_t0D2F, refPos0A47);
  real _t0D31 = prim -0026<$[]> (_t0D2B, _t0D30);
  real _t0D32 = -0.1e1;
  real _t0D33 = 0.e0;
  real _t0D34 = 0.e0;
  vec3 _t0D35 = [_t0D32, _t0D33, _t0D34];
  real _t0D36 = prim •00CE<$[3]; $[3]; $[]> (_t0D35, dPos0A48);
  real _t0D37 = prim /0055 (_t0D31, _t0D36);
  bool _t0D38 = prim >0080 (time0CD8, _t0D37);
  real _t0D39 = -0.1e1;
  real _t0D3A = 0.e0;
  real _t0D3B = 0.e0;
  vec3 _t0D3C = [_t0D39, _t0D3A, _t0D3B];
  real _t0D3D = prim •00CE<$[3]; $[3]; $[]> (_t0D3C, dPos0A48);
  real _t0D3E = prim |()|00B5<$[]> (_t0D3D);
  real _t0D3F = 0.1e-7;
  bool _t0D40 = prim >=007E (_t0D3E, _t0D3F);
  bool _t0D41 = prim $and01C4 (_t0D38, _t0D40);
  bool _t0D42 = prim $and01C4 (_t0D2A, _t0D41);
  if _t0D42 {
    int _t0D43 = 1;
    bool _t0D44 = prim !=0086 (i0CD7, _t0D43);
    if _t0D44 {
      real _t0D45 = 0.e0;
      real _t0D46 = -0.1e1;
      real _t0D47 = 0.e0;
      real _t0D48 = 0.e0;
      vec3 _t0D49 = [_t0D46, _t0D47, _t0D48];
      real _t0D4A = prim •00CE<$[3]; $[3]; $[]> (_t0D49, refPos0A47);
      real _t0D4B = prim -0026<$[]> (_t0D45, _t0D4A);
      real _t0D4C = -0.1e1;
      real _t0D4D = 0.e0;
      real _t0D4E = 0.e0;
      vec3 _t0D4F = [_t0D4C, _t0D4D, _t0D4E];
      real _t0D50 = prim •00CE<$[3]; $[3]; $[]> (_t0D4F, dPos0A48);
      time0CD8 = prim /0055 (_t0D4B, _t0D50);
      face0CD9 = 1;
    } else {
      real _t0D51 = 0.e0;
      real _t0D52 = -0.1e1;
      real _t0D53 = 0.e0;
      real _t0D54 = 0.e0;
      vec3 _t0D55 = [_t0D52, _t0D53, _t0D54];
      real _t0D56 = prim •00CE<$[3]; $[3]; $[]> (_t0D55, refPos0A47);
      real _t0D57 = prim -0026<$[]> (_t0D51, _t0D56);
      real _t0D58 = -0.1e1;
      real _t0D59 = 0.e0;
      real _t0D5A = 0.e0;
      vec3 _t0D5B = [_t0D58, _t0D59, _t0D5A];
      real _t0D5C = prim •00CE<$[3]; $[3]; $[]> (_t0D5B, dPos0A48);
      faceTime0CDA = prim /0055 (_t0D57, _t0D5C);
    }
  }
  real _t0D5D = 0.e0;
  real _t0D5E = 0.e0;
  real _t0D5F = -0.1e1;
  real _t0D60 = 0.e0;
  vec3 _t0D61 = [_t0D5E, _t0D5F, _t0D60];
  real _t0D62 = prim •00CE<$[3]; $[3]; $[]> (_t0D61, refPos0A47);
  real _t0D63 = prim -0026<$[]> (_t0D5D, _t0D62);
  real _t0D64 = 0.e0;
  real _t0D65 = -0.1e1;
  real _t0D66 = 0.e0;
  vec3 _t0D67 = [_t0D64, _t0D65, _t0D66];
  real _t0D68 = prim •00CE<$[3]; $[3]; $[]> (_t0D67, dPos0A48);
  real _t0D69 = prim /0055 (_t0D63, _t0D68);
  real _t0D6A = -0.1e-7;
  bool _t0D6B = prim >=007E (_t0D69, _t0D6A);
  real _t0D6C = 0.e0;
  real _t0D6D = 0.e0;
  real _t0D6E = -0.1e1;
  real _t0D6F = 0.e0;
  vec3 _t0D70 = [_t0D6D, _t0D6E, _t0D6F];
  real _t0D71 = prim •00CE<$[3]; $[3]; $[]> (_t0D70, refPos0A47);
  real _t0D72 = prim -0026<$[]> (_t0D6C, _t0D71);
  real _t0D73 = 0.e0;
  real _t0D74 = -0.1e1;
  real _t0D75 = 0.e0;
  vec3 _t0D76 = [_t0D73, _t0D74, _t0D75];
  real _t0D77 = prim •00CE<$[3]; $[3]; $[]> (_t0D76, dPos0A48);
  real _t0D78 = prim /0055 (_t0D72, _t0D77);
  bool _t0D79 = prim >0080 (time0CD8, _t0D78);
  real _t0D7A = 0.e0;
  real _t0D7B = -0.1e1;
  real _t0D7C = 0.e0;
  vec3 _t0D7D = [_t0D7A, _t0D7B, _t0D7C];
  real _t0D7E = prim •00CE<$[3]; $[3]; $[]> (_t0D7D, dPos0A48);
  real _t0D7F = prim |()|00B5<$[]> (_t0D7E);
  real _t0D80 = 0.1e-7;
  bool _t0D81 = prim >=007E (_t0D7F, _t0D80);
  bool _t0D82 = prim $and01C4 (_t0D79, _t0D81);
  bool _t0D83 = prim $and01C4 (_t0D6B, _t0D82);
  if _t0D83 {
    int _t0D84 = 2;
    bool _t0D85 = prim !=0086 (i0CD7, _t0D84);
    if _t0D85 {
      real _t0D86 = 0.e0;
      real _t0D87 = 0.e0;
      real _t0D88 = -0.1e1;
      real _t0D89 = 0.e0;
      vec3 _t0D8A = [_t0D87, _t0D88, _t0D89];
      real _t0D8B = prim •00CE<$[3]; $[3]; $[]> (_t0D8A, refPos0A47);
      real _t0D8C = prim -0026<$[]> (_t0D86, _t0D8B);
      real _t0D8D = 0.e0;
      real _t0D8E = -0.1e1;
      real _t0D8F = 0.e0;
      vec3 _t0D90 = [_t0D8D, _t0D8E, _t0D8F];
      real _t0D91 = prim •00CE<$[3]; $[3]; $[]> (_t0D90, dPos0A48);
      time0CD8 = prim /0055 (_t0D8C, _t0D91);
      face0CD9 = 2;
    } else {
      real _t0D92 = 0.e0;
      real _t0D93 = 0.e0;
      real _t0D94 = -0.1e1;
      real _t0D95 = 0.e0;
      vec3 _t0D96 = [_t0D93, _t0D94, _t0D95];
      real _t0D97 = prim •00CE<$[3]; $[3]; $[]> (_t0D96, refPos0A47);
      real _t0D98 = prim -0026<$[]> (_t0D92, _t0D97);
      real _t0D99 = 0.e0;
      real _t0D9A = -0.1e1;
      real _t0D9B = 0.e0;
      vec3 _t0D9C = [_t0D99, _t0D9A, _t0D9B];
      real _t0D9D = prim •00CE<$[3]; $[3]; $[]> (_t0D9C, dPos0A48);
      faceTime0CDA = prim /0055 (_t0D98, _t0D9D);
    }
  }
  real _t0D9E = 0.e0;
  real _t0D9F = 0.e0;
  real _t0DA0 = 0.e0;
  real _t0DA1 = -0.1e1;
  vec3 _t0DA2 = [_t0D9F, _t0DA0, _t0DA1];
  real _t0DA3 = prim •00CE<$[3]; $[3]; $[]> (_t0DA2, refPos0A47);
  real _t0DA4 = prim -0026<$[]> (_t0D9E, _t0DA3);
  real _t0DA5 = 0.e0;
  real _t0DA6 = 0.e0;
  real _t0DA7 = -0.1e1;
  vec3 _t0DA8 = [_t0DA5, _t0DA6, _t0DA7];
  real _t0DA9 = prim •00CE<$[3]; $[3]; $[]> (_t0DA8, dPos0A48);
  real _t0DAA = prim /0055 (_t0DA4, _t0DA9);
  real _t0DAB = -0.1e-7;
  bool _t0DAC = prim >=007E (_t0DAA, _t0DAB);
  real _t0DAD = 0.e0;
  real _t0DAE = 0.e0;
  real _t0DAF = 0.e0;
  real _t0DB0 = -0.1e1;
  vec3 _t0DB1 = [_t0DAE, _t0DAF, _t0DB0];
  real _t0DB2 = prim •00CE<$[3]; $[3]; $[]> (_t0DB1, refPos0A47);
  real _t0DB3 = prim -0026<$[]> (_t0DAD, _t0DB2);
  real _t0DB4 = 0.e0;
  real _t0DB5 = 0.e0;
  real _t0DB6 = -0.1e1;
  vec3 _t0DB7 = [_t0DB4, _t0DB5, _t0DB6];
  real _t0DB8 = prim •00CE<$[3]; $[3]; $[]> (_t0DB7, dPos0A48);
  real _t0DB9 = prim /0055 (_t0DB3, _t0DB8);
  bool _t0DBA = prim >0080 (time0CD8, _t0DB9);
  real _t0DBB = 0.e0;
  real _t0DBC = 0.e0;
  real _t0DBD = -0.1e1;
  vec3 _t0DBE = [_t0DBB, _t0DBC, _t0DBD];
  real _t0DBF = prim •00CE<$[3]; $[3]; $[]> (_t0DBE, dPos0A48);
  real _t0DC0 = prim |()|00B5<$[]> (_t0DBF);
  real _t0DC1 = 0.1e-7;
  bool _t0DC2 = prim >=007E (_t0DC0, _t0DC1);
  bool _t0DC3 = prim $and01C4 (_t0DBA, _t0DC2);
  bool _t0DC4 = prim $and01C4 (_t0DAC, _t0DC3);
  if _t0DC4 {
    int _t0DC5 = 3;
    bool _t0DC6 = prim !=0086 (i0CD7, _t0DC5);
    if _t0DC6 {
      real _t0DC7 = 0.e0;
      real _t0DC8 = 0.e0;
      real _t0DC9 = 0.e0;
      real _t0DCA = -0.1e1;
      vec3 _t0DCB = [_t0DC8, _t0DC9, _t0DCA];
      real _t0DCC = prim •00CE<$[3]; $[3]; $[]> (_t0DCB, refPos0A47);
      real _t0DCD = prim -0026<$[]> (_t0DC7, _t0DCC);
      real _t0DCE = 0.e0;
      real _t0DCF = 0.e0;
      real _t0DD0 = -0.1e1;
      vec3 _t0DD1 = [_t0DCE, _t0DCF, _t0DD0];
      real _t0DD2 = prim •00CE<$[3]; $[3]; $[]> (_t0DD1, dPos0A48);
      time0CD8 = prim /0055 (_t0DCD, _t0DD2);
      face0CD9 = 3;
    } else {
      real _t0DD3 = 0.e0;
      real _t0DD4 = 0.e0;
      real _t0DD5 = 0.e0;
      real _t0DD6 = -0.1e1;
      vec3 _t0DD7 = [_t0DD4, _t0DD5, _t0DD6];
      real _t0DD8 = prim •00CE<$[3]; $[3]; $[]> (_t0DD7, refPos0A47);
      real _t0DD9 = prim -0026<$[]> (_t0DD3, _t0DD8);
      real _t0DDA = 0.e0;
      real _t0DDB = 0.e0;
      real _t0DDC = -0.1e1;
      vec3 _t0DDD = [_t0DDA, _t0DDB, _t0DDC];
      real _t0DDE = prim •00CE<$[3]; $[3]; $[]> (_t0DDD, dPos0A48);
      faceTime0CDA = prim /0055 (_t0DD9, _t0DDE);
    }
  }
  int _t0DDF = -1;
  bool _t0DE0 = prim !=0086 (face0CD9, _t0DDF);
  real _t0DE1 = 0.1e1;
  real _t0DE2 = 0.1e-7;
  real _t0DE3 = prim +0017<$[]> (_t0DE1, _t0DE2);
  real _t0DE4 = 0.1e1;
  real _t0DE5 = 0.1e1;
  real _t0DE6 = 0.1e1;
  vec3 _t0DE7 = [_t0DE4, _t0DE5, _t0DE6];
  real _t0DE8 = 0.e0;
  real _t0DE9 = prim max0125 (time0CD8, _t0DE8);
  vec3 _t0DEA = prim *0038<$[3]> (dPos0A48, _t0DE9);
  vec3 _t0DEB = prim +0017<$[3]> (refPos0A47, _t0DEA);
  real _t0DEC = prim •00CE<$[3]; $[3]; $[]> (_t0DE7, _t0DEB);
  bool _t0DED = prim >0080 (_t0DE3, _t0DEC);
  real _t0DEE = 0.1e-7;
  real _t0DEF = 0.1e-7;
  real _t0DF0 = 0.1e-7;
  vec3 _t0DF1 = [_t0DEE, _t0DEF, _t0DF0];
  real _t0DF2 = 0.e0;
  real _t0DF3 = prim max0125 (time0CD8, _t0DF2);
  vec3 _t0DF4 = prim *0038<$[3]> (dPos0A48, _t0DF3);
  vec3 _t0DF5 = prim +0017<$[3]> (refPos0A47, _t0DF4);
  vec3 _t0DF6 = prim +0017<$[3]> (_t0DF1, _t0DF5);
  real _t0DF7 = _t0DF6[0];
  real _t0DF8 = -0.e0;
  bool _t0DF9 = prim >0080 (_t0DF7, _t0DF8);
  real _t0DFA = 0.1e-7;
  real _t0DFB = 0.1e-7;
  real _t0DFC = 0.1e-7;
  vec3 _t0DFD = [_t0DFA, _t0DFB, _t0DFC];
  real _t0DFE = 0.e0;
  real _t0DFF = prim max0125 (time0CD8, _t0DFE);
  vec3 _t0E00 = prim *0038<$[3]> (dPos0A48, _t0DFF);
  vec3 _t0E01 = prim +0017<$[3]> (refPos0A47, _t0E00);
  vec3 _t0E02 = prim +0017<$[3]> (_t0DFD, _t0E01);
  real _t0E03 = _t0E02[1];
  real _t0E04 = -0.e0;
  bool _t0E05 = prim >0080 (_t0E03, _t0E04);
  real _t0E06 = 0.1e-7;
  real _t0E07 = 0.1e-7;
  real _t0E08 = 0.1e-7;
  vec3 _t0E09 = [_t0E06, _t0E07, _t0E08];
  real _t0E0A = 0.e0;
  real _t0E0B = prim max0125 (time0CD8, _t0E0A);
  vec3 _t0E0C = prim *0038<$[3]> (dPos0A48, _t0E0B);
  vec3 _t0E0D = prim +0017<$[3]> (refPos0A47, _t0E0C);
  vec3 _t0E0E = prim +0017<$[3]> (_t0E09, _t0E0D);
  real _t0E0F = _t0E0E[2];
  real _t0E10 = -0.e0;
  bool _t0E11 = prim >0080 (_t0E0F, _t0E10);
  bool _t0E12 = prim $and01C4 (_t0E05, _t0E11);
  bool _t0E13 = prim $and01C4 (_t0DF9, _t0E12);
  bool _t0E14 = prim $and01C4 (_t0DED, _t0E13);
  bool _t0E15 = prim $and01C4 (_t0DE0, _t0E14);
  if _t0E15 {
    real _t0E16 = 0.e0;
    real _t0E17 = prim max0125 (time0CD8, _t0E16);
    real _t0E18 = (real)face0CD9;
    vec2 _t0E19 = [_t0E17, _t0E18];
    return _t0E19;
  } else {
    real _t0E1A = -inf;
    bool _t0E1B = prim ==0084 (_t0E1A, faceTime0CDA);
    if _t0E1B {
      real _t0E1C = -0.1e1;
      real _t0E1D = -0.1e1;
      vec2 _t0E1E = [_t0E1C, _t0E1D];
      return _t0E1E;
    } else {
      real _t0E1F = 0.e0;
      real _t0E20 = prim max0125 (faceTime0CDA, _t0E1F);
      real _t0E21 = (real)i0CD7;
      vec2 _t0E22 = [_t0E20, _t0E21];
      return _t0E22;
    }
  }
}
function Femdata: Mesh#0 domain0E25 (Femdata: Space arg00E26)
{
  Femdata: Mesh _t0E27 = extractFem(arg00E26, Mesh);
  return _t0E27;
}
function Femdata: Space#0 space0E28 (Femdata: FemFunc arg00E29)
{
  Femdata: Space _t0E2A = extractFem(arg00E29, Space);
  return _t0E2A;
}
function Femdata: FuncCell#0 funcCell0E2B (Femdata: FemFunc arg00E2C, Femdata: MeshCell arg10E2D)
{
  int _t0E2E = extractFemItem(CellIndex(MeshCell), int, arg10E2D);
  Femdata: FuncCell _t0E2F = loadFem(FuncCell, arg00E2C, _t0E2E);
  return _t0E2F;
}
function bool#1 insideTest0E3D (vec3 x0E3E)
{
  real _t0E3F = 0.e0;
  real _t0E40 = 0.e0;
  real _t0E41 = 0.e0;
  vec3 _t0E42 = [_t0E3F, _t0E40, _t0E41];
  vec3 mid0E43 = prim -0026<$[3]> (x0E3E, _t0E42);
  bool _t0E44;
  real _t0E45 = mid0E43[0];
  real _t0E46 = prim |()|00B5<$[]> (_t0E45);
  real _t0E47 = 0.1e0;
  bool _t0E48 = prim >0080 (_t0E46, _t0E47);
  if _t0E48 {
    bool _t0E49;
    real _t0E4A = mid0E43[1];
    real _t0E4B = prim |()|00B5<$[]> (_t0E4A);
    real _t0E4C = 0.1e0;
    bool _t0E4D = prim >0080 (_t0E4B, _t0E4C);
    if _t0E4D {
      real _t0E4E = mid0E43[2];
      real _t0E4F = prim |()|00B5<$[]> (_t0E4E);
      real _t0E50 = 0.1e0;
      _t0E49 = prim >0080 (_t0E4F, _t0E50);
    } else {
      _t0E49 = false;
    }
    _t0E44 = _t0E49;
  } else {
    _t0E44 = false;
  }
  bool z0E51 = _t0E44;
  bool _t0E52;
  real _t0E53 = prim |()|00B5<$[3]> (mid0E43);
  real _t0E54 = 0.5e1;
  bool _t0E55 = prim <007A (_t0E53, _t0E54);
  if _t0E55 {
    bool _t0E56;
    real _t0E57 = prim |()|00B5<$[3]> (mid0E43);
    real _t0E58 = 0.2e1;
    bool _t0E59 = prim >0080 (_t0E57, _t0E58);
    if _t0E59 {
      _t0E56 = z0E51;
    } else {
      _t0E56 = false;
    }
    _t0E52 = _t0E56;
  } else {
    _t0E52 = false;
  }
  return _t0E52;
}
function vec3#3 grad0E5A (vec3 s0E5B)
{
  real x0E5C = s0E5B[0];
  real y0E5D = s0E5B[1];
  real z0E5E = s0E5B[2];
  real _t0E5F = prim *0034 (x0E5C, x0E5C);
  real _t0E60 = prim *0034 (y0E5D, y0E5D);
  real _t0E61 = prim +0017<$[]> (_t0E5F, _t0E60);
  real _t0E62 = prim *0034 (z0E5E, z0E5E);
  real _t0E63 = prim +0017<$[]> (_t0E61, _t0E62);
  real p0E64 = prim unary -008B<$[]> (_t0E63);
  int _t0E65 = 2;
  real _t0E66 = prim ^0068 (y0E5D, _t0E65);
  real _t0E67 = prim *0034 (_t0E66, z0E5E);
  real _t0E68 = 0.2e1;
  real _t0E69 = prim *0034 (_t0E68, x0E5C);
  real _t0E6A = prim *0034 (_t0E69, y0E5D);
  real _t0E6B = prim *0034 (_t0E6A, z0E5E);
  int _t0E6C = 2;
  real _t0E6D = prim ^0068 (y0E5D, _t0E6C);
  real _t0E6E = prim *0034 (x0E5C, _t0E6D);
  vec3 g0E6F = [_t0E67, _t0E6B, _t0E6E];
  return g0E6F;
}
function tensor[3,3]#3 hess0E70 (vec3 s0E71)
{
  real x0E72 = s0E71[0];
  real y0E73 = s0E71[1];
  real z0E74 = s0E71[2];
  real _t0E75 = prim *0034 (x0E72, x0E72);
  real _t0E76 = prim *0034 (y0E73, y0E73);
  real _t0E77 = prim +0017<$[]> (_t0E75, _t0E76);
  real _t0E78 = prim *0034 (z0E74, z0E74);
  real _t0E79 = prim +0017<$[]> (_t0E77, _t0E78);
  real p0E7A = prim unary -008B<$[]> (_t0E79);
  real _t0E7B = 0.e0;
  real _t0E7C = 0.2e1;
  real _t0E7D = prim *0034 (_t0E7C, y0E73);
  real _t0E7E = prim *0034 (_t0E7D, z0E74);
  int _t0E7F = 2;
  real _t0E80 = prim ^0068 (y0E73, _t0E7F);
  vec3 _t0E81 = [_t0E7B, _t0E7E, _t0E80];
  real _t0E82 = 0.2e1;
  real _t0E83 = prim *0034 (_t0E82, y0E73);
  real _t0E84 = prim *0034 (_t0E83, z0E74);
  real _t0E85 = 0.2e1;
  real _t0E86 = prim *0034 (_t0E85, x0E72);
  real _t0E87 = prim *0034 (_t0E86, z0E74);
  real _t0E88 = 0.2e1;
  real _t0E89 = prim *0034 (_t0E88, x0E72);
  real _t0E8A = prim *0034 (_t0E89, y0E73);
  vec3 _t0E8B = [_t0E84, _t0E87, _t0E8A];
  int _t0E8C = 2;
  real _t0E8D = prim ^0068 (y0E73, _t0E8C);
  real _t0E8E = 0.2e1;
  real _t0E8F = prim *0034 (_t0E8E, x0E72);
  real _t0E90 = prim *0034 (_t0E8F, y0E73);
  real _t0E91 = 0.e0;
  vec3 _t0E92 = [_t0E8D, _t0E90, _t0E91];
  tensor[3,3] hess0E93 = [_t0E81, _t0E8B, _t0E92];
  return hess0E93;
}
function vec3#3 fStep0E94 (vec3 s0E95)
{
  vec3 g0E96 = func grad0E5A (s0E95);
  tensor[3,3] H0E97 = func hess0E70 (s0E95);
  vec3[3] E0E98 = prim evecs00A0 (H0E97);
  real[3] L0E99 = prim evals009F (H0E97);
  real _t0E9A = 0.1e1;
  int _t0E9B = 2;
  real _t0E9C = prim $sub01C0<real; %3> (L0E99, _t0E9B);
  real _t0E9D = prim /0055 (_t0E9A, _t0E9C);
  real _t0E9E = prim unary -008B<$[]> (_t0E9D);
  int _t0E9F = 2;
  vec3 _t0EA0 = prim $sub01C0<vec3; %3> (E0E98, _t0E9F);
  vec3 _t0EA1 = prim *0036<$[3]> (_t0E9E, _t0EA0);
  int _t0EA2 = 2;
  vec3 _t0EA3 = prim $sub01C0<vec3; %3> (E0E98, _t0EA2);
  tensor[3,3] _t0EA4 = prim ⊗00E5<$[3]; $[3]; $[3,3]> (_t0EA1, _t0EA3);
  vec3 up0EA5 = prim •00CE<$[3,3]; $[3]; $[3]> (_t0EA4, g0E96);
  bool _t0EA6;
  real _t0EA7 = up0EA5[0];
  real _t0EA8 = up0EA5[0];
  bool _t0EA9 = prim ==0084 (_t0EA7, _t0EA8);
  bool _t0EAA = prim !00BC (_t0EA9);
  if _t0EAA {
    _t0EA6 = true;
  } else {
    bool _t0EAB;
    real _t0EAC = up0EA5[1];
    real _t0EAD = up0EA5[1];
    bool _t0EAE = prim ==0084 (_t0EAC, _t0EAD);
    bool _t0EAF = prim !00BC (_t0EAE);
    if _t0EAF {
      _t0EAB = true;
    } else {
      real _t0EB0 = up0EA5[2];
      real _t0EB1 = up0EA5[2];
      bool _t0EB2 = prim ==0084 (_t0EB0, _t0EB1);
      _t0EAB = prim !00BC (_t0EB2);
    }
    _t0EA6 = _t0EAB;
  }
  if _t0EA6 {
    real _t0EB3 = +inf;
    real _t0EB4 = +inf;
    real _t0EB5 = +inf;
    vec3 _t0EB6 = [_t0EB3, _t0EB4, _t0EB5];
    return _t0EB6;
  }
  return up0EA5;
}
function bool#4 posNanCheck0EB7 (vec3 up0EB8)
{
  bool _t0EB9;
  real _t0EBA = up0EB8[0];
  real _t0EBB = up0EB8[0];
  bool _t0EBC = prim ==0084 (_t0EBA, _t0EBB);
  bool _t0EBD = prim !00BC (_t0EBC);
  if _t0EBD {
    _t0EB9 = true;
  } else {
    bool _t0EBE;
    real _t0EBF = up0EB8[1];
    real _t0EC0 = up0EB8[1];
    bool _t0EC1 = prim ==0084 (_t0EBF, _t0EC0);
    bool _t0EC2 = prim !00BC (_t0EC1);
    if _t0EC2 {
      _t0EBE = true;
    } else {
      real _t0EC3 = up0EB8[2];
      real _t0EC4 = up0EB8[2];
      bool _t0EC5 = prim ==0084 (_t0EC3, _t0EC4);
      _t0EBE = prim !00BC (_t0EC5);
    }
    _t0EB9 = _t0EBE;
  }
  return _t0EB9;
}
function tensor[3,3]#1 fPerp0EC6 (vec3 s0EC7)
{
  vec3 g0EC8 = func grad0E5A (s0EC7);
  tensor[3,3] H0EC9 = func hess0E70 (s0EC7);
  vec3[3] _t0ECA = prim evecs00A0 (H0EC9);
  int _t0ECB = 2;
  vec3 E20ECC = prim $sub01C0<vec3; %3> (_t0ECA, _t0ECB);
  tensor[3,3] _t0ECD = prim $id01B9<%3> ();
  tensor[3,3] _t0ECE = prim ⊗00E5<$[3]; $[3]; $[3,3]> (E20ECC, E20ECC);
  tensor[3,3] m0ECF = prim -0026<$[3,3]> (_t0ECD, _t0ECE);
  real t0ED0 = prim :00FC<$[3,3]; $[3,3]; $[]> (m0ECF, m0ECF);
  bool _t0ED1 = prim ==0084 (t0ED0, t0ED0);
  bool _t0ED2 = prim !00BC (_t0ED1);
  if _t0ED2 {
    tensor[3,3] _t0ED3 = prim $zero01BB<$[3,3]> ();
    return _t0ED3;
  }
  return m0ECF;
}
function real#1 fStrength0ED4 (vec3 s0ED5)
{
  vec3 g0ED6 = func grad0E5A (s0ED5);
  tensor[3,3] H0ED7 = func hess0E70 (s0ED5);
  real[3] _t0ED8 = prim evals009F (H0ED7);
  int _t0ED9 = 2;
  real _t0EDA = prim $sub01C0<real; %3> (_t0ED8, _t0ED9);
  real _t0EDB = prim unary -008B<$[]> (_t0EDA);
  real _t0EDC = prim |()|00B5<$[3]> (g0ED6);
  real _t0EDD = prim +0017<$[]> (fBias0501, _t0EDC);
  real str0EDE = prim /0055 (_t0EDB, _t0EDD);
  return str0EDE;
}
function real#1 phi0EDF (real r0EE0)
{
  real _t0EE1 = 0.1e1;
  real _t0EE2 = prim -0026<$[]> (_t0EE1, r0EE0);
  int _t0EE3 = 4;
  real _t0EE4 = prim ^0068 (_t0EE2, _t0EE3);
  return _t0EE4;
}
function real#1 phi'0EE5 (real r0EE6)
{
  int _t0EE7 = -4;
  real _t0EE8 = (real)_t0EE7;
  real _t0EE9 = 0.1e1;
  real _t0EEA = prim -0026<$[]> (_t0EE9, r0EE6);
  int _t0EEB = 3;
  real _t0EEC = prim ^0068 (_t0EEA, _t0EEB);
  real _t0EED = prim *0034 (_t0EE8, _t0EEC);
  return _t0EED;
}
function real#2 enr0EEE (vec3 x0EEF)
{
  real _t0EF0 = prim |()|00B5<$[3]> (x0EEF);
  real _t0EF1 = prim /0055 (_t0EF0, rad04FE);
  real _t0EF2 = func phi0EDF (_t0EF1);
  return _t0EF2;
}
function vec3#1 frc0EF3 (vec3 x0EF4)
{
  real _t0EF5 = prim |()|00B5<$[3]> (x0EF4);
  real _t0EF6 = prim /0055 (_t0EF5, rad04FE);
  real _t0EF7 = func phi'0EE5 (_t0EF6);
  real _t0EF8 = 0.1e1;
  real _t0EF9 = prim /0055 (_t0EF8, rad04FE);
  real _t0EFA = prim *0034 (_t0EF7, _t0EF9);
  vec3 _t0EFB = prim *0036<$[3]> (_t0EFA, x0EF4);
  real _t0EFC = prim |()|00B5<$[3]> (x0EF4);
  vec3 _t0EFD = prim /0057<$[3]> (_t0EFB, _t0EFC);
  return _t0EFD;
}
function bool#3 posTest0EFE (vec3 pos0EFF)
{
  bool _t0F00;
  bool _t0F01 = func insideTest0E3D (pos0EFF);
  if _t0F01 {
    bool _t0F02;
    bool _t0F03 = func posNanCheck0EB7 (pos0EFF);
    bool _t0F04 = prim !00BC (_t0F03);
    if _t0F04 {
      real _t0F05 = func fStrength0ED4 (pos0EFF);
      _t0F02 = prim >=007E (_t0F05, fStren0502);
    } else {
      _t0F02 = false;
    }
    _t0F00 = _t0F02;
  } else {
    _t0F00 = false;
  }
  return _t0F00;
}
globalInit {
  int _t04F2 = 0;
  int _t04F0 = 1;
  int _t04F4 = extractFemItem(NumCell(Mesh), int, meshData04EE);
  int _t04F3 = prim -0024 (_t04F4, _t04F0);
  int[] _t04F7 = prim $range01C3 (_t04F2, _t04F3);
  Femdata: MeshCell[] _t04F8 = {};
  foreach _t04F6 in _t04F7 {
    Femdata: MeshCell _t04F9 = loadFem(MeshCell, meshData04EE, _t04F6);
    _t04F8 = prim @0010<Femdata: MeshCell> (_t04F8, _t04F9);
  }
  simplex0E3C = func refcell055B (meshData04EE);
}
strand particle (vec3 pos00F06, real hh00F07) in 3D {
  output vec3 pos0F08;
  output vec3 _pos0F09;
  real hh0F0A;
  vec3 step0F0B;
  bool found0F0C;
  int nfs0F0D;
  int test0F0E;
  int testp0F0F;
  int steps0F10;
  {
    pos0F08 = pos00F06;
    _pos0F09 = pos0F08;
    hh0F0A = hh00F07;
    step0F0B = prim $zero01BB<$[3]> ();
    found0F0C = false;
    nfs0F0D = 0;
    test0F0E = 1;
    testp0F0F = 0;
    steps0F10 = 0;
  }
  update
  {
    int _t0F11 = 1;
    steps0F10 = prim +0015 (steps0F10, _t0F11);
    bool _t0F12 = func posTest0EFE (pos0F08);
    bool _t0F13 = prim !00BC (_t0F12);
    if _t0F13 {
      die;
    }
    bool _t0F14 = prim !00BC (found0F0C);
    if _t0F14 {
      step0F0B = func fStep0E94 (pos0F08);
      pos0F08 = prim +0017<$[3]> (pos0F08, step0F0B);
      _pos0F09 = pos0F08;
      bool _t0F15 = func posNanCheck0EB7 (pos0F08);
      if _t0F15 {
        die;
      }
      real _t0F16 = prim |()|00B5<$[3]> (step0F0B);
      real _t0F17 = prim /0055 (_t0F16, rad04FE);
      bool _t0F18 = prim >0080 (_t0F17, eps04FF);
      if _t0F18 {
        int _t0F19 = 1;
        nfs0F0D = prim +0015 (nfs0F0D, _t0F19);
        int _t0F1A = 10;
        bool _t0F1B = prim >007F (nfs0F0D, _t0F1A);
        if _t0F1B {
          die;
        }
      } else {
        found0F0C = true;
        testp0F0F = 1;
      }
    } else {
      vec3 _t0F1C = func fStep0E94 (pos0F08);
      pos0F08 = prim +0017<$[3]> (pos0F08, _t0F1C);
      _pos0F09 = pos0F08;
      bool _t0F1D = func posNanCheck0EB7 (pos0F08);
      if _t0F1D {
        die;
      }
      step0F0B = prim $zero01BB<$[3]> ();
      real oldE0F1E = 0.e0;
      vec3 force0F1F = prim $zero01BB<$[3]> ();
      int nn0F20 = 0;
      particle[] _t0F21 = prim sphere0198<particle> (_pos0F09, rad04FE);
      foreach P0F22 in _t0F21 {
        vec3 _t0F23 = P0F22.pos0F08;
        vec3 _t0F24 = prim -0026<$[3]> (_t0F23, pos0F08);
        real _t0F25 = func enr0EEE (_t0F24);
        oldE0F1E = prim +0017<$[]> (oldE0F1E, _t0F25);
        vec3 _t0F26 = P0F22.pos0F08;
        vec3 _t0F27 = prim -0026<$[3]> (_t0F26, pos0F08);
        vec3 _t0F28 = func frc0EF3 (_t0F27);
        force0F1F = prim +0017<$[3]> (force0F1F, _t0F28);
        int _t0F29 = 1;
        nn0F20 = prim +0015 (nn0F20, _t0F29);
      }
      int _t0F2A = 0;
      bool _t0F2B = prim ==0082 (_t0F2A, nn0F20);
      if _t0F2B {
        real _t0F2C = 0.5e0;
        real _t0F2D = prim *0034 (_t0F2C, rad04FE);
        real _t0F2E = 0.e0;
        real _t0F2F = 0.e0;
        vec3 _t0F30 = [_t0F2D, _t0F2E, _t0F2F];
        vec3 npos0F31 = prim +0017<$[3]> (pos0F08, _t0F30);
        bool _t0F32 = func posTest0EFE (npos0F31);
        if _t0F32 {
          new particle (npos0F31, hh0F0A);
        }
        continue;
      }
      tensor[3,3] _t0F33 = func fPerp0EC6 (pos0F08);
      force0F1F = prim •00CE<$[3,3]; $[3]; $[3]> (_t0F33, force0F1F);
      vec3 es0F34 = prim *0036<$[3]> (hh0F0A, force0F1F);
      real _t0F35 = prim |()|00B5<$[3]> (es0F34);
      bool _t0F36 = prim >0080 (_t0F35, rad04FE);
      if _t0F36 {
        real _t0F37 = prim |()|00B5<$[3]> (es0F34);
        real _t0F38 = prim /0055 (rad04FE, _t0F37);
        hh0F0A = prim *0034 (hh0F0A, _t0F38);
        real _t0F39 = prim |()|00B5<$[3]> (es0F34);
        real _t0F3A = prim /0055 (rad04FE, _t0F39);
        es0F34 = prim *0038<$[3]> (es0F34, _t0F3A);
      }
      vec3 samplePos0F3B = prim +0017<$[3]> (pos0F08, es0F34);
      vec3 fs0F3C = func fStep0E94 (samplePos0F3B);
      real _t0F3D = prim |()|00B5<$[3]> (fs0F3C);
      real _t0F3E = prim |()|00B5<$[3]> (es0F34);
      real _t0F3F = prim /0055 (_t0F3D, _t0F3E);
      real _t0F40 = 0.5e0;
      bool _t0F41 = prim >0080 (_t0F3F, _t0F40);
      if _t0F41 {
        real _t0F42 = 0.5e0;
        hh0F0A = prim *0034 (hh0F0A, _t0F42);
        continue;
      }
      vec3 oldPos0F43 = pos0F08;
      vec3 up0F44 = prim +0017<$[3]> (fs0F3C, es0F34);
      pos0F08 = prim +0017<$[3]> (pos0F08, up0F44);
      _pos0F09 = pos0F08;
      particle[] _t0F45 = prim sphere0198<particle> (_pos0F09, rad04FE);
      real accum0F4A = 0.e0;
      foreach P0F46 in _t0F45 {
        vec3 _t0F47 = P0F46.pos0F08;
        vec3 _t0F48 = prim -0026<$[3]> (pos0F08, _t0F47);
        real _t0F49 = func enr0EEE (_t0F48);
        accum0F4A = prim +0017<$[]> (accum0F4A, _t0F49);
      }
      real newE0F4B = accum0F4A;
      real _t0F4C = prim -0026<$[]> (newE0F4B, oldE0F1E);
      real _t0F4D = 0.5e0;
      vec3 _t0F4E = prim -0026<$[3]> (pos0F08, oldPos0F43);
      vec3 _t0F4F = prim *0036<$[3]> (_t0F4D, _t0F4E);
      vec3 _t0F50 = prim unary -008B<$[3]> (force0F1F);
      real _t0F51 = prim •00CE<$[3]; $[3]; $[]> (_t0F4F, _t0F50);
      bool _t0F52 = prim >0080 (_t0F4C, _t0F51);
      if _t0F52 {
        pos0F08 = oldPos0F43;
        _pos0F09 = pos0F08;
        real _t0F53 = 0.5e0;
        hh0F0A = prim *0034 (hh0F0A, _t0F53);
        continue;
      }
      real _t0F54 = 0.11e1;
      hh0F0A = prim *0034 (hh0F0A, _t0F54);
      step0F0B = up0F44;
      bool _t0F55 = func posNanCheck0EB7 (pos0F08);
      if _t0F55 {
        die;
      }
      int _t0F56 = 5;
      bool _t0F57 = prim <0079 (nn0F20, _t0F56);
      if _t0F57 {
        real _t0F58 = 0.5e0;
        real _t0F59 = prim *0034 (_t0F58, rad04FE);
        vec3 _t0F5A = prim normalize0137<$[3]> (es0F34);
        vec3 _t0F5B = prim *0036<$[3]> (_t0F59, _t0F5A);
        vec3 npos0F5C = prim +0017<$[3]> (pos0F08, _t0F5B);
        bool _t0F5D = func posTest0EFE (npos0F5C);
        if _t0F5D {
          new particle (npos0F5C, hh0F0A);
        }
      }
    }
  }
}
collection {
  foreach x0F5E in ipos0504 {
    real _t0F5F = 0.1e1;
    new particle (x0F5E, _t0F5F);
  }
}
update {
  int res0F60= sum<int> { (P0F63) => {
      int _t0F64 = P0F63.test0F0E;
      return _t0F64;
    } (P0F61, P0F61)
  | P0F61 in all };
  int num0F66 = res0F60;
  int res0F67= max<int> { (P0F6A) => {
      int _t0F6B = P0F6A.steps0F10;
      return _t0F6B;
    } (P0F68, P0F68)
  | P0F68 in all };
  int steps0F6D = res0F67;
  int res0F6E= sum<int> { (P0F71) => {
      int _t0F72 = P0F71.testp0F0F;
      return _t0F72;
    } (P0F6F, P0F6F)
  | P0F6F in all };
  int numFound0F74 = res0F6E;
  bool res0F75= all { (P0F78) => {
      bool _t0F79 = P0F78.found0F0C;
      return _t0F79;
    } (P0F76, P0F76)
  | P0F76 in all };
  bool allFound0F7B = res0F75;
  real res0F7C= max<real> { (P0F80) => {
      vec3 _t0F81 = P0F80.step0F0B;
      real _t0F82 = prim |()|00B5<$[3]> (_t0F81);
      return _t0F82;
    } (P0F7D, P0F7D)
  | P0F7D in all };
  real maxStep0F84 = res0F7C;
  string _t0F85 = "One run:";
  string _t0F86 = " and ";
  real _t0F87 = prim /0055 (maxStep0F84, rad04FE);
  string _t0F88 = " and ";
  real _t0F89 = prim /0055 (maxStep0F84, rad04FE);
  bool _t0F8A = prim <007A (_t0F89, eps04FF);
  string _t0F8B = " and ";
  string _t0F8C = " of ";
  string _t0F8D = "\n";
  print (_t0F85, allFound0F7B, _t0F86, _t0F87, _t0F88, _t0F8A, _t0F8B, numFound0F74, _t0F8C, num0F66, _t0F8D);
  if allFound0F7B {
    real _t0F8E = prim /0055 (maxStep0F84, rad04FE);
    bool _t0F8F = prim <007A (_t0F8E, eps04FF);
    if _t0F8F {
      string _t0F90 = "CONVERGED!\n";
      print (_t0F90);
      stabilize_all;
    }
  }
  int _t0F91 = 2000;
  bool _t0F92 = prim >007F (steps0F6D, _t0F91);
  if _t0F92 {
    stabilize_all;
  }
  string _t0F93 = "Current steps:";
  string _t0F94 = "\n";
  print (_t0F93, steps0F6D, _t0F94);
}
/* Program end */
/* Simplified Program (after after map-reduce-fusion) start */
properties: GlobalInit,StabilizeAll,GlobalReduce,StrandSets,GlobalUpdate,NewStrands,StrandCommunication,StrandsMayDie,HasInputs,HasGlobals,ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
input FemData:Mesh meshData04EE;
input FemData:Space 0space04FA_intermedateGlobal04FB;
input FemData:FemFunc 0data04FC_intermedateGlobal04FD;
input real rad04FE = <default>;
input real eps04FF = <default>;
input real v00500 = <default>;
input real fBias0501 = <default>;
input real fStren0502 = <default>;
input real zfuz0503 = <default>;
input vec3[] ipos0504;
constants {
  rad04FE = 0.1e-1;
  eps04FF = 0.1e-1;
  v00500 = 0.625e-1;
  fBias0501 = 0.1e-1;
  fStren0502 = 0.1e-1;
  zfuz0503 = 0.1e-1;
}
function bool#0 !=0505 (Femdata: MeshCell cell10506, Femdata: MeshCell cell10507)
{
  int _t0508 = extractFemItem(CellIndex(Mesh), int, cell10506);
  int _t0509 = extractFemItem(CellIndex(Mesh), int, cell10507);
  bool _t050A = prim !=0086 (_t0508, _t0509);
  return _t050A;
}
function bool#0 ==050B (Femdata: MeshCell cell10506, Femdata: MeshCell cell10507)
{
  int _t050C = extractFemItem(CellIndex(Mesh), int, cell10506);
  int _t050D = extractFemItem(CellIndex(Mesh), int, cell10507);
  bool _t050E = prim ==0082 (_t050C, _t050D);
  return _t050E;
}
function Femdata: MeshPos#0 findPos050F (Femdata: Mesh mesh0510, vec3 pos0511)
{
  real _t0512 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t0513 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t0514 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  xn0515 = [_t0512, _t0513, _t0514];
  newtonInt0516 = 0;
  cellInt0517 = extractFemItem(StartCell(Mesh), int, mesh0510);
  int _t0518 = extractFemItem(NumCell(Mesh), int, mesh0510);
  int _t0519 = 1;
  numCell051A = prim -0024 (_t0518, _t0519);
  yayCells051B = extractFemItem2(NearbyCell(File=spat.in)(Mesh), vec3, mesh0510, pos0511 : vec3);
  foreach cellItter051F in yayCells051B {
    real _t051C = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    real _t051D = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    real _t051E = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    xn0515 = [_t051C, _t051D, _t051E];
    cellInt0517 = cellItter051F;
    field(3)[3] _t0520 = femField(mesh0510,cellInt0517,field(3)[3],Transform,);
    field(3)[3,3] _t0521 = prim ∇⊗00AD<#∞; %3; $[]; %3> (_t0520);
    field(3)[3,3] _t0522 = prim inv015E<#∞; %3> (_t0521);
    real _t0523 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    real _t0524 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    real _t0525 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    vec3 _t0526 = [_t0523, _t0524, _t0525];
    A0527 = prim @00A5<#∞; %3; $[3,3]> (_t0522, _t0526);
    int _t0528 = 0;
    int _t0529 = 16;
    int[] _t052A = prim $range01C3 (_t0528, _t0529);
    foreach newtonItter0559 in _t052A {
      field(3)[3] _t052B = femField(mesh0510,cellInt0517,field(3)[3],Transform,);
      field(3)[3] _t052C = prim -002E<#∞; %3; $[3]> (_t052B, pos0511);
      field(3)[3] _t052D = prim •00D4<#∞; %3; $[3,3]; $[3]; $[3]> (A0527, _t052C);
      delta052E = prim @00A5<#∞; %3; $[3]> (_t052D, xn0515);
      xn0515 = prim -0026<$[3]> (xn0515, delta052E);
      real _t052F = 0.1e-7;
      real _t0530 = 0.1e-7;
      real _t0531 = prim *0034 (_t052F, _t0530);
      real _t0532 = prim •00CE<$[3]; $[3]; $[]> (delta052E, delta052E);
      bool _t0533 = prim >=007E (_t0531, _t0532);
      if _t0533 {
        real _t0534 = 0.1e1;
        real _t0535 = 0.1e-7;
        real _t0536 = prim +0017<$[]> (_t0534, _t0535);
        real _t0537 = 0.1e1;
        real _t0538 = 0.1e1;
        real _t0539 = 0.1e1;
        vec3 _t053A = [_t0537, _t0538, _t0539];
        real _t053B = prim •00CE<$[3]; $[3]; $[]> (_t053A, xn0515);
        bool _t053C = prim >0080 (_t0536, _t053B);
        real _t053D = 0.1e-7;
        real _t053E = 0.1e-7;
        real _t053F = 0.1e-7;
        vec3 _t0540 = [_t053D, _t053E, _t053F];
        vec3 _t0541 = prim +0017<$[3]> (_t0540, xn0515);
        real _t0542 = _t0541[0];
        real _t0543 = -0.e0;
        bool _t0544 = prim >0080 (_t0542, _t0543);
        real _t0545 = 0.1e-7;
        real _t0546 = 0.1e-7;
        real _t0547 = 0.1e-7;
        vec3 _t0548 = [_t0545, _t0546, _t0547];
        vec3 _t0549 = prim +0017<$[3]> (_t0548, xn0515);
        real _t054A = _t0549[1];
        real _t054B = -0.e0;
        bool _t054C = prim >0080 (_t054A, _t054B);
        real _t054D = 0.1e-7;
        real _t054E = 0.1e-7;
        real _t054F = 0.1e-7;
        vec3 _t0550 = [_t054D, _t054E, _t054F];
        vec3 _t0551 = prim +0017<$[3]> (_t0550, xn0515);
        real _t0552 = _t0551[2];
        real _t0553 = -0.e0;
        bool _t0554 = prim >0080 (_t0552, _t0553);
        bool _t0555 = prim $and01C4 (_t054C, _t0554);
        bool _t0556 = prim $and01C4 (_t0544, _t0555);
        bool _t0557 = prim $and01C4 (_t053C, _t0556);
        if _t0557 {
          Femdata: MeshPos _t0558 = extractFemItemN((mesh0510, cellInt0517, xn0515, pos0511),AllBuild(MeshPos),);
          return _t0558;
        }
      }
    }
  }
  Femdata: MeshPos _t055A = extractFemItemN((mesh0510),InvalidBuild(MeshPos),);
  return _t055A;
}
function Femdata: RefCell#1 refcell055B (Femdata: Mesh arg0055C)
{
  Femdata: RefCell _t055D = extractFemItem(RefCell(Mesh), Femdata: RefCell, arg0055C);
  return _t055D;
}
function Femdata: MeshCell[]#0 cells055E (Femdata: Mesh arg0055F)
{
  Femdata: MeshCell[] _t0560 = extractFemItem(Cells(Mesh), Femdata: MeshCell[], arg0055F);
  return _t0560;
}
function Femdata: MeshCell[]#0 cells0561 (Femdata: Mesh arg0055F)
{
  int _t0562 = 0;
  int _t0563 = extractFemItem(NumCell(Mesh), int, arg0055F);
  int[] _t0564 = prim $range01C3 (_t0562, _t0563);
  Femdata: MeshCell[] accum0567 = {};
  foreach i0565 in _t0564 {
    Femdata: MeshCell _t0566 = loadFem(MeshCell, arg0055F, i0565);
    accum0567 = prim @0010<Femdata: MeshCell> (accum0567, _t0566);
  }
  return accum0567;
}
function int#0 numCell0568 (Femdata: Mesh arg0055C)
{
  int _t0569 = extractFemItem(NumCell(Mesh), int, arg0055C);
  return _t0569;
}
function tensor[3,3,3,3]#0 mesh_t_transform_3056A (vec3 pos056B, int cell056C, Femdata: Mesh mesh056D)
{
  field(3)[3] _t056E = femField(mesh056D,cell056C,field(3)[3],Transform,);
  field(3)[3,3] _t056F = prim ∇⊗00AD<#∞; %3; $[]; %3> (_t056E);
  field(3)[3,3,3] _t0570 = prim ∇⊗00AD<#∞; %3; $[3]; %3> (_t056F);
  field(3)[3,3,3,3] _t0571 = prim ∇⊗00AD<#∞; %3; $[3,3]; %3> (_t0570);
  tensor[3,3,3,3] _t0572 = prim @00A5<#∞; %3; $[3,3,3,3]> (_t0571, pos056B);
  return _t0572;
}
function tensor[3,3,3]#0 mesh_t_transform_20573 (vec3 pos056B, int cell056C, Femdata: Mesh mesh056D)
{
  field(3)[3] _t0574 = femField(mesh056D,cell056C,field(3)[3],Transform,);
  field(3)[3,3] _t0575 = prim ∇⊗00AD<#∞; %3; $[]; %3> (_t0574);
  field(3)[3,3,3] _t0576 = prim ∇⊗00AD<#∞; %3; $[3]; %3> (_t0575);
  tensor[3,3,3] _t0577 = prim @00A5<#∞; %3; $[3,3,3]> (_t0576, pos056B);
  return _t0577;
}
function tensor[3,3]#0 mesh_t_transform_10578 (vec3 pos056B, int cell056C, Femdata: Mesh mesh056D)
{
  field(3)[3] _t0579 = femField(mesh056D,cell056C,field(3)[3],Transform,);
  field(3)[3,3] _t057A = prim ∇⊗00AD<#∞; %3; $[]; %3> (_t0579);
  tensor[3,3] _t057B = prim @00A5<#∞; %3; $[3,3]> (_t057A, pos056B);
  return _t057B;
}
function vec3#2 mesh_t_transform_0057C (vec3 pos056B, int cell056C, Femdata: Mesh mesh056D)
{
  field(3)[3] _t057D = femField(mesh056D,cell056C,field(3)[3],Transform,);
  vec3 _t057E = prim @00A5<#∞; %3; $[3]> (_t057D, pos056B);
  return _t057E;
}
function Femdata: MeshPos#0 _mesh_t_newtonInverse057F (vec3 pos0580, int cellInt0581, Femdata: Mesh mesh0582)
{
  real _t0583 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t0584 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t0585 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  xn0586 = [_t0583, _t0584, _t0585];
  field(3)[3] _t0587 = femField(mesh0582,cellInt0581,field(3)[3],Transform,);
  field(3)[3,3] _t0588 = prim ∇⊗00AD<#∞; %3; $[]; %3> (_t0587);
  field(3)[3,3] _t0589 = prim inv015E<#∞; %3> (_t0588);
  real _t058A = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t058B = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t058C = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  vec3 _t058D = [_t058A, _t058B, _t058C];
  A058E = prim @00A5<#∞; %3; $[3,3]> (_t0589, _t058D);
  int _t058F = 0;
  int _t0590 = 16;
  int[] _t0591 = prim $range01C3 (_t058F, _t0590);
  foreach itter05C1 in _t0591 {
    field(3)[3] _t0592 = femField(mesh0582,cellInt0581,field(3)[3],Transform,);
    field(3)[3] _t0593 = prim -002E<#∞; %3; $[3]> (_t0592, pos0580);
    field(3)[3] _t0594 = prim •00D4<#∞; %3; $[3,3]; $[3]; $[3]> (A058E, _t0593);
    delta0595 = prim @00A5<#∞; %3; $[3]> (_t0594, xn0586);
    xn0586 = prim -0026<$[3]> (xn0586, delta0595);
    real _t0596 = 0.1e-7;
    real _t0597 = 0.1e-7;
    real _t0598 = prim *0034 (_t0596, _t0597);
    real _t0599 = prim •00CE<$[3]; $[3]; $[]> (delta0595, delta0595);
    bool _t059A = prim >=007E (_t0598, _t0599);
    if _t059A {
      real _t059B = 0.1e1;
      real _t059C = 0.1e-7;
      real _t059D = prim +0017<$[]> (_t059B, _t059C);
      real _t059E = 0.1e1;
      real _t059F = 0.1e1;
      real _t05A0 = 0.1e1;
      vec3 _t05A1 = [_t059E, _t059F, _t05A0];
      real _t05A2 = prim •00CE<$[3]; $[3]; $[]> (_t05A1, xn0586);
      bool _t05A3 = prim >0080 (_t059D, _t05A2);
      real _t05A4 = 0.1e-7;
      real _t05A5 = 0.1e-7;
      real _t05A6 = 0.1e-7;
      vec3 _t05A7 = [_t05A4, _t05A5, _t05A6];
      vec3 _t05A8 = prim +0017<$[3]> (_t05A7, xn0586);
      real _t05A9 = _t05A8[0];
      real _t05AA = -0.e0;
      bool _t05AB = prim >0080 (_t05A9, _t05AA);
      real _t05AC = 0.1e-7;
      real _t05AD = 0.1e-7;
      real _t05AE = 0.1e-7;
      vec3 _t05AF = [_t05AC, _t05AD, _t05AE];
      vec3 _t05B0 = prim +0017<$[3]> (_t05AF, xn0586);
      real _t05B1 = _t05B0[1];
      real _t05B2 = -0.e0;
      bool _t05B3 = prim >0080 (_t05B1, _t05B2);
      real _t05B4 = 0.1e-7;
      real _t05B5 = 0.1e-7;
      real _t05B6 = 0.1e-7;
      vec3 _t05B7 = [_t05B4, _t05B5, _t05B6];
      vec3 _t05B8 = prim +0017<$[3]> (_t05B7, xn0586);
      real _t05B9 = _t05B8[2];
      real _t05BA = -0.e0;
      bool _t05BB = prim >0080 (_t05B9, _t05BA);
      bool _t05BC = prim $and01C4 (_t05B3, _t05BB);
      bool _t05BD = prim $and01C4 (_t05AB, _t05BC);
      bool _t05BE = prim $and01C4 (_t05A3, _t05BD);
      if _t05BE {
        Femdata: MeshPos _t05BF = extractFemItemN((mesh0582, cellInt0581, xn0586, pos0580),AllBuild(MeshPos),);
        return _t05BF;
      } else {
        Femdata: MeshPos _t05C0 = extractFemItemN((mesh0582),InvalidBuild(MeshPos),);
        return _t05C0;
      }
    }
  }
  Femdata: MeshPos _t05C2 = extractFemItemN((mesh0582),InvalidBuild(MeshPos),);
  return _t05C2;
}
function Femdata: MeshPos#0 _mesh_pos_mesh_t_build_world_pos05C3 (Femdata: MeshPos pos05C4)
{
  bool _t05C5 = extractFemItem(WorldTest(MeshPos), bool, pos05C4);
  if _t05C5 {
    vec3 _t05C6 = extractFemItem(RefPos(MeshPos), vec3, pos05C4);
    int _t05C7 = extractFemItem(CellIndex(MeshPos), int, pos05C4);
    Femdata: Mesh _t05C8 = extractFem(pos05C4, Mesh);
    vec3 _t05C9 = func mesh_t_transform_0057C (_t05C6, _t05C7, _t05C8);
    Femdata: MeshPos _t05CA = extractFemItemN((pos05C4, _t05C9),NewWorld(MeshPos),);
    return _t05CA;
  } else {
    return pos05C4;
  }
}
function vec3#0 worldPos05CB (Femdata: MeshPos pos05C4)
{
  vec3 _t05CC = extractFemItem(RefPos(MeshPos), vec3, pos05C4);
  int _t05CD = extractFemItem(CellIndex(MeshPos), int, pos05C4);
  Femdata: Mesh _t05CE = extractFem(pos05C4, Mesh);
  vec3 _t05CF = func mesh_t_transform_0057C (_t05CC, _t05CD, _t05CE);
  return _t05CF;
}
function Femdata: MeshPos#0 $exitPos05D0 (Femdata: Mesh mesh05D1, int cellId05D2, vec3 refPos05D3, vec3 dPos05D4, real[2] time05D5)
{
  int _t05D6 = -1;
  real _t05D7 = time05D5[1];
  int _t05D8 = prim $r2i01B7 (_t05D7);
  int[2] _t05DA = func nextCell405D9 (_t05D8, cellId05D2, mesh05D1);
  int _t05DB = 0;
  int _t05DC = prim $sub01C0<int; %2> (_t05DA, _t05DB);
  bool _t05DD = prim !=0086 (_t05D6, _t05DC);
  if _t05DD {
    real _t05DE = time05D5[1];
    int _t05DF = prim $r2i01B7 (_t05DE);
    int[2] _t05E0 = func nextCell405D9 (_t05DF, cellId05D2, mesh05D1);
    int _t05E1 = 0;
    int _t05E2 = prim $sub01C0<int; %2> (_t05E0, _t05E1);
    real _t05E3 = 0.1e1;
    real _t05E4 = 0.e0;
    real _t05E5 = 0.e0;
    real _t05E6 = 0.e0;
    vec4 _t05E7 = [_t05E3, _t05E4, _t05E5, _t05E6];
    real _t05E8 = 0.e0;
    real _t05E9 = 0.1e1;
    real _t05EA = 0.e0;
    real _t05EB = 0.e0;
    vec4 _t05EC = [_t05E8, _t05E9, _t05EA, _t05EB];
    real _t05ED = 0.e0;
    real _t05EE = 0.e0;
    real _t05EF = 0.1e1;
    real _t05F0 = 0.e0;
    vec4 _t05F1 = [_t05ED, _t05EE, _t05EF, _t05F0];
    real _t05F2 = 0.971445146547e-16;
    real _t05F3 = 0.e0;
    real _t05F4 = 0.e0;
    real _t05F5 = 0.1e1;
    vec4 _t05F6 = [_t05F2, _t05F3, _t05F4, _t05F5];
    tensor[4,4] _t05F7 = [_t05E7, _t05EC, _t05F1, _t05F6];
    real _t05F8 = 0.57735026919e0;
    real _t05F9 = 0.57735026919e0;
    real _t05FA = 0.57735026919e0;
    real _t05FB = -0.57735026919e0;
    vec4 _t05FC = [_t05F8, _t05F9, _t05FA, _t05FB];
    real _t05FD = -0.333333333333e0;
    real _t05FE = 0.666666666667e0;
    real _t05FF = -0.333333333333e0;
    real _t0600 = 0.333333333333e0;
    vec4 _t0601 = [_t05FD, _t05FE, _t05FF, _t0600];
    real _t0602 = -0.333333333333e0;
    real _t0603 = -0.333333333333e0;
    real _t0604 = 0.666666666667e0;
    real _t0605 = 0.333333333333e0;
    vec4 _t0606 = [_t0602, _t0603, _t0604, _t0605];
    real _t0607 = 0.971445146547e-16;
    real _t0608 = 0.e0;
    real _t0609 = 0.e0;
    real _t060A = 0.1e1;
    vec4 _t060B = [_t0607, _t0608, _t0609, _t060A];
    tensor[4,4] _t060C = [_t05FC, _t0601, _t0606, _t060B];
    real _t060D = -0.333333333333e0;
    real _t060E = 0.666666666667e0;
    real _t060F = -0.333333333333e0;
    real _t0610 = 0.333333333333e0;
    vec4 _t0611 = [_t060D, _t060E, _t060F, _t0610];
    real _t0612 = -0.57735026919e0;
    real _t0613 = -0.57735026919e0;
    real _t0614 = -0.57735026919e0;
    real _t0615 = 0.57735026919e0;
    vec4 _t0616 = [_t0612, _t0613, _t0614, _t0615];
    real _t0617 = -0.333333333333e0;
    real _t0618 = -0.333333333333e0;
    real _t0619 = 0.666666666667e0;
    real _t061A = 0.333333333333e0;
    vec4 _t061B = [_t0617, _t0618, _t0619, _t061A];
    real _t061C = 0.971445146547e-16;
    real _t061D = 0.e0;
    real _t061E = 0.e0;
    real _t061F = 0.1e1;
    vec4 _t0620 = [_t061C, _t061D, _t061E, _t061F];
    tensor[4,4] _t0621 = [_t0611, _t0616, _t061B, _t0620];
    real _t0622 = -0.333333333333e0;
    real _t0623 = 0.666666666667e0;
    real _t0624 = -0.333333333333e0;
    real _t0625 = 0.333333333333e0;
    vec4 _t0626 = [_t0622, _t0623, _t0624, _t0625];
    real _t0627 = -0.333333333333e0;
    real _t0628 = -0.333333333333e0;
    real _t0629 = 0.666666666667e0;
    real _t062A = 0.333333333333e0;
    vec4 _t062B = [_t0627, _t0628, _t0629, _t062A];
    real _t062C = 0.57735026919e0;
    real _t062D = 0.57735026919e0;
    real _t062E = 0.57735026919e0;
    real _t062F = -0.57735026919e0;
    vec4 _t0630 = [_t062C, _t062D, _t062E, _t062F];
    real _t0631 = 0.971445146547e-16;
    real _t0632 = 0.e0;
    real _t0633 = 0.e0;
    real _t0634 = 0.1e1;
    vec4 _t0635 = [_t0631, _t0632, _t0633, _t0634];
    tensor[4,4] _t0636 = [_t0626, _t062B, _t0630, _t0635];
    tensor[4,4][4] _t0637 = {_t05F7, _t060C, _t0621, _t0636};
    real _t0638 = 0.57735026919e0;
    real _t0639 = -0.1e1;
    real _t063A = -0.1e1;
    real _t063B = 0.1e1;
    vec4 _t063C = [_t0638, _t0639, _t063A, _t063B];
    real _t063D = 0.57735026919e0;
    real _t063E = 0.1e1;
    real _t063F = 0.e0;
    real _t0640 = 0.e0;
    vec4 _t0641 = [_t063D, _t063E, _t063F, _t0640];
    real _t0642 = 0.57735026919e0;
    real _t0643 = 0.e0;
    real _t0644 = 0.1e1;
    real _t0645 = 0.e0;
    vec4 _t0646 = [_t0642, _t0643, _t0644, _t0645];
    real _t0647 = 0.e0;
    real _t0648 = 0.e0;
    real _t0649 = 0.e0;
    real _t064A = 0.1e1;
    vec4 _t064B = [_t0647, _t0648, _t0649, _t064A];
    tensor[4,4] _t064C = [_t063C, _t0641, _t0646, _t064B];
    real _t064D = 0.1e1;
    real _t064E = 0.e0;
    real _t064F = 0.e0;
    real _t0650 = 0.e0;
    vec4 _t0651 = [_t064D, _t064E, _t064F, _t0650];
    real _t0652 = 0.e0;
    real _t0653 = 0.1e1;
    real _t0654 = 0.e0;
    real _t0655 = 0.e0;
    vec4 _t0656 = [_t0652, _t0653, _t0654, _t0655];
    real _t0657 = 0.e0;
    real _t0658 = 0.e0;
    real _t0659 = 0.1e1;
    real _t065A = 0.e0;
    vec4 _t065B = [_t0657, _t0658, _t0659, _t065A];
    real _t065C = 0.e0;
    real _t065D = 0.e0;
    real _t065E = 0.e0;
    real _t065F = 0.1e1;
    vec4 _t0660 = [_t065C, _t065D, _t065E, _t065F];
    tensor[4,4] _t0661 = [_t0651, _t0656, _t065B, _t0660];
    real _t0662 = 0.e0;
    real _t0663 = 0.1e1;
    real _t0664 = 0.e0;
    real _t0665 = 0.e0;
    vec4 _t0666 = [_t0662, _t0663, _t0664, _t0665];
    real _t0667 = -0.1e1;
    real _t0668 = 0.e0;
    real _t0669 = 0.e0;
    real _t066A = 0.e0;
    vec4 _t066B = [_t0667, _t0668, _t0669, _t066A];
    real _t066C = 0.e0;
    real _t066D = 0.e0;
    real _t066E = 0.1e1;
    real _t066F = 0.e0;
    vec4 _t0670 = [_t066C, _t066D, _t066E, _t066F];
    real _t0671 = 0.e0;
    real _t0672 = 0.e0;
    real _t0673 = 0.e0;
    real _t0674 = 0.1e1;
    vec4 _t0675 = [_t0671, _t0672, _t0673, _t0674];
    tensor[4,4] _t0676 = [_t0666, _t066B, _t0670, _t0675];
    real _t0677 = 0.e0;
    real _t0678 = 0.1e1;
    real _t0679 = 0.e0;
    real _t067A = 0.e0;
    vec4 _t067B = [_t0677, _t0678, _t0679, _t067A];
    real _t067C = 0.e0;
    real _t067D = 0.e0;
    real _t067E = 0.1e1;
    real _t067F = 0.e0;
    vec4 _t0680 = [_t067C, _t067D, _t067E, _t067F];
    real _t0681 = 0.1e1;
    real _t0682 = 0.e0;
    real _t0683 = 0.e0;
    real _t0684 = 0.e0;
    vec4 _t0685 = [_t0681, _t0682, _t0683, _t0684];
    real _t0686 = 0.e0;
    real _t0687 = 0.e0;
    real _t0688 = 0.e0;
    real _t0689 = 0.1e1;
    vec4 _t068A = [_t0686, _t0687, _t0688, _t0689];
    tensor[4,4] _t068B = [_t067B, _t0680, _t0685, _t068A];
    tensor[4,4][4] _t068C = {_t064C, _t0661, _t0676, _t068B};
    real _t068D = -0.1e1;
    real _t068E = -0.57735026919e0;
    real _t068F = -0.1e1;
    real _t0690 = 0.1e1;
    vec4 _t0691 = [_t068D, _t068E, _t068F, _t0690];
    real _t0692 = 0.1e1;
    real _t0693 = -0.57735026919e0;
    real _t0694 = 0.e0;
    real _t0695 = 0.e0;
    vec4 _t0696 = [_t0692, _t0693, _t0694, _t0695];
    real _t0697 = 0.e0;
    real _t0698 = -0.57735026919e0;
    real _t0699 = 0.1e1;
    real _t069A = 0.e0;
    vec4 _t069B = [_t0697, _t0698, _t0699, _t069A];
    real _t069C = 0.e0;
    real _t069D = 0.e0;
    real _t069E = 0.e0;
    real _t069F = 0.1e1;
    vec4 _t06A0 = [_t069C, _t069D, _t069E, _t069F];
    tensor[4,4] _t06A1 = [_t0691, _t0696, _t069B, _t06A0];
    real _t06A2 = 0.e0;
    real _t06A3 = -0.1e1;
    real _t06A4 = 0.e0;
    real _t06A5 = 0.e0;
    vec4 _t06A6 = [_t06A2, _t06A3, _t06A4, _t06A5];
    real _t06A7 = 0.1e1;
    real _t06A8 = 0.e0;
    real _t06A9 = 0.e0;
    real _t06AA = 0.e0;
    vec4 _t06AB = [_t06A7, _t06A8, _t06A9, _t06AA];
    real _t06AC = 0.e0;
    real _t06AD = 0.e0;
    real _t06AE = 0.1e1;
    real _t06AF = 0.e0;
    vec4 _t06B0 = [_t06AC, _t06AD, _t06AE, _t06AF];
    real _t06B1 = 0.e0;
    real _t06B2 = 0.e0;
    real _t06B3 = 0.e0;
    real _t06B4 = 0.1e1;
    vec4 _t06B5 = [_t06B1, _t06B2, _t06B3, _t06B4];
    tensor[4,4] _t06B6 = [_t06A6, _t06AB, _t06B0, _t06B5];
    real _t06B7 = 0.1e1;
    real _t06B8 = 0.e0;
    real _t06B9 = 0.e0;
    real _t06BA = 0.e0;
    vec4 _t06BB = [_t06B7, _t06B8, _t06B9, _t06BA];
    real _t06BC = 0.e0;
    real _t06BD = 0.1e1;
    real _t06BE = 0.e0;
    real _t06BF = 0.e0;
    vec4 _t06C0 = [_t06BC, _t06BD, _t06BE, _t06BF];
    real _t06C1 = 0.e0;
    real _t06C2 = 0.e0;
    real _t06C3 = 0.1e1;
    real _t06C4 = 0.e0;
    vec4 _t06C5 = [_t06C1, _t06C2, _t06C3, _t06C4];
    real _t06C6 = 0.e0;
    real _t06C7 = 0.e0;
    real _t06C8 = 0.e0;
    real _t06C9 = 0.1e1;
    vec4 _t06CA = [_t06C6, _t06C7, _t06C8, _t06C9];
    tensor[4,4] _t06CB = [_t06BB, _t06C0, _t06C5, _t06CA];
    real _t06CC = 0.1e1;
    real _t06CD = 0.e0;
    real _t06CE = 0.e0;
    real _t06CF = 0.e0;
    vec4 _t06D0 = [_t06CC, _t06CD, _t06CE, _t06CF];
    real _t06D1 = 0.e0;
    real _t06D2 = 0.e0;
    real _t06D3 = 0.1e1;
    real _t06D4 = 0.e0;
    vec4 _t06D5 = [_t06D1, _t06D2, _t06D3, _t06D4];
    real _t06D6 = 0.e0;
    real _t06D7 = -0.1e1;
    real _t06D8 = 0.e0;
    real _t06D9 = 0.e0;
    vec4 _t06DA = [_t06D6, _t06D7, _t06D8, _t06D9];
    real _t06DB = 0.e0;
    real _t06DC = 0.e0;
    real _t06DD = 0.e0;
    real _t06DE = 0.1e1;
    vec4 _t06DF = [_t06DB, _t06DC, _t06DD, _t06DE];
    tensor[4,4] _t06E0 = [_t06D0, _t06D5, _t06DA, _t06DF];
    tensor[4,4][4] _t06E1 = {_t06A1, _t06B6, _t06CB, _t06E0};
    real _t06E2 = -0.1e1;
    real _t06E3 = -0.1e1;
    real _t06E4 = 0.57735026919e0;
    real _t06E5 = 0.1e1;
    vec4 _t06E6 = [_t06E2, _t06E3, _t06E4, _t06E5];
    real _t06E7 = 0.1e1;
    real _t06E8 = 0.e0;
    real _t06E9 = 0.57735026919e0;
    real _t06EA = 0.e0;
    vec4 _t06EB = [_t06E7, _t06E8, _t06E9, _t06EA];
    real _t06EC = 0.e0;
    real _t06ED = 0.1e1;
    real _t06EE = 0.57735026919e0;
    real _t06EF = 0.e0;
    vec4 _t06F0 = [_t06EC, _t06ED, _t06EE, _t06EF];
    real _t06F1 = 0.e0;
    real _t06F2 = 0.e0;
    real _t06F3 = 0.e0;
    real _t06F4 = 0.1e1;
    vec4 _t06F5 = [_t06F1, _t06F2, _t06F3, _t06F4];
    tensor[4,4] _t06F6 = [_t06E6, _t06EB, _t06F0, _t06F5];
    real _t06F7 = 0.e0;
    real _t06F8 = 0.e0;
    real _t06F9 = 0.1e1;
    real _t06FA = 0.e0;
    vec4 _t06FB = [_t06F7, _t06F8, _t06F9, _t06FA];
    real _t06FC = 0.1e1;
    real _t06FD = 0.e0;
    real _t06FE = 0.e0;
    real _t06FF = 0.e0;
    vec4 _t0700 = [_t06FC, _t06FD, _t06FE, _t06FF];
    real _t0701 = 0.e0;
    real _t0702 = 0.1e1;
    real _t0703 = 0.e0;
    real _t0704 = 0.e0;
    vec4 _t0705 = [_t0701, _t0702, _t0703, _t0704];
    real _t0706 = 0.e0;
    real _t0707 = 0.e0;
    real _t0708 = 0.e0;
    real _t0709 = 0.1e1;
    vec4 _t070A = [_t0706, _t0707, _t0708, _t0709];
    tensor[4,4] _t070B = [_t06FB, _t0700, _t0705, _t070A];
    real _t070C = 0.1e1;
    real _t070D = 0.e0;
    real _t070E = 0.e0;
    real _t070F = 0.e0;
    vec4 _t0710 = [_t070C, _t070D, _t070E, _t070F];
    real _t0711 = 0.e0;
    real _t0712 = 0.e0;
    real _t0713 = -0.1e1;
    real _t0714 = 0.e0;
    vec4 _t0715 = [_t0711, _t0712, _t0713, _t0714];
    real _t0716 = 0.e0;
    real _t0717 = 0.1e1;
    real _t0718 = 0.e0;
    real _t0719 = 0.e0;
    vec4 _t071A = [_t0716, _t0717, _t0718, _t0719];
    real _t071B = 0.e0;
    real _t071C = 0.e0;
    real _t071D = 0.e0;
    real _t071E = 0.1e1;
    vec4 _t071F = [_t071B, _t071C, _t071D, _t071E];
    tensor[4,4] _t0720 = [_t0710, _t0715, _t071A, _t071F];
    real _t0721 = 0.1e1;
    real _t0722 = 0.e0;
    real _t0723 = 0.e0;
    real _t0724 = 0.e0;
    vec4 _t0725 = [_t0721, _t0722, _t0723, _t0724];
    real _t0726 = 0.e0;
    real _t0727 = 0.1e1;
    real _t0728 = 0.e0;
    real _t0729 = 0.e0;
    vec4 _t072A = [_t0726, _t0727, _t0728, _t0729];
    real _t072B = 0.e0;
    real _t072C = 0.e0;
    real _t072D = 0.1e1;
    real _t072E = 0.e0;
    vec4 _t072F = [_t072B, _t072C, _t072D, _t072E];
    real _t0730 = 0.e0;
    real _t0731 = 0.e0;
    real _t0732 = 0.e0;
    real _t0733 = 0.1e1;
    vec4 _t0734 = [_t0730, _t0731, _t0732, _t0733];
    tensor[4,4] _t0735 = [_t0725, _t072A, _t072F, _t0734];
    tensor[4,4][4] _t0736 = {_t06F6, _t070B, _t0720, _t0735};
    tensor[4,4][4][4] _t0737 = {_t0637, _t068C, _t06E1, _t0736};
    real _t0738 = time05D5[1];
    int _t0739 = prim $r2i01B7 (_t0738);
    tensor[4,4][4] _t073A = prim $sub01C0<tensor[4,4][4]; %4> (_t0737, _t0739);
    real _t073B = time05D5[1];
    int _t073C = prim $r2i01B7 (_t073B);
    int[2] _t073D = func nextCell405D9 (_t073C, cellId05D2, mesh05D1);
    int _t073E = 1;
    int _t073F = prim $sub01C0<int; %2> (_t073D, _t073E);
    tensor[4,4] _t0740 = prim $sub01C0<tensor[4,4]; %4> (_t073A, _t073F);
    real _t0741 = time05D5[0];
    vec3 _t0742 = prim *0036<$[3]> (_t0741, dPos05D4);
    vec3 _t0743 = prim +0017<$[3]> (_t0742, refPos05D3);
    real _t0744 = _t0743[0];
    real _t0745 = time05D5[0];
    vec3 _t0746 = prim *0036<$[3]> (_t0745, dPos05D4);
    vec3 _t0747 = prim +0017<$[3]> (_t0746, refPos05D3);
    real _t0748 = _t0747[1];
    real _t0749 = time05D5[0];
    vec3 _t074A = prim *0036<$[3]> (_t0749, dPos05D4);
    vec3 _t074B = prim +0017<$[3]> (_t074A, refPos05D3);
    real _t074C = _t074B[2];
    real _t074D = 0.1e1;
    vec4 _t074E = [_t0744, _t0748, _t074C, _t074D];
    vec4 _t074F = prim •00CE<$[4,4]; $[4]; $[4]> (_t0740, _t074E);
    real _t0750 = _t074F[0];
    real _t0751 = 0.1e1;
    real _t0752 = 0.e0;
    real _t0753 = 0.e0;
    real _t0754 = 0.e0;
    vec4 _t0755 = [_t0751, _t0752, _t0753, _t0754];
    real _t0756 = 0.e0;
    real _t0757 = 0.1e1;
    real _t0758 = 0.e0;
    real _t0759 = 0.e0;
    vec4 _t075A = [_t0756, _t0757, _t0758, _t0759];
    real _t075B = 0.e0;
    real _t075C = 0.e0;
    real _t075D = 0.1e1;
    real _t075E = 0.e0;
    vec4 _t075F = [_t075B, _t075C, _t075D, _t075E];
    real _t0760 = 0.971445146547e-16;
    real _t0761 = 0.e0;
    real _t0762 = 0.e0;
    real _t0763 = 0.1e1;
    vec4 _t0764 = [_t0760, _t0761, _t0762, _t0763];
    tensor[4,4] _t0765 = [_t0755, _t075A, _t075F, _t0764];
    real _t0766 = 0.57735026919e0;
    real _t0767 = 0.57735026919e0;
    real _t0768 = 0.57735026919e0;
    real _t0769 = -0.57735026919e0;
    vec4 _t076A = [_t0766, _t0767, _t0768, _t0769];
    real _t076B = -0.333333333333e0;
    real _t076C = 0.666666666667e0;
    real _t076D = -0.333333333333e0;
    real _t076E = 0.333333333333e0;
    vec4 _t076F = [_t076B, _t076C, _t076D, _t076E];
    real _t0770 = -0.333333333333e0;
    real _t0771 = -0.333333333333e0;
    real _t0772 = 0.666666666667e0;
    real _t0773 = 0.333333333333e0;
    vec4 _t0774 = [_t0770, _t0771, _t0772, _t0773];
    real _t0775 = 0.971445146547e-16;
    real _t0776 = 0.e0;
    real _t0777 = 0.e0;
    real _t0778 = 0.1e1;
    vec4 _t0779 = [_t0775, _t0776, _t0777, _t0778];
    tensor[4,4] _t077A = [_t076A, _t076F, _t0774, _t0779];
    real _t077B = -0.333333333333e0;
    real _t077C = 0.666666666667e0;
    real _t077D = -0.333333333333e0;
    real _t077E = 0.333333333333e0;
    vec4 _t077F = [_t077B, _t077C, _t077D, _t077E];
    real _t0780 = -0.57735026919e0;
    real _t0781 = -0.57735026919e0;
    real _t0782 = -0.57735026919e0;
    real _t0783 = 0.57735026919e0;
    vec4 _t0784 = [_t0780, _t0781, _t0782, _t0783];
    real _t0785 = -0.333333333333e0;
    real _t0786 = -0.333333333333e0;
    real _t0787 = 0.666666666667e0;
    real _t0788 = 0.333333333333e0;
    vec4 _t0789 = [_t0785, _t0786, _t0787, _t0788];
    real _t078A = 0.971445146547e-16;
    real _t078B = 0.e0;
    real _t078C = 0.e0;
    real _t078D = 0.1e1;
    vec4 _t078E = [_t078A, _t078B, _t078C, _t078D];
    tensor[4,4] _t078F = [_t077F, _t0784, _t0789, _t078E];
    real _t0790 = -0.333333333333e0;
    real _t0791 = 0.666666666667e0;
    real _t0792 = -0.333333333333e0;
    real _t0793 = 0.333333333333e0;
    vec4 _t0794 = [_t0790, _t0791, _t0792, _t0793];
    real _t0795 = -0.333333333333e0;
    real _t0796 = -0.333333333333e0;
    real _t0797 = 0.666666666667e0;
    real _t0798 = 0.333333333333e0;
    vec4 _t0799 = [_t0795, _t0796, _t0797, _t0798];
    real _t079A = 0.57735026919e0;
    real _t079B = 0.57735026919e0;
    real _t079C = 0.57735026919e0;
    real _t079D = -0.57735026919e0;
    vec4 _t079E = [_t079A, _t079B, _t079C, _t079D];
    real _t079F = 0.971445146547e-16;
    real _t07A0 = 0.e0;
    real _t07A1 = 0.e0;
    real _t07A2 = 0.1e1;
    vec4 _t07A3 = [_t079F, _t07A0, _t07A1, _t07A2];
    tensor[4,4] _t07A4 = [_t0794, _t0799, _t079E, _t07A3];
    tensor[4,4][4] _t07A5 = {_t0765, _t077A, _t078F, _t07A4};
    real _t07A6 = 0.57735026919e0;
    real _t07A7 = -0.1e1;
    real _t07A8 = -0.1e1;
    real _t07A9 = 0.1e1;
    vec4 _t07AA = [_t07A6, _t07A7, _t07A8, _t07A9];
    real _t07AB = 0.57735026919e0;
    real _t07AC = 0.1e1;
    real _t07AD = 0.e0;
    real _t07AE = 0.e0;
    vec4 _t07AF = [_t07AB, _t07AC, _t07AD, _t07AE];
    real _t07B0 = 0.57735026919e0;
    real _t07B1 = 0.e0;
    real _t07B2 = 0.1e1;
    real _t07B3 = 0.e0;
    vec4 _t07B4 = [_t07B0, _t07B1, _t07B2, _t07B3];
    real _t07B5 = 0.e0;
    real _t07B6 = 0.e0;
    real _t07B7 = 0.e0;
    real _t07B8 = 0.1e1;
    vec4 _t07B9 = [_t07B5, _t07B6, _t07B7, _t07B8];
    tensor[4,4] _t07BA = [_t07AA, _t07AF, _t07B4, _t07B9];
    real _t07BB = 0.1e1;
    real _t07BC = 0.e0;
    real _t07BD = 0.e0;
    real _t07BE = 0.e0;
    vec4 _t07BF = [_t07BB, _t07BC, _t07BD, _t07BE];
    real _t07C0 = 0.e0;
    real _t07C1 = 0.1e1;
    real _t07C2 = 0.e0;
    real _t07C3 = 0.e0;
    vec4 _t07C4 = [_t07C0, _t07C1, _t07C2, _t07C3];
    real _t07C5 = 0.e0;
    real _t07C6 = 0.e0;
    real _t07C7 = 0.1e1;
    real _t07C8 = 0.e0;
    vec4 _t07C9 = [_t07C5, _t07C6, _t07C7, _t07C8];
    real _t07CA = 0.e0;
    real _t07CB = 0.e0;
    real _t07CC = 0.e0;
    real _t07CD = 0.1e1;
    vec4 _t07CE = [_t07CA, _t07CB, _t07CC, _t07CD];
    tensor[4,4] _t07CF = [_t07BF, _t07C4, _t07C9, _t07CE];
    real _t07D0 = 0.e0;
    real _t07D1 = 0.1e1;
    real _t07D2 = 0.e0;
    real _t07D3 = 0.e0;
    vec4 _t07D4 = [_t07D0, _t07D1, _t07D2, _t07D3];
    real _t07D5 = -0.1e1;
    real _t07D6 = 0.e0;
    real _t07D7 = 0.e0;
    real _t07D8 = 0.e0;
    vec4 _t07D9 = [_t07D5, _t07D6, _t07D7, _t07D8];
    real _t07DA = 0.e0;
    real _t07DB = 0.e0;
    real _t07DC = 0.1e1;
    real _t07DD = 0.e0;
    vec4 _t07DE = [_t07DA, _t07DB, _t07DC, _t07DD];
    real _t07DF = 0.e0;
    real _t07E0 = 0.e0;
    real _t07E1 = 0.e0;
    real _t07E2 = 0.1e1;
    vec4 _t07E3 = [_t07DF, _t07E0, _t07E1, _t07E2];
    tensor[4,4] _t07E4 = [_t07D4, _t07D9, _t07DE, _t07E3];
    real _t07E5 = 0.e0;
    real _t07E6 = 0.1e1;
    real _t07E7 = 0.e0;
    real _t07E8 = 0.e0;
    vec4 _t07E9 = [_t07E5, _t07E6, _t07E7, _t07E8];
    real _t07EA = 0.e0;
    real _t07EB = 0.e0;
    real _t07EC = 0.1e1;
    real _t07ED = 0.e0;
    vec4 _t07EE = [_t07EA, _t07EB, _t07EC, _t07ED];
    real _t07EF = 0.1e1;
    real _t07F0 = 0.e0;
    real _t07F1 = 0.e0;
    real _t07F2 = 0.e0;
    vec4 _t07F3 = [_t07EF, _t07F0, _t07F1, _t07F2];
    real _t07F4 = 0.e0;
    real _t07F5 = 0.e0;
    real _t07F6 = 0.e0;
    real _t07F7 = 0.1e1;
    vec4 _t07F8 = [_t07F4, _t07F5, _t07F6, _t07F7];
    tensor[4,4] _t07F9 = [_t07E9, _t07EE, _t07F3, _t07F8];
    tensor[4,4][4] _t07FA = {_t07BA, _t07CF, _t07E4, _t07F9};
    real _t07FB = -0.1e1;
    real _t07FC = -0.57735026919e0;
    real _t07FD = -0.1e1;
    real _t07FE = 0.1e1;
    vec4 _t07FF = [_t07FB, _t07FC, _t07FD, _t07FE];
    real _t0800 = 0.1e1;
    real _t0801 = -0.57735026919e0;
    real _t0802 = 0.e0;
    real _t0803 = 0.e0;
    vec4 _t0804 = [_t0800, _t0801, _t0802, _t0803];
    real _t0805 = 0.e0;
    real _t0806 = -0.57735026919e0;
    real _t0807 = 0.1e1;
    real _t0808 = 0.e0;
    vec4 _t0809 = [_t0805, _t0806, _t0807, _t0808];
    real _t080A = 0.e0;
    real _t080B = 0.e0;
    real _t080C = 0.e0;
    real _t080D = 0.1e1;
    vec4 _t080E = [_t080A, _t080B, _t080C, _t080D];
    tensor[4,4] _t080F = [_t07FF, _t0804, _t0809, _t080E];
    real _t0810 = 0.e0;
    real _t0811 = -0.1e1;
    real _t0812 = 0.e0;
    real _t0813 = 0.e0;
    vec4 _t0814 = [_t0810, _t0811, _t0812, _t0813];
    real _t0815 = 0.1e1;
    real _t0816 = 0.e0;
    real _t0817 = 0.e0;
    real _t0818 = 0.e0;
    vec4 _t0819 = [_t0815, _t0816, _t0817, _t0818];
    real _t081A = 0.e0;
    real _t081B = 0.e0;
    real _t081C = 0.1e1;
    real _t081D = 0.e0;
    vec4 _t081E = [_t081A, _t081B, _t081C, _t081D];
    real _t081F = 0.e0;
    real _t0820 = 0.e0;
    real _t0821 = 0.e0;
    real _t0822 = 0.1e1;
    vec4 _t0823 = [_t081F, _t0820, _t0821, _t0822];
    tensor[4,4] _t0824 = [_t0814, _t0819, _t081E, _t0823];
    real _t0825 = 0.1e1;
    real _t0826 = 0.e0;
    real _t0827 = 0.e0;
    real _t0828 = 0.e0;
    vec4 _t0829 = [_t0825, _t0826, _t0827, _t0828];
    real _t082A = 0.e0;
    real _t082B = 0.1e1;
    real _t082C = 0.e0;
    real _t082D = 0.e0;
    vec4 _t082E = [_t082A, _t082B, _t082C, _t082D];
    real _t082F = 0.e0;
    real _t0830 = 0.e0;
    real _t0831 = 0.1e1;
    real _t0832 = 0.e0;
    vec4 _t0833 = [_t082F, _t0830, _t0831, _t0832];
    real _t0834 = 0.e0;
    real _t0835 = 0.e0;
    real _t0836 = 0.e0;
    real _t0837 = 0.1e1;
    vec4 _t0838 = [_t0834, _t0835, _t0836, _t0837];
    tensor[4,4] _t0839 = [_t0829, _t082E, _t0833, _t0838];
    real _t083A = 0.1e1;
    real _t083B = 0.e0;
    real _t083C = 0.e0;
    real _t083D = 0.e0;
    vec4 _t083E = [_t083A, _t083B, _t083C, _t083D];
    real _t083F = 0.e0;
    real _t0840 = 0.e0;
    real _t0841 = 0.1e1;
    real _t0842 = 0.e0;
    vec4 _t0843 = [_t083F, _t0840, _t0841, _t0842];
    real _t0844 = 0.e0;
    real _t0845 = -0.1e1;
    real _t0846 = 0.e0;
    real _t0847 = 0.e0;
    vec4 _t0848 = [_t0844, _t0845, _t0846, _t0847];
    real _t0849 = 0.e0;
    real _t084A = 0.e0;
    real _t084B = 0.e0;
    real _t084C = 0.1e1;
    vec4 _t084D = [_t0849, _t084A, _t084B, _t084C];
    tensor[4,4] _t084E = [_t083E, _t0843, _t0848, _t084D];
    tensor[4,4][4] _t084F = {_t080F, _t0824, _t0839, _t084E};
    real _t0850 = -0.1e1;
    real _t0851 = -0.1e1;
    real _t0852 = 0.57735026919e0;
    real _t0853 = 0.1e1;
    vec4 _t0854 = [_t0850, _t0851, _t0852, _t0853];
    real _t0855 = 0.1e1;
    real _t0856 = 0.e0;
    real _t0857 = 0.57735026919e0;
    real _t0858 = 0.e0;
    vec4 _t0859 = [_t0855, _t0856, _t0857, _t0858];
    real _t085A = 0.e0;
    real _t085B = 0.1e1;
    real _t085C = 0.57735026919e0;
    real _t085D = 0.e0;
    vec4 _t085E = [_t085A, _t085B, _t085C, _t085D];
    real _t085F = 0.e0;
    real _t0860 = 0.e0;
    real _t0861 = 0.e0;
    real _t0862 = 0.1e1;
    vec4 _t0863 = [_t085F, _t0860, _t0861, _t0862];
    tensor[4,4] _t0864 = [_t0854, _t0859, _t085E, _t0863];
    real _t0865 = 0.e0;
    real _t0866 = 0.e0;
    real _t0867 = 0.1e1;
    real _t0868 = 0.e0;
    vec4 _t0869 = [_t0865, _t0866, _t0867, _t0868];
    real _t086A = 0.1e1;
    real _t086B = 0.e0;
    real _t086C = 0.e0;
    real _t086D = 0.e0;
    vec4 _t086E = [_t086A, _t086B, _t086C, _t086D];
    real _t086F = 0.e0;
    real _t0870 = 0.1e1;
    real _t0871 = 0.e0;
    real _t0872 = 0.e0;
    vec4 _t0873 = [_t086F, _t0870, _t0871, _t0872];
    real _t0874 = 0.e0;
    real _t0875 = 0.e0;
    real _t0876 = 0.e0;
    real _t0877 = 0.1e1;
    vec4 _t0878 = [_t0874, _t0875, _t0876, _t0877];
    tensor[4,4] _t0879 = [_t0869, _t086E, _t0873, _t0878];
    real _t087A = 0.1e1;
    real _t087B = 0.e0;
    real _t087C = 0.e0;
    real _t087D = 0.e0;
    vec4 _t087E = [_t087A, _t087B, _t087C, _t087D];
    real _t087F = 0.e0;
    real _t0880 = 0.e0;
    real _t0881 = -0.1e1;
    real _t0882 = 0.e0;
    vec4 _t0883 = [_t087F, _t0880, _t0881, _t0882];
    real _t0884 = 0.e0;
    real _t0885 = 0.1e1;
    real _t0886 = 0.e0;
    real _t0887 = 0.e0;
    vec4 _t0888 = [_t0884, _t0885, _t0886, _t0887];
    real _t0889 = 0.e0;
    real _t088A = 0.e0;
    real _t088B = 0.e0;
    real _t088C = 0.1e1;
    vec4 _t088D = [_t0889, _t088A, _t088B, _t088C];
    tensor[4,4] _t088E = [_t087E, _t0883, _t0888, _t088D];
    real _t088F = 0.1e1;
    real _t0890 = 0.e0;
    real _t0891 = 0.e0;
    real _t0892 = 0.e0;
    vec4 _t0893 = [_t088F, _t0890, _t0891, _t0892];
    real _t0894 = 0.e0;
    real _t0895 = 0.1e1;
    real _t0896 = 0.e0;
    real _t0897 = 0.e0;
    vec4 _t0898 = [_t0894, _t0895, _t0896, _t0897];
    real _t0899 = 0.e0;
    real _t089A = 0.e0;
    real _t089B = 0.1e1;
    real _t089C = 0.e0;
    vec4 _t089D = [_t0899, _t089A, _t089B, _t089C];
    real _t089E = 0.e0;
    real _t089F = 0.e0;
    real _t08A0 = 0.e0;
    real _t08A1 = 0.1e1;
    vec4 _t08A2 = [_t089E, _t089F, _t08A0, _t08A1];
    tensor[4,4] _t08A3 = [_t0893, _t0898, _t089D, _t08A2];
    tensor[4,4][4] _t08A4 = {_t0864, _t0879, _t088E, _t08A3};
    tensor[4,4][4][4] _t08A5 = {_t07A5, _t07FA, _t084F, _t08A4};
    real _t08A6 = time05D5[1];
    int _t08A7 = prim $r2i01B7 (_t08A6);
    tensor[4,4][4] _t08A8 = prim $sub01C0<tensor[4,4][4]; %4> (_t08A5, _t08A7);
    real _t08A9 = time05D5[1];
    int _t08AA = prim $r2i01B7 (_t08A9);
    int[2] _t08AB = func nextCell405D9 (_t08AA, cellId05D2, mesh05D1);
    int _t08AC = 1;
    int _t08AD = prim $sub01C0<int; %2> (_t08AB, _t08AC);
    tensor[4,4] _t08AE = prim $sub01C0<tensor[4,4]; %4> (_t08A8, _t08AD);
    real _t08AF = time05D5[0];
    vec3 _t08B0 = prim *0036<$[3]> (_t08AF, dPos05D4);
    vec3 _t08B1 = prim +0017<$[3]> (_t08B0, refPos05D3);
    real _t08B2 = _t08B1[0];
    real _t08B3 = time05D5[0];
    vec3 _t08B4 = prim *0036<$[3]> (_t08B3, dPos05D4);
    vec3 _t08B5 = prim +0017<$[3]> (_t08B4, refPos05D3);
    real _t08B6 = _t08B5[1];
    real _t08B7 = time05D5[0];
    vec3 _t08B8 = prim *0036<$[3]> (_t08B7, dPos05D4);
    vec3 _t08B9 = prim +0017<$[3]> (_t08B8, refPos05D3);
    real _t08BA = _t08B9[2];
    real _t08BB = 0.1e1;
    vec4 _t08BC = [_t08B2, _t08B6, _t08BA, _t08BB];
    vec4 _t08BD = prim •00CE<$[4,4]; $[4]; $[4]> (_t08AE, _t08BC);
    real _t08BE = _t08BD[1];
    real _t08BF = 0.1e1;
    real _t08C0 = 0.e0;
    real _t08C1 = 0.e0;
    real _t08C2 = 0.e0;
    vec4 _t08C3 = [_t08BF, _t08C0, _t08C1, _t08C2];
    real _t08C4 = 0.e0;
    real _t08C5 = 0.1e1;
    real _t08C6 = 0.e0;
    real _t08C7 = 0.e0;
    vec4 _t08C8 = [_t08C4, _t08C5, _t08C6, _t08C7];
    real _t08C9 = 0.e0;
    real _t08CA = 0.e0;
    real _t08CB = 0.1e1;
    real _t08CC = 0.e0;
    vec4 _t08CD = [_t08C9, _t08CA, _t08CB, _t08CC];
    real _t08CE = 0.971445146547e-16;
    real _t08CF = 0.e0;
    real _t08D0 = 0.e0;
    real _t08D1 = 0.1e1;
    vec4 _t08D2 = [_t08CE, _t08CF, _t08D0, _t08D1];
    tensor[4,4] _t08D3 = [_t08C3, _t08C8, _t08CD, _t08D2];
    real _t08D4 = 0.57735026919e0;
    real _t08D5 = 0.57735026919e0;
    real _t08D6 = 0.57735026919e0;
    real _t08D7 = -0.57735026919e0;
    vec4 _t08D8 = [_t08D4, _t08D5, _t08D6, _t08D7];
    real _t08D9 = -0.333333333333e0;
    real _t08DA = 0.666666666667e0;
    real _t08DB = -0.333333333333e0;
    real _t08DC = 0.333333333333e0;
    vec4 _t08DD = [_t08D9, _t08DA, _t08DB, _t08DC];
    real _t08DE = -0.333333333333e0;
    real _t08DF = -0.333333333333e0;
    real _t08E0 = 0.666666666667e0;
    real _t08E1 = 0.333333333333e0;
    vec4 _t08E2 = [_t08DE, _t08DF, _t08E0, _t08E1];
    real _t08E3 = 0.971445146547e-16;
    real _t08E4 = 0.e0;
    real _t08E5 = 0.e0;
    real _t08E6 = 0.1e1;
    vec4 _t08E7 = [_t08E3, _t08E4, _t08E5, _t08E6];
    tensor[4,4] _t08E8 = [_t08D8, _t08DD, _t08E2, _t08E7];
    real _t08E9 = -0.333333333333e0;
    real _t08EA = 0.666666666667e0;
    real _t08EB = -0.333333333333e0;
    real _t08EC = 0.333333333333e0;
    vec4 _t08ED = [_t08E9, _t08EA, _t08EB, _t08EC];
    real _t08EE = -0.57735026919e0;
    real _t08EF = -0.57735026919e0;
    real _t08F0 = -0.57735026919e0;
    real _t08F1 = 0.57735026919e0;
    vec4 _t08F2 = [_t08EE, _t08EF, _t08F0, _t08F1];
    real _t08F3 = -0.333333333333e0;
    real _t08F4 = -0.333333333333e0;
    real _t08F5 = 0.666666666667e0;
    real _t08F6 = 0.333333333333e0;
    vec4 _t08F7 = [_t08F3, _t08F4, _t08F5, _t08F6];
    real _t08F8 = 0.971445146547e-16;
    real _t08F9 = 0.e0;
    real _t08FA = 0.e0;
    real _t08FB = 0.1e1;
    vec4 _t08FC = [_t08F8, _t08F9, _t08FA, _t08FB];
    tensor[4,4] _t08FD = [_t08ED, _t08F2, _t08F7, _t08FC];
    real _t08FE = -0.333333333333e0;
    real _t08FF = 0.666666666667e0;
    real _t0900 = -0.333333333333e0;
    real _t0901 = 0.333333333333e0;
    vec4 _t0902 = [_t08FE, _t08FF, _t0900, _t0901];
    real _t0903 = -0.333333333333e0;
    real _t0904 = -0.333333333333e0;
    real _t0905 = 0.666666666667e0;
    real _t0906 = 0.333333333333e0;
    vec4 _t0907 = [_t0903, _t0904, _t0905, _t0906];
    real _t0908 = 0.57735026919e0;
    real _t0909 = 0.57735026919e0;
    real _t090A = 0.57735026919e0;
    real _t090B = -0.57735026919e0;
    vec4 _t090C = [_t0908, _t0909, _t090A, _t090B];
    real _t090D = 0.971445146547e-16;
    real _t090E = 0.e0;
    real _t090F = 0.e0;
    real _t0910 = 0.1e1;
    vec4 _t0911 = [_t090D, _t090E, _t090F, _t0910];
    tensor[4,4] _t0912 = [_t0902, _t0907, _t090C, _t0911];
    tensor[4,4][4] _t0913 = {_t08D3, _t08E8, _t08FD, _t0912};
    real _t0914 = 0.57735026919e0;
    real _t0915 = -0.1e1;
    real _t0916 = -0.1e1;
    real _t0917 = 0.1e1;
    vec4 _t0918 = [_t0914, _t0915, _t0916, _t0917];
    real _t0919 = 0.57735026919e0;
    real _t091A = 0.1e1;
    real _t091B = 0.e0;
    real _t091C = 0.e0;
    vec4 _t091D = [_t0919, _t091A, _t091B, _t091C];
    real _t091E = 0.57735026919e0;
    real _t091F = 0.e0;
    real _t0920 = 0.1e1;
    real _t0921 = 0.e0;
    vec4 _t0922 = [_t091E, _t091F, _t0920, _t0921];
    real _t0923 = 0.e0;
    real _t0924 = 0.e0;
    real _t0925 = 0.e0;
    real _t0926 = 0.1e1;
    vec4 _t0927 = [_t0923, _t0924, _t0925, _t0926];
    tensor[4,4] _t0928 = [_t0918, _t091D, _t0922, _t0927];
    real _t0929 = 0.1e1;
    real _t092A = 0.e0;
    real _t092B = 0.e0;
    real _t092C = 0.e0;
    vec4 _t092D = [_t0929, _t092A, _t092B, _t092C];
    real _t092E = 0.e0;
    real _t092F = 0.1e1;
    real _t0930 = 0.e0;
    real _t0931 = 0.e0;
    vec4 _t0932 = [_t092E, _t092F, _t0930, _t0931];
    real _t0933 = 0.e0;
    real _t0934 = 0.e0;
    real _t0935 = 0.1e1;
    real _t0936 = 0.e0;
    vec4 _t0937 = [_t0933, _t0934, _t0935, _t0936];
    real _t0938 = 0.e0;
    real _t0939 = 0.e0;
    real _t093A = 0.e0;
    real _t093B = 0.1e1;
    vec4 _t093C = [_t0938, _t0939, _t093A, _t093B];
    tensor[4,4] _t093D = [_t092D, _t0932, _t0937, _t093C];
    real _t093E = 0.e0;
    real _t093F = 0.1e1;
    real _t0940 = 0.e0;
    real _t0941 = 0.e0;
    vec4 _t0942 = [_t093E, _t093F, _t0940, _t0941];
    real _t0943 = -0.1e1;
    real _t0944 = 0.e0;
    real _t0945 = 0.e0;
    real _t0946 = 0.e0;
    vec4 _t0947 = [_t0943, _t0944, _t0945, _t0946];
    real _t0948 = 0.e0;
    real _t0949 = 0.e0;
    real _t094A = 0.1e1;
    real _t094B = 0.e0;
    vec4 _t094C = [_t0948, _t0949, _t094A, _t094B];
    real _t094D = 0.e0;
    real _t094E = 0.e0;
    real _t094F = 0.e0;
    real _t0950 = 0.1e1;
    vec4 _t0951 = [_t094D, _t094E, _t094F, _t0950];
    tensor[4,4] _t0952 = [_t0942, _t0947, _t094C, _t0951];
    real _t0953 = 0.e0;
    real _t0954 = 0.1e1;
    real _t0955 = 0.e0;
    real _t0956 = 0.e0;
    vec4 _t0957 = [_t0953, _t0954, _t0955, _t0956];
    real _t0958 = 0.e0;
    real _t0959 = 0.e0;
    real _t095A = 0.1e1;
    real _t095B = 0.e0;
    vec4 _t095C = [_t0958, _t0959, _t095A, _t095B];
    real _t095D = 0.1e1;
    real _t095E = 0.e0;
    real _t095F = 0.e0;
    real _t0960 = 0.e0;
    vec4 _t0961 = [_t095D, _t095E, _t095F, _t0960];
    real _t0962 = 0.e0;
    real _t0963 = 0.e0;
    real _t0964 = 0.e0;
    real _t0965 = 0.1e1;
    vec4 _t0966 = [_t0962, _t0963, _t0964, _t0965];
    tensor[4,4] _t0967 = [_t0957, _t095C, _t0961, _t0966];
    tensor[4,4][4] _t0968 = {_t0928, _t093D, _t0952, _t0967};
    real _t0969 = -0.1e1;
    real _t096A = -0.57735026919e0;
    real _t096B = -0.1e1;
    real _t096C = 0.1e1;
    vec4 _t096D = [_t0969, _t096A, _t096B, _t096C];
    real _t096E = 0.1e1;
    real _t096F = -0.57735026919e0;
    real _t0970 = 0.e0;
    real _t0971 = 0.e0;
    vec4 _t0972 = [_t096E, _t096F, _t0970, _t0971];
    real _t0973 = 0.e0;
    real _t0974 = -0.57735026919e0;
    real _t0975 = 0.1e1;
    real _t0976 = 0.e0;
    vec4 _t0977 = [_t0973, _t0974, _t0975, _t0976];
    real _t0978 = 0.e0;
    real _t0979 = 0.e0;
    real _t097A = 0.e0;
    real _t097B = 0.1e1;
    vec4 _t097C = [_t0978, _t0979, _t097A, _t097B];
    tensor[4,4] _t097D = [_t096D, _t0972, _t0977, _t097C];
    real _t097E = 0.e0;
    real _t097F = -0.1e1;
    real _t0980 = 0.e0;
    real _t0981 = 0.e0;
    vec4 _t0982 = [_t097E, _t097F, _t0980, _t0981];
    real _t0983 = 0.1e1;
    real _t0984 = 0.e0;
    real _t0985 = 0.e0;
    real _t0986 = 0.e0;
    vec4 _t0987 = [_t0983, _t0984, _t0985, _t0986];
    real _t0988 = 0.e0;
    real _t0989 = 0.e0;
    real _t098A = 0.1e1;
    real _t098B = 0.e0;
    vec4 _t098C = [_t0988, _t0989, _t098A, _t098B];
    real _t098D = 0.e0;
    real _t098E = 0.e0;
    real _t098F = 0.e0;
    real _t0990 = 0.1e1;
    vec4 _t0991 = [_t098D, _t098E, _t098F, _t0990];
    tensor[4,4] _t0992 = [_t0982, _t0987, _t098C, _t0991];
    real _t0993 = 0.1e1;
    real _t0994 = 0.e0;
    real _t0995 = 0.e0;
    real _t0996 = 0.e0;
    vec4 _t0997 = [_t0993, _t0994, _t0995, _t0996];
    real _t0998 = 0.e0;
    real _t0999 = 0.1e1;
    real _t099A = 0.e0;
    real _t099B = 0.e0;
    vec4 _t099C = [_t0998, _t0999, _t099A, _t099B];
    real _t099D = 0.e0;
    real _t099E = 0.e0;
    real _t099F = 0.1e1;
    real _t09A0 = 0.e0;
    vec4 _t09A1 = [_t099D, _t099E, _t099F, _t09A0];
    real _t09A2 = 0.e0;
    real _t09A3 = 0.e0;
    real _t09A4 = 0.e0;
    real _t09A5 = 0.1e1;
    vec4 _t09A6 = [_t09A2, _t09A3, _t09A4, _t09A5];
    tensor[4,4] _t09A7 = [_t0997, _t099C, _t09A1, _t09A6];
    real _t09A8 = 0.1e1;
    real _t09A9 = 0.e0;
    real _t09AA = 0.e0;
    real _t09AB = 0.e0;
    vec4 _t09AC = [_t09A8, _t09A9, _t09AA, _t09AB];
    real _t09AD = 0.e0;
    real _t09AE = 0.e0;
    real _t09AF = 0.1e1;
    real _t09B0 = 0.e0;
    vec4 _t09B1 = [_t09AD, _t09AE, _t09AF, _t09B0];
    real _t09B2 = 0.e0;
    real _t09B3 = -0.1e1;
    real _t09B4 = 0.e0;
    real _t09B5 = 0.e0;
    vec4 _t09B6 = [_t09B2, _t09B3, _t09B4, _t09B5];
    real _t09B7 = 0.e0;
    real _t09B8 = 0.e0;
    real _t09B9 = 0.e0;
    real _t09BA = 0.1e1;
    vec4 _t09BB = [_t09B7, _t09B8, _t09B9, _t09BA];
    tensor[4,4] _t09BC = [_t09AC, _t09B1, _t09B6, _t09BB];
    tensor[4,4][4] _t09BD = {_t097D, _t0992, _t09A7, _t09BC};
    real _t09BE = -0.1e1;
    real _t09BF = -0.1e1;
    real _t09C0 = 0.57735026919e0;
    real _t09C1 = 0.1e1;
    vec4 _t09C2 = [_t09BE, _t09BF, _t09C0, _t09C1];
    real _t09C3 = 0.1e1;
    real _t09C4 = 0.e0;
    real _t09C5 = 0.57735026919e0;
    real _t09C6 = 0.e0;
    vec4 _t09C7 = [_t09C3, _t09C4, _t09C5, _t09C6];
    real _t09C8 = 0.e0;
    real _t09C9 = 0.1e1;
    real _t09CA = 0.57735026919e0;
    real _t09CB = 0.e0;
    vec4 _t09CC = [_t09C8, _t09C9, _t09CA, _t09CB];
    real _t09CD = 0.e0;
    real _t09CE = 0.e0;
    real _t09CF = 0.e0;
    real _t09D0 = 0.1e1;
    vec4 _t09D1 = [_t09CD, _t09CE, _t09CF, _t09D0];
    tensor[4,4] _t09D2 = [_t09C2, _t09C7, _t09CC, _t09D1];
    real _t09D3 = 0.e0;
    real _t09D4 = 0.e0;
    real _t09D5 = 0.1e1;
    real _t09D6 = 0.e0;
    vec4 _t09D7 = [_t09D3, _t09D4, _t09D5, _t09D6];
    real _t09D8 = 0.1e1;
    real _t09D9 = 0.e0;
    real _t09DA = 0.e0;
    real _t09DB = 0.e0;
    vec4 _t09DC = [_t09D8, _t09D9, _t09DA, _t09DB];
    real _t09DD = 0.e0;
    real _t09DE = 0.1e1;
    real _t09DF = 0.e0;
    real _t09E0 = 0.e0;
    vec4 _t09E1 = [_t09DD, _t09DE, _t09DF, _t09E0];
    real _t09E2 = 0.e0;
    real _t09E3 = 0.e0;
    real _t09E4 = 0.e0;
    real _t09E5 = 0.1e1;
    vec4 _t09E6 = [_t09E2, _t09E3, _t09E4, _t09E5];
    tensor[4,4] _t09E7 = [_t09D7, _t09DC, _t09E1, _t09E6];
    real _t09E8 = 0.1e1;
    real _t09E9 = 0.e0;
    real _t09EA = 0.e0;
    real _t09EB = 0.e0;
    vec4 _t09EC = [_t09E8, _t09E9, _t09EA, _t09EB];
    real _t09ED = 0.e0;
    real _t09EE = 0.e0;
    real _t09EF = -0.1e1;
    real _t09F0 = 0.e0;
    vec4 _t09F1 = [_t09ED, _t09EE, _t09EF, _t09F0];
    real _t09F2 = 0.e0;
    real _t09F3 = 0.1e1;
    real _t09F4 = 0.e0;
    real _t09F5 = 0.e0;
    vec4 _t09F6 = [_t09F2, _t09F3, _t09F4, _t09F5];
    real _t09F7 = 0.e0;
    real _t09F8 = 0.e0;
    real _t09F9 = 0.e0;
    real _t09FA = 0.1e1;
    vec4 _t09FB = [_t09F7, _t09F8, _t09F9, _t09FA];
    tensor[4,4] _t09FC = [_t09EC, _t09F1, _t09F6, _t09FB];
    real _t09FD = 0.1e1;
    real _t09FE = 0.e0;
    real _t09FF = 0.e0;
    real _t0A00 = 0.e0;
    vec4 _t0A01 = [_t09FD, _t09FE, _t09FF, _t0A00];
    real _t0A02 = 0.e0;
    real _t0A03 = 0.1e1;
    real _t0A04 = 0.e0;
    real _t0A05 = 0.e0;
    vec4 _t0A06 = [_t0A02, _t0A03, _t0A04, _t0A05];
    real _t0A07 = 0.e0;
    real _t0A08 = 0.e0;
    real _t0A09 = 0.1e1;
    real _t0A0A = 0.e0;
    vec4 _t0A0B = [_t0A07, _t0A08, _t0A09, _t0A0A];
    real _t0A0C = 0.e0;
    real _t0A0D = 0.e0;
    real _t0A0E = 0.e0;
    real _t0A0F = 0.1e1;
    vec4 _t0A10 = [_t0A0C, _t0A0D, _t0A0E, _t0A0F];
    tensor[4,4] _t0A11 = [_t0A01, _t0A06, _t0A0B, _t0A10];
    tensor[4,4][4] _t0A12 = {_t09D2, _t09E7, _t09FC, _t0A11};
    tensor[4,4][4][4] _t0A13 = {_t0913, _t0968, _t09BD, _t0A12};
    real _t0A14 = time05D5[1];
    int _t0A15 = prim $r2i01B7 (_t0A14);
    tensor[4,4][4] _t0A16 = prim $sub01C0<tensor[4,4][4]; %4> (_t0A13, _t0A15);
    real _t0A17 = time05D5[1];
    int _t0A18 = prim $r2i01B7 (_t0A17);
    int[2] _t0A19 = func nextCell405D9 (_t0A18, cellId05D2, mesh05D1);
    int _t0A1A = 1;
    int _t0A1B = prim $sub01C0<int; %2> (_t0A19, _t0A1A);
    tensor[4,4] _t0A1C = prim $sub01C0<tensor[4,4]; %4> (_t0A16, _t0A1B);
    real _t0A1D = time05D5[0];
    vec3 _t0A1E = prim *0036<$[3]> (_t0A1D, dPos05D4);
    vec3 _t0A1F = prim +0017<$[3]> (_t0A1E, refPos05D3);
    real _t0A20 = _t0A1F[0];
    real _t0A21 = time05D5[0];
    vec3 _t0A22 = prim *0036<$[3]> (_t0A21, dPos05D4);
    vec3 _t0A23 = prim +0017<$[3]> (_t0A22, refPos05D3);
    real _t0A24 = _t0A23[1];
    real _t0A25 = time05D5[0];
    vec3 _t0A26 = prim *0036<$[3]> (_t0A25, dPos05D4);
    vec3 _t0A27 = prim +0017<$[3]> (_t0A26, refPos05D3);
    real _t0A28 = _t0A27[2];
    real _t0A29 = 0.1e1;
    vec4 _t0A2A = [_t0A20, _t0A24, _t0A28, _t0A29];
    vec4 _t0A2B = prim •00CE<$[4,4]; $[4]; $[4]> (_t0A1C, _t0A2A);
    real _t0A2C = _t0A2B[2];
    vec3 _t0A2D = [_t0750, _t08BE, _t0A2C];
    real _t0A2E = time05D5[1];
    int _t0A2F = prim $r2i01B7 (_t0A2E);
    int[2] _t0A30 = func nextCell405D9 (_t0A2F, cellId05D2, mesh05D1);
    int _t0A31 = 1;
    int _t0A32 = prim $sub01C0<int; %2> (_t0A30, _t0A31);
    Femdata: MeshPos _t0A33 = extractFemItemN((mesh05D1, _t05E2, _t0A2D, _t0A32),RefBuild(Mesh),);
    return _t0A33;
  } else {
    real _t0A34 = time05D5[0];
    vec3 _t0A35 = prim *0036<$[3]> (_t0A34, dPos05D4);
    vec3 _t0A36 = prim +0017<$[3]> (_t0A35, refPos05D3);
    Femdata: MeshPos _t0A37 = extractFemItemN((mesh05D1, _t0A36),InvalidBuildBoundary(MeshPos),);
    return _t0A37;
  }
}
function int[2]#6 nextCell405D9 (int faceIdx0A38, int cell0A39, Femdata: Mesh mesh0A3A)
{
  int _t0A3B = -1;
  bool _t0A3C = prim ==0082 (faceIdx0A38, _t0A3B);
  if _t0A3C {
    int _t0A3D = -1;
    int _t0A3E = -1;
    int[2] _t0A3F = {_t0A3D, _t0A3E};
    return _t0A3F;
  } else {
    int _t0A40 = 8;
    int _t0A41 = prim *0033 (cell0A39, _t0A40);
    int _t0A42 = 2;
    int _t0A43 = prim *0033 (faceIdx0A38, _t0A42);
    int _t0A44 = prim +0015 (_t0A41, _t0A43);
    int[2] _t0A45 = extractFemItemN((mesh0A3A, _t0A44),CellFaceCell(Mesh),);
    return _t0A45;
  }
}
function vec2#0 _enter0A46 (vec3 refPos0A47, vec3 dPos0A48)
{
  real time0A49 = +inf;
  int face0A4A = -1;
  real faceTime0A4B = -inf;
  real _t0A4C = 0.57735026919e0;
  real _t0A4D = 0.57735026919e0;
  real _t0A4E = 0.57735026919e0;
  real _t0A4F = 0.57735026919e0;
  vec3 _t0A50 = [_t0A4D, _t0A4E, _t0A4F];
  real _t0A51 = prim •00CE<$[3]; $[3]; $[]> (_t0A50, refPos0A47);
  real _t0A52 = prim -0026<$[]> (_t0A4C, _t0A51);
  real _t0A53 = 0.57735026919e0;
  real _t0A54 = 0.57735026919e0;
  real _t0A55 = 0.57735026919e0;
  vec3 _t0A56 = [_t0A53, _t0A54, _t0A55];
  real _t0A57 = prim •00CE<$[3]; $[3]; $[]> (_t0A56, dPos0A48);
  real _t0A58 = prim /0055 (_t0A52, _t0A57);
  real _t0A59 = -0.1e-7;
  bool _t0A5A = prim >=007E (_t0A58, _t0A59);
  real _t0A5B = 0.57735026919e0;
  real _t0A5C = 0.57735026919e0;
  real _t0A5D = 0.57735026919e0;
  real _t0A5E = 0.57735026919e0;
  vec3 _t0A5F = [_t0A5C, _t0A5D, _t0A5E];
  real _t0A60 = prim •00CE<$[3]; $[3]; $[]> (_t0A5F, refPos0A47);
  real _t0A61 = prim -0026<$[]> (_t0A5B, _t0A60);
  real _t0A62 = 0.57735026919e0;
  real _t0A63 = 0.57735026919e0;
  real _t0A64 = 0.57735026919e0;
  vec3 _t0A65 = [_t0A62, _t0A63, _t0A64];
  real _t0A66 = prim •00CE<$[3]; $[3]; $[]> (_t0A65, dPos0A48);
  real _t0A67 = prim /0055 (_t0A61, _t0A66);
  bool _t0A68 = prim >0080 (time0A49, _t0A67);
  real _t0A69 = 0.57735026919e0;
  real _t0A6A = 0.57735026919e0;
  real _t0A6B = 0.57735026919e0;
  vec3 _t0A6C = [_t0A69, _t0A6A, _t0A6B];
  real _t0A6D = prim •00CE<$[3]; $[3]; $[]> (_t0A6C, dPos0A48);
  real _t0A6E = prim |()|00B5<$[]> (_t0A6D);
  real _t0A6F = 0.1e-7;
  bool _t0A70 = prim >=007E (_t0A6E, _t0A6F);
  bool _t0A71 = prim $and01C4 (_t0A68, _t0A70);
  bool _t0A72 = prim $and01C4 (_t0A5A, _t0A71);
  if _t0A72 {
    real _t0A73 = 0.1e1;
    real _t0A74 = 0.1e-7;
    real _t0A75 = prim +0017<$[]> (_t0A73, _t0A74);
    real _t0A76 = 0.1e1;
    real _t0A77 = 0.1e1;
    real _t0A78 = 0.1e1;
    vec3 _t0A79 = [_t0A76, _t0A77, _t0A78];
    real _t0A7A = 0.57735026919e0;
    real _t0A7B = 0.57735026919e0;
    real _t0A7C = 0.57735026919e0;
    real _t0A7D = 0.57735026919e0;
    vec3 _t0A7E = [_t0A7B, _t0A7C, _t0A7D];
    real _t0A7F = prim •00CE<$[3]; $[3]; $[]> (_t0A7E, refPos0A47);
    real _t0A80 = prim -0026<$[]> (_t0A7A, _t0A7F);
    real _t0A81 = 0.57735026919e0;
    real _t0A82 = 0.57735026919e0;
    real _t0A83 = 0.57735026919e0;
    vec3 _t0A84 = [_t0A81, _t0A82, _t0A83];
    real _t0A85 = prim •00CE<$[3]; $[3]; $[]> (_t0A84, dPos0A48);
    real _t0A86 = prim /0055 (_t0A80, _t0A85);
    vec3 _t0A87 = prim *0038<$[3]> (dPos0A48, _t0A86);
    vec3 _t0A88 = prim +0017<$[3]> (refPos0A47, _t0A87);
    real _t0A89 = prim •00CE<$[3]; $[3]; $[]> (_t0A79, _t0A88);
    bool _t0A8A = prim >0080 (_t0A75, _t0A89);
    real _t0A8B = 0.1e-7;
    real _t0A8C = 0.1e-7;
    real _t0A8D = 0.1e-7;
    vec3 _t0A8E = [_t0A8B, _t0A8C, _t0A8D];
    real _t0A8F = 0.57735026919e0;
    real _t0A90 = 0.57735026919e0;
    real _t0A91 = 0.57735026919e0;
    real _t0A92 = 0.57735026919e0;
    vec3 _t0A93 = [_t0A90, _t0A91, _t0A92];
    real _t0A94 = prim •00CE<$[3]; $[3]; $[]> (_t0A93, refPos0A47);
    real _t0A95 = prim -0026<$[]> (_t0A8F, _t0A94);
    real _t0A96 = 0.57735026919e0;
    real _t0A97 = 0.57735026919e0;
    real _t0A98 = 0.57735026919e0;
    vec3 _t0A99 = [_t0A96, _t0A97, _t0A98];
    real _t0A9A = prim •00CE<$[3]; $[3]; $[]> (_t0A99, dPos0A48);
    real _t0A9B = prim /0055 (_t0A95, _t0A9A);
    vec3 _t0A9C = prim *0038<$[3]> (dPos0A48, _t0A9B);
    vec3 _t0A9D = prim +0017<$[3]> (refPos0A47, _t0A9C);
    vec3 _t0A9E = prim +0017<$[3]> (_t0A8E, _t0A9D);
    real _t0A9F = _t0A9E[0];
    real _t0AA0 = -0.e0;
    bool _t0AA1 = prim >0080 (_t0A9F, _t0AA0);
    real _t0AA2 = 0.1e-7;
    real _t0AA3 = 0.1e-7;
    real _t0AA4 = 0.1e-7;
    vec3 _t0AA5 = [_t0AA2, _t0AA3, _t0AA4];
    real _t0AA6 = 0.57735026919e0;
    real _t0AA7 = 0.57735026919e0;
    real _t0AA8 = 0.57735026919e0;
    real _t0AA9 = 0.57735026919e0;
    vec3 _t0AAA = [_t0AA7, _t0AA8, _t0AA9];
    real _t0AAB = prim •00CE<$[3]; $[3]; $[]> (_t0AAA, refPos0A47);
    real _t0AAC = prim -0026<$[]> (_t0AA6, _t0AAB);
    real _t0AAD = 0.57735026919e0;
    real _t0AAE = 0.57735026919e0;
    real _t0AAF = 0.57735026919e0;
    vec3 _t0AB0 = [_t0AAD, _t0AAE, _t0AAF];
    real _t0AB1 = prim •00CE<$[3]; $[3]; $[]> (_t0AB0, dPos0A48);
    real _t0AB2 = prim /0055 (_t0AAC, _t0AB1);
    vec3 _t0AB3 = prim *0038<$[3]> (dPos0A48, _t0AB2);
    vec3 _t0AB4 = prim +0017<$[3]> (refPos0A47, _t0AB3);
    vec3 _t0AB5 = prim +0017<$[3]> (_t0AA5, _t0AB4);
    real _t0AB6 = _t0AB5[1];
    real _t0AB7 = -0.e0;
    bool _t0AB8 = prim >0080 (_t0AB6, _t0AB7);
    real _t0AB9 = 0.1e-7;
    real _t0ABA = 0.1e-7;
    real _t0ABB = 0.1e-7;
    vec3 _t0ABC = [_t0AB9, _t0ABA, _t0ABB];
    real _t0ABD = 0.57735026919e0;
    real _t0ABE = 0.57735026919e0;
    real _t0ABF = 0.57735026919e0;
    real _t0AC0 = 0.57735026919e0;
    vec3 _t0AC1 = [_t0ABE, _t0ABF, _t0AC0];
    real _t0AC2 = prim •00CE<$[3]; $[3]; $[]> (_t0AC1, refPos0A47);
    real _t0AC3 = prim -0026<$[]> (_t0ABD, _t0AC2);
    real _t0AC4 = 0.57735026919e0;
    real _t0AC5 = 0.57735026919e0;
    real _t0AC6 = 0.57735026919e0;
    vec3 _t0AC7 = [_t0AC4, _t0AC5, _t0AC6];
    real _t0AC8 = prim •00CE<$[3]; $[3]; $[]> (_t0AC7, dPos0A48);
    real _t0AC9 = prim /0055 (_t0AC3, _t0AC8);
    vec3 _t0ACA = prim *0038<$[3]> (dPos0A48, _t0AC9);
    vec3 _t0ACB = prim +0017<$[3]> (refPos0A47, _t0ACA);
    vec3 _t0ACC = prim +0017<$[3]> (_t0ABC, _t0ACB);
    real _t0ACD = _t0ACC[2];
    real _t0ACE = -0.e0;
    bool _t0ACF = prim >0080 (_t0ACD, _t0ACE);
    bool _t0AD0 = prim $and01C4 (_t0AB8, _t0ACF);
    bool _t0AD1 = prim $and01C4 (_t0AA1, _t0AD0);
    bool _t0AD2 = prim $and01C4 (_t0A8A, _t0AD1);
    if _t0AD2 {
      real _t0AD3 = 0.57735026919e0;
      real _t0AD4 = 0.57735026919e0;
      real _t0AD5 = 0.57735026919e0;
      real _t0AD6 = 0.57735026919e0;
      vec3 _t0AD7 = [_t0AD4, _t0AD5, _t0AD6];
      real _t0AD8 = prim •00CE<$[3]; $[3]; $[]> (_t0AD7, refPos0A47);
      real _t0AD9 = prim -0026<$[]> (_t0AD3, _t0AD8);
      real _t0ADA = 0.57735026919e0;
      real _t0ADB = 0.57735026919e0;
      real _t0ADC = 0.57735026919e0;
      vec3 _t0ADD = [_t0ADA, _t0ADB, _t0ADC];
      real _t0ADE = prim •00CE<$[3]; $[3]; $[]> (_t0ADD, dPos0A48);
      time0A49 = prim /0055 (_t0AD9, _t0ADE);
      face0A4A = 0;
    }
  }
  real _t0ADF = 0.e0;
  real _t0AE0 = -0.1e1;
  real _t0AE1 = 0.e0;
  real _t0AE2 = 0.e0;
  vec3 _t0AE3 = [_t0AE0, _t0AE1, _t0AE2];
  real _t0AE4 = prim •00CE<$[3]; $[3]; $[]> (_t0AE3, refPos0A47);
  real _t0AE5 = prim -0026<$[]> (_t0ADF, _t0AE4);
  real _t0AE6 = -0.1e1;
  real _t0AE7 = 0.e0;
  real _t0AE8 = 0.e0;
  vec3 _t0AE9 = [_t0AE6, _t0AE7, _t0AE8];
  real _t0AEA = prim •00CE<$[3]; $[3]; $[]> (_t0AE9, dPos0A48);
  real _t0AEB = prim /0055 (_t0AE5, _t0AEA);
  real _t0AEC = -0.1e-7;
  bool _t0AED = prim >=007E (_t0AEB, _t0AEC);
  real _t0AEE = 0.e0;
  real _t0AEF = -0.1e1;
  real _t0AF0 = 0.e0;
  real _t0AF1 = 0.e0;
  vec3 _t0AF2 = [_t0AEF, _t0AF0, _t0AF1];
  real _t0AF3 = prim •00CE<$[3]; $[3]; $[]> (_t0AF2, refPos0A47);
  real _t0AF4 = prim -0026<$[]> (_t0AEE, _t0AF3);
  real _t0AF5 = -0.1e1;
  real _t0AF6 = 0.e0;
  real _t0AF7 = 0.e0;
  vec3 _t0AF8 = [_t0AF5, _t0AF6, _t0AF7];
  real _t0AF9 = prim •00CE<$[3]; $[3]; $[]> (_t0AF8, dPos0A48);
  real _t0AFA = prim /0055 (_t0AF4, _t0AF9);
  bool _t0AFB = prim >0080 (time0A49, _t0AFA);
  real _t0AFC = -0.1e1;
  real _t0AFD = 0.e0;
  real _t0AFE = 0.e0;
  vec3 _t0AFF = [_t0AFC, _t0AFD, _t0AFE];
  real _t0B00 = prim •00CE<$[3]; $[3]; $[]> (_t0AFF, dPos0A48);
  real _t0B01 = prim |()|00B5<$[]> (_t0B00);
  real _t0B02 = 0.1e-7;
  bool _t0B03 = prim >=007E (_t0B01, _t0B02);
  bool _t0B04 = prim $and01C4 (_t0AFB, _t0B03);
  bool _t0B05 = prim $and01C4 (_t0AED, _t0B04);
  if _t0B05 {
    real _t0B06 = 0.1e1;
    real _t0B07 = 0.1e-7;
    real _t0B08 = prim +0017<$[]> (_t0B06, _t0B07);
    real _t0B09 = 0.1e1;
    real _t0B0A = 0.1e1;
    real _t0B0B = 0.1e1;
    vec3 _t0B0C = [_t0B09, _t0B0A, _t0B0B];
    real _t0B0D = 0.e0;
    real _t0B0E = -0.1e1;
    real _t0B0F = 0.e0;
    real _t0B10 = 0.e0;
    vec3 _t0B11 = [_t0B0E, _t0B0F, _t0B10];
    real _t0B12 = prim •00CE<$[3]; $[3]; $[]> (_t0B11, refPos0A47);
    real _t0B13 = prim -0026<$[]> (_t0B0D, _t0B12);
    real _t0B14 = -0.1e1;
    real _t0B15 = 0.e0;
    real _t0B16 = 0.e0;
    vec3 _t0B17 = [_t0B14, _t0B15, _t0B16];
    real _t0B18 = prim •00CE<$[3]; $[3]; $[]> (_t0B17, dPos0A48);
    real _t0B19 = prim /0055 (_t0B13, _t0B18);
    vec3 _t0B1A = prim *0038<$[3]> (dPos0A48, _t0B19);
    vec3 _t0B1B = prim +0017<$[3]> (refPos0A47, _t0B1A);
    real _t0B1C = prim •00CE<$[3]; $[3]; $[]> (_t0B0C, _t0B1B);
    bool _t0B1D = prim >0080 (_t0B08, _t0B1C);
    real _t0B1E = 0.1e-7;
    real _t0B1F = 0.1e-7;
    real _t0B20 = 0.1e-7;
    vec3 _t0B21 = [_t0B1E, _t0B1F, _t0B20];
    real _t0B22 = 0.e0;
    real _t0B23 = -0.1e1;
    real _t0B24 = 0.e0;
    real _t0B25 = 0.e0;
    vec3 _t0B26 = [_t0B23, _t0B24, _t0B25];
    real _t0B27 = prim •00CE<$[3]; $[3]; $[]> (_t0B26, refPos0A47);
    real _t0B28 = prim -0026<$[]> (_t0B22, _t0B27);
    real _t0B29 = -0.1e1;
    real _t0B2A = 0.e0;
    real _t0B2B = 0.e0;
    vec3 _t0B2C = [_t0B29, _t0B2A, _t0B2B];
    real _t0B2D = prim •00CE<$[3]; $[3]; $[]> (_t0B2C, dPos0A48);
    real _t0B2E = prim /0055 (_t0B28, _t0B2D);
    vec3 _t0B2F = prim *0038<$[3]> (dPos0A48, _t0B2E);
    vec3 _t0B30 = prim +0017<$[3]> (refPos0A47, _t0B2F);
    vec3 _t0B31 = prim +0017<$[3]> (_t0B21, _t0B30);
    real _t0B32 = _t0B31[0];
    real _t0B33 = -0.e0;
    bool _t0B34 = prim >0080 (_t0B32, _t0B33);
    real _t0B35 = 0.1e-7;
    real _t0B36 = 0.1e-7;
    real _t0B37 = 0.1e-7;
    vec3 _t0B38 = [_t0B35, _t0B36, _t0B37];
    real _t0B39 = 0.e0;
    real _t0B3A = -0.1e1;
    real _t0B3B = 0.e0;
    real _t0B3C = 0.e0;
    vec3 _t0B3D = [_t0B3A, _t0B3B, _t0B3C];
    real _t0B3E = prim •00CE<$[3]; $[3]; $[]> (_t0B3D, refPos0A47);
    real _t0B3F = prim -0026<$[]> (_t0B39, _t0B3E);
    real _t0B40 = -0.1e1;
    real _t0B41 = 0.e0;
    real _t0B42 = 0.e0;
    vec3 _t0B43 = [_t0B40, _t0B41, _t0B42];
    real _t0B44 = prim •00CE<$[3]; $[3]; $[]> (_t0B43, dPos0A48);
    real _t0B45 = prim /0055 (_t0B3F, _t0B44);
    vec3 _t0B46 = prim *0038<$[3]> (dPos0A48, _t0B45);
    vec3 _t0B47 = prim +0017<$[3]> (refPos0A47, _t0B46);
    vec3 _t0B48 = prim +0017<$[3]> (_t0B38, _t0B47);
    real _t0B49 = _t0B48[1];
    real _t0B4A = -0.e0;
    bool _t0B4B = prim >0080 (_t0B49, _t0B4A);
    real _t0B4C = 0.1e-7;
    real _t0B4D = 0.1e-7;
    real _t0B4E = 0.1e-7;
    vec3 _t0B4F = [_t0B4C, _t0B4D, _t0B4E];
    real _t0B50 = 0.e0;
    real _t0B51 = -0.1e1;
    real _t0B52 = 0.e0;
    real _t0B53 = 0.e0;
    vec3 _t0B54 = [_t0B51, _t0B52, _t0B53];
    real _t0B55 = prim •00CE<$[3]; $[3]; $[]> (_t0B54, refPos0A47);
    real _t0B56 = prim -0026<$[]> (_t0B50, _t0B55);
    real _t0B57 = -0.1e1;
    real _t0B58 = 0.e0;
    real _t0B59 = 0.e0;
    vec3 _t0B5A = [_t0B57, _t0B58, _t0B59];
    real _t0B5B = prim •00CE<$[3]; $[3]; $[]> (_t0B5A, dPos0A48);
    real _t0B5C = prim /0055 (_t0B56, _t0B5B);
    vec3 _t0B5D = prim *0038<$[3]> (dPos0A48, _t0B5C);
    vec3 _t0B5E = prim +0017<$[3]> (refPos0A47, _t0B5D);
    vec3 _t0B5F = prim +0017<$[3]> (_t0B4F, _t0B5E);
    real _t0B60 = _t0B5F[2];
    real _t0B61 = -0.e0;
    bool _t0B62 = prim >0080 (_t0B60, _t0B61);
    bool _t0B63 = prim $and01C4 (_t0B4B, _t0B62);
    bool _t0B64 = prim $and01C4 (_t0B34, _t0B63);
    bool _t0B65 = prim $and01C4 (_t0B1D, _t0B64);
    if _t0B65 {
      real _t0B66 = 0.e0;
      real _t0B67 = -0.1e1;
      real _t0B68 = 0.e0;
      real _t0B69 = 0.e0;
      vec3 _t0B6A = [_t0B67, _t0B68, _t0B69];
      real _t0B6B = prim •00CE<$[3]; $[3]; $[]> (_t0B6A, refPos0A47);
      real _t0B6C = prim -0026<$[]> (_t0B66, _t0B6B);
      real _t0B6D = -0.1e1;
      real _t0B6E = 0.e0;
      real _t0B6F = 0.e0;
      vec3 _t0B70 = [_t0B6D, _t0B6E, _t0B6F];
      real _t0B71 = prim •00CE<$[3]; $[3]; $[]> (_t0B70, dPos0A48);
      time0A49 = prim /0055 (_t0B6C, _t0B71);
      face0A4A = 1;
    }
  }
  real _t0B72 = 0.e0;
  real _t0B73 = 0.e0;
  real _t0B74 = -0.1e1;
  real _t0B75 = 0.e0;
  vec3 _t0B76 = [_t0B73, _t0B74, _t0B75];
  real _t0B77 = prim •00CE<$[3]; $[3]; $[]> (_t0B76, refPos0A47);
  real _t0B78 = prim -0026<$[]> (_t0B72, _t0B77);
  real _t0B79 = 0.e0;
  real _t0B7A = -0.1e1;
  real _t0B7B = 0.e0;
  vec3 _t0B7C = [_t0B79, _t0B7A, _t0B7B];
  real _t0B7D = prim •00CE<$[3]; $[3]; $[]> (_t0B7C, dPos0A48);
  real _t0B7E = prim /0055 (_t0B78, _t0B7D);
  real _t0B7F = -0.1e-7;
  bool _t0B80 = prim >=007E (_t0B7E, _t0B7F);
  real _t0B81 = 0.e0;
  real _t0B82 = 0.e0;
  real _t0B83 = -0.1e1;
  real _t0B84 = 0.e0;
  vec3 _t0B85 = [_t0B82, _t0B83, _t0B84];
  real _t0B86 = prim •00CE<$[3]; $[3]; $[]> (_t0B85, refPos0A47);
  real _t0B87 = prim -0026<$[]> (_t0B81, _t0B86);
  real _t0B88 = 0.e0;
  real _t0B89 = -0.1e1;
  real _t0B8A = 0.e0;
  vec3 _t0B8B = [_t0B88, _t0B89, _t0B8A];
  real _t0B8C = prim •00CE<$[3]; $[3]; $[]> (_t0B8B, dPos0A48);
  real _t0B8D = prim /0055 (_t0B87, _t0B8C);
  bool _t0B8E = prim >0080 (time0A49, _t0B8D);
  real _t0B8F = 0.e0;
  real _t0B90 = -0.1e1;
  real _t0B91 = 0.e0;
  vec3 _t0B92 = [_t0B8F, _t0B90, _t0B91];
  real _t0B93 = prim •00CE<$[3]; $[3]; $[]> (_t0B92, dPos0A48);
  real _t0B94 = prim |()|00B5<$[]> (_t0B93);
  real _t0B95 = 0.1e-7;
  bool _t0B96 = prim >=007E (_t0B94, _t0B95);
  bool _t0B97 = prim $and01C4 (_t0B8E, _t0B96);
  bool _t0B98 = prim $and01C4 (_t0B80, _t0B97);
  if _t0B98 {
    real _t0B99 = 0.1e1;
    real _t0B9A = 0.1e-7;
    real _t0B9B = prim +0017<$[]> (_t0B99, _t0B9A);
    real _t0B9C = 0.1e1;
    real _t0B9D = 0.1e1;
    real _t0B9E = 0.1e1;
    vec3 _t0B9F = [_t0B9C, _t0B9D, _t0B9E];
    real _t0BA0 = 0.e0;
    real _t0BA1 = 0.e0;
    real _t0BA2 = -0.1e1;
    real _t0BA3 = 0.e0;
    vec3 _t0BA4 = [_t0BA1, _t0BA2, _t0BA3];
    real _t0BA5 = prim •00CE<$[3]; $[3]; $[]> (_t0BA4, refPos0A47);
    real _t0BA6 = prim -0026<$[]> (_t0BA0, _t0BA5);
    real _t0BA7 = 0.e0;
    real _t0BA8 = -0.1e1;
    real _t0BA9 = 0.e0;
    vec3 _t0BAA = [_t0BA7, _t0BA8, _t0BA9];
    real _t0BAB = prim •00CE<$[3]; $[3]; $[]> (_t0BAA, dPos0A48);
    real _t0BAC = prim /0055 (_t0BA6, _t0BAB);
    vec3 _t0BAD = prim *0038<$[3]> (dPos0A48, _t0BAC);
    vec3 _t0BAE = prim +0017<$[3]> (refPos0A47, _t0BAD);
    real _t0BAF = prim •00CE<$[3]; $[3]; $[]> (_t0B9F, _t0BAE);
    bool _t0BB0 = prim >0080 (_t0B9B, _t0BAF);
    real _t0BB1 = 0.1e-7;
    real _t0BB2 = 0.1e-7;
    real _t0BB3 = 0.1e-7;
    vec3 _t0BB4 = [_t0BB1, _t0BB2, _t0BB3];
    real _t0BB5 = 0.e0;
    real _t0BB6 = 0.e0;
    real _t0BB7 = -0.1e1;
    real _t0BB8 = 0.e0;
    vec3 _t0BB9 = [_t0BB6, _t0BB7, _t0BB8];
    real _t0BBA = prim •00CE<$[3]; $[3]; $[]> (_t0BB9, refPos0A47);
    real _t0BBB = prim -0026<$[]> (_t0BB5, _t0BBA);
    real _t0BBC = 0.e0;
    real _t0BBD = -0.1e1;
    real _t0BBE = 0.e0;
    vec3 _t0BBF = [_t0BBC, _t0BBD, _t0BBE];
    real _t0BC0 = prim •00CE<$[3]; $[3]; $[]> (_t0BBF, dPos0A48);
    real _t0BC1 = prim /0055 (_t0BBB, _t0BC0);
    vec3 _t0BC2 = prim *0038<$[3]> (dPos0A48, _t0BC1);
    vec3 _t0BC3 = prim +0017<$[3]> (refPos0A47, _t0BC2);
    vec3 _t0BC4 = prim +0017<$[3]> (_t0BB4, _t0BC3);
    real _t0BC5 = _t0BC4[0];
    real _t0BC6 = -0.e0;
    bool _t0BC7 = prim >0080 (_t0BC5, _t0BC6);
    real _t0BC8 = 0.1e-7;
    real _t0BC9 = 0.1e-7;
    real _t0BCA = 0.1e-7;
    vec3 _t0BCB = [_t0BC8, _t0BC9, _t0BCA];
    real _t0BCC = 0.e0;
    real _t0BCD = 0.e0;
    real _t0BCE = -0.1e1;
    real _t0BCF = 0.e0;
    vec3 _t0BD0 = [_t0BCD, _t0BCE, _t0BCF];
    real _t0BD1 = prim •00CE<$[3]; $[3]; $[]> (_t0BD0, refPos0A47);
    real _t0BD2 = prim -0026<$[]> (_t0BCC, _t0BD1);
    real _t0BD3 = 0.e0;
    real _t0BD4 = -0.1e1;
    real _t0BD5 = 0.e0;
    vec3 _t0BD6 = [_t0BD3, _t0BD4, _t0BD5];
    real _t0BD7 = prim •00CE<$[3]; $[3]; $[]> (_t0BD6, dPos0A48);
    real _t0BD8 = prim /0055 (_t0BD2, _t0BD7);
    vec3 _t0BD9 = prim *0038<$[3]> (dPos0A48, _t0BD8);
    vec3 _t0BDA = prim +0017<$[3]> (refPos0A47, _t0BD9);
    vec3 _t0BDB = prim +0017<$[3]> (_t0BCB, _t0BDA);
    real _t0BDC = _t0BDB[1];
    real _t0BDD = -0.e0;
    bool _t0BDE = prim >0080 (_t0BDC, _t0BDD);
    real _t0BDF = 0.1e-7;
    real _t0BE0 = 0.1e-7;
    real _t0BE1 = 0.1e-7;
    vec3 _t0BE2 = [_t0BDF, _t0BE0, _t0BE1];
    real _t0BE3 = 0.e0;
    real _t0BE4 = 0.e0;
    real _t0BE5 = -0.1e1;
    real _t0BE6 = 0.e0;
    vec3 _t0BE7 = [_t0BE4, _t0BE5, _t0BE6];
    real _t0BE8 = prim •00CE<$[3]; $[3]; $[]> (_t0BE7, refPos0A47);
    real _t0BE9 = prim -0026<$[]> (_t0BE3, _t0BE8);
    real _t0BEA = 0.e0;
    real _t0BEB = -0.1e1;
    real _t0BEC = 0.e0;
    vec3 _t0BED = [_t0BEA, _t0BEB, _t0BEC];
    real _t0BEE = prim •00CE<$[3]; $[3]; $[]> (_t0BED, dPos0A48);
    real _t0BEF = prim /0055 (_t0BE9, _t0BEE);
    vec3 _t0BF0 = prim *0038<$[3]> (dPos0A48, _t0BEF);
    vec3 _t0BF1 = prim +0017<$[3]> (refPos0A47, _t0BF0);
    vec3 _t0BF2 = prim +0017<$[3]> (_t0BE2, _t0BF1);
    real _t0BF3 = _t0BF2[2];
    real _t0BF4 = -0.e0;
    bool _t0BF5 = prim >0080 (_t0BF3, _t0BF4);
    bool _t0BF6 = prim $and01C4 (_t0BDE, _t0BF5);
    bool _t0BF7 = prim $and01C4 (_t0BC7, _t0BF6);
    bool _t0BF8 = prim $and01C4 (_t0BB0, _t0BF7);
    if _t0BF8 {
      real _t0BF9 = 0.e0;
      real _t0BFA = 0.e0;
      real _t0BFB = -0.1e1;
      real _t0BFC = 0.e0;
      vec3 _t0BFD = [_t0BFA, _t0BFB, _t0BFC];
      real _t0BFE = prim •00CE<$[3]; $[3]; $[]> (_t0BFD, refPos0A47);
      real _t0BFF = prim -0026<$[]> (_t0BF9, _t0BFE);
      real _t0C00 = 0.e0;
      real _t0C01 = -0.1e1;
      real _t0C02 = 0.e0;
      vec3 _t0C03 = [_t0C00, _t0C01, _t0C02];
      real _t0C04 = prim •00CE<$[3]; $[3]; $[]> (_t0C03, dPos0A48);
      time0A49 = prim /0055 (_t0BFF, _t0C04);
      face0A4A = 2;
    }
  }
  real _t0C05 = 0.e0;
  real _t0C06 = 0.e0;
  real _t0C07 = 0.e0;
  real _t0C08 = -0.1e1;
  vec3 _t0C09 = [_t0C06, _t0C07, _t0C08];
  real _t0C0A = prim •00CE<$[3]; $[3]; $[]> (_t0C09, refPos0A47);
  real _t0C0B = prim -0026<$[]> (_t0C05, _t0C0A);
  real _t0C0C = 0.e0;
  real _t0C0D = 0.e0;
  real _t0C0E = -0.1e1;
  vec3 _t0C0F = [_t0C0C, _t0C0D, _t0C0E];
  real _t0C10 = prim •00CE<$[3]; $[3]; $[]> (_t0C0F, dPos0A48);
  real _t0C11 = prim /0055 (_t0C0B, _t0C10);
  real _t0C12 = -0.1e-7;
  bool _t0C13 = prim >=007E (_t0C11, _t0C12);
  real _t0C14 = 0.e0;
  real _t0C15 = 0.e0;
  real _t0C16 = 0.e0;
  real _t0C17 = -0.1e1;
  vec3 _t0C18 = [_t0C15, _t0C16, _t0C17];
  real _t0C19 = prim •00CE<$[3]; $[3]; $[]> (_t0C18, refPos0A47);
  real _t0C1A = prim -0026<$[]> (_t0C14, _t0C19);
  real _t0C1B = 0.e0;
  real _t0C1C = 0.e0;
  real _t0C1D = -0.1e1;
  vec3 _t0C1E = [_t0C1B, _t0C1C, _t0C1D];
  real _t0C1F = prim •00CE<$[3]; $[3]; $[]> (_t0C1E, dPos0A48);
  real _t0C20 = prim /0055 (_t0C1A, _t0C1F);
  bool _t0C21 = prim >0080 (time0A49, _t0C20);
  real _t0C22 = 0.e0;
  real _t0C23 = 0.e0;
  real _t0C24 = -0.1e1;
  vec3 _t0C25 = [_t0C22, _t0C23, _t0C24];
  real _t0C26 = prim •00CE<$[3]; $[3]; $[]> (_t0C25, dPos0A48);
  real _t0C27 = prim |()|00B5<$[]> (_t0C26);
  real _t0C28 = 0.1e-7;
  bool _t0C29 = prim >=007E (_t0C27, _t0C28);
  bool _t0C2A = prim $and01C4 (_t0C21, _t0C29);
  bool _t0C2B = prim $and01C4 (_t0C13, _t0C2A);
  if _t0C2B {
    real _t0C2C = 0.1e1;
    real _t0C2D = 0.1e-7;
    real _t0C2E = prim +0017<$[]> (_t0C2C, _t0C2D);
    real _t0C2F = 0.1e1;
    real _t0C30 = 0.1e1;
    real _t0C31 = 0.1e1;
    vec3 _t0C32 = [_t0C2F, _t0C30, _t0C31];
    real _t0C33 = 0.e0;
    real _t0C34 = 0.e0;
    real _t0C35 = 0.e0;
    real _t0C36 = -0.1e1;
    vec3 _t0C37 = [_t0C34, _t0C35, _t0C36];
    real _t0C38 = prim •00CE<$[3]; $[3]; $[]> (_t0C37, refPos0A47);
    real _t0C39 = prim -0026<$[]> (_t0C33, _t0C38);
    real _t0C3A = 0.e0;
    real _t0C3B = 0.e0;
    real _t0C3C = -0.1e1;
    vec3 _t0C3D = [_t0C3A, _t0C3B, _t0C3C];
    real _t0C3E = prim •00CE<$[3]; $[3]; $[]> (_t0C3D, dPos0A48);
    real _t0C3F = prim /0055 (_t0C39, _t0C3E);
    vec3 _t0C40 = prim *0038<$[3]> (dPos0A48, _t0C3F);
    vec3 _t0C41 = prim +0017<$[3]> (refPos0A47, _t0C40);
    real _t0C42 = prim •00CE<$[3]; $[3]; $[]> (_t0C32, _t0C41);
    bool _t0C43 = prim >0080 (_t0C2E, _t0C42);
    real _t0C44 = 0.1e-7;
    real _t0C45 = 0.1e-7;
    real _t0C46 = 0.1e-7;
    vec3 _t0C47 = [_t0C44, _t0C45, _t0C46];
    real _t0C48 = 0.e0;
    real _t0C49 = 0.e0;
    real _t0C4A = 0.e0;
    real _t0C4B = -0.1e1;
    vec3 _t0C4C = [_t0C49, _t0C4A, _t0C4B];
    real _t0C4D = prim •00CE<$[3]; $[3]; $[]> (_t0C4C, refPos0A47);
    real _t0C4E = prim -0026<$[]> (_t0C48, _t0C4D);
    real _t0C4F = 0.e0;
    real _t0C50 = 0.e0;
    real _t0C51 = -0.1e1;
    vec3 _t0C52 = [_t0C4F, _t0C50, _t0C51];
    real _t0C53 = prim •00CE<$[3]; $[3]; $[]> (_t0C52, dPos0A48);
    real _t0C54 = prim /0055 (_t0C4E, _t0C53);
    vec3 _t0C55 = prim *0038<$[3]> (dPos0A48, _t0C54);
    vec3 _t0C56 = prim +0017<$[3]> (refPos0A47, _t0C55);
    vec3 _t0C57 = prim +0017<$[3]> (_t0C47, _t0C56);
    real _t0C58 = _t0C57[0];
    real _t0C59 = -0.e0;
    bool _t0C5A = prim >0080 (_t0C58, _t0C59);
    real _t0C5B = 0.1e-7;
    real _t0C5C = 0.1e-7;
    real _t0C5D = 0.1e-7;
    vec3 _t0C5E = [_t0C5B, _t0C5C, _t0C5D];
    real _t0C5F = 0.e0;
    real _t0C60 = 0.e0;
    real _t0C61 = 0.e0;
    real _t0C62 = -0.1e1;
    vec3 _t0C63 = [_t0C60, _t0C61, _t0C62];
    real _t0C64 = prim •00CE<$[3]; $[3]; $[]> (_t0C63, refPos0A47);
    real _t0C65 = prim -0026<$[]> (_t0C5F, _t0C64);
    real _t0C66 = 0.e0;
    real _t0C67 = 0.e0;
    real _t0C68 = -0.1e1;
    vec3 _t0C69 = [_t0C66, _t0C67, _t0C68];
    real _t0C6A = prim •00CE<$[3]; $[3]; $[]> (_t0C69, dPos0A48);
    real _t0C6B = prim /0055 (_t0C65, _t0C6A);
    vec3 _t0C6C = prim *0038<$[3]> (dPos0A48, _t0C6B);
    vec3 _t0C6D = prim +0017<$[3]> (refPos0A47, _t0C6C);
    vec3 _t0C6E = prim +0017<$[3]> (_t0C5E, _t0C6D);
    real _t0C6F = _t0C6E[1];
    real _t0C70 = -0.e0;
    bool _t0C71 = prim >0080 (_t0C6F, _t0C70);
    real _t0C72 = 0.1e-7;
    real _t0C73 = 0.1e-7;
    real _t0C74 = 0.1e-7;
    vec3 _t0C75 = [_t0C72, _t0C73, _t0C74];
    real _t0C76 = 0.e0;
    real _t0C77 = 0.e0;
    real _t0C78 = 0.e0;
    real _t0C79 = -0.1e1;
    vec3 _t0C7A = [_t0C77, _t0C78, _t0C79];
    real _t0C7B = prim •00CE<$[3]; $[3]; $[]> (_t0C7A, refPos0A47);
    real _t0C7C = prim -0026<$[]> (_t0C76, _t0C7B);
    real _t0C7D = 0.e0;
    real _t0C7E = 0.e0;
    real _t0C7F = -0.1e1;
    vec3 _t0C80 = [_t0C7D, _t0C7E, _t0C7F];
    real _t0C81 = prim •00CE<$[3]; $[3]; $[]> (_t0C80, dPos0A48);
    real _t0C82 = prim /0055 (_t0C7C, _t0C81);
    vec3 _t0C83 = prim *0038<$[3]> (dPos0A48, _t0C82);
    vec3 _t0C84 = prim +0017<$[3]> (refPos0A47, _t0C83);
    vec3 _t0C85 = prim +0017<$[3]> (_t0C75, _t0C84);
    real _t0C86 = _t0C85[2];
    real _t0C87 = -0.e0;
    bool _t0C88 = prim >0080 (_t0C86, _t0C87);
    bool _t0C89 = prim $and01C4 (_t0C71, _t0C88);
    bool _t0C8A = prim $and01C4 (_t0C5A, _t0C89);
    bool _t0C8B = prim $and01C4 (_t0C43, _t0C8A);
    if _t0C8B {
      real _t0C8C = 0.e0;
      real _t0C8D = 0.e0;
      real _t0C8E = 0.e0;
      real _t0C8F = -0.1e1;
      vec3 _t0C90 = [_t0C8D, _t0C8E, _t0C8F];
      real _t0C91 = prim •00CE<$[3]; $[3]; $[]> (_t0C90, refPos0A47);
      real _t0C92 = prim -0026<$[]> (_t0C8C, _t0C91);
      real _t0C93 = 0.e0;
      real _t0C94 = 0.e0;
      real _t0C95 = -0.1e1;
      vec3 _t0C96 = [_t0C93, _t0C94, _t0C95];
      real _t0C97 = prim •00CE<$[3]; $[3]; $[]> (_t0C96, dPos0A48);
      time0A49 = prim /0055 (_t0C92, _t0C97);
      face0A4A = 3;
    }
  }
  int _t0C98 = -1;
  bool _t0C99 = prim !=0086 (face0A4A, _t0C98);
  real _t0C9A = 0.1e1;
  real _t0C9B = 0.1e-7;
  real _t0C9C = prim +0017<$[]> (_t0C9A, _t0C9B);
  real _t0C9D = 0.1e1;
  real _t0C9E = 0.1e1;
  real _t0C9F = 0.1e1;
  vec3 _t0CA0 = [_t0C9D, _t0C9E, _t0C9F];
  real _t0CA1 = 0.e0;
  real _t0CA2 = prim max0125 (time0A49, _t0CA1);
  vec3 _t0CA3 = prim *0038<$[3]> (dPos0A48, _t0CA2);
  vec3 _t0CA4 = prim +0017<$[3]> (refPos0A47, _t0CA3);
  real _t0CA5 = prim •00CE<$[3]; $[3]; $[]> (_t0CA0, _t0CA4);
  bool _t0CA6 = prim >0080 (_t0C9C, _t0CA5);
  real _t0CA7 = 0.1e-7;
  real _t0CA8 = 0.1e-7;
  real _t0CA9 = 0.1e-7;
  vec3 _t0CAA = [_t0CA7, _t0CA8, _t0CA9];
  real _t0CAB = 0.e0;
  real _t0CAC = prim max0125 (time0A49, _t0CAB);
  vec3 _t0CAD = prim *0038<$[3]> (dPos0A48, _t0CAC);
  vec3 _t0CAE = prim +0017<$[3]> (refPos0A47, _t0CAD);
  vec3 _t0CAF = prim +0017<$[3]> (_t0CAA, _t0CAE);
  real _t0CB0 = _t0CAF[0];
  real _t0CB1 = -0.e0;
  bool _t0CB2 = prim >0080 (_t0CB0, _t0CB1);
  real _t0CB3 = 0.1e-7;
  real _t0CB4 = 0.1e-7;
  real _t0CB5 = 0.1e-7;
  vec3 _t0CB6 = [_t0CB3, _t0CB4, _t0CB5];
  real _t0CB7 = 0.e0;
  real _t0CB8 = prim max0125 (time0A49, _t0CB7);
  vec3 _t0CB9 = prim *0038<$[3]> (dPos0A48, _t0CB8);
  vec3 _t0CBA = prim +0017<$[3]> (refPos0A47, _t0CB9);
  vec3 _t0CBB = prim +0017<$[3]> (_t0CB6, _t0CBA);
  real _t0CBC = _t0CBB[1];
  real _t0CBD = -0.e0;
  bool _t0CBE = prim >0080 (_t0CBC, _t0CBD);
  real _t0CBF = 0.1e-7;
  real _t0CC0 = 0.1e-7;
  real _t0CC1 = 0.1e-7;
  vec3 _t0CC2 = [_t0CBF, _t0CC0, _t0CC1];
  real _t0CC3 = 0.e0;
  real _t0CC4 = prim max0125 (time0A49, _t0CC3);
  vec3 _t0CC5 = prim *0038<$[3]> (dPos0A48, _t0CC4);
  vec3 _t0CC6 = prim +0017<$[3]> (refPos0A47, _t0CC5);
  vec3 _t0CC7 = prim +0017<$[3]> (_t0CC2, _t0CC6);
  real _t0CC8 = _t0CC7[2];
  real _t0CC9 = -0.e0;
  bool _t0CCA = prim >0080 (_t0CC8, _t0CC9);
  bool _t0CCB = prim $and01C4 (_t0CBE, _t0CCA);
  bool _t0CCC = prim $and01C4 (_t0CB2, _t0CCB);
  bool _t0CCD = prim $and01C4 (_t0CA6, _t0CCC);
  bool _t0CCE = prim $and01C4 (_t0C99, _t0CCD);
  if _t0CCE {
    real _t0CCF = 0.e0;
    real _t0CD0 = prim max0125 (time0A49, _t0CCF);
    real _t0CD1 = (real)face0A4A;
    vec2 _t0CD2 = [_t0CD0, _t0CD1];
    return _t0CD2;
  } else {
    real _t0CD3 = -0.1e1;
    real _t0CD4 = -0.1e1;
    vec2 _t0CD5 = [_t0CD3, _t0CD4];
    return _t0CD5;
  }
}
function vec2#0 _exit0CD6 (vec3 refPos0A47, vec3 dPos0A48, int i0CD7)
{
  real time0CD8 = +inf;
  int face0CD9 = -1;
  real faceTime0CDA = -inf;
  real _t0CDB = 0.57735026919e0;
  real _t0CDC = 0.57735026919e0;
  real _t0CDD = 0.57735026919e0;
  real _t0CDE = 0.57735026919e0;
  vec3 _t0CDF = [_t0CDC, _t0CDD, _t0CDE];
  real _t0CE0 = prim •00CE<$[3]; $[3]; $[]> (_t0CDF, refPos0A47);
  real _t0CE1 = prim -0026<$[]> (_t0CDB, _t0CE0);
  real _t0CE2 = 0.57735026919e0;
  real _t0CE3 = 0.57735026919e0;
  real _t0CE4 = 0.57735026919e0;
  vec3 _t0CE5 = [_t0CE2, _t0CE3, _t0CE4];
  real _t0CE6 = prim •00CE<$[3]; $[3]; $[]> (_t0CE5, dPos0A48);
  real _t0CE7 = prim /0055 (_t0CE1, _t0CE6);
  real _t0CE8 = -0.1e-7;
  bool _t0CE9 = prim >=007E (_t0CE7, _t0CE8);
  real _t0CEA = 0.57735026919e0;
  real _t0CEB = 0.57735026919e0;
  real _t0CEC = 0.57735026919e0;
  real _t0CED = 0.57735026919e0;
  vec3 _t0CEE = [_t0CEB, _t0CEC, _t0CED];
  real _t0CEF = prim •00CE<$[3]; $[3]; $[]> (_t0CEE, refPos0A47);
  real _t0CF0 = prim -0026<$[]> (_t0CEA, _t0CEF);
  real _t0CF1 = 0.57735026919e0;
  real _t0CF2 = 0.57735026919e0;
  real _t0CF3 = 0.57735026919e0;
  vec3 _t0CF4 = [_t0CF1, _t0CF2, _t0CF3];
  real _t0CF5 = prim •00CE<$[3]; $[3]; $[]> (_t0CF4, dPos0A48);
  real _t0CF6 = prim /0055 (_t0CF0, _t0CF5);
  bool _t0CF7 = prim >0080 (time0CD8, _t0CF6);
  real _t0CF8 = 0.57735026919e0;
  real _t0CF9 = 0.57735026919e0;
  real _t0CFA = 0.57735026919e0;
  vec3 _t0CFB = [_t0CF8, _t0CF9, _t0CFA];
  real _t0CFC = prim •00CE<$[3]; $[3]; $[]> (_t0CFB, dPos0A48);
  real _t0CFD = prim |()|00B5<$[]> (_t0CFC);
  real _t0CFE = 0.1e-7;
  bool _t0CFF = prim >=007E (_t0CFD, _t0CFE);
  bool _t0D00 = prim $and01C4 (_t0CF7, _t0CFF);
  bool _t0D01 = prim $and01C4 (_t0CE9, _t0D00);
  if _t0D01 {
    int _t0D02 = 0;
    bool _t0D03 = prim !=0086 (i0CD7, _t0D02);
    if _t0D03 {
      real _t0D04 = 0.57735026919e0;
      real _t0D05 = 0.57735026919e0;
      real _t0D06 = 0.57735026919e0;
      real _t0D07 = 0.57735026919e0;
      vec3 _t0D08 = [_t0D05, _t0D06, _t0D07];
      real _t0D09 = prim •00CE<$[3]; $[3]; $[]> (_t0D08, refPos0A47);
      real _t0D0A = prim -0026<$[]> (_t0D04, _t0D09);
      real _t0D0B = 0.57735026919e0;
      real _t0D0C = 0.57735026919e0;
      real _t0D0D = 0.57735026919e0;
      vec3 _t0D0E = [_t0D0B, _t0D0C, _t0D0D];
      real _t0D0F = prim •00CE<$[3]; $[3]; $[]> (_t0D0E, dPos0A48);
      time0CD8 = prim /0055 (_t0D0A, _t0D0F);
      face0CD9 = 0;
    } else {
      real _t0D10 = 0.57735026919e0;
      real _t0D11 = 0.57735026919e0;
      real _t0D12 = 0.57735026919e0;
      real _t0D13 = 0.57735026919e0;
      vec3 _t0D14 = [_t0D11, _t0D12, _t0D13];
      real _t0D15 = prim •00CE<$[3]; $[3]; $[]> (_t0D14, refPos0A47);
      real _t0D16 = prim -0026<$[]> (_t0D10, _t0D15);
      real _t0D17 = 0.57735026919e0;
      real _t0D18 = 0.57735026919e0;
      real _t0D19 = 0.57735026919e0;
      vec3 _t0D1A = [_t0D17, _t0D18, _t0D19];
      real _t0D1B = prim •00CE<$[3]; $[3]; $[]> (_t0D1A, dPos0A48);
      faceTime0CDA = prim /0055 (_t0D16, _t0D1B);
    }
  }
  real _t0D1C = 0.e0;
  real _t0D1D = -0.1e1;
  real _t0D1E = 0.e0;
  real _t0D1F = 0.e0;
  vec3 _t0D20 = [_t0D1D, _t0D1E, _t0D1F];
  real _t0D21 = prim •00CE<$[3]; $[3]; $[]> (_t0D20, refPos0A47);
  real _t0D22 = prim -0026<$[]> (_t0D1C, _t0D21);
  real _t0D23 = -0.1e1;
  real _t0D24 = 0.e0;
  real _t0D25 = 0.e0;
  vec3 _t0D26 = [_t0D23, _t0D24, _t0D25];
  real _t0D27 = prim •00CE<$[3]; $[3]; $[]> (_t0D26, dPos0A48);
  real _t0D28 = prim /0055 (_t0D22, _t0D27);
  real _t0D29 = -0.1e-7;
  bool _t0D2A = prim >=007E (_t0D28, _t0D29);
  real _t0D2B = 0.e0;
  real _t0D2C = -0.1e1;
  real _t0D2D = 0.e0;
  real _t0D2E = 0.e0;
  vec3 _t0D2F = [_t0D2C, _t0D2D, _t0D2E];
  real _t0D30 = prim •00CE<$[3]; $[3]; $[]> (_t0D2F, refPos0A47);
  real _t0D31 = prim -0026<$[]> (_t0D2B, _t0D30);
  real _t0D32 = -0.1e1;
  real _t0D33 = 0.e0;
  real _t0D34 = 0.e0;
  vec3 _t0D35 = [_t0D32, _t0D33, _t0D34];
  real _t0D36 = prim •00CE<$[3]; $[3]; $[]> (_t0D35, dPos0A48);
  real _t0D37 = prim /0055 (_t0D31, _t0D36);
  bool _t0D38 = prim >0080 (time0CD8, _t0D37);
  real _t0D39 = -0.1e1;
  real _t0D3A = 0.e0;
  real _t0D3B = 0.e0;
  vec3 _t0D3C = [_t0D39, _t0D3A, _t0D3B];
  real _t0D3D = prim •00CE<$[3]; $[3]; $[]> (_t0D3C, dPos0A48);
  real _t0D3E = prim |()|00B5<$[]> (_t0D3D);
  real _t0D3F = 0.1e-7;
  bool _t0D40 = prim >=007E (_t0D3E, _t0D3F);
  bool _t0D41 = prim $and01C4 (_t0D38, _t0D40);
  bool _t0D42 = prim $and01C4 (_t0D2A, _t0D41);
  if _t0D42 {
    int _t0D43 = 1;
    bool _t0D44 = prim !=0086 (i0CD7, _t0D43);
    if _t0D44 {
      real _t0D45 = 0.e0;
      real _t0D46 = -0.1e1;
      real _t0D47 = 0.e0;
      real _t0D48 = 0.e0;
      vec3 _t0D49 = [_t0D46, _t0D47, _t0D48];
      real _t0D4A = prim •00CE<$[3]; $[3]; $[]> (_t0D49, refPos0A47);
      real _t0D4B = prim -0026<$[]> (_t0D45, _t0D4A);
      real _t0D4C = -0.1e1;
      real _t0D4D = 0.e0;
      real _t0D4E = 0.e0;
      vec3 _t0D4F = [_t0D4C, _t0D4D, _t0D4E];
      real _t0D50 = prim •00CE<$[3]; $[3]; $[]> (_t0D4F, dPos0A48);
      time0CD8 = prim /0055 (_t0D4B, _t0D50);
      face0CD9 = 1;
    } else {
      real _t0D51 = 0.e0;
      real _t0D52 = -0.1e1;
      real _t0D53 = 0.e0;
      real _t0D54 = 0.e0;
      vec3 _t0D55 = [_t0D52, _t0D53, _t0D54];
      real _t0D56 = prim •00CE<$[3]; $[3]; $[]> (_t0D55, refPos0A47);
      real _t0D57 = prim -0026<$[]> (_t0D51, _t0D56);
      real _t0D58 = -0.1e1;
      real _t0D59 = 0.e0;
      real _t0D5A = 0.e0;
      vec3 _t0D5B = [_t0D58, _t0D59, _t0D5A];
      real _t0D5C = prim •00CE<$[3]; $[3]; $[]> (_t0D5B, dPos0A48);
      faceTime0CDA = prim /0055 (_t0D57, _t0D5C);
    }
  }
  real _t0D5D = 0.e0;
  real _t0D5E = 0.e0;
  real _t0D5F = -0.1e1;
  real _t0D60 = 0.e0;
  vec3 _t0D61 = [_t0D5E, _t0D5F, _t0D60];
  real _t0D62 = prim •00CE<$[3]; $[3]; $[]> (_t0D61, refPos0A47);
  real _t0D63 = prim -0026<$[]> (_t0D5D, _t0D62);
  real _t0D64 = 0.e0;
  real _t0D65 = -0.1e1;
  real _t0D66 = 0.e0;
  vec3 _t0D67 = [_t0D64, _t0D65, _t0D66];
  real _t0D68 = prim •00CE<$[3]; $[3]; $[]> (_t0D67, dPos0A48);
  real _t0D69 = prim /0055 (_t0D63, _t0D68);
  real _t0D6A = -0.1e-7;
  bool _t0D6B = prim >=007E (_t0D69, _t0D6A);
  real _t0D6C = 0.e0;
  real _t0D6D = 0.e0;
  real _t0D6E = -0.1e1;
  real _t0D6F = 0.e0;
  vec3 _t0D70 = [_t0D6D, _t0D6E, _t0D6F];
  real _t0D71 = prim •00CE<$[3]; $[3]; $[]> (_t0D70, refPos0A47);
  real _t0D72 = prim -0026<$[]> (_t0D6C, _t0D71);
  real _t0D73 = 0.e0;
  real _t0D74 = -0.1e1;
  real _t0D75 = 0.e0;
  vec3 _t0D76 = [_t0D73, _t0D74, _t0D75];
  real _t0D77 = prim •00CE<$[3]; $[3]; $[]> (_t0D76, dPos0A48);
  real _t0D78 = prim /0055 (_t0D72, _t0D77);
  bool _t0D79 = prim >0080 (time0CD8, _t0D78);
  real _t0D7A = 0.e0;
  real _t0D7B = -0.1e1;
  real _t0D7C = 0.e0;
  vec3 _t0D7D = [_t0D7A, _t0D7B, _t0D7C];
  real _t0D7E = prim •00CE<$[3]; $[3]; $[]> (_t0D7D, dPos0A48);
  real _t0D7F = prim |()|00B5<$[]> (_t0D7E);
  real _t0D80 = 0.1e-7;
  bool _t0D81 = prim >=007E (_t0D7F, _t0D80);
  bool _t0D82 = prim $and01C4 (_t0D79, _t0D81);
  bool _t0D83 = prim $and01C4 (_t0D6B, _t0D82);
  if _t0D83 {
    int _t0D84 = 2;
    bool _t0D85 = prim !=0086 (i0CD7, _t0D84);
    if _t0D85 {
      real _t0D86 = 0.e0;
      real _t0D87 = 0.e0;
      real _t0D88 = -0.1e1;
      real _t0D89 = 0.e0;
      vec3 _t0D8A = [_t0D87, _t0D88, _t0D89];
      real _t0D8B = prim •00CE<$[3]; $[3]; $[]> (_t0D8A, refPos0A47);
      real _t0D8C = prim -0026<$[]> (_t0D86, _t0D8B);
      real _t0D8D = 0.e0;
      real _t0D8E = -0.1e1;
      real _t0D8F = 0.e0;
      vec3 _t0D90 = [_t0D8D, _t0D8E, _t0D8F];
      real _t0D91 = prim •00CE<$[3]; $[3]; $[]> (_t0D90, dPos0A48);
      time0CD8 = prim /0055 (_t0D8C, _t0D91);
      face0CD9 = 2;
    } else {
      real _t0D92 = 0.e0;
      real _t0D93 = 0.e0;
      real _t0D94 = -0.1e1;
      real _t0D95 = 0.e0;
      vec3 _t0D96 = [_t0D93, _t0D94, _t0D95];
      real _t0D97 = prim •00CE<$[3]; $[3]; $[]> (_t0D96, refPos0A47);
      real _t0D98 = prim -0026<$[]> (_t0D92, _t0D97);
      real _t0D99 = 0.e0;
      real _t0D9A = -0.1e1;
      real _t0D9B = 0.e0;
      vec3 _t0D9C = [_t0D99, _t0D9A, _t0D9B];
      real _t0D9D = prim •00CE<$[3]; $[3]; $[]> (_t0D9C, dPos0A48);
      faceTime0CDA = prim /0055 (_t0D98, _t0D9D);
    }
  }
  real _t0D9E = 0.e0;
  real _t0D9F = 0.e0;
  real _t0DA0 = 0.e0;
  real _t0DA1 = -0.1e1;
  vec3 _t0DA2 = [_t0D9F, _t0DA0, _t0DA1];
  real _t0DA3 = prim •00CE<$[3]; $[3]; $[]> (_t0DA2, refPos0A47);
  real _t0DA4 = prim -0026<$[]> (_t0D9E, _t0DA3);
  real _t0DA5 = 0.e0;
  real _t0DA6 = 0.e0;
  real _t0DA7 = -0.1e1;
  vec3 _t0DA8 = [_t0DA5, _t0DA6, _t0DA7];
  real _t0DA9 = prim •00CE<$[3]; $[3]; $[]> (_t0DA8, dPos0A48);
  real _t0DAA = prim /0055 (_t0DA4, _t0DA9);
  real _t0DAB = -0.1e-7;
  bool _t0DAC = prim >=007E (_t0DAA, _t0DAB);
  real _t0DAD = 0.e0;
  real _t0DAE = 0.e0;
  real _t0DAF = 0.e0;
  real _t0DB0 = -0.1e1;
  vec3 _t0DB1 = [_t0DAE, _t0DAF, _t0DB0];
  real _t0DB2 = prim •00CE<$[3]; $[3]; $[]> (_t0DB1, refPos0A47);
  real _t0DB3 = prim -0026<$[]> (_t0DAD, _t0DB2);
  real _t0DB4 = 0.e0;
  real _t0DB5 = 0.e0;
  real _t0DB6 = -0.1e1;
  vec3 _t0DB7 = [_t0DB4, _t0DB5, _t0DB6];
  real _t0DB8 = prim •00CE<$[3]; $[3]; $[]> (_t0DB7, dPos0A48);
  real _t0DB9 = prim /0055 (_t0DB3, _t0DB8);
  bool _t0DBA = prim >0080 (time0CD8, _t0DB9);
  real _t0DBB = 0.e0;
  real _t0DBC = 0.e0;
  real _t0DBD = -0.1e1;
  vec3 _t0DBE = [_t0DBB, _t0DBC, _t0DBD];
  real _t0DBF = prim •00CE<$[3]; $[3]; $[]> (_t0DBE, dPos0A48);
  real _t0DC0 = prim |()|00B5<$[]> (_t0DBF);
  real _t0DC1 = 0.1e-7;
  bool _t0DC2 = prim >=007E (_t0DC0, _t0DC1);
  bool _t0DC3 = prim $and01C4 (_t0DBA, _t0DC2);
  bool _t0DC4 = prim $and01C4 (_t0DAC, _t0DC3);
  if _t0DC4 {
    int _t0DC5 = 3;
    bool _t0DC6 = prim !=0086 (i0CD7, _t0DC5);
    if _t0DC6 {
      real _t0DC7 = 0.e0;
      real _t0DC8 = 0.e0;
      real _t0DC9 = 0.e0;
      real _t0DCA = -0.1e1;
      vec3 _t0DCB = [_t0DC8, _t0DC9, _t0DCA];
      real _t0DCC = prim •00CE<$[3]; $[3]; $[]> (_t0DCB, refPos0A47);
      real _t0DCD = prim -0026<$[]> (_t0DC7, _t0DCC);
      real _t0DCE = 0.e0;
      real _t0DCF = 0.e0;
      real _t0DD0 = -0.1e1;
      vec3 _t0DD1 = [_t0DCE, _t0DCF, _t0DD0];
      real _t0DD2 = prim •00CE<$[3]; $[3]; $[]> (_t0DD1, dPos0A48);
      time0CD8 = prim /0055 (_t0DCD, _t0DD2);
      face0CD9 = 3;
    } else {
      real _t0DD3 = 0.e0;
      real _t0DD4 = 0.e0;
      real _t0DD5 = 0.e0;
      real _t0DD6 = -0.1e1;
      vec3 _t0DD7 = [_t0DD4, _t0DD5, _t0DD6];
      real _t0DD8 = prim •00CE<$[3]; $[3]; $[]> (_t0DD7, refPos0A47);
      real _t0DD9 = prim -0026<$[]> (_t0DD3, _t0DD8);
      real _t0DDA = 0.e0;
      real _t0DDB = 0.e0;
      real _t0DDC = -0.1e1;
      vec3 _t0DDD = [_t0DDA, _t0DDB, _t0DDC];
      real _t0DDE = prim •00CE<$[3]; $[3]; $[]> (_t0DDD, dPos0A48);
      faceTime0CDA = prim /0055 (_t0DD9, _t0DDE);
    }
  }
  int _t0DDF = -1;
  bool _t0DE0 = prim !=0086 (face0CD9, _t0DDF);
  real _t0DE1 = 0.1e1;
  real _t0DE2 = 0.1e-7;
  real _t0DE3 = prim +0017<$[]> (_t0DE1, _t0DE2);
  real _t0DE4 = 0.1e1;
  real _t0DE5 = 0.1e1;
  real _t0DE6 = 0.1e1;
  vec3 _t0DE7 = [_t0DE4, _t0DE5, _t0DE6];
  real _t0DE8 = 0.e0;
  real _t0DE9 = prim max0125 (time0CD8, _t0DE8);
  vec3 _t0DEA = prim *0038<$[3]> (dPos0A48, _t0DE9);
  vec3 _t0DEB = prim +0017<$[3]> (refPos0A47, _t0DEA);
  real _t0DEC = prim •00CE<$[3]; $[3]; $[]> (_t0DE7, _t0DEB);
  bool _t0DED = prim >0080 (_t0DE3, _t0DEC);
  real _t0DEE = 0.1e-7;
  real _t0DEF = 0.1e-7;
  real _t0DF0 = 0.1e-7;
  vec3 _t0DF1 = [_t0DEE, _t0DEF, _t0DF0];
  real _t0DF2 = 0.e0;
  real _t0DF3 = prim max0125 (time0CD8, _t0DF2);
  vec3 _t0DF4 = prim *0038<$[3]> (dPos0A48, _t0DF3);
  vec3 _t0DF5 = prim +0017<$[3]> (refPos0A47, _t0DF4);
  vec3 _t0DF6 = prim +0017<$[3]> (_t0DF1, _t0DF5);
  real _t0DF7 = _t0DF6[0];
  real _t0DF8 = -0.e0;
  bool _t0DF9 = prim >0080 (_t0DF7, _t0DF8);
  real _t0DFA = 0.1e-7;
  real _t0DFB = 0.1e-7;
  real _t0DFC = 0.1e-7;
  vec3 _t0DFD = [_t0DFA, _t0DFB, _t0DFC];
  real _t0DFE = 0.e0;
  real _t0DFF = prim max0125 (time0CD8, _t0DFE);
  vec3 _t0E00 = prim *0038<$[3]> (dPos0A48, _t0DFF);
  vec3 _t0E01 = prim +0017<$[3]> (refPos0A47, _t0E00);
  vec3 _t0E02 = prim +0017<$[3]> (_t0DFD, _t0E01);
  real _t0E03 = _t0E02[1];
  real _t0E04 = -0.e0;
  bool _t0E05 = prim >0080 (_t0E03, _t0E04);
  real _t0E06 = 0.1e-7;
  real _t0E07 = 0.1e-7;
  real _t0E08 = 0.1e-7;
  vec3 _t0E09 = [_t0E06, _t0E07, _t0E08];
  real _t0E0A = 0.e0;
  real _t0E0B = prim max0125 (time0CD8, _t0E0A);
  vec3 _t0E0C = prim *0038<$[3]> (dPos0A48, _t0E0B);
  vec3 _t0E0D = prim +0017<$[3]> (refPos0A47, _t0E0C);
  vec3 _t0E0E = prim +0017<$[3]> (_t0E09, _t0E0D);
  real _t0E0F = _t0E0E[2];
  real _t0E10 = -0.e0;
  bool _t0E11 = prim >0080 (_t0E0F, _t0E10);
  bool _t0E12 = prim $and01C4 (_t0E05, _t0E11);
  bool _t0E13 = prim $and01C4 (_t0DF9, _t0E12);
  bool _t0E14 = prim $and01C4 (_t0DED, _t0E13);
  bool _t0E15 = prim $and01C4 (_t0DE0, _t0E14);
  if _t0E15 {
    real _t0E16 = 0.e0;
    real _t0E17 = prim max0125 (time0CD8, _t0E16);
    real _t0E18 = (real)face0CD9;
    vec2 _t0E19 = [_t0E17, _t0E18];
    return _t0E19;
  } else {
    real _t0E1A = -inf;
    bool _t0E1B = prim ==0084 (_t0E1A, faceTime0CDA);
    if _t0E1B {
      real _t0E1C = -0.1e1;
      real _t0E1D = -0.1e1;
      vec2 _t0E1E = [_t0E1C, _t0E1D];
      return _t0E1E;
    } else {
      real _t0E1F = 0.e0;
      real _t0E20 = prim max0125 (faceTime0CDA, _t0E1F);
      real _t0E21 = (real)i0CD7;
      vec2 _t0E22 = [_t0E20, _t0E21];
      return _t0E22;
    }
  }
}
function Femdata: Mesh#0 domain0E25 (Femdata: Space arg00E26)
{
  Femdata: Mesh _t0E27 = extractFem(arg00E26, Mesh);
  return _t0E27;
}
function Femdata: Space#0 space0E28 (Femdata: FemFunc arg00E29)
{
  Femdata: Space _t0E2A = extractFem(arg00E29, Space);
  return _t0E2A;
}
function Femdata: FuncCell#0 funcCell0E2B (Femdata: FemFunc arg00E2C, Femdata: MeshCell arg10E2D)
{
  int _t0E2E = extractFemItem(CellIndex(MeshCell), int, arg10E2D);
  Femdata: FuncCell _t0E2F = loadFem(FuncCell, arg00E2C, _t0E2E);
  return _t0E2F;
}
function bool#1 insideTest0E3D (vec3 x0E3E)
{
  real _t0E3F = 0.e0;
  real _t0E40 = 0.e0;
  real _t0E41 = 0.e0;
  vec3 _t0E42 = [_t0E3F, _t0E40, _t0E41];
  vec3 mid0E43 = prim -0026<$[3]> (x0E3E, _t0E42);
  bool _t0E44;
  real _t0E45 = mid0E43[0];
  real _t0E46 = prim |()|00B5<$[]> (_t0E45);
  real _t0E47 = 0.1e0;
  bool _t0E48 = prim >0080 (_t0E46, _t0E47);
  if _t0E48 {
    bool _t0E49;
    real _t0E4A = mid0E43[1];
    real _t0E4B = prim |()|00B5<$[]> (_t0E4A);
    real _t0E4C = 0.1e0;
    bool _t0E4D = prim >0080 (_t0E4B, _t0E4C);
    if _t0E4D {
      real _t0E4E = mid0E43[2];
      real _t0E4F = prim |()|00B5<$[]> (_t0E4E);
      real _t0E50 = 0.1e0;
      _t0E49 = prim >0080 (_t0E4F, _t0E50);
    } else {
      _t0E49 = false;
    }
    _t0E44 = _t0E49;
  } else {
    _t0E44 = false;
  }
  bool z0E51 = _t0E44;
  bool _t0E52;
  real _t0E53 = prim |()|00B5<$[3]> (mid0E43);
  real _t0E54 = 0.5e1;
  bool _t0E55 = prim <007A (_t0E53, _t0E54);
  if _t0E55 {
    bool _t0E56;
    real _t0E57 = prim |()|00B5<$[3]> (mid0E43);
    real _t0E58 = 0.2e1;
    bool _t0E59 = prim >0080 (_t0E57, _t0E58);
    if _t0E59 {
      _t0E56 = z0E51;
    } else {
      _t0E56 = false;
    }
    _t0E52 = _t0E56;
  } else {
    _t0E52 = false;
  }
  return _t0E52;
}
function vec3#3 grad0E5A (vec3 s0E5B)
{
  real x0E5C = s0E5B[0];
  real y0E5D = s0E5B[1];
  real z0E5E = s0E5B[2];
  real _t0E5F = prim *0034 (x0E5C, x0E5C);
  real _t0E60 = prim *0034 (y0E5D, y0E5D);
  real _t0E61 = prim +0017<$[]> (_t0E5F, _t0E60);
  real _t0E62 = prim *0034 (z0E5E, z0E5E);
  real _t0E63 = prim +0017<$[]> (_t0E61, _t0E62);
  real p0E64 = prim unary -008B<$[]> (_t0E63);
  int _t0E65 = 2;
  real _t0E66 = prim ^0068 (y0E5D, _t0E65);
  real _t0E67 = prim *0034 (_t0E66, z0E5E);
  real _t0E68 = 0.2e1;
  real _t0E69 = prim *0034 (_t0E68, x0E5C);
  real _t0E6A = prim *0034 (_t0E69, y0E5D);
  real _t0E6B = prim *0034 (_t0E6A, z0E5E);
  int _t0E6C = 2;
  real _t0E6D = prim ^0068 (y0E5D, _t0E6C);
  real _t0E6E = prim *0034 (x0E5C, _t0E6D);
  vec3 g0E6F = [_t0E67, _t0E6B, _t0E6E];
  return g0E6F;
}
function tensor[3,3]#3 hess0E70 (vec3 s0E71)
{
  real x0E72 = s0E71[0];
  real y0E73 = s0E71[1];
  real z0E74 = s0E71[2];
  real _t0E75 = prim *0034 (x0E72, x0E72);
  real _t0E76 = prim *0034 (y0E73, y0E73);
  real _t0E77 = prim +0017<$[]> (_t0E75, _t0E76);
  real _t0E78 = prim *0034 (z0E74, z0E74);
  real _t0E79 = prim +0017<$[]> (_t0E77, _t0E78);
  real p0E7A = prim unary -008B<$[]> (_t0E79);
  real _t0E7B = 0.e0;
  real _t0E7C = 0.2e1;
  real _t0E7D = prim *0034 (_t0E7C, y0E73);
  real _t0E7E = prim *0034 (_t0E7D, z0E74);
  int _t0E7F = 2;
  real _t0E80 = prim ^0068 (y0E73, _t0E7F);
  vec3 _t0E81 = [_t0E7B, _t0E7E, _t0E80];
  real _t0E82 = 0.2e1;
  real _t0E83 = prim *0034 (_t0E82, y0E73);
  real _t0E84 = prim *0034 (_t0E83, z0E74);
  real _t0E85 = 0.2e1;
  real _t0E86 = prim *0034 (_t0E85, x0E72);
  real _t0E87 = prim *0034 (_t0E86, z0E74);
  real _t0E88 = 0.2e1;
  real _t0E89 = prim *0034 (_t0E88, x0E72);
  real _t0E8A = prim *0034 (_t0E89, y0E73);
  vec3 _t0E8B = [_t0E84, _t0E87, _t0E8A];
  int _t0E8C = 2;
  real _t0E8D = prim ^0068 (y0E73, _t0E8C);
  real _t0E8E = 0.2e1;
  real _t0E8F = prim *0034 (_t0E8E, x0E72);
  real _t0E90 = prim *0034 (_t0E8F, y0E73);
  real _t0E91 = 0.e0;
  vec3 _t0E92 = [_t0E8D, _t0E90, _t0E91];
  tensor[3,3] hess0E93 = [_t0E81, _t0E8B, _t0E92];
  return hess0E93;
}
function vec3#3 fStep0E94 (vec3 s0E95)
{
  vec3 g0E96 = func grad0E5A (s0E95);
  tensor[3,3] H0E97 = func hess0E70 (s0E95);
  vec3[3] E0E98 = prim evecs00A0 (H0E97);
  real[3] L0E99 = prim evals009F (H0E97);
  real _t0E9A = 0.1e1;
  int _t0E9B = 2;
  real _t0E9C = prim $sub01C0<real; %3> (L0E99, _t0E9B);
  real _t0E9D = prim /0055 (_t0E9A, _t0E9C);
  real _t0E9E = prim unary -008B<$[]> (_t0E9D);
  int _t0E9F = 2;
  vec3 _t0EA0 = prim $sub01C0<vec3; %3> (E0E98, _t0E9F);
  vec3 _t0EA1 = prim *0036<$[3]> (_t0E9E, _t0EA0);
  int _t0EA2 = 2;
  vec3 _t0EA3 = prim $sub01C0<vec3; %3> (E0E98, _t0EA2);
  tensor[3,3] _t0EA4 = prim ⊗00E5<$[3]; $[3]; $[3,3]> (_t0EA1, _t0EA3);
  vec3 up0EA5 = prim •00CE<$[3,3]; $[3]; $[3]> (_t0EA4, g0E96);
  bool _t0EA6;
  real _t0EA7 = up0EA5[0];
  real _t0EA8 = up0EA5[0];
  bool _t0EA9 = prim ==0084 (_t0EA7, _t0EA8);
  bool _t0EAA = prim !00BC (_t0EA9);
  if _t0EAA {
    _t0EA6 = true;
  } else {
    bool _t0EAB;
    real _t0EAC = up0EA5[1];
    real _t0EAD = up0EA5[1];
    bool _t0EAE = prim ==0084 (_t0EAC, _t0EAD);
    bool _t0EAF = prim !00BC (_t0EAE);
    if _t0EAF {
      _t0EAB = true;
    } else {
      real _t0EB0 = up0EA5[2];
      real _t0EB1 = up0EA5[2];
      bool _t0EB2 = prim ==0084 (_t0EB0, _t0EB1);
      _t0EAB = prim !00BC (_t0EB2);
    }
    _t0EA6 = _t0EAB;
  }
  if _t0EA6 {
    real _t0EB3 = +inf;
    real _t0EB4 = +inf;
    real _t0EB5 = +inf;
    vec3 _t0EB6 = [_t0EB3, _t0EB4, _t0EB5];
    return _t0EB6;
  }
  return up0EA5;
}
function bool#4 posNanCheck0EB7 (vec3 up0EB8)
{
  bool _t0EB9;
  real _t0EBA = up0EB8[0];
  real _t0EBB = up0EB8[0];
  bool _t0EBC = prim ==0084 (_t0EBA, _t0EBB);
  bool _t0EBD = prim !00BC (_t0EBC);
  if _t0EBD {
    _t0EB9 = true;
  } else {
    bool _t0EBE;
    real _t0EBF = up0EB8[1];
    real _t0EC0 = up0EB8[1];
    bool _t0EC1 = prim ==0084 (_t0EBF, _t0EC0);
    bool _t0EC2 = prim !00BC (_t0EC1);
    if _t0EC2 {
      _t0EBE = true;
    } else {
      real _t0EC3 = up0EB8[2];
      real _t0EC4 = up0EB8[2];
      bool _t0EC5 = prim ==0084 (_t0EC3, _t0EC4);
      _t0EBE = prim !00BC (_t0EC5);
    }
    _t0EB9 = _t0EBE;
  }
  return _t0EB9;
}
function tensor[3,3]#1 fPerp0EC6 (vec3 s0EC7)
{
  vec3 g0EC8 = func grad0E5A (s0EC7);
  tensor[3,3] H0EC9 = func hess0E70 (s0EC7);
  vec3[3] _t0ECA = prim evecs00A0 (H0EC9);
  int _t0ECB = 2;
  vec3 E20ECC = prim $sub01C0<vec3; %3> (_t0ECA, _t0ECB);
  tensor[3,3] _t0ECD = prim $id01B9<%3> ();
  tensor[3,3] _t0ECE = prim ⊗00E5<$[3]; $[3]; $[3,3]> (E20ECC, E20ECC);
  tensor[3,3] m0ECF = prim -0026<$[3,3]> (_t0ECD, _t0ECE);
  real t0ED0 = prim :00FC<$[3,3]; $[3,3]; $[]> (m0ECF, m0ECF);
  bool _t0ED1 = prim ==0084 (t0ED0, t0ED0);
  bool _t0ED2 = prim !00BC (_t0ED1);
  if _t0ED2 {
    tensor[3,3] _t0ED3 = prim $zero01BB<$[3,3]> ();
    return _t0ED3;
  }
  return m0ECF;
}
function real#1 fStrength0ED4 (vec3 s0ED5)
{
  vec3 g0ED6 = func grad0E5A (s0ED5);
  tensor[3,3] H0ED7 = func hess0E70 (s0ED5);
  real[3] _t0ED8 = prim evals009F (H0ED7);
  int _t0ED9 = 2;
  real _t0EDA = prim $sub01C0<real; %3> (_t0ED8, _t0ED9);
  real _t0EDB = prim unary -008B<$[]> (_t0EDA);
  real _t0EDC = prim |()|00B5<$[3]> (g0ED6);
  real _t0EDD = prim +0017<$[]> (fBias0501, _t0EDC);
  real str0EDE = prim /0055 (_t0EDB, _t0EDD);
  return str0EDE;
}
function real#1 phi0EDF (real r0EE0)
{
  real _t0EE1 = 0.1e1;
  real _t0EE2 = prim -0026<$[]> (_t0EE1, r0EE0);
  int _t0EE3 = 4;
  real _t0EE4 = prim ^0068 (_t0EE2, _t0EE3);
  return _t0EE4;
}
function real#1 phi'0EE5 (real r0EE6)
{
  int _t0EE7 = -4;
  real _t0EE8 = (real)_t0EE7;
  real _t0EE9 = 0.1e1;
  real _t0EEA = prim -0026<$[]> (_t0EE9, r0EE6);
  int _t0EEB = 3;
  real _t0EEC = prim ^0068 (_t0EEA, _t0EEB);
  real _t0EED = prim *0034 (_t0EE8, _t0EEC);
  return _t0EED;
}
function real#2 enr0EEE (vec3 x0EEF)
{
  real _t0EF0 = prim |()|00B5<$[3]> (x0EEF);
  real _t0EF1 = prim /0055 (_t0EF0, rad04FE);
  real _t0EF2 = func phi0EDF (_t0EF1);
  return _t0EF2;
}
function vec3#1 frc0EF3 (vec3 x0EF4)
{
  real _t0EF5 = prim |()|00B5<$[3]> (x0EF4);
  real _t0EF6 = prim /0055 (_t0EF5, rad04FE);
  real _t0EF7 = func phi'0EE5 (_t0EF6);
  real _t0EF8 = 0.1e1;
  real _t0EF9 = prim /0055 (_t0EF8, rad04FE);
  real _t0EFA = prim *0034 (_t0EF7, _t0EF9);
  vec3 _t0EFB = prim *0036<$[3]> (_t0EFA, x0EF4);
  real _t0EFC = prim |()|00B5<$[3]> (x0EF4);
  vec3 _t0EFD = prim /0057<$[3]> (_t0EFB, _t0EFC);
  return _t0EFD;
}
function bool#3 posTest0EFE (vec3 pos0EFF)
{
  bool _t0F00;
  bool _t0F01 = func insideTest0E3D (pos0EFF);
  if _t0F01 {
    bool _t0F02;
    bool _t0F03 = func posNanCheck0EB7 (pos0EFF);
    bool _t0F04 = prim !00BC (_t0F03);
    if _t0F04 {
      real _t0F05 = func fStrength0ED4 (pos0EFF);
      _t0F02 = prim >=007E (_t0F05, fStren0502);
    } else {
      _t0F02 = false;
    }
    _t0F00 = _t0F02;
  } else {
    _t0F00 = false;
  }
  return _t0F00;
}
globalInit {
  int _t04F2 = 0;
  int _t04F0 = 1;
  int _t04F4 = extractFemItem(NumCell(Mesh), int, meshData04EE);
  int _t04F3 = prim -0024 (_t04F4, _t04F0);
  int[] _t04F7 = prim $range01C3 (_t04F2, _t04F3);
  Femdata: MeshCell[] _t04F8 = {};
  foreach _t04F6 in _t04F7 {
    Femdata: MeshCell _t04F9 = loadFem(MeshCell, meshData04EE, _t04F6);
    _t04F8 = prim @0010<Femdata: MeshCell> (_t04F8, _t04F9);
  }
  simplex0E3C = func refcell055B (meshData04EE);
}
strand particle (vec3 pos00F06, real hh00F07) in 3D {
  output vec3 pos0F08;
  output vec3 _pos0F09;
  real hh0F0A;
  vec3 step0F0B;
  bool found0F0C;
  int nfs0F0D;
  int test0F0E;
  int testp0F0F;
  int steps0F10;
  {
    pos0F08 = pos00F06;
    _pos0F09 = pos0F08;
    hh0F0A = hh00F07;
    step0F0B = prim $zero01BB<$[3]> ();
    found0F0C = false;
    nfs0F0D = 0;
    test0F0E = 1;
    testp0F0F = 0;
    steps0F10 = 0;
  }
  update
  {
    int _t0F11 = 1;
    steps0F10 = prim +0015 (steps0F10, _t0F11);
    bool _t0F12 = func posTest0EFE (pos0F08);
    bool _t0F13 = prim !00BC (_t0F12);
    if _t0F13 {
      die;
    }
    bool _t0F14 = prim !00BC (found0F0C);
    if _t0F14 {
      step0F0B = func fStep0E94 (pos0F08);
      pos0F08 = prim +0017<$[3]> (pos0F08, step0F0B);
      _pos0F09 = pos0F08;
      bool _t0F15 = func posNanCheck0EB7 (pos0F08);
      if _t0F15 {
        die;
      }
      real _t0F16 = prim |()|00B5<$[3]> (step0F0B);
      real _t0F17 = prim /0055 (_t0F16, rad04FE);
      bool _t0F18 = prim >0080 (_t0F17, eps04FF);
      if _t0F18 {
        int _t0F19 = 1;
        nfs0F0D = prim +0015 (nfs0F0D, _t0F19);
        int _t0F1A = 10;
        bool _t0F1B = prim >007F (nfs0F0D, _t0F1A);
        if _t0F1B {
          die;
        }
      } else {
        found0F0C = true;
        testp0F0F = 1;
      }
    } else {
      vec3 _t0F1C = func fStep0E94 (pos0F08);
      pos0F08 = prim +0017<$[3]> (pos0F08, _t0F1C);
      _pos0F09 = pos0F08;
      bool _t0F1D = func posNanCheck0EB7 (pos0F08);
      if _t0F1D {
        die;
      }
      step0F0B = prim $zero01BB<$[3]> ();
      real oldE0F1E = 0.e0;
      vec3 force0F1F = prim $zero01BB<$[3]> ();
      int nn0F20 = 0;
      particle[] _t0F21 = prim sphere0198<particle> (_pos0F09, rad04FE);
      foreach P0F22 in _t0F21 {
        vec3 _t0F23 = P0F22.pos0F08;
        vec3 _t0F24 = prim -0026<$[3]> (_t0F23, pos0F08);
        real _t0F25 = func enr0EEE (_t0F24);
        oldE0F1E = prim +0017<$[]> (oldE0F1E, _t0F25);
        vec3 _t0F26 = P0F22.pos0F08;
        vec3 _t0F27 = prim -0026<$[3]> (_t0F26, pos0F08);
        vec3 _t0F28 = func frc0EF3 (_t0F27);
        force0F1F = prim +0017<$[3]> (force0F1F, _t0F28);
        int _t0F29 = 1;
        nn0F20 = prim +0015 (nn0F20, _t0F29);
      }
      int _t0F2A = 0;
      bool _t0F2B = prim ==0082 (_t0F2A, nn0F20);
      if _t0F2B {
        real _t0F2C = 0.5e0;
        real _t0F2D = prim *0034 (_t0F2C, rad04FE);
        real _t0F2E = 0.e0;
        real _t0F2F = 0.e0;
        vec3 _t0F30 = [_t0F2D, _t0F2E, _t0F2F];
        vec3 npos0F31 = prim +0017<$[3]> (pos0F08, _t0F30);
        bool _t0F32 = func posTest0EFE (npos0F31);
        if _t0F32 {
          new particle (npos0F31, hh0F0A);
        }
        continue;
      }
      tensor[3,3] _t0F33 = func fPerp0EC6 (pos0F08);
      force0F1F = prim •00CE<$[3,3]; $[3]; $[3]> (_t0F33, force0F1F);
      vec3 es0F34 = prim *0036<$[3]> (hh0F0A, force0F1F);
      real _t0F35 = prim |()|00B5<$[3]> (es0F34);
      bool _t0F36 = prim >0080 (_t0F35, rad04FE);
      if _t0F36 {
        real _t0F37 = prim |()|00B5<$[3]> (es0F34);
        real _t0F38 = prim /0055 (rad04FE, _t0F37);
        hh0F0A = prim *0034 (hh0F0A, _t0F38);
        real _t0F39 = prim |()|00B5<$[3]> (es0F34);
        real _t0F3A = prim /0055 (rad04FE, _t0F39);
        es0F34 = prim *0038<$[3]> (es0F34, _t0F3A);
      }
      vec3 samplePos0F3B = prim +0017<$[3]> (pos0F08, es0F34);
      vec3 fs0F3C = func fStep0E94 (samplePos0F3B);
      real _t0F3D = prim |()|00B5<$[3]> (fs0F3C);
      real _t0F3E = prim |()|00B5<$[3]> (es0F34);
      real _t0F3F = prim /0055 (_t0F3D, _t0F3E);
      real _t0F40 = 0.5e0;
      bool _t0F41 = prim >0080 (_t0F3F, _t0F40);
      if _t0F41 {
        real _t0F42 = 0.5e0;
        hh0F0A = prim *0034 (hh0F0A, _t0F42);
        continue;
      }
      vec3 oldPos0F43 = pos0F08;
      vec3 up0F44 = prim +0017<$[3]> (fs0F3C, es0F34);
      pos0F08 = prim +0017<$[3]> (pos0F08, up0F44);
      _pos0F09 = pos0F08;
      particle[] _t0F45 = prim sphere0198<particle> (_pos0F09, rad04FE);
      real accum0F4A = 0.e0;
      foreach P0F46 in _t0F45 {
        vec3 _t0F47 = P0F46.pos0F08;
        vec3 _t0F48 = prim -0026<$[3]> (pos0F08, _t0F47);
        real _t0F49 = func enr0EEE (_t0F48);
        accum0F4A = prim +0017<$[]> (accum0F4A, _t0F49);
      }
      real newE0F4B = accum0F4A;
      real _t0F4C = prim -0026<$[]> (newE0F4B, oldE0F1E);
      real _t0F4D = 0.5e0;
      vec3 _t0F4E = prim -0026<$[3]> (pos0F08, oldPos0F43);
      vec3 _t0F4F = prim *0036<$[3]> (_t0F4D, _t0F4E);
      vec3 _t0F50 = prim unary -008B<$[3]> (force0F1F);
      real _t0F51 = prim •00CE<$[3]; $[3]; $[]> (_t0F4F, _t0F50);
      bool _t0F52 = prim >0080 (_t0F4C, _t0F51);
      if _t0F52 {
        pos0F08 = oldPos0F43;
        _pos0F09 = pos0F08;
        real _t0F53 = 0.5e0;
        hh0F0A = prim *0034 (hh0F0A, _t0F53);
        continue;
      }
      real _t0F54 = 0.11e1;
      hh0F0A = prim *0034 (hh0F0A, _t0F54);
      step0F0B = up0F44;
      bool _t0F55 = func posNanCheck0EB7 (pos0F08);
      if _t0F55 {
        die;
      }
      int _t0F56 = 5;
      bool _t0F57 = prim <0079 (nn0F20, _t0F56);
      if _t0F57 {
        real _t0F58 = 0.5e0;
        real _t0F59 = prim *0034 (_t0F58, rad04FE);
        vec3 _t0F5A = prim normalize0137<$[3]> (es0F34);
        vec3 _t0F5B = prim *0036<$[3]> (_t0F59, _t0F5A);
        vec3 npos0F5C = prim +0017<$[3]> (pos0F08, _t0F5B);
        bool _t0F5D = func posTest0EFE (npos0F5C);
        if _t0F5D {
          new particle (npos0F5C, hh0F0A);
        }
      }
    }
  }
}
collection {
  foreach x0F5E in ipos0504 {
    real _t0F5F = 0.1e1;
    new particle (x0F5E, _t0F5F);
  }
}
update {
  int res0F60= sum<int> { (P0F63) => {
      int _t0F64 = P0F63.test0F0E;
      return _t0F64;
    } (P0F61, P0F61)
  | P0F61 in all };
  int num0F66 = res0F60;
  int res0F67= max<int> { (P0F6A) => {
      int _t0F6B = P0F6A.steps0F10;
      return _t0F6B;
    } (P0F68, P0F68)
  | P0F68 in all };
  int steps0F6D = res0F67;
  int res0F6E= sum<int> { (P0F71) => {
      int _t0F72 = P0F71.testp0F0F;
      return _t0F72;
    } (P0F6F, P0F6F)
  | P0F6F in all };
  int numFound0F74 = res0F6E;
  bool res0F75= all { (P0F78) => {
      bool _t0F79 = P0F78.found0F0C;
      return _t0F79;
    } (P0F76, P0F76)
  | P0F76 in all };
  bool allFound0F7B = res0F75;
  real res0F7C= max<real> { (P0F80) => {
      vec3 _t0F81 = P0F80.step0F0B;
      real _t0F82 = prim |()|00B5<$[3]> (_t0F81);
      return _t0F82;
    } (P0F7D, P0F7D)
  | P0F7D in all };
  real maxStep0F84 = res0F7C;
  string _t0F85 = "One run:";
  string _t0F86 = " and ";
  real _t0F87 = prim /0055 (maxStep0F84, rad04FE);
  string _t0F88 = " and ";
  real _t0F89 = prim /0055 (maxStep0F84, rad04FE);
  bool _t0F8A = prim <007A (_t0F89, eps04FF);
  string _t0F8B = " and ";
  string _t0F8C = " of ";
  string _t0F8D = "\n";
  print (_t0F85, allFound0F7B, _t0F86, _t0F87, _t0F88, _t0F8A, _t0F8B, numFound0F74, _t0F8C, num0F66, _t0F8D);
  if allFound0F7B {
    real _t0F8E = prim /0055 (maxStep0F84, rad04FE);
    bool _t0F8F = prim <007A (_t0F8E, eps04FF);
    if _t0F8F {
      string _t0F90 = "CONVERGED!\n";
      print (_t0F90);
      stabilize_all;
    }
  }
  int _t0F91 = 2000;
  bool _t0F92 = prim >007F (steps0F6D, _t0F91);
  if _t0F92 {
    stabilize_all;
  }
  string _t0F93 = "Current steps:";
  string _t0F94 = "\n";
  print (_t0F93, steps0F6D, _t0F94);
}
/* Program end */
/* Simplified Program (after after inlining) start */
properties: GlobalInit,StabilizeAll,GlobalReduce,StrandSets,GlobalUpdate,NewStrands,StrandCommunication,StrandsMayDie,HasInputs,HasGlobals,ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
input FemData:Mesh meshData04EE;
input FemData:Space 0space04FA_intermedateGlobal04FB;
input FemData:FemFunc 0data04FC_intermedateGlobal04FD;
input real rad04FE = <default>;
input real eps04FF = <default>;
input real v00500 = <default>;
input real fBias0501 = <default>;
input real fStren0502 = <default>;
input real zfuz0503 = <default>;
input vec3[] ipos0504;
constants {
  rad04FE = 0.1e-1;
  eps04FF = 0.1e-1;
  v00500 = 0.625e-1;
  fBias0501 = 0.1e-1;
  fStren0502 = 0.1e-1;
  zfuz0503 = 0.1e-1;
}
function int[2]#6 nextCell405D9 (int faceIdx0A38, int cell0A39, Femdata: Mesh mesh0A3A)
{
  int _t0A3B = -1;
  bool _t0A3C = prim ==0082 (faceIdx0A38, _t0A3B);
  if _t0A3C {
    int _t0A3D = -1;
    int _t0A3E = -1;
    int[2] _t0A3F = {_t0A3D, _t0A3E};
    return _t0A3F;
  } else {
    int _t0A40 = 8;
    int _t0A41 = prim *0033 (cell0A39, _t0A40);
    int _t0A42 = 2;
    int _t0A43 = prim *0033 (faceIdx0A38, _t0A42);
    int _t0A44 = prim +0015 (_t0A41, _t0A43);
    int[2] _t0A45 = extractFemItemN((mesh0A3A, _t0A44),CellFaceCell(Mesh),);
    return _t0A45;
  }
}
function vec3#3 fStep0E94 (vec3 s0E95)
{
  vec3 g0E96;
  real x0FBB = s0E95[0];
  real y0FBC = s0E95[1];
  real z0FBD = s0E95[2];
  real _t0FBE = prim *0034 (x0FBB, x0FBB);
  real _t0FBF = prim *0034 (y0FBC, y0FBC);
  real _t0FC0 = prim +0017<$[]> (_t0FBE, _t0FBF);
  real _t0FC1 = prim *0034 (z0FBD, z0FBD);
  real _t0FC2 = prim +0017<$[]> (_t0FC0, _t0FC1);
  real p0FC3 = prim unary -008B<$[]> (_t0FC2);
  int _t0FC4 = 2;
  real _t0FC5 = prim ^0068 (y0FBC, _t0FC4);
  real _t0FC6 = prim *0034 (_t0FC5, z0FBD);
  real _t0FC7 = 0.2e1;
  real _t0FC8 = prim *0034 (_t0FC7, x0FBB);
  real _t0FC9 = prim *0034 (_t0FC8, y0FBC);
  real _t0FCA = prim *0034 (_t0FC9, z0FBD);
  int _t0FCB = 2;
  real _t0FCC = prim ^0068 (y0FBC, _t0FCB);
  real _t0FCD = prim *0034 (x0FBB, _t0FCC);
  vec3 g0FCE = [_t0FC6, _t0FCA, _t0FCD];
  g0E96 = g0FCE;
  tensor[3,3] H0E97;
  real x0F99 = s0E95[0];
  real y0F9A = s0E95[1];
  real z0F9B = s0E95[2];
  real _t0F9C = prim *0034 (x0F99, x0F99);
  real _t0F9D = prim *0034 (y0F9A, y0F9A);
  real _t0F9E = prim +0017<$[]> (_t0F9C, _t0F9D);
  real _t0F9F = prim *0034 (z0F9B, z0F9B);
  real _t0FA0 = prim +0017<$[]> (_t0F9E, _t0F9F);
  real p0FA1 = prim unary -008B<$[]> (_t0FA0);
  real _t0FA2 = 0.e0;
  real _t0FA3 = 0.2e1;
  real _t0FA4 = prim *0034 (_t0FA3, y0F9A);
  real _t0FA5 = prim *0034 (_t0FA4, z0F9B);
  int _t0FA6 = 2;
  real _t0FA7 = prim ^0068 (y0F9A, _t0FA6);
  vec3 _t0FA8 = [_t0FA2, _t0FA5, _t0FA7];
  real _t0FA9 = 0.2e1;
  real _t0FAA = prim *0034 (_t0FA9, y0F9A);
  real _t0FAB = prim *0034 (_t0FAA, z0F9B);
  real _t0FAC = 0.2e1;
  real _t0FAD = prim *0034 (_t0FAC, x0F99);
  real _t0FAE = prim *0034 (_t0FAD, z0F9B);
  real _t0FAF = 0.2e1;
  real _t0FB0 = prim *0034 (_t0FAF, x0F99);
  real _t0FB1 = prim *0034 (_t0FB0, y0F9A);
  vec3 _t0FB2 = [_t0FAB, _t0FAE, _t0FB1];
  int _t0FB3 = 2;
  real _t0FB4 = prim ^0068 (y0F9A, _t0FB3);
  real _t0FB5 = 0.2e1;
  real _t0FB6 = prim *0034 (_t0FB5, x0F99);
  real _t0FB7 = prim *0034 (_t0FB6, y0F9A);
  real _t0FB8 = 0.e0;
  vec3 _t0FB9 = [_t0FB4, _t0FB7, _t0FB8];
  tensor[3,3] hess0FBA = [_t0FA8, _t0FB2, _t0FB9];
  H0E97 = hess0FBA;
  vec3[3] E0E98 = prim evecs00A0 (H0E97);
  real[3] L0E99 = prim evals009F (H0E97);
  real _t0E9A = 0.1e1;
  int _t0E9B = 2;
  real _t0E9C = prim $sub01C0<real; %3> (L0E99, _t0E9B);
  real _t0E9D = prim /0055 (_t0E9A, _t0E9C);
  real _t0E9E = prim unary -008B<$[]> (_t0E9D);
  int _t0E9F = 2;
  vec3 _t0EA0 = prim $sub01C0<vec3; %3> (E0E98, _t0E9F);
  vec3 _t0EA1 = prim *0036<$[3]> (_t0E9E, _t0EA0);
  int _t0EA2 = 2;
  vec3 _t0EA3 = prim $sub01C0<vec3; %3> (E0E98, _t0EA2);
  tensor[3,3] _t0EA4 = prim ⊗00E5<$[3]; $[3]; $[3,3]> (_t0EA1, _t0EA3);
  vec3 up0EA5 = prim •00CE<$[3,3]; $[3]; $[3]> (_t0EA4, g0E96);
  bool _t0EA6;
  real _t0EA7 = up0EA5[0];
  real _t0EA8 = up0EA5[0];
  bool _t0EA9 = prim ==0084 (_t0EA7, _t0EA8);
  bool _t0EAA = prim !00BC (_t0EA9);
  if _t0EAA {
    _t0EA6 = true;
  } else {
    bool _t0EAB;
    real _t0EAC = up0EA5[1];
    real _t0EAD = up0EA5[1];
    bool _t0EAE = prim ==0084 (_t0EAC, _t0EAD);
    bool _t0EAF = prim !00BC (_t0EAE);
    if _t0EAF {
      _t0EAB = true;
    } else {
      real _t0EB0 = up0EA5[2];
      real _t0EB1 = up0EA5[2];
      bool _t0EB2 = prim ==0084 (_t0EB0, _t0EB1);
      _t0EAB = prim !00BC (_t0EB2);
    }
    _t0EA6 = _t0EAB;
  }
  if _t0EA6 {
    real _t0EB3 = +inf;
    real _t0EB4 = +inf;
    real _t0EB5 = +inf;
    vec3 _t0EB6 = [_t0EB3, _t0EB4, _t0EB5];
    return _t0EB6;
  }
  return up0EA5;
}
function tensor[3,3]#1 fPerp0EC6 (vec3 s0EC7)
{
  vec3 g0EC8;
  real x0FF1 = s0EC7[0];
  real y0FF2 = s0EC7[1];
  real z0FF3 = s0EC7[2];
  real _t0FF4 = prim *0034 (x0FF1, x0FF1);
  real _t0FF5 = prim *0034 (y0FF2, y0FF2);
  real _t0FF6 = prim +0017<$[]> (_t0FF4, _t0FF5);
  real _t0FF7 = prim *0034 (z0FF3, z0FF3);
  real _t0FF8 = prim +0017<$[]> (_t0FF6, _t0FF7);
  real p0FF9 = prim unary -008B<$[]> (_t0FF8);
  int _t0FFA = 2;
  real _t0FFB = prim ^0068 (y0FF2, _t0FFA);
  real _t0FFC = prim *0034 (_t0FFB, z0FF3);
  real _t0FFD = 0.2e1;
  real _t0FFE = prim *0034 (_t0FFD, x0FF1);
  real _t0FFF = prim *0034 (_t0FFE, y0FF2);
  real _t1000 = prim *0034 (_t0FFF, z0FF3);
  int _t1001 = 2;
  real _t1002 = prim ^0068 (y0FF2, _t1001);
  real _t1003 = prim *0034 (x0FF1, _t1002);
  vec3 g1004 = [_t0FFC, _t1000, _t1003];
  g0EC8 = g1004;
  tensor[3,3] H0EC9;
  real x0FCF = s0EC7[0];
  real y0FD0 = s0EC7[1];
  real z0FD1 = s0EC7[2];
  real _t0FD2 = prim *0034 (x0FCF, x0FCF);
  real _t0FD3 = prim *0034 (y0FD0, y0FD0);
  real _t0FD4 = prim +0017<$[]> (_t0FD2, _t0FD3);
  real _t0FD5 = prim *0034 (z0FD1, z0FD1);
  real _t0FD6 = prim +0017<$[]> (_t0FD4, _t0FD5);
  real p0FD7 = prim unary -008B<$[]> (_t0FD6);
  real _t0FD8 = 0.e0;
  real _t0FD9 = 0.2e1;
  real _t0FDA = prim *0034 (_t0FD9, y0FD0);
  real _t0FDB = prim *0034 (_t0FDA, z0FD1);
  int _t0FDC = 2;
  real _t0FDD = prim ^0068 (y0FD0, _t0FDC);
  vec3 _t0FDE = [_t0FD8, _t0FDB, _t0FDD];
  real _t0FDF = 0.2e1;
  real _t0FE0 = prim *0034 (_t0FDF, y0FD0);
  real _t0FE1 = prim *0034 (_t0FE0, z0FD1);
  real _t0FE2 = 0.2e1;
  real _t0FE3 = prim *0034 (_t0FE2, x0FCF);
  real _t0FE4 = prim *0034 (_t0FE3, z0FD1);
  real _t0FE5 = 0.2e1;
  real _t0FE6 = prim *0034 (_t0FE5, x0FCF);
  real _t0FE7 = prim *0034 (_t0FE6, y0FD0);
  vec3 _t0FE8 = [_t0FE1, _t0FE4, _t0FE7];
  int _t0FE9 = 2;
  real _t0FEA = prim ^0068 (y0FD0, _t0FE9);
  real _t0FEB = 0.2e1;
  real _t0FEC = prim *0034 (_t0FEB, x0FCF);
  real _t0FED = prim *0034 (_t0FEC, y0FD0);
  real _t0FEE = 0.e0;
  vec3 _t0FEF = [_t0FEA, _t0FED, _t0FEE];
  tensor[3,3] hess0FF0 = [_t0FDE, _t0FE8, _t0FEF];
  H0EC9 = hess0FF0;
  vec3[3] _t0ECA = prim evecs00A0 (H0EC9);
  int _t0ECB = 2;
  vec3 E20ECC = prim $sub01C0<vec3; %3> (_t0ECA, _t0ECB);
  tensor[3,3] _t0ECD = prim $id01B9<%3> ();
  tensor[3,3] _t0ECE = prim ⊗00E5<$[3]; $[3]; $[3,3]> (E20ECC, E20ECC);
  tensor[3,3] m0ECF = prim -0026<$[3,3]> (_t0ECD, _t0ECE);
  real t0ED0 = prim :00FC<$[3,3]; $[3,3]; $[]> (m0ECF, m0ECF);
  bool _t0ED1 = prim ==0084 (t0ED0, t0ED0);
  bool _t0ED2 = prim !00BC (_t0ED1);
  if _t0ED2 {
    tensor[3,3] _t0ED3 = prim $zero01BB<$[3,3]> ();
    return _t0ED3;
  }
  return m0ECF;
}
globalInit {
  int _t04F2 = 0;
  int _t04F0 = 1;
  int _t04F4 = extractFemItem(NumCell(Mesh), int, meshData04EE);
  int _t04F3 = prim -0024 (_t04F4, _t04F0);
  int[] _t04F7 = prim $range01C3 (_t04F2, _t04F3);
  Femdata: MeshCell[] _t04F8 = {};
  foreach _t04F6 in _t04F7 {
    Femdata: MeshCell _t04F9 = loadFem(MeshCell, meshData04EE, _t04F6);
    _t04F8 = prim @0010<Femdata: MeshCell> (_t04F8, _t04F9);
  }
  Femdata: RefCell simplex10AD;
  Femdata: RefCell _t10AE = extractFemItem(RefCell(Mesh), Femdata: RefCell, meshData04EE);
  simplex10AD = _t10AE;
  simplex0E3C = simplex10AD;
}
strand particle (vec3 pos00F06, real hh00F07) in 3D {
  output vec3 pos0F08;
  output vec3 _pos0F09;
  real hh0F0A;
  vec3 step0F0B;
  bool found0F0C;
  int nfs0F0D;
  int test0F0E;
  int testp0F0F;
  int steps0F10;
  {
    pos0F08 = pos00F06;
    _pos0F09 = pos0F08;
    hh0F0A = hh00F07;
    step0F0B = prim $zero01BB<$[3]> ();
    found0F0C = false;
    nfs0F0D = 0;
    test0F0E = 1;
    testp0F0F = 0;
    steps0F10 = 0;
  }
  update
  {
    int _t0F11 = 1;
    steps0F10 = prim +0015 (steps0F10, _t0F11);
    bool _t0F12;
    bool _t11CE;
    bool _t11CF;
    real _t11D0 = 0.e0;
    real _t11D1 = 0.e0;
    real _t11D2 = 0.e0;
    vec3 _t11D3 = [_t11D0, _t11D1, _t11D2];
    vec3 mid11D4 = prim -0026<$[3]> (pos0F08, _t11D3);
    bool _t11D5;
    real _t11D6 = mid11D4[0];
    real _t11D7 = prim |()|00B5<$[]> (_t11D6);
    real _t11D8 = 0.1e0;
    bool _t11D9 = prim >0080 (_t11D7, _t11D8);
    if _t11D9 {
      bool _t11DA;
      real _t11DB = mid11D4[1];
      real _t11DC = prim |()|00B5<$[]> (_t11DB);
      real _t11DD = 0.1e0;
      bool _t11DE = prim >0080 (_t11DC, _t11DD);
      if _t11DE {
        real _t11DF = mid11D4[2];
        real _t11E0 = prim |()|00B5<$[]> (_t11DF);
        real _t11E1 = 0.1e0;
        _t11DA = prim >0080 (_t11E0, _t11E1);
      } else {
        _t11DA = false;
      }
      _t11D5 = _t11DA;
    } else {
      _t11D5 = false;
    }
    bool z11E2 = _t11D5;
    bool _t11E3;
    real _t11E4 = prim |()|00B5<$[3]> (mid11D4);
    real _t11E5 = 0.5e1;
    bool _t11E6 = prim <007A (_t11E4, _t11E5);
    if _t11E6 {
      bool _t11E7;
      real _t11E8 = prim |()|00B5<$[3]> (mid11D4);
      real _t11E9 = 0.2e1;
      bool _t11EA = prim >0080 (_t11E8, _t11E9);
      if _t11EA {
        _t11E7 = z11E2;
      } else {
        _t11E7 = false;
      }
      _t11E3 = _t11E7;
    } else {
      _t11E3 = false;
    }
    _t11CF = _t11E3;
    if _t11CF {
      bool _t11EB;
      bool _t11EC;
      bool _t11ED;
      real _t11EE = pos0F08[0];
      real _t11EF = pos0F08[0];
      bool _t11F0 = prim ==0084 (_t11EE, _t11EF);
      bool _t11F1 = prim !00BC (_t11F0);
      if _t11F1 {
        _t11ED = true;
      } else {
        bool _t11F2;
        real _t11F3 = pos0F08[1];
        real _t11F4 = pos0F08[1];
        bool _t11F5 = prim ==0084 (_t11F3, _t11F4);
        bool _t11F6 = prim !00BC (_t11F5);
        if _t11F6 {
          _t11F2 = true;
        } else {
          real _t11F7 = pos0F08[2];
          real _t11F8 = pos0F08[2];
          bool _t11F9 = prim ==0084 (_t11F7, _t11F8);
          _t11F2 = prim !00BC (_t11F9);
        }
        _t11ED = _t11F2;
      }
      _t11EC = _t11ED;
      bool _t11FA = prim !00BC (_t11EC);
      if _t11FA {
        real _t11FB;
        vec3 g11FC;
        real x11FD = pos0F08[0];
        real y11FE = pos0F08[1];
        real z11FF = pos0F08[2];
        real _t1200 = prim *0034 (x11FD, x11FD);
        real _t1201 = prim *0034 (y11FE, y11FE);
        real _t1202 = prim +0017<$[]> (_t1200, _t1201);
        real _t1203 = prim *0034 (z11FF, z11FF);
        real _t1204 = prim +0017<$[]> (_t1202, _t1203);
        real p1205 = prim unary -008B<$[]> (_t1204);
        int _t1206 = 2;
        real _t1207 = prim ^0068 (y11FE, _t1206);
        real _t1208 = prim *0034 (_t1207, z11FF);
        real _t1209 = 0.2e1;
        real _t120A = prim *0034 (_t1209, x11FD);
        real _t120B = prim *0034 (_t120A, y11FE);
        real _t120C = prim *0034 (_t120B, z11FF);
        int _t120D = 2;
        real _t120E = prim ^0068 (y11FE, _t120D);
        real _t120F = prim *0034 (x11FD, _t120E);
        vec3 g1210 = [_t1208, _t120C, _t120F];
        g11FC = g1210;
        tensor[3,3] H1211;
        real x1212 = pos0F08[0];
        real y1213 = pos0F08[1];
        real z1214 = pos0F08[2];
        real _t1215 = prim *0034 (x1212, x1212);
        real _t1216 = prim *0034 (y1213, y1213);
        real _t1217 = prim +0017<$[]> (_t1215, _t1216);
        real _t1218 = prim *0034 (z1214, z1214);
        real _t1219 = prim +0017<$[]> (_t1217, _t1218);
        real p121A = prim unary -008B<$[]> (_t1219);
        real _t121B = 0.e0;
        real _t121C = 0.2e1;
        real _t121D = prim *0034 (_t121C, y1213);
        real _t121E = prim *0034 (_t121D, z1214);
        int _t121F = 2;
        real _t1220 = prim ^0068 (y1213, _t121F);
        vec3 _t1221 = [_t121B, _t121E, _t1220];
        real _t1222 = 0.2e1;
        real _t1223 = prim *0034 (_t1222, y1213);
        real _t1224 = prim *0034 (_t1223, z1214);
        real _t1225 = 0.2e1;
        real _t1226 = prim *0034 (_t1225, x1212);
        real _t1227 = prim *0034 (_t1226, z1214);
        real _t1228 = 0.2e1;
        real _t1229 = prim *0034 (_t1228, x1212);
        real _t122A = prim *0034 (_t1229, y1213);
        vec3 _t122B = [_t1224, _t1227, _t122A];
        int _t122C = 2;
        real _t122D = prim ^0068 (y1213, _t122C);
        real _t122E = 0.2e1;
        real _t122F = prim *0034 (_t122E, x1212);
        real _t1230 = prim *0034 (_t122F, y1213);
        real _t1231 = 0.e0;
        vec3 _t1232 = [_t122D, _t1230, _t1231];
        tensor[3,3] hess1233 = [_t1221, _t122B, _t1232];
        H1211 = hess1233;
        real[3] _t1234 = prim evals009F (H1211);
        int _t1235 = 2;
        real _t1236 = prim $sub01C0<real; %3> (_t1234, _t1235);
        real _t1237 = prim unary -008B<$[]> (_t1236);
        real _t1238 = prim |()|00B5<$[3]> (g11FC);
        real _t1239 = prim +0017<$[]> (fBias0501, _t1238);
        real str123A = prim /0055 (_t1237, _t1239);
        _t11FB = str123A;
        _t11EB = prim >=007E (_t11FB, fStren0502);
      } else {
        _t11EB = false;
      }
      _t11CE = _t11EB;
    } else {
      _t11CE = false;
    }
    _t0F12 = _t11CE;
    bool _t0F13 = prim !00BC (_t0F12);
    if _t0F13 {
      die;
    }
    bool _t0F14 = prim !00BC (found0F0C);
    if _t0F14 {
      step0F0B = func fStep0E94 (pos0F08);
      pos0F08 = prim +0017<$[3]> (pos0F08, step0F0B);
      _pos0F09 = pos0F08;
      bool _t0F15;
      bool _t10AF;
      real _t10B0 = pos0F08[0];
      real _t10B1 = pos0F08[0];
      bool _t10B2 = prim ==0084 (_t10B0, _t10B1);
      bool _t10B3 = prim !00BC (_t10B2);
      if _t10B3 {
        _t10AF = true;
      } else {
        bool _t10B4;
        real _t10B5 = pos0F08[1];
        real _t10B6 = pos0F08[1];
        bool _t10B7 = prim ==0084 (_t10B5, _t10B6);
        bool _t10B8 = prim !00BC (_t10B7);
        if _t10B8 {
          _t10B4 = true;
        } else {
          real _t10B9 = pos0F08[2];
          real _t10BA = pos0F08[2];
          bool _t10BB = prim ==0084 (_t10B9, _t10BA);
          _t10B4 = prim !00BC (_t10BB);
        }
        _t10AF = _t10B4;
      }
      _t0F15 = _t10AF;
      if _t0F15 {
        die;
      }
      real _t0F16 = prim |()|00B5<$[3]> (step0F0B);
      real _t0F17 = prim /0055 (_t0F16, rad04FE);
      bool _t0F18 = prim >0080 (_t0F17, eps04FF);
      if _t0F18 {
        int _t0F19 = 1;
        nfs0F0D = prim +0015 (nfs0F0D, _t0F19);
        int _t0F1A = 10;
        bool _t0F1B = prim >007F (nfs0F0D, _t0F1A);
        if _t0F1B {
          die;
        }
      } else {
        found0F0C = true;
        testp0F0F = 1;
      }
    } else {
      vec3 _t0F1C = func fStep0E94 (pos0F08);
      pos0F08 = prim +0017<$[3]> (pos0F08, _t0F1C);
      _pos0F09 = pos0F08;
      bool _t0F1D;
      bool _t11C1;
      real _t11C2 = pos0F08[0];
      real _t11C3 = pos0F08[0];
      bool _t11C4 = prim ==0084 (_t11C2, _t11C3);
      bool _t11C5 = prim !00BC (_t11C4);
      if _t11C5 {
        _t11C1 = true;
      } else {
        bool _t11C6;
        real _t11C7 = pos0F08[1];
        real _t11C8 = pos0F08[1];
        bool _t11C9 = prim ==0084 (_t11C7, _t11C8);
        bool _t11CA = prim !00BC (_t11C9);
        if _t11CA {
          _t11C6 = true;
        } else {
          real _t11CB = pos0F08[2];
          real _t11CC = pos0F08[2];
          bool _t11CD = prim ==0084 (_t11CB, _t11CC);
          _t11C6 = prim !00BC (_t11CD);
        }
        _t11C1 = _t11C6;
      }
      _t0F1D = _t11C1;
      if _t0F1D {
        die;
      }
      step0F0B = prim $zero01BB<$[3]> ();
      real oldE0F1E = 0.e0;
      vec3 force0F1F = prim $zero01BB<$[3]> ();
      int nn0F20 = 0;
      particle[] _t0F21 = prim sphere0198<particle> (_pos0F09, rad04FE);
      foreach P0F22 in _t0F21 {
        vec3 _t0F23 = P0F22.pos0F08;
        vec3 _t0F24 = prim -0026<$[3]> (_t0F23, pos0F08);
        real _t0F25;
        real _t11BA = prim |()|00B5<$[3]> (_t0F24);
        real _t11BB = prim /0055 (_t11BA, rad04FE);
        real _t11BC;
        real _t11BD = 0.1e1;
        real _t11BE = prim -0026<$[]> (_t11BD, _t11BB);
        int _t11BF = 4;
        real _t11C0 = prim ^0068 (_t11BE, _t11BF);
        _t11BC = _t11C0;
        _t0F25 = _t11BC;
        oldE0F1E = prim +0017<$[]> (oldE0F1E, _t0F25);
        vec3 _t0F26 = P0F22.pos0F08;
        vec3 _t0F27 = prim -0026<$[3]> (_t0F26, pos0F08);
        vec3 _t0F28;
        real _t11AA = prim |()|00B5<$[3]> (_t0F27);
        real _t11AB = prim /0055 (_t11AA, rad04FE);
        real _t11AC;
        int _t11AD = -4;
        real _t11AE = (real)_t11AD;
        real _t11AF = 0.1e1;
        real _t11B0 = prim -0026<$[]> (_t11AF, _t11AB);
        int _t11B1 = 3;
        real _t11B2 = prim ^0068 (_t11B0, _t11B1);
        real _t11B3 = prim *0034 (_t11AE, _t11B2);
        _t11AC = _t11B3;
        real _t11B4 = 0.1e1;
        real _t11B5 = prim /0055 (_t11B4, rad04FE);
        real _t11B6 = prim *0034 (_t11AC, _t11B5);
        vec3 _t11B7 = prim *0036<$[3]> (_t11B6, _t0F27);
        real _t11B8 = prim |()|00B5<$[3]> (_t0F27);
        vec3 _t11B9 = prim /0057<$[3]> (_t11B7, _t11B8);
        _t0F28 = _t11B9;
        force0F1F = prim +0017<$[3]> (force0F1F, _t0F28);
        int _t0F29 = 1;
        nn0F20 = prim +0015 (nn0F20, _t0F29);
      }
      int _t0F2A = 0;
      bool _t0F2B = prim ==0082 (_t0F2A, nn0F20);
      if _t0F2B {
        real _t0F2C = 0.5e0;
        real _t0F2D = prim *0034 (_t0F2C, rad04FE);
        real _t0F2E = 0.e0;
        real _t0F2F = 0.e0;
        vec3 _t0F30 = [_t0F2D, _t0F2E, _t0F2F];
        vec3 npos0F31 = prim +0017<$[3]> (pos0F08, _t0F30);
        bool _t0F32;
        bool _t113D;
        bool _t113E;
        real _t113F = 0.e0;
        real _t1140 = 0.e0;
        real _t1141 = 0.e0;
        vec3 _t1142 = [_t113F, _t1140, _t1141];
        vec3 mid1143 = prim -0026<$[3]> (npos0F31, _t1142);
        bool _t1144;
        real _t1145 = mid1143[0];
        real _t1146 = prim |()|00B5<$[]> (_t1145);
        real _t1147 = 0.1e0;
        bool _t1148 = prim >0080 (_t1146, _t1147);
        if _t1148 {
          bool _t1149;
          real _t114A = mid1143[1];
          real _t114B = prim |()|00B5<$[]> (_t114A);
          real _t114C = 0.1e0;
          bool _t114D = prim >0080 (_t114B, _t114C);
          if _t114D {
            real _t114E = mid1143[2];
            real _t114F = prim |()|00B5<$[]> (_t114E);
            real _t1150 = 0.1e0;
            _t1149 = prim >0080 (_t114F, _t1150);
          } else {
            _t1149 = false;
          }
          _t1144 = _t1149;
        } else {
          _t1144 = false;
        }
        bool z1151 = _t1144;
        bool _t1152;
        real _t1153 = prim |()|00B5<$[3]> (mid1143);
        real _t1154 = 0.5e1;
        bool _t1155 = prim <007A (_t1153, _t1154);
        if _t1155 {
          bool _t1156;
          real _t1157 = prim |()|00B5<$[3]> (mid1143);
          real _t1158 = 0.2e1;
          bool _t1159 = prim >0080 (_t1157, _t1158);
          if _t1159 {
            _t1156 = z1151;
          } else {
            _t1156 = false;
          }
          _t1152 = _t1156;
        } else {
          _t1152 = false;
        }
        _t113E = _t1152;
        if _t113E {
          bool _t115A;
          bool _t115B;
          bool _t115C;
          real _t115D = npos0F31[0];
          real _t115E = npos0F31[0];
          bool _t115F = prim ==0084 (_t115D, _t115E);
          bool _t1160 = prim !00BC (_t115F);
          if _t1160 {
            _t115C = true;
          } else {
            bool _t1161;
            real _t1162 = npos0F31[1];
            real _t1163 = npos0F31[1];
            bool _t1164 = prim ==0084 (_t1162, _t1163);
            bool _t1165 = prim !00BC (_t1164);
            if _t1165 {
              _t1161 = true;
            } else {
              real _t1166 = npos0F31[2];
              real _t1167 = npos0F31[2];
              bool _t1168 = prim ==0084 (_t1166, _t1167);
              _t1161 = prim !00BC (_t1168);
            }
            _t115C = _t1161;
          }
          _t115B = _t115C;
          bool _t1169 = prim !00BC (_t115B);
          if _t1169 {
            real _t116A;
            vec3 g116B;
            real x116C = npos0F31[0];
            real y116D = npos0F31[1];
            real z116E = npos0F31[2];
            real _t116F = prim *0034 (x116C, x116C);
            real _t1170 = prim *0034 (y116D, y116D);
            real _t1171 = prim +0017<$[]> (_t116F, _t1170);
            real _t1172 = prim *0034 (z116E, z116E);
            real _t1173 = prim +0017<$[]> (_t1171, _t1172);
            real p1174 = prim unary -008B<$[]> (_t1173);
            int _t1175 = 2;
            real _t1176 = prim ^0068 (y116D, _t1175);
            real _t1177 = prim *0034 (_t1176, z116E);
            real _t1178 = 0.2e1;
            real _t1179 = prim *0034 (_t1178, x116C);
            real _t117A = prim *0034 (_t1179, y116D);
            real _t117B = prim *0034 (_t117A, z116E);
            int _t117C = 2;
            real _t117D = prim ^0068 (y116D, _t117C);
            real _t117E = prim *0034 (x116C, _t117D);
            vec3 g117F = [_t1177, _t117B, _t117E];
            g116B = g117F;
            tensor[3,3] H1180;
            real x1181 = npos0F31[0];
            real y1182 = npos0F31[1];
            real z1183 = npos0F31[2];
            real _t1184 = prim *0034 (x1181, x1181);
            real _t1185 = prim *0034 (y1182, y1182);
            real _t1186 = prim +0017<$[]> (_t1184, _t1185);
            real _t1187 = prim *0034 (z1183, z1183);
            real _t1188 = prim +0017<$[]> (_t1186, _t1187);
            real p1189 = prim unary -008B<$[]> (_t1188);
            real _t118A = 0.e0;
            real _t118B = 0.2e1;
            real _t118C = prim *0034 (_t118B, y1182);
            real _t118D = prim *0034 (_t118C, z1183);
            int _t118E = 2;
            real _t118F = prim ^0068 (y1182, _t118E);
            vec3 _t1190 = [_t118A, _t118D, _t118F];
            real _t1191 = 0.2e1;
            real _t1192 = prim *0034 (_t1191, y1182);
            real _t1193 = prim *0034 (_t1192, z1183);
            real _t1194 = 0.2e1;
            real _t1195 = prim *0034 (_t1194, x1181);
            real _t1196 = prim *0034 (_t1195, z1183);
            real _t1197 = 0.2e1;
            real _t1198 = prim *0034 (_t1197, x1181);
            real _t1199 = prim *0034 (_t1198, y1182);
            vec3 _t119A = [_t1193, _t1196, _t1199];
            int _t119B = 2;
            real _t119C = prim ^0068 (y1182, _t119B);
            real _t119D = 0.2e1;
            real _t119E = prim *0034 (_t119D, x1181);
            real _t119F = prim *0034 (_t119E, y1182);
            real _t11A0 = 0.e0;
            vec3 _t11A1 = [_t119C, _t119F, _t11A0];
            tensor[3,3] hess11A2 = [_t1190, _t119A, _t11A1];
            H1180 = hess11A2;
            real[3] _t11A3 = prim evals009F (H1180);
            int _t11A4 = 2;
            real _t11A5 = prim $sub01C0<real; %3> (_t11A3, _t11A4);
            real _t11A6 = prim unary -008B<$[]> (_t11A5);
            real _t11A7 = prim |()|00B5<$[3]> (g116B);
            real _t11A8 = prim +0017<$[]> (fBias0501, _t11A7);
            real str11A9 = prim /0055 (_t11A6, _t11A8);
            _t116A = str11A9;
            _t115A = prim >=007E (_t116A, fStren0502);
          } else {
            _t115A = false;
          }
          _t113D = _t115A;
        } else {
          _t113D = false;
        }
        _t0F32 = _t113D;
        if _t0F32 {
          new particle (npos0F31, hh0F0A);
        }
        continue;
      }
      tensor[3,3] _t0F33 = func fPerp0EC6 (pos0F08);
      force0F1F = prim •00CE<$[3,3]; $[3]; $[3]> (_t0F33, force0F1F);
      vec3 es0F34 = prim *0036<$[3]> (hh0F0A, force0F1F);
      real _t0F35 = prim |()|00B5<$[3]> (es0F34);
      bool _t0F36 = prim >0080 (_t0F35, rad04FE);
      if _t0F36 {
        real _t0F37 = prim |()|00B5<$[3]> (es0F34);
        real _t0F38 = prim /0055 (rad04FE, _t0F37);
        hh0F0A = prim *0034 (hh0F0A, _t0F38);
        real _t0F39 = prim |()|00B5<$[3]> (es0F34);
        real _t0F3A = prim /0055 (rad04FE, _t0F39);
        es0F34 = prim *0038<$[3]> (es0F34, _t0F3A);
      }
      vec3 samplePos0F3B = prim +0017<$[3]> (pos0F08, es0F34);
      vec3 fs0F3C = func fStep0E94 (samplePos0F3B);
      real _t0F3D = prim |()|00B5<$[3]> (fs0F3C);
      real _t0F3E = prim |()|00B5<$[3]> (es0F34);
      real _t0F3F = prim /0055 (_t0F3D, _t0F3E);
      real _t0F40 = 0.5e0;
      bool _t0F41 = prim >0080 (_t0F3F, _t0F40);
      if _t0F41 {
        real _t0F42 = 0.5e0;
        hh0F0A = prim *0034 (hh0F0A, _t0F42);
        continue;
      }
      vec3 oldPos0F43 = pos0F08;
      vec3 up0F44 = prim +0017<$[3]> (fs0F3C, es0F34);
      pos0F08 = prim +0017<$[3]> (pos0F08, up0F44);
      _pos0F09 = pos0F08;
      particle[] _t0F45 = prim sphere0198<particle> (_pos0F09, rad04FE);
      real accum0F4A = 0.e0;
      foreach P0F46 in _t0F45 {
        vec3 _t0F47 = P0F46.pos0F08;
        vec3 _t0F48 = prim -0026<$[3]> (pos0F08, _t0F47);
        real _t0F49;
        real _t1136 = prim |()|00B5<$[3]> (_t0F48);
        real _t1137 = prim /0055 (_t1136, rad04FE);
        real _t1138;
        real _t1139 = 0.1e1;
        real _t113A = prim -0026<$[]> (_t1139, _t1137);
        int _t113B = 4;
        real _t113C = prim ^0068 (_t113A, _t113B);
        _t1138 = _t113C;
        _t0F49 = _t1138;
        accum0F4A = prim +0017<$[]> (accum0F4A, _t0F49);
      }
      real newE0F4B = accum0F4A;
      real _t0F4C = prim -0026<$[]> (newE0F4B, oldE0F1E);
      real _t0F4D = 0.5e0;
      vec3 _t0F4E = prim -0026<$[3]> (pos0F08, oldPos0F43);
      vec3 _t0F4F = prim *0036<$[3]> (_t0F4D, _t0F4E);
      vec3 _t0F50 = prim unary -008B<$[3]> (force0F1F);
      real _t0F51 = prim •00CE<$[3]; $[3]; $[]> (_t0F4F, _t0F50);
      bool _t0F52 = prim >0080 (_t0F4C, _t0F51);
      if _t0F52 {
        pos0F08 = oldPos0F43;
        _pos0F09 = pos0F08;
        real _t0F53 = 0.5e0;
        hh0F0A = prim *0034 (hh0F0A, _t0F53);
        continue;
      }
      real _t0F54 = 0.11e1;
      hh0F0A = prim *0034 (hh0F0A, _t0F54);
      step0F0B = up0F44;
      bool _t0F55;
      bool _t1129;
      real _t112A = pos0F08[0];
      real _t112B = pos0F08[0];
      bool _t112C = prim ==0084 (_t112A, _t112B);
      bool _t112D = prim !00BC (_t112C);
      if _t112D {
        _t1129 = true;
      } else {
        bool _t112E;
        real _t112F = pos0F08[1];
        real _t1130 = pos0F08[1];
        bool _t1131 = prim ==0084 (_t112F, _t1130);
        bool _t1132 = prim !00BC (_t1131);
        if _t1132 {
          _t112E = true;
        } else {
          real _t1133 = pos0F08[2];
          real _t1134 = pos0F08[2];
          bool _t1135 = prim ==0084 (_t1133, _t1134);
          _t112E = prim !00BC (_t1135);
        }
        _t1129 = _t112E;
      }
      _t0F55 = _t1129;
      if _t0F55 {
        die;
      }
      int _t0F56 = 5;
      bool _t0F57 = prim <0079 (nn0F20, _t0F56);
      if _t0F57 {
        real _t0F58 = 0.5e0;
        real _t0F59 = prim *0034 (_t0F58, rad04FE);
        vec3 _t0F5A = prim normalize0137<$[3]> (es0F34);
        vec3 _t0F5B = prim *0036<$[3]> (_t0F59, _t0F5A);
        vec3 npos0F5C = prim +0017<$[3]> (pos0F08, _t0F5B);
        bool _t0F5D;
        bool _t10BC;
        bool _t10BD;
        real _t10BE = 0.e0;
        real _t10BF = 0.e0;
        real _t10C0 = 0.e0;
        vec3 _t10C1 = [_t10BE, _t10BF, _t10C0];
        vec3 mid10C2 = prim -0026<$[3]> (npos0F5C, _t10C1);
        bool _t10C3;
        real _t10C4 = mid10C2[0];
        real _t10C5 = prim |()|00B5<$[]> (_t10C4);
        real _t10C6 = 0.1e0;
        bool _t10C7 = prim >0080 (_t10C5, _t10C6);
        if _t10C7 {
          bool _t10C8;
          real _t10C9 = mid10C2[1];
          real _t10CA = prim |()|00B5<$[]> (_t10C9);
          real _t10CB = 0.1e0;
          bool _t10CC = prim >0080 (_t10CA, _t10CB);
          if _t10CC {
            real _t10CD = mid10C2[2];
            real _t10CE = prim |()|00B5<$[]> (_t10CD);
            real _t10CF = 0.1e0;
            _t10C8 = prim >0080 (_t10CE, _t10CF);
          } else {
            _t10C8 = false;
          }
          _t10C3 = _t10C8;
        } else {
          _t10C3 = false;
        }
        bool z10D0 = _t10C3;
        bool _t10D1;
        real _t10D2 = prim |()|00B5<$[3]> (mid10C2);
        real _t10D3 = 0.5e1;
        bool _t10D4 = prim <007A (_t10D2, _t10D3);
        if _t10D4 {
          bool _t10D5;
          real _t10D6 = prim |()|00B5<$[3]> (mid10C2);
          real _t10D7 = 0.2e1;
          bool _t10D8 = prim >0080 (_t10D6, _t10D7);
          if _t10D8 {
            _t10D5 = z10D0;
          } else {
            _t10D5 = false;
          }
          _t10D1 = _t10D5;
        } else {
          _t10D1 = false;
        }
        _t10BD = _t10D1;
        if _t10BD {
          bool _t10D9;
          bool _t10DA;
          bool _t10DB;
          real _t10DC = npos0F5C[0];
          real _t10DD = npos0F5C[0];
          bool _t10DE = prim ==0084 (_t10DC, _t10DD);
          bool _t10DF = prim !00BC (_t10DE);
          if _t10DF {
            _t10DB = true;
          } else {
            bool _t10E0;
            real _t10E1 = npos0F5C[1];
            real _t10E2 = npos0F5C[1];
            bool _t10E3 = prim ==0084 (_t10E1, _t10E2);
            bool _t10E4 = prim !00BC (_t10E3);
            if _t10E4 {
              _t10E0 = true;
            } else {
              real _t10E5 = npos0F5C[2];
              real _t10E6 = npos0F5C[2];
              bool _t10E7 = prim ==0084 (_t10E5, _t10E6);
              _t10E0 = prim !00BC (_t10E7);
            }
            _t10DB = _t10E0;
          }
          _t10DA = _t10DB;
          bool _t10E8 = prim !00BC (_t10DA);
          if _t10E8 {
            real _t10E9;
            vec3 g10EA;
            real x10EB = npos0F5C[0];
            real y10EC = npos0F5C[1];
            real z10ED = npos0F5C[2];
            real _t10EE = prim *0034 (x10EB, x10EB);
            real _t10EF = prim *0034 (y10EC, y10EC);
            real _t10F0 = prim +0017<$[]> (_t10EE, _t10EF);
            real _t10F1 = prim *0034 (z10ED, z10ED);
            real _t10F2 = prim +0017<$[]> (_t10F0, _t10F1);
            real p10F3 = prim unary -008B<$[]> (_t10F2);
            int _t10F4 = 2;
            real _t10F5 = prim ^0068 (y10EC, _t10F4);
            real _t10F6 = prim *0034 (_t10F5, z10ED);
            real _t10F7 = 0.2e1;
            real _t10F8 = prim *0034 (_t10F7, x10EB);
            real _t10F9 = prim *0034 (_t10F8, y10EC);
            real _t10FA = prim *0034 (_t10F9, z10ED);
            int _t10FB = 2;
            real _t10FC = prim ^0068 (y10EC, _t10FB);
            real _t10FD = prim *0034 (x10EB, _t10FC);
            vec3 g10FE = [_t10F6, _t10FA, _t10FD];
            g10EA = g10FE;
            tensor[3,3] H10FF;
            real x1100 = npos0F5C[0];
            real y1101 = npos0F5C[1];
            real z1102 = npos0F5C[2];
            real _t1103 = prim *0034 (x1100, x1100);
            real _t1104 = prim *0034 (y1101, y1101);
            real _t1105 = prim +0017<$[]> (_t1103, _t1104);
            real _t1106 = prim *0034 (z1102, z1102);
            real _t1107 = prim +0017<$[]> (_t1105, _t1106);
            real p1108 = prim unary -008B<$[]> (_t1107);
            real _t1109 = 0.e0;
            real _t110A = 0.2e1;
            real _t110B = prim *0034 (_t110A, y1101);
            real _t110C = prim *0034 (_t110B, z1102);
            int _t110D = 2;
            real _t110E = prim ^0068 (y1101, _t110D);
            vec3 _t110F = [_t1109, _t110C, _t110E];
            real _t1110 = 0.2e1;
            real _t1111 = prim *0034 (_t1110, y1101);
            real _t1112 = prim *0034 (_t1111, z1102);
            real _t1113 = 0.2e1;
            real _t1114 = prim *0034 (_t1113, x1100);
            real _t1115 = prim *0034 (_t1114, z1102);
            real _t1116 = 0.2e1;
            real _t1117 = prim *0034 (_t1116, x1100);
            real _t1118 = prim *0034 (_t1117, y1101);
            vec3 _t1119 = [_t1112, _t1115, _t1118];
            int _t111A = 2;
            real _t111B = prim ^0068 (y1101, _t111A);
            real _t111C = 0.2e1;
            real _t111D = prim *0034 (_t111C, x1100);
            real _t111E = prim *0034 (_t111D, y1101);
            real _t111F = 0.e0;
            vec3 _t1120 = [_t111B, _t111E, _t111F];
            tensor[3,3] hess1121 = [_t110F, _t1119, _t1120];
            H10FF = hess1121;
            real[3] _t1122 = prim evals009F (H10FF);
            int _t1123 = 2;
            real _t1124 = prim $sub01C0<real; %3> (_t1122, _t1123);
            real _t1125 = prim unary -008B<$[]> (_t1124);
            real _t1126 = prim |()|00B5<$[3]> (g10EA);
            real _t1127 = prim +0017<$[]> (fBias0501, _t1126);
            real str1128 = prim /0055 (_t1125, _t1127);
            _t10E9 = str1128;
            _t10D9 = prim >=007E (_t10E9, fStren0502);
          } else {
            _t10D9 = false;
          }
          _t10BC = _t10D9;
        } else {
          _t10BC = false;
        }
        _t0F5D = _t10BC;
        if _t0F5D {
          new particle (npos0F5C, hh0F0A);
        }
      }
    }
  }
}
collection {
  foreach x0F5E in ipos0504 {
    real _t0F5F = 0.1e1;
    new particle (x0F5E, _t0F5F);
  }
}
update {
  int res0F60= sum<int> { (P0F63) => {
      int _t0F64 = P0F63.test0F0E;
      return _t0F64;
    } (P0F61, P0F61)
  | P0F61 in all };
  int num0F66 = res0F60;
  int res0F67= max<int> { (P0F6A) => {
      int _t0F6B = P0F6A.steps0F10;
      return _t0F6B;
    } (P0F68, P0F68)
  | P0F68 in all };
  int steps0F6D = res0F67;
  int res0F6E= sum<int> { (P0F71) => {
      int _t0F72 = P0F71.testp0F0F;
      return _t0F72;
    } (P0F6F, P0F6F)
  | P0F6F in all };
  int numFound0F74 = res0F6E;
  bool res0F75= all { (P0F78) => {
      bool _t0F79 = P0F78.found0F0C;
      return _t0F79;
    } (P0F76, P0F76)
  | P0F76 in all };
  bool allFound0F7B = res0F75;
  real res0F7C= max<real> { (P0F80) => {
      vec3 _t0F81 = P0F80.step0F0B;
      real _t0F82 = prim |()|00B5<$[3]> (_t0F81);
      return _t0F82;
    } (P0F7D, P0F7D)
  | P0F7D in all };
  real maxStep0F84 = res0F7C;
  string _t0F85 = "One run:";
  string _t0F86 = " and ";
  real _t0F87 = prim /0055 (maxStep0F84, rad04FE);
  string _t0F88 = " and ";
  real _t0F89 = prim /0055 (maxStep0F84, rad04FE);
  bool _t0F8A = prim <007A (_t0F89, eps04FF);
  string _t0F8B = " and ";
  string _t0F8C = " of ";
  string _t0F8D = "\n";
  print (_t0F85, allFound0F7B, _t0F86, _t0F87, _t0F88, _t0F8A, _t0F8B, numFound0F74, _t0F8C, num0F66, _t0F8D);
  if allFound0F7B {
    real _t0F8E = prim /0055 (maxStep0F84, rad04FE);
    bool _t0F8F = prim <007A (_t0F8E, eps04FF);
    if _t0F8F {
      string _t0F90 = "CONVERGED!\n";
      print (_t0F90);
      stabilize_all;
    }
  }
  int _t0F91 = 2000;
  bool _t0F92 = prim >007F (steps0F6D, _t0F91);
  if _t0F92 {
    stabilize_all;
  }
  string _t0F93 = "Current steps:";
  string _t0F94 = "\n";
  print (_t0F93, steps0F6D, _t0F94);
}
/* Program end */
/* Simplified Program (after after contraction (2)) start */
properties: GlobalInit,StabilizeAll,GlobalReduce,StrandSets,GlobalUpdate,NewStrands,StrandCommunication,StrandsMayDie,HasInputs,HasGlobals,ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
input FemData:Mesh meshData04EE;
input FemData:Space 0space04FA_intermedateGlobal04FB;
input FemData:FemFunc 0data04FC_intermedateGlobal04FD;
input real rad04FE = <default>;
input real eps04FF = <default>;
input real v00500 = <default>;
input real fBias0501 = <default>;
input real fStren0502 = <default>;
input real zfuz0503 = <default>;
input vec3[] ipos0504;
constants {
  rad04FE = 0.1e-1;
  eps04FF = 0.1e-1;
  v00500 = 0.625e-1;
  fBias0501 = 0.1e-1;
  fStren0502 = 0.1e-1;
  zfuz0503 = 0.1e-1;
}
function int[2]#6 nextCell405D9 (int faceIdx0A38, int cell0A39, Femdata: Mesh mesh0A3A)
{
  int _t0A3B = -1;
  bool _t0A3C = prim ==0082 (faceIdx0A38, _t0A3B);
  if _t0A3C {
    int _t0A3D = -1;
    int _t0A3E = -1;
    int[2] _t0A3F = {_t0A3D, _t0A3E};
    return _t0A3F;
  } else {
    int _t0A40 = 8;
    int _t0A41 = prim *0033 (cell0A39, _t0A40);
    int _t0A42 = 2;
    int _t0A43 = prim *0033 (faceIdx0A38, _t0A42);
    int _t0A44 = prim +0015 (_t0A41, _t0A43);
    int[2] _t0A45 = extractFemItemN((mesh0A3A, _t0A44),CellFaceCell(Mesh),);
    return _t0A45;
  }
}
function vec3#3 fStep0E94 (vec3 s0E95)
{
  vec3 g0E96;
  real x0FBB = s0E95[0];
  real y0FBC = s0E95[1];
  real z0FBD = s0E95[2];
  real _t0FBE = prim *0034 (x0FBB, x0FBB);
  real _t0FBF = prim *0034 (y0FBC, y0FBC);
  real _t0FC0 = prim +0017<$[]> (_t0FBE, _t0FBF);
  real _t0FC1 = prim *0034 (z0FBD, z0FBD);
  real _t0FC2 = prim +0017<$[]> (_t0FC0, _t0FC1);
  real p0FC3 = prim unary -008B<$[]> (_t0FC2);
  int _t0FC4 = 2;
  real _t0FC5 = prim ^0068 (y0FBC, _t0FC4);
  real _t0FC6 = prim *0034 (_t0FC5, z0FBD);
  real _t0FC7 = 0.2e1;
  real _t0FC8 = prim *0034 (_t0FC7, x0FBB);
  real _t0FC9 = prim *0034 (_t0FC8, y0FBC);
  real _t0FCA = prim *0034 (_t0FC9, z0FBD);
  int _t0FCB = 2;
  real _t0FCC = prim ^0068 (y0FBC, _t0FCB);
  real _t0FCD = prim *0034 (x0FBB, _t0FCC);
  vec3 g0FCE = [_t0FC6, _t0FCA, _t0FCD];
  g0E96 = g0FCE;
  tensor[3,3] H0E97;
  real x0F99 = s0E95[0];
  real y0F9A = s0E95[1];
  real z0F9B = s0E95[2];
  real _t0F9C = prim *0034 (x0F99, x0F99);
  real _t0F9D = prim *0034 (y0F9A, y0F9A);
  real _t0F9E = prim +0017<$[]> (_t0F9C, _t0F9D);
  real _t0F9F = prim *0034 (z0F9B, z0F9B);
  real _t0FA0 = prim +0017<$[]> (_t0F9E, _t0F9F);
  real p0FA1 = prim unary -008B<$[]> (_t0FA0);
  real _t0FA2 = 0.e0;
  real _t0FA3 = 0.2e1;
  real _t0FA4 = prim *0034 (_t0FA3, y0F9A);
  real _t0FA5 = prim *0034 (_t0FA4, z0F9B);
  int _t0FA6 = 2;
  real _t0FA7 = prim ^0068 (y0F9A, _t0FA6);
  vec3 _t0FA8 = [_t0FA2, _t0FA5, _t0FA7];
  real _t0FA9 = 0.2e1;
  real _t0FAA = prim *0034 (_t0FA9, y0F9A);
  real _t0FAB = prim *0034 (_t0FAA, z0F9B);
  real _t0FAC = 0.2e1;
  real _t0FAD = prim *0034 (_t0FAC, x0F99);
  real _t0FAE = prim *0034 (_t0FAD, z0F9B);
  real _t0FAF = 0.2e1;
  real _t0FB0 = prim *0034 (_t0FAF, x0F99);
  real _t0FB1 = prim *0034 (_t0FB0, y0F9A);
  vec3 _t0FB2 = [_t0FAB, _t0FAE, _t0FB1];
  int _t0FB3 = 2;
  real _t0FB4 = prim ^0068 (y0F9A, _t0FB3);
  real _t0FB5 = 0.2e1;
  real _t0FB6 = prim *0034 (_t0FB5, x0F99);
  real _t0FB7 = prim *0034 (_t0FB6, y0F9A);
  real _t0FB8 = 0.e0;
  vec3 _t0FB9 = [_t0FB4, _t0FB7, _t0FB8];
  tensor[3,3] hess0FBA = [_t0FA8, _t0FB2, _t0FB9];
  H0E97 = hess0FBA;
  vec3[3] E0E98 = prim evecs00A0 (H0E97);
  real[3] L0E99 = prim evals009F (H0E97);
  real _t0E9A = 0.1e1;
  int _t0E9B = 2;
  real _t0E9C = prim $sub01C0<real; %3> (L0E99, _t0E9B);
  real _t0E9D = prim /0055 (_t0E9A, _t0E9C);
  real _t0E9E = prim unary -008B<$[]> (_t0E9D);
  int _t0E9F = 2;
  vec3 _t0EA0 = prim $sub01C0<vec3; %3> (E0E98, _t0E9F);
  vec3 _t0EA1 = prim *0036<$[3]> (_t0E9E, _t0EA0);
  int _t0EA2 = 2;
  vec3 _t0EA3 = prim $sub01C0<vec3; %3> (E0E98, _t0EA2);
  tensor[3,3] _t0EA4 = prim ⊗00E5<$[3]; $[3]; $[3,3]> (_t0EA1, _t0EA3);
  vec3 up0EA5 = prim •00CE<$[3,3]; $[3]; $[3]> (_t0EA4, g0E96);
  bool _t0EA6;
  real _t0EA7 = up0EA5[0];
  real _t0EA8 = up0EA5[0];
  bool _t0EA9 = prim ==0084 (_t0EA7, _t0EA8);
  bool _t0EAA = prim !00BC (_t0EA9);
  if _t0EAA {
    _t0EA6 = true;
  } else {
    bool _t0EAB;
    real _t0EAC = up0EA5[1];
    real _t0EAD = up0EA5[1];
    bool _t0EAE = prim ==0084 (_t0EAC, _t0EAD);
    bool _t0EAF = prim !00BC (_t0EAE);
    if _t0EAF {
      _t0EAB = true;
    } else {
      real _t0EB0 = up0EA5[2];
      real _t0EB1 = up0EA5[2];
      bool _t0EB2 = prim ==0084 (_t0EB0, _t0EB1);
      _t0EAB = prim !00BC (_t0EB2);
    }
    _t0EA6 = _t0EAB;
  }
  if _t0EA6 {
    real _t0EB3 = +inf;
    real _t0EB4 = +inf;
    real _t0EB5 = +inf;
    vec3 _t0EB6 = [_t0EB3, _t0EB4, _t0EB5];
    return _t0EB6;
  }
  return up0EA5;
}
function tensor[3,3]#1 fPerp0EC6 (vec3 s0EC7)
{
  vec3 g0EC8;
  real x0FF1 = s0EC7[0];
  real y0FF2 = s0EC7[1];
  real z0FF3 = s0EC7[2];
  real _t0FF4 = prim *0034 (x0FF1, x0FF1);
  real _t0FF5 = prim *0034 (y0FF2, y0FF2);
  real _t0FF6 = prim +0017<$[]> (_t0FF4, _t0FF5);
  real _t0FF7 = prim *0034 (z0FF3, z0FF3);
  real _t0FF8 = prim +0017<$[]> (_t0FF6, _t0FF7);
  real p0FF9 = prim unary -008B<$[]> (_t0FF8);
  int _t0FFA = 2;
  real _t0FFB = prim ^0068 (y0FF2, _t0FFA);
  real _t0FFC = prim *0034 (_t0FFB, z0FF3);
  real _t0FFD = 0.2e1;
  real _t0FFE = prim *0034 (_t0FFD, x0FF1);
  real _t0FFF = prim *0034 (_t0FFE, y0FF2);
  real _t1000 = prim *0034 (_t0FFF, z0FF3);
  int _t1001 = 2;
  real _t1002 = prim ^0068 (y0FF2, _t1001);
  real _t1003 = prim *0034 (x0FF1, _t1002);
  vec3 g1004 = [_t0FFC, _t1000, _t1003];
  g0EC8 = g1004;
  tensor[3,3] H0EC9;
  real x0FCF = s0EC7[0];
  real y0FD0 = s0EC7[1];
  real z0FD1 = s0EC7[2];
  real _t0FD2 = prim *0034 (x0FCF, x0FCF);
  real _t0FD3 = prim *0034 (y0FD0, y0FD0);
  real _t0FD4 = prim +0017<$[]> (_t0FD2, _t0FD3);
  real _t0FD5 = prim *0034 (z0FD1, z0FD1);
  real _t0FD6 = prim +0017<$[]> (_t0FD4, _t0FD5);
  real p0FD7 = prim unary -008B<$[]> (_t0FD6);
  real _t0FD8 = 0.e0;
  real _t0FD9 = 0.2e1;
  real _t0FDA = prim *0034 (_t0FD9, y0FD0);
  real _t0FDB = prim *0034 (_t0FDA, z0FD1);
  int _t0FDC = 2;
  real _t0FDD = prim ^0068 (y0FD0, _t0FDC);
  vec3 _t0FDE = [_t0FD8, _t0FDB, _t0FDD];
  real _t0FDF = 0.2e1;
  real _t0FE0 = prim *0034 (_t0FDF, y0FD0);
  real _t0FE1 = prim *0034 (_t0FE0, z0FD1);
  real _t0FE2 = 0.2e1;
  real _t0FE3 = prim *0034 (_t0FE2, x0FCF);
  real _t0FE4 = prim *0034 (_t0FE3, z0FD1);
  real _t0FE5 = 0.2e1;
  real _t0FE6 = prim *0034 (_t0FE5, x0FCF);
  real _t0FE7 = prim *0034 (_t0FE6, y0FD0);
  vec3 _t0FE8 = [_t0FE1, _t0FE4, _t0FE7];
  int _t0FE9 = 2;
  real _t0FEA = prim ^0068 (y0FD0, _t0FE9);
  real _t0FEB = 0.2e1;
  real _t0FEC = prim *0034 (_t0FEB, x0FCF);
  real _t0FED = prim *0034 (_t0FEC, y0FD0);
  real _t0FEE = 0.e0;
  vec3 _t0FEF = [_t0FEA, _t0FED, _t0FEE];
  tensor[3,3] hess0FF0 = [_t0FDE, _t0FE8, _t0FEF];
  H0EC9 = hess0FF0;
  vec3[3] _t0ECA = prim evecs00A0 (H0EC9);
  int _t0ECB = 2;
  vec3 E20ECC = prim $sub01C0<vec3; %3> (_t0ECA, _t0ECB);
  tensor[3,3] _t0ECD = prim $id01B9<%3> ();
  tensor[3,3] _t0ECE = prim ⊗00E5<$[3]; $[3]; $[3,3]> (E20ECC, E20ECC);
  tensor[3,3] m0ECF = prim -0026<$[3,3]> (_t0ECD, _t0ECE);
  real t0ED0 = prim :00FC<$[3,3]; $[3,3]; $[]> (m0ECF, m0ECF);
  bool _t0ED1 = prim ==0084 (t0ED0, t0ED0);
  bool _t0ED2 = prim !00BC (_t0ED1);
  if _t0ED2 {
    tensor[3,3] _t0ED3 = prim $zero01BB<$[3,3]> ();
    return _t0ED3;
  }
  return m0ECF;
}
globalInit {
  int _t04F2 = 0;
  int _t04F0 = 1;
  int _t04F4 = extractFemItem(NumCell(Mesh), int, meshData04EE);
  int _t04F3 = prim -0024 (_t04F4, _t04F0);
  int[] _t04F7 = prim $range01C3 (_t04F2, _t04F3);
  Femdata: MeshCell[] _t04F8 = {};
  foreach _t04F6 in _t04F7 {
    Femdata: MeshCell _t04F9 = loadFem(MeshCell, meshData04EE, _t04F6);
    _t04F8 = prim @0010<Femdata: MeshCell> (_t04F8, _t04F9);
  }
}
strand particle (vec3 pos00F06, real hh00F07) in 3D {
  output vec3 pos0F08;
  output vec3 _pos0F09;
  real hh0F0A;
  vec3 step0F0B;
  bool found0F0C;
  int nfs0F0D;
  int test0F0E;
  int testp0F0F;
  int steps0F10;
  {
    pos0F08 = pos00F06;
    _pos0F09 = pos0F08;
    hh0F0A = hh00F07;
    step0F0B = prim $zero01BB<$[3]> ();
    found0F0C = false;
    nfs0F0D = 0;
    test0F0E = 1;
    testp0F0F = 0;
    steps0F10 = 0;
  }
  update
  {
    int _t0F11 = 1;
    steps0F10 = prim +0015 (steps0F10, _t0F11);
    bool _t0F12;
    bool _t11CE;
    bool _t11CF;
    real _t11D0 = 0.e0;
    real _t11D1 = 0.e0;
    real _t11D2 = 0.e0;
    vec3 _t11D3 = [_t11D0, _t11D1, _t11D2];
    vec3 mid11D4 = prim -0026<$[3]> (pos0F08, _t11D3);
    bool _t11D5;
    real _t11D6 = mid11D4[0];
    real _t11D7 = prim |()|00B5<$[]> (_t11D6);
    real _t11D8 = 0.1e0;
    bool _t11D9 = prim >0080 (_t11D7, _t11D8);
    if _t11D9 {
      bool _t11DA;
      real _t11DB = mid11D4[1];
      real _t11DC = prim |()|00B5<$[]> (_t11DB);
      real _t11DD = 0.1e0;
      bool _t11DE = prim >0080 (_t11DC, _t11DD);
      if _t11DE {
        real _t11DF = mid11D4[2];
        real _t11E0 = prim |()|00B5<$[]> (_t11DF);
        real _t11E1 = 0.1e0;
        _t11DA = prim >0080 (_t11E0, _t11E1);
      } else {
        _t11DA = false;
      }
      _t11D5 = _t11DA;
    } else {
      _t11D5 = false;
    }
    bool z11E2 = _t11D5;
    bool _t11E3;
    real _t11E4 = prim |()|00B5<$[3]> (mid11D4);
    real _t11E5 = 0.5e1;
    bool _t11E6 = prim <007A (_t11E4, _t11E5);
    if _t11E6 {
      bool _t11E7;
      real _t11E8 = prim |()|00B5<$[3]> (mid11D4);
      real _t11E9 = 0.2e1;
      bool _t11EA = prim >0080 (_t11E8, _t11E9);
      if _t11EA {
        _t11E7 = z11E2;
      } else {
        _t11E7 = false;
      }
      _t11E3 = _t11E7;
    } else {
      _t11E3 = false;
    }
    _t11CF = _t11E3;
    if _t11CF {
      bool _t11EB;
      bool _t11EC;
      bool _t11ED;
      real _t11EE = pos0F08[0];
      real _t11EF = pos0F08[0];
      bool _t11F0 = prim ==0084 (_t11EE, _t11EF);
      bool _t11F1 = prim !00BC (_t11F0);
      if _t11F1 {
        _t11ED = true;
      } else {
        bool _t11F2;
        real _t11F3 = pos0F08[1];
        real _t11F4 = pos0F08[1];
        bool _t11F5 = prim ==0084 (_t11F3, _t11F4);
        bool _t11F6 = prim !00BC (_t11F5);
        if _t11F6 {
          _t11F2 = true;
        } else {
          real _t11F7 = pos0F08[2];
          real _t11F8 = pos0F08[2];
          bool _t11F9 = prim ==0084 (_t11F7, _t11F8);
          _t11F2 = prim !00BC (_t11F9);
        }
        _t11ED = _t11F2;
      }
      _t11EC = _t11ED;
      bool _t11FA = prim !00BC (_t11EC);
      if _t11FA {
        real _t11FB;
        vec3 g11FC;
        real x11FD = pos0F08[0];
        real y11FE = pos0F08[1];
        real z11FF = pos0F08[2];
        int _t1206 = 2;
        real _t1207 = prim ^0068 (y11FE, _t1206);
        real _t1208 = prim *0034 (_t1207, z11FF);
        real _t1209 = 0.2e1;
        real _t120A = prim *0034 (_t1209, x11FD);
        real _t120B = prim *0034 (_t120A, y11FE);
        real _t120C = prim *0034 (_t120B, z11FF);
        int _t120D = 2;
        real _t120E = prim ^0068 (y11FE, _t120D);
        real _t120F = prim *0034 (x11FD, _t120E);
        vec3 g1210 = [_t1208, _t120C, _t120F];
        g11FC = g1210;
        tensor[3,3] H1211;
        real x1212 = pos0F08[0];
        real y1213 = pos0F08[1];
        real z1214 = pos0F08[2];
        real _t121B = 0.e0;
        real _t121C = 0.2e1;
        real _t121D = prim *0034 (_t121C, y1213);
        real _t121E = prim *0034 (_t121D, z1214);
        int _t121F = 2;
        real _t1220 = prim ^0068 (y1213, _t121F);
        vec3 _t1221 = [_t121B, _t121E, _t1220];
        real _t1222 = 0.2e1;
        real _t1223 = prim *0034 (_t1222, y1213);
        real _t1224 = prim *0034 (_t1223, z1214);
        real _t1225 = 0.2e1;
        real _t1226 = prim *0034 (_t1225, x1212);
        real _t1227 = prim *0034 (_t1226, z1214);
        real _t1228 = 0.2e1;
        real _t1229 = prim *0034 (_t1228, x1212);
        real _t122A = prim *0034 (_t1229, y1213);
        vec3 _t122B = [_t1224, _t1227, _t122A];
        int _t122C = 2;
        real _t122D = prim ^0068 (y1213, _t122C);
        real _t122E = 0.2e1;
        real _t122F = prim *0034 (_t122E, x1212);
        real _t1230 = prim *0034 (_t122F, y1213);
        real _t1231 = 0.e0;
        vec3 _t1232 = [_t122D, _t1230, _t1231];
        tensor[3,3] hess1233 = [_t1221, _t122B, _t1232];
        H1211 = hess1233;
        real[3] _t1234 = prim evals009F (H1211);
        int _t1235 = 2;
        real _t1236 = prim $sub01C0<real; %3> (_t1234, _t1235);
        real _t1237 = prim unary -008B<$[]> (_t1236);
        real _t1238 = prim |()|00B5<$[3]> (g11FC);
        real _t1239 = prim +0017<$[]> (fBias0501, _t1238);
        real str123A = prim /0055 (_t1237, _t1239);
        _t11FB = str123A;
        _t11EB = prim >=007E (_t11FB, fStren0502);
      } else {
        _t11EB = false;
      }
      _t11CE = _t11EB;
    } else {
      _t11CE = false;
    }
    _t0F12 = _t11CE;
    bool _t0F13 = prim !00BC (_t0F12);
    if _t0F13 {
      die;
    }
    bool _t0F14 = prim !00BC (found0F0C);
    if _t0F14 {
      step0F0B = func fStep0E94 (pos0F08);
      pos0F08 = prim +0017<$[3]> (pos0F08, step0F0B);
      _pos0F09 = pos0F08;
      bool _t0F15;
      bool _t10AF;
      real _t10B0 = pos0F08[0];
      real _t10B1 = pos0F08[0];
      bool _t10B2 = prim ==0084 (_t10B0, _t10B1);
      bool _t10B3 = prim !00BC (_t10B2);
      if _t10B3 {
        _t10AF = true;
      } else {
        bool _t10B4;
        real _t10B5 = pos0F08[1];
        real _t10B6 = pos0F08[1];
        bool _t10B7 = prim ==0084 (_t10B5, _t10B6);
        bool _t10B8 = prim !00BC (_t10B7);
        if _t10B8 {
          _t10B4 = true;
        } else {
          real _t10B9 = pos0F08[2];
          real _t10BA = pos0F08[2];
          bool _t10BB = prim ==0084 (_t10B9, _t10BA);
          _t10B4 = prim !00BC (_t10BB);
        }
        _t10AF = _t10B4;
      }
      _t0F15 = _t10AF;
      if _t0F15 {
        die;
      }
      real _t0F16 = prim |()|00B5<$[3]> (step0F0B);
      real _t0F17 = prim /0055 (_t0F16, rad04FE);
      bool _t0F18 = prim >0080 (_t0F17, eps04FF);
      if _t0F18 {
        int _t0F19 = 1;
        nfs0F0D = prim +0015 (nfs0F0D, _t0F19);
        int _t0F1A = 10;
        bool _t0F1B = prim >007F (nfs0F0D, _t0F1A);
        if _t0F1B {
          die;
        }
      } else {
        found0F0C = true;
        testp0F0F = 1;
      }
    } else {
      vec3 _t0F1C = func fStep0E94 (pos0F08);
      pos0F08 = prim +0017<$[3]> (pos0F08, _t0F1C);
      _pos0F09 = pos0F08;
      bool _t0F1D;
      bool _t11C1;
      real _t11C2 = pos0F08[0];
      real _t11C3 = pos0F08[0];
      bool _t11C4 = prim ==0084 (_t11C2, _t11C3);
      bool _t11C5 = prim !00BC (_t11C4);
      if _t11C5 {
        _t11C1 = true;
      } else {
        bool _t11C6;
        real _t11C7 = pos0F08[1];
        real _t11C8 = pos0F08[1];
        bool _t11C9 = prim ==0084 (_t11C7, _t11C8);
        bool _t11CA = prim !00BC (_t11C9);
        if _t11CA {
          _t11C6 = true;
        } else {
          real _t11CB = pos0F08[2];
          real _t11CC = pos0F08[2];
          bool _t11CD = prim ==0084 (_t11CB, _t11CC);
          _t11C6 = prim !00BC (_t11CD);
        }
        _t11C1 = _t11C6;
      }
      _t0F1D = _t11C1;
      if _t0F1D {
        die;
      }
      step0F0B = prim $zero01BB<$[3]> ();
      real oldE0F1E = 0.e0;
      vec3 force0F1F = prim $zero01BB<$[3]> ();
      int nn0F20 = 0;
      particle[] _t0F21 = prim sphere0198<particle> (_pos0F09, rad04FE);
      foreach P0F22 in _t0F21 {
        vec3 _t0F23 = P0F22.pos0F08;
        vec3 _t0F24 = prim -0026<$[3]> (_t0F23, pos0F08);
        real _t0F25;
        real _t11BA = prim |()|00B5<$[3]> (_t0F24);
        real _t11BB = prim /0055 (_t11BA, rad04FE);
        real _t11BC;
        real _t11BD = 0.1e1;
        real _t11BE = prim -0026<$[]> (_t11BD, _t11BB);
        int _t11BF = 4;
        real _t11C0 = prim ^0068 (_t11BE, _t11BF);
        _t11BC = _t11C0;
        _t0F25 = _t11BC;
        oldE0F1E = prim +0017<$[]> (oldE0F1E, _t0F25);
        vec3 _t0F26 = P0F22.pos0F08;
        vec3 _t0F27 = prim -0026<$[3]> (_t0F26, pos0F08);
        vec3 _t0F28;
        real _t11AA = prim |()|00B5<$[3]> (_t0F27);
        real _t11AB = prim /0055 (_t11AA, rad04FE);
        real _t11AC;
        int _t11AD = -4;
        real _t11AE = (real)_t11AD;
        real _t11AF = 0.1e1;
        real _t11B0 = prim -0026<$[]> (_t11AF, _t11AB);
        int _t11B1 = 3;
        real _t11B2 = prim ^0068 (_t11B0, _t11B1);
        real _t11B3 = prim *0034 (_t11AE, _t11B2);
        _t11AC = _t11B3;
        real _t11B4 = 0.1e1;
        real _t11B5 = prim /0055 (_t11B4, rad04FE);
        real _t11B6 = prim *0034 (_t11AC, _t11B5);
        vec3 _t11B7 = prim *0036<$[3]> (_t11B6, _t0F27);
        real _t11B8 = prim |()|00B5<$[3]> (_t0F27);
        vec3 _t11B9 = prim /0057<$[3]> (_t11B7, _t11B8);
        _t0F28 = _t11B9;
        force0F1F = prim +0017<$[3]> (force0F1F, _t0F28);
        int _t0F29 = 1;
        nn0F20 = prim +0015 (nn0F20, _t0F29);
      }
      int _t0F2A = 0;
      bool _t0F2B = prim ==0082 (_t0F2A, nn0F20);
      if _t0F2B {
        real _t0F2C = 0.5e0;
        real _t0F2D = prim *0034 (_t0F2C, rad04FE);
        real _t0F2E = 0.e0;
        real _t0F2F = 0.e0;
        vec3 _t0F30 = [_t0F2D, _t0F2E, _t0F2F];
        vec3 npos0F31 = prim +0017<$[3]> (pos0F08, _t0F30);
        bool _t0F32;
        bool _t113D;
        bool _t113E;
        real _t113F = 0.e0;
        real _t1140 = 0.e0;
        real _t1141 = 0.e0;
        vec3 _t1142 = [_t113F, _t1140, _t1141];
        vec3 mid1143 = prim -0026<$[3]> (npos0F31, _t1142);
        bool _t1144;
        real _t1145 = mid1143[0];
        real _t1146 = prim |()|00B5<$[]> (_t1145);
        real _t1147 = 0.1e0;
        bool _t1148 = prim >0080 (_t1146, _t1147);
        if _t1148 {
          bool _t1149;
          real _t114A = mid1143[1];
          real _t114B = prim |()|00B5<$[]> (_t114A);
          real _t114C = 0.1e0;
          bool _t114D = prim >0080 (_t114B, _t114C);
          if _t114D {
            real _t114E = mid1143[2];
            real _t114F = prim |()|00B5<$[]> (_t114E);
            real _t1150 = 0.1e0;
            _t1149 = prim >0080 (_t114F, _t1150);
          } else {
            _t1149 = false;
          }
          _t1144 = _t1149;
        } else {
          _t1144 = false;
        }
        bool z1151 = _t1144;
        bool _t1152;
        real _t1153 = prim |()|00B5<$[3]> (mid1143);
        real _t1154 = 0.5e1;
        bool _t1155 = prim <007A (_t1153, _t1154);
        if _t1155 {
          bool _t1156;
          real _t1157 = prim |()|00B5<$[3]> (mid1143);
          real _t1158 = 0.2e1;
          bool _t1159 = prim >0080 (_t1157, _t1158);
          if _t1159 {
            _t1156 = z1151;
          } else {
            _t1156 = false;
          }
          _t1152 = _t1156;
        } else {
          _t1152 = false;
        }
        _t113E = _t1152;
        if _t113E {
          bool _t115A;
          bool _t115B;
          bool _t115C;
          real _t115D = npos0F31[0];
          real _t115E = npos0F31[0];
          bool _t115F = prim ==0084 (_t115D, _t115E);
          bool _t1160 = prim !00BC (_t115F);
          if _t1160 {
            _t115C = true;
          } else {
            bool _t1161;
            real _t1162 = npos0F31[1];
            real _t1163 = npos0F31[1];
            bool _t1164 = prim ==0084 (_t1162, _t1163);
            bool _t1165 = prim !00BC (_t1164);
            if _t1165 {
              _t1161 = true;
            } else {
              real _t1166 = npos0F31[2];
              real _t1167 = npos0F31[2];
              bool _t1168 = prim ==0084 (_t1166, _t1167);
              _t1161 = prim !00BC (_t1168);
            }
            _t115C = _t1161;
          }
          _t115B = _t115C;
          bool _t1169 = prim !00BC (_t115B);
          if _t1169 {
            real _t116A;
            vec3 g116B;
            real x116C = npos0F31[0];
            real y116D = npos0F31[1];
            real z116E = npos0F31[2];
            int _t1175 = 2;
            real _t1176 = prim ^0068 (y116D, _t1175);
            real _t1177 = prim *0034 (_t1176, z116E);
            real _t1178 = 0.2e1;
            real _t1179 = prim *0034 (_t1178, x116C);
            real _t117A = prim *0034 (_t1179, y116D);
            real _t117B = prim *0034 (_t117A, z116E);
            int _t117C = 2;
            real _t117D = prim ^0068 (y116D, _t117C);
            real _t117E = prim *0034 (x116C, _t117D);
            vec3 g117F = [_t1177, _t117B, _t117E];
            g116B = g117F;
            tensor[3,3] H1180;
            real x1181 = npos0F31[0];
            real y1182 = npos0F31[1];
            real z1183 = npos0F31[2];
            real _t118A = 0.e0;
            real _t118B = 0.2e1;
            real _t118C = prim *0034 (_t118B, y1182);
            real _t118D = prim *0034 (_t118C, z1183);
            int _t118E = 2;
            real _t118F = prim ^0068 (y1182, _t118E);
            vec3 _t1190 = [_t118A, _t118D, _t118F];
            real _t1191 = 0.2e1;
            real _t1192 = prim *0034 (_t1191, y1182);
            real _t1193 = prim *0034 (_t1192, z1183);
            real _t1194 = 0.2e1;
            real _t1195 = prim *0034 (_t1194, x1181);
            real _t1196 = prim *0034 (_t1195, z1183);
            real _t1197 = 0.2e1;
            real _t1198 = prim *0034 (_t1197, x1181);
            real _t1199 = prim *0034 (_t1198, y1182);
            vec3 _t119A = [_t1193, _t1196, _t1199];
            int _t119B = 2;
            real _t119C = prim ^0068 (y1182, _t119B);
            real _t119D = 0.2e1;
            real _t119E = prim *0034 (_t119D, x1181);
            real _t119F = prim *0034 (_t119E, y1182);
            real _t11A0 = 0.e0;
            vec3 _t11A1 = [_t119C, _t119F, _t11A0];
            tensor[3,3] hess11A2 = [_t1190, _t119A, _t11A1];
            H1180 = hess11A2;
            real[3] _t11A3 = prim evals009F (H1180);
            int _t11A4 = 2;
            real _t11A5 = prim $sub01C0<real; %3> (_t11A3, _t11A4);
            real _t11A6 = prim unary -008B<$[]> (_t11A5);
            real _t11A7 = prim |()|00B5<$[3]> (g116B);
            real _t11A8 = prim +0017<$[]> (fBias0501, _t11A7);
            real str11A9 = prim /0055 (_t11A6, _t11A8);
            _t116A = str11A9;
            _t115A = prim >=007E (_t116A, fStren0502);
          } else {
            _t115A = false;
          }
          _t113D = _t115A;
        } else {
          _t113D = false;
        }
        _t0F32 = _t113D;
        if _t0F32 {
          new particle (npos0F31, hh0F0A);
        }
        continue;
      }
      tensor[3,3] _t0F33 = func fPerp0EC6 (pos0F08);
      force0F1F = prim •00CE<$[3,3]; $[3]; $[3]> (_t0F33, force0F1F);
      vec3 es0F34 = prim *0036<$[3]> (hh0F0A, force0F1F);
      real _t0F35 = prim |()|00B5<$[3]> (es0F34);
      bool _t0F36 = prim >0080 (_t0F35, rad04FE);
      if _t0F36 {
        real _t0F37 = prim |()|00B5<$[3]> (es0F34);
        real _t0F38 = prim /0055 (rad04FE, _t0F37);
        hh0F0A = prim *0034 (hh0F0A, _t0F38);
        real _t0F39 = prim |()|00B5<$[3]> (es0F34);
        real _t0F3A = prim /0055 (rad04FE, _t0F39);
        es0F34 = prim *0038<$[3]> (es0F34, _t0F3A);
      }
      vec3 samplePos0F3B = prim +0017<$[3]> (pos0F08, es0F34);
      vec3 fs0F3C = func fStep0E94 (samplePos0F3B);
      real _t0F3D = prim |()|00B5<$[3]> (fs0F3C);
      real _t0F3E = prim |()|00B5<$[3]> (es0F34);
      real _t0F3F = prim /0055 (_t0F3D, _t0F3E);
      real _t0F40 = 0.5e0;
      bool _t0F41 = prim >0080 (_t0F3F, _t0F40);
      if _t0F41 {
        real _t0F42 = 0.5e0;
        hh0F0A = prim *0034 (hh0F0A, _t0F42);
        continue;
      }
      vec3 oldPos0F43 = pos0F08;
      vec3 up0F44 = prim +0017<$[3]> (fs0F3C, es0F34);
      pos0F08 = prim +0017<$[3]> (pos0F08, up0F44);
      _pos0F09 = pos0F08;
      particle[] _t0F45 = prim sphere0198<particle> (_pos0F09, rad04FE);
      real accum0F4A = 0.e0;
      foreach P0F46 in _t0F45 {
        vec3 _t0F47 = P0F46.pos0F08;
        vec3 _t0F48 = prim -0026<$[3]> (pos0F08, _t0F47);
        real _t0F49;
        real _t1136 = prim |()|00B5<$[3]> (_t0F48);
        real _t1137 = prim /0055 (_t1136, rad04FE);
        real _t1138;
        real _t1139 = 0.1e1;
        real _t113A = prim -0026<$[]> (_t1139, _t1137);
        int _t113B = 4;
        real _t113C = prim ^0068 (_t113A, _t113B);
        _t1138 = _t113C;
        _t0F49 = _t1138;
        accum0F4A = prim +0017<$[]> (accum0F4A, _t0F49);
      }
      real newE0F4B = accum0F4A;
      real _t0F4C = prim -0026<$[]> (newE0F4B, oldE0F1E);
      real _t0F4D = 0.5e0;
      vec3 _t0F4E = prim -0026<$[3]> (pos0F08, oldPos0F43);
      vec3 _t0F4F = prim *0036<$[3]> (_t0F4D, _t0F4E);
      vec3 _t0F50 = prim unary -008B<$[3]> (force0F1F);
      real _t0F51 = prim •00CE<$[3]; $[3]; $[]> (_t0F4F, _t0F50);
      bool _t0F52 = prim >0080 (_t0F4C, _t0F51);
      if _t0F52 {
        pos0F08 = oldPos0F43;
        _pos0F09 = pos0F08;
        real _t0F53 = 0.5e0;
        hh0F0A = prim *0034 (hh0F0A, _t0F53);
        continue;
      }
      real _t0F54 = 0.11e1;
      hh0F0A = prim *0034 (hh0F0A, _t0F54);
      step0F0B = up0F44;
      bool _t0F55;
      bool _t1129;
      real _t112A = pos0F08[0];
      real _t112B = pos0F08[0];
      bool _t112C = prim ==0084 (_t112A, _t112B);
      bool _t112D = prim !00BC (_t112C);
      if _t112D {
        _t1129 = true;
      } else {
        bool _t112E;
        real _t112F = pos0F08[1];
        real _t1130 = pos0F08[1];
        bool _t1131 = prim ==0084 (_t112F, _t1130);
        bool _t1132 = prim !00BC (_t1131);
        if _t1132 {
          _t112E = true;
        } else {
          real _t1133 = pos0F08[2];
          real _t1134 = pos0F08[2];
          bool _t1135 = prim ==0084 (_t1133, _t1134);
          _t112E = prim !00BC (_t1135);
        }
        _t1129 = _t112E;
      }
      _t0F55 = _t1129;
      if _t0F55 {
        die;
      }
      int _t0F56 = 5;
      bool _t0F57 = prim <0079 (nn0F20, _t0F56);
      if _t0F57 {
        real _t0F58 = 0.5e0;
        real _t0F59 = prim *0034 (_t0F58, rad04FE);
        vec3 _t0F5A = prim normalize0137<$[3]> (es0F34);
        vec3 _t0F5B = prim *0036<$[3]> (_t0F59, _t0F5A);
        vec3 npos0F5C = prim +0017<$[3]> (pos0F08, _t0F5B);
        bool _t0F5D;
        bool _t10BC;
        bool _t10BD;
        real _t10BE = 0.e0;
        real _t10BF = 0.e0;
        real _t10C0 = 0.e0;
        vec3 _t10C1 = [_t10BE, _t10BF, _t10C0];
        vec3 mid10C2 = prim -0026<$[3]> (npos0F5C, _t10C1);
        bool _t10C3;
        real _t10C4 = mid10C2[0];
        real _t10C5 = prim |()|00B5<$[]> (_t10C4);
        real _t10C6 = 0.1e0;
        bool _t10C7 = prim >0080 (_t10C5, _t10C6);
        if _t10C7 {
          bool _t10C8;
          real _t10C9 = mid10C2[1];
          real _t10CA = prim |()|00B5<$[]> (_t10C9);
          real _t10CB = 0.1e0;
          bool _t10CC = prim >0080 (_t10CA, _t10CB);
          if _t10CC {
            real _t10CD = mid10C2[2];
            real _t10CE = prim |()|00B5<$[]> (_t10CD);
            real _t10CF = 0.1e0;
            _t10C8 = prim >0080 (_t10CE, _t10CF);
          } else {
            _t10C8 = false;
          }
          _t10C3 = _t10C8;
        } else {
          _t10C3 = false;
        }
        bool z10D0 = _t10C3;
        bool _t10D1;
        real _t10D2 = prim |()|00B5<$[3]> (mid10C2);
        real _t10D3 = 0.5e1;
        bool _t10D4 = prim <007A (_t10D2, _t10D3);
        if _t10D4 {
          bool _t10D5;
          real _t10D6 = prim |()|00B5<$[3]> (mid10C2);
          real _t10D7 = 0.2e1;
          bool _t10D8 = prim >0080 (_t10D6, _t10D7);
          if _t10D8 {
            _t10D5 = z10D0;
          } else {
            _t10D5 = false;
          }
          _t10D1 = _t10D5;
        } else {
          _t10D1 = false;
        }
        _t10BD = _t10D1;
        if _t10BD {
          bool _t10D9;
          bool _t10DA;
          bool _t10DB;
          real _t10DC = npos0F5C[0];
          real _t10DD = npos0F5C[0];
          bool _t10DE = prim ==0084 (_t10DC, _t10DD);
          bool _t10DF = prim !00BC (_t10DE);
          if _t10DF {
            _t10DB = true;
          } else {
            bool _t10E0;
            real _t10E1 = npos0F5C[1];
            real _t10E2 = npos0F5C[1];
            bool _t10E3 = prim ==0084 (_t10E1, _t10E2);
            bool _t10E4 = prim !00BC (_t10E3);
            if _t10E4 {
              _t10E0 = true;
            } else {
              real _t10E5 = npos0F5C[2];
              real _t10E6 = npos0F5C[2];
              bool _t10E7 = prim ==0084 (_t10E5, _t10E6);
              _t10E0 = prim !00BC (_t10E7);
            }
            _t10DB = _t10E0;
          }
          _t10DA = _t10DB;
          bool _t10E8 = prim !00BC (_t10DA);
          if _t10E8 {
            real _t10E9;
            vec3 g10EA;
            real x10EB = npos0F5C[0];
            real y10EC = npos0F5C[1];
            real z10ED = npos0F5C[2];
            int _t10F4 = 2;
            real _t10F5 = prim ^0068 (y10EC, _t10F4);
            real _t10F6 = prim *0034 (_t10F5, z10ED);
            real _t10F7 = 0.2e1;
            real _t10F8 = prim *0034 (_t10F7, x10EB);
            real _t10F9 = prim *0034 (_t10F8, y10EC);
            real _t10FA = prim *0034 (_t10F9, z10ED);
            int _t10FB = 2;
            real _t10FC = prim ^0068 (y10EC, _t10FB);
            real _t10FD = prim *0034 (x10EB, _t10FC);
            vec3 g10FE = [_t10F6, _t10FA, _t10FD];
            g10EA = g10FE;
            tensor[3,3] H10FF;
            real x1100 = npos0F5C[0];
            real y1101 = npos0F5C[1];
            real z1102 = npos0F5C[2];
            real _t1109 = 0.e0;
            real _t110A = 0.2e1;
            real _t110B = prim *0034 (_t110A, y1101);
            real _t110C = prim *0034 (_t110B, z1102);
            int _t110D = 2;
            real _t110E = prim ^0068 (y1101, _t110D);
            vec3 _t110F = [_t1109, _t110C, _t110E];
            real _t1110 = 0.2e1;
            real _t1111 = prim *0034 (_t1110, y1101);
            real _t1112 = prim *0034 (_t1111, z1102);
            real _t1113 = 0.2e1;
            real _t1114 = prim *0034 (_t1113, x1100);
            real _t1115 = prim *0034 (_t1114, z1102);
            real _t1116 = 0.2e1;
            real _t1117 = prim *0034 (_t1116, x1100);
            real _t1118 = prim *0034 (_t1117, y1101);
            vec3 _t1119 = [_t1112, _t1115, _t1118];
            int _t111A = 2;
            real _t111B = prim ^0068 (y1101, _t111A);
            real _t111C = 0.2e1;
            real _t111D = prim *0034 (_t111C, x1100);
            real _t111E = prim *0034 (_t111D, y1101);
            real _t111F = 0.e0;
            vec3 _t1120 = [_t111B, _t111E, _t111F];
            tensor[3,3] hess1121 = [_t110F, _t1119, _t1120];
            H10FF = hess1121;
            real[3] _t1122 = prim evals009F (H10FF);
            int _t1123 = 2;
            real _t1124 = prim $sub01C0<real; %3> (_t1122, _t1123);
            real _t1125 = prim unary -008B<$[]> (_t1124);
            real _t1126 = prim |()|00B5<$[3]> (g10EA);
            real _t1127 = prim +0017<$[]> (fBias0501, _t1126);
            real str1128 = prim /0055 (_t1125, _t1127);
            _t10E9 = str1128;
            _t10D9 = prim >=007E (_t10E9, fStren0502);
          } else {
            _t10D9 = false;
          }
          _t10BC = _t10D9;
        } else {
          _t10BC = false;
        }
        _t0F5D = _t10BC;
        if _t0F5D {
          new particle (npos0F5C, hh0F0A);
        }
      }
    }
  }
}
collection {
  foreach x0F5E in ipos0504 {
    real _t0F5F = 0.1e1;
    new particle (x0F5E, _t0F5F);
  }
}
update {
  int res0F60= sum<int> { (P0F63) => {
      int _t0F64 = P0F63.test0F0E;
      return _t0F64;
    } (P0F61, P0F61)
  | P0F61 in all };
  int num0F66 = res0F60;
  int res0F67= max<int> { (P0F6A) => {
      int _t0F6B = P0F6A.steps0F10;
      return _t0F6B;
    } (P0F68, P0F68)
  | P0F68 in all };
  int steps0F6D = res0F67;
  int res0F6E= sum<int> { (P0F71) => {
      int _t0F72 = P0F71.testp0F0F;
      return _t0F72;
    } (P0F6F, P0F6F)
  | P0F6F in all };
  int numFound0F74 = res0F6E;
  bool res0F75= all { (P0F78) => {
      bool _t0F79 = P0F78.found0F0C;
      return _t0F79;
    } (P0F76, P0F76)
  | P0F76 in all };
  bool allFound0F7B = res0F75;
  real res0F7C= max<real> { (P0F80) => {
      vec3 _t0F81 = P0F80.step0F0B;
      real _t0F82 = prim |()|00B5<$[3]> (_t0F81);
      return _t0F82;
    } (P0F7D, P0F7D)
  | P0F7D in all };
  real maxStep0F84 = res0F7C;
  string _t0F85 = "One run:";
  string _t0F86 = " and ";
  real _t0F87 = prim /0055 (maxStep0F84, rad04FE);
  string _t0F88 = " and ";
  real _t0F89 = prim /0055 (maxStep0F84, rad04FE);
  bool _t0F8A = prim <007A (_t0F89, eps04FF);
  string _t0F8B = " and ";
  string _t0F8C = " of ";
  string _t0F8D = "\n";
  print (_t0F85, allFound0F7B, _t0F86, _t0F87, _t0F88, _t0F8A, _t0F8B, numFound0F74, _t0F8C, num0F66, _t0F8D);
  if allFound0F7B {
    real _t0F8E = prim /0055 (maxStep0F84, rad04FE);
    bool _t0F8F = prim <007A (_t0F8E, eps04FF);
    if _t0F8F {
      string _t0F90 = "CONVERGED!\n";
      print (_t0F90);
      stabilize_all;
    }
  }
  int _t0F91 = 2000;
  bool _t0F92 = prim >007F (steps0F6D, _t0F91);
  if _t0F92 {
    stabilize_all;
  }
  string _t0F93 = "Current steps:";
  string _t0F94 = "\n";
  print (_t0F93, steps0F6D, _t0F94);
}
/* Program end */
/* Simplified Program (after after simplify fields) start */
properties: GlobalInit,StabilizeAll,GlobalReduce,StrandSets,GlobalUpdate,NewStrands,StrandCommunication,StrandsMayDie,HasInputs,HasGlobals,ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
input FemData:Mesh meshData04EE;
input FemData:Space 0space04FA_intermedateGlobal04FB;
input FemData:FemFunc 0data04FC_intermedateGlobal04FD;
input real rad04FE = <default>;
input real eps04FF = <default>;
input real v00500 = <default>;
input real fBias0501 = <default>;
input real fStren0502 = <default>;
input real zfuz0503 = <default>;
input vec3[] ipos0504;
constants {
  rad04FE = 0.1e-1;
  eps04FF = 0.1e-1;
  v00500 = 0.625e-1;
  fBias0501 = 0.1e-1;
  fStren0502 = 0.1e-1;
  zfuz0503 = 0.1e-1;
}
function int[2]#6 nextCell405D9 (int faceIdx0A38, int cell0A39, Femdata: Mesh mesh0A3A)
{
  int _t0A3B = -1;
  bool _t0A3C = prim ==0082 (faceIdx0A38, _t0A3B);
  if _t0A3C {
    int _t0A3D = -1;
    int _t0A3E = -1;
    int[2] _t0A3F = {_t0A3D, _t0A3E};
    return _t0A3F;
  } else {
    int _t0A40 = 8;
    int _t0A41 = prim *0033 (cell0A39, _t0A40);
    int _t0A42 = 2;
    int _t0A43 = prim *0033 (faceIdx0A38, _t0A42);
    int _t0A44 = prim +0015 (_t0A41, _t0A43);
    int[2] _t0A45 = extractFemItemN((mesh0A3A, _t0A44),CellFaceCell(Mesh),);
    return _t0A45;
  }
}
function vec3#3 fStep0E94 (vec3 s0E95)
{
  vec3 g0E96;
  real x0FBB = s0E95[0];
  real y0FBC = s0E95[1];
  real z0FBD = s0E95[2];
  real _t0FBE = prim *0034 (x0FBB, x0FBB);
  real _t0FBF = prim *0034 (y0FBC, y0FBC);
  real _t0FC0 = prim +0017<$[]> (_t0FBE, _t0FBF);
  real _t0FC1 = prim *0034 (z0FBD, z0FBD);
  real _t0FC2 = prim +0017<$[]> (_t0FC0, _t0FC1);
  real p0FC3 = prim unary -008B<$[]> (_t0FC2);
  int _t0FC4 = 2;
  real _t0FC5 = prim ^0068 (y0FBC, _t0FC4);
  real _t0FC6 = prim *0034 (_t0FC5, z0FBD);
  real _t0FC7 = 0.2e1;
  real _t0FC8 = prim *0034 (_t0FC7, x0FBB);
  real _t0FC9 = prim *0034 (_t0FC8, y0FBC);
  real _t0FCA = prim *0034 (_t0FC9, z0FBD);
  int _t0FCB = 2;
  real _t0FCC = prim ^0068 (y0FBC, _t0FCB);
  real _t0FCD = prim *0034 (x0FBB, _t0FCC);
  vec3 g0FCE = [_t0FC6, _t0FCA, _t0FCD];
  g0E96 = g0FCE;
  tensor[3,3] H0E97;
  real x0F99 = s0E95[0];
  real y0F9A = s0E95[1];
  real z0F9B = s0E95[2];
  real _t0F9C = prim *0034 (x0F99, x0F99);
  real _t0F9D = prim *0034 (y0F9A, y0F9A);
  real _t0F9E = prim +0017<$[]> (_t0F9C, _t0F9D);
  real _t0F9F = prim *0034 (z0F9B, z0F9B);
  real _t0FA0 = prim +0017<$[]> (_t0F9E, _t0F9F);
  real p0FA1 = prim unary -008B<$[]> (_t0FA0);
  real _t0FA2 = 0.e0;
  real _t0FA3 = 0.2e1;
  real _t0FA4 = prim *0034 (_t0FA3, y0F9A);
  real _t0FA5 = prim *0034 (_t0FA4, z0F9B);
  int _t0FA6 = 2;
  real _t0FA7 = prim ^0068 (y0F9A, _t0FA6);
  vec3 _t0FA8 = [_t0FA2, _t0FA5, _t0FA7];
  real _t0FA9 = 0.2e1;
  real _t0FAA = prim *0034 (_t0FA9, y0F9A);
  real _t0FAB = prim *0034 (_t0FAA, z0F9B);
  real _t0FAC = 0.2e1;
  real _t0FAD = prim *0034 (_t0FAC, x0F99);
  real _t0FAE = prim *0034 (_t0FAD, z0F9B);
  real _t0FAF = 0.2e1;
  real _t0FB0 = prim *0034 (_t0FAF, x0F99);
  real _t0FB1 = prim *0034 (_t0FB0, y0F9A);
  vec3 _t0FB2 = [_t0FAB, _t0FAE, _t0FB1];
  int _t0FB3 = 2;
  real _t0FB4 = prim ^0068 (y0F9A, _t0FB3);
  real _t0FB5 = 0.2e1;
  real _t0FB6 = prim *0034 (_t0FB5, x0F99);
  real _t0FB7 = prim *0034 (_t0FB6, y0F9A);
  real _t0FB8 = 0.e0;
  vec3 _t0FB9 = [_t0FB4, _t0FB7, _t0FB8];
  tensor[3,3] hess0FBA = [_t0FA8, _t0FB2, _t0FB9];
  H0E97 = hess0FBA;
  vec3[3] E0E98 = prim evecs00A0 (H0E97);
  real[3] L0E99 = prim evals009F (H0E97);
  real _t0E9A = 0.1e1;
  int _t0E9B = 2;
  real _t0E9C = prim $sub01C0<real; %3> (L0E99, _t0E9B);
  real _t0E9D = prim /0055 (_t0E9A, _t0E9C);
  real _t0E9E = prim unary -008B<$[]> (_t0E9D);
  int _t0E9F = 2;
  vec3 _t0EA0 = prim $sub01C0<vec3; %3> (E0E98, _t0E9F);
  vec3 _t0EA1 = prim *0036<$[3]> (_t0E9E, _t0EA0);
  int _t0EA2 = 2;
  vec3 _t0EA3 = prim $sub01C0<vec3; %3> (E0E98, _t0EA2);
  tensor[3,3] _t0EA4 = prim ⊗00E5<$[3]; $[3]; $[3,3]> (_t0EA1, _t0EA3);
  vec3 up0EA5 = prim •00CE<$[3,3]; $[3]; $[3]> (_t0EA4, g0E96);
  bool _t0EA6;
  real _t0EA7 = up0EA5[0];
  real _t0EA8 = up0EA5[0];
  bool _t0EA9 = prim ==0084 (_t0EA7, _t0EA8);
  bool _t0EAA = prim !00BC (_t0EA9);
  if _t0EAA {
    _t0EA6 = true;
  } else {
    bool _t0EAB;
    real _t0EAC = up0EA5[1];
    real _t0EAD = up0EA5[1];
    bool _t0EAE = prim ==0084 (_t0EAC, _t0EAD);
    bool _t0EAF = prim !00BC (_t0EAE);
    if _t0EAF {
      _t0EAB = true;
    } else {
      real _t0EB0 = up0EA5[2];
      real _t0EB1 = up0EA5[2];
      bool _t0EB2 = prim ==0084 (_t0EB0, _t0EB1);
      _t0EAB = prim !00BC (_t0EB2);
    }
    _t0EA6 = _t0EAB;
  }
  if _t0EA6 {
    real _t0EB3 = +inf;
    real _t0EB4 = +inf;
    real _t0EB5 = +inf;
    vec3 _t0EB6 = [_t0EB3, _t0EB4, _t0EB5];
    return _t0EB6;
  }
  return up0EA5;
}
function tensor[3,3]#1 fPerp0EC6 (vec3 s0EC7)
{
  vec3 g0EC8;
  real x0FF1 = s0EC7[0];
  real y0FF2 = s0EC7[1];
  real z0FF3 = s0EC7[2];
  real _t0FF4 = prim *0034 (x0FF1, x0FF1);
  real _t0FF5 = prim *0034 (y0FF2, y0FF2);
  real _t0FF6 = prim +0017<$[]> (_t0FF4, _t0FF5);
  real _t0FF7 = prim *0034 (z0FF3, z0FF3);
  real _t0FF8 = prim +0017<$[]> (_t0FF6, _t0FF7);
  real p0FF9 = prim unary -008B<$[]> (_t0FF8);
  int _t0FFA = 2;
  real _t0FFB = prim ^0068 (y0FF2, _t0FFA);
  real _t0FFC = prim *0034 (_t0FFB, z0FF3);
  real _t0FFD = 0.2e1;
  real _t0FFE = prim *0034 (_t0FFD, x0FF1);
  real _t0FFF = prim *0034 (_t0FFE, y0FF2);
  real _t1000 = prim *0034 (_t0FFF, z0FF3);
  int _t1001 = 2;
  real _t1002 = prim ^0068 (y0FF2, _t1001);
  real _t1003 = prim *0034 (x0FF1, _t1002);
  vec3 g1004 = [_t0FFC, _t1000, _t1003];
  g0EC8 = g1004;
  tensor[3,3] H0EC9;
  real x0FCF = s0EC7[0];
  real y0FD0 = s0EC7[1];
  real z0FD1 = s0EC7[2];
  real _t0FD2 = prim *0034 (x0FCF, x0FCF);
  real _t0FD3 = prim *0034 (y0FD0, y0FD0);
  real _t0FD4 = prim +0017<$[]> (_t0FD2, _t0FD3);
  real _t0FD5 = prim *0034 (z0FD1, z0FD1);
  real _t0FD6 = prim +0017<$[]> (_t0FD4, _t0FD5);
  real p0FD7 = prim unary -008B<$[]> (_t0FD6);
  real _t0FD8 = 0.e0;
  real _t0FD9 = 0.2e1;
  real _t0FDA = prim *0034 (_t0FD9, y0FD0);
  real _t0FDB = prim *0034 (_t0FDA, z0FD1);
  int _t0FDC = 2;
  real _t0FDD = prim ^0068 (y0FD0, _t0FDC);
  vec3 _t0FDE = [_t0FD8, _t0FDB, _t0FDD];
  real _t0FDF = 0.2e1;
  real _t0FE0 = prim *0034 (_t0FDF, y0FD0);
  real _t0FE1 = prim *0034 (_t0FE0, z0FD1);
  real _t0FE2 = 0.2e1;
  real _t0FE3 = prim *0034 (_t0FE2, x0FCF);
  real _t0FE4 = prim *0034 (_t0FE3, z0FD1);
  real _t0FE5 = 0.2e1;
  real _t0FE6 = prim *0034 (_t0FE5, x0FCF);
  real _t0FE7 = prim *0034 (_t0FE6, y0FD0);
  vec3 _t0FE8 = [_t0FE1, _t0FE4, _t0FE7];
  int _t0FE9 = 2;
  real _t0FEA = prim ^0068 (y0FD0, _t0FE9);
  real _t0FEB = 0.2e1;
  real _t0FEC = prim *0034 (_t0FEB, x0FCF);
  real _t0FED = prim *0034 (_t0FEC, y0FD0);
  real _t0FEE = 0.e0;
  vec3 _t0FEF = [_t0FEA, _t0FED, _t0FEE];
  tensor[3,3] hess0FF0 = [_t0FDE, _t0FE8, _t0FEF];
  H0EC9 = hess0FF0;
  vec3[3] _t0ECA = prim evecs00A0 (H0EC9);
  int _t0ECB = 2;
  vec3 E20ECC = prim $sub01C0<vec3; %3> (_t0ECA, _t0ECB);
  tensor[3,3] _t0ECD = prim $id01B9<%3> ();
  tensor[3,3] _t0ECE = prim ⊗00E5<$[3]; $[3]; $[3,3]> (E20ECC, E20ECC);
  tensor[3,3] m0ECF = prim -0026<$[3,3]> (_t0ECD, _t0ECE);
  real t0ED0 = prim :00FC<$[3,3]; $[3,3]; $[]> (m0ECF, m0ECF);
  bool _t0ED1 = prim ==0084 (t0ED0, t0ED0);
  bool _t0ED2 = prim !00BC (_t0ED1);
  if _t0ED2 {
    tensor[3,3] _t0ED3 = prim $zero01BB<$[3,3]> ();
    return _t0ED3;
  }
  return m0ECF;
}
globalInit {
  int _t04F2 = 0;
  int _t04F0 = 1;
  int _t04F4 = extractFemItem(NumCell(Mesh), int, meshData04EE);
  int _t04F3 = prim -0024 (_t04F4, _t04F0);
  int[] _t04F7 = prim $range01C3 (_t04F2, _t04F3);
  Femdata: MeshCell[] _t04F8 = {};
  foreach _t04F6 in _t04F7 {
    Femdata: MeshCell _t04F9 = loadFem(MeshCell, meshData04EE, _t04F6);
    _t04F8 = prim @0010<Femdata: MeshCell> (_t04F8, _t04F9);
  }
}
strand particle (vec3 pos00F06, real hh00F07) in 3D {
  output vec3 pos0F08;
  output vec3 _pos0F09;
  real hh0F0A;
  vec3 step0F0B;
  bool found0F0C;
  int nfs0F0D;
  int test0F0E;
  int testp0F0F;
  int steps0F10;
  {
    pos0F08 = pos00F06;
    _pos0F09 = pos0F08;
    hh0F0A = hh00F07;
    step0F0B = prim $zero01BB<$[3]> ();
    found0F0C = false;
    nfs0F0D = 0;
    test0F0E = 1;
    testp0F0F = 0;
    steps0F10 = 0;
  }
  update
  {
    int _t0F11 = 1;
    steps0F10 = prim +0015 (steps0F10, _t0F11);
    bool _t0F12;
    bool _t11CE;
    bool _t11CF;
    real _t11D0 = 0.e0;
    real _t11D1 = 0.e0;
    real _t11D2 = 0.e0;
    vec3 _t11D3 = [_t11D0, _t11D1, _t11D2];
    vec3 mid11D4 = prim -0026<$[3]> (pos0F08, _t11D3);
    bool _t11D5;
    real _t11D6 = mid11D4[0];
    real _t11D7 = prim |()|00B5<$[]> (_t11D6);
    real _t11D8 = 0.1e0;
    bool _t11D9 = prim >0080 (_t11D7, _t11D8);
    if _t11D9 {
      bool _t11DA;
      real _t11DB = mid11D4[1];
      real _t11DC = prim |()|00B5<$[]> (_t11DB);
      real _t11DD = 0.1e0;
      bool _t11DE = prim >0080 (_t11DC, _t11DD);
      if _t11DE {
        real _t11DF = mid11D4[2];
        real _t11E0 = prim |()|00B5<$[]> (_t11DF);
        real _t11E1 = 0.1e0;
        _t11DA = prim >0080 (_t11E0, _t11E1);
      } else {
        _t11DA = false;
      }
      _t11D5 = _t11DA;
    } else {
      _t11D5 = false;
    }
    bool z11E2 = _t11D5;
    bool _t11E3;
    real _t11E4 = prim |()|00B5<$[3]> (mid11D4);
    real _t11E5 = 0.5e1;
    bool _t11E6 = prim <007A (_t11E4, _t11E5);
    if _t11E6 {
      bool _t11E7;
      real _t11E8 = prim |()|00B5<$[3]> (mid11D4);
      real _t11E9 = 0.2e1;
      bool _t11EA = prim >0080 (_t11E8, _t11E9);
      if _t11EA {
        _t11E7 = z11E2;
      } else {
        _t11E7 = false;
      }
      _t11E3 = _t11E7;
    } else {
      _t11E3 = false;
    }
    _t11CF = _t11E3;
    if _t11CF {
      bool _t11EB;
      bool _t11EC;
      bool _t11ED;
      real _t11EE = pos0F08[0];
      real _t11EF = pos0F08[0];
      bool _t11F0 = prim ==0084 (_t11EE, _t11EF);
      bool _t11F1 = prim !00BC (_t11F0);
      if _t11F1 {
        _t11ED = true;
      } else {
        bool _t11F2;
        real _t11F3 = pos0F08[1];
        real _t11F4 = pos0F08[1];
        bool _t11F5 = prim ==0084 (_t11F3, _t11F4);
        bool _t11F6 = prim !00BC (_t11F5);
        if _t11F6 {
          _t11F2 = true;
        } else {
          real _t11F7 = pos0F08[2];
          real _t11F8 = pos0F08[2];
          bool _t11F9 = prim ==0084 (_t11F7, _t11F8);
          _t11F2 = prim !00BC (_t11F9);
        }
        _t11ED = _t11F2;
      }
      _t11EC = _t11ED;
      bool _t11FA = prim !00BC (_t11EC);
      if _t11FA {
        real _t11FB;
        vec3 g11FC;
        real x11FD = pos0F08[0];
        real y11FE = pos0F08[1];
        real z11FF = pos0F08[2];
        int _t1206 = 2;
        real _t1207 = prim ^0068 (y11FE, _t1206);
        real _t1208 = prim *0034 (_t1207, z11FF);
        real _t1209 = 0.2e1;
        real _t120A = prim *0034 (_t1209, x11FD);
        real _t120B = prim *0034 (_t120A, y11FE);
        real _t120C = prim *0034 (_t120B, z11FF);
        int _t120D = 2;
        real _t120E = prim ^0068 (y11FE, _t120D);
        real _t120F = prim *0034 (x11FD, _t120E);
        vec3 g1210 = [_t1208, _t120C, _t120F];
        g11FC = g1210;
        tensor[3,3] H1211;
        real x1212 = pos0F08[0];
        real y1213 = pos0F08[1];
        real z1214 = pos0F08[2];
        real _t121B = 0.e0;
        real _t121C = 0.2e1;
        real _t121D = prim *0034 (_t121C, y1213);
        real _t121E = prim *0034 (_t121D, z1214);
        int _t121F = 2;
        real _t1220 = prim ^0068 (y1213, _t121F);
        vec3 _t1221 = [_t121B, _t121E, _t1220];
        real _t1222 = 0.2e1;
        real _t1223 = prim *0034 (_t1222, y1213);
        real _t1224 = prim *0034 (_t1223, z1214);
        real _t1225 = 0.2e1;
        real _t1226 = prim *0034 (_t1225, x1212);
        real _t1227 = prim *0034 (_t1226, z1214);
        real _t1228 = 0.2e1;
        real _t1229 = prim *0034 (_t1228, x1212);
        real _t122A = prim *0034 (_t1229, y1213);
        vec3 _t122B = [_t1224, _t1227, _t122A];
        int _t122C = 2;
        real _t122D = prim ^0068 (y1213, _t122C);
        real _t122E = 0.2e1;
        real _t122F = prim *0034 (_t122E, x1212);
        real _t1230 = prim *0034 (_t122F, y1213);
        real _t1231 = 0.e0;
        vec3 _t1232 = [_t122D, _t1230, _t1231];
        tensor[3,3] hess1233 = [_t1221, _t122B, _t1232];
        H1211 = hess1233;
        real[3] _t1234 = prim evals009F (H1211);
        int _t1235 = 2;
        real _t1236 = prim $sub01C0<real; %3> (_t1234, _t1235);
        real _t1237 = prim unary -008B<$[]> (_t1236);
        real _t1238 = prim |()|00B5<$[3]> (g11FC);
        real _t1239 = prim +0017<$[]> (fBias0501, _t1238);
        real str123A = prim /0055 (_t1237, _t1239);
        _t11FB = str123A;
        _t11EB = prim >=007E (_t11FB, fStren0502);
      } else {
        _t11EB = false;
      }
      _t11CE = _t11EB;
    } else {
      _t11CE = false;
    }
    _t0F12 = _t11CE;
    bool _t0F13 = prim !00BC (_t0F12);
    if _t0F13 {
      die;
    }
    bool _t0F14 = prim !00BC (found0F0C);
    if _t0F14 {
      step0F0B = func fStep0E94 (pos0F08);
      pos0F08 = prim +0017<$[3]> (pos0F08, step0F0B);
      _pos0F09 = pos0F08;
      bool _t0F15;
      bool _t10AF;
      real _t10B0 = pos0F08[0];
      real _t10B1 = pos0F08[0];
      bool _t10B2 = prim ==0084 (_t10B0, _t10B1);
      bool _t10B3 = prim !00BC (_t10B2);
      if _t10B3 {
        _t10AF = true;
      } else {
        bool _t10B4;
        real _t10B5 = pos0F08[1];
        real _t10B6 = pos0F08[1];
        bool _t10B7 = prim ==0084 (_t10B5, _t10B6);
        bool _t10B8 = prim !00BC (_t10B7);
        if _t10B8 {
          _t10B4 = true;
        } else {
          real _t10B9 = pos0F08[2];
          real _t10BA = pos0F08[2];
          bool _t10BB = prim ==0084 (_t10B9, _t10BA);
          _t10B4 = prim !00BC (_t10BB);
        }
        _t10AF = _t10B4;
      }
      _t0F15 = _t10AF;
      if _t0F15 {
        die;
      }
      real _t0F16 = prim |()|00B5<$[3]> (step0F0B);
      real _t0F17 = prim /0055 (_t0F16, rad04FE);
      bool _t0F18 = prim >0080 (_t0F17, eps04FF);
      if _t0F18 {
        int _t0F19 = 1;
        nfs0F0D = prim +0015 (nfs0F0D, _t0F19);
        int _t0F1A = 10;
        bool _t0F1B = prim >007F (nfs0F0D, _t0F1A);
        if _t0F1B {
          die;
        }
      } else {
        found0F0C = true;
        testp0F0F = 1;
      }
    } else {
      vec3 _t0F1C = func fStep0E94 (pos0F08);
      pos0F08 = prim +0017<$[3]> (pos0F08, _t0F1C);
      _pos0F09 = pos0F08;
      bool _t0F1D;
      bool _t11C1;
      real _t11C2 = pos0F08[0];
      real _t11C3 = pos0F08[0];
      bool _t11C4 = prim ==0084 (_t11C2, _t11C3);
      bool _t11C5 = prim !00BC (_t11C4);
      if _t11C5 {
        _t11C1 = true;
      } else {
        bool _t11C6;
        real _t11C7 = pos0F08[1];
        real _t11C8 = pos0F08[1];
        bool _t11C9 = prim ==0084 (_t11C7, _t11C8);
        bool _t11CA = prim !00BC (_t11C9);
        if _t11CA {
          _t11C6 = true;
        } else {
          real _t11CB = pos0F08[2];
          real _t11CC = pos0F08[2];
          bool _t11CD = prim ==0084 (_t11CB, _t11CC);
          _t11C6 = prim !00BC (_t11CD);
        }
        _t11C1 = _t11C6;
      }
      _t0F1D = _t11C1;
      if _t0F1D {
        die;
      }
      step0F0B = prim $zero01BB<$[3]> ();
      real oldE0F1E = 0.e0;
      vec3 force0F1F = prim $zero01BB<$[3]> ();
      int nn0F20 = 0;
      particle[] _t0F21 = prim sphere0198<particle> (_pos0F09, rad04FE);
      foreach P0F22 in _t0F21 {
        vec3 _t0F23 = P0F22.pos0F08;
        vec3 _t0F24 = prim -0026<$[3]> (_t0F23, pos0F08);
        real _t0F25;
        real _t11BA = prim |()|00B5<$[3]> (_t0F24);
        real _t11BB = prim /0055 (_t11BA, rad04FE);
        real _t11BC;
        real _t11BD = 0.1e1;
        real _t11BE = prim -0026<$[]> (_t11BD, _t11BB);
        int _t11BF = 4;
        real _t11C0 = prim ^0068 (_t11BE, _t11BF);
        _t11BC = _t11C0;
        _t0F25 = _t11BC;
        oldE0F1E = prim +0017<$[]> (oldE0F1E, _t0F25);
        vec3 _t0F26 = P0F22.pos0F08;
        vec3 _t0F27 = prim -0026<$[3]> (_t0F26, pos0F08);
        vec3 _t0F28;
        real _t11AA = prim |()|00B5<$[3]> (_t0F27);
        real _t11AB = prim /0055 (_t11AA, rad04FE);
        real _t11AC;
        int _t11AD = -4;
        real _t11AE = (real)_t11AD;
        real _t11AF = 0.1e1;
        real _t11B0 = prim -0026<$[]> (_t11AF, _t11AB);
        int _t11B1 = 3;
        real _t11B2 = prim ^0068 (_t11B0, _t11B1);
        real _t11B3 = prim *0034 (_t11AE, _t11B2);
        _t11AC = _t11B3;
        real _t11B4 = 0.1e1;
        real _t11B5 = prim /0055 (_t11B4, rad04FE);
        real _t11B6 = prim *0034 (_t11AC, _t11B5);
        vec3 _t11B7 = prim *0036<$[3]> (_t11B6, _t0F27);
        real _t11B8 = prim |()|00B5<$[3]> (_t0F27);
        vec3 _t11B9 = prim /0057<$[3]> (_t11B7, _t11B8);
        _t0F28 = _t11B9;
        force0F1F = prim +0017<$[3]> (force0F1F, _t0F28);
        int _t0F29 = 1;
        nn0F20 = prim +0015 (nn0F20, _t0F29);
      }
      int _t0F2A = 0;
      bool _t0F2B = prim ==0082 (_t0F2A, nn0F20);
      if _t0F2B {
        real _t0F2C = 0.5e0;
        real _t0F2D = prim *0034 (_t0F2C, rad04FE);
        real _t0F2E = 0.e0;
        real _t0F2F = 0.e0;
        vec3 _t0F30 = [_t0F2D, _t0F2E, _t0F2F];
        vec3 npos0F31 = prim +0017<$[3]> (pos0F08, _t0F30);
        bool _t0F32;
        bool _t113D;
        bool _t113E;
        real _t113F = 0.e0;
        real _t1140 = 0.e0;
        real _t1141 = 0.e0;
        vec3 _t1142 = [_t113F, _t1140, _t1141];
        vec3 mid1143 = prim -0026<$[3]> (npos0F31, _t1142);
        bool _t1144;
        real _t1145 = mid1143[0];
        real _t1146 = prim |()|00B5<$[]> (_t1145);
        real _t1147 = 0.1e0;
        bool _t1148 = prim >0080 (_t1146, _t1147);
        if _t1148 {
          bool _t1149;
          real _t114A = mid1143[1];
          real _t114B = prim |()|00B5<$[]> (_t114A);
          real _t114C = 0.1e0;
          bool _t114D = prim >0080 (_t114B, _t114C);
          if _t114D {
            real _t114E = mid1143[2];
            real _t114F = prim |()|00B5<$[]> (_t114E);
            real _t1150 = 0.1e0;
            _t1149 = prim >0080 (_t114F, _t1150);
          } else {
            _t1149 = false;
          }
          _t1144 = _t1149;
        } else {
          _t1144 = false;
        }
        bool z1151 = _t1144;
        bool _t1152;
        real _t1153 = prim |()|00B5<$[3]> (mid1143);
        real _t1154 = 0.5e1;
        bool _t1155 = prim <007A (_t1153, _t1154);
        if _t1155 {
          bool _t1156;
          real _t1157 = prim |()|00B5<$[3]> (mid1143);
          real _t1158 = 0.2e1;
          bool _t1159 = prim >0080 (_t1157, _t1158);
          if _t1159 {
            _t1156 = z1151;
          } else {
            _t1156 = false;
          }
          _t1152 = _t1156;
        } else {
          _t1152 = false;
        }
        _t113E = _t1152;
        if _t113E {
          bool _t115A;
          bool _t115B;
          bool _t115C;
          real _t115D = npos0F31[0];
          real _t115E = npos0F31[0];
          bool _t115F = prim ==0084 (_t115D, _t115E);
          bool _t1160 = prim !00BC (_t115F);
          if _t1160 {
            _t115C = true;
          } else {
            bool _t1161;
            real _t1162 = npos0F31[1];
            real _t1163 = npos0F31[1];
            bool _t1164 = prim ==0084 (_t1162, _t1163);
            bool _t1165 = prim !00BC (_t1164);
            if _t1165 {
              _t1161 = true;
            } else {
              real _t1166 = npos0F31[2];
              real _t1167 = npos0F31[2];
              bool _t1168 = prim ==0084 (_t1166, _t1167);
              _t1161 = prim !00BC (_t1168);
            }
            _t115C = _t1161;
          }
          _t115B = _t115C;
          bool _t1169 = prim !00BC (_t115B);
          if _t1169 {
            real _t116A;
            vec3 g116B;
            real x116C = npos0F31[0];
            real y116D = npos0F31[1];
            real z116E = npos0F31[2];
            int _t1175 = 2;
            real _t1176 = prim ^0068 (y116D, _t1175);
            real _t1177 = prim *0034 (_t1176, z116E);
            real _t1178 = 0.2e1;
            real _t1179 = prim *0034 (_t1178, x116C);
            real _t117A = prim *0034 (_t1179, y116D);
            real _t117B = prim *0034 (_t117A, z116E);
            int _t117C = 2;
            real _t117D = prim ^0068 (y116D, _t117C);
            real _t117E = prim *0034 (x116C, _t117D);
            vec3 g117F = [_t1177, _t117B, _t117E];
            g116B = g117F;
            tensor[3,3] H1180;
            real x1181 = npos0F31[0];
            real y1182 = npos0F31[1];
            real z1183 = npos0F31[2];
            real _t118A = 0.e0;
            real _t118B = 0.2e1;
            real _t118C = prim *0034 (_t118B, y1182);
            real _t118D = prim *0034 (_t118C, z1183);
            int _t118E = 2;
            real _t118F = prim ^0068 (y1182, _t118E);
            vec3 _t1190 = [_t118A, _t118D, _t118F];
            real _t1191 = 0.2e1;
            real _t1192 = prim *0034 (_t1191, y1182);
            real _t1193 = prim *0034 (_t1192, z1183);
            real _t1194 = 0.2e1;
            real _t1195 = prim *0034 (_t1194, x1181);
            real _t1196 = prim *0034 (_t1195, z1183);
            real _t1197 = 0.2e1;
            real _t1198 = prim *0034 (_t1197, x1181);
            real _t1199 = prim *0034 (_t1198, y1182);
            vec3 _t119A = [_t1193, _t1196, _t1199];
            int _t119B = 2;
            real _t119C = prim ^0068 (y1182, _t119B);
            real _t119D = 0.2e1;
            real _t119E = prim *0034 (_t119D, x1181);
            real _t119F = prim *0034 (_t119E, y1182);
            real _t11A0 = 0.e0;
            vec3 _t11A1 = [_t119C, _t119F, _t11A0];
            tensor[3,3] hess11A2 = [_t1190, _t119A, _t11A1];
            H1180 = hess11A2;
            real[3] _t11A3 = prim evals009F (H1180);
            int _t11A4 = 2;
            real _t11A5 = prim $sub01C0<real; %3> (_t11A3, _t11A4);
            real _t11A6 = prim unary -008B<$[]> (_t11A5);
            real _t11A7 = prim |()|00B5<$[3]> (g116B);
            real _t11A8 = prim +0017<$[]> (fBias0501, _t11A7);
            real str11A9 = prim /0055 (_t11A6, _t11A8);
            _t116A = str11A9;
            _t115A = prim >=007E (_t116A, fStren0502);
          } else {
            _t115A = false;
          }
          _t113D = _t115A;
        } else {
          _t113D = false;
        }
        _t0F32 = _t113D;
        if _t0F32 {
          new particle (npos0F31, hh0F0A);
        }
        continue;
      }
      tensor[3,3] _t0F33 = func fPerp0EC6 (pos0F08);
      force0F1F = prim •00CE<$[3,3]; $[3]; $[3]> (_t0F33, force0F1F);
      vec3 es0F34 = prim *0036<$[3]> (hh0F0A, force0F1F);
      real _t0F35 = prim |()|00B5<$[3]> (es0F34);
      bool _t0F36 = prim >0080 (_t0F35, rad04FE);
      if _t0F36 {
        real _t0F37 = prim |()|00B5<$[3]> (es0F34);
        real _t0F38 = prim /0055 (rad04FE, _t0F37);
        hh0F0A = prim *0034 (hh0F0A, _t0F38);
        real _t0F39 = prim |()|00B5<$[3]> (es0F34);
        real _t0F3A = prim /0055 (rad04FE, _t0F39);
        es0F34 = prim *0038<$[3]> (es0F34, _t0F3A);
      }
      vec3 samplePos0F3B = prim +0017<$[3]> (pos0F08, es0F34);
      vec3 fs0F3C = func fStep0E94 (samplePos0F3B);
      real _t0F3D = prim |()|00B5<$[3]> (fs0F3C);
      real _t0F3E = prim |()|00B5<$[3]> (es0F34);
      real _t0F3F = prim /0055 (_t0F3D, _t0F3E);
      real _t0F40 = 0.5e0;
      bool _t0F41 = prim >0080 (_t0F3F, _t0F40);
      if _t0F41 {
        real _t0F42 = 0.5e0;
        hh0F0A = prim *0034 (hh0F0A, _t0F42);
        continue;
      }
      vec3 oldPos0F43 = pos0F08;
      vec3 up0F44 = prim +0017<$[3]> (fs0F3C, es0F34);
      pos0F08 = prim +0017<$[3]> (pos0F08, up0F44);
      _pos0F09 = pos0F08;
      particle[] _t0F45 = prim sphere0198<particle> (_pos0F09, rad04FE);
      real accum0F4A = 0.e0;
      foreach P0F46 in _t0F45 {
        vec3 _t0F47 = P0F46.pos0F08;
        vec3 _t0F48 = prim -0026<$[3]> (pos0F08, _t0F47);
        real _t0F49;
        real _t1136 = prim |()|00B5<$[3]> (_t0F48);
        real _t1137 = prim /0055 (_t1136, rad04FE);
        real _t1138;
        real _t1139 = 0.1e1;
        real _t113A = prim -0026<$[]> (_t1139, _t1137);
        int _t113B = 4;
        real _t113C = prim ^0068 (_t113A, _t113B);
        _t1138 = _t113C;
        _t0F49 = _t1138;
        accum0F4A = prim +0017<$[]> (accum0F4A, _t0F49);
      }
      real newE0F4B = accum0F4A;
      real _t0F4C = prim -0026<$[]> (newE0F4B, oldE0F1E);
      real _t0F4D = 0.5e0;
      vec3 _t0F4E = prim -0026<$[3]> (pos0F08, oldPos0F43);
      vec3 _t0F4F = prim *0036<$[3]> (_t0F4D, _t0F4E);
      vec3 _t0F50 = prim unary -008B<$[3]> (force0F1F);
      real _t0F51 = prim •00CE<$[3]; $[3]; $[]> (_t0F4F, _t0F50);
      bool _t0F52 = prim >0080 (_t0F4C, _t0F51);
      if _t0F52 {
        pos0F08 = oldPos0F43;
        _pos0F09 = pos0F08;
        real _t0F53 = 0.5e0;
        hh0F0A = prim *0034 (hh0F0A, _t0F53);
        continue;
      }
      real _t0F54 = 0.11e1;
      hh0F0A = prim *0034 (hh0F0A, _t0F54);
      step0F0B = up0F44;
      bool _t0F55;
      bool _t1129;
      real _t112A = pos0F08[0];
      real _t112B = pos0F08[0];
      bool _t112C = prim ==0084 (_t112A, _t112B);
      bool _t112D = prim !00BC (_t112C);
      if _t112D {
        _t1129 = true;
      } else {
        bool _t112E;
        real _t112F = pos0F08[1];
        real _t1130 = pos0F08[1];
        bool _t1131 = prim ==0084 (_t112F, _t1130);
        bool _t1132 = prim !00BC (_t1131);
        if _t1132 {
          _t112E = true;
        } else {
          real _t1133 = pos0F08[2];
          real _t1134 = pos0F08[2];
          bool _t1135 = prim ==0084 (_t1133, _t1134);
          _t112E = prim !00BC (_t1135);
        }
        _t1129 = _t112E;
      }
      _t0F55 = _t1129;
      if _t0F55 {
        die;
      }
      int _t0F56 = 5;
      bool _t0F57 = prim <0079 (nn0F20, _t0F56);
      if _t0F57 {
        real _t0F58 = 0.5e0;
        real _t0F59 = prim *0034 (_t0F58, rad04FE);
        vec3 _t0F5A = prim normalize0137<$[3]> (es0F34);
        vec3 _t0F5B = prim *0036<$[3]> (_t0F59, _t0F5A);
        vec3 npos0F5C = prim +0017<$[3]> (pos0F08, _t0F5B);
        bool _t0F5D;
        bool _t10BC;
        bool _t10BD;
        real _t10BE = 0.e0;
        real _t10BF = 0.e0;
        real _t10C0 = 0.e0;
        vec3 _t10C1 = [_t10BE, _t10BF, _t10C0];
        vec3 mid10C2 = prim -0026<$[3]> (npos0F5C, _t10C1);
        bool _t10C3;
        real _t10C4 = mid10C2[0];
        real _t10C5 = prim |()|00B5<$[]> (_t10C4);
        real _t10C6 = 0.1e0;
        bool _t10C7 = prim >0080 (_t10C5, _t10C6);
        if _t10C7 {
          bool _t10C8;
          real _t10C9 = mid10C2[1];
          real _t10CA = prim |()|00B5<$[]> (_t10C9);
          real _t10CB = 0.1e0;
          bool _t10CC = prim >0080 (_t10CA, _t10CB);
          if _t10CC {
            real _t10CD = mid10C2[2];
            real _t10CE = prim |()|00B5<$[]> (_t10CD);
            real _t10CF = 0.1e0;
            _t10C8 = prim >0080 (_t10CE, _t10CF);
          } else {
            _t10C8 = false;
          }
          _t10C3 = _t10C8;
        } else {
          _t10C3 = false;
        }
        bool z10D0 = _t10C3;
        bool _t10D1;
        real _t10D2 = prim |()|00B5<$[3]> (mid10C2);
        real _t10D3 = 0.5e1;
        bool _t10D4 = prim <007A (_t10D2, _t10D3);
        if _t10D4 {
          bool _t10D5;
          real _t10D6 = prim |()|00B5<$[3]> (mid10C2);
          real _t10D7 = 0.2e1;
          bool _t10D8 = prim >0080 (_t10D6, _t10D7);
          if _t10D8 {
            _t10D5 = z10D0;
          } else {
            _t10D5 = false;
          }
          _t10D1 = _t10D5;
        } else {
          _t10D1 = false;
        }
        _t10BD = _t10D1;
        if _t10BD {
          bool _t10D9;
          bool _t10DA;
          bool _t10DB;
          real _t10DC = npos0F5C[0];
          real _t10DD = npos0F5C[0];
          bool _t10DE = prim ==0084 (_t10DC, _t10DD);
          bool _t10DF = prim !00BC (_t10DE);
          if _t10DF {
            _t10DB = true;
          } else {
            bool _t10E0;
            real _t10E1 = npos0F5C[1];
            real _t10E2 = npos0F5C[1];
            bool _t10E3 = prim ==0084 (_t10E1, _t10E2);
            bool _t10E4 = prim !00BC (_t10E3);
            if _t10E4 {
              _t10E0 = true;
            } else {
              real _t10E5 = npos0F5C[2];
              real _t10E6 = npos0F5C[2];
              bool _t10E7 = prim ==0084 (_t10E5, _t10E6);
              _t10E0 = prim !00BC (_t10E7);
            }
            _t10DB = _t10E0;
          }
          _t10DA = _t10DB;
          bool _t10E8 = prim !00BC (_t10DA);
          if _t10E8 {
            real _t10E9;
            vec3 g10EA;
            real x10EB = npos0F5C[0];
            real y10EC = npos0F5C[1];
            real z10ED = npos0F5C[2];
            int _t10F4 = 2;
            real _t10F5 = prim ^0068 (y10EC, _t10F4);
            real _t10F6 = prim *0034 (_t10F5, z10ED);
            real _t10F7 = 0.2e1;
            real _t10F8 = prim *0034 (_t10F7, x10EB);
            real _t10F9 = prim *0034 (_t10F8, y10EC);
            real _t10FA = prim *0034 (_t10F9, z10ED);
            int _t10FB = 2;
            real _t10FC = prim ^0068 (y10EC, _t10FB);
            real _t10FD = prim *0034 (x10EB, _t10FC);
            vec3 g10FE = [_t10F6, _t10FA, _t10FD];
            g10EA = g10FE;
            tensor[3,3] H10FF;
            real x1100 = npos0F5C[0];
            real y1101 = npos0F5C[1];
            real z1102 = npos0F5C[2];
            real _t1109 = 0.e0;
            real _t110A = 0.2e1;
            real _t110B = prim *0034 (_t110A, y1101);
            real _t110C = prim *0034 (_t110B, z1102);
            int _t110D = 2;
            real _t110E = prim ^0068 (y1101, _t110D);
            vec3 _t110F = [_t1109, _t110C, _t110E];
            real _t1110 = 0.2e1;
            real _t1111 = prim *0034 (_t1110, y1101);
            real _t1112 = prim *0034 (_t1111, z1102);
            real _t1113 = 0.2e1;
            real _t1114 = prim *0034 (_t1113, x1100);
            real _t1115 = prim *0034 (_t1114, z1102);
            real _t1116 = 0.2e1;
            real _t1117 = prim *0034 (_t1116, x1100);
            real _t1118 = prim *0034 (_t1117, y1101);
            vec3 _t1119 = [_t1112, _t1115, _t1118];
            int _t111A = 2;
            real _t111B = prim ^0068 (y1101, _t111A);
            real _t111C = 0.2e1;
            real _t111D = prim *0034 (_t111C, x1100);
            real _t111E = prim *0034 (_t111D, y1101);
            real _t111F = 0.e0;
            vec3 _t1120 = [_t111B, _t111E, _t111F];
            tensor[3,3] hess1121 = [_t110F, _t1119, _t1120];
            H10FF = hess1121;
            real[3] _t1122 = prim evals009F (H10FF);
            int _t1123 = 2;
            real _t1124 = prim $sub01C0<real; %3> (_t1122, _t1123);
            real _t1125 = prim unary -008B<$[]> (_t1124);
            real _t1126 = prim |()|00B5<$[3]> (g10EA);
            real _t1127 = prim +0017<$[]> (fBias0501, _t1126);
            real str1128 = prim /0055 (_t1125, _t1127);
            _t10E9 = str1128;
            _t10D9 = prim >=007E (_t10E9, fStren0502);
          } else {
            _t10D9 = false;
          }
          _t10BC = _t10D9;
        } else {
          _t10BC = false;
        }
        _t0F5D = _t10BC;
        if _t0F5D {
          new particle (npos0F5C, hh0F0A);
        }
      }
    }
  }
}
collection {
  foreach x0F5E in ipos0504 {
    real _t0F5F = 0.1e1;
    new particle (x0F5E, _t0F5F);
  }
}
update {
  int res0F60= sum<int> { (P0F63) => {
      int _t0F64 = P0F63.test0F0E;
      return _t0F64;
    } (P0F61, P0F61)
  | P0F61 in all };
  int num0F66 = res0F60;
  int res0F67= max<int> { (P0F6A) => {
      int _t0F6B = P0F6A.steps0F10;
      return _t0F6B;
    } (P0F68, P0F68)
  | P0F68 in all };
  int steps0F6D = res0F67;
  int res0F6E= sum<int> { (P0F71) => {
      int _t0F72 = P0F71.testp0F0F;
      return _t0F72;
    } (P0F6F, P0F6F)
  | P0F6F in all };
  int numFound0F74 = res0F6E;
  bool res0F75= all { (P0F78) => {
      bool _t0F79 = P0F78.found0F0C;
      return _t0F79;
    } (P0F76, P0F76)
  | P0F76 in all };
  bool allFound0F7B = res0F75;
  real res0F7C= max<real> { (P0F80) => {
      vec3 _t0F81 = P0F80.step0F0B;
      real _t0F82 = prim |()|00B5<$[3]> (_t0F81);
      return _t0F82;
    } (P0F7D, P0F7D)
  | P0F7D in all };
  real maxStep0F84 = res0F7C;
  string _t0F85 = "One run:";
  string _t0F86 = " and ";
  real _t0F87 = prim /0055 (maxStep0F84, rad04FE);
  string _t0F88 = " and ";
  real _t0F89 = prim /0055 (maxStep0F84, rad04FE);
  bool _t0F8A = prim <007A (_t0F89, eps04FF);
  string _t0F8B = " and ";
  string _t0F8C = " of ";
  string _t0F8D = "\n";
  print (_t0F85, allFound0F7B, _t0F86, _t0F87, _t0F88, _t0F8A, _t0F8B, numFound0F74, _t0F8C, num0F66, _t0F8D);
  if allFound0F7B {
    real _t0F8E = prim /0055 (maxStep0F84, rad04FE);
    bool _t0F8F = prim <007A (_t0F8E, eps04FF);
    if _t0F8F {
      string _t0F90 = "CONVERGED!\n";
      print (_t0F90);
      stabilize_all;
    }
  }
  int _t0F91 = 2000;
  bool _t0F92 = prim >007F (steps0F6D, _t0F91);
  if _t0F92 {
    stabilize_all;
  }
  string _t0F93 = "Current steps:";
  string _t0F94 = "\n";
  print (_t0F93, steps0F6D, _t0F94);
}
/* Program end */
/* Simplified Program (after after simplify variables) start */
properties: GlobalInit,StabilizeAll,GlobalReduce,StrandSets,GlobalUpdate,NewStrands,StrandCommunication,StrandsMayDie,HasInputs,HasGlobals,ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
input FemData:Mesh meshData04EE;
input FemData:Space 0space04FA_intermedateGlobal04FB;
input FemData:FemFunc 0data04FC_intermedateGlobal04FD;
input real rad04FE = <default>;
input real eps04FF = <default>;
input real v00500 = <default>;
input real fBias0501 = <default>;
input real fStren0502 = <default>;
input real zfuz0503 = <default>;
input vec3[] ipos0504;
constants {
  rad04FE = 0.1e-1;
  eps04FF = 0.1e-1;
  v00500 = 0.625e-1;
  fBias0501 = 0.1e-1;
  fStren0502 = 0.1e-1;
  zfuz0503 = 0.1e-1;
}
function int[2]#6 nextCell405D9 (int faceIdx0A38, int cell0A39, Femdata: Mesh mesh0A3A)
{
  int _t0A3B = -1;
  bool _t0A3C = prim ==0082 (faceIdx0A38, _t0A3B);
  if _t0A3C {
    int _t0A3D = -1;
    int _t0A3E = -1;
    int[2] _t0A3F = {_t0A3D, _t0A3E};
    return _t0A3F;
  } else {
    int _t0A40 = 8;
    int _t0A41 = prim *0033 (cell0A39, _t0A40);
    int _t0A42 = 2;
    int _t0A43 = prim *0033 (faceIdx0A38, _t0A42);
    int _t0A44 = prim +0015 (_t0A41, _t0A43);
    int[2] _t0A45 = extractFemItemN((mesh0A3A, _t0A44),CellFaceCell(Mesh),);
    return _t0A45;
  }
}
function vec3#3 fStep0E94 (vec3 s0E95)
{
  vec3 g0E96;
  real x0FBB = s0E95[0];
  real y0FBC = s0E95[1];
  real z0FBD = s0E95[2];
  real _t0FBE = prim *0034 (x0FBB, x0FBB);
  real _t0FBF = prim *0034 (y0FBC, y0FBC);
  real _t0FC0 = prim +0017<$[]> (_t0FBE, _t0FBF);
  real _t0FC1 = prim *0034 (z0FBD, z0FBD);
  real _t0FC2 = prim +0017<$[]> (_t0FC0, _t0FC1);
  real p0FC3 = prim unary -008B<$[]> (_t0FC2);
  int _t0FC4 = 2;
  real _t0FC5 = prim ^0068 (y0FBC, _t0FC4);
  real _t0FC6 = prim *0034 (_t0FC5, z0FBD);
  real _t0FC7 = 0.2e1;
  real _t0FC8 = prim *0034 (_t0FC7, x0FBB);
  real _t0FC9 = prim *0034 (_t0FC8, y0FBC);
  real _t0FCA = prim *0034 (_t0FC9, z0FBD);
  int _t0FCB = 2;
  real _t0FCC = prim ^0068 (y0FBC, _t0FCB);
  real _t0FCD = prim *0034 (x0FBB, _t0FCC);
  vec3 g0FCE = [_t0FC6, _t0FCA, _t0FCD];
  g0E96 = g0FCE;
  tensor[3,3] H0E97;
  real x0F99 = s0E95[0];
  real y0F9A = s0E95[1];
  real z0F9B = s0E95[2];
  real _t0F9C = prim *0034 (x0F99, x0F99);
  real _t0F9D = prim *0034 (y0F9A, y0F9A);
  real _t0F9E = prim +0017<$[]> (_t0F9C, _t0F9D);
  real _t0F9F = prim *0034 (z0F9B, z0F9B);
  real _t0FA0 = prim +0017<$[]> (_t0F9E, _t0F9F);
  real p0FA1 = prim unary -008B<$[]> (_t0FA0);
  real _t0FA2 = 0.e0;
  real _t0FA3 = 0.2e1;
  real _t0FA4 = prim *0034 (_t0FA3, y0F9A);
  real _t0FA5 = prim *0034 (_t0FA4, z0F9B);
  int _t0FA6 = 2;
  real _t0FA7 = prim ^0068 (y0F9A, _t0FA6);
  vec3 _t0FA8 = [_t0FA2, _t0FA5, _t0FA7];
  real _t0FA9 = 0.2e1;
  real _t0FAA = prim *0034 (_t0FA9, y0F9A);
  real _t0FAB = prim *0034 (_t0FAA, z0F9B);
  real _t0FAC = 0.2e1;
  real _t0FAD = prim *0034 (_t0FAC, x0F99);
  real _t0FAE = prim *0034 (_t0FAD, z0F9B);
  real _t0FAF = 0.2e1;
  real _t0FB0 = prim *0034 (_t0FAF, x0F99);
  real _t0FB1 = prim *0034 (_t0FB0, y0F9A);
  vec3 _t0FB2 = [_t0FAB, _t0FAE, _t0FB1];
  int _t0FB3 = 2;
  real _t0FB4 = prim ^0068 (y0F9A, _t0FB3);
  real _t0FB5 = 0.2e1;
  real _t0FB6 = prim *0034 (_t0FB5, x0F99);
  real _t0FB7 = prim *0034 (_t0FB6, y0F9A);
  real _t0FB8 = 0.e0;
  vec3 _t0FB9 = [_t0FB4, _t0FB7, _t0FB8];
  tensor[3,3] hess0FBA = [_t0FA8, _t0FB2, _t0FB9];
  H0E97 = hess0FBA;
  vec3[3] E0E98 = prim evecs00A0 (H0E97);
  real[3] L0E99 = prim evals009F (H0E97);
  real _t0E9A = 0.1e1;
  int _t0E9B = 2;
  real _t0E9C = prim $sub01C0<real; %3> (L0E99, _t0E9B);
  real _t0E9D = prim /0055 (_t0E9A, _t0E9C);
  real _t0E9E = prim unary -008B<$[]> (_t0E9D);
  int _t0E9F = 2;
  vec3 _t0EA0 = prim $sub01C0<vec3; %3> (E0E98, _t0E9F);
  vec3 _t0EA1 = prim *0036<$[3]> (_t0E9E, _t0EA0);
  int _t0EA2 = 2;
  vec3 _t0EA3 = prim $sub01C0<vec3; %3> (E0E98, _t0EA2);
  tensor[3,3] _t0EA4 = prim ⊗00E5<$[3]; $[3]; $[3,3]> (_t0EA1, _t0EA3);
  vec3 up0EA5 = prim •00CE<$[3,3]; $[3]; $[3]> (_t0EA4, g0E96);
  bool _t0EA6;
  real _t0EA7 = up0EA5[0];
  real _t0EA8 = up0EA5[0];
  bool _t0EA9 = prim ==0084 (_t0EA7, _t0EA8);
  bool _t0EAA = prim !00BC (_t0EA9);
  if _t0EAA {
    _t0EA6 = true;
  } else {
    bool _t0EAB;
    real _t0EAC = up0EA5[1];
    real _t0EAD = up0EA5[1];
    bool _t0EAE = prim ==0084 (_t0EAC, _t0EAD);
    bool _t0EAF = prim !00BC (_t0EAE);
    if _t0EAF {
      _t0EAB = true;
    } else {
      real _t0EB0 = up0EA5[2];
      real _t0EB1 = up0EA5[2];
      bool _t0EB2 = prim ==0084 (_t0EB0, _t0EB1);
      _t0EAB = prim !00BC (_t0EB2);
    }
    _t0EA6 = _t0EAB;
  }
  if _t0EA6 {
    real _t0EB3 = +inf;
    real _t0EB4 = +inf;
    real _t0EB5 = +inf;
    vec3 _t0EB6 = [_t0EB3, _t0EB4, _t0EB5];
    return _t0EB6;
  }
  return up0EA5;
}
function tensor[3,3]#1 fPerp0EC6 (vec3 s0EC7)
{
  vec3 g0EC8;
  real x0FF1 = s0EC7[0];
  real y0FF2 = s0EC7[1];
  real z0FF3 = s0EC7[2];
  real _t0FF4 = prim *0034 (x0FF1, x0FF1);
  real _t0FF5 = prim *0034 (y0FF2, y0FF2);
  real _t0FF6 = prim +0017<$[]> (_t0FF4, _t0FF5);
  real _t0FF7 = prim *0034 (z0FF3, z0FF3);
  real _t0FF8 = prim +0017<$[]> (_t0FF6, _t0FF7);
  real p0FF9 = prim unary -008B<$[]> (_t0FF8);
  int _t0FFA = 2;
  real _t0FFB = prim ^0068 (y0FF2, _t0FFA);
  real _t0FFC = prim *0034 (_t0FFB, z0FF3);
  real _t0FFD = 0.2e1;
  real _t0FFE = prim *0034 (_t0FFD, x0FF1);
  real _t0FFF = prim *0034 (_t0FFE, y0FF2);
  real _t1000 = prim *0034 (_t0FFF, z0FF3);
  int _t1001 = 2;
  real _t1002 = prim ^0068 (y0FF2, _t1001);
  real _t1003 = prim *0034 (x0FF1, _t1002);
  vec3 g1004 = [_t0FFC, _t1000, _t1003];
  g0EC8 = g1004;
  tensor[3,3] H0EC9;
  real x0FCF = s0EC7[0];
  real y0FD0 = s0EC7[1];
  real z0FD1 = s0EC7[2];
  real _t0FD2 = prim *0034 (x0FCF, x0FCF);
  real _t0FD3 = prim *0034 (y0FD0, y0FD0);
  real _t0FD4 = prim +0017<$[]> (_t0FD2, _t0FD3);
  real _t0FD5 = prim *0034 (z0FD1, z0FD1);
  real _t0FD6 = prim +0017<$[]> (_t0FD4, _t0FD5);
  real p0FD7 = prim unary -008B<$[]> (_t0FD6);
  real _t0FD8 = 0.e0;
  real _t0FD9 = 0.2e1;
  real _t0FDA = prim *0034 (_t0FD9, y0FD0);
  real _t0FDB = prim *0034 (_t0FDA, z0FD1);
  int _t0FDC = 2;
  real _t0FDD = prim ^0068 (y0FD0, _t0FDC);
  vec3 _t0FDE = [_t0FD8, _t0FDB, _t0FDD];
  real _t0FDF = 0.2e1;
  real _t0FE0 = prim *0034 (_t0FDF, y0FD0);
  real _t0FE1 = prim *0034 (_t0FE0, z0FD1);
  real _t0FE2 = 0.2e1;
  real _t0FE3 = prim *0034 (_t0FE2, x0FCF);
  real _t0FE4 = prim *0034 (_t0FE3, z0FD1);
  real _t0FE5 = 0.2e1;
  real _t0FE6 = prim *0034 (_t0FE5, x0FCF);
  real _t0FE7 = prim *0034 (_t0FE6, y0FD0);
  vec3 _t0FE8 = [_t0FE1, _t0FE4, _t0FE7];
  int _t0FE9 = 2;
  real _t0FEA = prim ^0068 (y0FD0, _t0FE9);
  real _t0FEB = 0.2e1;
  real _t0FEC = prim *0034 (_t0FEB, x0FCF);
  real _t0FED = prim *0034 (_t0FEC, y0FD0);
  real _t0FEE = 0.e0;
  vec3 _t0FEF = [_t0FEA, _t0FED, _t0FEE];
  tensor[3,3] hess0FF0 = [_t0FDE, _t0FE8, _t0FEF];
  H0EC9 = hess0FF0;
  vec3[3] _t0ECA = prim evecs00A0 (H0EC9);
  int _t0ECB = 2;
  vec3 E20ECC = prim $sub01C0<vec3; %3> (_t0ECA, _t0ECB);
  tensor[3,3] _t0ECD = prim $id01B9<%3> ();
  tensor[3,3] _t0ECE = prim ⊗00E5<$[3]; $[3]; $[3,3]> (E20ECC, E20ECC);
  tensor[3,3] m0ECF = prim -0026<$[3,3]> (_t0ECD, _t0ECE);
  real t0ED0 = prim :00FC<$[3,3]; $[3,3]; $[]> (m0ECF, m0ECF);
  bool _t0ED1 = prim ==0084 (t0ED0, t0ED0);
  bool _t0ED2 = prim !00BC (_t0ED1);
  if _t0ED2 {
    tensor[3,3] _t0ED3 = prim $zero01BB<$[3,3]> ();
    return _t0ED3;
  }
  return m0ECF;
}
globalInit {
  int _t04F2 = 0;
  int _t04F0 = 1;
  int _t04F4 = extractFemItem(NumCell(Mesh), int, meshData04EE);
  int _t04F3 = prim -0024 (_t04F4, _t04F0);
  int[] _t04F7 = prim $range01C3 (_t04F2, _t04F3);
  Femdata: MeshCell[] _t04F8 = {};
  foreach _t04F6 in _t04F7 {
    Femdata: MeshCell _t04F9 = loadFem(MeshCell, meshData04EE, _t04F6);
    _t04F8 = prim @0010<Femdata: MeshCell> (_t04F8, _t04F9);
  }
}
strand particle (vec3 pos00F06, real hh00F07) in 3D {
  output vec3 pos0F08;
  output vec3 _pos0F09;
  real hh0F0A;
  vec3 step0F0B;
  bool found0F0C;
  int nfs0F0D;
  int test0F0E;
  int testp0F0F;
  int steps0F10;
  {
    pos0F08 = pos00F06;
    _pos0F09 = pos0F08;
    hh0F0A = hh00F07;
    step0F0B = prim $zero01BB<$[3]> ();
    found0F0C = false;
    nfs0F0D = 0;
    test0F0E = 1;
    testp0F0F = 0;
    steps0F10 = 0;
  }
  update
  {
    int _t0F11 = 1;
    steps0F10 = prim +0015 (steps0F10, _t0F11);
    bool _t0F12;
    bool _t11CE;
    bool _t11CF;
    real _t11D0 = 0.e0;
    real _t11D1 = 0.e0;
    real _t11D2 = 0.e0;
    vec3 _t11D3 = [_t11D0, _t11D1, _t11D2];
    vec3 mid11D4 = prim -0026<$[3]> (pos0F08, _t11D3);
    bool _t11D5;
    real _t11D6 = mid11D4[0];
    real _t11D7 = prim |()|00B5<$[]> (_t11D6);
    real _t11D8 = 0.1e0;
    bool _t11D9 = prim >0080 (_t11D7, _t11D8);
    if _t11D9 {
      bool _t11DA;
      real _t11DB = mid11D4[1];
      real _t11DC = prim |()|00B5<$[]> (_t11DB);
      real _t11DD = 0.1e0;
      bool _t11DE = prim >0080 (_t11DC, _t11DD);
      if _t11DE {
        real _t11DF = mid11D4[2];
        real _t11E0 = prim |()|00B5<$[]> (_t11DF);
        real _t11E1 = 0.1e0;
        _t11DA = prim >0080 (_t11E0, _t11E1);
      } else {
        _t11DA = false;
      }
      _t11D5 = _t11DA;
    } else {
      _t11D5 = false;
    }
    bool z11E2 = _t11D5;
    bool _t11E3;
    real _t11E4 = prim |()|00B5<$[3]> (mid11D4);
    real _t11E5 = 0.5e1;
    bool _t11E6 = prim <007A (_t11E4, _t11E5);
    if _t11E6 {
      bool _t11E7;
      real _t11E8 = prim |()|00B5<$[3]> (mid11D4);
      real _t11E9 = 0.2e1;
      bool _t11EA = prim >0080 (_t11E8, _t11E9);
      if _t11EA {
        _t11E7 = z11E2;
      } else {
        _t11E7 = false;
      }
      _t11E3 = _t11E7;
    } else {
      _t11E3 = false;
    }
    _t11CF = _t11E3;
    if _t11CF {
      bool _t11EB;
      bool _t11EC;
      bool _t11ED;
      real _t11EE = pos0F08[0];
      real _t11EF = pos0F08[0];
      bool _t11F0 = prim ==0084 (_t11EE, _t11EF);
      bool _t11F1 = prim !00BC (_t11F0);
      if _t11F1 {
        _t11ED = true;
      } else {
        bool _t11F2;
        real _t11F3 = pos0F08[1];
        real _t11F4 = pos0F08[1];
        bool _t11F5 = prim ==0084 (_t11F3, _t11F4);
        bool _t11F6 = prim !00BC (_t11F5);
        if _t11F6 {
          _t11F2 = true;
        } else {
          real _t11F7 = pos0F08[2];
          real _t11F8 = pos0F08[2];
          bool _t11F9 = prim ==0084 (_t11F7, _t11F8);
          _t11F2 = prim !00BC (_t11F9);
        }
        _t11ED = _t11F2;
      }
      _t11EC = _t11ED;
      bool _t11FA = prim !00BC (_t11EC);
      if _t11FA {
        real _t11FB;
        vec3 g11FC;
        real x11FD = pos0F08[0];
        real y11FE = pos0F08[1];
        real z11FF = pos0F08[2];
        int _t1206 = 2;
        real _t1207 = prim ^0068 (y11FE, _t1206);
        real _t1208 = prim *0034 (_t1207, z11FF);
        real _t1209 = 0.2e1;
        real _t120A = prim *0034 (_t1209, x11FD);
        real _t120B = prim *0034 (_t120A, y11FE);
        real _t120C = prim *0034 (_t120B, z11FF);
        int _t120D = 2;
        real _t120E = prim ^0068 (y11FE, _t120D);
        real _t120F = prim *0034 (x11FD, _t120E);
        vec3 g1210 = [_t1208, _t120C, _t120F];
        g11FC = g1210;
        tensor[3,3] H1211;
        real x1212 = pos0F08[0];
        real y1213 = pos0F08[1];
        real z1214 = pos0F08[2];
        real _t121B = 0.e0;
        real _t121C = 0.2e1;
        real _t121D = prim *0034 (_t121C, y1213);
        real _t121E = prim *0034 (_t121D, z1214);
        int _t121F = 2;
        real _t1220 = prim ^0068 (y1213, _t121F);
        vec3 _t1221 = [_t121B, _t121E, _t1220];
        real _t1222 = 0.2e1;
        real _t1223 = prim *0034 (_t1222, y1213);
        real _t1224 = prim *0034 (_t1223, z1214);
        real _t1225 = 0.2e1;
        real _t1226 = prim *0034 (_t1225, x1212);
        real _t1227 = prim *0034 (_t1226, z1214);
        real _t1228 = 0.2e1;
        real _t1229 = prim *0034 (_t1228, x1212);
        real _t122A = prim *0034 (_t1229, y1213);
        vec3 _t122B = [_t1224, _t1227, _t122A];
        int _t122C = 2;
        real _t122D = prim ^0068 (y1213, _t122C);
        real _t122E = 0.2e1;
        real _t122F = prim *0034 (_t122E, x1212);
        real _t1230 = prim *0034 (_t122F, y1213);
        real _t1231 = 0.e0;
        vec3 _t1232 = [_t122D, _t1230, _t1231];
        tensor[3,3] hess1233 = [_t1221, _t122B, _t1232];
        H1211 = hess1233;
        real[3] _t1234 = prim evals009F (H1211);
        int _t1235 = 2;
        real _t1236 = prim $sub01C0<real; %3> (_t1234, _t1235);
        real _t1237 = prim unary -008B<$[]> (_t1236);
        real _t1238 = prim |()|00B5<$[3]> (g11FC);
        real _t1239 = prim +0017<$[]> (fBias0501, _t1238);
        real str123A = prim /0055 (_t1237, _t1239);
        _t11FB = str123A;
        _t11EB = prim >=007E (_t11FB, fStren0502);
      } else {
        _t11EB = false;
      }
      _t11CE = _t11EB;
    } else {
      _t11CE = false;
    }
    _t0F12 = _t11CE;
    bool _t0F13 = prim !00BC (_t0F12);
    if _t0F13 {
      die;
    }
    bool _t0F14 = prim !00BC (found0F0C);
    if _t0F14 {
      step0F0B = func fStep0E94 (pos0F08);
      pos0F08 = prim +0017<$[3]> (pos0F08, step0F0B);
      _pos0F09 = pos0F08;
      bool _t0F15;
      bool _t10AF;
      real _t10B0 = pos0F08[0];
      real _t10B1 = pos0F08[0];
      bool _t10B2 = prim ==0084 (_t10B0, _t10B1);
      bool _t10B3 = prim !00BC (_t10B2);
      if _t10B3 {
        _t10AF = true;
      } else {
        bool _t10B4;
        real _t10B5 = pos0F08[1];
        real _t10B6 = pos0F08[1];
        bool _t10B7 = prim ==0084 (_t10B5, _t10B6);
        bool _t10B8 = prim !00BC (_t10B7);
        if _t10B8 {
          _t10B4 = true;
        } else {
          real _t10B9 = pos0F08[2];
          real _t10BA = pos0F08[2];
          bool _t10BB = prim ==0084 (_t10B9, _t10BA);
          _t10B4 = prim !00BC (_t10BB);
        }
        _t10AF = _t10B4;
      }
      _t0F15 = _t10AF;
      if _t0F15 {
        die;
      }
      real _t0F16 = prim |()|00B5<$[3]> (step0F0B);
      real _t0F17 = prim /0055 (_t0F16, rad04FE);
      bool _t0F18 = prim >0080 (_t0F17, eps04FF);
      if _t0F18 {
        int _t0F19 = 1;
        nfs0F0D = prim +0015 (nfs0F0D, _t0F19);
        int _t0F1A = 10;
        bool _t0F1B = prim >007F (nfs0F0D, _t0F1A);
        if _t0F1B {
          die;
        }
      } else {
        found0F0C = true;
        testp0F0F = 1;
      }
    } else {
      vec3 _t0F1C = func fStep0E94 (pos0F08);
      pos0F08 = prim +0017<$[3]> (pos0F08, _t0F1C);
      _pos0F09 = pos0F08;
      bool _t0F1D;
      bool _t11C1;
      real _t11C2 = pos0F08[0];
      real _t11C3 = pos0F08[0];
      bool _t11C4 = prim ==0084 (_t11C2, _t11C3);
      bool _t11C5 = prim !00BC (_t11C4);
      if _t11C5 {
        _t11C1 = true;
      } else {
        bool _t11C6;
        real _t11C7 = pos0F08[1];
        real _t11C8 = pos0F08[1];
        bool _t11C9 = prim ==0084 (_t11C7, _t11C8);
        bool _t11CA = prim !00BC (_t11C9);
        if _t11CA {
          _t11C6 = true;
        } else {
          real _t11CB = pos0F08[2];
          real _t11CC = pos0F08[2];
          bool _t11CD = prim ==0084 (_t11CB, _t11CC);
          _t11C6 = prim !00BC (_t11CD);
        }
        _t11C1 = _t11C6;
      }
      _t0F1D = _t11C1;
      if _t0F1D {
        die;
      }
      step0F0B = prim $zero01BB<$[3]> ();
      real oldE0F1E = 0.e0;
      vec3 force0F1F = prim $zero01BB<$[3]> ();
      int nn0F20 = 0;
      particle[] _t0F21 = prim sphere0198<particle> (_pos0F09, rad04FE);
      foreach P0F22 in _t0F21 {
        vec3 _t0F23 = P0F22.pos0F08;
        vec3 _t0F24 = prim -0026<$[3]> (_t0F23, pos0F08);
        real _t0F25;
        real _t11BA = prim |()|00B5<$[3]> (_t0F24);
        real _t11BB = prim /0055 (_t11BA, rad04FE);
        real _t11BC;
        real _t11BD = 0.1e1;
        real _t11BE = prim -0026<$[]> (_t11BD, _t11BB);
        int _t11BF = 4;
        real _t11C0 = prim ^0068 (_t11BE, _t11BF);
        _t11BC = _t11C0;
        _t0F25 = _t11BC;
        oldE0F1E = prim +0017<$[]> (oldE0F1E, _t0F25);
        vec3 _t0F26 = P0F22.pos0F08;
        vec3 _t0F27 = prim -0026<$[3]> (_t0F26, pos0F08);
        vec3 _t0F28;
        real _t11AA = prim |()|00B5<$[3]> (_t0F27);
        real _t11AB = prim /0055 (_t11AA, rad04FE);
        real _t11AC;
        int _t11AD = -4;
        real _t11AE = (real)_t11AD;
        real _t11AF = 0.1e1;
        real _t11B0 = prim -0026<$[]> (_t11AF, _t11AB);
        int _t11B1 = 3;
        real _t11B2 = prim ^0068 (_t11B0, _t11B1);
        real _t11B3 = prim *0034 (_t11AE, _t11B2);
        _t11AC = _t11B3;
        real _t11B4 = 0.1e1;
        real _t11B5 = prim /0055 (_t11B4, rad04FE);
        real _t11B6 = prim *0034 (_t11AC, _t11B5);
        vec3 _t11B7 = prim *0036<$[3]> (_t11B6, _t0F27);
        real _t11B8 = prim |()|00B5<$[3]> (_t0F27);
        vec3 _t11B9 = prim /0057<$[3]> (_t11B7, _t11B8);
        _t0F28 = _t11B9;
        force0F1F = prim +0017<$[3]> (force0F1F, _t0F28);
        int _t0F29 = 1;
        nn0F20 = prim +0015 (nn0F20, _t0F29);
      }
      int _t0F2A = 0;
      bool _t0F2B = prim ==0082 (_t0F2A, nn0F20);
      if _t0F2B {
        real _t0F2C = 0.5e0;
        real _t0F2D = prim *0034 (_t0F2C, rad04FE);
        real _t0F2E = 0.e0;
        real _t0F2F = 0.e0;
        vec3 _t0F30 = [_t0F2D, _t0F2E, _t0F2F];
        vec3 npos0F31 = prim +0017<$[3]> (pos0F08, _t0F30);
        bool _t0F32;
        bool _t113D;
        bool _t113E;
        real _t113F = 0.e0;
        real _t1140 = 0.e0;
        real _t1141 = 0.e0;
        vec3 _t1142 = [_t113F, _t1140, _t1141];
        vec3 mid1143 = prim -0026<$[3]> (npos0F31, _t1142);
        bool _t1144;
        real _t1145 = mid1143[0];
        real _t1146 = prim |()|00B5<$[]> (_t1145);
        real _t1147 = 0.1e0;
        bool _t1148 = prim >0080 (_t1146, _t1147);
        if _t1148 {
          bool _t1149;
          real _t114A = mid1143[1];
          real _t114B = prim |()|00B5<$[]> (_t114A);
          real _t114C = 0.1e0;
          bool _t114D = prim >0080 (_t114B, _t114C);
          if _t114D {
            real _t114E = mid1143[2];
            real _t114F = prim |()|00B5<$[]> (_t114E);
            real _t1150 = 0.1e0;
            _t1149 = prim >0080 (_t114F, _t1150);
          } else {
            _t1149 = false;
          }
          _t1144 = _t1149;
        } else {
          _t1144 = false;
        }
        bool z1151 = _t1144;
        bool _t1152;
        real _t1153 = prim |()|00B5<$[3]> (mid1143);
        real _t1154 = 0.5e1;
        bool _t1155 = prim <007A (_t1153, _t1154);
        if _t1155 {
          bool _t1156;
          real _t1157 = prim |()|00B5<$[3]> (mid1143);
          real _t1158 = 0.2e1;
          bool _t1159 = prim >0080 (_t1157, _t1158);
          if _t1159 {
            _t1156 = z1151;
          } else {
            _t1156 = false;
          }
          _t1152 = _t1156;
        } else {
          _t1152 = false;
        }
        _t113E = _t1152;
        if _t113E {
          bool _t115A;
          bool _t115B;
          bool _t115C;
          real _t115D = npos0F31[0];
          real _t115E = npos0F31[0];
          bool _t115F = prim ==0084 (_t115D, _t115E);
          bool _t1160 = prim !00BC (_t115F);
          if _t1160 {
            _t115C = true;
          } else {
            bool _t1161;
            real _t1162 = npos0F31[1];
            real _t1163 = npos0F31[1];
            bool _t1164 = prim ==0084 (_t1162, _t1163);
            bool _t1165 = prim !00BC (_t1164);
            if _t1165 {
              _t1161 = true;
            } else {
              real _t1166 = npos0F31[2];
              real _t1167 = npos0F31[2];
              bool _t1168 = prim ==0084 (_t1166, _t1167);
              _t1161 = prim !00BC (_t1168);
            }
            _t115C = _t1161;
          }
          _t115B = _t115C;
          bool _t1169 = prim !00BC (_t115B);
          if _t1169 {
            real _t116A;
            vec3 g116B;
            real x116C = npos0F31[0];
            real y116D = npos0F31[1];
            real z116E = npos0F31[2];
            int _t1175 = 2;
            real _t1176 = prim ^0068 (y116D, _t1175);
            real _t1177 = prim *0034 (_t1176, z116E);
            real _t1178 = 0.2e1;
            real _t1179 = prim *0034 (_t1178, x116C);
            real _t117A = prim *0034 (_t1179, y116D);
            real _t117B = prim *0034 (_t117A, z116E);
            int _t117C = 2;
            real _t117D = prim ^0068 (y116D, _t117C);
            real _t117E = prim *0034 (x116C, _t117D);
            vec3 g117F = [_t1177, _t117B, _t117E];
            g116B = g117F;
            tensor[3,3] H1180;
            real x1181 = npos0F31[0];
            real y1182 = npos0F31[1];
            real z1183 = npos0F31[2];
            real _t118A = 0.e0;
            real _t118B = 0.2e1;
            real _t118C = prim *0034 (_t118B, y1182);
            real _t118D = prim *0034 (_t118C, z1183);
            int _t118E = 2;
            real _t118F = prim ^0068 (y1182, _t118E);
            vec3 _t1190 = [_t118A, _t118D, _t118F];
            real _t1191 = 0.2e1;
            real _t1192 = prim *0034 (_t1191, y1182);
            real _t1193 = prim *0034 (_t1192, z1183);
            real _t1194 = 0.2e1;
            real _t1195 = prim *0034 (_t1194, x1181);
            real _t1196 = prim *0034 (_t1195, z1183);
            real _t1197 = 0.2e1;
            real _t1198 = prim *0034 (_t1197, x1181);
            real _t1199 = prim *0034 (_t1198, y1182);
            vec3 _t119A = [_t1193, _t1196, _t1199];
            int _t119B = 2;
            real _t119C = prim ^0068 (y1182, _t119B);
            real _t119D = 0.2e1;
            real _t119E = prim *0034 (_t119D, x1181);
            real _t119F = prim *0034 (_t119E, y1182);
            real _t11A0 = 0.e0;
            vec3 _t11A1 = [_t119C, _t119F, _t11A0];
            tensor[3,3] hess11A2 = [_t1190, _t119A, _t11A1];
            H1180 = hess11A2;
            real[3] _t11A3 = prim evals009F (H1180);
            int _t11A4 = 2;
            real _t11A5 = prim $sub01C0<real; %3> (_t11A3, _t11A4);
            real _t11A6 = prim unary -008B<$[]> (_t11A5);
            real _t11A7 = prim |()|00B5<$[3]> (g116B);
            real _t11A8 = prim +0017<$[]> (fBias0501, _t11A7);
            real str11A9 = prim /0055 (_t11A6, _t11A8);
            _t116A = str11A9;
            _t115A = prim >=007E (_t116A, fStren0502);
          } else {
            _t115A = false;
          }
          _t113D = _t115A;
        } else {
          _t113D = false;
        }
        _t0F32 = _t113D;
        if _t0F32 {
          new particle (npos0F31, hh0F0A);
        }
        continue;
      }
      tensor[3,3] _t0F33 = func fPerp0EC6 (pos0F08);
      force0F1F = prim •00CE<$[3,3]; $[3]; $[3]> (_t0F33, force0F1F);
      vec3 es0F34 = prim *0036<$[3]> (hh0F0A, force0F1F);
      real _t0F35 = prim |()|00B5<$[3]> (es0F34);
      bool _t0F36 = prim >0080 (_t0F35, rad04FE);
      if _t0F36 {
        real _t0F37 = prim |()|00B5<$[3]> (es0F34);
        real _t0F38 = prim /0055 (rad04FE, _t0F37);
        hh0F0A = prim *0034 (hh0F0A, _t0F38);
        real _t0F39 = prim |()|00B5<$[3]> (es0F34);
        real _t0F3A = prim /0055 (rad04FE, _t0F39);
        es0F34 = prim *0038<$[3]> (es0F34, _t0F3A);
      }
      vec3 samplePos0F3B = prim +0017<$[3]> (pos0F08, es0F34);
      vec3 fs0F3C = func fStep0E94 (samplePos0F3B);
      real _t0F3D = prim |()|00B5<$[3]> (fs0F3C);
      real _t0F3E = prim |()|00B5<$[3]> (es0F34);
      real _t0F3F = prim /0055 (_t0F3D, _t0F3E);
      real _t0F40 = 0.5e0;
      bool _t0F41 = prim >0080 (_t0F3F, _t0F40);
      if _t0F41 {
        real _t0F42 = 0.5e0;
        hh0F0A = prim *0034 (hh0F0A, _t0F42);
        continue;
      }
      vec3 oldPos0F43 = pos0F08;
      vec3 up0F44 = prim +0017<$[3]> (fs0F3C, es0F34);
      pos0F08 = prim +0017<$[3]> (pos0F08, up0F44);
      _pos0F09 = pos0F08;
      particle[] _t0F45 = prim sphere0198<particle> (_pos0F09, rad04FE);
      real accum0F4A = 0.e0;
      foreach P0F46 in _t0F45 {
        vec3 _t0F47 = P0F46.pos0F08;
        vec3 _t0F48 = prim -0026<$[3]> (pos0F08, _t0F47);
        real _t0F49;
        real _t1136 = prim |()|00B5<$[3]> (_t0F48);
        real _t1137 = prim /0055 (_t1136, rad04FE);
        real _t1138;
        real _t1139 = 0.1e1;
        real _t113A = prim -0026<$[]> (_t1139, _t1137);
        int _t113B = 4;
        real _t113C = prim ^0068 (_t113A, _t113B);
        _t1138 = _t113C;
        _t0F49 = _t1138;
        accum0F4A = prim +0017<$[]> (accum0F4A, _t0F49);
      }
      real newE0F4B = accum0F4A;
      real _t0F4C = prim -0026<$[]> (newE0F4B, oldE0F1E);
      real _t0F4D = 0.5e0;
      vec3 _t0F4E = prim -0026<$[3]> (pos0F08, oldPos0F43);
      vec3 _t0F4F = prim *0036<$[3]> (_t0F4D, _t0F4E);
      vec3 _t0F50 = prim unary -008B<$[3]> (force0F1F);
      real _t0F51 = prim •00CE<$[3]; $[3]; $[]> (_t0F4F, _t0F50);
      bool _t0F52 = prim >0080 (_t0F4C, _t0F51);
      if _t0F52 {
        pos0F08 = oldPos0F43;
        _pos0F09 = pos0F08;
        real _t0F53 = 0.5e0;
        hh0F0A = prim *0034 (hh0F0A, _t0F53);
        continue;
      }
      real _t0F54 = 0.11e1;
      hh0F0A = prim *0034 (hh0F0A, _t0F54);
      step0F0B = up0F44;
      bool _t0F55;
      bool _t1129;
      real _t112A = pos0F08[0];
      real _t112B = pos0F08[0];
      bool _t112C = prim ==0084 (_t112A, _t112B);
      bool _t112D = prim !00BC (_t112C);
      if _t112D {
        _t1129 = true;
      } else {
        bool _t112E;
        real _t112F = pos0F08[1];
        real _t1130 = pos0F08[1];
        bool _t1131 = prim ==0084 (_t112F, _t1130);
        bool _t1132 = prim !00BC (_t1131);
        if _t1132 {
          _t112E = true;
        } else {
          real _t1133 = pos0F08[2];
          real _t1134 = pos0F08[2];
          bool _t1135 = prim ==0084 (_t1133, _t1134);
          _t112E = prim !00BC (_t1135);
        }
        _t1129 = _t112E;
      }
      _t0F55 = _t1129;
      if _t0F55 {
        die;
      }
      int _t0F56 = 5;
      bool _t0F57 = prim <0079 (nn0F20, _t0F56);
      if _t0F57 {
        real _t0F58 = 0.5e0;
        real _t0F59 = prim *0034 (_t0F58, rad04FE);
        vec3 _t0F5A = prim normalize0137<$[3]> (es0F34);
        vec3 _t0F5B = prim *0036<$[3]> (_t0F59, _t0F5A);
        vec3 npos0F5C = prim +0017<$[3]> (pos0F08, _t0F5B);
        bool _t0F5D;
        bool _t10BC;
        bool _t10BD;
        real _t10BE = 0.e0;
        real _t10BF = 0.e0;
        real _t10C0 = 0.e0;
        vec3 _t10C1 = [_t10BE, _t10BF, _t10C0];
        vec3 mid10C2 = prim -0026<$[3]> (npos0F5C, _t10C1);
        bool _t10C3;
        real _t10C4 = mid10C2[0];
        real _t10C5 = prim |()|00B5<$[]> (_t10C4);
        real _t10C6 = 0.1e0;
        bool _t10C7 = prim >0080 (_t10C5, _t10C6);
        if _t10C7 {
          bool _t10C8;
          real _t10C9 = mid10C2[1];
          real _t10CA = prim |()|00B5<$[]> (_t10C9);
          real _t10CB = 0.1e0;
          bool _t10CC = prim >0080 (_t10CA, _t10CB);
          if _t10CC {
            real _t10CD = mid10C2[2];
            real _t10CE = prim |()|00B5<$[]> (_t10CD);
            real _t10CF = 0.1e0;
            _t10C8 = prim >0080 (_t10CE, _t10CF);
          } else {
            _t10C8 = false;
          }
          _t10C3 = _t10C8;
        } else {
          _t10C3 = false;
        }
        bool z10D0 = _t10C3;
        bool _t10D1;
        real _t10D2 = prim |()|00B5<$[3]> (mid10C2);
        real _t10D3 = 0.5e1;
        bool _t10D4 = prim <007A (_t10D2, _t10D3);
        if _t10D4 {
          bool _t10D5;
          real _t10D6 = prim |()|00B5<$[3]> (mid10C2);
          real _t10D7 = 0.2e1;
          bool _t10D8 = prim >0080 (_t10D6, _t10D7);
          if _t10D8 {
            _t10D5 = z10D0;
          } else {
            _t10D5 = false;
          }
          _t10D1 = _t10D5;
        } else {
          _t10D1 = false;
        }
        _t10BD = _t10D1;
        if _t10BD {
          bool _t10D9;
          bool _t10DA;
          bool _t10DB;
          real _t10DC = npos0F5C[0];
          real _t10DD = npos0F5C[0];
          bool _t10DE = prim ==0084 (_t10DC, _t10DD);
          bool _t10DF = prim !00BC (_t10DE);
          if _t10DF {
            _t10DB = true;
          } else {
            bool _t10E0;
            real _t10E1 = npos0F5C[1];
            real _t10E2 = npos0F5C[1];
            bool _t10E3 = prim ==0084 (_t10E1, _t10E2);
            bool _t10E4 = prim !00BC (_t10E3);
            if _t10E4 {
              _t10E0 = true;
            } else {
              real _t10E5 = npos0F5C[2];
              real _t10E6 = npos0F5C[2];
              bool _t10E7 = prim ==0084 (_t10E5, _t10E6);
              _t10E0 = prim !00BC (_t10E7);
            }
            _t10DB = _t10E0;
          }
          _t10DA = _t10DB;
          bool _t10E8 = prim !00BC (_t10DA);
          if _t10E8 {
            real _t10E9;
            vec3 g10EA;
            real x10EB = npos0F5C[0];
            real y10EC = npos0F5C[1];
            real z10ED = npos0F5C[2];
            int _t10F4 = 2;
            real _t10F5 = prim ^0068 (y10EC, _t10F4);
            real _t10F6 = prim *0034 (_t10F5, z10ED);
            real _t10F7 = 0.2e1;
            real _t10F8 = prim *0034 (_t10F7, x10EB);
            real _t10F9 = prim *0034 (_t10F8, y10EC);
            real _t10FA = prim *0034 (_t10F9, z10ED);
            int _t10FB = 2;
            real _t10FC = prim ^0068 (y10EC, _t10FB);
            real _t10FD = prim *0034 (x10EB, _t10FC);
            vec3 g10FE = [_t10F6, _t10FA, _t10FD];
            g10EA = g10FE;
            tensor[3,3] H10FF;
            real x1100 = npos0F5C[0];
            real y1101 = npos0F5C[1];
            real z1102 = npos0F5C[2];
            real _t1109 = 0.e0;
            real _t110A = 0.2e1;
            real _t110B = prim *0034 (_t110A, y1101);
            real _t110C = prim *0034 (_t110B, z1102);
            int _t110D = 2;
            real _t110E = prim ^0068 (y1101, _t110D);
            vec3 _t110F = [_t1109, _t110C, _t110E];
            real _t1110 = 0.2e1;
            real _t1111 = prim *0034 (_t1110, y1101);
            real _t1112 = prim *0034 (_t1111, z1102);
            real _t1113 = 0.2e1;
            real _t1114 = prim *0034 (_t1113, x1100);
            real _t1115 = prim *0034 (_t1114, z1102);
            real _t1116 = 0.2e1;
            real _t1117 = prim *0034 (_t1116, x1100);
            real _t1118 = prim *0034 (_t1117, y1101);
            vec3 _t1119 = [_t1112, _t1115, _t1118];
            int _t111A = 2;
            real _t111B = prim ^0068 (y1101, _t111A);
            real _t111C = 0.2e1;
            real _t111D = prim *0034 (_t111C, x1100);
            real _t111E = prim *0034 (_t111D, y1101);
            real _t111F = 0.e0;
            vec3 _t1120 = [_t111B, _t111E, _t111F];
            tensor[3,3] hess1121 = [_t110F, _t1119, _t1120];
            H10FF = hess1121;
            real[3] _t1122 = prim evals009F (H10FF);
            int _t1123 = 2;
            real _t1124 = prim $sub01C0<real; %3> (_t1122, _t1123);
            real _t1125 = prim unary -008B<$[]> (_t1124);
            real _t1126 = prim |()|00B5<$[3]> (g10EA);
            real _t1127 = prim +0017<$[]> (fBias0501, _t1126);
            real str1128 = prim /0055 (_t1125, _t1127);
            _t10E9 = str1128;
            _t10D9 = prim >=007E (_t10E9, fStren0502);
          } else {
            _t10D9 = false;
          }
          _t10BC = _t10D9;
        } else {
          _t10BC = false;
        }
        _t0F5D = _t10BC;
        if _t0F5D {
          new particle (npos0F5C, hh0F0A);
        }
      }
    }
  }
}
collection {
  foreach x0F5E in ipos0504 {
    real _t0F5F = 0.1e1;
    new particle (x0F5E, _t0F5F);
  }
}
update {
  int res0F60= sum<int> { (P0F63) => {
      int _t0F64 = P0F63.test0F0E;
      return _t0F64;
    } (P0F61, P0F61)
  | P0F61 in all };
  int num0F66 = res0F60;
  int res0F67= max<int> { (P0F6A) => {
      int _t0F6B = P0F6A.steps0F10;
      return _t0F6B;
    } (P0F68, P0F68)
  | P0F68 in all };
  int steps0F6D = res0F67;
  int res0F6E= sum<int> { (P0F71) => {
      int _t0F72 = P0F71.testp0F0F;
      return _t0F72;
    } (P0F6F, P0F6F)
  | P0F6F in all };
  int numFound0F74 = res0F6E;
  bool res0F75= all { (P0F78) => {
      bool _t0F79 = P0F78.found0F0C;
      return _t0F79;
    } (P0F76, P0F76)
  | P0F76 in all };
  bool allFound0F7B = res0F75;
  real res0F7C= max<real> { (P0F80) => {
      vec3 _t0F81 = P0F80.step0F0B;
      real _t0F82 = prim |()|00B5<$[3]> (_t0F81);
      return _t0F82;
    } (P0F7D, P0F7D)
  | P0F7D in all };
  real maxStep0F84 = res0F7C;
  string _t0F85 = "One run:";
  string _t0F86 = " and ";
  real _t0F87 = prim /0055 (maxStep0F84, rad04FE);
  string _t0F88 = " and ";
  real _t0F89 = prim /0055 (maxStep0F84, rad04FE);
  bool _t0F8A = prim <007A (_t0F89, eps04FF);
  string _t0F8B = " and ";
  string _t0F8C = " of ";
  string _t0F8D = "\n";
  print (_t0F85, allFound0F7B, _t0F86, _t0F87, _t0F88, _t0F8A, _t0F8B, numFound0F74, _t0F8C, num0F66, _t0F8D);
  if allFound0F7B {
    real _t0F8E = prim /0055 (maxStep0F84, rad04FE);
    bool _t0F8F = prim <007A (_t0F8E, eps04FF);
    if _t0F8F {
      string _t0F90 = "CONVERGED!\n";
      print (_t0F90);
      stabilize_all;
    }
  }
  int _t0F91 = 2000;
  bool _t0F92 = prim >007F (steps0F6D, _t0F91);
  if _t0F92 {
    stabilize_all;
  }
  string _t0F93 = "Current steps:";
  string _t0F94 = "\n";
  print (_t0F93, steps0F6D, _t0F94);
}
/* Program end */
/* Simplified Program (after after simplify fem vars) start */
properties: GlobalInit,StabilizeAll,GlobalReduce,StrandSets,GlobalUpdate,NewStrands,StrandCommunication,StrandsMayDie,HasInputs,HasGlobals,ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
input FemData:Mesh meshData04EE;
input FemData:Space 0space04FA_intermedateGlobal04FB;
input FemData:FemFunc 0data04FC_intermedateGlobal04FD;
input real rad04FE = <default>;
input real eps04FF = <default>;
input real v00500 = <default>;
input real fBias0501 = <default>;
input real fStren0502 = <default>;
input real zfuz0503 = <default>;
input vec3[] ipos0504;
constants {
  rad04FE = 0.1e-1;
  eps04FF = 0.1e-1;
  v00500 = 0.625e-1;
  fBias0501 = 0.1e-1;
  fStren0502 = 0.1e-1;
  zfuz0503 = 0.1e-1;
}
function int[2]#6 nextCell405D9 (int faceIdx0A38, int cell0A39, Femdata: Mesh mesh0A3A)
{
  int _t0A3B = -1;
  bool _t0A3C = prim ==0082 (faceIdx0A38, _t0A3B);
  if _t0A3C {
    int _t0A3D = -1;
    int _t0A3E = -1;
    int[2] _t0A3F = {_t0A3D, _t0A3E};
    return _t0A3F;
  } else {
    int _t0A40 = 8;
    int _t0A41 = prim *0033 (cell0A39, _t0A40);
    int _t0A42 = 2;
    int _t0A43 = prim *0033 (faceIdx0A38, _t0A42);
    int _t0A44 = prim +0015 (_t0A41, _t0A43);
    int[2] _t0A45 = extractFemItemN((mesh0A3A, _t0A44),CellFaceCell(Mesh),);
    return _t0A45;
  }
}
function vec3#3 fStep0E94 (vec3 s0E95)
{
  vec3 g0E96;
  real x0FBB = s0E95[0];
  real y0FBC = s0E95[1];
  real z0FBD = s0E95[2];
  real _t0FBE = prim *0034 (x0FBB, x0FBB);
  real _t0FBF = prim *0034 (y0FBC, y0FBC);
  real _t0FC0 = prim +0017<$[]> (_t0FBE, _t0FBF);
  real _t0FC1 = prim *0034 (z0FBD, z0FBD);
  real _t0FC2 = prim +0017<$[]> (_t0FC0, _t0FC1);
  real p0FC3 = prim unary -008B<$[]> (_t0FC2);
  int _t0FC4 = 2;
  real _t0FC5 = prim ^0068 (y0FBC, _t0FC4);
  real _t0FC6 = prim *0034 (_t0FC5, z0FBD);
  real _t0FC7 = 0.2e1;
  real _t0FC8 = prim *0034 (_t0FC7, x0FBB);
  real _t0FC9 = prim *0034 (_t0FC8, y0FBC);
  real _t0FCA = prim *0034 (_t0FC9, z0FBD);
  int _t0FCB = 2;
  real _t0FCC = prim ^0068 (y0FBC, _t0FCB);
  real _t0FCD = prim *0034 (x0FBB, _t0FCC);
  vec3 g0FCE = [_t0FC6, _t0FCA, _t0FCD];
  g0E96 = g0FCE;
  tensor[3,3] H0E97;
  real x0F99 = s0E95[0];
  real y0F9A = s0E95[1];
  real z0F9B = s0E95[2];
  real _t0F9C = prim *0034 (x0F99, x0F99);
  real _t0F9D = prim *0034 (y0F9A, y0F9A);
  real _t0F9E = prim +0017<$[]> (_t0F9C, _t0F9D);
  real _t0F9F = prim *0034 (z0F9B, z0F9B);
  real _t0FA0 = prim +0017<$[]> (_t0F9E, _t0F9F);
  real p0FA1 = prim unary -008B<$[]> (_t0FA0);
  real _t0FA2 = 0.e0;
  real _t0FA3 = 0.2e1;
  real _t0FA4 = prim *0034 (_t0FA3, y0F9A);
  real _t0FA5 = prim *0034 (_t0FA4, z0F9B);
  int _t0FA6 = 2;
  real _t0FA7 = prim ^0068 (y0F9A, _t0FA6);
  vec3 _t0FA8 = [_t0FA2, _t0FA5, _t0FA7];
  real _t0FA9 = 0.2e1;
  real _t0FAA = prim *0034 (_t0FA9, y0F9A);
  real _t0FAB = prim *0034 (_t0FAA, z0F9B);
  real _t0FAC = 0.2e1;
  real _t0FAD = prim *0034 (_t0FAC, x0F99);
  real _t0FAE = prim *0034 (_t0FAD, z0F9B);
  real _t0FAF = 0.2e1;
  real _t0FB0 = prim *0034 (_t0FAF, x0F99);
  real _t0FB1 = prim *0034 (_t0FB0, y0F9A);
  vec3 _t0FB2 = [_t0FAB, _t0FAE, _t0FB1];
  int _t0FB3 = 2;
  real _t0FB4 = prim ^0068 (y0F9A, _t0FB3);
  real _t0FB5 = 0.2e1;
  real _t0FB6 = prim *0034 (_t0FB5, x0F99);
  real _t0FB7 = prim *0034 (_t0FB6, y0F9A);
  real _t0FB8 = 0.e0;
  vec3 _t0FB9 = [_t0FB4, _t0FB7, _t0FB8];
  tensor[3,3] hess0FBA = [_t0FA8, _t0FB2, _t0FB9];
  H0E97 = hess0FBA;
  vec3[3] E0E98 = prim evecs00A0 (H0E97);
  real[3] L0E99 = prim evals009F (H0E97);
  real _t0E9A = 0.1e1;
  int _t0E9B = 2;
  real _t0E9C = prim $sub01C0<real; %3> (L0E99, _t0E9B);
  real _t0E9D = prim /0055 (_t0E9A, _t0E9C);
  real _t0E9E = prim unary -008B<$[]> (_t0E9D);
  int _t0E9F = 2;
  vec3 _t0EA0 = prim $sub01C0<vec3; %3> (E0E98, _t0E9F);
  vec3 _t0EA1 = prim *0036<$[3]> (_t0E9E, _t0EA0);
  int _t0EA2 = 2;
  vec3 _t0EA3 = prim $sub01C0<vec3; %3> (E0E98, _t0EA2);
  tensor[3,3] _t0EA4 = prim ⊗00E5<$[3]; $[3]; $[3,3]> (_t0EA1, _t0EA3);
  vec3 up0EA5 = prim •00CE<$[3,3]; $[3]; $[3]> (_t0EA4, g0E96);
  bool _t0EA6;
  real _t0EA7 = up0EA5[0];
  real _t0EA8 = up0EA5[0];
  bool _t0EA9 = prim ==0084 (_t0EA7, _t0EA8);
  bool _t0EAA = prim !00BC (_t0EA9);
  if _t0EAA {
    _t0EA6 = true;
  } else {
    bool _t0EAB;
    real _t0EAC = up0EA5[1];
    real _t0EAD = up0EA5[1];
    bool _t0EAE = prim ==0084 (_t0EAC, _t0EAD);
    bool _t0EAF = prim !00BC (_t0EAE);
    if _t0EAF {
      _t0EAB = true;
    } else {
      real _t0EB0 = up0EA5[2];
      real _t0EB1 = up0EA5[2];
      bool _t0EB2 = prim ==0084 (_t0EB0, _t0EB1);
      _t0EAB = prim !00BC (_t0EB2);
    }
    _t0EA6 = _t0EAB;
  }
  if _t0EA6 {
    real _t0EB3 = +inf;
    real _t0EB4 = +inf;
    real _t0EB5 = +inf;
    vec3 _t0EB6 = [_t0EB3, _t0EB4, _t0EB5];
    return _t0EB6;
  }
  return up0EA5;
}
function tensor[3,3]#1 fPerp0EC6 (vec3 s0EC7)
{
  vec3 g0EC8;
  real x0FF1 = s0EC7[0];
  real y0FF2 = s0EC7[1];
  real z0FF3 = s0EC7[2];
  real _t0FF4 = prim *0034 (x0FF1, x0FF1);
  real _t0FF5 = prim *0034 (y0FF2, y0FF2);
  real _t0FF6 = prim +0017<$[]> (_t0FF4, _t0FF5);
  real _t0FF7 = prim *0034 (z0FF3, z0FF3);
  real _t0FF8 = prim +0017<$[]> (_t0FF6, _t0FF7);
  real p0FF9 = prim unary -008B<$[]> (_t0FF8);
  int _t0FFA = 2;
  real _t0FFB = prim ^0068 (y0FF2, _t0FFA);
  real _t0FFC = prim *0034 (_t0FFB, z0FF3);
  real _t0FFD = 0.2e1;
  real _t0FFE = prim *0034 (_t0FFD, x0FF1);
  real _t0FFF = prim *0034 (_t0FFE, y0FF2);
  real _t1000 = prim *0034 (_t0FFF, z0FF3);
  int _t1001 = 2;
  real _t1002 = prim ^0068 (y0FF2, _t1001);
  real _t1003 = prim *0034 (x0FF1, _t1002);
  vec3 g1004 = [_t0FFC, _t1000, _t1003];
  g0EC8 = g1004;
  tensor[3,3] H0EC9;
  real x0FCF = s0EC7[0];
  real y0FD0 = s0EC7[1];
  real z0FD1 = s0EC7[2];
  real _t0FD2 = prim *0034 (x0FCF, x0FCF);
  real _t0FD3 = prim *0034 (y0FD0, y0FD0);
  real _t0FD4 = prim +0017<$[]> (_t0FD2, _t0FD3);
  real _t0FD5 = prim *0034 (z0FD1, z0FD1);
  real _t0FD6 = prim +0017<$[]> (_t0FD4, _t0FD5);
  real p0FD7 = prim unary -008B<$[]> (_t0FD6);
  real _t0FD8 = 0.e0;
  real _t0FD9 = 0.2e1;
  real _t0FDA = prim *0034 (_t0FD9, y0FD0);
  real _t0FDB = prim *0034 (_t0FDA, z0FD1);
  int _t0FDC = 2;
  real _t0FDD = prim ^0068 (y0FD0, _t0FDC);
  vec3 _t0FDE = [_t0FD8, _t0FDB, _t0FDD];
  real _t0FDF = 0.2e1;
  real _t0FE0 = prim *0034 (_t0FDF, y0FD0);
  real _t0FE1 = prim *0034 (_t0FE0, z0FD1);
  real _t0FE2 = 0.2e1;
  real _t0FE3 = prim *0034 (_t0FE2, x0FCF);
  real _t0FE4 = prim *0034 (_t0FE3, z0FD1);
  real _t0FE5 = 0.2e1;
  real _t0FE6 = prim *0034 (_t0FE5, x0FCF);
  real _t0FE7 = prim *0034 (_t0FE6, y0FD0);
  vec3 _t0FE8 = [_t0FE1, _t0FE4, _t0FE7];
  int _t0FE9 = 2;
  real _t0FEA = prim ^0068 (y0FD0, _t0FE9);
  real _t0FEB = 0.2e1;
  real _t0FEC = prim *0034 (_t0FEB, x0FCF);
  real _t0FED = prim *0034 (_t0FEC, y0FD0);
  real _t0FEE = 0.e0;
  vec3 _t0FEF = [_t0FEA, _t0FED, _t0FEE];
  tensor[3,3] hess0FF0 = [_t0FDE, _t0FE8, _t0FEF];
  H0EC9 = hess0FF0;
  vec3[3] _t0ECA = prim evecs00A0 (H0EC9);
  int _t0ECB = 2;
  vec3 E20ECC = prim $sub01C0<vec3; %3> (_t0ECA, _t0ECB);
  tensor[3,3] _t0ECD = prim $id01B9<%3> ();
  tensor[3,3] _t0ECE = prim ⊗00E5<$[3]; $[3]; $[3,3]> (E20ECC, E20ECC);
  tensor[3,3] m0ECF = prim -0026<$[3,3]> (_t0ECD, _t0ECE);
  real t0ED0 = prim :00FC<$[3,3]; $[3,3]; $[]> (m0ECF, m0ECF);
  bool _t0ED1 = prim ==0084 (t0ED0, t0ED0);
  bool _t0ED2 = prim !00BC (_t0ED1);
  if _t0ED2 {
    tensor[3,3] _t0ED3 = prim $zero01BB<$[3,3]> ();
    return _t0ED3;
  }
  return m0ECF;
}
globalInit {
  int _t04F2 = 0;
  int _t04F0 = 1;
  int _t04F4 = extractFemItem(NumCell(Mesh), int, meshData04EE);
  int _t04F3 = prim -0024 (_t04F4, _t04F0);
  int[] _t04F7 = prim $range01C3 (_t04F2, _t04F3);
  Femdata: MeshCell[] _t04F8 = {};
  foreach _t04F6 in _t04F7 {
    Femdata: MeshCell _t04F9 = loadFem(MeshCell, meshData04EE, _t04F6);
    _t04F8 = prim @0010<Femdata: MeshCell> (_t04F8, _t04F9);
  }
}
strand particle (vec3 pos00F06, real hh00F07) in 3D {
  output vec3 pos0F08;
  output vec3 _pos0F09;
  real hh0F0A;
  vec3 step0F0B;
  bool found0F0C;
  int nfs0F0D;
  int test0F0E;
  int testp0F0F;
  int steps0F10;
  {
    pos0F08 = pos00F06;
    _pos0F09 = pos0F08;
    hh0F0A = hh00F07;
    step0F0B = prim $zero01BB<$[3]> ();
    found0F0C = false;
    nfs0F0D = 0;
    test0F0E = 1;
    testp0F0F = 0;
    steps0F10 = 0;
  }
  update
  {
    int _t0F11 = 1;
    steps0F10 = prim +0015 (steps0F10, _t0F11);
    bool _t0F12;
    bool _t11CE;
    bool _t11CF;
    real _t11D0 = 0.e0;
    real _t11D1 = 0.e0;
    real _t11D2 = 0.e0;
    vec3 _t11D3 = [_t11D0, _t11D1, _t11D2];
    vec3 mid11D4 = prim -0026<$[3]> (pos0F08, _t11D3);
    bool _t11D5;
    real _t11D6 = mid11D4[0];
    real _t11D7 = prim |()|00B5<$[]> (_t11D6);
    real _t11D8 = 0.1e0;
    bool _t11D9 = prim >0080 (_t11D7, _t11D8);
    if _t11D9 {
      bool _t11DA;
      real _t11DB = mid11D4[1];
      real _t11DC = prim |()|00B5<$[]> (_t11DB);
      real _t11DD = 0.1e0;
      bool _t11DE = prim >0080 (_t11DC, _t11DD);
      if _t11DE {
        real _t11DF = mid11D4[2];
        real _t11E0 = prim |()|00B5<$[]> (_t11DF);
        real _t11E1 = 0.1e0;
        _t11DA = prim >0080 (_t11E0, _t11E1);
      } else {
        _t11DA = false;
      }
      _t11D5 = _t11DA;
    } else {
      _t11D5 = false;
    }
    bool z11E2 = _t11D5;
    bool _t11E3;
    real _t11E4 = prim |()|00B5<$[3]> (mid11D4);
    real _t11E5 = 0.5e1;
    bool _t11E6 = prim <007A (_t11E4, _t11E5);
    if _t11E6 {
      bool _t11E7;
      real _t11E8 = prim |()|00B5<$[3]> (mid11D4);
      real _t11E9 = 0.2e1;
      bool _t11EA = prim >0080 (_t11E8, _t11E9);
      if _t11EA {
        _t11E7 = z11E2;
      } else {
        _t11E7 = false;
      }
      _t11E3 = _t11E7;
    } else {
      _t11E3 = false;
    }
    _t11CF = _t11E3;
    if _t11CF {
      bool _t11EB;
      bool _t11EC;
      bool _t11ED;
      real _t11EE = pos0F08[0];
      real _t11EF = pos0F08[0];
      bool _t11F0 = prim ==0084 (_t11EE, _t11EF);
      bool _t11F1 = prim !00BC (_t11F0);
      if _t11F1 {
        _t11ED = true;
      } else {
        bool _t11F2;
        real _t11F3 = pos0F08[1];
        real _t11F4 = pos0F08[1];
        bool _t11F5 = prim ==0084 (_t11F3, _t11F4);
        bool _t11F6 = prim !00BC (_t11F5);
        if _t11F6 {
          _t11F2 = true;
        } else {
          real _t11F7 = pos0F08[2];
          real _t11F8 = pos0F08[2];
          bool _t11F9 = prim ==0084 (_t11F7, _t11F8);
          _t11F2 = prim !00BC (_t11F9);
        }
        _t11ED = _t11F2;
      }
      _t11EC = _t11ED;
      bool _t11FA = prim !00BC (_t11EC);
      if _t11FA {
        real _t11FB;
        vec3 g11FC;
        real x11FD = pos0F08[0];
        real y11FE = pos0F08[1];
        real z11FF = pos0F08[2];
        int _t1206 = 2;
        real _t1207 = prim ^0068 (y11FE, _t1206);
        real _t1208 = prim *0034 (_t1207, z11FF);
        real _t1209 = 0.2e1;
        real _t120A = prim *0034 (_t1209, x11FD);
        real _t120B = prim *0034 (_t120A, y11FE);
        real _t120C = prim *0034 (_t120B, z11FF);
        int _t120D = 2;
        real _t120E = prim ^0068 (y11FE, _t120D);
        real _t120F = prim *0034 (x11FD, _t120E);
        vec3 g1210 = [_t1208, _t120C, _t120F];
        g11FC = g1210;
        tensor[3,3] H1211;
        real x1212 = pos0F08[0];
        real y1213 = pos0F08[1];
        real z1214 = pos0F08[2];
        real _t121B = 0.e0;
        real _t121C = 0.2e1;
        real _t121D = prim *0034 (_t121C, y1213);
        real _t121E = prim *0034 (_t121D, z1214);
        int _t121F = 2;
        real _t1220 = prim ^0068 (y1213, _t121F);
        vec3 _t1221 = [_t121B, _t121E, _t1220];
        real _t1222 = 0.2e1;
        real _t1223 = prim *0034 (_t1222, y1213);
        real _t1224 = prim *0034 (_t1223, z1214);
        real _t1225 = 0.2e1;
        real _t1226 = prim *0034 (_t1225, x1212);
        real _t1227 = prim *0034 (_t1226, z1214);
        real _t1228 = 0.2e1;
        real _t1229 = prim *0034 (_t1228, x1212);
        real _t122A = prim *0034 (_t1229, y1213);
        vec3 _t122B = [_t1224, _t1227, _t122A];
        int _t122C = 2;
        real _t122D = prim ^0068 (y1213, _t122C);
        real _t122E = 0.2e1;
        real _t122F = prim *0034 (_t122E, x1212);
        real _t1230 = prim *0034 (_t122F, y1213);
        real _t1231 = 0.e0;
        vec3 _t1232 = [_t122D, _t1230, _t1231];
        tensor[3,3] hess1233 = [_t1221, _t122B, _t1232];
        H1211 = hess1233;
        real[3] _t1234 = prim evals009F (H1211);
        int _t1235 = 2;
        real _t1236 = prim $sub01C0<real; %3> (_t1234, _t1235);
        real _t1237 = prim unary -008B<$[]> (_t1236);
        real _t1238 = prim |()|00B5<$[3]> (g11FC);
        real _t1239 = prim +0017<$[]> (fBias0501, _t1238);
        real str123A = prim /0055 (_t1237, _t1239);
        _t11FB = str123A;
        _t11EB = prim >=007E (_t11FB, fStren0502);
      } else {
        _t11EB = false;
      }
      _t11CE = _t11EB;
    } else {
      _t11CE = false;
    }
    _t0F12 = _t11CE;
    bool _t0F13 = prim !00BC (_t0F12);
    if _t0F13 {
      die;
    }
    bool _t0F14 = prim !00BC (found0F0C);
    if _t0F14 {
      step0F0B = func fStep0E94 (pos0F08);
      pos0F08 = prim +0017<$[3]> (pos0F08, step0F0B);
      _pos0F09 = pos0F08;
      bool _t0F15;
      bool _t10AF;
      real _t10B0 = pos0F08[0];
      real _t10B1 = pos0F08[0];
      bool _t10B2 = prim ==0084 (_t10B0, _t10B1);
      bool _t10B3 = prim !00BC (_t10B2);
      if _t10B3 {
        _t10AF = true;
      } else {
        bool _t10B4;
        real _t10B5 = pos0F08[1];
        real _t10B6 = pos0F08[1];
        bool _t10B7 = prim ==0084 (_t10B5, _t10B6);
        bool _t10B8 = prim !00BC (_t10B7);
        if _t10B8 {
          _t10B4 = true;
        } else {
          real _t10B9 = pos0F08[2];
          real _t10BA = pos0F08[2];
          bool _t10BB = prim ==0084 (_t10B9, _t10BA);
          _t10B4 = prim !00BC (_t10BB);
        }
        _t10AF = _t10B4;
      }
      _t0F15 = _t10AF;
      if _t0F15 {
        die;
      }
      real _t0F16 = prim |()|00B5<$[3]> (step0F0B);
      real _t0F17 = prim /0055 (_t0F16, rad04FE);
      bool _t0F18 = prim >0080 (_t0F17, eps04FF);
      if _t0F18 {
        int _t0F19 = 1;
        nfs0F0D = prim +0015 (nfs0F0D, _t0F19);
        int _t0F1A = 10;
        bool _t0F1B = prim >007F (nfs0F0D, _t0F1A);
        if _t0F1B {
          die;
        }
      } else {
        found0F0C = true;
        testp0F0F = 1;
      }
    } else {
      vec3 _t0F1C = func fStep0E94 (pos0F08);
      pos0F08 = prim +0017<$[3]> (pos0F08, _t0F1C);
      _pos0F09 = pos0F08;
      bool _t0F1D;
      bool _t11C1;
      real _t11C2 = pos0F08[0];
      real _t11C3 = pos0F08[0];
      bool _t11C4 = prim ==0084 (_t11C2, _t11C3);
      bool _t11C5 = prim !00BC (_t11C4);
      if _t11C5 {
        _t11C1 = true;
      } else {
        bool _t11C6;
        real _t11C7 = pos0F08[1];
        real _t11C8 = pos0F08[1];
        bool _t11C9 = prim ==0084 (_t11C7, _t11C8);
        bool _t11CA = prim !00BC (_t11C9);
        if _t11CA {
          _t11C6 = true;
        } else {
          real _t11CB = pos0F08[2];
          real _t11CC = pos0F08[2];
          bool _t11CD = prim ==0084 (_t11CB, _t11CC);
          _t11C6 = prim !00BC (_t11CD);
        }
        _t11C1 = _t11C6;
      }
      _t0F1D = _t11C1;
      if _t0F1D {
        die;
      }
      step0F0B = prim $zero01BB<$[3]> ();
      real oldE0F1E = 0.e0;
      vec3 force0F1F = prim $zero01BB<$[3]> ();
      int nn0F20 = 0;
      particle[] _t0F21 = prim sphere0198<particle> (_pos0F09, rad04FE);
      foreach P0F22 in _t0F21 {
        vec3 _t0F23 = P0F22.pos0F08;
        vec3 _t0F24 = prim -0026<$[3]> (_t0F23, pos0F08);
        real _t0F25;
        real _t11BA = prim |()|00B5<$[3]> (_t0F24);
        real _t11BB = prim /0055 (_t11BA, rad04FE);
        real _t11BC;
        real _t11BD = 0.1e1;
        real _t11BE = prim -0026<$[]> (_t11BD, _t11BB);
        int _t11BF = 4;
        real _t11C0 = prim ^0068 (_t11BE, _t11BF);
        _t11BC = _t11C0;
        _t0F25 = _t11BC;
        oldE0F1E = prim +0017<$[]> (oldE0F1E, _t0F25);
        vec3 _t0F26 = P0F22.pos0F08;
        vec3 _t0F27 = prim -0026<$[3]> (_t0F26, pos0F08);
        vec3 _t0F28;
        real _t11AA = prim |()|00B5<$[3]> (_t0F27);
        real _t11AB = prim /0055 (_t11AA, rad04FE);
        real _t11AC;
        int _t11AD = -4;
        real _t11AE = (real)_t11AD;
        real _t11AF = 0.1e1;
        real _t11B0 = prim -0026<$[]> (_t11AF, _t11AB);
        int _t11B1 = 3;
        real _t11B2 = prim ^0068 (_t11B0, _t11B1);
        real _t11B3 = prim *0034 (_t11AE, _t11B2);
        _t11AC = _t11B3;
        real _t11B4 = 0.1e1;
        real _t11B5 = prim /0055 (_t11B4, rad04FE);
        real _t11B6 = prim *0034 (_t11AC, _t11B5);
        vec3 _t11B7 = prim *0036<$[3]> (_t11B6, _t0F27);
        real _t11B8 = prim |()|00B5<$[3]> (_t0F27);
        vec3 _t11B9 = prim /0057<$[3]> (_t11B7, _t11B8);
        _t0F28 = _t11B9;
        force0F1F = prim +0017<$[3]> (force0F1F, _t0F28);
        int _t0F29 = 1;
        nn0F20 = prim +0015 (nn0F20, _t0F29);
      }
      int _t0F2A = 0;
      bool _t0F2B = prim ==0082 (_t0F2A, nn0F20);
      if _t0F2B {
        real _t0F2C = 0.5e0;
        real _t0F2D = prim *0034 (_t0F2C, rad04FE);
        real _t0F2E = 0.e0;
        real _t0F2F = 0.e0;
        vec3 _t0F30 = [_t0F2D, _t0F2E, _t0F2F];
        vec3 npos0F31 = prim +0017<$[3]> (pos0F08, _t0F30);
        bool _t0F32;
        bool _t113D;
        bool _t113E;
        real _t113F = 0.e0;
        real _t1140 = 0.e0;
        real _t1141 = 0.e0;
        vec3 _t1142 = [_t113F, _t1140, _t1141];
        vec3 mid1143 = prim -0026<$[3]> (npos0F31, _t1142);
        bool _t1144;
        real _t1145 = mid1143[0];
        real _t1146 = prim |()|00B5<$[]> (_t1145);
        real _t1147 = 0.1e0;
        bool _t1148 = prim >0080 (_t1146, _t1147);
        if _t1148 {
          bool _t1149;
          real _t114A = mid1143[1];
          real _t114B = prim |()|00B5<$[]> (_t114A);
          real _t114C = 0.1e0;
          bool _t114D = prim >0080 (_t114B, _t114C);
          if _t114D {
            real _t114E = mid1143[2];
            real _t114F = prim |()|00B5<$[]> (_t114E);
            real _t1150 = 0.1e0;
            _t1149 = prim >0080 (_t114F, _t1150);
          } else {
            _t1149 = false;
          }
          _t1144 = _t1149;
        } else {
          _t1144 = false;
        }
        bool z1151 = _t1144;
        bool _t1152;
        real _t1153 = prim |()|00B5<$[3]> (mid1143);
        real _t1154 = 0.5e1;
        bool _t1155 = prim <007A (_t1153, _t1154);
        if _t1155 {
          bool _t1156;
          real _t1157 = prim |()|00B5<$[3]> (mid1143);
          real _t1158 = 0.2e1;
          bool _t1159 = prim >0080 (_t1157, _t1158);
          if _t1159 {
            _t1156 = z1151;
          } else {
            _t1156 = false;
          }
          _t1152 = _t1156;
        } else {
          _t1152 = false;
        }
        _t113E = _t1152;
        if _t113E {
          bool _t115A;
          bool _t115B;
          bool _t115C;
          real _t115D = npos0F31[0];
          real _t115E = npos0F31[0];
          bool _t115F = prim ==0084 (_t115D, _t115E);
          bool _t1160 = prim !00BC (_t115F);
          if _t1160 {
            _t115C = true;
          } else {
            bool _t1161;
            real _t1162 = npos0F31[1];
            real _t1163 = npos0F31[1];
            bool _t1164 = prim ==0084 (_t1162, _t1163);
            bool _t1165 = prim !00BC (_t1164);
            if _t1165 {
              _t1161 = true;
            } else {
              real _t1166 = npos0F31[2];
              real _t1167 = npos0F31[2];
              bool _t1168 = prim ==0084 (_t1166, _t1167);
              _t1161 = prim !00BC (_t1168);
            }
            _t115C = _t1161;
          }
          _t115B = _t115C;
          bool _t1169 = prim !00BC (_t115B);
          if _t1169 {
            real _t116A;
            vec3 g116B;
            real x116C = npos0F31[0];
            real y116D = npos0F31[1];
            real z116E = npos0F31[2];
            int _t1175 = 2;
            real _t1176 = prim ^0068 (y116D, _t1175);
            real _t1177 = prim *0034 (_t1176, z116E);
            real _t1178 = 0.2e1;
            real _t1179 = prim *0034 (_t1178, x116C);
            real _t117A = prim *0034 (_t1179, y116D);
            real _t117B = prim *0034 (_t117A, z116E);
            int _t117C = 2;
            real _t117D = prim ^0068 (y116D, _t117C);
            real _t117E = prim *0034 (x116C, _t117D);
            vec3 g117F = [_t1177, _t117B, _t117E];
            g116B = g117F;
            tensor[3,3] H1180;
            real x1181 = npos0F31[0];
            real y1182 = npos0F31[1];
            real z1183 = npos0F31[2];
            real _t118A = 0.e0;
            real _t118B = 0.2e1;
            real _t118C = prim *0034 (_t118B, y1182);
            real _t118D = prim *0034 (_t118C, z1183);
            int _t118E = 2;
            real _t118F = prim ^0068 (y1182, _t118E);
            vec3 _t1190 = [_t118A, _t118D, _t118F];
            real _t1191 = 0.2e1;
            real _t1192 = prim *0034 (_t1191, y1182);
            real _t1193 = prim *0034 (_t1192, z1183);
            real _t1194 = 0.2e1;
            real _t1195 = prim *0034 (_t1194, x1181);
            real _t1196 = prim *0034 (_t1195, z1183);
            real _t1197 = 0.2e1;
            real _t1198 = prim *0034 (_t1197, x1181);
            real _t1199 = prim *0034 (_t1198, y1182);
            vec3 _t119A = [_t1193, _t1196, _t1199];
            int _t119B = 2;
            real _t119C = prim ^0068 (y1182, _t119B);
            real _t119D = 0.2e1;
            real _t119E = prim *0034 (_t119D, x1181);
            real _t119F = prim *0034 (_t119E, y1182);
            real _t11A0 = 0.e0;
            vec3 _t11A1 = [_t119C, _t119F, _t11A0];
            tensor[3,3] hess11A2 = [_t1190, _t119A, _t11A1];
            H1180 = hess11A2;
            real[3] _t11A3 = prim evals009F (H1180);
            int _t11A4 = 2;
            real _t11A5 = prim $sub01C0<real; %3> (_t11A3, _t11A4);
            real _t11A6 = prim unary -008B<$[]> (_t11A5);
            real _t11A7 = prim |()|00B5<$[3]> (g116B);
            real _t11A8 = prim +0017<$[]> (fBias0501, _t11A7);
            real str11A9 = prim /0055 (_t11A6, _t11A8);
            _t116A = str11A9;
            _t115A = prim >=007E (_t116A, fStren0502);
          } else {
            _t115A = false;
          }
          _t113D = _t115A;
        } else {
          _t113D = false;
        }
        _t0F32 = _t113D;
        if _t0F32 {
          new particle (npos0F31, hh0F0A);
        }
        continue;
      }
      tensor[3,3] _t0F33 = func fPerp0EC6 (pos0F08);
      force0F1F = prim •00CE<$[3,3]; $[3]; $[3]> (_t0F33, force0F1F);
      vec3 es0F34 = prim *0036<$[3]> (hh0F0A, force0F1F);
      real _t0F35 = prim |()|00B5<$[3]> (es0F34);
      bool _t0F36 = prim >0080 (_t0F35, rad04FE);
      if _t0F36 {
        real _t0F37 = prim |()|00B5<$[3]> (es0F34);
        real _t0F38 = prim /0055 (rad04FE, _t0F37);
        hh0F0A = prim *0034 (hh0F0A, _t0F38);
        real _t0F39 = prim |()|00B5<$[3]> (es0F34);
        real _t0F3A = prim /0055 (rad04FE, _t0F39);
        es0F34 = prim *0038<$[3]> (es0F34, _t0F3A);
      }
      vec3 samplePos0F3B = prim +0017<$[3]> (pos0F08, es0F34);
      vec3 fs0F3C = func fStep0E94 (samplePos0F3B);
      real _t0F3D = prim |()|00B5<$[3]> (fs0F3C);
      real _t0F3E = prim |()|00B5<$[3]> (es0F34);
      real _t0F3F = prim /0055 (_t0F3D, _t0F3E);
      real _t0F40 = 0.5e0;
      bool _t0F41 = prim >0080 (_t0F3F, _t0F40);
      if _t0F41 {
        real _t0F42 = 0.5e0;
        hh0F0A = prim *0034 (hh0F0A, _t0F42);
        continue;
      }
      vec3 oldPos0F43 = pos0F08;
      vec3 up0F44 = prim +0017<$[3]> (fs0F3C, es0F34);
      pos0F08 = prim +0017<$[3]> (pos0F08, up0F44);
      _pos0F09 = pos0F08;
      particle[] _t0F45 = prim sphere0198<particle> (_pos0F09, rad04FE);
      real accum0F4A = 0.e0;
      foreach P0F46 in _t0F45 {
        vec3 _t0F47 = P0F46.pos0F08;
        vec3 _t0F48 = prim -0026<$[3]> (pos0F08, _t0F47);
        real _t0F49;
        real _t1136 = prim |()|00B5<$[3]> (_t0F48);
        real _t1137 = prim /0055 (_t1136, rad04FE);
        real _t1138;
        real _t1139 = 0.1e1;
        real _t113A = prim -0026<$[]> (_t1139, _t1137);
        int _t113B = 4;
        real _t113C = prim ^0068 (_t113A, _t113B);
        _t1138 = _t113C;
        _t0F49 = _t1138;
        accum0F4A = prim +0017<$[]> (accum0F4A, _t0F49);
      }
      real newE0F4B = accum0F4A;
      real _t0F4C = prim -0026<$[]> (newE0F4B, oldE0F1E);
      real _t0F4D = 0.5e0;
      vec3 _t0F4E = prim -0026<$[3]> (pos0F08, oldPos0F43);
      vec3 _t0F4F = prim *0036<$[3]> (_t0F4D, _t0F4E);
      vec3 _t0F50 = prim unary -008B<$[3]> (force0F1F);
      real _t0F51 = prim •00CE<$[3]; $[3]; $[]> (_t0F4F, _t0F50);
      bool _t0F52 = prim >0080 (_t0F4C, _t0F51);
      if _t0F52 {
        pos0F08 = oldPos0F43;
        _pos0F09 = pos0F08;
        real _t0F53 = 0.5e0;
        hh0F0A = prim *0034 (hh0F0A, _t0F53);
        continue;
      }
      real _t0F54 = 0.11e1;
      hh0F0A = prim *0034 (hh0F0A, _t0F54);
      step0F0B = up0F44;
      bool _t0F55;
      bool _t1129;
      real _t112A = pos0F08[0];
      real _t112B = pos0F08[0];
      bool _t112C = prim ==0084 (_t112A, _t112B);
      bool _t112D = prim !00BC (_t112C);
      if _t112D {
        _t1129 = true;
      } else {
        bool _t112E;
        real _t112F = pos0F08[1];
        real _t1130 = pos0F08[1];
        bool _t1131 = prim ==0084 (_t112F, _t1130);
        bool _t1132 = prim !00BC (_t1131);
        if _t1132 {
          _t112E = true;
        } else {
          real _t1133 = pos0F08[2];
          real _t1134 = pos0F08[2];
          bool _t1135 = prim ==0084 (_t1133, _t1134);
          _t112E = prim !00BC (_t1135);
        }
        _t1129 = _t112E;
      }
      _t0F55 = _t1129;
      if _t0F55 {
        die;
      }
      int _t0F56 = 5;
      bool _t0F57 = prim <0079 (nn0F20, _t0F56);
      if _t0F57 {
        real _t0F58 = 0.5e0;
        real _t0F59 = prim *0034 (_t0F58, rad04FE);
        vec3 _t0F5A = prim normalize0137<$[3]> (es0F34);
        vec3 _t0F5B = prim *0036<$[3]> (_t0F59, _t0F5A);
        vec3 npos0F5C = prim +0017<$[3]> (pos0F08, _t0F5B);
        bool _t0F5D;
        bool _t10BC;
        bool _t10BD;
        real _t10BE = 0.e0;
        real _t10BF = 0.e0;
        real _t10C0 = 0.e0;
        vec3 _t10C1 = [_t10BE, _t10BF, _t10C0];
        vec3 mid10C2 = prim -0026<$[3]> (npos0F5C, _t10C1);
        bool _t10C3;
        real _t10C4 = mid10C2[0];
        real _t10C5 = prim |()|00B5<$[]> (_t10C4);
        real _t10C6 = 0.1e0;
        bool _t10C7 = prim >0080 (_t10C5, _t10C6);
        if _t10C7 {
          bool _t10C8;
          real _t10C9 = mid10C2[1];
          real _t10CA = prim |()|00B5<$[]> (_t10C9);
          real _t10CB = 0.1e0;
          bool _t10CC = prim >0080 (_t10CA, _t10CB);
          if _t10CC {
            real _t10CD = mid10C2[2];
            real _t10CE = prim |()|00B5<$[]> (_t10CD);
            real _t10CF = 0.1e0;
            _t10C8 = prim >0080 (_t10CE, _t10CF);
          } else {
            _t10C8 = false;
          }
          _t10C3 = _t10C8;
        } else {
          _t10C3 = false;
        }
        bool z10D0 = _t10C3;
        bool _t10D1;
        real _t10D2 = prim |()|00B5<$[3]> (mid10C2);
        real _t10D3 = 0.5e1;
        bool _t10D4 = prim <007A (_t10D2, _t10D3);
        if _t10D4 {
          bool _t10D5;
          real _t10D6 = prim |()|00B5<$[3]> (mid10C2);
          real _t10D7 = 0.2e1;
          bool _t10D8 = prim >0080 (_t10D6, _t10D7);
          if _t10D8 {
            _t10D5 = z10D0;
          } else {
            _t10D5 = false;
          }
          _t10D1 = _t10D5;
        } else {
          _t10D1 = false;
        }
        _t10BD = _t10D1;
        if _t10BD {
          bool _t10D9;
          bool _t10DA;
          bool _t10DB;
          real _t10DC = npos0F5C[0];
          real _t10DD = npos0F5C[0];
          bool _t10DE = prim ==0084 (_t10DC, _t10DD);
          bool _t10DF = prim !00BC (_t10DE);
          if _t10DF {
            _t10DB = true;
          } else {
            bool _t10E0;
            real _t10E1 = npos0F5C[1];
            real _t10E2 = npos0F5C[1];
            bool _t10E3 = prim ==0084 (_t10E1, _t10E2);
            bool _t10E4 = prim !00BC (_t10E3);
            if _t10E4 {
              _t10E0 = true;
            } else {
              real _t10E5 = npos0F5C[2];
              real _t10E6 = npos0F5C[2];
              bool _t10E7 = prim ==0084 (_t10E5, _t10E6);
              _t10E0 = prim !00BC (_t10E7);
            }
            _t10DB = _t10E0;
          }
          _t10DA = _t10DB;
          bool _t10E8 = prim !00BC (_t10DA);
          if _t10E8 {
            real _t10E9;
            vec3 g10EA;
            real x10EB = npos0F5C[0];
            real y10EC = npos0F5C[1];
            real z10ED = npos0F5C[2];
            int _t10F4 = 2;
            real _t10F5 = prim ^0068 (y10EC, _t10F4);
            real _t10F6 = prim *0034 (_t10F5, z10ED);
            real _t10F7 = 0.2e1;
            real _t10F8 = prim *0034 (_t10F7, x10EB);
            real _t10F9 = prim *0034 (_t10F8, y10EC);
            real _t10FA = prim *0034 (_t10F9, z10ED);
            int _t10FB = 2;
            real _t10FC = prim ^0068 (y10EC, _t10FB);
            real _t10FD = prim *0034 (x10EB, _t10FC);
            vec3 g10FE = [_t10F6, _t10FA, _t10FD];
            g10EA = g10FE;
            tensor[3,3] H10FF;
            real x1100 = npos0F5C[0];
            real y1101 = npos0F5C[1];
            real z1102 = npos0F5C[2];
            real _t1109 = 0.e0;
            real _t110A = 0.2e1;
            real _t110B = prim *0034 (_t110A, y1101);
            real _t110C = prim *0034 (_t110B, z1102);
            int _t110D = 2;
            real _t110E = prim ^0068 (y1101, _t110D);
            vec3 _t110F = [_t1109, _t110C, _t110E];
            real _t1110 = 0.2e1;
            real _t1111 = prim *0034 (_t1110, y1101);
            real _t1112 = prim *0034 (_t1111, z1102);
            real _t1113 = 0.2e1;
            real _t1114 = prim *0034 (_t1113, x1100);
            real _t1115 = prim *0034 (_t1114, z1102);
            real _t1116 = 0.2e1;
            real _t1117 = prim *0034 (_t1116, x1100);
            real _t1118 = prim *0034 (_t1117, y1101);
            vec3 _t1119 = [_t1112, _t1115, _t1118];
            int _t111A = 2;
            real _t111B = prim ^0068 (y1101, _t111A);
            real _t111C = 0.2e1;
            real _t111D = prim *0034 (_t111C, x1100);
            real _t111E = prim *0034 (_t111D, y1101);
            real _t111F = 0.e0;
            vec3 _t1120 = [_t111B, _t111E, _t111F];
            tensor[3,3] hess1121 = [_t110F, _t1119, _t1120];
            H10FF = hess1121;
            real[3] _t1122 = prim evals009F (H10FF);
            int _t1123 = 2;
            real _t1124 = prim $sub01C0<real; %3> (_t1122, _t1123);
            real _t1125 = prim unary -008B<$[]> (_t1124);
            real _t1126 = prim |()|00B5<$[3]> (g10EA);
            real _t1127 = prim +0017<$[]> (fBias0501, _t1126);
            real str1128 = prim /0055 (_t1125, _t1127);
            _t10E9 = str1128;
            _t10D9 = prim >=007E (_t10E9, fStren0502);
          } else {
            _t10D9 = false;
          }
          _t10BC = _t10D9;
        } else {
          _t10BC = false;
        }
        _t0F5D = _t10BC;
        if _t0F5D {
          new particle (npos0F5C, hh0F0A);
        }
      }
    }
  }
}
collection {
  foreach x0F5E in ipos0504 {
    real _t0F5F = 0.1e1;
    new particle (x0F5E, _t0F5F);
  }
}
update {
  int res0F60= sum<int> { (P0F63) => {
      int _t0F64 = P0F63.test0F0E;
      return _t0F64;
    } (P0F61, P0F61)
  | P0F61 in all };
  int num0F66 = res0F60;
  int res0F67= max<int> { (P0F6A) => {
      int _t0F6B = P0F6A.steps0F10;
      return _t0F6B;
    } (P0F68, P0F68)
  | P0F68 in all };
  int steps0F6D = res0F67;
  int res0F6E= sum<int> { (P0F71) => {
      int _t0F72 = P0F71.testp0F0F;
      return _t0F72;
    } (P0F6F, P0F6F)
  | P0F6F in all };
  int numFound0F74 = res0F6E;
  bool res0F75= all { (P0F78) => {
      bool _t0F79 = P0F78.found0F0C;
      return _t0F79;
    } (P0F76, P0F76)
  | P0F76 in all };
  bool allFound0F7B = res0F75;
  real res0F7C= max<real> { (P0F80) => {
      vec3 _t0F81 = P0F80.step0F0B;
      real _t0F82 = prim |()|00B5<$[3]> (_t0F81);
      return _t0F82;
    } (P0F7D, P0F7D)
  | P0F7D in all };
  real maxStep0F84 = res0F7C;
  string _t0F85 = "One run:";
  string _t0F86 = " and ";
  real _t0F87 = prim /0055 (maxStep0F84, rad04FE);
  string _t0F88 = " and ";
  real _t0F89 = prim /0055 (maxStep0F84, rad04FE);
  bool _t0F8A = prim <007A (_t0F89, eps04FF);
  string _t0F8B = " and ";
  string _t0F8C = " of ";
  string _t0F8D = "\n";
  print (_t0F85, allFound0F7B, _t0F86, _t0F87, _t0F88, _t0F8A, _t0F8B, numFound0F74, _t0F8C, num0F66, _t0F8D);
  if allFound0F7B {
    real _t0F8E = prim /0055 (maxStep0F84, rad04FE);
    bool _t0F8F = prim <007A (_t0F8E, eps04FF);
    if _t0F8F {
      string _t0F90 = "CONVERGED!\n";
      print (_t0F90);
      stabilize_all;
    }
  }
  int _t0F91 = 2000;
  bool _t0F92 = prim >007F (steps0F6D, _t0F91);
  if _t0F92 {
    stabilize_all;
  }
  string _t0F93 = "Current steps:";
  string _t0F94 = "\n";
  print (_t0F93, steps0F6D, _t0F94);
}
/* Program end */
##### high-ir: after simple-to-high translation ####
## properties
  GlobalInit StabilizeAll GlobalReduce StrandSets GlobalUpdate NewStrands StrandCommunication StrandsMayDie HasInputs HasGlobals ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
## globals
  input meshData123B (meshData) = <no-default>
  input 0space04FA_intermedateGlobal123C (space) = <no-default>
  input 0data04FC_intermedateGlobal123D (data) = <no-default>
  input rad123E (rad) = <default>
  input eps123F (eps) = <default>
  input v01240 (v0) = <default>
  input fBias1241 (fBias) = <default>
  input fStren1242 (fStren) = <default>
  input zfuz1243 (zfuz) = <default>
  input ipos1244 (ipos) = <no-default>
## functions
  function real max13F0 (particle P13E8#1) {
    ENTRY13EF:  preds = []
      tensor[3] _t13E9#1 = P13E8.step;
      real _t13EC#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (_t13E9);
      return _t13EC
}
  function bool all13E7 (particle P13E1#1) {
    ENTRY13E6:  preds = []
      bool _t13E2#1 = P13E1.found;
      return _t13E2
}
  function int sum13E0 (particle P13DA#1) {
    ENTRY13DF:  preds = []
      int _t13DB#1 = P13DA.testp;
      return _t13DB
}
  function int max13D9 (particle P13D3#1) {
    ENTRY13D8:  preds = []
      int _t13D4#1 = P13D3.steps;
      return _t13D4
}
  function int sum13D2 (particle P13CC#1) {
    ENTRY13D1:  preds = []
      int _t13CD#1 = P13CC.test;
      return _t13CD
}
  function int[2] nextCell41278 (int faceIdx1259#2, int cell125A#1, femData:Mesh mesh125B#1) {
    ENTRY1277:  preds = []
      int _t125C#1 = -1;
      bool _t125E#1 = EQ<int>(faceIdx1259,_t125C);
      if _t125E then goto ASSIGN1262 else goto ASSIGN1269
    ASSIGN1262:  preds = [COND1275]
      int _t1261#1 = -1;
      int _t1263#1 = -1;
      int[2] _t1265#1 = <int[2]>{_t1261,_t1263};
      return _t1265
      goto JOIN1260
    JOIN1260:  preds = [*RETURN(_t1265)1267,*RETURN(_t1272)1274]
      unreachable
    ASSIGN1269:  preds = [COND1275]
      int _t1268#1 = 8;
      int _t126A#1 = IMul(cell125A,_t1268);
      int _t126C#1 = 2;
      int _t126E#1 = IMul(faceIdx1259,_t126C);
      int _t1270#1 = IAdd(_t126A,_t126E);
      int[2] _t1272#1 = ExtractFemItemN<[femData:Mesh,int],int[2],CellFaceCell(Mesh),0000,"",[],int>(mesh125B,_t1270);
      return _t1272
      goto JOIN1260
}
  function tensor[3] fStep133D (tensor[3] s1279#6) {
    ENTRY133C:  preds = []
      real x127B#4 = TensorIndex<tensor[3],[0]>(s1279);
      real y127D#5 = TensorIndex<tensor[3],[1]>(s1279);
      real z127F#4 = TensorIndex<tensor[3],[2]>(s1279);
      real _t1281#1 = λ(T0[],T1[])<(T0 * T1)> (x127B,x127B);
      real _t1283#1 = λ(T0[],T1[])<(T0 * T1)> (y127D,y127D);
      real _t1285#1 = λ(T0[],T1[])<(T0 + T1)> (_t1281,_t1283);
      real _t1287#1 = λ(T0[],T1[])<(T0 * T1)> (z127F,z127F);
      real _t1289#1 = λ(T0[],T1[])<(T0 + T1)> (_t1285,_t1287);
      real p128B#0 = λ(T0[])<Neg(T0)> (_t1289);
      int _t128D#0 = 2;
      real _t128F#1 = λ(T0[])<(T0)^2> (y127D);
      real _t1291#1 = λ(T0[],T1[])<(T0 * T1)> (_t128F,z127F);
      real _t1293#1 = 0.2e1;
      real _t1295#1 = λ(T0[],T1[])<(T0 * T1)> (_t1293,x127B);
      real _t1297#1 = λ(T0[],T1[])<(T0 * T1)> (_t1295,y127D);
      real _t1299#1 = λ(T0[],T1[])<(T0 * T1)> (_t1297,z127F);
      int _t129B#0 = 2;
      real _t129D#1 = λ(T0[])<(T0)^2> (y127D);
      real _t129F#1 = λ(T0[],T1[])<(T0 * T1)> (x127B,_t129D);
      tensor[3] g12A1#1 = <tensor[3]>[_t1291,_t1299,_t129F];
      tensor[3] g12A3#1 = g12A1;
      real x12A6#5 = TensorIndex<tensor[3],[0]>(s1279);
      real y12A8#8 = TensorIndex<tensor[3],[1]>(s1279);
      real z12AA#5 = TensorIndex<tensor[3],[2]>(s1279);
      real _t12AC#1 = λ(T0[],T1[])<(T0 * T1)> (x12A6,x12A6);
      real _t12AE#1 = λ(T0[],T1[])<(T0 * T1)> (y12A8,y12A8);
      real _t12B0#1 = λ(T0[],T1[])<(T0 + T1)> (_t12AC,_t12AE);
      real _t12B2#1 = λ(T0[],T1[])<(T0 * T1)> (z12AA,z12AA);
      real _t12B4#1 = λ(T0[],T1[])<(T0 + T1)> (_t12B0,_t12B2);
      real p12B6#0 = λ(T0[])<Neg(T0)> (_t12B4);
      real _t12B8#1 = 0.e0;
      real _t12BA#1 = 0.2e1;
      real _t12BC#1 = λ(T0[],T1[])<(T0 * T1)> (_t12BA,y12A8);
      real _t12BE#1 = λ(T0[],T1[])<(T0 * T1)> (_t12BC,z12AA);
      int _t12C0#0 = 2;
      real _t12C2#1 = λ(T0[])<(T0)^2> (y12A8);
      tensor[3] _t12C4#1 = <tensor[3]>[_t12B8,_t12BE,_t12C2];
      real _t12C6#1 = 0.2e1;
      real _t12C8#1 = λ(T0[],T1[])<(T0 * T1)> (_t12C6,y12A8);
      real _t12CA#1 = λ(T0[],T1[])<(T0 * T1)> (_t12C8,z12AA);
      real _t12CC#1 = 0.2e1;
      real _t12CE#1 = λ(T0[],T1[])<(T0 * T1)> (_t12CC,x12A6);
      real _t12D0#1 = λ(T0[],T1[])<(T0 * T1)> (_t12CE,z12AA);
      real _t12D2#1 = 0.2e1;
      real _t12D4#1 = λ(T0[],T1[])<(T0 * T1)> (_t12D2,x12A6);
      real _t12D6#1 = λ(T0[],T1[])<(T0 * T1)> (_t12D4,y12A8);
      tensor[3] _t12D8#1 = <tensor[3]>[_t12CA,_t12D0,_t12D6];
      int _t12DA#0 = 2;
      real _t12DC#1 = λ(T0[])<(T0)^2> (y12A8);
      real _t12DE#1 = 0.2e1;
      real _t12E0#1 = λ(T0[],T1[])<(T0 * T1)> (_t12DE,x12A6);
      real _t12E2#1 = λ(T0[],T1[])<(T0 * T1)> (_t12E0,y12A8);
      real _t12E4#1 = 0.e0;
      tensor[3] _t12E6#1 = <tensor[3]>[_t12DC,_t12E2,_t12E4];
      tensor[3,3] hess12E8#1 = <tensor[3,3]>[_t12C4,_t12D8,_t12E6];
      tensor[3,3] H12EA#2 = hess12E8;
      (real[3] evals12ED#0,tensor[3][3] E12EC#2) = Eigen3x3(H12EA);
      (real[3] L12EF#1,tensor[3][3] evecs12F0#0) = Eigen3x3(H12EA);
      real _t12F2#1 = 0.1e1;
      int _t12F4#1 = 2;
      real _t12F6#1 = Subscript<real[3]>(L12EF,_t12F4);
      real _t12F8#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t12F2,_t12F6);
      real _t12FA#1 = λ(T0[])<Neg(T0)> (_t12F8);
      int _t12FC#1 = 2;
      tensor[3] _t12FE#1 = Subscript<tensor[3][3]>(E12EC,_t12FC);
      tensor[3] _t1300#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (_t12FA,_t12FE);
      int _t1302#1 = 2;
      tensor[3] _t1304#1 = Subscript<tensor[3][3]>(E12EC,_t1302);
      tensor[3,3] _t1306#1 = λ(T0[3],T1[3])<(T0_{i0} * T1_{i1})>_{3 3} (_t1300,_t1304);
      tensor[3] up1308#7 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (_t1306,g12A3);
      real _t130B#1 = TensorIndex<tensor[3],[0]>(up1308);
      real _t130D#1 = TensorIndex<tensor[3],[0]>(up1308);
      bool _t130F#1 = EQ<real>(_t130B,_t130D);
      bool _t1311#1 = BNot(_t130F);
      if _t1311 then goto ASSIGN1316 else goto ASSIGN1319
    ASSIGN1316:  preds = [COND132F]
      bool _t1314#1 = true;
      goto JOIN1313
    JOIN1313:  preds = [ASSIGN1316,ASSIGN132E]
      bool _t1315#1 = phi(_t1314,_t132D)
      if _t1315 then goto ASSIGN1332 else goto JOIN1330
    ASSIGN1332:  preds = [COND133A]
      real _t1331#1 = +inf;
      real _t1333#1 = +inf;
      real _t1335#1 = +inf;
      tensor[3] _t1337#1 = <tensor[3]>[_t1331,_t1333,_t1335];
      return _t1337
      goto JOIN1330
    JOIN1330:  preds = [*RETURN(_t1337)1339,COND133A]
      return up1308
    ASSIGN1319:  preds = [COND132F]
      real _t1318#1 = TensorIndex<tensor[3],[1]>(up1308);
      real _t131A#1 = TensorIndex<tensor[3],[1]>(up1308);
      bool _t131C#1 = EQ<real>(_t1318,_t131A);
      bool _t131E#1 = BNot(_t131C);
      if _t131E then goto ASSIGN1323 else goto ASSIGN1325
    ASSIGN1323:  preds = [COND132C]
      bool _t1321#1 = true;
      goto JOIN1320
    JOIN1320:  preds = [ASSIGN1323,ASSIGN132B]
      bool _t1322#1 = phi(_t1321,_t132A)
      bool _t132D#1 = _t1322;
      goto JOIN1313
    ASSIGN1325:  preds = [COND132C]
      real _t1324#1 = TensorIndex<tensor[3],[2]>(up1308);
      real _t1326#1 = TensorIndex<tensor[3],[2]>(up1308);
      bool _t1328#1 = EQ<real>(_t1324,_t1326);
      bool _t132A#1 = BNot(_t1328);
      goto JOIN1320
}
  function tensor[3,3] fPerp13CB (tensor[3] s133E#6) {
    ENTRY13CA:  preds = []
      real x1340#4 = TensorIndex<tensor[3],[0]>(s133E);
      real y1342#5 = TensorIndex<tensor[3],[1]>(s133E);
      real z1344#4 = TensorIndex<tensor[3],[2]>(s133E);
      real _t1346#1 = λ(T0[],T1[])<(T0 * T1)> (x1340,x1340);
      real _t1348#1 = λ(T0[],T1[])<(T0 * T1)> (y1342,y1342);
      real _t134A#1 = λ(T0[],T1[])<(T0 + T1)> (_t1346,_t1348);
      real _t134C#1 = λ(T0[],T1[])<(T0 * T1)> (z1344,z1344);
      real _t134E#1 = λ(T0[],T1[])<(T0 + T1)> (_t134A,_t134C);
      real p1350#0 = λ(T0[])<Neg(T0)> (_t134E);
      int _t1352#0 = 2;
      real _t1354#1 = λ(T0[])<(T0)^2> (y1342);
      real _t1356#1 = λ(T0[],T1[])<(T0 * T1)> (_t1354,z1344);
      real _t1358#1 = 0.2e1;
      real _t135A#1 = λ(T0[],T1[])<(T0 * T1)> (_t1358,x1340);
      real _t135C#1 = λ(T0[],T1[])<(T0 * T1)> (_t135A,y1342);
      real _t135E#1 = λ(T0[],T1[])<(T0 * T1)> (_t135C,z1344);
      int _t1360#0 = 2;
      real _t1362#1 = λ(T0[])<(T0)^2> (y1342);
      real _t1364#1 = λ(T0[],T1[])<(T0 * T1)> (x1340,_t1362);
      tensor[3] g1366#1 = <tensor[3]>[_t1356,_t135E,_t1364];
      tensor[3] g1368#0 = g1366;
      real x136B#5 = TensorIndex<tensor[3],[0]>(s133E);
      real y136D#8 = TensorIndex<tensor[3],[1]>(s133E);
      real z136F#5 = TensorIndex<tensor[3],[2]>(s133E);
      real _t1371#1 = λ(T0[],T1[])<(T0 * T1)> (x136B,x136B);
      real _t1373#1 = λ(T0[],T1[])<(T0 * T1)> (y136D,y136D);
      real _t1375#1 = λ(T0[],T1[])<(T0 + T1)> (_t1371,_t1373);
      real _t1377#1 = λ(T0[],T1[])<(T0 * T1)> (z136F,z136F);
      real _t1379#1 = λ(T0[],T1[])<(T0 + T1)> (_t1375,_t1377);
      real p137B#0 = λ(T0[])<Neg(T0)> (_t1379);
      real _t137D#1 = 0.e0;
      real _t137F#1 = 0.2e1;
      real _t1381#1 = λ(T0[],T1[])<(T0 * T1)> (_t137F,y136D);
      real _t1383#1 = λ(T0[],T1[])<(T0 * T1)> (_t1381,z136F);
      int _t1385#0 = 2;
      real _t1387#1 = λ(T0[])<(T0)^2> (y136D);
      tensor[3] _t1389#1 = <tensor[3]>[_t137D,_t1383,_t1387];
      real _t138B#1 = 0.2e1;
      real _t138D#1 = λ(T0[],T1[])<(T0 * T1)> (_t138B,y136D);
      real _t138F#1 = λ(T0[],T1[])<(T0 * T1)> (_t138D,z136F);
      real _t1391#1 = 0.2e1;
      real _t1393#1 = λ(T0[],T1[])<(T0 * T1)> (_t1391,x136B);
      real _t1395#1 = λ(T0[],T1[])<(T0 * T1)> (_t1393,z136F);
      real _t1397#1 = 0.2e1;
      real _t1399#1 = λ(T0[],T1[])<(T0 * T1)> (_t1397,x136B);
      real _t139B#1 = λ(T0[],T1[])<(T0 * T1)> (_t1399,y136D);
      tensor[3] _t139D#1 = <tensor[3]>[_t138F,_t1395,_t139B];
      int _t139F#0 = 2;
      real _t13A1#1 = λ(T0[])<(T0)^2> (y136D);
      real _t13A3#1 = 0.2e1;
      real _t13A5#1 = λ(T0[],T1[])<(T0 * T1)> (_t13A3,x136B);
      real _t13A7#1 = λ(T0[],T1[])<(T0 * T1)> (_t13A5,y136D);
      real _t13A9#1 = 0.e0;
      tensor[3] _t13AB#1 = <tensor[3]>[_t13A1,_t13A7,_t13A9];
      tensor[3,3] hess13AD#1 = <tensor[3,3]>[_t1389,_t139D,_t13AB];
      tensor[3,3] H13AF#1 = hess13AD;
      (real[3] evals13B2#0,tensor[3][3] _t13B1#1) = Eigen3x3(H13AF);
      int _t13B4#1 = 2;
      tensor[3] E213B6#2 = Subscript<tensor[3][3]>(_t13B1,_t13B4);
      tensor[3,3] _t13B8#1 = λ()<δ_{i0,i1}>_{3 3} ();
      tensor[3,3] _t13BA#1 = λ(T0[3],T1[3])<(T0_{i0} * T1_{i1})>_{3 3} (E213B6,E213B6);
      tensor[3,3] m13BC#3 = λ(T0[3 3],T1[3 3])<(T0_{i0,i1}) - (T1_{i0,i1})>_{3 3} (_t13B8,_t13BA);
      real t13BE#2 = λ(T0[3 3],T1[3 3])<Σ(i0=0..2)(i1=0..2)<((T0_{i0,i1} * T1_{i0,i1}))>(i0=0..2)(i1=0..2)> (m13BC,m13BC);
      bool _t13C0#1 = EQ<real>(t13BE,t13BE);
      bool _t13C2#1 = BNot(_t13C0);
      if _t13C2 then goto ASSIGN13C6 else goto JOIN13C4
    ASSIGN13C6:  preds = [COND13C8]
      tensor[3,3] _t13C5#1 = λ()<Z_{i0,i1}>_{3 3} ();
      return _t13C5
      goto JOIN13C4
    JOIN13C4:  preds = [*RETURN(_t13C5)13C7,COND13C8]
      return m13BC
}
## input initialization
  ENTRY1257:  preds = []
    real rad1245#1 = 0.1e-1;
    globals.rad123E = rad1245;
    real eps1248#1 = 0.1e-1;
    globals.eps123F = eps1248;
    real v0124B#1 = 0.625e-1;
    globals.v01240 = v0124B;
    real fBias124E#1 = 0.1e-1;
    globals.fBias1241 = fBias124E;
    real fStren1251#1 = 0.1e-1;
    globals.fStren1242 = fStren1251;
    real zfuz1254#1 = 0.1e-1;
    globals.zfuz1243 = zfuz1254;
    return
## global-variable initialization
  ENTRY1407:  preds = []
    femData:Mesh meshData13F1#2 = globals.meshData123B;
    int _t13F3#1 = 0;
    int _t13F5#1 = 1;
    int _t13F7#1 = ExtractFemItem<int,NumCell(Mesh)>(meshData13F1);
    int _t13F9#1 = ISub(_t13F7,_t13F5);
    int[] _t13FB#1 = Range(_t13F3,_t13F9);
    femData:MeshCell[] _t13FD#1 = <femData:MeshCell[]>{};
  FOREACH1401:  preds = [ASSIGN13FE,NEXT1406]
    foreach (_t13FF in _t13FB) on exit goto RETURN1408
      femData:MeshCell[] _t1400#1 = phi(_t13FD,_t1404)
    femData:MeshCell _t1402#1 = LoadFem<femData:MeshCell>(meshData13F1,_t13FF);
    femData:MeshCell[] _t1404#1 = Append<femData:MeshCell>(_t1400,_t1402);
    goto FOREACH1401
  RETURN1408:  preds = [FOREACH1401]
    return
## strand
  strand particle (tensor[3] pos01413#1, real hh01414#1) in 3D
    state:
      output tensor[3] pos;
      output tensor[3] _pos;
      real hh;
      tensor[3] step;
      bool found;
      int nfs;
      int test;
      int testp;
      int steps;
    state init
      ENTRY1434:  preds = []
        tensor[3] pos1422#2 = pos01413;
        tensor[3] _pos1424#1 = pos1422;
        real hh1426#1 = hh01414;
        tensor[3] step1428#1 = λ()<Z_{i0}>_{3} ();
        bool found142A#1 = false;
        int nfs142C#1 = 0;
        int test142E#1 = 1;
        int testp1430#1 = 0;
        int steps1432#1 = 0;
        self.pos = pos1422;
        self._pos = _pos1424;
        self.hh = hh1426;
        self.step = step1428;
        self.found = found142A;
        self.nfs = nfs142C;
        self.test = test142E;
        self.testp = testp1430;
        self.steps = steps1432;
        return
    end state init
    method update
        ENTRY191B:  preds = []
          real rad1442#12 = globals.rad123E;
          real eps1441#1 = globals.eps123F;
          real fBias1440#3 = globals.fBias1241;
          real fStren143F#3 = globals.fStren1242;
          tensor[3] pos1447#17 = self.pos;
          tensor[3] _pos1448#0 = self._pos;
          real hh1449#6 = self.hh;
          tensor[3] step144A#0 = self.step;
          bool found144B#6 = self.found;
          int nfs144C#6 = self.nfs;
          int test144D#0 = self.test;
          int testp144E#5 = self.testp;
          int steps144F#1 = self.steps;
          int _t1459#1 = 1;
          int steps145B#4 = IAdd(steps144F,_t1459);
          real _t1460#1 = 0.e0;
          real _t1462#1 = 0.e0;
          real _t1464#1 = 0.e0;
          tensor[3] _t1466#1 = <tensor[3]>[_t1460,_t1462,_t1464];
          tensor[3] mid1468#5 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (pos1447,_t1466);
          real _t146B#1 = TensorIndex<tensor[3],[0]>(mid1468);
          real _t146D#1 = λ(T0[])<Abs(T0)> (_t146B);
          real _t146F#1 = 0.1e0;
          bool _t1471#1 = GT<real>(_t146D,_t146F);
          if _t1471 then goto ASSIGN1476 else goto ASSIGN148E
        ASSIGN1476:  preds = [COND148F]
          real _t1475#1 = TensorIndex<tensor[3],[1]>(mid1468);
          real _t1477#1 = λ(T0[])<Abs(T0)> (_t1475);
          real _t1479#1 = 0.1e0;
          bool _t147B#1 = GT<real>(_t1477,_t1479);
          if _t147B then goto ASSIGN147F else goto ASSIGN1488
        ASSIGN147F:  preds = [COND1489]
          real _t147E#1 = TensorIndex<tensor[3],[2]>(mid1468);
          real _t1480#1 = λ(T0[])<Abs(T0)> (_t147E);
          real _t1482#1 = 0.1e0;
          bool _t1484#1 = GT<real>(_t1480,_t1482);
          goto JOIN147D
        JOIN147D:  preds = [ASSIGN1486,ASSIGN1488]
          bool _t1485#1 = phi(_t1484,_t1487)
          bool _t148A#1 = _t1485;
          goto JOIN1473
        JOIN1473:  preds = [ASSIGN148C,ASSIGN148E]
          bool _t148B#1 = phi(_t148A,_t148D)
          bool z1490#1 = _t148B;
          real _t1493#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (mid1468);
          real _t1495#1 = 0.5e1;
          bool _t1497#1 = LT<real>(_t1493,_t1495);
          if _t1497 then goto ASSIGN149C else goto ASSIGN14AC
        ASSIGN149C:  preds = [COND14AD]
          real _t149B#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (mid1468);
          real _t149D#1 = 0.2e1;
          bool _t149F#1 = GT<real>(_t149B,_t149D);
          if _t149F then goto ASSIGN14A4 else goto ASSIGN14A6
        ASSIGN14A4:  preds = [COND14A7]
          bool _t14A2#1 = z1490;
          goto JOIN14A1
        JOIN14A1:  preds = [ASSIGN14A4,ASSIGN14A6]
          bool _t14A3#1 = phi(_t14A2,_t14A5)
          bool _t14A8#1 = _t14A3;
          goto JOIN1499
        JOIN1499:  preds = [ASSIGN14AA,ASSIGN14AC]
          bool _t14A9#1 = phi(_t14A8,_t14AB)
          bool _t14AE#1 = _t14A9;
          if _t14AE then goto ASSIGN14B5 else goto ASSIGN1554
        ASSIGN14B5:  preds = [COND1555]
          real _t14B4#1 = TensorIndex<tensor[3],[0]>(pos1447);
          real _t14B6#1 = TensorIndex<tensor[3],[0]>(pos1447);
          bool _t14B8#1 = EQ<real>(_t14B4,_t14B6);
          bool _t14BA#1 = BNot(_t14B8);
          if _t14BA then goto ASSIGN14BF else goto ASSIGN14C2
        ASSIGN14BF:  preds = [COND14D8]
          bool _t14BD#1 = true;
          goto JOIN14BC
        JOIN14BC:  preds = [ASSIGN14BF,ASSIGN14D7]
          bool _t14BE#1 = phi(_t14BD,_t14D6)
          bool _t14D9#1 = _t14BE;
          bool _t14DB#1 = BNot(_t14D9);
          if _t14DB then goto ASSIGN14E1 else goto ASSIGN154E
        ASSIGN14E1:  preds = [COND154F]
          real x14E0#2 = TensorIndex<tensor[3],[0]>(pos1447);
          real y14E2#3 = TensorIndex<tensor[3],[1]>(pos1447);
          real z14E4#2 = TensorIndex<tensor[3],[2]>(pos1447);
          int _t14E6#0 = 2;
          real _t14E8#1 = λ(T0[])<(T0)^2> (y14E2);
          real _t14EA#1 = λ(T0[],T1[])<(T0 * T1)> (_t14E8,z14E4);
          real _t14EC#1 = 0.2e1;
          real _t14EE#1 = λ(T0[],T1[])<(T0 * T1)> (_t14EC,x14E0);
          real _t14F0#1 = λ(T0[],T1[])<(T0 * T1)> (_t14EE,y14E2);
          real _t14F2#1 = λ(T0[],T1[])<(T0 * T1)> (_t14F0,z14E4);
          int _t14F4#0 = 2;
          real _t14F6#1 = λ(T0[])<(T0)^2> (y14E2);
          real _t14F8#1 = λ(T0[],T1[])<(T0 * T1)> (x14E0,_t14F6);
          tensor[3] g14FA#1 = <tensor[3]>[_t14EA,_t14F2,_t14F8];
          tensor[3] g14FC#1 = g14FA;
          real x14FF#3 = TensorIndex<tensor[3],[0]>(pos1447);
          real y1501#6 = TensorIndex<tensor[3],[1]>(pos1447);
          real z1503#3 = TensorIndex<tensor[3],[2]>(pos1447);
          real _t1505#1 = 0.e0;
          real _t1507#1 = 0.2e1;
          real _t1509#1 = λ(T0[],T1[])<(T0 * T1)> (_t1507,y1501);
          real _t150B#1 = λ(T0[],T1[])<(T0 * T1)> (_t1509,z1503);
          int _t150D#0 = 2;
          real _t150F#1 = λ(T0[])<(T0)^2> (y1501);
          tensor[3] _t1511#1 = <tensor[3]>[_t1505,_t150B,_t150F];
          real _t1513#1 = 0.2e1;
          real _t1515#1 = λ(T0[],T1[])<(T0 * T1)> (_t1513,y1501);
          real _t1517#1 = λ(T0[],T1[])<(T0 * T1)> (_t1515,z1503);
          real _t1519#1 = 0.2e1;
          real _t151B#1 = λ(T0[],T1[])<(T0 * T1)> (_t1519,x14FF);
          real _t151D#1 = λ(T0[],T1[])<(T0 * T1)> (_t151B,z1503);
          real _t151F#1 = 0.2e1;
          real _t1521#1 = λ(T0[],T1[])<(T0 * T1)> (_t151F,x14FF);
          real _t1523#1 = λ(T0[],T1[])<(T0 * T1)> (_t1521,y1501);
          tensor[3] _t1525#1 = <tensor[3]>[_t1517,_t151D,_t1523];
          int _t1527#0 = 2;
          real _t1529#1 = λ(T0[])<(T0)^2> (y1501);
          real _t152B#1 = 0.2e1;
          real _t152D#1 = λ(T0[],T1[])<(T0 * T1)> (_t152B,x14FF);
          real _t152F#1 = λ(T0[],T1[])<(T0 * T1)> (_t152D,y1501);
          real _t1531#1 = 0.e0;
          tensor[3] _t1533#1 = <tensor[3]>[_t1529,_t152F,_t1531];
          tensor[3,3] hess1535#1 = <tensor[3,3]>[_t1511,_t1525,_t1533];
          tensor[3,3] H1537#1 = hess1535;
          (real[3] _t1539#1,tensor[3][3] evecs153A#0) = Eigen3x3(H1537);
          int _t153C#1 = 2;
          real _t153E#1 = Subscript<real[3]>(_t1539,_t153C);
          real _t1540#1 = λ(T0[])<Neg(T0)> (_t153E);
          real _t1542#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (g14FC);
          real _t1544#1 = λ(T0[],T1[])<(T0 + T1)> (fBias1440,_t1542);
          real str1546#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t1540,_t1544);
          real _t1548#1 = str1546;
          bool _t154A#1 = GTE<real>(_t1548,fStren143F);
          goto JOIN14DD
        JOIN14DD:  preds = [ASSIGN154C,ASSIGN154E]
          bool _t154B#1 = phi(_t154A,_t154D)
          bool _t1550#1 = _t154B;
          goto JOIN14B0
        JOIN14B0:  preds = [ASSIGN1552,ASSIGN1554]
          bool _t1551#1 = phi(_t1550,_t1553)
          bool _t1556#1 = _t1551;
          bool _t1558#1 = BNot(_t1556);
          if _t1558 then goto DIE155B else goto JOIN155A
        DIE155B:  preds = [COND155C]
          die
          goto JOIN155A
        JOIN155A:  preds = [*DIE155B,COND155C]
          bool _t155D#1 = BNot(found144B);
          if _t155D then goto ASSIGN1562 else goto ASSIGN15B3
        ASSIGN1562:  preds = [COND191A]
          tensor[3] step1560#3 = fStep133D (pos1447);
          tensor[3] pos1563#8 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos1447,step1560);
          tensor[3] _pos1566#1 = pos1563;
          real _t156B#1 = TensorIndex<tensor[3],[0]>(pos1563);
          real _t156D#1 = TensorIndex<tensor[3],[0]>(pos1563);
          bool _t156F#1 = EQ<real>(_t156B,_t156D);
          bool _t1571#1 = BNot(_t156F);
          if _t1571 then goto ASSIGN1576 else goto ASSIGN1579
        ASSIGN1576:  preds = [COND158F]
          bool _t1574#1 = true;
          goto JOIN1573
        JOIN1573:  preds = [ASSIGN1576,ASSIGN158E]
          bool _t1575#1 = phi(_t1574,_t158D)
          bool _t1590#1 = _t1575;
          if _t1590 then goto DIE1593 else goto JOIN1592
        DIE1593:  preds = [COND1594]
          die
          goto JOIN1592
        JOIN1592:  preds = [*DIE1593,COND1594]
          real _t1595#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (step1560);
          real _t1597#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t1595,rad1442);
          bool _t1599#1 = GT<real>(_t1597,eps1441);
          if _t1599 then goto ASSIGN159D else goto ASSIGN15AA
        ASSIGN159D:  preds = [COND15AE]
          int _t159C#1 = 1;
          int nfs159E#2 = IAdd(nfs144C,_t159C);
          int _t15A1#1 = 10;
          bool _t15A3#1 = GT<int>(nfs159E,_t15A1);
          if _t15A3 then goto DIE15A6 else goto JOIN15A5
        DIE15A6:  preds = [COND15A7]
          die
          goto JOIN15A5
        JOIN15A5:  preds = [*DIE15A6,COND15A7]
          goto JOIN159B
        JOIN159B:  preds = [JOIN15A5,ASSIGN15AD]
          int testp15AC#1 = phi(testp144E,testp15AB)
          int nfs159F#1 = phi(nfs159E,nfs144C)
          bool found15A9#1 = phi(found144B,found15A8)
          goto JOIN155F
        JOIN155F:  preds = [JOIN159B,JOIN1810]
          int testp15B1#1 = phi(testp15AC,testp144E)
          int nfs15B0#1 = phi(nfs159F,nfs144C)
          bool found15AF#1 = phi(found15A9,found144B)
          tensor[3] step1561#1 = phi(step1560,step17DE)
          real hh176D#1 = phi(hh1449,hh17DC)
          tensor[3] _pos1567#1 = phi(_pos1566,_pos17C9)
          tensor[3] pos1564#1 = phi(pos1563,pos17C6)
          self.pos = pos1564;
          self._pos = _pos1567;
          self.hh = hh176D;
          self.step = step1561;
          self.found = found15AF;
          self.nfs = nfs15B0;
          self.testp = testp15B1;
          self.steps = steps145B;
          active
        ASSIGN15AA:  preds = [COND15AE]
          bool found15A8#1 = true;
          int testp15AB#1 = 1;
          goto JOIN159B
        ASSIGN1579:  preds = [COND158F]
          real _t1578#1 = TensorIndex<tensor[3],[1]>(pos1563);
          real _t157A#1 = TensorIndex<tensor[3],[1]>(pos1563);
          bool _t157C#1 = EQ<real>(_t1578,_t157A);
          bool _t157E#1 = BNot(_t157C);
          if _t157E then goto ASSIGN1583 else goto ASSIGN1585
        ASSIGN1583:  preds = [COND158C]
          bool _t1581#1 = true;
          goto JOIN1580
        JOIN1580:  preds = [ASSIGN1583,ASSIGN158B]
          bool _t1582#1 = phi(_t1581,_t158A)
          bool _t158D#1 = _t1582;
          goto JOIN1573
        ASSIGN1585:  preds = [COND158C]
          real _t1584#1 = TensorIndex<tensor[3],[2]>(pos1563);
          real _t1586#1 = TensorIndex<tensor[3],[2]>(pos1563);
          bool _t1588#1 = EQ<real>(_t1584,_t1586);
          bool _t158A#1 = BNot(_t1588);
          goto JOIN1580
        ASSIGN15B3:  preds = [COND191A]
          tensor[3] _t15B2#1 = fStep133D (pos1447);
          tensor[3] pos15B4#16 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos1447,_t15B2);
          tensor[3] _pos15B6#3 = pos15B4;
          real _t15BA#1 = TensorIndex<tensor[3],[0]>(pos15B4);
          real _t15BC#1 = TensorIndex<tensor[3],[0]>(pos15B4);
          bool _t15BE#1 = EQ<real>(_t15BA,_t15BC);
          bool _t15C0#1 = BNot(_t15BE);
          if _t15C0 then goto ASSIGN15C5 else goto ASSIGN15C8
        ASSIGN15C5:  preds = [COND15DE]
          bool _t15C3#1 = true;
          goto JOIN15C2
        JOIN15C2:  preds = [ASSIGN15C5,ASSIGN15DD]
          bool _t15C4#1 = phi(_t15C3,_t15DC)
          bool _t15DF#1 = _t15C4;
          if _t15DF then goto DIE15E2 else goto JOIN15E1
        DIE15E2:  preds = [COND15E3]
          die
          goto JOIN15E1
        JOIN15E1:  preds = [*DIE15E2,COND15E3]
          tensor[3] step15E4#3 = λ()<Z_{i0}>_{3} ();
          real oldE15E6#1 = 0.e0;
          tensor[3] force15E8#1 = λ()<Z_{i0}>_{3} ();
          int nn15EA#1 = 0;
          particle[] _t15EC#1 = SphereQuery<3,particle>(_pos15B6,rad1442);
        FOREACH15F2:  preds = [ASSIGN15ED,NEXT1639]
          foreach (P15EE in _t15EC) on exit goto ASSIGN163B
            int nn15F1#3 = phi(nn15EA,nn1637)
            tensor[3] force15F0#2 = phi(force15E8,force1633)
            real oldE15EF#2 = phi(oldE15E6,oldE1609)
          tensor[3] _t15F3#1 = P15EE.pos;
          tensor[3] _t15F5#1 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (_t15F3,pos15B4);
          real _t15F8#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (_t15F5);
          real _t15FA#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t15F8,rad1442);
          real _t15FD#1 = 0.1e1;
          real _t15FF#1 = λ(T0[],T1[])<(T0) - (T1)> (_t15FD,_t15FA);
          int _t1601#0 = 4;
          real _t1603#1 = λ(T0[])<(T0)^4> (_t15FF);
          real _t1605#1 = _t1603;
          real _t1607#1 = _t1605;
          real oldE1609#1 = λ(T0[],T1[])<(T0 + T1)> (oldE15EF,_t1607);
          tensor[3] _t160B#1 = P15EE.pos;
          tensor[3] _t160D#3 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (_t160B,pos15B4);
          real _t1610#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (_t160D);
          real _t1612#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t1610,rad1442);
          int _t1615#1 = -4;
          real _t1617#1 = IntToReal(_t1615);
          real _t1619#1 = 0.1e1;
          real _t161B#1 = λ(T0[],T1[])<(T0) - (T1)> (_t1619,_t1612);
          int _t161D#0 = 3;
          real _t161F#1 = λ(T0[])<(T0)^3> (_t161B);
          real _t1621#1 = λ(T0[],T1[])<(T0 * T1)> (_t1617,_t161F);
          real _t1623#1 = _t1621;
          real _t1625#1 = 0.1e1;
          real _t1627#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t1625,rad1442);
          real _t1629#1 = λ(T0[],T1[])<(T0 * T1)> (_t1623,_t1627);
          tensor[3] _t162B#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (_t1629,_t160D);
          real _t162D#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (_t160D);
          tensor[3] _t162F#1 = λ(T0[3],T1[])<(T0_{i0}) / ( T1)>_{3} (_t162B,_t162D);
          tensor[3] _t1631#1 = _t162F;
          tensor[3] force1633#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (force15F0,_t1631);
          int _t1635#1 = 1;
          int nn1637#1 = IAdd(nn15F1,_t1635);
          goto FOREACH15F2
        ASSIGN163B:  preds = [FOREACH15F2]
          int _t163A#1 = 0;
          bool _t163C#1 = EQ<int>(_t163A,nn15F1);
          if _t163C then goto ASSIGN1640 else goto JOIN163E
        ASSIGN1640:  preds = [COND1752]
          real _t163F#1 = 0.5e0;
          real _t1641#1 = λ(T0[],T1[])<(T0 * T1)> (_t163F,rad1442);
          real _t1643#1 = 0.e0;
          real _t1645#1 = 0.e0;
          tensor[3] _t1647#1 = <tensor[3]>[_t1641,_t1643,_t1645];
          tensor[3] npos1649#14 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos15B4,_t1647);
          real _t164E#1 = 0.e0;
          real _t1650#1 = 0.e0;
          real _t1652#1 = 0.e0;
          tensor[3] _t1654#1 = <tensor[3]>[_t164E,_t1650,_t1652];
          tensor[3] mid1656#5 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (npos1649,_t1654);
          real _t1659#1 = TensorIndex<tensor[3],[0]>(mid1656);
          real _t165B#1 = λ(T0[])<Abs(T0)> (_t1659);
          real _t165D#1 = 0.1e0;
          bool _t165F#1 = GT<real>(_t165B,_t165D);
          if _t165F then goto ASSIGN1664 else goto ASSIGN167C
        ASSIGN1664:  preds = [COND167D]
          real _t1663#1 = TensorIndex<tensor[3],[1]>(mid1656);
          real _t1665#1 = λ(T0[])<Abs(T0)> (_t1663);
          real _t1667#1 = 0.1e0;
          bool _t1669#1 = GT<real>(_t1665,_t1667);
          if _t1669 then goto ASSIGN166D else goto ASSIGN1676
        ASSIGN166D:  preds = [COND1677]
          real _t166C#1 = TensorIndex<tensor[3],[2]>(mid1656);
          real _t166E#1 = λ(T0[])<Abs(T0)> (_t166C);
          real _t1670#1 = 0.1e0;
          bool _t1672#1 = GT<real>(_t166E,_t1670);
          goto JOIN166B
        JOIN166B:  preds = [ASSIGN1674,ASSIGN1676]
          bool _t1673#1 = phi(_t1672,_t1675)
          bool _t1678#1 = _t1673;
          goto JOIN1661
        JOIN1661:  preds = [ASSIGN167A,ASSIGN167C]
          bool _t1679#1 = phi(_t1678,_t167B)
          bool z167E#1 = _t1679;
          real _t1681#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (mid1656);
          real _t1683#1 = 0.5e1;
          bool _t1685#1 = LT<real>(_t1681,_t1683);
          if _t1685 then goto ASSIGN168A else goto ASSIGN169A
        ASSIGN168A:  preds = [COND169B]
          real _t1689#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (mid1656);
          real _t168B#1 = 0.2e1;
          bool _t168D#1 = GT<real>(_t1689,_t168B);
          if _t168D then goto ASSIGN1692 else goto ASSIGN1694
        ASSIGN1692:  preds = [COND1695]
          bool _t1690#1 = z167E;
          goto JOIN168F
        JOIN168F:  preds = [ASSIGN1692,ASSIGN1694]
          bool _t1691#1 = phi(_t1690,_t1693)
          bool _t1696#1 = _t1691;
          goto JOIN1687
        JOIN1687:  preds = [ASSIGN1698,ASSIGN169A]
          bool _t1697#1 = phi(_t1696,_t1699)
          bool _t169C#1 = _t1697;
          if _t169C then goto ASSIGN16A3 else goto ASSIGN1742
        ASSIGN16A3:  preds = [COND1743]
          real _t16A2#1 = TensorIndex<tensor[3],[0]>(npos1649);
          real _t16A4#1 = TensorIndex<tensor[3],[0]>(npos1649);
          bool _t16A6#1 = EQ<real>(_t16A2,_t16A4);
          bool _t16A8#1 = BNot(_t16A6);
          if _t16A8 then goto ASSIGN16AD else goto ASSIGN16B0
        ASSIGN16AD:  preds = [COND16C6]
          bool _t16AB#1 = true;
          goto JOIN16AA
        JOIN16AA:  preds = [ASSIGN16AD,ASSIGN16C5]
          bool _t16AC#1 = phi(_t16AB,_t16C4)
          bool _t16C7#1 = _t16AC;
          bool _t16C9#1 = BNot(_t16C7);
          if _t16C9 then goto ASSIGN16CF else goto ASSIGN173C
        ASSIGN16CF:  preds = [COND173D]
          real x16CE#2 = TensorIndex<tensor[3],[0]>(npos1649);
          real y16D0#3 = TensorIndex<tensor[3],[1]>(npos1649);
          real z16D2#2 = TensorIndex<tensor[3],[2]>(npos1649);
          int _t16D4#0 = 2;
          real _t16D6#1 = λ(T0[])<(T0)^2> (y16D0);
          real _t16D8#1 = λ(T0[],T1[])<(T0 * T1)> (_t16D6,z16D2);
          real _t16DA#1 = 0.2e1;
          real _t16DC#1 = λ(T0[],T1[])<(T0 * T1)> (_t16DA,x16CE);
          real _t16DE#1 = λ(T0[],T1[])<(T0 * T1)> (_t16DC,y16D0);
          real _t16E0#1 = λ(T0[],T1[])<(T0 * T1)> (_t16DE,z16D2);
          int _t16E2#0 = 2;
          real _t16E4#1 = λ(T0[])<(T0)^2> (y16D0);
          real _t16E6#1 = λ(T0[],T1[])<(T0 * T1)> (x16CE,_t16E4);
          tensor[3] g16E8#1 = <tensor[3]>[_t16D8,_t16E0,_t16E6];
          tensor[3] g16EA#1 = g16E8;
          real x16ED#3 = TensorIndex<tensor[3],[0]>(npos1649);
          real y16EF#6 = TensorIndex<tensor[3],[1]>(npos1649);
          real z16F1#3 = TensorIndex<tensor[3],[2]>(npos1649);
          real _t16F3#1 = 0.e0;
          real _t16F5#1 = 0.2e1;
          real _t16F7#1 = λ(T0[],T1[])<(T0 * T1)> (_t16F5,y16EF);
          real _t16F9#1 = λ(T0[],T1[])<(T0 * T1)> (_t16F7,z16F1);
          int _t16FB#0 = 2;
          real _t16FD#1 = λ(T0[])<(T0)^2> (y16EF);
          tensor[3] _t16FF#1 = <tensor[3]>[_t16F3,_t16F9,_t16FD];
          real _t1701#1 = 0.2e1;
          real _t1703#1 = λ(T0[],T1[])<(T0 * T1)> (_t1701,y16EF);
          real _t1705#1 = λ(T0[],T1[])<(T0 * T1)> (_t1703,z16F1);
          real _t1707#1 = 0.2e1;
          real _t1709#1 = λ(T0[],T1[])<(T0 * T1)> (_t1707,x16ED);
          real _t170B#1 = λ(T0[],T1[])<(T0 * T1)> (_t1709,z16F1);
          real _t170D#1 = 0.2e1;
          real _t170F#1 = λ(T0[],T1[])<(T0 * T1)> (_t170D,x16ED);
          real _t1711#1 = λ(T0[],T1[])<(T0 * T1)> (_t170F,y16EF);
          tensor[3] _t1713#1 = <tensor[3]>[_t1705,_t170B,_t1711];
          int _t1715#0 = 2;
          real _t1717#1 = λ(T0[])<(T0)^2> (y16EF);
          real _t1719#1 = 0.2e1;
          real _t171B#1 = λ(T0[],T1[])<(T0 * T1)> (_t1719,x16ED);
          real _t171D#1 = λ(T0[],T1[])<(T0 * T1)> (_t171B,y16EF);
          real _t171F#1 = 0.e0;
          tensor[3] _t1721#1 = <tensor[3]>[_t1717,_t171D,_t171F];
          tensor[3,3] hess1723#1 = <tensor[3,3]>[_t16FF,_t1713,_t1721];
          tensor[3,3] H1725#1 = hess1723;
          (real[3] _t1727#1,tensor[3][3] evecs1728#0) = Eigen3x3(H1725);
          int _t172A#1 = 2;
          real _t172C#1 = Subscript<real[3]>(_t1727,_t172A);
          real _t172E#1 = λ(T0[])<Neg(T0)> (_t172C);
          real _t1730#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (g16EA);
          real _t1732#1 = λ(T0[],T1[])<(T0 + T1)> (fBias1440,_t1730);
          real str1734#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t172E,_t1732);
          real _t1736#1 = str1734;
          bool _t1738#1 = GTE<real>(_t1736,fStren143F);
          goto JOIN16CB
        JOIN16CB:  preds = [ASSIGN173A,ASSIGN173C]
          bool _t1739#1 = phi(_t1738,_t173B)
          bool _t173E#1 = _t1739;
          goto JOIN169E
        JOIN169E:  preds = [ASSIGN1740,ASSIGN1742]
          bool _t173F#1 = phi(_t173E,_t1741)
          bool _t1744#1 = _t173F;
          if _t1744 then goto NEW1747 else goto JOIN1746
        NEW1747:  preds = [COND1748]
          new particle(npos1649,hh1449);
          goto JOIN1746
        JOIN1746:  preds = [NEW1747,COND1748]
          self.pos = pos15B4;
          self._pos = _pos15B6;
          self.hh = hh1449;
          self.step = step15E4;
          self.found = found144B;
          self.nfs = nfs144C;
          self.testp = testp144E;
          self.steps = steps145B;
          active
          goto JOIN163E
        JOIN163E:  preds = [*ACTIVE1749,COND1752]
          tensor[3,3] _t1753#1 = fPerp13CB (pos15B4);
          tensor[3] force1755#2 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (_t1753,force15F0);
          tensor[3] es1757#5 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (hh1449,force1755);
          real _t1759#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (es1757);
          bool _t175B#1 = GT<real>(_t1759,rad1442);
          if _t175B then goto ASSIGN175F else goto JOIN175D
        ASSIGN175F:  preds = [COND176C]
          real _t175E#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (es1757);
          real _t1760#1 = λ(T0[],T1[])<(T0) / ( T1)> (rad1442,_t175E);
          real hh1762#1 = λ(T0[],T1[])<(T0 * T1)> (hh1449,_t1760);
          real _t1765#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (es1757);
          real _t1767#1 = λ(T0[],T1[])<(T0) / ( T1)> (rad1442,_t1765);
          tensor[3] es1769#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (_t1767,es1757);
          goto JOIN175D
        JOIN175D:  preds = [ASSIGN176B,COND176C]
          tensor[3] es176A#5 = phi(es1769,es1757)
          real hh1763#2 = phi(hh1762,hh1449)
          tensor[3] samplePos176E#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos15B4,es176A);
          tensor[3] fs1770#2 = fStep133D (samplePos176E);
          real _t1772#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (fs1770);
          real _t1774#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (es176A);
          real _t1776#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t1772,_t1774);
          real _t1778#1 = 0.5e0;
          bool _t177A#1 = GT<real>(_t1776,_t1778);
          if _t177A then goto ASSIGN177E else goto JOIN177C
        ASSIGN177E:  preds = [COND178B]
          real _t177D#1 = 0.5e0;
          real hh177F#1 = λ(T0[],T1[])<(T0 * T1)> (hh1763,_t177D);
          self.pos = pos15B4;
          self._pos = _pos15B6;
          self.hh = hh177F;
          self.step = step15E4;
          self.found = found144B;
          self.nfs = nfs144C;
          self.testp = testp144E;
          self.steps = steps145B;
          active
          goto JOIN177C
        JOIN177C:  preds = [*ACTIVE1782,COND178B]
          real hh1780#2 = phi(hh1763)
          tensor[3] oldPos178C#2 = pos15B4;
          tensor[3] up178E#2 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (fs1770,es176A);
          tensor[3] pos1790#4 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos15B4,up178E);
          tensor[3] _pos1792#2 = pos1790;
          particle[] _t1794#1 = SphereQuery<3,particle>(_pos1792,rad1442);
          real accum1796#1 = 0.e0;
        FOREACH179A:  preds = [ASSIGN1797,NEXT17B3]
          foreach (P1798 in _t1794) on exit goto ASSIGN17B5
            real accum1799#2 = phi(accum1796,accum17B1)
          tensor[3] _t179B#1 = P1798.pos;
          tensor[3] _t179D#1 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (pos1790,_t179B);
          real _t17A0#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (_t179D);
          real _t17A2#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t17A0,rad1442);
          real _t17A5#1 = 0.1e1;
          real _t17A7#1 = λ(T0[],T1[])<(T0) - (T1)> (_t17A5,_t17A2);
          int _t17A9#0 = 4;
          real _t17AB#1 = λ(T0[])<(T0)^4> (_t17A7);
          real _t17AD#1 = _t17AB;
          real _t17AF#1 = _t17AD;
          real accum17B1#1 = λ(T0[],T1[])<(T0 + T1)> (accum1799,_t17AF);
          goto FOREACH179A
        ASSIGN17B5:  preds = [FOREACH179A]
          real newE17B4#1 = accum1799;
          real _t17B6#1 = λ(T0[],T1[])<(T0) - (T1)> (newE17B4,oldE15EF);
          real _t17B8#1 = 0.5e0;
          tensor[3] _t17BA#1 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (pos1790,oldPos178C);
          tensor[3] _t17BC#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (_t17B8,_t17BA);
          tensor[3] _t17BE#1 = λ(T0[3])<Neg(T0_{i0})>_{3} (force1755);
          real _t17C0#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (_t17BC,_t17BE);
          bool _t17C2#1 = GT<real>(_t17B6,_t17C0);
          if _t17C2 then goto ASSIGN17C7 else goto JOIN17C4
        ASSIGN17C7:  preds = [COND17D9]
          tensor[3] pos17C5#2 = oldPos178C;
          tensor[3] _pos17C8#1 = pos17C5;
          real _t17CB#1 = 0.5e0;
          real hh17CD#1 = λ(T0[],T1[])<(T0 * T1)> (hh1780,_t17CB);
          self.pos = pos17C5;
          self._pos = _pos17C8;
          self.hh = hh17CD;
          self.step = step15E4;
          self.found = found144B;
          self.nfs = nfs144C;
          self.testp = testp144E;
          self.steps = steps145B;
          active
          goto JOIN17C4
        JOIN17C4:  preds = [*ACTIVE17D0,COND17D9]
          real hh17CE#1 = phi(hh1780)
          tensor[3] _pos17C9#1 = phi(_pos1792)
          tensor[3] pos17C6#8 = phi(pos1790)
          real _t17DA#1 = 0.11e1;
          real hh17DC#2 = λ(T0[],T1[])<(T0 * T1)> (hh17CE,_t17DA);
          tensor[3] step17DE#1 = up178E;
          real _t17E2#1 = TensorIndex<tensor[3],[0]>(pos17C6);
          real _t17E4#1 = TensorIndex<tensor[3],[0]>(pos17C6);
          bool _t17E6#1 = EQ<real>(_t17E2,_t17E4);
          bool _t17E8#1 = BNot(_t17E6);
          if _t17E8 then goto ASSIGN17ED else goto ASSIGN17F0
        ASSIGN17ED:  preds = [COND1806]
          bool _t17EB#1 = true;
          goto JOIN17EA
        JOIN17EA:  preds = [ASSIGN17ED,ASSIGN1805]
          bool _t17EC#1 = phi(_t17EB,_t1804)
          bool _t1807#1 = _t17EC;
          if _t1807 then goto DIE180A else goto JOIN1809
        DIE180A:  preds = [COND180B]
          die
          goto JOIN1809
        JOIN1809:  preds = [*DIE180A,COND180B]
          int _t180C#1 = 5;
          bool _t180E#1 = LT<int>(nn15F1,_t180C);
          if _t180E then goto ASSIGN1812 else goto JOIN1810
        ASSIGN1812:  preds = [COND1919]
          real _t1811#1 = 0.5e0;
          real _t1813#1 = λ(T0[],T1[])<(T0 * T1)> (_t1811,rad1442);
          tensor[3] _t1815#1 = λ(T0[3],T1[3])<(T0_{i0} * (1) / ( Sqrt(Σ(i1=0..2)<((T1_{i1} * T1_{i1}))>(i1=0..2))))>_{3} (es176A,es176A);
          tensor[3] _t1817#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (_t1813,_t1815);
          tensor[3] npos1819#14 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos17C6,_t1817);
          real _t181E#1 = 0.e0;
          real _t1820#1 = 0.e0;
          real _t1822#1 = 0.e0;
          tensor[3] _t1824#1 = <tensor[3]>[_t181E,_t1820,_t1822];
          tensor[3] mid1826#5 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (npos1819,_t1824);
          real _t1829#1 = TensorIndex<tensor[3],[0]>(mid1826);
          real _t182B#1 = λ(T0[])<Abs(T0)> (_t1829);
          real _t182D#1 = 0.1e0;
          bool _t182F#1 = GT<real>(_t182B,_t182D);
          if _t182F then goto ASSIGN1834 else goto ASSIGN184C
        ASSIGN1834:  preds = [COND184D]
          real _t1833#1 = TensorIndex<tensor[3],[1]>(mid1826);
          real _t1835#1 = λ(T0[])<Abs(T0)> (_t1833);
          real _t1837#1 = 0.1e0;
          bool _t1839#1 = GT<real>(_t1835,_t1837);
          if _t1839 then goto ASSIGN183D else goto ASSIGN1846
        ASSIGN183D:  preds = [COND1847]
          real _t183C#1 = TensorIndex<tensor[3],[2]>(mid1826);
          real _t183E#1 = λ(T0[])<Abs(T0)> (_t183C);
          real _t1840#1 = 0.1e0;
          bool _t1842#1 = GT<real>(_t183E,_t1840);
          goto JOIN183B
        JOIN183B:  preds = [ASSIGN1844,ASSIGN1846]
          bool _t1843#1 = phi(_t1842,_t1845)
          bool _t1848#1 = _t1843;
          goto JOIN1831
        JOIN1831:  preds = [ASSIGN184A,ASSIGN184C]
          bool _t1849#1 = phi(_t1848,_t184B)
          bool z184E#1 = _t1849;
          real _t1851#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (mid1826);
          real _t1853#1 = 0.5e1;
          bool _t1855#1 = LT<real>(_t1851,_t1853);
          if _t1855 then goto ASSIGN185A else goto ASSIGN186A
        ASSIGN185A:  preds = [COND186B]
          real _t1859#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (mid1826);
          real _t185B#1 = 0.2e1;
          bool _t185D#1 = GT<real>(_t1859,_t185B);
          if _t185D then goto ASSIGN1862 else goto ASSIGN1864
        ASSIGN1862:  preds = [COND1865]
          bool _t1860#1 = z184E;
          goto JOIN185F
        JOIN185F:  preds = [ASSIGN1862,ASSIGN1864]
          bool _t1861#1 = phi(_t1860,_t1863)
          bool _t1866#1 = _t1861;
          goto JOIN1857
        JOIN1857:  preds = [ASSIGN1868,ASSIGN186A]
          bool _t1867#1 = phi(_t1866,_t1869)
          bool _t186C#1 = _t1867;
          if _t186C then goto ASSIGN1873 else goto ASSIGN1912
        ASSIGN1873:  preds = [COND1913]
          real _t1872#1 = TensorIndex<tensor[3],[0]>(npos1819);
          real _t1874#1 = TensorIndex<tensor[3],[0]>(npos1819);
          bool _t1876#1 = EQ<real>(_t1872,_t1874);
          bool _t1878#1 = BNot(_t1876);
          if _t1878 then goto ASSIGN187D else goto ASSIGN1880
        ASSIGN187D:  preds = [COND1896]
          bool _t187B#1 = true;
          goto JOIN187A
        JOIN187A:  preds = [ASSIGN187D,ASSIGN1895]
          bool _t187C#1 = phi(_t187B,_t1894)
          bool _t1897#1 = _t187C;
          bool _t1899#1 = BNot(_t1897);
          if _t1899 then goto ASSIGN189F else goto ASSIGN190C
        ASSIGN189F:  preds = [COND190D]
          real x189E#2 = TensorIndex<tensor[3],[0]>(npos1819);
          real y18A0#3 = TensorIndex<tensor[3],[1]>(npos1819);
          real z18A2#2 = TensorIndex<tensor[3],[2]>(npos1819);
          int _t18A4#0 = 2;
          real _t18A6#1 = λ(T0[])<(T0)^2> (y18A0);
          real _t18A8#1 = λ(T0[],T1[])<(T0 * T1)> (_t18A6,z18A2);
          real _t18AA#1 = 0.2e1;
          real _t18AC#1 = λ(T0[],T1[])<(T0 * T1)> (_t18AA,x189E);
          real _t18AE#1 = λ(T0[],T1[])<(T0 * T1)> (_t18AC,y18A0);
          real _t18B0#1 = λ(T0[],T1[])<(T0 * T1)> (_t18AE,z18A2);
          int _t18B2#0 = 2;
          real _t18B4#1 = λ(T0[])<(T0)^2> (y18A0);
          real _t18B6#1 = λ(T0[],T1[])<(T0 * T1)> (x189E,_t18B4);
          tensor[3] g18B8#1 = <tensor[3]>[_t18A8,_t18B0,_t18B6];
          tensor[3] g18BA#1 = g18B8;
          real x18BD#3 = TensorIndex<tensor[3],[0]>(npos1819);
          real y18BF#6 = TensorIndex<tensor[3],[1]>(npos1819);
          real z18C1#3 = TensorIndex<tensor[3],[2]>(npos1819);
          real _t18C3#1 = 0.e0;
          real _t18C5#1 = 0.2e1;
          real _t18C7#1 = λ(T0[],T1[])<(T0 * T1)> (_t18C5,y18BF);
          real _t18C9#1 = λ(T0[],T1[])<(T0 * T1)> (_t18C7,z18C1);
          int _t18CB#0 = 2;
          real _t18CD#1 = λ(T0[])<(T0)^2> (y18BF);
          tensor[3] _t18CF#1 = <tensor[3]>[_t18C3,_t18C9,_t18CD];
          real _t18D1#1 = 0.2e1;
          real _t18D3#1 = λ(T0[],T1[])<(T0 * T1)> (_t18D1,y18BF);
          real _t18D5#1 = λ(T0[],T1[])<(T0 * T1)> (_t18D3,z18C1);
          real _t18D7#1 = 0.2e1;
          real _t18D9#1 = λ(T0[],T1[])<(T0 * T1)> (_t18D7,x18BD);
          real _t18DB#1 = λ(T0[],T1[])<(T0 * T1)> (_t18D9,z18C1);
          real _t18DD#1 = 0.2e1;
          real _t18DF#1 = λ(T0[],T1[])<(T0 * T1)> (_t18DD,x18BD);
          real _t18E1#1 = λ(T0[],T1[])<(T0 * T1)> (_t18DF,y18BF);
          tensor[3] _t18E3#1 = <tensor[3]>[_t18D5,_t18DB,_t18E1];
          int _t18E5#0 = 2;
          real _t18E7#1 = λ(T0[])<(T0)^2> (y18BF);
          real _t18E9#1 = 0.2e1;
          real _t18EB#1 = λ(T0[],T1[])<(T0 * T1)> (_t18E9,x18BD);
          real _t18ED#1 = λ(T0[],T1[])<(T0 * T1)> (_t18EB,y18BF);
          real _t18EF#1 = 0.e0;
          tensor[3] _t18F1#1 = <tensor[3]>[_t18E7,_t18ED,_t18EF];
          tensor[3,3] hess18F3#1 = <tensor[3,3]>[_t18CF,_t18E3,_t18F1];
          tensor[3,3] H18F5#1 = hess18F3;
          (real[3] _t18F7#1,tensor[3][3] evecs18F8#0) = Eigen3x3(H18F5);
          int _t18FA#1 = 2;
          real _t18FC#1 = Subscript<real[3]>(_t18F7,_t18FA);
          real _t18FE#1 = λ(T0[])<Neg(T0)> (_t18FC);
          real _t1900#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (g18BA);
          real _t1902#1 = λ(T0[],T1[])<(T0 + T1)> (fBias1440,_t1900);
          real str1904#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t18FE,_t1902);
          real _t1906#1 = str1904;
          bool _t1908#1 = GTE<real>(_t1906,fStren143F);
          goto JOIN189B
        JOIN189B:  preds = [ASSIGN190A,ASSIGN190C]
          bool _t1909#1 = phi(_t1908,_t190B)
          bool _t190E#1 = _t1909;
          goto JOIN186E
        JOIN186E:  preds = [ASSIGN1910,ASSIGN1912]
          bool _t190F#1 = phi(_t190E,_t1911)
          bool _t1914#1 = _t190F;
          if _t1914 then goto NEW1917 else goto JOIN1916
        NEW1917:  preds = [COND1918]
          new particle(npos1819,hh17DC);
          goto JOIN1916
        JOIN1916:  preds = [NEW1917,COND1918]
          goto JOIN1810
        JOIN1810:  preds = [JOIN1916,COND1919]
          goto JOIN155F
        ASSIGN190C:  preds = [COND190D]
          bool _t190B#1 = false;
          goto JOIN189B
        ASSIGN1880:  preds = [COND1896]
          real _t187F#1 = TensorIndex<tensor[3],[1]>(npos1819);
          real _t1881#1 = TensorIndex<tensor[3],[1]>(npos1819);
          bool _t1883#1 = EQ<real>(_t187F,_t1881);
          bool _t1885#1 = BNot(_t1883);
          if _t1885 then goto ASSIGN188A else goto ASSIGN188C
        ASSIGN188A:  preds = [COND1893]
          bool _t1888#1 = true;
          goto JOIN1887
        JOIN1887:  preds = [ASSIGN188A,ASSIGN1892]
          bool _t1889#1 = phi(_t1888,_t1891)
          bool _t1894#1 = _t1889;
          goto JOIN187A
        ASSIGN188C:  preds = [COND1893]
          real _t188B#1 = TensorIndex<tensor[3],[2]>(npos1819);
          real _t188D#1 = TensorIndex<tensor[3],[2]>(npos1819);
          bool _t188F#1 = EQ<real>(_t188B,_t188D);
          bool _t1891#1 = BNot(_t188F);
          goto JOIN1887
        ASSIGN1912:  preds = [COND1913]
          bool _t1911#1 = false;
          goto JOIN186E
        ASSIGN1864:  preds = [COND1865]
          bool _t1863#1 = false;
          goto JOIN185F
        ASSIGN186A:  preds = [COND186B]
          bool _t1869#1 = false;
          goto JOIN1857
        ASSIGN1846:  preds = [COND1847]
          bool _t1845#1 = false;
          goto JOIN183B
        ASSIGN184C:  preds = [COND184D]
          bool _t184B#1 = false;
          goto JOIN1831
        ASSIGN17F0:  preds = [COND1806]
          real _t17EF#1 = TensorIndex<tensor[3],[1]>(pos17C6);
          real _t17F1#1 = TensorIndex<tensor[3],[1]>(pos17C6);
          bool _t17F3#1 = EQ<real>(_t17EF,_t17F1);
          bool _t17F5#1 = BNot(_t17F3);
          if _t17F5 then goto ASSIGN17FA else goto ASSIGN17FC
        ASSIGN17FA:  preds = [COND1803]
          bool _t17F8#1 = true;
          goto JOIN17F7
        JOIN17F7:  preds = [ASSIGN17FA,ASSIGN1802]
          bool _t17F9#1 = phi(_t17F8,_t1801)
          bool _t1804#1 = _t17F9;
          goto JOIN17EA
        ASSIGN17FC:  preds = [COND1803]
          real _t17FB#1 = TensorIndex<tensor[3],[2]>(pos17C6);
          real _t17FD#1 = TensorIndex<tensor[3],[2]>(pos17C6);
          bool _t17FF#1 = EQ<real>(_t17FB,_t17FD);
          bool _t1801#1 = BNot(_t17FF);
          goto JOIN17F7
        ASSIGN173C:  preds = [COND173D]
          bool _t173B#1 = false;
          goto JOIN16CB
        ASSIGN16B0:  preds = [COND16C6]
          real _t16AF#1 = TensorIndex<tensor[3],[1]>(npos1649);
          real _t16B1#1 = TensorIndex<tensor[3],[1]>(npos1649);
          bool _t16B3#1 = EQ<real>(_t16AF,_t16B1);
          bool _t16B5#1 = BNot(_t16B3);
          if _t16B5 then goto ASSIGN16BA else goto ASSIGN16BC
        ASSIGN16BA:  preds = [COND16C3]
          bool _t16B8#1 = true;
          goto JOIN16B7
        JOIN16B7:  preds = [ASSIGN16BA,ASSIGN16C2]
          bool _t16B9#1 = phi(_t16B8,_t16C1)
          bool _t16C4#1 = _t16B9;
          goto JOIN16AA
        ASSIGN16BC:  preds = [COND16C3]
          real _t16BB#1 = TensorIndex<tensor[3],[2]>(npos1649);
          real _t16BD#1 = TensorIndex<tensor[3],[2]>(npos1649);
          bool _t16BF#1 = EQ<real>(_t16BB,_t16BD);
          bool _t16C1#1 = BNot(_t16BF);
          goto JOIN16B7
        ASSIGN1742:  preds = [COND1743]
          bool _t1741#1 = false;
          goto JOIN169E
        ASSIGN1694:  preds = [COND1695]
          bool _t1693#1 = false;
          goto JOIN168F
        ASSIGN169A:  preds = [COND169B]
          bool _t1699#1 = false;
          goto JOIN1687
        ASSIGN1676:  preds = [COND1677]
          bool _t1675#1 = false;
          goto JOIN166B
        ASSIGN167C:  preds = [COND167D]
          bool _t167B#1 = false;
          goto JOIN1661
        ASSIGN15C8:  preds = [COND15DE]
          real _t15C7#1 = TensorIndex<tensor[3],[1]>(pos15B4);
          real _t15C9#1 = TensorIndex<tensor[3],[1]>(pos15B4);
          bool _t15CB#1 = EQ<real>(_t15C7,_t15C9);
          bool _t15CD#1 = BNot(_t15CB);
          if _t15CD then goto ASSIGN15D2 else goto ASSIGN15D4
        ASSIGN15D2:  preds = [COND15DB]
          bool _t15D0#1 = true;
          goto JOIN15CF
        JOIN15CF:  preds = [ASSIGN15D2,ASSIGN15DA]
          bool _t15D1#1 = phi(_t15D0,_t15D9)
          bool _t15DC#1 = _t15D1;
          goto JOIN15C2
        ASSIGN15D4:  preds = [COND15DB]
          real _t15D3#1 = TensorIndex<tensor[3],[2]>(pos15B4);
          real _t15D5#1 = TensorIndex<tensor[3],[2]>(pos15B4);
          bool _t15D7#1 = EQ<real>(_t15D3,_t15D5);
          bool _t15D9#1 = BNot(_t15D7);
          goto JOIN15CF
        ASSIGN154E:  preds = [COND154F]
          bool _t154D#1 = false;
          goto JOIN14DD
        ASSIGN14C2:  preds = [COND14D8]
          real _t14C1#1 = TensorIndex<tensor[3],[1]>(pos1447);
          real _t14C3#1 = TensorIndex<tensor[3],[1]>(pos1447);
          bool _t14C5#1 = EQ<real>(_t14C1,_t14C3);
          bool _t14C7#1 = BNot(_t14C5);
          if _t14C7 then goto ASSIGN14CC else goto ASSIGN14CE
        ASSIGN14CC:  preds = [COND14D5]
          bool _t14CA#1 = true;
          goto JOIN14C9
        JOIN14C9:  preds = [ASSIGN14CC,ASSIGN14D4]
          bool _t14CB#1 = phi(_t14CA,_t14D3)
          bool _t14D6#1 = _t14CB;
          goto JOIN14BC
        ASSIGN14CE:  preds = [COND14D5]
          real _t14CD#1 = TensorIndex<tensor[3],[2]>(pos1447);
          real _t14CF#1 = TensorIndex<tensor[3],[2]>(pos1447);
          bool _t14D1#1 = EQ<real>(_t14CD,_t14CF);
          bool _t14D3#1 = BNot(_t14D1);
          goto JOIN14C9
        ASSIGN1554:  preds = [COND1555]
          bool _t1553#1 = false;
          goto JOIN14B0
        ASSIGN14A6:  preds = [COND14A7]
          bool _t14A5#1 = false;
          goto JOIN14A1
        ASSIGN14AC:  preds = [COND14AD]
          bool _t14AB#1 = false;
          goto JOIN1499
        ASSIGN1488:  preds = [COND1489]
          bool _t1487#1 = false;
          goto JOIN147D
        ASSIGN148E:  preds = [COND148F]
          bool _t148D#1 = false;
          goto JOIN1473
    end update
  end particle
## initial strand creation
  COLLECTION
    ENTRY1411:  preds = []
      tensor[3][] ipos1409#1 = globals.ipos1244;
    FOREACH140C:  preds = [ASSIGN140A,NEXT1410]
      foreach (x140B in ipos1409) on exit goto RETURN1412
      real _t140D#1 = 0.1e1;
      new particle(x140B,_t140D);
      goto FOREACH140C
    RETURN1412:  preds = [FOREACH140C]
      return
## global update
  ENTRY1972:  preds = []
    real rad1926#3 = globals.rad123E;
    real eps1925#2 = globals.eps123F;
    particle[] P1929#1 = Strands<particle,all>;
    (int res192A#1) = sum<int>(MAP sum13D2 (P1929));
    int num192D#1 = res192A;
    particle[] P192F#1 = Strands<particle,all>;
    (int res1930#1) = max<int>(MAP max13D9 (P192F));
    int steps1933#2 = res1930;
    particle[] P1935#1 = Strands<particle,all>;
    (int res1936#1) = sum<int>(MAP sum13E0 (P1935));
    int numFound1939#1 = res1936;
    particle[] P193B#1 = Strands<particle,all>;
    (bool res193C#1) = all(MAP all13E7 (P193B));
    bool allFound193F#2 = res193C;
    particle[] P1941#1 = Strands<particle,all>;
    (real res1942#1) = max<real>(MAP max13F0 (P1941));
    real maxStep1945#3 = res1942;
    string _t1947#1 = "One run:";
    string _t1949#1 = " and ";
    real _t194B#1 = λ(T0[],T1[])<(T0) / ( T1)> (maxStep1945,rad1926);
    string _t194D#1 = " and ";
    real _t194F#1 = λ(T0[],T1[])<(T0) / ( T1)> (maxStep1945,rad1926);
    bool _t1951#1 = LT<real>(_t194F,eps1925);
    string _t1953#1 = " and ";
    string _t1955#1 = " of ";
    string _t1957#1 = "\n";
    Print<[string,bool,string,real,string,bool,string,int,string,int,string]>(_t1947,allFound193F,_t1949,_t194B,_t194D,_t1951,_t1953,numFound1939,_t1955,num192D,_t1957);
    if allFound193F then goto ASSIGN195C else goto JOIN195A
  ASSIGN195C:  preds = [COND1965]
    real _t195B#1 = λ(T0[],T1[])<(T0) / ( T1)> (maxStep1945,rad1926);
    bool _t195D#1 = LT<real>(_t195B,eps1925);
    if _t195D then goto ASSIGN1961 else goto JOIN195F
  ASSIGN1961:  preds = [COND1964]
    string _t1960#1 = "CONVERGED!\n";
    Print<[string]>(_t1960);
    StabilizeAll;
    goto JOIN195F
  JOIN195F:  preds = [MASSIGN1963,COND1964]
    goto JOIN195A
  JOIN195A:  preds = [JOIN195F,COND1965]
    int _t1966#1 = 2000;
    bool _t1968#1 = GT<int>(steps1933,_t1966);
    if _t1968 then goto MASSIGN196B else goto JOIN196A
  MASSIGN196B:  preds = [COND196C]
    StabilizeAll;
    goto JOIN196A
  JOIN196A:  preds = [MASSIGN196B,COND196C]
    string _t196D#1 = "Current steps:";
    string _t196F#1 = "\n";
    Print<[string,int,string]>(_t196D,steps1933,_t196F);
    continue
#### end program ####
##### high-ir: after value numbering ####
## properties
  GlobalInit StabilizeAll GlobalReduce StrandSets GlobalUpdate NewStrands StrandCommunication StrandsMayDie HasInputs HasGlobals ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
## globals
  input meshData123B (meshData) = <no-default>
  input 0space04FA_intermedateGlobal123C (space) = <no-default>
  input 0data04FC_intermedateGlobal123D (data) = <no-default>
  input rad123E (rad) = <default>
  input eps123F (eps) = <default>
  input v01240 (v0) = <default>
  input fBias1241 (fBias) = <default>
  input fStren1242 (fStren) = <default>
  input zfuz1243 (zfuz) = <default>
  input ipos1244 (ipos) = <no-default>
## functions
  function real max13F0 (particle P13E8#1) {
    ENTRY13EF:  preds = []
      tensor[3] _t13E9#1 = P13E8.step;
      real _t13EC#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (_t13E9);
      return _t13EC
}
  function bool all13E7 (particle P13E1#1) {
    ENTRY13E6:  preds = []
      bool _t13E2#1 = P13E1.found;
      return _t13E2
}
  function int sum13E0 (particle P13DA#1) {
    ENTRY13DF:  preds = []
      int _t13DB#1 = P13DA.testp;
      return _t13DB
}
  function int max13D9 (particle P13D3#1) {
    ENTRY13D8:  preds = []
      int _t13D4#1 = P13D3.steps;
      return _t13D4
}
  function int sum13D2 (particle P13CC#1) {
    ENTRY13D1:  preds = []
      int _t13CD#1 = P13CC.test;
      return _t13CD
}
  function int[2] nextCell41278 (int faceIdx1259#2, int cell125A#1, femData:Mesh mesh125B#1) {
    ENTRY1277:  preds = []
      int _t125C#3 = -1;
      bool _t125E#1 = EQ<int>(faceIdx1259,_t125C);
      if _t125E then goto ASSIGN1978 else goto ASSIGN1269
    ASSIGN1978:  preds = [COND1275]
      int[2] _t1265#1 = <int[2]>{_t125C,_t125C};
      return _t1265
      goto JOIN1260
    JOIN1260:  preds = [*RETURN(_t1265)1267,*RETURN(_t1272)1274]
      unreachable
    ASSIGN1269:  preds = [COND1275]
      int _t1268#1 = 8;
      int _t126A#1 = IMul(cell125A,_t1268);
      int _t126C#1 = 2;
      int _t126E#1 = IMul(faceIdx1259,_t126C);
      int _t1270#1 = IAdd(_t126A,_t126E);
      int[2] _t1272#1 = ExtractFemItemN<[femData:Mesh,int],int[2],CellFaceCell(Mesh),0000,"",[],int>(mesh125B,_t1270);
      return _t1272
      goto JOIN1260
}
  function tensor[3] fStep133D (tensor[3] s1279#3) {
    ENTRY133C:  preds = []
      real x127B#4 = TensorIndex<tensor[3],[0]>(s1279);
      real y127D#5 = TensorIndex<tensor[3],[1]>(s1279);
      real z127F#6 = TensorIndex<tensor[3],[2]>(s1279);
      real _t1281#1 = λ(T0[],T1[])<(T0 * T1)> (x127B,x127B);
      real _t1283#1 = λ(T0[],T1[])<(T0 * T1)> (y127D,y127D);
      real _t1285#1 = λ(T0[],T1[])<(T0 + T1)> (_t1281,_t1283);
      real _t1287#1 = λ(T0[],T1[])<(T0 * T1)> (z127F,z127F);
      real _t1289#1 = λ(T0[],T1[])<(T0 + T1)> (_t1285,_t1287);
      real p128B#0 = λ(T0[])<Neg(T0)> (_t1289);
      int _t128D#2 = 2;
      real _t128F#4 = λ(T0[])<(T0)^2> (y127D);
      real _t1291#1 = λ(T0[],T1[])<(T0 * T1)> (_t128F,z127F);
      real _t1293#2 = 0.2e1;
      real _t1295#2 = λ(T0[],T1[])<(T0 * T1)> (_t1293,x127B);
      real _t1297#3 = λ(T0[],T1[])<(T0 * T1)> (_t1295,y127D);
      real _t1299#1 = λ(T0[],T1[])<(T0 * T1)> (_t1297,z127F);
      real _t129F#1 = λ(T0[],T1[])<(T0 * T1)> (x127B,_t128F);
      tensor[3] g12A1#1 = <tensor[3]>[_t1291,_t1299,_t129F];
      real _t12B8#2 = 0.e0;
      real _t12BC#1 = λ(T0[],T1[])<(T0 * T1)> (_t1293,y127D);
      real _t12BE#2 = λ(T0[],T1[])<(T0 * T1)> (_t12BC,z127F);
      tensor[3] _t12C4#1 = <tensor[3]>[_t12B8,_t12BE,_t128F];
      real _t12D0#1 = λ(T0[],T1[])<(T0 * T1)> (_t1295,z127F);
      tensor[3] _t12D8#1 = <tensor[3]>[_t12BE,_t12D0,_t1297];
      tensor[3] _t12E6#1 = <tensor[3]>[_t128F,_t1297,_t12B8];
      tensor[3,3] hess12E8#1 = <tensor[3,3]>[_t12C4,_t12D8,_t12E6];
      (real[3] evals12ED#1,tensor[3][3] E12EC#1) = Eigen3x3(hess12E8);
      real _t12F2#1 = 0.1e1;
      real _t12F6#1 = Subscript<real[3]>(evals12ED,_t128D);
      real _t12F8#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t12F2,_t12F6);
      real _t12FA#1 = λ(T0[])<Neg(T0)> (_t12F8);
      tensor[3] _t12FE#2 = Subscript<tensor[3][3]>(E12EC,_t128D);
      tensor[3] _t1300#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (_t12FA,_t12FE);
      tensor[3,3] _t1306#1 = λ(T0[3],T1[3])<(T0_{i0} * T1_{i1})>_{3 3} (_t1300,_t12FE);
      tensor[3] up1308#4 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (_t1306,g12A1);
      real _t130B#2 = TensorIndex<tensor[3],[0]>(up1308);
      bool _t130F#1 = EQ<real>(_t130B,_t130B);
      bool _t1311#1 = BNot(_t130F);
      if _t1311 then goto ASSIGN1316 else goto ASSIGN1319
    ASSIGN1316:  preds = [COND132F]
      bool _t1314#1 = true;
      goto JOIN1313
    JOIN1313:  preds = [ASSIGN1316,JOIN1320]
      bool _t1315#1 = phi(_t1314,_t1322)
      if _t1315 then goto ASSIGN1332 else goto JOIN1330
    ASSIGN1332:  preds = [COND133A]
      real _t1331#3 = +inf;
      tensor[3] _t1337#1 = <tensor[3]>[_t1331,_t1331,_t1331];
      return _t1337
      goto JOIN1330
    JOIN1330:  preds = [*RETURN(_t1337)1339,COND133A]
      return up1308
    ASSIGN1319:  preds = [COND132F]
      real _t1318#2 = TensorIndex<tensor[3],[1]>(up1308);
      bool _t131C#1 = EQ<real>(_t1318,_t1318);
      bool _t131E#1 = BNot(_t131C);
      if _t131E then goto ASSIGN1323 else goto ASSIGN1325
    ASSIGN1323:  preds = [COND132C]
      bool _t1321#1 = true;
      goto JOIN1320
    JOIN1320:  preds = [ASSIGN1323,ASSIGN132B]
      bool _t1322#1 = phi(_t1321,_t132A)
      goto JOIN1313
    ASSIGN1325:  preds = [COND132C]
      real _t1324#2 = TensorIndex<tensor[3],[2]>(up1308);
      bool _t1328#1 = EQ<real>(_t1324,_t1324);
      bool _t132A#1 = BNot(_t1328);
      goto JOIN1320
}
  function tensor[3,3] fPerp13CB (tensor[3] s133E#3) {
    ENTRY13CA:  preds = []
      real x1340#4 = TensorIndex<tensor[3],[0]>(s133E);
      real y1342#5 = TensorIndex<tensor[3],[1]>(s133E);
      real z1344#6 = TensorIndex<tensor[3],[2]>(s133E);
      real _t1346#1 = λ(T0[],T1[])<(T0 * T1)> (x1340,x1340);
      real _t1348#1 = λ(T0[],T1[])<(T0 * T1)> (y1342,y1342);
      real _t134A#1 = λ(T0[],T1[])<(T0 + T1)> (_t1346,_t1348);
      real _t134C#1 = λ(T0[],T1[])<(T0 * T1)> (z1344,z1344);
      real _t134E#1 = λ(T0[],T1[])<(T0 + T1)> (_t134A,_t134C);
      real p1350#0 = λ(T0[])<Neg(T0)> (_t134E);
      int _t1352#1 = 2;
      real _t1354#4 = λ(T0[])<(T0)^2> (y1342);
      real _t1356#1 = λ(T0[],T1[])<(T0 * T1)> (_t1354,z1344);
      real _t1358#2 = 0.2e1;
      real _t135A#2 = λ(T0[],T1[])<(T0 * T1)> (_t1358,x1340);
      real _t135C#3 = λ(T0[],T1[])<(T0 * T1)> (_t135A,y1342);
      real _t135E#1 = λ(T0[],T1[])<(T0 * T1)> (_t135C,z1344);
      real _t1364#1 = λ(T0[],T1[])<(T0 * T1)> (x1340,_t1354);
      tensor[3] g1366#0 = <tensor[3]>[_t1356,_t135E,_t1364];
      real _t137D#2 = 0.e0;
      real _t1381#1 = λ(T0[],T1[])<(T0 * T1)> (_t1358,y1342);
      real _t1383#2 = λ(T0[],T1[])<(T0 * T1)> (_t1381,z1344);
      tensor[3] _t1389#1 = <tensor[3]>[_t137D,_t1383,_t1354];
      real _t1395#1 = λ(T0[],T1[])<(T0 * T1)> (_t135A,z1344);
      tensor[3] _t139D#1 = <tensor[3]>[_t1383,_t1395,_t135C];
      tensor[3] _t13AB#1 = <tensor[3]>[_t1354,_t135C,_t137D];
      tensor[3,3] hess13AD#1 = <tensor[3,3]>[_t1389,_t139D,_t13AB];
      (real[3] evals13B2#0,tensor[3][3] _t13B1#1) = Eigen3x3(hess13AD);
      tensor[3] E213B6#2 = Subscript<tensor[3][3]>(_t13B1,_t1352);
      tensor[3,3] _t13B8#1 = λ()<δ_{i0,i1}>_{3 3} ();
      tensor[3,3] _t13BA#1 = λ(T0[3],T1[3])<(T0_{i0} * T1_{i1})>_{3 3} (E213B6,E213B6);
      tensor[3,3] m13BC#3 = λ(T0[3 3],T1[3 3])<(T0_{i0,i1}) - (T1_{i0,i1})>_{3 3} (_t13B8,_t13BA);
      real t13BE#2 = λ(T0[3 3],T1[3 3])<Σ(i0=0..2)(i1=0..2)<((T0_{i0,i1} * T1_{i0,i1}))>(i0=0..2)(i1=0..2)> (m13BC,m13BC);
      bool _t13C0#1 = EQ<real>(t13BE,t13BE);
      bool _t13C2#1 = BNot(_t13C0);
      if _t13C2 then goto ASSIGN13C6 else goto JOIN13C4
    ASSIGN13C6:  preds = [COND13C8]
      tensor[3,3] _t13C5#1 = λ()<Z_{i0,i1}>_{3 3} ();
      return _t13C5
      goto JOIN13C4
    JOIN13C4:  preds = [*RETURN(_t13C5)13C7,COND13C8]
      return m13BC
}
## input initialization
  ENTRY1257:  preds = []
    real rad1245#5 = 0.1e-1;
    globals.rad123E = rad1245;
    globals.eps123F = rad1245;
    real v0124B#1 = 0.625e-1;
    globals.v01240 = v0124B;
    globals.fBias1241 = rad1245;
    globals.fStren1242 = rad1245;
    globals.zfuz1243 = rad1245;
    return
## global-variable initialization
  ENTRY1407:  preds = []
    femData:Mesh meshData13F1#2 = globals.meshData123B;
    int _t13F3#1 = 0;
    int _t13F5#1 = 1;
    int _t13F7#1 = ExtractFemItem<int,NumCell(Mesh)>(meshData13F1);
    int _t13F9#1 = ISub(_t13F7,_t13F5);
    int[] _t13FB#1 = Range(_t13F3,_t13F9);
    femData:MeshCell[] _t13FD#1 = <femData:MeshCell[]>{};
  FOREACH1401:  preds = [ASSIGN13FE,NEXT1406]
    foreach (_t13FF in _t13FB) on exit goto RETURN1408
      femData:MeshCell[] _t1400#1 = phi(_t13FD,_t1404)
    femData:MeshCell _t1402#1 = LoadFem<femData:MeshCell>(meshData13F1,_t13FF);
    femData:MeshCell[] _t1404#1 = Append<femData:MeshCell>(_t1400,_t1402);
    goto FOREACH1401
  RETURN1408:  preds = [FOREACH1401]
    return
## strand
  strand particle (tensor[3] pos01413#2, real hh01414#1) in 3D
    state:
      output tensor[3] pos;
      output tensor[3] _pos;
      real hh;
      tensor[3] step;
      bool found;
      int nfs;
      int test;
      int testp;
      int steps;
    state init
      ENTRY1434:  preds = []
        tensor[3] step1428#1 = λ()<Z_{i0}>_{3} ();
        bool found142A#1 = false;
        int nfs142C#3 = 0;
        int test142E#1 = 1;
        self.pos = pos01413;
        self._pos = pos01413;
        self.hh = hh01414;
        self.step = step1428;
        self.found = found142A;
        self.nfs = nfs142C;
        self.test = test142E;
        self.testp = nfs142C;
        self.steps = nfs142C;
        return
    end state init
    method update
        ENTRY191B:  preds = []
          real rad1442#10 = globals.rad123E;
          real eps1441#1 = globals.eps123F;
          real fBias1440#3 = globals.fBias1241;
          real fStren143F#3 = globals.fStren1242;
          tensor[3] pos1447#10 = self.pos;
          tensor[3] _pos1448#0 = self._pos;
          real hh1449#5 = self.hh;
          tensor[3] step144A#0 = self.step;
          bool found144B#3 = self.found;
          int nfs144C#3 = self.nfs;
          int test144D#0 = self.test;
          int testp144E#2 = self.testp;
          int steps144F#1 = self.steps;
          int _t1459#4 = 1;
          int steps145B#4 = IAdd(steps144F,_t1459);
          real _t1460#13 = 0.e0;
          tensor[3] _t1466#3 = <tensor[3]>[_t1460,_t1460,_t1460];
          tensor[3] mid1468#4 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (pos1447,_t1466);
          real _t146B#1 = TensorIndex<tensor[3],[0]>(mid1468);
          real _t146D#1 = λ(T0[])<Abs(T0)> (_t146B);
          real _t146F#9 = 0.1e0;
          bool _t1471#1 = GT<real>(_t146D,_t146F);
          if _t1471 then goto ASSIGN1476 else goto ASSIGN148E
        ASSIGN1476:  preds = [COND148F]
          real _t1475#1 = TensorIndex<tensor[3],[1]>(mid1468);
          real _t1477#1 = λ(T0[])<Abs(T0)> (_t1475);
          bool _t147B#1 = GT<real>(_t1477,_t146F);
          if _t147B then goto ASSIGN147F else goto ASSIGN1488
        ASSIGN147F:  preds = [COND1489]
          real _t147E#1 = TensorIndex<tensor[3],[2]>(mid1468);
          real _t1480#1 = λ(T0[])<Abs(T0)> (_t147E);
          bool _t1484#1 = GT<real>(_t1480,_t146F);
          goto JOIN147D
        JOIN147D:  preds = [ASSIGN1999,ASSIGN1488]
          bool _t1485#1 = phi(_t1484,_t1487)
          goto JOIN1473
        JOIN1473:  preds = [JOIN147D,ASSIGN148E]
          bool _t148B#1 = phi(_t1485,_t148D)
          real _t1493#2 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (mid1468);
          real _t1495#3 = 0.5e1;
          bool _t1497#1 = LT<real>(_t1493,_t1495);
          if _t1497 then goto ASSIGN149E else goto ASSIGN14AC
        ASSIGN149E:  preds = [COND14AD]
          real _t149D#1 = 0.2e1;
          bool _t149F#1 = GT<real>(_t1493,_t149D);
          if _t149F then goto JOIN14A1 else goto ASSIGN14A6
        JOIN14A1:  preds = [COND14A7,ASSIGN14A6]
          bool _t14A3#1 = phi(_t148B,_t14A5)
          goto JOIN1499
        JOIN1499:  preds = [JOIN14A1,ASSIGN14AC]
          bool _t14A9#1 = phi(_t14A3,_t14AB)
          if _t14A9 then goto ASSIGN14B5 else goto ASSIGN1554
        ASSIGN14B5:  preds = [COND1555]
          real _t14B4#4 = TensorIndex<tensor[3],[0]>(pos1447);
          bool _t14B8#1 = EQ<real>(_t14B4,_t14B4);
          bool _t14BA#1 = BNot(_t14B8);
          if _t14BA then goto ASSIGN14BF else goto ASSIGN14C2
        ASSIGN14BF:  preds = [COND14D8]
          bool _t14BD#1 = true;
          goto JOIN14BC
        JOIN14BC:  preds = [ASSIGN14BF,JOIN14C9]
          bool _t14BE#1 = phi(_t14BD,_t14CB)
          bool _t14DB#1 = BNot(_t14BE);
          if _t14DB then goto ASSIGN14E3 else goto ASSIGN154E
        ASSIGN14E3:  preds = [COND154F]
          real y14E2#3 = TensorIndex<tensor[3],[1]>(pos1447);
          real z14E4#4 = TensorIndex<tensor[3],[2]>(pos1447);
          int _t14E6#1 = 2;
          real _t14E8#4 = λ(T0[])<(T0)^2> (y14E2);
          real _t14EA#1 = λ(T0[],T1[])<(T0 * T1)> (_t14E8,z14E4);
          real _t14EC#2 = 0.2e1;
          real _t14EE#2 = λ(T0[],T1[])<(T0 * T1)> (_t14EC,_t14B4);
          real _t14F0#3 = λ(T0[],T1[])<(T0 * T1)> (_t14EE,y14E2);
          real _t14F2#1 = λ(T0[],T1[])<(T0 * T1)> (_t14F0,z14E4);
          real _t14F8#1 = λ(T0[],T1[])<(T0 * T1)> (_t14B4,_t14E8);
          tensor[3] g14FA#1 = <tensor[3]>[_t14EA,_t14F2,_t14F8];
          real _t1509#1 = λ(T0[],T1[])<(T0 * T1)> (_t14EC,y14E2);
          real _t150B#2 = λ(T0[],T1[])<(T0 * T1)> (_t1509,z14E4);
          tensor[3] _t1511#1 = <tensor[3]>[_t1460,_t150B,_t14E8];
          real _t151D#1 = λ(T0[],T1[])<(T0 * T1)> (_t14EE,z14E4);
          tensor[3] _t1525#1 = <tensor[3]>[_t150B,_t151D,_t14F0];
          tensor[3] _t1533#1 = <tensor[3]>[_t14E8,_t14F0,_t1460];
          tensor[3,3] hess1535#1 = <tensor[3,3]>[_t1511,_t1525,_t1533];
          (real[3] _t1539#1,tensor[3][3] evecs153A#0) = Eigen3x3(hess1535);
          real _t153E#1 = Subscript<real[3]>(_t1539,_t14E6);
          real _t1540#1 = λ(T0[])<Neg(T0)> (_t153E);
          real _t1542#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (g14FA);
          real _t1544#1 = λ(T0[],T1[])<(T0 + T1)> (fBias1440,_t1542);
          real str1546#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t1540,_t1544);
          bool _t154A#1 = GTE<real>(str1546,fStren143F);
          goto JOIN14DD
        JOIN14DD:  preds = [ASSIGN19AA,ASSIGN154E]
          bool _t154B#1 = phi(_t154A,_t154D)
          goto JOIN14B0
        JOIN14B0:  preds = [JOIN14DD,ASSIGN1554]
          bool _t1551#1 = phi(_t154B,_t1553)
          bool _t1558#1 = BNot(_t1551);
          if _t1558 then goto DIE155B else goto JOIN155A
        DIE155B:  preds = [COND155C]
          die
          goto JOIN155A
        JOIN155A:  preds = [*DIE155B,COND155C]
          bool _t155D#1 = BNot(found144B);
          if _t155D then goto ASSIGN1562 else goto ASSIGN15B3
        ASSIGN1562:  preds = [COND191A]
          tensor[3] step1560#3 = fStep133D (pos1447);
          tensor[3] pos1563#4 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos1447,step1560);
          real _t156B#2 = TensorIndex<tensor[3],[0]>(pos1563);
          bool _t156F#1 = EQ<real>(_t156B,_t156B);
          bool _t1571#1 = BNot(_t156F);
          if _t1571 then goto ASSIGN1576 else goto ASSIGN1579
        ASSIGN1576:  preds = [COND158F]
          bool _t1574#1 = true;
          goto JOIN1573
        JOIN1573:  preds = [ASSIGN1576,JOIN1580]
          bool _t1575#1 = phi(_t1574,_t1582)
          if _t1575 then goto DIE1593 else goto JOIN1592
        DIE1593:  preds = [COND1594]
          die
          goto JOIN1592
        JOIN1592:  preds = [*DIE1593,COND1594]
          real _t1595#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (step1560);
          real _t1597#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t1595,rad1442);
          bool _t1599#1 = GT<real>(_t1597,eps1441);
          if _t1599 then goto ASSIGN19FA else goto ASSIGN15AA
        ASSIGN19FA:  preds = [COND15AE]
          int nfs159E#2 = IAdd(nfs144C,_t1459);
          int _t15A1#1 = 10;
          bool _t15A3#1 = GT<int>(nfs159E,_t15A1);
          if _t15A3 then goto DIE15A6 else goto JOIN15A5
        DIE15A6:  preds = [COND15A7]
          die
          goto JOIN15A5
        JOIN15A5:  preds = [*DIE15A6,COND15A7]
          goto JOIN159B
        JOIN159B:  preds = [JOIN15A5,ASSIGN15AA]
          int testp15AC#1 = phi(testp144E,_t1459)
          int nfs159F#1 = phi(nfs159E,nfs144C)
          bool found15A9#1 = phi(found144B,found15A8)
          goto JOIN155F
        JOIN155F:  preds = [JOIN159B,JOIN1810]
          int testp15B1#1 = phi(testp15AC,testp144E)
          int nfs15B0#1 = phi(nfs159F,nfs144C)
          bool found15AF#1 = phi(found15A9,found144B)
          tensor[3] step1561#1 = phi(step1560,up178E)
          real hh176D#1 = phi(hh1449,hh17DC)
          tensor[3] pos1564#2 = phi(pos1563,pos17C6)
          self.pos = pos1564;
          self._pos = pos1564;
          self.hh = hh176D;
          self.step = step1561;
          self.found = found15AF;
          self.nfs = nfs15B0;
          self.testp = testp15B1;
          self.steps = steps145B;
          active
        ASSIGN15AA:  preds = [COND15AE]
          bool found15A8#1 = true;
          goto JOIN159B
        ASSIGN1579:  preds = [COND158F]
          real _t1578#2 = TensorIndex<tensor[3],[1]>(pos1563);
          bool _t157C#1 = EQ<real>(_t1578,_t1578);
          bool _t157E#1 = BNot(_t157C);
          if _t157E then goto ASSIGN1583 else goto ASSIGN1585
        ASSIGN1583:  preds = [COND158C]
          bool _t1581#1 = true;
          goto JOIN1580
        JOIN1580:  preds = [ASSIGN1583,ASSIGN158B]
          bool _t1582#1 = phi(_t1581,_t158A)
          goto JOIN1573
        ASSIGN1585:  preds = [COND158C]
          real _t1584#2 = TensorIndex<tensor[3],[2]>(pos1563);
          bool _t1588#1 = EQ<real>(_t1584,_t1584);
          bool _t158A#1 = BNot(_t1588);
          goto JOIN1580
        ASSIGN15B3:  preds = [COND191A]
          tensor[3] _t15B2#1 = fStep133D (pos1447);
          tensor[3] pos15B4#16 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos1447,_t15B2);
          real _t15BA#2 = TensorIndex<tensor[3],[0]>(pos15B4);
          bool _t15BE#1 = EQ<real>(_t15BA,_t15BA);
          bool _t15C0#1 = BNot(_t15BE);
          if _t15C0 then goto ASSIGN15C5 else goto ASSIGN15C8
        ASSIGN15C5:  preds = [COND15DE]
          bool _t15C3#1 = true;
          goto JOIN15C2
        JOIN15C2:  preds = [ASSIGN15C5,JOIN15CF]
          bool _t15C4#1 = phi(_t15C3,_t15D1)
          if _t15C4 then goto DIE15E2 else goto JOIN15E1
        DIE15E2:  preds = [COND15E3]
          die
          goto JOIN15E1
        JOIN15E1:  preds = [*DIE15E2,COND15E3]
          tensor[3] step15E4#4 = λ()<Z_{i0}>_{3} ();
          int nn15EA#2 = 0;
          particle[] _t15EC#1 = SphereQuery<3,particle>(pos15B4,rad1442);
        FOREACH15F2:  preds = [ASSIGN19AF,NEXT1639]
          foreach (P15EE in _t15EC) on exit goto ASSIGN19B0
            int nn15F1#3 = phi(nn15EA,nn1637)
            tensor[3] force15F0#2 = phi(step15E4,force1633)
            real oldE15EF#2 = phi(_t1460,oldE1609)
          tensor[3] _t15F3#1 = P15EE.pos;
          tensor[3] _t15F5#2 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (_t15F3,pos15B4);
          real _t15F8#2 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (_t15F5);
          real _t15FA#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t15F8,rad1442);
          real _t15FD#2 = 0.1e1;
          real _t15FF#2 = λ(T0[],T1[])<(T0) - (T1)> (_t15FD,_t15FA);
          int _t1601#0 = 4;
          real _t1603#1 = λ(T0[])<(T0)^4> (_t15FF);
          real oldE1609#1 = λ(T0[],T1[])<(T0 + T1)> (oldE15EF,_t1603);
          int _t1615#1 = -4;
          real _t1617#1 = IntToReal(_t1615);
          int _t161D#0 = 3;
          real _t161F#1 = λ(T0[])<(T0)^3> (_t15FF);
          real _t1621#1 = λ(T0[],T1[])<(T0 * T1)> (_t1617,_t161F);
          real _t1627#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t15FD,rad1442);
          real _t1629#1 = λ(T0[],T1[])<(T0 * T1)> (_t1621,_t1627);
          tensor[3] _t162B#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (_t1629,_t15F5);
          tensor[3] _t162F#1 = λ(T0[3],T1[])<(T0_{i0}) / ( T1)>_{3} (_t162B,_t15F8);
          tensor[3] force1633#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (force15F0,_t162F);
          int nn1637#1 = IAdd(nn15F1,_t1459);
          goto FOREACH15F2
        ASSIGN19B0:  preds = [FOREACH15F2]
          bool _t163C#1 = EQ<int>(nn15EA,nn15F1);
          if _t163C then goto ASSIGN1640 else goto JOIN163E
        ASSIGN1640:  preds = [COND1752]
          real _t163F#1 = 0.5e0;
          real _t1641#1 = λ(T0[],T1[])<(T0 * T1)> (_t163F,rad1442);
          tensor[3] _t1647#1 = <tensor[3]>[_t1641,_t1460,_t1460];
          tensor[3] npos1649#7 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos15B4,_t1647);
          tensor[3] mid1656#4 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (npos1649,_t1466);
          real _t1659#1 = TensorIndex<tensor[3],[0]>(mid1656);
          real _t165B#1 = λ(T0[])<Abs(T0)> (_t1659);
          bool _t165F#1 = GT<real>(_t165B,_t146F);
          if _t165F then goto ASSIGN1664 else goto ASSIGN167C
        ASSIGN1664:  preds = [COND167D]
          real _t1663#1 = TensorIndex<tensor[3],[1]>(mid1656);
          real _t1665#1 = λ(T0[])<Abs(T0)> (_t1663);
          bool _t1669#1 = GT<real>(_t1665,_t146F);
          if _t1669 then goto ASSIGN166D else goto ASSIGN1676
        ASSIGN166D:  preds = [COND1677]
          real _t166C#1 = TensorIndex<tensor[3],[2]>(mid1656);
          real _t166E#1 = λ(T0[])<Abs(T0)> (_t166C);
          bool _t1672#1 = GT<real>(_t166E,_t146F);
          goto JOIN166B
        JOIN166B:  preds = [ASSIGN19B5,ASSIGN1676]
          bool _t1673#1 = phi(_t1672,_t1675)
          goto JOIN1661
        JOIN1661:  preds = [JOIN166B,ASSIGN167C]
          bool _t1679#1 = phi(_t1673,_t167B)
          real _t1681#2 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (mid1656);
          bool _t1685#1 = LT<real>(_t1681,_t1495);
          if _t1685 then goto ASSIGN168C else goto ASSIGN169A
        ASSIGN168C:  preds = [COND169B]
          real _t168B#1 = 0.2e1;
          bool _t168D#1 = GT<real>(_t1681,_t168B);
          if _t168D then goto JOIN168F else goto ASSIGN1694
        JOIN168F:  preds = [COND1695,ASSIGN1694]
          bool _t1691#1 = phi(_t1679,_t1693)
          goto JOIN1687
        JOIN1687:  preds = [JOIN168F,ASSIGN169A]
          bool _t1697#1 = phi(_t1691,_t1699)
          if _t1697 then goto ASSIGN16A3 else goto ASSIGN1742
        ASSIGN16A3:  preds = [COND1743]
          real _t16A2#4 = TensorIndex<tensor[3],[0]>(npos1649);
          bool _t16A6#1 = EQ<real>(_t16A2,_t16A2);
          bool _t16A8#1 = BNot(_t16A6);
          if _t16A8 then goto ASSIGN16AD else goto ASSIGN16B0
        ASSIGN16AD:  preds = [COND16C6]
          bool _t16AB#1 = true;
          goto JOIN16AA
        JOIN16AA:  preds = [ASSIGN16AD,JOIN16B7]
          bool _t16AC#1 = phi(_t16AB,_t16B9)
          bool _t16C9#1 = BNot(_t16AC);
          if _t16C9 then goto ASSIGN16D1 else goto ASSIGN173C
        ASSIGN16D1:  preds = [COND173D]
          real y16D0#3 = TensorIndex<tensor[3],[1]>(npos1649);
          real z16D2#4 = TensorIndex<tensor[3],[2]>(npos1649);
          int _t16D4#1 = 2;
          real _t16D6#4 = λ(T0[])<(T0)^2> (y16D0);
          real _t16D8#1 = λ(T0[],T1[])<(T0 * T1)> (_t16D6,z16D2);
          real _t16DA#2 = 0.2e1;
          real _t16DC#2 = λ(T0[],T1[])<(T0 * T1)> (_t16DA,_t16A2);
          real _t16DE#3 = λ(T0[],T1[])<(T0 * T1)> (_t16DC,y16D0);
          real _t16E0#1 = λ(T0[],T1[])<(T0 * T1)> (_t16DE,z16D2);
          real _t16E6#1 = λ(T0[],T1[])<(T0 * T1)> (_t16A2,_t16D6);
          tensor[3] g16E8#1 = <tensor[3]>[_t16D8,_t16E0,_t16E6];
          real _t16F7#1 = λ(T0[],T1[])<(T0 * T1)> (_t16DA,y16D0);
          real _t16F9#2 = λ(T0[],T1[])<(T0 * T1)> (_t16F7,z16D2);
          tensor[3] _t16FF#1 = <tensor[3]>[_t1460,_t16F9,_t16D6];
          real _t170B#1 = λ(T0[],T1[])<(T0 * T1)> (_t16DC,z16D2);
          tensor[3] _t1713#1 = <tensor[3]>[_t16F9,_t170B,_t16DE];
          tensor[3] _t1721#1 = <tensor[3]>[_t16D6,_t16DE,_t1460];
          tensor[3,3] hess1723#1 = <tensor[3,3]>[_t16FF,_t1713,_t1721];
          (real[3] _t1727#1,tensor[3][3] evecs1728#0) = Eigen3x3(hess1723);
          real _t172C#1 = Subscript<real[3]>(_t1727,_t16D4);
          real _t172E#1 = λ(T0[])<Neg(T0)> (_t172C);
          real _t1730#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (g16E8);
          real _t1732#1 = λ(T0[],T1[])<(T0 + T1)> (fBias1440,_t1730);
          real str1734#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t172E,_t1732);
          bool _t1738#1 = GTE<real>(str1734,fStren143F);
          goto JOIN16CB
        JOIN16CB:  preds = [ASSIGN19C7,ASSIGN173C]
          bool _t1739#1 = phi(_t1738,_t173B)
          goto JOIN169E
        JOIN169E:  preds = [JOIN16CB,ASSIGN1742]
          bool _t173F#1 = phi(_t1739,_t1741)
          if _t173F then goto NEW1747 else goto JOIN1746
        NEW1747:  preds = [COND1748]
          new particle(npos1649,hh1449);
          goto JOIN1746
        JOIN1746:  preds = [NEW1747,COND1748]
          self.pos = pos15B4;
          self._pos = pos15B4;
          self.step = step15E4;
          self.steps = steps145B;
          active
          goto JOIN163E
        JOIN163E:  preds = [*ACTIVE1749,COND1752]
          tensor[3,3] _t1753#1 = fPerp13CB (pos15B4);
          tensor[3] force1755#2 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (_t1753,force15F0);
          tensor[3] es1757#3 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (hh1449,force1755);
          real _t1759#2 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (es1757);
          bool _t175B#1 = GT<real>(_t1759,rad1442);
          if _t175B then goto ASSIGN19C9 else goto JOIN175D
        ASSIGN19C9:  preds = [COND176C]
          real _t1760#2 = λ(T0[],T1[])<(T0) / ( T1)> (rad1442,_t1759);
          real hh1762#1 = λ(T0[],T1[])<(T0 * T1)> (hh1449,_t1760);
          tensor[3] es1769#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (_t1760,es1757);
          goto JOIN175D
        JOIN175D:  preds = [ASSIGN19CA,COND176C]
          tensor[3] es176A#5 = phi(es1769,es1757)
          real hh1763#2 = phi(hh1762,hh1449)
          tensor[3] samplePos176E#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos15B4,es176A);
          tensor[3] fs1770#2 = fStep133D (samplePos176E);
          real _t1772#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (fs1770);
          real _t1774#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (es176A);
          real _t1776#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t1772,_t1774);
          real _t1778#5 = 0.5e0;
          bool _t177A#1 = GT<real>(_t1776,_t1778);
          if _t177A then goto ASSIGN19CB else goto JOIN177C
        ASSIGN19CB:  preds = [COND178B]
          real hh177F#1 = λ(T0[],T1[])<(T0 * T1)> (hh1763,_t1778);
          self.pos = pos15B4;
          self._pos = pos15B4;
          self.hh = hh177F;
          self.step = step15E4;
          self.steps = steps145B;
          active
          goto JOIN177C
        JOIN177C:  preds = [*ACTIVE1782,COND178B]
          real hh1780#2 = phi(hh1763)
          tensor[3] up178E#2 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (fs1770,es176A);
          tensor[3] pos1790#4 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos15B4,up178E);
          particle[] _t1794#1 = SphereQuery<3,particle>(pos1790,rad1442);
        FOREACH179A:  preds = [ASSIGN19CD,NEXT17B3]
          foreach (P1798 in _t1794) on exit goto ASSIGN19CE
            real accum1799#2 = phi(_t1460,accum17B1)
          tensor[3] _t179B#1 = P1798.pos;
          tensor[3] _t179D#1 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (pos1790,_t179B);
          real _t17A0#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (_t179D);
          real _t17A2#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t17A0,rad1442);
          real _t17A5#1 = 0.1e1;
          real _t17A7#1 = λ(T0[],T1[])<(T0) - (T1)> (_t17A5,_t17A2);
          int _t17A9#0 = 4;
          real _t17AB#1 = λ(T0[])<(T0)^4> (_t17A7);
          real accum17B1#1 = λ(T0[],T1[])<(T0 + T1)> (accum1799,_t17AB);
          goto FOREACH179A
        ASSIGN19CE:  preds = [FOREACH179A]
          real _t17B6#1 = λ(T0[],T1[])<(T0) - (T1)> (accum1799,oldE15EF);
          tensor[3] _t17BA#1 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (pos1790,pos15B4);
          tensor[3] _t17BC#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (_t1778,_t17BA);
          tensor[3] _t17BE#1 = λ(T0[3])<Neg(T0_{i0})>_{3} (force1755);
          real _t17C0#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (_t17BC,_t17BE);
          bool _t17C2#1 = GT<real>(_t17B6,_t17C0);
          if _t17C2 then goto ASSIGN19D1 else goto JOIN17C4
        ASSIGN19D1:  preds = [COND17D9]
          real hh17CD#1 = λ(T0[],T1[])<(T0 * T1)> (hh1780,_t1778);
          self.pos = pos15B4;
          self._pos = pos15B4;
          self.hh = hh17CD;
          self.step = step15E4;
          self.steps = steps145B;
          active
          goto JOIN17C4
        JOIN17C4:  preds = [*ACTIVE17D0,COND17D9]
          real hh17CE#1 = phi(hh1780)
          tensor[3] pos17C6#5 = phi(pos1790)
          real _t17DA#1 = 0.11e1;
          real hh17DC#2 = λ(T0[],T1[])<(T0 * T1)> (hh17CE,_t17DA);
          real _t17E2#2 = TensorIndex<tensor[3],[0]>(pos17C6);
          bool _t17E6#1 = EQ<real>(_t17E2,_t17E2);
          bool _t17E8#1 = BNot(_t17E6);
          if _t17E8 then goto ASSIGN17ED else goto ASSIGN17F0
        ASSIGN17ED:  preds = [COND1806]
          bool _t17EB#1 = true;
          goto JOIN17EA
        JOIN17EA:  preds = [ASSIGN17ED,JOIN17F7]
          bool _t17EC#1 = phi(_t17EB,_t17F9)
          if _t17EC then goto DIE180A else goto JOIN1809
        DIE180A:  preds = [COND180B]
          die
          goto JOIN1809
        JOIN1809:  preds = [*DIE180A,COND180B]
          int _t180C#1 = 5;
          bool _t180E#1 = LT<int>(nn15F1,_t180C);
          if _t180E then goto ASSIGN19D7 else goto JOIN1810
        ASSIGN19D7:  preds = [COND1919]
          real _t1813#1 = λ(T0[],T1[])<(T0 * T1)> (_t1778,rad1442);
          tensor[3] _t1815#1 = λ(T0[3],T1[3])<(T0_{i0} * (1) / ( Sqrt(Σ(i1=0..2)<((T1_{i1} * T1_{i1}))>(i1=0..2))))>_{3} (es176A,es176A);
          tensor[3] _t1817#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (_t1813,_t1815);
          tensor[3] npos1819#7 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos17C6,_t1817);
          tensor[3] mid1826#4 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (npos1819,_t1466);
          real _t1829#1 = TensorIndex<tensor[3],[0]>(mid1826);
          real _t182B#1 = λ(T0[])<Abs(T0)> (_t1829);
          bool _t182F#1 = GT<real>(_t182B,_t146F);
          if _t182F then goto ASSIGN1834 else goto ASSIGN184C
        ASSIGN1834:  preds = [COND184D]
          real _t1833#1 = TensorIndex<tensor[3],[1]>(mid1826);
          real _t1835#1 = λ(T0[])<Abs(T0)> (_t1833);
          bool _t1839#1 = GT<real>(_t1835,_t146F);
          if _t1839 then goto ASSIGN183D else goto ASSIGN1846
        ASSIGN183D:  preds = [COND1847]
          real _t183C#1 = TensorIndex<tensor[3],[2]>(mid1826);
          real _t183E#1 = λ(T0[])<Abs(T0)> (_t183C);
          bool _t1842#1 = GT<real>(_t183E,_t146F);
          goto JOIN183B
        JOIN183B:  preds = [ASSIGN19DB,ASSIGN1846]
          bool _t1843#1 = phi(_t1842,_t1845)
          goto JOIN1831
        JOIN1831:  preds = [JOIN183B,ASSIGN184C]
          bool _t1849#1 = phi(_t1843,_t184B)
          real _t1851#2 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (mid1826);
          bool _t1855#1 = LT<real>(_t1851,_t1495);
          if _t1855 then goto ASSIGN185C else goto ASSIGN186A
        ASSIGN185C:  preds = [COND186B]
          real _t185B#1 = 0.2e1;
          bool _t185D#1 = GT<real>(_t1851,_t185B);
          if _t185D then goto JOIN185F else goto ASSIGN1864
        JOIN185F:  preds = [COND1865,ASSIGN1864]
          bool _t1861#1 = phi(_t1849,_t1863)
          goto JOIN1857
        JOIN1857:  preds = [JOIN185F,ASSIGN186A]
          bool _t1867#1 = phi(_t1861,_t1869)
          if _t1867 then goto ASSIGN1873 else goto ASSIGN1912
        ASSIGN1873:  preds = [COND1913]
          real _t1872#4 = TensorIndex<tensor[3],[0]>(npos1819);
          bool _t1876#1 = EQ<real>(_t1872,_t1872);
          bool _t1878#1 = BNot(_t1876);
          if _t1878 then goto ASSIGN187D else goto ASSIGN1880
        ASSIGN187D:  preds = [COND1896]
          bool _t187B#1 = true;
          goto JOIN187A
        JOIN187A:  preds = [ASSIGN187D,JOIN1887]
          bool _t187C#1 = phi(_t187B,_t1889)
          bool _t1899#1 = BNot(_t187C);
          if _t1899 then goto ASSIGN18A1 else goto ASSIGN190C
        ASSIGN18A1:  preds = [COND190D]
          real y18A0#3 = TensorIndex<tensor[3],[1]>(npos1819);
          real z18A2#4 = TensorIndex<tensor[3],[2]>(npos1819);
          int _t18A4#1 = 2;
          real _t18A6#4 = λ(T0[])<(T0)^2> (y18A0);
          real _t18A8#1 = λ(T0[],T1[])<(T0 * T1)> (_t18A6,z18A2);
          real _t18AA#2 = 0.2e1;
          real _t18AC#2 = λ(T0[],T1[])<(T0 * T1)> (_t18AA,_t1872);
          real _t18AE#3 = λ(T0[],T1[])<(T0 * T1)> (_t18AC,y18A0);
          real _t18B0#1 = λ(T0[],T1[])<(T0 * T1)> (_t18AE,z18A2);
          real _t18B6#1 = λ(T0[],T1[])<(T0 * T1)> (_t1872,_t18A6);
          tensor[3] g18B8#1 = <tensor[3]>[_t18A8,_t18B0,_t18B6];
          real _t18C7#1 = λ(T0[],T1[])<(T0 * T1)> (_t18AA,y18A0);
          real _t18C9#2 = λ(T0[],T1[])<(T0 * T1)> (_t18C7,z18A2);
          tensor[3] _t18CF#1 = <tensor[3]>[_t1460,_t18C9,_t18A6];
          real _t18DB#1 = λ(T0[],T1[])<(T0 * T1)> (_t18AC,z18A2);
          tensor[3] _t18E3#1 = <tensor[3]>[_t18C9,_t18DB,_t18AE];
          tensor[3] _t18F1#1 = <tensor[3]>[_t18A6,_t18AE,_t1460];
          tensor[3,3] hess18F3#1 = <tensor[3,3]>[_t18CF,_t18E3,_t18F1];
          (real[3] _t18F7#1,tensor[3][3] evecs18F8#0) = Eigen3x3(hess18F3);
          real _t18FC#1 = Subscript<real[3]>(_t18F7,_t18A4);
          real _t18FE#1 = λ(T0[])<Neg(T0)> (_t18FC);
          real _t1900#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (g18B8);
          real _t1902#1 = λ(T0[],T1[])<(T0 + T1)> (fBias1440,_t1900);
          real str1904#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t18FE,_t1902);
          bool _t1908#1 = GTE<real>(str1904,fStren143F);
          goto JOIN189B
        JOIN189B:  preds = [ASSIGN19ED,ASSIGN190C]
          bool _t1909#1 = phi(_t1908,_t190B)
          goto JOIN186E
        JOIN186E:  preds = [JOIN189B,ASSIGN1912]
          bool _t190F#1 = phi(_t1909,_t1911)
          if _t190F then goto NEW1917 else goto JOIN1916
        NEW1917:  preds = [COND1918]
          new particle(npos1819,hh17DC);
          goto JOIN1916
        JOIN1916:  preds = [NEW1917,COND1918]
          goto JOIN1810
        JOIN1810:  preds = [JOIN1916,COND1919]
          goto JOIN155F
        ASSIGN190C:  preds = [COND190D]
          bool _t190B#1 = false;
          goto JOIN189B
        ASSIGN1880:  preds = [COND1896]
          real _t187F#2 = TensorIndex<tensor[3],[1]>(npos1819);
          bool _t1883#1 = EQ<real>(_t187F,_t187F);
          bool _t1885#1 = BNot(_t1883);
          if _t1885 then goto ASSIGN188A else goto ASSIGN188C
        ASSIGN188A:  preds = [COND1893]
          bool _t1888#1 = true;
          goto JOIN1887
        JOIN1887:  preds = [ASSIGN188A,ASSIGN1892]
          bool _t1889#1 = phi(_t1888,_t1891)
          goto JOIN187A
        ASSIGN188C:  preds = [COND1893]
          real _t188B#2 = TensorIndex<tensor[3],[2]>(npos1819);
          bool _t188F#1 = EQ<real>(_t188B,_t188B);
          bool _t1891#1 = BNot(_t188F);
          goto JOIN1887
        ASSIGN1912:  preds = [COND1913]
          bool _t1911#1 = false;
          goto JOIN186E
        ASSIGN1864:  preds = [COND1865]
          bool _t1863#1 = false;
          goto JOIN185F
        ASSIGN186A:  preds = [COND186B]
          bool _t1869#1 = false;
          goto JOIN1857
        ASSIGN1846:  preds = [COND1847]
          bool _t1845#1 = false;
          goto JOIN183B
        ASSIGN184C:  preds = [COND184D]
          bool _t184B#1 = false;
          goto JOIN1831
        ASSIGN17F0:  preds = [COND1806]
          real _t17EF#2 = TensorIndex<tensor[3],[1]>(pos17C6);
          bool _t17F3#1 = EQ<real>(_t17EF,_t17EF);
          bool _t17F5#1 = BNot(_t17F3);
          if _t17F5 then goto ASSIGN17FA else goto ASSIGN17FC
        ASSIGN17FA:  preds = [COND1803]
          bool _t17F8#1 = true;
          goto JOIN17F7
        JOIN17F7:  preds = [ASSIGN17FA,ASSIGN1802]
          bool _t17F9#1 = phi(_t17F8,_t1801)
          goto JOIN17EA
        ASSIGN17FC:  preds = [COND1803]
          real _t17FB#2 = TensorIndex<tensor[3],[2]>(pos17C6);
          bool _t17FF#1 = EQ<real>(_t17FB,_t17FB);
          bool _t1801#1 = BNot(_t17FF);
          goto JOIN17F7
        ASSIGN173C:  preds = [COND173D]
          bool _t173B#1 = false;
          goto JOIN16CB
        ASSIGN16B0:  preds = [COND16C6]
          real _t16AF#2 = TensorIndex<tensor[3],[1]>(npos1649);
          bool _t16B3#1 = EQ<real>(_t16AF,_t16AF);
          bool _t16B5#1 = BNot(_t16B3);
          if _t16B5 then goto ASSIGN16BA else goto ASSIGN16BC
        ASSIGN16BA:  preds = [COND16C3]
          bool _t16B8#1 = true;
          goto JOIN16B7
        JOIN16B7:  preds = [ASSIGN16BA,ASSIGN16C2]
          bool _t16B9#1 = phi(_t16B8,_t16C1)
          goto JOIN16AA
        ASSIGN16BC:  preds = [COND16C3]
          real _t16BB#2 = TensorIndex<tensor[3],[2]>(npos1649);
          bool _t16BF#1 = EQ<real>(_t16BB,_t16BB);
          bool _t16C1#1 = BNot(_t16BF);
          goto JOIN16B7
        ASSIGN1742:  preds = [COND1743]
          bool _t1741#1 = false;
          goto JOIN169E
        ASSIGN1694:  preds = [COND1695]
          bool _t1693#1 = false;
          goto JOIN168F
        ASSIGN169A:  preds = [COND169B]
          bool _t1699#1 = false;
          goto JOIN1687
        ASSIGN1676:  preds = [COND1677]
          bool _t1675#1 = false;
          goto JOIN166B
        ASSIGN167C:  preds = [COND167D]
          bool _t167B#1 = false;
          goto JOIN1661
        ASSIGN15C8:  preds = [COND15DE]
          real _t15C7#2 = TensorIndex<tensor[3],[1]>(pos15B4);
          bool _t15CB#1 = EQ<real>(_t15C7,_t15C7);
          bool _t15CD#1 = BNot(_t15CB);
          if _t15CD then goto ASSIGN15D2 else goto ASSIGN15D4
        ASSIGN15D2:  preds = [COND15DB]
          bool _t15D0#1 = true;
          goto JOIN15CF
        JOIN15CF:  preds = [ASSIGN15D2,ASSIGN15DA]
          bool _t15D1#1 = phi(_t15D0,_t15D9)
          goto JOIN15C2
        ASSIGN15D4:  preds = [COND15DB]
          real _t15D3#2 = TensorIndex<tensor[3],[2]>(pos15B4);
          bool _t15D7#1 = EQ<real>(_t15D3,_t15D3);
          bool _t15D9#1 = BNot(_t15D7);
          goto JOIN15CF
        ASSIGN154E:  preds = [COND154F]
          bool _t154D#1 = false;
          goto JOIN14DD
        ASSIGN14C2:  preds = [COND14D8]
          real _t14C1#2 = TensorIndex<tensor[3],[1]>(pos1447);
          bool _t14C5#1 = EQ<real>(_t14C1,_t14C1);
          bool _t14C7#1 = BNot(_t14C5);
          if _t14C7 then goto ASSIGN14CC else goto ASSIGN14CE
        ASSIGN14CC:  preds = [COND14D5]
          bool _t14CA#1 = true;
          goto JOIN14C9
        JOIN14C9:  preds = [ASSIGN14CC,ASSIGN14D4]
          bool _t14CB#1 = phi(_t14CA,_t14D3)
          goto JOIN14BC
        ASSIGN14CE:  preds = [COND14D5]
          real _t14CD#2 = TensorIndex<tensor[3],[2]>(pos1447);
          bool _t14D1#1 = EQ<real>(_t14CD,_t14CD);
          bool _t14D3#1 = BNot(_t14D1);
          goto JOIN14C9
        ASSIGN1554:  preds = [COND1555]
          bool _t1553#1 = false;
          goto JOIN14B0
        ASSIGN14A6:  preds = [COND14A7]
          bool _t14A5#1 = false;
          goto JOIN14A1
        ASSIGN14AC:  preds = [COND14AD]
          bool _t14AB#1 = false;
          goto JOIN1499
        ASSIGN1488:  preds = [COND1489]
          bool _t1487#1 = false;
          goto JOIN147D
        ASSIGN148E:  preds = [COND148F]
          bool _t148D#1 = false;
          goto JOIN1473
    end update
  end particle
## initial strand creation
  COLLECTION
    ENTRY1411:  preds = []
      tensor[3][] ipos1409#1 = globals.ipos1244;
    FOREACH140C:  preds = [ASSIGN140A,NEXT1410]
      foreach (x140B in ipos1409) on exit goto RETURN1412
      real _t140D#1 = 0.1e1;
      new particle(x140B,_t140D);
      goto FOREACH140C
    RETURN1412:  preds = [FOREACH140C]
      return
## global update
  ENTRY1972:  preds = []
    real rad1926#1 = globals.rad123E;
    real eps1925#1 = globals.eps123F;
    particle[] P1929#5 = Strands<particle,all>;
    (int res192A#1) = sum<int>(MAP sum13D2 (P1929));
    (int res1930#2) = max<int>(MAP max13D9 (P1929));
    (int res1936#1) = sum<int>(MAP sum13E0 (P1929));
    (bool res193C#2) = all(MAP all13E7 (P1929));
    (real res1942#1) = max<real>(MAP max13F0 (P1929));
    string _t1947#1 = "One run:";
    string _t1949#3 = " and ";
    real _t194B#2 = λ(T0[],T1[])<(T0) / ( T1)> (res1942,rad1926);
    bool _t1951#2 = LT<real>(_t194B,eps1925);
    string _t1955#1 = " of ";
    string _t1957#2 = "\n";
    Print<[string,bool,string,real,string,bool,string,int,string,int,string]>(_t1947,res193C,_t1949,_t194B,_t1949,_t1951,_t1949,res1936,_t1955,res192A,_t1957);
    if res193C then goto COND1964 else goto JOIN195A
  COND1964:  preds = [COND1965]
    if _t1951 then goto ASSIGN1961 else goto JOIN195F
  ASSIGN1961:  preds = [COND1964]
    string _t1960#1 = "CONVERGED!\n";
    Print<[string]>(_t1960);
    StabilizeAll;
    goto JOIN195F
  JOIN195F:  preds = [MASSIGN1963,COND1964]
    goto JOIN195A
  JOIN195A:  preds = [JOIN195F,COND1965]
    int _t1966#1 = 2000;
    bool _t1968#1 = GT<int>(res1930,_t1966);
    if _t1968 then goto MASSIGN196B else goto JOIN196A
  MASSIGN196B:  preds = [COND196C]
    StabilizeAll;
    goto JOIN196A
  JOIN196A:  preds = [MASSIGN196B,COND196C]
    string _t196D#1 = "Current steps:";
    Print<[string,int,string]>(_t196D,res1930,_t1957);
    continue
#### end program ####
##### high-ir: after normalization rewriting ####
## properties
  GlobalInit StabilizeAll GlobalReduce StrandSets GlobalUpdate NewStrands StrandCommunication StrandsMayDie HasInputs HasGlobals ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
## globals
  input meshData123B (meshData) = <no-default>
  input 0space04FA_intermedateGlobal123C (space) = <no-default>
  input 0data04FC_intermedateGlobal123D (data) = <no-default>
  input rad123E (rad) = <default>
  input eps123F (eps) = <default>
  input v01240 (v0) = <default>
  input fBias1241 (fBias) = <default>
  input fStren1242 (fStren) = <default>
  input zfuz1243 (zfuz) = <default>
  input ipos1244 (ipos) = <no-default>
## functions
  function real max13F0 (particle P13E8#1) {
    ENTRY13EF:  preds = []
      tensor[3] _t13E9#1 = P13E8.step;
      real _t13EC#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (_t13E9);
      return _t13EC
}
  function bool all13E7 (particle P13E1#1) {
    ENTRY13E6:  preds = []
      bool _t13E2#1 = P13E1.found;
      return _t13E2
}
  function int sum13E0 (particle P13DA#1) {
    ENTRY13DF:  preds = []
      int _t13DB#1 = P13DA.testp;
      return _t13DB
}
  function int max13D9 (particle P13D3#1) {
    ENTRY13D8:  preds = []
      int _t13D4#1 = P13D3.steps;
      return _t13D4
}
  function int sum13D2 (particle P13CC#1) {
    ENTRY13D1:  preds = []
      int _t13CD#1 = P13CC.test;
      return _t13CD
}
  function int[2] nextCell41278 (int faceIdx1259#2, int cell125A#1, femData:Mesh mesh125B#1) {
    ENTRY1277:  preds = []
      int _t125C#3 = -1;
      bool _t125E#1 = EQ<int>(faceIdx1259,_t125C);
      if _t125E then goto ASSIGN1978 else goto ASSIGN1269
    ASSIGN1978:  preds = [COND1275]
      int[2] _t1265#1 = <int[2]>{_t125C,_t125C};
      return _t1265
      goto JOIN1260
    JOIN1260:  preds = [*RETURN(_t1265)1267,*RETURN(_t1272)1274]
      unreachable
    ASSIGN1269:  preds = [COND1275]
      int _t1268#1 = 8;
      int _t126A#1 = IMul(cell125A,_t1268);
      int _t126C#1 = 2;
      int _t126E#1 = IMul(faceIdx1259,_t126C);
      int _t1270#1 = IAdd(_t126A,_t126E);
      int[2] _t1272#1 = ExtractFemItemN<[femData:Mesh,int],int[2],CellFaceCell(Mesh),0000,"",[],int>(mesh125B,_t1270);
      return _t1272
      goto JOIN1260
}
  function tensor[3] fStep133D (tensor[3] s1279#3) {
    ENTRY133C:  preds = []
      real x127B#4 = TensorIndex<tensor[3],[0]>(s1279);
      real y127D#6 = TensorIndex<tensor[3],[1]>(s1279);
      real z127F#4 = TensorIndex<tensor[3],[2]>(s1279);
      int _t128D#2 = 2;
      real _t128F#2 = λ(T0[])<(T0)^2> (y127D);
      real _t1291#1 = λ(T0[],T1[])<(T1 * (T0)^2)> (y127D,z127F);
      real _t1293#4 = 0.2e1;
      real _t1297#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1293,x127B,y127D);
      real _t1299#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t1293,x127B,y127D,z127F);
      real _t129F#1 = λ(T0[],T1[])<(T0 * (T1)^2)> (x127B,y127D);
      tensor[3] g12A1#1 = <tensor[3]>[_t1291,_t1299,_t129F];
      real _t12B8#2 = 0.e0;
      real _t12BE#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1293,y127D,z127F);
      tensor[3] _t12C4#1 = <tensor[3]>[_t12B8,_t12BE,_t128F];
      real _t12D0#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1293,x127B,z127F);
      tensor[3] _t12D8#1 = <tensor[3]>[_t12BE,_t12D0,_t1297];
      tensor[3] _t12E6#1 = <tensor[3]>[_t128F,_t1297,_t12B8];
      tensor[3,3] hess12E8#1 = <tensor[3,3]>[_t12C4,_t12D8,_t12E6];
      (real[3] evals12ED#1,tensor[3][3] E12EC#1) = Eigen3x3(hess12E8);
      real _t12F2#1 = 0.1e1;
      real _t12F6#1 = Subscript<real[3]>(evals12ED,_t128D);
      tensor[3] _t12FE#2 = Subscript<tensor[3][3]>(E12EC,_t128D);
      tensor[3] up1308#4 = λ(T0[],T1[],T2[3],T3[3],T4[3])<Σ(i1=0..2)<((Neg((T0) / ( T1)) * T2_{i0} * T2_{i1} * T4_{i1}))>(i1=0..2)>_{3} (_t12F2,_t12F6,_t12FE,_t12FE,g12A1);
      real _t130B#2 = TensorIndex<tensor[3],[0]>(up1308);
      bool _t130F#1 = EQ<real>(_t130B,_t130B);
      bool _t1311#1 = BNot(_t130F);
      if _t1311 then goto ASSIGN1316 else goto ASSIGN1319
    ASSIGN1316:  preds = [COND132F]
      bool _t1314#1 = true;
      goto JOIN1313
    JOIN1313:  preds = [ASSIGN1316,JOIN1320]
      bool _t1315#1 = phi(_t1314,_t1322)
      if _t1315 then goto ASSIGN1332 else goto JOIN1330
    ASSIGN1332:  preds = [COND133A]
      real _t1331#3 = +inf;
      tensor[3] _t1337#1 = <tensor[3]>[_t1331,_t1331,_t1331];
      return _t1337
      goto JOIN1330
    JOIN1330:  preds = [*RETURN(_t1337)1339,COND133A]
      return up1308
    ASSIGN1319:  preds = [COND132F]
      real _t1318#2 = TensorIndex<tensor[3],[1]>(up1308);
      bool _t131C#1 = EQ<real>(_t1318,_t1318);
      bool _t131E#1 = BNot(_t131C);
      if _t131E then goto ASSIGN1323 else goto ASSIGN1325
    ASSIGN1323:  preds = [COND132C]
      bool _t1321#1 = true;
      goto JOIN1320
    JOIN1320:  preds = [ASSIGN1323,ASSIGN132B]
      bool _t1322#1 = phi(_t1321,_t132A)
      goto JOIN1313
    ASSIGN1325:  preds = [COND132C]
      real _t1324#2 = TensorIndex<tensor[3],[2]>(up1308);
      bool _t1328#1 = EQ<real>(_t1324,_t1324);
      bool _t132A#1 = BNot(_t1328);
      goto JOIN1320
}
  function tensor[3,3] fPerp13CB (tensor[3] s133E#3) {
    ENTRY13CA:  preds = []
      real x1340#2 = TensorIndex<tensor[3],[0]>(s133E);
      real y1342#3 = TensorIndex<tensor[3],[1]>(s133E);
      real z1344#2 = TensorIndex<tensor[3],[2]>(s133E);
      int _t1352#1 = 2;
      real _t1354#2 = λ(T0[])<(T0)^2> (y1342);
      real _t1358#3 = 0.2e1;
      real _t135C#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1358,x1340,y1342);
      real _t137D#2 = 0.e0;
      real _t1383#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1358,y1342,z1344);
      tensor[3] _t1389#1 = <tensor[3]>[_t137D,_t1383,_t1354];
      real _t1395#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1358,x1340,z1344);
      tensor[3] _t139D#1 = <tensor[3]>[_t1383,_t1395,_t135C];
      tensor[3] _t13AB#1 = <tensor[3]>[_t1354,_t135C,_t137D];
      tensor[3,3] hess13AD#1 = <tensor[3,3]>[_t1389,_t139D,_t13AB];
      (real[3] evals13B2#0,tensor[3][3] _t13B1#1) = Eigen3x3(hess13AD);
      tensor[3] E213B6#6 = Subscript<tensor[3][3]>(_t13B1,_t1352);
      tensor[3,3] m13BC#1 = λ(T0[3],T1[3])<(δ_{i0,i1}) - ((T0_{i0} * T0_{i1}))>_{3 3} (E213B6,E213B6);
      real t13BE#2 = λ(T0[3],T1[3],T2[3],T3[3])<Σ(i0=0..2)(i1=0..2)<(((δ_{i0,i1}) - ((T0_{i0} * T0_{i1})) * (δ_{i0,i1}) - ((T0_{i0} * T0_{i1}))))>(i0=0..2)(i1=0..2)> (E213B6,E213B6,E213B6,E213B6);
      bool _t13C0#1 = EQ<real>(t13BE,t13BE);
      bool _t13C2#1 = BNot(_t13C0);
      if _t13C2 then goto ASSIGN13C6 else goto JOIN13C4
    ASSIGN13C6:  preds = [COND13C8]
      tensor[3,3] _t13C5#1 = λ()<Z_{i0,i1}>_{3 3} ();
      return _t13C5
      goto JOIN13C4
    JOIN13C4:  preds = [*RETURN(_t13C5)13C7,COND13C8]
      return m13BC
}
## input initialization
  ENTRY1257:  preds = []
    real rad1245#5 = 0.1e-1;
    globals.rad123E = rad1245;
    globals.eps123F = rad1245;
    real v0124B#1 = 0.625e-1;
    globals.v01240 = v0124B;
    globals.fBias1241 = rad1245;
    globals.fStren1242 = rad1245;
    globals.zfuz1243 = rad1245;
    return
## global-variable initialization
  ENTRY1407:  preds = []
    femData:Mesh meshData13F1#2 = globals.meshData123B;
    int _t13F3#1 = 0;
    int _t13F5#1 = 1;
    int _t13F7#1 = ExtractFemItem<int,NumCell(Mesh)>(meshData13F1);
    int _t13F9#1 = ISub(_t13F7,_t13F5);
    int[] _t13FB#1 = Range(_t13F3,_t13F9);
    femData:MeshCell[] _t13FD#1 = <femData:MeshCell[]>{};
  FOREACH1401:  preds = [ASSIGN13FE,NEXT1406]
    foreach (_t13FF in _t13FB) on exit goto RETURN1408
      femData:MeshCell[] _t1400#1 = phi(_t13FD,_t1404)
    femData:MeshCell _t1402#1 = LoadFem<femData:MeshCell>(meshData13F1,_t13FF);
    femData:MeshCell[] _t1404#1 = Append<femData:MeshCell>(_t1400,_t1402);
    goto FOREACH1401
  RETURN1408:  preds = [FOREACH1401]
    return
## strand
  strand particle (tensor[3] pos01413#2, real hh01414#1) in 3D
    state:
      output tensor[3] pos;
      output tensor[3] _pos;
      real hh;
      tensor[3] step;
      bool found;
      int nfs;
      int test;
      int testp;
      int steps;
    state init
      ENTRY1434:  preds = []
        tensor[3] step1428#1 = λ()<Z_{i0}>_{3} ();
        bool found142A#1 = false;
        int nfs142C#3 = 0;
        int test142E#1 = 1;
        self.pos = pos01413;
        self._pos = pos01413;
        self.hh = hh01414;
        self.step = step1428;
        self.found = found142A;
        self.nfs = nfs142C;
        self.test = test142E;
        self.testp = nfs142C;
        self.steps = nfs142C;
        return
    end state init
    method update
        ENTRY191B:  preds = []
          real rad1442#14 = globals.rad123E;
          real eps1441#1 = globals.eps123F;
          real fBias1440#3 = globals.fBias1241;
          real fStren143F#3 = globals.fStren1242;
          tensor[3] pos1447#23 = self.pos;
          real hh1449#9 = self.hh;
          bool found144B#3 = self.found;
          int nfs144C#3 = self.nfs;
          int testp144E#2 = self.testp;
          int steps144F#1 = self.steps;
          int _t1459#4 = 1;
          int steps145B#4 = IAdd(steps144F,_t1459);
          real _t1460#13 = 0.e0;
          tensor[3] _t1466#6 = <tensor[3]>[_t1460,_t1460,_t1460];
          tensor[3] mid1468#3 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (pos1447,_t1466);
          real _t146B#1 = TensorIndex<tensor[3],[0]>(mid1468);
          real _t146D#1 = λ(T0[])<Abs(T0)> (_t146B);
          real _t146F#9 = 0.1e0;
          bool _t1471#1 = GT<real>(_t146D,_t146F);
          if _t1471 then goto ASSIGN1476 else goto ASSIGN148E
        ASSIGN1476:  preds = [COND148F]
          real _t1475#1 = TensorIndex<tensor[3],[1]>(mid1468);
          real _t1477#1 = λ(T0[])<Abs(T0)> (_t1475);
          bool _t147B#1 = GT<real>(_t1477,_t146F);
          if _t147B then goto ASSIGN147F else goto ASSIGN1488
        ASSIGN147F:  preds = [COND1489]
          real _t147E#1 = TensorIndex<tensor[3],[2]>(mid1468);
          real _t1480#1 = λ(T0[])<Abs(T0)> (_t147E);
          bool _t1484#1 = GT<real>(_t1480,_t146F);
          goto JOIN147D
        JOIN147D:  preds = [ASSIGN1999,ASSIGN1488]
          bool _t1485#1 = phi(_t1484,_t1487)
          goto JOIN1473
        JOIN1473:  preds = [JOIN147D,ASSIGN148E]
          bool _t148B#1 = phi(_t1485,_t148D)
          real _t1493#2 = λ(T0[3],T1[3])<Sqrt(Σ(i0=0..2)<(((T0_{i0}) - (T1_{i0}) * (T0_{i0}) - (T1_{i0})))>(i0=0..2))> (pos1447,_t1466);
          real _t1495#3 = 0.5e1;
          bool _t1497#1 = LT<real>(_t1493,_t1495);
          if _t1497 then goto ASSIGN149E else goto ASSIGN14AC
        ASSIGN149E:  preds = [COND14AD]
          real _t149D#1 = 0.2e1;
          bool _t149F#1 = GT<real>(_t1493,_t149D);
          if _t149F then goto JOIN14A1 else goto ASSIGN14A6
        JOIN14A1:  preds = [COND14A7,ASSIGN14A6]
          bool _t14A3#1 = phi(_t148B,_t14A5)
          goto JOIN1499
        JOIN1499:  preds = [JOIN14A1,ASSIGN14AC]
          bool _t14A9#1 = phi(_t14A3,_t14AB)
          if _t14A9 then goto ASSIGN14B5 else goto ASSIGN1554
        ASSIGN14B5:  preds = [COND1555]
          real _t14B4#6 = TensorIndex<tensor[3],[0]>(pos1447);
          bool _t14B8#1 = EQ<real>(_t14B4,_t14B4);
          bool _t14BA#1 = BNot(_t14B8);
          if _t14BA then goto ASSIGN14BF else goto ASSIGN14C2
        ASSIGN14BF:  preds = [COND14D8]
          bool _t14BD#1 = true;
          goto JOIN14BC
        JOIN14BC:  preds = [ASSIGN14BF,JOIN14C9]
          bool _t14BE#1 = phi(_t14BD,_t14CB)
          bool _t14DB#1 = BNot(_t14BE);
          if _t14DB then goto ASSIGN14E3 else goto ASSIGN154E
        ASSIGN14E3:  preds = [COND154F]
          real y14E2#6 = TensorIndex<tensor[3],[1]>(pos1447);
          real z14E4#4 = TensorIndex<tensor[3],[2]>(pos1447);
          int _t14E6#1 = 2;
          real _t14E8#2 = λ(T0[])<(T0)^2> (y14E2);
          real _t14EA#1 = λ(T0[],T1[])<(T1 * (T0)^2)> (y14E2,z14E4);
          real _t14EC#4 = 0.2e1;
          real _t14F0#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t14EC,_t14B4,y14E2);
          real _t14F2#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t14EC,_t14B4,y14E2,z14E4);
          real _t14F8#1 = λ(T0[],T1[])<(T0 * (T1)^2)> (_t14B4,y14E2);
          tensor[3] g14FA#1 = <tensor[3]>[_t14EA,_t14F2,_t14F8];
          real _t150B#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t14EC,y14E2,z14E4);
          tensor[3] _t1511#1 = <tensor[3]>[_t1460,_t150B,_t14E8];
          real _t151D#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t14EC,_t14B4,z14E4);
          tensor[3] _t1525#1 = <tensor[3]>[_t150B,_t151D,_t14F0];
          tensor[3] _t1533#1 = <tensor[3]>[_t14E8,_t14F0,_t1460];
          tensor[3,3] hess1535#1 = <tensor[3,3]>[_t1511,_t1525,_t1533];
          (real[3] _t1539#1,tensor[3][3] evecs153A#0) = Eigen3x3(hess1535);
          real _t153E#1 = Subscript<real[3]>(_t1539,_t14E6);
          real str1546#1 = λ(T0[],T1[],T2[3])<(Neg(T0)) / ( (T1 + Sqrt(Σ(i0=0..2)<((T2_{i0} * T2_{i0}))>(i0=0..2))))> (_t153E,fBias1440,g14FA);
          bool _t154A#1 = GTE<real>(str1546,fStren143F);
          goto JOIN14DD
        JOIN14DD:  preds = [ASSIGN19AA,ASSIGN154E]
          bool _t154B#1 = phi(_t154A,_t154D)
          goto JOIN14B0
        JOIN14B0:  preds = [JOIN14DD,ASSIGN1554]
          bool _t1551#1 = phi(_t154B,_t1553)
          bool _t1558#1 = BNot(_t1551);
          if _t1558 then goto DIE155B else goto JOIN155A
        DIE155B:  preds = [COND155C]
          die
          goto JOIN155A
        JOIN155A:  preds = [*DIE155B,COND155C]
          bool _t155D#1 = BNot(found144B);
          if _t155D then goto ASSIGN1562 else goto ASSIGN15B3
        ASSIGN1562:  preds = [COND191A]
          tensor[3] step1560#3 = fStep133D (pos1447);
          tensor[3] pos1563#4 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos1447,step1560);
          real _t156B#2 = TensorIndex<tensor[3],[0]>(pos1563);
          bool _t156F#1 = EQ<real>(_t156B,_t156B);
          bool _t1571#1 = BNot(_t156F);
          if _t1571 then goto ASSIGN1576 else goto ASSIGN1579
        ASSIGN1576:  preds = [COND158F]
          bool _t1574#1 = true;
          goto JOIN1573
        JOIN1573:  preds = [ASSIGN1576,JOIN1580]
          bool _t1575#1 = phi(_t1574,_t1582)
          if _t1575 then goto DIE1593 else goto JOIN1592
        DIE1593:  preds = [COND1594]
          die
          goto JOIN1592
        JOIN1592:  preds = [*DIE1593,COND1594]
          real _t1597#1 = λ(T0[3],T1[])<(Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))) / ( T1)> (step1560,rad1442);
          bool _t1599#1 = GT<real>(_t1597,eps1441);
          if _t1599 then goto ASSIGN19FA else goto ASSIGN15AA
        ASSIGN19FA:  preds = [COND15AE]
          int nfs159E#2 = IAdd(nfs144C,_t1459);
          int _t15A1#1 = 10;
          bool _t15A3#1 = GT<int>(nfs159E,_t15A1);
          if _t15A3 then goto DIE15A6 else goto JOIN15A5
        DIE15A6:  preds = [COND15A7]
          die
          goto JOIN15A5
        JOIN15A5:  preds = [*DIE15A6,COND15A7]
          goto JOIN159B
        JOIN159B:  preds = [JOIN15A5,ASSIGN15AA]
          int testp15AC#1 = phi(testp144E,_t1459)
          int nfs159F#1 = phi(nfs159E,nfs144C)
          bool found15A9#1 = phi(found144B,found15A8)
          goto JOIN155F
        JOIN155F:  preds = [JOIN159B,JOIN1810]
          int testp15B1#1 = phi(testp15AC,testp144E)
          int nfs15B0#1 = phi(nfs159F,nfs144C)
          bool found15AF#1 = phi(found15A9,found144B)
          tensor[3] step1561#1 = phi(step1560,up178E)
          real hh176D#1 = phi(hh1449,hh17DC)
          tensor[3] pos1564#2 = phi(pos1563,pos17C6)
          self.pos = pos1564;
          self._pos = pos1564;
          self.hh = hh176D;
          self.step = step1561;
          self.found = found15AF;
          self.nfs = nfs15B0;
          self.testp = testp15B1;
          self.steps = steps145B;
          active
        ASSIGN15AA:  preds = [COND15AE]
          bool found15A8#1 = true;
          goto JOIN159B
        ASSIGN1579:  preds = [COND158F]
          real _t1578#2 = TensorIndex<tensor[3],[1]>(pos1563);
          bool _t157C#1 = EQ<real>(_t1578,_t1578);
          bool _t157E#1 = BNot(_t157C);
          if _t157E then goto ASSIGN1583 else goto ASSIGN1585
        ASSIGN1583:  preds = [COND158C]
          bool _t1581#1 = true;
          goto JOIN1580
        JOIN1580:  preds = [ASSIGN1583,ASSIGN158B]
          bool _t1582#1 = phi(_t1581,_t158A)
          goto JOIN1573
        ASSIGN1585:  preds = [COND158C]
          real _t1584#2 = TensorIndex<tensor[3],[2]>(pos1563);
          bool _t1588#1 = EQ<real>(_t1584,_t1584);
          bool _t158A#1 = BNot(_t1588);
          goto JOIN1580
        ASSIGN15B3:  preds = [COND191A]
          tensor[3] _t15B2#13 = fStep133D (pos1447);
          tensor[3] pos15B4#11 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos1447,_t15B2);
          real _t15BA#2 = TensorIndex<tensor[3],[0]>(pos15B4);
          bool _t15BE#1 = EQ<real>(_t15BA,_t15BA);
          bool _t15C0#1 = BNot(_t15BE);
          if _t15C0 then goto ASSIGN15C5 else goto ASSIGN15C8
        ASSIGN15C5:  preds = [COND15DE]
          bool _t15C3#1 = true;
          goto JOIN15C2
        JOIN15C2:  preds = [ASSIGN15C5,JOIN15CF]
          bool _t15C4#1 = phi(_t15C3,_t15D1)
          if _t15C4 then goto DIE15E2 else goto JOIN15E1
        DIE15E2:  preds = [COND15E3]
          die
          goto JOIN15E1
        JOIN15E1:  preds = [*DIE15E2,COND15E3]
          tensor[3] step15E4#4 = λ()<Z_{i0}>_{3} ();
          int nn15EA#2 = 0;
          particle[] _t15EC#1 = SphereQuery<3,particle>(pos15B4,rad1442);
        FOREACH15F2:  preds = [ASSIGN19AF,NEXT1639]
          foreach (P15EE in _t15EC) on exit goto ASSIGN19B0
            int nn15F1#3 = phi(nn15EA,nn1637)
            tensor[3] force15F0#7 = phi(step15E4,force1633)
            real oldE15EF#2 = phi(_t1460,oldE1609)
          tensor[3] _t15F3#4 = P15EE.pos;
          real _t15FD#3 = 0.1e1;
          real oldE1609#1 = λ(T0[],T1[],T2[3],T3[3],T4[3],T5[])<(T0 + ((T1) - ((Sqrt(Σ(i0=0..2)<(((T2_{i0}) - ((T3_{i0} + T4_{i0})) * (T2_{i0}) - ((T3_{i0} + T4_{i0}))))>(i0=0..2))) / ( T5)))^4)> (oldE15EF,_t15FD,_t15F3,pos1447,_t15B2,rad1442);
          int _t1615#1 = -4;
          real _t1617#1 = IntToReal(_t1615);
          tensor[3] force1633#1 = λ(T0[3],T1[],T2[],T3[3],T4[3],T5[3],T6[],T7[],T8[],T9[3],T10[3],T11[3],T12[3],T13[3],T14[3])<(T0_{i0} + ((T1 * ((T2) - ((Sqrt(Σ(i3=0..2)<(((T3_{i3}) - ((T4_{i3} + T5_{i3})) * (T3_{i3}) - ((T4_{i3} + T5_{i3}))))>(i3=0..2))) / ( T6)))^3 * (T2) / ( T6) * (T3_{i0}) - ((T4_{i0} + T5_{i0})))) / ( Sqrt(Σ(i3=0..2)<(((T3_{i3}) - ((T4_{i3} + T5_{i3})) * (T3_{i3}) - ((T4_{i3} + T5_{i3}))))>(i3=0..2))))>_{3} (force15F0,_t1617,_t15FD,_t15F3,pos1447,_t15B2,rad1442,_t15FD,rad1442,_t15F3,pos1447,_t15B2,_t15F3,pos1447,_t15B2);
          int nn1637#1 = IAdd(nn15F1,_t1459);
          goto FOREACH15F2
        ASSIGN19B0:  preds = [FOREACH15F2]
          bool _t163C#1 = EQ<int>(nn15EA,nn15F1);
          if _t163C then goto ASSIGN1640 else goto JOIN163E
        ASSIGN1640:  preds = [COND1752]
          real _t163F#1 = 0.5e0;
          real _t1641#1 = λ(T0[],T1[])<(T0 * T1)> (_t163F,rad1442);
          tensor[3] _t1647#3 = <tensor[3]>[_t1641,_t1460,_t1460];
          tensor[3] npos1649#6 = λ(T0[3],T1[3],T2[3])<(T0_{i0} + T1_{i0} + T2_{i0})>_{3} (pos1447,_t15B2,_t1647);
          tensor[3] mid1656#3 = λ(T0[3],T1[3],T2[3],T3[3])<((T0_{i0} + T1_{i0} + T2_{i0})) - (T3_{i0})>_{3} (pos1447,_t15B2,_t1647,_t1466);
          real _t1659#1 = TensorIndex<tensor[3],[0]>(mid1656);
          real _t165B#1 = λ(T0[])<Abs(T0)> (_t1659);
          bool _t165F#1 = GT<real>(_t165B,_t146F);
          if _t165F then goto ASSIGN1664 else goto ASSIGN167C
        ASSIGN1664:  preds = [COND167D]
          real _t1663#1 = TensorIndex<tensor[3],[1]>(mid1656);
          real _t1665#1 = λ(T0[])<Abs(T0)> (_t1663);
          bool _t1669#1 = GT<real>(_t1665,_t146F);
          if _t1669 then goto ASSIGN166D else goto ASSIGN1676
        ASSIGN166D:  preds = [COND1677]
          real _t166C#1 = TensorIndex<tensor[3],[2]>(mid1656);
          real _t166E#1 = λ(T0[])<Abs(T0)> (_t166C);
          bool _t1672#1 = GT<real>(_t166E,_t146F);
          goto JOIN166B
        JOIN166B:  preds = [ASSIGN19B5,ASSIGN1676]
          bool _t1673#1 = phi(_t1672,_t1675)
          goto JOIN1661
        JOIN1661:  preds = [JOIN166B,ASSIGN167C]
          bool _t1679#1 = phi(_t1673,_t167B)
          real _t1681#2 = λ(T0[3],T1[3],T2[3],T3[3])<Sqrt(Σ(i0=0..2)<((((T0_{i0} + T1_{i0} + T2_{i0})) - (T3_{i0}) * ((T0_{i0} + T1_{i0} + T2_{i0})) - (T3_{i0})))>(i0=0..2))> (pos1447,_t15B2,_t1647,_t1466);
          bool _t1685#1 = LT<real>(_t1681,_t1495);
          if _t1685 then goto ASSIGN168C else goto ASSIGN169A
        ASSIGN168C:  preds = [COND169B]
          real _t168B#1 = 0.2e1;
          bool _t168D#1 = GT<real>(_t1681,_t168B);
          if _t168D then goto JOIN168F else goto ASSIGN1694
        JOIN168F:  preds = [COND1695,ASSIGN1694]
          bool _t1691#1 = phi(_t1679,_t1693)
          goto JOIN1687
        JOIN1687:  preds = [JOIN168F,ASSIGN169A]
          bool _t1697#1 = phi(_t1691,_t1699)
          if _t1697 then goto ASSIGN16A3 else goto ASSIGN1742
        ASSIGN16A3:  preds = [COND1743]
          real _t16A2#6 = TensorIndex<tensor[3],[0]>(npos1649);
          bool _t16A6#1 = EQ<real>(_t16A2,_t16A2);
          bool _t16A8#1 = BNot(_t16A6);
          if _t16A8 then goto ASSIGN16AD else goto ASSIGN16B0
        ASSIGN16AD:  preds = [COND16C6]
          bool _t16AB#1 = true;
          goto JOIN16AA
        JOIN16AA:  preds = [ASSIGN16AD,JOIN16B7]
          bool _t16AC#1 = phi(_t16AB,_t16B9)
          bool _t16C9#1 = BNot(_t16AC);
          if _t16C9 then goto ASSIGN16D1 else goto ASSIGN173C
        ASSIGN16D1:  preds = [COND173D]
          real y16D0#6 = TensorIndex<tensor[3],[1]>(npos1649);
          real z16D2#4 = TensorIndex<tensor[3],[2]>(npos1649);
          int _t16D4#1 = 2;
          real _t16D6#2 = λ(T0[])<(T0)^2> (y16D0);
          real _t16D8#1 = λ(T0[],T1[])<(T1 * (T0)^2)> (y16D0,z16D2);
          real _t16DA#4 = 0.2e1;
          real _t16DE#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t16DA,_t16A2,y16D0);
          real _t16E0#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t16DA,_t16A2,y16D0,z16D2);
          real _t16E6#1 = λ(T0[],T1[])<(T0 * (T1)^2)> (_t16A2,y16D0);
          tensor[3] g16E8#1 = <tensor[3]>[_t16D8,_t16E0,_t16E6];
          real _t16F9#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t16DA,y16D0,z16D2);
          tensor[3] _t16FF#1 = <tensor[3]>[_t1460,_t16F9,_t16D6];
          real _t170B#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t16DA,_t16A2,z16D2);
          tensor[3] _t1713#1 = <tensor[3]>[_t16F9,_t170B,_t16DE];
          tensor[3] _t1721#1 = <tensor[3]>[_t16D6,_t16DE,_t1460];
          tensor[3,3] hess1723#1 = <tensor[3,3]>[_t16FF,_t1713,_t1721];
          (real[3] _t1727#1,tensor[3][3] evecs1728#0) = Eigen3x3(hess1723);
          real _t172C#1 = Subscript<real[3]>(_t1727,_t16D4);
          real str1734#1 = λ(T0[],T1[],T2[3])<(Neg(T0)) / ( (T1 + Sqrt(Σ(i0=0..2)<((T2_{i0} * T2_{i0}))>(i0=0..2))))> (_t172C,fBias1440,g16E8);
          bool _t1738#1 = GTE<real>(str1734,fStren143F);
          goto JOIN16CB
        JOIN16CB:  preds = [ASSIGN19C7,ASSIGN173C]
          bool _t1739#1 = phi(_t1738,_t173B)
          goto JOIN169E
        JOIN169E:  preds = [JOIN16CB,ASSIGN1742]
          bool _t173F#1 = phi(_t1739,_t1741)
          if _t173F then goto NEW1747 else goto JOIN1746
        NEW1747:  preds = [COND1748]
          new particle(npos1649,hh1449);
          goto JOIN1746
        JOIN1746:  preds = [NEW1747,COND1748]
          self.pos = pos15B4;
          self._pos = pos15B4;
          self.step = step15E4;
          self.steps = steps145B;
          active
          goto JOIN163E
        JOIN163E:  preds = [*ACTIVE1749,COND1752]
          tensor[3,3] _t1753#6 = fPerp13CB (pos15B4);
          tensor[3] es1757#1 = λ(T0[],T1[3 3],T2[3])<(T0 * Σ(i2=0..2)<((T1_{i0,i2} * T2_{i2}))>(i2=0..2))>_{3} (hh1449,_t1753,force15F0);
          real _t1759#1 = λ(T0[],T1[3 3],T2[3])<Sqrt((T0 * T0 * Σ(i0=0..2)<((Σ(i2=0..2)<((T1_{i0,i2} * T2_{i2}))>(i2=0..2) * Σ(i2=0..2)<((T1_{i0,i2} * T2_{i2}))>(i2=0..2)))>(i0=0..2)))> (hh1449,_t1753,force15F0);
          bool _t175B#1 = GT<real>(_t1759,rad1442);
          if _t175B then goto ASSIGN1A3F else goto JOIN175D
        ASSIGN1A3F:  preds = [COND176C]
          real hh1762#1 = λ(T0[],T1[],T2[],T3[3 3],T4[3])<(T0 * (T1) / ( Sqrt((T0 * T0 * Σ(i0=0..2)<((Σ(i2=0..2)<((T3_{i0,i2} * T4_{i2}))>(i2=0..2) * Σ(i2=0..2)<((T3_{i0,i2} * T4_{i2}))>(i2=0..2)))>(i0=0..2)))))> (hh1449,rad1442,hh1449,_t1753,force15F0);
          tensor[3] es1769#1 = λ(T0[],T1[],T2[3 3],T3[3],T4[],T5[3 3],T6[3])<(T1 * (T0) / ( Sqrt((T1 * T1 * Σ(i1=0..2)<((Σ(i3=0..2)<((T2_{i1,i3} * T3_{i3}))>(i3=0..2) * Σ(i3=0..2)<((T2_{i1,i3} * T3_{i3}))>(i3=0..2)))>(i1=0..2)))) * Σ(i5=0..2)<((T2_{i0,i5} * T3_{i5}))>(i5=0..2))>_{3} (rad1442,hh1449,_t1753,force15F0,hh1449,_t1753,force15F0);
          goto JOIN175D
        JOIN175D:  preds = [ASSIGN1A40,COND176C]
          tensor[3] es176A#12 = phi(es1769,es1757)
          real hh1763#2 = phi(hh1762,hh1449)
          tensor[3] samplePos176E#1 = λ(T0[3],T1[3],T2[3])<(T0_{i0} + T1_{i0} + T2_{i0})>_{3} (pos1447,_t15B2,es176A);
          tensor[3] fs1770#5 = fStep133D (samplePos176E);
          real _t1776#1 = λ(T0[3],T1[3])<(Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))) / ( Sqrt(Σ(i0=0..2)<((T1_{i0} * T1_{i0}))>(i0=0..2)))> (fs1770,es176A);
          real _t1778#7 = 0.5e0;
          bool _t177A#1 = GT<real>(_t1776,_t1778);
          if _t177A then goto ASSIGN19CB else goto JOIN177C
        ASSIGN19CB:  preds = [COND178B]
          real hh177F#1 = λ(T0[],T1[])<(T0 * T1)> (hh1763,_t1778);
          self.pos = pos15B4;
          self._pos = pos15B4;
          self.hh = hh177F;
          self.step = step15E4;
          self.steps = steps145B;
          active
          goto JOIN177C
        JOIN177C:  preds = [*ACTIVE1782,COND178B]
          real hh1780#2 = phi(hh1763)
          tensor[3] up178E#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (fs1770,es176A);
          tensor[3] pos1790#2 = λ(T0[3],T1[3],T2[3],T3[3])<(T0_{i0} + T1_{i0} + T2_{i0} + T3_{i0})>_{3} (pos1447,_t15B2,fs1770,es176A);
          particle[] _t1794#1 = SphereQuery<3,particle>(pos1790,rad1442);
        FOREACH179A:  preds = [ASSIGN19CD,NEXT17B3]
          foreach (P1798 in _t1794) on exit goto ASSIGN19CE
            real accum1799#2 = phi(_t1460,accum17B1)
          tensor[3] _t179B#1 = P1798.pos;
          real _t17A5#1 = 0.1e1;
          real accum17B1#1 = λ(T0[],T1[],T2[3],T3[3],T4[3],T5[3],T6[3],T7[])<(T0 + ((T1) - ((Sqrt(Σ(i0=0..2)<((((T2_{i0} + T3_{i0} + T4_{i0} + T5_{i0})) - (T6_{i0}) * ((T2_{i0} + T3_{i0} + T4_{i0} + T5_{i0})) - (T6_{i0})))>(i0=0..2))) / ( T7)))^4)> (accum1799,_t17A5,pos1447,_t15B2,fs1770,es176A,_t179B,rad1442);
          goto FOREACH179A
        ASSIGN19CE:  preds = [FOREACH179A]
          real _t17B6#1 = λ(T0[],T1[])<(T0) - (T1)> (accum1799,oldE15EF);
          real _t17C0#1 = λ(T0[],T1[3],T2[3],T3[3],T4[3],T5[3],T6[3],T7[3 3],T8[3])<(T0 * Σ(i0=0..2)<((((T1_{i0} + T2_{i0} + T3_{i0} + T4_{i0})) - ((T1_{i0} + T2_{i0})) * Neg(Σ(i2=0..2)<((T7_{i0,i2} * T8_{i2}))>(i2=0..2))))>(i0=0..2))> (_t1778,pos1447,_t15B2,fs1770,es176A,pos1447,_t15B2,_t1753,force15F0);
          bool _t17C2#1 = GT<real>(_t17B6,_t17C0);
          if _t17C2 then goto ASSIGN19D1 else goto JOIN17C4
        ASSIGN19D1:  preds = [COND17D9]
          real hh17CD#1 = λ(T0[],T1[])<(T0 * T1)> (hh1780,_t1778);
          self.pos = pos15B4;
          self._pos = pos15B4;
          self.hh = hh17CD;
          self.step = step15E4;
          self.steps = steps145B;
          active
          goto JOIN17C4
        JOIN17C4:  preds = [*ACTIVE17D0,COND17D9]
          real hh17CE#1 = phi(hh1780)
          tensor[3] pos17C6#7 = phi(pos1790)
          real _t17DA#1 = 0.11e1;
          real hh17DC#2 = λ(T0[],T1[])<(T0 * T1)> (hh17CE,_t17DA);
          real _t17E2#2 = TensorIndex<tensor[3],[0]>(pos17C6);
          bool _t17E6#1 = EQ<real>(_t17E2,_t17E2);
          bool _t17E8#1 = BNot(_t17E6);
          if _t17E8 then goto ASSIGN17ED else goto ASSIGN17F0
        ASSIGN17ED:  preds = [COND1806]
          bool _t17EB#1 = true;
          goto JOIN17EA
        JOIN17EA:  preds = [ASSIGN17ED,JOIN17F7]
          bool _t17EC#1 = phi(_t17EB,_t17F9)
          if _t17EC then goto DIE180A else goto JOIN1809
        DIE180A:  preds = [COND180B]
          die
          goto JOIN1809
        JOIN1809:  preds = [*DIE180A,COND180B]
          int _t180C#1 = 5;
          bool _t180E#1 = LT<int>(nn15F1,_t180C);
          if _t180E then goto ASSIGN1A4F else goto JOIN1810
        ASSIGN1A4F:  preds = [COND1919]
          tensor[3] npos1819#6 = λ(T0[3],T1[],T2[],T3[3],T4[3])<(T0_{i0} + (T1 * T2 * T3_{i0} * (1) / ( Sqrt(Σ(i3=0..2)<((T3_{i3} * T3_{i3}))>(i3=0..2)))))>_{3} (pos17C6,_t1778,rad1442,es176A,es176A);
          tensor[3] mid1826#3 = λ(T0[3],T1[],T2[],T3[3],T4[3],T5[3])<((T0_{i0} + (T1 * T2 * T3_{i0} * (1) / ( Sqrt(Σ(i4=0..2)<((T3_{i4} * T3_{i4}))>(i4=0..2)))))) - (T5_{i0})>_{3} (pos17C6,_t1778,rad1442,es176A,es176A,_t1466);
          real _t1829#1 = TensorIndex<tensor[3],[0]>(mid1826);
          real _t182B#1 = λ(T0[])<Abs(T0)> (_t1829);
          bool _t182F#1 = GT<real>(_t182B,_t146F);
          if _t182F then goto ASSIGN1834 else goto ASSIGN184C
        ASSIGN1834:  preds = [COND184D]
          real _t1833#1 = TensorIndex<tensor[3],[1]>(mid1826);
          real _t1835#1 = λ(T0[])<Abs(T0)> (_t1833);
          bool _t1839#1 = GT<real>(_t1835,_t146F);
          if _t1839 then goto ASSIGN183D else goto ASSIGN1846
        ASSIGN183D:  preds = [COND1847]
          real _t183C#1 = TensorIndex<tensor[3],[2]>(mid1826);
          real _t183E#1 = λ(T0[])<Abs(T0)> (_t183C);
          bool _t1842#1 = GT<real>(_t183E,_t146F);
          goto JOIN183B
        JOIN183B:  preds = [ASSIGN19DB,ASSIGN1846]
          bool _t1843#1 = phi(_t1842,_t1845)
          goto JOIN1831
        JOIN1831:  preds = [JOIN183B,ASSIGN184C]
          bool _t1849#1 = phi(_t1843,_t184B)
          real _t1851#2 = λ(T0[3],T1[],T2[],T3[3],T4[3],T5[3])<Sqrt(Σ(i0=0..2)<((((T0_{i0} + (T1 * T2 * T3_{i0} * (1) / ( Sqrt(Σ(i4=0..2)<((T3_{i4} * T3_{i4}))>(i4=0..2)))))) - (T5_{i0}) * ((T0_{i0} + (T1 * T2 * T3_{i0} * (1) / ( Sqrt(Σ(i4=0..2)<((T3_{i4} * T3_{i4}))>(i4=0..2)))))) - (T5_{i0})))>(i0=0..2))> (pos17C6,_t1778,rad1442,es176A,es176A,_t1466);
          bool _t1855#1 = LT<real>(_t1851,_t1495);
          if _t1855 then goto ASSIGN185C else goto ASSIGN186A
        ASSIGN185C:  preds = [COND186B]
          real _t185B#1 = 0.2e1;
          bool _t185D#1 = GT<real>(_t1851,_t185B);
          if _t185D then goto JOIN185F else goto ASSIGN1864
        JOIN185F:  preds = [COND1865,ASSIGN1864]
          bool _t1861#1 = phi(_t1849,_t1863)
          goto JOIN1857
        JOIN1857:  preds = [JOIN185F,ASSIGN186A]
          bool _t1867#1 = phi(_t1861,_t1869)
          if _t1867 then goto ASSIGN1873 else goto ASSIGN1912
        ASSIGN1873:  preds = [COND1913]
          real _t1872#6 = TensorIndex<tensor[3],[0]>(npos1819);
          bool _t1876#1 = EQ<real>(_t1872,_t1872);
          bool _t1878#1 = BNot(_t1876);
          if _t1878 then goto ASSIGN187D else goto ASSIGN1880
        ASSIGN187D:  preds = [COND1896]
          bool _t187B#1 = true;
          goto JOIN187A
        JOIN187A:  preds = [ASSIGN187D,JOIN1887]
          bool _t187C#1 = phi(_t187B,_t1889)
          bool _t1899#1 = BNot(_t187C);
          if _t1899 then goto ASSIGN18A1 else goto ASSIGN190C
        ASSIGN18A1:  preds = [COND190D]
          real y18A0#6 = TensorIndex<tensor[3],[1]>(npos1819);
          real z18A2#4 = TensorIndex<tensor[3],[2]>(npos1819);
          int _t18A4#1 = 2;
          real _t18A6#2 = λ(T0[])<(T0)^2> (y18A0);
          real _t18A8#1 = λ(T0[],T1[])<(T1 * (T0)^2)> (y18A0,z18A2);
          real _t18AA#4 = 0.2e1;
          real _t18AE#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t18AA,_t1872,y18A0);
          real _t18B0#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t18AA,_t1872,y18A0,z18A2);
          real _t18B6#1 = λ(T0[],T1[])<(T0 * (T1)^2)> (_t1872,y18A0);
          tensor[3] g18B8#1 = <tensor[3]>[_t18A8,_t18B0,_t18B6];
          real _t18C9#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t18AA,y18A0,z18A2);
          tensor[3] _t18CF#1 = <tensor[3]>[_t1460,_t18C9,_t18A6];
          real _t18DB#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t18AA,_t1872,z18A2);
          tensor[3] _t18E3#1 = <tensor[3]>[_t18C9,_t18DB,_t18AE];
          tensor[3] _t18F1#1 = <tensor[3]>[_t18A6,_t18AE,_t1460];
          tensor[3,3] hess18F3#1 = <tensor[3,3]>[_t18CF,_t18E3,_t18F1];
          (real[3] _t18F7#1,tensor[3][3] evecs18F8#0) = Eigen3x3(hess18F3);
          real _t18FC#1 = Subscript<real[3]>(_t18F7,_t18A4);
          real str1904#1 = λ(T0[],T1[],T2[3])<(Neg(T0)) / ( (T1 + Sqrt(Σ(i0=0..2)<((T2_{i0} * T2_{i0}))>(i0=0..2))))> (_t18FC,fBias1440,g18B8);
          bool _t1908#1 = GTE<real>(str1904,fStren143F);
          goto JOIN189B
        JOIN189B:  preds = [ASSIGN19ED,ASSIGN190C]
          bool _t1909#1 = phi(_t1908,_t190B)
          goto JOIN186E
        JOIN186E:  preds = [JOIN189B,ASSIGN1912]
          bool _t190F#1 = phi(_t1909,_t1911)
          if _t190F then goto NEW1917 else goto JOIN1916
        NEW1917:  preds = [COND1918]
          new particle(npos1819,hh17DC);
          goto JOIN1916
        JOIN1916:  preds = [NEW1917,COND1918]
          goto JOIN1810
        JOIN1810:  preds = [JOIN1916,COND1919]
          goto JOIN155F
        ASSIGN190C:  preds = [COND190D]
          bool _t190B#1 = false;
          goto JOIN189B
        ASSIGN1880:  preds = [COND1896]
          real _t187F#2 = TensorIndex<tensor[3],[1]>(npos1819);
          bool _t1883#1 = EQ<real>(_t187F,_t187F);
          bool _t1885#1 = BNot(_t1883);
          if _t1885 then goto ASSIGN188A else goto ASSIGN188C
        ASSIGN188A:  preds = [COND1893]
          bool _t1888#1 = true;
          goto JOIN1887
        JOIN1887:  preds = [ASSIGN188A,ASSIGN1892]
          bool _t1889#1 = phi(_t1888,_t1891)
          goto JOIN187A
        ASSIGN188C:  preds = [COND1893]
          real _t188B#2 = TensorIndex<tensor[3],[2]>(npos1819);
          bool _t188F#1 = EQ<real>(_t188B,_t188B);
          bool _t1891#1 = BNot(_t188F);
          goto JOIN1887
        ASSIGN1912:  preds = [COND1913]
          bool _t1911#1 = false;
          goto JOIN186E
        ASSIGN1864:  preds = [COND1865]
          bool _t1863#1 = false;
          goto JOIN185F
        ASSIGN186A:  preds = [COND186B]
          bool _t1869#1 = false;
          goto JOIN1857
        ASSIGN1846:  preds = [COND1847]
          bool _t1845#1 = false;
          goto JOIN183B
        ASSIGN184C:  preds = [COND184D]
          bool _t184B#1 = false;
          goto JOIN1831
        ASSIGN17F0:  preds = [COND1806]
          real _t17EF#2 = TensorIndex<tensor[3],[1]>(pos17C6);
          bool _t17F3#1 = EQ<real>(_t17EF,_t17EF);
          bool _t17F5#1 = BNot(_t17F3);
          if _t17F5 then goto ASSIGN17FA else goto ASSIGN17FC
        ASSIGN17FA:  preds = [COND1803]
          bool _t17F8#1 = true;
          goto JOIN17F7
        JOIN17F7:  preds = [ASSIGN17FA,ASSIGN1802]
          bool _t17F9#1 = phi(_t17F8,_t1801)
          goto JOIN17EA
        ASSIGN17FC:  preds = [COND1803]
          real _t17FB#2 = TensorIndex<tensor[3],[2]>(pos17C6);
          bool _t17FF#1 = EQ<real>(_t17FB,_t17FB);
          bool _t1801#1 = BNot(_t17FF);
          goto JOIN17F7
        ASSIGN173C:  preds = [COND173D]
          bool _t173B#1 = false;
          goto JOIN16CB
        ASSIGN16B0:  preds = [COND16C6]
          real _t16AF#2 = TensorIndex<tensor[3],[1]>(npos1649);
          bool _t16B3#1 = EQ<real>(_t16AF,_t16AF);
          bool _t16B5#1 = BNot(_t16B3);
          if _t16B5 then goto ASSIGN16BA else goto ASSIGN16BC
        ASSIGN16BA:  preds = [COND16C3]
          bool _t16B8#1 = true;
          goto JOIN16B7
        JOIN16B7:  preds = [ASSIGN16BA,ASSIGN16C2]
          bool _t16B9#1 = phi(_t16B8,_t16C1)
          goto JOIN16AA
        ASSIGN16BC:  preds = [COND16C3]
          real _t16BB#2 = TensorIndex<tensor[3],[2]>(npos1649);
          bool _t16BF#1 = EQ<real>(_t16BB,_t16BB);
          bool _t16C1#1 = BNot(_t16BF);
          goto JOIN16B7
        ASSIGN1742:  preds = [COND1743]
          bool _t1741#1 = false;
          goto JOIN169E
        ASSIGN1694:  preds = [COND1695]
          bool _t1693#1 = false;
          goto JOIN168F
        ASSIGN169A:  preds = [COND169B]
          bool _t1699#1 = false;
          goto JOIN1687
        ASSIGN1676:  preds = [COND1677]
          bool _t1675#1 = false;
          goto JOIN166B
        ASSIGN167C:  preds = [COND167D]
          bool _t167B#1 = false;
          goto JOIN1661
        ASSIGN15C8:  preds = [COND15DE]
          real _t15C7#2 = TensorIndex<tensor[3],[1]>(pos15B4);
          bool _t15CB#1 = EQ<real>(_t15C7,_t15C7);
          bool _t15CD#1 = BNot(_t15CB);
          if _t15CD then goto ASSIGN15D2 else goto ASSIGN15D4
        ASSIGN15D2:  preds = [COND15DB]
          bool _t15D0#1 = true;
          goto JOIN15CF
        JOIN15CF:  preds = [ASSIGN15D2,ASSIGN15DA]
          bool _t15D1#1 = phi(_t15D0,_t15D9)
          goto JOIN15C2
        ASSIGN15D4:  preds = [COND15DB]
          real _t15D3#2 = TensorIndex<tensor[3],[2]>(pos15B4);
          bool _t15D7#1 = EQ<real>(_t15D3,_t15D3);
          bool _t15D9#1 = BNot(_t15D7);
          goto JOIN15CF
        ASSIGN154E:  preds = [COND154F]
          bool _t154D#1 = false;
          goto JOIN14DD
        ASSIGN14C2:  preds = [COND14D8]
          real _t14C1#2 = TensorIndex<tensor[3],[1]>(pos1447);
          bool _t14C5#1 = EQ<real>(_t14C1,_t14C1);
          bool _t14C7#1 = BNot(_t14C5);
          if _t14C7 then goto ASSIGN14CC else goto ASSIGN14CE
        ASSIGN14CC:  preds = [COND14D5]
          bool _t14CA#1 = true;
          goto JOIN14C9
        JOIN14C9:  preds = [ASSIGN14CC,ASSIGN14D4]
          bool _t14CB#1 = phi(_t14CA,_t14D3)
          goto JOIN14BC
        ASSIGN14CE:  preds = [COND14D5]
          real _t14CD#2 = TensorIndex<tensor[3],[2]>(pos1447);
          bool _t14D1#1 = EQ<real>(_t14CD,_t14CD);
          bool _t14D3#1 = BNot(_t14D1);
          goto JOIN14C9
        ASSIGN1554:  preds = [COND1555]
          bool _t1553#1 = false;
          goto JOIN14B0
        ASSIGN14A6:  preds = [COND14A7]
          bool _t14A5#1 = false;
          goto JOIN14A1
        ASSIGN14AC:  preds = [COND14AD]
          bool _t14AB#1 = false;
          goto JOIN1499
        ASSIGN1488:  preds = [COND1489]
          bool _t1487#1 = false;
          goto JOIN147D
        ASSIGN148E:  preds = [COND148F]
          bool _t148D#1 = false;
          goto JOIN1473
    end update
  end particle
## initial strand creation
  COLLECTION
    ENTRY1411:  preds = []
      tensor[3][] ipos1409#1 = globals.ipos1244;
    FOREACH140C:  preds = [ASSIGN140A,NEXT1410]
      foreach (x140B in ipos1409) on exit goto RETURN1412
      real _t140D#1 = 0.1e1;
      new particle(x140B,_t140D);
      goto FOREACH140C
    RETURN1412:  preds = [FOREACH140C]
      return
## global update
  ENTRY1972:  preds = []
    real rad1926#1 = globals.rad123E;
    real eps1925#1 = globals.eps123F;
    particle[] P1929#5 = Strands<particle,all>;
    (int res192A#1) = sum<int>(MAP sum13D2 (P1929));
    (int res1930#2) = max<int>(MAP max13D9 (P1929));
    (int res1936#1) = sum<int>(MAP sum13E0 (P1929));
    (bool res193C#2) = all(MAP all13E7 (P1929));
    (real res1942#1) = max<real>(MAP max13F0 (P1929));
    string _t1947#1 = "One run:";
    string _t1949#3 = " and ";
    real _t194B#2 = λ(T0[],T1[])<(T0) / ( T1)> (res1942,rad1926);
    bool _t1951#2 = LT<real>(_t194B,eps1925);
    string _t1955#1 = " of ";
    string _t1957#2 = "\n";
    Print<[string,bool,string,real,string,bool,string,int,string,int,string]>(_t1947,res193C,_t1949,_t194B,_t1949,_t1951,_t1949,res1936,_t1955,res192A,_t1957);
    if res193C then goto COND1964 else goto JOIN195A
  COND1964:  preds = [COND1965]
    if _t1951 then goto ASSIGN1961 else goto JOIN195F
  ASSIGN1961:  preds = [COND1964]
    string _t1960#1 = "CONVERGED!\n";
    Print<[string]>(_t1960);
    StabilizeAll;
    goto JOIN195F
  JOIN195F:  preds = [MASSIGN1963,COND1964]
    goto JOIN195A
  JOIN195A:  preds = [JOIN195F,COND1965]
    int _t1966#1 = 2000;
    bool _t1968#1 = GT<int>(res1930,_t1966);
    if _t1968 then goto MASSIGN196B else goto JOIN196A
  MASSIGN196B:  preds = [COND196C]
    StabilizeAll;
    goto JOIN196A
  JOIN196A:  preds = [MASSIGN196B,COND196C]
    string _t196D#1 = "Current steps:";
    Print<[string,int,string]>(_t196D,res1930,_t1957);
    continue
#### end program ####
##### high-ir: after normalization promotion ####
## properties
  GlobalInit StabilizeAll GlobalReduce StrandSets GlobalUpdate NewStrands StrandCommunication StrandsMayDie HasInputs HasGlobals ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
## globals
  input meshData123B (meshData) = <no-default>
  input 0space04FA_intermedateGlobal123C (space) = <no-default>
  input 0data04FC_intermedateGlobal123D (data) = <no-default>
  input rad123E (rad) = <default>
  input eps123F (eps) = <default>
  input v01240 (v0) = <default>
  input fBias1241 (fBias) = <default>
  input fStren1242 (fStren) = <default>
  input zfuz1243 (zfuz) = <default>
  input ipos1244 (ipos) = <no-default>
## functions
  function real max13F0 (particle P13E8#1) {
    ENTRY13EF:  preds = []
      tensor[3] _t13E9#1 = P13E8.step;
      real _t13EC#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (_t13E9);
      return _t13EC
}
  function bool all13E7 (particle P13E1#1) {
    ENTRY13E6:  preds = []
      bool _t13E2#1 = P13E1.found;
      return _t13E2
}
  function int sum13E0 (particle P13DA#1) {
    ENTRY13DF:  preds = []
      int _t13DB#1 = P13DA.testp;
      return _t13DB
}
  function int max13D9 (particle P13D3#1) {
    ENTRY13D8:  preds = []
      int _t13D4#1 = P13D3.steps;
      return _t13D4
}
  function int sum13D2 (particle P13CC#1) {
    ENTRY13D1:  preds = []
      int _t13CD#1 = P13CC.test;
      return _t13CD
}
  function int[2] nextCell41278 (int faceIdx1259#2, int cell125A#1, femData:Mesh mesh125B#1) {
    ENTRY1277:  preds = []
      int _t125C#3 = -1;
      bool _t125E#1 = EQ<int>(faceIdx1259,_t125C);
      if _t125E then goto ASSIGN1978 else goto ASSIGN1269
    ASSIGN1978:  preds = [COND1275]
      int[2] _t1265#1 = <int[2]>{_t125C,_t125C};
      return _t1265
      goto JOIN1260
    JOIN1260:  preds = [*RETURN(_t1265)1267,*RETURN(_t1272)1274]
      unreachable
    ASSIGN1269:  preds = [COND1275]
      int _t1268#1 = 8;
      int _t126A#1 = IMul(cell125A,_t1268);
      int _t126C#1 = 2;
      int _t126E#1 = IMul(faceIdx1259,_t126C);
      int _t1270#1 = IAdd(_t126A,_t126E);
      int[2] _t1272#1 = ExtractFemItemN<[femData:Mesh,int],int[2],CellFaceCell(Mesh),0000,"",[],int>(mesh125B,_t1270);
      return _t1272
      goto JOIN1260
}
  function tensor[3] fStep133D (tensor[3] s1279#3) {
    ENTRY133C:  preds = []
      real x127B#4 = TensorIndex<tensor[3],[0]>(s1279);
      real y127D#6 = TensorIndex<tensor[3],[1]>(s1279);
      real z127F#4 = TensorIndex<tensor[3],[2]>(s1279);
      int _t128D#2 = 2;
      real _t128F#2 = λ(T0[])<(T0)^2> (y127D);
      real _t1291#1 = λ(T0[],T1[])<(T1 * (T0)^2)> (y127D,z127F);
      real _t1293#4 = 0.2e1;
      real _t1297#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1293,x127B,y127D);
      real _t1299#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t1293,x127B,y127D,z127F);
      real _t129F#1 = λ(T0[],T1[])<(T0 * (T1)^2)> (x127B,y127D);
      tensor[3] g12A1#1 = <tensor[3]>[_t1291,_t1299,_t129F];
      real _t12B8#2 = 0.e0;
      real _t12BE#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1293,y127D,z127F);
      tensor[3] _t12C4#1 = <tensor[3]>[_t12B8,_t12BE,_t128F];
      real _t12D0#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1293,x127B,z127F);
      tensor[3] _t12D8#1 = <tensor[3]>[_t12BE,_t12D0,_t1297];
      tensor[3] _t12E6#1 = <tensor[3]>[_t128F,_t1297,_t12B8];
      tensor[3,3] hess12E8#1 = <tensor[3,3]>[_t12C4,_t12D8,_t12E6];
      (real[3] evals12ED#1,tensor[3][3] E12EC#1) = Eigen3x3(hess12E8);
      real _t12F2#1 = 0.1e1;
      real _t12F6#1 = Subscript<real[3]>(evals12ED,_t128D);
      tensor[3] _t12FE#2 = Subscript<tensor[3][3]>(E12EC,_t128D);
      tensor[3] up1308#4 = λ(T0[],T1[],T2[3],T3[3],T4[3])<Σ(i1=0..2)<((Neg((T0) / ( T1)) * T2_{i0} * T2_{i1} * T4_{i1}))>(i1=0..2)>_{3} (_t12F2,_t12F6,_t12FE,_t12FE,g12A1);
      real _t130B#2 = TensorIndex<tensor[3],[0]>(up1308);
      bool _t130F#1 = EQ<real>(_t130B,_t130B);
      bool _t1311#1 = BNot(_t130F);
      if _t1311 then goto ASSIGN1316 else goto ASSIGN1319
    ASSIGN1316:  preds = [COND132F]
      bool _t1314#1 = true;
      goto JOIN1313
    JOIN1313:  preds = [ASSIGN1316,JOIN1320]
      bool _t1315#1 = phi(_t1314,_t1322)
      if _t1315 then goto ASSIGN1332 else goto JOIN1330
    ASSIGN1332:  preds = [COND133A]
      real _t1331#3 = +inf;
      tensor[3] _t1337#1 = <tensor[3]>[_t1331,_t1331,_t1331];
      return _t1337
      goto JOIN1330
    JOIN1330:  preds = [*RETURN(_t1337)1339,COND133A]
      return up1308
    ASSIGN1319:  preds = [COND132F]
      real _t1318#2 = TensorIndex<tensor[3],[1]>(up1308);
      bool _t131C#1 = EQ<real>(_t1318,_t1318);
      bool _t131E#1 = BNot(_t131C);
      if _t131E then goto ASSIGN1323 else goto ASSIGN1325
    ASSIGN1323:  preds = [COND132C]
      bool _t1321#1 = true;
      goto JOIN1320
    JOIN1320:  preds = [ASSIGN1323,ASSIGN132B]
      bool _t1322#1 = phi(_t1321,_t132A)
      goto JOIN1313
    ASSIGN1325:  preds = [COND132C]
      real _t1324#2 = TensorIndex<tensor[3],[2]>(up1308);
      bool _t1328#1 = EQ<real>(_t1324,_t1324);
      bool _t132A#1 = BNot(_t1328);
      goto JOIN1320
}
  function tensor[3,3] fPerp13CB (tensor[3] s133E#3) {
    ENTRY13CA:  preds = []
      real x1340#2 = TensorIndex<tensor[3],[0]>(s133E);
      real y1342#3 = TensorIndex<tensor[3],[1]>(s133E);
      real z1344#2 = TensorIndex<tensor[3],[2]>(s133E);
      int _t1352#1 = 2;
      real _t1354#2 = λ(T0[])<(T0)^2> (y1342);
      real _t1358#3 = 0.2e1;
      real _t135C#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1358,x1340,y1342);
      real _t137D#2 = 0.e0;
      real _t1383#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1358,y1342,z1344);
      tensor[3] _t1389#1 = <tensor[3]>[_t137D,_t1383,_t1354];
      real _t1395#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1358,x1340,z1344);
      tensor[3] _t139D#1 = <tensor[3]>[_t1383,_t1395,_t135C];
      tensor[3] _t13AB#1 = <tensor[3]>[_t1354,_t135C,_t137D];
      tensor[3,3] hess13AD#1 = <tensor[3,3]>[_t1389,_t139D,_t13AB];
      (real[3] evals13B2#0,tensor[3][3] _t13B1#1) = Eigen3x3(hess13AD);
      tensor[3] E213B6#6 = Subscript<tensor[3][3]>(_t13B1,_t1352);
      tensor[3,3] m13BC#1 = λ(T0[3],T1[3])<(δ_{i0,i1}) - ((T0_{i0} * T0_{i1}))>_{3 3} (E213B6,E213B6);
      real t13BE#2 = λ(T0[3],T1[3],T2[3],T3[3])<Σ(i0=0..2)(i1=0..2)<(((δ_{i0,i1}) - ((T0_{i0} * T0_{i1})) * (δ_{i0,i1}) - ((T0_{i0} * T0_{i1}))))>(i0=0..2)(i1=0..2)> (E213B6,E213B6,E213B6,E213B6);
      bool _t13C0#1 = EQ<real>(t13BE,t13BE);
      bool _t13C2#1 = BNot(_t13C0);
      if _t13C2 then goto ASSIGN13C6 else goto JOIN13C4
    ASSIGN13C6:  preds = [COND13C8]
      tensor[3,3] _t13C5#1 = λ()<Z_{i0,i1}>_{3 3} ();
      return _t13C5
      goto JOIN13C4
    JOIN13C4:  preds = [*RETURN(_t13C5)13C7,COND13C8]
      return m13BC
}
## input initialization
  ENTRY1257:  preds = []
    real rad1245#5 = 0.1e-1;
    globals.rad123E = rad1245;
    globals.eps123F = rad1245;
    real v0124B#1 = 0.625e-1;
    globals.v01240 = v0124B;
    globals.fBias1241 = rad1245;
    globals.fStren1242 = rad1245;
    globals.zfuz1243 = rad1245;
    return
## global-variable initialization
  ENTRY1407:  preds = []
    femData:Mesh meshData13F1#2 = globals.meshData123B;
    int _t13F3#1 = 0;
    int _t13F5#1 = 1;
    int _t13F7#1 = ExtractFemItem<int,NumCell(Mesh)>(meshData13F1);
    int _t13F9#1 = ISub(_t13F7,_t13F5);
    int[] _t13FB#1 = Range(_t13F3,_t13F9);
    femData:MeshCell[] _t13FD#1 = <femData:MeshCell[]>{};
  FOREACH1401:  preds = [ASSIGN13FE,NEXT1406]
    foreach (_t13FF in _t13FB) on exit goto RETURN1408
      femData:MeshCell[] _t1400#1 = phi(_t13FD,_t1404)
    femData:MeshCell _t1402#1 = LoadFem<femData:MeshCell>(meshData13F1,_t13FF);
    femData:MeshCell[] _t1404#1 = Append<femData:MeshCell>(_t1400,_t1402);
    goto FOREACH1401
  RETURN1408:  preds = [FOREACH1401]
    return
## strand
  strand particle (tensor[3] pos01413#2, real hh01414#1) in 3D
    state:
      output tensor[3] pos;
      output tensor[3] _pos;
      real hh;
      tensor[3] step;
      bool found;
      int nfs;
      int test;
      int testp;
      int steps;
    state init
      ENTRY1434:  preds = []
        tensor[3] step1428#1 = λ()<Z_{i0}>_{3} ();
        bool found142A#1 = false;
        int nfs142C#3 = 0;
        int test142E#1 = 1;
        self.pos = pos01413;
        self._pos = pos01413;
        self.hh = hh01414;
        self.step = step1428;
        self.found = found142A;
        self.nfs = nfs142C;
        self.test = test142E;
        self.testp = nfs142C;
        self.steps = nfs142C;
        return
    end state init
    method update
        ENTRY191B:  preds = []
          real rad1442#14 = globals.rad123E;
          real eps1441#1 = globals.eps123F;
          real fBias1440#3 = globals.fBias1241;
          real fStren143F#3 = globals.fStren1242;
          tensor[3] pos1447#23 = self.pos;
          real hh1449#9 = self.hh;
          bool found144B#3 = self.found;
          int nfs144C#3 = self.nfs;
          int testp144E#2 = self.testp;
          int steps144F#1 = self.steps;
          int _t1459#4 = 1;
          int steps145B#4 = IAdd(steps144F,_t1459);
          real _t1460#13 = 0.e0;
          tensor[3] _t1466#6 = <tensor[3]>[_t1460,_t1460,_t1460];
          tensor[3] mid1468#3 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (pos1447,_t1466);
          real _t146B#1 = TensorIndex<tensor[3],[0]>(mid1468);
          real _t146D#1 = λ(T0[])<Abs(T0)> (_t146B);
          real _t146F#9 = 0.1e0;
          bool _t1471#1 = GT<real>(_t146D,_t146F);
          if _t1471 then goto ASSIGN1476 else goto ASSIGN148E
        ASSIGN1476:  preds = [COND148F]
          real _t1475#1 = TensorIndex<tensor[3],[1]>(mid1468);
          real _t1477#1 = λ(T0[])<Abs(T0)> (_t1475);
          bool _t147B#1 = GT<real>(_t1477,_t146F);
          if _t147B then goto ASSIGN147F else goto ASSIGN1488
        ASSIGN147F:  preds = [COND1489]
          real _t147E#1 = TensorIndex<tensor[3],[2]>(mid1468);
          real _t1480#1 = λ(T0[])<Abs(T0)> (_t147E);
          bool _t1484#1 = GT<real>(_t1480,_t146F);
          goto JOIN147D
        JOIN147D:  preds = [ASSIGN1999,ASSIGN1488]
          bool _t1485#1 = phi(_t1484,_t1487)
          goto JOIN1473
        JOIN1473:  preds = [JOIN147D,ASSIGN148E]
          bool _t148B#1 = phi(_t1485,_t148D)
          real _t1493#2 = λ(T0[3],T1[3])<Sqrt(Σ(i0=0..2)<(((T0_{i0}) - (T1_{i0}) * (T0_{i0}) - (T1_{i0})))>(i0=0..2))> (pos1447,_t1466);
          real _t1495#3 = 0.5e1;
          bool _t1497#1 = LT<real>(_t1493,_t1495);
          if _t1497 then goto ASSIGN149E else goto ASSIGN14AC
        ASSIGN149E:  preds = [COND14AD]
          real _t149D#1 = 0.2e1;
          bool _t149F#1 = GT<real>(_t1493,_t149D);
          if _t149F then goto JOIN14A1 else goto ASSIGN14A6
        JOIN14A1:  preds = [COND14A7,ASSIGN14A6]
          bool _t14A3#1 = phi(_t148B,_t14A5)
          goto JOIN1499
        JOIN1499:  preds = [JOIN14A1,ASSIGN14AC]
          bool _t14A9#1 = phi(_t14A3,_t14AB)
          if _t14A9 then goto ASSIGN14B5 else goto ASSIGN1554
        ASSIGN14B5:  preds = [COND1555]
          real _t14B4#6 = TensorIndex<tensor[3],[0]>(pos1447);
          bool _t14B8#1 = EQ<real>(_t14B4,_t14B4);
          bool _t14BA#1 = BNot(_t14B8);
          if _t14BA then goto ASSIGN14BF else goto ASSIGN14C2
        ASSIGN14BF:  preds = [COND14D8]
          bool _t14BD#1 = true;
          goto JOIN14BC
        JOIN14BC:  preds = [ASSIGN14BF,JOIN14C9]
          bool _t14BE#1 = phi(_t14BD,_t14CB)
          bool _t14DB#1 = BNot(_t14BE);
          if _t14DB then goto ASSIGN14E3 else goto ASSIGN154E
        ASSIGN14E3:  preds = [COND154F]
          real y14E2#6 = TensorIndex<tensor[3],[1]>(pos1447);
          real z14E4#4 = TensorIndex<tensor[3],[2]>(pos1447);
          int _t14E6#1 = 2;
          real _t14E8#2 = λ(T0[])<(T0)^2> (y14E2);
          real _t14EA#1 = λ(T0[],T1[])<(T1 * (T0)^2)> (y14E2,z14E4);
          real _t14EC#4 = 0.2e1;
          real _t14F0#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t14EC,_t14B4,y14E2);
          real _t14F2#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t14EC,_t14B4,y14E2,z14E4);
          real _t14F8#1 = λ(T0[],T1[])<(T0 * (T1)^2)> (_t14B4,y14E2);
          tensor[3] g14FA#1 = <tensor[3]>[_t14EA,_t14F2,_t14F8];
          real _t150B#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t14EC,y14E2,z14E4);
          tensor[3] _t1511#1 = <tensor[3]>[_t1460,_t150B,_t14E8];
          real _t151D#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t14EC,_t14B4,z14E4);
          tensor[3] _t1525#1 = <tensor[3]>[_t150B,_t151D,_t14F0];
          tensor[3] _t1533#1 = <tensor[3]>[_t14E8,_t14F0,_t1460];
          tensor[3,3] hess1535#1 = <tensor[3,3]>[_t1511,_t1525,_t1533];
          (real[3] _t1539#1,tensor[3][3] evecs153A#0) = Eigen3x3(hess1535);
          real _t153E#1 = Subscript<real[3]>(_t1539,_t14E6);
          real str1546#1 = λ(T0[],T1[],T2[3])<(Neg(T0)) / ( (T1 + Sqrt(Σ(i0=0..2)<((T2_{i0} * T2_{i0}))>(i0=0..2))))> (_t153E,fBias1440,g14FA);
          bool _t154A#1 = GTE<real>(str1546,fStren143F);
          goto JOIN14DD
        JOIN14DD:  preds = [ASSIGN19AA,ASSIGN154E]
          bool _t154B#1 = phi(_t154A,_t154D)
          goto JOIN14B0
        JOIN14B0:  preds = [JOIN14DD,ASSIGN1554]
          bool _t1551#1 = phi(_t154B,_t1553)
          bool _t1558#1 = BNot(_t1551);
          if _t1558 then goto DIE155B else goto JOIN155A
        DIE155B:  preds = [COND155C]
          die
          goto JOIN155A
        JOIN155A:  preds = [*DIE155B,COND155C]
          bool _t155D#1 = BNot(found144B);
          if _t155D then goto ASSIGN1562 else goto ASSIGN15B3
        ASSIGN1562:  preds = [COND191A]
          tensor[3] step1560#3 = fStep133D (pos1447);
          tensor[3] pos1563#4 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos1447,step1560);
          real _t156B#2 = TensorIndex<tensor[3],[0]>(pos1563);
          bool _t156F#1 = EQ<real>(_t156B,_t156B);
          bool _t1571#1 = BNot(_t156F);
          if _t1571 then goto ASSIGN1576 else goto ASSIGN1579
        ASSIGN1576:  preds = [COND158F]
          bool _t1574#1 = true;
          goto JOIN1573
        JOIN1573:  preds = [ASSIGN1576,JOIN1580]
          bool _t1575#1 = phi(_t1574,_t1582)
          if _t1575 then goto DIE1593 else goto JOIN1592
        DIE1593:  preds = [COND1594]
          die
          goto JOIN1592
        JOIN1592:  preds = [*DIE1593,COND1594]
          real _t1597#1 = λ(T0[3],T1[])<(Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))) / ( T1)> (step1560,rad1442);
          bool _t1599#1 = GT<real>(_t1597,eps1441);
          if _t1599 then goto ASSIGN19FA else goto ASSIGN15AA
        ASSIGN19FA:  preds = [COND15AE]
          int nfs159E#2 = IAdd(nfs144C,_t1459);
          int _t15A1#1 = 10;
          bool _t15A3#1 = GT<int>(nfs159E,_t15A1);
          if _t15A3 then goto DIE15A6 else goto JOIN15A5
        DIE15A6:  preds = [COND15A7]
          die
          goto JOIN15A5
        JOIN15A5:  preds = [*DIE15A6,COND15A7]
          goto JOIN159B
        JOIN159B:  preds = [JOIN15A5,ASSIGN15AA]
          int testp15AC#1 = phi(testp144E,_t1459)
          int nfs159F#1 = phi(nfs159E,nfs144C)
          bool found15A9#1 = phi(found144B,found15A8)
          goto JOIN155F
        JOIN155F:  preds = [JOIN159B,JOIN1810]
          int testp15B1#1 = phi(testp15AC,testp144E)
          int nfs15B0#1 = phi(nfs159F,nfs144C)
          bool found15AF#1 = phi(found15A9,found144B)
          tensor[3] step1561#1 = phi(step1560,up178E)
          real hh176D#1 = phi(hh1449,hh17DC)
          tensor[3] pos1564#2 = phi(pos1563,pos17C6)
          self.pos = pos1564;
          self._pos = pos1564;
          self.hh = hh176D;
          self.step = step1561;
          self.found = found15AF;
          self.nfs = nfs15B0;
          self.testp = testp15B1;
          self.steps = steps145B;
          active
        ASSIGN15AA:  preds = [COND15AE]
          bool found15A8#1 = true;
          goto JOIN159B
        ASSIGN1579:  preds = [COND158F]
          real _t1578#2 = TensorIndex<tensor[3],[1]>(pos1563);
          bool _t157C#1 = EQ<real>(_t1578,_t1578);
          bool _t157E#1 = BNot(_t157C);
          if _t157E then goto ASSIGN1583 else goto ASSIGN1585
        ASSIGN1583:  preds = [COND158C]
          bool _t1581#1 = true;
          goto JOIN1580
        JOIN1580:  preds = [ASSIGN1583,ASSIGN158B]
          bool _t1582#1 = phi(_t1581,_t158A)
          goto JOIN1573
        ASSIGN1585:  preds = [COND158C]
          real _t1584#2 = TensorIndex<tensor[3],[2]>(pos1563);
          bool _t1588#1 = EQ<real>(_t1584,_t1584);
          bool _t158A#1 = BNot(_t1588);
          goto JOIN1580
        ASSIGN15B3:  preds = [COND191A]
          tensor[3] _t15B2#13 = fStep133D (pos1447);
          tensor[3] pos15B4#11 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos1447,_t15B2);
          real _t15BA#2 = TensorIndex<tensor[3],[0]>(pos15B4);
          bool _t15BE#1 = EQ<real>(_t15BA,_t15BA);
          bool _t15C0#1 = BNot(_t15BE);
          if _t15C0 then goto ASSIGN15C5 else goto ASSIGN15C8
        ASSIGN15C5:  preds = [COND15DE]
          bool _t15C3#1 = true;
          goto JOIN15C2
        JOIN15C2:  preds = [ASSIGN15C5,JOIN15CF]
          bool _t15C4#1 = phi(_t15C3,_t15D1)
          if _t15C4 then goto DIE15E2 else goto JOIN15E1
        DIE15E2:  preds = [COND15E3]
          die
          goto JOIN15E1
        JOIN15E1:  preds = [*DIE15E2,COND15E3]
          tensor[3] step15E4#4 = λ()<Z_{i0}>_{3} ();
          int nn15EA#2 = 0;
          particle[] _t15EC#1 = SphereQuery<3,particle>(pos15B4,rad1442);
        FOREACH15F2:  preds = [ASSIGN19AF,NEXT1639]
          foreach (P15EE in _t15EC) on exit goto ASSIGN19B0
            int nn15F1#3 = phi(nn15EA,nn1637)
            tensor[3] force15F0#7 = phi(step15E4,force1633)
            real oldE15EF#2 = phi(_t1460,oldE1609)
          tensor[3] _t15F3#4 = P15EE.pos;
          real _t15FD#3 = 0.1e1;
          real oldE1609#1 = λ(T0[],T1[],T2[3],T3[3],T4[3],T5[])<(T0 + ((T1) - ((Sqrt(Σ(i0=0..2)<(((T2_{i0}) - ((T3_{i0} + T4_{i0})) * (T2_{i0}) - ((T3_{i0} + T4_{i0}))))>(i0=0..2))) / ( T5)))^4)> (oldE15EF,_t15FD,_t15F3,pos1447,_t15B2,rad1442);
          int _t1615#1 = -4;
          real _t1617#1 = IntToReal(_t1615);
          tensor[3] force1633#1 = λ(T0[3],T1[],T2[],T3[3],T4[3],T5[3],T6[],T7[],T8[],T9[3],T10[3],T11[3],T12[3],T13[3],T14[3])<(T0_{i0} + ((T1 * ((T2) - ((Sqrt(Σ(i3=0..2)<(((T3_{i3}) - ((T4_{i3} + T5_{i3})) * (T3_{i3}) - ((T4_{i3} + T5_{i3}))))>(i3=0..2))) / ( T6)))^3 * (T2) / ( T6) * (T3_{i0}) - ((T4_{i0} + T5_{i0})))) / ( Sqrt(Σ(i3=0..2)<(((T3_{i3}) - ((T4_{i3} + T5_{i3})) * (T3_{i3}) - ((T4_{i3} + T5_{i3}))))>(i3=0..2))))>_{3} (force15F0,_t1617,_t15FD,_t15F3,pos1447,_t15B2,rad1442,_t15FD,rad1442,_t15F3,pos1447,_t15B2,_t15F3,pos1447,_t15B2);
          int nn1637#1 = IAdd(nn15F1,_t1459);
          goto FOREACH15F2
        ASSIGN19B0:  preds = [FOREACH15F2]
          bool _t163C#1 = EQ<int>(nn15EA,nn15F1);
          if _t163C then goto ASSIGN1640 else goto JOIN163E
        ASSIGN1640:  preds = [COND1752]
          real _t163F#1 = 0.5e0;
          real _t1641#1 = λ(T0[],T1[])<(T0 * T1)> (_t163F,rad1442);
          tensor[3] _t1647#3 = <tensor[3]>[_t1641,_t1460,_t1460];
          tensor[3] npos1649#6 = λ(T0[3],T1[3],T2[3])<(T0_{i0} + T1_{i0} + T2_{i0})>_{3} (pos1447,_t15B2,_t1647);
          tensor[3] mid1656#3 = λ(T0[3],T1[3],T2[3],T3[3])<((T0_{i0} + T1_{i0} + T2_{i0})) - (T3_{i0})>_{3} (pos1447,_t15B2,_t1647,_t1466);
          real _t1659#1 = TensorIndex<tensor[3],[0]>(mid1656);
          real _t165B#1 = λ(T0[])<Abs(T0)> (_t1659);
          bool _t165F#1 = GT<real>(_t165B,_t146F);
          if _t165F then goto ASSIGN1664 else goto ASSIGN167C
        ASSIGN1664:  preds = [COND167D]
          real _t1663#1 = TensorIndex<tensor[3],[1]>(mid1656);
          real _t1665#1 = λ(T0[])<Abs(T0)> (_t1663);
          bool _t1669#1 = GT<real>(_t1665,_t146F);
          if _t1669 then goto ASSIGN166D else goto ASSIGN1676
        ASSIGN166D:  preds = [COND1677]
          real _t166C#1 = TensorIndex<tensor[3],[2]>(mid1656);
          real _t166E#1 = λ(T0[])<Abs(T0)> (_t166C);
          bool _t1672#1 = GT<real>(_t166E,_t146F);
          goto JOIN166B
        JOIN166B:  preds = [ASSIGN19B5,ASSIGN1676]
          bool _t1673#1 = phi(_t1672,_t1675)
          goto JOIN1661
        JOIN1661:  preds = [JOIN166B,ASSIGN167C]
          bool _t1679#1 = phi(_t1673,_t167B)
          real _t1681#2 = λ(T0[3],T1[3],T2[3],T3[3])<Sqrt(Σ(i0=0..2)<((((T0_{i0} + T1_{i0} + T2_{i0})) - (T3_{i0}) * ((T0_{i0} + T1_{i0} + T2_{i0})) - (T3_{i0})))>(i0=0..2))> (pos1447,_t15B2,_t1647,_t1466);
          bool _t1685#1 = LT<real>(_t1681,_t1495);
          if _t1685 then goto ASSIGN168C else goto ASSIGN169A
        ASSIGN168C:  preds = [COND169B]
          real _t168B#1 = 0.2e1;
          bool _t168D#1 = GT<real>(_t1681,_t168B);
          if _t168D then goto JOIN168F else goto ASSIGN1694
        JOIN168F:  preds = [COND1695,ASSIGN1694]
          bool _t1691#1 = phi(_t1679,_t1693)
          goto JOIN1687
        JOIN1687:  preds = [JOIN168F,ASSIGN169A]
          bool _t1697#1 = phi(_t1691,_t1699)
          if _t1697 then goto ASSIGN16A3 else goto ASSIGN1742
        ASSIGN16A3:  preds = [COND1743]
          real _t16A2#6 = TensorIndex<tensor[3],[0]>(npos1649);
          bool _t16A6#1 = EQ<real>(_t16A2,_t16A2);
          bool _t16A8#1 = BNot(_t16A6);
          if _t16A8 then goto ASSIGN16AD else goto ASSIGN16B0
        ASSIGN16AD:  preds = [COND16C6]
          bool _t16AB#1 = true;
          goto JOIN16AA
        JOIN16AA:  preds = [ASSIGN16AD,JOIN16B7]
          bool _t16AC#1 = phi(_t16AB,_t16B9)
          bool _t16C9#1 = BNot(_t16AC);
          if _t16C9 then goto ASSIGN16D1 else goto ASSIGN173C
        ASSIGN16D1:  preds = [COND173D]
          real y16D0#6 = TensorIndex<tensor[3],[1]>(npos1649);
          real z16D2#4 = TensorIndex<tensor[3],[2]>(npos1649);
          int _t16D4#1 = 2;
          real _t16D6#2 = λ(T0[])<(T0)^2> (y16D0);
          real _t16D8#1 = λ(T0[],T1[])<(T1 * (T0)^2)> (y16D0,z16D2);
          real _t16DA#4 = 0.2e1;
          real _t16DE#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t16DA,_t16A2,y16D0);
          real _t16E0#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t16DA,_t16A2,y16D0,z16D2);
          real _t16E6#1 = λ(T0[],T1[])<(T0 * (T1)^2)> (_t16A2,y16D0);
          tensor[3] g16E8#1 = <tensor[3]>[_t16D8,_t16E0,_t16E6];
          real _t16F9#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t16DA,y16D0,z16D2);
          tensor[3] _t16FF#1 = <tensor[3]>[_t1460,_t16F9,_t16D6];
          real _t170B#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t16DA,_t16A2,z16D2);
          tensor[3] _t1713#1 = <tensor[3]>[_t16F9,_t170B,_t16DE];
          tensor[3] _t1721#1 = <tensor[3]>[_t16D6,_t16DE,_t1460];
          tensor[3,3] hess1723#1 = <tensor[3,3]>[_t16FF,_t1713,_t1721];
          (real[3] _t1727#1,tensor[3][3] evecs1728#0) = Eigen3x3(hess1723);
          real _t172C#1 = Subscript<real[3]>(_t1727,_t16D4);
          real str1734#1 = λ(T0[],T1[],T2[3])<(Neg(T0)) / ( (T1 + Sqrt(Σ(i0=0..2)<((T2_{i0} * T2_{i0}))>(i0=0..2))))> (_t172C,fBias1440,g16E8);
          bool _t1738#1 = GTE<real>(str1734,fStren143F);
          goto JOIN16CB
        JOIN16CB:  preds = [ASSIGN19C7,ASSIGN173C]
          bool _t1739#1 = phi(_t1738,_t173B)
          goto JOIN169E
        JOIN169E:  preds = [JOIN16CB,ASSIGN1742]
          bool _t173F#1 = phi(_t1739,_t1741)
          if _t173F then goto NEW1747 else goto JOIN1746
        NEW1747:  preds = [COND1748]
          new particle(npos1649,hh1449);
          goto JOIN1746
        JOIN1746:  preds = [NEW1747,COND1748]
          self.pos = pos15B4;
          self._pos = pos15B4;
          self.step = step15E4;
          self.steps = steps145B;
          active
          goto JOIN163E
        JOIN163E:  preds = [*ACTIVE1749,COND1752]
          tensor[3,3] _t1753#6 = fPerp13CB (pos15B4);
          tensor[3] es1757#1 = λ(T0[],T1[3 3],T2[3])<(T0 * Σ(i2=0..2)<((T1_{i0,i2} * T2_{i2}))>(i2=0..2))>_{3} (hh1449,_t1753,force15F0);
          real _t1759#1 = λ(T0[],T1[3 3],T2[3])<Sqrt((T0 * T0 * Σ(i0=0..2)<((Σ(i2=0..2)<((T1_{i0,i2} * T2_{i2}))>(i2=0..2) * Σ(i2=0..2)<((T1_{i0,i2} * T2_{i2}))>(i2=0..2)))>(i0=0..2)))> (hh1449,_t1753,force15F0);
          bool _t175B#1 = GT<real>(_t1759,rad1442);
          if _t175B then goto ASSIGN1A3F else goto JOIN175D
        ASSIGN1A3F:  preds = [COND176C]
          real hh1762#1 = λ(T0[],T1[],T2[],T3[3 3],T4[3])<(T0 * (T1) / ( Sqrt((T0 * T0 * Σ(i0=0..2)<((Σ(i2=0..2)<((T3_{i0,i2} * T4_{i2}))>(i2=0..2) * Σ(i2=0..2)<((T3_{i0,i2} * T4_{i2}))>(i2=0..2)))>(i0=0..2)))))> (hh1449,rad1442,hh1449,_t1753,force15F0);
          tensor[3] es1769#1 = λ(T0[],T1[],T2[3 3],T3[3],T4[],T5[3 3],T6[3])<(T1 * (T0) / ( Sqrt((T1 * T1 * Σ(i1=0..2)<((Σ(i3=0..2)<((T2_{i1,i3} * T3_{i3}))>(i3=0..2) * Σ(i3=0..2)<((T2_{i1,i3} * T3_{i3}))>(i3=0..2)))>(i1=0..2)))) * Σ(i5=0..2)<((T2_{i0,i5} * T3_{i5}))>(i5=0..2))>_{3} (rad1442,hh1449,_t1753,force15F0,hh1449,_t1753,force15F0);
          goto JOIN175D
        JOIN175D:  preds = [ASSIGN1A40,COND176C]
          tensor[3] es176A#12 = phi(es1769,es1757)
          real hh1763#2 = phi(hh1762,hh1449)
          tensor[3] samplePos176E#1 = λ(T0[3],T1[3],T2[3])<(T0_{i0} + T1_{i0} + T2_{i0})>_{3} (pos1447,_t15B2,es176A);
          tensor[3] fs1770#5 = fStep133D (samplePos176E);
          real _t1776#1 = λ(T0[3],T1[3])<(Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))) / ( Sqrt(Σ(i0=0..2)<((T1_{i0} * T1_{i0}))>(i0=0..2)))> (fs1770,es176A);
          real _t1778#7 = 0.5e0;
          bool _t177A#1 = GT<real>(_t1776,_t1778);
          if _t177A then goto ASSIGN19CB else goto JOIN177C
        ASSIGN19CB:  preds = [COND178B]
          real hh177F#1 = λ(T0[],T1[])<(T0 * T1)> (hh1763,_t1778);
          self.pos = pos15B4;
          self._pos = pos15B4;
          self.hh = hh177F;
          self.step = step15E4;
          self.steps = steps145B;
          active
          goto JOIN177C
        JOIN177C:  preds = [*ACTIVE1782,COND178B]
          real hh1780#2 = phi(hh1763)
          tensor[3] up178E#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (fs1770,es176A);
          tensor[3] pos1790#2 = λ(T0[3],T1[3],T2[3],T3[3])<(T0_{i0} + T1_{i0} + T2_{i0} + T3_{i0})>_{3} (pos1447,_t15B2,fs1770,es176A);
          particle[] _t1794#1 = SphereQuery<3,particle>(pos1790,rad1442);
        FOREACH179A:  preds = [ASSIGN19CD,NEXT17B3]
          foreach (P1798 in _t1794) on exit goto ASSIGN19CE
            real accum1799#2 = phi(_t1460,accum17B1)
          tensor[3] _t179B#1 = P1798.pos;
          real _t17A5#1 = 0.1e1;
          real accum17B1#1 = λ(T0[],T1[],T2[3],T3[3],T4[3],T5[3],T6[3],T7[])<(T0 + ((T1) - ((Sqrt(Σ(i0=0..2)<((((T2_{i0} + T3_{i0} + T4_{i0} + T5_{i0})) - (T6_{i0}) * ((T2_{i0} + T3_{i0} + T4_{i0} + T5_{i0})) - (T6_{i0})))>(i0=0..2))) / ( T7)))^4)> (accum1799,_t17A5,pos1447,_t15B2,fs1770,es176A,_t179B,rad1442);
          goto FOREACH179A
        ASSIGN19CE:  preds = [FOREACH179A]
          real _t17B6#1 = λ(T0[],T1[])<(T0) - (T1)> (accum1799,oldE15EF);
          real _t17C0#1 = λ(T0[],T1[3],T2[3],T3[3],T4[3],T5[3],T6[3],T7[3 3],T8[3])<(T0 * Σ(i0=0..2)<((((T1_{i0} + T2_{i0} + T3_{i0} + T4_{i0})) - ((T1_{i0} + T2_{i0})) * Neg(Σ(i2=0..2)<((T7_{i0,i2} * T8_{i2}))>(i2=0..2))))>(i0=0..2))> (_t1778,pos1447,_t15B2,fs1770,es176A,pos1447,_t15B2,_t1753,force15F0);
          bool _t17C2#1 = GT<real>(_t17B6,_t17C0);
          if _t17C2 then goto ASSIGN19D1 else goto JOIN17C4
        ASSIGN19D1:  preds = [COND17D9]
          real hh17CD#1 = λ(T0[],T1[])<(T0 * T1)> (hh1780,_t1778);
          self.pos = pos15B4;
          self._pos = pos15B4;
          self.hh = hh17CD;
          self.step = step15E4;
          self.steps = steps145B;
          active
          goto JOIN17C4
        JOIN17C4:  preds = [*ACTIVE17D0,COND17D9]
          real hh17CE#1 = phi(hh1780)
          tensor[3] pos17C6#7 = phi(pos1790)
          real _t17DA#1 = 0.11e1;
          real hh17DC#2 = λ(T0[],T1[])<(T0 * T1)> (hh17CE,_t17DA);
          real _t17E2#2 = TensorIndex<tensor[3],[0]>(pos17C6);
          bool _t17E6#1 = EQ<real>(_t17E2,_t17E2);
          bool _t17E8#1 = BNot(_t17E6);
          if _t17E8 then goto ASSIGN17ED else goto ASSIGN17F0
        ASSIGN17ED:  preds = [COND1806]
          bool _t17EB#1 = true;
          goto JOIN17EA
        JOIN17EA:  preds = [ASSIGN17ED,JOIN17F7]
          bool _t17EC#1 = phi(_t17EB,_t17F9)
          if _t17EC then goto DIE180A else goto JOIN1809
        DIE180A:  preds = [COND180B]
          die
          goto JOIN1809
        JOIN1809:  preds = [*DIE180A,COND180B]
          int _t180C#1 = 5;
          bool _t180E#1 = LT<int>(nn15F1,_t180C);
          if _t180E then goto ASSIGN1A4F else goto JOIN1810
        ASSIGN1A4F:  preds = [COND1919]
          tensor[3] npos1819#6 = λ(T0[3],T1[],T2[],T3[3],T4[3])<(T0_{i0} + (T1 * T2 * T3_{i0} * (1) / ( Sqrt(Σ(i3=0..2)<((T3_{i3} * T3_{i3}))>(i3=0..2)))))>_{3} (pos17C6,_t1778,rad1442,es176A,es176A);
          tensor[3] mid1826#3 = λ(T0[3],T1[],T2[],T3[3],T4[3],T5[3])<((T0_{i0} + (T1 * T2 * T3_{i0} * (1) / ( Sqrt(Σ(i4=0..2)<((T3_{i4} * T3_{i4}))>(i4=0..2)))))) - (T5_{i0})>_{3} (pos17C6,_t1778,rad1442,es176A,es176A,_t1466);
          real _t1829#1 = TensorIndex<tensor[3],[0]>(mid1826);
          real _t182B#1 = λ(T0[])<Abs(T0)> (_t1829);
          bool _t182F#1 = GT<real>(_t182B,_t146F);
          if _t182F then goto ASSIGN1834 else goto ASSIGN184C
        ASSIGN1834:  preds = [COND184D]
          real _t1833#1 = TensorIndex<tensor[3],[1]>(mid1826);
          real _t1835#1 = λ(T0[])<Abs(T0)> (_t1833);
          bool _t1839#1 = GT<real>(_t1835,_t146F);
          if _t1839 then goto ASSIGN183D else goto ASSIGN1846
        ASSIGN183D:  preds = [COND1847]
          real _t183C#1 = TensorIndex<tensor[3],[2]>(mid1826);
          real _t183E#1 = λ(T0[])<Abs(T0)> (_t183C);
          bool _t1842#1 = GT<real>(_t183E,_t146F);
          goto JOIN183B
        JOIN183B:  preds = [ASSIGN19DB,ASSIGN1846]
          bool _t1843#1 = phi(_t1842,_t1845)
          goto JOIN1831
        JOIN1831:  preds = [JOIN183B,ASSIGN184C]
          bool _t1849#1 = phi(_t1843,_t184B)
          real _t1851#2 = λ(T0[3],T1[],T2[],T3[3],T4[3],T5[3])<Sqrt(Σ(i0=0..2)<((((T0_{i0} + (T1 * T2 * T3_{i0} * (1) / ( Sqrt(Σ(i4=0..2)<((T3_{i4} * T3_{i4}))>(i4=0..2)))))) - (T5_{i0}) * ((T0_{i0} + (T1 * T2 * T3_{i0} * (1) / ( Sqrt(Σ(i4=0..2)<((T3_{i4} * T3_{i4}))>(i4=0..2)))))) - (T5_{i0})))>(i0=0..2))> (pos17C6,_t1778,rad1442,es176A,es176A,_t1466);
          bool _t1855#1 = LT<real>(_t1851,_t1495);
          if _t1855 then goto ASSIGN185C else goto ASSIGN186A
        ASSIGN185C:  preds = [COND186B]
          real _t185B#1 = 0.2e1;
          bool _t185D#1 = GT<real>(_t1851,_t185B);
          if _t185D then goto JOIN185F else goto ASSIGN1864
        JOIN185F:  preds = [COND1865,ASSIGN1864]
          bool _t1861#1 = phi(_t1849,_t1863)
          goto JOIN1857
        JOIN1857:  preds = [JOIN185F,ASSIGN186A]
          bool _t1867#1 = phi(_t1861,_t1869)
          if _t1867 then goto ASSIGN1873 else goto ASSIGN1912
        ASSIGN1873:  preds = [COND1913]
          real _t1872#6 = TensorIndex<tensor[3],[0]>(npos1819);
          bool _t1876#1 = EQ<real>(_t1872,_t1872);
          bool _t1878#1 = BNot(_t1876);
          if _t1878 then goto ASSIGN187D else goto ASSIGN1880
        ASSIGN187D:  preds = [COND1896]
          bool _t187B#1 = true;
          goto JOIN187A
        JOIN187A:  preds = [ASSIGN187D,JOIN1887]
          bool _t187C#1 = phi(_t187B,_t1889)
          bool _t1899#1 = BNot(_t187C);
          if _t1899 then goto ASSIGN18A1 else goto ASSIGN190C
        ASSIGN18A1:  preds = [COND190D]
          real y18A0#6 = TensorIndex<tensor[3],[1]>(npos1819);
          real z18A2#4 = TensorIndex<tensor[3],[2]>(npos1819);
          int _t18A4#1 = 2;
          real _t18A6#2 = λ(T0[])<(T0)^2> (y18A0);
          real _t18A8#1 = λ(T0[],T1[])<(T1 * (T0)^2)> (y18A0,z18A2);
          real _t18AA#4 = 0.2e1;
          real _t18AE#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t18AA,_t1872,y18A0);
          real _t18B0#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t18AA,_t1872,y18A0,z18A2);
          real _t18B6#1 = λ(T0[],T1[])<(T0 * (T1)^2)> (_t1872,y18A0);
          tensor[3] g18B8#1 = <tensor[3]>[_t18A8,_t18B0,_t18B6];
          real _t18C9#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t18AA,y18A0,z18A2);
          tensor[3] _t18CF#1 = <tensor[3]>[_t1460,_t18C9,_t18A6];
          real _t18DB#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t18AA,_t1872,z18A2);
          tensor[3] _t18E3#1 = <tensor[3]>[_t18C9,_t18DB,_t18AE];
          tensor[3] _t18F1#1 = <tensor[3]>[_t18A6,_t18AE,_t1460];
          tensor[3,3] hess18F3#1 = <tensor[3,3]>[_t18CF,_t18E3,_t18F1];
          (real[3] _t18F7#1,tensor[3][3] evecs18F8#0) = Eigen3x3(hess18F3);
          real _t18FC#1 = Subscript<real[3]>(_t18F7,_t18A4);
          real str1904#1 = λ(T0[],T1[],T2[3])<(Neg(T0)) / ( (T1 + Sqrt(Σ(i0=0..2)<((T2_{i0} * T2_{i0}))>(i0=0..2))))> (_t18FC,fBias1440,g18B8);
          bool _t1908#1 = GTE<real>(str1904,fStren143F);
          goto JOIN189B
        JOIN189B:  preds = [ASSIGN19ED,ASSIGN190C]
          bool _t1909#1 = phi(_t1908,_t190B)
          goto JOIN186E
        JOIN186E:  preds = [JOIN189B,ASSIGN1912]
          bool _t190F#1 = phi(_t1909,_t1911)
          if _t190F then goto NEW1917 else goto JOIN1916
        NEW1917:  preds = [COND1918]
          new particle(npos1819,hh17DC);
          goto JOIN1916
        JOIN1916:  preds = [NEW1917,COND1918]
          goto JOIN1810
        JOIN1810:  preds = [JOIN1916,COND1919]
          goto JOIN155F
        ASSIGN190C:  preds = [COND190D]
          bool _t190B#1 = false;
          goto JOIN189B
        ASSIGN1880:  preds = [COND1896]
          real _t187F#2 = TensorIndex<tensor[3],[1]>(npos1819);
          bool _t1883#1 = EQ<real>(_t187F,_t187F);
          bool _t1885#1 = BNot(_t1883);
          if _t1885 then goto ASSIGN188A else goto ASSIGN188C
        ASSIGN188A:  preds = [COND1893]
          bool _t1888#1 = true;
          goto JOIN1887
        JOIN1887:  preds = [ASSIGN188A,ASSIGN1892]
          bool _t1889#1 = phi(_t1888,_t1891)
          goto JOIN187A
        ASSIGN188C:  preds = [COND1893]
          real _t188B#2 = TensorIndex<tensor[3],[2]>(npos1819);
          bool _t188F#1 = EQ<real>(_t188B,_t188B);
          bool _t1891#1 = BNot(_t188F);
          goto JOIN1887
        ASSIGN1912:  preds = [COND1913]
          bool _t1911#1 = false;
          goto JOIN186E
        ASSIGN1864:  preds = [COND1865]
          bool _t1863#1 = false;
          goto JOIN185F
        ASSIGN186A:  preds = [COND186B]
          bool _t1869#1 = false;
          goto JOIN1857
        ASSIGN1846:  preds = [COND1847]
          bool _t1845#1 = false;
          goto JOIN183B
        ASSIGN184C:  preds = [COND184D]
          bool _t184B#1 = false;
          goto JOIN1831
        ASSIGN17F0:  preds = [COND1806]
          real _t17EF#2 = TensorIndex<tensor[3],[1]>(pos17C6);
          bool _t17F3#1 = EQ<real>(_t17EF,_t17EF);
          bool _t17F5#1 = BNot(_t17F3);
          if _t17F5 then goto ASSIGN17FA else goto ASSIGN17FC
        ASSIGN17FA:  preds = [COND1803]
          bool _t17F8#1 = true;
          goto JOIN17F7
        JOIN17F7:  preds = [ASSIGN17FA,ASSIGN1802]
          bool _t17F9#1 = phi(_t17F8,_t1801)
          goto JOIN17EA
        ASSIGN17FC:  preds = [COND1803]
          real _t17FB#2 = TensorIndex<tensor[3],[2]>(pos17C6);
          bool _t17FF#1 = EQ<real>(_t17FB,_t17FB);
          bool _t1801#1 = BNot(_t17FF);
          goto JOIN17F7
        ASSIGN173C:  preds = [COND173D]
          bool _t173B#1 = false;
          goto JOIN16CB
        ASSIGN16B0:  preds = [COND16C6]
          real _t16AF#2 = TensorIndex<tensor[3],[1]>(npos1649);
          bool _t16B3#1 = EQ<real>(_t16AF,_t16AF);
          bool _t16B5#1 = BNot(_t16B3);
          if _t16B5 then goto ASSIGN16BA else goto ASSIGN16BC
        ASSIGN16BA:  preds = [COND16C3]
          bool _t16B8#1 = true;
          goto JOIN16B7
        JOIN16B7:  preds = [ASSIGN16BA,ASSIGN16C2]
          bool _t16B9#1 = phi(_t16B8,_t16C1)
          goto JOIN16AA
        ASSIGN16BC:  preds = [COND16C3]
          real _t16BB#2 = TensorIndex<tensor[3],[2]>(npos1649);
          bool _t16BF#1 = EQ<real>(_t16BB,_t16BB);
          bool _t16C1#1 = BNot(_t16BF);
          goto JOIN16B7
        ASSIGN1742:  preds = [COND1743]
          bool _t1741#1 = false;
          goto JOIN169E
        ASSIGN1694:  preds = [COND1695]
          bool _t1693#1 = false;
          goto JOIN168F
        ASSIGN169A:  preds = [COND169B]
          bool _t1699#1 = false;
          goto JOIN1687
        ASSIGN1676:  preds = [COND1677]
          bool _t1675#1 = false;
          goto JOIN166B
        ASSIGN167C:  preds = [COND167D]
          bool _t167B#1 = false;
          goto JOIN1661
        ASSIGN15C8:  preds = [COND15DE]
          real _t15C7#2 = TensorIndex<tensor[3],[1]>(pos15B4);
          bool _t15CB#1 = EQ<real>(_t15C7,_t15C7);
          bool _t15CD#1 = BNot(_t15CB);
          if _t15CD then goto ASSIGN15D2 else goto ASSIGN15D4
        ASSIGN15D2:  preds = [COND15DB]
          bool _t15D0#1 = true;
          goto JOIN15CF
        JOIN15CF:  preds = [ASSIGN15D2,ASSIGN15DA]
          bool _t15D1#1 = phi(_t15D0,_t15D9)
          goto JOIN15C2
        ASSIGN15D4:  preds = [COND15DB]
          real _t15D3#2 = TensorIndex<tensor[3],[2]>(pos15B4);
          bool _t15D7#1 = EQ<real>(_t15D3,_t15D3);
          bool _t15D9#1 = BNot(_t15D7);
          goto JOIN15CF
        ASSIGN154E:  preds = [COND154F]
          bool _t154D#1 = false;
          goto JOIN14DD
        ASSIGN14C2:  preds = [COND14D8]
          real _t14C1#2 = TensorIndex<tensor[3],[1]>(pos1447);
          bool _t14C5#1 = EQ<real>(_t14C1,_t14C1);
          bool _t14C7#1 = BNot(_t14C5);
          if _t14C7 then goto ASSIGN14CC else goto ASSIGN14CE
        ASSIGN14CC:  preds = [COND14D5]
          bool _t14CA#1 = true;
          goto JOIN14C9
        JOIN14C9:  preds = [ASSIGN14CC,ASSIGN14D4]
          bool _t14CB#1 = phi(_t14CA,_t14D3)
          goto JOIN14BC
        ASSIGN14CE:  preds = [COND14D5]
          real _t14CD#2 = TensorIndex<tensor[3],[2]>(pos1447);
          bool _t14D1#1 = EQ<real>(_t14CD,_t14CD);
          bool _t14D3#1 = BNot(_t14D1);
          goto JOIN14C9
        ASSIGN1554:  preds = [COND1555]
          bool _t1553#1 = false;
          goto JOIN14B0
        ASSIGN14A6:  preds = [COND14A7]
          bool _t14A5#1 = false;
          goto JOIN14A1
        ASSIGN14AC:  preds = [COND14AD]
          bool _t14AB#1 = false;
          goto JOIN1499
        ASSIGN1488:  preds = [COND1489]
          bool _t1487#1 = false;
          goto JOIN147D
        ASSIGN148E:  preds = [COND148F]
          bool _t148D#1 = false;
          goto JOIN1473
    end update
  end particle
## initial strand creation
  COLLECTION
    ENTRY1411:  preds = []
      tensor[3][] ipos1409#1 = globals.ipos1244;
    FOREACH140C:  preds = [ASSIGN140A,NEXT1410]
      foreach (x140B in ipos1409) on exit goto RETURN1412
      real _t140D#1 = 0.1e1;
      new particle(x140B,_t140D);
      goto FOREACH140C
    RETURN1412:  preds = [FOREACH140C]
      return
## global update
  ENTRY1972:  preds = []
    real rad1926#1 = globals.rad123E;
    real eps1925#1 = globals.eps123F;
    particle[] P1929#5 = Strands<particle,all>;
    (int res192A#1) = sum<int>(MAP sum13D2 (P1929));
    (int res1930#2) = max<int>(MAP max13D9 (P1929));
    (int res1936#1) = sum<int>(MAP sum13E0 (P1929));
    (bool res193C#2) = all(MAP all13E7 (P1929));
    (real res1942#1) = max<real>(MAP max13F0 (P1929));
    string _t1947#1 = "One run:";
    string _t1949#3 = " and ";
    real _t194B#2 = λ(T0[],T1[])<(T0) / ( T1)> (res1942,rad1926);
    bool _t1951#2 = LT<real>(_t194B,eps1925);
    string _t1955#1 = " of ";
    string _t1957#2 = "\n";
    Print<[string,bool,string,real,string,bool,string,int,string,int,string]>(_t1947,res193C,_t1949,_t194B,_t1949,_t1951,_t1949,res1936,_t1955,res192A,_t1957);
    if res193C then goto COND1964 else goto JOIN195A
  COND1964:  preds = [COND1965]
    if _t1951 then goto ASSIGN1961 else goto JOIN195F
  ASSIGN1961:  preds = [COND1964]
    string _t1960#1 = "CONVERGED!\n";
    Print<[string]>(_t1960);
    StabilizeAll;
    goto JOIN195F
  JOIN195F:  preds = [MASSIGN1963,COND1964]
    goto JOIN195A
  JOIN195A:  preds = [JOIN195F,COND1965]
    int _t1966#1 = 2000;
    bool _t1968#1 = GT<int>(res1930,_t1966);
    if _t1968 then goto MASSIGN196B else goto JOIN196A
  MASSIGN196B:  preds = [COND196C]
    StabilizeAll;
    goto JOIN196A
  JOIN196A:  preds = [MASSIGN196B,COND196C]
    string _t196D#1 = "Current steps:";
    Print<[string,int,string]>(_t196D,res1930,_t1957);
    continue
#### end program ####
##### mid-ir: after high-to-mid translation ####
## properties
  GlobalInit StabilizeAll GlobalReduce StrandSets GlobalUpdate NewStrands StrandCommunication StrandsMayDie HasInputs HasGlobals ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
## globals
  input meshData1A5A (meshData) = <no-default>
  input 0space04FA_intermedateGlobal1A5B (space) = <no-default>
  input 0data04FC_intermedateGlobal1A5C (data) = <no-default>
  input rad1A5D (rad) = <default>
  input eps1A5E (eps) = <default>
  input v01A5F (v0) = <default>
  input fBias1A60 (fBias) = <default>
  input fStren1A61 (fStren) = <default>
  input zfuz1A62 (zfuz) = <default>
  input ipos1A63 (ipos) = <no-default>
## functions
  function tensor[3] fStep1B4A (tensor[3] s1B4B#3) {
    ENTRY1B4C:  preds = []
      real x1B4D#4 = TensorIndex<tensor[3],[0]>(s1B4B);
      real y1B4F#6 = TensorIndex<tensor[3],[1]>(s1B4B);
      real z1B51#4 = TensorIndex<tensor[3],[2]>(s1B4B);
      int _t1B53#2 = 2;
      real _t1B55#2 = λ(T0[])<(T0)^2> (y1B4F);
      real op1_e3_l_21B58#1 = λ(T0[])<(T0)^2> (y1B4F);
      real _t1B57#1 = λ(T0[],T1[])<(T0 * T1)> (z1B51,op1_e3_l_21B58);
      real _t1B5B#4 = 0.2e1;
      real _t1B5D#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1B5B,x1B4D,y1B4F);
      real _t1B5F#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t1B5B,x1B4D,y1B4F,z1B51);
      real op1_e3_l_21B62#1 = λ(T0[])<(T0)^2> (y1B4F);
      real _t1B61#1 = λ(T0[],T1[])<(T0 * T1)> (x1B4D,op1_e3_l_21B62);
      tensor[3] g1B65#1 = <tensor[3]>[_t1B57,_t1B5F,_t1B61];
      real _t1B67#2 = 0.e0;
      real _t1B69#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1B5B,y1B4F,z1B51);
      tensor[3] _t1B6B#1 = <tensor[3]>[_t1B67,_t1B69,_t1B55];
      real _t1B6D#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1B5B,x1B4D,z1B51);
      tensor[3] _t1B6F#1 = <tensor[3]>[_t1B69,_t1B6D,_t1B5D];
      tensor[3] _t1B71#1 = <tensor[3]>[_t1B55,_t1B5D,_t1B67];
      tensor[3,3] hess1B73#1 = <tensor[3,3]>[_t1B6B,_t1B6F,_t1B71];
      (real[3] evals1B75#1,tensor[3][3] E1B76#1) = EigenVecs3x3(hess1B73);
      real _t1B78#1 = 0.1e1;
      real _t1B7A#1 = Subscript<real[3]>(evals1B75,_t1B53);
      tensor[3] _t1B7C#2 = Subscript<tensor[3][3]>(E1B76,_t1B53);
      real op1_e3_l_51B7F#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t1B78,_t1B7A);
      real op1_e3_l_61B80#1 = λ(T0[])<Neg(T0)> (op1_e3_l_51B7F);
      real op1_e3_l_71B81#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (_t1B7C,g1B65);
      tensor[3] up1B7E#4 = λ(T0[3],T1[],T2[])<(T1 * T0_{i0} * T2)>_{3} (_t1B7C,op1_e3_l_61B80,op1_e3_l_71B81);
      real _t1B86#2 = TensorIndex<tensor[3],[0]>(up1B7E);
      bool _t1B88#1 = EQ<real>(_t1B86,_t1B86);
      bool _t1B8A#1 = BNot(_t1B88);
      if _t1B8A then goto ASSIGN1B8E else goto ASSIGN1B9B
    ASSIGN1B8E:  preds = [COND1B8C]
      bool _t1B8D#1 = true;
      goto JOIN1B91
    JOIN1B91:  preds = [ASSIGN1B8E,JOIN1BA4]
      bool _t1B8F#1 = phi(_t1B8D,_t1B90)
      if _t1B8F then goto ASSIGN1B94 else goto JOIN1B98
    ASSIGN1B94:  preds = [COND1B92]
      real _t1B93#3 = +inf;
      tensor[3] _t1B95#1 = <tensor[3]>[_t1B93,_t1B93,_t1B93];
      return _t1B95
      goto JOIN1B98
    JOIN1B98:  preds = [*RETURN(_t1B95)1B97,COND1B92]
      return up1B7E
    ASSIGN1B9B:  preds = [COND1B8C]
      real _t1B9A#2 = TensorIndex<tensor[3],[1]>(up1B7E);
      bool _t1B9C#1 = EQ<real>(_t1B9A,_t1B9A);
      bool _t1B9E#1 = BNot(_t1B9C);
      if _t1B9E then goto ASSIGN1BA2 else goto ASSIGN1BA6
    ASSIGN1BA2:  preds = [COND1BA0]
      bool _t1BA1#1 = true;
      goto JOIN1BA4
    JOIN1BA4:  preds = [ASSIGN1BA2,ASSIGN1BA9]
      bool _t1B90#1 = phi(_t1BA1,_t1BA3)
      goto JOIN1B91
    ASSIGN1BA6:  preds = [COND1BA0]
      real _t1BA5#2 = TensorIndex<tensor[3],[2]>(up1B7E);
      bool _t1BA7#1 = EQ<real>(_t1BA5,_t1BA5);
      bool _t1BA3#1 = BNot(_t1BA7);
      goto JOIN1BA4
}
  function tensor[3,3] fPerp1CDA (tensor[3] s1CDB#3) {
    ENTRY1CDC:  preds = []
      real x1CDD#2 = TensorIndex<tensor[3],[0]>(s1CDB);
      real y1CDF#3 = TensorIndex<tensor[3],[1]>(s1CDB);
      real z1CE1#2 = TensorIndex<tensor[3],[2]>(s1CDB);
      int _t1CE3#1 = 2;
      real _t1CE5#2 = λ(T0[])<(T0)^2> (y1CDF);
      real _t1CE7#3 = 0.2e1;
      real _t1CE9#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1CE7,x1CDD,y1CDF);
      real _t1CEB#2 = 0.e0;
      real _t1CED#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1CE7,y1CDF,z1CE1);
      tensor[3] _t1CEF#1 = <tensor[3]>[_t1CEB,_t1CED,_t1CE5];
      real _t1CF1#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1CE7,x1CDD,z1CE1);
      tensor[3] _t1CF3#1 = <tensor[3]>[_t1CED,_t1CF1,_t1CE9];
      tensor[3] _t1CF5#1 = <tensor[3]>[_t1CE5,_t1CE9,_t1CEB];
      tensor[3,3] hess1CF7#1 = <tensor[3,3]>[_t1CEF,_t1CF3,_t1CF5];
      (real[3] evals1CF9#0,tensor[3][3] _t1CFA#1) = EigenVecs3x3(hess1CF7);
      tensor[3] E21CFC#2 = Subscript<tensor[3][3]>(_t1CFA,_t1CE3);
      tensor[3,3] op1_e3_l_21CFF#1 = λ(T0[3])<(T0_{i0} * T0_{i1})>_{3 3} (E21CFC);
      tensor[3,3] m1CFE#1 = λ(T0[3 3])<(δ_{i0,i1}) - (T0_{i0,i1})>_{3 3} (op1_e3_l_21CFF);
      tensor[3,3] op1_e3_l_41D03#1 = λ(T0[3])<(T0_{i0} * T0_{i1})>_{3 3} (E21CFC);
      tensor[3,3] op1_e3_l_61D04#2 = λ(T0[3 3])<(δ_{i0,i1}) - (T0_{i0,i1})>_{3 3} (op1_e3_l_41D03);
      real t1D02#2 = λ(T0[3 3],T1[3 3])<Σ(i0=0..2)(i1=0..2)<((T0_{i0,i1} * T1_{i0,i1}))>(i0=0..2)(i1=0..2)> (op1_e3_l_61D04,op1_e3_l_61D04);
      bool _t1D08#1 = EQ<real>(t1D02,t1D02);
      bool _t1D0A#1 = BNot(_t1D08);
      if _t1D0A then goto ASSIGN1D0E else goto JOIN1D10
    ASSIGN1D0E:  preds = [COND1D0C]
      tensor[3,3] _t1D0D#1 = λ()<Z_{i0,i1}>_{3 3} ();
      return _t1D0D
      goto JOIN1D10
    JOIN1D10:  preds = [*RETURN(_t1D0D)1D0F,COND1D0C]
      return m1CFE
}
  function int sum1EBC (particle P1EBD#1) {
    ENTRY1EBE:  preds = []
      int _t1EBF#1 = P1EBD.test;
      return _t1EBF
}
  function int max1EC4 (particle P1EC5#1) {
    ENTRY1EC6:  preds = []
      int _t1EC7#1 = P1EC5.steps;
      return _t1EC7
}
  function int sum1ECC (particle P1ECD#1) {
    ENTRY1ECE:  preds = []
      int _t1ECF#1 = P1ECD.testp;
      return _t1ECF
}
  function bool all1ED4 (particle P1ED5#1) {
    ENTRY1ED6:  preds = []
      bool _t1ED7#1 = P1ED5.found;
      return _t1ED7
}
  function real max1EDC (particle P1EDD#1) {
    ENTRY1EDE:  preds = []
      tensor[3] _t1EDF#1 = P1EDD.step;
      real op1_e3_l_11EE2#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (_t1EDF);
      real _t1EE1#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_11EE2);
      return _t1EE1
}
## input initialization
  ENTRY1A64:  preds = []
    real rad1A65#5 = 0.1e-1;
    globals.rad1A5D = rad1A65;
    globals.eps1A5E = rad1A65;
    real v01A69#1 = 0.625e-1;
    globals.v01A5F = v01A69;
    globals.fBias1A60 = rad1A65;
    globals.fStren1A61 = rad1A65;
    globals.zfuz1A62 = rad1A65;
    return
## global-variable initialization
  ENTRY1A70:  preds = []
    femData:Mesh meshData1A71#2 = globals.meshData1A5A;
    int _t1A73#1 = 0;
    int _t1A75#1 = 1;
    int _t1A77#1 = ExtractFemItem<int,NumCell(Mesh)>(meshData1A71);
    int _t1A79#1 = ISub(_t1A77,_t1A75);
    int[] _t1A7B#1 = Range(_t1A73,_t1A79);
    femData:MeshCell[] _t1A7D#1 = <femData:MeshCell[]>{};
  FOREACH1A80:  preds = [ASSIGN1A7E,NEXT1A86]
    foreach (_t1A7F in _t1A7B) on exit goto RETURN1A87
      femData:MeshCell[] _t1A84#1 = phi(_t1A7D,_t1A83)
    femData:MeshCell _t1A81#1 = LoadFem<femData:MeshCell>(meshData1A71,_t1A7F);
    femData:MeshCell[] _t1A83#1 = Append<femData:MeshCell>(_t1A84,_t1A81);
    goto FOREACH1A80
  RETURN1A87:  preds = [FOREACH1A80]
    return
## strand
  strand particle (tensor[3] pos01A88#2, real hh01A89#1) in 3D
    state:
      output tensor[3] pos;
      output tensor[3] _pos;
      real hh;
      tensor[3] step;
      bool found;
      int nfs;
      int test;
      int testp;
      int steps;
    state init
      ENTRY1A93:  preds = []
        tensor[3] step1A94#1 = λ()<Z_{i0}>_{3} ();
        bool found1A96#1 = false;
        int nfs1A98#3 = 0;
        int test1A9A#1 = 1;
        self.pos = pos01A88;
        self._pos = pos01A88;
        self.hh = hh01A89;
        self.step = step1A94;
        self.found = found1A96;
        self.nfs = nfs1A98;
        self.test = test1A9A;
        self.testp = nfs1A98;
        self.steps = nfs1A98;
        return
    end state init
    method update
        ENTRY1AA6:  preds = []
          real rad1AA7#14 = globals.rad1A5D;
          real eps1AA9#1 = globals.eps1A5E;
          real fBias1AAB#3 = globals.fBias1A60;
          real fStren1AAD#3 = globals.fStren1A61;
          tensor[3] pos1AAF#21 = self.pos;
          real hh1AB1#9 = self.hh;
          bool found1AB3#3 = self.found;
          int nfs1AB5#3 = self.nfs;
          int testp1AB7#2 = self.testp;
          int steps1AB9#1 = self.steps;
          int _t1ABB#4 = 1;
          int steps1ABD#4 = IAdd(steps1AB9,_t1ABB);
          real _t1ABF#13 = 0.e0;
          tensor[3] _t1AC1#6 = <tensor[3]>[_t1ABF,_t1ABF,_t1ABF];
          tensor[3] mid1AC3#3 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (pos1AAF,_t1AC1);
          real _t1AC5#1 = TensorIndex<tensor[3],[0]>(mid1AC3);
          real _t1AC7#1 = λ(T0[])<Abs(T0)> (_t1AC5);
          real _t1AC9#9 = 0.1e0;
          bool _t1ACB#1 = GT<real>(_t1AC7,_t1AC9);
          if _t1ACB then goto ASSIGN1ACF else goto ASSIGN1EAA
        ASSIGN1ACF:  preds = [COND1ACD]
          real _t1ACE#1 = TensorIndex<tensor[3],[1]>(mid1AC3);
          real _t1AD0#1 = λ(T0[])<Abs(T0)> (_t1ACE);
          bool _t1AD2#1 = GT<real>(_t1AD0,_t1AC9);
          if _t1AD2 then goto ASSIGN1AD6 else goto ASSIGN1EA9
        ASSIGN1AD6:  preds = [COND1AD4]
          real _t1AD5#1 = TensorIndex<tensor[3],[2]>(mid1AC3);
          real _t1AD7#1 = λ(T0[])<Abs(T0)> (_t1AD5);
          bool _t1AD9#1 = GT<real>(_t1AD7,_t1AC9);
          goto JOIN1ADD
        JOIN1ADD:  preds = [ASSIGN1ADA,ASSIGN1EA9]
          bool _t1ADB#1 = phi(_t1AD9,_t1ADC)
          goto JOIN1AE0
        JOIN1AE0:  preds = [JOIN1ADD,ASSIGN1EAA]
          bool _t1ADE#1 = phi(_t1ADB,_t1ADF)
          tensor[3] op1_e3_l_21AE2#2 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (pos1AAF,_t1AC1);
          real op1_e3_l_41AE3#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_21AE2,op1_e3_l_21AE2);
          real _t1AE1#2 = λ(T0[])<Sqrt(T0)> (op1_e3_l_41AE3);
          real _t1AE7#3 = 0.5e1;
          bool _t1AE9#1 = LT<real>(_t1AE1,_t1AE7);
          if _t1AE9 then goto ASSIGN1AED else goto ASSIGN1EA8
        ASSIGN1AED:  preds = [COND1AEB]
          real _t1AEC#1 = 0.2e1;
          bool _t1AEE#1 = GT<real>(_t1AE1,_t1AEC);
          if _t1AEE then goto JOIN1AF3 else goto ASSIGN1EA7
        JOIN1AF3:  preds = [COND1AF0,ASSIGN1EA7]
          bool _t1AF1#1 = phi(_t1ADE,_t1AF2)
          goto JOIN1AF6
        JOIN1AF6:  preds = [JOIN1AF3,ASSIGN1EA8]
          bool _t1AF4#1 = phi(_t1AF1,_t1AF5)
          if _t1AF4 then goto ASSIGN1AF9 else goto ASSIGN1EA6
        ASSIGN1AF9:  preds = [COND1AF7]
          real _t1AF8#6 = TensorIndex<tensor[3],[0]>(pos1AAF);
          bool _t1AFA#1 = EQ<real>(_t1AF8,_t1AF8);
          bool _t1AFC#1 = BNot(_t1AFA);
          if _t1AFC then goto ASSIGN1B00 else goto ASSIGN1E97
        ASSIGN1B00:  preds = [COND1AFE]
          bool _t1AFF#1 = true;
          goto JOIN1B03
        JOIN1B03:  preds = [ASSIGN1B00,JOIN1EA0]
          bool _t1B01#1 = phi(_t1AFF,_t1B02)
          bool _t1B04#1 = BNot(_t1B01);
          if _t1B04 then goto ASSIGN1B08 else goto ASSIGN1E95
        ASSIGN1B08:  preds = [COND1B06]
          real y1B07#6 = TensorIndex<tensor[3],[1]>(pos1AAF);
          real z1B09#4 = TensorIndex<tensor[3],[2]>(pos1AAF);
          int _t1B0B#1 = 2;
          real _t1B0D#2 = λ(T0[])<(T0)^2> (y1B07);
          real op1_e3_l_21B10#1 = λ(T0[])<(T0)^2> (y1B07);
          real _t1B0F#1 = λ(T0[],T1[])<(T0 * T1)> (z1B09,op1_e3_l_21B10);
          real _t1B13#4 = 0.2e1;
          real _t1B15#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1B13,_t1AF8,y1B07);
          real _t1B17#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t1B13,_t1AF8,y1B07,z1B09);
          real op1_e3_l_21B1A#1 = λ(T0[])<(T0)^2> (y1B07);
          real _t1B19#1 = λ(T0[],T1[])<(T0 * T1)> (_t1AF8,op1_e3_l_21B1A);
          tensor[3] g1B1D#1 = <tensor[3]>[_t1B0F,_t1B17,_t1B19];
          real _t1B1F#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1B13,y1B07,z1B09);
          tensor[3] _t1B21#1 = <tensor[3]>[_t1ABF,_t1B1F,_t1B0D];
          real _t1B23#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1B13,_t1AF8,z1B09);
          tensor[3] _t1B25#1 = <tensor[3]>[_t1B1F,_t1B23,_t1B15];
          tensor[3] _t1B27#1 = <tensor[3]>[_t1B0D,_t1B15,_t1ABF];
          tensor[3,3] hess1B29#1 = <tensor[3,3]>[_t1B21,_t1B25,_t1B27];
          (real[3] _t1B2B#1,tensor[3][3] evecs1B2C#0) = EigenVecs3x3(hess1B29);
          real _t1B2E#1 = Subscript<real[3]>(_t1B2B,_t1B0B);
          real op1_e3_l_31B31#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (g1B1D);
          real op1_e3_l_41B32#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_31B31);
          real op1_e3_l_51B33#1 = λ(T0[])<Neg(T0)> (_t1B2E);
          real op1_e3_l_61B34#1 = λ(T0[],T1[])<(T0 + T1)> (fBias1AAB,op1_e3_l_41B32);
          real str1B30#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_51B33,op1_e3_l_61B34);
          bool _t1B3A#1 = GTE<real>(str1B30,fStren1AAD);
          goto JOIN1B3E
        JOIN1B3E:  preds = [ASSIGN1B3B,ASSIGN1E95]
          bool _t1B3C#1 = phi(_t1B3A,_t1B3D)
          goto JOIN1B41
        JOIN1B41:  preds = [JOIN1B3E,ASSIGN1EA6]
          bool _t1B3F#1 = phi(_t1B3C,_t1B40)
          bool _t1B42#1 = BNot(_t1B3F);
          if _t1B42 then goto DIE1B45 else goto JOIN1B46
        DIE1B45:  preds = [COND1B44]
          die
          goto JOIN1B46
        JOIN1B46:  preds = [*DIE1B45,COND1B44]
          bool _t1B47#1 = BNot(found1AB3);
          if _t1B47 then goto ASSIGN1BAB else goto ASSIGN1BF9
        ASSIGN1BAB:  preds = [COND1B49]
          tensor[3] step1BAA#3 = fStep1B4A (pos1AAF);
          tensor[3] pos1BAC#4 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos1AAF,step1BAA);
          real _t1BAE#2 = TensorIndex<tensor[3],[0]>(pos1BAC);
          bool _t1BB0#1 = EQ<real>(_t1BAE,_t1BAE);
          bool _t1BB2#1 = BNot(_t1BB0);
          if _t1BB2 then goto ASSIGN1BB6 else goto ASSIGN1BE9
        ASSIGN1BB6:  preds = [COND1BB4]
          bool _t1BB5#1 = true;
          goto JOIN1BB9
        JOIN1BB9:  preds = [ASSIGN1BB6,JOIN1BF2]
          bool _t1BB7#1 = phi(_t1BB5,_t1BB8)
          if _t1BB7 then goto DIE1BBB else goto JOIN1BBC
        DIE1BBB:  preds = [COND1BBA]
          die
          goto JOIN1BBC
        JOIN1BBC:  preds = [*DIE1BBB,COND1BBA]
          real op1_e3_l_21BBE#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (step1BAA);
          real op1_e3_l_31BBF#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_21BBE);
          real _t1BBD#1 = λ(T0[],T1[])<(T1) / ( T0)> (rad1AA7,op1_e3_l_31BBF);
          bool _t1BC3#1 = GT<real>(_t1BBD,eps1AA9);
          if _t1BC3 then goto ASSIGN1BC7 else goto ASSIGN1BE7
        ASSIGN1BC7:  preds = [COND1BC5]
          int nfs1BC6#2 = IAdd(nfs1AB5,_t1ABB);
          int _t1BC8#1 = 10;
          bool _t1BCA#1 = GT<int>(nfs1BC6,_t1BC8);
          if _t1BCA then goto DIE1BCD else goto JOIN1BCE
        DIE1BCD:  preds = [COND1BCC]
          die
          goto JOIN1BCE
        JOIN1BCE:  preds = [*DIE1BCD,COND1BCC]
          goto JOIN1BD3
        JOIN1BD3:  preds = [JOIN1BCE,ASSIGN1BE7]
          int testp1BCF#1 = phi(testp1AB7,_t1ABB)
          int nfs1BD0#1 = phi(nfs1BC6,nfs1AB5)
          bool found1BD1#1 = phi(found1AB3,found1BD2)
          goto JOIN1BDD
        JOIN1BDD:  preds = [JOIN1BD3,JOIN1E48]
          int testp1BD4#1 = phi(testp1BCF,testp1AB7)
          int nfs1BD5#1 = phi(nfs1BD0,nfs1AB5)
          bool found1BD6#1 = phi(found1BD1,found1AB3)
          tensor[3] step1BD7#1 = phi(step1BAA,up1BD8)
          real hh1BD9#1 = phi(hh1AB1,hh1BDA)
          tensor[3] pos1BDB#2 = phi(pos1BAC,pos1BDC)
          self.pos = pos1BDB;
          self._pos = pos1BDB;
          self.hh = hh1BD9;
          self.step = step1BD7;
          self.found = found1BD6;
          self.nfs = nfs1BD5;
          self.testp = testp1BD4;
          self.steps = steps1ABD;
          active
        ASSIGN1BE7:  preds = [COND1BC5]
          bool found1BD2#1 = true;
          goto JOIN1BD3
        ASSIGN1BE9:  preds = [COND1BB4]
          real _t1BE8#2 = TensorIndex<tensor[3],[1]>(pos1BAC);
          bool _t1BEA#1 = EQ<real>(_t1BE8,_t1BE8);
          bool _t1BEC#1 = BNot(_t1BEA);
          if _t1BEC then goto ASSIGN1BF0 else goto ASSIGN1BF4
        ASSIGN1BF0:  preds = [COND1BEE]
          bool _t1BEF#1 = true;
          goto JOIN1BF2
        JOIN1BF2:  preds = [ASSIGN1BF0,ASSIGN1BF7]
          bool _t1BB8#1 = phi(_t1BEF,_t1BF1)
          goto JOIN1BB9
        ASSIGN1BF4:  preds = [COND1BEE]
          real _t1BF3#2 = TensorIndex<tensor[3],[2]>(pos1BAC);
          bool _t1BF5#1 = EQ<real>(_t1BF3,_t1BF3);
          bool _t1BF1#1 = BNot(_t1BF5);
          goto JOIN1BF2
        ASSIGN1BF9:  preds = [COND1B49]
          tensor[3] _t1BF8#11 = fStep1B4A (pos1AAF);
          tensor[3] pos1BFA#11 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos1AAF,_t1BF8);
          real _t1BFC#2 = TensorIndex<tensor[3],[0]>(pos1BFA);
          bool _t1BFE#1 = EQ<real>(_t1BFC,_t1BFC);
          bool _t1C00#1 = BNot(_t1BFE);
          if _t1C00 then goto ASSIGN1C04 else goto ASSIGN1E86
        ASSIGN1C04:  preds = [COND1C02]
          bool _t1C03#1 = true;
          goto JOIN1C07
        JOIN1C07:  preds = [ASSIGN1C04,JOIN1E8F]
          bool _t1C05#1 = phi(_t1C03,_t1C06)
          if _t1C05 then goto DIE1C09 else goto JOIN1C0A
        DIE1C09:  preds = [COND1C08]
          die
          goto JOIN1C0A
        JOIN1C0A:  preds = [*DIE1C09,COND1C08]
          tensor[3] step1C0B#4 = λ()<Z_{i0}>_{3} ();
          int nn1C0D#2 = 0;
          particle[] _t1C0F#1 = SphereQuery<3,particle>(pos1BFA,rad1AA7);
        FOREACH1C12:  preds = [ASSIGN1C10,NEXT1C46]
          foreach (P1C11 in _t1C0F) on exit goto ASSIGN1C48
            int nn1C44#3 = phi(nn1C0D,nn1C43)
            tensor[3] force1C2D#6 = phi(step1C0B,force1C2C)
            real oldE1C18#2 = phi(_t1ABF,oldE1C17)
          tensor[3] _t1C13#2 = P1C11.pos;
          real _t1C15#3 = 0.1e1;
          tensor[3] op1_e3_l_61C19#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos1AAF,_t1BF8);
          tensor[3] op1_e3_l_81C1A#2 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (_t1C13,op1_e3_l_61C19);
          real op1_e3_l_101C1B#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_81C1A,op1_e3_l_81C1A);
          real op1_e3_l_111C1C#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_101C1B);
          real op1_e3_l_121C1D#1 = λ(T0[],T1[])<(T1) / ( T0)> (rad1AA7,op1_e3_l_111C1C);
          real op1_e3_l_131C1E#1 = λ(T0[],T1[])<(T0) - (T1)> (_t1C15,op1_e3_l_121C1D);
          real op1_e3_l_141C1F#1 = λ(T0[])<(T0)^4> (op1_e3_l_131C1E);
          real oldE1C17#1 = λ(T0[],T1[])<(T0 + T1)> (oldE1C18,op1_e3_l_141C1F);
          int _t1C28#1 = -4;
          real _t1C2A#1 = IntToReal(_t1C28);
          tensor[3] op1_e3_l_151C2E#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos1AAF,_t1BF8);
          tensor[3] op1_e3_l_171C2F#3 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (_t1C13,op1_e3_l_151C2E);
          real op1_e3_l_191C30#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_171C2F,op1_e3_l_171C2F);
          real op1_e3_l_201C31#2 = λ(T0[])<Sqrt(T0)> (op1_e3_l_191C30);
          real op1_e3_l_211C32#1 = λ(T0[],T1[])<(T1) / ( T0)> (rad1AA7,op1_e3_l_201C31);
          real op1_e3_l_221C33#1 = λ(T0[],T1[])<(T0) - (T1)> (_t1C15,op1_e3_l_211C32);
          real op1_e3_l_241C34#1 = λ(T0[])<(T0)^3> (op1_e3_l_221C33);
          real op1_e3_l_251C35#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t1C15,rad1AA7);
          tensor[3] op1_e3_l_321C36#1 = λ(T0[],T1[],T2[],T3[3])<(T0 * T1 * T2 * T3_{i0})>_{3} (_t1C2A,op1_e3_l_241C34,op1_e3_l_251C35,op1_e3_l_171C2F);
          tensor[3] op1_e3_l_341C37#1 = λ(T0[3],T1[])<(T0_{i0}) / ( T1)>_{3} (op1_e3_l_321C36,op1_e3_l_201C31);
          tensor[3] force1C2C#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (force1C2D,op1_e3_l_341C37);
          int nn1C43#1 = IAdd(nn1C44,_t1ABB);
          goto FOREACH1C12
        ASSIGN1C48:  preds = [FOREACH1C12]
          bool _t1C47#1 = EQ<int>(nn1C0D,nn1C44);
          if _t1C47 then goto ASSIGN1C4B else goto JOIN1CD9
        ASSIGN1C4B:  preds = [COND1C49]
          real _t1C4A#1 = 0.5e0;
          real _t1C4C#1 = λ(T0[],T1[])<(T0 * T1)> (_t1C4A,rad1AA7);
          tensor[3] _t1C4E#3 = <tensor[3]>[_t1C4C,_t1ABF,_t1ABF];
          tensor[3] npos1C50#6 = λ(T0[3],T1[3],T2[3])<(T0_{i0} + T1_{i0} + T2_{i0})>_{3} (pos1AAF,_t1BF8,_t1C4E);
          tensor[3] op1_e3_l_41C53#1 = λ(T0[3],T1[3],T2[3])<(T0_{i0} + T1_{i0} + T2_{i0})>_{3} (pos1AAF,_t1BF8,_t1C4E);
          tensor[3] mid1C52#3 = λ(T0[3],T1[3])<(T1_{i0}) - (T0_{i0})>_{3} (_t1AC1,op1_e3_l_41C53);
          real _t1C56#1 = TensorIndex<tensor[3],[0]>(mid1C52);
          real _t1C58#1 = λ(T0[])<Abs(T0)> (_t1C56);
          bool _t1C5A#1 = GT<real>(_t1C58,_t1AC9);
          if _t1C5A then goto ASSIGN1C5E else goto ASSIGN1E84
        ASSIGN1C5E:  preds = [COND1C5C]
          real _t1C5D#1 = TensorIndex<tensor[3],[1]>(mid1C52);
          real _t1C5F#1 = λ(T0[])<Abs(T0)> (_t1C5D);
          bool _t1C61#1 = GT<real>(_t1C5F,_t1AC9);
          if _t1C61 then goto ASSIGN1C65 else goto ASSIGN1E83
        ASSIGN1C65:  preds = [COND1C63]
          real _t1C64#1 = TensorIndex<tensor[3],[2]>(mid1C52);
          real _t1C66#1 = λ(T0[])<Abs(T0)> (_t1C64);
          bool _t1C68#1 = GT<real>(_t1C66,_t1AC9);
          goto JOIN1C6C
        JOIN1C6C:  preds = [ASSIGN1C69,ASSIGN1E83]
          bool _t1C6A#1 = phi(_t1C68,_t1C6B)
          goto JOIN1C6F
        JOIN1C6F:  preds = [JOIN1C6C,ASSIGN1E84]
          bool _t1C6D#1 = phi(_t1C6A,_t1C6E)
          tensor[3] op1_e3_l_41C71#1 = λ(T0[3],T1[3],T2[3])<(T0_{i0} + T1_{i0} + T2_{i0})>_{3} (pos1AAF,_t1BF8,_t1C4E);
          tensor[3] op1_e3_l_61C72#2 = λ(T0[3],T1[3])<(T1_{i0}) - (T0_{i0})>_{3} (_t1AC1,op1_e3_l_41C71);
          real op1_e3_l_81C73#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_61C72,op1_e3_l_61C72);
          real _t1C70#2 = λ(T0[])<Sqrt(T0)> (op1_e3_l_81C73);
          bool _t1C78#1 = LT<real>(_t1C70,_t1AE7);
          if _t1C78 then goto ASSIGN1C7C else goto ASSIGN1E82
        ASSIGN1C7C:  preds = [COND1C7A]
          real _t1C7B#1 = 0.2e1;
          bool _t1C7D#1 = GT<real>(_t1C70,_t1C7B);
          if _t1C7D then goto JOIN1C82 else goto ASSIGN1E81
        JOIN1C82:  preds = [COND1C7F,ASSIGN1E81]
          bool _t1C80#1 = phi(_t1C6D,_t1C81)
          goto JOIN1C85
        JOIN1C85:  preds = [JOIN1C82,ASSIGN1E82]
          bool _t1C83#1 = phi(_t1C80,_t1C84)
          if _t1C83 then goto ASSIGN1C88 else goto ASSIGN1E80
        ASSIGN1C88:  preds = [COND1C86]
          real _t1C87#6 = TensorIndex<tensor[3],[0]>(npos1C50);
          bool _t1C89#1 = EQ<real>(_t1C87,_t1C87);
          bool _t1C8B#1 = BNot(_t1C89);
          if _t1C8B then goto ASSIGN1C8F else goto ASSIGN1E71
        ASSIGN1C8F:  preds = [COND1C8D]
          bool _t1C8E#1 = true;
          goto JOIN1C92
        JOIN1C92:  preds = [ASSIGN1C8F,JOIN1E7A]
          bool _t1C90#1 = phi(_t1C8E,_t1C91)
          bool _t1C93#1 = BNot(_t1C90);
          if _t1C93 then goto ASSIGN1C97 else goto ASSIGN1E6F
        ASSIGN1C97:  preds = [COND1C95]
          real y1C96#6 = TensorIndex<tensor[3],[1]>(npos1C50);
          real z1C98#4 = TensorIndex<tensor[3],[2]>(npos1C50);
          int _t1C9A#1 = 2;
          real _t1C9C#2 = λ(T0[])<(T0)^2> (y1C96);
          real op1_e3_l_21C9F#1 = λ(T0[])<(T0)^2> (y1C96);
          real _t1C9E#1 = λ(T0[],T1[])<(T0 * T1)> (z1C98,op1_e3_l_21C9F);
          real _t1CA2#4 = 0.2e1;
          real _t1CA4#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1CA2,_t1C87,y1C96);
          real _t1CA6#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t1CA2,_t1C87,y1C96,z1C98);
          real op1_e3_l_21CA9#1 = λ(T0[])<(T0)^2> (y1C96);
          real _t1CA8#1 = λ(T0[],T1[])<(T0 * T1)> (_t1C87,op1_e3_l_21CA9);
          tensor[3] g1CAC#1 = <tensor[3]>[_t1C9E,_t1CA6,_t1CA8];
          real _t1CAE#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1CA2,y1C96,z1C98);
          tensor[3] _t1CB0#1 = <tensor[3]>[_t1ABF,_t1CAE,_t1C9C];
          real _t1CB2#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1CA2,_t1C87,z1C98);
          tensor[3] _t1CB4#1 = <tensor[3]>[_t1CAE,_t1CB2,_t1CA4];
          tensor[3] _t1CB6#1 = <tensor[3]>[_t1C9C,_t1CA4,_t1ABF];
          tensor[3,3] hess1CB8#1 = <tensor[3,3]>[_t1CB0,_t1CB4,_t1CB6];
          (real[3] _t1CBA#1,tensor[3][3] evecs1CBB#0) = EigenVecs3x3(hess1CB8);
          real _t1CBD#1 = Subscript<real[3]>(_t1CBA,_t1C9A);
          real op1_e3_l_31CC0#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (g1CAC);
          real op1_e3_l_41CC1#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_31CC0);
          real op1_e3_l_51CC2#1 = λ(T0[])<Neg(T0)> (_t1CBD);
          real op1_e3_l_61CC3#1 = λ(T0[],T1[])<(T0 + T1)> (fBias1AAB,op1_e3_l_41CC1);
          real str1CBF#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_51CC2,op1_e3_l_61CC3);
          bool _t1CC9#1 = GTE<real>(str1CBF,fStren1AAD);
          goto JOIN1CCD
        JOIN1CCD:  preds = [ASSIGN1CCA,ASSIGN1E6F]
          bool _t1CCB#1 = phi(_t1CC9,_t1CCC)
          goto JOIN1CD0
        JOIN1CD0:  preds = [JOIN1CCD,ASSIGN1E80]
          bool _t1CCE#1 = phi(_t1CCB,_t1CCF)
          if _t1CCE then goto NEW1CD2 else goto JOIN1CD3
        NEW1CD2:  preds = [COND1CD1]
          new particle(npos1C50,hh1AB1);
          goto JOIN1CD3
        JOIN1CD3:  preds = [NEW1CD2,COND1CD1]
          self.pos = pos1BFA;
          self._pos = pos1BFA;
          self.step = step1C0B;
          self.steps = steps1ABD;
          active
          goto JOIN1CD9
        JOIN1CD9:  preds = [*ACTIVE1CD8,COND1C49]
          tensor[3,3] _t1D12#5 = fPerp1CDA (pos1BFA);
          tensor[3] op1_e3_l_31D15#1 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (_t1D12,force1C2D);
          tensor[3] es1D14#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (hh1AB1,op1_e3_l_31D15);
          tensor[3] op1_e3_l_31D19#2 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (_t1D12,force1C2D);
          real op1_e3_l_51D1A#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_31D19,op1_e3_l_31D19);
          real op1_e3_l_61D1B#1 = λ(T0[],T1[])<(T0 * T0 * T1)> (hh1AB1,op1_e3_l_51D1A);
          real _t1D18#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_61D1B);
          bool _t1D20#1 = GT<real>(_t1D18,rad1AA7);
          if _t1D20 then goto ASSIGN1D29 else goto JOIN1D3D
        ASSIGN1D29:  preds = [COND1D22]
          tensor[3] op1_e3_l_51D24#2 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (_t1D12,force1C2D);
          real op1_e3_l_71D25#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_51D24,op1_e3_l_51D24);
          real op1_e3_l_81D26#1 = λ(T0[],T1[])<(T0 * T0 * T1)> (hh1AB1,op1_e3_l_71D25);
          real op1_e3_l_91D27#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_81D26);
          real op1_e3_l_101D28#1 = λ(T0[],T1[])<(T0) / ( T1)> (rad1AA7,op1_e3_l_91D27);
          real hh1D23#1 = λ(T0[],T1[])<(T0 * T1)> (hh1AB1,op1_e3_l_101D28);
          tensor[3] op1_e3_l_71D30#3 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (_t1D12,force1C2D);
          real op1_e3_l_91D31#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_71D30,op1_e3_l_71D30);
          real op1_e3_l_101D32#1 = λ(T0[],T1[])<(T0 * T0 * T1)> (hh1AB1,op1_e3_l_91D31);
          real op1_e3_l_111D33#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_101D32);
          real op1_e3_l_121D34#1 = λ(T0[],T1[])<(T0) / ( T1)> (rad1AA7,op1_e3_l_111D33);
          tensor[3] es1D2F#1 = λ(T0[],T1[],T2[3])<(T0 * T1 * T2_{i0})>_{3} (hh1AB1,op1_e3_l_121D34,op1_e3_l_71D30);
          goto JOIN1D3D
        JOIN1D3D:  preds = [ASSIGN1D3A,COND1D22]
          tensor[3] es1D3B#12 = phi(es1D2F,es1D14)
          real hh1D3C#2 = phi(hh1D23,hh1AB1)
          tensor[3] samplePos1D3E#1 = λ(T0[3],T1[3],T2[3])<(T0_{i0} + T1_{i0} + T2_{i0})>_{3} (pos1AAF,_t1BF8,es1D3B);
          tensor[3] fs1D40#5 = fStep1B4A (samplePos1D3E);
          real op1_e3_l_21D43#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (fs1D40);
          real op1_e3_l_31D44#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (es1D3B);
          real op1_e3_l_41D45#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_21D43);
          real op1_e3_l_51D46#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_31D44);
          real _t1D42#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_41D45,op1_e3_l_51D46);
          real _t1D4C#7 = 0.5e0;
          bool _t1D4E#1 = GT<real>(_t1D42,_t1D4C);
          if _t1D4E then goto ASSIGN1D52 else goto JOIN1D5A
        ASSIGN1D52:  preds = [COND1D50]
          real hh1D51#1 = λ(T0[],T1[])<(T0 * T1)> (hh1D3C,_t1D4C);
          self.pos = pos1BFA;
          self._pos = pos1BFA;
          self.hh = hh1D51;
          self.step = step1C0B;
          self.steps = steps1ABD;
          active
          goto JOIN1D5A
        JOIN1D5A:  preds = [*ACTIVE1D58,COND1D50]
          real hh1D59#2 = phi(hh1D3C)
          tensor[3] up1BD8#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (fs1D40,es1D3B);
          tensor[3] pos1D5C#2 = λ(T0[3],T1[3],T2[3],T3[3])<(T0_{i0} + T1_{i0} + T2_{i0} + T3_{i0})>_{3} (pos1AAF,_t1BF8,fs1D40,es1D3B);
          particle[] _t1D5E#1 = SphereQuery<3,particle>(pos1D5C,rad1AA7);
        FOREACH1D61:  preds = [ASSIGN1D5F,NEXT1D77]
          foreach (P1D60 in _t1D5E) on exit goto ASSIGN1D79
            real accum1D67#2 = phi(_t1ABF,accum1D66)
          tensor[3] _t1D62#1 = P1D60.pos;
          real _t1D64#1 = 0.1e1;
          tensor[3] op1_e3_l_81D68#1 = λ(T0[3],T1[3],T2[3],T3[3])<(T0_{i0} + T1_{i0} + T2_{i0} + T3_{i0})>_{3} (pos1AAF,_t1BF8,fs1D40,es1D3B);
          tensor[3] op1_e3_l_101D69#2 = λ(T0[3],T1[3])<(T1_{i0}) - (T0_{i0})>_{3} (_t1D62,op1_e3_l_81D68);
          real op1_e3_l_121D6A#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_101D69,op1_e3_l_101D69);
          real op1_e3_l_131D6B#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_121D6A);
          real op1_e3_l_141D6C#1 = λ(T0[],T1[])<(T1) / ( T0)> (rad1AA7,op1_e3_l_131D6B);
          real op1_e3_l_151D6D#1 = λ(T0[],T1[])<(T0) - (T1)> (_t1D64,op1_e3_l_141D6C);
          real op1_e3_l_161D6E#1 = λ(T0[])<(T0)^4> (op1_e3_l_151D6D);
          real accum1D66#1 = λ(T0[],T1[])<(T0 + T1)> (accum1D67,op1_e3_l_161D6E);
          goto FOREACH1D61
        ASSIGN1D79:  preds = [FOREACH1D61]
          real _t1D78#1 = λ(T0[],T1[])<(T0) - (T1)> (accum1D67,oldE1C18);
          tensor[3] op1_e3_l_91D7B#1 = λ(T0[3],T1[3],T2[3],T3[3])<(T0_{i0} + T1_{i0} + T2_{i0} + T3_{i0})>_{3} (pos1AAF,_t1BF8,fs1D40,es1D3B);
          tensor[3] op1_e3_l_101D7C#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos1AAF,_t1BF8);
          tensor[3] op1_e3_l_111D7D#1 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (_t1D12,force1C2D);
          tensor[3] op1_e3_l_121D7E#1 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (op1_e3_l_91D7B,op1_e3_l_101D7C);
          tensor[3] op1_e3_l_131D7F#1 = λ(T0[3])<Neg(T0_{i0})>_{3} (op1_e3_l_111D7D);
          real op1_e3_l_141D80#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_121D7E,op1_e3_l_131D7F);
          real _t1D7A#1 = λ(T0[],T1[])<(T0 * T1)> (_t1D4C,op1_e3_l_141D80);
          bool _t1D88#1 = GT<real>(_t1D78,_t1D7A);
          if _t1D88 then goto ASSIGN1D8C else goto JOIN1D94
        ASSIGN1D8C:  preds = [COND1D8A]
          real hh1D8B#1 = λ(T0[],T1[])<(T0 * T1)> (hh1D59,_t1D4C);
          self.pos = pos1BFA;
          self._pos = pos1BFA;
          self.hh = hh1D8B;
          self.step = step1C0B;
          self.steps = steps1ABD;
          active
          goto JOIN1D94
        JOIN1D94:  preds = [*ACTIVE1D92,COND1D8A]
          real hh1D93#1 = phi(hh1D59)
          tensor[3] pos1BDC#7 = phi(pos1D5C)
          real _t1D95#1 = 0.11e1;
          real hh1BDA#2 = λ(T0[],T1[])<(T0 * T1)> (hh1D93,_t1D95);
          real _t1D98#2 = TensorIndex<tensor[3],[0]>(pos1BDC);
          bool _t1D9A#1 = EQ<real>(_t1D98,_t1D98);
          bool _t1D9C#1 = BNot(_t1D9A);
          if _t1D9C then goto ASSIGN1DA0 else goto ASSIGN1E60
        ASSIGN1DA0:  preds = [COND1D9E]
          bool _t1D9F#1 = true;
          goto JOIN1DA3
        JOIN1DA3:  preds = [ASSIGN1DA0,JOIN1E69]
          bool _t1DA1#1 = phi(_t1D9F,_t1DA2)
          if _t1DA1 then goto DIE1DA5 else goto JOIN1DA6
        DIE1DA5:  preds = [COND1DA4]
          die
          goto JOIN1DA6
        JOIN1DA6:  preds = [*DIE1DA5,COND1DA4]
          int _t1DA7#1 = 5;
          bool _t1DA9#1 = LT<int>(nn1C44,_t1DA7);
          if _t1DA9 then goto ASSIGN1DB1 else goto JOIN1E48
        ASSIGN1DB1:  preds = [COND1DAB]
          real op1_e3_l_51DAD#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (es1D3B);
          real op1_e3_l_61DAE#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_51DAD);
          real op1_e3_l_71DAF#1 = λ(T0[])<(1) / ( T0)> (op1_e3_l_61DAE);
          tensor[3] op1_e3_l_81DB0#1 = λ(T0[],T1[],T2[3],T3[])<(T0 * T1 * T2_{i0} * T3)>_{3} (_t1D4C,rad1AA7,es1D3B,op1_e3_l_71DAF);
          tensor[3] npos1DAC#6 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos1BDC,op1_e3_l_81DB0);
          real op1_e3_l_61DB7#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (es1D3B);
          real op1_e3_l_71DB8#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_61DB7);
          real op1_e3_l_81DB9#1 = λ(T0[])<(1) / ( T0)> (op1_e3_l_71DB8);
          tensor[3] op1_e3_l_91DBA#1 = λ(T0[],T1[],T2[3],T3[])<(T0 * T1 * T2_{i0} * T3)>_{3} (_t1D4C,rad1AA7,es1D3B,op1_e3_l_81DB9);
          tensor[3] op1_e3_l_101DBB#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos1BDC,op1_e3_l_91DBA);
          tensor[3] mid1DB6#3 = λ(T0[3],T1[3])<(T1_{i0}) - (T0_{i0})>_{3} (_t1AC1,op1_e3_l_101DBB);
          real _t1DC2#1 = TensorIndex<tensor[3],[0]>(mid1DB6);
          real _t1DC4#1 = λ(T0[])<Abs(T0)> (_t1DC2);
          bool _t1DC6#1 = GT<real>(_t1DC4,_t1AC9);
          if _t1DC6 then goto ASSIGN1DCA else goto ASSIGN1E5E
        ASSIGN1DCA:  preds = [COND1DC8]
          real _t1DC9#1 = TensorIndex<tensor[3],[1]>(mid1DB6);
          real _t1DCB#1 = λ(T0[])<Abs(T0)> (_t1DC9);
          bool _t1DCD#1 = GT<real>(_t1DCB,_t1AC9);
          if _t1DCD then goto ASSIGN1DD1 else goto ASSIGN1E5D
        ASSIGN1DD1:  preds = [COND1DCF]
          real _t1DD0#1 = TensorIndex<tensor[3],[2]>(mid1DB6);
          real _t1DD2#1 = λ(T0[])<Abs(T0)> (_t1DD0);
          bool _t1DD4#1 = GT<real>(_t1DD2,_t1AC9);
          goto JOIN1DD8
        JOIN1DD8:  preds = [ASSIGN1DD5,ASSIGN1E5D]
          bool _t1DD6#1 = phi(_t1DD4,_t1DD7)
          goto JOIN1DDB
        JOIN1DDB:  preds = [JOIN1DD8,ASSIGN1E5E]
          bool _t1DD9#1 = phi(_t1DD6,_t1DDA)
          real op1_e3_l_61DDD#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (es1D3B);
          real op1_e3_l_71DDE#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_61DDD);
          real op1_e3_l_81DDF#1 = λ(T0[])<(1) / ( T0)> (op1_e3_l_71DDE);
          tensor[3] op1_e3_l_91DE0#1 = λ(T0[],T1[],T2[3],T3[])<(T0 * T1 * T2_{i0} * T3)>_{3} (_t1D4C,rad1AA7,es1D3B,op1_e3_l_81DDF);
          tensor[3] op1_e3_l_101DE1#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos1BDC,op1_e3_l_91DE0);
          tensor[3] op1_e3_l_161DE2#2 = λ(T0[3],T1[3])<(T1_{i0}) - (T0_{i0})>_{3} (_t1AC1,op1_e3_l_101DE1);
          real op1_e3_l_181DE3#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_161DE2,op1_e3_l_161DE2);
          real _t1DDC#2 = λ(T0[])<Sqrt(T0)> (op1_e3_l_181DE3);
          bool _t1DEC#1 = LT<real>(_t1DDC,_t1AE7);
          if _t1DEC then goto ASSIGN1DF0 else goto ASSIGN1E5C
        ASSIGN1DF0:  preds = [COND1DEE]
          real _t1DEF#1 = 0.2e1;
          bool _t1DF1#1 = GT<real>(_t1DDC,_t1DEF);
          if _t1DF1 then goto JOIN1DF6 else goto ASSIGN1E5B
        JOIN1DF6:  preds = [COND1DF3,ASSIGN1E5B]
          bool _t1DF4#1 = phi(_t1DD9,_t1DF5)
          goto JOIN1DF9
        JOIN1DF9:  preds = [JOIN1DF6,ASSIGN1E5C]
          bool _t1DF7#1 = phi(_t1DF4,_t1DF8)
          if _t1DF7 then goto ASSIGN1DFC else goto ASSIGN1E5A
        ASSIGN1DFC:  preds = [COND1DFA]
          real _t1DFB#6 = TensorIndex<tensor[3],[0]>(npos1DAC);
          bool _t1DFD#1 = EQ<real>(_t1DFB,_t1DFB);
          bool _t1DFF#1 = BNot(_t1DFD);
          if _t1DFF then goto ASSIGN1E03 else goto ASSIGN1E4B
        ASSIGN1E03:  preds = [COND1E01]
          bool _t1E02#1 = true;
          goto JOIN1E06
        JOIN1E06:  preds = [ASSIGN1E03,JOIN1E54]
          bool _t1E04#1 = phi(_t1E02,_t1E05)
          bool _t1E07#1 = BNot(_t1E04);
          if _t1E07 then goto ASSIGN1E0B else goto ASSIGN1E49
        ASSIGN1E0B:  preds = [COND1E09]
          real y1E0A#6 = TensorIndex<tensor[3],[1]>(npos1DAC);
          real z1E0C#4 = TensorIndex<tensor[3],[2]>(npos1DAC);
          int _t1E0E#1 = 2;
          real _t1E10#2 = λ(T0[])<(T0)^2> (y1E0A);
          real op1_e3_l_21E13#1 = λ(T0[])<(T0)^2> (y1E0A);
          real _t1E12#1 = λ(T0[],T1[])<(T0 * T1)> (z1E0C,op1_e3_l_21E13);
          real _t1E16#4 = 0.2e1;
          real _t1E18#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1E16,_t1DFB,y1E0A);
          real _t1E1A#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t1E16,_t1DFB,y1E0A,z1E0C);
          real op1_e3_l_21E1D#1 = λ(T0[])<(T0)^2> (y1E0A);
          real _t1E1C#1 = λ(T0[],T1[])<(T0 * T1)> (_t1DFB,op1_e3_l_21E1D);
          tensor[3] g1E20#1 = <tensor[3]>[_t1E12,_t1E1A,_t1E1C];
          real _t1E22#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1E16,y1E0A,z1E0C);
          tensor[3] _t1E24#1 = <tensor[3]>[_t1ABF,_t1E22,_t1E10];
          real _t1E26#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1E16,_t1DFB,z1E0C);
          tensor[3] _t1E28#1 = <tensor[3]>[_t1E22,_t1E26,_t1E18];
          tensor[3] _t1E2A#1 = <tensor[3]>[_t1E10,_t1E18,_t1ABF];
          tensor[3,3] hess1E2C#1 = <tensor[3,3]>[_t1E24,_t1E28,_t1E2A];
          (real[3] _t1E2E#1,tensor[3][3] evecs1E2F#0) = EigenVecs3x3(hess1E2C);
          real _t1E31#1 = Subscript<real[3]>(_t1E2E,_t1E0E);
          real op1_e3_l_31E34#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (g1E20);
          real op1_e3_l_41E35#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_31E34);
          real op1_e3_l_51E36#1 = λ(T0[])<Neg(T0)> (_t1E31);
          real op1_e3_l_61E37#1 = λ(T0[],T1[])<(T0 + T1)> (fBias1AAB,op1_e3_l_41E35);
          real str1E33#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_51E36,op1_e3_l_61E37);
          bool _t1E3D#1 = GTE<real>(str1E33,fStren1AAD);
          goto JOIN1E41
        JOIN1E41:  preds = [ASSIGN1E3E,ASSIGN1E49]
          bool _t1E3F#1 = phi(_t1E3D,_t1E40)
          goto JOIN1E44
        JOIN1E44:  preds = [JOIN1E41,ASSIGN1E5A]
          bool _t1E42#1 = phi(_t1E3F,_t1E43)
          if _t1E42 then goto NEW1E46 else goto JOIN1E47
        NEW1E46:  preds = [COND1E45]
          new particle(npos1DAC,hh1BDA);
          goto JOIN1E47
        JOIN1E47:  preds = [NEW1E46,COND1E45]
          goto JOIN1E48
        JOIN1E48:  preds = [JOIN1E47,COND1DAB]
          goto JOIN1BDD
        ASSIGN1E49:  preds = [COND1E09]
          bool _t1E40#1 = false;
          goto JOIN1E41
        ASSIGN1E4B:  preds = [COND1E01]
          real _t1E4A#2 = TensorIndex<tensor[3],[1]>(npos1DAC);
          bool _t1E4C#1 = EQ<real>(_t1E4A,_t1E4A);
          bool _t1E4E#1 = BNot(_t1E4C);
          if _t1E4E then goto ASSIGN1E52 else goto ASSIGN1E56
        ASSIGN1E52:  preds = [COND1E50]
          bool _t1E51#1 = true;
          goto JOIN1E54
        JOIN1E54:  preds = [ASSIGN1E52,ASSIGN1E59]
          bool _t1E05#1 = phi(_t1E51,_t1E53)
          goto JOIN1E06
        ASSIGN1E56:  preds = [COND1E50]
          real _t1E55#2 = TensorIndex<tensor[3],[2]>(npos1DAC);
          bool _t1E57#1 = EQ<real>(_t1E55,_t1E55);
          bool _t1E53#1 = BNot(_t1E57);
          goto JOIN1E54
        ASSIGN1E5A:  preds = [COND1DFA]
          bool _t1E43#1 = false;
          goto JOIN1E44
        ASSIGN1E5B:  preds = [COND1DF3]
          bool _t1DF5#1 = false;
          goto JOIN1DF6
        ASSIGN1E5C:  preds = [COND1DEE]
          bool _t1DF8#1 = false;
          goto JOIN1DF9
        ASSIGN1E5D:  preds = [COND1DCF]
          bool _t1DD7#1 = false;
          goto JOIN1DD8
        ASSIGN1E5E:  preds = [COND1DC8]
          bool _t1DDA#1 = false;
          goto JOIN1DDB
        ASSIGN1E60:  preds = [COND1D9E]
          real _t1E5F#2 = TensorIndex<tensor[3],[1]>(pos1BDC);
          bool _t1E61#1 = EQ<real>(_t1E5F,_t1E5F);
          bool _t1E63#1 = BNot(_t1E61);
          if _t1E63 then goto ASSIGN1E67 else goto ASSIGN1E6B
        ASSIGN1E67:  preds = [COND1E65]
          bool _t1E66#1 = true;
          goto JOIN1E69
        JOIN1E69:  preds = [ASSIGN1E67,ASSIGN1E6E]
          bool _t1DA2#1 = phi(_t1E66,_t1E68)
          goto JOIN1DA3
        ASSIGN1E6B:  preds = [COND1E65]
          real _t1E6A#2 = TensorIndex<tensor[3],[2]>(pos1BDC);
          bool _t1E6C#1 = EQ<real>(_t1E6A,_t1E6A);
          bool _t1E68#1 = BNot(_t1E6C);
          goto JOIN1E69
        ASSIGN1E6F:  preds = [COND1C95]
          bool _t1CCC#1 = false;
          goto JOIN1CCD
        ASSIGN1E71:  preds = [COND1C8D]
          real _t1E70#2 = TensorIndex<tensor[3],[1]>(npos1C50);
          bool _t1E72#1 = EQ<real>(_t1E70,_t1E70);
          bool _t1E74#1 = BNot(_t1E72);
          if _t1E74 then goto ASSIGN1E78 else goto ASSIGN1E7C
        ASSIGN1E78:  preds = [COND1E76]
          bool _t1E77#1 = true;
          goto JOIN1E7A
        JOIN1E7A:  preds = [ASSIGN1E78,ASSIGN1E7F]
          bool _t1C91#1 = phi(_t1E77,_t1E79)
          goto JOIN1C92
        ASSIGN1E7C:  preds = [COND1E76]
          real _t1E7B#2 = TensorIndex<tensor[3],[2]>(npos1C50);
          bool _t1E7D#1 = EQ<real>(_t1E7B,_t1E7B);
          bool _t1E79#1 = BNot(_t1E7D);
          goto JOIN1E7A
        ASSIGN1E80:  preds = [COND1C86]
          bool _t1CCF#1 = false;
          goto JOIN1CD0
        ASSIGN1E81:  preds = [COND1C7F]
          bool _t1C81#1 = false;
          goto JOIN1C82
        ASSIGN1E82:  preds = [COND1C7A]
          bool _t1C84#1 = false;
          goto JOIN1C85
        ASSIGN1E83:  preds = [COND1C63]
          bool _t1C6B#1 = false;
          goto JOIN1C6C
        ASSIGN1E84:  preds = [COND1C5C]
          bool _t1C6E#1 = false;
          goto JOIN1C6F
        ASSIGN1E86:  preds = [COND1C02]
          real _t1E85#2 = TensorIndex<tensor[3],[1]>(pos1BFA);
          bool _t1E87#1 = EQ<real>(_t1E85,_t1E85);
          bool _t1E89#1 = BNot(_t1E87);
          if _t1E89 then goto ASSIGN1E8D else goto ASSIGN1E91
        ASSIGN1E8D:  preds = [COND1E8B]
          bool _t1E8C#1 = true;
          goto JOIN1E8F
        JOIN1E8F:  preds = [ASSIGN1E8D,ASSIGN1E94]
          bool _t1C06#1 = phi(_t1E8C,_t1E8E)
          goto JOIN1C07
        ASSIGN1E91:  preds = [COND1E8B]
          real _t1E90#2 = TensorIndex<tensor[3],[2]>(pos1BFA);
          bool _t1E92#1 = EQ<real>(_t1E90,_t1E90);
          bool _t1E8E#1 = BNot(_t1E92);
          goto JOIN1E8F
        ASSIGN1E95:  preds = [COND1B06]
          bool _t1B3D#1 = false;
          goto JOIN1B3E
        ASSIGN1E97:  preds = [COND1AFE]
          real _t1E96#2 = TensorIndex<tensor[3],[1]>(pos1AAF);
          bool _t1E98#1 = EQ<real>(_t1E96,_t1E96);
          bool _t1E9A#1 = BNot(_t1E98);
          if _t1E9A then goto ASSIGN1E9E else goto ASSIGN1EA2
        ASSIGN1E9E:  preds = [COND1E9C]
          bool _t1E9D#1 = true;
          goto JOIN1EA0
        JOIN1EA0:  preds = [ASSIGN1E9E,ASSIGN1EA5]
          bool _t1B02#1 = phi(_t1E9D,_t1E9F)
          goto JOIN1B03
        ASSIGN1EA2:  preds = [COND1E9C]
          real _t1EA1#2 = TensorIndex<tensor[3],[2]>(pos1AAF);
          bool _t1EA3#1 = EQ<real>(_t1EA1,_t1EA1);
          bool _t1E9F#1 = BNot(_t1EA3);
          goto JOIN1EA0
        ASSIGN1EA6:  preds = [COND1AF7]
          bool _t1B40#1 = false;
          goto JOIN1B41
        ASSIGN1EA7:  preds = [COND1AF0]
          bool _t1AF2#1 = false;
          goto JOIN1AF3
        ASSIGN1EA8:  preds = [COND1AEB]
          bool _t1AF5#1 = false;
          goto JOIN1AF6
        ASSIGN1EA9:  preds = [COND1AD4]
          bool _t1ADC#1 = false;
          goto JOIN1ADD
        ASSIGN1EAA:  preds = [COND1ACD]
          bool _t1ADF#1 = false;
          goto JOIN1AE0
    end update
  end particle
## initial strand creation
  COLLECTION
    ENTRY1EAB:  preds = []
      tensor[3][] ipos1EAC#1 = globals.ipos1A63;
    FOREACH1EAF:  preds = [ASSIGN1EAD,NEXT1EB3]
      foreach (x1EAE in ipos1EAC) on exit goto RETURN1EB4
      real _t1EB0#1 = 0.1e1;
      new particle(x1EAE,_t1EB0);
      goto FOREACH1EAF
    RETURN1EB4:  preds = [FOREACH1EAF]
      return
## global update
  ENTRY1EB5:  preds = []
    real rad1EB6#1 = globals.rad1A5D;
    real eps1EB8#1 = globals.eps1A5E;
    particle[] P1EBA#5 = Strands<particle,all>;
    (int res1EC2#1) = sum<int>(MAP sum1EBC (P1EBA));
    (int res1ECA#2) = max<int>(MAP max1EC4 (P1EBA));
    (int res1ED2#1) = sum<int>(MAP sum1ECC (P1EBA));
    (bool res1EDA#2) = all(MAP all1ED4 (P1EBA));
    (real res1EE6#1) = max<real>(MAP max1EDC (P1EBA));
    string _t1EE8#1 = "One run:";
    string _t1EEA#3 = " and ";
    real _t1EEC#2 = λ(T0[],T1[])<(T0) / ( T1)> (res1EE6,rad1EB6);
    bool _t1EEE#2 = LT<real>(_t1EEC,eps1EB8);
    string _t1EF0#1 = " of ";
    string _t1EF2#2 = "\n";
    Print<[string,bool,string,real,string,bool,string,int,string,int,string]>(_t1EE8,res1EDA,_t1EEA,_t1EEC,_t1EEA,_t1EEE,_t1EEA,res1ED2,_t1EF0,res1EC2,_t1EF2);
    if res1EDA then goto COND1EF6 else goto JOIN1EFC
  COND1EF6:  preds = [COND1EF5]
    if _t1EEE then goto ASSIGN1EF8 else goto JOIN1EFB
  ASSIGN1EF8:  preds = [COND1EF6]
    string _t1EF7#1 = "CONVERGED!\n";
    Print<[string]>(_t1EF7);
    StabilizeAll;
    goto JOIN1EFB
  JOIN1EFB:  preds = [MASSIGN1EFA,COND1EF6]
    goto JOIN1EFC
  JOIN1EFC:  preds = [JOIN1EFB,COND1EF5]
    int _t1EFD#1 = 2000;
    bool _t1EFF#1 = GT<int>(res1ECA,_t1EFD);
    if _t1EFF then goto MASSIGN1F02 else goto JOIN1F03
  MASSIGN1F02:  preds = [COND1F01]
    StabilizeAll;
    goto JOIN1F03
  JOIN1F03:  preds = [MASSIGN1F02,COND1F01]
    string _t1F04#1 = "Current steps:";
    Print<[string,int,string]>(_t1F04,res1ECA,_t1EF2);
    continue
#### end program ####
##### mid-ir: after value numbering ####
## properties
  GlobalInit StabilizeAll GlobalReduce StrandSets GlobalUpdate NewStrands StrandCommunication StrandsMayDie HasInputs HasGlobals ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
## globals
  input meshData1A5A (meshData) = <no-default>
  input 0space04FA_intermedateGlobal1A5B (space) = <no-default>
  input 0data04FC_intermedateGlobal1A5C (data) = <no-default>
  input rad1A5D (rad) = <default>
  input eps1A5E (eps) = <default>
  input v01A5F (v0) = <default>
  input fBias1A60 (fBias) = <default>
  input fStren1A61 (fStren) = <default>
  input zfuz1A62 (zfuz) = <default>
  input ipos1A63 (ipos) = <no-default>
## functions
  function tensor[3] fStep1B4A (tensor[3] s1B4B#3) {
    ENTRY1B4C:  preds = []
      real x1B4D#4 = TensorIndex<tensor[3],[0]>(s1B4B);
      real y1B4F#4 = TensorIndex<tensor[3],[1]>(s1B4B);
      real z1B51#4 = TensorIndex<tensor[3],[2]>(s1B4B);
      int _t1B53#2 = 2;
      real _t1B55#4 = λ(T0[])<(T0)^2> (y1B4F);
      real _t1B57#1 = λ(T0[],T1[])<(T0 * T1)> (z1B51,_t1B55);
      real _t1B5B#4 = 0.2e1;
      real _t1B5D#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1B5B,x1B4D,y1B4F);
      real _t1B5F#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t1B5B,x1B4D,y1B4F,z1B51);
      real _t1B61#1 = λ(T0[],T1[])<(T0 * T1)> (x1B4D,_t1B55);
      tensor[3] g1B65#1 = <tensor[3]>[_t1B57,_t1B5F,_t1B61];
      real _t1B67#2 = 0.e0;
      real _t1B69#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1B5B,y1B4F,z1B51);
      tensor[3] _t1B6B#1 = <tensor[3]>[_t1B67,_t1B69,_t1B55];
      real _t1B6D#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1B5B,x1B4D,z1B51);
      tensor[3] _t1B6F#1 = <tensor[3]>[_t1B69,_t1B6D,_t1B5D];
      tensor[3] _t1B71#1 = <tensor[3]>[_t1B55,_t1B5D,_t1B67];
      tensor[3,3] hess1B73#1 = <tensor[3,3]>[_t1B6B,_t1B6F,_t1B71];
      (real[3] evals1B75#1,tensor[3][3] E1B76#1) = EigenVecs3x3(hess1B73);
      real _t1B78#1 = 0.1e1;
      real _t1B7A#1 = Subscript<real[3]>(evals1B75,_t1B53);
      tensor[3] _t1B7C#2 = Subscript<tensor[3][3]>(E1B76,_t1B53);
      real op1_e3_l_51B7F#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t1B78,_t1B7A);
      real op1_e3_l_61B80#1 = λ(T0[])<Neg(T0)> (op1_e3_l_51B7F);
      real op1_e3_l_71B81#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (_t1B7C,g1B65);
      tensor[3] up1B7E#4 = λ(T0[3],T1[],T2[])<(T1 * T0_{i0} * T2)>_{3} (_t1B7C,op1_e3_l_61B80,op1_e3_l_71B81);
      real _t1B86#2 = TensorIndex<tensor[3],[0]>(up1B7E);
      bool _t1B88#1 = EQ<real>(_t1B86,_t1B86);
      bool _t1B8A#1 = BNot(_t1B88);
      if _t1B8A then goto ASSIGN1B8E else goto ASSIGN1B9B
    ASSIGN1B8E:  preds = [COND1B8C]
      bool _t1B8D#1 = true;
      goto JOIN1B91
    JOIN1B91:  preds = [ASSIGN1B8E,JOIN1BA4]
      bool _t1B8F#1 = phi(_t1B8D,_t1B90)
      if _t1B8F then goto ASSIGN1B94 else goto JOIN1B98
    ASSIGN1B94:  preds = [COND1B92]
      real _t1B93#3 = +inf;
      tensor[3] _t1B95#1 = <tensor[3]>[_t1B93,_t1B93,_t1B93];
      return _t1B95
      goto JOIN1B98
    JOIN1B98:  preds = [*RETURN(_t1B95)1B97,COND1B92]
      return up1B7E
    ASSIGN1B9B:  preds = [COND1B8C]
      real _t1B9A#2 = TensorIndex<tensor[3],[1]>(up1B7E);
      bool _t1B9C#1 = EQ<real>(_t1B9A,_t1B9A);
      bool _t1B9E#1 = BNot(_t1B9C);
      if _t1B9E then goto ASSIGN1BA2 else goto ASSIGN1BA6
    ASSIGN1BA2:  preds = [COND1BA0]
      bool _t1BA1#1 = true;
      goto JOIN1BA4
    JOIN1BA4:  preds = [ASSIGN1BA2,ASSIGN1BA9]
      bool _t1B90#1 = phi(_t1BA1,_t1BA3)
      goto JOIN1B91
    ASSIGN1BA6:  preds = [COND1BA0]
      real _t1BA5#2 = TensorIndex<tensor[3],[2]>(up1B7E);
      bool _t1BA7#1 = EQ<real>(_t1BA5,_t1BA5);
      bool _t1BA3#1 = BNot(_t1BA7);
      goto JOIN1BA4
}
  function tensor[3,3] fPerp1CDA (tensor[3] s1CDB#3) {
    ENTRY1CDC:  preds = []
      real x1CDD#2 = TensorIndex<tensor[3],[0]>(s1CDB);
      real y1CDF#3 = TensorIndex<tensor[3],[1]>(s1CDB);
      real z1CE1#2 = TensorIndex<tensor[3],[2]>(s1CDB);
      int _t1CE3#1 = 2;
      real _t1CE5#2 = λ(T0[])<(T0)^2> (y1CDF);
      real _t1CE7#3 = 0.2e1;
      real _t1CE9#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1CE7,x1CDD,y1CDF);
      real _t1CEB#2 = 0.e0;
      real _t1CED#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1CE7,y1CDF,z1CE1);
      tensor[3] _t1CEF#1 = <tensor[3]>[_t1CEB,_t1CED,_t1CE5];
      real _t1CF1#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1CE7,x1CDD,z1CE1);
      tensor[3] _t1CF3#1 = <tensor[3]>[_t1CED,_t1CF1,_t1CE9];
      tensor[3] _t1CF5#1 = <tensor[3]>[_t1CE5,_t1CE9,_t1CEB];
      tensor[3,3] hess1CF7#1 = <tensor[3,3]>[_t1CEF,_t1CF3,_t1CF5];
      (real[3] evals1CF9#0,tensor[3][3] _t1CFA#1) = EigenVecs3x3(hess1CF7);
      tensor[3] E21CFC#1 = Subscript<tensor[3][3]>(_t1CFA,_t1CE3);
      tensor[3,3] op1_e3_l_21CFF#1 = λ(T0[3])<(T0_{i0} * T0_{i1})>_{3 3} (E21CFC);
      tensor[3,3] m1CFE#3 = λ(T0[3 3])<(δ_{i0,i1}) - (T0_{i0,i1})>_{3 3} (op1_e3_l_21CFF);
      real t1D02#2 = λ(T0[3 3],T1[3 3])<Σ(i0=0..2)(i1=0..2)<((T0_{i0,i1} * T1_{i0,i1}))>(i0=0..2)(i1=0..2)> (m1CFE,m1CFE);
      bool _t1D08#1 = EQ<real>(t1D02,t1D02);
      bool _t1D0A#1 = BNot(_t1D08);
      if _t1D0A then goto ASSIGN1D0E else goto JOIN1D10
    ASSIGN1D0E:  preds = [COND1D0C]
      tensor[3,3] _t1D0D#1 = λ()<Z_{i0,i1}>_{3 3} ();
      return _t1D0D
      goto JOIN1D10
    JOIN1D10:  preds = [*RETURN(_t1D0D)1D0F,COND1D0C]
      return m1CFE
}
  function int sum1EBC (particle P1EBD#1) {
    ENTRY1EBE:  preds = []
      int _t1EBF#1 = P1EBD.test;
      return _t1EBF
}
  function int max1EC4 (particle P1EC5#1) {
    ENTRY1EC6:  preds = []
      int _t1EC7#1 = P1EC5.steps;
      return _t1EC7
}
  function int sum1ECC (particle P1ECD#1) {
    ENTRY1ECE:  preds = []
      int _t1ECF#1 = P1ECD.testp;
      return _t1ECF
}
  function bool all1ED4 (particle P1ED5#1) {
    ENTRY1ED6:  preds = []
      bool _t1ED7#1 = P1ED5.found;
      return _t1ED7
}
  function real max1EDC (particle P1EDD#1) {
    ENTRY1EDE:  preds = []
      tensor[3] _t1EDF#1 = P1EDD.step;
      real op1_e3_l_11EE2#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (_t1EDF);
      real _t1EE1#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_11EE2);
      return _t1EE1
}
## input initialization
  ENTRY1A64:  preds = []
    real rad1A65#5 = 0.1e-1;
    globals.rad1A5D = rad1A65;
    globals.eps1A5E = rad1A65;
    real v01A69#1 = 0.625e-1;
    globals.v01A5F = v01A69;
    globals.fBias1A60 = rad1A65;
    globals.fStren1A61 = rad1A65;
    globals.zfuz1A62 = rad1A65;
    return
## global-variable initialization
  ENTRY1A70:  preds = []
    femData:Mesh meshData1A71#2 = globals.meshData1A5A;
    int _t1A73#1 = 0;
    int _t1A75#1 = 1;
    int _t1A77#1 = ExtractFemItem<int,NumCell(Mesh)>(meshData1A71);
    int _t1A79#1 = ISub(_t1A77,_t1A75);
    int[] _t1A7B#1 = Range(_t1A73,_t1A79);
    femData:MeshCell[] _t1A7D#1 = <femData:MeshCell[]>{};
  FOREACH1A80:  preds = [ASSIGN1A7E,NEXT1A86]
    foreach (_t1A7F in _t1A7B) on exit goto RETURN1A87
      femData:MeshCell[] _t1A84#1 = phi(_t1A7D,_t1A83)
    femData:MeshCell _t1A81#1 = LoadFem<femData:MeshCell>(meshData1A71,_t1A7F);
    femData:MeshCell[] _t1A83#1 = Append<femData:MeshCell>(_t1A84,_t1A81);
    goto FOREACH1A80
  RETURN1A87:  preds = [FOREACH1A80]
    return
## strand
  strand particle (tensor[3] pos01A88#2, real hh01A89#1) in 3D
    state:
      output tensor[3] pos;
      output tensor[3] _pos;
      real hh;
      tensor[3] step;
      bool found;
      int nfs;
      int test;
      int testp;
      int steps;
    state init
      ENTRY1A93:  preds = []
        tensor[3] step1A94#1 = λ()<Z_{i0}>_{3} ();
        bool found1A96#1 = false;
        int nfs1A98#3 = 0;
        int test1A9A#1 = 1;
        self.pos = pos01A88;
        self._pos = pos01A88;
        self.hh = hh01A89;
        self.step = step1A94;
        self.found = found1A96;
        self.nfs = nfs1A98;
        self.test = test1A9A;
        self.testp = nfs1A98;
        self.steps = nfs1A98;
        return
    end state init
    method update
        ENTRY1AA6:  preds = []
          real rad1AA7#10 = globals.rad1A5D;
          real eps1AA9#1 = globals.eps1A5E;
          real fBias1AAB#3 = globals.fBias1A60;
          real fStren1AAD#3 = globals.fStren1A61;
          tensor[3] pos1AAF#13 = self.pos;
          real hh1AB1#7 = self.hh;
          bool found1AB3#3 = self.found;
          int nfs1AB5#3 = self.nfs;
          int testp1AB7#2 = self.testp;
          int steps1AB9#1 = self.steps;
          int _t1ABB#4 = 1;
          int steps1ABD#4 = IAdd(steps1AB9,_t1ABB);
          real _t1ABF#13 = 0.e0;
          tensor[3] _t1AC1#3 = <tensor[3]>[_t1ABF,_t1ABF,_t1ABF];
          tensor[3] mid1AC3#5 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (pos1AAF,_t1AC1);
          real _t1AC5#1 = TensorIndex<tensor[3],[0]>(mid1AC3);
          real _t1AC7#1 = λ(T0[])<Abs(T0)> (_t1AC5);
          real _t1AC9#9 = 0.1e0;
          bool _t1ACB#1 = GT<real>(_t1AC7,_t1AC9);
          if _t1ACB then goto ASSIGN1ACF else goto ASSIGN1EAA
        ASSIGN1ACF:  preds = [COND1ACD]
          real _t1ACE#1 = TensorIndex<tensor[3],[1]>(mid1AC3);
          real _t1AD0#1 = λ(T0[])<Abs(T0)> (_t1ACE);
          bool _t1AD2#1 = GT<real>(_t1AD0,_t1AC9);
          if _t1AD2 then goto ASSIGN1AD6 else goto ASSIGN1EA9
        ASSIGN1AD6:  preds = [COND1AD4]
          real _t1AD5#1 = TensorIndex<tensor[3],[2]>(mid1AC3);
          real _t1AD7#1 = λ(T0[])<Abs(T0)> (_t1AD5);
          bool _t1AD9#1 = GT<real>(_t1AD7,_t1AC9);
          goto JOIN1ADD
        JOIN1ADD:  preds = [ASSIGN1ADA,ASSIGN1EA9]
          bool _t1ADB#1 = phi(_t1AD9,_t1ADC)
          goto JOIN1AE0
        JOIN1AE0:  preds = [JOIN1ADD,ASSIGN1EAA]
          bool _t1ADE#1 = phi(_t1ADB,_t1ADF)
          real op1_e3_l_41AE3#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (mid1AC3,mid1AC3);
          real _t1AE1#2 = λ(T0[])<Sqrt(T0)> (op1_e3_l_41AE3);
          real _t1AE7#3 = 0.5e1;
          bool _t1AE9#1 = LT<real>(_t1AE1,_t1AE7);
          if _t1AE9 then goto ASSIGN1AED else goto ASSIGN1EA8
        ASSIGN1AED:  preds = [COND1AEB]
          real _t1AEC#1 = 0.2e1;
          bool _t1AEE#1 = GT<real>(_t1AE1,_t1AEC);
          if _t1AEE then goto JOIN1AF3 else goto ASSIGN1EA7
        JOIN1AF3:  preds = [COND1AF0,ASSIGN1EA7]
          bool _t1AF1#1 = phi(_t1ADE,_t1AF2)
          goto JOIN1AF6
        JOIN1AF6:  preds = [JOIN1AF3,ASSIGN1EA8]
          bool _t1AF4#1 = phi(_t1AF1,_t1AF5)
          if _t1AF4 then goto ASSIGN1AF9 else goto ASSIGN1EA6
        ASSIGN1AF9:  preds = [COND1AF7]
          real _t1AF8#6 = TensorIndex<tensor[3],[0]>(pos1AAF);
          bool _t1AFA#1 = EQ<real>(_t1AF8,_t1AF8);
          bool _t1AFC#1 = BNot(_t1AFA);
          if _t1AFC then goto ASSIGN1B00 else goto ASSIGN1E97
        ASSIGN1B00:  preds = [COND1AFE]
          bool _t1AFF#1 = true;
          goto JOIN1B03
        JOIN1B03:  preds = [ASSIGN1B00,JOIN1EA0]
          bool _t1B01#1 = phi(_t1AFF,_t1B02)
          bool _t1B04#1 = BNot(_t1B01);
          if _t1B04 then goto ASSIGN1B08 else goto ASSIGN1E95
        ASSIGN1B08:  preds = [COND1B06]
          real y1B07#4 = TensorIndex<tensor[3],[1]>(pos1AAF);
          real z1B09#4 = TensorIndex<tensor[3],[2]>(pos1AAF);
          int _t1B0B#1 = 2;
          real _t1B0D#4 = λ(T0[])<(T0)^2> (y1B07);
          real _t1B0F#1 = λ(T0[],T1[])<(T0 * T1)> (z1B09,_t1B0D);
          real _t1B13#4 = 0.2e1;
          real _t1B15#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1B13,_t1AF8,y1B07);
          real _t1B17#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t1B13,_t1AF8,y1B07,z1B09);
          real _t1B19#1 = λ(T0[],T1[])<(T0 * T1)> (_t1AF8,_t1B0D);
          tensor[3] g1B1D#1 = <tensor[3]>[_t1B0F,_t1B17,_t1B19];
          real _t1B1F#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1B13,y1B07,z1B09);
          tensor[3] _t1B21#1 = <tensor[3]>[_t1ABF,_t1B1F,_t1B0D];
          real _t1B23#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1B13,_t1AF8,z1B09);
          tensor[3] _t1B25#1 = <tensor[3]>[_t1B1F,_t1B23,_t1B15];
          tensor[3] _t1B27#1 = <tensor[3]>[_t1B0D,_t1B15,_t1ABF];
          tensor[3,3] hess1B29#1 = <tensor[3,3]>[_t1B21,_t1B25,_t1B27];
          (real[3] _t1B2B#1,tensor[3][3] evecs1B2C#0) = EigenVecs3x3(hess1B29);
          real _t1B2E#1 = Subscript<real[3]>(_t1B2B,_t1B0B);
          real op1_e3_l_31B31#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (g1B1D);
          real op1_e3_l_41B32#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_31B31);
          real op1_e3_l_51B33#1 = λ(T0[])<Neg(T0)> (_t1B2E);
          real op1_e3_l_61B34#1 = λ(T0[],T1[])<(T0 + T1)> (fBias1AAB,op1_e3_l_41B32);
          real str1B30#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_51B33,op1_e3_l_61B34);
          bool _t1B3A#1 = GTE<real>(str1B30,fStren1AAD);
          goto JOIN1B3E
        JOIN1B3E:  preds = [ASSIGN1B3B,ASSIGN1E95]
          bool _t1B3C#1 = phi(_t1B3A,_t1B3D)
          goto JOIN1B41
        JOIN1B41:  preds = [JOIN1B3E,ASSIGN1EA6]
          bool _t1B3F#1 = phi(_t1B3C,_t1B40)
          bool _t1B42#1 = BNot(_t1B3F);
          if _t1B42 then goto DIE1B45 else goto JOIN1B46
        DIE1B45:  preds = [COND1B44]
          die
          goto JOIN1B46
        JOIN1B46:  preds = [*DIE1B45,COND1B44]
          bool _t1B47#1 = BNot(found1AB3);
          if _t1B47 then goto ASSIGN1BAB else goto ASSIGN1BF9
        ASSIGN1BAB:  preds = [COND1B49]
          tensor[3] step1BAA#3 = fStep1B4A (pos1AAF);
          tensor[3] pos1BAC#4 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos1AAF,step1BAA);
          real _t1BAE#2 = TensorIndex<tensor[3],[0]>(pos1BAC);
          bool _t1BB0#1 = EQ<real>(_t1BAE,_t1BAE);
          bool _t1BB2#1 = BNot(_t1BB0);
          if _t1BB2 then goto ASSIGN1BB6 else goto ASSIGN1BE9
        ASSIGN1BB6:  preds = [COND1BB4]
          bool _t1BB5#1 = true;
          goto JOIN1BB9
        JOIN1BB9:  preds = [ASSIGN1BB6,JOIN1BF2]
          bool _t1BB7#1 = phi(_t1BB5,_t1BB8)
          if _t1BB7 then goto DIE1BBB else goto JOIN1BBC
        DIE1BBB:  preds = [COND1BBA]
          die
          goto JOIN1BBC
        JOIN1BBC:  preds = [*DIE1BBB,COND1BBA]
          real op1_e3_l_21BBE#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (step1BAA);
          real op1_e3_l_31BBF#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_21BBE);
          real _t1BBD#1 = λ(T0[],T1[])<(T1) / ( T0)> (rad1AA7,op1_e3_l_31BBF);
          bool _t1BC3#1 = GT<real>(_t1BBD,eps1AA9);
          if _t1BC3 then goto ASSIGN1BC7 else goto ASSIGN1BE7
        ASSIGN1BC7:  preds = [COND1BC5]
          int nfs1BC6#2 = IAdd(nfs1AB5,_t1ABB);
          int _t1BC8#1 = 10;
          bool _t1BCA#1 = GT<int>(nfs1BC6,_t1BC8);
          if _t1BCA then goto DIE1BCD else goto JOIN1BCE
        DIE1BCD:  preds = [COND1BCC]
          die
          goto JOIN1BCE
        JOIN1BCE:  preds = [*DIE1BCD,COND1BCC]
          goto JOIN1BD3
        JOIN1BD3:  preds = [JOIN1BCE,ASSIGN1BE7]
          int testp1BCF#1 = phi(testp1AB7,_t1ABB)
          int nfs1BD0#1 = phi(nfs1BC6,nfs1AB5)
          bool found1BD1#1 = phi(found1AB3,found1BD2)
          goto JOIN1BDD
        JOIN1BDD:  preds = [JOIN1BD3,JOIN1E48]
          int testp1BD4#1 = phi(testp1BCF,testp1AB7)
          int nfs1BD5#1 = phi(nfs1BD0,nfs1AB5)
          bool found1BD6#1 = phi(found1BD1,found1AB3)
          tensor[3] step1BD7#1 = phi(step1BAA,up1BD8)
          real hh1BD9#1 = phi(hh1AB1,hh1BDA)
          tensor[3] pos1BDB#2 = phi(pos1BAC,pos1BDC)
          self.pos = pos1BDB;
          self._pos = pos1BDB;
          self.hh = hh1BD9;
          self.step = step1BD7;
          self.found = found1BD6;
          self.nfs = nfs1BD5;
          self.testp = testp1BD4;
          self.steps = steps1ABD;
          active
        ASSIGN1BE7:  preds = [COND1BC5]
          bool found1BD2#1 = true;
          goto JOIN1BD3
        ASSIGN1BE9:  preds = [COND1BB4]
          real _t1BE8#2 = TensorIndex<tensor[3],[1]>(pos1BAC);
          bool _t1BEA#1 = EQ<real>(_t1BE8,_t1BE8);
          bool _t1BEC#1 = BNot(_t1BEA);
          if _t1BEC then goto ASSIGN1BF0 else goto ASSIGN1BF4
        ASSIGN1BF0:  preds = [COND1BEE]
          bool _t1BEF#1 = true;
          goto JOIN1BF2
        JOIN1BF2:  preds = [ASSIGN1BF0,ASSIGN1BF7]
          bool _t1BB8#1 = phi(_t1BEF,_t1BF1)
          goto JOIN1BB9
        ASSIGN1BF4:  preds = [COND1BEE]
          real _t1BF3#2 = TensorIndex<tensor[3],[2]>(pos1BAC);
          bool _t1BF5#1 = EQ<real>(_t1BF3,_t1BF3);
          bool _t1BF1#1 = BNot(_t1BF5);
          goto JOIN1BF2
        ASSIGN1BF9:  preds = [COND1B49]
          tensor[3] _t1BF8#4 = fStep1B4A (pos1AAF);
          tensor[3] pos1BFA#13 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos1AAF,_t1BF8);
          real _t1BFC#2 = TensorIndex<tensor[3],[0]>(pos1BFA);
          bool _t1BFE#1 = EQ<real>(_t1BFC,_t1BFC);
          bool _t1C00#1 = BNot(_t1BFE);
          if _t1C00 then goto ASSIGN1C04 else goto ASSIGN1E86
        ASSIGN1C04:  preds = [COND1C02]
          bool _t1C03#1 = true;
          goto JOIN1C07
        JOIN1C07:  preds = [ASSIGN1C04,JOIN1E8F]
          bool _t1C05#1 = phi(_t1C03,_t1C06)
          if _t1C05 then goto DIE1C09 else goto JOIN1C0A
        DIE1C09:  preds = [COND1C08]
          die
          goto JOIN1C0A
        JOIN1C0A:  preds = [*DIE1C09,COND1C08]
          tensor[3] step1C0B#4 = λ()<Z_{i0}>_{3} ();
          int nn1C0D#2 = 0;
          particle[] _t1C0F#1 = SphereQuery<3,particle>(pos1BFA,rad1AA7);
        FOREACH1C12:  preds = [ASSIGN1C10,NEXT1C46]
          foreach (P1C11 in _t1C0F) on exit goto ASSIGN1C48
            int nn1C44#3 = phi(nn1C0D,nn1C43)
            tensor[3] force1C2D#2 = phi(step1C0B,force1C2C)
            real oldE1C18#2 = phi(_t1ABF,oldE1C17)
          tensor[3] _t1C13#1 = P1C11.pos;
          real _t1C15#2 = 0.1e1;
          tensor[3] op1_e3_l_81C1A#3 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (_t1C13,pos1BFA);
          real op1_e3_l_101C1B#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_81C1A,op1_e3_l_81C1A);
          real op1_e3_l_111C1C#2 = λ(T0[])<Sqrt(T0)> (op1_e3_l_101C1B);
          real op1_e3_l_121C1D#1 = λ(T0[],T1[])<(T1) / ( T0)> (rad1AA7,op1_e3_l_111C1C);
          real op1_e3_l_131C1E#2 = λ(T0[],T1[])<(T0) - (T1)> (_t1C15,op1_e3_l_121C1D);
          real op1_e3_l_141C1F#1 = λ(T0[])<(T0)^4> (op1_e3_l_131C1E);
          real oldE1C17#1 = λ(T0[],T1[])<(T0 + T1)> (oldE1C18,op1_e3_l_141C1F);
          int _t1C28#1 = -4;
          real _t1C2A#1 = IntToReal(_t1C28);
          real op1_e3_l_241C34#1 = λ(T0[])<(T0)^3> (op1_e3_l_131C1E);
          real op1_e3_l_251C35#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t1C15,rad1AA7);
          tensor[3] op1_e3_l_321C36#1 = λ(T0[],T1[],T2[],T3[3])<(T0 * T1 * T2 * T3_{i0})>_{3} (_t1C2A,op1_e3_l_241C34,op1_e3_l_251C35,op1_e3_l_81C1A);
          tensor[3] op1_e3_l_341C37#1 = λ(T0[3],T1[])<(T0_{i0}) / ( T1)>_{3} (op1_e3_l_321C36,op1_e3_l_111C1C);
          tensor[3] force1C2C#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (force1C2D,op1_e3_l_341C37);
          int nn1C43#1 = IAdd(nn1C44,_t1ABB);
          goto FOREACH1C12
        ASSIGN1C48:  preds = [FOREACH1C12]
          bool _t1C47#1 = EQ<int>(nn1C0D,nn1C44);
          if _t1C47 then goto ASSIGN1C4B else goto JOIN1CD9
        ASSIGN1C4B:  preds = [COND1C49]
          real _t1C4A#1 = 0.5e0;
          real _t1C4C#1 = λ(T0[],T1[])<(T0 * T1)> (_t1C4A,rad1AA7);
          tensor[3] _t1C4E#1 = <tensor[3]>[_t1C4C,_t1ABF,_t1ABF];
          tensor[3] npos1C50#7 = λ(T0[3],T1[3],T2[3])<(T0_{i0} + T1_{i0} + T2_{i0})>_{3} (pos1AAF,_t1BF8,_t1C4E);
          tensor[3] mid1C52#5 = λ(T0[3],T1[3])<(T1_{i0}) - (T0_{i0})>_{3} (_t1AC1,npos1C50);
          real _t1C56#1 = TensorIndex<tensor[3],[0]>(mid1C52);
          real _t1C58#1 = λ(T0[])<Abs(T0)> (_t1C56);
          bool _t1C5A#1 = GT<real>(_t1C58,_t1AC9);
          if _t1C5A then goto ASSIGN1C5E else goto ASSIGN1E84
        ASSIGN1C5E:  preds = [COND1C5C]
          real _t1C5D#1 = TensorIndex<tensor[3],[1]>(mid1C52);
          real _t1C5F#1 = λ(T0[])<Abs(T0)> (_t1C5D);
          bool _t1C61#1 = GT<real>(_t1C5F,_t1AC9);
          if _t1C61 then goto ASSIGN1C65 else goto ASSIGN1E83
        ASSIGN1C65:  preds = [COND1C63]
          real _t1C64#1 = TensorIndex<tensor[3],[2]>(mid1C52);
          real _t1C66#1 = λ(T0[])<Abs(T0)> (_t1C64);
          bool _t1C68#1 = GT<real>(_t1C66,_t1AC9);
          goto JOIN1C6C
        JOIN1C6C:  preds = [ASSIGN1C69,ASSIGN1E83]
          bool _t1C6A#1 = phi(_t1C68,_t1C6B)
          goto JOIN1C6F
        JOIN1C6F:  preds = [JOIN1C6C,ASSIGN1E84]
          bool _t1C6D#1 = phi(_t1C6A,_t1C6E)
          real op1_e3_l_81C73#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (mid1C52,mid1C52);
          real _t1C70#2 = λ(T0[])<Sqrt(T0)> (op1_e3_l_81C73);
          bool _t1C78#1 = LT<real>(_t1C70,_t1AE7);
          if _t1C78 then goto ASSIGN1C7C else goto ASSIGN1E82
        ASSIGN1C7C:  preds = [COND1C7A]
          real _t1C7B#1 = 0.2e1;
          bool _t1C7D#1 = GT<real>(_t1C70,_t1C7B);
          if _t1C7D then goto JOIN1C82 else goto ASSIGN1E81
        JOIN1C82:  preds = [COND1C7F,ASSIGN1E81]
          bool _t1C80#1 = phi(_t1C6D,_t1C81)
          goto JOIN1C85
        JOIN1C85:  preds = [JOIN1C82,ASSIGN1E82]
          bool _t1C83#1 = phi(_t1C80,_t1C84)
          if _t1C83 then goto ASSIGN1C88 else goto ASSIGN1E80
        ASSIGN1C88:  preds = [COND1C86]
          real _t1C87#6 = TensorIndex<tensor[3],[0]>(npos1C50);
          bool _t1C89#1 = EQ<real>(_t1C87,_t1C87);
          bool _t1C8B#1 = BNot(_t1C89);
          if _t1C8B then goto ASSIGN1C8F else goto ASSIGN1E71
        ASSIGN1C8F:  preds = [COND1C8D]
          bool _t1C8E#1 = true;
          goto JOIN1C92
        JOIN1C92:  preds = [ASSIGN1C8F,JOIN1E7A]
          bool _t1C90#1 = phi(_t1C8E,_t1C91)
          bool _t1C93#1 = BNot(_t1C90);
          if _t1C93 then goto ASSIGN1C97 else goto ASSIGN1E6F
        ASSIGN1C97:  preds = [COND1C95]
          real y1C96#4 = TensorIndex<tensor[3],[1]>(npos1C50);
          real z1C98#4 = TensorIndex<tensor[3],[2]>(npos1C50);
          int _t1C9A#1 = 2;
          real _t1C9C#4 = λ(T0[])<(T0)^2> (y1C96);
          real _t1C9E#1 = λ(T0[],T1[])<(T0 * T1)> (z1C98,_t1C9C);
          real _t1CA2#4 = 0.2e1;
          real _t1CA4#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1CA2,_t1C87,y1C96);
          real _t1CA6#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t1CA2,_t1C87,y1C96,z1C98);
          real _t1CA8#1 = λ(T0[],T1[])<(T0 * T1)> (_t1C87,_t1C9C);
          tensor[3] g1CAC#1 = <tensor[3]>[_t1C9E,_t1CA6,_t1CA8];
          real _t1CAE#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1CA2,y1C96,z1C98);
          tensor[3] _t1CB0#1 = <tensor[3]>[_t1ABF,_t1CAE,_t1C9C];
          real _t1CB2#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1CA2,_t1C87,z1C98);
          tensor[3] _t1CB4#1 = <tensor[3]>[_t1CAE,_t1CB2,_t1CA4];
          tensor[3] _t1CB6#1 = <tensor[3]>[_t1C9C,_t1CA4,_t1ABF];
          tensor[3,3] hess1CB8#1 = <tensor[3,3]>[_t1CB0,_t1CB4,_t1CB6];
          (real[3] _t1CBA#1,tensor[3][3] evecs1CBB#0) = EigenVecs3x3(hess1CB8);
          real _t1CBD#1 = Subscript<real[3]>(_t1CBA,_t1C9A);
          real op1_e3_l_31CC0#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (g1CAC);
          real op1_e3_l_41CC1#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_31CC0);
          real op1_e3_l_51CC2#1 = λ(T0[])<Neg(T0)> (_t1CBD);
          real op1_e3_l_61CC3#1 = λ(T0[],T1[])<(T0 + T1)> (fBias1AAB,op1_e3_l_41CC1);
          real str1CBF#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_51CC2,op1_e3_l_61CC3);
          bool _t1CC9#1 = GTE<real>(str1CBF,fStren1AAD);
          goto JOIN1CCD
        JOIN1CCD:  preds = [ASSIGN1CCA,ASSIGN1E6F]
          bool _t1CCB#1 = phi(_t1CC9,_t1CCC)
          goto JOIN1CD0
        JOIN1CD0:  preds = [JOIN1CCD,ASSIGN1E80]
          bool _t1CCE#1 = phi(_t1CCB,_t1CCF)
          if _t1CCE then goto NEW1CD2 else goto JOIN1CD3
        NEW1CD2:  preds = [COND1CD1]
          new particle(npos1C50,hh1AB1);
          goto JOIN1CD3
        JOIN1CD3:  preds = [NEW1CD2,COND1CD1]
          self.pos = pos1BFA;
          self._pos = pos1BFA;
          self.step = step1C0B;
          self.steps = steps1ABD;
          active
          goto JOIN1CD9
        JOIN1CD9:  preds = [*ACTIVE1CD8,COND1C49]
          tensor[3,3] _t1D12#1 = fPerp1CDA (pos1BFA);
          tensor[3] op1_e3_l_31D15#5 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (_t1D12,force1C2D);
          tensor[3] es1D14#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (hh1AB1,op1_e3_l_31D15);
          real op1_e3_l_51D1A#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_31D15,op1_e3_l_31D15);
          real op1_e3_l_61D1B#1 = λ(T0[],T1[])<(T0 * T0 * T1)> (hh1AB1,op1_e3_l_51D1A);
          real _t1D18#2 = λ(T0[])<Sqrt(T0)> (op1_e3_l_61D1B);
          bool _t1D20#1 = GT<real>(_t1D18,rad1AA7);
          if _t1D20 then goto ASSIGN1F13 else goto JOIN1D3D
        ASSIGN1F13:  preds = [COND1D22]
          real op1_e3_l_101D28#2 = λ(T0[],T1[])<(T0) / ( T1)> (rad1AA7,_t1D18);
          real hh1D23#1 = λ(T0[],T1[])<(T0 * T1)> (hh1AB1,op1_e3_l_101D28);
          tensor[3] es1D2F#1 = λ(T0[],T1[],T2[3])<(T0 * T1 * T2_{i0})>_{3} (hh1AB1,op1_e3_l_101D28,op1_e3_l_31D15);
          goto JOIN1D3D
        JOIN1D3D:  preds = [ASSIGN1F14,COND1D22]
          tensor[3] es1D3B#5 = phi(es1D2F,es1D14)
          real hh1D3C#2 = phi(hh1D23,hh1AB1)
          tensor[3] samplePos1D3E#1 = λ(T0[3],T1[3],T2[3])<(T0_{i0} + T1_{i0} + T2_{i0})>_{3} (pos1AAF,_t1BF8,es1D3B);
          tensor[3] fs1D40#3 = fStep1B4A (samplePos1D3E);
          real op1_e3_l_21D43#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (fs1D40);
          real op1_e3_l_31D44#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (es1D3B);
          real op1_e3_l_41D45#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_21D43);
          real op1_e3_l_51D46#2 = λ(T0[])<Sqrt(T0)> (op1_e3_l_31D44);
          real _t1D42#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_41D45,op1_e3_l_51D46);
          real _t1D4C#5 = 0.5e0;
          bool _t1D4E#1 = GT<real>(_t1D42,_t1D4C);
          if _t1D4E then goto ASSIGN1D52 else goto JOIN1D5A
        ASSIGN1D52:  preds = [COND1D50]
          real hh1D51#1 = λ(T0[],T1[])<(T0 * T1)> (hh1D3C,_t1D4C);
          self.pos = pos1BFA;
          self._pos = pos1BFA;
          self.hh = hh1D51;
          self.step = step1C0B;
          self.steps = steps1ABD;
          active
          goto JOIN1D5A
        JOIN1D5A:  preds = [*ACTIVE1D58,COND1D50]
          real hh1D59#2 = phi(hh1D3C)
          tensor[3] up1BD8#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (fs1D40,es1D3B);
          tensor[3] pos1D5C#4 = λ(T0[3],T1[3],T2[3],T3[3])<(T0_{i0} + T1_{i0} + T2_{i0} + T3_{i0})>_{3} (pos1AAF,_t1BF8,fs1D40,es1D3B);
          particle[] _t1D5E#1 = SphereQuery<3,particle>(pos1D5C,rad1AA7);
        FOREACH1D61:  preds = [ASSIGN1D5F,NEXT1D77]
          foreach (P1D60 in _t1D5E) on exit goto ASSIGN1D79
            real accum1D67#2 = phi(_t1ABF,accum1D66)
          tensor[3] _t1D62#1 = P1D60.pos;
          real _t1D64#1 = 0.1e1;
          tensor[3] op1_e3_l_101D69#2 = λ(T0[3],T1[3])<(T1_{i0}) - (T0_{i0})>_{3} (_t1D62,pos1D5C);
          real op1_e3_l_121D6A#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_101D69,op1_e3_l_101D69);
          real op1_e3_l_131D6B#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_121D6A);
          real op1_e3_l_141D6C#1 = λ(T0[],T1[])<(T1) / ( T0)> (rad1AA7,op1_e3_l_131D6B);
          real op1_e3_l_151D6D#1 = λ(T0[],T1[])<(T0) - (T1)> (_t1D64,op1_e3_l_141D6C);
          real op1_e3_l_161D6E#1 = λ(T0[])<(T0)^4> (op1_e3_l_151D6D);
          real accum1D66#1 = λ(T0[],T1[])<(T0 + T1)> (accum1D67,op1_e3_l_161D6E);
          goto FOREACH1D61
        ASSIGN1D79:  preds = [FOREACH1D61]
          real _t1D78#1 = λ(T0[],T1[])<(T0) - (T1)> (accum1D67,oldE1C18);
          tensor[3] op1_e3_l_121D7E#1 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (pos1D5C,pos1BFA);
          tensor[3] op1_e3_l_131D7F#1 = λ(T0[3])<Neg(T0_{i0})>_{3} (op1_e3_l_31D15);
          real op1_e3_l_141D80#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_121D7E,op1_e3_l_131D7F);
          real _t1D7A#1 = λ(T0[],T1[])<(T0 * T1)> (_t1D4C,op1_e3_l_141D80);
          bool _t1D88#1 = GT<real>(_t1D78,_t1D7A);
          if _t1D88 then goto ASSIGN1D8C else goto JOIN1D94
        ASSIGN1D8C:  preds = [COND1D8A]
          real hh1D8B#1 = λ(T0[],T1[])<(T0 * T1)> (hh1D59,_t1D4C);
          self.pos = pos1BFA;
          self._pos = pos1BFA;
          self.hh = hh1D8B;
          self.step = step1C0B;
          self.steps = steps1ABD;
          active
          goto JOIN1D94
        JOIN1D94:  preds = [*ACTIVE1D92,COND1D8A]
          real hh1D93#1 = phi(hh1D59)
          tensor[3] pos1BDC#5 = phi(pos1D5C)
          real _t1D95#1 = 0.11e1;
          real hh1BDA#2 = λ(T0[],T1[])<(T0 * T1)> (hh1D93,_t1D95);
          real _t1D98#2 = TensorIndex<tensor[3],[0]>(pos1BDC);
          bool _t1D9A#1 = EQ<real>(_t1D98,_t1D98);
          bool _t1D9C#1 = BNot(_t1D9A);
          if _t1D9C then goto ASSIGN1DA0 else goto ASSIGN1E60
        ASSIGN1DA0:  preds = [COND1D9E]
          bool _t1D9F#1 = true;
          goto JOIN1DA3
        JOIN1DA3:  preds = [ASSIGN1DA0,JOIN1E69]
          bool _t1DA1#1 = phi(_t1D9F,_t1DA2)
          if _t1DA1 then goto DIE1DA5 else goto JOIN1DA6
        DIE1DA5:  preds = [COND1DA4]
          die
          goto JOIN1DA6
        JOIN1DA6:  preds = [*DIE1DA5,COND1DA4]
          int _t1DA7#1 = 5;
          bool _t1DA9#1 = LT<int>(nn1C44,_t1DA7);
          if _t1DA9 then goto ASSIGN1F17 else goto JOIN1E48
        ASSIGN1F17:  preds = [COND1DAB]
          real op1_e3_l_71DAF#1 = λ(T0[])<(1) / ( T0)> (op1_e3_l_51D46);
          tensor[3] op1_e3_l_81DB0#1 = λ(T0[],T1[],T2[3],T3[])<(T0 * T1 * T2_{i0} * T3)>_{3} (_t1D4C,rad1AA7,es1D3B,op1_e3_l_71DAF);
          tensor[3] npos1DAC#7 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos1BDC,op1_e3_l_81DB0);
          tensor[3] mid1DB6#5 = λ(T0[3],T1[3])<(T1_{i0}) - (T0_{i0})>_{3} (_t1AC1,npos1DAC);
          real _t1DC2#1 = TensorIndex<tensor[3],[0]>(mid1DB6);
          real _t1DC4#1 = λ(T0[])<Abs(T0)> (_t1DC2);
          bool _t1DC6#1 = GT<real>(_t1DC4,_t1AC9);
          if _t1DC6 then goto ASSIGN1DCA else goto ASSIGN1E5E
        ASSIGN1DCA:  preds = [COND1DC8]
          real _t1DC9#1 = TensorIndex<tensor[3],[1]>(mid1DB6);
          real _t1DCB#1 = λ(T0[])<Abs(T0)> (_t1DC9);
          bool _t1DCD#1 = GT<real>(_t1DCB,_t1AC9);
          if _t1DCD then goto ASSIGN1DD1 else goto ASSIGN1E5D
        ASSIGN1DD1:  preds = [COND1DCF]
          real _t1DD0#1 = TensorIndex<tensor[3],[2]>(mid1DB6);
          real _t1DD2#1 = λ(T0[])<Abs(T0)> (_t1DD0);
          bool _t1DD4#1 = GT<real>(_t1DD2,_t1AC9);
          goto JOIN1DD8
        JOIN1DD8:  preds = [ASSIGN1DD5,ASSIGN1E5D]
          bool _t1DD6#1 = phi(_t1DD4,_t1DD7)
          goto JOIN1DDB
        JOIN1DDB:  preds = [JOIN1DD8,ASSIGN1E5E]
          bool _t1DD9#1 = phi(_t1DD6,_t1DDA)
          real op1_e3_l_181DE3#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (mid1DB6,mid1DB6);
          real _t1DDC#2 = λ(T0[])<Sqrt(T0)> (op1_e3_l_181DE3);
          bool _t1DEC#1 = LT<real>(_t1DDC,_t1AE7);
          if _t1DEC then goto ASSIGN1DF0 else goto ASSIGN1E5C
        ASSIGN1DF0:  preds = [COND1DEE]
          real _t1DEF#1 = 0.2e1;
          bool _t1DF1#1 = GT<real>(_t1DDC,_t1DEF);
          if _t1DF1 then goto JOIN1DF6 else goto ASSIGN1E5B
        JOIN1DF6:  preds = [COND1DF3,ASSIGN1E5B]
          bool _t1DF4#1 = phi(_t1DD9,_t1DF5)
          goto JOIN1DF9
        JOIN1DF9:  preds = [JOIN1DF6,ASSIGN1E5C]
          bool _t1DF7#1 = phi(_t1DF4,_t1DF8)
          if _t1DF7 then goto ASSIGN1DFC else goto ASSIGN1E5A
        ASSIGN1DFC:  preds = [COND1DFA]
          real _t1DFB#6 = TensorIndex<tensor[3],[0]>(npos1DAC);
          bool _t1DFD#1 = EQ<real>(_t1DFB,_t1DFB);
          bool _t1DFF#1 = BNot(_t1DFD);
          if _t1DFF then goto ASSIGN1E03 else goto ASSIGN1E4B
        ASSIGN1E03:  preds = [COND1E01]
          bool _t1E02#1 = true;
          goto JOIN1E06
        JOIN1E06:  preds = [ASSIGN1E03,JOIN1E54]
          bool _t1E04#1 = phi(_t1E02,_t1E05)
          bool _t1E07#1 = BNot(_t1E04);
          if _t1E07 then goto ASSIGN1E0B else goto ASSIGN1E49
        ASSIGN1E0B:  preds = [COND1E09]
          real y1E0A#4 = TensorIndex<tensor[3],[1]>(npos1DAC);
          real z1E0C#4 = TensorIndex<tensor[3],[2]>(npos1DAC);
          int _t1E0E#1 = 2;
          real _t1E10#4 = λ(T0[])<(T0)^2> (y1E0A);
          real _t1E12#1 = λ(T0[],T1[])<(T0 * T1)> (z1E0C,_t1E10);
          real _t1E16#4 = 0.2e1;
          real _t1E18#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1E16,_t1DFB,y1E0A);
          real _t1E1A#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t1E16,_t1DFB,y1E0A,z1E0C);
          real _t1E1C#1 = λ(T0[],T1[])<(T0 * T1)> (_t1DFB,_t1E10);
          tensor[3] g1E20#1 = <tensor[3]>[_t1E12,_t1E1A,_t1E1C];
          real _t1E22#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1E16,y1E0A,z1E0C);
          tensor[3] _t1E24#1 = <tensor[3]>[_t1ABF,_t1E22,_t1E10];
          real _t1E26#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1E16,_t1DFB,z1E0C);
          tensor[3] _t1E28#1 = <tensor[3]>[_t1E22,_t1E26,_t1E18];
          tensor[3] _t1E2A#1 = <tensor[3]>[_t1E10,_t1E18,_t1ABF];
          tensor[3,3] hess1E2C#1 = <tensor[3,3]>[_t1E24,_t1E28,_t1E2A];
          (real[3] _t1E2E#1,tensor[3][3] evecs1E2F#0) = EigenVecs3x3(hess1E2C);
          real _t1E31#1 = Subscript<real[3]>(_t1E2E,_t1E0E);
          real op1_e3_l_31E34#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (g1E20);
          real op1_e3_l_41E35#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_31E34);
          real op1_e3_l_51E36#1 = λ(T0[])<Neg(T0)> (_t1E31);
          real op1_e3_l_61E37#1 = λ(T0[],T1[])<(T0 + T1)> (fBias1AAB,op1_e3_l_41E35);
          real str1E33#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_51E36,op1_e3_l_61E37);
          bool _t1E3D#1 = GTE<real>(str1E33,fStren1AAD);
          goto JOIN1E41
        JOIN1E41:  preds = [ASSIGN1E3E,ASSIGN1E49]
          bool _t1E3F#1 = phi(_t1E3D,_t1E40)
          goto JOIN1E44
        JOIN1E44:  preds = [JOIN1E41,ASSIGN1E5A]
          bool _t1E42#1 = phi(_t1E3F,_t1E43)
          if _t1E42 then goto NEW1E46 else goto JOIN1E47
        NEW1E46:  preds = [COND1E45]
          new particle(npos1DAC,hh1BDA);
          goto JOIN1E47
        JOIN1E47:  preds = [NEW1E46,COND1E45]
          goto JOIN1E48
        JOIN1E48:  preds = [JOIN1E47,COND1DAB]
          goto JOIN1BDD
        ASSIGN1E49:  preds = [COND1E09]
          bool _t1E40#1 = false;
          goto JOIN1E41
        ASSIGN1E4B:  preds = [COND1E01]
          real _t1E4A#2 = TensorIndex<tensor[3],[1]>(npos1DAC);
          bool _t1E4C#1 = EQ<real>(_t1E4A,_t1E4A);
          bool _t1E4E#1 = BNot(_t1E4C);
          if _t1E4E then goto ASSIGN1E52 else goto ASSIGN1E56
        ASSIGN1E52:  preds = [COND1E50]
          bool _t1E51#1 = true;
          goto JOIN1E54
        JOIN1E54:  preds = [ASSIGN1E52,ASSIGN1E59]
          bool _t1E05#1 = phi(_t1E51,_t1E53)
          goto JOIN1E06
        ASSIGN1E56:  preds = [COND1E50]
          real _t1E55#2 = TensorIndex<tensor[3],[2]>(npos1DAC);
          bool _t1E57#1 = EQ<real>(_t1E55,_t1E55);
          bool _t1E53#1 = BNot(_t1E57);
          goto JOIN1E54
        ASSIGN1E5A:  preds = [COND1DFA]
          bool _t1E43#1 = false;
          goto JOIN1E44
        ASSIGN1E5B:  preds = [COND1DF3]
          bool _t1DF5#1 = false;
          goto JOIN1DF6
        ASSIGN1E5C:  preds = [COND1DEE]
          bool _t1DF8#1 = false;
          goto JOIN1DF9
        ASSIGN1E5D:  preds = [COND1DCF]
          bool _t1DD7#1 = false;
          goto JOIN1DD8
        ASSIGN1E5E:  preds = [COND1DC8]
          bool _t1DDA#1 = false;
          goto JOIN1DDB
        ASSIGN1E60:  preds = [COND1D9E]
          real _t1E5F#2 = TensorIndex<tensor[3],[1]>(pos1BDC);
          bool _t1E61#1 = EQ<real>(_t1E5F,_t1E5F);
          bool _t1E63#1 = BNot(_t1E61);
          if _t1E63 then goto ASSIGN1E67 else goto ASSIGN1E6B
        ASSIGN1E67:  preds = [COND1E65]
          bool _t1E66#1 = true;
          goto JOIN1E69
        JOIN1E69:  preds = [ASSIGN1E67,ASSIGN1E6E]
          bool _t1DA2#1 = phi(_t1E66,_t1E68)
          goto JOIN1DA3
        ASSIGN1E6B:  preds = [COND1E65]
          real _t1E6A#2 = TensorIndex<tensor[3],[2]>(pos1BDC);
          bool _t1E6C#1 = EQ<real>(_t1E6A,_t1E6A);
          bool _t1E68#1 = BNot(_t1E6C);
          goto JOIN1E69
        ASSIGN1E6F:  preds = [COND1C95]
          bool _t1CCC#1 = false;
          goto JOIN1CCD
        ASSIGN1E71:  preds = [COND1C8D]
          real _t1E70#2 = TensorIndex<tensor[3],[1]>(npos1C50);
          bool _t1E72#1 = EQ<real>(_t1E70,_t1E70);
          bool _t1E74#1 = BNot(_t1E72);
          if _t1E74 then goto ASSIGN1E78 else goto ASSIGN1E7C
        ASSIGN1E78:  preds = [COND1E76]
          bool _t1E77#1 = true;
          goto JOIN1E7A
        JOIN1E7A:  preds = [ASSIGN1E78,ASSIGN1E7F]
          bool _t1C91#1 = phi(_t1E77,_t1E79)
          goto JOIN1C92
        ASSIGN1E7C:  preds = [COND1E76]
          real _t1E7B#2 = TensorIndex<tensor[3],[2]>(npos1C50);
          bool _t1E7D#1 = EQ<real>(_t1E7B,_t1E7B);
          bool _t1E79#1 = BNot(_t1E7D);
          goto JOIN1E7A
        ASSIGN1E80:  preds = [COND1C86]
          bool _t1CCF#1 = false;
          goto JOIN1CD0
        ASSIGN1E81:  preds = [COND1C7F]
          bool _t1C81#1 = false;
          goto JOIN1C82
        ASSIGN1E82:  preds = [COND1C7A]
          bool _t1C84#1 = false;
          goto JOIN1C85
        ASSIGN1E83:  preds = [COND1C63]
          bool _t1C6B#1 = false;
          goto JOIN1C6C
        ASSIGN1E84:  preds = [COND1C5C]
          bool _t1C6E#1 = false;
          goto JOIN1C6F
        ASSIGN1E86:  preds = [COND1C02]
          real _t1E85#2 = TensorIndex<tensor[3],[1]>(pos1BFA);
          bool _t1E87#1 = EQ<real>(_t1E85,_t1E85);
          bool _t1E89#1 = BNot(_t1E87);
          if _t1E89 then goto ASSIGN1E8D else goto ASSIGN1E91
        ASSIGN1E8D:  preds = [COND1E8B]
          bool _t1E8C#1 = true;
          goto JOIN1E8F
        JOIN1E8F:  preds = [ASSIGN1E8D,ASSIGN1E94]
          bool _t1C06#1 = phi(_t1E8C,_t1E8E)
          goto JOIN1C07
        ASSIGN1E91:  preds = [COND1E8B]
          real _t1E90#2 = TensorIndex<tensor[3],[2]>(pos1BFA);
          bool _t1E92#1 = EQ<real>(_t1E90,_t1E90);
          bool _t1E8E#1 = BNot(_t1E92);
          goto JOIN1E8F
        ASSIGN1E95:  preds = [COND1B06]
          bool _t1B3D#1 = false;
          goto JOIN1B3E
        ASSIGN1E97:  preds = [COND1AFE]
          real _t1E96#2 = TensorIndex<tensor[3],[1]>(pos1AAF);
          bool _t1E98#1 = EQ<real>(_t1E96,_t1E96);
          bool _t1E9A#1 = BNot(_t1E98);
          if _t1E9A then goto ASSIGN1E9E else goto ASSIGN1EA2
        ASSIGN1E9E:  preds = [COND1E9C]
          bool _t1E9D#1 = true;
          goto JOIN1EA0
        JOIN1EA0:  preds = [ASSIGN1E9E,ASSIGN1EA5]
          bool _t1B02#1 = phi(_t1E9D,_t1E9F)
          goto JOIN1B03
        ASSIGN1EA2:  preds = [COND1E9C]
          real _t1EA1#2 = TensorIndex<tensor[3],[2]>(pos1AAF);
          bool _t1EA3#1 = EQ<real>(_t1EA1,_t1EA1);
          bool _t1E9F#1 = BNot(_t1EA3);
          goto JOIN1EA0
        ASSIGN1EA6:  preds = [COND1AF7]
          bool _t1B40#1 = false;
          goto JOIN1B41
        ASSIGN1EA7:  preds = [COND1AF0]
          bool _t1AF2#1 = false;
          goto JOIN1AF3
        ASSIGN1EA8:  preds = [COND1AEB]
          bool _t1AF5#1 = false;
          goto JOIN1AF6
        ASSIGN1EA9:  preds = [COND1AD4]
          bool _t1ADC#1 = false;
          goto JOIN1ADD
        ASSIGN1EAA:  preds = [COND1ACD]
          bool _t1ADF#1 = false;
          goto JOIN1AE0
    end update
  end particle
## initial strand creation
  COLLECTION
    ENTRY1EAB:  preds = []
      tensor[3][] ipos1EAC#1 = globals.ipos1A63;
    FOREACH1EAF:  preds = [ASSIGN1EAD,NEXT1EB3]
      foreach (x1EAE in ipos1EAC) on exit goto RETURN1EB4
      real _t1EB0#1 = 0.1e1;
      new particle(x1EAE,_t1EB0);
      goto FOREACH1EAF
    RETURN1EB4:  preds = [FOREACH1EAF]
      return
## global update
  ENTRY1EB5:  preds = []
    real rad1EB6#1 = globals.rad1A5D;
    real eps1EB8#1 = globals.eps1A5E;
    particle[] P1EBA#5 = Strands<particle,all>;
    (int res1EC2#1) = sum<int>(MAP sum1EBC (P1EBA));
    (int res1ECA#2) = max<int>(MAP max1EC4 (P1EBA));
    (int res1ED2#1) = sum<int>(MAP sum1ECC (P1EBA));
    (bool res1EDA#2) = all(MAP all1ED4 (P1EBA));
    (real res1EE6#1) = max<real>(MAP max1EDC (P1EBA));
    string _t1EE8#1 = "One run:";
    string _t1EEA#3 = " and ";
    real _t1EEC#2 = λ(T0[],T1[])<(T0) / ( T1)> (res1EE6,rad1EB6);
    bool _t1EEE#2 = LT<real>(_t1EEC,eps1EB8);
    string _t1EF0#1 = " of ";
    string _t1EF2#2 = "\n";
    Print<[string,bool,string,real,string,bool,string,int,string,int,string]>(_t1EE8,res1EDA,_t1EEA,_t1EEC,_t1EEA,_t1EEE,_t1EEA,res1ED2,_t1EF0,res1EC2,_t1EF2);
    if res1EDA then goto COND1EF6 else goto JOIN1EFC
  COND1EF6:  preds = [COND1EF5]
    if _t1EEE then goto ASSIGN1EF8 else goto JOIN1EFB
  ASSIGN1EF8:  preds = [COND1EF6]
    string _t1EF7#1 = "CONVERGED!\n";
    Print<[string]>(_t1EF7);
    StabilizeAll;
    goto JOIN1EFB
  JOIN1EFB:  preds = [MASSIGN1EFA,COND1EF6]
    goto JOIN1EFC
  JOIN1EFC:  preds = [JOIN1EFB,COND1EF5]
    int _t1EFD#1 = 2000;
    bool _t1EFF#1 = GT<int>(res1ECA,_t1EFD);
    if _t1EFF then goto MASSIGN1F02 else goto JOIN1F03
  MASSIGN1F02:  preds = [COND1F01]
    StabilizeAll;
    goto JOIN1F03
  JOIN1F03:  preds = [MASSIGN1F02,COND1F01]
    string _t1F04#1 = "Current steps:";
    Print<[string,int,string]>(_t1F04,res1ECA,_t1EF2);
    continue
#### end program ####
##### mid-ir: after contraction ####
## properties
  GlobalInit StabilizeAll GlobalReduce StrandSets GlobalUpdate NewStrands StrandCommunication StrandsMayDie HasInputs HasGlobals ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
## globals
  input meshData1A5A (meshData) = <no-default>
  input 0space04FA_intermedateGlobal1A5B (space) = <no-default>
  input 0data04FC_intermedateGlobal1A5C (data) = <no-default>
  input rad1A5D (rad) = <default>
  input eps1A5E (eps) = <default>
  input v01A5F (v0) = <default>
  input fBias1A60 (fBias) = <default>
  input fStren1A61 (fStren) = <default>
  input zfuz1A62 (zfuz) = <default>
  input ipos1A63 (ipos) = <no-default>
## functions
  function tensor[3] fStep1B4A (tensor[3] s1B4B#3) {
    ENTRY1B4C:  preds = []
      real x1B4D#4 = TensorIndex<tensor[3],[0]>(s1B4B);
      real y1B4F#4 = TensorIndex<tensor[3],[1]>(s1B4B);
      real z1B51#4 = TensorIndex<tensor[3],[2]>(s1B4B);
      int _t1B53#2 = 2;
      real _t1B55#4 = λ(T0[])<(T0)^2> (y1B4F);
      real _t1B57#1 = λ(T0[],T1[])<(T0 * T1)> (z1B51,_t1B55);
      real _t1B5B#4 = 0.2e1;
      real _t1B5D#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1B5B,x1B4D,y1B4F);
      real _t1B5F#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t1B5B,x1B4D,y1B4F,z1B51);
      real _t1B61#1 = λ(T0[],T1[])<(T0 * T1)> (x1B4D,_t1B55);
      tensor[3] g1B65#1 = <tensor[3]>[_t1B57,_t1B5F,_t1B61];
      real _t1B67#2 = 0.e0;
      real _t1B69#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1B5B,y1B4F,z1B51);
      tensor[3] _t1B6B#1 = <tensor[3]>[_t1B67,_t1B69,_t1B55];
      real _t1B6D#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1B5B,x1B4D,z1B51);
      tensor[3] _t1B6F#1 = <tensor[3]>[_t1B69,_t1B6D,_t1B5D];
      tensor[3] _t1B71#1 = <tensor[3]>[_t1B55,_t1B5D,_t1B67];
      tensor[3,3] hess1B73#1 = <tensor[3,3]>[_t1B6B,_t1B6F,_t1B71];
      (real[3] evals1B75#1,tensor[3][3] E1B76#1) = EigenVecs3x3(hess1B73);
      real _t1B78#1 = 0.1e1;
      real _t1B7A#1 = Subscript<real[3]>(evals1B75,_t1B53);
      tensor[3] _t1B7C#2 = Subscript<tensor[3][3]>(E1B76,_t1B53);
      real op1_e3_l_51B7F#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t1B78,_t1B7A);
      real op1_e3_l_61B80#1 = λ(T0[])<Neg(T0)> (op1_e3_l_51B7F);
      real op1_e3_l_71B81#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (_t1B7C,g1B65);
      tensor[3] up1B7E#4 = λ(T0[3],T1[],T2[])<(T1 * T0_{i0} * T2)>_{3} (_t1B7C,op1_e3_l_61B80,op1_e3_l_71B81);
      real _t1B86#2 = TensorIndex<tensor[3],[0]>(up1B7E);
      bool _t1B88#1 = EQ<real>(_t1B86,_t1B86);
      bool _t1B8A#1 = BNot(_t1B88);
      if _t1B8A then goto ASSIGN1B8E else goto ASSIGN1B9B
    ASSIGN1B8E:  preds = [COND1B8C]
      bool _t1B8D#1 = true;
      goto JOIN1B91
    JOIN1B91:  preds = [ASSIGN1B8E,JOIN1BA4]
      bool _t1B8F#1 = phi(_t1B8D,_t1B90)
      if _t1B8F then goto ASSIGN1B94 else goto JOIN1B98
    ASSIGN1B94:  preds = [COND1B92]
      real _t1B93#3 = +inf;
      tensor[3] _t1B95#1 = <tensor[3]>[_t1B93,_t1B93,_t1B93];
      return _t1B95
      goto JOIN1B98
    JOIN1B98:  preds = [*RETURN(_t1B95)1B97,COND1B92]
      return up1B7E
    ASSIGN1B9B:  preds = [COND1B8C]
      real _t1B9A#2 = TensorIndex<tensor[3],[1]>(up1B7E);
      bool _t1B9C#1 = EQ<real>(_t1B9A,_t1B9A);
      bool _t1B9E#1 = BNot(_t1B9C);
      if _t1B9E then goto ASSIGN1BA2 else goto ASSIGN1BA6
    ASSIGN1BA2:  preds = [COND1BA0]
      bool _t1BA1#1 = true;
      goto JOIN1BA4
    JOIN1BA4:  preds = [ASSIGN1BA2,ASSIGN1BA9]
      bool _t1B90#1 = phi(_t1BA1,_t1BA3)
      goto JOIN1B91
    ASSIGN1BA6:  preds = [COND1BA0]
      real _t1BA5#2 = TensorIndex<tensor[3],[2]>(up1B7E);
      bool _t1BA7#1 = EQ<real>(_t1BA5,_t1BA5);
      bool _t1BA3#1 = BNot(_t1BA7);
      goto JOIN1BA4
}
  function tensor[3,3] fPerp1CDA (tensor[3] s1CDB#3) {
    ENTRY1CDC:  preds = []
      real x1CDD#2 = TensorIndex<tensor[3],[0]>(s1CDB);
      real y1CDF#3 = TensorIndex<tensor[3],[1]>(s1CDB);
      real z1CE1#2 = TensorIndex<tensor[3],[2]>(s1CDB);
      int _t1CE3#1 = 2;
      real _t1CE5#2 = λ(T0[])<(T0)^2> (y1CDF);
      real _t1CE7#3 = 0.2e1;
      real _t1CE9#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1CE7,x1CDD,y1CDF);
      real _t1CEB#2 = 0.e0;
      real _t1CED#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1CE7,y1CDF,z1CE1);
      tensor[3] _t1CEF#1 = <tensor[3]>[_t1CEB,_t1CED,_t1CE5];
      real _t1CF1#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1CE7,x1CDD,z1CE1);
      tensor[3] _t1CF3#1 = <tensor[3]>[_t1CED,_t1CF1,_t1CE9];
      tensor[3] _t1CF5#1 = <tensor[3]>[_t1CE5,_t1CE9,_t1CEB];
      tensor[3,3] hess1CF7#1 = <tensor[3,3]>[_t1CEF,_t1CF3,_t1CF5];
      (real[3] evals1CF9#0,tensor[3][3] _t1CFA#1) = EigenVecs3x3(hess1CF7);
      tensor[3] E21CFC#1 = Subscript<tensor[3][3]>(_t1CFA,_t1CE3);
      tensor[3,3] op1_e3_l_21CFF#1 = λ(T0[3])<(T0_{i0} * T0_{i1})>_{3 3} (E21CFC);
      tensor[3,3] m1CFE#3 = λ(T0[3 3])<(δ_{i0,i1}) - (T0_{i0,i1})>_{3 3} (op1_e3_l_21CFF);
      real t1D02#2 = λ(T0[3 3],T1[3 3])<Σ(i0=0..2)(i1=0..2)<((T0_{i0,i1} * T1_{i0,i1}))>(i0=0..2)(i1=0..2)> (m1CFE,m1CFE);
      bool _t1D08#1 = EQ<real>(t1D02,t1D02);
      bool _t1D0A#1 = BNot(_t1D08);
      if _t1D0A then goto ASSIGN1D0E else goto JOIN1D10
    ASSIGN1D0E:  preds = [COND1D0C]
      tensor[3,3] _t1D0D#1 = λ()<Z_{i0,i1}>_{3 3} ();
      return _t1D0D
      goto JOIN1D10
    JOIN1D10:  preds = [*RETURN(_t1D0D)1D0F,COND1D0C]
      return m1CFE
}
  function int sum1EBC (particle P1EBD#1) {
    ENTRY1EBE:  preds = []
      int _t1EBF#1 = P1EBD.test;
      return _t1EBF
}
  function int max1EC4 (particle P1EC5#1) {
    ENTRY1EC6:  preds = []
      int _t1EC7#1 = P1EC5.steps;
      return _t1EC7
}
  function int sum1ECC (particle P1ECD#1) {
    ENTRY1ECE:  preds = []
      int _t1ECF#1 = P1ECD.testp;
      return _t1ECF
}
  function bool all1ED4 (particle P1ED5#1) {
    ENTRY1ED6:  preds = []
      bool _t1ED7#1 = P1ED5.found;
      return _t1ED7
}
  function real max1EDC (particle P1EDD#1) {
    ENTRY1EDE:  preds = []
      tensor[3] _t1EDF#1 = P1EDD.step;
      real op1_e3_l_11EE2#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (_t1EDF);
      real _t1EE1#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_11EE2);
      return _t1EE1
}
## input initialization
  ENTRY1A64:  preds = []
    real rad1A65#5 = 0.1e-1;
    globals.rad1A5D = rad1A65;
    globals.eps1A5E = rad1A65;
    real v01A69#1 = 0.625e-1;
    globals.v01A5F = v01A69;
    globals.fBias1A60 = rad1A65;
    globals.fStren1A61 = rad1A65;
    globals.zfuz1A62 = rad1A65;
    return
## global-variable initialization
  ENTRY1A70:  preds = []
    femData:Mesh meshData1A71#2 = globals.meshData1A5A;
    int _t1A73#1 = 0;
    int _t1A75#1 = 1;
    int _t1A77#1 = ExtractFemItem<int,NumCell(Mesh)>(meshData1A71);
    int _t1A79#1 = ISub(_t1A77,_t1A75);
    int[] _t1A7B#1 = Range(_t1A73,_t1A79);
    femData:MeshCell[] _t1A7D#1 = <femData:MeshCell[]>{};
  FOREACH1A80:  preds = [ASSIGN1A7E,NEXT1A86]
    foreach (_t1A7F in _t1A7B) on exit goto RETURN1A87
      femData:MeshCell[] _t1A84#1 = phi(_t1A7D,_t1A83)
    femData:MeshCell _t1A81#1 = LoadFem<femData:MeshCell>(meshData1A71,_t1A7F);
    femData:MeshCell[] _t1A83#1 = Append<femData:MeshCell>(_t1A84,_t1A81);
    goto FOREACH1A80
  RETURN1A87:  preds = [FOREACH1A80]
    return
## strand
  strand particle (tensor[3] pos01A88#2, real hh01A89#1) in 3D
    state:
      output tensor[3] pos;
      output tensor[3] _pos;
      real hh;
      tensor[3] step;
      bool found;
      int nfs;
      int test;
      int testp;
      int steps;
    state init
      ENTRY1A93:  preds = []
        tensor[3] step1A94#1 = λ()<Z_{i0}>_{3} ();
        bool found1A96#1 = false;
        int nfs1A98#3 = 0;
        int test1A9A#1 = 1;
        self.pos = pos01A88;
        self._pos = pos01A88;
        self.hh = hh01A89;
        self.step = step1A94;
        self.found = found1A96;
        self.nfs = nfs1A98;
        self.test = test1A9A;
        self.testp = nfs1A98;
        self.steps = nfs1A98;
        return
    end state init
    method update
        ENTRY1AA6:  preds = []
          real rad1AA7#10 = globals.rad1A5D;
          real eps1AA9#1 = globals.eps1A5E;
          real fBias1AAB#3 = globals.fBias1A60;
          real fStren1AAD#3 = globals.fStren1A61;
          tensor[3] pos1AAF#13 = self.pos;
          real hh1AB1#7 = self.hh;
          bool found1AB3#3 = self.found;
          int nfs1AB5#3 = self.nfs;
          int testp1AB7#2 = self.testp;
          int steps1AB9#1 = self.steps;
          int _t1ABB#4 = 1;
          int steps1ABD#4 = IAdd(steps1AB9,_t1ABB);
          real _t1ABF#13 = 0.e0;
          tensor[3] _t1AC1#3 = <tensor[3]>[_t1ABF,_t1ABF,_t1ABF];
          tensor[3] mid1AC3#5 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (pos1AAF,_t1AC1);
          real _t1AC5#1 = TensorIndex<tensor[3],[0]>(mid1AC3);
          real _t1AC7#1 = λ(T0[])<Abs(T0)> (_t1AC5);
          real _t1AC9#9 = 0.1e0;
          bool _t1ACB#1 = GT<real>(_t1AC7,_t1AC9);
          if _t1ACB then goto ASSIGN1ACF else goto ASSIGN1EAA
        ASSIGN1ACF:  preds = [COND1ACD]
          real _t1ACE#1 = TensorIndex<tensor[3],[1]>(mid1AC3);
          real _t1AD0#1 = λ(T0[])<Abs(T0)> (_t1ACE);
          bool _t1AD2#1 = GT<real>(_t1AD0,_t1AC9);
          if _t1AD2 then goto ASSIGN1AD6 else goto ASSIGN1EA9
        ASSIGN1AD6:  preds = [COND1AD4]
          real _t1AD5#1 = TensorIndex<tensor[3],[2]>(mid1AC3);
          real _t1AD7#1 = λ(T0[])<Abs(T0)> (_t1AD5);
          bool _t1AD9#1 = GT<real>(_t1AD7,_t1AC9);
          goto JOIN1ADD
        JOIN1ADD:  preds = [ASSIGN1ADA,ASSIGN1EA9]
          bool _t1ADB#1 = phi(_t1AD9,_t1ADC)
          goto JOIN1AE0
        JOIN1AE0:  preds = [JOIN1ADD,ASSIGN1EAA]
          bool _t1ADE#1 = phi(_t1ADB,_t1ADF)
          real op1_e3_l_41AE3#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (mid1AC3,mid1AC3);
          real _t1AE1#2 = λ(T0[])<Sqrt(T0)> (op1_e3_l_41AE3);
          real _t1AE7#3 = 0.5e1;
          bool _t1AE9#1 = LT<real>(_t1AE1,_t1AE7);
          if _t1AE9 then goto ASSIGN1AED else goto ASSIGN1EA8
        ASSIGN1AED:  preds = [COND1AEB]
          real _t1AEC#1 = 0.2e1;
          bool _t1AEE#1 = GT<real>(_t1AE1,_t1AEC);
          if _t1AEE then goto JOIN1AF3 else goto ASSIGN1EA7
        JOIN1AF3:  preds = [COND1AF0,ASSIGN1EA7]
          bool _t1AF1#1 = phi(_t1ADE,_t1AF2)
          goto JOIN1AF6
        JOIN1AF6:  preds = [JOIN1AF3,ASSIGN1EA8]
          bool _t1AF4#1 = phi(_t1AF1,_t1AF5)
          if _t1AF4 then goto ASSIGN1AF9 else goto ASSIGN1EA6
        ASSIGN1AF9:  preds = [COND1AF7]
          real _t1AF8#6 = TensorIndex<tensor[3],[0]>(pos1AAF);
          bool _t1AFA#1 = EQ<real>(_t1AF8,_t1AF8);
          bool _t1AFC#1 = BNot(_t1AFA);
          if _t1AFC then goto ASSIGN1B00 else goto ASSIGN1E97
        ASSIGN1B00:  preds = [COND1AFE]
          bool _t1AFF#1 = true;
          goto JOIN1B03
        JOIN1B03:  preds = [ASSIGN1B00,JOIN1EA0]
          bool _t1B01#1 = phi(_t1AFF,_t1B02)
          bool _t1B04#1 = BNot(_t1B01);
          if _t1B04 then goto ASSIGN1B08 else goto ASSIGN1E95
        ASSIGN1B08:  preds = [COND1B06]
          real y1B07#4 = TensorIndex<tensor[3],[1]>(pos1AAF);
          real z1B09#4 = TensorIndex<tensor[3],[2]>(pos1AAF);
          int _t1B0B#1 = 2;
          real _t1B0D#4 = λ(T0[])<(T0)^2> (y1B07);
          real _t1B0F#1 = λ(T0[],T1[])<(T0 * T1)> (z1B09,_t1B0D);
          real _t1B13#4 = 0.2e1;
          real _t1B15#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1B13,_t1AF8,y1B07);
          real _t1B17#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t1B13,_t1AF8,y1B07,z1B09);
          real _t1B19#1 = λ(T0[],T1[])<(T0 * T1)> (_t1AF8,_t1B0D);
          tensor[3] g1B1D#1 = <tensor[3]>[_t1B0F,_t1B17,_t1B19];
          real _t1B1F#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1B13,y1B07,z1B09);
          tensor[3] _t1B21#1 = <tensor[3]>[_t1ABF,_t1B1F,_t1B0D];
          real _t1B23#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1B13,_t1AF8,z1B09);
          tensor[3] _t1B25#1 = <tensor[3]>[_t1B1F,_t1B23,_t1B15];
          tensor[3] _t1B27#1 = <tensor[3]>[_t1B0D,_t1B15,_t1ABF];
          tensor[3,3] hess1B29#1 = <tensor[3,3]>[_t1B21,_t1B25,_t1B27];
          real[3] _t1B2B#1 = EigenVals3x3(hess1B29);
          real _t1B2E#1 = Subscript<real[3]>(_t1B2B,_t1B0B);
          real op1_e3_l_31B31#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (g1B1D);
          real op1_e3_l_41B32#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_31B31);
          real op1_e3_l_51B33#1 = λ(T0[])<Neg(T0)> (_t1B2E);
          real op1_e3_l_61B34#1 = λ(T0[],T1[])<(T0 + T1)> (fBias1AAB,op1_e3_l_41B32);
          real str1B30#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_51B33,op1_e3_l_61B34);
          bool _t1B3A#1 = GTE<real>(str1B30,fStren1AAD);
          goto JOIN1B3E
        JOIN1B3E:  preds = [ASSIGN1B3B,ASSIGN1E95]
          bool _t1B3C#1 = phi(_t1B3A,_t1B3D)
          goto JOIN1B41
        JOIN1B41:  preds = [JOIN1B3E,ASSIGN1EA6]
          bool _t1B3F#1 = phi(_t1B3C,_t1B40)
          bool _t1B42#1 = BNot(_t1B3F);
          if _t1B42 then goto DIE1B45 else goto JOIN1B46
        DIE1B45:  preds = [COND1B44]
          die
          goto JOIN1B46
        JOIN1B46:  preds = [*DIE1B45,COND1B44]
          bool _t1B47#1 = BNot(found1AB3);
          if _t1B47 then goto ASSIGN1BAB else goto ASSIGN1BF9
        ASSIGN1BAB:  preds = [COND1B49]
          tensor[3] step1BAA#3 = fStep1B4A (pos1AAF);
          tensor[3] pos1BAC#4 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos1AAF,step1BAA);
          real _t1BAE#2 = TensorIndex<tensor[3],[0]>(pos1BAC);
          bool _t1BB0#1 = EQ<real>(_t1BAE,_t1BAE);
          bool _t1BB2#1 = BNot(_t1BB0);
          if _t1BB2 then goto ASSIGN1BB6 else goto ASSIGN1BE9
        ASSIGN1BB6:  preds = [COND1BB4]
          bool _t1BB5#1 = true;
          goto JOIN1BB9
        JOIN1BB9:  preds = [ASSIGN1BB6,JOIN1BF2]
          bool _t1BB7#1 = phi(_t1BB5,_t1BB8)
          if _t1BB7 then goto DIE1BBB else goto JOIN1BBC
        DIE1BBB:  preds = [COND1BBA]
          die
          goto JOIN1BBC
        JOIN1BBC:  preds = [*DIE1BBB,COND1BBA]
          real op1_e3_l_21BBE#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (step1BAA);
          real op1_e3_l_31BBF#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_21BBE);
          real _t1BBD#1 = λ(T0[],T1[])<(T1) / ( T0)> (rad1AA7,op1_e3_l_31BBF);
          bool _t1BC3#1 = GT<real>(_t1BBD,eps1AA9);
          if _t1BC3 then goto ASSIGN1BC7 else goto ASSIGN1BE7
        ASSIGN1BC7:  preds = [COND1BC5]
          int nfs1BC6#2 = IAdd(nfs1AB5,_t1ABB);
          int _t1BC8#1 = 10;
          bool _t1BCA#1 = GT<int>(nfs1BC6,_t1BC8);
          if _t1BCA then goto DIE1BCD else goto JOIN1BCE
        DIE1BCD:  preds = [COND1BCC]
          die
          goto JOIN1BCE
        JOIN1BCE:  preds = [*DIE1BCD,COND1BCC]
          goto JOIN1BD3
        JOIN1BD3:  preds = [JOIN1BCE,ASSIGN1BE7]
          int testp1BCF#1 = phi(testp1AB7,_t1ABB)
          int nfs1BD0#1 = phi(nfs1BC6,nfs1AB5)
          bool found1BD1#1 = phi(found1AB3,found1BD2)
          goto JOIN1BDD
        JOIN1BDD:  preds = [JOIN1BD3,JOIN1E48]
          int testp1BD4#1 = phi(testp1BCF,testp1AB7)
          int nfs1BD5#1 = phi(nfs1BD0,nfs1AB5)
          bool found1BD6#1 = phi(found1BD1,found1AB3)
          tensor[3] step1BD7#1 = phi(step1BAA,up1BD8)
          real hh1BD9#1 = phi(hh1AB1,hh1BDA)
          tensor[3] pos1BDB#2 = phi(pos1BAC,pos1BDC)
          self.pos = pos1BDB;
          self._pos = pos1BDB;
          self.hh = hh1BD9;
          self.step = step1BD7;
          self.found = found1BD6;
          self.nfs = nfs1BD5;
          self.testp = testp1BD4;
          self.steps = steps1ABD;
          active
        ASSIGN1BE7:  preds = [COND1BC5]
          bool found1BD2#1 = true;
          goto JOIN1BD3
        ASSIGN1BE9:  preds = [COND1BB4]
          real _t1BE8#2 = TensorIndex<tensor[3],[1]>(pos1BAC);
          bool _t1BEA#1 = EQ<real>(_t1BE8,_t1BE8);
          bool _t1BEC#1 = BNot(_t1BEA);
          if _t1BEC then goto ASSIGN1BF0 else goto ASSIGN1BF4
        ASSIGN1BF0:  preds = [COND1BEE]
          bool _t1BEF#1 = true;
          goto JOIN1BF2
        JOIN1BF2:  preds = [ASSIGN1BF0,ASSIGN1BF7]
          bool _t1BB8#1 = phi(_t1BEF,_t1BF1)
          goto JOIN1BB9
        ASSIGN1BF4:  preds = [COND1BEE]
          real _t1BF3#2 = TensorIndex<tensor[3],[2]>(pos1BAC);
          bool _t1BF5#1 = EQ<real>(_t1BF3,_t1BF3);
          bool _t1BF1#1 = BNot(_t1BF5);
          goto JOIN1BF2
        ASSIGN1BF9:  preds = [COND1B49]
          tensor[3] _t1BF8#4 = fStep1B4A (pos1AAF);
          tensor[3] pos1BFA#13 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos1AAF,_t1BF8);
          real _t1BFC#2 = TensorIndex<tensor[3],[0]>(pos1BFA);
          bool _t1BFE#1 = EQ<real>(_t1BFC,_t1BFC);
          bool _t1C00#1 = BNot(_t1BFE);
          if _t1C00 then goto ASSIGN1C04 else goto ASSIGN1E86
        ASSIGN1C04:  preds = [COND1C02]
          bool _t1C03#1 = true;
          goto JOIN1C07
        JOIN1C07:  preds = [ASSIGN1C04,JOIN1E8F]
          bool _t1C05#1 = phi(_t1C03,_t1C06)
          if _t1C05 then goto DIE1C09 else goto JOIN1C0A
        DIE1C09:  preds = [COND1C08]
          die
          goto JOIN1C0A
        JOIN1C0A:  preds = [*DIE1C09,COND1C08]
          tensor[3] step1C0B#4 = λ()<Z_{i0}>_{3} ();
          int nn1C0D#2 = 0;
          particle[] _t1C0F#1 = SphereQuery<3,particle>(pos1BFA,rad1AA7);
        FOREACH1C12:  preds = [ASSIGN1C10,NEXT1C46]
          foreach (P1C11 in _t1C0F) on exit goto ASSIGN1C48
            int nn1C44#3 = phi(nn1C0D,nn1C43)
            tensor[3] force1C2D#2 = phi(step1C0B,force1C2C)
            real oldE1C18#2 = phi(_t1ABF,oldE1C17)
          tensor[3] _t1C13#1 = P1C11.pos;
          real _t1C15#2 = 0.1e1;
          tensor[3] op1_e3_l_81C1A#3 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (_t1C13,pos1BFA);
          real op1_e3_l_101C1B#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_81C1A,op1_e3_l_81C1A);
          real op1_e3_l_111C1C#2 = λ(T0[])<Sqrt(T0)> (op1_e3_l_101C1B);
          real op1_e3_l_121C1D#1 = λ(T0[],T1[])<(T1) / ( T0)> (rad1AA7,op1_e3_l_111C1C);
          real op1_e3_l_131C1E#2 = λ(T0[],T1[])<(T0) - (T1)> (_t1C15,op1_e3_l_121C1D);
          real op1_e3_l_141C1F#1 = λ(T0[])<(T0)^4> (op1_e3_l_131C1E);
          real oldE1C17#1 = λ(T0[],T1[])<(T0 + T1)> (oldE1C18,op1_e3_l_141C1F);
          real _t1C2A#1 = -0.4e1;
          real op1_e3_l_241C34#1 = λ(T0[])<(T0)^3> (op1_e3_l_131C1E);
          real op1_e3_l_251C35#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t1C15,rad1AA7);
          tensor[3] op1_e3_l_321C36#1 = λ(T0[],T1[],T2[],T3[3])<(T0 * T1 * T2 * T3_{i0})>_{3} (_t1C2A,op1_e3_l_241C34,op1_e3_l_251C35,op1_e3_l_81C1A);
          tensor[3] op1_e3_l_341C37#1 = λ(T0[3],T1[])<(T0_{i0}) / ( T1)>_{3} (op1_e3_l_321C36,op1_e3_l_111C1C);
          tensor[3] force1C2C#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (force1C2D,op1_e3_l_341C37);
          int nn1C43#1 = IAdd(nn1C44,_t1ABB);
          goto FOREACH1C12
        ASSIGN1C48:  preds = [FOREACH1C12]
          bool _t1C47#1 = EQ<int>(nn1C0D,nn1C44);
          if _t1C47 then goto ASSIGN1C4B else goto JOIN1CD9
        ASSIGN1C4B:  preds = [COND1C49]
          real _t1C4A#1 = 0.5e0;
          real _t1C4C#1 = λ(T0[],T1[])<(T0 * T1)> (_t1C4A,rad1AA7);
          tensor[3] _t1C4E#1 = <tensor[3]>[_t1C4C,_t1ABF,_t1ABF];
          tensor[3] npos1C50#7 = λ(T0[3],T1[3],T2[3])<(T0_{i0} + T1_{i0} + T2_{i0})>_{3} (pos1AAF,_t1BF8,_t1C4E);
          tensor[3] mid1C52#5 = λ(T0[3],T1[3])<(T1_{i0}) - (T0_{i0})>_{3} (_t1AC1,npos1C50);
          real _t1C56#1 = TensorIndex<tensor[3],[0]>(mid1C52);
          real _t1C58#1 = λ(T0[])<Abs(T0)> (_t1C56);
          bool _t1C5A#1 = GT<real>(_t1C58,_t1AC9);
          if _t1C5A then goto ASSIGN1C5E else goto ASSIGN1E84
        ASSIGN1C5E:  preds = [COND1C5C]
          real _t1C5D#1 = TensorIndex<tensor[3],[1]>(mid1C52);
          real _t1C5F#1 = λ(T0[])<Abs(T0)> (_t1C5D);
          bool _t1C61#1 = GT<real>(_t1C5F,_t1AC9);
          if _t1C61 then goto ASSIGN1C65 else goto ASSIGN1E83
        ASSIGN1C65:  preds = [COND1C63]
          real _t1C64#1 = TensorIndex<tensor[3],[2]>(mid1C52);
          real _t1C66#1 = λ(T0[])<Abs(T0)> (_t1C64);
          bool _t1C68#1 = GT<real>(_t1C66,_t1AC9);
          goto JOIN1C6C
        JOIN1C6C:  preds = [ASSIGN1C69,ASSIGN1E83]
          bool _t1C6A#1 = phi(_t1C68,_t1C6B)
          goto JOIN1C6F
        JOIN1C6F:  preds = [JOIN1C6C,ASSIGN1E84]
          bool _t1C6D#1 = phi(_t1C6A,_t1C6E)
          real op1_e3_l_81C73#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (mid1C52,mid1C52);
          real _t1C70#2 = λ(T0[])<Sqrt(T0)> (op1_e3_l_81C73);
          bool _t1C78#1 = LT<real>(_t1C70,_t1AE7);
          if _t1C78 then goto ASSIGN1C7C else goto ASSIGN1E82
        ASSIGN1C7C:  preds = [COND1C7A]
          real _t1C7B#1 = 0.2e1;
          bool _t1C7D#1 = GT<real>(_t1C70,_t1C7B);
          if _t1C7D then goto JOIN1C82 else goto ASSIGN1E81
        JOIN1C82:  preds = [COND1C7F,ASSIGN1E81]
          bool _t1C80#1 = phi(_t1C6D,_t1C81)
          goto JOIN1C85
        JOIN1C85:  preds = [JOIN1C82,ASSIGN1E82]
          bool _t1C83#1 = phi(_t1C80,_t1C84)
          if _t1C83 then goto ASSIGN1C88 else goto ASSIGN1E80
        ASSIGN1C88:  preds = [COND1C86]
          real _t1C87#6 = TensorIndex<tensor[3],[0]>(npos1C50);
          bool _t1C89#1 = EQ<real>(_t1C87,_t1C87);
          bool _t1C8B#1 = BNot(_t1C89);
          if _t1C8B then goto ASSIGN1C8F else goto ASSIGN1E71
        ASSIGN1C8F:  preds = [COND1C8D]
          bool _t1C8E#1 = true;
          goto JOIN1C92
        JOIN1C92:  preds = [ASSIGN1C8F,JOIN1E7A]
          bool _t1C90#1 = phi(_t1C8E,_t1C91)
          bool _t1C93#1 = BNot(_t1C90);
          if _t1C93 then goto ASSIGN1C97 else goto ASSIGN1E6F
        ASSIGN1C97:  preds = [COND1C95]
          real y1C96#4 = TensorIndex<tensor[3],[1]>(npos1C50);
          real z1C98#4 = TensorIndex<tensor[3],[2]>(npos1C50);
          int _t1C9A#1 = 2;
          real _t1C9C#4 = λ(T0[])<(T0)^2> (y1C96);
          real _t1C9E#1 = λ(T0[],T1[])<(T0 * T1)> (z1C98,_t1C9C);
          real _t1CA2#4 = 0.2e1;
          real _t1CA4#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1CA2,_t1C87,y1C96);
          real _t1CA6#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t1CA2,_t1C87,y1C96,z1C98);
          real _t1CA8#1 = λ(T0[],T1[])<(T0 * T1)> (_t1C87,_t1C9C);
          tensor[3] g1CAC#1 = <tensor[3]>[_t1C9E,_t1CA6,_t1CA8];
          real _t1CAE#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1CA2,y1C96,z1C98);
          tensor[3] _t1CB0#1 = <tensor[3]>[_t1ABF,_t1CAE,_t1C9C];
          real _t1CB2#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1CA2,_t1C87,z1C98);
          tensor[3] _t1CB4#1 = <tensor[3]>[_t1CAE,_t1CB2,_t1CA4];
          tensor[3] _t1CB6#1 = <tensor[3]>[_t1C9C,_t1CA4,_t1ABF];
          tensor[3,3] hess1CB8#1 = <tensor[3,3]>[_t1CB0,_t1CB4,_t1CB6];
          real[3] _t1CBA#1 = EigenVals3x3(hess1CB8);
          real _t1CBD#1 = Subscript<real[3]>(_t1CBA,_t1C9A);
          real op1_e3_l_31CC0#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (g1CAC);
          real op1_e3_l_41CC1#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_31CC0);
          real op1_e3_l_51CC2#1 = λ(T0[])<Neg(T0)> (_t1CBD);
          real op1_e3_l_61CC3#1 = λ(T0[],T1[])<(T0 + T1)> (fBias1AAB,op1_e3_l_41CC1);
          real str1CBF#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_51CC2,op1_e3_l_61CC3);
          bool _t1CC9#1 = GTE<real>(str1CBF,fStren1AAD);
          goto JOIN1CCD
        JOIN1CCD:  preds = [ASSIGN1CCA,ASSIGN1E6F]
          bool _t1CCB#1 = phi(_t1CC9,_t1CCC)
          goto JOIN1CD0
        JOIN1CD0:  preds = [JOIN1CCD,ASSIGN1E80]
          bool _t1CCE#1 = phi(_t1CCB,_t1CCF)
          if _t1CCE then goto NEW1CD2 else goto JOIN1CD3
        NEW1CD2:  preds = [COND1CD1]
          new particle(npos1C50,hh1AB1);
          goto JOIN1CD3
        JOIN1CD3:  preds = [NEW1CD2,COND1CD1]
          self.pos = pos1BFA;
          self._pos = pos1BFA;
          self.step = step1C0B;
          self.steps = steps1ABD;
          active
          goto JOIN1CD9
        JOIN1CD9:  preds = [*ACTIVE1CD8,COND1C49]
          tensor[3,3] _t1D12#1 = fPerp1CDA (pos1BFA);
          tensor[3] op1_e3_l_31D15#5 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (_t1D12,force1C2D);
          tensor[3] es1D14#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (hh1AB1,op1_e3_l_31D15);
          real op1_e3_l_51D1A#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_31D15,op1_e3_l_31D15);
          real op1_e3_l_61D1B#1 = λ(T0[],T1[])<(T0 * T0 * T1)> (hh1AB1,op1_e3_l_51D1A);
          real _t1D18#2 = λ(T0[])<Sqrt(T0)> (op1_e3_l_61D1B);
          bool _t1D20#1 = GT<real>(_t1D18,rad1AA7);
          if _t1D20 then goto ASSIGN1F13 else goto JOIN1D3D
        ASSIGN1F13:  preds = [COND1D22]
          real op1_e3_l_101D28#2 = λ(T0[],T1[])<(T0) / ( T1)> (rad1AA7,_t1D18);
          real hh1D23#1 = λ(T0[],T1[])<(T0 * T1)> (hh1AB1,op1_e3_l_101D28);
          tensor[3] es1D2F#1 = λ(T0[],T1[],T2[3])<(T0 * T1 * T2_{i0})>_{3} (hh1AB1,op1_e3_l_101D28,op1_e3_l_31D15);
          goto JOIN1D3D
        JOIN1D3D:  preds = [ASSIGN1F14,COND1D22]
          tensor[3] es1D3B#5 = phi(es1D2F,es1D14)
          real hh1D3C#2 = phi(hh1D23,hh1AB1)
          tensor[3] samplePos1D3E#1 = λ(T0[3],T1[3],T2[3])<(T0_{i0} + T1_{i0} + T2_{i0})>_{3} (pos1AAF,_t1BF8,es1D3B);
          tensor[3] fs1D40#3 = fStep1B4A (samplePos1D3E);
          real op1_e3_l_21D43#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (fs1D40);
          real op1_e3_l_31D44#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (es1D3B);
          real op1_e3_l_41D45#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_21D43);
          real op1_e3_l_51D46#2 = λ(T0[])<Sqrt(T0)> (op1_e3_l_31D44);
          real _t1D42#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_41D45,op1_e3_l_51D46);
          real _t1D4C#5 = 0.5e0;
          bool _t1D4E#1 = GT<real>(_t1D42,_t1D4C);
          if _t1D4E then goto ASSIGN1D52 else goto JOIN1D5A
        ASSIGN1D52:  preds = [COND1D50]
          real hh1D51#1 = λ(T0[],T1[])<(T0 * T1)> (hh1D3C,_t1D4C);
          self.pos = pos1BFA;
          self._pos = pos1BFA;
          self.hh = hh1D51;
          self.step = step1C0B;
          self.steps = steps1ABD;
          active
          goto JOIN1D5A
        JOIN1D5A:  preds = [*ACTIVE1D58,COND1D50]
          real hh1D59#2 = phi(hh1D3C)
          tensor[3] up1BD8#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (fs1D40,es1D3B);
          tensor[3] pos1D5C#4 = λ(T0[3],T1[3],T2[3],T3[3])<(T0_{i0} + T1_{i0} + T2_{i0} + T3_{i0})>_{3} (pos1AAF,_t1BF8,fs1D40,es1D3B);
          particle[] _t1D5E#1 = SphereQuery<3,particle>(pos1D5C,rad1AA7);
        FOREACH1D61:  preds = [ASSIGN1D5F,NEXT1D77]
          foreach (P1D60 in _t1D5E) on exit goto ASSIGN1D79
            real accum1D67#2 = phi(_t1ABF,accum1D66)
          tensor[3] _t1D62#1 = P1D60.pos;
          real _t1D64#1 = 0.1e1;
          tensor[3] op1_e3_l_101D69#2 = λ(T0[3],T1[3])<(T1_{i0}) - (T0_{i0})>_{3} (_t1D62,pos1D5C);
          real op1_e3_l_121D6A#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_101D69,op1_e3_l_101D69);
          real op1_e3_l_131D6B#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_121D6A);
          real op1_e3_l_141D6C#1 = λ(T0[],T1[])<(T1) / ( T0)> (rad1AA7,op1_e3_l_131D6B);
          real op1_e3_l_151D6D#1 = λ(T0[],T1[])<(T0) - (T1)> (_t1D64,op1_e3_l_141D6C);
          real op1_e3_l_161D6E#1 = λ(T0[])<(T0)^4> (op1_e3_l_151D6D);
          real accum1D66#1 = λ(T0[],T1[])<(T0 + T1)> (accum1D67,op1_e3_l_161D6E);
          goto FOREACH1D61
        ASSIGN1D79:  preds = [FOREACH1D61]
          real _t1D78#1 = λ(T0[],T1[])<(T0) - (T1)> (accum1D67,oldE1C18);
          tensor[3] op1_e3_l_121D7E#1 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (pos1D5C,pos1BFA);
          tensor[3] op1_e3_l_131D7F#1 = λ(T0[3])<Neg(T0_{i0})>_{3} (op1_e3_l_31D15);
          real op1_e3_l_141D80#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_121D7E,op1_e3_l_131D7F);
          real _t1D7A#1 = λ(T0[],T1[])<(T0 * T1)> (_t1D4C,op1_e3_l_141D80);
          bool _t1D88#1 = GT<real>(_t1D78,_t1D7A);
          if _t1D88 then goto ASSIGN1D8C else goto JOIN1D94
        ASSIGN1D8C:  preds = [COND1D8A]
          real hh1D8B#1 = λ(T0[],T1[])<(T0 * T1)> (hh1D59,_t1D4C);
          self.pos = pos1BFA;
          self._pos = pos1BFA;
          self.hh = hh1D8B;
          self.step = step1C0B;
          self.steps = steps1ABD;
          active
          goto JOIN1D94
        JOIN1D94:  preds = [*ACTIVE1D92,COND1D8A]
          real hh1D93#1 = phi(hh1D59)
          tensor[3] pos1BDC#5 = phi(pos1D5C)
          real _t1D95#1 = 0.11e1;
          real hh1BDA#2 = λ(T0[],T1[])<(T0 * T1)> (hh1D93,_t1D95);
          real _t1D98#2 = TensorIndex<tensor[3],[0]>(pos1BDC);
          bool _t1D9A#1 = EQ<real>(_t1D98,_t1D98);
          bool _t1D9C#1 = BNot(_t1D9A);
          if _t1D9C then goto ASSIGN1DA0 else goto ASSIGN1E60
        ASSIGN1DA0:  preds = [COND1D9E]
          bool _t1D9F#1 = true;
          goto JOIN1DA3
        JOIN1DA3:  preds = [ASSIGN1DA0,JOIN1E69]
          bool _t1DA1#1 = phi(_t1D9F,_t1DA2)
          if _t1DA1 then goto DIE1DA5 else goto JOIN1DA6
        DIE1DA5:  preds = [COND1DA4]
          die
          goto JOIN1DA6
        JOIN1DA6:  preds = [*DIE1DA5,COND1DA4]
          int _t1DA7#1 = 5;
          bool _t1DA9#1 = LT<int>(nn1C44,_t1DA7);
          if _t1DA9 then goto ASSIGN1F17 else goto JOIN1E48
        ASSIGN1F17:  preds = [COND1DAB]
          real op1_e3_l_71DAF#1 = λ(T0[])<(1) / ( T0)> (op1_e3_l_51D46);
          tensor[3] op1_e3_l_81DB0#1 = λ(T0[],T1[],T2[3],T3[])<(T0 * T1 * T2_{i0} * T3)>_{3} (_t1D4C,rad1AA7,es1D3B,op1_e3_l_71DAF);
          tensor[3] npos1DAC#7 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos1BDC,op1_e3_l_81DB0);
          tensor[3] mid1DB6#5 = λ(T0[3],T1[3])<(T1_{i0}) - (T0_{i0})>_{3} (_t1AC1,npos1DAC);
          real _t1DC2#1 = TensorIndex<tensor[3],[0]>(mid1DB6);
          real _t1DC4#1 = λ(T0[])<Abs(T0)> (_t1DC2);
          bool _t1DC6#1 = GT<real>(_t1DC4,_t1AC9);
          if _t1DC6 then goto ASSIGN1DCA else goto ASSIGN1E5E
        ASSIGN1DCA:  preds = [COND1DC8]
          real _t1DC9#1 = TensorIndex<tensor[3],[1]>(mid1DB6);
          real _t1DCB#1 = λ(T0[])<Abs(T0)> (_t1DC9);
          bool _t1DCD#1 = GT<real>(_t1DCB,_t1AC9);
          if _t1DCD then goto ASSIGN1DD1 else goto ASSIGN1E5D
        ASSIGN1DD1:  preds = [COND1DCF]
          real _t1DD0#1 = TensorIndex<tensor[3],[2]>(mid1DB6);
          real _t1DD2#1 = λ(T0[])<Abs(T0)> (_t1DD0);
          bool _t1DD4#1 = GT<real>(_t1DD2,_t1AC9);
          goto JOIN1DD8
        JOIN1DD8:  preds = [ASSIGN1DD5,ASSIGN1E5D]
          bool _t1DD6#1 = phi(_t1DD4,_t1DD7)
          goto JOIN1DDB
        JOIN1DDB:  preds = [JOIN1DD8,ASSIGN1E5E]
          bool _t1DD9#1 = phi(_t1DD6,_t1DDA)
          real op1_e3_l_181DE3#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (mid1DB6,mid1DB6);
          real _t1DDC#2 = λ(T0[])<Sqrt(T0)> (op1_e3_l_181DE3);
          bool _t1DEC#1 = LT<real>(_t1DDC,_t1AE7);
          if _t1DEC then goto ASSIGN1DF0 else goto ASSIGN1E5C
        ASSIGN1DF0:  preds = [COND1DEE]
          real _t1DEF#1 = 0.2e1;
          bool _t1DF1#1 = GT<real>(_t1DDC,_t1DEF);
          if _t1DF1 then goto JOIN1DF6 else goto ASSIGN1E5B
        JOIN1DF6:  preds = [COND1DF3,ASSIGN1E5B]
          bool _t1DF4#1 = phi(_t1DD9,_t1DF5)
          goto JOIN1DF9
        JOIN1DF9:  preds = [JOIN1DF6,ASSIGN1E5C]
          bool _t1DF7#1 = phi(_t1DF4,_t1DF8)
          if _t1DF7 then goto ASSIGN1DFC else goto ASSIGN1E5A
        ASSIGN1DFC:  preds = [COND1DFA]
          real _t1DFB#6 = TensorIndex<tensor[3],[0]>(npos1DAC);
          bool _t1DFD#1 = EQ<real>(_t1DFB,_t1DFB);
          bool _t1DFF#1 = BNot(_t1DFD);
          if _t1DFF then goto ASSIGN1E03 else goto ASSIGN1E4B
        ASSIGN1E03:  preds = [COND1E01]
          bool _t1E02#1 = true;
          goto JOIN1E06
        JOIN1E06:  preds = [ASSIGN1E03,JOIN1E54]
          bool _t1E04#1 = phi(_t1E02,_t1E05)
          bool _t1E07#1 = BNot(_t1E04);
          if _t1E07 then goto ASSIGN1E0B else goto ASSIGN1E49
        ASSIGN1E0B:  preds = [COND1E09]
          real y1E0A#4 = TensorIndex<tensor[3],[1]>(npos1DAC);
          real z1E0C#4 = TensorIndex<tensor[3],[2]>(npos1DAC);
          int _t1E0E#1 = 2;
          real _t1E10#4 = λ(T0[])<(T0)^2> (y1E0A);
          real _t1E12#1 = λ(T0[],T1[])<(T0 * T1)> (z1E0C,_t1E10);
          real _t1E16#4 = 0.2e1;
          real _t1E18#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1E16,_t1DFB,y1E0A);
          real _t1E1A#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t1E16,_t1DFB,y1E0A,z1E0C);
          real _t1E1C#1 = λ(T0[],T1[])<(T0 * T1)> (_t1DFB,_t1E10);
          tensor[3] g1E20#1 = <tensor[3]>[_t1E12,_t1E1A,_t1E1C];
          real _t1E22#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1E16,y1E0A,z1E0C);
          tensor[3] _t1E24#1 = <tensor[3]>[_t1ABF,_t1E22,_t1E10];
          real _t1E26#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1E16,_t1DFB,z1E0C);
          tensor[3] _t1E28#1 = <tensor[3]>[_t1E22,_t1E26,_t1E18];
          tensor[3] _t1E2A#1 = <tensor[3]>[_t1E10,_t1E18,_t1ABF];
          tensor[3,3] hess1E2C#1 = <tensor[3,3]>[_t1E24,_t1E28,_t1E2A];
          real[3] _t1E2E#1 = EigenVals3x3(hess1E2C);
          real _t1E31#1 = Subscript<real[3]>(_t1E2E,_t1E0E);
          real op1_e3_l_31E34#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (g1E20);
          real op1_e3_l_41E35#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_31E34);
          real op1_e3_l_51E36#1 = λ(T0[])<Neg(T0)> (_t1E31);
          real op1_e3_l_61E37#1 = λ(T0[],T1[])<(T0 + T1)> (fBias1AAB,op1_e3_l_41E35);
          real str1E33#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_51E36,op1_e3_l_61E37);
          bool _t1E3D#1 = GTE<real>(str1E33,fStren1AAD);
          goto JOIN1E41
        JOIN1E41:  preds = [ASSIGN1E3E,ASSIGN1E49]
          bool _t1E3F#1 = phi(_t1E3D,_t1E40)
          goto JOIN1E44
        JOIN1E44:  preds = [JOIN1E41,ASSIGN1E5A]
          bool _t1E42#1 = phi(_t1E3F,_t1E43)
          if _t1E42 then goto NEW1E46 else goto JOIN1E47
        NEW1E46:  preds = [COND1E45]
          new particle(npos1DAC,hh1BDA);
          goto JOIN1E47
        JOIN1E47:  preds = [NEW1E46,COND1E45]
          goto JOIN1E48
        JOIN1E48:  preds = [JOIN1E47,COND1DAB]
          goto JOIN1BDD
        ASSIGN1E49:  preds = [COND1E09]
          bool _t1E40#1 = false;
          goto JOIN1E41
        ASSIGN1E4B:  preds = [COND1E01]
          real _t1E4A#2 = TensorIndex<tensor[3],[1]>(npos1DAC);
          bool _t1E4C#1 = EQ<real>(_t1E4A,_t1E4A);
          bool _t1E4E#1 = BNot(_t1E4C);
          if _t1E4E then goto ASSIGN1E52 else goto ASSIGN1E56
        ASSIGN1E52:  preds = [COND1E50]
          bool _t1E51#1 = true;
          goto JOIN1E54
        JOIN1E54:  preds = [ASSIGN1E52,ASSIGN1E59]
          bool _t1E05#1 = phi(_t1E51,_t1E53)
          goto JOIN1E06
        ASSIGN1E56:  preds = [COND1E50]
          real _t1E55#2 = TensorIndex<tensor[3],[2]>(npos1DAC);
          bool _t1E57#1 = EQ<real>(_t1E55,_t1E55);
          bool _t1E53#1 = BNot(_t1E57);
          goto JOIN1E54
        ASSIGN1E5A:  preds = [COND1DFA]
          bool _t1E43#1 = false;
          goto JOIN1E44
        ASSIGN1E5B:  preds = [COND1DF3]
          bool _t1DF5#1 = false;
          goto JOIN1DF6
        ASSIGN1E5C:  preds = [COND1DEE]
          bool _t1DF8#1 = false;
          goto JOIN1DF9
        ASSIGN1E5D:  preds = [COND1DCF]
          bool _t1DD7#1 = false;
          goto JOIN1DD8
        ASSIGN1E5E:  preds = [COND1DC8]
          bool _t1DDA#1 = false;
          goto JOIN1DDB
        ASSIGN1E60:  preds = [COND1D9E]
          real _t1E5F#2 = TensorIndex<tensor[3],[1]>(pos1BDC);
          bool _t1E61#1 = EQ<real>(_t1E5F,_t1E5F);
          bool _t1E63#1 = BNot(_t1E61);
          if _t1E63 then goto ASSIGN1E67 else goto ASSIGN1E6B
        ASSIGN1E67:  preds = [COND1E65]
          bool _t1E66#1 = true;
          goto JOIN1E69
        JOIN1E69:  preds = [ASSIGN1E67,ASSIGN1E6E]
          bool _t1DA2#1 = phi(_t1E66,_t1E68)
          goto JOIN1DA3
        ASSIGN1E6B:  preds = [COND1E65]
          real _t1E6A#2 = TensorIndex<tensor[3],[2]>(pos1BDC);
          bool _t1E6C#1 = EQ<real>(_t1E6A,_t1E6A);
          bool _t1E68#1 = BNot(_t1E6C);
          goto JOIN1E69
        ASSIGN1E6F:  preds = [COND1C95]
          bool _t1CCC#1 = false;
          goto JOIN1CCD
        ASSIGN1E71:  preds = [COND1C8D]
          real _t1E70#2 = TensorIndex<tensor[3],[1]>(npos1C50);
          bool _t1E72#1 = EQ<real>(_t1E70,_t1E70);
          bool _t1E74#1 = BNot(_t1E72);
          if _t1E74 then goto ASSIGN1E78 else goto ASSIGN1E7C
        ASSIGN1E78:  preds = [COND1E76]
          bool _t1E77#1 = true;
          goto JOIN1E7A
        JOIN1E7A:  preds = [ASSIGN1E78,ASSIGN1E7F]
          bool _t1C91#1 = phi(_t1E77,_t1E79)
          goto JOIN1C92
        ASSIGN1E7C:  preds = [COND1E76]
          real _t1E7B#2 = TensorIndex<tensor[3],[2]>(npos1C50);
          bool _t1E7D#1 = EQ<real>(_t1E7B,_t1E7B);
          bool _t1E79#1 = BNot(_t1E7D);
          goto JOIN1E7A
        ASSIGN1E80:  preds = [COND1C86]
          bool _t1CCF#1 = false;
          goto JOIN1CD0
        ASSIGN1E81:  preds = [COND1C7F]
          bool _t1C81#1 = false;
          goto JOIN1C82
        ASSIGN1E82:  preds = [COND1C7A]
          bool _t1C84#1 = false;
          goto JOIN1C85
        ASSIGN1E83:  preds = [COND1C63]
          bool _t1C6B#1 = false;
          goto JOIN1C6C
        ASSIGN1E84:  preds = [COND1C5C]
          bool _t1C6E#1 = false;
          goto JOIN1C6F
        ASSIGN1E86:  preds = [COND1C02]
          real _t1E85#2 = TensorIndex<tensor[3],[1]>(pos1BFA);
          bool _t1E87#1 = EQ<real>(_t1E85,_t1E85);
          bool _t1E89#1 = BNot(_t1E87);
          if _t1E89 then goto ASSIGN1E8D else goto ASSIGN1E91
        ASSIGN1E8D:  preds = [COND1E8B]
          bool _t1E8C#1 = true;
          goto JOIN1E8F
        JOIN1E8F:  preds = [ASSIGN1E8D,ASSIGN1E94]
          bool _t1C06#1 = phi(_t1E8C,_t1E8E)
          goto JOIN1C07
        ASSIGN1E91:  preds = [COND1E8B]
          real _t1E90#2 = TensorIndex<tensor[3],[2]>(pos1BFA);
          bool _t1E92#1 = EQ<real>(_t1E90,_t1E90);
          bool _t1E8E#1 = BNot(_t1E92);
          goto JOIN1E8F
        ASSIGN1E95:  preds = [COND1B06]
          bool _t1B3D#1 = false;
          goto JOIN1B3E
        ASSIGN1E97:  preds = [COND1AFE]
          real _t1E96#2 = TensorIndex<tensor[3],[1]>(pos1AAF);
          bool _t1E98#1 = EQ<real>(_t1E96,_t1E96);
          bool _t1E9A#1 = BNot(_t1E98);
          if _t1E9A then goto ASSIGN1E9E else goto ASSIGN1EA2
        ASSIGN1E9E:  preds = [COND1E9C]
          bool _t1E9D#1 = true;
          goto JOIN1EA0
        JOIN1EA0:  preds = [ASSIGN1E9E,ASSIGN1EA5]
          bool _t1B02#1 = phi(_t1E9D,_t1E9F)
          goto JOIN1B03
        ASSIGN1EA2:  preds = [COND1E9C]
          real _t1EA1#2 = TensorIndex<tensor[3],[2]>(pos1AAF);
          bool _t1EA3#1 = EQ<real>(_t1EA1,_t1EA1);
          bool _t1E9F#1 = BNot(_t1EA3);
          goto JOIN1EA0
        ASSIGN1EA6:  preds = [COND1AF7]
          bool _t1B40#1 = false;
          goto JOIN1B41
        ASSIGN1EA7:  preds = [COND1AF0]
          bool _t1AF2#1 = false;
          goto JOIN1AF3
        ASSIGN1EA8:  preds = [COND1AEB]
          bool _t1AF5#1 = false;
          goto JOIN1AF6
        ASSIGN1EA9:  preds = [COND1AD4]
          bool _t1ADC#1 = false;
          goto JOIN1ADD
        ASSIGN1EAA:  preds = [COND1ACD]
          bool _t1ADF#1 = false;
          goto JOIN1AE0
    end update
  end particle
## initial strand creation
  COLLECTION
    ENTRY1EAB:  preds = []
      tensor[3][] ipos1EAC#1 = globals.ipos1A63;
    FOREACH1EAF:  preds = [ASSIGN1EAD,NEXT1EB3]
      foreach (x1EAE in ipos1EAC) on exit goto RETURN1EB4
      real _t1EB0#1 = 0.1e1;
      new particle(x1EAE,_t1EB0);
      goto FOREACH1EAF
    RETURN1EB4:  preds = [FOREACH1EAF]
      return
## global update
  ENTRY1EB5:  preds = []
    real rad1EB6#1 = globals.rad1A5D;
    real eps1EB8#1 = globals.eps1A5E;
    particle[] P1EBA#5 = Strands<particle,all>;
    (int res1EC2#1) = sum<int>(MAP sum1EBC (P1EBA));
    (int res1ECA#2) = max<int>(MAP max1EC4 (P1EBA));
    (int res1ED2#1) = sum<int>(MAP sum1ECC (P1EBA));
    (bool res1EDA#2) = all(MAP all1ED4 (P1EBA));
    (real res1EE6#1) = max<real>(MAP max1EDC (P1EBA));
    string _t1EE8#1 = "One run:";
    string _t1EEA#3 = " and ";
    real _t1EEC#2 = λ(T0[],T1[])<(T0) / ( T1)> (res1EE6,rad1EB6);
    bool _t1EEE#2 = LT<real>(_t1EEC,eps1EB8);
    string _t1EF0#1 = " of ";
    string _t1EF2#2 = "\n";
    Print<[string,bool,string,real,string,bool,string,int,string,int,string]>(_t1EE8,res1EDA,_t1EEA,_t1EEC,_t1EEA,_t1EEE,_t1EEA,res1ED2,_t1EF0,res1EC2,_t1EF2);
    if res1EDA then goto COND1EF6 else goto JOIN1EFC
  COND1EF6:  preds = [COND1EF5]
    if _t1EEE then goto ASSIGN1EF8 else goto JOIN1EFB
  ASSIGN1EF8:  preds = [COND1EF6]
    string _t1EF7#1 = "CONVERGED!\n";
    Print<[string]>(_t1EF7);
    StabilizeAll;
    goto JOIN1EFB
  JOIN1EFB:  preds = [MASSIGN1EFA,COND1EF6]
    goto JOIN1EFC
  JOIN1EFC:  preds = [JOIN1EFB,COND1EF5]
    int _t1EFD#1 = 2000;
    bool _t1EFF#1 = GT<int>(res1ECA,_t1EFD);
    if _t1EFF then goto MASSIGN1F02 else goto JOIN1F03
  MASSIGN1F02:  preds = [COND1F01]
    StabilizeAll;
    goto JOIN1F03
  JOIN1F03:  preds = [MASSIGN1F02,COND1F01]
    string _t1F04#1 = "Current steps:";
    Print<[string,int,string]>(_t1F04,res1ECA,_t1EF2);
    continue
#### end program ####
##### mid-ir: after border control ####
## properties
  GlobalInit StabilizeAll GlobalReduce StrandSets GlobalUpdate NewStrands StrandCommunication StrandsMayDie HasInputs HasGlobals ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
## globals
  input meshData1A5A (meshData) = <no-default>
  input 0space04FA_intermedateGlobal1A5B (space) = <no-default>
  input 0data04FC_intermedateGlobal1A5C (data) = <no-default>
  input rad1A5D (rad) = <default>
  input eps1A5E (eps) = <default>
  input v01A5F (v0) = <default>
  input fBias1A60 (fBias) = <default>
  input fStren1A61 (fStren) = <default>
  input zfuz1A62 (zfuz) = <default>
  input ipos1A63 (ipos) = <no-default>
## functions
  function tensor[3] fStep1B4A (tensor[3] s1B4B#3) {
    ENTRY1B4C:  preds = []
      real x1B4D#4 = TensorIndex<tensor[3],[0]>(s1B4B);
      real y1B4F#4 = TensorIndex<tensor[3],[1]>(s1B4B);
      real z1B51#4 = TensorIndex<tensor[3],[2]>(s1B4B);
      int _t1B53#2 = 2;
      real _t1B55#4 = λ(T0[])<(T0)^2> (y1B4F);
      real _t1B57#1 = λ(T0[],T1[])<(T0 * T1)> (z1B51,_t1B55);
      real _t1B5B#4 = 0.2e1;
      real _t1B5D#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1B5B,x1B4D,y1B4F);
      real _t1B5F#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t1B5B,x1B4D,y1B4F,z1B51);
      real _t1B61#1 = λ(T0[],T1[])<(T0 * T1)> (x1B4D,_t1B55);
      tensor[3] g1B65#1 = <tensor[3]>[_t1B57,_t1B5F,_t1B61];
      real _t1B67#2 = 0.e0;
      real _t1B69#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1B5B,y1B4F,z1B51);
      tensor[3] _t1B6B#1 = <tensor[3]>[_t1B67,_t1B69,_t1B55];
      real _t1B6D#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1B5B,x1B4D,z1B51);
      tensor[3] _t1B6F#1 = <tensor[3]>[_t1B69,_t1B6D,_t1B5D];
      tensor[3] _t1B71#1 = <tensor[3]>[_t1B55,_t1B5D,_t1B67];
      tensor[3,3] hess1B73#1 = <tensor[3,3]>[_t1B6B,_t1B6F,_t1B71];
      (real[3] evals1B75#1,tensor[3][3] E1B76#1) = EigenVecs3x3(hess1B73);
      real _t1B78#1 = 0.1e1;
      real _t1B7A#1 = Subscript<real[3]>(evals1B75,_t1B53);
      tensor[3] _t1B7C#2 = Subscript<tensor[3][3]>(E1B76,_t1B53);
      real op1_e3_l_51B7F#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t1B78,_t1B7A);
      real op1_e3_l_61B80#1 = λ(T0[])<Neg(T0)> (op1_e3_l_51B7F);
      real op1_e3_l_71B81#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (_t1B7C,g1B65);
      tensor[3] up1B7E#4 = λ(T0[3],T1[],T2[])<(T1 * T0_{i0} * T2)>_{3} (_t1B7C,op1_e3_l_61B80,op1_e3_l_71B81);
      real _t1B86#2 = TensorIndex<tensor[3],[0]>(up1B7E);
      bool _t1B88#1 = EQ<real>(_t1B86,_t1B86);
      bool _t1B8A#1 = BNot(_t1B88);
      if _t1B8A then goto ASSIGN1B8E else goto ASSIGN1B9B
    ASSIGN1B8E:  preds = [COND1B8C]
      bool _t1B8D#1 = true;
      goto JOIN1B91
    JOIN1B91:  preds = [ASSIGN1B8E,JOIN1BA4]
      bool _t1B8F#1 = phi(_t1B8D,_t1B90)
      if _t1B8F then goto ASSIGN1B94 else goto JOIN1B98
    ASSIGN1B94:  preds = [COND1B92]
      real _t1B93#3 = +inf;
      tensor[3] _t1B95#1 = <tensor[3]>[_t1B93,_t1B93,_t1B93];
      return _t1B95
      goto JOIN1B98
    JOIN1B98:  preds = [*RETURN(_t1B95)1B97,COND1B92]
      return up1B7E
    ASSIGN1B9B:  preds = [COND1B8C]
      real _t1B9A#2 = TensorIndex<tensor[3],[1]>(up1B7E);
      bool _t1B9C#1 = EQ<real>(_t1B9A,_t1B9A);
      bool _t1B9E#1 = BNot(_t1B9C);
      if _t1B9E then goto ASSIGN1BA2 else goto ASSIGN1BA6
    ASSIGN1BA2:  preds = [COND1BA0]
      bool _t1BA1#1 = true;
      goto JOIN1BA4
    JOIN1BA4:  preds = [ASSIGN1BA2,ASSIGN1BA9]
      bool _t1B90#1 = phi(_t1BA1,_t1BA3)
      goto JOIN1B91
    ASSIGN1BA6:  preds = [COND1BA0]
      real _t1BA5#2 = TensorIndex<tensor[3],[2]>(up1B7E);
      bool _t1BA7#1 = EQ<real>(_t1BA5,_t1BA5);
      bool _t1BA3#1 = BNot(_t1BA7);
      goto JOIN1BA4
}
  function tensor[3,3] fPerp1CDA (tensor[3] s1CDB#3) {
    ENTRY1CDC:  preds = []
      real x1CDD#2 = TensorIndex<tensor[3],[0]>(s1CDB);
      real y1CDF#3 = TensorIndex<tensor[3],[1]>(s1CDB);
      real z1CE1#2 = TensorIndex<tensor[3],[2]>(s1CDB);
      int _t1CE3#1 = 2;
      real _t1CE5#2 = λ(T0[])<(T0)^2> (y1CDF);
      real _t1CE7#3 = 0.2e1;
      real _t1CE9#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1CE7,x1CDD,y1CDF);
      real _t1CEB#2 = 0.e0;
      real _t1CED#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1CE7,y1CDF,z1CE1);
      tensor[3] _t1CEF#1 = <tensor[3]>[_t1CEB,_t1CED,_t1CE5];
      real _t1CF1#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1CE7,x1CDD,z1CE1);
      tensor[3] _t1CF3#1 = <tensor[3]>[_t1CED,_t1CF1,_t1CE9];
      tensor[3] _t1CF5#1 = <tensor[3]>[_t1CE5,_t1CE9,_t1CEB];
      tensor[3,3] hess1CF7#1 = <tensor[3,3]>[_t1CEF,_t1CF3,_t1CF5];
      (real[3] evals1CF9#0,tensor[3][3] _t1CFA#1) = EigenVecs3x3(hess1CF7);
      tensor[3] E21CFC#1 = Subscript<tensor[3][3]>(_t1CFA,_t1CE3);
      tensor[3,3] op1_e3_l_21CFF#1 = λ(T0[3])<(T0_{i0} * T0_{i1})>_{3 3} (E21CFC);
      tensor[3,3] m1CFE#3 = λ(T0[3 3])<(δ_{i0,i1}) - (T0_{i0,i1})>_{3 3} (op1_e3_l_21CFF);
      real t1D02#2 = λ(T0[3 3],T1[3 3])<Σ(i0=0..2)(i1=0..2)<((T0_{i0,i1} * T1_{i0,i1}))>(i0=0..2)(i1=0..2)> (m1CFE,m1CFE);
      bool _t1D08#1 = EQ<real>(t1D02,t1D02);
      bool _t1D0A#1 = BNot(_t1D08);
      if _t1D0A then goto ASSIGN1D0E else goto JOIN1D10
    ASSIGN1D0E:  preds = [COND1D0C]
      tensor[3,3] _t1D0D#1 = λ()<Z_{i0,i1}>_{3 3} ();
      return _t1D0D
      goto JOIN1D10
    JOIN1D10:  preds = [*RETURN(_t1D0D)1D0F,COND1D0C]
      return m1CFE
}
  function int sum1EBC (particle P1EBD#1) {
    ENTRY1EBE:  preds = []
      int _t1EBF#1 = P1EBD.test;
      return _t1EBF
}
  function int max1EC4 (particle P1EC5#1) {
    ENTRY1EC6:  preds = []
      int _t1EC7#1 = P1EC5.steps;
      return _t1EC7
}
  function int sum1ECC (particle P1ECD#1) {
    ENTRY1ECE:  preds = []
      int _t1ECF#1 = P1ECD.testp;
      return _t1ECF
}
  function bool all1ED4 (particle P1ED5#1) {
    ENTRY1ED6:  preds = []
      bool _t1ED7#1 = P1ED5.found;
      return _t1ED7
}
  function real max1EDC (particle P1EDD#1) {
    ENTRY1EDE:  preds = []
      tensor[3] _t1EDF#1 = P1EDD.step;
      real op1_e3_l_11EE2#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (_t1EDF);
      real _t1EE1#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_11EE2);
      return _t1EE1
}
## input initialization
  ENTRY1A64:  preds = []
    real rad1A65#5 = 0.1e-1;
    globals.rad1A5D = rad1A65;
    globals.eps1A5E = rad1A65;
    real v01A69#1 = 0.625e-1;
    globals.v01A5F = v01A69;
    globals.fBias1A60 = rad1A65;
    globals.fStren1A61 = rad1A65;
    globals.zfuz1A62 = rad1A65;
    return
## global-variable initialization
  ENTRY1A70:  preds = []
    femData:Mesh meshData1A71#2 = globals.meshData1A5A;
    int _t1A73#1 = 0;
    int _t1A75#1 = 1;
    int _t1A77#1 = ExtractFemItem<int,NumCell(Mesh)>(meshData1A71);
    int _t1A79#1 = ISub(_t1A77,_t1A75);
    int[] _t1A7B#1 = Range(_t1A73,_t1A79);
    femData:MeshCell[] _t1A7D#1 = <femData:MeshCell[]>{};
  FOREACH1A80:  preds = [ASSIGN1A7E,NEXT1A86]
    foreach (_t1A7F in _t1A7B) on exit goto RETURN1A87
      femData:MeshCell[] _t1A84#1 = phi(_t1A7D,_t1A83)
    femData:MeshCell _t1A81#1 = LoadFem<femData:MeshCell>(meshData1A71,_t1A7F);
    femData:MeshCell[] _t1A83#1 = Append<femData:MeshCell>(_t1A84,_t1A81);
    goto FOREACH1A80
  RETURN1A87:  preds = [FOREACH1A80]
    return
## strand
  strand particle (tensor[3] pos01A88#2, real hh01A89#1) in 3D
    state:
      output tensor[3] pos;
      output tensor[3] _pos;
      real hh;
      tensor[3] step;
      bool found;
      int nfs;
      int test;
      int testp;
      int steps;
    state init
      ENTRY1A93:  preds = []
        tensor[3] step1A94#1 = λ()<Z_{i0}>_{3} ();
        bool found1A96#1 = false;
        int nfs1A98#3 = 0;
        int test1A9A#1 = 1;
        self.pos = pos01A88;
        self._pos = pos01A88;
        self.hh = hh01A89;
        self.step = step1A94;
        self.found = found1A96;
        self.nfs = nfs1A98;
        self.test = test1A9A;
        self.testp = nfs1A98;
        self.steps = nfs1A98;
        return
    end state init
    method update
        ENTRY1AA6:  preds = []
          real rad1AA7#10 = globals.rad1A5D;
          real eps1AA9#1 = globals.eps1A5E;
          real fBias1AAB#3 = globals.fBias1A60;
          real fStren1AAD#3 = globals.fStren1A61;
          tensor[3] pos1AAF#13 = self.pos;
          real hh1AB1#7 = self.hh;
          bool found1AB3#3 = self.found;
          int nfs1AB5#3 = self.nfs;
          int testp1AB7#2 = self.testp;
          int steps1AB9#1 = self.steps;
          int _t1ABB#4 = 1;
          int steps1ABD#4 = IAdd(steps1AB9,_t1ABB);
          real _t1ABF#13 = 0.e0;
          tensor[3] _t1AC1#3 = <tensor[3]>[_t1ABF,_t1ABF,_t1ABF];
          tensor[3] mid1AC3#5 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (pos1AAF,_t1AC1);
          real _t1AC5#1 = TensorIndex<tensor[3],[0]>(mid1AC3);
          real _t1AC7#1 = λ(T0[])<Abs(T0)> (_t1AC5);
          real _t1AC9#9 = 0.1e0;
          bool _t1ACB#1 = GT<real>(_t1AC7,_t1AC9);
          if _t1ACB then goto ASSIGN1ACF else goto ASSIGN1EAA
        ASSIGN1ACF:  preds = [COND1ACD]
          real _t1ACE#1 = TensorIndex<tensor[3],[1]>(mid1AC3);
          real _t1AD0#1 = λ(T0[])<Abs(T0)> (_t1ACE);
          bool _t1AD2#1 = GT<real>(_t1AD0,_t1AC9);
          if _t1AD2 then goto ASSIGN1AD6 else goto ASSIGN1EA9
        ASSIGN1AD6:  preds = [COND1AD4]
          real _t1AD5#1 = TensorIndex<tensor[3],[2]>(mid1AC3);
          real _t1AD7#1 = λ(T0[])<Abs(T0)> (_t1AD5);
          bool _t1AD9#1 = GT<real>(_t1AD7,_t1AC9);
          goto JOIN1ADD
        JOIN1ADD:  preds = [ASSIGN1ADA,ASSIGN1EA9]
          bool _t1ADB#1 = phi(_t1AD9,_t1ADC)
          goto JOIN1AE0
        JOIN1AE0:  preds = [JOIN1ADD,ASSIGN1EAA]
          bool _t1ADE#1 = phi(_t1ADB,_t1ADF)
          real op1_e3_l_41AE3#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (mid1AC3,mid1AC3);
          real _t1AE1#2 = λ(T0[])<Sqrt(T0)> (op1_e3_l_41AE3);
          real _t1AE7#3 = 0.5e1;
          bool _t1AE9#1 = LT<real>(_t1AE1,_t1AE7);
          if _t1AE9 then goto ASSIGN1AED else goto ASSIGN1EA8
        ASSIGN1AED:  preds = [COND1AEB]
          real _t1AEC#1 = 0.2e1;
          bool _t1AEE#1 = GT<real>(_t1AE1,_t1AEC);
          if _t1AEE then goto JOIN1AF3 else goto ASSIGN1EA7
        JOIN1AF3:  preds = [COND1AF0,ASSIGN1EA7]
          bool _t1AF1#1 = phi(_t1ADE,_t1AF2)
          goto JOIN1AF6
        JOIN1AF6:  preds = [JOIN1AF3,ASSIGN1EA8]
          bool _t1AF4#1 = phi(_t1AF1,_t1AF5)
          if _t1AF4 then goto ASSIGN1AF9 else goto ASSIGN1EA6
        ASSIGN1AF9:  preds = [COND1AF7]
          real _t1AF8#6 = TensorIndex<tensor[3],[0]>(pos1AAF);
          bool _t1AFA#1 = EQ<real>(_t1AF8,_t1AF8);
          bool _t1AFC#1 = BNot(_t1AFA);
          if _t1AFC then goto ASSIGN1B00 else goto ASSIGN1E97
        ASSIGN1B00:  preds = [COND1AFE]
          bool _t1AFF#1 = true;
          goto JOIN1B03
        JOIN1B03:  preds = [ASSIGN1B00,JOIN1EA0]
          bool _t1B01#1 = phi(_t1AFF,_t1B02)
          bool _t1B04#1 = BNot(_t1B01);
          if _t1B04 then goto ASSIGN1B08 else goto ASSIGN1E95
        ASSIGN1B08:  preds = [COND1B06]
          real y1B07#4 = TensorIndex<tensor[3],[1]>(pos1AAF);
          real z1B09#4 = TensorIndex<tensor[3],[2]>(pos1AAF);
          int _t1B0B#1 = 2;
          real _t1B0D#4 = λ(T0[])<(T0)^2> (y1B07);
          real _t1B0F#1 = λ(T0[],T1[])<(T0 * T1)> (z1B09,_t1B0D);
          real _t1B13#4 = 0.2e1;
          real _t1B15#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1B13,_t1AF8,y1B07);
          real _t1B17#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t1B13,_t1AF8,y1B07,z1B09);
          real _t1B19#1 = λ(T0[],T1[])<(T0 * T1)> (_t1AF8,_t1B0D);
          tensor[3] g1B1D#1 = <tensor[3]>[_t1B0F,_t1B17,_t1B19];
          real _t1B1F#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1B13,y1B07,z1B09);
          tensor[3] _t1B21#1 = <tensor[3]>[_t1ABF,_t1B1F,_t1B0D];
          real _t1B23#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1B13,_t1AF8,z1B09);
          tensor[3] _t1B25#1 = <tensor[3]>[_t1B1F,_t1B23,_t1B15];
          tensor[3] _t1B27#1 = <tensor[3]>[_t1B0D,_t1B15,_t1ABF];
          tensor[3,3] hess1B29#1 = <tensor[3,3]>[_t1B21,_t1B25,_t1B27];
          real[3] _t1B2B#1 = EigenVals3x3(hess1B29);
          real _t1B2E#1 = Subscript<real[3]>(_t1B2B,_t1B0B);
          real op1_e3_l_31B31#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (g1B1D);
          real op1_e3_l_41B32#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_31B31);
          real op1_e3_l_51B33#1 = λ(T0[])<Neg(T0)> (_t1B2E);
          real op1_e3_l_61B34#1 = λ(T0[],T1[])<(T0 + T1)> (fBias1AAB,op1_e3_l_41B32);
          real str1B30#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_51B33,op1_e3_l_61B34);
          bool _t1B3A#1 = GTE<real>(str1B30,fStren1AAD);
          goto JOIN1B3E
        JOIN1B3E:  preds = [ASSIGN1B3B,ASSIGN1E95]
          bool _t1B3C#1 = phi(_t1B3A,_t1B3D)
          goto JOIN1B41
        JOIN1B41:  preds = [JOIN1B3E,ASSIGN1EA6]
          bool _t1B3F#1 = phi(_t1B3C,_t1B40)
          bool _t1B42#1 = BNot(_t1B3F);
          if _t1B42 then goto DIE1B45 else goto JOIN1B46
        DIE1B45:  preds = [COND1B44]
          die
          goto JOIN1B46
        JOIN1B46:  preds = [*DIE1B45,COND1B44]
          bool _t1B47#1 = BNot(found1AB3);
          if _t1B47 then goto ASSIGN1BAB else goto ASSIGN1BF9
        ASSIGN1BAB:  preds = [COND1B49]
          tensor[3] step1BAA#3 = fStep1B4A (pos1AAF);
          tensor[3] pos1BAC#4 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos1AAF,step1BAA);
          real _t1BAE#2 = TensorIndex<tensor[3],[0]>(pos1BAC);
          bool _t1BB0#1 = EQ<real>(_t1BAE,_t1BAE);
          bool _t1BB2#1 = BNot(_t1BB0);
          if _t1BB2 then goto ASSIGN1BB6 else goto ASSIGN1BE9
        ASSIGN1BB6:  preds = [COND1BB4]
          bool _t1BB5#1 = true;
          goto JOIN1BB9
        JOIN1BB9:  preds = [ASSIGN1BB6,JOIN1BF2]
          bool _t1BB7#1 = phi(_t1BB5,_t1BB8)
          if _t1BB7 then goto DIE1BBB else goto JOIN1BBC
        DIE1BBB:  preds = [COND1BBA]
          die
          goto JOIN1BBC
        JOIN1BBC:  preds = [*DIE1BBB,COND1BBA]
          real op1_e3_l_21BBE#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (step1BAA);
          real op1_e3_l_31BBF#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_21BBE);
          real _t1BBD#1 = λ(T0[],T1[])<(T1) / ( T0)> (rad1AA7,op1_e3_l_31BBF);
          bool _t1BC3#1 = GT<real>(_t1BBD,eps1AA9);
          if _t1BC3 then goto ASSIGN1BC7 else goto ASSIGN1BE7
        ASSIGN1BC7:  preds = [COND1BC5]
          int nfs1BC6#2 = IAdd(nfs1AB5,_t1ABB);
          int _t1BC8#1 = 10;
          bool _t1BCA#1 = GT<int>(nfs1BC6,_t1BC8);
          if _t1BCA then goto DIE1BCD else goto JOIN1BCE
        DIE1BCD:  preds = [COND1BCC]
          die
          goto JOIN1BCE
        JOIN1BCE:  preds = [*DIE1BCD,COND1BCC]
          goto JOIN1BD3
        JOIN1BD3:  preds = [JOIN1BCE,ASSIGN1BE7]
          int testp1BCF#1 = phi(testp1AB7,_t1ABB)
          int nfs1BD0#1 = phi(nfs1BC6,nfs1AB5)
          bool found1BD1#1 = phi(found1AB3,found1BD2)
          goto JOIN1BDD
        JOIN1BDD:  preds = [JOIN1BD3,JOIN1E48]
          int testp1BD4#1 = phi(testp1BCF,testp1AB7)
          int nfs1BD5#1 = phi(nfs1BD0,nfs1AB5)
          bool found1BD6#1 = phi(found1BD1,found1AB3)
          tensor[3] step1BD7#1 = phi(step1BAA,up1BD8)
          real hh1BD9#1 = phi(hh1AB1,hh1BDA)
          tensor[3] pos1BDB#2 = phi(pos1BAC,pos1BDC)
          self.pos = pos1BDB;
          self._pos = pos1BDB;
          self.hh = hh1BD9;
          self.step = step1BD7;
          self.found = found1BD6;
          self.nfs = nfs1BD5;
          self.testp = testp1BD4;
          self.steps = steps1ABD;
          active
        ASSIGN1BE7:  preds = [COND1BC5]
          bool found1BD2#1 = true;
          goto JOIN1BD3
        ASSIGN1BE9:  preds = [COND1BB4]
          real _t1BE8#2 = TensorIndex<tensor[3],[1]>(pos1BAC);
          bool _t1BEA#1 = EQ<real>(_t1BE8,_t1BE8);
          bool _t1BEC#1 = BNot(_t1BEA);
          if _t1BEC then goto ASSIGN1BF0 else goto ASSIGN1BF4
        ASSIGN1BF0:  preds = [COND1BEE]
          bool _t1BEF#1 = true;
          goto JOIN1BF2
        JOIN1BF2:  preds = [ASSIGN1BF0,ASSIGN1BF7]
          bool _t1BB8#1 = phi(_t1BEF,_t1BF1)
          goto JOIN1BB9
        ASSIGN1BF4:  preds = [COND1BEE]
          real _t1BF3#2 = TensorIndex<tensor[3],[2]>(pos1BAC);
          bool _t1BF5#1 = EQ<real>(_t1BF3,_t1BF3);
          bool _t1BF1#1 = BNot(_t1BF5);
          goto JOIN1BF2
        ASSIGN1BF9:  preds = [COND1B49]
          tensor[3] _t1BF8#4 = fStep1B4A (pos1AAF);
          tensor[3] pos1BFA#13 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos1AAF,_t1BF8);
          real _t1BFC#2 = TensorIndex<tensor[3],[0]>(pos1BFA);
          bool _t1BFE#1 = EQ<real>(_t1BFC,_t1BFC);
          bool _t1C00#1 = BNot(_t1BFE);
          if _t1C00 then goto ASSIGN1C04 else goto ASSIGN1E86
        ASSIGN1C04:  preds = [COND1C02]
          bool _t1C03#1 = true;
          goto JOIN1C07
        JOIN1C07:  preds = [ASSIGN1C04,JOIN1E8F]
          bool _t1C05#1 = phi(_t1C03,_t1C06)
          if _t1C05 then goto DIE1C09 else goto JOIN1C0A
        DIE1C09:  preds = [COND1C08]
          die
          goto JOIN1C0A
        JOIN1C0A:  preds = [*DIE1C09,COND1C08]
          tensor[3] step1C0B#4 = λ()<Z_{i0}>_{3} ();
          int nn1C0D#2 = 0;
          particle[] _t1C0F#1 = SphereQuery<3,particle>(pos1BFA,rad1AA7);
        FOREACH1C12:  preds = [ASSIGN1C10,NEXT1C46]
          foreach (P1C11 in _t1C0F) on exit goto ASSIGN1C48
            int nn1C44#3 = phi(nn1C0D,nn1C43)
            tensor[3] force1C2D#2 = phi(step1C0B,force1C2C)
            real oldE1C18#2 = phi(_t1ABF,oldE1C17)
          tensor[3] _t1C13#1 = P1C11.pos;
          real _t1C15#2 = 0.1e1;
          tensor[3] op1_e3_l_81C1A#3 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (_t1C13,pos1BFA);
          real op1_e3_l_101C1B#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_81C1A,op1_e3_l_81C1A);
          real op1_e3_l_111C1C#2 = λ(T0[])<Sqrt(T0)> (op1_e3_l_101C1B);
          real op1_e3_l_121C1D#1 = λ(T0[],T1[])<(T1) / ( T0)> (rad1AA7,op1_e3_l_111C1C);
          real op1_e3_l_131C1E#2 = λ(T0[],T1[])<(T0) - (T1)> (_t1C15,op1_e3_l_121C1D);
          real op1_e3_l_141C1F#1 = λ(T0[])<(T0)^4> (op1_e3_l_131C1E);
          real oldE1C17#1 = λ(T0[],T1[])<(T0 + T1)> (oldE1C18,op1_e3_l_141C1F);
          real _t1C2A#1 = -0.4e1;
          real op1_e3_l_241C34#1 = λ(T0[])<(T0)^3> (op1_e3_l_131C1E);
          real op1_e3_l_251C35#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t1C15,rad1AA7);
          tensor[3] op1_e3_l_321C36#1 = λ(T0[],T1[],T2[],T3[3])<(T0 * T1 * T2 * T3_{i0})>_{3} (_t1C2A,op1_e3_l_241C34,op1_e3_l_251C35,op1_e3_l_81C1A);
          tensor[3] op1_e3_l_341C37#1 = λ(T0[3],T1[])<(T0_{i0}) / ( T1)>_{3} (op1_e3_l_321C36,op1_e3_l_111C1C);
          tensor[3] force1C2C#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (force1C2D,op1_e3_l_341C37);
          int nn1C43#1 = IAdd(nn1C44,_t1ABB);
          goto FOREACH1C12
        ASSIGN1C48:  preds = [FOREACH1C12]
          bool _t1C47#1 = EQ<int>(nn1C0D,nn1C44);
          if _t1C47 then goto ASSIGN1C4B else goto JOIN1CD9
        ASSIGN1C4B:  preds = [COND1C49]
          real _t1C4A#1 = 0.5e0;
          real _t1C4C#1 = λ(T0[],T1[])<(T0 * T1)> (_t1C4A,rad1AA7);
          tensor[3] _t1C4E#1 = <tensor[3]>[_t1C4C,_t1ABF,_t1ABF];
          tensor[3] npos1C50#7 = λ(T0[3],T1[3],T2[3])<(T0_{i0} + T1_{i0} + T2_{i0})>_{3} (pos1AAF,_t1BF8,_t1C4E);
          tensor[3] mid1C52#5 = λ(T0[3],T1[3])<(T1_{i0}) - (T0_{i0})>_{3} (_t1AC1,npos1C50);
          real _t1C56#1 = TensorIndex<tensor[3],[0]>(mid1C52);
          real _t1C58#1 = λ(T0[])<Abs(T0)> (_t1C56);
          bool _t1C5A#1 = GT<real>(_t1C58,_t1AC9);
          if _t1C5A then goto ASSIGN1C5E else goto ASSIGN1E84
        ASSIGN1C5E:  preds = [COND1C5C]
          real _t1C5D#1 = TensorIndex<tensor[3],[1]>(mid1C52);
          real _t1C5F#1 = λ(T0[])<Abs(T0)> (_t1C5D);
          bool _t1C61#1 = GT<real>(_t1C5F,_t1AC9);
          if _t1C61 then goto ASSIGN1C65 else goto ASSIGN1E83
        ASSIGN1C65:  preds = [COND1C63]
          real _t1C64#1 = TensorIndex<tensor[3],[2]>(mid1C52);
          real _t1C66#1 = λ(T0[])<Abs(T0)> (_t1C64);
          bool _t1C68#1 = GT<real>(_t1C66,_t1AC9);
          goto JOIN1C6C
        JOIN1C6C:  preds = [ASSIGN1C69,ASSIGN1E83]
          bool _t1C6A#1 = phi(_t1C68,_t1C6B)
          goto JOIN1C6F
        JOIN1C6F:  preds = [JOIN1C6C,ASSIGN1E84]
          bool _t1C6D#1 = phi(_t1C6A,_t1C6E)
          real op1_e3_l_81C73#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (mid1C52,mid1C52);
          real _t1C70#2 = λ(T0[])<Sqrt(T0)> (op1_e3_l_81C73);
          bool _t1C78#1 = LT<real>(_t1C70,_t1AE7);
          if _t1C78 then goto ASSIGN1C7C else goto ASSIGN1E82
        ASSIGN1C7C:  preds = [COND1C7A]
          real _t1C7B#1 = 0.2e1;
          bool _t1C7D#1 = GT<real>(_t1C70,_t1C7B);
          if _t1C7D then goto JOIN1C82 else goto ASSIGN1E81
        JOIN1C82:  preds = [COND1C7F,ASSIGN1E81]
          bool _t1C80#1 = phi(_t1C6D,_t1C81)
          goto JOIN1C85
        JOIN1C85:  preds = [JOIN1C82,ASSIGN1E82]
          bool _t1C83#1 = phi(_t1C80,_t1C84)
          if _t1C83 then goto ASSIGN1C88 else goto ASSIGN1E80
        ASSIGN1C88:  preds = [COND1C86]
          real _t1C87#6 = TensorIndex<tensor[3],[0]>(npos1C50);
          bool _t1C89#1 = EQ<real>(_t1C87,_t1C87);
          bool _t1C8B#1 = BNot(_t1C89);
          if _t1C8B then goto ASSIGN1C8F else goto ASSIGN1E71
        ASSIGN1C8F:  preds = [COND1C8D]
          bool _t1C8E#1 = true;
          goto JOIN1C92
        JOIN1C92:  preds = [ASSIGN1C8F,JOIN1E7A]
          bool _t1C90#1 = phi(_t1C8E,_t1C91)
          bool _t1C93#1 = BNot(_t1C90);
          if _t1C93 then goto ASSIGN1C97 else goto ASSIGN1E6F
        ASSIGN1C97:  preds = [COND1C95]
          real y1C96#4 = TensorIndex<tensor[3],[1]>(npos1C50);
          real z1C98#4 = TensorIndex<tensor[3],[2]>(npos1C50);
          int _t1C9A#1 = 2;
          real _t1C9C#4 = λ(T0[])<(T0)^2> (y1C96);
          real _t1C9E#1 = λ(T0[],T1[])<(T0 * T1)> (z1C98,_t1C9C);
          real _t1CA2#4 = 0.2e1;
          real _t1CA4#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1CA2,_t1C87,y1C96);
          real _t1CA6#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t1CA2,_t1C87,y1C96,z1C98);
          real _t1CA8#1 = λ(T0[],T1[])<(T0 * T1)> (_t1C87,_t1C9C);
          tensor[3] g1CAC#1 = <tensor[3]>[_t1C9E,_t1CA6,_t1CA8];
          real _t1CAE#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1CA2,y1C96,z1C98);
          tensor[3] _t1CB0#1 = <tensor[3]>[_t1ABF,_t1CAE,_t1C9C];
          real _t1CB2#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1CA2,_t1C87,z1C98);
          tensor[3] _t1CB4#1 = <tensor[3]>[_t1CAE,_t1CB2,_t1CA4];
          tensor[3] _t1CB6#1 = <tensor[3]>[_t1C9C,_t1CA4,_t1ABF];
          tensor[3,3] hess1CB8#1 = <tensor[3,3]>[_t1CB0,_t1CB4,_t1CB6];
          real[3] _t1CBA#1 = EigenVals3x3(hess1CB8);
          real _t1CBD#1 = Subscript<real[3]>(_t1CBA,_t1C9A);
          real op1_e3_l_31CC0#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (g1CAC);
          real op1_e3_l_41CC1#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_31CC0);
          real op1_e3_l_51CC2#1 = λ(T0[])<Neg(T0)> (_t1CBD);
          real op1_e3_l_61CC3#1 = λ(T0[],T1[])<(T0 + T1)> (fBias1AAB,op1_e3_l_41CC1);
          real str1CBF#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_51CC2,op1_e3_l_61CC3);
          bool _t1CC9#1 = GTE<real>(str1CBF,fStren1AAD);
          goto JOIN1CCD
        JOIN1CCD:  preds = [ASSIGN1CCA,ASSIGN1E6F]
          bool _t1CCB#1 = phi(_t1CC9,_t1CCC)
          goto JOIN1CD0
        JOIN1CD0:  preds = [JOIN1CCD,ASSIGN1E80]
          bool _t1CCE#1 = phi(_t1CCB,_t1CCF)
          if _t1CCE then goto NEW1CD2 else goto JOIN1CD3
        NEW1CD2:  preds = [COND1CD1]
          new particle(npos1C50,hh1AB1);
          goto JOIN1CD3
        JOIN1CD3:  preds = [NEW1CD2,COND1CD1]
          self.pos = pos1BFA;
          self._pos = pos1BFA;
          self.step = step1C0B;
          self.steps = steps1ABD;
          active
          goto JOIN1CD9
        JOIN1CD9:  preds = [*ACTIVE1CD8,COND1C49]
          tensor[3,3] _t1D12#1 = fPerp1CDA (pos1BFA);
          tensor[3] op1_e3_l_31D15#5 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (_t1D12,force1C2D);
          tensor[3] es1D14#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (hh1AB1,op1_e3_l_31D15);
          real op1_e3_l_51D1A#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_31D15,op1_e3_l_31D15);
          real op1_e3_l_61D1B#1 = λ(T0[],T1[])<(T0 * T0 * T1)> (hh1AB1,op1_e3_l_51D1A);
          real _t1D18#2 = λ(T0[])<Sqrt(T0)> (op1_e3_l_61D1B);
          bool _t1D20#1 = GT<real>(_t1D18,rad1AA7);
          if _t1D20 then goto ASSIGN1F13 else goto JOIN1D3D
        ASSIGN1F13:  preds = [COND1D22]
          real op1_e3_l_101D28#2 = λ(T0[],T1[])<(T0) / ( T1)> (rad1AA7,_t1D18);
          real hh1D23#1 = λ(T0[],T1[])<(T0 * T1)> (hh1AB1,op1_e3_l_101D28);
          tensor[3] es1D2F#1 = λ(T0[],T1[],T2[3])<(T0 * T1 * T2_{i0})>_{3} (hh1AB1,op1_e3_l_101D28,op1_e3_l_31D15);
          goto JOIN1D3D
        JOIN1D3D:  preds = [ASSIGN1F14,COND1D22]
          tensor[3] es1D3B#5 = phi(es1D2F,es1D14)
          real hh1D3C#2 = phi(hh1D23,hh1AB1)
          tensor[3] samplePos1D3E#1 = λ(T0[3],T1[3],T2[3])<(T0_{i0} + T1_{i0} + T2_{i0})>_{3} (pos1AAF,_t1BF8,es1D3B);
          tensor[3] fs1D40#3 = fStep1B4A (samplePos1D3E);
          real op1_e3_l_21D43#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (fs1D40);
          real op1_e3_l_31D44#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (es1D3B);
          real op1_e3_l_41D45#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_21D43);
          real op1_e3_l_51D46#2 = λ(T0[])<Sqrt(T0)> (op1_e3_l_31D44);
          real _t1D42#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_41D45,op1_e3_l_51D46);
          real _t1D4C#5 = 0.5e0;
          bool _t1D4E#1 = GT<real>(_t1D42,_t1D4C);
          if _t1D4E then goto ASSIGN1D52 else goto JOIN1D5A
        ASSIGN1D52:  preds = [COND1D50]
          real hh1D51#1 = λ(T0[],T1[])<(T0 * T1)> (hh1D3C,_t1D4C);
          self.pos = pos1BFA;
          self._pos = pos1BFA;
          self.hh = hh1D51;
          self.step = step1C0B;
          self.steps = steps1ABD;
          active
          goto JOIN1D5A
        JOIN1D5A:  preds = [*ACTIVE1D58,COND1D50]
          real hh1D59#2 = phi(hh1D3C)
          tensor[3] up1BD8#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (fs1D40,es1D3B);
          tensor[3] pos1D5C#4 = λ(T0[3],T1[3],T2[3],T3[3])<(T0_{i0} + T1_{i0} + T2_{i0} + T3_{i0})>_{3} (pos1AAF,_t1BF8,fs1D40,es1D3B);
          particle[] _t1D5E#1 = SphereQuery<3,particle>(pos1D5C,rad1AA7);
        FOREACH1D61:  preds = [ASSIGN1D5F,NEXT1D77]
          foreach (P1D60 in _t1D5E) on exit goto ASSIGN1D79
            real accum1D67#2 = phi(_t1ABF,accum1D66)
          tensor[3] _t1D62#1 = P1D60.pos;
          real _t1D64#1 = 0.1e1;
          tensor[3] op1_e3_l_101D69#2 = λ(T0[3],T1[3])<(T1_{i0}) - (T0_{i0})>_{3} (_t1D62,pos1D5C);
          real op1_e3_l_121D6A#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_101D69,op1_e3_l_101D69);
          real op1_e3_l_131D6B#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_121D6A);
          real op1_e3_l_141D6C#1 = λ(T0[],T1[])<(T1) / ( T0)> (rad1AA7,op1_e3_l_131D6B);
          real op1_e3_l_151D6D#1 = λ(T0[],T1[])<(T0) - (T1)> (_t1D64,op1_e3_l_141D6C);
          real op1_e3_l_161D6E#1 = λ(T0[])<(T0)^4> (op1_e3_l_151D6D);
          real accum1D66#1 = λ(T0[],T1[])<(T0 + T1)> (accum1D67,op1_e3_l_161D6E);
          goto FOREACH1D61
        ASSIGN1D79:  preds = [FOREACH1D61]
          real _t1D78#1 = λ(T0[],T1[])<(T0) - (T1)> (accum1D67,oldE1C18);
          tensor[3] op1_e3_l_121D7E#1 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (pos1D5C,pos1BFA);
          tensor[3] op1_e3_l_131D7F#1 = λ(T0[3])<Neg(T0_{i0})>_{3} (op1_e3_l_31D15);
          real op1_e3_l_141D80#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_121D7E,op1_e3_l_131D7F);
          real _t1D7A#1 = λ(T0[],T1[])<(T0 * T1)> (_t1D4C,op1_e3_l_141D80);
          bool _t1D88#1 = GT<real>(_t1D78,_t1D7A);
          if _t1D88 then goto ASSIGN1D8C else goto JOIN1D94
        ASSIGN1D8C:  preds = [COND1D8A]
          real hh1D8B#1 = λ(T0[],T1[])<(T0 * T1)> (hh1D59,_t1D4C);
          self.pos = pos1BFA;
          self._pos = pos1BFA;
          self.hh = hh1D8B;
          self.step = step1C0B;
          self.steps = steps1ABD;
          active
          goto JOIN1D94
        JOIN1D94:  preds = [*ACTIVE1D92,COND1D8A]
          real hh1D93#1 = phi(hh1D59)
          tensor[3] pos1BDC#5 = phi(pos1D5C)
          real _t1D95#1 = 0.11e1;
          real hh1BDA#2 = λ(T0[],T1[])<(T0 * T1)> (hh1D93,_t1D95);
          real _t1D98#2 = TensorIndex<tensor[3],[0]>(pos1BDC);
          bool _t1D9A#1 = EQ<real>(_t1D98,_t1D98);
          bool _t1D9C#1 = BNot(_t1D9A);
          if _t1D9C then goto ASSIGN1DA0 else goto ASSIGN1E60
        ASSIGN1DA0:  preds = [COND1D9E]
          bool _t1D9F#1 = true;
          goto JOIN1DA3
        JOIN1DA3:  preds = [ASSIGN1DA0,JOIN1E69]
          bool _t1DA1#1 = phi(_t1D9F,_t1DA2)
          if _t1DA1 then goto DIE1DA5 else goto JOIN1DA6
        DIE1DA5:  preds = [COND1DA4]
          die
          goto JOIN1DA6
        JOIN1DA6:  preds = [*DIE1DA5,COND1DA4]
          int _t1DA7#1 = 5;
          bool _t1DA9#1 = LT<int>(nn1C44,_t1DA7);
          if _t1DA9 then goto ASSIGN1F17 else goto JOIN1E48
        ASSIGN1F17:  preds = [COND1DAB]
          real op1_e3_l_71DAF#1 = λ(T0[])<(1) / ( T0)> (op1_e3_l_51D46);
          tensor[3] op1_e3_l_81DB0#1 = λ(T0[],T1[],T2[3],T3[])<(T0 * T1 * T2_{i0} * T3)>_{3} (_t1D4C,rad1AA7,es1D3B,op1_e3_l_71DAF);
          tensor[3] npos1DAC#7 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos1BDC,op1_e3_l_81DB0);
          tensor[3] mid1DB6#5 = λ(T0[3],T1[3])<(T1_{i0}) - (T0_{i0})>_{3} (_t1AC1,npos1DAC);
          real _t1DC2#1 = TensorIndex<tensor[3],[0]>(mid1DB6);
          real _t1DC4#1 = λ(T0[])<Abs(T0)> (_t1DC2);
          bool _t1DC6#1 = GT<real>(_t1DC4,_t1AC9);
          if _t1DC6 then goto ASSIGN1DCA else goto ASSIGN1E5E
        ASSIGN1DCA:  preds = [COND1DC8]
          real _t1DC9#1 = TensorIndex<tensor[3],[1]>(mid1DB6);
          real _t1DCB#1 = λ(T0[])<Abs(T0)> (_t1DC9);
          bool _t1DCD#1 = GT<real>(_t1DCB,_t1AC9);
          if _t1DCD then goto ASSIGN1DD1 else goto ASSIGN1E5D
        ASSIGN1DD1:  preds = [COND1DCF]
          real _t1DD0#1 = TensorIndex<tensor[3],[2]>(mid1DB6);
          real _t1DD2#1 = λ(T0[])<Abs(T0)> (_t1DD0);
          bool _t1DD4#1 = GT<real>(_t1DD2,_t1AC9);
          goto JOIN1DD8
        JOIN1DD8:  preds = [ASSIGN1DD5,ASSIGN1E5D]
          bool _t1DD6#1 = phi(_t1DD4,_t1DD7)
          goto JOIN1DDB
        JOIN1DDB:  preds = [JOIN1DD8,ASSIGN1E5E]
          bool _t1DD9#1 = phi(_t1DD6,_t1DDA)
          real op1_e3_l_181DE3#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (mid1DB6,mid1DB6);
          real _t1DDC#2 = λ(T0[])<Sqrt(T0)> (op1_e3_l_181DE3);
          bool _t1DEC#1 = LT<real>(_t1DDC,_t1AE7);
          if _t1DEC then goto ASSIGN1DF0 else goto ASSIGN1E5C
        ASSIGN1DF0:  preds = [COND1DEE]
          real _t1DEF#1 = 0.2e1;
          bool _t1DF1#1 = GT<real>(_t1DDC,_t1DEF);
          if _t1DF1 then goto JOIN1DF6 else goto ASSIGN1E5B
        JOIN1DF6:  preds = [COND1DF3,ASSIGN1E5B]
          bool _t1DF4#1 = phi(_t1DD9,_t1DF5)
          goto JOIN1DF9
        JOIN1DF9:  preds = [JOIN1DF6,ASSIGN1E5C]
          bool _t1DF7#1 = phi(_t1DF4,_t1DF8)
          if _t1DF7 then goto ASSIGN1DFC else goto ASSIGN1E5A
        ASSIGN1DFC:  preds = [COND1DFA]
          real _t1DFB#6 = TensorIndex<tensor[3],[0]>(npos1DAC);
          bool _t1DFD#1 = EQ<real>(_t1DFB,_t1DFB);
          bool _t1DFF#1 = BNot(_t1DFD);
          if _t1DFF then goto ASSIGN1E03 else goto ASSIGN1E4B
        ASSIGN1E03:  preds = [COND1E01]
          bool _t1E02#1 = true;
          goto JOIN1E06
        JOIN1E06:  preds = [ASSIGN1E03,JOIN1E54]
          bool _t1E04#1 = phi(_t1E02,_t1E05)
          bool _t1E07#1 = BNot(_t1E04);
          if _t1E07 then goto ASSIGN1E0B else goto ASSIGN1E49
        ASSIGN1E0B:  preds = [COND1E09]
          real y1E0A#4 = TensorIndex<tensor[3],[1]>(npos1DAC);
          real z1E0C#4 = TensorIndex<tensor[3],[2]>(npos1DAC);
          int _t1E0E#1 = 2;
          real _t1E10#4 = λ(T0[])<(T0)^2> (y1E0A);
          real _t1E12#1 = λ(T0[],T1[])<(T0 * T1)> (z1E0C,_t1E10);
          real _t1E16#4 = 0.2e1;
          real _t1E18#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1E16,_t1DFB,y1E0A);
          real _t1E1A#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t1E16,_t1DFB,y1E0A,z1E0C);
          real _t1E1C#1 = λ(T0[],T1[])<(T0 * T1)> (_t1DFB,_t1E10);
          tensor[3] g1E20#1 = <tensor[3]>[_t1E12,_t1E1A,_t1E1C];
          real _t1E22#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1E16,y1E0A,z1E0C);
          tensor[3] _t1E24#1 = <tensor[3]>[_t1ABF,_t1E22,_t1E10];
          real _t1E26#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1E16,_t1DFB,z1E0C);
          tensor[3] _t1E28#1 = <tensor[3]>[_t1E22,_t1E26,_t1E18];
          tensor[3] _t1E2A#1 = <tensor[3]>[_t1E10,_t1E18,_t1ABF];
          tensor[3,3] hess1E2C#1 = <tensor[3,3]>[_t1E24,_t1E28,_t1E2A];
          real[3] _t1E2E#1 = EigenVals3x3(hess1E2C);
          real _t1E31#1 = Subscript<real[3]>(_t1E2E,_t1E0E);
          real op1_e3_l_31E34#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (g1E20);
          real op1_e3_l_41E35#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_31E34);
          real op1_e3_l_51E36#1 = λ(T0[])<Neg(T0)> (_t1E31);
          real op1_e3_l_61E37#1 = λ(T0[],T1[])<(T0 + T1)> (fBias1AAB,op1_e3_l_41E35);
          real str1E33#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_51E36,op1_e3_l_61E37);
          bool _t1E3D#1 = GTE<real>(str1E33,fStren1AAD);
          goto JOIN1E41
        JOIN1E41:  preds = [ASSIGN1E3E,ASSIGN1E49]
          bool _t1E3F#1 = phi(_t1E3D,_t1E40)
          goto JOIN1E44
        JOIN1E44:  preds = [JOIN1E41,ASSIGN1E5A]
          bool _t1E42#1 = phi(_t1E3F,_t1E43)
          if _t1E42 then goto NEW1E46 else goto JOIN1E47
        NEW1E46:  preds = [COND1E45]
          new particle(npos1DAC,hh1BDA);
          goto JOIN1E47
        JOIN1E47:  preds = [NEW1E46,COND1E45]
          goto JOIN1E48
        JOIN1E48:  preds = [JOIN1E47,COND1DAB]
          goto JOIN1BDD
        ASSIGN1E49:  preds = [COND1E09]
          bool _t1E40#1 = false;
          goto JOIN1E41
        ASSIGN1E4B:  preds = [COND1E01]
          real _t1E4A#2 = TensorIndex<tensor[3],[1]>(npos1DAC);
          bool _t1E4C#1 = EQ<real>(_t1E4A,_t1E4A);
          bool _t1E4E#1 = BNot(_t1E4C);
          if _t1E4E then goto ASSIGN1E52 else goto ASSIGN1E56
        ASSIGN1E52:  preds = [COND1E50]
          bool _t1E51#1 = true;
          goto JOIN1E54
        JOIN1E54:  preds = [ASSIGN1E52,ASSIGN1E59]
          bool _t1E05#1 = phi(_t1E51,_t1E53)
          goto JOIN1E06
        ASSIGN1E56:  preds = [COND1E50]
          real _t1E55#2 = TensorIndex<tensor[3],[2]>(npos1DAC);
          bool _t1E57#1 = EQ<real>(_t1E55,_t1E55);
          bool _t1E53#1 = BNot(_t1E57);
          goto JOIN1E54
        ASSIGN1E5A:  preds = [COND1DFA]
          bool _t1E43#1 = false;
          goto JOIN1E44
        ASSIGN1E5B:  preds = [COND1DF3]
          bool _t1DF5#1 = false;
          goto JOIN1DF6
        ASSIGN1E5C:  preds = [COND1DEE]
          bool _t1DF8#1 = false;
          goto JOIN1DF9
        ASSIGN1E5D:  preds = [COND1DCF]
          bool _t1DD7#1 = false;
          goto JOIN1DD8
        ASSIGN1E5E:  preds = [COND1DC8]
          bool _t1DDA#1 = false;
          goto JOIN1DDB
        ASSIGN1E60:  preds = [COND1D9E]
          real _t1E5F#2 = TensorIndex<tensor[3],[1]>(pos1BDC);
          bool _t1E61#1 = EQ<real>(_t1E5F,_t1E5F);
          bool _t1E63#1 = BNot(_t1E61);
          if _t1E63 then goto ASSIGN1E67 else goto ASSIGN1E6B
        ASSIGN1E67:  preds = [COND1E65]
          bool _t1E66#1 = true;
          goto JOIN1E69
        JOIN1E69:  preds = [ASSIGN1E67,ASSIGN1E6E]
          bool _t1DA2#1 = phi(_t1E66,_t1E68)
          goto JOIN1DA3
        ASSIGN1E6B:  preds = [COND1E65]
          real _t1E6A#2 = TensorIndex<tensor[3],[2]>(pos1BDC);
          bool _t1E6C#1 = EQ<real>(_t1E6A,_t1E6A);
          bool _t1E68#1 = BNot(_t1E6C);
          goto JOIN1E69
        ASSIGN1E6F:  preds = [COND1C95]
          bool _t1CCC#1 = false;
          goto JOIN1CCD
        ASSIGN1E71:  preds = [COND1C8D]
          real _t1E70#2 = TensorIndex<tensor[3],[1]>(npos1C50);
          bool _t1E72#1 = EQ<real>(_t1E70,_t1E70);
          bool _t1E74#1 = BNot(_t1E72);
          if _t1E74 then goto ASSIGN1E78 else goto ASSIGN1E7C
        ASSIGN1E78:  preds = [COND1E76]
          bool _t1E77#1 = true;
          goto JOIN1E7A
        JOIN1E7A:  preds = [ASSIGN1E78,ASSIGN1E7F]
          bool _t1C91#1 = phi(_t1E77,_t1E79)
          goto JOIN1C92
        ASSIGN1E7C:  preds = [COND1E76]
          real _t1E7B#2 = TensorIndex<tensor[3],[2]>(npos1C50);
          bool _t1E7D#1 = EQ<real>(_t1E7B,_t1E7B);
          bool _t1E79#1 = BNot(_t1E7D);
          goto JOIN1E7A
        ASSIGN1E80:  preds = [COND1C86]
          bool _t1CCF#1 = false;
          goto JOIN1CD0
        ASSIGN1E81:  preds = [COND1C7F]
          bool _t1C81#1 = false;
          goto JOIN1C82
        ASSIGN1E82:  preds = [COND1C7A]
          bool _t1C84#1 = false;
          goto JOIN1C85
        ASSIGN1E83:  preds = [COND1C63]
          bool _t1C6B#1 = false;
          goto JOIN1C6C
        ASSIGN1E84:  preds = [COND1C5C]
          bool _t1C6E#1 = false;
          goto JOIN1C6F
        ASSIGN1E86:  preds = [COND1C02]
          real _t1E85#2 = TensorIndex<tensor[3],[1]>(pos1BFA);
          bool _t1E87#1 = EQ<real>(_t1E85,_t1E85);
          bool _t1E89#1 = BNot(_t1E87);
          if _t1E89 then goto ASSIGN1E8D else goto ASSIGN1E91
        ASSIGN1E8D:  preds = [COND1E8B]
          bool _t1E8C#1 = true;
          goto JOIN1E8F
        JOIN1E8F:  preds = [ASSIGN1E8D,ASSIGN1E94]
          bool _t1C06#1 = phi(_t1E8C,_t1E8E)
          goto JOIN1C07
        ASSIGN1E91:  preds = [COND1E8B]
          real _t1E90#2 = TensorIndex<tensor[3],[2]>(pos1BFA);
          bool _t1E92#1 = EQ<real>(_t1E90,_t1E90);
          bool _t1E8E#1 = BNot(_t1E92);
          goto JOIN1E8F
        ASSIGN1E95:  preds = [COND1B06]
          bool _t1B3D#1 = false;
          goto JOIN1B3E
        ASSIGN1E97:  preds = [COND1AFE]
          real _t1E96#2 = TensorIndex<tensor[3],[1]>(pos1AAF);
          bool _t1E98#1 = EQ<real>(_t1E96,_t1E96);
          bool _t1E9A#1 = BNot(_t1E98);
          if _t1E9A then goto ASSIGN1E9E else goto ASSIGN1EA2
        ASSIGN1E9E:  preds = [COND1E9C]
          bool _t1E9D#1 = true;
          goto JOIN1EA0
        JOIN1EA0:  preds = [ASSIGN1E9E,ASSIGN1EA5]
          bool _t1B02#1 = phi(_t1E9D,_t1E9F)
          goto JOIN1B03
        ASSIGN1EA2:  preds = [COND1E9C]
          real _t1EA1#2 = TensorIndex<tensor[3],[2]>(pos1AAF);
          bool _t1EA3#1 = EQ<real>(_t1EA1,_t1EA1);
          bool _t1E9F#1 = BNot(_t1EA3);
          goto JOIN1EA0
        ASSIGN1EA6:  preds = [COND1AF7]
          bool _t1B40#1 = false;
          goto JOIN1B41
        ASSIGN1EA7:  preds = [COND1AF0]
          bool _t1AF2#1 = false;
          goto JOIN1AF3
        ASSIGN1EA8:  preds = [COND1AEB]
          bool _t1AF5#1 = false;
          goto JOIN1AF6
        ASSIGN1EA9:  preds = [COND1AD4]
          bool _t1ADC#1 = false;
          goto JOIN1ADD
        ASSIGN1EAA:  preds = [COND1ACD]
          bool _t1ADF#1 = false;
          goto JOIN1AE0
    end update
  end particle
## initial strand creation
  COLLECTION
    ENTRY1EAB:  preds = []
      tensor[3][] ipos1EAC#1 = globals.ipos1A63;
    FOREACH1EAF:  preds = [ASSIGN1EAD,NEXT1EB3]
      foreach (x1EAE in ipos1EAC) on exit goto RETURN1EB4
      real _t1EB0#1 = 0.1e1;
      new particle(x1EAE,_t1EB0);
      goto FOREACH1EAF
    RETURN1EB4:  preds = [FOREACH1EAF]
      return
## global update
  ENTRY1EB5:  preds = []
    real rad1EB6#1 = globals.rad1A5D;
    real eps1EB8#1 = globals.eps1A5E;
    particle[] P1EBA#5 = Strands<particle,all>;
    (int res1EC2#1) = sum<int>(MAP sum1EBC (P1EBA));
    (int res1ECA#2) = max<int>(MAP max1EC4 (P1EBA));
    (int res1ED2#1) = sum<int>(MAP sum1ECC (P1EBA));
    (bool res1EDA#2) = all(MAP all1ED4 (P1EBA));
    (real res1EE6#1) = max<real>(MAP max1EDC (P1EBA));
    string _t1EE8#1 = "One run:";
    string _t1EEA#3 = " and ";
    real _t1EEC#2 = λ(T0[],T1[])<(T0) / ( T1)> (res1EE6,rad1EB6);
    bool _t1EEE#2 = LT<real>(_t1EEC,eps1EB8);
    string _t1EF0#1 = " of ";
    string _t1EF2#2 = "\n";
    Print<[string,bool,string,real,string,bool,string,int,string,int,string]>(_t1EE8,res1EDA,_t1EEA,_t1EEC,_t1EEA,_t1EEE,_t1EEA,res1ED2,_t1EF0,res1EC2,_t1EF2);
    if res1EDA then goto COND1EF6 else goto JOIN1EFC
  COND1EF6:  preds = [COND1EF5]
    if _t1EEE then goto ASSIGN1EF8 else goto JOIN1EFB
  ASSIGN1EF8:  preds = [COND1EF6]
    string _t1EF7#1 = "CONVERGED!\n";
    Print<[string]>(_t1EF7);
    StabilizeAll;
    goto JOIN1EFB
  JOIN1EFB:  preds = [MASSIGN1EFA,COND1EF6]
    goto JOIN1EFC
  JOIN1EFC:  preds = [JOIN1EFB,COND1EF5]
    int _t1EFD#1 = 2000;
    bool _t1EFF#1 = GT<int>(res1ECA,_t1EFD);
    if _t1EFF then goto MASSIGN1F02 else goto JOIN1F03
  MASSIGN1F02:  preds = [COND1F01]
    StabilizeAll;
    goto JOIN1F03
  JOIN1F03:  preds = [MASSIGN1F02,COND1F01]
    string _t1F04#1 = "Current steps:";
    Print<[string,int,string]>(_t1F04,res1ECA,_t1EF2);
    continue
#### end program ####
##### low-ir: after mid-to-low translation ####
## properties
  GlobalInit StabilizeAll GlobalReduce StrandSets GlobalUpdate NewStrands StrandCommunication StrandsMayDie HasInputs HasGlobals ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
## globals
  input meshData1F25 (meshData) = <no-default>
  input 0space04FA_intermedateGlobal1F26 (space) = <no-default>
  input 0data04FC_intermedateGlobal1F27 (data) = <no-default>
  input rad1F28 (rad) = <default>
  input eps1F29 (eps) = <default>
  input v01F2A (v0) = <default>
  input fBias1F2B (fBias) = <default>
  input fStren1F2C (fStren) = <default>
  input zfuz1F2D (zfuz) = <default>
  input ipos1F2E (ipos) = <no-default>
## functions
  function tensor[3] fStep202E (tensor[3] s202F#3) {
    ENTRY2030:  preds = []
      real x2031#4 = VIndex<3,0>(s202F);
      real y2033#5 = VIndex<3,1>(s202F);
      real z2035#4 = VIndex<3,2>(s202F);
      int _t2037#2 = 2;
      real _t2039#4 = RMul(y2033,y2033);
      real _t203C#1 = RMul(z2035,_t2039);
      real _t203F#4 = 0.2e1;
      real r2042#1 = RMul(_t203F,x2031);
      real _t2041#2 = RMul(r2042,y2033);
      real r2047#1 = RMul(_t203F,x2031);
      real r2048#1 = RMul(r2047,y2033);
      real _t2046#1 = RMul(r2048,z2035);
      real _t204D#1 = RMul(x2031,_t2039);
      tensor[3] g2050#1 = <tensor[3]>[_t203C,_t2046,_t204D];
      real _t2052#2 = 0.e0;
      real r2055#1 = RMul(_t203F,y2033);
      real _t2054#2 = RMul(r2055,z2035);
      tensor[3] _t2059#1 = <tensor[3]>[_t2052,_t2054,_t2039];
      real r205C#1 = RMul(_t203F,x2031);
      real _t205B#1 = RMul(r205C,z2035);
      tensor[3] _t2060#1 = <tensor[3]>[_t2054,_t205B,_t2041];
      tensor[3] _t2062#1 = <tensor[3]>[_t2039,_t2041,_t2052];
      tensor[3,3] hess2064#1 = <tensor[3,3]>[_t2059,_t2060,_t2062];
      (real[3] evals2066#1,tensor[3][3] E2067#1) = EigenVecs3x3(hess2064);
      real _t2069#1 = 0.1e1;
      real _t206B#1 = Subscript<real[3]>(evals2066,_t2037);
      tensor[3] _t206D#4 = Subscript<tensor[3][3]>(E2067,_t2037);
      real op1_e3_l_5206F#1 = RDiv(_t2069,_t206B);
      real op1_e3_l_62072#3 = RNeg(op1_e3_l_5206F);
      real op1_e3_l_72075#3 = VDot<3>(_t206D,g2050);
      real r2079#1 = TensorIndex<tensor[3],[0]>(_t206D);
      real r207A#1 = RMul(op1_e3_l_62072,r2079);
      real r207B#1 = RMul(r207A,op1_e3_l_72075);
      real r207C#1 = TensorIndex<tensor[3],[1]>(_t206D);
      real r207D#1 = RMul(op1_e3_l_62072,r207C);
      real r207E#1 = RMul(r207D,op1_e3_l_72075);
      real r207F#1 = TensorIndex<tensor[3],[2]>(_t206D);
      real r2080#1 = RMul(op1_e3_l_62072,r207F);
      real r2081#1 = RMul(r2080,op1_e3_l_72075);
      tensor[3] up2078#4 = <tensor[3]>[r207B,r207E,r2081];
      real _t208D#2 = VIndex<3,0>(up2078);
      bool _t208F#1 = EQ<real>(_t208D,_t208D);
      bool _t2091#1 = BNot(_t208F);
      if _t2091 then goto ASSIGN2095 else goto ASSIGN20A2
    ASSIGN2095:  preds = [COND2093]
      bool _t2094#1 = true;
      goto JOIN2098
    JOIN2098:  preds = [ASSIGN2095,JOIN20AB]
      bool _t2096#1 = phi(_t2094,_t2097)
      if _t2096 then goto ASSIGN209B else goto JOIN209F
    ASSIGN209B:  preds = [COND2099]
      real _t209A#3 = +inf;
      tensor[3] _t209C#1 = <tensor[3]>[_t209A,_t209A,_t209A];
      return _t209C
      goto JOIN209F
    JOIN209F:  preds = [*RETURN(_t209C)209E,COND2099]
      return up2078
    ASSIGN20A2:  preds = [COND2093]
      real _t20A1#2 = VIndex<3,1>(up2078);
      bool _t20A3#1 = EQ<real>(_t20A1,_t20A1);
      bool _t20A5#1 = BNot(_t20A3);
      if _t20A5 then goto ASSIGN20A9 else goto ASSIGN20AD
    ASSIGN20A9:  preds = [COND20A7]
      bool _t20A8#1 = true;
      goto JOIN20AB
    JOIN20AB:  preds = [ASSIGN20A9,ASSIGN20B0]
      bool _t2097#1 = phi(_t20A8,_t20AA)
      goto JOIN2098
    ASSIGN20AD:  preds = [COND20A7]
      real _t20AC#2 = VIndex<3,2>(up2078);
      bool _t20AE#1 = EQ<real>(_t20AC,_t20AC);
      bool _t20AA#1 = BNot(_t20AE);
      goto JOIN20AB
}
  function tensor[3,3] fPerp221E (tensor[3] s221F#3) {
    ENTRY2220:  preds = []
      real x2221#2 = VIndex<3,0>(s221F);
      real y2223#4 = VIndex<3,1>(s221F);
      real z2225#2 = VIndex<3,2>(s221F);
      int _t2227#1 = 2;
      real _t2229#2 = RMul(y2223,y2223);
      real _t222C#3 = 0.2e1;
      real r222F#1 = RMul(_t222C,x2221);
      real _t222E#2 = RMul(r222F,y2223);
      real _t2233#2 = 0.e0;
      real r2236#1 = RMul(_t222C,y2223);
      real _t2235#2 = RMul(r2236,z2225);
      tensor[3] _t223A#1 = <tensor[3]>[_t2233,_t2235,_t2229];
      real r223D#1 = RMul(_t222C,x2221);
      real _t223C#1 = RMul(r223D,z2225);
      tensor[3] _t2241#1 = <tensor[3]>[_t2235,_t223C,_t222E];
      tensor[3] _t2243#1 = <tensor[3]>[_t2229,_t222E,_t2233];
      tensor[3,3] hess2245#1 = <tensor[3,3]>[_t223A,_t2241,_t2243];
      (real[3] evals2247#0,tensor[3][3] _t2248#1) = EigenVecs3x3(hess2245);
      tensor[3] E2224A#6 = Subscript<tensor[3][3]>(_t2248,_t2227);
      real r224D#1 = TensorIndex<tensor[3],[0]>(E2224A);
      tensor[3] binopV224E#1 = VScale<3>(r224D,E2224A);
      real r224F#1 = TensorIndex<tensor[3],[1]>(E2224A);
      tensor[3] binopV2250#1 = VScale<3>(r224F,E2224A);
      real r2251#1 = TensorIndex<tensor[3],[2]>(E2224A);
      tensor[3] binopV2252#1 = VScale<3>(r2251,E2224A);
      tensor[3,3] op1_e3_l_2224C#9 = <tensor[3,3]>[binopV224E,binopV2250,binopV2252];
      real realLit225C#3 = 0.1e1;
      real r225D#1 = TensorIndex<tensor[3,3],[0,0]>(op1_e3_l_2224C);
      real r225E#1 = RSub(realLit225C,r225D);
      real realLit225F#6 = 0.e0;
      real r2260#1 = TensorIndex<tensor[3,3],[0,1]>(op1_e3_l_2224C);
      real r2261#1 = RSub(realLit225F,r2260);
      real r2262#1 = TensorIndex<tensor[3,3],[0,2]>(op1_e3_l_2224C);
      real r2263#1 = RSub(realLit225F,r2262);
      tensor[3] tensor2264#1 = <tensor[3]>[r225E,r2261,r2263];
      real r2265#1 = TensorIndex<tensor[3,3],[1,0]>(op1_e3_l_2224C);
      real r2266#1 = RSub(realLit225F,r2265);
      real r2267#1 = TensorIndex<tensor[3,3],[1,1]>(op1_e3_l_2224C);
      real r2268#1 = RSub(realLit225C,r2267);
      real r2269#1 = TensorIndex<tensor[3,3],[1,2]>(op1_e3_l_2224C);
      real r226A#1 = RSub(realLit225F,r2269);
      tensor[3] tensor226B#1 = <tensor[3]>[r2266,r2268,r226A];
      real r226C#1 = TensorIndex<tensor[3,3],[2,0]>(op1_e3_l_2224C);
      real r226D#1 = RSub(realLit225F,r226C);
      real r226E#1 = TensorIndex<tensor[3,3],[2,1]>(op1_e3_l_2224C);
      real r226F#1 = RSub(realLit225F,r226E);
      real r2270#1 = TensorIndex<tensor[3,3],[2,2]>(op1_e3_l_2224C);
      real r2271#1 = RSub(realLit225C,r2270);
      tensor[3] tensor2272#1 = <tensor[3]>[r226D,r226F,r2271];
      tensor[3,3] m225B#4 = <tensor[3,3]>[tensor2264,tensor226B,tensor2272];
      tensor[3] projParam228D#2 = ProjectLast<tensor[3,3],[0]>(m225B);
      real vdot228E#1 = VDot<3>(projParam228D,projParam228D);
      tensor[3] projParam228F#2 = ProjectLast<tensor[3,3],[1]>(m225B);
      real vdot2290#1 = VDot<3>(projParam228F,projParam228F);
      real r2291#1 = RAdd(vdot228E,vdot2290);
      tensor[3] projParam2292#2 = ProjectLast<tensor[3,3],[2]>(m225B);
      real vdot2293#1 = VDot<3>(projParam2292,projParam2292);
      real t228C#2 = RAdd(r2291,vdot2293);
      bool _t229D#1 = EQ<real>(t228C,t228C);
      bool _t229F#1 = BNot(_t229D);
      if _t229F then goto ASSIGN22A6 else goto JOIN22AA
    ASSIGN22A6:  preds = [COND22A1]
      real realLit22A3#3 = 0.e0;
      tensor[3] tensor22A4#3 = <tensor[3]>[realLit22A3,realLit22A3,realLit22A3];
      tensor[3,3] _t22A2#1 = <tensor[3,3]>[tensor22A4,tensor22A4,tensor22A4];
      return _t22A2
      goto JOIN22AA
    JOIN22AA:  preds = [*RETURN(_t22A2)22A9,COND22A1]
      return m225B
}
  function int sum2492 (particle P2493#1) {
    ENTRY2494:  preds = []
      int _t2495#1 = P2493.test;
      return _t2495
}
  function int max249A (particle P249B#1) {
    ENTRY249C:  preds = []
      int _t249D#1 = P249B.steps;
      return _t249D
}
  function int sum24A2 (particle P24A3#1) {
    ENTRY24A4:  preds = []
      int _t24A5#1 = P24A3.testp;
      return _t24A5
}
  function bool all24AA (particle P24AB#1) {
    ENTRY24AC:  preds = []
      bool _t24AD#1 = P24AB.found;
      return _t24AD
}
  function real max24B2 (particle P24B3#1) {
    ENTRY24B4:  preds = []
      tensor[3] _t24B5#2 = P24B3.step;
      real op1_e3_l_124B7#1 = VDot<3>(_t24B5,_t24B5);
      real _t24BA#1 = Sqrt(op1_e3_l_124B7);
      return _t24BA
}
## input initialization
  ENTRY1F2F:  preds = []
    real rad1F30#5 = 0.1e-1;
    globals.rad1F28 = rad1F30;
    globals.eps1F29 = rad1F30;
    real v01F34#1 = 0.625e-1;
    globals.v01F2A = v01F34;
    globals.fBias1F2B = rad1F30;
    globals.fStren1F2C = rad1F30;
    globals.zfuz1F2D = rad1F30;
    return
## global-variable initialization
  ENTRY1F3B:  preds = []
    femData:Mesh meshData1F3C#2 = globals.meshData1F25;
    int _t1F3E#1 = 0;
    int _t1F40#1 = 1;
    int _t1F42#1 = ExtractFemItem<int,NumCell(Mesh)>(meshData1F3C);
    int _t1F44#1 = ISub(_t1F42,_t1F40);
    int[] _t1F46#1 = Range(_t1F3E,_t1F44);
    femData:MeshCell[] _t1F48#1 = <femData:MeshCell[]>{};
  FOREACH1F4B:  preds = [ASSIGN1F49,NEXT1F51]
    foreach (_t1F4A in _t1F46) on exit goto RETURN1F52
      femData:MeshCell[] _t1F4F#1 = phi(_t1F48,_t1F4E)
    femData:MeshCell _t1F4C#1 = LoadFem<femData:MeshCell>(meshData1F3C,_t1F4A);
    femData:MeshCell[] _t1F4E#1 = Append<femData:MeshCell>(_t1F4F,_t1F4C);
    goto FOREACH1F4B
  RETURN1F52:  preds = [FOREACH1F4B]
    return
## strand
  strand particle (tensor[3] pos01F53#2, real hh01F54#1) in 3D
    state:
      output tensor[3] pos;
      output tensor[3] _pos;
      real hh;
      tensor[3] step;
      bool found;
      int nfs;
      int test;
      int testp;
      int steps;
    state init
      ENTRY1F5E:  preds = []
        real realLit1F60#3 = 0.e0;
        tensor[3] step1F5F#1 = <tensor[3]>[realLit1F60,realLit1F60,realLit1F60];
        bool found1F64#1 = false;
        int nfs1F66#3 = 0;
        int test1F68#1 = 1;
        self.pos = pos01F53;
        self._pos = pos01F53;
        self.hh = hh01F54;
        self.step = step1F5F;
        self.found = found1F64;
        self.nfs = nfs1F66;
        self.test = test1F68;
        self.testp = nfs1F66;
        self.steps = nfs1F66;
        return
    end state init
    method update
        ENTRY1F74:  preds = []
          real rad1F75#10 = globals.rad1F28;
          real eps1F77#1 = globals.eps1F29;
          real fBias1F79#3 = globals.fBias1F2B;
          real fStren1F7B#3 = globals.fStren1F2C;
          tensor[3] pos1F7D#13 = self.pos;
          real hh1F7F#8 = self.hh;
          bool found1F81#3 = self.found;
          int nfs1F83#3 = self.nfs;
          int testp1F85#2 = self.testp;
          int steps1F87#1 = self.steps;
          int _t1F89#4 = 1;
          int steps1F8B#4 = IAdd(steps1F87,_t1F89);
          real _t1F8D#13 = 0.e0;
          tensor[3] _t1F8F#3 = <tensor[3]>[_t1F8D,_t1F8D,_t1F8D];
          tensor[3] mid1F91#5 = VSub<3>(pos1F7D,_t1F8F);
          real _t1F94#1 = VIndex<3,0>(mid1F91);
          real _t1F96#1 = Abs<real>(_t1F94);
          real _t1F99#9 = 0.1e0;
          bool _t1F9B#1 = GT<real>(_t1F96,_t1F99);
          if _t1F9B then goto ASSIGN1F9F else goto ASSIGN2480
        ASSIGN1F9F:  preds = [COND1F9D]
          real _t1F9E#1 = VIndex<3,1>(mid1F91);
          real _t1FA0#1 = Abs<real>(_t1F9E);
          bool _t1FA3#1 = GT<real>(_t1FA0,_t1F99);
          if _t1FA3 then goto ASSIGN1FA7 else goto ASSIGN247F
        ASSIGN1FA7:  preds = [COND1FA5]
          real _t1FA6#1 = VIndex<3,2>(mid1F91);
          real _t1FA8#1 = Abs<real>(_t1FA6);
          bool _t1FAB#1 = GT<real>(_t1FA8,_t1F99);
          goto JOIN1FAF
        JOIN1FAF:  preds = [ASSIGN1FAC,ASSIGN247F]
          bool _t1FAD#1 = phi(_t1FAB,_t1FAE)
          goto JOIN1FB2
        JOIN1FB2:  preds = [JOIN1FAF,ASSIGN2480]
          bool _t1FB0#1 = phi(_t1FAD,_t1FB1)
          real op1_e3_l_41FB3#1 = VDot<3>(mid1F91,mid1F91);
          real _t1FB6#2 = Sqrt(op1_e3_l_41FB3);
          real _t1FB9#3 = 0.5e1;
          bool _t1FBB#1 = LT<real>(_t1FB6,_t1FB9);
          if _t1FBB then goto ASSIGN1FBF else goto ASSIGN247E
        ASSIGN1FBF:  preds = [COND1FBD]
          real _t1FBE#1 = 0.2e1;
          bool _t1FC0#1 = GT<real>(_t1FB6,_t1FBE);
          if _t1FC0 then goto JOIN1FC5 else goto ASSIGN247D
        JOIN1FC5:  preds = [COND1FC2,ASSIGN247D]
          bool _t1FC3#1 = phi(_t1FB0,_t1FC4)
          goto JOIN1FC8
        JOIN1FC8:  preds = [JOIN1FC5,ASSIGN247E]
          bool _t1FC6#1 = phi(_t1FC3,_t1FC7)
          if _t1FC6 then goto ASSIGN1FCB else goto ASSIGN247C
        ASSIGN1FCB:  preds = [COND1FC9]
          real _t1FCA#6 = VIndex<3,0>(pos1F7D);
          bool _t1FCC#1 = EQ<real>(_t1FCA,_t1FCA);
          bool _t1FCE#1 = BNot(_t1FCC);
          if _t1FCE then goto ASSIGN1FD2 else goto ASSIGN246D
        ASSIGN1FD2:  preds = [COND1FD0]
          bool _t1FD1#1 = true;
          goto JOIN1FD5
        JOIN1FD5:  preds = [ASSIGN1FD2,JOIN2476]
          bool _t1FD3#1 = phi(_t1FD1,_t1FD4)
          bool _t1FD6#1 = BNot(_t1FD3);
          if _t1FD6 then goto ASSIGN1FDA else goto ASSIGN246B
        ASSIGN1FDA:  preds = [COND1FD8]
          real y1FD9#5 = VIndex<3,1>(pos1F7D);
          real z1FDB#4 = VIndex<3,2>(pos1F7D);
          int _t1FDD#1 = 2;
          real _t1FDF#4 = RMul(y1FD9,y1FD9);
          real _t1FE2#1 = RMul(z1FDB,_t1FDF);
          real _t1FE5#4 = 0.2e1;
          real r1FE8#1 = RMul(_t1FE5,_t1FCA);
          real _t1FE7#2 = RMul(r1FE8,y1FD9);
          real r1FED#1 = RMul(_t1FE5,_t1FCA);
          real r1FEE#1 = RMul(r1FED,y1FD9);
          real _t1FEC#1 = RMul(r1FEE,z1FDB);
          real _t1FF3#1 = RMul(_t1FCA,_t1FDF);
          tensor[3] g1FF6#2 = <tensor[3]>[_t1FE2,_t1FEC,_t1FF3];
          real r1FF9#1 = RMul(_t1FE5,y1FD9);
          real _t1FF8#2 = RMul(r1FF9,z1FDB);
          tensor[3] _t1FFD#1 = <tensor[3]>[_t1F8D,_t1FF8,_t1FDF];
          real r2000#1 = RMul(_t1FE5,_t1FCA);
          real _t1FFF#1 = RMul(r2000,z1FDB);
          tensor[3] _t2004#1 = <tensor[3]>[_t1FF8,_t1FFF,_t1FE7];
          tensor[3] _t2006#1 = <tensor[3]>[_t1FDF,_t1FE7,_t1F8D];
          tensor[3,3] hess2008#1 = <tensor[3,3]>[_t1FFD,_t2004,_t2006];
          real[3] _t200A#1 = EigenVals3x3(hess2008);
          real _t200C#1 = Subscript<real[3]>(_t200A,_t1FDD);
          real op1_e3_l_3200E#1 = VDot<3>(g1FF6,g1FF6);
          real op1_e3_l_42011#1 = Sqrt(op1_e3_l_3200E);
          real op1_e3_l_52014#1 = RNeg(_t200C);
          real op1_e3_l_62017#1 = RAdd(fBias1F79,op1_e3_l_42011);
          real str201A#1 = RDiv(op1_e3_l_52014,op1_e3_l_62017);
          bool _t201D#1 = GTE<real>(str201A,fStren1F7B);
          goto JOIN2021
        JOIN2021:  preds = [ASSIGN201E,ASSIGN246B]
          bool _t201F#1 = phi(_t201D,_t2020)
          goto JOIN2024
        JOIN2024:  preds = [JOIN2021,ASSIGN247C]
          bool _t2022#1 = phi(_t201F,_t2023)
          bool _t2025#1 = BNot(_t2022);
          if _t2025 then goto DIE2028 else goto JOIN2029
        DIE2028:  preds = [COND2027]
          die
          goto JOIN2029
        JOIN2029:  preds = [*DIE2028,COND2027]
          bool _t202A#1 = BNot(found1F81);
          if _t202A then goto ASSIGN20B1 else goto ASSIGN2103
        ASSIGN20B1:  preds = [COND202C]
          tensor[3] step202D#4 = fStep202E (pos1F7D);
          tensor[3] pos20B2#4 = VAdd<3>(pos1F7D,step202D);
          real _t20B5#2 = VIndex<3,0>(pos20B2);
          bool _t20B7#1 = EQ<real>(_t20B5,_t20B5);
          bool _t20B9#1 = BNot(_t20B7);
          if _t20B9 then goto ASSIGN20BD else goto ASSIGN20F3
        ASSIGN20BD:  preds = [COND20BB]
          bool _t20BC#1 = true;
          goto JOIN20C0
        JOIN20C0:  preds = [ASSIGN20BD,JOIN20FC]
          bool _t20BE#1 = phi(_t20BC,_t20BF)
          if _t20BE then goto DIE20C2 else goto JOIN20C3
        DIE20C2:  preds = [COND20C1]
          die
          goto JOIN20C3
        JOIN20C3:  preds = [*DIE20C2,COND20C1]
          real op1_e3_l_220C4#1 = VDot<3>(step202D,step202D);
          real op1_e3_l_320C7#1 = Sqrt(op1_e3_l_220C4);
          real _t20CA#1 = RDiv(op1_e3_l_320C7,rad1F75);
          bool _t20CD#1 = GT<real>(_t20CA,eps1F77);
          if _t20CD then goto ASSIGN20D1 else goto ASSIGN20F1
        ASSIGN20D1:  preds = [COND20CF]
          int nfs20D0#2 = IAdd(nfs1F83,_t1F89);
          int _t20D2#1 = 10;
          bool _t20D4#1 = GT<int>(nfs20D0,_t20D2);
          if _t20D4 then goto DIE20D7 else goto JOIN20D8
        DIE20D7:  preds = [COND20D6]
          die
          goto JOIN20D8
        JOIN20D8:  preds = [*DIE20D7,COND20D6]
          goto JOIN20DD
        JOIN20DD:  preds = [JOIN20D8,ASSIGN20F1]
          int testp20D9#1 = phi(testp1F85,_t1F89)
          int nfs20DA#1 = phi(nfs20D0,nfs1F83)
          bool found20DB#1 = phi(found1F81,found20DC)
          goto JOIN20E7
        JOIN20E7:  preds = [JOIN20DD,JOIN241E]
          int testp20DE#1 = phi(testp20D9,testp1F85)
          int nfs20DF#1 = phi(nfs20DA,nfs1F83)
          bool found20E0#1 = phi(found20DB,found1F81)
          tensor[3] step20E1#1 = phi(step202D,up20E2)
          real hh20E3#1 = phi(hh1F7F,hh20E4)
          tensor[3] pos20E5#2 = phi(pos20B2,pos20E6)
          self.pos = pos20E5;
          self._pos = pos20E5;
          self.hh = hh20E3;
          self.step = step20E1;
          self.found = found20E0;
          self.nfs = nfs20DF;
          self.testp = testp20DE;
          self.steps = steps1F8B;
          active
        ASSIGN20F1:  preds = [COND20CF]
          bool found20DC#1 = true;
          goto JOIN20DD
        ASSIGN20F3:  preds = [COND20BB]
          real _t20F2#2 = VIndex<3,1>(pos20B2);
          bool _t20F4#1 = EQ<real>(_t20F2,_t20F2);
          bool _t20F6#1 = BNot(_t20F4);
          if _t20F6 then goto ASSIGN20FA else goto ASSIGN20FE
        ASSIGN20FA:  preds = [COND20F8]
          bool _t20F9#1 = true;
          goto JOIN20FC
        JOIN20FC:  preds = [ASSIGN20FA,ASSIGN2101]
          bool _t20BF#1 = phi(_t20F9,_t20FB)
          goto JOIN20C0
        ASSIGN20FE:  preds = [COND20F8]
          real _t20FD#2 = VIndex<3,2>(pos20B2);
          bool _t20FF#1 = EQ<real>(_t20FD,_t20FD);
          bool _t20FB#1 = BNot(_t20FF);
          goto JOIN20FC
        ASSIGN2103:  preds = [COND202C]
          tensor[3] _t2102#4 = fStep202E (pos1F7D);
          tensor[3] pos2104#13 = VAdd<3>(pos1F7D,_t2102);
          real _t2107#2 = VIndex<3,0>(pos2104);
          bool _t2109#1 = EQ<real>(_t2107,_t2107);
          bool _t210B#1 = BNot(_t2109);
          if _t210B then goto ASSIGN210F else goto ASSIGN245C
        ASSIGN210F:  preds = [COND210D]
          bool _t210E#1 = true;
          goto JOIN2112
        JOIN2112:  preds = [ASSIGN210F,JOIN2465]
          bool _t2110#1 = phi(_t210E,_t2111)
          if _t2110 then goto DIE2114 else goto JOIN2115
        DIE2114:  preds = [COND2113]
          die
          goto JOIN2115
        JOIN2115:  preds = [*DIE2114,COND2113]
          real realLit2117#3 = 0.e0;
          tensor[3] step2116#4 = <tensor[3]>[realLit2117,realLit2117,realLit2117];
          int nn211B#2 = 0;
          particle[] _t211D#1 = SphereQuery<3,particle>(pos2104,rad1F75);
        FOREACH2120:  preds = [ASSIGN211E,NEXT2174]
          foreach (P211F in _t211D) on exit goto ASSIGN2176
            int nn2172#3 = phi(nn211B,nn2171)
            tensor[3] force216E#4 = phi(step2116,force216D)
            real oldE213A#2 = phi(_t1F8D,oldE2139)
          tensor[3] _t2121#1 = P211F.pos;
          real _t2123#2 = 0.1e1;
          tensor[3] op1_e3_l_82125#5 = VSub<3>(_t2121,pos2104);
          real op1_e3_l_102128#1 = VDot<3>(op1_e3_l_82125,op1_e3_l_82125);
          real op1_e3_l_11212B#2 = Sqrt(op1_e3_l_102128);
          real op1_e3_l_12212E#1 = RDiv(op1_e3_l_11212B,rad1F75);
          real op1_e3_l_132131#5 = RSub(_t2123,op1_e3_l_12212E);
          real _Pow_22135#2 = RMul(op1_e3_l_132131,op1_e3_l_132131);
          real op1_e3_l_142134#1 = RMul(_Pow_22135,_Pow_22135);
          real oldE2139#1 = RAdd(oldE213A,op1_e3_l_142134);
          real _t213D#1 = -0.4e1;
          real _Pow2_2140#1 = RMul(op1_e3_l_132131,op1_e3_l_132131);
          real op1_e3_l_24213F#1 = RMul(op1_e3_l_132131,_Pow2_2140);
          real op1_e3_l_252144#1 = RDiv(_t2123,rad1F75);
          real r2148#1 = TensorIndex<tensor[3],[0]>(op1_e3_l_82125);
          real r2149#1 = RMul(_t213D,op1_e3_l_24213F);
          real r214A#3 = RMul(r2149,op1_e3_l_252144);
          real r214B#1 = RMul(r214A,r2148);
          real r214C#1 = TensorIndex<tensor[3],[1]>(op1_e3_l_82125);
          real r214D#1 = RMul(r214A,r214C);
          real r214E#1 = TensorIndex<tensor[3],[2]>(op1_e3_l_82125);
          real r214F#1 = RMul(r214A,r214E);
          tensor[3] op1_e3_l_322147#3 = <tensor[3]>[r214B,r214D,r214F];
          real realLit215B#1 = 0.1e1;
          real r215C#3 = RDiv(realLit215B,op1_e3_l_11212B);
          real r215D#1 = TensorIndex<tensor[3],[0]>(op1_e3_l_322147);
          real r215E#1 = RMul(r215C,r215D);
          real r215F#1 = TensorIndex<tensor[3],[1]>(op1_e3_l_322147);
          real r2160#1 = RMul(r215C,r215F);
          real r2161#1 = TensorIndex<tensor[3],[2]>(op1_e3_l_322147);
          real r2162#1 = RMul(r215C,r2161);
          tensor[3] op1_e3_l_34215A#1 = <tensor[3]>[r215E,r2160,r2162];
          tensor[3] force216D#1 = VAdd<3>(force216E,op1_e3_l_34215A);
          int nn2171#1 = IAdd(nn2172,_t1F89);
          goto FOREACH2120
        ASSIGN2176:  preds = [FOREACH2120]
          bool _t2175#1 = EQ<int>(nn211B,nn2172);
          if _t2175 then goto ASSIGN2179 else goto JOIN221C
        ASSIGN2179:  preds = [COND2177]
          real _t2178#1 = 0.5e0;
          real _t217A#1 = RMul(_t2178,rad1F75);
          tensor[3] _t217D#1 = <tensor[3]>[_t217A,_t1F8D,_t1F8D];
          tensor[3] v2180#1 = VAdd<3>(pos1F7D,_t2102);
          tensor[3] npos217F#7 = VAdd<3>(v2180,_t217D);
          tensor[3] mid2184#5 = VSub<3>(npos217F,_t1F8F);
          real _t2187#1 = VIndex<3,0>(mid2184);
          real _t2189#1 = Abs<real>(_t2187);
          bool _t218C#1 = GT<real>(_t2189,_t1F99);
          if _t218C then goto ASSIGN2190 else goto ASSIGN245A
        ASSIGN2190:  preds = [COND218E]
          real _t218F#1 = VIndex<3,1>(mid2184);
          real _t2191#1 = Abs<real>(_t218F);
          bool _t2194#1 = GT<real>(_t2191,_t1F99);
          if _t2194 then goto ASSIGN2198 else goto ASSIGN2459
        ASSIGN2198:  preds = [COND2196]
          real _t2197#1 = VIndex<3,2>(mid2184);
          real _t2199#1 = Abs<real>(_t2197);
          bool _t219C#1 = GT<real>(_t2199,_t1F99);
          goto JOIN21A0
        JOIN21A0:  preds = [ASSIGN219D,ASSIGN2459]
          bool _t219E#1 = phi(_t219C,_t219F)
          goto JOIN21A3
        JOIN21A3:  preds = [JOIN21A0,ASSIGN245A]
          bool _t21A1#1 = phi(_t219E,_t21A2)
          real op1_e3_l_821A4#1 = VDot<3>(mid2184,mid2184);
          real _t21A7#2 = Sqrt(op1_e3_l_821A4);
          bool _t21AA#1 = LT<real>(_t21A7,_t1FB9);
          if _t21AA then goto ASSIGN21AE else goto ASSIGN2458
        ASSIGN21AE:  preds = [COND21AC]
          real _t21AD#1 = 0.2e1;
          bool _t21AF#1 = GT<real>(_t21A7,_t21AD);
          if _t21AF then goto JOIN21B4 else goto ASSIGN2457
        JOIN21B4:  preds = [COND21B1,ASSIGN2457]
          bool _t21B2#1 = phi(_t21A1,_t21B3)
          goto JOIN21B7
        JOIN21B7:  preds = [JOIN21B4,ASSIGN2458]
          bool _t21B5#1 = phi(_t21B2,_t21B6)
          if _t21B5 then goto ASSIGN21BA else goto ASSIGN2456
        ASSIGN21BA:  preds = [COND21B8]
          real _t21B9#6 = VIndex<3,0>(npos217F);
          bool _t21BB#1 = EQ<real>(_t21B9,_t21B9);
          bool _t21BD#1 = BNot(_t21BB);
          if _t21BD then goto ASSIGN21C1 else goto ASSIGN2447
        ASSIGN21C1:  preds = [COND21BF]
          bool _t21C0#1 = true;
          goto JOIN21C4
        JOIN21C4:  preds = [ASSIGN21C1,JOIN2450]
          bool _t21C2#1 = phi(_t21C0,_t21C3)
          bool _t21C5#1 = BNot(_t21C2);
          if _t21C5 then goto ASSIGN21C9 else goto ASSIGN2445
        ASSIGN21C9:  preds = [COND21C7]
          real y21C8#5 = VIndex<3,1>(npos217F);
          real z21CA#4 = VIndex<3,2>(npos217F);
          int _t21CC#1 = 2;
          real _t21CE#4 = RMul(y21C8,y21C8);
          real _t21D1#1 = RMul(z21CA,_t21CE);
          real _t21D4#4 = 0.2e1;
          real r21D7#1 = RMul(_t21D4,_t21B9);
          real _t21D6#2 = RMul(r21D7,y21C8);
          real r21DC#1 = RMul(_t21D4,_t21B9);
          real r21DD#1 = RMul(r21DC,y21C8);
          real _t21DB#1 = RMul(r21DD,z21CA);
          real _t21E2#1 = RMul(_t21B9,_t21CE);
          tensor[3] g21E5#2 = <tensor[3]>[_t21D1,_t21DB,_t21E2];
          real r21E8#1 = RMul(_t21D4,y21C8);
          real _t21E7#2 = RMul(r21E8,z21CA);
          tensor[3] _t21EC#1 = <tensor[3]>[_t1F8D,_t21E7,_t21CE];
          real r21EF#1 = RMul(_t21D4,_t21B9);
          real _t21EE#1 = RMul(r21EF,z21CA);
          tensor[3] _t21F3#1 = <tensor[3]>[_t21E7,_t21EE,_t21D6];
          tensor[3] _t21F5#1 = <tensor[3]>[_t21CE,_t21D6,_t1F8D];
          tensor[3,3] hess21F7#1 = <tensor[3,3]>[_t21EC,_t21F3,_t21F5];
          real[3] _t21F9#1 = EigenVals3x3(hess21F7);
          real _t21FB#1 = Subscript<real[3]>(_t21F9,_t21CC);
          real op1_e3_l_321FD#1 = VDot<3>(g21E5,g21E5);
          real op1_e3_l_42200#1 = Sqrt(op1_e3_l_321FD);
          real op1_e3_l_52203#1 = RNeg(_t21FB);
          real op1_e3_l_62206#1 = RAdd(fBias1F79,op1_e3_l_42200);
          real str2209#1 = RDiv(op1_e3_l_52203,op1_e3_l_62206);
          bool _t220C#1 = GTE<real>(str2209,fStren1F7B);
          goto JOIN2210
        JOIN2210:  preds = [ASSIGN220D,ASSIGN2445]
          bool _t220E#1 = phi(_t220C,_t220F)
          goto JOIN2213
        JOIN2213:  preds = [JOIN2210,ASSIGN2456]
          bool _t2211#1 = phi(_t220E,_t2212)
          if _t2211 then goto NEW2215 else goto JOIN2216
        NEW2215:  preds = [COND2214]
          new particle(npos217F,hh1F7F);
          goto JOIN2216
        JOIN2216:  preds = [NEW2215,COND2214]
          self.pos = pos2104;
          self._pos = pos2104;
          self.step = step2116;
          self.steps = steps1F8B;
          active
          goto JOIN221C
        JOIN221C:  preds = [*ACTIVE221B,COND2177]
          tensor[3,3] _t221D#3 = fPerp221E (pos2104);
          tensor[3] projParam22AE#1 = ProjectLast<tensor[3,3],[0]>(_t221D);
          real vdot22AF#1 = VDot<3>(projParam22AE,force216E);
          tensor[3] projParam22B0#1 = ProjectLast<tensor[3,3],[1]>(_t221D);
          real vdot22B1#1 = VDot<3>(projParam22B0,force216E);
          tensor[3] projParam22B2#1 = ProjectLast<tensor[3,3],[2]>(_t221D);
          real vdot22B3#1 = VDot<3>(projParam22B2,force216E);
          tensor[3] op1_e3_l_322AD#7 = <tensor[3]>[vdot22AF,vdot22B1,vdot22B3];
          tensor[3] es22BC#1 = VScale<3>(hh1F7F,op1_e3_l_322AD);
          real op1_e3_l_522BF#1 = VDot<3>(op1_e3_l_322AD,op1_e3_l_322AD);
          real r22C3#1 = RMul(hh1F7F,hh1F7F);
          real op1_e3_l_622C2#1 = RMul(r22C3,op1_e3_l_522BF);
          real _t22C7#2 = Sqrt(op1_e3_l_622C2);
          bool _t22CA#1 = GT<real>(_t22C7,rad1F75);
          if _t22CA then goto ASSIGN22CF else goto JOIN22E6
        ASSIGN22CF:  preds = [COND22CC]
          real op1_e3_l_1022CD#2 = RDiv(rad1F75,_t22C7);
          real hh22D0#1 = RMul(hh1F7F,op1_e3_l_1022CD);
          real r22D4#1 = TensorIndex<tensor[3],[0]>(op1_e3_l_322AD);
          real r22D5#3 = RMul(hh1F7F,op1_e3_l_1022CD);
          real r22D6#1 = RMul(r22D5,r22D4);
          real r22D7#1 = TensorIndex<tensor[3],[1]>(op1_e3_l_322AD);
          real r22D8#1 = RMul(r22D5,r22D7);
          real r22D9#1 = TensorIndex<tensor[3],[2]>(op1_e3_l_322AD);
          real r22DA#1 = RMul(r22D5,r22D9);
          tensor[3] es22D3#1 = <tensor[3]>[r22D6,r22D8,r22DA];
          goto JOIN22E6
        JOIN22E6:  preds = [ASSIGN22E3,COND22CC]
          tensor[3] es22E4#8 = phi(es22D3,es22BC)
          real hh22E5#2 = phi(hh22D0,hh1F7F)
          tensor[3] v22E8#1 = VAdd<3>(pos1F7D,_t2102);
          tensor[3] samplePos22E7#1 = VAdd<3>(v22E8,es22E4);
          tensor[3] fs22EC#4 = fStep202E (samplePos22E7);
          real op1_e3_l_222EE#1 = VDot<3>(fs22EC,fs22EC);
          real op1_e3_l_322F1#1 = VDot<3>(es22E4,es22E4);
          real op1_e3_l_422F4#1 = Sqrt(op1_e3_l_222EE);
          real op1_e3_l_522F7#2 = Sqrt(op1_e3_l_322F1);
          real _t22FA#1 = RDiv(op1_e3_l_422F4,op1_e3_l_522F7);
          real _t22FD#5 = 0.5e0;
          bool _t22FF#1 = GT<real>(_t22FA,_t22FD);
          if _t22FF then goto ASSIGN2304 else goto JOIN230C
        ASSIGN2304:  preds = [COND2301]
          real hh2302#1 = RMul(hh22E5,_t22FD);
          self.pos = pos2104;
          self._pos = pos2104;
          self.hh = hh2302;
          self.step = step2116;
          self.steps = steps1F8B;
          active
          goto JOIN230C
        JOIN230C:  preds = [*ACTIVE230A,COND2301]
          real hh230B#2 = phi(hh22E5)
          tensor[3] up20E2#1 = VAdd<3>(fs22EC,es22E4);
          tensor[3] v2310#1 = VAdd<3>(pos1F7D,_t2102);
          tensor[3] v2311#1 = VAdd<3>(v2310,fs22EC);
          tensor[3] pos230F#4 = VAdd<3>(v2311,es22E4);
          particle[] _t2316#1 = SphereQuery<3,particle>(pos230F,rad1F75);
        FOREACH2319:  preds = [ASSIGN2317,NEXT2336]
          foreach (P2318 in _t2316) on exit goto ASSIGN2339
            real accum2333#2 = phi(_t1F8D,accum2332)
          tensor[3] _t231A#1 = P2318.pos;
          real _t231C#1 = 0.1e1;
          tensor[3] op1_e3_l_10231E#2 = VSub<3>(pos230F,_t231A);
          real op1_e3_l_122321#1 = VDot<3>(op1_e3_l_10231E,op1_e3_l_10231E);
          real op1_e3_l_132324#1 = Sqrt(op1_e3_l_122321);
          real op1_e3_l_142327#1 = RDiv(op1_e3_l_132324,rad1F75);
          real op1_e3_l_15232A#2 = RSub(_t231C,op1_e3_l_142327);
          real _Pow_2232E#2 = RMul(op1_e3_l_15232A,op1_e3_l_15232A);
          real op1_e3_l_16232D#1 = RMul(_Pow_2232E,_Pow_2232E);
          real accum2332#1 = RAdd(accum2333,op1_e3_l_16232D);
          goto FOREACH2319
        ASSIGN2339:  preds = [FOREACH2319]
          real _t2337#1 = RSub(accum2333,oldE213A);
          tensor[3] op1_e3_l_12233A#1 = VSub<3>(pos230F,pos2104);
          tensor[3] op1_e3_l_13233D#1 = VNeg<3>(op1_e3_l_322AD);
          real op1_e3_l_142340#1 = VDot<3>(op1_e3_l_12233A,op1_e3_l_13233D);
          real _t2343#1 = RMul(_t22FD,op1_e3_l_142340);
          bool _t2346#1 = GT<real>(_t2337,_t2343);
          if _t2346 then goto ASSIGN234B else goto JOIN2353
        ASSIGN234B:  preds = [COND2348]
          real hh2349#1 = RMul(hh230B,_t22FD);
          self.pos = pos2104;
          self._pos = pos2104;
          self.hh = hh2349;
          self.step = step2116;
          self.steps = steps1F8B;
          active
          goto JOIN2353
        JOIN2353:  preds = [*ACTIVE2351,COND2348]
          real hh2352#1 = phi(hh230B)
          tensor[3] pos20E6#5 = phi(pos230F)
          real _t2354#1 = 0.11e1;
          real hh20E4#2 = RMul(hh2352,_t2354);
          real _t2358#2 = VIndex<3,0>(pos20E6);
          bool _t235A#1 = EQ<real>(_t2358,_t2358);
          bool _t235C#1 = BNot(_t235A);
          if _t235C then goto ASSIGN2360 else goto ASSIGN2436
        ASSIGN2360:  preds = [COND235E]
          bool _t235F#1 = true;
          goto JOIN2363
        JOIN2363:  preds = [ASSIGN2360,JOIN243F]
          bool _t2361#1 = phi(_t235F,_t2362)
          if _t2361 then goto DIE2365 else goto JOIN2366
        DIE2365:  preds = [COND2364]
          die
          goto JOIN2366
        JOIN2366:  preds = [*DIE2365,COND2364]
          int _t2367#1 = 5;
          bool _t2369#1 = LT<int>(nn2172,_t2367);
          if _t2369 then goto ASSIGN236F else goto JOIN241E
        ASSIGN236F:  preds = [COND236B]
          real realLit236D#1 = 0.1e1;
          real op1_e3_l_7236C#3 = RDiv(realLit236D,op1_e3_l_522F7);
          real r2372#1 = TensorIndex<tensor[3],[0]>(es22E4);
          real r2373#3 = RMul(_t22FD,rad1F75);
          real r2374#1 = RMul(r2373,r2372);
          real r2375#1 = RMul(r2374,op1_e3_l_7236C);
          real r2376#1 = TensorIndex<tensor[3],[1]>(es22E4);
          real r2377#1 = RMul(r2373,r2376);
          real r2378#1 = RMul(r2377,op1_e3_l_7236C);
          real r2379#1 = TensorIndex<tensor[3],[2]>(es22E4);
          real r237A#1 = RMul(r2373,r2379);
          real r237B#1 = RMul(r237A,op1_e3_l_7236C);
          tensor[3] op1_e3_l_82371#1 = <tensor[3]>[r2375,r2378,r237B];
          tensor[3] npos2388#7 = VAdd<3>(pos20E6,op1_e3_l_82371);
          tensor[3] mid238B#5 = VSub<3>(npos2388,_t1F8F);
          real _t238E#1 = VIndex<3,0>(mid238B);
          real _t2390#1 = Abs<real>(_t238E);
          bool _t2393#1 = GT<real>(_t2390,_t1F99);
          if _t2393 then goto ASSIGN2397 else goto ASSIGN2434
        ASSIGN2397:  preds = [COND2395]
          real _t2396#1 = VIndex<3,1>(mid238B);
          real _t2398#1 = Abs<real>(_t2396);
          bool _t239B#1 = GT<real>(_t2398,_t1F99);
          if _t239B then goto ASSIGN239F else goto ASSIGN2433
        ASSIGN239F:  preds = [COND239D]
          real _t239E#1 = VIndex<3,2>(mid238B);
          real _t23A0#1 = Abs<real>(_t239E);
          bool _t23A3#1 = GT<real>(_t23A0,_t1F99);
          goto JOIN23A7
        JOIN23A7:  preds = [ASSIGN23A4,ASSIGN2433]
          bool _t23A5#1 = phi(_t23A3,_t23A6)
          goto JOIN23AA
        JOIN23AA:  preds = [JOIN23A7,ASSIGN2434]
          bool _t23A8#1 = phi(_t23A5,_t23A9)
          real op1_e3_l_1823AB#1 = VDot<3>(mid238B,mid238B);
          real _t23AE#2 = Sqrt(op1_e3_l_1823AB);
          bool _t23B1#1 = LT<real>(_t23AE,_t1FB9);
          if _t23B1 then goto ASSIGN23B5 else goto ASSIGN2432
        ASSIGN23B5:  preds = [COND23B3]
          real _t23B4#1 = 0.2e1;
          bool _t23B6#1 = GT<real>(_t23AE,_t23B4);
          if _t23B6 then goto JOIN23BB else goto ASSIGN2431
        JOIN23BB:  preds = [COND23B8,ASSIGN2431]
          bool _t23B9#1 = phi(_t23A8,_t23BA)
          goto JOIN23BE
        JOIN23BE:  preds = [JOIN23BB,ASSIGN2432]
          bool _t23BC#1 = phi(_t23B9,_t23BD)
          if _t23BC then goto ASSIGN23C1 else goto ASSIGN2430
        ASSIGN23C1:  preds = [COND23BF]
          real _t23C0#6 = VIndex<3,0>(npos2388);
          bool _t23C2#1 = EQ<real>(_t23C0,_t23C0);
          bool _t23C4#1 = BNot(_t23C2);
          if _t23C4 then goto ASSIGN23C8 else goto ASSIGN2421
        ASSIGN23C8:  preds = [COND23C6]
          bool _t23C7#1 = true;
          goto JOIN23CB
        JOIN23CB:  preds = [ASSIGN23C8,JOIN242A]
          bool _t23C9#1 = phi(_t23C7,_t23CA)
          bool _t23CC#1 = BNot(_t23C9);
          if _t23CC then goto ASSIGN23D0 else goto ASSIGN241F
        ASSIGN23D0:  preds = [COND23CE]
          real y23CF#5 = VIndex<3,1>(npos2388);
          real z23D1#4 = VIndex<3,2>(npos2388);
          int _t23D3#1 = 2;
          real _t23D5#4 = RMul(y23CF,y23CF);
          real _t23D8#1 = RMul(z23D1,_t23D5);
          real _t23DB#4 = 0.2e1;
          real r23DE#1 = RMul(_t23DB,_t23C0);
          real _t23DD#2 = RMul(r23DE,y23CF);
          real r23E3#1 = RMul(_t23DB,_t23C0);
          real r23E4#1 = RMul(r23E3,y23CF);
          real _t23E2#1 = RMul(r23E4,z23D1);
          real _t23E9#1 = RMul(_t23C0,_t23D5);
          tensor[3] g23EC#2 = <tensor[3]>[_t23D8,_t23E2,_t23E9];
          real r23EF#1 = RMul(_t23DB,y23CF);
          real _t23EE#2 = RMul(r23EF,z23D1);
          tensor[3] _t23F3#1 = <tensor[3]>[_t1F8D,_t23EE,_t23D5];
          real r23F6#1 = RMul(_t23DB,_t23C0);
          real _t23F5#1 = RMul(r23F6,z23D1);
          tensor[3] _t23FA#1 = <tensor[3]>[_t23EE,_t23F5,_t23DD];
          tensor[3] _t23FC#1 = <tensor[3]>[_t23D5,_t23DD,_t1F8D];
          tensor[3,3] hess23FE#1 = <tensor[3,3]>[_t23F3,_t23FA,_t23FC];
          real[3] _t2400#1 = EigenVals3x3(hess23FE);
          real _t2402#1 = Subscript<real[3]>(_t2400,_t23D3);
          real op1_e3_l_32404#1 = VDot<3>(g23EC,g23EC);
          real op1_e3_l_42407#1 = Sqrt(op1_e3_l_32404);
          real op1_e3_l_5240A#1 = RNeg(_t2402);
          real op1_e3_l_6240D#1 = RAdd(fBias1F79,op1_e3_l_42407);
          real str2410#1 = RDiv(op1_e3_l_5240A,op1_e3_l_6240D);
          bool _t2413#1 = GTE<real>(str2410,fStren1F7B);
          goto JOIN2417
        JOIN2417:  preds = [ASSIGN2414,ASSIGN241F]
          bool _t2415#1 = phi(_t2413,_t2416)
          goto JOIN241A
        JOIN241A:  preds = [JOIN2417,ASSIGN2430]
          bool _t2418#1 = phi(_t2415,_t2419)
          if _t2418 then goto NEW241C else goto JOIN241D
        NEW241C:  preds = [COND241B]
          new particle(npos2388,hh20E4);
          goto JOIN241D
        JOIN241D:  preds = [NEW241C,COND241B]
          goto JOIN241E
        JOIN241E:  preds = [JOIN241D,COND236B]
          goto JOIN20E7
        ASSIGN241F:  preds = [COND23CE]
          bool _t2416#1 = false;
          goto JOIN2417
        ASSIGN2421:  preds = [COND23C6]
          real _t2420#2 = VIndex<3,1>(npos2388);
          bool _t2422#1 = EQ<real>(_t2420,_t2420);
          bool _t2424#1 = BNot(_t2422);
          if _t2424 then goto ASSIGN2428 else goto ASSIGN242C
        ASSIGN2428:  preds = [COND2426]
          bool _t2427#1 = true;
          goto JOIN242A
        JOIN242A:  preds = [ASSIGN2428,ASSIGN242F]
          bool _t23CA#1 = phi(_t2427,_t2429)
          goto JOIN23CB
        ASSIGN242C:  preds = [COND2426]
          real _t242B#2 = VIndex<3,2>(npos2388);
          bool _t242D#1 = EQ<real>(_t242B,_t242B);
          bool _t2429#1 = BNot(_t242D);
          goto JOIN242A
        ASSIGN2430:  preds = [COND23BF]
          bool _t2419#1 = false;
          goto JOIN241A
        ASSIGN2431:  preds = [COND23B8]
          bool _t23BA#1 = false;
          goto JOIN23BB
        ASSIGN2432:  preds = [COND23B3]
          bool _t23BD#1 = false;
          goto JOIN23BE
        ASSIGN2433:  preds = [COND239D]
          bool _t23A6#1 = false;
          goto JOIN23A7
        ASSIGN2434:  preds = [COND2395]
          bool _t23A9#1 = false;
          goto JOIN23AA
        ASSIGN2436:  preds = [COND235E]
          real _t2435#2 = VIndex<3,1>(pos20E6);
          bool _t2437#1 = EQ<real>(_t2435,_t2435);
          bool _t2439#1 = BNot(_t2437);
          if _t2439 then goto ASSIGN243D else goto ASSIGN2441
        ASSIGN243D:  preds = [COND243B]
          bool _t243C#1 = true;
          goto JOIN243F
        JOIN243F:  preds = [ASSIGN243D,ASSIGN2444]
          bool _t2362#1 = phi(_t243C,_t243E)
          goto JOIN2363
        ASSIGN2441:  preds = [COND243B]
          real _t2440#2 = VIndex<3,2>(pos20E6);
          bool _t2442#1 = EQ<real>(_t2440,_t2440);
          bool _t243E#1 = BNot(_t2442);
          goto JOIN243F
        ASSIGN2445:  preds = [COND21C7]
          bool _t220F#1 = false;
          goto JOIN2210
        ASSIGN2447:  preds = [COND21BF]
          real _t2446#2 = VIndex<3,1>(npos217F);
          bool _t2448#1 = EQ<real>(_t2446,_t2446);
          bool _t244A#1 = BNot(_t2448);
          if _t244A then goto ASSIGN244E else goto ASSIGN2452
        ASSIGN244E:  preds = [COND244C]
          bool _t244D#1 = true;
          goto JOIN2450
        JOIN2450:  preds = [ASSIGN244E,ASSIGN2455]
          bool _t21C3#1 = phi(_t244D,_t244F)
          goto JOIN21C4
        ASSIGN2452:  preds = [COND244C]
          real _t2451#2 = VIndex<3,2>(npos217F);
          bool _t2453#1 = EQ<real>(_t2451,_t2451);
          bool _t244F#1 = BNot(_t2453);
          goto JOIN2450
        ASSIGN2456:  preds = [COND21B8]
          bool _t2212#1 = false;
          goto JOIN2213
        ASSIGN2457:  preds = [COND21B1]
          bool _t21B3#1 = false;
          goto JOIN21B4
        ASSIGN2458:  preds = [COND21AC]
          bool _t21B6#1 = false;
          goto JOIN21B7
        ASSIGN2459:  preds = [COND2196]
          bool _t219F#1 = false;
          goto JOIN21A0
        ASSIGN245A:  preds = [COND218E]
          bool _t21A2#1 = false;
          goto JOIN21A3
        ASSIGN245C:  preds = [COND210D]
          real _t245B#2 = VIndex<3,1>(pos2104);
          bool _t245D#1 = EQ<real>(_t245B,_t245B);
          bool _t245F#1 = BNot(_t245D);
          if _t245F then goto ASSIGN2463 else goto ASSIGN2467
        ASSIGN2463:  preds = [COND2461]
          bool _t2462#1 = true;
          goto JOIN2465
        JOIN2465:  preds = [ASSIGN2463,ASSIGN246A]
          bool _t2111#1 = phi(_t2462,_t2464)
          goto JOIN2112
        ASSIGN2467:  preds = [COND2461]
          real _t2466#2 = VIndex<3,2>(pos2104);
          bool _t2468#1 = EQ<real>(_t2466,_t2466);
          bool _t2464#1 = BNot(_t2468);
          goto JOIN2465
        ASSIGN246B:  preds = [COND1FD8]
          bool _t2020#1 = false;
          goto JOIN2021
        ASSIGN246D:  preds = [COND1FD0]
          real _t246C#2 = VIndex<3,1>(pos1F7D);
          bool _t246E#1 = EQ<real>(_t246C,_t246C);
          bool _t2470#1 = BNot(_t246E);
          if _t2470 then goto ASSIGN2474 else goto ASSIGN2478
        ASSIGN2474:  preds = [COND2472]
          bool _t2473#1 = true;
          goto JOIN2476
        JOIN2476:  preds = [ASSIGN2474,ASSIGN247B]
          bool _t1FD4#1 = phi(_t2473,_t2475)
          goto JOIN1FD5
        ASSIGN2478:  preds = [COND2472]
          real _t2477#2 = VIndex<3,2>(pos1F7D);
          bool _t2479#1 = EQ<real>(_t2477,_t2477);
          bool _t2475#1 = BNot(_t2479);
          goto JOIN2476
        ASSIGN247C:  preds = [COND1FC9]
          bool _t2023#1 = false;
          goto JOIN2024
        ASSIGN247D:  preds = [COND1FC2]
          bool _t1FC4#1 = false;
          goto JOIN1FC5
        ASSIGN247E:  preds = [COND1FBD]
          bool _t1FC7#1 = false;
          goto JOIN1FC8
        ASSIGN247F:  preds = [COND1FA5]
          bool _t1FAE#1 = false;
          goto JOIN1FAF
        ASSIGN2480:  preds = [COND1F9D]
          bool _t1FB1#1 = false;
          goto JOIN1FB2
    end update
  end particle
## initial strand creation
  COLLECTION
    ENTRY2481:  preds = []
      tensor[3][] ipos2482#1 = globals.ipos1F2E;
    FOREACH2485:  preds = [ASSIGN2483,NEXT2489]
      foreach (x2484 in ipos2482) on exit goto RETURN248A
      real _t2486#1 = 0.1e1;
      new particle(x2484,_t2486);
      goto FOREACH2485
    RETURN248A:  preds = [FOREACH2485]
      return
## global update
  ENTRY248B:  preds = []
    real rad248C#1 = globals.rad1F28;
    real eps248E#1 = globals.eps1F29;
    particle[] P2490#5 = Strands<particle,all>;
    (int res2498#1) = sum<int>(MAP sum2492 (P2490));
    (int res24A0#2) = max<int>(MAP max249A (P2490));
    (int res24A8#1) = sum<int>(MAP sum24A2 (P2490));
    (bool res24B0#2) = all(MAP all24AA (P2490));
    (real res24BE#1) = max<real>(MAP max24B2 (P2490));
    string _t24C0#1 = "One run:";
    string _t24C2#3 = " and ";
    real _t24C4#2 = RDiv(res24BE,rad248C);
    bool _t24C7#2 = LT<real>(_t24C4,eps248E);
    string _t24C9#1 = " of ";
    string _t24CB#2 = "\n";
    Print<[string,bool,string,real,string,bool,string,int,string,int,string]>(_t24C0,res24B0,_t24C2,_t24C4,_t24C2,_t24C7,_t24C2,res24A8,_t24C9,res2498,_t24CB);
    if res24B0 then goto COND24CF else goto JOIN24D5
  COND24CF:  preds = [COND24CE]
    if _t24C7 then goto ASSIGN24D1 else goto JOIN24D4
  ASSIGN24D1:  preds = [COND24CF]
    string _t24D0#1 = "CONVERGED!\n";
    Print<[string]>(_t24D0);
    StabilizeAll;
    goto JOIN24D4
  JOIN24D4:  preds = [MASSIGN24D3,COND24CF]
    goto JOIN24D5
  JOIN24D5:  preds = [JOIN24D4,COND24CE]
    int _t24D6#1 = 2000;
    bool _t24D8#1 = GT<int>(res24A0,_t24D6);
    if _t24D8 then goto MASSIGN24DB else goto JOIN24DC
  MASSIGN24DB:  preds = [COND24DA]
    StabilizeAll;
    goto JOIN24DC
  JOIN24DC:  preds = [MASSIGN24DB,COND24DA]
    string _t24DD#1 = "Current steps:";
    Print<[string,int,string]>(_t24DD,res24A0,_t24CB);
    continue
#### end program ####
##### low-ir: after contraction(1) ####
## properties
  GlobalInit StabilizeAll GlobalReduce StrandSets GlobalUpdate NewStrands StrandCommunication StrandsMayDie HasInputs HasGlobals ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
## globals
  input meshData1F25 (meshData) = <no-default>
  input 0space04FA_intermedateGlobal1F26 (space) = <no-default>
  input 0data04FC_intermedateGlobal1F27 (data) = <no-default>
  input rad1F28 (rad) = <default>
  input eps1F29 (eps) = <default>
  input v01F2A (v0) = <default>
  input fBias1F2B (fBias) = <default>
  input fStren1F2C (fStren) = <default>
  input zfuz1F2D (zfuz) = <default>
  input ipos1F2E (ipos) = <no-default>
## functions
  function tensor[3] fStep202E (tensor[3] s202F#3) {
    ENTRY2030:  preds = []
      real x2031#4 = VIndex<3,0>(s202F);
      real y2033#5 = VIndex<3,1>(s202F);
      real z2035#4 = VIndex<3,2>(s202F);
      int _t2037#2 = 2;
      real _t2039#4 = RMul(y2033,y2033);
      real _t203C#1 = RMul(z2035,_t2039);
      real _t203F#4 = 0.2e1;
      real r2042#1 = RMul(_t203F,x2031);
      real _t2041#2 = RMul(r2042,y2033);
      real r2047#1 = RMul(_t203F,x2031);
      real r2048#1 = RMul(r2047,y2033);
      real _t2046#1 = RMul(r2048,z2035);
      real _t204D#1 = RMul(x2031,_t2039);
      tensor[3] g2050#1 = <tensor[3]>[_t203C,_t2046,_t204D];
      real _t2052#2 = 0.e0;
      real r2055#1 = RMul(_t203F,y2033);
      real _t2054#2 = RMul(r2055,z2035);
      tensor[3] _t2059#1 = <tensor[3]>[_t2052,_t2054,_t2039];
      real r205C#1 = RMul(_t203F,x2031);
      real _t205B#1 = RMul(r205C,z2035);
      tensor[3] _t2060#1 = <tensor[3]>[_t2054,_t205B,_t2041];
      tensor[3] _t2062#1 = <tensor[3]>[_t2039,_t2041,_t2052];
      tensor[3,3] hess2064#1 = <tensor[3,3]>[_t2059,_t2060,_t2062];
      (real[3] evals2066#1,tensor[3][3] E2067#1) = EigenVecs3x3(hess2064);
      real _t2069#1 = 0.1e1;
      real _t206B#1 = Subscript<real[3]>(evals2066,_t2037);
      tensor[3] _t206D#4 = Subscript<tensor[3][3]>(E2067,_t2037);
      real op1_e3_l_5206F#1 = RDiv(_t2069,_t206B);
      real op1_e3_l_62072#3 = RNeg(op1_e3_l_5206F);
      real op1_e3_l_72075#3 = VDot<3>(_t206D,g2050);
      real r2079#1 = TensorIndex<tensor[3],[0]>(_t206D);
      real r207A#1 = RMul(op1_e3_l_62072,r2079);
      real r207B#1 = RMul(r207A,op1_e3_l_72075);
      real r207C#1 = TensorIndex<tensor[3],[1]>(_t206D);
      real r207D#1 = RMul(op1_e3_l_62072,r207C);
      real r207E#1 = RMul(r207D,op1_e3_l_72075);
      real r207F#1 = TensorIndex<tensor[3],[2]>(_t206D);
      real r2080#1 = RMul(op1_e3_l_62072,r207F);
      real r2081#1 = RMul(r2080,op1_e3_l_72075);
      tensor[3] up2078#4 = <tensor[3]>[r207B,r207E,r2081];
      real _t208D#2 = VIndex<3,0>(up2078);
      bool _t208F#1 = EQ<real>(_t208D,_t208D);
      bool _t2091#1 = BNot(_t208F);
      if _t2091 then goto ASSIGN2095 else goto ASSIGN20A2
    ASSIGN2095:  preds = [COND2093]
      bool _t2094#1 = true;
      goto JOIN2098
    JOIN2098:  preds = [ASSIGN2095,JOIN20AB]
      bool _t2096#1 = phi(_t2094,_t2097)
      if _t2096 then goto ASSIGN209B else goto JOIN209F
    ASSIGN209B:  preds = [COND2099]
      real _t209A#3 = +inf;
      tensor[3] _t209C#1 = <tensor[3]>[_t209A,_t209A,_t209A];
      return _t209C
      goto JOIN209F
    JOIN209F:  preds = [*RETURN(_t209C)209E,COND2099]
      return up2078
    ASSIGN20A2:  preds = [COND2093]
      real _t20A1#2 = VIndex<3,1>(up2078);
      bool _t20A3#1 = EQ<real>(_t20A1,_t20A1);
      bool _t20A5#1 = BNot(_t20A3);
      if _t20A5 then goto ASSIGN20A9 else goto ASSIGN20AD
    ASSIGN20A9:  preds = [COND20A7]
      bool _t20A8#1 = true;
      goto JOIN20AB
    JOIN20AB:  preds = [ASSIGN20A9,ASSIGN20B0]
      bool _t2097#1 = phi(_t20A8,_t20AA)
      goto JOIN2098
    ASSIGN20AD:  preds = [COND20A7]
      real _t20AC#2 = VIndex<3,2>(up2078);
      bool _t20AE#1 = EQ<real>(_t20AC,_t20AC);
      bool _t20AA#1 = BNot(_t20AE);
      goto JOIN20AB
}
  function tensor[3,3] fPerp221E (tensor[3] s221F#3) {
    ENTRY2220:  preds = []
      real x2221#2 = VIndex<3,0>(s221F);
      real y2223#4 = VIndex<3,1>(s221F);
      real z2225#2 = VIndex<3,2>(s221F);
      int _t2227#1 = 2;
      real _t2229#2 = RMul(y2223,y2223);
      real _t222C#3 = 0.2e1;
      real r222F#1 = RMul(_t222C,x2221);
      real _t222E#2 = RMul(r222F,y2223);
      real _t2233#2 = 0.e0;
      real r2236#1 = RMul(_t222C,y2223);
      real _t2235#2 = RMul(r2236,z2225);
      tensor[3] _t223A#1 = <tensor[3]>[_t2233,_t2235,_t2229];
      real r223D#1 = RMul(_t222C,x2221);
      real _t223C#1 = RMul(r223D,z2225);
      tensor[3] _t2241#1 = <tensor[3]>[_t2235,_t223C,_t222E];
      tensor[3] _t2243#1 = <tensor[3]>[_t2229,_t222E,_t2233];
      tensor[3,3] hess2245#1 = <tensor[3,3]>[_t223A,_t2241,_t2243];
      (real[3] evals2247#0,tensor[3][3] _t2248#1) = EigenVecs3x3(hess2245);
      tensor[3] E2224A#6 = Subscript<tensor[3][3]>(_t2248,_t2227);
      real r224D#1 = TensorIndex<tensor[3],[0]>(E2224A);
      tensor[3] binopV224E#3 = VScale<3>(r224D,E2224A);
      real r224F#1 = TensorIndex<tensor[3],[1]>(E2224A);
      tensor[3] binopV2250#3 = VScale<3>(r224F,E2224A);
      real r2251#1 = TensorIndex<tensor[3],[2]>(E2224A);
      tensor[3] binopV2252#3 = VScale<3>(r2251,E2224A);
      real realLit225C#3 = 0.1e1;
      real r225D#1 = VIndex<3,0>(binopV224E);
      real r225E#1 = RSub(realLit225C,r225D);
      real realLit225F#6 = 0.e0;
      real r2260#1 = VIndex<3,1>(binopV224E);
      real r2261#1 = RSub(realLit225F,r2260);
      real r2262#1 = VIndex<3,2>(binopV224E);
      real r2263#1 = RSub(realLit225F,r2262);
      tensor[3] tensor2264#2 = <tensor[3]>[r225E,r2261,r2263];
      real r2265#1 = VIndex<3,0>(binopV2250);
      real r2266#1 = RSub(realLit225F,r2265);
      real r2267#1 = VIndex<3,1>(binopV2250);
      real r2268#1 = RSub(realLit225C,r2267);
      real r2269#1 = VIndex<3,2>(binopV2250);
      real r226A#1 = RSub(realLit225F,r2269);
      tensor[3] tensor226B#2 = <tensor[3]>[r2266,r2268,r226A];
      real r226C#1 = VIndex<3,0>(binopV2252);
      real r226D#1 = RSub(realLit225F,r226C);
      real r226E#1 = VIndex<3,1>(binopV2252);
      real r226F#1 = RSub(realLit225F,r226E);
      real r2270#1 = VIndex<3,2>(binopV2252);
      real r2271#1 = RSub(realLit225C,r2270);
      tensor[3] tensor2272#2 = <tensor[3]>[r226D,r226F,r2271];
      tensor[3,3] m225B#1 = <tensor[3,3]>[tensor2264,tensor226B,tensor2272];
      tensor[3] projParam228D#2 = tensor2264;
      real vdot228E#1 = VDot<3>(projParam228D,projParam228D);
      tensor[3] projParam228F#2 = tensor226B;
      real vdot2290#1 = VDot<3>(projParam228F,projParam228F);
      real r2291#1 = RAdd(vdot228E,vdot2290);
      tensor[3] projParam2292#2 = tensor2272;
      real vdot2293#1 = VDot<3>(projParam2292,projParam2292);
      real t228C#2 = RAdd(r2291,vdot2293);
      bool _t229D#1 = EQ<real>(t228C,t228C);
      bool _t229F#1 = BNot(_t229D);
      if _t229F then goto ASSIGN22A6 else goto JOIN22AA
    ASSIGN22A6:  preds = [COND22A1]
      real realLit22A3#3 = 0.e0;
      tensor[3] tensor22A4#3 = <tensor[3]>[realLit22A3,realLit22A3,realLit22A3];
      tensor[3,3] _t22A2#1 = <tensor[3,3]>[tensor22A4,tensor22A4,tensor22A4];
      return _t22A2
      goto JOIN22AA
    JOIN22AA:  preds = [*RETURN(_t22A2)22A9,COND22A1]
      return m225B
}
  function int sum2492 (particle P2493#1) {
    ENTRY2494:  preds = []
      int _t2495#1 = P2493.test;
      return _t2495
}
  function int max249A (particle P249B#1) {
    ENTRY249C:  preds = []
      int _t249D#1 = P249B.steps;
      return _t249D
}
  function int sum24A2 (particle P24A3#1) {
    ENTRY24A4:  preds = []
      int _t24A5#1 = P24A3.testp;
      return _t24A5
}
  function bool all24AA (particle P24AB#1) {
    ENTRY24AC:  preds = []
      bool _t24AD#1 = P24AB.found;
      return _t24AD
}
  function real max24B2 (particle P24B3#1) {
    ENTRY24B4:  preds = []
      tensor[3] _t24B5#2 = P24B3.step;
      real op1_e3_l_124B7#1 = VDot<3>(_t24B5,_t24B5);
      real _t24BA#1 = Sqrt(op1_e3_l_124B7);
      return _t24BA
}
## input initialization
  ENTRY1F2F:  preds = []
    real rad1F30#5 = 0.1e-1;
    globals.rad1F28 = rad1F30;
    globals.eps1F29 = rad1F30;
    real v01F34#1 = 0.625e-1;
    globals.v01F2A = v01F34;
    globals.fBias1F2B = rad1F30;
    globals.fStren1F2C = rad1F30;
    globals.zfuz1F2D = rad1F30;
    return
## global-variable initialization
  ENTRY1F3B:  preds = []
    femData:Mesh meshData1F3C#2 = globals.meshData1F25;
    int _t1F3E#1 = 0;
    int _t1F40#1 = 1;
    int _t1F42#1 = ExtractFemItem<int,NumCell(Mesh)>(meshData1F3C);
    int _t1F44#1 = ISub(_t1F42,_t1F40);
    int[] _t1F46#1 = Range(_t1F3E,_t1F44);
    femData:MeshCell[] _t1F48#1 = <femData:MeshCell[]>{};
  FOREACH1F4B:  preds = [ASSIGN1F49,NEXT1F51]
    foreach (_t1F4A in _t1F46) on exit goto RETURN1F52
      femData:MeshCell[] _t1F4F#1 = phi(_t1F48,_t1F4E)
    femData:MeshCell _t1F4C#1 = LoadFem<femData:MeshCell>(meshData1F3C,_t1F4A);
    femData:MeshCell[] _t1F4E#1 = Append<femData:MeshCell>(_t1F4F,_t1F4C);
    goto FOREACH1F4B
  RETURN1F52:  preds = [FOREACH1F4B]
    return
## strand
  strand particle (tensor[3] pos01F53#2, real hh01F54#1) in 3D
    state:
      output tensor[3] pos;
      output tensor[3] _pos;
      real hh;
      tensor[3] step;
      bool found;
      int nfs;
      int test;
      int testp;
      int steps;
    state init
      ENTRY1F5E:  preds = []
        real realLit1F60#3 = 0.e0;
        tensor[3] step1F5F#1 = <tensor[3]>[realLit1F60,realLit1F60,realLit1F60];
        bool found1F64#1 = false;
        int nfs1F66#3 = 0;
        int test1F68#1 = 1;
        self.pos = pos01F53;
        self._pos = pos01F53;
        self.hh = hh01F54;
        self.step = step1F5F;
        self.found = found1F64;
        self.nfs = nfs1F66;
        self.test = test1F68;
        self.testp = nfs1F66;
        self.steps = nfs1F66;
        return
    end state init
    method update
        ENTRY1F74:  preds = []
          real rad1F75#10 = globals.rad1F28;
          real eps1F77#1 = globals.eps1F29;
          real fBias1F79#3 = globals.fBias1F2B;
          real fStren1F7B#3 = globals.fStren1F2C;
          tensor[3] pos1F7D#13 = self.pos;
          real hh1F7F#8 = self.hh;
          bool found1F81#3 = self.found;
          int nfs1F83#3 = self.nfs;
          int testp1F85#2 = self.testp;
          int steps1F87#1 = self.steps;
          int _t1F89#4 = 1;
          int steps1F8B#4 = IAdd(steps1F87,_t1F89);
          real _t1F8D#13 = 0.e0;
          tensor[3] _t1F8F#3 = <tensor[3]>[_t1F8D,_t1F8D,_t1F8D];
          tensor[3] mid1F91#5 = VSub<3>(pos1F7D,_t1F8F);
          real _t1F94#1 = VIndex<3,0>(mid1F91);
          real _t1F96#1 = Abs<real>(_t1F94);
          real _t1F99#9 = 0.1e0;
          bool _t1F9B#1 = GT<real>(_t1F96,_t1F99);
          if _t1F9B then goto ASSIGN1F9F else goto ASSIGN2480
        ASSIGN1F9F:  preds = [COND1F9D]
          real _t1F9E#1 = VIndex<3,1>(mid1F91);
          real _t1FA0#1 = Abs<real>(_t1F9E);
          bool _t1FA3#1 = GT<real>(_t1FA0,_t1F99);
          if _t1FA3 then goto ASSIGN1FA7 else goto ASSIGN247F
        ASSIGN1FA7:  preds = [COND1FA5]
          real _t1FA6#1 = VIndex<3,2>(mid1F91);
          real _t1FA8#1 = Abs<real>(_t1FA6);
          bool _t1FAB#1 = GT<real>(_t1FA8,_t1F99);
          goto JOIN1FAF
        JOIN1FAF:  preds = [ASSIGN1FAC,ASSIGN247F]
          bool _t1FAD#1 = phi(_t1FAB,_t1FAE)
          goto JOIN1FB2
        JOIN1FB2:  preds = [JOIN1FAF,ASSIGN2480]
          bool _t1FB0#1 = phi(_t1FAD,_t1FB1)
          real op1_e3_l_41FB3#1 = VDot<3>(mid1F91,mid1F91);
          real _t1FB6#2 = Sqrt(op1_e3_l_41FB3);
          real _t1FB9#3 = 0.5e1;
          bool _t1FBB#1 = LT<real>(_t1FB6,_t1FB9);
          if _t1FBB then goto ASSIGN1FBF else goto ASSIGN247E
        ASSIGN1FBF:  preds = [COND1FBD]
          real _t1FBE#1 = 0.2e1;
          bool _t1FC0#1 = GT<real>(_t1FB6,_t1FBE);
          if _t1FC0 then goto JOIN1FC5 else goto ASSIGN247D
        JOIN1FC5:  preds = [COND1FC2,ASSIGN247D]
          bool _t1FC3#1 = phi(_t1FB0,_t1FC4)
          goto JOIN1FC8
        JOIN1FC8:  preds = [JOIN1FC5,ASSIGN247E]
          bool _t1FC6#1 = phi(_t1FC3,_t1FC7)
          if _t1FC6 then goto ASSIGN1FCB else goto ASSIGN247C
        ASSIGN1FCB:  preds = [COND1FC9]
          real _t1FCA#6 = VIndex<3,0>(pos1F7D);
          bool _t1FCC#1 = EQ<real>(_t1FCA,_t1FCA);
          bool _t1FCE#1 = BNot(_t1FCC);
          if _t1FCE then goto ASSIGN1FD2 else goto ASSIGN246D
        ASSIGN1FD2:  preds = [COND1FD0]
          bool _t1FD1#1 = true;
          goto JOIN1FD5
        JOIN1FD5:  preds = [ASSIGN1FD2,JOIN2476]
          bool _t1FD3#1 = phi(_t1FD1,_t1FD4)
          bool _t1FD6#1 = BNot(_t1FD3);
          if _t1FD6 then goto ASSIGN1FDA else goto ASSIGN246B
        ASSIGN1FDA:  preds = [COND1FD8]
          real y1FD9#5 = VIndex<3,1>(pos1F7D);
          real z1FDB#4 = VIndex<3,2>(pos1F7D);
          int _t1FDD#1 = 2;
          real _t1FDF#4 = RMul(y1FD9,y1FD9);
          real _t1FE2#1 = RMul(z1FDB,_t1FDF);
          real _t1FE5#4 = 0.2e1;
          real r1FE8#1 = RMul(_t1FE5,_t1FCA);
          real _t1FE7#2 = RMul(r1FE8,y1FD9);
          real r1FED#1 = RMul(_t1FE5,_t1FCA);
          real r1FEE#1 = RMul(r1FED,y1FD9);
          real _t1FEC#1 = RMul(r1FEE,z1FDB);
          real _t1FF3#1 = RMul(_t1FCA,_t1FDF);
          tensor[3] g1FF6#2 = <tensor[3]>[_t1FE2,_t1FEC,_t1FF3];
          real r1FF9#1 = RMul(_t1FE5,y1FD9);
          real _t1FF8#2 = RMul(r1FF9,z1FDB);
          tensor[3] _t1FFD#1 = <tensor[3]>[_t1F8D,_t1FF8,_t1FDF];
          real r2000#1 = RMul(_t1FE5,_t1FCA);
          real _t1FFF#1 = RMul(r2000,z1FDB);
          tensor[3] _t2004#1 = <tensor[3]>[_t1FF8,_t1FFF,_t1FE7];
          tensor[3] _t2006#1 = <tensor[3]>[_t1FDF,_t1FE7,_t1F8D];
          tensor[3,3] hess2008#1 = <tensor[3,3]>[_t1FFD,_t2004,_t2006];
          real[3] _t200A#1 = EigenVals3x3(hess2008);
          real _t200C#1 = Subscript<real[3]>(_t200A,_t1FDD);
          real op1_e3_l_3200E#1 = VDot<3>(g1FF6,g1FF6);
          real op1_e3_l_42011#1 = Sqrt(op1_e3_l_3200E);
          real op1_e3_l_52014#1 = RNeg(_t200C);
          real op1_e3_l_62017#1 = RAdd(fBias1F79,op1_e3_l_42011);
          real str201A#1 = RDiv(op1_e3_l_52014,op1_e3_l_62017);
          bool _t201D#1 = GTE<real>(str201A,fStren1F7B);
          goto JOIN2021
        JOIN2021:  preds = [ASSIGN201E,ASSIGN246B]
          bool _t201F#1 = phi(_t201D,_t2020)
          goto JOIN2024
        JOIN2024:  preds = [JOIN2021,ASSIGN247C]
          bool _t2022#1 = phi(_t201F,_t2023)
          bool _t2025#1 = BNot(_t2022);
          if _t2025 then goto DIE2028 else goto JOIN2029
        DIE2028:  preds = [COND2027]
          die
          goto JOIN2029
        JOIN2029:  preds = [*DIE2028,COND2027]
          bool _t202A#1 = BNot(found1F81);
          if _t202A then goto ASSIGN20B1 else goto ASSIGN2103
        ASSIGN20B1:  preds = [COND202C]
          tensor[3] step202D#4 = fStep202E (pos1F7D);
          tensor[3] pos20B2#4 = VAdd<3>(pos1F7D,step202D);
          real _t20B5#2 = VIndex<3,0>(pos20B2);
          bool _t20B7#1 = EQ<real>(_t20B5,_t20B5);
          bool _t20B9#1 = BNot(_t20B7);
          if _t20B9 then goto ASSIGN20BD else goto ASSIGN20F3
        ASSIGN20BD:  preds = [COND20BB]
          bool _t20BC#1 = true;
          goto JOIN20C0
        JOIN20C0:  preds = [ASSIGN20BD,JOIN20FC]
          bool _t20BE#1 = phi(_t20BC,_t20BF)
          if _t20BE then goto DIE20C2 else goto JOIN20C3
        DIE20C2:  preds = [COND20C1]
          die
          goto JOIN20C3
        JOIN20C3:  preds = [*DIE20C2,COND20C1]
          real op1_e3_l_220C4#1 = VDot<3>(step202D,step202D);
          real op1_e3_l_320C7#1 = Sqrt(op1_e3_l_220C4);
          real _t20CA#1 = RDiv(op1_e3_l_320C7,rad1F75);
          bool _t20CD#1 = GT<real>(_t20CA,eps1F77);
          if _t20CD then goto ASSIGN20D1 else goto ASSIGN20F1
        ASSIGN20D1:  preds = [COND20CF]
          int nfs20D0#2 = IAdd(nfs1F83,_t1F89);
          int _t20D2#1 = 10;
          bool _t20D4#1 = GT<int>(nfs20D0,_t20D2);
          if _t20D4 then goto DIE20D7 else goto JOIN20D8
        DIE20D7:  preds = [COND20D6]
          die
          goto JOIN20D8
        JOIN20D8:  preds = [*DIE20D7,COND20D6]
          goto JOIN20DD
        JOIN20DD:  preds = [JOIN20D8,ASSIGN20F1]
          int testp20D9#1 = phi(testp1F85,_t1F89)
          int nfs20DA#1 = phi(nfs20D0,nfs1F83)
          bool found20DB#1 = phi(found1F81,found20DC)
          goto JOIN20E7
        JOIN20E7:  preds = [JOIN20DD,JOIN241E]
          int testp20DE#1 = phi(testp20D9,testp1F85)
          int nfs20DF#1 = phi(nfs20DA,nfs1F83)
          bool found20E0#1 = phi(found20DB,found1F81)
          tensor[3] step20E1#1 = phi(step202D,up20E2)
          real hh20E3#1 = phi(hh1F7F,hh20E4)
          tensor[3] pos20E5#2 = phi(pos20B2,pos20E6)
          self.pos = pos20E5;
          self._pos = pos20E5;
          self.hh = hh20E3;
          self.step = step20E1;
          self.found = found20E0;
          self.nfs = nfs20DF;
          self.testp = testp20DE;
          self.steps = steps1F8B;
          active
        ASSIGN20F1:  preds = [COND20CF]
          bool found20DC#1 = true;
          goto JOIN20DD
        ASSIGN20F3:  preds = [COND20BB]
          real _t20F2#2 = VIndex<3,1>(pos20B2);
          bool _t20F4#1 = EQ<real>(_t20F2,_t20F2);
          bool _t20F6#1 = BNot(_t20F4);
          if _t20F6 then goto ASSIGN20FA else goto ASSIGN20FE
        ASSIGN20FA:  preds = [COND20F8]
          bool _t20F9#1 = true;
          goto JOIN20FC
        JOIN20FC:  preds = [ASSIGN20FA,ASSIGN2101]
          bool _t20BF#1 = phi(_t20F9,_t20FB)
          goto JOIN20C0
        ASSIGN20FE:  preds = [COND20F8]
          real _t20FD#2 = VIndex<3,2>(pos20B2);
          bool _t20FF#1 = EQ<real>(_t20FD,_t20FD);
          bool _t20FB#1 = BNot(_t20FF);
          goto JOIN20FC
        ASSIGN2103:  preds = [COND202C]
          tensor[3] _t2102#4 = fStep202E (pos1F7D);
          tensor[3] pos2104#13 = VAdd<3>(pos1F7D,_t2102);
          real _t2107#2 = VIndex<3,0>(pos2104);
          bool _t2109#1 = EQ<real>(_t2107,_t2107);
          bool _t210B#1 = BNot(_t2109);
          if _t210B then goto ASSIGN210F else goto ASSIGN245C
        ASSIGN210F:  preds = [COND210D]
          bool _t210E#1 = true;
          goto JOIN2112
        JOIN2112:  preds = [ASSIGN210F,JOIN2465]
          bool _t2110#1 = phi(_t210E,_t2111)
          if _t2110 then goto DIE2114 else goto JOIN2115
        DIE2114:  preds = [COND2113]
          die
          goto JOIN2115
        JOIN2115:  preds = [*DIE2114,COND2113]
          real realLit2117#3 = 0.e0;
          tensor[3] step2116#4 = <tensor[3]>[realLit2117,realLit2117,realLit2117];
          int nn211B#2 = 0;
          particle[] _t211D#1 = SphereQuery<3,particle>(pos2104,rad1F75);
        FOREACH2120:  preds = [ASSIGN211E,NEXT2174]
          foreach (P211F in _t211D) on exit goto ASSIGN2176
            int nn2172#3 = phi(nn211B,nn2171)
            tensor[3] force216E#4 = phi(step2116,force216D)
            real oldE213A#2 = phi(_t1F8D,oldE2139)
          tensor[3] _t2121#1 = P211F.pos;
          real _t2123#2 = 0.1e1;
          tensor[3] op1_e3_l_82125#5 = VSub<3>(_t2121,pos2104);
          real op1_e3_l_102128#1 = VDot<3>(op1_e3_l_82125,op1_e3_l_82125);
          real op1_e3_l_11212B#2 = Sqrt(op1_e3_l_102128);
          real op1_e3_l_12212E#1 = RDiv(op1_e3_l_11212B,rad1F75);
          real op1_e3_l_132131#5 = RSub(_t2123,op1_e3_l_12212E);
          real _Pow_22135#2 = RMul(op1_e3_l_132131,op1_e3_l_132131);
          real op1_e3_l_142134#1 = RMul(_Pow_22135,_Pow_22135);
          real oldE2139#1 = RAdd(oldE213A,op1_e3_l_142134);
          real _t213D#1 = -0.4e1;
          real _Pow2_2140#1 = RMul(op1_e3_l_132131,op1_e3_l_132131);
          real op1_e3_l_24213F#1 = RMul(op1_e3_l_132131,_Pow2_2140);
          real op1_e3_l_252144#1 = RDiv(_t2123,rad1F75);
          real r2148#1 = TensorIndex<tensor[3],[0]>(op1_e3_l_82125);
          real r2149#1 = RMul(_t213D,op1_e3_l_24213F);
          real r214A#3 = RMul(r2149,op1_e3_l_252144);
          real r214B#1 = RMul(r214A,r2148);
          real r214C#1 = TensorIndex<tensor[3],[1]>(op1_e3_l_82125);
          real r214D#1 = RMul(r214A,r214C);
          real r214E#1 = TensorIndex<tensor[3],[2]>(op1_e3_l_82125);
          real r214F#1 = RMul(r214A,r214E);
          real realLit215B#1 = 0.1e1;
          real r215C#3 = RDiv(realLit215B,op1_e3_l_11212B);
          real r215D#1 = r214B;
          real r215E#1 = RMul(r215C,r215D);
          real r215F#1 = r214D;
          real r2160#1 = RMul(r215C,r215F);
          real r2161#1 = r214F;
          real r2162#1 = RMul(r215C,r2161);
          tensor[3] op1_e3_l_34215A#1 = <tensor[3]>[r215E,r2160,r2162];
          tensor[3] force216D#1 = VAdd<3>(force216E,op1_e3_l_34215A);
          int nn2171#1 = IAdd(nn2172,_t1F89);
          goto FOREACH2120
        ASSIGN2176:  preds = [FOREACH2120]
          bool _t2175#1 = EQ<int>(nn211B,nn2172);
          if _t2175 then goto ASSIGN2179 else goto JOIN221C
        ASSIGN2179:  preds = [COND2177]
          real _t2178#1 = 0.5e0;
          real _t217A#1 = RMul(_t2178,rad1F75);
          tensor[3] _t217D#1 = <tensor[3]>[_t217A,_t1F8D,_t1F8D];
          tensor[3] v2180#1 = VAdd<3>(pos1F7D,_t2102);
          tensor[3] npos217F#7 = VAdd<3>(v2180,_t217D);
          tensor[3] mid2184#5 = VSub<3>(npos217F,_t1F8F);
          real _t2187#1 = VIndex<3,0>(mid2184);
          real _t2189#1 = Abs<real>(_t2187);
          bool _t218C#1 = GT<real>(_t2189,_t1F99);
          if _t218C then goto ASSIGN2190 else goto ASSIGN245A
        ASSIGN2190:  preds = [COND218E]
          real _t218F#1 = VIndex<3,1>(mid2184);
          real _t2191#1 = Abs<real>(_t218F);
          bool _t2194#1 = GT<real>(_t2191,_t1F99);
          if _t2194 then goto ASSIGN2198 else goto ASSIGN2459
        ASSIGN2198:  preds = [COND2196]
          real _t2197#1 = VIndex<3,2>(mid2184);
          real _t2199#1 = Abs<real>(_t2197);
          bool _t219C#1 = GT<real>(_t2199,_t1F99);
          goto JOIN21A0
        JOIN21A0:  preds = [ASSIGN219D,ASSIGN2459]
          bool _t219E#1 = phi(_t219C,_t219F)
          goto JOIN21A3
        JOIN21A3:  preds = [JOIN21A0,ASSIGN245A]
          bool _t21A1#1 = phi(_t219E,_t21A2)
          real op1_e3_l_821A4#1 = VDot<3>(mid2184,mid2184);
          real _t21A7#2 = Sqrt(op1_e3_l_821A4);
          bool _t21AA#1 = LT<real>(_t21A7,_t1FB9);
          if _t21AA then goto ASSIGN21AE else goto ASSIGN2458
        ASSIGN21AE:  preds = [COND21AC]
          real _t21AD#1 = 0.2e1;
          bool _t21AF#1 = GT<real>(_t21A7,_t21AD);
          if _t21AF then goto JOIN21B4 else goto ASSIGN2457
        JOIN21B4:  preds = [COND21B1,ASSIGN2457]
          bool _t21B2#1 = phi(_t21A1,_t21B3)
          goto JOIN21B7
        JOIN21B7:  preds = [JOIN21B4,ASSIGN2458]
          bool _t21B5#1 = phi(_t21B2,_t21B6)
          if _t21B5 then goto ASSIGN21BA else goto ASSIGN2456
        ASSIGN21BA:  preds = [COND21B8]
          real _t21B9#6 = VIndex<3,0>(npos217F);
          bool _t21BB#1 = EQ<real>(_t21B9,_t21B9);
          bool _t21BD#1 = BNot(_t21BB);
          if _t21BD then goto ASSIGN21C1 else goto ASSIGN2447
        ASSIGN21C1:  preds = [COND21BF]
          bool _t21C0#1 = true;
          goto JOIN21C4
        JOIN21C4:  preds = [ASSIGN21C1,JOIN2450]
          bool _t21C2#1 = phi(_t21C0,_t21C3)
          bool _t21C5#1 = BNot(_t21C2);
          if _t21C5 then goto ASSIGN21C9 else goto ASSIGN2445
        ASSIGN21C9:  preds = [COND21C7]
          real y21C8#5 = VIndex<3,1>(npos217F);
          real z21CA#4 = VIndex<3,2>(npos217F);
          int _t21CC#1 = 2;
          real _t21CE#4 = RMul(y21C8,y21C8);
          real _t21D1#1 = RMul(z21CA,_t21CE);
          real _t21D4#4 = 0.2e1;
          real r21D7#1 = RMul(_t21D4,_t21B9);
          real _t21D6#2 = RMul(r21D7,y21C8);
          real r21DC#1 = RMul(_t21D4,_t21B9);
          real r21DD#1 = RMul(r21DC,y21C8);
          real _t21DB#1 = RMul(r21DD,z21CA);
          real _t21E2#1 = RMul(_t21B9,_t21CE);
          tensor[3] g21E5#2 = <tensor[3]>[_t21D1,_t21DB,_t21E2];
          real r21E8#1 = RMul(_t21D4,y21C8);
          real _t21E7#2 = RMul(r21E8,z21CA);
          tensor[3] _t21EC#1 = <tensor[3]>[_t1F8D,_t21E7,_t21CE];
          real r21EF#1 = RMul(_t21D4,_t21B9);
          real _t21EE#1 = RMul(r21EF,z21CA);
          tensor[3] _t21F3#1 = <tensor[3]>[_t21E7,_t21EE,_t21D6];
          tensor[3] _t21F5#1 = <tensor[3]>[_t21CE,_t21D6,_t1F8D];
          tensor[3,3] hess21F7#1 = <tensor[3,3]>[_t21EC,_t21F3,_t21F5];
          real[3] _t21F9#1 = EigenVals3x3(hess21F7);
          real _t21FB#1 = Subscript<real[3]>(_t21F9,_t21CC);
          real op1_e3_l_321FD#1 = VDot<3>(g21E5,g21E5);
          real op1_e3_l_42200#1 = Sqrt(op1_e3_l_321FD);
          real op1_e3_l_52203#1 = RNeg(_t21FB);
          real op1_e3_l_62206#1 = RAdd(fBias1F79,op1_e3_l_42200);
          real str2209#1 = RDiv(op1_e3_l_52203,op1_e3_l_62206);
          bool _t220C#1 = GTE<real>(str2209,fStren1F7B);
          goto JOIN2210
        JOIN2210:  preds = [ASSIGN220D,ASSIGN2445]
          bool _t220E#1 = phi(_t220C,_t220F)
          goto JOIN2213
        JOIN2213:  preds = [JOIN2210,ASSIGN2456]
          bool _t2211#1 = phi(_t220E,_t2212)
          if _t2211 then goto NEW2215 else goto JOIN2216
        NEW2215:  preds = [COND2214]
          new particle(npos217F,hh1F7F);
          goto JOIN2216
        JOIN2216:  preds = [NEW2215,COND2214]
          self.pos = pos2104;
          self._pos = pos2104;
          self.step = step2116;
          self.steps = steps1F8B;
          active
          goto JOIN221C
        JOIN221C:  preds = [*ACTIVE221B,COND2177]
          tensor[3,3] _t221D#3 = fPerp221E (pos2104);
          tensor[3] projParam22AE#1 = ProjectLast<tensor[3,3],[0]>(_t221D);
          real vdot22AF#2 = VDot<3>(projParam22AE,force216E);
          tensor[3] projParam22B0#1 = ProjectLast<tensor[3,3],[1]>(_t221D);
          real vdot22B1#2 = VDot<3>(projParam22B0,force216E);
          tensor[3] projParam22B2#1 = ProjectLast<tensor[3,3],[2]>(_t221D);
          real vdot22B3#2 = VDot<3>(projParam22B2,force216E);
          tensor[3] op1_e3_l_322AD#4 = <tensor[3]>[vdot22AF,vdot22B1,vdot22B3];
          tensor[3] es22BC#1 = VScale<3>(hh1F7F,op1_e3_l_322AD);
          real op1_e3_l_522BF#1 = VDot<3>(op1_e3_l_322AD,op1_e3_l_322AD);
          real r22C3#1 = RMul(hh1F7F,hh1F7F);
          real op1_e3_l_622C2#1 = RMul(r22C3,op1_e3_l_522BF);
          real _t22C7#2 = Sqrt(op1_e3_l_622C2);
          bool _t22CA#1 = GT<real>(_t22C7,rad1F75);
          if _t22CA then goto ASSIGN22CF else goto JOIN22E6
        ASSIGN22CF:  preds = [COND22CC]
          real op1_e3_l_1022CD#2 = RDiv(rad1F75,_t22C7);
          real hh22D0#1 = RMul(hh1F7F,op1_e3_l_1022CD);
          real r22D4#1 = vdot22AF;
          real r22D5#3 = RMul(hh1F7F,op1_e3_l_1022CD);
          real r22D6#1 = RMul(r22D5,r22D4);
          real r22D7#1 = vdot22B1;
          real r22D8#1 = RMul(r22D5,r22D7);
          real r22D9#1 = vdot22B3;
          real r22DA#1 = RMul(r22D5,r22D9);
          tensor[3] es22D3#1 = <tensor[3]>[r22D6,r22D8,r22DA];
          goto JOIN22E6
        JOIN22E6:  preds = [ASSIGN22E3,COND22CC]
          tensor[3] es22E4#8 = phi(es22D3,es22BC)
          real hh22E5#2 = phi(hh22D0,hh1F7F)
          tensor[3] v22E8#1 = VAdd<3>(pos1F7D,_t2102);
          tensor[3] samplePos22E7#1 = VAdd<3>(v22E8,es22E4);
          tensor[3] fs22EC#4 = fStep202E (samplePos22E7);
          real op1_e3_l_222EE#1 = VDot<3>(fs22EC,fs22EC);
          real op1_e3_l_322F1#1 = VDot<3>(es22E4,es22E4);
          real op1_e3_l_422F4#1 = Sqrt(op1_e3_l_222EE);
          real op1_e3_l_522F7#2 = Sqrt(op1_e3_l_322F1);
          real _t22FA#1 = RDiv(op1_e3_l_422F4,op1_e3_l_522F7);
          real _t22FD#5 = 0.5e0;
          bool _t22FF#1 = GT<real>(_t22FA,_t22FD);
          if _t22FF then goto ASSIGN2304 else goto JOIN230C
        ASSIGN2304:  preds = [COND2301]
          real hh2302#1 = RMul(hh22E5,_t22FD);
          self.pos = pos2104;
          self._pos = pos2104;
          self.hh = hh2302;
          self.step = step2116;
          self.steps = steps1F8B;
          active
          goto JOIN230C
        JOIN230C:  preds = [*ACTIVE230A,COND2301]
          real hh230B#2 = phi(hh22E5)
          tensor[3] up20E2#1 = VAdd<3>(fs22EC,es22E4);
          tensor[3] v2310#1 = VAdd<3>(pos1F7D,_t2102);
          tensor[3] v2311#1 = VAdd<3>(v2310,fs22EC);
          tensor[3] pos230F#4 = VAdd<3>(v2311,es22E4);
          particle[] _t2316#1 = SphereQuery<3,particle>(pos230F,rad1F75);
        FOREACH2319:  preds = [ASSIGN2317,NEXT2336]
          foreach (P2318 in _t2316) on exit goto ASSIGN2339
            real accum2333#2 = phi(_t1F8D,accum2332)
          tensor[3] _t231A#1 = P2318.pos;
          real _t231C#1 = 0.1e1;
          tensor[3] op1_e3_l_10231E#2 = VSub<3>(pos230F,_t231A);
          real op1_e3_l_122321#1 = VDot<3>(op1_e3_l_10231E,op1_e3_l_10231E);
          real op1_e3_l_132324#1 = Sqrt(op1_e3_l_122321);
          real op1_e3_l_142327#1 = RDiv(op1_e3_l_132324,rad1F75);
          real op1_e3_l_15232A#2 = RSub(_t231C,op1_e3_l_142327);
          real _Pow_2232E#2 = RMul(op1_e3_l_15232A,op1_e3_l_15232A);
          real op1_e3_l_16232D#1 = RMul(_Pow_2232E,_Pow_2232E);
          real accum2332#1 = RAdd(accum2333,op1_e3_l_16232D);
          goto FOREACH2319
        ASSIGN2339:  preds = [FOREACH2319]
          real _t2337#1 = RSub(accum2333,oldE213A);
          tensor[3] op1_e3_l_12233A#1 = VSub<3>(pos230F,pos2104);
          tensor[3] op1_e3_l_13233D#1 = VNeg<3>(op1_e3_l_322AD);
          real op1_e3_l_142340#1 = VDot<3>(op1_e3_l_12233A,op1_e3_l_13233D);
          real _t2343#1 = RMul(_t22FD,op1_e3_l_142340);
          bool _t2346#1 = GT<real>(_t2337,_t2343);
          if _t2346 then goto ASSIGN234B else goto JOIN2353
        ASSIGN234B:  preds = [COND2348]
          real hh2349#1 = RMul(hh230B,_t22FD);
          self.pos = pos2104;
          self._pos = pos2104;
          self.hh = hh2349;
          self.step = step2116;
          self.steps = steps1F8B;
          active
          goto JOIN2353
        JOIN2353:  preds = [*ACTIVE2351,COND2348]
          real hh2352#1 = phi(hh230B)
          tensor[3] pos20E6#5 = phi(pos230F)
          real _t2354#1 = 0.11e1;
          real hh20E4#2 = RMul(hh2352,_t2354);
          real _t2358#2 = VIndex<3,0>(pos20E6);
          bool _t235A#1 = EQ<real>(_t2358,_t2358);
          bool _t235C#1 = BNot(_t235A);
          if _t235C then goto ASSIGN2360 else goto ASSIGN2436
        ASSIGN2360:  preds = [COND235E]
          bool _t235F#1 = true;
          goto JOIN2363
        JOIN2363:  preds = [ASSIGN2360,JOIN243F]
          bool _t2361#1 = phi(_t235F,_t2362)
          if _t2361 then goto DIE2365 else goto JOIN2366
        DIE2365:  preds = [COND2364]
          die
          goto JOIN2366
        JOIN2366:  preds = [*DIE2365,COND2364]
          int _t2367#1 = 5;
          bool _t2369#1 = LT<int>(nn2172,_t2367);
          if _t2369 then goto ASSIGN236F else goto JOIN241E
        ASSIGN236F:  preds = [COND236B]
          real realLit236D#1 = 0.1e1;
          real op1_e3_l_7236C#3 = RDiv(realLit236D,op1_e3_l_522F7);
          real r2372#1 = TensorIndex<tensor[3],[0]>(es22E4);
          real r2373#3 = RMul(_t22FD,rad1F75);
          real r2374#1 = RMul(r2373,r2372);
          real r2375#1 = RMul(r2374,op1_e3_l_7236C);
          real r2376#1 = TensorIndex<tensor[3],[1]>(es22E4);
          real r2377#1 = RMul(r2373,r2376);
          real r2378#1 = RMul(r2377,op1_e3_l_7236C);
          real r2379#1 = TensorIndex<tensor[3],[2]>(es22E4);
          real r237A#1 = RMul(r2373,r2379);
          real r237B#1 = RMul(r237A,op1_e3_l_7236C);
          tensor[3] op1_e3_l_82371#1 = <tensor[3]>[r2375,r2378,r237B];
          tensor[3] npos2388#7 = VAdd<3>(pos20E6,op1_e3_l_82371);
          tensor[3] mid238B#5 = VSub<3>(npos2388,_t1F8F);
          real _t238E#1 = VIndex<3,0>(mid238B);
          real _t2390#1 = Abs<real>(_t238E);
          bool _t2393#1 = GT<real>(_t2390,_t1F99);
          if _t2393 then goto ASSIGN2397 else goto ASSIGN2434
        ASSIGN2397:  preds = [COND2395]
          real _t2396#1 = VIndex<3,1>(mid238B);
          real _t2398#1 = Abs<real>(_t2396);
          bool _t239B#1 = GT<real>(_t2398,_t1F99);
          if _t239B then goto ASSIGN239F else goto ASSIGN2433
        ASSIGN239F:  preds = [COND239D]
          real _t239E#1 = VIndex<3,2>(mid238B);
          real _t23A0#1 = Abs<real>(_t239E);
          bool _t23A3#1 = GT<real>(_t23A0,_t1F99);
          goto JOIN23A7
        JOIN23A7:  preds = [ASSIGN23A4,ASSIGN2433]
          bool _t23A5#1 = phi(_t23A3,_t23A6)
          goto JOIN23AA
        JOIN23AA:  preds = [JOIN23A7,ASSIGN2434]
          bool _t23A8#1 = phi(_t23A5,_t23A9)
          real op1_e3_l_1823AB#1 = VDot<3>(mid238B,mid238B);
          real _t23AE#2 = Sqrt(op1_e3_l_1823AB);
          bool _t23B1#1 = LT<real>(_t23AE,_t1FB9);
          if _t23B1 then goto ASSIGN23B5 else goto ASSIGN2432
        ASSIGN23B5:  preds = [COND23B3]
          real _t23B4#1 = 0.2e1;
          bool _t23B6#1 = GT<real>(_t23AE,_t23B4);
          if _t23B6 then goto JOIN23BB else goto ASSIGN2431
        JOIN23BB:  preds = [COND23B8,ASSIGN2431]
          bool _t23B9#1 = phi(_t23A8,_t23BA)
          goto JOIN23BE
        JOIN23BE:  preds = [JOIN23BB,ASSIGN2432]
          bool _t23BC#1 = phi(_t23B9,_t23BD)
          if _t23BC then goto ASSIGN23C1 else goto ASSIGN2430
        ASSIGN23C1:  preds = [COND23BF]
          real _t23C0#6 = VIndex<3,0>(npos2388);
          bool _t23C2#1 = EQ<real>(_t23C0,_t23C0);
          bool _t23C4#1 = BNot(_t23C2);
          if _t23C4 then goto ASSIGN23C8 else goto ASSIGN2421
        ASSIGN23C8:  preds = [COND23C6]
          bool _t23C7#1 = true;
          goto JOIN23CB
        JOIN23CB:  preds = [ASSIGN23C8,JOIN242A]
          bool _t23C9#1 = phi(_t23C7,_t23CA)
          bool _t23CC#1 = BNot(_t23C9);
          if _t23CC then goto ASSIGN23D0 else goto ASSIGN241F
        ASSIGN23D0:  preds = [COND23CE]
          real y23CF#5 = VIndex<3,1>(npos2388);
          real z23D1#4 = VIndex<3,2>(npos2388);
          int _t23D3#1 = 2;
          real _t23D5#4 = RMul(y23CF,y23CF);
          real _t23D8#1 = RMul(z23D1,_t23D5);
          real _t23DB#4 = 0.2e1;
          real r23DE#1 = RMul(_t23DB,_t23C0);
          real _t23DD#2 = RMul(r23DE,y23CF);
          real r23E3#1 = RMul(_t23DB,_t23C0);
          real r23E4#1 = RMul(r23E3,y23CF);
          real _t23E2#1 = RMul(r23E4,z23D1);
          real _t23E9#1 = RMul(_t23C0,_t23D5);
          tensor[3] g23EC#2 = <tensor[3]>[_t23D8,_t23E2,_t23E9];
          real r23EF#1 = RMul(_t23DB,y23CF);
          real _t23EE#2 = RMul(r23EF,z23D1);
          tensor[3] _t23F3#1 = <tensor[3]>[_t1F8D,_t23EE,_t23D5];
          real r23F6#1 = RMul(_t23DB,_t23C0);
          real _t23F5#1 = RMul(r23F6,z23D1);
          tensor[3] _t23FA#1 = <tensor[3]>[_t23EE,_t23F5,_t23DD];
          tensor[3] _t23FC#1 = <tensor[3]>[_t23D5,_t23DD,_t1F8D];
          tensor[3,3] hess23FE#1 = <tensor[3,3]>[_t23F3,_t23FA,_t23FC];
          real[3] _t2400#1 = EigenVals3x3(hess23FE);
          real _t2402#1 = Subscript<real[3]>(_t2400,_t23D3);
          real op1_e3_l_32404#1 = VDot<3>(g23EC,g23EC);
          real op1_e3_l_42407#1 = Sqrt(op1_e3_l_32404);
          real op1_e3_l_5240A#1 = RNeg(_t2402);
          real op1_e3_l_6240D#1 = RAdd(fBias1F79,op1_e3_l_42407);
          real str2410#1 = RDiv(op1_e3_l_5240A,op1_e3_l_6240D);
          bool _t2413#1 = GTE<real>(str2410,fStren1F7B);
          goto JOIN2417
        JOIN2417:  preds = [ASSIGN2414,ASSIGN241F]
          bool _t2415#1 = phi(_t2413,_t2416)
          goto JOIN241A
        JOIN241A:  preds = [JOIN2417,ASSIGN2430]
          bool _t2418#1 = phi(_t2415,_t2419)
          if _t2418 then goto NEW241C else goto JOIN241D
        NEW241C:  preds = [COND241B]
          new particle(npos2388,hh20E4);
          goto JOIN241D
        JOIN241D:  preds = [NEW241C,COND241B]
          goto JOIN241E
        JOIN241E:  preds = [JOIN241D,COND236B]
          goto JOIN20E7
        ASSIGN241F:  preds = [COND23CE]
          bool _t2416#1 = false;
          goto JOIN2417
        ASSIGN2421:  preds = [COND23C6]
          real _t2420#2 = VIndex<3,1>(npos2388);
          bool _t2422#1 = EQ<real>(_t2420,_t2420);
          bool _t2424#1 = BNot(_t2422);
          if _t2424 then goto ASSIGN2428 else goto ASSIGN242C
        ASSIGN2428:  preds = [COND2426]
          bool _t2427#1 = true;
          goto JOIN242A
        JOIN242A:  preds = [ASSIGN2428,ASSIGN242F]
          bool _t23CA#1 = phi(_t2427,_t2429)
          goto JOIN23CB
        ASSIGN242C:  preds = [COND2426]
          real _t242B#2 = VIndex<3,2>(npos2388);
          bool _t242D#1 = EQ<real>(_t242B,_t242B);
          bool _t2429#1 = BNot(_t242D);
          goto JOIN242A
        ASSIGN2430:  preds = [COND23BF]
          bool _t2419#1 = false;
          goto JOIN241A
        ASSIGN2431:  preds = [COND23B8]
          bool _t23BA#1 = false;
          goto JOIN23BB
        ASSIGN2432:  preds = [COND23B3]
          bool _t23BD#1 = false;
          goto JOIN23BE
        ASSIGN2433:  preds = [COND239D]
          bool _t23A6#1 = false;
          goto JOIN23A7
        ASSIGN2434:  preds = [COND2395]
          bool _t23A9#1 = false;
          goto JOIN23AA
        ASSIGN2436:  preds = [COND235E]
          real _t2435#2 = VIndex<3,1>(pos20E6);
          bool _t2437#1 = EQ<real>(_t2435,_t2435);
          bool _t2439#1 = BNot(_t2437);
          if _t2439 then goto ASSIGN243D else goto ASSIGN2441
        ASSIGN243D:  preds = [COND243B]
          bool _t243C#1 = true;
          goto JOIN243F
        JOIN243F:  preds = [ASSIGN243D,ASSIGN2444]
          bool _t2362#1 = phi(_t243C,_t243E)
          goto JOIN2363
        ASSIGN2441:  preds = [COND243B]
          real _t2440#2 = VIndex<3,2>(pos20E6);
          bool _t2442#1 = EQ<real>(_t2440,_t2440);
          bool _t243E#1 = BNot(_t2442);
          goto JOIN243F
        ASSIGN2445:  preds = [COND21C7]
          bool _t220F#1 = false;
          goto JOIN2210
        ASSIGN2447:  preds = [COND21BF]
          real _t2446#2 = VIndex<3,1>(npos217F);
          bool _t2448#1 = EQ<real>(_t2446,_t2446);
          bool _t244A#1 = BNot(_t2448);
          if _t244A then goto ASSIGN244E else goto ASSIGN2452
        ASSIGN244E:  preds = [COND244C]
          bool _t244D#1 = true;
          goto JOIN2450
        JOIN2450:  preds = [ASSIGN244E,ASSIGN2455]
          bool _t21C3#1 = phi(_t244D,_t244F)
          goto JOIN21C4
        ASSIGN2452:  preds = [COND244C]
          real _t2451#2 = VIndex<3,2>(npos217F);
          bool _t2453#1 = EQ<real>(_t2451,_t2451);
          bool _t244F#1 = BNot(_t2453);
          goto JOIN2450
        ASSIGN2456:  preds = [COND21B8]
          bool _t2212#1 = false;
          goto JOIN2213
        ASSIGN2457:  preds = [COND21B1]
          bool _t21B3#1 = false;
          goto JOIN21B4
        ASSIGN2458:  preds = [COND21AC]
          bool _t21B6#1 = false;
          goto JOIN21B7
        ASSIGN2459:  preds = [COND2196]
          bool _t219F#1 = false;
          goto JOIN21A0
        ASSIGN245A:  preds = [COND218E]
          bool _t21A2#1 = false;
          goto JOIN21A3
        ASSIGN245C:  preds = [COND210D]
          real _t245B#2 = VIndex<3,1>(pos2104);
          bool _t245D#1 = EQ<real>(_t245B,_t245B);
          bool _t245F#1 = BNot(_t245D);
          if _t245F then goto ASSIGN2463 else goto ASSIGN2467
        ASSIGN2463:  preds = [COND2461]
          bool _t2462#1 = true;
          goto JOIN2465
        JOIN2465:  preds = [ASSIGN2463,ASSIGN246A]
          bool _t2111#1 = phi(_t2462,_t2464)
          goto JOIN2112
        ASSIGN2467:  preds = [COND2461]
          real _t2466#2 = VIndex<3,2>(pos2104);
          bool _t2468#1 = EQ<real>(_t2466,_t2466);
          bool _t2464#1 = BNot(_t2468);
          goto JOIN2465
        ASSIGN246B:  preds = [COND1FD8]
          bool _t2020#1 = false;
          goto JOIN2021
        ASSIGN246D:  preds = [COND1FD0]
          real _t246C#2 = VIndex<3,1>(pos1F7D);
          bool _t246E#1 = EQ<real>(_t246C,_t246C);
          bool _t2470#1 = BNot(_t246E);
          if _t2470 then goto ASSIGN2474 else goto ASSIGN2478
        ASSIGN2474:  preds = [COND2472]
          bool _t2473#1 = true;
          goto JOIN2476
        JOIN2476:  preds = [ASSIGN2474,ASSIGN247B]
          bool _t1FD4#1 = phi(_t2473,_t2475)
          goto JOIN1FD5
        ASSIGN2478:  preds = [COND2472]
          real _t2477#2 = VIndex<3,2>(pos1F7D);
          bool _t2479#1 = EQ<real>(_t2477,_t2477);
          bool _t2475#1 = BNot(_t2479);
          goto JOIN2476
        ASSIGN247C:  preds = [COND1FC9]
          bool _t2023#1 = false;
          goto JOIN2024
        ASSIGN247D:  preds = [COND1FC2]
          bool _t1FC4#1 = false;
          goto JOIN1FC5
        ASSIGN247E:  preds = [COND1FBD]
          bool _t1FC7#1 = false;
          goto JOIN1FC8
        ASSIGN247F:  preds = [COND1FA5]
          bool _t1FAE#1 = false;
          goto JOIN1FAF
        ASSIGN2480:  preds = [COND1F9D]
          bool _t1FB1#1 = false;
          goto JOIN1FB2
    end update
  end particle
## initial strand creation
  COLLECTION
    ENTRY2481:  preds = []
      tensor[3][] ipos2482#1 = globals.ipos1F2E;
    FOREACH2485:  preds = [ASSIGN2483,NEXT2489]
      foreach (x2484 in ipos2482) on exit goto RETURN248A
      real _t2486#1 = 0.1e1;
      new particle(x2484,_t2486);
      goto FOREACH2485
    RETURN248A:  preds = [FOREACH2485]
      return
## global update
  ENTRY248B:  preds = []
    real rad248C#1 = globals.rad1F28;
    real eps248E#1 = globals.eps1F29;
    particle[] P2490#5 = Strands<particle,all>;
    (int res2498#1) = sum<int>(MAP sum2492 (P2490));
    (int res24A0#2) = max<int>(MAP max249A (P2490));
    (int res24A8#1) = sum<int>(MAP sum24A2 (P2490));
    (bool res24B0#2) = all(MAP all24AA (P2490));
    (real res24BE#1) = max<real>(MAP max24B2 (P2490));
    string _t24C0#1 = "One run:";
    string _t24C2#3 = " and ";
    real _t24C4#2 = RDiv(res24BE,rad248C);
    bool _t24C7#2 = LT<real>(_t24C4,eps248E);
    string _t24C9#1 = " of ";
    string _t24CB#2 = "\n";
    Print<[string,bool,string,real,string,bool,string,int,string,int,string]>(_t24C0,res24B0,_t24C2,_t24C4,_t24C2,_t24C7,_t24C2,res24A8,_t24C9,res2498,_t24CB);
    if res24B0 then goto COND24CF else goto JOIN24D5
  COND24CF:  preds = [COND24CE]
    if _t24C7 then goto ASSIGN24D1 else goto JOIN24D4
  ASSIGN24D1:  preds = [COND24CF]
    string _t24D0#1 = "CONVERGED!\n";
    Print<[string]>(_t24D0);
    StabilizeAll;
    goto JOIN24D4
  JOIN24D4:  preds = [MASSIGN24D3,COND24CF]
    goto JOIN24D5
  JOIN24D5:  preds = [JOIN24D4,COND24CE]
    int _t24D6#1 = 2000;
    bool _t24D8#1 = GT<int>(res24A0,_t24D6);
    if _t24D8 then goto MASSIGN24DB else goto JOIN24DC
  MASSIGN24DB:  preds = [COND24DA]
    StabilizeAll;
    goto JOIN24DC
  JOIN24DC:  preds = [MASSIGN24DB,COND24DA]
    string _t24DD#1 = "Current steps:";
    Print<[string,int,string]>(_t24DD,res24A0,_t24CB);
    continue
#### end program ####
##### low-ir: after value numbering ####
## properties
  GlobalInit StabilizeAll GlobalReduce StrandSets GlobalUpdate NewStrands StrandCommunication StrandsMayDie HasInputs HasGlobals ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
## globals
  input meshData1F25 (meshData) = <no-default>
  input 0space04FA_intermedateGlobal1F26 (space) = <no-default>
  input 0data04FC_intermedateGlobal1F27 (data) = <no-default>
  input rad1F28 (rad) = <default>
  input eps1F29 (eps) = <default>
  input v01F2A (v0) = <default>
  input fBias1F2B (fBias) = <default>
  input fStren1F2C (fStren) = <default>
  input zfuz1F2D (zfuz) = <default>
  input ipos1F2E (ipos) = <no-default>
## functions
  function tensor[3] fStep202E (tensor[3] s202F#3) {
    ENTRY2030:  preds = []
      real x2031#2 = VIndex<3,0>(s202F);
      real y2033#4 = VIndex<3,1>(s202F);
      real z2035#4 = VIndex<3,2>(s202F);
      int _t2037#2 = 2;
      real _t2039#4 = RMul(y2033,y2033);
      real _t203C#1 = RMul(z2035,_t2039);
      real _t203F#2 = 0.2e1;
      real r2042#2 = RMul(_t203F,x2031);
      real _t2041#3 = RMul(r2042,y2033);
      real _t2046#1 = RMul(_t2041,z2035);
      real _t204D#1 = RMul(x2031,_t2039);
      tensor[3] g2050#1 = <tensor[3]>[_t203C,_t2046,_t204D];
      real _t2052#2 = 0.e0;
      real r2055#1 = RMul(_t203F,y2033);
      real _t2054#2 = RMul(r2055,z2035);
      tensor[3] _t2059#1 = <tensor[3]>[_t2052,_t2054,_t2039];
      real _t205B#1 = RMul(r2042,z2035);
      tensor[3] _t2060#1 = <tensor[3]>[_t2054,_t205B,_t2041];
      tensor[3] _t2062#1 = <tensor[3]>[_t2039,_t2041,_t2052];
      tensor[3,3] hess2064#1 = <tensor[3,3]>[_t2059,_t2060,_t2062];
      (real[3] evals2066#1,tensor[3][3] E2067#1) = EigenVecs3x3(hess2064);
      real _t2069#1 = 0.1e1;
      real _t206B#1 = Subscript<real[3]>(evals2066,_t2037);
      tensor[3] _t206D#4 = Subscript<tensor[3][3]>(E2067,_t2037);
      real op1_e3_l_5206F#1 = RDiv(_t2069,_t206B);
      real op1_e3_l_62072#3 = RNeg(op1_e3_l_5206F);
      real op1_e3_l_72075#3 = VDot<3>(_t206D,g2050);
      real r2079#1 = TensorIndex<tensor[3],[0]>(_t206D);
      real r207A#1 = RMul(op1_e3_l_62072,r2079);
      real r207B#1 = RMul(r207A,op1_e3_l_72075);
      real r207C#1 = TensorIndex<tensor[3],[1]>(_t206D);
      real r207D#1 = RMul(op1_e3_l_62072,r207C);
      real r207E#1 = RMul(r207D,op1_e3_l_72075);
      real r207F#1 = TensorIndex<tensor[3],[2]>(_t206D);
      real r2080#1 = RMul(op1_e3_l_62072,r207F);
      real r2081#1 = RMul(r2080,op1_e3_l_72075);
      tensor[3] up2078#4 = <tensor[3]>[r207B,r207E,r2081];
      real _t208D#2 = VIndex<3,0>(up2078);
      bool _t208F#1 = EQ<real>(_t208D,_t208D);
      bool _t2091#1 = BNot(_t208F);
      if _t2091 then goto ASSIGN2095 else goto ASSIGN20A2
    ASSIGN2095:  preds = [COND2093]
      bool _t2094#1 = true;
      goto JOIN2098
    JOIN2098:  preds = [ASSIGN2095,JOIN20AB]
      bool _t2096#1 = phi(_t2094,_t2097)
      if _t2096 then goto ASSIGN209B else goto JOIN209F
    ASSIGN209B:  preds = [COND2099]
      real _t209A#3 = +inf;
      tensor[3] _t209C#1 = <tensor[3]>[_t209A,_t209A,_t209A];
      return _t209C
      goto JOIN209F
    JOIN209F:  preds = [*RETURN(_t209C)209E,COND2099]
      return up2078
    ASSIGN20A2:  preds = [COND2093]
      real _t20A1#2 = VIndex<3,1>(up2078);
      bool _t20A3#1 = EQ<real>(_t20A1,_t20A1);
      bool _t20A5#1 = BNot(_t20A3);
      if _t20A5 then goto ASSIGN20A9 else goto ASSIGN20AD
    ASSIGN20A9:  preds = [COND20A7]
      bool _t20A8#1 = true;
      goto JOIN20AB
    JOIN20AB:  preds = [ASSIGN20A9,ASSIGN20B0]
      bool _t2097#1 = phi(_t20A8,_t20AA)
      goto JOIN2098
    ASSIGN20AD:  preds = [COND20A7]
      real _t20AC#2 = VIndex<3,2>(up2078);
      bool _t20AE#1 = EQ<real>(_t20AC,_t20AC);
      bool _t20AA#1 = BNot(_t20AE);
      goto JOIN20AB
}
  function tensor[3,3] fPerp221E (tensor[3] s221F#3) {
    ENTRY2220:  preds = []
      real x2221#1 = VIndex<3,0>(s221F);
      real y2223#4 = VIndex<3,1>(s221F);
      real z2225#2 = VIndex<3,2>(s221F);
      int _t2227#1 = 2;
      real _t2229#2 = RMul(y2223,y2223);
      real _t222C#2 = 0.2e1;
      real r222F#2 = RMul(_t222C,x2221);
      real _t222E#2 = RMul(r222F,y2223);
      real _t2233#11 = 0.e0;
      real r2236#1 = RMul(_t222C,y2223);
      real _t2235#2 = RMul(r2236,z2225);
      tensor[3] _t223A#1 = <tensor[3]>[_t2233,_t2235,_t2229];
      real _t223C#1 = RMul(r222F,z2225);
      tensor[3] _t2241#1 = <tensor[3]>[_t2235,_t223C,_t222E];
      tensor[3] _t2243#1 = <tensor[3]>[_t2229,_t222E,_t2233];
      tensor[3,3] hess2245#1 = <tensor[3,3]>[_t223A,_t2241,_t2243];
      (real[3] evals2247#0,tensor[3][3] _t2248#1) = EigenVecs3x3(hess2245);
      tensor[3] E2224A#6 = Subscript<tensor[3][3]>(_t2248,_t2227);
      real r224D#1 = TensorIndex<tensor[3],[0]>(E2224A);
      tensor[3] binopV224E#3 = VScale<3>(r224D,E2224A);
      real r224F#1 = TensorIndex<tensor[3],[1]>(E2224A);
      tensor[3] binopV2250#3 = VScale<3>(r224F,E2224A);
      real r2251#1 = TensorIndex<tensor[3],[2]>(E2224A);
      tensor[3] binopV2252#3 = VScale<3>(r2251,E2224A);
      real realLit225C#3 = 0.1e1;
      real r225D#1 = VIndex<3,0>(binopV224E);
      real r225E#1 = RSub(realLit225C,r225D);
      real r2260#1 = VIndex<3,1>(binopV224E);
      real r2261#1 = RSub(_t2233,r2260);
      real r2262#1 = VIndex<3,2>(binopV224E);
      real r2263#1 = RSub(_t2233,r2262);
      tensor[3] tensor2264#3 = <tensor[3]>[r225E,r2261,r2263];
      real r2265#1 = VIndex<3,0>(binopV2250);
      real r2266#1 = RSub(_t2233,r2265);
      real r2267#1 = VIndex<3,1>(binopV2250);
      real r2268#1 = RSub(realLit225C,r2267);
      real r2269#1 = VIndex<3,2>(binopV2250);
      real r226A#1 = RSub(_t2233,r2269);
      tensor[3] tensor226B#3 = <tensor[3]>[r2266,r2268,r226A];
      real r226C#1 = VIndex<3,0>(binopV2252);
      real r226D#1 = RSub(_t2233,r226C);
      real r226E#1 = VIndex<3,1>(binopV2252);
      real r226F#1 = RSub(_t2233,r226E);
      real r2270#1 = VIndex<3,2>(binopV2252);
      real r2271#1 = RSub(realLit225C,r2270);
      tensor[3] tensor2272#3 = <tensor[3]>[r226D,r226F,r2271];
      tensor[3,3] m225B#1 = <tensor[3,3]>[tensor2264,tensor226B,tensor2272];
      real vdot228E#1 = VDot<3>(tensor2264,tensor2264);
      real vdot2290#1 = VDot<3>(tensor226B,tensor226B);
      real r2291#1 = RAdd(vdot228E,vdot2290);
      real vdot2293#1 = VDot<3>(tensor2272,tensor2272);
      real t228C#2 = RAdd(r2291,vdot2293);
      bool _t229D#1 = EQ<real>(t228C,t228C);
      bool _t229F#1 = BNot(_t229D);
      if _t229F then goto ASSIGN24FF else goto JOIN22AA
    ASSIGN24FF:  preds = [COND22A1]
      tensor[3] tensor22A4#3 = <tensor[3]>[_t2233,_t2233,_t2233];
      tensor[3,3] _t22A2#1 = <tensor[3,3]>[tensor22A4,tensor22A4,tensor22A4];
      return _t22A2
      goto JOIN22AA
    JOIN22AA:  preds = [*RETURN(_t22A2)22A9,COND22A1]
      return m225B
}
  function int sum2492 (particle P2493#1) {
    ENTRY2494:  preds = []
      int _t2495#1 = P2493.test;
      return _t2495
}
  function int max249A (particle P249B#1) {
    ENTRY249C:  preds = []
      int _t249D#1 = P249B.steps;
      return _t249D
}
  function int sum24A2 (particle P24A3#1) {
    ENTRY24A4:  preds = []
      int _t24A5#1 = P24A3.testp;
      return _t24A5
}
  function bool all24AA (particle P24AB#1) {
    ENTRY24AC:  preds = []
      bool _t24AD#1 = P24AB.found;
      return _t24AD
}
  function real max24B2 (particle P24B3#1) {
    ENTRY24B4:  preds = []
      tensor[3] _t24B5#2 = P24B3.step;
      real op1_e3_l_124B7#1 = VDot<3>(_t24B5,_t24B5);
      real _t24BA#1 = Sqrt(op1_e3_l_124B7);
      return _t24BA
}
## input initialization
  ENTRY1F2F:  preds = []
    real rad1F30#5 = 0.1e-1;
    globals.rad1F28 = rad1F30;
    globals.eps1F29 = rad1F30;
    real v01F34#1 = 0.625e-1;
    globals.v01F2A = v01F34;
    globals.fBias1F2B = rad1F30;
    globals.fStren1F2C = rad1F30;
    globals.zfuz1F2D = rad1F30;
    return
## global-variable initialization
  ENTRY1F3B:  preds = []
    femData:Mesh meshData1F3C#2 = globals.meshData1F25;
    int _t1F3E#1 = 0;
    int _t1F40#1 = 1;
    int _t1F42#1 = ExtractFemItem<int,NumCell(Mesh)>(meshData1F3C);
    int _t1F44#1 = ISub(_t1F42,_t1F40);
    int[] _t1F46#1 = Range(_t1F3E,_t1F44);
    femData:MeshCell[] _t1F48#1 = <femData:MeshCell[]>{};
  FOREACH1F4B:  preds = [ASSIGN1F49,NEXT1F51]
    foreach (_t1F4A in _t1F46) on exit goto RETURN1F52
      femData:MeshCell[] _t1F4F#1 = phi(_t1F48,_t1F4E)
    femData:MeshCell _t1F4C#1 = LoadFem<femData:MeshCell>(meshData1F3C,_t1F4A);
    femData:MeshCell[] _t1F4E#1 = Append<femData:MeshCell>(_t1F4F,_t1F4C);
    goto FOREACH1F4B
  RETURN1F52:  preds = [FOREACH1F4B]
    return
## strand
  strand particle (tensor[3] pos01F53#2, real hh01F54#1) in 3D
    state:
      output tensor[3] pos;
      output tensor[3] _pos;
      real hh;
      tensor[3] step;
      bool found;
      int nfs;
      int test;
      int testp;
      int steps;
    state init
      ENTRY1F5E:  preds = []
        real realLit1F60#3 = 0.e0;
        tensor[3] step1F5F#1 = <tensor[3]>[realLit1F60,realLit1F60,realLit1F60];
        bool found1F64#1 = false;
        int nfs1F66#3 = 0;
        int test1F68#1 = 1;
        self.pos = pos01F53;
        self._pos = pos01F53;
        self.hh = hh01F54;
        self.step = step1F5F;
        self.found = found1F64;
        self.nfs = nfs1F66;
        self.test = test1F68;
        self.testp = nfs1F66;
        self.steps = nfs1F66;
        return
    end state init
    method update
        ENTRY1F74:  preds = []
          real rad1F75#10 = globals.rad1F28;
          real eps1F77#1 = globals.eps1F29;
          real fBias1F79#3 = globals.fBias1F2B;
          real fStren1F7B#3 = globals.fStren1F2C;
          tensor[3] pos1F7D#10 = self.pos;
          real hh1F7F#7 = self.hh;
          bool found1F81#3 = self.found;
          int nfs1F83#3 = self.nfs;
          int testp1F85#2 = self.testp;
          int steps1F87#1 = self.steps;
          int _t1F89#4 = 1;
          int steps1F8B#4 = IAdd(steps1F87,_t1F89);
          real _t1F8D#13 = 0.e0;
          tensor[3] _t1F8F#7 = <tensor[3]>[_t1F8D,_t1F8D,_t1F8D];
          tensor[3] mid1F91#5 = VSub<3>(pos1F7D,_t1F8F);
          real _t1F94#1 = VIndex<3,0>(mid1F91);
          real _t1F96#1 = Abs<real>(_t1F94);
          real _t1F99#9 = 0.1e0;
          bool _t1F9B#1 = GT<real>(_t1F96,_t1F99);
          if _t1F9B then goto ASSIGN1F9F else goto ASSIGN2480
        ASSIGN1F9F:  preds = [COND1F9D]
          real _t1F9E#1 = VIndex<3,1>(mid1F91);
          real _t1FA0#1 = Abs<real>(_t1F9E);
          bool _t1FA3#1 = GT<real>(_t1FA0,_t1F99);
          if _t1FA3 then goto ASSIGN1FA7 else goto ASSIGN247F
        ASSIGN1FA7:  preds = [COND1FA5]
          real _t1FA6#1 = VIndex<3,2>(mid1F91);
          real _t1FA8#1 = Abs<real>(_t1FA6);
          bool _t1FAB#1 = GT<real>(_t1FA8,_t1F99);
          goto JOIN1FAF
        JOIN1FAF:  preds = [ASSIGN1FAC,ASSIGN247F]
          bool _t1FAD#1 = phi(_t1FAB,_t1FAE)
          goto JOIN1FB2
        JOIN1FB2:  preds = [JOIN1FAF,ASSIGN2480]
          bool _t1FB0#1 = phi(_t1FAD,_t1FB1)
          real op1_e3_l_41FB3#1 = VDot<3>(mid1F91,mid1F91);
          real _t1FB6#2 = Sqrt(op1_e3_l_41FB3);
          real _t1FB9#3 = 0.5e1;
          bool _t1FBB#1 = LT<real>(_t1FB6,_t1FB9);
          if _t1FBB then goto ASSIGN1FBF else goto ASSIGN247E
        ASSIGN1FBF:  preds = [COND1FBD]
          real _t1FBE#1 = 0.2e1;
          bool _t1FC0#1 = GT<real>(_t1FB6,_t1FBE);
          if _t1FC0 then goto JOIN1FC5 else goto ASSIGN247D
        JOIN1FC5:  preds = [COND1FC2,ASSIGN247D]
          bool _t1FC3#1 = phi(_t1FB0,_t1FC4)
          goto JOIN1FC8
        JOIN1FC8:  preds = [JOIN1FC5,ASSIGN247E]
          bool _t1FC6#1 = phi(_t1FC3,_t1FC7)
          if _t1FC6 then goto ASSIGN1FCB else goto ASSIGN247C
        ASSIGN1FCB:  preds = [COND1FC9]
          real _t1FCA#4 = VIndex<3,0>(pos1F7D);
          bool _t1FCC#1 = EQ<real>(_t1FCA,_t1FCA);
          bool _t1FCE#1 = BNot(_t1FCC);
          if _t1FCE then goto ASSIGN1FD2 else goto ASSIGN246D
        ASSIGN1FD2:  preds = [COND1FD0]
          bool _t1FD1#1 = true;
          goto JOIN1FD5
        JOIN1FD5:  preds = [ASSIGN1FD2,JOIN2476]
          bool _t1FD3#1 = phi(_t1FD1,_t1FD4)
          bool _t1FD6#1 = BNot(_t1FD3);
          if _t1FD6 then goto ASSIGN1FDA else goto ASSIGN246B
        ASSIGN1FDA:  preds = [COND1FD8]
          real y1FD9#4 = VIndex<3,1>(pos1F7D);
          real z1FDB#4 = VIndex<3,2>(pos1F7D);
          int _t1FDD#1 = 2;
          real _t1FDF#4 = RMul(y1FD9,y1FD9);
          real _t1FE2#1 = RMul(z1FDB,_t1FDF);
          real _t1FE5#2 = 0.2e1;
          real r1FE8#2 = RMul(_t1FE5,_t1FCA);
          real _t1FE7#3 = RMul(r1FE8,y1FD9);
          real _t1FEC#1 = RMul(_t1FE7,z1FDB);
          real _t1FF3#1 = RMul(_t1FCA,_t1FDF);
          tensor[3] g1FF6#2 = <tensor[3]>[_t1FE2,_t1FEC,_t1FF3];
          real r1FF9#1 = RMul(_t1FE5,y1FD9);
          real _t1FF8#2 = RMul(r1FF9,z1FDB);
          tensor[3] _t1FFD#1 = <tensor[3]>[_t1F8D,_t1FF8,_t1FDF];
          real _t1FFF#1 = RMul(r1FE8,z1FDB);
          tensor[3] _t2004#1 = <tensor[3]>[_t1FF8,_t1FFF,_t1FE7];
          tensor[3] _t2006#1 = <tensor[3]>[_t1FDF,_t1FE7,_t1F8D];
          tensor[3,3] hess2008#1 = <tensor[3,3]>[_t1FFD,_t2004,_t2006];
          real[3] _t200A#1 = EigenVals3x3(hess2008);
          real _t200C#1 = Subscript<real[3]>(_t200A,_t1FDD);
          real op1_e3_l_3200E#1 = VDot<3>(g1FF6,g1FF6);
          real op1_e3_l_42011#1 = Sqrt(op1_e3_l_3200E);
          real op1_e3_l_52014#1 = RNeg(_t200C);
          real op1_e3_l_62017#1 = RAdd(fBias1F79,op1_e3_l_42011);
          real str201A#1 = RDiv(op1_e3_l_52014,op1_e3_l_62017);
          bool _t201D#1 = GTE<real>(str201A,fStren1F7B);
          goto JOIN2021
        JOIN2021:  preds = [ASSIGN201E,ASSIGN246B]
          bool _t201F#1 = phi(_t201D,_t2020)
          goto JOIN2024
        JOIN2024:  preds = [JOIN2021,ASSIGN247C]
          bool _t2022#1 = phi(_t201F,_t2023)
          bool _t2025#1 = BNot(_t2022);
          if _t2025 then goto DIE2028 else goto JOIN2029
        DIE2028:  preds = [COND2027]
          die
          goto JOIN2029
        JOIN2029:  preds = [*DIE2028,COND2027]
          bool _t202A#1 = BNot(found1F81);
          if _t202A then goto ASSIGN20B1 else goto ASSIGN2103
        ASSIGN20B1:  preds = [COND202C]
          tensor[3] step202D#4 = fStep202E (pos1F7D);
          tensor[3] pos20B2#4 = VAdd<3>(pos1F7D,step202D);
          real _t20B5#2 = VIndex<3,0>(pos20B2);
          bool _t20B7#1 = EQ<real>(_t20B5,_t20B5);
          bool _t20B9#1 = BNot(_t20B7);
          if _t20B9 then goto ASSIGN20BD else goto ASSIGN20F3
        ASSIGN20BD:  preds = [COND20BB]
          bool _t20BC#1 = true;
          goto JOIN20C0
        JOIN20C0:  preds = [ASSIGN20BD,JOIN20FC]
          bool _t20BE#1 = phi(_t20BC,_t20BF)
          if _t20BE then goto DIE20C2 else goto JOIN20C3
        DIE20C2:  preds = [COND20C1]
          die
          goto JOIN20C3
        JOIN20C3:  preds = [*DIE20C2,COND20C1]
          real op1_e3_l_220C4#1 = VDot<3>(step202D,step202D);
          real op1_e3_l_320C7#1 = Sqrt(op1_e3_l_220C4);
          real _t20CA#1 = RDiv(op1_e3_l_320C7,rad1F75);
          bool _t20CD#1 = GT<real>(_t20CA,eps1F77);
          if _t20CD then goto ASSIGN20D1 else goto ASSIGN20F1
        ASSIGN20D1:  preds = [COND20CF]
          int nfs20D0#2 = IAdd(nfs1F83,_t1F89);
          int _t20D2#1 = 10;
          bool _t20D4#1 = GT<int>(nfs20D0,_t20D2);
          if _t20D4 then goto DIE20D7 else goto JOIN20D8
        DIE20D7:  preds = [COND20D6]
          die
          goto JOIN20D8
        JOIN20D8:  preds = [*DIE20D7,COND20D6]
          goto JOIN20DD
        JOIN20DD:  preds = [JOIN20D8,ASSIGN20F1]
          int testp20D9#1 = phi(testp1F85,_t1F89)
          int nfs20DA#1 = phi(nfs20D0,nfs1F83)
          bool found20DB#1 = phi(found1F81,found20DC)
          goto JOIN20E7
        JOIN20E7:  preds = [JOIN20DD,JOIN241E]
          int testp20DE#1 = phi(testp20D9,testp1F85)
          int nfs20DF#1 = phi(nfs20DA,nfs1F83)
          bool found20E0#1 = phi(found20DB,found1F81)
          tensor[3] step20E1#1 = phi(step202D,up20E2)
          real hh20E3#1 = phi(hh1F7F,hh20E4)
          tensor[3] pos20E5#2 = phi(pos20B2,pos20E6)
          self.pos = pos20E5;
          self._pos = pos20E5;
          self.hh = hh20E3;
          self.step = step20E1;
          self.found = found20E0;
          self.nfs = nfs20DF;
          self.testp = testp20DE;
          self.steps = steps1F8B;
          active
        ASSIGN20F1:  preds = [COND20CF]
          bool found20DC#1 = true;
          goto JOIN20DD
        ASSIGN20F3:  preds = [COND20BB]
          real _t20F2#2 = VIndex<3,1>(pos20B2);
          bool _t20F4#1 = EQ<real>(_t20F2,_t20F2);
          bool _t20F6#1 = BNot(_t20F4);
          if _t20F6 then goto ASSIGN20FA else goto ASSIGN20FE
        ASSIGN20FA:  preds = [COND20F8]
          bool _t20F9#1 = true;
          goto JOIN20FC
        JOIN20FC:  preds = [ASSIGN20FA,ASSIGN2101]
          bool _t20BF#1 = phi(_t20F9,_t20FB)
          goto JOIN20C0
        ASSIGN20FE:  preds = [COND20F8]
          real _t20FD#2 = VIndex<3,2>(pos20B2);
          bool _t20FF#1 = EQ<real>(_t20FD,_t20FD);
          bool _t20FB#1 = BNot(_t20FF);
          goto JOIN20FC
        ASSIGN2103:  preds = [COND202C]
          tensor[3] _t2102#1 = fStep202E (pos1F7D);
          tensor[3] pos2104#16 = VAdd<3>(pos1F7D,_t2102);
          real _t2107#2 = VIndex<3,0>(pos2104);
          bool _t2109#1 = EQ<real>(_t2107,_t2107);
          bool _t210B#1 = BNot(_t2109);
          if _t210B then goto ASSIGN210F else goto ASSIGN245C
        ASSIGN210F:  preds = [COND210D]
          bool _t210E#1 = true;
          goto JOIN2112
        JOIN2112:  preds = [ASSIGN210F,JOIN2465]
          bool _t2110#1 = phi(_t210E,_t2111)
          if _t2110 then goto DIE2114 else goto JOIN2115
        DIE2114:  preds = [COND2113]
          die
          goto JOIN2115
        JOIN2115:  preds = [*DIE2114,COND2113]
          int nn211B#2 = 0;
          particle[] _t211D#1 = SphereQuery<3,particle>(pos2104,rad1F75);
        FOREACH2120:  preds = [ASSIGN211E,NEXT2174]
          foreach (P211F in _t211D) on exit goto ASSIGN2176
            int nn2172#3 = phi(nn211B,nn2171)
            tensor[3] force216E#4 = phi(_t1F8F,force216D)
            real oldE213A#2 = phi(_t1F8D,oldE2139)
          tensor[3] _t2121#1 = P211F.pos;
          real _t2123#3 = 0.1e1;
          tensor[3] op1_e3_l_82125#5 = VSub<3>(_t2121,pos2104);
          real op1_e3_l_102128#1 = VDot<3>(op1_e3_l_82125,op1_e3_l_82125);
          real op1_e3_l_11212B#2 = Sqrt(op1_e3_l_102128);
          real op1_e3_l_12212E#1 = RDiv(op1_e3_l_11212B,rad1F75);
          real op1_e3_l_132131#3 = RSub(_t2123,op1_e3_l_12212E);
          real _Pow_22135#3 = RMul(op1_e3_l_132131,op1_e3_l_132131);
          real op1_e3_l_142134#1 = RMul(_Pow_22135,_Pow_22135);
          real oldE2139#1 = RAdd(oldE213A,op1_e3_l_142134);
          real _t213D#1 = -0.4e1;
          real op1_e3_l_24213F#1 = RMul(op1_e3_l_132131,_Pow_22135);
          real op1_e3_l_252144#1 = RDiv(_t2123,rad1F75);
          real r2148#1 = TensorIndex<tensor[3],[0]>(op1_e3_l_82125);
          real r2149#1 = RMul(_t213D,op1_e3_l_24213F);
          real r214A#3 = RMul(r2149,op1_e3_l_252144);
          real r214B#1 = RMul(r214A,r2148);
          real r214C#1 = TensorIndex<tensor[3],[1]>(op1_e3_l_82125);
          real r214D#1 = RMul(r214A,r214C);
          real r214E#1 = TensorIndex<tensor[3],[2]>(op1_e3_l_82125);
          real r214F#1 = RMul(r214A,r214E);
          real r215C#3 = RDiv(_t2123,op1_e3_l_11212B);
          real r215E#1 = RMul(r215C,r214B);
          real r2160#1 = RMul(r215C,r214D);
          real r2162#1 = RMul(r215C,r214F);
          tensor[3] op1_e3_l_34215A#1 = <tensor[3]>[r215E,r2160,r2162];
          tensor[3] force216D#1 = VAdd<3>(force216E,op1_e3_l_34215A);
          int nn2171#1 = IAdd(nn2172,_t1F89);
          goto FOREACH2120
        ASSIGN2176:  preds = [FOREACH2120]
          bool _t2175#1 = EQ<int>(nn211B,nn2172);
          if _t2175 then goto ASSIGN2179 else goto JOIN221C
        ASSIGN2179:  preds = [COND2177]
          real _t2178#1 = 0.5e0;
          real _t217A#1 = RMul(_t2178,rad1F75);
          tensor[3] _t217D#1 = <tensor[3]>[_t217A,_t1F8D,_t1F8D];
          tensor[3] npos217F#7 = VAdd<3>(pos2104,_t217D);
          tensor[3] mid2184#5 = VSub<3>(npos217F,_t1F8F);
          real _t2187#1 = VIndex<3,0>(mid2184);
          real _t2189#1 = Abs<real>(_t2187);
          bool _t218C#1 = GT<real>(_t2189,_t1F99);
          if _t218C then goto ASSIGN2190 else goto ASSIGN245A
        ASSIGN2190:  preds = [COND218E]
          real _t218F#1 = VIndex<3,1>(mid2184);
          real _t2191#1 = Abs<real>(_t218F);
          bool _t2194#1 = GT<real>(_t2191,_t1F99);
          if _t2194 then goto ASSIGN2198 else goto ASSIGN2459
        ASSIGN2198:  preds = [COND2196]
          real _t2197#1 = VIndex<3,2>(mid2184);
          real _t2199#1 = Abs<real>(_t2197);
          bool _t219C#1 = GT<real>(_t2199,_t1F99);
          goto JOIN21A0
        JOIN21A0:  preds = [ASSIGN219D,ASSIGN2459]
          bool _t219E#1 = phi(_t219C,_t219F)
          goto JOIN21A3
        JOIN21A3:  preds = [JOIN21A0,ASSIGN245A]
          bool _t21A1#1 = phi(_t219E,_t21A2)
          real op1_e3_l_821A4#1 = VDot<3>(mid2184,mid2184);
          real _t21A7#2 = Sqrt(op1_e3_l_821A4);
          bool _t21AA#1 = LT<real>(_t21A7,_t1FB9);
          if _t21AA then goto ASSIGN21AE else goto ASSIGN2458
        ASSIGN21AE:  preds = [COND21AC]
          real _t21AD#1 = 0.2e1;
          bool _t21AF#1 = GT<real>(_t21A7,_t21AD);
          if _t21AF then goto JOIN21B4 else goto ASSIGN2457
        JOIN21B4:  preds = [COND21B1,ASSIGN2457]
          bool _t21B2#1 = phi(_t21A1,_t21B3)
          goto JOIN21B7
        JOIN21B7:  preds = [JOIN21B4,ASSIGN2458]
          bool _t21B5#1 = phi(_t21B2,_t21B6)
          if _t21B5 then goto ASSIGN21BA else goto ASSIGN2456
        ASSIGN21BA:  preds = [COND21B8]
          real _t21B9#4 = VIndex<3,0>(npos217F);
          bool _t21BB#1 = EQ<real>(_t21B9,_t21B9);
          bool _t21BD#1 = BNot(_t21BB);
          if _t21BD then goto ASSIGN21C1 else goto ASSIGN2447
        ASSIGN21C1:  preds = [COND21BF]
          bool _t21C0#1 = true;
          goto JOIN21C4
        JOIN21C4:  preds = [ASSIGN21C1,JOIN2450]
          bool _t21C2#1 = phi(_t21C0,_t21C3)
          bool _t21C5#1 = BNot(_t21C2);
          if _t21C5 then goto ASSIGN21C9 else goto ASSIGN2445
        ASSIGN21C9:  preds = [COND21C7]
          real y21C8#4 = VIndex<3,1>(npos217F);
          real z21CA#4 = VIndex<3,2>(npos217F);
          int _t21CC#1 = 2;
          real _t21CE#4 = RMul(y21C8,y21C8);
          real _t21D1#1 = RMul(z21CA,_t21CE);
          real _t21D4#2 = 0.2e1;
          real r21D7#2 = RMul(_t21D4,_t21B9);
          real _t21D6#3 = RMul(r21D7,y21C8);
          real _t21DB#1 = RMul(_t21D6,z21CA);
          real _t21E2#1 = RMul(_t21B9,_t21CE);
          tensor[3] g21E5#2 = <tensor[3]>[_t21D1,_t21DB,_t21E2];
          real r21E8#1 = RMul(_t21D4,y21C8);
          real _t21E7#2 = RMul(r21E8,z21CA);
          tensor[3] _t21EC#1 = <tensor[3]>[_t1F8D,_t21E7,_t21CE];
          real _t21EE#1 = RMul(r21D7,z21CA);
          tensor[3] _t21F3#1 = <tensor[3]>[_t21E7,_t21EE,_t21D6];
          tensor[3] _t21F5#1 = <tensor[3]>[_t21CE,_t21D6,_t1F8D];
          tensor[3,3] hess21F7#1 = <tensor[3,3]>[_t21EC,_t21F3,_t21F5];
          real[3] _t21F9#1 = EigenVals3x3(hess21F7);
          real _t21FB#1 = Subscript<real[3]>(_t21F9,_t21CC);
          real op1_e3_l_321FD#1 = VDot<3>(g21E5,g21E5);
          real op1_e3_l_42200#1 = Sqrt(op1_e3_l_321FD);
          real op1_e3_l_52203#1 = RNeg(_t21FB);
          real op1_e3_l_62206#1 = RAdd(fBias1F79,op1_e3_l_42200);
          real str2209#1 = RDiv(op1_e3_l_52203,op1_e3_l_62206);
          bool _t220C#1 = GTE<real>(str2209,fStren1F7B);
          goto JOIN2210
        JOIN2210:  preds = [ASSIGN220D,ASSIGN2445]
          bool _t220E#1 = phi(_t220C,_t220F)
          goto JOIN2213
        JOIN2213:  preds = [JOIN2210,ASSIGN2456]
          bool _t2211#1 = phi(_t220E,_t2212)
          if _t2211 then goto NEW2215 else goto JOIN2216
        NEW2215:  preds = [COND2214]
          new particle(npos217F,hh1F7F);
          goto JOIN2216
        JOIN2216:  preds = [NEW2215,COND2214]
          self.pos = pos2104;
          self._pos = pos2104;
          self.step = _t1F8F;
          self.steps = steps1F8B;
          active
          goto JOIN221C
        JOIN221C:  preds = [*ACTIVE221B,COND2177]
          tensor[3,3] _t221D#3 = fPerp221E (pos2104);
          tensor[3] projParam22AE#1 = ProjectLast<tensor[3,3],[0]>(_t221D);
          real vdot22AF#2 = VDot<3>(projParam22AE,force216E);
          tensor[3] projParam22B0#1 = ProjectLast<tensor[3,3],[1]>(_t221D);
          real vdot22B1#2 = VDot<3>(projParam22B0,force216E);
          tensor[3] projParam22B2#1 = ProjectLast<tensor[3,3],[2]>(_t221D);
          real vdot22B3#2 = VDot<3>(projParam22B2,force216E);
          tensor[3] op1_e3_l_322AD#4 = <tensor[3]>[vdot22AF,vdot22B1,vdot22B3];
          tensor[3] es22BC#1 = VScale<3>(hh1F7F,op1_e3_l_322AD);
          real op1_e3_l_522BF#1 = VDot<3>(op1_e3_l_322AD,op1_e3_l_322AD);
          real r22C3#1 = RMul(hh1F7F,hh1F7F);
          real op1_e3_l_622C2#1 = RMul(r22C3,op1_e3_l_522BF);
          real _t22C7#2 = Sqrt(op1_e3_l_622C2);
          bool _t22CA#1 = GT<real>(_t22C7,rad1F75);
          if _t22CA then goto ASSIGN22CF else goto JOIN22E6
        ASSIGN22CF:  preds = [COND22CC]
          real op1_e3_l_1022CD#1 = RDiv(rad1F75,_t22C7);
          real hh22D0#4 = RMul(hh1F7F,op1_e3_l_1022CD);
          real r22D6#1 = RMul(hh22D0,vdot22AF);
          real r22D8#1 = RMul(hh22D0,vdot22B1);
          real r22DA#1 = RMul(hh22D0,vdot22B3);
          tensor[3] es22D3#1 = <tensor[3]>[r22D6,r22D8,r22DA];
          goto JOIN22E6
        JOIN22E6:  preds = [ASSIGN22E3,COND22CC]
          tensor[3] es22E4#8 = phi(es22D3,es22BC)
          real hh22E5#2 = phi(hh22D0,hh1F7F)
          tensor[3] samplePos22E7#1 = VAdd<3>(pos2104,es22E4);
          tensor[3] fs22EC#4 = fStep202E (samplePos22E7);
          real op1_e3_l_222EE#1 = VDot<3>(fs22EC,fs22EC);
          real op1_e3_l_322F1#1 = VDot<3>(es22E4,es22E4);
          real op1_e3_l_422F4#1 = Sqrt(op1_e3_l_222EE);
          real op1_e3_l_522F7#2 = Sqrt(op1_e3_l_322F1);
          real _t22FA#1 = RDiv(op1_e3_l_422F4,op1_e3_l_522F7);
          real _t22FD#5 = 0.5e0;
          bool _t22FF#1 = GT<real>(_t22FA,_t22FD);
          if _t22FF then goto ASSIGN2304 else goto JOIN230C
        ASSIGN2304:  preds = [COND2301]
          real hh2302#1 = RMul(hh22E5,_t22FD);
          self.pos = pos2104;
          self._pos = pos2104;
          self.hh = hh2302;
          self.step = _t1F8F;
          self.steps = steps1F8B;
          active
          goto JOIN230C
        JOIN230C:  preds = [*ACTIVE230A,COND2301]
          real hh230B#2 = phi(hh22E5)
          tensor[3] up20E2#1 = VAdd<3>(fs22EC,es22E4);
          tensor[3] v2311#1 = VAdd<3>(pos2104,fs22EC);
          tensor[3] pos230F#4 = VAdd<3>(v2311,es22E4);
          particle[] _t2316#1 = SphereQuery<3,particle>(pos230F,rad1F75);
        FOREACH2319:  preds = [ASSIGN2317,NEXT2336]
          foreach (P2318 in _t2316) on exit goto ASSIGN2339
            real accum2333#2 = phi(_t1F8D,accum2332)
          tensor[3] _t231A#1 = P2318.pos;
          real _t231C#1 = 0.1e1;
          tensor[3] op1_e3_l_10231E#2 = VSub<3>(pos230F,_t231A);
          real op1_e3_l_122321#1 = VDot<3>(op1_e3_l_10231E,op1_e3_l_10231E);
          real op1_e3_l_132324#1 = Sqrt(op1_e3_l_122321);
          real op1_e3_l_142327#1 = RDiv(op1_e3_l_132324,rad1F75);
          real op1_e3_l_15232A#2 = RSub(_t231C,op1_e3_l_142327);
          real _Pow_2232E#2 = RMul(op1_e3_l_15232A,op1_e3_l_15232A);
          real op1_e3_l_16232D#1 = RMul(_Pow_2232E,_Pow_2232E);
          real accum2332#1 = RAdd(accum2333,op1_e3_l_16232D);
          goto FOREACH2319
        ASSIGN2339:  preds = [FOREACH2319]
          real _t2337#1 = RSub(accum2333,oldE213A);
          tensor[3] op1_e3_l_12233A#1 = VSub<3>(pos230F,pos2104);
          tensor[3] op1_e3_l_13233D#1 = VNeg<3>(op1_e3_l_322AD);
          real op1_e3_l_142340#1 = VDot<3>(op1_e3_l_12233A,op1_e3_l_13233D);
          real _t2343#1 = RMul(_t22FD,op1_e3_l_142340);
          bool _t2346#1 = GT<real>(_t2337,_t2343);
          if _t2346 then goto ASSIGN234B else goto JOIN2353
        ASSIGN234B:  preds = [COND2348]
          real hh2349#1 = RMul(hh230B,_t22FD);
          self.pos = pos2104;
          self._pos = pos2104;
          self.hh = hh2349;
          self.step = _t1F8F;
          self.steps = steps1F8B;
          active
          goto JOIN2353
        JOIN2353:  preds = [*ACTIVE2351,COND2348]
          real hh2352#1 = phi(hh230B)
          tensor[3] pos20E6#5 = phi(pos230F)
          real _t2354#1 = 0.11e1;
          real hh20E4#2 = RMul(hh2352,_t2354);
          real _t2358#2 = VIndex<3,0>(pos20E6);
          bool _t235A#1 = EQ<real>(_t2358,_t2358);
          bool _t235C#1 = BNot(_t235A);
          if _t235C then goto ASSIGN2360 else goto ASSIGN2436
        ASSIGN2360:  preds = [COND235E]
          bool _t235F#1 = true;
          goto JOIN2363
        JOIN2363:  preds = [ASSIGN2360,JOIN243F]
          bool _t2361#1 = phi(_t235F,_t2362)
          if _t2361 then goto DIE2365 else goto JOIN2366
        DIE2365:  preds = [COND2364]
          die
          goto JOIN2366
        JOIN2366:  preds = [*DIE2365,COND2364]
          int _t2367#1 = 5;
          bool _t2369#1 = LT<int>(nn2172,_t2367);
          if _t2369 then goto ASSIGN236F else goto JOIN241E
        ASSIGN236F:  preds = [COND236B]
          real realLit236D#1 = 0.1e1;
          real op1_e3_l_7236C#3 = RDiv(realLit236D,op1_e3_l_522F7);
          real r2372#1 = TensorIndex<tensor[3],[0]>(es22E4);
          real r2373#3 = RMul(_t22FD,rad1F75);
          real r2374#1 = RMul(r2373,r2372);
          real r2375#1 = RMul(r2374,op1_e3_l_7236C);
          real r2376#1 = TensorIndex<tensor[3],[1]>(es22E4);
          real r2377#1 = RMul(r2373,r2376);
          real r2378#1 = RMul(r2377,op1_e3_l_7236C);
          real r2379#1 = TensorIndex<tensor[3],[2]>(es22E4);
          real r237A#1 = RMul(r2373,r2379);
          real r237B#1 = RMul(r237A,op1_e3_l_7236C);
          tensor[3] op1_e3_l_82371#1 = <tensor[3]>[r2375,r2378,r237B];
          tensor[3] npos2388#7 = VAdd<3>(pos20E6,op1_e3_l_82371);
          tensor[3] mid238B#5 = VSub<3>(npos2388,_t1F8F);
          real _t238E#1 = VIndex<3,0>(mid238B);
          real _t2390#1 = Abs<real>(_t238E);
          bool _t2393#1 = GT<real>(_t2390,_t1F99);
          if _t2393 then goto ASSIGN2397 else goto ASSIGN2434
        ASSIGN2397:  preds = [COND2395]
          real _t2396#1 = VIndex<3,1>(mid238B);
          real _t2398#1 = Abs<real>(_t2396);
          bool _t239B#1 = GT<real>(_t2398,_t1F99);
          if _t239B then goto ASSIGN239F else goto ASSIGN2433
        ASSIGN239F:  preds = [COND239D]
          real _t239E#1 = VIndex<3,2>(mid238B);
          real _t23A0#1 = Abs<real>(_t239E);
          bool _t23A3#1 = GT<real>(_t23A0,_t1F99);
          goto JOIN23A7
        JOIN23A7:  preds = [ASSIGN23A4,ASSIGN2433]
          bool _t23A5#1 = phi(_t23A3,_t23A6)
          goto JOIN23AA
        JOIN23AA:  preds = [JOIN23A7,ASSIGN2434]
          bool _t23A8#1 = phi(_t23A5,_t23A9)
          real op1_e3_l_1823AB#1 = VDot<3>(mid238B,mid238B);
          real _t23AE#2 = Sqrt(op1_e3_l_1823AB);
          bool _t23B1#1 = LT<real>(_t23AE,_t1FB9);
          if _t23B1 then goto ASSIGN23B5 else goto ASSIGN2432
        ASSIGN23B5:  preds = [COND23B3]
          real _t23B4#1 = 0.2e1;
          bool _t23B6#1 = GT<real>(_t23AE,_t23B4);
          if _t23B6 then goto JOIN23BB else goto ASSIGN2431
        JOIN23BB:  preds = [COND23B8,ASSIGN2431]
          bool _t23B9#1 = phi(_t23A8,_t23BA)
          goto JOIN23BE
        JOIN23BE:  preds = [JOIN23BB,ASSIGN2432]
          bool _t23BC#1 = phi(_t23B9,_t23BD)
          if _t23BC then goto ASSIGN23C1 else goto ASSIGN2430
        ASSIGN23C1:  preds = [COND23BF]
          real _t23C0#4 = VIndex<3,0>(npos2388);
          bool _t23C2#1 = EQ<real>(_t23C0,_t23C0);
          bool _t23C4#1 = BNot(_t23C2);
          if _t23C4 then goto ASSIGN23C8 else goto ASSIGN2421
        ASSIGN23C8:  preds = [COND23C6]
          bool _t23C7#1 = true;
          goto JOIN23CB
        JOIN23CB:  preds = [ASSIGN23C8,JOIN242A]
          bool _t23C9#1 = phi(_t23C7,_t23CA)
          bool _t23CC#1 = BNot(_t23C9);
          if _t23CC then goto ASSIGN23D0 else goto ASSIGN241F
        ASSIGN23D0:  preds = [COND23CE]
          real y23CF#4 = VIndex<3,1>(npos2388);
          real z23D1#4 = VIndex<3,2>(npos2388);
          int _t23D3#1 = 2;
          real _t23D5#4 = RMul(y23CF,y23CF);
          real _t23D8#1 = RMul(z23D1,_t23D5);
          real _t23DB#2 = 0.2e1;
          real r23DE#2 = RMul(_t23DB,_t23C0);
          real _t23DD#3 = RMul(r23DE,y23CF);
          real _t23E2#1 = RMul(_t23DD,z23D1);
          real _t23E9#1 = RMul(_t23C0,_t23D5);
          tensor[3] g23EC#2 = <tensor[3]>[_t23D8,_t23E2,_t23E9];
          real r23EF#1 = RMul(_t23DB,y23CF);
          real _t23EE#2 = RMul(r23EF,z23D1);
          tensor[3] _t23F3#1 = <tensor[3]>[_t1F8D,_t23EE,_t23D5];
          real _t23F5#1 = RMul(r23DE,z23D1);
          tensor[3] _t23FA#1 = <tensor[3]>[_t23EE,_t23F5,_t23DD];
          tensor[3] _t23FC#1 = <tensor[3]>[_t23D5,_t23DD,_t1F8D];
          tensor[3,3] hess23FE#1 = <tensor[3,3]>[_t23F3,_t23FA,_t23FC];
          real[3] _t2400#1 = EigenVals3x3(hess23FE);
          real _t2402#1 = Subscript<real[3]>(_t2400,_t23D3);
          real op1_e3_l_32404#1 = VDot<3>(g23EC,g23EC);
          real op1_e3_l_42407#1 = Sqrt(op1_e3_l_32404);
          real op1_e3_l_5240A#1 = RNeg(_t2402);
          real op1_e3_l_6240D#1 = RAdd(fBias1F79,op1_e3_l_42407);
          real str2410#1 = RDiv(op1_e3_l_5240A,op1_e3_l_6240D);
          bool _t2413#1 = GTE<real>(str2410,fStren1F7B);
          goto JOIN2417
        JOIN2417:  preds = [ASSIGN2414,ASSIGN241F]
          bool _t2415#1 = phi(_t2413,_t2416)
          goto JOIN241A
        JOIN241A:  preds = [JOIN2417,ASSIGN2430]
          bool _t2418#1 = phi(_t2415,_t2419)
          if _t2418 then goto NEW241C else goto JOIN241D
        NEW241C:  preds = [COND241B]
          new particle(npos2388,hh20E4);
          goto JOIN241D
        JOIN241D:  preds = [NEW241C,COND241B]
          goto JOIN241E
        JOIN241E:  preds = [JOIN241D,COND236B]
          goto JOIN20E7
        ASSIGN241F:  preds = [COND23CE]
          bool _t2416#1 = false;
          goto JOIN2417
        ASSIGN2421:  preds = [COND23C6]
          real _t2420#2 = VIndex<3,1>(npos2388);
          bool _t2422#1 = EQ<real>(_t2420,_t2420);
          bool _t2424#1 = BNot(_t2422);
          if _t2424 then goto ASSIGN2428 else goto ASSIGN242C
        ASSIGN2428:  preds = [COND2426]
          bool _t2427#1 = true;
          goto JOIN242A
        JOIN242A:  preds = [ASSIGN2428,ASSIGN242F]
          bool _t23CA#1 = phi(_t2427,_t2429)
          goto JOIN23CB
        ASSIGN242C:  preds = [COND2426]
          real _t242B#2 = VIndex<3,2>(npos2388);
          bool _t242D#1 = EQ<real>(_t242B,_t242B);
          bool _t2429#1 = BNot(_t242D);
          goto JOIN242A
        ASSIGN2430:  preds = [COND23BF]
          bool _t2419#1 = false;
          goto JOIN241A
        ASSIGN2431:  preds = [COND23B8]
          bool _t23BA#1 = false;
          goto JOIN23BB
        ASSIGN2432:  preds = [COND23B3]
          bool _t23BD#1 = false;
          goto JOIN23BE
        ASSIGN2433:  preds = [COND239D]
          bool _t23A6#1 = false;
          goto JOIN23A7
        ASSIGN2434:  preds = [COND2395]
          bool _t23A9#1 = false;
          goto JOIN23AA
        ASSIGN2436:  preds = [COND235E]
          real _t2435#2 = VIndex<3,1>(pos20E6);
          bool _t2437#1 = EQ<real>(_t2435,_t2435);
          bool _t2439#1 = BNot(_t2437);
          if _t2439 then goto ASSIGN243D else goto ASSIGN2441
        ASSIGN243D:  preds = [COND243B]
          bool _t243C#1 = true;
          goto JOIN243F
        JOIN243F:  preds = [ASSIGN243D,ASSIGN2444]
          bool _t2362#1 = phi(_t243C,_t243E)
          goto JOIN2363
        ASSIGN2441:  preds = [COND243B]
          real _t2440#2 = VIndex<3,2>(pos20E6);
          bool _t2442#1 = EQ<real>(_t2440,_t2440);
          bool _t243E#1 = BNot(_t2442);
          goto JOIN243F
        ASSIGN2445:  preds = [COND21C7]
          bool _t220F#1 = false;
          goto JOIN2210
        ASSIGN2447:  preds = [COND21BF]
          real _t2446#2 = VIndex<3,1>(npos217F);
          bool _t2448#1 = EQ<real>(_t2446,_t2446);
          bool _t244A#1 = BNot(_t2448);
          if _t244A then goto ASSIGN244E else goto ASSIGN2452
        ASSIGN244E:  preds = [COND244C]
          bool _t244D#1 = true;
          goto JOIN2450
        JOIN2450:  preds = [ASSIGN244E,ASSIGN2455]
          bool _t21C3#1 = phi(_t244D,_t244F)
          goto JOIN21C4
        ASSIGN2452:  preds = [COND244C]
          real _t2451#2 = VIndex<3,2>(npos217F);
          bool _t2453#1 = EQ<real>(_t2451,_t2451);
          bool _t244F#1 = BNot(_t2453);
          goto JOIN2450
        ASSIGN2456:  preds = [COND21B8]
          bool _t2212#1 = false;
          goto JOIN2213
        ASSIGN2457:  preds = [COND21B1]
          bool _t21B3#1 = false;
          goto JOIN21B4
        ASSIGN2458:  preds = [COND21AC]
          bool _t21B6#1 = false;
          goto JOIN21B7
        ASSIGN2459:  preds = [COND2196]
          bool _t219F#1 = false;
          goto JOIN21A0
        ASSIGN245A:  preds = [COND218E]
          bool _t21A2#1 = false;
          goto JOIN21A3
        ASSIGN245C:  preds = [COND210D]
          real _t245B#2 = VIndex<3,1>(pos2104);
          bool _t245D#1 = EQ<real>(_t245B,_t245B);
          bool _t245F#1 = BNot(_t245D);
          if _t245F then goto ASSIGN2463 else goto ASSIGN2467
        ASSIGN2463:  preds = [COND2461]
          bool _t2462#1 = true;
          goto JOIN2465
        JOIN2465:  preds = [ASSIGN2463,ASSIGN246A]
          bool _t2111#1 = phi(_t2462,_t2464)
          goto JOIN2112
        ASSIGN2467:  preds = [COND2461]
          real _t2466#2 = VIndex<3,2>(pos2104);
          bool _t2468#1 = EQ<real>(_t2466,_t2466);
          bool _t2464#1 = BNot(_t2468);
          goto JOIN2465
        ASSIGN246B:  preds = [COND1FD8]
          bool _t2020#1 = false;
          goto JOIN2021
        ASSIGN246D:  preds = [COND1FD0]
          real _t246C#2 = VIndex<3,1>(pos1F7D);
          bool _t246E#1 = EQ<real>(_t246C,_t246C);
          bool _t2470#1 = BNot(_t246E);
          if _t2470 then goto ASSIGN2474 else goto ASSIGN2478
        ASSIGN2474:  preds = [COND2472]
          bool _t2473#1 = true;
          goto JOIN2476
        JOIN2476:  preds = [ASSIGN2474,ASSIGN247B]
          bool _t1FD4#1 = phi(_t2473,_t2475)
          goto JOIN1FD5
        ASSIGN2478:  preds = [COND2472]
          real _t2477#2 = VIndex<3,2>(pos1F7D);
          bool _t2479#1 = EQ<real>(_t2477,_t2477);
          bool _t2475#1 = BNot(_t2479);
          goto JOIN2476
        ASSIGN247C:  preds = [COND1FC9]
          bool _t2023#1 = false;
          goto JOIN2024
        ASSIGN247D:  preds = [COND1FC2]
          bool _t1FC4#1 = false;
          goto JOIN1FC5
        ASSIGN247E:  preds = [COND1FBD]
          bool _t1FC7#1 = false;
          goto JOIN1FC8
        ASSIGN247F:  preds = [COND1FA5]
          bool _t1FAE#1 = false;
          goto JOIN1FAF
        ASSIGN2480:  preds = [COND1F9D]
          bool _t1FB1#1 = false;
          goto JOIN1FB2
    end update
  end particle
## initial strand creation
  COLLECTION
    ENTRY2481:  preds = []
      tensor[3][] ipos2482#1 = globals.ipos1F2E;
    FOREACH2485:  preds = [ASSIGN2483,NEXT2489]
      foreach (x2484 in ipos2482) on exit goto RETURN248A
      real _t2486#1 = 0.1e1;
      new particle(x2484,_t2486);
      goto FOREACH2485
    RETURN248A:  preds = [FOREACH2485]
      return
## global update
  ENTRY248B:  preds = []
    real rad248C#1 = globals.rad1F28;
    real eps248E#1 = globals.eps1F29;
    particle[] P2490#5 = Strands<particle,all>;
    (int res2498#1) = sum<int>(MAP sum2492 (P2490));
    (int res24A0#2) = max<int>(MAP max249A (P2490));
    (int res24A8#1) = sum<int>(MAP sum24A2 (P2490));
    (bool res24B0#2) = all(MAP all24AA (P2490));
    (real res24BE#1) = max<real>(MAP max24B2 (P2490));
    string _t24C0#1 = "One run:";
    string _t24C2#3 = " and ";
    real _t24C4#2 = RDiv(res24BE,rad248C);
    bool _t24C7#2 = LT<real>(_t24C4,eps248E);
    string _t24C9#1 = " of ";
    string _t24CB#2 = "\n";
    Print<[string,bool,string,real,string,bool,string,int,string,int,string]>(_t24C0,res24B0,_t24C2,_t24C4,_t24C2,_t24C7,_t24C2,res24A8,_t24C9,res2498,_t24CB);
    if res24B0 then goto COND24CF else goto JOIN24D5
  COND24CF:  preds = [COND24CE]
    if _t24C7 then goto ASSIGN24D1 else goto JOIN24D4
  ASSIGN24D1:  preds = [COND24CF]
    string _t24D0#1 = "CONVERGED!\n";
    Print<[string]>(_t24D0);
    StabilizeAll;
    goto JOIN24D4
  JOIN24D4:  preds = [MASSIGN24D3,COND24CF]
    goto JOIN24D5
  JOIN24D5:  preds = [JOIN24D4,COND24CE]
    int _t24D6#1 = 2000;
    bool _t24D8#1 = GT<int>(res24A0,_t24D6);
    if _t24D8 then goto MASSIGN24DB else goto JOIN24DC
  MASSIGN24DB:  preds = [COND24DA]
    StabilizeAll;
    goto JOIN24DC
  JOIN24DC:  preds = [MASSIGN24DB,COND24DA]
    string _t24DD#1 = "Current steps:";
    Print<[string,int,string]>(_t24DD,res24A0,_t24CB);
    continue
#### end program ####
##### low-ir: after contraction(2) ####
## properties
  GlobalInit StabilizeAll GlobalReduce StrandSets GlobalUpdate NewStrands StrandCommunication StrandsMayDie HasInputs HasGlobals ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
## globals
  input meshData1F25 (meshData) = <no-default>
  input 0space04FA_intermedateGlobal1F26 (space) = <no-default>
  input 0data04FC_intermedateGlobal1F27 (data) = <no-default>
  input rad1F28 (rad) = <default>
  input eps1F29 (eps) = <default>
  input v01F2A (v0) = <default>
  input fBias1F2B (fBias) = <default>
  input fStren1F2C (fStren) = <default>
  input zfuz1F2D (zfuz) = <default>
  input ipos1F2E (ipos) = <no-default>
## functions
  function tensor[3] fStep202E (tensor[3] s202F#3) {
    ENTRY2030:  preds = []
      real x2031#2 = VIndex<3,0>(s202F);
      real y2033#4 = VIndex<3,1>(s202F);
      real z2035#4 = VIndex<3,2>(s202F);
      int _t2037#2 = 2;
      real _t2039#4 = RMul(y2033,y2033);
      real _t203C#1 = RMul(z2035,_t2039);
      real _t203F#2 = 0.2e1;
      real r2042#2 = RMul(_t203F,x2031);
      real _t2041#3 = RMul(r2042,y2033);
      real _t2046#1 = RMul(_t2041,z2035);
      real _t204D#1 = RMul(x2031,_t2039);
      tensor[3] g2050#1 = <tensor[3]>[_t203C,_t2046,_t204D];
      real _t2052#2 = 0.e0;
      real r2055#1 = RMul(_t203F,y2033);
      real _t2054#2 = RMul(r2055,z2035);
      tensor[3] _t2059#1 = <tensor[3]>[_t2052,_t2054,_t2039];
      real _t205B#1 = RMul(r2042,z2035);
      tensor[3] _t2060#1 = <tensor[3]>[_t2054,_t205B,_t2041];
      tensor[3] _t2062#1 = <tensor[3]>[_t2039,_t2041,_t2052];
      tensor[3,3] hess2064#1 = <tensor[3,3]>[_t2059,_t2060,_t2062];
      (real[3] evals2066#1,tensor[3][3] E2067#1) = EigenVecs3x3(hess2064);
      real _t2069#1 = 0.1e1;
      real _t206B#1 = Subscript<real[3]>(evals2066,_t2037);
      tensor[3] _t206D#4 = Subscript<tensor[3][3]>(E2067,_t2037);
      real op1_e3_l_5206F#1 = RDiv(_t2069,_t206B);
      real op1_e3_l_62072#3 = RNeg(op1_e3_l_5206F);
      real op1_e3_l_72075#3 = VDot<3>(_t206D,g2050);
      real r2079#1 = TensorIndex<tensor[3],[0]>(_t206D);
      real r207A#1 = RMul(op1_e3_l_62072,r2079);
      real r207B#1 = RMul(r207A,op1_e3_l_72075);
      real r207C#1 = TensorIndex<tensor[3],[1]>(_t206D);
      real r207D#1 = RMul(op1_e3_l_62072,r207C);
      real r207E#1 = RMul(r207D,op1_e3_l_72075);
      real r207F#1 = TensorIndex<tensor[3],[2]>(_t206D);
      real r2080#1 = RMul(op1_e3_l_62072,r207F);
      real r2081#1 = RMul(r2080,op1_e3_l_72075);
      tensor[3] up2078#4 = <tensor[3]>[r207B,r207E,r2081];
      real _t208D#2 = VIndex<3,0>(up2078);
      bool _t208F#1 = EQ<real>(_t208D,_t208D);
      bool _t2091#1 = BNot(_t208F);
      if _t2091 then goto ASSIGN2095 else goto ASSIGN20A2
    ASSIGN2095:  preds = [COND2093]
      bool _t2094#1 = true;
      goto JOIN2098
    JOIN2098:  preds = [ASSIGN2095,JOIN20AB]
      bool _t2096#1 = phi(_t2094,_t2097)
      if _t2096 then goto ASSIGN209B else goto JOIN209F
    ASSIGN209B:  preds = [COND2099]
      real _t209A#3 = +inf;
      tensor[3] _t209C#1 = <tensor[3]>[_t209A,_t209A,_t209A];
      return _t209C
      goto JOIN209F
    JOIN209F:  preds = [*RETURN(_t209C)209E,COND2099]
      return up2078
    ASSIGN20A2:  preds = [COND2093]
      real _t20A1#2 = VIndex<3,1>(up2078);
      bool _t20A3#1 = EQ<real>(_t20A1,_t20A1);
      bool _t20A5#1 = BNot(_t20A3);
      if _t20A5 then goto ASSIGN20A9 else goto ASSIGN20AD
    ASSIGN20A9:  preds = [COND20A7]
      bool _t20A8#1 = true;
      goto JOIN20AB
    JOIN20AB:  preds = [ASSIGN20A9,ASSIGN20B0]
      bool _t2097#1 = phi(_t20A8,_t20AA)
      goto JOIN2098
    ASSIGN20AD:  preds = [COND20A7]
      real _t20AC#2 = VIndex<3,2>(up2078);
      bool _t20AE#1 = EQ<real>(_t20AC,_t20AC);
      bool _t20AA#1 = BNot(_t20AE);
      goto JOIN20AB
}
  function tensor[3,3] fPerp221E (tensor[3] s221F#3) {
    ENTRY2220:  preds = []
      real x2221#1 = VIndex<3,0>(s221F);
      real y2223#4 = VIndex<3,1>(s221F);
      real z2225#2 = VIndex<3,2>(s221F);
      int _t2227#1 = 2;
      real _t2229#2 = RMul(y2223,y2223);
      real _t222C#2 = 0.2e1;
      real r222F#2 = RMul(_t222C,x2221);
      real _t222E#2 = RMul(r222F,y2223);
      real _t2233#11 = 0.e0;
      real r2236#1 = RMul(_t222C,y2223);
      real _t2235#2 = RMul(r2236,z2225);
      tensor[3] _t223A#1 = <tensor[3]>[_t2233,_t2235,_t2229];
      real _t223C#1 = RMul(r222F,z2225);
      tensor[3] _t2241#1 = <tensor[3]>[_t2235,_t223C,_t222E];
      tensor[3] _t2243#1 = <tensor[3]>[_t2229,_t222E,_t2233];
      tensor[3,3] hess2245#1 = <tensor[3,3]>[_t223A,_t2241,_t2243];
      (real[3] evals2247#0,tensor[3][3] _t2248#1) = EigenVecs3x3(hess2245);
      tensor[3] E2224A#6 = Subscript<tensor[3][3]>(_t2248,_t2227);
      real r224D#1 = TensorIndex<tensor[3],[0]>(E2224A);
      tensor[3] binopV224E#3 = VScale<3>(r224D,E2224A);
      real r224F#1 = TensorIndex<tensor[3],[1]>(E2224A);
      tensor[3] binopV2250#3 = VScale<3>(r224F,E2224A);
      real r2251#1 = TensorIndex<tensor[3],[2]>(E2224A);
      tensor[3] binopV2252#3 = VScale<3>(r2251,E2224A);
      real realLit225C#3 = 0.1e1;
      real r225D#1 = VIndex<3,0>(binopV224E);
      real r225E#1 = RSub(realLit225C,r225D);
      real r2260#1 = VIndex<3,1>(binopV224E);
      real r2261#1 = RSub(_t2233,r2260);
      real r2262#1 = VIndex<3,2>(binopV224E);
      real r2263#1 = RSub(_t2233,r2262);
      tensor[3] tensor2264#3 = <tensor[3]>[r225E,r2261,r2263];
      real r2265#1 = VIndex<3,0>(binopV2250);
      real r2266#1 = RSub(_t2233,r2265);
      real r2267#1 = VIndex<3,1>(binopV2250);
      real r2268#1 = RSub(realLit225C,r2267);
      real r2269#1 = VIndex<3,2>(binopV2250);
      real r226A#1 = RSub(_t2233,r2269);
      tensor[3] tensor226B#3 = <tensor[3]>[r2266,r2268,r226A];
      real r226C#1 = VIndex<3,0>(binopV2252);
      real r226D#1 = RSub(_t2233,r226C);
      real r226E#1 = VIndex<3,1>(binopV2252);
      real r226F#1 = RSub(_t2233,r226E);
      real r2270#1 = VIndex<3,2>(binopV2252);
      real r2271#1 = RSub(realLit225C,r2270);
      tensor[3] tensor2272#3 = <tensor[3]>[r226D,r226F,r2271];
      tensor[3,3] m225B#1 = <tensor[3,3]>[tensor2264,tensor226B,tensor2272];
      real vdot228E#1 = VDot<3>(tensor2264,tensor2264);
      real vdot2290#1 = VDot<3>(tensor226B,tensor226B);
      real r2291#1 = RAdd(vdot228E,vdot2290);
      real vdot2293#1 = VDot<3>(tensor2272,tensor2272);
      real t228C#2 = RAdd(r2291,vdot2293);
      bool _t229D#1 = EQ<real>(t228C,t228C);
      bool _t229F#1 = BNot(_t229D);
      if _t229F then goto ASSIGN24FF else goto JOIN22AA
    ASSIGN24FF:  preds = [COND22A1]
      tensor[3] tensor22A4#3 = <tensor[3]>[_t2233,_t2233,_t2233];
      tensor[3,3] _t22A2#1 = <tensor[3,3]>[tensor22A4,tensor22A4,tensor22A4];
      return _t22A2
      goto JOIN22AA
    JOIN22AA:  preds = [*RETURN(_t22A2)22A9,COND22A1]
      return m225B
}
  function int sum2492 (particle P2493#1) {
    ENTRY2494:  preds = []
      int _t2495#1 = P2493.test;
      return _t2495
}
  function int max249A (particle P249B#1) {
    ENTRY249C:  preds = []
      int _t249D#1 = P249B.steps;
      return _t249D
}
  function int sum24A2 (particle P24A3#1) {
    ENTRY24A4:  preds = []
      int _t24A5#1 = P24A3.testp;
      return _t24A5
}
  function bool all24AA (particle P24AB#1) {
    ENTRY24AC:  preds = []
      bool _t24AD#1 = P24AB.found;
      return _t24AD
}
  function real max24B2 (particle P24B3#1) {
    ENTRY24B4:  preds = []
      tensor[3] _t24B5#2 = P24B3.step;
      real op1_e3_l_124B7#1 = VDot<3>(_t24B5,_t24B5);
      real _t24BA#1 = Sqrt(op1_e3_l_124B7);
      return _t24BA
}
## input initialization
  ENTRY1F2F:  preds = []
    real rad1F30#5 = 0.1e-1;
    globals.rad1F28 = rad1F30;
    globals.eps1F29 = rad1F30;
    real v01F34#1 = 0.625e-1;
    globals.v01F2A = v01F34;
    globals.fBias1F2B = rad1F30;
    globals.fStren1F2C = rad1F30;
    globals.zfuz1F2D = rad1F30;
    return
## global-variable initialization
  ENTRY1F3B:  preds = []
    femData:Mesh meshData1F3C#2 = globals.meshData1F25;
    int _t1F3E#1 = 0;
    int _t1F40#1 = 1;
    int _t1F42#1 = ExtractFemItem<int,NumCell(Mesh)>(meshData1F3C);
    int _t1F44#1 = ISub(_t1F42,_t1F40);
    int[] _t1F46#1 = Range(_t1F3E,_t1F44);
    femData:MeshCell[] _t1F48#1 = <femData:MeshCell[]>{};
  FOREACH1F4B:  preds = [ASSIGN1F49,NEXT1F51]
    foreach (_t1F4A in _t1F46) on exit goto RETURN1F52
      femData:MeshCell[] _t1F4F#1 = phi(_t1F48,_t1F4E)
    femData:MeshCell _t1F4C#1 = LoadFem<femData:MeshCell>(meshData1F3C,_t1F4A);
    femData:MeshCell[] _t1F4E#1 = Append<femData:MeshCell>(_t1F4F,_t1F4C);
    goto FOREACH1F4B
  RETURN1F52:  preds = [FOREACH1F4B]
    return
## strand
  strand particle (tensor[3] pos01F53#2, real hh01F54#1) in 3D
    state:
      output tensor[3] pos;
      output tensor[3] _pos;
      real hh;
      tensor[3] step;
      bool found;
      int nfs;
      int test;
      int testp;
      int steps;
    state init
      ENTRY1F5E:  preds = []
        real realLit1F60#3 = 0.e0;
        tensor[3] step1F5F#1 = <tensor[3]>[realLit1F60,realLit1F60,realLit1F60];
        bool found1F64#1 = false;
        int nfs1F66#3 = 0;
        int test1F68#1 = 1;
        self.pos = pos01F53;
        self._pos = pos01F53;
        self.hh = hh01F54;
        self.step = step1F5F;
        self.found = found1F64;
        self.nfs = nfs1F66;
        self.test = test1F68;
        self.testp = nfs1F66;
        self.steps = nfs1F66;
        return
    end state init
    method update
        ENTRY1F74:  preds = []
          real rad1F75#10 = globals.rad1F28;
          real eps1F77#1 = globals.eps1F29;
          real fBias1F79#3 = globals.fBias1F2B;
          real fStren1F7B#3 = globals.fStren1F2C;
          tensor[3] pos1F7D#10 = self.pos;
          real hh1F7F#7 = self.hh;
          bool found1F81#3 = self.found;
          int nfs1F83#3 = self.nfs;
          int testp1F85#2 = self.testp;
          int steps1F87#1 = self.steps;
          int _t1F89#4 = 1;
          int steps1F8B#4 = IAdd(steps1F87,_t1F89);
          real _t1F8D#13 = 0.e0;
          tensor[3] _t1F8F#7 = <tensor[3]>[_t1F8D,_t1F8D,_t1F8D];
          tensor[3] mid1F91#5 = VSub<3>(pos1F7D,_t1F8F);
          real _t1F94#1 = VIndex<3,0>(mid1F91);
          real _t1F96#1 = Abs<real>(_t1F94);
          real _t1F99#9 = 0.1e0;
          bool _t1F9B#1 = GT<real>(_t1F96,_t1F99);
          if _t1F9B then goto ASSIGN1F9F else goto ASSIGN2480
        ASSIGN1F9F:  preds = [COND1F9D]
          real _t1F9E#1 = VIndex<3,1>(mid1F91);
          real _t1FA0#1 = Abs<real>(_t1F9E);
          bool _t1FA3#1 = GT<real>(_t1FA0,_t1F99);
          if _t1FA3 then goto ASSIGN1FA7 else goto ASSIGN247F
        ASSIGN1FA7:  preds = [COND1FA5]
          real _t1FA6#1 = VIndex<3,2>(mid1F91);
          real _t1FA8#1 = Abs<real>(_t1FA6);
          bool _t1FAB#1 = GT<real>(_t1FA8,_t1F99);
          goto JOIN1FAF
        JOIN1FAF:  preds = [ASSIGN1FAC,ASSIGN247F]
          bool _t1FAD#1 = phi(_t1FAB,_t1FAE)
          goto JOIN1FB2
        JOIN1FB2:  preds = [JOIN1FAF,ASSIGN2480]
          bool _t1FB0#1 = phi(_t1FAD,_t1FB1)
          real op1_e3_l_41FB3#1 = VDot<3>(mid1F91,mid1F91);
          real _t1FB6#2 = Sqrt(op1_e3_l_41FB3);
          real _t1FB9#3 = 0.5e1;
          bool _t1FBB#1 = LT<real>(_t1FB6,_t1FB9);
          if _t1FBB then goto ASSIGN1FBF else goto ASSIGN247E
        ASSIGN1FBF:  preds = [COND1FBD]
          real _t1FBE#1 = 0.2e1;
          bool _t1FC0#1 = GT<real>(_t1FB6,_t1FBE);
          if _t1FC0 then goto JOIN1FC5 else goto ASSIGN247D
        JOIN1FC5:  preds = [COND1FC2,ASSIGN247D]
          bool _t1FC3#1 = phi(_t1FB0,_t1FC4)
          goto JOIN1FC8
        JOIN1FC8:  preds = [JOIN1FC5,ASSIGN247E]
          bool _t1FC6#1 = phi(_t1FC3,_t1FC7)
          if _t1FC6 then goto ASSIGN1FCB else goto ASSIGN247C
        ASSIGN1FCB:  preds = [COND1FC9]
          real _t1FCA#4 = VIndex<3,0>(pos1F7D);
          bool _t1FCC#1 = EQ<real>(_t1FCA,_t1FCA);
          bool _t1FCE#1 = BNot(_t1FCC);
          if _t1FCE then goto ASSIGN1FD2 else goto ASSIGN246D
        ASSIGN1FD2:  preds = [COND1FD0]
          bool _t1FD1#1 = true;
          goto JOIN1FD5
        JOIN1FD5:  preds = [ASSIGN1FD2,JOIN2476]
          bool _t1FD3#1 = phi(_t1FD1,_t1FD4)
          bool _t1FD6#1 = BNot(_t1FD3);
          if _t1FD6 then goto ASSIGN1FDA else goto ASSIGN246B
        ASSIGN1FDA:  preds = [COND1FD8]
          real y1FD9#4 = VIndex<3,1>(pos1F7D);
          real z1FDB#4 = VIndex<3,2>(pos1F7D);
          int _t1FDD#1 = 2;
          real _t1FDF#4 = RMul(y1FD9,y1FD9);
          real _t1FE2#1 = RMul(z1FDB,_t1FDF);
          real _t1FE5#2 = 0.2e1;
          real r1FE8#2 = RMul(_t1FE5,_t1FCA);
          real _t1FE7#3 = RMul(r1FE8,y1FD9);
          real _t1FEC#1 = RMul(_t1FE7,z1FDB);
          real _t1FF3#1 = RMul(_t1FCA,_t1FDF);
          tensor[3] g1FF6#2 = <tensor[3]>[_t1FE2,_t1FEC,_t1FF3];
          real r1FF9#1 = RMul(_t1FE5,y1FD9);
          real _t1FF8#2 = RMul(r1FF9,z1FDB);
          tensor[3] _t1FFD#1 = <tensor[3]>[_t1F8D,_t1FF8,_t1FDF];
          real _t1FFF#1 = RMul(r1FE8,z1FDB);
          tensor[3] _t2004#1 = <tensor[3]>[_t1FF8,_t1FFF,_t1FE7];
          tensor[3] _t2006#1 = <tensor[3]>[_t1FDF,_t1FE7,_t1F8D];
          tensor[3,3] hess2008#1 = <tensor[3,3]>[_t1FFD,_t2004,_t2006];
          real[3] _t200A#1 = EigenVals3x3(hess2008);
          real _t200C#1 = Subscript<real[3]>(_t200A,_t1FDD);
          real op1_e3_l_3200E#1 = VDot<3>(g1FF6,g1FF6);
          real op1_e3_l_42011#1 = Sqrt(op1_e3_l_3200E);
          real op1_e3_l_52014#1 = RNeg(_t200C);
          real op1_e3_l_62017#1 = RAdd(fBias1F79,op1_e3_l_42011);
          real str201A#1 = RDiv(op1_e3_l_52014,op1_e3_l_62017);
          bool _t201D#1 = GTE<real>(str201A,fStren1F7B);
          goto JOIN2021
        JOIN2021:  preds = [ASSIGN201E,ASSIGN246B]
          bool _t201F#1 = phi(_t201D,_t2020)
          goto JOIN2024
        JOIN2024:  preds = [JOIN2021,ASSIGN247C]
          bool _t2022#1 = phi(_t201F,_t2023)
          bool _t2025#1 = BNot(_t2022);
          if _t2025 then goto DIE2028 else goto JOIN2029
        DIE2028:  preds = [COND2027]
          die
          goto JOIN2029
        JOIN2029:  preds = [*DIE2028,COND2027]
          bool _t202A#1 = BNot(found1F81);
          if _t202A then goto ASSIGN20B1 else goto ASSIGN2103
        ASSIGN20B1:  preds = [COND202C]
          tensor[3] step202D#4 = fStep202E (pos1F7D);
          tensor[3] pos20B2#4 = VAdd<3>(pos1F7D,step202D);
          real _t20B5#2 = VIndex<3,0>(pos20B2);
          bool _t20B7#1 = EQ<real>(_t20B5,_t20B5);
          bool _t20B9#1 = BNot(_t20B7);
          if _t20B9 then goto ASSIGN20BD else goto ASSIGN20F3
        ASSIGN20BD:  preds = [COND20BB]
          bool _t20BC#1 = true;
          goto JOIN20C0
        JOIN20C0:  preds = [ASSIGN20BD,JOIN20FC]
          bool _t20BE#1 = phi(_t20BC,_t20BF)
          if _t20BE then goto DIE20C2 else goto JOIN20C3
        DIE20C2:  preds = [COND20C1]
          die
          goto JOIN20C3
        JOIN20C3:  preds = [*DIE20C2,COND20C1]
          real op1_e3_l_220C4#1 = VDot<3>(step202D,step202D);
          real op1_e3_l_320C7#1 = Sqrt(op1_e3_l_220C4);
          real _t20CA#1 = RDiv(op1_e3_l_320C7,rad1F75);
          bool _t20CD#1 = GT<real>(_t20CA,eps1F77);
          if _t20CD then goto ASSIGN20D1 else goto ASSIGN20F1
        ASSIGN20D1:  preds = [COND20CF]
          int nfs20D0#2 = IAdd(nfs1F83,_t1F89);
          int _t20D2#1 = 10;
          bool _t20D4#1 = GT<int>(nfs20D0,_t20D2);
          if _t20D4 then goto DIE20D7 else goto JOIN20D8
        DIE20D7:  preds = [COND20D6]
          die
          goto JOIN20D8
        JOIN20D8:  preds = [*DIE20D7,COND20D6]
          goto JOIN20DD
        JOIN20DD:  preds = [JOIN20D8,ASSIGN20F1]
          int testp20D9#1 = phi(testp1F85,_t1F89)
          int nfs20DA#1 = phi(nfs20D0,nfs1F83)
          bool found20DB#1 = phi(found1F81,found20DC)
          goto JOIN20E7
        JOIN20E7:  preds = [JOIN20DD,JOIN241E]
          int testp20DE#1 = phi(testp20D9,testp1F85)
          int nfs20DF#1 = phi(nfs20DA,nfs1F83)
          bool found20E0#1 = phi(found20DB,found1F81)
          tensor[3] step20E1#1 = phi(step202D,up20E2)
          real hh20E3#1 = phi(hh1F7F,hh20E4)
          tensor[3] pos20E5#2 = phi(pos20B2,pos20E6)
          self.pos = pos20E5;
          self._pos = pos20E5;
          self.hh = hh20E3;
          self.step = step20E1;
          self.found = found20E0;
          self.nfs = nfs20DF;
          self.testp = testp20DE;
          self.steps = steps1F8B;
          active
        ASSIGN20F1:  preds = [COND20CF]
          bool found20DC#1 = true;
          goto JOIN20DD
        ASSIGN20F3:  preds = [COND20BB]
          real _t20F2#2 = VIndex<3,1>(pos20B2);
          bool _t20F4#1 = EQ<real>(_t20F2,_t20F2);
          bool _t20F6#1 = BNot(_t20F4);
          if _t20F6 then goto ASSIGN20FA else goto ASSIGN20FE
        ASSIGN20FA:  preds = [COND20F8]
          bool _t20F9#1 = true;
          goto JOIN20FC
        JOIN20FC:  preds = [ASSIGN20FA,ASSIGN2101]
          bool _t20BF#1 = phi(_t20F9,_t20FB)
          goto JOIN20C0
        ASSIGN20FE:  preds = [COND20F8]
          real _t20FD#2 = VIndex<3,2>(pos20B2);
          bool _t20FF#1 = EQ<real>(_t20FD,_t20FD);
          bool _t20FB#1 = BNot(_t20FF);
          goto JOIN20FC
        ASSIGN2103:  preds = [COND202C]
          tensor[3] _t2102#1 = fStep202E (pos1F7D);
          tensor[3] pos2104#16 = VAdd<3>(pos1F7D,_t2102);
          real _t2107#2 = VIndex<3,0>(pos2104);
          bool _t2109#1 = EQ<real>(_t2107,_t2107);
          bool _t210B#1 = BNot(_t2109);
          if _t210B then goto ASSIGN210F else goto ASSIGN245C
        ASSIGN210F:  preds = [COND210D]
          bool _t210E#1 = true;
          goto JOIN2112
        JOIN2112:  preds = [ASSIGN210F,JOIN2465]
          bool _t2110#1 = phi(_t210E,_t2111)
          if _t2110 then goto DIE2114 else goto JOIN2115
        DIE2114:  preds = [COND2113]
          die
          goto JOIN2115
        JOIN2115:  preds = [*DIE2114,COND2113]
          int nn211B#2 = 0;
          particle[] _t211D#1 = SphereQuery<3,particle>(pos2104,rad1F75);
        FOREACH2120:  preds = [ASSIGN211E,NEXT2174]
          foreach (P211F in _t211D) on exit goto ASSIGN2176
            int nn2172#3 = phi(nn211B,nn2171)
            tensor[3] force216E#4 = phi(_t1F8F,force216D)
            real oldE213A#2 = phi(_t1F8D,oldE2139)
          tensor[3] _t2121#1 = P211F.pos;
          real _t2123#3 = 0.1e1;
          tensor[3] op1_e3_l_82125#5 = VSub<3>(_t2121,pos2104);
          real op1_e3_l_102128#1 = VDot<3>(op1_e3_l_82125,op1_e3_l_82125);
          real op1_e3_l_11212B#2 = Sqrt(op1_e3_l_102128);
          real op1_e3_l_12212E#1 = RDiv(op1_e3_l_11212B,rad1F75);
          real op1_e3_l_132131#3 = RSub(_t2123,op1_e3_l_12212E);
          real _Pow_22135#3 = RMul(op1_e3_l_132131,op1_e3_l_132131);
          real op1_e3_l_142134#1 = RMul(_Pow_22135,_Pow_22135);
          real oldE2139#1 = RAdd(oldE213A,op1_e3_l_142134);
          real _t213D#1 = -0.4e1;
          real op1_e3_l_24213F#1 = RMul(op1_e3_l_132131,_Pow_22135);
          real op1_e3_l_252144#1 = RDiv(_t2123,rad1F75);
          real r2148#1 = TensorIndex<tensor[3],[0]>(op1_e3_l_82125);
          real r2149#1 = RMul(_t213D,op1_e3_l_24213F);
          real r214A#3 = RMul(r2149,op1_e3_l_252144);
          real r214B#1 = RMul(r214A,r2148);
          real r214C#1 = TensorIndex<tensor[3],[1]>(op1_e3_l_82125);
          real r214D#1 = RMul(r214A,r214C);
          real r214E#1 = TensorIndex<tensor[3],[2]>(op1_e3_l_82125);
          real r214F#1 = RMul(r214A,r214E);
          real r215C#3 = RDiv(_t2123,op1_e3_l_11212B);
          real r215E#1 = RMul(r215C,r214B);
          real r2160#1 = RMul(r215C,r214D);
          real r2162#1 = RMul(r215C,r214F);
          tensor[3] op1_e3_l_34215A#1 = <tensor[3]>[r215E,r2160,r2162];
          tensor[3] force216D#1 = VAdd<3>(force216E,op1_e3_l_34215A);
          int nn2171#1 = IAdd(nn2172,_t1F89);
          goto FOREACH2120
        ASSIGN2176:  preds = [FOREACH2120]
          bool _t2175#1 = EQ<int>(nn211B,nn2172);
          if _t2175 then goto ASSIGN2179 else goto JOIN221C
        ASSIGN2179:  preds = [COND2177]
          real _t2178#1 = 0.5e0;
          real _t217A#1 = RMul(_t2178,rad1F75);
          tensor[3] _t217D#1 = <tensor[3]>[_t217A,_t1F8D,_t1F8D];
          tensor[3] npos217F#7 = VAdd<3>(pos2104,_t217D);
          tensor[3] mid2184#5 = VSub<3>(npos217F,_t1F8F);
          real _t2187#1 = VIndex<3,0>(mid2184);
          real _t2189#1 = Abs<real>(_t2187);
          bool _t218C#1 = GT<real>(_t2189,_t1F99);
          if _t218C then goto ASSIGN2190 else goto ASSIGN245A
        ASSIGN2190:  preds = [COND218E]
          real _t218F#1 = VIndex<3,1>(mid2184);
          real _t2191#1 = Abs<real>(_t218F);
          bool _t2194#1 = GT<real>(_t2191,_t1F99);
          if _t2194 then goto ASSIGN2198 else goto ASSIGN2459
        ASSIGN2198:  preds = [COND2196]
          real _t2197#1 = VIndex<3,2>(mid2184);
          real _t2199#1 = Abs<real>(_t2197);
          bool _t219C#1 = GT<real>(_t2199,_t1F99);
          goto JOIN21A0
        JOIN21A0:  preds = [ASSIGN219D,ASSIGN2459]
          bool _t219E#1 = phi(_t219C,_t219F)
          goto JOIN21A3
        JOIN21A3:  preds = [JOIN21A0,ASSIGN245A]
          bool _t21A1#1 = phi(_t219E,_t21A2)
          real op1_e3_l_821A4#1 = VDot<3>(mid2184,mid2184);
          real _t21A7#2 = Sqrt(op1_e3_l_821A4);
          bool _t21AA#1 = LT<real>(_t21A7,_t1FB9);
          if _t21AA then goto ASSIGN21AE else goto ASSIGN2458
        ASSIGN21AE:  preds = [COND21AC]
          real _t21AD#1 = 0.2e1;
          bool _t21AF#1 = GT<real>(_t21A7,_t21AD);
          if _t21AF then goto JOIN21B4 else goto ASSIGN2457
        JOIN21B4:  preds = [COND21B1,ASSIGN2457]
          bool _t21B2#1 = phi(_t21A1,_t21B3)
          goto JOIN21B7
        JOIN21B7:  preds = [JOIN21B4,ASSIGN2458]
          bool _t21B5#1 = phi(_t21B2,_t21B6)
          if _t21B5 then goto ASSIGN21BA else goto ASSIGN2456
        ASSIGN21BA:  preds = [COND21B8]
          real _t21B9#4 = VIndex<3,0>(npos217F);
          bool _t21BB#1 = EQ<real>(_t21B9,_t21B9);
          bool _t21BD#1 = BNot(_t21BB);
          if _t21BD then goto ASSIGN21C1 else goto ASSIGN2447
        ASSIGN21C1:  preds = [COND21BF]
          bool _t21C0#1 = true;
          goto JOIN21C4
        JOIN21C4:  preds = [ASSIGN21C1,JOIN2450]
          bool _t21C2#1 = phi(_t21C0,_t21C3)
          bool _t21C5#1 = BNot(_t21C2);
          if _t21C5 then goto ASSIGN21C9 else goto ASSIGN2445
        ASSIGN21C9:  preds = [COND21C7]
          real y21C8#4 = VIndex<3,1>(npos217F);
          real z21CA#4 = VIndex<3,2>(npos217F);
          int _t21CC#1 = 2;
          real _t21CE#4 = RMul(y21C8,y21C8);
          real _t21D1#1 = RMul(z21CA,_t21CE);
          real _t21D4#2 = 0.2e1;
          real r21D7#2 = RMul(_t21D4,_t21B9);
          real _t21D6#3 = RMul(r21D7,y21C8);
          real _t21DB#1 = RMul(_t21D6,z21CA);
          real _t21E2#1 = RMul(_t21B9,_t21CE);
          tensor[3] g21E5#2 = <tensor[3]>[_t21D1,_t21DB,_t21E2];
          real r21E8#1 = RMul(_t21D4,y21C8);
          real _t21E7#2 = RMul(r21E8,z21CA);
          tensor[3] _t21EC#1 = <tensor[3]>[_t1F8D,_t21E7,_t21CE];
          real _t21EE#1 = RMul(r21D7,z21CA);
          tensor[3] _t21F3#1 = <tensor[3]>[_t21E7,_t21EE,_t21D6];
          tensor[3] _t21F5#1 = <tensor[3]>[_t21CE,_t21D6,_t1F8D];
          tensor[3,3] hess21F7#1 = <tensor[3,3]>[_t21EC,_t21F3,_t21F5];
          real[3] _t21F9#1 = EigenVals3x3(hess21F7);
          real _t21FB#1 = Subscript<real[3]>(_t21F9,_t21CC);
          real op1_e3_l_321FD#1 = VDot<3>(g21E5,g21E5);
          real op1_e3_l_42200#1 = Sqrt(op1_e3_l_321FD);
          real op1_e3_l_52203#1 = RNeg(_t21FB);
          real op1_e3_l_62206#1 = RAdd(fBias1F79,op1_e3_l_42200);
          real str2209#1 = RDiv(op1_e3_l_52203,op1_e3_l_62206);
          bool _t220C#1 = GTE<real>(str2209,fStren1F7B);
          goto JOIN2210
        JOIN2210:  preds = [ASSIGN220D,ASSIGN2445]
          bool _t220E#1 = phi(_t220C,_t220F)
          goto JOIN2213
        JOIN2213:  preds = [JOIN2210,ASSIGN2456]
          bool _t2211#1 = phi(_t220E,_t2212)
          if _t2211 then goto NEW2215 else goto JOIN2216
        NEW2215:  preds = [COND2214]
          new particle(npos217F,hh1F7F);
          goto JOIN2216
        JOIN2216:  preds = [NEW2215,COND2214]
          self.pos = pos2104;
          self._pos = pos2104;
          self.step = _t1F8F;
          self.steps = steps1F8B;
          active
          goto JOIN221C
        JOIN221C:  preds = [*ACTIVE221B,COND2177]
          tensor[3,3] _t221D#3 = fPerp221E (pos2104);
          tensor[3] projParam22AE#1 = ProjectLast<tensor[3,3],[0]>(_t221D);
          real vdot22AF#2 = VDot<3>(projParam22AE,force216E);
          tensor[3] projParam22B0#1 = ProjectLast<tensor[3,3],[1]>(_t221D);
          real vdot22B1#2 = VDot<3>(projParam22B0,force216E);
          tensor[3] projParam22B2#1 = ProjectLast<tensor[3,3],[2]>(_t221D);
          real vdot22B3#2 = VDot<3>(projParam22B2,force216E);
          tensor[3] op1_e3_l_322AD#4 = <tensor[3]>[vdot22AF,vdot22B1,vdot22B3];
          tensor[3] es22BC#1 = VScale<3>(hh1F7F,op1_e3_l_322AD);
          real op1_e3_l_522BF#1 = VDot<3>(op1_e3_l_322AD,op1_e3_l_322AD);
          real r22C3#1 = RMul(hh1F7F,hh1F7F);
          real op1_e3_l_622C2#1 = RMul(r22C3,op1_e3_l_522BF);
          real _t22C7#2 = Sqrt(op1_e3_l_622C2);
          bool _t22CA#1 = GT<real>(_t22C7,rad1F75);
          if _t22CA then goto ASSIGN22CF else goto JOIN22E6
        ASSIGN22CF:  preds = [COND22CC]
          real op1_e3_l_1022CD#1 = RDiv(rad1F75,_t22C7);
          real hh22D0#4 = RMul(hh1F7F,op1_e3_l_1022CD);
          real r22D6#1 = RMul(hh22D0,vdot22AF);
          real r22D8#1 = RMul(hh22D0,vdot22B1);
          real r22DA#1 = RMul(hh22D0,vdot22B3);
          tensor[3] es22D3#1 = <tensor[3]>[r22D6,r22D8,r22DA];
          goto JOIN22E6
        JOIN22E6:  preds = [ASSIGN22E3,COND22CC]
          tensor[3] es22E4#8 = phi(es22D3,es22BC)
          real hh22E5#2 = phi(hh22D0,hh1F7F)
          tensor[3] samplePos22E7#1 = VAdd<3>(pos2104,es22E4);
          tensor[3] fs22EC#4 = fStep202E (samplePos22E7);
          real op1_e3_l_222EE#1 = VDot<3>(fs22EC,fs22EC);
          real op1_e3_l_322F1#1 = VDot<3>(es22E4,es22E4);
          real op1_e3_l_422F4#1 = Sqrt(op1_e3_l_222EE);
          real op1_e3_l_522F7#2 = Sqrt(op1_e3_l_322F1);
          real _t22FA#1 = RDiv(op1_e3_l_422F4,op1_e3_l_522F7);
          real _t22FD#5 = 0.5e0;
          bool _t22FF#1 = GT<real>(_t22FA,_t22FD);
          if _t22FF then goto ASSIGN2304 else goto JOIN230C
        ASSIGN2304:  preds = [COND2301]
          real hh2302#1 = RMul(hh22E5,_t22FD);
          self.pos = pos2104;
          self._pos = pos2104;
          self.hh = hh2302;
          self.step = _t1F8F;
          self.steps = steps1F8B;
          active
          goto JOIN230C
        JOIN230C:  preds = [*ACTIVE230A,COND2301]
          real hh230B#2 = phi(hh22E5)
          tensor[3] up20E2#1 = VAdd<3>(fs22EC,es22E4);
          tensor[3] v2311#1 = VAdd<3>(pos2104,fs22EC);
          tensor[3] pos230F#4 = VAdd<3>(v2311,es22E4);
          particle[] _t2316#1 = SphereQuery<3,particle>(pos230F,rad1F75);
        FOREACH2319:  preds = [ASSIGN2317,NEXT2336]
          foreach (P2318 in _t2316) on exit goto ASSIGN2339
            real accum2333#2 = phi(_t1F8D,accum2332)
          tensor[3] _t231A#1 = P2318.pos;
          real _t231C#1 = 0.1e1;
          tensor[3] op1_e3_l_10231E#2 = VSub<3>(pos230F,_t231A);
          real op1_e3_l_122321#1 = VDot<3>(op1_e3_l_10231E,op1_e3_l_10231E);
          real op1_e3_l_132324#1 = Sqrt(op1_e3_l_122321);
          real op1_e3_l_142327#1 = RDiv(op1_e3_l_132324,rad1F75);
          real op1_e3_l_15232A#2 = RSub(_t231C,op1_e3_l_142327);
          real _Pow_2232E#2 = RMul(op1_e3_l_15232A,op1_e3_l_15232A);
          real op1_e3_l_16232D#1 = RMul(_Pow_2232E,_Pow_2232E);
          real accum2332#1 = RAdd(accum2333,op1_e3_l_16232D);
          goto FOREACH2319
        ASSIGN2339:  preds = [FOREACH2319]
          real _t2337#1 = RSub(accum2333,oldE213A);
          tensor[3] op1_e3_l_12233A#1 = VSub<3>(pos230F,pos2104);
          tensor[3] op1_e3_l_13233D#1 = VNeg<3>(op1_e3_l_322AD);
          real op1_e3_l_142340#1 = VDot<3>(op1_e3_l_12233A,op1_e3_l_13233D);
          real _t2343#1 = RMul(_t22FD,op1_e3_l_142340);
          bool _t2346#1 = GT<real>(_t2337,_t2343);
          if _t2346 then goto ASSIGN234B else goto JOIN2353
        ASSIGN234B:  preds = [COND2348]
          real hh2349#1 = RMul(hh230B,_t22FD);
          self.pos = pos2104;
          self._pos = pos2104;
          self.hh = hh2349;
          self.step = _t1F8F;
          self.steps = steps1F8B;
          active
          goto JOIN2353
        JOIN2353:  preds = [*ACTIVE2351,COND2348]
          real hh2352#1 = phi(hh230B)
          tensor[3] pos20E6#5 = phi(pos230F)
          real _t2354#1 = 0.11e1;
          real hh20E4#2 = RMul(hh2352,_t2354);
          real _t2358#2 = VIndex<3,0>(pos20E6);
          bool _t235A#1 = EQ<real>(_t2358,_t2358);
          bool _t235C#1 = BNot(_t235A);
          if _t235C then goto ASSIGN2360 else goto ASSIGN2436
        ASSIGN2360:  preds = [COND235E]
          bool _t235F#1 = true;
          goto JOIN2363
        JOIN2363:  preds = [ASSIGN2360,JOIN243F]
          bool _t2361#1 = phi(_t235F,_t2362)
          if _t2361 then goto DIE2365 else goto JOIN2366
        DIE2365:  preds = [COND2364]
          die
          goto JOIN2366
        JOIN2366:  preds = [*DIE2365,COND2364]
          int _t2367#1 = 5;
          bool _t2369#1 = LT<int>(nn2172,_t2367);
          if _t2369 then goto ASSIGN236F else goto JOIN241E
        ASSIGN236F:  preds = [COND236B]
          real realLit236D#1 = 0.1e1;
          real op1_e3_l_7236C#3 = RDiv(realLit236D,op1_e3_l_522F7);
          real r2372#1 = TensorIndex<tensor[3],[0]>(es22E4);
          real r2373#3 = RMul(_t22FD,rad1F75);
          real r2374#1 = RMul(r2373,r2372);
          real r2375#1 = RMul(r2374,op1_e3_l_7236C);
          real r2376#1 = TensorIndex<tensor[3],[1]>(es22E4);
          real r2377#1 = RMul(r2373,r2376);
          real r2378#1 = RMul(r2377,op1_e3_l_7236C);
          real r2379#1 = TensorIndex<tensor[3],[2]>(es22E4);
          real r237A#1 = RMul(r2373,r2379);
          real r237B#1 = RMul(r237A,op1_e3_l_7236C);
          tensor[3] op1_e3_l_82371#1 = <tensor[3]>[r2375,r2378,r237B];
          tensor[3] npos2388#7 = VAdd<3>(pos20E6,op1_e3_l_82371);
          tensor[3] mid238B#5 = VSub<3>(npos2388,_t1F8F);
          real _t238E#1 = VIndex<3,0>(mid238B);
          real _t2390#1 = Abs<real>(_t238E);
          bool _t2393#1 = GT<real>(_t2390,_t1F99);
          if _t2393 then goto ASSIGN2397 else goto ASSIGN2434
        ASSIGN2397:  preds = [COND2395]
          real _t2396#1 = VIndex<3,1>(mid238B);
          real _t2398#1 = Abs<real>(_t2396);
          bool _t239B#1 = GT<real>(_t2398,_t1F99);
          if _t239B then goto ASSIGN239F else goto ASSIGN2433
        ASSIGN239F:  preds = [COND239D]
          real _t239E#1 = VIndex<3,2>(mid238B);
          real _t23A0#1 = Abs<real>(_t239E);
          bool _t23A3#1 = GT<real>(_t23A0,_t1F99);
          goto JOIN23A7
        JOIN23A7:  preds = [ASSIGN23A4,ASSIGN2433]
          bool _t23A5#1 = phi(_t23A3,_t23A6)
          goto JOIN23AA
        JOIN23AA:  preds = [JOIN23A7,ASSIGN2434]
          bool _t23A8#1 = phi(_t23A5,_t23A9)
          real op1_e3_l_1823AB#1 = VDot<3>(mid238B,mid238B);
          real _t23AE#2 = Sqrt(op1_e3_l_1823AB);
          bool _t23B1#1 = LT<real>(_t23AE,_t1FB9);
          if _t23B1 then goto ASSIGN23B5 else goto ASSIGN2432
        ASSIGN23B5:  preds = [COND23B3]
          real _t23B4#1 = 0.2e1;
          bool _t23B6#1 = GT<real>(_t23AE,_t23B4);
          if _t23B6 then goto JOIN23BB else goto ASSIGN2431
        JOIN23BB:  preds = [COND23B8,ASSIGN2431]
          bool _t23B9#1 = phi(_t23A8,_t23BA)
          goto JOIN23BE
        JOIN23BE:  preds = [JOIN23BB,ASSIGN2432]
          bool _t23BC#1 = phi(_t23B9,_t23BD)
          if _t23BC then goto ASSIGN23C1 else goto ASSIGN2430
        ASSIGN23C1:  preds = [COND23BF]
          real _t23C0#4 = VIndex<3,0>(npos2388);
          bool _t23C2#1 = EQ<real>(_t23C0,_t23C0);
          bool _t23C4#1 = BNot(_t23C2);
          if _t23C4 then goto ASSIGN23C8 else goto ASSIGN2421
        ASSIGN23C8:  preds = [COND23C6]
          bool _t23C7#1 = true;
          goto JOIN23CB
        JOIN23CB:  preds = [ASSIGN23C8,JOIN242A]
          bool _t23C9#1 = phi(_t23C7,_t23CA)
          bool _t23CC#1 = BNot(_t23C9);
          if _t23CC then goto ASSIGN23D0 else goto ASSIGN241F
        ASSIGN23D0:  preds = [COND23CE]
          real y23CF#4 = VIndex<3,1>(npos2388);
          real z23D1#4 = VIndex<3,2>(npos2388);
          int _t23D3#1 = 2;
          real _t23D5#4 = RMul(y23CF,y23CF);
          real _t23D8#1 = RMul(z23D1,_t23D5);
          real _t23DB#2 = 0.2e1;
          real r23DE#2 = RMul(_t23DB,_t23C0);
          real _t23DD#3 = RMul(r23DE,y23CF);
          real _t23E2#1 = RMul(_t23DD,z23D1);
          real _t23E9#1 = RMul(_t23C0,_t23D5);
          tensor[3] g23EC#2 = <tensor[3]>[_t23D8,_t23E2,_t23E9];
          real r23EF#1 = RMul(_t23DB,y23CF);
          real _t23EE#2 = RMul(r23EF,z23D1);
          tensor[3] _t23F3#1 = <tensor[3]>[_t1F8D,_t23EE,_t23D5];
          real _t23F5#1 = RMul(r23DE,z23D1);
          tensor[3] _t23FA#1 = <tensor[3]>[_t23EE,_t23F5,_t23DD];
          tensor[3] _t23FC#1 = <tensor[3]>[_t23D5,_t23DD,_t1F8D];
          tensor[3,3] hess23FE#1 = <tensor[3,3]>[_t23F3,_t23FA,_t23FC];
          real[3] _t2400#1 = EigenVals3x3(hess23FE);
          real _t2402#1 = Subscript<real[3]>(_t2400,_t23D3);
          real op1_e3_l_32404#1 = VDot<3>(g23EC,g23EC);
          real op1_e3_l_42407#1 = Sqrt(op1_e3_l_32404);
          real op1_e3_l_5240A#1 = RNeg(_t2402);
          real op1_e3_l_6240D#1 = RAdd(fBias1F79,op1_e3_l_42407);
          real str2410#1 = RDiv(op1_e3_l_5240A,op1_e3_l_6240D);
          bool _t2413#1 = GTE<real>(str2410,fStren1F7B);
          goto JOIN2417
        JOIN2417:  preds = [ASSIGN2414,ASSIGN241F]
          bool _t2415#1 = phi(_t2413,_t2416)
          goto JOIN241A
        JOIN241A:  preds = [JOIN2417,ASSIGN2430]
          bool _t2418#1 = phi(_t2415,_t2419)
          if _t2418 then goto NEW241C else goto JOIN241D
        NEW241C:  preds = [COND241B]
          new particle(npos2388,hh20E4);
          goto JOIN241D
        JOIN241D:  preds = [NEW241C,COND241B]
          goto JOIN241E
        JOIN241E:  preds = [JOIN241D,COND236B]
          goto JOIN20E7
        ASSIGN241F:  preds = [COND23CE]
          bool _t2416#1 = false;
          goto JOIN2417
        ASSIGN2421:  preds = [COND23C6]
          real _t2420#2 = VIndex<3,1>(npos2388);
          bool _t2422#1 = EQ<real>(_t2420,_t2420);
          bool _t2424#1 = BNot(_t2422);
          if _t2424 then goto ASSIGN2428 else goto ASSIGN242C
        ASSIGN2428:  preds = [COND2426]
          bool _t2427#1 = true;
          goto JOIN242A
        JOIN242A:  preds = [ASSIGN2428,ASSIGN242F]
          bool _t23CA#1 = phi(_t2427,_t2429)
          goto JOIN23CB
        ASSIGN242C:  preds = [COND2426]
          real _t242B#2 = VIndex<3,2>(npos2388);
          bool _t242D#1 = EQ<real>(_t242B,_t242B);
          bool _t2429#1 = BNot(_t242D);
          goto JOIN242A
        ASSIGN2430:  preds = [COND23BF]
          bool _t2419#1 = false;
          goto JOIN241A
        ASSIGN2431:  preds = [COND23B8]
          bool _t23BA#1 = false;
          goto JOIN23BB
        ASSIGN2432:  preds = [COND23B3]
          bool _t23BD#1 = false;
          goto JOIN23BE
        ASSIGN2433:  preds = [COND239D]
          bool _t23A6#1 = false;
          goto JOIN23A7
        ASSIGN2434:  preds = [COND2395]
          bool _t23A9#1 = false;
          goto JOIN23AA
        ASSIGN2436:  preds = [COND235E]
          real _t2435#2 = VIndex<3,1>(pos20E6);
          bool _t2437#1 = EQ<real>(_t2435,_t2435);
          bool _t2439#1 = BNot(_t2437);
          if _t2439 then goto ASSIGN243D else goto ASSIGN2441
        ASSIGN243D:  preds = [COND243B]
          bool _t243C#1 = true;
          goto JOIN243F
        JOIN243F:  preds = [ASSIGN243D,ASSIGN2444]
          bool _t2362#1 = phi(_t243C,_t243E)
          goto JOIN2363
        ASSIGN2441:  preds = [COND243B]
          real _t2440#2 = VIndex<3,2>(pos20E6);
          bool _t2442#1 = EQ<real>(_t2440,_t2440);
          bool _t243E#1 = BNot(_t2442);
          goto JOIN243F
        ASSIGN2445:  preds = [COND21C7]
          bool _t220F#1 = false;
          goto JOIN2210
        ASSIGN2447:  preds = [COND21BF]
          real _t2446#2 = VIndex<3,1>(npos217F);
          bool _t2448#1 = EQ<real>(_t2446,_t2446);
          bool _t244A#1 = BNot(_t2448);
          if _t244A then goto ASSIGN244E else goto ASSIGN2452
        ASSIGN244E:  preds = [COND244C]
          bool _t244D#1 = true;
          goto JOIN2450
        JOIN2450:  preds = [ASSIGN244E,ASSIGN2455]
          bool _t21C3#1 = phi(_t244D,_t244F)
          goto JOIN21C4
        ASSIGN2452:  preds = [COND244C]
          real _t2451#2 = VIndex<3,2>(npos217F);
          bool _t2453#1 = EQ<real>(_t2451,_t2451);
          bool _t244F#1 = BNot(_t2453);
          goto JOIN2450
        ASSIGN2456:  preds = [COND21B8]
          bool _t2212#1 = false;
          goto JOIN2213
        ASSIGN2457:  preds = [COND21B1]
          bool _t21B3#1 = false;
          goto JOIN21B4
        ASSIGN2458:  preds = [COND21AC]
          bool _t21B6#1 = false;
          goto JOIN21B7
        ASSIGN2459:  preds = [COND2196]
          bool _t219F#1 = false;
          goto JOIN21A0
        ASSIGN245A:  preds = [COND218E]
          bool _t21A2#1 = false;
          goto JOIN21A3
        ASSIGN245C:  preds = [COND210D]
          real _t245B#2 = VIndex<3,1>(pos2104);
          bool _t245D#1 = EQ<real>(_t245B,_t245B);
          bool _t245F#1 = BNot(_t245D);
          if _t245F then goto ASSIGN2463 else goto ASSIGN2467
        ASSIGN2463:  preds = [COND2461]
          bool _t2462#1 = true;
          goto JOIN2465
        JOIN2465:  preds = [ASSIGN2463,ASSIGN246A]
          bool _t2111#1 = phi(_t2462,_t2464)
          goto JOIN2112
        ASSIGN2467:  preds = [COND2461]
          real _t2466#2 = VIndex<3,2>(pos2104);
          bool _t2468#1 = EQ<real>(_t2466,_t2466);
          bool _t2464#1 = BNot(_t2468);
          goto JOIN2465
        ASSIGN246B:  preds = [COND1FD8]
          bool _t2020#1 = false;
          goto JOIN2021
        ASSIGN246D:  preds = [COND1FD0]
          real _t246C#2 = VIndex<3,1>(pos1F7D);
          bool _t246E#1 = EQ<real>(_t246C,_t246C);
          bool _t2470#1 = BNot(_t246E);
          if _t2470 then goto ASSIGN2474 else goto ASSIGN2478
        ASSIGN2474:  preds = [COND2472]
          bool _t2473#1 = true;
          goto JOIN2476
        JOIN2476:  preds = [ASSIGN2474,ASSIGN247B]
          bool _t1FD4#1 = phi(_t2473,_t2475)
          goto JOIN1FD5
        ASSIGN2478:  preds = [COND2472]
          real _t2477#2 = VIndex<3,2>(pos1F7D);
          bool _t2479#1 = EQ<real>(_t2477,_t2477);
          bool _t2475#1 = BNot(_t2479);
          goto JOIN2476
        ASSIGN247C:  preds = [COND1FC9]
          bool _t2023#1 = false;
          goto JOIN2024
        ASSIGN247D:  preds = [COND1FC2]
          bool _t1FC4#1 = false;
          goto JOIN1FC5
        ASSIGN247E:  preds = [COND1FBD]
          bool _t1FC7#1 = false;
          goto JOIN1FC8
        ASSIGN247F:  preds = [COND1FA5]
          bool _t1FAE#1 = false;
          goto JOIN1FAF
        ASSIGN2480:  preds = [COND1F9D]
          bool _t1FB1#1 = false;
          goto JOIN1FB2
    end update
  end particle
## initial strand creation
  COLLECTION
    ENTRY2481:  preds = []
      tensor[3][] ipos2482#1 = globals.ipos1F2E;
    FOREACH2485:  preds = [ASSIGN2483,NEXT2489]
      foreach (x2484 in ipos2482) on exit goto RETURN248A
      real _t2486#1 = 0.1e1;
      new particle(x2484,_t2486);
      goto FOREACH2485
    RETURN248A:  preds = [FOREACH2485]
      return
## global update
  ENTRY248B:  preds = []
    real rad248C#1 = globals.rad1F28;
    real eps248E#1 = globals.eps1F29;
    particle[] P2490#5 = Strands<particle,all>;
    (int res2498#1) = sum<int>(MAP sum2492 (P2490));
    (int res24A0#2) = max<int>(MAP max249A (P2490));
    (int res24A8#1) = sum<int>(MAP sum24A2 (P2490));
    (bool res24B0#2) = all(MAP all24AA (P2490));
    (real res24BE#1) = max<real>(MAP max24B2 (P2490));
    string _t24C0#1 = "One run:";
    string _t24C2#3 = " and ";
    real _t24C4#2 = RDiv(res24BE,rad248C);
    bool _t24C7#2 = LT<real>(_t24C4,eps248E);
    string _t24C9#1 = " of ";
    string _t24CB#2 = "\n";
    Print<[string,bool,string,real,string,bool,string,int,string,int,string]>(_t24C0,res24B0,_t24C2,_t24C4,_t24C2,_t24C7,_t24C2,res24A8,_t24C9,res2498,_t24CB);
    if res24B0 then goto COND24CF else goto JOIN24D5
  COND24CF:  preds = [COND24CE]
    if _t24C7 then goto ASSIGN24D1 else goto JOIN24D4
  ASSIGN24D1:  preds = [COND24CF]
    string _t24D0#1 = "CONVERGED!\n";
    Print<[string]>(_t24D0);
    StabilizeAll;
    goto JOIN24D4
  JOIN24D4:  preds = [MASSIGN24D3,COND24CF]
    goto JOIN24D5
  JOIN24D5:  preds = [JOIN24D4,COND24CE]
    int _t24D6#1 = 2000;
    bool _t24D8#1 = GT<int>(res24A0,_t24D6);
    if _t24D8 then goto MASSIGN24DB else goto JOIN24DC
  MASSIGN24DB:  preds = [COND24DA]
    StabilizeAll;
    goto JOIN24DC
  JOIN24DC:  preds = [MASSIGN24DB,COND24DA]
    string _t24DD#1 = "Current steps:";
    Print<[string,int,string]>(_t24DD,res24A0,_t24CB);
    continue
#### end program ####
##### low-ir: after flatten ####
## properties
  GlobalInit StabilizeAll GlobalReduce StrandSets GlobalUpdate NewStrands StrandCommunication StrandsMayDie HasInputs HasGlobals ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
## globals
  input meshData1F25 (meshData) = <no-default>
  input 0space04FA_intermedateGlobal1F26 (space) = <no-default>
  input 0data04FC_intermedateGlobal1F27 (data) = <no-default>
  input rad1F28 (rad) = <default>
  input eps1F29 (eps) = <default>
  input v01F2A (v0) = <default>
  input fBias1F2B (fBias) = <default>
  input fStren1F2C (fStren) = <default>
  input zfuz1F2D (zfuz) = <default>
  input ipos1F2E (ipos) = <no-default>
## functions
  function tensor[3] fStep202E (tensor[3] s202F#3) {
    ENTRY2030:  preds = []
      real x2031#2 = VIndex<3,0>(s202F);
      real y2033#4 = VIndex<3,1>(s202F);
      real z2035#4 = VIndex<3,2>(s202F);
      int _t2037#2 = 2;
      real _t2039#4 = RMul(y2033,y2033);
      real _t203C#1 = RMul(z2035,_t2039);
      real _t203F#2 = 0.2e1;
      real r2042#2 = RMul(_t203F,x2031);
      real _t2041#3 = RMul(r2042,y2033);
      real _t2046#1 = RMul(_t2041,z2035);
      real _t204D#1 = RMul(x2031,_t2039);
      tensor[3] g2050#1 = <tensor[3]>[_t203C,_t2046,_t204D];
      real _t2052#2 = 0.e0;
      real r2055#1 = RMul(_t203F,y2033);
      real _t2054#2 = RMul(r2055,z2035);
      real _t205B#1 = RMul(r2042,z2035);
      tensor[3,3] hess2064#1 = <tensor[3,3]>[_t2052,_t2054,_t2039,_t2054,_t205B,_t2041,_t2039,_t2041,_t2052];
      (real[3] evals2066#1,tensor[3][3] E2067#1) = EigenVecs3x3(hess2064);
      real _t2069#1 = 0.1e1;
      real _t206B#1 = Subscript<real[3]>(evals2066,_t2037);
      tensor[3] _t206D#4 = Subscript<tensor[3][3]>(E2067,_t2037);
      real op1_e3_l_5206F#1 = RDiv(_t2069,_t206B);
      real op1_e3_l_62072#3 = RNeg(op1_e3_l_5206F);
      real op1_e3_l_72075#3 = VDot<3>(_t206D,g2050);
      real r2079#1 = TensorIndex<tensor[3],[0]>(_t206D);
      real r207A#1 = RMul(op1_e3_l_62072,r2079);
      real r207B#1 = RMul(r207A,op1_e3_l_72075);
      real r207C#1 = TensorIndex<tensor[3],[1]>(_t206D);
      real r207D#1 = RMul(op1_e3_l_62072,r207C);
      real r207E#1 = RMul(r207D,op1_e3_l_72075);
      real r207F#1 = TensorIndex<tensor[3],[2]>(_t206D);
      real r2080#1 = RMul(op1_e3_l_62072,r207F);
      real r2081#1 = RMul(r2080,op1_e3_l_72075);
      tensor[3] up2078#4 = <tensor[3]>[r207B,r207E,r2081];
      real _t208D#2 = VIndex<3,0>(up2078);
      bool _t208F#1 = EQ<real>(_t208D,_t208D);
      bool _t2091#1 = BNot(_t208F);
      if _t2091 then goto ASSIGN2095 else goto ASSIGN20A2
    ASSIGN2095:  preds = [COND2093]
      bool _t2094#1 = true;
      goto JOIN2098
    JOIN2098:  preds = [ASSIGN2095,JOIN20AB]
      bool _t2096#1 = phi(_t2094,_t2097)
      if _t2096 then goto ASSIGN209B else goto JOIN209F
    ASSIGN209B:  preds = [COND2099]
      real _t209A#3 = +inf;
      tensor[3] _t209C#1 = <tensor[3]>[_t209A,_t209A,_t209A];
      return _t209C
      goto JOIN209F
    JOIN209F:  preds = [*RETURN(_t209C)209E,COND2099]
      return up2078
    ASSIGN20A2:  preds = [COND2093]
      real _t20A1#2 = VIndex<3,1>(up2078);
      bool _t20A3#1 = EQ<real>(_t20A1,_t20A1);
      bool _t20A5#1 = BNot(_t20A3);
      if _t20A5 then goto ASSIGN20A9 else goto ASSIGN20AD
    ASSIGN20A9:  preds = [COND20A7]
      bool _t20A8#1 = true;
      goto JOIN20AB
    JOIN20AB:  preds = [ASSIGN20A9,ASSIGN20B0]
      bool _t2097#1 = phi(_t20A8,_t20AA)
      goto JOIN2098
    ASSIGN20AD:  preds = [COND20A7]
      real _t20AC#2 = VIndex<3,2>(up2078);
      bool _t20AE#1 = EQ<real>(_t20AC,_t20AC);
      bool _t20AA#1 = BNot(_t20AE);
      goto JOIN20AB
}
  function tensor[3,3] fPerp221E (tensor[3] s221F#3) {
    ENTRY2220:  preds = []
      real x2221#1 = VIndex<3,0>(s221F);
      real y2223#4 = VIndex<3,1>(s221F);
      real z2225#2 = VIndex<3,2>(s221F);
      int _t2227#1 = 2;
      real _t2229#2 = RMul(y2223,y2223);
      real _t222C#2 = 0.2e1;
      real r222F#2 = RMul(_t222C,x2221);
      real _t222E#2 = RMul(r222F,y2223);
      real _t2233#17 = 0.e0;
      real r2236#1 = RMul(_t222C,y2223);
      real _t2235#2 = RMul(r2236,z2225);
      real _t223C#1 = RMul(r222F,z2225);
      tensor[3,3] hess2245#1 = <tensor[3,3]>[_t2233,_t2235,_t2229,_t2235,_t223C,_t222E,_t2229,_t222E,_t2233];
      (real[3] evals2247#0,tensor[3][3] _t2248#1) = EigenVecs3x3(hess2245);
      tensor[3] E2224A#6 = Subscript<tensor[3][3]>(_t2248,_t2227);
      real r224D#1 = TensorIndex<tensor[3],[0]>(E2224A);
      tensor[3] binopV224E#3 = VScale<3>(r224D,E2224A);
      real r224F#1 = TensorIndex<tensor[3],[1]>(E2224A);
      tensor[3] binopV2250#3 = VScale<3>(r224F,E2224A);
      real r2251#1 = TensorIndex<tensor[3],[2]>(E2224A);
      tensor[3] binopV2252#3 = VScale<3>(r2251,E2224A);
      real realLit225C#3 = 0.1e1;
      real r225D#1 = VIndex<3,0>(binopV224E);
      real r225E#2 = RSub(realLit225C,r225D);
      real r2260#1 = VIndex<3,1>(binopV224E);
      real r2261#2 = RSub(_t2233,r2260);
      real r2262#1 = VIndex<3,2>(binopV224E);
      real r2263#2 = RSub(_t2233,r2262);
      tensor[3] tensor2264#2 = <tensor[3]>[r225E,r2261,r2263];
      real r2265#1 = VIndex<3,0>(binopV2250);
      real r2266#2 = RSub(_t2233,r2265);
      real r2267#1 = VIndex<3,1>(binopV2250);
      real r2268#2 = RSub(realLit225C,r2267);
      real r2269#1 = VIndex<3,2>(binopV2250);
      real r226A#2 = RSub(_t2233,r2269);
      tensor[3] tensor226B#2 = <tensor[3]>[r2266,r2268,r226A];
      real r226C#1 = VIndex<3,0>(binopV2252);
      real r226D#2 = RSub(_t2233,r226C);
      real r226E#1 = VIndex<3,1>(binopV2252);
      real r226F#2 = RSub(_t2233,r226E);
      real r2270#1 = VIndex<3,2>(binopV2252);
      real r2271#2 = RSub(realLit225C,r2270);
      tensor[3] tensor2272#2 = <tensor[3]>[r226D,r226F,r2271];
      tensor[3,3] m225B#1 = <tensor[3,3]>[r225E,r2261,r2263,r2266,r2268,r226A,r226D,r226F,r2271];
      real vdot228E#1 = VDot<3>(tensor2264,tensor2264);
      real vdot2290#1 = VDot<3>(tensor226B,tensor226B);
      real r2291#1 = RAdd(vdot228E,vdot2290);
      real vdot2293#1 = VDot<3>(tensor2272,tensor2272);
      real t228C#2 = RAdd(r2291,vdot2293);
      bool _t229D#1 = EQ<real>(t228C,t228C);
      bool _t229F#1 = BNot(_t229D);
      if _t229F then goto ASSIGN2518 else goto JOIN22AA
    ASSIGN2518:  preds = [COND22A1]
      tensor[3,3] _t22A2#1 = <tensor[3,3]>[_t2233,_t2233,_t2233,_t2233,_t2233,_t2233,_t2233,_t2233,_t2233];
      return _t22A2
      goto JOIN22AA
    JOIN22AA:  preds = [*RETURN(_t22A2)22A9,COND22A1]
      return m225B
}
  function int sum2492 (particle P2493#1) {
    ENTRY2494:  preds = []
      int _t2495#1 = P2493.test;
      return _t2495
}
  function int max249A (particle P249B#1) {
    ENTRY249C:  preds = []
      int _t249D#1 = P249B.steps;
      return _t249D
}
  function int sum24A2 (particle P24A3#1) {
    ENTRY24A4:  preds = []
      int _t24A5#1 = P24A3.testp;
      return _t24A5
}
  function bool all24AA (particle P24AB#1) {
    ENTRY24AC:  preds = []
      bool _t24AD#1 = P24AB.found;
      return _t24AD
}
  function real max24B2 (particle P24B3#1) {
    ENTRY24B4:  preds = []
      tensor[3] _t24B5#2 = P24B3.step;
      real op1_e3_l_124B7#1 = VDot<3>(_t24B5,_t24B5);
      real _t24BA#1 = Sqrt(op1_e3_l_124B7);
      return _t24BA
}
## input initialization
  ENTRY1F2F:  preds = []
    real rad1F30#5 = 0.1e-1;
    globals.rad1F28 = rad1F30;
    globals.eps1F29 = rad1F30;
    real v01F34#1 = 0.625e-1;
    globals.v01F2A = v01F34;
    globals.fBias1F2B = rad1F30;
    globals.fStren1F2C = rad1F30;
    globals.zfuz1F2D = rad1F30;
    return
## global-variable initialization
  ENTRY1F3B:  preds = []
    femData:Mesh meshData1F3C#2 = globals.meshData1F25;
    int _t1F3E#1 = 0;
    int _t1F40#1 = 1;
    int _t1F42#1 = ExtractFemItem<int,NumCell(Mesh)>(meshData1F3C);
    int _t1F44#1 = ISub(_t1F42,_t1F40);
    int[] _t1F46#1 = Range(_t1F3E,_t1F44);
    femData:MeshCell[] _t1F48#1 = <femData:MeshCell[]>{};
  FOREACH1F4B:  preds = [ASSIGN1F49,NEXT1F51]
    foreach (_t1F4A in _t1F46) on exit goto RETURN1F52
      femData:MeshCell[] _t1F4F#1 = phi(_t1F48,_t1F4E)
    femData:MeshCell _t1F4C#1 = LoadFem<femData:MeshCell>(meshData1F3C,_t1F4A);
    femData:MeshCell[] _t1F4E#1 = Append<femData:MeshCell>(_t1F4F,_t1F4C);
    goto FOREACH1F4B
  RETURN1F52:  preds = [FOREACH1F4B]
    return
## strand
  strand particle (tensor[3] pos01F53#2, real hh01F54#1) in 3D
    state:
      output tensor[3] pos;
      output tensor[3] _pos;
      real hh;
      tensor[3] step;
      bool found;
      int nfs;
      int test;
      int testp;
      int steps;
    state init
      ENTRY1F5E:  preds = []
        real realLit1F60#3 = 0.e0;
        tensor[3] step1F5F#1 = <tensor[3]>[realLit1F60,realLit1F60,realLit1F60];
        bool found1F64#1 = false;
        int nfs1F66#3 = 0;
        int test1F68#1 = 1;
        self.pos = pos01F53;
        self._pos = pos01F53;
        self.hh = hh01F54;
        self.step = step1F5F;
        self.found = found1F64;
        self.nfs = nfs1F66;
        self.test = test1F68;
        self.testp = nfs1F66;
        self.steps = nfs1F66;
        return
    end state init
    method update
        ENTRY1F74:  preds = []
          real rad1F75#10 = globals.rad1F28;
          real eps1F77#1 = globals.eps1F29;
          real fBias1F79#3 = globals.fBias1F2B;
          real fStren1F7B#3 = globals.fStren1F2C;
          tensor[3] pos1F7D#10 = self.pos;
          real hh1F7F#7 = self.hh;
          bool found1F81#3 = self.found;
          int nfs1F83#3 = self.nfs;
          int testp1F85#2 = self.testp;
          int steps1F87#1 = self.steps;
          int _t1F89#4 = 1;
          int steps1F8B#4 = IAdd(steps1F87,_t1F89);
          real _t1F8D#13 = 0.e0;
          tensor[3] _t1F8F#7 = <tensor[3]>[_t1F8D,_t1F8D,_t1F8D];
          tensor[3] mid1F91#5 = VSub<3>(pos1F7D,_t1F8F);
          real _t1F94#1 = VIndex<3,0>(mid1F91);
          real _t1F96#1 = Abs<real>(_t1F94);
          real _t1F99#9 = 0.1e0;
          bool _t1F9B#1 = GT<real>(_t1F96,_t1F99);
          if _t1F9B then goto ASSIGN1F9F else goto ASSIGN2480
        ASSIGN1F9F:  preds = [COND1F9D]
          real _t1F9E#1 = VIndex<3,1>(mid1F91);
          real _t1FA0#1 = Abs<real>(_t1F9E);
          bool _t1FA3#1 = GT<real>(_t1FA0,_t1F99);
          if _t1FA3 then goto ASSIGN1FA7 else goto ASSIGN247F
        ASSIGN1FA7:  preds = [COND1FA5]
          real _t1FA6#1 = VIndex<3,2>(mid1F91);
          real _t1FA8#1 = Abs<real>(_t1FA6);
          bool _t1FAB#1 = GT<real>(_t1FA8,_t1F99);
          goto JOIN1FAF
        JOIN1FAF:  preds = [ASSIGN1FAC,ASSIGN247F]
          bool _t1FAD#1 = phi(_t1FAB,_t1FAE)
          goto JOIN1FB2
        JOIN1FB2:  preds = [JOIN1FAF,ASSIGN2480]
          bool _t1FB0#1 = phi(_t1FAD,_t1FB1)
          real op1_e3_l_41FB3#1 = VDot<3>(mid1F91,mid1F91);
          real _t1FB6#2 = Sqrt(op1_e3_l_41FB3);
          real _t1FB9#3 = 0.5e1;
          bool _t1FBB#1 = LT<real>(_t1FB6,_t1FB9);
          if _t1FBB then goto ASSIGN1FBF else goto ASSIGN247E
        ASSIGN1FBF:  preds = [COND1FBD]
          real _t1FBE#1 = 0.2e1;
          bool _t1FC0#1 = GT<real>(_t1FB6,_t1FBE);
          if _t1FC0 then goto JOIN1FC5 else goto ASSIGN247D
        JOIN1FC5:  preds = [COND1FC2,ASSIGN247D]
          bool _t1FC3#1 = phi(_t1FB0,_t1FC4)
          goto JOIN1FC8
        JOIN1FC8:  preds = [JOIN1FC5,ASSIGN247E]
          bool _t1FC6#1 = phi(_t1FC3,_t1FC7)
          if _t1FC6 then goto ASSIGN1FCB else goto ASSIGN247C
        ASSIGN1FCB:  preds = [COND1FC9]
          real _t1FCA#4 = VIndex<3,0>(pos1F7D);
          bool _t1FCC#1 = EQ<real>(_t1FCA,_t1FCA);
          bool _t1FCE#1 = BNot(_t1FCC);
          if _t1FCE then goto ASSIGN1FD2 else goto ASSIGN246D
        ASSIGN1FD2:  preds = [COND1FD0]
          bool _t1FD1#1 = true;
          goto JOIN1FD5
        JOIN1FD5:  preds = [ASSIGN1FD2,JOIN2476]
          bool _t1FD3#1 = phi(_t1FD1,_t1FD4)
          bool _t1FD6#1 = BNot(_t1FD3);
          if _t1FD6 then goto ASSIGN1FDA else goto ASSIGN246B
        ASSIGN1FDA:  preds = [COND1FD8]
          real y1FD9#4 = VIndex<3,1>(pos1F7D);
          real z1FDB#4 = VIndex<3,2>(pos1F7D);
          int _t1FDD#1 = 2;
          real _t1FDF#4 = RMul(y1FD9,y1FD9);
          real _t1FE2#1 = RMul(z1FDB,_t1FDF);
          real _t1FE5#2 = 0.2e1;
          real r1FE8#2 = RMul(_t1FE5,_t1FCA);
          real _t1FE7#3 = RMul(r1FE8,y1FD9);
          real _t1FEC#1 = RMul(_t1FE7,z1FDB);
          real _t1FF3#1 = RMul(_t1FCA,_t1FDF);
          tensor[3] g1FF6#2 = <tensor[3]>[_t1FE2,_t1FEC,_t1FF3];
          real r1FF9#1 = RMul(_t1FE5,y1FD9);
          real _t1FF8#2 = RMul(r1FF9,z1FDB);
          real _t1FFF#1 = RMul(r1FE8,z1FDB);
          tensor[3,3] hess2008#1 = <tensor[3,3]>[_t1F8D,_t1FF8,_t1FDF,_t1FF8,_t1FFF,_t1FE7,_t1FDF,_t1FE7,_t1F8D];
          real[3] _t200A#1 = EigenVals3x3(hess2008);
          real _t200C#1 = Subscript<real[3]>(_t200A,_t1FDD);
          real op1_e3_l_3200E#1 = VDot<3>(g1FF6,g1FF6);
          real op1_e3_l_42011#1 = Sqrt(op1_e3_l_3200E);
          real op1_e3_l_52014#1 = RNeg(_t200C);
          real op1_e3_l_62017#1 = RAdd(fBias1F79,op1_e3_l_42011);
          real str201A#1 = RDiv(op1_e3_l_52014,op1_e3_l_62017);
          bool _t201D#1 = GTE<real>(str201A,fStren1F7B);
          goto JOIN2021
        JOIN2021:  preds = [ASSIGN201E,ASSIGN246B]
          bool _t201F#1 = phi(_t201D,_t2020)
          goto JOIN2024
        JOIN2024:  preds = [JOIN2021,ASSIGN247C]
          bool _t2022#1 = phi(_t201F,_t2023)
          bool _t2025#1 = BNot(_t2022);
          if _t2025 then goto DIE2028 else goto JOIN2029
        DIE2028:  preds = [COND2027]
          die
          goto JOIN2029
        JOIN2029:  preds = [*DIE2028,COND2027]
          bool _t202A#1 = BNot(found1F81);
          if _t202A then goto ASSIGN20B1 else goto ASSIGN2103
        ASSIGN20B1:  preds = [COND202C]
          tensor[3] step202D#4 = fStep202E (pos1F7D);
          tensor[3] pos20B2#4 = VAdd<3>(pos1F7D,step202D);
          real _t20B5#2 = VIndex<3,0>(pos20B2);
          bool _t20B7#1 = EQ<real>(_t20B5,_t20B5);
          bool _t20B9#1 = BNot(_t20B7);
          if _t20B9 then goto ASSIGN20BD else goto ASSIGN20F3
        ASSIGN20BD:  preds = [COND20BB]
          bool _t20BC#1 = true;
          goto JOIN20C0
        JOIN20C0:  preds = [ASSIGN20BD,JOIN20FC]
          bool _t20BE#1 = phi(_t20BC,_t20BF)
          if _t20BE then goto DIE20C2 else goto JOIN20C3
        DIE20C2:  preds = [COND20C1]
          die
          goto JOIN20C3
        JOIN20C3:  preds = [*DIE20C2,COND20C1]
          real op1_e3_l_220C4#1 = VDot<3>(step202D,step202D);
          real op1_e3_l_320C7#1 = Sqrt(op1_e3_l_220C4);
          real _t20CA#1 = RDiv(op1_e3_l_320C7,rad1F75);
          bool _t20CD#1 = GT<real>(_t20CA,eps1F77);
          if _t20CD then goto ASSIGN20D1 else goto ASSIGN20F1
        ASSIGN20D1:  preds = [COND20CF]
          int nfs20D0#2 = IAdd(nfs1F83,_t1F89);
          int _t20D2#1 = 10;
          bool _t20D4#1 = GT<int>(nfs20D0,_t20D2);
          if _t20D4 then goto DIE20D7 else goto JOIN20D8
        DIE20D7:  preds = [COND20D6]
          die
          goto JOIN20D8
        JOIN20D8:  preds = [*DIE20D7,COND20D6]
          goto JOIN20DD
        JOIN20DD:  preds = [JOIN20D8,ASSIGN20F1]
          int testp20D9#1 = phi(testp1F85,_t1F89)
          int nfs20DA#1 = phi(nfs20D0,nfs1F83)
          bool found20DB#1 = phi(found1F81,found20DC)
          goto JOIN20E7
        JOIN20E7:  preds = [JOIN20DD,JOIN241E]
          int testp20DE#1 = phi(testp20D9,testp1F85)
          int nfs20DF#1 = phi(nfs20DA,nfs1F83)
          bool found20E0#1 = phi(found20DB,found1F81)
          tensor[3] step20E1#1 = phi(step202D,up20E2)
          real hh20E3#1 = phi(hh1F7F,hh20E4)
          tensor[3] pos20E5#2 = phi(pos20B2,pos20E6)
          self.pos = pos20E5;
          self._pos = pos20E5;
          self.hh = hh20E3;
          self.step = step20E1;
          self.found = found20E0;
          self.nfs = nfs20DF;
          self.testp = testp20DE;
          self.steps = steps1F8B;
          active
        ASSIGN20F1:  preds = [COND20CF]
          bool found20DC#1 = true;
          goto JOIN20DD
        ASSIGN20F3:  preds = [COND20BB]
          real _t20F2#2 = VIndex<3,1>(pos20B2);
          bool _t20F4#1 = EQ<real>(_t20F2,_t20F2);
          bool _t20F6#1 = BNot(_t20F4);
          if _t20F6 then goto ASSIGN20FA else goto ASSIGN20FE
        ASSIGN20FA:  preds = [COND20F8]
          bool _t20F9#1 = true;
          goto JOIN20FC
        JOIN20FC:  preds = [ASSIGN20FA,ASSIGN2101]
          bool _t20BF#1 = phi(_t20F9,_t20FB)
          goto JOIN20C0
        ASSIGN20FE:  preds = [COND20F8]
          real _t20FD#2 = VIndex<3,2>(pos20B2);
          bool _t20FF#1 = EQ<real>(_t20FD,_t20FD);
          bool _t20FB#1 = BNot(_t20FF);
          goto JOIN20FC
        ASSIGN2103:  preds = [COND202C]
          tensor[3] _t2102#1 = fStep202E (pos1F7D);
          tensor[3] pos2104#16 = VAdd<3>(pos1F7D,_t2102);
          real _t2107#2 = VIndex<3,0>(pos2104);
          bool _t2109#1 = EQ<real>(_t2107,_t2107);
          bool _t210B#1 = BNot(_t2109);
          if _t210B then goto ASSIGN210F else goto ASSIGN245C
        ASSIGN210F:  preds = [COND210D]
          bool _t210E#1 = true;
          goto JOIN2112
        JOIN2112:  preds = [ASSIGN210F,JOIN2465]
          bool _t2110#1 = phi(_t210E,_t2111)
          if _t2110 then goto DIE2114 else goto JOIN2115
        DIE2114:  preds = [COND2113]
          die
          goto JOIN2115
        JOIN2115:  preds = [*DIE2114,COND2113]
          int nn211B#2 = 0;
          particle[] _t211D#1 = SphereQuery<3,particle>(pos2104,rad1F75);
        FOREACH2120:  preds = [ASSIGN211E,NEXT2174]
          foreach (P211F in _t211D) on exit goto ASSIGN2176
            int nn2172#3 = phi(nn211B,nn2171)
            tensor[3] force216E#4 = phi(_t1F8F,force216D)
            real oldE213A#2 = phi(_t1F8D,oldE2139)
          tensor[3] _t2121#1 = P211F.pos;
          real _t2123#3 = 0.1e1;
          tensor[3] op1_e3_l_82125#5 = VSub<3>(_t2121,pos2104);
          real op1_e3_l_102128#1 = VDot<3>(op1_e3_l_82125,op1_e3_l_82125);
          real op1_e3_l_11212B#2 = Sqrt(op1_e3_l_102128);
          real op1_e3_l_12212E#1 = RDiv(op1_e3_l_11212B,rad1F75);
          real op1_e3_l_132131#3 = RSub(_t2123,op1_e3_l_12212E);
          real _Pow_22135#3 = RMul(op1_e3_l_132131,op1_e3_l_132131);
          real op1_e3_l_142134#1 = RMul(_Pow_22135,_Pow_22135);
          real oldE2139#1 = RAdd(oldE213A,op1_e3_l_142134);
          real _t213D#1 = -0.4e1;
          real op1_e3_l_24213F#1 = RMul(op1_e3_l_132131,_Pow_22135);
          real op1_e3_l_252144#1 = RDiv(_t2123,rad1F75);
          real r2148#1 = TensorIndex<tensor[3],[0]>(op1_e3_l_82125);
          real r2149#1 = RMul(_t213D,op1_e3_l_24213F);
          real r214A#3 = RMul(r2149,op1_e3_l_252144);
          real r214B#1 = RMul(r214A,r2148);
          real r214C#1 = TensorIndex<tensor[3],[1]>(op1_e3_l_82125);
          real r214D#1 = RMul(r214A,r214C);
          real r214E#1 = TensorIndex<tensor[3],[2]>(op1_e3_l_82125);
          real r214F#1 = RMul(r214A,r214E);
          real r215C#3 = RDiv(_t2123,op1_e3_l_11212B);
          real r215E#1 = RMul(r215C,r214B);
          real r2160#1 = RMul(r215C,r214D);
          real r2162#1 = RMul(r215C,r214F);
          tensor[3] op1_e3_l_34215A#1 = <tensor[3]>[r215E,r2160,r2162];
          tensor[3] force216D#1 = VAdd<3>(force216E,op1_e3_l_34215A);
          int nn2171#1 = IAdd(nn2172,_t1F89);
          goto FOREACH2120
        ASSIGN2176:  preds = [FOREACH2120]
          bool _t2175#1 = EQ<int>(nn211B,nn2172);
          if _t2175 then goto ASSIGN2179 else goto JOIN221C
        ASSIGN2179:  preds = [COND2177]
          real _t2178#1 = 0.5e0;
          real _t217A#1 = RMul(_t2178,rad1F75);
          tensor[3] _t217D#1 = <tensor[3]>[_t217A,_t1F8D,_t1F8D];
          tensor[3] npos217F#7 = VAdd<3>(pos2104,_t217D);
          tensor[3] mid2184#5 = VSub<3>(npos217F,_t1F8F);
          real _t2187#1 = VIndex<3,0>(mid2184);
          real _t2189#1 = Abs<real>(_t2187);
          bool _t218C#1 = GT<real>(_t2189,_t1F99);
          if _t218C then goto ASSIGN2190 else goto ASSIGN245A
        ASSIGN2190:  preds = [COND218E]
          real _t218F#1 = VIndex<3,1>(mid2184);
          real _t2191#1 = Abs<real>(_t218F);
          bool _t2194#1 = GT<real>(_t2191,_t1F99);
          if _t2194 then goto ASSIGN2198 else goto ASSIGN2459
        ASSIGN2198:  preds = [COND2196]
          real _t2197#1 = VIndex<3,2>(mid2184);
          real _t2199#1 = Abs<real>(_t2197);
          bool _t219C#1 = GT<real>(_t2199,_t1F99);
          goto JOIN21A0
        JOIN21A0:  preds = [ASSIGN219D,ASSIGN2459]
          bool _t219E#1 = phi(_t219C,_t219F)
          goto JOIN21A3
        JOIN21A3:  preds = [JOIN21A0,ASSIGN245A]
          bool _t21A1#1 = phi(_t219E,_t21A2)
          real op1_e3_l_821A4#1 = VDot<3>(mid2184,mid2184);
          real _t21A7#2 = Sqrt(op1_e3_l_821A4);
          bool _t21AA#1 = LT<real>(_t21A7,_t1FB9);
          if _t21AA then goto ASSIGN21AE else goto ASSIGN2458
        ASSIGN21AE:  preds = [COND21AC]
          real _t21AD#1 = 0.2e1;
          bool _t21AF#1 = GT<real>(_t21A7,_t21AD);
          if _t21AF then goto JOIN21B4 else goto ASSIGN2457
        JOIN21B4:  preds = [COND21B1,ASSIGN2457]
          bool _t21B2#1 = phi(_t21A1,_t21B3)
          goto JOIN21B7
        JOIN21B7:  preds = [JOIN21B4,ASSIGN2458]
          bool _t21B5#1 = phi(_t21B2,_t21B6)
          if _t21B5 then goto ASSIGN21BA else goto ASSIGN2456
        ASSIGN21BA:  preds = [COND21B8]
          real _t21B9#4 = VIndex<3,0>(npos217F);
          bool _t21BB#1 = EQ<real>(_t21B9,_t21B9);
          bool _t21BD#1 = BNot(_t21BB);
          if _t21BD then goto ASSIGN21C1 else goto ASSIGN2447
        ASSIGN21C1:  preds = [COND21BF]
          bool _t21C0#1 = true;
          goto JOIN21C4
        JOIN21C4:  preds = [ASSIGN21C1,JOIN2450]
          bool _t21C2#1 = phi(_t21C0,_t21C3)
          bool _t21C5#1 = BNot(_t21C2);
          if _t21C5 then goto ASSIGN21C9 else goto ASSIGN2445
        ASSIGN21C9:  preds = [COND21C7]
          real y21C8#4 = VIndex<3,1>(npos217F);
          real z21CA#4 = VIndex<3,2>(npos217F);
          int _t21CC#1 = 2;
          real _t21CE#4 = RMul(y21C8,y21C8);
          real _t21D1#1 = RMul(z21CA,_t21CE);
          real _t21D4#2 = 0.2e1;
          real r21D7#2 = RMul(_t21D4,_t21B9);
          real _t21D6#3 = RMul(r21D7,y21C8);
          real _t21DB#1 = RMul(_t21D6,z21CA);
          real _t21E2#1 = RMul(_t21B9,_t21CE);
          tensor[3] g21E5#2 = <tensor[3]>[_t21D1,_t21DB,_t21E2];
          real r21E8#1 = RMul(_t21D4,y21C8);
          real _t21E7#2 = RMul(r21E8,z21CA);
          real _t21EE#1 = RMul(r21D7,z21CA);
          tensor[3,3] hess21F7#1 = <tensor[3,3]>[_t1F8D,_t21E7,_t21CE,_t21E7,_t21EE,_t21D6,_t21CE,_t21D6,_t1F8D];
          real[3] _t21F9#1 = EigenVals3x3(hess21F7);
          real _t21FB#1 = Subscript<real[3]>(_t21F9,_t21CC);
          real op1_e3_l_321FD#1 = VDot<3>(g21E5,g21E5);
          real op1_e3_l_42200#1 = Sqrt(op1_e3_l_321FD);
          real op1_e3_l_52203#1 = RNeg(_t21FB);
          real op1_e3_l_62206#1 = RAdd(fBias1F79,op1_e3_l_42200);
          real str2209#1 = RDiv(op1_e3_l_52203,op1_e3_l_62206);
          bool _t220C#1 = GTE<real>(str2209,fStren1F7B);
          goto JOIN2210
        JOIN2210:  preds = [ASSIGN220D,ASSIGN2445]
          bool _t220E#1 = phi(_t220C,_t220F)
          goto JOIN2213
        JOIN2213:  preds = [JOIN2210,ASSIGN2456]
          bool _t2211#1 = phi(_t220E,_t2212)
          if _t2211 then goto NEW2215 else goto JOIN2216
        NEW2215:  preds = [COND2214]
          new particle(npos217F,hh1F7F);
          goto JOIN2216
        JOIN2216:  preds = [NEW2215,COND2214]
          self.pos = pos2104;
          self._pos = pos2104;
          self.step = _t1F8F;
          self.steps = steps1F8B;
          active
          goto JOIN221C
        JOIN221C:  preds = [*ACTIVE221B,COND2177]
          tensor[3,3] _t221D#3 = fPerp221E (pos2104);
          tensor[3] projParam22AE#1 = ProjectLast<tensor[3,3],[0]>(_t221D);
          real vdot22AF#2 = VDot<3>(projParam22AE,force216E);
          tensor[3] projParam22B0#1 = ProjectLast<tensor[3,3],[1]>(_t221D);
          real vdot22B1#2 = VDot<3>(projParam22B0,force216E);
          tensor[3] projParam22B2#1 = ProjectLast<tensor[3,3],[2]>(_t221D);
          real vdot22B3#2 = VDot<3>(projParam22B2,force216E);
          tensor[3] op1_e3_l_322AD#4 = <tensor[3]>[vdot22AF,vdot22B1,vdot22B3];
          tensor[3] es22BC#1 = VScale<3>(hh1F7F,op1_e3_l_322AD);
          real op1_e3_l_522BF#1 = VDot<3>(op1_e3_l_322AD,op1_e3_l_322AD);
          real r22C3#1 = RMul(hh1F7F,hh1F7F);
          real op1_e3_l_622C2#1 = RMul(r22C3,op1_e3_l_522BF);
          real _t22C7#2 = Sqrt(op1_e3_l_622C2);
          bool _t22CA#1 = GT<real>(_t22C7,rad1F75);
          if _t22CA then goto ASSIGN22CF else goto JOIN22E6
        ASSIGN22CF:  preds = [COND22CC]
          real op1_e3_l_1022CD#1 = RDiv(rad1F75,_t22C7);
          real hh22D0#4 = RMul(hh1F7F,op1_e3_l_1022CD);
          real r22D6#1 = RMul(hh22D0,vdot22AF);
          real r22D8#1 = RMul(hh22D0,vdot22B1);
          real r22DA#1 = RMul(hh22D0,vdot22B3);
          tensor[3] es22D3#1 = <tensor[3]>[r22D6,r22D8,r22DA];
          goto JOIN22E6
        JOIN22E6:  preds = [ASSIGN22E3,COND22CC]
          tensor[3] es22E4#8 = phi(es22D3,es22BC)
          real hh22E5#2 = phi(hh22D0,hh1F7F)
          tensor[3] samplePos22E7#1 = VAdd<3>(pos2104,es22E4);
          tensor[3] fs22EC#4 = fStep202E (samplePos22E7);
          real op1_e3_l_222EE#1 = VDot<3>(fs22EC,fs22EC);
          real op1_e3_l_322F1#1 = VDot<3>(es22E4,es22E4);
          real op1_e3_l_422F4#1 = Sqrt(op1_e3_l_222EE);
          real op1_e3_l_522F7#2 = Sqrt(op1_e3_l_322F1);
          real _t22FA#1 = RDiv(op1_e3_l_422F4,op1_e3_l_522F7);
          real _t22FD#5 = 0.5e0;
          bool _t22FF#1 = GT<real>(_t22FA,_t22FD);
          if _t22FF then goto ASSIGN2304 else goto JOIN230C
        ASSIGN2304:  preds = [COND2301]
          real hh2302#1 = RMul(hh22E5,_t22FD);
          self.pos = pos2104;
          self._pos = pos2104;
          self.hh = hh2302;
          self.step = _t1F8F;
          self.steps = steps1F8B;
          active
          goto JOIN230C
        JOIN230C:  preds = [*ACTIVE230A,COND2301]
          real hh230B#2 = phi(hh22E5)
          tensor[3] up20E2#1 = VAdd<3>(fs22EC,es22E4);
          tensor[3] v2311#1 = VAdd<3>(pos2104,fs22EC);
          tensor[3] pos230F#4 = VAdd<3>(v2311,es22E4);
          particle[] _t2316#1 = SphereQuery<3,particle>(pos230F,rad1F75);
        FOREACH2319:  preds = [ASSIGN2317,NEXT2336]
          foreach (P2318 in _t2316) on exit goto ASSIGN2339
            real accum2333#2 = phi(_t1F8D,accum2332)
          tensor[3] _t231A#1 = P2318.pos;
          real _t231C#1 = 0.1e1;
          tensor[3] op1_e3_l_10231E#2 = VSub<3>(pos230F,_t231A);
          real op1_e3_l_122321#1 = VDot<3>(op1_e3_l_10231E,op1_e3_l_10231E);
          real op1_e3_l_132324#1 = Sqrt(op1_e3_l_122321);
          real op1_e3_l_142327#1 = RDiv(op1_e3_l_132324,rad1F75);
          real op1_e3_l_15232A#2 = RSub(_t231C,op1_e3_l_142327);
          real _Pow_2232E#2 = RMul(op1_e3_l_15232A,op1_e3_l_15232A);
          real op1_e3_l_16232D#1 = RMul(_Pow_2232E,_Pow_2232E);
          real accum2332#1 = RAdd(accum2333,op1_e3_l_16232D);
          goto FOREACH2319
        ASSIGN2339:  preds = [FOREACH2319]
          real _t2337#1 = RSub(accum2333,oldE213A);
          tensor[3] op1_e3_l_12233A#1 = VSub<3>(pos230F,pos2104);
          tensor[3] op1_e3_l_13233D#1 = VNeg<3>(op1_e3_l_322AD);
          real op1_e3_l_142340#1 = VDot<3>(op1_e3_l_12233A,op1_e3_l_13233D);
          real _t2343#1 = RMul(_t22FD,op1_e3_l_142340);
          bool _t2346#1 = GT<real>(_t2337,_t2343);
          if _t2346 then goto ASSIGN234B else goto JOIN2353
        ASSIGN234B:  preds = [COND2348]
          real hh2349#1 = RMul(hh230B,_t22FD);
          self.pos = pos2104;
          self._pos = pos2104;
          self.hh = hh2349;
          self.step = _t1F8F;
          self.steps = steps1F8B;
          active
          goto JOIN2353
        JOIN2353:  preds = [*ACTIVE2351,COND2348]
          real hh2352#1 = phi(hh230B)
          tensor[3] pos20E6#5 = phi(pos230F)
          real _t2354#1 = 0.11e1;
          real hh20E4#2 = RMul(hh2352,_t2354);
          real _t2358#2 = VIndex<3,0>(pos20E6);
          bool _t235A#1 = EQ<real>(_t2358,_t2358);
          bool _t235C#1 = BNot(_t235A);
          if _t235C then goto ASSIGN2360 else goto ASSIGN2436
        ASSIGN2360:  preds = [COND235E]
          bool _t235F#1 = true;
          goto JOIN2363
        JOIN2363:  preds = [ASSIGN2360,JOIN243F]
          bool _t2361#1 = phi(_t235F,_t2362)
          if _t2361 then goto DIE2365 else goto JOIN2366
        DIE2365:  preds = [COND2364]
          die
          goto JOIN2366
        JOIN2366:  preds = [*DIE2365,COND2364]
          int _t2367#1 = 5;
          bool _t2369#1 = LT<int>(nn2172,_t2367);
          if _t2369 then goto ASSIGN236F else goto JOIN241E
        ASSIGN236F:  preds = [COND236B]
          real realLit236D#1 = 0.1e1;
          real op1_e3_l_7236C#3 = RDiv(realLit236D,op1_e3_l_522F7);
          real r2372#1 = TensorIndex<tensor[3],[0]>(es22E4);
          real r2373#3 = RMul(_t22FD,rad1F75);
          real r2374#1 = RMul(r2373,r2372);
          real r2375#1 = RMul(r2374,op1_e3_l_7236C);
          real r2376#1 = TensorIndex<tensor[3],[1]>(es22E4);
          real r2377#1 = RMul(r2373,r2376);
          real r2378#1 = RMul(r2377,op1_e3_l_7236C);
          real r2379#1 = TensorIndex<tensor[3],[2]>(es22E4);
          real r237A#1 = RMul(r2373,r2379);
          real r237B#1 = RMul(r237A,op1_e3_l_7236C);
          tensor[3] op1_e3_l_82371#1 = <tensor[3]>[r2375,r2378,r237B];
          tensor[3] npos2388#7 = VAdd<3>(pos20E6,op1_e3_l_82371);
          tensor[3] mid238B#5 = VSub<3>(npos2388,_t1F8F);
          real _t238E#1 = VIndex<3,0>(mid238B);
          real _t2390#1 = Abs<real>(_t238E);
          bool _t2393#1 = GT<real>(_t2390,_t1F99);
          if _t2393 then goto ASSIGN2397 else goto ASSIGN2434
        ASSIGN2397:  preds = [COND2395]
          real _t2396#1 = VIndex<3,1>(mid238B);
          real _t2398#1 = Abs<real>(_t2396);
          bool _t239B#1 = GT<real>(_t2398,_t1F99);
          if _t239B then goto ASSIGN239F else goto ASSIGN2433
        ASSIGN239F:  preds = [COND239D]
          real _t239E#1 = VIndex<3,2>(mid238B);
          real _t23A0#1 = Abs<real>(_t239E);
          bool _t23A3#1 = GT<real>(_t23A0,_t1F99);
          goto JOIN23A7
        JOIN23A7:  preds = [ASSIGN23A4,ASSIGN2433]
          bool _t23A5#1 = phi(_t23A3,_t23A6)
          goto JOIN23AA
        JOIN23AA:  preds = [JOIN23A7,ASSIGN2434]
          bool _t23A8#1 = phi(_t23A5,_t23A9)
          real op1_e3_l_1823AB#1 = VDot<3>(mid238B,mid238B);
          real _t23AE#2 = Sqrt(op1_e3_l_1823AB);
          bool _t23B1#1 = LT<real>(_t23AE,_t1FB9);
          if _t23B1 then goto ASSIGN23B5 else goto ASSIGN2432
        ASSIGN23B5:  preds = [COND23B3]
          real _t23B4#1 = 0.2e1;
          bool _t23B6#1 = GT<real>(_t23AE,_t23B4);
          if _t23B6 then goto JOIN23BB else goto ASSIGN2431
        JOIN23BB:  preds = [COND23B8,ASSIGN2431]
          bool _t23B9#1 = phi(_t23A8,_t23BA)
          goto JOIN23BE
        JOIN23BE:  preds = [JOIN23BB,ASSIGN2432]
          bool _t23BC#1 = phi(_t23B9,_t23BD)
          if _t23BC then goto ASSIGN23C1 else goto ASSIGN2430
        ASSIGN23C1:  preds = [COND23BF]
          real _t23C0#4 = VIndex<3,0>(npos2388);
          bool _t23C2#1 = EQ<real>(_t23C0,_t23C0);
          bool _t23C4#1 = BNot(_t23C2);
          if _t23C4 then goto ASSIGN23C8 else goto ASSIGN2421
        ASSIGN23C8:  preds = [COND23C6]
          bool _t23C7#1 = true;
          goto JOIN23CB
        JOIN23CB:  preds = [ASSIGN23C8,JOIN242A]
          bool _t23C9#1 = phi(_t23C7,_t23CA)
          bool _t23CC#1 = BNot(_t23C9);
          if _t23CC then goto ASSIGN23D0 else goto ASSIGN241F
        ASSIGN23D0:  preds = [COND23CE]
          real y23CF#4 = VIndex<3,1>(npos2388);
          real z23D1#4 = VIndex<3,2>(npos2388);
          int _t23D3#1 = 2;
          real _t23D5#4 = RMul(y23CF,y23CF);
          real _t23D8#1 = RMul(z23D1,_t23D5);
          real _t23DB#2 = 0.2e1;
          real r23DE#2 = RMul(_t23DB,_t23C0);
          real _t23DD#3 = RMul(r23DE,y23CF);
          real _t23E2#1 = RMul(_t23DD,z23D1);
          real _t23E9#1 = RMul(_t23C0,_t23D5);
          tensor[3] g23EC#2 = <tensor[3]>[_t23D8,_t23E2,_t23E9];
          real r23EF#1 = RMul(_t23DB,y23CF);
          real _t23EE#2 = RMul(r23EF,z23D1);
          real _t23F5#1 = RMul(r23DE,z23D1);
          tensor[3,3] hess23FE#1 = <tensor[3,3]>[_t1F8D,_t23EE,_t23D5,_t23EE,_t23F5,_t23DD,_t23D5,_t23DD,_t1F8D];
          real[3] _t2400#1 = EigenVals3x3(hess23FE);
          real _t2402#1 = Subscript<real[3]>(_t2400,_t23D3);
          real op1_e3_l_32404#1 = VDot<3>(g23EC,g23EC);
          real op1_e3_l_42407#1 = Sqrt(op1_e3_l_32404);
          real op1_e3_l_5240A#1 = RNeg(_t2402);
          real op1_e3_l_6240D#1 = RAdd(fBias1F79,op1_e3_l_42407);
          real str2410#1 = RDiv(op1_e3_l_5240A,op1_e3_l_6240D);
          bool _t2413#1 = GTE<real>(str2410,fStren1F7B);
          goto JOIN2417
        JOIN2417:  preds = [ASSIGN2414,ASSIGN241F]
          bool _t2415#1 = phi(_t2413,_t2416)
          goto JOIN241A
        JOIN241A:  preds = [JOIN2417,ASSIGN2430]
          bool _t2418#1 = phi(_t2415,_t2419)
          if _t2418 then goto NEW241C else goto JOIN241D
        NEW241C:  preds = [COND241B]
          new particle(npos2388,hh20E4);
          goto JOIN241D
        JOIN241D:  preds = [NEW241C,COND241B]
          goto JOIN241E
        JOIN241E:  preds = [JOIN241D,COND236B]
          goto JOIN20E7
        ASSIGN241F:  preds = [COND23CE]
          bool _t2416#1 = false;
          goto JOIN2417
        ASSIGN2421:  preds = [COND23C6]
          real _t2420#2 = VIndex<3,1>(npos2388);
          bool _t2422#1 = EQ<real>(_t2420,_t2420);
          bool _t2424#1 = BNot(_t2422);
          if _t2424 then goto ASSIGN2428 else goto ASSIGN242C
        ASSIGN2428:  preds = [COND2426]
          bool _t2427#1 = true;
          goto JOIN242A
        JOIN242A:  preds = [ASSIGN2428,ASSIGN242F]
          bool _t23CA#1 = phi(_t2427,_t2429)
          goto JOIN23CB
        ASSIGN242C:  preds = [COND2426]
          real _t242B#2 = VIndex<3,2>(npos2388);
          bool _t242D#1 = EQ<real>(_t242B,_t242B);
          bool _t2429#1 = BNot(_t242D);
          goto JOIN242A
        ASSIGN2430:  preds = [COND23BF]
          bool _t2419#1 = false;
          goto JOIN241A
        ASSIGN2431:  preds = [COND23B8]
          bool _t23BA#1 = false;
          goto JOIN23BB
        ASSIGN2432:  preds = [COND23B3]
          bool _t23BD#1 = false;
          goto JOIN23BE
        ASSIGN2433:  preds = [COND239D]
          bool _t23A6#1 = false;
          goto JOIN23A7
        ASSIGN2434:  preds = [COND2395]
          bool _t23A9#1 = false;
          goto JOIN23AA
        ASSIGN2436:  preds = [COND235E]
          real _t2435#2 = VIndex<3,1>(pos20E6);
          bool _t2437#1 = EQ<real>(_t2435,_t2435);
          bool _t2439#1 = BNot(_t2437);
          if _t2439 then goto ASSIGN243D else goto ASSIGN2441
        ASSIGN243D:  preds = [COND243B]
          bool _t243C#1 = true;
          goto JOIN243F
        JOIN243F:  preds = [ASSIGN243D,ASSIGN2444]
          bool _t2362#1 = phi(_t243C,_t243E)
          goto JOIN2363
        ASSIGN2441:  preds = [COND243B]
          real _t2440#2 = VIndex<3,2>(pos20E6);
          bool _t2442#1 = EQ<real>(_t2440,_t2440);
          bool _t243E#1 = BNot(_t2442);
          goto JOIN243F
        ASSIGN2445:  preds = [COND21C7]
          bool _t220F#1 = false;
          goto JOIN2210
        ASSIGN2447:  preds = [COND21BF]
          real _t2446#2 = VIndex<3,1>(npos217F);
          bool _t2448#1 = EQ<real>(_t2446,_t2446);
          bool _t244A#1 = BNot(_t2448);
          if _t244A then goto ASSIGN244E else goto ASSIGN2452
        ASSIGN244E:  preds = [COND244C]
          bool _t244D#1 = true;
          goto JOIN2450
        JOIN2450:  preds = [ASSIGN244E,ASSIGN2455]
          bool _t21C3#1 = phi(_t244D,_t244F)
          goto JOIN21C4
        ASSIGN2452:  preds = [COND244C]
          real _t2451#2 = VIndex<3,2>(npos217F);
          bool _t2453#1 = EQ<real>(_t2451,_t2451);
          bool _t244F#1 = BNot(_t2453);
          goto JOIN2450
        ASSIGN2456:  preds = [COND21B8]
          bool _t2212#1 = false;
          goto JOIN2213
        ASSIGN2457:  preds = [COND21B1]
          bool _t21B3#1 = false;
          goto JOIN21B4
        ASSIGN2458:  preds = [COND21AC]
          bool _t21B6#1 = false;
          goto JOIN21B7
        ASSIGN2459:  preds = [COND2196]
          bool _t219F#1 = false;
          goto JOIN21A0
        ASSIGN245A:  preds = [COND218E]
          bool _t21A2#1 = false;
          goto JOIN21A3
        ASSIGN245C:  preds = [COND210D]
          real _t245B#2 = VIndex<3,1>(pos2104);
          bool _t245D#1 = EQ<real>(_t245B,_t245B);
          bool _t245F#1 = BNot(_t245D);
          if _t245F then goto ASSIGN2463 else goto ASSIGN2467
        ASSIGN2463:  preds = [COND2461]
          bool _t2462#1 = true;
          goto JOIN2465
        JOIN2465:  preds = [ASSIGN2463,ASSIGN246A]
          bool _t2111#1 = phi(_t2462,_t2464)
          goto JOIN2112
        ASSIGN2467:  preds = [COND2461]
          real _t2466#2 = VIndex<3,2>(pos2104);
          bool _t2468#1 = EQ<real>(_t2466,_t2466);
          bool _t2464#1 = BNot(_t2468);
          goto JOIN2465
        ASSIGN246B:  preds = [COND1FD8]
          bool _t2020#1 = false;
          goto JOIN2021
        ASSIGN246D:  preds = [COND1FD0]
          real _t246C#2 = VIndex<3,1>(pos1F7D);
          bool _t246E#1 = EQ<real>(_t246C,_t246C);
          bool _t2470#1 = BNot(_t246E);
          if _t2470 then goto ASSIGN2474 else goto ASSIGN2478
        ASSIGN2474:  preds = [COND2472]
          bool _t2473#1 = true;
          goto JOIN2476
        JOIN2476:  preds = [ASSIGN2474,ASSIGN247B]
          bool _t1FD4#1 = phi(_t2473,_t2475)
          goto JOIN1FD5
        ASSIGN2478:  preds = [COND2472]
          real _t2477#2 = VIndex<3,2>(pos1F7D);
          bool _t2479#1 = EQ<real>(_t2477,_t2477);
          bool _t2475#1 = BNot(_t2479);
          goto JOIN2476
        ASSIGN247C:  preds = [COND1FC9]
          bool _t2023#1 = false;
          goto JOIN2024
        ASSIGN247D:  preds = [COND1FC2]
          bool _t1FC4#1 = false;
          goto JOIN1FC5
        ASSIGN247E:  preds = [COND1FBD]
          bool _t1FC7#1 = false;
          goto JOIN1FC8
        ASSIGN247F:  preds = [COND1FA5]
          bool _t1FAE#1 = false;
          goto JOIN1FAF
        ASSIGN2480:  preds = [COND1F9D]
          bool _t1FB1#1 = false;
          goto JOIN1FB2
    end update
  end particle
## initial strand creation
  COLLECTION
    ENTRY2481:  preds = []
      tensor[3][] ipos2482#1 = globals.ipos1F2E;
    FOREACH2485:  preds = [ASSIGN2483,NEXT2489]
      foreach (x2484 in ipos2482) on exit goto RETURN248A
      real _t2486#1 = 0.1e1;
      new particle(x2484,_t2486);
      goto FOREACH2485
    RETURN248A:  preds = [FOREACH2485]
      return
## global update
  ENTRY248B:  preds = []
    real rad248C#1 = globals.rad1F28;
    real eps248E#1 = globals.eps1F29;
    particle[] P2490#5 = Strands<particle,all>;
    (int res2498#1) = sum<int>(MAP sum2492 (P2490));
    (int res24A0#2) = max<int>(MAP max249A (P2490));
    (int res24A8#1) = sum<int>(MAP sum24A2 (P2490));
    (bool res24B0#2) = all(MAP all24AA (P2490));
    (real res24BE#1) = max<real>(MAP max24B2 (P2490));
    string _t24C0#1 = "One run:";
    string _t24C2#3 = " and ";
    real _t24C4#2 = RDiv(res24BE,rad248C);
    bool _t24C7#2 = LT<real>(_t24C4,eps248E);
    string _t24C9#1 = " of ";
    string _t24CB#2 = "\n";
    Print<[string,bool,string,real,string,bool,string,int,string,int,string]>(_t24C0,res24B0,_t24C2,_t24C4,_t24C2,_t24C7,_t24C2,res24A8,_t24C9,res2498,_t24CB);
    if res24B0 then goto COND24CF else goto JOIN24D5
  COND24CF:  preds = [COND24CE]
    if _t24C7 then goto ASSIGN24D1 else goto JOIN24D4
  ASSIGN24D1:  preds = [COND24CF]
    string _t24D0#1 = "CONVERGED!\n";
    Print<[string]>(_t24D0);
    StabilizeAll;
    goto JOIN24D4
  JOIN24D4:  preds = [MASSIGN24D3,COND24CF]
    goto JOIN24D5
  JOIN24D5:  preds = [JOIN24D4,COND24CE]
    int _t24D6#1 = 2000;
    bool _t24D8#1 = GT<int>(res24A0,_t24D6);
    if _t24D8 then goto MASSIGN24DB else goto JOIN24DC
  MASSIGN24DB:  preds = [COND24DA]
    StabilizeAll;
    goto JOIN24DC
  JOIN24DC:  preds = [MASSIGN24DB,COND24DA]
    string _t24DD#1 = "Current steps:";
    Print<[string,int,string]>(_t24DD,res24A0,_t24CB);
    continue
#### end program ####
##### TreeIR: after low-to-tree translation ####
//***** PROPERTIES *****
  GlobalInit StabilizeAll GlobalReduce StrandSets GlobalUpdate NewStrands StrandCommunication StrandsMayDie HasInputs HasGlobals ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
//***** CONSTS *****
//***** INPUTS *****
input femData(Mesh) meshData;
input femData(Space) 0space04FA_intermedateGlobal;
input femData(FemFunc) 0data04FC_intermedateGlobal;
input real rad;
input real eps;
input real v0;
input real fBias;
input real fStren;
input real zfuz;
input tensor[3][] ipos;
//***** CONST INIT *****
  {
    globals.rad = 0.1e-1;
    globals.eps = 0.1e-1;
    globals.v0 = 0.625e-1;
    globals.fBias = 0.1e-1;
    globals.fStren = 0.1e-1;
    globals.zfuz = 0.1e-1;
  }
//***** GLOBALS *****
//***** FUNCTIONS *****
  function tensor[3] fStep (&tensor[3] p_s_0) {
    bool l__t_17;
    tensor[3][3] l_E_10;
    real[3] l_evals_9;
    real l_x_1 = VIndex<3,4,0>(LOAD_0(p_s_0));
    real l_y_2 = VIndex<3,4,1>(LOAD_0(p_s_0));
    real l_z_3 = VIndex<3,4,2>(LOAD_0(p_s_0));
    real l__t_4 = RMul(l_y_2,l_y_2);
    real l_r_5 = RMul(0.2e1,l_x_1);
    real l__t_6 = RMul(l_r_5,l_y_2);
    real l__t_7 = RMul(RMul(0.2e1,l_y_2),l_z_3);
    tensor[3,3] t_8 = <tensor[3,3]>[0.e0,l__t_7,l__t_4,l__t_7,RMul(l_r_5,l_z_3),l__t_6,l__t_4,l__t_6,0.e0];
    (l_evals_9,l_E_10) = EigenVecs3x3(TensorRef<[3,3]>(t_8));
    &tensor[3] l__t_11 = Subscript<tensor[3][3]>(l_E_10,2);
    real l_op1_e3_l_6_12 = RNeg(RDiv(0.1e1,Subscript<real[3]>(l_evals_9,2)));
    real l_op1_e3_l_7_13 = VDot<3,4>(LOAD_0(l__t_11),VEC3{4}(RMul(l_z_3,l__t_4),RMul(l__t_6,l_z_3),RMul(l_x_1,l__t_4)));
    vec3{4} v_14 = VEC3{4}(RMul(RMul(l_op1_e3_l_6_12,TensorIndex<&tensor[3],[0]>(l__t_11)),l_op1_e3_l_7_13),RMul(RMul(l_op1_e3_l_6_12,TensorIndex<&tensor[3],[1]>(l__t_11)),l_op1_e3_l_7_13),RMul(RMul(l_op1_e3_l_6_12,TensorIndex<&tensor[3],[2]>(l__t_11)),l_op1_e3_l_7_13));
    real l__t_15 = VIndex<3,4,0>(v_14);
    vec3{4} v_16 = v_14;
    if (BNot(EQ<real>(l__t_15,l__t_15))) {
      l__t_17 = true;
    } else {
      bool l__t_19;
      real l__t_18 = VIndex<3,4,1>(v_16);
      if (BNot(EQ<real>(l__t_18,l__t_18))) {
        l__t_19 = true;
      } else {
        real l__t_20 = VIndex<3,4,2>(v_16);
        l__t_19 = BNot(EQ<real>(l__t_20,l__t_20));
      }
      l__t_17 = l__t_19;
    }
    if (l__t_17) {
      tensor[3] _arg_21 = PACK(VEC3{4}(+inf,+inf,+inf));
      return _arg_21
    }
    tensor[3] _arg_22 = PACK(v_16);
    return _arg_22
  }
  function tensor[3,3] fPerp (&tensor[3] p_s_23) {
    tensor[3][3] l__t_32;
    real[3] l_evals_31;
    real l_y_24 = VIndex<3,4,1>(LOAD_0(p_s_23));
    real l_z_25 = VIndex<3,4,2>(LOAD_0(p_s_23));
    real l__t_26 = RMul(l_y_24,l_y_24);
    real l_r_27 = RMul(0.2e1,VIndex<3,4,0>(LOAD_0(p_s_23)));
    real l__t_28 = RMul(l_r_27,l_y_24);
    real l__t_29 = RMul(RMul(0.2e1,l_y_24),l_z_25);
    tensor[3,3] t_30 = <tensor[3,3]>[0.e0,l__t_29,l__t_26,l__t_29,RMul(l_r_27,l_z_25),l__t_28,l__t_26,l__t_28,0.e0];
    (l_evals_31,l__t_32) = EigenVecs3x3(TensorRef<[3,3]>(t_30));
    &tensor[3] l_E2_33 = Subscript<tensor[3][3]>(l__t_32,2);
    vec3{4} v_34 = VScale<3,4>(TensorIndex<&tensor[3],[0]>(l_E2_33),LOAD_0(l_E2_33));
    vec3{4} v_35 = VScale<3,4>(TensorIndex<&tensor[3],[1]>(l_E2_33),LOAD_0(l_E2_33));
    vec3{4} v_36 = VScale<3,4>(TensorIndex<&tensor[3],[2]>(l_E2_33),LOAD_0(l_E2_33));
    real l_r_37 = RSub(0.1e1,VIndex<3,4,0>(v_34));
    real l_r_38 = RSub(0.e0,VIndex<3,4,1>(v_34));
    real l_r_39 = RSub(0.e0,VIndex<3,4,2>(v_34));
    vec3{4} v_40 = VEC3{4}(l_r_37,l_r_38,l_r_39);
    real l_r_41 = RSub(0.e0,VIndex<3,4,0>(v_35));
    real l_r_42 = RSub(0.1e1,VIndex<3,4,1>(v_35));
    real l_r_43 = RSub(0.e0,VIndex<3,4,2>(v_35));
    vec3{4} v_44 = VEC3{4}(l_r_41,l_r_42,l_r_43);
    real l_r_45 = RSub(0.e0,VIndex<3,4,0>(v_36));
    real l_r_46 = RSub(0.e0,VIndex<3,4,1>(v_36));
    real l_r_47 = RSub(0.1e1,VIndex<3,4,2>(v_36));
    vec3{4} v_48 = VEC3{4}(l_r_45,l_r_46,l_r_47);
    real l_t_49 = RAdd(RAdd(VDot<3,4>(v_40,v_40),VDot<3,4>(v_44,v_44)),VDot<3,4>(v_48,v_48));
    if (BNot(EQ<real>(l_t_49,l_t_49))) {
      tensor[3,3] t_50 = <tensor[3,3]>[0.e0,0.e0,0.e0,0.e0,0.e0,0.e0,0.e0,0.e0,0.e0];
      return t_50
    }
    tensor[3,3] t_51 = <tensor[3,3]>[l_r_37,l_r_38,l_r_39,l_r_41,l_r_42,l_r_43,l_r_45,l_r_46,l_r_47];
    return t_51
  }
  function int sum (world, id(particle) p_P_52) {
    return p_P_52.test
  }
  function int max (world, id(particle) p_P_53) {
    return p_P_53.steps
  }
  function int sum (world, id(particle) p_P_54) {
    return p_P_54.testp
  }
  function bool all (world, id(particle) p_P_55) {
    return p_P_55.found
  }
  function real max (world, id(particle) p_P_56) {
    return Sqrt(VDot<3,4>(LOAD_0(TensorRef<[3]>(p_P_56.step)),LOAD_0(TensorRef<[3]>(p_P_56.step))))
  }
//***** GLOBAL VARIABLE INIT *****
  {
    femData(MeshCell)[] l__t_57;
    l__t_57 = <femData(MeshCell)[]>{};
    for i__t_58 = 0 to ISub(ExtractFemItem<int,NumCell(Mesh)>(globals.meshData),1) {
      l__t_57 = Append<femData(MeshCell),femData(MeshCell)>(l__t_57,LoadFem<femData(MeshCell)>(globals.meshData,i__t_58));
    }
  }
//***** STRAND *****
strand particle (&tensor[3] p_pos0_59,real p_hh0_60) in 3D {
  varying output tensor[3] pos;
  varying output tensor[3] _pos;
  varying real hh;
  varying tensor[3] step;
  varying bool found;
  varying int nfs;
  int test;
  varying int testp;
  varying int steps;
  initialize () {
    self.pos = TensorCopy<[3]>(p_pos0_59);
    self._pos = TensorCopy<[3]>(p_pos0_59);
    self.hh = p_hh0_60;
    self.step = PACK(VEC3{4}(0.e0,0.e0,0.e0));
    self.found = false;
    self.nfs = 0;
    self.test = 1;
    self.testp = 0;
    self.steps = 0;
  }
  update (world, globals) {
    vec3{4} v_105;
    real l_hh_104;
    vec3{4} v_103;
    bool l_found_102;
    int l_nfs_101;
    int l_testp_100;
    bool l__t_87;
    bool l__t_71;
    bool l__t_68;
    int l_steps_62 = IAdd(self.steps,1);
    vec3{4} v_63 = VEC3{4}(0.e0,0.e0,0.e0);
    vec3{4} v_64 = VSub<3,4>(LOAD_0(TensorRef<[3]>(self.pos)),v_63);
    vec3{4} v_65 = v_63;
    vec3{4} v_66 = v_64;
    if (GT<real>(Abs<real>(VIndex<3,4,0>(v_64)),0.1e0)) {
      bool l__t_67;
      if (GT<real>(Abs<real>(VIndex<3,4,1>(v_66)),0.1e0)) {
        l__t_67 = GT<real>(Abs<real>(VIndex<3,4,2>(v_66)),0.1e0);
      } else {
        l__t_67 = false;
      }
      l__t_68 = l__t_67;
    } else {
      l__t_68 = false;
    }
    real l__t_69 = Sqrt(VDot<3,4>(v_66,v_66));
    if (LT<real>(l__t_69,0.5e1)) {
      bool l__t_70;
      if (GT<real>(l__t_69,0.2e1)) {
        l__t_70 = l__t_68;
      } else {
        l__t_70 = false;
      }
      l__t_71 = l__t_70;
    } else {
      l__t_71 = false;
    }
    if (l__t_71) {
      bool l__t_86;
      bool l__t_73;
      real l__t_72 = VIndex<3,4,0>(LOAD_0(TensorRef<[3]>(self.pos)));
      if (BNot(EQ<real>(l__t_72,l__t_72))) {
        l__t_73 = true;
      } else {
        bool l__t_75;
        real l__t_74 = VIndex<3,4,1>(LOAD_0(TensorRef<[3]>(self.pos)));
        if (BNot(EQ<real>(l__t_74,l__t_74))) {
          l__t_75 = true;
        } else {
          real l__t_76 = VIndex<3,4,2>(LOAD_0(TensorRef<[3]>(self.pos)));
          l__t_75 = BNot(EQ<real>(l__t_76,l__t_76));
        }
        l__t_73 = l__t_75;
      }
      if (BNot(l__t_73)) {
        real l_y_77 = VIndex<3,4,1>(LOAD_0(TensorRef<[3]>(self.pos)));
        real l_z_78 = VIndex<3,4,2>(LOAD_0(TensorRef<[3]>(self.pos)));
        real l__t_79 = RMul(l_y_77,l_y_77);
        real l_r_80 = RMul(0.2e1,l__t_72);
        real l__t_81 = RMul(l_r_80,l_y_77);
        vec3{4} v_82 = VEC3{4}(RMul(l_z_78,l__t_79),RMul(l__t_81,l_z_78),RMul(l__t_72,l__t_79));
        real l__t_83 = RMul(RMul(0.2e1,l_y_77),l_z_78);
        tensor[3,3] t_84 = <tensor[3,3]>[0.e0,l__t_83,l__t_79,l__t_83,RMul(l_r_80,l_z_78),l__t_81,l__t_79,l__t_81,0.e0];
        real[3] l__t_85 = EigenVals3x3(TensorRef<[3,3]>(t_84));
        l__t_86 = GTE<real>(RDiv(RNeg(Subscript<real[3]>(l__t_85,2)),RAdd(globals.fBias,Sqrt(VDot<3,4>(v_82,v_82)))),globals.fStren);
      } else {
        l__t_86 = false;
      }
      l__t_87 = l__t_86;
    } else {
      l__t_87 = false;
    }
    if (BNot(l__t_87)) {
      die;
    }
    if (BNot(self.found)) {
      bool l_found_99;
      int l_nfs_98;
      int l_testp_97;
      bool l__t_92;
      &tensor[3] l_step_88 = fStep$253A(TensorRef<[3]>(self.pos));
      vec3{4} v_89 = VAdd<3,4>(LOAD_0(TensorRef<[3]>(self.pos)),LOAD_0(l_step_88));
      real l__t_90 = VIndex<3,4,0>(v_89);
      vec3{4} v_91 = v_89;
      if (BNot(EQ<real>(l__t_90,l__t_90))) {
        l__t_92 = true;
      } else {
        bool l__t_94;
        real l__t_93 = VIndex<3,4,1>(v_91);
        if (BNot(EQ<real>(l__t_93,l__t_93))) {
          l__t_94 = true;
        } else {
          real l__t_95 = VIndex<3,4,2>(v_91);
          l__t_94 = BNot(EQ<real>(l__t_95,l__t_95));
        }
        l__t_92 = l__t_94;
      }
      if (l__t_92) {
        die;
      }
      if (GT<real>(RDiv(Sqrt(VDot<3,4>(LOAD_0(l_step_88),LOAD_0(l_step_88))),globals.rad),globals.eps)) {
        int l_nfs_96 = IAdd(self.nfs,1);
        if (GT<int>(l_nfs_96,10)) {
          die;
        }
        l_testp_97 = self.testp;
        l_nfs_98 = l_nfs_96;
        l_found_99 = self.found;
      } else {
        l_testp_97 = 1;
        l_nfs_98 = self.nfs;
        l_found_99 = true;
      }
      l_testp_100 = l_testp_97;
      l_nfs_101 = l_nfs_98;
      l_found_102 = l_found_99;
      v_103 = LOAD_0(l_step_88);
      l_hh_104 = self.hh;
      v_105 = v_91;
    } else {
      bool l__t_191;
      vec3{4} v_188;
      real l_hh_187;
      real l__t_176;
      real l_hh_173;
      real l_hh_166;
      vec3{4} v_165;
      real l__t_117;
      vec3{4} v_116;
      int l_nn_115;
      bool l__t_110;
      &tensor[3] l__t_106 = fStep$253A(TensorRef<[3]>(self.pos));
      vec3{4} v_107 = VAdd<3,4>(LOAD_0(TensorRef<[3]>(self.pos)),LOAD_0(l__t_106));
      real l__t_108 = VIndex<3,4,0>(v_107);
      vec3{4} v_109 = v_107;
      if (BNot(EQ<real>(l__t_108,l__t_108))) {
        l__t_110 = true;
      } else {
        bool l__t_112;
        real l__t_111 = VIndex<3,4,1>(v_109);
        if (BNot(EQ<real>(l__t_111,l__t_111))) {
          l__t_112 = true;
        } else {
          real l__t_113 = VIndex<3,4,2>(v_109);
          l__t_112 = BNot(EQ<real>(l__t_113,l__t_113));
        }
        l__t_110 = l__t_112;
      }
      if (l__t_110) {
        die;
      }
      tensor[3] _arg_114 = PACK(v_109);
      l_nn_115 = 0;
      v_116 = v_65;
      l__t_117 = 0.e0;
      id(particle)[] t_119 = SphereQuery<3,id(particle)>(TensorRef<[3]>(_arg_114),globals.rad);
      foreach id(particle) i_P_118 in t_119 {
        vec3{4} v_120 = VSub<3,4>(LOAD_0(TensorRef<[3]>(i_P_118.pos)),v_109);
        real l_op1_e3_l_11_121 = Sqrt(VDot<3,4>(v_120,v_120));
        real l_op1_e3_l_13_122 = RSub(0.1e1,RDiv(l_op1_e3_l_11_121,globals.rad));
        real l__Pow_2_123 = RMul(l_op1_e3_l_13_122,l_op1_e3_l_13_122);
        real l_r_124 = RMul(RMul(-0.4e1,RMul(l_op1_e3_l_13_122,l__Pow_2_123)),RDiv(0.1e1,globals.rad));
        real l_r_125 = RDiv(0.1e1,l_op1_e3_l_11_121);
        l_nn_115 = IAdd(l_nn_115,1);
        v_116 = VAdd<3,4>(v_116,VEC3{4}(RMul(l_r_125,RMul(l_r_124,VIndex<3,4,0>(v_120))),RMul(l_r_125,RMul(l_r_124,VIndex<3,4,1>(v_120))),RMul(l_r_125,RMul(l_r_124,VIndex<3,4,2>(v_120)))));
        l__t_117 = RAdd(l__t_117,RMul(l__Pow_2_123,l__Pow_2_123));
      }
      if (EQ<int>(0,l_nn_115)) {
        bool l__t_150;
        bool l__t_134;
        bool l__t_131;
        vec3{4} v_126 = VAdd<3,4>(v_109,VEC3{4}(RMul(0.5e0,globals.rad),0.e0,0.e0));
        vec3{4} v_127 = VSub<3,4>(v_126,v_65);
        vec3{4} v_128 = v_126;
        vec3{4} v_129 = v_127;
        if (GT<real>(Abs<real>(VIndex<3,4,0>(v_127)),0.1e0)) {
          bool l__t_130;
          if (GT<real>(Abs<real>(VIndex<3,4,1>(v_129)),0.1e0)) {
            l__t_130 = GT<real>(Abs<real>(VIndex<3,4,2>(v_129)),0.1e0);
          } else {
            l__t_130 = false;
          }
          l__t_131 = l__t_130;
        } else {
          l__t_131 = false;
        }
        real l__t_132 = Sqrt(VDot<3,4>(v_129,v_129));
        if (LT<real>(l__t_132,0.5e1)) {
          bool l__t_133;
          if (GT<real>(l__t_132,0.2e1)) {
            l__t_133 = l__t_131;
          } else {
            l__t_133 = false;
          }
          l__t_134 = l__t_133;
        } else {
          l__t_134 = false;
        }
        if (l__t_134) {
          bool l__t_149;
          bool l__t_136;
          real l__t_135 = VIndex<3,4,0>(v_128);
          if (BNot(EQ<real>(l__t_135,l__t_135))) {
            l__t_136 = true;
          } else {
            bool l__t_138;
            real l__t_137 = VIndex<3,4,1>(v_128);
            if (BNot(EQ<real>(l__t_137,l__t_137))) {
              l__t_138 = true;
            } else {
              real l__t_139 = VIndex<3,4,2>(v_128);
              l__t_138 = BNot(EQ<real>(l__t_139,l__t_139));
            }
            l__t_136 = l__t_138;
          }
          if (BNot(l__t_136)) {
            real l_y_140 = VIndex<3,4,1>(v_128);
            real l_z_141 = VIndex<3,4,2>(v_128);
            real l__t_142 = RMul(l_y_140,l_y_140);
            real l_r_143 = RMul(0.2e1,l__t_135);
            real l__t_144 = RMul(l_r_143,l_y_140);
            vec3{4} v_145 = VEC3{4}(RMul(l_z_141,l__t_142),RMul(l__t_144,l_z_141),RMul(l__t_135,l__t_142));
            real l__t_146 = RMul(RMul(0.2e1,l_y_140),l_z_141);
            tensor[3,3] t_147 = <tensor[3,3]>[0.e0,l__t_146,l__t_142,l__t_146,RMul(l_r_143,l_z_141),l__t_144,l__t_142,l__t_144,0.e0];
            real[3] l__t_148 = EigenVals3x3(TensorRef<[3,3]>(t_147));
            l__t_149 = GTE<real>(RDiv(RNeg(Subscript<real[3]>(l__t_148,2)),RAdd(globals.fBias,Sqrt(VDot<3,4>(v_145,v_145)))),globals.fStren);
          } else {
            l__t_149 = false;
          }
          l__t_150 = l__t_149;
        } else {
          l__t_150 = false;
        }
        if (l__t_150) {
          tensor[3] _arg_151 = PACK(v_128);
          new particle(_arg_151,self.hh);
        }
        self.pos = PACK(v_109);
        self._pos = PACK(v_109);
        self.step = PACK(v_65);
        self.steps = l_steps_62;
        active;
      }
      tensor[3] _arg_155 = PACK(v_109);
      &tensor[3,3] l__t_156 = fPerp$2558(_arg_155);
      real l_vdot_157 = VDot<3,4>(LOAD_0(ProjectLast<&tensor[3,3],[0]>(l__t_156)),v_116);
      real l_vdot_158 = VDot<3,4>(LOAD_0(ProjectLast<&tensor[3,3],[1]>(l__t_156)),v_116);
      real l_vdot_159 = VDot<3,4>(LOAD_0(ProjectLast<&tensor[3,3],[2]>(l__t_156)),v_116);
      vec3{4} v_160 = VEC3{4}(l_vdot_157,l_vdot_158,l_vdot_159);
      real l__t_161 = Sqrt(RMul(RMul(self.hh,self.hh),VDot<3,4>(v_160,v_160)));
      vec3{4} v_162 = v_160;
      vec3{4} v_163 = VScale<3,4>(self.hh,v_160);
      if (GT<real>(l__t_161,globals.rad)) {
        real l_hh_164 = RMul(self.hh,RDiv(globals.rad,l__t_161));
        v_165 = VEC3{4}(RMul(l_hh_164,l_vdot_157),RMul(l_hh_164,l_vdot_158),RMul(l_hh_164,l_vdot_159));
        l_hh_166 = l_hh_164;
      } else {
        v_165 = v_163;
        l_hh_166 = self.hh;
      }
      tensor[3] _arg_167 = PACK(VAdd<3,4>(v_109,v_165));
      &tensor[3] l_fs_168 = fStep$253A(_arg_167);
      real l_op1_e3_l_5_169 = Sqrt(VDot<3,4>(v_165,v_165));
      if (GT<real>(RDiv(Sqrt(VDot<3,4>(LOAD_0(l_fs_168),LOAD_0(l_fs_168))),l_op1_e3_l_5_169),0.5e0)) {
        self.pos = PACK(v_109);
        self._pos = PACK(v_109);
        self.hh = RMul(l_hh_166,0.5e0);
        self.step = PACK(v_65);
        self.steps = l_steps_62;
        active;
      } else {
        l_hh_173 = l_hh_166;
      }
      vec3{4} v_174 = VAdd<3,4>(VAdd<3,4>(v_109,LOAD_0(l_fs_168)),v_165);
      tensor[3] _arg_175 = PACK(v_174);
      l__t_176 = 0.e0;
      id(particle)[] t_178 = SphereQuery<3,id(particle)>(TensorRef<[3]>(_arg_175),globals.rad);
      vec3{4} v_179 = v_174;
      vec3{4} v_180 = VAdd<3,4>(LOAD_0(l_fs_168),v_165);
      foreach id(particle) i_P_177 in t_178 {
        vec3{4} v_181 = VSub<3,4>(v_179,LOAD_0(TensorRef<[3]>(i_P_177.pos)));
        real l_op1_e3_l_15_182 = RSub(0.1e1,RDiv(Sqrt(VDot<3,4>(v_181,v_181)),globals.rad));
        real l__Pow_2_183 = RMul(l_op1_e3_l_15_182,l_op1_e3_l_15_182);
        l__t_176 = RAdd(l__t_176,RMul(l__Pow_2_183,l__Pow_2_183));
      }
      if (GT<real>(RSub(l__t_176,l__t_117),RMul(0.5e0,VDot<3,4>(VSub<3,4>(v_179,v_109),VNeg<3,4>(v_162))))) {
        self.pos = PACK(v_109);
        self._pos = PACK(v_109);
        self.hh = RMul(l_hh_173,0.5e0);
        self.step = PACK(v_65);
        self.steps = l_steps_62;
        active;
      } else {
        l_hh_187 = l_hh_173;
        v_188 = v_179;
      }
      real l_hh_189 = RMul(l_hh_187,0.11e1);
      real l__t_190 = VIndex<3,4,0>(v_188);
      if (BNot(EQ<real>(l__t_190,l__t_190))) {
        l__t_191 = true;
      } else {
        bool l__t_193;
        real l__t_192 = VIndex<3,4,1>(v_188);
        if (BNot(EQ<real>(l__t_192,l__t_192))) {
          l__t_193 = true;
        } else {
          real l__t_194 = VIndex<3,4,2>(v_188);
          l__t_193 = BNot(EQ<real>(l__t_194,l__t_194));
        }
        l__t_191 = l__t_193;
      }
      if (l__t_191) {
        die;
      }
      if (LT<int>(l_nn_115,5)) {
        bool l__t_221;
        bool l__t_205;
        bool l__t_202;
        real l_op1_e3_l_7_195 = RDiv(0.1e1,l_op1_e3_l_5_169);
        real l_r_196 = RMul(0.5e0,globals.rad);
        vec3{4} v_197 = VAdd<3,4>(v_188,VEC3{4}(RMul(RMul(l_r_196,VIndex<3,4,0>(v_165)),l_op1_e3_l_7_195),RMul(RMul(l_r_196,VIndex<3,4,1>(v_165)),l_op1_e3_l_7_195),RMul(RMul(l_r_196,VIndex<3,4,2>(v_165)),l_op1_e3_l_7_195)));
        vec3{4} v_198 = VSub<3,4>(v_197,v_65);
        vec3{4} v_199 = v_197;
        vec3{4} v_200 = v_198;
        if (GT<real>(Abs<real>(VIndex<3,4,0>(v_198)),0.1e0)) {
          bool l__t_201;
          if (GT<real>(Abs<real>(VIndex<3,4,1>(v_200)),0.1e0)) {
            l__t_201 = GT<real>(Abs<real>(VIndex<3,4,2>(v_200)),0.1e0);
          } else {
            l__t_201 = false;
          }
          l__t_202 = l__t_201;
        } else {
          l__t_202 = false;
        }
        real l__t_203 = Sqrt(VDot<3,4>(v_200,v_200));
        if (LT<real>(l__t_203,0.5e1)) {
          bool l__t_204;
          if (GT<real>(l__t_203,0.2e1)) {
            l__t_204 = l__t_202;
          } else {
            l__t_204 = false;
          }
          l__t_205 = l__t_204;
        } else {
          l__t_205 = false;
        }
        if (l__t_205) {
          bool l__t_220;
          bool l__t_207;
          real l__t_206 = VIndex<3,4,0>(v_199);
          if (BNot(EQ<real>(l__t_206,l__t_206))) {
            l__t_207 = true;
          } else {
            bool l__t_209;
            real l__t_208 = VIndex<3,4,1>(v_199);
            if (BNot(EQ<real>(l__t_208,l__t_208))) {
              l__t_209 = true;
            } else {
              real l__t_210 = VIndex<3,4,2>(v_199);
              l__t_209 = BNot(EQ<real>(l__t_210,l__t_210));
            }
            l__t_207 = l__t_209;
          }
          if (BNot(l__t_207)) {
            real l_y_211 = VIndex<3,4,1>(v_199);
            real l_z_212 = VIndex<3,4,2>(v_199);
            real l__t_213 = RMul(l_y_211,l_y_211);
            real l_r_214 = RMul(0.2e1,l__t_206);
            real l__t_215 = RMul(l_r_214,l_y_211);
            vec3{4} v_216 = VEC3{4}(RMul(l_z_212,l__t_213),RMul(l__t_215,l_z_212),RMul(l__t_206,l__t_213));
            real l__t_217 = RMul(RMul(0.2e1,l_y_211),l_z_212);
            tensor[3,3] t_218 = <tensor[3,3]>[0.e0,l__t_217,l__t_213,l__t_217,RMul(l_r_214,l_z_212),l__t_215,l__t_213,l__t_215,0.e0];
            real[3] l__t_219 = EigenVals3x3(TensorRef<[3,3]>(t_218));
            l__t_220 = GTE<real>(RDiv(RNeg(Subscript<real[3]>(l__t_219,2)),RAdd(globals.fBias,Sqrt(VDot<3,4>(v_216,v_216)))),globals.fStren);
          } else {
            l__t_220 = false;
          }
          l__t_221 = l__t_220;
        } else {
          l__t_221 = false;
        }
        if (l__t_221) {
          tensor[3] _arg_222 = PACK(v_199);
          new particle(_arg_222,l_hh_189);
        }
      }
      l_testp_100 = self.testp;
      l_nfs_101 = self.nfs;
      l_found_102 = self.found;
      v_103 = v_180;
      l_hh_104 = l_hh_189;
      v_105 = v_188;
    }
    self.pos = PACK(v_105);
    self._pos = PACK(v_105);
    self.hh = l_hh_104;
    self.step = PACK(v_103);
    self.found = l_found_102;
    self.nfs = l_nfs_101;
    self.testp = l_testp_100;
    self.steps = l_steps_62;
    active;
  }
}
//***** CREATE COLLECTION *****
  {
    foreach &tensor[3] i_x_226 in globals.ipos {
      new particle(i_x_226,0.1e1);
    }
  }
//***** GLOBAL UPDATE *****
  {
    id(particle) ix_235;
    id(particle) ix_233;
    id(particle) ix_231;
    id(particle) ix_229;
    id(particle) ix_227;
    mapreduce {
      int l_res_228 = sum<int> { sum$255A  (ix_227) | ix_227 in all }
    }
    mapreduce {
      int l_res_230 = max<int> { max$255C  (ix_229) | ix_229 in all }
    }
    mapreduce {
      int l_res_232 = sum<int> { sum$255E  (ix_231) | ix_231 in all }
    }
    mapreduce {
      bool l_res_234 = all { all$2560  (ix_233) | ix_233 in all }
    }
    mapreduce {
      real l_res_236 = max<real> { max$2562  (ix_235) | ix_235 in all }
    }
    real l__t_237 = RDiv(l_res_236,globals.rad);
    bool l__t_238 = LT<real>(l__t_237,globals.eps);
    print("One run:",l_res_234," and ",l__t_237," and ",l__t_238," and ",l_res_232," of ",l_res_228,"\n");
    if (l_res_234) {
      if (l__t_238) {
        print("CONVERGED!\n");
        stabilize_all;
      }
    }
    if (GT<int>(l_res_230,2000)) {
      stabilize_all;
    }
    print("Current steps:",l_res_230,"\n");
    return
  }
#### end program ####
##### TreeIR: after contraction ####
//***** PROPERTIES *****
  GlobalInit StabilizeAll GlobalReduce StrandSets GlobalUpdate NewStrands StrandCommunication StrandsMayDie HasInputs HasGlobals ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
//***** CONSTS *****
//***** INPUTS *****
input femData(Mesh) meshData;
input femData(Space) 0space04FA_intermedateGlobal;
input femData(FemFunc) 0data04FC_intermedateGlobal;
input real rad;
input real eps;
input real v0;
input real fBias;
input real fStren;
input real zfuz;
input tensor[3][] ipos;
//***** CONST INIT *****
  {
    globals.rad = 0.1e-1;
    globals.eps = 0.1e-1;
    globals.v0 = 0.625e-1;
    globals.fBias = 0.1e-1;
    globals.fStren = 0.1e-1;
    globals.zfuz = 0.1e-1;
  }
//***** GLOBALS *****
//***** FUNCTIONS *****
  function tensor[3] fStep (&tensor[3] p_s_0) {
    bool l__t_17;
    tensor[3][3] l_E_10;
    real[3] l_evals_9;
    real l_x_1 = TensorIndex<&tensor[3],[0]>(p_s_0);
    real l_y_2 = TensorIndex<&tensor[3],[1]>(p_s_0);
    real l_z_3 = TensorIndex<&tensor[3],[2]>(p_s_0);
    real l__t_4 = RMul(l_y_2,l_y_2);
    real l_r_5 = RMul(0.2e1,l_x_1);
    real l__t_6 = RMul(l_r_5,l_y_2);
    real l__t_7 = RMul(RMul(0.2e1,l_y_2),l_z_3);
    tensor[3,3] t_8 = <tensor[3,3]>[0.e0,l__t_7,l__t_4,l__t_7,RMul(l_r_5,l_z_3),l__t_6,l__t_4,l__t_6,0.e0];
    (l_evals_9,l_E_10) = EigenVecs3x3(TensorRef<[3,3]>(t_8));
    &tensor[3] l__t_11 = Subscript<tensor[3][3]>(l_E_10,2);
    real l_op1_e3_l_6_12 = RNeg(RDiv(0.1e1,Subscript<real[3]>(l_evals_9,2)));
    real l_op1_e3_l_7_13 = VDot<3,4>(LOAD_0(l__t_11),VEC3{4}(RMul(l_z_3,l__t_4),RMul(l__t_6,l_z_3),RMul(l_x_1,l__t_4)));
    vec3{4} v_14 = VEC3{4}(RMul(RMul(l_op1_e3_l_6_12,TensorIndex<&tensor[3],[0]>(l__t_11)),l_op1_e3_l_7_13),RMul(RMul(l_op1_e3_l_6_12,TensorIndex<&tensor[3],[1]>(l__t_11)),l_op1_e3_l_7_13),RMul(RMul(l_op1_e3_l_6_12,TensorIndex<&tensor[3],[2]>(l__t_11)),l_op1_e3_l_7_13));
    real l__t_15 = VIndex<3,4,0>(v_14);
    vec3{4} v_16 = v_14;
    if (BNot(EQ<real>(l__t_15,l__t_15))) {
      l__t_17 = true;
    } else {
      bool l__t_19;
      real l__t_18 = VIndex<3,4,1>(v_16);
      if (BNot(EQ<real>(l__t_18,l__t_18))) {
        l__t_19 = true;
      } else {
        real l__t_20 = VIndex<3,4,2>(v_16);
        l__t_19 = BNot(EQ<real>(l__t_20,l__t_20));
      }
      l__t_17 = l__t_19;
    }
    if (l__t_17) {
      tensor[3] _arg_21 = <tensor[3]>[+inf,+inf,+inf];
      return _arg_21
    }
    tensor[3] _arg_22 = PACK(v_16);
    return _arg_22
  }
  function tensor[3,3] fPerp (&tensor[3] p_s_23) {
    tensor[3][3] l__t_32;
    real[3] l_evals_31;
    real l_y_24 = TensorIndex<&tensor[3],[1]>(p_s_23);
    real l_z_25 = TensorIndex<&tensor[3],[2]>(p_s_23);
    real l__t_26 = RMul(l_y_24,l_y_24);
    real l_r_27 = RMul(0.2e1,TensorIndex<&tensor[3],[0]>(p_s_23));
    real l__t_28 = RMul(l_r_27,l_y_24);
    real l__t_29 = RMul(RMul(0.2e1,l_y_24),l_z_25);
    tensor[3,3] t_30 = <tensor[3,3]>[0.e0,l__t_29,l__t_26,l__t_29,RMul(l_r_27,l_z_25),l__t_28,l__t_26,l__t_28,0.e0];
    (l_evals_31,l__t_32) = EigenVecs3x3(TensorRef<[3,3]>(t_30));
    &tensor[3] l_E2_33 = Subscript<tensor[3][3]>(l__t_32,2);
    vec3{4} v_34 = VScale<3,4>(TensorIndex<&tensor[3],[0]>(l_E2_33),LOAD_0(l_E2_33));
    vec3{4} v_35 = VScale<3,4>(TensorIndex<&tensor[3],[1]>(l_E2_33),LOAD_0(l_E2_33));
    vec3{4} v_36 = VScale<3,4>(TensorIndex<&tensor[3],[2]>(l_E2_33),LOAD_0(l_E2_33));
    real l_r_37 = RSub(0.1e1,VIndex<3,4,0>(v_34));
    real l_r_38 = RSub(0.e0,VIndex<3,4,1>(v_34));
    real l_r_39 = RSub(0.e0,VIndex<3,4,2>(v_34));
    vec3{4} v_40 = VEC3{4}(l_r_37,l_r_38,l_r_39);
    real l_r_41 = RSub(0.e0,VIndex<3,4,0>(v_35));
    real l_r_42 = RSub(0.1e1,VIndex<3,4,1>(v_35));
    real l_r_43 = RSub(0.e0,VIndex<3,4,2>(v_35));
    vec3{4} v_44 = VEC3{4}(l_r_41,l_r_42,l_r_43);
    real l_r_45 = RSub(0.e0,VIndex<3,4,0>(v_36));
    real l_r_46 = RSub(0.e0,VIndex<3,4,1>(v_36));
    real l_r_47 = RSub(0.1e1,VIndex<3,4,2>(v_36));
    vec3{4} v_48 = VEC3{4}(l_r_45,l_r_46,l_r_47);
    real l_t_49 = RAdd(RAdd(VDot<3,4>(v_40,v_40),VDot<3,4>(v_44,v_44)),VDot<3,4>(v_48,v_48));
    if (BNot(EQ<real>(l_t_49,l_t_49))) {
      tensor[3,3] t_50 = <tensor[3,3]>[0.e0,0.e0,0.e0,0.e0,0.e0,0.e0,0.e0,0.e0,0.e0];
      return t_50
    }
    tensor[3,3] t_51 = <tensor[3,3]>[l_r_37,l_r_38,l_r_39,l_r_41,l_r_42,l_r_43,l_r_45,l_r_46,l_r_47];
    return t_51
  }
  function int sum (world, id(particle) p_P_52) {
    return p_P_52.test
  }
  function int max (world, id(particle) p_P_53) {
    return p_P_53.steps
  }
  function int sum (world, id(particle) p_P_54) {
    return p_P_54.testp
  }
  function bool all (world, id(particle) p_P_55) {
    return p_P_55.found
  }
  function real max (world, id(particle) p_P_56) {
    return Sqrt(VDot<3,4>(LOAD_0(TensorRef<[3]>(p_P_56.step)),LOAD_0(TensorRef<[3]>(p_P_56.step))))
  }
//***** GLOBAL VARIABLE INIT *****
  {
    femData(MeshCell)[] l__t_57;
    l__t_57 = <femData(MeshCell)[]>{};
    for i__t_58 = 0 to ISub(ExtractFemItem<int,NumCell(Mesh)>(globals.meshData),1) {
      l__t_57 = Append<femData(MeshCell),femData(MeshCell)>(l__t_57,LoadFem<femData(MeshCell)>(globals.meshData,i__t_58));
    }
  }
//***** STRAND *****
strand particle (&tensor[3] p_pos0_59,real p_hh0_60) in 3D {
  varying output tensor[3] pos;
  varying output tensor[3] _pos;
  varying real hh;
  varying tensor[3] step;
  varying bool found;
  varying int nfs;
  int test;
  varying int testp;
  varying int steps;
  initialize () {
    self.pos = TensorCopy<[3]>(p_pos0_59);
    self._pos = TensorCopy<[3]>(p_pos0_59);
    self.hh = p_hh0_60;
    self.step = <tensor[3]>[0.e0,0.e0,0.e0];
    self.found = false;
    self.nfs = 0;
    self.test = 1;
    self.testp = 0;
    self.steps = 0;
  }
  update (world, globals) {
    vec3{4} v_105;
    real l_hh_104;
    vec3{4} v_103;
    bool l_found_102;
    int l_nfs_101;
    int l_testp_100;
    bool l__t_87;
    bool l__t_71;
    bool l__t_68;
    int l_steps_62 = IAdd(self.steps,1);
    vec3{4} v_63 = VEC3{4}(0.e0,0.e0,0.e0);
    vec3{4} v_64 = VSub<3,4>(LOAD_0(TensorRef<[3]>(self.pos)),v_63);
    vec3{4} v_65 = v_63;
    vec3{4} v_66 = v_64;
    if (GT<real>(Abs<real>(VIndex<3,4,0>(v_64)),0.1e0)) {
      bool l__t_67;
      if (GT<real>(Abs<real>(VIndex<3,4,1>(v_66)),0.1e0)) {
        l__t_67 = GT<real>(Abs<real>(VIndex<3,4,2>(v_66)),0.1e0);
      } else {
        l__t_67 = false;
      }
      l__t_68 = l__t_67;
    } else {
      l__t_68 = false;
    }
    real l__t_69 = Sqrt(VDot<3,4>(v_66,v_66));
    if (LT<real>(l__t_69,0.5e1)) {
      bool l__t_70;
      if (GT<real>(l__t_69,0.2e1)) {
        l__t_70 = l__t_68;
      } else {
        l__t_70 = false;
      }
      l__t_71 = l__t_70;
    } else {
      l__t_71 = false;
    }
    if (l__t_71) {
      bool l__t_86;
      bool l__t_73;
      real l__t_72 = TensorIndex<&tensor[3],[0]>(TensorRef<[3]>(self.pos));
      if (BNot(EQ<real>(l__t_72,l__t_72))) {
        l__t_73 = true;
      } else {
        bool l__t_75;
        real l__t_74 = TensorIndex<&tensor[3],[1]>(TensorRef<[3]>(self.pos));
        if (BNot(EQ<real>(l__t_74,l__t_74))) {
          l__t_75 = true;
        } else {
          real l__t_76 = TensorIndex<&tensor[3],[2]>(TensorRef<[3]>(self.pos));
          l__t_75 = BNot(EQ<real>(l__t_76,l__t_76));
        }
        l__t_73 = l__t_75;
      }
      if (BNot(l__t_73)) {
        real l_y_77 = TensorIndex<&tensor[3],[1]>(TensorRef<[3]>(self.pos));
        real l_z_78 = TensorIndex<&tensor[3],[2]>(TensorRef<[3]>(self.pos));
        real l__t_79 = RMul(l_y_77,l_y_77);
        real l_r_80 = RMul(0.2e1,l__t_72);
        real l__t_81 = RMul(l_r_80,l_y_77);
        vec3{4} v_82 = VEC3{4}(RMul(l_z_78,l__t_79),RMul(l__t_81,l_z_78),RMul(l__t_72,l__t_79));
        real l__t_83 = RMul(RMul(0.2e1,l_y_77),l_z_78);
        tensor[3,3] t_84 = <tensor[3,3]>[0.e0,l__t_83,l__t_79,l__t_83,RMul(l_r_80,l_z_78),l__t_81,l__t_79,l__t_81,0.e0];
        real[3] l__t_85 = EigenVals3x3(TensorRef<[3,3]>(t_84));
        l__t_86 = GTE<real>(RDiv(RNeg(Subscript<real[3]>(l__t_85,2)),RAdd(globals.fBias,Sqrt(VDot<3,4>(v_82,v_82)))),globals.fStren);
      } else {
        l__t_86 = false;
      }
      l__t_87 = l__t_86;
    } else {
      l__t_87 = false;
    }
    if (BNot(l__t_87)) {
      die;
    }
    if (BNot(self.found)) {
      bool l_found_99;
      int l_nfs_98;
      int l_testp_97;
      bool l__t_92;
      &tensor[3] l_step_88 = fStep$253A(TensorRef<[3]>(self.pos));
      vec3{4} v_89 = VAdd<3,4>(LOAD_0(TensorRef<[3]>(self.pos)),LOAD_0(l_step_88));
      real l__t_90 = VIndex<3,4,0>(v_89);
      vec3{4} v_91 = v_89;
      if (BNot(EQ<real>(l__t_90,l__t_90))) {
        l__t_92 = true;
      } else {
        bool l__t_94;
        real l__t_93 = VIndex<3,4,1>(v_91);
        if (BNot(EQ<real>(l__t_93,l__t_93))) {
          l__t_94 = true;
        } else {
          real l__t_95 = VIndex<3,4,2>(v_91);
          l__t_94 = BNot(EQ<real>(l__t_95,l__t_95));
        }
        l__t_92 = l__t_94;
      }
      if (l__t_92) {
        die;
      }
      if (GT<real>(RDiv(Sqrt(VDot<3,4>(LOAD_0(l_step_88),LOAD_0(l_step_88))),globals.rad),globals.eps)) {
        int l_nfs_96 = IAdd(self.nfs,1);
        if (GT<int>(l_nfs_96,10)) {
          die;
        }
        l_testp_97 = self.testp;
        l_nfs_98 = l_nfs_96;
        l_found_99 = self.found;
      } else {
        l_testp_97 = 1;
        l_nfs_98 = self.nfs;
        l_found_99 = true;
      }
      l_testp_100 = l_testp_97;
      l_nfs_101 = l_nfs_98;
      l_found_102 = l_found_99;
      v_103 = LOAD_0(l_step_88);
      l_hh_104 = self.hh;
      v_105 = v_91;
    } else {
      bool l__t_191;
      vec3{4} v_188;
      real l_hh_187;
      real l__t_176;
      real l_hh_173;
      real l_hh_166;
      vec3{4} v_165;
      real l__t_117;
      vec3{4} v_116;
      int l_nn_115;
      bool l__t_110;
      &tensor[3] l__t_106 = fStep$253A(TensorRef<[3]>(self.pos));
      vec3{4} v_107 = VAdd<3,4>(LOAD_0(TensorRef<[3]>(self.pos)),LOAD_0(l__t_106));
      real l__t_108 = VIndex<3,4,0>(v_107);
      vec3{4} v_109 = v_107;
      if (BNot(EQ<real>(l__t_108,l__t_108))) {
        l__t_110 = true;
      } else {
        bool l__t_112;
        real l__t_111 = VIndex<3,4,1>(v_109);
        if (BNot(EQ<real>(l__t_111,l__t_111))) {
          l__t_112 = true;
        } else {
          real l__t_113 = VIndex<3,4,2>(v_109);
          l__t_112 = BNot(EQ<real>(l__t_113,l__t_113));
        }
        l__t_110 = l__t_112;
      }
      if (l__t_110) {
        die;
      }
      tensor[3] _arg_114 = PACK(v_109);
      l_nn_115 = 0;
      v_116 = v_65;
      l__t_117 = 0.e0;
      id(particle)[] t_119 = SphereQuery<3,id(particle)>(TensorRef<[3]>(_arg_114),globals.rad);
      foreach id(particle) i_P_118 in t_119 {
        vec3{4} v_120 = VSub<3,4>(LOAD_0(TensorRef<[3]>(i_P_118.pos)),v_109);
        real l_op1_e3_l_11_121 = Sqrt(VDot<3,4>(v_120,v_120));
        real l_op1_e3_l_13_122 = RSub(0.1e1,RDiv(l_op1_e3_l_11_121,globals.rad));
        real l__Pow_2_123 = RMul(l_op1_e3_l_13_122,l_op1_e3_l_13_122);
        real l_r_124 = RMul(RMul(-0.4e1,RMul(l_op1_e3_l_13_122,l__Pow_2_123)),RDiv(0.1e1,globals.rad));
        real l_r_125 = RDiv(0.1e1,l_op1_e3_l_11_121);
        l_nn_115 = IAdd(l_nn_115,1);
        v_116 = VAdd<3,4>(v_116,VEC3{4}(RMul(l_r_125,RMul(l_r_124,VIndex<3,4,0>(v_120))),RMul(l_r_125,RMul(l_r_124,VIndex<3,4,1>(v_120))),RMul(l_r_125,RMul(l_r_124,VIndex<3,4,2>(v_120)))));
        l__t_117 = RAdd(l__t_117,RMul(l__Pow_2_123,l__Pow_2_123));
      }
      if (EQ<int>(0,l_nn_115)) {
        bool l__t_150;
        bool l__t_134;
        bool l__t_131;
        vec3{4} v_126 = VAdd<3,4>(v_109,VEC3{4}(RMul(0.5e0,globals.rad),0.e0,0.e0));
        vec3{4} v_127 = VSub<3,4>(v_126,v_65);
        vec3{4} v_128 = v_126;
        vec3{4} v_129 = v_127;
        if (GT<real>(Abs<real>(VIndex<3,4,0>(v_127)),0.1e0)) {
          bool l__t_130;
          if (GT<real>(Abs<real>(VIndex<3,4,1>(v_129)),0.1e0)) {
            l__t_130 = GT<real>(Abs<real>(VIndex<3,4,2>(v_129)),0.1e0);
          } else {
            l__t_130 = false;
          }
          l__t_131 = l__t_130;
        } else {
          l__t_131 = false;
        }
        real l__t_132 = Sqrt(VDot<3,4>(v_129,v_129));
        if (LT<real>(l__t_132,0.5e1)) {
          bool l__t_133;
          if (GT<real>(l__t_132,0.2e1)) {
            l__t_133 = l__t_131;
          } else {
            l__t_133 = false;
          }
          l__t_134 = l__t_133;
        } else {
          l__t_134 = false;
        }
        if (l__t_134) {
          bool l__t_149;
          bool l__t_136;
          real l__t_135 = VIndex<3,4,0>(v_128);
          if (BNot(EQ<real>(l__t_135,l__t_135))) {
            l__t_136 = true;
          } else {
            bool l__t_138;
            real l__t_137 = VIndex<3,4,1>(v_128);
            if (BNot(EQ<real>(l__t_137,l__t_137))) {
              l__t_138 = true;
            } else {
              real l__t_139 = VIndex<3,4,2>(v_128);
              l__t_138 = BNot(EQ<real>(l__t_139,l__t_139));
            }
            l__t_136 = l__t_138;
          }
          if (BNot(l__t_136)) {
            real l_y_140 = VIndex<3,4,1>(v_128);
            real l_z_141 = VIndex<3,4,2>(v_128);
            real l__t_142 = RMul(l_y_140,l_y_140);
            real l_r_143 = RMul(0.2e1,l__t_135);
            real l__t_144 = RMul(l_r_143,l_y_140);
            vec3{4} v_145 = VEC3{4}(RMul(l_z_141,l__t_142),RMul(l__t_144,l_z_141),RMul(l__t_135,l__t_142));
            real l__t_146 = RMul(RMul(0.2e1,l_y_140),l_z_141);
            tensor[3,3] t_147 = <tensor[3,3]>[0.e0,l__t_146,l__t_142,l__t_146,RMul(l_r_143,l_z_141),l__t_144,l__t_142,l__t_144,0.e0];
            real[3] l__t_148 = EigenVals3x3(TensorRef<[3,3]>(t_147));
            l__t_149 = GTE<real>(RDiv(RNeg(Subscript<real[3]>(l__t_148,2)),RAdd(globals.fBias,Sqrt(VDot<3,4>(v_145,v_145)))),globals.fStren);
          } else {
            l__t_149 = false;
          }
          l__t_150 = l__t_149;
        } else {
          l__t_150 = false;
        }
        if (l__t_150) {
          tensor[3] _arg_151 = PACK(v_128);
          new particle(_arg_151,self.hh);
        }
        self.pos = PACK(v_109);
        self._pos = PACK(v_109);
        self.step = PACK(v_65);
        self.steps = l_steps_62;
        active;
      }
      tensor[3] _arg_155 = PACK(v_109);
      &tensor[3,3] l__t_156 = fPerp$2558(_arg_155);
      real l_vdot_157 = VDot<3,4>(LOAD_0(ProjectLast<&tensor[3,3],[0]>(l__t_156)),v_116);
      real l_vdot_158 = VDot<3,4>(LOAD_0(ProjectLast<&tensor[3,3],[1]>(l__t_156)),v_116);
      real l_vdot_159 = VDot<3,4>(LOAD_0(ProjectLast<&tensor[3,3],[2]>(l__t_156)),v_116);
      vec3{4} v_160 = VEC3{4}(l_vdot_157,l_vdot_158,l_vdot_159);
      real l__t_161 = Sqrt(RMul(RMul(self.hh,self.hh),VDot<3,4>(v_160,v_160)));
      vec3{4} v_162 = v_160;
      vec3{4} v_163 = VScale<3,4>(self.hh,v_160);
      if (GT<real>(l__t_161,globals.rad)) {
        real l_hh_164 = RMul(self.hh,RDiv(globals.rad,l__t_161));
        v_165 = VEC3{4}(RMul(l_hh_164,l_vdot_157),RMul(l_hh_164,l_vdot_158),RMul(l_hh_164,l_vdot_159));
        l_hh_166 = l_hh_164;
      } else {
        v_165 = v_163;
        l_hh_166 = self.hh;
      }
      tensor[3] _arg_167 = PACK(VAdd<3,4>(v_109,v_165));
      &tensor[3] l_fs_168 = fStep$253A(_arg_167);
      real l_op1_e3_l_5_169 = Sqrt(VDot<3,4>(v_165,v_165));
      if (GT<real>(RDiv(Sqrt(VDot<3,4>(LOAD_0(l_fs_168),LOAD_0(l_fs_168))),l_op1_e3_l_5_169),0.5e0)) {
        self.pos = PACK(v_109);
        self._pos = PACK(v_109);
        self.hh = RMul(l_hh_166,0.5e0);
        self.step = PACK(v_65);
        self.steps = l_steps_62;
        active;
      } else {
        l_hh_173 = l_hh_166;
      }
      vec3{4} v_174 = VAdd<3,4>(VAdd<3,4>(v_109,LOAD_0(l_fs_168)),v_165);
      tensor[3] _arg_175 = PACK(v_174);
      l__t_176 = 0.e0;
      id(particle)[] t_178 = SphereQuery<3,id(particle)>(TensorRef<[3]>(_arg_175),globals.rad);
      vec3{4} v_179 = v_174;
      vec3{4} v_180 = VAdd<3,4>(LOAD_0(l_fs_168),v_165);
      foreach id(particle) i_P_177 in t_178 {
        vec3{4} v_181 = VSub<3,4>(v_179,LOAD_0(TensorRef<[3]>(i_P_177.pos)));
        real l_op1_e3_l_15_182 = RSub(0.1e1,RDiv(Sqrt(VDot<3,4>(v_181,v_181)),globals.rad));
        real l__Pow_2_183 = RMul(l_op1_e3_l_15_182,l_op1_e3_l_15_182);
        l__t_176 = RAdd(l__t_176,RMul(l__Pow_2_183,l__Pow_2_183));
      }
      if (GT<real>(RSub(l__t_176,l__t_117),RMul(0.5e0,VDot<3,4>(VSub<3,4>(v_179,v_109),VNeg<3,4>(v_162))))) {
        self.pos = PACK(v_109);
        self._pos = PACK(v_109);
        self.hh = RMul(l_hh_173,0.5e0);
        self.step = PACK(v_65);
        self.steps = l_steps_62;
        active;
      } else {
        l_hh_187 = l_hh_173;
        v_188 = v_179;
      }
      real l_hh_189 = RMul(l_hh_187,0.11e1);
      real l__t_190 = VIndex<3,4,0>(v_188);
      if (BNot(EQ<real>(l__t_190,l__t_190))) {
        l__t_191 = true;
      } else {
        bool l__t_193;
        real l__t_192 = VIndex<3,4,1>(v_188);
        if (BNot(EQ<real>(l__t_192,l__t_192))) {
          l__t_193 = true;
        } else {
          real l__t_194 = VIndex<3,4,2>(v_188);
          l__t_193 = BNot(EQ<real>(l__t_194,l__t_194));
        }
        l__t_191 = l__t_193;
      }
      if (l__t_191) {
        die;
      }
      if (LT<int>(l_nn_115,5)) {
        bool l__t_221;
        bool l__t_205;
        bool l__t_202;
        real l_op1_e3_l_7_195 = RDiv(0.1e1,l_op1_e3_l_5_169);
        real l_r_196 = RMul(0.5e0,globals.rad);
        vec3{4} v_197 = VAdd<3,4>(v_188,VEC3{4}(RMul(RMul(l_r_196,VIndex<3,4,0>(v_165)),l_op1_e3_l_7_195),RMul(RMul(l_r_196,VIndex<3,4,1>(v_165)),l_op1_e3_l_7_195),RMul(RMul(l_r_196,VIndex<3,4,2>(v_165)),l_op1_e3_l_7_195)));
        vec3{4} v_198 = VSub<3,4>(v_197,v_65);
        vec3{4} v_199 = v_197;
        vec3{4} v_200 = v_198;
        if (GT<real>(Abs<real>(VIndex<3,4,0>(v_198)),0.1e0)) {
          bool l__t_201;
          if (GT<real>(Abs<real>(VIndex<3,4,1>(v_200)),0.1e0)) {
            l__t_201 = GT<real>(Abs<real>(VIndex<3,4,2>(v_200)),0.1e0);
          } else {
            l__t_201 = false;
          }
          l__t_202 = l__t_201;
        } else {
          l__t_202 = false;
        }
        real l__t_203 = Sqrt(VDot<3,4>(v_200,v_200));
        if (LT<real>(l__t_203,0.5e1)) {
          bool l__t_204;
          if (GT<real>(l__t_203,0.2e1)) {
            l__t_204 = l__t_202;
          } else {
            l__t_204 = false;
          }
          l__t_205 = l__t_204;
        } else {
          l__t_205 = false;
        }
        if (l__t_205) {
          bool l__t_220;
          bool l__t_207;
          real l__t_206 = VIndex<3,4,0>(v_199);
          if (BNot(EQ<real>(l__t_206,l__t_206))) {
            l__t_207 = true;
          } else {
            bool l__t_209;
            real l__t_208 = VIndex<3,4,1>(v_199);
            if (BNot(EQ<real>(l__t_208,l__t_208))) {
              l__t_209 = true;
            } else {
              real l__t_210 = VIndex<3,4,2>(v_199);
              l__t_209 = BNot(EQ<real>(l__t_210,l__t_210));
            }
            l__t_207 = l__t_209;
          }
          if (BNot(l__t_207)) {
            real l_y_211 = VIndex<3,4,1>(v_199);
            real l_z_212 = VIndex<3,4,2>(v_199);
            real l__t_213 = RMul(l_y_211,l_y_211);
            real l_r_214 = RMul(0.2e1,l__t_206);
            real l__t_215 = RMul(l_r_214,l_y_211);
            vec3{4} v_216 = VEC3{4}(RMul(l_z_212,l__t_213),RMul(l__t_215,l_z_212),RMul(l__t_206,l__t_213));
            real l__t_217 = RMul(RMul(0.2e1,l_y_211),l_z_212);
            tensor[3,3] t_218 = <tensor[3,3]>[0.e0,l__t_217,l__t_213,l__t_217,RMul(l_r_214,l_z_212),l__t_215,l__t_213,l__t_215,0.e0];
            real[3] l__t_219 = EigenVals3x3(TensorRef<[3,3]>(t_218));
            l__t_220 = GTE<real>(RDiv(RNeg(Subscript<real[3]>(l__t_219,2)),RAdd(globals.fBias,Sqrt(VDot<3,4>(v_216,v_216)))),globals.fStren);
          } else {
            l__t_220 = false;
          }
          l__t_221 = l__t_220;
        } else {
          l__t_221 = false;
        }
        if (l__t_221) {
          tensor[3] _arg_222 = PACK(v_199);
          new particle(_arg_222,l_hh_189);
        }
      }
      l_testp_100 = self.testp;
      l_nfs_101 = self.nfs;
      l_found_102 = self.found;
      v_103 = v_180;
      l_hh_104 = l_hh_189;
      v_105 = v_188;
    }
    self.pos = PACK(v_105);
    self._pos = PACK(v_105);
    self.hh = l_hh_104;
    self.step = PACK(v_103);
    self.found = l_found_102;
    self.nfs = l_nfs_101;
    self.testp = l_testp_100;
    self.steps = l_steps_62;
    active;
  }
}
//***** CREATE COLLECTION *****
  {
    foreach &tensor[3] i_x_226 in globals.ipos {
      new particle(i_x_226,0.1e1);
    }
  }
//***** GLOBAL UPDATE *****
  {
    id(particle) ix_235;
    id(particle) ix_233;
    id(particle) ix_231;
    id(particle) ix_229;
    id(particle) ix_227;
    mapreduce {
      int l_res_228 = sum<int> { sum$255A  (ix_227) | ix_227 in all }
    }
    mapreduce {
      int l_res_230 = max<int> { max$255C  (ix_229) | ix_229 in all }
    }
    mapreduce {
      int l_res_232 = sum<int> { sum$255E  (ix_231) | ix_231 in all }
    }
    mapreduce {
      bool l_res_234 = all { all$2560  (ix_233) | ix_233 in all }
    }
    mapreduce {
      real l_res_236 = max<real> { max$2562  (ix_235) | ix_235 in all }
    }
    real l__t_237 = RDiv(l_res_236,globals.rad);
    bool l__t_238 = LT<real>(l__t_237,globals.eps);
    print("One run:",l_res_234," and ",l__t_237," and ",l__t_238," and ",l_res_232," of ",l_res_228,"\n");
    if (l_res_234) {
      if (l__t_238) {
        print("CONVERGED!\n");
        stabilize_all;
      }
    }
    if (GT<int>(l_res_230,2000)) {
      stabilize_all;
    }
    print("Current steps:",l_res_230,"\n");
    return
  }
#### end program ####
/usr/bin/clang++ -fPIC -m64 -c -Wreturn-type -Wuninitialized -g -O0 -pthread -mavx2 -msse4.2 -I/home/teocollin/gitcode/diderot/include -I/usr/local/include evalProg.cxx
/usr/bin/clang++ -shared -o evalProg.so evalProg.o /home/teocollin/gitcode/diderot/lib/diderot-rt-par-debug.o -Wl,-rpath=/usr/local/lib -L/usr/local/lib -lteem  -lspatialindex_c   -lspatialindex 
                                       Phase                                         Exclusive    Total  
  compiler ..........................................................................   0.037     2.201
    front end .......................................................................   0.528     0.606
      parser ........................................................................   0.050     0.050
      typechecker ...................................................................   0.028     0.028
      simplify ......................................................................   0.000     0.000
    translate .......................................................................   0.016     0.016
    High IR optimization ............................................................   0.029     0.055
      High IR value numbering .......................................................   0.014     0.014
      High IR normalization .........................................................   0.012     0.012
      High IR checking ..............................................................   0.000     0.000
    High to Mid translation .........................................................   0.016     0.016
    Mid IR optimization .............................................................   0.027     0.043
      Mid IR contraction ............................................................   0.005     0.005
      Mid IR value numbering ........................................................   0.010     0.010
      Mid IR border control .........................................................   0.002     0.002
      Mid IR checking ...............................................................   0.000     0.000
    Mid to Low translation ..........................................................   0.009     0.009
    Low IR optimization .............................................................   0.027     0.046
      Low IR contraction ............................................................   0.009     0.009
      Low IR value numbering ........................................................   0.010     0.010
      Low IR checking ...............................................................   0.000     0.000
    Low to Tree translation .........................................................   0.021     0.021
    Tree IR optimization ............................................................   0.005     0.005
      Tree IR contraction ...........................................................   0.000     0.000
      Tree IR checking ..............................................................   0.000     0.000
    code generation .................................................................   0.023     1.345
      C compiler ....................................................................   1.322     1.322
