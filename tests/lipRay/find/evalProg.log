/* ParseTree: After parsing */
  Program @ [evalProg.diderot:2.1-179.0] 
    [
      Input: isoval= @ [evalProg.diderot:2.1-25] 
        Lit: 0.2e0 @ [evalProg.diderot:2.21-24] 
      Input: thick= @ [evalProg.diderot:2.27-3.0] 
        Lit: 0.7e-1 @ [evalProg.diderot:2.46-50] 
      Input: camEye= @ [evalProg.diderot:3.1-36] 
        Cons @ [evalProg.diderot:3.21-35] 
          [
            Lit: 0.3e1 @ [evalProg.diderot:3.22-25] 
            UnaryOp: unary - @ [evalProg.diderot:3.26-30] 
              Lit: 0.3e1 @ [evalProg.diderot:3.27-30] 
            Lit: 0.3e1 @ [evalProg.diderot:3.31-34] 
          ]
      Input: camAt= @ [evalProg.diderot:3.38-71] 
        Cons @ [evalProg.diderot:3.57-70] 
          [
            Lit: 0.5e0 @ [evalProg.diderot:3.58-61] 
            Lit: 0.5e0 @ [evalProg.diderot:3.62-65] 
            Lit: 0.5e0 @ [evalProg.diderot:3.66-69] 
          ]
      Input: camUp= @ [evalProg.diderot:3.74-4.0] 
        Cons @ [evalProg.diderot:3.93-100] 
          [
            Lit: 0 @ [evalProg.diderot:3.94-95] 
            Lit: 0 @ [evalProg.diderot:3.96-97] 
            Lit: 1 @ [evalProg.diderot:3.98-99] 
          ]
      Input: camFOV= @ [evalProg.diderot:4.1-26] 
        Lit: 0.137e2 @ [evalProg.diderot:4.21-25] 
      Input: iresU= @ [evalProg.diderot:4.28-49] 
        Lit: 10 @ [evalProg.diderot:4.46-48] 
      Input: iresV= @ [evalProg.diderot:4.53-5.0] 
        Lit: 10 @ [evalProg.diderot:4.71-73] 
      Input: camNear= @ [evalProg.diderot:5.1-25] 
        UnaryOp: unary - @ [evalProg.diderot:5.22-24] 
          Lit: 2 @ [evalProg.diderot:5.23-24] 
      Input: camFar= @ [evalProg.diderot:5.26-48] 
        Lit: 5 @ [evalProg.diderot:5.46-47] 
      Input: refStep= @ [evalProg.diderot:6.1-26] 
        Lit: 0.1e1 @ [evalProg.diderot:6.22-25] 
      Input: rayStep= @ [evalProg.diderot:6.27-7.0] 
        Lit: 0.1e-1 @ [evalProg.diderot:6.47-51] 
      Type: msh= @ [evalProg.diderot:11.1-12.0] 
        Mesh @ [evalProg.diderot:11.6-10] 
        From File : evalProg.json @ [evalProg.diderot:11.1-12.0] 
      Type: fns= @ [evalProg.diderot:12.1-13.0] 
        FunctionSpace(msh) @ [evalProg.diderot:12.6-26] 
          [ ]
        From File : evalProg.json @ [evalProg.diderot:12.1-13.0] 
      Type: func= @ [evalProg.diderot:13.1-14.0] 
        FemFunction(fns) @ [evalProg.diderot:13.6-22] 
        From File : evalProg.json @ [evalProg.diderot:13.1-14.0] 
      Input: a @ [evalProg.diderot:14.1-15.0] 
      Input: b= @ [evalProg.diderot:15.1-16.0] 
        Apply @ [evalProg.diderot:15.15-21] 
          Var: fns @ [evalProg.diderot:15.15-18] 
          [
            Var: a @ [evalProg.diderot:15.19-20] 
          ]
      Input: c= @ [evalProg.diderot:16.1-17.0] 
        Apply @ [evalProg.diderot:16.16-23] 
          Var: func @ [evalProg.diderot:16.16-20] 
          [
            Var: b @ [evalProg.diderot:16.21-22] 
          ]
      Input: eps= @ [evalProg.diderot:17.1-18.0] 
        Lit: 0.1e-5 @ [evalProg.diderot:17.18-26] 
      Var @ [evalProg.diderot:21.1-22.0] 
        Decl: camDist= @ [evalProg.diderot:21.1-22.0] 
          UnaryOp: |()| @ [evalProg.diderot:21.16-32] 
            BinOp: - @ [evalProg.diderot:21.17-31] 
              Var: camAt @ [evalProg.diderot:21.17-22] 
              Var: camEye @ [evalProg.diderot:21.25-31] 
      Var @ [evalProg.diderot:22.1-37] 
        Decl: camNearVsp= @ [evalProg.diderot:22.1-37] 
          BinOp: + @ [evalProg.diderot:22.19-36] 
            Var: camNear @ [evalProg.diderot:22.19-26] 
            Var: camDist @ [evalProg.diderot:22.29-36] 
      Var @ [evalProg.diderot:23.1-35] 
        Decl: camFarVsp= @ [evalProg.diderot:23.1-35] 
          BinOp: + @ [evalProg.diderot:23.18-34] 
            Var: camFar @ [evalProg.diderot:23.18-24] 
            Var: camDist @ [evalProg.diderot:23.27-34] 
      Var @ [evalProg.diderot:24.1-39] 
        Decl: camN= @ [evalProg.diderot:24.1-39] 
          Apply @ [evalProg.diderot:24.13-38] 
            Var: normalize @ [evalProg.diderot:24.13-22] 
            [
              BinOp: - @ [evalProg.diderot:24.23-37] 
                Var: camAt @ [evalProg.diderot:24.23-28] 
                Var: camEye @ [evalProg.diderot:24.31-37] 
            ]
      Var @ [evalProg.diderot:25.1-38] 
        Decl: camU= @ [evalProg.diderot:25.1-38] 
          Apply @ [evalProg.diderot:25.13-37] 
            Var: normalize @ [evalProg.diderot:25.13-22] 
            [
              BinOp: × @ [evalProg.diderot:25.23-36] 
                Var: camN @ [evalProg.diderot:25.23-27] 
                Var: camUp @ [evalProg.diderot:25.31-36] 
            ]
      Var @ [evalProg.diderot:26.1-26] 
        Decl: camV= @ [evalProg.diderot:26.1-26] 
          BinOp: × @ [evalProg.diderot:26.13-25] 
            Var: camU @ [evalProg.diderot:26.13-17] 
            Var: camN @ [evalProg.diderot:26.21-25] 
      Var @ [evalProg.diderot:27.1-28.0] 
        Decl: camVmax= @ [evalProg.diderot:27.1-28.0] 
          BinOp: * @ [evalProg.diderot:27.16-42] 
            Apply @ [evalProg.diderot:27.16-34] 
              Var: tan @ [evalProg.diderot:27.16-19] 
              [
                BinOp: / @ [evalProg.diderot:27.20-33] 
                  BinOp: * @ [evalProg.diderot:27.20-29] 
                    Var: camFOV @ [evalProg.diderot:27.20-26] 
                    Lit: 0.314159265358979323846264338327950288e1 @ [evalProg.diderot:27.27-29] 
                  Lit: 360 @ [evalProg.diderot:27.30-33] 
              ]
            Var: camDist @ [evalProg.diderot:27.35-42] 
      Var @ [evalProg.diderot:28.1-29.0] 
        Decl: camUmax= @ [evalProg.diderot:28.1-29.0] 
          BinOp: / @ [evalProg.diderot:28.16-35] 
            BinOp: * @ [evalProg.diderot:28.16-29] 
              Var: camVmax @ [evalProg.diderot:28.16-23] 
              Var: iresU @ [evalProg.diderot:28.24-29] 
            Var: iresV @ [evalProg.diderot:28.30-35] 
      Input: indecies @ [evalProg.diderot:32.1-22] 
      Input: times @ [evalProg.diderot:33.1-20] 
      Input: cells @ [evalProg.diderot:34.1-19] 
      Input: mcnear= @ [evalProg.diderot:36.1-37.0] 
        "material color at near clipping plane (for depth cuing)"
        Cons @ [evalProg.diderot:36.81-88] 
          [
            Lit: 1 @ [evalProg.diderot:36.82-83] 
            Lit: 1 @ [evalProg.diderot:36.84-85] 
            Lit: 1 @ [evalProg.diderot:36.86-87] 
          ]
      Input: mcfar= @ [evalProg.diderot:37.1-38.0] 
        "material color at far clipping plane"
        Cons @ [evalProg.diderot:37.61-68] 
          [
            Lit: 1 @ [evalProg.diderot:37.62-63] 
            Lit: 1 @ [evalProg.diderot:37.64-65] 
            Lit: 1 @ [evalProg.diderot:37.66-67] 
          ]
      Input: cmap= @ [evalProg.diderot:38.1-39.0] 
        "univariate colormap"
        Image @ [evalProg.diderot:38.50-123] 
          Lit: "/home/teocollin/gitcode/diderot/tests/lipRay/find/cmap.nrrd" @ [evalProg.diderot:38.61-122] 
      Input: cmin= @ [evalProg.diderot:39.1-40.0] 
        "value mapped to min end of colormap"
        Lit: 0.e0 @ [evalProg.diderot:39.59-62] 
      Input: cmax= @ [evalProg.diderot:40.1-41.0] 
        "value mapped to max end of colormap. By default cmin==cmax==0, which disables this colormapping"
        Lit: 0.1e1 @ [evalProg.diderot:40.119-122] 
      Var @ [evalProg.diderot:41.1-42.0] 
        Decl: CM= @ [evalProg.diderot:41.1-42.0] 
          BinOp: ⊛ @ [evalProg.diderot:41.20-40] 
            Var: tent @ [evalProg.diderot:41.20-24] 
            Apply @ [evalProg.diderot:41.29-40] 
              Var: clamp @ [evalProg.diderot:41.29-34] 
              [
                Var: cmap @ [evalProg.diderot:41.35-39] 
              ]
      Input: light= @ [evalProg.diderot:43.1-44.0] 
        Lit: true @ [evalProg.diderot:43.20-24] 
      Input: phongKa= @ [evalProg.diderot:44.1-45.0] 
        "Blinn-Phong ambient component"
        Lit: 0.5e0 @ [evalProg.diderot:44.56-59] 
      Input: phongKd= @ [evalProg.diderot:45.1-46.0] 
        "Blinn-Phong diffuse component"
        Lit: 0.5e0 @ [evalProg.diderot:45.56-59] 
      Input: phongKs= @ [evalProg.diderot:46.1-47.0] 
        "Blinn-Phong specular component"
        Lit: 0.e0 @ [evalProg.diderot:46.57-60] 
      Input: phongSp= @ [evalProg.diderot:47.1-48.0] 
        "Blinn-Phong specularity exponent"
        Lit: 60 @ [evalProg.diderot:47.59-61] 
      Input: maxAlpha= @ [evalProg.diderot:48.1-49.0] 
        "maximum opacity on rendered surface"
        Lit: 1 @ [evalProg.diderot:48.63-64] 
      Input: lightVsp= @ [evalProg.diderot:49.1-39] 
        Cons @ [evalProg.diderot:49.23-38] 
          [
            Lit: 0.e0 @ [evalProg.diderot:49.24-27] 
            Lit: 0.e0 @ [evalProg.diderot:49.29-32] 
            Lit: 0.1e1 @ [evalProg.diderot:49.34-37] 
          ]
      Var @ [evalProg.diderot:50.1-51.0] 
        Decl: L= @ [evalProg.diderot:50.1-51.0] 
          BinOp: • @ [evalProg.diderot:50.10-59] 
            Apply @ [evalProg.diderot:50.10-37] 
              Var: transpose @ [evalProg.diderot:50.10-19] 
              [
                Cons @ [evalProg.diderot:50.20-36] 
                  [
                    Var: camU @ [evalProg.diderot:50.21-25] 
                    Var: camV @ [evalProg.diderot:50.26-30] 
                    Var: camN @ [evalProg.diderot:50.31-35] 
                  ]
              ]
            Apply @ [evalProg.diderot:50.40-59] 
              Var: normalize @ [evalProg.diderot:50.40-49] 
              [
                Var: lightVsp @ [evalProg.diderot:50.50-58] 
              ]
      Func: sign @ [evalProg.diderot:54.1-60.1] 
        Int @ [evalProg.diderot:54.10-14] 
        [
          Param: x @ [evalProg.diderot:54.19-25] 
            Tensor @ [evalProg.diderot:54.19-24] 
              [ ]
        ]
        Stmt @ [evalProg.diderot:54.1-60.1] 
          IfThenElse @ [evalProg.diderot:55.3-58.0] 
            BinOp: > @ [evalProg.diderot:55.7-14] 
              Var: x @ [evalProg.diderot:55.7-8] 
              Lit: 0.e0 @ [evalProg.diderot:55.11-14] 
            Return @ [evalProg.diderot:55.17-27] 
              Lit: 1 @ [evalProg.diderot:55.24-25] 
            IfThenElse @ [evalProg.diderot:56.8-58.0] 
              BinOp: < @ [evalProg.diderot:56.12-19] 
                Var: x @ [evalProg.diderot:56.12-13] 
                Lit: 0.e0 @ [evalProg.diderot:56.16-19] 
              Return @ [evalProg.diderot:56.21-32] 
                UnaryOp: unary - @ [evalProg.diderot:56.28-30] 
                  Lit: 1 @ [evalProg.diderot:56.29-30] 
              Return @ [evalProg.diderot:57.9-19] 
                Lit: 0 @ [evalProg.diderot:57.16-17] 
    ]
    Strand: ray @ [evalProg.diderot:60.1-178.3] 
      [
        Param: ui @ [evalProg.diderot:60.12-18] 
          Int @ [evalProg.diderot:60.12-16] 
        Param: vi @ [evalProg.diderot:60.20-26] 
          Int @ [evalProg.diderot:60.20-24] 
      ]
      [
        VarDcl @ [evalProg.diderot:61.3-60] 
        VarDcl @ [evalProg.diderot:62.3-63.0] 
        VarDcl @ [evalProg.diderot:63.3-64.0] 
        VarDcl @ [evalProg.diderot:65.3-66.0] 
        VarDcl @ [evalProg.diderot:66.3-32] 
        VarDcl @ [evalProg.diderot:67.3-68.0] 
        VarDcl @ [evalProg.diderot:68.3-69.0] 
        VarDcl @ [evalProg.diderot:69.3-70.0] 
        VarDcl @ [evalProg.diderot:70.3-42] 
        VarDcl @ [evalProg.diderot:71.3-54] 
        VarDcl @ [evalProg.diderot:72.3-73.0] 
        VarDcl @ [evalProg.diderot:73.3-74.0] 
        VarDcl @ [evalProg.diderot:74.3-75.0] 
        VarDcl @ [evalProg.diderot:75.3-76.0] 
        VarDcl @ [evalProg.diderot:76.3-77.0] 
        VarDcl @ [evalProg.diderot:77.3-78.0] 
        VarDcl @ [evalProg.diderot:78.3-79.0] 
        VarDcl @ [evalProg.diderot:79.3-80.0] 
        VarDcl @ [evalProg.diderot:80.3-81.0] 
        VarDcl: output @ [evalProg.diderot:81.3-82.0] 
        VarDcl: output @ [evalProg.diderot:82.3-83.0] 
      ]
      [
        Method: Start @ [evalProg.diderot:84.3-90.3] 
          Block @ [evalProg.diderot:84.8-88.4] 
            [
              IfThen @ [evalProg.diderot:85.5-86.5] 
                BinOp: == @ [evalProg.diderot:85.8-16] 
                  Var: len @ [evalProg.diderot:85.8-11] 
                  Lit: 0 @ [evalProg.diderot:85.15-16] 
                Stabilize @ [evalProg.diderot:85.18-28] 
              Assign: cc= @ [evalProg.diderot:86.5-87.0] 
                Subscript @ [evalProg.diderot:86.10-29] 
                  Select @ [evalProg.diderot:86.10-29] 
                    Var: a @ [evalProg.diderot:86.10-11] 
                    cells
                  [
                    Subscript @ [evalProg.diderot:86.18-28] 
                      Var: cells @ [evalProg.diderot:86.18-23] 
                      [
                        Var: idx @ [evalProg.diderot:86.24-27] 
                      ]
                  ]
              Assign: fc= @ [evalProg.diderot:87.5-88.0] 
                Apply @ [evalProg.diderot:87.10-24] 
                  Select @ [evalProg.diderot:87.10-24] 
                    Var: c @ [evalProg.diderot:87.10-11] 
                    funcCell
                  [
                    Var: cc @ [evalProg.diderot:87.21-23] 
                  ]
            ]
        Method: Update @ [evalProg.diderot:90.3-178.1] 
          Block @ [evalProg.diderot:90.10-176.0] 
            [
              Print @ [evalProg.diderot:91.5-92.0] 
                [
                  Lit: "Interval:" @ [evalProg.diderot:91.11-22] 
                  Cons @ [evalProg.diderot:91.24-29] 
                    [
                      Var: s @ [evalProg.diderot:91.25-26] 
                      Var: e @ [evalProg.diderot:91.27-28] 
                    ]
                  Lit: "\n" @ [evalProg.diderot:91.30-34] 
                ]
              Print @ [evalProg.diderot:92.5-93.0] 
                [
                  Lit: "inner itter:" @ [evalProg.diderot:92.11-25] 
                  Var: intersectionItter @ [evalProg.diderot:92.26-43] 
                  Lit: "\n" @ [evalProg.diderot:92.44-48] 
                ]
              Print @ [evalProg.diderot:93.5-94.0] 
                [
                  Lit: "Outer itter:" @ [evalProg.diderot:93.11-25] 
                  Var: itter @ [evalProg.diderot:93.26-31] 
                  Lit: "\n" @ [evalProg.diderot:93.32-36] 
                ]
              Decl @ [evalProg.diderot:90.10-176.0] 
                Decl: startRay= @ [evalProg.diderot:94.5-95.0] 
                  BinOp: + @ [evalProg.diderot:94.21-74] 
                    Cons @ [evalProg.diderot:94.21-45] 
                      [
                        Subscript @ [evalProg.diderot:94.22-32] 
                          Var: rayOrig @ [evalProg.diderot:94.22-29] 
                          [
                            Lit: 0 @ [evalProg.diderot:94.30-31] 
                          ]
                        Subscript @ [evalProg.diderot:94.34-44] 
                          Var: rayOrig @ [evalProg.diderot:94.34-41] 
                          [
                            Lit: 1 @ [evalProg.diderot:94.42-43] 
                          ]
                      ]
                    BinOp: * @ [evalProg.diderot:94.48-74] 
                      Var: s @ [evalProg.diderot:94.48-49] 
                      Cons @ [evalProg.diderot:94.52-74] 
                        [
                          Subscript @ [evalProg.diderot:94.53-62] 
                            Var: rayVec @ [evalProg.diderot:94.53-59] 
                            [
                              Lit: 0 @ [evalProg.diderot:94.60-61] 
                            ]
                          Subscript @ [evalProg.diderot:94.64-73] 
                            Var: rayVec @ [evalProg.diderot:94.64-70] 
                            [
                              Lit: 1 @ [evalProg.diderot:94.71-72] 
                            ]
                        ]
              Decl @ [evalProg.diderot:90.10-176.0] 
                Decl: endRay= @ [evalProg.diderot:95.5-96.0] 
                  BinOp: + @ [evalProg.diderot:95.19-72] 
                    Cons @ [evalProg.diderot:95.19-43] 
                      [
                        Subscript @ [evalProg.diderot:95.20-30] 
                          Var: rayOrig @ [evalProg.diderot:95.20-27] 
                          [
                            Lit: 0 @ [evalProg.diderot:95.28-29] 
                          ]
                        Subscript @ [evalProg.diderot:95.32-42] 
                          Var: rayOrig @ [evalProg.diderot:95.32-39] 
                          [
                            Lit: 1 @ [evalProg.diderot:95.40-41] 
                          ]
                      ]
                    BinOp: * @ [evalProg.diderot:95.46-72] 
                      Var: e @ [evalProg.diderot:95.46-47] 
                      Cons @ [evalProg.diderot:95.50-72] 
                        [
                          Subscript @ [evalProg.diderot:95.51-60] 
                            Var: rayVec @ [evalProg.diderot:95.51-57] 
                            [
                              Lit: 0 @ [evalProg.diderot:95.58-59] 
                            ]
                          Subscript @ [evalProg.diderot:95.62-71] 
                            Var: rayVec @ [evalProg.diderot:95.62-68] 
                            [
                              Lit: 1 @ [evalProg.diderot:95.69-70] 
                            ]
                        ]
              Decl @ [evalProg.diderot:90.10-176.0] 
                Decl: invertA= @ [evalProg.diderot:96.5-97.0] 
                  Apply @ [evalProg.diderot:96.20-49] 
                    Select @ [evalProg.diderot:96.20-49] 
                      Var: cc @ [evalProg.diderot:96.20-22] 
                      inverseTransform
                    [
                      Var: startRay @ [evalProg.diderot:96.40-48] 
                    ]
              Decl @ [evalProg.diderot:90.10-176.0] 
                Decl: invertB= @ [evalProg.diderot:97.5-98.0] 
                  Apply @ [evalProg.diderot:97.20-47] 
                    Select @ [evalProg.diderot:97.20-47] 
                      Var: cc @ [evalProg.diderot:97.20-22] 
                      inverseTransform
                    [
                      Var: endRay @ [evalProg.diderot:97.40-46] 
                    ]
              Print @ [evalProg.diderot:98.5-99.0] 
                [
                  Lit: "inverses:" @ [evalProg.diderot:98.11-22] 
                  Var: invertA @ [evalProg.diderot:98.24-31] 
                  Var: invertB @ [evalProg.diderot:98.33-40] 
                  Lit: "\n" @ [evalProg.diderot:98.41-45] 
                ]
              Decl @ [evalProg.diderot:90.10-176.0] 
                Decl: faVal= @ [evalProg.diderot:99.5-100.0] 
                  Apply @ [evalProg.diderot:99.18-38] 
                    Select @ [evalProg.diderot:99.18-38] 
                      Var: fc @ [evalProg.diderot:99.18-20] 
                      refField
                    [
                      Var: invertA @ [evalProg.diderot:99.30-37] 
                    ]
              Decl @ [evalProg.diderot:90.10-176.0] 
                Decl: fa= @ [evalProg.diderot:100.5-101.0] 
                  BinOp: - @ [evalProg.diderot:100.15-47] 
                    BinOp: - @ [evalProg.diderot:100.15-35] 
                      Var: faVal @ [evalProg.diderot:100.15-20] 
                      BinOp: * @ [evalProg.diderot:100.23-35] 
                        Subscript @ [evalProg.diderot:100.23-32] 
                          Var: rayVec @ [evalProg.diderot:100.23-29] 
                          [
                            Lit: 2 @ [evalProg.diderot:100.30-31] 
                          ]
                        Var: s @ [evalProg.diderot:100.33-34] 
                    Subscript @ [evalProg.diderot:100.37-47] 
                      Var: rayOrig @ [evalProg.diderot:100.37-44] 
                      [
                        Lit: 2 @ [evalProg.diderot:100.45-46] 
                      ]
              Decl @ [evalProg.diderot:90.10-176.0] 
                Decl: fb= @ [evalProg.diderot:101.5-102.0] 
                  BinOp: - @ [evalProg.diderot:101.15-62] 
                    BinOp: - @ [evalProg.diderot:101.15-50] 
                      Apply @ [evalProg.diderot:101.15-35] 
                        Select @ [evalProg.diderot:101.15-35] 
                          Var: fc @ [evalProg.diderot:101.15-17] 
                          refField
                        [
                          Var: invertB @ [evalProg.diderot:101.27-34] 
                        ]
                      BinOp: * @ [evalProg.diderot:101.38-50] 
                        Subscript @ [evalProg.diderot:101.38-47] 
                          Var: rayVec @ [evalProg.diderot:101.38-44] 
                          [
                            Lit: 2 @ [evalProg.diderot:101.45-46] 
                          ]
                        Var: e @ [evalProg.diderot:101.48-49] 
                    Subscript @ [evalProg.diderot:101.52-62] 
                      Var: rayOrig @ [evalProg.diderot:101.52-59] 
                      [
                        Lit: 2 @ [evalProg.diderot:101.60-61] 
                      ]
              Print @ [evalProg.diderot:102.5-103.0] 
                [
                  Lit: "Vals:" @ [evalProg.diderot:102.11-18] 
                  Cons @ [evalProg.diderot:102.19-26] 
                    [
                      Var: fa @ [evalProg.diderot:102.20-22] 
                      Var: fb @ [evalProg.diderot:102.23-25] 
                    ]
                  Lit: "\n" @ [evalProg.diderot:102.27-31] 
                ]
              IfThen @ [evalProg.diderot:103.5-107.5] 
                AndAlso @ [evalProg.diderot:103.9-38] 
                  BinOp: < @ [evalProg.diderot:103.9-25] 
                    UnaryOp: |()| @ [evalProg.diderot:103.9-18] 
                      BinOp: - @ [evalProg.diderot:103.10-17] 
                        Var: fa @ [evalProg.diderot:103.10-12] 
                        Var: fb @ [evalProg.diderot:103.15-17] 
                    Var: eps @ [evalProg.diderot:103.21-24] 
                  BinOp: > @ [evalProg.diderot:103.28-38] 
                    UnaryOp: |()| @ [evalProg.diderot:103.28-32] 
                      Var: fa @ [evalProg.diderot:103.29-31] 
                    Var: eps @ [evalProg.diderot:103.35-38] 
                Block @ [evalProg.diderot:103.39-107.0] 
                  [
                    Assign: s+= @ [evalProg.diderot:104.7-105.0] 
                      Var: eps @ [evalProg.diderot:104.10-13] 
                    Continue @ [evalProg.diderot:105.7-106.0] 
                  ]
              Decl @ [evalProg.diderot:90.10-176.0] 
                Decl: cup= @ [evalProg.diderot:107.5-108.0] 
                  BinOp: / @ [evalProg.diderot:107.16-39] 
                    BinOp: - @ [evalProg.diderot:107.17-29] 
                      BinOp: * @ [evalProg.diderot:107.17-23] 
                        Var: s @ [evalProg.diderot:107.17-18] 
                        Var: fb @ [evalProg.diderot:107.20-22] 
                      BinOp: * @ [evalProg.diderot:107.25-29] 
                        Var: e @ [evalProg.diderot:107.25-26] 
                        Var: fa @ [evalProg.diderot:107.27-29] 
                    BinOp: - @ [evalProg.diderot:107.32-38] 
                      Var: fb @ [evalProg.diderot:107.32-34] 
                      Var: fa @ [evalProg.diderot:107.36-38] 
              Print @ [evalProg.diderot:108.5-109.0] 
                [
                  Lit: "Mid time:" @ [evalProg.diderot:108.11-22] 
                  Var: cup @ [evalProg.diderot:108.24-27] 
                  Lit: "\n" @ [evalProg.diderot:108.29-33] 
                ]
              Decl @ [evalProg.diderot:90.10-176.0] 
                Decl: midRay= @ [evalProg.diderot:109.5-110.0] 
                  BinOp: + @ [evalProg.diderot:109.19-75] 
                    Cons @ [evalProg.diderot:109.19-43] 
                      [
                        Subscript @ [evalProg.diderot:109.20-30] 
                          Var: rayOrig @ [evalProg.diderot:109.20-27] 
                          [
                            Lit: 0 @ [evalProg.diderot:109.28-29] 
                          ]
                        Subscript @ [evalProg.diderot:109.32-42] 
                          Var: rayOrig @ [evalProg.diderot:109.32-39] 
                          [
                            Lit: 1 @ [evalProg.diderot:109.40-41] 
                          ]
                      ]
                    BinOp: * @ [evalProg.diderot:109.47-75] 
                      Var: cup @ [evalProg.diderot:109.47-50] 
                      Cons @ [evalProg.diderot:109.53-75] 
                        [
                          Subscript @ [evalProg.diderot:109.54-63] 
                            Var: rayVec @ [evalProg.diderot:109.54-60] 
                            [
                              Lit: 0 @ [evalProg.diderot:109.61-62] 
                            ]
                          Subscript @ [evalProg.diderot:109.65-74] 
                            Var: rayVec @ [evalProg.diderot:109.65-71] 
                            [
                              Lit: 1 @ [evalProg.diderot:109.72-73] 
                            ]
                        ]
              Decl @ [evalProg.diderot:90.10-176.0] 
                Decl: invertC= @ [evalProg.diderot:110.5-111.0] 
                  Apply @ [evalProg.diderot:110.20-47] 
                    Select @ [evalProg.diderot:110.20-47] 
                      Var: cc @ [evalProg.diderot:110.20-22] 
                      inverseTransform
                    [
                      Var: midRay @ [evalProg.diderot:110.40-46] 
                    ]
              Decl @ [evalProg.diderot:90.10-176.0] 
                Decl: fmVal= @ [evalProg.diderot:111.5-112.0] 
                  Apply @ [evalProg.diderot:111.18-38] 
                    Select @ [evalProg.diderot:111.18-38] 
                      Var: fc @ [evalProg.diderot:111.18-20] 
                      refField
                    [
                      Var: invertC @ [evalProg.diderot:111.30-37] 
                    ]
              Decl @ [evalProg.diderot:90.10-176.0] 
                Decl: fm= @ [evalProg.diderot:112.5-113.0] 
                  BinOp: - @ [evalProg.diderot:112.15-51] 
                    BinOp: - @ [evalProg.diderot:112.15-39] 
                      Var: fmVal @ [evalProg.diderot:112.15-20] 
                      BinOp: * @ [evalProg.diderot:112.23-39] 
                        Subscript @ [evalProg.diderot:112.23-32] 
                          Var: rayVec @ [evalProg.diderot:112.23-29] 
                          [
                            Lit: 2 @ [evalProg.diderot:112.30-31] 
                          ]
                        Var: cup @ [evalProg.diderot:112.34-37] 
                    Subscript @ [evalProg.diderot:112.41-51] 
                      Var: rayOrig @ [evalProg.diderot:112.41-48] 
                      [
                        Lit: 2 @ [evalProg.diderot:112.49-50] 
                      ]
              Print @ [evalProg.diderot:113.5-114.0] 
                [
                  Lit: "all vals:" @ [evalProg.diderot:113.11-22] 
                  Cons @ [evalProg.diderot:113.23-35] 
                    [
                      Var: fa @ [evalProg.diderot:113.24-26] 
                      Var: fm @ [evalProg.diderot:113.28-30] 
                      Var: fb @ [evalProg.diderot:113.32-34] 
                    ]
                  Lit: "\n" @ [evalProg.diderot:113.36-40] 
                ]
              Assign: intersectionItter+= @ [evalProg.diderot:114.5-115.0] 
                Lit: 1 @ [evalProg.diderot:114.24-25] 
              IfThenElse @ [evalProg.diderot:115.5-123.5] 
                BinOp: < @ [evalProg.diderot:115.9-31] 
                  BinOp: * @ [evalProg.diderot:115.9-28] 
                    Apply @ [evalProg.diderot:115.9-17] 
                      Var: sign @ [evalProg.diderot:115.9-13] 
                      [
                        Var: fa @ [evalProg.diderot:115.14-16] 
                      ]
                    Apply @ [evalProg.diderot:115.19-27] 
                      Var: sign @ [evalProg.diderot:115.19-23] 
                      [
                        Var: fm @ [evalProg.diderot:115.24-26] 
                      ]
                  Lit: 0 @ [evalProg.diderot:115.30-31] 
                Assign: e= @ [evalProg.diderot:116.7-117.0] 
                  Var: cup @ [evalProg.diderot:116.11-14] 
                IfThen @ [evalProg.diderot:119.10-123.5] 
                  BinOp: > @ [evalProg.diderot:119.14-36] 
                    BinOp: * @ [evalProg.diderot:119.14-33] 
                      Apply @ [evalProg.diderot:119.14-22] 
                        Var: sign @ [evalProg.diderot:119.14-18] 
                        [
                          Var: fa @ [evalProg.diderot:119.19-21] 
                        ]
                      Apply @ [evalProg.diderot:119.24-32] 
                        Var: sign @ [evalProg.diderot:119.24-28] 
                        [
                          Var: fm @ [evalProg.diderot:119.29-31] 
                        ]
                    Lit: 0 @ [evalProg.diderot:119.35-36] 
                  Assign: s= @ [evalProg.diderot:121.2-122.0] 
                    Var: cup @ [evalProg.diderot:121.6-9] 
              Print @ [evalProg.diderot:123.5-124.0] 
                [
                  Lit: "new interval:" @ [evalProg.diderot:123.11-26] 
                  Cons @ [evalProg.diderot:123.28-33] 
                    [
                      Var: s @ [evalProg.diderot:123.29-30] 
                      Var: e @ [evalProg.diderot:123.31-32] 
                    ]
                  Lit: "\n" @ [evalProg.diderot:123.34-38] 
                ]
              IfThenElse @ [evalProg.diderot:125.5-171.0] 
                OrElse @ [evalProg.diderot:125.9-59] 
                  BinOp: < @ [evalProg.diderot:125.9-20] 
                    UnaryOp: |()| @ [evalProg.diderot:125.9-13] 
                      Var: fa @ [evalProg.diderot:125.10-12] 
                    Var: eps @ [evalProg.diderot:125.16-19] 
                  OrElse @ [evalProg.diderot:125.20-59] 
                    BinOp: < @ [evalProg.diderot:125.23-34] 
                      UnaryOp: |()| @ [evalProg.diderot:125.23-27] 
                        Var: fm @ [evalProg.diderot:125.24-26] 
                      Var: eps @ [evalProg.diderot:125.30-33] 
                    BinOp: > @ [evalProg.diderot:125.37-59] 
                      Var: intersectionItter @ [evalProg.diderot:125.37-54] 
                      Lit: 32 @ [evalProg.diderot:125.57-59] 
                Block @ [evalProg.diderot:125.60-169.0] 
                  [
                    Assign: intersectionItter= @ [evalProg.diderot:126.7-127.0] 
                      Lit: 0 @ [evalProg.diderot:126.27-28] 
                    IfThenElse @ [evalProg.diderot:127.7-168.0] 
                      AndAlso @ [evalProg.diderot:127.11-35] 
                        BinOp: > @ [evalProg.diderot:127.11-22] 
                          UnaryOp: |()| @ [evalProg.diderot:127.11-15] 
                            Var: fm @ [evalProg.diderot:127.12-14] 
                          Var: eps @ [evalProg.diderot:127.18-21] 
                        BinOp: > @ [evalProg.diderot:127.25-35] 
                          UnaryOp: |()| @ [evalProg.diderot:127.25-29] 
                            Var: fa @ [evalProg.diderot:127.26-28] 
                          Var: eps @ [evalProg.diderot:127.32-35] 
                      Block @ [evalProg.diderot:127.37-135.0] 
                        [
                          Assign: itter+= @ [evalProg.diderot:128.2-129.0] 
                            Lit: 1 @ [evalProg.diderot:128.9-10] 
                          IfThen @ [evalProg.diderot:129.2-130.2] 
                            BinOp: >= @ [evalProg.diderot:129.5-17] 
                              Var: itter @ [evalProg.diderot:129.5-10] 
                              Var: len @ [evalProg.diderot:129.14-17] 
                            Block @ [evalProg.diderot:129.18-130.0] 
                              [
                                Print @ [evalProg.diderot:129.19-69] 
                                  [
                                    Lit: "Fin pixel=============================\n" @ [evalProg.diderot:129.25-67] 
                                  ]
                                Stabilize @ [evalProg.diderot:129.69-79] 
                              ]
                          Assign: interval= @ [evalProg.diderot:130.2-33] 
                            Subscript @ [evalProg.diderot:130.13-32] 
                              Var: times @ [evalProg.diderot:130.13-18] 
                              [
                                BinOp: + @ [evalProg.diderot:130.19-31] 
                                  Var: offset @ [evalProg.diderot:130.19-25] 
                                  Var: itter @ [evalProg.diderot:130.26-31] 
                              ]
                          Assign: cc= @ [evalProg.diderot:130.34-131.0] 
                            Subscript @ [evalProg.diderot:130.39-69] 
                              Select @ [evalProg.diderot:130.39-69] 
                                Var: a @ [evalProg.diderot:130.39-40] 
                                cells
                              [
                                Subscript @ [evalProg.diderot:130.47-68] 
                                  Var: cells @ [evalProg.diderot:130.47-52] 
                                  [
                                    BinOp: + @ [evalProg.diderot:130.53-67] 
                                      Var: offset @ [evalProg.diderot:130.53-59] 
                                      Var: itter @ [evalProg.diderot:130.62-67] 
                                  ]
                              ]
                          Assign: s= @ [evalProg.diderot:131.2-18] 
                            Subscript @ [evalProg.diderot:131.6-17] 
                              Var: interval @ [evalProg.diderot:131.6-14] 
                              [
                                Lit: 0 @ [evalProg.diderot:131.15-16] 
                              ]
                          Assign: e= @ [evalProg.diderot:131.19-132.0] 
                            Subscript @ [evalProg.diderot:131.23-34] 
                              Var: interval @ [evalProg.diderot:131.23-31] 
                              [
                                Lit: 1 @ [evalProg.diderot:131.32-33] 
                              ]
                          Assign: fc= @ [evalProg.diderot:132.2-133.0] 
                            Apply @ [evalProg.diderot:132.7-21] 
                              Select @ [evalProg.diderot:132.7-21] 
                                Var: c @ [evalProg.diderot:132.7-8] 
                                funcCell
                              [
                                Var: cc @ [evalProg.diderot:132.18-20] 
                              ]
                          Print @ [evalProg.diderot:133.2-134.0] 
                            [
                              Lit: "Next interval!\n" @ [evalProg.diderot:133.8-26] 
                            ]
                          Continue @ [evalProg.diderot:134.2-11] 
                        ]
                      Block @ [evalProg.diderot:135.11-168.0] 
                        [
                          Decl @ [evalProg.diderot:135.11-168.0] 
                            Decl: grad= @ [evalProg.diderot:136.2-137.0] 
                              Cons @ [evalProg.diderot:136.14-19] 
                                [
                                  Lit: 0 @ [evalProg.diderot:136.15-16] 
                                  Lit: 0 @ [evalProg.diderot:136.17-18] 
                                ]
                          Decl @ [evalProg.diderot:135.11-168.0] 
                            Decl: loc= @ [evalProg.diderot:137.2-138.0] 
                              Var: rayOrig @ [evalProg.diderot:137.13-20] 
                          IfThen @ [evalProg.diderot:138.2-142.2] 
                            BinOp: < @ [evalProg.diderot:138.6-16] 
                              UnaryOp: |()| @ [evalProg.diderot:138.6-10] 
                                Var: fm @ [evalProg.diderot:138.7-9] 
                              Var: eps @ [evalProg.diderot:138.13-16] 
                            Block @ [evalProg.diderot:138.17-142.0] 
                              [
                                Assign: grad= @ [evalProg.diderot:139.4-140.0] 
                                  Apply @ [evalProg.diderot:139.11-61] 
                                    UnaryOp: ∇ @ [evalProg.diderot:139.11-53] 
                                      BinOp: ∘ @ [evalProg.diderot:139.17-52] 
                                        Select @ [evalProg.diderot:139.17-28] 
                                          Var: fc @ [evalProg.diderot:139.17-19] 
                                          refField
                                        Select @ [evalProg.diderot:139.33-52] 
                                          Var: cc @ [evalProg.diderot:139.33-35] 
                                          inverseTransform
                                    [
                                      Var: midRay @ [evalProg.diderot:139.54-60] 
                                    ]
                                Assign: out= @ [evalProg.diderot:140.4-141.0] 
                                  Var: fmVal @ [evalProg.diderot:140.10-15] 
                              ]
                          IfThen @ [evalProg.diderot:142.2-147.2] 
                            BinOp: < @ [evalProg.diderot:142.6-16] 
                              UnaryOp: |()| @ [evalProg.diderot:142.6-10] 
                                Var: fa @ [evalProg.diderot:142.7-9] 
                              Var: eps @ [evalProg.diderot:142.13-16] 
                            Block @ [evalProg.diderot:142.17-147.0] 
                              [
                                Assign: cup= @ [evalProg.diderot:143.4-12] 
                                  Var: s @ [evalProg.diderot:143.10-11] 
                                Assign: grad= @ [evalProg.diderot:144.4-145.0] 
                                  Apply @ [evalProg.diderot:144.11-63] 
                                    UnaryOp: ∇ @ [evalProg.diderot:144.11-53] 
                                      BinOp: ∘ @ [evalProg.diderot:144.17-52] 
                                        Select @ [evalProg.diderot:144.17-28] 
                                          Var: fc @ [evalProg.diderot:144.17-19] 
                                          refField
                                        Select @ [evalProg.diderot:144.33-52] 
                                          Var: cc @ [evalProg.diderot:144.33-35] 
                                          inverseTransform
                                    [
                                      Var: startRay @ [evalProg.diderot:144.54-62] 
                                    ]
                                Assign: out= @ [evalProg.diderot:145.4-146.0] 
                                  Var: faVal @ [evalProg.diderot:145.10-15] 
                              ]
                          Print @ [evalProg.diderot:147.2-148.0] 
                            [
                              Lit: "Out val:" @ [evalProg.diderot:147.8-18] 
                              Var: out @ [evalProg.diderot:147.19-22] 
                              Lit: "\n" @ [evalProg.diderot:147.23-27] 
                            ]
                          Print @ [evalProg.diderot:148.2-149.0] 
                            [
                              Lit: "Grad val:" @ [evalProg.diderot:148.8-19] 
                              Var: grad @ [evalProg.diderot:148.20-24] 
                              Lit: "\n" @ [evalProg.diderot:148.25-29] 
                            ]
                          Decl @ [evalProg.diderot:135.11-168.0] 
                            Decl: mcol= @ [evalProg.diderot:149.2-150.0] 
                              Cons @ [evalProg.diderot:149.14-21] 
                                [
                                  Lit: 1 @ [evalProg.diderot:149.15-16] 
                                  Lit: 1 @ [evalProg.diderot:149.17-18] 
                                  Lit: 1 @ [evalProg.diderot:149.19-20] 
                                ]
                          IfThen @ [evalProg.diderot:150.2-153.2] 
                            BinOp: != @ [evalProg.diderot:150.6-18] 
                              Var: cmin @ [evalProg.diderot:150.6-10] 
                              Var: cmax @ [evalProg.diderot:150.14-18] 
                            Assign: mcol= @ [evalProg.diderot:151.6-152.0] 
                              Apply @ [evalProg.diderot:151.13-45] 
                                Var: CM @ [evalProg.diderot:151.13-15] 
                                [
                                  Apply @ [evalProg.diderot:151.16-44] 
                                    Var: lerp @ [evalProg.diderot:151.16-20] 
                                    [
                                      UnaryOp: unary - @ [evalProg.diderot:151.21-23] 
                                        Lit: 1 @ [evalProg.diderot:151.22-23] 
                                      Lit: 1 @ [evalProg.diderot:151.25-26] 
                                      Var: cmin @ [evalProg.diderot:151.28-32] 
                                      Var: out @ [evalProg.diderot:151.34-37] 
                                      Var: cmax @ [evalProg.diderot:151.39-43] 
                                    ]
                                ]
                          IfThenElse @ [evalProg.diderot:153.2-166.0] 
                            Var: light @ [evalProg.diderot:153.5-10] 
                            Block @ [evalProg.diderot:153.11-163.3] 
                              [
                                Decl @ [evalProg.diderot:153.11-163.3] 
                                  Decl: N= @ [evalProg.diderot:154.4-155.0] 
                                    Cons @ [evalProg.diderot:154.13-35] 
                                      [
                                        Subscript @ [evalProg.diderot:154.14-21] 
                                          Var: grad @ [evalProg.diderot:154.14-18] 
                                          [
                                            Lit: 0 @ [evalProg.diderot:154.19-20] 
                                          ]
                                        Subscript @ [evalProg.diderot:154.23-30] 
                                          Var: grad @ [evalProg.diderot:154.23-27] 
                                          [
                                            Lit: 1 @ [evalProg.diderot:154.28-29] 
                                          ]
                                        UnaryOp: unary - @ [evalProg.diderot:154.32-34] 
                                          Lit: 1 @ [evalProg.diderot:154.33-34] 
                                      ]
                                Decl @ [evalProg.diderot:153.11-163.3] 
                                  Decl: H= @ [evalProg.diderot:155.4-156.0] 
                                    Apply @ [evalProg.diderot:155.13-44] 
                                      Var: normalize @ [evalProg.diderot:155.13-22] 
                                      [
                                        BinOp: + @ [evalProg.diderot:155.23-43] 
                                          UnaryOp: unary - @ [evalProg.diderot:155.23-41] 
                                            Apply @ [evalProg.diderot:155.24-41] 
                                              Var: normalize @ [evalProg.diderot:155.24-33] 
                                              [
                                                Var: rayVec @ [evalProg.diderot:155.34-40] 
                                              ]
                                          Var: L @ [evalProg.diderot:155.42-43] 
                                      ]
                                Decl @ [evalProg.diderot:153.11-163.3] 
                                  Decl: lightColor= @ [evalProg.diderot:156.4-157.0] 
                                    Apply @ [evalProg.diderot:156.22-69] 
                                      Var: lerp @ [evalProg.diderot:156.22-26] 
                                      [
                                        Var: mcnear @ [evalProg.diderot:156.27-33] 
                                        Var: mcfar @ [evalProg.diderot:156.35-40] 
                                        Var: camNearVsp @ [evalProg.diderot:156.42-52] 
                                        Var: cup @ [evalProg.diderot:156.54-57] 
                                        Var: camFarVsp @ [evalProg.diderot:156.59-68] 
                                      ]
                                Decl @ [evalProg.diderot:153.11-163.3] 
                                  Decl: ambientTerm= @ [evalProg.diderot:158.4-159.0] 
                                    BinOp: * @ [evalProg.diderot:158.23-37] 
                                      Var: phongKa @ [evalProg.diderot:158.23-30] 
                                      Var: mcol @ [evalProg.diderot:158.33-37] 
                                Decl @ [evalProg.diderot:153.11-163.3] 
                                  Decl: diffuse= @ [evalProg.diderot:159.4-160.0] 
                                    BinOp: * @ [evalProg.diderot:159.19-67] 
                                      BinOp: * @ [evalProg.diderot:159.19-54] 
                                        Var: phongKd @ [evalProg.diderot:159.19-26] 
                                        Apply @ [evalProg.diderot:159.29-54] 
                                          Var: modulate @ [evalProg.diderot:159.29-37] 
                                          [
                                            Var: mcol @ [evalProg.diderot:159.38-42] 
                                            Var: lightColor @ [evalProg.diderot:159.43-53] 
                                          ]
                                      Apply @ [evalProg.diderot:159.55-67] 
                                        Var: max @ [evalProg.diderot:159.55-58] 
                                        [
                                          Lit: 0 @ [evalProg.diderot:159.59-60] 
                                          BinOp: • @ [evalProg.diderot:159.61-66] 
                                            Var: N @ [evalProg.diderot:159.61-62] 
                                            Var: L @ [evalProg.diderot:159.65-66] 
                                        ]
                                Decl @ [evalProg.diderot:153.11-163.3] 
                                  Decl: specular= @ [evalProg.diderot:160.4-161.0] 
                                    BinOp: * @ [evalProg.diderot:160.20-63] 
                                      BinOp: * @ [evalProg.diderot:160.20-38] 
                                        Var: phongKs @ [evalProg.diderot:160.20-27] 
                                        Var: lightColor @ [evalProg.diderot:160.28-38] 
                                      BinOp: ^ @ [evalProg.diderot:160.40-62] 
                                        Apply @ [evalProg.diderot:160.41-53] 
                                          Var: max @ [evalProg.diderot:160.41-44] 
                                          [
                                            Lit: 0 @ [evalProg.diderot:160.45-46] 
                                            BinOp: • @ [evalProg.diderot:160.47-52] 
                                              Var: N @ [evalProg.diderot:160.47-48] 
                                              Var: H @ [evalProg.diderot:160.51-52] 
                                          ]
                                        Var: phongSp @ [evalProg.diderot:160.55-62] 
                                Decl @ [evalProg.diderot:153.11-163.3] 
                                  Decl: fin= @ [evalProg.diderot:161.4-162.0] 
                                    BinOp: + @ [evalProg.diderot:161.15-47] 
                                      BinOp: + @ [evalProg.diderot:161.15-37] 
                                        Var: ambientTerm @ [evalProg.diderot:161.15-26] 
                                        Var: diffuse @ [evalProg.diderot:161.29-36] 
                                      Var: specular @ [evalProg.diderot:161.39-47] 
                                Assign: rgba= @ [evalProg.diderot:162.4-163.0] 
                                  Cons @ [evalProg.diderot:162.11-35] 
                                    [
                                      Subscript @ [evalProg.diderot:162.12-18] 
                                        Var: fin @ [evalProg.diderot:162.12-15] 
                                        [
                                          Lit: 0 @ [evalProg.diderot:162.16-17] 
                                        ]
                                      Subscript @ [evalProg.diderot:162.19-25] 
                                        Var: fin @ [evalProg.diderot:162.19-22] 
                                        [
                                          Lit: 1 @ [evalProg.diderot:162.23-24] 
                                        ]
                                      Subscript @ [evalProg.diderot:162.26-32] 
                                        Var: fin @ [evalProg.diderot:162.26-29] 
                                        [
                                          Lit: 2 @ [evalProg.diderot:162.30-31] 
                                        ]
                                      Lit: 1 @ [evalProg.diderot:162.33-34] 
                                    ]
                              ]
                            Assign: rgba= @ [evalProg.diderot:164.4-165.0] 
                              Cons @ [evalProg.diderot:164.11-38] 
                                [
                                  Subscript @ [evalProg.diderot:164.12-19] 
                                    Var: mcol @ [evalProg.diderot:164.12-16] 
                                    [
                                      Lit: 0 @ [evalProg.diderot:164.17-18] 
                                    ]
                                  Subscript @ [evalProg.diderot:164.20-27] 
                                    Var: mcol @ [evalProg.diderot:164.20-24] 
                                    [
                                      Lit: 1 @ [evalProg.diderot:164.25-26] 
                                    ]
                                  Subscript @ [evalProg.diderot:164.28-35] 
                                    Var: mcol @ [evalProg.diderot:164.28-32] 
                                    [
                                      Lit: 2 @ [evalProg.diderot:164.33-34] 
                                    ]
                                  Lit: 1 @ [evalProg.diderot:164.36-37] 
                                ]
                          Stabilize @ [evalProg.diderot:166.2-167.0] 
                        ]
                  ]
                Print @ [evalProg.diderot:170.8-29] 
                  [
                    Lit: "=========\n" @ [evalProg.diderot:170.14-27] 
                  ]
            ]
      ]
    Grid @ [evalProg.diderot:178.3-179.0] 
      Comprehension @ [evalProg.diderot:178.16-65] 
        Apply @ [evalProg.diderot:178.17-27] 
          Var: ray @ [evalProg.diderot:178.17-20] 
          [
            Var: ui @ [evalProg.diderot:178.21-23] 
            Var: vi @ [evalProg.diderot:178.24-26] 
          ]
        [
          Iterator: vi @ [evalProg.diderot:178.30-46] 
            Range @ [evalProg.diderot:178.36-46] 
              Lit: 0 @ [evalProg.diderot:178.36-37] 
              BinOp: - @ [evalProg.diderot:178.39-46] 
                Var: iresU @ [evalProg.diderot:178.39-44] 
                Lit: 1 @ [evalProg.diderot:178.45-46] 
          Iterator: ui @ [evalProg.diderot:178.48-64] 
            Range @ [evalProg.diderot:178.54-64] 
              Lit: 0 @ [evalProg.diderot:178.54-55] 
              BinOp: - @ [evalProg.diderot:178.57-64] 
                Var: iresV @ [evalProg.diderot:178.57-62] 
                Lit: 1 @ [evalProg.diderot:178.63-64] 
        ]
/* end program */
/* AST: After typechecking */
properties: StrandArray,HasStartMethod,ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[]),HasInputs,HasGlobals
input real isoval = 0.2e0;
input real thick = 0.7e-1;
input vec3 camEye = [0.3e1, -0.3e1, 0.3e1];
input vec3 camAt = [0.5e0, 0.5e0, 0.5e0];
input vec3 camUp = [0.e0, 0.e0, 0.1e1];
input real camFOV = 0.137e2;
input int iresU = 10;
input int iresV = 10;
input real camNear = -0.2e1;
input real camFar = 0.5e1;
input real refStep = 0.1e1;
input real rayStep = 0.1e-1;
input FemType: Mesh with type var:NONE a = loadFem(Mesh);
input FemType: Space with type var:msh b = loadFem(Space);
input FemType: FemFunc with type var:fns c = loadFem(FemFunc);
input real eps = 0.1e-5;
input int[] indecies;
input vec2[] times;
input int[] cells;
input ("material color at near clipping plane (for depth cuing)") vec3 mcnear = [0.1e1, 0.1e1, 0.1e1];
input ("material color at far clipping plane") vec3 mcfar = [0.1e1, 0.1e1, 0.1e1];
input ("univariate colormap") image(1)[3] cmap = loadImage<%1; $[3]> ("/home/teocollin/gitcode/diderot/tests/lipRay/find/cmap.nrrd");
input ("value mapped to min end of colormap") real cmin = 0.e0;
input ("value mapped to max end of colormap. By default cmin==cmax==0, which disables this colormapping") real cmax = 0.1e1;
input bool light = true;
input ("Blinn-Phong ambient component") real phongKa = 0.5e0;
input ("Blinn-Phong diffuse component") real phongKd = 0.5e0;
input ("Blinn-Phong specular component") real phongKs = 0.e0;
input ("Blinn-Phong specularity exponent") real phongSp = 0.6e2;
input ("maximum opacity on rendered surface") real maxAlpha = 0.1e1;
input vec3 lightVsp = [0.e0, 0.e0, 0.1e1];
function bool != (FemType: MeshCell with type var:msh cell1, FemType: MeshCell with type var:msh cell1)
{
  return != (extractFemItem(cell1, int, CellIndex(Mesh)), extractFemItem(cell1, int, CellIndex(Mesh)));
  }
function bool == (FemType: MeshCell with type var:msh cell1, FemType: MeshCell with type var:msh cell1)
{
  return == (extractFemItem(cell1, int, CellIndex(Mesh)), extractFemItem(cell1, int, CellIndex(Mesh)));
  }
function FemType: MeshPos with type var:msh findPos (FemType: Mesh with type var:msh mesh, vec2 pos)
{
  xn = [0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0, 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0];
  newtonInt = 0;
  cellInt = extractFemItem(mesh, int, StartCell(Mesh));
  numCell = - (extractFemItem(mesh, int, NumCell(Mesh)), 1);
  yayCells = extractFemItem(mesh, pos : vec2, int[], NearbyCell(File=spat.in)(Mesh));
  foreach (int cellItter in yayCells) {
    cellInt = cellItter;
    A = @<#; %2; $[2,2]> (inv<#; %2> (∇⊗<#; %2; $[]; %2> (femField(mesh,cellInt,field(2)[2], Transform, ))), [0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0, 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0]);
    foreach (int newtonItter in $range (0, 16)) {
      delta = @<#; %2; $[2]> (•<#; %2; $[2,2]; $[2]; $[2]> (A, -<#; %2; $[2]> (femField(mesh,cellInt,field(2)[2], Transform, ), pos)), xn);
      xn = -<$[2]> (xn, delta);
      if >= (* (0.1e-7, 0.1e-7), •<$[2]; $[2]; $[]> (delta, delta)) {
        if $and (> (+<$[]> (0.1e1, 0.1e-8), •<$[2]; $[2]; $[]> ([0.1e1, 0.1e1], xn)), $and (> (+<$[2]> ([0.1e-8, 0.1e-8], xn)[0], -0.e0), > (+<$[2]> ([0.1e-8, 0.1e-8], xn)[1], -0.e0))) {
          return extractFemItemN(AllBuild(MeshPos),FemType: Mesh with type var:NONE,int,vec2,vec2 (mesh, cellInt, xn, pos)):FemType: MeshPos with type var:msh;
          }
        }
      }
    }
  print ("Bad end 2", "\n");
  return extractFemItemN(InvalidBuild(MeshPos),FemType: Mesh with type var:NONE (mesh)):FemType: MeshPos with type var:msh;
  }
function FemType: RefCell with type var:msh refcell (FemType: Mesh with type var:NONE arg0)
{
  return extractFemItem(arg0, FemType: RefCell with type var:msh, RefCell(Mesh));
  }
function FemType: MeshCell with type var:msh[] cells (FemType: Mesh with type var:NONE arg0)
{
  return extractFemItem(arg0, FemType: MeshCell with type var:msh[], Cells(Mesh));
  }
function FemType: MeshCell with type var:msh[] cells (FemType: Mesh with type var:NONE arg0)
{
  return {loadFem(MeshCell) | int i in $range (0, extractFemItem(arg0, int, NumCell(Mesh)))};
  }
function int numCell (FemType: Mesh with type var:NONE arg0)
{
  return extractFemItem(arg0, int, NumCell(Mesh));
  }
function tensor[2,2,2,2] msh_transform_3 (vec2 pos, int cell, FemType: Mesh with type var:NONE mesh)
{
  return @<#; %2; $[2,2,2,2]> (∇⊗<#; %2; $[2,2]; %2> (∇⊗<#; %2; $[2]; %2> (∇⊗<#; %2; $[]; %2> (femField(mesh,cell,field(2)[2], Transform, )))), pos);
  }
function tensor[2,2,2] msh_transform_2 (vec2 pos, int cell, FemType: Mesh with type var:NONE mesh)
{
  return @<#; %2; $[2,2,2]> (∇⊗<#; %2; $[2]; %2> (∇⊗<#; %2; $[]; %2> (femField(mesh,cell,field(2)[2], Transform, ))), pos);
  }
function mat2 msh_transform_1 (vec2 pos, int cell, FemType: Mesh with type var:NONE mesh)
{
  return @<#; %2; $[2,2]> (∇⊗<#; %2; $[]; %2> (femField(mesh,cell,field(2)[2], Transform, )), pos);
  }
function vec2 msh_transform_0 (vec2 pos, int cell, FemType: Mesh with type var:NONE mesh)
{
  return @<#; %2; $[2]> (femField(mesh,cell,field(2)[2], Transform, ), pos);
  }
function FemType: MeshPos with type var:msh _msh_newtonInverse (vec2 pos, int cellInt, FemType: Mesh with type var:NONE mesh)
{
  xn = [0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0, 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0];
  A = @<#; %2; $[2,2]> (inv<#; %2> (∇⊗<#; %2; $[]; %2> (femField(mesh,cellInt,field(2)[2], Transform, ))), [0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0, 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0]);
  foreach (int itter in $range (0, 16)) {
    delta = @<#; %2; $[2]> (•<#; %2; $[2,2]; $[2]; $[2]> (A, -<#; %2; $[2]> (femField(mesh,cellInt,field(2)[2], Transform, ), pos)), xn);
    xn = -<$[2]> (xn, delta);
    if >= (* (0.1e-7, 0.1e-7), •<$[2]; $[2]; $[]> (delta, delta)) {
      if $and (> (+<$[]> (0.1e1, 0.1e-8), •<$[2]; $[2]; $[]> ([0.1e1, 0.1e1], xn)), $and (> (+<$[2]> ([0.1e-8, 0.1e-8], xn)[0], -0.e0), > (+<$[2]> ([0.1e-8, 0.1e-8], xn)[1], -0.e0))) {
        return extractFemItemN(AllBuild(MeshPos),FemType: Mesh with type var:NONE,int,vec2,vec2 (mesh, cellInt, xn, pos)):FemType: MeshPos with type var:msh;
        }
      else {
        return extractFemItemN(InvalidBuild(MeshPos),FemType: Mesh with type var:NONE (mesh)):FemType: MeshPos with type var:msh;
        }
      }
    }
  return extractFemItemN(InvalidBuild(MeshPos),FemType: Mesh with type var:NONE (mesh)):FemType: MeshPos with type var:msh;
  }
function FemType: MeshPos with type var:msh _mesh_pos_msh_build_world_pos (FemType: MeshPos with type var:msh pos)
{
  if extractFemItem(pos, bool, WorldTest(MeshPos)) {
    return extractFemItemN(NewWorld(MeshPos),FemType: MeshPos with type var:msh,vec2 (pos, msh_transform_0 (extractFemItem(pos, vec2, RefPos(MeshPos)), extractFemItem(pos, int, CellIndex(MeshPos)), extractFem(Mesh,pos )))):FemType: MeshPos with type var:msh;
    }
  else {
    return pos;
    }
  }
function vec2 worldPos (FemType: MeshPos with type var:msh pos)
{
  return msh_transform_0 (extractFemItem(pos, vec2, RefPos(MeshPos)), extractFemItem(pos, int, CellIndex(MeshPos)), extractFem(Mesh,pos ));
  }
function FemType: MeshPos with type var:msh $exitPos (FemType: Mesh with type var:NONE mesh, int cellId, vec2 refPos, vec2 dPos, real[2] time)
{
  if != (-1, $sub<int; %2> (nextCell4 ($r2i (time[1]), cellId, mesh), 0)) {
    return extractFemItemN(RefBuild(Mesh),FemType: Mesh with type var:NONE,int,vec2,int (mesh, $sub<int; %2> (nextCell4 ($r2i (time[1]), cellId, mesh), 0), +<$[2]> ($sub<vec2; %3> ({[0.1e1, 0.e0], [0.e0, 0.e0], [0.e0, 0.e0]}, $sub<int; %2> (nextCell4 ($r2i (time[1]), cellId, mesh), 1)), *<$[2]> ($sub<vec2; %3> ({[-0.1e1, 0.1e1], [0.e0, 0.1e1], [0.1e1, 0.e0]}, $sub<int; %2> (nextCell4 ($r2i (time[1]), cellId, mesh), 1)), / (-<$[]> ($sub<real; %2> ({+<$[2]> (*<$[2]> (time[0], dPos), refPos)[0], +<$[2]> (*<$[2]> (time[0], dPos), refPos)[1]}, $sub<int; %3> ({1, 1, 0}, $r2i (time[1]))), $sub<real; %2> ($sub<real[2]; %3> ({{0.1e1, 0.e0}, {0.e0, 0.e0}, {0.e0, 0.e0}}, $r2i (time[1])), $sub<int; %3> ({1, 1, 0}, $r2i (time[1])))), $sub<real; %2> ($sub<real[2]; %3> ({{-0.1e1, 0.1e1}, {0.e0, 0.1e1}, {0.1e1, 0.e0}}, $r2i (time[1])), $sub<int; %3> ({1, 1, 0}, $r2i (time[1])))))), $sub<int; %2> (nextCell4 ($r2i (time[1]), cellId, mesh), 1))):FemType: MeshPos with type var:msh;
    }
  else {
    return extractFemItemN(InvalidBuildBoundary(MeshPos),FemType: Mesh with type var:NONE,vec2 (mesh, +<$[2]> (*<$[2]> (time[0], dPos), refPos))):FemType: MeshPos with type var:msh;
    }
  }
function int[2] nextCell4 (int faceIdx, int cell, FemType: Mesh with type var:NONE mesh)
{
  {
    return extractFemItemN(CellFaceCell(Mesh),FemType: Mesh with type var:NONE,int (mesh, + (* (cell, 6), * (faceIdx, 2)))):int[2];
    }
  }
function vec2 _enter (vec2 refPos, vec2 dPos)
{
  real time = +inf;
  int face = -1;
  real faceTime = -inf;
  if $and (>= (× (-<$[2]> ([0.1e1, 0.e0], refPos), /<$[2]> ([-0.1e1, 0.1e1], × (dPos, [-0.1e1, 0.1e1]))), -0.1e-15), $and (> (time, × (-<$[2]> ([0.1e1, 0.e0], refPos), /<$[2]> ([-0.1e1, 0.1e1], × (dPos, [-0.1e1, 0.1e1])))), >= (|()|<$[]> (× (dPos, [-0.1e1, 0.1e1])), 0.1e-20)))
    if $and (> (+<$[]> (0.1e1, 0.1e-8), •<$[2]; $[2]; $[]> ([0.1e1, 0.1e1], +<$[2]> (refPos, *<$[2]> (dPos, × (-<$[2]> ([0.1e1, 0.e0], refPos), /<$[2]> ([-0.1e1, 0.1e1], × (dPos, [-0.1e1, 0.1e1]))))))), $and (> (+<$[2]> ([0.1e-8, 0.1e-8], +<$[2]> (refPos, *<$[2]> (dPos, × (-<$[2]> ([0.1e1, 0.e0], refPos), /<$[2]> ([-0.1e1, 0.1e1], × (dPos, [-0.1e1, 0.1e1]))))))[0], -0.e0), > (+<$[2]> ([0.1e-8, 0.1e-8], +<$[2]> (refPos, *<$[2]> (dPos, × (-<$[2]> ([0.1e1, 0.e0], refPos), /<$[2]> ([-0.1e1, 0.1e1], × (dPos, [-0.1e1, 0.1e1]))))))[1], -0.e0))) {
      time = × (-<$[2]> ([0.1e1, 0.e0], refPos), /<$[2]> ([-0.1e1, 0.1e1], × (dPos, [-0.1e1, 0.1e1])));
      face = 0;
      }
    if $and (>= (× (-<$[2]> ([0.e0, 0.e0], refPos), /<$[2]> ([0.e0, 0.1e1], × (dPos, [0.e0, 0.1e1]))), -0.1e-15), $and (> (time, × (-<$[2]> ([0.e0, 0.e0], refPos), /<$[2]> ([0.e0, 0.1e1], × (dPos, [0.e0, 0.1e1])))), >= (|()|<$[]> (× (dPos, [0.e0, 0.1e1])), 0.1e-20)))
    if $and (> (+<$[]> (0.1e1, 0.1e-8), •<$[2]; $[2]; $[]> ([0.1e1, 0.1e1], +<$[2]> (refPos, *<$[2]> (dPos, × (-<$[2]> ([0.e0, 0.e0], refPos), /<$[2]> ([0.e0, 0.1e1], × (dPos, [0.e0, 0.1e1]))))))), $and (> (+<$[2]> ([0.1e-8, 0.1e-8], +<$[2]> (refPos, *<$[2]> (dPos, × (-<$[2]> ([0.e0, 0.e0], refPos), /<$[2]> ([0.e0, 0.1e1], × (dPos, [0.e0, 0.1e1]))))))[0], -0.e0), > (+<$[2]> ([0.1e-8, 0.1e-8], +<$[2]> (refPos, *<$[2]> (dPos, × (-<$[2]> ([0.e0, 0.e0], refPos), /<$[2]> ([0.e0, 0.1e1], × (dPos, [0.e0, 0.1e1]))))))[1], -0.e0))) {
      time = × (-<$[2]> ([0.e0, 0.e0], refPos), /<$[2]> ([0.e0, 0.1e1], × (dPos, [0.e0, 0.1e1])));
      face = 1;
      }
    if $and (>= (× (-<$[2]> ([0.e0, 0.e0], refPos), /<$[2]> ([0.1e1, 0.e0], × (dPos, [0.1e1, 0.e0]))), -0.1e-15), $and (> (time, × (-<$[2]> ([0.e0, 0.e0], refPos), /<$[2]> ([0.1e1, 0.e0], × (dPos, [0.1e1, 0.e0])))), >= (|()|<$[]> (× (dPos, [0.1e1, 0.e0])), 0.1e-20)))
    if $and (> (+<$[]> (0.1e1, 0.1e-8), •<$[2]; $[2]; $[]> ([0.1e1, 0.1e1], +<$[2]> (refPos, *<$[2]> (dPos, × (-<$[2]> ([0.e0, 0.e0], refPos), /<$[2]> ([0.1e1, 0.e0], × (dPos, [0.1e1, 0.e0]))))))), $and (> (+<$[2]> ([0.1e-8, 0.1e-8], +<$[2]> (refPos, *<$[2]> (dPos, × (-<$[2]> ([0.e0, 0.e0], refPos), /<$[2]> ([0.1e1, 0.e0], × (dPos, [0.1e1, 0.e0]))))))[0], -0.e0), > (+<$[2]> ([0.1e-8, 0.1e-8], +<$[2]> (refPos, *<$[2]> (dPos, × (-<$[2]> ([0.e0, 0.e0], refPos), /<$[2]> ([0.1e1, 0.e0], × (dPos, [0.1e1, 0.e0]))))))[1], -0.e0))) {
      time = × (-<$[2]> ([0.e0, 0.e0], refPos), /<$[2]> ([0.1e1, 0.e0], × (dPos, [0.1e1, 0.e0])));
      face = 2;
      }
    if != (face, -1) {
    return [max (time, 0.e0), (real)face];
    }
  else {
    return [(real)-1, (real)-1];
    }
  }
function vec2 _exit (vec2 refPos, vec2 dPos, int i)
{
  real time = +inf;
  int face = -1;
  real faceTime = -inf;
  if $and (>= (× (-<$[2]> ([0.1e1, 0.e0], refPos), /<$[2]> ([-0.1e1, 0.1e1], × (dPos, [-0.1e1, 0.1e1]))), -0.1e-15), $and (> (time, × (-<$[2]> ([0.1e1, 0.e0], refPos), /<$[2]> ([-0.1e1, 0.1e1], × (dPos, [-0.1e1, 0.1e1])))), >= (|()|<$[]> (× (dPos, [-0.1e1, 0.1e1])), 0.1e-20)))
    if != (i, 0) {
      time = × (-<$[2]> ([0.1e1, 0.e0], refPos), /<$[2]> ([-0.1e1, 0.1e1], × (dPos, [-0.1e1, 0.1e1])));
      face = 0;
      }
    else {
      faceTime = × (-<$[2]> ([0.1e1, 0.e0], refPos), /<$[2]> ([-0.1e1, 0.1e1], × (dPos, [-0.1e1, 0.1e1])));
      }
    if $and (>= (× (-<$[2]> ([0.e0, 0.e0], refPos), /<$[2]> ([0.e0, 0.1e1], × (dPos, [0.e0, 0.1e1]))), -0.1e-15), $and (> (time, × (-<$[2]> ([0.e0, 0.e0], refPos), /<$[2]> ([0.e0, 0.1e1], × (dPos, [0.e0, 0.1e1])))), >= (|()|<$[]> (× (dPos, [0.e0, 0.1e1])), 0.1e-20)))
    if != (i, 1) {
      time = × (-<$[2]> ([0.e0, 0.e0], refPos), /<$[2]> ([0.e0, 0.1e1], × (dPos, [0.e0, 0.1e1])));
      face = 1;
      }
    else {
      faceTime = × (-<$[2]> ([0.e0, 0.e0], refPos), /<$[2]> ([0.e0, 0.1e1], × (dPos, [0.e0, 0.1e1])));
      }
    if $and (>= (× (-<$[2]> ([0.e0, 0.e0], refPos), /<$[2]> ([0.1e1, 0.e0], × (dPos, [0.1e1, 0.e0]))), -0.1e-15), $and (> (time, × (-<$[2]> ([0.e0, 0.e0], refPos), /<$[2]> ([0.1e1, 0.e0], × (dPos, [0.1e1, 0.e0])))), >= (|()|<$[]> (× (dPos, [0.1e1, 0.e0])), 0.1e-20)))
    if != (i, 2) {
      time = × (-<$[2]> ([0.e0, 0.e0], refPos), /<$[2]> ([0.1e1, 0.e0], × (dPos, [0.1e1, 0.e0])));
      face = 2;
      }
    else {
      faceTime = × (-<$[2]> ([0.e0, 0.e0], refPos), /<$[2]> ([0.1e1, 0.e0], × (dPos, [0.1e1, 0.e0])));
      }
    if != (face, -1) {
    return [max (time, 0.e0), (real)face];
    }
  else {
    if == (-inf, faceTime) {
      return [(real)-1, (real)-1];
      }
    else {
      return [faceTime, (real)i];
      }
    }
  }
function FemType: Mesh with type var:msh domain (FemType: Space with type var:msh arg0)
{
  return extractFem(Mesh,arg0 );
  }
function FemType: Space with type var:msh space (FemType: FemFunc with type var:fns arg0)
{
  return extractFem(Space,arg0 );
  }
function FemType: FuncCell with type var:func funcCell (FemType: FemFunc with type var:fns arg0, FemType: MeshCell with type var:msh arg1)
{
  return loadFem(FuncCell);
  }
real camDist = |()|<$[3]> (-<$[3]> (camAt, camEye));
real camNearVsp = +<$[]> (camNear, camDist);
real camFarVsp = +<$[]> (camFar, camDist);
vec3 camN = normalize<$[3]> (-<$[3]> (camAt, camEye));
vec3 camU = normalize<$[3]> (× (camN, camUp));
vec3 camV = × (camU, camN);
real camVmax = * (tan (/ (* (camFOV, 0.314159265358979323846264338327950288e1), (real)360)), camDist);
real camUmax = / (* (camVmax, (real)iresU), (real)iresV);
field#0(1)[3] CM = ⊛<#0; %1; $[3]> (tent, clamp<%1; $[3]> (cmap));
vec3 L = •<$[3,3]; $[3]; $[3]> (transpose<%3; %3> ([camU, camV, camN]), normalize<$[3]> (lightVsp));
function int sign (real x)
{
  if > (x, 0.e0) {
    return 1;
    }
  else {
    if < (x, 0.e0) {
      return unary - (1);
      }
    else {
      return 0;
      }
    }
  }
strand ray (int ui, int vi)
{
  real rayU = lerp<$[]> (unary -<$[]> (camUmax), camUmax, unary -<$[]> (0.5e0), (real)ui, -<$[]> ((real)iresU, 0.5e0));
  real rayV = lerp<$[]> (unary -<$[]> (camVmax), camVmax, unary -<$[]> (0.5e0), (real)vi, -<$[]> ((real)iresV, 0.5e0));
  vec3 UV = +<$[3]> (*<$[3]> (rayU, camU), *<$[3]> (rayV, camV));
  vec3 rayOrig = +<$[3]> (camEye, UV);
  vec3 rayVec = +<$[3]> (camN, [0.e0, 0.e0, 0.e0]);
  real camNearVsp = camNearVsp;
  real camFarVsp = camFarVsp;
  vec3 rayStart = +<$[3]> (rayOrig, *<$[3]> (camNearVsp, rayVec));
  int offset = $dynsub<int> (indecies, + (* (ui, iresV), vi));
  int len = $dynsub<int> (indecies, + (+ (* (iresU, iresV), * (ui, iresV)), vi));
  int itter = 0;
  int intersectionItter = 0;
  int idx = + (offset, itter);
  vec2 interval = $dynsub<vec2> (times, idx);
  real s = interval[0];
  real e = interval[1];
  FemType: MeshCell with type var:msh cc = $dynsub<FemType: MeshCell with type var:msh> (extractFemItem(a, FemType: MeshCell with type var:msh[], Cells(Mesh)), 0);
  FemType: FuncCell with type var:func fc = funcCell (c, cc);
  bool newton = true;
  output real out = 0.e0;
  output vec4 rgba = [0.e0, 0.e0, 0.e0, 0.e0];
  start {
    if == (len, 0)
      stabilize;
      cc = $dynsub<FemType: MeshCell with type var:msh> (extractFemItem(a, FemType: MeshCell with type var:msh[], Cells(Mesh)), $dynsub<int> (cells, idx));
    fc = funcCell (c, cc);
    }
  update {
    print ("Interval:", [s, e], "\n");
    print ("inner itter:", intersectionItter, "\n");
    print ("Outer itter:", itter, "\n");
    vec2 startRay = +<$[2]> ([rayOrig[0], rayOrig[1]], *<$[2]> (s, [rayVec[0], rayVec[1]]));
    vec2 endRay = +<$[2]> ([rayOrig[0], rayOrig[1]], *<$[2]> (e, [rayVec[0], rayVec[1]]));
    vec2 invertA = @<#; %2; $[2]> (femField(extractFem(Mesh,cc ),extractFemItem(cc, int, CellIndex(MeshCell)),field(2)[2], InvTransform, _msh_newtonInverse), startRay);
    vec2 invertB = @<#; %2; $[2]> (femField(extractFem(Mesh,cc ),extractFemItem(cc, int, CellIndex(MeshCell)),field(2)[2], InvTransform, _msh_newtonInverse), endRay);
    print ("inverses:", invertA, invertB, "\n");
    real faVal = @<#; %2; $[]> (femField(extractFem(FemFunc,fc ),extractFemItem(fc, int, CellIndex(FuncCell)),field(2)[], refField, ), invertA);
    real fa = -<$[]> (-<$[]> (faVal, * (rayVec[2], s)), rayOrig[2]);
    real fb = -<$[]> (-<$[]> (@<#; %2; $[]> (femField(extractFem(FemFunc,fc ),extractFemItem(fc, int, CellIndex(FuncCell)),field(2)[], refField, ), invertB), * (rayVec[2], e)), rayOrig[2]);
    print ("Vals:", [fa, fb], "\n");
    if (< (|()|<$[]> (-<$[]> (fa, fb)), eps) && > (|()|<$[]> (fa), eps)) {
      s = +<$[]> (s, eps);
      continue;
      }
    real cup = / (-<$[]> (* (s, fb), * (e, fa)), -<$[]> (fb, fa));
    print ("Mid time:", cup, "\n");
    vec2 midRay = +<$[2]> ([rayOrig[0], rayOrig[1]], *<$[2]> (cup, [rayVec[0], rayVec[1]]));
    vec2 invertC = @<#; %2; $[2]> (femField(extractFem(Mesh,cc ),extractFemItem(cc, int, CellIndex(MeshCell)),field(2)[2], InvTransform, _msh_newtonInverse), midRay);
    real fmVal = @<#; %2; $[]> (femField(extractFem(FemFunc,fc ),extractFemItem(fc, int, CellIndex(FuncCell)),field(2)[], refField, ), invertC);
    real fm = -<$[]> (-<$[]> (fmVal, * (rayVec[2], cup)), rayOrig[2]);
    print ("all vals:", [fa, fm, fb], "\n");
    intersectionItter = + (intersectionItter, 1);
    if < (* (sign (fa), sign (fm)), 0) {
      e = cup;
      }
    else {
      if > (* (sign (fa), sign (fm)), 0)
        s = cup;
        }
    print ("new interval:", [s, e], "\n");
    if (< (|()|<$[]> (fa), eps) || (< (|()|<$[]> (fm), eps) || > (intersectionItter, 32))) {
      intersectionItter = 0;
      if (> (|()|<$[]> (fm), eps) && > (|()|<$[]> (fa), eps)) {
        itter = + (itter, 1);
        if >= (itter, len) {
          print ("Fin pixel=============================\n");
          stabilize;
          }
        interval = $dynsub<vec2> (times, + (offset, itter));
        cc = $dynsub<FemType: MeshCell with type var:msh> (extractFemItem(a, FemType: MeshCell with type var:msh[], Cells(Mesh)), $dynsub<int> (cells, + (offset, itter)));
        s = interval[0];
        e = interval[1];
        fc = funcCell (c, cc);
        print ("Next interval!\n");
        continue;
        }
      else {
        vec2 grad = [0.e0, 0.e0];
        vec3 loc = rayOrig;
        if < (|()|<$[]> (fm), eps) {
          grad = @<#; %2; $[2]> (∇<#; %2> (∘<#; %2; $[]; %2; $[2]> (femField(extractFem(FemFunc,fc ),extractFemItem(fc, int, CellIndex(FuncCell)),field(2)[], refField, ), femField(extractFem(Mesh,cc ),extractFemItem(cc, int, CellIndex(MeshCell)),field(2)[2], InvTransform, _msh_newtonInverse))), midRay);
          out = fmVal;
          }
        if < (|()|<$[]> (fa), eps) {
          cup = s;
          grad = @<#; %2; $[2]> (∇<#; %2> (∘<#; %2; $[]; %2; $[2]> (femField(extractFem(FemFunc,fc ),extractFemItem(fc, int, CellIndex(FuncCell)),field(2)[], refField, ), femField(extractFem(Mesh,cc ),extractFemItem(cc, int, CellIndex(MeshCell)),field(2)[2], InvTransform, _msh_newtonInverse))), startRay);
          out = faVal;
          }
        print ("Out val:", out, "\n");
        print ("Grad val:", grad, "\n");
        vec3 mcol = [0.1e1, 0.1e1, 0.1e1];
        if != (cmin, cmax)
          mcol = @<#0; %1; $[3]> (CM, lerp<$[]> ((real)(unary - (1)), (real)1, cmin, out, cmax));
          if light {
          vec3 N = [grad[0], grad[1], (real)(unary - (1))];
          vec3 H = normalize<$[3]> (+<$[3]> (unary -<$[3]> (normalize<$[3]> (rayVec)), L));
          vec3 lightColor = lerp<$[3]> (mcnear, mcfar, camNearVsp, cup, camFarVsp);
          vec3 ambientTerm = *<$[3]> (phongKa, mcol);
          vec3 diffuse = *<$[3]> (*<$[3]> (phongKd, modulate<%3> (mcol, lightColor)), max ((real)0, •<$[3]; $[3]; $[]> (N, L)));
          vec3 specular = *<$[3]> (*<$[3]> (phongKs, lightColor), ^ (max ((real)0, •<$[3]; $[3]; $[]> (N, H)), phongSp));
          vec3 fin = +<$[3]> (+<$[3]> (ambientTerm, diffuse), specular);
          rgba = [fin[0], fin[1], fin[2], 0.1e1];
          }
        else {
          rgba = [mcol[0], mcol[1], mcol[2], 0.1e1];
          }
        stabilize;
        }
      }
    else {
      print ("=========\n");
      }
    }
  
}
grid(2) {
    foreach (int vi in $range (0, - (iresU, 1))) {
      foreach (int ui in $range (0, - (iresV, 1))) {
        new ray (ui, vi);
        }
      }
    }
  
/* Program end */
/home/teocollin/gitcode/diderot/tests/lipRay/find/cmap.nrrd file header:
  type: double
  dimension: 2
  space dimension: 1
  sizes: 3 311
  space directions: none (0.0066445182724252493)
  kinds: 3-vector space
  endian: little
  encoding: raw
  space origin: (-1.0299003322259137)
/* Simplified Program (after after simplify) start */
properties: GlobalInit,StrandArray,HasStartMethod,ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[]),HasInputs,HasGlobals
input real isoval0451 = <default>;
input real thick0452 = <default>;
input vec3 camEye0453 = <default>;
input vec3 camAt0457 = <default>;
input vec3 camUp045B = <default>;
input real camFOV045F = <default>;
input int iresU0460 = <default>;
input int iresV0461 = <default>;
input real camNear0462 = <default>;
input real camFar0463 = <default>;
input real refStep0464 = <default>;
input real rayStep0465 = <default>;
input FemData:Mesh a0466;
input FemData:Space 0b0472_intermedateGlobal0473;
input FemData:FemFunc 0c0474_intermedateGlobal0475;
input real eps0476 = <default>;
input int[] indecies0477;
input vec2[] times0478;
input int[] cells0479;
input vec3 mcnear047A("material color at near clipping plane (for depth cuing)") = <default>;
input vec3 mcfar047E("material color at far clipping plane") = <default>;
input image(1)[3] cmap0483("univariate colormap") = image("/home/teocollin/gitcode/diderot/tests/lipRay/find/cmap.nrrd");
input real cmin0484("value mapped to min end of colormap") = <default>;
input real cmax0485("value mapped to max end of colormap. By default cmin==cmax==0, which disables this colormapping") = <default>;
input bool light0486 = <default>;
input real phongKa0487("Blinn-Phong ambient component") = <default>;
input real phongKd0488("Blinn-Phong diffuse component") = <default>;
input real phongKs0489("Blinn-Phong specular component") = <default>;
input real phongSp048A("Blinn-Phong specularity exponent") = <default>;
input real maxAlpha048B("maximum opacity on rendered surface") = <default>;
input vec3 lightVsp048C = <default>;
constants {
  isoval0451 = 0.2e0;
  thick0452 = 0.7e-1;
  real _t0454 = 0.3e1;
  real _t0455 = -0.3e1;
  real _t0456 = 0.3e1;
  camEye0453 = [_t0454, _t0455, _t0456];
  real _t0458 = 0.5e0;
  real _t0459 = 0.5e0;
  real _t045A = 0.5e0;
  camAt0457 = [_t0458, _t0459, _t045A];
  real _t045C = 0.e0;
  real _t045D = 0.e0;
  real _t045E = 0.1e1;
  camUp045B = [_t045C, _t045D, _t045E];
  camFOV045F = 0.137e2;
  iresU0460 = 10;
  iresV0461 = 10;
  camNear0462 = -0.2e1;
  camFar0463 = 0.5e1;
  refStep0464 = 0.1e1;
  rayStep0465 = 0.1e-1;
  eps0476 = 0.1e-5;
  real _t047B = 0.1e1;
  real _t047C = 0.1e1;
  real _t047D = 0.1e1;
  mcnear047A = [_t047B, _t047C, _t047D];
  real _t047F = 0.1e1;
  real _t0480 = 0.1e1;
  real _t0481 = 0.1e1;
  mcfar047E = [_t047F, _t0480, _t0481];
  cmin0484 = 0.e0;
  cmax0485 = 0.1e1;
  light0486 = true;
  phongKa0487 = 0.5e0;
  phongKd0488 = 0.5e0;
  phongKs0489 = 0.e0;
  phongSp048A = 0.6e2;
  maxAlpha048B = 0.1e1;
  real _t048D = 0.e0;
  real _t048E = 0.e0;
  real _t048F = 0.1e1;
  lightVsp048C = [_t048D, _t048E, _t048F];
}
global Femdata: MeshCell[] 0cell_a0467;
global Femdata: Space b0472;
global Femdata: FemFunc c0474;
global real camDist0815;
global real camNearVsp0816;
global real camFarVsp0817;
global vec3 camN0819;
global vec3 camU081B;
global vec3 camV081C;
global real camVmax0822;
global real camUmax0826;
global field#0(1)[3] CM0829;
global vec3 L082D;
function bool#0 !=0490 (Femdata: MeshCell cell10491, Femdata: MeshCell cell10492)
{
  int _t0493 = extractFemItem(CellIndex(Mesh), int, cell10491);
  int _t0494 = extractFemItem(CellIndex(Mesh), int, cell10492);
  bool _t0495 = prim !=0086 (_t0493, _t0494);
  return _t0495;
}
function bool#0 ==0496 (Femdata: MeshCell cell10491, Femdata: MeshCell cell10492)
{
  int _t0497 = extractFemItem(CellIndex(Mesh), int, cell10491);
  int _t0498 = extractFemItem(CellIndex(Mesh), int, cell10492);
  bool _t0499 = prim ==0082 (_t0497, _t0498);
  return _t0499;
}
function Femdata: MeshPos#0 findPos049A (Femdata: Mesh mesh049B, vec2 pos049C)
{
  real _t049D = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t049E = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  xn049F = [_t049D, _t049E];
  newtonInt04A0 = 0;
  cellInt04A1 = extractFemItem(StartCell(Mesh), int, mesh049B);
  int _t04A2 = extractFemItem(NumCell(Mesh), int, mesh049B);
  int _t04A3 = 1;
  numCell04A4 = prim -0024 (_t04A2, _t04A3);
  yayCells04A5 = extractFemItem2(NearbyCell(File=spat.in)(Mesh), vec2, mesh049B, pos049C : vec2);
  foreach cellItter04A6 in yayCells04A5 {
    cellInt04A1 = cellItter04A6;
    field(2)[2] _t04A7 = femField(mesh049B,cellInt04A1,field(2)[2],Transform,);
    field(2)[2,2] _t04A8 = prim ∇⊗00AD<#∞; %2; $[]; %2> (_t04A7);
    field(2)[2,2] _t04A9 = prim inv015B<#∞; %2> (_t04A8);
    real _t04AA = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    real _t04AB = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    vec2 _t04AC = [_t04AA, _t04AB];
    A04AD = prim @00A5<#∞; %2; $[2,2]> (_t04A9, _t04AC);
    int _t04AE = 0;
    int _t04AF = 16;
    int[] _t04B0 = prim $range01C3 (_t04AE, _t04AF);
    foreach newtonItter04D3 in _t04B0 {
      field(2)[2] _t04B1 = femField(mesh049B,cellInt04A1,field(2)[2],Transform,);
      field(2)[2] _t04B2 = prim -002E<#∞; %2; $[2]> (_t04B1, pos049C);
      field(2)[2] _t04B3 = prim •00D4<#∞; %2; $[2,2]; $[2]; $[2]> (A04AD, _t04B2);
      delta04B4 = prim @00A5<#∞; %2; $[2]> (_t04B3, xn049F);
      xn049F = prim -0026<$[2]> (xn049F, delta04B4);
      real _t04B5 = 0.1e-7;
      real _t04B6 = 0.1e-7;
      real _t04B7 = prim *0034 (_t04B5, _t04B6);
      real _t04B8 = prim •00CE<$[2]; $[2]; $[]> (delta04B4, delta04B4);
      bool _t04B9 = prim >=007E (_t04B7, _t04B8);
      if _t04B9 {
        real _t04BA = 0.1e1;
        real _t04BB = 0.1e-8;
        real _t04BC = prim +0017<$[]> (_t04BA, _t04BB);
        real _t04BD = 0.1e1;
        real _t04BE = 0.1e1;
        vec2 _t04BF = [_t04BD, _t04BE];
        real _t04C0 = prim •00CE<$[2]; $[2]; $[]> (_t04BF, xn049F);
        bool _t04C1 = prim >0080 (_t04BC, _t04C0);
        real _t04C2 = 0.1e-8;
        real _t04C3 = 0.1e-8;
        vec2 _t04C4 = [_t04C2, _t04C3];
        vec2 _t04C5 = prim +0017<$[2]> (_t04C4, xn049F);
        real _t04C6 = _t04C5[0];
        real _t04C7 = -0.e0;
        bool _t04C8 = prim >0080 (_t04C6, _t04C7);
        real _t04C9 = 0.1e-8;
        real _t04CA = 0.1e-8;
        vec2 _t04CB = [_t04C9, _t04CA];
        vec2 _t04CC = prim +0017<$[2]> (_t04CB, xn049F);
        real _t04CD = _t04CC[1];
        real _t04CE = -0.e0;
        bool _t04CF = prim >0080 (_t04CD, _t04CE);
        bool _t04D0 = prim $and01C4 (_t04C8, _t04CF);
        bool _t04D1 = prim $and01C4 (_t04C1, _t04D0);
        if _t04D1 {
          Femdata: MeshPos _t04D2 = extractFemItemN((mesh049B, cellInt04A1, xn049F, pos049C),AllBuild(MeshPos),);
          return _t04D2;
        }
      }
    }
  }
  string _t04D4 = "Bad end 2";
  string _t04D5 = "\n";
  print (_t04D4, _t04D5);
  Femdata: MeshPos _t04D6 = extractFemItemN((mesh049B),InvalidBuild(MeshPos),);
  return _t04D6;
}
function Femdata: RefCell#0 refcell04D7 (Femdata: Mesh arg004D8)
{
  Femdata: RefCell _t04D9 = extractFemItem(RefCell(Mesh), Femdata: RefCell, arg004D8);
  return _t04D9;
}
function Femdata: MeshCell[]#0 cells04DA (Femdata: Mesh arg004DB)
{
  Femdata: MeshCell[] _t04DC = extractFemItem(Cells(Mesh), Femdata: MeshCell[], arg004DB);
  return _t04DC;
}
function Femdata: MeshCell[]#0 cells04DD (Femdata: Mesh arg004DB)
{
  int _t04DE = 0;
  int _t04DF = extractFemItem(NumCell(Mesh), int, arg004DB);
  int[] _t04E0 = prim $range01C3 (_t04DE, _t04DF);
  Femdata: MeshCell[] accum04E3 = {};
  foreach i04E1 in _t04E0 {
    Femdata: MeshCell _t04E2 = loadFem(MeshCell, arg004DB, i04E1);
    accum04E3 = prim @0010<Femdata: MeshCell> (accum04E3, _t04E2);
  }
  return accum04E3;
}
function int#0 numCell04E4 (Femdata: Mesh arg004D8)
{
  int _t04E5 = extractFemItem(NumCell(Mesh), int, arg004D8);
  return _t04E5;
}
function tensor[2,2,2,2]#0 msh_transform_304E6 (vec2 pos04E7, int cell04E8, Femdata: Mesh mesh04E9)
{
  field(2)[2] _t04EA = femField(mesh04E9,cell04E8,field(2)[2],Transform,);
  field(2)[2,2] _t04EB = prim ∇⊗00AD<#∞; %2; $[]; %2> (_t04EA);
  field(2)[2,2,2] _t04EC = prim ∇⊗00AD<#∞; %2; $[2]; %2> (_t04EB);
  field(2)[2,2,2,2] _t04ED = prim ∇⊗00AD<#∞; %2; $[2,2]; %2> (_t04EC);
  tensor[2,2,2,2] _t04EE = prim @00A5<#∞; %2; $[2,2,2,2]> (_t04ED, pos04E7);
  return _t04EE;
}
function tensor[2,2,2]#0 msh_transform_204EF (vec2 pos04E7, int cell04E8, Femdata: Mesh mesh04E9)
{
  field(2)[2] _t04F0 = femField(mesh04E9,cell04E8,field(2)[2],Transform,);
  field(2)[2,2] _t04F1 = prim ∇⊗00AD<#∞; %2; $[]; %2> (_t04F0);
  field(2)[2,2,2] _t04F2 = prim ∇⊗00AD<#∞; %2; $[2]; %2> (_t04F1);
  tensor[2,2,2] _t04F3 = prim @00A5<#∞; %2; $[2,2,2]> (_t04F2, pos04E7);
  return _t04F3;
}
function tensor[2,2]#0 msh_transform_104F4 (vec2 pos04E7, int cell04E8, Femdata: Mesh mesh04E9)
{
  field(2)[2] _t04F5 = femField(mesh04E9,cell04E8,field(2)[2],Transform,);
  field(2)[2,2] _t04F6 = prim ∇⊗00AD<#∞; %2; $[]; %2> (_t04F5);
  tensor[2,2] _t04F7 = prim @00A5<#∞; %2; $[2,2]> (_t04F6, pos04E7);
  return _t04F7;
}
function vec2#2 msh_transform_004F8 (vec2 pos04E7, int cell04E8, Femdata: Mesh mesh04E9)
{
  field(2)[2] _t04F9 = femField(mesh04E9,cell04E8,field(2)[2],Transform,);
  vec2 _t04FA = prim @00A5<#∞; %2; $[2]> (_t04F9, pos04E7);
  return _t04FA;
}
function Femdata: MeshPos#5 _msh_newtonInverse04FB (vec2 pos04FC, int cellInt04FD, Femdata: Mesh mesh04FE)
{
  real _t04FF = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t0500 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  xn0501 = [_t04FF, _t0500];
  field(2)[2] _t0502 = femField(mesh04FE,cellInt04FD,field(2)[2],Transform,);
  field(2)[2,2] _t0503 = prim ∇⊗00AD<#∞; %2; $[]; %2> (_t0502);
  field(2)[2,2] _t0504 = prim inv015B<#∞; %2> (_t0503);
  real _t0505 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t0506 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  vec2 _t0507 = [_t0505, _t0506];
  A0508 = prim @00A5<#∞; %2; $[2,2]> (_t0504, _t0507);
  int _t0509 = 0;
  int _t050A = 16;
  int[] _t050B = prim $range01C3 (_t0509, _t050A);
  foreach itter052F in _t050B {
    field(2)[2] _t050C = femField(mesh04FE,cellInt04FD,field(2)[2],Transform,);
    field(2)[2] _t050D = prim -002E<#∞; %2; $[2]> (_t050C, pos04FC);
    field(2)[2] _t050E = prim •00D4<#∞; %2; $[2,2]; $[2]; $[2]> (A0508, _t050D);
    delta050F = prim @00A5<#∞; %2; $[2]> (_t050E, xn0501);
    xn0501 = prim -0026<$[2]> (xn0501, delta050F);
    real _t0510 = 0.1e-7;
    real _t0511 = 0.1e-7;
    real _t0512 = prim *0034 (_t0510, _t0511);
    real _t0513 = prim •00CE<$[2]; $[2]; $[]> (delta050F, delta050F);
    bool _t0514 = prim >=007E (_t0512, _t0513);
    if _t0514 {
      real _t0515 = 0.1e1;
      real _t0516 = 0.1e-8;
      real _t0517 = prim +0017<$[]> (_t0515, _t0516);
      real _t0518 = 0.1e1;
      real _t0519 = 0.1e1;
      vec2 _t051A = [_t0518, _t0519];
      real _t051B = prim •00CE<$[2]; $[2]; $[]> (_t051A, xn0501);
      bool _t051C = prim >0080 (_t0517, _t051B);
      real _t051D = 0.1e-8;
      real _t051E = 0.1e-8;
      vec2 _t051F = [_t051D, _t051E];
      vec2 _t0520 = prim +0017<$[2]> (_t051F, xn0501);
      real _t0521 = _t0520[0];
      real _t0522 = -0.e0;
      bool _t0523 = prim >0080 (_t0521, _t0522);
      real _t0524 = 0.1e-8;
      real _t0525 = 0.1e-8;
      vec2 _t0526 = [_t0524, _t0525];
      vec2 _t0527 = prim +0017<$[2]> (_t0526, xn0501);
      real _t0528 = _t0527[1];
      real _t0529 = -0.e0;
      bool _t052A = prim >0080 (_t0528, _t0529);
      bool _t052B = prim $and01C4 (_t0523, _t052A);
      bool _t052C = prim $and01C4 (_t051C, _t052B);
      if _t052C {
        Femdata: MeshPos _t052D = extractFemItemN((mesh04FE, cellInt04FD, xn0501, pos04FC),AllBuild(MeshPos),);
        return _t052D;
      } else {
        Femdata: MeshPos _t052E = extractFemItemN((mesh04FE),InvalidBuild(MeshPos),);
        return _t052E;
      }
    }
  }
  Femdata: MeshPos _t0530 = extractFemItemN((mesh04FE),InvalidBuild(MeshPos),);
  return _t0530;
}
function Femdata: MeshPos#0 _mesh_pos_msh_build_world_pos0531 (Femdata: MeshPos pos0532)
{
  bool _t0533 = extractFemItem(WorldTest(MeshPos), bool, pos0532);
  if _t0533 {
    vec2 _t0534 = extractFemItem(RefPos(MeshPos), vec2, pos0532);
    int _t0535 = extractFemItem(CellIndex(MeshPos), int, pos0532);
    Femdata: Mesh _t0536 = extractFem(pos0532, Mesh);
    vec2 _t0537 = func msh_transform_004F8 (_t0534, _t0535, _t0536);
    Femdata: MeshPos _t0538 = extractFemItemN((pos0532, _t0537),NewWorld(MeshPos),);
    return _t0538;
  } else {
    return pos0532;
  }
}
function vec2#0 worldPos0539 (Femdata: MeshPos pos0532)
{
  vec2 _t053A = extractFemItem(RefPos(MeshPos), vec2, pos0532);
  int _t053B = extractFemItem(CellIndex(MeshPos), int, pos0532);
  Femdata: Mesh _t053C = extractFem(pos0532, Mesh);
  vec2 _t053D = func msh_transform_004F8 (_t053A, _t053B, _t053C);
  return _t053D;
}
function Femdata: MeshPos#0 $exitPos053E (Femdata: Mesh mesh053F, int cellId0540, vec2 refPos0541, vec2 dPos0542, real[2] time0543)
{
  int _t0544 = -1;
  real _t0545 = time0543[1];
  int _t0546 = prim $r2i01B7 (_t0545);
  int[2] _t0548 = func nextCell40547 (_t0546, cellId0540, mesh053F);
  int _t0549 = 0;
  int _t054A = prim $sub01C0<int; %2> (_t0548, _t0549);
  bool _t054B = prim !=0086 (_t0544, _t054A);
  if _t054B {
    real _t054C = time0543[1];
    int _t054D = prim $r2i01B7 (_t054C);
    int[2] _t054E = func nextCell40547 (_t054D, cellId0540, mesh053F);
    int _t054F = 0;
    int _t0550 = prim $sub01C0<int; %2> (_t054E, _t054F);
    real _t0551 = 0.1e1;
    real _t0552 = 0.e0;
    vec2 _t0553 = [_t0551, _t0552];
    real _t0554 = 0.e0;
    real _t0555 = 0.e0;
    vec2 _t0556 = [_t0554, _t0555];
    real _t0557 = 0.e0;
    real _t0558 = 0.e0;
    vec2 _t0559 = [_t0557, _t0558];
    vec2[3] _t055A = {_t0553, _t0556, _t0559};
    real _t055B = time0543[1];
    int _t055C = prim $r2i01B7 (_t055B);
    int[2] _t055D = func nextCell40547 (_t055C, cellId0540, mesh053F);
    int _t055E = 1;
    int _t055F = prim $sub01C0<int; %2> (_t055D, _t055E);
    vec2 _t0560 = prim $sub01C0<vec2; %3> (_t055A, _t055F);
    real _t0561 = -0.1e1;
    real _t0562 = 0.1e1;
    vec2 _t0563 = [_t0561, _t0562];
    real _t0564 = 0.e0;
    real _t0565 = 0.1e1;
    vec2 _t0566 = [_t0564, _t0565];
    real _t0567 = 0.1e1;
    real _t0568 = 0.e0;
    vec2 _t0569 = [_t0567, _t0568];
    vec2[3] _t056A = {_t0563, _t0566, _t0569};
    real _t056B = time0543[1];
    int _t056C = prim $r2i01B7 (_t056B);
    int[2] _t056D = func nextCell40547 (_t056C, cellId0540, mesh053F);
    int _t056E = 1;
    int _t056F = prim $sub01C0<int; %2> (_t056D, _t056E);
    vec2 _t0570 = prim $sub01C0<vec2; %3> (_t056A, _t056F);
    real _t0571 = time0543[0];
    vec2 _t0572 = prim *0036<$[2]> (_t0571, dPos0542);
    vec2 _t0573 = prim +0017<$[2]> (_t0572, refPos0541);
    real _t0574 = _t0573[0];
    real _t0575 = time0543[0];
    vec2 _t0576 = prim *0036<$[2]> (_t0575, dPos0542);
    vec2 _t0577 = prim +0017<$[2]> (_t0576, refPos0541);
    real _t0578 = _t0577[1];
    real[2] _t0579 = {_t0574, _t0578};
    int _t057A = 1;
    int _t057B = 1;
    int _t057C = 0;
    int[3] _t057D = {_t057A, _t057B, _t057C};
    real _t057E = time0543[1];
    int _t057F = prim $r2i01B7 (_t057E);
    int _t0580 = prim $sub01C0<int; %3> (_t057D, _t057F);
    real _t0581 = prim $sub01C0<real; %2> (_t0579, _t0580);
    real _t0582 = 0.1e1;
    real _t0583 = 0.e0;
    real[2] _t0584 = {_t0582, _t0583};
    real _t0585 = 0.e0;
    real _t0586 = 0.e0;
    real[2] _t0587 = {_t0585, _t0586};
    real _t0588 = 0.e0;
    real _t0589 = 0.e0;
    real[2] _t058A = {_t0588, _t0589};
    real[2][3] _t058B = {_t0584, _t0587, _t058A};
    real _t058C = time0543[1];
    int _t058D = prim $r2i01B7 (_t058C);
    real[2] _t058E = prim $sub01C0<real[2]; %3> (_t058B, _t058D);
    int _t058F = 1;
    int _t0590 = 1;
    int _t0591 = 0;
    int[3] _t0592 = {_t058F, _t0590, _t0591};
    real _t0593 = time0543[1];
    int _t0594 = prim $r2i01B7 (_t0593);
    int _t0595 = prim $sub01C0<int; %3> (_t0592, _t0594);
    real _t0596 = prim $sub01C0<real; %2> (_t058E, _t0595);
    real _t0597 = prim -0026<$[]> (_t0581, _t0596);
    real _t0598 = -0.1e1;
    real _t0599 = 0.1e1;
    real[2] _t059A = {_t0598, _t0599};
    real _t059B = 0.e0;
    real _t059C = 0.1e1;
    real[2] _t059D = {_t059B, _t059C};
    real _t059E = 0.1e1;
    real _t059F = 0.e0;
    real[2] _t05A0 = {_t059E, _t059F};
    real[2][3] _t05A1 = {_t059A, _t059D, _t05A0};
    real _t05A2 = time0543[1];
    int _t05A3 = prim $r2i01B7 (_t05A2);
    real[2] _t05A4 = prim $sub01C0<real[2]; %3> (_t05A1, _t05A3);
    int _t05A5 = 1;
    int _t05A6 = 1;
    int _t05A7 = 0;
    int[3] _t05A8 = {_t05A5, _t05A6, _t05A7};
    real _t05A9 = time0543[1];
    int _t05AA = prim $r2i01B7 (_t05A9);
    int _t05AB = prim $sub01C0<int; %3> (_t05A8, _t05AA);
    real _t05AC = prim $sub01C0<real; %2> (_t05A4, _t05AB);
    real _t05AD = prim /0055 (_t0597, _t05AC);
    vec2 _t05AE = prim *0038<$[2]> (_t0570, _t05AD);
    vec2 _t05AF = prim +0017<$[2]> (_t0560, _t05AE);
    real _t05B0 = time0543[1];
    int _t05B1 = prim $r2i01B7 (_t05B0);
    int[2] _t05B2 = func nextCell40547 (_t05B1, cellId0540, mesh053F);
    int _t05B3 = 1;
    int _t05B4 = prim $sub01C0<int; %2> (_t05B2, _t05B3);
    Femdata: MeshPos _t05B5 = extractFemItemN((mesh053F, _t0550, _t05AF, _t05B4),RefBuild(Mesh),);
    return _t05B5;
  } else {
    real _t05B6 = time0543[0];
    vec2 _t05B7 = prim *0036<$[2]> (_t05B6, dPos0542);
    vec2 _t05B8 = prim +0017<$[2]> (_t05B7, refPos0541);
    Femdata: MeshPos _t05B9 = extractFemItemN((mesh053F, _t05B8),InvalidBuildBoundary(MeshPos),);
    return _t05B9;
  }
}
function int[2]#5 nextCell40547 (int faceIdx05BA, int cell05BB, Femdata: Mesh mesh05BC)
{
  int _t05BD = 6;
  int _t05BE = prim *0033 (cell05BB, _t05BD);
  int _t05BF = 2;
  int _t05C0 = prim *0033 (faceIdx05BA, _t05BF);
  int _t05C1 = prim +0015 (_t05BE, _t05C0);
  int[2] _t05C2 = extractFemItemN((mesh05BC, _t05C1),CellFaceCell(Mesh),);
  return _t05C2;
}
function vec2#0 _enter05C3 (vec2 refPos05C4, vec2 dPos05C5)
{
  real time05C6 = +inf;
  int face05C7 = -1;
  real faceTime05C8 = -inf;
  real _t05C9 = 0.1e1;
  real _t05CA = 0.e0;
  vec2 _t05CB = [_t05C9, _t05CA];
  vec2 _t05CC = prim -0026<$[2]> (_t05CB, refPos05C4);
  real _t05CD = -0.1e1;
  real _t05CE = 0.1e1;
  vec2 _t05CF = [_t05CD, _t05CE];
  real _t05D0 = -0.1e1;
  real _t05D1 = 0.1e1;
  vec2 _t05D2 = [_t05D0, _t05D1];
  real _t05D3 = prim ×00BD (dPos05C5, _t05D2);
  vec2 _t05D4 = prim /0057<$[2]> (_t05CF, _t05D3);
  real _t05D5 = prim ×00BD (_t05CC, _t05D4);
  real _t05D6 = -0.1e-15;
  bool _t05D7 = prim >=007E (_t05D5, _t05D6);
  real _t05D8 = 0.1e1;
  real _t05D9 = 0.e0;
  vec2 _t05DA = [_t05D8, _t05D9];
  vec2 _t05DB = prim -0026<$[2]> (_t05DA, refPos05C4);
  real _t05DC = -0.1e1;
  real _t05DD = 0.1e1;
  vec2 _t05DE = [_t05DC, _t05DD];
  real _t05DF = -0.1e1;
  real _t05E0 = 0.1e1;
  vec2 _t05E1 = [_t05DF, _t05E0];
  real _t05E2 = prim ×00BD (dPos05C5, _t05E1);
  vec2 _t05E3 = prim /0057<$[2]> (_t05DE, _t05E2);
  real _t05E4 = prim ×00BD (_t05DB, _t05E3);
  bool _t05E5 = prim >0080 (time05C6, _t05E4);
  real _t05E6 = -0.1e1;
  real _t05E7 = 0.1e1;
  vec2 _t05E8 = [_t05E6, _t05E7];
  real _t05E9 = prim ×00BD (dPos05C5, _t05E8);
  real _t05EA = prim |()|00B5<$[]> (_t05E9);
  real _t05EB = 0.1e-20;
  bool _t05EC = prim >=007E (_t05EA, _t05EB);
  bool _t05ED = prim $and01C4 (_t05E5, _t05EC);
  bool _t05EE = prim $and01C4 (_t05D7, _t05ED);
  if _t05EE {
    real _t05EF = 0.1e1;
    real _t05F0 = 0.1e-8;
    real _t05F1 = prim +0017<$[]> (_t05EF, _t05F0);
    real _t05F2 = 0.1e1;
    real _t05F3 = 0.1e1;
    vec2 _t05F4 = [_t05F2, _t05F3];
    real _t05F5 = 0.1e1;
    real _t05F6 = 0.e0;
    vec2 _t05F7 = [_t05F5, _t05F6];
    vec2 _t05F8 = prim -0026<$[2]> (_t05F7, refPos05C4);
    real _t05F9 = -0.1e1;
    real _t05FA = 0.1e1;
    vec2 _t05FB = [_t05F9, _t05FA];
    real _t05FC = -0.1e1;
    real _t05FD = 0.1e1;
    vec2 _t05FE = [_t05FC, _t05FD];
    real _t05FF = prim ×00BD (dPos05C5, _t05FE);
    vec2 _t0600 = prim /0057<$[2]> (_t05FB, _t05FF);
    real _t0601 = prim ×00BD (_t05F8, _t0600);
    vec2 _t0602 = prim *0038<$[2]> (dPos05C5, _t0601);
    vec2 _t0603 = prim +0017<$[2]> (refPos05C4, _t0602);
    real _t0604 = prim •00CE<$[2]; $[2]; $[]> (_t05F4, _t0603);
    bool _t0605 = prim >0080 (_t05F1, _t0604);
    real _t0606 = 0.1e-8;
    real _t0607 = 0.1e-8;
    vec2 _t0608 = [_t0606, _t0607];
    real _t0609 = 0.1e1;
    real _t060A = 0.e0;
    vec2 _t060B = [_t0609, _t060A];
    vec2 _t060C = prim -0026<$[2]> (_t060B, refPos05C4);
    real _t060D = -0.1e1;
    real _t060E = 0.1e1;
    vec2 _t060F = [_t060D, _t060E];
    real _t0610 = -0.1e1;
    real _t0611 = 0.1e1;
    vec2 _t0612 = [_t0610, _t0611];
    real _t0613 = prim ×00BD (dPos05C5, _t0612);
    vec2 _t0614 = prim /0057<$[2]> (_t060F, _t0613);
    real _t0615 = prim ×00BD (_t060C, _t0614);
    vec2 _t0616 = prim *0038<$[2]> (dPos05C5, _t0615);
    vec2 _t0617 = prim +0017<$[2]> (refPos05C4, _t0616);
    vec2 _t0618 = prim +0017<$[2]> (_t0608, _t0617);
    real _t0619 = _t0618[0];
    real _t061A = -0.e0;
    bool _t061B = prim >0080 (_t0619, _t061A);
    real _t061C = 0.1e-8;
    real _t061D = 0.1e-8;
    vec2 _t061E = [_t061C, _t061D];
    real _t061F = 0.1e1;
    real _t0620 = 0.e0;
    vec2 _t0621 = [_t061F, _t0620];
    vec2 _t0622 = prim -0026<$[2]> (_t0621, refPos05C4);
    real _t0623 = -0.1e1;
    real _t0624 = 0.1e1;
    vec2 _t0625 = [_t0623, _t0624];
    real _t0626 = -0.1e1;
    real _t0627 = 0.1e1;
    vec2 _t0628 = [_t0626, _t0627];
    real _t0629 = prim ×00BD (dPos05C5, _t0628);
    vec2 _t062A = prim /0057<$[2]> (_t0625, _t0629);
    real _t062B = prim ×00BD (_t0622, _t062A);
    vec2 _t062C = prim *0038<$[2]> (dPos05C5, _t062B);
    vec2 _t062D = prim +0017<$[2]> (refPos05C4, _t062C);
    vec2 _t062E = prim +0017<$[2]> (_t061E, _t062D);
    real _t062F = _t062E[1];
    real _t0630 = -0.e0;
    bool _t0631 = prim >0080 (_t062F, _t0630);
    bool _t0632 = prim $and01C4 (_t061B, _t0631);
    bool _t0633 = prim $and01C4 (_t0605, _t0632);
    if _t0633 {
      real _t0634 = 0.1e1;
      real _t0635 = 0.e0;
      vec2 _t0636 = [_t0634, _t0635];
      vec2 _t0637 = prim -0026<$[2]> (_t0636, refPos05C4);
      real _t0638 = -0.1e1;
      real _t0639 = 0.1e1;
      vec2 _t063A = [_t0638, _t0639];
      real _t063B = -0.1e1;
      real _t063C = 0.1e1;
      vec2 _t063D = [_t063B, _t063C];
      real _t063E = prim ×00BD (dPos05C5, _t063D);
      vec2 _t063F = prim /0057<$[2]> (_t063A, _t063E);
      time05C6 = prim ×00BD (_t0637, _t063F);
      face05C7 = 0;
    }
  }
  real _t0640 = 0.e0;
  real _t0641 = 0.e0;
  vec2 _t0642 = [_t0640, _t0641];
  vec2 _t0643 = prim -0026<$[2]> (_t0642, refPos05C4);
  real _t0644 = 0.e0;
  real _t0645 = 0.1e1;
  vec2 _t0646 = [_t0644, _t0645];
  real _t0647 = 0.e0;
  real _t0648 = 0.1e1;
  vec2 _t0649 = [_t0647, _t0648];
  real _t064A = prim ×00BD (dPos05C5, _t0649);
  vec2 _t064B = prim /0057<$[2]> (_t0646, _t064A);
  real _t064C = prim ×00BD (_t0643, _t064B);
  real _t064D = -0.1e-15;
  bool _t064E = prim >=007E (_t064C, _t064D);
  real _t064F = 0.e0;
  real _t0650 = 0.e0;
  vec2 _t0651 = [_t064F, _t0650];
  vec2 _t0652 = prim -0026<$[2]> (_t0651, refPos05C4);
  real _t0653 = 0.e0;
  real _t0654 = 0.1e1;
  vec2 _t0655 = [_t0653, _t0654];
  real _t0656 = 0.e0;
  real _t0657 = 0.1e1;
  vec2 _t0658 = [_t0656, _t0657];
  real _t0659 = prim ×00BD (dPos05C5, _t0658);
  vec2 _t065A = prim /0057<$[2]> (_t0655, _t0659);
  real _t065B = prim ×00BD (_t0652, _t065A);
  bool _t065C = prim >0080 (time05C6, _t065B);
  real _t065D = 0.e0;
  real _t065E = 0.1e1;
  vec2 _t065F = [_t065D, _t065E];
  real _t0660 = prim ×00BD (dPos05C5, _t065F);
  real _t0661 = prim |()|00B5<$[]> (_t0660);
  real _t0662 = 0.1e-20;
  bool _t0663 = prim >=007E (_t0661, _t0662);
  bool _t0664 = prim $and01C4 (_t065C, _t0663);
  bool _t0665 = prim $and01C4 (_t064E, _t0664);
  if _t0665 {
    real _t0666 = 0.1e1;
    real _t0667 = 0.1e-8;
    real _t0668 = prim +0017<$[]> (_t0666, _t0667);
    real _t0669 = 0.1e1;
    real _t066A = 0.1e1;
    vec2 _t066B = [_t0669, _t066A];
    real _t066C = 0.e0;
    real _t066D = 0.e0;
    vec2 _t066E = [_t066C, _t066D];
    vec2 _t066F = prim -0026<$[2]> (_t066E, refPos05C4);
    real _t0670 = 0.e0;
    real _t0671 = 0.1e1;
    vec2 _t0672 = [_t0670, _t0671];
    real _t0673 = 0.e0;
    real _t0674 = 0.1e1;
    vec2 _t0675 = [_t0673, _t0674];
    real _t0676 = prim ×00BD (dPos05C5, _t0675);
    vec2 _t0677 = prim /0057<$[2]> (_t0672, _t0676);
    real _t0678 = prim ×00BD (_t066F, _t0677);
    vec2 _t0679 = prim *0038<$[2]> (dPos05C5, _t0678);
    vec2 _t067A = prim +0017<$[2]> (refPos05C4, _t0679);
    real _t067B = prim •00CE<$[2]; $[2]; $[]> (_t066B, _t067A);
    bool _t067C = prim >0080 (_t0668, _t067B);
    real _t067D = 0.1e-8;
    real _t067E = 0.1e-8;
    vec2 _t067F = [_t067D, _t067E];
    real _t0680 = 0.e0;
    real _t0681 = 0.e0;
    vec2 _t0682 = [_t0680, _t0681];
    vec2 _t0683 = prim -0026<$[2]> (_t0682, refPos05C4);
    real _t0684 = 0.e0;
    real _t0685 = 0.1e1;
    vec2 _t0686 = [_t0684, _t0685];
    real _t0687 = 0.e0;
    real _t0688 = 0.1e1;
    vec2 _t0689 = [_t0687, _t0688];
    real _t068A = prim ×00BD (dPos05C5, _t0689);
    vec2 _t068B = prim /0057<$[2]> (_t0686, _t068A);
    real _t068C = prim ×00BD (_t0683, _t068B);
    vec2 _t068D = prim *0038<$[2]> (dPos05C5, _t068C);
    vec2 _t068E = prim +0017<$[2]> (refPos05C4, _t068D);
    vec2 _t068F = prim +0017<$[2]> (_t067F, _t068E);
    real _t0690 = _t068F[0];
    real _t0691 = -0.e0;
    bool _t0692 = prim >0080 (_t0690, _t0691);
    real _t0693 = 0.1e-8;
    real _t0694 = 0.1e-8;
    vec2 _t0695 = [_t0693, _t0694];
    real _t0696 = 0.e0;
    real _t0697 = 0.e0;
    vec2 _t0698 = [_t0696, _t0697];
    vec2 _t0699 = prim -0026<$[2]> (_t0698, refPos05C4);
    real _t069A = 0.e0;
    real _t069B = 0.1e1;
    vec2 _t069C = [_t069A, _t069B];
    real _t069D = 0.e0;
    real _t069E = 0.1e1;
    vec2 _t069F = [_t069D, _t069E];
    real _t06A0 = prim ×00BD (dPos05C5, _t069F);
    vec2 _t06A1 = prim /0057<$[2]> (_t069C, _t06A0);
    real _t06A2 = prim ×00BD (_t0699, _t06A1);
    vec2 _t06A3 = prim *0038<$[2]> (dPos05C5, _t06A2);
    vec2 _t06A4 = prim +0017<$[2]> (refPos05C4, _t06A3);
    vec2 _t06A5 = prim +0017<$[2]> (_t0695, _t06A4);
    real _t06A6 = _t06A5[1];
    real _t06A7 = -0.e0;
    bool _t06A8 = prim >0080 (_t06A6, _t06A7);
    bool _t06A9 = prim $and01C4 (_t0692, _t06A8);
    bool _t06AA = prim $and01C4 (_t067C, _t06A9);
    if _t06AA {
      real _t06AB = 0.e0;
      real _t06AC = 0.e0;
      vec2 _t06AD = [_t06AB, _t06AC];
      vec2 _t06AE = prim -0026<$[2]> (_t06AD, refPos05C4);
      real _t06AF = 0.e0;
      real _t06B0 = 0.1e1;
      vec2 _t06B1 = [_t06AF, _t06B0];
      real _t06B2 = 0.e0;
      real _t06B3 = 0.1e1;
      vec2 _t06B4 = [_t06B2, _t06B3];
      real _t06B5 = prim ×00BD (dPos05C5, _t06B4);
      vec2 _t06B6 = prim /0057<$[2]> (_t06B1, _t06B5);
      time05C6 = prim ×00BD (_t06AE, _t06B6);
      face05C7 = 1;
    }
  }
  real _t06B7 = 0.e0;
  real _t06B8 = 0.e0;
  vec2 _t06B9 = [_t06B7, _t06B8];
  vec2 _t06BA = prim -0026<$[2]> (_t06B9, refPos05C4);
  real _t06BB = 0.1e1;
  real _t06BC = 0.e0;
  vec2 _t06BD = [_t06BB, _t06BC];
  real _t06BE = 0.1e1;
  real _t06BF = 0.e0;
  vec2 _t06C0 = [_t06BE, _t06BF];
  real _t06C1 = prim ×00BD (dPos05C5, _t06C0);
  vec2 _t06C2 = prim /0057<$[2]> (_t06BD, _t06C1);
  real _t06C3 = prim ×00BD (_t06BA, _t06C2);
  real _t06C4 = -0.1e-15;
  bool _t06C5 = prim >=007E (_t06C3, _t06C4);
  real _t06C6 = 0.e0;
  real _t06C7 = 0.e0;
  vec2 _t06C8 = [_t06C6, _t06C7];
  vec2 _t06C9 = prim -0026<$[2]> (_t06C8, refPos05C4);
  real _t06CA = 0.1e1;
  real _t06CB = 0.e0;
  vec2 _t06CC = [_t06CA, _t06CB];
  real _t06CD = 0.1e1;
  real _t06CE = 0.e0;
  vec2 _t06CF = [_t06CD, _t06CE];
  real _t06D0 = prim ×00BD (dPos05C5, _t06CF);
  vec2 _t06D1 = prim /0057<$[2]> (_t06CC, _t06D0);
  real _t06D2 = prim ×00BD (_t06C9, _t06D1);
  bool _t06D3 = prim >0080 (time05C6, _t06D2);
  real _t06D4 = 0.1e1;
  real _t06D5 = 0.e0;
  vec2 _t06D6 = [_t06D4, _t06D5];
  real _t06D7 = prim ×00BD (dPos05C5, _t06D6);
  real _t06D8 = prim |()|00B5<$[]> (_t06D7);
  real _t06D9 = 0.1e-20;
  bool _t06DA = prim >=007E (_t06D8, _t06D9);
  bool _t06DB = prim $and01C4 (_t06D3, _t06DA);
  bool _t06DC = prim $and01C4 (_t06C5, _t06DB);
  if _t06DC {
    real _t06DD = 0.1e1;
    real _t06DE = 0.1e-8;
    real _t06DF = prim +0017<$[]> (_t06DD, _t06DE);
    real _t06E0 = 0.1e1;
    real _t06E1 = 0.1e1;
    vec2 _t06E2 = [_t06E0, _t06E1];
    real _t06E3 = 0.e0;
    real _t06E4 = 0.e0;
    vec2 _t06E5 = [_t06E3, _t06E4];
    vec2 _t06E6 = prim -0026<$[2]> (_t06E5, refPos05C4);
    real _t06E7 = 0.1e1;
    real _t06E8 = 0.e0;
    vec2 _t06E9 = [_t06E7, _t06E8];
    real _t06EA = 0.1e1;
    real _t06EB = 0.e0;
    vec2 _t06EC = [_t06EA, _t06EB];
    real _t06ED = prim ×00BD (dPos05C5, _t06EC);
    vec2 _t06EE = prim /0057<$[2]> (_t06E9, _t06ED);
    real _t06EF = prim ×00BD (_t06E6, _t06EE);
    vec2 _t06F0 = prim *0038<$[2]> (dPos05C5, _t06EF);
    vec2 _t06F1 = prim +0017<$[2]> (refPos05C4, _t06F0);
    real _t06F2 = prim •00CE<$[2]; $[2]; $[]> (_t06E2, _t06F1);
    bool _t06F3 = prim >0080 (_t06DF, _t06F2);
    real _t06F4 = 0.1e-8;
    real _t06F5 = 0.1e-8;
    vec2 _t06F6 = [_t06F4, _t06F5];
    real _t06F7 = 0.e0;
    real _t06F8 = 0.e0;
    vec2 _t06F9 = [_t06F7, _t06F8];
    vec2 _t06FA = prim -0026<$[2]> (_t06F9, refPos05C4);
    real _t06FB = 0.1e1;
    real _t06FC = 0.e0;
    vec2 _t06FD = [_t06FB, _t06FC];
    real _t06FE = 0.1e1;
    real _t06FF = 0.e0;
    vec2 _t0700 = [_t06FE, _t06FF];
    real _t0701 = prim ×00BD (dPos05C5, _t0700);
    vec2 _t0702 = prim /0057<$[2]> (_t06FD, _t0701);
    real _t0703 = prim ×00BD (_t06FA, _t0702);
    vec2 _t0704 = prim *0038<$[2]> (dPos05C5, _t0703);
    vec2 _t0705 = prim +0017<$[2]> (refPos05C4, _t0704);
    vec2 _t0706 = prim +0017<$[2]> (_t06F6, _t0705);
    real _t0707 = _t0706[0];
    real _t0708 = -0.e0;
    bool _t0709 = prim >0080 (_t0707, _t0708);
    real _t070A = 0.1e-8;
    real _t070B = 0.1e-8;
    vec2 _t070C = [_t070A, _t070B];
    real _t070D = 0.e0;
    real _t070E = 0.e0;
    vec2 _t070F = [_t070D, _t070E];
    vec2 _t0710 = prim -0026<$[2]> (_t070F, refPos05C4);
    real _t0711 = 0.1e1;
    real _t0712 = 0.e0;
    vec2 _t0713 = [_t0711, _t0712];
    real _t0714 = 0.1e1;
    real _t0715 = 0.e0;
    vec2 _t0716 = [_t0714, _t0715];
    real _t0717 = prim ×00BD (dPos05C5, _t0716);
    vec2 _t0718 = prim /0057<$[2]> (_t0713, _t0717);
    real _t0719 = prim ×00BD (_t0710, _t0718);
    vec2 _t071A = prim *0038<$[2]> (dPos05C5, _t0719);
    vec2 _t071B = prim +0017<$[2]> (refPos05C4, _t071A);
    vec2 _t071C = prim +0017<$[2]> (_t070C, _t071B);
    real _t071D = _t071C[1];
    real _t071E = -0.e0;
    bool _t071F = prim >0080 (_t071D, _t071E);
    bool _t0720 = prim $and01C4 (_t0709, _t071F);
    bool _t0721 = prim $and01C4 (_t06F3, _t0720);
    if _t0721 {
      real _t0722 = 0.e0;
      real _t0723 = 0.e0;
      vec2 _t0724 = [_t0722, _t0723];
      vec2 _t0725 = prim -0026<$[2]> (_t0724, refPos05C4);
      real _t0726 = 0.1e1;
      real _t0727 = 0.e0;
      vec2 _t0728 = [_t0726, _t0727];
      real _t0729 = 0.1e1;
      real _t072A = 0.e0;
      vec2 _t072B = [_t0729, _t072A];
      real _t072C = prim ×00BD (dPos05C5, _t072B);
      vec2 _t072D = prim /0057<$[2]> (_t0728, _t072C);
      time05C6 = prim ×00BD (_t0725, _t072D);
      face05C7 = 2;
    }
  }
  int _t072E = -1;
  bool _t072F = prim !=0086 (face05C7, _t072E);
  if _t072F {
    real _t0730 = 0.e0;
    real _t0731 = prim max0125 (time05C6, _t0730);
    real _t0732 = (real)face05C7;
    vec2 _t0733 = [_t0731, _t0732];
    return _t0733;
  } else {
    real _t0734 = -0.1e1;
    real _t0735 = -0.1e1;
    vec2 _t0736 = [_t0734, _t0735];
    return _t0736;
  }
}
function vec2#0 _exit0737 (vec2 refPos05C4, vec2 dPos05C5, int i0738)
{
  real time0739 = +inf;
  int face073A = -1;
  real faceTime073B = -inf;
  real _t073C = 0.1e1;
  real _t073D = 0.e0;
  vec2 _t073E = [_t073C, _t073D];
  vec2 _t073F = prim -0026<$[2]> (_t073E, refPos05C4);
  real _t0740 = -0.1e1;
  real _t0741 = 0.1e1;
  vec2 _t0742 = [_t0740, _t0741];
  real _t0743 = -0.1e1;
  real _t0744 = 0.1e1;
  vec2 _t0745 = [_t0743, _t0744];
  real _t0746 = prim ×00BD (dPos05C5, _t0745);
  vec2 _t0747 = prim /0057<$[2]> (_t0742, _t0746);
  real _t0748 = prim ×00BD (_t073F, _t0747);
  real _t0749 = -0.1e-15;
  bool _t074A = prim >=007E (_t0748, _t0749);
  real _t074B = 0.1e1;
  real _t074C = 0.e0;
  vec2 _t074D = [_t074B, _t074C];
  vec2 _t074E = prim -0026<$[2]> (_t074D, refPos05C4);
  real _t074F = -0.1e1;
  real _t0750 = 0.1e1;
  vec2 _t0751 = [_t074F, _t0750];
  real _t0752 = -0.1e1;
  real _t0753 = 0.1e1;
  vec2 _t0754 = [_t0752, _t0753];
  real _t0755 = prim ×00BD (dPos05C5, _t0754);
  vec2 _t0756 = prim /0057<$[2]> (_t0751, _t0755);
  real _t0757 = prim ×00BD (_t074E, _t0756);
  bool _t0758 = prim >0080 (time0739, _t0757);
  real _t0759 = -0.1e1;
  real _t075A = 0.1e1;
  vec2 _t075B = [_t0759, _t075A];
  real _t075C = prim ×00BD (dPos05C5, _t075B);
  real _t075D = prim |()|00B5<$[]> (_t075C);
  real _t075E = 0.1e-20;
  bool _t075F = prim >=007E (_t075D, _t075E);
  bool _t0760 = prim $and01C4 (_t0758, _t075F);
  bool _t0761 = prim $and01C4 (_t074A, _t0760);
  if _t0761 {
    int _t0762 = 0;
    bool _t0763 = prim !=0086 (i0738, _t0762);
    if _t0763 {
      real _t0764 = 0.1e1;
      real _t0765 = 0.e0;
      vec2 _t0766 = [_t0764, _t0765];
      vec2 _t0767 = prim -0026<$[2]> (_t0766, refPos05C4);
      real _t0768 = -0.1e1;
      real _t0769 = 0.1e1;
      vec2 _t076A = [_t0768, _t0769];
      real _t076B = -0.1e1;
      real _t076C = 0.1e1;
      vec2 _t076D = [_t076B, _t076C];
      real _t076E = prim ×00BD (dPos05C5, _t076D);
      vec2 _t076F = prim /0057<$[2]> (_t076A, _t076E);
      time0739 = prim ×00BD (_t0767, _t076F);
      face073A = 0;
    } else {
      real _t0770 = 0.1e1;
      real _t0771 = 0.e0;
      vec2 _t0772 = [_t0770, _t0771];
      vec2 _t0773 = prim -0026<$[2]> (_t0772, refPos05C4);
      real _t0774 = -0.1e1;
      real _t0775 = 0.1e1;
      vec2 _t0776 = [_t0774, _t0775];
      real _t0777 = -0.1e1;
      real _t0778 = 0.1e1;
      vec2 _t0779 = [_t0777, _t0778];
      real _t077A = prim ×00BD (dPos05C5, _t0779);
      vec2 _t077B = prim /0057<$[2]> (_t0776, _t077A);
      faceTime073B = prim ×00BD (_t0773, _t077B);
    }
  }
  real _t077C = 0.e0;
  real _t077D = 0.e0;
  vec2 _t077E = [_t077C, _t077D];
  vec2 _t077F = prim -0026<$[2]> (_t077E, refPos05C4);
  real _t0780 = 0.e0;
  real _t0781 = 0.1e1;
  vec2 _t0782 = [_t0780, _t0781];
  real _t0783 = 0.e0;
  real _t0784 = 0.1e1;
  vec2 _t0785 = [_t0783, _t0784];
  real _t0786 = prim ×00BD (dPos05C5, _t0785);
  vec2 _t0787 = prim /0057<$[2]> (_t0782, _t0786);
  real _t0788 = prim ×00BD (_t077F, _t0787);
  real _t0789 = -0.1e-15;
  bool _t078A = prim >=007E (_t0788, _t0789);
  real _t078B = 0.e0;
  real _t078C = 0.e0;
  vec2 _t078D = [_t078B, _t078C];
  vec2 _t078E = prim -0026<$[2]> (_t078D, refPos05C4);
  real _t078F = 0.e0;
  real _t0790 = 0.1e1;
  vec2 _t0791 = [_t078F, _t0790];
  real _t0792 = 0.e0;
  real _t0793 = 0.1e1;
  vec2 _t0794 = [_t0792, _t0793];
  real _t0795 = prim ×00BD (dPos05C5, _t0794);
  vec2 _t0796 = prim /0057<$[2]> (_t0791, _t0795);
  real _t0797 = prim ×00BD (_t078E, _t0796);
  bool _t0798 = prim >0080 (time0739, _t0797);
  real _t0799 = 0.e0;
  real _t079A = 0.1e1;
  vec2 _t079B = [_t0799, _t079A];
  real _t079C = prim ×00BD (dPos05C5, _t079B);
  real _t079D = prim |()|00B5<$[]> (_t079C);
  real _t079E = 0.1e-20;
  bool _t079F = prim >=007E (_t079D, _t079E);
  bool _t07A0 = prim $and01C4 (_t0798, _t079F);
  bool _t07A1 = prim $and01C4 (_t078A, _t07A0);
  if _t07A1 {
    int _t07A2 = 1;
    bool _t07A3 = prim !=0086 (i0738, _t07A2);
    if _t07A3 {
      real _t07A4 = 0.e0;
      real _t07A5 = 0.e0;
      vec2 _t07A6 = [_t07A4, _t07A5];
      vec2 _t07A7 = prim -0026<$[2]> (_t07A6, refPos05C4);
      real _t07A8 = 0.e0;
      real _t07A9 = 0.1e1;
      vec2 _t07AA = [_t07A8, _t07A9];
      real _t07AB = 0.e0;
      real _t07AC = 0.1e1;
      vec2 _t07AD = [_t07AB, _t07AC];
      real _t07AE = prim ×00BD (dPos05C5, _t07AD);
      vec2 _t07AF = prim /0057<$[2]> (_t07AA, _t07AE);
      time0739 = prim ×00BD (_t07A7, _t07AF);
      face073A = 1;
    } else {
      real _t07B0 = 0.e0;
      real _t07B1 = 0.e0;
      vec2 _t07B2 = [_t07B0, _t07B1];
      vec2 _t07B3 = prim -0026<$[2]> (_t07B2, refPos05C4);
      real _t07B4 = 0.e0;
      real _t07B5 = 0.1e1;
      vec2 _t07B6 = [_t07B4, _t07B5];
      real _t07B7 = 0.e0;
      real _t07B8 = 0.1e1;
      vec2 _t07B9 = [_t07B7, _t07B8];
      real _t07BA = prim ×00BD (dPos05C5, _t07B9);
      vec2 _t07BB = prim /0057<$[2]> (_t07B6, _t07BA);
      faceTime073B = prim ×00BD (_t07B3, _t07BB);
    }
  }
  real _t07BC = 0.e0;
  real _t07BD = 0.e0;
  vec2 _t07BE = [_t07BC, _t07BD];
  vec2 _t07BF = prim -0026<$[2]> (_t07BE, refPos05C4);
  real _t07C0 = 0.1e1;
  real _t07C1 = 0.e0;
  vec2 _t07C2 = [_t07C0, _t07C1];
  real _t07C3 = 0.1e1;
  real _t07C4 = 0.e0;
  vec2 _t07C5 = [_t07C3, _t07C4];
  real _t07C6 = prim ×00BD (dPos05C5, _t07C5);
  vec2 _t07C7 = prim /0057<$[2]> (_t07C2, _t07C6);
  real _t07C8 = prim ×00BD (_t07BF, _t07C7);
  real _t07C9 = -0.1e-15;
  bool _t07CA = prim >=007E (_t07C8, _t07C9);
  real _t07CB = 0.e0;
  real _t07CC = 0.e0;
  vec2 _t07CD = [_t07CB, _t07CC];
  vec2 _t07CE = prim -0026<$[2]> (_t07CD, refPos05C4);
  real _t07CF = 0.1e1;
  real _t07D0 = 0.e0;
  vec2 _t07D1 = [_t07CF, _t07D0];
  real _t07D2 = 0.1e1;
  real _t07D3 = 0.e0;
  vec2 _t07D4 = [_t07D2, _t07D3];
  real _t07D5 = prim ×00BD (dPos05C5, _t07D4);
  vec2 _t07D6 = prim /0057<$[2]> (_t07D1, _t07D5);
  real _t07D7 = prim ×00BD (_t07CE, _t07D6);
  bool _t07D8 = prim >0080 (time0739, _t07D7);
  real _t07D9 = 0.1e1;
  real _t07DA = 0.e0;
  vec2 _t07DB = [_t07D9, _t07DA];
  real _t07DC = prim ×00BD (dPos05C5, _t07DB);
  real _t07DD = prim |()|00B5<$[]> (_t07DC);
  real _t07DE = 0.1e-20;
  bool _t07DF = prim >=007E (_t07DD, _t07DE);
  bool _t07E0 = prim $and01C4 (_t07D8, _t07DF);
  bool _t07E1 = prim $and01C4 (_t07CA, _t07E0);
  if _t07E1 {
    int _t07E2 = 2;
    bool _t07E3 = prim !=0086 (i0738, _t07E2);
    if _t07E3 {
      real _t07E4 = 0.e0;
      real _t07E5 = 0.e0;
      vec2 _t07E6 = [_t07E4, _t07E5];
      vec2 _t07E7 = prim -0026<$[2]> (_t07E6, refPos05C4);
      real _t07E8 = 0.1e1;
      real _t07E9 = 0.e0;
      vec2 _t07EA = [_t07E8, _t07E9];
      real _t07EB = 0.1e1;
      real _t07EC = 0.e0;
      vec2 _t07ED = [_t07EB, _t07EC];
      real _t07EE = prim ×00BD (dPos05C5, _t07ED);
      vec2 _t07EF = prim /0057<$[2]> (_t07EA, _t07EE);
      time0739 = prim ×00BD (_t07E7, _t07EF);
      face073A = 2;
    } else {
      real _t07F0 = 0.e0;
      real _t07F1 = 0.e0;
      vec2 _t07F2 = [_t07F0, _t07F1];
      vec2 _t07F3 = prim -0026<$[2]> (_t07F2, refPos05C4);
      real _t07F4 = 0.1e1;
      real _t07F5 = 0.e0;
      vec2 _t07F6 = [_t07F4, _t07F5];
      real _t07F7 = 0.1e1;
      real _t07F8 = 0.e0;
      vec2 _t07F9 = [_t07F7, _t07F8];
      real _t07FA = prim ×00BD (dPos05C5, _t07F9);
      vec2 _t07FB = prim /0057<$[2]> (_t07F6, _t07FA);
      faceTime073B = prim ×00BD (_t07F3, _t07FB);
    }
  }
  int _t07FC = -1;
  bool _t07FD = prim !=0086 (face073A, _t07FC);
  if _t07FD {
    real _t07FE = 0.e0;
    real _t07FF = prim max0125 (time0739, _t07FE);
    real _t0800 = (real)face073A;
    vec2 _t0801 = [_t07FF, _t0800];
    return _t0801;
  } else {
    real _t0802 = -inf;
    bool _t0803 = prim ==0084 (_t0802, faceTime073B);
    if _t0803 {
      real _t0804 = -0.1e1;
      real _t0805 = -0.1e1;
      vec2 _t0806 = [_t0804, _t0805];
      return _t0806;
    } else {
      real _t0807 = (real)i0738;
      vec2 _t0808 = [faceTime073B, _t0807];
      return _t0808;
    }
  }
}
function Femdata: Mesh#0 domain0809 (Femdata: Space arg0080A)
{
  Femdata: Mesh _t080B = extractFem(arg0080A, Mesh);
  return _t080B;
}
function Femdata: Space#0 space080C (Femdata: FemFunc arg0080D)
{
  Femdata: Space _t080E = extractFem(arg0080D, Space);
  return _t080E;
}
function Femdata: FuncCell#3 funcCell080F (Femdata: FemFunc arg00810, Femdata: MeshCell arg10811)
{
  int _t0812 = extractFemItem(CellIndex(MeshCell), int, arg10811);
  Femdata: FuncCell _t0813 = loadFem(FuncCell, arg00810, _t0812);
  return _t0813;
}
function int#4 sign082E (real x082F)
{
  real _t0830 = 0.e0;
  bool _t0831 = prim >0080 (x082F, _t0830);
  if _t0831 {
    int _t0832 = 1;
    return _t0832;
  } else {
    real _t0833 = 0.e0;
    bool _t0834 = prim <007A (x082F, _t0833);
    if _t0834 {
      int _t0835 = -1;
      return _t0835;
    } else {
      int _t0836 = 0;
      return _t0836;
    }
  }
}
globalInit {
  int _t046A = 0;
  int _t0468 = 1;
  int _t046C = extractFemItem(NumCell(Mesh), int, a0466);
  int _t046B = prim -0024 (_t046C, _t0468);
  int[] _t046F = prim $range01C3 (_t046A, _t046B);
  Femdata: MeshCell[] _t0470 = {};
  foreach _t046E in _t046F {
    Femdata: MeshCell _t0471 = loadFem(MeshCell, a0466, _t046E);
    _t0470 = prim @0010<Femdata: MeshCell> (_t0470, _t0471);
  }
  0cell_a0467 = _t0470;
  b0472 = loadFem(Space, 0b0472_intermedateGlobal0473, a0466);
  c0474 = loadFem(FemFunc, 0c0474_intermedateGlobal0475, b0472);
  vec3 _t0814 = prim -0026<$[3]> (camAt0457, camEye0453);
  camDist0815 = prim |()|00B5<$[3]> (_t0814);
  camNearVsp0816 = prim +0017<$[]> (camNear0462, camDist0815);
  camFarVsp0817 = prim +0017<$[]> (camFar0463, camDist0815);
  vec3 _t0818 = prim -0026<$[3]> (camAt0457, camEye0453);
  camN0819 = prim normalize0137<$[3]> (_t0818);
  vec3 _t081A = prim ×00BE (camN0819, camUp045B);
  camU081B = prim normalize0137<$[3]> (_t081A);
  camV081C = prim ×00BE (camU081B, camN0819);
  real _t081D = 0.314159265358979323846264338327950288e1;
  real _t081E = prim *0034 (camFOV045F, _t081D);
  real _t081F = 0.36e3;
  real _t0820 = prim /0055 (_t081E, _t081F);
  real _t0821 = prim tan0179 (_t0820);
  camVmax0822 = prim *0034 (_t0821, camDist0815);
  real _t0823 = (real)iresU0460;
  real _t0824 = prim *0034 (camVmax0822, _t0823);
  real _t0825 = (real)iresV0461;
  camUmax0826 = prim /0055 (_t0824, _t0825);
  kernel _t0827 = tent;
  IMAGE1D<double[3]> img0828 = clamp(cmap0483);
  CM0829 = prim ⊛0074<#0; %1; $[3]> (_t0827, img0828);
  tensor[3,3] _t082A = [camU081B, camV081C, camN0819];
  tensor[3,3] _t082B = prim transpose0145<%3; %3> (_t082A);
  vec3 _t082C = prim normalize0137<$[3]> (lightVsp048C);
  L082D = prim •00CE<$[3,3]; $[3]; $[3]> (_t082B, _t082C);
}
strand ray (int ui0837, int vi0838) {
  real rayU0839;
  real rayV0840;
  vec3 UV0847;
  vec3 rayOrig084A;
  vec3 rayVec084B;
  real camNearVsp0850;
  real camFarVsp0851;
  vec3 rayStart0852;
  int offset0854;
  int len0857;
  int itter085C;
  int intersectionItter085D;
  int idx085E;
  vec2 interval085F;
  real s0860;
  real e0861;
  Femdata: MeshCell cc0862;
  Femdata: FuncCell fc0864;
  bool newton0865;
  output real out0866;
  output vec4 rgba0867;
  {
    real _t083A = prim unary -008B<$[]> (camUmax0826);
    real _t083B = -0.5e0;
    real _t083C = (real)ui0837;
    real _t083D = (real)iresU0460;
    real _t083E = 0.5e0;
    real _t083F = prim -0026<$[]> (_t083D, _t083E);
    rayU0839 = prim lerp0098<$[]> (_t083A, camUmax0826, _t083B, _t083C, _t083F);
    real _t0841 = prim unary -008B<$[]> (camVmax0822);
    real _t0842 = -0.5e0;
    real _t0843 = (real)vi0838;
    real _t0844 = (real)iresV0461;
    real _t0845 = 0.5e0;
    real _t0846 = prim -0026<$[]> (_t0844, _t0845);
    rayV0840 = prim lerp0098<$[]> (_t0841, camVmax0822, _t0842, _t0843, _t0846);
    vec3 _t0848 = prim *0036<$[3]> (rayU0839, camU081B);
    vec3 _t0849 = prim *0036<$[3]> (rayV0840, camV081C);
    UV0847 = prim +0017<$[3]> (_t0848, _t0849);
    rayOrig084A = prim +0017<$[3]> (camEye0453, UV0847);
    real _t084C = 0.e0;
    real _t084D = 0.e0;
    real _t084E = 0.e0;
    vec3 _t084F = [_t084C, _t084D, _t084E];
    rayVec084B = prim +0017<$[3]> (camN0819, _t084F);
    camNearVsp0850 = camNearVsp0816;
    camFarVsp0851 = camFarVsp0817;
    vec3 _t0853 = prim *0036<$[3]> (camNearVsp0850, rayVec084B);
    rayStart0852 = prim +0017<$[3]> (rayOrig084A, _t0853);
    int _t0855 = prim *0033 (ui0837, iresV0461);
    int _t0856 = prim +0015 (_t0855, vi0838);
    offset0854 = prim $dynsub01C2<int> (indecies0477, _t0856);
    int _t0858 = prim *0033 (iresU0460, iresV0461);
    int _t0859 = prim *0033 (ui0837, iresV0461);
    int _t085A = prim +0015 (_t0858, _t0859);
    int _t085B = prim +0015 (_t085A, vi0838);
    len0857 = prim $dynsub01C2<int> (indecies0477, _t085B);
    itter085C = 0;
    intersectionItter085D = 0;
    idx085E = prim +0015 (offset0854, itter085C);
    interval085F = prim $dynsub01C2<vec2> (times0478, idx085E);
    s0860 = interval085F[0];
    e0861 = interval085F[1];
    int _t0863 = 0;
    cc0862 = prim $dynsub01C2<Femdata: MeshCell> (0cell_a0467, _t0863);
    fc0864 = func funcCell080F (c0474, cc0862);
    newton0865 = true;
    out0866 = 0.e0;
    real _t0868 = 0.e0;
    real _t0869 = 0.e0;
    real _t086A = 0.e0;
    real _t086B = 0.e0;
    rgba0867 = [_t0868, _t0869, _t086A, _t086B];
  }
  start
  {
    int _t086C = 0;
    bool _t086D = prim ==0082 (len0857, _t086C);
    if _t086D {
      stabilize;
    }
    int _t086E = prim $dynsub01C2<int> (cells0479, idx085E);
    cc0862 = prim $dynsub01C2<Femdata: MeshCell> (0cell_a0467, _t086E);
    fc0864 = func funcCell080F (c0474, cc0862);
  }
  update
  {
    string _t086F = "Interval:";
    vec2 _t0870 = [s0860, e0861];
    string _t0871 = "\n";
    print (_t086F, _t0870, _t0871);
    string _t0872 = "inner itter:";
    string _t0873 = "\n";
    print (_t0872, intersectionItter085D, _t0873);
    string _t0874 = "Outer itter:";
    string _t0875 = "\n";
    print (_t0874, itter085C, _t0875);
    real _t0876 = rayOrig084A[0];
    real _t0877 = rayOrig084A[1];
    vec2 _t0878 = [_t0876, _t0877];
    real _t0879 = rayVec084B[0];
    real _t087A = rayVec084B[1];
    vec2 _t087B = [_t0879, _t087A];
    vec2 _t087C = prim *0036<$[2]> (s0860, _t087B);
    vec2 startRay087D = prim +0017<$[2]> (_t0878, _t087C);
    real _t087E = rayOrig084A[0];
    real _t087F = rayOrig084A[1];
    vec2 _t0880 = [_t087E, _t087F];
    real _t0881 = rayVec084B[0];
    real _t0882 = rayVec084B[1];
    vec2 _t0883 = [_t0881, _t0882];
    vec2 _t0884 = prim *0036<$[2]> (e0861, _t0883);
    vec2 endRay0885 = prim +0017<$[2]> (_t0880, _t0884);
    Femdata: Mesh _t0886 = extractFem(cc0862, Mesh);
    Femdata: Mesh _t0887 = extractFem(cc0862, Mesh);
    int _t0888 = extractFemItem(CellIndex(MeshCell), int, cc0862);
    field(2)[2] _t0889 = femField(_t0886,_t0888,field(2)[2],InvTransform,_msh_newtonInverse04FB );
    vec2 invertA088A = prim @00A5<#∞; %2; $[2]> (_t0889, startRay087D);
    Femdata: Mesh _t088B = extractFem(cc0862, Mesh);
    Femdata: Mesh _t088C = extractFem(cc0862, Mesh);
    int _t088D = extractFemItem(CellIndex(MeshCell), int, cc0862);
    field(2)[2] _t088E = femField(_t088B,_t088D,field(2)[2],InvTransform,_msh_newtonInverse04FB );
    vec2 invertB088F = prim @00A5<#∞; %2; $[2]> (_t088E, endRay0885);
    string _t0890 = "inverses:";
    string _t0891 = "\n";
    print (_t0890, invertA088A, invertB088F, _t0891);
    Femdata: FemFunc _t0892 = extractFem(fc0864, FemFunc);
    Femdata: FemFunc _t0893 = extractFem(fc0864, FemFunc);
    Femdata: Space _t0894 = extractFem(_t0893, Space);
    int _t0895 = extractFemItem(CellIndex(FuncCell), int, fc0864);
    field(2)[] _t0896 = femField(_t0892,_t0895,field(2)[],refField,);
    real faVal0897 = prim @00A5<#∞; %2; $[]> (_t0896, invertA088A);
    real _t0898 = rayVec084B[2];
    real _t0899 = prim *0034 (_t0898, s0860);
    real _t089A = prim -0026<$[]> (faVal0897, _t0899);
    real _t089B = rayOrig084A[2];
    real fa089C = prim -0026<$[]> (_t089A, _t089B);
    Femdata: FemFunc _t089D = extractFem(fc0864, FemFunc);
    Femdata: FemFunc _t089E = extractFem(fc0864, FemFunc);
    Femdata: Space _t089F = extractFem(_t089E, Space);
    int _t08A0 = extractFemItem(CellIndex(FuncCell), int, fc0864);
    field(2)[] _t08A1 = femField(_t089D,_t08A0,field(2)[],refField,);
    real _t08A2 = prim @00A5<#∞; %2; $[]> (_t08A1, invertB088F);
    real _t08A3 = rayVec084B[2];
    real _t08A4 = prim *0034 (_t08A3, e0861);
    real _t08A5 = prim -0026<$[]> (_t08A2, _t08A4);
    real _t08A6 = rayOrig084A[2];
    real fb08A7 = prim -0026<$[]> (_t08A5, _t08A6);
    string _t08A8 = "Vals:";
    vec2 _t08A9 = [fa089C, fb08A7];
    string _t08AA = "\n";
    print (_t08A8, _t08A9, _t08AA);
    real _t08AB = prim -0026<$[]> (fa089C, fb08A7);
    real _t08AC = prim |()|00B5<$[]> (_t08AB);
    bool _t08AD = prim <007A (_t08AC, eps0476);
    if _t08AD {
      real _t08AE = prim |()|00B5<$[]> (fa089C);
      bool _t08AF = prim >0080 (_t08AE, eps0476);
      if _t08AF {
        s0860 = prim +0017<$[]> (s0860, eps0476);
        continue;
      }
    }
    real _t08B0 = prim *0034 (s0860, fb08A7);
    real _t08B1 = prim *0034 (e0861, fa089C);
    real _t08B2 = prim -0026<$[]> (_t08B0, _t08B1);
    real _t08B3 = prim -0026<$[]> (fb08A7, fa089C);
    real cup08B4 = prim /0055 (_t08B2, _t08B3);
    string _t08B5 = "Mid time:";
    string _t08B6 = "\n";
    print (_t08B5, cup08B4, _t08B6);
    real _t08B7 = rayOrig084A[0];
    real _t08B8 = rayOrig084A[1];
    vec2 _t08B9 = [_t08B7, _t08B8];
    real _t08BA = rayVec084B[0];
    real _t08BB = rayVec084B[1];
    vec2 _t08BC = [_t08BA, _t08BB];
    vec2 _t08BD = prim *0036<$[2]> (cup08B4, _t08BC);
    vec2 midRay08BE = prim +0017<$[2]> (_t08B9, _t08BD);
    Femdata: Mesh _t08BF = extractFem(cc0862, Mesh);
    Femdata: Mesh _t08C0 = extractFem(cc0862, Mesh);
    int _t08C1 = extractFemItem(CellIndex(MeshCell), int, cc0862);
    field(2)[2] _t08C2 = femField(_t08BF,_t08C1,field(2)[2],InvTransform,_msh_newtonInverse04FB );
    vec2 invertC08C3 = prim @00A5<#∞; %2; $[2]> (_t08C2, midRay08BE);
    Femdata: FemFunc _t08C4 = extractFem(fc0864, FemFunc);
    Femdata: FemFunc _t08C5 = extractFem(fc0864, FemFunc);
    Femdata: Space _t08C6 = extractFem(_t08C5, Space);
    int _t08C7 = extractFemItem(CellIndex(FuncCell), int, fc0864);
    field(2)[] _t08C8 = femField(_t08C4,_t08C7,field(2)[],refField,);
    real fmVal08C9 = prim @00A5<#∞; %2; $[]> (_t08C8, invertC08C3);
    real _t08CA = rayVec084B[2];
    real _t08CB = prim *0034 (_t08CA, cup08B4);
    real _t08CC = prim -0026<$[]> (fmVal08C9, _t08CB);
    real _t08CD = rayOrig084A[2];
    real fm08CE = prim -0026<$[]> (_t08CC, _t08CD);
    string _t08CF = "all vals:";
    vec3 _t08D0 = [fa089C, fm08CE, fb08A7];
    string _t08D1 = "\n";
    print (_t08CF, _t08D0, _t08D1);
    int _t08D2 = 1;
    intersectionItter085D = prim +0015 (intersectionItter085D, _t08D2);
    int _t08D3 = func sign082E (fa089C);
    int _t08D4 = func sign082E (fm08CE);
    int _t08D5 = prim *0033 (_t08D3, _t08D4);
    int _t08D6 = 0;
    bool _t08D7 = prim <0079 (_t08D5, _t08D6);
    if _t08D7 {
      e0861 = cup08B4;
    } else {
      int _t08D8 = func sign082E (fa089C);
      int _t08D9 = func sign082E (fm08CE);
      int _t08DA = prim *0033 (_t08D8, _t08D9);
      int _t08DB = 0;
      bool _t08DC = prim >007F (_t08DA, _t08DB);
      if _t08DC {
        s0860 = cup08B4;
      }
    }
    string _t08DD = "new interval:";
    vec2 _t08DE = [s0860, e0861];
    string _t08DF = "\n";
    print (_t08DD, _t08DE, _t08DF);
    bool _t08E0;
    real _t08E1 = prim |()|00B5<$[]> (fa089C);
    bool _t08E2 = prim <007A (_t08E1, eps0476);
    if _t08E2 {
      _t08E0 = true;
    } else {
      bool _t08E3;
      real _t08E4 = prim |()|00B5<$[]> (fm08CE);
      bool _t08E5 = prim <007A (_t08E4, eps0476);
      if _t08E5 {
        _t08E3 = true;
      } else {
        int _t08E6 = 32;
        _t08E3 = prim >007F (intersectionItter085D, _t08E6);
      }
      _t08E0 = _t08E3;
    }
    if _t08E0 {
      intersectionItter085D = 0;
      bool _t08E7;
      real _t08E8 = prim |()|00B5<$[]> (fm08CE);
      bool _t08E9 = prim >0080 (_t08E8, eps0476);
      if _t08E9 {
        real _t08EA = prim |()|00B5<$[]> (fa089C);
        _t08E7 = prim >0080 (_t08EA, eps0476);
      } else {
        _t08E7 = false;
      }
      if _t08E7 {
        int _t08EB = 1;
        itter085C = prim +0015 (itter085C, _t08EB);
        bool _t08EC = prim >=007D (itter085C, len0857);
        if _t08EC {
          string _t08ED = "Fin pixel=============================\n";
          print (_t08ED);
          stabilize;
        }
        int _t08EE = prim +0015 (offset0854, itter085C);
        interval085F = prim $dynsub01C2<vec2> (times0478, _t08EE);
        int _t08EF = prim +0015 (offset0854, itter085C);
        int _t08F0 = prim $dynsub01C2<int> (cells0479, _t08EF);
        cc0862 = prim $dynsub01C2<Femdata: MeshCell> (0cell_a0467, _t08F0);
        s0860 = interval085F[0];
        e0861 = interval085F[1];
        fc0864 = func funcCell080F (c0474, cc0862);
        string _t08F1 = "Next interval!\n";
        print (_t08F1);
        continue;
      } else {
        real _t08F2 = 0.e0;
        real _t08F3 = 0.e0;
        vec2 grad08F4 = [_t08F2, _t08F3];
        vec3 loc08F5 = rayOrig084A;
        real _t08F6 = prim |()|00B5<$[]> (fm08CE);
        bool _t08F7 = prim <007A (_t08F6, eps0476);
        if _t08F7 {
          Femdata: FemFunc _t08F8 = extractFem(fc0864, FemFunc);
          Femdata: FemFunc _t08F9 = extractFem(fc0864, FemFunc);
          Femdata: Space _t08FA = extractFem(_t08F9, Space);
          int _t08FB = extractFemItem(CellIndex(FuncCell), int, fc0864);
          field(2)[] _t08FC = femField(_t08F8,_t08FB,field(2)[],refField,);
          Femdata: Mesh _t08FD = extractFem(cc0862, Mesh);
          Femdata: Mesh _t08FE = extractFem(cc0862, Mesh);
          int _t08FF = extractFemItem(CellIndex(MeshCell), int, cc0862);
          field(2)[2] _t0900 = femField(_t08FD,_t08FF,field(2)[2],InvTransform,_msh_newtonInverse04FB );
          field(2)[] _t0901 = prim ∘0164<#∞; %2; $[]; %2; $[2]> (_t08FC, _t0900);
          field(2)[2] _t0902 = prim ∇00A8<#∞; %2> (_t0901);
          grad08F4 = prim @00A5<#∞; %2; $[2]> (_t0902, midRay08BE);
          out0866 = fmVal08C9;
        }
        real _t0903 = prim |()|00B5<$[]> (fa089C);
        bool _t0904 = prim <007A (_t0903, eps0476);
        if _t0904 {
          cup08B4 = s0860;
          Femdata: FemFunc _t0905 = extractFem(fc0864, FemFunc);
          Femdata: FemFunc _t0906 = extractFem(fc0864, FemFunc);
          Femdata: Space _t0907 = extractFem(_t0906, Space);
          int _t0908 = extractFemItem(CellIndex(FuncCell), int, fc0864);
          field(2)[] _t0909 = femField(_t0905,_t0908,field(2)[],refField,);
          Femdata: Mesh _t090A = extractFem(cc0862, Mesh);
          Femdata: Mesh _t090B = extractFem(cc0862, Mesh);
          int _t090C = extractFemItem(CellIndex(MeshCell), int, cc0862);
          field(2)[2] _t090D = femField(_t090A,_t090C,field(2)[2],InvTransform,_msh_newtonInverse04FB );
          field(2)[] _t090E = prim ∘0164<#∞; %2; $[]; %2; $[2]> (_t0909, _t090D);
          field(2)[2] _t090F = prim ∇00A8<#∞; %2> (_t090E);
          grad08F4 = prim @00A5<#∞; %2; $[2]> (_t090F, startRay087D);
          out0866 = faVal0897;
        }
        string _t0910 = "Out val:";
        string _t0911 = "\n";
        print (_t0910, out0866, _t0911);
        string _t0912 = "Grad val:";
        string _t0913 = "\n";
        print (_t0912, grad08F4, _t0913);
        real _t0914 = 0.1e1;
        real _t0915 = 0.1e1;
        real _t0916 = 0.1e1;
        vec3 mcol0917 = [_t0914, _t0915, _t0916];
        bool _t0918 = prim !=0088 (cmin0484, cmax0485);
        if _t0918 {
          int _t0919 = -1;
          real _t091A = (real)_t0919;
          real _t091B = 0.1e1;
          real _t091C = prim lerp0098<$[]> (_t091A, _t091B, cmin0484, out0866, cmax0485);
          mcol0917 = prim @00A5<#0; %1; $[3]> (CM0829, _t091C);
        }
        if light0486 {
          real _t091D = grad08F4[0];
          real _t091E = grad08F4[1];
          int _t091F = -1;
          real _t0920 = (real)_t091F;
          vec3 N0921 = [_t091D, _t091E, _t0920];
          vec3 _t0922 = prim normalize0137<$[3]> (rayVec084B);
          vec3 _t0923 = prim unary -008B<$[3]> (_t0922);
          vec3 _t0924 = prim +0017<$[3]> (_t0923, L082D);
          vec3 H0925 = prim normalize0137<$[3]> (_t0924);
          vec3 lightColor0926 = prim lerp0098<$[3]> (mcnear047A, mcfar047E, camNearVsp0850, cup08B4, camFarVsp0851);
          vec3 ambientTerm0927 = prim *0036<$[3]> (phongKa0487, mcol0917);
          vec3 _t0928 = prim modulate0129<%3> (mcol0917, lightColor0926);
          vec3 _t0929 = prim *0036<$[3]> (phongKd0488, _t0928);
          real _t092A = 0.e0;
          real _t092B = prim •00CE<$[3]; $[3]; $[]> (N0921, L082D);
          real _t092C = prim max0125 (_t092A, _t092B);
          vec3 diffuse092D = prim *0038<$[3]> (_t0929, _t092C);
          vec3 _t092E = prim *0036<$[3]> (phongKs0489, lightColor0926);
          real _t092F = 0.e0;
          real _t0930 = prim •00CE<$[3]; $[3]; $[]> (N0921, H0925);
          real _t0931 = prim max0125 (_t092F, _t0930);
          real _t0932 = prim ^0069 (_t0931, phongSp048A);
          vec3 specular0933 = prim *0038<$[3]> (_t092E, _t0932);
          vec3 _t0934 = prim +0017<$[3]> (ambientTerm0927, diffuse092D);
          vec3 fin0935 = prim +0017<$[3]> (_t0934, specular0933);
          real _t0936 = fin0935[0];
          real _t0937 = fin0935[1];
          real _t0938 = fin0935[2];
          real _t0939 = 0.1e1;
          rgba0867 = [_t0936, _t0937, _t0938, _t0939];
        } else {
          real _t093A = mcol0917[0];
          real _t093B = mcol0917[1];
          real _t093C = mcol0917[2];
          real _t093D = 0.1e1;
          rgba0867 = [_t093A, _t093B, _t093C, _t093D];
        }
        stabilize;
      }
    } else {
      string _t093E = "=========\n";
      print (_t093E);
    }
  }
}
grid(2) {
  int _t093F = 0;
  int _t0940 = 1;
  int _t0941 = prim -0024 (iresU0460, _t0940);
  int[] _t0942 = prim $range01C3 (_t093F, _t0941);
  foreach vi0948 in _t0942 {
    int _t0943 = 0;
    int _t0944 = 1;
    int _t0945 = prim -0024 (iresV0461, _t0944);
    int[] _t0946 = prim $range01C3 (_t0943, _t0945);
    foreach ui0947 in _t0946 {
      new ray (ui0947, vi0948);
    }
  }
}
/* Program end */
/* Simplified Program (after after contraction (1)) start */
properties: GlobalInit,StrandArray,HasStartMethod,ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[]),HasInputs,HasGlobals
input real isoval0451 = <default>;
input real thick0452 = <default>;
input vec3 camEye0453 = <default>;
input vec3 camAt0457 = <default>;
input vec3 camUp045B = <default>;
input real camFOV045F = <default>;
input int iresU0460 = <default>;
input int iresV0461 = <default>;
input real camNear0462 = <default>;
input real camFar0463 = <default>;
input real refStep0464 = <default>;
input real rayStep0465 = <default>;
input FemData:Mesh a0466;
input FemData:Space 0b0472_intermedateGlobal0473;
input FemData:FemFunc 0c0474_intermedateGlobal0475;
input real eps0476 = <default>;
input int[] indecies0477;
input vec2[] times0478;
input int[] cells0479;
input vec3 mcnear047A("material color at near clipping plane (for depth cuing)") = <default>;
input vec3 mcfar047E("material color at far clipping plane") = <default>;
input image(1)[3] cmap0483("univariate colormap") = image("/home/teocollin/gitcode/diderot/tests/lipRay/find/cmap.nrrd");
input real cmin0484("value mapped to min end of colormap") = <default>;
input real cmax0485("value mapped to max end of colormap. By default cmin==cmax==0, which disables this colormapping") = <default>;
input bool light0486 = <default>;
input real phongKa0487("Blinn-Phong ambient component") = <default>;
input real phongKd0488("Blinn-Phong diffuse component") = <default>;
input real phongKs0489("Blinn-Phong specular component") = <default>;
input real phongSp048A("Blinn-Phong specularity exponent") = <default>;
input real maxAlpha048B("maximum opacity on rendered surface") = <default>;
input vec3 lightVsp048C = <default>;
constants {
  isoval0451 = 0.2e0;
  thick0452 = 0.7e-1;
  real _t0454 = 0.3e1;
  real _t0455 = -0.3e1;
  real _t0456 = 0.3e1;
  camEye0453 = [_t0454, _t0455, _t0456];
  real _t0458 = 0.5e0;
  real _t0459 = 0.5e0;
  real _t045A = 0.5e0;
  camAt0457 = [_t0458, _t0459, _t045A];
  real _t045C = 0.e0;
  real _t045D = 0.e0;
  real _t045E = 0.1e1;
  camUp045B = [_t045C, _t045D, _t045E];
  camFOV045F = 0.137e2;
  iresU0460 = 10;
  iresV0461 = 10;
  camNear0462 = -0.2e1;
  camFar0463 = 0.5e1;
  refStep0464 = 0.1e1;
  rayStep0465 = 0.1e-1;
  eps0476 = 0.1e-5;
  real _t047B = 0.1e1;
  real _t047C = 0.1e1;
  real _t047D = 0.1e1;
  mcnear047A = [_t047B, _t047C, _t047D];
  real _t047F = 0.1e1;
  real _t0480 = 0.1e1;
  real _t0481 = 0.1e1;
  mcfar047E = [_t047F, _t0480, _t0481];
  cmin0484 = 0.e0;
  cmax0485 = 0.1e1;
  light0486 = true;
  phongKa0487 = 0.5e0;
  phongKd0488 = 0.5e0;
  phongKs0489 = 0.e0;
  phongSp048A = 0.6e2;
  maxAlpha048B = 0.1e1;
  real _t048D = 0.e0;
  real _t048E = 0.e0;
  real _t048F = 0.1e1;
  lightVsp048C = [_t048D, _t048E, _t048F];
}
global Femdata: MeshCell[] 0cell_a0467;
global Femdata: Space b0472;
global Femdata: FemFunc c0474;
global real camDist0815;
global real camNearVsp0816;
global real camFarVsp0817;
global vec3 camN0819;
global vec3 camU081B;
global vec3 camV081C;
global real camVmax0822;
global real camUmax0826;
global field#0(1)[3] CM0829;
global vec3 L082D;
function bool#0 !=0490 (Femdata: MeshCell cell10491, Femdata: MeshCell cell10492)
{
  int _t0493 = extractFemItem(CellIndex(Mesh), int, cell10491);
  int _t0494 = extractFemItem(CellIndex(Mesh), int, cell10492);
  bool _t0495 = prim !=0086 (_t0493, _t0494);
  return _t0495;
}
function bool#0 ==0496 (Femdata: MeshCell cell10491, Femdata: MeshCell cell10492)
{
  int _t0497 = extractFemItem(CellIndex(Mesh), int, cell10491);
  int _t0498 = extractFemItem(CellIndex(Mesh), int, cell10492);
  bool _t0499 = prim ==0082 (_t0497, _t0498);
  return _t0499;
}
function Femdata: MeshPos#0 findPos049A (Femdata: Mesh mesh049B, vec2 pos049C)
{
  real _t049D = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t049E = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  xn049F = [_t049D, _t049E];
  newtonInt04A0 = 0;
  cellInt04A1 = extractFemItem(StartCell(Mesh), int, mesh049B);
  int _t04A2 = extractFemItem(NumCell(Mesh), int, mesh049B);
  int _t04A3 = 1;
  numCell04A4 = prim -0024 (_t04A2, _t04A3);
  yayCells04A5 = extractFemItem2(NearbyCell(File=spat.in)(Mesh), vec2, mesh049B, pos049C : vec2);
  foreach cellItter04A6 in yayCells04A5 {
    cellInt04A1 = cellItter04A6;
    field(2)[2] _t04A7 = femField(mesh049B,cellInt04A1,field(2)[2],Transform,);
    field(2)[2,2] _t04A8 = prim ∇⊗00AD<#∞; %2; $[]; %2> (_t04A7);
    field(2)[2,2] _t04A9 = prim inv015B<#∞; %2> (_t04A8);
    real _t04AA = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    real _t04AB = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    vec2 _t04AC = [_t04AA, _t04AB];
    A04AD = prim @00A5<#∞; %2; $[2,2]> (_t04A9, _t04AC);
    int _t04AE = 0;
    int _t04AF = 16;
    int[] _t04B0 = prim $range01C3 (_t04AE, _t04AF);
    foreach newtonItter04D3 in _t04B0 {
      field(2)[2] _t04B1 = femField(mesh049B,cellInt04A1,field(2)[2],Transform,);
      field(2)[2] _t04B2 = prim -002E<#∞; %2; $[2]> (_t04B1, pos049C);
      field(2)[2] _t04B3 = prim •00D4<#∞; %2; $[2,2]; $[2]; $[2]> (A04AD, _t04B2);
      delta04B4 = prim @00A5<#∞; %2; $[2]> (_t04B3, xn049F);
      xn049F = prim -0026<$[2]> (xn049F, delta04B4);
      real _t04B5 = 0.1e-7;
      real _t04B6 = 0.1e-7;
      real _t04B7 = prim *0034 (_t04B5, _t04B6);
      real _t04B8 = prim •00CE<$[2]; $[2]; $[]> (delta04B4, delta04B4);
      bool _t04B9 = prim >=007E (_t04B7, _t04B8);
      if _t04B9 {
        real _t04BA = 0.1e1;
        real _t04BB = 0.1e-8;
        real _t04BC = prim +0017<$[]> (_t04BA, _t04BB);
        real _t04BD = 0.1e1;
        real _t04BE = 0.1e1;
        vec2 _t04BF = [_t04BD, _t04BE];
        real _t04C0 = prim •00CE<$[2]; $[2]; $[]> (_t04BF, xn049F);
        bool _t04C1 = prim >0080 (_t04BC, _t04C0);
        real _t04C2 = 0.1e-8;
        real _t04C3 = 0.1e-8;
        vec2 _t04C4 = [_t04C2, _t04C3];
        vec2 _t04C5 = prim +0017<$[2]> (_t04C4, xn049F);
        real _t04C6 = _t04C5[0];
        real _t04C7 = -0.e0;
        bool _t04C8 = prim >0080 (_t04C6, _t04C7);
        real _t04C9 = 0.1e-8;
        real _t04CA = 0.1e-8;
        vec2 _t04CB = [_t04C9, _t04CA];
        vec2 _t04CC = prim +0017<$[2]> (_t04CB, xn049F);
        real _t04CD = _t04CC[1];
        real _t04CE = -0.e0;
        bool _t04CF = prim >0080 (_t04CD, _t04CE);
        bool _t04D0 = prim $and01C4 (_t04C8, _t04CF);
        bool _t04D1 = prim $and01C4 (_t04C1, _t04D0);
        if _t04D1 {
          Femdata: MeshPos _t04D2 = extractFemItemN((mesh049B, cellInt04A1, xn049F, pos049C),AllBuild(MeshPos),);
          return _t04D2;
        }
      }
    }
  }
  string _t04D4 = "Bad end 2";
  string _t04D5 = "\n";
  print (_t04D4, _t04D5);
  Femdata: MeshPos _t04D6 = extractFemItemN((mesh049B),InvalidBuild(MeshPos),);
  return _t04D6;
}
function Femdata: RefCell#0 refcell04D7 (Femdata: Mesh arg004D8)
{
  Femdata: RefCell _t04D9 = extractFemItem(RefCell(Mesh), Femdata: RefCell, arg004D8);
  return _t04D9;
}
function Femdata: MeshCell[]#0 cells04DA (Femdata: Mesh arg004DB)
{
  Femdata: MeshCell[] _t04DC = extractFemItem(Cells(Mesh), Femdata: MeshCell[], arg004DB);
  return _t04DC;
}
function Femdata: MeshCell[]#0 cells04DD (Femdata: Mesh arg004DB)
{
  int _t04DE = 0;
  int _t04DF = extractFemItem(NumCell(Mesh), int, arg004DB);
  int[] _t04E0 = prim $range01C3 (_t04DE, _t04DF);
  Femdata: MeshCell[] accum04E3 = {};
  foreach i04E1 in _t04E0 {
    Femdata: MeshCell _t04E2 = loadFem(MeshCell, arg004DB, i04E1);
    accum04E3 = prim @0010<Femdata: MeshCell> (accum04E3, _t04E2);
  }
  return accum04E3;
}
function int#0 numCell04E4 (Femdata: Mesh arg004D8)
{
  int _t04E5 = extractFemItem(NumCell(Mesh), int, arg004D8);
  return _t04E5;
}
function tensor[2,2,2,2]#0 msh_transform_304E6 (vec2 pos04E7, int cell04E8, Femdata: Mesh mesh04E9)
{
  field(2)[2] _t04EA = femField(mesh04E9,cell04E8,field(2)[2],Transform,);
  field(2)[2,2] _t04EB = prim ∇⊗00AD<#∞; %2; $[]; %2> (_t04EA);
  field(2)[2,2,2] _t04EC = prim ∇⊗00AD<#∞; %2; $[2]; %2> (_t04EB);
  field(2)[2,2,2,2] _t04ED = prim ∇⊗00AD<#∞; %2; $[2,2]; %2> (_t04EC);
  tensor[2,2,2,2] _t04EE = prim @00A5<#∞; %2; $[2,2,2,2]> (_t04ED, pos04E7);
  return _t04EE;
}
function tensor[2,2,2]#0 msh_transform_204EF (vec2 pos04E7, int cell04E8, Femdata: Mesh mesh04E9)
{
  field(2)[2] _t04F0 = femField(mesh04E9,cell04E8,field(2)[2],Transform,);
  field(2)[2,2] _t04F1 = prim ∇⊗00AD<#∞; %2; $[]; %2> (_t04F0);
  field(2)[2,2,2] _t04F2 = prim ∇⊗00AD<#∞; %2; $[2]; %2> (_t04F1);
  tensor[2,2,2] _t04F3 = prim @00A5<#∞; %2; $[2,2,2]> (_t04F2, pos04E7);
  return _t04F3;
}
function tensor[2,2]#0 msh_transform_104F4 (vec2 pos04E7, int cell04E8, Femdata: Mesh mesh04E9)
{
  field(2)[2] _t04F5 = femField(mesh04E9,cell04E8,field(2)[2],Transform,);
  field(2)[2,2] _t04F6 = prim ∇⊗00AD<#∞; %2; $[]; %2> (_t04F5);
  tensor[2,2] _t04F7 = prim @00A5<#∞; %2; $[2,2]> (_t04F6, pos04E7);
  return _t04F7;
}
function vec2#2 msh_transform_004F8 (vec2 pos04E7, int cell04E8, Femdata: Mesh mesh04E9)
{
  field(2)[2] _t04F9 = femField(mesh04E9,cell04E8,field(2)[2],Transform,);
  vec2 _t04FA = prim @00A5<#∞; %2; $[2]> (_t04F9, pos04E7);
  return _t04FA;
}
function Femdata: MeshPos#5 _msh_newtonInverse04FB (vec2 pos04FC, int cellInt04FD, Femdata: Mesh mesh04FE)
{
  real _t04FF = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t0500 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  xn0501 = [_t04FF, _t0500];
  field(2)[2] _t0502 = femField(mesh04FE,cellInt04FD,field(2)[2],Transform,);
  field(2)[2,2] _t0503 = prim ∇⊗00AD<#∞; %2; $[]; %2> (_t0502);
  field(2)[2,2] _t0504 = prim inv015B<#∞; %2> (_t0503);
  real _t0505 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t0506 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  vec2 _t0507 = [_t0505, _t0506];
  A0508 = prim @00A5<#∞; %2; $[2,2]> (_t0504, _t0507);
  int _t0509 = 0;
  int _t050A = 16;
  int[] _t050B = prim $range01C3 (_t0509, _t050A);
  foreach itter052F in _t050B {
    field(2)[2] _t050C = femField(mesh04FE,cellInt04FD,field(2)[2],Transform,);
    field(2)[2] _t050D = prim -002E<#∞; %2; $[2]> (_t050C, pos04FC);
    field(2)[2] _t050E = prim •00D4<#∞; %2; $[2,2]; $[2]; $[2]> (A0508, _t050D);
    delta050F = prim @00A5<#∞; %2; $[2]> (_t050E, xn0501);
    xn0501 = prim -0026<$[2]> (xn0501, delta050F);
    real _t0510 = 0.1e-7;
    real _t0511 = 0.1e-7;
    real _t0512 = prim *0034 (_t0510, _t0511);
    real _t0513 = prim •00CE<$[2]; $[2]; $[]> (delta050F, delta050F);
    bool _t0514 = prim >=007E (_t0512, _t0513);
    if _t0514 {
      real _t0515 = 0.1e1;
      real _t0516 = 0.1e-8;
      real _t0517 = prim +0017<$[]> (_t0515, _t0516);
      real _t0518 = 0.1e1;
      real _t0519 = 0.1e1;
      vec2 _t051A = [_t0518, _t0519];
      real _t051B = prim •00CE<$[2]; $[2]; $[]> (_t051A, xn0501);
      bool _t051C = prim >0080 (_t0517, _t051B);
      real _t051D = 0.1e-8;
      real _t051E = 0.1e-8;
      vec2 _t051F = [_t051D, _t051E];
      vec2 _t0520 = prim +0017<$[2]> (_t051F, xn0501);
      real _t0521 = _t0520[0];
      real _t0522 = -0.e0;
      bool _t0523 = prim >0080 (_t0521, _t0522);
      real _t0524 = 0.1e-8;
      real _t0525 = 0.1e-8;
      vec2 _t0526 = [_t0524, _t0525];
      vec2 _t0527 = prim +0017<$[2]> (_t0526, xn0501);
      real _t0528 = _t0527[1];
      real _t0529 = -0.e0;
      bool _t052A = prim >0080 (_t0528, _t0529);
      bool _t052B = prim $and01C4 (_t0523, _t052A);
      bool _t052C = prim $and01C4 (_t051C, _t052B);
      if _t052C {
        Femdata: MeshPos _t052D = extractFemItemN((mesh04FE, cellInt04FD, xn0501, pos04FC),AllBuild(MeshPos),);
        return _t052D;
      } else {
        Femdata: MeshPos _t052E = extractFemItemN((mesh04FE),InvalidBuild(MeshPos),);
        return _t052E;
      }
    }
  }
  Femdata: MeshPos _t0530 = extractFemItemN((mesh04FE),InvalidBuild(MeshPos),);
  return _t0530;
}
function Femdata: MeshPos#0 _mesh_pos_msh_build_world_pos0531 (Femdata: MeshPos pos0532)
{
  bool _t0533 = extractFemItem(WorldTest(MeshPos), bool, pos0532);
  if _t0533 {
    vec2 _t0534 = extractFemItem(RefPos(MeshPos), vec2, pos0532);
    int _t0535 = extractFemItem(CellIndex(MeshPos), int, pos0532);
    Femdata: Mesh _t0536 = extractFem(pos0532, Mesh);
    vec2 _t0537 = func msh_transform_004F8 (_t0534, _t0535, _t0536);
    Femdata: MeshPos _t0538 = extractFemItemN((pos0532, _t0537),NewWorld(MeshPos),);
    return _t0538;
  } else {
    return pos0532;
  }
}
function vec2#0 worldPos0539 (Femdata: MeshPos pos0532)
{
  vec2 _t053A = extractFemItem(RefPos(MeshPos), vec2, pos0532);
  int _t053B = extractFemItem(CellIndex(MeshPos), int, pos0532);
  Femdata: Mesh _t053C = extractFem(pos0532, Mesh);
  vec2 _t053D = func msh_transform_004F8 (_t053A, _t053B, _t053C);
  return _t053D;
}
function Femdata: MeshPos#0 $exitPos053E (Femdata: Mesh mesh053F, int cellId0540, vec2 refPos0541, vec2 dPos0542, real[2] time0543)
{
  int _t0544 = -1;
  real _t0545 = time0543[1];
  int _t0546 = prim $r2i01B7 (_t0545);
  int[2] _t0548 = func nextCell40547 (_t0546, cellId0540, mesh053F);
  int _t0549 = 0;
  int _t054A = prim $sub01C0<int; %2> (_t0548, _t0549);
  bool _t054B = prim !=0086 (_t0544, _t054A);
  if _t054B {
    real _t054C = time0543[1];
    int _t054D = prim $r2i01B7 (_t054C);
    int[2] _t054E = func nextCell40547 (_t054D, cellId0540, mesh053F);
    int _t054F = 0;
    int _t0550 = prim $sub01C0<int; %2> (_t054E, _t054F);
    real _t0551 = 0.1e1;
    real _t0552 = 0.e0;
    vec2 _t0553 = [_t0551, _t0552];
    real _t0554 = 0.e0;
    real _t0555 = 0.e0;
    vec2 _t0556 = [_t0554, _t0555];
    real _t0557 = 0.e0;
    real _t0558 = 0.e0;
    vec2 _t0559 = [_t0557, _t0558];
    vec2[3] _t055A = {_t0553, _t0556, _t0559};
    real _t055B = time0543[1];
    int _t055C = prim $r2i01B7 (_t055B);
    int[2] _t055D = func nextCell40547 (_t055C, cellId0540, mesh053F);
    int _t055E = 1;
    int _t055F = prim $sub01C0<int; %2> (_t055D, _t055E);
    vec2 _t0560 = prim $sub01C0<vec2; %3> (_t055A, _t055F);
    real _t0561 = -0.1e1;
    real _t0562 = 0.1e1;
    vec2 _t0563 = [_t0561, _t0562];
    real _t0564 = 0.e0;
    real _t0565 = 0.1e1;
    vec2 _t0566 = [_t0564, _t0565];
    real _t0567 = 0.1e1;
    real _t0568 = 0.e0;
    vec2 _t0569 = [_t0567, _t0568];
    vec2[3] _t056A = {_t0563, _t0566, _t0569};
    real _t056B = time0543[1];
    int _t056C = prim $r2i01B7 (_t056B);
    int[2] _t056D = func nextCell40547 (_t056C, cellId0540, mesh053F);
    int _t056E = 1;
    int _t056F = prim $sub01C0<int; %2> (_t056D, _t056E);
    vec2 _t0570 = prim $sub01C0<vec2; %3> (_t056A, _t056F);
    real _t0571 = time0543[0];
    vec2 _t0572 = prim *0036<$[2]> (_t0571, dPos0542);
    vec2 _t0573 = prim +0017<$[2]> (_t0572, refPos0541);
    real _t0574 = _t0573[0];
    real _t0575 = time0543[0];
    vec2 _t0576 = prim *0036<$[2]> (_t0575, dPos0542);
    vec2 _t0577 = prim +0017<$[2]> (_t0576, refPos0541);
    real _t0578 = _t0577[1];
    real[2] _t0579 = {_t0574, _t0578};
    int _t057A = 1;
    int _t057B = 1;
    int _t057C = 0;
    int[3] _t057D = {_t057A, _t057B, _t057C};
    real _t057E = time0543[1];
    int _t057F = prim $r2i01B7 (_t057E);
    int _t0580 = prim $sub01C0<int; %3> (_t057D, _t057F);
    real _t0581 = prim $sub01C0<real; %2> (_t0579, _t0580);
    real _t0582 = 0.1e1;
    real _t0583 = 0.e0;
    real[2] _t0584 = {_t0582, _t0583};
    real _t0585 = 0.e0;
    real _t0586 = 0.e0;
    real[2] _t0587 = {_t0585, _t0586};
    real _t0588 = 0.e0;
    real _t0589 = 0.e0;
    real[2] _t058A = {_t0588, _t0589};
    real[2][3] _t058B = {_t0584, _t0587, _t058A};
    real _t058C = time0543[1];
    int _t058D = prim $r2i01B7 (_t058C);
    real[2] _t058E = prim $sub01C0<real[2]; %3> (_t058B, _t058D);
    int _t058F = 1;
    int _t0590 = 1;
    int _t0591 = 0;
    int[3] _t0592 = {_t058F, _t0590, _t0591};
    real _t0593 = time0543[1];
    int _t0594 = prim $r2i01B7 (_t0593);
    int _t0595 = prim $sub01C0<int; %3> (_t0592, _t0594);
    real _t0596 = prim $sub01C0<real; %2> (_t058E, _t0595);
    real _t0597 = prim -0026<$[]> (_t0581, _t0596);
    real _t0598 = -0.1e1;
    real _t0599 = 0.1e1;
    real[2] _t059A = {_t0598, _t0599};
    real _t059B = 0.e0;
    real _t059C = 0.1e1;
    real[2] _t059D = {_t059B, _t059C};
    real _t059E = 0.1e1;
    real _t059F = 0.e0;
    real[2] _t05A0 = {_t059E, _t059F};
    real[2][3] _t05A1 = {_t059A, _t059D, _t05A0};
    real _t05A2 = time0543[1];
    int _t05A3 = prim $r2i01B7 (_t05A2);
    real[2] _t05A4 = prim $sub01C0<real[2]; %3> (_t05A1, _t05A3);
    int _t05A5 = 1;
    int _t05A6 = 1;
    int _t05A7 = 0;
    int[3] _t05A8 = {_t05A5, _t05A6, _t05A7};
    real _t05A9 = time0543[1];
    int _t05AA = prim $r2i01B7 (_t05A9);
    int _t05AB = prim $sub01C0<int; %3> (_t05A8, _t05AA);
    real _t05AC = prim $sub01C0<real; %2> (_t05A4, _t05AB);
    real _t05AD = prim /0055 (_t0597, _t05AC);
    vec2 _t05AE = prim *0038<$[2]> (_t0570, _t05AD);
    vec2 _t05AF = prim +0017<$[2]> (_t0560, _t05AE);
    real _t05B0 = time0543[1];
    int _t05B1 = prim $r2i01B7 (_t05B0);
    int[2] _t05B2 = func nextCell40547 (_t05B1, cellId0540, mesh053F);
    int _t05B3 = 1;
    int _t05B4 = prim $sub01C0<int; %2> (_t05B2, _t05B3);
    Femdata: MeshPos _t05B5 = extractFemItemN((mesh053F, _t0550, _t05AF, _t05B4),RefBuild(Mesh),);
    return _t05B5;
  } else {
    real _t05B6 = time0543[0];
    vec2 _t05B7 = prim *0036<$[2]> (_t05B6, dPos0542);
    vec2 _t05B8 = prim +0017<$[2]> (_t05B7, refPos0541);
    Femdata: MeshPos _t05B9 = extractFemItemN((mesh053F, _t05B8),InvalidBuildBoundary(MeshPos),);
    return _t05B9;
  }
}
function int[2]#5 nextCell40547 (int faceIdx05BA, int cell05BB, Femdata: Mesh mesh05BC)
{
  int _t05BD = 6;
  int _t05BE = prim *0033 (cell05BB, _t05BD);
  int _t05BF = 2;
  int _t05C0 = prim *0033 (faceIdx05BA, _t05BF);
  int _t05C1 = prim +0015 (_t05BE, _t05C0);
  int[2] _t05C2 = extractFemItemN((mesh05BC, _t05C1),CellFaceCell(Mesh),);
  return _t05C2;
}
function vec2#0 _enter05C3 (vec2 refPos05C4, vec2 dPos05C5)
{
  real time05C6 = +inf;
  int face05C7 = -1;
  real faceTime05C8 = -inf;
  real _t05C9 = 0.1e1;
  real _t05CA = 0.e0;
  vec2 _t05CB = [_t05C9, _t05CA];
  vec2 _t05CC = prim -0026<$[2]> (_t05CB, refPos05C4);
  real _t05CD = -0.1e1;
  real _t05CE = 0.1e1;
  vec2 _t05CF = [_t05CD, _t05CE];
  real _t05D0 = -0.1e1;
  real _t05D1 = 0.1e1;
  vec2 _t05D2 = [_t05D0, _t05D1];
  real _t05D3 = prim ×00BD (dPos05C5, _t05D2);
  vec2 _t05D4 = prim /0057<$[2]> (_t05CF, _t05D3);
  real _t05D5 = prim ×00BD (_t05CC, _t05D4);
  real _t05D6 = -0.1e-15;
  bool _t05D7 = prim >=007E (_t05D5, _t05D6);
  real _t05D8 = 0.1e1;
  real _t05D9 = 0.e0;
  vec2 _t05DA = [_t05D8, _t05D9];
  vec2 _t05DB = prim -0026<$[2]> (_t05DA, refPos05C4);
  real _t05DC = -0.1e1;
  real _t05DD = 0.1e1;
  vec2 _t05DE = [_t05DC, _t05DD];
  real _t05DF = -0.1e1;
  real _t05E0 = 0.1e1;
  vec2 _t05E1 = [_t05DF, _t05E0];
  real _t05E2 = prim ×00BD (dPos05C5, _t05E1);
  vec2 _t05E3 = prim /0057<$[2]> (_t05DE, _t05E2);
  real _t05E4 = prim ×00BD (_t05DB, _t05E3);
  bool _t05E5 = prim >0080 (time05C6, _t05E4);
  real _t05E6 = -0.1e1;
  real _t05E7 = 0.1e1;
  vec2 _t05E8 = [_t05E6, _t05E7];
  real _t05E9 = prim ×00BD (dPos05C5, _t05E8);
  real _t05EA = prim |()|00B5<$[]> (_t05E9);
  real _t05EB = 0.1e-20;
  bool _t05EC = prim >=007E (_t05EA, _t05EB);
  bool _t05ED = prim $and01C4 (_t05E5, _t05EC);
  bool _t05EE = prim $and01C4 (_t05D7, _t05ED);
  if _t05EE {
    real _t05EF = 0.1e1;
    real _t05F0 = 0.1e-8;
    real _t05F1 = prim +0017<$[]> (_t05EF, _t05F0);
    real _t05F2 = 0.1e1;
    real _t05F3 = 0.1e1;
    vec2 _t05F4 = [_t05F2, _t05F3];
    real _t05F5 = 0.1e1;
    real _t05F6 = 0.e0;
    vec2 _t05F7 = [_t05F5, _t05F6];
    vec2 _t05F8 = prim -0026<$[2]> (_t05F7, refPos05C4);
    real _t05F9 = -0.1e1;
    real _t05FA = 0.1e1;
    vec2 _t05FB = [_t05F9, _t05FA];
    real _t05FC = -0.1e1;
    real _t05FD = 0.1e1;
    vec2 _t05FE = [_t05FC, _t05FD];
    real _t05FF = prim ×00BD (dPos05C5, _t05FE);
    vec2 _t0600 = prim /0057<$[2]> (_t05FB, _t05FF);
    real _t0601 = prim ×00BD (_t05F8, _t0600);
    vec2 _t0602 = prim *0038<$[2]> (dPos05C5, _t0601);
    vec2 _t0603 = prim +0017<$[2]> (refPos05C4, _t0602);
    real _t0604 = prim •00CE<$[2]; $[2]; $[]> (_t05F4, _t0603);
    bool _t0605 = prim >0080 (_t05F1, _t0604);
    real _t0606 = 0.1e-8;
    real _t0607 = 0.1e-8;
    vec2 _t0608 = [_t0606, _t0607];
    real _t0609 = 0.1e1;
    real _t060A = 0.e0;
    vec2 _t060B = [_t0609, _t060A];
    vec2 _t060C = prim -0026<$[2]> (_t060B, refPos05C4);
    real _t060D = -0.1e1;
    real _t060E = 0.1e1;
    vec2 _t060F = [_t060D, _t060E];
    real _t0610 = -0.1e1;
    real _t0611 = 0.1e1;
    vec2 _t0612 = [_t0610, _t0611];
    real _t0613 = prim ×00BD (dPos05C5, _t0612);
    vec2 _t0614 = prim /0057<$[2]> (_t060F, _t0613);
    real _t0615 = prim ×00BD (_t060C, _t0614);
    vec2 _t0616 = prim *0038<$[2]> (dPos05C5, _t0615);
    vec2 _t0617 = prim +0017<$[2]> (refPos05C4, _t0616);
    vec2 _t0618 = prim +0017<$[2]> (_t0608, _t0617);
    real _t0619 = _t0618[0];
    real _t061A = -0.e0;
    bool _t061B = prim >0080 (_t0619, _t061A);
    real _t061C = 0.1e-8;
    real _t061D = 0.1e-8;
    vec2 _t061E = [_t061C, _t061D];
    real _t061F = 0.1e1;
    real _t0620 = 0.e0;
    vec2 _t0621 = [_t061F, _t0620];
    vec2 _t0622 = prim -0026<$[2]> (_t0621, refPos05C4);
    real _t0623 = -0.1e1;
    real _t0624 = 0.1e1;
    vec2 _t0625 = [_t0623, _t0624];
    real _t0626 = -0.1e1;
    real _t0627 = 0.1e1;
    vec2 _t0628 = [_t0626, _t0627];
    real _t0629 = prim ×00BD (dPos05C5, _t0628);
    vec2 _t062A = prim /0057<$[2]> (_t0625, _t0629);
    real _t062B = prim ×00BD (_t0622, _t062A);
    vec2 _t062C = prim *0038<$[2]> (dPos05C5, _t062B);
    vec2 _t062D = prim +0017<$[2]> (refPos05C4, _t062C);
    vec2 _t062E = prim +0017<$[2]> (_t061E, _t062D);
    real _t062F = _t062E[1];
    real _t0630 = -0.e0;
    bool _t0631 = prim >0080 (_t062F, _t0630);
    bool _t0632 = prim $and01C4 (_t061B, _t0631);
    bool _t0633 = prim $and01C4 (_t0605, _t0632);
    if _t0633 {
      real _t0634 = 0.1e1;
      real _t0635 = 0.e0;
      vec2 _t0636 = [_t0634, _t0635];
      vec2 _t0637 = prim -0026<$[2]> (_t0636, refPos05C4);
      real _t0638 = -0.1e1;
      real _t0639 = 0.1e1;
      vec2 _t063A = [_t0638, _t0639];
      real _t063B = -0.1e1;
      real _t063C = 0.1e1;
      vec2 _t063D = [_t063B, _t063C];
      real _t063E = prim ×00BD (dPos05C5, _t063D);
      vec2 _t063F = prim /0057<$[2]> (_t063A, _t063E);
      time05C6 = prim ×00BD (_t0637, _t063F);
      face05C7 = 0;
    }
  }
  real _t0640 = 0.e0;
  real _t0641 = 0.e0;
  vec2 _t0642 = [_t0640, _t0641];
  vec2 _t0643 = prim -0026<$[2]> (_t0642, refPos05C4);
  real _t0644 = 0.e0;
  real _t0645 = 0.1e1;
  vec2 _t0646 = [_t0644, _t0645];
  real _t0647 = 0.e0;
  real _t0648 = 0.1e1;
  vec2 _t0649 = [_t0647, _t0648];
  real _t064A = prim ×00BD (dPos05C5, _t0649);
  vec2 _t064B = prim /0057<$[2]> (_t0646, _t064A);
  real _t064C = prim ×00BD (_t0643, _t064B);
  real _t064D = -0.1e-15;
  bool _t064E = prim >=007E (_t064C, _t064D);
  real _t064F = 0.e0;
  real _t0650 = 0.e0;
  vec2 _t0651 = [_t064F, _t0650];
  vec2 _t0652 = prim -0026<$[2]> (_t0651, refPos05C4);
  real _t0653 = 0.e0;
  real _t0654 = 0.1e1;
  vec2 _t0655 = [_t0653, _t0654];
  real _t0656 = 0.e0;
  real _t0657 = 0.1e1;
  vec2 _t0658 = [_t0656, _t0657];
  real _t0659 = prim ×00BD (dPos05C5, _t0658);
  vec2 _t065A = prim /0057<$[2]> (_t0655, _t0659);
  real _t065B = prim ×00BD (_t0652, _t065A);
  bool _t065C = prim >0080 (time05C6, _t065B);
  real _t065D = 0.e0;
  real _t065E = 0.1e1;
  vec2 _t065F = [_t065D, _t065E];
  real _t0660 = prim ×00BD (dPos05C5, _t065F);
  real _t0661 = prim |()|00B5<$[]> (_t0660);
  real _t0662 = 0.1e-20;
  bool _t0663 = prim >=007E (_t0661, _t0662);
  bool _t0664 = prim $and01C4 (_t065C, _t0663);
  bool _t0665 = prim $and01C4 (_t064E, _t0664);
  if _t0665 {
    real _t0666 = 0.1e1;
    real _t0667 = 0.1e-8;
    real _t0668 = prim +0017<$[]> (_t0666, _t0667);
    real _t0669 = 0.1e1;
    real _t066A = 0.1e1;
    vec2 _t066B = [_t0669, _t066A];
    real _t066C = 0.e0;
    real _t066D = 0.e0;
    vec2 _t066E = [_t066C, _t066D];
    vec2 _t066F = prim -0026<$[2]> (_t066E, refPos05C4);
    real _t0670 = 0.e0;
    real _t0671 = 0.1e1;
    vec2 _t0672 = [_t0670, _t0671];
    real _t0673 = 0.e0;
    real _t0674 = 0.1e1;
    vec2 _t0675 = [_t0673, _t0674];
    real _t0676 = prim ×00BD (dPos05C5, _t0675);
    vec2 _t0677 = prim /0057<$[2]> (_t0672, _t0676);
    real _t0678 = prim ×00BD (_t066F, _t0677);
    vec2 _t0679 = prim *0038<$[2]> (dPos05C5, _t0678);
    vec2 _t067A = prim +0017<$[2]> (refPos05C4, _t0679);
    real _t067B = prim •00CE<$[2]; $[2]; $[]> (_t066B, _t067A);
    bool _t067C = prim >0080 (_t0668, _t067B);
    real _t067D = 0.1e-8;
    real _t067E = 0.1e-8;
    vec2 _t067F = [_t067D, _t067E];
    real _t0680 = 0.e0;
    real _t0681 = 0.e0;
    vec2 _t0682 = [_t0680, _t0681];
    vec2 _t0683 = prim -0026<$[2]> (_t0682, refPos05C4);
    real _t0684 = 0.e0;
    real _t0685 = 0.1e1;
    vec2 _t0686 = [_t0684, _t0685];
    real _t0687 = 0.e0;
    real _t0688 = 0.1e1;
    vec2 _t0689 = [_t0687, _t0688];
    real _t068A = prim ×00BD (dPos05C5, _t0689);
    vec2 _t068B = prim /0057<$[2]> (_t0686, _t068A);
    real _t068C = prim ×00BD (_t0683, _t068B);
    vec2 _t068D = prim *0038<$[2]> (dPos05C5, _t068C);
    vec2 _t068E = prim +0017<$[2]> (refPos05C4, _t068D);
    vec2 _t068F = prim +0017<$[2]> (_t067F, _t068E);
    real _t0690 = _t068F[0];
    real _t0691 = -0.e0;
    bool _t0692 = prim >0080 (_t0690, _t0691);
    real _t0693 = 0.1e-8;
    real _t0694 = 0.1e-8;
    vec2 _t0695 = [_t0693, _t0694];
    real _t0696 = 0.e0;
    real _t0697 = 0.e0;
    vec2 _t0698 = [_t0696, _t0697];
    vec2 _t0699 = prim -0026<$[2]> (_t0698, refPos05C4);
    real _t069A = 0.e0;
    real _t069B = 0.1e1;
    vec2 _t069C = [_t069A, _t069B];
    real _t069D = 0.e0;
    real _t069E = 0.1e1;
    vec2 _t069F = [_t069D, _t069E];
    real _t06A0 = prim ×00BD (dPos05C5, _t069F);
    vec2 _t06A1 = prim /0057<$[2]> (_t069C, _t06A0);
    real _t06A2 = prim ×00BD (_t0699, _t06A1);
    vec2 _t06A3 = prim *0038<$[2]> (dPos05C5, _t06A2);
    vec2 _t06A4 = prim +0017<$[2]> (refPos05C4, _t06A3);
    vec2 _t06A5 = prim +0017<$[2]> (_t0695, _t06A4);
    real _t06A6 = _t06A5[1];
    real _t06A7 = -0.e0;
    bool _t06A8 = prim >0080 (_t06A6, _t06A7);
    bool _t06A9 = prim $and01C4 (_t0692, _t06A8);
    bool _t06AA = prim $and01C4 (_t067C, _t06A9);
    if _t06AA {
      real _t06AB = 0.e0;
      real _t06AC = 0.e0;
      vec2 _t06AD = [_t06AB, _t06AC];
      vec2 _t06AE = prim -0026<$[2]> (_t06AD, refPos05C4);
      real _t06AF = 0.e0;
      real _t06B0 = 0.1e1;
      vec2 _t06B1 = [_t06AF, _t06B0];
      real _t06B2 = 0.e0;
      real _t06B3 = 0.1e1;
      vec2 _t06B4 = [_t06B2, _t06B3];
      real _t06B5 = prim ×00BD (dPos05C5, _t06B4);
      vec2 _t06B6 = prim /0057<$[2]> (_t06B1, _t06B5);
      time05C6 = prim ×00BD (_t06AE, _t06B6);
      face05C7 = 1;
    }
  }
  real _t06B7 = 0.e0;
  real _t06B8 = 0.e0;
  vec2 _t06B9 = [_t06B7, _t06B8];
  vec2 _t06BA = prim -0026<$[2]> (_t06B9, refPos05C4);
  real _t06BB = 0.1e1;
  real _t06BC = 0.e0;
  vec2 _t06BD = [_t06BB, _t06BC];
  real _t06BE = 0.1e1;
  real _t06BF = 0.e0;
  vec2 _t06C0 = [_t06BE, _t06BF];
  real _t06C1 = prim ×00BD (dPos05C5, _t06C0);
  vec2 _t06C2 = prim /0057<$[2]> (_t06BD, _t06C1);
  real _t06C3 = prim ×00BD (_t06BA, _t06C2);
  real _t06C4 = -0.1e-15;
  bool _t06C5 = prim >=007E (_t06C3, _t06C4);
  real _t06C6 = 0.e0;
  real _t06C7 = 0.e0;
  vec2 _t06C8 = [_t06C6, _t06C7];
  vec2 _t06C9 = prim -0026<$[2]> (_t06C8, refPos05C4);
  real _t06CA = 0.1e1;
  real _t06CB = 0.e0;
  vec2 _t06CC = [_t06CA, _t06CB];
  real _t06CD = 0.1e1;
  real _t06CE = 0.e0;
  vec2 _t06CF = [_t06CD, _t06CE];
  real _t06D0 = prim ×00BD (dPos05C5, _t06CF);
  vec2 _t06D1 = prim /0057<$[2]> (_t06CC, _t06D0);
  real _t06D2 = prim ×00BD (_t06C9, _t06D1);
  bool _t06D3 = prim >0080 (time05C6, _t06D2);
  real _t06D4 = 0.1e1;
  real _t06D5 = 0.e0;
  vec2 _t06D6 = [_t06D4, _t06D5];
  real _t06D7 = prim ×00BD (dPos05C5, _t06D6);
  real _t06D8 = prim |()|00B5<$[]> (_t06D7);
  real _t06D9 = 0.1e-20;
  bool _t06DA = prim >=007E (_t06D8, _t06D9);
  bool _t06DB = prim $and01C4 (_t06D3, _t06DA);
  bool _t06DC = prim $and01C4 (_t06C5, _t06DB);
  if _t06DC {
    real _t06DD = 0.1e1;
    real _t06DE = 0.1e-8;
    real _t06DF = prim +0017<$[]> (_t06DD, _t06DE);
    real _t06E0 = 0.1e1;
    real _t06E1 = 0.1e1;
    vec2 _t06E2 = [_t06E0, _t06E1];
    real _t06E3 = 0.e0;
    real _t06E4 = 0.e0;
    vec2 _t06E5 = [_t06E3, _t06E4];
    vec2 _t06E6 = prim -0026<$[2]> (_t06E5, refPos05C4);
    real _t06E7 = 0.1e1;
    real _t06E8 = 0.e0;
    vec2 _t06E9 = [_t06E7, _t06E8];
    real _t06EA = 0.1e1;
    real _t06EB = 0.e0;
    vec2 _t06EC = [_t06EA, _t06EB];
    real _t06ED = prim ×00BD (dPos05C5, _t06EC);
    vec2 _t06EE = prim /0057<$[2]> (_t06E9, _t06ED);
    real _t06EF = prim ×00BD (_t06E6, _t06EE);
    vec2 _t06F0 = prim *0038<$[2]> (dPos05C5, _t06EF);
    vec2 _t06F1 = prim +0017<$[2]> (refPos05C4, _t06F0);
    real _t06F2 = prim •00CE<$[2]; $[2]; $[]> (_t06E2, _t06F1);
    bool _t06F3 = prim >0080 (_t06DF, _t06F2);
    real _t06F4 = 0.1e-8;
    real _t06F5 = 0.1e-8;
    vec2 _t06F6 = [_t06F4, _t06F5];
    real _t06F7 = 0.e0;
    real _t06F8 = 0.e0;
    vec2 _t06F9 = [_t06F7, _t06F8];
    vec2 _t06FA = prim -0026<$[2]> (_t06F9, refPos05C4);
    real _t06FB = 0.1e1;
    real _t06FC = 0.e0;
    vec2 _t06FD = [_t06FB, _t06FC];
    real _t06FE = 0.1e1;
    real _t06FF = 0.e0;
    vec2 _t0700 = [_t06FE, _t06FF];
    real _t0701 = prim ×00BD (dPos05C5, _t0700);
    vec2 _t0702 = prim /0057<$[2]> (_t06FD, _t0701);
    real _t0703 = prim ×00BD (_t06FA, _t0702);
    vec2 _t0704 = prim *0038<$[2]> (dPos05C5, _t0703);
    vec2 _t0705 = prim +0017<$[2]> (refPos05C4, _t0704);
    vec2 _t0706 = prim +0017<$[2]> (_t06F6, _t0705);
    real _t0707 = _t0706[0];
    real _t0708 = -0.e0;
    bool _t0709 = prim >0080 (_t0707, _t0708);
    real _t070A = 0.1e-8;
    real _t070B = 0.1e-8;
    vec2 _t070C = [_t070A, _t070B];
    real _t070D = 0.e0;
    real _t070E = 0.e0;
    vec2 _t070F = [_t070D, _t070E];
    vec2 _t0710 = prim -0026<$[2]> (_t070F, refPos05C4);
    real _t0711 = 0.1e1;
    real _t0712 = 0.e0;
    vec2 _t0713 = [_t0711, _t0712];
    real _t0714 = 0.1e1;
    real _t0715 = 0.e0;
    vec2 _t0716 = [_t0714, _t0715];
    real _t0717 = prim ×00BD (dPos05C5, _t0716);
    vec2 _t0718 = prim /0057<$[2]> (_t0713, _t0717);
    real _t0719 = prim ×00BD (_t0710, _t0718);
    vec2 _t071A = prim *0038<$[2]> (dPos05C5, _t0719);
    vec2 _t071B = prim +0017<$[2]> (refPos05C4, _t071A);
    vec2 _t071C = prim +0017<$[2]> (_t070C, _t071B);
    real _t071D = _t071C[1];
    real _t071E = -0.e0;
    bool _t071F = prim >0080 (_t071D, _t071E);
    bool _t0720 = prim $and01C4 (_t0709, _t071F);
    bool _t0721 = prim $and01C4 (_t06F3, _t0720);
    if _t0721 {
      real _t0722 = 0.e0;
      real _t0723 = 0.e0;
      vec2 _t0724 = [_t0722, _t0723];
      vec2 _t0725 = prim -0026<$[2]> (_t0724, refPos05C4);
      real _t0726 = 0.1e1;
      real _t0727 = 0.e0;
      vec2 _t0728 = [_t0726, _t0727];
      real _t0729 = 0.1e1;
      real _t072A = 0.e0;
      vec2 _t072B = [_t0729, _t072A];
      real _t072C = prim ×00BD (dPos05C5, _t072B);
      vec2 _t072D = prim /0057<$[2]> (_t0728, _t072C);
      time05C6 = prim ×00BD (_t0725, _t072D);
      face05C7 = 2;
    }
  }
  int _t072E = -1;
  bool _t072F = prim !=0086 (face05C7, _t072E);
  if _t072F {
    real _t0730 = 0.e0;
    real _t0731 = prim max0125 (time05C6, _t0730);
    real _t0732 = (real)face05C7;
    vec2 _t0733 = [_t0731, _t0732];
    return _t0733;
  } else {
    real _t0734 = -0.1e1;
    real _t0735 = -0.1e1;
    vec2 _t0736 = [_t0734, _t0735];
    return _t0736;
  }
}
function vec2#0 _exit0737 (vec2 refPos05C4, vec2 dPos05C5, int i0738)
{
  real time0739 = +inf;
  int face073A = -1;
  real faceTime073B = -inf;
  real _t073C = 0.1e1;
  real _t073D = 0.e0;
  vec2 _t073E = [_t073C, _t073D];
  vec2 _t073F = prim -0026<$[2]> (_t073E, refPos05C4);
  real _t0740 = -0.1e1;
  real _t0741 = 0.1e1;
  vec2 _t0742 = [_t0740, _t0741];
  real _t0743 = -0.1e1;
  real _t0744 = 0.1e1;
  vec2 _t0745 = [_t0743, _t0744];
  real _t0746 = prim ×00BD (dPos05C5, _t0745);
  vec2 _t0747 = prim /0057<$[2]> (_t0742, _t0746);
  real _t0748 = prim ×00BD (_t073F, _t0747);
  real _t0749 = -0.1e-15;
  bool _t074A = prim >=007E (_t0748, _t0749);
  real _t074B = 0.1e1;
  real _t074C = 0.e0;
  vec2 _t074D = [_t074B, _t074C];
  vec2 _t074E = prim -0026<$[2]> (_t074D, refPos05C4);
  real _t074F = -0.1e1;
  real _t0750 = 0.1e1;
  vec2 _t0751 = [_t074F, _t0750];
  real _t0752 = -0.1e1;
  real _t0753 = 0.1e1;
  vec2 _t0754 = [_t0752, _t0753];
  real _t0755 = prim ×00BD (dPos05C5, _t0754);
  vec2 _t0756 = prim /0057<$[2]> (_t0751, _t0755);
  real _t0757 = prim ×00BD (_t074E, _t0756);
  bool _t0758 = prim >0080 (time0739, _t0757);
  real _t0759 = -0.1e1;
  real _t075A = 0.1e1;
  vec2 _t075B = [_t0759, _t075A];
  real _t075C = prim ×00BD (dPos05C5, _t075B);
  real _t075D = prim |()|00B5<$[]> (_t075C);
  real _t075E = 0.1e-20;
  bool _t075F = prim >=007E (_t075D, _t075E);
  bool _t0760 = prim $and01C4 (_t0758, _t075F);
  bool _t0761 = prim $and01C4 (_t074A, _t0760);
  if _t0761 {
    int _t0762 = 0;
    bool _t0763 = prim !=0086 (i0738, _t0762);
    if _t0763 {
      real _t0764 = 0.1e1;
      real _t0765 = 0.e0;
      vec2 _t0766 = [_t0764, _t0765];
      vec2 _t0767 = prim -0026<$[2]> (_t0766, refPos05C4);
      real _t0768 = -0.1e1;
      real _t0769 = 0.1e1;
      vec2 _t076A = [_t0768, _t0769];
      real _t076B = -0.1e1;
      real _t076C = 0.1e1;
      vec2 _t076D = [_t076B, _t076C];
      real _t076E = prim ×00BD (dPos05C5, _t076D);
      vec2 _t076F = prim /0057<$[2]> (_t076A, _t076E);
      time0739 = prim ×00BD (_t0767, _t076F);
      face073A = 0;
    } else {
      real _t0770 = 0.1e1;
      real _t0771 = 0.e0;
      vec2 _t0772 = [_t0770, _t0771];
      vec2 _t0773 = prim -0026<$[2]> (_t0772, refPos05C4);
      real _t0774 = -0.1e1;
      real _t0775 = 0.1e1;
      vec2 _t0776 = [_t0774, _t0775];
      real _t0777 = -0.1e1;
      real _t0778 = 0.1e1;
      vec2 _t0779 = [_t0777, _t0778];
      real _t077A = prim ×00BD (dPos05C5, _t0779);
      vec2 _t077B = prim /0057<$[2]> (_t0776, _t077A);
      faceTime073B = prim ×00BD (_t0773, _t077B);
    }
  }
  real _t077C = 0.e0;
  real _t077D = 0.e0;
  vec2 _t077E = [_t077C, _t077D];
  vec2 _t077F = prim -0026<$[2]> (_t077E, refPos05C4);
  real _t0780 = 0.e0;
  real _t0781 = 0.1e1;
  vec2 _t0782 = [_t0780, _t0781];
  real _t0783 = 0.e0;
  real _t0784 = 0.1e1;
  vec2 _t0785 = [_t0783, _t0784];
  real _t0786 = prim ×00BD (dPos05C5, _t0785);
  vec2 _t0787 = prim /0057<$[2]> (_t0782, _t0786);
  real _t0788 = prim ×00BD (_t077F, _t0787);
  real _t0789 = -0.1e-15;
  bool _t078A = prim >=007E (_t0788, _t0789);
  real _t078B = 0.e0;
  real _t078C = 0.e0;
  vec2 _t078D = [_t078B, _t078C];
  vec2 _t078E = prim -0026<$[2]> (_t078D, refPos05C4);
  real _t078F = 0.e0;
  real _t0790 = 0.1e1;
  vec2 _t0791 = [_t078F, _t0790];
  real _t0792 = 0.e0;
  real _t0793 = 0.1e1;
  vec2 _t0794 = [_t0792, _t0793];
  real _t0795 = prim ×00BD (dPos05C5, _t0794);
  vec2 _t0796 = prim /0057<$[2]> (_t0791, _t0795);
  real _t0797 = prim ×00BD (_t078E, _t0796);
  bool _t0798 = prim >0080 (time0739, _t0797);
  real _t0799 = 0.e0;
  real _t079A = 0.1e1;
  vec2 _t079B = [_t0799, _t079A];
  real _t079C = prim ×00BD (dPos05C5, _t079B);
  real _t079D = prim |()|00B5<$[]> (_t079C);
  real _t079E = 0.1e-20;
  bool _t079F = prim >=007E (_t079D, _t079E);
  bool _t07A0 = prim $and01C4 (_t0798, _t079F);
  bool _t07A1 = prim $and01C4 (_t078A, _t07A0);
  if _t07A1 {
    int _t07A2 = 1;
    bool _t07A3 = prim !=0086 (i0738, _t07A2);
    if _t07A3 {
      real _t07A4 = 0.e0;
      real _t07A5 = 0.e0;
      vec2 _t07A6 = [_t07A4, _t07A5];
      vec2 _t07A7 = prim -0026<$[2]> (_t07A6, refPos05C4);
      real _t07A8 = 0.e0;
      real _t07A9 = 0.1e1;
      vec2 _t07AA = [_t07A8, _t07A9];
      real _t07AB = 0.e0;
      real _t07AC = 0.1e1;
      vec2 _t07AD = [_t07AB, _t07AC];
      real _t07AE = prim ×00BD (dPos05C5, _t07AD);
      vec2 _t07AF = prim /0057<$[2]> (_t07AA, _t07AE);
      time0739 = prim ×00BD (_t07A7, _t07AF);
      face073A = 1;
    } else {
      real _t07B0 = 0.e0;
      real _t07B1 = 0.e0;
      vec2 _t07B2 = [_t07B0, _t07B1];
      vec2 _t07B3 = prim -0026<$[2]> (_t07B2, refPos05C4);
      real _t07B4 = 0.e0;
      real _t07B5 = 0.1e1;
      vec2 _t07B6 = [_t07B4, _t07B5];
      real _t07B7 = 0.e0;
      real _t07B8 = 0.1e1;
      vec2 _t07B9 = [_t07B7, _t07B8];
      real _t07BA = prim ×00BD (dPos05C5, _t07B9);
      vec2 _t07BB = prim /0057<$[2]> (_t07B6, _t07BA);
      faceTime073B = prim ×00BD (_t07B3, _t07BB);
    }
  }
  real _t07BC = 0.e0;
  real _t07BD = 0.e0;
  vec2 _t07BE = [_t07BC, _t07BD];
  vec2 _t07BF = prim -0026<$[2]> (_t07BE, refPos05C4);
  real _t07C0 = 0.1e1;
  real _t07C1 = 0.e0;
  vec2 _t07C2 = [_t07C0, _t07C1];
  real _t07C3 = 0.1e1;
  real _t07C4 = 0.e0;
  vec2 _t07C5 = [_t07C3, _t07C4];
  real _t07C6 = prim ×00BD (dPos05C5, _t07C5);
  vec2 _t07C7 = prim /0057<$[2]> (_t07C2, _t07C6);
  real _t07C8 = prim ×00BD (_t07BF, _t07C7);
  real _t07C9 = -0.1e-15;
  bool _t07CA = prim >=007E (_t07C8, _t07C9);
  real _t07CB = 0.e0;
  real _t07CC = 0.e0;
  vec2 _t07CD = [_t07CB, _t07CC];
  vec2 _t07CE = prim -0026<$[2]> (_t07CD, refPos05C4);
  real _t07CF = 0.1e1;
  real _t07D0 = 0.e0;
  vec2 _t07D1 = [_t07CF, _t07D0];
  real _t07D2 = 0.1e1;
  real _t07D3 = 0.e0;
  vec2 _t07D4 = [_t07D2, _t07D3];
  real _t07D5 = prim ×00BD (dPos05C5, _t07D4);
  vec2 _t07D6 = prim /0057<$[2]> (_t07D1, _t07D5);
  real _t07D7 = prim ×00BD (_t07CE, _t07D6);
  bool _t07D8 = prim >0080 (time0739, _t07D7);
  real _t07D9 = 0.1e1;
  real _t07DA = 0.e0;
  vec2 _t07DB = [_t07D9, _t07DA];
  real _t07DC = prim ×00BD (dPos05C5, _t07DB);
  real _t07DD = prim |()|00B5<$[]> (_t07DC);
  real _t07DE = 0.1e-20;
  bool _t07DF = prim >=007E (_t07DD, _t07DE);
  bool _t07E0 = prim $and01C4 (_t07D8, _t07DF);
  bool _t07E1 = prim $and01C4 (_t07CA, _t07E0);
  if _t07E1 {
    int _t07E2 = 2;
    bool _t07E3 = prim !=0086 (i0738, _t07E2);
    if _t07E3 {
      real _t07E4 = 0.e0;
      real _t07E5 = 0.e0;
      vec2 _t07E6 = [_t07E4, _t07E5];
      vec2 _t07E7 = prim -0026<$[2]> (_t07E6, refPos05C4);
      real _t07E8 = 0.1e1;
      real _t07E9 = 0.e0;
      vec2 _t07EA = [_t07E8, _t07E9];
      real _t07EB = 0.1e1;
      real _t07EC = 0.e0;
      vec2 _t07ED = [_t07EB, _t07EC];
      real _t07EE = prim ×00BD (dPos05C5, _t07ED);
      vec2 _t07EF = prim /0057<$[2]> (_t07EA, _t07EE);
      time0739 = prim ×00BD (_t07E7, _t07EF);
      face073A = 2;
    } else {
      real _t07F0 = 0.e0;
      real _t07F1 = 0.e0;
      vec2 _t07F2 = [_t07F0, _t07F1];
      vec2 _t07F3 = prim -0026<$[2]> (_t07F2, refPos05C4);
      real _t07F4 = 0.1e1;
      real _t07F5 = 0.e0;
      vec2 _t07F6 = [_t07F4, _t07F5];
      real _t07F7 = 0.1e1;
      real _t07F8 = 0.e0;
      vec2 _t07F9 = [_t07F7, _t07F8];
      real _t07FA = prim ×00BD (dPos05C5, _t07F9);
      vec2 _t07FB = prim /0057<$[2]> (_t07F6, _t07FA);
      faceTime073B = prim ×00BD (_t07F3, _t07FB);
    }
  }
  int _t07FC = -1;
  bool _t07FD = prim !=0086 (face073A, _t07FC);
  if _t07FD {
    real _t07FE = 0.e0;
    real _t07FF = prim max0125 (time0739, _t07FE);
    real _t0800 = (real)face073A;
    vec2 _t0801 = [_t07FF, _t0800];
    return _t0801;
  } else {
    real _t0802 = -inf;
    bool _t0803 = prim ==0084 (_t0802, faceTime073B);
    if _t0803 {
      real _t0804 = -0.1e1;
      real _t0805 = -0.1e1;
      vec2 _t0806 = [_t0804, _t0805];
      return _t0806;
    } else {
      real _t0807 = (real)i0738;
      vec2 _t0808 = [faceTime073B, _t0807];
      return _t0808;
    }
  }
}
function Femdata: Mesh#0 domain0809 (Femdata: Space arg0080A)
{
  Femdata: Mesh _t080B = extractFem(arg0080A, Mesh);
  return _t080B;
}
function Femdata: Space#0 space080C (Femdata: FemFunc arg0080D)
{
  Femdata: Space _t080E = extractFem(arg0080D, Space);
  return _t080E;
}
function Femdata: FuncCell#3 funcCell080F (Femdata: FemFunc arg00810, Femdata: MeshCell arg10811)
{
  int _t0812 = extractFemItem(CellIndex(MeshCell), int, arg10811);
  Femdata: FuncCell _t0813 = loadFem(FuncCell, arg00810, _t0812);
  return _t0813;
}
function int#4 sign082E (real x082F)
{
  real _t0830 = 0.e0;
  bool _t0831 = prim >0080 (x082F, _t0830);
  if _t0831 {
    int _t0832 = 1;
    return _t0832;
  } else {
    real _t0833 = 0.e0;
    bool _t0834 = prim <007A (x082F, _t0833);
    if _t0834 {
      int _t0835 = -1;
      return _t0835;
    } else {
      int _t0836 = 0;
      return _t0836;
    }
  }
}
globalInit {
  int _t046A = 0;
  int _t0468 = 1;
  int _t046C = extractFemItem(NumCell(Mesh), int, a0466);
  int _t046B = prim -0024 (_t046C, _t0468);
  int[] _t046F = prim $range01C3 (_t046A, _t046B);
  Femdata: MeshCell[] _t0470 = {};
  foreach _t046E in _t046F {
    Femdata: MeshCell _t0471 = loadFem(MeshCell, a0466, _t046E);
    _t0470 = prim @0010<Femdata: MeshCell> (_t0470, _t0471);
  }
  0cell_a0467 = _t0470;
  b0472 = loadFem(Space, 0b0472_intermedateGlobal0473, a0466);
  c0474 = loadFem(FemFunc, 0c0474_intermedateGlobal0475, b0472);
  vec3 _t0814 = prim -0026<$[3]> (camAt0457, camEye0453);
  camDist0815 = prim |()|00B5<$[3]> (_t0814);
  camNearVsp0816 = prim +0017<$[]> (camNear0462, camDist0815);
  camFarVsp0817 = prim +0017<$[]> (camFar0463, camDist0815);
  vec3 _t0818 = prim -0026<$[3]> (camAt0457, camEye0453);
  camN0819 = prim normalize0137<$[3]> (_t0818);
  vec3 _t081A = prim ×00BE (camN0819, camUp045B);
  camU081B = prim normalize0137<$[3]> (_t081A);
  camV081C = prim ×00BE (camU081B, camN0819);
  real _t081D = 0.314159265358979323846264338327950288e1;
  real _t081E = prim *0034 (camFOV045F, _t081D);
  real _t081F = 0.36e3;
  real _t0820 = prim /0055 (_t081E, _t081F);
  real _t0821 = prim tan0179 (_t0820);
  camVmax0822 = prim *0034 (_t0821, camDist0815);
  real _t0823 = (real)iresU0460;
  real _t0824 = prim *0034 (camVmax0822, _t0823);
  real _t0825 = (real)iresV0461;
  camUmax0826 = prim /0055 (_t0824, _t0825);
  kernel _t0827 = tent;
  IMAGE1D<double[3]> img0828 = clamp(cmap0483);
  CM0829 = prim ⊛0074<#0; %1; $[3]> (_t0827, img0828);
  tensor[3,3] _t082A = [camU081B, camV081C, camN0819];
  tensor[3,3] _t082B = prim transpose0145<%3; %3> (_t082A);
  vec3 _t082C = prim normalize0137<$[3]> (lightVsp048C);
  L082D = prim •00CE<$[3,3]; $[3]; $[3]> (_t082B, _t082C);
}
strand ray (int ui0837, int vi0838) {
  real rayU0839;
  real rayV0840;
  vec3 UV0847;
  vec3 rayOrig084A;
  vec3 rayVec084B;
  real camNearVsp0850;
  real camFarVsp0851;
  int offset0854;
  int len0857;
  int itter085C;
  int intersectionItter085D;
  int idx085E;
  vec2 interval085F;
  real s0860;
  real e0861;
  Femdata: MeshCell cc0862;
  Femdata: FuncCell fc0864;
  output real out0866;
  output vec4 rgba0867;
  {
    real _t083A = prim unary -008B<$[]> (camUmax0826);
    real _t083B = -0.5e0;
    real _t083C = (real)ui0837;
    real _t083D = (real)iresU0460;
    real _t083E = 0.5e0;
    real _t083F = prim -0026<$[]> (_t083D, _t083E);
    rayU0839 = prim lerp0098<$[]> (_t083A, camUmax0826, _t083B, _t083C, _t083F);
    real _t0841 = prim unary -008B<$[]> (camVmax0822);
    real _t0842 = -0.5e0;
    real _t0843 = (real)vi0838;
    real _t0844 = (real)iresV0461;
    real _t0845 = 0.5e0;
    real _t0846 = prim -0026<$[]> (_t0844, _t0845);
    rayV0840 = prim lerp0098<$[]> (_t0841, camVmax0822, _t0842, _t0843, _t0846);
    vec3 _t0848 = prim *0036<$[3]> (rayU0839, camU081B);
    vec3 _t0849 = prim *0036<$[3]> (rayV0840, camV081C);
    UV0847 = prim +0017<$[3]> (_t0848, _t0849);
    rayOrig084A = prim +0017<$[3]> (camEye0453, UV0847);
    real _t084C = 0.e0;
    real _t084D = 0.e0;
    real _t084E = 0.e0;
    vec3 _t084F = [_t084C, _t084D, _t084E];
    rayVec084B = prim +0017<$[3]> (camN0819, _t084F);
    camNearVsp0850 = camNearVsp0816;
    camFarVsp0851 = camFarVsp0817;
    int _t0855 = prim *0033 (ui0837, iresV0461);
    int _t0856 = prim +0015 (_t0855, vi0838);
    offset0854 = prim $dynsub01C2<int> (indecies0477, _t0856);
    int _t0858 = prim *0033 (iresU0460, iresV0461);
    int _t0859 = prim *0033 (ui0837, iresV0461);
    int _t085A = prim +0015 (_t0858, _t0859);
    int _t085B = prim +0015 (_t085A, vi0838);
    len0857 = prim $dynsub01C2<int> (indecies0477, _t085B);
    itter085C = 0;
    intersectionItter085D = 0;
    idx085E = prim +0015 (offset0854, itter085C);
    interval085F = prim $dynsub01C2<vec2> (times0478, idx085E);
    s0860 = interval085F[0];
    e0861 = interval085F[1];
    int _t0863 = 0;
    cc0862 = prim $dynsub01C2<Femdata: MeshCell> (0cell_a0467, _t0863);
    fc0864 = func funcCell080F (c0474, cc0862);
    out0866 = 0.e0;
    real _t0868 = 0.e0;
    real _t0869 = 0.e0;
    real _t086A = 0.e0;
    real _t086B = 0.e0;
    rgba0867 = [_t0868, _t0869, _t086A, _t086B];
  }
  start
  {
    int _t086C = 0;
    bool _t086D = prim ==0082 (len0857, _t086C);
    if _t086D {
      stabilize;
    }
    int _t086E = prim $dynsub01C2<int> (cells0479, idx085E);
    cc0862 = prim $dynsub01C2<Femdata: MeshCell> (0cell_a0467, _t086E);
    fc0864 = func funcCell080F (c0474, cc0862);
  }
  update
  {
    string _t086F = "Interval:";
    vec2 _t0870 = [s0860, e0861];
    string _t0871 = "\n";
    print (_t086F, _t0870, _t0871);
    string _t0872 = "inner itter:";
    string _t0873 = "\n";
    print (_t0872, intersectionItter085D, _t0873);
    string _t0874 = "Outer itter:";
    string _t0875 = "\n";
    print (_t0874, itter085C, _t0875);
    real _t0876 = rayOrig084A[0];
    real _t0877 = rayOrig084A[1];
    vec2 _t0878 = [_t0876, _t0877];
    real _t0879 = rayVec084B[0];
    real _t087A = rayVec084B[1];
    vec2 _t087B = [_t0879, _t087A];
    vec2 _t087C = prim *0036<$[2]> (s0860, _t087B);
    vec2 startRay087D = prim +0017<$[2]> (_t0878, _t087C);
    real _t087E = rayOrig084A[0];
    real _t087F = rayOrig084A[1];
    vec2 _t0880 = [_t087E, _t087F];
    real _t0881 = rayVec084B[0];
    real _t0882 = rayVec084B[1];
    vec2 _t0883 = [_t0881, _t0882];
    vec2 _t0884 = prim *0036<$[2]> (e0861, _t0883);
    vec2 endRay0885 = prim +0017<$[2]> (_t0880, _t0884);
    Femdata: Mesh _t0886 = extractFem(cc0862, Mesh);
    Femdata: Mesh _t0887 = extractFem(cc0862, Mesh);
    int _t0888 = extractFemItem(CellIndex(MeshCell), int, cc0862);
    field(2)[2] _t0889 = femField(_t0886,_t0888,field(2)[2],InvTransform,_msh_newtonInverse04FB );
    vec2 invertA088A = prim @00A5<#∞; %2; $[2]> (_t0889, startRay087D);
    Femdata: Mesh _t088B = extractFem(cc0862, Mesh);
    Femdata: Mesh _t088C = extractFem(cc0862, Mesh);
    int _t088D = extractFemItem(CellIndex(MeshCell), int, cc0862);
    field(2)[2] _t088E = femField(_t088B,_t088D,field(2)[2],InvTransform,_msh_newtonInverse04FB );
    vec2 invertB088F = prim @00A5<#∞; %2; $[2]> (_t088E, endRay0885);
    string _t0890 = "inverses:";
    string _t0891 = "\n";
    print (_t0890, invertA088A, invertB088F, _t0891);
    Femdata: FemFunc _t0892 = extractFem(fc0864, FemFunc);
    Femdata: FemFunc _t0893 = extractFem(fc0864, FemFunc);
    Femdata: Space _t0894 = extractFem(_t0893, Space);
    int _t0895 = extractFemItem(CellIndex(FuncCell), int, fc0864);
    field(2)[] _t0896 = femField(_t0892,_t0895,field(2)[],refField,);
    real faVal0897 = prim @00A5<#∞; %2; $[]> (_t0896, invertA088A);
    real _t0898 = rayVec084B[2];
    real _t0899 = prim *0034 (_t0898, s0860);
    real _t089A = prim -0026<$[]> (faVal0897, _t0899);
    real _t089B = rayOrig084A[2];
    real fa089C = prim -0026<$[]> (_t089A, _t089B);
    Femdata: FemFunc _t089D = extractFem(fc0864, FemFunc);
    Femdata: FemFunc _t089E = extractFem(fc0864, FemFunc);
    Femdata: Space _t089F = extractFem(_t089E, Space);
    int _t08A0 = extractFemItem(CellIndex(FuncCell), int, fc0864);
    field(2)[] _t08A1 = femField(_t089D,_t08A0,field(2)[],refField,);
    real _t08A2 = prim @00A5<#∞; %2; $[]> (_t08A1, invertB088F);
    real _t08A3 = rayVec084B[2];
    real _t08A4 = prim *0034 (_t08A3, e0861);
    real _t08A5 = prim -0026<$[]> (_t08A2, _t08A4);
    real _t08A6 = rayOrig084A[2];
    real fb08A7 = prim -0026<$[]> (_t08A5, _t08A6);
    string _t08A8 = "Vals:";
    vec2 _t08A9 = [fa089C, fb08A7];
    string _t08AA = "\n";
    print (_t08A8, _t08A9, _t08AA);
    real _t08AB = prim -0026<$[]> (fa089C, fb08A7);
    real _t08AC = prim |()|00B5<$[]> (_t08AB);
    bool _t08AD = prim <007A (_t08AC, eps0476);
    if _t08AD {
      real _t08AE = prim |()|00B5<$[]> (fa089C);
      bool _t08AF = prim >0080 (_t08AE, eps0476);
      if _t08AF {
        s0860 = prim +0017<$[]> (s0860, eps0476);
        continue;
      }
    }
    real _t08B0 = prim *0034 (s0860, fb08A7);
    real _t08B1 = prim *0034 (e0861, fa089C);
    real _t08B2 = prim -0026<$[]> (_t08B0, _t08B1);
    real _t08B3 = prim -0026<$[]> (fb08A7, fa089C);
    real cup08B4 = prim /0055 (_t08B2, _t08B3);
    string _t08B5 = "Mid time:";
    string _t08B6 = "\n";
    print (_t08B5, cup08B4, _t08B6);
    real _t08B7 = rayOrig084A[0];
    real _t08B8 = rayOrig084A[1];
    vec2 _t08B9 = [_t08B7, _t08B8];
    real _t08BA = rayVec084B[0];
    real _t08BB = rayVec084B[1];
    vec2 _t08BC = [_t08BA, _t08BB];
    vec2 _t08BD = prim *0036<$[2]> (cup08B4, _t08BC);
    vec2 midRay08BE = prim +0017<$[2]> (_t08B9, _t08BD);
    Femdata: Mesh _t08BF = extractFem(cc0862, Mesh);
    Femdata: Mesh _t08C0 = extractFem(cc0862, Mesh);
    int _t08C1 = extractFemItem(CellIndex(MeshCell), int, cc0862);
    field(2)[2] _t08C2 = femField(_t08BF,_t08C1,field(2)[2],InvTransform,_msh_newtonInverse04FB );
    vec2 invertC08C3 = prim @00A5<#∞; %2; $[2]> (_t08C2, midRay08BE);
    Femdata: FemFunc _t08C4 = extractFem(fc0864, FemFunc);
    Femdata: FemFunc _t08C5 = extractFem(fc0864, FemFunc);
    Femdata: Space _t08C6 = extractFem(_t08C5, Space);
    int _t08C7 = extractFemItem(CellIndex(FuncCell), int, fc0864);
    field(2)[] _t08C8 = femField(_t08C4,_t08C7,field(2)[],refField,);
    real fmVal08C9 = prim @00A5<#∞; %2; $[]> (_t08C8, invertC08C3);
    real _t08CA = rayVec084B[2];
    real _t08CB = prim *0034 (_t08CA, cup08B4);
    real _t08CC = prim -0026<$[]> (fmVal08C9, _t08CB);
    real _t08CD = rayOrig084A[2];
    real fm08CE = prim -0026<$[]> (_t08CC, _t08CD);
    string _t08CF = "all vals:";
    vec3 _t08D0 = [fa089C, fm08CE, fb08A7];
    string _t08D1 = "\n";
    print (_t08CF, _t08D0, _t08D1);
    int _t08D2 = 1;
    intersectionItter085D = prim +0015 (intersectionItter085D, _t08D2);
    int _t08D3 = func sign082E (fa089C);
    int _t08D4 = func sign082E (fm08CE);
    int _t08D5 = prim *0033 (_t08D3, _t08D4);
    int _t08D6 = 0;
    bool _t08D7 = prim <0079 (_t08D5, _t08D6);
    if _t08D7 {
      e0861 = cup08B4;
    } else {
      int _t08D8 = func sign082E (fa089C);
      int _t08D9 = func sign082E (fm08CE);
      int _t08DA = prim *0033 (_t08D8, _t08D9);
      int _t08DB = 0;
      bool _t08DC = prim >007F (_t08DA, _t08DB);
      if _t08DC {
        s0860 = cup08B4;
      }
    }
    string _t08DD = "new interval:";
    vec2 _t08DE = [s0860, e0861];
    string _t08DF = "\n";
    print (_t08DD, _t08DE, _t08DF);
    bool _t08E0;
    real _t08E1 = prim |()|00B5<$[]> (fa089C);
    bool _t08E2 = prim <007A (_t08E1, eps0476);
    if _t08E2 {
      _t08E0 = true;
    } else {
      bool _t08E3;
      real _t08E4 = prim |()|00B5<$[]> (fm08CE);
      bool _t08E5 = prim <007A (_t08E4, eps0476);
      if _t08E5 {
        _t08E3 = true;
      } else {
        int _t08E6 = 32;
        _t08E3 = prim >007F (intersectionItter085D, _t08E6);
      }
      _t08E0 = _t08E3;
    }
    if _t08E0 {
      intersectionItter085D = 0;
      bool _t08E7;
      real _t08E8 = prim |()|00B5<$[]> (fm08CE);
      bool _t08E9 = prim >0080 (_t08E8, eps0476);
      if _t08E9 {
        real _t08EA = prim |()|00B5<$[]> (fa089C);
        _t08E7 = prim >0080 (_t08EA, eps0476);
      } else {
        _t08E7 = false;
      }
      if _t08E7 {
        int _t08EB = 1;
        itter085C = prim +0015 (itter085C, _t08EB);
        bool _t08EC = prim >=007D (itter085C, len0857);
        if _t08EC {
          string _t08ED = "Fin pixel=============================\n";
          print (_t08ED);
          stabilize;
        }
        int _t08EE = prim +0015 (offset0854, itter085C);
        interval085F = prim $dynsub01C2<vec2> (times0478, _t08EE);
        int _t08EF = prim +0015 (offset0854, itter085C);
        int _t08F0 = prim $dynsub01C2<int> (cells0479, _t08EF);
        cc0862 = prim $dynsub01C2<Femdata: MeshCell> (0cell_a0467, _t08F0);
        s0860 = interval085F[0];
        e0861 = interval085F[1];
        fc0864 = func funcCell080F (c0474, cc0862);
        string _t08F1 = "Next interval!\n";
        print (_t08F1);
        continue;
      } else {
        real _t08F2 = 0.e0;
        real _t08F3 = 0.e0;
        vec2 grad08F4 = [_t08F2, _t08F3];
        real _t08F6 = prim |()|00B5<$[]> (fm08CE);
        bool _t08F7 = prim <007A (_t08F6, eps0476);
        if _t08F7 {
          Femdata: FemFunc _t08F8 = extractFem(fc0864, FemFunc);
          Femdata: FemFunc _t08F9 = extractFem(fc0864, FemFunc);
          Femdata: Space _t08FA = extractFem(_t08F9, Space);
          int _t08FB = extractFemItem(CellIndex(FuncCell), int, fc0864);
          field(2)[] _t08FC = femField(_t08F8,_t08FB,field(2)[],refField,);
          Femdata: Mesh _t08FD = extractFem(cc0862, Mesh);
          Femdata: Mesh _t08FE = extractFem(cc0862, Mesh);
          int _t08FF = extractFemItem(CellIndex(MeshCell), int, cc0862);
          field(2)[2] _t0900 = femField(_t08FD,_t08FF,field(2)[2],InvTransform,_msh_newtonInverse04FB );
          field(2)[] _t0901 = prim ∘0164<#∞; %2; $[]; %2; $[2]> (_t08FC, _t0900);
          field(2)[2] _t0902 = prim ∇00A8<#∞; %2> (_t0901);
          grad08F4 = prim @00A5<#∞; %2; $[2]> (_t0902, midRay08BE);
          out0866 = fmVal08C9;
        }
        real _t0903 = prim |()|00B5<$[]> (fa089C);
        bool _t0904 = prim <007A (_t0903, eps0476);
        if _t0904 {
          cup08B4 = s0860;
          Femdata: FemFunc _t0905 = extractFem(fc0864, FemFunc);
          Femdata: FemFunc _t0906 = extractFem(fc0864, FemFunc);
          Femdata: Space _t0907 = extractFem(_t0906, Space);
          int _t0908 = extractFemItem(CellIndex(FuncCell), int, fc0864);
          field(2)[] _t0909 = femField(_t0905,_t0908,field(2)[],refField,);
          Femdata: Mesh _t090A = extractFem(cc0862, Mesh);
          Femdata: Mesh _t090B = extractFem(cc0862, Mesh);
          int _t090C = extractFemItem(CellIndex(MeshCell), int, cc0862);
          field(2)[2] _t090D = femField(_t090A,_t090C,field(2)[2],InvTransform,_msh_newtonInverse04FB );
          field(2)[] _t090E = prim ∘0164<#∞; %2; $[]; %2; $[2]> (_t0909, _t090D);
          field(2)[2] _t090F = prim ∇00A8<#∞; %2> (_t090E);
          grad08F4 = prim @00A5<#∞; %2; $[2]> (_t090F, startRay087D);
          out0866 = faVal0897;
        }
        string _t0910 = "Out val:";
        string _t0911 = "\n";
        print (_t0910, out0866, _t0911);
        string _t0912 = "Grad val:";
        string _t0913 = "\n";
        print (_t0912, grad08F4, _t0913);
        real _t0914 = 0.1e1;
        real _t0915 = 0.1e1;
        real _t0916 = 0.1e1;
        vec3 mcol0917 = [_t0914, _t0915, _t0916];
        bool _t0918 = prim !=0088 (cmin0484, cmax0485);
        if _t0918 {
          int _t0919 = -1;
          real _t091A = (real)_t0919;
          real _t091B = 0.1e1;
          real _t091C = prim lerp0098<$[]> (_t091A, _t091B, cmin0484, out0866, cmax0485);
          mcol0917 = prim @00A5<#0; %1; $[3]> (CM0829, _t091C);
        }
        if light0486 {
          real _t091D = grad08F4[0];
          real _t091E = grad08F4[1];
          int _t091F = -1;
          real _t0920 = (real)_t091F;
          vec3 N0921 = [_t091D, _t091E, _t0920];
          vec3 _t0922 = prim normalize0137<$[3]> (rayVec084B);
          vec3 _t0923 = prim unary -008B<$[3]> (_t0922);
          vec3 _t0924 = prim +0017<$[3]> (_t0923, L082D);
          vec3 H0925 = prim normalize0137<$[3]> (_t0924);
          vec3 lightColor0926 = prim lerp0098<$[3]> (mcnear047A, mcfar047E, camNearVsp0850, cup08B4, camFarVsp0851);
          vec3 ambientTerm0927 = prim *0036<$[3]> (phongKa0487, mcol0917);
          vec3 _t0928 = prim modulate0129<%3> (mcol0917, lightColor0926);
          vec3 _t0929 = prim *0036<$[3]> (phongKd0488, _t0928);
          real _t092A = 0.e0;
          real _t092B = prim •00CE<$[3]; $[3]; $[]> (N0921, L082D);
          real _t092C = prim max0125 (_t092A, _t092B);
          vec3 diffuse092D = prim *0038<$[3]> (_t0929, _t092C);
          vec3 _t092E = prim *0036<$[3]> (phongKs0489, lightColor0926);
          real _t092F = 0.e0;
          real _t0930 = prim •00CE<$[3]; $[3]; $[]> (N0921, H0925);
          real _t0931 = prim max0125 (_t092F, _t0930);
          real _t0932 = prim ^0069 (_t0931, phongSp048A);
          vec3 specular0933 = prim *0038<$[3]> (_t092E, _t0932);
          vec3 _t0934 = prim +0017<$[3]> (ambientTerm0927, diffuse092D);
          vec3 fin0935 = prim +0017<$[3]> (_t0934, specular0933);
          real _t0936 = fin0935[0];
          real _t0937 = fin0935[1];
          real _t0938 = fin0935[2];
          real _t0939 = 0.1e1;
          rgba0867 = [_t0936, _t0937, _t0938, _t0939];
        } else {
          real _t093A = mcol0917[0];
          real _t093B = mcol0917[1];
          real _t093C = mcol0917[2];
          real _t093D = 0.1e1;
          rgba0867 = [_t093A, _t093B, _t093C, _t093D];
        }
        stabilize;
      }
    } else {
      string _t093E = "=========\n";
      print (_t093E);
    }
  }
}
grid(2) {
  int _t093F = 0;
  int _t0940 = 1;
  int _t0941 = prim -0024 (iresU0460, _t0940);
  int[] _t0942 = prim $range01C3 (_t093F, _t0941);
  foreach vi0948 in _t0942 {
    int _t0943 = 0;
    int _t0944 = 1;
    int _t0945 = prim -0024 (iresV0461, _t0944);
    int[] _t0946 = prim $range01C3 (_t0943, _t0945);
    foreach ui0947 in _t0946 {
      new ray (ui0947, vi0948);
    }
  }
}
/* Program end */
/* Simplified Program (after after map-reduce-fusion) start */
properties: GlobalInit,StrandArray,HasStartMethod,ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[]),HasInputs,HasGlobals
input real isoval0451 = <default>;
input real thick0452 = <default>;
input vec3 camEye0453 = <default>;
input vec3 camAt0457 = <default>;
input vec3 camUp045B = <default>;
input real camFOV045F = <default>;
input int iresU0460 = <default>;
input int iresV0461 = <default>;
input real camNear0462 = <default>;
input real camFar0463 = <default>;
input real refStep0464 = <default>;
input real rayStep0465 = <default>;
input FemData:Mesh a0466;
input FemData:Space 0b0472_intermedateGlobal0473;
input FemData:FemFunc 0c0474_intermedateGlobal0475;
input real eps0476 = <default>;
input int[] indecies0477;
input vec2[] times0478;
input int[] cells0479;
input vec3 mcnear047A("material color at near clipping plane (for depth cuing)") = <default>;
input vec3 mcfar047E("material color at far clipping plane") = <default>;
input image(1)[3] cmap0483("univariate colormap") = image("/home/teocollin/gitcode/diderot/tests/lipRay/find/cmap.nrrd");
input real cmin0484("value mapped to min end of colormap") = <default>;
input real cmax0485("value mapped to max end of colormap. By default cmin==cmax==0, which disables this colormapping") = <default>;
input bool light0486 = <default>;
input real phongKa0487("Blinn-Phong ambient component") = <default>;
input real phongKd0488("Blinn-Phong diffuse component") = <default>;
input real phongKs0489("Blinn-Phong specular component") = <default>;
input real phongSp048A("Blinn-Phong specularity exponent") = <default>;
input real maxAlpha048B("maximum opacity on rendered surface") = <default>;
input vec3 lightVsp048C = <default>;
constants {
  isoval0451 = 0.2e0;
  thick0452 = 0.7e-1;
  real _t0454 = 0.3e1;
  real _t0455 = -0.3e1;
  real _t0456 = 0.3e1;
  camEye0453 = [_t0454, _t0455, _t0456];
  real _t0458 = 0.5e0;
  real _t0459 = 0.5e0;
  real _t045A = 0.5e0;
  camAt0457 = [_t0458, _t0459, _t045A];
  real _t045C = 0.e0;
  real _t045D = 0.e0;
  real _t045E = 0.1e1;
  camUp045B = [_t045C, _t045D, _t045E];
  camFOV045F = 0.137e2;
  iresU0460 = 10;
  iresV0461 = 10;
  camNear0462 = -0.2e1;
  camFar0463 = 0.5e1;
  refStep0464 = 0.1e1;
  rayStep0465 = 0.1e-1;
  eps0476 = 0.1e-5;
  real _t047B = 0.1e1;
  real _t047C = 0.1e1;
  real _t047D = 0.1e1;
  mcnear047A = [_t047B, _t047C, _t047D];
  real _t047F = 0.1e1;
  real _t0480 = 0.1e1;
  real _t0481 = 0.1e1;
  mcfar047E = [_t047F, _t0480, _t0481];
  cmin0484 = 0.e0;
  cmax0485 = 0.1e1;
  light0486 = true;
  phongKa0487 = 0.5e0;
  phongKd0488 = 0.5e0;
  phongKs0489 = 0.e0;
  phongSp048A = 0.6e2;
  maxAlpha048B = 0.1e1;
  real _t048D = 0.e0;
  real _t048E = 0.e0;
  real _t048F = 0.1e1;
  lightVsp048C = [_t048D, _t048E, _t048F];
}
global Femdata: MeshCell[] 0cell_a0467;
global Femdata: Space b0472;
global Femdata: FemFunc c0474;
global real camDist0815;
global real camNearVsp0816;
global real camFarVsp0817;
global vec3 camN0819;
global vec3 camU081B;
global vec3 camV081C;
global real camVmax0822;
global real camUmax0826;
global field#0(1)[3] CM0829;
global vec3 L082D;
function bool#0 !=0490 (Femdata: MeshCell cell10491, Femdata: MeshCell cell10492)
{
  int _t0493 = extractFemItem(CellIndex(Mesh), int, cell10491);
  int _t0494 = extractFemItem(CellIndex(Mesh), int, cell10492);
  bool _t0495 = prim !=0086 (_t0493, _t0494);
  return _t0495;
}
function bool#0 ==0496 (Femdata: MeshCell cell10491, Femdata: MeshCell cell10492)
{
  int _t0497 = extractFemItem(CellIndex(Mesh), int, cell10491);
  int _t0498 = extractFemItem(CellIndex(Mesh), int, cell10492);
  bool _t0499 = prim ==0082 (_t0497, _t0498);
  return _t0499;
}
function Femdata: MeshPos#0 findPos049A (Femdata: Mesh mesh049B, vec2 pos049C)
{
  real _t049D = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t049E = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  xn049F = [_t049D, _t049E];
  newtonInt04A0 = 0;
  cellInt04A1 = extractFemItem(StartCell(Mesh), int, mesh049B);
  int _t04A2 = extractFemItem(NumCell(Mesh), int, mesh049B);
  int _t04A3 = 1;
  numCell04A4 = prim -0024 (_t04A2, _t04A3);
  yayCells04A5 = extractFemItem2(NearbyCell(File=spat.in)(Mesh), vec2, mesh049B, pos049C : vec2);
  foreach cellItter04A6 in yayCells04A5 {
    cellInt04A1 = cellItter04A6;
    field(2)[2] _t04A7 = femField(mesh049B,cellInt04A1,field(2)[2],Transform,);
    field(2)[2,2] _t04A8 = prim ∇⊗00AD<#∞; %2; $[]; %2> (_t04A7);
    field(2)[2,2] _t04A9 = prim inv015B<#∞; %2> (_t04A8);
    real _t04AA = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    real _t04AB = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    vec2 _t04AC = [_t04AA, _t04AB];
    A04AD = prim @00A5<#∞; %2; $[2,2]> (_t04A9, _t04AC);
    int _t04AE = 0;
    int _t04AF = 16;
    int[] _t04B0 = prim $range01C3 (_t04AE, _t04AF);
    foreach newtonItter04D3 in _t04B0 {
      field(2)[2] _t04B1 = femField(mesh049B,cellInt04A1,field(2)[2],Transform,);
      field(2)[2] _t04B2 = prim -002E<#∞; %2; $[2]> (_t04B1, pos049C);
      field(2)[2] _t04B3 = prim •00D4<#∞; %2; $[2,2]; $[2]; $[2]> (A04AD, _t04B2);
      delta04B4 = prim @00A5<#∞; %2; $[2]> (_t04B3, xn049F);
      xn049F = prim -0026<$[2]> (xn049F, delta04B4);
      real _t04B5 = 0.1e-7;
      real _t04B6 = 0.1e-7;
      real _t04B7 = prim *0034 (_t04B5, _t04B6);
      real _t04B8 = prim •00CE<$[2]; $[2]; $[]> (delta04B4, delta04B4);
      bool _t04B9 = prim >=007E (_t04B7, _t04B8);
      if _t04B9 {
        real _t04BA = 0.1e1;
        real _t04BB = 0.1e-8;
        real _t04BC = prim +0017<$[]> (_t04BA, _t04BB);
        real _t04BD = 0.1e1;
        real _t04BE = 0.1e1;
        vec2 _t04BF = [_t04BD, _t04BE];
        real _t04C0 = prim •00CE<$[2]; $[2]; $[]> (_t04BF, xn049F);
        bool _t04C1 = prim >0080 (_t04BC, _t04C0);
        real _t04C2 = 0.1e-8;
        real _t04C3 = 0.1e-8;
        vec2 _t04C4 = [_t04C2, _t04C3];
        vec2 _t04C5 = prim +0017<$[2]> (_t04C4, xn049F);
        real _t04C6 = _t04C5[0];
        real _t04C7 = -0.e0;
        bool _t04C8 = prim >0080 (_t04C6, _t04C7);
        real _t04C9 = 0.1e-8;
        real _t04CA = 0.1e-8;
        vec2 _t04CB = [_t04C9, _t04CA];
        vec2 _t04CC = prim +0017<$[2]> (_t04CB, xn049F);
        real _t04CD = _t04CC[1];
        real _t04CE = -0.e0;
        bool _t04CF = prim >0080 (_t04CD, _t04CE);
        bool _t04D0 = prim $and01C4 (_t04C8, _t04CF);
        bool _t04D1 = prim $and01C4 (_t04C1, _t04D0);
        if _t04D1 {
          Femdata: MeshPos _t04D2 = extractFemItemN((mesh049B, cellInt04A1, xn049F, pos049C),AllBuild(MeshPos),);
          return _t04D2;
        }
      }
    }
  }
  string _t04D4 = "Bad end 2";
  string _t04D5 = "\n";
  print (_t04D4, _t04D5);
  Femdata: MeshPos _t04D6 = extractFemItemN((mesh049B),InvalidBuild(MeshPos),);
  return _t04D6;
}
function Femdata: RefCell#0 refcell04D7 (Femdata: Mesh arg004D8)
{
  Femdata: RefCell _t04D9 = extractFemItem(RefCell(Mesh), Femdata: RefCell, arg004D8);
  return _t04D9;
}
function Femdata: MeshCell[]#0 cells04DA (Femdata: Mesh arg004DB)
{
  Femdata: MeshCell[] _t04DC = extractFemItem(Cells(Mesh), Femdata: MeshCell[], arg004DB);
  return _t04DC;
}
function Femdata: MeshCell[]#0 cells04DD (Femdata: Mesh arg004DB)
{
  int _t04DE = 0;
  int _t04DF = extractFemItem(NumCell(Mesh), int, arg004DB);
  int[] _t04E0 = prim $range01C3 (_t04DE, _t04DF);
  Femdata: MeshCell[] accum04E3 = {};
  foreach i04E1 in _t04E0 {
    Femdata: MeshCell _t04E2 = loadFem(MeshCell, arg004DB, i04E1);
    accum04E3 = prim @0010<Femdata: MeshCell> (accum04E3, _t04E2);
  }
  return accum04E3;
}
function int#0 numCell04E4 (Femdata: Mesh arg004D8)
{
  int _t04E5 = extractFemItem(NumCell(Mesh), int, arg004D8);
  return _t04E5;
}
function tensor[2,2,2,2]#0 msh_transform_304E6 (vec2 pos04E7, int cell04E8, Femdata: Mesh mesh04E9)
{
  field(2)[2] _t04EA = femField(mesh04E9,cell04E8,field(2)[2],Transform,);
  field(2)[2,2] _t04EB = prim ∇⊗00AD<#∞; %2; $[]; %2> (_t04EA);
  field(2)[2,2,2] _t04EC = prim ∇⊗00AD<#∞; %2; $[2]; %2> (_t04EB);
  field(2)[2,2,2,2] _t04ED = prim ∇⊗00AD<#∞; %2; $[2,2]; %2> (_t04EC);
  tensor[2,2,2,2] _t04EE = prim @00A5<#∞; %2; $[2,2,2,2]> (_t04ED, pos04E7);
  return _t04EE;
}
function tensor[2,2,2]#0 msh_transform_204EF (vec2 pos04E7, int cell04E8, Femdata: Mesh mesh04E9)
{
  field(2)[2] _t04F0 = femField(mesh04E9,cell04E8,field(2)[2],Transform,);
  field(2)[2,2] _t04F1 = prim ∇⊗00AD<#∞; %2; $[]; %2> (_t04F0);
  field(2)[2,2,2] _t04F2 = prim ∇⊗00AD<#∞; %2; $[2]; %2> (_t04F1);
  tensor[2,2,2] _t04F3 = prim @00A5<#∞; %2; $[2,2,2]> (_t04F2, pos04E7);
  return _t04F3;
}
function tensor[2,2]#0 msh_transform_104F4 (vec2 pos04E7, int cell04E8, Femdata: Mesh mesh04E9)
{
  field(2)[2] _t04F5 = femField(mesh04E9,cell04E8,field(2)[2],Transform,);
  field(2)[2,2] _t04F6 = prim ∇⊗00AD<#∞; %2; $[]; %2> (_t04F5);
  tensor[2,2] _t04F7 = prim @00A5<#∞; %2; $[2,2]> (_t04F6, pos04E7);
  return _t04F7;
}
function vec2#2 msh_transform_004F8 (vec2 pos04E7, int cell04E8, Femdata: Mesh mesh04E9)
{
  field(2)[2] _t04F9 = femField(mesh04E9,cell04E8,field(2)[2],Transform,);
  vec2 _t04FA = prim @00A5<#∞; %2; $[2]> (_t04F9, pos04E7);
  return _t04FA;
}
function Femdata: MeshPos#5 _msh_newtonInverse04FB (vec2 pos04FC, int cellInt04FD, Femdata: Mesh mesh04FE)
{
  real _t04FF = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t0500 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  xn0501 = [_t04FF, _t0500];
  field(2)[2] _t0502 = femField(mesh04FE,cellInt04FD,field(2)[2],Transform,);
  field(2)[2,2] _t0503 = prim ∇⊗00AD<#∞; %2; $[]; %2> (_t0502);
  field(2)[2,2] _t0504 = prim inv015B<#∞; %2> (_t0503);
  real _t0505 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t0506 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  vec2 _t0507 = [_t0505, _t0506];
  A0508 = prim @00A5<#∞; %2; $[2,2]> (_t0504, _t0507);
  int _t0509 = 0;
  int _t050A = 16;
  int[] _t050B = prim $range01C3 (_t0509, _t050A);
  foreach itter052F in _t050B {
    field(2)[2] _t050C = femField(mesh04FE,cellInt04FD,field(2)[2],Transform,);
    field(2)[2] _t050D = prim -002E<#∞; %2; $[2]> (_t050C, pos04FC);
    field(2)[2] _t050E = prim •00D4<#∞; %2; $[2,2]; $[2]; $[2]> (A0508, _t050D);
    delta050F = prim @00A5<#∞; %2; $[2]> (_t050E, xn0501);
    xn0501 = prim -0026<$[2]> (xn0501, delta050F);
    real _t0510 = 0.1e-7;
    real _t0511 = 0.1e-7;
    real _t0512 = prim *0034 (_t0510, _t0511);
    real _t0513 = prim •00CE<$[2]; $[2]; $[]> (delta050F, delta050F);
    bool _t0514 = prim >=007E (_t0512, _t0513);
    if _t0514 {
      real _t0515 = 0.1e1;
      real _t0516 = 0.1e-8;
      real _t0517 = prim +0017<$[]> (_t0515, _t0516);
      real _t0518 = 0.1e1;
      real _t0519 = 0.1e1;
      vec2 _t051A = [_t0518, _t0519];
      real _t051B = prim •00CE<$[2]; $[2]; $[]> (_t051A, xn0501);
      bool _t051C = prim >0080 (_t0517, _t051B);
      real _t051D = 0.1e-8;
      real _t051E = 0.1e-8;
      vec2 _t051F = [_t051D, _t051E];
      vec2 _t0520 = prim +0017<$[2]> (_t051F, xn0501);
      real _t0521 = _t0520[0];
      real _t0522 = -0.e0;
      bool _t0523 = prim >0080 (_t0521, _t0522);
      real _t0524 = 0.1e-8;
      real _t0525 = 0.1e-8;
      vec2 _t0526 = [_t0524, _t0525];
      vec2 _t0527 = prim +0017<$[2]> (_t0526, xn0501);
      real _t0528 = _t0527[1];
      real _t0529 = -0.e0;
      bool _t052A = prim >0080 (_t0528, _t0529);
      bool _t052B = prim $and01C4 (_t0523, _t052A);
      bool _t052C = prim $and01C4 (_t051C, _t052B);
      if _t052C {
        Femdata: MeshPos _t052D = extractFemItemN((mesh04FE, cellInt04FD, xn0501, pos04FC),AllBuild(MeshPos),);
        return _t052D;
      } else {
        Femdata: MeshPos _t052E = extractFemItemN((mesh04FE),InvalidBuild(MeshPos),);
        return _t052E;
      }
    }
  }
  Femdata: MeshPos _t0530 = extractFemItemN((mesh04FE),InvalidBuild(MeshPos),);
  return _t0530;
}
function Femdata: MeshPos#0 _mesh_pos_msh_build_world_pos0531 (Femdata: MeshPos pos0532)
{
  bool _t0533 = extractFemItem(WorldTest(MeshPos), bool, pos0532);
  if _t0533 {
    vec2 _t0534 = extractFemItem(RefPos(MeshPos), vec2, pos0532);
    int _t0535 = extractFemItem(CellIndex(MeshPos), int, pos0532);
    Femdata: Mesh _t0536 = extractFem(pos0532, Mesh);
    vec2 _t0537 = func msh_transform_004F8 (_t0534, _t0535, _t0536);
    Femdata: MeshPos _t0538 = extractFemItemN((pos0532, _t0537),NewWorld(MeshPos),);
    return _t0538;
  } else {
    return pos0532;
  }
}
function vec2#0 worldPos0539 (Femdata: MeshPos pos0532)
{
  vec2 _t053A = extractFemItem(RefPos(MeshPos), vec2, pos0532);
  int _t053B = extractFemItem(CellIndex(MeshPos), int, pos0532);
  Femdata: Mesh _t053C = extractFem(pos0532, Mesh);
  vec2 _t053D = func msh_transform_004F8 (_t053A, _t053B, _t053C);
  return _t053D;
}
function Femdata: MeshPos#0 $exitPos053E (Femdata: Mesh mesh053F, int cellId0540, vec2 refPos0541, vec2 dPos0542, real[2] time0543)
{
  int _t0544 = -1;
  real _t0545 = time0543[1];
  int _t0546 = prim $r2i01B7 (_t0545);
  int[2] _t0548 = func nextCell40547 (_t0546, cellId0540, mesh053F);
  int _t0549 = 0;
  int _t054A = prim $sub01C0<int; %2> (_t0548, _t0549);
  bool _t054B = prim !=0086 (_t0544, _t054A);
  if _t054B {
    real _t054C = time0543[1];
    int _t054D = prim $r2i01B7 (_t054C);
    int[2] _t054E = func nextCell40547 (_t054D, cellId0540, mesh053F);
    int _t054F = 0;
    int _t0550 = prim $sub01C0<int; %2> (_t054E, _t054F);
    real _t0551 = 0.1e1;
    real _t0552 = 0.e0;
    vec2 _t0553 = [_t0551, _t0552];
    real _t0554 = 0.e0;
    real _t0555 = 0.e0;
    vec2 _t0556 = [_t0554, _t0555];
    real _t0557 = 0.e0;
    real _t0558 = 0.e0;
    vec2 _t0559 = [_t0557, _t0558];
    vec2[3] _t055A = {_t0553, _t0556, _t0559};
    real _t055B = time0543[1];
    int _t055C = prim $r2i01B7 (_t055B);
    int[2] _t055D = func nextCell40547 (_t055C, cellId0540, mesh053F);
    int _t055E = 1;
    int _t055F = prim $sub01C0<int; %2> (_t055D, _t055E);
    vec2 _t0560 = prim $sub01C0<vec2; %3> (_t055A, _t055F);
    real _t0561 = -0.1e1;
    real _t0562 = 0.1e1;
    vec2 _t0563 = [_t0561, _t0562];
    real _t0564 = 0.e0;
    real _t0565 = 0.1e1;
    vec2 _t0566 = [_t0564, _t0565];
    real _t0567 = 0.1e1;
    real _t0568 = 0.e0;
    vec2 _t0569 = [_t0567, _t0568];
    vec2[3] _t056A = {_t0563, _t0566, _t0569};
    real _t056B = time0543[1];
    int _t056C = prim $r2i01B7 (_t056B);
    int[2] _t056D = func nextCell40547 (_t056C, cellId0540, mesh053F);
    int _t056E = 1;
    int _t056F = prim $sub01C0<int; %2> (_t056D, _t056E);
    vec2 _t0570 = prim $sub01C0<vec2; %3> (_t056A, _t056F);
    real _t0571 = time0543[0];
    vec2 _t0572 = prim *0036<$[2]> (_t0571, dPos0542);
    vec2 _t0573 = prim +0017<$[2]> (_t0572, refPos0541);
    real _t0574 = _t0573[0];
    real _t0575 = time0543[0];
    vec2 _t0576 = prim *0036<$[2]> (_t0575, dPos0542);
    vec2 _t0577 = prim +0017<$[2]> (_t0576, refPos0541);
    real _t0578 = _t0577[1];
    real[2] _t0579 = {_t0574, _t0578};
    int _t057A = 1;
    int _t057B = 1;
    int _t057C = 0;
    int[3] _t057D = {_t057A, _t057B, _t057C};
    real _t057E = time0543[1];
    int _t057F = prim $r2i01B7 (_t057E);
    int _t0580 = prim $sub01C0<int; %3> (_t057D, _t057F);
    real _t0581 = prim $sub01C0<real; %2> (_t0579, _t0580);
    real _t0582 = 0.1e1;
    real _t0583 = 0.e0;
    real[2] _t0584 = {_t0582, _t0583};
    real _t0585 = 0.e0;
    real _t0586 = 0.e0;
    real[2] _t0587 = {_t0585, _t0586};
    real _t0588 = 0.e0;
    real _t0589 = 0.e0;
    real[2] _t058A = {_t0588, _t0589};
    real[2][3] _t058B = {_t0584, _t0587, _t058A};
    real _t058C = time0543[1];
    int _t058D = prim $r2i01B7 (_t058C);
    real[2] _t058E = prim $sub01C0<real[2]; %3> (_t058B, _t058D);
    int _t058F = 1;
    int _t0590 = 1;
    int _t0591 = 0;
    int[3] _t0592 = {_t058F, _t0590, _t0591};
    real _t0593 = time0543[1];
    int _t0594 = prim $r2i01B7 (_t0593);
    int _t0595 = prim $sub01C0<int; %3> (_t0592, _t0594);
    real _t0596 = prim $sub01C0<real; %2> (_t058E, _t0595);
    real _t0597 = prim -0026<$[]> (_t0581, _t0596);
    real _t0598 = -0.1e1;
    real _t0599 = 0.1e1;
    real[2] _t059A = {_t0598, _t0599};
    real _t059B = 0.e0;
    real _t059C = 0.1e1;
    real[2] _t059D = {_t059B, _t059C};
    real _t059E = 0.1e1;
    real _t059F = 0.e0;
    real[2] _t05A0 = {_t059E, _t059F};
    real[2][3] _t05A1 = {_t059A, _t059D, _t05A0};
    real _t05A2 = time0543[1];
    int _t05A3 = prim $r2i01B7 (_t05A2);
    real[2] _t05A4 = prim $sub01C0<real[2]; %3> (_t05A1, _t05A3);
    int _t05A5 = 1;
    int _t05A6 = 1;
    int _t05A7 = 0;
    int[3] _t05A8 = {_t05A5, _t05A6, _t05A7};
    real _t05A9 = time0543[1];
    int _t05AA = prim $r2i01B7 (_t05A9);
    int _t05AB = prim $sub01C0<int; %3> (_t05A8, _t05AA);
    real _t05AC = prim $sub01C0<real; %2> (_t05A4, _t05AB);
    real _t05AD = prim /0055 (_t0597, _t05AC);
    vec2 _t05AE = prim *0038<$[2]> (_t0570, _t05AD);
    vec2 _t05AF = prim +0017<$[2]> (_t0560, _t05AE);
    real _t05B0 = time0543[1];
    int _t05B1 = prim $r2i01B7 (_t05B0);
    int[2] _t05B2 = func nextCell40547 (_t05B1, cellId0540, mesh053F);
    int _t05B3 = 1;
    int _t05B4 = prim $sub01C0<int; %2> (_t05B2, _t05B3);
    Femdata: MeshPos _t05B5 = extractFemItemN((mesh053F, _t0550, _t05AF, _t05B4),RefBuild(Mesh),);
    return _t05B5;
  } else {
    real _t05B6 = time0543[0];
    vec2 _t05B7 = prim *0036<$[2]> (_t05B6, dPos0542);
    vec2 _t05B8 = prim +0017<$[2]> (_t05B7, refPos0541);
    Femdata: MeshPos _t05B9 = extractFemItemN((mesh053F, _t05B8),InvalidBuildBoundary(MeshPos),);
    return _t05B9;
  }
}
function int[2]#5 nextCell40547 (int faceIdx05BA, int cell05BB, Femdata: Mesh mesh05BC)
{
  int _t05BD = 6;
  int _t05BE = prim *0033 (cell05BB, _t05BD);
  int _t05BF = 2;
  int _t05C0 = prim *0033 (faceIdx05BA, _t05BF);
  int _t05C1 = prim +0015 (_t05BE, _t05C0);
  int[2] _t05C2 = extractFemItemN((mesh05BC, _t05C1),CellFaceCell(Mesh),);
  return _t05C2;
}
function vec2#0 _enter05C3 (vec2 refPos05C4, vec2 dPos05C5)
{
  real time05C6 = +inf;
  int face05C7 = -1;
  real faceTime05C8 = -inf;
  real _t05C9 = 0.1e1;
  real _t05CA = 0.e0;
  vec2 _t05CB = [_t05C9, _t05CA];
  vec2 _t05CC = prim -0026<$[2]> (_t05CB, refPos05C4);
  real _t05CD = -0.1e1;
  real _t05CE = 0.1e1;
  vec2 _t05CF = [_t05CD, _t05CE];
  real _t05D0 = -0.1e1;
  real _t05D1 = 0.1e1;
  vec2 _t05D2 = [_t05D0, _t05D1];
  real _t05D3 = prim ×00BD (dPos05C5, _t05D2);
  vec2 _t05D4 = prim /0057<$[2]> (_t05CF, _t05D3);
  real _t05D5 = prim ×00BD (_t05CC, _t05D4);
  real _t05D6 = -0.1e-15;
  bool _t05D7 = prim >=007E (_t05D5, _t05D6);
  real _t05D8 = 0.1e1;
  real _t05D9 = 0.e0;
  vec2 _t05DA = [_t05D8, _t05D9];
  vec2 _t05DB = prim -0026<$[2]> (_t05DA, refPos05C4);
  real _t05DC = -0.1e1;
  real _t05DD = 0.1e1;
  vec2 _t05DE = [_t05DC, _t05DD];
  real _t05DF = -0.1e1;
  real _t05E0 = 0.1e1;
  vec2 _t05E1 = [_t05DF, _t05E0];
  real _t05E2 = prim ×00BD (dPos05C5, _t05E1);
  vec2 _t05E3 = prim /0057<$[2]> (_t05DE, _t05E2);
  real _t05E4 = prim ×00BD (_t05DB, _t05E3);
  bool _t05E5 = prim >0080 (time05C6, _t05E4);
  real _t05E6 = -0.1e1;
  real _t05E7 = 0.1e1;
  vec2 _t05E8 = [_t05E6, _t05E7];
  real _t05E9 = prim ×00BD (dPos05C5, _t05E8);
  real _t05EA = prim |()|00B5<$[]> (_t05E9);
  real _t05EB = 0.1e-20;
  bool _t05EC = prim >=007E (_t05EA, _t05EB);
  bool _t05ED = prim $and01C4 (_t05E5, _t05EC);
  bool _t05EE = prim $and01C4 (_t05D7, _t05ED);
  if _t05EE {
    real _t05EF = 0.1e1;
    real _t05F0 = 0.1e-8;
    real _t05F1 = prim +0017<$[]> (_t05EF, _t05F0);
    real _t05F2 = 0.1e1;
    real _t05F3 = 0.1e1;
    vec2 _t05F4 = [_t05F2, _t05F3];
    real _t05F5 = 0.1e1;
    real _t05F6 = 0.e0;
    vec2 _t05F7 = [_t05F5, _t05F6];
    vec2 _t05F8 = prim -0026<$[2]> (_t05F7, refPos05C4);
    real _t05F9 = -0.1e1;
    real _t05FA = 0.1e1;
    vec2 _t05FB = [_t05F9, _t05FA];
    real _t05FC = -0.1e1;
    real _t05FD = 0.1e1;
    vec2 _t05FE = [_t05FC, _t05FD];
    real _t05FF = prim ×00BD (dPos05C5, _t05FE);
    vec2 _t0600 = prim /0057<$[2]> (_t05FB, _t05FF);
    real _t0601 = prim ×00BD (_t05F8, _t0600);
    vec2 _t0602 = prim *0038<$[2]> (dPos05C5, _t0601);
    vec2 _t0603 = prim +0017<$[2]> (refPos05C4, _t0602);
    real _t0604 = prim •00CE<$[2]; $[2]; $[]> (_t05F4, _t0603);
    bool _t0605 = prim >0080 (_t05F1, _t0604);
    real _t0606 = 0.1e-8;
    real _t0607 = 0.1e-8;
    vec2 _t0608 = [_t0606, _t0607];
    real _t0609 = 0.1e1;
    real _t060A = 0.e0;
    vec2 _t060B = [_t0609, _t060A];
    vec2 _t060C = prim -0026<$[2]> (_t060B, refPos05C4);
    real _t060D = -0.1e1;
    real _t060E = 0.1e1;
    vec2 _t060F = [_t060D, _t060E];
    real _t0610 = -0.1e1;
    real _t0611 = 0.1e1;
    vec2 _t0612 = [_t0610, _t0611];
    real _t0613 = prim ×00BD (dPos05C5, _t0612);
    vec2 _t0614 = prim /0057<$[2]> (_t060F, _t0613);
    real _t0615 = prim ×00BD (_t060C, _t0614);
    vec2 _t0616 = prim *0038<$[2]> (dPos05C5, _t0615);
    vec2 _t0617 = prim +0017<$[2]> (refPos05C4, _t0616);
    vec2 _t0618 = prim +0017<$[2]> (_t0608, _t0617);
    real _t0619 = _t0618[0];
    real _t061A = -0.e0;
    bool _t061B = prim >0080 (_t0619, _t061A);
    real _t061C = 0.1e-8;
    real _t061D = 0.1e-8;
    vec2 _t061E = [_t061C, _t061D];
    real _t061F = 0.1e1;
    real _t0620 = 0.e0;
    vec2 _t0621 = [_t061F, _t0620];
    vec2 _t0622 = prim -0026<$[2]> (_t0621, refPos05C4);
    real _t0623 = -0.1e1;
    real _t0624 = 0.1e1;
    vec2 _t0625 = [_t0623, _t0624];
    real _t0626 = -0.1e1;
    real _t0627 = 0.1e1;
    vec2 _t0628 = [_t0626, _t0627];
    real _t0629 = prim ×00BD (dPos05C5, _t0628);
    vec2 _t062A = prim /0057<$[2]> (_t0625, _t0629);
    real _t062B = prim ×00BD (_t0622, _t062A);
    vec2 _t062C = prim *0038<$[2]> (dPos05C5, _t062B);
    vec2 _t062D = prim +0017<$[2]> (refPos05C4, _t062C);
    vec2 _t062E = prim +0017<$[2]> (_t061E, _t062D);
    real _t062F = _t062E[1];
    real _t0630 = -0.e0;
    bool _t0631 = prim >0080 (_t062F, _t0630);
    bool _t0632 = prim $and01C4 (_t061B, _t0631);
    bool _t0633 = prim $and01C4 (_t0605, _t0632);
    if _t0633 {
      real _t0634 = 0.1e1;
      real _t0635 = 0.e0;
      vec2 _t0636 = [_t0634, _t0635];
      vec2 _t0637 = prim -0026<$[2]> (_t0636, refPos05C4);
      real _t0638 = -0.1e1;
      real _t0639 = 0.1e1;
      vec2 _t063A = [_t0638, _t0639];
      real _t063B = -0.1e1;
      real _t063C = 0.1e1;
      vec2 _t063D = [_t063B, _t063C];
      real _t063E = prim ×00BD (dPos05C5, _t063D);
      vec2 _t063F = prim /0057<$[2]> (_t063A, _t063E);
      time05C6 = prim ×00BD (_t0637, _t063F);
      face05C7 = 0;
    }
  }
  real _t0640 = 0.e0;
  real _t0641 = 0.e0;
  vec2 _t0642 = [_t0640, _t0641];
  vec2 _t0643 = prim -0026<$[2]> (_t0642, refPos05C4);
  real _t0644 = 0.e0;
  real _t0645 = 0.1e1;
  vec2 _t0646 = [_t0644, _t0645];
  real _t0647 = 0.e0;
  real _t0648 = 0.1e1;
  vec2 _t0649 = [_t0647, _t0648];
  real _t064A = prim ×00BD (dPos05C5, _t0649);
  vec2 _t064B = prim /0057<$[2]> (_t0646, _t064A);
  real _t064C = prim ×00BD (_t0643, _t064B);
  real _t064D = -0.1e-15;
  bool _t064E = prim >=007E (_t064C, _t064D);
  real _t064F = 0.e0;
  real _t0650 = 0.e0;
  vec2 _t0651 = [_t064F, _t0650];
  vec2 _t0652 = prim -0026<$[2]> (_t0651, refPos05C4);
  real _t0653 = 0.e0;
  real _t0654 = 0.1e1;
  vec2 _t0655 = [_t0653, _t0654];
  real _t0656 = 0.e0;
  real _t0657 = 0.1e1;
  vec2 _t0658 = [_t0656, _t0657];
  real _t0659 = prim ×00BD (dPos05C5, _t0658);
  vec2 _t065A = prim /0057<$[2]> (_t0655, _t0659);
  real _t065B = prim ×00BD (_t0652, _t065A);
  bool _t065C = prim >0080 (time05C6, _t065B);
  real _t065D = 0.e0;
  real _t065E = 0.1e1;
  vec2 _t065F = [_t065D, _t065E];
  real _t0660 = prim ×00BD (dPos05C5, _t065F);
  real _t0661 = prim |()|00B5<$[]> (_t0660);
  real _t0662 = 0.1e-20;
  bool _t0663 = prim >=007E (_t0661, _t0662);
  bool _t0664 = prim $and01C4 (_t065C, _t0663);
  bool _t0665 = prim $and01C4 (_t064E, _t0664);
  if _t0665 {
    real _t0666 = 0.1e1;
    real _t0667 = 0.1e-8;
    real _t0668 = prim +0017<$[]> (_t0666, _t0667);
    real _t0669 = 0.1e1;
    real _t066A = 0.1e1;
    vec2 _t066B = [_t0669, _t066A];
    real _t066C = 0.e0;
    real _t066D = 0.e0;
    vec2 _t066E = [_t066C, _t066D];
    vec2 _t066F = prim -0026<$[2]> (_t066E, refPos05C4);
    real _t0670 = 0.e0;
    real _t0671 = 0.1e1;
    vec2 _t0672 = [_t0670, _t0671];
    real _t0673 = 0.e0;
    real _t0674 = 0.1e1;
    vec2 _t0675 = [_t0673, _t0674];
    real _t0676 = prim ×00BD (dPos05C5, _t0675);
    vec2 _t0677 = prim /0057<$[2]> (_t0672, _t0676);
    real _t0678 = prim ×00BD (_t066F, _t0677);
    vec2 _t0679 = prim *0038<$[2]> (dPos05C5, _t0678);
    vec2 _t067A = prim +0017<$[2]> (refPos05C4, _t0679);
    real _t067B = prim •00CE<$[2]; $[2]; $[]> (_t066B, _t067A);
    bool _t067C = prim >0080 (_t0668, _t067B);
    real _t067D = 0.1e-8;
    real _t067E = 0.1e-8;
    vec2 _t067F = [_t067D, _t067E];
    real _t0680 = 0.e0;
    real _t0681 = 0.e0;
    vec2 _t0682 = [_t0680, _t0681];
    vec2 _t0683 = prim -0026<$[2]> (_t0682, refPos05C4);
    real _t0684 = 0.e0;
    real _t0685 = 0.1e1;
    vec2 _t0686 = [_t0684, _t0685];
    real _t0687 = 0.e0;
    real _t0688 = 0.1e1;
    vec2 _t0689 = [_t0687, _t0688];
    real _t068A = prim ×00BD (dPos05C5, _t0689);
    vec2 _t068B = prim /0057<$[2]> (_t0686, _t068A);
    real _t068C = prim ×00BD (_t0683, _t068B);
    vec2 _t068D = prim *0038<$[2]> (dPos05C5, _t068C);
    vec2 _t068E = prim +0017<$[2]> (refPos05C4, _t068D);
    vec2 _t068F = prim +0017<$[2]> (_t067F, _t068E);
    real _t0690 = _t068F[0];
    real _t0691 = -0.e0;
    bool _t0692 = prim >0080 (_t0690, _t0691);
    real _t0693 = 0.1e-8;
    real _t0694 = 0.1e-8;
    vec2 _t0695 = [_t0693, _t0694];
    real _t0696 = 0.e0;
    real _t0697 = 0.e0;
    vec2 _t0698 = [_t0696, _t0697];
    vec2 _t0699 = prim -0026<$[2]> (_t0698, refPos05C4);
    real _t069A = 0.e0;
    real _t069B = 0.1e1;
    vec2 _t069C = [_t069A, _t069B];
    real _t069D = 0.e0;
    real _t069E = 0.1e1;
    vec2 _t069F = [_t069D, _t069E];
    real _t06A0 = prim ×00BD (dPos05C5, _t069F);
    vec2 _t06A1 = prim /0057<$[2]> (_t069C, _t06A0);
    real _t06A2 = prim ×00BD (_t0699, _t06A1);
    vec2 _t06A3 = prim *0038<$[2]> (dPos05C5, _t06A2);
    vec2 _t06A4 = prim +0017<$[2]> (refPos05C4, _t06A3);
    vec2 _t06A5 = prim +0017<$[2]> (_t0695, _t06A4);
    real _t06A6 = _t06A5[1];
    real _t06A7 = -0.e0;
    bool _t06A8 = prim >0080 (_t06A6, _t06A7);
    bool _t06A9 = prim $and01C4 (_t0692, _t06A8);
    bool _t06AA = prim $and01C4 (_t067C, _t06A9);
    if _t06AA {
      real _t06AB = 0.e0;
      real _t06AC = 0.e0;
      vec2 _t06AD = [_t06AB, _t06AC];
      vec2 _t06AE = prim -0026<$[2]> (_t06AD, refPos05C4);
      real _t06AF = 0.e0;
      real _t06B0 = 0.1e1;
      vec2 _t06B1 = [_t06AF, _t06B0];
      real _t06B2 = 0.e0;
      real _t06B3 = 0.1e1;
      vec2 _t06B4 = [_t06B2, _t06B3];
      real _t06B5 = prim ×00BD (dPos05C5, _t06B4);
      vec2 _t06B6 = prim /0057<$[2]> (_t06B1, _t06B5);
      time05C6 = prim ×00BD (_t06AE, _t06B6);
      face05C7 = 1;
    }
  }
  real _t06B7 = 0.e0;
  real _t06B8 = 0.e0;
  vec2 _t06B9 = [_t06B7, _t06B8];
  vec2 _t06BA = prim -0026<$[2]> (_t06B9, refPos05C4);
  real _t06BB = 0.1e1;
  real _t06BC = 0.e0;
  vec2 _t06BD = [_t06BB, _t06BC];
  real _t06BE = 0.1e1;
  real _t06BF = 0.e0;
  vec2 _t06C0 = [_t06BE, _t06BF];
  real _t06C1 = prim ×00BD (dPos05C5, _t06C0);
  vec2 _t06C2 = prim /0057<$[2]> (_t06BD, _t06C1);
  real _t06C3 = prim ×00BD (_t06BA, _t06C2);
  real _t06C4 = -0.1e-15;
  bool _t06C5 = prim >=007E (_t06C3, _t06C4);
  real _t06C6 = 0.e0;
  real _t06C7 = 0.e0;
  vec2 _t06C8 = [_t06C6, _t06C7];
  vec2 _t06C9 = prim -0026<$[2]> (_t06C8, refPos05C4);
  real _t06CA = 0.1e1;
  real _t06CB = 0.e0;
  vec2 _t06CC = [_t06CA, _t06CB];
  real _t06CD = 0.1e1;
  real _t06CE = 0.e0;
  vec2 _t06CF = [_t06CD, _t06CE];
  real _t06D0 = prim ×00BD (dPos05C5, _t06CF);
  vec2 _t06D1 = prim /0057<$[2]> (_t06CC, _t06D0);
  real _t06D2 = prim ×00BD (_t06C9, _t06D1);
  bool _t06D3 = prim >0080 (time05C6, _t06D2);
  real _t06D4 = 0.1e1;
  real _t06D5 = 0.e0;
  vec2 _t06D6 = [_t06D4, _t06D5];
  real _t06D7 = prim ×00BD (dPos05C5, _t06D6);
  real _t06D8 = prim |()|00B5<$[]> (_t06D7);
  real _t06D9 = 0.1e-20;
  bool _t06DA = prim >=007E (_t06D8, _t06D9);
  bool _t06DB = prim $and01C4 (_t06D3, _t06DA);
  bool _t06DC = prim $and01C4 (_t06C5, _t06DB);
  if _t06DC {
    real _t06DD = 0.1e1;
    real _t06DE = 0.1e-8;
    real _t06DF = prim +0017<$[]> (_t06DD, _t06DE);
    real _t06E0 = 0.1e1;
    real _t06E1 = 0.1e1;
    vec2 _t06E2 = [_t06E0, _t06E1];
    real _t06E3 = 0.e0;
    real _t06E4 = 0.e0;
    vec2 _t06E5 = [_t06E3, _t06E4];
    vec2 _t06E6 = prim -0026<$[2]> (_t06E5, refPos05C4);
    real _t06E7 = 0.1e1;
    real _t06E8 = 0.e0;
    vec2 _t06E9 = [_t06E7, _t06E8];
    real _t06EA = 0.1e1;
    real _t06EB = 0.e0;
    vec2 _t06EC = [_t06EA, _t06EB];
    real _t06ED = prim ×00BD (dPos05C5, _t06EC);
    vec2 _t06EE = prim /0057<$[2]> (_t06E9, _t06ED);
    real _t06EF = prim ×00BD (_t06E6, _t06EE);
    vec2 _t06F0 = prim *0038<$[2]> (dPos05C5, _t06EF);
    vec2 _t06F1 = prim +0017<$[2]> (refPos05C4, _t06F0);
    real _t06F2 = prim •00CE<$[2]; $[2]; $[]> (_t06E2, _t06F1);
    bool _t06F3 = prim >0080 (_t06DF, _t06F2);
    real _t06F4 = 0.1e-8;
    real _t06F5 = 0.1e-8;
    vec2 _t06F6 = [_t06F4, _t06F5];
    real _t06F7 = 0.e0;
    real _t06F8 = 0.e0;
    vec2 _t06F9 = [_t06F7, _t06F8];
    vec2 _t06FA = prim -0026<$[2]> (_t06F9, refPos05C4);
    real _t06FB = 0.1e1;
    real _t06FC = 0.e0;
    vec2 _t06FD = [_t06FB, _t06FC];
    real _t06FE = 0.1e1;
    real _t06FF = 0.e0;
    vec2 _t0700 = [_t06FE, _t06FF];
    real _t0701 = prim ×00BD (dPos05C5, _t0700);
    vec2 _t0702 = prim /0057<$[2]> (_t06FD, _t0701);
    real _t0703 = prim ×00BD (_t06FA, _t0702);
    vec2 _t0704 = prim *0038<$[2]> (dPos05C5, _t0703);
    vec2 _t0705 = prim +0017<$[2]> (refPos05C4, _t0704);
    vec2 _t0706 = prim +0017<$[2]> (_t06F6, _t0705);
    real _t0707 = _t0706[0];
    real _t0708 = -0.e0;
    bool _t0709 = prim >0080 (_t0707, _t0708);
    real _t070A = 0.1e-8;
    real _t070B = 0.1e-8;
    vec2 _t070C = [_t070A, _t070B];
    real _t070D = 0.e0;
    real _t070E = 0.e0;
    vec2 _t070F = [_t070D, _t070E];
    vec2 _t0710 = prim -0026<$[2]> (_t070F, refPos05C4);
    real _t0711 = 0.1e1;
    real _t0712 = 0.e0;
    vec2 _t0713 = [_t0711, _t0712];
    real _t0714 = 0.1e1;
    real _t0715 = 0.e0;
    vec2 _t0716 = [_t0714, _t0715];
    real _t0717 = prim ×00BD (dPos05C5, _t0716);
    vec2 _t0718 = prim /0057<$[2]> (_t0713, _t0717);
    real _t0719 = prim ×00BD (_t0710, _t0718);
    vec2 _t071A = prim *0038<$[2]> (dPos05C5, _t0719);
    vec2 _t071B = prim +0017<$[2]> (refPos05C4, _t071A);
    vec2 _t071C = prim +0017<$[2]> (_t070C, _t071B);
    real _t071D = _t071C[1];
    real _t071E = -0.e0;
    bool _t071F = prim >0080 (_t071D, _t071E);
    bool _t0720 = prim $and01C4 (_t0709, _t071F);
    bool _t0721 = prim $and01C4 (_t06F3, _t0720);
    if _t0721 {
      real _t0722 = 0.e0;
      real _t0723 = 0.e0;
      vec2 _t0724 = [_t0722, _t0723];
      vec2 _t0725 = prim -0026<$[2]> (_t0724, refPos05C4);
      real _t0726 = 0.1e1;
      real _t0727 = 0.e0;
      vec2 _t0728 = [_t0726, _t0727];
      real _t0729 = 0.1e1;
      real _t072A = 0.e0;
      vec2 _t072B = [_t0729, _t072A];
      real _t072C = prim ×00BD (dPos05C5, _t072B);
      vec2 _t072D = prim /0057<$[2]> (_t0728, _t072C);
      time05C6 = prim ×00BD (_t0725, _t072D);
      face05C7 = 2;
    }
  }
  int _t072E = -1;
  bool _t072F = prim !=0086 (face05C7, _t072E);
  if _t072F {
    real _t0730 = 0.e0;
    real _t0731 = prim max0125 (time05C6, _t0730);
    real _t0732 = (real)face05C7;
    vec2 _t0733 = [_t0731, _t0732];
    return _t0733;
  } else {
    real _t0734 = -0.1e1;
    real _t0735 = -0.1e1;
    vec2 _t0736 = [_t0734, _t0735];
    return _t0736;
  }
}
function vec2#0 _exit0737 (vec2 refPos05C4, vec2 dPos05C5, int i0738)
{
  real time0739 = +inf;
  int face073A = -1;
  real faceTime073B = -inf;
  real _t073C = 0.1e1;
  real _t073D = 0.e0;
  vec2 _t073E = [_t073C, _t073D];
  vec2 _t073F = prim -0026<$[2]> (_t073E, refPos05C4);
  real _t0740 = -0.1e1;
  real _t0741 = 0.1e1;
  vec2 _t0742 = [_t0740, _t0741];
  real _t0743 = -0.1e1;
  real _t0744 = 0.1e1;
  vec2 _t0745 = [_t0743, _t0744];
  real _t0746 = prim ×00BD (dPos05C5, _t0745);
  vec2 _t0747 = prim /0057<$[2]> (_t0742, _t0746);
  real _t0748 = prim ×00BD (_t073F, _t0747);
  real _t0749 = -0.1e-15;
  bool _t074A = prim >=007E (_t0748, _t0749);
  real _t074B = 0.1e1;
  real _t074C = 0.e0;
  vec2 _t074D = [_t074B, _t074C];
  vec2 _t074E = prim -0026<$[2]> (_t074D, refPos05C4);
  real _t074F = -0.1e1;
  real _t0750 = 0.1e1;
  vec2 _t0751 = [_t074F, _t0750];
  real _t0752 = -0.1e1;
  real _t0753 = 0.1e1;
  vec2 _t0754 = [_t0752, _t0753];
  real _t0755 = prim ×00BD (dPos05C5, _t0754);
  vec2 _t0756 = prim /0057<$[2]> (_t0751, _t0755);
  real _t0757 = prim ×00BD (_t074E, _t0756);
  bool _t0758 = prim >0080 (time0739, _t0757);
  real _t0759 = -0.1e1;
  real _t075A = 0.1e1;
  vec2 _t075B = [_t0759, _t075A];
  real _t075C = prim ×00BD (dPos05C5, _t075B);
  real _t075D = prim |()|00B5<$[]> (_t075C);
  real _t075E = 0.1e-20;
  bool _t075F = prim >=007E (_t075D, _t075E);
  bool _t0760 = prim $and01C4 (_t0758, _t075F);
  bool _t0761 = prim $and01C4 (_t074A, _t0760);
  if _t0761 {
    int _t0762 = 0;
    bool _t0763 = prim !=0086 (i0738, _t0762);
    if _t0763 {
      real _t0764 = 0.1e1;
      real _t0765 = 0.e0;
      vec2 _t0766 = [_t0764, _t0765];
      vec2 _t0767 = prim -0026<$[2]> (_t0766, refPos05C4);
      real _t0768 = -0.1e1;
      real _t0769 = 0.1e1;
      vec2 _t076A = [_t0768, _t0769];
      real _t076B = -0.1e1;
      real _t076C = 0.1e1;
      vec2 _t076D = [_t076B, _t076C];
      real _t076E = prim ×00BD (dPos05C5, _t076D);
      vec2 _t076F = prim /0057<$[2]> (_t076A, _t076E);
      time0739 = prim ×00BD (_t0767, _t076F);
      face073A = 0;
    } else {
      real _t0770 = 0.1e1;
      real _t0771 = 0.e0;
      vec2 _t0772 = [_t0770, _t0771];
      vec2 _t0773 = prim -0026<$[2]> (_t0772, refPos05C4);
      real _t0774 = -0.1e1;
      real _t0775 = 0.1e1;
      vec2 _t0776 = [_t0774, _t0775];
      real _t0777 = -0.1e1;
      real _t0778 = 0.1e1;
      vec2 _t0779 = [_t0777, _t0778];
      real _t077A = prim ×00BD (dPos05C5, _t0779);
      vec2 _t077B = prim /0057<$[2]> (_t0776, _t077A);
      faceTime073B = prim ×00BD (_t0773, _t077B);
    }
  }
  real _t077C = 0.e0;
  real _t077D = 0.e0;
  vec2 _t077E = [_t077C, _t077D];
  vec2 _t077F = prim -0026<$[2]> (_t077E, refPos05C4);
  real _t0780 = 0.e0;
  real _t0781 = 0.1e1;
  vec2 _t0782 = [_t0780, _t0781];
  real _t0783 = 0.e0;
  real _t0784 = 0.1e1;
  vec2 _t0785 = [_t0783, _t0784];
  real _t0786 = prim ×00BD (dPos05C5, _t0785);
  vec2 _t0787 = prim /0057<$[2]> (_t0782, _t0786);
  real _t0788 = prim ×00BD (_t077F, _t0787);
  real _t0789 = -0.1e-15;
  bool _t078A = prim >=007E (_t0788, _t0789);
  real _t078B = 0.e0;
  real _t078C = 0.e0;
  vec2 _t078D = [_t078B, _t078C];
  vec2 _t078E = prim -0026<$[2]> (_t078D, refPos05C4);
  real _t078F = 0.e0;
  real _t0790 = 0.1e1;
  vec2 _t0791 = [_t078F, _t0790];
  real _t0792 = 0.e0;
  real _t0793 = 0.1e1;
  vec2 _t0794 = [_t0792, _t0793];
  real _t0795 = prim ×00BD (dPos05C5, _t0794);
  vec2 _t0796 = prim /0057<$[2]> (_t0791, _t0795);
  real _t0797 = prim ×00BD (_t078E, _t0796);
  bool _t0798 = prim >0080 (time0739, _t0797);
  real _t0799 = 0.e0;
  real _t079A = 0.1e1;
  vec2 _t079B = [_t0799, _t079A];
  real _t079C = prim ×00BD (dPos05C5, _t079B);
  real _t079D = prim |()|00B5<$[]> (_t079C);
  real _t079E = 0.1e-20;
  bool _t079F = prim >=007E (_t079D, _t079E);
  bool _t07A0 = prim $and01C4 (_t0798, _t079F);
  bool _t07A1 = prim $and01C4 (_t078A, _t07A0);
  if _t07A1 {
    int _t07A2 = 1;
    bool _t07A3 = prim !=0086 (i0738, _t07A2);
    if _t07A3 {
      real _t07A4 = 0.e0;
      real _t07A5 = 0.e0;
      vec2 _t07A6 = [_t07A4, _t07A5];
      vec2 _t07A7 = prim -0026<$[2]> (_t07A6, refPos05C4);
      real _t07A8 = 0.e0;
      real _t07A9 = 0.1e1;
      vec2 _t07AA = [_t07A8, _t07A9];
      real _t07AB = 0.e0;
      real _t07AC = 0.1e1;
      vec2 _t07AD = [_t07AB, _t07AC];
      real _t07AE = prim ×00BD (dPos05C5, _t07AD);
      vec2 _t07AF = prim /0057<$[2]> (_t07AA, _t07AE);
      time0739 = prim ×00BD (_t07A7, _t07AF);
      face073A = 1;
    } else {
      real _t07B0 = 0.e0;
      real _t07B1 = 0.e0;
      vec2 _t07B2 = [_t07B0, _t07B1];
      vec2 _t07B3 = prim -0026<$[2]> (_t07B2, refPos05C4);
      real _t07B4 = 0.e0;
      real _t07B5 = 0.1e1;
      vec2 _t07B6 = [_t07B4, _t07B5];
      real _t07B7 = 0.e0;
      real _t07B8 = 0.1e1;
      vec2 _t07B9 = [_t07B7, _t07B8];
      real _t07BA = prim ×00BD (dPos05C5, _t07B9);
      vec2 _t07BB = prim /0057<$[2]> (_t07B6, _t07BA);
      faceTime073B = prim ×00BD (_t07B3, _t07BB);
    }
  }
  real _t07BC = 0.e0;
  real _t07BD = 0.e0;
  vec2 _t07BE = [_t07BC, _t07BD];
  vec2 _t07BF = prim -0026<$[2]> (_t07BE, refPos05C4);
  real _t07C0 = 0.1e1;
  real _t07C1 = 0.e0;
  vec2 _t07C2 = [_t07C0, _t07C1];
  real _t07C3 = 0.1e1;
  real _t07C4 = 0.e0;
  vec2 _t07C5 = [_t07C3, _t07C4];
  real _t07C6 = prim ×00BD (dPos05C5, _t07C5);
  vec2 _t07C7 = prim /0057<$[2]> (_t07C2, _t07C6);
  real _t07C8 = prim ×00BD (_t07BF, _t07C7);
  real _t07C9 = -0.1e-15;
  bool _t07CA = prim >=007E (_t07C8, _t07C9);
  real _t07CB = 0.e0;
  real _t07CC = 0.e0;
  vec2 _t07CD = [_t07CB, _t07CC];
  vec2 _t07CE = prim -0026<$[2]> (_t07CD, refPos05C4);
  real _t07CF = 0.1e1;
  real _t07D0 = 0.e0;
  vec2 _t07D1 = [_t07CF, _t07D0];
  real _t07D2 = 0.1e1;
  real _t07D3 = 0.e0;
  vec2 _t07D4 = [_t07D2, _t07D3];
  real _t07D5 = prim ×00BD (dPos05C5, _t07D4);
  vec2 _t07D6 = prim /0057<$[2]> (_t07D1, _t07D5);
  real _t07D7 = prim ×00BD (_t07CE, _t07D6);
  bool _t07D8 = prim >0080 (time0739, _t07D7);
  real _t07D9 = 0.1e1;
  real _t07DA = 0.e0;
  vec2 _t07DB = [_t07D9, _t07DA];
  real _t07DC = prim ×00BD (dPos05C5, _t07DB);
  real _t07DD = prim |()|00B5<$[]> (_t07DC);
  real _t07DE = 0.1e-20;
  bool _t07DF = prim >=007E (_t07DD, _t07DE);
  bool _t07E0 = prim $and01C4 (_t07D8, _t07DF);
  bool _t07E1 = prim $and01C4 (_t07CA, _t07E0);
  if _t07E1 {
    int _t07E2 = 2;
    bool _t07E3 = prim !=0086 (i0738, _t07E2);
    if _t07E3 {
      real _t07E4 = 0.e0;
      real _t07E5 = 0.e0;
      vec2 _t07E6 = [_t07E4, _t07E5];
      vec2 _t07E7 = prim -0026<$[2]> (_t07E6, refPos05C4);
      real _t07E8 = 0.1e1;
      real _t07E9 = 0.e0;
      vec2 _t07EA = [_t07E8, _t07E9];
      real _t07EB = 0.1e1;
      real _t07EC = 0.e0;
      vec2 _t07ED = [_t07EB, _t07EC];
      real _t07EE = prim ×00BD (dPos05C5, _t07ED);
      vec2 _t07EF = prim /0057<$[2]> (_t07EA, _t07EE);
      time0739 = prim ×00BD (_t07E7, _t07EF);
      face073A = 2;
    } else {
      real _t07F0 = 0.e0;
      real _t07F1 = 0.e0;
      vec2 _t07F2 = [_t07F0, _t07F1];
      vec2 _t07F3 = prim -0026<$[2]> (_t07F2, refPos05C4);
      real _t07F4 = 0.1e1;
      real _t07F5 = 0.e0;
      vec2 _t07F6 = [_t07F4, _t07F5];
      real _t07F7 = 0.1e1;
      real _t07F8 = 0.e0;
      vec2 _t07F9 = [_t07F7, _t07F8];
      real _t07FA = prim ×00BD (dPos05C5, _t07F9);
      vec2 _t07FB = prim /0057<$[2]> (_t07F6, _t07FA);
      faceTime073B = prim ×00BD (_t07F3, _t07FB);
    }
  }
  int _t07FC = -1;
  bool _t07FD = prim !=0086 (face073A, _t07FC);
  if _t07FD {
    real _t07FE = 0.e0;
    real _t07FF = prim max0125 (time0739, _t07FE);
    real _t0800 = (real)face073A;
    vec2 _t0801 = [_t07FF, _t0800];
    return _t0801;
  } else {
    real _t0802 = -inf;
    bool _t0803 = prim ==0084 (_t0802, faceTime073B);
    if _t0803 {
      real _t0804 = -0.1e1;
      real _t0805 = -0.1e1;
      vec2 _t0806 = [_t0804, _t0805];
      return _t0806;
    } else {
      real _t0807 = (real)i0738;
      vec2 _t0808 = [faceTime073B, _t0807];
      return _t0808;
    }
  }
}
function Femdata: Mesh#0 domain0809 (Femdata: Space arg0080A)
{
  Femdata: Mesh _t080B = extractFem(arg0080A, Mesh);
  return _t080B;
}
function Femdata: Space#0 space080C (Femdata: FemFunc arg0080D)
{
  Femdata: Space _t080E = extractFem(arg0080D, Space);
  return _t080E;
}
function Femdata: FuncCell#3 funcCell080F (Femdata: FemFunc arg00810, Femdata: MeshCell arg10811)
{
  int _t0812 = extractFemItem(CellIndex(MeshCell), int, arg10811);
  Femdata: FuncCell _t0813 = loadFem(FuncCell, arg00810, _t0812);
  return _t0813;
}
function int#4 sign082E (real x082F)
{
  real _t0830 = 0.e0;
  bool _t0831 = prim >0080 (x082F, _t0830);
  if _t0831 {
    int _t0832 = 1;
    return _t0832;
  } else {
    real _t0833 = 0.e0;
    bool _t0834 = prim <007A (x082F, _t0833);
    if _t0834 {
      int _t0835 = -1;
      return _t0835;
    } else {
      int _t0836 = 0;
      return _t0836;
    }
  }
}
globalInit {
  int _t046A = 0;
  int _t0468 = 1;
  int _t046C = extractFemItem(NumCell(Mesh), int, a0466);
  int _t046B = prim -0024 (_t046C, _t0468);
  int[] _t046F = prim $range01C3 (_t046A, _t046B);
  Femdata: MeshCell[] _t0470 = {};
  foreach _t046E in _t046F {
    Femdata: MeshCell _t0471 = loadFem(MeshCell, a0466, _t046E);
    _t0470 = prim @0010<Femdata: MeshCell> (_t0470, _t0471);
  }
  0cell_a0467 = _t0470;
  b0472 = loadFem(Space, 0b0472_intermedateGlobal0473, a0466);
  c0474 = loadFem(FemFunc, 0c0474_intermedateGlobal0475, b0472);
  vec3 _t0814 = prim -0026<$[3]> (camAt0457, camEye0453);
  camDist0815 = prim |()|00B5<$[3]> (_t0814);
  camNearVsp0816 = prim +0017<$[]> (camNear0462, camDist0815);
  camFarVsp0817 = prim +0017<$[]> (camFar0463, camDist0815);
  vec3 _t0818 = prim -0026<$[3]> (camAt0457, camEye0453);
  camN0819 = prim normalize0137<$[3]> (_t0818);
  vec3 _t081A = prim ×00BE (camN0819, camUp045B);
  camU081B = prim normalize0137<$[3]> (_t081A);
  camV081C = prim ×00BE (camU081B, camN0819);
  real _t081D = 0.314159265358979323846264338327950288e1;
  real _t081E = prim *0034 (camFOV045F, _t081D);
  real _t081F = 0.36e3;
  real _t0820 = prim /0055 (_t081E, _t081F);
  real _t0821 = prim tan0179 (_t0820);
  camVmax0822 = prim *0034 (_t0821, camDist0815);
  real _t0823 = (real)iresU0460;
  real _t0824 = prim *0034 (camVmax0822, _t0823);
  real _t0825 = (real)iresV0461;
  camUmax0826 = prim /0055 (_t0824, _t0825);
  kernel _t0827 = tent;
  IMAGE1D<double[3]> img0828 = clamp(cmap0483);
  CM0829 = prim ⊛0074<#0; %1; $[3]> (_t0827, img0828);
  tensor[3,3] _t082A = [camU081B, camV081C, camN0819];
  tensor[3,3] _t082B = prim transpose0145<%3; %3> (_t082A);
  vec3 _t082C = prim normalize0137<$[3]> (lightVsp048C);
  L082D = prim •00CE<$[3,3]; $[3]; $[3]> (_t082B, _t082C);
}
strand ray (int ui0837, int vi0838) {
  real rayU0839;
  real rayV0840;
  vec3 UV0847;
  vec3 rayOrig084A;
  vec3 rayVec084B;
  real camNearVsp0850;
  real camFarVsp0851;
  int offset0854;
  int len0857;
  int itter085C;
  int intersectionItter085D;
  int idx085E;
  vec2 interval085F;
  real s0860;
  real e0861;
  Femdata: MeshCell cc0862;
  Femdata: FuncCell fc0864;
  output real out0866;
  output vec4 rgba0867;
  {
    real _t083A = prim unary -008B<$[]> (camUmax0826);
    real _t083B = -0.5e0;
    real _t083C = (real)ui0837;
    real _t083D = (real)iresU0460;
    real _t083E = 0.5e0;
    real _t083F = prim -0026<$[]> (_t083D, _t083E);
    rayU0839 = prim lerp0098<$[]> (_t083A, camUmax0826, _t083B, _t083C, _t083F);
    real _t0841 = prim unary -008B<$[]> (camVmax0822);
    real _t0842 = -0.5e0;
    real _t0843 = (real)vi0838;
    real _t0844 = (real)iresV0461;
    real _t0845 = 0.5e0;
    real _t0846 = prim -0026<$[]> (_t0844, _t0845);
    rayV0840 = prim lerp0098<$[]> (_t0841, camVmax0822, _t0842, _t0843, _t0846);
    vec3 _t0848 = prim *0036<$[3]> (rayU0839, camU081B);
    vec3 _t0849 = prim *0036<$[3]> (rayV0840, camV081C);
    UV0847 = prim +0017<$[3]> (_t0848, _t0849);
    rayOrig084A = prim +0017<$[3]> (camEye0453, UV0847);
    real _t084C = 0.e0;
    real _t084D = 0.e0;
    real _t084E = 0.e0;
    vec3 _t084F = [_t084C, _t084D, _t084E];
    rayVec084B = prim +0017<$[3]> (camN0819, _t084F);
    camNearVsp0850 = camNearVsp0816;
    camFarVsp0851 = camFarVsp0817;
    int _t0855 = prim *0033 (ui0837, iresV0461);
    int _t0856 = prim +0015 (_t0855, vi0838);
    offset0854 = prim $dynsub01C2<int> (indecies0477, _t0856);
    int _t0858 = prim *0033 (iresU0460, iresV0461);
    int _t0859 = prim *0033 (ui0837, iresV0461);
    int _t085A = prim +0015 (_t0858, _t0859);
    int _t085B = prim +0015 (_t085A, vi0838);
    len0857 = prim $dynsub01C2<int> (indecies0477, _t085B);
    itter085C = 0;
    intersectionItter085D = 0;
    idx085E = prim +0015 (offset0854, itter085C);
    interval085F = prim $dynsub01C2<vec2> (times0478, idx085E);
    s0860 = interval085F[0];
    e0861 = interval085F[1];
    int _t0863 = 0;
    cc0862 = prim $dynsub01C2<Femdata: MeshCell> (0cell_a0467, _t0863);
    fc0864 = func funcCell080F (c0474, cc0862);
    out0866 = 0.e0;
    real _t0868 = 0.e0;
    real _t0869 = 0.e0;
    real _t086A = 0.e0;
    real _t086B = 0.e0;
    rgba0867 = [_t0868, _t0869, _t086A, _t086B];
  }
  start
  {
    int _t086C = 0;
    bool _t086D = prim ==0082 (len0857, _t086C);
    if _t086D {
      stabilize;
    }
    int _t086E = prim $dynsub01C2<int> (cells0479, idx085E);
    cc0862 = prim $dynsub01C2<Femdata: MeshCell> (0cell_a0467, _t086E);
    fc0864 = func funcCell080F (c0474, cc0862);
  }
  update
  {
    string _t086F = "Interval:";
    vec2 _t0870 = [s0860, e0861];
    string _t0871 = "\n";
    print (_t086F, _t0870, _t0871);
    string _t0872 = "inner itter:";
    string _t0873 = "\n";
    print (_t0872, intersectionItter085D, _t0873);
    string _t0874 = "Outer itter:";
    string _t0875 = "\n";
    print (_t0874, itter085C, _t0875);
    real _t0876 = rayOrig084A[0];
    real _t0877 = rayOrig084A[1];
    vec2 _t0878 = [_t0876, _t0877];
    real _t0879 = rayVec084B[0];
    real _t087A = rayVec084B[1];
    vec2 _t087B = [_t0879, _t087A];
    vec2 _t087C = prim *0036<$[2]> (s0860, _t087B);
    vec2 startRay087D = prim +0017<$[2]> (_t0878, _t087C);
    real _t087E = rayOrig084A[0];
    real _t087F = rayOrig084A[1];
    vec2 _t0880 = [_t087E, _t087F];
    real _t0881 = rayVec084B[0];
    real _t0882 = rayVec084B[1];
    vec2 _t0883 = [_t0881, _t0882];
    vec2 _t0884 = prim *0036<$[2]> (e0861, _t0883);
    vec2 endRay0885 = prim +0017<$[2]> (_t0880, _t0884);
    Femdata: Mesh _t0886 = extractFem(cc0862, Mesh);
    Femdata: Mesh _t0887 = extractFem(cc0862, Mesh);
    int _t0888 = extractFemItem(CellIndex(MeshCell), int, cc0862);
    field(2)[2] _t0889 = femField(_t0886,_t0888,field(2)[2],InvTransform,_msh_newtonInverse04FB );
    vec2 invertA088A = prim @00A5<#∞; %2; $[2]> (_t0889, startRay087D);
    Femdata: Mesh _t088B = extractFem(cc0862, Mesh);
    Femdata: Mesh _t088C = extractFem(cc0862, Mesh);
    int _t088D = extractFemItem(CellIndex(MeshCell), int, cc0862);
    field(2)[2] _t088E = femField(_t088B,_t088D,field(2)[2],InvTransform,_msh_newtonInverse04FB );
    vec2 invertB088F = prim @00A5<#∞; %2; $[2]> (_t088E, endRay0885);
    string _t0890 = "inverses:";
    string _t0891 = "\n";
    print (_t0890, invertA088A, invertB088F, _t0891);
    Femdata: FemFunc _t0892 = extractFem(fc0864, FemFunc);
    Femdata: FemFunc _t0893 = extractFem(fc0864, FemFunc);
    Femdata: Space _t0894 = extractFem(_t0893, Space);
    int _t0895 = extractFemItem(CellIndex(FuncCell), int, fc0864);
    field(2)[] _t0896 = femField(_t0892,_t0895,field(2)[],refField,);
    real faVal0897 = prim @00A5<#∞; %2; $[]> (_t0896, invertA088A);
    real _t0898 = rayVec084B[2];
    real _t0899 = prim *0034 (_t0898, s0860);
    real _t089A = prim -0026<$[]> (faVal0897, _t0899);
    real _t089B = rayOrig084A[2];
    real fa089C = prim -0026<$[]> (_t089A, _t089B);
    Femdata: FemFunc _t089D = extractFem(fc0864, FemFunc);
    Femdata: FemFunc _t089E = extractFem(fc0864, FemFunc);
    Femdata: Space _t089F = extractFem(_t089E, Space);
    int _t08A0 = extractFemItem(CellIndex(FuncCell), int, fc0864);
    field(2)[] _t08A1 = femField(_t089D,_t08A0,field(2)[],refField,);
    real _t08A2 = prim @00A5<#∞; %2; $[]> (_t08A1, invertB088F);
    real _t08A3 = rayVec084B[2];
    real _t08A4 = prim *0034 (_t08A3, e0861);
    real _t08A5 = prim -0026<$[]> (_t08A2, _t08A4);
    real _t08A6 = rayOrig084A[2];
    real fb08A7 = prim -0026<$[]> (_t08A5, _t08A6);
    string _t08A8 = "Vals:";
    vec2 _t08A9 = [fa089C, fb08A7];
    string _t08AA = "\n";
    print (_t08A8, _t08A9, _t08AA);
    real _t08AB = prim -0026<$[]> (fa089C, fb08A7);
    real _t08AC = prim |()|00B5<$[]> (_t08AB);
    bool _t08AD = prim <007A (_t08AC, eps0476);
    if _t08AD {
      real _t08AE = prim |()|00B5<$[]> (fa089C);
      bool _t08AF = prim >0080 (_t08AE, eps0476);
      if _t08AF {
        s0860 = prim +0017<$[]> (s0860, eps0476);
        continue;
      }
    }
    real _t08B0 = prim *0034 (s0860, fb08A7);
    real _t08B1 = prim *0034 (e0861, fa089C);
    real _t08B2 = prim -0026<$[]> (_t08B0, _t08B1);
    real _t08B3 = prim -0026<$[]> (fb08A7, fa089C);
    real cup08B4 = prim /0055 (_t08B2, _t08B3);
    string _t08B5 = "Mid time:";
    string _t08B6 = "\n";
    print (_t08B5, cup08B4, _t08B6);
    real _t08B7 = rayOrig084A[0];
    real _t08B8 = rayOrig084A[1];
    vec2 _t08B9 = [_t08B7, _t08B8];
    real _t08BA = rayVec084B[0];
    real _t08BB = rayVec084B[1];
    vec2 _t08BC = [_t08BA, _t08BB];
    vec2 _t08BD = prim *0036<$[2]> (cup08B4, _t08BC);
    vec2 midRay08BE = prim +0017<$[2]> (_t08B9, _t08BD);
    Femdata: Mesh _t08BF = extractFem(cc0862, Mesh);
    Femdata: Mesh _t08C0 = extractFem(cc0862, Mesh);
    int _t08C1 = extractFemItem(CellIndex(MeshCell), int, cc0862);
    field(2)[2] _t08C2 = femField(_t08BF,_t08C1,field(2)[2],InvTransform,_msh_newtonInverse04FB );
    vec2 invertC08C3 = prim @00A5<#∞; %2; $[2]> (_t08C2, midRay08BE);
    Femdata: FemFunc _t08C4 = extractFem(fc0864, FemFunc);
    Femdata: FemFunc _t08C5 = extractFem(fc0864, FemFunc);
    Femdata: Space _t08C6 = extractFem(_t08C5, Space);
    int _t08C7 = extractFemItem(CellIndex(FuncCell), int, fc0864);
    field(2)[] _t08C8 = femField(_t08C4,_t08C7,field(2)[],refField,);
    real fmVal08C9 = prim @00A5<#∞; %2; $[]> (_t08C8, invertC08C3);
    real _t08CA = rayVec084B[2];
    real _t08CB = prim *0034 (_t08CA, cup08B4);
    real _t08CC = prim -0026<$[]> (fmVal08C9, _t08CB);
    real _t08CD = rayOrig084A[2];
    real fm08CE = prim -0026<$[]> (_t08CC, _t08CD);
    string _t08CF = "all vals:";
    vec3 _t08D0 = [fa089C, fm08CE, fb08A7];
    string _t08D1 = "\n";
    print (_t08CF, _t08D0, _t08D1);
    int _t08D2 = 1;
    intersectionItter085D = prim +0015 (intersectionItter085D, _t08D2);
    int _t08D3 = func sign082E (fa089C);
    int _t08D4 = func sign082E (fm08CE);
    int _t08D5 = prim *0033 (_t08D3, _t08D4);
    int _t08D6 = 0;
    bool _t08D7 = prim <0079 (_t08D5, _t08D6);
    if _t08D7 {
      e0861 = cup08B4;
    } else {
      int _t08D8 = func sign082E (fa089C);
      int _t08D9 = func sign082E (fm08CE);
      int _t08DA = prim *0033 (_t08D8, _t08D9);
      int _t08DB = 0;
      bool _t08DC = prim >007F (_t08DA, _t08DB);
      if _t08DC {
        s0860 = cup08B4;
      }
    }
    string _t08DD = "new interval:";
    vec2 _t08DE = [s0860, e0861];
    string _t08DF = "\n";
    print (_t08DD, _t08DE, _t08DF);
    bool _t08E0;
    real _t08E1 = prim |()|00B5<$[]> (fa089C);
    bool _t08E2 = prim <007A (_t08E1, eps0476);
    if _t08E2 {
      _t08E0 = true;
    } else {
      bool _t08E3;
      real _t08E4 = prim |()|00B5<$[]> (fm08CE);
      bool _t08E5 = prim <007A (_t08E4, eps0476);
      if _t08E5 {
        _t08E3 = true;
      } else {
        int _t08E6 = 32;
        _t08E3 = prim >007F (intersectionItter085D, _t08E6);
      }
      _t08E0 = _t08E3;
    }
    if _t08E0 {
      intersectionItter085D = 0;
      bool _t08E7;
      real _t08E8 = prim |()|00B5<$[]> (fm08CE);
      bool _t08E9 = prim >0080 (_t08E8, eps0476);
      if _t08E9 {
        real _t08EA = prim |()|00B5<$[]> (fa089C);
        _t08E7 = prim >0080 (_t08EA, eps0476);
      } else {
        _t08E7 = false;
      }
      if _t08E7 {
        int _t08EB = 1;
        itter085C = prim +0015 (itter085C, _t08EB);
        bool _t08EC = prim >=007D (itter085C, len0857);
        if _t08EC {
          string _t08ED = "Fin pixel=============================\n";
          print (_t08ED);
          stabilize;
        }
        int _t08EE = prim +0015 (offset0854, itter085C);
        interval085F = prim $dynsub01C2<vec2> (times0478, _t08EE);
        int _t08EF = prim +0015 (offset0854, itter085C);
        int _t08F0 = prim $dynsub01C2<int> (cells0479, _t08EF);
        cc0862 = prim $dynsub01C2<Femdata: MeshCell> (0cell_a0467, _t08F0);
        s0860 = interval085F[0];
        e0861 = interval085F[1];
        fc0864 = func funcCell080F (c0474, cc0862);
        string _t08F1 = "Next interval!\n";
        print (_t08F1);
        continue;
      } else {
        real _t08F2 = 0.e0;
        real _t08F3 = 0.e0;
        vec2 grad08F4 = [_t08F2, _t08F3];
        real _t08F6 = prim |()|00B5<$[]> (fm08CE);
        bool _t08F7 = prim <007A (_t08F6, eps0476);
        if _t08F7 {
          Femdata: FemFunc _t08F8 = extractFem(fc0864, FemFunc);
          Femdata: FemFunc _t08F9 = extractFem(fc0864, FemFunc);
          Femdata: Space _t08FA = extractFem(_t08F9, Space);
          int _t08FB = extractFemItem(CellIndex(FuncCell), int, fc0864);
          field(2)[] _t08FC = femField(_t08F8,_t08FB,field(2)[],refField,);
          Femdata: Mesh _t08FD = extractFem(cc0862, Mesh);
          Femdata: Mesh _t08FE = extractFem(cc0862, Mesh);
          int _t08FF = extractFemItem(CellIndex(MeshCell), int, cc0862);
          field(2)[2] _t0900 = femField(_t08FD,_t08FF,field(2)[2],InvTransform,_msh_newtonInverse04FB );
          field(2)[] _t0901 = prim ∘0164<#∞; %2; $[]; %2; $[2]> (_t08FC, _t0900);
          field(2)[2] _t0902 = prim ∇00A8<#∞; %2> (_t0901);
          grad08F4 = prim @00A5<#∞; %2; $[2]> (_t0902, midRay08BE);
          out0866 = fmVal08C9;
        }
        real _t0903 = prim |()|00B5<$[]> (fa089C);
        bool _t0904 = prim <007A (_t0903, eps0476);
        if _t0904 {
          cup08B4 = s0860;
          Femdata: FemFunc _t0905 = extractFem(fc0864, FemFunc);
          Femdata: FemFunc _t0906 = extractFem(fc0864, FemFunc);
          Femdata: Space _t0907 = extractFem(_t0906, Space);
          int _t0908 = extractFemItem(CellIndex(FuncCell), int, fc0864);
          field(2)[] _t0909 = femField(_t0905,_t0908,field(2)[],refField,);
          Femdata: Mesh _t090A = extractFem(cc0862, Mesh);
          Femdata: Mesh _t090B = extractFem(cc0862, Mesh);
          int _t090C = extractFemItem(CellIndex(MeshCell), int, cc0862);
          field(2)[2] _t090D = femField(_t090A,_t090C,field(2)[2],InvTransform,_msh_newtonInverse04FB );
          field(2)[] _t090E = prim ∘0164<#∞; %2; $[]; %2; $[2]> (_t0909, _t090D);
          field(2)[2] _t090F = prim ∇00A8<#∞; %2> (_t090E);
          grad08F4 = prim @00A5<#∞; %2; $[2]> (_t090F, startRay087D);
          out0866 = faVal0897;
        }
        string _t0910 = "Out val:";
        string _t0911 = "\n";
        print (_t0910, out0866, _t0911);
        string _t0912 = "Grad val:";
        string _t0913 = "\n";
        print (_t0912, grad08F4, _t0913);
        real _t0914 = 0.1e1;
        real _t0915 = 0.1e1;
        real _t0916 = 0.1e1;
        vec3 mcol0917 = [_t0914, _t0915, _t0916];
        bool _t0918 = prim !=0088 (cmin0484, cmax0485);
        if _t0918 {
          int _t0919 = -1;
          real _t091A = (real)_t0919;
          real _t091B = 0.1e1;
          real _t091C = prim lerp0098<$[]> (_t091A, _t091B, cmin0484, out0866, cmax0485);
          mcol0917 = prim @00A5<#0; %1; $[3]> (CM0829, _t091C);
        }
        if light0486 {
          real _t091D = grad08F4[0];
          real _t091E = grad08F4[1];
          int _t091F = -1;
          real _t0920 = (real)_t091F;
          vec3 N0921 = [_t091D, _t091E, _t0920];
          vec3 _t0922 = prim normalize0137<$[3]> (rayVec084B);
          vec3 _t0923 = prim unary -008B<$[3]> (_t0922);
          vec3 _t0924 = prim +0017<$[3]> (_t0923, L082D);
          vec3 H0925 = prim normalize0137<$[3]> (_t0924);
          vec3 lightColor0926 = prim lerp0098<$[3]> (mcnear047A, mcfar047E, camNearVsp0850, cup08B4, camFarVsp0851);
          vec3 ambientTerm0927 = prim *0036<$[3]> (phongKa0487, mcol0917);
          vec3 _t0928 = prim modulate0129<%3> (mcol0917, lightColor0926);
          vec3 _t0929 = prim *0036<$[3]> (phongKd0488, _t0928);
          real _t092A = 0.e0;
          real _t092B = prim •00CE<$[3]; $[3]; $[]> (N0921, L082D);
          real _t092C = prim max0125 (_t092A, _t092B);
          vec3 diffuse092D = prim *0038<$[3]> (_t0929, _t092C);
          vec3 _t092E = prim *0036<$[3]> (phongKs0489, lightColor0926);
          real _t092F = 0.e0;
          real _t0930 = prim •00CE<$[3]; $[3]; $[]> (N0921, H0925);
          real _t0931 = prim max0125 (_t092F, _t0930);
          real _t0932 = prim ^0069 (_t0931, phongSp048A);
          vec3 specular0933 = prim *0038<$[3]> (_t092E, _t0932);
          vec3 _t0934 = prim +0017<$[3]> (ambientTerm0927, diffuse092D);
          vec3 fin0935 = prim +0017<$[3]> (_t0934, specular0933);
          real _t0936 = fin0935[0];
          real _t0937 = fin0935[1];
          real _t0938 = fin0935[2];
          real _t0939 = 0.1e1;
          rgba0867 = [_t0936, _t0937, _t0938, _t0939];
        } else {
          real _t093A = mcol0917[0];
          real _t093B = mcol0917[1];
          real _t093C = mcol0917[2];
          real _t093D = 0.1e1;
          rgba0867 = [_t093A, _t093B, _t093C, _t093D];
        }
        stabilize;
      }
    } else {
      string _t093E = "=========\n";
      print (_t093E);
    }
  }
}
grid(2) {
  int _t093F = 0;
  int _t0940 = 1;
  int _t0941 = prim -0024 (iresU0460, _t0940);
  int[] _t0942 = prim $range01C3 (_t093F, _t0941);
  foreach vi0948 in _t0942 {
    int _t0943 = 0;
    int _t0944 = 1;
    int _t0945 = prim -0024 (iresV0461, _t0944);
    int[] _t0946 = prim $range01C3 (_t0943, _t0945);
    foreach ui0947 in _t0946 {
      new ray (ui0947, vi0948);
    }
  }
}
/* Program end */
/* Simplified Program (after after inlining) start */
properties: GlobalInit,StrandArray,HasStartMethod,ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[]),HasInputs,HasGlobals
input real isoval0451 = <default>;
input real thick0452 = <default>;
input vec3 camEye0453 = <default>;
input vec3 camAt0457 = <default>;
input vec3 camUp045B = <default>;
input real camFOV045F = <default>;
input int iresU0460 = <default>;
input int iresV0461 = <default>;
input real camNear0462 = <default>;
input real camFar0463 = <default>;
input real refStep0464 = <default>;
input real rayStep0465 = <default>;
input FemData:Mesh a0466;
input FemData:Space 0b0472_intermedateGlobal0473;
input FemData:FemFunc 0c0474_intermedateGlobal0475;
input real eps0476 = <default>;
input int[] indecies0477;
input vec2[] times0478;
input int[] cells0479;
input vec3 mcnear047A("material color at near clipping plane (for depth cuing)") = <default>;
input vec3 mcfar047E("material color at far clipping plane") = <default>;
input image(1)[3] cmap0483("univariate colormap") = image("/home/teocollin/gitcode/diderot/tests/lipRay/find/cmap.nrrd");
input real cmin0484("value mapped to min end of colormap") = <default>;
input real cmax0485("value mapped to max end of colormap. By default cmin==cmax==0, which disables this colormapping") = <default>;
input bool light0486 = <default>;
input real phongKa0487("Blinn-Phong ambient component") = <default>;
input real phongKd0488("Blinn-Phong diffuse component") = <default>;
input real phongKs0489("Blinn-Phong specular component") = <default>;
input real phongSp048A("Blinn-Phong specularity exponent") = <default>;
input real maxAlpha048B("maximum opacity on rendered surface") = <default>;
input vec3 lightVsp048C = <default>;
constants {
  isoval0451 = 0.2e0;
  thick0452 = 0.7e-1;
  real _t0454 = 0.3e1;
  real _t0455 = -0.3e1;
  real _t0456 = 0.3e1;
  camEye0453 = [_t0454, _t0455, _t0456];
  real _t0458 = 0.5e0;
  real _t0459 = 0.5e0;
  real _t045A = 0.5e0;
  camAt0457 = [_t0458, _t0459, _t045A];
  real _t045C = 0.e0;
  real _t045D = 0.e0;
  real _t045E = 0.1e1;
  camUp045B = [_t045C, _t045D, _t045E];
  camFOV045F = 0.137e2;
  iresU0460 = 10;
  iresV0461 = 10;
  camNear0462 = -0.2e1;
  camFar0463 = 0.5e1;
  refStep0464 = 0.1e1;
  rayStep0465 = 0.1e-1;
  eps0476 = 0.1e-5;
  real _t047B = 0.1e1;
  real _t047C = 0.1e1;
  real _t047D = 0.1e1;
  mcnear047A = [_t047B, _t047C, _t047D];
  real _t047F = 0.1e1;
  real _t0480 = 0.1e1;
  real _t0481 = 0.1e1;
  mcfar047E = [_t047F, _t0480, _t0481];
  cmin0484 = 0.e0;
  cmax0485 = 0.1e1;
  light0486 = true;
  phongKa0487 = 0.5e0;
  phongKd0488 = 0.5e0;
  phongKs0489 = 0.e0;
  phongSp048A = 0.6e2;
  maxAlpha048B = 0.1e1;
  real _t048D = 0.e0;
  real _t048E = 0.e0;
  real _t048F = 0.1e1;
  lightVsp048C = [_t048D, _t048E, _t048F];
}
global Femdata: MeshCell[] 0cell_a0467;
global Femdata: Space b0472;
global Femdata: FemFunc c0474;
global real camDist0815;
global real camNearVsp0816;
global real camFarVsp0817;
global vec3 camN0819;
global vec3 camU081B;
global vec3 camV081C;
global real camVmax0822;
global real camUmax0826;
global field#0(1)[3] CM0829;
global vec3 L082D;
function Femdata: MeshPos#5 _msh_newtonInverse04FB (vec2 pos04FC, int cellInt04FD, Femdata: Mesh mesh04FE)
{
  real _t04FF = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t0500 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  xn0501 = [_t04FF, _t0500];
  field(2)[2] _t0502 = femField(mesh04FE,cellInt04FD,field(2)[2],Transform,);
  field(2)[2,2] _t0503 = prim ∇⊗00AD<#∞; %2; $[]; %2> (_t0502);
  field(2)[2,2] _t0504 = prim inv015B<#∞; %2> (_t0503);
  real _t0505 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t0506 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  vec2 _t0507 = [_t0505, _t0506];
  A0508 = prim @00A5<#∞; %2; $[2,2]> (_t0504, _t0507);
  int _t0509 = 0;
  int _t050A = 16;
  int[] _t050B = prim $range01C3 (_t0509, _t050A);
  foreach itter052F in _t050B {
    field(2)[2] _t050C = femField(mesh04FE,cellInt04FD,field(2)[2],Transform,);
    field(2)[2] _t050D = prim -002E<#∞; %2; $[2]> (_t050C, pos04FC);
    field(2)[2] _t050E = prim •00D4<#∞; %2; $[2,2]; $[2]; $[2]> (A0508, _t050D);
    delta050F = prim @00A5<#∞; %2; $[2]> (_t050E, xn0501);
    xn0501 = prim -0026<$[2]> (xn0501, delta050F);
    real _t0510 = 0.1e-7;
    real _t0511 = 0.1e-7;
    real _t0512 = prim *0034 (_t0510, _t0511);
    real _t0513 = prim •00CE<$[2]; $[2]; $[]> (delta050F, delta050F);
    bool _t0514 = prim >=007E (_t0512, _t0513);
    if _t0514 {
      real _t0515 = 0.1e1;
      real _t0516 = 0.1e-8;
      real _t0517 = prim +0017<$[]> (_t0515, _t0516);
      real _t0518 = 0.1e1;
      real _t0519 = 0.1e1;
      vec2 _t051A = [_t0518, _t0519];
      real _t051B = prim •00CE<$[2]; $[2]; $[]> (_t051A, xn0501);
      bool _t051C = prim >0080 (_t0517, _t051B);
      real _t051D = 0.1e-8;
      real _t051E = 0.1e-8;
      vec2 _t051F = [_t051D, _t051E];
      vec2 _t0520 = prim +0017<$[2]> (_t051F, xn0501);
      real _t0521 = _t0520[0];
      real _t0522 = -0.e0;
      bool _t0523 = prim >0080 (_t0521, _t0522);
      real _t0524 = 0.1e-8;
      real _t0525 = 0.1e-8;
      vec2 _t0526 = [_t0524, _t0525];
      vec2 _t0527 = prim +0017<$[2]> (_t0526, xn0501);
      real _t0528 = _t0527[1];
      real _t0529 = -0.e0;
      bool _t052A = prim >0080 (_t0528, _t0529);
      bool _t052B = prim $and01C4 (_t0523, _t052A);
      bool _t052C = prim $and01C4 (_t051C, _t052B);
      if _t052C {
        Femdata: MeshPos _t052D = extractFemItemN((mesh04FE, cellInt04FD, xn0501, pos04FC),AllBuild(MeshPos),);
        return _t052D;
      } else {
        Femdata: MeshPos _t052E = extractFemItemN((mesh04FE),InvalidBuild(MeshPos),);
        return _t052E;
      }
    }
  }
  Femdata: MeshPos _t0530 = extractFemItemN((mesh04FE),InvalidBuild(MeshPos),);
  return _t0530;
}
function int[2]#5 nextCell40547 (int faceIdx05BA, int cell05BB, Femdata: Mesh mesh05BC)
{
  int _t05BD = 6;
  int _t05BE = prim *0033 (cell05BB, _t05BD);
  int _t05BF = 2;
  int _t05C0 = prim *0033 (faceIdx05BA, _t05BF);
  int _t05C1 = prim +0015 (_t05BE, _t05C0);
  int[2] _t05C2 = extractFemItemN((mesh05BC, _t05C1),CellFaceCell(Mesh),);
  return _t05C2;
}
globalInit {
  int _t046A = 0;
  int _t0468 = 1;
  int _t046C = extractFemItem(NumCell(Mesh), int, a0466);
  int _t046B = prim -0024 (_t046C, _t0468);
  int[] _t046F = prim $range01C3 (_t046A, _t046B);
  Femdata: MeshCell[] _t0470 = {};
  foreach _t046E in _t046F {
    Femdata: MeshCell _t0471 = loadFem(MeshCell, a0466, _t046E);
    _t0470 = prim @0010<Femdata: MeshCell> (_t0470, _t0471);
  }
  0cell_a0467 = _t0470;
  b0472 = loadFem(Space, 0b0472_intermedateGlobal0473, a0466);
  c0474 = loadFem(FemFunc, 0c0474_intermedateGlobal0475, b0472);
  vec3 _t0814 = prim -0026<$[3]> (camAt0457, camEye0453);
  camDist0815 = prim |()|00B5<$[3]> (_t0814);
  camNearVsp0816 = prim +0017<$[]> (camNear0462, camDist0815);
  camFarVsp0817 = prim +0017<$[]> (camFar0463, camDist0815);
  vec3 _t0818 = prim -0026<$[3]> (camAt0457, camEye0453);
  camN0819 = prim normalize0137<$[3]> (_t0818);
  vec3 _t081A = prim ×00BE (camN0819, camUp045B);
  camU081B = prim normalize0137<$[3]> (_t081A);
  camV081C = prim ×00BE (camU081B, camN0819);
  real _t081D = 0.314159265358979323846264338327950288e1;
  real _t081E = prim *0034 (camFOV045F, _t081D);
  real _t081F = 0.36e3;
  real _t0820 = prim /0055 (_t081E, _t081F);
  real _t0821 = prim tan0179 (_t0820);
  camVmax0822 = prim *0034 (_t0821, camDist0815);
  real _t0823 = (real)iresU0460;
  real _t0824 = prim *0034 (camVmax0822, _t0823);
  real _t0825 = (real)iresV0461;
  camUmax0826 = prim /0055 (_t0824, _t0825);
  kernel _t0827 = tent;
  IMAGE1D<double[3]> img0828 = clamp(cmap0483);
  CM0829 = prim ⊛0074<#0; %1; $[3]> (_t0827, img0828);
  tensor[3,3] _t082A = [camU081B, camV081C, camN0819];
  tensor[3,3] _t082B = prim transpose0145<%3; %3> (_t082A);
  vec3 _t082C = prim normalize0137<$[3]> (lightVsp048C);
  L082D = prim •00CE<$[3,3]; $[3]; $[3]> (_t082B, _t082C);
}
strand ray (int ui0837, int vi0838) {
  real rayU0839;
  real rayV0840;
  vec3 UV0847;
  vec3 rayOrig084A;
  vec3 rayVec084B;
  real camNearVsp0850;
  real camFarVsp0851;
  int offset0854;
  int len0857;
  int itter085C;
  int intersectionItter085D;
  int idx085E;
  vec2 interval085F;
  real s0860;
  real e0861;
  Femdata: MeshCell cc0862;
  Femdata: FuncCell fc0864;
  output real out0866;
  output vec4 rgba0867;
  {
    real _t083A = prim unary -008B<$[]> (camUmax0826);
    real _t083B = -0.5e0;
    real _t083C = (real)ui0837;
    real _t083D = (real)iresU0460;
    real _t083E = 0.5e0;
    real _t083F = prim -0026<$[]> (_t083D, _t083E);
    rayU0839 = prim lerp0098<$[]> (_t083A, camUmax0826, _t083B, _t083C, _t083F);
    real _t0841 = prim unary -008B<$[]> (camVmax0822);
    real _t0842 = -0.5e0;
    real _t0843 = (real)vi0838;
    real _t0844 = (real)iresV0461;
    real _t0845 = 0.5e0;
    real _t0846 = prim -0026<$[]> (_t0844, _t0845);
    rayV0840 = prim lerp0098<$[]> (_t0841, camVmax0822, _t0842, _t0843, _t0846);
    vec3 _t0848 = prim *0036<$[3]> (rayU0839, camU081B);
    vec3 _t0849 = prim *0036<$[3]> (rayV0840, camV081C);
    UV0847 = prim +0017<$[3]> (_t0848, _t0849);
    rayOrig084A = prim +0017<$[3]> (camEye0453, UV0847);
    real _t084C = 0.e0;
    real _t084D = 0.e0;
    real _t084E = 0.e0;
    vec3 _t084F = [_t084C, _t084D, _t084E];
    rayVec084B = prim +0017<$[3]> (camN0819, _t084F);
    camNearVsp0850 = camNearVsp0816;
    camFarVsp0851 = camFarVsp0817;
    int _t0855 = prim *0033 (ui0837, iresV0461);
    int _t0856 = prim +0015 (_t0855, vi0838);
    offset0854 = prim $dynsub01C2<int> (indecies0477, _t0856);
    int _t0858 = prim *0033 (iresU0460, iresV0461);
    int _t0859 = prim *0033 (ui0837, iresV0461);
    int _t085A = prim +0015 (_t0858, _t0859);
    int _t085B = prim +0015 (_t085A, vi0838);
    len0857 = prim $dynsub01C2<int> (indecies0477, _t085B);
    itter085C = 0;
    intersectionItter085D = 0;
    idx085E = prim +0015 (offset0854, itter085C);
    interval085F = prim $dynsub01C2<vec2> (times0478, idx085E);
    s0860 = interval085F[0];
    e0861 = interval085F[1];
    int _t0863 = 0;
    cc0862 = prim $dynsub01C2<Femdata: MeshCell> (0cell_a0467, _t0863);
    Femdata: FuncCell fc094D;
    int _t094E = extractFemItem(CellIndex(MeshCell), int, cc0862);
    Femdata: FuncCell _t094F = loadFem(FuncCell, c0474, _t094E);
    fc094D = _t094F;
    fc0864 = fc094D;
    out0866 = 0.e0;
    real _t0868 = 0.e0;
    real _t0869 = 0.e0;
    real _t086A = 0.e0;
    real _t086B = 0.e0;
    rgba0867 = [_t0868, _t0869, _t086A, _t086B];
  }
  start
  {
    int _t086C = 0;
    bool _t086D = prim ==0082 (len0857, _t086C);
    if _t086D {
      stabilize;
    }
    int _t086E = prim $dynsub01C2<int> (cells0479, idx085E);
    cc0862 = prim $dynsub01C2<Femdata: MeshCell> (0cell_a0467, _t086E);
    Femdata: FuncCell fc0950;
    int _t0951 = extractFemItem(CellIndex(MeshCell), int, cc0862);
    Femdata: FuncCell _t0952 = loadFem(FuncCell, c0474, _t0951);
    fc0950 = _t0952;
    fc0864 = fc0950;
  }
  update
  {
    string _t086F = "Interval:";
    vec2 _t0870 = [s0860, e0861];
    string _t0871 = "\n";
    print (_t086F, _t0870, _t0871);
    string _t0872 = "inner itter:";
    string _t0873 = "\n";
    print (_t0872, intersectionItter085D, _t0873);
    string _t0874 = "Outer itter:";
    string _t0875 = "\n";
    print (_t0874, itter085C, _t0875);
    real _t0876 = rayOrig084A[0];
    real _t0877 = rayOrig084A[1];
    vec2 _t0878 = [_t0876, _t0877];
    real _t0879 = rayVec084B[0];
    real _t087A = rayVec084B[1];
    vec2 _t087B = [_t0879, _t087A];
    vec2 _t087C = prim *0036<$[2]> (s0860, _t087B);
    vec2 startRay087D = prim +0017<$[2]> (_t0878, _t087C);
    real _t087E = rayOrig084A[0];
    real _t087F = rayOrig084A[1];
    vec2 _t0880 = [_t087E, _t087F];
    real _t0881 = rayVec084B[0];
    real _t0882 = rayVec084B[1];
    vec2 _t0883 = [_t0881, _t0882];
    vec2 _t0884 = prim *0036<$[2]> (e0861, _t0883);
    vec2 endRay0885 = prim +0017<$[2]> (_t0880, _t0884);
    Femdata: Mesh _t0886 = extractFem(cc0862, Mesh);
    Femdata: Mesh _t0887 = extractFem(cc0862, Mesh);
    int _t0888 = extractFemItem(CellIndex(MeshCell), int, cc0862);
    field(2)[2] _t0889 = femField(_t0886,_t0888,field(2)[2],InvTransform,_msh_newtonInverse04FB );
    vec2 invertA088A = prim @00A5<#∞; %2; $[2]> (_t0889, startRay087D);
    Femdata: Mesh _t088B = extractFem(cc0862, Mesh);
    Femdata: Mesh _t088C = extractFem(cc0862, Mesh);
    int _t088D = extractFemItem(CellIndex(MeshCell), int, cc0862);
    field(2)[2] _t088E = femField(_t088B,_t088D,field(2)[2],InvTransform,_msh_newtonInverse04FB );
    vec2 invertB088F = prim @00A5<#∞; %2; $[2]> (_t088E, endRay0885);
    string _t0890 = "inverses:";
    string _t0891 = "\n";
    print (_t0890, invertA088A, invertB088F, _t0891);
    Femdata: FemFunc _t0892 = extractFem(fc0864, FemFunc);
    Femdata: FemFunc _t0893 = extractFem(fc0864, FemFunc);
    Femdata: Space _t0894 = extractFem(_t0893, Space);
    int _t0895 = extractFemItem(CellIndex(FuncCell), int, fc0864);
    field(2)[] _t0896 = femField(_t0892,_t0895,field(2)[],refField,);
    real faVal0897 = prim @00A5<#∞; %2; $[]> (_t0896, invertA088A);
    real _t0898 = rayVec084B[2];
    real _t0899 = prim *0034 (_t0898, s0860);
    real _t089A = prim -0026<$[]> (faVal0897, _t0899);
    real _t089B = rayOrig084A[2];
    real fa089C = prim -0026<$[]> (_t089A, _t089B);
    Femdata: FemFunc _t089D = extractFem(fc0864, FemFunc);
    Femdata: FemFunc _t089E = extractFem(fc0864, FemFunc);
    Femdata: Space _t089F = extractFem(_t089E, Space);
    int _t08A0 = extractFemItem(CellIndex(FuncCell), int, fc0864);
    field(2)[] _t08A1 = femField(_t089D,_t08A0,field(2)[],refField,);
    real _t08A2 = prim @00A5<#∞; %2; $[]> (_t08A1, invertB088F);
    real _t08A3 = rayVec084B[2];
    real _t08A4 = prim *0034 (_t08A3, e0861);
    real _t08A5 = prim -0026<$[]> (_t08A2, _t08A4);
    real _t08A6 = rayOrig084A[2];
    real fb08A7 = prim -0026<$[]> (_t08A5, _t08A6);
    string _t08A8 = "Vals:";
    vec2 _t08A9 = [fa089C, fb08A7];
    string _t08AA = "\n";
    print (_t08A8, _t08A9, _t08AA);
    real _t08AB = prim -0026<$[]> (fa089C, fb08A7);
    real _t08AC = prim |()|00B5<$[]> (_t08AB);
    bool _t08AD = prim <007A (_t08AC, eps0476);
    if _t08AD {
      real _t08AE = prim |()|00B5<$[]> (fa089C);
      bool _t08AF = prim >0080 (_t08AE, eps0476);
      if _t08AF {
        s0860 = prim +0017<$[]> (s0860, eps0476);
        continue;
      }
    }
    real _t08B0 = prim *0034 (s0860, fb08A7);
    real _t08B1 = prim *0034 (e0861, fa089C);
    real _t08B2 = prim -0026<$[]> (_t08B0, _t08B1);
    real _t08B3 = prim -0026<$[]> (fb08A7, fa089C);
    real cup08B4 = prim /0055 (_t08B2, _t08B3);
    string _t08B5 = "Mid time:";
    string _t08B6 = "\n";
    print (_t08B5, cup08B4, _t08B6);
    real _t08B7 = rayOrig084A[0];
    real _t08B8 = rayOrig084A[1];
    vec2 _t08B9 = [_t08B7, _t08B8];
    real _t08BA = rayVec084B[0];
    real _t08BB = rayVec084B[1];
    vec2 _t08BC = [_t08BA, _t08BB];
    vec2 _t08BD = prim *0036<$[2]> (cup08B4, _t08BC);
    vec2 midRay08BE = prim +0017<$[2]> (_t08B9, _t08BD);
    Femdata: Mesh _t08BF = extractFem(cc0862, Mesh);
    Femdata: Mesh _t08C0 = extractFem(cc0862, Mesh);
    int _t08C1 = extractFemItem(CellIndex(MeshCell), int, cc0862);
    field(2)[2] _t08C2 = femField(_t08BF,_t08C1,field(2)[2],InvTransform,_msh_newtonInverse04FB );
    vec2 invertC08C3 = prim @00A5<#∞; %2; $[2]> (_t08C2, midRay08BE);
    Femdata: FemFunc _t08C4 = extractFem(fc0864, FemFunc);
    Femdata: FemFunc _t08C5 = extractFem(fc0864, FemFunc);
    Femdata: Space _t08C6 = extractFem(_t08C5, Space);
    int _t08C7 = extractFemItem(CellIndex(FuncCell), int, fc0864);
    field(2)[] _t08C8 = femField(_t08C4,_t08C7,field(2)[],refField,);
    real fmVal08C9 = prim @00A5<#∞; %2; $[]> (_t08C8, invertC08C3);
    real _t08CA = rayVec084B[2];
    real _t08CB = prim *0034 (_t08CA, cup08B4);
    real _t08CC = prim -0026<$[]> (fmVal08C9, _t08CB);
    real _t08CD = rayOrig084A[2];
    real fm08CE = prim -0026<$[]> (_t08CC, _t08CD);
    string _t08CF = "all vals:";
    vec3 _t08D0 = [fa089C, fm08CE, fb08A7];
    string _t08D1 = "\n";
    print (_t08CF, _t08D0, _t08D1);
    int _t08D2 = 1;
    intersectionItter085D = prim +0015 (intersectionItter085D, _t08D2);
    int _t08D3;
    real _t096B = 0.e0;
    bool _t096C = prim >0080 (fa089C, _t096B);
    if _t096C {
      int _t096D = 1;
      _t08D3 = _t096D;
    } else {
      real _t096E = 0.e0;
      bool _t096F = prim <007A (fa089C, _t096E);
      if _t096F {
        int _t0970 = -1;
        _t08D3 = _t0970;
      } else {
        int _t0971 = 0;
        _t08D3 = _t0971;
      }
    }
    int _t08D4;
    real _t0964 = 0.e0;
    bool _t0965 = prim >0080 (fm08CE, _t0964);
    if _t0965 {
      int _t0966 = 1;
      _t08D4 = _t0966;
    } else {
      real _t0967 = 0.e0;
      bool _t0968 = prim <007A (fm08CE, _t0967);
      if _t0968 {
        int _t0969 = -1;
        _t08D4 = _t0969;
      } else {
        int _t096A = 0;
        _t08D4 = _t096A;
      }
    }
    int _t08D5 = prim *0033 (_t08D3, _t08D4);
    int _t08D6 = 0;
    bool _t08D7 = prim <0079 (_t08D5, _t08D6);
    if _t08D7 {
      e0861 = cup08B4;
    } else {
      int _t08D8;
      real _t095D = 0.e0;
      bool _t095E = prim >0080 (fa089C, _t095D);
      if _t095E {
        int _t095F = 1;
        _t08D8 = _t095F;
      } else {
        real _t0960 = 0.e0;
        bool _t0961 = prim <007A (fa089C, _t0960);
        if _t0961 {
          int _t0962 = -1;
          _t08D8 = _t0962;
        } else {
          int _t0963 = 0;
          _t08D8 = _t0963;
        }
      }
      int _t08D9;
      real _t0956 = 0.e0;
      bool _t0957 = prim >0080 (fm08CE, _t0956);
      if _t0957 {
        int _t0958 = 1;
        _t08D9 = _t0958;
      } else {
        real _t0959 = 0.e0;
        bool _t095A = prim <007A (fm08CE, _t0959);
        if _t095A {
          int _t095B = -1;
          _t08D9 = _t095B;
        } else {
          int _t095C = 0;
          _t08D9 = _t095C;
        }
      }
      int _t08DA = prim *0033 (_t08D8, _t08D9);
      int _t08DB = 0;
      bool _t08DC = prim >007F (_t08DA, _t08DB);
      if _t08DC {
        s0860 = cup08B4;
      }
    }
    string _t08DD = "new interval:";
    vec2 _t08DE = [s0860, e0861];
    string _t08DF = "\n";
    print (_t08DD, _t08DE, _t08DF);
    bool _t08E0;
    real _t08E1 = prim |()|00B5<$[]> (fa089C);
    bool _t08E2 = prim <007A (_t08E1, eps0476);
    if _t08E2 {
      _t08E0 = true;
    } else {
      bool _t08E3;
      real _t08E4 = prim |()|00B5<$[]> (fm08CE);
      bool _t08E5 = prim <007A (_t08E4, eps0476);
      if _t08E5 {
        _t08E3 = true;
      } else {
        int _t08E6 = 32;
        _t08E3 = prim >007F (intersectionItter085D, _t08E6);
      }
      _t08E0 = _t08E3;
    }
    if _t08E0 {
      intersectionItter085D = 0;
      bool _t08E7;
      real _t08E8 = prim |()|00B5<$[]> (fm08CE);
      bool _t08E9 = prim >0080 (_t08E8, eps0476);
      if _t08E9 {
        real _t08EA = prim |()|00B5<$[]> (fa089C);
        _t08E7 = prim >0080 (_t08EA, eps0476);
      } else {
        _t08E7 = false;
      }
      if _t08E7 {
        int _t08EB = 1;
        itter085C = prim +0015 (itter085C, _t08EB);
        bool _t08EC = prim >=007D (itter085C, len0857);
        if _t08EC {
          string _t08ED = "Fin pixel=============================\n";
          print (_t08ED);
          stabilize;
        }
        int _t08EE = prim +0015 (offset0854, itter085C);
        interval085F = prim $dynsub01C2<vec2> (times0478, _t08EE);
        int _t08EF = prim +0015 (offset0854, itter085C);
        int _t08F0 = prim $dynsub01C2<int> (cells0479, _t08EF);
        cc0862 = prim $dynsub01C2<Femdata: MeshCell> (0cell_a0467, _t08F0);
        s0860 = interval085F[0];
        e0861 = interval085F[1];
        Femdata: FuncCell fc0953;
        int _t0954 = extractFemItem(CellIndex(MeshCell), int, cc0862);
        Femdata: FuncCell _t0955 = loadFem(FuncCell, c0474, _t0954);
        fc0953 = _t0955;
        fc0864 = fc0953;
        string _t08F1 = "Next interval!\n";
        print (_t08F1);
        continue;
      } else {
        real _t08F2 = 0.e0;
        real _t08F3 = 0.e0;
        vec2 grad08F4 = [_t08F2, _t08F3];
        real _t08F6 = prim |()|00B5<$[]> (fm08CE);
        bool _t08F7 = prim <007A (_t08F6, eps0476);
        if _t08F7 {
          Femdata: FemFunc _t08F8 = extractFem(fc0864, FemFunc);
          Femdata: FemFunc _t08F9 = extractFem(fc0864, FemFunc);
          Femdata: Space _t08FA = extractFem(_t08F9, Space);
          int _t08FB = extractFemItem(CellIndex(FuncCell), int, fc0864);
          field(2)[] _t08FC = femField(_t08F8,_t08FB,field(2)[],refField,);
          Femdata: Mesh _t08FD = extractFem(cc0862, Mesh);
          Femdata: Mesh _t08FE = extractFem(cc0862, Mesh);
          int _t08FF = extractFemItem(CellIndex(MeshCell), int, cc0862);
          field(2)[2] _t0900 = femField(_t08FD,_t08FF,field(2)[2],InvTransform,_msh_newtonInverse04FB );
          field(2)[] _t0901 = prim ∘0164<#∞; %2; $[]; %2; $[2]> (_t08FC, _t0900);
          field(2)[2] _t0902 = prim ∇00A8<#∞; %2> (_t0901);
          grad08F4 = prim @00A5<#∞; %2; $[2]> (_t0902, midRay08BE);
          out0866 = fmVal08C9;
        }
        real _t0903 = prim |()|00B5<$[]> (fa089C);
        bool _t0904 = prim <007A (_t0903, eps0476);
        if _t0904 {
          cup08B4 = s0860;
          Femdata: FemFunc _t0905 = extractFem(fc0864, FemFunc);
          Femdata: FemFunc _t0906 = extractFem(fc0864, FemFunc);
          Femdata: Space _t0907 = extractFem(_t0906, Space);
          int _t0908 = extractFemItem(CellIndex(FuncCell), int, fc0864);
          field(2)[] _t0909 = femField(_t0905,_t0908,field(2)[],refField,);
          Femdata: Mesh _t090A = extractFem(cc0862, Mesh);
          Femdata: Mesh _t090B = extractFem(cc0862, Mesh);
          int _t090C = extractFemItem(CellIndex(MeshCell), int, cc0862);
          field(2)[2] _t090D = femField(_t090A,_t090C,field(2)[2],InvTransform,_msh_newtonInverse04FB );
          field(2)[] _t090E = prim ∘0164<#∞; %2; $[]; %2; $[2]> (_t0909, _t090D);
          field(2)[2] _t090F = prim ∇00A8<#∞; %2> (_t090E);
          grad08F4 = prim @00A5<#∞; %2; $[2]> (_t090F, startRay087D);
          out0866 = faVal0897;
        }
        string _t0910 = "Out val:";
        string _t0911 = "\n";
        print (_t0910, out0866, _t0911);
        string _t0912 = "Grad val:";
        string _t0913 = "\n";
        print (_t0912, grad08F4, _t0913);
        real _t0914 = 0.1e1;
        real _t0915 = 0.1e1;
        real _t0916 = 0.1e1;
        vec3 mcol0917 = [_t0914, _t0915, _t0916];
        bool _t0918 = prim !=0088 (cmin0484, cmax0485);
        if _t0918 {
          int _t0919 = -1;
          real _t091A = (real)_t0919;
          real _t091B = 0.1e1;
          real _t091C = prim lerp0098<$[]> (_t091A, _t091B, cmin0484, out0866, cmax0485);
          mcol0917 = prim @00A5<#0; %1; $[3]> (CM0829, _t091C);
        }
        if light0486 {
          real _t091D = grad08F4[0];
          real _t091E = grad08F4[1];
          int _t091F = -1;
          real _t0920 = (real)_t091F;
          vec3 N0921 = [_t091D, _t091E, _t0920];
          vec3 _t0922 = prim normalize0137<$[3]> (rayVec084B);
          vec3 _t0923 = prim unary -008B<$[3]> (_t0922);
          vec3 _t0924 = prim +0017<$[3]> (_t0923, L082D);
          vec3 H0925 = prim normalize0137<$[3]> (_t0924);
          vec3 lightColor0926 = prim lerp0098<$[3]> (mcnear047A, mcfar047E, camNearVsp0850, cup08B4, camFarVsp0851);
          vec3 ambientTerm0927 = prim *0036<$[3]> (phongKa0487, mcol0917);
          vec3 _t0928 = prim modulate0129<%3> (mcol0917, lightColor0926);
          vec3 _t0929 = prim *0036<$[3]> (phongKd0488, _t0928);
          real _t092A = 0.e0;
          real _t092B = prim •00CE<$[3]; $[3]; $[]> (N0921, L082D);
          real _t092C = prim max0125 (_t092A, _t092B);
          vec3 diffuse092D = prim *0038<$[3]> (_t0929, _t092C);
          vec3 _t092E = prim *0036<$[3]> (phongKs0489, lightColor0926);
          real _t092F = 0.e0;
          real _t0930 = prim •00CE<$[3]; $[3]; $[]> (N0921, H0925);
          real _t0931 = prim max0125 (_t092F, _t0930);
          real _t0932 = prim ^0069 (_t0931, phongSp048A);
          vec3 specular0933 = prim *0038<$[3]> (_t092E, _t0932);
          vec3 _t0934 = prim +0017<$[3]> (ambientTerm0927, diffuse092D);
          vec3 fin0935 = prim +0017<$[3]> (_t0934, specular0933);
          real _t0936 = fin0935[0];
          real _t0937 = fin0935[1];
          real _t0938 = fin0935[2];
          real _t0939 = 0.1e1;
          rgba0867 = [_t0936, _t0937, _t0938, _t0939];
        } else {
          real _t093A = mcol0917[0];
          real _t093B = mcol0917[1];
          real _t093C = mcol0917[2];
          real _t093D = 0.1e1;
          rgba0867 = [_t093A, _t093B, _t093C, _t093D];
        }
        stabilize;
      }
    } else {
      string _t093E = "=========\n";
      print (_t093E);
    }
  }
}
grid(2) {
  int _t093F = 0;
  int _t0940 = 1;
  int _t0941 = prim -0024 (iresU0460, _t0940);
  int[] _t0942 = prim $range01C3 (_t093F, _t0941);
  foreach vi0948 in _t0942 {
    int _t0943 = 0;
    int _t0944 = 1;
    int _t0945 = prim -0024 (iresV0461, _t0944);
    int[] _t0946 = prim $range01C3 (_t0943, _t0945);
    foreach ui0947 in _t0946 {
      new ray (ui0947, vi0948);
    }
  }
}
/* Program end */
/* Simplified Program (after after contraction (2)) start */
properties: GlobalInit,StrandArray,HasStartMethod,ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[]),HasInputs,HasGlobals
input real isoval0451 = <default>;
input real thick0452 = <default>;
input vec3 camEye0453 = <default>;
input vec3 camAt0457 = <default>;
input vec3 camUp045B = <default>;
input real camFOV045F = <default>;
input int iresU0460 = <default>;
input int iresV0461 = <default>;
input real camNear0462 = <default>;
input real camFar0463 = <default>;
input real refStep0464 = <default>;
input real rayStep0465 = <default>;
input FemData:Mesh a0466;
input FemData:Space 0b0472_intermedateGlobal0473;
input FemData:FemFunc 0c0474_intermedateGlobal0475;
input real eps0476 = <default>;
input int[] indecies0477;
input vec2[] times0478;
input int[] cells0479;
input vec3 mcnear047A("material color at near clipping plane (for depth cuing)") = <default>;
input vec3 mcfar047E("material color at far clipping plane") = <default>;
input image(1)[3] cmap0483("univariate colormap") = image("/home/teocollin/gitcode/diderot/tests/lipRay/find/cmap.nrrd");
input real cmin0484("value mapped to min end of colormap") = <default>;
input real cmax0485("value mapped to max end of colormap. By default cmin==cmax==0, which disables this colormapping") = <default>;
input bool light0486 = <default>;
input real phongKa0487("Blinn-Phong ambient component") = <default>;
input real phongKd0488("Blinn-Phong diffuse component") = <default>;
input real phongKs0489("Blinn-Phong specular component") = <default>;
input real phongSp048A("Blinn-Phong specularity exponent") = <default>;
input real maxAlpha048B("maximum opacity on rendered surface") = <default>;
input vec3 lightVsp048C = <default>;
constants {
  isoval0451 = 0.2e0;
  thick0452 = 0.7e-1;
  real _t0454 = 0.3e1;
  real _t0455 = -0.3e1;
  real _t0456 = 0.3e1;
  camEye0453 = [_t0454, _t0455, _t0456];
  real _t0458 = 0.5e0;
  real _t0459 = 0.5e0;
  real _t045A = 0.5e0;
  camAt0457 = [_t0458, _t0459, _t045A];
  real _t045C = 0.e0;
  real _t045D = 0.e0;
  real _t045E = 0.1e1;
  camUp045B = [_t045C, _t045D, _t045E];
  camFOV045F = 0.137e2;
  iresU0460 = 10;
  iresV0461 = 10;
  camNear0462 = -0.2e1;
  camFar0463 = 0.5e1;
  refStep0464 = 0.1e1;
  rayStep0465 = 0.1e-1;
  eps0476 = 0.1e-5;
  real _t047B = 0.1e1;
  real _t047C = 0.1e1;
  real _t047D = 0.1e1;
  mcnear047A = [_t047B, _t047C, _t047D];
  real _t047F = 0.1e1;
  real _t0480 = 0.1e1;
  real _t0481 = 0.1e1;
  mcfar047E = [_t047F, _t0480, _t0481];
  cmin0484 = 0.e0;
  cmax0485 = 0.1e1;
  light0486 = true;
  phongKa0487 = 0.5e0;
  phongKd0488 = 0.5e0;
  phongKs0489 = 0.e0;
  phongSp048A = 0.6e2;
  maxAlpha048B = 0.1e1;
  real _t048D = 0.e0;
  real _t048E = 0.e0;
  real _t048F = 0.1e1;
  lightVsp048C = [_t048D, _t048E, _t048F];
}
global Femdata: MeshCell[] 0cell_a0467;
global Femdata: Space b0472;
global Femdata: FemFunc c0474;
global real camDist0815;
global real camNearVsp0816;
global real camFarVsp0817;
global vec3 camN0819;
global vec3 camU081B;
global vec3 camV081C;
global real camVmax0822;
global real camUmax0826;
global field#0(1)[3] CM0829;
global vec3 L082D;
function Femdata: MeshPos#5 _msh_newtonInverse04FB (vec2 pos04FC, int cellInt04FD, Femdata: Mesh mesh04FE)
{
  real _t04FF = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t0500 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  xn0501 = [_t04FF, _t0500];
  field(2)[2] _t0502 = femField(mesh04FE,cellInt04FD,field(2)[2],Transform,);
  field(2)[2,2] _t0503 = prim ∇⊗00AD<#∞; %2; $[]; %2> (_t0502);
  field(2)[2,2] _t0504 = prim inv015B<#∞; %2> (_t0503);
  real _t0505 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t0506 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  vec2 _t0507 = [_t0505, _t0506];
  A0508 = prim @00A5<#∞; %2; $[2,2]> (_t0504, _t0507);
  int _t0509 = 0;
  int _t050A = 16;
  int[] _t050B = prim $range01C3 (_t0509, _t050A);
  foreach itter052F in _t050B {
    field(2)[2] _t050C = femField(mesh04FE,cellInt04FD,field(2)[2],Transform,);
    field(2)[2] _t050D = prim -002E<#∞; %2; $[2]> (_t050C, pos04FC);
    field(2)[2] _t050E = prim •00D4<#∞; %2; $[2,2]; $[2]; $[2]> (A0508, _t050D);
    delta050F = prim @00A5<#∞; %2; $[2]> (_t050E, xn0501);
    xn0501 = prim -0026<$[2]> (xn0501, delta050F);
    real _t0510 = 0.1e-7;
    real _t0511 = 0.1e-7;
    real _t0512 = prim *0034 (_t0510, _t0511);
    real _t0513 = prim •00CE<$[2]; $[2]; $[]> (delta050F, delta050F);
    bool _t0514 = prim >=007E (_t0512, _t0513);
    if _t0514 {
      real _t0515 = 0.1e1;
      real _t0516 = 0.1e-8;
      real _t0517 = prim +0017<$[]> (_t0515, _t0516);
      real _t0518 = 0.1e1;
      real _t0519 = 0.1e1;
      vec2 _t051A = [_t0518, _t0519];
      real _t051B = prim •00CE<$[2]; $[2]; $[]> (_t051A, xn0501);
      bool _t051C = prim >0080 (_t0517, _t051B);
      real _t051D = 0.1e-8;
      real _t051E = 0.1e-8;
      vec2 _t051F = [_t051D, _t051E];
      vec2 _t0520 = prim +0017<$[2]> (_t051F, xn0501);
      real _t0521 = _t0520[0];
      real _t0522 = -0.e0;
      bool _t0523 = prim >0080 (_t0521, _t0522);
      real _t0524 = 0.1e-8;
      real _t0525 = 0.1e-8;
      vec2 _t0526 = [_t0524, _t0525];
      vec2 _t0527 = prim +0017<$[2]> (_t0526, xn0501);
      real _t0528 = _t0527[1];
      real _t0529 = -0.e0;
      bool _t052A = prim >0080 (_t0528, _t0529);
      bool _t052B = prim $and01C4 (_t0523, _t052A);
      bool _t052C = prim $and01C4 (_t051C, _t052B);
      if _t052C {
        Femdata: MeshPos _t052D = extractFemItemN((mesh04FE, cellInt04FD, xn0501, pos04FC),AllBuild(MeshPos),);
        return _t052D;
      } else {
        Femdata: MeshPos _t052E = extractFemItemN((mesh04FE),InvalidBuild(MeshPos),);
        return _t052E;
      }
    }
  }
  Femdata: MeshPos _t0530 = extractFemItemN((mesh04FE),InvalidBuild(MeshPos),);
  return _t0530;
}
function int[2]#5 nextCell40547 (int faceIdx05BA, int cell05BB, Femdata: Mesh mesh05BC)
{
  int _t05BD = 6;
  int _t05BE = prim *0033 (cell05BB, _t05BD);
  int _t05BF = 2;
  int _t05C0 = prim *0033 (faceIdx05BA, _t05BF);
  int _t05C1 = prim +0015 (_t05BE, _t05C0);
  int[2] _t05C2 = extractFemItemN((mesh05BC, _t05C1),CellFaceCell(Mesh),);
  return _t05C2;
}
globalInit {
  int _t046A = 0;
  int _t0468 = 1;
  int _t046C = extractFemItem(NumCell(Mesh), int, a0466);
  int _t046B = prim -0024 (_t046C, _t0468);
  int[] _t046F = prim $range01C3 (_t046A, _t046B);
  Femdata: MeshCell[] _t0470 = {};
  foreach _t046E in _t046F {
    Femdata: MeshCell _t0471 = loadFem(MeshCell, a0466, _t046E);
    _t0470 = prim @0010<Femdata: MeshCell> (_t0470, _t0471);
  }
  0cell_a0467 = _t0470;
  b0472 = loadFem(Space, 0b0472_intermedateGlobal0473, a0466);
  c0474 = loadFem(FemFunc, 0c0474_intermedateGlobal0475, b0472);
  vec3 _t0814 = prim -0026<$[3]> (camAt0457, camEye0453);
  camDist0815 = prim |()|00B5<$[3]> (_t0814);
  camNearVsp0816 = prim +0017<$[]> (camNear0462, camDist0815);
  camFarVsp0817 = prim +0017<$[]> (camFar0463, camDist0815);
  vec3 _t0818 = prim -0026<$[3]> (camAt0457, camEye0453);
  camN0819 = prim normalize0137<$[3]> (_t0818);
  vec3 _t081A = prim ×00BE (camN0819, camUp045B);
  camU081B = prim normalize0137<$[3]> (_t081A);
  camV081C = prim ×00BE (camU081B, camN0819);
  real _t081D = 0.314159265358979323846264338327950288e1;
  real _t081E = prim *0034 (camFOV045F, _t081D);
  real _t081F = 0.36e3;
  real _t0820 = prim /0055 (_t081E, _t081F);
  real _t0821 = prim tan0179 (_t0820);
  camVmax0822 = prim *0034 (_t0821, camDist0815);
  real _t0823 = (real)iresU0460;
  real _t0824 = prim *0034 (camVmax0822, _t0823);
  real _t0825 = (real)iresV0461;
  camUmax0826 = prim /0055 (_t0824, _t0825);
  kernel _t0827 = tent;
  IMAGE1D<double[3]> img0828 = clamp(cmap0483);
  CM0829 = prim ⊛0074<#0; %1; $[3]> (_t0827, img0828);
  tensor[3,3] _t082A = [camU081B, camV081C, camN0819];
  tensor[3,3] _t082B = prim transpose0145<%3; %3> (_t082A);
  vec3 _t082C = prim normalize0137<$[3]> (lightVsp048C);
  L082D = prim •00CE<$[3,3]; $[3]; $[3]> (_t082B, _t082C);
}
strand ray (int ui0837, int vi0838) {
  real rayU0839;
  real rayV0840;
  vec3 UV0847;
  vec3 rayOrig084A;
  vec3 rayVec084B;
  real camNearVsp0850;
  real camFarVsp0851;
  int offset0854;
  int len0857;
  int itter085C;
  int intersectionItter085D;
  int idx085E;
  vec2 interval085F;
  real s0860;
  real e0861;
  Femdata: MeshCell cc0862;
  Femdata: FuncCell fc0864;
  output real out0866;
  output vec4 rgba0867;
  {
    real _t083A = prim unary -008B<$[]> (camUmax0826);
    real _t083B = -0.5e0;
    real _t083C = (real)ui0837;
    real _t083D = (real)iresU0460;
    real _t083E = 0.5e0;
    real _t083F = prim -0026<$[]> (_t083D, _t083E);
    rayU0839 = prim lerp0098<$[]> (_t083A, camUmax0826, _t083B, _t083C, _t083F);
    real _t0841 = prim unary -008B<$[]> (camVmax0822);
    real _t0842 = -0.5e0;
    real _t0843 = (real)vi0838;
    real _t0844 = (real)iresV0461;
    real _t0845 = 0.5e0;
    real _t0846 = prim -0026<$[]> (_t0844, _t0845);
    rayV0840 = prim lerp0098<$[]> (_t0841, camVmax0822, _t0842, _t0843, _t0846);
    vec3 _t0848 = prim *0036<$[3]> (rayU0839, camU081B);
    vec3 _t0849 = prim *0036<$[3]> (rayV0840, camV081C);
    UV0847 = prim +0017<$[3]> (_t0848, _t0849);
    rayOrig084A = prim +0017<$[3]> (camEye0453, UV0847);
    real _t084C = 0.e0;
    real _t084D = 0.e0;
    real _t084E = 0.e0;
    vec3 _t084F = [_t084C, _t084D, _t084E];
    rayVec084B = prim +0017<$[3]> (camN0819, _t084F);
    camNearVsp0850 = camNearVsp0816;
    camFarVsp0851 = camFarVsp0817;
    int _t0855 = prim *0033 (ui0837, iresV0461);
    int _t0856 = prim +0015 (_t0855, vi0838);
    offset0854 = prim $dynsub01C2<int> (indecies0477, _t0856);
    int _t0858 = prim *0033 (iresU0460, iresV0461);
    int _t0859 = prim *0033 (ui0837, iresV0461);
    int _t085A = prim +0015 (_t0858, _t0859);
    int _t085B = prim +0015 (_t085A, vi0838);
    len0857 = prim $dynsub01C2<int> (indecies0477, _t085B);
    itter085C = 0;
    intersectionItter085D = 0;
    idx085E = prim +0015 (offset0854, itter085C);
    interval085F = prim $dynsub01C2<vec2> (times0478, idx085E);
    s0860 = interval085F[0];
    e0861 = interval085F[1];
    int _t0863 = 0;
    cc0862 = prim $dynsub01C2<Femdata: MeshCell> (0cell_a0467, _t0863);
    Femdata: FuncCell fc094D;
    int _t094E = extractFemItem(CellIndex(MeshCell), int, cc0862);
    Femdata: FuncCell _t094F = loadFem(FuncCell, c0474, _t094E);
    fc094D = _t094F;
    fc0864 = fc094D;
    out0866 = 0.e0;
    real _t0868 = 0.e0;
    real _t0869 = 0.e0;
    real _t086A = 0.e0;
    real _t086B = 0.e0;
    rgba0867 = [_t0868, _t0869, _t086A, _t086B];
  }
  start
  {
    int _t086C = 0;
    bool _t086D = prim ==0082 (len0857, _t086C);
    if _t086D {
      stabilize;
    }
    int _t086E = prim $dynsub01C2<int> (cells0479, idx085E);
    cc0862 = prim $dynsub01C2<Femdata: MeshCell> (0cell_a0467, _t086E);
    Femdata: FuncCell fc0950;
    int _t0951 = extractFemItem(CellIndex(MeshCell), int, cc0862);
    Femdata: FuncCell _t0952 = loadFem(FuncCell, c0474, _t0951);
    fc0950 = _t0952;
    fc0864 = fc0950;
  }
  update
  {
    string _t086F = "Interval:";
    vec2 _t0870 = [s0860, e0861];
    string _t0871 = "\n";
    print (_t086F, _t0870, _t0871);
    string _t0872 = "inner itter:";
    string _t0873 = "\n";
    print (_t0872, intersectionItter085D, _t0873);
    string _t0874 = "Outer itter:";
    string _t0875 = "\n";
    print (_t0874, itter085C, _t0875);
    real _t0876 = rayOrig084A[0];
    real _t0877 = rayOrig084A[1];
    vec2 _t0878 = [_t0876, _t0877];
    real _t0879 = rayVec084B[0];
    real _t087A = rayVec084B[1];
    vec2 _t087B = [_t0879, _t087A];
    vec2 _t087C = prim *0036<$[2]> (s0860, _t087B);
    vec2 startRay087D = prim +0017<$[2]> (_t0878, _t087C);
    real _t087E = rayOrig084A[0];
    real _t087F = rayOrig084A[1];
    vec2 _t0880 = [_t087E, _t087F];
    real _t0881 = rayVec084B[0];
    real _t0882 = rayVec084B[1];
    vec2 _t0883 = [_t0881, _t0882];
    vec2 _t0884 = prim *0036<$[2]> (e0861, _t0883);
    vec2 endRay0885 = prim +0017<$[2]> (_t0880, _t0884);
    Femdata: Mesh _t0886 = extractFem(cc0862, Mesh);
    Femdata: Mesh _t0887 = extractFem(cc0862, Mesh);
    int _t0888 = extractFemItem(CellIndex(MeshCell), int, cc0862);
    field(2)[2] _t0889 = femField(_t0886,_t0888,field(2)[2],InvTransform,_msh_newtonInverse04FB );
    vec2 invertA088A = prim @00A5<#∞; %2; $[2]> (_t0889, startRay087D);
    Femdata: Mesh _t088B = extractFem(cc0862, Mesh);
    Femdata: Mesh _t088C = extractFem(cc0862, Mesh);
    int _t088D = extractFemItem(CellIndex(MeshCell), int, cc0862);
    field(2)[2] _t088E = femField(_t088B,_t088D,field(2)[2],InvTransform,_msh_newtonInverse04FB );
    vec2 invertB088F = prim @00A5<#∞; %2; $[2]> (_t088E, endRay0885);
    string _t0890 = "inverses:";
    string _t0891 = "\n";
    print (_t0890, invertA088A, invertB088F, _t0891);
    Femdata: FemFunc _t0892 = extractFem(fc0864, FemFunc);
    Femdata: FemFunc _t0893 = extractFem(fc0864, FemFunc);
    Femdata: Space _t0894 = extractFem(_t0893, Space);
    int _t0895 = extractFemItem(CellIndex(FuncCell), int, fc0864);
    field(2)[] _t0896 = femField(_t0892,_t0895,field(2)[],refField,);
    real faVal0897 = prim @00A5<#∞; %2; $[]> (_t0896, invertA088A);
    real _t0898 = rayVec084B[2];
    real _t0899 = prim *0034 (_t0898, s0860);
    real _t089A = prim -0026<$[]> (faVal0897, _t0899);
    real _t089B = rayOrig084A[2];
    real fa089C = prim -0026<$[]> (_t089A, _t089B);
    Femdata: FemFunc _t089D = extractFem(fc0864, FemFunc);
    Femdata: FemFunc _t089E = extractFem(fc0864, FemFunc);
    Femdata: Space _t089F = extractFem(_t089E, Space);
    int _t08A0 = extractFemItem(CellIndex(FuncCell), int, fc0864);
    field(2)[] _t08A1 = femField(_t089D,_t08A0,field(2)[],refField,);
    real _t08A2 = prim @00A5<#∞; %2; $[]> (_t08A1, invertB088F);
    real _t08A3 = rayVec084B[2];
    real _t08A4 = prim *0034 (_t08A3, e0861);
    real _t08A5 = prim -0026<$[]> (_t08A2, _t08A4);
    real _t08A6 = rayOrig084A[2];
    real fb08A7 = prim -0026<$[]> (_t08A5, _t08A6);
    string _t08A8 = "Vals:";
    vec2 _t08A9 = [fa089C, fb08A7];
    string _t08AA = "\n";
    print (_t08A8, _t08A9, _t08AA);
    real _t08AB = prim -0026<$[]> (fa089C, fb08A7);
    real _t08AC = prim |()|00B5<$[]> (_t08AB);
    bool _t08AD = prim <007A (_t08AC, eps0476);
    if _t08AD {
      real _t08AE = prim |()|00B5<$[]> (fa089C);
      bool _t08AF = prim >0080 (_t08AE, eps0476);
      if _t08AF {
        s0860 = prim +0017<$[]> (s0860, eps0476);
        continue;
      }
    }
    real _t08B0 = prim *0034 (s0860, fb08A7);
    real _t08B1 = prim *0034 (e0861, fa089C);
    real _t08B2 = prim -0026<$[]> (_t08B0, _t08B1);
    real _t08B3 = prim -0026<$[]> (fb08A7, fa089C);
    real cup08B4 = prim /0055 (_t08B2, _t08B3);
    string _t08B5 = "Mid time:";
    string _t08B6 = "\n";
    print (_t08B5, cup08B4, _t08B6);
    real _t08B7 = rayOrig084A[0];
    real _t08B8 = rayOrig084A[1];
    vec2 _t08B9 = [_t08B7, _t08B8];
    real _t08BA = rayVec084B[0];
    real _t08BB = rayVec084B[1];
    vec2 _t08BC = [_t08BA, _t08BB];
    vec2 _t08BD = prim *0036<$[2]> (cup08B4, _t08BC);
    vec2 midRay08BE = prim +0017<$[2]> (_t08B9, _t08BD);
    Femdata: Mesh _t08BF = extractFem(cc0862, Mesh);
    Femdata: Mesh _t08C0 = extractFem(cc0862, Mesh);
    int _t08C1 = extractFemItem(CellIndex(MeshCell), int, cc0862);
    field(2)[2] _t08C2 = femField(_t08BF,_t08C1,field(2)[2],InvTransform,_msh_newtonInverse04FB );
    vec2 invertC08C3 = prim @00A5<#∞; %2; $[2]> (_t08C2, midRay08BE);
    Femdata: FemFunc _t08C4 = extractFem(fc0864, FemFunc);
    Femdata: FemFunc _t08C5 = extractFem(fc0864, FemFunc);
    Femdata: Space _t08C6 = extractFem(_t08C5, Space);
    int _t08C7 = extractFemItem(CellIndex(FuncCell), int, fc0864);
    field(2)[] _t08C8 = femField(_t08C4,_t08C7,field(2)[],refField,);
    real fmVal08C9 = prim @00A5<#∞; %2; $[]> (_t08C8, invertC08C3);
    real _t08CA = rayVec084B[2];
    real _t08CB = prim *0034 (_t08CA, cup08B4);
    real _t08CC = prim -0026<$[]> (fmVal08C9, _t08CB);
    real _t08CD = rayOrig084A[2];
    real fm08CE = prim -0026<$[]> (_t08CC, _t08CD);
    string _t08CF = "all vals:";
    vec3 _t08D0 = [fa089C, fm08CE, fb08A7];
    string _t08D1 = "\n";
    print (_t08CF, _t08D0, _t08D1);
    int _t08D2 = 1;
    intersectionItter085D = prim +0015 (intersectionItter085D, _t08D2);
    int _t08D3;
    real _t096B = 0.e0;
    bool _t096C = prim >0080 (fa089C, _t096B);
    if _t096C {
      int _t096D = 1;
      _t08D3 = _t096D;
    } else {
      real _t096E = 0.e0;
      bool _t096F = prim <007A (fa089C, _t096E);
      if _t096F {
        int _t0970 = -1;
        _t08D3 = _t0970;
      } else {
        int _t0971 = 0;
        _t08D3 = _t0971;
      }
    }
    int _t08D4;
    real _t0964 = 0.e0;
    bool _t0965 = prim >0080 (fm08CE, _t0964);
    if _t0965 {
      int _t0966 = 1;
      _t08D4 = _t0966;
    } else {
      real _t0967 = 0.e0;
      bool _t0968 = prim <007A (fm08CE, _t0967);
      if _t0968 {
        int _t0969 = -1;
        _t08D4 = _t0969;
      } else {
        int _t096A = 0;
        _t08D4 = _t096A;
      }
    }
    int _t08D5 = prim *0033 (_t08D3, _t08D4);
    int _t08D6 = 0;
    bool _t08D7 = prim <0079 (_t08D5, _t08D6);
    if _t08D7 {
      e0861 = cup08B4;
    } else {
      int _t08D8;
      real _t095D = 0.e0;
      bool _t095E = prim >0080 (fa089C, _t095D);
      if _t095E {
        int _t095F = 1;
        _t08D8 = _t095F;
      } else {
        real _t0960 = 0.e0;
        bool _t0961 = prim <007A (fa089C, _t0960);
        if _t0961 {
          int _t0962 = -1;
          _t08D8 = _t0962;
        } else {
          int _t0963 = 0;
          _t08D8 = _t0963;
        }
      }
      int _t08D9;
      real _t0956 = 0.e0;
      bool _t0957 = prim >0080 (fm08CE, _t0956);
      if _t0957 {
        int _t0958 = 1;
        _t08D9 = _t0958;
      } else {
        real _t0959 = 0.e0;
        bool _t095A = prim <007A (fm08CE, _t0959);
        if _t095A {
          int _t095B = -1;
          _t08D9 = _t095B;
        } else {
          int _t095C = 0;
          _t08D9 = _t095C;
        }
      }
      int _t08DA = prim *0033 (_t08D8, _t08D9);
      int _t08DB = 0;
      bool _t08DC = prim >007F (_t08DA, _t08DB);
      if _t08DC {
        s0860 = cup08B4;
      }
    }
    string _t08DD = "new interval:";
    vec2 _t08DE = [s0860, e0861];
    string _t08DF = "\n";
    print (_t08DD, _t08DE, _t08DF);
    bool _t08E0;
    real _t08E1 = prim |()|00B5<$[]> (fa089C);
    bool _t08E2 = prim <007A (_t08E1, eps0476);
    if _t08E2 {
      _t08E0 = true;
    } else {
      bool _t08E3;
      real _t08E4 = prim |()|00B5<$[]> (fm08CE);
      bool _t08E5 = prim <007A (_t08E4, eps0476);
      if _t08E5 {
        _t08E3 = true;
      } else {
        int _t08E6 = 32;
        _t08E3 = prim >007F (intersectionItter085D, _t08E6);
      }
      _t08E0 = _t08E3;
    }
    if _t08E0 {
      intersectionItter085D = 0;
      bool _t08E7;
      real _t08E8 = prim |()|00B5<$[]> (fm08CE);
      bool _t08E9 = prim >0080 (_t08E8, eps0476);
      if _t08E9 {
        real _t08EA = prim |()|00B5<$[]> (fa089C);
        _t08E7 = prim >0080 (_t08EA, eps0476);
      } else {
        _t08E7 = false;
      }
      if _t08E7 {
        int _t08EB = 1;
        itter085C = prim +0015 (itter085C, _t08EB);
        bool _t08EC = prim >=007D (itter085C, len0857);
        if _t08EC {
          string _t08ED = "Fin pixel=============================\n";
          print (_t08ED);
          stabilize;
        }
        int _t08EE = prim +0015 (offset0854, itter085C);
        interval085F = prim $dynsub01C2<vec2> (times0478, _t08EE);
        int _t08EF = prim +0015 (offset0854, itter085C);
        int _t08F0 = prim $dynsub01C2<int> (cells0479, _t08EF);
        cc0862 = prim $dynsub01C2<Femdata: MeshCell> (0cell_a0467, _t08F0);
        s0860 = interval085F[0];
        e0861 = interval085F[1];
        Femdata: FuncCell fc0953;
        int _t0954 = extractFemItem(CellIndex(MeshCell), int, cc0862);
        Femdata: FuncCell _t0955 = loadFem(FuncCell, c0474, _t0954);
        fc0953 = _t0955;
        fc0864 = fc0953;
        string _t08F1 = "Next interval!\n";
        print (_t08F1);
        continue;
      } else {
        real _t08F2 = 0.e0;
        real _t08F3 = 0.e0;
        vec2 grad08F4 = [_t08F2, _t08F3];
        real _t08F6 = prim |()|00B5<$[]> (fm08CE);
        bool _t08F7 = prim <007A (_t08F6, eps0476);
        if _t08F7 {
          Femdata: FemFunc _t08F8 = extractFem(fc0864, FemFunc);
          Femdata: FemFunc _t08F9 = extractFem(fc0864, FemFunc);
          Femdata: Space _t08FA = extractFem(_t08F9, Space);
          int _t08FB = extractFemItem(CellIndex(FuncCell), int, fc0864);
          field(2)[] _t08FC = femField(_t08F8,_t08FB,field(2)[],refField,);
          Femdata: Mesh _t08FD = extractFem(cc0862, Mesh);
          Femdata: Mesh _t08FE = extractFem(cc0862, Mesh);
          int _t08FF = extractFemItem(CellIndex(MeshCell), int, cc0862);
          field(2)[2] _t0900 = femField(_t08FD,_t08FF,field(2)[2],InvTransform,_msh_newtonInverse04FB );
          field(2)[] _t0901 = prim ∘0164<#∞; %2; $[]; %2; $[2]> (_t08FC, _t0900);
          field(2)[2] _t0902 = prim ∇00A8<#∞; %2> (_t0901);
          grad08F4 = prim @00A5<#∞; %2; $[2]> (_t0902, midRay08BE);
          out0866 = fmVal08C9;
        }
        real _t0903 = prim |()|00B5<$[]> (fa089C);
        bool _t0904 = prim <007A (_t0903, eps0476);
        if _t0904 {
          cup08B4 = s0860;
          Femdata: FemFunc _t0905 = extractFem(fc0864, FemFunc);
          Femdata: FemFunc _t0906 = extractFem(fc0864, FemFunc);
          Femdata: Space _t0907 = extractFem(_t0906, Space);
          int _t0908 = extractFemItem(CellIndex(FuncCell), int, fc0864);
          field(2)[] _t0909 = femField(_t0905,_t0908,field(2)[],refField,);
          Femdata: Mesh _t090A = extractFem(cc0862, Mesh);
          Femdata: Mesh _t090B = extractFem(cc0862, Mesh);
          int _t090C = extractFemItem(CellIndex(MeshCell), int, cc0862);
          field(2)[2] _t090D = femField(_t090A,_t090C,field(2)[2],InvTransform,_msh_newtonInverse04FB );
          field(2)[] _t090E = prim ∘0164<#∞; %2; $[]; %2; $[2]> (_t0909, _t090D);
          field(2)[2] _t090F = prim ∇00A8<#∞; %2> (_t090E);
          grad08F4 = prim @00A5<#∞; %2; $[2]> (_t090F, startRay087D);
          out0866 = faVal0897;
        }
        string _t0910 = "Out val:";
        string _t0911 = "\n";
        print (_t0910, out0866, _t0911);
        string _t0912 = "Grad val:";
        string _t0913 = "\n";
        print (_t0912, grad08F4, _t0913);
        real _t0914 = 0.1e1;
        real _t0915 = 0.1e1;
        real _t0916 = 0.1e1;
        vec3 mcol0917 = [_t0914, _t0915, _t0916];
        bool _t0918 = prim !=0088 (cmin0484, cmax0485);
        if _t0918 {
          int _t0919 = -1;
          real _t091A = (real)_t0919;
          real _t091B = 0.1e1;
          real _t091C = prim lerp0098<$[]> (_t091A, _t091B, cmin0484, out0866, cmax0485);
          mcol0917 = prim @00A5<#0; %1; $[3]> (CM0829, _t091C);
        }
        if light0486 {
          real _t091D = grad08F4[0];
          real _t091E = grad08F4[1];
          int _t091F = -1;
          real _t0920 = (real)_t091F;
          vec3 N0921 = [_t091D, _t091E, _t0920];
          vec3 _t0922 = prim normalize0137<$[3]> (rayVec084B);
          vec3 _t0923 = prim unary -008B<$[3]> (_t0922);
          vec3 _t0924 = prim +0017<$[3]> (_t0923, L082D);
          vec3 H0925 = prim normalize0137<$[3]> (_t0924);
          vec3 lightColor0926 = prim lerp0098<$[3]> (mcnear047A, mcfar047E, camNearVsp0850, cup08B4, camFarVsp0851);
          vec3 ambientTerm0927 = prim *0036<$[3]> (phongKa0487, mcol0917);
          vec3 _t0928 = prim modulate0129<%3> (mcol0917, lightColor0926);
          vec3 _t0929 = prim *0036<$[3]> (phongKd0488, _t0928);
          real _t092A = 0.e0;
          real _t092B = prim •00CE<$[3]; $[3]; $[]> (N0921, L082D);
          real _t092C = prim max0125 (_t092A, _t092B);
          vec3 diffuse092D = prim *0038<$[3]> (_t0929, _t092C);
          vec3 _t092E = prim *0036<$[3]> (phongKs0489, lightColor0926);
          real _t092F = 0.e0;
          real _t0930 = prim •00CE<$[3]; $[3]; $[]> (N0921, H0925);
          real _t0931 = prim max0125 (_t092F, _t0930);
          real _t0932 = prim ^0069 (_t0931, phongSp048A);
          vec3 specular0933 = prim *0038<$[3]> (_t092E, _t0932);
          vec3 _t0934 = prim +0017<$[3]> (ambientTerm0927, diffuse092D);
          vec3 fin0935 = prim +0017<$[3]> (_t0934, specular0933);
          real _t0936 = fin0935[0];
          real _t0937 = fin0935[1];
          real _t0938 = fin0935[2];
          real _t0939 = 0.1e1;
          rgba0867 = [_t0936, _t0937, _t0938, _t0939];
        } else {
          real _t093A = mcol0917[0];
          real _t093B = mcol0917[1];
          real _t093C = mcol0917[2];
          real _t093D = 0.1e1;
          rgba0867 = [_t093A, _t093B, _t093C, _t093D];
        }
        stabilize;
      }
    } else {
      string _t093E = "=========\n";
      print (_t093E);
    }
  }
}
grid(2) {
  int _t093F = 0;
  int _t0940 = 1;
  int _t0941 = prim -0024 (iresU0460, _t0940);
  int[] _t0942 = prim $range01C3 (_t093F, _t0941);
  foreach vi0948 in _t0942 {
    int _t0943 = 0;
    int _t0944 = 1;
    int _t0945 = prim -0024 (iresV0461, _t0944);
    int[] _t0946 = prim $range01C3 (_t0943, _t0945);
    foreach ui0947 in _t0946 {
      new ray (ui0947, vi0948);
    }
  }
}
/* Program end */
/* Simplified Program (after after simplify fields) start */
properties: GlobalInit,StrandArray,HasStartMethod,ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[]),HasInputs,HasGlobals
input real isoval0451 = <default>;
input real thick0452 = <default>;
input vec3 camEye0453 = <default>;
input vec3 camAt0457 = <default>;
input vec3 camUp045B = <default>;
input real camFOV045F = <default>;
input int iresU0460 = <default>;
input int iresV0461 = <default>;
input real camNear0462 = <default>;
input real camFar0463 = <default>;
input real refStep0464 = <default>;
input real rayStep0465 = <default>;
input FemData:Mesh a0466;
input FemData:Space 0b0472_intermedateGlobal0473;
input FemData:FemFunc 0c0474_intermedateGlobal0475;
input real eps0476 = <default>;
input int[] indecies0477;
input vec2[] times0478;
input int[] cells0479;
input vec3 mcnear047A("material color at near clipping plane (for depth cuing)") = <default>;
input vec3 mcfar047E("material color at far clipping plane") = <default>;
input image(1)[3] cmap0483("univariate colormap") = image("/home/teocollin/gitcode/diderot/tests/lipRay/find/cmap.nrrd");
input real cmin0484("value mapped to min end of colormap") = <default>;
input real cmax0485("value mapped to max end of colormap. By default cmin==cmax==0, which disables this colormapping") = <default>;
input bool light0486 = <default>;
input real phongKa0487("Blinn-Phong ambient component") = <default>;
input real phongKd0488("Blinn-Phong diffuse component") = <default>;
input real phongKs0489("Blinn-Phong specular component") = <default>;
input real phongSp048A("Blinn-Phong specularity exponent") = <default>;
input real maxAlpha048B("maximum opacity on rendered surface") = <default>;
input vec3 lightVsp048C = <default>;
constants {
  isoval0451 = 0.2e0;
  thick0452 = 0.7e-1;
  real _t0454 = 0.3e1;
  real _t0455 = -0.3e1;
  real _t0456 = 0.3e1;
  camEye0453 = [_t0454, _t0455, _t0456];
  real _t0458 = 0.5e0;
  real _t0459 = 0.5e0;
  real _t045A = 0.5e0;
  camAt0457 = [_t0458, _t0459, _t045A];
  real _t045C = 0.e0;
  real _t045D = 0.e0;
  real _t045E = 0.1e1;
  camUp045B = [_t045C, _t045D, _t045E];
  camFOV045F = 0.137e2;
  iresU0460 = 10;
  iresV0461 = 10;
  camNear0462 = -0.2e1;
  camFar0463 = 0.5e1;
  refStep0464 = 0.1e1;
  rayStep0465 = 0.1e-1;
  eps0476 = 0.1e-5;
  real _t047B = 0.1e1;
  real _t047C = 0.1e1;
  real _t047D = 0.1e1;
  mcnear047A = [_t047B, _t047C, _t047D];
  real _t047F = 0.1e1;
  real _t0480 = 0.1e1;
  real _t0481 = 0.1e1;
  mcfar047E = [_t047F, _t0480, _t0481];
  cmin0484 = 0.e0;
  cmax0485 = 0.1e1;
  light0486 = true;
  phongKa0487 = 0.5e0;
  phongKd0488 = 0.5e0;
  phongKs0489 = 0.e0;
  phongSp048A = 0.6e2;
  maxAlpha048B = 0.1e1;
  real _t048D = 0.e0;
  real _t048E = 0.e0;
  real _t048F = 0.1e1;
  lightVsp048C = [_t048D, _t048E, _t048F];
}
global Femdata: MeshCell[] 0cell_a0467;
global Femdata: Space b0472;
global Femdata: FemFunc c0474;
global real camDist0815;
global real camNearVsp0816;
global real camFarVsp0817;
global vec3 camN0819;
global vec3 camU081B;
global vec3 camV081C;
global real camVmax0822;
global real camUmax0826;
global field#0(1)[3] CM0829;
global vec3 L082D;
function Femdata: MeshPos#5 _msh_newtonInverse04FB (vec2 pos04FC, int cellInt04FD, Femdata: Mesh mesh04FE)
{
  real _t04FF = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t0500 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  xn0501 = [_t04FF, _t0500];
  field(2)[2] _t0502 = femField(mesh04FE,cellInt04FD,field(2)[2],Transform,);
  field(2)[2,2] _t0503 = prim ∇⊗00AD<#∞; %2; $[]; %2> (_t0502);
  field(2)[2,2] _t0504 = prim inv015B<#∞; %2> (_t0503);
  real _t0505 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t0506 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  vec2 _t0507 = [_t0505, _t0506];
  A0508 = prim @00A5<#∞; %2; $[2,2]> (_t0504, _t0507);
  int _t0509 = 0;
  int _t050A = 16;
  int[] _t050B = prim $range01C3 (_t0509, _t050A);
  foreach itter052F in _t050B {
    field(2)[2] _t050C = femField(mesh04FE,cellInt04FD,field(2)[2],Transform,);
    field(2)[2] _t050D = prim -002E<#∞; %2; $[2]> (_t050C, pos04FC);
    field(2)[2] _t050E = prim •00D4<#∞; %2; $[2,2]; $[2]; $[2]> (A0508, _t050D);
    delta050F = prim @00A5<#∞; %2; $[2]> (_t050E, xn0501);
    xn0501 = prim -0026<$[2]> (xn0501, delta050F);
    real _t0510 = 0.1e-7;
    real _t0511 = 0.1e-7;
    real _t0512 = prim *0034 (_t0510, _t0511);
    real _t0513 = prim •00CE<$[2]; $[2]; $[]> (delta050F, delta050F);
    bool _t0514 = prim >=007E (_t0512, _t0513);
    if _t0514 {
      real _t0515 = 0.1e1;
      real _t0516 = 0.1e-8;
      real _t0517 = prim +0017<$[]> (_t0515, _t0516);
      real _t0518 = 0.1e1;
      real _t0519 = 0.1e1;
      vec2 _t051A = [_t0518, _t0519];
      real _t051B = prim •00CE<$[2]; $[2]; $[]> (_t051A, xn0501);
      bool _t051C = prim >0080 (_t0517, _t051B);
      real _t051D = 0.1e-8;
      real _t051E = 0.1e-8;
      vec2 _t051F = [_t051D, _t051E];
      vec2 _t0520 = prim +0017<$[2]> (_t051F, xn0501);
      real _t0521 = _t0520[0];
      real _t0522 = -0.e0;
      bool _t0523 = prim >0080 (_t0521, _t0522);
      real _t0524 = 0.1e-8;
      real _t0525 = 0.1e-8;
      vec2 _t0526 = [_t0524, _t0525];
      vec2 _t0527 = prim +0017<$[2]> (_t0526, xn0501);
      real _t0528 = _t0527[1];
      real _t0529 = -0.e0;
      bool _t052A = prim >0080 (_t0528, _t0529);
      bool _t052B = prim $and01C4 (_t0523, _t052A);
      bool _t052C = prim $and01C4 (_t051C, _t052B);
      if _t052C {
        Femdata: MeshPos _t052D = extractFemItemN((mesh04FE, cellInt04FD, xn0501, pos04FC),AllBuild(MeshPos),);
        return _t052D;
      } else {
        Femdata: MeshPos _t052E = extractFemItemN((mesh04FE),InvalidBuild(MeshPos),);
        return _t052E;
      }
    }
  }
  Femdata: MeshPos _t0530 = extractFemItemN((mesh04FE),InvalidBuild(MeshPos),);
  return _t0530;
}
function int[2]#5 nextCell40547 (int faceIdx05BA, int cell05BB, Femdata: Mesh mesh05BC)
{
  int _t05BD = 6;
  int _t05BE = prim *0033 (cell05BB, _t05BD);
  int _t05BF = 2;
  int _t05C0 = prim *0033 (faceIdx05BA, _t05BF);
  int _t05C1 = prim +0015 (_t05BE, _t05C0);
  int[2] _t05C2 = extractFemItemN((mesh05BC, _t05C1),CellFaceCell(Mesh),);
  return _t05C2;
}
globalInit {
  int _t046A = 0;
  int _t0468 = 1;
  int _t046C = extractFemItem(NumCell(Mesh), int, a0466);
  int _t046B = prim -0024 (_t046C, _t0468);
  int[] _t046F = prim $range01C3 (_t046A, _t046B);
  Femdata: MeshCell[] _t0470 = {};
  foreach _t046E in _t046F {
    Femdata: MeshCell _t0471 = loadFem(MeshCell, a0466, _t046E);
    _t0470 = prim @0010<Femdata: MeshCell> (_t0470, _t0471);
  }
  0cell_a0467 = _t0470;
  b0472 = loadFem(Space, 0b0472_intermedateGlobal0473, a0466);
  c0474 = loadFem(FemFunc, 0c0474_intermedateGlobal0475, b0472);
  vec3 _t0814 = prim -0026<$[3]> (camAt0457, camEye0453);
  camDist0815 = prim |()|00B5<$[3]> (_t0814);
  camNearVsp0816 = prim +0017<$[]> (camNear0462, camDist0815);
  camFarVsp0817 = prim +0017<$[]> (camFar0463, camDist0815);
  vec3 _t0818 = prim -0026<$[3]> (camAt0457, camEye0453);
  camN0819 = prim normalize0137<$[3]> (_t0818);
  vec3 _t081A = prim ×00BE (camN0819, camUp045B);
  camU081B = prim normalize0137<$[3]> (_t081A);
  camV081C = prim ×00BE (camU081B, camN0819);
  real _t081D = 0.314159265358979323846264338327950288e1;
  real _t081E = prim *0034 (camFOV045F, _t081D);
  real _t081F = 0.36e3;
  real _t0820 = prim /0055 (_t081E, _t081F);
  real _t0821 = prim tan0179 (_t0820);
  camVmax0822 = prim *0034 (_t0821, camDist0815);
  real _t0823 = (real)iresU0460;
  real _t0824 = prim *0034 (camVmax0822, _t0823);
  real _t0825 = (real)iresV0461;
  camUmax0826 = prim /0055 (_t0824, _t0825);
  kernel _t0827 = tent;
  IMAGE1D<double[3]> img0828 = clamp(cmap0483);
  CM0829 = prim ⊛0074<#0; %1; $[3]> (_t0827, img0828);
  tensor[3,3] _t082A = [camU081B, camV081C, camN0819];
  tensor[3,3] _t082B = prim transpose0145<%3; %3> (_t082A);
  vec3 _t082C = prim normalize0137<$[3]> (lightVsp048C);
  L082D = prim •00CE<$[3,3]; $[3]; $[3]> (_t082B, _t082C);
}
strand ray (int ui0837, int vi0838) {
  real rayU0839;
  real rayV0840;
  vec3 UV0847;
  vec3 rayOrig084A;
  vec3 rayVec084B;
  real camNearVsp0850;
  real camFarVsp0851;
  int offset0854;
  int len0857;
  int itter085C;
  int intersectionItter085D;
  int idx085E;
  vec2 interval085F;
  real s0860;
  real e0861;
  Femdata: MeshCell cc0862;
  Femdata: FuncCell fc0864;
  output real out0866;
  output vec4 rgba0867;
  {
    real _t083A = prim unary -008B<$[]> (camUmax0826);
    real _t083B = -0.5e0;
    real _t083C = (real)ui0837;
    real _t083D = (real)iresU0460;
    real _t083E = 0.5e0;
    real _t083F = prim -0026<$[]> (_t083D, _t083E);
    rayU0839 = prim lerp0098<$[]> (_t083A, camUmax0826, _t083B, _t083C, _t083F);
    real _t0841 = prim unary -008B<$[]> (camVmax0822);
    real _t0842 = -0.5e0;
    real _t0843 = (real)vi0838;
    real _t0844 = (real)iresV0461;
    real _t0845 = 0.5e0;
    real _t0846 = prim -0026<$[]> (_t0844, _t0845);
    rayV0840 = prim lerp0098<$[]> (_t0841, camVmax0822, _t0842, _t0843, _t0846);
    vec3 _t0848 = prim *0036<$[3]> (rayU0839, camU081B);
    vec3 _t0849 = prim *0036<$[3]> (rayV0840, camV081C);
    UV0847 = prim +0017<$[3]> (_t0848, _t0849);
    rayOrig084A = prim +0017<$[3]> (camEye0453, UV0847);
    real _t084C = 0.e0;
    real _t084D = 0.e0;
    real _t084E = 0.e0;
    vec3 _t084F = [_t084C, _t084D, _t084E];
    rayVec084B = prim +0017<$[3]> (camN0819, _t084F);
    camNearVsp0850 = camNearVsp0816;
    camFarVsp0851 = camFarVsp0817;
    int _t0855 = prim *0033 (ui0837, iresV0461);
    int _t0856 = prim +0015 (_t0855, vi0838);
    offset0854 = prim $dynsub01C2<int> (indecies0477, _t0856);
    int _t0858 = prim *0033 (iresU0460, iresV0461);
    int _t0859 = prim *0033 (ui0837, iresV0461);
    int _t085A = prim +0015 (_t0858, _t0859);
    int _t085B = prim +0015 (_t085A, vi0838);
    len0857 = prim $dynsub01C2<int> (indecies0477, _t085B);
    itter085C = 0;
    intersectionItter085D = 0;
    idx085E = prim +0015 (offset0854, itter085C);
    interval085F = prim $dynsub01C2<vec2> (times0478, idx085E);
    s0860 = interval085F[0];
    e0861 = interval085F[1];
    int _t0863 = 0;
    cc0862 = prim $dynsub01C2<Femdata: MeshCell> (0cell_a0467, _t0863);
    Femdata: FuncCell fc094D;
    int _t094E = extractFemItem(CellIndex(MeshCell), int, cc0862);
    Femdata: FuncCell _t094F = loadFem(FuncCell, c0474, _t094E);
    fc094D = _t094F;
    fc0864 = fc094D;
    out0866 = 0.e0;
    real _t0868 = 0.e0;
    real _t0869 = 0.e0;
    real _t086A = 0.e0;
    real _t086B = 0.e0;
    rgba0867 = [_t0868, _t0869, _t086A, _t086B];
  }
  start
  {
    int _t086C = 0;
    bool _t086D = prim ==0082 (len0857, _t086C);
    if _t086D {
      stabilize;
    }
    int _t086E = prim $dynsub01C2<int> (cells0479, idx085E);
    cc0862 = prim $dynsub01C2<Femdata: MeshCell> (0cell_a0467, _t086E);
    Femdata: FuncCell fc0950;
    int _t0951 = extractFemItem(CellIndex(MeshCell), int, cc0862);
    Femdata: FuncCell _t0952 = loadFem(FuncCell, c0474, _t0951);
    fc0950 = _t0952;
    fc0864 = fc0950;
  }
  update
  {
    string _t086F = "Interval:";
    vec2 _t0870 = [s0860, e0861];
    string _t0871 = "\n";
    print (_t086F, _t0870, _t0871);
    string _t0872 = "inner itter:";
    string _t0873 = "\n";
    print (_t0872, intersectionItter085D, _t0873);
    string _t0874 = "Outer itter:";
    string _t0875 = "\n";
    print (_t0874, itter085C, _t0875);
    real _t0876 = rayOrig084A[0];
    real _t0877 = rayOrig084A[1];
    vec2 _t0878 = [_t0876, _t0877];
    real _t0879 = rayVec084B[0];
    real _t087A = rayVec084B[1];
    vec2 _t087B = [_t0879, _t087A];
    vec2 _t087C = prim *0036<$[2]> (s0860, _t087B);
    vec2 startRay087D = prim +0017<$[2]> (_t0878, _t087C);
    real _t087E = rayOrig084A[0];
    real _t087F = rayOrig084A[1];
    vec2 _t0880 = [_t087E, _t087F];
    real _t0881 = rayVec084B[0];
    real _t0882 = rayVec084B[1];
    vec2 _t0883 = [_t0881, _t0882];
    vec2 _t0884 = prim *0036<$[2]> (e0861, _t0883);
    vec2 endRay0885 = prim +0017<$[2]> (_t0880, _t0884);
    Femdata: Mesh _t0886 = extractFem(cc0862, Mesh);
    Femdata: Mesh _t0887 = extractFem(cc0862, Mesh);
    int _t0888 = extractFemItem(CellIndex(MeshCell), int, cc0862);
    field(2)[2] _t0889 = femField(_t0886,_t0888,field(2)[2],InvTransform,_msh_newtonInverse04FB );
    vec2 invertA088A = prim @00A5<#∞; %2; $[2]> (_t0889, startRay087D);
    Femdata: Mesh _t088B = extractFem(cc0862, Mesh);
    Femdata: Mesh _t088C = extractFem(cc0862, Mesh);
    int _t088D = extractFemItem(CellIndex(MeshCell), int, cc0862);
    field(2)[2] _t088E = femField(_t088B,_t088D,field(2)[2],InvTransform,_msh_newtonInverse04FB );
    vec2 invertB088F = prim @00A5<#∞; %2; $[2]> (_t088E, endRay0885);
    string _t0890 = "inverses:";
    string _t0891 = "\n";
    print (_t0890, invertA088A, invertB088F, _t0891);
    Femdata: FemFunc _t0892 = extractFem(fc0864, FemFunc);
    Femdata: FemFunc _t0893 = extractFem(fc0864, FemFunc);
    Femdata: Space _t0894 = extractFem(_t0893, Space);
    int _t0895 = extractFemItem(CellIndex(FuncCell), int, fc0864);
    field(2)[] _t0896 = femField(_t0892,_t0895,field(2)[],refField,);
    real faVal0897 = prim @00A5<#∞; %2; $[]> (_t0896, invertA088A);
    real _t0898 = rayVec084B[2];
    real _t0899 = prim *0034 (_t0898, s0860);
    real _t089A = prim -0026<$[]> (faVal0897, _t0899);
    real _t089B = rayOrig084A[2];
    real fa089C = prim -0026<$[]> (_t089A, _t089B);
    Femdata: FemFunc _t089D = extractFem(fc0864, FemFunc);
    Femdata: FemFunc _t089E = extractFem(fc0864, FemFunc);
    Femdata: Space _t089F = extractFem(_t089E, Space);
    int _t08A0 = extractFemItem(CellIndex(FuncCell), int, fc0864);
    field(2)[] _t08A1 = femField(_t089D,_t08A0,field(2)[],refField,);
    real _t08A2 = prim @00A5<#∞; %2; $[]> (_t08A1, invertB088F);
    real _t08A3 = rayVec084B[2];
    real _t08A4 = prim *0034 (_t08A3, e0861);
    real _t08A5 = prim -0026<$[]> (_t08A2, _t08A4);
    real _t08A6 = rayOrig084A[2];
    real fb08A7 = prim -0026<$[]> (_t08A5, _t08A6);
    string _t08A8 = "Vals:";
    vec2 _t08A9 = [fa089C, fb08A7];
    string _t08AA = "\n";
    print (_t08A8, _t08A9, _t08AA);
    real _t08AB = prim -0026<$[]> (fa089C, fb08A7);
    real _t08AC = prim |()|00B5<$[]> (_t08AB);
    bool _t08AD = prim <007A (_t08AC, eps0476);
    if _t08AD {
      real _t08AE = prim |()|00B5<$[]> (fa089C);
      bool _t08AF = prim >0080 (_t08AE, eps0476);
      if _t08AF {
        s0860 = prim +0017<$[]> (s0860, eps0476);
        continue;
      }
    }
    real _t08B0 = prim *0034 (s0860, fb08A7);
    real _t08B1 = prim *0034 (e0861, fa089C);
    real _t08B2 = prim -0026<$[]> (_t08B0, _t08B1);
    real _t08B3 = prim -0026<$[]> (fb08A7, fa089C);
    real cup08B4 = prim /0055 (_t08B2, _t08B3);
    string _t08B5 = "Mid time:";
    string _t08B6 = "\n";
    print (_t08B5, cup08B4, _t08B6);
    real _t08B7 = rayOrig084A[0];
    real _t08B8 = rayOrig084A[1];
    vec2 _t08B9 = [_t08B7, _t08B8];
    real _t08BA = rayVec084B[0];
    real _t08BB = rayVec084B[1];
    vec2 _t08BC = [_t08BA, _t08BB];
    vec2 _t08BD = prim *0036<$[2]> (cup08B4, _t08BC);
    vec2 midRay08BE = prim +0017<$[2]> (_t08B9, _t08BD);
    Femdata: Mesh _t08BF = extractFem(cc0862, Mesh);
    Femdata: Mesh _t08C0 = extractFem(cc0862, Mesh);
    int _t08C1 = extractFemItem(CellIndex(MeshCell), int, cc0862);
    field(2)[2] _t08C2 = femField(_t08BF,_t08C1,field(2)[2],InvTransform,_msh_newtonInverse04FB );
    vec2 invertC08C3 = prim @00A5<#∞; %2; $[2]> (_t08C2, midRay08BE);
    Femdata: FemFunc _t08C4 = extractFem(fc0864, FemFunc);
    Femdata: FemFunc _t08C5 = extractFem(fc0864, FemFunc);
    Femdata: Space _t08C6 = extractFem(_t08C5, Space);
    int _t08C7 = extractFemItem(CellIndex(FuncCell), int, fc0864);
    field(2)[] _t08C8 = femField(_t08C4,_t08C7,field(2)[],refField,);
    real fmVal08C9 = prim @00A5<#∞; %2; $[]> (_t08C8, invertC08C3);
    real _t08CA = rayVec084B[2];
    real _t08CB = prim *0034 (_t08CA, cup08B4);
    real _t08CC = prim -0026<$[]> (fmVal08C9, _t08CB);
    real _t08CD = rayOrig084A[2];
    real fm08CE = prim -0026<$[]> (_t08CC, _t08CD);
    string _t08CF = "all vals:";
    vec3 _t08D0 = [fa089C, fm08CE, fb08A7];
    string _t08D1 = "\n";
    print (_t08CF, _t08D0, _t08D1);
    int _t08D2 = 1;
    intersectionItter085D = prim +0015 (intersectionItter085D, _t08D2);
    int _t08D3;
    real _t096B = 0.e0;
    bool _t096C = prim >0080 (fa089C, _t096B);
    if _t096C {
      int _t096D = 1;
      _t08D3 = _t096D;
    } else {
      real _t096E = 0.e0;
      bool _t096F = prim <007A (fa089C, _t096E);
      if _t096F {
        int _t0970 = -1;
        _t08D3 = _t0970;
      } else {
        int _t0971 = 0;
        _t08D3 = _t0971;
      }
    }
    int _t08D4;
    real _t0964 = 0.e0;
    bool _t0965 = prim >0080 (fm08CE, _t0964);
    if _t0965 {
      int _t0966 = 1;
      _t08D4 = _t0966;
    } else {
      real _t0967 = 0.e0;
      bool _t0968 = prim <007A (fm08CE, _t0967);
      if _t0968 {
        int _t0969 = -1;
        _t08D4 = _t0969;
      } else {
        int _t096A = 0;
        _t08D4 = _t096A;
      }
    }
    int _t08D5 = prim *0033 (_t08D3, _t08D4);
    int _t08D6 = 0;
    bool _t08D7 = prim <0079 (_t08D5, _t08D6);
    if _t08D7 {
      e0861 = cup08B4;
    } else {
      int _t08D8;
      real _t095D = 0.e0;
      bool _t095E = prim >0080 (fa089C, _t095D);
      if _t095E {
        int _t095F = 1;
        _t08D8 = _t095F;
      } else {
        real _t0960 = 0.e0;
        bool _t0961 = prim <007A (fa089C, _t0960);
        if _t0961 {
          int _t0962 = -1;
          _t08D8 = _t0962;
        } else {
          int _t0963 = 0;
          _t08D8 = _t0963;
        }
      }
      int _t08D9;
      real _t0956 = 0.e0;
      bool _t0957 = prim >0080 (fm08CE, _t0956);
      if _t0957 {
        int _t0958 = 1;
        _t08D9 = _t0958;
      } else {
        real _t0959 = 0.e0;
        bool _t095A = prim <007A (fm08CE, _t0959);
        if _t095A {
          int _t095B = -1;
          _t08D9 = _t095B;
        } else {
          int _t095C = 0;
          _t08D9 = _t095C;
        }
      }
      int _t08DA = prim *0033 (_t08D8, _t08D9);
      int _t08DB = 0;
      bool _t08DC = prim >007F (_t08DA, _t08DB);
      if _t08DC {
        s0860 = cup08B4;
      }
    }
    string _t08DD = "new interval:";
    vec2 _t08DE = [s0860, e0861];
    string _t08DF = "\n";
    print (_t08DD, _t08DE, _t08DF);
    bool _t08E0;
    real _t08E1 = prim |()|00B5<$[]> (fa089C);
    bool _t08E2 = prim <007A (_t08E1, eps0476);
    if _t08E2 {
      _t08E0 = true;
    } else {
      bool _t08E3;
      real _t08E4 = prim |()|00B5<$[]> (fm08CE);
      bool _t08E5 = prim <007A (_t08E4, eps0476);
      if _t08E5 {
        _t08E3 = true;
      } else {
        int _t08E6 = 32;
        _t08E3 = prim >007F (intersectionItter085D, _t08E6);
      }
      _t08E0 = _t08E3;
    }
    if _t08E0 {
      intersectionItter085D = 0;
      bool _t08E7;
      real _t08E8 = prim |()|00B5<$[]> (fm08CE);
      bool _t08E9 = prim >0080 (_t08E8, eps0476);
      if _t08E9 {
        real _t08EA = prim |()|00B5<$[]> (fa089C);
        _t08E7 = prim >0080 (_t08EA, eps0476);
      } else {
        _t08E7 = false;
      }
      if _t08E7 {
        int _t08EB = 1;
        itter085C = prim +0015 (itter085C, _t08EB);
        bool _t08EC = prim >=007D (itter085C, len0857);
        if _t08EC {
          string _t08ED = "Fin pixel=============================\n";
          print (_t08ED);
          stabilize;
        }
        int _t08EE = prim +0015 (offset0854, itter085C);
        interval085F = prim $dynsub01C2<vec2> (times0478, _t08EE);
        int _t08EF = prim +0015 (offset0854, itter085C);
        int _t08F0 = prim $dynsub01C2<int> (cells0479, _t08EF);
        cc0862 = prim $dynsub01C2<Femdata: MeshCell> (0cell_a0467, _t08F0);
        s0860 = interval085F[0];
        e0861 = interval085F[1];
        Femdata: FuncCell fc0953;
        int _t0954 = extractFemItem(CellIndex(MeshCell), int, cc0862);
        Femdata: FuncCell _t0955 = loadFem(FuncCell, c0474, _t0954);
        fc0953 = _t0955;
        fc0864 = fc0953;
        string _t08F1 = "Next interval!\n";
        print (_t08F1);
        continue;
      } else {
        real _t08F2 = 0.e0;
        real _t08F3 = 0.e0;
        vec2 grad08F4 = [_t08F2, _t08F3];
        real _t08F6 = prim |()|00B5<$[]> (fm08CE);
        bool _t08F7 = prim <007A (_t08F6, eps0476);
        if _t08F7 {
          Femdata: FemFunc _t08F8 = extractFem(fc0864, FemFunc);
          Femdata: FemFunc _t08F9 = extractFem(fc0864, FemFunc);
          Femdata: Space _t08FA = extractFem(_t08F9, Space);
          int _t08FB = extractFemItem(CellIndex(FuncCell), int, fc0864);
          field(2)[] _t08FC = femField(_t08F8,_t08FB,field(2)[],refField,);
          Femdata: Mesh _t08FD = extractFem(cc0862, Mesh);
          Femdata: Mesh _t08FE = extractFem(cc0862, Mesh);
          int _t08FF = extractFemItem(CellIndex(MeshCell), int, cc0862);
          field(2)[2] _t0900 = femField(_t08FD,_t08FF,field(2)[2],InvTransform,_msh_newtonInverse04FB );
          field(2)[] _t0901 = prim ∘0164<#∞; %2; $[]; %2; $[2]> (_t08FC, _t0900);
          field(2)[2] _t0902 = prim ∇00A8<#∞; %2> (_t0901);
          grad08F4 = prim @00A5<#∞; %2; $[2]> (_t0902, midRay08BE);
          out0866 = fmVal08C9;
        }
        real _t0903 = prim |()|00B5<$[]> (fa089C);
        bool _t0904 = prim <007A (_t0903, eps0476);
        if _t0904 {
          cup08B4 = s0860;
          Femdata: FemFunc _t0905 = extractFem(fc0864, FemFunc);
          Femdata: FemFunc _t0906 = extractFem(fc0864, FemFunc);
          Femdata: Space _t0907 = extractFem(_t0906, Space);
          int _t0908 = extractFemItem(CellIndex(FuncCell), int, fc0864);
          field(2)[] _t0909 = femField(_t0905,_t0908,field(2)[],refField,);
          Femdata: Mesh _t090A = extractFem(cc0862, Mesh);
          Femdata: Mesh _t090B = extractFem(cc0862, Mesh);
          int _t090C = extractFemItem(CellIndex(MeshCell), int, cc0862);
          field(2)[2] _t090D = femField(_t090A,_t090C,field(2)[2],InvTransform,_msh_newtonInverse04FB );
          field(2)[] _t090E = prim ∘0164<#∞; %2; $[]; %2; $[2]> (_t0909, _t090D);
          field(2)[2] _t090F = prim ∇00A8<#∞; %2> (_t090E);
          grad08F4 = prim @00A5<#∞; %2; $[2]> (_t090F, startRay087D);
          out0866 = faVal0897;
        }
        string _t0910 = "Out val:";
        string _t0911 = "\n";
        print (_t0910, out0866, _t0911);
        string _t0912 = "Grad val:";
        string _t0913 = "\n";
        print (_t0912, grad08F4, _t0913);
        real _t0914 = 0.1e1;
        real _t0915 = 0.1e1;
        real _t0916 = 0.1e1;
        vec3 mcol0917 = [_t0914, _t0915, _t0916];
        bool _t0918 = prim !=0088 (cmin0484, cmax0485);
        if _t0918 {
          int _t0919 = -1;
          real _t091A = (real)_t0919;
          real _t091B = 0.1e1;
          real _t091C = prim lerp0098<$[]> (_t091A, _t091B, cmin0484, out0866, cmax0485);
          mcol0917 = prim @00A5<#0; %1; $[3]> (CM0829, _t091C);
        }
        if light0486 {
          real _t091D = grad08F4[0];
          real _t091E = grad08F4[1];
          int _t091F = -1;
          real _t0920 = (real)_t091F;
          vec3 N0921 = [_t091D, _t091E, _t0920];
          vec3 _t0922 = prim normalize0137<$[3]> (rayVec084B);
          vec3 _t0923 = prim unary -008B<$[3]> (_t0922);
          vec3 _t0924 = prim +0017<$[3]> (_t0923, L082D);
          vec3 H0925 = prim normalize0137<$[3]> (_t0924);
          vec3 lightColor0926 = prim lerp0098<$[3]> (mcnear047A, mcfar047E, camNearVsp0850, cup08B4, camFarVsp0851);
          vec3 ambientTerm0927 = prim *0036<$[3]> (phongKa0487, mcol0917);
          vec3 _t0928 = prim modulate0129<%3> (mcol0917, lightColor0926);
          vec3 _t0929 = prim *0036<$[3]> (phongKd0488, _t0928);
          real _t092A = 0.e0;
          real _t092B = prim •00CE<$[3]; $[3]; $[]> (N0921, L082D);
          real _t092C = prim max0125 (_t092A, _t092B);
          vec3 diffuse092D = prim *0038<$[3]> (_t0929, _t092C);
          vec3 _t092E = prim *0036<$[3]> (phongKs0489, lightColor0926);
          real _t092F = 0.e0;
          real _t0930 = prim •00CE<$[3]; $[3]; $[]> (N0921, H0925);
          real _t0931 = prim max0125 (_t092F, _t0930);
          real _t0932 = prim ^0069 (_t0931, phongSp048A);
          vec3 specular0933 = prim *0038<$[3]> (_t092E, _t0932);
          vec3 _t0934 = prim +0017<$[3]> (ambientTerm0927, diffuse092D);
          vec3 fin0935 = prim +0017<$[3]> (_t0934, specular0933);
          real _t0936 = fin0935[0];
          real _t0937 = fin0935[1];
          real _t0938 = fin0935[2];
          real _t0939 = 0.1e1;
          rgba0867 = [_t0936, _t0937, _t0938, _t0939];
        } else {
          real _t093A = mcol0917[0];
          real _t093B = mcol0917[1];
          real _t093C = mcol0917[2];
          real _t093D = 0.1e1;
          rgba0867 = [_t093A, _t093B, _t093C, _t093D];
        }
        stabilize;
      }
    } else {
      string _t093E = "=========\n";
      print (_t093E);
    }
  }
}
grid(2) {
  int _t093F = 0;
  int _t0940 = 1;
  int _t0941 = prim -0024 (iresU0460, _t0940);
  int[] _t0942 = prim $range01C3 (_t093F, _t0941);
  foreach vi0948 in _t0942 {
    int _t0943 = 0;
    int _t0944 = 1;
    int _t0945 = prim -0024 (iresV0461, _t0944);
    int[] _t0946 = prim $range01C3 (_t0943, _t0945);
    foreach ui0947 in _t0946 {
      new ray (ui0947, vi0948);
    }
  }
}
/* Program end */
/* Simplified Program (after after simplify variables) start */
properties: GlobalInit,StrandArray,HasStartMethod,ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[]),HasInputs,HasGlobals
input real isoval0451 = <default>;
input real thick0452 = <default>;
input vec3 camEye0453 = <default>;
input vec3 camAt0457 = <default>;
input vec3 camUp045B = <default>;
input real camFOV045F = <default>;
input int iresU0460 = <default>;
input int iresV0461 = <default>;
input real camNear0462 = <default>;
input real camFar0463 = <default>;
input real refStep0464 = <default>;
input real rayStep0465 = <default>;
input FemData:Mesh a0466;
input FemData:Space 0b0472_intermedateGlobal0473;
input FemData:FemFunc 0c0474_intermedateGlobal0475;
input real eps0476 = <default>;
input int[] indecies0477;
input vec2[] times0478;
input int[] cells0479;
input vec3 mcnear047A("material color at near clipping plane (for depth cuing)") = <default>;
input vec3 mcfar047E("material color at far clipping plane") = <default>;
input image(1)[3] cmap0483("univariate colormap") = image("/home/teocollin/gitcode/diderot/tests/lipRay/find/cmap.nrrd");
input real cmin0484("value mapped to min end of colormap") = <default>;
input real cmax0485("value mapped to max end of colormap. By default cmin==cmax==0, which disables this colormapping") = <default>;
input bool light0486 = <default>;
input real phongKa0487("Blinn-Phong ambient component") = <default>;
input real phongKd0488("Blinn-Phong diffuse component") = <default>;
input real phongKs0489("Blinn-Phong specular component") = <default>;
input real phongSp048A("Blinn-Phong specularity exponent") = <default>;
input real maxAlpha048B("maximum opacity on rendered surface") = <default>;
input vec3 lightVsp048C = <default>;
constants {
  isoval0451 = 0.2e0;
  thick0452 = 0.7e-1;
  real _t0454 = 0.3e1;
  real _t0455 = -0.3e1;
  real _t0456 = 0.3e1;
  camEye0453 = [_t0454, _t0455, _t0456];
  real _t0458 = 0.5e0;
  real _t0459 = 0.5e0;
  real _t045A = 0.5e0;
  camAt0457 = [_t0458, _t0459, _t045A];
  real _t045C = 0.e0;
  real _t045D = 0.e0;
  real _t045E = 0.1e1;
  camUp045B = [_t045C, _t045D, _t045E];
  camFOV045F = 0.137e2;
  iresU0460 = 10;
  iresV0461 = 10;
  camNear0462 = -0.2e1;
  camFar0463 = 0.5e1;
  refStep0464 = 0.1e1;
  rayStep0465 = 0.1e-1;
  eps0476 = 0.1e-5;
  real _t047B = 0.1e1;
  real _t047C = 0.1e1;
  real _t047D = 0.1e1;
  mcnear047A = [_t047B, _t047C, _t047D];
  real _t047F = 0.1e1;
  real _t0480 = 0.1e1;
  real _t0481 = 0.1e1;
  mcfar047E = [_t047F, _t0480, _t0481];
  cmin0484 = 0.e0;
  cmax0485 = 0.1e1;
  light0486 = true;
  phongKa0487 = 0.5e0;
  phongKd0488 = 0.5e0;
  phongKs0489 = 0.e0;
  phongSp048A = 0.6e2;
  maxAlpha048B = 0.1e1;
  real _t048D = 0.e0;
  real _t048E = 0.e0;
  real _t048F = 0.1e1;
  lightVsp048C = [_t048D, _t048E, _t048F];
}
global Femdata: MeshCell[] 0cell_a0467;
global Femdata: Space b0472;
global Femdata: FemFunc c0474;
global real camDist0815;
global real camNearVsp0816;
global real camFarVsp0817;
global vec3 camN0819;
global vec3 camU081B;
global vec3 camV081C;
global real camVmax0822;
global real camUmax0826;
global field#0(1)[3] CM0829;
global vec3 L082D;
function Femdata: MeshPos#5 _msh_newtonInverse04FB (vec2 pos04FC, int cellInt04FD, Femdata: Mesh mesh04FE)
{
  real _t04FF = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t0500 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  xn0501 = [_t04FF, _t0500];
  field(2)[2] _t0502 = femField(mesh04FE,cellInt04FD,field(2)[2],Transform,);
  field(2)[2,2] _t0503 = prim ∇⊗00AD<#∞; %2; $[]; %2> (_t0502);
  field(2)[2,2] _t0504 = prim inv015B<#∞; %2> (_t0503);
  real _t0505 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t0506 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  vec2 _t0507 = [_t0505, _t0506];
  A0508 = prim @00A5<#∞; %2; $[2,2]> (_t0504, _t0507);
  int _t0509 = 0;
  int _t050A = 16;
  int[] _t050B = prim $range01C3 (_t0509, _t050A);
  foreach itter052F in _t050B {
    field(2)[2] _t050C = femField(mesh04FE,cellInt04FD,field(2)[2],Transform,);
    field(2)[2] _t050D = prim -002E<#∞; %2; $[2]> (_t050C, pos04FC);
    field(2)[2] _t050E = prim •00D4<#∞; %2; $[2,2]; $[2]; $[2]> (A0508, _t050D);
    delta050F = prim @00A5<#∞; %2; $[2]> (_t050E, xn0501);
    xn0501 = prim -0026<$[2]> (xn0501, delta050F);
    real _t0510 = 0.1e-7;
    real _t0511 = 0.1e-7;
    real _t0512 = prim *0034 (_t0510, _t0511);
    real _t0513 = prim •00CE<$[2]; $[2]; $[]> (delta050F, delta050F);
    bool _t0514 = prim >=007E (_t0512, _t0513);
    if _t0514 {
      real _t0515 = 0.1e1;
      real _t0516 = 0.1e-8;
      real _t0517 = prim +0017<$[]> (_t0515, _t0516);
      real _t0518 = 0.1e1;
      real _t0519 = 0.1e1;
      vec2 _t051A = [_t0518, _t0519];
      real _t051B = prim •00CE<$[2]; $[2]; $[]> (_t051A, xn0501);
      bool _t051C = prim >0080 (_t0517, _t051B);
      real _t051D = 0.1e-8;
      real _t051E = 0.1e-8;
      vec2 _t051F = [_t051D, _t051E];
      vec2 _t0520 = prim +0017<$[2]> (_t051F, xn0501);
      real _t0521 = _t0520[0];
      real _t0522 = -0.e0;
      bool _t0523 = prim >0080 (_t0521, _t0522);
      real _t0524 = 0.1e-8;
      real _t0525 = 0.1e-8;
      vec2 _t0526 = [_t0524, _t0525];
      vec2 _t0527 = prim +0017<$[2]> (_t0526, xn0501);
      real _t0528 = _t0527[1];
      real _t0529 = -0.e0;
      bool _t052A = prim >0080 (_t0528, _t0529);
      bool _t052B = prim $and01C4 (_t0523, _t052A);
      bool _t052C = prim $and01C4 (_t051C, _t052B);
      if _t052C {
        Femdata: MeshPos _t052D = extractFemItemN((mesh04FE, cellInt04FD, xn0501, pos04FC),AllBuild(MeshPos),);
        return _t052D;
      } else {
        Femdata: MeshPos _t052E = extractFemItemN((mesh04FE),InvalidBuild(MeshPos),);
        return _t052E;
      }
    }
  }
  Femdata: MeshPos _t0530 = extractFemItemN((mesh04FE),InvalidBuild(MeshPos),);
  return _t0530;
}
function int[2]#5 nextCell40547 (int faceIdx05BA, int cell05BB, Femdata: Mesh mesh05BC)
{
  int _t05BD = 6;
  int _t05BE = prim *0033 (cell05BB, _t05BD);
  int _t05BF = 2;
  int _t05C0 = prim *0033 (faceIdx05BA, _t05BF);
  int _t05C1 = prim +0015 (_t05BE, _t05C0);
  int[2] _t05C2 = extractFemItemN((mesh05BC, _t05C1),CellFaceCell(Mesh),);
  return _t05C2;
}
globalInit {
  int _t046A = 0;
  int _t0468 = 1;
  int _t046C = extractFemItem(NumCell(Mesh), int, a0466);
  int _t046B = prim -0024 (_t046C, _t0468);
  int[] _t046F = prim $range01C3 (_t046A, _t046B);
  Femdata: MeshCell[] _t0470 = {};
  foreach _t046E in _t046F {
    Femdata: MeshCell _t0471 = loadFem(MeshCell, a0466, _t046E);
    _t0470 = prim @0010<Femdata: MeshCell> (_t0470, _t0471);
  }
  0cell_a0467 = _t0470;
  b0472 = loadFem(Space, 0b0472_intermedateGlobal0473, a0466);
  c0474 = loadFem(FemFunc, 0c0474_intermedateGlobal0475, b0472);
  vec3 _t0814 = prim -0026<$[3]> (camAt0457, camEye0453);
  camDist0815 = prim |()|00B5<$[3]> (_t0814);
  camNearVsp0816 = prim +0017<$[]> (camNear0462, camDist0815);
  camFarVsp0817 = prim +0017<$[]> (camFar0463, camDist0815);
  vec3 _t0818 = prim -0026<$[3]> (camAt0457, camEye0453);
  camN0819 = prim normalize0137<$[3]> (_t0818);
  vec3 _t081A = prim ×00BE (camN0819, camUp045B);
  camU081B = prim normalize0137<$[3]> (_t081A);
  camV081C = prim ×00BE (camU081B, camN0819);
  real _t081D = 0.314159265358979323846264338327950288e1;
  real _t081E = prim *0034 (camFOV045F, _t081D);
  real _t081F = 0.36e3;
  real _t0820 = prim /0055 (_t081E, _t081F);
  real _t0821 = prim tan0179 (_t0820);
  camVmax0822 = prim *0034 (_t0821, camDist0815);
  real _t0823 = (real)iresU0460;
  real _t0824 = prim *0034 (camVmax0822, _t0823);
  real _t0825 = (real)iresV0461;
  camUmax0826 = prim /0055 (_t0824, _t0825);
  kernel _t0827 = tent;
  IMAGE1D<double[3]> img0828 = clamp(cmap0483);
  CM0829 = prim ⊛0074<#0; %1; $[3]> (_t0827, img0828);
  tensor[3,3] _t082A = [camU081B, camV081C, camN0819];
  tensor[3,3] _t082B = prim transpose0145<%3; %3> (_t082A);
  vec3 _t082C = prim normalize0137<$[3]> (lightVsp048C);
  L082D = prim •00CE<$[3,3]; $[3]; $[3]> (_t082B, _t082C);
}
strand ray (int ui0837, int vi0838) {
  real rayU0839;
  real rayV0840;
  vec3 UV0847;
  vec3 rayOrig084A;
  vec3 rayVec084B;
  real camNearVsp0850;
  real camFarVsp0851;
  int offset0854;
  int len0857;
  int itter085C;
  int intersectionItter085D;
  int idx085E;
  vec2 interval085F;
  real s0860;
  real e0861;
  Femdata: MeshCell cc0862;
  Femdata: FuncCell fc0864;
  output real out0866;
  output vec4 rgba0867;
  {
    real _t083A = prim unary -008B<$[]> (camUmax0826);
    real _t083B = -0.5e0;
    real _t083C = (real)ui0837;
    real _t083D = (real)iresU0460;
    real _t083E = 0.5e0;
    real _t083F = prim -0026<$[]> (_t083D, _t083E);
    rayU0839 = prim lerp0098<$[]> (_t083A, camUmax0826, _t083B, _t083C, _t083F);
    real _t0841 = prim unary -008B<$[]> (camVmax0822);
    real _t0842 = -0.5e0;
    real _t0843 = (real)vi0838;
    real _t0844 = (real)iresV0461;
    real _t0845 = 0.5e0;
    real _t0846 = prim -0026<$[]> (_t0844, _t0845);
    rayV0840 = prim lerp0098<$[]> (_t0841, camVmax0822, _t0842, _t0843, _t0846);
    vec3 _t0848 = prim *0036<$[3]> (rayU0839, camU081B);
    vec3 _t0849 = prim *0036<$[3]> (rayV0840, camV081C);
    UV0847 = prim +0017<$[3]> (_t0848, _t0849);
    rayOrig084A = prim +0017<$[3]> (camEye0453, UV0847);
    real _t084C = 0.e0;
    real _t084D = 0.e0;
    real _t084E = 0.e0;
    vec3 _t084F = [_t084C, _t084D, _t084E];
    rayVec084B = prim +0017<$[3]> (camN0819, _t084F);
    camNearVsp0850 = camNearVsp0816;
    camFarVsp0851 = camFarVsp0817;
    int _t0855 = prim *0033 (ui0837, iresV0461);
    int _t0856 = prim +0015 (_t0855, vi0838);
    offset0854 = prim $dynsub01C2<int> (indecies0477, _t0856);
    int _t0858 = prim *0033 (iresU0460, iresV0461);
    int _t0859 = prim *0033 (ui0837, iresV0461);
    int _t085A = prim +0015 (_t0858, _t0859);
    int _t085B = prim +0015 (_t085A, vi0838);
    len0857 = prim $dynsub01C2<int> (indecies0477, _t085B);
    itter085C = 0;
    intersectionItter085D = 0;
    idx085E = prim +0015 (offset0854, itter085C);
    interval085F = prim $dynsub01C2<vec2> (times0478, idx085E);
    s0860 = interval085F[0];
    e0861 = interval085F[1];
    int _t0863 = 0;
    cc0862 = prim $dynsub01C2<Femdata: MeshCell> (0cell_a0467, _t0863);
    Femdata: FuncCell fc094D;
    int _t094E = extractFemItem(CellIndex(MeshCell), int, cc0862);
    Femdata: FuncCell _t094F = loadFem(FuncCell, c0474, _t094E);
    fc094D = _t094F;
    fc0864 = fc094D;
    out0866 = 0.e0;
    real _t0868 = 0.e0;
    real _t0869 = 0.e0;
    real _t086A = 0.e0;
    real _t086B = 0.e0;
    rgba0867 = [_t0868, _t0869, _t086A, _t086B];
  }
  start
  {
    int _t086C = 0;
    bool _t086D = prim ==0082 (len0857, _t086C);
    if _t086D {
      stabilize;
    }
    int _t086E = prim $dynsub01C2<int> (cells0479, idx085E);
    cc0862 = prim $dynsub01C2<Femdata: MeshCell> (0cell_a0467, _t086E);
    Femdata: FuncCell fc0950;
    int _t0951 = extractFemItem(CellIndex(MeshCell), int, cc0862);
    Femdata: FuncCell _t0952 = loadFem(FuncCell, c0474, _t0951);
    fc0950 = _t0952;
    fc0864 = fc0950;
  }
  update
  {
    string _t086F = "Interval:";
    vec2 _t0870 = [s0860, e0861];
    string _t0871 = "\n";
    print (_t086F, _t0870, _t0871);
    string _t0872 = "inner itter:";
    string _t0873 = "\n";
    print (_t0872, intersectionItter085D, _t0873);
    string _t0874 = "Outer itter:";
    string _t0875 = "\n";
    print (_t0874, itter085C, _t0875);
    real _t0876 = rayOrig084A[0];
    real _t0877 = rayOrig084A[1];
    vec2 _t0878 = [_t0876, _t0877];
    real _t0879 = rayVec084B[0];
    real _t087A = rayVec084B[1];
    vec2 _t087B = [_t0879, _t087A];
    vec2 _t087C = prim *0036<$[2]> (s0860, _t087B);
    vec2 startRay087D = prim +0017<$[2]> (_t0878, _t087C);
    real _t087E = rayOrig084A[0];
    real _t087F = rayOrig084A[1];
    vec2 _t0880 = [_t087E, _t087F];
    real _t0881 = rayVec084B[0];
    real _t0882 = rayVec084B[1];
    vec2 _t0883 = [_t0881, _t0882];
    vec2 _t0884 = prim *0036<$[2]> (e0861, _t0883);
    vec2 endRay0885 = prim +0017<$[2]> (_t0880, _t0884);
    Femdata: Mesh _t0886 = extractFem(cc0862, Mesh);
    Femdata: Mesh _t0887 = extractFem(cc0862, Mesh);
    int _t0888 = extractFemItem(CellIndex(MeshCell), int, cc0862);
    field(2)[2] _t0889 = femField(_t0886,_t0888,field(2)[2],InvTransform,_msh_newtonInverse04FB );
    vec2 invertA088A = prim @00A5<#∞; %2; $[2]> (_t0889, startRay087D);
    Femdata: Mesh _t088B = extractFem(cc0862, Mesh);
    Femdata: Mesh _t088C = extractFem(cc0862, Mesh);
    int _t088D = extractFemItem(CellIndex(MeshCell), int, cc0862);
    field(2)[2] _t088E = femField(_t088B,_t088D,field(2)[2],InvTransform,_msh_newtonInverse04FB );
    vec2 invertB088F = prim @00A5<#∞; %2; $[2]> (_t088E, endRay0885);
    string _t0890 = "inverses:";
    string _t0891 = "\n";
    print (_t0890, invertA088A, invertB088F, _t0891);
    Femdata: FemFunc _t0892 = extractFem(fc0864, FemFunc);
    Femdata: FemFunc _t0893 = extractFem(fc0864, FemFunc);
    Femdata: Space _t0894 = extractFem(_t0893, Space);
    int _t0895 = extractFemItem(CellIndex(FuncCell), int, fc0864);
    field(2)[] _t0896 = femField(_t0892,_t0895,field(2)[],refField,);
    real faVal0897 = prim @00A5<#∞; %2; $[]> (_t0896, invertA088A);
    real _t0898 = rayVec084B[2];
    real _t0899 = prim *0034 (_t0898, s0860);
    real _t089A = prim -0026<$[]> (faVal0897, _t0899);
    real _t089B = rayOrig084A[2];
    real fa089C = prim -0026<$[]> (_t089A, _t089B);
    Femdata: FemFunc _t089D = extractFem(fc0864, FemFunc);
    Femdata: FemFunc _t089E = extractFem(fc0864, FemFunc);
    Femdata: Space _t089F = extractFem(_t089E, Space);
    int _t08A0 = extractFemItem(CellIndex(FuncCell), int, fc0864);
    field(2)[] _t08A1 = femField(_t089D,_t08A0,field(2)[],refField,);
    real _t08A2 = prim @00A5<#∞; %2; $[]> (_t08A1, invertB088F);
    real _t08A3 = rayVec084B[2];
    real _t08A4 = prim *0034 (_t08A3, e0861);
    real _t08A5 = prim -0026<$[]> (_t08A2, _t08A4);
    real _t08A6 = rayOrig084A[2];
    real fb08A7 = prim -0026<$[]> (_t08A5, _t08A6);
    string _t08A8 = "Vals:";
    vec2 _t08A9 = [fa089C, fb08A7];
    string _t08AA = "\n";
    print (_t08A8, _t08A9, _t08AA);
    real _t08AB = prim -0026<$[]> (fa089C, fb08A7);
    real _t08AC = prim |()|00B5<$[]> (_t08AB);
    bool _t08AD = prim <007A (_t08AC, eps0476);
    if _t08AD {
      real _t08AE = prim |()|00B5<$[]> (fa089C);
      bool _t08AF = prim >0080 (_t08AE, eps0476);
      if _t08AF {
        s0860 = prim +0017<$[]> (s0860, eps0476);
        continue;
      }
    }
    real _t08B0 = prim *0034 (s0860, fb08A7);
    real _t08B1 = prim *0034 (e0861, fa089C);
    real _t08B2 = prim -0026<$[]> (_t08B0, _t08B1);
    real _t08B3 = prim -0026<$[]> (fb08A7, fa089C);
    real cup08B4 = prim /0055 (_t08B2, _t08B3);
    string _t08B5 = "Mid time:";
    string _t08B6 = "\n";
    print (_t08B5, cup08B4, _t08B6);
    real _t08B7 = rayOrig084A[0];
    real _t08B8 = rayOrig084A[1];
    vec2 _t08B9 = [_t08B7, _t08B8];
    real _t08BA = rayVec084B[0];
    real _t08BB = rayVec084B[1];
    vec2 _t08BC = [_t08BA, _t08BB];
    vec2 _t08BD = prim *0036<$[2]> (cup08B4, _t08BC);
    vec2 midRay08BE = prim +0017<$[2]> (_t08B9, _t08BD);
    Femdata: Mesh _t08BF = extractFem(cc0862, Mesh);
    Femdata: Mesh _t08C0 = extractFem(cc0862, Mesh);
    int _t08C1 = extractFemItem(CellIndex(MeshCell), int, cc0862);
    field(2)[2] _t08C2 = femField(_t08BF,_t08C1,field(2)[2],InvTransform,_msh_newtonInverse04FB );
    vec2 invertC08C3 = prim @00A5<#∞; %2; $[2]> (_t08C2, midRay08BE);
    Femdata: FemFunc _t08C4 = extractFem(fc0864, FemFunc);
    Femdata: FemFunc _t08C5 = extractFem(fc0864, FemFunc);
    Femdata: Space _t08C6 = extractFem(_t08C5, Space);
    int _t08C7 = extractFemItem(CellIndex(FuncCell), int, fc0864);
    field(2)[] _t08C8 = femField(_t08C4,_t08C7,field(2)[],refField,);
    real fmVal08C9 = prim @00A5<#∞; %2; $[]> (_t08C8, invertC08C3);
    real _t08CA = rayVec084B[2];
    real _t08CB = prim *0034 (_t08CA, cup08B4);
    real _t08CC = prim -0026<$[]> (fmVal08C9, _t08CB);
    real _t08CD = rayOrig084A[2];
    real fm08CE = prim -0026<$[]> (_t08CC, _t08CD);
    string _t08CF = "all vals:";
    vec3 _t08D0 = [fa089C, fm08CE, fb08A7];
    string _t08D1 = "\n";
    print (_t08CF, _t08D0, _t08D1);
    int _t08D2 = 1;
    intersectionItter085D = prim +0015 (intersectionItter085D, _t08D2);
    int _t08D3;
    real _t096B = 0.e0;
    bool _t096C = prim >0080 (fa089C, _t096B);
    if _t096C {
      int _t096D = 1;
      _t08D3 = _t096D;
    } else {
      real _t096E = 0.e0;
      bool _t096F = prim <007A (fa089C, _t096E);
      if _t096F {
        int _t0970 = -1;
        _t08D3 = _t0970;
      } else {
        int _t0971 = 0;
        _t08D3 = _t0971;
      }
    }
    int _t08D4;
    real _t0964 = 0.e0;
    bool _t0965 = prim >0080 (fm08CE, _t0964);
    if _t0965 {
      int _t0966 = 1;
      _t08D4 = _t0966;
    } else {
      real _t0967 = 0.e0;
      bool _t0968 = prim <007A (fm08CE, _t0967);
      if _t0968 {
        int _t0969 = -1;
        _t08D4 = _t0969;
      } else {
        int _t096A = 0;
        _t08D4 = _t096A;
      }
    }
    int _t08D5 = prim *0033 (_t08D3, _t08D4);
    int _t08D6 = 0;
    bool _t08D7 = prim <0079 (_t08D5, _t08D6);
    if _t08D7 {
      e0861 = cup08B4;
    } else {
      int _t08D8;
      real _t095D = 0.e0;
      bool _t095E = prim >0080 (fa089C, _t095D);
      if _t095E {
        int _t095F = 1;
        _t08D8 = _t095F;
      } else {
        real _t0960 = 0.e0;
        bool _t0961 = prim <007A (fa089C, _t0960);
        if _t0961 {
          int _t0962 = -1;
          _t08D8 = _t0962;
        } else {
          int _t0963 = 0;
          _t08D8 = _t0963;
        }
      }
      int _t08D9;
      real _t0956 = 0.e0;
      bool _t0957 = prim >0080 (fm08CE, _t0956);
      if _t0957 {
        int _t0958 = 1;
        _t08D9 = _t0958;
      } else {
        real _t0959 = 0.e0;
        bool _t095A = prim <007A (fm08CE, _t0959);
        if _t095A {
          int _t095B = -1;
          _t08D9 = _t095B;
        } else {
          int _t095C = 0;
          _t08D9 = _t095C;
        }
      }
      int _t08DA = prim *0033 (_t08D8, _t08D9);
      int _t08DB = 0;
      bool _t08DC = prim >007F (_t08DA, _t08DB);
      if _t08DC {
        s0860 = cup08B4;
      }
    }
    string _t08DD = "new interval:";
    vec2 _t08DE = [s0860, e0861];
    string _t08DF = "\n";
    print (_t08DD, _t08DE, _t08DF);
    bool _t08E0;
    real _t08E1 = prim |()|00B5<$[]> (fa089C);
    bool _t08E2 = prim <007A (_t08E1, eps0476);
    if _t08E2 {
      _t08E0 = true;
    } else {
      bool _t08E3;
      real _t08E4 = prim |()|00B5<$[]> (fm08CE);
      bool _t08E5 = prim <007A (_t08E4, eps0476);
      if _t08E5 {
        _t08E3 = true;
      } else {
        int _t08E6 = 32;
        _t08E3 = prim >007F (intersectionItter085D, _t08E6);
      }
      _t08E0 = _t08E3;
    }
    if _t08E0 {
      intersectionItter085D = 0;
      bool _t08E7;
      real _t08E8 = prim |()|00B5<$[]> (fm08CE);
      bool _t08E9 = prim >0080 (_t08E8, eps0476);
      if _t08E9 {
        real _t08EA = prim |()|00B5<$[]> (fa089C);
        _t08E7 = prim >0080 (_t08EA, eps0476);
      } else {
        _t08E7 = false;
      }
      if _t08E7 {
        int _t08EB = 1;
        itter085C = prim +0015 (itter085C, _t08EB);
        bool _t08EC = prim >=007D (itter085C, len0857);
        if _t08EC {
          string _t08ED = "Fin pixel=============================\n";
          print (_t08ED);
          stabilize;
        }
        int _t08EE = prim +0015 (offset0854, itter085C);
        interval085F = prim $dynsub01C2<vec2> (times0478, _t08EE);
        int _t08EF = prim +0015 (offset0854, itter085C);
        int _t08F0 = prim $dynsub01C2<int> (cells0479, _t08EF);
        cc0862 = prim $dynsub01C2<Femdata: MeshCell> (0cell_a0467, _t08F0);
        s0860 = interval085F[0];
        e0861 = interval085F[1];
        Femdata: FuncCell fc0953;
        int _t0954 = extractFemItem(CellIndex(MeshCell), int, cc0862);
        Femdata: FuncCell _t0955 = loadFem(FuncCell, c0474, _t0954);
        fc0953 = _t0955;
        fc0864 = fc0953;
        string _t08F1 = "Next interval!\n";
        print (_t08F1);
        continue;
      } else {
        real _t08F2 = 0.e0;
        real _t08F3 = 0.e0;
        vec2 grad08F4 = [_t08F2, _t08F3];
        real _t08F6 = prim |()|00B5<$[]> (fm08CE);
        bool _t08F7 = prim <007A (_t08F6, eps0476);
        if _t08F7 {
          Femdata: FemFunc _t08F8 = extractFem(fc0864, FemFunc);
          Femdata: FemFunc _t08F9 = extractFem(fc0864, FemFunc);
          Femdata: Space _t08FA = extractFem(_t08F9, Space);
          int _t08FB = extractFemItem(CellIndex(FuncCell), int, fc0864);
          field(2)[] _t08FC = femField(_t08F8,_t08FB,field(2)[],refField,);
          Femdata: Mesh _t08FD = extractFem(cc0862, Mesh);
          Femdata: Mesh _t08FE = extractFem(cc0862, Mesh);
          int _t08FF = extractFemItem(CellIndex(MeshCell), int, cc0862);
          field(2)[2] _t0900 = femField(_t08FD,_t08FF,field(2)[2],InvTransform,_msh_newtonInverse04FB );
          field(2)[] _t0901 = prim ∘0164<#∞; %2; $[]; %2; $[2]> (_t08FC, _t0900);
          field(2)[2] _t0902 = prim ∇00A8<#∞; %2> (_t0901);
          grad08F4 = prim @00A5<#∞; %2; $[2]> (_t0902, midRay08BE);
          out0866 = fmVal08C9;
        }
        real _t0903 = prim |()|00B5<$[]> (fa089C);
        bool _t0904 = prim <007A (_t0903, eps0476);
        if _t0904 {
          cup08B4 = s0860;
          Femdata: FemFunc _t0905 = extractFem(fc0864, FemFunc);
          Femdata: FemFunc _t0906 = extractFem(fc0864, FemFunc);
          Femdata: Space _t0907 = extractFem(_t0906, Space);
          int _t0908 = extractFemItem(CellIndex(FuncCell), int, fc0864);
          field(2)[] _t0909 = femField(_t0905,_t0908,field(2)[],refField,);
          Femdata: Mesh _t090A = extractFem(cc0862, Mesh);
          Femdata: Mesh _t090B = extractFem(cc0862, Mesh);
          int _t090C = extractFemItem(CellIndex(MeshCell), int, cc0862);
          field(2)[2] _t090D = femField(_t090A,_t090C,field(2)[2],InvTransform,_msh_newtonInverse04FB );
          field(2)[] _t090E = prim ∘0164<#∞; %2; $[]; %2; $[2]> (_t0909, _t090D);
          field(2)[2] _t090F = prim ∇00A8<#∞; %2> (_t090E);
          grad08F4 = prim @00A5<#∞; %2; $[2]> (_t090F, startRay087D);
          out0866 = faVal0897;
        }
        string _t0910 = "Out val:";
        string _t0911 = "\n";
        print (_t0910, out0866, _t0911);
        string _t0912 = "Grad val:";
        string _t0913 = "\n";
        print (_t0912, grad08F4, _t0913);
        real _t0914 = 0.1e1;
        real _t0915 = 0.1e1;
        real _t0916 = 0.1e1;
        vec3 mcol0917 = [_t0914, _t0915, _t0916];
        bool _t0918 = prim !=0088 (cmin0484, cmax0485);
        if _t0918 {
          int _t0919 = -1;
          real _t091A = (real)_t0919;
          real _t091B = 0.1e1;
          real _t091C = prim lerp0098<$[]> (_t091A, _t091B, cmin0484, out0866, cmax0485);
          mcol0917 = prim @00A5<#0; %1; $[3]> (CM0829, _t091C);
        }
        if light0486 {
          real _t091D = grad08F4[0];
          real _t091E = grad08F4[1];
          int _t091F = -1;
          real _t0920 = (real)_t091F;
          vec3 N0921 = [_t091D, _t091E, _t0920];
          vec3 _t0922 = prim normalize0137<$[3]> (rayVec084B);
          vec3 _t0923 = prim unary -008B<$[3]> (_t0922);
          vec3 _t0924 = prim +0017<$[3]> (_t0923, L082D);
          vec3 H0925 = prim normalize0137<$[3]> (_t0924);
          vec3 lightColor0926 = prim lerp0098<$[3]> (mcnear047A, mcfar047E, camNearVsp0850, cup08B4, camFarVsp0851);
          vec3 ambientTerm0927 = prim *0036<$[3]> (phongKa0487, mcol0917);
          vec3 _t0928 = prim modulate0129<%3> (mcol0917, lightColor0926);
          vec3 _t0929 = prim *0036<$[3]> (phongKd0488, _t0928);
          real _t092A = 0.e0;
          real _t092B = prim •00CE<$[3]; $[3]; $[]> (N0921, L082D);
          real _t092C = prim max0125 (_t092A, _t092B);
          vec3 diffuse092D = prim *0038<$[3]> (_t0929, _t092C);
          vec3 _t092E = prim *0036<$[3]> (phongKs0489, lightColor0926);
          real _t092F = 0.e0;
          real _t0930 = prim •00CE<$[3]; $[3]; $[]> (N0921, H0925);
          real _t0931 = prim max0125 (_t092F, _t0930);
          real _t0932 = prim ^0069 (_t0931, phongSp048A);
          vec3 specular0933 = prim *0038<$[3]> (_t092E, _t0932);
          vec3 _t0934 = prim +0017<$[3]> (ambientTerm0927, diffuse092D);
          vec3 fin0935 = prim +0017<$[3]> (_t0934, specular0933);
          real _t0936 = fin0935[0];
          real _t0937 = fin0935[1];
          real _t0938 = fin0935[2];
          real _t0939 = 0.1e1;
          rgba0867 = [_t0936, _t0937, _t0938, _t0939];
        } else {
          real _t093A = mcol0917[0];
          real _t093B = mcol0917[1];
          real _t093C = mcol0917[2];
          real _t093D = 0.1e1;
          rgba0867 = [_t093A, _t093B, _t093C, _t093D];
        }
        stabilize;
      }
    } else {
      string _t093E = "=========\n";
      print (_t093E);
    }
  }
}
grid(2) {
  int _t093F = 0;
  int _t0940 = 1;
  int _t0941 = prim -0024 (iresU0460, _t0940);
  int[] _t0942 = prim $range01C3 (_t093F, _t0941);
  foreach vi0948 in _t0942 {
    int _t0943 = 0;
    int _t0944 = 1;
    int _t0945 = prim -0024 (iresV0461, _t0944);
    int[] _t0946 = prim $range01C3 (_t0943, _t0945);
    foreach ui0947 in _t0946 {
      new ray (ui0947, vi0948);
    }
  }
}
/* Program end */
/* Simplified Program (after after simplify fem vars) start */
properties: GlobalInit,StrandArray,HasStartMethod,ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[]),HasInputs,HasGlobals
input real isoval0451 = <default>;
input real thick0452 = <default>;
input vec3 camEye0453 = <default>;
input vec3 camAt0457 = <default>;
input vec3 camUp045B = <default>;
input real camFOV045F = <default>;
input int iresU0460 = <default>;
input int iresV0461 = <default>;
input real camNear0462 = <default>;
input real camFar0463 = <default>;
input real refStep0464 = <default>;
input real rayStep0465 = <default>;
input FemData:Mesh a0466;
input FemData:Space 0b0472_intermedateGlobal0473;
input FemData:FemFunc 0c0474_intermedateGlobal0475;
input real eps0476 = <default>;
input int[] indecies0477;
input vec2[] times0478;
input int[] cells0479;
input vec3 mcnear047A("material color at near clipping plane (for depth cuing)") = <default>;
input vec3 mcfar047E("material color at far clipping plane") = <default>;
input image(1)[3] cmap0483("univariate colormap") = image("/home/teocollin/gitcode/diderot/tests/lipRay/find/cmap.nrrd");
input real cmin0484("value mapped to min end of colormap") = <default>;
input real cmax0485("value mapped to max end of colormap. By default cmin==cmax==0, which disables this colormapping") = <default>;
input bool light0486 = <default>;
input real phongKa0487("Blinn-Phong ambient component") = <default>;
input real phongKd0488("Blinn-Phong diffuse component") = <default>;
input real phongKs0489("Blinn-Phong specular component") = <default>;
input real phongSp048A("Blinn-Phong specularity exponent") = <default>;
input real maxAlpha048B("maximum opacity on rendered surface") = <default>;
input vec3 lightVsp048C = <default>;
constants {
  isoval0451 = 0.2e0;
  thick0452 = 0.7e-1;
  real _t0454 = 0.3e1;
  real _t0455 = -0.3e1;
  real _t0456 = 0.3e1;
  camEye0453 = [_t0454, _t0455, _t0456];
  real _t0458 = 0.5e0;
  real _t0459 = 0.5e0;
  real _t045A = 0.5e0;
  camAt0457 = [_t0458, _t0459, _t045A];
  real _t045C = 0.e0;
  real _t045D = 0.e0;
  real _t045E = 0.1e1;
  camUp045B = [_t045C, _t045D, _t045E];
  camFOV045F = 0.137e2;
  iresU0460 = 10;
  iresV0461 = 10;
  camNear0462 = -0.2e1;
  camFar0463 = 0.5e1;
  refStep0464 = 0.1e1;
  rayStep0465 = 0.1e-1;
  eps0476 = 0.1e-5;
  real _t047B = 0.1e1;
  real _t047C = 0.1e1;
  real _t047D = 0.1e1;
  mcnear047A = [_t047B, _t047C, _t047D];
  real _t047F = 0.1e1;
  real _t0480 = 0.1e1;
  real _t0481 = 0.1e1;
  mcfar047E = [_t047F, _t0480, _t0481];
  cmin0484 = 0.e0;
  cmax0485 = 0.1e1;
  light0486 = true;
  phongKa0487 = 0.5e0;
  phongKd0488 = 0.5e0;
  phongKs0489 = 0.e0;
  phongSp048A = 0.6e2;
  maxAlpha048B = 0.1e1;
  real _t048D = 0.e0;
  real _t048E = 0.e0;
  real _t048F = 0.1e1;
  lightVsp048C = [_t048D, _t048E, _t048F];
}
global Femdata: MeshCell[] 0cell_a0467;
global Femdata: Space b0472;
global Femdata: FemFunc c0474;
global real camDist0815;
global real camNearVsp0816;
global real camFarVsp0817;
global vec3 camN0819;
global vec3 camU081B;
global vec3 camV081C;
global real camVmax0822;
global real camUmax0826;
global field#0(1)[3] CM0829;
global vec3 L082D;
function Femdata: MeshPos#5 _msh_newtonInverse04FB (vec2 pos04FC, int cellInt04FD, Femdata: Mesh mesh04FE)
{
  real _t04FF = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t0500 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  xn0501 = [_t04FF, _t0500];
  field(2)[2] _t0502 = femField(mesh04FE,cellInt04FD,field(2)[2],Transform,);
  field(2)[2,2] _t0503 = prim ∇⊗00AD<#∞; %2; $[]; %2> (_t0502);
  field(2)[2,2] _t0504 = prim inv015B<#∞; %2> (_t0503);
  real _t0505 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t0506 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  vec2 _t0507 = [_t0505, _t0506];
  A0508 = prim @00A5<#∞; %2; $[2,2]> (_t0504, _t0507);
  int _t0509 = 0;
  int _t050A = 16;
  int[] _t050B = prim $range01C3 (_t0509, _t050A);
  foreach itter052F in _t050B {
    field(2)[2] _t050C = femField(mesh04FE,cellInt04FD,field(2)[2],Transform,);
    field(2)[2] _t050D = prim -002E<#∞; %2; $[2]> (_t050C, pos04FC);
    field(2)[2] _t050E = prim •00D4<#∞; %2; $[2,2]; $[2]; $[2]> (A0508, _t050D);
    delta050F = prim @00A5<#∞; %2; $[2]> (_t050E, xn0501);
    xn0501 = prim -0026<$[2]> (xn0501, delta050F);
    real _t0510 = 0.1e-7;
    real _t0511 = 0.1e-7;
    real _t0512 = prim *0034 (_t0510, _t0511);
    real _t0513 = prim •00CE<$[2]; $[2]; $[]> (delta050F, delta050F);
    bool _t0514 = prim >=007E (_t0512, _t0513);
    if _t0514 {
      real _t0515 = 0.1e1;
      real _t0516 = 0.1e-8;
      real _t0517 = prim +0017<$[]> (_t0515, _t0516);
      real _t0518 = 0.1e1;
      real _t0519 = 0.1e1;
      vec2 _t051A = [_t0518, _t0519];
      real _t051B = prim •00CE<$[2]; $[2]; $[]> (_t051A, xn0501);
      bool _t051C = prim >0080 (_t0517, _t051B);
      real _t051D = 0.1e-8;
      real _t051E = 0.1e-8;
      vec2 _t051F = [_t051D, _t051E];
      vec2 _t0520 = prim +0017<$[2]> (_t051F, xn0501);
      real _t0521 = _t0520[0];
      real _t0522 = -0.e0;
      bool _t0523 = prim >0080 (_t0521, _t0522);
      real _t0524 = 0.1e-8;
      real _t0525 = 0.1e-8;
      vec2 _t0526 = [_t0524, _t0525];
      vec2 _t0527 = prim +0017<$[2]> (_t0526, xn0501);
      real _t0528 = _t0527[1];
      real _t0529 = -0.e0;
      bool _t052A = prim >0080 (_t0528, _t0529);
      bool _t052B = prim $and01C4 (_t0523, _t052A);
      bool _t052C = prim $and01C4 (_t051C, _t052B);
      if _t052C {
        Femdata: MeshPos _t052D = extractFemItemN((mesh04FE, cellInt04FD, xn0501, pos04FC),AllBuild(MeshPos),);
        return _t052D;
      } else {
        Femdata: MeshPos _t052E = extractFemItemN((mesh04FE),InvalidBuild(MeshPos),);
        return _t052E;
      }
    }
  }
  Femdata: MeshPos _t0530 = extractFemItemN((mesh04FE),InvalidBuild(MeshPos),);
  return _t0530;
}
function int[2]#5 nextCell40547 (int faceIdx05BA, int cell05BB, Femdata: Mesh mesh05BC)
{
  int _t05BD = 6;
  int _t05BE = prim *0033 (cell05BB, _t05BD);
  int _t05BF = 2;
  int _t05C0 = prim *0033 (faceIdx05BA, _t05BF);
  int _t05C1 = prim +0015 (_t05BE, _t05C0);
  int[2] _t05C2 = extractFemItemN((mesh05BC, _t05C1),CellFaceCell(Mesh),);
  return _t05C2;
}
globalInit {
  int _t046A = 0;
  int _t0468 = 1;
  int _t046C = extractFemItem(NumCell(Mesh), int, a0466);
  int _t046B = prim -0024 (_t046C, _t0468);
  int[] _t046F = prim $range01C3 (_t046A, _t046B);
  Femdata: MeshCell[] _t0470 = {};
  foreach _t046E in _t046F {
    Femdata: MeshCell _t0471 = loadFem(MeshCell, a0466, _t046E);
    _t0470 = prim @0010<Femdata: MeshCell> (_t0470, _t0471);
  }
  0cell_a0467 = _t0470;
  b0472 = loadFem(Space, 0b0472_intermedateGlobal0473, a0466);
  c0474 = loadFem(FemFunc, 0c0474_intermedateGlobal0475, b0472);
  vec3 _t0814 = prim -0026<$[3]> (camAt0457, camEye0453);
  camDist0815 = prim |()|00B5<$[3]> (_t0814);
  camNearVsp0816 = prim +0017<$[]> (camNear0462, camDist0815);
  camFarVsp0817 = prim +0017<$[]> (camFar0463, camDist0815);
  vec3 _t0818 = prim -0026<$[3]> (camAt0457, camEye0453);
  camN0819 = prim normalize0137<$[3]> (_t0818);
  vec3 _t081A = prim ×00BE (camN0819, camUp045B);
  camU081B = prim normalize0137<$[3]> (_t081A);
  camV081C = prim ×00BE (camU081B, camN0819);
  real _t081D = 0.314159265358979323846264338327950288e1;
  real _t081E = prim *0034 (camFOV045F, _t081D);
  real _t081F = 0.36e3;
  real _t0820 = prim /0055 (_t081E, _t081F);
  real _t0821 = prim tan0179 (_t0820);
  camVmax0822 = prim *0034 (_t0821, camDist0815);
  real _t0823 = (real)iresU0460;
  real _t0824 = prim *0034 (camVmax0822, _t0823);
  real _t0825 = (real)iresV0461;
  camUmax0826 = prim /0055 (_t0824, _t0825);
  kernel _t0827 = tent;
  IMAGE1D<double[3]> img0828 = clamp(cmap0483);
  CM0829 = prim ⊛0074<#0; %1; $[3]> (_t0827, img0828);
  tensor[3,3] _t082A = [camU081B, camV081C, camN0819];
  tensor[3,3] _t082B = prim transpose0145<%3; %3> (_t082A);
  vec3 _t082C = prim normalize0137<$[3]> (lightVsp048C);
  L082D = prim •00CE<$[3,3]; $[3]; $[3]> (_t082B, _t082C);
}
strand ray (int ui0837, int vi0838) {
  real rayU0839;
  real rayV0840;
  vec3 UV0847;
  vec3 rayOrig084A;
  vec3 rayVec084B;
  real camNearVsp0850;
  real camFarVsp0851;
  int offset0854;
  int len0857;
  int itter085C;
  int intersectionItter085D;
  int idx085E;
  vec2 interval085F;
  real s0860;
  real e0861;
  Femdata: MeshCell cc0862;
  Femdata: FuncCell fc0864;
  output real out0866;
  output vec4 rgba0867;
  {
    real _t083A = prim unary -008B<$[]> (camUmax0826);
    real _t083B = -0.5e0;
    real _t083C = (real)ui0837;
    real _t083D = (real)iresU0460;
    real _t083E = 0.5e0;
    real _t083F = prim -0026<$[]> (_t083D, _t083E);
    rayU0839 = prim lerp0098<$[]> (_t083A, camUmax0826, _t083B, _t083C, _t083F);
    real _t0841 = prim unary -008B<$[]> (camVmax0822);
    real _t0842 = -0.5e0;
    real _t0843 = (real)vi0838;
    real _t0844 = (real)iresV0461;
    real _t0845 = 0.5e0;
    real _t0846 = prim -0026<$[]> (_t0844, _t0845);
    rayV0840 = prim lerp0098<$[]> (_t0841, camVmax0822, _t0842, _t0843, _t0846);
    vec3 _t0848 = prim *0036<$[3]> (rayU0839, camU081B);
    vec3 _t0849 = prim *0036<$[3]> (rayV0840, camV081C);
    UV0847 = prim +0017<$[3]> (_t0848, _t0849);
    rayOrig084A = prim +0017<$[3]> (camEye0453, UV0847);
    real _t084C = 0.e0;
    real _t084D = 0.e0;
    real _t084E = 0.e0;
    vec3 _t084F = [_t084C, _t084D, _t084E];
    rayVec084B = prim +0017<$[3]> (camN0819, _t084F);
    camNearVsp0850 = camNearVsp0816;
    camFarVsp0851 = camFarVsp0817;
    int _t0855 = prim *0033 (ui0837, iresV0461);
    int _t0856 = prim +0015 (_t0855, vi0838);
    offset0854 = prim $dynsub01C2<int> (indecies0477, _t0856);
    int _t0858 = prim *0033 (iresU0460, iresV0461);
    int _t0859 = prim *0033 (ui0837, iresV0461);
    int _t085A = prim +0015 (_t0858, _t0859);
    int _t085B = prim +0015 (_t085A, vi0838);
    len0857 = prim $dynsub01C2<int> (indecies0477, _t085B);
    itter085C = 0;
    intersectionItter085D = 0;
    idx085E = prim +0015 (offset0854, itter085C);
    interval085F = prim $dynsub01C2<vec2> (times0478, idx085E);
    s0860 = interval085F[0];
    e0861 = interval085F[1];
    int _t0863 = 0;
    cc0862 = prim $dynsub01C2<Femdata: MeshCell> (0cell_a0467, _t0863);
    Femdata: FuncCell fc094D;
    int _t094E = extractFemItem(CellIndex(MeshCell), int, cc0862);
    Femdata: FuncCell _t094F = loadFem(FuncCell, c0474, _t094E);
    fc094D = _t094F;
    fc0864 = fc094D;
    out0866 = 0.e0;
    real _t0868 = 0.e0;
    real _t0869 = 0.e0;
    real _t086A = 0.e0;
    real _t086B = 0.e0;
    rgba0867 = [_t0868, _t0869, _t086A, _t086B];
  }
  start
  {
    int _t086C = 0;
    bool _t086D = prim ==0082 (len0857, _t086C);
    if _t086D {
      stabilize;
    }
    int _t086E = prim $dynsub01C2<int> (cells0479, idx085E);
    cc0862 = prim $dynsub01C2<Femdata: MeshCell> (0cell_a0467, _t086E);
    Femdata: FuncCell fc0950;
    int _t0951 = extractFemItem(CellIndex(MeshCell), int, cc0862);
    Femdata: FuncCell _t0952 = loadFem(FuncCell, c0474, _t0951);
    fc0950 = _t0952;
    fc0864 = fc0950;
  }
  update
  {
    string _t086F = "Interval:";
    vec2 _t0870 = [s0860, e0861];
    string _t0871 = "\n";
    print (_t086F, _t0870, _t0871);
    string _t0872 = "inner itter:";
    string _t0873 = "\n";
    print (_t0872, intersectionItter085D, _t0873);
    string _t0874 = "Outer itter:";
    string _t0875 = "\n";
    print (_t0874, itter085C, _t0875);
    real _t0876 = rayOrig084A[0];
    real _t0877 = rayOrig084A[1];
    vec2 _t0878 = [_t0876, _t0877];
    real _t0879 = rayVec084B[0];
    real _t087A = rayVec084B[1];
    vec2 _t087B = [_t0879, _t087A];
    vec2 _t087C = prim *0036<$[2]> (s0860, _t087B);
    vec2 startRay087D = prim +0017<$[2]> (_t0878, _t087C);
    real _t087E = rayOrig084A[0];
    real _t087F = rayOrig084A[1];
    vec2 _t0880 = [_t087E, _t087F];
    real _t0881 = rayVec084B[0];
    real _t0882 = rayVec084B[1];
    vec2 _t0883 = [_t0881, _t0882];
    vec2 _t0884 = prim *0036<$[2]> (e0861, _t0883);
    vec2 endRay0885 = prim +0017<$[2]> (_t0880, _t0884);
    Femdata: Mesh _t0886 = extractFem(cc0862, Mesh);
    Femdata: Mesh _t0887 = extractFem(cc0862, Mesh);
    int _t0888 = extractFemItem(CellIndex(MeshCell), int, cc0862);
    field(2)[2] _t0889 = femField(_t0886,_t0888,field(2)[2],InvTransform,_msh_newtonInverse04FB );
    vec2 invertA088A = prim @00A5<#∞; %2; $[2]> (_t0889, startRay087D);
    Femdata: Mesh _t088B = extractFem(cc0862, Mesh);
    Femdata: Mesh _t088C = extractFem(cc0862, Mesh);
    int _t088D = extractFemItem(CellIndex(MeshCell), int, cc0862);
    field(2)[2] _t088E = femField(_t088B,_t088D,field(2)[2],InvTransform,_msh_newtonInverse04FB );
    vec2 invertB088F = prim @00A5<#∞; %2; $[2]> (_t088E, endRay0885);
    string _t0890 = "inverses:";
    string _t0891 = "\n";
    print (_t0890, invertA088A, invertB088F, _t0891);
    Femdata: FemFunc _t0892 = extractFem(fc0864, FemFunc);
    Femdata: FemFunc _t0893 = extractFem(fc0864, FemFunc);
    Femdata: Space _t0894 = extractFem(_t0893, Space);
    int _t0895 = extractFemItem(CellIndex(FuncCell), int, fc0864);
    field(2)[] _t0896 = femField(_t0892,_t0895,field(2)[],refField,);
    real faVal0897 = prim @00A5<#∞; %2; $[]> (_t0896, invertA088A);
    real _t0898 = rayVec084B[2];
    real _t0899 = prim *0034 (_t0898, s0860);
    real _t089A = prim -0026<$[]> (faVal0897, _t0899);
    real _t089B = rayOrig084A[2];
    real fa089C = prim -0026<$[]> (_t089A, _t089B);
    Femdata: FemFunc _t089D = extractFem(fc0864, FemFunc);
    Femdata: FemFunc _t089E = extractFem(fc0864, FemFunc);
    Femdata: Space _t089F = extractFem(_t089E, Space);
    int _t08A0 = extractFemItem(CellIndex(FuncCell), int, fc0864);
    field(2)[] _t08A1 = femField(_t089D,_t08A0,field(2)[],refField,);
    real _t08A2 = prim @00A5<#∞; %2; $[]> (_t08A1, invertB088F);
    real _t08A3 = rayVec084B[2];
    real _t08A4 = prim *0034 (_t08A3, e0861);
    real _t08A5 = prim -0026<$[]> (_t08A2, _t08A4);
    real _t08A6 = rayOrig084A[2];
    real fb08A7 = prim -0026<$[]> (_t08A5, _t08A6);
    string _t08A8 = "Vals:";
    vec2 _t08A9 = [fa089C, fb08A7];
    string _t08AA = "\n";
    print (_t08A8, _t08A9, _t08AA);
    real _t08AB = prim -0026<$[]> (fa089C, fb08A7);
    real _t08AC = prim |()|00B5<$[]> (_t08AB);
    bool _t08AD = prim <007A (_t08AC, eps0476);
    if _t08AD {
      real _t08AE = prim |()|00B5<$[]> (fa089C);
      bool _t08AF = prim >0080 (_t08AE, eps0476);
      if _t08AF {
        s0860 = prim +0017<$[]> (s0860, eps0476);
        continue;
      }
    }
    real _t08B0 = prim *0034 (s0860, fb08A7);
    real _t08B1 = prim *0034 (e0861, fa089C);
    real _t08B2 = prim -0026<$[]> (_t08B0, _t08B1);
    real _t08B3 = prim -0026<$[]> (fb08A7, fa089C);
    real cup08B4 = prim /0055 (_t08B2, _t08B3);
    string _t08B5 = "Mid time:";
    string _t08B6 = "\n";
    print (_t08B5, cup08B4, _t08B6);
    real _t08B7 = rayOrig084A[0];
    real _t08B8 = rayOrig084A[1];
    vec2 _t08B9 = [_t08B7, _t08B8];
    real _t08BA = rayVec084B[0];
    real _t08BB = rayVec084B[1];
    vec2 _t08BC = [_t08BA, _t08BB];
    vec2 _t08BD = prim *0036<$[2]> (cup08B4, _t08BC);
    vec2 midRay08BE = prim +0017<$[2]> (_t08B9, _t08BD);
    Femdata: Mesh _t08BF = extractFem(cc0862, Mesh);
    Femdata: Mesh _t08C0 = extractFem(cc0862, Mesh);
    int _t08C1 = extractFemItem(CellIndex(MeshCell), int, cc0862);
    field(2)[2] _t08C2 = femField(_t08BF,_t08C1,field(2)[2],InvTransform,_msh_newtonInverse04FB );
    vec2 invertC08C3 = prim @00A5<#∞; %2; $[2]> (_t08C2, midRay08BE);
    Femdata: FemFunc _t08C4 = extractFem(fc0864, FemFunc);
    Femdata: FemFunc _t08C5 = extractFem(fc0864, FemFunc);
    Femdata: Space _t08C6 = extractFem(_t08C5, Space);
    int _t08C7 = extractFemItem(CellIndex(FuncCell), int, fc0864);
    field(2)[] _t08C8 = femField(_t08C4,_t08C7,field(2)[],refField,);
    real fmVal08C9 = prim @00A5<#∞; %2; $[]> (_t08C8, invertC08C3);
    real _t08CA = rayVec084B[2];
    real _t08CB = prim *0034 (_t08CA, cup08B4);
    real _t08CC = prim -0026<$[]> (fmVal08C9, _t08CB);
    real _t08CD = rayOrig084A[2];
    real fm08CE = prim -0026<$[]> (_t08CC, _t08CD);
    string _t08CF = "all vals:";
    vec3 _t08D0 = [fa089C, fm08CE, fb08A7];
    string _t08D1 = "\n";
    print (_t08CF, _t08D0, _t08D1);
    int _t08D2 = 1;
    intersectionItter085D = prim +0015 (intersectionItter085D, _t08D2);
    int _t08D3;
    real _t096B = 0.e0;
    bool _t096C = prim >0080 (fa089C, _t096B);
    if _t096C {
      int _t096D = 1;
      _t08D3 = _t096D;
    } else {
      real _t096E = 0.e0;
      bool _t096F = prim <007A (fa089C, _t096E);
      if _t096F {
        int _t0970 = -1;
        _t08D3 = _t0970;
      } else {
        int _t0971 = 0;
        _t08D3 = _t0971;
      }
    }
    int _t08D4;
    real _t0964 = 0.e0;
    bool _t0965 = prim >0080 (fm08CE, _t0964);
    if _t0965 {
      int _t0966 = 1;
      _t08D4 = _t0966;
    } else {
      real _t0967 = 0.e0;
      bool _t0968 = prim <007A (fm08CE, _t0967);
      if _t0968 {
        int _t0969 = -1;
        _t08D4 = _t0969;
      } else {
        int _t096A = 0;
        _t08D4 = _t096A;
      }
    }
    int _t08D5 = prim *0033 (_t08D3, _t08D4);
    int _t08D6 = 0;
    bool _t08D7 = prim <0079 (_t08D5, _t08D6);
    if _t08D7 {
      e0861 = cup08B4;
    } else {
      int _t08D8;
      real _t095D = 0.e0;
      bool _t095E = prim >0080 (fa089C, _t095D);
      if _t095E {
        int _t095F = 1;
        _t08D8 = _t095F;
      } else {
        real _t0960 = 0.e0;
        bool _t0961 = prim <007A (fa089C, _t0960);
        if _t0961 {
          int _t0962 = -1;
          _t08D8 = _t0962;
        } else {
          int _t0963 = 0;
          _t08D8 = _t0963;
        }
      }
      int _t08D9;
      real _t0956 = 0.e0;
      bool _t0957 = prim >0080 (fm08CE, _t0956);
      if _t0957 {
        int _t0958 = 1;
        _t08D9 = _t0958;
      } else {
        real _t0959 = 0.e0;
        bool _t095A = prim <007A (fm08CE, _t0959);
        if _t095A {
          int _t095B = -1;
          _t08D9 = _t095B;
        } else {
          int _t095C = 0;
          _t08D9 = _t095C;
        }
      }
      int _t08DA = prim *0033 (_t08D8, _t08D9);
      int _t08DB = 0;
      bool _t08DC = prim >007F (_t08DA, _t08DB);
      if _t08DC {
        s0860 = cup08B4;
      }
    }
    string _t08DD = "new interval:";
    vec2 _t08DE = [s0860, e0861];
    string _t08DF = "\n";
    print (_t08DD, _t08DE, _t08DF);
    bool _t08E0;
    real _t08E1 = prim |()|00B5<$[]> (fa089C);
    bool _t08E2 = prim <007A (_t08E1, eps0476);
    if _t08E2 {
      _t08E0 = true;
    } else {
      bool _t08E3;
      real _t08E4 = prim |()|00B5<$[]> (fm08CE);
      bool _t08E5 = prim <007A (_t08E4, eps0476);
      if _t08E5 {
        _t08E3 = true;
      } else {
        int _t08E6 = 32;
        _t08E3 = prim >007F (intersectionItter085D, _t08E6);
      }
      _t08E0 = _t08E3;
    }
    if _t08E0 {
      intersectionItter085D = 0;
      bool _t08E7;
      real _t08E8 = prim |()|00B5<$[]> (fm08CE);
      bool _t08E9 = prim >0080 (_t08E8, eps0476);
      if _t08E9 {
        real _t08EA = prim |()|00B5<$[]> (fa089C);
        _t08E7 = prim >0080 (_t08EA, eps0476);
      } else {
        _t08E7 = false;
      }
      if _t08E7 {
        int _t08EB = 1;
        itter085C = prim +0015 (itter085C, _t08EB);
        bool _t08EC = prim >=007D (itter085C, len0857);
        if _t08EC {
          string _t08ED = "Fin pixel=============================\n";
          print (_t08ED);
          stabilize;
        }
        int _t08EE = prim +0015 (offset0854, itter085C);
        interval085F = prim $dynsub01C2<vec2> (times0478, _t08EE);
        int _t08EF = prim +0015 (offset0854, itter085C);
        int _t08F0 = prim $dynsub01C2<int> (cells0479, _t08EF);
        cc0862 = prim $dynsub01C2<Femdata: MeshCell> (0cell_a0467, _t08F0);
        s0860 = interval085F[0];
        e0861 = interval085F[1];
        Femdata: FuncCell fc0953;
        int _t0954 = extractFemItem(CellIndex(MeshCell), int, cc0862);
        Femdata: FuncCell _t0955 = loadFem(FuncCell, c0474, _t0954);
        fc0953 = _t0955;
        fc0864 = fc0953;
        string _t08F1 = "Next interval!\n";
        print (_t08F1);
        continue;
      } else {
        real _t08F2 = 0.e0;
        real _t08F3 = 0.e0;
        vec2 grad08F4 = [_t08F2, _t08F3];
        real _t08F6 = prim |()|00B5<$[]> (fm08CE);
        bool _t08F7 = prim <007A (_t08F6, eps0476);
        if _t08F7 {
          Femdata: FemFunc _t08F8 = extractFem(fc0864, FemFunc);
          Femdata: FemFunc _t08F9 = extractFem(fc0864, FemFunc);
          Femdata: Space _t08FA = extractFem(_t08F9, Space);
          int _t08FB = extractFemItem(CellIndex(FuncCell), int, fc0864);
          field(2)[] _t08FC = femField(_t08F8,_t08FB,field(2)[],refField,);
          Femdata: Mesh _t08FD = extractFem(cc0862, Mesh);
          Femdata: Mesh _t08FE = extractFem(cc0862, Mesh);
          int _t08FF = extractFemItem(CellIndex(MeshCell), int, cc0862);
          field(2)[2] _t0900 = femField(_t08FD,_t08FF,field(2)[2],InvTransform,_msh_newtonInverse04FB );
          field(2)[] _t0901 = prim ∘0164<#∞; %2; $[]; %2; $[2]> (_t08FC, _t0900);
          field(2)[2] _t0902 = prim ∇00A8<#∞; %2> (_t0901);
          grad08F4 = prim @00A5<#∞; %2; $[2]> (_t0902, midRay08BE);
          out0866 = fmVal08C9;
        }
        real _t0903 = prim |()|00B5<$[]> (fa089C);
        bool _t0904 = prim <007A (_t0903, eps0476);
        if _t0904 {
          cup08B4 = s0860;
          Femdata: FemFunc _t0905 = extractFem(fc0864, FemFunc);
          Femdata: FemFunc _t0906 = extractFem(fc0864, FemFunc);
          Femdata: Space _t0907 = extractFem(_t0906, Space);
          int _t0908 = extractFemItem(CellIndex(FuncCell), int, fc0864);
          field(2)[] _t0909 = femField(_t0905,_t0908,field(2)[],refField,);
          Femdata: Mesh _t090A = extractFem(cc0862, Mesh);
          Femdata: Mesh _t090B = extractFem(cc0862, Mesh);
          int _t090C = extractFemItem(CellIndex(MeshCell), int, cc0862);
          field(2)[2] _t090D = femField(_t090A,_t090C,field(2)[2],InvTransform,_msh_newtonInverse04FB );
          field(2)[] _t090E = prim ∘0164<#∞; %2; $[]; %2; $[2]> (_t0909, _t090D);
          field(2)[2] _t090F = prim ∇00A8<#∞; %2> (_t090E);
          grad08F4 = prim @00A5<#∞; %2; $[2]> (_t090F, startRay087D);
          out0866 = faVal0897;
        }
        string _t0910 = "Out val:";
        string _t0911 = "\n";
        print (_t0910, out0866, _t0911);
        string _t0912 = "Grad val:";
        string _t0913 = "\n";
        print (_t0912, grad08F4, _t0913);
        real _t0914 = 0.1e1;
        real _t0915 = 0.1e1;
        real _t0916 = 0.1e1;
        vec3 mcol0917 = [_t0914, _t0915, _t0916];
        bool _t0918 = prim !=0088 (cmin0484, cmax0485);
        if _t0918 {
          int _t0919 = -1;
          real _t091A = (real)_t0919;
          real _t091B = 0.1e1;
          real _t091C = prim lerp0098<$[]> (_t091A, _t091B, cmin0484, out0866, cmax0485);
          mcol0917 = prim @00A5<#0; %1; $[3]> (CM0829, _t091C);
        }
        if light0486 {
          real _t091D = grad08F4[0];
          real _t091E = grad08F4[1];
          int _t091F = -1;
          real _t0920 = (real)_t091F;
          vec3 N0921 = [_t091D, _t091E, _t0920];
          vec3 _t0922 = prim normalize0137<$[3]> (rayVec084B);
          vec3 _t0923 = prim unary -008B<$[3]> (_t0922);
          vec3 _t0924 = prim +0017<$[3]> (_t0923, L082D);
          vec3 H0925 = prim normalize0137<$[3]> (_t0924);
          vec3 lightColor0926 = prim lerp0098<$[3]> (mcnear047A, mcfar047E, camNearVsp0850, cup08B4, camFarVsp0851);
          vec3 ambientTerm0927 = prim *0036<$[3]> (phongKa0487, mcol0917);
          vec3 _t0928 = prim modulate0129<%3> (mcol0917, lightColor0926);
          vec3 _t0929 = prim *0036<$[3]> (phongKd0488, _t0928);
          real _t092A = 0.e0;
          real _t092B = prim •00CE<$[3]; $[3]; $[]> (N0921, L082D);
          real _t092C = prim max0125 (_t092A, _t092B);
          vec3 diffuse092D = prim *0038<$[3]> (_t0929, _t092C);
          vec3 _t092E = prim *0036<$[3]> (phongKs0489, lightColor0926);
          real _t092F = 0.e0;
          real _t0930 = prim •00CE<$[3]; $[3]; $[]> (N0921, H0925);
          real _t0931 = prim max0125 (_t092F, _t0930);
          real _t0932 = prim ^0069 (_t0931, phongSp048A);
          vec3 specular0933 = prim *0038<$[3]> (_t092E, _t0932);
          vec3 _t0934 = prim +0017<$[3]> (ambientTerm0927, diffuse092D);
          vec3 fin0935 = prim +0017<$[3]> (_t0934, specular0933);
          real _t0936 = fin0935[0];
          real _t0937 = fin0935[1];
          real _t0938 = fin0935[2];
          real _t0939 = 0.1e1;
          rgba0867 = [_t0936, _t0937, _t0938, _t0939];
        } else {
          real _t093A = mcol0917[0];
          real _t093B = mcol0917[1];
          real _t093C = mcol0917[2];
          real _t093D = 0.1e1;
          rgba0867 = [_t093A, _t093B, _t093C, _t093D];
        }
        stabilize;
      }
    } else {
      string _t093E = "=========\n";
      print (_t093E);
    }
  }
}
grid(2) {
  int _t093F = 0;
  int _t0940 = 1;
  int _t0941 = prim -0024 (iresU0460, _t0940);
  int[] _t0942 = prim $range01C3 (_t093F, _t0941);
  foreach vi0948 in _t0942 {
    int _t0943 = 0;
    int _t0944 = 1;
    int _t0945 = prim -0024 (iresV0461, _t0944);
    int[] _t0946 = prim $range01C3 (_t0943, _t0945);
    foreach ui0947 in _t0946 {
      new ray (ui0947, vi0948);
    }
  }
}
/* Program end */
##### high-ir: after simple-to-high translation ####
## properties
  GlobalInit StrandArray HasStartMethod ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[]) HasInputs HasGlobals
## globals
  input isoval0972 (isoval) = <default>
  input thick0973 (thick) = <default>
  input camEye0974 (camEye) = <default>
  input camAt0975 (camAt) = <default>
  input camUp0976 (camUp) = <default>
  input camFOV0977 (camFOV) = <default>
  input iresU0978 (iresU) = <default>
  input iresV0979 (iresV) = <default>
  input camNear097A (camNear) = <default>
  input camFar097B (camFar) = <default>
  input refStep097C (refStep) = <default>
  input rayStep097D (rayStep) = <default>
  input a097E (a) = <no-default>
  input 0b0472_intermedateGlobal097F (b) = <no-default>
  input 0c0474_intermedateGlobal0980 (c) = <no-default>
  input eps0981 (eps) = <default>
  input indecies0982 (indecies) = <no-default>
  input times0983 (times) = <no-default>
  input cells0984 (cells) = <no-default>
  input mcnear0985 (mcnear) = <default>
  input mcfar0986 (mcfar) = <default>
  input cmap0987 (cmap) = image("/home/teocollin/gitcode/diderot/tests/lipRay/find/cmap.nrrd")
  input cmin0988 (cmin) = <default>
  input cmax0989 (cmax) = <default>
  input light098A (light) = <default>
  input phongKa098B (phongKa) = <default>
  input phongKd098C (phongKd) = <default>
  input phongKs098D (phongKs) = <default>
  input phongSp098E (phongSp) = <default>
  input maxAlpha098F (maxAlpha) = <default>
  input lightVsp0990 (lightVsp) = <default>
  global femData:MeshCell[] 0cell_a09FF
  global femData:Space b0A00
  global femData:FemFunc c0A01
  global real camDist0A02
  global real camNearVsp0A03
  global real camFarVsp0A04
  global tensor[3] camN0A05
  global tensor[3] camU0A06
  global tensor[3] camV0A07
  global real camVmax0A08
  global real camUmax0A09
  global field CM0A0A
  global tensor[3] L0A0B
## functions
  function femData:MeshPos _msh_newtonInverse0A7F (tensor[2] pos0A0C#2, int cellInt0A0D#3, femData:Mesh mesh0A0E#7) {
    ENTRY0A7E:  preds = []
      real _t0A0F#1 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
      real _t0A11#1 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
      tensor[2] xn0A13#1 = <tensor[2]>[_t0A0F,_t0A11];
      field _t0A15#1 = λ(INT0,FEM(msh)1,FEM(msh)2)<femV(noFunc, 0, 1, 2)_{i0}⊛Basis()>_{2} (cellInt0A0D,mesh0A0E,mesh0A0E);
      field _t0A17#1 = λ(F0[2])<∂/∂x_{i1}@(F0_{i0})>_{2 2} (_t0A15);
      field _t0A19#1 = λ(F0[2])<((Σ(i5=0..1)(i7=0..1)<((ϵ_{ii5,ii0} * ϵ_{ii7,ii1} * F0_{i7,i5}))>(i5=0..1)(i7=0..1)) / ( 1)) / ( Σ(i3=0..1)(i4=0..1)<((ϵ_{ii3,ii4} * F0_{i3,'0'} * F0_{i4,'1'}))>(i3=0..1)(i4=0..1))>_{2 2} (_t0A17);
      real _t0A1B#1 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
      real _t0A1D#1 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
      tensor[2] _t0A1F#1 = <tensor[2]>[_t0A1B,_t0A1D];
      tensor[2,2] A0A21#1 = λ(F0[2],T1[2])<Probe(F0_{i0,i1},T1)>_{2 2} (_t0A19,_t0A1F);
      int _t0A23#1 = 0;
      int _t0A25#1 = 16;
      int[] _t0A27#1 = Range(_t0A23,_t0A25);
    FOREACH0A2B:  preds = [ASSIGN0A28,NEXT0A7A]
      foreach (itter0A29 in _t0A27) on exit goto ASSIGN0A7C
        tensor[2] xn0A2A#2 = phi(xn0A13,xn0A34)
      field _t0A2C#1 = λ(INT0,FEM(msh)1,FEM(msh)2)<femV(noFunc, 0, 1, 2)_{i0}⊛Basis()>_{2} (cellInt0A0D,mesh0A0E,mesh0A0E);
      field _t0A2E#1 = λ(T0[2],F1[2])<(F1_{i0}) - («T0_{i0}»)>_{2} (pos0A0C,_t0A2C);
      field _t0A30#1 = λ(T0[2 2],F1[2])<Σ(i1=0..1)<((«T0_{i0,i1}» * F1_{i1}))>(i1=0..1)>_{2} (A0A21,_t0A2E);
      tensor[2] delta0A32#3 = λ(F0[2],T1[2])<Probe(F0_{i0},T1)>_{2} (_t0A30,xn0A2A);
      tensor[2] xn0A34#5 = λ(T0[2],T1[2])<(T0_{i0}) - (T1_{i0})>_{2} (xn0A2A,delta0A32);
      real _t0A36#1 = 0.1e-7;
      real _t0A38#1 = 0.1e-7;
      real _t0A3A#1 = λ(T0[],T1[])<(T0 * T1)> (_t0A36,_t0A38);
      real _t0A3C#1 = λ(T0[2],T1[2])<Σ(i0=0..1)<((T0_{i0} * T1_{i0}))>(i0=0..1)> (delta0A32,delta0A32);
      bool _t0A3E#1 = GTE<real>(_t0A3A,_t0A3C);
      if _t0A3E then goto ASSIGN0A42 else goto JOIN0A40
    ASSIGN0A42:  preds = [COND0A79]
      real _t0A41#1 = 0.1e1;
      real _t0A43#1 = 0.1e-8;
      real _t0A45#1 = λ(T0[],T1[])<(T0 + T1)> (_t0A41,_t0A43);
      real _t0A47#1 = 0.1e1;
      real _t0A49#1 = 0.1e1;
      tensor[2] _t0A4B#1 = <tensor[2]>[_t0A47,_t0A49];
      real _t0A4D#1 = λ(T0[2],T1[2])<Σ(i0=0..1)<((T0_{i0} * T1_{i0}))>(i0=0..1)> (_t0A4B,xn0A34);
      bool _t0A4F#1 = GT<real>(_t0A45,_t0A4D);
      real _t0A51#1 = 0.1e-8;
      real _t0A53#1 = 0.1e-8;
      tensor[2] _t0A55#1 = <tensor[2]>[_t0A51,_t0A53];
      tensor[2] _t0A57#1 = λ(T0[2],T1[2])<(T0_{i0} + T1_{i0})>_{2} (_t0A55,xn0A34);
      real _t0A59#1 = TensorIndex<tensor[2],[0]>(_t0A57);
      real _t0A5B#1 = -0.e0;
      bool _t0A5D#1 = GT<real>(_t0A59,_t0A5B);
      real _t0A5F#1 = 0.1e-8;
      real _t0A61#1 = 0.1e-8;
      tensor[2] _t0A63#1 = <tensor[2]>[_t0A5F,_t0A61];
      tensor[2] _t0A65#1 = λ(T0[2],T1[2])<(T0_{i0} + T1_{i0})>_{2} (_t0A63,xn0A34);
      real _t0A67#1 = TensorIndex<tensor[2],[1]>(_t0A65);
      real _t0A69#1 = -0.e0;
      bool _t0A6B#1 = GT<real>(_t0A67,_t0A69);
      bool _t0A6D#1 = BAnd(_t0A5D,_t0A6B);
      bool _t0A6F#1 = BAnd(_t0A4F,_t0A6D);
      if _t0A6F then goto ASSIGN0A73 else goto ASSIGN0A76
    ASSIGN0A73:  preds = [COND0A78]
      femData:MeshPos _t0A72#1 = ExtractFemItemN<[femData:Mesh,int,tensor[2],tensor[2]],femData:MeshPos,AllBuild(MeshPos),0000,"",[],int>(mesh0A0E,cellInt0A0D,xn0A34,pos0A0C);
      return _t0A72
      goto JOIN0A71
    JOIN0A71:  preds = [*RETURN(_t0A72)0A74,*RETURN(_t0A75)0A77]
      goto JOIN0A40
    JOIN0A40:  preds = [*JOIN0A71,COND0A79]
      goto FOREACH0A2B
    ASSIGN0A76:  preds = [COND0A78]
      femData:MeshPos _t0A75#1 = ExtractFemItemN<[femData:Mesh],femData:MeshPos,InvalidBuild(MeshPos),0000,"",[],int>(mesh0A0E);
      return _t0A75
      goto JOIN0A71
    ASSIGN0A7C:  preds = [FOREACH0A2B]
      femData:MeshPos _t0A7B#1 = ExtractFemItemN<[femData:Mesh],femData:MeshPos,InvalidBuild(MeshPos),0000,"",[],int>(mesh0A0E);
      return _t0A7B
}
  function int[2] nextCell40A91 (int faceIdx0A80#1, int cell0A81#1, femData:Mesh mesh0A82#1) {
    ENTRY0A90:  preds = []
      int _t0A83#1 = 6;
      int _t0A85#1 = IMul(cell0A81,_t0A83);
      int _t0A87#1 = 2;
      int _t0A89#1 = IMul(faceIdx0A80,_t0A87);
      int _t0A8B#1 = IAdd(_t0A85,_t0A89);
      int[2] _t0A8D#1 = ExtractFemItemN<[femData:Mesh,int],int[2],CellFaceCell(Mesh),0000,"",[],int>(mesh0A82,_t0A8B);
      return _t0A8D
}
## input initialization
  ENTRY09FD:  preds = []
    real isoval0991#1 = 0.2e0;
    globals.isoval0972 = isoval0991;
    real thick0994#1 = 0.7e-1;
    globals.thick0973 = thick0994;
    real _t0997#1 = 0.3e1;
    real _t0999#1 = -0.3e1;
    real _t099B#1 = 0.3e1;
    tensor[3] camEye099D#1 = <tensor[3]>[_t0997,_t0999,_t099B];
    globals.camEye0974 = camEye099D;
    real _t09A0#1 = 0.5e0;
    real _t09A2#1 = 0.5e0;
    real _t09A4#1 = 0.5e0;
    tensor[3] camAt09A6#1 = <tensor[3]>[_t09A0,_t09A2,_t09A4];
    globals.camAt0975 = camAt09A6;
    real _t09A9#1 = 0.e0;
    real _t09AB#1 = 0.e0;
    real _t09AD#1 = 0.1e1;
    tensor[3] camUp09AF#1 = <tensor[3]>[_t09A9,_t09AB,_t09AD];
    globals.camUp0976 = camUp09AF;
    real camFOV09B2#1 = 0.137e2;
    globals.camFOV0977 = camFOV09B2;
    int iresU09B5#1 = 10;
    globals.iresU0978 = iresU09B5;
    int iresV09B8#1 = 10;
    globals.iresV0979 = iresV09B8;
    real camNear09BB#1 = -0.2e1;
    globals.camNear097A = camNear09BB;
    real camFar09BE#1 = 0.5e1;
    globals.camFar097B = camFar09BE;
    real refStep09C1#1 = 0.1e1;
    globals.refStep097C = refStep09C1;
    real rayStep09C4#1 = 0.1e-1;
    globals.rayStep097D = rayStep09C4;
    real eps09C7#1 = 0.1e-5;
    globals.eps0981 = eps09C7;
    real _t09CA#1 = 0.1e1;
    real _t09CC#1 = 0.1e1;
    real _t09CE#1 = 0.1e1;
    tensor[3] mcnear09D0#1 = <tensor[3]>[_t09CA,_t09CC,_t09CE];
    globals.mcnear0985 = mcnear09D0;
    real _t09D3#1 = 0.1e1;
    real _t09D5#1 = 0.1e1;
    real _t09D7#1 = 0.1e1;
    tensor[3] mcfar09D9#1 = <tensor[3]>[_t09D3,_t09D5,_t09D7];
    globals.mcfar0986 = mcfar09D9;
    real cmin09DC#1 = 0.e0;
    globals.cmin0988 = cmin09DC;
    real cmax09DF#1 = 0.1e1;
    globals.cmax0989 = cmax09DF;
    bool light09E2#1 = true;
    globals.light098A = light09E2;
    real phongKa09E5#1 = 0.5e0;
    globals.phongKa098B = phongKa09E5;
    real phongKd09E8#1 = 0.5e0;
    globals.phongKd098C = phongKd09E8;
    real phongKs09EB#1 = 0.e0;
    globals.phongKs098D = phongKs09EB;
    real phongSp09EE#1 = 0.6e2;
    globals.phongSp098E = phongSp09EE;
    real maxAlpha09F1#1 = 0.1e1;
    globals.maxAlpha098F = maxAlpha09F1;
    real _t09F4#1 = 0.e0;
    real _t09F6#1 = 0.e0;
    real _t09F8#1 = 0.1e1;
    tensor[3] lightVsp09FA#1 = <tensor[3]>[_t09F4,_t09F6,_t09F8];
    globals.lightVsp0990 = lightVsp09FA;
    return
## global-variable initialization
  ENTRY0B07:  preds = []
    tensor[3] camEye0A9E#2 = globals.camEye0974;
    tensor[3] camAt0A9D#2 = globals.camAt0975;
    tensor[3] camUp0A9C#1 = globals.camUp0976;
    real camFOV0A9B#1 = globals.camFOV0977;
    int iresU0A9A#1 = globals.iresU0978;
    int iresV0A99#1 = globals.iresV0979;
    real camNear0A98#1 = globals.camNear097A;
    real camFar0A97#1 = globals.camFar097B;
    femData:Mesh a0A96#3 = globals.a097E;
    femData:Space 0b0472_intermedateGlobal0A95#1 = globals.0b0472_intermedateGlobal097F;
    femData:FemFunc 0c0474_intermedateGlobal0A94#1 = globals.0c0474_intermedateGlobal0980;
    image(IMAGE1D<double[3]>) cmap0A93#1 = globals.cmap0987;
    tensor[3] lightVsp0A92#2 = globals.lightVsp0990;
    int _t0AAC#1 = 0;
    int _t0AAE#1 = 1;
    int _t0AB0#1 = ExtractFemItem<int,NumCell(Mesh)>(a0A96);
    int _t0AB2#1 = ISub(_t0AB0,_t0AAE);
    int[] _t0AB4#1 = Range(_t0AAC,_t0AB2);
    femData:MeshCell[] _t0AB6#1 = <femData:MeshCell[]>{};
  FOREACH0ABA:  preds = [ASSIGN0AB7,NEXT0ABF]
    foreach (_t0AB8 in _t0AB4) on exit goto ASSIGN0AC1
      femData:MeshCell[] _t0AB9#2 = phi(_t0AB6,_t0ABD)
    femData:MeshCell _t0ABB#1 = LoadFem<femData:MeshCell>(a0A96,_t0AB8);
    femData:MeshCell[] _t0ABD#1 = Append<femData:MeshCell>(_t0AB9,_t0ABB);
    goto FOREACH0ABA
  ASSIGN0AC1:  preds = [FOREACH0ABA]
    femData:MeshCell[] 0cell_a0AC0#1 = _t0AB9;
    globals.0cell_a09FF = 0cell_a0AC0;
    femData:Space b0AC3#2 = LoadFem<femData:Space>(0b0472_intermedateGlobal0A95,a0A96);
    globals.b0A00 = b0AC3;
    femData:FemFunc c0AC6#1 = LoadFem<femData:FemFunc>(0c0474_intermedateGlobal0A94,b0AC3);
    globals.c0A01 = c0AC6;
    tensor[3] _t0AC9#1 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (camAt0A9D,camEye0A9E);
    real camDist0ACB#4 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (_t0AC9);
    globals.camDist0A02 = camDist0ACB;
    real camNearVsp0ACE#1 = λ(T0[],T1[])<(T0 + T1)> (camNear0A98,camDist0ACB);
    globals.camNearVsp0A03 = camNearVsp0ACE;
    real camFarVsp0AD1#1 = λ(T0[],T1[])<(T0 + T1)> (camFar0A97,camDist0ACB);
    globals.camFarVsp0A04 = camFarVsp0AD1;
    tensor[3] _t0AD4#2 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (camAt0A9D,camEye0A9E);
    tensor[3] camN0AD6#4 = λ(T0[3],T1[3])<(T0_{i0} * (1) / ( Sqrt(Σ(i1=0..2)<((T1_{i1} * T1_{i1}))>(i1=0..2))))>_{3} (_t0AD4,_t0AD4);
    globals.camN0A05 = camN0AD6;
    tensor[3] _t0AD9#2 = λ(T0[3],T1[3])<Σ(i1=0..2)(i2=0..2)<((ϵ_{ii0,ii1,ii2} * T0_{i1} * T1_{i2}))>(i1=0..2)(i2=0..2)>_{3} (camN0AD6,camUp0A9C);
    tensor[3] camU0ADB#3 = λ(T0[3],T1[3])<(T0_{i0} * (1) / ( Sqrt(Σ(i1=0..2)<((T1_{i1} * T1_{i1}))>(i1=0..2))))>_{3} (_t0AD9,_t0AD9);
    globals.camU0A06 = camU0ADB;
    tensor[3] camV0ADE#2 = λ(T0[3],T1[3])<Σ(i1=0..2)(i2=0..2)<((ϵ_{ii0,ii1,ii2} * T0_{i1} * T1_{i2}))>(i1=0..2)(i2=0..2)>_{3} (camU0ADB,camN0AD6);
    globals.camV0A07 = camV0ADE;
    real _t0AE1#1 = 0.314159265358979323846264338327950288e1;
    real _t0AE3#1 = λ(T0[],T1[])<(T0 * T1)> (camFOV0A9B,_t0AE1);
    real _t0AE5#1 = 0.36e3;
    real _t0AE7#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t0AE3,_t0AE5);
    real _t0AE9#1 = λ(T0[])<Tangent(T0)> (_t0AE7);
    real camVmax0AEB#2 = λ(T0[],T1[])<(T0 * T1)> (_t0AE9,camDist0ACB);
    globals.camVmax0A08 = camVmax0AEB;
    real _t0AEE#1 = IntToReal(iresU0A9A);
    real _t0AF0#1 = λ(T0[],T1[])<(T0 * T1)> (camVmax0AEB,_t0AEE);
    real _t0AF2#1 = IntToReal(iresV0A99);
    real camUmax0AF4#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t0AF0,_t0AF2);
    globals.camUmax0A09 = camUmax0AF4;
    kernel _t0AF7#1 = Kernel<tent,0>;
    image(IMAGE1D<double[3]>) img0AF9#1 = BorderCtlClamp<IMAGE1D<double[3]>>(cmap0A93);
    field CM0AFB#1 = λ(V0(1)[3],H1)<V0_{i0}⊛H1>_{3} (img0AF9,_t0AF7);
    globals.CM0A0A = CM0AFB;
    tensor[3,3] _t0AFE#1 = <tensor[3,3]>[camU0ADB,camV0ADE,camN0AD6];
    tensor[3,3] _t0B00#1 = λ(T0[3 3])<T0_{i1,i0}>_{3 3} (_t0AFE);
    tensor[3] _t0B02#1 = λ(T0[3],T1[3])<(T0_{i0} * (1) / ( Sqrt(Σ(i1=0..2)<((T1_{i1} * T1_{i1}))>(i1=0..2))))>_{3} (lightVsp0A92,lightVsp0A92);
    tensor[3] L0B04#1 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (_t0B00,_t0B02);
    globals.L0A0B = L0B04;
    return
## strand
  strand ray (int ui0B26#3, int vi0B27#3)
    state:
      real rayU;
      real rayV;
      tensor[3] UV;
      tensor[3] rayOrig;
      tensor[3] rayVec;
      real camNearVsp;
      real camFarVsp;
      int offset;
      int len;
      int itter;
      int intersectionItter;
      int idx;
      tensor[2] interval;
      real s;
      real e;
      femData:MeshCell cc;
      femData:FuncCell fc;
      output real out;
      output tensor[4] rgba;
    state init
      ENTRY0BD1:  preds = []
        tensor[3] camEye0B48#1 = globals.camEye0974;
        int iresU0B47#2 = globals.iresU0978;
        int iresV0B46#4 = globals.iresV0979;
        femData:MeshCell[] 0cell_a0B45#1 = globals.0cell_a09FF;
        femData:FemFunc c0B44#1 = globals.c0A01;
        int[] indecies0B43#2 = globals.indecies0982;
        tensor[2][] times0B42#1 = globals.times0983;
        real camNearVsp0B41#1 = globals.camNearVsp0A03;
        real camFarVsp0B40#1 = globals.camFarVsp0A04;
        tensor[3] camN0B3F#1 = globals.camN0A05;
        tensor[3] camU0B3E#1 = globals.camU0A06;
        tensor[3] camV0B3D#1 = globals.camV0A07;
        real camVmax0B3C#2 = globals.camVmax0A08;
        real camUmax0B3B#2 = globals.camUmax0A09;
        real _t0B6A#1 = λ(T0[])<Neg(T0)> (camUmax0B3B);
        real _t0B6C#1 = -0.5e0;
        real _t0B6E#1 = IntToReal(ui0B26);
        real _t0B70#1 = IntToReal(iresU0B47);
        real _t0B72#1 = 0.5e0;
        real _t0B74#1 = λ(T0[],T1[])<(T0) - (T1)> (_t0B70,_t0B72);
        real rayU0B76#2 = λ(T0[],T1[],T2[],T3[],T4[])<(T0 + (((T3) - (T2)) / ( (T4) - (T2)) * (T1) - (T0)))> (_t0B6A,camUmax0B3B,_t0B6C,_t0B6E,_t0B74);
        real _t0B78#1 = λ(T0[])<Neg(T0)> (camVmax0B3C);
        real _t0B7A#1 = -0.5e0;
        real _t0B7C#1 = IntToReal(vi0B27);
        real _t0B7E#1 = IntToReal(iresV0B46);
        real _t0B80#1 = 0.5e0;
        real _t0B82#1 = λ(T0[],T1[])<(T0) - (T1)> (_t0B7E,_t0B80);
        real rayV0B84#2 = λ(T0[],T1[],T2[],T3[],T4[])<(T0 + (((T3) - (T2)) / ( (T4) - (T2)) * (T1) - (T0)))> (_t0B78,camVmax0B3C,_t0B7A,_t0B7C,_t0B82);
        tensor[3] _t0B86#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (rayU0B76,camU0B3E);
        tensor[3] _t0B88#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (rayV0B84,camV0B3D);
        tensor[3] UV0B8A#2 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (_t0B86,_t0B88);
        tensor[3] rayOrig0B8C#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (camEye0B48,UV0B8A);
        real _t0B8E#1 = 0.e0;
        real _t0B90#1 = 0.e0;
        real _t0B92#1 = 0.e0;
        tensor[3] _t0B94#1 = <tensor[3]>[_t0B8E,_t0B90,_t0B92];
        tensor[3] rayVec0B96#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (camN0B3F,_t0B94);
        real camNearVsp0B98#1 = camNearVsp0B41;
        real camFarVsp0B9A#1 = camFarVsp0B40;
        int _t0B9C#1 = IMul(ui0B26,iresV0B46);
        int _t0B9E#1 = IAdd(_t0B9C,vi0B27);
        int offset0BA0#2 = Subscript<int[]>(indecies0B43,_t0B9E);
        int _t0BA2#1 = IMul(iresU0B47,iresV0B46);
        int _t0BA4#1 = IMul(ui0B26,iresV0B46);
        int _t0BA6#1 = IAdd(_t0BA2,_t0BA4);
        int _t0BA8#1 = IAdd(_t0BA6,vi0B27);
        int len0BAA#1 = Subscript<int[]>(indecies0B43,_t0BA8);
        int itter0BAC#2 = 0;
        int intersectionItter0BAE#1 = 0;
        int idx0BB0#2 = IAdd(offset0BA0,itter0BAC);
        tensor[2] interval0BB2#3 = Subscript<tensor[2][]>(times0B42,idx0BB0);
        real s0BB4#1 = TensorIndex<tensor[2],[0]>(interval0BB2);
        real e0BB6#1 = TensorIndex<tensor[2],[1]>(interval0BB2);
        int _t0BB8#1 = 0;
        femData:MeshCell cc0BBA#2 = Subscript<femData:MeshCell[]>(0cell_a0B45,_t0BB8);
        int _t0BBD#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc0BBA);
        femData:FuncCell _t0BBF#1 = LoadFem<femData:FuncCell>(c0B44,_t0BBD);
        femData:FuncCell fc0BC1#1 = _t0BBF;
        femData:FuncCell fc0BC3#1 = fc0BC1;
        real out0BC5#1 = 0.e0;
        real _t0BC7#1 = 0.e0;
        real _t0BC9#1 = 0.e0;
        real _t0BCB#1 = 0.e0;
        real _t0BCD#1 = 0.e0;
        tensor[4] rgba0BCF#1 = <tensor[4]>[_t0BC7,_t0BC9,_t0BCB,_t0BCD];
        self.rayU = rayU0B76;
        self.rayV = rayV0B84;
        self.UV = UV0B8A;
        self.rayOrig = rayOrig0B8C;
        self.rayVec = rayVec0B96;
        self.camNearVsp = camNearVsp0B98;
        self.camFarVsp = camFarVsp0B9A;
        self.offset = offset0BA0;
        self.len = len0BAA;
        self.itter = itter0BAC;
        self.intersectionItter = intersectionItter0BAE;
        self.idx = idx0BB0;
        self.interval = interval0BB2;
        self.s = s0BB4;
        self.e = e0BB6;
        self.cc = cc0BBA;
        self.fc = fc0BC3;
        self.out = out0BC5;
        self.rgba = rgba0BCF;
        return
    end state init
    method start
        ENTRY0C2F:  preds = []
          femData:MeshCell[] 0cell_a0BE8#1 = globals.0cell_a09FF;
          femData:FemFunc c0BE7#1 = globals.c0A01;
          int[] cells0BE6#1 = globals.cells0984;
          real rayU0BEC#0 = self.rayU;
          real rayV0BED#0 = self.rayV;
          tensor[3] UV0BEE#0 = self.UV;
          tensor[3] rayOrig0BEF#0 = self.rayOrig;
          tensor[3] rayVec0BF0#0 = self.rayVec;
          real camNearVsp0BF1#0 = self.camNearVsp;
          real camFarVsp0BF2#0 = self.camFarVsp;
          int offset0BF3#0 = self.offset;
          int len0BF4#1 = self.len;
          int itter0BF5#2 = self.itter;
          int intersectionItter0BF6#2 = self.intersectionItter;
          int idx0BF7#1 = self.idx;
          tensor[2] interval0BF8#2 = self.interval;
          real s0BF9#2 = self.s;
          real e0BFA#2 = self.e;
          femData:MeshCell cc0BFB#1 = self.cc;
          femData:FuncCell fc0BFC#1 = self.fc;
          real out0BFD#2 = self.out;
          tensor[4] rgba0BFE#2 = self.rgba;
          int _t0C12#1 = 0;
          bool _t0C14#1 = EQ<int>(len0BF4,_t0C12);
          if _t0C14 then goto SAVE0C18 else goto JOIN0C16
        SAVE0C18:  preds = [COND0C21]
          self.itter = itter0BF5;
          self.intersectionItter = intersectionItter0BF6;
          self.interval = interval0BF8;
          self.s = s0BF9;
          self.e = e0BFA;
          self.cc = cc0BFB;
          self.fc = fc0BFC;
          self.out = out0BFD;
          self.rgba = rgba0BFE;
          stabilize
          goto JOIN0C16
        JOIN0C16:  preds = [*STABILIZE0C17,COND0C21]
          int _t0C22#1 = Subscript<int[]>(cells0BE6,idx0BF7);
          femData:MeshCell cc0C24#2 = Subscript<femData:MeshCell[]>(0cell_a0BE8,_t0C22);
          int _t0C27#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc0C24);
          femData:FuncCell _t0C29#1 = LoadFem<femData:FuncCell>(c0BE7,_t0C27);
          femData:FuncCell fc0C2B#1 = _t0C29;
          femData:FuncCell fc0C2D#1 = fc0C2B;
          self.itter = itter0BF5;
          self.intersectionItter = intersectionItter0BF6;
          self.interval = interval0BF8;
          self.s = s0BF9;
          self.e = e0BFA;
          self.cc = cc0C24;
          self.fc = fc0C2D;
          self.out = out0BFD;
          self.rgba = rgba0BFE;
          active
    end start
    method update
        ENTRY0F22:  preds = []
          femData:MeshCell[] 0cell_a0C49#1 = globals.0cell_a09FF;
          femData:FemFunc c0C48#1 = globals.c0A01;
          real eps0C47#9 = globals.eps0981;
          tensor[2][] times0C46#1 = globals.times0983;
          int[] cells0C45#1 = globals.cells0984;
          tensor[3] mcnear0C44#1 = globals.mcnear0985;
          tensor[3] mcfar0C43#1 = globals.mcfar0986;
          real cmin0C42#2 = globals.cmin0988;
          real cmax0C41#2 = globals.cmax0989;
          bool light0C40#1 = globals.light098A;
          real phongKa0C3F#1 = globals.phongKa098B;
          real phongKd0C3E#1 = globals.phongKd098C;
          real phongKs0C3D#1 = globals.phongKs098D;
          real phongSp0C3C#1 = globals.phongSp098E;
          field CM0C3B#1 = globals.CM0A0A;
          tensor[3] L0C3A#2 = globals.L0A0B;
          real rayU0C5A#0 = self.rayU;
          real rayV0C5B#0 = self.rayV;
          tensor[3] UV0C5C#0 = self.UV;
          tensor[3] rayOrig0C5D#9 = self.rayOrig;
          tensor[3] rayVec0C5E#11 = self.rayVec;
          real camNearVsp0C5F#1 = self.camNearVsp;
          real camFarVsp0C60#1 = self.camFarVsp;
          int offset0C61#2 = self.offset;
          int len0C62#1 = self.len;
          int itter0C63#5 = self.itter;
          int intersectionItter0C64#3 = self.intersectionItter;
          int idx0C65#0 = self.idx;
          tensor[2] interval0C66#4 = self.interval;
          real s0C67#6 = self.s;
          real e0C68#6 = self.e;
          femData:MeshCell cc0C69#19 = self.cc;
          femData:FuncCell fc0C6A#19 = self.fc;
          real out0C6B#5 = self.out;
          tensor[4] rgba0C6C#4 = self.rgba;
          string _t0C80#1 = "Interval:";
          tensor[2] _t0C82#1 = <tensor[2]>[s0C67,e0C68];
          string _t0C84#1 = "\n";
          Print<[string,tensor[2],string]>(_t0C80,_t0C82,_t0C84);
          string _t0C87#1 = "inner itter:";
          string _t0C89#1 = "\n";
          Print<[string,int,string]>(_t0C87,intersectionItter0C64,_t0C89);
          string _t0C8C#1 = "Outer itter:";
          string _t0C8E#1 = "\n";
          Print<[string,int,string]>(_t0C8C,itter0C63,_t0C8E);
          real _t0C91#1 = TensorIndex<tensor[3],[0]>(rayOrig0C5D);
          real _t0C93#1 = TensorIndex<tensor[3],[1]>(rayOrig0C5D);
          tensor[2] _t0C95#1 = <tensor[2]>[_t0C91,_t0C93];
          real _t0C97#1 = TensorIndex<tensor[3],[0]>(rayVec0C5E);
          real _t0C99#1 = TensorIndex<tensor[3],[1]>(rayVec0C5E);
          tensor[2] _t0C9B#1 = <tensor[2]>[_t0C97,_t0C99];
          tensor[2] _t0C9D#1 = λ(T0[],T1[2])<(T0 * T1_{i0})>_{2} (s0C67,_t0C9B);
          tensor[2] startRay0C9F#2 = λ(T0[2],T1[2])<(T0_{i0} + T1_{i0})>_{2} (_t0C95,_t0C9D);
          real _t0CA1#1 = TensorIndex<tensor[3],[0]>(rayOrig0C5D);
          real _t0CA3#1 = TensorIndex<tensor[3],[1]>(rayOrig0C5D);
          tensor[2] _t0CA5#1 = <tensor[2]>[_t0CA1,_t0CA3];
          real _t0CA7#1 = TensorIndex<tensor[3],[0]>(rayVec0C5E);
          real _t0CA9#1 = TensorIndex<tensor[3],[1]>(rayVec0C5E);
          tensor[2] _t0CAB#1 = <tensor[2]>[_t0CA7,_t0CA9];
          tensor[2] _t0CAD#1 = λ(T0[],T1[2])<(T0 * T1_{i0})>_{2} (e0C68,_t0CAB);
          tensor[2] endRay0CAF#1 = λ(T0[2],T1[2])<(T0_{i0} + T1_{i0})>_{2} (_t0CA5,_t0CAD);
          femData:Mesh _t0CB1#2 = ExtractFem<femData:Mesh,femData:MeshCell>(cc0C69);
          femData:Mesh _t0CB3#0 = ExtractFem<femData:Mesh,femData:MeshCell>(cc0C69);
          int _t0CB5#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc0C69);
          field _t0CB7#1 = λ(INT0,FEM(msh)1,FEM(msh)2)<femInvV(0A7F, 0, 1, 2)_{i0}⊛Basis()>_{2} (_t0CB5,_t0CB1,_t0CB1);
          tensor[2] invertA0CB9#2 = λ(F0[2],T1[2])<Probe(F0_{i0},T1)>_{2} (_t0CB7,startRay0C9F);
          femData:Mesh _t0CBB#2 = ExtractFem<femData:Mesh,femData:MeshCell>(cc0C69);
          femData:Mesh _t0CBD#0 = ExtractFem<femData:Mesh,femData:MeshCell>(cc0C69);
          int _t0CBF#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc0C69);
          field _t0CC1#1 = λ(INT0,FEM(msh)1,FEM(msh)2)<femInvV(0A7F, 0, 1, 2)_{i0}⊛Basis()>_{2} (_t0CBF,_t0CBB,_t0CBB);
          tensor[2] invertB0CC3#2 = λ(F0[2],T1[2])<Probe(F0_{i0},T1)>_{2} (_t0CC1,endRay0CAF);
          string _t0CC5#1 = "inverses:";
          string _t0CC7#1 = "\n";
          Print<[string,tensor[2],tensor[2],string]>(_t0CC5,invertA0CB9,invertB0CC3,_t0CC7);
          femData:FemFunc _t0CCA#1 = ExtractFem<femData:FemFunc,femData:FuncCell>(fc0C6A);
          femData:FemFunc _t0CCC#1 = ExtractFem<femData:FemFunc,femData:FuncCell>(fc0C6A);
          femData:Space _t0CCE#1 = ExtractFem<femData:Space,femData:FemFunc>(_t0CCC);
          int _t0CD0#1 = ExtractFemItem<int,CellIndex(FuncCell)>(fc0C6A);
          field _t0CD2#1 = λ(INT0,FEM(fns)1,FEM(func)2)<femV(noFunc, 0, 1, 2)⊛Basis()> (_t0CD0,_t0CCE,_t0CCA);
          real faVal0CD4#2 = λ(F0[2],T1[2])<Probe(F0,T1)> (_t0CD2,invertA0CB9);
          real _t0CD6#1 = TensorIndex<tensor[3],[2]>(rayVec0C5E);
          real _t0CD8#1 = λ(T0[],T1[])<(T0 * T1)> (_t0CD6,s0C67);
          real _t0CDA#1 = λ(T0[],T1[])<(T0) - (T1)> (faVal0CD4,_t0CD8);
          real _t0CDC#1 = TensorIndex<tensor[3],[2]>(rayOrig0C5D);
          real fa0CDE#13 = λ(T0[],T1[])<(T0) - (T1)> (_t0CDA,_t0CDC);
          femData:FemFunc _t0CE0#1 = ExtractFem<femData:FemFunc,femData:FuncCell>(fc0C6A);
          femData:FemFunc _t0CE2#1 = ExtractFem<femData:FemFunc,femData:FuncCell>(fc0C6A);
          femData:Space _t0CE4#1 = ExtractFem<femData:Space,femData:FemFunc>(_t0CE2);
          int _t0CE6#1 = ExtractFemItem<int,CellIndex(FuncCell)>(fc0C6A);
          field _t0CE8#1 = λ(INT0,FEM(fns)1,FEM(func)2)<femV(noFunc, 0, 1, 2)⊛Basis()> (_t0CE6,_t0CE4,_t0CE0);
          real _t0CEA#1 = λ(F0[2],T1[2])<Probe(F0,T1)> (_t0CE8,invertB0CC3);
          real _t0CEC#1 = TensorIndex<tensor[3],[2]>(rayVec0C5E);
          real _t0CEE#1 = λ(T0[],T1[])<(T0 * T1)> (_t0CEC,e0C68);
          real _t0CF0#1 = λ(T0[],T1[])<(T0) - (T1)> (_t0CEA,_t0CEE);
          real _t0CF2#1 = TensorIndex<tensor[3],[2]>(rayOrig0C5D);
          real fb0CF4#5 = λ(T0[],T1[])<(T0) - (T1)> (_t0CF0,_t0CF2);
          string _t0CF6#1 = "Vals:";
          tensor[2] _t0CF8#1 = <tensor[2]>[fa0CDE,fb0CF4];
          string _t0CFA#1 = "\n";
          Print<[string,tensor[2],string]>(_t0CF6,_t0CF8,_t0CFA);
          real _t0CFD#1 = λ(T0[],T1[])<(T0) - (T1)> (fa0CDE,fb0CF4);
          real _t0CFF#1 = λ(T0[])<Abs(T0)> (_t0CFD);
          bool _t0D01#1 = LT<real>(_t0CFF,eps0C47);
          if _t0D01 then goto ASSIGN0D05 else goto JOIN0D03
        ASSIGN0D05:  preds = [COND0D18]
          real _t0D04#1 = λ(T0[])<Abs(T0)> (fa0CDE);
          bool _t0D06#1 = GT<real>(_t0D04,eps0C47);
          if _t0D06 then goto ASSIGN0D0B else goto JOIN0D08
        ASSIGN0D0B:  preds = [COND0D16]
          real s0D09#1 = λ(T0[],T1[])<(T0 + T1)> (s0C67,eps0C47);
          self.itter = itter0C63;
          self.intersectionItter = intersectionItter0C64;
          self.interval = interval0C66;
          self.s = s0D09;
          self.e = e0C68;
          self.cc = cc0C69;
          self.fc = fc0C6A;
          self.out = out0C6B;
          self.rgba = rgba0C6C;
          active
          goto JOIN0D08
        JOIN0D08:  preds = [*ACTIVE0D0C,COND0D16]
          real s0D0A#1 = phi(s0C67)
          goto JOIN0D03
        JOIN0D03:  preds = [JOIN0D08,COND0D18]
          real s0D17#3 = phi(s0D0A,s0C67)
          real _t0D19#1 = λ(T0[],T1[])<(T0 * T1)> (s0D17,fb0CF4);
          real _t0D1B#1 = λ(T0[],T1[])<(T0 * T1)> (e0C68,fa0CDE);
          real _t0D1D#1 = λ(T0[],T1[])<(T0) - (T1)> (_t0D19,_t0D1B);
          real _t0D1F#1 = λ(T0[],T1[])<(T0) - (T1)> (fb0CF4,fa0CDE);
          real cup0D21#6 = λ(T0[],T1[])<(T0) / ( T1)> (_t0D1D,_t0D1F);
          string _t0D23#1 = "Mid time:";
          string _t0D25#1 = "\n";
          Print<[string,real,string]>(_t0D23,cup0D21,_t0D25);
          real _t0D28#1 = TensorIndex<tensor[3],[0]>(rayOrig0C5D);
          real _t0D2A#1 = TensorIndex<tensor[3],[1]>(rayOrig0C5D);
          tensor[2] _t0D2C#1 = <tensor[2]>[_t0D28,_t0D2A];
          real _t0D2E#1 = TensorIndex<tensor[3],[0]>(rayVec0C5E);
          real _t0D30#1 = TensorIndex<tensor[3],[1]>(rayVec0C5E);
          tensor[2] _t0D32#1 = <tensor[2]>[_t0D2E,_t0D30];
          tensor[2] _t0D34#1 = λ(T0[],T1[2])<(T0 * T1_{i0})>_{2} (cup0D21,_t0D32);
          tensor[2] midRay0D36#2 = λ(T0[2],T1[2])<(T0_{i0} + T1_{i0})>_{2} (_t0D2C,_t0D34);
          femData:Mesh _t0D38#2 = ExtractFem<femData:Mesh,femData:MeshCell>(cc0C69);
          femData:Mesh _t0D3A#0 = ExtractFem<femData:Mesh,femData:MeshCell>(cc0C69);
          int _t0D3C#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc0C69);
          field _t0D3E#1 = λ(INT0,FEM(msh)1,FEM(msh)2)<femInvV(0A7F, 0, 1, 2)_{i0}⊛Basis()>_{2} (_t0D3C,_t0D38,_t0D38);
          tensor[2] invertC0D40#1 = λ(F0[2],T1[2])<Probe(F0_{i0},T1)>_{2} (_t0D3E,midRay0D36);
          femData:FemFunc _t0D42#1 = ExtractFem<femData:FemFunc,femData:FuncCell>(fc0C6A);
          femData:FemFunc _t0D44#1 = ExtractFem<femData:FemFunc,femData:FuncCell>(fc0C6A);
          femData:Space _t0D46#1 = ExtractFem<femData:Space,femData:FemFunc>(_t0D44);
          int _t0D48#1 = ExtractFemItem<int,CellIndex(FuncCell)>(fc0C6A);
          field _t0D4A#1 = λ(INT0,FEM(fns)1,FEM(func)2)<femV(noFunc, 0, 1, 2)⊛Basis()> (_t0D48,_t0D46,_t0D42);
          real fmVal0D4C#2 = λ(F0[2],T1[2])<Probe(F0,T1)> (_t0D4A,invertC0D40);
          real _t0D4E#1 = TensorIndex<tensor[3],[2]>(rayVec0C5E);
          real _t0D50#1 = λ(T0[],T1[])<(T0 * T1)> (_t0D4E,cup0D21);
          real _t0D52#1 = λ(T0[],T1[])<(T0) - (T1)> (fmVal0D4C,_t0D50);
          real _t0D54#1 = TensorIndex<tensor[3],[2]>(rayOrig0C5D);
          real fm0D56#8 = λ(T0[],T1[])<(T0) - (T1)> (_t0D52,_t0D54);
          string _t0D58#1 = "all vals:";
          tensor[3] _t0D5A#1 = <tensor[3]>[fa0CDE,fm0D56,fb0CF4];
          string _t0D5C#1 = "\n";
          Print<[string,tensor[3],string]>(_t0D58,_t0D5A,_t0D5C);
          int _t0D5F#1 = 1;
          int intersectionItter0D61#2 = IAdd(intersectionItter0C64,_t0D5F);
          real _t0D64#1 = 0.e0;
          bool _t0D66#1 = GT<real>(fa0CDE,_t0D64);
          if _t0D66 then goto ASSIGN0D6A else goto ASSIGN0D6F
        ASSIGN0D6A:  preds = [COND0D7D]
          int _t0D69#1 = 1;
          int _t0D6B#1 = _t0D69;
          goto JOIN0D68
        JOIN0D68:  preds = [ASSIGN0D6D,JOIN0D72]
          int _t0D6C#1 = phi(_t0D6B,_t0D76)
          real _t0D7F#1 = 0.e0;
          bool _t0D81#1 = GT<real>(fm0D56,_t0D7F);
          if _t0D81 then goto ASSIGN0D85 else goto ASSIGN0D8A
        ASSIGN0D85:  preds = [COND0D98]
          int _t0D84#1 = 1;
          int _t0D86#1 = _t0D84;
          goto JOIN0D83
        JOIN0D83:  preds = [ASSIGN0D88,JOIN0D8D]
          int _t0D87#1 = phi(_t0D86,_t0D91)
          int _t0D99#1 = IMul(_t0D6C,_t0D87);
          int _t0D9B#1 = 0;
          bool _t0D9D#1 = LT<int>(_t0D99,_t0D9B);
          if _t0D9D then goto ASSIGN0DA2 else goto ASSIGN0DA5
        ASSIGN0DA2:  preds = [COND0DE5]
          real e0DA0#1 = cup0D21;
          goto JOIN0D9F
        JOIN0D9F:  preds = [ASSIGN0DA2,JOIN0DDF]
          real e0DA1#4 = phi(e0DA0,e0C68)
          real s0DE4#5 = phi(s0D17,s0DE1)
          string _t0DE6#1 = "new interval:";
          tensor[2] _t0DE8#1 = <tensor[2]>[s0DE4,e0DA1];
          string _t0DEA#1 = "\n";
          Print<[string,tensor[2],string]>(_t0DE6,_t0DE8,_t0DEA);
          real _t0DEE#1 = λ(T0[])<Abs(T0)> (fa0CDE);
          bool _t0DF0#1 = LT<real>(_t0DEE,eps0C47);
          if _t0DF0 then goto ASSIGN0DF5 else goto ASSIGN0DF8
        ASSIGN0DF5:  preds = [COND0E06]
          bool _t0DF3#1 = true;
          goto JOIN0DF2
        JOIN0DF2:  preds = [ASSIGN0DF5,ASSIGN0E05]
          bool _t0DF4#1 = phi(_t0DF3,_t0E04)
          if _t0DF4 then goto ASSIGN0E0A else goto ASSIGN0F1F
        ASSIGN0E0A:  preds = [COND0F21]
          int intersectionItter0E08#3 = 0;
          real _t0E0C#1 = λ(T0[])<Abs(T0)> (fm0D56);
          bool _t0E0E#1 = GT<real>(_t0E0C,eps0C47);
          if _t0E0E then goto ASSIGN0E12 else goto ASSIGN0E17
        ASSIGN0E12:  preds = [COND0E18]
          real _t0E11#1 = λ(T0[])<Abs(T0)> (fa0CDE);
          bool _t0E13#1 = GT<real>(_t0E11,eps0C47);
          goto JOIN0E10
        JOIN0E10:  preds = [ASSIGN0E15,ASSIGN0E17]
          bool _t0E14#1 = phi(_t0E13,_t0E16)
          if _t0E14 then goto ASSIGN0E1B else goto ASSIGN0E5A
        ASSIGN0E1B:  preds = [COND0F1D]
          int _t0E1A#1 = 1;
          int itter0E1C#5 = IAdd(itter0C63,_t0E1A);
          bool _t0E1F#1 = GTE<int>(itter0E1C,len0C62);
          if _t0E1F then goto ASSIGN0E23 else goto JOIN0E21
        ASSIGN0E23:  preds = [COND0E2F]
          string _t0E22#1 = "Fin pixel=============================\n";
          Print<[string]>(_t0E22);
          self.itter = itter0E1C;
          self.intersectionItter = intersectionItter0E08;
          self.interval = interval0C66;
          self.s = s0DE4;
          self.e = e0DA1;
          self.cc = cc0C69;
          self.fc = fc0C6A;
          self.out = out0C6B;
          self.rgba = rgba0C6C;
          stabilize
          goto JOIN0E21
        JOIN0E21:  preds = [*STABILIZE0E25,COND0E2F]
          int _t0E30#1 = IAdd(offset0C61,itter0E1C);
          tensor[2] interval0E32#3 = Subscript<tensor[2][]>(times0C46,_t0E30);
          int _t0E35#1 = IAdd(offset0C61,itter0E1C);
          int _t0E37#1 = Subscript<int[]>(cells0C45,_t0E35);
          femData:MeshCell cc0E39#2 = Subscript<femData:MeshCell[]>(0cell_a0C49,_t0E37);
          real s0E3C#1 = TensorIndex<tensor[2],[0]>(interval0E32);
          real e0E3F#1 = TensorIndex<tensor[2],[1]>(interval0E32);
          int _t0E43#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc0E39);
          femData:FuncCell _t0E45#1 = LoadFem<femData:FuncCell>(c0C48,_t0E43);
          femData:FuncCell fc0E47#1 = _t0E45;
          femData:FuncCell fc0E49#1 = fc0E47;
          string _t0E4C#1 = "Next interval!\n";
          Print<[string]>(_t0E4C);
          self.itter = itter0E1C;
          self.intersectionItter = intersectionItter0E08;
          self.interval = interval0E32;
          self.s = s0E3C;
          self.e = e0E3F;
          self.cc = cc0E39;
          self.fc = fc0E49;
          self.out = out0C6B;
          self.rgba = rgba0C6C;
          active
          goto JOIN0E19
        JOIN0E19:  preds = [*ACTIVE0E4F,*STABILIZE0F13]
          goto JOIN0E07
        JOIN0E07:  preds = [*JOIN0E19,MASSIGN0F20]
          int intersectionItter0E09#1 = phi(intersectionItter0D61)
          self.itter = itter0C63;
          self.intersectionItter = intersectionItter0E09;
          self.interval = interval0C66;
          self.s = s0DE4;
          self.e = e0DA1;
          self.cc = cc0C69;
          self.fc = fc0C6A;
          self.out = out0C6B;
          self.rgba = rgba0C6C;
          active
        ASSIGN0E5A:  preds = [COND0F1D]
          real _t0E59#1 = 0.e0;
          real _t0E5B#1 = 0.e0;
          tensor[2] grad0E5D#1 = <tensor[2]>[_t0E59,_t0E5B];
          real _t0E5F#1 = λ(T0[])<Abs(T0)> (fm0D56);
          bool _t0E61#1 = LT<real>(_t0E5F,eps0C47);
          if _t0E61 then goto ASSIGN0E65 else goto JOIN0E63
        ASSIGN0E65:  preds = [COND0E80]
          femData:FemFunc _t0E64#1 = ExtractFem<femData:FemFunc,femData:FuncCell>(fc0C6A);
          femData:FemFunc _t0E66#1 = ExtractFem<femData:FemFunc,femData:FuncCell>(fc0C6A);
          femData:Space _t0E68#1 = ExtractFem<femData:Space,femData:FemFunc>(_t0E66);
          int _t0E6A#1 = ExtractFemItem<int,CellIndex(FuncCell)>(fc0C6A);
          field _t0E6C#1 = λ(INT0,FEM(fns)1,FEM(func)2)<femV(noFunc, 0, 1, 2)⊛Basis()> (_t0E6A,_t0E68,_t0E64);
          femData:Mesh _t0E6E#2 = ExtractFem<femData:Mesh,femData:MeshCell>(cc0C69);
          femData:Mesh _t0E70#0 = ExtractFem<femData:Mesh,femData:MeshCell>(cc0C69);
          int _t0E72#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc0C69);
          field _t0E74#1 = λ(INT0,FEM(msh)1,FEM(msh)2)<femInvV(0A7F, 0, 1, 2)_{i0}⊛Basis()>_{2} (_t0E72,_t0E6E,_t0E6E);
          field _t0E76#1 = λ(F0[2],F1[2])<Cmp(F0)[F1_{i0}{2}]> (_t0E6C,_t0E74);
          field _t0E78#1 = λ(F0[2])<∂/∂x_{i0}@(F0)>_{2} (_t0E76);
          tensor[2] grad0E7A#1 = λ(F0[2],T1[2])<Probe(F0_{i0},T1)>_{2} (_t0E78,midRay0D36);
          real out0E7D#1 = fmVal0D4C;
          goto JOIN0E63
        JOIN0E63:  preds = [ASSIGN0E7F,COND0E80]
          tensor[2] grad0E7B#1 = phi(grad0E7A,grad0E5D)
          real out0E7E#1 = phi(out0E7D,out0C6B)
          real _t0E82#1 = λ(T0[])<Abs(T0)> (fa0CDE);
          bool _t0E84#1 = LT<real>(_t0E82,eps0C47);
          if _t0E84 then goto ASSIGN0E89 else goto JOIN0E86
        ASSIGN0E89:  preds = [COND0EA6]
          real cup0E87#1 = s0DE4;
          femData:FemFunc _t0E8A#1 = ExtractFem<femData:FemFunc,femData:FuncCell>(fc0C6A);
          femData:FemFunc _t0E8C#1 = ExtractFem<femData:FemFunc,femData:FuncCell>(fc0C6A);
          femData:Space _t0E8E#1 = ExtractFem<femData:Space,femData:FemFunc>(_t0E8C);
          int _t0E90#1 = ExtractFemItem<int,CellIndex(FuncCell)>(fc0C6A);
          field _t0E92#1 = λ(INT0,FEM(fns)1,FEM(func)2)<femV(noFunc, 0, 1, 2)⊛Basis()> (_t0E90,_t0E8E,_t0E8A);
          femData:Mesh _t0E94#2 = ExtractFem<femData:Mesh,femData:MeshCell>(cc0C69);
          femData:Mesh _t0E96#0 = ExtractFem<femData:Mesh,femData:MeshCell>(cc0C69);
          int _t0E98#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc0C69);
          field _t0E9A#1 = λ(INT0,FEM(msh)1,FEM(msh)2)<femInvV(0A7F, 0, 1, 2)_{i0}⊛Basis()>_{2} (_t0E98,_t0E94,_t0E94);
          field _t0E9C#1 = λ(F0[2],F1[2])<Cmp(F0)[F1_{i0}{2}]> (_t0E92,_t0E9A);
          field _t0E9E#1 = λ(F0[2])<∂/∂x_{i0}@(F0)>_{2} (_t0E9C);
          tensor[2] grad0EA0#1 = λ(F0[2],T1[2])<Probe(F0_{i0},T1)>_{2} (_t0E9E,startRay0C9F);
          real out0EA3#1 = faVal0CD4;
          goto JOIN0E86
        JOIN0E86:  preds = [ASSIGN0EA5,COND0EA6]
          tensor[2] grad0EA1#3 = phi(grad0EA0,grad0E7B)
          real cup0E88#1 = phi(cup0E87,cup0D21)
          real out0EA4#3 = phi(out0EA3,out0E7E)
          string _t0EA8#1 = "Out val:";
          string _t0EAA#1 = "\n";
          Print<[string,real,string]>(_t0EA8,out0EA4,_t0EAA);
          string _t0EAD#1 = "Grad val:";
          string _t0EAF#1 = "\n";
          Print<[string,tensor[2],string]>(_t0EAD,grad0EA1,_t0EAF);
          real _t0EB2#1 = 0.1e1;
          real _t0EB4#1 = 0.1e1;
          real _t0EB6#1 = 0.1e1;
          tensor[3] mcol0EB8#1 = <tensor[3]>[_t0EB2,_t0EB4,_t0EB6];
          bool _t0EBA#1 = NEQ<real>(cmin0C42,cmax0C41);
          if _t0EBA then goto ASSIGN0EBE else goto JOIN0EBC
        ASSIGN0EBE:  preds = [COND0EC8]
          int _t0EBD#1 = -1;
          real _t0EBF#1 = IntToReal(_t0EBD);
          real _t0EC1#1 = 0.1e1;
          real _t0EC3#1 = λ(T0[],T1[],T2[],T3[],T4[])<(T0 + (((T3) - (T2)) / ( (T4) - (T2)) * (T1) - (T0)))> (_t0EBF,_t0EC1,cmin0C42,out0EA4,cmax0C41);
          tensor[3] mcol0EC5#1 = λ(F0[1],T1[1])<Probe(F0_{i0},T1)>_{3} (CM0C3B,_t0EC3);
          goto JOIN0EBC
        JOIN0EBC:  preds = [ASSIGN0EC7,COND0EC8]
          tensor[3] mcol0EC6#5 = phi(mcol0EC5,mcol0EB8)
          if light0C40 then goto ASSIGN0ECB else goto ASSIGN0F08
        ASSIGN0ECB:  preds = [COND0F11]
          real _t0ECA#1 = TensorIndex<tensor[2],[0]>(grad0EA1);
          real _t0ECC#1 = TensorIndex<tensor[2],[1]>(grad0EA1);
          int _t0ECE#1 = -1;
          real _t0ED0#1 = IntToReal(_t0ECE);
          tensor[3] N0ED2#2 = <tensor[3]>[_t0ECA,_t0ECC,_t0ED0];
          tensor[3] _t0ED4#1 = λ(T0[3],T1[3])<(T0_{i0} * (1) / ( Sqrt(Σ(i1=0..2)<((T1_{i1} * T1_{i1}))>(i1=0..2))))>_{3} (rayVec0C5E,rayVec0C5E);
          tensor[3] _t0ED6#1 = λ(T0[3])<Neg(T0_{i0})>_{3} (_t0ED4);
          tensor[3] _t0ED8#2 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (_t0ED6,L0C3A);
          tensor[3] H0EDA#1 = λ(T0[3],T1[3])<(T0_{i0} * (1) / ( Sqrt(Σ(i1=0..2)<((T1_{i1} * T1_{i1}))>(i1=0..2))))>_{3} (_t0ED8,_t0ED8);
          tensor[3] lightColor0EDC#2 = λ(T0[3],T1[3],T2[],T3[],T4[])<(T0_{i0} + (((T3) - (T2)) / ( (T4) - (T2)) * (T1_{i0}) - (T0_{i0})))>_{3} (mcnear0C44,mcfar0C43,camNearVsp0C5F,cup0E88,camFarVsp0C60);
          tensor[3] ambientTerm0EDE#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (phongKa0C3F,mcol0EC6);
          tensor[3] _t0EE0#1 = λ(T0[3],T1[3])<(T0_{i0} * T1_{i0})>_{3} (mcol0EC6,lightColor0EDC);
          tensor[3] _t0EE2#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (phongKd0C3E,_t0EE0);
          real _t0EE4#1 = 0.e0;
          real _t0EE6#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (N0ED2,L0C3A);
          real _t0EE8#1 = Max<real>(_t0EE4,_t0EE6);
          tensor[3] diffuse0EEA#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (_t0EE8,_t0EE2);
          tensor[3] _t0EEC#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (phongKs0C3D,lightColor0EDC);
          real _t0EEE#1 = 0.e0;
          real _t0EF0#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (N0ED2,H0EDA);
          real _t0EF2#1 = Max<real>(_t0EEE,_t0EF0);
          real _t0EF4#1 = MathFn<pow>(_t0EF2,phongSp0C3C);
          tensor[3] specular0EF6#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (_t0EF4,_t0EEC);
          tensor[3] _t0EF8#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (ambientTerm0EDE,diffuse0EEA);
          tensor[3] fin0EFA#3 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (_t0EF8,specular0EF6);
          real _t0EFC#1 = TensorIndex<tensor[3],[0]>(fin0EFA);
          real _t0EFE#1 = TensorIndex<tensor[3],[1]>(fin0EFA);
          real _t0F00#1 = TensorIndex<tensor[3],[2]>(fin0EFA);
          real _t0F02#1 = 0.1e1;
          tensor[4] rgba0F04#1 = <tensor[4]>[_t0EFC,_t0EFE,_t0F00,_t0F02];
          goto JOIN0EC9
        JOIN0EC9:  preds = [ASSIGN0F06,ASSIGN0F10]
          tensor[4] rgba0F05#1 = phi(rgba0F04,rgba0F0F)
          self.itter = itter0C63;
          self.intersectionItter = intersectionItter0E08;
          self.interval = interval0C66;
          self.s = s0DE4;
          self.e = e0DA1;
          self.cc = cc0C69;
          self.fc = fc0C6A;
          self.out = out0EA4;
          self.rgba = rgba0F05;
          stabilize
          goto JOIN0E19
        ASSIGN0F08:  preds = [COND0F11]
          real _t0F07#1 = TensorIndex<tensor[3],[0]>(mcol0EC6);
          real _t0F09#1 = TensorIndex<tensor[3],[1]>(mcol0EC6);
          real _t0F0B#1 = TensorIndex<tensor[3],[2]>(mcol0EC6);
          real _t0F0D#1 = 0.1e1;
          tensor[4] rgba0F0F#1 = <tensor[4]>[_t0F07,_t0F09,_t0F0B,_t0F0D];
          goto JOIN0EC9
        ASSIGN0E17:  preds = [COND0E18]
          bool _t0E16#1 = false;
          goto JOIN0E10
        ASSIGN0F1F:  preds = [COND0F21]
          string _t0F1E#1 = "=========\n";
          Print<[string]>(_t0F1E);
          goto JOIN0E07
        ASSIGN0DF8:  preds = [COND0E06]
          real _t0DF7#1 = λ(T0[])<Abs(T0)> (fm0D56);
          bool _t0DF9#1 = LT<real>(_t0DF7,eps0C47);
          if _t0DF9 then goto ASSIGN0DFE else goto ASSIGN0E00
        ASSIGN0DFE:  preds = [COND0E03]
          bool _t0DFC#1 = true;
          goto JOIN0DFB
        JOIN0DFB:  preds = [ASSIGN0DFE,ASSIGN0E02]
          bool _t0DFD#1 = phi(_t0DFC,_t0E01)
          bool _t0E04#1 = _t0DFD;
          goto JOIN0DF2
        ASSIGN0E00:  preds = [COND0E03]
          int _t0DFF#1 = 32;
          bool _t0E01#1 = GT<int>(intersectionItter0D61,_t0DFF);
          goto JOIN0DFB
        ASSIGN0DA5:  preds = [COND0DE5]
          real _t0DA4#1 = 0.e0;
          bool _t0DA6#1 = GT<real>(fa0CDE,_t0DA4);
          if _t0DA6 then goto ASSIGN0DAA else goto ASSIGN0DAF
        ASSIGN0DAA:  preds = [COND0DBD]
          int _t0DA9#1 = 1;
          int _t0DAB#1 = _t0DA9;
          goto JOIN0DA8
        JOIN0DA8:  preds = [ASSIGN0DAD,JOIN0DB2]
          int _t0DAC#1 = phi(_t0DAB,_t0DB6)
          real _t0DBF#1 = 0.e0;
          bool _t0DC1#1 = GT<real>(fm0D56,_t0DBF);
          if _t0DC1 then goto ASSIGN0DC5 else goto ASSIGN0DCA
        ASSIGN0DC5:  preds = [COND0DD8]
          int _t0DC4#1 = 1;
          int _t0DC6#1 = _t0DC4;
          goto JOIN0DC3
        JOIN0DC3:  preds = [ASSIGN0DC8,JOIN0DCD]
          int _t0DC7#1 = phi(_t0DC6,_t0DD1)
          int _t0DD9#1 = IMul(_t0DAC,_t0DC7);
          int _t0DDB#1 = 0;
          bool _t0DDD#1 = GT<int>(_t0DD9,_t0DDB);
          if _t0DDD then goto ASSIGN0DE2 else goto JOIN0DDF
        ASSIGN0DE2:  preds = [COND0DE3]
          real s0DE0#1 = cup0D21;
          goto JOIN0DDF
        JOIN0DDF:  preds = [ASSIGN0DE2,COND0DE3]
          real s0DE1#1 = phi(s0DE0,s0D17)
          goto JOIN0D9F
        ASSIGN0DCA:  preds = [COND0DD8]
          real _t0DC9#1 = 0.e0;
          bool _t0DCB#1 = LT<real>(fm0D56,_t0DC9);
          if _t0DCB then goto ASSIGN0DCF else goto ASSIGN0DD4
        ASSIGN0DCF:  preds = [COND0DD7]
          int _t0DCE#1 = -1;
          int _t0DD0#1 = _t0DCE;
          goto JOIN0DCD
        JOIN0DCD:  preds = [ASSIGN0DD2,ASSIGN0DD6]
          int _t0DD1#1 = phi(_t0DD0,_t0DD5)
          goto JOIN0DC3
        ASSIGN0DD4:  preds = [COND0DD7]
          int _t0DD3#1 = 0;
          int _t0DD5#1 = _t0DD3;
          goto JOIN0DCD
        ASSIGN0DAF:  preds = [COND0DBD]
          real _t0DAE#1 = 0.e0;
          bool _t0DB0#1 = LT<real>(fa0CDE,_t0DAE);
          if _t0DB0 then goto ASSIGN0DB4 else goto ASSIGN0DB9
        ASSIGN0DB4:  preds = [COND0DBC]
          int _t0DB3#1 = -1;
          int _t0DB5#1 = _t0DB3;
          goto JOIN0DB2
        JOIN0DB2:  preds = [ASSIGN0DB7,ASSIGN0DBB]
          int _t0DB6#1 = phi(_t0DB5,_t0DBA)
          goto JOIN0DA8
        ASSIGN0DB9:  preds = [COND0DBC]
          int _t0DB8#1 = 0;
          int _t0DBA#1 = _t0DB8;
          goto JOIN0DB2
        ASSIGN0D8A:  preds = [COND0D98]
          real _t0D89#1 = 0.e0;
          bool _t0D8B#1 = LT<real>(fm0D56,_t0D89);
          if _t0D8B then goto ASSIGN0D8F else goto ASSIGN0D94
        ASSIGN0D8F:  preds = [COND0D97]
          int _t0D8E#1 = -1;
          int _t0D90#1 = _t0D8E;
          goto JOIN0D8D
        JOIN0D8D:  preds = [ASSIGN0D92,ASSIGN0D96]
          int _t0D91#1 = phi(_t0D90,_t0D95)
          goto JOIN0D83
        ASSIGN0D94:  preds = [COND0D97]
          int _t0D93#1 = 0;
          int _t0D95#1 = _t0D93;
          goto JOIN0D8D
        ASSIGN0D6F:  preds = [COND0D7D]
          real _t0D6E#1 = 0.e0;
          bool _t0D70#1 = LT<real>(fa0CDE,_t0D6E);
          if _t0D70 then goto ASSIGN0D74 else goto ASSIGN0D79
        ASSIGN0D74:  preds = [COND0D7C]
          int _t0D73#1 = -1;
          int _t0D75#1 = _t0D73;
          goto JOIN0D72
        JOIN0D72:  preds = [ASSIGN0D77,ASSIGN0D7B]
          int _t0D76#1 = phi(_t0D75,_t0D7A)
          goto JOIN0D68
        ASSIGN0D79:  preds = [COND0D7C]
          int _t0D78#1 = 0;
          int _t0D7A#1 = _t0D78;
          goto JOIN0D72
    end update
  end ray
## initial strand creation
  GRID(2)
    ENTRY0B24:  preds = []
      int iresU0B0A#1 = globals.iresU0978;
      int iresV0B09#1 = globals.iresV0979;
      int _t0B0D#1 = 0;
      int _t0B0F#1 = 1;
      int _t0B11#1 = ISub(iresU0B0A,_t0B0F);
      int[] _t0B13#1 = Range(_t0B0D,_t0B11);
    FOREACH0B16:  preds = [ASSIGN0B14,NEXT0B23]
      foreach (vi0B15 in _t0B13) on exit goto RETURN0B25
      int _t0B17#1 = 0;
      int _t0B19#1 = 1;
      int _t0B1B#1 = ISub(iresV0B09,_t0B19);
      int[] _t0B1D#1 = Range(_t0B17,_t0B1B);
    FOREACH0B20:  preds = [ASSIGN0B1E,NEXT0B22]
      foreach (ui0B1F in _t0B1D) on exit goto NEXT0B23
      new ray(ui0B1F,vi0B15);
      goto FOREACH0B20
    NEXT0B23:  preds = [FOREACH0B20]
      goto FOREACH0B16
    RETURN0B25:  preds = [FOREACH0B16]
      return
#### end program ####
##### high-ir: after value numbering ####
## properties
  GlobalInit StrandArray HasStartMethod ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[]) HasInputs HasGlobals
## globals
  input isoval0972 (isoval) = <default>
  input thick0973 (thick) = <default>
  input camEye0974 (camEye) = <default>
  input camAt0975 (camAt) = <default>
  input camUp0976 (camUp) = <default>
  input camFOV0977 (camFOV) = <default>
  input iresU0978 (iresU) = <default>
  input iresV0979 (iresV) = <default>
  input camNear097A (camNear) = <default>
  input camFar097B (camFar) = <default>
  input refStep097C (refStep) = <default>
  input rayStep097D (rayStep) = <default>
  input a097E (a) = <no-default>
  input 0b0472_intermedateGlobal097F (b) = <no-default>
  input 0c0474_intermedateGlobal0980 (c) = <no-default>
  input eps0981 (eps) = <default>
  input indecies0982 (indecies) = <no-default>
  input times0983 (times) = <no-default>
  input cells0984 (cells) = <no-default>
  input mcnear0985 (mcnear) = <default>
  input mcfar0986 (mcfar) = <default>
  input cmap0987 (cmap) = image("/home/teocollin/gitcode/diderot/tests/lipRay/find/cmap.nrrd")
  input cmin0988 (cmin) = <default>
  input cmax0989 (cmax) = <default>
  input light098A (light) = <default>
  input phongKa098B (phongKa) = <default>
  input phongKd098C (phongKd) = <default>
  input phongKs098D (phongKs) = <default>
  input phongSp098E (phongSp) = <default>
  input maxAlpha098F (maxAlpha) = <default>
  input lightVsp0990 (lightVsp) = <default>
  global femData:MeshCell[] 0cell_a09FF
  global femData:Space b0A00
  global femData:FemFunc c0A01
  global real camDist0A02
  global real camNearVsp0A03
  global real camFarVsp0A04
  global tensor[3] camN0A05
  global tensor[3] camU0A06
  global tensor[3] camV0A07
  global real camVmax0A08
  global real camUmax0A09
  global field CM0A0A
  global tensor[3] L0A0B
## functions
  function femData:MeshPos _msh_newtonInverse0A7F (tensor[2] pos0A0C#2, int cellInt0A0D#2, femData:Mesh mesh0A0E#5) {
    ENTRY0A7E:  preds = []
      real _t0A0F#2 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
      tensor[2] xn0A13#2 = <tensor[2]>[_t0A0F,_t0A0F];
      field _t0A15#2 = λ(INT0,FEM(msh)1,FEM(msh)2)<femV(noFunc, 0, 1, 2)_{i0}⊛Basis()>_{2} (cellInt0A0D,mesh0A0E,mesh0A0E);
      field _t0A17#1 = λ(F0[2])<∂/∂x_{i1}@(F0_{i0})>_{2 2} (_t0A15);
      field _t0A19#1 = λ(F0[2])<((Σ(i5=0..1)(i7=0..1)<((ϵ_{ii5,ii0} * ϵ_{ii7,ii1} * F0_{i7,i5}))>(i5=0..1)(i7=0..1)) / ( 1)) / ( Σ(i3=0..1)(i4=0..1)<((ϵ_{ii3,ii4} * F0_{i3,'0'} * F0_{i4,'1'}))>(i3=0..1)(i4=0..1))>_{2 2} (_t0A17);
      tensor[2,2] A0A21#1 = λ(F0[2],T1[2])<Probe(F0_{i0,i1},T1)>_{2 2} (_t0A19,xn0A13);
      int _t0A23#1 = 0;
      int _t0A25#1 = 16;
      int[] _t0A27#1 = Range(_t0A23,_t0A25);
    FOREACH0A2B:  preds = [ASSIGN0A28,NEXT0A7A]
      foreach (itter0A29 in _t0A27) on exit goto ASSIGN0A7C
        tensor[2] xn0A2A#2 = phi(xn0A13,xn0A34)
      field _t0A2E#1 = λ(T0[2],F1[2])<(F1_{i0}) - («T0_{i0}»)>_{2} (pos0A0C,_t0A15);
      field _t0A30#1 = λ(T0[2 2],F1[2])<Σ(i1=0..1)<((«T0_{i0,i1}» * F1_{i1}))>(i1=0..1)>_{2} (A0A21,_t0A2E);
      tensor[2] delta0A32#3 = λ(F0[2],T1[2])<Probe(F0_{i0},T1)>_{2} (_t0A30,xn0A2A);
      tensor[2] xn0A34#4 = λ(T0[2],T1[2])<(T0_{i0}) - (T1_{i0})>_{2} (xn0A2A,delta0A32);
      real _t0A36#2 = 0.1e-7;
      real _t0A3A#1 = λ(T0[],T1[])<(T0 * T1)> (_t0A36,_t0A36);
      real _t0A3C#1 = λ(T0[2],T1[2])<Σ(i0=0..1)<((T0_{i0} * T1_{i0}))>(i0=0..1)> (delta0A32,delta0A32);
      bool _t0A3E#1 = GTE<real>(_t0A3A,_t0A3C);
      if _t0A3E then goto ASSIGN0A42 else goto JOIN0A40
    ASSIGN0A42:  preds = [COND0A79]
      real _t0A41#3 = 0.1e1;
      real _t0A43#3 = 0.1e-8;
      real _t0A45#1 = λ(T0[],T1[])<(T0 + T1)> (_t0A41,_t0A43);
      tensor[2] _t0A4B#1 = <tensor[2]>[_t0A41,_t0A41];
      real _t0A4D#1 = λ(T0[2],T1[2])<Σ(i0=0..1)<((T0_{i0} * T1_{i0}))>(i0=0..1)> (_t0A4B,xn0A34);
      bool _t0A4F#1 = GT<real>(_t0A45,_t0A4D);
      tensor[2] _t0A55#1 = <tensor[2]>[_t0A43,_t0A43];
      tensor[2] _t0A57#2 = λ(T0[2],T1[2])<(T0_{i0} + T1_{i0})>_{2} (_t0A55,xn0A34);
      real _t0A59#1 = TensorIndex<tensor[2],[0]>(_t0A57);
      real _t0A5B#2 = -0.e0;
      bool _t0A5D#1 = GT<real>(_t0A59,_t0A5B);
      real _t0A67#1 = TensorIndex<tensor[2],[1]>(_t0A57);
      bool _t0A6B#1 = GT<real>(_t0A67,_t0A5B);
      bool _t0A6D#1 = BAnd(_t0A5D,_t0A6B);
      bool _t0A6F#1 = BAnd(_t0A4F,_t0A6D);
      if _t0A6F then goto ASSIGN0A73 else goto ASSIGN0A76
    ASSIGN0A73:  preds = [COND0A78]
      femData:MeshPos _t0A72#1 = ExtractFemItemN<[femData:Mesh,int,tensor[2],tensor[2]],femData:MeshPos,AllBuild(MeshPos),0000,"",[],int>(mesh0A0E,cellInt0A0D,xn0A34,pos0A0C);
      return _t0A72
      goto JOIN0A71
    JOIN0A71:  preds = [*RETURN(_t0A72)0A74,*RETURN(_t0A75)0A77]
      goto JOIN0A40
    JOIN0A40:  preds = [*JOIN0A71,COND0A79]
      goto FOREACH0A2B
    ASSIGN0A76:  preds = [COND0A78]
      femData:MeshPos _t0A75#1 = ExtractFemItemN<[femData:Mesh],femData:MeshPos,InvalidBuild(MeshPos),0000,"",[],int>(mesh0A0E);
      return _t0A75
      goto JOIN0A71
    ASSIGN0A7C:  preds = [FOREACH0A2B]
      femData:MeshPos _t0A7B#1 = ExtractFemItemN<[femData:Mesh],femData:MeshPos,InvalidBuild(MeshPos),0000,"",[],int>(mesh0A0E);
      return _t0A7B
}
  function int[2] nextCell40A91 (int faceIdx0A80#1, int cell0A81#1, femData:Mesh mesh0A82#1) {
    ENTRY0A90:  preds = []
      int _t0A83#1 = 6;
      int _t0A85#1 = IMul(cell0A81,_t0A83);
      int _t0A87#1 = 2;
      int _t0A89#1 = IMul(faceIdx0A80,_t0A87);
      int _t0A8B#1 = IAdd(_t0A85,_t0A89);
      int[2] _t0A8D#1 = ExtractFemItemN<[femData:Mesh,int],int[2],CellFaceCell(Mesh),0000,"",[],int>(mesh0A82,_t0A8B);
      return _t0A8D
}
## input initialization
  ENTRY09FD:  preds = []
    real isoval0991#1 = 0.2e0;
    globals.isoval0972 = isoval0991;
    real thick0994#1 = 0.7e-1;
    globals.thick0973 = thick0994;
    real _t0997#2 = 0.3e1;
    real _t0999#1 = -0.3e1;
    tensor[3] camEye099D#1 = <tensor[3]>[_t0997,_t0999,_t0997];
    globals.camEye0974 = camEye099D;
    real _t09A0#5 = 0.5e0;
    tensor[3] camAt09A6#1 = <tensor[3]>[_t09A0,_t09A0,_t09A0];
    globals.camAt0975 = camAt09A6;
    real _t09A9#4 = 0.e0;
    real _t09AD#7 = 0.1e1;
    tensor[3] camUp09AF#2 = <tensor[3]>[_t09A9,_t09A9,_t09AD];
    globals.camUp0976 = camUp09AF;
    real camFOV09B2#1 = 0.137e2;
    globals.camFOV0977 = camFOV09B2;
    int iresU09B5#2 = 10;
    globals.iresU0978 = iresU09B5;
    globals.iresV0979 = iresU09B5;
    real camNear09BB#1 = -0.2e1;
    globals.camNear097A = camNear09BB;
    real camFar09BE#1 = 0.5e1;
    globals.camFar097B = camFar09BE;
    globals.refStep097C = _t09AD;
    real rayStep09C4#1 = 0.1e-1;
    globals.rayStep097D = rayStep09C4;
    real eps09C7#1 = 0.1e-5;
    globals.eps0981 = eps09C7;
    tensor[3] mcnear09D0#2 = <tensor[3]>[_t09AD,_t09AD,_t09AD];
    globals.mcnear0985 = mcnear09D0;
    globals.mcfar0986 = mcnear09D0;
    globals.cmin0988 = _t09A9;
    globals.cmax0989 = _t09AD;
    bool light09E2#1 = true;
    globals.light098A = light09E2;
    globals.phongKa098B = _t09A0;
    globals.phongKd098C = _t09A0;
    globals.phongKs098D = _t09A9;
    real phongSp09EE#1 = 0.6e2;
    globals.phongSp098E = phongSp09EE;
    globals.maxAlpha098F = _t09AD;
    globals.lightVsp0990 = camUp09AF;
    return
## global-variable initialization
  ENTRY0B07:  preds = []
    tensor[3] camEye0A9E#1 = globals.camEye0974;
    tensor[3] camAt0A9D#1 = globals.camAt0975;
    tensor[3] camUp0A9C#1 = globals.camUp0976;
    real camFOV0A9B#1 = globals.camFOV0977;
    int iresU0A9A#1 = globals.iresU0978;
    int iresV0A99#1 = globals.iresV0979;
    real camNear0A98#1 = globals.camNear097A;
    real camFar0A97#1 = globals.camFar097B;
    femData:Mesh a0A96#3 = globals.a097E;
    femData:Space 0b0472_intermedateGlobal0A95#1 = globals.0b0472_intermedateGlobal097F;
    femData:FemFunc 0c0474_intermedateGlobal0A94#1 = globals.0c0474_intermedateGlobal0980;
    image(IMAGE1D<double[3]>) cmap0A93#1 = globals.cmap0987;
    tensor[3] lightVsp0A92#2 = globals.lightVsp0990;
    int _t0AAC#1 = 0;
    int _t0AAE#1 = 1;
    int _t0AB0#1 = ExtractFemItem<int,NumCell(Mesh)>(a0A96);
    int _t0AB2#1 = ISub(_t0AB0,_t0AAE);
    int[] _t0AB4#1 = Range(_t0AAC,_t0AB2);
    femData:MeshCell[] _t0AB6#1 = <femData:MeshCell[]>{};
  FOREACH0ABA:  preds = [ASSIGN0AB7,NEXT0ABF]
    foreach (_t0AB8 in _t0AB4) on exit goto GASSIGN0F45
      femData:MeshCell[] _t0AB9#2 = phi(_t0AB6,_t0ABD)
    femData:MeshCell _t0ABB#1 = LoadFem<femData:MeshCell>(a0A96,_t0AB8);
    femData:MeshCell[] _t0ABD#1 = Append<femData:MeshCell>(_t0AB9,_t0ABB);
    goto FOREACH0ABA
  GASSIGN0F45:  preds = [FOREACH0ABA]
    globals.0cell_a09FF = _t0AB9;
    femData:Space b0AC3#2 = LoadFem<femData:Space>(0b0472_intermedateGlobal0A95,a0A96);
    globals.b0A00 = b0AC3;
    femData:FemFunc c0AC6#1 = LoadFem<femData:FemFunc>(0c0474_intermedateGlobal0A94,b0AC3);
    globals.c0A01 = c0AC6;
    tensor[3] _t0AC9#3 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (camAt0A9D,camEye0A9E);
    real camDist0ACB#4 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (_t0AC9);
    globals.camDist0A02 = camDist0ACB;
    real camNearVsp0ACE#1 = λ(T0[],T1[])<(T0 + T1)> (camNear0A98,camDist0ACB);
    globals.camNearVsp0A03 = camNearVsp0ACE;
    real camFarVsp0AD1#1 = λ(T0[],T1[])<(T0 + T1)> (camFar0A97,camDist0ACB);
    globals.camFarVsp0A04 = camFarVsp0AD1;
    tensor[3] camN0AD6#4 = λ(T0[3],T1[3])<(T0_{i0} * (1) / ( Sqrt(Σ(i1=0..2)<((T1_{i1} * T1_{i1}))>(i1=0..2))))>_{3} (_t0AC9,_t0AC9);
    globals.camN0A05 = camN0AD6;
    tensor[3] _t0AD9#2 = λ(T0[3],T1[3])<Σ(i1=0..2)(i2=0..2)<((ϵ_{ii0,ii1,ii2} * T0_{i1} * T1_{i2}))>(i1=0..2)(i2=0..2)>_{3} (camN0AD6,camUp0A9C);
    tensor[3] camU0ADB#3 = λ(T0[3],T1[3])<(T0_{i0} * (1) / ( Sqrt(Σ(i1=0..2)<((T1_{i1} * T1_{i1}))>(i1=0..2))))>_{3} (_t0AD9,_t0AD9);
    globals.camU0A06 = camU0ADB;
    tensor[3] camV0ADE#2 = λ(T0[3],T1[3])<Σ(i1=0..2)(i2=0..2)<((ϵ_{ii0,ii1,ii2} * T0_{i1} * T1_{i2}))>(i1=0..2)(i2=0..2)>_{3} (camU0ADB,camN0AD6);
    globals.camV0A07 = camV0ADE;
    real _t0AE1#1 = 0.314159265358979323846264338327950288e1;
    real _t0AE3#1 = λ(T0[],T1[])<(T0 * T1)> (camFOV0A9B,_t0AE1);
    real _t0AE5#1 = 0.36e3;
    real _t0AE7#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t0AE3,_t0AE5);
    real _t0AE9#1 = λ(T0[])<Tangent(T0)> (_t0AE7);
    real camVmax0AEB#2 = λ(T0[],T1[])<(T0 * T1)> (_t0AE9,camDist0ACB);
    globals.camVmax0A08 = camVmax0AEB;
    real _t0AEE#1 = IntToReal(iresU0A9A);
    real _t0AF0#1 = λ(T0[],T1[])<(T0 * T1)> (camVmax0AEB,_t0AEE);
    real _t0AF2#1 = IntToReal(iresV0A99);
    real camUmax0AF4#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t0AF0,_t0AF2);
    globals.camUmax0A09 = camUmax0AF4;
    kernel _t0AF7#1 = Kernel<tent,0>;
    image(IMAGE1D<double[3]>) img0AF9#1 = BorderCtlClamp<IMAGE1D<double[3]>>(cmap0A93);
    field CM0AFB#1 = λ(V0(1)[3],H1)<V0_{i0}⊛H1>_{3} (img0AF9,_t0AF7);
    globals.CM0A0A = CM0AFB;
    tensor[3,3] _t0AFE#1 = <tensor[3,3]>[camU0ADB,camV0ADE,camN0AD6];
    tensor[3,3] _t0B00#1 = λ(T0[3 3])<T0_{i1,i0}>_{3 3} (_t0AFE);
    tensor[3] _t0B02#1 = λ(T0[3],T1[3])<(T0_{i0} * (1) / ( Sqrt(Σ(i1=0..2)<((T1_{i1} * T1_{i1}))>(i1=0..2))))>_{3} (lightVsp0A92,lightVsp0A92);
    tensor[3] L0B04#1 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (_t0B00,_t0B02);
    globals.L0A0B = L0B04;
    return
## strand
  strand ray (int ui0B26#2, int vi0B27#3)
    state:
      real rayU;
      real rayV;
      tensor[3] UV;
      tensor[3] rayOrig;
      tensor[3] rayVec;
      real camNearVsp;
      real camFarVsp;
      int offset;
      int len;
      int itter;
      int intersectionItter;
      int idx;
      tensor[2] interval;
      real s;
      real e;
      femData:MeshCell cc;
      femData:FuncCell fc;
      output real out;
      output tensor[4] rgba;
    state init
      ENTRY0BD1:  preds = []
        tensor[3] camEye0B48#1 = globals.camEye0974;
        int iresU0B47#2 = globals.iresU0978;
        int iresV0B46#3 = globals.iresV0979;
        femData:MeshCell[] 0cell_a0B45#1 = globals.0cell_a09FF;
        femData:FemFunc c0B44#1 = globals.c0A01;
        int[] indecies0B43#2 = globals.indecies0982;
        tensor[2][] times0B42#1 = globals.times0983;
        real camNearVsp0B41#1 = globals.camNearVsp0A03;
        real camFarVsp0B40#1 = globals.camFarVsp0A04;
        tensor[3] camN0B3F#1 = globals.camN0A05;
        tensor[3] camU0B3E#1 = globals.camU0A06;
        tensor[3] camV0B3D#1 = globals.camV0A07;
        real camVmax0B3C#2 = globals.camVmax0A08;
        real camUmax0B3B#2 = globals.camUmax0A09;
        real _t0B6A#1 = λ(T0[])<Neg(T0)> (camUmax0B3B);
        real _t0B6C#2 = -0.5e0;
        real _t0B6E#1 = IntToReal(ui0B26);
        real _t0B70#1 = IntToReal(iresU0B47);
        real _t0B72#2 = 0.5e0;
        real _t0B74#1 = λ(T0[],T1[])<(T0) - (T1)> (_t0B70,_t0B72);
        real rayU0B76#2 = λ(T0[],T1[],T2[],T3[],T4[])<(T0 + (((T3) - (T2)) / ( (T4) - (T2)) * (T1) - (T0)))> (_t0B6A,camUmax0B3B,_t0B6C,_t0B6E,_t0B74);
        real _t0B78#1 = λ(T0[])<Neg(T0)> (camVmax0B3C);
        real _t0B7C#1 = IntToReal(vi0B27);
        real _t0B7E#1 = IntToReal(iresV0B46);
        real _t0B82#1 = λ(T0[],T1[])<(T0) - (T1)> (_t0B7E,_t0B72);
        real rayV0B84#2 = λ(T0[],T1[],T2[],T3[],T4[])<(T0 + (((T3) - (T2)) / ( (T4) - (T2)) * (T1) - (T0)))> (_t0B78,camVmax0B3C,_t0B6C,_t0B7C,_t0B82);
        tensor[3] _t0B86#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (rayU0B76,camU0B3E);
        tensor[3] _t0B88#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (rayV0B84,camV0B3D);
        tensor[3] UV0B8A#2 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (_t0B86,_t0B88);
        tensor[3] rayOrig0B8C#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (camEye0B48,UV0B8A);
        real _t0B8E#8 = 0.e0;
        tensor[3] _t0B94#1 = <tensor[3]>[_t0B8E,_t0B8E,_t0B8E];
        tensor[3] rayVec0B96#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (camN0B3F,_t0B94);
        int _t0B9C#2 = IMul(ui0B26,iresV0B46);
        int _t0B9E#1 = IAdd(_t0B9C,vi0B27);
        int offset0BA0#2 = Subscript<int[]>(indecies0B43,_t0B9E);
        int _t0BA2#1 = IMul(iresU0B47,iresV0B46);
        int _t0BA6#1 = IAdd(_t0BA2,_t0B9C);
        int _t0BA8#1 = IAdd(_t0BA6,vi0B27);
        int len0BAA#1 = Subscript<int[]>(indecies0B43,_t0BA8);
        int itter0BAC#4 = 0;
        int idx0BB0#2 = IAdd(offset0BA0,itter0BAC);
        tensor[2] interval0BB2#3 = Subscript<tensor[2][]>(times0B42,idx0BB0);
        real s0BB4#1 = TensorIndex<tensor[2],[0]>(interval0BB2);
        real e0BB6#1 = TensorIndex<tensor[2],[1]>(interval0BB2);
        femData:MeshCell cc0BBA#2 = Subscript<femData:MeshCell[]>(0cell_a0B45,itter0BAC);
        int _t0BBD#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc0BBA);
        femData:FuncCell _t0BBF#1 = LoadFem<femData:FuncCell>(c0B44,_t0BBD);
        tensor[4] rgba0BCF#1 = <tensor[4]>[_t0B8E,_t0B8E,_t0B8E,_t0B8E];
        self.rayU = rayU0B76;
        self.rayV = rayV0B84;
        self.UV = UV0B8A;
        self.rayOrig = rayOrig0B8C;
        self.rayVec = rayVec0B96;
        self.camNearVsp = camNearVsp0B41;
        self.camFarVsp = camFarVsp0B40;
        self.offset = offset0BA0;
        self.len = len0BAA;
        self.itter = itter0BAC;
        self.intersectionItter = itter0BAC;
        self.idx = idx0BB0;
        self.interval = interval0BB2;
        self.s = s0BB4;
        self.e = e0BB6;
        self.cc = cc0BBA;
        self.fc = _t0BBF;
        self.out = _t0B8E;
        self.rgba = rgba0BCF;
        return
    end state init
    method start
        ENTRY0C2F:  preds = []
          femData:MeshCell[] 0cell_a0BE8#1 = globals.0cell_a09FF;
          femData:FemFunc c0BE7#1 = globals.c0A01;
          int[] cells0BE6#1 = globals.cells0984;
          real rayU0BEC#0 = self.rayU;
          real rayV0BED#0 = self.rayV;
          tensor[3] UV0BEE#0 = self.UV;
          tensor[3] rayOrig0BEF#0 = self.rayOrig;
          tensor[3] rayVec0BF0#0 = self.rayVec;
          real camNearVsp0BF1#0 = self.camNearVsp;
          real camFarVsp0BF2#0 = self.camFarVsp;
          int offset0BF3#0 = self.offset;
          int len0BF4#1 = self.len;
          int itter0BF5#0 = self.itter;
          int intersectionItter0BF6#0 = self.intersectionItter;
          int idx0BF7#1 = self.idx;
          tensor[2] interval0BF8#0 = self.interval;
          real s0BF9#0 = self.s;
          real e0BFA#0 = self.e;
          femData:MeshCell cc0BFB#0 = self.cc;
          femData:FuncCell fc0BFC#0 = self.fc;
          real out0BFD#0 = self.out;
          tensor[4] rgba0BFE#0 = self.rgba;
          int _t0C12#1 = 0;
          bool _t0C14#1 = EQ<int>(len0BF4,_t0C12);
          if _t0C14 then goto STABILIZE0C17 else goto JOIN0C16
        STABILIZE0C17:  preds = [COND0C21]
          stabilize
          goto JOIN0C16
        JOIN0C16:  preds = [*STABILIZE0C17,COND0C21]
          int _t0C22#1 = Subscript<int[]>(cells0BE6,idx0BF7);
          femData:MeshCell cc0C24#2 = Subscript<femData:MeshCell[]>(0cell_a0BE8,_t0C22);
          int _t0C27#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc0C24);
          femData:FuncCell _t0C29#1 = LoadFem<femData:FuncCell>(c0BE7,_t0C27);
          self.cc = cc0C24;
          self.fc = _t0C29;
          active
    end start
    method update
        ENTRY0F22:  preds = []
          femData:MeshCell[] 0cell_a0C49#1 = globals.0cell_a09FF;
          femData:FemFunc c0C48#1 = globals.c0A01;
          real eps0C47#8 = globals.eps0981;
          tensor[2][] times0C46#1 = globals.times0983;
          int[] cells0C45#1 = globals.cells0984;
          tensor[3] mcnear0C44#1 = globals.mcnear0985;
          tensor[3] mcfar0C43#1 = globals.mcfar0986;
          real cmin0C42#2 = globals.cmin0988;
          real cmax0C41#2 = globals.cmax0989;
          bool light0C40#1 = globals.light098A;
          real phongKa0C3F#1 = globals.phongKa098B;
          real phongKd0C3E#1 = globals.phongKd098C;
          real phongKs0C3D#1 = globals.phongKs098D;
          real phongSp0C3C#1 = globals.phongSp098E;
          field CM0C3B#1 = globals.CM0A0A;
          tensor[3] L0C3A#2 = globals.L0A0B;
          real rayU0C5A#0 = self.rayU;
          real rayV0C5B#0 = self.rayV;
          tensor[3] UV0C5C#0 = self.UV;
          tensor[3] rayOrig0C5D#3 = self.rayOrig;
          tensor[3] rayVec0C5E#5 = self.rayVec;
          real camNearVsp0C5F#1 = self.camNearVsp;
          real camFarVsp0C60#1 = self.camFarVsp;
          int offset0C61#1 = self.offset;
          int len0C62#1 = self.len;
          int itter0C63#2 = self.itter;
          int intersectionItter0C64#2 = self.intersectionItter;
          int idx0C65#0 = self.idx;
          tensor[2] interval0C66#0 = self.interval;
          real s0C67#6 = self.s;
          real e0C68#5 = self.e;
          femData:MeshCell cc0C69#2 = self.cc;
          femData:FuncCell fc0C6A#2 = self.fc;
          real out0C6B#1 = self.out;
          tensor[4] rgba0C6C#0 = self.rgba;
          string _t0C80#1 = "Interval:";
          tensor[2] _t0C82#1 = <tensor[2]>[s0C67,e0C68];
          string _t0C84#10 = "\n";
          Print<[string,tensor[2],string]>(_t0C80,_t0C82,_t0C84);
          string _t0C87#1 = "inner itter:";
          Print<[string,int,string]>(_t0C87,intersectionItter0C64,_t0C84);
          string _t0C8C#1 = "Outer itter:";
          Print<[string,int,string]>(_t0C8C,itter0C63,_t0C84);
          real _t0C91#1 = TensorIndex<tensor[3],[0]>(rayOrig0C5D);
          real _t0C93#1 = TensorIndex<tensor[3],[1]>(rayOrig0C5D);
          tensor[2] _t0C95#3 = <tensor[2]>[_t0C91,_t0C93];
          real _t0C97#1 = TensorIndex<tensor[3],[0]>(rayVec0C5E);
          real _t0C99#1 = TensorIndex<tensor[3],[1]>(rayVec0C5E);
          tensor[2] _t0C9B#3 = <tensor[2]>[_t0C97,_t0C99];
          tensor[2] _t0C9D#1 = λ(T0[],T1[2])<(T0 * T1_{i0})>_{2} (s0C67,_t0C9B);
          tensor[2] startRay0C9F#2 = λ(T0[2],T1[2])<(T0_{i0} + T1_{i0})>_{2} (_t0C95,_t0C9D);
          tensor[2] _t0CAD#1 = λ(T0[],T1[2])<(T0 * T1_{i0})>_{2} (e0C68,_t0C9B);
          tensor[2] endRay0CAF#1 = λ(T0[2],T1[2])<(T0_{i0} + T1_{i0})>_{2} (_t0C95,_t0CAD);
          femData:Mesh _t0CB1#2 = ExtractFem<femData:Mesh,femData:MeshCell>(cc0C69);
          int _t0CB5#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc0C69);
          field _t0CB7#5 = λ(INT0,FEM(msh)1,FEM(msh)2)<femInvV(0A7F, 0, 1, 2)_{i0}⊛Basis()>_{2} (_t0CB5,_t0CB1,_t0CB1);
          tensor[2] invertA0CB9#2 = λ(F0[2],T1[2])<Probe(F0_{i0},T1)>_{2} (_t0CB7,startRay0C9F);
          tensor[2] invertB0CC3#2 = λ(F0[2],T1[2])<Probe(F0_{i0},T1)>_{2} (_t0CB7,endRay0CAF);
          string _t0CC5#1 = "inverses:";
          Print<[string,tensor[2],tensor[2],string]>(_t0CC5,invertA0CB9,invertB0CC3,_t0C84);
          femData:FemFunc _t0CCA#2 = ExtractFem<femData:FemFunc,femData:FuncCell>(fc0C6A);
          femData:Space _t0CCE#1 = ExtractFem<femData:Space,femData:FemFunc>(_t0CCA);
          int _t0CD0#1 = ExtractFemItem<int,CellIndex(FuncCell)>(fc0C6A);
          field _t0CD2#5 = λ(INT0,FEM(fns)1,FEM(func)2)<femV(noFunc, 0, 1, 2)⊛Basis()> (_t0CD0,_t0CCE,_t0CCA);
          real faVal0CD4#2 = λ(F0[2],T1[2])<Probe(F0,T1)> (_t0CD2,invertA0CB9);
          real _t0CD6#3 = TensorIndex<tensor[3],[2]>(rayVec0C5E);
          real _t0CD8#1 = λ(T0[],T1[])<(T0 * T1)> (_t0CD6,s0C67);
          real _t0CDA#1 = λ(T0[],T1[])<(T0) - (T1)> (faVal0CD4,_t0CD8);
          real _t0CDC#3 = TensorIndex<tensor[3],[2]>(rayOrig0C5D);
          real fa0CDE#10 = λ(T0[],T1[])<(T0) - (T1)> (_t0CDA,_t0CDC);
          real _t0CEA#1 = λ(F0[2],T1[2])<Probe(F0,T1)> (_t0CD2,invertB0CC3);
          real _t0CEE#1 = λ(T0[],T1[])<(T0 * T1)> (_t0CD6,e0C68);
          real _t0CF0#1 = λ(T0[],T1[])<(T0) - (T1)> (_t0CEA,_t0CEE);
          real fb0CF4#5 = λ(T0[],T1[])<(T0) - (T1)> (_t0CF0,_t0CDC);
          string _t0CF6#1 = "Vals:";
          tensor[2] _t0CF8#1 = <tensor[2]>[fa0CDE,fb0CF4];
          Print<[string,tensor[2],string]>(_t0CF6,_t0CF8,_t0C84);
          real _t0CFD#1 = λ(T0[],T1[])<(T0) - (T1)> (fa0CDE,fb0CF4);
          real _t0CFF#1 = λ(T0[])<Abs(T0)> (_t0CFD);
          bool _t0D01#1 = LT<real>(_t0CFF,eps0C47);
          if _t0D01 then goto ASSIGN0D05 else goto JOIN0D03
        ASSIGN0D05:  preds = [COND0D18]
          real _t0D04#1 = λ(T0[])<Abs(T0)> (fa0CDE);
          bool _t0D06#1 = GT<real>(_t0D04,eps0C47);
          if _t0D06 then goto ASSIGN0D0B else goto JOIN0D08
        ASSIGN0D0B:  preds = [COND0D16]
          real s0D09#1 = λ(T0[],T1[])<(T0 + T1)> (s0C67,eps0C47);
          self.s = s0D09;
          active
          goto JOIN0D08
        JOIN0D08:  preds = [*ACTIVE0D0C,COND0D16]
          real s0D0A#1 = phi(s0C67)
          goto JOIN0D03
        JOIN0D03:  preds = [JOIN0D08,COND0D18]
          real s0D17#3 = phi(s0D0A,s0C67)
          real _t0D19#1 = λ(T0[],T1[])<(T0 * T1)> (s0D17,fb0CF4);
          real _t0D1B#1 = λ(T0[],T1[])<(T0 * T1)> (e0C68,fa0CDE);
          real _t0D1D#1 = λ(T0[],T1[])<(T0) - (T1)> (_t0D19,_t0D1B);
          real _t0D1F#1 = λ(T0[],T1[])<(T0) - (T1)> (fb0CF4,fa0CDE);
          real cup0D21#6 = λ(T0[],T1[])<(T0) / ( T1)> (_t0D1D,_t0D1F);
          string _t0D23#1 = "Mid time:";
          Print<[string,real,string]>(_t0D23,cup0D21,_t0C84);
          tensor[2] _t0D34#1 = λ(T0[],T1[2])<(T0 * T1_{i0})>_{2} (cup0D21,_t0C9B);
          tensor[2] midRay0D36#2 = λ(T0[2],T1[2])<(T0_{i0} + T1_{i0})>_{2} (_t0C95,_t0D34);
          tensor[2] invertC0D40#1 = λ(F0[2],T1[2])<Probe(F0_{i0},T1)>_{2} (_t0CB7,midRay0D36);
          real fmVal0D4C#2 = λ(F0[2],T1[2])<Probe(F0,T1)> (_t0CD2,invertC0D40);
          real _t0D50#1 = λ(T0[],T1[])<(T0 * T1)> (_t0CD6,cup0D21);
          real _t0D52#1 = λ(T0[],T1[])<(T0) - (T1)> (fmVal0D4C,_t0D50);
          real fm0D56#6 = λ(T0[],T1[])<(T0) - (T1)> (_t0D52,_t0CDC);
          string _t0D58#1 = "all vals:";
          tensor[3] _t0D5A#1 = <tensor[3]>[fa0CDE,fm0D56,fb0CF4];
          Print<[string,tensor[3],string]>(_t0D58,_t0D5A,_t0C84);
          int _t0D5F#6 = 1;
          int intersectionItter0D61#2 = IAdd(intersectionItter0C64,_t0D5F);
          real _t0D64#10 = 0.e0;
          bool _t0D66#2 = GT<real>(fa0CDE,_t0D64);
          if _t0D66 then goto JOIN0D68 else goto ASSIGN0F66
        JOIN0D68:  preds = [COND0D7D,JOIN0D72]
          int _t0D6C#1 = phi(_t0D5F,_t0D76)
          bool _t0D81#2 = GT<real>(fm0D56,_t0D64);
          if _t0D81 then goto JOIN0D83 else goto ASSIGN0F68
        JOIN0D83:  preds = [COND0D98,JOIN0D8D]
          int _t0D87#1 = phi(_t0D5F,_t0D91)
          int _t0D99#1 = IMul(_t0D6C,_t0D87);
          int _t0D9B#7 = 0;
          bool _t0D9D#1 = LT<int>(_t0D99,_t0D9B);
          if _t0D9D then goto JOIN0D9F else goto COND0DBD
        JOIN0D9F:  preds = [COND0DE5,JOIN0DDF]
          real e0DA1#4 = phi(cup0D21,e0C68)
          real s0DE4#5 = phi(s0D17,s0DE1)
          string _t0DE6#1 = "new interval:";
          tensor[2] _t0DE8#1 = <tensor[2]>[s0DE4,e0DA1];
          Print<[string,tensor[2],string]>(_t0DE6,_t0DE8,_t0C84);
          real _t0DEE#2 = λ(T0[])<Abs(T0)> (fa0CDE);
          bool _t0DF0#2 = LT<real>(_t0DEE,eps0C47);
          if _t0DF0 then goto ASSIGN0DF5 else goto ASSIGN0DF8
        ASSIGN0DF5:  preds = [COND0E06]
          bool _t0DF3#1 = true;
          goto JOIN0DF2
        JOIN0DF2:  preds = [ASSIGN0DF5,JOIN0DFB]
          bool _t0DF4#1 = phi(_t0DF3,_t0DFD)
          if _t0DF4 then goto ASSIGN0E0D else goto ASSIGN0F1F
        ASSIGN0E0D:  preds = [COND0F21]
          real _t0E0C#2 = λ(T0[])<Abs(T0)> (fm0D56);
          bool _t0E0E#1 = GT<real>(_t0E0C,eps0C47);
          if _t0E0E then goto ASSIGN0F6D else goto ASSIGN0E17
        ASSIGN0F6D:  preds = [COND0E18]
          bool _t0E13#1 = GT<real>(_t0DEE,eps0C47);
          goto JOIN0E10
        JOIN0E10:  preds = [ASSIGN0F6D,ASSIGN0E17]
          bool _t0E14#1 = phi(_t0E13,_t0E16)
          if _t0E14 then goto ASSIGN0F7B else goto ASSIGN0F6E
        ASSIGN0F7B:  preds = [COND0F1D]
          int itter0E1C#4 = IAdd(itter0C63,_t0D5F);
          bool _t0E1F#1 = GTE<int>(itter0E1C,len0C62);
          if _t0E1F then goto ASSIGN0E23 else goto JOIN0E21
        ASSIGN0E23:  preds = [COND0E2F]
          string _t0E22#1 = "Fin pixel=============================\n";
          Print<[string]>(_t0E22);
          self.itter = itter0E1C;
          self.intersectionItter = _t0D9B;
          self.s = s0DE4;
          self.e = e0DA1;
          stabilize
          goto JOIN0E21
        JOIN0E21:  preds = [*STABILIZE0E25,COND0E2F]
          int _t0E30#2 = IAdd(offset0C61,itter0E1C);
          tensor[2] interval0E32#3 = Subscript<tensor[2][]>(times0C46,_t0E30);
          int _t0E37#1 = Subscript<int[]>(cells0C45,_t0E30);
          femData:MeshCell cc0E39#2 = Subscript<femData:MeshCell[]>(0cell_a0C49,_t0E37);
          real s0E3C#1 = TensorIndex<tensor[2],[0]>(interval0E32);
          real e0E3F#1 = TensorIndex<tensor[2],[1]>(interval0E32);
          int _t0E43#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc0E39);
          femData:FuncCell _t0E45#1 = LoadFem<femData:FuncCell>(c0C48,_t0E43);
          string _t0E4C#1 = "Next interval!\n";
          Print<[string]>(_t0E4C);
          self.itter = itter0E1C;
          self.intersectionItter = _t0D9B;
          self.interval = interval0E32;
          self.s = s0E3C;
          self.e = e0E3F;
          self.cc = cc0E39;
          self.fc = _t0E45;
          active
          goto JOIN0E19
        JOIN0E19:  preds = [*ACTIVE0E4F,*STABILIZE0F13]
          goto JOIN0E07
        JOIN0E07:  preds = [*JOIN0E19,MASSIGN0F20]
          int intersectionItter0E09#1 = phi(intersectionItter0D61)
          self.intersectionItter = intersectionItter0E09;
          self.s = s0DE4;
          self.e = e0DA1;
          active
        ASSIGN0F6E:  preds = [COND0F1D]
          tensor[2] grad0E5D#1 = <tensor[2]>[_t0D64,_t0D64];
          bool _t0E61#1 = LT<real>(_t0E0C,eps0C47);
          if _t0E61 then goto ASSIGN0F70 else goto JOIN0E63
        ASSIGN0F70:  preds = [COND0E80]
          field _t0E76#1 = λ(F0[2],F1[2])<Cmp(F0)[F1_{i0}{2}]> (_t0CD2,_t0CB7);
          field _t0E78#1 = λ(F0[2])<∂/∂x_{i0}@(F0)>_{2} (_t0E76);
          tensor[2] grad0E7A#1 = λ(F0[2],T1[2])<Probe(F0_{i0},T1)>_{2} (_t0E78,midRay0D36);
          goto JOIN0E63
        JOIN0E63:  preds = [ASSIGN0E7C,COND0E80]
          tensor[2] grad0E7B#1 = phi(grad0E7A,grad0E5D)
          real out0E7E#1 = phi(fmVal0D4C,out0C6B)
          if _t0DF0 then goto ASSIGN0F71 else goto JOIN0E86
        ASSIGN0F71:  preds = [COND0EA6]
          field _t0E9C#1 = λ(F0[2],F1[2])<Cmp(F0)[F1_{i0}{2}]> (_t0CD2,_t0CB7);
          field _t0E9E#1 = λ(F0[2])<∂/∂x_{i0}@(F0)>_{2} (_t0E9C);
          tensor[2] grad0EA0#1 = λ(F0[2],T1[2])<Probe(F0_{i0},T1)>_{2} (_t0E9E,startRay0C9F);
          goto JOIN0E86
        JOIN0E86:  preds = [ASSIGN0EA2,COND0EA6]
          tensor[2] grad0EA1#3 = phi(grad0EA0,grad0E7B)
          real cup0E88#1 = phi(s0DE4,cup0D21)
          real out0EA4#3 = phi(faVal0CD4,out0E7E)
          string _t0EA8#1 = "Out val:";
          Print<[string,real,string]>(_t0EA8,out0EA4,_t0C84);
          string _t0EAD#1 = "Grad val:";
          Print<[string,tensor[2],string]>(_t0EAD,grad0EA1,_t0C84);
          real _t0EB2#6 = 0.1e1;
          tensor[3] mcol0EB8#1 = <tensor[3]>[_t0EB2,_t0EB2,_t0EB2];
          bool _t0EBA#1 = NEQ<real>(cmin0C42,cmax0C41);
          if _t0EBA then goto ASSIGN0EBE else goto JOIN0EBC
        ASSIGN0EBE:  preds = [COND0EC8]
          int _t0EBD#1 = -1;
          real _t0EBF#1 = IntToReal(_t0EBD);
          real _t0EC3#1 = λ(T0[],T1[],T2[],T3[],T4[])<(T0 + (((T3) - (T2)) / ( (T4) - (T2)) * (T1) - (T0)))> (_t0EBF,_t0EB2,cmin0C42,out0EA4,cmax0C41);
          tensor[3] mcol0EC5#1 = λ(F0[1],T1[1])<Probe(F0_{i0},T1)>_{3} (CM0C3B,_t0EC3);
          goto JOIN0EBC
        JOIN0EBC:  preds = [ASSIGN0EC7,COND0EC8]
          tensor[3] mcol0EC6#5 = phi(mcol0EC5,mcol0EB8)
          if light0C40 then goto ASSIGN0ECB else goto ASSIGN0F08
        ASSIGN0ECB:  preds = [COND0F11]
          real _t0ECA#1 = TensorIndex<tensor[2],[0]>(grad0EA1);
          real _t0ECC#1 = TensorIndex<tensor[2],[1]>(grad0EA1);
          int _t0ECE#1 = -1;
          real _t0ED0#1 = IntToReal(_t0ECE);
          tensor[3] N0ED2#2 = <tensor[3]>[_t0ECA,_t0ECC,_t0ED0];
          tensor[3] _t0ED4#1 = λ(T0[3],T1[3])<(T0_{i0} * (1) / ( Sqrt(Σ(i1=0..2)<((T1_{i1} * T1_{i1}))>(i1=0..2))))>_{3} (rayVec0C5E,rayVec0C5E);
          tensor[3] _t0ED6#1 = λ(T0[3])<Neg(T0_{i0})>_{3} (_t0ED4);
          tensor[3] _t0ED8#2 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (_t0ED6,L0C3A);
          tensor[3] H0EDA#1 = λ(T0[3],T1[3])<(T0_{i0} * (1) / ( Sqrt(Σ(i1=0..2)<((T1_{i1} * T1_{i1}))>(i1=0..2))))>_{3} (_t0ED8,_t0ED8);
          tensor[3] lightColor0EDC#2 = λ(T0[3],T1[3],T2[],T3[],T4[])<(T0_{i0} + (((T3) - (T2)) / ( (T4) - (T2)) * (T1_{i0}) - (T0_{i0})))>_{3} (mcnear0C44,mcfar0C43,camNearVsp0C5F,cup0E88,camFarVsp0C60);
          tensor[3] ambientTerm0EDE#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (phongKa0C3F,mcol0EC6);
          tensor[3] _t0EE0#1 = λ(T0[3],T1[3])<(T0_{i0} * T1_{i0})>_{3} (mcol0EC6,lightColor0EDC);
          tensor[3] _t0EE2#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (phongKd0C3E,_t0EE0);
          real _t0EE6#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (N0ED2,L0C3A);
          real _t0EE8#1 = Max<real>(_t0D64,_t0EE6);
          tensor[3] diffuse0EEA#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (_t0EE8,_t0EE2);
          tensor[3] _t0EEC#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (phongKs0C3D,lightColor0EDC);
          real _t0EF0#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (N0ED2,H0EDA);
          real _t0EF2#1 = Max<real>(_t0D64,_t0EF0);
          real _t0EF4#1 = MathFn<pow>(_t0EF2,phongSp0C3C);
          tensor[3] specular0EF6#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (_t0EF4,_t0EEC);
          tensor[3] _t0EF8#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (ambientTerm0EDE,diffuse0EEA);
          tensor[3] fin0EFA#3 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (_t0EF8,specular0EF6);
          real _t0EFC#1 = TensorIndex<tensor[3],[0]>(fin0EFA);
          real _t0EFE#1 = TensorIndex<tensor[3],[1]>(fin0EFA);
          real _t0F00#1 = TensorIndex<tensor[3],[2]>(fin0EFA);
          tensor[4] rgba0F04#1 = <tensor[4]>[_t0EFC,_t0EFE,_t0F00,_t0EB2];
          goto JOIN0EC9
        JOIN0EC9:  preds = [ASSIGN0F79,ASSIGN0F76]
          tensor[4] rgba0F05#1 = phi(rgba0F04,rgba0F0F)
          self.intersectionItter = _t0D9B;
          self.s = s0DE4;
          self.e = e0DA1;
          self.out = out0EA4;
          self.rgba = rgba0F05;
          stabilize
          goto JOIN0E19
        ASSIGN0F08:  preds = [COND0F11]
          real _t0F07#1 = TensorIndex<tensor[3],[0]>(mcol0EC6);
          real _t0F09#1 = TensorIndex<tensor[3],[1]>(mcol0EC6);
          real _t0F0B#1 = TensorIndex<tensor[3],[2]>(mcol0EC6);
          tensor[4] rgba0F0F#1 = <tensor[4]>[_t0F07,_t0F09,_t0F0B,_t0EB2];
          goto JOIN0EC9
        ASSIGN0E17:  preds = [COND0E18]
          bool _t0E16#1 = false;
          goto JOIN0E10
        ASSIGN0F1F:  preds = [COND0F21]
          string _t0F1E#1 = "=========\n";
          Print<[string]>(_t0F1E);
          goto JOIN0E07
        ASSIGN0DF8:  preds = [COND0E06]
          real _t0DF7#1 = λ(T0[])<Abs(T0)> (fm0D56);
          bool _t0DF9#1 = LT<real>(_t0DF7,eps0C47);
          if _t0DF9 then goto ASSIGN0DFE else goto ASSIGN0E00
        ASSIGN0DFE:  preds = [COND0E03]
          bool _t0DFC#1 = true;
          goto JOIN0DFB
        JOIN0DFB:  preds = [ASSIGN0DFE,ASSIGN0E02]
          bool _t0DFD#1 = phi(_t0DFC,_t0E01)
          goto JOIN0DF2
        ASSIGN0E00:  preds = [COND0E03]
          int _t0DFF#1 = 32;
          bool _t0E01#1 = GT<int>(intersectionItter0D61,_t0DFF);
          goto JOIN0DFB
        COND0DBD:  preds = [COND0DE5]
          if _t0D66 then goto JOIN0DA8 else goto ASSIGN0F69
        JOIN0DA8:  preds = [COND0DBD,JOIN0DB2]
          int _t0DAC#1 = phi(_t0D5F,_t0DB6)
          if _t0D81 then goto JOIN0DC3 else goto ASSIGN0F6A
        JOIN0DC3:  preds = [COND0DD8,JOIN0DCD]
          int _t0DC7#1 = phi(_t0D5F,_t0DD1)
          int _t0DD9#1 = IMul(_t0DAC,_t0DC7);
          bool _t0DDD#1 = GT<int>(_t0DD9,_t0D9B);
          if _t0DDD then goto JOIN0DDF else goto JOIN0DDF
        JOIN0DDF:  preds = [COND0DE3,COND0DE3]
          real s0DE1#1 = phi(cup0D21,s0D17)
          goto JOIN0D9F
        ASSIGN0F6A:  preds = [COND0DD8]
          bool _t0DCB#1 = LT<real>(fm0D56,_t0D64);
          if _t0DCB then goto ASSIGN0DCF else goto JOIN0DCD
        ASSIGN0DCF:  preds = [COND0DD7]
          int _t0DCE#1 = -1;
          goto JOIN0DCD
        JOIN0DCD:  preds = [ASSIGN0DCF,COND0DD7]
          int _t0DD1#1 = phi(_t0DCE,_t0D9B)
          goto JOIN0DC3
        ASSIGN0F69:  preds = [COND0DBD]
          bool _t0DB0#1 = LT<real>(fa0CDE,_t0D64);
          if _t0DB0 then goto ASSIGN0DB4 else goto JOIN0DB2
        ASSIGN0DB4:  preds = [COND0DBC]
          int _t0DB3#1 = -1;
          goto JOIN0DB2
        JOIN0DB2:  preds = [ASSIGN0DB4,COND0DBC]
          int _t0DB6#1 = phi(_t0DB3,_t0D9B)
          goto JOIN0DA8
        ASSIGN0F68:  preds = [COND0D98]
          bool _t0D8B#1 = LT<real>(fm0D56,_t0D64);
          if _t0D8B then goto ASSIGN0D8F else goto ASSIGN0D94
        ASSIGN0D8F:  preds = [COND0D97]
          int _t0D8E#1 = -1;
          goto JOIN0D8D
        JOIN0D8D:  preds = [ASSIGN0D8F,ASSIGN0D94]
          int _t0D91#1 = phi(_t0D8E,_t0D93)
          goto JOIN0D83
        ASSIGN0D94:  preds = [COND0D97]
          int _t0D93#1 = 0;
          goto JOIN0D8D
        ASSIGN0F66:  preds = [COND0D7D]
          bool _t0D70#1 = LT<real>(fa0CDE,_t0D64);
          if _t0D70 then goto ASSIGN0D74 else goto ASSIGN0D79
        ASSIGN0D74:  preds = [COND0D7C]
          int _t0D73#1 = -1;
          goto JOIN0D72
        JOIN0D72:  preds = [ASSIGN0D74,ASSIGN0D79]
          int _t0D76#1 = phi(_t0D73,_t0D78)
          goto JOIN0D68
        ASSIGN0D79:  preds = [COND0D7C]
          int _t0D78#1 = 0;
          goto JOIN0D72
    end update
  end ray
## initial strand creation
  GRID(2)
    ENTRY0B24:  preds = []
      int iresU0B0A#1 = globals.iresU0978;
      int iresV0B09#1 = globals.iresV0979;
      int _t0B0D#2 = 0;
      int _t0B0F#2 = 1;
      int _t0B11#1 = ISub(iresU0B0A,_t0B0F);
      int[] _t0B13#1 = Range(_t0B0D,_t0B11);
    FOREACH0B16:  preds = [ASSIGN0B14,NEXT0B23]
      foreach (vi0B15 in _t0B13) on exit goto RETURN0B25
      int _t0B1B#1 = ISub(iresV0B09,_t0B0F);
      int[] _t0B1D#1 = Range(_t0B0D,_t0B1B);
    FOREACH0B20:  preds = [ASSIGN0F2E,NEXT0B22]
      foreach (ui0B1F in _t0B1D) on exit goto NEXT0B23
      new ray(ui0B1F,vi0B15);
      goto FOREACH0B20
    NEXT0B23:  preds = [FOREACH0B20]
      goto FOREACH0B16
    RETURN0B25:  preds = [FOREACH0B16]
      return
#### end program ####
##### high-ir: after normalization rewriting ####
## properties
  GlobalInit StrandArray HasStartMethod ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[]) HasInputs HasGlobals
## globals
  input isoval0972 (isoval) = <default>
  input thick0973 (thick) = <default>
  input camEye0974 (camEye) = <default>
  input camAt0975 (camAt) = <default>
  input camUp0976 (camUp) = <default>
  input camFOV0977 (camFOV) = <default>
  input iresU0978 (iresU) = <default>
  input iresV0979 (iresV) = <default>
  input camNear097A (camNear) = <default>
  input camFar097B (camFar) = <default>
  input refStep097C (refStep) = <default>
  input rayStep097D (rayStep) = <default>
  input a097E (a) = <no-default>
  input 0b0472_intermedateGlobal097F (b) = <no-default>
  input 0c0474_intermedateGlobal0980 (c) = <no-default>
  input eps0981 (eps) = <default>
  input indecies0982 (indecies) = <no-default>
  input times0983 (times) = <no-default>
  input cells0984 (cells) = <no-default>
  input mcnear0985 (mcnear) = <default>
  input mcfar0986 (mcfar) = <default>
  input cmap0987 (cmap) = image("/home/teocollin/gitcode/diderot/tests/lipRay/find/cmap.nrrd")
  input cmin0988 (cmin) = <default>
  input cmax0989 (cmax) = <default>
  input light098A (light) = <default>
  input phongKa098B (phongKa) = <default>
  input phongKd098C (phongKd) = <default>
  input phongKs098D (phongKs) = <default>
  input phongSp098E (phongSp) = <default>
  input maxAlpha098F (maxAlpha) = <default>
  input lightVsp0990 (lightVsp) = <default>
  global femData:MeshCell[] 0cell_a09FF
  global femData:FemFunc c0A01
  global real camNearVsp0A03
  global real camFarVsp0A04
  global tensor[3] camN0A05
  global tensor[3] camU0A06
  global tensor[3] camV0A07
  global real camVmax0A08
  global real camUmax0A09
  global tensor[3] L0A0B
## functions
  function femData:MeshPos _msh_newtonInverse0A7F (tensor[2] pos0A0C#6, int cellInt0A0D#11, femData:Mesh mesh0A0E#23) {
    ENTRY0A7E:  preds = []
      real _t0A0F#2 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
      tensor[2] xn0A13#6 = <tensor[2]>[_t0A0F,_t0A0F];
      int _t0A23#1 = 0;
      int _t0A25#1 = 16;
      int[] _t0A27#1 = Range(_t0A23,_t0A25);
    FOREACH0A2B:  preds = [ASSIGN0A28,NEXT0A7A]
      foreach (itter0A29 in _t0A27) on exit goto ASSIGN0A7C
        tensor[2] xn0A2A#8 = phi(xn0A13,xn0A34)
      tensor[2] xn0A34#2 = λ(T0[2],INT1,FEM(msh)2,FEM(msh)3,T4[2],T5[2],INT6,FEM(msh)7,FEM(msh)8,T9[2])<(T0_{i0}) - (Σ(i3=0..1)<(((Σ(i10=0..1)<((ϵ_{ii10,ii0} * Σ(i12=0..1)<((ϵ_{ii12,ii3} * Probe(femV(noFunc, 1, 2, 2)_{i12}⊛Basis()dx_{i10},T4)))>(i12=0..1)))>(i10=0..1)) / ( Σ(i8=0..1)<((Probe(femV(noFunc, 1, 2, 2)_{i8}⊛Basis()dx_{'0'},T4) * Σ(i9=0..1)<((ϵ_{ii8,ii9} * Probe(femV(noFunc, 1, 2, 2)_{i9}⊛Basis()dx_{'1'},T4)))>(i9=0..1)))>(i8=0..1)) * (Probe(femV(noFunc, 1, 2, 2)_{i3}⊛Basis(),T0)) - (T5_{i3})))>(i3=0..1))>_{2} (xn0A2A,cellInt0A0D,mesh0A0E,mesh0A0E,xn0A13,pos0A0C,cellInt0A0D,mesh0A0E,mesh0A0E,xn0A2A);
      real _t0A36#2 = 0.1e-7;
      real _t0A3A#1 = λ(T0[],T1[])<(T0 * T1)> (_t0A36,_t0A36);
      real _t0A3C#1 = λ(INT0,FEM(msh)1,FEM(msh)2,T3[2],T4[2],INT5,FEM(msh)6,FEM(msh)7,T8[2],INT9,FEM(msh)10,FEM(msh)11,T12[2],T13[2],INT14,FEM(msh)15,FEM(msh)16,T17[2])<Σ(i0=0..1)<((Σ(i2=0..1)<(((Σ(i9=0..1)<((ϵ_{ii9,ii0} * Σ(i11=0..1)<((ϵ_{ii11,ii2} * Probe(femV(noFunc, 0, 1, 1)_{i11}⊛Basis()dx_{i9},T3)))>(i11=0..1)))>(i9=0..1)) / ( Σ(i7=0..1)<((Probe(femV(noFunc, 0, 1, 1)_{i7}⊛Basis()dx_{'0'},T3) * Σ(i8=0..1)<((ϵ_{ii7,ii8} * Probe(femV(noFunc, 0, 1, 1)_{i8}⊛Basis()dx_{'1'},T3)))>(i8=0..1)))>(i7=0..1)) * (Probe(femV(noFunc, 0, 1, 1)_{i2}⊛Basis(),T8)) - (T4_{i2})))>(i2=0..1) * Σ(i10=0..1)<(((Σ(i17=0..1)<((ϵ_{ii17,ii0} * Σ(i19=0..1)<((ϵ_{ii19,ii10} * Probe(femV(noFunc, 0, 1, 1)_{i19}⊛Basis()dx_{i17},T3)))>(i19=0..1)))>(i17=0..1)) / ( Σ(i15=0..1)<((Probe(femV(noFunc, 0, 1, 1)_{i15}⊛Basis()dx_{'0'},T3) * Σ(i16=0..1)<((ϵ_{ii15,ii16} * Probe(femV(noFunc, 0, 1, 1)_{i16}⊛Basis()dx_{'1'},T3)))>(i16=0..1)))>(i15=0..1)) * (Probe(femV(noFunc, 0, 1, 1)_{i10}⊛Basis(),T8)) - (T4_{i10})))>(i10=0..1)))>(i0=0..1)> (cellInt0A0D,mesh0A0E,mesh0A0E,xn0A13,pos0A0C,cellInt0A0D,mesh0A0E,mesh0A0E,xn0A2A,cellInt0A0D,mesh0A0E,mesh0A0E,xn0A13,pos0A0C,cellInt0A0D,mesh0A0E,mesh0A0E,xn0A2A);
      bool _t0A3E#1 = GTE<real>(_t0A3A,_t0A3C);
      if _t0A3E then goto ASSIGN0A42 else goto JOIN0A40
    ASSIGN0A42:  preds = [COND0A79]
      real _t0A41#3 = 0.1e1;
      real _t0A43#3 = 0.1e-8;
      real _t0A45#1 = λ(T0[],T1[])<(T0 + T1)> (_t0A41,_t0A43);
      tensor[2] _t0A4B#1 = <tensor[2]>[_t0A41,_t0A41];
      real _t0A4D#1 = λ(T0[2],T1[2],INT2,FEM(msh)3,FEM(msh)4,T5[2],T6[2],INT7,FEM(msh)8,FEM(msh)9,T10[2])<Σ(i0=0..1)<((T0_{i0} * (T1_{i0}) - (Σ(i3=0..1)<(((Σ(i10=0..1)<((ϵ_{ii10,ii0} * Σ(i12=0..1)<((ϵ_{ii12,ii3} * Probe(femV(noFunc, 2, 3, 3)_{i12}⊛Basis()dx_{i10},T5)))>(i12=0..1)))>(i10=0..1)) / ( Σ(i8=0..1)<((Probe(femV(noFunc, 2, 3, 3)_{i8}⊛Basis()dx_{'0'},T5) * Σ(i9=0..1)<((ϵ_{ii8,ii9} * Probe(femV(noFunc, 2, 3, 3)_{i9}⊛Basis()dx_{'1'},T5)))>(i9=0..1)))>(i8=0..1)) * (Probe(femV(noFunc, 2, 3, 3)_{i3}⊛Basis(),T1)) - (T6_{i3})))>(i3=0..1))))>(i0=0..1)> (_t0A4B,xn0A2A,cellInt0A0D,mesh0A0E,mesh0A0E,xn0A13,pos0A0C,cellInt0A0D,mesh0A0E,mesh0A0E,xn0A2A);
      bool _t0A4F#1 = GT<real>(_t0A45,_t0A4D);
      tensor[2] _t0A55#1 = <tensor[2]>[_t0A43,_t0A43];
      tensor[2] _t0A57#2 = λ(T0[2],T1[2],INT2,FEM(msh)3,FEM(msh)4,T5[2],T6[2],INT7,FEM(msh)8,FEM(msh)9,T10[2])<(T0_{i0} + (T1_{i0}) - (Σ(i4=0..1)<(((Σ(i11=0..1)<((ϵ_{ii11,ii0} * Σ(i13=0..1)<((ϵ_{ii13,ii4} * Probe(femV(noFunc, 2, 3, 3)_{i13}⊛Basis()dx_{i11},T5)))>(i13=0..1)))>(i11=0..1)) / ( Σ(i9=0..1)<((Probe(femV(noFunc, 2, 3, 3)_{i9}⊛Basis()dx_{'0'},T5) * Σ(i10=0..1)<((ϵ_{ii9,ii10} * Probe(femV(noFunc, 2, 3, 3)_{i10}⊛Basis()dx_{'1'},T5)))>(i10=0..1)))>(i9=0..1)) * (Probe(femV(noFunc, 2, 3, 3)_{i4}⊛Basis(),T1)) - (T6_{i4})))>(i4=0..1)))>_{2} (_t0A55,xn0A2A,cellInt0A0D,mesh0A0E,mesh0A0E,xn0A13,pos0A0C,cellInt0A0D,mesh0A0E,mesh0A0E,xn0A2A);
      real _t0A59#1 = TensorIndex<tensor[2],[0]>(_t0A57);
      real _t0A5B#2 = -0.e0;
      bool _t0A5D#1 = GT<real>(_t0A59,_t0A5B);
      real _t0A67#1 = TensorIndex<tensor[2],[1]>(_t0A57);
      bool _t0A6B#1 = GT<real>(_t0A67,_t0A5B);
      bool _t0A6D#1 = BAnd(_t0A5D,_t0A6B);
      bool _t0A6F#1 = BAnd(_t0A4F,_t0A6D);
      if _t0A6F then goto ASSIGN0A73 else goto ASSIGN0A76
    ASSIGN0A73:  preds = [COND0A78]
      femData:MeshPos _t0A72#1 = ExtractFemItemN<[femData:Mesh,int,tensor[2],tensor[2]],femData:MeshPos,AllBuild(MeshPos),0000,"",[],int>(mesh0A0E,cellInt0A0D,xn0A34,pos0A0C);
      return _t0A72
      goto JOIN0A71
    JOIN0A71:  preds = [*RETURN(_t0A72)0A74,*RETURN(_t0A75)0A77]
      goto JOIN0A40
    JOIN0A40:  preds = [*JOIN0A71,COND0A79]
      goto FOREACH0A2B
    ASSIGN0A76:  preds = [COND0A78]
      femData:MeshPos _t0A75#1 = ExtractFemItemN<[femData:Mesh],femData:MeshPos,InvalidBuild(MeshPos),0000,"",[],int>(mesh0A0E);
      return _t0A75
      goto JOIN0A71
    ASSIGN0A7C:  preds = [FOREACH0A2B]
      femData:MeshPos _t0A7B#1 = ExtractFemItemN<[femData:Mesh],femData:MeshPos,InvalidBuild(MeshPos),0000,"",[],int>(mesh0A0E);
      return _t0A7B
}
  function int[2] nextCell40A91 (int faceIdx0A80#1, int cell0A81#1, femData:Mesh mesh0A82#1) {
    ENTRY0A90:  preds = []
      int _t0A83#1 = 6;
      int _t0A85#1 = IMul(cell0A81,_t0A83);
      int _t0A87#1 = 2;
      int _t0A89#1 = IMul(faceIdx0A80,_t0A87);
      int _t0A8B#1 = IAdd(_t0A85,_t0A89);
      int[2] _t0A8D#1 = ExtractFemItemN<[femData:Mesh,int],int[2],CellFaceCell(Mesh),0000,"",[],int>(mesh0A82,_t0A8B);
      return _t0A8D
}
## input initialization
  ENTRY09FD:  preds = []
    real isoval0991#1 = 0.2e0;
    globals.isoval0972 = isoval0991;
    real thick0994#1 = 0.7e-1;
    globals.thick0973 = thick0994;
    real _t0997#2 = 0.3e1;
    real _t0999#1 = -0.3e1;
    tensor[3] camEye099D#1 = <tensor[3]>[_t0997,_t0999,_t0997];
    globals.camEye0974 = camEye099D;
    real _t09A0#5 = 0.5e0;
    tensor[3] camAt09A6#1 = <tensor[3]>[_t09A0,_t09A0,_t09A0];
    globals.camAt0975 = camAt09A6;
    real _t09A9#4 = 0.e0;
    real _t09AD#7 = 0.1e1;
    tensor[3] camUp09AF#2 = <tensor[3]>[_t09A9,_t09A9,_t09AD];
    globals.camUp0976 = camUp09AF;
    real camFOV09B2#1 = 0.137e2;
    globals.camFOV0977 = camFOV09B2;
    int iresU09B5#2 = 10;
    globals.iresU0978 = iresU09B5;
    globals.iresV0979 = iresU09B5;
    real camNear09BB#1 = -0.2e1;
    globals.camNear097A = camNear09BB;
    real camFar09BE#1 = 0.5e1;
    globals.camFar097B = camFar09BE;
    globals.refStep097C = _t09AD;
    real rayStep09C4#1 = 0.1e-1;
    globals.rayStep097D = rayStep09C4;
    real eps09C7#1 = 0.1e-5;
    globals.eps0981 = eps09C7;
    tensor[3] mcnear09D0#2 = <tensor[3]>[_t09AD,_t09AD,_t09AD];
    globals.mcnear0985 = mcnear09D0;
    globals.mcfar0986 = mcnear09D0;
    globals.cmin0988 = _t09A9;
    globals.cmax0989 = _t09AD;
    bool light09E2#1 = true;
    globals.light098A = light09E2;
    globals.phongKa098B = _t09A0;
    globals.phongKd098C = _t09A0;
    globals.phongKs098D = _t09A9;
    real phongSp09EE#1 = 0.6e2;
    globals.phongSp098E = phongSp09EE;
    globals.maxAlpha098F = _t09AD;
    globals.lightVsp0990 = camUp09AF;
    return
## global-variable initialization
  ENTRY0B07:  preds = []
    tensor[3] camEye0A9E#16 = globals.camEye0974;
    tensor[3] camAt0A9D#16 = globals.camAt0975;
    tensor[3] camUp0A9C#4 = globals.camUp0976;
    real camFOV0A9B#2 = globals.camFOV0977;
    int iresU0A9A#1 = globals.iresU0978;
    int iresV0A99#1 = globals.iresV0979;
    real camNear0A98#1 = globals.camNear097A;
    real camFar0A97#1 = globals.camFar097B;
    femData:Mesh a0A96#3 = globals.a097E;
    femData:Space 0b0472_intermedateGlobal0A95#1 = globals.0b0472_intermedateGlobal097F;
    femData:FemFunc 0c0474_intermedateGlobal0A94#1 = globals.0c0474_intermedateGlobal0980;
    image(IMAGE1D<double[3]>) cmap0A93#1 = globals.cmap0987;
    tensor[3] lightVsp0A92#2 = globals.lightVsp0990;
    int _t0AAC#1 = 0;
    int _t0AAE#1 = 1;
    int _t0AB0#1 = ExtractFemItem<int,NumCell(Mesh)>(a0A96);
    int _t0AB2#1 = ISub(_t0AB0,_t0AAE);
    int[] _t0AB4#1 = Range(_t0AAC,_t0AB2);
    femData:MeshCell[] _t0AB6#1 = <femData:MeshCell[]>{};
  FOREACH0ABA:  preds = [ASSIGN0AB7,NEXT0ABF]
    foreach (_t0AB8 in _t0AB4) on exit goto GASSIGN0F45
      femData:MeshCell[] _t0AB9#2 = phi(_t0AB6,_t0ABD)
    femData:MeshCell _t0ABB#1 = LoadFem<femData:MeshCell>(a0A96,_t0AB8);
    femData:MeshCell[] _t0ABD#1 = Append<femData:MeshCell>(_t0AB9,_t0ABB);
    goto FOREACH0ABA
  GASSIGN0F45:  preds = [FOREACH0ABA]
    globals.0cell_a09FF = _t0AB9;
    femData:Space b0AC3#1 = LoadFem<femData:Space>(0b0472_intermedateGlobal0A95,a0A96);
    femData:FemFunc c0AC6#1 = LoadFem<femData:FemFunc>(0c0474_intermedateGlobal0A94,b0AC3);
    globals.c0A01 = c0AC6;
    real camNearVsp0ACE#1 = λ(T0[],T1[3],T2[3])<(T0 + Sqrt(Σ(i0=0..2)<(((T1_{i0}) - (T2_{i0}) * (T1_{i0}) - (T2_{i0})))>(i0=0..2)))> (camNear0A98,camAt0A9D,camEye0A9E);
    globals.camNearVsp0A03 = camNearVsp0ACE;
    real camFarVsp0AD1#1 = λ(T0[],T1[3],T2[3])<(T0 + Sqrt(Σ(i0=0..2)<(((T1_{i0}) - (T2_{i0}) * (T1_{i0}) - (T2_{i0})))>(i0=0..2)))> (camFar0A97,camAt0A9D,camEye0A9E);
    globals.camFarVsp0A04 = camFarVsp0AD1;
    tensor[3] camN0AD6#2 = λ(T0[3],T1[3],T2[3],T3[3])<((T0_{i0}) - (T1_{i0}) * (1) / ( Sqrt(Σ(i1=0..2)<(((T0_{i1}) - (T1_{i1}) * (T0_{i1}) - (T1_{i1})))>(i1=0..2))))>_{3} (camAt0A9D,camEye0A9E,camAt0A9D,camEye0A9E);
    globals.camN0A05 = camN0AD6;
    tensor[3] camU0ADB#2 = λ(T0[3],T1[3],T2[3],T3[3],T4[3],T5[3],T6[3],T7[3],T8[3],T9[3])<(Σ(i2=0..2)(i3=0..2)<((ϵ_{ii0,ii2,ii3} * (T0_{i2}) - (T1_{i2}) * (1) / ( Sqrt(Σ(i4=0..2)<(((T0_{i4}) - (T1_{i4}) * (T0_{i4}) - (T1_{i4})))>(i4=0..2))) * T4_{i3}))>(i2=0..2)(i3=0..2) * (1) / ( Sqrt(Σ(i1=0..2)<((Σ(i2=0..2)(i3=0..2)<((ϵ_{ii1,ii2,ii3} * (T0_{i2}) - (T1_{i2}) * (1) / ( Sqrt(Σ(i4=0..2)<(((T0_{i4}) - (T1_{i4}) * (T0_{i4}) - (T1_{i4})))>(i4=0..2))) * T4_{i3}))>(i2=0..2)(i3=0..2) * Σ(i2=0..2)(i3=0..2)<((ϵ_{ii1,ii2,ii3} * (T0_{i2}) - (T1_{i2}) * (1) / ( Sqrt(Σ(i4=0..2)<(((T0_{i4}) - (T1_{i4}) * (T0_{i4}) - (T1_{i4})))>(i4=0..2))) * T4_{i3}))>(i2=0..2)(i3=0..2)))>(i1=0..2))))>_{3} (camAt0A9D,camEye0A9E,camAt0A9D,camEye0A9E,camUp0A9C,camAt0A9D,camEye0A9E,camAt0A9D,camEye0A9E,camUp0A9C);
    globals.camU0A06 = camU0ADB;
    tensor[3] camV0ADE#2 = λ(T0[3],T1[3],T2[3],T3[3],T4[3],T5[3],T6[3],T7[3],T8[3],T9[3],T10[3],T11[3],T12[3],T13[3])<Σ(i1=0..2)(i2=0..2)<((ϵ_{ii0,ii1,ii2} * Σ(i4=0..2)(i5=0..2)<((ϵ_{ii1,ii4,ii5} * (T0_{i4}) - (T1_{i4}) * (1) / ( Sqrt(Σ(i6=0..2)<(((T0_{i6}) - (T1_{i6}) * (T0_{i6}) - (T1_{i6})))>(i6=0..2))) * T4_{i5}))>(i4=0..2)(i5=0..2) * (1) / ( Sqrt(Σ(i3=0..2)<((Σ(i4=0..2)(i5=0..2)<((ϵ_{ii3,ii4,ii5} * (T0_{i4}) - (T1_{i4}) * (1) / ( Sqrt(Σ(i6=0..2)<(((T0_{i6}) - (T1_{i6}) * (T0_{i6}) - (T1_{i6})))>(i6=0..2))) * T4_{i5}))>(i4=0..2)(i5=0..2) * Σ(i4=0..2)(i5=0..2)<((ϵ_{ii3,ii4,ii5} * (T0_{i4}) - (T1_{i4}) * (1) / ( Sqrt(Σ(i6=0..2)<(((T0_{i6}) - (T1_{i6}) * (T0_{i6}) - (T1_{i6})))>(i6=0..2))) * T4_{i5}))>(i4=0..2)(i5=0..2)))>(i3=0..2))) * (T0_{i2}) - (T1_{i2}) * (1) / ( Sqrt(Σ(i7=0..2)<(((T0_{i7}) - (T1_{i7}) * (T0_{i7}) - (T1_{i7})))>(i7=0..2)))))>(i1=0..2)(i2=0..2)>_{3} (camAt0A9D,camEye0A9E,camAt0A9D,camEye0A9E,camUp0A9C,camAt0A9D,camEye0A9E,camAt0A9D,camEye0A9E,camUp0A9C,camAt0A9D,camEye0A9E,camAt0A9D,camEye0A9E);
    globals.camV0A07 = camV0ADE;
    real _t0AE1#2 = 0.314159265358979323846264338327950288e1;
    real _t0AE5#2 = 0.36e3;
    real camVmax0AEB#1 = λ(T0[],T1[],T2[],T3[3],T4[3])<(Tangent(((T0 * T1)) / ( T2)) * Sqrt(Σ(i0=0..2)<(((T3_{i0}) - (T4_{i0}) * (T3_{i0}) - (T4_{i0})))>(i0=0..2)))> (camFOV0A9B,_t0AE1,_t0AE5,camAt0A9D,camEye0A9E);
    globals.camVmax0A08 = camVmax0AEB;
    real _t0AEE#1 = IntToReal(iresU0A9A);
    real _t0AF2#1 = IntToReal(iresV0A99);
    real camUmax0AF4#1 = λ(T0[],T1[],T2[],T3[3],T4[3],T5[],T6[])<((T5 * Tangent(((T0 * T1)) / ( T2)) * Sqrt(Σ(i0=0..2)<(((T3_{i0}) - (T4_{i0}) * (T3_{i0}) - (T4_{i0})))>(i0=0..2)))) / ( T6)> (camFOV0A9B,_t0AE1,_t0AE5,camAt0A9D,camEye0A9E,_t0AEE,_t0AF2);
    globals.camUmax0A09 = camUmax0AF4;
    kernel _t0AF7#1 = Kernel<tent,0>;
    image(IMAGE1D<double[3]>) img0AF9#1 = BorderCtlClamp<IMAGE1D<double[3]>>(cmap0A93);
    tensor[3,3] _t0AFE#1 = <tensor[3,3]>[camU0ADB,camV0ADE,camN0AD6];
    tensor[3] L0B04#1 = λ(T0[3 3],T1[3],T2[3])<Σ(i1=0..2)<((T0_{i1,i0} * T1_{i1} * (1) / ( Sqrt(Σ(i2=0..2)<((T1_{i2} * T1_{i2}))>(i2=0..2)))))>(i1=0..2)>_{3} (_t0AFE,lightVsp0A92,lightVsp0A92);
    globals.L0A0B = L0B04;
    return
## strand
  strand ray (int ui0B26#2, int vi0B27#3)
    state:
      real rayU;
      real rayV;
      tensor[3] UV;
      tensor[3] rayOrig;
      tensor[3] rayVec;
      real camNearVsp;
      real camFarVsp;
      int offset;
      int len;
      int itter;
      int intersectionItter;
      int idx;
      tensor[2] interval;
      real s;
      real e;
      femData:MeshCell cc;
      femData:FuncCell fc;
      output real out;
      output tensor[4] rgba;
    state init
      ENTRY0BD1:  preds = []
        tensor[3] camEye0B48#1 = globals.camEye0974;
        int iresU0B47#2 = globals.iresU0978;
        int iresV0B46#3 = globals.iresV0979;
        femData:MeshCell[] 0cell_a0B45#1 = globals.0cell_a09FF;
        femData:FemFunc c0B44#1 = globals.c0A01;
        int[] indecies0B43#2 = globals.indecies0982;
        tensor[2][] times0B42#1 = globals.times0983;
        real camNearVsp0B41#1 = globals.camNearVsp0A03;
        real camFarVsp0B40#1 = globals.camFarVsp0A04;
        tensor[3] camN0B3F#1 = globals.camN0A05;
        tensor[3] camU0B3E#2 = globals.camU0A06;
        tensor[3] camV0B3D#2 = globals.camV0A07;
        real camVmax0B3C#6 = globals.camVmax0A08;
        real camUmax0B3B#6 = globals.camUmax0A09;
        real _t0B6C#6 = -0.5e0;
        real _t0B6E#3 = IntToReal(ui0B26);
        real _t0B70#3 = IntToReal(iresU0B47);
        real _t0B72#6 = 0.5e0;
        real rayU0B76#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[])<(Neg(T0) + (((T3) - (T2)) / ( ((T4) - (T5)) - (T2)) * (T1) - (Neg(T0))))> (camUmax0B3B,camUmax0B3B,_t0B6C,_t0B6E,_t0B70,_t0B72);
        real _t0B7C#3 = IntToReal(vi0B27);
        real _t0B7E#3 = IntToReal(iresV0B46);
        real rayV0B84#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[])<(Neg(T0) + (((T3) - (T2)) / ( ((T4) - (T5)) - (T2)) * (T1) - (Neg(T0))))> (camVmax0B3C,camVmax0B3C,_t0B6C,_t0B7C,_t0B7E,_t0B72);
        tensor[3] UV0B8A#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[3],T7[],T8[],T9[],T10[],T11[],T12[],T13[3])<(((Neg(T0) + (((T3) - (T2)) / ( ((T4) - (T5)) - (T2)) * (T0) - (Neg(T0)))) * T6_{i0}) + ((Neg(T7) + (((T10) - (T2)) / ( ((T11) - (T5)) - (T2)) * (T7) - (Neg(T7)))) * T13_{i0}))>_{3} (camUmax0B3B,camUmax0B3B,_t0B6C,_t0B6E,_t0B70,_t0B72,camU0B3E,camVmax0B3C,camVmax0B3C,_t0B6C,_t0B7C,_t0B7E,_t0B72,camV0B3D);
        tensor[3] rayOrig0B8C#1 = λ(T0[3],T1[],T2[],T3[],T4[],T5[],T6[],T7[3],T8[],T9[],T10[],T11[],T12[],T13[],T14[3])<(T0_{i0} + ((Neg(T1) + (((T4) - (T3)) / ( ((T5) - (T6)) - (T3)) * (T1) - (Neg(T1)))) * T7_{i0}) + ((Neg(T8) + (((T11) - (T3)) / ( ((T12) - (T6)) - (T3)) * (T8) - (Neg(T8)))) * T14_{i0}))>_{3} (camEye0B48,camUmax0B3B,camUmax0B3B,_t0B6C,_t0B6E,_t0B70,_t0B72,camU0B3E,camVmax0B3C,camVmax0B3C,_t0B6C,_t0B7C,_t0B7E,_t0B72,camV0B3D);
        real _t0B8E#8 = 0.e0;
        tensor[3] _t0B94#1 = <tensor[3]>[_t0B8E,_t0B8E,_t0B8E];
        tensor[3] rayVec0B96#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (camN0B3F,_t0B94);
        int _t0B9C#2 = IMul(ui0B26,iresV0B46);
        int _t0B9E#1 = IAdd(_t0B9C,vi0B27);
        int offset0BA0#2 = Subscript<int[]>(indecies0B43,_t0B9E);
        int _t0BA2#1 = IMul(iresU0B47,iresV0B46);
        int _t0BA6#1 = IAdd(_t0BA2,_t0B9C);
        int _t0BA8#1 = IAdd(_t0BA6,vi0B27);
        int len0BAA#1 = Subscript<int[]>(indecies0B43,_t0BA8);
        int itter0BAC#4 = 0;
        int idx0BB0#2 = IAdd(offset0BA0,itter0BAC);
        tensor[2] interval0BB2#3 = Subscript<tensor[2][]>(times0B42,idx0BB0);
        real s0BB4#1 = TensorIndex<tensor[2],[0]>(interval0BB2);
        real e0BB6#1 = TensorIndex<tensor[2],[1]>(interval0BB2);
        femData:MeshCell cc0BBA#2 = Subscript<femData:MeshCell[]>(0cell_a0B45,itter0BAC);
        int _t0BBD#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc0BBA);
        femData:FuncCell _t0BBF#1 = LoadFem<femData:FuncCell>(c0B44,_t0BBD);
        tensor[4] rgba0BCF#1 = <tensor[4]>[_t0B8E,_t0B8E,_t0B8E,_t0B8E];
        self.rayU = rayU0B76;
        self.rayV = rayV0B84;
        self.UV = UV0B8A;
        self.rayOrig = rayOrig0B8C;
        self.rayVec = rayVec0B96;
        self.camNearVsp = camNearVsp0B41;
        self.camFarVsp = camFarVsp0B40;
        self.offset = offset0BA0;
        self.len = len0BAA;
        self.itter = itter0BAC;
        self.intersectionItter = itter0BAC;
        self.idx = idx0BB0;
        self.interval = interval0BB2;
        self.s = s0BB4;
        self.e = e0BB6;
        self.cc = cc0BBA;
        self.fc = _t0BBF;
        self.out = _t0B8E;
        self.rgba = rgba0BCF;
        return
    end state init
    method start
        ENTRY0C2F:  preds = []
          femData:MeshCell[] 0cell_a0BE8#1 = globals.0cell_a09FF;
          femData:FemFunc c0BE7#1 = globals.c0A01;
          int[] cells0BE6#1 = globals.cells0984;
          int len0BF4#1 = self.len;
          int idx0BF7#1 = self.idx;
          int _t0C12#1 = 0;
          bool _t0C14#1 = EQ<int>(len0BF4,_t0C12);
          if _t0C14 then goto STABILIZE0C17 else goto JOIN0C16
        STABILIZE0C17:  preds = [COND0C21]
          stabilize
          goto JOIN0C16
        JOIN0C16:  preds = [*STABILIZE0C17,COND0C21]
          int _t0C22#1 = Subscript<int[]>(cells0BE6,idx0BF7);
          femData:MeshCell cc0C24#2 = Subscript<femData:MeshCell[]>(0cell_a0BE8,_t0C22);
          int _t0C27#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc0C24);
          femData:FuncCell _t0C29#1 = LoadFem<femData:FuncCell>(c0BE7,_t0C27);
          self.cc = cc0C24;
          self.fc = _t0C29;
          active
    end start
    method update
        ENTRY0F22:  preds = []
          femData:MeshCell[] 0cell_a0C49#1 = globals.0cell_a09FF;
          femData:FemFunc c0C48#1 = globals.c0A01;
          real eps0C47#8 = globals.eps0981;
          tensor[2][] times0C46#1 = globals.times0983;
          int[] cells0C45#1 = globals.cells0984;
          tensor[3] mcnear0C44#2 = globals.mcnear0985;
          tensor[3] mcfar0C43#2 = globals.mcfar0986;
          real cmin0C42#2 = globals.cmin0988;
          real cmax0C41#2 = globals.cmax0989;
          bool light0C40#1 = globals.light098A;
          real phongKa0C3F#1 = globals.phongKa098B;
          real phongKd0C3E#1 = globals.phongKd098C;
          real phongKs0C3D#1 = globals.phongKs098D;
          real phongSp0C3C#1 = globals.phongSp098E;
          tensor[3] L0C3A#3 = globals.L0A0B;
          tensor[3] rayOrig0C5D#3 = self.rayOrig;
          tensor[3] rayVec0C5E#7 = self.rayVec;
          real camNearVsp0C5F#2 = self.camNearVsp;
          real camFarVsp0C60#2 = self.camFarVsp;
          int offset0C61#1 = self.offset;
          int len0C62#1 = self.len;
          int itter0C63#2 = self.itter;
          int intersectionItter0C64#2 = self.intersectionItter;
          real s0C67#19 = self.s;
          real e0C68#20 = self.e;
          femData:MeshCell cc0C69#2 = self.cc;
          femData:FuncCell fc0C6A#2 = self.fc;
          real out0C6B#1 = self.out;
          string _t0C80#1 = "Interval:";
          tensor[2] _t0C82#1 = <tensor[2]>[s0C67,e0C68];
          string _t0C84#10 = "\n";
          Print<[string,tensor[2],string]>(_t0C80,_t0C82,_t0C84);
          string _t0C87#1 = "inner itter:";
          Print<[string,int,string]>(_t0C87,intersectionItter0C64,_t0C84);
          string _t0C8C#1 = "Outer itter:";
          Print<[string,int,string]>(_t0C8C,itter0C63,_t0C84);
          real _t0C91#1 = TensorIndex<tensor[3],[0]>(rayOrig0C5D);
          real _t0C93#1 = TensorIndex<tensor[3],[1]>(rayOrig0C5D);
          tensor[2] _t0C95#3 = <tensor[2]>[_t0C91,_t0C93];
          real _t0C97#1 = TensorIndex<tensor[3],[0]>(rayVec0C5E);
          real _t0C99#1 = TensorIndex<tensor[3],[1]>(rayVec0C5E);
          tensor[2] _t0C9B#3 = <tensor[2]>[_t0C97,_t0C99];
          tensor[2] startRay0C9F#2 = λ(T0[2],T1[],T2[2])<(T0_{i0} + (T1 * T2_{i0}))>_{2} (_t0C95,s0C67,_t0C9B);
          tensor[2] endRay0CAF#1 = λ(T0[2],T1[],T2[2])<(T0_{i0} + (T1 * T2_{i0}))>_{2} (_t0C95,e0C68,_t0C9B);
          femData:Mesh _t0CB1#10 = ExtractFem<femData:Mesh,femData:MeshCell>(cc0C69);
          int _t0CB5#5 = ExtractFemItem<int,CellIndex(MeshCell)>(cc0C69);
          tensor[2] invertA0CB9#16 = λ(INT0,FEM(msh)1,FEM(msh)2,T3[2])<Probe(femInvV(0A7F, 0, 1, 1)_{i0}⊛Basis(),T3)>_{2} (_t0CB5,_t0CB1,_t0CB1,startRay0C9F);
          tensor[2] invertB0CC3#13 = λ(INT0,FEM(msh)1,FEM(msh)2,T3[2])<Probe(femInvV(0A7F, 0, 1, 1)_{i0}⊛Basis(),T3)>_{2} (_t0CB5,_t0CB1,_t0CB1,endRay0CAF);
          string _t0CC5#1 = "inverses:";
          Print<[string,tensor[2],tensor[2],string]>(_t0CC5,invertA0CB9,invertB0CC3,_t0C84);
          femData:FemFunc _t0CCA#34 = ExtractFem<femData:FemFunc,femData:FuncCell>(fc0C6A);
          femData:Space _t0CCE#33 = ExtractFem<femData:Space,femData:FemFunc>(_t0CCA);
          int _t0CD0#33 = ExtractFemItem<int,CellIndex(FuncCell)>(fc0C6A);
          real faVal0CD4#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2])<Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T3)> (_t0CD0,_t0CCE,_t0CCA,invertA0CB9);
          real _t0CD6#29 = TensorIndex<tensor[3],[2]>(rayVec0C5E);
          real _t0CDC#29 = TensorIndex<tensor[3],[2]>(rayOrig0C5D);
          real fa0CDE#5 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[],T5[],T6[])<((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T3)) - ((T4 * T5))) - (T6)> (_t0CD0,_t0CCE,_t0CCA,invertA0CB9,_t0CD6,s0C67,_t0CDC);
          real fb0CF4#2 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[],T5[],T6[])<((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T3)) - ((T4 * T5))) - (T6)> (_t0CD0,_t0CCE,_t0CCA,invertB0CC3,_t0CD6,e0C68,_t0CDC);
          string _t0CF6#1 = "Vals:";
          tensor[2] _t0CF8#1 = <tensor[2]>[fa0CDE,fb0CF4];
          Print<[string,tensor[2],string]>(_t0CF6,_t0CF8,_t0C84);
          real _t0CFF#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[],T5[],T6[],INT7,FEM(fns)8,FEM(func)9,T10[2],T11[],T12[],T13[])<Abs((((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T3)) - ((T4 * T5))) - (T6)) - (((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T10)) - ((T4 * T12))) - (T6)))> (_t0CD0,_t0CCE,_t0CCA,invertA0CB9,_t0CD6,s0C67,_t0CDC,_t0CD0,_t0CCE,_t0CCA,invertB0CC3,_t0CD6,e0C68,_t0CDC);
          bool _t0D01#1 = LT<real>(_t0CFF,eps0C47);
          if _t0D01 then goto ASSIGN0FA9 else goto JOIN0D03
        ASSIGN0FA9:  preds = [COND0D18]
          real _t0D04#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[],T5[],T6[])<Abs(((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T3)) - ((T4 * T5))) - (T6))> (_t0CD0,_t0CCE,_t0CCA,invertA0CB9,_t0CD6,s0C67,_t0CDC);
          bool _t0D06#1 = GT<real>(_t0D04,eps0C47);
          if _t0D06 then goto ASSIGN0D0B else goto JOIN0D08
        ASSIGN0D0B:  preds = [COND0D16]
          real s0D09#1 = λ(T0[],T1[])<(T0 + T1)> (s0C67,eps0C47);
          self.s = s0D09;
          active
          goto JOIN0D08
        JOIN0D08:  preds = [*ACTIVE0D0C,COND0D16]
          real s0D0A#1 = phi(s0C67)
          goto JOIN0D03
        JOIN0D03:  preds = [JOIN0D08,COND0D18]
          real s0D17#7 = phi(s0D0A,s0C67)
          real cup0D21#4 = λ(T0[],INT1,FEM(fns)2,FEM(func)3,T4[2],T5[],T6[],T7[],T8[],INT9,FEM(fns)10,FEM(func)11,T12[2],T13[],T14[],T15[],INT16,FEM(fns)17,FEM(func)18,T19[2],T20[],T21[],T22[],INT23,FEM(fns)24,FEM(func)25,T26[2],T27[],T28[],T29[])<(((T0 * ((Probe(femV(noFunc, 1, 2, 3)⊛Basis(),T4)) - ((T5 * T6))) - (T7))) - ((T6 * ((Probe(femV(noFunc, 1, 2, 3)⊛Basis(),T12)) - ((T5 * T14))) - (T7)))) / ( (((Probe(femV(noFunc, 1, 2, 3)⊛Basis(),T4)) - ((T5 * T6))) - (T7)) - (((Probe(femV(noFunc, 1, 2, 3)⊛Basis(),T12)) - ((T5 * T14))) - (T7)))> (s0D17,_t0CD0,_t0CCE,_t0CCA,invertB0CC3,_t0CD6,e0C68,_t0CDC,e0C68,_t0CD0,_t0CCE,_t0CCA,invertA0CB9,_t0CD6,s0C67,_t0CDC,_t0CD0,_t0CCE,_t0CCA,invertB0CC3,_t0CD6,e0C68,_t0CDC,_t0CD0,_t0CCE,_t0CCA,invertA0CB9,_t0CD6,s0C67,_t0CDC);
          string _t0D23#1 = "Mid time:";
          Print<[string,real,string]>(_t0D23,cup0D21,_t0C84);
          tensor[2] midRay0D36#2 = λ(T0[2],T1[],INT2,FEM(fns)3,FEM(func)4,T5[2],T6[],T7[],T8[],T9[],INT10,FEM(fns)11,FEM(func)12,T13[2],T14[],T15[],T16[],INT17,FEM(fns)18,FEM(func)19,T20[2],T21[],T22[],T23[],INT24,FEM(fns)25,FEM(func)26,T27[2],T28[],T29[],T30[],T31[2])<(T0_{i0} + ((((T1 * ((Probe(femV(noFunc, 2, 3, 4)⊛Basis(),T5)) - ((T6 * T7))) - (T8))) - ((T7 * ((Probe(femV(noFunc, 2, 3, 4)⊛Basis(),T13)) - ((T6 * T15))) - (T8)))) / ( (((Probe(femV(noFunc, 2, 3, 4)⊛Basis(),T5)) - ((T6 * T7))) - (T8)) - (((Probe(femV(noFunc, 2, 3, 4)⊛Basis(),T13)) - ((T6 * T15))) - (T8))) * T31_{i0}))>_{2} (_t0C95,s0D17,_t0CD0,_t0CCE,_t0CCA,invertB0CC3,_t0CD6,e0C68,_t0CDC,e0C68,_t0CD0,_t0CCE,_t0CCA,invertA0CB9,_t0CD6,s0C67,_t0CDC,_t0CD0,_t0CCE,_t0CCA,invertB0CC3,_t0CD6,e0C68,_t0CDC,_t0CD0,_t0CCE,_t0CCA,invertA0CB9,_t0CD6,s0C67,_t0CDC,_t0C9B);
          tensor[2] invertC0D40#4 = λ(INT0,FEM(msh)1,FEM(msh)2,T3[2])<Probe(femInvV(0A7F, 0, 1, 1)_{i0}⊛Basis(),T3)>_{2} (_t0CB5,_t0CB1,_t0CB1,midRay0D36);
          real fmVal0D4C#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2])<Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T3)> (_t0CD0,_t0CCE,_t0CCA,invertC0D40);
          real fm0D56#4 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[],T5[],INT6,FEM(fns)7,FEM(func)8,T9[2],T10[],T11[],T12[],T13[],INT14,FEM(fns)15,FEM(func)16,T17[2],T18[],T19[],T20[],INT21,FEM(fns)22,FEM(func)23,T24[2],T25[],T26[],T27[],INT28,FEM(fns)29,FEM(func)30,T31[2],T32[],T33[],T34[],T35[])<((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T3)) - ((T4 * (((T5 * ((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T9)) - ((T4 * T11))) - (T12))) - ((T11 * ((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T17)) - ((T4 * T19))) - (T12)))) / ( (((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T9)) - ((T4 * T11))) - (T12)) - (((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T17)) - ((T4 * T19))) - (T12)))))) - (T35)> (_t0CD0,_t0CCE,_t0CCA,invertC0D40,_t0CD6,s0D17,_t0CD0,_t0CCE,_t0CCA,invertB0CC3,_t0CD6,e0C68,_t0CDC,e0C68,_t0CD0,_t0CCE,_t0CCA,invertA0CB9,_t0CD6,s0C67,_t0CDC,_t0CD0,_t0CCE,_t0CCA,invertB0CC3,_t0CD6,e0C68,_t0CDC,_t0CD0,_t0CCE,_t0CCA,invertA0CB9,_t0CD6,s0C67,_t0CDC,_t0CDC);
          string _t0D58#1 = "all vals:";
          tensor[3] _t0D5A#1 = <tensor[3]>[fa0CDE,fm0D56,fb0CF4];
          Print<[string,tensor[3],string]>(_t0D58,_t0D5A,_t0C84);
          int _t0D5F#6 = 1;
          int intersectionItter0D61#2 = IAdd(intersectionItter0C64,_t0D5F);
          real _t0D64#10 = 0.e0;
          bool _t0D66#2 = GT<real>(fa0CDE,_t0D64);
          if _t0D66 then goto JOIN0D68 else goto ASSIGN0F66
        JOIN0D68:  preds = [COND0D7D,JOIN0D72]
          int _t0D6C#1 = phi(_t0D5F,_t0D76)
          bool _t0D81#2 = GT<real>(fm0D56,_t0D64);
          if _t0D81 then goto JOIN0D83 else goto ASSIGN0F68
        JOIN0D83:  preds = [COND0D98,JOIN0D8D]
          int _t0D87#1 = phi(_t0D5F,_t0D91)
          int _t0D99#1 = IMul(_t0D6C,_t0D87);
          int _t0D9B#7 = 0;
          bool _t0D9D#1 = LT<int>(_t0D99,_t0D9B);
          if _t0D9D then goto JOIN0D9F else goto COND0DBD
        JOIN0D9F:  preds = [COND0DE5,JOIN0DDF]
          real e0DA1#4 = phi(cup0D21,e0C68)
          real s0DE4#5 = phi(s0D17,s0DE1)
          string _t0DE6#1 = "new interval:";
          tensor[2] _t0DE8#1 = <tensor[2]>[s0DE4,e0DA1];
          Print<[string,tensor[2],string]>(_t0DE6,_t0DE8,_t0C84);
          real _t0DEE#2 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[],T5[],T6[])<Abs(((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T3)) - ((T4 * T5))) - (T6))> (_t0CD0,_t0CCE,_t0CCA,invertA0CB9,_t0CD6,s0C67,_t0CDC);
          bool _t0DF0#2 = LT<real>(_t0DEE,eps0C47);
          if _t0DF0 then goto ASSIGN0DF5 else goto ASSIGN0FCA
        ASSIGN0DF5:  preds = [COND0E06]
          bool _t0DF3#1 = true;
          goto JOIN0DF2
        JOIN0DF2:  preds = [ASSIGN0DF5,JOIN0DFB]
          bool _t0DF4#1 = phi(_t0DF3,_t0DFD)
          if _t0DF4 then goto ASSIGN0FB7 else goto ASSIGN0F1F
        ASSIGN0FB7:  preds = [COND0F21]
          real _t0E0C#2 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[],T5[],INT6,FEM(fns)7,FEM(func)8,T9[2],T10[],T11[],T12[],T13[],INT14,FEM(fns)15,FEM(func)16,T17[2],T18[],T19[],T20[],INT21,FEM(fns)22,FEM(func)23,T24[2],T25[],T26[],T27[],INT28,FEM(fns)29,FEM(func)30,T31[2],T32[],T33[],T34[],T35[])<Abs(((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T3)) - ((T4 * (((T5 * ((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T9)) - ((T4 * T11))) - (T12))) - ((T11 * ((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T17)) - ((T4 * T19))) - (T12)))) / ( (((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T9)) - ((T4 * T11))) - (T12)) - (((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T17)) - ((T4 * T19))) - (T12)))))) - (T12))> (_t0CD0,_t0CCE,_t0CCA,invertC0D40,_t0CD6,s0D17,_t0CD0,_t0CCE,_t0CCA,invertB0CC3,_t0CD6,e0C68,_t0CDC,e0C68,_t0CD0,_t0CCE,_t0CCA,invertA0CB9,_t0CD6,s0C67,_t0CDC,_t0CD0,_t0CCE,_t0CCA,invertB0CC3,_t0CD6,e0C68,_t0CDC,_t0CD0,_t0CCE,_t0CCA,invertA0CB9,_t0CD6,s0C67,_t0CDC,_t0CDC);
          bool _t0E0E#1 = GT<real>(_t0E0C,eps0C47);
          if _t0E0E then goto ASSIGN0F6D else goto ASSIGN0E17
        ASSIGN0F6D:  preds = [COND0E18]
          bool _t0E13#1 = GT<real>(_t0DEE,eps0C47);
          goto JOIN0E10
        JOIN0E10:  preds = [ASSIGN0F6D,ASSIGN0E17]
          bool _t0E14#1 = phi(_t0E13,_t0E16)
          if _t0E14 then goto ASSIGN0F7B else goto ASSIGN0F6E
        ASSIGN0F7B:  preds = [COND0F1D]
          int itter0E1C#4 = IAdd(itter0C63,_t0D5F);
          bool _t0E1F#1 = GTE<int>(itter0E1C,len0C62);
          if _t0E1F then goto ASSIGN0E23 else goto JOIN0E21
        ASSIGN0E23:  preds = [COND0E2F]
          string _t0E22#1 = "Fin pixel=============================\n";
          Print<[string]>(_t0E22);
          self.itter = itter0E1C;
          self.intersectionItter = _t0D9B;
          self.s = s0DE4;
          self.e = e0DA1;
          stabilize
          goto JOIN0E21
        JOIN0E21:  preds = [*STABILIZE0E25,COND0E2F]
          int _t0E30#2 = IAdd(offset0C61,itter0E1C);
          tensor[2] interval0E32#3 = Subscript<tensor[2][]>(times0C46,_t0E30);
          int _t0E37#1 = Subscript<int[]>(cells0C45,_t0E30);
          femData:MeshCell cc0E39#2 = Subscript<femData:MeshCell[]>(0cell_a0C49,_t0E37);
          real s0E3C#1 = TensorIndex<tensor[2],[0]>(interval0E32);
          real e0E3F#1 = TensorIndex<tensor[2],[1]>(interval0E32);
          int _t0E43#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc0E39);
          femData:FuncCell _t0E45#1 = LoadFem<femData:FuncCell>(c0C48,_t0E43);
          string _t0E4C#1 = "Next interval!\n";
          Print<[string]>(_t0E4C);
          self.itter = itter0E1C;
          self.intersectionItter = _t0D9B;
          self.interval = interval0E32;
          self.s = s0E3C;
          self.e = e0E3F;
          self.cc = cc0E39;
          self.fc = _t0E45;
          active
          goto JOIN0E19
        JOIN0E19:  preds = [*ACTIVE0E4F,*STABILIZE0F13]
          goto JOIN0E07
        JOIN0E07:  preds = [*JOIN0E19,MASSIGN0F20]
          int intersectionItter0E09#1 = phi(intersectionItter0D61)
          self.intersectionItter = intersectionItter0E09;
          self.s = s0DE4;
          self.e = e0DA1;
          active
        ASSIGN0F6E:  preds = [COND0F1D]
          tensor[2] grad0E5D#1 = <tensor[2]>[_t0D64,_t0D64];
          bool _t0E61#1 = LT<real>(_t0E0C,eps0C47);
          if _t0E61 then goto ASSIGN0FBA else goto JOIN0E63
        ASSIGN0FBA:  preds = [COND0E80]
          tensor[2] grad0E7A#1 = λ(INT0,FEM(fns)1,FEM(func)2,INT3,FEM(msh)4,FEM(msh)5,T6[2])<Σ(i104=0..1)<((Probe(Cmp(femV(noFunc, 0, 1, 2)⊛Basis()dx_{i104})[femInvV(0A7F, 3, 4, 4)_{i0}⊛Basis(){2}],T6) * (Σ(i114=0..1)<((ϵ_{ii114,ii104} * Σ(i116=0..1)<((ϵ_{ii116,ii0} * Probe(femV(0A7F, 3, 4, 4)_{i116}⊛Basis()dx_{i114},T6)))>(i116=0..1)))>(i114=0..1)) / ( Σ(i112=0..1)<((Probe(femV(0A7F, 3, 4, 4)_{i112}⊛Basis()dx_{'0'},T6) * Σ(i113=0..1)<((ϵ_{ii112,ii113} * Probe(femV(0A7F, 3, 4, 4)_{i113}⊛Basis()dx_{'1'},T6)))>(i113=0..1)))>(i112=0..1))))>(i104=0..1)>_{2} (_t0CD0,_t0CCE,_t0CCA,_t0CB5,_t0CB1,_t0CB1,midRay0D36);
          goto JOIN0E63
        JOIN0E63:  preds = [ASSIGN0FBA,COND0E80]
          tensor[2] grad0E7B#1 = phi(grad0E7A,grad0E5D)
          real out0E7E#1 = phi(fmVal0D4C,out0C6B)
          if _t0DF0 then goto ASSIGN0FBD else goto JOIN0E86
        ASSIGN0FBD:  preds = [COND0EA6]
          tensor[2] grad0EA0#1 = λ(INT0,FEM(fns)1,FEM(func)2,INT3,FEM(msh)4,FEM(msh)5,T6[2])<Σ(i104=0..1)<((Probe(Cmp(femV(noFunc, 0, 1, 2)⊛Basis()dx_{i104})[femInvV(0A7F, 3, 4, 4)_{i0}⊛Basis(){2}],T6) * (Σ(i114=0..1)<((ϵ_{ii114,ii104} * Σ(i116=0..1)<((ϵ_{ii116,ii0} * Probe(femV(0A7F, 3, 4, 4)_{i116}⊛Basis()dx_{i114},T6)))>(i116=0..1)))>(i114=0..1)) / ( Σ(i112=0..1)<((Probe(femV(0A7F, 3, 4, 4)_{i112}⊛Basis()dx_{'0'},T6) * Σ(i113=0..1)<((ϵ_{ii112,ii113} * Probe(femV(0A7F, 3, 4, 4)_{i113}⊛Basis()dx_{'1'},T6)))>(i113=0..1)))>(i112=0..1))))>(i104=0..1)>_{2} (_t0CD0,_t0CCE,_t0CCA,_t0CB5,_t0CB1,_t0CB1,startRay0C9F);
          goto JOIN0E86
        JOIN0E86:  preds = [ASSIGN0FBD,COND0EA6]
          tensor[2] grad0EA1#3 = phi(grad0EA0,grad0E7B)
          real cup0E88#2 = phi(s0DE4,cup0D21)
          real out0EA4#3 = phi(faVal0CD4,out0E7E)
          string _t0EA8#1 = "Out val:";
          Print<[string,real,string]>(_t0EA8,out0EA4,_t0C84);
          string _t0EAD#1 = "Grad val:";
          Print<[string,tensor[2],string]>(_t0EAD,grad0EA1,_t0C84);
          real _t0EB2#6 = 0.1e1;
          tensor[3] mcol0EB8#1 = <tensor[3]>[_t0EB2,_t0EB2,_t0EB2];
          bool _t0EBA#1 = NEQ<real>(cmin0C42,cmax0C41);
          if _t0EBA then goto ASSIGN0EBE else goto JOIN0EBC
        ASSIGN0EBE:  preds = [COND0EC8]
          int _t0EBD#1 = -1;
          real _t0EBF#1 = IntToReal(_t0EBD);
          real _t0EC3#1 = λ(T0[],T1[],T2[],T3[],T4[])<(T0 + (((T3) - (T2)) / ( (T4) - (T2)) * (T1) - (T0)))> (_t0EBF,_t0EB2,cmin0C42,out0EA4,cmax0C41);
          tensor[3] mcol0EC5#1 = λ(V0(1)[3],H1,T2[1])<Probe(V0_{i0}⊛H1,T2)>_{3} (img0AF9,_t0AF7,_t0EC3);
          goto JOIN0EBC
        JOIN0EBC:  preds = [ASSIGN0FBE,COND0EC8]
          tensor[3] mcol0EC6#5 = phi(mcol0EC5,mcol0EB8)
          if light0C40 then goto ASSIGN0ECB else goto ASSIGN0F08
        ASSIGN0ECB:  preds = [COND0F11]
          real _t0ECA#1 = TensorIndex<tensor[2],[0]>(grad0EA1);
          real _t0ECC#1 = TensorIndex<tensor[2],[1]>(grad0EA1);
          int _t0ECE#1 = -1;
          real _t0ED0#1 = IntToReal(_t0ECE);
          tensor[3] N0ED2#2 = <tensor[3]>[_t0ECA,_t0ECC,_t0ED0];
          real _t0EE6#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (N0ED2,L0C3A);
          real _t0EE8#1 = Max<real>(_t0D64,_t0EE6);
          real _t0EF0#1 = λ(T0[3],T1[3],T2[3],T3[3],T4[3],T5[3],T6[3])<Σ(i0=0..2)<((T0_{i0} * (Neg((T1_{i0} * (1) / ( Sqrt(Σ(i4=0..2)<((T1_{i4} * T1_{i4}))>(i4=0..2))))) + T3_{i0}) * (1) / ( Sqrt(Σ(i1=0..2)<(((Neg((T1_{i1} * (1) / ( Sqrt(Σ(i4=0..2)<((T1_{i4} * T1_{i4}))>(i4=0..2))))) + T3_{i1}) * (Neg((T1_{i1} * (1) / ( Sqrt(Σ(i4=0..2)<((T1_{i4} * T1_{i4}))>(i4=0..2))))) + T3_{i1})))>(i1=0..2)))))>(i0=0..2)> (N0ED2,rayVec0C5E,rayVec0C5E,L0C3A,rayVec0C5E,rayVec0C5E,L0C3A);
          real _t0EF2#1 = Max<real>(_t0D64,_t0EF0);
          real _t0EF4#1 = MathFn<pow>(_t0EF2,phongSp0C3C);
          tensor[3] fin0EFA#3 = λ(T0[],T1[3],T2[],T3[],T4[3],T5[3],T6[3],T7[],T8[],T9[],T10[],T11[],T12[3],T13[3],T14[],T15[],T16[])<((T0 * T1_{i0}) + (T2 * T3 * T1_{i0} * (T5_{i0} + (((T8) - (T7)) / ( (T9) - (T7)) * (T6_{i0}) - (T5_{i0})))) + (T10 * T11 * (T5_{i0} + (((T8) - (T7)) / ( (T9) - (T7)) * (T6_{i0}) - (T5_{i0})))))>_{3} (phongKa0C3F,mcol0EC6,_t0EE8,phongKd0C3E,mcol0EC6,mcnear0C44,mcfar0C43,camNearVsp0C5F,cup0E88,camFarVsp0C60,_t0EF4,phongKs0C3D,mcnear0C44,mcfar0C43,camNearVsp0C5F,cup0E88,camFarVsp0C60);
          real _t0EFC#1 = TensorIndex<tensor[3],[0]>(fin0EFA);
          real _t0EFE#1 = TensorIndex<tensor[3],[1]>(fin0EFA);
          real _t0F00#1 = TensorIndex<tensor[3],[2]>(fin0EFA);
          tensor[4] rgba0F04#1 = <tensor[4]>[_t0EFC,_t0EFE,_t0F00,_t0EB2];
          goto JOIN0EC9
        JOIN0EC9:  preds = [ASSIGN0F79,ASSIGN0F76]
          tensor[4] rgba0F05#1 = phi(rgba0F04,rgba0F0F)
          self.intersectionItter = _t0D9B;
          self.s = s0DE4;
          self.e = e0DA1;
          self.out = out0EA4;
          self.rgba = rgba0F05;
          stabilize
          goto JOIN0E19
        ASSIGN0F08:  preds = [COND0F11]
          real _t0F07#1 = TensorIndex<tensor[3],[0]>(mcol0EC6);
          real _t0F09#1 = TensorIndex<tensor[3],[1]>(mcol0EC6);
          real _t0F0B#1 = TensorIndex<tensor[3],[2]>(mcol0EC6);
          tensor[4] rgba0F0F#1 = <tensor[4]>[_t0F07,_t0F09,_t0F0B,_t0EB2];
          goto JOIN0EC9
        ASSIGN0E17:  preds = [COND0E18]
          bool _t0E16#1 = false;
          goto JOIN0E10
        ASSIGN0F1F:  preds = [COND0F21]
          string _t0F1E#1 = "=========\n";
          Print<[string]>(_t0F1E);
          goto JOIN0E07
        ASSIGN0FCA:  preds = [COND0E06]
          real _t0DF7#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[],T5[],INT6,FEM(fns)7,FEM(func)8,T9[2],T10[],T11[],T12[],T13[],INT14,FEM(fns)15,FEM(func)16,T17[2],T18[],T19[],T20[],INT21,FEM(fns)22,FEM(func)23,T24[2],T25[],T26[],T27[],INT28,FEM(fns)29,FEM(func)30,T31[2],T32[],T33[],T34[],T35[])<Abs(((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T3)) - ((T4 * (((T5 * ((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T9)) - ((T4 * T11))) - (T12))) - ((T11 * ((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T17)) - ((T4 * T19))) - (T12)))) / ( (((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T9)) - ((T4 * T11))) - (T12)) - (((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T17)) - ((T4 * T19))) - (T12)))))) - (T12))> (_t0CD0,_t0CCE,_t0CCA,invertC0D40,_t0CD6,s0D17,_t0CD0,_t0CCE,_t0CCA,invertB0CC3,_t0CD6,e0C68,_t0CDC,e0C68,_t0CD0,_t0CCE,_t0CCA,invertA0CB9,_t0CD6,s0C67,_t0CDC,_t0CD0,_t0CCE,_t0CCA,invertB0CC3,_t0CD6,e0C68,_t0CDC,_t0CD0,_t0CCE,_t0CCA,invertA0CB9,_t0CD6,s0C67,_t0CDC,_t0CDC);
          bool _t0DF9#1 = LT<real>(_t0DF7,eps0C47);
          if _t0DF9 then goto ASSIGN0DFE else goto ASSIGN0E00
        ASSIGN0DFE:  preds = [COND0E03]
          bool _t0DFC#1 = true;
          goto JOIN0DFB
        JOIN0DFB:  preds = [ASSIGN0DFE,ASSIGN0E02]
          bool _t0DFD#1 = phi(_t0DFC,_t0E01)
          goto JOIN0DF2
        ASSIGN0E00:  preds = [COND0E03]
          int _t0DFF#1 = 32;
          bool _t0E01#1 = GT<int>(intersectionItter0D61,_t0DFF);
          goto JOIN0DFB
        COND0DBD:  preds = [COND0DE5]
          if _t0D66 then goto JOIN0DA8 else goto ASSIGN0F69
        JOIN0DA8:  preds = [COND0DBD,JOIN0DB2]
          int _t0DAC#1 = phi(_t0D5F,_t0DB6)
          if _t0D81 then goto JOIN0DC3 else goto ASSIGN0F6A
        JOIN0DC3:  preds = [COND0DD8,JOIN0DCD]
          int _t0DC7#1 = phi(_t0D5F,_t0DD1)
          int _t0DD9#1 = IMul(_t0DAC,_t0DC7);
          bool _t0DDD#1 = GT<int>(_t0DD9,_t0D9B);
          if _t0DDD then goto JOIN0DDF else goto JOIN0DDF
        JOIN0DDF:  preds = [COND0DE3,COND0DE3]
          real s0DE1#1 = phi(cup0D21,s0D17)
          goto JOIN0D9F
        ASSIGN0F6A:  preds = [COND0DD8]
          bool _t0DCB#1 = LT<real>(fm0D56,_t0D64);
          if _t0DCB then goto ASSIGN0DCF else goto JOIN0DCD
        ASSIGN0DCF:  preds = [COND0DD7]
          int _t0DCE#1 = -1;
          goto JOIN0DCD
        JOIN0DCD:  preds = [ASSIGN0DCF,COND0DD7]
          int _t0DD1#1 = phi(_t0DCE,_t0D9B)
          goto JOIN0DC3
        ASSIGN0F69:  preds = [COND0DBD]
          bool _t0DB0#1 = LT<real>(fa0CDE,_t0D64);
          if _t0DB0 then goto ASSIGN0DB4 else goto JOIN0DB2
        ASSIGN0DB4:  preds = [COND0DBC]
          int _t0DB3#1 = -1;
          goto JOIN0DB2
        JOIN0DB2:  preds = [ASSIGN0DB4,COND0DBC]
          int _t0DB6#1 = phi(_t0DB3,_t0D9B)
          goto JOIN0DA8
        ASSIGN0F68:  preds = [COND0D98]
          bool _t0D8B#1 = LT<real>(fm0D56,_t0D64);
          if _t0D8B then goto ASSIGN0D8F else goto ASSIGN0D94
        ASSIGN0D8F:  preds = [COND0D97]
          int _t0D8E#1 = -1;
          goto JOIN0D8D
        JOIN0D8D:  preds = [ASSIGN0D8F,ASSIGN0D94]
          int _t0D91#1 = phi(_t0D8E,_t0D93)
          goto JOIN0D83
        ASSIGN0D94:  preds = [COND0D97]
          int _t0D93#1 = 0;
          goto JOIN0D8D
        ASSIGN0F66:  preds = [COND0D7D]
          bool _t0D70#1 = LT<real>(fa0CDE,_t0D64);
          if _t0D70 then goto ASSIGN0D74 else goto ASSIGN0D79
        ASSIGN0D74:  preds = [COND0D7C]
          int _t0D73#1 = -1;
          goto JOIN0D72
        JOIN0D72:  preds = [ASSIGN0D74,ASSIGN0D79]
          int _t0D76#1 = phi(_t0D73,_t0D78)
          goto JOIN0D68
        ASSIGN0D79:  preds = [COND0D7C]
          int _t0D78#1 = 0;
          goto JOIN0D72
    end update
  end ray
## initial strand creation
  GRID(2)
    ENTRY0B24:  preds = []
      int iresU0B0A#1 = globals.iresU0978;
      int iresV0B09#1 = globals.iresV0979;
      int _t0B0D#2 = 0;
      int _t0B0F#2 = 1;
      int _t0B11#1 = ISub(iresU0B0A,_t0B0F);
      int[] _t0B13#1 = Range(_t0B0D,_t0B11);
    FOREACH0B16:  preds = [ASSIGN0B14,NEXT0B23]
      foreach (vi0B15 in _t0B13) on exit goto RETURN0B25
      int _t0B1B#1 = ISub(iresV0B09,_t0B0F);
      int[] _t0B1D#1 = Range(_t0B0D,_t0B1B);
    FOREACH0B20:  preds = [ASSIGN0F2E,NEXT0B22]
      foreach (ui0B1F in _t0B1D) on exit goto NEXT0B23
      new ray(ui0B1F,vi0B15);
      goto FOREACH0B20
    NEXT0B23:  preds = [FOREACH0B20]
      goto FOREACH0B16
    RETURN0B25:  preds = [FOREACH0B16]
      return
#### end program ####
promote img0AF9 --> globals.img0FCC
promote _t0AF7 --> globals._t0FCF
##### high-ir: after normalization promotion ####
## properties
  GlobalInit StrandArray HasStartMethod ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[]) HasInputs HasGlobals
## globals
  input isoval0972 (isoval) = <default>
  input thick0973 (thick) = <default>
  input camEye0974 (camEye) = <default>
  input camAt0975 (camAt) = <default>
  input camUp0976 (camUp) = <default>
  input camFOV0977 (camFOV) = <default>
  input iresU0978 (iresU) = <default>
  input iresV0979 (iresV) = <default>
  input camNear097A (camNear) = <default>
  input camFar097B (camFar) = <default>
  input refStep097C (refStep) = <default>
  input rayStep097D (rayStep) = <default>
  input a097E (a) = <no-default>
  input 0b0472_intermedateGlobal097F (b) = <no-default>
  input 0c0474_intermedateGlobal0980 (c) = <no-default>
  input eps0981 (eps) = <default>
  input indecies0982 (indecies) = <no-default>
  input times0983 (times) = <no-default>
  input cells0984 (cells) = <no-default>
  input mcnear0985 (mcnear) = <default>
  input mcfar0986 (mcfar) = <default>
  input cmap0987 (cmap) = image("/home/teocollin/gitcode/diderot/tests/lipRay/find/cmap.nrrd")
  input cmin0988 (cmin) = <default>
  input cmax0989 (cmax) = <default>
  input light098A (light) = <default>
  input phongKa098B (phongKa) = <default>
  input phongKd098C (phongKd) = <default>
  input phongKs098D (phongKs) = <default>
  input phongSp098E (phongSp) = <default>
  input maxAlpha098F (maxAlpha) = <default>
  input lightVsp0990 (lightVsp) = <default>
  global femData:MeshCell[] 0cell_a09FF
  global femData:FemFunc c0A01
  global real camNearVsp0A03
  global real camFarVsp0A04
  global tensor[3] camN0A05
  global tensor[3] camU0A06
  global tensor[3] camV0A07
  global real camVmax0A08
  global real camUmax0A09
  global tensor[3] L0A0B
  global image(IMAGE1D<double[3]>) img0FCC
  global kernel _t0FCF
## functions
  function femData:MeshPos _msh_newtonInverse0A7F (tensor[2] pos0A0C#6, int cellInt0A0D#11, femData:Mesh mesh0A0E#23) {
    ENTRY0A7E:  preds = []
      real _t0A0F#2 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
      tensor[2] xn0A13#6 = <tensor[2]>[_t0A0F,_t0A0F];
      int _t0A23#1 = 0;
      int _t0A25#1 = 16;
      int[] _t0A27#1 = Range(_t0A23,_t0A25);
    FOREACH0A2B:  preds = [ASSIGN0A28,NEXT0A7A]
      foreach (itter0A29 in _t0A27) on exit goto ASSIGN0A7C
        tensor[2] xn0A2A#8 = phi(xn0A13,xn0A34)
      tensor[2] xn0A34#2 = λ(T0[2],INT1,FEM(msh)2,FEM(msh)3,T4[2],T5[2],INT6,FEM(msh)7,FEM(msh)8,T9[2])<(T0_{i0}) - (Σ(i3=0..1)<(((Σ(i10=0..1)<((ϵ_{ii10,ii0} * Σ(i12=0..1)<((ϵ_{ii12,ii3} * Probe(femV(noFunc, 1, 2, 2)_{i12}⊛Basis()dx_{i10},T4)))>(i12=0..1)))>(i10=0..1)) / ( Σ(i8=0..1)<((Probe(femV(noFunc, 1, 2, 2)_{i8}⊛Basis()dx_{'0'},T4) * Σ(i9=0..1)<((ϵ_{ii8,ii9} * Probe(femV(noFunc, 1, 2, 2)_{i9}⊛Basis()dx_{'1'},T4)))>(i9=0..1)))>(i8=0..1)) * (Probe(femV(noFunc, 1, 2, 2)_{i3}⊛Basis(),T0)) - (T5_{i3})))>(i3=0..1))>_{2} (xn0A2A,cellInt0A0D,mesh0A0E,mesh0A0E,xn0A13,pos0A0C,cellInt0A0D,mesh0A0E,mesh0A0E,xn0A2A);
      real _t0A36#2 = 0.1e-7;
      real _t0A3A#1 = λ(T0[],T1[])<(T0 * T1)> (_t0A36,_t0A36);
      real _t0A3C#1 = λ(INT0,FEM(msh)1,FEM(msh)2,T3[2],T4[2],INT5,FEM(msh)6,FEM(msh)7,T8[2],INT9,FEM(msh)10,FEM(msh)11,T12[2],T13[2],INT14,FEM(msh)15,FEM(msh)16,T17[2])<Σ(i0=0..1)<((Σ(i2=0..1)<(((Σ(i9=0..1)<((ϵ_{ii9,ii0} * Σ(i11=0..1)<((ϵ_{ii11,ii2} * Probe(femV(noFunc, 0, 1, 1)_{i11}⊛Basis()dx_{i9},T3)))>(i11=0..1)))>(i9=0..1)) / ( Σ(i7=0..1)<((Probe(femV(noFunc, 0, 1, 1)_{i7}⊛Basis()dx_{'0'},T3) * Σ(i8=0..1)<((ϵ_{ii7,ii8} * Probe(femV(noFunc, 0, 1, 1)_{i8}⊛Basis()dx_{'1'},T3)))>(i8=0..1)))>(i7=0..1)) * (Probe(femV(noFunc, 0, 1, 1)_{i2}⊛Basis(),T8)) - (T4_{i2})))>(i2=0..1) * Σ(i10=0..1)<(((Σ(i17=0..1)<((ϵ_{ii17,ii0} * Σ(i19=0..1)<((ϵ_{ii19,ii10} * Probe(femV(noFunc, 0, 1, 1)_{i19}⊛Basis()dx_{i17},T3)))>(i19=0..1)))>(i17=0..1)) / ( Σ(i15=0..1)<((Probe(femV(noFunc, 0, 1, 1)_{i15}⊛Basis()dx_{'0'},T3) * Σ(i16=0..1)<((ϵ_{ii15,ii16} * Probe(femV(noFunc, 0, 1, 1)_{i16}⊛Basis()dx_{'1'},T3)))>(i16=0..1)))>(i15=0..1)) * (Probe(femV(noFunc, 0, 1, 1)_{i10}⊛Basis(),T8)) - (T4_{i10})))>(i10=0..1)))>(i0=0..1)> (cellInt0A0D,mesh0A0E,mesh0A0E,xn0A13,pos0A0C,cellInt0A0D,mesh0A0E,mesh0A0E,xn0A2A,cellInt0A0D,mesh0A0E,mesh0A0E,xn0A13,pos0A0C,cellInt0A0D,mesh0A0E,mesh0A0E,xn0A2A);
      bool _t0A3E#1 = GTE<real>(_t0A3A,_t0A3C);
      if _t0A3E then goto ASSIGN0A42 else goto JOIN0A40
    ASSIGN0A42:  preds = [COND0A79]
      real _t0A41#3 = 0.1e1;
      real _t0A43#3 = 0.1e-8;
      real _t0A45#1 = λ(T0[],T1[])<(T0 + T1)> (_t0A41,_t0A43);
      tensor[2] _t0A4B#1 = <tensor[2]>[_t0A41,_t0A41];
      real _t0A4D#1 = λ(T0[2],T1[2],INT2,FEM(msh)3,FEM(msh)4,T5[2],T6[2],INT7,FEM(msh)8,FEM(msh)9,T10[2])<Σ(i0=0..1)<((T0_{i0} * (T1_{i0}) - (Σ(i3=0..1)<(((Σ(i10=0..1)<((ϵ_{ii10,ii0} * Σ(i12=0..1)<((ϵ_{ii12,ii3} * Probe(femV(noFunc, 2, 3, 3)_{i12}⊛Basis()dx_{i10},T5)))>(i12=0..1)))>(i10=0..1)) / ( Σ(i8=0..1)<((Probe(femV(noFunc, 2, 3, 3)_{i8}⊛Basis()dx_{'0'},T5) * Σ(i9=0..1)<((ϵ_{ii8,ii9} * Probe(femV(noFunc, 2, 3, 3)_{i9}⊛Basis()dx_{'1'},T5)))>(i9=0..1)))>(i8=0..1)) * (Probe(femV(noFunc, 2, 3, 3)_{i3}⊛Basis(),T1)) - (T6_{i3})))>(i3=0..1))))>(i0=0..1)> (_t0A4B,xn0A2A,cellInt0A0D,mesh0A0E,mesh0A0E,xn0A13,pos0A0C,cellInt0A0D,mesh0A0E,mesh0A0E,xn0A2A);
      bool _t0A4F#1 = GT<real>(_t0A45,_t0A4D);
      tensor[2] _t0A55#1 = <tensor[2]>[_t0A43,_t0A43];
      tensor[2] _t0A57#2 = λ(T0[2],T1[2],INT2,FEM(msh)3,FEM(msh)4,T5[2],T6[2],INT7,FEM(msh)8,FEM(msh)9,T10[2])<(T0_{i0} + (T1_{i0}) - (Σ(i4=0..1)<(((Σ(i11=0..1)<((ϵ_{ii11,ii0} * Σ(i13=0..1)<((ϵ_{ii13,ii4} * Probe(femV(noFunc, 2, 3, 3)_{i13}⊛Basis()dx_{i11},T5)))>(i13=0..1)))>(i11=0..1)) / ( Σ(i9=0..1)<((Probe(femV(noFunc, 2, 3, 3)_{i9}⊛Basis()dx_{'0'},T5) * Σ(i10=0..1)<((ϵ_{ii9,ii10} * Probe(femV(noFunc, 2, 3, 3)_{i10}⊛Basis()dx_{'1'},T5)))>(i10=0..1)))>(i9=0..1)) * (Probe(femV(noFunc, 2, 3, 3)_{i4}⊛Basis(),T1)) - (T6_{i4})))>(i4=0..1)))>_{2} (_t0A55,xn0A2A,cellInt0A0D,mesh0A0E,mesh0A0E,xn0A13,pos0A0C,cellInt0A0D,mesh0A0E,mesh0A0E,xn0A2A);
      real _t0A59#1 = TensorIndex<tensor[2],[0]>(_t0A57);
      real _t0A5B#2 = -0.e0;
      bool _t0A5D#1 = GT<real>(_t0A59,_t0A5B);
      real _t0A67#1 = TensorIndex<tensor[2],[1]>(_t0A57);
      bool _t0A6B#1 = GT<real>(_t0A67,_t0A5B);
      bool _t0A6D#1 = BAnd(_t0A5D,_t0A6B);
      bool _t0A6F#1 = BAnd(_t0A4F,_t0A6D);
      if _t0A6F then goto ASSIGN0A73 else goto ASSIGN0A76
    ASSIGN0A73:  preds = [COND0A78]
      femData:MeshPos _t0A72#1 = ExtractFemItemN<[femData:Mesh,int,tensor[2],tensor[2]],femData:MeshPos,AllBuild(MeshPos),0000,"",[],int>(mesh0A0E,cellInt0A0D,xn0A34,pos0A0C);
      return _t0A72
      goto JOIN0A71
    JOIN0A71:  preds = [*RETURN(_t0A72)0A74,*RETURN(_t0A75)0A77]
      goto JOIN0A40
    JOIN0A40:  preds = [*JOIN0A71,COND0A79]
      goto FOREACH0A2B
    ASSIGN0A76:  preds = [COND0A78]
      femData:MeshPos _t0A75#1 = ExtractFemItemN<[femData:Mesh],femData:MeshPos,InvalidBuild(MeshPos),0000,"",[],int>(mesh0A0E);
      return _t0A75
      goto JOIN0A71
    ASSIGN0A7C:  preds = [FOREACH0A2B]
      femData:MeshPos _t0A7B#1 = ExtractFemItemN<[femData:Mesh],femData:MeshPos,InvalidBuild(MeshPos),0000,"",[],int>(mesh0A0E);
      return _t0A7B
}
  function int[2] nextCell40A91 (int faceIdx0A80#1, int cell0A81#1, femData:Mesh mesh0A82#1) {
    ENTRY0A90:  preds = []
      int _t0A83#1 = 6;
      int _t0A85#1 = IMul(cell0A81,_t0A83);
      int _t0A87#1 = 2;
      int _t0A89#1 = IMul(faceIdx0A80,_t0A87);
      int _t0A8B#1 = IAdd(_t0A85,_t0A89);
      int[2] _t0A8D#1 = ExtractFemItemN<[femData:Mesh,int],int[2],CellFaceCell(Mesh),0000,"",[],int>(mesh0A82,_t0A8B);
      return _t0A8D
}
## input initialization
  ENTRY09FD:  preds = []
    real isoval0991#1 = 0.2e0;
    globals.isoval0972 = isoval0991;
    real thick0994#1 = 0.7e-1;
    globals.thick0973 = thick0994;
    real _t0997#2 = 0.3e1;
    real _t0999#1 = -0.3e1;
    tensor[3] camEye099D#1 = <tensor[3]>[_t0997,_t0999,_t0997];
    globals.camEye0974 = camEye099D;
    real _t09A0#5 = 0.5e0;
    tensor[3] camAt09A6#1 = <tensor[3]>[_t09A0,_t09A0,_t09A0];
    globals.camAt0975 = camAt09A6;
    real _t09A9#4 = 0.e0;
    real _t09AD#7 = 0.1e1;
    tensor[3] camUp09AF#2 = <tensor[3]>[_t09A9,_t09A9,_t09AD];
    globals.camUp0976 = camUp09AF;
    real camFOV09B2#1 = 0.137e2;
    globals.camFOV0977 = camFOV09B2;
    int iresU09B5#2 = 10;
    globals.iresU0978 = iresU09B5;
    globals.iresV0979 = iresU09B5;
    real camNear09BB#1 = -0.2e1;
    globals.camNear097A = camNear09BB;
    real camFar09BE#1 = 0.5e1;
    globals.camFar097B = camFar09BE;
    globals.refStep097C = _t09AD;
    real rayStep09C4#1 = 0.1e-1;
    globals.rayStep097D = rayStep09C4;
    real eps09C7#1 = 0.1e-5;
    globals.eps0981 = eps09C7;
    tensor[3] mcnear09D0#2 = <tensor[3]>[_t09AD,_t09AD,_t09AD];
    globals.mcnear0985 = mcnear09D0;
    globals.mcfar0986 = mcnear09D0;
    globals.cmin0988 = _t09A9;
    globals.cmax0989 = _t09AD;
    bool light09E2#1 = true;
    globals.light098A = light09E2;
    globals.phongKa098B = _t09A0;
    globals.phongKd098C = _t09A0;
    globals.phongKs098D = _t09A9;
    real phongSp09EE#1 = 0.6e2;
    globals.phongSp098E = phongSp09EE;
    globals.maxAlpha098F = _t09AD;
    globals.lightVsp0990 = camUp09AF;
    return
## global-variable initialization
  ENTRY0B07:  preds = []
    tensor[3] camEye0A9E#16 = globals.camEye0974;
    tensor[3] camAt0A9D#16 = globals.camAt0975;
    tensor[3] camUp0A9C#4 = globals.camUp0976;
    real camFOV0A9B#2 = globals.camFOV0977;
    int iresU0A9A#1 = globals.iresU0978;
    int iresV0A99#1 = globals.iresV0979;
    real camNear0A98#1 = globals.camNear097A;
    real camFar0A97#1 = globals.camFar097B;
    femData:Mesh a0A96#3 = globals.a097E;
    femData:Space 0b0472_intermedateGlobal0A95#1 = globals.0b0472_intermedateGlobal097F;
    femData:FemFunc 0c0474_intermedateGlobal0A94#1 = globals.0c0474_intermedateGlobal0980;
    image(IMAGE1D<double[3]>) cmap0A93#1 = globals.cmap0987;
    tensor[3] lightVsp0A92#2 = globals.lightVsp0990;
    int _t0AAC#1 = 0;
    int _t0AAE#1 = 1;
    int _t0AB0#1 = ExtractFemItem<int,NumCell(Mesh)>(a0A96);
    int _t0AB2#1 = ISub(_t0AB0,_t0AAE);
    int[] _t0AB4#1 = Range(_t0AAC,_t0AB2);
    femData:MeshCell[] _t0AB6#1 = <femData:MeshCell[]>{};
  FOREACH0ABA:  preds = [ASSIGN0AB7,NEXT0ABF]
    foreach (_t0AB8 in _t0AB4) on exit goto GASSIGN0F45
      femData:MeshCell[] _t0AB9#2 = phi(_t0AB6,_t0ABD)
    femData:MeshCell _t0ABB#1 = LoadFem<femData:MeshCell>(a0A96,_t0AB8);
    femData:MeshCell[] _t0ABD#1 = Append<femData:MeshCell>(_t0AB9,_t0ABB);
    goto FOREACH0ABA
  GASSIGN0F45:  preds = [FOREACH0ABA]
    globals.0cell_a09FF = _t0AB9;
    femData:Space b0AC3#1 = LoadFem<femData:Space>(0b0472_intermedateGlobal0A95,a0A96);
    femData:FemFunc c0AC6#1 = LoadFem<femData:FemFunc>(0c0474_intermedateGlobal0A94,b0AC3);
    globals.c0A01 = c0AC6;
    real camNearVsp0ACE#1 = λ(T0[],T1[3],T2[3])<(T0 + Sqrt(Σ(i0=0..2)<(((T1_{i0}) - (T2_{i0}) * (T1_{i0}) - (T2_{i0})))>(i0=0..2)))> (camNear0A98,camAt0A9D,camEye0A9E);
    globals.camNearVsp0A03 = camNearVsp0ACE;
    real camFarVsp0AD1#1 = λ(T0[],T1[3],T2[3])<(T0 + Sqrt(Σ(i0=0..2)<(((T1_{i0}) - (T2_{i0}) * (T1_{i0}) - (T2_{i0})))>(i0=0..2)))> (camFar0A97,camAt0A9D,camEye0A9E);
    globals.camFarVsp0A04 = camFarVsp0AD1;
    tensor[3] camN0AD6#2 = λ(T0[3],T1[3],T2[3],T3[3])<((T0_{i0}) - (T1_{i0}) * (1) / ( Sqrt(Σ(i1=0..2)<(((T0_{i1}) - (T1_{i1}) * (T0_{i1}) - (T1_{i1})))>(i1=0..2))))>_{3} (camAt0A9D,camEye0A9E,camAt0A9D,camEye0A9E);
    globals.camN0A05 = camN0AD6;
    tensor[3] camU0ADB#2 = λ(T0[3],T1[3],T2[3],T3[3],T4[3],T5[3],T6[3],T7[3],T8[3],T9[3])<(Σ(i2=0..2)(i3=0..2)<((ϵ_{ii0,ii2,ii3} * (T0_{i2}) - (T1_{i2}) * (1) / ( Sqrt(Σ(i4=0..2)<(((T0_{i4}) - (T1_{i4}) * (T0_{i4}) - (T1_{i4})))>(i4=0..2))) * T4_{i3}))>(i2=0..2)(i3=0..2) * (1) / ( Sqrt(Σ(i1=0..2)<((Σ(i2=0..2)(i3=0..2)<((ϵ_{ii1,ii2,ii3} * (T0_{i2}) - (T1_{i2}) * (1) / ( Sqrt(Σ(i4=0..2)<(((T0_{i4}) - (T1_{i4}) * (T0_{i4}) - (T1_{i4})))>(i4=0..2))) * T4_{i3}))>(i2=0..2)(i3=0..2) * Σ(i2=0..2)(i3=0..2)<((ϵ_{ii1,ii2,ii3} * (T0_{i2}) - (T1_{i2}) * (1) / ( Sqrt(Σ(i4=0..2)<(((T0_{i4}) - (T1_{i4}) * (T0_{i4}) - (T1_{i4})))>(i4=0..2))) * T4_{i3}))>(i2=0..2)(i3=0..2)))>(i1=0..2))))>_{3} (camAt0A9D,camEye0A9E,camAt0A9D,camEye0A9E,camUp0A9C,camAt0A9D,camEye0A9E,camAt0A9D,camEye0A9E,camUp0A9C);
    globals.camU0A06 = camU0ADB;
    tensor[3] camV0ADE#2 = λ(T0[3],T1[3],T2[3],T3[3],T4[3],T5[3],T6[3],T7[3],T8[3],T9[3],T10[3],T11[3],T12[3],T13[3])<Σ(i1=0..2)(i2=0..2)<((ϵ_{ii0,ii1,ii2} * Σ(i4=0..2)(i5=0..2)<((ϵ_{ii1,ii4,ii5} * (T0_{i4}) - (T1_{i4}) * (1) / ( Sqrt(Σ(i6=0..2)<(((T0_{i6}) - (T1_{i6}) * (T0_{i6}) - (T1_{i6})))>(i6=0..2))) * T4_{i5}))>(i4=0..2)(i5=0..2) * (1) / ( Sqrt(Σ(i3=0..2)<((Σ(i4=0..2)(i5=0..2)<((ϵ_{ii3,ii4,ii5} * (T0_{i4}) - (T1_{i4}) * (1) / ( Sqrt(Σ(i6=0..2)<(((T0_{i6}) - (T1_{i6}) * (T0_{i6}) - (T1_{i6})))>(i6=0..2))) * T4_{i5}))>(i4=0..2)(i5=0..2) * Σ(i4=0..2)(i5=0..2)<((ϵ_{ii3,ii4,ii5} * (T0_{i4}) - (T1_{i4}) * (1) / ( Sqrt(Σ(i6=0..2)<(((T0_{i6}) - (T1_{i6}) * (T0_{i6}) - (T1_{i6})))>(i6=0..2))) * T4_{i5}))>(i4=0..2)(i5=0..2)))>(i3=0..2))) * (T0_{i2}) - (T1_{i2}) * (1) / ( Sqrt(Σ(i7=0..2)<(((T0_{i7}) - (T1_{i7}) * (T0_{i7}) - (T1_{i7})))>(i7=0..2)))))>(i1=0..2)(i2=0..2)>_{3} (camAt0A9D,camEye0A9E,camAt0A9D,camEye0A9E,camUp0A9C,camAt0A9D,camEye0A9E,camAt0A9D,camEye0A9E,camUp0A9C,camAt0A9D,camEye0A9E,camAt0A9D,camEye0A9E);
    globals.camV0A07 = camV0ADE;
    real _t0AE1#2 = 0.314159265358979323846264338327950288e1;
    real _t0AE5#2 = 0.36e3;
    real camVmax0AEB#1 = λ(T0[],T1[],T2[],T3[3],T4[3])<(Tangent(((T0 * T1)) / ( T2)) * Sqrt(Σ(i0=0..2)<(((T3_{i0}) - (T4_{i0}) * (T3_{i0}) - (T4_{i0})))>(i0=0..2)))> (camFOV0A9B,_t0AE1,_t0AE5,camAt0A9D,camEye0A9E);
    globals.camVmax0A08 = camVmax0AEB;
    real _t0AEE#1 = IntToReal(iresU0A9A);
    real _t0AF2#1 = IntToReal(iresV0A99);
    real camUmax0AF4#1 = λ(T0[],T1[],T2[],T3[3],T4[3],T5[],T6[])<((T5 * Tangent(((T0 * T1)) / ( T2)) * Sqrt(Σ(i0=0..2)<(((T3_{i0}) - (T4_{i0}) * (T3_{i0}) - (T4_{i0})))>(i0=0..2)))) / ( T6)> (camFOV0A9B,_t0AE1,_t0AE5,camAt0A9D,camEye0A9E,_t0AEE,_t0AF2);
    globals.camUmax0A09 = camUmax0AF4;
    kernel _t0AF7#1 = Kernel<tent,0>;
    image(IMAGE1D<double[3]>) img0AF9#1 = BorderCtlClamp<IMAGE1D<double[3]>>(cmap0A93);
    tensor[3,3] _t0AFE#1 = <tensor[3,3]>[camU0ADB,camV0ADE,camN0AD6];
    tensor[3] L0B04#1 = λ(T0[3 3],T1[3],T2[3])<Σ(i1=0..2)<((T0_{i1,i0} * T1_{i1} * (1) / ( Sqrt(Σ(i2=0..2)<((T1_{i2} * T1_{i2}))>(i2=0..2)))))>(i1=0..2)>_{3} (_t0AFE,lightVsp0A92,lightVsp0A92);
    globals.L0A0B = L0B04;
    globals.img0FCC = img0AF9;
    globals._t0FCF = _t0AF7;
    return
## strand
  strand ray (int ui0B26#2, int vi0B27#3)
    state:
      real rayU;
      real rayV;
      tensor[3] UV;
      tensor[3] rayOrig;
      tensor[3] rayVec;
      real camNearVsp;
      real camFarVsp;
      int offset;
      int len;
      int itter;
      int intersectionItter;
      int idx;
      tensor[2] interval;
      real s;
      real e;
      femData:MeshCell cc;
      femData:FuncCell fc;
      output real out;
      output tensor[4] rgba;
    state init
      ENTRY0BD1:  preds = []
        tensor[3] camEye0B48#1 = globals.camEye0974;
        int iresU0B47#2 = globals.iresU0978;
        int iresV0B46#3 = globals.iresV0979;
        femData:MeshCell[] 0cell_a0B45#1 = globals.0cell_a09FF;
        femData:FemFunc c0B44#1 = globals.c0A01;
        int[] indecies0B43#2 = globals.indecies0982;
        tensor[2][] times0B42#1 = globals.times0983;
        real camNearVsp0B41#1 = globals.camNearVsp0A03;
        real camFarVsp0B40#1 = globals.camFarVsp0A04;
        tensor[3] camN0B3F#1 = globals.camN0A05;
        tensor[3] camU0B3E#2 = globals.camU0A06;
        tensor[3] camV0B3D#2 = globals.camV0A07;
        real camVmax0B3C#6 = globals.camVmax0A08;
        real camUmax0B3B#6 = globals.camUmax0A09;
        real _t0B6C#6 = -0.5e0;
        real _t0B6E#3 = IntToReal(ui0B26);
        real _t0B70#3 = IntToReal(iresU0B47);
        real _t0B72#6 = 0.5e0;
        real rayU0B76#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[])<(Neg(T0) + (((T3) - (T2)) / ( ((T4) - (T5)) - (T2)) * (T1) - (Neg(T0))))> (camUmax0B3B,camUmax0B3B,_t0B6C,_t0B6E,_t0B70,_t0B72);
        real _t0B7C#3 = IntToReal(vi0B27);
        real _t0B7E#3 = IntToReal(iresV0B46);
        real rayV0B84#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[])<(Neg(T0) + (((T3) - (T2)) / ( ((T4) - (T5)) - (T2)) * (T1) - (Neg(T0))))> (camVmax0B3C,camVmax0B3C,_t0B6C,_t0B7C,_t0B7E,_t0B72);
        tensor[3] UV0B8A#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[3],T7[],T8[],T9[],T10[],T11[],T12[],T13[3])<(((Neg(T0) + (((T3) - (T2)) / ( ((T4) - (T5)) - (T2)) * (T0) - (Neg(T0)))) * T6_{i0}) + ((Neg(T7) + (((T10) - (T2)) / ( ((T11) - (T5)) - (T2)) * (T7) - (Neg(T7)))) * T13_{i0}))>_{3} (camUmax0B3B,camUmax0B3B,_t0B6C,_t0B6E,_t0B70,_t0B72,camU0B3E,camVmax0B3C,camVmax0B3C,_t0B6C,_t0B7C,_t0B7E,_t0B72,camV0B3D);
        tensor[3] rayOrig0B8C#1 = λ(T0[3],T1[],T2[],T3[],T4[],T5[],T6[],T7[3],T8[],T9[],T10[],T11[],T12[],T13[],T14[3])<(T0_{i0} + ((Neg(T1) + (((T4) - (T3)) / ( ((T5) - (T6)) - (T3)) * (T1) - (Neg(T1)))) * T7_{i0}) + ((Neg(T8) + (((T11) - (T3)) / ( ((T12) - (T6)) - (T3)) * (T8) - (Neg(T8)))) * T14_{i0}))>_{3} (camEye0B48,camUmax0B3B,camUmax0B3B,_t0B6C,_t0B6E,_t0B70,_t0B72,camU0B3E,camVmax0B3C,camVmax0B3C,_t0B6C,_t0B7C,_t0B7E,_t0B72,camV0B3D);
        real _t0B8E#8 = 0.e0;
        tensor[3] _t0B94#1 = <tensor[3]>[_t0B8E,_t0B8E,_t0B8E];
        tensor[3] rayVec0B96#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (camN0B3F,_t0B94);
        int _t0B9C#2 = IMul(ui0B26,iresV0B46);
        int _t0B9E#1 = IAdd(_t0B9C,vi0B27);
        int offset0BA0#2 = Subscript<int[]>(indecies0B43,_t0B9E);
        int _t0BA2#1 = IMul(iresU0B47,iresV0B46);
        int _t0BA6#1 = IAdd(_t0BA2,_t0B9C);
        int _t0BA8#1 = IAdd(_t0BA6,vi0B27);
        int len0BAA#1 = Subscript<int[]>(indecies0B43,_t0BA8);
        int itter0BAC#4 = 0;
        int idx0BB0#2 = IAdd(offset0BA0,itter0BAC);
        tensor[2] interval0BB2#3 = Subscript<tensor[2][]>(times0B42,idx0BB0);
        real s0BB4#1 = TensorIndex<tensor[2],[0]>(interval0BB2);
        real e0BB6#1 = TensorIndex<tensor[2],[1]>(interval0BB2);
        femData:MeshCell cc0BBA#2 = Subscript<femData:MeshCell[]>(0cell_a0B45,itter0BAC);
        int _t0BBD#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc0BBA);
        femData:FuncCell _t0BBF#1 = LoadFem<femData:FuncCell>(c0B44,_t0BBD);
        tensor[4] rgba0BCF#1 = <tensor[4]>[_t0B8E,_t0B8E,_t0B8E,_t0B8E];
        self.rayU = rayU0B76;
        self.rayV = rayV0B84;
        self.UV = UV0B8A;
        self.rayOrig = rayOrig0B8C;
        self.rayVec = rayVec0B96;
        self.camNearVsp = camNearVsp0B41;
        self.camFarVsp = camFarVsp0B40;
        self.offset = offset0BA0;
        self.len = len0BAA;
        self.itter = itter0BAC;
        self.intersectionItter = itter0BAC;
        self.idx = idx0BB0;
        self.interval = interval0BB2;
        self.s = s0BB4;
        self.e = e0BB6;
        self.cc = cc0BBA;
        self.fc = _t0BBF;
        self.out = _t0B8E;
        self.rgba = rgba0BCF;
        return
    end state init
    method start
        ENTRY0C2F:  preds = []
          femData:MeshCell[] 0cell_a0BE8#1 = globals.0cell_a09FF;
          femData:FemFunc c0BE7#1 = globals.c0A01;
          int[] cells0BE6#1 = globals.cells0984;
          int len0BF4#1 = self.len;
          int idx0BF7#1 = self.idx;
          int _t0C12#1 = 0;
          bool _t0C14#1 = EQ<int>(len0BF4,_t0C12);
          if _t0C14 then goto STABILIZE0C17 else goto JOIN0C16
        STABILIZE0C17:  preds = [COND0C21]
          stabilize
          goto JOIN0C16
        JOIN0C16:  preds = [*STABILIZE0C17,COND0C21]
          int _t0C22#1 = Subscript<int[]>(cells0BE6,idx0BF7);
          femData:MeshCell cc0C24#2 = Subscript<femData:MeshCell[]>(0cell_a0BE8,_t0C22);
          int _t0C27#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc0C24);
          femData:FuncCell _t0C29#1 = LoadFem<femData:FuncCell>(c0BE7,_t0C27);
          self.cc = cc0C24;
          self.fc = _t0C29;
          active
    end start
    method update
        ENTRY0F22:  preds = []
          image(IMAGE1D<double[3]>) img0FCD#1 = globals.img0FCC;
          kernel _t0FD0#1 = globals._t0FCF;
          femData:MeshCell[] 0cell_a0C49#1 = globals.0cell_a09FF;
          femData:FemFunc c0C48#1 = globals.c0A01;
          real eps0C47#8 = globals.eps0981;
          tensor[2][] times0C46#1 = globals.times0983;
          int[] cells0C45#1 = globals.cells0984;
          tensor[3] mcnear0C44#2 = globals.mcnear0985;
          tensor[3] mcfar0C43#2 = globals.mcfar0986;
          real cmin0C42#2 = globals.cmin0988;
          real cmax0C41#2 = globals.cmax0989;
          bool light0C40#1 = globals.light098A;
          real phongKa0C3F#1 = globals.phongKa098B;
          real phongKd0C3E#1 = globals.phongKd098C;
          real phongKs0C3D#1 = globals.phongKs098D;
          real phongSp0C3C#1 = globals.phongSp098E;
          tensor[3] L0C3A#3 = globals.L0A0B;
          tensor[3] rayOrig0C5D#3 = self.rayOrig;
          tensor[3] rayVec0C5E#7 = self.rayVec;
          real camNearVsp0C5F#2 = self.camNearVsp;
          real camFarVsp0C60#2 = self.camFarVsp;
          int offset0C61#1 = self.offset;
          int len0C62#1 = self.len;
          int itter0C63#2 = self.itter;
          int intersectionItter0C64#2 = self.intersectionItter;
          real s0C67#19 = self.s;
          real e0C68#20 = self.e;
          femData:MeshCell cc0C69#2 = self.cc;
          femData:FuncCell fc0C6A#2 = self.fc;
          real out0C6B#1 = self.out;
          string _t0C80#1 = "Interval:";
          tensor[2] _t0C82#1 = <tensor[2]>[s0C67,e0C68];
          string _t0C84#10 = "\n";
          Print<[string,tensor[2],string]>(_t0C80,_t0C82,_t0C84);
          string _t0C87#1 = "inner itter:";
          Print<[string,int,string]>(_t0C87,intersectionItter0C64,_t0C84);
          string _t0C8C#1 = "Outer itter:";
          Print<[string,int,string]>(_t0C8C,itter0C63,_t0C84);
          real _t0C91#1 = TensorIndex<tensor[3],[0]>(rayOrig0C5D);
          real _t0C93#1 = TensorIndex<tensor[3],[1]>(rayOrig0C5D);
          tensor[2] _t0C95#3 = <tensor[2]>[_t0C91,_t0C93];
          real _t0C97#1 = TensorIndex<tensor[3],[0]>(rayVec0C5E);
          real _t0C99#1 = TensorIndex<tensor[3],[1]>(rayVec0C5E);
          tensor[2] _t0C9B#3 = <tensor[2]>[_t0C97,_t0C99];
          tensor[2] startRay0C9F#2 = λ(T0[2],T1[],T2[2])<(T0_{i0} + (T1 * T2_{i0}))>_{2} (_t0C95,s0C67,_t0C9B);
          tensor[2] endRay0CAF#1 = λ(T0[2],T1[],T2[2])<(T0_{i0} + (T1 * T2_{i0}))>_{2} (_t0C95,e0C68,_t0C9B);
          femData:Mesh _t0CB1#10 = ExtractFem<femData:Mesh,femData:MeshCell>(cc0C69);
          int _t0CB5#5 = ExtractFemItem<int,CellIndex(MeshCell)>(cc0C69);
          tensor[2] invertA0CB9#16 = λ(INT0,FEM(msh)1,FEM(msh)2,T3[2])<Probe(femInvV(0A7F, 0, 1, 1)_{i0}⊛Basis(),T3)>_{2} (_t0CB5,_t0CB1,_t0CB1,startRay0C9F);
          tensor[2] invertB0CC3#13 = λ(INT0,FEM(msh)1,FEM(msh)2,T3[2])<Probe(femInvV(0A7F, 0, 1, 1)_{i0}⊛Basis(),T3)>_{2} (_t0CB5,_t0CB1,_t0CB1,endRay0CAF);
          string _t0CC5#1 = "inverses:";
          Print<[string,tensor[2],tensor[2],string]>(_t0CC5,invertA0CB9,invertB0CC3,_t0C84);
          femData:FemFunc _t0CCA#34 = ExtractFem<femData:FemFunc,femData:FuncCell>(fc0C6A);
          femData:Space _t0CCE#33 = ExtractFem<femData:Space,femData:FemFunc>(_t0CCA);
          int _t0CD0#33 = ExtractFemItem<int,CellIndex(FuncCell)>(fc0C6A);
          real faVal0CD4#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2])<Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T3)> (_t0CD0,_t0CCE,_t0CCA,invertA0CB9);
          real _t0CD6#29 = TensorIndex<tensor[3],[2]>(rayVec0C5E);
          real _t0CDC#29 = TensorIndex<tensor[3],[2]>(rayOrig0C5D);
          real fa0CDE#5 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[],T5[],T6[])<((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T3)) - ((T4 * T5))) - (T6)> (_t0CD0,_t0CCE,_t0CCA,invertA0CB9,_t0CD6,s0C67,_t0CDC);
          real fb0CF4#2 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[],T5[],T6[])<((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T3)) - ((T4 * T5))) - (T6)> (_t0CD0,_t0CCE,_t0CCA,invertB0CC3,_t0CD6,e0C68,_t0CDC);
          string _t0CF6#1 = "Vals:";
          tensor[2] _t0CF8#1 = <tensor[2]>[fa0CDE,fb0CF4];
          Print<[string,tensor[2],string]>(_t0CF6,_t0CF8,_t0C84);
          real _t0CFF#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[],T5[],T6[],INT7,FEM(fns)8,FEM(func)9,T10[2],T11[],T12[],T13[])<Abs((((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T3)) - ((T4 * T5))) - (T6)) - (((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T10)) - ((T4 * T12))) - (T6)))> (_t0CD0,_t0CCE,_t0CCA,invertA0CB9,_t0CD6,s0C67,_t0CDC,_t0CD0,_t0CCE,_t0CCA,invertB0CC3,_t0CD6,e0C68,_t0CDC);
          bool _t0D01#1 = LT<real>(_t0CFF,eps0C47);
          if _t0D01 then goto ASSIGN0FA9 else goto JOIN0D03
        ASSIGN0FA9:  preds = [COND0D18]
          real _t0D04#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[],T5[],T6[])<Abs(((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T3)) - ((T4 * T5))) - (T6))> (_t0CD0,_t0CCE,_t0CCA,invertA0CB9,_t0CD6,s0C67,_t0CDC);
          bool _t0D06#1 = GT<real>(_t0D04,eps0C47);
          if _t0D06 then goto ASSIGN0D0B else goto JOIN0D08
        ASSIGN0D0B:  preds = [COND0D16]
          real s0D09#1 = λ(T0[],T1[])<(T0 + T1)> (s0C67,eps0C47);
          self.s = s0D09;
          active
          goto JOIN0D08
        JOIN0D08:  preds = [*ACTIVE0D0C,COND0D16]
          real s0D0A#1 = phi(s0C67)
          goto JOIN0D03
        JOIN0D03:  preds = [JOIN0D08,COND0D18]
          real s0D17#7 = phi(s0D0A,s0C67)
          real cup0D21#4 = λ(T0[],INT1,FEM(fns)2,FEM(func)3,T4[2],T5[],T6[],T7[],T8[],INT9,FEM(fns)10,FEM(func)11,T12[2],T13[],T14[],T15[],INT16,FEM(fns)17,FEM(func)18,T19[2],T20[],T21[],T22[],INT23,FEM(fns)24,FEM(func)25,T26[2],T27[],T28[],T29[])<(((T0 * ((Probe(femV(noFunc, 1, 2, 3)⊛Basis(),T4)) - ((T5 * T6))) - (T7))) - ((T6 * ((Probe(femV(noFunc, 1, 2, 3)⊛Basis(),T12)) - ((T5 * T14))) - (T7)))) / ( (((Probe(femV(noFunc, 1, 2, 3)⊛Basis(),T4)) - ((T5 * T6))) - (T7)) - (((Probe(femV(noFunc, 1, 2, 3)⊛Basis(),T12)) - ((T5 * T14))) - (T7)))> (s0D17,_t0CD0,_t0CCE,_t0CCA,invertB0CC3,_t0CD6,e0C68,_t0CDC,e0C68,_t0CD0,_t0CCE,_t0CCA,invertA0CB9,_t0CD6,s0C67,_t0CDC,_t0CD0,_t0CCE,_t0CCA,invertB0CC3,_t0CD6,e0C68,_t0CDC,_t0CD0,_t0CCE,_t0CCA,invertA0CB9,_t0CD6,s0C67,_t0CDC);
          string _t0D23#1 = "Mid time:";
          Print<[string,real,string]>(_t0D23,cup0D21,_t0C84);
          tensor[2] midRay0D36#2 = λ(T0[2],T1[],INT2,FEM(fns)3,FEM(func)4,T5[2],T6[],T7[],T8[],T9[],INT10,FEM(fns)11,FEM(func)12,T13[2],T14[],T15[],T16[],INT17,FEM(fns)18,FEM(func)19,T20[2],T21[],T22[],T23[],INT24,FEM(fns)25,FEM(func)26,T27[2],T28[],T29[],T30[],T31[2])<(T0_{i0} + ((((T1 * ((Probe(femV(noFunc, 2, 3, 4)⊛Basis(),T5)) - ((T6 * T7))) - (T8))) - ((T7 * ((Probe(femV(noFunc, 2, 3, 4)⊛Basis(),T13)) - ((T6 * T15))) - (T8)))) / ( (((Probe(femV(noFunc, 2, 3, 4)⊛Basis(),T5)) - ((T6 * T7))) - (T8)) - (((Probe(femV(noFunc, 2, 3, 4)⊛Basis(),T13)) - ((T6 * T15))) - (T8))) * T31_{i0}))>_{2} (_t0C95,s0D17,_t0CD0,_t0CCE,_t0CCA,invertB0CC3,_t0CD6,e0C68,_t0CDC,e0C68,_t0CD0,_t0CCE,_t0CCA,invertA0CB9,_t0CD6,s0C67,_t0CDC,_t0CD0,_t0CCE,_t0CCA,invertB0CC3,_t0CD6,e0C68,_t0CDC,_t0CD0,_t0CCE,_t0CCA,invertA0CB9,_t0CD6,s0C67,_t0CDC,_t0C9B);
          tensor[2] invertC0D40#4 = λ(INT0,FEM(msh)1,FEM(msh)2,T3[2])<Probe(femInvV(0A7F, 0, 1, 1)_{i0}⊛Basis(),T3)>_{2} (_t0CB5,_t0CB1,_t0CB1,midRay0D36);
          real fmVal0D4C#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2])<Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T3)> (_t0CD0,_t0CCE,_t0CCA,invertC0D40);
          real fm0D56#4 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[],T5[],INT6,FEM(fns)7,FEM(func)8,T9[2],T10[],T11[],T12[],T13[],INT14,FEM(fns)15,FEM(func)16,T17[2],T18[],T19[],T20[],INT21,FEM(fns)22,FEM(func)23,T24[2],T25[],T26[],T27[],INT28,FEM(fns)29,FEM(func)30,T31[2],T32[],T33[],T34[],T35[])<((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T3)) - ((T4 * (((T5 * ((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T9)) - ((T4 * T11))) - (T12))) - ((T11 * ((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T17)) - ((T4 * T19))) - (T12)))) / ( (((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T9)) - ((T4 * T11))) - (T12)) - (((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T17)) - ((T4 * T19))) - (T12)))))) - (T35)> (_t0CD0,_t0CCE,_t0CCA,invertC0D40,_t0CD6,s0D17,_t0CD0,_t0CCE,_t0CCA,invertB0CC3,_t0CD6,e0C68,_t0CDC,e0C68,_t0CD0,_t0CCE,_t0CCA,invertA0CB9,_t0CD6,s0C67,_t0CDC,_t0CD0,_t0CCE,_t0CCA,invertB0CC3,_t0CD6,e0C68,_t0CDC,_t0CD0,_t0CCE,_t0CCA,invertA0CB9,_t0CD6,s0C67,_t0CDC,_t0CDC);
          string _t0D58#1 = "all vals:";
          tensor[3] _t0D5A#1 = <tensor[3]>[fa0CDE,fm0D56,fb0CF4];
          Print<[string,tensor[3],string]>(_t0D58,_t0D5A,_t0C84);
          int _t0D5F#6 = 1;
          int intersectionItter0D61#2 = IAdd(intersectionItter0C64,_t0D5F);
          real _t0D64#10 = 0.e0;
          bool _t0D66#2 = GT<real>(fa0CDE,_t0D64);
          if _t0D66 then goto JOIN0D68 else goto ASSIGN0F66
        JOIN0D68:  preds = [COND0D7D,JOIN0D72]
          int _t0D6C#1 = phi(_t0D5F,_t0D76)
          bool _t0D81#2 = GT<real>(fm0D56,_t0D64);
          if _t0D81 then goto JOIN0D83 else goto ASSIGN0F68
        JOIN0D83:  preds = [COND0D98,JOIN0D8D]
          int _t0D87#1 = phi(_t0D5F,_t0D91)
          int _t0D99#1 = IMul(_t0D6C,_t0D87);
          int _t0D9B#7 = 0;
          bool _t0D9D#1 = LT<int>(_t0D99,_t0D9B);
          if _t0D9D then goto JOIN0D9F else goto COND0DBD
        JOIN0D9F:  preds = [COND0DE5,JOIN0DDF]
          real e0DA1#4 = phi(cup0D21,e0C68)
          real s0DE4#5 = phi(s0D17,s0DE1)
          string _t0DE6#1 = "new interval:";
          tensor[2] _t0DE8#1 = <tensor[2]>[s0DE4,e0DA1];
          Print<[string,tensor[2],string]>(_t0DE6,_t0DE8,_t0C84);
          real _t0DEE#2 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[],T5[],T6[])<Abs(((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T3)) - ((T4 * T5))) - (T6))> (_t0CD0,_t0CCE,_t0CCA,invertA0CB9,_t0CD6,s0C67,_t0CDC);
          bool _t0DF0#2 = LT<real>(_t0DEE,eps0C47);
          if _t0DF0 then goto ASSIGN0DF5 else goto ASSIGN0FCA
        ASSIGN0DF5:  preds = [COND0E06]
          bool _t0DF3#1 = true;
          goto JOIN0DF2
        JOIN0DF2:  preds = [ASSIGN0DF5,JOIN0DFB]
          bool _t0DF4#1 = phi(_t0DF3,_t0DFD)
          if _t0DF4 then goto ASSIGN0FB7 else goto ASSIGN0F1F
        ASSIGN0FB7:  preds = [COND0F21]
          real _t0E0C#2 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[],T5[],INT6,FEM(fns)7,FEM(func)8,T9[2],T10[],T11[],T12[],T13[],INT14,FEM(fns)15,FEM(func)16,T17[2],T18[],T19[],T20[],INT21,FEM(fns)22,FEM(func)23,T24[2],T25[],T26[],T27[],INT28,FEM(fns)29,FEM(func)30,T31[2],T32[],T33[],T34[],T35[])<Abs(((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T3)) - ((T4 * (((T5 * ((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T9)) - ((T4 * T11))) - (T12))) - ((T11 * ((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T17)) - ((T4 * T19))) - (T12)))) / ( (((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T9)) - ((T4 * T11))) - (T12)) - (((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T17)) - ((T4 * T19))) - (T12)))))) - (T12))> (_t0CD0,_t0CCE,_t0CCA,invertC0D40,_t0CD6,s0D17,_t0CD0,_t0CCE,_t0CCA,invertB0CC3,_t0CD6,e0C68,_t0CDC,e0C68,_t0CD0,_t0CCE,_t0CCA,invertA0CB9,_t0CD6,s0C67,_t0CDC,_t0CD0,_t0CCE,_t0CCA,invertB0CC3,_t0CD6,e0C68,_t0CDC,_t0CD0,_t0CCE,_t0CCA,invertA0CB9,_t0CD6,s0C67,_t0CDC,_t0CDC);
          bool _t0E0E#1 = GT<real>(_t0E0C,eps0C47);
          if _t0E0E then goto ASSIGN0F6D else goto ASSIGN0E17
        ASSIGN0F6D:  preds = [COND0E18]
          bool _t0E13#1 = GT<real>(_t0DEE,eps0C47);
          goto JOIN0E10
        JOIN0E10:  preds = [ASSIGN0F6D,ASSIGN0E17]
          bool _t0E14#1 = phi(_t0E13,_t0E16)
          if _t0E14 then goto ASSIGN0F7B else goto ASSIGN0F6E
        ASSIGN0F7B:  preds = [COND0F1D]
          int itter0E1C#4 = IAdd(itter0C63,_t0D5F);
          bool _t0E1F#1 = GTE<int>(itter0E1C,len0C62);
          if _t0E1F then goto ASSIGN0E23 else goto JOIN0E21
        ASSIGN0E23:  preds = [COND0E2F]
          string _t0E22#1 = "Fin pixel=============================\n";
          Print<[string]>(_t0E22);
          self.itter = itter0E1C;
          self.intersectionItter = _t0D9B;
          self.s = s0DE4;
          self.e = e0DA1;
          stabilize
          goto JOIN0E21
        JOIN0E21:  preds = [*STABILIZE0E25,COND0E2F]
          int _t0E30#2 = IAdd(offset0C61,itter0E1C);
          tensor[2] interval0E32#3 = Subscript<tensor[2][]>(times0C46,_t0E30);
          int _t0E37#1 = Subscript<int[]>(cells0C45,_t0E30);
          femData:MeshCell cc0E39#2 = Subscript<femData:MeshCell[]>(0cell_a0C49,_t0E37);
          real s0E3C#1 = TensorIndex<tensor[2],[0]>(interval0E32);
          real e0E3F#1 = TensorIndex<tensor[2],[1]>(interval0E32);
          int _t0E43#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc0E39);
          femData:FuncCell _t0E45#1 = LoadFem<femData:FuncCell>(c0C48,_t0E43);
          string _t0E4C#1 = "Next interval!\n";
          Print<[string]>(_t0E4C);
          self.itter = itter0E1C;
          self.intersectionItter = _t0D9B;
          self.interval = interval0E32;
          self.s = s0E3C;
          self.e = e0E3F;
          self.cc = cc0E39;
          self.fc = _t0E45;
          active
          goto JOIN0E19
        JOIN0E19:  preds = [*ACTIVE0E4F,*STABILIZE0F13]
          goto JOIN0E07
        JOIN0E07:  preds = [*JOIN0E19,MASSIGN0F20]
          int intersectionItter0E09#1 = phi(intersectionItter0D61)
          self.intersectionItter = intersectionItter0E09;
          self.s = s0DE4;
          self.e = e0DA1;
          active
        ASSIGN0F6E:  preds = [COND0F1D]
          tensor[2] grad0E5D#1 = <tensor[2]>[_t0D64,_t0D64];
          bool _t0E61#1 = LT<real>(_t0E0C,eps0C47);
          if _t0E61 then goto ASSIGN0FBA else goto JOIN0E63
        ASSIGN0FBA:  preds = [COND0E80]
          tensor[2] grad0E7A#1 = λ(INT0,FEM(fns)1,FEM(func)2,INT3,FEM(msh)4,FEM(msh)5,T6[2])<Σ(i104=0..1)<((Probe(Cmp(femV(noFunc, 0, 1, 2)⊛Basis()dx_{i104})[femInvV(0A7F, 3, 4, 4)_{i0}⊛Basis(){2}],T6) * (Σ(i114=0..1)<((ϵ_{ii114,ii104} * Σ(i116=0..1)<((ϵ_{ii116,ii0} * Probe(femV(0A7F, 3, 4, 4)_{i116}⊛Basis()dx_{i114},T6)))>(i116=0..1)))>(i114=0..1)) / ( Σ(i112=0..1)<((Probe(femV(0A7F, 3, 4, 4)_{i112}⊛Basis()dx_{'0'},T6) * Σ(i113=0..1)<((ϵ_{ii112,ii113} * Probe(femV(0A7F, 3, 4, 4)_{i113}⊛Basis()dx_{'1'},T6)))>(i113=0..1)))>(i112=0..1))))>(i104=0..1)>_{2} (_t0CD0,_t0CCE,_t0CCA,_t0CB5,_t0CB1,_t0CB1,midRay0D36);
          goto JOIN0E63
        JOIN0E63:  preds = [ASSIGN0FBA,COND0E80]
          tensor[2] grad0E7B#1 = phi(grad0E7A,grad0E5D)
          real out0E7E#1 = phi(fmVal0D4C,out0C6B)
          if _t0DF0 then goto ASSIGN0FBD else goto JOIN0E86
        ASSIGN0FBD:  preds = [COND0EA6]
          tensor[2] grad0EA0#1 = λ(INT0,FEM(fns)1,FEM(func)2,INT3,FEM(msh)4,FEM(msh)5,T6[2])<Σ(i104=0..1)<((Probe(Cmp(femV(noFunc, 0, 1, 2)⊛Basis()dx_{i104})[femInvV(0A7F, 3, 4, 4)_{i0}⊛Basis(){2}],T6) * (Σ(i114=0..1)<((ϵ_{ii114,ii104} * Σ(i116=0..1)<((ϵ_{ii116,ii0} * Probe(femV(0A7F, 3, 4, 4)_{i116}⊛Basis()dx_{i114},T6)))>(i116=0..1)))>(i114=0..1)) / ( Σ(i112=0..1)<((Probe(femV(0A7F, 3, 4, 4)_{i112}⊛Basis()dx_{'0'},T6) * Σ(i113=0..1)<((ϵ_{ii112,ii113} * Probe(femV(0A7F, 3, 4, 4)_{i113}⊛Basis()dx_{'1'},T6)))>(i113=0..1)))>(i112=0..1))))>(i104=0..1)>_{2} (_t0CD0,_t0CCE,_t0CCA,_t0CB5,_t0CB1,_t0CB1,startRay0C9F);
          goto JOIN0E86
        JOIN0E86:  preds = [ASSIGN0FBD,COND0EA6]
          tensor[2] grad0EA1#3 = phi(grad0EA0,grad0E7B)
          real cup0E88#2 = phi(s0DE4,cup0D21)
          real out0EA4#3 = phi(faVal0CD4,out0E7E)
          string _t0EA8#1 = "Out val:";
          Print<[string,real,string]>(_t0EA8,out0EA4,_t0C84);
          string _t0EAD#1 = "Grad val:";
          Print<[string,tensor[2],string]>(_t0EAD,grad0EA1,_t0C84);
          real _t0EB2#6 = 0.1e1;
          tensor[3] mcol0EB8#1 = <tensor[3]>[_t0EB2,_t0EB2,_t0EB2];
          bool _t0EBA#1 = NEQ<real>(cmin0C42,cmax0C41);
          if _t0EBA then goto ASSIGN0EBE else goto JOIN0EBC
        ASSIGN0EBE:  preds = [COND0EC8]
          int _t0EBD#1 = -1;
          real _t0EBF#1 = IntToReal(_t0EBD);
          real _t0EC3#1 = λ(T0[],T1[],T2[],T3[],T4[])<(T0 + (((T3) - (T2)) / ( (T4) - (T2)) * (T1) - (T0)))> (_t0EBF,_t0EB2,cmin0C42,out0EA4,cmax0C41);
          tensor[3] mcol0EC5#1 = λ(V0(1)[3],H1,T2[1])<Probe(V0_{i0}⊛H1,T2)>_{3} (img0FCD,_t0FD0,_t0EC3);
          goto JOIN0EBC
        JOIN0EBC:  preds = [ASSIGN0FD1,COND0EC8]
          tensor[3] mcol0EC6#5 = phi(mcol0EC5,mcol0EB8)
          if light0C40 then goto ASSIGN0ECB else goto ASSIGN0F08
        ASSIGN0ECB:  preds = [COND0F11]
          real _t0ECA#1 = TensorIndex<tensor[2],[0]>(grad0EA1);
          real _t0ECC#1 = TensorIndex<tensor[2],[1]>(grad0EA1);
          int _t0ECE#1 = -1;
          real _t0ED0#1 = IntToReal(_t0ECE);
          tensor[3] N0ED2#2 = <tensor[3]>[_t0ECA,_t0ECC,_t0ED0];
          real _t0EE6#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (N0ED2,L0C3A);
          real _t0EE8#1 = Max<real>(_t0D64,_t0EE6);
          real _t0EF0#1 = λ(T0[3],T1[3],T2[3],T3[3],T4[3],T5[3],T6[3])<Σ(i0=0..2)<((T0_{i0} * (Neg((T1_{i0} * (1) / ( Sqrt(Σ(i4=0..2)<((T1_{i4} * T1_{i4}))>(i4=0..2))))) + T3_{i0}) * (1) / ( Sqrt(Σ(i1=0..2)<(((Neg((T1_{i1} * (1) / ( Sqrt(Σ(i4=0..2)<((T1_{i4} * T1_{i4}))>(i4=0..2))))) + T3_{i1}) * (Neg((T1_{i1} * (1) / ( Sqrt(Σ(i4=0..2)<((T1_{i4} * T1_{i4}))>(i4=0..2))))) + T3_{i1})))>(i1=0..2)))))>(i0=0..2)> (N0ED2,rayVec0C5E,rayVec0C5E,L0C3A,rayVec0C5E,rayVec0C5E,L0C3A);
          real _t0EF2#1 = Max<real>(_t0D64,_t0EF0);
          real _t0EF4#1 = MathFn<pow>(_t0EF2,phongSp0C3C);
          tensor[3] fin0EFA#3 = λ(T0[],T1[3],T2[],T3[],T4[3],T5[3],T6[3],T7[],T8[],T9[],T10[],T11[],T12[3],T13[3],T14[],T15[],T16[])<((T0 * T1_{i0}) + (T2 * T3 * T1_{i0} * (T5_{i0} + (((T8) - (T7)) / ( (T9) - (T7)) * (T6_{i0}) - (T5_{i0})))) + (T10 * T11 * (T5_{i0} + (((T8) - (T7)) / ( (T9) - (T7)) * (T6_{i0}) - (T5_{i0})))))>_{3} (phongKa0C3F,mcol0EC6,_t0EE8,phongKd0C3E,mcol0EC6,mcnear0C44,mcfar0C43,camNearVsp0C5F,cup0E88,camFarVsp0C60,_t0EF4,phongKs0C3D,mcnear0C44,mcfar0C43,camNearVsp0C5F,cup0E88,camFarVsp0C60);
          real _t0EFC#1 = TensorIndex<tensor[3],[0]>(fin0EFA);
          real _t0EFE#1 = TensorIndex<tensor[3],[1]>(fin0EFA);
          real _t0F00#1 = TensorIndex<tensor[3],[2]>(fin0EFA);
          tensor[4] rgba0F04#1 = <tensor[4]>[_t0EFC,_t0EFE,_t0F00,_t0EB2];
          goto JOIN0EC9
        JOIN0EC9:  preds = [ASSIGN0F79,ASSIGN0F76]
          tensor[4] rgba0F05#1 = phi(rgba0F04,rgba0F0F)
          self.intersectionItter = _t0D9B;
          self.s = s0DE4;
          self.e = e0DA1;
          self.out = out0EA4;
          self.rgba = rgba0F05;
          stabilize
          goto JOIN0E19
        ASSIGN0F08:  preds = [COND0F11]
          real _t0F07#1 = TensorIndex<tensor[3],[0]>(mcol0EC6);
          real _t0F09#1 = TensorIndex<tensor[3],[1]>(mcol0EC6);
          real _t0F0B#1 = TensorIndex<tensor[3],[2]>(mcol0EC6);
          tensor[4] rgba0F0F#1 = <tensor[4]>[_t0F07,_t0F09,_t0F0B,_t0EB2];
          goto JOIN0EC9
        ASSIGN0E17:  preds = [COND0E18]
          bool _t0E16#1 = false;
          goto JOIN0E10
        ASSIGN0F1F:  preds = [COND0F21]
          string _t0F1E#1 = "=========\n";
          Print<[string]>(_t0F1E);
          goto JOIN0E07
        ASSIGN0FCA:  preds = [COND0E06]
          real _t0DF7#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[],T5[],INT6,FEM(fns)7,FEM(func)8,T9[2],T10[],T11[],T12[],T13[],INT14,FEM(fns)15,FEM(func)16,T17[2],T18[],T19[],T20[],INT21,FEM(fns)22,FEM(func)23,T24[2],T25[],T26[],T27[],INT28,FEM(fns)29,FEM(func)30,T31[2],T32[],T33[],T34[],T35[])<Abs(((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T3)) - ((T4 * (((T5 * ((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T9)) - ((T4 * T11))) - (T12))) - ((T11 * ((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T17)) - ((T4 * T19))) - (T12)))) / ( (((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T9)) - ((T4 * T11))) - (T12)) - (((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T17)) - ((T4 * T19))) - (T12)))))) - (T12))> (_t0CD0,_t0CCE,_t0CCA,invertC0D40,_t0CD6,s0D17,_t0CD0,_t0CCE,_t0CCA,invertB0CC3,_t0CD6,e0C68,_t0CDC,e0C68,_t0CD0,_t0CCE,_t0CCA,invertA0CB9,_t0CD6,s0C67,_t0CDC,_t0CD0,_t0CCE,_t0CCA,invertB0CC3,_t0CD6,e0C68,_t0CDC,_t0CD0,_t0CCE,_t0CCA,invertA0CB9,_t0CD6,s0C67,_t0CDC,_t0CDC);
          bool _t0DF9#1 = LT<real>(_t0DF7,eps0C47);
          if _t0DF9 then goto ASSIGN0DFE else goto ASSIGN0E00
        ASSIGN0DFE:  preds = [COND0E03]
          bool _t0DFC#1 = true;
          goto JOIN0DFB
        JOIN0DFB:  preds = [ASSIGN0DFE,ASSIGN0E02]
          bool _t0DFD#1 = phi(_t0DFC,_t0E01)
          goto JOIN0DF2
        ASSIGN0E00:  preds = [COND0E03]
          int _t0DFF#1 = 32;
          bool _t0E01#1 = GT<int>(intersectionItter0D61,_t0DFF);
          goto JOIN0DFB
        COND0DBD:  preds = [COND0DE5]
          if _t0D66 then goto JOIN0DA8 else goto ASSIGN0F69
        JOIN0DA8:  preds = [COND0DBD,JOIN0DB2]
          int _t0DAC#1 = phi(_t0D5F,_t0DB6)
          if _t0D81 then goto JOIN0DC3 else goto ASSIGN0F6A
        JOIN0DC3:  preds = [COND0DD8,JOIN0DCD]
          int _t0DC7#1 = phi(_t0D5F,_t0DD1)
          int _t0DD9#1 = IMul(_t0DAC,_t0DC7);
          bool _t0DDD#1 = GT<int>(_t0DD9,_t0D9B);
          if _t0DDD then goto JOIN0DDF else goto JOIN0DDF
        JOIN0DDF:  preds = [COND0DE3,COND0DE3]
          real s0DE1#1 = phi(cup0D21,s0D17)
          goto JOIN0D9F
        ASSIGN0F6A:  preds = [COND0DD8]
          bool _t0DCB#1 = LT<real>(fm0D56,_t0D64);
          if _t0DCB then goto ASSIGN0DCF else goto JOIN0DCD
        ASSIGN0DCF:  preds = [COND0DD7]
          int _t0DCE#1 = -1;
          goto JOIN0DCD
        JOIN0DCD:  preds = [ASSIGN0DCF,COND0DD7]
          int _t0DD1#1 = phi(_t0DCE,_t0D9B)
          goto JOIN0DC3
        ASSIGN0F69:  preds = [COND0DBD]
          bool _t0DB0#1 = LT<real>(fa0CDE,_t0D64);
          if _t0DB0 then goto ASSIGN0DB4 else goto JOIN0DB2
        ASSIGN0DB4:  preds = [COND0DBC]
          int _t0DB3#1 = -1;
          goto JOIN0DB2
        JOIN0DB2:  preds = [ASSIGN0DB4,COND0DBC]
          int _t0DB6#1 = phi(_t0DB3,_t0D9B)
          goto JOIN0DA8
        ASSIGN0F68:  preds = [COND0D98]
          bool _t0D8B#1 = LT<real>(fm0D56,_t0D64);
          if _t0D8B then goto ASSIGN0D8F else goto ASSIGN0D94
        ASSIGN0D8F:  preds = [COND0D97]
          int _t0D8E#1 = -1;
          goto JOIN0D8D
        JOIN0D8D:  preds = [ASSIGN0D8F,ASSIGN0D94]
          int _t0D91#1 = phi(_t0D8E,_t0D93)
          goto JOIN0D83
        ASSIGN0D94:  preds = [COND0D97]
          int _t0D93#1 = 0;
          goto JOIN0D8D
        ASSIGN0F66:  preds = [COND0D7D]
          bool _t0D70#1 = LT<real>(fa0CDE,_t0D64);
          if _t0D70 then goto ASSIGN0D74 else goto ASSIGN0D79
        ASSIGN0D74:  preds = [COND0D7C]
          int _t0D73#1 = -1;
          goto JOIN0D72
        JOIN0D72:  preds = [ASSIGN0D74,ASSIGN0D79]
          int _t0D76#1 = phi(_t0D73,_t0D78)
          goto JOIN0D68
        ASSIGN0D79:  preds = [COND0D7C]
          int _t0D78#1 = 0;
          goto JOIN0D72
    end update
  end ray
## initial strand creation
  GRID(2)
    ENTRY0B24:  preds = []
      int iresU0B0A#1 = globals.iresU0978;
      int iresV0B09#1 = globals.iresV0979;
      int _t0B0D#2 = 0;
      int _t0B0F#2 = 1;
      int _t0B11#1 = ISub(iresU0B0A,_t0B0F);
      int[] _t0B13#1 = Range(_t0B0D,_t0B11);
    FOREACH0B16:  preds = [ASSIGN0B14,NEXT0B23]
      foreach (vi0B15 in _t0B13) on exit goto RETURN0B25
      int _t0B1B#1 = ISub(iresV0B09,_t0B0F);
      int[] _t0B1D#1 = Range(_t0B0D,_t0B1B);
    FOREACH0B20:  preds = [ASSIGN0F2E,NEXT0B22]
      foreach (ui0B1F in _t0B1D) on exit goto NEXT0B23
      new ray(ui0B1F,vi0B15);
      goto FOREACH0B20
    NEXT0B23:  preds = [FOREACH0B20]
      goto FOREACH0B16
    RETURN0B25:  preds = [FOREACH0B16]
      return
#### end program ####
##### mid-ir: after high-to-mid translation ####
## properties
  GlobalInit StrandArray HasStartMethod ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[]) HasInputs HasGlobals
## globals
  input isoval0FD6 (isoval) = <default>
  input thick0FD7 (thick) = <default>
  input camEye0FD8 (camEye) = <default>
  input camAt0FD9 (camAt) = <default>
  input camUp0FDA (camUp) = <default>
  input camFOV0FDB (camFOV) = <default>
  input iresU0FDC (iresU) = <default>
  input iresV0FDD (iresV) = <default>
  input camNear0FDE (camNear) = <default>
  input camFar0FDF (camFar) = <default>
  input refStep0FE0 (refStep) = <default>
  input rayStep0FE1 (rayStep) = <default>
  input a0FE2 (a) = <no-default>
  input 0b0472_intermedateGlobal0FE3 (b) = <no-default>
  input 0c0474_intermedateGlobal0FE4 (c) = <no-default>
  input eps0FE5 (eps) = <default>
  input indecies0FE6 (indecies) = <no-default>
  input times0FE7 (times) = <no-default>
  input cells0FE8 (cells) = <no-default>
  input mcnear0FE9 (mcnear) = <default>
  input mcfar0FEA (mcfar) = <default>
  input cmap0FEB (cmap) = image("/home/teocollin/gitcode/diderot/tests/lipRay/find/cmap.nrrd")
  input cmin0FEC (cmin) = <default>
  input cmax0FED (cmax) = <default>
  input light0FEE (light) = <default>
  input phongKa0FEF (phongKa) = <default>
  input phongKd0FF0 (phongKd) = <default>
  input phongKs0FF1 (phongKs) = <default>
  input phongSp0FF2 (phongSp) = <default>
  input maxAlpha0FF3 (maxAlpha) = <default>
  input lightVsp0FF4 (lightVsp) = <default>
  global femData:MeshCell[] 0cell_a0FF5
  global femData:FemFunc c0FF6
  global real camNearVsp0FF7
  global real camFarVsp0FF8
  global tensor[3] camN0FF9
  global tensor[3] camU0FFA
  global tensor[3] camV0FFB
  global real camVmax0FFC
  global real camUmax0FFD
  global tensor[3] L0FFE
  global image(IMAGE1D<double[3]>) img0FFF
  global kernel _t1000
## functions
  function femData:MeshPos _0A7F_msh_newtonInverse1269 (tensor[2] pos126A#5, int cellInt126B#21, femData:Mesh mesh126C#27) {
    ENTRY126D:  preds = []
      real _t126E#2 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
      tensor[2] xn1270#37 = <tensor[2]>[_t126E,_t126E];
      int _t1272#1 = 0;
      int _t1274#1 = 16;
      int[] _t1276#1 = Range(_t1272,_t1274);
    FOREACH1279:  preds = [ASSIGN1277,NEXT1356]
      foreach (itter1278 in _t1276) on exit goto ASSIGN135B
        tensor[2] xn127B#15 = phi(xn1270,xn127A)
      int[3] femIndicies1288#1 = ExtractFemItem2<int,int[3],ExtractIndices(Mesh)>(mesh126C,cellInt126B);
      tensor[3,2] femDofs1289#4 = ExtractFemItem2<int[3],tensor[3,2],ExtractDofsSeq(Mesh)>(mesh126C,femIndicies1288);
      tensor[3,2] dofs1287#1 = femDofs1289;
      tensor[2,3] basisResult128A#1 = EvaluateBasis<BasisArray(2,3)>(xn1270);
      tensor[2,2] probe_l_10127C#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i3=0..2)<((T3_{i3,i0} * T4_{i1,i3}))>(i3=0..2)>_{2 2} (cellInt126B,mesh126C,xn1270,dofs1287,basisResult128A,xn1270);
      tensor[2,2] op1_e3_l_11127D#1 = λ(T0[2 2])<Σ(i2=0..1)<((ϵ_{ii2,ii0} * T0_{i2,i1}))>(i2=0..1)>_{2 2} (probe_l_10127C);
      tensor[3,2] dofs128B#1 = femDofs1289;
      tensor[2,3] basisResult128C#1 = EvaluateBasis<BasisArray(2,3)>(xn1270);
      tensor[2] probe_l_12127E#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i2=0..2)<((T3_{i2,i0} * T4_{'0',i2}))>(i2=0..2)>_{2} (cellInt126B,mesh126C,xn1270,dofs128B,basisResult128C,xn1270);
      tensor[3,2] dofs128D#1 = femDofs1289;
      tensor[2,3] basisResult128E#1 = EvaluateBasis<BasisArray(2,3)>(xn1270);
      tensor[2] probe_l_13127F#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i2=0..2)<((T3_{i2,i0} * T4_{'1',i2}))>(i2=0..2)>_{2} (cellInt126B,mesh126C,xn1270,dofs128D,basisResult128E,xn1270);
      tensor[2] op1_e3_l_141280#1 = λ(T0[2])<Σ(i1=0..1)<((ϵ_{ii0,ii1} * T0_{i1}))>(i1=0..1)>_{2} (probe_l_13127F);
      tensor[2,2] op1_e3_l_151281#1 = λ(T0[2 2])<Σ(i2=0..1)<((ϵ_{ii2,ii0} * T0_{i1,i2}))>(i2=0..1)>_{2 2} (op1_e3_l_11127D);
      real op1_e3_l_161282#1 = λ(T0[2],T1[2])<Σ(i0=0..1)<((T0_{i0} * T1_{i0}))>(i0=0..1)> (probe_l_12127E,op1_e3_l_141280);
      tensor[3,2] dofs128F#1 = femDofs1289;
      tensor[3] basisResult1290#1 = EvaluateBasis<BasisArray(3)>(xn127B);
      tensor[2] probe_l_171283#1 = λ(T0[2],INT1,FEM(msh)2,T3[3 2],T4[3],T5[2])<Σ(i1=0..2)<((T3_{i1,i0} * T4_{i1}))>(i1=0..2)>_{2} (xn127B,cellInt126B,mesh126C,dofs128F,basisResult1290,xn127B);
      tensor[2,2] op1_e3_l_181284#1 = λ(T0[2 2],T1[])<(T0_{i0,i1}) / ( T1)>_{2 2} (op1_e3_l_151281,op1_e3_l_161282);
      tensor[2] op1_e3_l_191285#1 = λ(T0[2],T1[2])<(T1_{i0}) - (T0_{i0})>_{2} (pos126A,probe_l_171283);
      tensor[2] op1_e3_l_201286#1 = λ(T0[2 2],T1[2])<Σ(i1=0..1)<((T0_{i0,i1} * T1_{i1}))>(i1=0..1)>_{2} (op1_e3_l_181284,op1_e3_l_191285);
      tensor[2] xn127A#2 = λ(T0[2],T1[2])<(T0_{i0}) - (T1_{i0})>_{2} (xn127B,op1_e3_l_201286);
      real _t12A7#2 = 0.1e-7;
      real _t12A9#1 = λ(T0[],T1[])<(T0 * T1)> (_t12A7,_t12A7);
      int[3] femIndicies12B8#1 = ExtractFemItem2<int,int[3],ExtractIndices(Mesh)>(mesh126C,cellInt126B);
      tensor[3,2] femDofs12B9#4 = ExtractFemItem2<int[3],tensor[3,2],ExtractDofsSeq(Mesh)>(mesh126C,femIndicies12B8);
      tensor[3,2] dofs12B7#1 = femDofs12B9;
      tensor[2,3] basisResult12BA#1 = EvaluateBasis<BasisArray(2,3)>(xn1270);
      tensor[2,2] probe_l_1812AC#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i3=0..2)<((T3_{i3,i0} * T4_{i1,i3}))>(i3=0..2)>_{2 2} (cellInt126B,mesh126C,xn1270,dofs12B7,basisResult12BA,xn1270);
      tensor[2,2] op1_e3_l_1912AD#1 = λ(T0[2 2])<Σ(i2=0..1)<((ϵ_{ii2,ii0} * T0_{i2,i1}))>(i2=0..1)>_{2 2} (probe_l_1812AC);
      tensor[3,2] dofs12BB#1 = femDofs12B9;
      tensor[2,3] basisResult12BC#1 = EvaluateBasis<BasisArray(2,3)>(xn1270);
      tensor[2] probe_l_2012AE#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i2=0..2)<((T3_{i2,i0} * T4_{'0',i2}))>(i2=0..2)>_{2} (cellInt126B,mesh126C,xn1270,dofs12BB,basisResult12BC,xn1270);
      tensor[3,2] dofs12BD#1 = femDofs12B9;
      tensor[2,3] basisResult12BE#1 = EvaluateBasis<BasisArray(2,3)>(xn1270);
      tensor[2] probe_l_2112AF#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i2=0..2)<((T3_{i2,i0} * T4_{'1',i2}))>(i2=0..2)>_{2} (cellInt126B,mesh126C,xn1270,dofs12BD,basisResult12BE,xn1270);
      tensor[2] op1_e3_l_2212B0#1 = λ(T0[2])<Σ(i1=0..1)<((ϵ_{ii0,ii1} * T0_{i1}))>(i1=0..1)>_{2} (probe_l_2112AF);
      tensor[2,2] op1_e3_l_2312B1#1 = λ(T0[2 2])<Σ(i2=0..1)<((ϵ_{ii2,ii0} * T0_{i1,i2}))>(i2=0..1)>_{2 2} (op1_e3_l_1912AD);
      real op1_e3_l_2412B2#1 = λ(T0[2],T1[2])<Σ(i0=0..1)<((T0_{i0} * T1_{i0}))>(i0=0..1)> (probe_l_2012AE,op1_e3_l_2212B0);
      tensor[3,2] dofs12BF#1 = femDofs12B9;
      tensor[3] basisResult12C0#1 = EvaluateBasis<BasisArray(3)>(xn127B);
      tensor[2] probe_l_2512B3#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[3],T5[2])<Σ(i1=0..2)<((T3_{i1,i0} * T4_{i1}))>(i1=0..2)>_{2} (cellInt126B,mesh126C,xn127B,dofs12BF,basisResult12C0,xn127B);
      tensor[2,2] op1_e3_l_2612B4#1 = λ(T0[2 2],T1[])<(T0_{i0,i1}) / ( T1)>_{2 2} (op1_e3_l_2312B1,op1_e3_l_2412B2);
      tensor[2] op1_e3_l_2712B5#1 = λ(T0[2],T1[2])<(T1_{i0}) - (T0_{i0})>_{2} (pos126A,probe_l_2512B3);
      tensor[2] op1_e3_l_3812B6#2 = λ(T0[2 2],T1[2])<Σ(i1=0..1)<((T0_{i0,i1} * T1_{i1}))>(i1=0..1)>_{2} (op1_e3_l_2612B4,op1_e3_l_2712B5);
      real _t12AB#1 = λ(T0[2],T1[2])<Σ(i0=0..1)<((T0_{i0} * T1_{i0}))>(i0=0..1)> (op1_e3_l_3812B6,op1_e3_l_3812B6);
      bool _t12D7#1 = GTE<real>(_t12A9,_t12AB);
      if _t12D7 then goto ASSIGN12DB else goto JOIN1355
    ASSIGN12DB:  preds = [COND12D9]
      real _t12DA#3 = 0.1e1;
      real _t12DC#3 = 0.1e-8;
      real _t12DE#1 = λ(T0[],T1[])<(T0 + T1)> (_t12DA,_t12DC);
      tensor[2] _t12E0#1 = <tensor[2]>[_t12DA,_t12DA];
      int[3] femIndicies12F0#1 = ExtractFemItem2<int,int[3],ExtractIndices(Mesh)>(mesh126C,cellInt126B);
      tensor[3,2] femDofs12F1#4 = ExtractFemItem2<int[3],tensor[3,2],ExtractDofsSeq(Mesh)>(mesh126C,femIndicies12F0);
      tensor[3,2] dofs12EF#1 = femDofs12F1;
      tensor[2,3] basisResult12F2#1 = EvaluateBasis<BasisArray(2,3)>(xn1270);
      tensor[2,2] probe_l_1112E3#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i3=0..2)<((T3_{i3,i0} * T4_{i1,i3}))>(i3=0..2)>_{2 2} (cellInt126B,mesh126C,xn1270,dofs12EF,basisResult12F2,xn1270);
      tensor[2,2] op1_e3_l_1212E4#1 = λ(T0[2 2])<Σ(i2=0..1)<((ϵ_{ii2,ii0} * T0_{i2,i1}))>(i2=0..1)>_{2 2} (probe_l_1112E3);
      tensor[3,2] dofs12F3#1 = femDofs12F1;
      tensor[2,3] basisResult12F4#1 = EvaluateBasis<BasisArray(2,3)>(xn1270);
      tensor[2] probe_l_1312E5#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i2=0..2)<((T3_{i2,i0} * T4_{'0',i2}))>(i2=0..2)>_{2} (cellInt126B,mesh126C,xn1270,dofs12F3,basisResult12F4,xn1270);
      tensor[3,2] dofs12F5#1 = femDofs12F1;
      tensor[2,3] basisResult12F6#1 = EvaluateBasis<BasisArray(2,3)>(xn1270);
      tensor[2] probe_l_1412E6#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i2=0..2)<((T3_{i2,i0} * T4_{'1',i2}))>(i2=0..2)>_{2} (cellInt126B,mesh126C,xn1270,dofs12F5,basisResult12F6,xn1270);
      tensor[2] op1_e3_l_1512E7#1 = λ(T0[2])<Σ(i1=0..1)<((ϵ_{ii0,ii1} * T0_{i1}))>(i1=0..1)>_{2} (probe_l_1412E6);
      tensor[2,2] op1_e3_l_1612E8#1 = λ(T0[2 2])<Σ(i2=0..1)<((ϵ_{ii2,ii0} * T0_{i1,i2}))>(i2=0..1)>_{2 2} (op1_e3_l_1212E4);
      real op1_e3_l_1712E9#1 = λ(T0[2],T1[2])<Σ(i0=0..1)<((T0_{i0} * T1_{i0}))>(i0=0..1)> (probe_l_1312E5,op1_e3_l_1512E7);
      tensor[3,2] dofs12F7#1 = femDofs12F1;
      tensor[3] basisResult12F8#1 = EvaluateBasis<BasisArray(3)>(xn127B);
      tensor[2] probe_l_1812EA#1 = λ(T0[2],INT1,FEM(msh)2,T3[3 2],T4[3],T5[2])<Σ(i1=0..2)<((T3_{i1,i0} * T4_{i1}))>(i1=0..2)>_{2} (xn127B,cellInt126B,mesh126C,dofs12F7,basisResult12F8,xn127B);
      tensor[2,2] op1_e3_l_1912EB#1 = λ(T0[2 2],T1[])<(T0_{i0,i1}) / ( T1)>_{2 2} (op1_e3_l_1612E8,op1_e3_l_1712E9);
      tensor[2] op1_e3_l_2012EC#1 = λ(T0[2],T1[2])<(T1_{i0}) - (T0_{i0})>_{2} (pos126A,probe_l_1812EA);
      tensor[2] op1_e3_l_2112ED#1 = λ(T0[2 2],T1[2])<Σ(i1=0..1)<((T0_{i0,i1} * T1_{i1}))>(i1=0..1)>_{2} (op1_e3_l_1912EB,op1_e3_l_2012EC);
      tensor[2] op1_e3_l_2212EE#1 = λ(T0[2],T1[2])<(T0_{i0}) - (T1_{i0})>_{2} (xn127B,op1_e3_l_2112ED);
      real _t12E2#1 = λ(T0[2],T1[2])<Σ(i0=0..1)<((T0_{i0} * T1_{i0}))>(i0=0..1)> (_t12E0,op1_e3_l_2212EE);
      bool _t1310#1 = GT<real>(_t12DE,_t12E2);
      tensor[2] _t1312#1 = <tensor[2]>[_t12DC,_t12DC];
      int[3] femIndicies1322#1 = ExtractFemItem2<int,int[3],ExtractIndices(Mesh)>(mesh126C,cellInt126B);
      tensor[3,2] femDofs1323#4 = ExtractFemItem2<int[3],tensor[3,2],ExtractDofsSeq(Mesh)>(mesh126C,femIndicies1322);
      tensor[3,2] dofs1321#1 = femDofs1323;
      tensor[2,3] basisResult1324#1 = EvaluateBasis<BasisArray(2,3)>(xn1270);
      tensor[2,2] probe_l_111315#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i3=0..2)<((T3_{i3,i0} * T4_{i1,i3}))>(i3=0..2)>_{2 2} (cellInt126B,mesh126C,xn1270,dofs1321,basisResult1324,xn1270);
      tensor[2,2] op1_e3_l_121316#1 = λ(T0[2 2])<Σ(i2=0..1)<((ϵ_{ii2,ii0} * T0_{i2,i1}))>(i2=0..1)>_{2 2} (probe_l_111315);
      tensor[3,2] dofs1325#1 = femDofs1323;
      tensor[2,3] basisResult1326#1 = EvaluateBasis<BasisArray(2,3)>(xn1270);
      tensor[2] probe_l_131317#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i2=0..2)<((T3_{i2,i0} * T4_{'0',i2}))>(i2=0..2)>_{2} (cellInt126B,mesh126C,xn1270,dofs1325,basisResult1326,xn1270);
      tensor[3,2] dofs1327#1 = femDofs1323;
      tensor[2,3] basisResult1328#1 = EvaluateBasis<BasisArray(2,3)>(xn1270);
      tensor[2] probe_l_141318#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i2=0..2)<((T3_{i2,i0} * T4_{'1',i2}))>(i2=0..2)>_{2} (cellInt126B,mesh126C,xn1270,dofs1327,basisResult1328,xn1270);
      tensor[2] op1_e3_l_151319#1 = λ(T0[2])<Σ(i1=0..1)<((ϵ_{ii0,ii1} * T0_{i1}))>(i1=0..1)>_{2} (probe_l_141318);
      tensor[2,2] op1_e3_l_16131A#1 = λ(T0[2 2])<Σ(i2=0..1)<((ϵ_{ii2,ii0} * T0_{i1,i2}))>(i2=0..1)>_{2 2} (op1_e3_l_121316);
      real op1_e3_l_17131B#1 = λ(T0[2],T1[2])<Σ(i0=0..1)<((T0_{i0} * T1_{i0}))>(i0=0..1)> (probe_l_131317,op1_e3_l_151319);
      tensor[3,2] dofs1329#1 = femDofs1323;
      tensor[3] basisResult132A#1 = EvaluateBasis<BasisArray(3)>(xn127B);
      tensor[2] probe_l_18131C#1 = λ(T0[2],INT1,FEM(msh)2,T3[3 2],T4[3],T5[2])<Σ(i1=0..2)<((T3_{i1,i0} * T4_{i1}))>(i1=0..2)>_{2} (xn127B,cellInt126B,mesh126C,dofs1329,basisResult132A,xn127B);
      tensor[2,2] op1_e3_l_19131D#1 = λ(T0[2 2],T1[])<(T0_{i0,i1}) / ( T1)>_{2 2} (op1_e3_l_16131A,op1_e3_l_17131B);
      tensor[2] op1_e3_l_20131E#1 = λ(T0[2],T1[2])<(T1_{i0}) - (T0_{i0})>_{2} (pos126A,probe_l_18131C);
      tensor[2] op1_e3_l_21131F#1 = λ(T0[2 2],T1[2])<Σ(i1=0..1)<((T0_{i0,i1} * T1_{i1}))>(i1=0..1)>_{2} (op1_e3_l_19131D,op1_e3_l_20131E);
      tensor[2] op1_e3_l_221320#1 = λ(T0[2],T1[2])<(T0_{i0}) - (T1_{i0})>_{2} (xn127B,op1_e3_l_21131F);
      tensor[2] _t1314#2 = λ(T0[2],T1[2])<(T0_{i0} + T1_{i0})>_{2} (_t1312,op1_e3_l_221320);
      real _t1342#1 = TensorIndex<tensor[2],[0]>(_t1314);
      real _t1344#2 = -0.e0;
      bool _t1346#1 = GT<real>(_t1342,_t1344);
      real _t1348#1 = TensorIndex<tensor[2],[1]>(_t1314);
      bool _t134A#1 = GT<real>(_t1348,_t1344);
      bool _t134C#1 = BAnd(_t1346,_t134A);
      bool _t134E#1 = BAnd(_t1310,_t134C);
      if _t134E then goto ASSIGN1352 else goto ASSIGN1358
    ASSIGN1352:  preds = [COND1350]
      femData:MeshPos _t1351#1 = ExtractFemItemN<[femData:Mesh,int,tensor[2],tensor[2]],femData:MeshPos,AllBuild(MeshPos),0000,"",[],int>(mesh126C,cellInt126B,xn127A,pos126A);
      return _t1351
      goto JOIN1354
    JOIN1354:  preds = [*RETURN(_t1351)1353,*RETURN(_t1357)1359]
      goto JOIN1355
    JOIN1355:  preds = [*JOIN1354,COND12D9]
      goto FOREACH1279
    ASSIGN1358:  preds = [COND1350]
      femData:MeshPos _t1357#1 = ExtractFemItemN<[femData:Mesh],femData:MeshPos,InvalidBuild(MeshPos),0000,"",[],int>(mesh126C);
      return _t1357
      goto JOIN1354
    ASSIGN135B:  preds = [FOREACH1279]
      femData:MeshPos _t135A#1 = ExtractFemItemN<[femData:Mesh],femData:MeshPos,InvalidBuild(MeshPos),0000,"",[],int>(mesh126C);
      return _t135A
}
## input initialization
  ENTRY1001:  preds = []
    real isoval1002#1 = 0.2e0;
    globals.isoval0FD6 = isoval1002;
    real thick1005#1 = 0.7e-1;
    globals.thick0FD7 = thick1005;
    real _t1008#2 = 0.3e1;
    real _t100A#1 = -0.3e1;
    tensor[3] camEye100C#1 = <tensor[3]>[_t1008,_t100A,_t1008];
    globals.camEye0FD8 = camEye100C;
    real _t100F#5 = 0.5e0;
    tensor[3] camAt1011#1 = <tensor[3]>[_t100F,_t100F,_t100F];
    globals.camAt0FD9 = camAt1011;
    real _t1014#4 = 0.e0;
    real _t1016#7 = 0.1e1;
    tensor[3] camUp1018#2 = <tensor[3]>[_t1014,_t1014,_t1016];
    globals.camUp0FDA = camUp1018;
    real camFOV101B#1 = 0.137e2;
    globals.camFOV0FDB = camFOV101B;
    int iresU101E#2 = 10;
    globals.iresU0FDC = iresU101E;
    globals.iresV0FDD = iresU101E;
    real camNear1022#1 = -0.2e1;
    globals.camNear0FDE = camNear1022;
    real camFar1025#1 = 0.5e1;
    globals.camFar0FDF = camFar1025;
    globals.refStep0FE0 = _t1016;
    real rayStep1029#1 = 0.1e-1;
    globals.rayStep0FE1 = rayStep1029;
    real eps102C#1 = 0.1e-5;
    globals.eps0FE5 = eps102C;
    tensor[3] mcnear102F#2 = <tensor[3]>[_t1016,_t1016,_t1016];
    globals.mcnear0FE9 = mcnear102F;
    globals.mcfar0FEA = mcnear102F;
    globals.cmin0FEC = _t1014;
    globals.cmax0FED = _t1016;
    bool light1035#1 = true;
    globals.light0FEE = light1035;
    globals.phongKa0FEF = _t100F;
    globals.phongKd0FF0 = _t100F;
    globals.phongKs0FF1 = _t1014;
    real phongSp103B#1 = 0.6e2;
    globals.phongSp0FF2 = phongSp103B;
    globals.maxAlpha0FF3 = _t1016;
    globals.lightVsp0FF4 = camUp1018;
    return
## global-variable initialization
  ENTRY1041:  preds = []
    tensor[3] camEye1042#7 = globals.camEye0FD8;
    tensor[3] camAt1044#7 = globals.camAt0FD9;
    tensor[3] camUp1046#2 = globals.camUp0FDA;
    real camFOV1048#2 = globals.camFOV0FDB;
    int iresU104A#1 = globals.iresU0FDC;
    int iresV104C#1 = globals.iresV0FDD;
    real camNear104E#1 = globals.camNear0FDE;
    real camFar1050#1 = globals.camFar0FDF;
    femData:Mesh a1052#3 = globals.a0FE2;
    femData:Space 0b0472_intermedateGlobal1054#1 = globals.0b0472_intermedateGlobal0FE3;
    femData:FemFunc 0c0474_intermedateGlobal1056#1 = globals.0c0474_intermedateGlobal0FE4;
    image(IMAGE1D<double[3]>) cmap1058#1 = globals.cmap0FEB;
    tensor[3] lightVsp105A#2 = globals.lightVsp0FF4;
    int _t105C#1 = 0;
    int _t105E#1 = 1;
    int _t1060#1 = ExtractFemItem<int,NumCell(Mesh)>(a1052);
    int _t1062#1 = ISub(_t1060,_t105E);
    int[] _t1064#1 = Range(_t105C,_t1062);
    femData:MeshCell[] _t1066#1 = <femData:MeshCell[]>{};
  FOREACH1069:  preds = [ASSIGN1067,NEXT106F]
    foreach (_t1068 in _t1064) on exit goto GASSIGN1070
      femData:MeshCell[] _t106D#2 = phi(_t1066,_t106C)
    femData:MeshCell _t106A#1 = LoadFem<femData:MeshCell>(a1052,_t1068);
    femData:MeshCell[] _t106C#1 = Append<femData:MeshCell>(_t106D,_t106A);
    goto FOREACH1069
  GASSIGN1070:  preds = [FOREACH1069]
    globals.0cell_a0FF5 = _t106D;
    femData:Space b1071#1 = LoadFem<femData:Space>(0b0472_intermedateGlobal1054,a1052);
    femData:FemFunc c1073#1 = LoadFem<femData:FemFunc>(0c0474_intermedateGlobal1056,b1071);
    globals.c0FF6 = c1073;
    tensor[3] op1_e3_l_31077#2 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (camAt1044,camEye1042);
    real op1_e3_l_51078#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_31077,op1_e3_l_31077);
    real op1_e3_l_61079#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_51078);
    real camNearVsp1076#1 = λ(T0[],T1[])<(T0 + T1)> (camNear104E,op1_e3_l_61079);
    globals.camNearVsp0FF7 = camNearVsp1076;
    tensor[3] op1_e3_l_31080#2 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (camAt1044,camEye1042);
    real op1_e3_l_51081#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_31080,op1_e3_l_31080);
    real op1_e3_l_61082#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_51081);
    real camFarVsp107F#1 = λ(T0[],T1[])<(T0 + T1)> (camFar1050,op1_e3_l_61082);
    globals.camFarVsp0FF8 = camFarVsp107F;
    tensor[3] op1_e3_l_41089#3 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (camAt1044,camEye1042);
    real op1_e3_l_6108A#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_41089,op1_e3_l_41089);
    real op1_e3_l_7108B#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_6108A);
    real op1_e3_l_9108C#1 = λ(T0[])<(1) / ( T0)> (op1_e3_l_7108B);
    tensor[3] camN1088#2 = λ(T0[3],T1[])<(T0_{i0} * T1)>_{3} (op1_e3_l_41089,op1_e3_l_9108C);
    globals.camN0FF9 = camN1088;
    tensor[3] op1_e3_l_101094#3 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (camAt1044,camEye1042);
    real op1_e3_l_121095#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_101094,op1_e3_l_101094);
    real op1_e3_l_131096#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_121095);
    tensor[3,3] op1_e3_l_151097#1 = λ(T0[3])<Σ(i2=0..2)<((ϵ_{ii0,ii1,ii2} * T0_{i2}))>(i2=0..2)>_{3 3} (camUp1046);
    real op1_e3_l_161098#3 = λ(T0[])<(1) / ( T0)> (op1_e3_l_131096);
    tensor[3] op1_e3_l_171099#3 = λ(T0[3],T1[3 3])<Σ(i1=0..2)<((T0_{i1} * T1_{i0,i1}))>(i1=0..2)>_{3} (op1_e3_l_101094,op1_e3_l_151097);
    real op1_e3_l_34109A#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_171099,op1_e3_l_171099);
    real op1_e3_l_35109B#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (op1_e3_l_161098,op1_e3_l_161098,op1_e3_l_34109A);
    real op1_e3_l_36109C#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_35109B);
    tensor[3] op1_e3_l_37109D#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (op1_e3_l_161098,op1_e3_l_171099);
    real op1_e3_l_38109E#1 = λ(T0[])<(1) / ( T0)> (op1_e3_l_36109C);
    tensor[3] camU1093#2 = λ(T0[3],T1[])<(T0_{i0} * T1)>_{3} (op1_e3_l_37109D,op1_e3_l_38109E);
    globals.camU0FFA = camU1093;
    tensor[3] op1_e3_l_1410AD#4 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (camAt1044,camEye1042);
    real op1_e3_l_1610AE#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_1410AD,op1_e3_l_1410AD);
    real op1_e3_l_1710AF#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_1610AE);
    tensor[3,3] op1_e3_l_2310B0#1 = λ(T0[3])<Σ(i2=0..2)<((ϵ_{ii0,ii1,ii2} * T0_{i2}))>(i2=0..2)>_{3 3} (camUp1046);
    tensor[3] op1_e3_l_2610B1#3 = λ(T0[3],T1[3 3])<Σ(i1=0..2)<((T0_{i1} * T1_{i0,i1}))>(i1=0..2)>_{3} (op1_e3_l_1410AD,op1_e3_l_2310B0);
    real op1_e3_l_2810B2#4 = λ(T0[])<(1) / ( T0)> (op1_e3_l_1710AF);
    real op1_e3_l_3010B3#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_2610B1,op1_e3_l_2610B1);
    real op1_e3_l_3110B4#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (op1_e3_l_2810B2,op1_e3_l_2810B2,op1_e3_l_3010B3);
    real op1_e3_l_3210B5#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_3110B4);
    tensor[3,3] op1_e3_l_4510B6#1 = λ(T0[3])<Σ(i2=0..2)<((ϵ_{ii0,ii1,ii2} * T0_{i2}))>(i2=0..2)>_{3 3} (op1_e3_l_1410AD);
    tensor[3] op1_e3_l_4710B7#1 = λ(T0[3],T1[3 3])<Σ(i1=0..2)<((T0_{i1} * T1_{i0,i1}))>(i1=0..2)>_{3} (op1_e3_l_2610B1,op1_e3_l_4510B6);
    real op1_e3_l_4810B8#1 = λ(T0[])<(1) / ( T0)> (op1_e3_l_3210B5);
    tensor[3] op1_e3_l_5010B9#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (op1_e3_l_2810B2,op1_e3_l_4710B7);
    tensor[3] camV10AC#2 = λ(T0[],T1[],T2[3])<(T0 * T1 * T2_{i0})>_{3} (op1_e3_l_4810B8,op1_e3_l_2810B2,op1_e3_l_5010B9);
    globals.camV0FFB = camV10AC;
    real _t10C9#2 = 0.314159265358979323846264338327950288e1;
    real _t10CB#2 = 0.36e3;
    real op1_e3_l_510CE#1 = λ(T0[],T1[])<(T0 * T1)> (camFOV1048,_t10C9);
    real op1_e3_l_610CF#1 = λ(T0[],T1[])<(T1) / ( T0)> (_t10CB,op1_e3_l_510CE);
    tensor[3] op1_e3_l_710D0#2 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (camAt1044,camEye1042);
    real op1_e3_l_910D1#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_710D0,op1_e3_l_710D0);
    real op1_e3_l_1010D2#1 = λ(T0[])<Tangent(T0)> (op1_e3_l_610CF);
    real op1_e3_l_1110D3#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_910D1);
    real camVmax10CD#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_1010D2,op1_e3_l_1110D3);
    globals.camVmax0FFC = camVmax10CD;
    real _t10DC#1 = IntToReal(iresU104A);
    real _t10DE#1 = IntToReal(iresV104C);
    real op1_e3_l_710E1#1 = λ(T0[],T1[])<(T0 * T1)> (camFOV1048,_t10C9);
    real op1_e3_l_810E2#1 = λ(T0[],T1[])<(T1) / ( T0)> (_t10CB,op1_e3_l_710E1);
    tensor[3] op1_e3_l_910E3#2 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (camAt1044,camEye1042);
    real op1_e3_l_1110E4#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_910E3,op1_e3_l_910E3);
    real op1_e3_l_1210E5#1 = λ(T0[])<Tangent(T0)> (op1_e3_l_810E2);
    real op1_e3_l_1310E6#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_1110E4);
    real op1_e3_l_1410E7#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t10DC,op1_e3_l_1210E5,op1_e3_l_1310E6);
    real camUmax10E0#1 = λ(T0[],T1[])<(T1) / ( T0)> (_t10DE,op1_e3_l_1410E7);
    globals.camUmax0FFD = camUmax10E0;
    kernel _t10F1#1 = Kernel<tent,0>;
    image(IMAGE1D<double[3]>) img10F3#1 = BorderCtlClamp<IMAGE1D<double[3]>>(cmap1058);
    tensor[3,3] _t10F5#1 = <tensor[3,3]>[camU1093,camV10AC,camN1088];
    real op1_e3_l_310F8#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (lightVsp105A);
    real op1_e3_l_410F9#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_310F8);
    real op1_e3_l_510FA#1 = λ(T0[])<(1) / ( T0)> (op1_e3_l_410F9);
    tensor[3] op1_e3_l_610FB#1 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i1,i0} * T1_{i1}))>(i1=0..2)>_{3} (_t10F5,lightVsp105A);
    tensor[3] L10F7#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (op1_e3_l_510FA,op1_e3_l_610FB);
    globals.L0FFE = L10F7;
    globals.img0FFF = img10F3;
    globals._t1000 = _t10F1;
    return
## strand
  strand ray (int ui1105#2, int vi1106#3)
    state:
      real rayU;
      real rayV;
      tensor[3] UV;
      tensor[3] rayOrig;
      tensor[3] rayVec;
      real camNearVsp;
      real camFarVsp;
      int offset;
      int len;
      int itter;
      int intersectionItter;
      int idx;
      tensor[2] interval;
      real s;
      real e;
      femData:MeshCell cc;
      femData:FuncCell fc;
      output real out;
      output tensor[4] rgba;
    state init
      ENTRY111A:  preds = []
        tensor[3] camEye111B#1 = globals.camEye0FD8;
        int iresU111D#2 = globals.iresU0FDC;
        int iresV111F#3 = globals.iresV0FDD;
        femData:MeshCell[] 0cell_a1121#1 = globals.0cell_a0FF5;
        femData:FemFunc c1123#1 = globals.c0FF6;
        int[] indecies1125#2 = globals.indecies0FE6;
        tensor[2][] times1127#1 = globals.times0FE7;
        real camNearVsp1129#1 = globals.camNearVsp0FF7;
        real camFarVsp112B#1 = globals.camFarVsp0FF8;
        tensor[3] camN112D#1 = globals.camN0FF9;
        tensor[3] camU112F#2 = globals.camU0FFA;
        tensor[3] camV1131#2 = globals.camV0FFB;
        real camVmax1133#6 = globals.camVmax0FFC;
        real camUmax1135#6 = globals.camUmax0FFD;
        real _t1137#12 = -0.5e0;
        real _t1139#3 = IntToReal(ui1105);
        real _t113B#3 = IntToReal(iresU111D);
        real _t113D#6 = 0.5e0;
        real op1_e3_l_61140#1 = λ(T0[],T1[])<(T0) - (T1)> (_t113B,_t113D);
        real op1_e3_l_71141#1 = λ(T0[],T1[])<(T1) - (T0)> (_t1137,_t1139);
        real op1_e3_l_81142#1 = λ(T0[],T1[])<(T1) - (T0)> (_t1137,op1_e3_l_61140);
        real op1_e3_l_91143#2 = λ(T0[])<Neg(T0)> (camUmax1135);
        real op1_e3_l_101144#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_71141,op1_e3_l_81142);
        real op1_e3_l_111145#1 = λ(T0[],T1[])<(T0) - (T1)> (camUmax1135,op1_e3_l_91143);
        real op1_e3_l_131146#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_101144,op1_e3_l_111145);
        real rayU113F#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_91143,op1_e3_l_131146);
        real _t114F#3 = IntToReal(vi1106);
        real _t1151#3 = IntToReal(iresV111F);
        real op1_e3_l_61154#1 = λ(T0[],T1[])<(T0) - (T1)> (_t1151,_t113D);
        real op1_e3_l_71155#1 = λ(T0[],T1[])<(T1) - (T0)> (_t1137,_t114F);
        real op1_e3_l_81156#1 = λ(T0[],T1[])<(T1) - (T0)> (_t1137,op1_e3_l_61154);
        real op1_e3_l_91157#2 = λ(T0[])<Neg(T0)> (camVmax1133);
        real op1_e3_l_101158#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_71155,op1_e3_l_81156);
        real op1_e3_l_111159#1 = λ(T0[],T1[])<(T0) - (T1)> (camVmax1133,op1_e3_l_91157);
        real op1_e3_l_13115A#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_101158,op1_e3_l_111159);
        real rayV1153#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_91157,op1_e3_l_13115A);
        real op1_e3_l_141164#1 = λ(T0[],T1[])<(T0) - (T1)> (_t113B,_t113D);
        real op1_e3_l_151165#1 = λ(T0[],T1[])<(T1) - (T0)> (_t1137,_t1139);
        real op1_e3_l_161166#1 = λ(T0[],T1[])<(T1) - (T0)> (_t1137,op1_e3_l_141164);
        real op1_e3_l_171167#2 = λ(T0[])<Neg(T0)> (camUmax1135);
        real op1_e3_l_181168#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_151165,op1_e3_l_161166);
        real op1_e3_l_191169#1 = λ(T0[],T1[])<(T0) - (T1)> (camUmax1135,op1_e3_l_171167);
        real op1_e3_l_21116A#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_181168,op1_e3_l_191169);
        real op1_e3_l_22116B#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_171167,op1_e3_l_21116A);
        real op1_e3_l_23116C#1 = λ(T0[],T1[])<(T1) - (T0)> (_t113D,_t1151);
        real op1_e3_l_24116D#1 = λ(T0[],T1[])<(T1) - (T0)> (_t1137,_t114F);
        real op1_e3_l_25116E#1 = λ(T0[],T1[])<(T1) - (T0)> (_t1137,op1_e3_l_23116C);
        real op1_e3_l_26116F#2 = λ(T0[])<Neg(T0)> (camVmax1133);
        real op1_e3_l_271170#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_24116D,op1_e3_l_25116E);
        real op1_e3_l_281171#1 = λ(T0[],T1[])<(T0) - (T1)> (camVmax1133,op1_e3_l_26116F);
        real op1_e3_l_301172#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_271170,op1_e3_l_281171);
        real op1_e3_l_311173#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_26116F,op1_e3_l_301172);
        tensor[3] op1_e3_l_321174#1 = λ(T0[3],T1[])<(T1 * T0_{i0})>_{3} (camU112F,op1_e3_l_22116B);
        tensor[3] op1_e3_l_331175#1 = λ(T0[3],T1[])<(T1 * T0_{i0})>_{3} (camV1131,op1_e3_l_311173);
        tensor[3] UV1163#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (op1_e3_l_321174,op1_e3_l_331175);
        real op1_e3_l_15118A#1 = λ(T0[],T1[])<(T0) - (T1)> (_t113B,_t113D);
        real op1_e3_l_16118B#1 = λ(T0[],T1[])<(T1) - (T0)> (_t1137,_t1139);
        real op1_e3_l_17118C#1 = λ(T0[],T1[])<(T1) - (T0)> (_t1137,op1_e3_l_15118A);
        real op1_e3_l_18118D#2 = λ(T0[])<Neg(T0)> (camUmax1135);
        real op1_e3_l_19118E#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_16118B,op1_e3_l_17118C);
        real op1_e3_l_20118F#1 = λ(T0[],T1[])<(T0) - (T1)> (camUmax1135,op1_e3_l_18118D);
        real op1_e3_l_221190#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_19118E,op1_e3_l_20118F);
        real op1_e3_l_231191#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_18118D,op1_e3_l_221190);
        real op1_e3_l_241192#1 = λ(T0[],T1[])<(T1) - (T0)> (_t113D,_t1151);
        real op1_e3_l_251193#1 = λ(T0[],T1[])<(T1) - (T0)> (_t1137,_t114F);
        real op1_e3_l_261194#1 = λ(T0[],T1[])<(T1) - (T0)> (_t1137,op1_e3_l_241192);
        real op1_e3_l_271195#2 = λ(T0[])<Neg(T0)> (camVmax1133);
        real op1_e3_l_281196#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_251193,op1_e3_l_261194);
        real op1_e3_l_291197#1 = λ(T0[],T1[])<(T0) - (T1)> (camVmax1133,op1_e3_l_271195);
        real op1_e3_l_311198#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_281196,op1_e3_l_291197);
        real op1_e3_l_321199#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_271195,op1_e3_l_311198);
        tensor[3] op1_e3_l_33119A#1 = λ(T0[3],T1[])<(T1 * T0_{i0})>_{3} (camU112F,op1_e3_l_231191);
        tensor[3] op1_e3_l_34119B#1 = λ(T0[3],T1[])<(T1 * T0_{i0})>_{3} (camV1131,op1_e3_l_321199);
        tensor[3] rayOrig1189#1 = λ(T0[3],T1[3],T2[3])<(T0_{i0} + T1_{i0} + T2_{i0})>_{3} (camEye111B,op1_e3_l_33119A,op1_e3_l_34119B);
        real _t11AF#8 = 0.e0;
        tensor[3] _t11B1#1 = <tensor[3]>[_t11AF,_t11AF,_t11AF];
        tensor[3] rayVec11B3#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (camN112D,_t11B1);
        int _t11B5#2 = IMul(ui1105,iresV111F);
        int _t11B7#1 = IAdd(_t11B5,vi1106);
        int offset11B9#2 = Subscript<int[]>(indecies1125,_t11B7);
        int _t11BB#1 = IMul(iresU111D,iresV111F);
        int _t11BD#1 = IAdd(_t11BB,_t11B5);
        int _t11BF#1 = IAdd(_t11BD,vi1106);
        int len11C1#1 = Subscript<int[]>(indecies1125,_t11BF);
        int itter11C3#4 = 0;
        int idx11C5#2 = IAdd(offset11B9,itter11C3);
        tensor[2] interval11C7#3 = Subscript<tensor[2][]>(times1127,idx11C5);
        real s11C9#1 = TensorIndex<tensor[2],[0]>(interval11C7);
        real e11CB#1 = TensorIndex<tensor[2],[1]>(interval11C7);
        femData:MeshCell cc11CD#2 = Subscript<femData:MeshCell[]>(0cell_a1121,itter11C3);
        int _t11CF#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc11CD);
        femData:FuncCell _t11D1#1 = LoadFem<femData:FuncCell>(c1123,_t11CF);
        tensor[4] rgba11D3#1 = <tensor[4]>[_t11AF,_t11AF,_t11AF,_t11AF];
        self.rayU = rayU113F;
        self.rayV = rayV1153;
        self.UV = UV1163;
        self.rayOrig = rayOrig1189;
        self.rayVec = rayVec11B3;
        self.camNearVsp = camNearVsp1129;
        self.camFarVsp = camFarVsp112B;
        self.offset = offset11B9;
        self.len = len11C1;
        self.itter = itter11C3;
        self.intersectionItter = itter11C3;
        self.idx = idx11C5;
        self.interval = interval11C7;
        self.s = s11C9;
        self.e = e11CB;
        self.cc = cc11CD;
        self.fc = _t11D1;
        self.out = _t11AF;
        self.rgba = rgba11D3;
        return
    end state init
    method start
        ENTRY11E9:  preds = []
          femData:MeshCell[] 0cell_a11EA#1 = globals.0cell_a0FF5;
          femData:FemFunc c11EC#1 = globals.c0FF6;
          int[] cells11EE#1 = globals.cells0FE8;
          int len11F0#1 = self.len;
          int idx11F2#1 = self.idx;
          int _t11F4#1 = 0;
          bool _t11F6#1 = EQ<int>(len11F0,_t11F4);
          if _t11F6 then goto STABILIZE11F9 else goto JOIN11FA
        STABILIZE11F9:  preds = [COND11F8]
          stabilize
          goto JOIN11FA
        JOIN11FA:  preds = [*STABILIZE11F9,COND11F8]
          int _t11FB#1 = Subscript<int[]>(cells11EE,idx11F2);
          femData:MeshCell cc11FD#2 = Subscript<femData:MeshCell[]>(0cell_a11EA,_t11FB);
          int _t11FF#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc11FD);
          femData:FuncCell _t1201#1 = LoadFem<femData:FuncCell>(c11EC,_t11FF);
          self.cc = cc11FD;
          self.fc = _t1201;
          active
    end start
    method update
        ENTRY1206:  preds = []
          image(IMAGE1D<double[3]>) cmap16AD#3 = globals.cmap0FEB;
          image(IMAGE1D<double[3]>) img1207#1 = globals.img0FFF;
          kernel _t1209#1 = globals._t1000;
          femData:MeshCell[] 0cell_a120B#1 = globals.0cell_a0FF5;
          femData:FemFunc c120D#1 = globals.c0FF6;
          real eps120F#8 = globals.eps0FE5;
          tensor[2][] times1211#1 = globals.times0FE7;
          int[] cells1213#1 = globals.cells0FE8;
          tensor[3] mcnear1215#2 = globals.mcnear0FE9;
          tensor[3] mcfar1217#1 = globals.mcfar0FEA;
          real cmin1219#3 = globals.cmin0FEC;
          real cmax121B#2 = globals.cmax0FED;
          bool light121D#1 = globals.light0FEE;
          real phongKa121F#1 = globals.phongKa0FEF;
          real phongKd1221#1 = globals.phongKd0FF0;
          real phongKs1223#1 = globals.phongKs0FF1;
          real phongSp1225#1 = globals.phongSp0FF2;
          tensor[3] L1227#2 = globals.L0FFE;
          tensor[3] rayOrig1229#3 = self.rayOrig;
          tensor[3] rayVec122B#5 = self.rayVec;
          real camNearVsp122D#2 = self.camNearVsp;
          real camFarVsp122F#1 = self.camFarVsp;
          int offset1231#1 = self.offset;
          int len1233#1 = self.len;
          int itter1235#2 = self.itter;
          int intersectionItter1237#2 = self.intersectionItter;
          real s1239#14 = self.s;
          real e123B#15 = self.e;
          femData:MeshCell cc123D#2 = self.cc;
          femData:FuncCell fc123F#2 = self.fc;
          real out1241#1 = self.out;
          string _t1243#1 = "Interval:";
          tensor[2] _t1245#1 = <tensor[2]>[s1239,e123B];
          string _t1247#10 = "\n";
          Print<[string,tensor[2],string]>(_t1243,_t1245,_t1247);
          string _t124A#1 = "inner itter:";
          Print<[string,int,string]>(_t124A,intersectionItter1237,_t1247);
          string _t124D#1 = "Outer itter:";
          Print<[string,int,string]>(_t124D,itter1235,_t1247);
          real _t1250#1 = TensorIndex<tensor[3],[0]>(rayOrig1229);
          real _t1252#1 = TensorIndex<tensor[3],[1]>(rayOrig1229);
          tensor[2] _t1254#3 = <tensor[2]>[_t1250,_t1252];
          real _t1256#1 = TensorIndex<tensor[3],[0]>(rayVec122B);
          real _t1258#1 = TensorIndex<tensor[3],[1]>(rayVec122B);
          tensor[2] _t125A#3 = <tensor[2]>[_t1256,_t1258];
          tensor[2] op1_e3_l_3125D#1 = λ(T0[],T1[2])<(T0 * T1_{i0})>_{2} (s1239,_t125A);
          tensor[2] startRay125C#5 = λ(T0[2],T1[2])<(T0_{i0} + T1_{i0})>_{2} (_t1254,op1_e3_l_3125D);
          tensor[2] op1_e3_l_31261#1 = λ(T0[],T1[2])<(T0 * T1_{i0})>_{2} (e123B,_t125A);
          tensor[2] endRay1260#1 = λ(T0[2],T1[2])<(T0_{i0} + T1_{i0})>_{2} (_t1254,op1_e3_l_31261);
          femData:Mesh _t1264#15 = ExtractFem<femData:Mesh,femData:MeshCell>(cc123D);
          int _t1266#13 = ExtractFemItem<int,CellIndex(MeshCell)>(cc123D);
          femData:MeshPos callNewtonPos135D#1 = _0A7F_msh_newtonInverse1269 (startRay125C,_t1266,_t1264);
          tensor[2] refPos135E#1 = ExtractFemItem<tensor[2],RefPos(Mesh)>(callNewtonPos135D);
          tensor[2] invertA1268#31 = refPos135E;
          femData:MeshPos callNewtonPos1363#1 = _0A7F_msh_newtonInverse1269 (endRay1260,_t1266,_t1264);
          tensor[2] refPos1364#1 = ExtractFemItem<tensor[2],RefPos(Mesh)>(callNewtonPos1363);
          tensor[2] invertB1362#22 = refPos1364;
          string _t1368#1 = "inverses:";
          Print<[string,tensor[2],tensor[2],string]>(_t1368,invertA1268,invertB1362,_t1247);
          femData:FemFunc _t136B#38 = ExtractFem<femData:FemFunc,femData:FuncCell>(fc123F);
          femData:Space _t136D#37 = ExtractFem<femData:Space,femData:FemFunc>(_t136B);
          int _t136F#37 = ExtractFemItem<int,CellIndex(FuncCell)>(fc123F);
          int[6] femIndicies1373#1 = ExtractFemItem2<int,int[6],ExtractIndices(Space)>(_t136D,_t136F);
          tensor[6] femDofs1374#1 = ExtractFemItem2<int[6],tensor[6],ExtractDofsSeq(FemFunc)>(_t136B,femIndicies1373);
          tensor[6] dofs1372#1 = femDofs1374;
          tensor[6] basisResult1375#1 = EvaluateBasis<BasisArray(6)>(invertA1268);
          real faVal1371#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[6],T6[2])<Σ(i0=0..5)<((T4_{i0} * T5_{i0}))>(i0=0..5)> (_t136F,_t136D,_t136B,invertA1268,dofs1372,basisResult1375,invertA1268);
          real _t137B#19 = TensorIndex<tensor[3],[2]>(rayVec122B);
          real _t137D#19 = TensorIndex<tensor[3],[2]>(rayOrig1229);
          int[6] femIndicies1384#1 = ExtractFemItem2<int,int[6],ExtractIndices(Space)>(_t136D,_t136F);
          tensor[6] femDofs1385#1 = ExtractFemItem2<int[6],tensor[6],ExtractDofsSeq(FemFunc)>(_t136B,femIndicies1384);
          tensor[6] dofs1383#1 = femDofs1385;
          tensor[6] basisResult1386#1 = EvaluateBasis<BasisArray(6)>(invertA1268);
          real probe_l_71380#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[6],T6[2])<Σ(i0=0..5)<((T4_{i0} * T5_{i0}))>(i0=0..5)> (_t136F,_t136D,_t136B,invertA1268,dofs1383,basisResult1386,invertA1268);
          real op1_e3_l_81381#1 = λ(T0[],T1[])<(T0 * T1)> (_t137B,s1239);
          real op1_e3_l_91382#1 = λ(T0[],T1[])<(T0) - (T1)> (probe_l_71380,op1_e3_l_81381);
          real fa137F#5 = λ(T0[],T1[])<(T1) - (T0)> (_t137D,op1_e3_l_91382);
          int[6] femIndicies1394#1 = ExtractFemItem2<int,int[6],ExtractIndices(Space)>(_t136D,_t136F);
          tensor[6] femDofs1395#1 = ExtractFemItem2<int[6],tensor[6],ExtractDofsSeq(FemFunc)>(_t136B,femIndicies1394);
          tensor[6] dofs1393#1 = femDofs1395;
          tensor[6] basisResult1396#1 = EvaluateBasis<BasisArray(6)>(invertB1362);
          real probe_l_71390#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[6],T6[2])<Σ(i0=0..5)<((T4_{i0} * T5_{i0}))>(i0=0..5)> (_t136F,_t136D,_t136B,invertB1362,dofs1393,basisResult1396,invertB1362);
          real op1_e3_l_81391#1 = λ(T0[],T1[])<(T0 * T1)> (_t137B,e123B);
          real op1_e3_l_91392#1 = λ(T0[],T1[])<(T0) - (T1)> (probe_l_71390,op1_e3_l_81391);
          real fb138F#2 = λ(T0[],T1[])<(T1) - (T0)> (_t137D,op1_e3_l_91392);
          string _t139F#1 = "Vals:";
          tensor[2] _t13A1#1 = <tensor[2]>[fa137F,fb138F];
          Print<[string,tensor[2],string]>(_t139F,_t13A1,_t1247);
          int[6] femIndicies13AF#1 = ExtractFemItem2<int,int[6],ExtractIndices(Space)>(_t136D,_t136F);
          tensor[6] femDofs13B0#2 = ExtractFemItem2<int[6],tensor[6],ExtractDofsSeq(FemFunc)>(_t136B,femIndicies13AF);
          tensor[6] dofs13AE#1 = femDofs13B0;
          tensor[6] basisResult13B1#1 = EvaluateBasis<BasisArray(6)>(invertA1268);
          real probe_l_1413A5#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[6],T6[2])<Σ(i0=0..5)<((T4_{i0} * T5_{i0}))>(i0=0..5)> (_t136F,_t136D,_t136B,invertA1268,dofs13AE,basisResult13B1,invertA1268);
          real op1_e3_l_1513A6#1 = λ(T0[],T1[])<(T0 * T1)> (_t137B,s1239);
          real op1_e3_l_1613A7#1 = λ(T0[],T1[])<(T0) - (T1)> (probe_l_1413A5,op1_e3_l_1513A6);
          tensor[6] dofs13B2#1 = femDofs13B0;
          tensor[6] basisResult13B3#1 = EvaluateBasis<BasisArray(6)>(invertB1362);
          real probe_l_1713A8#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[6],T6[2])<Σ(i0=0..5)<((T4_{i0} * T5_{i0}))>(i0=0..5)> (_t136F,_t136D,_t136B,invertB1362,dofs13B2,basisResult13B3,invertB1362);
          real op1_e3_l_1813A9#1 = λ(T0[],T1[])<(T0 * T1)> (_t137B,e123B);
          real op1_e3_l_1913AA#1 = λ(T0[],T1[])<(T0) - (T1)> (probe_l_1713A8,op1_e3_l_1813A9);
          real op1_e3_l_2013AB#1 = λ(T0[],T1[])<(T1) - (T0)> (_t137D,op1_e3_l_1613A7);
          real op1_e3_l_2113AC#1 = λ(T0[],T1[])<(T1) - (T0)> (_t137D,op1_e3_l_1913AA);
          real op1_e3_l_2213AD#1 = λ(T0[],T1[])<(T0) - (T1)> (op1_e3_l_2013AB,op1_e3_l_2113AC);
          real _t13A4#1 = λ(T0[])<Abs(T0)> (op1_e3_l_2213AD);
          bool _t13C4#1 = LT<real>(_t13A4,eps120F);
          if _t13C4 then goto ASSIGN13D0 else goto JOIN13E3
        ASSIGN13D0:  preds = [COND13C6]
          int[6] femIndicies13CD#1 = ExtractFemItem2<int,int[6],ExtractIndices(Space)>(_t136D,_t136F);
          tensor[6] femDofs13CE#1 = ExtractFemItem2<int[6],tensor[6],ExtractDofsSeq(FemFunc)>(_t136B,femIndicies13CD);
          tensor[6] dofs13CC#1 = femDofs13CE;
          tensor[6] basisResult13CF#1 = EvaluateBasis<BasisArray(6)>(invertA1268);
          real probe_l_713C8#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[6],T6[2])<Σ(i0=0..5)<((T4_{i0} * T5_{i0}))>(i0=0..5)> (_t136F,_t136D,_t136B,invertA1268,dofs13CC,basisResult13CF,invertA1268);
          real op1_e3_l_813C9#1 = λ(T0[],T1[])<(T0 * T1)> (_t137B,s1239);
          real op1_e3_l_913CA#1 = λ(T0[],T1[])<(T0) - (T1)> (probe_l_713C8,op1_e3_l_813C9);
          real op1_e3_l_1013CB#1 = λ(T0[],T1[])<(T1) - (T0)> (_t137D,op1_e3_l_913CA);
          real _t13C7#1 = λ(T0[])<Abs(T0)> (op1_e3_l_1013CB);
          bool _t13D9#1 = GT<real>(_t13C7,eps120F);
          if _t13D9 then goto ASSIGN13DD else goto JOIN13E1
        ASSIGN13DD:  preds = [COND13DB]
          real s13DC#1 = λ(T0[],T1[])<(T0 + T1)> (s1239,eps120F);
          self.s = s13DC;
          active
          goto JOIN13E1
        JOIN13E1:  preds = [*ACTIVE13DF,COND13DB]
          real s13E0#1 = phi(s1239)
          goto JOIN13E3
        JOIN13E3:  preds = [JOIN13E1,COND13C6]
          real s13E2#7 = phi(s13E0,s1239)
          int[6] femIndicies13F2#1 = ExtractFemItem2<int,int[6],ExtractIndices(Space)>(_t136D,_t136F);
          tensor[6] femDofs13F3#2 = ExtractFemItem2<int[6],tensor[6],ExtractDofsSeq(FemFunc)>(_t136B,femIndicies13F2);
          tensor[6] dofs13F1#1 = femDofs13F3;
          tensor[6] basisResult13F4#1 = EvaluateBasis<BasisArray(6)>(invertB1362);
          real probe_l_3013E5#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[6],T6[2])<Σ(i0=0..5)<((T4_{i0} * T5_{i0}))>(i0=0..5)> (_t136F,_t136D,_t136B,invertB1362,dofs13F1,basisResult13F4,invertB1362);
          real op1_e3_l_3113E6#1 = λ(T0[],T1[])<(T0 * T1)> (_t137B,e123B);
          real op1_e3_l_3213E7#1 = λ(T0[],T1[])<(T0) - (T1)> (probe_l_3013E5,op1_e3_l_3113E6);
          real op1_e3_l_3313E8#2 = λ(T0[],T1[])<(T1) - (T0)> (_t137D,op1_e3_l_3213E7);
          tensor[6] dofs13F5#1 = femDofs13F3;
          tensor[6] basisResult13F6#1 = EvaluateBasis<BasisArray(6)>(invertA1268);
          real probe_l_3413E9#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[6],T6[2])<Σ(i0=0..5)<((T4_{i0} * T5_{i0}))>(i0=0..5)> (_t136F,_t136D,_t136B,invertA1268,dofs13F5,basisResult13F6,invertA1268);
          real op1_e3_l_3513EA#1 = λ(T0[],T1[])<(T0 * T1)> (_t137B,s1239);
          real op1_e3_l_3613EB#1 = λ(T0[],T1[])<(T0) - (T1)> (probe_l_3413E9,op1_e3_l_3513EA);
          real op1_e3_l_3713EC#2 = λ(T0[],T1[])<(T1) - (T0)> (_t137D,op1_e3_l_3613EB);
          real op1_e3_l_3813ED#1 = λ(T0[],T1[])<(T0 * T1)> (s13E2,op1_e3_l_3313E8);
          real op1_e3_l_3913EE#1 = λ(T0[],T1[])<(T0 * T1)> (e123B,op1_e3_l_3713EC);
          real op1_e3_l_4813EF#1 = λ(T0[],T1[])<(T0) - (T1)> (op1_e3_l_3813ED,op1_e3_l_3913EE);
          real op1_e3_l_4913F0#1 = λ(T0[],T1[])<(T0) - (T1)> (op1_e3_l_3313E8,op1_e3_l_3713EC);
          real cup13E4#4 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_4813EF,op1_e3_l_4913F0);
          string _t140A#1 = "Mid time:";
          Print<[string,real,string]>(_t140A,cup13E4,_t1247);
          int[6] femIndicies141D#1 = ExtractFemItem2<int,int[6],ExtractIndices(Space)>(_t136D,_t136F);
          tensor[6] femDofs141E#2 = ExtractFemItem2<int[6],tensor[6],ExtractDofsSeq(FemFunc)>(_t136B,femIndicies141D);
          tensor[6] dofs141C#1 = femDofs141E;
          tensor[6] basisResult141F#1 = EvaluateBasis<BasisArray(6)>(invertB1362);
          real probe_l_32140E#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[6],T6[2])<Σ(i0=0..5)<((T4_{i0} * T5_{i0}))>(i0=0..5)> (_t136F,_t136D,_t136B,invertB1362,dofs141C,basisResult141F,invertB1362);
          real op1_e3_l_33140F#1 = λ(T0[],T1[])<(T0 * T1)> (_t137B,e123B);
          real op1_e3_l_341410#1 = λ(T0[],T1[])<(T0) - (T1)> (probe_l_32140E,op1_e3_l_33140F);
          real op1_e3_l_351411#2 = λ(T0[],T1[])<(T1) - (T0)> (_t137D,op1_e3_l_341410);
          tensor[6] dofs1420#1 = femDofs141E;
          tensor[6] basisResult1421#1 = EvaluateBasis<BasisArray(6)>(invertA1268);
          real probe_l_361412#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[6],T6[2])<Σ(i0=0..5)<((T4_{i0} * T5_{i0}))>(i0=0..5)> (_t136F,_t136D,_t136B,invertA1268,dofs1420,basisResult1421,invertA1268);
          real op1_e3_l_371413#1 = λ(T0[],T1[])<(T0 * T1)> (_t137B,s1239);
          real op1_e3_l_381414#1 = λ(T0[],T1[])<(T0) - (T1)> (probe_l_361412,op1_e3_l_371413);
          real op1_e3_l_391415#2 = λ(T0[],T1[])<(T1) - (T0)> (_t137D,op1_e3_l_381414);
          real op1_e3_l_401416#1 = λ(T0[],T1[])<(T0 * T1)> (s13E2,op1_e3_l_351411);
          real op1_e3_l_411417#1 = λ(T0[],T1[])<(T0 * T1)> (e123B,op1_e3_l_391415);
          real op1_e3_l_501418#1 = λ(T0[],T1[])<(T0) - (T1)> (op1_e3_l_401416,op1_e3_l_411417);
          real op1_e3_l_511419#1 = λ(T0[],T1[])<(T0) - (T1)> (op1_e3_l_351411,op1_e3_l_391415);
          real op1_e3_l_52141A#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_501418,op1_e3_l_511419);
          tensor[2] op1_e3_l_53141B#1 = λ(T0[2],T1[])<(T1 * T0_{i0})>_{2} (_t125A,op1_e3_l_52141A);
          tensor[2] midRay140D#5 = λ(T0[2],T1[2])<(T0_{i0} + T1_{i0})>_{2} (_t1254,op1_e3_l_53141B);
          femData:MeshPos callNewtonPos1438#1 = _0A7F_msh_newtonInverse1269 (midRay140D,_t1266,_t1264);
          tensor[2] refPos1439#1 = ExtractFemItem<tensor[2],RefPos(Mesh)>(callNewtonPos1438);
          tensor[2] invertC1437#12 = refPos1439;
          int[6] femIndicies143F#1 = ExtractFemItem2<int,int[6],ExtractIndices(Space)>(_t136D,_t136F);
          tensor[6] femDofs1440#1 = ExtractFemItem2<int[6],tensor[6],ExtractDofsSeq(FemFunc)>(_t136B,femIndicies143F);
          tensor[6] dofs143E#1 = femDofs1440;
          tensor[6] basisResult1441#1 = EvaluateBasis<BasisArray(6)>(invertC1437);
          real fmVal143D#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[6],T6[2])<Σ(i0=0..5)<((T4_{i0} * T5_{i0}))>(i0=0..5)> (_t136F,_t136D,_t136B,invertC1437,dofs143E,basisResult1441,invertC1437);
          int[6] femIndicies1459#1 = ExtractFemItem2<int,int[6],ExtractIndices(Space)>(_t136D,_t136F);
          tensor[6] femDofs145A#3 = ExtractFemItem2<int[6],tensor[6],ExtractDofsSeq(FemFunc)>(_t136B,femIndicies1459);
          tensor[6] dofs1458#1 = femDofs145A;
          tensor[6] basisResult145B#1 = EvaluateBasis<BasisArray(6)>(invertC1437);
          real probe_l_361448#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[6],T6[2])<Σ(i0=0..5)<((T4_{i0} * T5_{i0}))>(i0=0..5)> (_t136F,_t136D,_t136B,invertC1437,dofs1458,basisResult145B,invertC1437);
          tensor[6] dofs145C#1 = femDofs145A;
          tensor[6] basisResult145D#1 = EvaluateBasis<BasisArray(6)>(invertB1362);
          real probe_l_371449#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[6],T6[2])<Σ(i0=0..5)<((T4_{i0} * T5_{i0}))>(i0=0..5)> (_t136F,_t136D,_t136B,invertB1362,dofs145C,basisResult145D,invertB1362);
          real op1_e3_l_38144A#1 = λ(T0[],T1[])<(T0 * T1)> (_t137B,e123B);
          real op1_e3_l_39144B#1 = λ(T0[],T1[])<(T0) - (T1)> (probe_l_371449,op1_e3_l_38144A);
          real op1_e3_l_40144C#2 = λ(T0[],T1[])<(T1) - (T0)> (_t137D,op1_e3_l_39144B);
          tensor[6] dofs145E#1 = femDofs145A;
          tensor[6] basisResult145F#1 = EvaluateBasis<BasisArray(6)>(invertA1268);
          real probe_l_41144D#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[6],T6[2])<Σ(i0=0..5)<((T4_{i0} * T5_{i0}))>(i0=0..5)> (_t136F,_t136D,_t136B,invertA1268,dofs145E,basisResult145F,invertA1268);
          real op1_e3_l_42144E#1 = λ(T0[],T1[])<(T0 * T1)> (_t137B,s1239);
          real op1_e3_l_43144F#1 = λ(T0[],T1[])<(T0) - (T1)> (probe_l_41144D,op1_e3_l_42144E);
          real op1_e3_l_441450#2 = λ(T0[],T1[])<(T1) - (T0)> (_t137D,op1_e3_l_43144F);
          real op1_e3_l_451451#1 = λ(T0[],T1[])<(T0 * T1)> (s13E2,op1_e3_l_40144C);
          real op1_e3_l_461452#1 = λ(T0[],T1[])<(T0 * T1)> (e123B,op1_e3_l_441450);
          real op1_e3_l_551453#1 = λ(T0[],T1[])<(T0) - (T1)> (op1_e3_l_451451,op1_e3_l_461452);
          real op1_e3_l_561454#1 = λ(T0[],T1[])<(T0) - (T1)> (op1_e3_l_40144C,op1_e3_l_441450);
          real op1_e3_l_571455#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_551453,op1_e3_l_561454);
          real op1_e3_l_581456#1 = λ(T0[],T1[])<(T0 * T1)> (_t137B,op1_e3_l_571455);
          real op1_e3_l_591457#1 = λ(T0[],T1[])<(T0) - (T1)> (probe_l_361448,op1_e3_l_581456);
          real fm1447#4 = λ(T0[],T1[])<(T1) - (T0)> (_t137D,op1_e3_l_591457);
          string _t1479#1 = "all vals:";
          tensor[3] _t147B#1 = <tensor[3]>[fa137F,fm1447,fb138F];
          Print<[string,tensor[3],string]>(_t1479,_t147B,_t1247);
          int _t147E#6 = 1;
          int intersectionItter1480#2 = IAdd(intersectionItter1237,_t147E);
          real _t1482#10 = 0.e0;
          bool _t1484#2 = GT<real>(fa137F,_t1482);
          if _t1484 then goto JOIN1489 else goto ASSIGN168C
        JOIN1489:  preds = [COND1486,JOIN1691]
          int _t1487#1 = phi(_t147E,_t1488)
          bool _t148A#2 = GT<real>(fm1447,_t1482);
          if _t148A then goto JOIN148F else goto ASSIGN1684
        JOIN148F:  preds = [COND148C,JOIN1689]
          int _t148D#1 = phi(_t147E,_t148E)
          int _t1490#1 = IMul(_t1487,_t148D);
          int _t1492#7 = 0;
          bool _t1494#1 = LT<int>(_t1490,_t1492);
          if _t1494 then goto JOIN149A else goto COND1669
        JOIN149A:  preds = [COND1496,JOIN1676]
          real e1497#4 = phi(cup13E4,e123B)
          real s1498#5 = phi(s13E2,s1499)
          string _t149B#1 = "new interval:";
          tensor[2] _t149D#1 = <tensor[2]>[s1498,e1497];
          Print<[string,tensor[2],string]>(_t149B,_t149D,_t1247);
          int[6] femIndicies14A6#1 = ExtractFemItem2<int,int[6],ExtractIndices(Space)>(_t136D,_t136F);
          tensor[6] femDofs14A7#1 = ExtractFemItem2<int[6],tensor[6],ExtractDofsSeq(FemFunc)>(_t136B,femIndicies14A6);
          tensor[6] dofs14A5#1 = femDofs14A7;
          tensor[6] basisResult14A8#1 = EvaluateBasis<BasisArray(6)>(invertA1268);
          real probe_l_714A1#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[6],T6[2])<Σ(i0=0..5)<((T4_{i0} * T5_{i0}))>(i0=0..5)> (_t136F,_t136D,_t136B,invertA1268,dofs14A5,basisResult14A8,invertA1268);
          real op1_e3_l_814A2#1 = λ(T0[],T1[])<(T0 * T1)> (_t137B,s1239);
          real op1_e3_l_914A3#1 = λ(T0[],T1[])<(T0) - (T1)> (probe_l_714A1,op1_e3_l_814A2);
          real op1_e3_l_1014A4#1 = λ(T0[],T1[])<(T1) - (T0)> (_t137D,op1_e3_l_914A3);
          real _t14A0#2 = λ(T0[])<Abs(T0)> (op1_e3_l_1014A4);
          bool _t14B2#2 = LT<real>(_t14A0,eps120F);
          if _t14B2 then goto ASSIGN14B6 else goto ASSIGN1645
        ASSIGN14B6:  preds = [COND14B4]
          bool _t14B5#1 = true;
          goto JOIN14B9
        JOIN14B9:  preds = [ASSIGN14B6,JOIN1665]
          bool _t14B7#1 = phi(_t14B5,_t14B8)
          if _t14B7 then goto ASSIGN14D5 else goto ASSIGN1629
        ASSIGN14D5:  preds = [COND14BA]
          int[6] femIndicies14CE#1 = ExtractFemItem2<int,int[6],ExtractIndices(Space)>(_t136D,_t136F);
          tensor[6] femDofs14CF#3 = ExtractFemItem2<int[6],tensor[6],ExtractDofsSeq(FemFunc)>(_t136B,femIndicies14CE);
          tensor[6] dofs14CD#1 = femDofs14CF;
          tensor[6] basisResult14D0#1 = EvaluateBasis<BasisArray(6)>(invertC1437);
          real probe_l_3614BC#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[6],T6[2])<Σ(i0=0..5)<((T4_{i0} * T5_{i0}))>(i0=0..5)> (_t136F,_t136D,_t136B,invertC1437,dofs14CD,basisResult14D0,invertC1437);
          tensor[6] dofs14D1#1 = femDofs14CF;
          tensor[6] basisResult14D2#1 = EvaluateBasis<BasisArray(6)>(invertB1362);
          real probe_l_3714BD#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[6],T6[2])<Σ(i0=0..5)<((T4_{i0} * T5_{i0}))>(i0=0..5)> (_t136F,_t136D,_t136B,invertB1362,dofs14D1,basisResult14D2,invertB1362);
          real op1_e3_l_3814BE#1 = λ(T0[],T1[])<(T0 * T1)> (_t137B,e123B);
          real op1_e3_l_3914BF#1 = λ(T0[],T1[])<(T0) - (T1)> (probe_l_3714BD,op1_e3_l_3814BE);
          real op1_e3_l_4014C0#2 = λ(T0[],T1[])<(T1) - (T0)> (_t137D,op1_e3_l_3914BF);
          tensor[6] dofs14D3#1 = femDofs14CF;
          tensor[6] basisResult14D4#1 = EvaluateBasis<BasisArray(6)>(invertA1268);
          real probe_l_4114C1#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[6],T6[2])<Σ(i0=0..5)<((T4_{i0} * T5_{i0}))>(i0=0..5)> (_t136F,_t136D,_t136B,invertA1268,dofs14D3,basisResult14D4,invertA1268);
          real op1_e3_l_4214C2#1 = λ(T0[],T1[])<(T0 * T1)> (_t137B,s1239);
          real op1_e3_l_4314C3#1 = λ(T0[],T1[])<(T0) - (T1)> (probe_l_4114C1,op1_e3_l_4214C2);
          real op1_e3_l_4414C4#2 = λ(T0[],T1[])<(T1) - (T0)> (_t137D,op1_e3_l_4314C3);
          real op1_e3_l_4514C5#1 = λ(T0[],T1[])<(T0 * T1)> (s13E2,op1_e3_l_4014C0);
          real op1_e3_l_4614C6#1 = λ(T0[],T1[])<(T0 * T1)> (e123B,op1_e3_l_4414C4);
          real op1_e3_l_5514C7#1 = λ(T0[],T1[])<(T0) - (T1)> (op1_e3_l_4514C5,op1_e3_l_4614C6);
          real op1_e3_l_5614C8#1 = λ(T0[],T1[])<(T0) - (T1)> (op1_e3_l_4014C0,op1_e3_l_4414C4);
          real op1_e3_l_5714C9#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_5514C7,op1_e3_l_5614C8);
          real op1_e3_l_5814CA#1 = λ(T0[],T1[])<(T0 * T1)> (_t137B,op1_e3_l_5714C9);
          real op1_e3_l_5914CB#1 = λ(T0[],T1[])<(T0) - (T1)> (probe_l_3614BC,op1_e3_l_5814CA);
          real op1_e3_l_6014CC#1 = λ(T0[],T1[])<(T1) - (T0)> (_t137D,op1_e3_l_5914CB);
          real _t14BB#2 = λ(T0[])<Abs(T0)> (op1_e3_l_6014CC);
          bool _t14EF#1 = GT<real>(_t14BB,eps120F);
          if _t14EF then goto ASSIGN14F3 else goto ASSIGN1627
        ASSIGN14F3:  preds = [COND14F1]
          bool _t14F2#1 = GT<real>(_t14A0,eps120F);
          goto JOIN14F6
        JOIN14F6:  preds = [ASSIGN14F3,ASSIGN1627]
          bool _t14F4#1 = phi(_t14F2,_t14F5)
          if _t14F4 then goto ASSIGN14F9 else goto ASSIGN1529
        ASSIGN14F9:  preds = [COND14F7]
          int itter14F8#4 = IAdd(itter1235,_t147E);
          bool _t14FA#1 = GTE<int>(itter14F8,len1233);
          if _t14FA then goto ASSIGN14FE else goto JOIN1505
        ASSIGN14FE:  preds = [COND14FC]
          string _t14FD#1 = "Fin pixel=============================\n";
          Print<[string]>(_t14FD);
          self.itter = itter14F8;
          self.intersectionItter = _t1492;
          self.s = s1498;
          self.e = e1497;
          stabilize
          goto JOIN1505
        JOIN1505:  preds = [*STABILIZE1504,COND14FC]
          int _t1506#2 = IAdd(offset1231,itter14F8);
          tensor[2] interval1508#3 = Subscript<tensor[2][]>(times1211,_t1506);
          int _t150A#1 = Subscript<int[]>(cells1213,_t1506);
          femData:MeshCell cc150C#2 = Subscript<femData:MeshCell[]>(0cell_a120B,_t150A);
          real s150E#1 = TensorIndex<tensor[2],[0]>(interval1508);
          real e1510#1 = TensorIndex<tensor[2],[1]>(interval1508);
          int _t1512#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc150C);
          femData:FuncCell _t1514#1 = LoadFem<femData:FuncCell>(c120D,_t1512);
          string _t1516#1 = "Next interval!\n";
          Print<[string]>(_t1516);
          self.itter = itter14F8;
          self.intersectionItter = _t1492;
          self.interval = interval1508;
          self.s = s150E;
          self.e = e1510;
          self.cc = cc150C;
          self.fc = _t1514;
          active
          goto JOIN1521
        JOIN1521:  preds = [*ACTIVE1520,*STABILIZE161F]
          goto JOIN1523
        JOIN1523:  preds = [*JOIN1521,MASSIGN162A]
          int intersectionItter1522#1 = phi(intersectionItter1480)
          self.intersectionItter = intersectionItter1522;
          self.s = s1498;
          self.e = e1497;
          active
        ASSIGN1529:  preds = [COND14F7]
          tensor[2] grad1528#1 = <tensor[2]>[_t1482,_t1482];
          bool _t152A#1 = LT<real>(_t14BB,eps120F);
          if _t152A then goto ASSIGN1546 else goto JOIN1561
        ASSIGN1546:  preds = [COND152C]
          femData:MeshPos callNewtonPos1538#1 = _0A7F_msh_newtonInverse1269 (midRay140D,_t1266,_t1264);
          tensor[2] refPos1539#7 = ExtractFemItem<tensor[2],RefPos(Mesh)>(callNewtonPos1538);
          tensor[2] Inner152E#3 = refPos1539;
          int[6] femIndicies153B#1 = ExtractFemItem2<int,int[6],ExtractIndices(Space)>(_t136D,_t136F);
          tensor[6] femDofs153C#1 = ExtractFemItem2<int[6],tensor[6],ExtractDofsSeq(FemFunc)>(_t136B,femIndicies153B);
          tensor[6] dofs153A#1 = femDofs153C;
          tensor[2,6] basisResult153D#1 = EvaluateBasis<BasisArray(2,6)>(Inner152E);
          tensor[2] compositionl152F#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[2 6],T6[2])<Σ(i2=0..5)<((T4_{i2} * T5_{i0,i2}))>(i2=0..5)>_{2} (_t136F,_t136D,_t136B,Inner152E,dofs153A,basisResult153D,Inner152E);
          int[3] femIndicies153F#1 = ExtractFemItem2<int,int[3],ExtractIndices(Mesh)>(_t1264,_t1266);
          tensor[3,2] femDofs1540#3 = ExtractFemItem2<int[3],tensor[3,2],ExtractDofsSeq(Mesh)>(_t1264,femIndicies153F);
          tensor[3,2] dofs153E#1 = femDofs1540;
          tensor[2,3] basisResult1541#1 = EvaluateBasis<BasisArray(2,3)>(refPos1539);
          tensor[2,2] probe_l_81530#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i3=0..2)<((T3_{i3,i0} * T4_{i1,i3}))>(i3=0..2)>_{2 2} (_t1266,_t1264,midRay140D,dofs153E,basisResult1541,refPos1539);
          tensor[2,2] op1_e3_l_91531#1 = λ(T0[2 2])<Σ(i2=0..1)<((ϵ_{ii2,ii0} * T0_{i2,i1}))>(i2=0..1)>_{2 2} (probe_l_81530);
          tensor[3,2] dofs1542#1 = femDofs1540;
          tensor[2,3] basisResult1543#1 = EvaluateBasis<BasisArray(2,3)>(refPos1539);
          tensor[2] probe_l_101532#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i2=0..2)<((T3_{i2,i0} * T4_{'0',i2}))>(i2=0..2)>_{2} (_t1266,_t1264,midRay140D,dofs1542,basisResult1543,refPos1539);
          tensor[3,2] dofs1544#1 = femDofs1540;
          tensor[2,3] basisResult1545#1 = EvaluateBasis<BasisArray(2,3)>(refPos1539);
          tensor[2] probe_l_111533#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i2=0..2)<((T3_{i2,i0} * T4_{'1',i2}))>(i2=0..2)>_{2} (_t1266,_t1264,midRay140D,dofs1544,basisResult1545,refPos1539);
          tensor[2] op1_e3_l_121534#1 = λ(T0[2])<Σ(i1=0..1)<((ϵ_{ii0,ii1} * T0_{i1}))>(i1=0..1)>_{2} (probe_l_111533);
          tensor[2,2] op1_e3_l_131535#1 = λ(T0[2 2])<Σ(i2=0..1)<((ϵ_{ii2,ii0} * T0_{i1,i2}))>(i2=0..1)>_{2 2} (op1_e3_l_91531);
          real op1_e3_l_141536#1 = λ(T0[2],T1[2])<Σ(i0=0..1)<((T0_{i0} * T1_{i0}))>(i0=0..1)> (probe_l_101532,op1_e3_l_121534);
          tensor[2,2] op1_e3_l_151537#1 = λ(T0[2 2],T1[])<(T0_{i0,i1}) / ( T1)>_{2 2} (op1_e3_l_131535,op1_e3_l_141536);
          tensor[2] grad152D#1 = λ(T0[2],T1[2 2])<Σ(i104=0..1)<((T0_{i104} * T1_{i104,i0}))>(i104=0..1)>_{2} (compositionl152F,op1_e3_l_151537);
          goto JOIN1561
        JOIN1561:  preds = [ASSIGN155E,COND152C]
          tensor[2] grad155F#1 = phi(grad152D,grad1528)
          real out1560#1 = phi(fmVal143D,out1241)
          if _t14B2 then goto ASSIGN157C else goto JOIN1598
        ASSIGN157C:  preds = [COND1562]
          femData:MeshPos callNewtonPos156E#1 = _0A7F_msh_newtonInverse1269 (startRay125C,_t1266,_t1264);
          tensor[2] refPos156F#7 = ExtractFemItem<tensor[2],RefPos(Mesh)>(callNewtonPos156E);
          tensor[2] Inner1564#3 = refPos156F;
          int[6] femIndicies1571#1 = ExtractFemItem2<int,int[6],ExtractIndices(Space)>(_t136D,_t136F);
          tensor[6] femDofs1572#1 = ExtractFemItem2<int[6],tensor[6],ExtractDofsSeq(FemFunc)>(_t136B,femIndicies1571);
          tensor[6] dofs1570#1 = femDofs1572;
          tensor[2,6] basisResult1573#1 = EvaluateBasis<BasisArray(2,6)>(Inner1564);
          tensor[2] compositionl1565#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[2 6],T6[2])<Σ(i2=0..5)<((T4_{i2} * T5_{i0,i2}))>(i2=0..5)>_{2} (_t136F,_t136D,_t136B,Inner1564,dofs1570,basisResult1573,Inner1564);
          int[3] femIndicies1575#1 = ExtractFemItem2<int,int[3],ExtractIndices(Mesh)>(_t1264,_t1266);
          tensor[3,2] femDofs1576#3 = ExtractFemItem2<int[3],tensor[3,2],ExtractDofsSeq(Mesh)>(_t1264,femIndicies1575);
          tensor[3,2] dofs1574#1 = femDofs1576;
          tensor[2,3] basisResult1577#1 = EvaluateBasis<BasisArray(2,3)>(refPos156F);
          tensor[2,2] probe_l_81566#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i3=0..2)<((T3_{i3,i0} * T4_{i1,i3}))>(i3=0..2)>_{2 2} (_t1266,_t1264,startRay125C,dofs1574,basisResult1577,refPos156F);
          tensor[2,2] op1_e3_l_91567#1 = λ(T0[2 2])<Σ(i2=0..1)<((ϵ_{ii2,ii0} * T0_{i2,i1}))>(i2=0..1)>_{2 2} (probe_l_81566);
          tensor[3,2] dofs1578#1 = femDofs1576;
          tensor[2,3] basisResult1579#1 = EvaluateBasis<BasisArray(2,3)>(refPos156F);
          tensor[2] probe_l_101568#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i2=0..2)<((T3_{i2,i0} * T4_{'0',i2}))>(i2=0..2)>_{2} (_t1266,_t1264,startRay125C,dofs1578,basisResult1579,refPos156F);
          tensor[3,2] dofs157A#1 = femDofs1576;
          tensor[2,3] basisResult157B#1 = EvaluateBasis<BasisArray(2,3)>(refPos156F);
          tensor[2] probe_l_111569#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i2=0..2)<((T3_{i2,i0} * T4_{'1',i2}))>(i2=0..2)>_{2} (_t1266,_t1264,startRay125C,dofs157A,basisResult157B,refPos156F);
          tensor[2] op1_e3_l_12156A#1 = λ(T0[2])<Σ(i1=0..1)<((ϵ_{ii0,ii1} * T0_{i1}))>(i1=0..1)>_{2} (probe_l_111569);
          tensor[2,2] op1_e3_l_13156B#1 = λ(T0[2 2])<Σ(i2=0..1)<((ϵ_{ii2,ii0} * T0_{i1,i2}))>(i2=0..1)>_{2 2} (op1_e3_l_91567);
          real op1_e3_l_14156C#1 = λ(T0[2],T1[2])<Σ(i0=0..1)<((T0_{i0} * T1_{i0}))>(i0=0..1)> (probe_l_101568,op1_e3_l_12156A);
          tensor[2,2] op1_e3_l_15156D#1 = λ(T0[2 2],T1[])<(T0_{i0,i1}) / ( T1)>_{2 2} (op1_e3_l_13156B,op1_e3_l_14156C);
          tensor[2] grad1563#1 = λ(T0[2],T1[2 2])<Σ(i104=0..1)<((T0_{i104} * T1_{i104,i0}))>(i104=0..1)>_{2} (compositionl1565,op1_e3_l_15156D);
          goto JOIN1598
        JOIN1598:  preds = [ASSIGN1594,COND1562]
          tensor[2] grad1595#3 = phi(grad1563,grad155F)
          real cup1596#1 = phi(s1498,cup13E4)
          real out1597#3 = phi(faVal1371,out1560)
          string _t1599#1 = "Out val:";
          Print<[string,real,string]>(_t1599,out1597,_t1247);
          string _t159C#1 = "Grad val:";
          Print<[string,tensor[2],string]>(_t159C,grad1595,_t1247);
          real _t159F#6 = 0.1e1;
          tensor[3] mcol15A1#1 = <tensor[3]>[_t159F,_t159F,_t159F];
          bool _t15A3#1 = NEQ<real>(cmin1219,cmax121B);
          if _t15A3 then goto ASSIGN15A7 else goto JOIN15D1
        ASSIGN15A7:  preds = [COND15A5]
          int _t15A6#1 = -1;
          real _t15A8#2 = IntToReal(_t15A6);
          real op1_e3_l_515AB#1 = λ(T0[],T1[])<(T1) - (T0)> (cmin1219,out1597);
          real op1_e3_l_615AC#1 = λ(T0[],T1[])<(T1) - (T0)> (cmin1219,cmax121B);
          real op1_e3_l_715AD#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_515AB,op1_e3_l_615AC);
          real op1_e3_l_815AE#1 = λ(T0[],T1[])<(T1) - (T0)> (_t15A8,_t159F);
          real op1_e3_l_915AF#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_715AD,op1_e3_l_815AE);
          real _t15AA#2 = λ(T0[],T1[])<(T0 + T1)> (_t15A8,op1_e3_l_915AF);
          real Mtransform15B7#2 = Transform<IMAGE1D<double[3]>>(cmap16AD);
          real MxPos15B8#1 = λ(T0[],T1[])<(T0 * T1)> (Mtransform15B7,_t15AA);
          real Ttranslate15B9#1 = Translate<IMAGE1D<double[3]>>(cmap16AD);
          real imgPos15BA#2 = λ(T0[],T1[])<(T0 + T1)> (MxPos15B8,Ttranslate15B9);
          real nd15BB#2 = Floor<1>(imgPos15BA);
          real f15BC#1 = λ(T0[],T1[])<(T0) - (T1)> (imgPos15BA,nd15BB);
          int n15BD#1 = RealToInt<1>(nd15BB);
          int lit15BE#1 = 0;
          int idx15BF#1 = IAdd(n15BD,lit15BE);
          tensor[3,2] ldvox15C0#1 = LoadVoxelsWithCtl<IMAGE1D<double[3]>,2,clamp>(cmap16AD,idx15BF);
          tensor[2] kernX_15C1#1 = BuildPos<1>(f15BC);
          tensor[2] kevalX_d0_15C2#1 = EvalKernel<2,tent,0>(kernX_15C1);
          tensor[3] mcol15B6#1 = λ(V0(1)[3],H1,T2[1],T3[1 1],V4(1)[3],H5)<Σ(i1=0..1)<((V4_{i0}(1)[i1]# * H5(1)))>(i1=0..1)>_{3} (img1207,_t1209,_t15AA,Mtransform15B7,ldvox15C0,kevalX_d0_15C2);
          goto JOIN15D1
        JOIN15D1:  preds = [ASSIGN15CF,COND15A5]
          tensor[3] mcol15D0#5 = phi(mcol15B6,mcol15A1)
          if light121D then goto ASSIGN15D4 else goto ASSIGN1621
        ASSIGN15D4:  preds = [COND15D2]
          real _t15D3#1 = TensorIndex<tensor[2],[0]>(grad1595);
          real _t15D5#1 = TensorIndex<tensor[2],[1]>(grad1595);
          int _t15D7#1 = -1;
          real _t15D9#1 = IntToReal(_t15D7);
          tensor[3] N15DB#2 = <tensor[3]>[_t15D3,_t15D5,_t15D9];
          real _t15DD#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (N15DB,L1227);
          real _t15DF#1 = Max<real>(_t1482,_t15DD);
          real op1_e3_l_715E2#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (rayVec122B);
          real op1_e3_l_815E3#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_715E2);
          real op1_e3_l_915E4#1 = λ(T0[])<(1) / ( T0)> (op1_e3_l_815E3);
          tensor[3] op1_e3_l_1015E5#1 = λ(T0[3],T1[])<(T0_{i0} * T1)>_{3} (rayVec122B,op1_e3_l_915E4);
          tensor[3] op1_e3_l_1115E6#1 = λ(T0[3])<Neg(T0_{i0})>_{3} (op1_e3_l_1015E5);
          tensor[3] op1_e3_l_1715E7#3 = λ(T0[3],T1[3])<(T1_{i0} + T0_{i0})>_{3} (L1227,op1_e3_l_1115E6);
          real op1_e3_l_1915E8#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_1715E7,op1_e3_l_1715E7);
          real op1_e3_l_2015E9#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_1915E8);
          real op1_e3_l_2715EA#1 = λ(T0[])<(1) / ( T0)> (op1_e3_l_2015E9);
          real op1_e3_l_2815EB#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (N15DB,op1_e3_l_1715E7);
          real _t15E1#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_2715EA,op1_e3_l_2815EB);
          real _t15F7#1 = Max<real>(_t1482,_t15E1);
          real _t15F9#1 = MathFn<pow>(_t15F7,phongSp1225);
          real op1_e3_l_1715FC#1 = λ(T0[],T1[])<(T1) - (T0)> (camNearVsp122D,cup1596);
          real op1_e3_l_1815FD#1 = λ(T0[],T1[])<(T1) - (T0)> (camNearVsp122D,camFarVsp122F);
          real op1_e3_l_1915FE#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_1715FC,op1_e3_l_1815FD);
          tensor[3] op1_e3_l_2015FF#1 = λ(T0[3],T1[3])<(T1_{i0}) - (T0_{i0})>_{3} (mcnear1215,mcfar1217);
          tensor[3] op1_e3_l_211600#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (op1_e3_l_1915FE,op1_e3_l_2015FF);
          tensor[3] op1_e3_l_221601#2 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (mcnear1215,op1_e3_l_211600);
          tensor[3] op1_e3_l_291602#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (phongKa121F,mcol15D0);
          tensor[3] op1_e3_l_301603#1 = λ(T0[3],T1[],T2[],T3[3])<(T1 * T2 * T0_{i0} * T3_{i0})>_{3} (mcol15D0,_t15DF,phongKd1221,op1_e3_l_221601);
          tensor[3] op1_e3_l_311604#1 = λ(T0[],T1[],T2[3])<(T0 * T1 * T2_{i0})>_{3} (_t15F9,phongKs1223,op1_e3_l_221601);
          tensor[3] fin15FB#3 = λ(T0[3],T1[3],T2[3])<(T0_{i0} + T1_{i0} + T2_{i0})>_{3} (op1_e3_l_291602,op1_e3_l_301603,op1_e3_l_311604);
          real _t160F#1 = TensorIndex<tensor[3],[0]>(fin15FB);
          real _t1611#1 = TensorIndex<tensor[3],[1]>(fin15FB);
          real _t1613#1 = TensorIndex<tensor[3],[2]>(fin15FB);
          tensor[4] rgba1615#1 = <tensor[4]>[_t160F,_t1611,_t1613,_t159F];
          goto JOIN1619
        JOIN1619:  preds = [ASSIGN1616,ASSIGN1626]
          tensor[4] rgba1617#1 = phi(rgba1615,rgba1618)
          self.intersectionItter = _t1492;
          self.s = s1498;
          self.e = e1497;
          self.out = out1597;
          self.rgba = rgba1617;
          stabilize
          goto JOIN1521
        ASSIGN1621:  preds = [COND15D2]
          real _t1620#1 = TensorIndex<tensor[3],[0]>(mcol15D0);
          real _t1622#1 = TensorIndex<tensor[3],[1]>(mcol15D0);
          real _t1624#1 = TensorIndex<tensor[3],[2]>(mcol15D0);
          tensor[4] rgba1618#1 = <tensor[4]>[_t1620,_t1622,_t1624,_t159F];
          goto JOIN1619
        ASSIGN1627:  preds = [COND14F1]
          bool _t14F5#1 = false;
          goto JOIN14F6
        ASSIGN1629:  preds = [COND14BA]
          string _t1628#1 = "=========\n";
          Print<[string]>(_t1628);
          goto JOIN1523
        ASSIGN1645:  preds = [COND14B4]
          int[6] femIndicies163E#1 = ExtractFemItem2<int,int[6],ExtractIndices(Space)>(_t136D,_t136F);
          tensor[6] femDofs163F#3 = ExtractFemItem2<int[6],tensor[6],ExtractDofsSeq(FemFunc)>(_t136B,femIndicies163E);
          tensor[6] dofs163D#1 = femDofs163F;
          tensor[6] basisResult1640#1 = EvaluateBasis<BasisArray(6)>(invertC1437);
          real probe_l_36162C#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[6],T6[2])<Σ(i0=0..5)<((T4_{i0} * T5_{i0}))>(i0=0..5)> (_t136F,_t136D,_t136B,invertC1437,dofs163D,basisResult1640,invertC1437);
          tensor[6] dofs1641#1 = femDofs163F;
          tensor[6] basisResult1642#1 = EvaluateBasis<BasisArray(6)>(invertB1362);
          real probe_l_37162D#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[6],T6[2])<Σ(i0=0..5)<((T4_{i0} * T5_{i0}))>(i0=0..5)> (_t136F,_t136D,_t136B,invertB1362,dofs1641,basisResult1642,invertB1362);
          real op1_e3_l_38162E#1 = λ(T0[],T1[])<(T0 * T1)> (_t137B,e123B);
          real op1_e3_l_39162F#1 = λ(T0[],T1[])<(T0) - (T1)> (probe_l_37162D,op1_e3_l_38162E);
          real op1_e3_l_401630#2 = λ(T0[],T1[])<(T1) - (T0)> (_t137D,op1_e3_l_39162F);
          tensor[6] dofs1643#1 = femDofs163F;
          tensor[6] basisResult1644#1 = EvaluateBasis<BasisArray(6)>(invertA1268);
          real probe_l_411631#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[6],T6[2])<Σ(i0=0..5)<((T4_{i0} * T5_{i0}))>(i0=0..5)> (_t136F,_t136D,_t136B,invertA1268,dofs1643,basisResult1644,invertA1268);
          real op1_e3_l_421632#1 = λ(T0[],T1[])<(T0 * T1)> (_t137B,s1239);
          real op1_e3_l_431633#1 = λ(T0[],T1[])<(T0) - (T1)> (probe_l_411631,op1_e3_l_421632);
          real op1_e3_l_441634#2 = λ(T0[],T1[])<(T1) - (T0)> (_t137D,op1_e3_l_431633);
          real op1_e3_l_451635#1 = λ(T0[],T1[])<(T0 * T1)> (s13E2,op1_e3_l_401630);
          real op1_e3_l_461636#1 = λ(T0[],T1[])<(T0 * T1)> (e123B,op1_e3_l_441634);
          real op1_e3_l_551637#1 = λ(T0[],T1[])<(T0) - (T1)> (op1_e3_l_451635,op1_e3_l_461636);
          real op1_e3_l_561638#1 = λ(T0[],T1[])<(T0) - (T1)> (op1_e3_l_401630,op1_e3_l_441634);
          real op1_e3_l_571639#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_551637,op1_e3_l_561638);
          real op1_e3_l_58163A#1 = λ(T0[],T1[])<(T0 * T1)> (_t137B,op1_e3_l_571639);
          real op1_e3_l_59163B#1 = λ(T0[],T1[])<(T0) - (T1)> (probe_l_36162C,op1_e3_l_58163A);
          real op1_e3_l_60163C#1 = λ(T0[],T1[])<(T1) - (T0)> (_t137D,op1_e3_l_59163B);
          real _t162B#1 = λ(T0[])<Abs(T0)> (op1_e3_l_60163C);
          bool _t165F#1 = LT<real>(_t162B,eps120F);
          if _t165F then goto ASSIGN1663 else goto ASSIGN1667
        ASSIGN1663:  preds = [COND1661]
          bool _t1662#1 = true;
          goto JOIN1665
        JOIN1665:  preds = [ASSIGN1663,ASSIGN1668]
          bool _t14B8#1 = phi(_t1662,_t1664)
          goto JOIN14B9
        ASSIGN1667:  preds = [COND1661]
          int _t1666#1 = 32;
          bool _t1664#1 = GT<int>(intersectionItter1480,_t1666);
          goto JOIN1665
        COND1669:  preds = [COND1496]
          if _t1484 then goto JOIN166C else goto ASSIGN167E
        JOIN166C:  preds = [COND1669,JOIN1682]
          int _t166A#1 = phi(_t147E,_t166B)
          if _t148A then goto JOIN1670 else goto ASSIGN1678
        JOIN1670:  preds = [COND166D,JOIN167C]
          int _t166E#1 = phi(_t147E,_t166F)
          int _t1671#1 = IMul(_t166A,_t166E);
          bool _t1673#1 = GT<int>(_t1671,_t1492);
          if _t1673 then goto JOIN1676 else goto JOIN1676
        JOIN1676:  preds = [COND1675,COND1675]
          real s1499#1 = phi(cup13E4,s13E2)
          goto JOIN149A
        ASSIGN1678:  preds = [COND166D]
          bool _t1677#1 = LT<real>(fm1447,_t1482);
          if _t1677 then goto ASSIGN167B else goto JOIN167C
        ASSIGN167B:  preds = [COND1679]
          int _t167A#1 = -1;
          goto JOIN167C
        JOIN167C:  preds = [ASSIGN167B,COND1679]
          int _t166F#1 = phi(_t167A,_t1492)
          goto JOIN1670
        ASSIGN167E:  preds = [COND1669]
          bool _t167D#1 = LT<real>(fa137F,_t1482);
          if _t167D then goto ASSIGN1681 else goto JOIN1682
        ASSIGN1681:  preds = [COND167F]
          int _t1680#1 = -1;
          goto JOIN1682
        JOIN1682:  preds = [ASSIGN1681,COND167F]
          int _t166B#1 = phi(_t1680,_t1492)
          goto JOIN166C
        ASSIGN1684:  preds = [COND148C]
          bool _t1683#1 = LT<real>(fm1447,_t1482);
          if _t1683 then goto ASSIGN1687 else goto ASSIGN168A
        ASSIGN1687:  preds = [COND1685]
          int _t1686#1 = -1;
          goto JOIN1689
        JOIN1689:  preds = [ASSIGN1687,ASSIGN168A]
          int _t148E#1 = phi(_t1686,_t1688)
          goto JOIN148F
        ASSIGN168A:  preds = [COND1685]
          int _t1688#1 = 0;
          goto JOIN1689
        ASSIGN168C:  preds = [COND1486]
          bool _t168B#1 = LT<real>(fa137F,_t1482);
          if _t168B then goto ASSIGN168F else goto ASSIGN1692
        ASSIGN168F:  preds = [COND168D]
          int _t168E#1 = -1;
          goto JOIN1691
        JOIN1691:  preds = [ASSIGN168F,ASSIGN1692]
          int _t1488#1 = phi(_t168E,_t1690)
          goto JOIN1489
        ASSIGN1692:  preds = [COND168D]
          int _t1690#1 = 0;
          goto JOIN1691
    end update
  end ray
## initial strand creation
  GRID(2)
    ENTRY1693:  preds = []
      int iresU1694#1 = globals.iresU0FDC;
      int iresV1696#1 = globals.iresV0FDD;
      int _t1698#2 = 0;
      int _t169A#2 = 1;
      int _t169C#1 = ISub(iresU1694,_t169A);
      int[] _t169E#1 = Range(_t1698,_t169C);
    FOREACH16A1:  preds = [ASSIGN169F,NEXT16AA]
      foreach (vi16A0 in _t169E) on exit goto RETURN16AB
      int _t16A2#1 = ISub(iresV1696,_t169A);
      int[] _t16A4#1 = Range(_t1698,_t16A2);
    FOREACH16A7:  preds = [ASSIGN16A5,NEXT16A9]
      foreach (ui16A6 in _t16A4) on exit goto NEXT16AA
      new ray(ui16A6,vi16A0);
      goto FOREACH16A7
    NEXT16AA:  preds = [FOREACH16A7]
      goto FOREACH16A1
    RETURN16AB:  preds = [FOREACH16A1]
      return
#### end program ####
##### mid-ir: after value numbering ####
## properties
  GlobalInit StrandArray HasStartMethod ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[]) HasInputs HasGlobals
## globals
  input isoval0FD6 (isoval) = <default>
  input thick0FD7 (thick) = <default>
  input camEye0FD8 (camEye) = <default>
  input camAt0FD9 (camAt) = <default>
  input camUp0FDA (camUp) = <default>
  input camFOV0FDB (camFOV) = <default>
  input iresU0FDC (iresU) = <default>
  input iresV0FDD (iresV) = <default>
  input camNear0FDE (camNear) = <default>
  input camFar0FDF (camFar) = <default>
  input refStep0FE0 (refStep) = <default>
  input rayStep0FE1 (rayStep) = <default>
  input a0FE2 (a) = <no-default>
  input 0b0472_intermedateGlobal0FE3 (b) = <no-default>
  input 0c0474_intermedateGlobal0FE4 (c) = <no-default>
  input eps0FE5 (eps) = <default>
  input indecies0FE6 (indecies) = <no-default>
  input times0FE7 (times) = <no-default>
  input cells0FE8 (cells) = <no-default>
  input mcnear0FE9 (mcnear) = <default>
  input mcfar0FEA (mcfar) = <default>
  input cmap0FEB (cmap) = image("/home/teocollin/gitcode/diderot/tests/lipRay/find/cmap.nrrd")
  input cmin0FEC (cmin) = <default>
  input cmax0FED (cmax) = <default>
  input light0FEE (light) = <default>
  input phongKa0FEF (phongKa) = <default>
  input phongKd0FF0 (phongKd) = <default>
  input phongKs0FF1 (phongKs) = <default>
  input phongSp0FF2 (phongSp) = <default>
  input maxAlpha0FF3 (maxAlpha) = <default>
  input lightVsp0FF4 (lightVsp) = <default>
  global femData:MeshCell[] 0cell_a0FF5
  global femData:FemFunc c0FF6
  global real camNearVsp0FF7
  global real camFarVsp0FF8
  global tensor[3] camN0FF9
  global tensor[3] camU0FFA
  global tensor[3] camV0FFB
  global real camVmax0FFC
  global real camUmax0FFD
  global tensor[3] L0FFE
  global image(IMAGE1D<double[3]>) img0FFF
  global kernel _t1000
## functions
  function femData:MeshPos _0A7F_msh_newtonInverse1269 (tensor[2] pos126A#3, int cellInt126B#7, femData:Mesh mesh126C#10) {
    ENTRY126D:  preds = []
      real _t126E#2 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
      tensor[2] xn1270#8 = <tensor[2]>[_t126E,_t126E];
      int _t1272#1 = 0;
      int _t1274#1 = 16;
      int[] _t1276#1 = Range(_t1272,_t1274);
    FOREACH1279:  preds = [ASSIGN1277,NEXT1356]
      foreach (itter1278 in _t1276) on exit goto ASSIGN135B
        tensor[2] xn127B#6 = phi(xn1270,xn127A)
      int[3] femIndicies1288#1 = ExtractFemItem2<int,int[3],ExtractIndices(Mesh)>(mesh126C,cellInt126B);
      tensor[3,2] femDofs1289#5 = ExtractFemItem2<int[3],tensor[3,2],ExtractDofsSeq(Mesh)>(mesh126C,femIndicies1288);
      tensor[2,3] basisResult128A#3 = EvaluateBasis<BasisArray(2,3)>(xn1270);
      tensor[2,2] probe_l_10127C#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i3=0..2)<((T3_{i3,i0} * T4_{i1,i3}))>(i3=0..2)>_{2 2} (cellInt126B,mesh126C,xn1270,femDofs1289,basisResult128A,xn1270);
      tensor[2,2] op1_e3_l_11127D#1 = λ(T0[2 2])<Σ(i2=0..1)<((ϵ_{ii2,ii0} * T0_{i2,i1}))>(i2=0..1)>_{2 2} (probe_l_10127C);
      tensor[2] probe_l_12127E#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i2=0..2)<((T3_{i2,i0} * T4_{'0',i2}))>(i2=0..2)>_{2} (cellInt126B,mesh126C,xn1270,femDofs1289,basisResult128A,xn1270);
      tensor[2] probe_l_13127F#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i2=0..2)<((T3_{i2,i0} * T4_{'1',i2}))>(i2=0..2)>_{2} (cellInt126B,mesh126C,xn1270,femDofs1289,basisResult128A,xn1270);
      tensor[2] op1_e3_l_141280#1 = λ(T0[2])<Σ(i1=0..1)<((ϵ_{ii0,ii1} * T0_{i1}))>(i1=0..1)>_{2} (probe_l_13127F);
      tensor[2,2] op1_e3_l_151281#1 = λ(T0[2 2])<Σ(i2=0..1)<((ϵ_{ii2,ii0} * T0_{i1,i2}))>(i2=0..1)>_{2 2} (op1_e3_l_11127D);
      real op1_e3_l_161282#1 = λ(T0[2],T1[2])<Σ(i0=0..1)<((T0_{i0} * T1_{i0}))>(i0=0..1)> (probe_l_12127E,op1_e3_l_141280);
      tensor[3] basisResult1290#2 = EvaluateBasis<BasisArray(3)>(xn127B);
      tensor[2] probe_l_171283#1 = λ(T0[2],INT1,FEM(msh)2,T3[3 2],T4[3],T5[2])<Σ(i1=0..2)<((T3_{i1,i0} * T4_{i1}))>(i1=0..2)>_{2} (xn127B,cellInt126B,mesh126C,femDofs1289,basisResult1290,xn127B);
      tensor[2,2] op1_e3_l_181284#2 = λ(T0[2 2],T1[])<(T0_{i0,i1}) / ( T1)>_{2 2} (op1_e3_l_151281,op1_e3_l_161282);
      tensor[2] op1_e3_l_191285#1 = λ(T0[2],T1[2])<(T1_{i0}) - (T0_{i0})>_{2} (pos126A,probe_l_171283);
      tensor[2] op1_e3_l_201286#1 = λ(T0[2 2],T1[2])<Σ(i1=0..1)<((T0_{i0,i1} * T1_{i1}))>(i1=0..1)>_{2} (op1_e3_l_181284,op1_e3_l_191285);
      tensor[2] xn127A#4 = λ(T0[2],T1[2])<(T0_{i0}) - (T1_{i0})>_{2} (xn127B,op1_e3_l_201286);
      real _t12A7#2 = 0.1e-7;
      real _t12A9#1 = λ(T0[],T1[])<(T0 * T1)> (_t12A7,_t12A7);
      tensor[2] probe_l_2512B3#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[3],T5[2])<Σ(i1=0..2)<((T3_{i1,i0} * T4_{i1}))>(i1=0..2)>_{2} (cellInt126B,mesh126C,xn127B,femDofs1289,basisResult1290,xn127B);
      tensor[2] op1_e3_l_2712B5#1 = λ(T0[2],T1[2])<(T1_{i0}) - (T0_{i0})>_{2} (pos126A,probe_l_2512B3);
      tensor[2] op1_e3_l_3812B6#2 = λ(T0[2 2],T1[2])<Σ(i1=0..1)<((T0_{i0,i1} * T1_{i1}))>(i1=0..1)>_{2} (op1_e3_l_181284,op1_e3_l_2712B5);
      real _t12AB#1 = λ(T0[2],T1[2])<Σ(i0=0..1)<((T0_{i0} * T1_{i0}))>(i0=0..1)> (op1_e3_l_3812B6,op1_e3_l_3812B6);
      bool _t12D7#1 = GTE<real>(_t12A9,_t12AB);
      if _t12D7 then goto ASSIGN12DB else goto JOIN1355
    ASSIGN12DB:  preds = [COND12D9]
      real _t12DA#3 = 0.1e1;
      real _t12DC#3 = 0.1e-8;
      real _t12DE#1 = λ(T0[],T1[])<(T0 + T1)> (_t12DA,_t12DC);
      tensor[2] _t12E0#1 = <tensor[2]>[_t12DA,_t12DA];
      real _t12E2#1 = λ(T0[2],T1[2])<Σ(i0=0..1)<((T0_{i0} * T1_{i0}))>(i0=0..1)> (_t12E0,xn127A);
      bool _t1310#1 = GT<real>(_t12DE,_t12E2);
      tensor[2] _t1312#1 = <tensor[2]>[_t12DC,_t12DC];
      tensor[2] _t1314#2 = λ(T0[2],T1[2])<(T0_{i0} + T1_{i0})>_{2} (_t1312,xn127A);
      real _t1342#1 = TensorIndex<tensor[2],[0]>(_t1314);
      real _t1344#2 = -0.e0;
      bool _t1346#1 = GT<real>(_t1342,_t1344);
      real _t1348#1 = TensorIndex<tensor[2],[1]>(_t1314);
      bool _t134A#1 = GT<real>(_t1348,_t1344);
      bool _t134C#1 = BAnd(_t1346,_t134A);
      bool _t134E#1 = BAnd(_t1310,_t134C);
      if _t134E then goto ASSIGN1352 else goto ASSIGN1358
    ASSIGN1352:  preds = [COND1350]
      femData:MeshPos _t1351#1 = ExtractFemItemN<[femData:Mesh,int,tensor[2],tensor[2]],femData:MeshPos,AllBuild(MeshPos),0000,"",[],int>(mesh126C,cellInt126B,xn127A,pos126A);
      return _t1351
      goto JOIN1354
    JOIN1354:  preds = [*RETURN(_t1351)1353,*RETURN(_t1357)1359]
      goto JOIN1355
    JOIN1355:  preds = [*JOIN1354,COND12D9]
      goto FOREACH1279
    ASSIGN1358:  preds = [COND1350]
      femData:MeshPos _t1357#1 = ExtractFemItemN<[femData:Mesh],femData:MeshPos,InvalidBuild(MeshPos),0000,"",[],int>(mesh126C);
      return _t1357
      goto JOIN1354
    ASSIGN135B:  preds = [FOREACH1279]
      femData:MeshPos _t135A#1 = ExtractFemItemN<[femData:Mesh],femData:MeshPos,InvalidBuild(MeshPos),0000,"",[],int>(mesh126C);
      return _t135A
}
## input initialization
  ENTRY1001:  preds = []
    real isoval1002#1 = 0.2e0;
    globals.isoval0FD6 = isoval1002;
    real thick1005#1 = 0.7e-1;
    globals.thick0FD7 = thick1005;
    real _t1008#2 = 0.3e1;
    real _t100A#1 = -0.3e1;
    tensor[3] camEye100C#1 = <tensor[3]>[_t1008,_t100A,_t1008];
    globals.camEye0FD8 = camEye100C;
    real _t100F#5 = 0.5e0;
    tensor[3] camAt1011#1 = <tensor[3]>[_t100F,_t100F,_t100F];
    globals.camAt0FD9 = camAt1011;
    real _t1014#4 = 0.e0;
    real _t1016#7 = 0.1e1;
    tensor[3] camUp1018#2 = <tensor[3]>[_t1014,_t1014,_t1016];
    globals.camUp0FDA = camUp1018;
    real camFOV101B#1 = 0.137e2;
    globals.camFOV0FDB = camFOV101B;
    int iresU101E#2 = 10;
    globals.iresU0FDC = iresU101E;
    globals.iresV0FDD = iresU101E;
    real camNear1022#1 = -0.2e1;
    globals.camNear0FDE = camNear1022;
    real camFar1025#1 = 0.5e1;
    globals.camFar0FDF = camFar1025;
    globals.refStep0FE0 = _t1016;
    real rayStep1029#1 = 0.1e-1;
    globals.rayStep0FE1 = rayStep1029;
    real eps102C#1 = 0.1e-5;
    globals.eps0FE5 = eps102C;
    tensor[3] mcnear102F#2 = <tensor[3]>[_t1016,_t1016,_t1016];
    globals.mcnear0FE9 = mcnear102F;
    globals.mcfar0FEA = mcnear102F;
    globals.cmin0FEC = _t1014;
    globals.cmax0FED = _t1016;
    bool light1035#1 = true;
    globals.light0FEE = light1035;
    globals.phongKa0FEF = _t100F;
    globals.phongKd0FF0 = _t100F;
    globals.phongKs0FF1 = _t1014;
    real phongSp103B#1 = 0.6e2;
    globals.phongSp0FF2 = phongSp103B;
    globals.maxAlpha0FF3 = _t1016;
    globals.lightVsp0FF4 = camUp1018;
    return
## global-variable initialization
  ENTRY1041:  preds = []
    tensor[3] camEye1042#1 = globals.camEye0FD8;
    tensor[3] camAt1044#1 = globals.camAt0FD9;
    tensor[3] camUp1046#1 = globals.camUp0FDA;
    real camFOV1048#1 = globals.camFOV0FDB;
    int iresU104A#1 = globals.iresU0FDC;
    int iresV104C#1 = globals.iresV0FDD;
    real camNear104E#1 = globals.camNear0FDE;
    real camFar1050#1 = globals.camFar0FDF;
    femData:Mesh a1052#3 = globals.a0FE2;
    femData:Space 0b0472_intermedateGlobal1054#1 = globals.0b0472_intermedateGlobal0FE3;
    femData:FemFunc 0c0474_intermedateGlobal1056#1 = globals.0c0474_intermedateGlobal0FE4;
    image(IMAGE1D<double[3]>) cmap1058#1 = globals.cmap0FEB;
    tensor[3] lightVsp105A#2 = globals.lightVsp0FF4;
    int _t105C#1 = 0;
    int _t105E#1 = 1;
    int _t1060#1 = ExtractFemItem<int,NumCell(Mesh)>(a1052);
    int _t1062#1 = ISub(_t1060,_t105E);
    int[] _t1064#1 = Range(_t105C,_t1062);
    femData:MeshCell[] _t1066#1 = <femData:MeshCell[]>{};
  FOREACH1069:  preds = [ASSIGN1067,NEXT106F]
    foreach (_t1068 in _t1064) on exit goto GASSIGN1070
      femData:MeshCell[] _t106D#2 = phi(_t1066,_t106C)
    femData:MeshCell _t106A#1 = LoadFem<femData:MeshCell>(a1052,_t1068);
    femData:MeshCell[] _t106C#1 = Append<femData:MeshCell>(_t106D,_t106A);
    goto FOREACH1069
  GASSIGN1070:  preds = [FOREACH1069]
    globals.0cell_a0FF5 = _t106D;
    femData:Space b1071#1 = LoadFem<femData:Space>(0b0472_intermedateGlobal1054,a1052);
    femData:FemFunc c1073#1 = LoadFem<femData:FemFunc>(0c0474_intermedateGlobal1056,b1071);
    globals.c0FF6 = c1073;
    tensor[3] op1_e3_l_31077#5 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (camAt1044,camEye1042);
    real op1_e3_l_51078#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_31077,op1_e3_l_31077);
    real op1_e3_l_61079#5 = λ(T0[])<Sqrt(T0)> (op1_e3_l_51078);
    real camNearVsp1076#1 = λ(T0[],T1[])<(T0 + T1)> (camNear104E,op1_e3_l_61079);
    globals.camNearVsp0FF7 = camNearVsp1076;
    real camFarVsp107F#1 = λ(T0[],T1[])<(T0 + T1)> (camFar1050,op1_e3_l_61079);
    globals.camFarVsp0FF8 = camFarVsp107F;
    real op1_e3_l_9108C#6 = λ(T0[])<(1) / ( T0)> (op1_e3_l_61079);
    tensor[3] camN1088#2 = λ(T0[3],T1[])<(T0_{i0} * T1)>_{3} (op1_e3_l_31077,op1_e3_l_9108C);
    globals.camN0FF9 = camN1088;
    tensor[3,3] op1_e3_l_151097#1 = λ(T0[3])<Σ(i2=0..2)<((ϵ_{ii0,ii1,ii2} * T0_{i2}))>(i2=0..2)>_{3 3} (camUp1046);
    tensor[3] op1_e3_l_171099#4 = λ(T0[3],T1[3 3])<Σ(i1=0..2)<((T0_{i1} * T1_{i0,i1}))>(i1=0..2)>_{3} (op1_e3_l_31077,op1_e3_l_151097);
    real op1_e3_l_34109A#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_171099,op1_e3_l_171099);
    real op1_e3_l_35109B#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (op1_e3_l_9108C,op1_e3_l_9108C,op1_e3_l_34109A);
    real op1_e3_l_36109C#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_35109B);
    tensor[3] op1_e3_l_37109D#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (op1_e3_l_9108C,op1_e3_l_171099);
    real op1_e3_l_38109E#2 = λ(T0[])<(1) / ( T0)> (op1_e3_l_36109C);
    tensor[3] camU1093#2 = λ(T0[3],T1[])<(T0_{i0} * T1)>_{3} (op1_e3_l_37109D,op1_e3_l_38109E);
    globals.camU0FFA = camU1093;
    tensor[3,3] op1_e3_l_4510B6#1 = λ(T0[3])<Σ(i2=0..2)<((ϵ_{ii0,ii1,ii2} * T0_{i2}))>(i2=0..2)>_{3 3} (op1_e3_l_31077);
    tensor[3] op1_e3_l_4710B7#1 = λ(T0[3],T1[3 3])<Σ(i1=0..2)<((T0_{i1} * T1_{i0,i1}))>(i1=0..2)>_{3} (op1_e3_l_171099,op1_e3_l_4510B6);
    tensor[3] op1_e3_l_5010B9#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (op1_e3_l_9108C,op1_e3_l_4710B7);
    tensor[3] camV10AC#2 = λ(T0[],T1[],T2[3])<(T0 * T1 * T2_{i0})>_{3} (op1_e3_l_38109E,op1_e3_l_9108C,op1_e3_l_5010B9);
    globals.camV0FFB = camV10AC;
    real _t10C9#1 = 0.314159265358979323846264338327950288e1;
    real _t10CB#1 = 0.36e3;
    real op1_e3_l_510CE#1 = λ(T0[],T1[])<(T0 * T1)> (camFOV1048,_t10C9);
    real op1_e3_l_610CF#1 = λ(T0[],T1[])<(T1) / ( T0)> (_t10CB,op1_e3_l_510CE);
    real op1_e3_l_1010D2#2 = λ(T0[])<Tangent(T0)> (op1_e3_l_610CF);
    real camVmax10CD#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_1010D2,op1_e3_l_61079);
    globals.camVmax0FFC = camVmax10CD;
    real _t10DC#1 = IntToReal(iresU104A);
    real _t10DE#1 = IntToReal(iresV104C);
    real op1_e3_l_1410E7#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t10DC,op1_e3_l_1010D2,op1_e3_l_61079);
    real camUmax10E0#1 = λ(T0[],T1[])<(T1) / ( T0)> (_t10DE,op1_e3_l_1410E7);
    globals.camUmax0FFD = camUmax10E0;
    kernel _t10F1#1 = Kernel<tent,0>;
    image(IMAGE1D<double[3]>) img10F3#1 = BorderCtlClamp<IMAGE1D<double[3]>>(cmap1058);
    tensor[3,3] _t10F5#1 = <tensor[3,3]>[camU1093,camV10AC,camN1088];
    real op1_e3_l_310F8#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (lightVsp105A);
    real op1_e3_l_410F9#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_310F8);
    real op1_e3_l_510FA#1 = λ(T0[])<(1) / ( T0)> (op1_e3_l_410F9);
    tensor[3] op1_e3_l_610FB#1 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i1,i0} * T1_{i1}))>(i1=0..2)>_{3} (_t10F5,lightVsp105A);
    tensor[3] L10F7#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (op1_e3_l_510FA,op1_e3_l_610FB);
    globals.L0FFE = L10F7;
    globals.img0FFF = img10F3;
    globals._t1000 = _t10F1;
    return
## strand
  strand ray (int ui1105#2, int vi1106#3)
    state:
      real rayU;
      real rayV;
      tensor[3] UV;
      tensor[3] rayOrig;
      tensor[3] rayVec;
      real camNearVsp;
      real camFarVsp;
      int offset;
      int len;
      int itter;
      int intersectionItter;
      int idx;
      tensor[2] interval;
      real s;
      real e;
      femData:MeshCell cc;
      femData:FuncCell fc;
      output real out;
      output tensor[4] rgba;
    state init
      ENTRY111A:  preds = []
        tensor[3] camEye111B#1 = globals.camEye0FD8;
        int iresU111D#2 = globals.iresU0FDC;
        int iresV111F#3 = globals.iresV0FDD;
        femData:MeshCell[] 0cell_a1121#1 = globals.0cell_a0FF5;
        femData:FemFunc c1123#1 = globals.c0FF6;
        int[] indecies1125#2 = globals.indecies0FE6;
        tensor[2][] times1127#1 = globals.times0FE7;
        real camNearVsp1129#1 = globals.camNearVsp0FF7;
        real camFarVsp112B#1 = globals.camFarVsp0FF8;
        tensor[3] camN112D#1 = globals.camN0FF9;
        tensor[3] camU112F#1 = globals.camU0FFA;
        tensor[3] camV1131#1 = globals.camV0FFB;
        real camVmax1133#2 = globals.camVmax0FFC;
        real camUmax1135#2 = globals.camUmax0FFD;
        real _t1137#5 = -0.5e0;
        real _t1139#1 = IntToReal(ui1105);
        real _t113B#1 = IntToReal(iresU111D);
        real _t113D#3 = 0.5e0;
        real op1_e3_l_61140#1 = λ(T0[],T1[])<(T0) - (T1)> (_t113B,_t113D);
        real op1_e3_l_71141#1 = λ(T0[],T1[])<(T1) - (T0)> (_t1137,_t1139);
        real op1_e3_l_81142#1 = λ(T0[],T1[])<(T1) - (T0)> (_t1137,op1_e3_l_61140);
        real op1_e3_l_91143#2 = λ(T0[])<Neg(T0)> (camUmax1135);
        real op1_e3_l_101144#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_71141,op1_e3_l_81142);
        real op1_e3_l_111145#1 = λ(T0[],T1[])<(T0) - (T1)> (camUmax1135,op1_e3_l_91143);
        real op1_e3_l_131146#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_101144,op1_e3_l_111145);
        real rayU113F#2 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_91143,op1_e3_l_131146);
        real _t114F#1 = IntToReal(vi1106);
        real _t1151#2 = IntToReal(iresV111F);
        real op1_e3_l_61154#1 = λ(T0[],T1[])<(T0) - (T1)> (_t1151,_t113D);
        real op1_e3_l_71155#2 = λ(T0[],T1[])<(T1) - (T0)> (_t1137,_t114F);
        real op1_e3_l_81156#1 = λ(T0[],T1[])<(T1) - (T0)> (_t1137,op1_e3_l_61154);
        real op1_e3_l_91157#3 = λ(T0[])<Neg(T0)> (camVmax1133);
        real op1_e3_l_101158#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_71155,op1_e3_l_81156);
        real op1_e3_l_111159#2 = λ(T0[],T1[])<(T0) - (T1)> (camVmax1133,op1_e3_l_91157);
        real op1_e3_l_13115A#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_101158,op1_e3_l_111159);
        real rayV1153#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_91157,op1_e3_l_13115A);
        real op1_e3_l_23116C#1 = λ(T0[],T1[])<(T1) - (T0)> (_t113D,_t1151);
        real op1_e3_l_25116E#1 = λ(T0[],T1[])<(T1) - (T0)> (_t1137,op1_e3_l_23116C);
        real op1_e3_l_271170#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_71155,op1_e3_l_25116E);
        real op1_e3_l_301172#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_271170,op1_e3_l_111159);
        real op1_e3_l_311173#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_91157,op1_e3_l_301172);
        tensor[3] op1_e3_l_321174#2 = λ(T0[3],T1[])<(T1 * T0_{i0})>_{3} (camU112F,rayU113F);
        tensor[3] op1_e3_l_331175#2 = λ(T0[3],T1[])<(T1 * T0_{i0})>_{3} (camV1131,op1_e3_l_311173);
        tensor[3] UV1163#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (op1_e3_l_321174,op1_e3_l_331175);
        tensor[3] rayOrig1189#1 = λ(T0[3],T1[3],T2[3])<(T0_{i0} + T1_{i0} + T2_{i0})>_{3} (camEye111B,op1_e3_l_321174,op1_e3_l_331175);
        real _t11AF#8 = 0.e0;
        tensor[3] _t11B1#1 = <tensor[3]>[_t11AF,_t11AF,_t11AF];
        tensor[3] rayVec11B3#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (camN112D,_t11B1);
        int _t11B5#2 = IMul(ui1105,iresV111F);
        int _t11B7#1 = IAdd(_t11B5,vi1106);
        int offset11B9#2 = Subscript<int[]>(indecies1125,_t11B7);
        int _t11BB#1 = IMul(iresU111D,iresV111F);
        int _t11BD#1 = IAdd(_t11BB,_t11B5);
        int _t11BF#1 = IAdd(_t11BD,vi1106);
        int len11C1#1 = Subscript<int[]>(indecies1125,_t11BF);
        int itter11C3#4 = 0;
        int idx11C5#2 = IAdd(offset11B9,itter11C3);
        tensor[2] interval11C7#3 = Subscript<tensor[2][]>(times1127,idx11C5);
        real s11C9#1 = TensorIndex<tensor[2],[0]>(interval11C7);
        real e11CB#1 = TensorIndex<tensor[2],[1]>(interval11C7);
        femData:MeshCell cc11CD#2 = Subscript<femData:MeshCell[]>(0cell_a1121,itter11C3);
        int _t11CF#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc11CD);
        femData:FuncCell _t11D1#1 = LoadFem<femData:FuncCell>(c1123,_t11CF);
        tensor[4] rgba11D3#1 = <tensor[4]>[_t11AF,_t11AF,_t11AF,_t11AF];
        self.rayU = rayU113F;
        self.rayV = rayV1153;
        self.UV = UV1163;
        self.rayOrig = rayOrig1189;
        self.rayVec = rayVec11B3;
        self.camNearVsp = camNearVsp1129;
        self.camFarVsp = camFarVsp112B;
        self.offset = offset11B9;
        self.len = len11C1;
        self.itter = itter11C3;
        self.intersectionItter = itter11C3;
        self.idx = idx11C5;
        self.interval = interval11C7;
        self.s = s11C9;
        self.e = e11CB;
        self.cc = cc11CD;
        self.fc = _t11D1;
        self.out = _t11AF;
        self.rgba = rgba11D3;
        return
    end state init
    method start
        ENTRY11E9:  preds = []
          femData:MeshCell[] 0cell_a11EA#1 = globals.0cell_a0FF5;
          femData:FemFunc c11EC#1 = globals.c0FF6;
          int[] cells11EE#1 = globals.cells0FE8;
          int len11F0#1 = self.len;
          int idx11F2#1 = self.idx;
          int _t11F4#1 = 0;
          bool _t11F6#1 = EQ<int>(len11F0,_t11F4);
          if _t11F6 then goto STABILIZE11F9 else goto JOIN11FA
        STABILIZE11F9:  preds = [COND11F8]
          stabilize
          goto JOIN11FA
        JOIN11FA:  preds = [*STABILIZE11F9,COND11F8]
          int _t11FB#1 = Subscript<int[]>(cells11EE,idx11F2);
          femData:MeshCell cc11FD#2 = Subscript<femData:MeshCell[]>(0cell_a11EA,_t11FB);
          int _t11FF#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc11FD);
          femData:FuncCell _t1201#1 = LoadFem<femData:FuncCell>(c11EC,_t11FF);
          self.cc = cc11FD;
          self.fc = _t1201;
          active
    end start
    method update
        ENTRY1206:  preds = []
          image(IMAGE1D<double[3]>) cmap16AD#3 = globals.cmap0FEB;
          image(IMAGE1D<double[3]>) img1207#1 = globals.img0FFF;
          kernel _t1209#1 = globals._t1000;
          femData:MeshCell[] 0cell_a120B#1 = globals.0cell_a0FF5;
          femData:FemFunc c120D#1 = globals.c0FF6;
          real eps120F#8 = globals.eps0FE5;
          tensor[2][] times1211#1 = globals.times0FE7;
          int[] cells1213#1 = globals.cells0FE8;
          tensor[3] mcnear1215#2 = globals.mcnear0FE9;
          tensor[3] mcfar1217#1 = globals.mcfar0FEA;
          real cmin1219#3 = globals.cmin0FEC;
          real cmax121B#2 = globals.cmax0FED;
          bool light121D#1 = globals.light0FEE;
          real phongKa121F#1 = globals.phongKa0FEF;
          real phongKd1221#1 = globals.phongKd0FF0;
          real phongKs1223#1 = globals.phongKs0FF1;
          real phongSp1225#1 = globals.phongSp0FF2;
          tensor[3] L1227#2 = globals.L0FFE;
          tensor[3] rayOrig1229#3 = self.rayOrig;
          tensor[3] rayVec122B#5 = self.rayVec;
          real camNearVsp122D#2 = self.camNearVsp;
          real camFarVsp122F#1 = self.camFarVsp;
          int offset1231#1 = self.offset;
          int len1233#1 = self.len;
          int itter1235#2 = self.itter;
          int intersectionItter1237#2 = self.intersectionItter;
          real s1239#6 = self.s;
          real e123B#5 = self.e;
          femData:MeshCell cc123D#2 = self.cc;
          femData:FuncCell fc123F#2 = self.fc;
          real out1241#1 = self.out;
          string _t1243#1 = "Interval:";
          tensor[2] _t1245#1 = <tensor[2]>[s1239,e123B];
          string _t1247#10 = "\n";
          Print<[string,tensor[2],string]>(_t1243,_t1245,_t1247);
          string _t124A#1 = "inner itter:";
          Print<[string,int,string]>(_t124A,intersectionItter1237,_t1247);
          string _t124D#1 = "Outer itter:";
          Print<[string,int,string]>(_t124D,itter1235,_t1247);
          real _t1250#1 = TensorIndex<tensor[3],[0]>(rayOrig1229);
          real _t1252#1 = TensorIndex<tensor[3],[1]>(rayOrig1229);
          tensor[2] _t1254#3 = <tensor[2]>[_t1250,_t1252];
          real _t1256#1 = TensorIndex<tensor[3],[0]>(rayVec122B);
          real _t1258#1 = TensorIndex<tensor[3],[1]>(rayVec122B);
          tensor[2] _t125A#3 = <tensor[2]>[_t1256,_t1258];
          tensor[2] op1_e3_l_3125D#1 = λ(T0[],T1[2])<(T0 * T1_{i0})>_{2} (s1239,_t125A);
          tensor[2] startRay125C#4 = λ(T0[2],T1[2])<(T0_{i0} + T1_{i0})>_{2} (_t1254,op1_e3_l_3125D);
          tensor[2] op1_e3_l_31261#1 = λ(T0[],T1[2])<(T0 * T1_{i0})>_{2} (e123B,_t125A);
          tensor[2] endRay1260#1 = λ(T0[2],T1[2])<(T0_{i0} + T1_{i0})>_{2} (_t1254,op1_e3_l_31261);
          femData:Mesh _t1264#13 = ExtractFem<femData:Mesh,femData:MeshCell>(cc123D);
          int _t1266#11 = ExtractFemItem<int,CellIndex(MeshCell)>(cc123D);
          femData:MeshPos callNewtonPos135D#1 = _0A7F_msh_newtonInverse1269 (startRay125C,_t1266,_t1264);
          tensor[2] refPos135E#11 = ExtractFemItem<tensor[2],RefPos(Mesh)>(callNewtonPos135D);
          femData:MeshPos callNewtonPos1363#1 = _0A7F_msh_newtonInverse1269 (endRay1260,_t1266,_t1264);
          tensor[2] refPos1364#4 = ExtractFemItem<tensor[2],RefPos(Mesh)>(callNewtonPos1363);
          string _t1368#1 = "inverses:";
          Print<[string,tensor[2],tensor[2],string]>(_t1368,refPos135E,refPos1364,_t1247);
          femData:FemFunc _t136B#7 = ExtractFem<femData:FemFunc,femData:FuncCell>(fc123F);
          femData:Space _t136D#6 = ExtractFem<femData:Space,femData:FemFunc>(_t136B);
          int _t136F#6 = ExtractFemItem<int,CellIndex(FuncCell)>(fc123F);
          int[6] femIndicies1373#1 = ExtractFemItem2<int,int[6],ExtractIndices(Space)>(_t136D,_t136F);
          tensor[6] femDofs1374#5 = ExtractFemItem2<int[6],tensor[6],ExtractDofsSeq(FemFunc)>(_t136B,femIndicies1373);
          tensor[6] basisResult1375#1 = EvaluateBasis<BasisArray(6)>(refPos135E);
          real faVal1371#2 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[6],T6[2])<Σ(i0=0..5)<((T4_{i0} * T5_{i0}))>(i0=0..5)> (_t136F,_t136D,_t136B,refPos135E,femDofs1374,basisResult1375,refPos135E);
          real _t137B#3 = TensorIndex<tensor[3],[2]>(rayVec122B);
          real _t137D#3 = TensorIndex<tensor[3],[2]>(rayOrig1229);
          real op1_e3_l_81381#1 = λ(T0[],T1[])<(T0 * T1)> (_t137B,s1239);
          real op1_e3_l_91382#1 = λ(T0[],T1[])<(T0) - (T1)> (faVal1371,op1_e3_l_81381);
          real fa137F#10 = λ(T0[],T1[])<(T1) - (T0)> (_t137D,op1_e3_l_91382);
          tensor[6] basisResult1396#1 = EvaluateBasis<BasisArray(6)>(refPos1364);
          real probe_l_71390#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[6],T6[2])<Σ(i0=0..5)<((T4_{i0} * T5_{i0}))>(i0=0..5)> (_t136F,_t136D,_t136B,refPos1364,femDofs1374,basisResult1396,refPos1364);
          real op1_e3_l_81391#1 = λ(T0[],T1[])<(T0 * T1)> (_t137B,e123B);
          real op1_e3_l_91392#1 = λ(T0[],T1[])<(T0) - (T1)> (probe_l_71390,op1_e3_l_81391);
          real fb138F#5 = λ(T0[],T1[])<(T1) - (T0)> (_t137D,op1_e3_l_91392);
          string _t139F#1 = "Vals:";
          tensor[2] _t13A1#1 = <tensor[2]>[fa137F,fb138F];
          Print<[string,tensor[2],string]>(_t139F,_t13A1,_t1247);
          real op1_e3_l_2213AD#1 = λ(T0[],T1[])<(T0) - (T1)> (fa137F,fb138F);
          real _t13A4#1 = λ(T0[])<Abs(T0)> (op1_e3_l_2213AD);
          bool _t13C4#1 = LT<real>(_t13A4,eps120F);
          if _t13C4 then goto ASSIGN16D2 else goto JOIN13E3
        ASSIGN16D2:  preds = [COND13C6]
          real _t13C7#1 = λ(T0[])<Abs(T0)> (fa137F);
          bool _t13D9#1 = GT<real>(_t13C7,eps120F);
          if _t13D9 then goto ASSIGN13DD else goto JOIN13E1
        ASSIGN13DD:  preds = [COND13DB]
          real s13DC#1 = λ(T0[],T1[])<(T0 + T1)> (s1239,eps120F);
          self.s = s13DC;
          active
          goto JOIN13E1
        JOIN13E1:  preds = [*ACTIVE13DF,COND13DB]
          real s13E0#1 = phi(s1239)
          goto JOIN13E3
        JOIN13E3:  preds = [JOIN13E1,COND13C6]
          real s13E2#3 = phi(s13E0,s1239)
          real op1_e3_l_3813ED#1 = λ(T0[],T1[])<(T0 * T1)> (s13E2,fb138F);
          real op1_e3_l_3913EE#1 = λ(T0[],T1[])<(T0 * T1)> (e123B,fa137F);
          real op1_e3_l_4813EF#1 = λ(T0[],T1[])<(T0) - (T1)> (op1_e3_l_3813ED,op1_e3_l_3913EE);
          real op1_e3_l_4913F0#1 = λ(T0[],T1[])<(T0) - (T1)> (fb138F,fa137F);
          real cup13E4#6 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_4813EF,op1_e3_l_4913F0);
          string _t140A#1 = "Mid time:";
          Print<[string,real,string]>(_t140A,cup13E4,_t1247);
          tensor[2] op1_e3_l_53141B#1 = λ(T0[2],T1[])<(T1 * T0_{i0})>_{2} (_t125A,cup13E4);
          tensor[2] midRay140D#4 = λ(T0[2],T1[2])<(T0_{i0} + T1_{i0})>_{2} (_t1254,op1_e3_l_53141B);
          femData:MeshPos callNewtonPos1438#1 = _0A7F_msh_newtonInverse1269 (midRay140D,_t1266,_t1264);
          tensor[2] refPos1439#10 = ExtractFemItem<tensor[2],RefPos(Mesh)>(callNewtonPos1438);
          tensor[6] basisResult1441#1 = EvaluateBasis<BasisArray(6)>(refPos1439);
          real fmVal143D#2 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[6],T6[2])<Σ(i0=0..5)<((T4_{i0} * T5_{i0}))>(i0=0..5)> (_t136F,_t136D,_t136B,refPos1439,femDofs1374,basisResult1441,refPos1439);
          real op1_e3_l_581456#1 = λ(T0[],T1[])<(T0 * T1)> (_t137B,cup13E4);
          real op1_e3_l_591457#1 = λ(T0[],T1[])<(T0) - (T1)> (fmVal143D,op1_e3_l_581456);
          real fm1447#6 = λ(T0[],T1[])<(T1) - (T0)> (_t137D,op1_e3_l_591457);
          string _t1479#1 = "all vals:";
          tensor[3] _t147B#1 = <tensor[3]>[fa137F,fm1447,fb138F];
          Print<[string,tensor[3],string]>(_t1479,_t147B,_t1247);
          int _t147E#6 = 1;
          int intersectionItter1480#2 = IAdd(intersectionItter1237,_t147E);
          real _t1482#10 = 0.e0;
          bool _t1484#2 = GT<real>(fa137F,_t1482);
          if _t1484 then goto JOIN1489 else goto ASSIGN168C
        JOIN1489:  preds = [COND1486,JOIN1691]
          int _t1487#1 = phi(_t147E,_t1488)
          bool _t148A#2 = GT<real>(fm1447,_t1482);
          if _t148A then goto JOIN148F else goto ASSIGN1684
        JOIN148F:  preds = [COND148C,JOIN1689]
          int _t148D#1 = phi(_t147E,_t148E)
          int _t1490#1 = IMul(_t1487,_t148D);
          int _t1492#8 = 0;
          bool _t1494#1 = LT<int>(_t1490,_t1492);
          if _t1494 then goto JOIN149A else goto COND1669
        JOIN149A:  preds = [COND1496,JOIN1676]
          real e1497#4 = phi(cup13E4,e123B)
          real s1498#5 = phi(s13E2,s1499)
          string _t149B#1 = "new interval:";
          tensor[2] _t149D#1 = <tensor[2]>[s1498,e1497];
          Print<[string,tensor[2],string]>(_t149B,_t149D,_t1247);
          real _t14A0#2 = λ(T0[])<Abs(T0)> (fa137F);
          bool _t14B2#2 = LT<real>(_t14A0,eps120F);
          if _t14B2 then goto ASSIGN14B6 else goto ASSIGN16DC
        ASSIGN14B6:  preds = [COND14B4]
          bool _t14B5#1 = true;
          goto JOIN14B9
        JOIN14B9:  preds = [ASSIGN14B6,JOIN1665]
          bool _t14B7#1 = phi(_t14B5,_t14B8)
          if _t14B7 then goto ASSIGN16DD else goto ASSIGN1629
        ASSIGN16DD:  preds = [COND14BA]
          real _t14BB#2 = λ(T0[])<Abs(T0)> (fm1447);
          bool _t14EF#1 = GT<real>(_t14BB,eps120F);
          if _t14EF then goto ASSIGN14F3 else goto ASSIGN1627
        ASSIGN14F3:  preds = [COND14F1]
          bool _t14F2#1 = GT<real>(_t14A0,eps120F);
          goto JOIN14F6
        JOIN14F6:  preds = [ASSIGN14F3,ASSIGN1627]
          bool _t14F4#1 = phi(_t14F2,_t14F5)
          if _t14F4 then goto ASSIGN14F9 else goto ASSIGN1529
        ASSIGN14F9:  preds = [COND14F7]
          int itter14F8#4 = IAdd(itter1235,_t147E);
          bool _t14FA#1 = GTE<int>(itter14F8,len1233);
          if _t14FA then goto ASSIGN14FE else goto JOIN1505
        ASSIGN14FE:  preds = [COND14FC]
          string _t14FD#1 = "Fin pixel=============================\n";
          Print<[string]>(_t14FD);
          self.itter = itter14F8;
          self.intersectionItter = _t1492;
          self.s = s1498;
          self.e = e1497;
          stabilize
          goto JOIN1505
        JOIN1505:  preds = [*STABILIZE1504,COND14FC]
          int _t1506#2 = IAdd(offset1231,itter14F8);
          tensor[2] interval1508#3 = Subscript<tensor[2][]>(times1211,_t1506);
          int _t150A#1 = Subscript<int[]>(cells1213,_t1506);
          femData:MeshCell cc150C#2 = Subscript<femData:MeshCell[]>(0cell_a120B,_t150A);
          real s150E#1 = TensorIndex<tensor[2],[0]>(interval1508);
          real e1510#1 = TensorIndex<tensor[2],[1]>(interval1508);
          int _t1512#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc150C);
          femData:FuncCell _t1514#1 = LoadFem<femData:FuncCell>(c120D,_t1512);
          string _t1516#1 = "Next interval!\n";
          Print<[string]>(_t1516);
          self.itter = itter14F8;
          self.intersectionItter = _t1492;
          self.interval = interval1508;
          self.s = s150E;
          self.e = e1510;
          self.cc = cc150C;
          self.fc = _t1514;
          active
          goto JOIN1521
        JOIN1521:  preds = [*ACTIVE1520,*STABILIZE161F]
          goto JOIN1523
        JOIN1523:  preds = [*JOIN1521,MASSIGN162A]
          int intersectionItter1522#1 = phi(intersectionItter1480)
          self.intersectionItter = intersectionItter1522;
          self.s = s1498;
          self.e = e1497;
          active
        ASSIGN1529:  preds = [COND14F7]
          tensor[2] grad1528#1 = <tensor[2]>[_t1482,_t1482];
          bool _t152A#1 = LT<real>(_t14BB,eps120F);
          if _t152A then goto ASSIGN16DE else goto JOIN1561
        ASSIGN16DE:  preds = [COND152C]
          tensor[2,6] basisResult153D#1 = EvaluateBasis<BasisArray(2,6)>(refPos1439);
          tensor[2] compositionl152F#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[2 6],T6[2])<Σ(i2=0..5)<((T4_{i2} * T5_{i0,i2}))>(i2=0..5)>_{2} (_t136F,_t136D,_t136B,refPos1439,femDofs1374,basisResult153D,refPos1439);
          int[3] femIndicies153F#1 = ExtractFemItem2<int,int[3],ExtractIndices(Mesh)>(_t1264,_t1266);
          tensor[3,2] femDofs1540#3 = ExtractFemItem2<int[3],tensor[3,2],ExtractDofsSeq(Mesh)>(_t1264,femIndicies153F);
          tensor[2,3] basisResult1541#3 = EvaluateBasis<BasisArray(2,3)>(refPos1439);
          tensor[2,2] probe_l_81530#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i3=0..2)<((T3_{i3,i0} * T4_{i1,i3}))>(i3=0..2)>_{2 2} (_t1266,_t1264,midRay140D,femDofs1540,basisResult1541,refPos1439);
          tensor[2,2] op1_e3_l_91531#1 = λ(T0[2 2])<Σ(i2=0..1)<((ϵ_{ii2,ii0} * T0_{i2,i1}))>(i2=0..1)>_{2 2} (probe_l_81530);
          tensor[2] probe_l_101532#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i2=0..2)<((T3_{i2,i0} * T4_{'0',i2}))>(i2=0..2)>_{2} (_t1266,_t1264,midRay140D,femDofs1540,basisResult1541,refPos1439);
          tensor[2] probe_l_111533#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i2=0..2)<((T3_{i2,i0} * T4_{'1',i2}))>(i2=0..2)>_{2} (_t1266,_t1264,midRay140D,femDofs1540,basisResult1541,refPos1439);
          tensor[2] op1_e3_l_121534#1 = λ(T0[2])<Σ(i1=0..1)<((ϵ_{ii0,ii1} * T0_{i1}))>(i1=0..1)>_{2} (probe_l_111533);
          tensor[2,2] op1_e3_l_131535#1 = λ(T0[2 2])<Σ(i2=0..1)<((ϵ_{ii2,ii0} * T0_{i1,i2}))>(i2=0..1)>_{2 2} (op1_e3_l_91531);
          real op1_e3_l_141536#1 = λ(T0[2],T1[2])<Σ(i0=0..1)<((T0_{i0} * T1_{i0}))>(i0=0..1)> (probe_l_101532,op1_e3_l_121534);
          tensor[2,2] op1_e3_l_151537#1 = λ(T0[2 2],T1[])<(T0_{i0,i1}) / ( T1)>_{2 2} (op1_e3_l_131535,op1_e3_l_141536);
          tensor[2] grad152D#1 = λ(T0[2],T1[2 2])<Σ(i104=0..1)<((T0_{i104} * T1_{i104,i0}))>(i104=0..1)>_{2} (compositionl152F,op1_e3_l_151537);
          goto JOIN1561
        JOIN1561:  preds = [ASSIGN155E,COND152C]
          tensor[2] grad155F#1 = phi(grad152D,grad1528)
          real out1560#1 = phi(fmVal143D,out1241)
          if _t14B2 then goto ASSIGN16E4 else goto JOIN1598
        ASSIGN16E4:  preds = [COND1562]
          tensor[2,6] basisResult1573#1 = EvaluateBasis<BasisArray(2,6)>(refPos135E);
          tensor[2] compositionl1565#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[2 6],T6[2])<Σ(i2=0..5)<((T4_{i2} * T5_{i0,i2}))>(i2=0..5)>_{2} (_t136F,_t136D,_t136B,refPos135E,femDofs1374,basisResult1573,refPos135E);
          int[3] femIndicies1575#1 = ExtractFemItem2<int,int[3],ExtractIndices(Mesh)>(_t1264,_t1266);
          tensor[3,2] femDofs1576#3 = ExtractFemItem2<int[3],tensor[3,2],ExtractDofsSeq(Mesh)>(_t1264,femIndicies1575);
          tensor[2,3] basisResult1577#3 = EvaluateBasis<BasisArray(2,3)>(refPos135E);
          tensor[2,2] probe_l_81566#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i3=0..2)<((T3_{i3,i0} * T4_{i1,i3}))>(i3=0..2)>_{2 2} (_t1266,_t1264,startRay125C,femDofs1576,basisResult1577,refPos135E);
          tensor[2,2] op1_e3_l_91567#1 = λ(T0[2 2])<Σ(i2=0..1)<((ϵ_{ii2,ii0} * T0_{i2,i1}))>(i2=0..1)>_{2 2} (probe_l_81566);
          tensor[2] probe_l_101568#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i2=0..2)<((T3_{i2,i0} * T4_{'0',i2}))>(i2=0..2)>_{2} (_t1266,_t1264,startRay125C,femDofs1576,basisResult1577,refPos135E);
          tensor[2] probe_l_111569#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i2=0..2)<((T3_{i2,i0} * T4_{'1',i2}))>(i2=0..2)>_{2} (_t1266,_t1264,startRay125C,femDofs1576,basisResult1577,refPos135E);
          tensor[2] op1_e3_l_12156A#1 = λ(T0[2])<Σ(i1=0..1)<((ϵ_{ii0,ii1} * T0_{i1}))>(i1=0..1)>_{2} (probe_l_111569);
          tensor[2,2] op1_e3_l_13156B#1 = λ(T0[2 2])<Σ(i2=0..1)<((ϵ_{ii2,ii0} * T0_{i1,i2}))>(i2=0..1)>_{2 2} (op1_e3_l_91567);
          real op1_e3_l_14156C#1 = λ(T0[2],T1[2])<Σ(i0=0..1)<((T0_{i0} * T1_{i0}))>(i0=0..1)> (probe_l_101568,op1_e3_l_12156A);
          tensor[2,2] op1_e3_l_15156D#1 = λ(T0[2 2],T1[])<(T0_{i0,i1}) / ( T1)>_{2 2} (op1_e3_l_13156B,op1_e3_l_14156C);
          tensor[2] grad1563#1 = λ(T0[2],T1[2 2])<Σ(i104=0..1)<((T0_{i104} * T1_{i104,i0}))>(i104=0..1)>_{2} (compositionl1565,op1_e3_l_15156D);
          goto JOIN1598
        JOIN1598:  preds = [ASSIGN1594,COND1562]
          tensor[2] grad1595#3 = phi(grad1563,grad155F)
          real cup1596#1 = phi(s1498,cup13E4)
          real out1597#3 = phi(faVal1371,out1560)
          string _t1599#1 = "Out val:";
          Print<[string,real,string]>(_t1599,out1597,_t1247);
          string _t159C#1 = "Grad val:";
          Print<[string,tensor[2],string]>(_t159C,grad1595,_t1247);
          real _t159F#6 = 0.1e1;
          tensor[3] mcol15A1#1 = <tensor[3]>[_t159F,_t159F,_t159F];
          bool _t15A3#1 = NEQ<real>(cmin1219,cmax121B);
          if _t15A3 then goto ASSIGN15A7 else goto JOIN15D1
        ASSIGN15A7:  preds = [COND15A5]
          int _t15A6#1 = -1;
          real _t15A8#2 = IntToReal(_t15A6);
          real op1_e3_l_515AB#1 = λ(T0[],T1[])<(T1) - (T0)> (cmin1219,out1597);
          real op1_e3_l_615AC#1 = λ(T0[],T1[])<(T1) - (T0)> (cmin1219,cmax121B);
          real op1_e3_l_715AD#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_515AB,op1_e3_l_615AC);
          real op1_e3_l_815AE#1 = λ(T0[],T1[])<(T1) - (T0)> (_t15A8,_t159F);
          real op1_e3_l_915AF#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_715AD,op1_e3_l_815AE);
          real _t15AA#2 = λ(T0[],T1[])<(T0 + T1)> (_t15A8,op1_e3_l_915AF);
          real Mtransform15B7#2 = Transform<IMAGE1D<double[3]>>(cmap16AD);
          real MxPos15B8#1 = λ(T0[],T1[])<(T0 * T1)> (Mtransform15B7,_t15AA);
          real Ttranslate15B9#1 = Translate<IMAGE1D<double[3]>>(cmap16AD);
          real imgPos15BA#2 = λ(T0[],T1[])<(T0 + T1)> (MxPos15B8,Ttranslate15B9);
          real nd15BB#2 = Floor<1>(imgPos15BA);
          real f15BC#1 = λ(T0[],T1[])<(T0) - (T1)> (imgPos15BA,nd15BB);
          int n15BD#1 = RealToInt<1>(nd15BB);
          int idx15BF#1 = IAdd(n15BD,_t1492);
          tensor[3,2] ldvox15C0#1 = LoadVoxelsWithCtl<IMAGE1D<double[3]>,2,clamp>(cmap16AD,idx15BF);
          tensor[2] kernX_15C1#1 = BuildPos<1>(f15BC);
          tensor[2] kevalX_d0_15C2#1 = EvalKernel<2,tent,0>(kernX_15C1);
          tensor[3] mcol15B6#1 = λ(V0(1)[3],H1,T2[1],T3[1 1],V4(1)[3],H5)<Σ(i1=0..1)<((V4_{i0}(1)[i1]# * H5(1)))>(i1=0..1)>_{3} (img1207,_t1209,_t15AA,Mtransform15B7,ldvox15C0,kevalX_d0_15C2);
          goto JOIN15D1
        JOIN15D1:  preds = [ASSIGN15CF,COND15A5]
          tensor[3] mcol15D0#5 = phi(mcol15B6,mcol15A1)
          if light121D then goto ASSIGN15D4 else goto ASSIGN1621
        ASSIGN15D4:  preds = [COND15D2]
          real _t15D3#1 = TensorIndex<tensor[2],[0]>(grad1595);
          real _t15D5#1 = TensorIndex<tensor[2],[1]>(grad1595);
          int _t15D7#1 = -1;
          real _t15D9#1 = IntToReal(_t15D7);
          tensor[3] N15DB#2 = <tensor[3]>[_t15D3,_t15D5,_t15D9];
          real _t15DD#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (N15DB,L1227);
          real _t15DF#1 = Max<real>(_t1482,_t15DD);
          real op1_e3_l_715E2#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (rayVec122B);
          real op1_e3_l_815E3#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_715E2);
          real op1_e3_l_915E4#1 = λ(T0[])<(1) / ( T0)> (op1_e3_l_815E3);
          tensor[3] op1_e3_l_1015E5#1 = λ(T0[3],T1[])<(T0_{i0} * T1)>_{3} (rayVec122B,op1_e3_l_915E4);
          tensor[3] op1_e3_l_1115E6#1 = λ(T0[3])<Neg(T0_{i0})>_{3} (op1_e3_l_1015E5);
          tensor[3] op1_e3_l_1715E7#3 = λ(T0[3],T1[3])<(T1_{i0} + T0_{i0})>_{3} (L1227,op1_e3_l_1115E6);
          real op1_e3_l_1915E8#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_1715E7,op1_e3_l_1715E7);
          real op1_e3_l_2015E9#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_1915E8);
          real op1_e3_l_2715EA#1 = λ(T0[])<(1) / ( T0)> (op1_e3_l_2015E9);
          real op1_e3_l_2815EB#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (N15DB,op1_e3_l_1715E7);
          real _t15E1#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_2715EA,op1_e3_l_2815EB);
          real _t15F7#1 = Max<real>(_t1482,_t15E1);
          real _t15F9#1 = MathFn<pow>(_t15F7,phongSp1225);
          real op1_e3_l_1715FC#1 = λ(T0[],T1[])<(T1) - (T0)> (camNearVsp122D,cup1596);
          real op1_e3_l_1815FD#1 = λ(T0[],T1[])<(T1) - (T0)> (camNearVsp122D,camFarVsp122F);
          real op1_e3_l_1915FE#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_1715FC,op1_e3_l_1815FD);
          tensor[3] op1_e3_l_2015FF#1 = λ(T0[3],T1[3])<(T1_{i0}) - (T0_{i0})>_{3} (mcnear1215,mcfar1217);
          tensor[3] op1_e3_l_211600#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (op1_e3_l_1915FE,op1_e3_l_2015FF);
          tensor[3] op1_e3_l_221601#2 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (mcnear1215,op1_e3_l_211600);
          tensor[3] op1_e3_l_291602#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (phongKa121F,mcol15D0);
          tensor[3] op1_e3_l_301603#1 = λ(T0[3],T1[],T2[],T3[3])<(T1 * T2 * T0_{i0} * T3_{i0})>_{3} (mcol15D0,_t15DF,phongKd1221,op1_e3_l_221601);
          tensor[3] op1_e3_l_311604#1 = λ(T0[],T1[],T2[3])<(T0 * T1 * T2_{i0})>_{3} (_t15F9,phongKs1223,op1_e3_l_221601);
          tensor[3] fin15FB#3 = λ(T0[3],T1[3],T2[3])<(T0_{i0} + T1_{i0} + T2_{i0})>_{3} (op1_e3_l_291602,op1_e3_l_301603,op1_e3_l_311604);
          real _t160F#1 = TensorIndex<tensor[3],[0]>(fin15FB);
          real _t1611#1 = TensorIndex<tensor[3],[1]>(fin15FB);
          real _t1613#1 = TensorIndex<tensor[3],[2]>(fin15FB);
          tensor[4] rgba1615#1 = <tensor[4]>[_t160F,_t1611,_t1613,_t159F];
          goto JOIN1619
        JOIN1619:  preds = [ASSIGN1616,ASSIGN1626]
          tensor[4] rgba1617#1 = phi(rgba1615,rgba1618)
          self.intersectionItter = _t1492;
          self.s = s1498;
          self.e = e1497;
          self.out = out1597;
          self.rgba = rgba1617;
          stabilize
          goto JOIN1521
        ASSIGN1621:  preds = [COND15D2]
          real _t1620#1 = TensorIndex<tensor[3],[0]>(mcol15D0);
          real _t1622#1 = TensorIndex<tensor[3],[1]>(mcol15D0);
          real _t1624#1 = TensorIndex<tensor[3],[2]>(mcol15D0);
          tensor[4] rgba1618#1 = <tensor[4]>[_t1620,_t1622,_t1624,_t159F];
          goto JOIN1619
        ASSIGN1627:  preds = [COND14F1]
          bool _t14F5#1 = false;
          goto JOIN14F6
        ASSIGN1629:  preds = [COND14BA]
          string _t1628#1 = "=========\n";
          Print<[string]>(_t1628);
          goto JOIN1523
        ASSIGN16DC:  preds = [COND14B4]
          real _t162B#1 = λ(T0[])<Abs(T0)> (fm1447);
          bool _t165F#1 = LT<real>(_t162B,eps120F);
          if _t165F then goto ASSIGN1663 else goto ASSIGN1667
        ASSIGN1663:  preds = [COND1661]
          bool _t1662#1 = true;
          goto JOIN1665
        JOIN1665:  preds = [ASSIGN1663,ASSIGN1668]
          bool _t14B8#1 = phi(_t1662,_t1664)
          goto JOIN14B9
        ASSIGN1667:  preds = [COND1661]
          int _t1666#1 = 32;
          bool _t1664#1 = GT<int>(intersectionItter1480,_t1666);
          goto JOIN1665
        COND1669:  preds = [COND1496]
          if _t1484 then goto JOIN166C else goto ASSIGN167E
        JOIN166C:  preds = [COND1669,JOIN1682]
          int _t166A#1 = phi(_t147E,_t166B)
          if _t148A then goto JOIN1670 else goto ASSIGN1678
        JOIN1670:  preds = [COND166D,JOIN167C]
          int _t166E#1 = phi(_t147E,_t166F)
          int _t1671#1 = IMul(_t166A,_t166E);
          bool _t1673#1 = GT<int>(_t1671,_t1492);
          if _t1673 then goto JOIN1676 else goto JOIN1676
        JOIN1676:  preds = [COND1675,COND1675]
          real s1499#1 = phi(cup13E4,s13E2)
          goto JOIN149A
        ASSIGN1678:  preds = [COND166D]
          bool _t1677#1 = LT<real>(fm1447,_t1482);
          if _t1677 then goto ASSIGN167B else goto JOIN167C
        ASSIGN167B:  preds = [COND1679]
          int _t167A#1 = -1;
          goto JOIN167C
        JOIN167C:  preds = [ASSIGN167B,COND1679]
          int _t166F#1 = phi(_t167A,_t1492)
          goto JOIN1670
        ASSIGN167E:  preds = [COND1669]
          bool _t167D#1 = LT<real>(fa137F,_t1482);
          if _t167D then goto ASSIGN1681 else goto JOIN1682
        ASSIGN1681:  preds = [COND167F]
          int _t1680#1 = -1;
          goto JOIN1682
        JOIN1682:  preds = [ASSIGN1681,COND167F]
          int _t166B#1 = phi(_t1680,_t1492)
          goto JOIN166C
        ASSIGN1684:  preds = [COND148C]
          bool _t1683#1 = LT<real>(fm1447,_t1482);
          if _t1683 then goto ASSIGN1687 else goto ASSIGN168A
        ASSIGN1687:  preds = [COND1685]
          int _t1686#1 = -1;
          goto JOIN1689
        JOIN1689:  preds = [ASSIGN1687,ASSIGN168A]
          int _t148E#1 = phi(_t1686,_t1688)
          goto JOIN148F
        ASSIGN168A:  preds = [COND1685]
          int _t1688#1 = 0;
          goto JOIN1689
        ASSIGN168C:  preds = [COND1486]
          bool _t168B#1 = LT<real>(fa137F,_t1482);
          if _t168B then goto ASSIGN168F else goto ASSIGN1692
        ASSIGN168F:  preds = [COND168D]
          int _t168E#1 = -1;
          goto JOIN1691
        JOIN1691:  preds = [ASSIGN168F,ASSIGN1692]
          int _t1488#1 = phi(_t168E,_t1690)
          goto JOIN1489
        ASSIGN1692:  preds = [COND168D]
          int _t1690#1 = 0;
          goto JOIN1691
    end update
  end ray
## initial strand creation
  GRID(2)
    ENTRY1693:  preds = []
      int iresU1694#1 = globals.iresU0FDC;
      int iresV1696#1 = globals.iresV0FDD;
      int _t1698#2 = 0;
      int _t169A#2 = 1;
      int _t169C#1 = ISub(iresU1694,_t169A);
      int[] _t169E#1 = Range(_t1698,_t169C);
    FOREACH16A1:  preds = [ASSIGN169F,NEXT16AA]
      foreach (vi16A0 in _t169E) on exit goto RETURN16AB
      int _t16A2#1 = ISub(iresV1696,_t169A);
      int[] _t16A4#1 = Range(_t1698,_t16A2);
    FOREACH16A7:  preds = [ASSIGN16A5,NEXT16A9]
      foreach (ui16A6 in _t16A4) on exit goto NEXT16AA
      new ray(ui16A6,vi16A0);
      goto FOREACH16A7
    NEXT16AA:  preds = [FOREACH16A7]
      goto FOREACH16A1
    RETURN16AB:  preds = [FOREACH16A1]
      return
#### end program ####
##### mid-ir: after contraction ####
## properties
  GlobalInit StrandArray HasStartMethod ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[]) HasInputs HasGlobals
## globals
  input isoval0FD6 (isoval) = <default>
  input thick0FD7 (thick) = <default>
  input camEye0FD8 (camEye) = <default>
  input camAt0FD9 (camAt) = <default>
  input camUp0FDA (camUp) = <default>
  input camFOV0FDB (camFOV) = <default>
  input iresU0FDC (iresU) = <default>
  input iresV0FDD (iresV) = <default>
  input camNear0FDE (camNear) = <default>
  input camFar0FDF (camFar) = <default>
  input refStep0FE0 (refStep) = <default>
  input rayStep0FE1 (rayStep) = <default>
  input a0FE2 (a) = <no-default>
  input 0b0472_intermedateGlobal0FE3 (b) = <no-default>
  input 0c0474_intermedateGlobal0FE4 (c) = <no-default>
  input eps0FE5 (eps) = <default>
  input indecies0FE6 (indecies) = <no-default>
  input times0FE7 (times) = <no-default>
  input cells0FE8 (cells) = <no-default>
  input mcnear0FE9 (mcnear) = <default>
  input mcfar0FEA (mcfar) = <default>
  input cmap0FEB (cmap) = image("/home/teocollin/gitcode/diderot/tests/lipRay/find/cmap.nrrd")
  input cmin0FEC (cmin) = <default>
  input cmax0FED (cmax) = <default>
  input light0FEE (light) = <default>
  input phongKa0FEF (phongKa) = <default>
  input phongKd0FF0 (phongKd) = <default>
  input phongKs0FF1 (phongKs) = <default>
  input phongSp0FF2 (phongSp) = <default>
  input maxAlpha0FF3 (maxAlpha) = <default>
  input lightVsp0FF4 (lightVsp) = <default>
  global femData:MeshCell[] 0cell_a0FF5
  global femData:FemFunc c0FF6
  global real camNearVsp0FF7
  global real camFarVsp0FF8
  global tensor[3] camN0FF9
  global tensor[3] camU0FFA
  global tensor[3] camV0FFB
  global real camVmax0FFC
  global real camUmax0FFD
  global tensor[3] L0FFE
  global image(IMAGE1D<double[3]>) img0FFF
  global kernel _t1000
## functions
  function femData:MeshPos _0A7F_msh_newtonInverse1269 (tensor[2] pos126A#3, int cellInt126B#7, femData:Mesh mesh126C#10) {
    ENTRY126D:  preds = []
      real _t126E#2 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
      tensor[2] xn1270#8 = <tensor[2]>[_t126E,_t126E];
      int _t1272#1 = 0;
      int _t1274#1 = 16;
      int[] _t1276#1 = Range(_t1272,_t1274);
    FOREACH1279:  preds = [ASSIGN1277,NEXT1356]
      foreach (itter1278 in _t1276) on exit goto ASSIGN135B
        tensor[2] xn127B#6 = phi(xn1270,xn127A)
      int[3] femIndicies1288#1 = ExtractFemItem2<int,int[3],ExtractIndices(Mesh)>(mesh126C,cellInt126B);
      tensor[3,2] femDofs1289#5 = ExtractFemItem2<int[3],tensor[3,2],ExtractDofsSeq(Mesh)>(mesh126C,femIndicies1288);
      tensor[2,3] basisResult128A#3 = EvaluateBasis<BasisArray(2,3)>(xn1270);
      tensor[2,2] probe_l_10127C#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i3=0..2)<((T3_{i3,i0} * T4_{i1,i3}))>(i3=0..2)>_{2 2} (cellInt126B,mesh126C,xn1270,femDofs1289,basisResult128A,xn1270);
      tensor[2,2] op1_e3_l_11127D#1 = λ(T0[2 2])<Σ(i2=0..1)<((ϵ_{ii2,ii0} * T0_{i2,i1}))>(i2=0..1)>_{2 2} (probe_l_10127C);
      tensor[2] probe_l_12127E#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i2=0..2)<((T3_{i2,i0} * T4_{'0',i2}))>(i2=0..2)>_{2} (cellInt126B,mesh126C,xn1270,femDofs1289,basisResult128A,xn1270);
      tensor[2] probe_l_13127F#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i2=0..2)<((T3_{i2,i0} * T4_{'1',i2}))>(i2=0..2)>_{2} (cellInt126B,mesh126C,xn1270,femDofs1289,basisResult128A,xn1270);
      tensor[2] op1_e3_l_141280#1 = λ(T0[2])<Σ(i1=0..1)<((ϵ_{ii0,ii1} * T0_{i1}))>(i1=0..1)>_{2} (probe_l_13127F);
      tensor[2,2] op1_e3_l_151281#1 = λ(T0[2 2])<Σ(i2=0..1)<((ϵ_{ii2,ii0} * T0_{i1,i2}))>(i2=0..1)>_{2 2} (op1_e3_l_11127D);
      real op1_e3_l_161282#1 = λ(T0[2],T1[2])<Σ(i0=0..1)<((T0_{i0} * T1_{i0}))>(i0=0..1)> (probe_l_12127E,op1_e3_l_141280);
      tensor[3] basisResult1290#2 = EvaluateBasis<BasisArray(3)>(xn127B);
      tensor[2] probe_l_171283#1 = λ(T0[2],INT1,FEM(msh)2,T3[3 2],T4[3],T5[2])<Σ(i1=0..2)<((T3_{i1,i0} * T4_{i1}))>(i1=0..2)>_{2} (xn127B,cellInt126B,mesh126C,femDofs1289,basisResult1290,xn127B);
      tensor[2,2] op1_e3_l_181284#2 = λ(T0[2 2],T1[])<(T0_{i0,i1}) / ( T1)>_{2 2} (op1_e3_l_151281,op1_e3_l_161282);
      tensor[2] op1_e3_l_191285#1 = λ(T0[2],T1[2])<(T1_{i0}) - (T0_{i0})>_{2} (pos126A,probe_l_171283);
      tensor[2] op1_e3_l_201286#1 = λ(T0[2 2],T1[2])<Σ(i1=0..1)<((T0_{i0,i1} * T1_{i1}))>(i1=0..1)>_{2} (op1_e3_l_181284,op1_e3_l_191285);
      tensor[2] xn127A#4 = λ(T0[2],T1[2])<(T0_{i0}) - (T1_{i0})>_{2} (xn127B,op1_e3_l_201286);
      real _t12A7#2 = 0.1e-7;
      real _t12A9#1 = λ(T0[],T1[])<(T0 * T1)> (_t12A7,_t12A7);
      tensor[2] probe_l_2512B3#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[3],T5[2])<Σ(i1=0..2)<((T3_{i1,i0} * T4_{i1}))>(i1=0..2)>_{2} (cellInt126B,mesh126C,xn127B,femDofs1289,basisResult1290,xn127B);
      tensor[2] op1_e3_l_2712B5#1 = λ(T0[2],T1[2])<(T1_{i0}) - (T0_{i0})>_{2} (pos126A,probe_l_2512B3);
      tensor[2] op1_e3_l_3812B6#2 = λ(T0[2 2],T1[2])<Σ(i1=0..1)<((T0_{i0,i1} * T1_{i1}))>(i1=0..1)>_{2} (op1_e3_l_181284,op1_e3_l_2712B5);
      real _t12AB#1 = λ(T0[2],T1[2])<Σ(i0=0..1)<((T0_{i0} * T1_{i0}))>(i0=0..1)> (op1_e3_l_3812B6,op1_e3_l_3812B6);
      bool _t12D7#1 = GTE<real>(_t12A9,_t12AB);
      if _t12D7 then goto ASSIGN12DB else goto JOIN1355
    ASSIGN12DB:  preds = [COND12D9]
      real _t12DA#3 = 0.1e1;
      real _t12DC#3 = 0.1e-8;
      real _t12DE#1 = λ(T0[],T1[])<(T0 + T1)> (_t12DA,_t12DC);
      tensor[2] _t12E0#1 = <tensor[2]>[_t12DA,_t12DA];
      real _t12E2#1 = λ(T0[2],T1[2])<Σ(i0=0..1)<((T0_{i0} * T1_{i0}))>(i0=0..1)> (_t12E0,xn127A);
      bool _t1310#1 = GT<real>(_t12DE,_t12E2);
      tensor[2] _t1312#1 = <tensor[2]>[_t12DC,_t12DC];
      tensor[2] _t1314#2 = λ(T0[2],T1[2])<(T0_{i0} + T1_{i0})>_{2} (_t1312,xn127A);
      real _t1342#1 = TensorIndex<tensor[2],[0]>(_t1314);
      real _t1344#2 = -0.e0;
      bool _t1346#1 = GT<real>(_t1342,_t1344);
      real _t1348#1 = TensorIndex<tensor[2],[1]>(_t1314);
      bool _t134A#1 = GT<real>(_t1348,_t1344);
      bool _t134C#1 = BAnd(_t1346,_t134A);
      bool _t134E#1 = BAnd(_t1310,_t134C);
      if _t134E then goto ASSIGN1352 else goto ASSIGN1358
    ASSIGN1352:  preds = [COND1350]
      femData:MeshPos _t1351#1 = ExtractFemItemN<[femData:Mesh,int,tensor[2],tensor[2]],femData:MeshPos,AllBuild(MeshPos),0000,"",[],int>(mesh126C,cellInt126B,xn127A,pos126A);
      return _t1351
      goto JOIN1354
    JOIN1354:  preds = [*RETURN(_t1351)1353,*RETURN(_t1357)1359]
      goto JOIN1355
    JOIN1355:  preds = [*JOIN1354,COND12D9]
      goto FOREACH1279
    ASSIGN1358:  preds = [COND1350]
      femData:MeshPos _t1357#1 = ExtractFemItemN<[femData:Mesh],femData:MeshPos,InvalidBuild(MeshPos),0000,"",[],int>(mesh126C);
      return _t1357
      goto JOIN1354
    ASSIGN135B:  preds = [FOREACH1279]
      femData:MeshPos _t135A#1 = ExtractFemItemN<[femData:Mesh],femData:MeshPos,InvalidBuild(MeshPos),0000,"",[],int>(mesh126C);
      return _t135A
}
## input initialization
  ENTRY1001:  preds = []
    real isoval1002#1 = 0.2e0;
    globals.isoval0FD6 = isoval1002;
    real thick1005#1 = 0.7e-1;
    globals.thick0FD7 = thick1005;
    real _t1008#2 = 0.3e1;
    real _t100A#1 = -0.3e1;
    tensor[3] camEye100C#1 = <tensor[3]>[_t1008,_t100A,_t1008];
    globals.camEye0FD8 = camEye100C;
    real _t100F#5 = 0.5e0;
    tensor[3] camAt1011#1 = <tensor[3]>[_t100F,_t100F,_t100F];
    globals.camAt0FD9 = camAt1011;
    real _t1014#4 = 0.e0;
    real _t1016#7 = 0.1e1;
    tensor[3] camUp1018#2 = <tensor[3]>[_t1014,_t1014,_t1016];
    globals.camUp0FDA = camUp1018;
    real camFOV101B#1 = 0.137e2;
    globals.camFOV0FDB = camFOV101B;
    int iresU101E#2 = 10;
    globals.iresU0FDC = iresU101E;
    globals.iresV0FDD = iresU101E;
    real camNear1022#1 = -0.2e1;
    globals.camNear0FDE = camNear1022;
    real camFar1025#1 = 0.5e1;
    globals.camFar0FDF = camFar1025;
    globals.refStep0FE0 = _t1016;
    real rayStep1029#1 = 0.1e-1;
    globals.rayStep0FE1 = rayStep1029;
    real eps102C#1 = 0.1e-5;
    globals.eps0FE5 = eps102C;
    tensor[3] mcnear102F#2 = <tensor[3]>[_t1016,_t1016,_t1016];
    globals.mcnear0FE9 = mcnear102F;
    globals.mcfar0FEA = mcnear102F;
    globals.cmin0FEC = _t1014;
    globals.cmax0FED = _t1016;
    bool light1035#1 = true;
    globals.light0FEE = light1035;
    globals.phongKa0FEF = _t100F;
    globals.phongKd0FF0 = _t100F;
    globals.phongKs0FF1 = _t1014;
    real phongSp103B#1 = 0.6e2;
    globals.phongSp0FF2 = phongSp103B;
    globals.maxAlpha0FF3 = _t1016;
    globals.lightVsp0FF4 = camUp1018;
    return
## global-variable initialization
  ENTRY1041:  preds = []
    tensor[3] camEye1042#1 = globals.camEye0FD8;
    tensor[3] camAt1044#1 = globals.camAt0FD9;
    tensor[3] camUp1046#1 = globals.camUp0FDA;
    real camFOV1048#1 = globals.camFOV0FDB;
    int iresU104A#1 = globals.iresU0FDC;
    int iresV104C#1 = globals.iresV0FDD;
    real camNear104E#1 = globals.camNear0FDE;
    real camFar1050#1 = globals.camFar0FDF;
    femData:Mesh a1052#3 = globals.a0FE2;
    femData:Space 0b0472_intermedateGlobal1054#1 = globals.0b0472_intermedateGlobal0FE3;
    femData:FemFunc 0c0474_intermedateGlobal1056#1 = globals.0c0474_intermedateGlobal0FE4;
    image(IMAGE1D<double[3]>) cmap1058#1 = globals.cmap0FEB;
    tensor[3] lightVsp105A#2 = globals.lightVsp0FF4;
    int _t105C#1 = 0;
    int _t105E#1 = 1;
    int _t1060#1 = ExtractFemItem<int,NumCell(Mesh)>(a1052);
    int _t1062#1 = ISub(_t1060,_t105E);
    int[] _t1064#1 = Range(_t105C,_t1062);
    femData:MeshCell[] _t1066#1 = <femData:MeshCell[]>{};
  FOREACH1069:  preds = [ASSIGN1067,NEXT106F]
    foreach (_t1068 in _t1064) on exit goto GASSIGN1070
      femData:MeshCell[] _t106D#2 = phi(_t1066,_t106C)
    femData:MeshCell _t106A#1 = LoadFem<femData:MeshCell>(a1052,_t1068);
    femData:MeshCell[] _t106C#1 = Append<femData:MeshCell>(_t106D,_t106A);
    goto FOREACH1069
  GASSIGN1070:  preds = [FOREACH1069]
    globals.0cell_a0FF5 = _t106D;
    femData:Space b1071#1 = LoadFem<femData:Space>(0b0472_intermedateGlobal1054,a1052);
    femData:FemFunc c1073#1 = LoadFem<femData:FemFunc>(0c0474_intermedateGlobal1056,b1071);
    globals.c0FF6 = c1073;
    tensor[3] op1_e3_l_31077#5 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (camAt1044,camEye1042);
    real op1_e3_l_51078#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_31077,op1_e3_l_31077);
    real op1_e3_l_61079#5 = λ(T0[])<Sqrt(T0)> (op1_e3_l_51078);
    real camNearVsp1076#1 = λ(T0[],T1[])<(T0 + T1)> (camNear104E,op1_e3_l_61079);
    globals.camNearVsp0FF7 = camNearVsp1076;
    real camFarVsp107F#1 = λ(T0[],T1[])<(T0 + T1)> (camFar1050,op1_e3_l_61079);
    globals.camFarVsp0FF8 = camFarVsp107F;
    real op1_e3_l_9108C#6 = λ(T0[])<(1) / ( T0)> (op1_e3_l_61079);
    tensor[3] camN1088#2 = λ(T0[3],T1[])<(T0_{i0} * T1)>_{3} (op1_e3_l_31077,op1_e3_l_9108C);
    globals.camN0FF9 = camN1088;
    tensor[3,3] op1_e3_l_151097#1 = λ(T0[3])<Σ(i2=0..2)<((ϵ_{ii0,ii1,ii2} * T0_{i2}))>(i2=0..2)>_{3 3} (camUp1046);
    tensor[3] op1_e3_l_171099#4 = λ(T0[3],T1[3 3])<Σ(i1=0..2)<((T0_{i1} * T1_{i0,i1}))>(i1=0..2)>_{3} (op1_e3_l_31077,op1_e3_l_151097);
    real op1_e3_l_34109A#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_171099,op1_e3_l_171099);
    real op1_e3_l_35109B#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (op1_e3_l_9108C,op1_e3_l_9108C,op1_e3_l_34109A);
    real op1_e3_l_36109C#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_35109B);
    tensor[3] op1_e3_l_37109D#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (op1_e3_l_9108C,op1_e3_l_171099);
    real op1_e3_l_38109E#2 = λ(T0[])<(1) / ( T0)> (op1_e3_l_36109C);
    tensor[3] camU1093#2 = λ(T0[3],T1[])<(T0_{i0} * T1)>_{3} (op1_e3_l_37109D,op1_e3_l_38109E);
    globals.camU0FFA = camU1093;
    tensor[3,3] op1_e3_l_4510B6#1 = λ(T0[3])<Σ(i2=0..2)<((ϵ_{ii0,ii1,ii2} * T0_{i2}))>(i2=0..2)>_{3 3} (op1_e3_l_31077);
    tensor[3] op1_e3_l_4710B7#1 = λ(T0[3],T1[3 3])<Σ(i1=0..2)<((T0_{i1} * T1_{i0,i1}))>(i1=0..2)>_{3} (op1_e3_l_171099,op1_e3_l_4510B6);
    tensor[3] op1_e3_l_5010B9#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (op1_e3_l_9108C,op1_e3_l_4710B7);
    tensor[3] camV10AC#2 = λ(T0[],T1[],T2[3])<(T0 * T1 * T2_{i0})>_{3} (op1_e3_l_38109E,op1_e3_l_9108C,op1_e3_l_5010B9);
    globals.camV0FFB = camV10AC;
    real _t10C9#1 = 0.314159265358979323846264338327950288e1;
    real _t10CB#1 = 0.36e3;
    real op1_e3_l_510CE#1 = λ(T0[],T1[])<(T0 * T1)> (camFOV1048,_t10C9);
    real op1_e3_l_610CF#1 = λ(T0[],T1[])<(T1) / ( T0)> (_t10CB,op1_e3_l_510CE);
    real op1_e3_l_1010D2#2 = λ(T0[])<Tangent(T0)> (op1_e3_l_610CF);
    real camVmax10CD#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_1010D2,op1_e3_l_61079);
    globals.camVmax0FFC = camVmax10CD;
    real _t10DC#1 = IntToReal(iresU104A);
    real _t10DE#1 = IntToReal(iresV104C);
    real op1_e3_l_1410E7#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t10DC,op1_e3_l_1010D2,op1_e3_l_61079);
    real camUmax10E0#1 = λ(T0[],T1[])<(T1) / ( T0)> (_t10DE,op1_e3_l_1410E7);
    globals.camUmax0FFD = camUmax10E0;
    kernel _t10F1#1 = Kernel<tent,0>;
    image(IMAGE1D<double[3]>) img10F3#1 = BorderCtlClamp<IMAGE1D<double[3]>>(cmap1058);
    tensor[3,3] _t10F5#1 = <tensor[3,3]>[camU1093,camV10AC,camN1088];
    real op1_e3_l_310F8#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (lightVsp105A);
    real op1_e3_l_410F9#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_310F8);
    real op1_e3_l_510FA#1 = λ(T0[])<(1) / ( T0)> (op1_e3_l_410F9);
    tensor[3] op1_e3_l_610FB#1 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i1,i0} * T1_{i1}))>(i1=0..2)>_{3} (_t10F5,lightVsp105A);
    tensor[3] L10F7#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (op1_e3_l_510FA,op1_e3_l_610FB);
    globals.L0FFE = L10F7;
    globals.img0FFF = img10F3;
    globals._t1000 = _t10F1;
    return
## strand
  strand ray (int ui1105#2, int vi1106#3)
    state:
      real rayU;
      real rayV;
      tensor[3] UV;
      tensor[3] rayOrig;
      tensor[3] rayVec;
      real camNearVsp;
      real camFarVsp;
      int offset;
      int len;
      int itter;
      int intersectionItter;
      int idx;
      tensor[2] interval;
      real s;
      real e;
      femData:MeshCell cc;
      femData:FuncCell fc;
      output real out;
      output tensor[4] rgba;
    state init
      ENTRY111A:  preds = []
        tensor[3] camEye111B#1 = globals.camEye0FD8;
        int iresU111D#2 = globals.iresU0FDC;
        int iresV111F#3 = globals.iresV0FDD;
        femData:MeshCell[] 0cell_a1121#1 = globals.0cell_a0FF5;
        femData:FemFunc c1123#1 = globals.c0FF6;
        int[] indecies1125#2 = globals.indecies0FE6;
        tensor[2][] times1127#1 = globals.times0FE7;
        real camNearVsp1129#1 = globals.camNearVsp0FF7;
        real camFarVsp112B#1 = globals.camFarVsp0FF8;
        tensor[3] camN112D#1 = globals.camN0FF9;
        tensor[3] camU112F#1 = globals.camU0FFA;
        tensor[3] camV1131#1 = globals.camV0FFB;
        real camVmax1133#2 = globals.camVmax0FFC;
        real camUmax1135#2 = globals.camUmax0FFD;
        real _t1137#5 = -0.5e0;
        real _t1139#1 = IntToReal(ui1105);
        real _t113B#1 = IntToReal(iresU111D);
        real _t113D#3 = 0.5e0;
        real op1_e3_l_61140#1 = λ(T0[],T1[])<(T0) - (T1)> (_t113B,_t113D);
        real op1_e3_l_71141#1 = λ(T0[],T1[])<(T1) - (T0)> (_t1137,_t1139);
        real op1_e3_l_81142#1 = λ(T0[],T1[])<(T1) - (T0)> (_t1137,op1_e3_l_61140);
        real op1_e3_l_91143#2 = λ(T0[])<Neg(T0)> (camUmax1135);
        real op1_e3_l_101144#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_71141,op1_e3_l_81142);
        real op1_e3_l_111145#1 = λ(T0[],T1[])<(T0) - (T1)> (camUmax1135,op1_e3_l_91143);
        real op1_e3_l_131146#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_101144,op1_e3_l_111145);
        real rayU113F#2 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_91143,op1_e3_l_131146);
        real _t114F#1 = IntToReal(vi1106);
        real _t1151#2 = IntToReal(iresV111F);
        real op1_e3_l_61154#1 = λ(T0[],T1[])<(T0) - (T1)> (_t1151,_t113D);
        real op1_e3_l_71155#2 = λ(T0[],T1[])<(T1) - (T0)> (_t1137,_t114F);
        real op1_e3_l_81156#1 = λ(T0[],T1[])<(T1) - (T0)> (_t1137,op1_e3_l_61154);
        real op1_e3_l_91157#3 = λ(T0[])<Neg(T0)> (camVmax1133);
        real op1_e3_l_101158#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_71155,op1_e3_l_81156);
        real op1_e3_l_111159#2 = λ(T0[],T1[])<(T0) - (T1)> (camVmax1133,op1_e3_l_91157);
        real op1_e3_l_13115A#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_101158,op1_e3_l_111159);
        real rayV1153#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_91157,op1_e3_l_13115A);
        real op1_e3_l_23116C#1 = λ(T0[],T1[])<(T1) - (T0)> (_t113D,_t1151);
        real op1_e3_l_25116E#1 = λ(T0[],T1[])<(T1) - (T0)> (_t1137,op1_e3_l_23116C);
        real op1_e3_l_271170#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_71155,op1_e3_l_25116E);
        real op1_e3_l_301172#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_271170,op1_e3_l_111159);
        real op1_e3_l_311173#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_91157,op1_e3_l_301172);
        tensor[3] op1_e3_l_321174#2 = λ(T0[3],T1[])<(T1 * T0_{i0})>_{3} (camU112F,rayU113F);
        tensor[3] op1_e3_l_331175#2 = λ(T0[3],T1[])<(T1 * T0_{i0})>_{3} (camV1131,op1_e3_l_311173);
        tensor[3] UV1163#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (op1_e3_l_321174,op1_e3_l_331175);
        tensor[3] rayOrig1189#1 = λ(T0[3],T1[3],T2[3])<(T0_{i0} + T1_{i0} + T2_{i0})>_{3} (camEye111B,op1_e3_l_321174,op1_e3_l_331175);
        real _t11AF#8 = 0.e0;
        tensor[3] _t11B1#1 = <tensor[3]>[_t11AF,_t11AF,_t11AF];
        tensor[3] rayVec11B3#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (camN112D,_t11B1);
        int _t11B5#2 = IMul(ui1105,iresV111F);
        int _t11B7#1 = IAdd(_t11B5,vi1106);
        int offset11B9#2 = Subscript<int[]>(indecies1125,_t11B7);
        int _t11BB#1 = IMul(iresU111D,iresV111F);
        int _t11BD#1 = IAdd(_t11BB,_t11B5);
        int _t11BF#1 = IAdd(_t11BD,vi1106);
        int len11C1#1 = Subscript<int[]>(indecies1125,_t11BF);
        int itter11C3#3 = 0;
        int idx11C5#2 = offset11B9;
        tensor[2] interval11C7#3 = Subscript<tensor[2][]>(times1127,idx11C5);
        real s11C9#1 = TensorIndex<tensor[2],[0]>(interval11C7);
        real e11CB#1 = TensorIndex<tensor[2],[1]>(interval11C7);
        femData:MeshCell cc11CD#2 = Subscript<femData:MeshCell[]>(0cell_a1121,itter11C3);
        int _t11CF#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc11CD);
        femData:FuncCell _t11D1#1 = LoadFem<femData:FuncCell>(c1123,_t11CF);
        tensor[4] rgba11D3#1 = <tensor[4]>[_t11AF,_t11AF,_t11AF,_t11AF];
        self.rayU = rayU113F;
        self.rayV = rayV1153;
        self.UV = UV1163;
        self.rayOrig = rayOrig1189;
        self.rayVec = rayVec11B3;
        self.camNearVsp = camNearVsp1129;
        self.camFarVsp = camFarVsp112B;
        self.offset = offset11B9;
        self.len = len11C1;
        self.itter = itter11C3;
        self.intersectionItter = itter11C3;
        self.idx = idx11C5;
        self.interval = interval11C7;
        self.s = s11C9;
        self.e = e11CB;
        self.cc = cc11CD;
        self.fc = _t11D1;
        self.out = _t11AF;
        self.rgba = rgba11D3;
        return
    end state init
    method start
        ENTRY11E9:  preds = []
          femData:MeshCell[] 0cell_a11EA#1 = globals.0cell_a0FF5;
          femData:FemFunc c11EC#1 = globals.c0FF6;
          int[] cells11EE#1 = globals.cells0FE8;
          int len11F0#1 = self.len;
          int idx11F2#1 = self.idx;
          int _t11F4#1 = 0;
          bool _t11F6#1 = EQ<int>(len11F0,_t11F4);
          if _t11F6 then goto STABILIZE11F9 else goto JOIN11FA
        STABILIZE11F9:  preds = [COND11F8]
          stabilize
          goto JOIN11FA
        JOIN11FA:  preds = [*STABILIZE11F9,COND11F8]
          int _t11FB#1 = Subscript<int[]>(cells11EE,idx11F2);
          femData:MeshCell cc11FD#2 = Subscript<femData:MeshCell[]>(0cell_a11EA,_t11FB);
          int _t11FF#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc11FD);
          femData:FuncCell _t1201#1 = LoadFem<femData:FuncCell>(c11EC,_t11FF);
          self.cc = cc11FD;
          self.fc = _t1201;
          active
    end start
    method update
        ENTRY1206:  preds = []
          image(IMAGE1D<double[3]>) cmap16AD#3 = globals.cmap0FEB;
          image(IMAGE1D<double[3]>) img1207#1 = globals.img0FFF;
          kernel _t1209#1 = globals._t1000;
          femData:MeshCell[] 0cell_a120B#1 = globals.0cell_a0FF5;
          femData:FemFunc c120D#1 = globals.c0FF6;
          real eps120F#8 = globals.eps0FE5;
          tensor[2][] times1211#1 = globals.times0FE7;
          int[] cells1213#1 = globals.cells0FE8;
          tensor[3] mcnear1215#2 = globals.mcnear0FE9;
          tensor[3] mcfar1217#1 = globals.mcfar0FEA;
          real cmin1219#3 = globals.cmin0FEC;
          real cmax121B#2 = globals.cmax0FED;
          bool light121D#1 = globals.light0FEE;
          real phongKa121F#1 = globals.phongKa0FEF;
          real phongKd1221#1 = globals.phongKd0FF0;
          real phongKs1223#1 = globals.phongKs0FF1;
          real phongSp1225#1 = globals.phongSp0FF2;
          tensor[3] L1227#2 = globals.L0FFE;
          tensor[3] rayOrig1229#3 = self.rayOrig;
          tensor[3] rayVec122B#5 = self.rayVec;
          real camNearVsp122D#2 = self.camNearVsp;
          real camFarVsp122F#1 = self.camFarVsp;
          int offset1231#1 = self.offset;
          int len1233#1 = self.len;
          int itter1235#2 = self.itter;
          int intersectionItter1237#2 = self.intersectionItter;
          real s1239#6 = self.s;
          real e123B#5 = self.e;
          femData:MeshCell cc123D#2 = self.cc;
          femData:FuncCell fc123F#2 = self.fc;
          real out1241#1 = self.out;
          string _t1243#1 = "Interval:";
          tensor[2] _t1245#1 = <tensor[2]>[s1239,e123B];
          string _t1247#10 = "\n";
          Print<[string,tensor[2],string]>(_t1243,_t1245,_t1247);
          string _t124A#1 = "inner itter:";
          Print<[string,int,string]>(_t124A,intersectionItter1237,_t1247);
          string _t124D#1 = "Outer itter:";
          Print<[string,int,string]>(_t124D,itter1235,_t1247);
          real _t1250#1 = TensorIndex<tensor[3],[0]>(rayOrig1229);
          real _t1252#1 = TensorIndex<tensor[3],[1]>(rayOrig1229);
          tensor[2] _t1254#3 = <tensor[2]>[_t1250,_t1252];
          real _t1256#1 = TensorIndex<tensor[3],[0]>(rayVec122B);
          real _t1258#1 = TensorIndex<tensor[3],[1]>(rayVec122B);
          tensor[2] _t125A#3 = <tensor[2]>[_t1256,_t1258];
          tensor[2] op1_e3_l_3125D#1 = λ(T0[],T1[2])<(T0 * T1_{i0})>_{2} (s1239,_t125A);
          tensor[2] startRay125C#4 = λ(T0[2],T1[2])<(T0_{i0} + T1_{i0})>_{2} (_t1254,op1_e3_l_3125D);
          tensor[2] op1_e3_l_31261#1 = λ(T0[],T1[2])<(T0 * T1_{i0})>_{2} (e123B,_t125A);
          tensor[2] endRay1260#1 = λ(T0[2],T1[2])<(T0_{i0} + T1_{i0})>_{2} (_t1254,op1_e3_l_31261);
          femData:Mesh _t1264#13 = ExtractFem<femData:Mesh,femData:MeshCell>(cc123D);
          int _t1266#11 = ExtractFemItem<int,CellIndex(MeshCell)>(cc123D);
          femData:MeshPos callNewtonPos135D#1 = _0A7F_msh_newtonInverse1269 (startRay125C,_t1266,_t1264);
          tensor[2] refPos135E#11 = ExtractFemItem<tensor[2],RefPos(Mesh)>(callNewtonPos135D);
          femData:MeshPos callNewtonPos1363#1 = _0A7F_msh_newtonInverse1269 (endRay1260,_t1266,_t1264);
          tensor[2] refPos1364#4 = ExtractFemItem<tensor[2],RefPos(Mesh)>(callNewtonPos1363);
          string _t1368#1 = "inverses:";
          Print<[string,tensor[2],tensor[2],string]>(_t1368,refPos135E,refPos1364,_t1247);
          femData:FemFunc _t136B#7 = ExtractFem<femData:FemFunc,femData:FuncCell>(fc123F);
          femData:Space _t136D#6 = ExtractFem<femData:Space,femData:FemFunc>(_t136B);
          int _t136F#6 = ExtractFemItem<int,CellIndex(FuncCell)>(fc123F);
          int[6] femIndicies1373#1 = ExtractFemItem2<int,int[6],ExtractIndices(Space)>(_t136D,_t136F);
          tensor[6] femDofs1374#5 = ExtractFemItem2<int[6],tensor[6],ExtractDofsSeq(FemFunc)>(_t136B,femIndicies1373);
          tensor[6] basisResult1375#1 = EvaluateBasis<BasisArray(6)>(refPos135E);
          real faVal1371#2 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[6],T6[2])<Σ(i0=0..5)<((T4_{i0} * T5_{i0}))>(i0=0..5)> (_t136F,_t136D,_t136B,refPos135E,femDofs1374,basisResult1375,refPos135E);
          real _t137B#3 = TensorIndex<tensor[3],[2]>(rayVec122B);
          real _t137D#3 = TensorIndex<tensor[3],[2]>(rayOrig1229);
          real op1_e3_l_81381#1 = λ(T0[],T1[])<(T0 * T1)> (_t137B,s1239);
          real op1_e3_l_91382#1 = λ(T0[],T1[])<(T0) - (T1)> (faVal1371,op1_e3_l_81381);
          real fa137F#10 = λ(T0[],T1[])<(T1) - (T0)> (_t137D,op1_e3_l_91382);
          tensor[6] basisResult1396#1 = EvaluateBasis<BasisArray(6)>(refPos1364);
          real probe_l_71390#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[6],T6[2])<Σ(i0=0..5)<((T4_{i0} * T5_{i0}))>(i0=0..5)> (_t136F,_t136D,_t136B,refPos1364,femDofs1374,basisResult1396,refPos1364);
          real op1_e3_l_81391#1 = λ(T0[],T1[])<(T0 * T1)> (_t137B,e123B);
          real op1_e3_l_91392#1 = λ(T0[],T1[])<(T0) - (T1)> (probe_l_71390,op1_e3_l_81391);
          real fb138F#5 = λ(T0[],T1[])<(T1) - (T0)> (_t137D,op1_e3_l_91392);
          string _t139F#1 = "Vals:";
          tensor[2] _t13A1#1 = <tensor[2]>[fa137F,fb138F];
          Print<[string,tensor[2],string]>(_t139F,_t13A1,_t1247);
          real op1_e3_l_2213AD#1 = λ(T0[],T1[])<(T0) - (T1)> (fa137F,fb138F);
          real _t13A4#1 = λ(T0[])<Abs(T0)> (op1_e3_l_2213AD);
          bool _t13C4#1 = LT<real>(_t13A4,eps120F);
          if _t13C4 then goto ASSIGN16D2 else goto JOIN13E3
        ASSIGN16D2:  preds = [COND13C6]
          real _t13C7#1 = λ(T0[])<Abs(T0)> (fa137F);
          bool _t13D9#1 = GT<real>(_t13C7,eps120F);
          if _t13D9 then goto ASSIGN13DD else goto JOIN13E1
        ASSIGN13DD:  preds = [COND13DB]
          real s13DC#1 = λ(T0[],T1[])<(T0 + T1)> (s1239,eps120F);
          self.s = s13DC;
          active
          goto JOIN13E1
        JOIN13E1:  preds = [*ACTIVE13DF,COND13DB]
          real s13E0#1 = phi(s1239)
          goto JOIN13E3
        JOIN13E3:  preds = [JOIN13E1,COND13C6]
          real s13E2#3 = phi(s13E0,s1239)
          real op1_e3_l_3813ED#1 = λ(T0[],T1[])<(T0 * T1)> (s13E2,fb138F);
          real op1_e3_l_3913EE#1 = λ(T0[],T1[])<(T0 * T1)> (e123B,fa137F);
          real op1_e3_l_4813EF#1 = λ(T0[],T1[])<(T0) - (T1)> (op1_e3_l_3813ED,op1_e3_l_3913EE);
          real op1_e3_l_4913F0#1 = λ(T0[],T1[])<(T0) - (T1)> (fb138F,fa137F);
          real cup13E4#6 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_4813EF,op1_e3_l_4913F0);
          string _t140A#1 = "Mid time:";
          Print<[string,real,string]>(_t140A,cup13E4,_t1247);
          tensor[2] op1_e3_l_53141B#1 = λ(T0[2],T1[])<(T1 * T0_{i0})>_{2} (_t125A,cup13E4);
          tensor[2] midRay140D#4 = λ(T0[2],T1[2])<(T0_{i0} + T1_{i0})>_{2} (_t1254,op1_e3_l_53141B);
          femData:MeshPos callNewtonPos1438#1 = _0A7F_msh_newtonInverse1269 (midRay140D,_t1266,_t1264);
          tensor[2] refPos1439#10 = ExtractFemItem<tensor[2],RefPos(Mesh)>(callNewtonPos1438);
          tensor[6] basisResult1441#1 = EvaluateBasis<BasisArray(6)>(refPos1439);
          real fmVal143D#2 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[6],T6[2])<Σ(i0=0..5)<((T4_{i0} * T5_{i0}))>(i0=0..5)> (_t136F,_t136D,_t136B,refPos1439,femDofs1374,basisResult1441,refPos1439);
          real op1_e3_l_581456#1 = λ(T0[],T1[])<(T0 * T1)> (_t137B,cup13E4);
          real op1_e3_l_591457#1 = λ(T0[],T1[])<(T0) - (T1)> (fmVal143D,op1_e3_l_581456);
          real fm1447#6 = λ(T0[],T1[])<(T1) - (T0)> (_t137D,op1_e3_l_591457);
          string _t1479#1 = "all vals:";
          tensor[3] _t147B#1 = <tensor[3]>[fa137F,fm1447,fb138F];
          Print<[string,tensor[3],string]>(_t1479,_t147B,_t1247);
          int _t147E#6 = 1;
          int intersectionItter1480#2 = IAdd(intersectionItter1237,_t147E);
          real _t1482#10 = 0.e0;
          bool _t1484#2 = GT<real>(fa137F,_t1482);
          if _t1484 then goto JOIN1489 else goto ASSIGN168C
        JOIN1489:  preds = [COND1486,JOIN1691]
          int _t1487#1 = phi(_t147E,_t1488)
          bool _t148A#2 = GT<real>(fm1447,_t1482);
          if _t148A then goto JOIN148F else goto ASSIGN1684
        JOIN148F:  preds = [COND148C,JOIN1689]
          int _t148D#1 = phi(_t147E,_t148E)
          int _t1490#1 = IMul(_t1487,_t148D);
          int _t1492#7 = 0;
          bool _t1494#1 = LT<int>(_t1490,_t1492);
          if _t1494 then goto JOIN149A else goto COND1669
        JOIN149A:  preds = [COND1496,JOIN1676]
          real e1497#4 = phi(cup13E4,e123B)
          real s1498#5 = phi(s13E2,s1499)
          string _t149B#1 = "new interval:";
          tensor[2] _t149D#1 = <tensor[2]>[s1498,e1497];
          Print<[string,tensor[2],string]>(_t149B,_t149D,_t1247);
          real _t14A0#2 = λ(T0[])<Abs(T0)> (fa137F);
          bool _t14B2#2 = LT<real>(_t14A0,eps120F);
          if _t14B2 then goto ASSIGN14B6 else goto ASSIGN16DC
        ASSIGN14B6:  preds = [COND14B4]
          bool _t14B5#1 = true;
          goto JOIN14B9
        JOIN14B9:  preds = [ASSIGN14B6,JOIN1665]
          bool _t14B7#1 = phi(_t14B5,_t14B8)
          if _t14B7 then goto ASSIGN16DD else goto ASSIGN1629
        ASSIGN16DD:  preds = [COND14BA]
          real _t14BB#2 = λ(T0[])<Abs(T0)> (fm1447);
          bool _t14EF#1 = GT<real>(_t14BB,eps120F);
          if _t14EF then goto ASSIGN14F3 else goto ASSIGN1627
        ASSIGN14F3:  preds = [COND14F1]
          bool _t14F2#1 = GT<real>(_t14A0,eps120F);
          goto JOIN14F6
        JOIN14F6:  preds = [ASSIGN14F3,ASSIGN1627]
          bool _t14F4#1 = phi(_t14F2,_t14F5)
          if _t14F4 then goto ASSIGN14F9 else goto ASSIGN1529
        ASSIGN14F9:  preds = [COND14F7]
          int itter14F8#4 = IAdd(itter1235,_t147E);
          bool _t14FA#1 = GTE<int>(itter14F8,len1233);
          if _t14FA then goto ASSIGN14FE else goto JOIN1505
        ASSIGN14FE:  preds = [COND14FC]
          string _t14FD#1 = "Fin pixel=============================\n";
          Print<[string]>(_t14FD);
          self.itter = itter14F8;
          self.intersectionItter = _t1492;
          self.s = s1498;
          self.e = e1497;
          stabilize
          goto JOIN1505
        JOIN1505:  preds = [*STABILIZE1504,COND14FC]
          int _t1506#2 = IAdd(offset1231,itter14F8);
          tensor[2] interval1508#3 = Subscript<tensor[2][]>(times1211,_t1506);
          int _t150A#1 = Subscript<int[]>(cells1213,_t1506);
          femData:MeshCell cc150C#2 = Subscript<femData:MeshCell[]>(0cell_a120B,_t150A);
          real s150E#1 = TensorIndex<tensor[2],[0]>(interval1508);
          real e1510#1 = TensorIndex<tensor[2],[1]>(interval1508);
          int _t1512#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc150C);
          femData:FuncCell _t1514#1 = LoadFem<femData:FuncCell>(c120D,_t1512);
          string _t1516#1 = "Next interval!\n";
          Print<[string]>(_t1516);
          self.itter = itter14F8;
          self.intersectionItter = _t1492;
          self.interval = interval1508;
          self.s = s150E;
          self.e = e1510;
          self.cc = cc150C;
          self.fc = _t1514;
          active
          goto JOIN1521
        JOIN1521:  preds = [*ACTIVE1520,*STABILIZE161F]
          goto JOIN1523
        JOIN1523:  preds = [*JOIN1521,MASSIGN162A]
          int intersectionItter1522#1 = phi(intersectionItter1480)
          self.intersectionItter = intersectionItter1522;
          self.s = s1498;
          self.e = e1497;
          active
        ASSIGN1529:  preds = [COND14F7]
          tensor[2] grad1528#1 = <tensor[2]>[_t1482,_t1482];
          bool _t152A#1 = LT<real>(_t14BB,eps120F);
          if _t152A then goto ASSIGN16DE else goto JOIN1561
        ASSIGN16DE:  preds = [COND152C]
          tensor[2,6] basisResult153D#1 = EvaluateBasis<BasisArray(2,6)>(refPos1439);
          tensor[2] compositionl152F#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[2 6],T6[2])<Σ(i2=0..5)<((T4_{i2} * T5_{i0,i2}))>(i2=0..5)>_{2} (_t136F,_t136D,_t136B,refPos1439,femDofs1374,basisResult153D,refPos1439);
          int[3] femIndicies153F#1 = ExtractFemItem2<int,int[3],ExtractIndices(Mesh)>(_t1264,_t1266);
          tensor[3,2] femDofs1540#3 = ExtractFemItem2<int[3],tensor[3,2],ExtractDofsSeq(Mesh)>(_t1264,femIndicies153F);
          tensor[2,3] basisResult1541#3 = EvaluateBasis<BasisArray(2,3)>(refPos1439);
          tensor[2,2] probe_l_81530#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i3=0..2)<((T3_{i3,i0} * T4_{i1,i3}))>(i3=0..2)>_{2 2} (_t1266,_t1264,midRay140D,femDofs1540,basisResult1541,refPos1439);
          tensor[2,2] op1_e3_l_91531#1 = λ(T0[2 2])<Σ(i2=0..1)<((ϵ_{ii2,ii0} * T0_{i2,i1}))>(i2=0..1)>_{2 2} (probe_l_81530);
          tensor[2] probe_l_101532#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i2=0..2)<((T3_{i2,i0} * T4_{'0',i2}))>(i2=0..2)>_{2} (_t1266,_t1264,midRay140D,femDofs1540,basisResult1541,refPos1439);
          tensor[2] probe_l_111533#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i2=0..2)<((T3_{i2,i0} * T4_{'1',i2}))>(i2=0..2)>_{2} (_t1266,_t1264,midRay140D,femDofs1540,basisResult1541,refPos1439);
          tensor[2] op1_e3_l_121534#1 = λ(T0[2])<Σ(i1=0..1)<((ϵ_{ii0,ii1} * T0_{i1}))>(i1=0..1)>_{2} (probe_l_111533);
          tensor[2,2] op1_e3_l_131535#1 = λ(T0[2 2])<Σ(i2=0..1)<((ϵ_{ii2,ii0} * T0_{i1,i2}))>(i2=0..1)>_{2 2} (op1_e3_l_91531);
          real op1_e3_l_141536#1 = λ(T0[2],T1[2])<Σ(i0=0..1)<((T0_{i0} * T1_{i0}))>(i0=0..1)> (probe_l_101532,op1_e3_l_121534);
          tensor[2,2] op1_e3_l_151537#1 = λ(T0[2 2],T1[])<(T0_{i0,i1}) / ( T1)>_{2 2} (op1_e3_l_131535,op1_e3_l_141536);
          tensor[2] grad152D#1 = λ(T0[2],T1[2 2])<Σ(i104=0..1)<((T0_{i104} * T1_{i104,i0}))>(i104=0..1)>_{2} (compositionl152F,op1_e3_l_151537);
          goto JOIN1561
        JOIN1561:  preds = [ASSIGN155E,COND152C]
          tensor[2] grad155F#1 = phi(grad152D,grad1528)
          real out1560#1 = phi(fmVal143D,out1241)
          if _t14B2 then goto ASSIGN16E4 else goto JOIN1598
        ASSIGN16E4:  preds = [COND1562]
          tensor[2,6] basisResult1573#1 = EvaluateBasis<BasisArray(2,6)>(refPos135E);
          tensor[2] compositionl1565#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[2 6],T6[2])<Σ(i2=0..5)<((T4_{i2} * T5_{i0,i2}))>(i2=0..5)>_{2} (_t136F,_t136D,_t136B,refPos135E,femDofs1374,basisResult1573,refPos135E);
          int[3] femIndicies1575#1 = ExtractFemItem2<int,int[3],ExtractIndices(Mesh)>(_t1264,_t1266);
          tensor[3,2] femDofs1576#3 = ExtractFemItem2<int[3],tensor[3,2],ExtractDofsSeq(Mesh)>(_t1264,femIndicies1575);
          tensor[2,3] basisResult1577#3 = EvaluateBasis<BasisArray(2,3)>(refPos135E);
          tensor[2,2] probe_l_81566#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i3=0..2)<((T3_{i3,i0} * T4_{i1,i3}))>(i3=0..2)>_{2 2} (_t1266,_t1264,startRay125C,femDofs1576,basisResult1577,refPos135E);
          tensor[2,2] op1_e3_l_91567#1 = λ(T0[2 2])<Σ(i2=0..1)<((ϵ_{ii2,ii0} * T0_{i2,i1}))>(i2=0..1)>_{2 2} (probe_l_81566);
          tensor[2] probe_l_101568#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i2=0..2)<((T3_{i2,i0} * T4_{'0',i2}))>(i2=0..2)>_{2} (_t1266,_t1264,startRay125C,femDofs1576,basisResult1577,refPos135E);
          tensor[2] probe_l_111569#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i2=0..2)<((T3_{i2,i0} * T4_{'1',i2}))>(i2=0..2)>_{2} (_t1266,_t1264,startRay125C,femDofs1576,basisResult1577,refPos135E);
          tensor[2] op1_e3_l_12156A#1 = λ(T0[2])<Σ(i1=0..1)<((ϵ_{ii0,ii1} * T0_{i1}))>(i1=0..1)>_{2} (probe_l_111569);
          tensor[2,2] op1_e3_l_13156B#1 = λ(T0[2 2])<Σ(i2=0..1)<((ϵ_{ii2,ii0} * T0_{i1,i2}))>(i2=0..1)>_{2 2} (op1_e3_l_91567);
          real op1_e3_l_14156C#1 = λ(T0[2],T1[2])<Σ(i0=0..1)<((T0_{i0} * T1_{i0}))>(i0=0..1)> (probe_l_101568,op1_e3_l_12156A);
          tensor[2,2] op1_e3_l_15156D#1 = λ(T0[2 2],T1[])<(T0_{i0,i1}) / ( T1)>_{2 2} (op1_e3_l_13156B,op1_e3_l_14156C);
          tensor[2] grad1563#1 = λ(T0[2],T1[2 2])<Σ(i104=0..1)<((T0_{i104} * T1_{i104,i0}))>(i104=0..1)>_{2} (compositionl1565,op1_e3_l_15156D);
          goto JOIN1598
        JOIN1598:  preds = [ASSIGN1594,COND1562]
          tensor[2] grad1595#3 = phi(grad1563,grad155F)
          real cup1596#1 = phi(s1498,cup13E4)
          real out1597#3 = phi(faVal1371,out1560)
          string _t1599#1 = "Out val:";
          Print<[string,real,string]>(_t1599,out1597,_t1247);
          string _t159C#1 = "Grad val:";
          Print<[string,tensor[2],string]>(_t159C,grad1595,_t1247);
          real _t159F#6 = 0.1e1;
          tensor[3] mcol15A1#1 = <tensor[3]>[_t159F,_t159F,_t159F];
          bool _t15A3#1 = NEQ<real>(cmin1219,cmax121B);
          if _t15A3 then goto ASSIGN16EC else goto JOIN15D1
        ASSIGN16EC:  preds = [COND15A5]
          real _t15A8#2 = -0.1e1;
          real op1_e3_l_515AB#1 = λ(T0[],T1[])<(T1) - (T0)> (cmin1219,out1597);
          real op1_e3_l_615AC#1 = λ(T0[],T1[])<(T1) - (T0)> (cmin1219,cmax121B);
          real op1_e3_l_715AD#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_515AB,op1_e3_l_615AC);
          real op1_e3_l_815AE#1 = λ(T0[],T1[])<(T1) - (T0)> (_t15A8,_t159F);
          real op1_e3_l_915AF#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_715AD,op1_e3_l_815AE);
          real _t15AA#2 = λ(T0[],T1[])<(T0 + T1)> (_t15A8,op1_e3_l_915AF);
          real Mtransform15B7#2 = Transform<IMAGE1D<double[3]>>(cmap16AD);
          real MxPos15B8#1 = λ(T0[],T1[])<(T0 * T1)> (Mtransform15B7,_t15AA);
          real Ttranslate15B9#1 = Translate<IMAGE1D<double[3]>>(cmap16AD);
          real imgPos15BA#2 = λ(T0[],T1[])<(T0 + T1)> (MxPos15B8,Ttranslate15B9);
          real nd15BB#2 = Floor<1>(imgPos15BA);
          real f15BC#1 = λ(T0[],T1[])<(T0) - (T1)> (imgPos15BA,nd15BB);
          int n15BD#1 = RealToInt<1>(nd15BB);
          int idx15BF#1 = n15BD;
          tensor[3,2] ldvox15C0#1 = LoadVoxelsWithCtl<IMAGE1D<double[3]>,2,clamp>(cmap16AD,idx15BF);
          tensor[2] kernX_15C1#1 = BuildPos<1>(f15BC);
          tensor[2] kevalX_d0_15C2#1 = EvalKernel<2,tent,0>(kernX_15C1);
          tensor[3] mcol15B6#1 = λ(V0(1)[3],H1,T2[1],T3[1 1],V4(1)[3],H5)<Σ(i1=0..1)<((V4_{i0}(1)[i1]# * H5(1)))>(i1=0..1)>_{3} (img1207,_t1209,_t15AA,Mtransform15B7,ldvox15C0,kevalX_d0_15C2);
          goto JOIN15D1
        JOIN15D1:  preds = [ASSIGN15CF,COND15A5]
          tensor[3] mcol15D0#5 = phi(mcol15B6,mcol15A1)
          if light121D then goto ASSIGN15D4 else goto ASSIGN1621
        ASSIGN15D4:  preds = [COND15D2]
          real _t15D3#1 = TensorIndex<tensor[2],[0]>(grad1595);
          real _t15D5#1 = TensorIndex<tensor[2],[1]>(grad1595);
          real _t15D9#1 = -0.1e1;
          tensor[3] N15DB#2 = <tensor[3]>[_t15D3,_t15D5,_t15D9];
          real _t15DD#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (N15DB,L1227);
          real _t15DF#1 = Max<real>(_t1482,_t15DD);
          real op1_e3_l_715E2#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (rayVec122B);
          real op1_e3_l_815E3#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_715E2);
          real op1_e3_l_915E4#1 = λ(T0[])<(1) / ( T0)> (op1_e3_l_815E3);
          tensor[3] op1_e3_l_1015E5#1 = λ(T0[3],T1[])<(T0_{i0} * T1)>_{3} (rayVec122B,op1_e3_l_915E4);
          tensor[3] op1_e3_l_1115E6#1 = λ(T0[3])<Neg(T0_{i0})>_{3} (op1_e3_l_1015E5);
          tensor[3] op1_e3_l_1715E7#3 = λ(T0[3],T1[3])<(T1_{i0} + T0_{i0})>_{3} (L1227,op1_e3_l_1115E6);
          real op1_e3_l_1915E8#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_1715E7,op1_e3_l_1715E7);
          real op1_e3_l_2015E9#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_1915E8);
          real op1_e3_l_2715EA#1 = λ(T0[])<(1) / ( T0)> (op1_e3_l_2015E9);
          real op1_e3_l_2815EB#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (N15DB,op1_e3_l_1715E7);
          real _t15E1#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_2715EA,op1_e3_l_2815EB);
          real _t15F7#1 = Max<real>(_t1482,_t15E1);
          real _t15F9#1 = MathFn<pow>(_t15F7,phongSp1225);
          real op1_e3_l_1715FC#1 = λ(T0[],T1[])<(T1) - (T0)> (camNearVsp122D,cup1596);
          real op1_e3_l_1815FD#1 = λ(T0[],T1[])<(T1) - (T0)> (camNearVsp122D,camFarVsp122F);
          real op1_e3_l_1915FE#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_1715FC,op1_e3_l_1815FD);
          tensor[3] op1_e3_l_2015FF#1 = λ(T0[3],T1[3])<(T1_{i0}) - (T0_{i0})>_{3} (mcnear1215,mcfar1217);
          tensor[3] op1_e3_l_211600#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (op1_e3_l_1915FE,op1_e3_l_2015FF);
          tensor[3] op1_e3_l_221601#2 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (mcnear1215,op1_e3_l_211600);
          tensor[3] op1_e3_l_291602#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (phongKa121F,mcol15D0);
          tensor[3] op1_e3_l_301603#1 = λ(T0[3],T1[],T2[],T3[3])<(T1 * T2 * T0_{i0} * T3_{i0})>_{3} (mcol15D0,_t15DF,phongKd1221,op1_e3_l_221601);
          tensor[3] op1_e3_l_311604#1 = λ(T0[],T1[],T2[3])<(T0 * T1 * T2_{i0})>_{3} (_t15F9,phongKs1223,op1_e3_l_221601);
          tensor[3] fin15FB#3 = λ(T0[3],T1[3],T2[3])<(T0_{i0} + T1_{i0} + T2_{i0})>_{3} (op1_e3_l_291602,op1_e3_l_301603,op1_e3_l_311604);
          real _t160F#1 = TensorIndex<tensor[3],[0]>(fin15FB);
          real _t1611#1 = TensorIndex<tensor[3],[1]>(fin15FB);
          real _t1613#1 = TensorIndex<tensor[3],[2]>(fin15FB);
          tensor[4] rgba1615#1 = <tensor[4]>[_t160F,_t1611,_t1613,_t159F];
          goto JOIN1619
        JOIN1619:  preds = [ASSIGN1616,ASSIGN1626]
          tensor[4] rgba1617#1 = phi(rgba1615,rgba1618)
          self.intersectionItter = _t1492;
          self.s = s1498;
          self.e = e1497;
          self.out = out1597;
          self.rgba = rgba1617;
          stabilize
          goto JOIN1521
        ASSIGN1621:  preds = [COND15D2]
          real _t1620#1 = TensorIndex<tensor[3],[0]>(mcol15D0);
          real _t1622#1 = TensorIndex<tensor[3],[1]>(mcol15D0);
          real _t1624#1 = TensorIndex<tensor[3],[2]>(mcol15D0);
          tensor[4] rgba1618#1 = <tensor[4]>[_t1620,_t1622,_t1624,_t159F];
          goto JOIN1619
        ASSIGN1627:  preds = [COND14F1]
          bool _t14F5#1 = false;
          goto JOIN14F6
        ASSIGN1629:  preds = [COND14BA]
          string _t1628#1 = "=========\n";
          Print<[string]>(_t1628);
          goto JOIN1523
        ASSIGN16DC:  preds = [COND14B4]
          real _t162B#1 = λ(T0[])<Abs(T0)> (fm1447);
          bool _t165F#1 = LT<real>(_t162B,eps120F);
          if _t165F then goto ASSIGN1663 else goto ASSIGN1667
        ASSIGN1663:  preds = [COND1661]
          bool _t1662#1 = true;
          goto JOIN1665
        JOIN1665:  preds = [ASSIGN1663,ASSIGN1668]
          bool _t14B8#1 = phi(_t1662,_t1664)
          goto JOIN14B9
        ASSIGN1667:  preds = [COND1661]
          int _t1666#1 = 32;
          bool _t1664#1 = GT<int>(intersectionItter1480,_t1666);
          goto JOIN1665
        COND1669:  preds = [COND1496]
          if _t1484 then goto JOIN166C else goto ASSIGN167E
        JOIN166C:  preds = [COND1669,JOIN1682]
          int _t166A#1 = phi(_t147E,_t166B)
          if _t148A then goto JOIN1670 else goto ASSIGN1678
        JOIN1670:  preds = [COND166D,JOIN167C]
          int _t166E#1 = phi(_t147E,_t166F)
          int _t1671#1 = IMul(_t166A,_t166E);
          bool _t1673#1 = GT<int>(_t1671,_t1492);
          if _t1673 then goto JOIN1676 else goto JOIN1676
        JOIN1676:  preds = [COND1675,COND1675]
          real s1499#1 = phi(cup13E4,s13E2)
          goto JOIN149A
        ASSIGN1678:  preds = [COND166D]
          bool _t1677#1 = LT<real>(fm1447,_t1482);
          if _t1677 then goto ASSIGN167B else goto JOIN167C
        ASSIGN167B:  preds = [COND1679]
          int _t167A#1 = -1;
          goto JOIN167C
        JOIN167C:  preds = [ASSIGN167B,COND1679]
          int _t166F#1 = phi(_t167A,_t1492)
          goto JOIN1670
        ASSIGN167E:  preds = [COND1669]
          bool _t167D#1 = LT<real>(fa137F,_t1482);
          if _t167D then goto ASSIGN1681 else goto JOIN1682
        ASSIGN1681:  preds = [COND167F]
          int _t1680#1 = -1;
          goto JOIN1682
        JOIN1682:  preds = [ASSIGN1681,COND167F]
          int _t166B#1 = phi(_t1680,_t1492)
          goto JOIN166C
        ASSIGN1684:  preds = [COND148C]
          bool _t1683#1 = LT<real>(fm1447,_t1482);
          if _t1683 then goto ASSIGN1687 else goto ASSIGN168A
        ASSIGN1687:  preds = [COND1685]
          int _t1686#1 = -1;
          goto JOIN1689
        JOIN1689:  preds = [ASSIGN1687,ASSIGN168A]
          int _t148E#1 = phi(_t1686,_t1688)
          goto JOIN148F
        ASSIGN168A:  preds = [COND1685]
          int _t1688#1 = 0;
          goto JOIN1689
        ASSIGN168C:  preds = [COND1486]
          bool _t168B#1 = LT<real>(fa137F,_t1482);
          if _t168B then goto ASSIGN168F else goto ASSIGN1692
        ASSIGN168F:  preds = [COND168D]
          int _t168E#1 = -1;
          goto JOIN1691
        JOIN1691:  preds = [ASSIGN168F,ASSIGN1692]
          int _t1488#1 = phi(_t168E,_t1690)
          goto JOIN1489
        ASSIGN1692:  preds = [COND168D]
          int _t1690#1 = 0;
          goto JOIN1691
    end update
  end ray
## initial strand creation
  GRID(2)
    ENTRY1693:  preds = []
      int iresU1694#1 = globals.iresU0FDC;
      int iresV1696#1 = globals.iresV0FDD;
      int _t1698#2 = 0;
      int _t169A#2 = 1;
      int _t169C#1 = ISub(iresU1694,_t169A);
      int[] _t169E#1 = Range(_t1698,_t169C);
    FOREACH16A1:  preds = [ASSIGN169F,NEXT16AA]
      foreach (vi16A0 in _t169E) on exit goto RETURN16AB
      int _t16A2#1 = ISub(iresV1696,_t169A);
      int[] _t16A4#1 = Range(_t1698,_t16A2);
    FOREACH16A7:  preds = [ASSIGN16A5,NEXT16A9]
      foreach (ui16A6 in _t16A4) on exit goto NEXT16AA
      new ray(ui16A6,vi16A0);
      goto FOREACH16A7
    NEXT16AA:  preds = [FOREACH16A7]
      goto FOREACH16A1
    RETURN16AB:  preds = [FOREACH16A1]
      return
#### end program ####
##### mid-ir: after border control ####
## properties
  GlobalInit StrandArray HasStartMethod ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[]) HasInputs HasGlobals
## globals
  input isoval0FD6 (isoval) = <default>
  input thick0FD7 (thick) = <default>
  input camEye0FD8 (camEye) = <default>
  input camAt0FD9 (camAt) = <default>
  input camUp0FDA (camUp) = <default>
  input camFOV0FDB (camFOV) = <default>
  input iresU0FDC (iresU) = <default>
  input iresV0FDD (iresV) = <default>
  input camNear0FDE (camNear) = <default>
  input camFar0FDF (camFar) = <default>
  input refStep0FE0 (refStep) = <default>
  input rayStep0FE1 (rayStep) = <default>
  input a0FE2 (a) = <no-default>
  input 0b0472_intermedateGlobal0FE3 (b) = <no-default>
  input 0c0474_intermedateGlobal0FE4 (c) = <no-default>
  input eps0FE5 (eps) = <default>
  input indecies0FE6 (indecies) = <no-default>
  input times0FE7 (times) = <no-default>
  input cells0FE8 (cells) = <no-default>
  input mcnear0FE9 (mcnear) = <default>
  input mcfar0FEA (mcfar) = <default>
  input cmap0FEB (cmap) = image("/home/teocollin/gitcode/diderot/tests/lipRay/find/cmap.nrrd")
  input cmin0FEC (cmin) = <default>
  input cmax0FED (cmax) = <default>
  input light0FEE (light) = <default>
  input phongKa0FEF (phongKa) = <default>
  input phongKd0FF0 (phongKd) = <default>
  input phongKs0FF1 (phongKs) = <default>
  input phongSp0FF2 (phongSp) = <default>
  input maxAlpha0FF3 (maxAlpha) = <default>
  input lightVsp0FF4 (lightVsp) = <default>
  global femData:MeshCell[] 0cell_a0FF5
  global femData:FemFunc c0FF6
  global real camNearVsp0FF7
  global real camFarVsp0FF8
  global tensor[3] camN0FF9
  global tensor[3] camU0FFA
  global tensor[3] camV0FFB
  global real camVmax0FFC
  global real camUmax0FFD
  global tensor[3] L0FFE
  global image(IMAGE1D<double[3]>) img0FFF
  global kernel _t1000
## functions
  function femData:MeshPos _0A7F_msh_newtonInverse1269 (tensor[2] pos126A#3, int cellInt126B#7, femData:Mesh mesh126C#10) {
    ENTRY126D:  preds = []
      real _t126E#2 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
      tensor[2] xn1270#8 = <tensor[2]>[_t126E,_t126E];
      int _t1272#1 = 0;
      int _t1274#1 = 16;
      int[] _t1276#1 = Range(_t1272,_t1274);
    FOREACH1279:  preds = [ASSIGN1277,NEXT1356]
      foreach (itter1278 in _t1276) on exit goto ASSIGN135B
        tensor[2] xn127B#6 = phi(xn1270,xn127A)
      int[3] femIndicies1288#1 = ExtractFemItem2<int,int[3],ExtractIndices(Mesh)>(mesh126C,cellInt126B);
      tensor[3,2] femDofs1289#5 = ExtractFemItem2<int[3],tensor[3,2],ExtractDofsSeq(Mesh)>(mesh126C,femIndicies1288);
      tensor[2,3] basisResult128A#3 = EvaluateBasis<BasisArray(2,3)>(xn1270);
      tensor[2,2] probe_l_10127C#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i3=0..2)<((T3_{i3,i0} * T4_{i1,i3}))>(i3=0..2)>_{2 2} (cellInt126B,mesh126C,xn1270,femDofs1289,basisResult128A,xn1270);
      tensor[2,2] op1_e3_l_11127D#1 = λ(T0[2 2])<Σ(i2=0..1)<((ϵ_{ii2,ii0} * T0_{i2,i1}))>(i2=0..1)>_{2 2} (probe_l_10127C);
      tensor[2] probe_l_12127E#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i2=0..2)<((T3_{i2,i0} * T4_{'0',i2}))>(i2=0..2)>_{2} (cellInt126B,mesh126C,xn1270,femDofs1289,basisResult128A,xn1270);
      tensor[2] probe_l_13127F#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i2=0..2)<((T3_{i2,i0} * T4_{'1',i2}))>(i2=0..2)>_{2} (cellInt126B,mesh126C,xn1270,femDofs1289,basisResult128A,xn1270);
      tensor[2] op1_e3_l_141280#1 = λ(T0[2])<Σ(i1=0..1)<((ϵ_{ii0,ii1} * T0_{i1}))>(i1=0..1)>_{2} (probe_l_13127F);
      tensor[2,2] op1_e3_l_151281#1 = λ(T0[2 2])<Σ(i2=0..1)<((ϵ_{ii2,ii0} * T0_{i1,i2}))>(i2=0..1)>_{2 2} (op1_e3_l_11127D);
      real op1_e3_l_161282#1 = λ(T0[2],T1[2])<Σ(i0=0..1)<((T0_{i0} * T1_{i0}))>(i0=0..1)> (probe_l_12127E,op1_e3_l_141280);
      tensor[3] basisResult1290#2 = EvaluateBasis<BasisArray(3)>(xn127B);
      tensor[2] probe_l_171283#1 = λ(T0[2],INT1,FEM(msh)2,T3[3 2],T4[3],T5[2])<Σ(i1=0..2)<((T3_{i1,i0} * T4_{i1}))>(i1=0..2)>_{2} (xn127B,cellInt126B,mesh126C,femDofs1289,basisResult1290,xn127B);
      tensor[2,2] op1_e3_l_181284#2 = λ(T0[2 2],T1[])<(T0_{i0,i1}) / ( T1)>_{2 2} (op1_e3_l_151281,op1_e3_l_161282);
      tensor[2] op1_e3_l_191285#1 = λ(T0[2],T1[2])<(T1_{i0}) - (T0_{i0})>_{2} (pos126A,probe_l_171283);
      tensor[2] op1_e3_l_201286#1 = λ(T0[2 2],T1[2])<Σ(i1=0..1)<((T0_{i0,i1} * T1_{i1}))>(i1=0..1)>_{2} (op1_e3_l_181284,op1_e3_l_191285);
      tensor[2] xn127A#4 = λ(T0[2],T1[2])<(T0_{i0}) - (T1_{i0})>_{2} (xn127B,op1_e3_l_201286);
      real _t12A7#2 = 0.1e-7;
      real _t12A9#1 = λ(T0[],T1[])<(T0 * T1)> (_t12A7,_t12A7);
      tensor[2] probe_l_2512B3#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[3],T5[2])<Σ(i1=0..2)<((T3_{i1,i0} * T4_{i1}))>(i1=0..2)>_{2} (cellInt126B,mesh126C,xn127B,femDofs1289,basisResult1290,xn127B);
      tensor[2] op1_e3_l_2712B5#1 = λ(T0[2],T1[2])<(T1_{i0}) - (T0_{i0})>_{2} (pos126A,probe_l_2512B3);
      tensor[2] op1_e3_l_3812B6#2 = λ(T0[2 2],T1[2])<Σ(i1=0..1)<((T0_{i0,i1} * T1_{i1}))>(i1=0..1)>_{2} (op1_e3_l_181284,op1_e3_l_2712B5);
      real _t12AB#1 = λ(T0[2],T1[2])<Σ(i0=0..1)<((T0_{i0} * T1_{i0}))>(i0=0..1)> (op1_e3_l_3812B6,op1_e3_l_3812B6);
      bool _t12D7#1 = GTE<real>(_t12A9,_t12AB);
      if _t12D7 then goto ASSIGN12DB else goto JOIN1355
    ASSIGN12DB:  preds = [COND12D9]
      real _t12DA#3 = 0.1e1;
      real _t12DC#3 = 0.1e-8;
      real _t12DE#1 = λ(T0[],T1[])<(T0 + T1)> (_t12DA,_t12DC);
      tensor[2] _t12E0#1 = <tensor[2]>[_t12DA,_t12DA];
      real _t12E2#1 = λ(T0[2],T1[2])<Σ(i0=0..1)<((T0_{i0} * T1_{i0}))>(i0=0..1)> (_t12E0,xn127A);
      bool _t1310#1 = GT<real>(_t12DE,_t12E2);
      tensor[2] _t1312#1 = <tensor[2]>[_t12DC,_t12DC];
      tensor[2] _t1314#2 = λ(T0[2],T1[2])<(T0_{i0} + T1_{i0})>_{2} (_t1312,xn127A);
      real _t1342#1 = TensorIndex<tensor[2],[0]>(_t1314);
      real _t1344#2 = -0.e0;
      bool _t1346#1 = GT<real>(_t1342,_t1344);
      real _t1348#1 = TensorIndex<tensor[2],[1]>(_t1314);
      bool _t134A#1 = GT<real>(_t1348,_t1344);
      bool _t134C#1 = BAnd(_t1346,_t134A);
      bool _t134E#1 = BAnd(_t1310,_t134C);
      if _t134E then goto ASSIGN1352 else goto ASSIGN1358
    ASSIGN1352:  preds = [COND1350]
      femData:MeshPos _t1351#1 = ExtractFemItemN<[femData:Mesh,int,tensor[2],tensor[2]],femData:MeshPos,AllBuild(MeshPos),0000,"",[],int>(mesh126C,cellInt126B,xn127A,pos126A);
      return _t1351
      goto JOIN1354
    JOIN1354:  preds = [*RETURN(_t1351)1353,*RETURN(_t1357)1359]
      goto JOIN1355
    JOIN1355:  preds = [*JOIN1354,COND12D9]
      goto FOREACH1279
    ASSIGN1358:  preds = [COND1350]
      femData:MeshPos _t1357#1 = ExtractFemItemN<[femData:Mesh],femData:MeshPos,InvalidBuild(MeshPos),0000,"",[],int>(mesh126C);
      return _t1357
      goto JOIN1354
    ASSIGN135B:  preds = [FOREACH1279]
      femData:MeshPos _t135A#1 = ExtractFemItemN<[femData:Mesh],femData:MeshPos,InvalidBuild(MeshPos),0000,"",[],int>(mesh126C);
      return _t135A
}
## input initialization
  ENTRY1001:  preds = []
    real isoval1002#1 = 0.2e0;
    globals.isoval0FD6 = isoval1002;
    real thick1005#1 = 0.7e-1;
    globals.thick0FD7 = thick1005;
    real _t1008#2 = 0.3e1;
    real _t100A#1 = -0.3e1;
    tensor[3] camEye100C#1 = <tensor[3]>[_t1008,_t100A,_t1008];
    globals.camEye0FD8 = camEye100C;
    real _t100F#5 = 0.5e0;
    tensor[3] camAt1011#1 = <tensor[3]>[_t100F,_t100F,_t100F];
    globals.camAt0FD9 = camAt1011;
    real _t1014#4 = 0.e0;
    real _t1016#7 = 0.1e1;
    tensor[3] camUp1018#2 = <tensor[3]>[_t1014,_t1014,_t1016];
    globals.camUp0FDA = camUp1018;
    real camFOV101B#1 = 0.137e2;
    globals.camFOV0FDB = camFOV101B;
    int iresU101E#2 = 10;
    globals.iresU0FDC = iresU101E;
    globals.iresV0FDD = iresU101E;
    real camNear1022#1 = -0.2e1;
    globals.camNear0FDE = camNear1022;
    real camFar1025#1 = 0.5e1;
    globals.camFar0FDF = camFar1025;
    globals.refStep0FE0 = _t1016;
    real rayStep1029#1 = 0.1e-1;
    globals.rayStep0FE1 = rayStep1029;
    real eps102C#1 = 0.1e-5;
    globals.eps0FE5 = eps102C;
    tensor[3] mcnear102F#2 = <tensor[3]>[_t1016,_t1016,_t1016];
    globals.mcnear0FE9 = mcnear102F;
    globals.mcfar0FEA = mcnear102F;
    globals.cmin0FEC = _t1014;
    globals.cmax0FED = _t1016;
    bool light1035#1 = true;
    globals.light0FEE = light1035;
    globals.phongKa0FEF = _t100F;
    globals.phongKd0FF0 = _t100F;
    globals.phongKs0FF1 = _t1014;
    real phongSp103B#1 = 0.6e2;
    globals.phongSp0FF2 = phongSp103B;
    globals.maxAlpha0FF3 = _t1016;
    globals.lightVsp0FF4 = camUp1018;
    return
## global-variable initialization
  ENTRY1041:  preds = []
    tensor[3] camEye1042#1 = globals.camEye0FD8;
    tensor[3] camAt1044#1 = globals.camAt0FD9;
    tensor[3] camUp1046#1 = globals.camUp0FDA;
    real camFOV1048#1 = globals.camFOV0FDB;
    int iresU104A#1 = globals.iresU0FDC;
    int iresV104C#1 = globals.iresV0FDD;
    real camNear104E#1 = globals.camNear0FDE;
    real camFar1050#1 = globals.camFar0FDF;
    femData:Mesh a1052#3 = globals.a0FE2;
    femData:Space 0b0472_intermedateGlobal1054#1 = globals.0b0472_intermedateGlobal0FE3;
    femData:FemFunc 0c0474_intermedateGlobal1056#1 = globals.0c0474_intermedateGlobal0FE4;
    image(IMAGE1D<double[3]>) cmap1058#1 = globals.cmap0FEB;
    tensor[3] lightVsp105A#2 = globals.lightVsp0FF4;
    int _t105C#1 = 0;
    int _t105E#1 = 1;
    int _t1060#1 = ExtractFemItem<int,NumCell(Mesh)>(a1052);
    int _t1062#1 = ISub(_t1060,_t105E);
    int[] _t1064#1 = Range(_t105C,_t1062);
    femData:MeshCell[] _t1066#1 = <femData:MeshCell[]>{};
  FOREACH1069:  preds = [ASSIGN1067,NEXT106F]
    foreach (_t1068 in _t1064) on exit goto GASSIGN1070
      femData:MeshCell[] _t106D#2 = phi(_t1066,_t106C)
    femData:MeshCell _t106A#1 = LoadFem<femData:MeshCell>(a1052,_t1068);
    femData:MeshCell[] _t106C#1 = Append<femData:MeshCell>(_t106D,_t106A);
    goto FOREACH1069
  GASSIGN1070:  preds = [FOREACH1069]
    globals.0cell_a0FF5 = _t106D;
    femData:Space b1071#1 = LoadFem<femData:Space>(0b0472_intermedateGlobal1054,a1052);
    femData:FemFunc c1073#1 = LoadFem<femData:FemFunc>(0c0474_intermedateGlobal1056,b1071);
    globals.c0FF6 = c1073;
    tensor[3] op1_e3_l_31077#5 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (camAt1044,camEye1042);
    real op1_e3_l_51078#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_31077,op1_e3_l_31077);
    real op1_e3_l_61079#5 = λ(T0[])<Sqrt(T0)> (op1_e3_l_51078);
    real camNearVsp1076#1 = λ(T0[],T1[])<(T0 + T1)> (camNear104E,op1_e3_l_61079);
    globals.camNearVsp0FF7 = camNearVsp1076;
    real camFarVsp107F#1 = λ(T0[],T1[])<(T0 + T1)> (camFar1050,op1_e3_l_61079);
    globals.camFarVsp0FF8 = camFarVsp107F;
    real op1_e3_l_9108C#6 = λ(T0[])<(1) / ( T0)> (op1_e3_l_61079);
    tensor[3] camN1088#2 = λ(T0[3],T1[])<(T0_{i0} * T1)>_{3} (op1_e3_l_31077,op1_e3_l_9108C);
    globals.camN0FF9 = camN1088;
    tensor[3,3] op1_e3_l_151097#1 = λ(T0[3])<Σ(i2=0..2)<((ϵ_{ii0,ii1,ii2} * T0_{i2}))>(i2=0..2)>_{3 3} (camUp1046);
    tensor[3] op1_e3_l_171099#4 = λ(T0[3],T1[3 3])<Σ(i1=0..2)<((T0_{i1} * T1_{i0,i1}))>(i1=0..2)>_{3} (op1_e3_l_31077,op1_e3_l_151097);
    real op1_e3_l_34109A#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_171099,op1_e3_l_171099);
    real op1_e3_l_35109B#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (op1_e3_l_9108C,op1_e3_l_9108C,op1_e3_l_34109A);
    real op1_e3_l_36109C#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_35109B);
    tensor[3] op1_e3_l_37109D#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (op1_e3_l_9108C,op1_e3_l_171099);
    real op1_e3_l_38109E#2 = λ(T0[])<(1) / ( T0)> (op1_e3_l_36109C);
    tensor[3] camU1093#2 = λ(T0[3],T1[])<(T0_{i0} * T1)>_{3} (op1_e3_l_37109D,op1_e3_l_38109E);
    globals.camU0FFA = camU1093;
    tensor[3,3] op1_e3_l_4510B6#1 = λ(T0[3])<Σ(i2=0..2)<((ϵ_{ii0,ii1,ii2} * T0_{i2}))>(i2=0..2)>_{3 3} (op1_e3_l_31077);
    tensor[3] op1_e3_l_4710B7#1 = λ(T0[3],T1[3 3])<Σ(i1=0..2)<((T0_{i1} * T1_{i0,i1}))>(i1=0..2)>_{3} (op1_e3_l_171099,op1_e3_l_4510B6);
    tensor[3] op1_e3_l_5010B9#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (op1_e3_l_9108C,op1_e3_l_4710B7);
    tensor[3] camV10AC#2 = λ(T0[],T1[],T2[3])<(T0 * T1 * T2_{i0})>_{3} (op1_e3_l_38109E,op1_e3_l_9108C,op1_e3_l_5010B9);
    globals.camV0FFB = camV10AC;
    real _t10C9#1 = 0.314159265358979323846264338327950288e1;
    real _t10CB#1 = 0.36e3;
    real op1_e3_l_510CE#1 = λ(T0[],T1[])<(T0 * T1)> (camFOV1048,_t10C9);
    real op1_e3_l_610CF#1 = λ(T0[],T1[])<(T1) / ( T0)> (_t10CB,op1_e3_l_510CE);
    real op1_e3_l_1010D2#2 = λ(T0[])<Tangent(T0)> (op1_e3_l_610CF);
    real camVmax10CD#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_1010D2,op1_e3_l_61079);
    globals.camVmax0FFC = camVmax10CD;
    real _t10DC#1 = IntToReal(iresU104A);
    real _t10DE#1 = IntToReal(iresV104C);
    real op1_e3_l_1410E7#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t10DC,op1_e3_l_1010D2,op1_e3_l_61079);
    real camUmax10E0#1 = λ(T0[],T1[])<(T1) / ( T0)> (_t10DE,op1_e3_l_1410E7);
    globals.camUmax0FFD = camUmax10E0;
    kernel _t10F1#1 = Kernel<tent,0>;
    image(IMAGE1D<double[3]>) img10F3#1 = BorderCtlClamp<IMAGE1D<double[3]>>(cmap1058);
    tensor[3,3] _t10F5#1 = <tensor[3,3]>[camU1093,camV10AC,camN1088];
    real op1_e3_l_310F8#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (lightVsp105A);
    real op1_e3_l_410F9#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_310F8);
    real op1_e3_l_510FA#1 = λ(T0[])<(1) / ( T0)> (op1_e3_l_410F9);
    tensor[3] op1_e3_l_610FB#1 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i1,i0} * T1_{i1}))>(i1=0..2)>_{3} (_t10F5,lightVsp105A);
    tensor[3] L10F7#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (op1_e3_l_510FA,op1_e3_l_610FB);
    globals.L0FFE = L10F7;
    globals.img0FFF = img10F3;
    globals._t1000 = _t10F1;
    return
## strand
  strand ray (int ui1105#2, int vi1106#3)
    state:
      real rayU;
      real rayV;
      tensor[3] UV;
      tensor[3] rayOrig;
      tensor[3] rayVec;
      real camNearVsp;
      real camFarVsp;
      int offset;
      int len;
      int itter;
      int intersectionItter;
      int idx;
      tensor[2] interval;
      real s;
      real e;
      femData:MeshCell cc;
      femData:FuncCell fc;
      output real out;
      output tensor[4] rgba;
    state init
      ENTRY111A:  preds = []
        tensor[3] camEye111B#1 = globals.camEye0FD8;
        int iresU111D#2 = globals.iresU0FDC;
        int iresV111F#3 = globals.iresV0FDD;
        femData:MeshCell[] 0cell_a1121#1 = globals.0cell_a0FF5;
        femData:FemFunc c1123#1 = globals.c0FF6;
        int[] indecies1125#2 = globals.indecies0FE6;
        tensor[2][] times1127#1 = globals.times0FE7;
        real camNearVsp1129#1 = globals.camNearVsp0FF7;
        real camFarVsp112B#1 = globals.camFarVsp0FF8;
        tensor[3] camN112D#1 = globals.camN0FF9;
        tensor[3] camU112F#1 = globals.camU0FFA;
        tensor[3] camV1131#1 = globals.camV0FFB;
        real camVmax1133#2 = globals.camVmax0FFC;
        real camUmax1135#2 = globals.camUmax0FFD;
        real _t1137#5 = -0.5e0;
        real _t1139#1 = IntToReal(ui1105);
        real _t113B#1 = IntToReal(iresU111D);
        real _t113D#3 = 0.5e0;
        real op1_e3_l_61140#1 = λ(T0[],T1[])<(T0) - (T1)> (_t113B,_t113D);
        real op1_e3_l_71141#1 = λ(T0[],T1[])<(T1) - (T0)> (_t1137,_t1139);
        real op1_e3_l_81142#1 = λ(T0[],T1[])<(T1) - (T0)> (_t1137,op1_e3_l_61140);
        real op1_e3_l_91143#2 = λ(T0[])<Neg(T0)> (camUmax1135);
        real op1_e3_l_101144#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_71141,op1_e3_l_81142);
        real op1_e3_l_111145#1 = λ(T0[],T1[])<(T0) - (T1)> (camUmax1135,op1_e3_l_91143);
        real op1_e3_l_131146#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_101144,op1_e3_l_111145);
        real rayU113F#2 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_91143,op1_e3_l_131146);
        real _t114F#1 = IntToReal(vi1106);
        real _t1151#2 = IntToReal(iresV111F);
        real op1_e3_l_61154#1 = λ(T0[],T1[])<(T0) - (T1)> (_t1151,_t113D);
        real op1_e3_l_71155#2 = λ(T0[],T1[])<(T1) - (T0)> (_t1137,_t114F);
        real op1_e3_l_81156#1 = λ(T0[],T1[])<(T1) - (T0)> (_t1137,op1_e3_l_61154);
        real op1_e3_l_91157#3 = λ(T0[])<Neg(T0)> (camVmax1133);
        real op1_e3_l_101158#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_71155,op1_e3_l_81156);
        real op1_e3_l_111159#2 = λ(T0[],T1[])<(T0) - (T1)> (camVmax1133,op1_e3_l_91157);
        real op1_e3_l_13115A#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_101158,op1_e3_l_111159);
        real rayV1153#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_91157,op1_e3_l_13115A);
        real op1_e3_l_23116C#1 = λ(T0[],T1[])<(T1) - (T0)> (_t113D,_t1151);
        real op1_e3_l_25116E#1 = λ(T0[],T1[])<(T1) - (T0)> (_t1137,op1_e3_l_23116C);
        real op1_e3_l_271170#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_71155,op1_e3_l_25116E);
        real op1_e3_l_301172#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_271170,op1_e3_l_111159);
        real op1_e3_l_311173#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_91157,op1_e3_l_301172);
        tensor[3] op1_e3_l_321174#2 = λ(T0[3],T1[])<(T1 * T0_{i0})>_{3} (camU112F,rayU113F);
        tensor[3] op1_e3_l_331175#2 = λ(T0[3],T1[])<(T1 * T0_{i0})>_{3} (camV1131,op1_e3_l_311173);
        tensor[3] UV1163#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (op1_e3_l_321174,op1_e3_l_331175);
        tensor[3] rayOrig1189#1 = λ(T0[3],T1[3],T2[3])<(T0_{i0} + T1_{i0} + T2_{i0})>_{3} (camEye111B,op1_e3_l_321174,op1_e3_l_331175);
        real _t11AF#8 = 0.e0;
        tensor[3] _t11B1#1 = <tensor[3]>[_t11AF,_t11AF,_t11AF];
        tensor[3] rayVec11B3#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (camN112D,_t11B1);
        int _t11B5#2 = IMul(ui1105,iresV111F);
        int _t11B7#1 = IAdd(_t11B5,vi1106);
        int offset11B9#2 = Subscript<int[]>(indecies1125,_t11B7);
        int _t11BB#1 = IMul(iresU111D,iresV111F);
        int _t11BD#1 = IAdd(_t11BB,_t11B5);
        int _t11BF#1 = IAdd(_t11BD,vi1106);
        int len11C1#1 = Subscript<int[]>(indecies1125,_t11BF);
        int itter11C3#3 = 0;
        int idx11C5#2 = offset11B9;
        tensor[2] interval11C7#3 = Subscript<tensor[2][]>(times1127,idx11C5);
        real s11C9#1 = TensorIndex<tensor[2],[0]>(interval11C7);
        real e11CB#1 = TensorIndex<tensor[2],[1]>(interval11C7);
        femData:MeshCell cc11CD#2 = Subscript<femData:MeshCell[]>(0cell_a1121,itter11C3);
        int _t11CF#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc11CD);
        femData:FuncCell _t11D1#1 = LoadFem<femData:FuncCell>(c1123,_t11CF);
        tensor[4] rgba11D3#1 = <tensor[4]>[_t11AF,_t11AF,_t11AF,_t11AF];
        self.rayU = rayU113F;
        self.rayV = rayV1153;
        self.UV = UV1163;
        self.rayOrig = rayOrig1189;
        self.rayVec = rayVec11B3;
        self.camNearVsp = camNearVsp1129;
        self.camFarVsp = camFarVsp112B;
        self.offset = offset11B9;
        self.len = len11C1;
        self.itter = itter11C3;
        self.intersectionItter = itter11C3;
        self.idx = idx11C5;
        self.interval = interval11C7;
        self.s = s11C9;
        self.e = e11CB;
        self.cc = cc11CD;
        self.fc = _t11D1;
        self.out = _t11AF;
        self.rgba = rgba11D3;
        return
    end state init
    method start
        ENTRY11E9:  preds = []
          femData:MeshCell[] 0cell_a11EA#1 = globals.0cell_a0FF5;
          femData:FemFunc c11EC#1 = globals.c0FF6;
          int[] cells11EE#1 = globals.cells0FE8;
          int len11F0#1 = self.len;
          int idx11F2#1 = self.idx;
          int _t11F4#1 = 0;
          bool _t11F6#1 = EQ<int>(len11F0,_t11F4);
          if _t11F6 then goto STABILIZE11F9 else goto JOIN11FA
        STABILIZE11F9:  preds = [COND11F8]
          stabilize
          goto JOIN11FA
        JOIN11FA:  preds = [*STABILIZE11F9,COND11F8]
          int _t11FB#1 = Subscript<int[]>(cells11EE,idx11F2);
          femData:MeshCell cc11FD#2 = Subscript<femData:MeshCell[]>(0cell_a11EA,_t11FB);
          int _t11FF#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc11FD);
          femData:FuncCell _t1201#1 = LoadFem<femData:FuncCell>(c11EC,_t11FF);
          self.cc = cc11FD;
          self.fc = _t1201;
          active
    end start
    method update
        ENTRY1206:  preds = []
          image(IMAGE1D<double[3]>) cmap16AD#5 = globals.cmap0FEB;
          image(IMAGE1D<double[3]>) img1207#1 = globals.img0FFF;
          kernel _t1209#1 = globals._t1000;
          femData:MeshCell[] 0cell_a120B#1 = globals.0cell_a0FF5;
          femData:FemFunc c120D#1 = globals.c0FF6;
          real eps120F#8 = globals.eps0FE5;
          tensor[2][] times1211#1 = globals.times0FE7;
          int[] cells1213#1 = globals.cells0FE8;
          tensor[3] mcnear1215#2 = globals.mcnear0FE9;
          tensor[3] mcfar1217#1 = globals.mcfar0FEA;
          real cmin1219#3 = globals.cmin0FEC;
          real cmax121B#2 = globals.cmax0FED;
          bool light121D#1 = globals.light0FEE;
          real phongKa121F#1 = globals.phongKa0FEF;
          real phongKd1221#1 = globals.phongKd0FF0;
          real phongKs1223#1 = globals.phongKs0FF1;
          real phongSp1225#1 = globals.phongSp0FF2;
          tensor[3] L1227#2 = globals.L0FFE;
          tensor[3] rayOrig1229#3 = self.rayOrig;
          tensor[3] rayVec122B#5 = self.rayVec;
          real camNearVsp122D#2 = self.camNearVsp;
          real camFarVsp122F#1 = self.camFarVsp;
          int offset1231#1 = self.offset;
          int len1233#1 = self.len;
          int itter1235#2 = self.itter;
          int intersectionItter1237#2 = self.intersectionItter;
          real s1239#6 = self.s;
          real e123B#5 = self.e;
          femData:MeshCell cc123D#2 = self.cc;
          femData:FuncCell fc123F#2 = self.fc;
          real out1241#1 = self.out;
          string _t1243#1 = "Interval:";
          tensor[2] _t1245#1 = <tensor[2]>[s1239,e123B];
          string _t1247#10 = "\n";
          Print<[string,tensor[2],string]>(_t1243,_t1245,_t1247);
          string _t124A#1 = "inner itter:";
          Print<[string,int,string]>(_t124A,intersectionItter1237,_t1247);
          string _t124D#1 = "Outer itter:";
          Print<[string,int,string]>(_t124D,itter1235,_t1247);
          real _t1250#1 = TensorIndex<tensor[3],[0]>(rayOrig1229);
          real _t1252#1 = TensorIndex<tensor[3],[1]>(rayOrig1229);
          tensor[2] _t1254#3 = <tensor[2]>[_t1250,_t1252];
          real _t1256#1 = TensorIndex<tensor[3],[0]>(rayVec122B);
          real _t1258#1 = TensorIndex<tensor[3],[1]>(rayVec122B);
          tensor[2] _t125A#3 = <tensor[2]>[_t1256,_t1258];
          tensor[2] op1_e3_l_3125D#1 = λ(T0[],T1[2])<(T0 * T1_{i0})>_{2} (s1239,_t125A);
          tensor[2] startRay125C#4 = λ(T0[2],T1[2])<(T0_{i0} + T1_{i0})>_{2} (_t1254,op1_e3_l_3125D);
          tensor[2] op1_e3_l_31261#1 = λ(T0[],T1[2])<(T0 * T1_{i0})>_{2} (e123B,_t125A);
          tensor[2] endRay1260#1 = λ(T0[2],T1[2])<(T0_{i0} + T1_{i0})>_{2} (_t1254,op1_e3_l_31261);
          femData:Mesh _t1264#13 = ExtractFem<femData:Mesh,femData:MeshCell>(cc123D);
          int _t1266#11 = ExtractFemItem<int,CellIndex(MeshCell)>(cc123D);
          femData:MeshPos callNewtonPos135D#1 = _0A7F_msh_newtonInverse1269 (startRay125C,_t1266,_t1264);
          tensor[2] refPos135E#11 = ExtractFemItem<tensor[2],RefPos(Mesh)>(callNewtonPos135D);
          femData:MeshPos callNewtonPos1363#1 = _0A7F_msh_newtonInverse1269 (endRay1260,_t1266,_t1264);
          tensor[2] refPos1364#4 = ExtractFemItem<tensor[2],RefPos(Mesh)>(callNewtonPos1363);
          string _t1368#1 = "inverses:";
          Print<[string,tensor[2],tensor[2],string]>(_t1368,refPos135E,refPos1364,_t1247);
          femData:FemFunc _t136B#7 = ExtractFem<femData:FemFunc,femData:FuncCell>(fc123F);
          femData:Space _t136D#6 = ExtractFem<femData:Space,femData:FemFunc>(_t136B);
          int _t136F#6 = ExtractFemItem<int,CellIndex(FuncCell)>(fc123F);
          int[6] femIndicies1373#1 = ExtractFemItem2<int,int[6],ExtractIndices(Space)>(_t136D,_t136F);
          tensor[6] femDofs1374#5 = ExtractFemItem2<int[6],tensor[6],ExtractDofsSeq(FemFunc)>(_t136B,femIndicies1373);
          tensor[6] basisResult1375#1 = EvaluateBasis<BasisArray(6)>(refPos135E);
          real faVal1371#2 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[6],T6[2])<Σ(i0=0..5)<((T4_{i0} * T5_{i0}))>(i0=0..5)> (_t136F,_t136D,_t136B,refPos135E,femDofs1374,basisResult1375,refPos135E);
          real _t137B#3 = TensorIndex<tensor[3],[2]>(rayVec122B);
          real _t137D#3 = TensorIndex<tensor[3],[2]>(rayOrig1229);
          real op1_e3_l_81381#1 = λ(T0[],T1[])<(T0 * T1)> (_t137B,s1239);
          real op1_e3_l_91382#1 = λ(T0[],T1[])<(T0) - (T1)> (faVal1371,op1_e3_l_81381);
          real fa137F#10 = λ(T0[],T1[])<(T1) - (T0)> (_t137D,op1_e3_l_91382);
          tensor[6] basisResult1396#1 = EvaluateBasis<BasisArray(6)>(refPos1364);
          real probe_l_71390#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[6],T6[2])<Σ(i0=0..5)<((T4_{i0} * T5_{i0}))>(i0=0..5)> (_t136F,_t136D,_t136B,refPos1364,femDofs1374,basisResult1396,refPos1364);
          real op1_e3_l_81391#1 = λ(T0[],T1[])<(T0 * T1)> (_t137B,e123B);
          real op1_e3_l_91392#1 = λ(T0[],T1[])<(T0) - (T1)> (probe_l_71390,op1_e3_l_81391);
          real fb138F#5 = λ(T0[],T1[])<(T1) - (T0)> (_t137D,op1_e3_l_91392);
          string _t139F#1 = "Vals:";
          tensor[2] _t13A1#1 = <tensor[2]>[fa137F,fb138F];
          Print<[string,tensor[2],string]>(_t139F,_t13A1,_t1247);
          real op1_e3_l_2213AD#1 = λ(T0[],T1[])<(T0) - (T1)> (fa137F,fb138F);
          real _t13A4#1 = λ(T0[])<Abs(T0)> (op1_e3_l_2213AD);
          bool _t13C4#1 = LT<real>(_t13A4,eps120F);
          if _t13C4 then goto ASSIGN16D2 else goto JOIN13E3
        ASSIGN16D2:  preds = [COND13C6]
          real _t13C7#1 = λ(T0[])<Abs(T0)> (fa137F);
          bool _t13D9#1 = GT<real>(_t13C7,eps120F);
          if _t13D9 then goto ASSIGN13DD else goto JOIN13E1
        ASSIGN13DD:  preds = [COND13DB]
          real s13DC#1 = λ(T0[],T1[])<(T0 + T1)> (s1239,eps120F);
          self.s = s13DC;
          active
          goto JOIN13E1
        JOIN13E1:  preds = [*ACTIVE13DF,COND13DB]
          real s13E0#1 = phi(s1239)
          goto JOIN13E3
        JOIN13E3:  preds = [JOIN13E1,COND13C6]
          real s13E2#3 = phi(s13E0,s1239)
          real op1_e3_l_3813ED#1 = λ(T0[],T1[])<(T0 * T1)> (s13E2,fb138F);
          real op1_e3_l_3913EE#1 = λ(T0[],T1[])<(T0 * T1)> (e123B,fa137F);
          real op1_e3_l_4813EF#1 = λ(T0[],T1[])<(T0) - (T1)> (op1_e3_l_3813ED,op1_e3_l_3913EE);
          real op1_e3_l_4913F0#1 = λ(T0[],T1[])<(T0) - (T1)> (fb138F,fa137F);
          real cup13E4#6 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_4813EF,op1_e3_l_4913F0);
          string _t140A#1 = "Mid time:";
          Print<[string,real,string]>(_t140A,cup13E4,_t1247);
          tensor[2] op1_e3_l_53141B#1 = λ(T0[2],T1[])<(T1 * T0_{i0})>_{2} (_t125A,cup13E4);
          tensor[2] midRay140D#4 = λ(T0[2],T1[2])<(T0_{i0} + T1_{i0})>_{2} (_t1254,op1_e3_l_53141B);
          femData:MeshPos callNewtonPos1438#1 = _0A7F_msh_newtonInverse1269 (midRay140D,_t1266,_t1264);
          tensor[2] refPos1439#10 = ExtractFemItem<tensor[2],RefPos(Mesh)>(callNewtonPos1438);
          tensor[6] basisResult1441#1 = EvaluateBasis<BasisArray(6)>(refPos1439);
          real fmVal143D#2 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[6],T6[2])<Σ(i0=0..5)<((T4_{i0} * T5_{i0}))>(i0=0..5)> (_t136F,_t136D,_t136B,refPos1439,femDofs1374,basisResult1441,refPos1439);
          real op1_e3_l_581456#1 = λ(T0[],T1[])<(T0 * T1)> (_t137B,cup13E4);
          real op1_e3_l_591457#1 = λ(T0[],T1[])<(T0) - (T1)> (fmVal143D,op1_e3_l_581456);
          real fm1447#6 = λ(T0[],T1[])<(T1) - (T0)> (_t137D,op1_e3_l_591457);
          string _t1479#1 = "all vals:";
          tensor[3] _t147B#1 = <tensor[3]>[fa137F,fm1447,fb138F];
          Print<[string,tensor[3],string]>(_t1479,_t147B,_t1247);
          int _t147E#6 = 1;
          int intersectionItter1480#2 = IAdd(intersectionItter1237,_t147E);
          real _t1482#10 = 0.e0;
          bool _t1484#2 = GT<real>(fa137F,_t1482);
          if _t1484 then goto JOIN1489 else goto ASSIGN168C
        JOIN1489:  preds = [COND1486,JOIN1691]
          int _t1487#1 = phi(_t147E,_t1488)
          bool _t148A#2 = GT<real>(fm1447,_t1482);
          if _t148A then goto JOIN148F else goto ASSIGN1684
        JOIN148F:  preds = [COND148C,JOIN1689]
          int _t148D#1 = phi(_t147E,_t148E)
          int _t1490#1 = IMul(_t1487,_t148D);
          int _t1492#7 = 0;
          bool _t1494#1 = LT<int>(_t1490,_t1492);
          if _t1494 then goto JOIN149A else goto COND1669
        JOIN149A:  preds = [COND1496,JOIN1676]
          real e1497#4 = phi(cup13E4,e123B)
          real s1498#5 = phi(s13E2,s1499)
          string _t149B#1 = "new interval:";
          tensor[2] _t149D#1 = <tensor[2]>[s1498,e1497];
          Print<[string,tensor[2],string]>(_t149B,_t149D,_t1247);
          real _t14A0#2 = λ(T0[])<Abs(T0)> (fa137F);
          bool _t14B2#2 = LT<real>(_t14A0,eps120F);
          if _t14B2 then goto ASSIGN14B6 else goto ASSIGN16DC
        ASSIGN14B6:  preds = [COND14B4]
          bool _t14B5#1 = true;
          goto JOIN14B9
        JOIN14B9:  preds = [ASSIGN14B6,JOIN1665]
          bool _t14B7#1 = phi(_t14B5,_t14B8)
          if _t14B7 then goto ASSIGN16DD else goto ASSIGN1629
        ASSIGN16DD:  preds = [COND14BA]
          real _t14BB#2 = λ(T0[])<Abs(T0)> (fm1447);
          bool _t14EF#1 = GT<real>(_t14BB,eps120F);
          if _t14EF then goto ASSIGN14F3 else goto ASSIGN1627
        ASSIGN14F3:  preds = [COND14F1]
          bool _t14F2#1 = GT<real>(_t14A0,eps120F);
          goto JOIN14F6
        JOIN14F6:  preds = [ASSIGN14F3,ASSIGN1627]
          bool _t14F4#1 = phi(_t14F2,_t14F5)
          if _t14F4 then goto ASSIGN14F9 else goto ASSIGN1529
        ASSIGN14F9:  preds = [COND14F7]
          int itter14F8#4 = IAdd(itter1235,_t147E);
          bool _t14FA#1 = GTE<int>(itter14F8,len1233);
          if _t14FA then goto ASSIGN14FE else goto JOIN1505
        ASSIGN14FE:  preds = [COND14FC]
          string _t14FD#1 = "Fin pixel=============================\n";
          Print<[string]>(_t14FD);
          self.itter = itter14F8;
          self.intersectionItter = _t1492;
          self.s = s1498;
          self.e = e1497;
          stabilize
          goto JOIN1505
        JOIN1505:  preds = [*STABILIZE1504,COND14FC]
          int _t1506#2 = IAdd(offset1231,itter14F8);
          tensor[2] interval1508#3 = Subscript<tensor[2][]>(times1211,_t1506);
          int _t150A#1 = Subscript<int[]>(cells1213,_t1506);
          femData:MeshCell cc150C#2 = Subscript<femData:MeshCell[]>(0cell_a120B,_t150A);
          real s150E#1 = TensorIndex<tensor[2],[0]>(interval1508);
          real e1510#1 = TensorIndex<tensor[2],[1]>(interval1508);
          int _t1512#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc150C);
          femData:FuncCell _t1514#1 = LoadFem<femData:FuncCell>(c120D,_t1512);
          string _t1516#1 = "Next interval!\n";
          Print<[string]>(_t1516);
          self.itter = itter14F8;
          self.intersectionItter = _t1492;
          self.interval = interval1508;
          self.s = s150E;
          self.e = e1510;
          self.cc = cc150C;
          self.fc = _t1514;
          active
          goto JOIN1521
        JOIN1521:  preds = [*ACTIVE1520,*STABILIZE161F]
          goto JOIN1523
        JOIN1523:  preds = [*JOIN1521,MASSIGN162A]
          int intersectionItter1522#1 = phi(intersectionItter1480)
          self.intersectionItter = intersectionItter1522;
          self.s = s1498;
          self.e = e1497;
          active
        ASSIGN1529:  preds = [COND14F7]
          tensor[2] grad1528#1 = <tensor[2]>[_t1482,_t1482];
          bool _t152A#1 = LT<real>(_t14BB,eps120F);
          if _t152A then goto ASSIGN16DE else goto JOIN1561
        ASSIGN16DE:  preds = [COND152C]
          tensor[2,6] basisResult153D#1 = EvaluateBasis<BasisArray(2,6)>(refPos1439);
          tensor[2] compositionl152F#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[2 6],T6[2])<Σ(i2=0..5)<((T4_{i2} * T5_{i0,i2}))>(i2=0..5)>_{2} (_t136F,_t136D,_t136B,refPos1439,femDofs1374,basisResult153D,refPos1439);
          int[3] femIndicies153F#1 = ExtractFemItem2<int,int[3],ExtractIndices(Mesh)>(_t1264,_t1266);
          tensor[3,2] femDofs1540#3 = ExtractFemItem2<int[3],tensor[3,2],ExtractDofsSeq(Mesh)>(_t1264,femIndicies153F);
          tensor[2,3] basisResult1541#3 = EvaluateBasis<BasisArray(2,3)>(refPos1439);
          tensor[2,2] probe_l_81530#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i3=0..2)<((T3_{i3,i0} * T4_{i1,i3}))>(i3=0..2)>_{2 2} (_t1266,_t1264,midRay140D,femDofs1540,basisResult1541,refPos1439);
          tensor[2,2] op1_e3_l_91531#1 = λ(T0[2 2])<Σ(i2=0..1)<((ϵ_{ii2,ii0} * T0_{i2,i1}))>(i2=0..1)>_{2 2} (probe_l_81530);
          tensor[2] probe_l_101532#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i2=0..2)<((T3_{i2,i0} * T4_{'0',i2}))>(i2=0..2)>_{2} (_t1266,_t1264,midRay140D,femDofs1540,basisResult1541,refPos1439);
          tensor[2] probe_l_111533#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i2=0..2)<((T3_{i2,i0} * T4_{'1',i2}))>(i2=0..2)>_{2} (_t1266,_t1264,midRay140D,femDofs1540,basisResult1541,refPos1439);
          tensor[2] op1_e3_l_121534#1 = λ(T0[2])<Σ(i1=0..1)<((ϵ_{ii0,ii1} * T0_{i1}))>(i1=0..1)>_{2} (probe_l_111533);
          tensor[2,2] op1_e3_l_131535#1 = λ(T0[2 2])<Σ(i2=0..1)<((ϵ_{ii2,ii0} * T0_{i1,i2}))>(i2=0..1)>_{2 2} (op1_e3_l_91531);
          real op1_e3_l_141536#1 = λ(T0[2],T1[2])<Σ(i0=0..1)<((T0_{i0} * T1_{i0}))>(i0=0..1)> (probe_l_101532,op1_e3_l_121534);
          tensor[2,2] op1_e3_l_151537#1 = λ(T0[2 2],T1[])<(T0_{i0,i1}) / ( T1)>_{2 2} (op1_e3_l_131535,op1_e3_l_141536);
          tensor[2] grad152D#1 = λ(T0[2],T1[2 2])<Σ(i104=0..1)<((T0_{i104} * T1_{i104,i0}))>(i104=0..1)>_{2} (compositionl152F,op1_e3_l_151537);
          goto JOIN1561
        JOIN1561:  preds = [ASSIGN155E,COND152C]
          tensor[2] grad155F#1 = phi(grad152D,grad1528)
          real out1560#1 = phi(fmVal143D,out1241)
          if _t14B2 then goto ASSIGN16E4 else goto JOIN1598
        ASSIGN16E4:  preds = [COND1562]
          tensor[2,6] basisResult1573#1 = EvaluateBasis<BasisArray(2,6)>(refPos135E);
          tensor[2] compositionl1565#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[2 6],T6[2])<Σ(i2=0..5)<((T4_{i2} * T5_{i0,i2}))>(i2=0..5)>_{2} (_t136F,_t136D,_t136B,refPos135E,femDofs1374,basisResult1573,refPos135E);
          int[3] femIndicies1575#1 = ExtractFemItem2<int,int[3],ExtractIndices(Mesh)>(_t1264,_t1266);
          tensor[3,2] femDofs1576#3 = ExtractFemItem2<int[3],tensor[3,2],ExtractDofsSeq(Mesh)>(_t1264,femIndicies1575);
          tensor[2,3] basisResult1577#3 = EvaluateBasis<BasisArray(2,3)>(refPos135E);
          tensor[2,2] probe_l_81566#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i3=0..2)<((T3_{i3,i0} * T4_{i1,i3}))>(i3=0..2)>_{2 2} (_t1266,_t1264,startRay125C,femDofs1576,basisResult1577,refPos135E);
          tensor[2,2] op1_e3_l_91567#1 = λ(T0[2 2])<Σ(i2=0..1)<((ϵ_{ii2,ii0} * T0_{i2,i1}))>(i2=0..1)>_{2 2} (probe_l_81566);
          tensor[2] probe_l_101568#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i2=0..2)<((T3_{i2,i0} * T4_{'0',i2}))>(i2=0..2)>_{2} (_t1266,_t1264,startRay125C,femDofs1576,basisResult1577,refPos135E);
          tensor[2] probe_l_111569#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i2=0..2)<((T3_{i2,i0} * T4_{'1',i2}))>(i2=0..2)>_{2} (_t1266,_t1264,startRay125C,femDofs1576,basisResult1577,refPos135E);
          tensor[2] op1_e3_l_12156A#1 = λ(T0[2])<Σ(i1=0..1)<((ϵ_{ii0,ii1} * T0_{i1}))>(i1=0..1)>_{2} (probe_l_111569);
          tensor[2,2] op1_e3_l_13156B#1 = λ(T0[2 2])<Σ(i2=0..1)<((ϵ_{ii2,ii0} * T0_{i1,i2}))>(i2=0..1)>_{2 2} (op1_e3_l_91567);
          real op1_e3_l_14156C#1 = λ(T0[2],T1[2])<Σ(i0=0..1)<((T0_{i0} * T1_{i0}))>(i0=0..1)> (probe_l_101568,op1_e3_l_12156A);
          tensor[2,2] op1_e3_l_15156D#1 = λ(T0[2 2],T1[])<(T0_{i0,i1}) / ( T1)>_{2 2} (op1_e3_l_13156B,op1_e3_l_14156C);
          tensor[2] grad1563#1 = λ(T0[2],T1[2 2])<Σ(i104=0..1)<((T0_{i104} * T1_{i104,i0}))>(i104=0..1)>_{2} (compositionl1565,op1_e3_l_15156D);
          goto JOIN1598
        JOIN1598:  preds = [ASSIGN1594,COND1562]
          tensor[2] grad1595#3 = phi(grad1563,grad155F)
          real cup1596#1 = phi(s1498,cup13E4)
          real out1597#3 = phi(faVal1371,out1560)
          string _t1599#1 = "Out val:";
          Print<[string,real,string]>(_t1599,out1597,_t1247);
          string _t159C#1 = "Grad val:";
          Print<[string,tensor[2],string]>(_t159C,grad1595,_t1247);
          real _t159F#6 = 0.1e1;
          tensor[3] mcol15A1#1 = <tensor[3]>[_t159F,_t159F,_t159F];
          bool _t15A3#1 = NEQ<real>(cmin1219,cmax121B);
          if _t15A3 then goto ASSIGN16EC else goto JOIN15D1
        ASSIGN16EC:  preds = [COND15A5]
          real _t15A8#2 = -0.1e1;
          real op1_e3_l_515AB#1 = λ(T0[],T1[])<(T1) - (T0)> (cmin1219,out1597);
          real op1_e3_l_615AC#1 = λ(T0[],T1[])<(T1) - (T0)> (cmin1219,cmax121B);
          real op1_e3_l_715AD#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_515AB,op1_e3_l_615AC);
          real op1_e3_l_815AE#1 = λ(T0[],T1[])<(T1) - (T0)> (_t15A8,_t159F);
          real op1_e3_l_915AF#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_715AD,op1_e3_l_815AE);
          real _t15AA#2 = λ(T0[],T1[])<(T0 + T1)> (_t15A8,op1_e3_l_915AF);
          real Mtransform15B7#2 = Transform<IMAGE1D<double[3]>>(cmap16AD);
          real MxPos15B8#1 = λ(T0[],T1[])<(T0 * T1)> (Mtransform15B7,_t15AA);
          real Ttranslate15B9#1 = Translate<IMAGE1D<double[3]>>(cmap16AD);
          real imgPos15BA#2 = λ(T0[],T1[])<(T0 + T1)> (MxPos15B8,Ttranslate15B9);
          real nd15BB#2 = Floor<1>(imgPos15BA);
          real f15BC#1 = λ(T0[],T1[])<(T0) - (T1)> (imgPos15BA,nd15BB);
          int n15BD#1 = RealToInt<1>(nd15BB);
          int idx15BF#3 = n15BD;
          bool isInside16F1#1 = IndexInside<IMAGE1D<double[3]>,2>(idx15BF,cmap16AD);
          if isInside16F1 then goto ASSIGN16F2 else goto ASSIGN16F3
        ASSIGN16F2:  preds = [COND16F5]
          tensor[3,2] ldvox16EF#1 = LoadVoxels<IMAGE1D<double[3]>,2>(cmap16AD,idx15BF);
          goto JOIN16F6
        JOIN16F6:  preds = [ASSIGN16F2,ASSIGN16F3]
          tensor[3,2] ldvox15C0#1 = phi(ldvox16EF,ldvox16F0)
          tensor[2] kernX_15C1#1 = BuildPos<1>(f15BC);
          tensor[2] kevalX_d0_15C2#1 = EvalKernel<2,tent,0>(kernX_15C1);
          tensor[3] mcol15B6#1 = λ(V0(1)[3],H1,T2[1],T3[1 1],V4(1)[3],H5)<Σ(i1=0..1)<((V4_{i0}(1)[i1]# * H5(1)))>(i1=0..1)>_{3} (img1207,_t1209,_t15AA,Mtransform15B7,ldvox15C0,kevalX_d0_15C2);
          goto JOIN15D1
        JOIN15D1:  preds = [ASSIGN15CF,COND15A5]
          tensor[3] mcol15D0#5 = phi(mcol15B6,mcol15A1)
          if light121D then goto ASSIGN15D4 else goto ASSIGN1621
        ASSIGN15D4:  preds = [COND15D2]
          real _t15D3#1 = TensorIndex<tensor[2],[0]>(grad1595);
          real _t15D5#1 = TensorIndex<tensor[2],[1]>(grad1595);
          real _t15D9#1 = -0.1e1;
          tensor[3] N15DB#2 = <tensor[3]>[_t15D3,_t15D5,_t15D9];
          real _t15DD#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (N15DB,L1227);
          real _t15DF#1 = Max<real>(_t1482,_t15DD);
          real op1_e3_l_715E2#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (rayVec122B);
          real op1_e3_l_815E3#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_715E2);
          real op1_e3_l_915E4#1 = λ(T0[])<(1) / ( T0)> (op1_e3_l_815E3);
          tensor[3] op1_e3_l_1015E5#1 = λ(T0[3],T1[])<(T0_{i0} * T1)>_{3} (rayVec122B,op1_e3_l_915E4);
          tensor[3] op1_e3_l_1115E6#1 = λ(T0[3])<Neg(T0_{i0})>_{3} (op1_e3_l_1015E5);
          tensor[3] op1_e3_l_1715E7#3 = λ(T0[3],T1[3])<(T1_{i0} + T0_{i0})>_{3} (L1227,op1_e3_l_1115E6);
          real op1_e3_l_1915E8#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_1715E7,op1_e3_l_1715E7);
          real op1_e3_l_2015E9#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_1915E8);
          real op1_e3_l_2715EA#1 = λ(T0[])<(1) / ( T0)> (op1_e3_l_2015E9);
          real op1_e3_l_2815EB#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (N15DB,op1_e3_l_1715E7);
          real _t15E1#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_2715EA,op1_e3_l_2815EB);
          real _t15F7#1 = Max<real>(_t1482,_t15E1);
          real _t15F9#1 = MathFn<pow>(_t15F7,phongSp1225);
          real op1_e3_l_1715FC#1 = λ(T0[],T1[])<(T1) - (T0)> (camNearVsp122D,cup1596);
          real op1_e3_l_1815FD#1 = λ(T0[],T1[])<(T1) - (T0)> (camNearVsp122D,camFarVsp122F);
          real op1_e3_l_1915FE#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_1715FC,op1_e3_l_1815FD);
          tensor[3] op1_e3_l_2015FF#1 = λ(T0[3],T1[3])<(T1_{i0}) - (T0_{i0})>_{3} (mcnear1215,mcfar1217);
          tensor[3] op1_e3_l_211600#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (op1_e3_l_1915FE,op1_e3_l_2015FF);
          tensor[3] op1_e3_l_221601#2 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (mcnear1215,op1_e3_l_211600);
          tensor[3] op1_e3_l_291602#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (phongKa121F,mcol15D0);
          tensor[3] op1_e3_l_301603#1 = λ(T0[3],T1[],T2[],T3[3])<(T1 * T2 * T0_{i0} * T3_{i0})>_{3} (mcol15D0,_t15DF,phongKd1221,op1_e3_l_221601);
          tensor[3] op1_e3_l_311604#1 = λ(T0[],T1[],T2[3])<(T0 * T1 * T2_{i0})>_{3} (_t15F9,phongKs1223,op1_e3_l_221601);
          tensor[3] fin15FB#3 = λ(T0[3],T1[3],T2[3])<(T0_{i0} + T1_{i0} + T2_{i0})>_{3} (op1_e3_l_291602,op1_e3_l_301603,op1_e3_l_311604);
          real _t160F#1 = TensorIndex<tensor[3],[0]>(fin15FB);
          real _t1611#1 = TensorIndex<tensor[3],[1]>(fin15FB);
          real _t1613#1 = TensorIndex<tensor[3],[2]>(fin15FB);
          tensor[4] rgba1615#1 = <tensor[4]>[_t160F,_t1611,_t1613,_t159F];
          goto JOIN1619
        JOIN1619:  preds = [ASSIGN1616,ASSIGN1626]
          tensor[4] rgba1617#1 = phi(rgba1615,rgba1618)
          self.intersectionItter = _t1492;
          self.s = s1498;
          self.e = e1497;
          self.out = out1597;
          self.rgba = rgba1617;
          stabilize
          goto JOIN1521
        ASSIGN1621:  preds = [COND15D2]
          real _t1620#1 = TensorIndex<tensor[3],[0]>(mcol15D0);
          real _t1622#1 = TensorIndex<tensor[3],[1]>(mcol15D0);
          real _t1624#1 = TensorIndex<tensor[3],[2]>(mcol15D0);
          tensor[4] rgba1618#1 = <tensor[4]>[_t1620,_t1622,_t1624,_t159F];
          goto JOIN1619
        ASSIGN16F3:  preds = [COND16F5]
          tensor[3,2] ldvox16F0#1 = LoadVoxelsWithCtl<IMAGE1D<double[3]>,2,clamp>(cmap16AD,idx15BF);
          goto JOIN16F6
        ASSIGN1627:  preds = [COND14F1]
          bool _t14F5#1 = false;
          goto JOIN14F6
        ASSIGN1629:  preds = [COND14BA]
          string _t1628#1 = "=========\n";
          Print<[string]>(_t1628);
          goto JOIN1523
        ASSIGN16DC:  preds = [COND14B4]
          real _t162B#1 = λ(T0[])<Abs(T0)> (fm1447);
          bool _t165F#1 = LT<real>(_t162B,eps120F);
          if _t165F then goto ASSIGN1663 else goto ASSIGN1667
        ASSIGN1663:  preds = [COND1661]
          bool _t1662#1 = true;
          goto JOIN1665
        JOIN1665:  preds = [ASSIGN1663,ASSIGN1668]
          bool _t14B8#1 = phi(_t1662,_t1664)
          goto JOIN14B9
        ASSIGN1667:  preds = [COND1661]
          int _t1666#1 = 32;
          bool _t1664#1 = GT<int>(intersectionItter1480,_t1666);
          goto JOIN1665
        COND1669:  preds = [COND1496]
          if _t1484 then goto JOIN166C else goto ASSIGN167E
        JOIN166C:  preds = [COND1669,JOIN1682]
          int _t166A#1 = phi(_t147E,_t166B)
          if _t148A then goto JOIN1670 else goto ASSIGN1678
        JOIN1670:  preds = [COND166D,JOIN167C]
          int _t166E#1 = phi(_t147E,_t166F)
          int _t1671#1 = IMul(_t166A,_t166E);
          bool _t1673#1 = GT<int>(_t1671,_t1492);
          if _t1673 then goto JOIN1676 else goto JOIN1676
        JOIN1676:  preds = [COND1675,COND1675]
          real s1499#1 = phi(cup13E4,s13E2)
          goto JOIN149A
        ASSIGN1678:  preds = [COND166D]
          bool _t1677#1 = LT<real>(fm1447,_t1482);
          if _t1677 then goto ASSIGN167B else goto JOIN167C
        ASSIGN167B:  preds = [COND1679]
          int _t167A#1 = -1;
          goto JOIN167C
        JOIN167C:  preds = [ASSIGN167B,COND1679]
          int _t166F#1 = phi(_t167A,_t1492)
          goto JOIN1670
        ASSIGN167E:  preds = [COND1669]
          bool _t167D#1 = LT<real>(fa137F,_t1482);
          if _t167D then goto ASSIGN1681 else goto JOIN1682
        ASSIGN1681:  preds = [COND167F]
          int _t1680#1 = -1;
          goto JOIN1682
        JOIN1682:  preds = [ASSIGN1681,COND167F]
          int _t166B#1 = phi(_t1680,_t1492)
          goto JOIN166C
        ASSIGN1684:  preds = [COND148C]
          bool _t1683#1 = LT<real>(fm1447,_t1482);
          if _t1683 then goto ASSIGN1687 else goto ASSIGN168A
        ASSIGN1687:  preds = [COND1685]
          int _t1686#1 = -1;
          goto JOIN1689
        JOIN1689:  preds = [ASSIGN1687,ASSIGN168A]
          int _t148E#1 = phi(_t1686,_t1688)
          goto JOIN148F
        ASSIGN168A:  preds = [COND1685]
          int _t1688#1 = 0;
          goto JOIN1689
        ASSIGN168C:  preds = [COND1486]
          bool _t168B#1 = LT<real>(fa137F,_t1482);
          if _t168B then goto ASSIGN168F else goto ASSIGN1692
        ASSIGN168F:  preds = [COND168D]
          int _t168E#1 = -1;
          goto JOIN1691
        JOIN1691:  preds = [ASSIGN168F,ASSIGN1692]
          int _t1488#1 = phi(_t168E,_t1690)
          goto JOIN1489
        ASSIGN1692:  preds = [COND168D]
          int _t1690#1 = 0;
          goto JOIN1691
    end update
  end ray
## initial strand creation
  GRID(2)
    ENTRY1693:  preds = []
      int iresU1694#1 = globals.iresU0FDC;
      int iresV1696#1 = globals.iresV0FDD;
      int _t1698#2 = 0;
      int _t169A#2 = 1;
      int _t169C#1 = ISub(iresU1694,_t169A);
      int[] _t169E#1 = Range(_t1698,_t169C);
    FOREACH16A1:  preds = [ASSIGN169F,NEXT16AA]
      foreach (vi16A0 in _t169E) on exit goto RETURN16AB
      int _t16A2#1 = ISub(iresV1696,_t169A);
      int[] _t16A4#1 = Range(_t1698,_t16A2);
    FOREACH16A7:  preds = [ASSIGN16A5,NEXT16A9]
      foreach (ui16A6 in _t16A4) on exit goto NEXT16AA
      new ray(ui16A6,vi16A0);
      goto FOREACH16A7
    NEXT16AA:  preds = [FOREACH16A7]
      goto FOREACH16A1
    RETURN16AB:  preds = [FOREACH16A1]
      return
#### end program ####
##### low-ir: after mid-to-low translation ####
## properties
  GlobalInit StrandArray HasStartMethod ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[]) HasInputs HasGlobals
## globals
  input isoval16F7 (isoval) = <default>
  input thick16F8 (thick) = <default>
  input camEye16F9 (camEye) = <default>
  input camAt16FA (camAt) = <default>
  input camUp16FB (camUp) = <default>
  input camFOV16FC (camFOV) = <default>
  input iresU16FD (iresU) = <default>
  input iresV16FE (iresV) = <default>
  input camNear16FF (camNear) = <default>
  input camFar1700 (camFar) = <default>
  input refStep1701 (refStep) = <default>
  input rayStep1702 (rayStep) = <default>
  input a1703 (a) = <no-default>
  input 0b0472_intermedateGlobal1704 (b) = <no-default>
  input 0c0474_intermedateGlobal1705 (c) = <no-default>
  input eps1706 (eps) = <default>
  input indecies1707 (indecies) = <no-default>
  input times1708 (times) = <no-default>
  input cells1709 (cells) = <no-default>
  input mcnear170A (mcnear) = <default>
  input mcfar170B (mcfar) = <default>
  input cmap170C (cmap) = image("/home/teocollin/gitcode/diderot/tests/lipRay/find/cmap.nrrd")
  input cmin170D (cmin) = <default>
  input cmax170E (cmax) = <default>
  input light170F (light) = <default>
  input phongKa1710 (phongKa) = <default>
  input phongKd1711 (phongKd) = <default>
  input phongKs1712 (phongKs) = <default>
  input phongSp1713 (phongSp) = <default>
  input maxAlpha1714 (maxAlpha) = <default>
  input lightVsp1715 (lightVsp) = <default>
  global femData:MeshCell[] 0cell_a1716
  global femData:FemFunc c1717
  global real camNearVsp1718
  global real camFarVsp1719
  global tensor[3] camN171A
  global tensor[3] camU171B
  global tensor[3] camV171C
  global real camVmax171D
  global real camUmax171E
  global tensor[3] L171F
  global image(IMAGE1D<double[3]>) img1720
  global int _t1721
## functions
  function femData:MeshPos _0A7F_msh_newtonInverse1A34 (tensor[2] pos1A35#3, int cellInt1A36#2, femData:Mesh mesh1A37#12) {
    ENTRY1A38:  preds = []
      real _t1A39#2 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
      tensor[2] xn1A3B#3 = <tensor[2]>[_t1A39,_t1A39];
      int _t1A3D#1 = 0;
      int _t1A3F#1 = 16;
      int[] _t1A41#1 = Range(_t1A3D,_t1A3F);
    FOREACH1A44:  preds = [ASSIGN1A42,NEXT1C9B]
      foreach (itter1A43 in _t1A41) on exit goto ASSIGN1CA0
        tensor[2] xn1BBB#3 = phi(xn1A3B,xn1C2F)
      int ilit1A46#1 = 3;
      int mulRes1A47#3 = IMul(cellInt1A36,ilit1A46);
      int ilit1A48#1 = 0;
      int addRes1A49#1 = IAdd(mulRes1A47,ilit1A48);
      int idx1A4A#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(mesh1A37,addRes1A49);
      int ilit1A4B#1 = 1;
      int addRes1A4C#1 = IAdd(mulRes1A47,ilit1A4B);
      int idx1A4D#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(mesh1A37,addRes1A4C);
      int ilit1A4E#1 = 2;
      int addRes1A4F#1 = IAdd(mulRes1A47,ilit1A4E);
      int idx1A50#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(mesh1A37,addRes1A4F);
      int[3] seq1A51#1 = <int[3]>{idx1A4A,idx1A4D,idx1A50};
      int[3] femIndicies1A45#3 = seq1A51;
      int ilit1A60#4 = 0;
      int ilit1A61#4 = 2;
      int idx1A62#1 = Subscript<int>(femIndicies1A45,ilit1A60);
      int mulRes1A63#2 = IMul(ilit1A61,idx1A62);
      int addRes1A64#1 = IAdd(ilit1A60,mulRes1A63);
      int ilit1A65#4 = 1;
      int addRes1A66#1 = IAdd(ilit1A65,mulRes1A63);
      real dof_load1A67#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh1A37,addRes1A64);
      real dof_load1A68#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh1A37,addRes1A66);
      tensor[2] interCons1A69#1 = <tensor[2]>[dof_load1A67,dof_load1A68];
      int idx1A6A#1 = Subscript<int>(femIndicies1A45,ilit1A65);
      int mulRes1A6B#2 = IMul(ilit1A61,idx1A6A);
      int addRes1A6C#1 = IAdd(ilit1A60,mulRes1A6B);
      int addRes1A6D#1 = IAdd(ilit1A65,mulRes1A6B);
      real dof_load1A6E#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh1A37,addRes1A6C);
      real dof_load1A6F#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh1A37,addRes1A6D);
      tensor[2] interCons1A70#1 = <tensor[2]>[dof_load1A6E,dof_load1A6F];
      int idx1A71#1 = Subscript<int>(femIndicies1A45,ilit1A61);
      int mulRes1A72#2 = IMul(ilit1A61,idx1A71);
      int addRes1A73#1 = IAdd(ilit1A60,mulRes1A72);
      int addRes1A74#1 = IAdd(ilit1A65,mulRes1A72);
      real dof_load1A75#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh1A37,addRes1A73);
      real dof_load1A76#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh1A37,addRes1A74);
      tensor[2] interCons1A77#1 = <tensor[2]>[dof_load1A75,dof_load1A76];
      tensor[3,2] dofs1A78#1 = <tensor[3,2]>[interCons1A69,interCons1A70,interCons1A77];
      tensor[3,2] femDofs1A5F#30 = dofs1A78;
      real varAcc1A94#0 = VIndex<2,0>(xn1A3B);
      real varAcc1A95#0 = VIndex<2,1>(xn1A3B);
      real coeff1A96#1 = -0.1e1;
      real one1A97#3 = 0.1e1;
      real prod1A98#2 = RMul(one1A97,one1A97);
      real basisEval1A99#2 = RMul(coeff1A96,prod1A98);
      real basisEval1A9A#2 = RMul(one1A97,prod1A98);
      real basisEval1A9B#2 = 0.e0;
      tensor[3] intermediateCons1A9C#1 = <tensor[3]>[basisEval1A99,basisEval1A9A,basisEval1A9B];
      tensor[3] intermediateCons1A9D#1 = <tensor[3]>[basisEval1A99,basisEval1A9B,basisEval1A9A];
      tensor[2,3] intermediateCons1A9E#1 = <tensor[2,3]>[intermediateCons1A9C,intermediateCons1A9D];
      tensor[2,3] basisResult1A93#12 = intermediateCons1A9E;
      real r1AAC#2 = TensorIndex<tensor[3,2],[0,0]>(femDofs1A5F);
      real r1AAD#2 = TensorIndex<tensor[2,3],[0,0]>(basisResult1A93);
      real r1AAE#1 = RMul(r1AAC,r1AAD);
      real r1AAF#2 = TensorIndex<tensor[3,2],[1,0]>(femDofs1A5F);
      real r1AB0#2 = TensorIndex<tensor[2,3],[0,1]>(basisResult1A93);
      real r1AB1#1 = RMul(r1AAF,r1AB0);
      real r1AB2#2 = TensorIndex<tensor[3,2],[2,0]>(femDofs1A5F);
      real r1AB3#2 = TensorIndex<tensor[2,3],[0,2]>(basisResult1A93);
      real r1AB4#1 = RMul(r1AB2,r1AB3);
      real r1AB5#1 = RAdd(r1AAE,r1AB1);
      real r1AB6#1 = RAdd(r1AB5,r1AB4);
      real r1AB7#2 = TensorIndex<tensor[2,3],[1,0]>(basisResult1A93);
      real r1AB8#1 = RMul(r1AAC,r1AB7);
      real r1AB9#2 = TensorIndex<tensor[2,3],[1,1]>(basisResult1A93);
      real r1ABA#1 = RMul(r1AAF,r1AB9);
      real r1ABB#2 = TensorIndex<tensor[2,3],[1,2]>(basisResult1A93);
      real r1ABC#1 = RMul(r1AB2,r1ABB);
      real r1ABD#1 = RAdd(r1AB8,r1ABA);
      real r1ABE#1 = RAdd(r1ABD,r1ABC);
      tensor[2] tensor1ABF#1 = <tensor[2]>[r1AB6,r1ABE];
      real r1AC0#2 = TensorIndex<tensor[3,2],[0,1]>(femDofs1A5F);
      real r1AC1#1 = RMul(r1AC0,r1AAD);
      real r1AC2#2 = TensorIndex<tensor[3,2],[1,1]>(femDofs1A5F);
      real r1AC3#1 = RMul(r1AC2,r1AB0);
      real r1AC4#2 = TensorIndex<tensor[3,2],[2,1]>(femDofs1A5F);
      real r1AC5#1 = RMul(r1AC4,r1AB3);
      real r1AC6#1 = RAdd(r1AC1,r1AC3);
      real r1AC7#1 = RAdd(r1AC6,r1AC5);
      real r1AC8#1 = RMul(r1AC0,r1AB7);
      real r1AC9#1 = RMul(r1AC2,r1AB9);
      real r1ACA#1 = RMul(r1AC4,r1ABB);
      real r1ACB#1 = RAdd(r1AC8,r1AC9);
      real r1ACC#1 = RAdd(r1ACB,r1ACA);
      tensor[2] tensor1ACD#1 = <tensor[2]>[r1AC7,r1ACC];
      tensor[2,2] probe_l_101AAB#4 = <tensor[2,2]>[tensor1ABF,tensor1ACD];
      real realLit1AF3#4 = 0.e0;
      real r1AF4#2 = TensorIndex<tensor[2,2],[0,0]>(probe_l_101AAB);
      real r1AF5#1 = RMul(realLit1AF3,r1AF4);
      real realLit1AF6#2 = -0.1e1;
      real r1AF7#2 = TensorIndex<tensor[2,2],[1,0]>(probe_l_101AAB);
      real r1AF8#1 = RMul(realLit1AF6,r1AF7);
      real r1AF9#1 = RAdd(r1AF5,r1AF8);
      real r1AFA#2 = TensorIndex<tensor[2,2],[0,1]>(probe_l_101AAB);
      real r1AFB#1 = RMul(realLit1AF3,r1AFA);
      real r1AFC#2 = TensorIndex<tensor[2,2],[1,1]>(probe_l_101AAB);
      real r1AFD#1 = RMul(realLit1AF6,r1AFC);
      real r1AFE#1 = RAdd(r1AFB,r1AFD);
      tensor[2] tensor1AFF#1 = <tensor[2]>[r1AF9,r1AFE];
      real realLit1B00#2 = 0.1e1;
      real r1B01#1 = RMul(realLit1B00,r1AF4);
      real r1B02#1 = RMul(realLit1AF3,r1AF7);
      real r1B03#1 = RAdd(r1B01,r1B02);
      real r1B04#1 = RMul(realLit1B00,r1AFA);
      real r1B05#1 = RMul(realLit1AF3,r1AFC);
      real r1B06#1 = RAdd(r1B04,r1B05);
      tensor[2] tensor1B07#1 = <tensor[2]>[r1B03,r1B06];
      tensor[2,2] op1_e3_l_111AF2#4 = <tensor[2,2]>[tensor1AFF,tensor1B07];
      real r1B20#1 = TensorIndex<tensor[3,2],[0,0]>(femDofs1A5F);
      real r1B21#2 = TensorIndex<tensor[2,3],[0,0]>(basisResult1A93);
      real r1B22#1 = RMul(r1B20,r1B21);
      real r1B23#1 = TensorIndex<tensor[3,2],[1,0]>(femDofs1A5F);
      real r1B24#2 = TensorIndex<tensor[2,3],[0,1]>(basisResult1A93);
      real r1B25#1 = RMul(r1B23,r1B24);
      real r1B26#1 = TensorIndex<tensor[3,2],[2,0]>(femDofs1A5F);
      real r1B27#2 = TensorIndex<tensor[2,3],[0,2]>(basisResult1A93);
      real r1B28#1 = RMul(r1B26,r1B27);
      real r1B29#1 = RAdd(r1B22,r1B25);
      real r1B2A#1 = RAdd(r1B29,r1B28);
      real r1B2B#1 = TensorIndex<tensor[3,2],[0,1]>(femDofs1A5F);
      real r1B2C#1 = RMul(r1B2B,r1B21);
      real r1B2D#1 = TensorIndex<tensor[3,2],[1,1]>(femDofs1A5F);
      real r1B2E#1 = RMul(r1B2D,r1B24);
      real r1B2F#1 = TensorIndex<tensor[3,2],[2,1]>(femDofs1A5F);
      real r1B30#1 = RMul(r1B2F,r1B27);
      real r1B31#1 = RAdd(r1B2C,r1B2E);
      real r1B32#1 = RAdd(r1B31,r1B30);
      tensor[2] probe_l_121B1F#1 = <tensor[2]>[r1B2A,r1B32];
      real r1B49#1 = TensorIndex<tensor[3,2],[0,0]>(femDofs1A5F);
      real r1B4A#2 = TensorIndex<tensor[2,3],[1,0]>(basisResult1A93);
      real r1B4B#1 = RMul(r1B49,r1B4A);
      real r1B4C#1 = TensorIndex<tensor[3,2],[1,0]>(femDofs1A5F);
      real r1B4D#2 = TensorIndex<tensor[2,3],[1,1]>(basisResult1A93);
      real r1B4E#1 = RMul(r1B4C,r1B4D);
      real r1B4F#1 = TensorIndex<tensor[3,2],[2,0]>(femDofs1A5F);
      real r1B50#2 = TensorIndex<tensor[2,3],[1,2]>(basisResult1A93);
      real r1B51#1 = RMul(r1B4F,r1B50);
      real r1B52#1 = RAdd(r1B4B,r1B4E);
      real r1B53#1 = RAdd(r1B52,r1B51);
      real r1B54#1 = TensorIndex<tensor[3,2],[0,1]>(femDofs1A5F);
      real r1B55#1 = RMul(r1B54,r1B4A);
      real r1B56#1 = TensorIndex<tensor[3,2],[1,1]>(femDofs1A5F);
      real r1B57#1 = RMul(r1B56,r1B4D);
      real r1B58#1 = TensorIndex<tensor[3,2],[2,1]>(femDofs1A5F);
      real r1B59#1 = RMul(r1B58,r1B50);
      real r1B5A#1 = RAdd(r1B55,r1B57);
      real r1B5B#1 = RAdd(r1B5A,r1B59);
      tensor[2] probe_l_131B48#2 = <tensor[2]>[r1B53,r1B5B];
      real realLit1B72#2 = 0.e0;
      real r1B73#2 = TensorIndex<tensor[2],[0]>(probe_l_131B48);
      real r1B74#1 = RMul(realLit1B72,r1B73);
      real realLit1B75#1 = 0.1e1;
      real r1B76#2 = TensorIndex<tensor[2],[1]>(probe_l_131B48);
      real r1B77#1 = RMul(realLit1B75,r1B76);
      real r1B78#1 = RAdd(r1B74,r1B77);
      real realLit1B79#1 = -0.1e1;
      real r1B7A#1 = RMul(realLit1B79,r1B73);
      real r1B7B#1 = RMul(realLit1B72,r1B76);
      real r1B7C#1 = RAdd(r1B7A,r1B7B);
      tensor[2] op1_e3_l_141B71#1 = <tensor[2]>[r1B78,r1B7C];
      real realLit1B8B#4 = 0.e0;
      real r1B8C#2 = TensorIndex<tensor[2,2],[0,0]>(op1_e3_l_111AF2);
      real r1B8D#1 = RMul(realLit1B8B,r1B8C);
      real realLit1B8E#2 = -0.1e1;
      real r1B8F#2 = TensorIndex<tensor[2,2],[0,1]>(op1_e3_l_111AF2);
      real r1B90#1 = RMul(realLit1B8E,r1B8F);
      real r1B91#1 = RAdd(r1B8D,r1B90);
      real r1B92#2 = TensorIndex<tensor[2,2],[1,0]>(op1_e3_l_111AF2);
      real r1B93#1 = RMul(realLit1B8B,r1B92);
      real r1B94#2 = TensorIndex<tensor[2,2],[1,1]>(op1_e3_l_111AF2);
      real r1B95#1 = RMul(realLit1B8E,r1B94);
      real r1B96#1 = RAdd(r1B93,r1B95);
      tensor[2] tensor1B97#1 = <tensor[2]>[r1B91,r1B96];
      real realLit1B98#2 = 0.1e1;
      real r1B99#1 = RMul(realLit1B98,r1B8C);
      real r1B9A#1 = RMul(realLit1B8B,r1B8F);
      real r1B9B#1 = RAdd(r1B99,r1B9A);
      real r1B9C#1 = RMul(realLit1B98,r1B92);
      real r1B9D#1 = RMul(realLit1B8B,r1B94);
      real r1B9E#1 = RAdd(r1B9C,r1B9D);
      tensor[2] tensor1B9F#1 = <tensor[2]>[r1B9B,r1B9E];
      tensor[2,2] op1_e3_l_151B8A#4 = <tensor[2,2]>[tensor1B97,tensor1B9F];
      real op1_e3_l_161BB7#4 = VDot<2>(probe_l_121B1F,op1_e3_l_141B71);
      real varAcc1BBC#1 = VIndex<2,0>(xn1BBB);
      real varAcc1BBD#1 = VIndex<2,1>(xn1BBB);
      real coeff1BBE#2 = -0.1e1;
      real iden1BBF#1 = varAcc1BBC;
      real one1BC0#7 = 0.1e1;
      real prod1BC1#2 = RMul(iden1BBF,one1BC0);
      real iden1BC2#1 = varAcc1BBD;
      real prod1BC3#2 = RMul(one1BC0,iden1BC2);
      real prod1BC4#1 = RMul(one1BC0,one1BC0);
      real mult1BC5#1 = RMul(one1BC0,prod1BC4);
      real mult1BC6#1 = RMul(coeff1BBE,prod1BC3);
      real mult1BC7#1 = RMul(coeff1BBE,prod1BC1);
      real sum1BC8#1 = RAdd(mult1BC6,mult1BC7);
      real sum1BC9#1 = RAdd(mult1BC5,sum1BC8);
      real intermediate1BCA#1 = sum1BC9;
      real basisEval1BCB#1 = RMul(one1BC0,prod1BC1);
      real basisEval1BCC#1 = RMul(one1BC0,prod1BC3);
      tensor[3] intermediateCons1BCD#1 = <tensor[3]>[intermediate1BCA,basisEval1BCB,basisEval1BCC];
      tensor[3] basisResult1BBA#6 = intermediateCons1BCD;
      real r1BE2#1 = TensorIndex<tensor[3,2],[0,0]>(femDofs1A5F);
      real r1BE3#2 = TensorIndex<tensor[3],[0]>(basisResult1BBA);
      real r1BE4#1 = RMul(r1BE2,r1BE3);
      real r1BE5#1 = TensorIndex<tensor[3,2],[1,0]>(femDofs1A5F);
      real r1BE6#2 = TensorIndex<tensor[3],[1]>(basisResult1BBA);
      real r1BE7#1 = RMul(r1BE5,r1BE6);
      real r1BE8#1 = TensorIndex<tensor[3,2],[2,0]>(femDofs1A5F);
      real r1BE9#2 = TensorIndex<tensor[3],[2]>(basisResult1BBA);
      real r1BEA#1 = RMul(r1BE8,r1BE9);
      real r1BEB#1 = RAdd(r1BE4,r1BE7);
      real r1BEC#1 = RAdd(r1BEB,r1BEA);
      real r1BED#1 = TensorIndex<tensor[3,2],[0,1]>(femDofs1A5F);
      real r1BEE#1 = RMul(r1BED,r1BE3);
      real r1BEF#1 = TensorIndex<tensor[3,2],[1,1]>(femDofs1A5F);
      real r1BF0#1 = RMul(r1BEF,r1BE6);
      real r1BF1#1 = TensorIndex<tensor[3,2],[2,1]>(femDofs1A5F);
      real r1BF2#1 = RMul(r1BF1,r1BE9);
      real r1BF3#1 = RAdd(r1BEE,r1BF0);
      real r1BF4#1 = RAdd(r1BF3,r1BF2);
      tensor[2] probe_l_171BE1#1 = <tensor[2]>[r1BEC,r1BF4];
      real r1C0B#1 = TensorIndex<tensor[2,2],[0,0]>(op1_e3_l_151B8A);
      real r1C0C#1 = RDiv(r1C0B,op1_e3_l_161BB7);
      real r1C0D#1 = TensorIndex<tensor[2,2],[0,1]>(op1_e3_l_151B8A);
      real r1C0E#1 = RDiv(r1C0D,op1_e3_l_161BB7);
      tensor[2] tensor1C0F#1 = <tensor[2]>[r1C0C,r1C0E];
      real r1C10#1 = TensorIndex<tensor[2,2],[1,0]>(op1_e3_l_151B8A);
      real r1C11#1 = RDiv(r1C10,op1_e3_l_161BB7);
      real r1C12#1 = TensorIndex<tensor[2,2],[1,1]>(op1_e3_l_151B8A);
      real r1C13#1 = RDiv(r1C12,op1_e3_l_161BB7);
      tensor[2] tensor1C14#1 = <tensor[2]>[r1C11,r1C13];
      tensor[2,2] op1_e3_l_181C0A#4 = <tensor[2,2]>[tensor1C0F,tensor1C14];
      tensor[2] op1_e3_l_191C21#2 = VSub<2>(probe_l_171BE1,pos1A35);
      tensor[2] projParam1C25#1 = ProjectLast<tensor[2,2],[0]>(op1_e3_l_181C0A);
      real vdot1C26#1 = VDot<2>(projParam1C25,op1_e3_l_191C21);
      tensor[2] projParam1C27#1 = ProjectLast<tensor[2,2],[1]>(op1_e3_l_181C0A);
      real vdot1C28#1 = VDot<2>(projParam1C27,op1_e3_l_191C21);
      tensor[2] op1_e3_l_201C24#1 = <tensor[2]>[vdot1C26,vdot1C28];
      tensor[2] xn1C2F#4 = VSub<2>(xn1BBB,op1_e3_l_201C24);
      real _t1C32#2 = 0.1e-7;
      real _t1C34#1 = RMul(_t1C32,_t1C32);
      real r1C38#1 = TensorIndex<tensor[3,2],[0,0]>(femDofs1A5F);
      real r1C39#2 = TensorIndex<tensor[3],[0]>(basisResult1BBA);
      real r1C3A#1 = RMul(r1C38,r1C39);
      real r1C3B#1 = TensorIndex<tensor[3,2],[1,0]>(femDofs1A5F);
      real r1C3C#2 = TensorIndex<tensor[3],[1]>(basisResult1BBA);
      real r1C3D#1 = RMul(r1C3B,r1C3C);
      real r1C3E#1 = TensorIndex<tensor[3,2],[2,0]>(femDofs1A5F);
      real r1C3F#2 = TensorIndex<tensor[3],[2]>(basisResult1BBA);
      real r1C40#1 = RMul(r1C3E,r1C3F);
      real r1C41#1 = RAdd(r1C3A,r1C3D);
      real r1C42#1 = RAdd(r1C41,r1C40);
      real r1C43#1 = TensorIndex<tensor[3,2],[0,1]>(femDofs1A5F);
      real r1C44#1 = RMul(r1C43,r1C39);
      real r1C45#1 = TensorIndex<tensor[3,2],[1,1]>(femDofs1A5F);
      real r1C46#1 = RMul(r1C45,r1C3C);
      real r1C47#1 = TensorIndex<tensor[3,2],[2,1]>(femDofs1A5F);
      real r1C48#1 = RMul(r1C47,r1C3F);
      real r1C49#1 = RAdd(r1C44,r1C46);
      real r1C4A#1 = RAdd(r1C49,r1C48);
      tensor[2] probe_l_251C37#1 = <tensor[2]>[r1C42,r1C4A];
      tensor[2] op1_e3_l_271C60#2 = VSub<2>(probe_l_251C37,pos1A35);
      tensor[2] projParam1C64#1 = ProjectLast<tensor[2,2],[0]>(op1_e3_l_181C0A);
      real vdot1C65#1 = VDot<2>(projParam1C64,op1_e3_l_271C60);
      tensor[2] projParam1C66#1 = ProjectLast<tensor[2,2],[1]>(op1_e3_l_181C0A);
      real vdot1C67#1 = VDot<2>(projParam1C66,op1_e3_l_271C60);
      tensor[2] op1_e3_l_381C63#2 = <tensor[2]>[vdot1C65,vdot1C67];
      real _t1C6E#1 = VDot<2>(op1_e3_l_381C63,op1_e3_l_381C63);
      bool _t1C71#1 = GTE<real>(_t1C34,_t1C6E);
      if _t1C71 then goto ASSIGN1C75 else goto JOIN1C9A
    ASSIGN1C75:  preds = [COND1C73]
      real _t1C74#3 = 0.1e1;
      real _t1C76#3 = 0.1e-8;
      real _t1C78#1 = RAdd(_t1C74,_t1C76);
      tensor[2] _t1C7B#1 = <tensor[2]>[_t1C74,_t1C74];
      real _t1C7D#1 = VDot<2>(_t1C7B,xn1C2F);
      bool _t1C80#1 = GT<real>(_t1C78,_t1C7D);
      tensor[2] _t1C82#1 = <tensor[2]>[_t1C76,_t1C76];
      tensor[2] _t1C84#2 = VAdd<2>(_t1C82,xn1C2F);
      real _t1C87#1 = VIndex<2,0>(_t1C84);
      real _t1C89#2 = -0.e0;
      bool _t1C8B#1 = GT<real>(_t1C87,_t1C89);
      real _t1C8D#1 = VIndex<2,1>(_t1C84);
      bool _t1C8F#1 = GT<real>(_t1C8D,_t1C89);
      bool _t1C91#1 = BAnd(_t1C8B,_t1C8F);
      bool _t1C93#1 = BAnd(_t1C80,_t1C91);
      if _t1C93 then goto ASSIGN1C97 else goto ASSIGN1C9D
    ASSIGN1C97:  preds = [COND1C95]
      femData:MeshPos _t1C96#1 = ExtractFemItemN<[femData:Mesh,int,tensor[2],tensor[2]],femData:MeshPos,AllBuild(MeshPos),0000,"",[],int>(mesh1A37,cellInt1A36,xn1C2F,pos1A35);
      return _t1C96
      goto JOIN1C99
    JOIN1C99:  preds = [*RETURN(_t1C96)1C98,*RETURN(_t1C9C)1C9E]
      goto JOIN1C9A
    JOIN1C9A:  preds = [*JOIN1C99,COND1C73]
      goto FOREACH1A44
    ASSIGN1C9D:  preds = [COND1C95]
      femData:MeshPos _t1C9C#1 = ExtractFemItemN<[femData:Mesh],femData:MeshPos,InvalidBuild(MeshPos),0000,"",[],int>(mesh1A37);
      return _t1C9C
      goto JOIN1C99
    ASSIGN1CA0:  preds = [FOREACH1A44]
      femData:MeshPos _t1C9F#1 = ExtractFemItemN<[femData:Mesh],femData:MeshPos,InvalidBuild(MeshPos),0000,"",[],int>(mesh1A37);
      return _t1C9F
}
## input initialization
  ENTRY1722:  preds = []
    real isoval1723#1 = 0.2e0;
    globals.isoval16F7 = isoval1723;
    real thick1726#1 = 0.7e-1;
    globals.thick16F8 = thick1726;
    real _t1729#2 = 0.3e1;
    real _t172B#1 = -0.3e1;
    tensor[3] camEye172D#1 = <tensor[3]>[_t1729,_t172B,_t1729];
    globals.camEye16F9 = camEye172D;
    real _t1730#5 = 0.5e0;
    tensor[3] camAt1732#1 = <tensor[3]>[_t1730,_t1730,_t1730];
    globals.camAt16FA = camAt1732;
    real _t1735#4 = 0.e0;
    real _t1737#7 = 0.1e1;
    tensor[3] camUp1739#2 = <tensor[3]>[_t1735,_t1735,_t1737];
    globals.camUp16FB = camUp1739;
    real camFOV173C#1 = 0.137e2;
    globals.camFOV16FC = camFOV173C;
    int iresU173F#2 = 10;
    globals.iresU16FD = iresU173F;
    globals.iresV16FE = iresU173F;
    real camNear1743#1 = -0.2e1;
    globals.camNear16FF = camNear1743;
    real camFar1746#1 = 0.5e1;
    globals.camFar1700 = camFar1746;
    globals.refStep1701 = _t1737;
    real rayStep174A#1 = 0.1e-1;
    globals.rayStep1702 = rayStep174A;
    real eps174D#1 = 0.1e-5;
    globals.eps1706 = eps174D;
    tensor[3] mcnear1750#2 = <tensor[3]>[_t1737,_t1737,_t1737];
    globals.mcnear170A = mcnear1750;
    globals.mcfar170B = mcnear1750;
    globals.cmin170D = _t1735;
    globals.cmax170E = _t1737;
    bool light1756#1 = true;
    globals.light170F = light1756;
    globals.phongKa1710 = _t1730;
    globals.phongKd1711 = _t1730;
    globals.phongKs1712 = _t1735;
    real phongSp175C#1 = 0.6e2;
    globals.phongSp1713 = phongSp175C;
    globals.maxAlpha1714 = _t1737;
    globals.lightVsp1715 = camUp1739;
    return
## global-variable initialization
  ENTRY1762:  preds = []
    tensor[3] camEye1763#1 = globals.camEye16F9;
    tensor[3] camAt1765#1 = globals.camAt16FA;
    tensor[3] camUp1767#3 = globals.camUp16FB;
    real camFOV1769#1 = globals.camFOV16FC;
    int iresU176B#1 = globals.iresU16FD;
    int iresV176D#1 = globals.iresV16FE;
    real camNear176F#1 = globals.camNear16FF;
    real camFar1771#1 = globals.camFar1700;
    femData:Mesh a1773#3 = globals.a1703;
    femData:Space 0b0472_intermedateGlobal1775#1 = globals.0b0472_intermedateGlobal1704;
    femData:FemFunc 0c0474_intermedateGlobal1777#1 = globals.0c0474_intermedateGlobal1705;
    image(IMAGE1D<double[3]>) cmap1779#1 = globals.cmap170C;
    tensor[3] lightVsp177B#5 = globals.lightVsp1715;
    int _t177D#1 = 0;
    int _t177F#1 = 1;
    int _t1781#1 = ExtractFemItem<int,NumCell(Mesh)>(a1773);
    int _t1783#1 = ISub(_t1781,_t177F);
    int[] _t1785#1 = Range(_t177D,_t1783);
    femData:MeshCell[] _t1787#1 = <femData:MeshCell[]>{};
  FOREACH178A:  preds = [ASSIGN1788,NEXT1790]
    foreach (_t1789 in _t1785) on exit goto GASSIGN1791
      femData:MeshCell[] _t178E#2 = phi(_t1787,_t178D)
    femData:MeshCell _t178B#1 = LoadFem<femData:MeshCell>(a1773,_t1789);
    femData:MeshCell[] _t178D#1 = Append<femData:MeshCell>(_t178E,_t178B);
    goto FOREACH178A
  GASSIGN1791:  preds = [FOREACH178A]
    globals.0cell_a1716 = _t178E;
    femData:Space b1792#1 = LoadFem<femData:Space>(0b0472_intermedateGlobal1775,a1773);
    femData:FemFunc c1794#1 = LoadFem<femData:FemFunc>(0c0474_intermedateGlobal1777,b1792);
    globals.c1717 = c1794;
    tensor[3] op1_e3_l_31797#9 = VSub<3>(camAt1765,camEye1763);
    real op1_e3_l_5179A#1 = VDot<3>(op1_e3_l_31797,op1_e3_l_31797);
    real op1_e3_l_6179D#5 = Sqrt(op1_e3_l_5179A);
    real camNearVsp17A0#1 = RAdd(camNear176F,op1_e3_l_6179D);
    globals.camNearVsp1718 = camNearVsp17A0;
    real camFarVsp17A4#1 = RAdd(camFar1771,op1_e3_l_6179D);
    globals.camFarVsp1719 = camFarVsp17A4;
    real realLit17A9#1 = 0.1e1;
    real op1_e3_l_917A8#6 = RDiv(realLit17A9,op1_e3_l_6179D);
    tensor[3] camN17AD#2 = VScale<3>(op1_e3_l_917A8,op1_e3_l_31797);
    globals.camN171A = camN17AD;
    real realLit17B2#3 = 0.e0;
    real r17B3#3 = TensorIndex<tensor[3],[0]>(camUp1767);
    real r17B4#3 = RMul(realLit17B2,r17B3);
    real r17B5#3 = TensorIndex<tensor[3],[1]>(camUp1767);
    real r17B6#3 = RMul(realLit17B2,r17B5);
    real r17B7#3 = TensorIndex<tensor[3],[2]>(camUp1767);
    real r17B8#5 = RMul(realLit17B2,r17B7);
    real r17B9#3 = RAdd(r17B4,r17B6);
    real r17BA#3 = RAdd(r17B9,r17B8);
    real realLit17BB#3 = 0.1e1;
    real r17BC#1 = RMul(realLit17BB,r17B7);
    real r17BD#1 = RAdd(r17B9,r17BC);
    real realLit17BE#3 = -0.1e1;
    real r17BF#1 = RMul(realLit17BE,r17B5);
    real r17C0#1 = RAdd(r17B4,r17BF);
    real r17C1#1 = RAdd(r17C0,r17B8);
    tensor[3] tensor17C2#1 = <tensor[3]>[r17BA,r17BD,r17C1];
    real r17C3#1 = RMul(realLit17BE,r17B7);
    real r17C4#1 = RAdd(r17B9,r17C3);
    real r17C5#1 = RMul(realLit17BB,r17B3);
    real r17C6#1 = RAdd(r17C5,r17B6);
    real r17C7#1 = RAdd(r17C6,r17B8);
    tensor[3] tensor17C8#1 = <tensor[3]>[r17C4,r17BA,r17C7];
    real r17C9#1 = RMul(realLit17BB,r17B5);
    real r17CA#1 = RAdd(r17B4,r17C9);
    real r17CB#1 = RAdd(r17CA,r17B8);
    real r17CC#1 = RMul(realLit17BE,r17B3);
    real r17CD#1 = RAdd(r17CC,r17B6);
    real r17CE#1 = RAdd(r17CD,r17B8);
    tensor[3] tensor17CF#1 = <tensor[3]>[r17CB,r17CE,r17BA];
    tensor[3,3] op1_e3_l_1517B1#3 = <tensor[3,3]>[tensor17C2,tensor17C8,tensor17CF];
    tensor[3] projParam17F1#1 = ProjectLast<tensor[3,3],[0]>(op1_e3_l_1517B1);
    real vdot17F2#1 = VDot<3>(op1_e3_l_31797,projParam17F1);
    tensor[3] projParam17F3#1 = ProjectLast<tensor[3,3],[1]>(op1_e3_l_1517B1);
    real vdot17F4#1 = VDot<3>(op1_e3_l_31797,projParam17F3);
    tensor[3] projParam17F5#1 = ProjectLast<tensor[3,3],[2]>(op1_e3_l_1517B1);
    real vdot17F6#1 = VDot<3>(op1_e3_l_31797,projParam17F5);
    tensor[3] op1_e3_l_1717F0#6 = <tensor[3]>[vdot17F2,vdot17F4,vdot17F6];
    real op1_e3_l_3417FF#1 = VDot<3>(op1_e3_l_1717F0,op1_e3_l_1717F0);
    real r1803#1 = RMul(op1_e3_l_917A8,op1_e3_l_917A8);
    real op1_e3_l_351802#1 = RMul(r1803,op1_e3_l_3417FF);
    real op1_e3_l_361807#1 = Sqrt(op1_e3_l_351802);
    tensor[3] op1_e3_l_37180A#1 = VScale<3>(op1_e3_l_917A8,op1_e3_l_1717F0);
    real realLit180E#1 = 0.1e1;
    real op1_e3_l_38180D#2 = RDiv(realLit180E,op1_e3_l_361807);
    tensor[3] camU1812#2 = VScale<3>(op1_e3_l_38180D,op1_e3_l_37180A);
    globals.camU171B = camU1812;
    real realLit1817#3 = 0.e0;
    real r1818#3 = TensorIndex<tensor[3],[0]>(op1_e3_l_31797);
    real r1819#3 = RMul(realLit1817,r1818);
    real r181A#3 = TensorIndex<tensor[3],[1]>(op1_e3_l_31797);
    real r181B#3 = RMul(realLit1817,r181A);
    real r181C#3 = TensorIndex<tensor[3],[2]>(op1_e3_l_31797);
    real r181D#5 = RMul(realLit1817,r181C);
    real r181E#3 = RAdd(r1819,r181B);
    real r181F#3 = RAdd(r181E,r181D);
    real realLit1820#3 = 0.1e1;
    real r1821#1 = RMul(realLit1820,r181C);
    real r1822#1 = RAdd(r181E,r1821);
    real realLit1823#3 = -0.1e1;
    real r1824#1 = RMul(realLit1823,r181A);
    real r1825#1 = RAdd(r1819,r1824);
    real r1826#1 = RAdd(r1825,r181D);
    tensor[3] tensor1827#1 = <tensor[3]>[r181F,r1822,r1826];
    real r1828#1 = RMul(realLit1823,r181C);
    real r1829#1 = RAdd(r181E,r1828);
    real r182A#1 = RMul(realLit1820,r1818);
    real r182B#1 = RAdd(r182A,r181B);
    real r182C#1 = RAdd(r182B,r181D);
    tensor[3] tensor182D#1 = <tensor[3]>[r1829,r181F,r182C];
    real r182E#1 = RMul(realLit1820,r181A);
    real r182F#1 = RAdd(r1819,r182E);
    real r1830#1 = RAdd(r182F,r181D);
    real r1831#1 = RMul(realLit1823,r1818);
    real r1832#1 = RAdd(r1831,r181B);
    real r1833#1 = RAdd(r1832,r181D);
    tensor[3] tensor1834#1 = <tensor[3]>[r1830,r1833,r181F];
    tensor[3,3] op1_e3_l_451816#3 = <tensor[3,3]>[tensor1827,tensor182D,tensor1834];
    tensor[3] projParam1856#1 = ProjectLast<tensor[3,3],[0]>(op1_e3_l_451816);
    real vdot1857#1 = VDot<3>(op1_e3_l_1717F0,projParam1856);
    tensor[3] projParam1858#1 = ProjectLast<tensor[3,3],[1]>(op1_e3_l_451816);
    real vdot1859#1 = VDot<3>(op1_e3_l_1717F0,projParam1858);
    tensor[3] projParam185A#1 = ProjectLast<tensor[3,3],[2]>(op1_e3_l_451816);
    real vdot185B#1 = VDot<3>(op1_e3_l_1717F0,projParam185A);
    tensor[3] op1_e3_l_471855#1 = <tensor[3]>[vdot1857,vdot1859,vdot185B];
    tensor[3] op1_e3_l_501864#3 = VScale<3>(op1_e3_l_917A8,op1_e3_l_471855);
    real r1868#1 = TensorIndex<tensor[3],[0]>(op1_e3_l_501864);
    real r1869#3 = RMul(op1_e3_l_38180D,op1_e3_l_917A8);
    real r186A#1 = RMul(r1869,r1868);
    real r186B#1 = TensorIndex<tensor[3],[1]>(op1_e3_l_501864);
    real r186C#1 = RMul(r1869,r186B);
    real r186D#1 = TensorIndex<tensor[3],[2]>(op1_e3_l_501864);
    real r186E#1 = RMul(r1869,r186D);
    tensor[3] camV1867#2 = <tensor[3]>[r186A,r186C,r186E];
    globals.camV171C = camV1867;
    real _t1879#1 = 0.314159265358979323846264338327950288e1;
    real _t187B#1 = 0.36e3;
    real op1_e3_l_5187D#1 = RMul(camFOV1769,_t1879);
    real op1_e3_l_61880#1 = RDiv(op1_e3_l_5187D,_t187B);
    real op1_e3_l_101883#2 = Tan(op1_e3_l_61880);
    real camVmax1886#1 = RMul(op1_e3_l_101883,op1_e3_l_6179D);
    globals.camVmax171D = camVmax1886;
    real _t188A#1 = IntToReal(iresU176B);
    real _t188C#1 = IntToReal(iresV176D);
    real r188F#1 = RMul(_t188A,op1_e3_l_101883);
    real op1_e3_l_14188E#1 = RMul(r188F,op1_e3_l_6179D);
    real camUmax1893#1 = RDiv(op1_e3_l_14188E,_t188C);
    globals.camUmax171E = camUmax1893;
    int _t1897#1 = 0;
    image(IMAGE1D<double[3]>) img1899#1 = cmap1779;
    tensor[3,3] _t189B#9 = <tensor[3,3]>[camU1812,camV1867,camN17AD];
    real op1_e3_l_3189D#1 = VDot<3>(lightVsp177B,lightVsp177B);
    real op1_e3_l_418A0#1 = Sqrt(op1_e3_l_3189D);
    real realLit18A4#1 = 0.1e1;
    real op1_e3_l_518A3#1 = RDiv(realLit18A4,op1_e3_l_418A0);
    real r18A9#1 = TensorIndex<tensor[3,3],[0,0]>(_t189B);
    real r18AA#3 = TensorIndex<tensor[3],[0]>(lightVsp177B);
    real r18AB#1 = RMul(r18A9,r18AA);
    real r18AC#1 = TensorIndex<tensor[3,3],[1,0]>(_t189B);
    real r18AD#3 = TensorIndex<tensor[3],[1]>(lightVsp177B);
    real r18AE#1 = RMul(r18AC,r18AD);
    real r18AF#1 = TensorIndex<tensor[3,3],[2,0]>(_t189B);
    real r18B0#3 = TensorIndex<tensor[3],[2]>(lightVsp177B);
    real r18B1#1 = RMul(r18AF,r18B0);
    real r18B2#1 = RAdd(r18AB,r18AE);
    real r18B3#1 = RAdd(r18B2,r18B1);
    real r18B4#1 = TensorIndex<tensor[3,3],[0,1]>(_t189B);
    real r18B5#1 = RMul(r18B4,r18AA);
    real r18B6#1 = TensorIndex<tensor[3,3],[1,1]>(_t189B);
    real r18B7#1 = RMul(r18B6,r18AD);
    real r18B8#1 = TensorIndex<tensor[3,3],[2,1]>(_t189B);
    real r18B9#1 = RMul(r18B8,r18B0);
    real r18BA#1 = RAdd(r18B5,r18B7);
    real r18BB#1 = RAdd(r18BA,r18B9);
    real r18BC#1 = TensorIndex<tensor[3,3],[0,2]>(_t189B);
    real r18BD#1 = RMul(r18BC,r18AA);
    real r18BE#1 = TensorIndex<tensor[3,3],[1,2]>(_t189B);
    real r18BF#1 = RMul(r18BE,r18AD);
    real r18C0#1 = TensorIndex<tensor[3,3],[2,2]>(_t189B);
    real r18C1#1 = RMul(r18C0,r18B0);
    real r18C2#1 = RAdd(r18BD,r18BF);
    real r18C3#1 = RAdd(r18C2,r18C1);
    tensor[3] op1_e3_l_618A8#1 = <tensor[3]>[r18B3,r18BB,r18C3];
    tensor[3] L18E1#1 = VScale<3>(op1_e3_l_518A3,op1_e3_l_618A8);
    globals.L171F = L18E1;
    globals.img1720 = img1899;
    globals._t1721 = _t1897;
    return
## strand
  strand ray (int ui18E8#2, int vi18E9#3)
    state:
      real rayU;
      real rayV;
      tensor[3] UV;
      tensor[3] rayOrig;
      tensor[3] rayVec;
      real camNearVsp;
      real camFarVsp;
      int offset;
      int len;
      int itter;
      int intersectionItter;
      int idx;
      tensor[2] interval;
      real s;
      real e;
      femData:MeshCell cc;
      femData:FuncCell fc;
      output real out;
      output tensor[4] rgba;
    state init
      ENTRY18FD:  preds = []
        tensor[3] camEye18FE#1 = globals.camEye16F9;
        int iresU1900#2 = globals.iresU16FD;
        int iresV1902#3 = globals.iresV16FE;
        femData:MeshCell[] 0cell_a1904#1 = globals.0cell_a1716;
        femData:FemFunc c1906#1 = globals.c1717;
        int[] indecies1908#2 = globals.indecies1707;
        tensor[2][] times190A#1 = globals.times1708;
        real camNearVsp190C#1 = globals.camNearVsp1718;
        real camFarVsp190E#1 = globals.camFarVsp1719;
        tensor[3] camN1910#1 = globals.camN171A;
        tensor[3] camU1912#1 = globals.camU171B;
        tensor[3] camV1914#1 = globals.camV171C;
        real camVmax1916#2 = globals.camVmax171D;
        real camUmax1918#2 = globals.camUmax171E;
        real _t191A#5 = -0.5e0;
        real _t191C#1 = IntToReal(ui18E8);
        real _t191E#1 = IntToReal(iresU1900);
        real _t1920#3 = 0.5e0;
        real op1_e3_l_61922#1 = RSub(_t191E,_t1920);
        real op1_e3_l_71925#1 = RSub(_t191C,_t191A);
        real op1_e3_l_81928#1 = RSub(op1_e3_l_61922,_t191A);
        real op1_e3_l_9192B#2 = RNeg(camUmax1918);
        real op1_e3_l_10192E#1 = RDiv(op1_e3_l_71925,op1_e3_l_81928);
        real op1_e3_l_111931#1 = RSub(camUmax1918,op1_e3_l_9192B);
        real op1_e3_l_131934#1 = RMul(op1_e3_l_10192E,op1_e3_l_111931);
        real rayU1937#2 = RAdd(op1_e3_l_9192B,op1_e3_l_131934);
        real _t193A#1 = IntToReal(vi18E9);
        real _t193C#2 = IntToReal(iresV1902);
        real op1_e3_l_6193E#1 = RSub(_t193C,_t1920);
        real op1_e3_l_71941#2 = RSub(_t193A,_t191A);
        real op1_e3_l_81944#1 = RSub(op1_e3_l_6193E,_t191A);
        real op1_e3_l_91947#3 = RNeg(camVmax1916);
        real op1_e3_l_10194A#1 = RDiv(op1_e3_l_71941,op1_e3_l_81944);
        real op1_e3_l_11194D#2 = RSub(camVmax1916,op1_e3_l_91947);
        real op1_e3_l_131950#1 = RMul(op1_e3_l_10194A,op1_e3_l_11194D);
        real rayV1953#1 = RAdd(op1_e3_l_91947,op1_e3_l_131950);
        real op1_e3_l_231956#1 = RSub(_t193C,_t1920);
        real op1_e3_l_251959#1 = RSub(op1_e3_l_231956,_t191A);
        real op1_e3_l_27195C#1 = RDiv(op1_e3_l_71941,op1_e3_l_251959);
        real op1_e3_l_30195F#1 = RMul(op1_e3_l_27195C,op1_e3_l_11194D);
        real op1_e3_l_311962#1 = RAdd(op1_e3_l_91947,op1_e3_l_30195F);
        tensor[3] op1_e3_l_321965#2 = VScale<3>(rayU1937,camU1912);
        tensor[3] op1_e3_l_331968#2 = VScale<3>(op1_e3_l_311962,camV1914);
        tensor[3] UV196B#1 = VAdd<3>(op1_e3_l_321965,op1_e3_l_331968);
        tensor[3] v196F#1 = VAdd<3>(camEye18FE,op1_e3_l_321965);
        tensor[3] rayOrig196E#1 = VAdd<3>(v196F,op1_e3_l_331968);
        real _t1973#8 = 0.e0;
        tensor[3] _t1975#1 = <tensor[3]>[_t1973,_t1973,_t1973];
        tensor[3] rayVec1977#1 = VAdd<3>(camN1910,_t1975);
        int _t197A#2 = IMul(ui18E8,iresV1902);
        int _t197C#1 = IAdd(_t197A,vi18E9);
        int offset197E#2 = Subscript<int[]>(indecies1908,_t197C);
        int _t1980#1 = IMul(iresU1900,iresV1902);
        int _t1982#1 = IAdd(_t1980,_t197A);
        int _t1984#1 = IAdd(_t1982,vi18E9);
        int len1986#1 = Subscript<int[]>(indecies1908,_t1984);
        int itter1988#3 = 0;
        int idx198A#2 = offset197E;
        tensor[2] interval198C#3 = Subscript<tensor[2][]>(times190A,idx198A);
        real s198E#1 = VIndex<2,0>(interval198C);
        real e1990#1 = VIndex<2,1>(interval198C);
        femData:MeshCell cc1992#2 = Subscript<femData:MeshCell[]>(0cell_a1904,itter1988);
        int _t1994#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc1992);
        femData:FuncCell _t1996#1 = LoadFem<femData:FuncCell>(c1906,_t1994);
        tensor[4] rgba1998#1 = <tensor[4]>[_t1973,_t1973,_t1973,_t1973];
        self.rayU = rayU1937;
        self.rayV = rayV1953;
        self.UV = UV196B;
        self.rayOrig = rayOrig196E;
        self.rayVec = rayVec1977;
        self.camNearVsp = camNearVsp190C;
        self.camFarVsp = camFarVsp190E;
        self.offset = offset197E;
        self.len = len1986;
        self.itter = itter1988;
        self.intersectionItter = itter1988;
        self.idx = idx198A;
        self.interval = interval198C;
        self.s = s198E;
        self.e = e1990;
        self.cc = cc1992;
        self.fc = _t1996;
        self.out = _t1973;
        self.rgba = rgba1998;
        return
    end state init
    method start
        ENTRY19AE:  preds = []
          femData:MeshCell[] 0cell_a19AF#1 = globals.0cell_a1716;
          femData:FemFunc c19B1#1 = globals.c1717;
          int[] cells19B3#1 = globals.cells1709;
          int len19B5#1 = self.len;
          int idx19B7#1 = self.idx;
          int _t19B9#1 = 0;
          bool _t19BB#1 = EQ<int>(len19B5,_t19B9);
          if _t19BB then goto STABILIZE19BE else goto JOIN19BF
        STABILIZE19BE:  preds = [COND19BD]
          stabilize
          goto JOIN19BF
        JOIN19BF:  preds = [*STABILIZE19BE,COND19BD]
          int _t19C0#1 = Subscript<int[]>(cells19B3,idx19B7);
          femData:MeshCell cc19C2#2 = Subscript<femData:MeshCell[]>(0cell_a19AF,_t19C0);
          int _t19C4#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc19C2);
          femData:FuncCell _t19C6#1 = LoadFem<femData:FuncCell>(c19B1,_t19C4);
          self.cc = cc19C2;
          self.fc = _t19C6;
          active
    end start
    method update
        ENTRY19CB:  preds = []
          image(IMAGE1D<double[3]>) cmap19CC#17 = globals.cmap170C;
          image(IMAGE1D<double[3]>) img19CE#0 = globals.img1720;
          int _t19D0#0 = globals._t1721;
          femData:MeshCell[] 0cell_a19D2#1 = globals.0cell_a1716;
          femData:FemFunc c19D4#1 = globals.c1717;
          real eps19D6#8 = globals.eps1706;
          tensor[2][] times19D8#1 = globals.times1708;
          int[] cells19DA#1 = globals.cells1709;
          tensor[3] mcnear19DC#2 = globals.mcnear170A;
          tensor[3] mcfar19DE#1 = globals.mcfar170B;
          real cmin19E0#3 = globals.cmin170D;
          real cmax19E2#2 = globals.cmax170E;
          bool light19E4#1 = globals.light170F;
          real phongKa19E6#1 = globals.phongKa1710;
          real phongKd19E8#1 = globals.phongKd1711;
          real phongKs19EA#1 = globals.phongKs1712;
          real phongSp19EC#1 = globals.phongSp1713;
          tensor[3] L19EE#2 = globals.L171F;
          tensor[3] rayOrig19F0#3 = self.rayOrig;
          tensor[3] rayVec19F2#6 = self.rayVec;
          real camNearVsp19F4#2 = self.camNearVsp;
          real camFarVsp19F6#1 = self.camFarVsp;
          int offset19F8#1 = self.offset;
          int len19FA#1 = self.len;
          int itter19FC#2 = self.itter;
          int intersectionItter19FE#2 = self.intersectionItter;
          real s1A00#6 = self.s;
          real e1A02#5 = self.e;
          femData:MeshCell cc1A04#2 = self.cc;
          femData:FuncCell fc1A06#2 = self.fc;
          real out1A08#1 = self.out;
          string _t1A0A#1 = "Interval:";
          tensor[2] _t1A0C#1 = <tensor[2]>[s1A00,e1A02];
          string _t1A0E#10 = "\n";
          Print<[string,tensor[2],string]>(_t1A0A,_t1A0C,_t1A0E);
          string _t1A11#1 = "inner itter:";
          Print<[string,int,string]>(_t1A11,intersectionItter19FE,_t1A0E);
          string _t1A14#1 = "Outer itter:";
          Print<[string,int,string]>(_t1A14,itter19FC,_t1A0E);
          real _t1A17#1 = VIndex<3,0>(rayOrig19F0);
          real _t1A19#1 = VIndex<3,1>(rayOrig19F0);
          tensor[2] _t1A1B#3 = <tensor[2]>[_t1A17,_t1A19];
          real _t1A1D#1 = VIndex<3,0>(rayVec19F2);
          real _t1A1F#1 = VIndex<3,1>(rayVec19F2);
          tensor[2] _t1A21#3 = <tensor[2]>[_t1A1D,_t1A1F];
          tensor[2] op1_e3_l_31A23#1 = VScale<2>(s1A00,_t1A21);
          tensor[2] startRay1A26#1 = VAdd<2>(_t1A1B,op1_e3_l_31A23);
          tensor[2] op1_e3_l_31A29#1 = VScale<2>(e1A02,_t1A21);
          tensor[2] endRay1A2C#1 = VAdd<2>(_t1A1B,op1_e3_l_31A29);
          femData:Mesh _t1A2F#21 = ExtractFem<femData:Mesh,femData:MeshCell>(cc1A04);
          int _t1A31#5 = ExtractFemItem<int,CellIndex(MeshCell)>(cc1A04);
          femData:MeshPos callNewtonPos1A33#1 = _0A7F_msh_newtonInverse1A34 (startRay1A26,_t1A31,_t1A2F);
          tensor[2] refPos1CA3#7 = ExtractFemItem<tensor[2],RefPos(Mesh)>(callNewtonPos1A33);
          femData:MeshPos callNewtonPos1CA5#1 = _0A7F_msh_newtonInverse1A34 (endRay1A2C,_t1A31,_t1A2F);
          tensor[2] refPos1CA7#3 = ExtractFemItem<tensor[2],RefPos(Mesh)>(callNewtonPos1CA5);
          string _t1CA9#1 = "inverses:";
          Print<[string,tensor[2],tensor[2],string]>(_t1CA9,refPos1CA3,refPos1CA7,_t1A0E);
          femData:FemFunc _t1CAC#7 = ExtractFem<femData:FemFunc,femData:FuncCell>(fc1A06);
          femData:Space _t1CAE#6 = ExtractFem<femData:Space,femData:FemFunc>(_t1CAC);
          int _t1CB0#1 = ExtractFemItem<int,CellIndex(FuncCell)>(fc1A06);
          int ilit1CB3#1 = 6;
          int mulRes1CB4#6 = IMul(_t1CB0,ilit1CB3);
          int ilit1CB5#1 = 0;
          int addRes1CB6#1 = IAdd(mulRes1CB4,ilit1CB5);
          int idx1CB7#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1CAE,addRes1CB6);
          int ilit1CB8#1 = 1;
          int addRes1CB9#1 = IAdd(mulRes1CB4,ilit1CB8);
          int idx1CBA#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1CAE,addRes1CB9);
          int ilit1CBB#1 = 2;
          int addRes1CBC#1 = IAdd(mulRes1CB4,ilit1CBB);
          int idx1CBD#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1CAE,addRes1CBC);
          int ilit1CBE#1 = 3;
          int addRes1CBF#1 = IAdd(mulRes1CB4,ilit1CBE);
          int idx1CC0#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1CAE,addRes1CBF);
          int ilit1CC1#1 = 4;
          int addRes1CC2#1 = IAdd(mulRes1CB4,ilit1CC1);
          int idx1CC3#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1CAE,addRes1CC2);
          int ilit1CC4#1 = 5;
          int addRes1CC5#1 = IAdd(mulRes1CB4,ilit1CC4);
          int idx1CC6#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1CAE,addRes1CC5);
          int[6] seq1CC7#1 = <int[6]>{idx1CB7,idx1CBA,idx1CBD,idx1CC0,idx1CC3,idx1CC6};
          int[6] femIndicies1CB2#6 = seq1CC7;
          int ilit1CDF#7 = 1;
          int ilit1CE0#1 = 0;
          int idx1CE1#1 = Subscript<int>(femIndicies1CB2,ilit1CE0);
          int mulRes1CE2#1 = IMul(ilit1CDF,idx1CE1);
          int idx1CE3#1 = Subscript<int>(femIndicies1CB2,ilit1CDF);
          int mulRes1CE4#1 = IMul(ilit1CDF,idx1CE3);
          int ilit1CE5#1 = 2;
          int idx1CE6#1 = Subscript<int>(femIndicies1CB2,ilit1CE5);
          int mulRes1CE7#1 = IMul(ilit1CDF,idx1CE6);
          int ilit1CE8#1 = 3;
          int idx1CE9#1 = Subscript<int>(femIndicies1CB2,ilit1CE8);
          int mulRes1CEA#1 = IMul(ilit1CDF,idx1CE9);
          int ilit1CEB#1 = 4;
          int idx1CEC#1 = Subscript<int>(femIndicies1CB2,ilit1CEB);
          int mulRes1CED#1 = IMul(ilit1CDF,idx1CEC);
          int ilit1CEE#1 = 5;
          int idx1CEF#1 = Subscript<int>(femIndicies1CB2,ilit1CEE);
          int mulRes1CF0#1 = IMul(ilit1CDF,idx1CEF);
          real dof1CF1#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(_t1CAC,mulRes1CE2);
          real dof1CF2#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(_t1CAC,mulRes1CE4);
          real dof1CF3#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(_t1CAC,mulRes1CE7);
          real dof1CF4#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(_t1CAC,mulRes1CEA);
          real dof1CF5#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(_t1CAC,mulRes1CED);
          real dof1CF6#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(_t1CAC,mulRes1CF0);
          tensor[6] dofs1CF7#1 = <tensor[6]>[dof1CF1,dof1CF2,dof1CF3,dof1CF4,dof1CF5,dof1CF6];
          tensor[6] femDofs1CDE#7 = dofs1CF7;
          real varAcc1D13#2 = VIndex<2,0>(refPos1CA3);
          real varAcc1D14#2 = VIndex<2,1>(refPos1CA3);
          real coeff1D15#2 = 0.2e1;
          real iden1D16#3 = varAcc1D13;
          real prod21D17#1 = RMul(iden1D16,varAcc1D13);
          real one1D18#7 = 0.1e1;
          real prod1D19#2 = RMul(prod21D17,one1D18);
          real coeff1D1A#3 = 0.4e1;
          real iden1D1B#3 = varAcc1D14;
          real prod1D1C#2 = RMul(iden1D16,iden1D1B);
          real coeff1D1D#2 = -0.3e1;
          real prod1D1E#3 = RMul(iden1D16,one1D18);
          real prod21D1F#1 = RMul(iden1D1B,varAcc1D14);
          real prod1D20#1 = RMul(one1D18,prod21D1F);
          real prod1D21#3 = RMul(one1D18,iden1D1B);
          real prod1D22#1 = RMul(one1D18,one1D18);
          real mult1D23#1 = RMul(one1D18,prod1D22);
          real mult1D24#1 = RMul(coeff1D1D,prod1D21);
          real mult1D25#2 = RMul(coeff1D15,prod1D20);
          real mult1D26#1 = RMul(coeff1D1D,prod1D1E);
          real mult1D27#2 = RMul(coeff1D1A,prod1D1C);
          real mult1D28#2 = RMul(coeff1D15,prod1D19);
          real sum1D29#1 = RAdd(mult1D27,mult1D28);
          real sum1D2A#1 = RAdd(mult1D26,sum1D29);
          real sum1D2B#1 = RAdd(mult1D25,sum1D2A);
          real sum1D2C#1 = RAdd(mult1D24,sum1D2B);
          real sum1D2D#1 = RAdd(mult1D23,sum1D2C);
          real intermediate1D2E#1 = sum1D2D;
          real coeff1D2F#2 = -0.1e1;
          real mult1D30#1 = RMul(coeff1D2F,prod1D1E);
          real sum1D31#1 = RAdd(mult1D30,mult1D28);
          real intermediate1D32#1 = sum1D31;
          real mult1D33#1 = RMul(coeff1D2F,prod1D21);
          real sum1D34#1 = RAdd(mult1D33,mult1D25);
          real intermediate1D35#1 = sum1D34;
          real coeff1D36#2 = -0.4e1;
          real mult1D37#1 = RMul(coeff1D1A,prod1D21);
          real mult1D38#2 = RMul(coeff1D36,prod1D1C);
          real sum1D39#1 = RAdd(mult1D37,mult1D38);
          real intermediate1D3A#1 = sum1D39;
          real mult1D3B#1 = RMul(coeff1D1A,prod1D1E);
          real mult1D3C#1 = RMul(coeff1D36,prod1D19);
          real sum1D3D#1 = RAdd(mult1D38,mult1D3C);
          real sum1D3E#1 = RAdd(mult1D3B,sum1D3D);
          real intermediate1D3F#1 = sum1D3E;
          tensor[6] intermediateCons1D40#1 = <tensor[6]>[intermediate1D2E,intermediate1D32,intermediate1D35,mult1D27,intermediate1D3A,intermediate1D3F];
          tensor[6] basisResult1D12#1 = intermediateCons1D40;
          real faVal1D70#2 = VDot<6>(femDofs1CDE,basisResult1D12);
          real _t1D73#3 = VIndex<3,2>(rayVec19F2);
          real _t1D75#3 = VIndex<3,2>(rayOrig19F0);
          real op1_e3_l_81D77#1 = RMul(_t1D73,s1A00);
          real op1_e3_l_91D7A#1 = RSub(faVal1D70,op1_e3_l_81D77);
          real fa1D7D#10 = RSub(op1_e3_l_91D7A,_t1D75);
          real varAcc1D81#2 = VIndex<2,0>(refPos1CA7);
          real varAcc1D82#2 = VIndex<2,1>(refPos1CA7);
          real coeff1D83#2 = 0.2e1;
          real iden1D84#3 = varAcc1D81;
          real prod21D85#1 = RMul(iden1D84,varAcc1D81);
          real one1D86#7 = 0.1e1;
          real prod1D87#2 = RMul(prod21D85,one1D86);
          real coeff1D88#3 = 0.4e1;
          real iden1D89#3 = varAcc1D82;
          real prod1D8A#2 = RMul(iden1D84,iden1D89);
          real coeff1D8B#2 = -0.3e1;
          real prod1D8C#3 = RMul(iden1D84,one1D86);
          real prod21D8D#1 = RMul(iden1D89,varAcc1D82);
          real prod1D8E#1 = RMul(one1D86,prod21D8D);
          real prod1D8F#3 = RMul(one1D86,iden1D89);
          real prod1D90#1 = RMul(one1D86,one1D86);
          real mult1D91#1 = RMul(one1D86,prod1D90);
          real mult1D92#1 = RMul(coeff1D8B,prod1D8F);
          real mult1D93#2 = RMul(coeff1D83,prod1D8E);
          real mult1D94#1 = RMul(coeff1D8B,prod1D8C);
          real mult1D95#2 = RMul(coeff1D88,prod1D8A);
          real mult1D96#2 = RMul(coeff1D83,prod1D87);
          real sum1D97#1 = RAdd(mult1D95,mult1D96);
          real sum1D98#1 = RAdd(mult1D94,sum1D97);
          real sum1D99#1 = RAdd(mult1D93,sum1D98);
          real sum1D9A#1 = RAdd(mult1D92,sum1D99);
          real sum1D9B#1 = RAdd(mult1D91,sum1D9A);
          real intermediate1D9C#1 = sum1D9B;
          real coeff1D9D#2 = -0.1e1;
          real mult1D9E#1 = RMul(coeff1D9D,prod1D8C);
          real sum1D9F#1 = RAdd(mult1D9E,mult1D96);
          real intermediate1DA0#1 = sum1D9F;
          real mult1DA1#1 = RMul(coeff1D9D,prod1D8F);
          real sum1DA2#1 = RAdd(mult1DA1,mult1D93);
          real intermediate1DA3#1 = sum1DA2;
          real coeff1DA4#2 = -0.4e1;
          real mult1DA5#1 = RMul(coeff1D88,prod1D8F);
          real mult1DA6#2 = RMul(coeff1DA4,prod1D8A);
          real sum1DA7#1 = RAdd(mult1DA5,mult1DA6);
          real intermediate1DA8#1 = sum1DA7;
          real mult1DA9#1 = RMul(coeff1D88,prod1D8C);
          real mult1DAA#1 = RMul(coeff1DA4,prod1D87);
          real sum1DAB#1 = RAdd(mult1DA6,mult1DAA);
          real sum1DAC#1 = RAdd(mult1DA9,sum1DAB);
          real intermediate1DAD#1 = sum1DAC;
          tensor[6] intermediateCons1DAE#1 = <tensor[6]>[intermediate1D9C,intermediate1DA0,intermediate1DA3,mult1D95,intermediate1DA8,intermediate1DAD];
          tensor[6] basisResult1D80#1 = intermediateCons1DAE;
          real probe_l_71DDE#1 = VDot<6>(femDofs1CDE,basisResult1D80);
          real op1_e3_l_81DE1#1 = RMul(_t1D73,e1A02);
          real op1_e3_l_91DE4#1 = RSub(probe_l_71DDE,op1_e3_l_81DE1);
          real fb1DE7#5 = RSub(op1_e3_l_91DE4,_t1D75);
          string _t1DEA#1 = "Vals:";
          tensor[2] _t1DEC#1 = <tensor[2]>[fa1D7D,fb1DE7];
          Print<[string,tensor[2],string]>(_t1DEA,_t1DEC,_t1A0E);
          real op1_e3_l_221DEF#1 = RSub(fa1D7D,fb1DE7);
          real _t1DF2#1 = Abs<real>(op1_e3_l_221DEF);
          bool _t1DF5#1 = LT<real>(_t1DF2,eps19D6);
          if _t1DF5 then goto ASSIGN1DFA else goto JOIN1E06
        ASSIGN1DFA:  preds = [COND1DF7]
          real _t1DF8#1 = Abs<real>(fa1D7D);
          bool _t1DFB#1 = GT<real>(_t1DF8,eps19D6);
          if _t1DFB then goto ASSIGN1E00 else goto JOIN1E04
        ASSIGN1E00:  preds = [COND1DFD]
          real s1DFE#1 = RAdd(s1A00,eps19D6);
          self.s = s1DFE;
          active
          goto JOIN1E04
        JOIN1E04:  preds = [*ACTIVE1E02,COND1DFD]
          real s1E03#1 = phi(s1A00)
          goto JOIN1E06
        JOIN1E06:  preds = [JOIN1E04,COND1DF7]
          real s1E05#3 = phi(s1E03,s1A00)
          real op1_e3_l_381E07#1 = RMul(s1E05,fb1DE7);
          real op1_e3_l_391E0A#1 = RMul(e1A02,fa1D7D);
          real op1_e3_l_481E0D#1 = RSub(op1_e3_l_381E07,op1_e3_l_391E0A);
          real op1_e3_l_491E10#1 = RSub(fb1DE7,fa1D7D);
          real cup1E13#6 = RDiv(op1_e3_l_481E0D,op1_e3_l_491E10);
          string _t1E16#1 = "Mid time:";
          Print<[string,real,string]>(_t1E16,cup1E13,_t1A0E);
          tensor[2] op1_e3_l_531E19#1 = VScale<2>(cup1E13,_t1A21);
          tensor[2] midRay1E1C#1 = VAdd<2>(_t1A1B,op1_e3_l_531E19);
          femData:MeshPos callNewtonPos1E1F#1 = _0A7F_msh_newtonInverse1A34 (midRay1E1C,_t1A31,_t1A2F);
          tensor[2] refPos1E21#6 = ExtractFemItem<tensor[2],RefPos(Mesh)>(callNewtonPos1E1F);
          real varAcc1E24#2 = VIndex<2,0>(refPos1E21);
          real varAcc1E25#2 = VIndex<2,1>(refPos1E21);
          real coeff1E26#2 = 0.2e1;
          real iden1E27#3 = varAcc1E24;
          real prod21E28#1 = RMul(iden1E27,varAcc1E24);
          real one1E29#7 = 0.1e1;
          real prod1E2A#2 = RMul(prod21E28,one1E29);
          real coeff1E2B#3 = 0.4e1;
          real iden1E2C#3 = varAcc1E25;
          real prod1E2D#2 = RMul(iden1E27,iden1E2C);
          real coeff1E2E#2 = -0.3e1;
          real prod1E2F#3 = RMul(iden1E27,one1E29);
          real prod21E30#1 = RMul(iden1E2C,varAcc1E25);
          real prod1E31#1 = RMul(one1E29,prod21E30);
          real prod1E32#3 = RMul(one1E29,iden1E2C);
          real prod1E33#1 = RMul(one1E29,one1E29);
          real mult1E34#1 = RMul(one1E29,prod1E33);
          real mult1E35#1 = RMul(coeff1E2E,prod1E32);
          real mult1E36#2 = RMul(coeff1E26,prod1E31);
          real mult1E37#1 = RMul(coeff1E2E,prod1E2F);
          real mult1E38#2 = RMul(coeff1E2B,prod1E2D);
          real mult1E39#2 = RMul(coeff1E26,prod1E2A);
          real sum1E3A#1 = RAdd(mult1E38,mult1E39);
          real sum1E3B#1 = RAdd(mult1E37,sum1E3A);
          real sum1E3C#1 = RAdd(mult1E36,sum1E3B);
          real sum1E3D#1 = RAdd(mult1E35,sum1E3C);
          real sum1E3E#1 = RAdd(mult1E34,sum1E3D);
          real intermediate1E3F#1 = sum1E3E;
          real coeff1E40#2 = -0.1e1;
          real mult1E41#1 = RMul(coeff1E40,prod1E2F);
          real sum1E42#1 = RAdd(mult1E41,mult1E39);
          real intermediate1E43#1 = sum1E42;
          real mult1E44#1 = RMul(coeff1E40,prod1E32);
          real sum1E45#1 = RAdd(mult1E44,mult1E36);
          real intermediate1E46#1 = sum1E45;
          real coeff1E47#2 = -0.4e1;
          real mult1E48#1 = RMul(coeff1E2B,prod1E32);
          real mult1E49#2 = RMul(coeff1E47,prod1E2D);
          real sum1E4A#1 = RAdd(mult1E48,mult1E49);
          real intermediate1E4B#1 = sum1E4A;
          real mult1E4C#1 = RMul(coeff1E2B,prod1E2F);
          real mult1E4D#1 = RMul(coeff1E47,prod1E2A);
          real sum1E4E#1 = RAdd(mult1E49,mult1E4D);
          real sum1E4F#1 = RAdd(mult1E4C,sum1E4E);
          real intermediate1E50#1 = sum1E4F;
          tensor[6] intermediateCons1E51#1 = <tensor[6]>[intermediate1E3F,intermediate1E43,intermediate1E46,mult1E38,intermediate1E4B,intermediate1E50];
          tensor[6] basisResult1E23#1 = intermediateCons1E51;
          real fmVal1E81#2 = VDot<6>(femDofs1CDE,basisResult1E23);
          real op1_e3_l_581E84#1 = RMul(_t1D73,cup1E13);
          real op1_e3_l_591E87#1 = RSub(fmVal1E81,op1_e3_l_581E84);
          real fm1E8A#6 = RSub(op1_e3_l_591E87,_t1D75);
          string _t1E8D#1 = "all vals:";
          tensor[3] _t1E8F#1 = <tensor[3]>[fa1D7D,fm1E8A,fb1DE7];
          Print<[string,tensor[3],string]>(_t1E8D,_t1E8F,_t1A0E);
          int _t1E92#6 = 1;
          int intersectionItter1E94#2 = IAdd(intersectionItter19FE,_t1E92);
          real _t1E96#10 = 0.e0;
          bool _t1E98#2 = GT<real>(fa1D7D,_t1E96);
          if _t1E98 then goto JOIN1E9D else goto ASSIGN2494
        JOIN1E9D:  preds = [COND1E9A,JOIN2499]
          int _t1E9B#1 = phi(_t1E92,_t1E9C)
          bool _t1E9E#2 = GT<real>(fm1E8A,_t1E96);
          if _t1E9E then goto JOIN1EA3 else goto ASSIGN248C
        JOIN1EA3:  preds = [COND1EA0,JOIN2491]
          int _t1EA1#1 = phi(_t1E92,_t1EA2)
          int _t1EA4#1 = IMul(_t1E9B,_t1EA1);
          int _t1EA6#7 = 0;
          bool _t1EA8#1 = LT<int>(_t1EA4,_t1EA6);
          if _t1EA8 then goto JOIN1EAE else goto COND2471
        JOIN1EAE:  preds = [COND1EAA,JOIN247E]
          real e1EAB#4 = phi(cup1E13,e1A02)
          real s1EAC#5 = phi(s1E05,s1EAD)
          string _t1EAF#1 = "new interval:";
          tensor[2] _t1EB1#1 = <tensor[2]>[s1EAC,e1EAB];
          Print<[string,tensor[2],string]>(_t1EAF,_t1EB1,_t1A0E);
          real _t1EB4#2 = Abs<real>(fa1D7D);
          bool _t1EB7#2 = LT<real>(_t1EB4,eps19D6);
          if _t1EB7 then goto ASSIGN1EBB else goto ASSIGN2466
        ASSIGN1EBB:  preds = [COND1EB9]
          bool _t1EBA#1 = true;
          goto JOIN1EBE
        JOIN1EBE:  preds = [ASSIGN1EBB,JOIN246D]
          bool _t1EBC#1 = phi(_t1EBA,_t1EBD)
          if _t1EBC then goto ASSIGN1EC2 else goto ASSIGN2462
        ASSIGN1EC2:  preds = [COND1EBF]
          real _t1EC0#2 = Abs<real>(fm1E8A);
          bool _t1EC3#1 = GT<real>(_t1EC0,eps19D6);
          if _t1EC3 then goto ASSIGN1EC7 else goto ASSIGN2460
        ASSIGN1EC7:  preds = [COND1EC5]
          bool _t1EC6#1 = GT<real>(_t1EB4,eps19D6);
          goto JOIN1ECA
        JOIN1ECA:  preds = [ASSIGN1EC7,ASSIGN2460]
          bool _t1EC8#1 = phi(_t1EC6,_t1EC9)
          if _t1EC8 then goto ASSIGN1ECD else goto ASSIGN1EFD
        ASSIGN1ECD:  preds = [COND1ECB]
          int itter1ECC#4 = IAdd(itter19FC,_t1E92);
          bool _t1ECE#1 = GTE<int>(itter1ECC,len19FA);
          if _t1ECE then goto ASSIGN1ED2 else goto JOIN1ED9
        ASSIGN1ED2:  preds = [COND1ED0]
          string _t1ED1#1 = "Fin pixel=============================\n";
          Print<[string]>(_t1ED1);
          self.itter = itter1ECC;
          self.intersectionItter = _t1EA6;
          self.s = s1EAC;
          self.e = e1EAB;
          stabilize
          goto JOIN1ED9
        JOIN1ED9:  preds = [*STABILIZE1ED8,COND1ED0]
          int _t1EDA#2 = IAdd(offset19F8,itter1ECC);
          tensor[2] interval1EDC#3 = Subscript<tensor[2][]>(times19D8,_t1EDA);
          int _t1EDE#1 = Subscript<int[]>(cells19DA,_t1EDA);
          femData:MeshCell cc1EE0#2 = Subscript<femData:MeshCell[]>(0cell_a19D2,_t1EDE);
          real s1EE2#1 = VIndex<2,0>(interval1EDC);
          real e1EE4#1 = VIndex<2,1>(interval1EDC);
          int _t1EE6#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc1EE0);
          femData:FuncCell _t1EE8#1 = LoadFem<femData:FuncCell>(c19D4,_t1EE6);
          string _t1EEA#1 = "Next interval!\n";
          Print<[string]>(_t1EEA);
          self.itter = itter1ECC;
          self.intersectionItter = _t1EA6;
          self.interval = interval1EDC;
          self.s = s1EE2;
          self.e = e1EE4;
          self.cc = cc1EE0;
          self.fc = _t1EE8;
          active
          goto JOIN1EF5
        JOIN1EF5:  preds = [*ACTIVE1EF4,*STABILIZE2427]
          goto JOIN1EF7
        JOIN1EF7:  preds = [*JOIN1EF5,MASSIGN2463]
          int intersectionItter1EF6#1 = phi(intersectionItter1E94)
          self.intersectionItter = intersectionItter1EF6;
          self.s = s1EAC;
          self.e = e1EAB;
          active
        ASSIGN1EFD:  preds = [COND1ECB]
          tensor[2] grad1EFC#1 = <tensor[2]>[_t1E96,_t1E96];
          bool _t1EFE#1 = LT<real>(_t1EC0,eps19D6);
          if _t1EFE then goto ASSIGN1F28 else goto JOIN2103
        ASSIGN1F28:  preds = [COND1F00]
          real varAcc1F02#1 = VIndex<2,0>(refPos1E21);
          real varAcc1F03#1 = VIndex<2,1>(refPos1E21);
          real coeff1F04#3 = 0.4e1;
          real iden1F05#1 = varAcc1F02;
          real one1F06#4 = 0.1e1;
          real prod1F07#3 = RMul(iden1F05,one1F06);
          real iden1F08#1 = varAcc1F03;
          real prod1F09#2 = RMul(one1F06,iden1F08);
          real coeff1F0A#1 = -0.3e1;
          real prod1F0B#3 = RMul(one1F06,one1F06);
          real mult1F0C#1 = RMul(coeff1F0A,prod1F0B);
          real mult1F0D#3 = RMul(coeff1F04,prod1F09);
          real mult1F0E#3 = RMul(coeff1F04,prod1F07);
          real sum1F0F#1 = RAdd(mult1F0D,mult1F0E);
          real sum1F10#2 = RAdd(mult1F0C,sum1F0F);
          real intermediate1F11#1 = sum1F10;
          real coeff1F12#1 = -0.1e1;
          real mult1F13#2 = RMul(coeff1F12,prod1F0B);
          real sum1F14#1 = RAdd(mult1F13,mult1F0E);
          real intermediate1F15#1 = sum1F14;
          real basisEval1F16#2 = 0.e0;
          real coeff1F17#2 = -0.4e1;
          real basisEval1F18#2 = RMul(coeff1F17,prod1F09);
          real coeff1F19#1 = -0.8e1;
          real mult1F1A#2 = RMul(coeff1F04,prod1F0B);
          real mult1F1B#1 = RMul(coeff1F19,prod1F07);
          real sum1F1C#1 = RAdd(basisEval1F18,mult1F1B);
          real sum1F1D#1 = RAdd(mult1F1A,sum1F1C);
          real intermediate1F1E#1 = sum1F1D;
          real intermediate1F1F#1 = sum1F10;
          real sum1F20#1 = RAdd(mult1F13,mult1F0D);
          real intermediate1F21#1 = sum1F20;
          real mult1F22#2 = RMul(coeff1F17,prod1F07);
          real sum1F23#1 = RAdd(mult1F1A,mult1F22);
          real intermediate1F24#1 = sum1F23;
          tensor[6] intermediateCons1F25#1 = <tensor[6]>[intermediate1F11,intermediate1F15,basisEval1F16,mult1F0D,basisEval1F18,intermediate1F1E];
          tensor[6] intermediateCons1F26#1 = <tensor[6]>[intermediate1F1F,basisEval1F16,intermediate1F21,mult1F0E,intermediate1F24,mult1F22];
          tensor[2,6] intermediateCons1F27#1 = <tensor[2,6]>[intermediateCons1F25,intermediateCons1F26];
          tensor[2,6] basisResult1F01#2 = intermediateCons1F27;
          tensor[6] projParam1F50#1 = ProjectLast<tensor[2,6],[0]>(basisResult1F01);
          real vdot1F51#1 = VDot<6>(femDofs1CDE,projParam1F50);
          tensor[6] projParam1F52#1 = ProjectLast<tensor[2,6],[1]>(basisResult1F01);
          real vdot1F53#1 = VDot<6>(femDofs1CDE,projParam1F52);
          tensor[2] compositionl1F4F#2 = <tensor[2]>[vdot1F51,vdot1F53];
          int ilit1F5B#1 = 3;
          int mulRes1F5C#3 = IMul(_t1A31,ilit1F5B);
          int ilit1F5D#1 = 0;
          int addRes1F5E#1 = IAdd(mulRes1F5C,ilit1F5D);
          int idx1F5F#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(_t1A2F,addRes1F5E);
          int ilit1F60#1 = 1;
          int addRes1F61#1 = IAdd(mulRes1F5C,ilit1F60);
          int idx1F62#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(_t1A2F,addRes1F61);
          int ilit1F63#1 = 2;
          int addRes1F64#1 = IAdd(mulRes1F5C,ilit1F63);
          int idx1F65#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(_t1A2F,addRes1F64);
          int[3] seq1F66#1 = <int[3]>{idx1F5F,idx1F62,idx1F65};
          int[3] femIndicies1F5A#3 = seq1F66;
          int ilit1F75#4 = 0;
          int ilit1F76#4 = 2;
          int idx1F77#1 = Subscript<int>(femIndicies1F5A,ilit1F75);
          int mulRes1F78#2 = IMul(ilit1F76,idx1F77);
          int addRes1F79#1 = IAdd(ilit1F75,mulRes1F78);
          int ilit1F7A#4 = 1;
          int addRes1F7B#1 = IAdd(ilit1F7A,mulRes1F78);
          real dof_load1F7C#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1A2F,addRes1F79);
          real dof_load1F7D#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1A2F,addRes1F7B);
          tensor[2] interCons1F7E#1 = <tensor[2]>[dof_load1F7C,dof_load1F7D];
          int idx1F7F#1 = Subscript<int>(femIndicies1F5A,ilit1F7A);
          int mulRes1F80#2 = IMul(ilit1F76,idx1F7F);
          int addRes1F81#1 = IAdd(ilit1F75,mulRes1F80);
          int addRes1F82#1 = IAdd(ilit1F7A,mulRes1F80);
          real dof_load1F83#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1A2F,addRes1F81);
          real dof_load1F84#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1A2F,addRes1F82);
          tensor[2] interCons1F85#1 = <tensor[2]>[dof_load1F83,dof_load1F84];
          int idx1F86#1 = Subscript<int>(femIndicies1F5A,ilit1F76);
          int mulRes1F87#2 = IMul(ilit1F76,idx1F86);
          int addRes1F88#1 = IAdd(ilit1F75,mulRes1F87);
          int addRes1F89#1 = IAdd(ilit1F7A,mulRes1F87);
          real dof_load1F8A#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1A2F,addRes1F88);
          real dof_load1F8B#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1A2F,addRes1F89);
          tensor[2] interCons1F8C#1 = <tensor[2]>[dof_load1F8A,dof_load1F8B];
          tensor[3,2] dofs1F8D#1 = <tensor[3,2]>[interCons1F7E,interCons1F85,interCons1F8C];
          tensor[3,2] femDofs1F74#18 = dofs1F8D;
          real varAcc1FA9#0 = VIndex<2,0>(refPos1E21);
          real varAcc1FAA#0 = VIndex<2,1>(refPos1E21);
          real coeff1FAB#1 = -0.1e1;
          real one1FAC#3 = 0.1e1;
          real prod1FAD#2 = RMul(one1FAC,one1FAC);
          real basisEval1FAE#2 = RMul(coeff1FAB,prod1FAD);
          real basisEval1FAF#2 = RMul(one1FAC,prod1FAD);
          real basisEval1FB0#2 = 0.e0;
          tensor[3] intermediateCons1FB1#1 = <tensor[3]>[basisEval1FAE,basisEval1FAF,basisEval1FB0];
          tensor[3] intermediateCons1FB2#1 = <tensor[3]>[basisEval1FAE,basisEval1FB0,basisEval1FAF];
          tensor[2,3] intermediateCons1FB3#1 = <tensor[2,3]>[intermediateCons1FB1,intermediateCons1FB2];
          tensor[2,3] basisResult1FA8#12 = intermediateCons1FB3;
          real r1FC1#2 = TensorIndex<tensor[3,2],[0,0]>(femDofs1F74);
          real r1FC2#2 = TensorIndex<tensor[2,3],[0,0]>(basisResult1FA8);
          real r1FC3#1 = RMul(r1FC1,r1FC2);
          real r1FC4#2 = TensorIndex<tensor[3,2],[1,0]>(femDofs1F74);
          real r1FC5#2 = TensorIndex<tensor[2,3],[0,1]>(basisResult1FA8);
          real r1FC6#1 = RMul(r1FC4,r1FC5);
          real r1FC7#2 = TensorIndex<tensor[3,2],[2,0]>(femDofs1F74);
          real r1FC8#2 = TensorIndex<tensor[2,3],[0,2]>(basisResult1FA8);
          real r1FC9#1 = RMul(r1FC7,r1FC8);
          real r1FCA#1 = RAdd(r1FC3,r1FC6);
          real r1FCB#1 = RAdd(r1FCA,r1FC9);
          real r1FCC#2 = TensorIndex<tensor[2,3],[1,0]>(basisResult1FA8);
          real r1FCD#1 = RMul(r1FC1,r1FCC);
          real r1FCE#2 = TensorIndex<tensor[2,3],[1,1]>(basisResult1FA8);
          real r1FCF#1 = RMul(r1FC4,r1FCE);
          real r1FD0#2 = TensorIndex<tensor[2,3],[1,2]>(basisResult1FA8);
          real r1FD1#1 = RMul(r1FC7,r1FD0);
          real r1FD2#1 = RAdd(r1FCD,r1FCF);
          real r1FD3#1 = RAdd(r1FD2,r1FD1);
          tensor[2] tensor1FD4#1 = <tensor[2]>[r1FCB,r1FD3];
          real r1FD5#2 = TensorIndex<tensor[3,2],[0,1]>(femDofs1F74);
          real r1FD6#1 = RMul(r1FD5,r1FC2);
          real r1FD7#2 = TensorIndex<tensor[3,2],[1,1]>(femDofs1F74);
          real r1FD8#1 = RMul(r1FD7,r1FC5);
          real r1FD9#2 = TensorIndex<tensor[3,2],[2,1]>(femDofs1F74);
          real r1FDA#1 = RMul(r1FD9,r1FC8);
          real r1FDB#1 = RAdd(r1FD6,r1FD8);
          real r1FDC#1 = RAdd(r1FDB,r1FDA);
          real r1FDD#1 = RMul(r1FD5,r1FCC);
          real r1FDE#1 = RMul(r1FD7,r1FCE);
          real r1FDF#1 = RMul(r1FD9,r1FD0);
          real r1FE0#1 = RAdd(r1FDD,r1FDE);
          real r1FE1#1 = RAdd(r1FE0,r1FDF);
          tensor[2] tensor1FE2#1 = <tensor[2]>[r1FDC,r1FE1];
          tensor[2,2] probe_l_81FC0#4 = <tensor[2,2]>[tensor1FD4,tensor1FE2];
          real realLit2008#4 = 0.e0;
          real r2009#2 = TensorIndex<tensor[2,2],[0,0]>(probe_l_81FC0);
          real r200A#1 = RMul(realLit2008,r2009);
          real realLit200B#2 = -0.1e1;
          real r200C#2 = TensorIndex<tensor[2,2],[1,0]>(probe_l_81FC0);
          real r200D#1 = RMul(realLit200B,r200C);
          real r200E#1 = RAdd(r200A,r200D);
          real r200F#2 = TensorIndex<tensor[2,2],[0,1]>(probe_l_81FC0);
          real r2010#1 = RMul(realLit2008,r200F);
          real r2011#2 = TensorIndex<tensor[2,2],[1,1]>(probe_l_81FC0);
          real r2012#1 = RMul(realLit200B,r2011);
          real r2013#1 = RAdd(r2010,r2012);
          tensor[2] tensor2014#1 = <tensor[2]>[r200E,r2013];
          real realLit2015#2 = 0.1e1;
          real r2016#1 = RMul(realLit2015,r2009);
          real r2017#1 = RMul(realLit2008,r200C);
          real r2018#1 = RAdd(r2016,r2017);
          real r2019#1 = RMul(realLit2015,r200F);
          real r201A#1 = RMul(realLit2008,r2011);
          real r201B#1 = RAdd(r2019,r201A);
          tensor[2] tensor201C#1 = <tensor[2]>[r2018,r201B];
          tensor[2,2] op1_e3_l_92007#4 = <tensor[2,2]>[tensor2014,tensor201C];
          real r2035#1 = TensorIndex<tensor[3,2],[0,0]>(femDofs1F74);
          real r2036#2 = TensorIndex<tensor[2,3],[0,0]>(basisResult1FA8);
          real r2037#1 = RMul(r2035,r2036);
          real r2038#1 = TensorIndex<tensor[3,2],[1,0]>(femDofs1F74);
          real r2039#2 = TensorIndex<tensor[2,3],[0,1]>(basisResult1FA8);
          real r203A#1 = RMul(r2038,r2039);
          real r203B#1 = TensorIndex<tensor[3,2],[2,0]>(femDofs1F74);
          real r203C#2 = TensorIndex<tensor[2,3],[0,2]>(basisResult1FA8);
          real r203D#1 = RMul(r203B,r203C);
          real r203E#1 = RAdd(r2037,r203A);
          real r203F#1 = RAdd(r203E,r203D);
          real r2040#1 = TensorIndex<tensor[3,2],[0,1]>(femDofs1F74);
          real r2041#1 = RMul(r2040,r2036);
          real r2042#1 = TensorIndex<tensor[3,2],[1,1]>(femDofs1F74);
          real r2043#1 = RMul(r2042,r2039);
          real r2044#1 = TensorIndex<tensor[3,2],[2,1]>(femDofs1F74);
          real r2045#1 = RMul(r2044,r203C);
          real r2046#1 = RAdd(r2041,r2043);
          real r2047#1 = RAdd(r2046,r2045);
          tensor[2] probe_l_102034#1 = <tensor[2]>[r203F,r2047];
          real r205E#1 = TensorIndex<tensor[3,2],[0,0]>(femDofs1F74);
          real r205F#2 = TensorIndex<tensor[2,3],[1,0]>(basisResult1FA8);
          real r2060#1 = RMul(r205E,r205F);
          real r2061#1 = TensorIndex<tensor[3,2],[1,0]>(femDofs1F74);
          real r2062#2 = TensorIndex<tensor[2,3],[1,1]>(basisResult1FA8);
          real r2063#1 = RMul(r2061,r2062);
          real r2064#1 = TensorIndex<tensor[3,2],[2,0]>(femDofs1F74);
          real r2065#2 = TensorIndex<tensor[2,3],[1,2]>(basisResult1FA8);
          real r2066#1 = RMul(r2064,r2065);
          real r2067#1 = RAdd(r2060,r2063);
          real r2068#1 = RAdd(r2067,r2066);
          real r2069#1 = TensorIndex<tensor[3,2],[0,1]>(femDofs1F74);
          real r206A#1 = RMul(r2069,r205F);
          real r206B#1 = TensorIndex<tensor[3,2],[1,1]>(femDofs1F74);
          real r206C#1 = RMul(r206B,r2062);
          real r206D#1 = TensorIndex<tensor[3,2],[2,1]>(femDofs1F74);
          real r206E#1 = RMul(r206D,r2065);
          real r206F#1 = RAdd(r206A,r206C);
          real r2070#1 = RAdd(r206F,r206E);
          tensor[2] probe_l_11205D#2 = <tensor[2]>[r2068,r2070];
          real realLit2087#2 = 0.e0;
          real r2088#2 = TensorIndex<tensor[2],[0]>(probe_l_11205D);
          real r2089#1 = RMul(realLit2087,r2088);
          real realLit208A#1 = 0.1e1;
          real r208B#2 = TensorIndex<tensor[2],[1]>(probe_l_11205D);
          real r208C#1 = RMul(realLit208A,r208B);
          real r208D#1 = RAdd(r2089,r208C);
          real realLit208E#1 = -0.1e1;
          real r208F#1 = RMul(realLit208E,r2088);
          real r2090#1 = RMul(realLit2087,r208B);
          real r2091#1 = RAdd(r208F,r2090);
          tensor[2] op1_e3_l_122086#1 = <tensor[2]>[r208D,r2091];
          real realLit20A0#4 = 0.e0;
          real r20A1#2 = TensorIndex<tensor[2,2],[0,0]>(op1_e3_l_92007);
          real r20A2#1 = RMul(realLit20A0,r20A1);
          real realLit20A3#2 = -0.1e1;
          real r20A4#2 = TensorIndex<tensor[2,2],[0,1]>(op1_e3_l_92007);
          real r20A5#1 = RMul(realLit20A3,r20A4);
          real r20A6#1 = RAdd(r20A2,r20A5);
          real r20A7#2 = TensorIndex<tensor[2,2],[1,0]>(op1_e3_l_92007);
          real r20A8#1 = RMul(realLit20A0,r20A7);
          real r20A9#2 = TensorIndex<tensor[2,2],[1,1]>(op1_e3_l_92007);
          real r20AA#1 = RMul(realLit20A3,r20A9);
          real r20AB#1 = RAdd(r20A8,r20AA);
          tensor[2] tensor20AC#1 = <tensor[2]>[r20A6,r20AB];
          real realLit20AD#2 = 0.1e1;
          real r20AE#1 = RMul(realLit20AD,r20A1);
          real r20AF#1 = RMul(realLit20A0,r20A4);
          real r20B0#1 = RAdd(r20AE,r20AF);
          real r20B1#1 = RMul(realLit20AD,r20A7);
          real r20B2#1 = RMul(realLit20A0,r20A9);
          real r20B3#1 = RAdd(r20B1,r20B2);
          tensor[2] tensor20B4#1 = <tensor[2]>[r20B0,r20B3];
          tensor[2,2] op1_e3_l_13209F#4 = <tensor[2,2]>[tensor20AC,tensor20B4];
          real op1_e3_l_1420CC#4 = VDot<2>(probe_l_102034,op1_e3_l_122086);
          real r20D0#1 = TensorIndex<tensor[2,2],[0,0]>(op1_e3_l_13209F);
          real r20D1#1 = RDiv(r20D0,op1_e3_l_1420CC);
          real r20D2#1 = TensorIndex<tensor[2,2],[0,1]>(op1_e3_l_13209F);
          real r20D3#1 = RDiv(r20D2,op1_e3_l_1420CC);
          tensor[2] tensor20D4#1 = <tensor[2]>[r20D1,r20D3];
          real r20D5#1 = TensorIndex<tensor[2,2],[1,0]>(op1_e3_l_13209F);
          real r20D6#1 = RDiv(r20D5,op1_e3_l_1420CC);
          real r20D7#1 = TensorIndex<tensor[2,2],[1,1]>(op1_e3_l_13209F);
          real r20D8#1 = RDiv(r20D7,op1_e3_l_1420CC);
          tensor[2] tensor20D9#1 = <tensor[2]>[r20D6,r20D8];
          tensor[2,2] op1_e3_l_1520CF#4 = <tensor[2,2]>[tensor20D4,tensor20D9];
          real r20E7#2 = TensorIndex<tensor[2],[0]>(compositionl1F4F);
          real r20E8#1 = TensorIndex<tensor[2,2],[0,0]>(op1_e3_l_1520CF);
          real r20E9#1 = RMul(r20E7,r20E8);
          real r20EA#2 = TensorIndex<tensor[2],[1]>(compositionl1F4F);
          real r20EB#1 = TensorIndex<tensor[2,2],[1,0]>(op1_e3_l_1520CF);
          real r20EC#1 = RMul(r20EA,r20EB);
          real r20ED#1 = RAdd(r20E9,r20EC);
          real r20EE#1 = TensorIndex<tensor[2,2],[0,1]>(op1_e3_l_1520CF);
          real r20EF#1 = RMul(r20E7,r20EE);
          real r20F0#1 = TensorIndex<tensor[2,2],[1,1]>(op1_e3_l_1520CF);
          real r20F1#1 = RMul(r20EA,r20F0);
          real r20F2#1 = RAdd(r20EF,r20F1);
          tensor[2] grad20E6#1 = <tensor[2]>[r20ED,r20F2];
          goto JOIN2103
        JOIN2103:  preds = [ASSIGN2100,COND1F00]
          tensor[2] grad2101#1 = phi(grad20E6,grad1EFC)
          real out2102#1 = phi(fmVal1E81,out1A08)
          if _t1EB7 then goto ASSIGN212C else goto JOIN2308
        ASSIGN212C:  preds = [COND2104]
          real varAcc2106#1 = VIndex<2,0>(refPos1CA3);
          real varAcc2107#1 = VIndex<2,1>(refPos1CA3);
          real coeff2108#3 = 0.4e1;
          real iden2109#1 = varAcc2106;
          real one210A#4 = 0.1e1;
          real prod210B#3 = RMul(iden2109,one210A);
          real iden210C#1 = varAcc2107;
          real prod210D#2 = RMul(one210A,iden210C);
          real coeff210E#1 = -0.3e1;
          real prod210F#3 = RMul(one210A,one210A);
          real mult2110#1 = RMul(coeff210E,prod210F);
          real mult2111#3 = RMul(coeff2108,prod210D);
          real mult2112#3 = RMul(coeff2108,prod210B);
          real sum2113#1 = RAdd(mult2111,mult2112);
          real sum2114#2 = RAdd(mult2110,sum2113);
          real intermediate2115#1 = sum2114;
          real coeff2116#1 = -0.1e1;
          real mult2117#2 = RMul(coeff2116,prod210F);
          real sum2118#1 = RAdd(mult2117,mult2112);
          real intermediate2119#1 = sum2118;
          real basisEval211A#2 = 0.e0;
          real coeff211B#2 = -0.4e1;
          real basisEval211C#2 = RMul(coeff211B,prod210D);
          real coeff211D#1 = -0.8e1;
          real mult211E#2 = RMul(coeff2108,prod210F);
          real mult211F#1 = RMul(coeff211D,prod210B);
          real sum2120#1 = RAdd(basisEval211C,mult211F);
          real sum2121#1 = RAdd(mult211E,sum2120);
          real intermediate2122#1 = sum2121;
          real intermediate2123#1 = sum2114;
          real sum2124#1 = RAdd(mult2117,mult2111);
          real intermediate2125#1 = sum2124;
          real mult2126#2 = RMul(coeff211B,prod210B);
          real sum2127#1 = RAdd(mult211E,mult2126);
          real intermediate2128#1 = sum2127;
          tensor[6] intermediateCons2129#1 = <tensor[6]>[intermediate2115,intermediate2119,basisEval211A,mult2111,basisEval211C,intermediate2122];
          tensor[6] intermediateCons212A#1 = <tensor[6]>[intermediate2123,basisEval211A,intermediate2125,mult2112,intermediate2128,mult2126];
          tensor[2,6] intermediateCons212B#1 = <tensor[2,6]>[intermediateCons2129,intermediateCons212A];
          tensor[2,6] basisResult2105#2 = intermediateCons212B;
          tensor[6] projParam2154#1 = ProjectLast<tensor[2,6],[0]>(basisResult2105);
          real vdot2155#1 = VDot<6>(femDofs1CDE,projParam2154);
          tensor[6] projParam2156#1 = ProjectLast<tensor[2,6],[1]>(basisResult2105);
          real vdot2157#1 = VDot<6>(femDofs1CDE,projParam2156);
          tensor[2] compositionl2153#2 = <tensor[2]>[vdot2155,vdot2157];
          int ilit215F#1 = 3;
          int mulRes2160#3 = IMul(_t1A31,ilit215F);
          int ilit2161#1 = 0;
          int addRes2162#1 = IAdd(mulRes2160,ilit2161);
          int idx2163#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(_t1A2F,addRes2162);
          int ilit2164#1 = 1;
          int addRes2165#1 = IAdd(mulRes2160,ilit2164);
          int idx2166#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(_t1A2F,addRes2165);
          int ilit2167#1 = 2;
          int addRes2168#1 = IAdd(mulRes2160,ilit2167);
          int idx2169#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(_t1A2F,addRes2168);
          int[3] seq216A#1 = <int[3]>{idx2163,idx2166,idx2169};
          int[3] femIndicies215E#3 = seq216A;
          int ilit2179#4 = 0;
          int ilit217A#4 = 2;
          int idx217B#1 = Subscript<int>(femIndicies215E,ilit2179);
          int mulRes217C#2 = IMul(ilit217A,idx217B);
          int addRes217D#1 = IAdd(ilit2179,mulRes217C);
          int ilit217E#4 = 1;
          int addRes217F#1 = IAdd(ilit217E,mulRes217C);
          real dof_load2180#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1A2F,addRes217D);
          real dof_load2181#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1A2F,addRes217F);
          tensor[2] interCons2182#1 = <tensor[2]>[dof_load2180,dof_load2181];
          int idx2183#1 = Subscript<int>(femIndicies215E,ilit217E);
          int mulRes2184#2 = IMul(ilit217A,idx2183);
          int addRes2185#1 = IAdd(ilit2179,mulRes2184);
          int addRes2186#1 = IAdd(ilit217E,mulRes2184);
          real dof_load2187#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1A2F,addRes2185);
          real dof_load2188#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1A2F,addRes2186);
          tensor[2] interCons2189#1 = <tensor[2]>[dof_load2187,dof_load2188];
          int idx218A#1 = Subscript<int>(femIndicies215E,ilit217A);
          int mulRes218B#2 = IMul(ilit217A,idx218A);
          int addRes218C#1 = IAdd(ilit2179,mulRes218B);
          int addRes218D#1 = IAdd(ilit217E,mulRes218B);
          real dof_load218E#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1A2F,addRes218C);
          real dof_load218F#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1A2F,addRes218D);
          tensor[2] interCons2190#1 = <tensor[2]>[dof_load218E,dof_load218F];
          tensor[3,2] dofs2191#1 = <tensor[3,2]>[interCons2182,interCons2189,interCons2190];
          tensor[3,2] femDofs2178#18 = dofs2191;
          real varAcc21AD#0 = VIndex<2,0>(refPos1CA3);
          real varAcc21AE#0 = VIndex<2,1>(refPos1CA3);
          real coeff21AF#1 = -0.1e1;
          real one21B0#3 = 0.1e1;
          real prod21B1#2 = RMul(one21B0,one21B0);
          real basisEval21B2#2 = RMul(coeff21AF,prod21B1);
          real basisEval21B3#2 = RMul(one21B0,prod21B1);
          real basisEval21B4#2 = 0.e0;
          tensor[3] intermediateCons21B5#1 = <tensor[3]>[basisEval21B2,basisEval21B3,basisEval21B4];
          tensor[3] intermediateCons21B6#1 = <tensor[3]>[basisEval21B2,basisEval21B4,basisEval21B3];
          tensor[2,3] intermediateCons21B7#1 = <tensor[2,3]>[intermediateCons21B5,intermediateCons21B6];
          tensor[2,3] basisResult21AC#12 = intermediateCons21B7;
          real r21C5#2 = TensorIndex<tensor[3,2],[0,0]>(femDofs2178);
          real r21C6#2 = TensorIndex<tensor[2,3],[0,0]>(basisResult21AC);
          real r21C7#1 = RMul(r21C5,r21C6);
          real r21C8#2 = TensorIndex<tensor[3,2],[1,0]>(femDofs2178);
          real r21C9#2 = TensorIndex<tensor[2,3],[0,1]>(basisResult21AC);
          real r21CA#1 = RMul(r21C8,r21C9);
          real r21CB#2 = TensorIndex<tensor[3,2],[2,0]>(femDofs2178);
          real r21CC#2 = TensorIndex<tensor[2,3],[0,2]>(basisResult21AC);
          real r21CD#1 = RMul(r21CB,r21CC);
          real r21CE#1 = RAdd(r21C7,r21CA);
          real r21CF#1 = RAdd(r21CE,r21CD);
          real r21D0#2 = TensorIndex<tensor[2,3],[1,0]>(basisResult21AC);
          real r21D1#1 = RMul(r21C5,r21D0);
          real r21D2#2 = TensorIndex<tensor[2,3],[1,1]>(basisResult21AC);
          real r21D3#1 = RMul(r21C8,r21D2);
          real r21D4#2 = TensorIndex<tensor[2,3],[1,2]>(basisResult21AC);
          real r21D5#1 = RMul(r21CB,r21D4);
          real r21D6#1 = RAdd(r21D1,r21D3);
          real r21D7#1 = RAdd(r21D6,r21D5);
          tensor[2] tensor21D8#1 = <tensor[2]>[r21CF,r21D7];
          real r21D9#2 = TensorIndex<tensor[3,2],[0,1]>(femDofs2178);
          real r21DA#1 = RMul(r21D9,r21C6);
          real r21DB#2 = TensorIndex<tensor[3,2],[1,1]>(femDofs2178);
          real r21DC#1 = RMul(r21DB,r21C9);
          real r21DD#2 = TensorIndex<tensor[3,2],[2,1]>(femDofs2178);
          real r21DE#1 = RMul(r21DD,r21CC);
          real r21DF#1 = RAdd(r21DA,r21DC);
          real r21E0#1 = RAdd(r21DF,r21DE);
          real r21E1#1 = RMul(r21D9,r21D0);
          real r21E2#1 = RMul(r21DB,r21D2);
          real r21E3#1 = RMul(r21DD,r21D4);
          real r21E4#1 = RAdd(r21E1,r21E2);
          real r21E5#1 = RAdd(r21E4,r21E3);
          tensor[2] tensor21E6#1 = <tensor[2]>[r21E0,r21E5];
          tensor[2,2] probe_l_821C4#4 = <tensor[2,2]>[tensor21D8,tensor21E6];
          real realLit220C#4 = 0.e0;
          real r220D#2 = TensorIndex<tensor[2,2],[0,0]>(probe_l_821C4);
          real r220E#1 = RMul(realLit220C,r220D);
          real realLit220F#2 = -0.1e1;
          real r2210#2 = TensorIndex<tensor[2,2],[1,0]>(probe_l_821C4);
          real r2211#1 = RMul(realLit220F,r2210);
          real r2212#1 = RAdd(r220E,r2211);
          real r2213#2 = TensorIndex<tensor[2,2],[0,1]>(probe_l_821C4);
          real r2214#1 = RMul(realLit220C,r2213);
          real r2215#2 = TensorIndex<tensor[2,2],[1,1]>(probe_l_821C4);
          real r2216#1 = RMul(realLit220F,r2215);
          real r2217#1 = RAdd(r2214,r2216);
          tensor[2] tensor2218#1 = <tensor[2]>[r2212,r2217];
          real realLit2219#2 = 0.1e1;
          real r221A#1 = RMul(realLit2219,r220D);
          real r221B#1 = RMul(realLit220C,r2210);
          real r221C#1 = RAdd(r221A,r221B);
          real r221D#1 = RMul(realLit2219,r2213);
          real r221E#1 = RMul(realLit220C,r2215);
          real r221F#1 = RAdd(r221D,r221E);
          tensor[2] tensor2220#1 = <tensor[2]>[r221C,r221F];
          tensor[2,2] op1_e3_l_9220B#4 = <tensor[2,2]>[tensor2218,tensor2220];
          real r2239#1 = TensorIndex<tensor[3,2],[0,0]>(femDofs2178);
          real r223A#2 = TensorIndex<tensor[2,3],[0,0]>(basisResult21AC);
          real r223B#1 = RMul(r2239,r223A);
          real r223C#1 = TensorIndex<tensor[3,2],[1,0]>(femDofs2178);
          real r223D#2 = TensorIndex<tensor[2,3],[0,1]>(basisResult21AC);
          real r223E#1 = RMul(r223C,r223D);
          real r223F#1 = TensorIndex<tensor[3,2],[2,0]>(femDofs2178);
          real r2240#2 = TensorIndex<tensor[2,3],[0,2]>(basisResult21AC);
          real r2241#1 = RMul(r223F,r2240);
          real r2242#1 = RAdd(r223B,r223E);
          real r2243#1 = RAdd(r2242,r2241);
          real r2244#1 = TensorIndex<tensor[3,2],[0,1]>(femDofs2178);
          real r2245#1 = RMul(r2244,r223A);
          real r2246#1 = TensorIndex<tensor[3,2],[1,1]>(femDofs2178);
          real r2247#1 = RMul(r2246,r223D);
          real r2248#1 = TensorIndex<tensor[3,2],[2,1]>(femDofs2178);
          real r2249#1 = RMul(r2248,r2240);
          real r224A#1 = RAdd(r2245,r2247);
          real r224B#1 = RAdd(r224A,r2249);
          tensor[2] probe_l_102238#1 = <tensor[2]>[r2243,r224B];
          real r2262#1 = TensorIndex<tensor[3,2],[0,0]>(femDofs2178);
          real r2263#2 = TensorIndex<tensor[2,3],[1,0]>(basisResult21AC);
          real r2264#1 = RMul(r2262,r2263);
          real r2265#1 = TensorIndex<tensor[3,2],[1,0]>(femDofs2178);
          real r2266#2 = TensorIndex<tensor[2,3],[1,1]>(basisResult21AC);
          real r2267#1 = RMul(r2265,r2266);
          real r2268#1 = TensorIndex<tensor[3,2],[2,0]>(femDofs2178);
          real r2269#2 = TensorIndex<tensor[2,3],[1,2]>(basisResult21AC);
          real r226A#1 = RMul(r2268,r2269);
          real r226B#1 = RAdd(r2264,r2267);
          real r226C#1 = RAdd(r226B,r226A);
          real r226D#1 = TensorIndex<tensor[3,2],[0,1]>(femDofs2178);
          real r226E#1 = RMul(r226D,r2263);
          real r226F#1 = TensorIndex<tensor[3,2],[1,1]>(femDofs2178);
          real r2270#1 = RMul(r226F,r2266);
          real r2271#1 = TensorIndex<tensor[3,2],[2,1]>(femDofs2178);
          real r2272#1 = RMul(r2271,r2269);
          real r2273#1 = RAdd(r226E,r2270);
          real r2274#1 = RAdd(r2273,r2272);
          tensor[2] probe_l_112261#2 = <tensor[2]>[r226C,r2274];
          real realLit228B#2 = 0.e0;
          real r228C#2 = TensorIndex<tensor[2],[0]>(probe_l_112261);
          real r228D#1 = RMul(realLit228B,r228C);
          real realLit228E#1 = 0.1e1;
          real r228F#2 = TensorIndex<tensor[2],[1]>(probe_l_112261);
          real r2290#1 = RMul(realLit228E,r228F);
          real r2291#1 = RAdd(r228D,r2290);
          real realLit2292#1 = -0.1e1;
          real r2293#1 = RMul(realLit2292,r228C);
          real r2294#1 = RMul(realLit228B,r228F);
          real r2295#1 = RAdd(r2293,r2294);
          tensor[2] op1_e3_l_12228A#1 = <tensor[2]>[r2291,r2295];
          real realLit22A4#4 = 0.e0;
          real r22A5#2 = TensorIndex<tensor[2,2],[0,0]>(op1_e3_l_9220B);
          real r22A6#1 = RMul(realLit22A4,r22A5);
          real realLit22A7#2 = -0.1e1;
          real r22A8#2 = TensorIndex<tensor[2,2],[0,1]>(op1_e3_l_9220B);
          real r22A9#1 = RMul(realLit22A7,r22A8);
          real r22AA#1 = RAdd(r22A6,r22A9);
          real r22AB#2 = TensorIndex<tensor[2,2],[1,0]>(op1_e3_l_9220B);
          real r22AC#1 = RMul(realLit22A4,r22AB);
          real r22AD#2 = TensorIndex<tensor[2,2],[1,1]>(op1_e3_l_9220B);
          real r22AE#1 = RMul(realLit22A7,r22AD);
          real r22AF#1 = RAdd(r22AC,r22AE);
          tensor[2] tensor22B0#1 = <tensor[2]>[r22AA,r22AF];
          real realLit22B1#2 = 0.1e1;
          real r22B2#1 = RMul(realLit22B1,r22A5);
          real r22B3#1 = RMul(realLit22A4,r22A8);
          real r22B4#1 = RAdd(r22B2,r22B3);
          real r22B5#1 = RMul(realLit22B1,r22AB);
          real r22B6#1 = RMul(realLit22A4,r22AD);
          real r22B7#1 = RAdd(r22B5,r22B6);
          tensor[2] tensor22B8#1 = <tensor[2]>[r22B4,r22B7];
          tensor[2,2] op1_e3_l_1322A3#4 = <tensor[2,2]>[tensor22B0,tensor22B8];
          real op1_e3_l_1422D0#4 = VDot<2>(probe_l_102238,op1_e3_l_12228A);
          real r22D4#1 = TensorIndex<tensor[2,2],[0,0]>(op1_e3_l_1322A3);
          real r22D5#1 = RDiv(r22D4,op1_e3_l_1422D0);
          real r22D6#1 = TensorIndex<tensor[2,2],[0,1]>(op1_e3_l_1322A3);
          real r22D7#1 = RDiv(r22D6,op1_e3_l_1422D0);
          tensor[2] tensor22D8#1 = <tensor[2]>[r22D5,r22D7];
          real r22D9#1 = TensorIndex<tensor[2,2],[1,0]>(op1_e3_l_1322A3);
          real r22DA#1 = RDiv(r22D9,op1_e3_l_1422D0);
          real r22DB#1 = TensorIndex<tensor[2,2],[1,1]>(op1_e3_l_1322A3);
          real r22DC#1 = RDiv(r22DB,op1_e3_l_1422D0);
          tensor[2] tensor22DD#1 = <tensor[2]>[r22DA,r22DC];
          tensor[2,2] op1_e3_l_1522D3#4 = <tensor[2,2]>[tensor22D8,tensor22DD];
          real r22EB#2 = TensorIndex<tensor[2],[0]>(compositionl2153);
          real r22EC#1 = TensorIndex<tensor[2,2],[0,0]>(op1_e3_l_1522D3);
          real r22ED#1 = RMul(r22EB,r22EC);
          real r22EE#2 = TensorIndex<tensor[2],[1]>(compositionl2153);
          real r22EF#1 = TensorIndex<tensor[2,2],[1,0]>(op1_e3_l_1522D3);
          real r22F0#1 = RMul(r22EE,r22EF);
          real r22F1#1 = RAdd(r22ED,r22F0);
          real r22F2#1 = TensorIndex<tensor[2,2],[0,1]>(op1_e3_l_1522D3);
          real r22F3#1 = RMul(r22EB,r22F2);
          real r22F4#1 = TensorIndex<tensor[2,2],[1,1]>(op1_e3_l_1522D3);
          real r22F5#1 = RMul(r22EE,r22F4);
          real r22F6#1 = RAdd(r22F3,r22F5);
          tensor[2] grad22EA#1 = <tensor[2]>[r22F1,r22F6];
          goto JOIN2308
        JOIN2308:  preds = [ASSIGN2304,COND2104]
          tensor[2] grad2305#3 = phi(grad22EA,grad2101)
          real cup2306#1 = phi(s1EAC,cup1E13)
          real out2307#3 = phi(faVal1D70,out2102)
          string _t2309#1 = "Out val:";
          Print<[string,real,string]>(_t2309,out2307,_t1A0E);
          string _t230C#1 = "Grad val:";
          Print<[string,tensor[2],string]>(_t230C,grad2305,_t1A0E);
          real _t230F#6 = 0.1e1;
          tensor[3] mcol2311#1 = <tensor[3]>[_t230F,_t230F,_t230F];
          bool _t2313#1 = NEQ<real>(cmin19E0,cmax19E2);
          if _t2313 then goto ASSIGN2317 else goto JOIN2397
        ASSIGN2317:  preds = [COND2315]
          real _t2316#2 = -0.1e1;
          real op1_e3_l_52318#1 = RSub(out2307,cmin19E0);
          real op1_e3_l_6231B#1 = RSub(cmax19E2,cmin19E0);
          real op1_e3_l_7231E#1 = RDiv(op1_e3_l_52318,op1_e3_l_6231B);
          real op1_e3_l_82321#1 = RSub(_t230F,_t2316);
          real op1_e3_l_92324#1 = RMul(op1_e3_l_7231E,op1_e3_l_82321);
          real _t2327#1 = RAdd(_t2316,op1_e3_l_92324);
          real Mtransform232A#1 = Transform<IMAGE1D<double[3]>>(cmap19CC);
          real MxPos232C#1 = RMul(Mtransform232A,_t2327);
          real Ttranslate232F#1 = Translate<IMAGE1D<double[3]>>(cmap19CC);
          real imgPos2331#2 = RAdd(MxPos232C,Ttranslate232F);
          real nd2334#2 = Floor<1>(imgPos2331);
          real f2336#2 = RSub(imgPos2331,nd2334);
          int n2339#1 = RealToInt<1>(nd2334);
          int idx233B#5 = n2339;
          bool isInside233D#1 = IndexInside<IMAGE1D<double[3]>,2>(idx233B,cmap19CC);
          if isInside233D then goto ASSIGN2357 else goto ASSIGN2447
        ASSIGN2357:  preds = [COND233F]
          int ilit2341#1 = 0;
          int addRes2342#1 = IAdd(idx233B,ilit2341);
          int stride2343#2 = 3;
          int offp2344#3 = IMul(stride2343,addRes2342);
          real v0_2345#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap19CC,offp2344);
          int ilit2346#3 = 1;
          int addRes2347#1 = IAdd(idx233B,ilit2346);
          int offp2348#3 = IMul(stride2343,addRes2347);
          real v1_2349#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap19CC,offp2348);
          tensor[2] v_234A#1 = <tensor[2]>[v0_2345,v1_2349];
          int offp234B#1 = IAdd(offp2344,ilit2346);
          real v0_234C#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap19CC,offp234B);
          int offp234D#1 = IAdd(offp2348,ilit2346);
          real v1_234E#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap19CC,offp234D);
          tensor[2] v_234F#1 = <tensor[2]>[v0_234C,v1_234E];
          int offset2350#2 = 2;
          int offp2351#1 = IAdd(offp2344,offset2350);
          real v0_2352#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap19CC,offp2351);
          int offp2353#1 = IAdd(offp2348,offset2350);
          real v1_2354#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap19CC,offp2353);
          tensor[2] v_2355#1 = <tensor[2]>[v0_2352,v1_2354];
          tensor[3,2] voxels2356#1 = <tensor[3,2]>[v_234A,v_234F,v_2355];
          tensor[3,2] ldvox2340#1 = voxels2356;
          goto JOIN2370
        JOIN2370:  preds = [ASSIGN236D,ASSIGN245F]
          tensor[3,2] ldvox236E#3 = phi(ldvox2340,ldvox236F)
          real rlit2372#1 = 0.1e1;
          real idx2373#1 = RSub(f2336,rlit2372);
          tensor[2] kernX_2371#1 = <tensor[2]>[f2336,idx2373];
          real _f237C#1 = 0.1e1;
          real _f237D#1 = 0.1e1;
          tensor[2] a02378#1 = <tensor[2]>[_f237C,_f237D];
          real _f237A#1 = -0.1e1;
          real _f237B#1 = 0.1e1;
          tensor[2] a12379#1 = <tensor[2]>[_f237A,_f237B];
          tensor[2] prod1237E#1 = VMul<2>(kernX_2371,a12379);
          tensor[2] kevalX_d0_2377#3 = VAdd<2>(a02378,prod1237E);
          tensor[2] projIx2388#1 = ProjectLast<tensor[3,2],[0]>(ldvox236E);
          real vdot2389#1 = VDot<2>(projIx2388,kevalX_d0_2377);
          tensor[2] projIx238A#1 = ProjectLast<tensor[3,2],[1]>(ldvox236E);
          real vdot238B#1 = VDot<2>(projIx238A,kevalX_d0_2377);
          tensor[2] projIx238C#1 = ProjectLast<tensor[3,2],[2]>(ldvox236E);
          real vdot238D#1 = VDot<2>(projIx238C,kevalX_d0_2377);
          tensor[3] mcol2387#1 = <tensor[3]>[vdot2389,vdot238B,vdot238D];
          goto JOIN2397
        JOIN2397:  preds = [ASSIGN2395,COND2315]
          tensor[3] mcol2396#7 = phi(mcol2387,mcol2311)
          if light19E4 then goto ASSIGN239A else goto ASSIGN2429
        ASSIGN239A:  preds = [COND2398]
          real _t2399#1 = VIndex<2,0>(grad2305);
          real _t239B#1 = VIndex<2,1>(grad2305);
          real _t239D#1 = -0.1e1;
          tensor[3] N239F#2 = <tensor[3]>[_t2399,_t239B,_t239D];
          real _t23A1#1 = VDot<3>(N239F,L19EE);
          real _t23A4#1 = Max<real>(_t1E96,_t23A1);
          real op1_e3_l_723A6#1 = VDot<3>(rayVec19F2,rayVec19F2);
          real op1_e3_l_823A9#1 = Sqrt(op1_e3_l_723A6);
          real realLit23AD#1 = 0.1e1;
          real op1_e3_l_923AC#1 = RDiv(realLit23AD,op1_e3_l_823A9);
          tensor[3] op1_e3_l_1023B1#1 = VScale<3>(op1_e3_l_923AC,rayVec19F2);
          tensor[3] op1_e3_l_1123B4#1 = VNeg<3>(op1_e3_l_1023B1);
          tensor[3] op1_e3_l_1723B7#3 = VAdd<3>(op1_e3_l_1123B4,L19EE);
          real op1_e3_l_1923BA#1 = VDot<3>(op1_e3_l_1723B7,op1_e3_l_1723B7);
          real op1_e3_l_2023BD#1 = Sqrt(op1_e3_l_1923BA);
          real realLit23C1#1 = 0.1e1;
          real op1_e3_l_2723C0#1 = RDiv(realLit23C1,op1_e3_l_2023BD);
          real op1_e3_l_2823C5#1 = VDot<3>(N239F,op1_e3_l_1723B7);
          real _t23C8#1 = RMul(op1_e3_l_2723C0,op1_e3_l_2823C5);
          real _t23CB#1 = Max<real>(_t1E96,_t23C8);
          real _t23CD#1 = MathFn<pow>(_t23CB,phongSp19EC);
          real op1_e3_l_1723CF#1 = RSub(cup2306,camNearVsp19F4);
          real op1_e3_l_1823D2#1 = RSub(camFarVsp19F6,camNearVsp19F4);
          real op1_e3_l_1923D5#1 = RDiv(op1_e3_l_1723CF,op1_e3_l_1823D2);
          tensor[3] op1_e3_l_2023D8#1 = VSub<3>(mcfar19DE,mcnear19DC);
          tensor[3] op1_e3_l_2123DB#1 = VScale<3>(op1_e3_l_1923D5,op1_e3_l_2023D8);
          tensor[3] op1_e3_l_2223DE#6 = VAdd<3>(mcnear19DC,op1_e3_l_2123DB);
          tensor[3] op1_e3_l_2923E1#1 = VScale<3>(phongKa19E6,mcol2396);
          real r23E5#1 = TensorIndex<tensor[3],[0]>(mcol2396);
          real r23E6#1 = TensorIndex<tensor[3],[0]>(op1_e3_l_2223DE);
          real r23E7#3 = RMul(_t23A4,phongKd19E8);
          real r23E8#1 = RMul(r23E7,r23E5);
          real r23E9#1 = RMul(r23E8,r23E6);
          real r23EA#1 = TensorIndex<tensor[3],[1]>(mcol2396);
          real r23EB#1 = TensorIndex<tensor[3],[1]>(op1_e3_l_2223DE);
          real r23EC#1 = RMul(r23E7,r23EA);
          real r23ED#1 = RMul(r23EC,r23EB);
          real r23EE#1 = TensorIndex<tensor[3],[2]>(mcol2396);
          real r23EF#1 = TensorIndex<tensor[3],[2]>(op1_e3_l_2223DE);
          real r23F0#1 = RMul(r23E7,r23EE);
          real r23F1#1 = RMul(r23F0,r23EF);
          tensor[3] op1_e3_l_3023E4#1 = <tensor[3]>[r23E9,r23ED,r23F1];
          real r2402#1 = TensorIndex<tensor[3],[0]>(op1_e3_l_2223DE);
          real r2403#3 = RMul(_t23CD,phongKs19EA);
          real r2404#1 = RMul(r2403,r2402);
          real r2405#1 = TensorIndex<tensor[3],[1]>(op1_e3_l_2223DE);
          real r2406#1 = RMul(r2403,r2405);
          real r2407#1 = TensorIndex<tensor[3],[2]>(op1_e3_l_2223DE);
          real r2408#1 = RMul(r2403,r2407);
          tensor[3] op1_e3_l_312401#1 = <tensor[3]>[r2404,r2406,r2408];
          tensor[3] v2413#1 = VAdd<3>(op1_e3_l_2923E1,op1_e3_l_3023E4);
          tensor[3] fin2412#3 = VAdd<3>(v2413,op1_e3_l_312401);
          real _t2417#1 = VIndex<3,0>(fin2412);
          real _t2419#1 = VIndex<3,1>(fin2412);
          real _t241B#1 = VIndex<3,2>(fin2412);
          tensor[4] rgba241D#1 = <tensor[4]>[_t2417,_t2419,_t241B,_t230F];
          goto JOIN2421
        JOIN2421:  preds = [ASSIGN241E,ASSIGN242E]
          tensor[4] rgba241F#1 = phi(rgba241D,rgba2420)
          self.intersectionItter = _t1EA6;
          self.s = s1EAC;
          self.e = e1EAB;
          self.out = out2307;
          self.rgba = rgba241F;
          stabilize
          goto JOIN1EF5
        ASSIGN2429:  preds = [COND2398]
          real _t2428#1 = VIndex<3,0>(mcol2396);
          real _t242A#1 = VIndex<3,1>(mcol2396);
          real _t242C#1 = VIndex<3,2>(mcol2396);
          tensor[4] rgba2420#1 = <tensor[4]>[_t2428,_t242A,_t242C,_t230F];
          goto JOIN2421
        ASSIGN2447:  preds = [COND233F]
          int ilit242F#1 = 0;
          int addRes2430#1 = IAdd(idx233B,ilit242F);
          int ix2431#1 = ControlIndex<IMAGE1D<double[3]>,clamp,0>(cmap19CC,addRes2430);
          int stride2432#2 = 3;
          int offp2433#3 = IMul(stride2432,ix2431);
          real v0_2434#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap19CC,offp2433);
          int ilit2435#3 = 1;
          int addRes2436#1 = IAdd(idx233B,ilit2435);
          int ix2437#1 = ControlIndex<IMAGE1D<double[3]>,clamp,0>(cmap19CC,addRes2436);
          int offp2438#3 = IMul(stride2432,ix2437);
          real v1_2439#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap19CC,offp2438);
          tensor[2] v_243A#1 = <tensor[2]>[v0_2434,v1_2439];
          int offp243B#1 = IAdd(offp2433,ilit2435);
          real v0_243C#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap19CC,offp243B);
          int offp243D#1 = IAdd(offp2438,ilit2435);
          real v1_243E#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap19CC,offp243D);
          tensor[2] v_243F#1 = <tensor[2]>[v0_243C,v1_243E];
          int offset2440#2 = 2;
          int offp2441#1 = IAdd(offp2433,offset2440);
          real v0_2442#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap19CC,offp2441);
          int offp2443#1 = IAdd(offp2438,offset2440);
          real v1_2444#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap19CC,offp2443);
          tensor[2] v_2445#1 = <tensor[2]>[v0_2442,v1_2444];
          tensor[3,2] voxels2446#1 = <tensor[3,2]>[v_243A,v_243F,v_2445];
          tensor[3,2] ldvox236F#1 = voxels2446;
          goto JOIN2370
        ASSIGN2460:  preds = [COND1EC5]
          bool _t1EC9#1 = false;
          goto JOIN1ECA
        ASSIGN2462:  preds = [COND1EBF]
          string _t2461#1 = "=========\n";
          Print<[string]>(_t2461);
          goto JOIN1EF7
        ASSIGN2466:  preds = [COND1EB9]
          real _t2464#1 = Abs<real>(fm1E8A);
          bool _t2467#1 = LT<real>(_t2464,eps19D6);
          if _t2467 then goto ASSIGN246B else goto ASSIGN246F
        ASSIGN246B:  preds = [COND2469]
          bool _t246A#1 = true;
          goto JOIN246D
        JOIN246D:  preds = [ASSIGN246B,ASSIGN2470]
          bool _t1EBD#1 = phi(_t246A,_t246C)
          goto JOIN1EBE
        ASSIGN246F:  preds = [COND2469]
          int _t246E#1 = 32;
          bool _t246C#1 = GT<int>(intersectionItter1E94,_t246E);
          goto JOIN246D
        COND2471:  preds = [COND1EAA]
          if _t1E98 then goto JOIN2474 else goto ASSIGN2486
        JOIN2474:  preds = [COND2471,JOIN248A]
          int _t2472#1 = phi(_t1E92,_t2473)
          if _t1E9E then goto JOIN2478 else goto ASSIGN2480
        JOIN2478:  preds = [COND2475,JOIN2484]
          int _t2476#1 = phi(_t1E92,_t2477)
          int _t2479#1 = IMul(_t2472,_t2476);
          bool _t247B#1 = GT<int>(_t2479,_t1EA6);
          if _t247B then goto JOIN247E else goto JOIN247E
        JOIN247E:  preds = [COND247D,COND247D]
          real s1EAD#1 = phi(cup1E13,s1E05)
          goto JOIN1EAE
        ASSIGN2480:  preds = [COND2475]
          bool _t247F#1 = LT<real>(fm1E8A,_t1E96);
          if _t247F then goto ASSIGN2483 else goto JOIN2484
        ASSIGN2483:  preds = [COND2481]
          int _t2482#1 = -1;
          goto JOIN2484
        JOIN2484:  preds = [ASSIGN2483,COND2481]
          int _t2477#1 = phi(_t2482,_t1EA6)
          goto JOIN2478
        ASSIGN2486:  preds = [COND2471]
          bool _t2485#1 = LT<real>(fa1D7D,_t1E96);
          if _t2485 then goto ASSIGN2489 else goto JOIN248A
        ASSIGN2489:  preds = [COND2487]
          int _t2488#1 = -1;
          goto JOIN248A
        JOIN248A:  preds = [ASSIGN2489,COND2487]
          int _t2473#1 = phi(_t2488,_t1EA6)
          goto JOIN2474
        ASSIGN248C:  preds = [COND1EA0]
          bool _t248B#1 = LT<real>(fm1E8A,_t1E96);
          if _t248B then goto ASSIGN248F else goto ASSIGN2492
        ASSIGN248F:  preds = [COND248D]
          int _t248E#1 = -1;
          goto JOIN2491
        JOIN2491:  preds = [ASSIGN248F,ASSIGN2492]
          int _t1EA2#1 = phi(_t248E,_t2490)
          goto JOIN1EA3
        ASSIGN2492:  preds = [COND248D]
          int _t2490#1 = 0;
          goto JOIN2491
        ASSIGN2494:  preds = [COND1E9A]
          bool _t2493#1 = LT<real>(fa1D7D,_t1E96);
          if _t2493 then goto ASSIGN2497 else goto ASSIGN249A
        ASSIGN2497:  preds = [COND2495]
          int _t2496#1 = -1;
          goto JOIN2499
        JOIN2499:  preds = [ASSIGN2497,ASSIGN249A]
          int _t1E9C#1 = phi(_t2496,_t2498)
          goto JOIN1E9D
        ASSIGN249A:  preds = [COND2495]
          int _t2498#1 = 0;
          goto JOIN2499
    end update
  end ray
## initial strand creation
  GRID(2)
    ENTRY249B:  preds = []
      int iresU249C#1 = globals.iresU16FD;
      int iresV249E#1 = globals.iresV16FE;
      int _t24A0#2 = 0;
      int _t24A2#2 = 1;
      int _t24A4#1 = ISub(iresU249C,_t24A2);
      int[] _t24A6#1 = Range(_t24A0,_t24A4);
    FOREACH24A9:  preds = [ASSIGN24A7,NEXT24B2]
      foreach (vi24A8 in _t24A6) on exit goto RETURN24B3
      int _t24AA#1 = ISub(iresV249E,_t24A2);
      int[] _t24AC#1 = Range(_t24A0,_t24AA);
    FOREACH24AF:  preds = [ASSIGN24AD,NEXT24B1]
      foreach (ui24AE in _t24AC) on exit goto NEXT24B2
      new ray(ui24AE,vi24A8);
      goto FOREACH24AF
    NEXT24B2:  preds = [FOREACH24AF]
      goto FOREACH24A9
    RETURN24B3:  preds = [FOREACH24A9]
      return
#### end program ####
##### low-ir: after contraction(1) ####
## properties
  GlobalInit StrandArray HasStartMethod ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[]) HasInputs HasGlobals
## globals
  input isoval16F7 (isoval) = <default>
  input thick16F8 (thick) = <default>
  input camEye16F9 (camEye) = <default>
  input camAt16FA (camAt) = <default>
  input camUp16FB (camUp) = <default>
  input camFOV16FC (camFOV) = <default>
  input iresU16FD (iresU) = <default>
  input iresV16FE (iresV) = <default>
  input camNear16FF (camNear) = <default>
  input camFar1700 (camFar) = <default>
  input refStep1701 (refStep) = <default>
  input rayStep1702 (rayStep) = <default>
  input a1703 (a) = <no-default>
  input 0b0472_intermedateGlobal1704 (b) = <no-default>
  input 0c0474_intermedateGlobal1705 (c) = <no-default>
  input eps1706 (eps) = <default>
  input indecies1707 (indecies) = <no-default>
  input times1708 (times) = <no-default>
  input cells1709 (cells) = <no-default>
  input mcnear170A (mcnear) = <default>
  input mcfar170B (mcfar) = <default>
  input cmap170C (cmap) = image("/home/teocollin/gitcode/diderot/tests/lipRay/find/cmap.nrrd")
  input cmin170D (cmin) = <default>
  input cmax170E (cmax) = <default>
  input light170F (light) = <default>
  input phongKa1710 (phongKa) = <default>
  input phongKd1711 (phongKd) = <default>
  input phongKs1712 (phongKs) = <default>
  input phongSp1713 (phongSp) = <default>
  input maxAlpha1714 (maxAlpha) = <default>
  input lightVsp1715 (lightVsp) = <default>
  global femData:MeshCell[] 0cell_a1716
  global femData:FemFunc c1717
  global real camNearVsp1718
  global real camFarVsp1719
  global tensor[3] camN171A
  global tensor[3] camU171B
  global tensor[3] camV171C
  global real camVmax171D
  global real camUmax171E
  global tensor[3] L171F
## functions
  function femData:MeshPos _0A7F_msh_newtonInverse1A34 (tensor[2] pos1A35#3, int cellInt1A36#2, femData:Mesh mesh1A37#12) {
    ENTRY1A38:  preds = []
      real _t1A39#2 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
      tensor[2] xn1A3B#1 = <tensor[2]>[_t1A39,_t1A39];
      int _t1A3D#1 = 0;
      int _t1A3F#1 = 16;
      int[] _t1A41#1 = Range(_t1A3D,_t1A3F);
    FOREACH1A44:  preds = [ASSIGN1A42,NEXT1C9B]
      foreach (itter1A43 in _t1A41) on exit goto ASSIGN1CA0
        tensor[2] xn1BBB#3 = phi(xn1A3B,xn1C2F)
      int ilit1A46#1 = 3;
      int mulRes1A47#3 = IMul(cellInt1A36,ilit1A46);
      int addRes1A49#1 = mulRes1A47;
      int idx1A4A#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(mesh1A37,addRes1A49);
      int ilit1A4B#1 = 1;
      int addRes1A4C#1 = IAdd(mulRes1A47,ilit1A4B);
      int idx1A4D#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(mesh1A37,addRes1A4C);
      int ilit1A4E#1 = 2;
      int addRes1A4F#1 = IAdd(mulRes1A47,ilit1A4E);
      int idx1A50#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(mesh1A37,addRes1A4F);
      int ilit1A61#3 = 2;
      int idx1A62#1 = idx1A4A;
      int mulRes1A63#2 = IMul(ilit1A61,idx1A62);
      int addRes1A64#1 = mulRes1A63;
      int ilit1A65#3 = 1;
      int addRes1A66#1 = IAdd(ilit1A65,mulRes1A63);
      real dof_load1A67#5 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh1A37,addRes1A64);
      real dof_load1A68#5 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh1A37,addRes1A66);
      int idx1A6A#1 = idx1A4D;
      int mulRes1A6B#2 = IMul(ilit1A61,idx1A6A);
      int addRes1A6C#1 = mulRes1A6B;
      int addRes1A6D#1 = IAdd(ilit1A65,mulRes1A6B);
      real dof_load1A6E#5 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh1A37,addRes1A6C);
      real dof_load1A6F#5 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh1A37,addRes1A6D);
      int idx1A71#1 = idx1A50;
      int mulRes1A72#2 = IMul(ilit1A61,idx1A71);
      int addRes1A73#1 = mulRes1A72;
      int addRes1A74#1 = IAdd(ilit1A65,mulRes1A72);
      real dof_load1A75#5 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh1A37,addRes1A73);
      real dof_load1A76#5 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh1A37,addRes1A74);
      real coeff1A96#1 = -0.1e1;
      real one1A97#3 = 0.1e1;
      real prod1A98#2 = RMul(one1A97,one1A97);
      real basisEval1A99#4 = RMul(coeff1A96,prod1A98);
      real basisEval1A9A#4 = RMul(one1A97,prod1A98);
      real basisEval1A9B#4 = 0.e0;
      real r1AAC#2 = dof_load1A67;
      real r1AAD#2 = basisEval1A99;
      real r1AAE#1 = RMul(r1AAC,r1AAD);
      real r1AAF#2 = dof_load1A6E;
      real r1AB0#2 = basisEval1A9A;
      real r1AB1#1 = RMul(r1AAF,r1AB0);
      real r1AB2#2 = dof_load1A75;
      real r1AB3#2 = basisEval1A9B;
      real r1AB4#1 = RMul(r1AB2,r1AB3);
      real r1AB5#1 = RAdd(r1AAE,r1AB1);
      real r1AB6#1 = RAdd(r1AB5,r1AB4);
      real r1AB7#2 = basisEval1A99;
      real r1AB8#1 = RMul(r1AAC,r1AB7);
      real r1AB9#2 = basisEval1A9B;
      real r1ABA#1 = RMul(r1AAF,r1AB9);
      real r1ABB#2 = basisEval1A9A;
      real r1ABC#1 = RMul(r1AB2,r1ABB);
      real r1ABD#1 = RAdd(r1AB8,r1ABA);
      real r1ABE#1 = RAdd(r1ABD,r1ABC);
      real r1AC0#2 = dof_load1A68;
      real r1AC1#1 = RMul(r1AC0,r1AAD);
      real r1AC2#2 = dof_load1A6F;
      real r1AC3#1 = RMul(r1AC2,r1AB0);
      real r1AC4#2 = dof_load1A76;
      real r1AC5#1 = RMul(r1AC4,r1AB3);
      real r1AC6#1 = RAdd(r1AC1,r1AC3);
      real r1AC7#1 = RAdd(r1AC6,r1AC5);
      real r1AC8#1 = RMul(r1AC0,r1AB7);
      real r1AC9#1 = RMul(r1AC2,r1AB9);
      real r1ACA#1 = RMul(r1AC4,r1ABB);
      real r1ACB#1 = RAdd(r1AC8,r1AC9);
      real r1ACC#1 = RAdd(r1ACB,r1ACA);
      real realLit1AF3#4 = 0.e0;
      real r1AF4#2 = r1AB6;
      real r1AF5#1 = RMul(realLit1AF3,r1AF4);
      real realLit1AF6#2 = -0.1e1;
      real r1AF7#2 = r1AC7;
      real r1AF8#1 = RMul(realLit1AF6,r1AF7);
      real r1AF9#1 = RAdd(r1AF5,r1AF8);
      real r1AFA#2 = r1ABE;
      real r1AFB#1 = RMul(realLit1AF3,r1AFA);
      real r1AFC#2 = r1ACC;
      real r1AFD#1 = RMul(realLit1AF6,r1AFC);
      real r1AFE#1 = RAdd(r1AFB,r1AFD);
      real realLit1B00#2 = 0.1e1;
      real r1B01#1 = RMul(realLit1B00,r1AF4);
      real r1B02#1 = RMul(realLit1AF3,r1AF7);
      real r1B03#1 = RAdd(r1B01,r1B02);
      real r1B04#1 = RMul(realLit1B00,r1AFA);
      real r1B05#1 = RMul(realLit1AF3,r1AFC);
      real r1B06#1 = RAdd(r1B04,r1B05);
      real r1B20#1 = dof_load1A67;
      real r1B21#2 = basisEval1A99;
      real r1B22#1 = RMul(r1B20,r1B21);
      real r1B23#1 = dof_load1A6E;
      real r1B24#2 = basisEval1A9A;
      real r1B25#1 = RMul(r1B23,r1B24);
      real r1B26#1 = dof_load1A75;
      real r1B27#2 = basisEval1A9B;
      real r1B28#1 = RMul(r1B26,r1B27);
      real r1B29#1 = RAdd(r1B22,r1B25);
      real r1B2A#1 = RAdd(r1B29,r1B28);
      real r1B2B#1 = dof_load1A68;
      real r1B2C#1 = RMul(r1B2B,r1B21);
      real r1B2D#1 = dof_load1A6F;
      real r1B2E#1 = RMul(r1B2D,r1B24);
      real r1B2F#1 = dof_load1A76;
      real r1B30#1 = RMul(r1B2F,r1B27);
      real r1B31#1 = RAdd(r1B2C,r1B2E);
      real r1B32#1 = RAdd(r1B31,r1B30);
      tensor[2] probe_l_121B1F#1 = <tensor[2]>[r1B2A,r1B32];
      real r1B49#1 = dof_load1A67;
      real r1B4A#2 = basisEval1A99;
      real r1B4B#1 = RMul(r1B49,r1B4A);
      real r1B4C#1 = dof_load1A6E;
      real r1B4D#2 = basisEval1A9B;
      real r1B4E#1 = RMul(r1B4C,r1B4D);
      real r1B4F#1 = dof_load1A75;
      real r1B50#2 = basisEval1A9A;
      real r1B51#1 = RMul(r1B4F,r1B50);
      real r1B52#1 = RAdd(r1B4B,r1B4E);
      real r1B53#1 = RAdd(r1B52,r1B51);
      real r1B54#1 = dof_load1A68;
      real r1B55#1 = RMul(r1B54,r1B4A);
      real r1B56#1 = dof_load1A6F;
      real r1B57#1 = RMul(r1B56,r1B4D);
      real r1B58#1 = dof_load1A76;
      real r1B59#1 = RMul(r1B58,r1B50);
      real r1B5A#1 = RAdd(r1B55,r1B57);
      real r1B5B#1 = RAdd(r1B5A,r1B59);
      real realLit1B72#2 = 0.e0;
      real r1B73#2 = r1B53;
      real r1B74#1 = RMul(realLit1B72,r1B73);
      real realLit1B75#1 = 0.1e1;
      real r1B76#2 = r1B5B;
      real r1B77#1 = RMul(realLit1B75,r1B76);
      real r1B78#1 = RAdd(r1B74,r1B77);
      real realLit1B79#1 = -0.1e1;
      real r1B7A#1 = RMul(realLit1B79,r1B73);
      real r1B7B#1 = RMul(realLit1B72,r1B76);
      real r1B7C#1 = RAdd(r1B7A,r1B7B);
      tensor[2] op1_e3_l_141B71#1 = <tensor[2]>[r1B78,r1B7C];
      real realLit1B8B#4 = 0.e0;
      real r1B8C#2 = r1AF9;
      real r1B8D#1 = RMul(realLit1B8B,r1B8C);
      real realLit1B8E#2 = -0.1e1;
      real r1B8F#2 = r1AFE;
      real r1B90#1 = RMul(realLit1B8E,r1B8F);
      real r1B91#1 = RAdd(r1B8D,r1B90);
      real r1B92#2 = r1B03;
      real r1B93#1 = RMul(realLit1B8B,r1B92);
      real r1B94#2 = r1B06;
      real r1B95#1 = RMul(realLit1B8E,r1B94);
      real r1B96#1 = RAdd(r1B93,r1B95);
      real realLit1B98#2 = 0.1e1;
      real r1B99#1 = RMul(realLit1B98,r1B8C);
      real r1B9A#1 = RMul(realLit1B8B,r1B8F);
      real r1B9B#1 = RAdd(r1B99,r1B9A);
      real r1B9C#1 = RMul(realLit1B98,r1B92);
      real r1B9D#1 = RMul(realLit1B8B,r1B94);
      real r1B9E#1 = RAdd(r1B9C,r1B9D);
      real op1_e3_l_161BB7#4 = VDot<2>(probe_l_121B1F,op1_e3_l_141B71);
      real varAcc1BBC#1 = VIndex<2,0>(xn1BBB);
      real varAcc1BBD#1 = VIndex<2,1>(xn1BBB);
      real coeff1BBE#2 = -0.1e1;
      real iden1BBF#1 = varAcc1BBC;
      real one1BC0#7 = 0.1e1;
      real prod1BC1#2 = RMul(iden1BBF,one1BC0);
      real iden1BC2#1 = varAcc1BBD;
      real prod1BC3#2 = RMul(one1BC0,iden1BC2);
      real prod1BC4#1 = RMul(one1BC0,one1BC0);
      real mult1BC5#1 = RMul(one1BC0,prod1BC4);
      real mult1BC6#1 = RMul(coeff1BBE,prod1BC3);
      real mult1BC7#1 = RMul(coeff1BBE,prod1BC1);
      real sum1BC8#1 = RAdd(mult1BC6,mult1BC7);
      real sum1BC9#1 = RAdd(mult1BC5,sum1BC8);
      real intermediate1BCA#2 = sum1BC9;
      real basisEval1BCB#2 = RMul(one1BC0,prod1BC1);
      real basisEval1BCC#2 = RMul(one1BC0,prod1BC3);
      real r1BE2#1 = dof_load1A67;
      real r1BE3#2 = intermediate1BCA;
      real r1BE4#1 = RMul(r1BE2,r1BE3);
      real r1BE5#1 = dof_load1A6E;
      real r1BE6#2 = basisEval1BCB;
      real r1BE7#1 = RMul(r1BE5,r1BE6);
      real r1BE8#1 = dof_load1A75;
      real r1BE9#2 = basisEval1BCC;
      real r1BEA#1 = RMul(r1BE8,r1BE9);
      real r1BEB#1 = RAdd(r1BE4,r1BE7);
      real r1BEC#1 = RAdd(r1BEB,r1BEA);
      real r1BED#1 = dof_load1A68;
      real r1BEE#1 = RMul(r1BED,r1BE3);
      real r1BEF#1 = dof_load1A6F;
      real r1BF0#1 = RMul(r1BEF,r1BE6);
      real r1BF1#1 = dof_load1A76;
      real r1BF2#1 = RMul(r1BF1,r1BE9);
      real r1BF3#1 = RAdd(r1BEE,r1BF0);
      real r1BF4#1 = RAdd(r1BF3,r1BF2);
      tensor[2] probe_l_171BE1#1 = <tensor[2]>[r1BEC,r1BF4];
      real r1C0B#1 = r1B91;
      real r1C0C#1 = RDiv(r1C0B,op1_e3_l_161BB7);
      real r1C0D#1 = r1B96;
      real r1C0E#1 = RDiv(r1C0D,op1_e3_l_161BB7);
      tensor[2] tensor1C0F#2 = <tensor[2]>[r1C0C,r1C0E];
      real r1C10#1 = r1B9B;
      real r1C11#1 = RDiv(r1C10,op1_e3_l_161BB7);
      real r1C12#1 = r1B9E;
      real r1C13#1 = RDiv(r1C12,op1_e3_l_161BB7);
      tensor[2] tensor1C14#2 = <tensor[2]>[r1C11,r1C13];
      tensor[2] op1_e3_l_191C21#2 = VSub<2>(probe_l_171BE1,pos1A35);
      tensor[2] projParam1C25#1 = tensor1C0F;
      real vdot1C26#1 = VDot<2>(projParam1C25,op1_e3_l_191C21);
      tensor[2] projParam1C27#1 = tensor1C14;
      real vdot1C28#1 = VDot<2>(projParam1C27,op1_e3_l_191C21);
      tensor[2] op1_e3_l_201C24#1 = <tensor[2]>[vdot1C26,vdot1C28];
      tensor[2] xn1C2F#4 = VSub<2>(xn1BBB,op1_e3_l_201C24);
      real _t1C32#2 = 0.1e-7;
      real _t1C34#1 = RMul(_t1C32,_t1C32);
      real r1C38#1 = dof_load1A67;
      real r1C39#2 = intermediate1BCA;
      real r1C3A#1 = RMul(r1C38,r1C39);
      real r1C3B#1 = dof_load1A6E;
      real r1C3C#2 = basisEval1BCB;
      real r1C3D#1 = RMul(r1C3B,r1C3C);
      real r1C3E#1 = dof_load1A75;
      real r1C3F#2 = basisEval1BCC;
      real r1C40#1 = RMul(r1C3E,r1C3F);
      real r1C41#1 = RAdd(r1C3A,r1C3D);
      real r1C42#1 = RAdd(r1C41,r1C40);
      real r1C43#1 = dof_load1A68;
      real r1C44#1 = RMul(r1C43,r1C39);
      real r1C45#1 = dof_load1A6F;
      real r1C46#1 = RMul(r1C45,r1C3C);
      real r1C47#1 = dof_load1A76;
      real r1C48#1 = RMul(r1C47,r1C3F);
      real r1C49#1 = RAdd(r1C44,r1C46);
      real r1C4A#1 = RAdd(r1C49,r1C48);
      tensor[2] probe_l_251C37#1 = <tensor[2]>[r1C42,r1C4A];
      tensor[2] op1_e3_l_271C60#2 = VSub<2>(probe_l_251C37,pos1A35);
      tensor[2] projParam1C64#1 = tensor1C0F;
      real vdot1C65#1 = VDot<2>(projParam1C64,op1_e3_l_271C60);
      tensor[2] projParam1C66#1 = tensor1C14;
      real vdot1C67#1 = VDot<2>(projParam1C66,op1_e3_l_271C60);
      tensor[2] op1_e3_l_381C63#2 = <tensor[2]>[vdot1C65,vdot1C67];
      real _t1C6E#1 = VDot<2>(op1_e3_l_381C63,op1_e3_l_381C63);
      bool _t1C71#1 = GTE<real>(_t1C34,_t1C6E);
      if _t1C71 then goto ASSIGN1C75 else goto JOIN1C9A
    ASSIGN1C75:  preds = [COND1C73]
      real _t1C74#3 = 0.1e1;
      real _t1C76#3 = 0.1e-8;
      real _t1C78#1 = RAdd(_t1C74,_t1C76);
      tensor[2] _t1C7B#1 = <tensor[2]>[_t1C74,_t1C74];
      real _t1C7D#1 = VDot<2>(_t1C7B,xn1C2F);
      bool _t1C80#1 = GT<real>(_t1C78,_t1C7D);
      tensor[2] _t1C82#1 = <tensor[2]>[_t1C76,_t1C76];
      tensor[2] _t1C84#2 = VAdd<2>(_t1C82,xn1C2F);
      real _t1C87#1 = VIndex<2,0>(_t1C84);
      real _t1C89#2 = -0.e0;
      bool _t1C8B#1 = GT<real>(_t1C87,_t1C89);
      real _t1C8D#1 = VIndex<2,1>(_t1C84);
      bool _t1C8F#1 = GT<real>(_t1C8D,_t1C89);
      bool _t1C91#1 = BAnd(_t1C8B,_t1C8F);
      bool _t1C93#1 = BAnd(_t1C80,_t1C91);
      if _t1C93 then goto ASSIGN1C97 else goto ASSIGN1C9D
    ASSIGN1C97:  preds = [COND1C95]
      femData:MeshPos _t1C96#1 = ExtractFemItemN<[femData:Mesh,int,tensor[2],tensor[2]],femData:MeshPos,AllBuild(MeshPos),0000,"",[],int>(mesh1A37,cellInt1A36,xn1C2F,pos1A35);
      return _t1C96
      goto JOIN1C99
    JOIN1C99:  preds = [*RETURN(_t1C96)1C98,*RETURN(_t1C9C)1C9E]
      goto JOIN1C9A
    JOIN1C9A:  preds = [*JOIN1C99,COND1C73]
      goto FOREACH1A44
    ASSIGN1C9D:  preds = [COND1C95]
      femData:MeshPos _t1C9C#1 = ExtractFemItemN<[femData:Mesh],femData:MeshPos,InvalidBuild(MeshPos),0000,"",[],int>(mesh1A37);
      return _t1C9C
      goto JOIN1C99
    ASSIGN1CA0:  preds = [FOREACH1A44]
      femData:MeshPos _t1C9F#1 = ExtractFemItemN<[femData:Mesh],femData:MeshPos,InvalidBuild(MeshPos),0000,"",[],int>(mesh1A37);
      return _t1C9F
}
## input initialization
  ENTRY1722:  preds = []
    real isoval1723#1 = 0.2e0;
    globals.isoval16F7 = isoval1723;
    real thick1726#1 = 0.7e-1;
    globals.thick16F8 = thick1726;
    real _t1729#2 = 0.3e1;
    real _t172B#1 = -0.3e1;
    tensor[3] camEye172D#1 = <tensor[3]>[_t1729,_t172B,_t1729];
    globals.camEye16F9 = camEye172D;
    real _t1730#5 = 0.5e0;
    tensor[3] camAt1732#1 = <tensor[3]>[_t1730,_t1730,_t1730];
    globals.camAt16FA = camAt1732;
    real _t1735#4 = 0.e0;
    real _t1737#7 = 0.1e1;
    tensor[3] camUp1739#2 = <tensor[3]>[_t1735,_t1735,_t1737];
    globals.camUp16FB = camUp1739;
    real camFOV173C#1 = 0.137e2;
    globals.camFOV16FC = camFOV173C;
    int iresU173F#2 = 10;
    globals.iresU16FD = iresU173F;
    globals.iresV16FE = iresU173F;
    real camNear1743#1 = -0.2e1;
    globals.camNear16FF = camNear1743;
    real camFar1746#1 = 0.5e1;
    globals.camFar1700 = camFar1746;
    globals.refStep1701 = _t1737;
    real rayStep174A#1 = 0.1e-1;
    globals.rayStep1702 = rayStep174A;
    real eps174D#1 = 0.1e-5;
    globals.eps1706 = eps174D;
    tensor[3] mcnear1750#2 = <tensor[3]>[_t1737,_t1737,_t1737];
    globals.mcnear170A = mcnear1750;
    globals.mcfar170B = mcnear1750;
    globals.cmin170D = _t1735;
    globals.cmax170E = _t1737;
    bool light1756#1 = true;
    globals.light170F = light1756;
    globals.phongKa1710 = _t1730;
    globals.phongKd1711 = _t1730;
    globals.phongKs1712 = _t1735;
    real phongSp175C#1 = 0.6e2;
    globals.phongSp1713 = phongSp175C;
    globals.maxAlpha1714 = _t1737;
    globals.lightVsp1715 = camUp1739;
    return
## global-variable initialization
  ENTRY1762:  preds = []
    tensor[3] camEye1763#1 = globals.camEye16F9;
    tensor[3] camAt1765#1 = globals.camAt16FA;
    tensor[3] camUp1767#3 = globals.camUp16FB;
    real camFOV1769#1 = globals.camFOV16FC;
    int iresU176B#1 = globals.iresU16FD;
    int iresV176D#1 = globals.iresV16FE;
    real camNear176F#1 = globals.camNear16FF;
    real camFar1771#1 = globals.camFar1700;
    femData:Mesh a1773#3 = globals.a1703;
    femData:Space 0b0472_intermedateGlobal1775#1 = globals.0b0472_intermedateGlobal1704;
    femData:FemFunc 0c0474_intermedateGlobal1777#1 = globals.0c0474_intermedateGlobal1705;
    tensor[3] lightVsp177B#5 = globals.lightVsp1715;
    int _t177D#1 = 0;
    int _t177F#1 = 1;
    int _t1781#1 = ExtractFemItem<int,NumCell(Mesh)>(a1773);
    int _t1783#1 = ISub(_t1781,_t177F);
    int[] _t1785#1 = Range(_t177D,_t1783);
    femData:MeshCell[] _t1787#1 = <femData:MeshCell[]>{};
  FOREACH178A:  preds = [ASSIGN1788,NEXT1790]
    foreach (_t1789 in _t1785) on exit goto GASSIGN1791
      femData:MeshCell[] _t178E#2 = phi(_t1787,_t178D)
    femData:MeshCell _t178B#1 = LoadFem<femData:MeshCell>(a1773,_t1789);
    femData:MeshCell[] _t178D#1 = Append<femData:MeshCell>(_t178E,_t178B);
    goto FOREACH178A
  GASSIGN1791:  preds = [FOREACH178A]
    globals.0cell_a1716 = _t178E;
    femData:Space b1792#1 = LoadFem<femData:Space>(0b0472_intermedateGlobal1775,a1773);
    femData:FemFunc c1794#1 = LoadFem<femData:FemFunc>(0c0474_intermedateGlobal1777,b1792);
    globals.c1717 = c1794;
    tensor[3] op1_e3_l_31797#9 = VSub<3>(camAt1765,camEye1763);
    real op1_e3_l_5179A#1 = VDot<3>(op1_e3_l_31797,op1_e3_l_31797);
    real op1_e3_l_6179D#5 = Sqrt(op1_e3_l_5179A);
    real camNearVsp17A0#1 = RAdd(camNear176F,op1_e3_l_6179D);
    globals.camNearVsp1718 = camNearVsp17A0;
    real camFarVsp17A4#1 = RAdd(camFar1771,op1_e3_l_6179D);
    globals.camFarVsp1719 = camFarVsp17A4;
    real realLit17A9#1 = 0.1e1;
    real op1_e3_l_917A8#6 = RDiv(realLit17A9,op1_e3_l_6179D);
    tensor[3] camN17AD#4 = VScale<3>(op1_e3_l_917A8,op1_e3_l_31797);
    globals.camN171A = camN17AD;
    real realLit17B2#3 = 0.e0;
    real r17B3#3 = TensorIndex<tensor[3],[0]>(camUp1767);
    real r17B4#3 = RMul(realLit17B2,r17B3);
    real r17B5#3 = TensorIndex<tensor[3],[1]>(camUp1767);
    real r17B6#3 = RMul(realLit17B2,r17B5);
    real r17B7#3 = TensorIndex<tensor[3],[2]>(camUp1767);
    real r17B8#5 = RMul(realLit17B2,r17B7);
    real r17B9#3 = RAdd(r17B4,r17B6);
    real r17BA#3 = RAdd(r17B9,r17B8);
    real realLit17BB#3 = 0.1e1;
    real r17BC#1 = RMul(realLit17BB,r17B7);
    real r17BD#1 = RAdd(r17B9,r17BC);
    real realLit17BE#3 = -0.1e1;
    real r17BF#1 = RMul(realLit17BE,r17B5);
    real r17C0#1 = RAdd(r17B4,r17BF);
    real r17C1#1 = RAdd(r17C0,r17B8);
    tensor[3] tensor17C2#1 = <tensor[3]>[r17BA,r17BD,r17C1];
    real r17C3#1 = RMul(realLit17BE,r17B7);
    real r17C4#1 = RAdd(r17B9,r17C3);
    real r17C5#1 = RMul(realLit17BB,r17B3);
    real r17C6#1 = RAdd(r17C5,r17B6);
    real r17C7#1 = RAdd(r17C6,r17B8);
    tensor[3] tensor17C8#1 = <tensor[3]>[r17C4,r17BA,r17C7];
    real r17C9#1 = RMul(realLit17BB,r17B5);
    real r17CA#1 = RAdd(r17B4,r17C9);
    real r17CB#1 = RAdd(r17CA,r17B8);
    real r17CC#1 = RMul(realLit17BE,r17B3);
    real r17CD#1 = RAdd(r17CC,r17B6);
    real r17CE#1 = RAdd(r17CD,r17B8);
    tensor[3] tensor17CF#1 = <tensor[3]>[r17CB,r17CE,r17BA];
    tensor[3] projParam17F1#1 = tensor17C2;
    real vdot17F2#1 = VDot<3>(op1_e3_l_31797,projParam17F1);
    tensor[3] projParam17F3#1 = tensor17C8;
    real vdot17F4#1 = VDot<3>(op1_e3_l_31797,projParam17F3);
    tensor[3] projParam17F5#1 = tensor17CF;
    real vdot17F6#1 = VDot<3>(op1_e3_l_31797,projParam17F5);
    tensor[3] op1_e3_l_1717F0#6 = <tensor[3]>[vdot17F2,vdot17F4,vdot17F6];
    real op1_e3_l_3417FF#1 = VDot<3>(op1_e3_l_1717F0,op1_e3_l_1717F0);
    real r1803#1 = RMul(op1_e3_l_917A8,op1_e3_l_917A8);
    real op1_e3_l_351802#1 = RMul(r1803,op1_e3_l_3417FF);
    real op1_e3_l_361807#1 = Sqrt(op1_e3_l_351802);
    tensor[3] op1_e3_l_37180A#1 = VScale<3>(op1_e3_l_917A8,op1_e3_l_1717F0);
    real realLit180E#1 = 0.1e1;
    real op1_e3_l_38180D#2 = RDiv(realLit180E,op1_e3_l_361807);
    tensor[3] camU1812#4 = VScale<3>(op1_e3_l_38180D,op1_e3_l_37180A);
    globals.camU171B = camU1812;
    real realLit1817#3 = 0.e0;
    real r1818#3 = TensorIndex<tensor[3],[0]>(op1_e3_l_31797);
    real r1819#3 = RMul(realLit1817,r1818);
    real r181A#3 = TensorIndex<tensor[3],[1]>(op1_e3_l_31797);
    real r181B#3 = RMul(realLit1817,r181A);
    real r181C#3 = TensorIndex<tensor[3],[2]>(op1_e3_l_31797);
    real r181D#5 = RMul(realLit1817,r181C);
    real r181E#3 = RAdd(r1819,r181B);
    real r181F#3 = RAdd(r181E,r181D);
    real realLit1820#3 = 0.1e1;
    real r1821#1 = RMul(realLit1820,r181C);
    real r1822#1 = RAdd(r181E,r1821);
    real realLit1823#3 = -0.1e1;
    real r1824#1 = RMul(realLit1823,r181A);
    real r1825#1 = RAdd(r1819,r1824);
    real r1826#1 = RAdd(r1825,r181D);
    tensor[3] tensor1827#1 = <tensor[3]>[r181F,r1822,r1826];
    real r1828#1 = RMul(realLit1823,r181C);
    real r1829#1 = RAdd(r181E,r1828);
    real r182A#1 = RMul(realLit1820,r1818);
    real r182B#1 = RAdd(r182A,r181B);
    real r182C#1 = RAdd(r182B,r181D);
    tensor[3] tensor182D#1 = <tensor[3]>[r1829,r181F,r182C];
    real r182E#1 = RMul(realLit1820,r181A);
    real r182F#1 = RAdd(r1819,r182E);
    real r1830#1 = RAdd(r182F,r181D);
    real r1831#1 = RMul(realLit1823,r1818);
    real r1832#1 = RAdd(r1831,r181B);
    real r1833#1 = RAdd(r1832,r181D);
    tensor[3] tensor1834#1 = <tensor[3]>[r1830,r1833,r181F];
    tensor[3] projParam1856#1 = tensor1827;
    real vdot1857#1 = VDot<3>(op1_e3_l_1717F0,projParam1856);
    tensor[3] projParam1858#1 = tensor182D;
    real vdot1859#1 = VDot<3>(op1_e3_l_1717F0,projParam1858);
    tensor[3] projParam185A#1 = tensor1834;
    real vdot185B#1 = VDot<3>(op1_e3_l_1717F0,projParam185A);
    tensor[3] op1_e3_l_471855#1 = <tensor[3]>[vdot1857,vdot1859,vdot185B];
    tensor[3] op1_e3_l_501864#3 = VScale<3>(op1_e3_l_917A8,op1_e3_l_471855);
    real r1868#1 = TensorIndex<tensor[3],[0]>(op1_e3_l_501864);
    real r1869#3 = RMul(op1_e3_l_38180D,op1_e3_l_917A8);
    real r186A#2 = RMul(r1869,r1868);
    real r186B#1 = TensorIndex<tensor[3],[1]>(op1_e3_l_501864);
    real r186C#2 = RMul(r1869,r186B);
    real r186D#1 = TensorIndex<tensor[3],[2]>(op1_e3_l_501864);
    real r186E#2 = RMul(r1869,r186D);
    tensor[3] camV1867#1 = <tensor[3]>[r186A,r186C,r186E];
    globals.camV171C = camV1867;
    real _t1879#1 = 0.314159265358979323846264338327950288e1;
    real _t187B#1 = 0.36e3;
    real op1_e3_l_5187D#1 = RMul(camFOV1769,_t1879);
    real op1_e3_l_61880#1 = RDiv(op1_e3_l_5187D,_t187B);
    real op1_e3_l_101883#2 = Tan(op1_e3_l_61880);
    real camVmax1886#1 = RMul(op1_e3_l_101883,op1_e3_l_6179D);
    globals.camVmax171D = camVmax1886;
    real _t188A#1 = IntToReal(iresU176B);
    real _t188C#1 = IntToReal(iresV176D);
    real r188F#1 = RMul(_t188A,op1_e3_l_101883);
    real op1_e3_l_14188E#1 = RMul(r188F,op1_e3_l_6179D);
    real camUmax1893#1 = RDiv(op1_e3_l_14188E,_t188C);
    globals.camUmax171E = camUmax1893;
    real op1_e3_l_3189D#1 = VDot<3>(lightVsp177B,lightVsp177B);
    real op1_e3_l_418A0#1 = Sqrt(op1_e3_l_3189D);
    real realLit18A4#1 = 0.1e1;
    real op1_e3_l_518A3#1 = RDiv(realLit18A4,op1_e3_l_418A0);
    real r18A9#1 = VIndex<3,0>(camU1812);
    real r18AA#3 = TensorIndex<tensor[3],[0]>(lightVsp177B);
    real r18AB#1 = RMul(r18A9,r18AA);
    real r18AC#1 = r186A;
    real r18AD#3 = TensorIndex<tensor[3],[1]>(lightVsp177B);
    real r18AE#1 = RMul(r18AC,r18AD);
    real r18AF#1 = VIndex<3,0>(camN17AD);
    real r18B0#3 = TensorIndex<tensor[3],[2]>(lightVsp177B);
    real r18B1#1 = RMul(r18AF,r18B0);
    real r18B2#1 = RAdd(r18AB,r18AE);
    real r18B3#1 = RAdd(r18B2,r18B1);
    real r18B4#1 = VIndex<3,1>(camU1812);
    real r18B5#1 = RMul(r18B4,r18AA);
    real r18B6#1 = r186C;
    real r18B7#1 = RMul(r18B6,r18AD);
    real r18B8#1 = VIndex<3,1>(camN17AD);
    real r18B9#1 = RMul(r18B8,r18B0);
    real r18BA#1 = RAdd(r18B5,r18B7);
    real r18BB#1 = RAdd(r18BA,r18B9);
    real r18BC#1 = VIndex<3,2>(camU1812);
    real r18BD#1 = RMul(r18BC,r18AA);
    real r18BE#1 = r186E;
    real r18BF#1 = RMul(r18BE,r18AD);
    real r18C0#1 = VIndex<3,2>(camN17AD);
    real r18C1#1 = RMul(r18C0,r18B0);
    real r18C2#1 = RAdd(r18BD,r18BF);
    real r18C3#1 = RAdd(r18C2,r18C1);
    tensor[3] op1_e3_l_618A8#1 = <tensor[3]>[r18B3,r18BB,r18C3];
    tensor[3] L18E1#1 = VScale<3>(op1_e3_l_518A3,op1_e3_l_618A8);
    globals.L171F = L18E1;
    return
## strand
  strand ray (int ui18E8#2, int vi18E9#3)
    state:
      real rayU;
      real rayV;
      tensor[3] UV;
      tensor[3] rayOrig;
      tensor[3] rayVec;
      real camNearVsp;
      real camFarVsp;
      int offset;
      int len;
      int itter;
      int intersectionItter;
      int idx;
      tensor[2] interval;
      real s;
      real e;
      femData:MeshCell cc;
      femData:FuncCell fc;
      output real out;
      output tensor[4] rgba;
    state init
      ENTRY18FD:  preds = []
        tensor[3] camEye18FE#1 = globals.camEye16F9;
        int iresU1900#2 = globals.iresU16FD;
        int iresV1902#3 = globals.iresV16FE;
        femData:MeshCell[] 0cell_a1904#1 = globals.0cell_a1716;
        femData:FemFunc c1906#1 = globals.c1717;
        int[] indecies1908#2 = globals.indecies1707;
        tensor[2][] times190A#1 = globals.times1708;
        real camNearVsp190C#1 = globals.camNearVsp1718;
        real camFarVsp190E#1 = globals.camFarVsp1719;
        tensor[3] camN1910#1 = globals.camN171A;
        tensor[3] camU1912#1 = globals.camU171B;
        tensor[3] camV1914#1 = globals.camV171C;
        real camVmax1916#2 = globals.camVmax171D;
        real camUmax1918#2 = globals.camUmax171E;
        real _t191A#5 = -0.5e0;
        real _t191C#1 = IntToReal(ui18E8);
        real _t191E#1 = IntToReal(iresU1900);
        real _t1920#3 = 0.5e0;
        real op1_e3_l_61922#1 = RSub(_t191E,_t1920);
        real op1_e3_l_71925#1 = RSub(_t191C,_t191A);
        real op1_e3_l_81928#1 = RSub(op1_e3_l_61922,_t191A);
        real op1_e3_l_9192B#2 = RNeg(camUmax1918);
        real op1_e3_l_10192E#1 = RDiv(op1_e3_l_71925,op1_e3_l_81928);
        real op1_e3_l_111931#1 = RSub(camUmax1918,op1_e3_l_9192B);
        real op1_e3_l_131934#1 = RMul(op1_e3_l_10192E,op1_e3_l_111931);
        real rayU1937#2 = RAdd(op1_e3_l_9192B,op1_e3_l_131934);
        real _t193A#1 = IntToReal(vi18E9);
        real _t193C#2 = IntToReal(iresV1902);
        real op1_e3_l_6193E#1 = RSub(_t193C,_t1920);
        real op1_e3_l_71941#2 = RSub(_t193A,_t191A);
        real op1_e3_l_81944#1 = RSub(op1_e3_l_6193E,_t191A);
        real op1_e3_l_91947#3 = RNeg(camVmax1916);
        real op1_e3_l_10194A#1 = RDiv(op1_e3_l_71941,op1_e3_l_81944);
        real op1_e3_l_11194D#2 = RSub(camVmax1916,op1_e3_l_91947);
        real op1_e3_l_131950#1 = RMul(op1_e3_l_10194A,op1_e3_l_11194D);
        real rayV1953#1 = RAdd(op1_e3_l_91947,op1_e3_l_131950);
        real op1_e3_l_231956#1 = RSub(_t193C,_t1920);
        real op1_e3_l_251959#1 = RSub(op1_e3_l_231956,_t191A);
        real op1_e3_l_27195C#1 = RDiv(op1_e3_l_71941,op1_e3_l_251959);
        real op1_e3_l_30195F#1 = RMul(op1_e3_l_27195C,op1_e3_l_11194D);
        real op1_e3_l_311962#1 = RAdd(op1_e3_l_91947,op1_e3_l_30195F);
        tensor[3] op1_e3_l_321965#2 = VScale<3>(rayU1937,camU1912);
        tensor[3] op1_e3_l_331968#2 = VScale<3>(op1_e3_l_311962,camV1914);
        tensor[3] UV196B#1 = VAdd<3>(op1_e3_l_321965,op1_e3_l_331968);
        tensor[3] v196F#1 = VAdd<3>(camEye18FE,op1_e3_l_321965);
        tensor[3] rayOrig196E#1 = VAdd<3>(v196F,op1_e3_l_331968);
        real _t1973#8 = 0.e0;
        tensor[3] _t1975#1 = <tensor[3]>[_t1973,_t1973,_t1973];
        tensor[3] rayVec1977#1 = VAdd<3>(camN1910,_t1975);
        int _t197A#2 = IMul(ui18E8,iresV1902);
        int _t197C#1 = IAdd(_t197A,vi18E9);
        int offset197E#2 = Subscript<int[]>(indecies1908,_t197C);
        int _t1980#1 = IMul(iresU1900,iresV1902);
        int _t1982#1 = IAdd(_t1980,_t197A);
        int _t1984#1 = IAdd(_t1982,vi18E9);
        int len1986#1 = Subscript<int[]>(indecies1908,_t1984);
        int itter1988#3 = 0;
        int idx198A#2 = offset197E;
        tensor[2] interval198C#3 = Subscript<tensor[2][]>(times190A,idx198A);
        real s198E#1 = VIndex<2,0>(interval198C);
        real e1990#1 = VIndex<2,1>(interval198C);
        femData:MeshCell cc1992#2 = Subscript<femData:MeshCell[]>(0cell_a1904,itter1988);
        int _t1994#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc1992);
        femData:FuncCell _t1996#1 = LoadFem<femData:FuncCell>(c1906,_t1994);
        tensor[4] rgba1998#1 = <tensor[4]>[_t1973,_t1973,_t1973,_t1973];
        self.rayU = rayU1937;
        self.rayV = rayV1953;
        self.UV = UV196B;
        self.rayOrig = rayOrig196E;
        self.rayVec = rayVec1977;
        self.camNearVsp = camNearVsp190C;
        self.camFarVsp = camFarVsp190E;
        self.offset = offset197E;
        self.len = len1986;
        self.itter = itter1988;
        self.intersectionItter = itter1988;
        self.idx = idx198A;
        self.interval = interval198C;
        self.s = s198E;
        self.e = e1990;
        self.cc = cc1992;
        self.fc = _t1996;
        self.out = _t1973;
        self.rgba = rgba1998;
        return
    end state init
    method start
        ENTRY19AE:  preds = []
          femData:MeshCell[] 0cell_a19AF#1 = globals.0cell_a1716;
          femData:FemFunc c19B1#1 = globals.c1717;
          int[] cells19B3#1 = globals.cells1709;
          int len19B5#1 = self.len;
          int idx19B7#1 = self.idx;
          int _t19B9#1 = 0;
          bool _t19BB#1 = EQ<int>(len19B5,_t19B9);
          if _t19BB then goto STABILIZE19BE else goto JOIN19BF
        STABILIZE19BE:  preds = [COND19BD]
          stabilize
          goto JOIN19BF
        JOIN19BF:  preds = [*STABILIZE19BE,COND19BD]
          int _t19C0#1 = Subscript<int[]>(cells19B3,idx19B7);
          femData:MeshCell cc19C2#2 = Subscript<femData:MeshCell[]>(0cell_a19AF,_t19C0);
          int _t19C4#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc19C2);
          femData:FuncCell _t19C6#1 = LoadFem<femData:FuncCell>(c19B1,_t19C4);
          self.cc = cc19C2;
          self.fc = _t19C6;
          active
    end start
    method update
        ENTRY19CB:  preds = []
          image(IMAGE1D<double[3]>) cmap19CC#17 = globals.cmap170C;
          femData:MeshCell[] 0cell_a19D2#1 = globals.0cell_a1716;
          femData:FemFunc c19D4#1 = globals.c1717;
          real eps19D6#8 = globals.eps1706;
          tensor[2][] times19D8#1 = globals.times1708;
          int[] cells19DA#1 = globals.cells1709;
          tensor[3] mcnear19DC#2 = globals.mcnear170A;
          tensor[3] mcfar19DE#1 = globals.mcfar170B;
          real cmin19E0#3 = globals.cmin170D;
          real cmax19E2#2 = globals.cmax170E;
          bool light19E4#1 = globals.light170F;
          real phongKa19E6#1 = globals.phongKa1710;
          real phongKd19E8#1 = globals.phongKd1711;
          real phongKs19EA#1 = globals.phongKs1712;
          real phongSp19EC#1 = globals.phongSp1713;
          tensor[3] L19EE#2 = globals.L171F;
          tensor[3] rayOrig19F0#3 = self.rayOrig;
          tensor[3] rayVec19F2#6 = self.rayVec;
          real camNearVsp19F4#2 = self.camNearVsp;
          real camFarVsp19F6#1 = self.camFarVsp;
          int offset19F8#1 = self.offset;
          int len19FA#1 = self.len;
          int itter19FC#2 = self.itter;
          int intersectionItter19FE#2 = self.intersectionItter;
          real s1A00#6 = self.s;
          real e1A02#5 = self.e;
          femData:MeshCell cc1A04#2 = self.cc;
          femData:FuncCell fc1A06#2 = self.fc;
          real out1A08#1 = self.out;
          string _t1A0A#1 = "Interval:";
          tensor[2] _t1A0C#1 = <tensor[2]>[s1A00,e1A02];
          string _t1A0E#10 = "\n";
          Print<[string,tensor[2],string]>(_t1A0A,_t1A0C,_t1A0E);
          string _t1A11#1 = "inner itter:";
          Print<[string,int,string]>(_t1A11,intersectionItter19FE,_t1A0E);
          string _t1A14#1 = "Outer itter:";
          Print<[string,int,string]>(_t1A14,itter19FC,_t1A0E);
          real _t1A17#1 = VIndex<3,0>(rayOrig19F0);
          real _t1A19#1 = VIndex<3,1>(rayOrig19F0);
          tensor[2] _t1A1B#3 = <tensor[2]>[_t1A17,_t1A19];
          real _t1A1D#1 = VIndex<3,0>(rayVec19F2);
          real _t1A1F#1 = VIndex<3,1>(rayVec19F2);
          tensor[2] _t1A21#3 = <tensor[2]>[_t1A1D,_t1A1F];
          tensor[2] op1_e3_l_31A23#1 = VScale<2>(s1A00,_t1A21);
          tensor[2] startRay1A26#1 = VAdd<2>(_t1A1B,op1_e3_l_31A23);
          tensor[2] op1_e3_l_31A29#1 = VScale<2>(e1A02,_t1A21);
          tensor[2] endRay1A2C#1 = VAdd<2>(_t1A1B,op1_e3_l_31A29);
          femData:Mesh _t1A2F#21 = ExtractFem<femData:Mesh,femData:MeshCell>(cc1A04);
          int _t1A31#5 = ExtractFemItem<int,CellIndex(MeshCell)>(cc1A04);
          femData:MeshPos callNewtonPos1A33#1 = _0A7F_msh_newtonInverse1A34 (startRay1A26,_t1A31,_t1A2F);
          tensor[2] refPos1CA3#5 = ExtractFemItem<tensor[2],RefPos(Mesh)>(callNewtonPos1A33);
          femData:MeshPos callNewtonPos1CA5#1 = _0A7F_msh_newtonInverse1A34 (endRay1A2C,_t1A31,_t1A2F);
          tensor[2] refPos1CA7#3 = ExtractFemItem<tensor[2],RefPos(Mesh)>(callNewtonPos1CA5);
          string _t1CA9#1 = "inverses:";
          Print<[string,tensor[2],tensor[2],string]>(_t1CA9,refPos1CA3,refPos1CA7,_t1A0E);
          femData:FemFunc _t1CAC#7 = ExtractFem<femData:FemFunc,femData:FuncCell>(fc1A06);
          femData:Space _t1CAE#6 = ExtractFem<femData:Space,femData:FemFunc>(_t1CAC);
          int _t1CB0#1 = ExtractFemItem<int,CellIndex(FuncCell)>(fc1A06);
          int ilit1CB3#1 = 6;
          int mulRes1CB4#6 = IMul(_t1CB0,ilit1CB3);
          int addRes1CB6#1 = mulRes1CB4;
          int idx1CB7#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1CAE,addRes1CB6);
          int ilit1CB8#1 = 1;
          int addRes1CB9#1 = IAdd(mulRes1CB4,ilit1CB8);
          int idx1CBA#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1CAE,addRes1CB9);
          int ilit1CBB#1 = 2;
          int addRes1CBC#1 = IAdd(mulRes1CB4,ilit1CBB);
          int idx1CBD#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1CAE,addRes1CBC);
          int ilit1CBE#1 = 3;
          int addRes1CBF#1 = IAdd(mulRes1CB4,ilit1CBE);
          int idx1CC0#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1CAE,addRes1CBF);
          int ilit1CC1#1 = 4;
          int addRes1CC2#1 = IAdd(mulRes1CB4,ilit1CC1);
          int idx1CC3#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1CAE,addRes1CC2);
          int ilit1CC4#1 = 5;
          int addRes1CC5#1 = IAdd(mulRes1CB4,ilit1CC4);
          int idx1CC6#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1CAE,addRes1CC5);
          int ilit1CDF#6 = 1;
          int idx1CE1#1 = idx1CB7;
          int mulRes1CE2#1 = IMul(ilit1CDF,idx1CE1);
          int idx1CE3#1 = idx1CBA;
          int mulRes1CE4#1 = IMul(ilit1CDF,idx1CE3);
          int idx1CE6#1 = idx1CBD;
          int mulRes1CE7#1 = IMul(ilit1CDF,idx1CE6);
          int idx1CE9#1 = idx1CC0;
          int mulRes1CEA#1 = IMul(ilit1CDF,idx1CE9);
          int idx1CEC#1 = idx1CC3;
          int mulRes1CED#1 = IMul(ilit1CDF,idx1CEC);
          int idx1CEF#1 = idx1CC6;
          int mulRes1CF0#1 = IMul(ilit1CDF,idx1CEF);
          real dof1CF1#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(_t1CAC,mulRes1CE2);
          real dof1CF2#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(_t1CAC,mulRes1CE4);
          real dof1CF3#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(_t1CAC,mulRes1CE7);
          real dof1CF4#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(_t1CAC,mulRes1CEA);
          real dof1CF5#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(_t1CAC,mulRes1CED);
          real dof1CF6#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(_t1CAC,mulRes1CF0);
          tensor[6] dofs1CF7#1 = <tensor[6]>[dof1CF1,dof1CF2,dof1CF3,dof1CF4,dof1CF5,dof1CF6];
          tensor[6] femDofs1CDE#7 = dofs1CF7;
          real varAcc1D13#2 = VIndex<2,0>(refPos1CA3);
          real varAcc1D14#2 = VIndex<2,1>(refPos1CA3);
          real coeff1D15#2 = 0.2e1;
          real iden1D16#3 = varAcc1D13;
          real prod21D17#1 = RMul(iden1D16,varAcc1D13);
          real one1D18#7 = 0.1e1;
          real prod1D19#2 = RMul(prod21D17,one1D18);
          real coeff1D1A#3 = 0.4e1;
          real iden1D1B#3 = varAcc1D14;
          real prod1D1C#2 = RMul(iden1D16,iden1D1B);
          real coeff1D1D#2 = -0.3e1;
          real prod1D1E#3 = RMul(iden1D16,one1D18);
          real prod21D1F#1 = RMul(iden1D1B,varAcc1D14);
          real prod1D20#1 = RMul(one1D18,prod21D1F);
          real prod1D21#3 = RMul(one1D18,iden1D1B);
          real prod1D22#1 = RMul(one1D18,one1D18);
          real mult1D23#1 = RMul(one1D18,prod1D22);
          real mult1D24#1 = RMul(coeff1D1D,prod1D21);
          real mult1D25#2 = RMul(coeff1D15,prod1D20);
          real mult1D26#1 = RMul(coeff1D1D,prod1D1E);
          real mult1D27#2 = RMul(coeff1D1A,prod1D1C);
          real mult1D28#2 = RMul(coeff1D15,prod1D19);
          real sum1D29#1 = RAdd(mult1D27,mult1D28);
          real sum1D2A#1 = RAdd(mult1D26,sum1D29);
          real sum1D2B#1 = RAdd(mult1D25,sum1D2A);
          real sum1D2C#1 = RAdd(mult1D24,sum1D2B);
          real sum1D2D#1 = RAdd(mult1D23,sum1D2C);
          real intermediate1D2E#1 = sum1D2D;
          real coeff1D2F#2 = -0.1e1;
          real mult1D30#1 = RMul(coeff1D2F,prod1D1E);
          real sum1D31#1 = RAdd(mult1D30,mult1D28);
          real intermediate1D32#1 = sum1D31;
          real mult1D33#1 = RMul(coeff1D2F,prod1D21);
          real sum1D34#1 = RAdd(mult1D33,mult1D25);
          real intermediate1D35#1 = sum1D34;
          real coeff1D36#2 = -0.4e1;
          real mult1D37#1 = RMul(coeff1D1A,prod1D21);
          real mult1D38#2 = RMul(coeff1D36,prod1D1C);
          real sum1D39#1 = RAdd(mult1D37,mult1D38);
          real intermediate1D3A#1 = sum1D39;
          real mult1D3B#1 = RMul(coeff1D1A,prod1D1E);
          real mult1D3C#1 = RMul(coeff1D36,prod1D19);
          real sum1D3D#1 = RAdd(mult1D38,mult1D3C);
          real sum1D3E#1 = RAdd(mult1D3B,sum1D3D);
          real intermediate1D3F#1 = sum1D3E;
          tensor[6] intermediateCons1D40#1 = <tensor[6]>[intermediate1D2E,intermediate1D32,intermediate1D35,mult1D27,intermediate1D3A,intermediate1D3F];
          tensor[6] basisResult1D12#1 = intermediateCons1D40;
          real faVal1D70#2 = VDot<6>(femDofs1CDE,basisResult1D12);
          real _t1D73#3 = VIndex<3,2>(rayVec19F2);
          real _t1D75#3 = VIndex<3,2>(rayOrig19F0);
          real op1_e3_l_81D77#1 = RMul(_t1D73,s1A00);
          real op1_e3_l_91D7A#1 = RSub(faVal1D70,op1_e3_l_81D77);
          real fa1D7D#10 = RSub(op1_e3_l_91D7A,_t1D75);
          real varAcc1D81#2 = VIndex<2,0>(refPos1CA7);
          real varAcc1D82#2 = VIndex<2,1>(refPos1CA7);
          real coeff1D83#2 = 0.2e1;
          real iden1D84#3 = varAcc1D81;
          real prod21D85#1 = RMul(iden1D84,varAcc1D81);
          real one1D86#7 = 0.1e1;
          real prod1D87#2 = RMul(prod21D85,one1D86);
          real coeff1D88#3 = 0.4e1;
          real iden1D89#3 = varAcc1D82;
          real prod1D8A#2 = RMul(iden1D84,iden1D89);
          real coeff1D8B#2 = -0.3e1;
          real prod1D8C#3 = RMul(iden1D84,one1D86);
          real prod21D8D#1 = RMul(iden1D89,varAcc1D82);
          real prod1D8E#1 = RMul(one1D86,prod21D8D);
          real prod1D8F#3 = RMul(one1D86,iden1D89);
          real prod1D90#1 = RMul(one1D86,one1D86);
          real mult1D91#1 = RMul(one1D86,prod1D90);
          real mult1D92#1 = RMul(coeff1D8B,prod1D8F);
          real mult1D93#2 = RMul(coeff1D83,prod1D8E);
          real mult1D94#1 = RMul(coeff1D8B,prod1D8C);
          real mult1D95#2 = RMul(coeff1D88,prod1D8A);
          real mult1D96#2 = RMul(coeff1D83,prod1D87);
          real sum1D97#1 = RAdd(mult1D95,mult1D96);
          real sum1D98#1 = RAdd(mult1D94,sum1D97);
          real sum1D99#1 = RAdd(mult1D93,sum1D98);
          real sum1D9A#1 = RAdd(mult1D92,sum1D99);
          real sum1D9B#1 = RAdd(mult1D91,sum1D9A);
          real intermediate1D9C#1 = sum1D9B;
          real coeff1D9D#2 = -0.1e1;
          real mult1D9E#1 = RMul(coeff1D9D,prod1D8C);
          real sum1D9F#1 = RAdd(mult1D9E,mult1D96);
          real intermediate1DA0#1 = sum1D9F;
          real mult1DA1#1 = RMul(coeff1D9D,prod1D8F);
          real sum1DA2#1 = RAdd(mult1DA1,mult1D93);
          real intermediate1DA3#1 = sum1DA2;
          real coeff1DA4#2 = -0.4e1;
          real mult1DA5#1 = RMul(coeff1D88,prod1D8F);
          real mult1DA6#2 = RMul(coeff1DA4,prod1D8A);
          real sum1DA7#1 = RAdd(mult1DA5,mult1DA6);
          real intermediate1DA8#1 = sum1DA7;
          real mult1DA9#1 = RMul(coeff1D88,prod1D8C);
          real mult1DAA#1 = RMul(coeff1DA4,prod1D87);
          real sum1DAB#1 = RAdd(mult1DA6,mult1DAA);
          real sum1DAC#1 = RAdd(mult1DA9,sum1DAB);
          real intermediate1DAD#1 = sum1DAC;
          tensor[6] intermediateCons1DAE#1 = <tensor[6]>[intermediate1D9C,intermediate1DA0,intermediate1DA3,mult1D95,intermediate1DA8,intermediate1DAD];
          tensor[6] basisResult1D80#1 = intermediateCons1DAE;
          real probe_l_71DDE#1 = VDot<6>(femDofs1CDE,basisResult1D80);
          real op1_e3_l_81DE1#1 = RMul(_t1D73,e1A02);
          real op1_e3_l_91DE4#1 = RSub(probe_l_71DDE,op1_e3_l_81DE1);
          real fb1DE7#5 = RSub(op1_e3_l_91DE4,_t1D75);
          string _t1DEA#1 = "Vals:";
          tensor[2] _t1DEC#1 = <tensor[2]>[fa1D7D,fb1DE7];
          Print<[string,tensor[2],string]>(_t1DEA,_t1DEC,_t1A0E);
          real op1_e3_l_221DEF#1 = RSub(fa1D7D,fb1DE7);
          real _t1DF2#1 = Abs<real>(op1_e3_l_221DEF);
          bool _t1DF5#1 = LT<real>(_t1DF2,eps19D6);
          if _t1DF5 then goto ASSIGN1DFA else goto JOIN1E06
        ASSIGN1DFA:  preds = [COND1DF7]
          real _t1DF8#1 = Abs<real>(fa1D7D);
          bool _t1DFB#1 = GT<real>(_t1DF8,eps19D6);
          if _t1DFB then goto ASSIGN1E00 else goto JOIN1E04
        ASSIGN1E00:  preds = [COND1DFD]
          real s1DFE#1 = RAdd(s1A00,eps19D6);
          self.s = s1DFE;
          active
          goto JOIN1E04
        JOIN1E04:  preds = [*ACTIVE1E02,COND1DFD]
          real s1E03#1 = phi(s1A00)
          goto JOIN1E06
        JOIN1E06:  preds = [JOIN1E04,COND1DF7]
          real s1E05#3 = phi(s1E03,s1A00)
          real op1_e3_l_381E07#1 = RMul(s1E05,fb1DE7);
          real op1_e3_l_391E0A#1 = RMul(e1A02,fa1D7D);
          real op1_e3_l_481E0D#1 = RSub(op1_e3_l_381E07,op1_e3_l_391E0A);
          real op1_e3_l_491E10#1 = RSub(fb1DE7,fa1D7D);
          real cup1E13#6 = RDiv(op1_e3_l_481E0D,op1_e3_l_491E10);
          string _t1E16#1 = "Mid time:";
          Print<[string,real,string]>(_t1E16,cup1E13,_t1A0E);
          tensor[2] op1_e3_l_531E19#1 = VScale<2>(cup1E13,_t1A21);
          tensor[2] midRay1E1C#1 = VAdd<2>(_t1A1B,op1_e3_l_531E19);
          femData:MeshPos callNewtonPos1E1F#1 = _0A7F_msh_newtonInverse1A34 (midRay1E1C,_t1A31,_t1A2F);
          tensor[2] refPos1E21#4 = ExtractFemItem<tensor[2],RefPos(Mesh)>(callNewtonPos1E1F);
          real varAcc1E24#2 = VIndex<2,0>(refPos1E21);
          real varAcc1E25#2 = VIndex<2,1>(refPos1E21);
          real coeff1E26#2 = 0.2e1;
          real iden1E27#3 = varAcc1E24;
          real prod21E28#1 = RMul(iden1E27,varAcc1E24);
          real one1E29#7 = 0.1e1;
          real prod1E2A#2 = RMul(prod21E28,one1E29);
          real coeff1E2B#3 = 0.4e1;
          real iden1E2C#3 = varAcc1E25;
          real prod1E2D#2 = RMul(iden1E27,iden1E2C);
          real coeff1E2E#2 = -0.3e1;
          real prod1E2F#3 = RMul(iden1E27,one1E29);
          real prod21E30#1 = RMul(iden1E2C,varAcc1E25);
          real prod1E31#1 = RMul(one1E29,prod21E30);
          real prod1E32#3 = RMul(one1E29,iden1E2C);
          real prod1E33#1 = RMul(one1E29,one1E29);
          real mult1E34#1 = RMul(one1E29,prod1E33);
          real mult1E35#1 = RMul(coeff1E2E,prod1E32);
          real mult1E36#2 = RMul(coeff1E26,prod1E31);
          real mult1E37#1 = RMul(coeff1E2E,prod1E2F);
          real mult1E38#2 = RMul(coeff1E2B,prod1E2D);
          real mult1E39#2 = RMul(coeff1E26,prod1E2A);
          real sum1E3A#1 = RAdd(mult1E38,mult1E39);
          real sum1E3B#1 = RAdd(mult1E37,sum1E3A);
          real sum1E3C#1 = RAdd(mult1E36,sum1E3B);
          real sum1E3D#1 = RAdd(mult1E35,sum1E3C);
          real sum1E3E#1 = RAdd(mult1E34,sum1E3D);
          real intermediate1E3F#1 = sum1E3E;
          real coeff1E40#2 = -0.1e1;
          real mult1E41#1 = RMul(coeff1E40,prod1E2F);
          real sum1E42#1 = RAdd(mult1E41,mult1E39);
          real intermediate1E43#1 = sum1E42;
          real mult1E44#1 = RMul(coeff1E40,prod1E32);
          real sum1E45#1 = RAdd(mult1E44,mult1E36);
          real intermediate1E46#1 = sum1E45;
          real coeff1E47#2 = -0.4e1;
          real mult1E48#1 = RMul(coeff1E2B,prod1E32);
          real mult1E49#2 = RMul(coeff1E47,prod1E2D);
          real sum1E4A#1 = RAdd(mult1E48,mult1E49);
          real intermediate1E4B#1 = sum1E4A;
          real mult1E4C#1 = RMul(coeff1E2B,prod1E2F);
          real mult1E4D#1 = RMul(coeff1E47,prod1E2A);
          real sum1E4E#1 = RAdd(mult1E49,mult1E4D);
          real sum1E4F#1 = RAdd(mult1E4C,sum1E4E);
          real intermediate1E50#1 = sum1E4F;
          tensor[6] intermediateCons1E51#1 = <tensor[6]>[intermediate1E3F,intermediate1E43,intermediate1E46,mult1E38,intermediate1E4B,intermediate1E50];
          tensor[6] basisResult1E23#1 = intermediateCons1E51;
          real fmVal1E81#2 = VDot<6>(femDofs1CDE,basisResult1E23);
          real op1_e3_l_581E84#1 = RMul(_t1D73,cup1E13);
          real op1_e3_l_591E87#1 = RSub(fmVal1E81,op1_e3_l_581E84);
          real fm1E8A#6 = RSub(op1_e3_l_591E87,_t1D75);
          string _t1E8D#1 = "all vals:";
          tensor[3] _t1E8F#1 = <tensor[3]>[fa1D7D,fm1E8A,fb1DE7];
          Print<[string,tensor[3],string]>(_t1E8D,_t1E8F,_t1A0E);
          int _t1E92#6 = 1;
          int intersectionItter1E94#2 = IAdd(intersectionItter19FE,_t1E92);
          real _t1E96#10 = 0.e0;
          bool _t1E98#2 = GT<real>(fa1D7D,_t1E96);
          if _t1E98 then goto JOIN1E9D else goto ASSIGN2494
        JOIN1E9D:  preds = [COND1E9A,JOIN2499]
          int _t1E9B#1 = phi(_t1E92,_t1E9C)
          bool _t1E9E#2 = GT<real>(fm1E8A,_t1E96);
          if _t1E9E then goto JOIN1EA3 else goto ASSIGN248C
        JOIN1EA3:  preds = [COND1EA0,JOIN2491]
          int _t1EA1#1 = phi(_t1E92,_t1EA2)
          int _t1EA4#1 = IMul(_t1E9B,_t1EA1);
          int _t1EA6#7 = 0;
          bool _t1EA8#1 = LT<int>(_t1EA4,_t1EA6);
          if _t1EA8 then goto JOIN1EAE else goto COND2471
        JOIN1EAE:  preds = [COND1EAA,JOIN247E]
          real e1EAB#4 = phi(cup1E13,e1A02)
          real s1EAC#5 = phi(s1E05,s1EAD)
          string _t1EAF#1 = "new interval:";
          tensor[2] _t1EB1#1 = <tensor[2]>[s1EAC,e1EAB];
          Print<[string,tensor[2],string]>(_t1EAF,_t1EB1,_t1A0E);
          real _t1EB4#2 = Abs<real>(fa1D7D);
          bool _t1EB7#2 = LT<real>(_t1EB4,eps19D6);
          if _t1EB7 then goto ASSIGN1EBB else goto ASSIGN2466
        ASSIGN1EBB:  preds = [COND1EB9]
          bool _t1EBA#1 = true;
          goto JOIN1EBE
        JOIN1EBE:  preds = [ASSIGN1EBB,JOIN246D]
          bool _t1EBC#1 = phi(_t1EBA,_t1EBD)
          if _t1EBC then goto ASSIGN1EC2 else goto ASSIGN2462
        ASSIGN1EC2:  preds = [COND1EBF]
          real _t1EC0#2 = Abs<real>(fm1E8A);
          bool _t1EC3#1 = GT<real>(_t1EC0,eps19D6);
          if _t1EC3 then goto ASSIGN1EC7 else goto ASSIGN2460
        ASSIGN1EC7:  preds = [COND1EC5]
          bool _t1EC6#1 = GT<real>(_t1EB4,eps19D6);
          goto JOIN1ECA
        JOIN1ECA:  preds = [ASSIGN1EC7,ASSIGN2460]
          bool _t1EC8#1 = phi(_t1EC6,_t1EC9)
          if _t1EC8 then goto ASSIGN1ECD else goto ASSIGN1EFD
        ASSIGN1ECD:  preds = [COND1ECB]
          int itter1ECC#4 = IAdd(itter19FC,_t1E92);
          bool _t1ECE#1 = GTE<int>(itter1ECC,len19FA);
          if _t1ECE then goto ASSIGN1ED2 else goto JOIN1ED9
        ASSIGN1ED2:  preds = [COND1ED0]
          string _t1ED1#1 = "Fin pixel=============================\n";
          Print<[string]>(_t1ED1);
          self.itter = itter1ECC;
          self.intersectionItter = _t1EA6;
          self.s = s1EAC;
          self.e = e1EAB;
          stabilize
          goto JOIN1ED9
        JOIN1ED9:  preds = [*STABILIZE1ED8,COND1ED0]
          int _t1EDA#2 = IAdd(offset19F8,itter1ECC);
          tensor[2] interval1EDC#3 = Subscript<tensor[2][]>(times19D8,_t1EDA);
          int _t1EDE#1 = Subscript<int[]>(cells19DA,_t1EDA);
          femData:MeshCell cc1EE0#2 = Subscript<femData:MeshCell[]>(0cell_a19D2,_t1EDE);
          real s1EE2#1 = VIndex<2,0>(interval1EDC);
          real e1EE4#1 = VIndex<2,1>(interval1EDC);
          int _t1EE6#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc1EE0);
          femData:FuncCell _t1EE8#1 = LoadFem<femData:FuncCell>(c19D4,_t1EE6);
          string _t1EEA#1 = "Next interval!\n";
          Print<[string]>(_t1EEA);
          self.itter = itter1ECC;
          self.intersectionItter = _t1EA6;
          self.interval = interval1EDC;
          self.s = s1EE2;
          self.e = e1EE4;
          self.cc = cc1EE0;
          self.fc = _t1EE8;
          active
          goto JOIN1EF5
        JOIN1EF5:  preds = [*ACTIVE1EF4,*STABILIZE2427]
          goto JOIN1EF7
        JOIN1EF7:  preds = [*JOIN1EF5,MASSIGN2463]
          int intersectionItter1EF6#1 = phi(intersectionItter1E94)
          self.intersectionItter = intersectionItter1EF6;
          self.s = s1EAC;
          self.e = e1EAB;
          active
        ASSIGN1EFD:  preds = [COND1ECB]
          tensor[2] grad1EFC#1 = <tensor[2]>[_t1E96,_t1E96];
          bool _t1EFE#1 = LT<real>(_t1EC0,eps19D6);
          if _t1EFE then goto ASSIGN1F28 else goto JOIN2103
        ASSIGN1F28:  preds = [COND1F00]
          real varAcc1F02#1 = VIndex<2,0>(refPos1E21);
          real varAcc1F03#1 = VIndex<2,1>(refPos1E21);
          real coeff1F04#3 = 0.4e1;
          real iden1F05#1 = varAcc1F02;
          real one1F06#4 = 0.1e1;
          real prod1F07#3 = RMul(iden1F05,one1F06);
          real iden1F08#1 = varAcc1F03;
          real prod1F09#2 = RMul(one1F06,iden1F08);
          real coeff1F0A#1 = -0.3e1;
          real prod1F0B#3 = RMul(one1F06,one1F06);
          real mult1F0C#1 = RMul(coeff1F0A,prod1F0B);
          real mult1F0D#3 = RMul(coeff1F04,prod1F09);
          real mult1F0E#3 = RMul(coeff1F04,prod1F07);
          real sum1F0F#1 = RAdd(mult1F0D,mult1F0E);
          real sum1F10#2 = RAdd(mult1F0C,sum1F0F);
          real intermediate1F11#1 = sum1F10;
          real coeff1F12#1 = -0.1e1;
          real mult1F13#2 = RMul(coeff1F12,prod1F0B);
          real sum1F14#1 = RAdd(mult1F13,mult1F0E);
          real intermediate1F15#1 = sum1F14;
          real basisEval1F16#2 = 0.e0;
          real coeff1F17#2 = -0.4e1;
          real basisEval1F18#2 = RMul(coeff1F17,prod1F09);
          real coeff1F19#1 = -0.8e1;
          real mult1F1A#2 = RMul(coeff1F04,prod1F0B);
          real mult1F1B#1 = RMul(coeff1F19,prod1F07);
          real sum1F1C#1 = RAdd(basisEval1F18,mult1F1B);
          real sum1F1D#1 = RAdd(mult1F1A,sum1F1C);
          real intermediate1F1E#1 = sum1F1D;
          real intermediate1F1F#1 = sum1F10;
          real sum1F20#1 = RAdd(mult1F13,mult1F0D);
          real intermediate1F21#1 = sum1F20;
          real mult1F22#2 = RMul(coeff1F17,prod1F07);
          real sum1F23#1 = RAdd(mult1F1A,mult1F22);
          real intermediate1F24#1 = sum1F23;
          tensor[6] intermediateCons1F25#1 = <tensor[6]>[intermediate1F11,intermediate1F15,basisEval1F16,mult1F0D,basisEval1F18,intermediate1F1E];
          tensor[6] intermediateCons1F26#1 = <tensor[6]>[intermediate1F1F,basisEval1F16,intermediate1F21,mult1F0E,intermediate1F24,mult1F22];
          tensor[6] projParam1F50#1 = intermediateCons1F25;
          real vdot1F51#1 = VDot<6>(femDofs1CDE,projParam1F50);
          tensor[6] projParam1F52#1 = intermediateCons1F26;
          real vdot1F53#1 = VDot<6>(femDofs1CDE,projParam1F52);
          int ilit1F5B#1 = 3;
          int mulRes1F5C#3 = IMul(_t1A31,ilit1F5B);
          int addRes1F5E#1 = mulRes1F5C;
          int idx1F5F#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(_t1A2F,addRes1F5E);
          int ilit1F60#1 = 1;
          int addRes1F61#1 = IAdd(mulRes1F5C,ilit1F60);
          int idx1F62#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(_t1A2F,addRes1F61);
          int ilit1F63#1 = 2;
          int addRes1F64#1 = IAdd(mulRes1F5C,ilit1F63);
          int idx1F65#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(_t1A2F,addRes1F64);
          int ilit1F76#3 = 2;
          int idx1F77#1 = idx1F5F;
          int mulRes1F78#2 = IMul(ilit1F76,idx1F77);
          int addRes1F79#1 = mulRes1F78;
          int ilit1F7A#3 = 1;
          int addRes1F7B#1 = IAdd(ilit1F7A,mulRes1F78);
          real dof_load1F7C#3 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1A2F,addRes1F79);
          real dof_load1F7D#3 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1A2F,addRes1F7B);
          int idx1F7F#1 = idx1F62;
          int mulRes1F80#2 = IMul(ilit1F76,idx1F7F);
          int addRes1F81#1 = mulRes1F80;
          int addRes1F82#1 = IAdd(ilit1F7A,mulRes1F80);
          real dof_load1F83#3 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1A2F,addRes1F81);
          real dof_load1F84#3 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1A2F,addRes1F82);
          int idx1F86#1 = idx1F65;
          int mulRes1F87#2 = IMul(ilit1F76,idx1F86);
          int addRes1F88#1 = mulRes1F87;
          int addRes1F89#1 = IAdd(ilit1F7A,mulRes1F87);
          real dof_load1F8A#3 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1A2F,addRes1F88);
          real dof_load1F8B#3 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1A2F,addRes1F89);
          real coeff1FAB#1 = -0.1e1;
          real one1FAC#3 = 0.1e1;
          real prod1FAD#2 = RMul(one1FAC,one1FAC);
          real basisEval1FAE#4 = RMul(coeff1FAB,prod1FAD);
          real basisEval1FAF#4 = RMul(one1FAC,prod1FAD);
          real basisEval1FB0#4 = 0.e0;
          real r1FC1#2 = dof_load1F7C;
          real r1FC2#2 = basisEval1FAE;
          real r1FC3#1 = RMul(r1FC1,r1FC2);
          real r1FC4#2 = dof_load1F83;
          real r1FC5#2 = basisEval1FAF;
          real r1FC6#1 = RMul(r1FC4,r1FC5);
          real r1FC7#2 = dof_load1F8A;
          real r1FC8#2 = basisEval1FB0;
          real r1FC9#1 = RMul(r1FC7,r1FC8);
          real r1FCA#1 = RAdd(r1FC3,r1FC6);
          real r1FCB#1 = RAdd(r1FCA,r1FC9);
          real r1FCC#2 = basisEval1FAE;
          real r1FCD#1 = RMul(r1FC1,r1FCC);
          real r1FCE#2 = basisEval1FB0;
          real r1FCF#1 = RMul(r1FC4,r1FCE);
          real r1FD0#2 = basisEval1FAF;
          real r1FD1#1 = RMul(r1FC7,r1FD0);
          real r1FD2#1 = RAdd(r1FCD,r1FCF);
          real r1FD3#1 = RAdd(r1FD2,r1FD1);
          real r1FD5#2 = dof_load1F7D;
          real r1FD6#1 = RMul(r1FD5,r1FC2);
          real r1FD7#2 = dof_load1F84;
          real r1FD8#1 = RMul(r1FD7,r1FC5);
          real r1FD9#2 = dof_load1F8B;
          real r1FDA#1 = RMul(r1FD9,r1FC8);
          real r1FDB#1 = RAdd(r1FD6,r1FD8);
          real r1FDC#1 = RAdd(r1FDB,r1FDA);
          real r1FDD#1 = RMul(r1FD5,r1FCC);
          real r1FDE#1 = RMul(r1FD7,r1FCE);
          real r1FDF#1 = RMul(r1FD9,r1FD0);
          real r1FE0#1 = RAdd(r1FDD,r1FDE);
          real r1FE1#1 = RAdd(r1FE0,r1FDF);
          real realLit2008#4 = 0.e0;
          real r2009#2 = r1FCB;
          real r200A#1 = RMul(realLit2008,r2009);
          real realLit200B#2 = -0.1e1;
          real r200C#2 = r1FDC;
          real r200D#1 = RMul(realLit200B,r200C);
          real r200E#1 = RAdd(r200A,r200D);
          real r200F#2 = r1FD3;
          real r2010#1 = RMul(realLit2008,r200F);
          real r2011#2 = r1FE1;
          real r2012#1 = RMul(realLit200B,r2011);
          real r2013#1 = RAdd(r2010,r2012);
          real realLit2015#2 = 0.1e1;
          real r2016#1 = RMul(realLit2015,r2009);
          real r2017#1 = RMul(realLit2008,r200C);
          real r2018#1 = RAdd(r2016,r2017);
          real r2019#1 = RMul(realLit2015,r200F);
          real r201A#1 = RMul(realLit2008,r2011);
          real r201B#1 = RAdd(r2019,r201A);
          real r2035#1 = dof_load1F7C;
          real r2036#2 = basisEval1FAE;
          real r2037#1 = RMul(r2035,r2036);
          real r2038#1 = dof_load1F83;
          real r2039#2 = basisEval1FAF;
          real r203A#1 = RMul(r2038,r2039);
          real r203B#1 = dof_load1F8A;
          real r203C#2 = basisEval1FB0;
          real r203D#1 = RMul(r203B,r203C);
          real r203E#1 = RAdd(r2037,r203A);
          real r203F#1 = RAdd(r203E,r203D);
          real r2040#1 = dof_load1F7D;
          real r2041#1 = RMul(r2040,r2036);
          real r2042#1 = dof_load1F84;
          real r2043#1 = RMul(r2042,r2039);
          real r2044#1 = dof_load1F8B;
          real r2045#1 = RMul(r2044,r203C);
          real r2046#1 = RAdd(r2041,r2043);
          real r2047#1 = RAdd(r2046,r2045);
          tensor[2] probe_l_102034#1 = <tensor[2]>[r203F,r2047];
          real r205E#1 = dof_load1F7C;
          real r205F#2 = basisEval1FAE;
          real r2060#1 = RMul(r205E,r205F);
          real r2061#1 = dof_load1F83;
          real r2062#2 = basisEval1FB0;
          real r2063#1 = RMul(r2061,r2062);
          real r2064#1 = dof_load1F8A;
          real r2065#2 = basisEval1FAF;
          real r2066#1 = RMul(r2064,r2065);
          real r2067#1 = RAdd(r2060,r2063);
          real r2068#1 = RAdd(r2067,r2066);
          real r2069#1 = dof_load1F7D;
          real r206A#1 = RMul(r2069,r205F);
          real r206B#1 = dof_load1F84;
          real r206C#1 = RMul(r206B,r2062);
          real r206D#1 = dof_load1F8B;
          real r206E#1 = RMul(r206D,r2065);
          real r206F#1 = RAdd(r206A,r206C);
          real r2070#1 = RAdd(r206F,r206E);
          real realLit2087#2 = 0.e0;
          real r2088#2 = r2068;
          real r2089#1 = RMul(realLit2087,r2088);
          real realLit208A#1 = 0.1e1;
          real r208B#2 = r2070;
          real r208C#1 = RMul(realLit208A,r208B);
          real r208D#1 = RAdd(r2089,r208C);
          real realLit208E#1 = -0.1e1;
          real r208F#1 = RMul(realLit208E,r2088);
          real r2090#1 = RMul(realLit2087,r208B);
          real r2091#1 = RAdd(r208F,r2090);
          tensor[2] op1_e3_l_122086#1 = <tensor[2]>[r208D,r2091];
          real realLit20A0#4 = 0.e0;
          real r20A1#2 = r200E;
          real r20A2#1 = RMul(realLit20A0,r20A1);
          real realLit20A3#2 = -0.1e1;
          real r20A4#2 = r2013;
          real r20A5#1 = RMul(realLit20A3,r20A4);
          real r20A6#1 = RAdd(r20A2,r20A5);
          real r20A7#2 = r2018;
          real r20A8#1 = RMul(realLit20A0,r20A7);
          real r20A9#2 = r201B;
          real r20AA#1 = RMul(realLit20A3,r20A9);
          real r20AB#1 = RAdd(r20A8,r20AA);
          real realLit20AD#2 = 0.1e1;
          real r20AE#1 = RMul(realLit20AD,r20A1);
          real r20AF#1 = RMul(realLit20A0,r20A4);
          real r20B0#1 = RAdd(r20AE,r20AF);
          real r20B1#1 = RMul(realLit20AD,r20A7);
          real r20B2#1 = RMul(realLit20A0,r20A9);
          real r20B3#1 = RAdd(r20B1,r20B2);
          real op1_e3_l_1420CC#4 = VDot<2>(probe_l_102034,op1_e3_l_122086);
          real r20D0#1 = r20A6;
          real r20D1#1 = RDiv(r20D0,op1_e3_l_1420CC);
          real r20D2#1 = r20AB;
          real r20D3#1 = RDiv(r20D2,op1_e3_l_1420CC);
          real r20D5#1 = r20B0;
          real r20D6#1 = RDiv(r20D5,op1_e3_l_1420CC);
          real r20D7#1 = r20B3;
          real r20D8#1 = RDiv(r20D7,op1_e3_l_1420CC);
          real r20E7#2 = vdot1F51;
          real r20E8#1 = r20D1;
          real r20E9#1 = RMul(r20E7,r20E8);
          real r20EA#2 = vdot1F53;
          real r20EB#1 = r20D6;
          real r20EC#1 = RMul(r20EA,r20EB);
          real r20ED#1 = RAdd(r20E9,r20EC);
          real r20EE#1 = r20D3;
          real r20EF#1 = RMul(r20E7,r20EE);
          real r20F0#1 = r20D8;
          real r20F1#1 = RMul(r20EA,r20F0);
          real r20F2#1 = RAdd(r20EF,r20F1);
          tensor[2] grad20E6#1 = <tensor[2]>[r20ED,r20F2];
          goto JOIN2103
        JOIN2103:  preds = [ASSIGN2100,COND1F00]
          tensor[2] grad2101#1 = phi(grad20E6,grad1EFC)
          real out2102#1 = phi(fmVal1E81,out1A08)
          if _t1EB7 then goto ASSIGN212C else goto JOIN2308
        ASSIGN212C:  preds = [COND2104]
          real varAcc2106#1 = VIndex<2,0>(refPos1CA3);
          real varAcc2107#1 = VIndex<2,1>(refPos1CA3);
          real coeff2108#3 = 0.4e1;
          real iden2109#1 = varAcc2106;
          real one210A#4 = 0.1e1;
          real prod210B#3 = RMul(iden2109,one210A);
          real iden210C#1 = varAcc2107;
          real prod210D#2 = RMul(one210A,iden210C);
          real coeff210E#1 = -0.3e1;
          real prod210F#3 = RMul(one210A,one210A);
          real mult2110#1 = RMul(coeff210E,prod210F);
          real mult2111#3 = RMul(coeff2108,prod210D);
          real mult2112#3 = RMul(coeff2108,prod210B);
          real sum2113#1 = RAdd(mult2111,mult2112);
          real sum2114#2 = RAdd(mult2110,sum2113);
          real intermediate2115#1 = sum2114;
          real coeff2116#1 = -0.1e1;
          real mult2117#2 = RMul(coeff2116,prod210F);
          real sum2118#1 = RAdd(mult2117,mult2112);
          real intermediate2119#1 = sum2118;
          real basisEval211A#2 = 0.e0;
          real coeff211B#2 = -0.4e1;
          real basisEval211C#2 = RMul(coeff211B,prod210D);
          real coeff211D#1 = -0.8e1;
          real mult211E#2 = RMul(coeff2108,prod210F);
          real mult211F#1 = RMul(coeff211D,prod210B);
          real sum2120#1 = RAdd(basisEval211C,mult211F);
          real sum2121#1 = RAdd(mult211E,sum2120);
          real intermediate2122#1 = sum2121;
          real intermediate2123#1 = sum2114;
          real sum2124#1 = RAdd(mult2117,mult2111);
          real intermediate2125#1 = sum2124;
          real mult2126#2 = RMul(coeff211B,prod210B);
          real sum2127#1 = RAdd(mult211E,mult2126);
          real intermediate2128#1 = sum2127;
          tensor[6] intermediateCons2129#1 = <tensor[6]>[intermediate2115,intermediate2119,basisEval211A,mult2111,basisEval211C,intermediate2122];
          tensor[6] intermediateCons212A#1 = <tensor[6]>[intermediate2123,basisEval211A,intermediate2125,mult2112,intermediate2128,mult2126];
          tensor[6] projParam2154#1 = intermediateCons2129;
          real vdot2155#1 = VDot<6>(femDofs1CDE,projParam2154);
          tensor[6] projParam2156#1 = intermediateCons212A;
          real vdot2157#1 = VDot<6>(femDofs1CDE,projParam2156);
          int ilit215F#1 = 3;
          int mulRes2160#3 = IMul(_t1A31,ilit215F);
          int addRes2162#1 = mulRes2160;
          int idx2163#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(_t1A2F,addRes2162);
          int ilit2164#1 = 1;
          int addRes2165#1 = IAdd(mulRes2160,ilit2164);
          int idx2166#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(_t1A2F,addRes2165);
          int ilit2167#1 = 2;
          int addRes2168#1 = IAdd(mulRes2160,ilit2167);
          int idx2169#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(_t1A2F,addRes2168);
          int ilit217A#3 = 2;
          int idx217B#1 = idx2163;
          int mulRes217C#2 = IMul(ilit217A,idx217B);
          int addRes217D#1 = mulRes217C;
          int ilit217E#3 = 1;
          int addRes217F#1 = IAdd(ilit217E,mulRes217C);
          real dof_load2180#3 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1A2F,addRes217D);
          real dof_load2181#3 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1A2F,addRes217F);
          int idx2183#1 = idx2166;
          int mulRes2184#2 = IMul(ilit217A,idx2183);
          int addRes2185#1 = mulRes2184;
          int addRes2186#1 = IAdd(ilit217E,mulRes2184);
          real dof_load2187#3 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1A2F,addRes2185);
          real dof_load2188#3 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1A2F,addRes2186);
          int idx218A#1 = idx2169;
          int mulRes218B#2 = IMul(ilit217A,idx218A);
          int addRes218C#1 = mulRes218B;
          int addRes218D#1 = IAdd(ilit217E,mulRes218B);
          real dof_load218E#3 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1A2F,addRes218C);
          real dof_load218F#3 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1A2F,addRes218D);
          real coeff21AF#1 = -0.1e1;
          real one21B0#3 = 0.1e1;
          real prod21B1#2 = RMul(one21B0,one21B0);
          real basisEval21B2#4 = RMul(coeff21AF,prod21B1);
          real basisEval21B3#4 = RMul(one21B0,prod21B1);
          real basisEval21B4#4 = 0.e0;
          real r21C5#2 = dof_load2180;
          real r21C6#2 = basisEval21B2;
          real r21C7#1 = RMul(r21C5,r21C6);
          real r21C8#2 = dof_load2187;
          real r21C9#2 = basisEval21B3;
          real r21CA#1 = RMul(r21C8,r21C9);
          real r21CB#2 = dof_load218E;
          real r21CC#2 = basisEval21B4;
          real r21CD#1 = RMul(r21CB,r21CC);
          real r21CE#1 = RAdd(r21C7,r21CA);
          real r21CF#1 = RAdd(r21CE,r21CD);
          real r21D0#2 = basisEval21B2;
          real r21D1#1 = RMul(r21C5,r21D0);
          real r21D2#2 = basisEval21B4;
          real r21D3#1 = RMul(r21C8,r21D2);
          real r21D4#2 = basisEval21B3;
          real r21D5#1 = RMul(r21CB,r21D4);
          real r21D6#1 = RAdd(r21D1,r21D3);
          real r21D7#1 = RAdd(r21D6,r21D5);
          real r21D9#2 = dof_load2181;
          real r21DA#1 = RMul(r21D9,r21C6);
          real r21DB#2 = dof_load2188;
          real r21DC#1 = RMul(r21DB,r21C9);
          real r21DD#2 = dof_load218F;
          real r21DE#1 = RMul(r21DD,r21CC);
          real r21DF#1 = RAdd(r21DA,r21DC);
          real r21E0#1 = RAdd(r21DF,r21DE);
          real r21E1#1 = RMul(r21D9,r21D0);
          real r21E2#1 = RMul(r21DB,r21D2);
          real r21E3#1 = RMul(r21DD,r21D4);
          real r21E4#1 = RAdd(r21E1,r21E2);
          real r21E5#1 = RAdd(r21E4,r21E3);
          real realLit220C#4 = 0.e0;
          real r220D#2 = r21CF;
          real r220E#1 = RMul(realLit220C,r220D);
          real realLit220F#2 = -0.1e1;
          real r2210#2 = r21E0;
          real r2211#1 = RMul(realLit220F,r2210);
          real r2212#1 = RAdd(r220E,r2211);
          real r2213#2 = r21D7;
          real r2214#1 = RMul(realLit220C,r2213);
          real r2215#2 = r21E5;
          real r2216#1 = RMul(realLit220F,r2215);
          real r2217#1 = RAdd(r2214,r2216);
          real realLit2219#2 = 0.1e1;
          real r221A#1 = RMul(realLit2219,r220D);
          real r221B#1 = RMul(realLit220C,r2210);
          real r221C#1 = RAdd(r221A,r221B);
          real r221D#1 = RMul(realLit2219,r2213);
          real r221E#1 = RMul(realLit220C,r2215);
          real r221F#1 = RAdd(r221D,r221E);
          real r2239#1 = dof_load2180;
          real r223A#2 = basisEval21B2;
          real r223B#1 = RMul(r2239,r223A);
          real r223C#1 = dof_load2187;
          real r223D#2 = basisEval21B3;
          real r223E#1 = RMul(r223C,r223D);
          real r223F#1 = dof_load218E;
          real r2240#2 = basisEval21B4;
          real r2241#1 = RMul(r223F,r2240);
          real r2242#1 = RAdd(r223B,r223E);
          real r2243#1 = RAdd(r2242,r2241);
          real r2244#1 = dof_load2181;
          real r2245#1 = RMul(r2244,r223A);
          real r2246#1 = dof_load2188;
          real r2247#1 = RMul(r2246,r223D);
          real r2248#1 = dof_load218F;
          real r2249#1 = RMul(r2248,r2240);
          real r224A#1 = RAdd(r2245,r2247);
          real r224B#1 = RAdd(r224A,r2249);
          tensor[2] probe_l_102238#1 = <tensor[2]>[r2243,r224B];
          real r2262#1 = dof_load2180;
          real r2263#2 = basisEval21B2;
          real r2264#1 = RMul(r2262,r2263);
          real r2265#1 = dof_load2187;
          real r2266#2 = basisEval21B4;
          real r2267#1 = RMul(r2265,r2266);
          real r2268#1 = dof_load218E;
          real r2269#2 = basisEval21B3;
          real r226A#1 = RMul(r2268,r2269);
          real r226B#1 = RAdd(r2264,r2267);
          real r226C#1 = RAdd(r226B,r226A);
          real r226D#1 = dof_load2181;
          real r226E#1 = RMul(r226D,r2263);
          real r226F#1 = dof_load2188;
          real r2270#1 = RMul(r226F,r2266);
          real r2271#1 = dof_load218F;
          real r2272#1 = RMul(r2271,r2269);
          real r2273#1 = RAdd(r226E,r2270);
          real r2274#1 = RAdd(r2273,r2272);
          real realLit228B#2 = 0.e0;
          real r228C#2 = r226C;
          real r228D#1 = RMul(realLit228B,r228C);
          real realLit228E#1 = 0.1e1;
          real r228F#2 = r2274;
          real r2290#1 = RMul(realLit228E,r228F);
          real r2291#1 = RAdd(r228D,r2290);
          real realLit2292#1 = -0.1e1;
          real r2293#1 = RMul(realLit2292,r228C);
          real r2294#1 = RMul(realLit228B,r228F);
          real r2295#1 = RAdd(r2293,r2294);
          tensor[2] op1_e3_l_12228A#1 = <tensor[2]>[r2291,r2295];
          real realLit22A4#4 = 0.e0;
          real r22A5#2 = r2212;
          real r22A6#1 = RMul(realLit22A4,r22A5);
          real realLit22A7#2 = -0.1e1;
          real r22A8#2 = r2217;
          real r22A9#1 = RMul(realLit22A7,r22A8);
          real r22AA#1 = RAdd(r22A6,r22A9);
          real r22AB#2 = r221C;
          real r22AC#1 = RMul(realLit22A4,r22AB);
          real r22AD#2 = r221F;
          real r22AE#1 = RMul(realLit22A7,r22AD);
          real r22AF#1 = RAdd(r22AC,r22AE);
          real realLit22B1#2 = 0.1e1;
          real r22B2#1 = RMul(realLit22B1,r22A5);
          real r22B3#1 = RMul(realLit22A4,r22A8);
          real r22B4#1 = RAdd(r22B2,r22B3);
          real r22B5#1 = RMul(realLit22B1,r22AB);
          real r22B6#1 = RMul(realLit22A4,r22AD);
          real r22B7#1 = RAdd(r22B5,r22B6);
          real op1_e3_l_1422D0#4 = VDot<2>(probe_l_102238,op1_e3_l_12228A);
          real r22D4#1 = r22AA;
          real r22D5#1 = RDiv(r22D4,op1_e3_l_1422D0);
          real r22D6#1 = r22AF;
          real r22D7#1 = RDiv(r22D6,op1_e3_l_1422D0);
          real r22D9#1 = r22B4;
          real r22DA#1 = RDiv(r22D9,op1_e3_l_1422D0);
          real r22DB#1 = r22B7;
          real r22DC#1 = RDiv(r22DB,op1_e3_l_1422D0);
          real r22EB#2 = vdot2155;
          real r22EC#1 = r22D5;
          real r22ED#1 = RMul(r22EB,r22EC);
          real r22EE#2 = vdot2157;
          real r22EF#1 = r22DA;
          real r22F0#1 = RMul(r22EE,r22EF);
          real r22F1#1 = RAdd(r22ED,r22F0);
          real r22F2#1 = r22D7;
          real r22F3#1 = RMul(r22EB,r22F2);
          real r22F4#1 = r22DC;
          real r22F5#1 = RMul(r22EE,r22F4);
          real r22F6#1 = RAdd(r22F3,r22F5);
          tensor[2] grad22EA#1 = <tensor[2]>[r22F1,r22F6];
          goto JOIN2308
        JOIN2308:  preds = [ASSIGN2304,COND2104]
          tensor[2] grad2305#3 = phi(grad22EA,grad2101)
          real cup2306#1 = phi(s1EAC,cup1E13)
          real out2307#3 = phi(faVal1D70,out2102)
          string _t2309#1 = "Out val:";
          Print<[string,real,string]>(_t2309,out2307,_t1A0E);
          string _t230C#1 = "Grad val:";
          Print<[string,tensor[2],string]>(_t230C,grad2305,_t1A0E);
          real _t230F#6 = 0.1e1;
          tensor[3] mcol2311#1 = <tensor[3]>[_t230F,_t230F,_t230F];
          bool _t2313#1 = NEQ<real>(cmin19E0,cmax19E2);
          if _t2313 then goto ASSIGN2317 else goto JOIN2397
        ASSIGN2317:  preds = [COND2315]
          real _t2316#2 = -0.1e1;
          real op1_e3_l_52318#1 = RSub(out2307,cmin19E0);
          real op1_e3_l_6231B#1 = RSub(cmax19E2,cmin19E0);
          real op1_e3_l_7231E#1 = RDiv(op1_e3_l_52318,op1_e3_l_6231B);
          real op1_e3_l_82321#1 = RSub(_t230F,_t2316);
          real op1_e3_l_92324#1 = RMul(op1_e3_l_7231E,op1_e3_l_82321);
          real _t2327#1 = RAdd(_t2316,op1_e3_l_92324);
          real Mtransform232A#1 = Transform<IMAGE1D<double[3]>>(cmap19CC);
          real MxPos232C#1 = RMul(Mtransform232A,_t2327);
          real Ttranslate232F#1 = Translate<IMAGE1D<double[3]>>(cmap19CC);
          real imgPos2331#2 = RAdd(MxPos232C,Ttranslate232F);
          real nd2334#2 = Floor<1>(imgPos2331);
          real f2336#2 = RSub(imgPos2331,nd2334);
          int n2339#1 = RealToInt<1>(nd2334);
          int idx233B#5 = n2339;
          bool isInside233D#1 = IndexInside<IMAGE1D<double[3]>,2>(idx233B,cmap19CC);
          if isInside233D then goto ASSIGN2589 else goto ASSIGN258A
        ASSIGN2589:  preds = [COND233F]
          int addRes2342#1 = idx233B;
          int stride2343#2 = 3;
          int offp2344#3 = IMul(stride2343,addRes2342);
          real v0_2345#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap19CC,offp2344);
          int ilit2346#3 = 1;
          int addRes2347#1 = IAdd(idx233B,ilit2346);
          int offp2348#3 = IMul(stride2343,addRes2347);
          real v1_2349#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap19CC,offp2348);
          tensor[2] v_234A#1 = <tensor[2]>[v0_2345,v1_2349];
          int offp234B#1 = IAdd(offp2344,ilit2346);
          real v0_234C#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap19CC,offp234B);
          int offp234D#1 = IAdd(offp2348,ilit2346);
          real v1_234E#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap19CC,offp234D);
          tensor[2] v_234F#1 = <tensor[2]>[v0_234C,v1_234E];
          int offset2350#2 = 2;
          int offp2351#1 = IAdd(offp2344,offset2350);
          real v0_2352#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap19CC,offp2351);
          int offp2353#1 = IAdd(offp2348,offset2350);
          real v1_2354#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap19CC,offp2353);
          tensor[2] v_2355#1 = <tensor[2]>[v0_2352,v1_2354];
          tensor[3,2] voxels2356#1 = <tensor[3,2]>[v_234A,v_234F,v_2355];
          tensor[3,2] ldvox2340#1 = voxels2356;
          goto JOIN2370
        JOIN2370:  preds = [ASSIGN236D,ASSIGN245F]
          tensor[3,2] ldvox236E#3 = phi(ldvox2340,ldvox236F)
          real rlit2372#1 = 0.1e1;
          real idx2373#1 = RSub(f2336,rlit2372);
          tensor[2] kernX_2371#1 = <tensor[2]>[f2336,idx2373];
          real _f237C#1 = 0.1e1;
          real _f237D#1 = 0.1e1;
          tensor[2] a02378#1 = <tensor[2]>[_f237C,_f237D];
          real _f237A#1 = -0.1e1;
          real _f237B#1 = 0.1e1;
          tensor[2] a12379#1 = <tensor[2]>[_f237A,_f237B];
          tensor[2] prod1237E#1 = VMul<2>(kernX_2371,a12379);
          tensor[2] kevalX_d0_2377#3 = VAdd<2>(a02378,prod1237E);
          tensor[2] projIx2388#1 = ProjectLast<tensor[3,2],[0]>(ldvox236E);
          real vdot2389#1 = VDot<2>(projIx2388,kevalX_d0_2377);
          tensor[2] projIx238A#1 = ProjectLast<tensor[3,2],[1]>(ldvox236E);
          real vdot238B#1 = VDot<2>(projIx238A,kevalX_d0_2377);
          tensor[2] projIx238C#1 = ProjectLast<tensor[3,2],[2]>(ldvox236E);
          real vdot238D#1 = VDot<2>(projIx238C,kevalX_d0_2377);
          tensor[3] mcol2387#1 = <tensor[3]>[vdot2389,vdot238B,vdot238D];
          goto JOIN2397
        JOIN2397:  preds = [ASSIGN2395,COND2315]
          tensor[3] mcol2396#7 = phi(mcol2387,mcol2311)
          if light19E4 then goto ASSIGN239A else goto ASSIGN2429
        ASSIGN239A:  preds = [COND2398]
          real _t2399#1 = VIndex<2,0>(grad2305);
          real _t239B#1 = VIndex<2,1>(grad2305);
          real _t239D#1 = -0.1e1;
          tensor[3] N239F#2 = <tensor[3]>[_t2399,_t239B,_t239D];
          real _t23A1#1 = VDot<3>(N239F,L19EE);
          real _t23A4#1 = Max<real>(_t1E96,_t23A1);
          real op1_e3_l_723A6#1 = VDot<3>(rayVec19F2,rayVec19F2);
          real op1_e3_l_823A9#1 = Sqrt(op1_e3_l_723A6);
          real realLit23AD#1 = 0.1e1;
          real op1_e3_l_923AC#1 = RDiv(realLit23AD,op1_e3_l_823A9);
          tensor[3] op1_e3_l_1023B1#1 = VScale<3>(op1_e3_l_923AC,rayVec19F2);
          tensor[3] op1_e3_l_1123B4#1 = VNeg<3>(op1_e3_l_1023B1);
          tensor[3] op1_e3_l_1723B7#3 = VAdd<3>(op1_e3_l_1123B4,L19EE);
          real op1_e3_l_1923BA#1 = VDot<3>(op1_e3_l_1723B7,op1_e3_l_1723B7);
          real op1_e3_l_2023BD#1 = Sqrt(op1_e3_l_1923BA);
          real realLit23C1#1 = 0.1e1;
          real op1_e3_l_2723C0#1 = RDiv(realLit23C1,op1_e3_l_2023BD);
          real op1_e3_l_2823C5#1 = VDot<3>(N239F,op1_e3_l_1723B7);
          real _t23C8#1 = RMul(op1_e3_l_2723C0,op1_e3_l_2823C5);
          real _t23CB#1 = Max<real>(_t1E96,_t23C8);
          real _t23CD#1 = MathFn<pow>(_t23CB,phongSp19EC);
          real op1_e3_l_1723CF#1 = RSub(cup2306,camNearVsp19F4);
          real op1_e3_l_1823D2#1 = RSub(camFarVsp19F6,camNearVsp19F4);
          real op1_e3_l_1923D5#1 = RDiv(op1_e3_l_1723CF,op1_e3_l_1823D2);
          tensor[3] op1_e3_l_2023D8#1 = VSub<3>(mcfar19DE,mcnear19DC);
          tensor[3] op1_e3_l_2123DB#1 = VScale<3>(op1_e3_l_1923D5,op1_e3_l_2023D8);
          tensor[3] op1_e3_l_2223DE#6 = VAdd<3>(mcnear19DC,op1_e3_l_2123DB);
          tensor[3] op1_e3_l_2923E1#1 = VScale<3>(phongKa19E6,mcol2396);
          real r23E5#1 = TensorIndex<tensor[3],[0]>(mcol2396);
          real r23E6#1 = TensorIndex<tensor[3],[0]>(op1_e3_l_2223DE);
          real r23E7#3 = RMul(_t23A4,phongKd19E8);
          real r23E8#1 = RMul(r23E7,r23E5);
          real r23E9#1 = RMul(r23E8,r23E6);
          real r23EA#1 = TensorIndex<tensor[3],[1]>(mcol2396);
          real r23EB#1 = TensorIndex<tensor[3],[1]>(op1_e3_l_2223DE);
          real r23EC#1 = RMul(r23E7,r23EA);
          real r23ED#1 = RMul(r23EC,r23EB);
          real r23EE#1 = TensorIndex<tensor[3],[2]>(mcol2396);
          real r23EF#1 = TensorIndex<tensor[3],[2]>(op1_e3_l_2223DE);
          real r23F0#1 = RMul(r23E7,r23EE);
          real r23F1#1 = RMul(r23F0,r23EF);
          tensor[3] op1_e3_l_3023E4#1 = <tensor[3]>[r23E9,r23ED,r23F1];
          real r2402#1 = TensorIndex<tensor[3],[0]>(op1_e3_l_2223DE);
          real r2403#3 = RMul(_t23CD,phongKs19EA);
          real r2404#1 = RMul(r2403,r2402);
          real r2405#1 = TensorIndex<tensor[3],[1]>(op1_e3_l_2223DE);
          real r2406#1 = RMul(r2403,r2405);
          real r2407#1 = TensorIndex<tensor[3],[2]>(op1_e3_l_2223DE);
          real r2408#1 = RMul(r2403,r2407);
          tensor[3] op1_e3_l_312401#1 = <tensor[3]>[r2404,r2406,r2408];
          tensor[3] v2413#1 = VAdd<3>(op1_e3_l_2923E1,op1_e3_l_3023E4);
          tensor[3] fin2412#3 = VAdd<3>(v2413,op1_e3_l_312401);
          real _t2417#1 = VIndex<3,0>(fin2412);
          real _t2419#1 = VIndex<3,1>(fin2412);
          real _t241B#1 = VIndex<3,2>(fin2412);
          tensor[4] rgba241D#1 = <tensor[4]>[_t2417,_t2419,_t241B,_t230F];
          goto JOIN2421
        JOIN2421:  preds = [ASSIGN241E,ASSIGN242E]
          tensor[4] rgba241F#1 = phi(rgba241D,rgba2420)
          self.intersectionItter = _t1EA6;
          self.s = s1EAC;
          self.e = e1EAB;
          self.out = out2307;
          self.rgba = rgba241F;
          stabilize
          goto JOIN1EF5
        ASSIGN2429:  preds = [COND2398]
          real _t2428#1 = VIndex<3,0>(mcol2396);
          real _t242A#1 = VIndex<3,1>(mcol2396);
          real _t242C#1 = VIndex<3,2>(mcol2396);
          tensor[4] rgba2420#1 = <tensor[4]>[_t2428,_t242A,_t242C,_t230F];
          goto JOIN2421
        ASSIGN258A:  preds = [COND233F]
          int addRes2430#1 = idx233B;
          int ix2431#1 = ControlIndex<IMAGE1D<double[3]>,clamp,0>(cmap19CC,addRes2430);
          int stride2432#2 = 3;
          int offp2433#3 = IMul(stride2432,ix2431);
          real v0_2434#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap19CC,offp2433);
          int ilit2435#3 = 1;
          int addRes2436#1 = IAdd(idx233B,ilit2435);
          int ix2437#1 = ControlIndex<IMAGE1D<double[3]>,clamp,0>(cmap19CC,addRes2436);
          int offp2438#3 = IMul(stride2432,ix2437);
          real v1_2439#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap19CC,offp2438);
          tensor[2] v_243A#1 = <tensor[2]>[v0_2434,v1_2439];
          int offp243B#1 = IAdd(offp2433,ilit2435);
          real v0_243C#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap19CC,offp243B);
          int offp243D#1 = IAdd(offp2438,ilit2435);
          real v1_243E#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap19CC,offp243D);
          tensor[2] v_243F#1 = <tensor[2]>[v0_243C,v1_243E];
          int offset2440#2 = 2;
          int offp2441#1 = IAdd(offp2433,offset2440);
          real v0_2442#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap19CC,offp2441);
          int offp2443#1 = IAdd(offp2438,offset2440);
          real v1_2444#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap19CC,offp2443);
          tensor[2] v_2445#1 = <tensor[2]>[v0_2442,v1_2444];
          tensor[3,2] voxels2446#1 = <tensor[3,2]>[v_243A,v_243F,v_2445];
          tensor[3,2] ldvox236F#1 = voxels2446;
          goto JOIN2370
        ASSIGN2460:  preds = [COND1EC5]
          bool _t1EC9#1 = false;
          goto JOIN1ECA
        ASSIGN2462:  preds = [COND1EBF]
          string _t2461#1 = "=========\n";
          Print<[string]>(_t2461);
          goto JOIN1EF7
        ASSIGN2466:  preds = [COND1EB9]
          real _t2464#1 = Abs<real>(fm1E8A);
          bool _t2467#1 = LT<real>(_t2464,eps19D6);
          if _t2467 then goto ASSIGN246B else goto ASSIGN246F
        ASSIGN246B:  preds = [COND2469]
          bool _t246A#1 = true;
          goto JOIN246D
        JOIN246D:  preds = [ASSIGN246B,ASSIGN2470]
          bool _t1EBD#1 = phi(_t246A,_t246C)
          goto JOIN1EBE
        ASSIGN246F:  preds = [COND2469]
          int _t246E#1 = 32;
          bool _t246C#1 = GT<int>(intersectionItter1E94,_t246E);
          goto JOIN246D
        COND2471:  preds = [COND1EAA]
          if _t1E98 then goto JOIN2474 else goto ASSIGN2486
        JOIN2474:  preds = [COND2471,JOIN248A]
          int _t2472#1 = phi(_t1E92,_t2473)
          if _t1E9E then goto JOIN2478 else goto ASSIGN2480
        JOIN2478:  preds = [COND2475,JOIN2484]
          int _t2476#1 = phi(_t1E92,_t2477)
          int _t2479#1 = IMul(_t2472,_t2476);
          bool _t247B#1 = GT<int>(_t2479,_t1EA6);
          if _t247B then goto JOIN247E else goto JOIN247E
        JOIN247E:  preds = [COND247D,COND247D]
          real s1EAD#1 = phi(cup1E13,s1E05)
          goto JOIN1EAE
        ASSIGN2480:  preds = [COND2475]
          bool _t247F#1 = LT<real>(fm1E8A,_t1E96);
          if _t247F then goto ASSIGN2483 else goto JOIN2484
        ASSIGN2483:  preds = [COND2481]
          int _t2482#1 = -1;
          goto JOIN2484
        JOIN2484:  preds = [ASSIGN2483,COND2481]
          int _t2477#1 = phi(_t2482,_t1EA6)
          goto JOIN2478
        ASSIGN2486:  preds = [COND2471]
          bool _t2485#1 = LT<real>(fa1D7D,_t1E96);
          if _t2485 then goto ASSIGN2489 else goto JOIN248A
        ASSIGN2489:  preds = [COND2487]
          int _t2488#1 = -1;
          goto JOIN248A
        JOIN248A:  preds = [ASSIGN2489,COND2487]
          int _t2473#1 = phi(_t2488,_t1EA6)
          goto JOIN2474
        ASSIGN248C:  preds = [COND1EA0]
          bool _t248B#1 = LT<real>(fm1E8A,_t1E96);
          if _t248B then goto ASSIGN248F else goto ASSIGN2492
        ASSIGN248F:  preds = [COND248D]
          int _t248E#1 = -1;
          goto JOIN2491
        JOIN2491:  preds = [ASSIGN248F,ASSIGN2492]
          int _t1EA2#1 = phi(_t248E,_t2490)
          goto JOIN1EA3
        ASSIGN2492:  preds = [COND248D]
          int _t2490#1 = 0;
          goto JOIN2491
        ASSIGN2494:  preds = [COND1E9A]
          bool _t2493#1 = LT<real>(fa1D7D,_t1E96);
          if _t2493 then goto ASSIGN2497 else goto ASSIGN249A
        ASSIGN2497:  preds = [COND2495]
          int _t2496#1 = -1;
          goto JOIN2499
        JOIN2499:  preds = [ASSIGN2497,ASSIGN249A]
          int _t1E9C#1 = phi(_t2496,_t2498)
          goto JOIN1E9D
        ASSIGN249A:  preds = [COND2495]
          int _t2498#1 = 0;
          goto JOIN2499
    end update
  end ray
## initial strand creation
  GRID(2)
    ENTRY249B:  preds = []
      int iresU249C#1 = globals.iresU16FD;
      int iresV249E#1 = globals.iresV16FE;
      int _t24A0#2 = 0;
      int _t24A2#2 = 1;
      int _t24A4#1 = ISub(iresU249C,_t24A2);
      int[] _t24A6#1 = Range(_t24A0,_t24A4);
    FOREACH24A9:  preds = [ASSIGN24A7,NEXT24B2]
      foreach (vi24A8 in _t24A6) on exit goto RETURN24B3
      int _t24AA#1 = ISub(iresV249E,_t24A2);
      int[] _t24AC#1 = Range(_t24A0,_t24AA);
    FOREACH24AF:  preds = [ASSIGN24AD,NEXT24B1]
      foreach (ui24AE in _t24AC) on exit goto NEXT24B2
      new ray(ui24AE,vi24A8);
      goto FOREACH24AF
    NEXT24B2:  preds = [FOREACH24AF]
      goto FOREACH24A9
    RETURN24B3:  preds = [FOREACH24A9]
      return
#### end program ####
##### low-ir: after value numbering ####
## properties
  GlobalInit StrandArray HasStartMethod ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[]) HasInputs HasGlobals
## globals
  input isoval16F7 (isoval) = <default>
  input thick16F8 (thick) = <default>
  input camEye16F9 (camEye) = <default>
  input camAt16FA (camAt) = <default>
  input camUp16FB (camUp) = <default>
  input camFOV16FC (camFOV) = <default>
  input iresU16FD (iresU) = <default>
  input iresV16FE (iresV) = <default>
  input camNear16FF (camNear) = <default>
  input camFar1700 (camFar) = <default>
  input refStep1701 (refStep) = <default>
  input rayStep1702 (rayStep) = <default>
  input a1703 (a) = <no-default>
  input 0b0472_intermedateGlobal1704 (b) = <no-default>
  input 0c0474_intermedateGlobal1705 (c) = <no-default>
  input eps1706 (eps) = <default>
  input indecies1707 (indecies) = <no-default>
  input times1708 (times) = <no-default>
  input cells1709 (cells) = <no-default>
  input mcnear170A (mcnear) = <default>
  input mcfar170B (mcfar) = <default>
  input cmap170C (cmap) = image("/home/teocollin/gitcode/diderot/tests/lipRay/find/cmap.nrrd")
  input cmin170D (cmin) = <default>
  input cmax170E (cmax) = <default>
  input light170F (light) = <default>
  input phongKa1710 (phongKa) = <default>
  input phongKd1711 (phongKd) = <default>
  input phongKs1712 (phongKs) = <default>
  input phongSp1713 (phongSp) = <default>
  input maxAlpha1714 (maxAlpha) = <default>
  input lightVsp1715 (lightVsp) = <default>
  global femData:MeshCell[] 0cell_a1716
  global femData:FemFunc c1717
  global real camNearVsp1718
  global real camFarVsp1719
  global tensor[3] camN171A
  global tensor[3] camU171B
  global tensor[3] camV171C
  global real camVmax171D
  global real camUmax171E
  global tensor[3] L171F
## functions
  function femData:MeshPos _0A7F_msh_newtonInverse1A34 (tensor[2] pos1A35#2, int cellInt1A36#2, femData:Mesh mesh1A37#12) {
    ENTRY1A38:  preds = []
      real _t1A39#2 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
      tensor[2] xn1A3B#1 = <tensor[2]>[_t1A39,_t1A39];
      int _t1A3D#1 = 0;
      int _t1A3F#1 = 16;
      int[] _t1A41#1 = Range(_t1A3D,_t1A3F);
    FOREACH1A44:  preds = [ASSIGN1A42,NEXT1C9B]
      foreach (itter1A43 in _t1A41) on exit goto ASSIGN1CA0
        tensor[2] xn1BBB#3 = phi(xn1A3B,xn1C2F)
      int ilit1A46#1 = 3;
      int mulRes1A47#3 = IMul(cellInt1A36,ilit1A46);
      int idx1A4A#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(mesh1A37,mulRes1A47);
      int ilit1A4B#4 = 1;
      int addRes1A4C#1 = IAdd(mulRes1A47,ilit1A4B);
      int idx1A4D#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(mesh1A37,addRes1A4C);
      int ilit1A4E#4 = 2;
      int addRes1A4F#1 = IAdd(mulRes1A47,ilit1A4E);
      int idx1A50#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(mesh1A37,addRes1A4F);
      int mulRes1A63#2 = IMul(ilit1A4E,idx1A4A);
      int addRes1A66#1 = IAdd(ilit1A4B,mulRes1A63);
      real dof_load1A67#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh1A37,mulRes1A63);
      real dof_load1A68#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh1A37,addRes1A66);
      int mulRes1A6B#2 = IMul(ilit1A4E,idx1A4D);
      int addRes1A6D#1 = IAdd(ilit1A4B,mulRes1A6B);
      real dof_load1A6E#3 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh1A37,mulRes1A6B);
      real dof_load1A6F#3 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh1A37,addRes1A6D);
      int mulRes1A72#2 = IMul(ilit1A4E,idx1A50);
      int addRes1A74#1 = IAdd(ilit1A4B,mulRes1A72);
      real dof_load1A75#3 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh1A37,mulRes1A72);
      real dof_load1A76#3 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh1A37,addRes1A74);
      real coeff1A96#8 = -0.1e1;
      real one1A97#15 = 0.1e1;
      real prod1A98#2 = RMul(one1A97,one1A97);
      real basisEval1A99#2 = RMul(coeff1A96,prod1A98);
      real basisEval1A9A#5 = RMul(one1A97,prod1A98);
      real basisEval1A9B#12 = 0.e0;
      real r1AAE#2 = RMul(dof_load1A67,basisEval1A99);
      real r1AB1#1 = RMul(dof_load1A6E,basisEval1A9A);
      real r1AB4#1 = RMul(dof_load1A75,basisEval1A9B);
      real r1AB5#1 = RAdd(r1AAE,r1AB1);
      real r1AB6#3 = RAdd(r1AB5,r1AB4);
      real r1ABA#1 = RMul(dof_load1A6E,basisEval1A9B);
      real r1ABC#1 = RMul(dof_load1A75,basisEval1A9A);
      real r1ABD#1 = RAdd(r1AAE,r1ABA);
      real r1ABE#3 = RAdd(r1ABD,r1ABC);
      real r1AC1#2 = RMul(dof_load1A68,basisEval1A99);
      real r1AC3#1 = RMul(dof_load1A6F,basisEval1A9A);
      real r1AC5#1 = RMul(dof_load1A76,basisEval1A9B);
      real r1AC6#1 = RAdd(r1AC1,r1AC3);
      real r1AC7#3 = RAdd(r1AC6,r1AC5);
      real r1AC9#1 = RMul(dof_load1A6F,basisEval1A9B);
      real r1ACA#1 = RMul(dof_load1A76,basisEval1A9A);
      real r1ACB#1 = RAdd(r1AC1,r1AC9);
      real r1ACC#3 = RAdd(r1ACB,r1ACA);
      real r1AF5#1 = RMul(basisEval1A9B,r1AB6);
      real r1AF8#1 = RMul(coeff1A96,r1AC7);
      real r1AF9#2 = RAdd(r1AF5,r1AF8);
      real r1AFB#2 = RMul(basisEval1A9B,r1ABE);
      real r1AFD#1 = RMul(coeff1A96,r1ACC);
      real r1AFE#2 = RAdd(r1AFB,r1AFD);
      real r1B01#1 = RMul(one1A97,r1AB6);
      real r1B02#1 = RMul(basisEval1A9B,r1AC7);
      real r1B03#2 = RAdd(r1B01,r1B02);
      real r1B04#1 = RMul(one1A97,r1ABE);
      real r1B05#2 = RMul(basisEval1A9B,r1ACC);
      real r1B06#2 = RAdd(r1B04,r1B05);
      tensor[2] probe_l_121B1F#1 = <tensor[2]>[r1AB6,r1AC7];
      real r1B77#1 = RMul(one1A97,r1ACC);
      real r1B78#1 = RAdd(r1AFB,r1B77);
      real r1B7A#1 = RMul(coeff1A96,r1ABE);
      real r1B7C#1 = RAdd(r1B7A,r1B05);
      tensor[2] op1_e3_l_141B71#1 = <tensor[2]>[r1B78,r1B7C];
      real r1B8D#1 = RMul(basisEval1A9B,r1AF9);
      real r1B90#1 = RMul(coeff1A96,r1AFE);
      real r1B91#1 = RAdd(r1B8D,r1B90);
      real r1B93#1 = RMul(basisEval1A9B,r1B03);
      real r1B95#1 = RMul(coeff1A96,r1B06);
      real r1B96#1 = RAdd(r1B93,r1B95);
      real r1B99#1 = RMul(one1A97,r1AF9);
      real r1B9A#1 = RMul(basisEval1A9B,r1AFE);
      real r1B9B#1 = RAdd(r1B99,r1B9A);
      real r1B9C#1 = RMul(one1A97,r1B03);
      real r1B9D#1 = RMul(basisEval1A9B,r1B06);
      real r1B9E#1 = RAdd(r1B9C,r1B9D);
      real op1_e3_l_161BB7#4 = VDot<2>(probe_l_121B1F,op1_e3_l_141B71);
      real varAcc1BBC#1 = VIndex<2,0>(xn1BBB);
      real varAcc1BBD#1 = VIndex<2,1>(xn1BBB);
      real prod1BC1#2 = RMul(varAcc1BBC,one1A97);
      real prod1BC3#2 = RMul(one1A97,varAcc1BBD);
      real mult1BC6#1 = RMul(coeff1A96,prod1BC3);
      real mult1BC7#1 = RMul(coeff1A96,prod1BC1);
      real sum1BC8#1 = RAdd(mult1BC6,mult1BC7);
      real sum1BC9#2 = RAdd(basisEval1A9A,sum1BC8);
      real basisEval1BCB#2 = RMul(one1A97,prod1BC1);
      real basisEval1BCC#2 = RMul(one1A97,prod1BC3);
      real r1BE4#1 = RMul(dof_load1A67,sum1BC9);
      real r1BE7#1 = RMul(dof_load1A6E,basisEval1BCB);
      real r1BEA#1 = RMul(dof_load1A75,basisEval1BCC);
      real r1BEB#1 = RAdd(r1BE4,r1BE7);
      real r1BEC#1 = RAdd(r1BEB,r1BEA);
      real r1BEE#1 = RMul(dof_load1A68,sum1BC9);
      real r1BF0#1 = RMul(dof_load1A6F,basisEval1BCB);
      real r1BF2#1 = RMul(dof_load1A76,basisEval1BCC);
      real r1BF3#1 = RAdd(r1BEE,r1BF0);
      real r1BF4#1 = RAdd(r1BF3,r1BF2);
      tensor[2] probe_l_171BE1#1 = <tensor[2]>[r1BEC,r1BF4];
      real r1C0C#1 = RDiv(r1B91,op1_e3_l_161BB7);
      real r1C0E#1 = RDiv(r1B96,op1_e3_l_161BB7);
      tensor[2] tensor1C0F#1 = <tensor[2]>[r1C0C,r1C0E];
      real r1C11#1 = RDiv(r1B9B,op1_e3_l_161BB7);
      real r1C13#1 = RDiv(r1B9E,op1_e3_l_161BB7);
      tensor[2] tensor1C14#1 = <tensor[2]>[r1C11,r1C13];
      tensor[2] op1_e3_l_191C21#2 = VSub<2>(probe_l_171BE1,pos1A35);
      real vdot1C26#1 = VDot<2>(tensor1C0F,op1_e3_l_191C21);
      real vdot1C28#1 = VDot<2>(tensor1C14,op1_e3_l_191C21);
      tensor[2] op1_e3_l_201C24#3 = <tensor[2]>[vdot1C26,vdot1C28];
      tensor[2] xn1C2F#4 = VSub<2>(xn1BBB,op1_e3_l_201C24);
      real _t1C32#2 = 0.1e-7;
      real _t1C34#1 = RMul(_t1C32,_t1C32);
      real _t1C6E#1 = VDot<2>(op1_e3_l_201C24,op1_e3_l_201C24);
      bool _t1C71#1 = GTE<real>(_t1C34,_t1C6E);
      if _t1C71 then goto ASSIGN1C77 else goto JOIN1C9A
    ASSIGN1C77:  preds = [COND1C73]
      real _t1C76#3 = 0.1e-8;
      real _t1C78#1 = RAdd(one1A97,_t1C76);
      tensor[2] _t1C7B#1 = <tensor[2]>[one1A97,one1A97];
      real _t1C7D#1 = VDot<2>(_t1C7B,xn1C2F);
      bool _t1C80#1 = GT<real>(_t1C78,_t1C7D);
      tensor[2] _t1C82#1 = <tensor[2]>[_t1C76,_t1C76];
      tensor[2] _t1C84#2 = VAdd<2>(_t1C82,xn1C2F);
      real _t1C87#1 = VIndex<2,0>(_t1C84);
      real _t1C89#2 = -0.e0;
      bool _t1C8B#1 = GT<real>(_t1C87,_t1C89);
      real _t1C8D#1 = VIndex<2,1>(_t1C84);
      bool _t1C8F#1 = GT<real>(_t1C8D,_t1C89);
      bool _t1C91#1 = BAnd(_t1C8B,_t1C8F);
      bool _t1C93#1 = BAnd(_t1C80,_t1C91);
      if _t1C93 then goto ASSIGN1C97 else goto ASSIGN1C9D
    ASSIGN1C97:  preds = [COND1C95]
      femData:MeshPos _t1C96#1 = ExtractFemItemN<[femData:Mesh,int,tensor[2],tensor[2]],femData:MeshPos,AllBuild(MeshPos),0000,"",[],int>(mesh1A37,cellInt1A36,xn1C2F,pos1A35);
      return _t1C96
      goto JOIN1C99
    JOIN1C99:  preds = [*RETURN(_t1C96)1C98,*RETURN(_t1C9C)1C9E]
      goto JOIN1C9A
    JOIN1C9A:  preds = [*JOIN1C99,COND1C73]
      goto FOREACH1A44
    ASSIGN1C9D:  preds = [COND1C95]
      femData:MeshPos _t1C9C#1 = ExtractFemItemN<[femData:Mesh],femData:MeshPos,InvalidBuild(MeshPos),0000,"",[],int>(mesh1A37);
      return _t1C9C
      goto JOIN1C99
    ASSIGN1CA0:  preds = [FOREACH1A44]
      femData:MeshPos _t1C9F#1 = ExtractFemItemN<[femData:Mesh],femData:MeshPos,InvalidBuild(MeshPos),0000,"",[],int>(mesh1A37);
      return _t1C9F
}
## input initialization
  ENTRY1722:  preds = []
    real isoval1723#1 = 0.2e0;
    globals.isoval16F7 = isoval1723;
    real thick1726#1 = 0.7e-1;
    globals.thick16F8 = thick1726;
    real _t1729#2 = 0.3e1;
    real _t172B#1 = -0.3e1;
    tensor[3] camEye172D#1 = <tensor[3]>[_t1729,_t172B,_t1729];
    globals.camEye16F9 = camEye172D;
    real _t1730#5 = 0.5e0;
    tensor[3] camAt1732#1 = <tensor[3]>[_t1730,_t1730,_t1730];
    globals.camAt16FA = camAt1732;
    real _t1735#4 = 0.e0;
    real _t1737#7 = 0.1e1;
    tensor[3] camUp1739#2 = <tensor[3]>[_t1735,_t1735,_t1737];
    globals.camUp16FB = camUp1739;
    real camFOV173C#1 = 0.137e2;
    globals.camFOV16FC = camFOV173C;
    int iresU173F#2 = 10;
    globals.iresU16FD = iresU173F;
    globals.iresV16FE = iresU173F;
    real camNear1743#1 = -0.2e1;
    globals.camNear16FF = camNear1743;
    real camFar1746#1 = 0.5e1;
    globals.camFar1700 = camFar1746;
    globals.refStep1701 = _t1737;
    real rayStep174A#1 = 0.1e-1;
    globals.rayStep1702 = rayStep174A;
    real eps174D#1 = 0.1e-5;
    globals.eps1706 = eps174D;
    tensor[3] mcnear1750#2 = <tensor[3]>[_t1737,_t1737,_t1737];
    globals.mcnear170A = mcnear1750;
    globals.mcfar170B = mcnear1750;
    globals.cmin170D = _t1735;
    globals.cmax170E = _t1737;
    bool light1756#1 = true;
    globals.light170F = light1756;
    globals.phongKa1710 = _t1730;
    globals.phongKd1711 = _t1730;
    globals.phongKs1712 = _t1735;
    real phongSp175C#1 = 0.6e2;
    globals.phongSp1713 = phongSp175C;
    globals.maxAlpha1714 = _t1737;
    globals.lightVsp1715 = camUp1739;
    return
## global-variable initialization
  ENTRY1762:  preds = []
    tensor[3] camEye1763#1 = globals.camEye16F9;
    tensor[3] camAt1765#1 = globals.camAt16FA;
    tensor[3] camUp1767#3 = globals.camUp16FB;
    real camFOV1769#1 = globals.camFOV16FC;
    int iresU176B#1 = globals.iresU16FD;
    int iresV176D#1 = globals.iresV16FE;
    real camNear176F#1 = globals.camNear16FF;
    real camFar1771#1 = globals.camFar1700;
    femData:Mesh a1773#3 = globals.a1703;
    femData:Space 0b0472_intermedateGlobal1775#1 = globals.0b0472_intermedateGlobal1704;
    femData:FemFunc 0c0474_intermedateGlobal1777#1 = globals.0c0474_intermedateGlobal1705;
    tensor[3] lightVsp177B#5 = globals.lightVsp1715;
    int _t177D#1 = 0;
    int _t177F#1 = 1;
    int _t1781#1 = ExtractFemItem<int,NumCell(Mesh)>(a1773);
    int _t1783#1 = ISub(_t1781,_t177F);
    int[] _t1785#1 = Range(_t177D,_t1783);
    femData:MeshCell[] _t1787#1 = <femData:MeshCell[]>{};
  FOREACH178A:  preds = [ASSIGN1788,NEXT1790]
    foreach (_t1789 in _t1785) on exit goto GASSIGN1791
      femData:MeshCell[] _t178E#2 = phi(_t1787,_t178D)
    femData:MeshCell _t178B#1 = LoadFem<femData:MeshCell>(a1773,_t1789);
    femData:MeshCell[] _t178D#1 = Append<femData:MeshCell>(_t178E,_t178B);
    goto FOREACH178A
  GASSIGN1791:  preds = [FOREACH178A]
    globals.0cell_a1716 = _t178E;
    femData:Space b1792#1 = LoadFem<femData:Space>(0b0472_intermedateGlobal1775,a1773);
    femData:FemFunc c1794#1 = LoadFem<femData:FemFunc>(0c0474_intermedateGlobal1777,b1792);
    globals.c1717 = c1794;
    tensor[3] op1_e3_l_31797#9 = VSub<3>(camAt1765,camEye1763);
    real op1_e3_l_5179A#1 = VDot<3>(op1_e3_l_31797,op1_e3_l_31797);
    real op1_e3_l_6179D#5 = Sqrt(op1_e3_l_5179A);
    real camNearVsp17A0#1 = RAdd(camNear176F,op1_e3_l_6179D);
    globals.camNearVsp1718 = camNearVsp17A0;
    real camFarVsp17A4#1 = RAdd(camFar1771,op1_e3_l_6179D);
    globals.camFarVsp1719 = camFarVsp17A4;
    real realLit17A9#9 = 0.1e1;
    real op1_e3_l_917A8#6 = RDiv(realLit17A9,op1_e3_l_6179D);
    tensor[3] camN17AD#4 = VScale<3>(op1_e3_l_917A8,op1_e3_l_31797);
    globals.camN171A = camN17AD;
    real realLit17B2#6 = 0.e0;
    real r17B3#3 = TensorIndex<tensor[3],[0]>(camUp1767);
    real r17B4#3 = RMul(realLit17B2,r17B3);
    real r17B5#3 = TensorIndex<tensor[3],[1]>(camUp1767);
    real r17B6#3 = RMul(realLit17B2,r17B5);
    real r17B7#3 = TensorIndex<tensor[3],[2]>(camUp1767);
    real r17B8#5 = RMul(realLit17B2,r17B7);
    real r17B9#3 = RAdd(r17B4,r17B6);
    real r17BA#3 = RAdd(r17B9,r17B8);
    real r17BC#1 = RMul(realLit17A9,r17B7);
    real r17BD#1 = RAdd(r17B9,r17BC);
    real realLit17BE#6 = -0.1e1;
    real r17BF#1 = RMul(realLit17BE,r17B5);
    real r17C0#1 = RAdd(r17B4,r17BF);
    real r17C1#1 = RAdd(r17C0,r17B8);
    tensor[3] tensor17C2#1 = <tensor[3]>[r17BA,r17BD,r17C1];
    real r17C3#1 = RMul(realLit17BE,r17B7);
    real r17C4#1 = RAdd(r17B9,r17C3);
    real r17C5#1 = RMul(realLit17A9,r17B3);
    real r17C6#1 = RAdd(r17C5,r17B6);
    real r17C7#1 = RAdd(r17C6,r17B8);
    tensor[3] tensor17C8#1 = <tensor[3]>[r17C4,r17BA,r17C7];
    real r17C9#1 = RMul(realLit17A9,r17B5);
    real r17CA#1 = RAdd(r17B4,r17C9);
    real r17CB#1 = RAdd(r17CA,r17B8);
    real r17CC#1 = RMul(realLit17BE,r17B3);
    real r17CD#1 = RAdd(r17CC,r17B6);
    real r17CE#1 = RAdd(r17CD,r17B8);
    tensor[3] tensor17CF#1 = <tensor[3]>[r17CB,r17CE,r17BA];
    real vdot17F2#1 = VDot<3>(op1_e3_l_31797,tensor17C2);
    real vdot17F4#1 = VDot<3>(op1_e3_l_31797,tensor17C8);
    real vdot17F6#1 = VDot<3>(op1_e3_l_31797,tensor17CF);
    tensor[3] op1_e3_l_1717F0#6 = <tensor[3]>[vdot17F2,vdot17F4,vdot17F6];
    real op1_e3_l_3417FF#1 = VDot<3>(op1_e3_l_1717F0,op1_e3_l_1717F0);
    real r1803#1 = RMul(op1_e3_l_917A8,op1_e3_l_917A8);
    real op1_e3_l_351802#1 = RMul(r1803,op1_e3_l_3417FF);
    real op1_e3_l_361807#1 = Sqrt(op1_e3_l_351802);
    tensor[3] op1_e3_l_37180A#1 = VScale<3>(op1_e3_l_917A8,op1_e3_l_1717F0);
    real op1_e3_l_38180D#2 = RDiv(realLit17A9,op1_e3_l_361807);
    tensor[3] camU1812#4 = VScale<3>(op1_e3_l_38180D,op1_e3_l_37180A);
    globals.camU171B = camU1812;
    real r1818#3 = TensorIndex<tensor[3],[0]>(op1_e3_l_31797);
    real r1819#3 = RMul(realLit17B2,r1818);
    real r181A#3 = TensorIndex<tensor[3],[1]>(op1_e3_l_31797);
    real r181B#3 = RMul(realLit17B2,r181A);
    real r181C#3 = TensorIndex<tensor[3],[2]>(op1_e3_l_31797);
    real r181D#5 = RMul(realLit17B2,r181C);
    real r181E#3 = RAdd(r1819,r181B);
    real r181F#3 = RAdd(r181E,r181D);
    real r1821#1 = RMul(realLit17A9,r181C);
    real r1822#1 = RAdd(r181E,r1821);
    real r1824#1 = RMul(realLit17BE,r181A);
    real r1825#1 = RAdd(r1819,r1824);
    real r1826#1 = RAdd(r1825,r181D);
    tensor[3] tensor1827#1 = <tensor[3]>[r181F,r1822,r1826];
    real r1828#1 = RMul(realLit17BE,r181C);
    real r1829#1 = RAdd(r181E,r1828);
    real r182A#1 = RMul(realLit17A9,r1818);
    real r182B#1 = RAdd(r182A,r181B);
    real r182C#1 = RAdd(r182B,r181D);
    tensor[3] tensor182D#1 = <tensor[3]>[r1829,r181F,r182C];
    real r182E#1 = RMul(realLit17A9,r181A);
    real r182F#1 = RAdd(r1819,r182E);
    real r1830#1 = RAdd(r182F,r181D);
    real r1831#1 = RMul(realLit17BE,r1818);
    real r1832#1 = RAdd(r1831,r181B);
    real r1833#1 = RAdd(r1832,r181D);
    tensor[3] tensor1834#1 = <tensor[3]>[r1830,r1833,r181F];
    real vdot1857#1 = VDot<3>(op1_e3_l_1717F0,tensor1827);
    real vdot1859#1 = VDot<3>(op1_e3_l_1717F0,tensor182D);
    real vdot185B#1 = VDot<3>(op1_e3_l_1717F0,tensor1834);
    tensor[3] op1_e3_l_471855#1 = <tensor[3]>[vdot1857,vdot1859,vdot185B];
    tensor[3] op1_e3_l_501864#3 = VScale<3>(op1_e3_l_917A8,op1_e3_l_471855);
    real r1868#1 = TensorIndex<tensor[3],[0]>(op1_e3_l_501864);
    real r1869#3 = RMul(op1_e3_l_38180D,op1_e3_l_917A8);
    real r186A#2 = RMul(r1869,r1868);
    real r186B#1 = TensorIndex<tensor[3],[1]>(op1_e3_l_501864);
    real r186C#2 = RMul(r1869,r186B);
    real r186D#1 = TensorIndex<tensor[3],[2]>(op1_e3_l_501864);
    real r186E#2 = RMul(r1869,r186D);
    tensor[3] camV1867#1 = <tensor[3]>[r186A,r186C,r186E];
    globals.camV171C = camV1867;
    real _t1879#1 = 0.314159265358979323846264338327950288e1;
    real _t187B#1 = 0.36e3;
    real op1_e3_l_5187D#1 = RMul(camFOV1769,_t1879);
    real op1_e3_l_61880#1 = RDiv(op1_e3_l_5187D,_t187B);
    real op1_e3_l_101883#2 = Tan(op1_e3_l_61880);
    real camVmax1886#1 = RMul(op1_e3_l_101883,op1_e3_l_6179D);
    globals.camVmax171D = camVmax1886;
    real _t188A#1 = IntToReal(iresU176B);
    real _t188C#1 = IntToReal(iresV176D);
    real r188F#1 = RMul(_t188A,op1_e3_l_101883);
    real op1_e3_l_14188E#1 = RMul(r188F,op1_e3_l_6179D);
    real camUmax1893#1 = RDiv(op1_e3_l_14188E,_t188C);
    globals.camUmax171E = camUmax1893;
    real op1_e3_l_3189D#1 = VDot<3>(lightVsp177B,lightVsp177B);
    real op1_e3_l_418A0#1 = Sqrt(op1_e3_l_3189D);
    real op1_e3_l_518A3#1 = RDiv(realLit17A9,op1_e3_l_418A0);
    real r18A9#1 = VIndex<3,0>(camU1812);
    real r18AA#3 = TensorIndex<tensor[3],[0]>(lightVsp177B);
    real r18AB#1 = RMul(r18A9,r18AA);
    real r18AD#3 = TensorIndex<tensor[3],[1]>(lightVsp177B);
    real r18AE#1 = RMul(r186A,r18AD);
    real r18AF#1 = VIndex<3,0>(camN17AD);
    real r18B0#3 = TensorIndex<tensor[3],[2]>(lightVsp177B);
    real r18B1#1 = RMul(r18AF,r18B0);
    real r18B2#1 = RAdd(r18AB,r18AE);
    real r18B3#1 = RAdd(r18B2,r18B1);
    real r18B4#1 = VIndex<3,1>(camU1812);
    real r18B5#1 = RMul(r18B4,r18AA);
    real r18B7#1 = RMul(r186C,r18AD);
    real r18B8#1 = VIndex<3,1>(camN17AD);
    real r18B9#1 = RMul(r18B8,r18B0);
    real r18BA#1 = RAdd(r18B5,r18B7);
    real r18BB#1 = RAdd(r18BA,r18B9);
    real r18BC#1 = VIndex<3,2>(camU1812);
    real r18BD#1 = RMul(r18BC,r18AA);
    real r18BF#1 = RMul(r186E,r18AD);
    real r18C0#1 = VIndex<3,2>(camN17AD);
    real r18C1#1 = RMul(r18C0,r18B0);
    real r18C2#1 = RAdd(r18BD,r18BF);
    real r18C3#1 = RAdd(r18C2,r18C1);
    tensor[3] op1_e3_l_618A8#1 = <tensor[3]>[r18B3,r18BB,r18C3];
    tensor[3] L18E1#1 = VScale<3>(op1_e3_l_518A3,op1_e3_l_618A8);
    globals.L171F = L18E1;
    return
## strand
  strand ray (int ui18E8#2, int vi18E9#3)
    state:
      real rayU;
      real rayV;
      tensor[3] UV;
      tensor[3] rayOrig;
      tensor[3] rayVec;
      real camNearVsp;
      real camFarVsp;
      int offset;
      int len;
      int itter;
      int intersectionItter;
      int idx;
      tensor[2] interval;
      real s;
      real e;
      femData:MeshCell cc;
      femData:FuncCell fc;
      output real out;
      output tensor[4] rgba;
    state init
      ENTRY18FD:  preds = []
        tensor[3] camEye18FE#1 = globals.camEye16F9;
        int iresU1900#2 = globals.iresU16FD;
        int iresV1902#3 = globals.iresV16FE;
        femData:MeshCell[] 0cell_a1904#1 = globals.0cell_a1716;
        femData:FemFunc c1906#1 = globals.c1717;
        int[] indecies1908#2 = globals.indecies1707;
        tensor[2][] times190A#1 = globals.times1708;
        real camNearVsp190C#1 = globals.camNearVsp1718;
        real camFarVsp190E#1 = globals.camFarVsp1719;
        tensor[3] camN1910#1 = globals.camN171A;
        tensor[3] camU1912#1 = globals.camU171B;
        tensor[3] camV1914#1 = globals.camV171C;
        real camVmax1916#2 = globals.camVmax171D;
        real camUmax1918#2 = globals.camUmax171E;
        real _t191A#4 = -0.5e0;
        real _t191C#1 = IntToReal(ui18E8);
        real _t191E#1 = IntToReal(iresU1900);
        real _t1920#2 = 0.5e0;
        real op1_e3_l_61922#1 = RSub(_t191E,_t1920);
        real op1_e3_l_71925#1 = RSub(_t191C,_t191A);
        real op1_e3_l_81928#1 = RSub(op1_e3_l_61922,_t191A);
        real op1_e3_l_9192B#2 = RNeg(camUmax1918);
        real op1_e3_l_10192E#1 = RDiv(op1_e3_l_71925,op1_e3_l_81928);
        real op1_e3_l_111931#1 = RSub(camUmax1918,op1_e3_l_9192B);
        real op1_e3_l_131934#1 = RMul(op1_e3_l_10192E,op1_e3_l_111931);
        real rayU1937#2 = RAdd(op1_e3_l_9192B,op1_e3_l_131934);
        real _t193A#1 = IntToReal(vi18E9);
        real _t193C#1 = IntToReal(iresV1902);
        real op1_e3_l_6193E#1 = RSub(_t193C,_t1920);
        real op1_e3_l_71941#1 = RSub(_t193A,_t191A);
        real op1_e3_l_81944#1 = RSub(op1_e3_l_6193E,_t191A);
        real op1_e3_l_91947#2 = RNeg(camVmax1916);
        real op1_e3_l_10194A#1 = RDiv(op1_e3_l_71941,op1_e3_l_81944);
        real op1_e3_l_11194D#1 = RSub(camVmax1916,op1_e3_l_91947);
        real op1_e3_l_131950#1 = RMul(op1_e3_l_10194A,op1_e3_l_11194D);
        real rayV1953#2 = RAdd(op1_e3_l_91947,op1_e3_l_131950);
        tensor[3] op1_e3_l_321965#2 = VScale<3>(rayU1937,camU1912);
        tensor[3] op1_e3_l_331968#2 = VScale<3>(rayV1953,camV1914);
        tensor[3] UV196B#1 = VAdd<3>(op1_e3_l_321965,op1_e3_l_331968);
        tensor[3] v196F#1 = VAdd<3>(camEye18FE,op1_e3_l_321965);
        tensor[3] rayOrig196E#1 = VAdd<3>(v196F,op1_e3_l_331968);
        real _t1973#8 = 0.e0;
        tensor[3] _t1975#1 = <tensor[3]>[_t1973,_t1973,_t1973];
        tensor[3] rayVec1977#1 = VAdd<3>(camN1910,_t1975);
        int _t197A#2 = IMul(ui18E8,iresV1902);
        int _t197C#1 = IAdd(_t197A,vi18E9);
        int offset197E#3 = Subscript<int[]>(indecies1908,_t197C);
        int _t1980#1 = IMul(iresU1900,iresV1902);
        int _t1982#1 = IAdd(_t1980,_t197A);
        int _t1984#1 = IAdd(_t1982,vi18E9);
        int len1986#1 = Subscript<int[]>(indecies1908,_t1984);
        int itter1988#3 = 0;
        tensor[2] interval198C#3 = Subscript<tensor[2][]>(times190A,offset197E);
        real s198E#1 = VIndex<2,0>(interval198C);
        real e1990#1 = VIndex<2,1>(interval198C);
        femData:MeshCell cc1992#2 = Subscript<femData:MeshCell[]>(0cell_a1904,itter1988);
        int _t1994#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc1992);
        femData:FuncCell _t1996#1 = LoadFem<femData:FuncCell>(c1906,_t1994);
        tensor[4] rgba1998#1 = <tensor[4]>[_t1973,_t1973,_t1973,_t1973];
        self.rayU = rayU1937;
        self.rayV = rayV1953;
        self.UV = UV196B;
        self.rayOrig = rayOrig196E;
        self.rayVec = rayVec1977;
        self.camNearVsp = camNearVsp190C;
        self.camFarVsp = camFarVsp190E;
        self.offset = offset197E;
        self.len = len1986;
        self.itter = itter1988;
        self.intersectionItter = itter1988;
        self.idx = offset197E;
        self.interval = interval198C;
        self.s = s198E;
        self.e = e1990;
        self.cc = cc1992;
        self.fc = _t1996;
        self.out = _t1973;
        self.rgba = rgba1998;
        return
    end state init
    method start
        ENTRY19AE:  preds = []
          femData:MeshCell[] 0cell_a19AF#1 = globals.0cell_a1716;
          femData:FemFunc c19B1#1 = globals.c1717;
          int[] cells19B3#1 = globals.cells1709;
          int len19B5#1 = self.len;
          int idx19B7#1 = self.idx;
          int _t19B9#1 = 0;
          bool _t19BB#1 = EQ<int>(len19B5,_t19B9);
          if _t19BB then goto STABILIZE19BE else goto JOIN19BF
        STABILIZE19BE:  preds = [COND19BD]
          stabilize
          goto JOIN19BF
        JOIN19BF:  preds = [*STABILIZE19BE,COND19BD]
          int _t19C0#1 = Subscript<int[]>(cells19B3,idx19B7);
          femData:MeshCell cc19C2#2 = Subscript<femData:MeshCell[]>(0cell_a19AF,_t19C0);
          int _t19C4#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc19C2);
          femData:FuncCell _t19C6#1 = LoadFem<femData:FuncCell>(c19B1,_t19C4);
          self.cc = cc19C2;
          self.fc = _t19C6;
          active
    end start
    method update
        ENTRY19CB:  preds = []
          image(IMAGE1D<double[3]>) cmap19CC#17 = globals.cmap170C;
          femData:MeshCell[] 0cell_a19D2#1 = globals.0cell_a1716;
          femData:FemFunc c19D4#1 = globals.c1717;
          real eps19D6#8 = globals.eps1706;
          tensor[2][] times19D8#1 = globals.times1708;
          int[] cells19DA#1 = globals.cells1709;
          tensor[3] mcnear19DC#2 = globals.mcnear170A;
          tensor[3] mcfar19DE#1 = globals.mcfar170B;
          real cmin19E0#3 = globals.cmin170D;
          real cmax19E2#2 = globals.cmax170E;
          bool light19E4#1 = globals.light170F;
          real phongKa19E6#1 = globals.phongKa1710;
          real phongKd19E8#1 = globals.phongKd1711;
          real phongKs19EA#1 = globals.phongKs1712;
          real phongSp19EC#1 = globals.phongSp1713;
          tensor[3] L19EE#2 = globals.L171F;
          tensor[3] rayOrig19F0#3 = self.rayOrig;
          tensor[3] rayVec19F2#6 = self.rayVec;
          real camNearVsp19F4#2 = self.camNearVsp;
          real camFarVsp19F6#1 = self.camFarVsp;
          int offset19F8#1 = self.offset;
          int len19FA#1 = self.len;
          int itter19FC#2 = self.itter;
          int intersectionItter19FE#2 = self.intersectionItter;
          real s1A00#6 = self.s;
          real e1A02#5 = self.e;
          femData:MeshCell cc1A04#2 = self.cc;
          femData:FuncCell fc1A06#2 = self.fc;
          real out1A08#1 = self.out;
          string _t1A0A#1 = "Interval:";
          tensor[2] _t1A0C#1 = <tensor[2]>[s1A00,e1A02];
          string _t1A0E#10 = "\n";
          Print<[string,tensor[2],string]>(_t1A0A,_t1A0C,_t1A0E);
          string _t1A11#1 = "inner itter:";
          Print<[string,int,string]>(_t1A11,intersectionItter19FE,_t1A0E);
          string _t1A14#1 = "Outer itter:";
          Print<[string,int,string]>(_t1A14,itter19FC,_t1A0E);
          real _t1A17#1 = VIndex<3,0>(rayOrig19F0);
          real _t1A19#1 = VIndex<3,1>(rayOrig19F0);
          tensor[2] _t1A1B#3 = <tensor[2]>[_t1A17,_t1A19];
          real _t1A1D#1 = VIndex<3,0>(rayVec19F2);
          real _t1A1F#1 = VIndex<3,1>(rayVec19F2);
          tensor[2] _t1A21#3 = <tensor[2]>[_t1A1D,_t1A1F];
          tensor[2] op1_e3_l_31A23#1 = VScale<2>(s1A00,_t1A21);
          tensor[2] startRay1A26#1 = VAdd<2>(_t1A1B,op1_e3_l_31A23);
          tensor[2] op1_e3_l_31A29#1 = VScale<2>(e1A02,_t1A21);
          tensor[2] endRay1A2C#1 = VAdd<2>(_t1A1B,op1_e3_l_31A29);
          femData:Mesh _t1A2F#21 = ExtractFem<femData:Mesh,femData:MeshCell>(cc1A04);
          int _t1A31#5 = ExtractFemItem<int,CellIndex(MeshCell)>(cc1A04);
          femData:MeshPos callNewtonPos1A33#1 = _0A7F_msh_newtonInverse1A34 (startRay1A26,_t1A31,_t1A2F);
          tensor[2] refPos1CA3#3 = ExtractFemItem<tensor[2],RefPos(Mesh)>(callNewtonPos1A33);
          femData:MeshPos callNewtonPos1CA5#1 = _0A7F_msh_newtonInverse1A34 (endRay1A2C,_t1A31,_t1A2F);
          tensor[2] refPos1CA7#3 = ExtractFemItem<tensor[2],RefPos(Mesh)>(callNewtonPos1CA5);
          string _t1CA9#1 = "inverses:";
          Print<[string,tensor[2],tensor[2],string]>(_t1CA9,refPos1CA3,refPos1CA7,_t1A0E);
          femData:FemFunc _t1CAC#7 = ExtractFem<femData:FemFunc,femData:FuncCell>(fc1A06);
          femData:Space _t1CAE#6 = ExtractFem<femData:Space,femData:FemFunc>(_t1CAC);
          int _t1CB0#1 = ExtractFemItem<int,CellIndex(FuncCell)>(fc1A06);
          int ilit1CB3#1 = 6;
          int mulRes1CB4#6 = IMul(_t1CB0,ilit1CB3);
          int idx1CB7#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1CAE,mulRes1CB4);
          int ilit1CB8#27 = 1;
          int addRes1CB9#1 = IAdd(mulRes1CB4,ilit1CB8);
          int idx1CBA#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1CAE,addRes1CB9);
          int ilit1CBB#13 = 2;
          int addRes1CBC#1 = IAdd(mulRes1CB4,ilit1CBB);
          int idx1CBD#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1CAE,addRes1CBC);
          int ilit1CBE#7 = 3;
          int addRes1CBF#1 = IAdd(mulRes1CB4,ilit1CBE);
          int idx1CC0#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1CAE,addRes1CBF);
          int ilit1CC1#1 = 4;
          int addRes1CC2#1 = IAdd(mulRes1CB4,ilit1CC1);
          int idx1CC3#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1CAE,addRes1CC2);
          int ilit1CC4#1 = 5;
          int addRes1CC5#1 = IAdd(mulRes1CB4,ilit1CC4);
          int idx1CC6#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1CAE,addRes1CC5);
          int mulRes1CE2#1 = IMul(ilit1CB8,idx1CB7);
          int mulRes1CE4#1 = IMul(ilit1CB8,idx1CBA);
          int mulRes1CE7#1 = IMul(ilit1CB8,idx1CBD);
          int mulRes1CEA#1 = IMul(ilit1CB8,idx1CC0);
          int mulRes1CED#1 = IMul(ilit1CB8,idx1CC3);
          int mulRes1CF0#1 = IMul(ilit1CB8,idx1CC6);
          real dof1CF1#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(_t1CAC,mulRes1CE2);
          real dof1CF2#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(_t1CAC,mulRes1CE4);
          real dof1CF3#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(_t1CAC,mulRes1CE7);
          real dof1CF4#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(_t1CAC,mulRes1CEA);
          real dof1CF5#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(_t1CAC,mulRes1CED);
          real dof1CF6#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(_t1CAC,mulRes1CF0);
          tensor[6] dofs1CF7#7 = <tensor[6]>[dof1CF1,dof1CF2,dof1CF3,dof1CF4,dof1CF5,dof1CF6];
          real varAcc1D13#4 = VIndex<2,0>(refPos1CA3);
          real varAcc1D14#4 = VIndex<2,1>(refPos1CA3);
          real coeff1D15#6 = 0.2e1;
          real prod21D17#1 = RMul(varAcc1D13,varAcc1D13);
          real one1D18#37 = 0.1e1;
          real prod1D19#2 = RMul(prod21D17,one1D18);
          real coeff1D1A#11 = 0.4e1;
          real prod1D1C#2 = RMul(varAcc1D13,varAcc1D14);
          real coeff1D1D#8 = -0.3e1;
          real prod1D1E#5 = RMul(varAcc1D13,one1D18);
          real prod21D1F#1 = RMul(varAcc1D14,varAcc1D14);
          real prod1D20#1 = RMul(one1D18,prod21D1F);
          real prod1D21#4 = RMul(one1D18,varAcc1D14);
          real prod1D22#7 = RMul(one1D18,one1D18);
          real mult1D23#11 = RMul(one1D18,prod1D22);
          real mult1D24#1 = RMul(coeff1D1D,prod1D21);
          real mult1D25#2 = RMul(coeff1D15,prod1D20);
          real mult1D26#1 = RMul(coeff1D1D,prod1D1E);
          real mult1D27#2 = RMul(coeff1D1A,prod1D1C);
          real mult1D28#2 = RMul(coeff1D15,prod1D19);
          real sum1D29#1 = RAdd(mult1D27,mult1D28);
          real sum1D2A#1 = RAdd(mult1D26,sum1D29);
          real sum1D2B#1 = RAdd(mult1D25,sum1D2A);
          real sum1D2C#1 = RAdd(mult1D24,sum1D2B);
          real sum1D2D#1 = RAdd(mult1D23,sum1D2C);
          real coeff1D2F#22 = -0.1e1;
          real mult1D30#1 = RMul(coeff1D2F,prod1D1E);
          real sum1D31#1 = RAdd(mult1D30,mult1D28);
          real mult1D33#1 = RMul(coeff1D2F,prod1D21);
          real sum1D34#1 = RAdd(mult1D33,mult1D25);
          real coeff1D36#10 = -0.4e1;
          real mult1D37#4 = RMul(coeff1D1A,prod1D21);
          real mult1D38#2 = RMul(coeff1D36,prod1D1C);
          real sum1D39#1 = RAdd(mult1D37,mult1D38);
          real mult1D3B#4 = RMul(coeff1D1A,prod1D1E);
          real mult1D3C#1 = RMul(coeff1D36,prod1D19);
          real sum1D3D#1 = RAdd(mult1D38,mult1D3C);
          real sum1D3E#1 = RAdd(mult1D3B,sum1D3D);
          tensor[6] intermediateCons1D40#1 = <tensor[6]>[sum1D2D,sum1D31,sum1D34,mult1D27,sum1D39,sum1D3E];
          real faVal1D70#2 = VDot<6>(dofs1CF7,intermediateCons1D40);
          real _t1D73#3 = VIndex<3,2>(rayVec19F2);
          real _t1D75#3 = VIndex<3,2>(rayOrig19F0);
          real op1_e3_l_81D77#1 = RMul(_t1D73,s1A00);
          real op1_e3_l_91D7A#1 = RSub(faVal1D70,op1_e3_l_81D77);
          real fa1D7D#10 = RSub(op1_e3_l_91D7A,_t1D75);
          real varAcc1D81#4 = VIndex<2,0>(refPos1CA7);
          real varAcc1D82#4 = VIndex<2,1>(refPos1CA7);
          real prod21D85#1 = RMul(varAcc1D81,varAcc1D81);
          real prod1D87#2 = RMul(prod21D85,one1D18);
          real prod1D8A#2 = RMul(varAcc1D81,varAcc1D82);
          real prod1D8C#3 = RMul(varAcc1D81,one1D18);
          real prod21D8D#1 = RMul(varAcc1D82,varAcc1D82);
          real prod1D8E#1 = RMul(one1D18,prod21D8D);
          real prod1D8F#3 = RMul(one1D18,varAcc1D82);
          real mult1D92#1 = RMul(coeff1D1D,prod1D8F);
          real mult1D93#2 = RMul(coeff1D15,prod1D8E);
          real mult1D94#1 = RMul(coeff1D1D,prod1D8C);
          real mult1D95#2 = RMul(coeff1D1A,prod1D8A);
          real mult1D96#2 = RMul(coeff1D15,prod1D87);
          real sum1D97#1 = RAdd(mult1D95,mult1D96);
          real sum1D98#1 = RAdd(mult1D94,sum1D97);
          real sum1D99#1 = RAdd(mult1D93,sum1D98);
          real sum1D9A#1 = RAdd(mult1D92,sum1D99);
          real sum1D9B#1 = RAdd(mult1D23,sum1D9A);
          real mult1D9E#1 = RMul(coeff1D2F,prod1D8C);
          real sum1D9F#1 = RAdd(mult1D9E,mult1D96);
          real mult1DA1#1 = RMul(coeff1D2F,prod1D8F);
          real sum1DA2#1 = RAdd(mult1DA1,mult1D93);
          real mult1DA5#1 = RMul(coeff1D1A,prod1D8F);
          real mult1DA6#2 = RMul(coeff1D36,prod1D8A);
          real sum1DA7#1 = RAdd(mult1DA5,mult1DA6);
          real mult1DA9#1 = RMul(coeff1D1A,prod1D8C);
          real mult1DAA#1 = RMul(coeff1D36,prod1D87);
          real sum1DAB#1 = RAdd(mult1DA6,mult1DAA);
          real sum1DAC#1 = RAdd(mult1DA9,sum1DAB);
          tensor[6] intermediateCons1DAE#1 = <tensor[6]>[sum1D9B,sum1D9F,sum1DA2,mult1D95,sum1DA7,sum1DAC];
          real probe_l_71DDE#1 = VDot<6>(dofs1CF7,intermediateCons1DAE);
          real op1_e3_l_81DE1#1 = RMul(_t1D73,e1A02);
          real op1_e3_l_91DE4#1 = RSub(probe_l_71DDE,op1_e3_l_81DE1);
          real fb1DE7#5 = RSub(op1_e3_l_91DE4,_t1D75);
          string _t1DEA#1 = "Vals:";
          tensor[2] _t1DEC#1 = <tensor[2]>[fa1D7D,fb1DE7];
          Print<[string,tensor[2],string]>(_t1DEA,_t1DEC,_t1A0E);
          real op1_e3_l_221DEF#1 = RSub(fa1D7D,fb1DE7);
          real _t1DF2#1 = Abs<real>(op1_e3_l_221DEF);
          bool _t1DF5#1 = LT<real>(_t1DF2,eps19D6);
          if _t1DF5 then goto ASSIGN1DFA else goto JOIN1E06
        ASSIGN1DFA:  preds = [COND1DF7]
          real _t1DF8#1 = Abs<real>(fa1D7D);
          bool _t1DFB#1 = GT<real>(_t1DF8,eps19D6);
          if _t1DFB then goto ASSIGN1E00 else goto JOIN1E04
        ASSIGN1E00:  preds = [COND1DFD]
          real s1DFE#1 = RAdd(s1A00,eps19D6);
          self.s = s1DFE;
          active
          goto JOIN1E04
        JOIN1E04:  preds = [*ACTIVE1E02,COND1DFD]
          real s1E03#1 = phi(s1A00)
          goto JOIN1E06
        JOIN1E06:  preds = [JOIN1E04,COND1DF7]
          real s1E05#3 = phi(s1E03,s1A00)
          real op1_e3_l_381E07#1 = RMul(s1E05,fb1DE7);
          real op1_e3_l_391E0A#1 = RMul(e1A02,fa1D7D);
          real op1_e3_l_481E0D#1 = RSub(op1_e3_l_381E07,op1_e3_l_391E0A);
          real op1_e3_l_491E10#1 = RSub(fb1DE7,fa1D7D);
          real cup1E13#6 = RDiv(op1_e3_l_481E0D,op1_e3_l_491E10);
          string _t1E16#1 = "Mid time:";
          Print<[string,real,string]>(_t1E16,cup1E13,_t1A0E);
          tensor[2] op1_e3_l_531E19#1 = VScale<2>(cup1E13,_t1A21);
          tensor[2] midRay1E1C#1 = VAdd<2>(_t1A1B,op1_e3_l_531E19);
          femData:MeshPos callNewtonPos1E1F#1 = _0A7F_msh_newtonInverse1A34 (midRay1E1C,_t1A31,_t1A2F);
          tensor[2] refPos1E21#2 = ExtractFemItem<tensor[2],RefPos(Mesh)>(callNewtonPos1E1F);
          real varAcc1E24#4 = VIndex<2,0>(refPos1E21);
          real varAcc1E25#4 = VIndex<2,1>(refPos1E21);
          real prod21E28#1 = RMul(varAcc1E24,varAcc1E24);
          real prod1E2A#2 = RMul(prod21E28,one1D18);
          real prod1E2D#2 = RMul(varAcc1E24,varAcc1E25);
          real prod1E2F#5 = RMul(varAcc1E24,one1D18);
          real prod21E30#1 = RMul(varAcc1E25,varAcc1E25);
          real prod1E31#1 = RMul(one1D18,prod21E30);
          real prod1E32#4 = RMul(one1D18,varAcc1E25);
          real mult1E35#1 = RMul(coeff1D1D,prod1E32);
          real mult1E36#2 = RMul(coeff1D15,prod1E31);
          real mult1E37#1 = RMul(coeff1D1D,prod1E2F);
          real mult1E38#2 = RMul(coeff1D1A,prod1E2D);
          real mult1E39#2 = RMul(coeff1D15,prod1E2A);
          real sum1E3A#1 = RAdd(mult1E38,mult1E39);
          real sum1E3B#1 = RAdd(mult1E37,sum1E3A);
          real sum1E3C#1 = RAdd(mult1E36,sum1E3B);
          real sum1E3D#1 = RAdd(mult1E35,sum1E3C);
          real sum1E3E#1 = RAdd(mult1D23,sum1E3D);
          real mult1E41#1 = RMul(coeff1D2F,prod1E2F);
          real sum1E42#1 = RAdd(mult1E41,mult1E39);
          real mult1E44#1 = RMul(coeff1D2F,prod1E32);
          real sum1E45#1 = RAdd(mult1E44,mult1E36);
          real mult1E48#4 = RMul(coeff1D1A,prod1E32);
          real mult1E49#2 = RMul(coeff1D36,prod1E2D);
          real sum1E4A#1 = RAdd(mult1E48,mult1E49);
          real mult1E4C#4 = RMul(coeff1D1A,prod1E2F);
          real mult1E4D#1 = RMul(coeff1D36,prod1E2A);
          real sum1E4E#1 = RAdd(mult1E49,mult1E4D);
          real sum1E4F#1 = RAdd(mult1E4C,sum1E4E);
          tensor[6] intermediateCons1E51#1 = <tensor[6]>[sum1E3E,sum1E42,sum1E45,mult1E38,sum1E4A,sum1E4F];
          real fmVal1E81#2 = VDot<6>(dofs1CF7,intermediateCons1E51);
          real op1_e3_l_581E84#1 = RMul(_t1D73,cup1E13);
          real op1_e3_l_591E87#1 = RSub(fmVal1E81,op1_e3_l_581E84);
          real fm1E8A#6 = RSub(op1_e3_l_591E87,_t1D75);
          string _t1E8D#1 = "all vals:";
          tensor[3] _t1E8F#1 = <tensor[3]>[fa1D7D,fm1E8A,fb1DE7];
          Print<[string,tensor[3],string]>(_t1E8D,_t1E8F,_t1A0E);
          int intersectionItter1E94#2 = IAdd(intersectionItter19FE,ilit1CB8);
          real _t1E96#38 = 0.e0;
          bool _t1E98#2 = GT<real>(fa1D7D,_t1E96);
          if _t1E98 then goto JOIN1E9D else goto ASSIGN2494
        JOIN1E9D:  preds = [COND1E9A,JOIN2499]
          int _t1E9B#1 = phi(ilit1CB8,_t1E9C)
          bool _t1E9E#2 = GT<real>(fm1E8A,_t1E96);
          if _t1E9E then goto JOIN1EA3 else goto ASSIGN248C
        JOIN1EA3:  preds = [COND1EA0,JOIN2491]
          int _t1EA1#1 = phi(ilit1CB8,_t1EA2)
          int _t1EA4#1 = IMul(_t1E9B,_t1EA1);
          int _t1EA6#7 = 0;
          bool _t1EA8#1 = LT<int>(_t1EA4,_t1EA6);
          if _t1EA8 then goto JOIN1EAE else goto COND2471
        JOIN1EAE:  preds = [COND1EAA,JOIN247E]
          real e1EAB#4 = phi(cup1E13,e1A02)
          real s1EAC#5 = phi(s1E05,s1EAD)
          string _t1EAF#1 = "new interval:";
          tensor[2] _t1EB1#1 = <tensor[2]>[s1EAC,e1EAB];
          Print<[string,tensor[2],string]>(_t1EAF,_t1EB1,_t1A0E);
          real _t1EB4#2 = Abs<real>(fa1D7D);
          bool _t1EB7#2 = LT<real>(_t1EB4,eps19D6);
          if _t1EB7 then goto ASSIGN1EBB else goto ASSIGN2466
        ASSIGN1EBB:  preds = [COND1EB9]
          bool _t1EBA#1 = true;
          goto JOIN1EBE
        JOIN1EBE:  preds = [ASSIGN1EBB,JOIN246D]
          bool _t1EBC#1 = phi(_t1EBA,_t1EBD)
          if _t1EBC then goto ASSIGN1EC2 else goto ASSIGN2462
        ASSIGN1EC2:  preds = [COND1EBF]
          real _t1EC0#2 = Abs<real>(fm1E8A);
          bool _t1EC3#1 = GT<real>(_t1EC0,eps19D6);
          if _t1EC3 then goto ASSIGN1EC7 else goto ASSIGN2460
        ASSIGN1EC7:  preds = [COND1EC5]
          bool _t1EC6#1 = GT<real>(_t1EB4,eps19D6);
          goto JOIN1ECA
        JOIN1ECA:  preds = [ASSIGN1EC7,ASSIGN2460]
          bool _t1EC8#1 = phi(_t1EC6,_t1EC9)
          if _t1EC8 then goto ASSIGN26C3 else goto ASSIGN1EFD
        ASSIGN26C3:  preds = [COND1ECB]
          int itter1ECC#4 = IAdd(itter19FC,ilit1CB8);
          bool _t1ECE#1 = GTE<int>(itter1ECC,len19FA);
          if _t1ECE then goto ASSIGN1ED2 else goto JOIN1ED9
        ASSIGN1ED2:  preds = [COND1ED0]
          string _t1ED1#1 = "Fin pixel=============================\n";
          Print<[string]>(_t1ED1);
          self.itter = itter1ECC;
          self.intersectionItter = _t1EA6;
          self.s = s1EAC;
          self.e = e1EAB;
          stabilize
          goto JOIN1ED9
        JOIN1ED9:  preds = [*STABILIZE1ED8,COND1ED0]
          int _t1EDA#2 = IAdd(offset19F8,itter1ECC);
          tensor[2] interval1EDC#3 = Subscript<tensor[2][]>(times19D8,_t1EDA);
          int _t1EDE#1 = Subscript<int[]>(cells19DA,_t1EDA);
          femData:MeshCell cc1EE0#2 = Subscript<femData:MeshCell[]>(0cell_a19D2,_t1EDE);
          real s1EE2#1 = VIndex<2,0>(interval1EDC);
          real e1EE4#1 = VIndex<2,1>(interval1EDC);
          int _t1EE6#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc1EE0);
          femData:FuncCell _t1EE8#1 = LoadFem<femData:FuncCell>(c19D4,_t1EE6);
          string _t1EEA#1 = "Next interval!\n";
          Print<[string]>(_t1EEA);
          self.itter = itter1ECC;
          self.intersectionItter = _t1EA6;
          self.interval = interval1EDC;
          self.s = s1EE2;
          self.e = e1EE4;
          self.cc = cc1EE0;
          self.fc = _t1EE8;
          active
          goto JOIN1EF5
        JOIN1EF5:  preds = [*ACTIVE1EF4,*STABILIZE2427]
          goto JOIN1EF7
        JOIN1EF7:  preds = [*JOIN1EF5,MASSIGN2463]
          int intersectionItter1EF6#1 = phi(intersectionItter1E94)
          self.intersectionItter = intersectionItter1EF6;
          self.s = s1EAC;
          self.e = e1EAB;
          active
        ASSIGN1EFD:  preds = [COND1ECB]
          tensor[2] grad1EFC#1 = <tensor[2]>[_t1E96,_t1E96];
          bool _t1EFE#1 = LT<real>(_t1EC0,eps19D6);
          if _t1EFE then goto ASSIGN261F else goto JOIN2103
        ASSIGN261F:  preds = [COND1F00]
          real mult1F0C#1 = RMul(coeff1D1D,prod1D22);
          real sum1F0F#1 = RAdd(mult1E48,mult1E4C);
          real sum1F10#2 = RAdd(mult1F0C,sum1F0F);
          real mult1F13#4 = RMul(coeff1D2F,prod1D22);
          real sum1F14#1 = RAdd(mult1F13,mult1E4C);
          real basisEval1F18#2 = RMul(coeff1D36,prod1E32);
          real coeff1F19#1 = -0.8e1;
          real mult1F1A#2 = RMul(coeff1D1A,prod1D22);
          real mult1F1B#1 = RMul(coeff1F19,prod1E2F);
          real sum1F1C#1 = RAdd(basisEval1F18,mult1F1B);
          real sum1F1D#1 = RAdd(mult1F1A,sum1F1C);
          real sum1F20#1 = RAdd(mult1F13,mult1E48);
          real mult1F22#2 = RMul(coeff1D36,prod1E2F);
          real sum1F23#1 = RAdd(mult1F1A,mult1F22);
          tensor[6] intermediateCons1F25#1 = <tensor[6]>[sum1F10,sum1F14,_t1E96,mult1E48,basisEval1F18,sum1F1D];
          tensor[6] intermediateCons1F26#1 = <tensor[6]>[sum1F10,_t1E96,sum1F20,mult1E4C,sum1F23,mult1F22];
          real vdot1F51#2 = VDot<6>(dofs1CF7,intermediateCons1F25);
          real vdot1F53#2 = VDot<6>(dofs1CF7,intermediateCons1F26);
          int mulRes1F5C#3 = IMul(_t1A31,ilit1CBE);
          int idx1F5F#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(_t1A2F,mulRes1F5C);
          int addRes1F61#1 = IAdd(mulRes1F5C,ilit1CB8);
          int idx1F62#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(_t1A2F,addRes1F61);
          int addRes1F64#1 = IAdd(mulRes1F5C,ilit1CBB);
          int idx1F65#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(_t1A2F,addRes1F64);
          int mulRes1F78#2 = IMul(ilit1CBB,idx1F5F);
          int addRes1F7B#1 = IAdd(ilit1CB8,mulRes1F78);
          real dof_load1F7C#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1A2F,mulRes1F78);
          real dof_load1F7D#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1A2F,addRes1F7B);
          int mulRes1F80#2 = IMul(ilit1CBB,idx1F62);
          int addRes1F82#1 = IAdd(ilit1CB8,mulRes1F80);
          real dof_load1F83#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1A2F,mulRes1F80);
          real dof_load1F84#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1A2F,addRes1F82);
          int mulRes1F87#2 = IMul(ilit1CBB,idx1F65);
          int addRes1F89#1 = IAdd(ilit1CB8,mulRes1F87);
          real dof_load1F8A#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1A2F,mulRes1F87);
          real dof_load1F8B#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1A2F,addRes1F89);
          real r1FC3#2 = RMul(dof_load1F7C,mult1F13);
          real r1FC6#1 = RMul(dof_load1F83,mult1D23);
          real r1FC9#1 = RMul(dof_load1F8A,_t1E96);
          real r1FCA#1 = RAdd(r1FC3,r1FC6);
          real r1FCB#3 = RAdd(r1FCA,r1FC9);
          real r1FCF#1 = RMul(dof_load1F83,_t1E96);
          real r1FD1#1 = RMul(dof_load1F8A,mult1D23);
          real r1FD2#1 = RAdd(r1FC3,r1FCF);
          real r1FD3#3 = RAdd(r1FD2,r1FD1);
          real r1FD6#2 = RMul(dof_load1F7D,mult1F13);
          real r1FD8#1 = RMul(dof_load1F84,mult1D23);
          real r1FDA#1 = RMul(dof_load1F8B,_t1E96);
          real r1FDB#1 = RAdd(r1FD6,r1FD8);
          real r1FDC#3 = RAdd(r1FDB,r1FDA);
          real r1FDE#1 = RMul(dof_load1F84,_t1E96);
          real r1FDF#1 = RMul(dof_load1F8B,mult1D23);
          real r1FE0#1 = RAdd(r1FD6,r1FDE);
          real r1FE1#3 = RAdd(r1FE0,r1FDF);
          real r200A#1 = RMul(_t1E96,r1FCB);
          real r200D#1 = RMul(coeff1D2F,r1FDC);
          real r200E#2 = RAdd(r200A,r200D);
          real r2010#2 = RMul(_t1E96,r1FD3);
          real r2012#1 = RMul(coeff1D2F,r1FE1);
          real r2013#2 = RAdd(r2010,r2012);
          real r2016#1 = RMul(one1D18,r1FCB);
          real r2017#1 = RMul(_t1E96,r1FDC);
          real r2018#2 = RAdd(r2016,r2017);
          real r2019#1 = RMul(one1D18,r1FD3);
          real r201A#2 = RMul(_t1E96,r1FE1);
          real r201B#2 = RAdd(r2019,r201A);
          tensor[2] probe_l_102034#1 = <tensor[2]>[r1FCB,r1FDC];
          real r208C#1 = RMul(one1D18,r1FE1);
          real r208D#1 = RAdd(r2010,r208C);
          real r208F#1 = RMul(coeff1D2F,r1FD3);
          real r2091#1 = RAdd(r208F,r201A);
          tensor[2] op1_e3_l_122086#1 = <tensor[2]>[r208D,r2091];
          real r20A2#1 = RMul(_t1E96,r200E);
          real r20A5#1 = RMul(coeff1D2F,r2013);
          real r20A6#1 = RAdd(r20A2,r20A5);
          real r20A8#1 = RMul(_t1E96,r2018);
          real r20AA#1 = RMul(coeff1D2F,r201B);
          real r20AB#1 = RAdd(r20A8,r20AA);
          real r20AE#1 = RMul(one1D18,r200E);
          real r20AF#1 = RMul(_t1E96,r2013);
          real r20B0#1 = RAdd(r20AE,r20AF);
          real r20B1#1 = RMul(one1D18,r2018);
          real r20B2#1 = RMul(_t1E96,r201B);
          real r20B3#1 = RAdd(r20B1,r20B2);
          real op1_e3_l_1420CC#4 = VDot<2>(probe_l_102034,op1_e3_l_122086);
          real r20D1#1 = RDiv(r20A6,op1_e3_l_1420CC);
          real r20D3#1 = RDiv(r20AB,op1_e3_l_1420CC);
          real r20D6#1 = RDiv(r20B0,op1_e3_l_1420CC);
          real r20D8#1 = RDiv(r20B3,op1_e3_l_1420CC);
          real r20E9#1 = RMul(vdot1F51,r20D1);
          real r20EC#1 = RMul(vdot1F53,r20D6);
          real r20ED#1 = RAdd(r20E9,r20EC);
          real r20EF#1 = RMul(vdot1F51,r20D3);
          real r20F1#1 = RMul(vdot1F53,r20D8);
          real r20F2#1 = RAdd(r20EF,r20F1);
          tensor[2] grad20E6#1 = <tensor[2]>[r20ED,r20F2];
          goto JOIN2103
        JOIN2103:  preds = [ASSIGN2100,COND1F00]
          tensor[2] grad2101#1 = phi(grad20E6,grad1EFC)
          real out2102#1 = phi(fmVal1E81,out1A08)
          if _t1EB7 then goto ASSIGN2662 else goto JOIN2308
        ASSIGN2662:  preds = [COND2104]
          real mult2110#1 = RMul(coeff1D1D,prod1D22);
          real sum2113#1 = RAdd(mult1D37,mult1D3B);
          real sum2114#2 = RAdd(mult2110,sum2113);
          real mult2117#4 = RMul(coeff1D2F,prod1D22);
          real sum2118#1 = RAdd(mult2117,mult1D3B);
          real basisEval211C#2 = RMul(coeff1D36,prod1D21);
          real coeff211D#1 = -0.8e1;
          real mult211E#2 = RMul(coeff1D1A,prod1D22);
          real mult211F#1 = RMul(coeff211D,prod1D1E);
          real sum2120#1 = RAdd(basisEval211C,mult211F);
          real sum2121#1 = RAdd(mult211E,sum2120);
          real sum2124#1 = RAdd(mult2117,mult1D37);
          real mult2126#2 = RMul(coeff1D36,prod1D1E);
          real sum2127#1 = RAdd(mult211E,mult2126);
          tensor[6] intermediateCons2129#1 = <tensor[6]>[sum2114,sum2118,_t1E96,mult1D37,basisEval211C,sum2121];
          tensor[6] intermediateCons212A#1 = <tensor[6]>[sum2114,_t1E96,sum2124,mult1D3B,sum2127,mult2126];
          real vdot2155#2 = VDot<6>(dofs1CF7,intermediateCons2129);
          real vdot2157#2 = VDot<6>(dofs1CF7,intermediateCons212A);
          int mulRes2160#3 = IMul(_t1A31,ilit1CBE);
          int idx2163#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(_t1A2F,mulRes2160);
          int addRes2165#1 = IAdd(mulRes2160,ilit1CB8);
          int idx2166#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(_t1A2F,addRes2165);
          int addRes2168#1 = IAdd(mulRes2160,ilit1CBB);
          int idx2169#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(_t1A2F,addRes2168);
          int mulRes217C#2 = IMul(ilit1CBB,idx2163);
          int addRes217F#1 = IAdd(ilit1CB8,mulRes217C);
          real dof_load2180#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1A2F,mulRes217C);
          real dof_load2181#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1A2F,addRes217F);
          int mulRes2184#2 = IMul(ilit1CBB,idx2166);
          int addRes2186#1 = IAdd(ilit1CB8,mulRes2184);
          real dof_load2187#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1A2F,mulRes2184);
          real dof_load2188#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1A2F,addRes2186);
          int mulRes218B#2 = IMul(ilit1CBB,idx2169);
          int addRes218D#1 = IAdd(ilit1CB8,mulRes218B);
          real dof_load218E#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1A2F,mulRes218B);
          real dof_load218F#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1A2F,addRes218D);
          real r21C7#2 = RMul(dof_load2180,mult2117);
          real r21CA#1 = RMul(dof_load2187,mult1D23);
          real r21CD#1 = RMul(dof_load218E,_t1E96);
          real r21CE#1 = RAdd(r21C7,r21CA);
          real r21CF#3 = RAdd(r21CE,r21CD);
          real r21D3#1 = RMul(dof_load2187,_t1E96);
          real r21D5#1 = RMul(dof_load218E,mult1D23);
          real r21D6#1 = RAdd(r21C7,r21D3);
          real r21D7#3 = RAdd(r21D6,r21D5);
          real r21DA#2 = RMul(dof_load2181,mult2117);
          real r21DC#1 = RMul(dof_load2188,mult1D23);
          real r21DE#1 = RMul(dof_load218F,_t1E96);
          real r21DF#1 = RAdd(r21DA,r21DC);
          real r21E0#3 = RAdd(r21DF,r21DE);
          real r21E2#1 = RMul(dof_load2188,_t1E96);
          real r21E3#1 = RMul(dof_load218F,mult1D23);
          real r21E4#1 = RAdd(r21DA,r21E2);
          real r21E5#3 = RAdd(r21E4,r21E3);
          real r220E#1 = RMul(_t1E96,r21CF);
          real r2211#1 = RMul(coeff1D2F,r21E0);
          real r2212#2 = RAdd(r220E,r2211);
          real r2214#2 = RMul(_t1E96,r21D7);
          real r2216#1 = RMul(coeff1D2F,r21E5);
          real r2217#2 = RAdd(r2214,r2216);
          real r221A#1 = RMul(one1D18,r21CF);
          real r221B#1 = RMul(_t1E96,r21E0);
          real r221C#2 = RAdd(r221A,r221B);
          real r221D#1 = RMul(one1D18,r21D7);
          real r221E#2 = RMul(_t1E96,r21E5);
          real r221F#2 = RAdd(r221D,r221E);
          tensor[2] probe_l_102238#1 = <tensor[2]>[r21CF,r21E0];
          real r2290#1 = RMul(one1D18,r21E5);
          real r2291#1 = RAdd(r2214,r2290);
          real r2293#1 = RMul(coeff1D2F,r21D7);
          real r2295#1 = RAdd(r2293,r221E);
          tensor[2] op1_e3_l_12228A#1 = <tensor[2]>[r2291,r2295];
          real r22A6#1 = RMul(_t1E96,r2212);
          real r22A9#1 = RMul(coeff1D2F,r2217);
          real r22AA#1 = RAdd(r22A6,r22A9);
          real r22AC#1 = RMul(_t1E96,r221C);
          real r22AE#1 = RMul(coeff1D2F,r221F);
          real r22AF#1 = RAdd(r22AC,r22AE);
          real r22B2#1 = RMul(one1D18,r2212);
          real r22B3#1 = RMul(_t1E96,r2217);
          real r22B4#1 = RAdd(r22B2,r22B3);
          real r22B5#1 = RMul(one1D18,r221C);
          real r22B6#1 = RMul(_t1E96,r221F);
          real r22B7#1 = RAdd(r22B5,r22B6);
          real op1_e3_l_1422D0#4 = VDot<2>(probe_l_102238,op1_e3_l_12228A);
          real r22D5#1 = RDiv(r22AA,op1_e3_l_1422D0);
          real r22D7#1 = RDiv(r22AF,op1_e3_l_1422D0);
          real r22DA#1 = RDiv(r22B4,op1_e3_l_1422D0);
          real r22DC#1 = RDiv(r22B7,op1_e3_l_1422D0);
          real r22ED#1 = RMul(vdot2155,r22D5);
          real r22F0#1 = RMul(vdot2157,r22DA);
          real r22F1#1 = RAdd(r22ED,r22F0);
          real r22F3#1 = RMul(vdot2155,r22D7);
          real r22F5#1 = RMul(vdot2157,r22DC);
          real r22F6#1 = RAdd(r22F3,r22F5);
          tensor[2] grad22EA#1 = <tensor[2]>[r22F1,r22F6];
          goto JOIN2308
        JOIN2308:  preds = [ASSIGN2304,COND2104]
          tensor[2] grad2305#3 = phi(grad22EA,grad2101)
          real cup2306#1 = phi(s1EAC,cup1E13)
          real out2307#3 = phi(faVal1D70,out2102)
          string _t2309#1 = "Out val:";
          Print<[string,real,string]>(_t2309,out2307,_t1A0E);
          string _t230C#1 = "Grad val:";
          Print<[string,tensor[2],string]>(_t230C,grad2305,_t1A0E);
          tensor[3] mcol2311#1 = <tensor[3]>[one1D18,one1D18,one1D18];
          bool _t2313#1 = NEQ<real>(cmin19E0,cmax19E2);
          if _t2313 then goto ASSIGN231A else goto JOIN2397
        ASSIGN231A:  preds = [COND2315]
          real op1_e3_l_52318#1 = RSub(out2307,cmin19E0);
          real op1_e3_l_6231B#1 = RSub(cmax19E2,cmin19E0);
          real op1_e3_l_7231E#1 = RDiv(op1_e3_l_52318,op1_e3_l_6231B);
          real op1_e3_l_82321#1 = RSub(one1D18,coeff1D2F);
          real op1_e3_l_92324#1 = RMul(op1_e3_l_7231E,op1_e3_l_82321);
          real _t2327#1 = RAdd(coeff1D2F,op1_e3_l_92324);
          real Mtransform232A#1 = Transform<IMAGE1D<double[3]>>(cmap19CC);
          real MxPos232C#1 = RMul(Mtransform232A,_t2327);
          real Ttranslate232F#1 = Translate<IMAGE1D<double[3]>>(cmap19CC);
          real imgPos2331#2 = RAdd(MxPos232C,Ttranslate232F);
          real nd2334#2 = Floor<1>(imgPos2331);
          real f2336#2 = RSub(imgPos2331,nd2334);
          int n2339#5 = RealToInt<1>(nd2334);
          bool isInside233D#1 = IndexInside<IMAGE1D<double[3]>,2>(n2339,cmap19CC);
          if isInside233D then goto ASSIGN26B1 else goto ASSIGN26A9
        ASSIGN26B1:  preds = [COND233F]
          int offp2344#3 = IMul(ilit1CBE,n2339);
          real v0_2345#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap19CC,offp2344);
          int addRes2347#1 = IAdd(n2339,ilit1CB8);
          int offp2348#3 = IMul(ilit1CBE,addRes2347);
          real v1_2349#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap19CC,offp2348);
          tensor[2] v_234A#1 = <tensor[2]>[v0_2345,v1_2349];
          int offp234B#1 = IAdd(offp2344,ilit1CB8);
          real v0_234C#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap19CC,offp234B);
          int offp234D#1 = IAdd(offp2348,ilit1CB8);
          real v1_234E#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap19CC,offp234D);
          tensor[2] v_234F#1 = <tensor[2]>[v0_234C,v1_234E];
          int offp2351#1 = IAdd(offp2344,ilit1CBB);
          real v0_2352#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap19CC,offp2351);
          int offp2353#1 = IAdd(offp2348,ilit1CBB);
          real v1_2354#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap19CC,offp2353);
          tensor[2] v_2355#1 = <tensor[2]>[v0_2352,v1_2354];
          tensor[3,2] voxels2356#1 = <tensor[3,2]>[v_234A,v_234F,v_2355];
          goto JOIN2370
        JOIN2370:  preds = [ASSIGN236C,ASSIGN245E]
          tensor[3,2] ldvox236E#3 = phi(voxels2356,voxels2446)
          real idx2373#1 = RSub(f2336,one1D18);
          tensor[2] kernX_2371#1 = <tensor[2]>[f2336,idx2373];
          tensor[2] a02378#1 = <tensor[2]>[one1D18,one1D18];
          tensor[2] a12379#1 = <tensor[2]>[coeff1D2F,one1D18];
          tensor[2] prod1237E#1 = VMul<2>(kernX_2371,a12379);
          tensor[2] kevalX_d0_2377#3 = VAdd<2>(a02378,prod1237E);
          tensor[2] projIx2388#1 = ProjectLast<tensor[3,2],[0]>(ldvox236E);
          real vdot2389#1 = VDot<2>(projIx2388,kevalX_d0_2377);
          tensor[2] projIx238A#1 = ProjectLast<tensor[3,2],[1]>(ldvox236E);
          real vdot238B#1 = VDot<2>(projIx238A,kevalX_d0_2377);
          tensor[2] projIx238C#1 = ProjectLast<tensor[3,2],[2]>(ldvox236E);
          real vdot238D#1 = VDot<2>(projIx238C,kevalX_d0_2377);
          tensor[3] mcol2387#1 = <tensor[3]>[vdot2389,vdot238B,vdot238D];
          goto JOIN2397
        JOIN2397:  preds = [ASSIGN2395,COND2315]
          tensor[3] mcol2396#7 = phi(mcol2387,mcol2311)
          if light19E4 then goto ASSIGN239A else goto ASSIGN2429
        ASSIGN239A:  preds = [COND2398]
          real _t2399#1 = VIndex<2,0>(grad2305);
          real _t239B#1 = VIndex<2,1>(grad2305);
          tensor[3] N239F#2 = <tensor[3]>[_t2399,_t239B,coeff1D2F];
          real _t23A1#1 = VDot<3>(N239F,L19EE);
          real _t23A4#1 = Max<real>(_t1E96,_t23A1);
          real op1_e3_l_723A6#1 = VDot<3>(rayVec19F2,rayVec19F2);
          real op1_e3_l_823A9#1 = Sqrt(op1_e3_l_723A6);
          real op1_e3_l_923AC#1 = RDiv(one1D18,op1_e3_l_823A9);
          tensor[3] op1_e3_l_1023B1#1 = VScale<3>(op1_e3_l_923AC,rayVec19F2);
          tensor[3] op1_e3_l_1123B4#1 = VNeg<3>(op1_e3_l_1023B1);
          tensor[3] op1_e3_l_1723B7#3 = VAdd<3>(op1_e3_l_1123B4,L19EE);
          real op1_e3_l_1923BA#1 = VDot<3>(op1_e3_l_1723B7,op1_e3_l_1723B7);
          real op1_e3_l_2023BD#1 = Sqrt(op1_e3_l_1923BA);
          real op1_e3_l_2723C0#1 = RDiv(one1D18,op1_e3_l_2023BD);
          real op1_e3_l_2823C5#1 = VDot<3>(N239F,op1_e3_l_1723B7);
          real _t23C8#1 = RMul(op1_e3_l_2723C0,op1_e3_l_2823C5);
          real _t23CB#1 = Max<real>(_t1E96,_t23C8);
          real _t23CD#1 = MathFn<pow>(_t23CB,phongSp19EC);
          real op1_e3_l_1723CF#1 = RSub(cup2306,camNearVsp19F4);
          real op1_e3_l_1823D2#1 = RSub(camFarVsp19F6,camNearVsp19F4);
          real op1_e3_l_1923D5#1 = RDiv(op1_e3_l_1723CF,op1_e3_l_1823D2);
          tensor[3] op1_e3_l_2023D8#1 = VSub<3>(mcfar19DE,mcnear19DC);
          tensor[3] op1_e3_l_2123DB#1 = VScale<3>(op1_e3_l_1923D5,op1_e3_l_2023D8);
          tensor[3] op1_e3_l_2223DE#3 = VAdd<3>(mcnear19DC,op1_e3_l_2123DB);
          tensor[3] op1_e3_l_2923E1#1 = VScale<3>(phongKa19E6,mcol2396);
          real r23E5#1 = TensorIndex<tensor[3],[0]>(mcol2396);
          real r23E6#2 = TensorIndex<tensor[3],[0]>(op1_e3_l_2223DE);
          real r23E7#3 = RMul(_t23A4,phongKd19E8);
          real r23E8#1 = RMul(r23E7,r23E5);
          real r23E9#1 = RMul(r23E8,r23E6);
          real r23EA#1 = TensorIndex<tensor[3],[1]>(mcol2396);
          real r23EB#2 = TensorIndex<tensor[3],[1]>(op1_e3_l_2223DE);
          real r23EC#1 = RMul(r23E7,r23EA);
          real r23ED#1 = RMul(r23EC,r23EB);
          real r23EE#1 = TensorIndex<tensor[3],[2]>(mcol2396);
          real r23EF#2 = TensorIndex<tensor[3],[2]>(op1_e3_l_2223DE);
          real r23F0#1 = RMul(r23E7,r23EE);
          real r23F1#1 = RMul(r23F0,r23EF);
          tensor[3] op1_e3_l_3023E4#1 = <tensor[3]>[r23E9,r23ED,r23F1];
          real r2403#3 = RMul(_t23CD,phongKs19EA);
          real r2404#1 = RMul(r2403,r23E6);
          real r2406#1 = RMul(r2403,r23EB);
          real r2408#1 = RMul(r2403,r23EF);
          tensor[3] op1_e3_l_312401#1 = <tensor[3]>[r2404,r2406,r2408];
          tensor[3] v2413#1 = VAdd<3>(op1_e3_l_2923E1,op1_e3_l_3023E4);
          tensor[3] fin2412#3 = VAdd<3>(v2413,op1_e3_l_312401);
          real _t2417#1 = VIndex<3,0>(fin2412);
          real _t2419#1 = VIndex<3,1>(fin2412);
          real _t241B#1 = VIndex<3,2>(fin2412);
          tensor[4] rgba241D#1 = <tensor[4]>[_t2417,_t2419,_t241B,one1D18];
          goto JOIN2421
        JOIN2421:  preds = [ASSIGN26C2,ASSIGN26BB]
          tensor[4] rgba241F#1 = phi(rgba241D,rgba2420)
          self.intersectionItter = _t1EA6;
          self.s = s1EAC;
          self.e = e1EAB;
          self.out = out2307;
          self.rgba = rgba241F;
          stabilize
          goto JOIN1EF5
        ASSIGN2429:  preds = [COND2398]
          real _t2428#1 = VIndex<3,0>(mcol2396);
          real _t242A#1 = VIndex<3,1>(mcol2396);
          real _t242C#1 = VIndex<3,2>(mcol2396);
          tensor[4] rgba2420#1 = <tensor[4]>[_t2428,_t242A,_t242C,one1D18];
          goto JOIN2421
        ASSIGN26A9:  preds = [COND233F]
          int ix2431#1 = ControlIndex<IMAGE1D<double[3]>,clamp,0>(cmap19CC,n2339);
          int offp2433#3 = IMul(ilit1CBE,ix2431);
          real v0_2434#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap19CC,offp2433);
          int addRes2436#1 = IAdd(n2339,ilit1CB8);
          int ix2437#1 = ControlIndex<IMAGE1D<double[3]>,clamp,0>(cmap19CC,addRes2436);
          int offp2438#3 = IMul(ilit1CBE,ix2437);
          real v1_2439#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap19CC,offp2438);
          tensor[2] v_243A#1 = <tensor[2]>[v0_2434,v1_2439];
          int offp243B#1 = IAdd(offp2433,ilit1CB8);
          real v0_243C#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap19CC,offp243B);
          int offp243D#1 = IAdd(offp2438,ilit1CB8);
          real v1_243E#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap19CC,offp243D);
          tensor[2] v_243F#1 = <tensor[2]>[v0_243C,v1_243E];
          int offp2441#1 = IAdd(offp2433,ilit1CBB);
          real v0_2442#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap19CC,offp2441);
          int offp2443#1 = IAdd(offp2438,ilit1CBB);
          real v1_2444#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap19CC,offp2443);
          tensor[2] v_2445#1 = <tensor[2]>[v0_2442,v1_2444];
          tensor[3,2] voxels2446#1 = <tensor[3,2]>[v_243A,v_243F,v_2445];
          goto JOIN2370
        ASSIGN2460:  preds = [COND1EC5]
          bool _t1EC9#1 = false;
          goto JOIN1ECA
        ASSIGN2462:  preds = [COND1EBF]
          string _t2461#1 = "=========\n";
          Print<[string]>(_t2461);
          goto JOIN1EF7
        ASSIGN2466:  preds = [COND1EB9]
          real _t2464#1 = Abs<real>(fm1E8A);
          bool _t2467#1 = LT<real>(_t2464,eps19D6);
          if _t2467 then goto ASSIGN246B else goto ASSIGN246F
        ASSIGN246B:  preds = [COND2469]
          bool _t246A#1 = true;
          goto JOIN246D
        JOIN246D:  preds = [ASSIGN246B,ASSIGN2470]
          bool _t1EBD#1 = phi(_t246A,_t246C)
          goto JOIN1EBE
        ASSIGN246F:  preds = [COND2469]
          int _t246E#1 = 32;
          bool _t246C#1 = GT<int>(intersectionItter1E94,_t246E);
          goto JOIN246D
        COND2471:  preds = [COND1EAA]
          if _t1E98 then goto JOIN2474 else goto ASSIGN2486
        JOIN2474:  preds = [COND2471,JOIN248A]
          int _t2472#1 = phi(ilit1CB8,_t2473)
          if _t1E9E then goto JOIN2478 else goto ASSIGN2480
        JOIN2478:  preds = [COND2475,JOIN2484]
          int _t2476#1 = phi(ilit1CB8,_t2477)
          int _t2479#1 = IMul(_t2472,_t2476);
          bool _t247B#1 = GT<int>(_t2479,_t1EA6);
          if _t247B then goto JOIN247E else goto JOIN247E
        JOIN247E:  preds = [COND247D,COND247D]
          real s1EAD#1 = phi(cup1E13,s1E05)
          goto JOIN1EAE
        ASSIGN2480:  preds = [COND2475]
          bool _t247F#1 = LT<real>(fm1E8A,_t1E96);
          if _t247F then goto ASSIGN2483 else goto JOIN2484
        ASSIGN2483:  preds = [COND2481]
          int _t2482#1 = -1;
          goto JOIN2484
        JOIN2484:  preds = [ASSIGN2483,COND2481]
          int _t2477#1 = phi(_t2482,_t1EA6)
          goto JOIN2478
        ASSIGN2486:  preds = [COND2471]
          bool _t2485#1 = LT<real>(fa1D7D,_t1E96);
          if _t2485 then goto ASSIGN2489 else goto JOIN248A
        ASSIGN2489:  preds = [COND2487]
          int _t2488#1 = -1;
          goto JOIN248A
        JOIN248A:  preds = [ASSIGN2489,COND2487]
          int _t2473#1 = phi(_t2488,_t1EA6)
          goto JOIN2474
        ASSIGN248C:  preds = [COND1EA0]
          bool _t248B#1 = LT<real>(fm1E8A,_t1E96);
          if _t248B then goto ASSIGN248F else goto ASSIGN2492
        ASSIGN248F:  preds = [COND248D]
          int _t248E#1 = -1;
          goto JOIN2491
        JOIN2491:  preds = [ASSIGN248F,ASSIGN2492]
          int _t1EA2#1 = phi(_t248E,_t2490)
          goto JOIN1EA3
        ASSIGN2492:  preds = [COND248D]
          int _t2490#1 = 0;
          goto JOIN2491
        ASSIGN2494:  preds = [COND1E9A]
          bool _t2493#1 = LT<real>(fa1D7D,_t1E96);
          if _t2493 then goto ASSIGN2497 else goto ASSIGN249A
        ASSIGN2497:  preds = [COND2495]
          int _t2496#1 = -1;
          goto JOIN2499
        JOIN2499:  preds = [ASSIGN2497,ASSIGN249A]
          int _t1E9C#1 = phi(_t2496,_t2498)
          goto JOIN1E9D
        ASSIGN249A:  preds = [COND2495]
          int _t2498#1 = 0;
          goto JOIN2499
    end update
  end ray
## initial strand creation
  GRID(2)
    ENTRY249B:  preds = []
      int iresU249C#1 = globals.iresU16FD;
      int iresV249E#1 = globals.iresV16FE;
      int _t24A0#2 = 0;
      int _t24A2#2 = 1;
      int _t24A4#1 = ISub(iresU249C,_t24A2);
      int[] _t24A6#1 = Range(_t24A0,_t24A4);
    FOREACH24A9:  preds = [ASSIGN24A7,NEXT24B2]
      foreach (vi24A8 in _t24A6) on exit goto RETURN24B3
      int _t24AA#1 = ISub(iresV249E,_t24A2);
      int[] _t24AC#1 = Range(_t24A0,_t24AA);
    FOREACH24AF:  preds = [ASSIGN24AD,NEXT24B1]
      foreach (ui24AE in _t24AC) on exit goto NEXT24B2
      new ray(ui24AE,vi24A8);
      goto FOREACH24AF
    NEXT24B2:  preds = [FOREACH24AF]
      goto FOREACH24A9
    RETURN24B3:  preds = [FOREACH24A9]
      return
#### end program ####
##### low-ir: after contraction(2) ####
## properties
  GlobalInit StrandArray HasStartMethod ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[]) HasInputs HasGlobals
## globals
  input isoval16F7 (isoval) = <default>
  input thick16F8 (thick) = <default>
  input camEye16F9 (camEye) = <default>
  input camAt16FA (camAt) = <default>
  input camUp16FB (camUp) = <default>
  input camFOV16FC (camFOV) = <default>
  input iresU16FD (iresU) = <default>
  input iresV16FE (iresV) = <default>
  input camNear16FF (camNear) = <default>
  input camFar1700 (camFar) = <default>
  input refStep1701 (refStep) = <default>
  input rayStep1702 (rayStep) = <default>
  input a1703 (a) = <no-default>
  input 0b0472_intermedateGlobal1704 (b) = <no-default>
  input 0c0474_intermedateGlobal1705 (c) = <no-default>
  input eps1706 (eps) = <default>
  input indecies1707 (indecies) = <no-default>
  input times1708 (times) = <no-default>
  input cells1709 (cells) = <no-default>
  input mcnear170A (mcnear) = <default>
  input mcfar170B (mcfar) = <default>
  input cmap170C (cmap) = image("/home/teocollin/gitcode/diderot/tests/lipRay/find/cmap.nrrd")
  input cmin170D (cmin) = <default>
  input cmax170E (cmax) = <default>
  input light170F (light) = <default>
  input phongKa1710 (phongKa) = <default>
  input phongKd1711 (phongKd) = <default>
  input phongKs1712 (phongKs) = <default>
  input phongSp1713 (phongSp) = <default>
  input maxAlpha1714 (maxAlpha) = <default>
  input lightVsp1715 (lightVsp) = <default>
  global femData:MeshCell[] 0cell_a1716
  global femData:FemFunc c1717
  global real camNearVsp1718
  global real camFarVsp1719
  global tensor[3] camN171A
  global tensor[3] camU171B
  global tensor[3] camV171C
  global real camVmax171D
  global real camUmax171E
  global tensor[3] L171F
## functions
  function femData:MeshPos _0A7F_msh_newtonInverse1A34 (tensor[2] pos1A35#2, int cellInt1A36#2, femData:Mesh mesh1A37#12) {
    ENTRY1A38:  preds = []
      real _t1A39#2 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
      tensor[2] xn1A3B#1 = <tensor[2]>[_t1A39,_t1A39];
      int _t1A3D#1 = 0;
      int _t1A3F#1 = 16;
      int[] _t1A41#1 = Range(_t1A3D,_t1A3F);
    FOREACH1A44:  preds = [ASSIGN1A42,NEXT1C9B]
      foreach (itter1A43 in _t1A41) on exit goto ASSIGN1CA0
        tensor[2] xn1BBB#3 = phi(xn1A3B,xn1C2F)
      int ilit1A46#1 = 3;
      int mulRes1A47#3 = IMul(cellInt1A36,ilit1A46);
      int idx1A4A#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(mesh1A37,mulRes1A47);
      int ilit1A4B#4 = 1;
      int addRes1A4C#1 = IAdd(mulRes1A47,ilit1A4B);
      int idx1A4D#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(mesh1A37,addRes1A4C);
      int ilit1A4E#4 = 2;
      int addRes1A4F#1 = IAdd(mulRes1A47,ilit1A4E);
      int idx1A50#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(mesh1A37,addRes1A4F);
      int mulRes1A63#2 = IMul(ilit1A4E,idx1A4A);
      int addRes1A66#1 = IAdd(ilit1A4B,mulRes1A63);
      real dof_load1A67#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh1A37,mulRes1A63);
      real dof_load1A68#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh1A37,addRes1A66);
      int mulRes1A6B#2 = IMul(ilit1A4E,idx1A4D);
      int addRes1A6D#1 = IAdd(ilit1A4B,mulRes1A6B);
      real dof_load1A6E#3 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh1A37,mulRes1A6B);
      real dof_load1A6F#3 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh1A37,addRes1A6D);
      int mulRes1A72#2 = IMul(ilit1A4E,idx1A50);
      int addRes1A74#1 = IAdd(ilit1A4B,mulRes1A72);
      real dof_load1A75#3 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh1A37,mulRes1A72);
      real dof_load1A76#3 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh1A37,addRes1A74);
      real coeff1A96#8 = -0.1e1;
      real one1A97#15 = 0.1e1;
      real prod1A98#2 = RMul(one1A97,one1A97);
      real basisEval1A99#2 = RMul(coeff1A96,prod1A98);
      real basisEval1A9A#5 = RMul(one1A97,prod1A98);
      real basisEval1A9B#12 = 0.e0;
      real r1AAE#2 = RMul(dof_load1A67,basisEval1A99);
      real r1AB1#1 = RMul(dof_load1A6E,basisEval1A9A);
      real r1AB4#1 = RMul(dof_load1A75,basisEval1A9B);
      real r1AB5#1 = RAdd(r1AAE,r1AB1);
      real r1AB6#3 = RAdd(r1AB5,r1AB4);
      real r1ABA#1 = RMul(dof_load1A6E,basisEval1A9B);
      real r1ABC#1 = RMul(dof_load1A75,basisEval1A9A);
      real r1ABD#1 = RAdd(r1AAE,r1ABA);
      real r1ABE#3 = RAdd(r1ABD,r1ABC);
      real r1AC1#2 = RMul(dof_load1A68,basisEval1A99);
      real r1AC3#1 = RMul(dof_load1A6F,basisEval1A9A);
      real r1AC5#1 = RMul(dof_load1A76,basisEval1A9B);
      real r1AC6#1 = RAdd(r1AC1,r1AC3);
      real r1AC7#3 = RAdd(r1AC6,r1AC5);
      real r1AC9#1 = RMul(dof_load1A6F,basisEval1A9B);
      real r1ACA#1 = RMul(dof_load1A76,basisEval1A9A);
      real r1ACB#1 = RAdd(r1AC1,r1AC9);
      real r1ACC#3 = RAdd(r1ACB,r1ACA);
      real r1AF5#1 = RMul(basisEval1A9B,r1AB6);
      real r1AF8#1 = RMul(coeff1A96,r1AC7);
      real r1AF9#2 = RAdd(r1AF5,r1AF8);
      real r1AFB#2 = RMul(basisEval1A9B,r1ABE);
      real r1AFD#1 = RMul(coeff1A96,r1ACC);
      real r1AFE#2 = RAdd(r1AFB,r1AFD);
      real r1B01#1 = RMul(one1A97,r1AB6);
      real r1B02#1 = RMul(basisEval1A9B,r1AC7);
      real r1B03#2 = RAdd(r1B01,r1B02);
      real r1B04#1 = RMul(one1A97,r1ABE);
      real r1B05#2 = RMul(basisEval1A9B,r1ACC);
      real r1B06#2 = RAdd(r1B04,r1B05);
      tensor[2] probe_l_121B1F#1 = <tensor[2]>[r1AB6,r1AC7];
      real r1B77#1 = RMul(one1A97,r1ACC);
      real r1B78#1 = RAdd(r1AFB,r1B77);
      real r1B7A#1 = RMul(coeff1A96,r1ABE);
      real r1B7C#1 = RAdd(r1B7A,r1B05);
      tensor[2] op1_e3_l_141B71#1 = <tensor[2]>[r1B78,r1B7C];
      real r1B8D#1 = RMul(basisEval1A9B,r1AF9);
      real r1B90#1 = RMul(coeff1A96,r1AFE);
      real r1B91#1 = RAdd(r1B8D,r1B90);
      real r1B93#1 = RMul(basisEval1A9B,r1B03);
      real r1B95#1 = RMul(coeff1A96,r1B06);
      real r1B96#1 = RAdd(r1B93,r1B95);
      real r1B99#1 = RMul(one1A97,r1AF9);
      real r1B9A#1 = RMul(basisEval1A9B,r1AFE);
      real r1B9B#1 = RAdd(r1B99,r1B9A);
      real r1B9C#1 = RMul(one1A97,r1B03);
      real r1B9D#1 = RMul(basisEval1A9B,r1B06);
      real r1B9E#1 = RAdd(r1B9C,r1B9D);
      real op1_e3_l_161BB7#4 = VDot<2>(probe_l_121B1F,op1_e3_l_141B71);
      real varAcc1BBC#1 = VIndex<2,0>(xn1BBB);
      real varAcc1BBD#1 = VIndex<2,1>(xn1BBB);
      real prod1BC1#2 = RMul(varAcc1BBC,one1A97);
      real prod1BC3#2 = RMul(one1A97,varAcc1BBD);
      real mult1BC6#1 = RMul(coeff1A96,prod1BC3);
      real mult1BC7#1 = RMul(coeff1A96,prod1BC1);
      real sum1BC8#1 = RAdd(mult1BC6,mult1BC7);
      real sum1BC9#2 = RAdd(basisEval1A9A,sum1BC8);
      real basisEval1BCB#2 = RMul(one1A97,prod1BC1);
      real basisEval1BCC#2 = RMul(one1A97,prod1BC3);
      real r1BE4#1 = RMul(dof_load1A67,sum1BC9);
      real r1BE7#1 = RMul(dof_load1A6E,basisEval1BCB);
      real r1BEA#1 = RMul(dof_load1A75,basisEval1BCC);
      real r1BEB#1 = RAdd(r1BE4,r1BE7);
      real r1BEC#1 = RAdd(r1BEB,r1BEA);
      real r1BEE#1 = RMul(dof_load1A68,sum1BC9);
      real r1BF0#1 = RMul(dof_load1A6F,basisEval1BCB);
      real r1BF2#1 = RMul(dof_load1A76,basisEval1BCC);
      real r1BF3#1 = RAdd(r1BEE,r1BF0);
      real r1BF4#1 = RAdd(r1BF3,r1BF2);
      tensor[2] probe_l_171BE1#1 = <tensor[2]>[r1BEC,r1BF4];
      real r1C0C#1 = RDiv(r1B91,op1_e3_l_161BB7);
      real r1C0E#1 = RDiv(r1B96,op1_e3_l_161BB7);
      tensor[2] tensor1C0F#1 = <tensor[2]>[r1C0C,r1C0E];
      real r1C11#1 = RDiv(r1B9B,op1_e3_l_161BB7);
      real r1C13#1 = RDiv(r1B9E,op1_e3_l_161BB7);
      tensor[2] tensor1C14#1 = <tensor[2]>[r1C11,r1C13];
      tensor[2] op1_e3_l_191C21#2 = VSub<2>(probe_l_171BE1,pos1A35);
      real vdot1C26#1 = VDot<2>(tensor1C0F,op1_e3_l_191C21);
      real vdot1C28#1 = VDot<2>(tensor1C14,op1_e3_l_191C21);
      tensor[2] op1_e3_l_201C24#3 = <tensor[2]>[vdot1C26,vdot1C28];
      tensor[2] xn1C2F#4 = VSub<2>(xn1BBB,op1_e3_l_201C24);
      real _t1C32#2 = 0.1e-7;
      real _t1C34#1 = RMul(_t1C32,_t1C32);
      real _t1C6E#1 = VDot<2>(op1_e3_l_201C24,op1_e3_l_201C24);
      bool _t1C71#1 = GTE<real>(_t1C34,_t1C6E);
      if _t1C71 then goto ASSIGN1C77 else goto JOIN1C9A
    ASSIGN1C77:  preds = [COND1C73]
      real _t1C76#3 = 0.1e-8;
      real _t1C78#1 = RAdd(one1A97,_t1C76);
      tensor[2] _t1C7B#1 = <tensor[2]>[one1A97,one1A97];
      real _t1C7D#1 = VDot<2>(_t1C7B,xn1C2F);
      bool _t1C80#1 = GT<real>(_t1C78,_t1C7D);
      tensor[2] _t1C82#1 = <tensor[2]>[_t1C76,_t1C76];
      tensor[2] _t1C84#2 = VAdd<2>(_t1C82,xn1C2F);
      real _t1C87#1 = VIndex<2,0>(_t1C84);
      real _t1C89#2 = -0.e0;
      bool _t1C8B#1 = GT<real>(_t1C87,_t1C89);
      real _t1C8D#1 = VIndex<2,1>(_t1C84);
      bool _t1C8F#1 = GT<real>(_t1C8D,_t1C89);
      bool _t1C91#1 = BAnd(_t1C8B,_t1C8F);
      bool _t1C93#1 = BAnd(_t1C80,_t1C91);
      if _t1C93 then goto ASSIGN1C97 else goto ASSIGN1C9D
    ASSIGN1C97:  preds = [COND1C95]
      femData:MeshPos _t1C96#1 = ExtractFemItemN<[femData:Mesh,int,tensor[2],tensor[2]],femData:MeshPos,AllBuild(MeshPos),0000,"",[],int>(mesh1A37,cellInt1A36,xn1C2F,pos1A35);
      return _t1C96
      goto JOIN1C99
    JOIN1C99:  preds = [*RETURN(_t1C96)1C98,*RETURN(_t1C9C)1C9E]
      goto JOIN1C9A
    JOIN1C9A:  preds = [*JOIN1C99,COND1C73]
      goto FOREACH1A44
    ASSIGN1C9D:  preds = [COND1C95]
      femData:MeshPos _t1C9C#1 = ExtractFemItemN<[femData:Mesh],femData:MeshPos,InvalidBuild(MeshPos),0000,"",[],int>(mesh1A37);
      return _t1C9C
      goto JOIN1C99
    ASSIGN1CA0:  preds = [FOREACH1A44]
      femData:MeshPos _t1C9F#1 = ExtractFemItemN<[femData:Mesh],femData:MeshPos,InvalidBuild(MeshPos),0000,"",[],int>(mesh1A37);
      return _t1C9F
}
## input initialization
  ENTRY1722:  preds = []
    real isoval1723#1 = 0.2e0;
    globals.isoval16F7 = isoval1723;
    real thick1726#1 = 0.7e-1;
    globals.thick16F8 = thick1726;
    real _t1729#2 = 0.3e1;
    real _t172B#1 = -0.3e1;
    tensor[3] camEye172D#1 = <tensor[3]>[_t1729,_t172B,_t1729];
    globals.camEye16F9 = camEye172D;
    real _t1730#5 = 0.5e0;
    tensor[3] camAt1732#1 = <tensor[3]>[_t1730,_t1730,_t1730];
    globals.camAt16FA = camAt1732;
    real _t1735#4 = 0.e0;
    real _t1737#7 = 0.1e1;
    tensor[3] camUp1739#2 = <tensor[3]>[_t1735,_t1735,_t1737];
    globals.camUp16FB = camUp1739;
    real camFOV173C#1 = 0.137e2;
    globals.camFOV16FC = camFOV173C;
    int iresU173F#2 = 10;
    globals.iresU16FD = iresU173F;
    globals.iresV16FE = iresU173F;
    real camNear1743#1 = -0.2e1;
    globals.camNear16FF = camNear1743;
    real camFar1746#1 = 0.5e1;
    globals.camFar1700 = camFar1746;
    globals.refStep1701 = _t1737;
    real rayStep174A#1 = 0.1e-1;
    globals.rayStep1702 = rayStep174A;
    real eps174D#1 = 0.1e-5;
    globals.eps1706 = eps174D;
    tensor[3] mcnear1750#2 = <tensor[3]>[_t1737,_t1737,_t1737];
    globals.mcnear170A = mcnear1750;
    globals.mcfar170B = mcnear1750;
    globals.cmin170D = _t1735;
    globals.cmax170E = _t1737;
    bool light1756#1 = true;
    globals.light170F = light1756;
    globals.phongKa1710 = _t1730;
    globals.phongKd1711 = _t1730;
    globals.phongKs1712 = _t1735;
    real phongSp175C#1 = 0.6e2;
    globals.phongSp1713 = phongSp175C;
    globals.maxAlpha1714 = _t1737;
    globals.lightVsp1715 = camUp1739;
    return
## global-variable initialization
  ENTRY1762:  preds = []
    tensor[3] camEye1763#1 = globals.camEye16F9;
    tensor[3] camAt1765#1 = globals.camAt16FA;
    tensor[3] camUp1767#3 = globals.camUp16FB;
    real camFOV1769#1 = globals.camFOV16FC;
    int iresU176B#1 = globals.iresU16FD;
    int iresV176D#1 = globals.iresV16FE;
    real camNear176F#1 = globals.camNear16FF;
    real camFar1771#1 = globals.camFar1700;
    femData:Mesh a1773#3 = globals.a1703;
    femData:Space 0b0472_intermedateGlobal1775#1 = globals.0b0472_intermedateGlobal1704;
    femData:FemFunc 0c0474_intermedateGlobal1777#1 = globals.0c0474_intermedateGlobal1705;
    tensor[3] lightVsp177B#5 = globals.lightVsp1715;
    int _t177D#1 = 0;
    int _t177F#1 = 1;
    int _t1781#1 = ExtractFemItem<int,NumCell(Mesh)>(a1773);
    int _t1783#1 = ISub(_t1781,_t177F);
    int[] _t1785#1 = Range(_t177D,_t1783);
    femData:MeshCell[] _t1787#1 = <femData:MeshCell[]>{};
  FOREACH178A:  preds = [ASSIGN1788,NEXT1790]
    foreach (_t1789 in _t1785) on exit goto GASSIGN1791
      femData:MeshCell[] _t178E#2 = phi(_t1787,_t178D)
    femData:MeshCell _t178B#1 = LoadFem<femData:MeshCell>(a1773,_t1789);
    femData:MeshCell[] _t178D#1 = Append<femData:MeshCell>(_t178E,_t178B);
    goto FOREACH178A
  GASSIGN1791:  preds = [FOREACH178A]
    globals.0cell_a1716 = _t178E;
    femData:Space b1792#1 = LoadFem<femData:Space>(0b0472_intermedateGlobal1775,a1773);
    femData:FemFunc c1794#1 = LoadFem<femData:FemFunc>(0c0474_intermedateGlobal1777,b1792);
    globals.c1717 = c1794;
    tensor[3] op1_e3_l_31797#9 = VSub<3>(camAt1765,camEye1763);
    real op1_e3_l_5179A#1 = VDot<3>(op1_e3_l_31797,op1_e3_l_31797);
    real op1_e3_l_6179D#5 = Sqrt(op1_e3_l_5179A);
    real camNearVsp17A0#1 = RAdd(camNear176F,op1_e3_l_6179D);
    globals.camNearVsp1718 = camNearVsp17A0;
    real camFarVsp17A4#1 = RAdd(camFar1771,op1_e3_l_6179D);
    globals.camFarVsp1719 = camFarVsp17A4;
    real realLit17A9#9 = 0.1e1;
    real op1_e3_l_917A8#6 = RDiv(realLit17A9,op1_e3_l_6179D);
    tensor[3] camN17AD#4 = VScale<3>(op1_e3_l_917A8,op1_e3_l_31797);
    globals.camN171A = camN17AD;
    real realLit17B2#6 = 0.e0;
    real r17B3#3 = TensorIndex<tensor[3],[0]>(camUp1767);
    real r17B4#3 = RMul(realLit17B2,r17B3);
    real r17B5#3 = TensorIndex<tensor[3],[1]>(camUp1767);
    real r17B6#3 = RMul(realLit17B2,r17B5);
    real r17B7#3 = TensorIndex<tensor[3],[2]>(camUp1767);
    real r17B8#5 = RMul(realLit17B2,r17B7);
    real r17B9#3 = RAdd(r17B4,r17B6);
    real r17BA#3 = RAdd(r17B9,r17B8);
    real r17BC#1 = RMul(realLit17A9,r17B7);
    real r17BD#1 = RAdd(r17B9,r17BC);
    real realLit17BE#6 = -0.1e1;
    real r17BF#1 = RMul(realLit17BE,r17B5);
    real r17C0#1 = RAdd(r17B4,r17BF);
    real r17C1#1 = RAdd(r17C0,r17B8);
    tensor[3] tensor17C2#1 = <tensor[3]>[r17BA,r17BD,r17C1];
    real r17C3#1 = RMul(realLit17BE,r17B7);
    real r17C4#1 = RAdd(r17B9,r17C3);
    real r17C5#1 = RMul(realLit17A9,r17B3);
    real r17C6#1 = RAdd(r17C5,r17B6);
    real r17C7#1 = RAdd(r17C6,r17B8);
    tensor[3] tensor17C8#1 = <tensor[3]>[r17C4,r17BA,r17C7];
    real r17C9#1 = RMul(realLit17A9,r17B5);
    real r17CA#1 = RAdd(r17B4,r17C9);
    real r17CB#1 = RAdd(r17CA,r17B8);
    real r17CC#1 = RMul(realLit17BE,r17B3);
    real r17CD#1 = RAdd(r17CC,r17B6);
    real r17CE#1 = RAdd(r17CD,r17B8);
    tensor[3] tensor17CF#1 = <tensor[3]>[r17CB,r17CE,r17BA];
    real vdot17F2#1 = VDot<3>(op1_e3_l_31797,tensor17C2);
    real vdot17F4#1 = VDot<3>(op1_e3_l_31797,tensor17C8);
    real vdot17F6#1 = VDot<3>(op1_e3_l_31797,tensor17CF);
    tensor[3] op1_e3_l_1717F0#6 = <tensor[3]>[vdot17F2,vdot17F4,vdot17F6];
    real op1_e3_l_3417FF#1 = VDot<3>(op1_e3_l_1717F0,op1_e3_l_1717F0);
    real r1803#1 = RMul(op1_e3_l_917A8,op1_e3_l_917A8);
    real op1_e3_l_351802#1 = RMul(r1803,op1_e3_l_3417FF);
    real op1_e3_l_361807#1 = Sqrt(op1_e3_l_351802);
    tensor[3] op1_e3_l_37180A#1 = VScale<3>(op1_e3_l_917A8,op1_e3_l_1717F0);
    real op1_e3_l_38180D#2 = RDiv(realLit17A9,op1_e3_l_361807);
    tensor[3] camU1812#4 = VScale<3>(op1_e3_l_38180D,op1_e3_l_37180A);
    globals.camU171B = camU1812;
    real r1818#3 = TensorIndex<tensor[3],[0]>(op1_e3_l_31797);
    real r1819#3 = RMul(realLit17B2,r1818);
    real r181A#3 = TensorIndex<tensor[3],[1]>(op1_e3_l_31797);
    real r181B#3 = RMul(realLit17B2,r181A);
    real r181C#3 = TensorIndex<tensor[3],[2]>(op1_e3_l_31797);
    real r181D#5 = RMul(realLit17B2,r181C);
    real r181E#3 = RAdd(r1819,r181B);
    real r181F#3 = RAdd(r181E,r181D);
    real r1821#1 = RMul(realLit17A9,r181C);
    real r1822#1 = RAdd(r181E,r1821);
    real r1824#1 = RMul(realLit17BE,r181A);
    real r1825#1 = RAdd(r1819,r1824);
    real r1826#1 = RAdd(r1825,r181D);
    tensor[3] tensor1827#1 = <tensor[3]>[r181F,r1822,r1826];
    real r1828#1 = RMul(realLit17BE,r181C);
    real r1829#1 = RAdd(r181E,r1828);
    real r182A#1 = RMul(realLit17A9,r1818);
    real r182B#1 = RAdd(r182A,r181B);
    real r182C#1 = RAdd(r182B,r181D);
    tensor[3] tensor182D#1 = <tensor[3]>[r1829,r181F,r182C];
    real r182E#1 = RMul(realLit17A9,r181A);
    real r182F#1 = RAdd(r1819,r182E);
    real r1830#1 = RAdd(r182F,r181D);
    real r1831#1 = RMul(realLit17BE,r1818);
    real r1832#1 = RAdd(r1831,r181B);
    real r1833#1 = RAdd(r1832,r181D);
    tensor[3] tensor1834#1 = <tensor[3]>[r1830,r1833,r181F];
    real vdot1857#1 = VDot<3>(op1_e3_l_1717F0,tensor1827);
    real vdot1859#1 = VDot<3>(op1_e3_l_1717F0,tensor182D);
    real vdot185B#1 = VDot<3>(op1_e3_l_1717F0,tensor1834);
    tensor[3] op1_e3_l_471855#1 = <tensor[3]>[vdot1857,vdot1859,vdot185B];
    tensor[3] op1_e3_l_501864#3 = VScale<3>(op1_e3_l_917A8,op1_e3_l_471855);
    real r1868#1 = TensorIndex<tensor[3],[0]>(op1_e3_l_501864);
    real r1869#3 = RMul(op1_e3_l_38180D,op1_e3_l_917A8);
    real r186A#2 = RMul(r1869,r1868);
    real r186B#1 = TensorIndex<tensor[3],[1]>(op1_e3_l_501864);
    real r186C#2 = RMul(r1869,r186B);
    real r186D#1 = TensorIndex<tensor[3],[2]>(op1_e3_l_501864);
    real r186E#2 = RMul(r1869,r186D);
    tensor[3] camV1867#1 = <tensor[3]>[r186A,r186C,r186E];
    globals.camV171C = camV1867;
    real _t1879#1 = 0.314159265358979323846264338327950288e1;
    real _t187B#1 = 0.36e3;
    real op1_e3_l_5187D#1 = RMul(camFOV1769,_t1879);
    real op1_e3_l_61880#1 = RDiv(op1_e3_l_5187D,_t187B);
    real op1_e3_l_101883#2 = Tan(op1_e3_l_61880);
    real camVmax1886#1 = RMul(op1_e3_l_101883,op1_e3_l_6179D);
    globals.camVmax171D = camVmax1886;
    real _t188A#1 = IntToReal(iresU176B);
    real _t188C#1 = IntToReal(iresV176D);
    real r188F#1 = RMul(_t188A,op1_e3_l_101883);
    real op1_e3_l_14188E#1 = RMul(r188F,op1_e3_l_6179D);
    real camUmax1893#1 = RDiv(op1_e3_l_14188E,_t188C);
    globals.camUmax171E = camUmax1893;
    real op1_e3_l_3189D#1 = VDot<3>(lightVsp177B,lightVsp177B);
    real op1_e3_l_418A0#1 = Sqrt(op1_e3_l_3189D);
    real op1_e3_l_518A3#1 = RDiv(realLit17A9,op1_e3_l_418A0);
    real r18A9#1 = VIndex<3,0>(camU1812);
    real r18AA#3 = TensorIndex<tensor[3],[0]>(lightVsp177B);
    real r18AB#1 = RMul(r18A9,r18AA);
    real r18AD#3 = TensorIndex<tensor[3],[1]>(lightVsp177B);
    real r18AE#1 = RMul(r186A,r18AD);
    real r18AF#1 = VIndex<3,0>(camN17AD);
    real r18B0#3 = TensorIndex<tensor[3],[2]>(lightVsp177B);
    real r18B1#1 = RMul(r18AF,r18B0);
    real r18B2#1 = RAdd(r18AB,r18AE);
    real r18B3#1 = RAdd(r18B2,r18B1);
    real r18B4#1 = VIndex<3,1>(camU1812);
    real r18B5#1 = RMul(r18B4,r18AA);
    real r18B7#1 = RMul(r186C,r18AD);
    real r18B8#1 = VIndex<3,1>(camN17AD);
    real r18B9#1 = RMul(r18B8,r18B0);
    real r18BA#1 = RAdd(r18B5,r18B7);
    real r18BB#1 = RAdd(r18BA,r18B9);
    real r18BC#1 = VIndex<3,2>(camU1812);
    real r18BD#1 = RMul(r18BC,r18AA);
    real r18BF#1 = RMul(r186E,r18AD);
    real r18C0#1 = VIndex<3,2>(camN17AD);
    real r18C1#1 = RMul(r18C0,r18B0);
    real r18C2#1 = RAdd(r18BD,r18BF);
    real r18C3#1 = RAdd(r18C2,r18C1);
    tensor[3] op1_e3_l_618A8#1 = <tensor[3]>[r18B3,r18BB,r18C3];
    tensor[3] L18E1#1 = VScale<3>(op1_e3_l_518A3,op1_e3_l_618A8);
    globals.L171F = L18E1;
    return
## strand
  strand ray (int ui18E8#2, int vi18E9#3)
    state:
      real rayU;
      real rayV;
      tensor[3] UV;
      tensor[3] rayOrig;
      tensor[3] rayVec;
      real camNearVsp;
      real camFarVsp;
      int offset;
      int len;
      int itter;
      int intersectionItter;
      int idx;
      tensor[2] interval;
      real s;
      real e;
      femData:MeshCell cc;
      femData:FuncCell fc;
      output real out;
      output tensor[4] rgba;
    state init
      ENTRY18FD:  preds = []
        tensor[3] camEye18FE#1 = globals.camEye16F9;
        int iresU1900#2 = globals.iresU16FD;
        int iresV1902#3 = globals.iresV16FE;
        femData:MeshCell[] 0cell_a1904#1 = globals.0cell_a1716;
        femData:FemFunc c1906#1 = globals.c1717;
        int[] indecies1908#2 = globals.indecies1707;
        tensor[2][] times190A#1 = globals.times1708;
        real camNearVsp190C#1 = globals.camNearVsp1718;
        real camFarVsp190E#1 = globals.camFarVsp1719;
        tensor[3] camN1910#1 = globals.camN171A;
        tensor[3] camU1912#1 = globals.camU171B;
        tensor[3] camV1914#1 = globals.camV171C;
        real camVmax1916#2 = globals.camVmax171D;
        real camUmax1918#2 = globals.camUmax171E;
        real _t191A#4 = -0.5e0;
        real _t191C#1 = IntToReal(ui18E8);
        real _t191E#1 = IntToReal(iresU1900);
        real _t1920#2 = 0.5e0;
        real op1_e3_l_61922#1 = RSub(_t191E,_t1920);
        real op1_e3_l_71925#1 = RSub(_t191C,_t191A);
        real op1_e3_l_81928#1 = RSub(op1_e3_l_61922,_t191A);
        real op1_e3_l_9192B#2 = RNeg(camUmax1918);
        real op1_e3_l_10192E#1 = RDiv(op1_e3_l_71925,op1_e3_l_81928);
        real op1_e3_l_111931#1 = RSub(camUmax1918,op1_e3_l_9192B);
        real op1_e3_l_131934#1 = RMul(op1_e3_l_10192E,op1_e3_l_111931);
        real rayU1937#2 = RAdd(op1_e3_l_9192B,op1_e3_l_131934);
        real _t193A#1 = IntToReal(vi18E9);
        real _t193C#1 = IntToReal(iresV1902);
        real op1_e3_l_6193E#1 = RSub(_t193C,_t1920);
        real op1_e3_l_71941#1 = RSub(_t193A,_t191A);
        real op1_e3_l_81944#1 = RSub(op1_e3_l_6193E,_t191A);
        real op1_e3_l_91947#2 = RNeg(camVmax1916);
        real op1_e3_l_10194A#1 = RDiv(op1_e3_l_71941,op1_e3_l_81944);
        real op1_e3_l_11194D#1 = RSub(camVmax1916,op1_e3_l_91947);
        real op1_e3_l_131950#1 = RMul(op1_e3_l_10194A,op1_e3_l_11194D);
        real rayV1953#2 = RAdd(op1_e3_l_91947,op1_e3_l_131950);
        tensor[3] op1_e3_l_321965#2 = VScale<3>(rayU1937,camU1912);
        tensor[3] op1_e3_l_331968#2 = VScale<3>(rayV1953,camV1914);
        tensor[3] UV196B#1 = VAdd<3>(op1_e3_l_321965,op1_e3_l_331968);
        tensor[3] v196F#1 = VAdd<3>(camEye18FE,op1_e3_l_321965);
        tensor[3] rayOrig196E#1 = VAdd<3>(v196F,op1_e3_l_331968);
        real _t1973#8 = 0.e0;
        tensor[3] _t1975#1 = <tensor[3]>[_t1973,_t1973,_t1973];
        tensor[3] rayVec1977#1 = VAdd<3>(camN1910,_t1975);
        int _t197A#2 = IMul(ui18E8,iresV1902);
        int _t197C#1 = IAdd(_t197A,vi18E9);
        int offset197E#3 = Subscript<int[]>(indecies1908,_t197C);
        int _t1980#1 = IMul(iresU1900,iresV1902);
        int _t1982#1 = IAdd(_t1980,_t197A);
        int _t1984#1 = IAdd(_t1982,vi18E9);
        int len1986#1 = Subscript<int[]>(indecies1908,_t1984);
        int itter1988#3 = 0;
        tensor[2] interval198C#3 = Subscript<tensor[2][]>(times190A,offset197E);
        real s198E#1 = VIndex<2,0>(interval198C);
        real e1990#1 = VIndex<2,1>(interval198C);
        femData:MeshCell cc1992#2 = Subscript<femData:MeshCell[]>(0cell_a1904,itter1988);
        int _t1994#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc1992);
        femData:FuncCell _t1996#1 = LoadFem<femData:FuncCell>(c1906,_t1994);
        tensor[4] rgba1998#1 = <tensor[4]>[_t1973,_t1973,_t1973,_t1973];
        self.rayU = rayU1937;
        self.rayV = rayV1953;
        self.UV = UV196B;
        self.rayOrig = rayOrig196E;
        self.rayVec = rayVec1977;
        self.camNearVsp = camNearVsp190C;
        self.camFarVsp = camFarVsp190E;
        self.offset = offset197E;
        self.len = len1986;
        self.itter = itter1988;
        self.intersectionItter = itter1988;
        self.idx = offset197E;
        self.interval = interval198C;
        self.s = s198E;
        self.e = e1990;
        self.cc = cc1992;
        self.fc = _t1996;
        self.out = _t1973;
        self.rgba = rgba1998;
        return
    end state init
    method start
        ENTRY19AE:  preds = []
          femData:MeshCell[] 0cell_a19AF#1 = globals.0cell_a1716;
          femData:FemFunc c19B1#1 = globals.c1717;
          int[] cells19B3#1 = globals.cells1709;
          int len19B5#1 = self.len;
          int idx19B7#1 = self.idx;
          int _t19B9#1 = 0;
          bool _t19BB#1 = EQ<int>(len19B5,_t19B9);
          if _t19BB then goto STABILIZE19BE else goto JOIN19BF
        STABILIZE19BE:  preds = [COND19BD]
          stabilize
          goto JOIN19BF
        JOIN19BF:  preds = [*STABILIZE19BE,COND19BD]
          int _t19C0#1 = Subscript<int[]>(cells19B3,idx19B7);
          femData:MeshCell cc19C2#2 = Subscript<femData:MeshCell[]>(0cell_a19AF,_t19C0);
          int _t19C4#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc19C2);
          femData:FuncCell _t19C6#1 = LoadFem<femData:FuncCell>(c19B1,_t19C4);
          self.cc = cc19C2;
          self.fc = _t19C6;
          active
    end start
    method update
        ENTRY19CB:  preds = []
          image(IMAGE1D<double[3]>) cmap19CC#17 = globals.cmap170C;
          femData:MeshCell[] 0cell_a19D2#1 = globals.0cell_a1716;
          femData:FemFunc c19D4#1 = globals.c1717;
          real eps19D6#8 = globals.eps1706;
          tensor[2][] times19D8#1 = globals.times1708;
          int[] cells19DA#1 = globals.cells1709;
          tensor[3] mcnear19DC#2 = globals.mcnear170A;
          tensor[3] mcfar19DE#1 = globals.mcfar170B;
          real cmin19E0#3 = globals.cmin170D;
          real cmax19E2#2 = globals.cmax170E;
          bool light19E4#1 = globals.light170F;
          real phongKa19E6#1 = globals.phongKa1710;
          real phongKd19E8#1 = globals.phongKd1711;
          real phongKs19EA#1 = globals.phongKs1712;
          real phongSp19EC#1 = globals.phongSp1713;
          tensor[3] L19EE#2 = globals.L171F;
          tensor[3] rayOrig19F0#3 = self.rayOrig;
          tensor[3] rayVec19F2#6 = self.rayVec;
          real camNearVsp19F4#2 = self.camNearVsp;
          real camFarVsp19F6#1 = self.camFarVsp;
          int offset19F8#1 = self.offset;
          int len19FA#1 = self.len;
          int itter19FC#2 = self.itter;
          int intersectionItter19FE#2 = self.intersectionItter;
          real s1A00#6 = self.s;
          real e1A02#5 = self.e;
          femData:MeshCell cc1A04#2 = self.cc;
          femData:FuncCell fc1A06#2 = self.fc;
          real out1A08#1 = self.out;
          string _t1A0A#1 = "Interval:";
          tensor[2] _t1A0C#1 = <tensor[2]>[s1A00,e1A02];
          string _t1A0E#10 = "\n";
          Print<[string,tensor[2],string]>(_t1A0A,_t1A0C,_t1A0E);
          string _t1A11#1 = "inner itter:";
          Print<[string,int,string]>(_t1A11,intersectionItter19FE,_t1A0E);
          string _t1A14#1 = "Outer itter:";
          Print<[string,int,string]>(_t1A14,itter19FC,_t1A0E);
          real _t1A17#1 = VIndex<3,0>(rayOrig19F0);
          real _t1A19#1 = VIndex<3,1>(rayOrig19F0);
          tensor[2] _t1A1B#3 = <tensor[2]>[_t1A17,_t1A19];
          real _t1A1D#1 = VIndex<3,0>(rayVec19F2);
          real _t1A1F#1 = VIndex<3,1>(rayVec19F2);
          tensor[2] _t1A21#3 = <tensor[2]>[_t1A1D,_t1A1F];
          tensor[2] op1_e3_l_31A23#1 = VScale<2>(s1A00,_t1A21);
          tensor[2] startRay1A26#1 = VAdd<2>(_t1A1B,op1_e3_l_31A23);
          tensor[2] op1_e3_l_31A29#1 = VScale<2>(e1A02,_t1A21);
          tensor[2] endRay1A2C#1 = VAdd<2>(_t1A1B,op1_e3_l_31A29);
          femData:Mesh _t1A2F#21 = ExtractFem<femData:Mesh,femData:MeshCell>(cc1A04);
          int _t1A31#5 = ExtractFemItem<int,CellIndex(MeshCell)>(cc1A04);
          femData:MeshPos callNewtonPos1A33#1 = _0A7F_msh_newtonInverse1A34 (startRay1A26,_t1A31,_t1A2F);
          tensor[2] refPos1CA3#3 = ExtractFemItem<tensor[2],RefPos(Mesh)>(callNewtonPos1A33);
          femData:MeshPos callNewtonPos1CA5#1 = _0A7F_msh_newtonInverse1A34 (endRay1A2C,_t1A31,_t1A2F);
          tensor[2] refPos1CA7#3 = ExtractFemItem<tensor[2],RefPos(Mesh)>(callNewtonPos1CA5);
          string _t1CA9#1 = "inverses:";
          Print<[string,tensor[2],tensor[2],string]>(_t1CA9,refPos1CA3,refPos1CA7,_t1A0E);
          femData:FemFunc _t1CAC#7 = ExtractFem<femData:FemFunc,femData:FuncCell>(fc1A06);
          femData:Space _t1CAE#6 = ExtractFem<femData:Space,femData:FemFunc>(_t1CAC);
          int _t1CB0#1 = ExtractFemItem<int,CellIndex(FuncCell)>(fc1A06);
          int ilit1CB3#1 = 6;
          int mulRes1CB4#6 = IMul(_t1CB0,ilit1CB3);
          int idx1CB7#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1CAE,mulRes1CB4);
          int ilit1CB8#27 = 1;
          int addRes1CB9#1 = IAdd(mulRes1CB4,ilit1CB8);
          int idx1CBA#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1CAE,addRes1CB9);
          int ilit1CBB#13 = 2;
          int addRes1CBC#1 = IAdd(mulRes1CB4,ilit1CBB);
          int idx1CBD#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1CAE,addRes1CBC);
          int ilit1CBE#7 = 3;
          int addRes1CBF#1 = IAdd(mulRes1CB4,ilit1CBE);
          int idx1CC0#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1CAE,addRes1CBF);
          int ilit1CC1#1 = 4;
          int addRes1CC2#1 = IAdd(mulRes1CB4,ilit1CC1);
          int idx1CC3#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1CAE,addRes1CC2);
          int ilit1CC4#1 = 5;
          int addRes1CC5#1 = IAdd(mulRes1CB4,ilit1CC4);
          int idx1CC6#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1CAE,addRes1CC5);
          int mulRes1CE2#1 = IMul(ilit1CB8,idx1CB7);
          int mulRes1CE4#1 = IMul(ilit1CB8,idx1CBA);
          int mulRes1CE7#1 = IMul(ilit1CB8,idx1CBD);
          int mulRes1CEA#1 = IMul(ilit1CB8,idx1CC0);
          int mulRes1CED#1 = IMul(ilit1CB8,idx1CC3);
          int mulRes1CF0#1 = IMul(ilit1CB8,idx1CC6);
          real dof1CF1#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(_t1CAC,mulRes1CE2);
          real dof1CF2#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(_t1CAC,mulRes1CE4);
          real dof1CF3#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(_t1CAC,mulRes1CE7);
          real dof1CF4#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(_t1CAC,mulRes1CEA);
          real dof1CF5#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(_t1CAC,mulRes1CED);
          real dof1CF6#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(_t1CAC,mulRes1CF0);
          tensor[6] dofs1CF7#7 = <tensor[6]>[dof1CF1,dof1CF2,dof1CF3,dof1CF4,dof1CF5,dof1CF6];
          real varAcc1D13#4 = VIndex<2,0>(refPos1CA3);
          real varAcc1D14#4 = VIndex<2,1>(refPos1CA3);
          real coeff1D15#6 = 0.2e1;
          real prod21D17#1 = RMul(varAcc1D13,varAcc1D13);
          real one1D18#37 = 0.1e1;
          real prod1D19#2 = RMul(prod21D17,one1D18);
          real coeff1D1A#11 = 0.4e1;
          real prod1D1C#2 = RMul(varAcc1D13,varAcc1D14);
          real coeff1D1D#8 = -0.3e1;
          real prod1D1E#5 = RMul(varAcc1D13,one1D18);
          real prod21D1F#1 = RMul(varAcc1D14,varAcc1D14);
          real prod1D20#1 = RMul(one1D18,prod21D1F);
          real prod1D21#4 = RMul(one1D18,varAcc1D14);
          real prod1D22#7 = RMul(one1D18,one1D18);
          real mult1D23#11 = RMul(one1D18,prod1D22);
          real mult1D24#1 = RMul(coeff1D1D,prod1D21);
          real mult1D25#2 = RMul(coeff1D15,prod1D20);
          real mult1D26#1 = RMul(coeff1D1D,prod1D1E);
          real mult1D27#2 = RMul(coeff1D1A,prod1D1C);
          real mult1D28#2 = RMul(coeff1D15,prod1D19);
          real sum1D29#1 = RAdd(mult1D27,mult1D28);
          real sum1D2A#1 = RAdd(mult1D26,sum1D29);
          real sum1D2B#1 = RAdd(mult1D25,sum1D2A);
          real sum1D2C#1 = RAdd(mult1D24,sum1D2B);
          real sum1D2D#1 = RAdd(mult1D23,sum1D2C);
          real coeff1D2F#22 = -0.1e1;
          real mult1D30#1 = RMul(coeff1D2F,prod1D1E);
          real sum1D31#1 = RAdd(mult1D30,mult1D28);
          real mult1D33#1 = RMul(coeff1D2F,prod1D21);
          real sum1D34#1 = RAdd(mult1D33,mult1D25);
          real coeff1D36#10 = -0.4e1;
          real mult1D37#4 = RMul(coeff1D1A,prod1D21);
          real mult1D38#2 = RMul(coeff1D36,prod1D1C);
          real sum1D39#1 = RAdd(mult1D37,mult1D38);
          real mult1D3B#4 = RMul(coeff1D1A,prod1D1E);
          real mult1D3C#1 = RMul(coeff1D36,prod1D19);
          real sum1D3D#1 = RAdd(mult1D38,mult1D3C);
          real sum1D3E#1 = RAdd(mult1D3B,sum1D3D);
          tensor[6] intermediateCons1D40#1 = <tensor[6]>[sum1D2D,sum1D31,sum1D34,mult1D27,sum1D39,sum1D3E];
          real faVal1D70#2 = VDot<6>(dofs1CF7,intermediateCons1D40);
          real _t1D73#3 = VIndex<3,2>(rayVec19F2);
          real _t1D75#3 = VIndex<3,2>(rayOrig19F0);
          real op1_e3_l_81D77#1 = RMul(_t1D73,s1A00);
          real op1_e3_l_91D7A#1 = RSub(faVal1D70,op1_e3_l_81D77);
          real fa1D7D#10 = RSub(op1_e3_l_91D7A,_t1D75);
          real varAcc1D81#4 = VIndex<2,0>(refPos1CA7);
          real varAcc1D82#4 = VIndex<2,1>(refPos1CA7);
          real prod21D85#1 = RMul(varAcc1D81,varAcc1D81);
          real prod1D87#2 = RMul(prod21D85,one1D18);
          real prod1D8A#2 = RMul(varAcc1D81,varAcc1D82);
          real prod1D8C#3 = RMul(varAcc1D81,one1D18);
          real prod21D8D#1 = RMul(varAcc1D82,varAcc1D82);
          real prod1D8E#1 = RMul(one1D18,prod21D8D);
          real prod1D8F#3 = RMul(one1D18,varAcc1D82);
          real mult1D92#1 = RMul(coeff1D1D,prod1D8F);
          real mult1D93#2 = RMul(coeff1D15,prod1D8E);
          real mult1D94#1 = RMul(coeff1D1D,prod1D8C);
          real mult1D95#2 = RMul(coeff1D1A,prod1D8A);
          real mult1D96#2 = RMul(coeff1D15,prod1D87);
          real sum1D97#1 = RAdd(mult1D95,mult1D96);
          real sum1D98#1 = RAdd(mult1D94,sum1D97);
          real sum1D99#1 = RAdd(mult1D93,sum1D98);
          real sum1D9A#1 = RAdd(mult1D92,sum1D99);
          real sum1D9B#1 = RAdd(mult1D23,sum1D9A);
          real mult1D9E#1 = RMul(coeff1D2F,prod1D8C);
          real sum1D9F#1 = RAdd(mult1D9E,mult1D96);
          real mult1DA1#1 = RMul(coeff1D2F,prod1D8F);
          real sum1DA2#1 = RAdd(mult1DA1,mult1D93);
          real mult1DA5#1 = RMul(coeff1D1A,prod1D8F);
          real mult1DA6#2 = RMul(coeff1D36,prod1D8A);
          real sum1DA7#1 = RAdd(mult1DA5,mult1DA6);
          real mult1DA9#1 = RMul(coeff1D1A,prod1D8C);
          real mult1DAA#1 = RMul(coeff1D36,prod1D87);
          real sum1DAB#1 = RAdd(mult1DA6,mult1DAA);
          real sum1DAC#1 = RAdd(mult1DA9,sum1DAB);
          tensor[6] intermediateCons1DAE#1 = <tensor[6]>[sum1D9B,sum1D9F,sum1DA2,mult1D95,sum1DA7,sum1DAC];
          real probe_l_71DDE#1 = VDot<6>(dofs1CF7,intermediateCons1DAE);
          real op1_e3_l_81DE1#1 = RMul(_t1D73,e1A02);
          real op1_e3_l_91DE4#1 = RSub(probe_l_71DDE,op1_e3_l_81DE1);
          real fb1DE7#5 = RSub(op1_e3_l_91DE4,_t1D75);
          string _t1DEA#1 = "Vals:";
          tensor[2] _t1DEC#1 = <tensor[2]>[fa1D7D,fb1DE7];
          Print<[string,tensor[2],string]>(_t1DEA,_t1DEC,_t1A0E);
          real op1_e3_l_221DEF#1 = RSub(fa1D7D,fb1DE7);
          real _t1DF2#1 = Abs<real>(op1_e3_l_221DEF);
          bool _t1DF5#1 = LT<real>(_t1DF2,eps19D6);
          if _t1DF5 then goto ASSIGN1DFA else goto JOIN1E06
        ASSIGN1DFA:  preds = [COND1DF7]
          real _t1DF8#1 = Abs<real>(fa1D7D);
          bool _t1DFB#1 = GT<real>(_t1DF8,eps19D6);
          if _t1DFB then goto ASSIGN1E00 else goto JOIN1E04
        ASSIGN1E00:  preds = [COND1DFD]
          real s1DFE#1 = RAdd(s1A00,eps19D6);
          self.s = s1DFE;
          active
          goto JOIN1E04
        JOIN1E04:  preds = [*ACTIVE1E02,COND1DFD]
          real s1E03#1 = phi(s1A00)
          goto JOIN1E06
        JOIN1E06:  preds = [JOIN1E04,COND1DF7]
          real s1E05#3 = phi(s1E03,s1A00)
          real op1_e3_l_381E07#1 = RMul(s1E05,fb1DE7);
          real op1_e3_l_391E0A#1 = RMul(e1A02,fa1D7D);
          real op1_e3_l_481E0D#1 = RSub(op1_e3_l_381E07,op1_e3_l_391E0A);
          real op1_e3_l_491E10#1 = RSub(fb1DE7,fa1D7D);
          real cup1E13#6 = RDiv(op1_e3_l_481E0D,op1_e3_l_491E10);
          string _t1E16#1 = "Mid time:";
          Print<[string,real,string]>(_t1E16,cup1E13,_t1A0E);
          tensor[2] op1_e3_l_531E19#1 = VScale<2>(cup1E13,_t1A21);
          tensor[2] midRay1E1C#1 = VAdd<2>(_t1A1B,op1_e3_l_531E19);
          femData:MeshPos callNewtonPos1E1F#1 = _0A7F_msh_newtonInverse1A34 (midRay1E1C,_t1A31,_t1A2F);
          tensor[2] refPos1E21#2 = ExtractFemItem<tensor[2],RefPos(Mesh)>(callNewtonPos1E1F);
          real varAcc1E24#4 = VIndex<2,0>(refPos1E21);
          real varAcc1E25#4 = VIndex<2,1>(refPos1E21);
          real prod21E28#1 = RMul(varAcc1E24,varAcc1E24);
          real prod1E2A#2 = RMul(prod21E28,one1D18);
          real prod1E2D#2 = RMul(varAcc1E24,varAcc1E25);
          real prod1E2F#5 = RMul(varAcc1E24,one1D18);
          real prod21E30#1 = RMul(varAcc1E25,varAcc1E25);
          real prod1E31#1 = RMul(one1D18,prod21E30);
          real prod1E32#4 = RMul(one1D18,varAcc1E25);
          real mult1E35#1 = RMul(coeff1D1D,prod1E32);
          real mult1E36#2 = RMul(coeff1D15,prod1E31);
          real mult1E37#1 = RMul(coeff1D1D,prod1E2F);
          real mult1E38#2 = RMul(coeff1D1A,prod1E2D);
          real mult1E39#2 = RMul(coeff1D15,prod1E2A);
          real sum1E3A#1 = RAdd(mult1E38,mult1E39);
          real sum1E3B#1 = RAdd(mult1E37,sum1E3A);
          real sum1E3C#1 = RAdd(mult1E36,sum1E3B);
          real sum1E3D#1 = RAdd(mult1E35,sum1E3C);
          real sum1E3E#1 = RAdd(mult1D23,sum1E3D);
          real mult1E41#1 = RMul(coeff1D2F,prod1E2F);
          real sum1E42#1 = RAdd(mult1E41,mult1E39);
          real mult1E44#1 = RMul(coeff1D2F,prod1E32);
          real sum1E45#1 = RAdd(mult1E44,mult1E36);
          real mult1E48#4 = RMul(coeff1D1A,prod1E32);
          real mult1E49#2 = RMul(coeff1D36,prod1E2D);
          real sum1E4A#1 = RAdd(mult1E48,mult1E49);
          real mult1E4C#4 = RMul(coeff1D1A,prod1E2F);
          real mult1E4D#1 = RMul(coeff1D36,prod1E2A);
          real sum1E4E#1 = RAdd(mult1E49,mult1E4D);
          real sum1E4F#1 = RAdd(mult1E4C,sum1E4E);
          tensor[6] intermediateCons1E51#1 = <tensor[6]>[sum1E3E,sum1E42,sum1E45,mult1E38,sum1E4A,sum1E4F];
          real fmVal1E81#2 = VDot<6>(dofs1CF7,intermediateCons1E51);
          real op1_e3_l_581E84#1 = RMul(_t1D73,cup1E13);
          real op1_e3_l_591E87#1 = RSub(fmVal1E81,op1_e3_l_581E84);
          real fm1E8A#6 = RSub(op1_e3_l_591E87,_t1D75);
          string _t1E8D#1 = "all vals:";
          tensor[3] _t1E8F#1 = <tensor[3]>[fa1D7D,fm1E8A,fb1DE7];
          Print<[string,tensor[3],string]>(_t1E8D,_t1E8F,_t1A0E);
          int intersectionItter1E94#2 = IAdd(intersectionItter19FE,ilit1CB8);
          real _t1E96#38 = 0.e0;
          bool _t1E98#2 = GT<real>(fa1D7D,_t1E96);
          if _t1E98 then goto JOIN1E9D else goto ASSIGN2494
        JOIN1E9D:  preds = [COND1E9A,JOIN2499]
          int _t1E9B#1 = phi(ilit1CB8,_t1E9C)
          bool _t1E9E#2 = GT<real>(fm1E8A,_t1E96);
          if _t1E9E then goto JOIN1EA3 else goto ASSIGN248C
        JOIN1EA3:  preds = [COND1EA0,JOIN2491]
          int _t1EA1#1 = phi(ilit1CB8,_t1EA2)
          int _t1EA4#1 = IMul(_t1E9B,_t1EA1);
          int _t1EA6#7 = 0;
          bool _t1EA8#1 = LT<int>(_t1EA4,_t1EA6);
          if _t1EA8 then goto JOIN1EAE else goto COND2471
        JOIN1EAE:  preds = [COND1EAA,JOIN247E]
          real e1EAB#4 = phi(cup1E13,e1A02)
          real s1EAC#5 = phi(s1E05,s1EAD)
          string _t1EAF#1 = "new interval:";
          tensor[2] _t1EB1#1 = <tensor[2]>[s1EAC,e1EAB];
          Print<[string,tensor[2],string]>(_t1EAF,_t1EB1,_t1A0E);
          real _t1EB4#2 = Abs<real>(fa1D7D);
          bool _t1EB7#2 = LT<real>(_t1EB4,eps19D6);
          if _t1EB7 then goto ASSIGN1EBB else goto ASSIGN2466
        ASSIGN1EBB:  preds = [COND1EB9]
          bool _t1EBA#1 = true;
          goto JOIN1EBE
        JOIN1EBE:  preds = [ASSIGN1EBB,JOIN246D]
          bool _t1EBC#1 = phi(_t1EBA,_t1EBD)
          if _t1EBC then goto ASSIGN1EC2 else goto ASSIGN2462
        ASSIGN1EC2:  preds = [COND1EBF]
          real _t1EC0#2 = Abs<real>(fm1E8A);
          bool _t1EC3#1 = GT<real>(_t1EC0,eps19D6);
          if _t1EC3 then goto ASSIGN1EC7 else goto ASSIGN2460
        ASSIGN1EC7:  preds = [COND1EC5]
          bool _t1EC6#1 = GT<real>(_t1EB4,eps19D6);
          goto JOIN1ECA
        JOIN1ECA:  preds = [ASSIGN1EC7,ASSIGN2460]
          bool _t1EC8#1 = phi(_t1EC6,_t1EC9)
          if _t1EC8 then goto ASSIGN26C3 else goto ASSIGN1EFD
        ASSIGN26C3:  preds = [COND1ECB]
          int itter1ECC#4 = IAdd(itter19FC,ilit1CB8);
          bool _t1ECE#1 = GTE<int>(itter1ECC,len19FA);
          if _t1ECE then goto ASSIGN1ED2 else goto JOIN1ED9
        ASSIGN1ED2:  preds = [COND1ED0]
          string _t1ED1#1 = "Fin pixel=============================\n";
          Print<[string]>(_t1ED1);
          self.itter = itter1ECC;
          self.intersectionItter = _t1EA6;
          self.s = s1EAC;
          self.e = e1EAB;
          stabilize
          goto JOIN1ED9
        JOIN1ED9:  preds = [*STABILIZE1ED8,COND1ED0]
          int _t1EDA#2 = IAdd(offset19F8,itter1ECC);
          tensor[2] interval1EDC#3 = Subscript<tensor[2][]>(times19D8,_t1EDA);
          int _t1EDE#1 = Subscript<int[]>(cells19DA,_t1EDA);
          femData:MeshCell cc1EE0#2 = Subscript<femData:MeshCell[]>(0cell_a19D2,_t1EDE);
          real s1EE2#1 = VIndex<2,0>(interval1EDC);
          real e1EE4#1 = VIndex<2,1>(interval1EDC);
          int _t1EE6#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc1EE0);
          femData:FuncCell _t1EE8#1 = LoadFem<femData:FuncCell>(c19D4,_t1EE6);
          string _t1EEA#1 = "Next interval!\n";
          Print<[string]>(_t1EEA);
          self.itter = itter1ECC;
          self.intersectionItter = _t1EA6;
          self.interval = interval1EDC;
          self.s = s1EE2;
          self.e = e1EE4;
          self.cc = cc1EE0;
          self.fc = _t1EE8;
          active
          goto JOIN1EF5
        JOIN1EF5:  preds = [*ACTIVE1EF4,*STABILIZE2427]
          goto JOIN1EF7
        JOIN1EF7:  preds = [*JOIN1EF5,MASSIGN2463]
          int intersectionItter1EF6#1 = phi(intersectionItter1E94)
          self.intersectionItter = intersectionItter1EF6;
          self.s = s1EAC;
          self.e = e1EAB;
          active
        ASSIGN1EFD:  preds = [COND1ECB]
          tensor[2] grad1EFC#1 = <tensor[2]>[_t1E96,_t1E96];
          bool _t1EFE#1 = LT<real>(_t1EC0,eps19D6);
          if _t1EFE then goto ASSIGN261F else goto JOIN2103
        ASSIGN261F:  preds = [COND1F00]
          real mult1F0C#1 = RMul(coeff1D1D,prod1D22);
          real sum1F0F#1 = RAdd(mult1E48,mult1E4C);
          real sum1F10#2 = RAdd(mult1F0C,sum1F0F);
          real mult1F13#4 = RMul(coeff1D2F,prod1D22);
          real sum1F14#1 = RAdd(mult1F13,mult1E4C);
          real basisEval1F18#2 = RMul(coeff1D36,prod1E32);
          real coeff1F19#1 = -0.8e1;
          real mult1F1A#2 = RMul(coeff1D1A,prod1D22);
          real mult1F1B#1 = RMul(coeff1F19,prod1E2F);
          real sum1F1C#1 = RAdd(basisEval1F18,mult1F1B);
          real sum1F1D#1 = RAdd(mult1F1A,sum1F1C);
          real sum1F20#1 = RAdd(mult1F13,mult1E48);
          real mult1F22#2 = RMul(coeff1D36,prod1E2F);
          real sum1F23#1 = RAdd(mult1F1A,mult1F22);
          tensor[6] intermediateCons1F25#1 = <tensor[6]>[sum1F10,sum1F14,_t1E96,mult1E48,basisEval1F18,sum1F1D];
          tensor[6] intermediateCons1F26#1 = <tensor[6]>[sum1F10,_t1E96,sum1F20,mult1E4C,sum1F23,mult1F22];
          real vdot1F51#2 = VDot<6>(dofs1CF7,intermediateCons1F25);
          real vdot1F53#2 = VDot<6>(dofs1CF7,intermediateCons1F26);
          int mulRes1F5C#3 = IMul(_t1A31,ilit1CBE);
          int idx1F5F#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(_t1A2F,mulRes1F5C);
          int addRes1F61#1 = IAdd(mulRes1F5C,ilit1CB8);
          int idx1F62#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(_t1A2F,addRes1F61);
          int addRes1F64#1 = IAdd(mulRes1F5C,ilit1CBB);
          int idx1F65#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(_t1A2F,addRes1F64);
          int mulRes1F78#2 = IMul(ilit1CBB,idx1F5F);
          int addRes1F7B#1 = IAdd(ilit1CB8,mulRes1F78);
          real dof_load1F7C#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1A2F,mulRes1F78);
          real dof_load1F7D#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1A2F,addRes1F7B);
          int mulRes1F80#2 = IMul(ilit1CBB,idx1F62);
          int addRes1F82#1 = IAdd(ilit1CB8,mulRes1F80);
          real dof_load1F83#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1A2F,mulRes1F80);
          real dof_load1F84#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1A2F,addRes1F82);
          int mulRes1F87#2 = IMul(ilit1CBB,idx1F65);
          int addRes1F89#1 = IAdd(ilit1CB8,mulRes1F87);
          real dof_load1F8A#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1A2F,mulRes1F87);
          real dof_load1F8B#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1A2F,addRes1F89);
          real r1FC3#2 = RMul(dof_load1F7C,mult1F13);
          real r1FC6#1 = RMul(dof_load1F83,mult1D23);
          real r1FC9#1 = RMul(dof_load1F8A,_t1E96);
          real r1FCA#1 = RAdd(r1FC3,r1FC6);
          real r1FCB#3 = RAdd(r1FCA,r1FC9);
          real r1FCF#1 = RMul(dof_load1F83,_t1E96);
          real r1FD1#1 = RMul(dof_load1F8A,mult1D23);
          real r1FD2#1 = RAdd(r1FC3,r1FCF);
          real r1FD3#3 = RAdd(r1FD2,r1FD1);
          real r1FD6#2 = RMul(dof_load1F7D,mult1F13);
          real r1FD8#1 = RMul(dof_load1F84,mult1D23);
          real r1FDA#1 = RMul(dof_load1F8B,_t1E96);
          real r1FDB#1 = RAdd(r1FD6,r1FD8);
          real r1FDC#3 = RAdd(r1FDB,r1FDA);
          real r1FDE#1 = RMul(dof_load1F84,_t1E96);
          real r1FDF#1 = RMul(dof_load1F8B,mult1D23);
          real r1FE0#1 = RAdd(r1FD6,r1FDE);
          real r1FE1#3 = RAdd(r1FE0,r1FDF);
          real r200A#1 = RMul(_t1E96,r1FCB);
          real r200D#1 = RMul(coeff1D2F,r1FDC);
          real r200E#2 = RAdd(r200A,r200D);
          real r2010#2 = RMul(_t1E96,r1FD3);
          real r2012#1 = RMul(coeff1D2F,r1FE1);
          real r2013#2 = RAdd(r2010,r2012);
          real r2016#1 = RMul(one1D18,r1FCB);
          real r2017#1 = RMul(_t1E96,r1FDC);
          real r2018#2 = RAdd(r2016,r2017);
          real r2019#1 = RMul(one1D18,r1FD3);
          real r201A#2 = RMul(_t1E96,r1FE1);
          real r201B#2 = RAdd(r2019,r201A);
          tensor[2] probe_l_102034#1 = <tensor[2]>[r1FCB,r1FDC];
          real r208C#1 = RMul(one1D18,r1FE1);
          real r208D#1 = RAdd(r2010,r208C);
          real r208F#1 = RMul(coeff1D2F,r1FD3);
          real r2091#1 = RAdd(r208F,r201A);
          tensor[2] op1_e3_l_122086#1 = <tensor[2]>[r208D,r2091];
          real r20A2#1 = RMul(_t1E96,r200E);
          real r20A5#1 = RMul(coeff1D2F,r2013);
          real r20A6#1 = RAdd(r20A2,r20A5);
          real r20A8#1 = RMul(_t1E96,r2018);
          real r20AA#1 = RMul(coeff1D2F,r201B);
          real r20AB#1 = RAdd(r20A8,r20AA);
          real r20AE#1 = RMul(one1D18,r200E);
          real r20AF#1 = RMul(_t1E96,r2013);
          real r20B0#1 = RAdd(r20AE,r20AF);
          real r20B1#1 = RMul(one1D18,r2018);
          real r20B2#1 = RMul(_t1E96,r201B);
          real r20B3#1 = RAdd(r20B1,r20B2);
          real op1_e3_l_1420CC#4 = VDot<2>(probe_l_102034,op1_e3_l_122086);
          real r20D1#1 = RDiv(r20A6,op1_e3_l_1420CC);
          real r20D3#1 = RDiv(r20AB,op1_e3_l_1420CC);
          real r20D6#1 = RDiv(r20B0,op1_e3_l_1420CC);
          real r20D8#1 = RDiv(r20B3,op1_e3_l_1420CC);
          real r20E9#1 = RMul(vdot1F51,r20D1);
          real r20EC#1 = RMul(vdot1F53,r20D6);
          real r20ED#1 = RAdd(r20E9,r20EC);
          real r20EF#1 = RMul(vdot1F51,r20D3);
          real r20F1#1 = RMul(vdot1F53,r20D8);
          real r20F2#1 = RAdd(r20EF,r20F1);
          tensor[2] grad20E6#1 = <tensor[2]>[r20ED,r20F2];
          goto JOIN2103
        JOIN2103:  preds = [ASSIGN2100,COND1F00]
          tensor[2] grad2101#1 = phi(grad20E6,grad1EFC)
          real out2102#1 = phi(fmVal1E81,out1A08)
          if _t1EB7 then goto ASSIGN2662 else goto JOIN2308
        ASSIGN2662:  preds = [COND2104]
          real mult2110#1 = RMul(coeff1D1D,prod1D22);
          real sum2113#1 = RAdd(mult1D37,mult1D3B);
          real sum2114#2 = RAdd(mult2110,sum2113);
          real mult2117#4 = RMul(coeff1D2F,prod1D22);
          real sum2118#1 = RAdd(mult2117,mult1D3B);
          real basisEval211C#2 = RMul(coeff1D36,prod1D21);
          real coeff211D#1 = -0.8e1;
          real mult211E#2 = RMul(coeff1D1A,prod1D22);
          real mult211F#1 = RMul(coeff211D,prod1D1E);
          real sum2120#1 = RAdd(basisEval211C,mult211F);
          real sum2121#1 = RAdd(mult211E,sum2120);
          real sum2124#1 = RAdd(mult2117,mult1D37);
          real mult2126#2 = RMul(coeff1D36,prod1D1E);
          real sum2127#1 = RAdd(mult211E,mult2126);
          tensor[6] intermediateCons2129#1 = <tensor[6]>[sum2114,sum2118,_t1E96,mult1D37,basisEval211C,sum2121];
          tensor[6] intermediateCons212A#1 = <tensor[6]>[sum2114,_t1E96,sum2124,mult1D3B,sum2127,mult2126];
          real vdot2155#2 = VDot<6>(dofs1CF7,intermediateCons2129);
          real vdot2157#2 = VDot<6>(dofs1CF7,intermediateCons212A);
          int mulRes2160#3 = IMul(_t1A31,ilit1CBE);
          int idx2163#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(_t1A2F,mulRes2160);
          int addRes2165#1 = IAdd(mulRes2160,ilit1CB8);
          int idx2166#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(_t1A2F,addRes2165);
          int addRes2168#1 = IAdd(mulRes2160,ilit1CBB);
          int idx2169#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(_t1A2F,addRes2168);
          int mulRes217C#2 = IMul(ilit1CBB,idx2163);
          int addRes217F#1 = IAdd(ilit1CB8,mulRes217C);
          real dof_load2180#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1A2F,mulRes217C);
          real dof_load2181#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1A2F,addRes217F);
          int mulRes2184#2 = IMul(ilit1CBB,idx2166);
          int addRes2186#1 = IAdd(ilit1CB8,mulRes2184);
          real dof_load2187#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1A2F,mulRes2184);
          real dof_load2188#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1A2F,addRes2186);
          int mulRes218B#2 = IMul(ilit1CBB,idx2169);
          int addRes218D#1 = IAdd(ilit1CB8,mulRes218B);
          real dof_load218E#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1A2F,mulRes218B);
          real dof_load218F#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1A2F,addRes218D);
          real r21C7#2 = RMul(dof_load2180,mult2117);
          real r21CA#1 = RMul(dof_load2187,mult1D23);
          real r21CD#1 = RMul(dof_load218E,_t1E96);
          real r21CE#1 = RAdd(r21C7,r21CA);
          real r21CF#3 = RAdd(r21CE,r21CD);
          real r21D3#1 = RMul(dof_load2187,_t1E96);
          real r21D5#1 = RMul(dof_load218E,mult1D23);
          real r21D6#1 = RAdd(r21C7,r21D3);
          real r21D7#3 = RAdd(r21D6,r21D5);
          real r21DA#2 = RMul(dof_load2181,mult2117);
          real r21DC#1 = RMul(dof_load2188,mult1D23);
          real r21DE#1 = RMul(dof_load218F,_t1E96);
          real r21DF#1 = RAdd(r21DA,r21DC);
          real r21E0#3 = RAdd(r21DF,r21DE);
          real r21E2#1 = RMul(dof_load2188,_t1E96);
          real r21E3#1 = RMul(dof_load218F,mult1D23);
          real r21E4#1 = RAdd(r21DA,r21E2);
          real r21E5#3 = RAdd(r21E4,r21E3);
          real r220E#1 = RMul(_t1E96,r21CF);
          real r2211#1 = RMul(coeff1D2F,r21E0);
          real r2212#2 = RAdd(r220E,r2211);
          real r2214#2 = RMul(_t1E96,r21D7);
          real r2216#1 = RMul(coeff1D2F,r21E5);
          real r2217#2 = RAdd(r2214,r2216);
          real r221A#1 = RMul(one1D18,r21CF);
          real r221B#1 = RMul(_t1E96,r21E0);
          real r221C#2 = RAdd(r221A,r221B);
          real r221D#1 = RMul(one1D18,r21D7);
          real r221E#2 = RMul(_t1E96,r21E5);
          real r221F#2 = RAdd(r221D,r221E);
          tensor[2] probe_l_102238#1 = <tensor[2]>[r21CF,r21E0];
          real r2290#1 = RMul(one1D18,r21E5);
          real r2291#1 = RAdd(r2214,r2290);
          real r2293#1 = RMul(coeff1D2F,r21D7);
          real r2295#1 = RAdd(r2293,r221E);
          tensor[2] op1_e3_l_12228A#1 = <tensor[2]>[r2291,r2295];
          real r22A6#1 = RMul(_t1E96,r2212);
          real r22A9#1 = RMul(coeff1D2F,r2217);
          real r22AA#1 = RAdd(r22A6,r22A9);
          real r22AC#1 = RMul(_t1E96,r221C);
          real r22AE#1 = RMul(coeff1D2F,r221F);
          real r22AF#1 = RAdd(r22AC,r22AE);
          real r22B2#1 = RMul(one1D18,r2212);
          real r22B3#1 = RMul(_t1E96,r2217);
          real r22B4#1 = RAdd(r22B2,r22B3);
          real r22B5#1 = RMul(one1D18,r221C);
          real r22B6#1 = RMul(_t1E96,r221F);
          real r22B7#1 = RAdd(r22B5,r22B6);
          real op1_e3_l_1422D0#4 = VDot<2>(probe_l_102238,op1_e3_l_12228A);
          real r22D5#1 = RDiv(r22AA,op1_e3_l_1422D0);
          real r22D7#1 = RDiv(r22AF,op1_e3_l_1422D0);
          real r22DA#1 = RDiv(r22B4,op1_e3_l_1422D0);
          real r22DC#1 = RDiv(r22B7,op1_e3_l_1422D0);
          real r22ED#1 = RMul(vdot2155,r22D5);
          real r22F0#1 = RMul(vdot2157,r22DA);
          real r22F1#1 = RAdd(r22ED,r22F0);
          real r22F3#1 = RMul(vdot2155,r22D7);
          real r22F5#1 = RMul(vdot2157,r22DC);
          real r22F6#1 = RAdd(r22F3,r22F5);
          tensor[2] grad22EA#1 = <tensor[2]>[r22F1,r22F6];
          goto JOIN2308
        JOIN2308:  preds = [ASSIGN2304,COND2104]
          tensor[2] grad2305#3 = phi(grad22EA,grad2101)
          real cup2306#1 = phi(s1EAC,cup1E13)
          real out2307#3 = phi(faVal1D70,out2102)
          string _t2309#1 = "Out val:";
          Print<[string,real,string]>(_t2309,out2307,_t1A0E);
          string _t230C#1 = "Grad val:";
          Print<[string,tensor[2],string]>(_t230C,grad2305,_t1A0E);
          tensor[3] mcol2311#1 = <tensor[3]>[one1D18,one1D18,one1D18];
          bool _t2313#1 = NEQ<real>(cmin19E0,cmax19E2);
          if _t2313 then goto ASSIGN231A else goto JOIN2397
        ASSIGN231A:  preds = [COND2315]
          real op1_e3_l_52318#1 = RSub(out2307,cmin19E0);
          real op1_e3_l_6231B#1 = RSub(cmax19E2,cmin19E0);
          real op1_e3_l_7231E#1 = RDiv(op1_e3_l_52318,op1_e3_l_6231B);
          real op1_e3_l_82321#1 = RSub(one1D18,coeff1D2F);
          real op1_e3_l_92324#1 = RMul(op1_e3_l_7231E,op1_e3_l_82321);
          real _t2327#1 = RAdd(coeff1D2F,op1_e3_l_92324);
          real Mtransform232A#1 = Transform<IMAGE1D<double[3]>>(cmap19CC);
          real MxPos232C#1 = RMul(Mtransform232A,_t2327);
          real Ttranslate232F#1 = Translate<IMAGE1D<double[3]>>(cmap19CC);
          real imgPos2331#2 = RAdd(MxPos232C,Ttranslate232F);
          real nd2334#2 = Floor<1>(imgPos2331);
          real f2336#2 = RSub(imgPos2331,nd2334);
          int n2339#5 = RealToInt<1>(nd2334);
          bool isInside233D#1 = IndexInside<IMAGE1D<double[3]>,2>(n2339,cmap19CC);
          if isInside233D then goto ASSIGN26B1 else goto ASSIGN26A9
        ASSIGN26B1:  preds = [COND233F]
          int offp2344#3 = IMul(ilit1CBE,n2339);
          real v0_2345#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap19CC,offp2344);
          int addRes2347#1 = IAdd(n2339,ilit1CB8);
          int offp2348#3 = IMul(ilit1CBE,addRes2347);
          real v1_2349#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap19CC,offp2348);
          tensor[2] v_234A#1 = <tensor[2]>[v0_2345,v1_2349];
          int offp234B#1 = IAdd(offp2344,ilit1CB8);
          real v0_234C#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap19CC,offp234B);
          int offp234D#1 = IAdd(offp2348,ilit1CB8);
          real v1_234E#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap19CC,offp234D);
          tensor[2] v_234F#1 = <tensor[2]>[v0_234C,v1_234E];
          int offp2351#1 = IAdd(offp2344,ilit1CBB);
          real v0_2352#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap19CC,offp2351);
          int offp2353#1 = IAdd(offp2348,ilit1CBB);
          real v1_2354#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap19CC,offp2353);
          tensor[2] v_2355#1 = <tensor[2]>[v0_2352,v1_2354];
          tensor[3,2] voxels2356#1 = <tensor[3,2]>[v_234A,v_234F,v_2355];
          goto JOIN2370
        JOIN2370:  preds = [ASSIGN236C,ASSIGN245E]
          tensor[3,2] ldvox236E#3 = phi(voxels2356,voxels2446)
          real idx2373#1 = RSub(f2336,one1D18);
          tensor[2] kernX_2371#1 = <tensor[2]>[f2336,idx2373];
          tensor[2] a02378#1 = <tensor[2]>[one1D18,one1D18];
          tensor[2] a12379#1 = <tensor[2]>[coeff1D2F,one1D18];
          tensor[2] prod1237E#1 = VMul<2>(kernX_2371,a12379);
          tensor[2] kevalX_d0_2377#3 = VAdd<2>(a02378,prod1237E);
          tensor[2] projIx2388#1 = ProjectLast<tensor[3,2],[0]>(ldvox236E);
          real vdot2389#1 = VDot<2>(projIx2388,kevalX_d0_2377);
          tensor[2] projIx238A#1 = ProjectLast<tensor[3,2],[1]>(ldvox236E);
          real vdot238B#1 = VDot<2>(projIx238A,kevalX_d0_2377);
          tensor[2] projIx238C#1 = ProjectLast<tensor[3,2],[2]>(ldvox236E);
          real vdot238D#1 = VDot<2>(projIx238C,kevalX_d0_2377);
          tensor[3] mcol2387#1 = <tensor[3]>[vdot2389,vdot238B,vdot238D];
          goto JOIN2397
        JOIN2397:  preds = [ASSIGN2395,COND2315]
          tensor[3] mcol2396#7 = phi(mcol2387,mcol2311)
          if light19E4 then goto ASSIGN239A else goto ASSIGN2429
        ASSIGN239A:  preds = [COND2398]
          real _t2399#1 = VIndex<2,0>(grad2305);
          real _t239B#1 = VIndex<2,1>(grad2305);
          tensor[3] N239F#2 = <tensor[3]>[_t2399,_t239B,coeff1D2F];
          real _t23A1#1 = VDot<3>(N239F,L19EE);
          real _t23A4#1 = Max<real>(_t1E96,_t23A1);
          real op1_e3_l_723A6#1 = VDot<3>(rayVec19F2,rayVec19F2);
          real op1_e3_l_823A9#1 = Sqrt(op1_e3_l_723A6);
          real op1_e3_l_923AC#1 = RDiv(one1D18,op1_e3_l_823A9);
          tensor[3] op1_e3_l_1023B1#1 = VScale<3>(op1_e3_l_923AC,rayVec19F2);
          tensor[3] op1_e3_l_1123B4#1 = VNeg<3>(op1_e3_l_1023B1);
          tensor[3] op1_e3_l_1723B7#3 = VAdd<3>(op1_e3_l_1123B4,L19EE);
          real op1_e3_l_1923BA#1 = VDot<3>(op1_e3_l_1723B7,op1_e3_l_1723B7);
          real op1_e3_l_2023BD#1 = Sqrt(op1_e3_l_1923BA);
          real op1_e3_l_2723C0#1 = RDiv(one1D18,op1_e3_l_2023BD);
          real op1_e3_l_2823C5#1 = VDot<3>(N239F,op1_e3_l_1723B7);
          real _t23C8#1 = RMul(op1_e3_l_2723C0,op1_e3_l_2823C5);
          real _t23CB#1 = Max<real>(_t1E96,_t23C8);
          real _t23CD#1 = MathFn<pow>(_t23CB,phongSp19EC);
          real op1_e3_l_1723CF#1 = RSub(cup2306,camNearVsp19F4);
          real op1_e3_l_1823D2#1 = RSub(camFarVsp19F6,camNearVsp19F4);
          real op1_e3_l_1923D5#1 = RDiv(op1_e3_l_1723CF,op1_e3_l_1823D2);
          tensor[3] op1_e3_l_2023D8#1 = VSub<3>(mcfar19DE,mcnear19DC);
          tensor[3] op1_e3_l_2123DB#1 = VScale<3>(op1_e3_l_1923D5,op1_e3_l_2023D8);
          tensor[3] op1_e3_l_2223DE#3 = VAdd<3>(mcnear19DC,op1_e3_l_2123DB);
          tensor[3] op1_e3_l_2923E1#1 = VScale<3>(phongKa19E6,mcol2396);
          real r23E5#1 = TensorIndex<tensor[3],[0]>(mcol2396);
          real r23E6#2 = TensorIndex<tensor[3],[0]>(op1_e3_l_2223DE);
          real r23E7#3 = RMul(_t23A4,phongKd19E8);
          real r23E8#1 = RMul(r23E7,r23E5);
          real r23E9#1 = RMul(r23E8,r23E6);
          real r23EA#1 = TensorIndex<tensor[3],[1]>(mcol2396);
          real r23EB#2 = TensorIndex<tensor[3],[1]>(op1_e3_l_2223DE);
          real r23EC#1 = RMul(r23E7,r23EA);
          real r23ED#1 = RMul(r23EC,r23EB);
          real r23EE#1 = TensorIndex<tensor[3],[2]>(mcol2396);
          real r23EF#2 = TensorIndex<tensor[3],[2]>(op1_e3_l_2223DE);
          real r23F0#1 = RMul(r23E7,r23EE);
          real r23F1#1 = RMul(r23F0,r23EF);
          tensor[3] op1_e3_l_3023E4#1 = <tensor[3]>[r23E9,r23ED,r23F1];
          real r2403#3 = RMul(_t23CD,phongKs19EA);
          real r2404#1 = RMul(r2403,r23E6);
          real r2406#1 = RMul(r2403,r23EB);
          real r2408#1 = RMul(r2403,r23EF);
          tensor[3] op1_e3_l_312401#1 = <tensor[3]>[r2404,r2406,r2408];
          tensor[3] v2413#1 = VAdd<3>(op1_e3_l_2923E1,op1_e3_l_3023E4);
          tensor[3] fin2412#3 = VAdd<3>(v2413,op1_e3_l_312401);
          real _t2417#1 = VIndex<3,0>(fin2412);
          real _t2419#1 = VIndex<3,1>(fin2412);
          real _t241B#1 = VIndex<3,2>(fin2412);
          tensor[4] rgba241D#1 = <tensor[4]>[_t2417,_t2419,_t241B,one1D18];
          goto JOIN2421
        JOIN2421:  preds = [ASSIGN26C2,ASSIGN26BB]
          tensor[4] rgba241F#1 = phi(rgba241D,rgba2420)
          self.intersectionItter = _t1EA6;
          self.s = s1EAC;
          self.e = e1EAB;
          self.out = out2307;
          self.rgba = rgba241F;
          stabilize
          goto JOIN1EF5
        ASSIGN2429:  preds = [COND2398]
          real _t2428#1 = VIndex<3,0>(mcol2396);
          real _t242A#1 = VIndex<3,1>(mcol2396);
          real _t242C#1 = VIndex<3,2>(mcol2396);
          tensor[4] rgba2420#1 = <tensor[4]>[_t2428,_t242A,_t242C,one1D18];
          goto JOIN2421
        ASSIGN26A9:  preds = [COND233F]
          int ix2431#1 = ControlIndex<IMAGE1D<double[3]>,clamp,0>(cmap19CC,n2339);
          int offp2433#3 = IMul(ilit1CBE,ix2431);
          real v0_2434#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap19CC,offp2433);
          int addRes2436#1 = IAdd(n2339,ilit1CB8);
          int ix2437#1 = ControlIndex<IMAGE1D<double[3]>,clamp,0>(cmap19CC,addRes2436);
          int offp2438#3 = IMul(ilit1CBE,ix2437);
          real v1_2439#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap19CC,offp2438);
          tensor[2] v_243A#1 = <tensor[2]>[v0_2434,v1_2439];
          int offp243B#1 = IAdd(offp2433,ilit1CB8);
          real v0_243C#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap19CC,offp243B);
          int offp243D#1 = IAdd(offp2438,ilit1CB8);
          real v1_243E#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap19CC,offp243D);
          tensor[2] v_243F#1 = <tensor[2]>[v0_243C,v1_243E];
          int offp2441#1 = IAdd(offp2433,ilit1CBB);
          real v0_2442#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap19CC,offp2441);
          int offp2443#1 = IAdd(offp2438,ilit1CBB);
          real v1_2444#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap19CC,offp2443);
          tensor[2] v_2445#1 = <tensor[2]>[v0_2442,v1_2444];
          tensor[3,2] voxels2446#1 = <tensor[3,2]>[v_243A,v_243F,v_2445];
          goto JOIN2370
        ASSIGN2460:  preds = [COND1EC5]
          bool _t1EC9#1 = false;
          goto JOIN1ECA
        ASSIGN2462:  preds = [COND1EBF]
          string _t2461#1 = "=========\n";
          Print<[string]>(_t2461);
          goto JOIN1EF7
        ASSIGN2466:  preds = [COND1EB9]
          real _t2464#1 = Abs<real>(fm1E8A);
          bool _t2467#1 = LT<real>(_t2464,eps19D6);
          if _t2467 then goto ASSIGN246B else goto ASSIGN246F
        ASSIGN246B:  preds = [COND2469]
          bool _t246A#1 = true;
          goto JOIN246D
        JOIN246D:  preds = [ASSIGN246B,ASSIGN2470]
          bool _t1EBD#1 = phi(_t246A,_t246C)
          goto JOIN1EBE
        ASSIGN246F:  preds = [COND2469]
          int _t246E#1 = 32;
          bool _t246C#1 = GT<int>(intersectionItter1E94,_t246E);
          goto JOIN246D
        COND2471:  preds = [COND1EAA]
          if _t1E98 then goto JOIN2474 else goto ASSIGN2486
        JOIN2474:  preds = [COND2471,JOIN248A]
          int _t2472#1 = phi(ilit1CB8,_t2473)
          if _t1E9E then goto JOIN2478 else goto ASSIGN2480
        JOIN2478:  preds = [COND2475,JOIN2484]
          int _t2476#1 = phi(ilit1CB8,_t2477)
          int _t2479#1 = IMul(_t2472,_t2476);
          bool _t247B#1 = GT<int>(_t2479,_t1EA6);
          if _t247B then goto JOIN247E else goto JOIN247E
        JOIN247E:  preds = [COND247D,COND247D]
          real s1EAD#1 = phi(cup1E13,s1E05)
          goto JOIN1EAE
        ASSIGN2480:  preds = [COND2475]
          bool _t247F#1 = LT<real>(fm1E8A,_t1E96);
          if _t247F then goto ASSIGN2483 else goto JOIN2484
        ASSIGN2483:  preds = [COND2481]
          int _t2482#1 = -1;
          goto JOIN2484
        JOIN2484:  preds = [ASSIGN2483,COND2481]
          int _t2477#1 = phi(_t2482,_t1EA6)
          goto JOIN2478
        ASSIGN2486:  preds = [COND2471]
          bool _t2485#1 = LT<real>(fa1D7D,_t1E96);
          if _t2485 then goto ASSIGN2489 else goto JOIN248A
        ASSIGN2489:  preds = [COND2487]
          int _t2488#1 = -1;
          goto JOIN248A
        JOIN248A:  preds = [ASSIGN2489,COND2487]
          int _t2473#1 = phi(_t2488,_t1EA6)
          goto JOIN2474
        ASSIGN248C:  preds = [COND1EA0]
          bool _t248B#1 = LT<real>(fm1E8A,_t1E96);
          if _t248B then goto ASSIGN248F else goto ASSIGN2492
        ASSIGN248F:  preds = [COND248D]
          int _t248E#1 = -1;
          goto JOIN2491
        JOIN2491:  preds = [ASSIGN248F,ASSIGN2492]
          int _t1EA2#1 = phi(_t248E,_t2490)
          goto JOIN1EA3
        ASSIGN2492:  preds = [COND248D]
          int _t2490#1 = 0;
          goto JOIN2491
        ASSIGN2494:  preds = [COND1E9A]
          bool _t2493#1 = LT<real>(fa1D7D,_t1E96);
          if _t2493 then goto ASSIGN2497 else goto ASSIGN249A
        ASSIGN2497:  preds = [COND2495]
          int _t2496#1 = -1;
          goto JOIN2499
        JOIN2499:  preds = [ASSIGN2497,ASSIGN249A]
          int _t1E9C#1 = phi(_t2496,_t2498)
          goto JOIN1E9D
        ASSIGN249A:  preds = [COND2495]
          int _t2498#1 = 0;
          goto JOIN2499
    end update
  end ray
## initial strand creation
  GRID(2)
    ENTRY249B:  preds = []
      int iresU249C#1 = globals.iresU16FD;
      int iresV249E#1 = globals.iresV16FE;
      int _t24A0#2 = 0;
      int _t24A2#2 = 1;
      int _t24A4#1 = ISub(iresU249C,_t24A2);
      int[] _t24A6#1 = Range(_t24A0,_t24A4);
    FOREACH24A9:  preds = [ASSIGN24A7,NEXT24B2]
      foreach (vi24A8 in _t24A6) on exit goto RETURN24B3
      int _t24AA#1 = ISub(iresV249E,_t24A2);
      int[] _t24AC#1 = Range(_t24A0,_t24AA);
    FOREACH24AF:  preds = [ASSIGN24AD,NEXT24B1]
      foreach (ui24AE in _t24AC) on exit goto NEXT24B2
      new ray(ui24AE,vi24A8);
      goto FOREACH24AF
    NEXT24B2:  preds = [FOREACH24AF]
      goto FOREACH24A9
    RETURN24B3:  preds = [FOREACH24A9]
      return
#### end program ####
##### low-ir: after flatten ####
## properties
  GlobalInit StrandArray HasStartMethod ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[]) HasInputs HasGlobals
## globals
  input isoval16F7 (isoval) = <default>
  input thick16F8 (thick) = <default>
  input camEye16F9 (camEye) = <default>
  input camAt16FA (camAt) = <default>
  input camUp16FB (camUp) = <default>
  input camFOV16FC (camFOV) = <default>
  input iresU16FD (iresU) = <default>
  input iresV16FE (iresV) = <default>
  input camNear16FF (camNear) = <default>
  input camFar1700 (camFar) = <default>
  input refStep1701 (refStep) = <default>
  input rayStep1702 (rayStep) = <default>
  input a1703 (a) = <no-default>
  input 0b0472_intermedateGlobal1704 (b) = <no-default>
  input 0c0474_intermedateGlobal1705 (c) = <no-default>
  input eps1706 (eps) = <default>
  input indecies1707 (indecies) = <no-default>
  input times1708 (times) = <no-default>
  input cells1709 (cells) = <no-default>
  input mcnear170A (mcnear) = <default>
  input mcfar170B (mcfar) = <default>
  input cmap170C (cmap) = image("/home/teocollin/gitcode/diderot/tests/lipRay/find/cmap.nrrd")
  input cmin170D (cmin) = <default>
  input cmax170E (cmax) = <default>
  input light170F (light) = <default>
  input phongKa1710 (phongKa) = <default>
  input phongKd1711 (phongKd) = <default>
  input phongKs1712 (phongKs) = <default>
  input phongSp1713 (phongSp) = <default>
  input maxAlpha1714 (maxAlpha) = <default>
  input lightVsp1715 (lightVsp) = <default>
  global femData:MeshCell[] 0cell_a1716
  global femData:FemFunc c1717
  global real camNearVsp1718
  global real camFarVsp1719
  global tensor[3] camN171A
  global tensor[3] camU171B
  global tensor[3] camV171C
  global real camVmax171D
  global real camUmax171E
  global tensor[3] L171F
## functions
  function femData:MeshPos _0A7F_msh_newtonInverse1A34 (tensor[2] pos1A35#2, int cellInt1A36#2, femData:Mesh mesh1A37#12) {
    ENTRY1A38:  preds = []
      real _t1A39#2 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
      tensor[2] xn1A3B#1 = <tensor[2]>[_t1A39,_t1A39];
      int _t1A3D#1 = 0;
      int _t1A3F#1 = 16;
      int[] _t1A41#1 = Range(_t1A3D,_t1A3F);
    FOREACH1A44:  preds = [ASSIGN1A42,NEXT1C9B]
      foreach (itter1A43 in _t1A41) on exit goto ASSIGN1CA0
        tensor[2] xn1BBB#3 = phi(xn1A3B,xn1C2F)
      int ilit1A46#1 = 3;
      int mulRes1A47#3 = IMul(cellInt1A36,ilit1A46);
      int idx1A4A#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(mesh1A37,mulRes1A47);
      int ilit1A4B#4 = 1;
      int addRes1A4C#1 = IAdd(mulRes1A47,ilit1A4B);
      int idx1A4D#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(mesh1A37,addRes1A4C);
      int ilit1A4E#4 = 2;
      int addRes1A4F#1 = IAdd(mulRes1A47,ilit1A4E);
      int idx1A50#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(mesh1A37,addRes1A4F);
      int mulRes1A63#2 = IMul(ilit1A4E,idx1A4A);
      int addRes1A66#1 = IAdd(ilit1A4B,mulRes1A63);
      real dof_load1A67#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh1A37,mulRes1A63);
      real dof_load1A68#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh1A37,addRes1A66);
      int mulRes1A6B#2 = IMul(ilit1A4E,idx1A4D);
      int addRes1A6D#1 = IAdd(ilit1A4B,mulRes1A6B);
      real dof_load1A6E#3 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh1A37,mulRes1A6B);
      real dof_load1A6F#3 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh1A37,addRes1A6D);
      int mulRes1A72#2 = IMul(ilit1A4E,idx1A50);
      int addRes1A74#1 = IAdd(ilit1A4B,mulRes1A72);
      real dof_load1A75#3 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh1A37,mulRes1A72);
      real dof_load1A76#3 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh1A37,addRes1A74);
      real coeff1A96#8 = -0.1e1;
      real one1A97#15 = 0.1e1;
      real prod1A98#2 = RMul(one1A97,one1A97);
      real basisEval1A99#2 = RMul(coeff1A96,prod1A98);
      real basisEval1A9A#5 = RMul(one1A97,prod1A98);
      real basisEval1A9B#12 = 0.e0;
      real r1AAE#2 = RMul(dof_load1A67,basisEval1A99);
      real r1AB1#1 = RMul(dof_load1A6E,basisEval1A9A);
      real r1AB4#1 = RMul(dof_load1A75,basisEval1A9B);
      real r1AB5#1 = RAdd(r1AAE,r1AB1);
      real r1AB6#3 = RAdd(r1AB5,r1AB4);
      real r1ABA#1 = RMul(dof_load1A6E,basisEval1A9B);
      real r1ABC#1 = RMul(dof_load1A75,basisEval1A9A);
      real r1ABD#1 = RAdd(r1AAE,r1ABA);
      real r1ABE#3 = RAdd(r1ABD,r1ABC);
      real r1AC1#2 = RMul(dof_load1A68,basisEval1A99);
      real r1AC3#1 = RMul(dof_load1A6F,basisEval1A9A);
      real r1AC5#1 = RMul(dof_load1A76,basisEval1A9B);
      real r1AC6#1 = RAdd(r1AC1,r1AC3);
      real r1AC7#3 = RAdd(r1AC6,r1AC5);
      real r1AC9#1 = RMul(dof_load1A6F,basisEval1A9B);
      real r1ACA#1 = RMul(dof_load1A76,basisEval1A9A);
      real r1ACB#1 = RAdd(r1AC1,r1AC9);
      real r1ACC#3 = RAdd(r1ACB,r1ACA);
      real r1AF5#1 = RMul(basisEval1A9B,r1AB6);
      real r1AF8#1 = RMul(coeff1A96,r1AC7);
      real r1AF9#2 = RAdd(r1AF5,r1AF8);
      real r1AFB#2 = RMul(basisEval1A9B,r1ABE);
      real r1AFD#1 = RMul(coeff1A96,r1ACC);
      real r1AFE#2 = RAdd(r1AFB,r1AFD);
      real r1B01#1 = RMul(one1A97,r1AB6);
      real r1B02#1 = RMul(basisEval1A9B,r1AC7);
      real r1B03#2 = RAdd(r1B01,r1B02);
      real r1B04#1 = RMul(one1A97,r1ABE);
      real r1B05#2 = RMul(basisEval1A9B,r1ACC);
      real r1B06#2 = RAdd(r1B04,r1B05);
      tensor[2] probe_l_121B1F#1 = <tensor[2]>[r1AB6,r1AC7];
      real r1B77#1 = RMul(one1A97,r1ACC);
      real r1B78#1 = RAdd(r1AFB,r1B77);
      real r1B7A#1 = RMul(coeff1A96,r1ABE);
      real r1B7C#1 = RAdd(r1B7A,r1B05);
      tensor[2] op1_e3_l_141B71#1 = <tensor[2]>[r1B78,r1B7C];
      real r1B8D#1 = RMul(basisEval1A9B,r1AF9);
      real r1B90#1 = RMul(coeff1A96,r1AFE);
      real r1B91#1 = RAdd(r1B8D,r1B90);
      real r1B93#1 = RMul(basisEval1A9B,r1B03);
      real r1B95#1 = RMul(coeff1A96,r1B06);
      real r1B96#1 = RAdd(r1B93,r1B95);
      real r1B99#1 = RMul(one1A97,r1AF9);
      real r1B9A#1 = RMul(basisEval1A9B,r1AFE);
      real r1B9B#1 = RAdd(r1B99,r1B9A);
      real r1B9C#1 = RMul(one1A97,r1B03);
      real r1B9D#1 = RMul(basisEval1A9B,r1B06);
      real r1B9E#1 = RAdd(r1B9C,r1B9D);
      real op1_e3_l_161BB7#4 = VDot<2>(probe_l_121B1F,op1_e3_l_141B71);
      real varAcc1BBC#1 = VIndex<2,0>(xn1BBB);
      real varAcc1BBD#1 = VIndex<2,1>(xn1BBB);
      real prod1BC1#2 = RMul(varAcc1BBC,one1A97);
      real prod1BC3#2 = RMul(one1A97,varAcc1BBD);
      real mult1BC6#1 = RMul(coeff1A96,prod1BC3);
      real mult1BC7#1 = RMul(coeff1A96,prod1BC1);
      real sum1BC8#1 = RAdd(mult1BC6,mult1BC7);
      real sum1BC9#2 = RAdd(basisEval1A9A,sum1BC8);
      real basisEval1BCB#2 = RMul(one1A97,prod1BC1);
      real basisEval1BCC#2 = RMul(one1A97,prod1BC3);
      real r1BE4#1 = RMul(dof_load1A67,sum1BC9);
      real r1BE7#1 = RMul(dof_load1A6E,basisEval1BCB);
      real r1BEA#1 = RMul(dof_load1A75,basisEval1BCC);
      real r1BEB#1 = RAdd(r1BE4,r1BE7);
      real r1BEC#1 = RAdd(r1BEB,r1BEA);
      real r1BEE#1 = RMul(dof_load1A68,sum1BC9);
      real r1BF0#1 = RMul(dof_load1A6F,basisEval1BCB);
      real r1BF2#1 = RMul(dof_load1A76,basisEval1BCC);
      real r1BF3#1 = RAdd(r1BEE,r1BF0);
      real r1BF4#1 = RAdd(r1BF3,r1BF2);
      tensor[2] probe_l_171BE1#1 = <tensor[2]>[r1BEC,r1BF4];
      real r1C0C#1 = RDiv(r1B91,op1_e3_l_161BB7);
      real r1C0E#1 = RDiv(r1B96,op1_e3_l_161BB7);
      tensor[2] tensor1C0F#1 = <tensor[2]>[r1C0C,r1C0E];
      real r1C11#1 = RDiv(r1B9B,op1_e3_l_161BB7);
      real r1C13#1 = RDiv(r1B9E,op1_e3_l_161BB7);
      tensor[2] tensor1C14#1 = <tensor[2]>[r1C11,r1C13];
      tensor[2] op1_e3_l_191C21#2 = VSub<2>(probe_l_171BE1,pos1A35);
      real vdot1C26#1 = VDot<2>(tensor1C0F,op1_e3_l_191C21);
      real vdot1C28#1 = VDot<2>(tensor1C14,op1_e3_l_191C21);
      tensor[2] op1_e3_l_201C24#3 = <tensor[2]>[vdot1C26,vdot1C28];
      tensor[2] xn1C2F#4 = VSub<2>(xn1BBB,op1_e3_l_201C24);
      real _t1C32#2 = 0.1e-7;
      real _t1C34#1 = RMul(_t1C32,_t1C32);
      real _t1C6E#1 = VDot<2>(op1_e3_l_201C24,op1_e3_l_201C24);
      bool _t1C71#1 = GTE<real>(_t1C34,_t1C6E);
      if _t1C71 then goto ASSIGN1C77 else goto JOIN1C9A
    ASSIGN1C77:  preds = [COND1C73]
      real _t1C76#3 = 0.1e-8;
      real _t1C78#1 = RAdd(one1A97,_t1C76);
      tensor[2] _t1C7B#1 = <tensor[2]>[one1A97,one1A97];
      real _t1C7D#1 = VDot<2>(_t1C7B,xn1C2F);
      bool _t1C80#1 = GT<real>(_t1C78,_t1C7D);
      tensor[2] _t1C82#1 = <tensor[2]>[_t1C76,_t1C76];
      tensor[2] _t1C84#2 = VAdd<2>(_t1C82,xn1C2F);
      real _t1C87#1 = VIndex<2,0>(_t1C84);
      real _t1C89#2 = -0.e0;
      bool _t1C8B#1 = GT<real>(_t1C87,_t1C89);
      real _t1C8D#1 = VIndex<2,1>(_t1C84);
      bool _t1C8F#1 = GT<real>(_t1C8D,_t1C89);
      bool _t1C91#1 = BAnd(_t1C8B,_t1C8F);
      bool _t1C93#1 = BAnd(_t1C80,_t1C91);
      if _t1C93 then goto ASSIGN1C97 else goto ASSIGN1C9D
    ASSIGN1C97:  preds = [COND1C95]
      femData:MeshPos _t1C96#1 = ExtractFemItemN<[femData:Mesh,int,tensor[2],tensor[2]],femData:MeshPos,AllBuild(MeshPos),0000,"",[],int>(mesh1A37,cellInt1A36,xn1C2F,pos1A35);
      return _t1C96
      goto JOIN1C99
    JOIN1C99:  preds = [*RETURN(_t1C96)1C98,*RETURN(_t1C9C)1C9E]
      goto JOIN1C9A
    JOIN1C9A:  preds = [*JOIN1C99,COND1C73]
      goto FOREACH1A44
    ASSIGN1C9D:  preds = [COND1C95]
      femData:MeshPos _t1C9C#1 = ExtractFemItemN<[femData:Mesh],femData:MeshPos,InvalidBuild(MeshPos),0000,"",[],int>(mesh1A37);
      return _t1C9C
      goto JOIN1C99
    ASSIGN1CA0:  preds = [FOREACH1A44]
      femData:MeshPos _t1C9F#1 = ExtractFemItemN<[femData:Mesh],femData:MeshPos,InvalidBuild(MeshPos),0000,"",[],int>(mesh1A37);
      return _t1C9F
}
## input initialization
  ENTRY1722:  preds = []
    real isoval1723#1 = 0.2e0;
    globals.isoval16F7 = isoval1723;
    real thick1726#1 = 0.7e-1;
    globals.thick16F8 = thick1726;
    real _t1729#2 = 0.3e1;
    real _t172B#1 = -0.3e1;
    tensor[3] camEye172D#1 = <tensor[3]>[_t1729,_t172B,_t1729];
    globals.camEye16F9 = camEye172D;
    real _t1730#5 = 0.5e0;
    tensor[3] camAt1732#1 = <tensor[3]>[_t1730,_t1730,_t1730];
    globals.camAt16FA = camAt1732;
    real _t1735#4 = 0.e0;
    real _t1737#7 = 0.1e1;
    tensor[3] camUp1739#2 = <tensor[3]>[_t1735,_t1735,_t1737];
    globals.camUp16FB = camUp1739;
    real camFOV173C#1 = 0.137e2;
    globals.camFOV16FC = camFOV173C;
    int iresU173F#2 = 10;
    globals.iresU16FD = iresU173F;
    globals.iresV16FE = iresU173F;
    real camNear1743#1 = -0.2e1;
    globals.camNear16FF = camNear1743;
    real camFar1746#1 = 0.5e1;
    globals.camFar1700 = camFar1746;
    globals.refStep1701 = _t1737;
    real rayStep174A#1 = 0.1e-1;
    globals.rayStep1702 = rayStep174A;
    real eps174D#1 = 0.1e-5;
    globals.eps1706 = eps174D;
    tensor[3] mcnear1750#2 = <tensor[3]>[_t1737,_t1737,_t1737];
    globals.mcnear170A = mcnear1750;
    globals.mcfar170B = mcnear1750;
    globals.cmin170D = _t1735;
    globals.cmax170E = _t1737;
    bool light1756#1 = true;
    globals.light170F = light1756;
    globals.phongKa1710 = _t1730;
    globals.phongKd1711 = _t1730;
    globals.phongKs1712 = _t1735;
    real phongSp175C#1 = 0.6e2;
    globals.phongSp1713 = phongSp175C;
    globals.maxAlpha1714 = _t1737;
    globals.lightVsp1715 = camUp1739;
    return
## global-variable initialization
  ENTRY1762:  preds = []
    tensor[3] camEye1763#1 = globals.camEye16F9;
    tensor[3] camAt1765#1 = globals.camAt16FA;
    tensor[3] camUp1767#3 = globals.camUp16FB;
    real camFOV1769#1 = globals.camFOV16FC;
    int iresU176B#1 = globals.iresU16FD;
    int iresV176D#1 = globals.iresV16FE;
    real camNear176F#1 = globals.camNear16FF;
    real camFar1771#1 = globals.camFar1700;
    femData:Mesh a1773#3 = globals.a1703;
    femData:Space 0b0472_intermedateGlobal1775#1 = globals.0b0472_intermedateGlobal1704;
    femData:FemFunc 0c0474_intermedateGlobal1777#1 = globals.0c0474_intermedateGlobal1705;
    tensor[3] lightVsp177B#5 = globals.lightVsp1715;
    int _t177D#1 = 0;
    int _t177F#1 = 1;
    int _t1781#1 = ExtractFemItem<int,NumCell(Mesh)>(a1773);
    int _t1783#1 = ISub(_t1781,_t177F);
    int[] _t1785#1 = Range(_t177D,_t1783);
    femData:MeshCell[] _t1787#1 = <femData:MeshCell[]>{};
  FOREACH178A:  preds = [ASSIGN1788,NEXT1790]
    foreach (_t1789 in _t1785) on exit goto GASSIGN1791
      femData:MeshCell[] _t178E#2 = phi(_t1787,_t178D)
    femData:MeshCell _t178B#1 = LoadFem<femData:MeshCell>(a1773,_t1789);
    femData:MeshCell[] _t178D#1 = Append<femData:MeshCell>(_t178E,_t178B);
    goto FOREACH178A
  GASSIGN1791:  preds = [FOREACH178A]
    globals.0cell_a1716 = _t178E;
    femData:Space b1792#1 = LoadFem<femData:Space>(0b0472_intermedateGlobal1775,a1773);
    femData:FemFunc c1794#1 = LoadFem<femData:FemFunc>(0c0474_intermedateGlobal1777,b1792);
    globals.c1717 = c1794;
    tensor[3] op1_e3_l_31797#9 = VSub<3>(camAt1765,camEye1763);
    real op1_e3_l_5179A#1 = VDot<3>(op1_e3_l_31797,op1_e3_l_31797);
    real op1_e3_l_6179D#5 = Sqrt(op1_e3_l_5179A);
    real camNearVsp17A0#1 = RAdd(camNear176F,op1_e3_l_6179D);
    globals.camNearVsp1718 = camNearVsp17A0;
    real camFarVsp17A4#1 = RAdd(camFar1771,op1_e3_l_6179D);
    globals.camFarVsp1719 = camFarVsp17A4;
    real realLit17A9#9 = 0.1e1;
    real op1_e3_l_917A8#6 = RDiv(realLit17A9,op1_e3_l_6179D);
    tensor[3] camN17AD#4 = VScale<3>(op1_e3_l_917A8,op1_e3_l_31797);
    globals.camN171A = camN17AD;
    real realLit17B2#6 = 0.e0;
    real r17B3#3 = TensorIndex<tensor[3],[0]>(camUp1767);
    real r17B4#3 = RMul(realLit17B2,r17B3);
    real r17B5#3 = TensorIndex<tensor[3],[1]>(camUp1767);
    real r17B6#3 = RMul(realLit17B2,r17B5);
    real r17B7#3 = TensorIndex<tensor[3],[2]>(camUp1767);
    real r17B8#5 = RMul(realLit17B2,r17B7);
    real r17B9#3 = RAdd(r17B4,r17B6);
    real r17BA#3 = RAdd(r17B9,r17B8);
    real r17BC#1 = RMul(realLit17A9,r17B7);
    real r17BD#1 = RAdd(r17B9,r17BC);
    real realLit17BE#6 = -0.1e1;
    real r17BF#1 = RMul(realLit17BE,r17B5);
    real r17C0#1 = RAdd(r17B4,r17BF);
    real r17C1#1 = RAdd(r17C0,r17B8);
    tensor[3] tensor17C2#1 = <tensor[3]>[r17BA,r17BD,r17C1];
    real r17C3#1 = RMul(realLit17BE,r17B7);
    real r17C4#1 = RAdd(r17B9,r17C3);
    real r17C5#1 = RMul(realLit17A9,r17B3);
    real r17C6#1 = RAdd(r17C5,r17B6);
    real r17C7#1 = RAdd(r17C6,r17B8);
    tensor[3] tensor17C8#1 = <tensor[3]>[r17C4,r17BA,r17C7];
    real r17C9#1 = RMul(realLit17A9,r17B5);
    real r17CA#1 = RAdd(r17B4,r17C9);
    real r17CB#1 = RAdd(r17CA,r17B8);
    real r17CC#1 = RMul(realLit17BE,r17B3);
    real r17CD#1 = RAdd(r17CC,r17B6);
    real r17CE#1 = RAdd(r17CD,r17B8);
    tensor[3] tensor17CF#1 = <tensor[3]>[r17CB,r17CE,r17BA];
    real vdot17F2#1 = VDot<3>(op1_e3_l_31797,tensor17C2);
    real vdot17F4#1 = VDot<3>(op1_e3_l_31797,tensor17C8);
    real vdot17F6#1 = VDot<3>(op1_e3_l_31797,tensor17CF);
    tensor[3] op1_e3_l_1717F0#6 = <tensor[3]>[vdot17F2,vdot17F4,vdot17F6];
    real op1_e3_l_3417FF#1 = VDot<3>(op1_e3_l_1717F0,op1_e3_l_1717F0);
    real r1803#1 = RMul(op1_e3_l_917A8,op1_e3_l_917A8);
    real op1_e3_l_351802#1 = RMul(r1803,op1_e3_l_3417FF);
    real op1_e3_l_361807#1 = Sqrt(op1_e3_l_351802);
    tensor[3] op1_e3_l_37180A#1 = VScale<3>(op1_e3_l_917A8,op1_e3_l_1717F0);
    real op1_e3_l_38180D#2 = RDiv(realLit17A9,op1_e3_l_361807);
    tensor[3] camU1812#4 = VScale<3>(op1_e3_l_38180D,op1_e3_l_37180A);
    globals.camU171B = camU1812;
    real r1818#3 = TensorIndex<tensor[3],[0]>(op1_e3_l_31797);
    real r1819#3 = RMul(realLit17B2,r1818);
    real r181A#3 = TensorIndex<tensor[3],[1]>(op1_e3_l_31797);
    real r181B#3 = RMul(realLit17B2,r181A);
    real r181C#3 = TensorIndex<tensor[3],[2]>(op1_e3_l_31797);
    real r181D#5 = RMul(realLit17B2,r181C);
    real r181E#3 = RAdd(r1819,r181B);
    real r181F#3 = RAdd(r181E,r181D);
    real r1821#1 = RMul(realLit17A9,r181C);
    real r1822#1 = RAdd(r181E,r1821);
    real r1824#1 = RMul(realLit17BE,r181A);
    real r1825#1 = RAdd(r1819,r1824);
    real r1826#1 = RAdd(r1825,r181D);
    tensor[3] tensor1827#1 = <tensor[3]>[r181F,r1822,r1826];
    real r1828#1 = RMul(realLit17BE,r181C);
    real r1829#1 = RAdd(r181E,r1828);
    real r182A#1 = RMul(realLit17A9,r1818);
    real r182B#1 = RAdd(r182A,r181B);
    real r182C#1 = RAdd(r182B,r181D);
    tensor[3] tensor182D#1 = <tensor[3]>[r1829,r181F,r182C];
    real r182E#1 = RMul(realLit17A9,r181A);
    real r182F#1 = RAdd(r1819,r182E);
    real r1830#1 = RAdd(r182F,r181D);
    real r1831#1 = RMul(realLit17BE,r1818);
    real r1832#1 = RAdd(r1831,r181B);
    real r1833#1 = RAdd(r1832,r181D);
    tensor[3] tensor1834#1 = <tensor[3]>[r1830,r1833,r181F];
    real vdot1857#1 = VDot<3>(op1_e3_l_1717F0,tensor1827);
    real vdot1859#1 = VDot<3>(op1_e3_l_1717F0,tensor182D);
    real vdot185B#1 = VDot<3>(op1_e3_l_1717F0,tensor1834);
    tensor[3] op1_e3_l_471855#1 = <tensor[3]>[vdot1857,vdot1859,vdot185B];
    tensor[3] op1_e3_l_501864#3 = VScale<3>(op1_e3_l_917A8,op1_e3_l_471855);
    real r1868#1 = TensorIndex<tensor[3],[0]>(op1_e3_l_501864);
    real r1869#3 = RMul(op1_e3_l_38180D,op1_e3_l_917A8);
    real r186A#2 = RMul(r1869,r1868);
    real r186B#1 = TensorIndex<tensor[3],[1]>(op1_e3_l_501864);
    real r186C#2 = RMul(r1869,r186B);
    real r186D#1 = TensorIndex<tensor[3],[2]>(op1_e3_l_501864);
    real r186E#2 = RMul(r1869,r186D);
    tensor[3] camV1867#1 = <tensor[3]>[r186A,r186C,r186E];
    globals.camV171C = camV1867;
    real _t1879#1 = 0.314159265358979323846264338327950288e1;
    real _t187B#1 = 0.36e3;
    real op1_e3_l_5187D#1 = RMul(camFOV1769,_t1879);
    real op1_e3_l_61880#1 = RDiv(op1_e3_l_5187D,_t187B);
    real op1_e3_l_101883#2 = Tan(op1_e3_l_61880);
    real camVmax1886#1 = RMul(op1_e3_l_101883,op1_e3_l_6179D);
    globals.camVmax171D = camVmax1886;
    real _t188A#1 = IntToReal(iresU176B);
    real _t188C#1 = IntToReal(iresV176D);
    real r188F#1 = RMul(_t188A,op1_e3_l_101883);
    real op1_e3_l_14188E#1 = RMul(r188F,op1_e3_l_6179D);
    real camUmax1893#1 = RDiv(op1_e3_l_14188E,_t188C);
    globals.camUmax171E = camUmax1893;
    real op1_e3_l_3189D#1 = VDot<3>(lightVsp177B,lightVsp177B);
    real op1_e3_l_418A0#1 = Sqrt(op1_e3_l_3189D);
    real op1_e3_l_518A3#1 = RDiv(realLit17A9,op1_e3_l_418A0);
    real r18A9#1 = VIndex<3,0>(camU1812);
    real r18AA#3 = TensorIndex<tensor[3],[0]>(lightVsp177B);
    real r18AB#1 = RMul(r18A9,r18AA);
    real r18AD#3 = TensorIndex<tensor[3],[1]>(lightVsp177B);
    real r18AE#1 = RMul(r186A,r18AD);
    real r18AF#1 = VIndex<3,0>(camN17AD);
    real r18B0#3 = TensorIndex<tensor[3],[2]>(lightVsp177B);
    real r18B1#1 = RMul(r18AF,r18B0);
    real r18B2#1 = RAdd(r18AB,r18AE);
    real r18B3#1 = RAdd(r18B2,r18B1);
    real r18B4#1 = VIndex<3,1>(camU1812);
    real r18B5#1 = RMul(r18B4,r18AA);
    real r18B7#1 = RMul(r186C,r18AD);
    real r18B8#1 = VIndex<3,1>(camN17AD);
    real r18B9#1 = RMul(r18B8,r18B0);
    real r18BA#1 = RAdd(r18B5,r18B7);
    real r18BB#1 = RAdd(r18BA,r18B9);
    real r18BC#1 = VIndex<3,2>(camU1812);
    real r18BD#1 = RMul(r18BC,r18AA);
    real r18BF#1 = RMul(r186E,r18AD);
    real r18C0#1 = VIndex<3,2>(camN17AD);
    real r18C1#1 = RMul(r18C0,r18B0);
    real r18C2#1 = RAdd(r18BD,r18BF);
    real r18C3#1 = RAdd(r18C2,r18C1);
    tensor[3] op1_e3_l_618A8#1 = <tensor[3]>[r18B3,r18BB,r18C3];
    tensor[3] L18E1#1 = VScale<3>(op1_e3_l_518A3,op1_e3_l_618A8);
    globals.L171F = L18E1;
    return
## strand
  strand ray (int ui18E8#2, int vi18E9#3)
    state:
      real rayU;
      real rayV;
      tensor[3] UV;
      tensor[3] rayOrig;
      tensor[3] rayVec;
      real camNearVsp;
      real camFarVsp;
      int offset;
      int len;
      int itter;
      int intersectionItter;
      int idx;
      tensor[2] interval;
      real s;
      real e;
      femData:MeshCell cc;
      femData:FuncCell fc;
      output real out;
      output tensor[4] rgba;
    state init
      ENTRY18FD:  preds = []
        tensor[3] camEye18FE#1 = globals.camEye16F9;
        int iresU1900#2 = globals.iresU16FD;
        int iresV1902#3 = globals.iresV16FE;
        femData:MeshCell[] 0cell_a1904#1 = globals.0cell_a1716;
        femData:FemFunc c1906#1 = globals.c1717;
        int[] indecies1908#2 = globals.indecies1707;
        tensor[2][] times190A#1 = globals.times1708;
        real camNearVsp190C#1 = globals.camNearVsp1718;
        real camFarVsp190E#1 = globals.camFarVsp1719;
        tensor[3] camN1910#1 = globals.camN171A;
        tensor[3] camU1912#1 = globals.camU171B;
        tensor[3] camV1914#1 = globals.camV171C;
        real camVmax1916#2 = globals.camVmax171D;
        real camUmax1918#2 = globals.camUmax171E;
        real _t191A#4 = -0.5e0;
        real _t191C#1 = IntToReal(ui18E8);
        real _t191E#1 = IntToReal(iresU1900);
        real _t1920#2 = 0.5e0;
        real op1_e3_l_61922#1 = RSub(_t191E,_t1920);
        real op1_e3_l_71925#1 = RSub(_t191C,_t191A);
        real op1_e3_l_81928#1 = RSub(op1_e3_l_61922,_t191A);
        real op1_e3_l_9192B#2 = RNeg(camUmax1918);
        real op1_e3_l_10192E#1 = RDiv(op1_e3_l_71925,op1_e3_l_81928);
        real op1_e3_l_111931#1 = RSub(camUmax1918,op1_e3_l_9192B);
        real op1_e3_l_131934#1 = RMul(op1_e3_l_10192E,op1_e3_l_111931);
        real rayU1937#2 = RAdd(op1_e3_l_9192B,op1_e3_l_131934);
        real _t193A#1 = IntToReal(vi18E9);
        real _t193C#1 = IntToReal(iresV1902);
        real op1_e3_l_6193E#1 = RSub(_t193C,_t1920);
        real op1_e3_l_71941#1 = RSub(_t193A,_t191A);
        real op1_e3_l_81944#1 = RSub(op1_e3_l_6193E,_t191A);
        real op1_e3_l_91947#2 = RNeg(camVmax1916);
        real op1_e3_l_10194A#1 = RDiv(op1_e3_l_71941,op1_e3_l_81944);
        real op1_e3_l_11194D#1 = RSub(camVmax1916,op1_e3_l_91947);
        real op1_e3_l_131950#1 = RMul(op1_e3_l_10194A,op1_e3_l_11194D);
        real rayV1953#2 = RAdd(op1_e3_l_91947,op1_e3_l_131950);
        tensor[3] op1_e3_l_321965#2 = VScale<3>(rayU1937,camU1912);
        tensor[3] op1_e3_l_331968#2 = VScale<3>(rayV1953,camV1914);
        tensor[3] UV196B#1 = VAdd<3>(op1_e3_l_321965,op1_e3_l_331968);
        tensor[3] v196F#1 = VAdd<3>(camEye18FE,op1_e3_l_321965);
        tensor[3] rayOrig196E#1 = VAdd<3>(v196F,op1_e3_l_331968);
        real _t1973#8 = 0.e0;
        tensor[3] _t1975#1 = <tensor[3]>[_t1973,_t1973,_t1973];
        tensor[3] rayVec1977#1 = VAdd<3>(camN1910,_t1975);
        int _t197A#2 = IMul(ui18E8,iresV1902);
        int _t197C#1 = IAdd(_t197A,vi18E9);
        int offset197E#3 = Subscript<int[]>(indecies1908,_t197C);
        int _t1980#1 = IMul(iresU1900,iresV1902);
        int _t1982#1 = IAdd(_t1980,_t197A);
        int _t1984#1 = IAdd(_t1982,vi18E9);
        int len1986#1 = Subscript<int[]>(indecies1908,_t1984);
        int itter1988#3 = 0;
        tensor[2] interval198C#3 = Subscript<tensor[2][]>(times190A,offset197E);
        real s198E#1 = VIndex<2,0>(interval198C);
        real e1990#1 = VIndex<2,1>(interval198C);
        femData:MeshCell cc1992#2 = Subscript<femData:MeshCell[]>(0cell_a1904,itter1988);
        int _t1994#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc1992);
        femData:FuncCell _t1996#1 = LoadFem<femData:FuncCell>(c1906,_t1994);
        tensor[4] rgba1998#1 = <tensor[4]>[_t1973,_t1973,_t1973,_t1973];
        self.rayU = rayU1937;
        self.rayV = rayV1953;
        self.UV = UV196B;
        self.rayOrig = rayOrig196E;
        self.rayVec = rayVec1977;
        self.camNearVsp = camNearVsp190C;
        self.camFarVsp = camFarVsp190E;
        self.offset = offset197E;
        self.len = len1986;
        self.itter = itter1988;
        self.intersectionItter = itter1988;
        self.idx = offset197E;
        self.interval = interval198C;
        self.s = s198E;
        self.e = e1990;
        self.cc = cc1992;
        self.fc = _t1996;
        self.out = _t1973;
        self.rgba = rgba1998;
        return
    end state init
    method start
        ENTRY19AE:  preds = []
          femData:MeshCell[] 0cell_a19AF#1 = globals.0cell_a1716;
          femData:FemFunc c19B1#1 = globals.c1717;
          int[] cells19B3#1 = globals.cells1709;
          int len19B5#1 = self.len;
          int idx19B7#1 = self.idx;
          int _t19B9#1 = 0;
          bool _t19BB#1 = EQ<int>(len19B5,_t19B9);
          if _t19BB then goto STABILIZE19BE else goto JOIN19BF
        STABILIZE19BE:  preds = [COND19BD]
          stabilize
          goto JOIN19BF
        JOIN19BF:  preds = [*STABILIZE19BE,COND19BD]
          int _t19C0#1 = Subscript<int[]>(cells19B3,idx19B7);
          femData:MeshCell cc19C2#2 = Subscript<femData:MeshCell[]>(0cell_a19AF,_t19C0);
          int _t19C4#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc19C2);
          femData:FuncCell _t19C6#1 = LoadFem<femData:FuncCell>(c19B1,_t19C4);
          self.cc = cc19C2;
          self.fc = _t19C6;
          active
    end start
    method update
        ENTRY19CB:  preds = []
          image(IMAGE1D<double[3]>) cmap19CC#17 = globals.cmap170C;
          femData:MeshCell[] 0cell_a19D2#1 = globals.0cell_a1716;
          femData:FemFunc c19D4#1 = globals.c1717;
          real eps19D6#8 = globals.eps1706;
          tensor[2][] times19D8#1 = globals.times1708;
          int[] cells19DA#1 = globals.cells1709;
          tensor[3] mcnear19DC#2 = globals.mcnear170A;
          tensor[3] mcfar19DE#1 = globals.mcfar170B;
          real cmin19E0#3 = globals.cmin170D;
          real cmax19E2#2 = globals.cmax170E;
          bool light19E4#1 = globals.light170F;
          real phongKa19E6#1 = globals.phongKa1710;
          real phongKd19E8#1 = globals.phongKd1711;
          real phongKs19EA#1 = globals.phongKs1712;
          real phongSp19EC#1 = globals.phongSp1713;
          tensor[3] L19EE#2 = globals.L171F;
          tensor[3] rayOrig19F0#3 = self.rayOrig;
          tensor[3] rayVec19F2#6 = self.rayVec;
          real camNearVsp19F4#2 = self.camNearVsp;
          real camFarVsp19F6#1 = self.camFarVsp;
          int offset19F8#1 = self.offset;
          int len19FA#1 = self.len;
          int itter19FC#2 = self.itter;
          int intersectionItter19FE#2 = self.intersectionItter;
          real s1A00#6 = self.s;
          real e1A02#5 = self.e;
          femData:MeshCell cc1A04#2 = self.cc;
          femData:FuncCell fc1A06#2 = self.fc;
          real out1A08#1 = self.out;
          string _t1A0A#1 = "Interval:";
          tensor[2] _t1A0C#1 = <tensor[2]>[s1A00,e1A02];
          string _t1A0E#10 = "\n";
          Print<[string,tensor[2],string]>(_t1A0A,_t1A0C,_t1A0E);
          string _t1A11#1 = "inner itter:";
          Print<[string,int,string]>(_t1A11,intersectionItter19FE,_t1A0E);
          string _t1A14#1 = "Outer itter:";
          Print<[string,int,string]>(_t1A14,itter19FC,_t1A0E);
          real _t1A17#1 = VIndex<3,0>(rayOrig19F0);
          real _t1A19#1 = VIndex<3,1>(rayOrig19F0);
          tensor[2] _t1A1B#3 = <tensor[2]>[_t1A17,_t1A19];
          real _t1A1D#1 = VIndex<3,0>(rayVec19F2);
          real _t1A1F#1 = VIndex<3,1>(rayVec19F2);
          tensor[2] _t1A21#3 = <tensor[2]>[_t1A1D,_t1A1F];
          tensor[2] op1_e3_l_31A23#1 = VScale<2>(s1A00,_t1A21);
          tensor[2] startRay1A26#1 = VAdd<2>(_t1A1B,op1_e3_l_31A23);
          tensor[2] op1_e3_l_31A29#1 = VScale<2>(e1A02,_t1A21);
          tensor[2] endRay1A2C#1 = VAdd<2>(_t1A1B,op1_e3_l_31A29);
          femData:Mesh _t1A2F#21 = ExtractFem<femData:Mesh,femData:MeshCell>(cc1A04);
          int _t1A31#5 = ExtractFemItem<int,CellIndex(MeshCell)>(cc1A04);
          femData:MeshPos callNewtonPos1A33#1 = _0A7F_msh_newtonInverse1A34 (startRay1A26,_t1A31,_t1A2F);
          tensor[2] refPos1CA3#3 = ExtractFemItem<tensor[2],RefPos(Mesh)>(callNewtonPos1A33);
          femData:MeshPos callNewtonPos1CA5#1 = _0A7F_msh_newtonInverse1A34 (endRay1A2C,_t1A31,_t1A2F);
          tensor[2] refPos1CA7#3 = ExtractFemItem<tensor[2],RefPos(Mesh)>(callNewtonPos1CA5);
          string _t1CA9#1 = "inverses:";
          Print<[string,tensor[2],tensor[2],string]>(_t1CA9,refPos1CA3,refPos1CA7,_t1A0E);
          femData:FemFunc _t1CAC#7 = ExtractFem<femData:FemFunc,femData:FuncCell>(fc1A06);
          femData:Space _t1CAE#6 = ExtractFem<femData:Space,femData:FemFunc>(_t1CAC);
          int _t1CB0#1 = ExtractFemItem<int,CellIndex(FuncCell)>(fc1A06);
          int ilit1CB3#1 = 6;
          int mulRes1CB4#6 = IMul(_t1CB0,ilit1CB3);
          int idx1CB7#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1CAE,mulRes1CB4);
          int ilit1CB8#27 = 1;
          int addRes1CB9#1 = IAdd(mulRes1CB4,ilit1CB8);
          int idx1CBA#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1CAE,addRes1CB9);
          int ilit1CBB#13 = 2;
          int addRes1CBC#1 = IAdd(mulRes1CB4,ilit1CBB);
          int idx1CBD#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1CAE,addRes1CBC);
          int ilit1CBE#7 = 3;
          int addRes1CBF#1 = IAdd(mulRes1CB4,ilit1CBE);
          int idx1CC0#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1CAE,addRes1CBF);
          int ilit1CC1#1 = 4;
          int addRes1CC2#1 = IAdd(mulRes1CB4,ilit1CC1);
          int idx1CC3#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1CAE,addRes1CC2);
          int ilit1CC4#1 = 5;
          int addRes1CC5#1 = IAdd(mulRes1CB4,ilit1CC4);
          int idx1CC6#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1CAE,addRes1CC5);
          int mulRes1CE2#1 = IMul(ilit1CB8,idx1CB7);
          int mulRes1CE4#1 = IMul(ilit1CB8,idx1CBA);
          int mulRes1CE7#1 = IMul(ilit1CB8,idx1CBD);
          int mulRes1CEA#1 = IMul(ilit1CB8,idx1CC0);
          int mulRes1CED#1 = IMul(ilit1CB8,idx1CC3);
          int mulRes1CF0#1 = IMul(ilit1CB8,idx1CC6);
          real dof1CF1#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(_t1CAC,mulRes1CE2);
          real dof1CF2#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(_t1CAC,mulRes1CE4);
          real dof1CF3#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(_t1CAC,mulRes1CE7);
          real dof1CF4#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(_t1CAC,mulRes1CEA);
          real dof1CF5#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(_t1CAC,mulRes1CED);
          real dof1CF6#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(_t1CAC,mulRes1CF0);
          tensor[6] dofs1CF7#7 = <tensor[6]>[dof1CF1,dof1CF2,dof1CF3,dof1CF4,dof1CF5,dof1CF6];
          real varAcc1D13#4 = VIndex<2,0>(refPos1CA3);
          real varAcc1D14#4 = VIndex<2,1>(refPos1CA3);
          real coeff1D15#6 = 0.2e1;
          real prod21D17#1 = RMul(varAcc1D13,varAcc1D13);
          real one1D18#37 = 0.1e1;
          real prod1D19#2 = RMul(prod21D17,one1D18);
          real coeff1D1A#11 = 0.4e1;
          real prod1D1C#2 = RMul(varAcc1D13,varAcc1D14);
          real coeff1D1D#8 = -0.3e1;
          real prod1D1E#5 = RMul(varAcc1D13,one1D18);
          real prod21D1F#1 = RMul(varAcc1D14,varAcc1D14);
          real prod1D20#1 = RMul(one1D18,prod21D1F);
          real prod1D21#4 = RMul(one1D18,varAcc1D14);
          real prod1D22#7 = RMul(one1D18,one1D18);
          real mult1D23#11 = RMul(one1D18,prod1D22);
          real mult1D24#1 = RMul(coeff1D1D,prod1D21);
          real mult1D25#2 = RMul(coeff1D15,prod1D20);
          real mult1D26#1 = RMul(coeff1D1D,prod1D1E);
          real mult1D27#2 = RMul(coeff1D1A,prod1D1C);
          real mult1D28#2 = RMul(coeff1D15,prod1D19);
          real sum1D29#1 = RAdd(mult1D27,mult1D28);
          real sum1D2A#1 = RAdd(mult1D26,sum1D29);
          real sum1D2B#1 = RAdd(mult1D25,sum1D2A);
          real sum1D2C#1 = RAdd(mult1D24,sum1D2B);
          real sum1D2D#1 = RAdd(mult1D23,sum1D2C);
          real coeff1D2F#22 = -0.1e1;
          real mult1D30#1 = RMul(coeff1D2F,prod1D1E);
          real sum1D31#1 = RAdd(mult1D30,mult1D28);
          real mult1D33#1 = RMul(coeff1D2F,prod1D21);
          real sum1D34#1 = RAdd(mult1D33,mult1D25);
          real coeff1D36#10 = -0.4e1;
          real mult1D37#4 = RMul(coeff1D1A,prod1D21);
          real mult1D38#2 = RMul(coeff1D36,prod1D1C);
          real sum1D39#1 = RAdd(mult1D37,mult1D38);
          real mult1D3B#4 = RMul(coeff1D1A,prod1D1E);
          real mult1D3C#1 = RMul(coeff1D36,prod1D19);
          real sum1D3D#1 = RAdd(mult1D38,mult1D3C);
          real sum1D3E#1 = RAdd(mult1D3B,sum1D3D);
          tensor[6] intermediateCons1D40#1 = <tensor[6]>[sum1D2D,sum1D31,sum1D34,mult1D27,sum1D39,sum1D3E];
          real faVal1D70#2 = VDot<6>(dofs1CF7,intermediateCons1D40);
          real _t1D73#3 = VIndex<3,2>(rayVec19F2);
          real _t1D75#3 = VIndex<3,2>(rayOrig19F0);
          real op1_e3_l_81D77#1 = RMul(_t1D73,s1A00);
          real op1_e3_l_91D7A#1 = RSub(faVal1D70,op1_e3_l_81D77);
          real fa1D7D#10 = RSub(op1_e3_l_91D7A,_t1D75);
          real varAcc1D81#4 = VIndex<2,0>(refPos1CA7);
          real varAcc1D82#4 = VIndex<2,1>(refPos1CA7);
          real prod21D85#1 = RMul(varAcc1D81,varAcc1D81);
          real prod1D87#2 = RMul(prod21D85,one1D18);
          real prod1D8A#2 = RMul(varAcc1D81,varAcc1D82);
          real prod1D8C#3 = RMul(varAcc1D81,one1D18);
          real prod21D8D#1 = RMul(varAcc1D82,varAcc1D82);
          real prod1D8E#1 = RMul(one1D18,prod21D8D);
          real prod1D8F#3 = RMul(one1D18,varAcc1D82);
          real mult1D92#1 = RMul(coeff1D1D,prod1D8F);
          real mult1D93#2 = RMul(coeff1D15,prod1D8E);
          real mult1D94#1 = RMul(coeff1D1D,prod1D8C);
          real mult1D95#2 = RMul(coeff1D1A,prod1D8A);
          real mult1D96#2 = RMul(coeff1D15,prod1D87);
          real sum1D97#1 = RAdd(mult1D95,mult1D96);
          real sum1D98#1 = RAdd(mult1D94,sum1D97);
          real sum1D99#1 = RAdd(mult1D93,sum1D98);
          real sum1D9A#1 = RAdd(mult1D92,sum1D99);
          real sum1D9B#1 = RAdd(mult1D23,sum1D9A);
          real mult1D9E#1 = RMul(coeff1D2F,prod1D8C);
          real sum1D9F#1 = RAdd(mult1D9E,mult1D96);
          real mult1DA1#1 = RMul(coeff1D2F,prod1D8F);
          real sum1DA2#1 = RAdd(mult1DA1,mult1D93);
          real mult1DA5#1 = RMul(coeff1D1A,prod1D8F);
          real mult1DA6#2 = RMul(coeff1D36,prod1D8A);
          real sum1DA7#1 = RAdd(mult1DA5,mult1DA6);
          real mult1DA9#1 = RMul(coeff1D1A,prod1D8C);
          real mult1DAA#1 = RMul(coeff1D36,prod1D87);
          real sum1DAB#1 = RAdd(mult1DA6,mult1DAA);
          real sum1DAC#1 = RAdd(mult1DA9,sum1DAB);
          tensor[6] intermediateCons1DAE#1 = <tensor[6]>[sum1D9B,sum1D9F,sum1DA2,mult1D95,sum1DA7,sum1DAC];
          real probe_l_71DDE#1 = VDot<6>(dofs1CF7,intermediateCons1DAE);
          real op1_e3_l_81DE1#1 = RMul(_t1D73,e1A02);
          real op1_e3_l_91DE4#1 = RSub(probe_l_71DDE,op1_e3_l_81DE1);
          real fb1DE7#5 = RSub(op1_e3_l_91DE4,_t1D75);
          string _t1DEA#1 = "Vals:";
          tensor[2] _t1DEC#1 = <tensor[2]>[fa1D7D,fb1DE7];
          Print<[string,tensor[2],string]>(_t1DEA,_t1DEC,_t1A0E);
          real op1_e3_l_221DEF#1 = RSub(fa1D7D,fb1DE7);
          real _t1DF2#1 = Abs<real>(op1_e3_l_221DEF);
          bool _t1DF5#1 = LT<real>(_t1DF2,eps19D6);
          if _t1DF5 then goto ASSIGN1DFA else goto JOIN1E06
        ASSIGN1DFA:  preds = [COND1DF7]
          real _t1DF8#1 = Abs<real>(fa1D7D);
          bool _t1DFB#1 = GT<real>(_t1DF8,eps19D6);
          if _t1DFB then goto ASSIGN1E00 else goto JOIN1E04
        ASSIGN1E00:  preds = [COND1DFD]
          real s1DFE#1 = RAdd(s1A00,eps19D6);
          self.s = s1DFE;
          active
          goto JOIN1E04
        JOIN1E04:  preds = [*ACTIVE1E02,COND1DFD]
          real s1E03#1 = phi(s1A00)
          goto JOIN1E06
        JOIN1E06:  preds = [JOIN1E04,COND1DF7]
          real s1E05#3 = phi(s1E03,s1A00)
          real op1_e3_l_381E07#1 = RMul(s1E05,fb1DE7);
          real op1_e3_l_391E0A#1 = RMul(e1A02,fa1D7D);
          real op1_e3_l_481E0D#1 = RSub(op1_e3_l_381E07,op1_e3_l_391E0A);
          real op1_e3_l_491E10#1 = RSub(fb1DE7,fa1D7D);
          real cup1E13#6 = RDiv(op1_e3_l_481E0D,op1_e3_l_491E10);
          string _t1E16#1 = "Mid time:";
          Print<[string,real,string]>(_t1E16,cup1E13,_t1A0E);
          tensor[2] op1_e3_l_531E19#1 = VScale<2>(cup1E13,_t1A21);
          tensor[2] midRay1E1C#1 = VAdd<2>(_t1A1B,op1_e3_l_531E19);
          femData:MeshPos callNewtonPos1E1F#1 = _0A7F_msh_newtonInverse1A34 (midRay1E1C,_t1A31,_t1A2F);
          tensor[2] refPos1E21#2 = ExtractFemItem<tensor[2],RefPos(Mesh)>(callNewtonPos1E1F);
          real varAcc1E24#4 = VIndex<2,0>(refPos1E21);
          real varAcc1E25#4 = VIndex<2,1>(refPos1E21);
          real prod21E28#1 = RMul(varAcc1E24,varAcc1E24);
          real prod1E2A#2 = RMul(prod21E28,one1D18);
          real prod1E2D#2 = RMul(varAcc1E24,varAcc1E25);
          real prod1E2F#5 = RMul(varAcc1E24,one1D18);
          real prod21E30#1 = RMul(varAcc1E25,varAcc1E25);
          real prod1E31#1 = RMul(one1D18,prod21E30);
          real prod1E32#4 = RMul(one1D18,varAcc1E25);
          real mult1E35#1 = RMul(coeff1D1D,prod1E32);
          real mult1E36#2 = RMul(coeff1D15,prod1E31);
          real mult1E37#1 = RMul(coeff1D1D,prod1E2F);
          real mult1E38#2 = RMul(coeff1D1A,prod1E2D);
          real mult1E39#2 = RMul(coeff1D15,prod1E2A);
          real sum1E3A#1 = RAdd(mult1E38,mult1E39);
          real sum1E3B#1 = RAdd(mult1E37,sum1E3A);
          real sum1E3C#1 = RAdd(mult1E36,sum1E3B);
          real sum1E3D#1 = RAdd(mult1E35,sum1E3C);
          real sum1E3E#1 = RAdd(mult1D23,sum1E3D);
          real mult1E41#1 = RMul(coeff1D2F,prod1E2F);
          real sum1E42#1 = RAdd(mult1E41,mult1E39);
          real mult1E44#1 = RMul(coeff1D2F,prod1E32);
          real sum1E45#1 = RAdd(mult1E44,mult1E36);
          real mult1E48#4 = RMul(coeff1D1A,prod1E32);
          real mult1E49#2 = RMul(coeff1D36,prod1E2D);
          real sum1E4A#1 = RAdd(mult1E48,mult1E49);
          real mult1E4C#4 = RMul(coeff1D1A,prod1E2F);
          real mult1E4D#1 = RMul(coeff1D36,prod1E2A);
          real sum1E4E#1 = RAdd(mult1E49,mult1E4D);
          real sum1E4F#1 = RAdd(mult1E4C,sum1E4E);
          tensor[6] intermediateCons1E51#1 = <tensor[6]>[sum1E3E,sum1E42,sum1E45,mult1E38,sum1E4A,sum1E4F];
          real fmVal1E81#2 = VDot<6>(dofs1CF7,intermediateCons1E51);
          real op1_e3_l_581E84#1 = RMul(_t1D73,cup1E13);
          real op1_e3_l_591E87#1 = RSub(fmVal1E81,op1_e3_l_581E84);
          real fm1E8A#6 = RSub(op1_e3_l_591E87,_t1D75);
          string _t1E8D#1 = "all vals:";
          tensor[3] _t1E8F#1 = <tensor[3]>[fa1D7D,fm1E8A,fb1DE7];
          Print<[string,tensor[3],string]>(_t1E8D,_t1E8F,_t1A0E);
          int intersectionItter1E94#2 = IAdd(intersectionItter19FE,ilit1CB8);
          real _t1E96#38 = 0.e0;
          bool _t1E98#2 = GT<real>(fa1D7D,_t1E96);
          if _t1E98 then goto JOIN1E9D else goto ASSIGN2494
        JOIN1E9D:  preds = [COND1E9A,JOIN2499]
          int _t1E9B#1 = phi(ilit1CB8,_t1E9C)
          bool _t1E9E#2 = GT<real>(fm1E8A,_t1E96);
          if _t1E9E then goto JOIN1EA3 else goto ASSIGN248C
        JOIN1EA3:  preds = [COND1EA0,JOIN2491]
          int _t1EA1#1 = phi(ilit1CB8,_t1EA2)
          int _t1EA4#1 = IMul(_t1E9B,_t1EA1);
          int _t1EA6#7 = 0;
          bool _t1EA8#1 = LT<int>(_t1EA4,_t1EA6);
          if _t1EA8 then goto JOIN1EAE else goto COND2471
        JOIN1EAE:  preds = [COND1EAA,JOIN247E]
          real e1EAB#4 = phi(cup1E13,e1A02)
          real s1EAC#5 = phi(s1E05,s1EAD)
          string _t1EAF#1 = "new interval:";
          tensor[2] _t1EB1#1 = <tensor[2]>[s1EAC,e1EAB];
          Print<[string,tensor[2],string]>(_t1EAF,_t1EB1,_t1A0E);
          real _t1EB4#2 = Abs<real>(fa1D7D);
          bool _t1EB7#2 = LT<real>(_t1EB4,eps19D6);
          if _t1EB7 then goto ASSIGN1EBB else goto ASSIGN2466
        ASSIGN1EBB:  preds = [COND1EB9]
          bool _t1EBA#1 = true;
          goto JOIN1EBE
        JOIN1EBE:  preds = [ASSIGN1EBB,JOIN246D]
          bool _t1EBC#1 = phi(_t1EBA,_t1EBD)
          if _t1EBC then goto ASSIGN1EC2 else goto ASSIGN2462
        ASSIGN1EC2:  preds = [COND1EBF]
          real _t1EC0#2 = Abs<real>(fm1E8A);
          bool _t1EC3#1 = GT<real>(_t1EC0,eps19D6);
          if _t1EC3 then goto ASSIGN1EC7 else goto ASSIGN2460
        ASSIGN1EC7:  preds = [COND1EC5]
          bool _t1EC6#1 = GT<real>(_t1EB4,eps19D6);
          goto JOIN1ECA
        JOIN1ECA:  preds = [ASSIGN1EC7,ASSIGN2460]
          bool _t1EC8#1 = phi(_t1EC6,_t1EC9)
          if _t1EC8 then goto ASSIGN26C3 else goto ASSIGN1EFD
        ASSIGN26C3:  preds = [COND1ECB]
          int itter1ECC#4 = IAdd(itter19FC,ilit1CB8);
          bool _t1ECE#1 = GTE<int>(itter1ECC,len19FA);
          if _t1ECE then goto ASSIGN1ED2 else goto JOIN1ED9
        ASSIGN1ED2:  preds = [COND1ED0]
          string _t1ED1#1 = "Fin pixel=============================\n";
          Print<[string]>(_t1ED1);
          self.itter = itter1ECC;
          self.intersectionItter = _t1EA6;
          self.s = s1EAC;
          self.e = e1EAB;
          stabilize
          goto JOIN1ED9
        JOIN1ED9:  preds = [*STABILIZE1ED8,COND1ED0]
          int _t1EDA#2 = IAdd(offset19F8,itter1ECC);
          tensor[2] interval1EDC#3 = Subscript<tensor[2][]>(times19D8,_t1EDA);
          int _t1EDE#1 = Subscript<int[]>(cells19DA,_t1EDA);
          femData:MeshCell cc1EE0#2 = Subscript<femData:MeshCell[]>(0cell_a19D2,_t1EDE);
          real s1EE2#1 = VIndex<2,0>(interval1EDC);
          real e1EE4#1 = VIndex<2,1>(interval1EDC);
          int _t1EE6#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc1EE0);
          femData:FuncCell _t1EE8#1 = LoadFem<femData:FuncCell>(c19D4,_t1EE6);
          string _t1EEA#1 = "Next interval!\n";
          Print<[string]>(_t1EEA);
          self.itter = itter1ECC;
          self.intersectionItter = _t1EA6;
          self.interval = interval1EDC;
          self.s = s1EE2;
          self.e = e1EE4;
          self.cc = cc1EE0;
          self.fc = _t1EE8;
          active
          goto JOIN1EF5
        JOIN1EF5:  preds = [*ACTIVE1EF4,*STABILIZE2427]
          goto JOIN1EF7
        JOIN1EF7:  preds = [*JOIN1EF5,MASSIGN2463]
          int intersectionItter1EF6#1 = phi(intersectionItter1E94)
          self.intersectionItter = intersectionItter1EF6;
          self.s = s1EAC;
          self.e = e1EAB;
          active
        ASSIGN1EFD:  preds = [COND1ECB]
          tensor[2] grad1EFC#1 = <tensor[2]>[_t1E96,_t1E96];
          bool _t1EFE#1 = LT<real>(_t1EC0,eps19D6);
          if _t1EFE then goto ASSIGN261F else goto JOIN2103
        ASSIGN261F:  preds = [COND1F00]
          real mult1F0C#1 = RMul(coeff1D1D,prod1D22);
          real sum1F0F#1 = RAdd(mult1E48,mult1E4C);
          real sum1F10#2 = RAdd(mult1F0C,sum1F0F);
          real mult1F13#4 = RMul(coeff1D2F,prod1D22);
          real sum1F14#1 = RAdd(mult1F13,mult1E4C);
          real basisEval1F18#2 = RMul(coeff1D36,prod1E32);
          real coeff1F19#1 = -0.8e1;
          real mult1F1A#2 = RMul(coeff1D1A,prod1D22);
          real mult1F1B#1 = RMul(coeff1F19,prod1E2F);
          real sum1F1C#1 = RAdd(basisEval1F18,mult1F1B);
          real sum1F1D#1 = RAdd(mult1F1A,sum1F1C);
          real sum1F20#1 = RAdd(mult1F13,mult1E48);
          real mult1F22#2 = RMul(coeff1D36,prod1E2F);
          real sum1F23#1 = RAdd(mult1F1A,mult1F22);
          tensor[6] intermediateCons1F25#1 = <tensor[6]>[sum1F10,sum1F14,_t1E96,mult1E48,basisEval1F18,sum1F1D];
          tensor[6] intermediateCons1F26#1 = <tensor[6]>[sum1F10,_t1E96,sum1F20,mult1E4C,sum1F23,mult1F22];
          real vdot1F51#2 = VDot<6>(dofs1CF7,intermediateCons1F25);
          real vdot1F53#2 = VDot<6>(dofs1CF7,intermediateCons1F26);
          int mulRes1F5C#3 = IMul(_t1A31,ilit1CBE);
          int idx1F5F#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(_t1A2F,mulRes1F5C);
          int addRes1F61#1 = IAdd(mulRes1F5C,ilit1CB8);
          int idx1F62#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(_t1A2F,addRes1F61);
          int addRes1F64#1 = IAdd(mulRes1F5C,ilit1CBB);
          int idx1F65#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(_t1A2F,addRes1F64);
          int mulRes1F78#2 = IMul(ilit1CBB,idx1F5F);
          int addRes1F7B#1 = IAdd(ilit1CB8,mulRes1F78);
          real dof_load1F7C#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1A2F,mulRes1F78);
          real dof_load1F7D#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1A2F,addRes1F7B);
          int mulRes1F80#2 = IMul(ilit1CBB,idx1F62);
          int addRes1F82#1 = IAdd(ilit1CB8,mulRes1F80);
          real dof_load1F83#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1A2F,mulRes1F80);
          real dof_load1F84#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1A2F,addRes1F82);
          int mulRes1F87#2 = IMul(ilit1CBB,idx1F65);
          int addRes1F89#1 = IAdd(ilit1CB8,mulRes1F87);
          real dof_load1F8A#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1A2F,mulRes1F87);
          real dof_load1F8B#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1A2F,addRes1F89);
          real r1FC3#2 = RMul(dof_load1F7C,mult1F13);
          real r1FC6#1 = RMul(dof_load1F83,mult1D23);
          real r1FC9#1 = RMul(dof_load1F8A,_t1E96);
          real r1FCA#1 = RAdd(r1FC3,r1FC6);
          real r1FCB#3 = RAdd(r1FCA,r1FC9);
          real r1FCF#1 = RMul(dof_load1F83,_t1E96);
          real r1FD1#1 = RMul(dof_load1F8A,mult1D23);
          real r1FD2#1 = RAdd(r1FC3,r1FCF);
          real r1FD3#3 = RAdd(r1FD2,r1FD1);
          real r1FD6#2 = RMul(dof_load1F7D,mult1F13);
          real r1FD8#1 = RMul(dof_load1F84,mult1D23);
          real r1FDA#1 = RMul(dof_load1F8B,_t1E96);
          real r1FDB#1 = RAdd(r1FD6,r1FD8);
          real r1FDC#3 = RAdd(r1FDB,r1FDA);
          real r1FDE#1 = RMul(dof_load1F84,_t1E96);
          real r1FDF#1 = RMul(dof_load1F8B,mult1D23);
          real r1FE0#1 = RAdd(r1FD6,r1FDE);
          real r1FE1#3 = RAdd(r1FE0,r1FDF);
          real r200A#1 = RMul(_t1E96,r1FCB);
          real r200D#1 = RMul(coeff1D2F,r1FDC);
          real r200E#2 = RAdd(r200A,r200D);
          real r2010#2 = RMul(_t1E96,r1FD3);
          real r2012#1 = RMul(coeff1D2F,r1FE1);
          real r2013#2 = RAdd(r2010,r2012);
          real r2016#1 = RMul(one1D18,r1FCB);
          real r2017#1 = RMul(_t1E96,r1FDC);
          real r2018#2 = RAdd(r2016,r2017);
          real r2019#1 = RMul(one1D18,r1FD3);
          real r201A#2 = RMul(_t1E96,r1FE1);
          real r201B#2 = RAdd(r2019,r201A);
          tensor[2] probe_l_102034#1 = <tensor[2]>[r1FCB,r1FDC];
          real r208C#1 = RMul(one1D18,r1FE1);
          real r208D#1 = RAdd(r2010,r208C);
          real r208F#1 = RMul(coeff1D2F,r1FD3);
          real r2091#1 = RAdd(r208F,r201A);
          tensor[2] op1_e3_l_122086#1 = <tensor[2]>[r208D,r2091];
          real r20A2#1 = RMul(_t1E96,r200E);
          real r20A5#1 = RMul(coeff1D2F,r2013);
          real r20A6#1 = RAdd(r20A2,r20A5);
          real r20A8#1 = RMul(_t1E96,r2018);
          real r20AA#1 = RMul(coeff1D2F,r201B);
          real r20AB#1 = RAdd(r20A8,r20AA);
          real r20AE#1 = RMul(one1D18,r200E);
          real r20AF#1 = RMul(_t1E96,r2013);
          real r20B0#1 = RAdd(r20AE,r20AF);
          real r20B1#1 = RMul(one1D18,r2018);
          real r20B2#1 = RMul(_t1E96,r201B);
          real r20B3#1 = RAdd(r20B1,r20B2);
          real op1_e3_l_1420CC#4 = VDot<2>(probe_l_102034,op1_e3_l_122086);
          real r20D1#1 = RDiv(r20A6,op1_e3_l_1420CC);
          real r20D3#1 = RDiv(r20AB,op1_e3_l_1420CC);
          real r20D6#1 = RDiv(r20B0,op1_e3_l_1420CC);
          real r20D8#1 = RDiv(r20B3,op1_e3_l_1420CC);
          real r20E9#1 = RMul(vdot1F51,r20D1);
          real r20EC#1 = RMul(vdot1F53,r20D6);
          real r20ED#1 = RAdd(r20E9,r20EC);
          real r20EF#1 = RMul(vdot1F51,r20D3);
          real r20F1#1 = RMul(vdot1F53,r20D8);
          real r20F2#1 = RAdd(r20EF,r20F1);
          tensor[2] grad20E6#1 = <tensor[2]>[r20ED,r20F2];
          goto JOIN2103
        JOIN2103:  preds = [ASSIGN2100,COND1F00]
          tensor[2] grad2101#1 = phi(grad20E6,grad1EFC)
          real out2102#1 = phi(fmVal1E81,out1A08)
          if _t1EB7 then goto ASSIGN2662 else goto JOIN2308
        ASSIGN2662:  preds = [COND2104]
          real mult2110#1 = RMul(coeff1D1D,prod1D22);
          real sum2113#1 = RAdd(mult1D37,mult1D3B);
          real sum2114#2 = RAdd(mult2110,sum2113);
          real mult2117#4 = RMul(coeff1D2F,prod1D22);
          real sum2118#1 = RAdd(mult2117,mult1D3B);
          real basisEval211C#2 = RMul(coeff1D36,prod1D21);
          real coeff211D#1 = -0.8e1;
          real mult211E#2 = RMul(coeff1D1A,prod1D22);
          real mult211F#1 = RMul(coeff211D,prod1D1E);
          real sum2120#1 = RAdd(basisEval211C,mult211F);
          real sum2121#1 = RAdd(mult211E,sum2120);
          real sum2124#1 = RAdd(mult2117,mult1D37);
          real mult2126#2 = RMul(coeff1D36,prod1D1E);
          real sum2127#1 = RAdd(mult211E,mult2126);
          tensor[6] intermediateCons2129#1 = <tensor[6]>[sum2114,sum2118,_t1E96,mult1D37,basisEval211C,sum2121];
          tensor[6] intermediateCons212A#1 = <tensor[6]>[sum2114,_t1E96,sum2124,mult1D3B,sum2127,mult2126];
          real vdot2155#2 = VDot<6>(dofs1CF7,intermediateCons2129);
          real vdot2157#2 = VDot<6>(dofs1CF7,intermediateCons212A);
          int mulRes2160#3 = IMul(_t1A31,ilit1CBE);
          int idx2163#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(_t1A2F,mulRes2160);
          int addRes2165#1 = IAdd(mulRes2160,ilit1CB8);
          int idx2166#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(_t1A2F,addRes2165);
          int addRes2168#1 = IAdd(mulRes2160,ilit1CBB);
          int idx2169#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(_t1A2F,addRes2168);
          int mulRes217C#2 = IMul(ilit1CBB,idx2163);
          int addRes217F#1 = IAdd(ilit1CB8,mulRes217C);
          real dof_load2180#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1A2F,mulRes217C);
          real dof_load2181#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1A2F,addRes217F);
          int mulRes2184#2 = IMul(ilit1CBB,idx2166);
          int addRes2186#1 = IAdd(ilit1CB8,mulRes2184);
          real dof_load2187#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1A2F,mulRes2184);
          real dof_load2188#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1A2F,addRes2186);
          int mulRes218B#2 = IMul(ilit1CBB,idx2169);
          int addRes218D#1 = IAdd(ilit1CB8,mulRes218B);
          real dof_load218E#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1A2F,mulRes218B);
          real dof_load218F#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1A2F,addRes218D);
          real r21C7#2 = RMul(dof_load2180,mult2117);
          real r21CA#1 = RMul(dof_load2187,mult1D23);
          real r21CD#1 = RMul(dof_load218E,_t1E96);
          real r21CE#1 = RAdd(r21C7,r21CA);
          real r21CF#3 = RAdd(r21CE,r21CD);
          real r21D3#1 = RMul(dof_load2187,_t1E96);
          real r21D5#1 = RMul(dof_load218E,mult1D23);
          real r21D6#1 = RAdd(r21C7,r21D3);
          real r21D7#3 = RAdd(r21D6,r21D5);
          real r21DA#2 = RMul(dof_load2181,mult2117);
          real r21DC#1 = RMul(dof_load2188,mult1D23);
          real r21DE#1 = RMul(dof_load218F,_t1E96);
          real r21DF#1 = RAdd(r21DA,r21DC);
          real r21E0#3 = RAdd(r21DF,r21DE);
          real r21E2#1 = RMul(dof_load2188,_t1E96);
          real r21E3#1 = RMul(dof_load218F,mult1D23);
          real r21E4#1 = RAdd(r21DA,r21E2);
          real r21E5#3 = RAdd(r21E4,r21E3);
          real r220E#1 = RMul(_t1E96,r21CF);
          real r2211#1 = RMul(coeff1D2F,r21E0);
          real r2212#2 = RAdd(r220E,r2211);
          real r2214#2 = RMul(_t1E96,r21D7);
          real r2216#1 = RMul(coeff1D2F,r21E5);
          real r2217#2 = RAdd(r2214,r2216);
          real r221A#1 = RMul(one1D18,r21CF);
          real r221B#1 = RMul(_t1E96,r21E0);
          real r221C#2 = RAdd(r221A,r221B);
          real r221D#1 = RMul(one1D18,r21D7);
          real r221E#2 = RMul(_t1E96,r21E5);
          real r221F#2 = RAdd(r221D,r221E);
          tensor[2] probe_l_102238#1 = <tensor[2]>[r21CF,r21E0];
          real r2290#1 = RMul(one1D18,r21E5);
          real r2291#1 = RAdd(r2214,r2290);
          real r2293#1 = RMul(coeff1D2F,r21D7);
          real r2295#1 = RAdd(r2293,r221E);
          tensor[2] op1_e3_l_12228A#1 = <tensor[2]>[r2291,r2295];
          real r22A6#1 = RMul(_t1E96,r2212);
          real r22A9#1 = RMul(coeff1D2F,r2217);
          real r22AA#1 = RAdd(r22A6,r22A9);
          real r22AC#1 = RMul(_t1E96,r221C);
          real r22AE#1 = RMul(coeff1D2F,r221F);
          real r22AF#1 = RAdd(r22AC,r22AE);
          real r22B2#1 = RMul(one1D18,r2212);
          real r22B3#1 = RMul(_t1E96,r2217);
          real r22B4#1 = RAdd(r22B2,r22B3);
          real r22B5#1 = RMul(one1D18,r221C);
          real r22B6#1 = RMul(_t1E96,r221F);
          real r22B7#1 = RAdd(r22B5,r22B6);
          real op1_e3_l_1422D0#4 = VDot<2>(probe_l_102238,op1_e3_l_12228A);
          real r22D5#1 = RDiv(r22AA,op1_e3_l_1422D0);
          real r22D7#1 = RDiv(r22AF,op1_e3_l_1422D0);
          real r22DA#1 = RDiv(r22B4,op1_e3_l_1422D0);
          real r22DC#1 = RDiv(r22B7,op1_e3_l_1422D0);
          real r22ED#1 = RMul(vdot2155,r22D5);
          real r22F0#1 = RMul(vdot2157,r22DA);
          real r22F1#1 = RAdd(r22ED,r22F0);
          real r22F3#1 = RMul(vdot2155,r22D7);
          real r22F5#1 = RMul(vdot2157,r22DC);
          real r22F6#1 = RAdd(r22F3,r22F5);
          tensor[2] grad22EA#1 = <tensor[2]>[r22F1,r22F6];
          goto JOIN2308
        JOIN2308:  preds = [ASSIGN2304,COND2104]
          tensor[2] grad2305#3 = phi(grad22EA,grad2101)
          real cup2306#1 = phi(s1EAC,cup1E13)
          real out2307#3 = phi(faVal1D70,out2102)
          string _t2309#1 = "Out val:";
          Print<[string,real,string]>(_t2309,out2307,_t1A0E);
          string _t230C#1 = "Grad val:";
          Print<[string,tensor[2],string]>(_t230C,grad2305,_t1A0E);
          tensor[3] mcol2311#1 = <tensor[3]>[one1D18,one1D18,one1D18];
          bool _t2313#1 = NEQ<real>(cmin19E0,cmax19E2);
          if _t2313 then goto ASSIGN231A else goto JOIN2397
        ASSIGN231A:  preds = [COND2315]
          real op1_e3_l_52318#1 = RSub(out2307,cmin19E0);
          real op1_e3_l_6231B#1 = RSub(cmax19E2,cmin19E0);
          real op1_e3_l_7231E#1 = RDiv(op1_e3_l_52318,op1_e3_l_6231B);
          real op1_e3_l_82321#1 = RSub(one1D18,coeff1D2F);
          real op1_e3_l_92324#1 = RMul(op1_e3_l_7231E,op1_e3_l_82321);
          real _t2327#1 = RAdd(coeff1D2F,op1_e3_l_92324);
          real Mtransform232A#1 = Transform<IMAGE1D<double[3]>>(cmap19CC);
          real MxPos232C#1 = RMul(Mtransform232A,_t2327);
          real Ttranslate232F#1 = Translate<IMAGE1D<double[3]>>(cmap19CC);
          real imgPos2331#2 = RAdd(MxPos232C,Ttranslate232F);
          real nd2334#2 = Floor<1>(imgPos2331);
          real f2336#2 = RSub(imgPos2331,nd2334);
          int n2339#5 = RealToInt<1>(nd2334);
          bool isInside233D#1 = IndexInside<IMAGE1D<double[3]>,2>(n2339,cmap19CC);
          if isInside233D then goto ASSIGN26B1 else goto ASSIGN26A9
        ASSIGN26B1:  preds = [COND233F]
          int offp2344#3 = IMul(ilit1CBE,n2339);
          real v0_2345#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap19CC,offp2344);
          int addRes2347#1 = IAdd(n2339,ilit1CB8);
          int offp2348#3 = IMul(ilit1CBE,addRes2347);
          real v1_2349#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap19CC,offp2348);
          int offp234B#1 = IAdd(offp2344,ilit1CB8);
          real v0_234C#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap19CC,offp234B);
          int offp234D#1 = IAdd(offp2348,ilit1CB8);
          real v1_234E#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap19CC,offp234D);
          int offp2351#1 = IAdd(offp2344,ilit1CBB);
          real v0_2352#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap19CC,offp2351);
          int offp2353#1 = IAdd(offp2348,ilit1CBB);
          real v1_2354#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap19CC,offp2353);
          tensor[3,2] voxels2356#1 = <tensor[3,2]>[v0_2345,v1_2349,v0_234C,v1_234E,v0_2352,v1_2354];
          goto JOIN2370
        JOIN2370:  preds = [ASSIGN26C4,ASSIGN26C5]
          tensor[3,2] ldvox236E#3 = phi(voxels2356,voxels2446)
          real idx2373#1 = RSub(f2336,one1D18);
          tensor[2] kernX_2371#1 = <tensor[2]>[f2336,idx2373];
          tensor[2] a02378#1 = <tensor[2]>[one1D18,one1D18];
          tensor[2] a12379#1 = <tensor[2]>[coeff1D2F,one1D18];
          tensor[2] prod1237E#1 = VMul<2>(kernX_2371,a12379);
          tensor[2] kevalX_d0_2377#3 = VAdd<2>(a02378,prod1237E);
          tensor[2] projIx2388#1 = ProjectLast<tensor[3,2],[0]>(ldvox236E);
          real vdot2389#1 = VDot<2>(projIx2388,kevalX_d0_2377);
          tensor[2] projIx238A#1 = ProjectLast<tensor[3,2],[1]>(ldvox236E);
          real vdot238B#1 = VDot<2>(projIx238A,kevalX_d0_2377);
          tensor[2] projIx238C#1 = ProjectLast<tensor[3,2],[2]>(ldvox236E);
          real vdot238D#1 = VDot<2>(projIx238C,kevalX_d0_2377);
          tensor[3] mcol2387#1 = <tensor[3]>[vdot2389,vdot238B,vdot238D];
          goto JOIN2397
        JOIN2397:  preds = [ASSIGN2395,COND2315]
          tensor[3] mcol2396#7 = phi(mcol2387,mcol2311)
          if light19E4 then goto ASSIGN239A else goto ASSIGN2429
        ASSIGN239A:  preds = [COND2398]
          real _t2399#1 = VIndex<2,0>(grad2305);
          real _t239B#1 = VIndex<2,1>(grad2305);
          tensor[3] N239F#2 = <tensor[3]>[_t2399,_t239B,coeff1D2F];
          real _t23A1#1 = VDot<3>(N239F,L19EE);
          real _t23A4#1 = Max<real>(_t1E96,_t23A1);
          real op1_e3_l_723A6#1 = VDot<3>(rayVec19F2,rayVec19F2);
          real op1_e3_l_823A9#1 = Sqrt(op1_e3_l_723A6);
          real op1_e3_l_923AC#1 = RDiv(one1D18,op1_e3_l_823A9);
          tensor[3] op1_e3_l_1023B1#1 = VScale<3>(op1_e3_l_923AC,rayVec19F2);
          tensor[3] op1_e3_l_1123B4#1 = VNeg<3>(op1_e3_l_1023B1);
          tensor[3] op1_e3_l_1723B7#3 = VAdd<3>(op1_e3_l_1123B4,L19EE);
          real op1_e3_l_1923BA#1 = VDot<3>(op1_e3_l_1723B7,op1_e3_l_1723B7);
          real op1_e3_l_2023BD#1 = Sqrt(op1_e3_l_1923BA);
          real op1_e3_l_2723C0#1 = RDiv(one1D18,op1_e3_l_2023BD);
          real op1_e3_l_2823C5#1 = VDot<3>(N239F,op1_e3_l_1723B7);
          real _t23C8#1 = RMul(op1_e3_l_2723C0,op1_e3_l_2823C5);
          real _t23CB#1 = Max<real>(_t1E96,_t23C8);
          real _t23CD#1 = MathFn<pow>(_t23CB,phongSp19EC);
          real op1_e3_l_1723CF#1 = RSub(cup2306,camNearVsp19F4);
          real op1_e3_l_1823D2#1 = RSub(camFarVsp19F6,camNearVsp19F4);
          real op1_e3_l_1923D5#1 = RDiv(op1_e3_l_1723CF,op1_e3_l_1823D2);
          tensor[3] op1_e3_l_2023D8#1 = VSub<3>(mcfar19DE,mcnear19DC);
          tensor[3] op1_e3_l_2123DB#1 = VScale<3>(op1_e3_l_1923D5,op1_e3_l_2023D8);
          tensor[3] op1_e3_l_2223DE#3 = VAdd<3>(mcnear19DC,op1_e3_l_2123DB);
          tensor[3] op1_e3_l_2923E1#1 = VScale<3>(phongKa19E6,mcol2396);
          real r23E5#1 = TensorIndex<tensor[3],[0]>(mcol2396);
          real r23E6#2 = TensorIndex<tensor[3],[0]>(op1_e3_l_2223DE);
          real r23E7#3 = RMul(_t23A4,phongKd19E8);
          real r23E8#1 = RMul(r23E7,r23E5);
          real r23E9#1 = RMul(r23E8,r23E6);
          real r23EA#1 = TensorIndex<tensor[3],[1]>(mcol2396);
          real r23EB#2 = TensorIndex<tensor[3],[1]>(op1_e3_l_2223DE);
          real r23EC#1 = RMul(r23E7,r23EA);
          real r23ED#1 = RMul(r23EC,r23EB);
          real r23EE#1 = TensorIndex<tensor[3],[2]>(mcol2396);
          real r23EF#2 = TensorIndex<tensor[3],[2]>(op1_e3_l_2223DE);
          real r23F0#1 = RMul(r23E7,r23EE);
          real r23F1#1 = RMul(r23F0,r23EF);
          tensor[3] op1_e3_l_3023E4#1 = <tensor[3]>[r23E9,r23ED,r23F1];
          real r2403#3 = RMul(_t23CD,phongKs19EA);
          real r2404#1 = RMul(r2403,r23E6);
          real r2406#1 = RMul(r2403,r23EB);
          real r2408#1 = RMul(r2403,r23EF);
          tensor[3] op1_e3_l_312401#1 = <tensor[3]>[r2404,r2406,r2408];
          tensor[3] v2413#1 = VAdd<3>(op1_e3_l_2923E1,op1_e3_l_3023E4);
          tensor[3] fin2412#3 = VAdd<3>(v2413,op1_e3_l_312401);
          real _t2417#1 = VIndex<3,0>(fin2412);
          real _t2419#1 = VIndex<3,1>(fin2412);
          real _t241B#1 = VIndex<3,2>(fin2412);
          tensor[4] rgba241D#1 = <tensor[4]>[_t2417,_t2419,_t241B,one1D18];
          goto JOIN2421
        JOIN2421:  preds = [ASSIGN26C2,ASSIGN26BB]
          tensor[4] rgba241F#1 = phi(rgba241D,rgba2420)
          self.intersectionItter = _t1EA6;
          self.s = s1EAC;
          self.e = e1EAB;
          self.out = out2307;
          self.rgba = rgba241F;
          stabilize
          goto JOIN1EF5
        ASSIGN2429:  preds = [COND2398]
          real _t2428#1 = VIndex<3,0>(mcol2396);
          real _t242A#1 = VIndex<3,1>(mcol2396);
          real _t242C#1 = VIndex<3,2>(mcol2396);
          tensor[4] rgba2420#1 = <tensor[4]>[_t2428,_t242A,_t242C,one1D18];
          goto JOIN2421
        ASSIGN26A9:  preds = [COND233F]
          int ix2431#1 = ControlIndex<IMAGE1D<double[3]>,clamp,0>(cmap19CC,n2339);
          int offp2433#3 = IMul(ilit1CBE,ix2431);
          real v0_2434#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap19CC,offp2433);
          int addRes2436#1 = IAdd(n2339,ilit1CB8);
          int ix2437#1 = ControlIndex<IMAGE1D<double[3]>,clamp,0>(cmap19CC,addRes2436);
          int offp2438#3 = IMul(ilit1CBE,ix2437);
          real v1_2439#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap19CC,offp2438);
          int offp243B#1 = IAdd(offp2433,ilit1CB8);
          real v0_243C#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap19CC,offp243B);
          int offp243D#1 = IAdd(offp2438,ilit1CB8);
          real v1_243E#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap19CC,offp243D);
          int offp2441#1 = IAdd(offp2433,ilit1CBB);
          real v0_2442#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap19CC,offp2441);
          int offp2443#1 = IAdd(offp2438,ilit1CBB);
          real v1_2444#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap19CC,offp2443);
          tensor[3,2] voxels2446#1 = <tensor[3,2]>[v0_2434,v1_2439,v0_243C,v1_243E,v0_2442,v1_2444];
          goto JOIN2370
        ASSIGN2460:  preds = [COND1EC5]
          bool _t1EC9#1 = false;
          goto JOIN1ECA
        ASSIGN2462:  preds = [COND1EBF]
          string _t2461#1 = "=========\n";
          Print<[string]>(_t2461);
          goto JOIN1EF7
        ASSIGN2466:  preds = [COND1EB9]
          real _t2464#1 = Abs<real>(fm1E8A);
          bool _t2467#1 = LT<real>(_t2464,eps19D6);
          if _t2467 then goto ASSIGN246B else goto ASSIGN246F
        ASSIGN246B:  preds = [COND2469]
          bool _t246A#1 = true;
          goto JOIN246D
        JOIN246D:  preds = [ASSIGN246B,ASSIGN2470]
          bool _t1EBD#1 = phi(_t246A,_t246C)
          goto JOIN1EBE
        ASSIGN246F:  preds = [COND2469]
          int _t246E#1 = 32;
          bool _t246C#1 = GT<int>(intersectionItter1E94,_t246E);
          goto JOIN246D
        COND2471:  preds = [COND1EAA]
          if _t1E98 then goto JOIN2474 else goto ASSIGN2486
        JOIN2474:  preds = [COND2471,JOIN248A]
          int _t2472#1 = phi(ilit1CB8,_t2473)
          if _t1E9E then goto JOIN2478 else goto ASSIGN2480
        JOIN2478:  preds = [COND2475,JOIN2484]
          int _t2476#1 = phi(ilit1CB8,_t2477)
          int _t2479#1 = IMul(_t2472,_t2476);
          bool _t247B#1 = GT<int>(_t2479,_t1EA6);
          if _t247B then goto JOIN247E else goto JOIN247E
        JOIN247E:  preds = [COND247D,COND247D]
          real s1EAD#1 = phi(cup1E13,s1E05)
          goto JOIN1EAE
        ASSIGN2480:  preds = [COND2475]
          bool _t247F#1 = LT<real>(fm1E8A,_t1E96);
          if _t247F then goto ASSIGN2483 else goto JOIN2484
        ASSIGN2483:  preds = [COND2481]
          int _t2482#1 = -1;
          goto JOIN2484
        JOIN2484:  preds = [ASSIGN2483,COND2481]
          int _t2477#1 = phi(_t2482,_t1EA6)
          goto JOIN2478
        ASSIGN2486:  preds = [COND2471]
          bool _t2485#1 = LT<real>(fa1D7D,_t1E96);
          if _t2485 then goto ASSIGN2489 else goto JOIN248A
        ASSIGN2489:  preds = [COND2487]
          int _t2488#1 = -1;
          goto JOIN248A
        JOIN248A:  preds = [ASSIGN2489,COND2487]
          int _t2473#1 = phi(_t2488,_t1EA6)
          goto JOIN2474
        ASSIGN248C:  preds = [COND1EA0]
          bool _t248B#1 = LT<real>(fm1E8A,_t1E96);
          if _t248B then goto ASSIGN248F else goto ASSIGN2492
        ASSIGN248F:  preds = [COND248D]
          int _t248E#1 = -1;
          goto JOIN2491
        JOIN2491:  preds = [ASSIGN248F,ASSIGN2492]
          int _t1EA2#1 = phi(_t248E,_t2490)
          goto JOIN1EA3
        ASSIGN2492:  preds = [COND248D]
          int _t2490#1 = 0;
          goto JOIN2491
        ASSIGN2494:  preds = [COND1E9A]
          bool _t2493#1 = LT<real>(fa1D7D,_t1E96);
          if _t2493 then goto ASSIGN2497 else goto ASSIGN249A
        ASSIGN2497:  preds = [COND2495]
          int _t2496#1 = -1;
          goto JOIN2499
        JOIN2499:  preds = [ASSIGN2497,ASSIGN249A]
          int _t1E9C#1 = phi(_t2496,_t2498)
          goto JOIN1E9D
        ASSIGN249A:  preds = [COND2495]
          int _t2498#1 = 0;
          goto JOIN2499
    end update
  end ray
## initial strand creation
  GRID(2)
    ENTRY249B:  preds = []
      int iresU249C#1 = globals.iresU16FD;
      int iresV249E#1 = globals.iresV16FE;
      int _t24A0#2 = 0;
      int _t24A2#2 = 1;
      int _t24A4#1 = ISub(iresU249C,_t24A2);
      int[] _t24A6#1 = Range(_t24A0,_t24A4);
    FOREACH24A9:  preds = [ASSIGN24A7,NEXT24B2]
      foreach (vi24A8 in _t24A6) on exit goto RETURN24B3
      int _t24AA#1 = ISub(iresV249E,_t24A2);
      int[] _t24AC#1 = Range(_t24A0,_t24AA);
    FOREACH24AF:  preds = [ASSIGN24AD,NEXT24B1]
      foreach (ui24AE in _t24AC) on exit goto NEXT24B2
      new ray(ui24AE,vi24A8);
      goto FOREACH24AF
    NEXT24B2:  preds = [FOREACH24AF]
      goto FOREACH24A9
    RETURN24B3:  preds = [FOREACH24A9]
      return
#### end program ####
##### TreeIR: after low-to-tree translation ####
//***** PROPERTIES *****
  GlobalInit StrandArray HasStartMethod ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[]) HasInputs HasGlobals
//***** CONSTS *****
//***** INPUTS *****
input real isoval;
input real thick;
input tensor[3] camEye;
input tensor[3] camAt;
input tensor[3] camUp;
input real camFOV;
input int iresU;
input int iresV;
input real camNear;
input real camFar;
input real refStep;
input real rayStep;
input femData(Mesh) a;
input femData(Space) 0b0472_intermedateGlobal;
input femData(FemFunc) 0c0474_intermedateGlobal;
input real eps;
input int[] indecies;
input tensor[2][] times;
input int[] cells;
input tensor[3] mcnear;
input tensor[3] mcfar;
input image(IMAGE1D<double[3]>) cmap;
input real cmin;
input real cmax;
input bool light;
input real phongKa;
input real phongKd;
input real phongKs;
input real phongSp;
input real maxAlpha;
input tensor[3] lightVsp;
//***** CONST INIT *****
  {
    globals.isoval = 0.2e0;
    globals.thick = 0.7e-1;
    globals.camEye = PACK(VEC3{4}(0.3e1,-0.3e1,0.3e1));
    globals.camAt = PACK(VEC3{4}(0.5e0,0.5e0,0.5e0));
    vec3{4} v_2 = VEC3{4}(0.e0,0.e0,0.1e1);
    globals.camUp = PACK(v_2);
    globals.camFOV = 0.137e2;
    globals.iresU = 10;
    globals.iresV = 10;
    globals.camNear = -0.2e1;
    globals.camFar = 0.5e1;
    globals.refStep = 0.1e1;
    globals.rayStep = 0.1e-1;
    globals.eps = 0.1e-5;
    vec3{4} v_4 = VEC3{4}(0.1e1,0.1e1,0.1e1);
    globals.mcnear = PACK(v_4);
    globals.mcfar = PACK(v_4);
    globals.cmin = 0.e0;
    globals.cmax = 0.1e1;
    globals.light = true;
    globals.phongKa = 0.5e0;
    globals.phongKd = 0.5e0;
    globals.phongKs = 0.e0;
    globals.phongSp = 0.6e2;
    globals.maxAlpha = 0.1e1;
    globals.lightVsp = PACK(v_2);
  }
//***** GLOBALS *****
global femData(MeshCell)[] 0cell_a;
global femData(FemFunc) c;
global real camNearVsp;
global real camFarVsp;
global tensor[3] camN;
global tensor[3] camU;
global tensor[3] camV;
global real camVmax;
global real camUmax;
global tensor[3] L;
//***** FUNCTIONS *****
  function femData(MeshPos) _0A7F_msh_newtonInverse (&tensor[2] p_pos_8,int p_cellInt_9,femData(Mesh) p_mesh_10) {
    vec2 v_11;
    v_11 = VEC2(0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0,0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0);
    for i_itter_12 = 0 to 16 {
      int l_mulRes_13 = IMul(p_cellInt_9,3);
      int t_14 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(p_mesh_10,l_mulRes_13);
      int l_mulRes_15 = IMul(2,t_14);
      real l_dof_load_16 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(p_mesh_10,l_mulRes_15);
      real l_dof_load_17 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(p_mesh_10,IAdd(1,l_mulRes_15));
      int t_18 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(p_mesh_10,IAdd(l_mulRes_13,1));
      int l_mulRes_19 = IMul(2,t_18);
      real l_dof_load_20 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(p_mesh_10,l_mulRes_19);
      real l_dof_load_21 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(p_mesh_10,IAdd(1,l_mulRes_19));
      int t_22 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(p_mesh_10,IAdd(l_mulRes_13,2));
      int l_mulRes_23 = IMul(2,t_22);
      real l_dof_load_24 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(p_mesh_10,l_mulRes_23);
      real l_dof_load_25 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(p_mesh_10,IAdd(1,l_mulRes_23));
      real l_prod_26 = RMul(0.1e1,0.1e1);
      real l_basisEval_27 = RMul(-0.1e1,l_prod_26);
      real l_basisEval_28 = RMul(0.1e1,l_prod_26);
      real l_r_29 = RMul(l_dof_load_16,l_basisEval_27);
      real l_r_30 = RAdd(RAdd(l_r_29,RMul(l_dof_load_20,l_basisEval_28)),RMul(l_dof_load_24,0.e0));
      real l_r_31 = RAdd(RAdd(l_r_29,RMul(l_dof_load_20,0.e0)),RMul(l_dof_load_24,l_basisEval_28));
      real l_r_32 = RMul(l_dof_load_17,l_basisEval_27);
      real l_r_33 = RAdd(RAdd(l_r_32,RMul(l_dof_load_21,l_basisEval_28)),RMul(l_dof_load_25,0.e0));
      real l_r_34 = RAdd(RAdd(l_r_32,RMul(l_dof_load_21,0.e0)),RMul(l_dof_load_25,l_basisEval_28));
      real l_r_35 = RAdd(RMul(0.e0,l_r_30),RMul(-0.1e1,l_r_33));
      real l_r_36 = RMul(0.e0,l_r_31);
      real l_r_37 = RAdd(l_r_36,RMul(-0.1e1,l_r_34));
      real l_r_38 = RAdd(RMul(0.1e1,l_r_30),RMul(0.e0,l_r_33));
      real l_r_39 = RMul(0.e0,l_r_34);
      real l_r_40 = RAdd(RMul(0.1e1,l_r_31),l_r_39);
      real l_op1_e3_l_16_41 = VDot<2,2>(VEC2(l_r_30,l_r_33),VEC2(RAdd(l_r_36,RMul(0.1e1,l_r_34)),RAdd(RMul(-0.1e1,l_r_31),l_r_39)));
      real l_prod_42 = RMul(VIndex<2,2,0>(v_11),0.1e1);
      real l_prod_43 = RMul(0.1e1,VIndex<2,2,1>(v_11));
      real l_sum_44 = RAdd(l_basisEval_28,RAdd(RMul(-0.1e1,l_prod_43),RMul(-0.1e1,l_prod_42)));
      real l_basisEval_45 = RMul(0.1e1,l_prod_42);
      real l_basisEval_46 = RMul(0.1e1,l_prod_43);
      vec2 v_47 = VSub<2,2>(VEC2(RAdd(RAdd(RMul(l_dof_load_16,l_sum_44),RMul(l_dof_load_20,l_basisEval_45)),RMul(l_dof_load_24,l_basisEval_46)),RAdd(RAdd(RMul(l_dof_load_17,l_sum_44),RMul(l_dof_load_21,l_basisEval_45)),RMul(l_dof_load_25,l_basisEval_46))),LOAD_0(p_pos_8));
      vec2 v_48 = VEC2(VDot<2,2>(VEC2(RDiv(RAdd(RMul(0.e0,l_r_35),RMul(-0.1e1,l_r_37)),l_op1_e3_l_16_41),RDiv(RAdd(RMul(0.e0,l_r_38),RMul(-0.1e1,l_r_40)),l_op1_e3_l_16_41)),v_47),VDot<2,2>(VEC2(RDiv(RAdd(RMul(0.1e1,l_r_35),RMul(0.e0,l_r_37)),l_op1_e3_l_16_41),RDiv(RAdd(RMul(0.1e1,l_r_38),RMul(0.e0,l_r_40)),l_op1_e3_l_16_41)),v_47));
      vec2 v_49 = VSub<2,2>(v_11,v_48);
      vec2 v_50 = v_49;
      if (GTE<real>(RMul(0.1e-7,0.1e-7),VDot<2,2>(v_48,v_48))) {
        vec2 v_51 = VAdd<2,2>(VEC2(0.1e-8,0.1e-8),v_50);
        if (BAnd(GT<real>(RAdd(0.1e1,0.1e-8),VDot<2,2>(VEC2(0.1e1,0.1e1),v_50)),BAnd(GT<real>(VIndex<2,2,0>(v_51),-0.e0),GT<real>(VIndex<2,2,1>(v_51),-0.e0)))) {
          tensor[2] _arg_52 = PACK(v_50);
          return ExtractFemItemN<[femData(Mesh),int,tensor[2],tensor[2]],femData(MeshPos),AllBuild(MeshPos),"","",[],int>(p_mesh_10,p_cellInt_9,_arg_52,p_pos_8)
        } else {
          return ExtractFemItemN<[femData(Mesh)],femData(MeshPos),InvalidBuild(MeshPos),"","",[],int>(p_mesh_10)
        }
      }
      v_11 = v_50;
    }
    return ExtractFemItemN<[femData(Mesh)],femData(MeshPos),InvalidBuild(MeshPos),"","",[],int>(p_mesh_10)
  }
//***** GLOBAL VARIABLE INIT *****
  {
    femData(MeshCell)[] l__t_53;
    l__t_53 = <femData(MeshCell)[]>{};
    for i__t_54 = 0 to ISub(ExtractFemItem<int,NumCell(Mesh)>(globals.a),1) {
      l__t_53 = Append<femData(MeshCell),femData(MeshCell)>(l__t_53,LoadFem<femData(MeshCell)>(globals.a,i__t_54));
    }
    globals.0cell_a = l__t_53;
    globals.c = LoadFem<femData(FemFunc)>(globals.0c0474_intermedateGlobal,LoadFem<femData(Space)>(globals.0b0472_intermedateGlobal,globals.a));
    vec3{4} v_55 = VSub<3,4>(LOAD_0(TensorRef<[3]>(globals.camAt)),LOAD_0(TensorRef<[3]>(globals.camEye)));
    real l_op1_e3_l_6_56 = Sqrt(VDot<3,4>(v_55,v_55));
    globals.camNearVsp = RAdd(globals.camNear,l_op1_e3_l_6_56);
    globals.camFarVsp = RAdd(globals.camFar,l_op1_e3_l_6_56);
    real l_op1_e3_l_9_57 = RDiv(0.1e1,l_op1_e3_l_6_56);
    vec3{4} v_58 = VScale<3,4>(l_op1_e3_l_9_57,v_55);
    globals.camN = PACK(v_58);
    real l_r_60 = TensorIndex<&tensor[3],[0]>(TensorRef<[3]>(globals.camUp));
    real l_r_61 = RMul(0.e0,l_r_60);
    real l_r_62 = TensorIndex<&tensor[3],[1]>(TensorRef<[3]>(globals.camUp));
    real l_r_63 = RMul(0.e0,l_r_62);
    real l_r_64 = TensorIndex<&tensor[3],[2]>(TensorRef<[3]>(globals.camUp));
    real l_r_65 = RMul(0.e0,l_r_64);
    real l_r_66 = RAdd(l_r_61,l_r_63);
    real l_r_67 = RAdd(l_r_66,l_r_65);
    vec3{4} v_68 = VEC3{4}(VDot<3,4>(v_55,VEC3{4}(l_r_67,RAdd(l_r_66,RMul(0.1e1,l_r_64)),RAdd(RAdd(l_r_61,RMul(-0.1e1,l_r_62)),l_r_65))),VDot<3,4>(v_55,VEC3{4}(RAdd(l_r_66,RMul(-0.1e1,l_r_64)),l_r_67,RAdd(RAdd(RMul(0.1e1,l_r_60),l_r_63),l_r_65))),VDot<3,4>(v_55,VEC3{4}(RAdd(RAdd(l_r_61,RMul(0.1e1,l_r_62)),l_r_65),RAdd(RAdd(RMul(-0.1e1,l_r_60),l_r_63),l_r_65),l_r_67)));
    real l_op1_e3_l_38_69 = RDiv(0.1e1,Sqrt(RMul(RMul(l_op1_e3_l_9_57,l_op1_e3_l_9_57),VDot<3,4>(v_68,v_68))));
    vec3{4} v_70 = VScale<3,4>(l_op1_e3_l_38_69,VScale<3,4>(l_op1_e3_l_9_57,v_68));
    globals.camU = PACK(v_70);
    real l_r_72 = VIndex<3,4,0>(v_55);
    real l_r_73 = RMul(0.e0,l_r_72);
    real l_r_74 = VIndex<3,4,1>(v_55);
    real l_r_75 = RMul(0.e0,l_r_74);
    real l_r_76 = VIndex<3,4,2>(v_55);
    real l_r_77 = RMul(0.e0,l_r_76);
    real l_r_78 = RAdd(l_r_73,l_r_75);
    real l_r_79 = RAdd(l_r_78,l_r_77);
    vec3{4} v_80 = VScale<3,4>(l_op1_e3_l_9_57,VEC3{4}(VDot<3,4>(v_68,VEC3{4}(l_r_79,RAdd(l_r_78,RMul(0.1e1,l_r_76)),RAdd(RAdd(l_r_73,RMul(-0.1e1,l_r_74)),l_r_77))),VDot<3,4>(v_68,VEC3{4}(RAdd(l_r_78,RMul(-0.1e1,l_r_76)),l_r_79,RAdd(RAdd(RMul(0.1e1,l_r_72),l_r_75),l_r_77))),VDot<3,4>(v_68,VEC3{4}(RAdd(RAdd(l_r_73,RMul(0.1e1,l_r_74)),l_r_77),RAdd(RAdd(RMul(-0.1e1,l_r_72),l_r_75),l_r_77),l_r_79))));
    real l_r_81 = RMul(l_op1_e3_l_38_69,l_op1_e3_l_9_57);
    real l_r_82 = RMul(l_r_81,VIndex<3,4,0>(v_80));
    real l_r_83 = RMul(l_r_81,VIndex<3,4,1>(v_80));
    real l_r_84 = RMul(l_r_81,VIndex<3,4,2>(v_80));
    globals.camV = PACK(VEC3{4}(l_r_82,l_r_83,l_r_84));
    real l_op1_e3_l_10_86 = Tan(RDiv(RMul(globals.camFOV,0.314159265358979323846264338327950288e1),0.36e3));
    globals.camVmax = RMul(l_op1_e3_l_10_86,l_op1_e3_l_6_56);
    globals.camUmax = RDiv(RMul(RMul(IntToReal(globals.iresU),l_op1_e3_l_10_86),l_op1_e3_l_6_56),IntToReal(globals.iresV));
    real l_r_87 = TensorIndex<&tensor[3],[0]>(TensorRef<[3]>(globals.lightVsp));
    real l_r_88 = TensorIndex<&tensor[3],[1]>(TensorRef<[3]>(globals.lightVsp));
    real l_r_89 = TensorIndex<&tensor[3],[2]>(TensorRef<[3]>(globals.lightVsp));
    globals.L = PACK(VScale<3,4>(RDiv(0.1e1,Sqrt(VDot<3,4>(LOAD_0(TensorRef<[3]>(globals.lightVsp)),LOAD_0(TensorRef<[3]>(globals.lightVsp))))),VEC3{4}(RAdd(RAdd(RMul(VIndex<3,4,0>(v_70),l_r_87),RMul(l_r_82,l_r_88)),RMul(VIndex<3,4,0>(v_58),l_r_89)),RAdd(RAdd(RMul(VIndex<3,4,1>(v_70),l_r_87),RMul(l_r_83,l_r_88)),RMul(VIndex<3,4,1>(v_58),l_r_89)),RAdd(RAdd(RMul(VIndex<3,4,2>(v_70),l_r_87),RMul(l_r_84,l_r_88)),RMul(VIndex<3,4,2>(v_58),l_r_89)))));
  }
//***** STRAND *****
strand ray (int p_ui_91,int p_vi_92) {
  real rayU;
  real rayV;
  tensor[3] UV;
  tensor[3] rayOrig;
  tensor[3] rayVec;
  real camNearVsp;
  real camFarVsp;
  int offset;
  int len;
  varying int itter;
  varying int intersectionItter;
  int idx;
  varying tensor[2] interval;
  varying real s;
  varying real e;
  varying femData(MeshCell) cc;
  varying femData(FuncCell) fc;
  varying output real out;
  varying output tensor[4] rgba;
  initialize (globals) {
    real l_op1_e3_l_9_93 = RNeg(globals.camUmax);
    real l_rayU_94 = RAdd(l_op1_e3_l_9_93,RMul(RDiv(RSub(IntToReal(p_ui_91),-0.5e0),RSub(RSub(IntToReal(globals.iresU),0.5e0),-0.5e0)),RSub(globals.camUmax,l_op1_e3_l_9_93)));
    real l_op1_e3_l_9_95 = RNeg(globals.camVmax);
    real l_rayV_96 = RAdd(l_op1_e3_l_9_95,RMul(RDiv(RSub(IntToReal(p_vi_92),-0.5e0),RSub(RSub(IntToReal(globals.iresV),0.5e0),-0.5e0)),RSub(globals.camVmax,l_op1_e3_l_9_95)));
    vec3{4} v_97 = VScale<3,4>(l_rayU_94,LOAD_0(TensorRef<[3]>(globals.camU)));
    vec3{4} v_98 = VScale<3,4>(l_rayV_96,LOAD_0(TensorRef<[3]>(globals.camV)));
    int l__t_99 = IMul(p_ui_91,globals.iresV);
    int l_offset_100 = Subscript<int[]>(globals.indecies,IAdd(l__t_99,p_vi_92));
    &tensor[2] l_interval_101 = Subscript<tensor[2][]>(globals.times,l_offset_100);
    femData(MeshCell) l_cc_102 = Subscript<femData(MeshCell)[]>(globals.0cell_a,0);
    self.rayU = l_rayU_94;
    self.rayV = l_rayV_96;
    self.UV = PACK(VAdd<3,4>(v_97,v_98));
    self.rayOrig = PACK(VAdd<3,4>(VAdd<3,4>(LOAD_0(TensorRef<[3]>(globals.camEye)),v_97),v_98));
    self.rayVec = PACK(VAdd<3,4>(LOAD_0(TensorRef<[3]>(globals.camN)),VEC3{4}(0.e0,0.e0,0.e0)));
    self.camNearVsp = globals.camNearVsp;
    self.camFarVsp = globals.camFarVsp;
    self.offset = l_offset_100;
    self.len = Subscript<int[]>(globals.indecies,IAdd(IAdd(IMul(globals.iresU,globals.iresV),l__t_99),p_vi_92));
    self.itter = 0;
    self.intersectionItter = 0;
    self.idx = l_offset_100;
    self.interval = TensorCopy<[2]>(l_interval_101);
    self.s = VIndex<2,2,0>(LOAD_0(l_interval_101));
    self.e = VIndex<2,2,1>(LOAD_0(l_interval_101));
    self.cc = l_cc_102;
    self.fc = LoadFem<femData(FuncCell)>(globals.c,ExtractFemItem<int,CellIndex(MeshCell)>(l_cc_102));
    self.out = 0.e0;
    self.rgba = PACK(VEC4(0.e0,0.e0,0.e0,0.e0));
  }
  start (globals) {
    if (EQ<int>(self.len,0)) {
      stabilize;
    }
    femData(MeshCell) l_cc_107 = Subscript<femData(MeshCell)[]>(globals.0cell_a,Subscript<int[]>(globals.cells,self.idx));
    self.cc = l_cc_107;
    self.fc = LoadFem<femData(FuncCell)>(globals.c,ExtractFemItem<int,CellIndex(MeshCell)>(l_cc_107));
    active;
  }
  update (world, globals) {
    int l_intersectionItter_312;
    bool l__t_208;
    real l_s_199;
    real l_cup_198;
    int l_ilit_196;
    int l_ilit_193;
    real l_s_171;
    tensor[2] _arg_108 = PACK(VEC2(self.s,self.e));
    print("Interval:",TensorRef<[2]>(_arg_108),"\n");
    print("inner itter:",self.intersectionItter,"\n");
    print("Outer itter:",self.itter,"\n");
    vec2 v_109 = VEC2(VIndex<3,4,0>(LOAD_0(TensorRef<[3]>(self.rayOrig))),VIndex<3,4,1>(LOAD_0(TensorRef<[3]>(self.rayOrig))));
    vec2 v_110 = VEC2(VIndex<3,4,0>(LOAD_0(TensorRef<[3]>(self.rayVec))),VIndex<3,4,1>(LOAD_0(TensorRef<[3]>(self.rayVec))));
    femData(Mesh) l__t_111 = ExtractFem<femData(Mesh),femData(MeshCell)>(self.cc);
    int l__t_112 = ExtractFemItem<int,CellIndex(MeshCell)>(self.cc);
    tensor[2] _arg_113 = PACK(VAdd<2,2>(v_109,VScale<2,2>(self.s,v_110)));
    femData(MeshPos) l_callNewtonPos_114 = _0A7F_msh_newtonInverse$26FF(_arg_113,l__t_112,l__t_111);
    &tensor[2] l_refPos_115 = ExtractFemItem<tensor[2],RefPos(Mesh)>(l_callNewtonPos_114);
    tensor[2] _arg_116 = PACK(VAdd<2,2>(v_109,VScale<2,2>(self.e,v_110)));
    femData(MeshPos) l_callNewtonPos_117 = _0A7F_msh_newtonInverse$26FF(_arg_116,l__t_112,l__t_111);
    &tensor[2] l_refPos_118 = ExtractFemItem<tensor[2],RefPos(Mesh)>(l_callNewtonPos_117);
    print("inverses:",l_refPos_115,l_refPos_118,"\n");
    femData(FemFunc) l__t_119 = ExtractFem<femData(FemFunc),femData(FuncCell)>(self.fc);
    femData(Space) l__t_120 = ExtractFem<femData(Space),femData(FemFunc)>(l__t_119);
    int l_mulRes_121 = IMul(ExtractFemItem<int,CellIndex(FuncCell)>(self.fc),6);
    int t_122 = ExtractFemItem2<int,int,ExtractIndex(Space)>(l__t_120,l_mulRes_121);
    int t_123 = ExtractFemItem2<int,int,ExtractIndex(Space)>(l__t_120,IAdd(l_mulRes_121,1));
    int t_124 = ExtractFemItem2<int,int,ExtractIndex(Space)>(l__t_120,IAdd(l_mulRes_121,2));
    int t_125 = ExtractFemItem2<int,int,ExtractIndex(Space)>(l__t_120,IAdd(l_mulRes_121,3));
    int t_126 = ExtractFemItem2<int,int,ExtractIndex(Space)>(l__t_120,IAdd(l_mulRes_121,4));
    int t_127 = ExtractFemItem2<int,int,ExtractIndex(Space)>(l__t_120,IAdd(l_mulRes_121,5));
    real t_128 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(l__t_119,IMul(1,t_127));
    real t_129 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(l__t_119,IMul(1,t_126));
    real t_130 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(l__t_119,IMul(1,t_125));
    real t_131 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(l__t_119,IMul(1,t_124));
    real t_132 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(l__t_119,IMul(1,t_123));
    real t_133 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(l__t_119,IMul(1,t_122));
    vec4 v_134 = VEC4(t_133,t_132,t_131,t_130);
    vec2 v_135 = VEC2(t_129,t_128);
    real l_varAcc_136 = VIndex<2,2,0>(LOAD_0(l_refPos_115));
    real l_varAcc_137 = VIndex<2,2,1>(LOAD_0(l_refPos_115));
    real l_prod_138 = RMul(RMul(l_varAcc_136,l_varAcc_136),0.1e1);
    real l_prod_139 = RMul(l_varAcc_136,l_varAcc_137);
    real l_prod_140 = RMul(l_varAcc_136,0.1e1);
    real l_prod_141 = RMul(0.1e1,l_varAcc_137);
    real l_prod_142 = RMul(0.1e1,0.1e1);
    real l_mult_143 = RMul(0.1e1,l_prod_142);
    real l_mult_144 = RMul(0.2e1,RMul(0.1e1,RMul(l_varAcc_137,l_varAcc_137)));
    real l_mult_145 = RMul(0.4e1,l_prod_139);
    real l_mult_146 = RMul(0.2e1,l_prod_138);
    real l_mult_147 = RMul(0.4e1,l_prod_141);
    real l_mult_148 = RMul(-0.4e1,l_prod_139);
    real l_mult_149 = RMul(0.4e1,l_prod_140);
    real l_faVal_150 = RAdd(VDot<2,2>(v_135,VEC2(RAdd(l_mult_147,l_mult_148),RAdd(l_mult_149,RAdd(l_mult_148,RMul(-0.4e1,l_prod_138))))),VDot<4,4>(v_134,VEC4(RAdd(l_mult_143,RAdd(RMul(-0.3e1,l_prod_141),RAdd(l_mult_144,RAdd(RMul(-0.3e1,l_prod_140),RAdd(l_mult_145,l_mult_146))))),RAdd(RMul(-0.1e1,l_prod_140),l_mult_146),RAdd(RMul(-0.1e1,l_prod_141),l_mult_144),l_mult_145)));
    real l__t_151 = VIndex<3,4,2>(LOAD_0(TensorRef<[3]>(self.rayVec)));
    real l__t_152 = VIndex<3,4,2>(LOAD_0(TensorRef<[3]>(self.rayOrig)));
    real l_fa_153 = RSub(RSub(l_faVal_150,RMul(l__t_151,self.s)),l__t_152);
    real l_varAcc_154 = VIndex<2,2,0>(LOAD_0(l_refPos_118));
    real l_varAcc_155 = VIndex<2,2,1>(LOAD_0(l_refPos_118));
    real l_prod_156 = RMul(RMul(l_varAcc_154,l_varAcc_154),0.1e1);
    real l_prod_157 = RMul(l_varAcc_154,l_varAcc_155);
    real l_prod_158 = RMul(l_varAcc_154,0.1e1);
    real l_prod_159 = RMul(0.1e1,l_varAcc_155);
    real l_mult_160 = RMul(0.2e1,RMul(0.1e1,RMul(l_varAcc_155,l_varAcc_155)));
    real l_mult_161 = RMul(0.4e1,l_prod_157);
    real l_mult_162 = RMul(0.2e1,l_prod_156);
    real l_mult_163 = RMul(-0.4e1,l_prod_157);
    real l_fb_164 = RSub(RSub(RAdd(VDot<2,2>(v_135,VEC2(RAdd(RMul(0.4e1,l_prod_159),l_mult_163),RAdd(RMul(0.4e1,l_prod_158),RAdd(l_mult_163,RMul(-0.4e1,l_prod_156))))),VDot<4,4>(v_134,VEC4(RAdd(l_mult_143,RAdd(RMul(-0.3e1,l_prod_159),RAdd(l_mult_160,RAdd(RMul(-0.3e1,l_prod_158),RAdd(l_mult_161,l_mult_162))))),RAdd(RMul(-0.1e1,l_prod_158),l_mult_162),RAdd(RMul(-0.1e1,l_prod_159),l_mult_160),l_mult_161))),RMul(l__t_151,self.e)),l__t_152);
    tensor[2] _arg_165 = PACK(VEC2(l_fa_153,l_fb_164));
    print("Vals:",TensorRef<[2]>(_arg_165),"\n");
    vec2 v_166 = v_109;
    vec2 v_167 = v_110;
    vec4 v_168 = v_134;
    vec2 v_169 = v_135;
    if (LT<real>(Abs<real>(RSub(l_fa_153,l_fb_164)),globals.eps)) {
      real l_s_170;
      if (GT<real>(Abs<real>(l_fa_153),globals.eps)) {
        self.s = RAdd(self.s,globals.eps);
        active;
      } else {
        l_s_170 = self.s;
      }
      l_s_171 = l_s_170;
    } else {
      l_s_171 = self.s;
    }
    real l_cup_172 = RDiv(RSub(RMul(l_s_171,l_fb_164),RMul(self.e,l_fa_153)),RSub(l_fb_164,l_fa_153));
    print("Mid time:",l_cup_172,"\n");
    tensor[2] _arg_173 = PACK(VAdd<2,2>(v_166,VScale<2,2>(l_cup_172,v_167)));
    femData(MeshPos) l_callNewtonPos_174 = _0A7F_msh_newtonInverse$26FF(_arg_173,l__t_112,l__t_111);
    &tensor[2] l_refPos_175 = ExtractFemItem<tensor[2],RefPos(Mesh)>(l_callNewtonPos_174);
    real l_varAcc_176 = VIndex<2,2,0>(LOAD_0(l_refPos_175));
    real l_varAcc_177 = VIndex<2,2,1>(LOAD_0(l_refPos_175));
    real l_prod_178 = RMul(RMul(l_varAcc_176,l_varAcc_176),0.1e1);
    real l_prod_179 = RMul(l_varAcc_176,l_varAcc_177);
    real l_prod_180 = RMul(l_varAcc_176,0.1e1);
    real l_prod_181 = RMul(0.1e1,l_varAcc_177);
    real l_mult_182 = RMul(0.2e1,RMul(0.1e1,RMul(l_varAcc_177,l_varAcc_177)));
    real l_mult_183 = RMul(0.4e1,l_prod_179);
    real l_mult_184 = RMul(0.2e1,l_prod_178);
    real l_mult_185 = RMul(0.4e1,l_prod_181);
    real l_mult_186 = RMul(-0.4e1,l_prod_179);
    real l_mult_187 = RMul(0.4e1,l_prod_180);
    real l_fmVal_188 = RAdd(VDot<2,2>(v_169,VEC2(RAdd(l_mult_185,l_mult_186),RAdd(l_mult_187,RAdd(l_mult_186,RMul(-0.4e1,l_prod_178))))),VDot<4,4>(v_168,VEC4(RAdd(l_mult_143,RAdd(RMul(-0.3e1,l_prod_181),RAdd(l_mult_182,RAdd(RMul(-0.3e1,l_prod_180),RAdd(l_mult_183,l_mult_184))))),RAdd(RMul(-0.1e1,l_prod_180),l_mult_184),RAdd(RMul(-0.1e1,l_prod_181),l_mult_182),l_mult_183)));
    real l_fm_189 = RSub(RSub(l_fmVal_188,RMul(l__t_151,l_cup_172)),l__t_152);
    tensor[3] _arg_190 = PACK(VEC3{4}(l_fa_153,l_fm_189,l_fb_164));
    print("all vals:",TensorRef<[3]>(_arg_190),"\n");
    int l_intersectionItter_191 = IAdd(self.intersectionItter,1);
    bool l__t_192 = GT<real>(l_fa_153,0.e0);
    if (l__t_192) {
      l_ilit_193 = 1;
    } else {
      int l__t_194;
      if (LT<real>(l_fa_153,0.e0)) {
        l__t_194 = -1;
      } else {
        l__t_194 = 0;
      }
      l_ilit_193 = l__t_194;
    }
    bool l__t_195 = GT<real>(l_fm_189,0.e0);
    if (l__t_195) {
      l_ilit_196 = 1;
    } else {
      int l__t_197;
      if (LT<real>(l_fm_189,0.e0)) {
        l__t_197 = -1;
      } else {
        l__t_197 = 0;
      }
      l_ilit_196 = l__t_197;
    }
    if (LT<int>(IMul(l_ilit_193,l_ilit_196),0)) {
      l_cup_198 = l_cup_172;
      l_s_199 = l_s_171;
    } else {
      real l_cup_204;
      int l_ilit_202;
      int l_ilit_200;
      if (l__t_192) {
        l_ilit_200 = 1;
      } else {
        int l__t_201;
        if (LT<real>(l_fa_153,0.e0)) {
          l__t_201 = -1;
        } else {
          l__t_201 = 0;
        }
        l_ilit_200 = l__t_201;
      }
      if (l__t_195) {
        l_ilit_202 = 1;
      } else {
        int l__t_203;
        if (LT<real>(l_fm_189,0.e0)) {
          l__t_203 = -1;
        } else {
          l__t_203 = 0;
        }
        l_ilit_202 = l__t_203;
      }
      if (GT<int>(IMul(l_ilit_200,l_ilit_202),0)) {
        l_cup_204 = l_cup_172;
      } else {
        l_cup_204 = l_s_171;
      }
      l_cup_198 = self.e;
      l_s_199 = l_cup_204;
    }
    tensor[2] _arg_205 = PACK(VEC2(l_s_199,l_cup_198));
    print("new interval:",TensorRef<[2]>(_arg_205),"\n");
    real l__t_206 = Abs<real>(l_fa_153);
    bool l__t_207 = LT<real>(l__t_206,globals.eps);
    if (l__t_207) {
      l__t_208 = true;
    } else {
      bool l__t_209;
      if (LT<real>(Abs<real>(l_fm_189),globals.eps)) {
        l__t_209 = true;
      } else {
        l__t_209 = GT<int>(l_intersectionItter_191,32);
      }
      l__t_208 = l__t_209;
    }
    if (l__t_208) {
      bool l__t_211;
      real l__t_210 = Abs<real>(l_fm_189);
      if (GT<real>(l__t_210,globals.eps)) {
        l__t_211 = GT<real>(l__t_206,globals.eps);
      } else {
        l__t_211 = false;
      }
      if (l__t_211) {
        int l_itter_212 = IAdd(self.itter,1);
        if (GTE<int>(l_itter_212,self.len)) {
          print("Fin pixel=============================\n");
          self.itter = l_itter_212;
          self.intersectionItter = 0;
          self.s = l_s_199;
          self.e = l_cup_198;
          stabilize;
        }
        int l__t_213 = IAdd(self.offset,l_itter_212);
        &tensor[2] l_interval_214 = Subscript<tensor[2][]>(globals.times,l__t_213);
        femData(MeshCell) l_cc_215 = Subscript<femData(MeshCell)[]>(globals.0cell_a,Subscript<int[]>(globals.cells,l__t_213));
        print("Next interval!\n");
        self.itter = l_itter_212;
        self.intersectionItter = 0;
        self.interval = TensorCopy<[2]>(l_interval_214);
        self.s = VIndex<2,2,0>(LOAD_0(l_interval_214));
        self.e = VIndex<2,2,1>(LOAD_0(l_interval_214));
        self.cc = l_cc_215;
        self.fc = LoadFem<femData(FuncCell)>(globals.c,ExtractFemItem<int,CellIndex(MeshCell)>(l_cc_215));
        active;
      } else {
        vec4 v_310;
        vec3{4} v_300;
        real l_faVal_287;
        real l_s_286;
        vec2 v_285;
        real l_fmVal_251;
        vec2 v_250;
        vec2 v_216 = VEC2(0.e0,0.e0);
        if (LT<real>(l__t_210,globals.eps)) {
          real l_sum_217 = RAdd(RMul(-0.3e1,l_prod_142),RAdd(l_mult_185,l_mult_187));
          real l_mult_218 = RMul(-0.1e1,l_prod_142);
          real l_basisEval_219 = RMul(-0.4e1,l_prod_181);
          real l_mult_220 = RMul(0.4e1,l_prod_142);
          real l_mult_221 = RMul(-0.4e1,l_prod_180);
          real l_vdot_222 = RAdd(VDot<2,2>(v_169,VEC2(l_basisEval_219,RAdd(l_mult_220,RAdd(l_basisEval_219,RMul(-0.8e1,l_prod_180))))),VDot<4,4>(v_168,VEC4(l_sum_217,RAdd(l_mult_218,l_mult_187),0.e0,l_mult_185)));
          real l_vdot_223 = RAdd(VDot<2,2>(v_169,VEC2(RAdd(l_mult_220,l_mult_221),l_mult_221)),VDot<4,4>(v_168,VEC4(l_sum_217,0.e0,RAdd(l_mult_218,l_mult_185),l_mult_187)));
          int l_mulRes_224 = IMul(l__t_112,3);
          int t_225 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(l__t_111,l_mulRes_224);
          int l_mulRes_226 = IMul(2,t_225);
          int t_227 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(l__t_111,IAdd(l_mulRes_224,1));
          int l_mulRes_228 = IMul(2,t_227);
          real l_dof_load_229 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(l__t_111,l_mulRes_228);
          real l_dof_load_230 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(l__t_111,IAdd(1,l_mulRes_228));
          int t_231 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(l__t_111,IAdd(l_mulRes_224,2));
          int l_mulRes_232 = IMul(2,t_231);
          real l_dof_load_233 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(l__t_111,l_mulRes_232);
          real l_dof_load_234 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(l__t_111,IAdd(1,l_mulRes_232));
          real t_235 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(l__t_111,l_mulRes_226);
          real l_r_236 = RMul(t_235,l_mult_218);
          real l_r_237 = RAdd(RAdd(l_r_236,RMul(l_dof_load_229,l_mult_143)),RMul(l_dof_load_233,0.e0));
          real l_r_238 = RAdd(RAdd(l_r_236,RMul(l_dof_load_229,0.e0)),RMul(l_dof_load_233,l_mult_143));
          real t_239 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(l__t_111,IAdd(1,l_mulRes_226));
          real l_r_240 = RMul(t_239,l_mult_218);
          real l_r_241 = RAdd(RAdd(l_r_240,RMul(l_dof_load_230,l_mult_143)),RMul(l_dof_load_234,0.e0));
          real l_r_242 = RAdd(RAdd(l_r_240,RMul(l_dof_load_230,0.e0)),RMul(l_dof_load_234,l_mult_143));
          real l_r_243 = RAdd(RMul(0.e0,l_r_237),RMul(-0.1e1,l_r_241));
          real l_r_244 = RMul(0.e0,l_r_238);
          real l_r_245 = RAdd(l_r_244,RMul(-0.1e1,l_r_242));
          real l_r_246 = RAdd(RMul(0.1e1,l_r_237),RMul(0.e0,l_r_241));
          real l_r_247 = RMul(0.e0,l_r_242);
          real l_r_248 = RAdd(RMul(0.1e1,l_r_238),l_r_247);
          real l_op1_e3_l_14_249 = VDot<2,2>(VEC2(l_r_237,l_r_241),VEC2(RAdd(l_r_244,RMul(0.1e1,l_r_242)),RAdd(RMul(-0.1e1,l_r_238),l_r_247)));
          v_250 = VEC2(RAdd(RMul(l_vdot_222,RDiv(RAdd(RMul(0.e0,l_r_243),RMul(-0.1e1,l_r_245)),l_op1_e3_l_14_249)),RMul(l_vdot_223,RDiv(RAdd(RMul(0.1e1,l_r_243),RMul(0.e0,l_r_245)),l_op1_e3_l_14_249))),RAdd(RMul(l_vdot_222,RDiv(RAdd(RMul(0.e0,l_r_246),RMul(-0.1e1,l_r_248)),l_op1_e3_l_14_249)),RMul(l_vdot_223,RDiv(RAdd(RMul(0.1e1,l_r_246),RMul(0.e0,l_r_248)),l_op1_e3_l_14_249))));
          l_fmVal_251 = l_fmVal_188;
        } else {
          v_250 = v_216;
          l_fmVal_251 = self.out;
        }
        if (l__t_207) {
          real l_sum_252 = RAdd(RMul(-0.3e1,l_prod_142),RAdd(l_mult_147,l_mult_149));
          real l_mult_253 = RMul(-0.1e1,l_prod_142);
          real l_basisEval_254 = RMul(-0.4e1,l_prod_141);
          real l_mult_255 = RMul(0.4e1,l_prod_142);
          real l_mult_256 = RMul(-0.4e1,l_prod_140);
          real l_vdot_257 = RAdd(VDot<2,2>(v_169,VEC2(l_basisEval_254,RAdd(l_mult_255,RAdd(l_basisEval_254,RMul(-0.8e1,l_prod_140))))),VDot<4,4>(v_168,VEC4(l_sum_252,RAdd(l_mult_253,l_mult_149),0.e0,l_mult_147)));
          real l_vdot_258 = RAdd(VDot<2,2>(v_169,VEC2(RAdd(l_mult_255,l_mult_256),l_mult_256)),VDot<4,4>(v_168,VEC4(l_sum_252,0.e0,RAdd(l_mult_253,l_mult_147),l_mult_149)));
          int l_mulRes_259 = IMul(l__t_112,3);
          int t_260 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(l__t_111,l_mulRes_259);
          int l_mulRes_261 = IMul(2,t_260);
          int t_262 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(l__t_111,IAdd(l_mulRes_259,1));
          int l_mulRes_263 = IMul(2,t_262);
          real l_dof_load_264 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(l__t_111,l_mulRes_263);
          real l_dof_load_265 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(l__t_111,IAdd(1,l_mulRes_263));
          int t_266 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(l__t_111,IAdd(l_mulRes_259,2));
          int l_mulRes_267 = IMul(2,t_266);
          real l_dof_load_268 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(l__t_111,l_mulRes_267);
          real l_dof_load_269 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(l__t_111,IAdd(1,l_mulRes_267));
          real t_270 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(l__t_111,l_mulRes_261);
          real l_r_271 = RMul(t_270,l_mult_253);
          real l_r_272 = RAdd(RAdd(l_r_271,RMul(l_dof_load_264,l_mult_143)),RMul(l_dof_load_268,0.e0));
          real l_r_273 = RAdd(RAdd(l_r_271,RMul(l_dof_load_264,0.e0)),RMul(l_dof_load_268,l_mult_143));
          real t_274 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(l__t_111,IAdd(1,l_mulRes_261));
          real l_r_275 = RMul(t_274,l_mult_253);
          real l_r_276 = RAdd(RAdd(l_r_275,RMul(l_dof_load_265,l_mult_143)),RMul(l_dof_load_269,0.e0));
          real l_r_277 = RAdd(RAdd(l_r_275,RMul(l_dof_load_265,0.e0)),RMul(l_dof_load_269,l_mult_143));
          real l_r_278 = RAdd(RMul(0.e0,l_r_272),RMul(-0.1e1,l_r_276));
          real l_r_279 = RMul(0.e0,l_r_273);
          real l_r_280 = RAdd(l_r_279,RMul(-0.1e1,l_r_277));
          real l_r_281 = RAdd(RMul(0.1e1,l_r_272),RMul(0.e0,l_r_276));
          real l_r_282 = RMul(0.e0,l_r_277);
          real l_r_283 = RAdd(RMul(0.1e1,l_r_273),l_r_282);
          real l_op1_e3_l_14_284 = VDot<2,2>(VEC2(l_r_272,l_r_276),VEC2(RAdd(l_r_279,RMul(0.1e1,l_r_277)),RAdd(RMul(-0.1e1,l_r_273),l_r_282)));
          v_285 = VEC2(RAdd(RMul(l_vdot_257,RDiv(RAdd(RMul(0.e0,l_r_278),RMul(-0.1e1,l_r_280)),l_op1_e3_l_14_284)),RMul(l_vdot_258,RDiv(RAdd(RMul(0.1e1,l_r_278),RMul(0.e0,l_r_280)),l_op1_e3_l_14_284))),RAdd(RMul(l_vdot_257,RDiv(RAdd(RMul(0.e0,l_r_281),RMul(-0.1e1,l_r_283)),l_op1_e3_l_14_284)),RMul(l_vdot_258,RDiv(RAdd(RMul(0.1e1,l_r_281),RMul(0.e0,l_r_283)),l_op1_e3_l_14_284))));
          l_s_286 = l_s_199;
          l_faVal_287 = l_faVal_150;
        } else {
          v_285 = v_250;
          l_s_286 = l_cup_172;
          l_faVal_287 = l_fmVal_251;
        }
        print("Out val:",l_faVal_287,"\n");
        tensor[2] _arg_288 = PACK(v_285);
        print("Grad val:",TensorRef<[2]>(_arg_288),"\n");
        vec3{4} v_289 = VEC3{4}(0.1e1,0.1e1,0.1e1);
        if (NEQ<real>(globals.cmin,globals.cmax)) {
          tensor[3,2] l_voxels_296;
          real l_imgPos_290 = RAdd(RMul(Transform<IMAGE1D<double[3]>>(globals.cmap),RAdd(-0.1e1,RMul(RDiv(RSub(l_faVal_287,globals.cmin),RSub(globals.cmax,globals.cmin)),RSub(0.1e1,-0.1e1)))),Translate<IMAGE1D<double[3]>>(globals.cmap));
          real l_nd_291 = RFloor(l_imgPos_290);
          real l_f_292 = RSub(l_imgPos_290,l_nd_291);
          int l_n_293 = RealToInt(l_nd_291);
          if (IndexInside<IMAGE1D<double[3]>,2>(l_n_293,globals.cmap)) {
            int l_offp_294 = IMul(3,l_n_293);
            int l_offp_295 = IMul(3,IAdd(l_n_293,1));
            l_voxels_296 = <tensor[3,2]>[LoadVoxel<IMAGE1D<double[3]>>(globals.cmap,l_offp_294),LoadVoxel<IMAGE1D<double[3]>>(globals.cmap,l_offp_295),LoadVoxel<IMAGE1D<double[3]>>(globals.cmap,IAdd(l_offp_294,1)),LoadVoxel<IMAGE1D<double[3]>>(globals.cmap,IAdd(l_offp_295,1)),LoadVoxel<IMAGE1D<double[3]>>(globals.cmap,IAdd(l_offp_294,2)),LoadVoxel<IMAGE1D<double[3]>>(globals.cmap,IAdd(l_offp_295,2))];
          } else {
            int l_offp_297 = IMul(3,ControlIndex<IMAGE1D<double[3]>,clamp,0>(globals.cmap,l_n_293));
            int l_offp_298 = IMul(3,ControlIndex<IMAGE1D<double[3]>,clamp,0>(globals.cmap,IAdd(l_n_293,1)));
            l_voxels_296 = <tensor[3,2]>[LoadVoxel<IMAGE1D<double[3]>>(globals.cmap,l_offp_297),LoadVoxel<IMAGE1D<double[3]>>(globals.cmap,l_offp_298),LoadVoxel<IMAGE1D<double[3]>>(globals.cmap,IAdd(l_offp_297,1)),LoadVoxel<IMAGE1D<double[3]>>(globals.cmap,IAdd(l_offp_298,1)),LoadVoxel<IMAGE1D<double[3]>>(globals.cmap,IAdd(l_offp_297,2)),LoadVoxel<IMAGE1D<double[3]>>(globals.cmap,IAdd(l_offp_298,2))];
          }
          vec2 v_299 = VAdd<2,2>(VEC2(0.1e1,0.1e1),VMul<2,2>(VEC2(l_f_292,RSub(l_f_292,0.1e1)),VEC2(-0.1e1,0.1e1)));
          v_300 = VEC3{4}(VDot<2,2>(LOAD_0(ProjectLast<tensor[3,2],[0]>(l_voxels_296)),v_299),VDot<2,2>(LOAD_0(ProjectLast<tensor[3,2],[1]>(l_voxels_296)),v_299),VDot<2,2>(LOAD_0(ProjectLast<tensor[3,2],[2]>(l_voxels_296)),v_299));
        } else {
          v_300 = v_289;
        }
        if (globals.light) {
          vec3{4} v_301 = VEC3{4}(VIndex<2,2,0>(v_285),VIndex<2,2,1>(v_285),-0.1e1);
          vec3{4} v_302 = VAdd<3,4>(VNeg<3,4>(VScale<3,4>(RDiv(0.1e1,Sqrt(VDot<3,4>(LOAD_0(TensorRef<[3]>(self.rayVec)),LOAD_0(TensorRef<[3]>(self.rayVec))))),LOAD_0(TensorRef<[3]>(self.rayVec)))),LOAD_0(TensorRef<[3]>(globals.L)));
          vec3{4} v_303 = VAdd<3,4>(LOAD_0(TensorRef<[3]>(globals.mcnear)),VScale<3,4>(RDiv(RSub(l_s_286,self.camNearVsp),RSub(self.camFarVsp,self.camNearVsp)),VSub<3,4>(LOAD_0(TensorRef<[3]>(globals.mcfar)),LOAD_0(TensorRef<[3]>(globals.mcnear)))));
          real l_r_304 = VIndex<3,4,0>(v_303);
          real l_r_305 = RMul(Max<real>(0.e0,VDot<3,4>(v_301,LOAD_0(TensorRef<[3]>(globals.L)))),globals.phongKd);
          real l_r_306 = VIndex<3,4,1>(v_303);
          real l_r_307 = VIndex<3,4,2>(v_303);
          real l_r_308 = RMul(MathFn<pow>(Max<real>(0.e0,RMul(RDiv(0.1e1,Sqrt(VDot<3,4>(v_302,v_302))),VDot<3,4>(v_301,v_302))),globals.phongSp),globals.phongKs);
          vec3{4} v_309 = VAdd<3,4>(VAdd<3,4>(VScale<3,4>(globals.phongKa,v_300),VEC3{4}(RMul(RMul(l_r_305,VIndex<3,4,0>(v_300)),l_r_304),RMul(RMul(l_r_305,VIndex<3,4,1>(v_300)),l_r_306),RMul(RMul(l_r_305,VIndex<3,4,2>(v_300)),l_r_307))),VEC3{4}(RMul(l_r_308,l_r_304),RMul(l_r_308,l_r_306),RMul(l_r_308,l_r_307)));
          v_310 = VEC4(VIndex<3,4,0>(v_309),VIndex<3,4,1>(v_309),VIndex<3,4,2>(v_309),0.1e1);
        } else {
          v_310 = VEC4(VIndex<3,4,0>(v_300),VIndex<3,4,1>(v_300),VIndex<3,4,2>(v_300),0.1e1);
        }
        self.intersectionItter = 0;
        self.s = l_s_199;
        self.e = l_cup_198;
        self.out = l_faVal_287;
        self.rgba = PACK(v_310);
        stabilize;
      }
    } else {
      print("=========\n");
      l_intersectionItter_312 = l_intersectionItter_191;
    }
    self.intersectionItter = l_intersectionItter_312;
    self.s = l_s_199;
    self.e = l_cup_198;
    active;
  }
}
//***** CREATE GRID(2) *****
  {
    for i_vi_313 = 0 to ISub(globals.iresU,1) {
      for i_ui_314 = 0 to ISub(globals.iresV,1) {
        new ray(i_ui_314,i_vi_313);
      }
    }
  }
#### end program ####
##### TreeIR: after contraction ####
//***** PROPERTIES *****
  GlobalInit StrandArray HasStartMethod ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[]) HasInputs HasGlobals
//***** CONSTS *****
//***** INPUTS *****
input real isoval;
input real thick;
input tensor[3] camEye;
input tensor[3] camAt;
input tensor[3] camUp;
input real camFOV;
input int iresU;
input int iresV;
input real camNear;
input real camFar;
input real refStep;
input real rayStep;
input femData(Mesh) a;
input femData(Space) 0b0472_intermedateGlobal;
input femData(FemFunc) 0c0474_intermedateGlobal;
input real eps;
input int[] indecies;
input tensor[2][] times;
input int[] cells;
input tensor[3] mcnear;
input tensor[3] mcfar;
input image(IMAGE1D<double[3]>) cmap;
input real cmin;
input real cmax;
input bool light;
input real phongKa;
input real phongKd;
input real phongKs;
input real phongSp;
input real maxAlpha;
input tensor[3] lightVsp;
//***** CONST INIT *****
  {
    globals.isoval = 0.2e0;
    globals.thick = 0.7e-1;
    globals.camEye = <tensor[3]>[0.3e1,-0.3e1,0.3e1];
    globals.camAt = <tensor[3]>[0.5e0,0.5e0,0.5e0];
    vec3{4} v_2 = VEC3{4}(0.e0,0.e0,0.1e1);
    globals.camUp = PACK(v_2);
    globals.camFOV = 0.137e2;
    globals.iresU = 10;
    globals.iresV = 10;
    globals.camNear = -0.2e1;
    globals.camFar = 0.5e1;
    globals.refStep = 0.1e1;
    globals.rayStep = 0.1e-1;
    globals.eps = 0.1e-5;
    vec3{4} v_4 = VEC3{4}(0.1e1,0.1e1,0.1e1);
    globals.mcnear = PACK(v_4);
    globals.mcfar = PACK(v_4);
    globals.cmin = 0.e0;
    globals.cmax = 0.1e1;
    globals.light = true;
    globals.phongKa = 0.5e0;
    globals.phongKd = 0.5e0;
    globals.phongKs = 0.e0;
    globals.phongSp = 0.6e2;
    globals.maxAlpha = 0.1e1;
    globals.lightVsp = PACK(v_2);
  }
//***** GLOBALS *****
global femData(MeshCell)[] 0cell_a;
global femData(FemFunc) c;
global real camNearVsp;
global real camFarVsp;
global tensor[3] camN;
global tensor[3] camU;
global tensor[3] camV;
global real camVmax;
global real camUmax;
global tensor[3] L;
//***** FUNCTIONS *****
  function femData(MeshPos) _0A7F_msh_newtonInverse (&tensor[2] p_pos_8,int p_cellInt_9,femData(Mesh) p_mesh_10) {
    vec2 v_11;
    v_11 = VEC2(0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0,0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0);
    for i_itter_12 = 0 to 16 {
      int l_mulRes_13 = IMul(p_cellInt_9,3);
      int t_14 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(p_mesh_10,l_mulRes_13);
      int l_mulRes_15 = IMul(2,t_14);
      real l_dof_load_16 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(p_mesh_10,l_mulRes_15);
      real l_dof_load_17 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(p_mesh_10,IAdd(1,l_mulRes_15));
      int t_18 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(p_mesh_10,IAdd(l_mulRes_13,1));
      int l_mulRes_19 = IMul(2,t_18);
      real l_dof_load_20 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(p_mesh_10,l_mulRes_19);
      real l_dof_load_21 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(p_mesh_10,IAdd(1,l_mulRes_19));
      int t_22 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(p_mesh_10,IAdd(l_mulRes_13,2));
      int l_mulRes_23 = IMul(2,t_22);
      real l_dof_load_24 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(p_mesh_10,l_mulRes_23);
      real l_dof_load_25 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(p_mesh_10,IAdd(1,l_mulRes_23));
      real l_prod_26 = RMul(0.1e1,0.1e1);
      real l_basisEval_27 = RMul(-0.1e1,l_prod_26);
      real l_basisEval_28 = RMul(0.1e1,l_prod_26);
      real l_r_29 = RMul(l_dof_load_16,l_basisEval_27);
      real l_r_30 = RAdd(RAdd(l_r_29,RMul(l_dof_load_20,l_basisEval_28)),RMul(l_dof_load_24,0.e0));
      real l_r_31 = RAdd(RAdd(l_r_29,RMul(l_dof_load_20,0.e0)),RMul(l_dof_load_24,l_basisEval_28));
      real l_r_32 = RMul(l_dof_load_17,l_basisEval_27);
      real l_r_33 = RAdd(RAdd(l_r_32,RMul(l_dof_load_21,l_basisEval_28)),RMul(l_dof_load_25,0.e0));
      real l_r_34 = RAdd(RAdd(l_r_32,RMul(l_dof_load_21,0.e0)),RMul(l_dof_load_25,l_basisEval_28));
      real l_r_35 = RAdd(RMul(0.e0,l_r_30),RMul(-0.1e1,l_r_33));
      real l_r_36 = RMul(0.e0,l_r_31);
      real l_r_37 = RAdd(l_r_36,RMul(-0.1e1,l_r_34));
      real l_r_38 = RAdd(RMul(0.1e1,l_r_30),RMul(0.e0,l_r_33));
      real l_r_39 = RMul(0.e0,l_r_34);
      real l_r_40 = RAdd(RMul(0.1e1,l_r_31),l_r_39);
      real l_op1_e3_l_16_41 = VDot<2,2>(VEC2(l_r_30,l_r_33),VEC2(RAdd(l_r_36,RMul(0.1e1,l_r_34)),RAdd(RMul(-0.1e1,l_r_31),l_r_39)));
      real l_prod_42 = RMul(VIndex<2,2,0>(v_11),0.1e1);
      real l_prod_43 = RMul(0.1e1,VIndex<2,2,1>(v_11));
      real l_sum_44 = RAdd(l_basisEval_28,RAdd(RMul(-0.1e1,l_prod_43),RMul(-0.1e1,l_prod_42)));
      real l_basisEval_45 = RMul(0.1e1,l_prod_42);
      real l_basisEval_46 = RMul(0.1e1,l_prod_43);
      vec2 v_47 = VSub<2,2>(VEC2(RAdd(RAdd(RMul(l_dof_load_16,l_sum_44),RMul(l_dof_load_20,l_basisEval_45)),RMul(l_dof_load_24,l_basisEval_46)),RAdd(RAdd(RMul(l_dof_load_17,l_sum_44),RMul(l_dof_load_21,l_basisEval_45)),RMul(l_dof_load_25,l_basisEval_46))),LOAD_0(p_pos_8));
      vec2 v_48 = VEC2(VDot<2,2>(VEC2(RDiv(RAdd(RMul(0.e0,l_r_35),RMul(-0.1e1,l_r_37)),l_op1_e3_l_16_41),RDiv(RAdd(RMul(0.e0,l_r_38),RMul(-0.1e1,l_r_40)),l_op1_e3_l_16_41)),v_47),VDot<2,2>(VEC2(RDiv(RAdd(RMul(0.1e1,l_r_35),RMul(0.e0,l_r_37)),l_op1_e3_l_16_41),RDiv(RAdd(RMul(0.1e1,l_r_38),RMul(0.e0,l_r_40)),l_op1_e3_l_16_41)),v_47));
      vec2 v_49 = VSub<2,2>(v_11,v_48);
      vec2 v_50 = v_49;
      if (GTE<real>(RMul(0.1e-7,0.1e-7),VDot<2,2>(v_48,v_48))) {
        vec2 v_51 = VAdd<2,2>(VEC2(0.1e-8,0.1e-8),v_50);
        if (BAnd(GT<real>(RAdd(0.1e1,0.1e-8),VDot<2,2>(VEC2(0.1e1,0.1e1),v_50)),BAnd(GT<real>(VIndex<2,2,0>(v_51),-0.e0),GT<real>(VIndex<2,2,1>(v_51),-0.e0)))) {
          tensor[2] _arg_52 = PACK(v_50);
          return ExtractFemItemN<[femData(Mesh),int,tensor[2],tensor[2]],femData(MeshPos),AllBuild(MeshPos),"","",[],int>(p_mesh_10,p_cellInt_9,_arg_52,p_pos_8)
        } else {
          return ExtractFemItemN<[femData(Mesh)],femData(MeshPos),InvalidBuild(MeshPos),"","",[],int>(p_mesh_10)
        }
      }
      v_11 = v_50;
    }
    return ExtractFemItemN<[femData(Mesh)],femData(MeshPos),InvalidBuild(MeshPos),"","",[],int>(p_mesh_10)
  }
//***** GLOBAL VARIABLE INIT *****
  {
    femData(MeshCell)[] l__t_53;
    l__t_53 = <femData(MeshCell)[]>{};
    for i__t_54 = 0 to ISub(ExtractFemItem<int,NumCell(Mesh)>(globals.a),1) {
      l__t_53 = Append<femData(MeshCell),femData(MeshCell)>(l__t_53,LoadFem<femData(MeshCell)>(globals.a,i__t_54));
    }
    globals.0cell_a = l__t_53;
    globals.c = LoadFem<femData(FemFunc)>(globals.0c0474_intermedateGlobal,LoadFem<femData(Space)>(globals.0b0472_intermedateGlobal,globals.a));
    vec3{4} v_55 = VSub<3,4>(LOAD_0(TensorRef<[3]>(globals.camAt)),LOAD_0(TensorRef<[3]>(globals.camEye)));
    real l_op1_e3_l_6_56 = Sqrt(VDot<3,4>(v_55,v_55));
    globals.camNearVsp = RAdd(globals.camNear,l_op1_e3_l_6_56);
    globals.camFarVsp = RAdd(globals.camFar,l_op1_e3_l_6_56);
    real l_op1_e3_l_9_57 = RDiv(0.1e1,l_op1_e3_l_6_56);
    vec3{4} v_58 = VScale<3,4>(l_op1_e3_l_9_57,v_55);
    globals.camN = PACK(v_58);
    real l_r_60 = TensorIndex<&tensor[3],[0]>(TensorRef<[3]>(globals.camUp));
    real l_r_61 = RMul(0.e0,l_r_60);
    real l_r_62 = TensorIndex<&tensor[3],[1]>(TensorRef<[3]>(globals.camUp));
    real l_r_63 = RMul(0.e0,l_r_62);
    real l_r_64 = TensorIndex<&tensor[3],[2]>(TensorRef<[3]>(globals.camUp));
    real l_r_65 = RMul(0.e0,l_r_64);
    real l_r_66 = RAdd(l_r_61,l_r_63);
    real l_r_67 = RAdd(l_r_66,l_r_65);
    vec3{4} v_68 = VEC3{4}(VDot<3,4>(v_55,VEC3{4}(l_r_67,RAdd(l_r_66,RMul(0.1e1,l_r_64)),RAdd(RAdd(l_r_61,RMul(-0.1e1,l_r_62)),l_r_65))),VDot<3,4>(v_55,VEC3{4}(RAdd(l_r_66,RMul(-0.1e1,l_r_64)),l_r_67,RAdd(RAdd(RMul(0.1e1,l_r_60),l_r_63),l_r_65))),VDot<3,4>(v_55,VEC3{4}(RAdd(RAdd(l_r_61,RMul(0.1e1,l_r_62)),l_r_65),RAdd(RAdd(RMul(-0.1e1,l_r_60),l_r_63),l_r_65),l_r_67)));
    real l_op1_e3_l_38_69 = RDiv(0.1e1,Sqrt(RMul(RMul(l_op1_e3_l_9_57,l_op1_e3_l_9_57),VDot<3,4>(v_68,v_68))));
    vec3{4} v_70 = VScale<3,4>(l_op1_e3_l_38_69,VScale<3,4>(l_op1_e3_l_9_57,v_68));
    globals.camU = PACK(v_70);
    real l_r_72 = VIndex<3,4,0>(v_55);
    real l_r_73 = RMul(0.e0,l_r_72);
    real l_r_74 = VIndex<3,4,1>(v_55);
    real l_r_75 = RMul(0.e0,l_r_74);
    real l_r_76 = VIndex<3,4,2>(v_55);
    real l_r_77 = RMul(0.e0,l_r_76);
    real l_r_78 = RAdd(l_r_73,l_r_75);
    real l_r_79 = RAdd(l_r_78,l_r_77);
    vec3{4} v_80 = VScale<3,4>(l_op1_e3_l_9_57,VEC3{4}(VDot<3,4>(v_68,VEC3{4}(l_r_79,RAdd(l_r_78,RMul(0.1e1,l_r_76)),RAdd(RAdd(l_r_73,RMul(-0.1e1,l_r_74)),l_r_77))),VDot<3,4>(v_68,VEC3{4}(RAdd(l_r_78,RMul(-0.1e1,l_r_76)),l_r_79,RAdd(RAdd(RMul(0.1e1,l_r_72),l_r_75),l_r_77))),VDot<3,4>(v_68,VEC3{4}(RAdd(RAdd(l_r_73,RMul(0.1e1,l_r_74)),l_r_77),RAdd(RAdd(RMul(-0.1e1,l_r_72),l_r_75),l_r_77),l_r_79))));
    real l_r_81 = RMul(l_op1_e3_l_38_69,l_op1_e3_l_9_57);
    real l_r_82 = RMul(l_r_81,VIndex<3,4,0>(v_80));
    real l_r_83 = RMul(l_r_81,VIndex<3,4,1>(v_80));
    real l_r_84 = RMul(l_r_81,VIndex<3,4,2>(v_80));
    globals.camV = <tensor[3]>[l_r_82,l_r_83,l_r_84];
    real l_op1_e3_l_10_86 = Tan(RDiv(RMul(globals.camFOV,0.314159265358979323846264338327950288e1),0.36e3));
    globals.camVmax = RMul(l_op1_e3_l_10_86,l_op1_e3_l_6_56);
    globals.camUmax = RDiv(RMul(RMul(IntToReal(globals.iresU),l_op1_e3_l_10_86),l_op1_e3_l_6_56),IntToReal(globals.iresV));
    real l_r_87 = TensorIndex<&tensor[3],[0]>(TensorRef<[3]>(globals.lightVsp));
    real l_r_88 = TensorIndex<&tensor[3],[1]>(TensorRef<[3]>(globals.lightVsp));
    real l_r_89 = TensorIndex<&tensor[3],[2]>(TensorRef<[3]>(globals.lightVsp));
    globals.L = PACK(VScale<3,4>(RDiv(0.1e1,Sqrt(VDot<3,4>(LOAD_0(TensorRef<[3]>(globals.lightVsp)),LOAD_0(TensorRef<[3]>(globals.lightVsp))))),VEC3{4}(RAdd(RAdd(RMul(VIndex<3,4,0>(v_70),l_r_87),RMul(l_r_82,l_r_88)),RMul(VIndex<3,4,0>(v_58),l_r_89)),RAdd(RAdd(RMul(VIndex<3,4,1>(v_70),l_r_87),RMul(l_r_83,l_r_88)),RMul(VIndex<3,4,1>(v_58),l_r_89)),RAdd(RAdd(RMul(VIndex<3,4,2>(v_70),l_r_87),RMul(l_r_84,l_r_88)),RMul(VIndex<3,4,2>(v_58),l_r_89)))));
  }
//***** STRAND *****
strand ray (int p_ui_91,int p_vi_92) {
  real rayU;
  real rayV;
  tensor[3] UV;
  tensor[3] rayOrig;
  tensor[3] rayVec;
  real camNearVsp;
  real camFarVsp;
  int offset;
  int len;
  varying int itter;
  varying int intersectionItter;
  int idx;
  varying tensor[2] interval;
  varying real s;
  varying real e;
  varying femData(MeshCell) cc;
  varying femData(FuncCell) fc;
  varying output real out;
  varying output tensor[4] rgba;
  initialize (globals) {
    real l_op1_e3_l_9_93 = RNeg(globals.camUmax);
    real l_rayU_94 = RAdd(l_op1_e3_l_9_93,RMul(RDiv(RSub(IntToReal(p_ui_91),-0.5e0),RSub(RSub(IntToReal(globals.iresU),0.5e0),-0.5e0)),RSub(globals.camUmax,l_op1_e3_l_9_93)));
    real l_op1_e3_l_9_95 = RNeg(globals.camVmax);
    real l_rayV_96 = RAdd(l_op1_e3_l_9_95,RMul(RDiv(RSub(IntToReal(p_vi_92),-0.5e0),RSub(RSub(IntToReal(globals.iresV),0.5e0),-0.5e0)),RSub(globals.camVmax,l_op1_e3_l_9_95)));
    vec3{4} v_97 = VScale<3,4>(l_rayU_94,LOAD_0(TensorRef<[3]>(globals.camU)));
    vec3{4} v_98 = VScale<3,4>(l_rayV_96,LOAD_0(TensorRef<[3]>(globals.camV)));
    int l__t_99 = IMul(p_ui_91,globals.iresV);
    int l_offset_100 = Subscript<int[]>(globals.indecies,IAdd(l__t_99,p_vi_92));
    &tensor[2] l_interval_101 = Subscript<tensor[2][]>(globals.times,l_offset_100);
    femData(MeshCell) l_cc_102 = Subscript<femData(MeshCell)[]>(globals.0cell_a,0);
    self.rayU = l_rayU_94;
    self.rayV = l_rayV_96;
    self.UV = PACK(VAdd<3,4>(v_97,v_98));
    self.rayOrig = PACK(VAdd<3,4>(VAdd<3,4>(LOAD_0(TensorRef<[3]>(globals.camEye)),v_97),v_98));
    self.rayVec = PACK(VAdd<3,4>(LOAD_0(TensorRef<[3]>(globals.camN)),VEC3{4}(0.e0,0.e0,0.e0)));
    self.camNearVsp = globals.camNearVsp;
    self.camFarVsp = globals.camFarVsp;
    self.offset = l_offset_100;
    self.len = Subscript<int[]>(globals.indecies,IAdd(IAdd(IMul(globals.iresU,globals.iresV),l__t_99),p_vi_92));
    self.itter = 0;
    self.intersectionItter = 0;
    self.idx = l_offset_100;
    self.interval = TensorCopy<[2]>(l_interval_101);
    self.s = TensorIndex<&tensor[2],[0]>(l_interval_101);
    self.e = TensorIndex<&tensor[2],[1]>(l_interval_101);
    self.cc = l_cc_102;
    self.fc = LoadFem<femData(FuncCell)>(globals.c,ExtractFemItem<int,CellIndex(MeshCell)>(l_cc_102));
    self.out = 0.e0;
    self.rgba = <tensor[4]>[0.e0,0.e0,0.e0,0.e0];
  }
  start (globals) {
    if (EQ<int>(self.len,0)) {
      stabilize;
    }
    femData(MeshCell) l_cc_107 = Subscript<femData(MeshCell)[]>(globals.0cell_a,Subscript<int[]>(globals.cells,self.idx));
    self.cc = l_cc_107;
    self.fc = LoadFem<femData(FuncCell)>(globals.c,ExtractFemItem<int,CellIndex(MeshCell)>(l_cc_107));
    active;
  }
  update (world, globals) {
    int l_intersectionItter_312;
    bool l__t_208;
    real l_s_199;
    real l_cup_198;
    int l_ilit_196;
    int l_ilit_193;
    real l_s_171;
    tensor[2] _arg_108 = <tensor[2]>[self.s,self.e];
    print("Interval:",TensorRef<[2]>(_arg_108),"\n");
    print("inner itter:",self.intersectionItter,"\n");
    print("Outer itter:",self.itter,"\n");
    vec2 v_109 = VEC2(TensorIndex<&tensor[3],[0]>(TensorRef<[3]>(self.rayOrig)),TensorIndex<&tensor[3],[1]>(TensorRef<[3]>(self.rayOrig)));
    vec2 v_110 = VEC2(TensorIndex<&tensor[3],[0]>(TensorRef<[3]>(self.rayVec)),TensorIndex<&tensor[3],[1]>(TensorRef<[3]>(self.rayVec)));
    femData(Mesh) l__t_111 = ExtractFem<femData(Mesh),femData(MeshCell)>(self.cc);
    int l__t_112 = ExtractFemItem<int,CellIndex(MeshCell)>(self.cc);
    tensor[2] _arg_113 = PACK(VAdd<2,2>(v_109,VScale<2,2>(self.s,v_110)));
    femData(MeshPos) l_callNewtonPos_114 = _0A7F_msh_newtonInverse$26FF(_arg_113,l__t_112,l__t_111);
    &tensor[2] l_refPos_115 = ExtractFemItem<tensor[2],RefPos(Mesh)>(l_callNewtonPos_114);
    tensor[2] _arg_116 = PACK(VAdd<2,2>(v_109,VScale<2,2>(self.e,v_110)));
    femData(MeshPos) l_callNewtonPos_117 = _0A7F_msh_newtonInverse$26FF(_arg_116,l__t_112,l__t_111);
    &tensor[2] l_refPos_118 = ExtractFemItem<tensor[2],RefPos(Mesh)>(l_callNewtonPos_117);
    print("inverses:",l_refPos_115,l_refPos_118,"\n");
    femData(FemFunc) l__t_119 = ExtractFem<femData(FemFunc),femData(FuncCell)>(self.fc);
    femData(Space) l__t_120 = ExtractFem<femData(Space),femData(FemFunc)>(l__t_119);
    int l_mulRes_121 = IMul(ExtractFemItem<int,CellIndex(FuncCell)>(self.fc),6);
    int t_122 = ExtractFemItem2<int,int,ExtractIndex(Space)>(l__t_120,l_mulRes_121);
    int t_123 = ExtractFemItem2<int,int,ExtractIndex(Space)>(l__t_120,IAdd(l_mulRes_121,1));
    int t_124 = ExtractFemItem2<int,int,ExtractIndex(Space)>(l__t_120,IAdd(l_mulRes_121,2));
    int t_125 = ExtractFemItem2<int,int,ExtractIndex(Space)>(l__t_120,IAdd(l_mulRes_121,3));
    int t_126 = ExtractFemItem2<int,int,ExtractIndex(Space)>(l__t_120,IAdd(l_mulRes_121,4));
    int t_127 = ExtractFemItem2<int,int,ExtractIndex(Space)>(l__t_120,IAdd(l_mulRes_121,5));
    real t_128 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(l__t_119,IMul(1,t_127));
    real t_129 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(l__t_119,IMul(1,t_126));
    real t_130 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(l__t_119,IMul(1,t_125));
    real t_131 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(l__t_119,IMul(1,t_124));
    real t_132 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(l__t_119,IMul(1,t_123));
    real t_133 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(l__t_119,IMul(1,t_122));
    vec4 v_134 = VEC4(t_133,t_132,t_131,t_130);
    vec2 v_135 = VEC2(t_129,t_128);
    real l_varAcc_136 = TensorIndex<&tensor[2],[0]>(l_refPos_115);
    real l_varAcc_137 = TensorIndex<&tensor[2],[1]>(l_refPos_115);
    real l_prod_138 = RMul(RMul(l_varAcc_136,l_varAcc_136),0.1e1);
    real l_prod_139 = RMul(l_varAcc_136,l_varAcc_137);
    real l_prod_140 = RMul(l_varAcc_136,0.1e1);
    real l_prod_141 = RMul(0.1e1,l_varAcc_137);
    real l_prod_142 = RMul(0.1e1,0.1e1);
    real l_mult_143 = RMul(0.1e1,l_prod_142);
    real l_mult_144 = RMul(0.2e1,RMul(0.1e1,RMul(l_varAcc_137,l_varAcc_137)));
    real l_mult_145 = RMul(0.4e1,l_prod_139);
    real l_mult_146 = RMul(0.2e1,l_prod_138);
    real l_mult_147 = RMul(0.4e1,l_prod_141);
    real l_mult_148 = RMul(-0.4e1,l_prod_139);
    real l_mult_149 = RMul(0.4e1,l_prod_140);
    real l_faVal_150 = RAdd(VDot<2,2>(v_135,VEC2(RAdd(l_mult_147,l_mult_148),RAdd(l_mult_149,RAdd(l_mult_148,RMul(-0.4e1,l_prod_138))))),VDot<4,4>(v_134,VEC4(RAdd(l_mult_143,RAdd(RMul(-0.3e1,l_prod_141),RAdd(l_mult_144,RAdd(RMul(-0.3e1,l_prod_140),RAdd(l_mult_145,l_mult_146))))),RAdd(RMul(-0.1e1,l_prod_140),l_mult_146),RAdd(RMul(-0.1e1,l_prod_141),l_mult_144),l_mult_145)));
    real l__t_151 = TensorIndex<&tensor[3],[2]>(TensorRef<[3]>(self.rayVec));
    real l__t_152 = TensorIndex<&tensor[3],[2]>(TensorRef<[3]>(self.rayOrig));
    real l_fa_153 = RSub(RSub(l_faVal_150,RMul(l__t_151,self.s)),l__t_152);
    real l_varAcc_154 = TensorIndex<&tensor[2],[0]>(l_refPos_118);
    real l_varAcc_155 = TensorIndex<&tensor[2],[1]>(l_refPos_118);
    real l_prod_156 = RMul(RMul(l_varAcc_154,l_varAcc_154),0.1e1);
    real l_prod_157 = RMul(l_varAcc_154,l_varAcc_155);
    real l_prod_158 = RMul(l_varAcc_154,0.1e1);
    real l_prod_159 = RMul(0.1e1,l_varAcc_155);
    real l_mult_160 = RMul(0.2e1,RMul(0.1e1,RMul(l_varAcc_155,l_varAcc_155)));
    real l_mult_161 = RMul(0.4e1,l_prod_157);
    real l_mult_162 = RMul(0.2e1,l_prod_156);
    real l_mult_163 = RMul(-0.4e1,l_prod_157);
    real l_fb_164 = RSub(RSub(RAdd(VDot<2,2>(v_135,VEC2(RAdd(RMul(0.4e1,l_prod_159),l_mult_163),RAdd(RMul(0.4e1,l_prod_158),RAdd(l_mult_163,RMul(-0.4e1,l_prod_156))))),VDot<4,4>(v_134,VEC4(RAdd(l_mult_143,RAdd(RMul(-0.3e1,l_prod_159),RAdd(l_mult_160,RAdd(RMul(-0.3e1,l_prod_158),RAdd(l_mult_161,l_mult_162))))),RAdd(RMul(-0.1e1,l_prod_158),l_mult_162),RAdd(RMul(-0.1e1,l_prod_159),l_mult_160),l_mult_161))),RMul(l__t_151,self.e)),l__t_152);
    tensor[2] _arg_165 = <tensor[2]>[l_fa_153,l_fb_164];
    print("Vals:",TensorRef<[2]>(_arg_165),"\n");
    vec2 v_166 = v_109;
    vec2 v_167 = v_110;
    vec4 v_168 = v_134;
    vec2 v_169 = v_135;
    if (LT<real>(Abs<real>(RSub(l_fa_153,l_fb_164)),globals.eps)) {
      real l_s_170;
      if (GT<real>(Abs<real>(l_fa_153),globals.eps)) {
        self.s = RAdd(self.s,globals.eps);
        active;
      } else {
        l_s_170 = self.s;
      }
      l_s_171 = l_s_170;
    } else {
      l_s_171 = self.s;
    }
    real l_cup_172 = RDiv(RSub(RMul(l_s_171,l_fb_164),RMul(self.e,l_fa_153)),RSub(l_fb_164,l_fa_153));
    print("Mid time:",l_cup_172,"\n");
    tensor[2] _arg_173 = PACK(VAdd<2,2>(v_166,VScale<2,2>(l_cup_172,v_167)));
    femData(MeshPos) l_callNewtonPos_174 = _0A7F_msh_newtonInverse$26FF(_arg_173,l__t_112,l__t_111);
    &tensor[2] l_refPos_175 = ExtractFemItem<tensor[2],RefPos(Mesh)>(l_callNewtonPos_174);
    real l_varAcc_176 = TensorIndex<&tensor[2],[0]>(l_refPos_175);
    real l_varAcc_177 = TensorIndex<&tensor[2],[1]>(l_refPos_175);
    real l_prod_178 = RMul(RMul(l_varAcc_176,l_varAcc_176),0.1e1);
    real l_prod_179 = RMul(l_varAcc_176,l_varAcc_177);
    real l_prod_180 = RMul(l_varAcc_176,0.1e1);
    real l_prod_181 = RMul(0.1e1,l_varAcc_177);
    real l_mult_182 = RMul(0.2e1,RMul(0.1e1,RMul(l_varAcc_177,l_varAcc_177)));
    real l_mult_183 = RMul(0.4e1,l_prod_179);
    real l_mult_184 = RMul(0.2e1,l_prod_178);
    real l_mult_185 = RMul(0.4e1,l_prod_181);
    real l_mult_186 = RMul(-0.4e1,l_prod_179);
    real l_mult_187 = RMul(0.4e1,l_prod_180);
    real l_fmVal_188 = RAdd(VDot<2,2>(v_169,VEC2(RAdd(l_mult_185,l_mult_186),RAdd(l_mult_187,RAdd(l_mult_186,RMul(-0.4e1,l_prod_178))))),VDot<4,4>(v_168,VEC4(RAdd(l_mult_143,RAdd(RMul(-0.3e1,l_prod_181),RAdd(l_mult_182,RAdd(RMul(-0.3e1,l_prod_180),RAdd(l_mult_183,l_mult_184))))),RAdd(RMul(-0.1e1,l_prod_180),l_mult_184),RAdd(RMul(-0.1e1,l_prod_181),l_mult_182),l_mult_183)));
    real l_fm_189 = RSub(RSub(l_fmVal_188,RMul(l__t_151,l_cup_172)),l__t_152);
    tensor[3] _arg_190 = <tensor[3]>[l_fa_153,l_fm_189,l_fb_164];
    print("all vals:",TensorRef<[3]>(_arg_190),"\n");
    int l_intersectionItter_191 = IAdd(self.intersectionItter,1);
    bool l__t_192 = GT<real>(l_fa_153,0.e0);
    if (l__t_192) {
      l_ilit_193 = 1;
    } else {
      int l__t_194;
      if (LT<real>(l_fa_153,0.e0)) {
        l__t_194 = -1;
      } else {
        l__t_194 = 0;
      }
      l_ilit_193 = l__t_194;
    }
    bool l__t_195 = GT<real>(l_fm_189,0.e0);
    if (l__t_195) {
      l_ilit_196 = 1;
    } else {
      int l__t_197;
      if (LT<real>(l_fm_189,0.e0)) {
        l__t_197 = -1;
      } else {
        l__t_197 = 0;
      }
      l_ilit_196 = l__t_197;
    }
    if (LT<int>(IMul(l_ilit_193,l_ilit_196),0)) {
      l_cup_198 = l_cup_172;
      l_s_199 = l_s_171;
    } else {
      real l_cup_204;
      int l_ilit_202;
      int l_ilit_200;
      if (l__t_192) {
        l_ilit_200 = 1;
      } else {
        int l__t_201;
        if (LT<real>(l_fa_153,0.e0)) {
          l__t_201 = -1;
        } else {
          l__t_201 = 0;
        }
        l_ilit_200 = l__t_201;
      }
      if (l__t_195) {
        l_ilit_202 = 1;
      } else {
        int l__t_203;
        if (LT<real>(l_fm_189,0.e0)) {
          l__t_203 = -1;
        } else {
          l__t_203 = 0;
        }
        l_ilit_202 = l__t_203;
      }
      if (GT<int>(IMul(l_ilit_200,l_ilit_202),0)) {
        l_cup_204 = l_cup_172;
      } else {
        l_cup_204 = l_s_171;
      }
      l_cup_198 = self.e;
      l_s_199 = l_cup_204;
    }
    tensor[2] _arg_205 = <tensor[2]>[l_s_199,l_cup_198];
    print("new interval:",TensorRef<[2]>(_arg_205),"\n");
    real l__t_206 = Abs<real>(l_fa_153);
    bool l__t_207 = LT<real>(l__t_206,globals.eps);
    if (l__t_207) {
      l__t_208 = true;
    } else {
      bool l__t_209;
      if (LT<real>(Abs<real>(l_fm_189),globals.eps)) {
        l__t_209 = true;
      } else {
        l__t_209 = GT<int>(l_intersectionItter_191,32);
      }
      l__t_208 = l__t_209;
    }
    if (l__t_208) {
      bool l__t_211;
      real l__t_210 = Abs<real>(l_fm_189);
      if (GT<real>(l__t_210,globals.eps)) {
        l__t_211 = GT<real>(l__t_206,globals.eps);
      } else {
        l__t_211 = false;
      }
      if (l__t_211) {
        int l_itter_212 = IAdd(self.itter,1);
        if (GTE<int>(l_itter_212,self.len)) {
          print("Fin pixel=============================\n");
          self.itter = l_itter_212;
          self.intersectionItter = 0;
          self.s = l_s_199;
          self.e = l_cup_198;
          stabilize;
        }
        int l__t_213 = IAdd(self.offset,l_itter_212);
        &tensor[2] l_interval_214 = Subscript<tensor[2][]>(globals.times,l__t_213);
        femData(MeshCell) l_cc_215 = Subscript<femData(MeshCell)[]>(globals.0cell_a,Subscript<int[]>(globals.cells,l__t_213));
        print("Next interval!\n");
        self.itter = l_itter_212;
        self.intersectionItter = 0;
        self.interval = TensorCopy<[2]>(l_interval_214);
        self.s = TensorIndex<&tensor[2],[0]>(l_interval_214);
        self.e = TensorIndex<&tensor[2],[1]>(l_interval_214);
        self.cc = l_cc_215;
        self.fc = LoadFem<femData(FuncCell)>(globals.c,ExtractFemItem<int,CellIndex(MeshCell)>(l_cc_215));
        active;
      } else {
        vec4 v_310;
        vec3{4} v_300;
        real l_faVal_287;
        real l_s_286;
        vec2 v_285;
        real l_fmVal_251;
        vec2 v_250;
        vec2 v_216 = VEC2(0.e0,0.e0);
        if (LT<real>(l__t_210,globals.eps)) {
          real l_sum_217 = RAdd(RMul(-0.3e1,l_prod_142),RAdd(l_mult_185,l_mult_187));
          real l_mult_218 = RMul(-0.1e1,l_prod_142);
          real l_basisEval_219 = RMul(-0.4e1,l_prod_181);
          real l_mult_220 = RMul(0.4e1,l_prod_142);
          real l_mult_221 = RMul(-0.4e1,l_prod_180);
          real l_vdot_222 = RAdd(VDot<2,2>(v_169,VEC2(l_basisEval_219,RAdd(l_mult_220,RAdd(l_basisEval_219,RMul(-0.8e1,l_prod_180))))),VDot<4,4>(v_168,VEC4(l_sum_217,RAdd(l_mult_218,l_mult_187),0.e0,l_mult_185)));
          real l_vdot_223 = RAdd(VDot<2,2>(v_169,VEC2(RAdd(l_mult_220,l_mult_221),l_mult_221)),VDot<4,4>(v_168,VEC4(l_sum_217,0.e0,RAdd(l_mult_218,l_mult_185),l_mult_187)));
          int l_mulRes_224 = IMul(l__t_112,3);
          int t_225 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(l__t_111,l_mulRes_224);
          int l_mulRes_226 = IMul(2,t_225);
          int t_227 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(l__t_111,IAdd(l_mulRes_224,1));
          int l_mulRes_228 = IMul(2,t_227);
          real l_dof_load_229 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(l__t_111,l_mulRes_228);
          real l_dof_load_230 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(l__t_111,IAdd(1,l_mulRes_228));
          int t_231 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(l__t_111,IAdd(l_mulRes_224,2));
          int l_mulRes_232 = IMul(2,t_231);
          real l_dof_load_233 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(l__t_111,l_mulRes_232);
          real l_dof_load_234 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(l__t_111,IAdd(1,l_mulRes_232));
          real t_235 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(l__t_111,l_mulRes_226);
          real l_r_236 = RMul(t_235,l_mult_218);
          real l_r_237 = RAdd(RAdd(l_r_236,RMul(l_dof_load_229,l_mult_143)),RMul(l_dof_load_233,0.e0));
          real l_r_238 = RAdd(RAdd(l_r_236,RMul(l_dof_load_229,0.e0)),RMul(l_dof_load_233,l_mult_143));
          real t_239 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(l__t_111,IAdd(1,l_mulRes_226));
          real l_r_240 = RMul(t_239,l_mult_218);
          real l_r_241 = RAdd(RAdd(l_r_240,RMul(l_dof_load_230,l_mult_143)),RMul(l_dof_load_234,0.e0));
          real l_r_242 = RAdd(RAdd(l_r_240,RMul(l_dof_load_230,0.e0)),RMul(l_dof_load_234,l_mult_143));
          real l_r_243 = RAdd(RMul(0.e0,l_r_237),RMul(-0.1e1,l_r_241));
          real l_r_244 = RMul(0.e0,l_r_238);
          real l_r_245 = RAdd(l_r_244,RMul(-0.1e1,l_r_242));
          real l_r_246 = RAdd(RMul(0.1e1,l_r_237),RMul(0.e0,l_r_241));
          real l_r_247 = RMul(0.e0,l_r_242);
          real l_r_248 = RAdd(RMul(0.1e1,l_r_238),l_r_247);
          real l_op1_e3_l_14_249 = VDot<2,2>(VEC2(l_r_237,l_r_241),VEC2(RAdd(l_r_244,RMul(0.1e1,l_r_242)),RAdd(RMul(-0.1e1,l_r_238),l_r_247)));
          v_250 = VEC2(RAdd(RMul(l_vdot_222,RDiv(RAdd(RMul(0.e0,l_r_243),RMul(-0.1e1,l_r_245)),l_op1_e3_l_14_249)),RMul(l_vdot_223,RDiv(RAdd(RMul(0.1e1,l_r_243),RMul(0.e0,l_r_245)),l_op1_e3_l_14_249))),RAdd(RMul(l_vdot_222,RDiv(RAdd(RMul(0.e0,l_r_246),RMul(-0.1e1,l_r_248)),l_op1_e3_l_14_249)),RMul(l_vdot_223,RDiv(RAdd(RMul(0.1e1,l_r_246),RMul(0.e0,l_r_248)),l_op1_e3_l_14_249))));
          l_fmVal_251 = l_fmVal_188;
        } else {
          v_250 = v_216;
          l_fmVal_251 = self.out;
        }
        if (l__t_207) {
          real l_sum_252 = RAdd(RMul(-0.3e1,l_prod_142),RAdd(l_mult_147,l_mult_149));
          real l_mult_253 = RMul(-0.1e1,l_prod_142);
          real l_basisEval_254 = RMul(-0.4e1,l_prod_141);
          real l_mult_255 = RMul(0.4e1,l_prod_142);
          real l_mult_256 = RMul(-0.4e1,l_prod_140);
          real l_vdot_257 = RAdd(VDot<2,2>(v_169,VEC2(l_basisEval_254,RAdd(l_mult_255,RAdd(l_basisEval_254,RMul(-0.8e1,l_prod_140))))),VDot<4,4>(v_168,VEC4(l_sum_252,RAdd(l_mult_253,l_mult_149),0.e0,l_mult_147)));
          real l_vdot_258 = RAdd(VDot<2,2>(v_169,VEC2(RAdd(l_mult_255,l_mult_256),l_mult_256)),VDot<4,4>(v_168,VEC4(l_sum_252,0.e0,RAdd(l_mult_253,l_mult_147),l_mult_149)));
          int l_mulRes_259 = IMul(l__t_112,3);
          int t_260 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(l__t_111,l_mulRes_259);
          int l_mulRes_261 = IMul(2,t_260);
          int t_262 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(l__t_111,IAdd(l_mulRes_259,1));
          int l_mulRes_263 = IMul(2,t_262);
          real l_dof_load_264 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(l__t_111,l_mulRes_263);
          real l_dof_load_265 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(l__t_111,IAdd(1,l_mulRes_263));
          int t_266 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(l__t_111,IAdd(l_mulRes_259,2));
          int l_mulRes_267 = IMul(2,t_266);
          real l_dof_load_268 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(l__t_111,l_mulRes_267);
          real l_dof_load_269 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(l__t_111,IAdd(1,l_mulRes_267));
          real t_270 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(l__t_111,l_mulRes_261);
          real l_r_271 = RMul(t_270,l_mult_253);
          real l_r_272 = RAdd(RAdd(l_r_271,RMul(l_dof_load_264,l_mult_143)),RMul(l_dof_load_268,0.e0));
          real l_r_273 = RAdd(RAdd(l_r_271,RMul(l_dof_load_264,0.e0)),RMul(l_dof_load_268,l_mult_143));
          real t_274 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(l__t_111,IAdd(1,l_mulRes_261));
          real l_r_275 = RMul(t_274,l_mult_253);
          real l_r_276 = RAdd(RAdd(l_r_275,RMul(l_dof_load_265,l_mult_143)),RMul(l_dof_load_269,0.e0));
          real l_r_277 = RAdd(RAdd(l_r_275,RMul(l_dof_load_265,0.e0)),RMul(l_dof_load_269,l_mult_143));
          real l_r_278 = RAdd(RMul(0.e0,l_r_272),RMul(-0.1e1,l_r_276));
          real l_r_279 = RMul(0.e0,l_r_273);
          real l_r_280 = RAdd(l_r_279,RMul(-0.1e1,l_r_277));
          real l_r_281 = RAdd(RMul(0.1e1,l_r_272),RMul(0.e0,l_r_276));
          real l_r_282 = RMul(0.e0,l_r_277);
          real l_r_283 = RAdd(RMul(0.1e1,l_r_273),l_r_282);
          real l_op1_e3_l_14_284 = VDot<2,2>(VEC2(l_r_272,l_r_276),VEC2(RAdd(l_r_279,RMul(0.1e1,l_r_277)),RAdd(RMul(-0.1e1,l_r_273),l_r_282)));
          v_285 = VEC2(RAdd(RMul(l_vdot_257,RDiv(RAdd(RMul(0.e0,l_r_278),RMul(-0.1e1,l_r_280)),l_op1_e3_l_14_284)),RMul(l_vdot_258,RDiv(RAdd(RMul(0.1e1,l_r_278),RMul(0.e0,l_r_280)),l_op1_e3_l_14_284))),RAdd(RMul(l_vdot_257,RDiv(RAdd(RMul(0.e0,l_r_281),RMul(-0.1e1,l_r_283)),l_op1_e3_l_14_284)),RMul(l_vdot_258,RDiv(RAdd(RMul(0.1e1,l_r_281),RMul(0.e0,l_r_283)),l_op1_e3_l_14_284))));
          l_s_286 = l_s_199;
          l_faVal_287 = l_faVal_150;
        } else {
          v_285 = v_250;
          l_s_286 = l_cup_172;
          l_faVal_287 = l_fmVal_251;
        }
        print("Out val:",l_faVal_287,"\n");
        tensor[2] _arg_288 = PACK(v_285);
        print("Grad val:",TensorRef<[2]>(_arg_288),"\n");
        vec3{4} v_289 = VEC3{4}(0.1e1,0.1e1,0.1e1);
        if (NEQ<real>(globals.cmin,globals.cmax)) {
          tensor[3,2] l_voxels_296;
          real l_imgPos_290 = RAdd(RMul(Transform<IMAGE1D<double[3]>>(globals.cmap),RAdd(-0.1e1,RMul(RDiv(RSub(l_faVal_287,globals.cmin),RSub(globals.cmax,globals.cmin)),RSub(0.1e1,-0.1e1)))),Translate<IMAGE1D<double[3]>>(globals.cmap));
          real l_nd_291 = RFloor(l_imgPos_290);
          real l_f_292 = RSub(l_imgPos_290,l_nd_291);
          int l_n_293 = RealToInt(l_nd_291);
          if (IndexInside<IMAGE1D<double[3]>,2>(l_n_293,globals.cmap)) {
            int l_offp_294 = IMul(3,l_n_293);
            int l_offp_295 = IMul(3,IAdd(l_n_293,1));
            l_voxels_296 = <tensor[3,2]>[LoadVoxel<IMAGE1D<double[3]>>(globals.cmap,l_offp_294),LoadVoxel<IMAGE1D<double[3]>>(globals.cmap,l_offp_295),LoadVoxel<IMAGE1D<double[3]>>(globals.cmap,IAdd(l_offp_294,1)),LoadVoxel<IMAGE1D<double[3]>>(globals.cmap,IAdd(l_offp_295,1)),LoadVoxel<IMAGE1D<double[3]>>(globals.cmap,IAdd(l_offp_294,2)),LoadVoxel<IMAGE1D<double[3]>>(globals.cmap,IAdd(l_offp_295,2))];
          } else {
            int l_offp_297 = IMul(3,ControlIndex<IMAGE1D<double[3]>,clamp,0>(globals.cmap,l_n_293));
            int l_offp_298 = IMul(3,ControlIndex<IMAGE1D<double[3]>,clamp,0>(globals.cmap,IAdd(l_n_293,1)));
            l_voxels_296 = <tensor[3,2]>[LoadVoxel<IMAGE1D<double[3]>>(globals.cmap,l_offp_297),LoadVoxel<IMAGE1D<double[3]>>(globals.cmap,l_offp_298),LoadVoxel<IMAGE1D<double[3]>>(globals.cmap,IAdd(l_offp_297,1)),LoadVoxel<IMAGE1D<double[3]>>(globals.cmap,IAdd(l_offp_298,1)),LoadVoxel<IMAGE1D<double[3]>>(globals.cmap,IAdd(l_offp_297,2)),LoadVoxel<IMAGE1D<double[3]>>(globals.cmap,IAdd(l_offp_298,2))];
          }
          vec2 v_299 = VAdd<2,2>(VEC2(0.1e1,0.1e1),VMul<2,2>(VEC2(l_f_292,RSub(l_f_292,0.1e1)),VEC2(-0.1e1,0.1e1)));
          v_300 = VEC3{4}(VDot<2,2>(LOAD_0(ProjectLast<tensor[3,2],[0]>(l_voxels_296)),v_299),VDot<2,2>(LOAD_0(ProjectLast<tensor[3,2],[1]>(l_voxels_296)),v_299),VDot<2,2>(LOAD_0(ProjectLast<tensor[3,2],[2]>(l_voxels_296)),v_299));
        } else {
          v_300 = v_289;
        }
        if (globals.light) {
          vec3{4} v_301 = VEC3{4}(VIndex<2,2,0>(v_285),VIndex<2,2,1>(v_285),-0.1e1);
          vec3{4} v_302 = VAdd<3,4>(VNeg<3,4>(VScale<3,4>(RDiv(0.1e1,Sqrt(VDot<3,4>(LOAD_0(TensorRef<[3]>(self.rayVec)),LOAD_0(TensorRef<[3]>(self.rayVec))))),LOAD_0(TensorRef<[3]>(self.rayVec)))),LOAD_0(TensorRef<[3]>(globals.L)));
          vec3{4} v_303 = VAdd<3,4>(LOAD_0(TensorRef<[3]>(globals.mcnear)),VScale<3,4>(RDiv(RSub(l_s_286,self.camNearVsp),RSub(self.camFarVsp,self.camNearVsp)),VSub<3,4>(LOAD_0(TensorRef<[3]>(globals.mcfar)),LOAD_0(TensorRef<[3]>(globals.mcnear)))));
          real l_r_304 = VIndex<3,4,0>(v_303);
          real l_r_305 = RMul(Max<real>(0.e0,VDot<3,4>(v_301,LOAD_0(TensorRef<[3]>(globals.L)))),globals.phongKd);
          real l_r_306 = VIndex<3,4,1>(v_303);
          real l_r_307 = VIndex<3,4,2>(v_303);
          real l_r_308 = RMul(MathFn<pow>(Max<real>(0.e0,RMul(RDiv(0.1e1,Sqrt(VDot<3,4>(v_302,v_302))),VDot<3,4>(v_301,v_302))),globals.phongSp),globals.phongKs);
          vec3{4} v_309 = VAdd<3,4>(VAdd<3,4>(VScale<3,4>(globals.phongKa,v_300),VEC3{4}(RMul(RMul(l_r_305,VIndex<3,4,0>(v_300)),l_r_304),RMul(RMul(l_r_305,VIndex<3,4,1>(v_300)),l_r_306),RMul(RMul(l_r_305,VIndex<3,4,2>(v_300)),l_r_307))),VEC3{4}(RMul(l_r_308,l_r_304),RMul(l_r_308,l_r_306),RMul(l_r_308,l_r_307)));
          v_310 = VEC4(VIndex<3,4,0>(v_309),VIndex<3,4,1>(v_309),VIndex<3,4,2>(v_309),0.1e1);
        } else {
          v_310 = VEC4(VIndex<3,4,0>(v_300),VIndex<3,4,1>(v_300),VIndex<3,4,2>(v_300),0.1e1);
        }
        self.intersectionItter = 0;
        self.s = l_s_199;
        self.e = l_cup_198;
        self.out = l_faVal_287;
        self.rgba = PACK(v_310);
        stabilize;
      }
    } else {
      print("=========\n");
      l_intersectionItter_312 = l_intersectionItter_191;
    }
    self.intersectionItter = l_intersectionItter_312;
    self.s = l_s_199;
    self.e = l_cup_198;
    active;
  }
}
//***** CREATE GRID(2) *****
  {
    for i_vi_313 = 0 to ISub(globals.iresU,1) {
      for i_ui_314 = 0 to ISub(globals.iresV,1) {
        new ray(i_ui_314,i_vi_313);
      }
    }
  }
#### end program ####
/usr/bin/clang++ -fPIC -m64 -c -Wreturn-type -Wuninitialized -g -O0 -mavx2 -msse4.2 -I/home/teocollin/gitcode/diderot/include -I/usr/local/include evalProg.cxx
/usr/bin/clang++ -shared -o evalProg.so evalProg.o /home/teocollin/gitcode/diderot/lib/diderot-rt-seq-debug.o -Wl,-rpath=/usr/local/lib -L/usr/local/lib -lteem  -lspatialindex_c   -lspatialindex 
                                       Phase                                         Exclusive    Total  
  compiler ..........................................................................   0.045     1.702
    front end .......................................................................   0.239     0.303
      parser ........................................................................   0.042     0.042
      typechecker ...................................................................   0.022     0.022
      simplify ......................................................................   0.000     0.000
    translate .......................................................................   0.014     0.014
    High IR optimization ............................................................   0.020     0.053
      High IR value numbering .......................................................   0.013     0.013
      High IR normalization .........................................................   0.020     0.020
      High IR checking ..............................................................   0.000     0.000
    High to Mid translation .........................................................   0.037     0.037
    Mid IR optimization .............................................................   0.023     0.044
      Mid IR contraction ............................................................   0.004     0.004
      Mid IR value numbering ........................................................   0.016     0.016
      Mid IR border control .........................................................   0.001     0.001
      Mid IR checking ...............................................................   0.000     0.000
    Mid to Low translation ..........................................................   0.028     0.028
    Low IR optimization .............................................................   0.041     0.086
      Low IR contraction ............................................................   0.022     0.022
      Low IR value numbering ........................................................   0.023     0.023
      Low IR checking ...............................................................   0.000     0.000
    Low to Tree translation .........................................................   0.030     0.030
    Tree IR optimization ............................................................   0.005     0.005
      Tree IR contraction ...........................................................   0.000     0.000
      Tree IR checking ..............................................................   0.000     0.000
    code generation .................................................................   0.025     1.056
      C compiler ....................................................................   1.031     1.031
