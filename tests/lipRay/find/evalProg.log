/* ParseTree: After parsing */
  Program @ [evalProg.diderot:2.1-182.0] 
    [
      Input: isoval= @ [evalProg.diderot:2.1-25] 
        Lit: 0.2e0 @ [evalProg.diderot:2.21-24] 
      Input: thick= @ [evalProg.diderot:2.27-3.0] 
        Lit: 0.7e-1 @ [evalProg.diderot:2.46-50] 
      Input: camEye= @ [evalProg.diderot:3.1-36] 
        Cons @ [evalProg.diderot:3.21-35] 
          [
            Lit: 0.3e1 @ [evalProg.diderot:3.22-25] 
            UnaryOp: unary - @ [evalProg.diderot:3.26-30] 
              Lit: 0.3e1 @ [evalProg.diderot:3.27-30] 
            Lit: 0.3e1 @ [evalProg.diderot:3.31-34] 
          ]
      Input: camAt= @ [evalProg.diderot:3.38-71] 
        Cons @ [evalProg.diderot:3.57-70] 
          [
            Lit: 0.5e0 @ [evalProg.diderot:3.58-61] 
            Lit: 0.5e0 @ [evalProg.diderot:3.62-65] 
            Lit: 0.5e0 @ [evalProg.diderot:3.66-69] 
          ]
      Input: camUp= @ [evalProg.diderot:3.74-4.0] 
        Cons @ [evalProg.diderot:3.93-100] 
          [
            Lit: 0 @ [evalProg.diderot:3.94-95] 
            Lit: 0 @ [evalProg.diderot:3.96-97] 
            Lit: 1 @ [evalProg.diderot:3.98-99] 
          ]
      Input: camFOV= @ [evalProg.diderot:4.1-26] 
        Lit: 0.137e2 @ [evalProg.diderot:4.21-25] 
      Input: iresU= @ [evalProg.diderot:4.28-49] 
        Lit: 10 @ [evalProg.diderot:4.46-48] 
      Input: iresV= @ [evalProg.diderot:4.53-5.0] 
        Lit: 10 @ [evalProg.diderot:4.71-73] 
      Input: camNear= @ [evalProg.diderot:5.1-25] 
        UnaryOp: unary - @ [evalProg.diderot:5.22-24] 
          Lit: 2 @ [evalProg.diderot:5.23-24] 
      Input: camFar= @ [evalProg.diderot:5.26-48] 
        Lit: 5 @ [evalProg.diderot:5.46-47] 
      Input: refStep= @ [evalProg.diderot:6.1-26] 
        Lit: 0.1e1 @ [evalProg.diderot:6.22-25] 
      Input: rayStep= @ [evalProg.diderot:6.27-7.0] 
        Lit: 0.1e-1 @ [evalProg.diderot:6.47-51] 
      Type: msh= @ [evalProg.diderot:11.1-12.0] 
        Mesh @ [evalProg.diderot:11.6-10] 
        From File : evalProg.json @ [evalProg.diderot:11.1-12.0] 
      Type: fns= @ [evalProg.diderot:12.1-13.0] 
        FunctionSpace(msh) @ [evalProg.diderot:12.6-26] 
          [ ]
        From File : evalProg.json @ [evalProg.diderot:12.1-13.0] 
      Type: func= @ [evalProg.diderot:13.1-14.0] 
        FemFunction(fns) @ [evalProg.diderot:13.6-22] 
        From File : evalProg.json @ [evalProg.diderot:13.1-14.0] 
      Input: a @ [evalProg.diderot:14.1-15.0] 
      Input: b= @ [evalProg.diderot:15.1-16.0] 
        Apply @ [evalProg.diderot:15.15-21] 
          Var: fns @ [evalProg.diderot:15.15-18] 
          [
            Var: a @ [evalProg.diderot:15.19-20] 
          ]
      Input: c= @ [evalProg.diderot:16.1-17.0] 
        Apply @ [evalProg.diderot:16.16-23] 
          Var: func @ [evalProg.diderot:16.16-20] 
          [
            Var: b @ [evalProg.diderot:16.21-22] 
          ]
      Input: zeroEps= @ [evalProg.diderot:17.1-18.0] 
        Lit: 0.1e-10 @ [evalProg.diderot:17.22-35] 
      Input: intervalEps= @ [evalProg.diderot:18.1-19.0] 
        Lit: 0.1e-10 @ [evalProg.diderot:18.26-39] 
      Var @ [evalProg.diderot:22.1-23.0] 
        Decl: camDist= @ [evalProg.diderot:22.1-23.0] 
          UnaryOp: |()| @ [evalProg.diderot:22.16-32] 
            BinOp: - @ [evalProg.diderot:22.17-31] 
              Var: camAt @ [evalProg.diderot:22.17-22] 
              Var: camEye @ [evalProg.diderot:22.25-31] 
      Var @ [evalProg.diderot:23.1-37] 
        Decl: camNearVsp= @ [evalProg.diderot:23.1-37] 
          BinOp: + @ [evalProg.diderot:23.19-36] 
            Var: camNear @ [evalProg.diderot:23.19-26] 
            Var: camDist @ [evalProg.diderot:23.29-36] 
      Var @ [evalProg.diderot:24.1-35] 
        Decl: camFarVsp= @ [evalProg.diderot:24.1-35] 
          BinOp: + @ [evalProg.diderot:24.18-34] 
            Var: camFar @ [evalProg.diderot:24.18-24] 
            Var: camDist @ [evalProg.diderot:24.27-34] 
      Var @ [evalProg.diderot:25.1-39] 
        Decl: camN= @ [evalProg.diderot:25.1-39] 
          Apply @ [evalProg.diderot:25.13-38] 
            Var: normalize @ [evalProg.diderot:25.13-22] 
            [
              BinOp: - @ [evalProg.diderot:25.23-37] 
                Var: camAt @ [evalProg.diderot:25.23-28] 
                Var: camEye @ [evalProg.diderot:25.31-37] 
            ]
      Var @ [evalProg.diderot:26.1-38] 
        Decl: camU= @ [evalProg.diderot:26.1-38] 
          Apply @ [evalProg.diderot:26.13-37] 
            Var: normalize @ [evalProg.diderot:26.13-22] 
            [
              BinOp: × @ [evalProg.diderot:26.23-36] 
                Var: camN @ [evalProg.diderot:26.23-27] 
                Var: camUp @ [evalProg.diderot:26.31-36] 
            ]
      Var @ [evalProg.diderot:27.1-26] 
        Decl: camV= @ [evalProg.diderot:27.1-26] 
          BinOp: × @ [evalProg.diderot:27.13-25] 
            Var: camU @ [evalProg.diderot:27.13-17] 
            Var: camN @ [evalProg.diderot:27.21-25] 
      Var @ [evalProg.diderot:28.1-29.0] 
        Decl: camVmax= @ [evalProg.diderot:28.1-29.0] 
          BinOp: * @ [evalProg.diderot:28.16-42] 
            Apply @ [evalProg.diderot:28.16-34] 
              Var: tan @ [evalProg.diderot:28.16-19] 
              [
                BinOp: / @ [evalProg.diderot:28.20-33] 
                  BinOp: * @ [evalProg.diderot:28.20-29] 
                    Var: camFOV @ [evalProg.diderot:28.20-26] 
                    Lit: 0.314159265358979323846264338327950288e1 @ [evalProg.diderot:28.27-29] 
                  Lit: 360 @ [evalProg.diderot:28.30-33] 
              ]
            Var: camDist @ [evalProg.diderot:28.35-42] 
      Var @ [evalProg.diderot:29.1-30.0] 
        Decl: camUmax= @ [evalProg.diderot:29.1-30.0] 
          BinOp: / @ [evalProg.diderot:29.16-35] 
            BinOp: * @ [evalProg.diderot:29.16-29] 
              Var: camVmax @ [evalProg.diderot:29.16-23] 
              Var: iresU @ [evalProg.diderot:29.24-29] 
            Var: iresV @ [evalProg.diderot:29.30-35] 
      Input: indecies @ [evalProg.diderot:33.1-22] 
      Input: times @ [evalProg.diderot:34.1-20] 
      Input: cells @ [evalProg.diderot:35.1-19] 
      Input: mcnear= @ [evalProg.diderot:37.1-38.0] 
        "material color at near clipping plane (for depth cuing)"
        Cons @ [evalProg.diderot:37.81-88] 
          [
            Lit: 1 @ [evalProg.diderot:37.82-83] 
            Lit: 1 @ [evalProg.diderot:37.84-85] 
            Lit: 1 @ [evalProg.diderot:37.86-87] 
          ]
      Input: mcfar= @ [evalProg.diderot:38.1-39.0] 
        "material color at far clipping plane"
        Cons @ [evalProg.diderot:38.61-68] 
          [
            Lit: 1 @ [evalProg.diderot:38.62-63] 
            Lit: 1 @ [evalProg.diderot:38.64-65] 
            Lit: 1 @ [evalProg.diderot:38.66-67] 
          ]
      Input: cmap= @ [evalProg.diderot:39.1-40.0] 
        "univariate colormap"
        Image @ [evalProg.diderot:39.50-123] 
          Lit: "/home/teocollin/gitcode/diderot/tests/lipRay/find/cmap.nrrd" @ [evalProg.diderot:39.61-122] 
      Input: cmin= @ [evalProg.diderot:40.1-41.0] 
        "value mapped to min end of colormap"
        Lit: 0.e0 @ [evalProg.diderot:40.59-62] 
      Input: cmax= @ [evalProg.diderot:41.1-42.0] 
        "value mapped to max end of colormap. By default cmin==cmax==0, which disables this colormapping"
        Lit: 0.1e1 @ [evalProg.diderot:41.119-122] 
      Var @ [evalProg.diderot:42.1-43.0] 
        Decl: CM= @ [evalProg.diderot:42.1-43.0] 
          BinOp: ⊛ @ [evalProg.diderot:42.20-40] 
            Var: tent @ [evalProg.diderot:42.20-24] 
            Apply @ [evalProg.diderot:42.29-40] 
              Var: clamp @ [evalProg.diderot:42.29-34] 
              [
                Var: cmap @ [evalProg.diderot:42.35-39] 
              ]
      Input: light= @ [evalProg.diderot:44.1-45.0] 
        Lit: false @ [evalProg.diderot:44.20-25] 
      Input: phongKa= @ [evalProg.diderot:45.1-46.0] 
        "Blinn-Phong ambient component"
        Lit: 0.5e0 @ [evalProg.diderot:45.56-59] 
      Input: phongKd= @ [evalProg.diderot:46.1-47.0] 
        "Blinn-Phong diffuse component"
        Lit: 0.5e0 @ [evalProg.diderot:46.56-59] 
      Input: phongKs= @ [evalProg.diderot:47.1-48.0] 
        "Blinn-Phong specular component"
        Lit: 0.e0 @ [evalProg.diderot:47.57-60] 
      Input: phongSp= @ [evalProg.diderot:48.1-49.0] 
        "Blinn-Phong specularity exponent"
        Lit: 60 @ [evalProg.diderot:48.59-61] 
      Input: maxAlpha= @ [evalProg.diderot:49.1-50.0] 
        "maximum opacity on rendered surface"
        Lit: 1 @ [evalProg.diderot:49.63-64] 
      Input: lightVsp= @ [evalProg.diderot:50.1-37] 
        Cons @ [evalProg.diderot:50.23-36] 
          [
            Lit: 0 @ [evalProg.diderot:50.24-25] 
            Lit: 0.369e1 @ [evalProg.diderot:50.26-30] 
            Lit: 0.153e1 @ [evalProg.diderot:50.31-35] 
          ]
      Var @ [evalProg.diderot:51.1-52.0] 
        Decl: L= @ [evalProg.diderot:51.1-52.0] 
          BinOp: • @ [evalProg.diderot:51.10-59] 
            Apply @ [evalProg.diderot:51.10-37] 
              Var: transpose @ [evalProg.diderot:51.10-19] 
              [
                Cons @ [evalProg.diderot:51.20-36] 
                  [
                    Var: camU @ [evalProg.diderot:51.21-25] 
                    Var: camV @ [evalProg.diderot:51.26-30] 
                    Var: camN @ [evalProg.diderot:51.31-35] 
                  ]
              ]
            Apply @ [evalProg.diderot:51.40-59] 
              Var: normalize @ [evalProg.diderot:51.40-49] 
              [
                Var: lightVsp @ [evalProg.diderot:51.50-58] 
              ]
      Input: debug= @ [evalProg.diderot:53.1-54.0] 
        Lit: false @ [evalProg.diderot:53.20-25] 
      Input: debugU= @ [evalProg.diderot:54.1-55.0] 
        Lit: 8 @ [evalProg.diderot:54.20-21] 
      Input: debugV= @ [evalProg.diderot:55.1-56.0] 
        Lit: 2 @ [evalProg.diderot:55.20-21] 
      Func: sign @ [evalProg.diderot:58.1-64.1] 
        Int @ [evalProg.diderot:58.10-14] 
        [
          Param: x @ [evalProg.diderot:58.19-25] 
            Tensor @ [evalProg.diderot:58.19-24] 
              [ ]
        ]
        Stmt @ [evalProg.diderot:58.1-64.1] 
          IfThenElse @ [evalProg.diderot:59.3-62.0] 
            BinOp: > @ [evalProg.diderot:59.7-14] 
              Var: x @ [evalProg.diderot:59.7-8] 
              Lit: 0.e0 @ [evalProg.diderot:59.11-14] 
            Return @ [evalProg.diderot:59.17-27] 
              Lit: 1 @ [evalProg.diderot:59.24-25] 
            IfThenElse @ [evalProg.diderot:60.8-62.0] 
              BinOp: < @ [evalProg.diderot:60.12-19] 
                Var: x @ [evalProg.diderot:60.12-13] 
                Lit: 0.e0 @ [evalProg.diderot:60.16-19] 
              Return @ [evalProg.diderot:60.21-32] 
                UnaryOp: unary - @ [evalProg.diderot:60.28-30] 
                  Lit: 1 @ [evalProg.diderot:60.29-30] 
              Return @ [evalProg.diderot:61.9-19] 
                Lit: 0 @ [evalProg.diderot:61.16-17] 
    ]
    Strand: ray @ [evalProg.diderot:64.1-181.3] 
      [
        Param: ui @ [evalProg.diderot:64.12-18] 
          Int @ [evalProg.diderot:64.12-16] 
        Param: vi @ [evalProg.diderot:64.20-26] 
          Int @ [evalProg.diderot:64.20-24] 
      ]
      [
        VarDcl @ [evalProg.diderot:65.3-60] 
        VarDcl @ [evalProg.diderot:66.3-67.0] 
        VarDcl @ [evalProg.diderot:67.3-68.0] 
        VarDcl @ [evalProg.diderot:69.3-70.0] 
        VarDcl @ [evalProg.diderot:70.3-32] 
        VarDcl @ [evalProg.diderot:71.3-72.0] 
        VarDcl @ [evalProg.diderot:72.3-73.0] 
        VarDcl @ [evalProg.diderot:73.3-74.0] 
        VarDcl @ [evalProg.diderot:74.3-42] 
        VarDcl @ [evalProg.diderot:75.3-54] 
        VarDcl @ [evalProg.diderot:76.3-77.0] 
        VarDcl @ [evalProg.diderot:77.3-78.0] 
        VarDcl @ [evalProg.diderot:78.3-79.0] 
        VarDcl @ [evalProg.diderot:79.3-80.0] 
        VarDcl @ [evalProg.diderot:80.3-81.0] 
        VarDcl @ [evalProg.diderot:81.3-82.0] 
        VarDcl @ [evalProg.diderot:82.3-83.0] 
        VarDcl @ [evalProg.diderot:83.3-84.0] 
        VarDcl @ [evalProg.diderot:84.3-85.0] 
        VarDcl: output @ [evalProg.diderot:85.3-86.0] 
        VarDcl: output @ [evalProg.diderot:86.3-87.0] 
        VarDcl: output @ [evalProg.diderot:87.3-88.0] 
      ]
      [
        Method: Start @ [evalProg.diderot:89.3-96.3] 
          Block @ [evalProg.diderot:89.8-94.4] 
            [
              IfThen @ [evalProg.diderot:90.5-91.5] 
                AndAlso @ [evalProg.diderot:90.9-50] 
                  Var: debug @ [evalProg.diderot:90.9-14] 
                  AndAlso @ [evalProg.diderot:90.15-50] 
                    BinOp: != @ [evalProg.diderot:90.19-31] 
                      Var: ui @ [evalProg.diderot:90.19-21] 
                      Var: debugU @ [evalProg.diderot:90.25-31] 
                    BinOp: != @ [evalProg.diderot:90.37-49] 
                      Var: vi @ [evalProg.diderot:90.37-39] 
                      Var: debugV @ [evalProg.diderot:90.43-49] 
                Stabilize @ [evalProg.diderot:90.52-62] 
              IfThen @ [evalProg.diderot:91.5-92.5] 
                BinOp: == @ [evalProg.diderot:91.8-16] 
                  Var: len @ [evalProg.diderot:91.8-11] 
                  Lit: 0 @ [evalProg.diderot:91.15-16] 
                Block @ [evalProg.diderot:91.17-92.0] 
                  [
                    Print @ [evalProg.diderot:91.19-77] 
                      [
                        Lit: "(find:)No intersection found:" @ [evalProg.diderot:91.25-56] 
                        Var: ui @ [evalProg.diderot:91.58-60] 
                        Lit: "/" @ [evalProg.diderot:91.62-65] 
                        Var: vi @ [evalProg.diderot:91.67-69] 
                        Lit: "\n" @ [evalProg.diderot:91.71-75] 
                      ]
                    Stabilize @ [evalProg.diderot:91.77-87] 
                  ]
              Assign: cc= @ [evalProg.diderot:92.5-93.0] 
                Subscript @ [evalProg.diderot:92.10-29] 
                  Select @ [evalProg.diderot:92.10-29] 
                    Var: a @ [evalProg.diderot:92.10-11] 
                    cells
                  [
                    Subscript @ [evalProg.diderot:92.18-28] 
                      Var: cells @ [evalProg.diderot:92.18-23] 
                      [
                        Var: idx @ [evalProg.diderot:92.24-27] 
                      ]
                  ]
              Assign: fc= @ [evalProg.diderot:93.5-94.0] 
                Apply @ [evalProg.diderot:93.10-24] 
                  Select @ [evalProg.diderot:93.10-24] 
                    Var: c @ [evalProg.diderot:93.10-11] 
                    funcCell
                  [
                    Var: cc @ [evalProg.diderot:93.21-23] 
                  ]
            ]
        Method: Update @ [evalProg.diderot:96.3-181.1] 
          Block @ [evalProg.diderot:96.10-179.0] 
            [
              Print @ [evalProg.diderot:97.5-98.0] 
                [
                  Lit: "Ui/Vi::" @ [evalProg.diderot:97.11-20] 
                  Var: ui @ [evalProg.diderot:97.22-24] 
                  Lit: "/" @ [evalProg.diderot:97.26-29] 
                  Var: vi @ [evalProg.diderot:97.31-33] 
                  Lit: "\n" @ [evalProg.diderot:97.35-39] 
                ]
              Print @ [evalProg.diderot:98.5-99.0] 
                [
                  Lit: "Interval:" @ [evalProg.diderot:98.11-22] 
                  Cons @ [evalProg.diderot:98.24-29] 
                    [
                      Var: s @ [evalProg.diderot:98.25-26] 
                      Var: e @ [evalProg.diderot:98.27-28] 
                    ]
                  Lit: "\n" @ [evalProg.diderot:98.30-34] 
                ]
              Print @ [evalProg.diderot:99.5-100.0] 
                [
                  Lit: "inner itter:" @ [evalProg.diderot:99.11-25] 
                  Var: intersectionItter @ [evalProg.diderot:99.26-43] 
                  Lit: "\n" @ [evalProg.diderot:99.44-48] 
                ]
              Print @ [evalProg.diderot:100.5-101.0] 
                [
                  Lit: "Outer itter:" @ [evalProg.diderot:100.11-25] 
                  Var: itter @ [evalProg.diderot:100.26-31] 
                  Lit: "\n" @ [evalProg.diderot:100.32-36] 
                ]
              Decl @ [evalProg.diderot:96.10-179.0] 
                Decl: startRay= @ [evalProg.diderot:101.5-102.0] 
                  BinOp: + @ [evalProg.diderot:101.21-74] 
                    Cons @ [evalProg.diderot:101.21-45] 
                      [
                        Subscript @ [evalProg.diderot:101.22-32] 
                          Var: rayOrig @ [evalProg.diderot:101.22-29] 
                          [
                            Lit: 0 @ [evalProg.diderot:101.30-31] 
                          ]
                        Subscript @ [evalProg.diderot:101.34-44] 
                          Var: rayOrig @ [evalProg.diderot:101.34-41] 
                          [
                            Lit: 1 @ [evalProg.diderot:101.42-43] 
                          ]
                      ]
                    BinOp: * @ [evalProg.diderot:101.48-74] 
                      Var: s @ [evalProg.diderot:101.48-49] 
                      Cons @ [evalProg.diderot:101.52-74] 
                        [
                          Subscript @ [evalProg.diderot:101.53-62] 
                            Var: rayVec @ [evalProg.diderot:101.53-59] 
                            [
                              Lit: 0 @ [evalProg.diderot:101.60-61] 
                            ]
                          Subscript @ [evalProg.diderot:101.64-73] 
                            Var: rayVec @ [evalProg.diderot:101.64-70] 
                            [
                              Lit: 1 @ [evalProg.diderot:101.71-72] 
                            ]
                        ]
              Decl @ [evalProg.diderot:96.10-179.0] 
                Decl: endRay= @ [evalProg.diderot:102.5-103.0] 
                  BinOp: + @ [evalProg.diderot:102.19-72] 
                    Cons @ [evalProg.diderot:102.19-43] 
                      [
                        Subscript @ [evalProg.diderot:102.20-30] 
                          Var: rayOrig @ [evalProg.diderot:102.20-27] 
                          [
                            Lit: 0 @ [evalProg.diderot:102.28-29] 
                          ]
                        Subscript @ [evalProg.diderot:102.32-42] 
                          Var: rayOrig @ [evalProg.diderot:102.32-39] 
                          [
                            Lit: 1 @ [evalProg.diderot:102.40-41] 
                          ]
                      ]
                    BinOp: * @ [evalProg.diderot:102.46-72] 
                      Var: e @ [evalProg.diderot:102.46-47] 
                      Cons @ [evalProg.diderot:102.50-72] 
                        [
                          Subscript @ [evalProg.diderot:102.51-60] 
                            Var: rayVec @ [evalProg.diderot:102.51-57] 
                            [
                              Lit: 0 @ [evalProg.diderot:102.58-59] 
                            ]
                          Subscript @ [evalProg.diderot:102.62-71] 
                            Var: rayVec @ [evalProg.diderot:102.62-68] 
                            [
                              Lit: 1 @ [evalProg.diderot:102.69-70] 
                            ]
                        ]
              Decl @ [evalProg.diderot:96.10-179.0] 
                Decl: invertA= @ [evalProg.diderot:103.5-104.0] 
                  Apply @ [evalProg.diderot:103.20-49] 
                    Select @ [evalProg.diderot:103.20-49] 
                      Var: cc @ [evalProg.diderot:103.20-22] 
                      inverseTransform
                    [
                      Var: startRay @ [evalProg.diderot:103.40-48] 
                    ]
              Decl @ [evalProg.diderot:96.10-179.0] 
                Decl: invertB= @ [evalProg.diderot:104.5-105.0] 
                  Apply @ [evalProg.diderot:104.20-47] 
                    Select @ [evalProg.diderot:104.20-47] 
                      Var: cc @ [evalProg.diderot:104.20-22] 
                      inverseTransform
                    [
                      Var: endRay @ [evalProg.diderot:104.40-46] 
                    ]
              Print @ [evalProg.diderot:105.5-106.0] 
                [
                  Lit: "inverses:" @ [evalProg.diderot:105.11-22] 
                  Var: invertA @ [evalProg.diderot:105.24-31] 
                  Var: invertB @ [evalProg.diderot:105.33-40] 
                  Lit: "\n" @ [evalProg.diderot:105.41-45] 
                ]
              Decl @ [evalProg.diderot:96.10-179.0] 
                Decl: faVal= @ [evalProg.diderot:106.5-107.0] 
                  Apply @ [evalProg.diderot:106.18-38] 
                    Select @ [evalProg.diderot:106.18-38] 
                      Var: fc @ [evalProg.diderot:106.18-20] 
                      refField
                    [
                      Var: invertA @ [evalProg.diderot:106.30-37] 
                    ]
              Decl @ [evalProg.diderot:96.10-179.0] 
                Decl: fa= @ [evalProg.diderot:107.5-108.0] 
                  BinOp: - @ [evalProg.diderot:107.15-47] 
                    BinOp: - @ [evalProg.diderot:107.15-35] 
                      Var: faVal @ [evalProg.diderot:107.15-20] 
                      BinOp: * @ [evalProg.diderot:107.23-35] 
                        Subscript @ [evalProg.diderot:107.23-32] 
                          Var: rayVec @ [evalProg.diderot:107.23-29] 
                          [
                            Lit: 2 @ [evalProg.diderot:107.30-31] 
                          ]
                        Var: s @ [evalProg.diderot:107.33-34] 
                    Subscript @ [evalProg.diderot:107.37-47] 
                      Var: rayOrig @ [evalProg.diderot:107.37-44] 
                      [
                        Lit: 2 @ [evalProg.diderot:107.45-46] 
                      ]
              Decl @ [evalProg.diderot:96.10-179.0] 
                Decl: fb= @ [evalProg.diderot:108.5-109.0] 
                  BinOp: - @ [evalProg.diderot:108.15-62] 
                    BinOp: - @ [evalProg.diderot:108.15-50] 
                      Apply @ [evalProg.diderot:108.15-35] 
                        Select @ [evalProg.diderot:108.15-35] 
                          Var: fc @ [evalProg.diderot:108.15-17] 
                          refField
                        [
                          Var: invertB @ [evalProg.diderot:108.27-34] 
                        ]
                      BinOp: * @ [evalProg.diderot:108.38-50] 
                        Subscript @ [evalProg.diderot:108.38-47] 
                          Var: rayVec @ [evalProg.diderot:108.38-44] 
                          [
                            Lit: 2 @ [evalProg.diderot:108.45-46] 
                          ]
                        Var: e @ [evalProg.diderot:108.48-49] 
                    Subscript @ [evalProg.diderot:108.52-62] 
                      Var: rayOrig @ [evalProg.diderot:108.52-59] 
                      [
                        Lit: 2 @ [evalProg.diderot:108.60-61] 
                      ]
              Print @ [evalProg.diderot:109.5-110.0] 
                [
                  Lit: "Vals:" @ [evalProg.diderot:109.11-18] 
                  Cons @ [evalProg.diderot:109.19-26] 
                    [
                      Var: fa @ [evalProg.diderot:109.20-22] 
                      Var: fb @ [evalProg.diderot:109.23-25] 
                    ]
                  Lit: "\n" @ [evalProg.diderot:109.27-31] 
                ]
              IfThen @ [evalProg.diderot:110.5-115.5] 
                AndAlso @ [evalProg.diderot:110.9-76] 
                  BinOp: < @ [evalProg.diderot:110.9-33] 
                    UnaryOp: |()| @ [evalProg.diderot:110.9-18] 
                      BinOp: - @ [evalProg.diderot:110.10-17] 
                        Var: fa @ [evalProg.diderot:110.10-12] 
                        Var: fb @ [evalProg.diderot:110.15-17] 
                    Var: intervalEps @ [evalProg.diderot:110.21-32] 
                  AndAlso @ [evalProg.diderot:110.33-76] 
                    BinOp: > @ [evalProg.diderot:110.36-55] 
                      UnaryOp: |()| @ [evalProg.diderot:110.36-40] 
                        Var: fa @ [evalProg.diderot:110.37-39] 
                      Var: intervalEps @ [evalProg.diderot:110.43-54] 
                    BinOp: > @ [evalProg.diderot:110.58-76] 
                      UnaryOp: |()| @ [evalProg.diderot:110.58-62] 
                        Var: fb @ [evalProg.diderot:110.59-61] 
                      Var: intervalEps @ [evalProg.diderot:110.65-76] 
                Block @ [evalProg.diderot:110.77-115.0] 
                  [
                    Print @ [evalProg.diderot:111.7-112.0] 
                      [
                        Lit: "warn\n" @ [evalProg.diderot:111.13-21] 
                      ]
                    Assign: s+= @ [evalProg.diderot:112.7-113.0] 
                      Var: intervalEps @ [evalProg.diderot:112.10-21] 
                    Continue @ [evalProg.diderot:113.7-114.0] 
                  ]
              Decl @ [evalProg.diderot:96.10-179.0] 
                Decl: cup= @ [evalProg.diderot:115.5-116.0] 
                  BinOp: / @ [evalProg.diderot:115.16-39] 
                    BinOp: - @ [evalProg.diderot:115.17-29] 
                      BinOp: * @ [evalProg.diderot:115.17-23] 
                        Var: s @ [evalProg.diderot:115.17-18] 
                        Var: fb @ [evalProg.diderot:115.20-22] 
                      BinOp: * @ [evalProg.diderot:115.25-29] 
                        Var: e @ [evalProg.diderot:115.25-26] 
                        Var: fa @ [evalProg.diderot:115.27-29] 
                    BinOp: - @ [evalProg.diderot:115.32-38] 
                      Var: fb @ [evalProg.diderot:115.32-34] 
                      Var: fa @ [evalProg.diderot:115.36-38] 
              Print @ [evalProg.diderot:116.5-117.0] 
                [
                  Lit: "Mid time:" @ [evalProg.diderot:116.11-22] 
                  Var: cup @ [evalProg.diderot:116.24-27] 
                  Lit: "\n" @ [evalProg.diderot:116.29-33] 
                ]
              Decl @ [evalProg.diderot:96.10-179.0] 
                Decl: midRay= @ [evalProg.diderot:117.5-118.0] 
                  BinOp: + @ [evalProg.diderot:117.19-75] 
                    Cons @ [evalProg.diderot:117.19-43] 
                      [
                        Subscript @ [evalProg.diderot:117.20-30] 
                          Var: rayOrig @ [evalProg.diderot:117.20-27] 
                          [
                            Lit: 0 @ [evalProg.diderot:117.28-29] 
                          ]
                        Subscript @ [evalProg.diderot:117.32-42] 
                          Var: rayOrig @ [evalProg.diderot:117.32-39] 
                          [
                            Lit: 1 @ [evalProg.diderot:117.40-41] 
                          ]
                      ]
                    BinOp: * @ [evalProg.diderot:117.47-75] 
                      Var: cup @ [evalProg.diderot:117.47-50] 
                      Cons @ [evalProg.diderot:117.53-75] 
                        [
                          Subscript @ [evalProg.diderot:117.54-63] 
                            Var: rayVec @ [evalProg.diderot:117.54-60] 
                            [
                              Lit: 0 @ [evalProg.diderot:117.61-62] 
                            ]
                          Subscript @ [evalProg.diderot:117.65-74] 
                            Var: rayVec @ [evalProg.diderot:117.65-71] 
                            [
                              Lit: 1 @ [evalProg.diderot:117.72-73] 
                            ]
                        ]
              Decl @ [evalProg.diderot:96.10-179.0] 
                Decl: invertC= @ [evalProg.diderot:118.5-119.0] 
                  Apply @ [evalProg.diderot:118.20-47] 
                    Select @ [evalProg.diderot:118.20-47] 
                      Var: cc @ [evalProg.diderot:118.20-22] 
                      inverseTransform
                    [
                      Var: midRay @ [evalProg.diderot:118.40-46] 
                    ]
              Decl @ [evalProg.diderot:96.10-179.0] 
                Decl: fmVal= @ [evalProg.diderot:119.5-120.0] 
                  Apply @ [evalProg.diderot:119.18-38] 
                    Select @ [evalProg.diderot:119.18-38] 
                      Var: fc @ [evalProg.diderot:119.18-20] 
                      refField
                    [
                      Var: invertC @ [evalProg.diderot:119.30-37] 
                    ]
              Decl @ [evalProg.diderot:96.10-179.0] 
                Decl: fm= @ [evalProg.diderot:120.5-121.0] 
                  BinOp: - @ [evalProg.diderot:120.15-51] 
                    BinOp: - @ [evalProg.diderot:120.15-39] 
                      Var: fmVal @ [evalProg.diderot:120.15-20] 
                      BinOp: * @ [evalProg.diderot:120.23-39] 
                        Subscript @ [evalProg.diderot:120.23-32] 
                          Var: rayVec @ [evalProg.diderot:120.23-29] 
                          [
                            Lit: 2 @ [evalProg.diderot:120.30-31] 
                          ]
                        Var: cup @ [evalProg.diderot:120.34-37] 
                    Subscript @ [evalProg.diderot:120.41-51] 
                      Var: rayOrig @ [evalProg.diderot:120.41-48] 
                      [
                        Lit: 2 @ [evalProg.diderot:120.49-50] 
                      ]
              Print @ [evalProg.diderot:121.5-122.0] 
                [
                  Lit: "all vals:" @ [evalProg.diderot:121.11-22] 
                  Cons @ [evalProg.diderot:121.23-35] 
                    [
                      Var: fa @ [evalProg.diderot:121.24-26] 
                      Var: fm @ [evalProg.diderot:121.28-30] 
                      Var: fb @ [evalProg.diderot:121.32-34] 
                    ]
                  Lit: "\n" @ [evalProg.diderot:121.36-40] 
                ]
              Assign: intersectionItter+= @ [evalProg.diderot:122.5-123.0] 
                Lit: 1 @ [evalProg.diderot:122.24-25] 
              IfThenElse @ [evalProg.diderot:123.5-131.5] 
                BinOp: < @ [evalProg.diderot:123.9-31] 
                  BinOp: * @ [evalProg.diderot:123.9-28] 
                    Apply @ [evalProg.diderot:123.9-17] 
                      Var: sign @ [evalProg.diderot:123.9-13] 
                      [
                        Var: fa @ [evalProg.diderot:123.14-16] 
                      ]
                    Apply @ [evalProg.diderot:123.19-27] 
                      Var: sign @ [evalProg.diderot:123.19-23] 
                      [
                        Var: fm @ [evalProg.diderot:123.24-26] 
                      ]
                  Lit: 0 @ [evalProg.diderot:123.30-31] 
                Assign: e= @ [evalProg.diderot:124.7-125.0] 
                  Var: cup @ [evalProg.diderot:124.11-14] 
                IfThen @ [evalProg.diderot:127.10-131.5] 
                  BinOp: > @ [evalProg.diderot:127.14-36] 
                    BinOp: * @ [evalProg.diderot:127.14-33] 
                      Apply @ [evalProg.diderot:127.14-22] 
                        Var: sign @ [evalProg.diderot:127.14-18] 
                        [
                          Var: fa @ [evalProg.diderot:127.19-21] 
                        ]
                      Apply @ [evalProg.diderot:127.24-32] 
                        Var: sign @ [evalProg.diderot:127.24-28] 
                        [
                          Var: fm @ [evalProg.diderot:127.29-31] 
                        ]
                    Lit: 0 @ [evalProg.diderot:127.35-36] 
                  Assign: s= @ [evalProg.diderot:129.2-130.0] 
                    Var: cup @ [evalProg.diderot:129.6-9] 
              Print @ [evalProg.diderot:131.5-132.0] 
                [
                  Lit: "new interval:" @ [evalProg.diderot:131.11-26] 
                  Cons @ [evalProg.diderot:131.28-33] 
                    [
                      Var: s @ [evalProg.diderot:131.29-30] 
                      Var: e @ [evalProg.diderot:131.31-32] 
                    ]
                  Lit: "\n" @ [evalProg.diderot:131.34-38] 
                ]
              IfThen @ [evalProg.diderot:133.5-162.5] 
                BinOp: < @ [evalProg.diderot:133.9-24] 
                  UnaryOp: |()| @ [evalProg.diderot:133.9-13] 
                    Var: fm @ [evalProg.diderot:133.10-12] 
                  Var: zeroEps @ [evalProg.diderot:133.16-23] 
                Block @ [evalProg.diderot:133.25-162.0] 
                  [
                    Decl @ [evalProg.diderot:133.25-162.0] 
                      Decl: grad= @ [evalProg.diderot:134.7-135.0] 
                        Cons @ [evalProg.diderot:134.19-24] 
                          [
                            Lit: 0 @ [evalProg.diderot:134.20-21] 
                            Lit: 0 @ [evalProg.diderot:134.22-23] 
                          ]
                    Decl @ [evalProg.diderot:133.25-162.0] 
                      Decl: loc= @ [evalProg.diderot:135.7-136.0] 
                        Var: rayOrig @ [evalProg.diderot:135.18-25] 
                    IfThen @ [evalProg.diderot:136.7-140.7] 
                      BinOp: < @ [evalProg.diderot:136.11-25] 
                        UnaryOp: |()| @ [evalProg.diderot:136.11-15] 
                          Var: fm @ [evalProg.diderot:136.12-14] 
                        Var: zeroEps @ [evalProg.diderot:136.18-25] 
                      Block @ [evalProg.diderot:136.26-140.0] 
                        [
                          Assign: grad= @ [evalProg.diderot:137.2-138.0] 
                            Apply @ [evalProg.diderot:137.9-59] 
                              UnaryOp: ∇ @ [evalProg.diderot:137.9-51] 
                                BinOp: ∘ @ [evalProg.diderot:137.15-50] 
                                  Select @ [evalProg.diderot:137.15-26] 
                                    Var: fc @ [evalProg.diderot:137.15-17] 
                                    refField
                                  Select @ [evalProg.diderot:137.31-50] 
                                    Var: cc @ [evalProg.diderot:137.31-33] 
                                    inverseTransform
                              [
                                Var: midRay @ [evalProg.diderot:137.52-58] 
                              ]
                          Assign: out= @ [evalProg.diderot:138.2-139.0] 
                            Var: fmVal @ [evalProg.diderot:138.8-13] 
                        ]
                    Print @ [evalProg.diderot:140.7-141.0] 
                      [
                        Lit: "Out val:" @ [evalProg.diderot:140.13-23] 
                        Var: out @ [evalProg.diderot:140.24-27] 
                        Lit: "\n" @ [evalProg.diderot:140.28-32] 
                      ]
                    Print @ [evalProg.diderot:141.7-142.0] 
                      [
                        Lit: "Grad val:" @ [evalProg.diderot:141.13-24] 
                        Var: grad @ [evalProg.diderot:141.25-29] 
                        Lit: "\n" @ [evalProg.diderot:141.30-34] 
                      ]
                    Decl @ [evalProg.diderot:133.25-162.0] 
                      Decl: mcol= @ [evalProg.diderot:142.7-143.0] 
                        Cons @ [evalProg.diderot:142.19-26] 
                          [
                            Lit: 1 @ [evalProg.diderot:142.20-21] 
                            Lit: 1 @ [evalProg.diderot:142.22-23] 
                            Lit: 1 @ [evalProg.diderot:142.24-25] 
                          ]
                    IfThen @ [evalProg.diderot:143.7-146.7] 
                      BinOp: != @ [evalProg.diderot:143.11-23] 
                        Var: cmin @ [evalProg.diderot:143.11-15] 
                        Var: cmax @ [evalProg.diderot:143.19-23] 
                      Assign: mcol= @ [evalProg.diderot:144.2-145.0] 
                        Apply @ [evalProg.diderot:144.9-41] 
                          Var: CM @ [evalProg.diderot:144.9-11] 
                          [
                            Apply @ [evalProg.diderot:144.12-40] 
                              Var: lerp @ [evalProg.diderot:144.12-16] 
                              [
                                UnaryOp: unary - @ [evalProg.diderot:144.17-19] 
                                  Lit: 1 @ [evalProg.diderot:144.18-19] 
                                Lit: 1 @ [evalProg.diderot:144.21-22] 
                                Var: cmin @ [evalProg.diderot:144.24-28] 
                                Var: out @ [evalProg.diderot:144.30-33] 
                                Var: cmax @ [evalProg.diderot:144.35-39] 
                              ]
                          ]
                    IfThenElse @ [evalProg.diderot:146.7-159.0] 
                      Var: light @ [evalProg.diderot:146.10-15] 
                      Block @ [evalProg.diderot:146.16-156.8] 
                        [
                          Decl @ [evalProg.diderot:146.16-156.8] 
                            Decl: N= @ [evalProg.diderot:147.2-148.0] 
                              Apply @ [evalProg.diderot:147.11-44] 
                                Var: normalize @ [evalProg.diderot:147.11-20] 
                                [
                                  Cons @ [evalProg.diderot:147.21-43] 
                                    [
                                      Subscript @ [evalProg.diderot:147.22-29] 
                                        Var: grad @ [evalProg.diderot:147.22-26] 
                                        [
                                          Lit: 0 @ [evalProg.diderot:147.27-28] 
                                        ]
                                      Subscript @ [evalProg.diderot:147.31-38] 
                                        Var: grad @ [evalProg.diderot:147.31-35] 
                                        [
                                          Lit: 1 @ [evalProg.diderot:147.36-37] 
                                        ]
                                      UnaryOp: unary - @ [evalProg.diderot:147.40-42] 
                                        Lit: 1 @ [evalProg.diderot:147.41-42] 
                                    ]
                                ]
                          Decl @ [evalProg.diderot:146.16-156.8] 
                            Decl: H= @ [evalProg.diderot:148.2-149.0] 
                              Apply @ [evalProg.diderot:148.11-42] 
                                Var: normalize @ [evalProg.diderot:148.11-20] 
                                [
                                  BinOp: + @ [evalProg.diderot:148.21-41] 
                                    UnaryOp: unary - @ [evalProg.diderot:148.21-39] 
                                      Apply @ [evalProg.diderot:148.22-39] 
                                        Var: normalize @ [evalProg.diderot:148.22-31] 
                                        [
                                          Var: rayVec @ [evalProg.diderot:148.32-38] 
                                        ]
                                    Var: L @ [evalProg.diderot:148.40-41] 
                                ]
                          Decl @ [evalProg.diderot:146.16-156.8] 
                            Decl: lightColor= @ [evalProg.diderot:149.2-150.0] 
                              Apply @ [evalProg.diderot:149.20-67] 
                                Var: lerp @ [evalProg.diderot:149.20-24] 
                                [
                                  Var: mcnear @ [evalProg.diderot:149.25-31] 
                                  Var: mcfar @ [evalProg.diderot:149.33-38] 
                                  Var: camNearVsp @ [evalProg.diderot:149.40-50] 
                                  Var: cup @ [evalProg.diderot:149.52-55] 
                                  Var: camFarVsp @ [evalProg.diderot:149.57-66] 
                                ]
                          Decl @ [evalProg.diderot:146.16-156.8] 
                            Decl: ambientTerm= @ [evalProg.diderot:151.2-152.0] 
                              BinOp: * @ [evalProg.diderot:151.21-35] 
                                Var: phongKa @ [evalProg.diderot:151.21-28] 
                                Var: mcol @ [evalProg.diderot:151.31-35] 
                          Decl @ [evalProg.diderot:146.16-156.8] 
                            Decl: diffuse= @ [evalProg.diderot:152.2-153.0] 
                              BinOp: * @ [evalProg.diderot:152.17-65] 
                                BinOp: * @ [evalProg.diderot:152.17-52] 
                                  Var: phongKd @ [evalProg.diderot:152.17-24] 
                                  Apply @ [evalProg.diderot:152.27-52] 
                                    Var: modulate @ [evalProg.diderot:152.27-35] 
                                    [
                                      Var: mcol @ [evalProg.diderot:152.36-40] 
                                      Var: lightColor @ [evalProg.diderot:152.41-51] 
                                    ]
                                Apply @ [evalProg.diderot:152.53-65] 
                                  Var: max @ [evalProg.diderot:152.53-56] 
                                  [
                                    Lit: 0 @ [evalProg.diderot:152.57-58] 
                                    BinOp: • @ [evalProg.diderot:152.59-64] 
                                      Var: N @ [evalProg.diderot:152.59-60] 
                                      Var: L @ [evalProg.diderot:152.63-64] 
                                  ]
                          Decl @ [evalProg.diderot:146.16-156.8] 
                            Decl: specular= @ [evalProg.diderot:153.2-154.0] 
                              BinOp: * @ [evalProg.diderot:153.18-61] 
                                BinOp: * @ [evalProg.diderot:153.18-36] 
                                  Var: phongKs @ [evalProg.diderot:153.18-25] 
                                  Var: lightColor @ [evalProg.diderot:153.26-36] 
                                BinOp: ^ @ [evalProg.diderot:153.38-60] 
                                  Apply @ [evalProg.diderot:153.39-51] 
                                    Var: max @ [evalProg.diderot:153.39-42] 
                                    [
                                      Lit: 0 @ [evalProg.diderot:153.43-44] 
                                      BinOp: • @ [evalProg.diderot:153.45-50] 
                                        Var: N @ [evalProg.diderot:153.45-46] 
                                        Var: H @ [evalProg.diderot:153.49-50] 
                                    ]
                                  Var: phongSp @ [evalProg.diderot:153.53-60] 
                          Decl @ [evalProg.diderot:146.16-156.8] 
                            Decl: fin= @ [evalProg.diderot:154.2-155.0] 
                              BinOp: + @ [evalProg.diderot:154.13-45] 
                                BinOp: + @ [evalProg.diderot:154.13-35] 
                                  Var: ambientTerm @ [evalProg.diderot:154.13-24] 
                                  Var: diffuse @ [evalProg.diderot:154.27-34] 
                                Var: specular @ [evalProg.diderot:154.37-45] 
                          Assign: rgba= @ [evalProg.diderot:155.2-156.0] 
                            Cons @ [evalProg.diderot:155.9-33] 
                              [
                                Subscript @ [evalProg.diderot:155.10-16] 
                                  Var: fin @ [evalProg.diderot:155.10-13] 
                                  [
                                    Lit: 0 @ [evalProg.diderot:155.14-15] 
                                  ]
                                Subscript @ [evalProg.diderot:155.17-23] 
                                  Var: fin @ [evalProg.diderot:155.17-20] 
                                  [
                                    Lit: 1 @ [evalProg.diderot:155.21-22] 
                                  ]
                                Subscript @ [evalProg.diderot:155.24-30] 
                                  Var: fin @ [evalProg.diderot:155.24-27] 
                                  [
                                    Lit: 2 @ [evalProg.diderot:155.28-29] 
                                  ]
                                Lit: 1 @ [evalProg.diderot:155.31-32] 
                              ]
                        ]
                      Assign: rgba= @ [evalProg.diderot:157.2-158.0] 
                        Cons @ [evalProg.diderot:157.9-36] 
                          [
                            Subscript @ [evalProg.diderot:157.10-17] 
                              Var: mcol @ [evalProg.diderot:157.10-14] 
                              [
                                Lit: 0 @ [evalProg.diderot:157.15-16] 
                              ]
                            Subscript @ [evalProg.diderot:157.18-25] 
                              Var: mcol @ [evalProg.diderot:157.18-22] 
                              [
                                Lit: 1 @ [evalProg.diderot:157.23-24] 
                              ]
                            Subscript @ [evalProg.diderot:157.26-33] 
                              Var: mcol @ [evalProg.diderot:157.26-30] 
                              [
                                Lit: 2 @ [evalProg.diderot:157.31-32] 
                              ]
                            Lit: 1 @ [evalProg.diderot:157.34-35] 
                          ]
                    Assign: locs= @ [evalProg.diderot:159.7-160.0] 
                      Sequence @ [evalProg.diderot:159.14-38] 
                        [
                          BinOp: + @ [evalProg.diderot:159.15-37] 
                            BinOp: * @ [evalProg.diderot:159.15-28] 
                              Var: rayVec @ [evalProg.diderot:159.15-21] 
                              Var: cup @ [evalProg.diderot:159.24-27] 
                            Var: rayOrig @ [evalProg.diderot:159.30-37] 
                        ]
                    Stabilize @ [evalProg.diderot:160.7-161.0] 
                  ]
              IfThenElse @ [evalProg.diderot:162.5-174.0] 
                BinOp: > @ [evalProg.diderot:162.9-31] 
                  Var: intersectionItter @ [evalProg.diderot:162.9-26] 
                  Lit: 32 @ [evalProg.diderot:162.29-31] 
                Block @ [evalProg.diderot:162.32-172.0] 
                  [
                    Assign: intersectionItter= @ [evalProg.diderot:163.7-164.0] 
                      Lit: 0 @ [evalProg.diderot:163.27-28] 
                    Assign: itter+= @ [evalProg.diderot:164.7-165.0] 
                      Lit: 1 @ [evalProg.diderot:164.14-15] 
                    IfThen @ [evalProg.diderot:165.7-166.7] 
                      BinOp: >= @ [evalProg.diderot:165.10-22] 
                        Var: itter @ [evalProg.diderot:165.10-15] 
                        Var: len @ [evalProg.diderot:165.19-22] 
                      Block @ [evalProg.diderot:165.23-166.0] 
                        [
                          Print @ [evalProg.diderot:165.24-57] 
                            [
                              Lit: "No intersection found\n" @ [evalProg.diderot:165.30-55] 
                            ]
                          Print @ [evalProg.diderot:165.57-107] 
                            [
                              Lit: "Fin pixel=============================\n" @ [evalProg.diderot:165.63-105] 
                            ]
                          Stabilize @ [evalProg.diderot:165.107-117] 
                        ]
                    Assign: interval= @ [evalProg.diderot:166.7-38] 
                      Subscript @ [evalProg.diderot:166.18-37] 
                        Var: times @ [evalProg.diderot:166.18-23] 
                        [
                          BinOp: + @ [evalProg.diderot:166.24-36] 
                            Var: offset @ [evalProg.diderot:166.24-30] 
                            Var: itter @ [evalProg.diderot:166.31-36] 
                        ]
                    Assign: cc= @ [evalProg.diderot:166.39-167.0] 
                      Subscript @ [evalProg.diderot:166.44-74] 
                        Select @ [evalProg.diderot:166.44-74] 
                          Var: a @ [evalProg.diderot:166.44-45] 
                          cells
                        [
                          Subscript @ [evalProg.diderot:166.52-73] 
                            Var: cells @ [evalProg.diderot:166.52-57] 
                            [
                              BinOp: + @ [evalProg.diderot:166.58-72] 
                                Var: offset @ [evalProg.diderot:166.58-64] 
                                Var: itter @ [evalProg.diderot:166.67-72] 
                            ]
                        ]
                    Assign: s= @ [evalProg.diderot:167.7-23] 
                      Subscript @ [evalProg.diderot:167.11-22] 
                        Var: interval @ [evalProg.diderot:167.11-19] 
                        [
                          Lit: 0 @ [evalProg.diderot:167.20-21] 
                        ]
                    Assign: e= @ [evalProg.diderot:167.24-168.0] 
                      Subscript @ [evalProg.diderot:167.28-39] 
                        Var: interval @ [evalProg.diderot:167.28-36] 
                        [
                          Lit: 1 @ [evalProg.diderot:167.37-38] 
                        ]
                    Assign: fc= @ [evalProg.diderot:168.7-169.0] 
                      Apply @ [evalProg.diderot:168.12-26] 
                        Select @ [evalProg.diderot:168.12-26] 
                          Var: c @ [evalProg.diderot:168.12-13] 
                          funcCell
                        [
                          Var: cc @ [evalProg.diderot:168.23-25] 
                        ]
                    Print @ [evalProg.diderot:169.7-170.0] 
                      [
                        Lit: "++++++++++++++++Next interval!+++++++++++++++++++\n" @ [evalProg.diderot:169.13-66] 
                      ]
                    Continue @ [evalProg.diderot:170.7-171.0] 
                  ]
                Print @ [evalProg.diderot:173.8-35] 
                  [
                    Lit: "---------------\n" @ [evalProg.diderot:173.14-33] 
                  ]
            ]
      ]
    Grid @ [evalProg.diderot:181.3-182.0] 
      Comprehension @ [evalProg.diderot:181.16-65] 
        Apply @ [evalProg.diderot:181.17-27] 
          Var: ray @ [evalProg.diderot:181.17-20] 
          [
            Var: ui @ [evalProg.diderot:181.21-23] 
            Var: vi @ [evalProg.diderot:181.24-26] 
          ]
        [
          Iterator: vi @ [evalProg.diderot:181.30-46] 
            Range @ [evalProg.diderot:181.36-46] 
              Lit: 0 @ [evalProg.diderot:181.36-37] 
              BinOp: - @ [evalProg.diderot:181.39-46] 
                Var: iresU @ [evalProg.diderot:181.39-44] 
                Lit: 1 @ [evalProg.diderot:181.45-46] 
          Iterator: ui @ [evalProg.diderot:181.48-64] 
            Range @ [evalProg.diderot:181.54-64] 
              Lit: 0 @ [evalProg.diderot:181.54-55] 
              BinOp: - @ [evalProg.diderot:181.57-64] 
                Var: iresV @ [evalProg.diderot:181.57-62] 
                Lit: 1 @ [evalProg.diderot:181.63-64] 
        ]
/* end program */
/* AST: After typechecking */
properties: StrandArray,HasStartMethod,ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[]),HasInputs,HasGlobals
input real isoval = 0.2e0;
input real thick = 0.7e-1;
input vec3 camEye = [0.3e1, -0.3e1, 0.3e1];
input vec3 camAt = [0.5e0, 0.5e0, 0.5e0];
input vec3 camUp = [0.e0, 0.e0, 0.1e1];
input real camFOV = 0.137e2;
input int iresU = 10;
input int iresV = 10;
input real camNear = -0.2e1;
input real camFar = 0.5e1;
input real refStep = 0.1e1;
input real rayStep = 0.1e-1;
input FemType: Mesh with type var:NONE a = loadFem(Mesh);
input FemType: Space with type var:msh b = loadFem(Space);
input FemType: FemFunc with type var:fns c = loadFem(FemFunc);
input real zeroEps = 0.1e-10;
input real intervalEps = 0.1e-10;
input int[] indecies;
input vec2[] times;
input int[] cells;
input ("material color at near clipping plane (for depth cuing)") vec3 mcnear = [0.1e1, 0.1e1, 0.1e1];
input ("material color at far clipping plane") vec3 mcfar = [0.1e1, 0.1e1, 0.1e1];
input ("univariate colormap") image(1)[3] cmap = loadImage<%1; $[3]> ("/home/teocollin/gitcode/diderot/tests/lipRay/find/cmap.nrrd");
input ("value mapped to min end of colormap") real cmin = 0.e0;
input ("value mapped to max end of colormap. By default cmin==cmax==0, which disables this colormapping") real cmax = 0.1e1;
input bool light = false;
input ("Blinn-Phong ambient component") real phongKa = 0.5e0;
input ("Blinn-Phong diffuse component") real phongKd = 0.5e0;
input ("Blinn-Phong specular component") real phongKs = 0.e0;
input ("Blinn-Phong specularity exponent") real phongSp = 0.6e2;
input ("maximum opacity on rendered surface") real maxAlpha = 0.1e1;
input vec3 lightVsp = [0.e0, 0.369e1, 0.153e1];
input bool debug = false;
input int debugU = 8;
input int debugV = 2;
function bool != (FemType: MeshCell with type var:msh cell1, FemType: MeshCell with type var:msh cell1)
{
  return != (extractFemItem(cell1, int, CellIndex(Mesh)), extractFemItem(cell1, int, CellIndex(Mesh)));
  }
function bool == (FemType: MeshCell with type var:msh cell1, FemType: MeshCell with type var:msh cell1)
{
  return == (extractFemItem(cell1, int, CellIndex(Mesh)), extractFemItem(cell1, int, CellIndex(Mesh)));
  }
function FemType: MeshPos with type var:msh findPos (FemType: Mesh with type var:msh mesh, vec2 pos)
{
  xn = [0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0, 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0];
  newtonInt = 0;
  cellInt = extractFemItem(mesh, int, StartCell(Mesh));
  numCell = - (extractFemItem(mesh, int, NumCell(Mesh)), 1);
  yayCells = extractFemItem(mesh, pos : vec2, int[], NearbyCell(File=spat.in)(Mesh));
  foreach (int cellItter in yayCells) {
    cellInt = cellItter;
    A = @<#; %2; $[2,2]> (inv<#; %2> (∇⊗<#; %2; $[]; %2> (femField(mesh,cellInt,field(2)[2], Transform, ))), [0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0, 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0]);
    foreach (int newtonItter in $range (0, 16)) {
      delta = @<#; %2; $[2]> (•<#; %2; $[2,2]; $[2]; $[2]> (A, -<#; %2; $[2]> (femField(mesh,cellInt,field(2)[2], Transform, ), pos)), xn);
      xn = -<$[2]> (xn, delta);
      if >= (* (0.1e-7, 0.1e-7), •<$[2]; $[2]; $[]> (delta, delta)) {
        if $and (> (+<$[]> (0.1e1, 0.1e-8), •<$[2]; $[2]; $[]> ([0.1e1, 0.1e1], xn)), $and (> (+<$[2]> ([0.1e-8, 0.1e-8], xn)[0], -0.e0), > (+<$[2]> ([0.1e-8, 0.1e-8], xn)[1], -0.e0))) {
          return extractFemItemN(AllBuild(MeshPos),FemType: Mesh with type var:NONE,int,vec2,vec2 (mesh, cellInt, xn, pos)):FemType: MeshPos with type var:msh;
          }
        }
      }
    }
  print ("Bad end 2", "\n");
  return extractFemItemN(InvalidBuild(MeshPos),FemType: Mesh with type var:NONE (mesh)):FemType: MeshPos with type var:msh;
  }
function FemType: RefCell with type var:msh refcell (FemType: Mesh with type var:NONE arg0)
{
  return extractFemItem(arg0, FemType: RefCell with type var:msh, RefCell(Mesh));
  }
function FemType: MeshCell with type var:msh[] cells (FemType: Mesh with type var:NONE arg0)
{
  return extractFemItem(arg0, FemType: MeshCell with type var:msh[], Cells(Mesh));
  }
function FemType: MeshCell with type var:msh[] cells (FemType: Mesh with type var:NONE arg0)
{
  return {loadFem(MeshCell) | int i in $range (0, extractFemItem(arg0, int, NumCell(Mesh)))};
  }
function int numCell (FemType: Mesh with type var:NONE arg0)
{
  return extractFemItem(arg0, int, NumCell(Mesh));
  }
function tensor[2,2,2,2] msh_transform_3 (vec2 pos, int cell, FemType: Mesh with type var:NONE mesh)
{
  return @<#; %2; $[2,2,2,2]> (∇⊗<#; %2; $[2,2]; %2> (∇⊗<#; %2; $[2]; %2> (∇⊗<#; %2; $[]; %2> (femField(mesh,cell,field(2)[2], Transform, )))), pos);
  }
function tensor[2,2,2] msh_transform_2 (vec2 pos, int cell, FemType: Mesh with type var:NONE mesh)
{
  return @<#; %2; $[2,2,2]> (∇⊗<#; %2; $[2]; %2> (∇⊗<#; %2; $[]; %2> (femField(mesh,cell,field(2)[2], Transform, ))), pos);
  }
function mat2 msh_transform_1 (vec2 pos, int cell, FemType: Mesh with type var:NONE mesh)
{
  return @<#; %2; $[2,2]> (∇⊗<#; %2; $[]; %2> (femField(mesh,cell,field(2)[2], Transform, )), pos);
  }
function vec2 msh_transform_0 (vec2 pos, int cell, FemType: Mesh with type var:NONE mesh)
{
  return @<#; %2; $[2]> (femField(mesh,cell,field(2)[2], Transform, ), pos);
  }
function FemType: MeshPos with type var:msh _msh_newtonInverse (vec2 pos, int cellInt, FemType: Mesh with type var:NONE mesh)
{
  xn = [0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0, 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0];
  A = @<#; %2; $[2,2]> (inv<#; %2> (∇⊗<#; %2; $[]; %2> (femField(mesh,cellInt,field(2)[2], Transform, ))), [0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0, 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0]);
  foreach (int itter in $range (0, 16)) {
    delta = @<#; %2; $[2]> (•<#; %2; $[2,2]; $[2]; $[2]> (A, -<#; %2; $[2]> (femField(mesh,cellInt,field(2)[2], Transform, ), pos)), xn);
    xn = -<$[2]> (xn, delta);
    if >= (* (0.1e-7, 0.1e-7), •<$[2]; $[2]; $[]> (delta, delta)) {
      if $and (> (+<$[]> (0.1e1, 0.1e-8), •<$[2]; $[2]; $[]> ([0.1e1, 0.1e1], xn)), $and (> (+<$[2]> ([0.1e-8, 0.1e-8], xn)[0], -0.e0), > (+<$[2]> ([0.1e-8, 0.1e-8], xn)[1], -0.e0))) {
        return extractFemItemN(AllBuild(MeshPos),FemType: Mesh with type var:NONE,int,vec2,vec2 (mesh, cellInt, xn, pos)):FemType: MeshPos with type var:msh;
        }
      else {
        return extractFemItemN(InvalidBuild(MeshPos),FemType: Mesh with type var:NONE (mesh)):FemType: MeshPos with type var:msh;
        }
      }
    }
  return extractFemItemN(InvalidBuild(MeshPos),FemType: Mesh with type var:NONE (mesh)):FemType: MeshPos with type var:msh;
  }
function FemType: MeshPos with type var:msh _mesh_pos_msh_build_world_pos (FemType: MeshPos with type var:msh pos)
{
  if extractFemItem(pos, bool, WorldTest(MeshPos)) {
    return extractFemItemN(NewWorld(MeshPos),FemType: MeshPos with type var:msh,vec2 (pos, msh_transform_0 (extractFemItem(pos, vec2, RefPos(MeshPos)), extractFemItem(pos, int, CellIndex(MeshPos)), extractFem(Mesh,pos )))):FemType: MeshPos with type var:msh;
    }
  else {
    return pos;
    }
  }
function vec2 worldPos (FemType: MeshPos with type var:msh pos)
{
  return msh_transform_0 (extractFemItem(pos, vec2, RefPos(MeshPos)), extractFemItem(pos, int, CellIndex(MeshPos)), extractFem(Mesh,pos ));
  }
function FemType: MeshPos with type var:msh $exitPos (FemType: Mesh with type var:NONE mesh, int cellId, vec2 refPos, vec2 dPos, real[2] time)
{
  if != (-1, $sub<int; %2> (nextCell4 ($r2i (time[1]), cellId, mesh), 0)) {
    return extractFemItemN(RefBuild(Mesh),FemType: Mesh with type var:NONE,int,vec2,int (mesh, $sub<int; %2> (nextCell4 ($r2i (time[1]), cellId, mesh), 0), +<$[2]> ($sub<vec2; %3> ({[0.1e1, 0.e0], [0.e0, 0.e0], [0.e0, 0.e0]}, $sub<int; %2> (nextCell4 ($r2i (time[1]), cellId, mesh), 1)), *<$[2]> ($sub<vec2; %3> ({[-0.1e1, 0.1e1], [0.e0, 0.1e1], [0.1e1, 0.e0]}, $sub<int; %2> (nextCell4 ($r2i (time[1]), cellId, mesh), 1)), / (-<$[]> ($sub<real; %2> ({+<$[2]> (*<$[2]> (time[0], dPos), refPos)[0], +<$[2]> (*<$[2]> (time[0], dPos), refPos)[1]}, $sub<int; %3> ({1, 1, 0}, $r2i (time[1]))), $sub<real; %2> ($sub<real[2]; %3> ({{0.1e1, 0.e0}, {0.e0, 0.e0}, {0.e0, 0.e0}}, $r2i (time[1])), $sub<int; %3> ({1, 1, 0}, $r2i (time[1])))), $sub<real; %2> ($sub<real[2]; %3> ({{-0.1e1, 0.1e1}, {0.e0, 0.1e1}, {0.1e1, 0.e0}}, $r2i (time[1])), $sub<int; %3> ({1, 1, 0}, $r2i (time[1])))))), $sub<int; %2> (nextCell4 ($r2i (time[1]), cellId, mesh), 1))):FemType: MeshPos with type var:msh;
    }
  else {
    return extractFemItemN(InvalidBuildBoundary(MeshPos),FemType: Mesh with type var:NONE,vec2 (mesh, +<$[2]> (*<$[2]> (time[0], dPos), refPos))):FemType: MeshPos with type var:msh;
    }
  }
function int[2] nextCell4 (int faceIdx, int cell, FemType: Mesh with type var:NONE mesh)
{
  {
    return extractFemItemN(CellFaceCell(Mesh),FemType: Mesh with type var:NONE,int (mesh, + (* (cell, 6), * (faceIdx, 2)))):int[2];
    }
  }
function vec2 _enter (vec2 refPos, vec2 dPos)
{
  real time = +inf;
  int face = -1;
  real faceTime = -inf;
  if $and (>= (× (-<$[2]> ([0.1e1, 0.e0], refPos), /<$[2]> ([-0.1e1, 0.1e1], × (dPos, [-0.1e1, 0.1e1]))), -0.1e-15), $and (> (time, × (-<$[2]> ([0.1e1, 0.e0], refPos), /<$[2]> ([-0.1e1, 0.1e1], × (dPos, [-0.1e1, 0.1e1])))), >= (|()|<$[]> (× (dPos, [-0.1e1, 0.1e1])), 0.1e-20)))
    if $and (> (+<$[]> (0.1e1, 0.1e-8), •<$[2]; $[2]; $[]> ([0.1e1, 0.1e1], +<$[2]> (refPos, *<$[2]> (dPos, × (-<$[2]> ([0.1e1, 0.e0], refPos), /<$[2]> ([-0.1e1, 0.1e1], × (dPos, [-0.1e1, 0.1e1]))))))), $and (> (+<$[2]> ([0.1e-8, 0.1e-8], +<$[2]> (refPos, *<$[2]> (dPos, × (-<$[2]> ([0.1e1, 0.e0], refPos), /<$[2]> ([-0.1e1, 0.1e1], × (dPos, [-0.1e1, 0.1e1]))))))[0], -0.e0), > (+<$[2]> ([0.1e-8, 0.1e-8], +<$[2]> (refPos, *<$[2]> (dPos, × (-<$[2]> ([0.1e1, 0.e0], refPos), /<$[2]> ([-0.1e1, 0.1e1], × (dPos, [-0.1e1, 0.1e1]))))))[1], -0.e0))) {
      time = × (-<$[2]> ([0.1e1, 0.e0], refPos), /<$[2]> ([-0.1e1, 0.1e1], × (dPos, [-0.1e1, 0.1e1])));
      face = 0;
      }
    if $and (>= (× (-<$[2]> ([0.e0, 0.e0], refPos), /<$[2]> ([0.e0, 0.1e1], × (dPos, [0.e0, 0.1e1]))), -0.1e-15), $and (> (time, × (-<$[2]> ([0.e0, 0.e0], refPos), /<$[2]> ([0.e0, 0.1e1], × (dPos, [0.e0, 0.1e1])))), >= (|()|<$[]> (× (dPos, [0.e0, 0.1e1])), 0.1e-20)))
    if $and (> (+<$[]> (0.1e1, 0.1e-8), •<$[2]; $[2]; $[]> ([0.1e1, 0.1e1], +<$[2]> (refPos, *<$[2]> (dPos, × (-<$[2]> ([0.e0, 0.e0], refPos), /<$[2]> ([0.e0, 0.1e1], × (dPos, [0.e0, 0.1e1]))))))), $and (> (+<$[2]> ([0.1e-8, 0.1e-8], +<$[2]> (refPos, *<$[2]> (dPos, × (-<$[2]> ([0.e0, 0.e0], refPos), /<$[2]> ([0.e0, 0.1e1], × (dPos, [0.e0, 0.1e1]))))))[0], -0.e0), > (+<$[2]> ([0.1e-8, 0.1e-8], +<$[2]> (refPos, *<$[2]> (dPos, × (-<$[2]> ([0.e0, 0.e0], refPos), /<$[2]> ([0.e0, 0.1e1], × (dPos, [0.e0, 0.1e1]))))))[1], -0.e0))) {
      time = × (-<$[2]> ([0.e0, 0.e0], refPos), /<$[2]> ([0.e0, 0.1e1], × (dPos, [0.e0, 0.1e1])));
      face = 1;
      }
    if $and (>= (× (-<$[2]> ([0.e0, 0.e0], refPos), /<$[2]> ([0.1e1, 0.e0], × (dPos, [0.1e1, 0.e0]))), -0.1e-15), $and (> (time, × (-<$[2]> ([0.e0, 0.e0], refPos), /<$[2]> ([0.1e1, 0.e0], × (dPos, [0.1e1, 0.e0])))), >= (|()|<$[]> (× (dPos, [0.1e1, 0.e0])), 0.1e-20)))
    if $and (> (+<$[]> (0.1e1, 0.1e-8), •<$[2]; $[2]; $[]> ([0.1e1, 0.1e1], +<$[2]> (refPos, *<$[2]> (dPos, × (-<$[2]> ([0.e0, 0.e0], refPos), /<$[2]> ([0.1e1, 0.e0], × (dPos, [0.1e1, 0.e0]))))))), $and (> (+<$[2]> ([0.1e-8, 0.1e-8], +<$[2]> (refPos, *<$[2]> (dPos, × (-<$[2]> ([0.e0, 0.e0], refPos), /<$[2]> ([0.1e1, 0.e0], × (dPos, [0.1e1, 0.e0]))))))[0], -0.e0), > (+<$[2]> ([0.1e-8, 0.1e-8], +<$[2]> (refPos, *<$[2]> (dPos, × (-<$[2]> ([0.e0, 0.e0], refPos), /<$[2]> ([0.1e1, 0.e0], × (dPos, [0.1e1, 0.e0]))))))[1], -0.e0))) {
      time = × (-<$[2]> ([0.e0, 0.e0], refPos), /<$[2]> ([0.1e1, 0.e0], × (dPos, [0.1e1, 0.e0])));
      face = 2;
      }
    if != (face, -1) {
    return [max (time, 0.e0), (real)face];
    }
  else {
    return [(real)-1, (real)-1];
    }
  }
function vec2 _exit (vec2 refPos, vec2 dPos, int i)
{
  real time = +inf;
  int face = -1;
  real faceTime = -inf;
  if $and (>= (× (-<$[2]> ([0.1e1, 0.e0], refPos), /<$[2]> ([-0.1e1, 0.1e1], × (dPos, [-0.1e1, 0.1e1]))), -0.1e-15), $and (> (time, × (-<$[2]> ([0.1e1, 0.e0], refPos), /<$[2]> ([-0.1e1, 0.1e1], × (dPos, [-0.1e1, 0.1e1])))), >= (|()|<$[]> (× (dPos, [-0.1e1, 0.1e1])), 0.1e-20)))
    if != (i, 0) {
      time = × (-<$[2]> ([0.1e1, 0.e0], refPos), /<$[2]> ([-0.1e1, 0.1e1], × (dPos, [-0.1e1, 0.1e1])));
      face = 0;
      }
    else {
      faceTime = × (-<$[2]> ([0.1e1, 0.e0], refPos), /<$[2]> ([-0.1e1, 0.1e1], × (dPos, [-0.1e1, 0.1e1])));
      }
    if $and (>= (× (-<$[2]> ([0.e0, 0.e0], refPos), /<$[2]> ([0.e0, 0.1e1], × (dPos, [0.e0, 0.1e1]))), -0.1e-15), $and (> (time, × (-<$[2]> ([0.e0, 0.e0], refPos), /<$[2]> ([0.e0, 0.1e1], × (dPos, [0.e0, 0.1e1])))), >= (|()|<$[]> (× (dPos, [0.e0, 0.1e1])), 0.1e-20)))
    if != (i, 1) {
      time = × (-<$[2]> ([0.e0, 0.e0], refPos), /<$[2]> ([0.e0, 0.1e1], × (dPos, [0.e0, 0.1e1])));
      face = 1;
      }
    else {
      faceTime = × (-<$[2]> ([0.e0, 0.e0], refPos), /<$[2]> ([0.e0, 0.1e1], × (dPos, [0.e0, 0.1e1])));
      }
    if $and (>= (× (-<$[2]> ([0.e0, 0.e0], refPos), /<$[2]> ([0.1e1, 0.e0], × (dPos, [0.1e1, 0.e0]))), -0.1e-15), $and (> (time, × (-<$[2]> ([0.e0, 0.e0], refPos), /<$[2]> ([0.1e1, 0.e0], × (dPos, [0.1e1, 0.e0])))), >= (|()|<$[]> (× (dPos, [0.1e1, 0.e0])), 0.1e-20)))
    if != (i, 2) {
      time = × (-<$[2]> ([0.e0, 0.e0], refPos), /<$[2]> ([0.1e1, 0.e0], × (dPos, [0.1e1, 0.e0])));
      face = 2;
      }
    else {
      faceTime = × (-<$[2]> ([0.e0, 0.e0], refPos), /<$[2]> ([0.1e1, 0.e0], × (dPos, [0.1e1, 0.e0])));
      }
    if != (face, -1) {
    return [max (time, 0.e0), (real)face];
    }
  else {
    if == (-inf, faceTime) {
      return [(real)-1, (real)-1];
      }
    else {
      return [faceTime, (real)i];
      }
    }
  }
function FemType: Mesh with type var:msh domain (FemType: Space with type var:msh arg0)
{
  return extractFem(Mesh,arg0 );
  }
function FemType: Space with type var:msh space (FemType: FemFunc with type var:fns arg0)
{
  return extractFem(Space,arg0 );
  }
function FemType: FuncCell with type var:func funcCell (FemType: FemFunc with type var:fns arg0, FemType: MeshCell with type var:msh arg1)
{
  return loadFem(FuncCell);
  }
real camDist = |()|<$[3]> (-<$[3]> (camAt, camEye));
real camNearVsp = +<$[]> (camNear, camDist);
real camFarVsp = +<$[]> (camFar, camDist);
vec3 camN = normalize<$[3]> (-<$[3]> (camAt, camEye));
vec3 camU = normalize<$[3]> (× (camN, camUp));
vec3 camV = × (camU, camN);
real camVmax = * (tan (/ (* (camFOV, 0.314159265358979323846264338327950288e1), (real)360)), camDist);
real camUmax = / (* (camVmax, (real)iresU), (real)iresV);
field#0(1)[3] CM = ⊛<#0; %1; $[3]> (tent, clamp<%1; $[3]> (cmap));
vec3 L = •<$[3,3]; $[3]; $[3]> (transpose<%3; %3> ([camU, camV, camN]), normalize<$[3]> (lightVsp));
function int sign (real x)
{
  if > (x, 0.e0) {
    return 1;
    }
  else {
    if < (x, 0.e0) {
      return unary - (1);
      }
    else {
      return 0;
      }
    }
  }
strand ray (int ui, int vi)
{
  real rayU = lerp<$[]> (unary -<$[]> (camUmax), camUmax, unary -<$[]> (0.5e0), (real)ui, -<$[]> ((real)iresU, 0.5e0));
  real rayV = lerp<$[]> (unary -<$[]> (camVmax), camVmax, unary -<$[]> (0.5e0), (real)vi, -<$[]> ((real)iresV, 0.5e0));
  vec3 UV = +<$[3]> (*<$[3]> (rayU, camU), *<$[3]> (rayV, camV));
  vec3 rayOrig = +<$[3]> (camEye, UV);
  vec3 rayVec = +<$[3]> (camN, [0.e0, 0.e0, 0.e0]);
  real camNearVsp = camNearVsp;
  real camFarVsp = camFarVsp;
  vec3 rayStart = +<$[3]> (rayOrig, *<$[3]> (camNearVsp, rayVec));
  int offset = $dynsub<int> (indecies, + (* (ui, iresV), vi));
  int len = $dynsub<int> (indecies, + (+ (* (iresU, iresV), * (ui, iresV)), vi));
  int itter = 0;
  int intersectionItter = 0;
  int idx = + (offset, itter);
  vec2 interval = $dynsub<vec2> (times, idx);
  real s = interval[0];
  real e = interval[1];
  FemType: MeshCell with type var:msh cc = $dynsub<FemType: MeshCell with type var:msh> (extractFemItem(a, FemType: MeshCell with type var:msh[], Cells(Mesh)), 0);
  FemType: FuncCell with type var:func fc = funcCell (c, cc);
  bool newton = true;
  output real out = 0.e0;
  output vec4 rgba = [0.e0, 0.e0, 0.e0, 0.e0];
  output vec3[] locs = (vec3[]){};
  start {
    if (debug && (!= (ui, debugU) && != (vi, debugV)))
      stabilize;
      if == (len, 0) {
      print ("(find:)No intersection found:", ui, "/", vi, "\n");
      stabilize;
      }
    cc = $dynsub<FemType: MeshCell with type var:msh> (extractFemItem(a, FemType: MeshCell with type var:msh[], Cells(Mesh)), $dynsub<int> (cells, idx));
    fc = funcCell (c, cc);
    }
  update {
    print ("Ui/Vi::", ui, "/", vi, "\n");
    print ("Interval:", [s, e], "\n");
    print ("inner itter:", intersectionItter, "\n");
    print ("Outer itter:", itter, "\n");
    vec2 startRay = +<$[2]> ([rayOrig[0], rayOrig[1]], *<$[2]> (s, [rayVec[0], rayVec[1]]));
    vec2 endRay = +<$[2]> ([rayOrig[0], rayOrig[1]], *<$[2]> (e, [rayVec[0], rayVec[1]]));
    vec2 invertA = @<#; %2; $[2]> (femField(extractFem(Mesh,cc ),extractFemItem(cc, int, CellIndex(MeshCell)),field(2)[2], InvTransform, _msh_newtonInverse), startRay);
    vec2 invertB = @<#; %2; $[2]> (femField(extractFem(Mesh,cc ),extractFemItem(cc, int, CellIndex(MeshCell)),field(2)[2], InvTransform, _msh_newtonInverse), endRay);
    print ("inverses:", invertA, invertB, "\n");
    real faVal = @<#; %2; $[]> (femField(extractFem(FemFunc,fc ),extractFemItem(fc, int, CellIndex(FuncCell)),field(2)[], refField, ), invertA);
    real fa = -<$[]> (-<$[]> (faVal, * (rayVec[2], s)), rayOrig[2]);
    real fb = -<$[]> (-<$[]> (@<#; %2; $[]> (femField(extractFem(FemFunc,fc ),extractFemItem(fc, int, CellIndex(FuncCell)),field(2)[], refField, ), invertB), * (rayVec[2], e)), rayOrig[2]);
    print ("Vals:", [fa, fb], "\n");
    if (< (|()|<$[]> (-<$[]> (fa, fb)), intervalEps) && (> (|()|<$[]> (fa), intervalEps) && > (|()|<$[]> (fb), intervalEps))) {
      print ("warn\n");
      s = +<$[]> (s, intervalEps);
      continue;
      }
    real cup = / (-<$[]> (* (s, fb), * (e, fa)), -<$[]> (fb, fa));
    print ("Mid time:", cup, "\n");
    vec2 midRay = +<$[2]> ([rayOrig[0], rayOrig[1]], *<$[2]> (cup, [rayVec[0], rayVec[1]]));
    vec2 invertC = @<#; %2; $[2]> (femField(extractFem(Mesh,cc ),extractFemItem(cc, int, CellIndex(MeshCell)),field(2)[2], InvTransform, _msh_newtonInverse), midRay);
    real fmVal = @<#; %2; $[]> (femField(extractFem(FemFunc,fc ),extractFemItem(fc, int, CellIndex(FuncCell)),field(2)[], refField, ), invertC);
    real fm = -<$[]> (-<$[]> (fmVal, * (rayVec[2], cup)), rayOrig[2]);
    print ("all vals:", [fa, fm, fb], "\n");
    intersectionItter = + (intersectionItter, 1);
    if < (* (sign (fa), sign (fm)), 0) {
      e = cup;
      }
    else {
      if > (* (sign (fa), sign (fm)), 0)
        s = cup;
        }
    print ("new interval:", [s, e], "\n");
    if < (|()|<$[]> (fm), zeroEps) {
      vec2 grad = [0.e0, 0.e0];
      vec3 loc = rayOrig;
      if < (|()|<$[]> (fm), zeroEps) {
        grad = @<#; %2; $[2]> (∇<#; %2> (∘<#; %2; $[]; %2; $[2]> (femField(extractFem(FemFunc,fc ),extractFemItem(fc, int, CellIndex(FuncCell)),field(2)[], refField, ), femField(extractFem(Mesh,cc ),extractFemItem(cc, int, CellIndex(MeshCell)),field(2)[2], InvTransform, _msh_newtonInverse))), midRay);
        out = fmVal;
        }
      print ("Out val:", out, "\n");
      print ("Grad val:", grad, "\n");
      vec3 mcol = [0.1e1, 0.1e1, 0.1e1];
      if != (cmin, cmax)
        mcol = @<#0; %1; $[3]> (CM, lerp<$[]> ((real)(unary - (1)), (real)1, cmin, out, cmax));
        if light {
        vec3 N = normalize<$[3]> ([grad[0], grad[1], (real)(unary - (1))]);
        vec3 H = normalize<$[3]> (+<$[3]> (unary -<$[3]> (normalize<$[3]> (rayVec)), L));
        vec3 lightColor = lerp<$[3]> (mcnear, mcfar, camNearVsp, cup, camFarVsp);
        vec3 ambientTerm = *<$[3]> (phongKa, mcol);
        vec3 diffuse = *<$[3]> (*<$[3]> (phongKd, modulate<%3> (mcol, lightColor)), max ((real)0, •<$[3]; $[3]; $[]> (N, L)));
        vec3 specular = *<$[3]> (*<$[3]> (phongKs, lightColor), ^ (max ((real)0, •<$[3]; $[3]; $[]> (N, H)), phongSp));
        vec3 fin = +<$[3]> (+<$[3]> (ambientTerm, diffuse), specular);
        rgba = [fin[0], fin[1], fin[2], 0.1e1];
        }
      else {
        rgba = [mcol[0], mcol[1], mcol[2], 0.1e1];
        }
      locs = (vec3[]){+<$[3]> (*<$[3]> (rayVec, cup), rayOrig)};
      stabilize;
      }
    if > (intersectionItter, 32) {
      intersectionItter = 0;
      itter = + (itter, 1);
      if >= (itter, len) {
        print ("No intersection found\n");
        print ("Fin pixel=============================\n");
        stabilize;
        }
      interval = $dynsub<vec2> (times, + (offset, itter));
      cc = $dynsub<FemType: MeshCell with type var:msh> (extractFemItem(a, FemType: MeshCell with type var:msh[], Cells(Mesh)), $dynsub<int> (cells, + (offset, itter)));
      s = interval[0];
      e = interval[1];
      fc = funcCell (c, cc);
      print ("++++++++++++++++Next interval!+++++++++++++++++++\n");
      continue;
      }
    else {
      print ("---------------\n");
      }
    }
  
}
grid(2) {
    foreach (int vi in $range (0, - (iresU, 1))) {
      foreach (int ui in $range (0, - (iresV, 1))) {
        new ray (ui, vi);
        }
      }
    }
  
/* Program end */
/home/teocollin/gitcode/diderot/tests/lipRay/find/cmap.nrrd file header:
  type: double
  dimension: 2
  space dimension: 1
  sizes: 3 311
  space directions: none (0.0066445182724252493)
  kinds: 3-vector space
  endian: little
  encoding: raw
  space origin: (-1.0299003322259137)
/* Simplified Program (after after simplify) start */
properties: GlobalInit,StrandArray,HasStartMethod,ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[]),HasInputs,HasGlobals
input real isoval044E = <default>;
input real thick044F = <default>;
input vec3 camEye0450 = <default>;
input vec3 camAt0454 = <default>;
input vec3 camUp0458 = <default>;
input real camFOV045C = <default>;
input int iresU045D = <default>;
input int iresV045E = <default>;
input real camNear045F = <default>;
input real camFar0460 = <default>;
input real refStep0461 = <default>;
input real rayStep0462 = <default>;
input FemData:Mesh a0463;
input FemData:Space 0b046F_intermedateGlobal0470;
input FemData:FemFunc 0c0471_intermedateGlobal0472;
input real zeroEps0473 = <default>;
input real intervalEps0474 = <default>;
input int[] indecies0475;
input vec2[] times0476;
input int[] cells0477;
input vec3 mcnear0478("material color at near clipping plane (for depth cuing)") = <default>;
input vec3 mcfar047C("material color at far clipping plane") = <default>;
input image(1)[3] cmap0481("univariate colormap") = image("/home/teocollin/gitcode/diderot/tests/lipRay/find/cmap.nrrd");
input real cmin0482("value mapped to min end of colormap") = <default>;
input real cmax0483("value mapped to max end of colormap. By default cmin==cmax==0, which disables this colormapping") = <default>;
input bool light0484 = <default>;
input real phongKa0485("Blinn-Phong ambient component") = <default>;
input real phongKd0486("Blinn-Phong diffuse component") = <default>;
input real phongKs0487("Blinn-Phong specular component") = <default>;
input real phongSp0488("Blinn-Phong specularity exponent") = <default>;
input real maxAlpha0489("maximum opacity on rendered surface") = <default>;
input vec3 lightVsp048A = <default>;
input bool debug048E = <default>;
input int debugU048F = <default>;
input int debugV0490 = <default>;
constants {
  isoval044E = 0.2e0;
  thick044F = 0.7e-1;
  real _t0451 = 0.3e1;
  real _t0452 = -0.3e1;
  real _t0453 = 0.3e1;
  camEye0450 = [_t0451, _t0452, _t0453];
  real _t0455 = 0.5e0;
  real _t0456 = 0.5e0;
  real _t0457 = 0.5e0;
  camAt0454 = [_t0455, _t0456, _t0457];
  real _t0459 = 0.e0;
  real _t045A = 0.e0;
  real _t045B = 0.1e1;
  camUp0458 = [_t0459, _t045A, _t045B];
  camFOV045C = 0.137e2;
  iresU045D = 10;
  iresV045E = 10;
  camNear045F = -0.2e1;
  camFar0460 = 0.5e1;
  refStep0461 = 0.1e1;
  rayStep0462 = 0.1e-1;
  zeroEps0473 = 0.1e-10;
  intervalEps0474 = 0.1e-10;
  real _t0479 = 0.1e1;
  real _t047A = 0.1e1;
  real _t047B = 0.1e1;
  mcnear0478 = [_t0479, _t047A, _t047B];
  real _t047D = 0.1e1;
  real _t047E = 0.1e1;
  real _t047F = 0.1e1;
  mcfar047C = [_t047D, _t047E, _t047F];
  cmin0482 = 0.e0;
  cmax0483 = 0.1e1;
  light0484 = false;
  phongKa0485 = 0.5e0;
  phongKd0486 = 0.5e0;
  phongKs0487 = 0.e0;
  phongSp0488 = 0.6e2;
  maxAlpha0489 = 0.1e1;
  real _t048B = 0.e0;
  real _t048C = 0.369e1;
  real _t048D = 0.153e1;
  lightVsp048A = [_t048B, _t048C, _t048D];
  debug048E = false;
  debugU048F = 8;
  debugV0490 = 2;
}
global Femdata: MeshCell[] 0cell_a0464;
global Femdata: Space b046F;
global Femdata: FemFunc c0471;
global real camDist0816;
global real camNearVsp0817;
global real camFarVsp0818;
global vec3 camN081A;
global vec3 camU081C;
global vec3 camV081D;
global real camVmax0823;
global real camUmax0827;
global field#0(1)[3] CM082A;
global vec3 L082E;
function bool#0 !=0491 (Femdata: MeshCell cell10492, Femdata: MeshCell cell10493)
{
  int _t0494 = extractFemItem(CellIndex(Mesh), int, cell10492);
  int _t0495 = extractFemItem(CellIndex(Mesh), int, cell10493);
  bool _t0496 = prim !=0086 (_t0494, _t0495);
  return _t0496;
}
function bool#0 ==0497 (Femdata: MeshCell cell10492, Femdata: MeshCell cell10493)
{
  int _t0498 = extractFemItem(CellIndex(Mesh), int, cell10492);
  int _t0499 = extractFemItem(CellIndex(Mesh), int, cell10493);
  bool _t049A = prim ==0082 (_t0498, _t0499);
  return _t049A;
}
function Femdata: MeshPos#0 findPos049B (Femdata: Mesh mesh049C, vec2 pos049D)
{
  real _t049E = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t049F = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  xn04A0 = [_t049E, _t049F];
  newtonInt04A1 = 0;
  cellInt04A2 = extractFemItem(StartCell(Mesh), int, mesh049C);
  int _t04A3 = extractFemItem(NumCell(Mesh), int, mesh049C);
  int _t04A4 = 1;
  numCell04A5 = prim -0024 (_t04A3, _t04A4);
  yayCells04A6 = extractFemItem2(NearbyCell(File=spat.in)(Mesh), vec2, mesh049C, pos049D : vec2);
  foreach cellItter04A7 in yayCells04A6 {
    cellInt04A2 = cellItter04A7;
    field(2)[2] _t04A8 = femField(mesh049C,cellInt04A2,field(2)[2],Transform,);
    field(2)[2,2] _t04A9 = prim ∇⊗00AD<#∞; %2; $[]; %2> (_t04A8);
    field(2)[2,2] _t04AA = prim inv015B<#∞; %2> (_t04A9);
    real _t04AB = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    real _t04AC = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    vec2 _t04AD = [_t04AB, _t04AC];
    A04AE = prim @00A5<#∞; %2; $[2,2]> (_t04AA, _t04AD);
    int _t04AF = 0;
    int _t04B0 = 16;
    int[] _t04B1 = prim $range01C3 (_t04AF, _t04B0);
    foreach newtonItter04D4 in _t04B1 {
      field(2)[2] _t04B2 = femField(mesh049C,cellInt04A2,field(2)[2],Transform,);
      field(2)[2] _t04B3 = prim -002E<#∞; %2; $[2]> (_t04B2, pos049D);
      field(2)[2] _t04B4 = prim •00D4<#∞; %2; $[2,2]; $[2]; $[2]> (A04AE, _t04B3);
      delta04B5 = prim @00A5<#∞; %2; $[2]> (_t04B4, xn04A0);
      xn04A0 = prim -0026<$[2]> (xn04A0, delta04B5);
      real _t04B6 = 0.1e-7;
      real _t04B7 = 0.1e-7;
      real _t04B8 = prim *0034 (_t04B6, _t04B7);
      real _t04B9 = prim •00CE<$[2]; $[2]; $[]> (delta04B5, delta04B5);
      bool _t04BA = prim >=007E (_t04B8, _t04B9);
      if _t04BA {
        real _t04BB = 0.1e1;
        real _t04BC = 0.1e-8;
        real _t04BD = prim +0017<$[]> (_t04BB, _t04BC);
        real _t04BE = 0.1e1;
        real _t04BF = 0.1e1;
        vec2 _t04C0 = [_t04BE, _t04BF];
        real _t04C1 = prim •00CE<$[2]; $[2]; $[]> (_t04C0, xn04A0);
        bool _t04C2 = prim >0080 (_t04BD, _t04C1);
        real _t04C3 = 0.1e-8;
        real _t04C4 = 0.1e-8;
        vec2 _t04C5 = [_t04C3, _t04C4];
        vec2 _t04C6 = prim +0017<$[2]> (_t04C5, xn04A0);
        real _t04C7 = _t04C6[0];
        real _t04C8 = -0.e0;
        bool _t04C9 = prim >0080 (_t04C7, _t04C8);
        real _t04CA = 0.1e-8;
        real _t04CB = 0.1e-8;
        vec2 _t04CC = [_t04CA, _t04CB];
        vec2 _t04CD = prim +0017<$[2]> (_t04CC, xn04A0);
        real _t04CE = _t04CD[1];
        real _t04CF = -0.e0;
        bool _t04D0 = prim >0080 (_t04CE, _t04CF);
        bool _t04D1 = prim $and01C4 (_t04C9, _t04D0);
        bool _t04D2 = prim $and01C4 (_t04C2, _t04D1);
        if _t04D2 {
          Femdata: MeshPos _t04D3 = extractFemItemN((mesh049C, cellInt04A2, xn04A0, pos049D),AllBuild(MeshPos),);
          return _t04D3;
        }
      }
    }
  }
  string _t04D5 = "Bad end 2";
  string _t04D6 = "\n";
  print (_t04D5, _t04D6);
  Femdata: MeshPos _t04D7 = extractFemItemN((mesh049C),InvalidBuild(MeshPos),);
  return _t04D7;
}
function Femdata: RefCell#0 refcell04D8 (Femdata: Mesh arg004D9)
{
  Femdata: RefCell _t04DA = extractFemItem(RefCell(Mesh), Femdata: RefCell, arg004D9);
  return _t04DA;
}
function Femdata: MeshCell[]#0 cells04DB (Femdata: Mesh arg004DC)
{
  Femdata: MeshCell[] _t04DD = extractFemItem(Cells(Mesh), Femdata: MeshCell[], arg004DC);
  return _t04DD;
}
function Femdata: MeshCell[]#0 cells04DE (Femdata: Mesh arg004DC)
{
  int _t04DF = 0;
  int _t04E0 = extractFemItem(NumCell(Mesh), int, arg004DC);
  int[] _t04E1 = prim $range01C3 (_t04DF, _t04E0);
  Femdata: MeshCell[] accum04E4 = {};
  foreach i04E2 in _t04E1 {
    Femdata: MeshCell _t04E3 = loadFem(MeshCell, arg004DC, i04E2);
    accum04E4 = prim @0010<Femdata: MeshCell> (accum04E4, _t04E3);
  }
  return accum04E4;
}
function int#0 numCell04E5 (Femdata: Mesh arg004D9)
{
  int _t04E6 = extractFemItem(NumCell(Mesh), int, arg004D9);
  return _t04E6;
}
function tensor[2,2,2,2]#0 msh_transform_304E7 (vec2 pos04E8, int cell04E9, Femdata: Mesh mesh04EA)
{
  field(2)[2] _t04EB = femField(mesh04EA,cell04E9,field(2)[2],Transform,);
  field(2)[2,2] _t04EC = prim ∇⊗00AD<#∞; %2; $[]; %2> (_t04EB);
  field(2)[2,2,2] _t04ED = prim ∇⊗00AD<#∞; %2; $[2]; %2> (_t04EC);
  field(2)[2,2,2,2] _t04EE = prim ∇⊗00AD<#∞; %2; $[2,2]; %2> (_t04ED);
  tensor[2,2,2,2] _t04EF = prim @00A5<#∞; %2; $[2,2,2,2]> (_t04EE, pos04E8);
  return _t04EF;
}
function tensor[2,2,2]#0 msh_transform_204F0 (vec2 pos04E8, int cell04E9, Femdata: Mesh mesh04EA)
{
  field(2)[2] _t04F1 = femField(mesh04EA,cell04E9,field(2)[2],Transform,);
  field(2)[2,2] _t04F2 = prim ∇⊗00AD<#∞; %2; $[]; %2> (_t04F1);
  field(2)[2,2,2] _t04F3 = prim ∇⊗00AD<#∞; %2; $[2]; %2> (_t04F2);
  tensor[2,2,2] _t04F4 = prim @00A5<#∞; %2; $[2,2,2]> (_t04F3, pos04E8);
  return _t04F4;
}
function tensor[2,2]#0 msh_transform_104F5 (vec2 pos04E8, int cell04E9, Femdata: Mesh mesh04EA)
{
  field(2)[2] _t04F6 = femField(mesh04EA,cell04E9,field(2)[2],Transform,);
  field(2)[2,2] _t04F7 = prim ∇⊗00AD<#∞; %2; $[]; %2> (_t04F6);
  tensor[2,2] _t04F8 = prim @00A5<#∞; %2; $[2,2]> (_t04F7, pos04E8);
  return _t04F8;
}
function vec2#2 msh_transform_004F9 (vec2 pos04E8, int cell04E9, Femdata: Mesh mesh04EA)
{
  field(2)[2] _t04FA = femField(mesh04EA,cell04E9,field(2)[2],Transform,);
  vec2 _t04FB = prim @00A5<#∞; %2; $[2]> (_t04FA, pos04E8);
  return _t04FB;
}
function Femdata: MeshPos#4 _msh_newtonInverse04FC (vec2 pos04FD, int cellInt04FE, Femdata: Mesh mesh04FF)
{
  real _t0500 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t0501 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  xn0502 = [_t0500, _t0501];
  field(2)[2] _t0503 = femField(mesh04FF,cellInt04FE,field(2)[2],Transform,);
  field(2)[2,2] _t0504 = prim ∇⊗00AD<#∞; %2; $[]; %2> (_t0503);
  field(2)[2,2] _t0505 = prim inv015B<#∞; %2> (_t0504);
  real _t0506 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t0507 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  vec2 _t0508 = [_t0506, _t0507];
  A0509 = prim @00A5<#∞; %2; $[2,2]> (_t0505, _t0508);
  int _t050A = 0;
  int _t050B = 16;
  int[] _t050C = prim $range01C3 (_t050A, _t050B);
  foreach itter0530 in _t050C {
    field(2)[2] _t050D = femField(mesh04FF,cellInt04FE,field(2)[2],Transform,);
    field(2)[2] _t050E = prim -002E<#∞; %2; $[2]> (_t050D, pos04FD);
    field(2)[2] _t050F = prim •00D4<#∞; %2; $[2,2]; $[2]; $[2]> (A0509, _t050E);
    delta0510 = prim @00A5<#∞; %2; $[2]> (_t050F, xn0502);
    xn0502 = prim -0026<$[2]> (xn0502, delta0510);
    real _t0511 = 0.1e-7;
    real _t0512 = 0.1e-7;
    real _t0513 = prim *0034 (_t0511, _t0512);
    real _t0514 = prim •00CE<$[2]; $[2]; $[]> (delta0510, delta0510);
    bool _t0515 = prim >=007E (_t0513, _t0514);
    if _t0515 {
      real _t0516 = 0.1e1;
      real _t0517 = 0.1e-8;
      real _t0518 = prim +0017<$[]> (_t0516, _t0517);
      real _t0519 = 0.1e1;
      real _t051A = 0.1e1;
      vec2 _t051B = [_t0519, _t051A];
      real _t051C = prim •00CE<$[2]; $[2]; $[]> (_t051B, xn0502);
      bool _t051D = prim >0080 (_t0518, _t051C);
      real _t051E = 0.1e-8;
      real _t051F = 0.1e-8;
      vec2 _t0520 = [_t051E, _t051F];
      vec2 _t0521 = prim +0017<$[2]> (_t0520, xn0502);
      real _t0522 = _t0521[0];
      real _t0523 = -0.e0;
      bool _t0524 = prim >0080 (_t0522, _t0523);
      real _t0525 = 0.1e-8;
      real _t0526 = 0.1e-8;
      vec2 _t0527 = [_t0525, _t0526];
      vec2 _t0528 = prim +0017<$[2]> (_t0527, xn0502);
      real _t0529 = _t0528[1];
      real _t052A = -0.e0;
      bool _t052B = prim >0080 (_t0529, _t052A);
      bool _t052C = prim $and01C4 (_t0524, _t052B);
      bool _t052D = prim $and01C4 (_t051D, _t052C);
      if _t052D {
        Femdata: MeshPos _t052E = extractFemItemN((mesh04FF, cellInt04FE, xn0502, pos04FD),AllBuild(MeshPos),);
        return _t052E;
      } else {
        Femdata: MeshPos _t052F = extractFemItemN((mesh04FF),InvalidBuild(MeshPos),);
        return _t052F;
      }
    }
  }
  Femdata: MeshPos _t0531 = extractFemItemN((mesh04FF),InvalidBuild(MeshPos),);
  return _t0531;
}
function Femdata: MeshPos#0 _mesh_pos_msh_build_world_pos0532 (Femdata: MeshPos pos0533)
{
  bool _t0534 = extractFemItem(WorldTest(MeshPos), bool, pos0533);
  if _t0534 {
    vec2 _t0535 = extractFemItem(RefPos(MeshPos), vec2, pos0533);
    int _t0536 = extractFemItem(CellIndex(MeshPos), int, pos0533);
    Femdata: Mesh _t0537 = extractFem(pos0533, Mesh);
    vec2 _t0538 = func msh_transform_004F9 (_t0535, _t0536, _t0537);
    Femdata: MeshPos _t0539 = extractFemItemN((pos0533, _t0538),NewWorld(MeshPos),);
    return _t0539;
  } else {
    return pos0533;
  }
}
function vec2#0 worldPos053A (Femdata: MeshPos pos0533)
{
  vec2 _t053B = extractFemItem(RefPos(MeshPos), vec2, pos0533);
  int _t053C = extractFemItem(CellIndex(MeshPos), int, pos0533);
  Femdata: Mesh _t053D = extractFem(pos0533, Mesh);
  vec2 _t053E = func msh_transform_004F9 (_t053B, _t053C, _t053D);
  return _t053E;
}
function Femdata: MeshPos#0 $exitPos053F (Femdata: Mesh mesh0540, int cellId0541, vec2 refPos0542, vec2 dPos0543, real[2] time0544)
{
  int _t0545 = -1;
  real _t0546 = time0544[1];
  int _t0547 = prim $r2i01B7 (_t0546);
  int[2] _t0549 = func nextCell40548 (_t0547, cellId0541, mesh0540);
  int _t054A = 0;
  int _t054B = prim $sub01C0<int; %2> (_t0549, _t054A);
  bool _t054C = prim !=0086 (_t0545, _t054B);
  if _t054C {
    real _t054D = time0544[1];
    int _t054E = prim $r2i01B7 (_t054D);
    int[2] _t054F = func nextCell40548 (_t054E, cellId0541, mesh0540);
    int _t0550 = 0;
    int _t0551 = prim $sub01C0<int; %2> (_t054F, _t0550);
    real _t0552 = 0.1e1;
    real _t0553 = 0.e0;
    vec2 _t0554 = [_t0552, _t0553];
    real _t0555 = 0.e0;
    real _t0556 = 0.e0;
    vec2 _t0557 = [_t0555, _t0556];
    real _t0558 = 0.e0;
    real _t0559 = 0.e0;
    vec2 _t055A = [_t0558, _t0559];
    vec2[3] _t055B = {_t0554, _t0557, _t055A};
    real _t055C = time0544[1];
    int _t055D = prim $r2i01B7 (_t055C);
    int[2] _t055E = func nextCell40548 (_t055D, cellId0541, mesh0540);
    int _t055F = 1;
    int _t0560 = prim $sub01C0<int; %2> (_t055E, _t055F);
    vec2 _t0561 = prim $sub01C0<vec2; %3> (_t055B, _t0560);
    real _t0562 = -0.1e1;
    real _t0563 = 0.1e1;
    vec2 _t0564 = [_t0562, _t0563];
    real _t0565 = 0.e0;
    real _t0566 = 0.1e1;
    vec2 _t0567 = [_t0565, _t0566];
    real _t0568 = 0.1e1;
    real _t0569 = 0.e0;
    vec2 _t056A = [_t0568, _t0569];
    vec2[3] _t056B = {_t0564, _t0567, _t056A};
    real _t056C = time0544[1];
    int _t056D = prim $r2i01B7 (_t056C);
    int[2] _t056E = func nextCell40548 (_t056D, cellId0541, mesh0540);
    int _t056F = 1;
    int _t0570 = prim $sub01C0<int; %2> (_t056E, _t056F);
    vec2 _t0571 = prim $sub01C0<vec2; %3> (_t056B, _t0570);
    real _t0572 = time0544[0];
    vec2 _t0573 = prim *0036<$[2]> (_t0572, dPos0543);
    vec2 _t0574 = prim +0017<$[2]> (_t0573, refPos0542);
    real _t0575 = _t0574[0];
    real _t0576 = time0544[0];
    vec2 _t0577 = prim *0036<$[2]> (_t0576, dPos0543);
    vec2 _t0578 = prim +0017<$[2]> (_t0577, refPos0542);
    real _t0579 = _t0578[1];
    real[2] _t057A = {_t0575, _t0579};
    int _t057B = 1;
    int _t057C = 1;
    int _t057D = 0;
    int[3] _t057E = {_t057B, _t057C, _t057D};
    real _t057F = time0544[1];
    int _t0580 = prim $r2i01B7 (_t057F);
    int _t0581 = prim $sub01C0<int; %3> (_t057E, _t0580);
    real _t0582 = prim $sub01C0<real; %2> (_t057A, _t0581);
    real _t0583 = 0.1e1;
    real _t0584 = 0.e0;
    real[2] _t0585 = {_t0583, _t0584};
    real _t0586 = 0.e0;
    real _t0587 = 0.e0;
    real[2] _t0588 = {_t0586, _t0587};
    real _t0589 = 0.e0;
    real _t058A = 0.e0;
    real[2] _t058B = {_t0589, _t058A};
    real[2][3] _t058C = {_t0585, _t0588, _t058B};
    real _t058D = time0544[1];
    int _t058E = prim $r2i01B7 (_t058D);
    real[2] _t058F = prim $sub01C0<real[2]; %3> (_t058C, _t058E);
    int _t0590 = 1;
    int _t0591 = 1;
    int _t0592 = 0;
    int[3] _t0593 = {_t0590, _t0591, _t0592};
    real _t0594 = time0544[1];
    int _t0595 = prim $r2i01B7 (_t0594);
    int _t0596 = prim $sub01C0<int; %3> (_t0593, _t0595);
    real _t0597 = prim $sub01C0<real; %2> (_t058F, _t0596);
    real _t0598 = prim -0026<$[]> (_t0582, _t0597);
    real _t0599 = -0.1e1;
    real _t059A = 0.1e1;
    real[2] _t059B = {_t0599, _t059A};
    real _t059C = 0.e0;
    real _t059D = 0.1e1;
    real[2] _t059E = {_t059C, _t059D};
    real _t059F = 0.1e1;
    real _t05A0 = 0.e0;
    real[2] _t05A1 = {_t059F, _t05A0};
    real[2][3] _t05A2 = {_t059B, _t059E, _t05A1};
    real _t05A3 = time0544[1];
    int _t05A4 = prim $r2i01B7 (_t05A3);
    real[2] _t05A5 = prim $sub01C0<real[2]; %3> (_t05A2, _t05A4);
    int _t05A6 = 1;
    int _t05A7 = 1;
    int _t05A8 = 0;
    int[3] _t05A9 = {_t05A6, _t05A7, _t05A8};
    real _t05AA = time0544[1];
    int _t05AB = prim $r2i01B7 (_t05AA);
    int _t05AC = prim $sub01C0<int; %3> (_t05A9, _t05AB);
    real _t05AD = prim $sub01C0<real; %2> (_t05A5, _t05AC);
    real _t05AE = prim /0055 (_t0598, _t05AD);
    vec2 _t05AF = prim *0038<$[2]> (_t0571, _t05AE);
    vec2 _t05B0 = prim +0017<$[2]> (_t0561, _t05AF);
    real _t05B1 = time0544[1];
    int _t05B2 = prim $r2i01B7 (_t05B1);
    int[2] _t05B3 = func nextCell40548 (_t05B2, cellId0541, mesh0540);
    int _t05B4 = 1;
    int _t05B5 = prim $sub01C0<int; %2> (_t05B3, _t05B4);
    Femdata: MeshPos _t05B6 = extractFemItemN((mesh0540, _t0551, _t05B0, _t05B5),RefBuild(Mesh),);
    return _t05B6;
  } else {
    real _t05B7 = time0544[0];
    vec2 _t05B8 = prim *0036<$[2]> (_t05B7, dPos0543);
    vec2 _t05B9 = prim +0017<$[2]> (_t05B8, refPos0542);
    Femdata: MeshPos _t05BA = extractFemItemN((mesh0540, _t05B9),InvalidBuildBoundary(MeshPos),);
    return _t05BA;
  }
}
function int[2]#5 nextCell40548 (int faceIdx05BB, int cell05BC, Femdata: Mesh mesh05BD)
{
  int _t05BE = 6;
  int _t05BF = prim *0033 (cell05BC, _t05BE);
  int _t05C0 = 2;
  int _t05C1 = prim *0033 (faceIdx05BB, _t05C0);
  int _t05C2 = prim +0015 (_t05BF, _t05C1);
  int[2] _t05C3 = extractFemItemN((mesh05BD, _t05C2),CellFaceCell(Mesh),);
  return _t05C3;
}
function vec2#0 _enter05C4 (vec2 refPos05C5, vec2 dPos05C6)
{
  real time05C7 = +inf;
  int face05C8 = -1;
  real faceTime05C9 = -inf;
  real _t05CA = 0.1e1;
  real _t05CB = 0.e0;
  vec2 _t05CC = [_t05CA, _t05CB];
  vec2 _t05CD = prim -0026<$[2]> (_t05CC, refPos05C5);
  real _t05CE = -0.1e1;
  real _t05CF = 0.1e1;
  vec2 _t05D0 = [_t05CE, _t05CF];
  real _t05D1 = -0.1e1;
  real _t05D2 = 0.1e1;
  vec2 _t05D3 = [_t05D1, _t05D2];
  real _t05D4 = prim ×00BD (dPos05C6, _t05D3);
  vec2 _t05D5 = prim /0057<$[2]> (_t05D0, _t05D4);
  real _t05D6 = prim ×00BD (_t05CD, _t05D5);
  real _t05D7 = -0.1e-15;
  bool _t05D8 = prim >=007E (_t05D6, _t05D7);
  real _t05D9 = 0.1e1;
  real _t05DA = 0.e0;
  vec2 _t05DB = [_t05D9, _t05DA];
  vec2 _t05DC = prim -0026<$[2]> (_t05DB, refPos05C5);
  real _t05DD = -0.1e1;
  real _t05DE = 0.1e1;
  vec2 _t05DF = [_t05DD, _t05DE];
  real _t05E0 = -0.1e1;
  real _t05E1 = 0.1e1;
  vec2 _t05E2 = [_t05E0, _t05E1];
  real _t05E3 = prim ×00BD (dPos05C6, _t05E2);
  vec2 _t05E4 = prim /0057<$[2]> (_t05DF, _t05E3);
  real _t05E5 = prim ×00BD (_t05DC, _t05E4);
  bool _t05E6 = prim >0080 (time05C7, _t05E5);
  real _t05E7 = -0.1e1;
  real _t05E8 = 0.1e1;
  vec2 _t05E9 = [_t05E7, _t05E8];
  real _t05EA = prim ×00BD (dPos05C6, _t05E9);
  real _t05EB = prim |()|00B5<$[]> (_t05EA);
  real _t05EC = 0.1e-20;
  bool _t05ED = prim >=007E (_t05EB, _t05EC);
  bool _t05EE = prim $and01C4 (_t05E6, _t05ED);
  bool _t05EF = prim $and01C4 (_t05D8, _t05EE);
  if _t05EF {
    real _t05F0 = 0.1e1;
    real _t05F1 = 0.1e-8;
    real _t05F2 = prim +0017<$[]> (_t05F0, _t05F1);
    real _t05F3 = 0.1e1;
    real _t05F4 = 0.1e1;
    vec2 _t05F5 = [_t05F3, _t05F4];
    real _t05F6 = 0.1e1;
    real _t05F7 = 0.e0;
    vec2 _t05F8 = [_t05F6, _t05F7];
    vec2 _t05F9 = prim -0026<$[2]> (_t05F8, refPos05C5);
    real _t05FA = -0.1e1;
    real _t05FB = 0.1e1;
    vec2 _t05FC = [_t05FA, _t05FB];
    real _t05FD = -0.1e1;
    real _t05FE = 0.1e1;
    vec2 _t05FF = [_t05FD, _t05FE];
    real _t0600 = prim ×00BD (dPos05C6, _t05FF);
    vec2 _t0601 = prim /0057<$[2]> (_t05FC, _t0600);
    real _t0602 = prim ×00BD (_t05F9, _t0601);
    vec2 _t0603 = prim *0038<$[2]> (dPos05C6, _t0602);
    vec2 _t0604 = prim +0017<$[2]> (refPos05C5, _t0603);
    real _t0605 = prim •00CE<$[2]; $[2]; $[]> (_t05F5, _t0604);
    bool _t0606 = prim >0080 (_t05F2, _t0605);
    real _t0607 = 0.1e-8;
    real _t0608 = 0.1e-8;
    vec2 _t0609 = [_t0607, _t0608];
    real _t060A = 0.1e1;
    real _t060B = 0.e0;
    vec2 _t060C = [_t060A, _t060B];
    vec2 _t060D = prim -0026<$[2]> (_t060C, refPos05C5);
    real _t060E = -0.1e1;
    real _t060F = 0.1e1;
    vec2 _t0610 = [_t060E, _t060F];
    real _t0611 = -0.1e1;
    real _t0612 = 0.1e1;
    vec2 _t0613 = [_t0611, _t0612];
    real _t0614 = prim ×00BD (dPos05C6, _t0613);
    vec2 _t0615 = prim /0057<$[2]> (_t0610, _t0614);
    real _t0616 = prim ×00BD (_t060D, _t0615);
    vec2 _t0617 = prim *0038<$[2]> (dPos05C6, _t0616);
    vec2 _t0618 = prim +0017<$[2]> (refPos05C5, _t0617);
    vec2 _t0619 = prim +0017<$[2]> (_t0609, _t0618);
    real _t061A = _t0619[0];
    real _t061B = -0.e0;
    bool _t061C = prim >0080 (_t061A, _t061B);
    real _t061D = 0.1e-8;
    real _t061E = 0.1e-8;
    vec2 _t061F = [_t061D, _t061E];
    real _t0620 = 0.1e1;
    real _t0621 = 0.e0;
    vec2 _t0622 = [_t0620, _t0621];
    vec2 _t0623 = prim -0026<$[2]> (_t0622, refPos05C5);
    real _t0624 = -0.1e1;
    real _t0625 = 0.1e1;
    vec2 _t0626 = [_t0624, _t0625];
    real _t0627 = -0.1e1;
    real _t0628 = 0.1e1;
    vec2 _t0629 = [_t0627, _t0628];
    real _t062A = prim ×00BD (dPos05C6, _t0629);
    vec2 _t062B = prim /0057<$[2]> (_t0626, _t062A);
    real _t062C = prim ×00BD (_t0623, _t062B);
    vec2 _t062D = prim *0038<$[2]> (dPos05C6, _t062C);
    vec2 _t062E = prim +0017<$[2]> (refPos05C5, _t062D);
    vec2 _t062F = prim +0017<$[2]> (_t061F, _t062E);
    real _t0630 = _t062F[1];
    real _t0631 = -0.e0;
    bool _t0632 = prim >0080 (_t0630, _t0631);
    bool _t0633 = prim $and01C4 (_t061C, _t0632);
    bool _t0634 = prim $and01C4 (_t0606, _t0633);
    if _t0634 {
      real _t0635 = 0.1e1;
      real _t0636 = 0.e0;
      vec2 _t0637 = [_t0635, _t0636];
      vec2 _t0638 = prim -0026<$[2]> (_t0637, refPos05C5);
      real _t0639 = -0.1e1;
      real _t063A = 0.1e1;
      vec2 _t063B = [_t0639, _t063A];
      real _t063C = -0.1e1;
      real _t063D = 0.1e1;
      vec2 _t063E = [_t063C, _t063D];
      real _t063F = prim ×00BD (dPos05C6, _t063E);
      vec2 _t0640 = prim /0057<$[2]> (_t063B, _t063F);
      time05C7 = prim ×00BD (_t0638, _t0640);
      face05C8 = 0;
    }
  }
  real _t0641 = 0.e0;
  real _t0642 = 0.e0;
  vec2 _t0643 = [_t0641, _t0642];
  vec2 _t0644 = prim -0026<$[2]> (_t0643, refPos05C5);
  real _t0645 = 0.e0;
  real _t0646 = 0.1e1;
  vec2 _t0647 = [_t0645, _t0646];
  real _t0648 = 0.e0;
  real _t0649 = 0.1e1;
  vec2 _t064A = [_t0648, _t0649];
  real _t064B = prim ×00BD (dPos05C6, _t064A);
  vec2 _t064C = prim /0057<$[2]> (_t0647, _t064B);
  real _t064D = prim ×00BD (_t0644, _t064C);
  real _t064E = -0.1e-15;
  bool _t064F = prim >=007E (_t064D, _t064E);
  real _t0650 = 0.e0;
  real _t0651 = 0.e0;
  vec2 _t0652 = [_t0650, _t0651];
  vec2 _t0653 = prim -0026<$[2]> (_t0652, refPos05C5);
  real _t0654 = 0.e0;
  real _t0655 = 0.1e1;
  vec2 _t0656 = [_t0654, _t0655];
  real _t0657 = 0.e0;
  real _t0658 = 0.1e1;
  vec2 _t0659 = [_t0657, _t0658];
  real _t065A = prim ×00BD (dPos05C6, _t0659);
  vec2 _t065B = prim /0057<$[2]> (_t0656, _t065A);
  real _t065C = prim ×00BD (_t0653, _t065B);
  bool _t065D = prim >0080 (time05C7, _t065C);
  real _t065E = 0.e0;
  real _t065F = 0.1e1;
  vec2 _t0660 = [_t065E, _t065F];
  real _t0661 = prim ×00BD (dPos05C6, _t0660);
  real _t0662 = prim |()|00B5<$[]> (_t0661);
  real _t0663 = 0.1e-20;
  bool _t0664 = prim >=007E (_t0662, _t0663);
  bool _t0665 = prim $and01C4 (_t065D, _t0664);
  bool _t0666 = prim $and01C4 (_t064F, _t0665);
  if _t0666 {
    real _t0667 = 0.1e1;
    real _t0668 = 0.1e-8;
    real _t0669 = prim +0017<$[]> (_t0667, _t0668);
    real _t066A = 0.1e1;
    real _t066B = 0.1e1;
    vec2 _t066C = [_t066A, _t066B];
    real _t066D = 0.e0;
    real _t066E = 0.e0;
    vec2 _t066F = [_t066D, _t066E];
    vec2 _t0670 = prim -0026<$[2]> (_t066F, refPos05C5);
    real _t0671 = 0.e0;
    real _t0672 = 0.1e1;
    vec2 _t0673 = [_t0671, _t0672];
    real _t0674 = 0.e0;
    real _t0675 = 0.1e1;
    vec2 _t0676 = [_t0674, _t0675];
    real _t0677 = prim ×00BD (dPos05C6, _t0676);
    vec2 _t0678 = prim /0057<$[2]> (_t0673, _t0677);
    real _t0679 = prim ×00BD (_t0670, _t0678);
    vec2 _t067A = prim *0038<$[2]> (dPos05C6, _t0679);
    vec2 _t067B = prim +0017<$[2]> (refPos05C5, _t067A);
    real _t067C = prim •00CE<$[2]; $[2]; $[]> (_t066C, _t067B);
    bool _t067D = prim >0080 (_t0669, _t067C);
    real _t067E = 0.1e-8;
    real _t067F = 0.1e-8;
    vec2 _t0680 = [_t067E, _t067F];
    real _t0681 = 0.e0;
    real _t0682 = 0.e0;
    vec2 _t0683 = [_t0681, _t0682];
    vec2 _t0684 = prim -0026<$[2]> (_t0683, refPos05C5);
    real _t0685 = 0.e0;
    real _t0686 = 0.1e1;
    vec2 _t0687 = [_t0685, _t0686];
    real _t0688 = 0.e0;
    real _t0689 = 0.1e1;
    vec2 _t068A = [_t0688, _t0689];
    real _t068B = prim ×00BD (dPos05C6, _t068A);
    vec2 _t068C = prim /0057<$[2]> (_t0687, _t068B);
    real _t068D = prim ×00BD (_t0684, _t068C);
    vec2 _t068E = prim *0038<$[2]> (dPos05C6, _t068D);
    vec2 _t068F = prim +0017<$[2]> (refPos05C5, _t068E);
    vec2 _t0690 = prim +0017<$[2]> (_t0680, _t068F);
    real _t0691 = _t0690[0];
    real _t0692 = -0.e0;
    bool _t0693 = prim >0080 (_t0691, _t0692);
    real _t0694 = 0.1e-8;
    real _t0695 = 0.1e-8;
    vec2 _t0696 = [_t0694, _t0695];
    real _t0697 = 0.e0;
    real _t0698 = 0.e0;
    vec2 _t0699 = [_t0697, _t0698];
    vec2 _t069A = prim -0026<$[2]> (_t0699, refPos05C5);
    real _t069B = 0.e0;
    real _t069C = 0.1e1;
    vec2 _t069D = [_t069B, _t069C];
    real _t069E = 0.e0;
    real _t069F = 0.1e1;
    vec2 _t06A0 = [_t069E, _t069F];
    real _t06A1 = prim ×00BD (dPos05C6, _t06A0);
    vec2 _t06A2 = prim /0057<$[2]> (_t069D, _t06A1);
    real _t06A3 = prim ×00BD (_t069A, _t06A2);
    vec2 _t06A4 = prim *0038<$[2]> (dPos05C6, _t06A3);
    vec2 _t06A5 = prim +0017<$[2]> (refPos05C5, _t06A4);
    vec2 _t06A6 = prim +0017<$[2]> (_t0696, _t06A5);
    real _t06A7 = _t06A6[1];
    real _t06A8 = -0.e0;
    bool _t06A9 = prim >0080 (_t06A7, _t06A8);
    bool _t06AA = prim $and01C4 (_t0693, _t06A9);
    bool _t06AB = prim $and01C4 (_t067D, _t06AA);
    if _t06AB {
      real _t06AC = 0.e0;
      real _t06AD = 0.e0;
      vec2 _t06AE = [_t06AC, _t06AD];
      vec2 _t06AF = prim -0026<$[2]> (_t06AE, refPos05C5);
      real _t06B0 = 0.e0;
      real _t06B1 = 0.1e1;
      vec2 _t06B2 = [_t06B0, _t06B1];
      real _t06B3 = 0.e0;
      real _t06B4 = 0.1e1;
      vec2 _t06B5 = [_t06B3, _t06B4];
      real _t06B6 = prim ×00BD (dPos05C6, _t06B5);
      vec2 _t06B7 = prim /0057<$[2]> (_t06B2, _t06B6);
      time05C7 = prim ×00BD (_t06AF, _t06B7);
      face05C8 = 1;
    }
  }
  real _t06B8 = 0.e0;
  real _t06B9 = 0.e0;
  vec2 _t06BA = [_t06B8, _t06B9];
  vec2 _t06BB = prim -0026<$[2]> (_t06BA, refPos05C5);
  real _t06BC = 0.1e1;
  real _t06BD = 0.e0;
  vec2 _t06BE = [_t06BC, _t06BD];
  real _t06BF = 0.1e1;
  real _t06C0 = 0.e0;
  vec2 _t06C1 = [_t06BF, _t06C0];
  real _t06C2 = prim ×00BD (dPos05C6, _t06C1);
  vec2 _t06C3 = prim /0057<$[2]> (_t06BE, _t06C2);
  real _t06C4 = prim ×00BD (_t06BB, _t06C3);
  real _t06C5 = -0.1e-15;
  bool _t06C6 = prim >=007E (_t06C4, _t06C5);
  real _t06C7 = 0.e0;
  real _t06C8 = 0.e0;
  vec2 _t06C9 = [_t06C7, _t06C8];
  vec2 _t06CA = prim -0026<$[2]> (_t06C9, refPos05C5);
  real _t06CB = 0.1e1;
  real _t06CC = 0.e0;
  vec2 _t06CD = [_t06CB, _t06CC];
  real _t06CE = 0.1e1;
  real _t06CF = 0.e0;
  vec2 _t06D0 = [_t06CE, _t06CF];
  real _t06D1 = prim ×00BD (dPos05C6, _t06D0);
  vec2 _t06D2 = prim /0057<$[2]> (_t06CD, _t06D1);
  real _t06D3 = prim ×00BD (_t06CA, _t06D2);
  bool _t06D4 = prim >0080 (time05C7, _t06D3);
  real _t06D5 = 0.1e1;
  real _t06D6 = 0.e0;
  vec2 _t06D7 = [_t06D5, _t06D6];
  real _t06D8 = prim ×00BD (dPos05C6, _t06D7);
  real _t06D9 = prim |()|00B5<$[]> (_t06D8);
  real _t06DA = 0.1e-20;
  bool _t06DB = prim >=007E (_t06D9, _t06DA);
  bool _t06DC = prim $and01C4 (_t06D4, _t06DB);
  bool _t06DD = prim $and01C4 (_t06C6, _t06DC);
  if _t06DD {
    real _t06DE = 0.1e1;
    real _t06DF = 0.1e-8;
    real _t06E0 = prim +0017<$[]> (_t06DE, _t06DF);
    real _t06E1 = 0.1e1;
    real _t06E2 = 0.1e1;
    vec2 _t06E3 = [_t06E1, _t06E2];
    real _t06E4 = 0.e0;
    real _t06E5 = 0.e0;
    vec2 _t06E6 = [_t06E4, _t06E5];
    vec2 _t06E7 = prim -0026<$[2]> (_t06E6, refPos05C5);
    real _t06E8 = 0.1e1;
    real _t06E9 = 0.e0;
    vec2 _t06EA = [_t06E8, _t06E9];
    real _t06EB = 0.1e1;
    real _t06EC = 0.e0;
    vec2 _t06ED = [_t06EB, _t06EC];
    real _t06EE = prim ×00BD (dPos05C6, _t06ED);
    vec2 _t06EF = prim /0057<$[2]> (_t06EA, _t06EE);
    real _t06F0 = prim ×00BD (_t06E7, _t06EF);
    vec2 _t06F1 = prim *0038<$[2]> (dPos05C6, _t06F0);
    vec2 _t06F2 = prim +0017<$[2]> (refPos05C5, _t06F1);
    real _t06F3 = prim •00CE<$[2]; $[2]; $[]> (_t06E3, _t06F2);
    bool _t06F4 = prim >0080 (_t06E0, _t06F3);
    real _t06F5 = 0.1e-8;
    real _t06F6 = 0.1e-8;
    vec2 _t06F7 = [_t06F5, _t06F6];
    real _t06F8 = 0.e0;
    real _t06F9 = 0.e0;
    vec2 _t06FA = [_t06F8, _t06F9];
    vec2 _t06FB = prim -0026<$[2]> (_t06FA, refPos05C5);
    real _t06FC = 0.1e1;
    real _t06FD = 0.e0;
    vec2 _t06FE = [_t06FC, _t06FD];
    real _t06FF = 0.1e1;
    real _t0700 = 0.e0;
    vec2 _t0701 = [_t06FF, _t0700];
    real _t0702 = prim ×00BD (dPos05C6, _t0701);
    vec2 _t0703 = prim /0057<$[2]> (_t06FE, _t0702);
    real _t0704 = prim ×00BD (_t06FB, _t0703);
    vec2 _t0705 = prim *0038<$[2]> (dPos05C6, _t0704);
    vec2 _t0706 = prim +0017<$[2]> (refPos05C5, _t0705);
    vec2 _t0707 = prim +0017<$[2]> (_t06F7, _t0706);
    real _t0708 = _t0707[0];
    real _t0709 = -0.e0;
    bool _t070A = prim >0080 (_t0708, _t0709);
    real _t070B = 0.1e-8;
    real _t070C = 0.1e-8;
    vec2 _t070D = [_t070B, _t070C];
    real _t070E = 0.e0;
    real _t070F = 0.e0;
    vec2 _t0710 = [_t070E, _t070F];
    vec2 _t0711 = prim -0026<$[2]> (_t0710, refPos05C5);
    real _t0712 = 0.1e1;
    real _t0713 = 0.e0;
    vec2 _t0714 = [_t0712, _t0713];
    real _t0715 = 0.1e1;
    real _t0716 = 0.e0;
    vec2 _t0717 = [_t0715, _t0716];
    real _t0718 = prim ×00BD (dPos05C6, _t0717);
    vec2 _t0719 = prim /0057<$[2]> (_t0714, _t0718);
    real _t071A = prim ×00BD (_t0711, _t0719);
    vec2 _t071B = prim *0038<$[2]> (dPos05C6, _t071A);
    vec2 _t071C = prim +0017<$[2]> (refPos05C5, _t071B);
    vec2 _t071D = prim +0017<$[2]> (_t070D, _t071C);
    real _t071E = _t071D[1];
    real _t071F = -0.e0;
    bool _t0720 = prim >0080 (_t071E, _t071F);
    bool _t0721 = prim $and01C4 (_t070A, _t0720);
    bool _t0722 = prim $and01C4 (_t06F4, _t0721);
    if _t0722 {
      real _t0723 = 0.e0;
      real _t0724 = 0.e0;
      vec2 _t0725 = [_t0723, _t0724];
      vec2 _t0726 = prim -0026<$[2]> (_t0725, refPos05C5);
      real _t0727 = 0.1e1;
      real _t0728 = 0.e0;
      vec2 _t0729 = [_t0727, _t0728];
      real _t072A = 0.1e1;
      real _t072B = 0.e0;
      vec2 _t072C = [_t072A, _t072B];
      real _t072D = prim ×00BD (dPos05C6, _t072C);
      vec2 _t072E = prim /0057<$[2]> (_t0729, _t072D);
      time05C7 = prim ×00BD (_t0726, _t072E);
      face05C8 = 2;
    }
  }
  int _t072F = -1;
  bool _t0730 = prim !=0086 (face05C8, _t072F);
  if _t0730 {
    real _t0731 = 0.e0;
    real _t0732 = prim max0125 (time05C7, _t0731);
    real _t0733 = (real)face05C8;
    vec2 _t0734 = [_t0732, _t0733];
    return _t0734;
  } else {
    real _t0735 = -0.1e1;
    real _t0736 = -0.1e1;
    vec2 _t0737 = [_t0735, _t0736];
    return _t0737;
  }
}
function vec2#0 _exit0738 (vec2 refPos05C5, vec2 dPos05C6, int i0739)
{
  real time073A = +inf;
  int face073B = -1;
  real faceTime073C = -inf;
  real _t073D = 0.1e1;
  real _t073E = 0.e0;
  vec2 _t073F = [_t073D, _t073E];
  vec2 _t0740 = prim -0026<$[2]> (_t073F, refPos05C5);
  real _t0741 = -0.1e1;
  real _t0742 = 0.1e1;
  vec2 _t0743 = [_t0741, _t0742];
  real _t0744 = -0.1e1;
  real _t0745 = 0.1e1;
  vec2 _t0746 = [_t0744, _t0745];
  real _t0747 = prim ×00BD (dPos05C6, _t0746);
  vec2 _t0748 = prim /0057<$[2]> (_t0743, _t0747);
  real _t0749 = prim ×00BD (_t0740, _t0748);
  real _t074A = -0.1e-15;
  bool _t074B = prim >=007E (_t0749, _t074A);
  real _t074C = 0.1e1;
  real _t074D = 0.e0;
  vec2 _t074E = [_t074C, _t074D];
  vec2 _t074F = prim -0026<$[2]> (_t074E, refPos05C5);
  real _t0750 = -0.1e1;
  real _t0751 = 0.1e1;
  vec2 _t0752 = [_t0750, _t0751];
  real _t0753 = -0.1e1;
  real _t0754 = 0.1e1;
  vec2 _t0755 = [_t0753, _t0754];
  real _t0756 = prim ×00BD (dPos05C6, _t0755);
  vec2 _t0757 = prim /0057<$[2]> (_t0752, _t0756);
  real _t0758 = prim ×00BD (_t074F, _t0757);
  bool _t0759 = prim >0080 (time073A, _t0758);
  real _t075A = -0.1e1;
  real _t075B = 0.1e1;
  vec2 _t075C = [_t075A, _t075B];
  real _t075D = prim ×00BD (dPos05C6, _t075C);
  real _t075E = prim |()|00B5<$[]> (_t075D);
  real _t075F = 0.1e-20;
  bool _t0760 = prim >=007E (_t075E, _t075F);
  bool _t0761 = prim $and01C4 (_t0759, _t0760);
  bool _t0762 = prim $and01C4 (_t074B, _t0761);
  if _t0762 {
    int _t0763 = 0;
    bool _t0764 = prim !=0086 (i0739, _t0763);
    if _t0764 {
      real _t0765 = 0.1e1;
      real _t0766 = 0.e0;
      vec2 _t0767 = [_t0765, _t0766];
      vec2 _t0768 = prim -0026<$[2]> (_t0767, refPos05C5);
      real _t0769 = -0.1e1;
      real _t076A = 0.1e1;
      vec2 _t076B = [_t0769, _t076A];
      real _t076C = -0.1e1;
      real _t076D = 0.1e1;
      vec2 _t076E = [_t076C, _t076D];
      real _t076F = prim ×00BD (dPos05C6, _t076E);
      vec2 _t0770 = prim /0057<$[2]> (_t076B, _t076F);
      time073A = prim ×00BD (_t0768, _t0770);
      face073B = 0;
    } else {
      real _t0771 = 0.1e1;
      real _t0772 = 0.e0;
      vec2 _t0773 = [_t0771, _t0772];
      vec2 _t0774 = prim -0026<$[2]> (_t0773, refPos05C5);
      real _t0775 = -0.1e1;
      real _t0776 = 0.1e1;
      vec2 _t0777 = [_t0775, _t0776];
      real _t0778 = -0.1e1;
      real _t0779 = 0.1e1;
      vec2 _t077A = [_t0778, _t0779];
      real _t077B = prim ×00BD (dPos05C6, _t077A);
      vec2 _t077C = prim /0057<$[2]> (_t0777, _t077B);
      faceTime073C = prim ×00BD (_t0774, _t077C);
    }
  }
  real _t077D = 0.e0;
  real _t077E = 0.e0;
  vec2 _t077F = [_t077D, _t077E];
  vec2 _t0780 = prim -0026<$[2]> (_t077F, refPos05C5);
  real _t0781 = 0.e0;
  real _t0782 = 0.1e1;
  vec2 _t0783 = [_t0781, _t0782];
  real _t0784 = 0.e0;
  real _t0785 = 0.1e1;
  vec2 _t0786 = [_t0784, _t0785];
  real _t0787 = prim ×00BD (dPos05C6, _t0786);
  vec2 _t0788 = prim /0057<$[2]> (_t0783, _t0787);
  real _t0789 = prim ×00BD (_t0780, _t0788);
  real _t078A = -0.1e-15;
  bool _t078B = prim >=007E (_t0789, _t078A);
  real _t078C = 0.e0;
  real _t078D = 0.e0;
  vec2 _t078E = [_t078C, _t078D];
  vec2 _t078F = prim -0026<$[2]> (_t078E, refPos05C5);
  real _t0790 = 0.e0;
  real _t0791 = 0.1e1;
  vec2 _t0792 = [_t0790, _t0791];
  real _t0793 = 0.e0;
  real _t0794 = 0.1e1;
  vec2 _t0795 = [_t0793, _t0794];
  real _t0796 = prim ×00BD (dPos05C6, _t0795);
  vec2 _t0797 = prim /0057<$[2]> (_t0792, _t0796);
  real _t0798 = prim ×00BD (_t078F, _t0797);
  bool _t0799 = prim >0080 (time073A, _t0798);
  real _t079A = 0.e0;
  real _t079B = 0.1e1;
  vec2 _t079C = [_t079A, _t079B];
  real _t079D = prim ×00BD (dPos05C6, _t079C);
  real _t079E = prim |()|00B5<$[]> (_t079D);
  real _t079F = 0.1e-20;
  bool _t07A0 = prim >=007E (_t079E, _t079F);
  bool _t07A1 = prim $and01C4 (_t0799, _t07A0);
  bool _t07A2 = prim $and01C4 (_t078B, _t07A1);
  if _t07A2 {
    int _t07A3 = 1;
    bool _t07A4 = prim !=0086 (i0739, _t07A3);
    if _t07A4 {
      real _t07A5 = 0.e0;
      real _t07A6 = 0.e0;
      vec2 _t07A7 = [_t07A5, _t07A6];
      vec2 _t07A8 = prim -0026<$[2]> (_t07A7, refPos05C5);
      real _t07A9 = 0.e0;
      real _t07AA = 0.1e1;
      vec2 _t07AB = [_t07A9, _t07AA];
      real _t07AC = 0.e0;
      real _t07AD = 0.1e1;
      vec2 _t07AE = [_t07AC, _t07AD];
      real _t07AF = prim ×00BD (dPos05C6, _t07AE);
      vec2 _t07B0 = prim /0057<$[2]> (_t07AB, _t07AF);
      time073A = prim ×00BD (_t07A8, _t07B0);
      face073B = 1;
    } else {
      real _t07B1 = 0.e0;
      real _t07B2 = 0.e0;
      vec2 _t07B3 = [_t07B1, _t07B2];
      vec2 _t07B4 = prim -0026<$[2]> (_t07B3, refPos05C5);
      real _t07B5 = 0.e0;
      real _t07B6 = 0.1e1;
      vec2 _t07B7 = [_t07B5, _t07B6];
      real _t07B8 = 0.e0;
      real _t07B9 = 0.1e1;
      vec2 _t07BA = [_t07B8, _t07B9];
      real _t07BB = prim ×00BD (dPos05C6, _t07BA);
      vec2 _t07BC = prim /0057<$[2]> (_t07B7, _t07BB);
      faceTime073C = prim ×00BD (_t07B4, _t07BC);
    }
  }
  real _t07BD = 0.e0;
  real _t07BE = 0.e0;
  vec2 _t07BF = [_t07BD, _t07BE];
  vec2 _t07C0 = prim -0026<$[2]> (_t07BF, refPos05C5);
  real _t07C1 = 0.1e1;
  real _t07C2 = 0.e0;
  vec2 _t07C3 = [_t07C1, _t07C2];
  real _t07C4 = 0.1e1;
  real _t07C5 = 0.e0;
  vec2 _t07C6 = [_t07C4, _t07C5];
  real _t07C7 = prim ×00BD (dPos05C6, _t07C6);
  vec2 _t07C8 = prim /0057<$[2]> (_t07C3, _t07C7);
  real _t07C9 = prim ×00BD (_t07C0, _t07C8);
  real _t07CA = -0.1e-15;
  bool _t07CB = prim >=007E (_t07C9, _t07CA);
  real _t07CC = 0.e0;
  real _t07CD = 0.e0;
  vec2 _t07CE = [_t07CC, _t07CD];
  vec2 _t07CF = prim -0026<$[2]> (_t07CE, refPos05C5);
  real _t07D0 = 0.1e1;
  real _t07D1 = 0.e0;
  vec2 _t07D2 = [_t07D0, _t07D1];
  real _t07D3 = 0.1e1;
  real _t07D4 = 0.e0;
  vec2 _t07D5 = [_t07D3, _t07D4];
  real _t07D6 = prim ×00BD (dPos05C6, _t07D5);
  vec2 _t07D7 = prim /0057<$[2]> (_t07D2, _t07D6);
  real _t07D8 = prim ×00BD (_t07CF, _t07D7);
  bool _t07D9 = prim >0080 (time073A, _t07D8);
  real _t07DA = 0.1e1;
  real _t07DB = 0.e0;
  vec2 _t07DC = [_t07DA, _t07DB];
  real _t07DD = prim ×00BD (dPos05C6, _t07DC);
  real _t07DE = prim |()|00B5<$[]> (_t07DD);
  real _t07DF = 0.1e-20;
  bool _t07E0 = prim >=007E (_t07DE, _t07DF);
  bool _t07E1 = prim $and01C4 (_t07D9, _t07E0);
  bool _t07E2 = prim $and01C4 (_t07CB, _t07E1);
  if _t07E2 {
    int _t07E3 = 2;
    bool _t07E4 = prim !=0086 (i0739, _t07E3);
    if _t07E4 {
      real _t07E5 = 0.e0;
      real _t07E6 = 0.e0;
      vec2 _t07E7 = [_t07E5, _t07E6];
      vec2 _t07E8 = prim -0026<$[2]> (_t07E7, refPos05C5);
      real _t07E9 = 0.1e1;
      real _t07EA = 0.e0;
      vec2 _t07EB = [_t07E9, _t07EA];
      real _t07EC = 0.1e1;
      real _t07ED = 0.e0;
      vec2 _t07EE = [_t07EC, _t07ED];
      real _t07EF = prim ×00BD (dPos05C6, _t07EE);
      vec2 _t07F0 = prim /0057<$[2]> (_t07EB, _t07EF);
      time073A = prim ×00BD (_t07E8, _t07F0);
      face073B = 2;
    } else {
      real _t07F1 = 0.e0;
      real _t07F2 = 0.e0;
      vec2 _t07F3 = [_t07F1, _t07F2];
      vec2 _t07F4 = prim -0026<$[2]> (_t07F3, refPos05C5);
      real _t07F5 = 0.1e1;
      real _t07F6 = 0.e0;
      vec2 _t07F7 = [_t07F5, _t07F6];
      real _t07F8 = 0.1e1;
      real _t07F9 = 0.e0;
      vec2 _t07FA = [_t07F8, _t07F9];
      real _t07FB = prim ×00BD (dPos05C6, _t07FA);
      vec2 _t07FC = prim /0057<$[2]> (_t07F7, _t07FB);
      faceTime073C = prim ×00BD (_t07F4, _t07FC);
    }
  }
  int _t07FD = -1;
  bool _t07FE = prim !=0086 (face073B, _t07FD);
  if _t07FE {
    real _t07FF = 0.e0;
    real _t0800 = prim max0125 (time073A, _t07FF);
    real _t0801 = (real)face073B;
    vec2 _t0802 = [_t0800, _t0801];
    return _t0802;
  } else {
    real _t0803 = -inf;
    bool _t0804 = prim ==0084 (_t0803, faceTime073C);
    if _t0804 {
      real _t0805 = -0.1e1;
      real _t0806 = -0.1e1;
      vec2 _t0807 = [_t0805, _t0806];
      return _t0807;
    } else {
      real _t0808 = (real)i0739;
      vec2 _t0809 = [faceTime073C, _t0808];
      return _t0809;
    }
  }
}
function Femdata: Mesh#0 domain080A (Femdata: Space arg0080B)
{
  Femdata: Mesh _t080C = extractFem(arg0080B, Mesh);
  return _t080C;
}
function Femdata: Space#0 space080D (Femdata: FemFunc arg0080E)
{
  Femdata: Space _t080F = extractFem(arg0080E, Space);
  return _t080F;
}
function Femdata: FuncCell#3 funcCell0810 (Femdata: FemFunc arg00811, Femdata: MeshCell arg10812)
{
  int _t0813 = extractFemItem(CellIndex(MeshCell), int, arg10812);
  Femdata: FuncCell _t0814 = loadFem(FuncCell, arg00811, _t0813);
  return _t0814;
}
function int#4 sign082F (real x0830)
{
  real _t0831 = 0.e0;
  bool _t0832 = prim >0080 (x0830, _t0831);
  if _t0832 {
    int _t0833 = 1;
    return _t0833;
  } else {
    real _t0834 = 0.e0;
    bool _t0835 = prim <007A (x0830, _t0834);
    if _t0835 {
      int _t0836 = -1;
      return _t0836;
    } else {
      int _t0837 = 0;
      return _t0837;
    }
  }
}
globalInit {
  int _t0467 = 0;
  int _t0465 = 1;
  int _t0469 = extractFemItem(NumCell(Mesh), int, a0463);
  int _t0468 = prim -0024 (_t0469, _t0465);
  int[] _t046C = prim $range01C3 (_t0467, _t0468);
  Femdata: MeshCell[] _t046D = {};
  foreach _t046B in _t046C {
    Femdata: MeshCell _t046E = loadFem(MeshCell, a0463, _t046B);
    _t046D = prim @0010<Femdata: MeshCell> (_t046D, _t046E);
  }
  0cell_a0464 = _t046D;
  b046F = loadFem(Space, 0b046F_intermedateGlobal0470, a0463);
  c0471 = loadFem(FemFunc, 0c0471_intermedateGlobal0472, b046F);
  vec3 _t0815 = prim -0026<$[3]> (camAt0454, camEye0450);
  camDist0816 = prim |()|00B5<$[3]> (_t0815);
  camNearVsp0817 = prim +0017<$[]> (camNear045F, camDist0816);
  camFarVsp0818 = prim +0017<$[]> (camFar0460, camDist0816);
  vec3 _t0819 = prim -0026<$[3]> (camAt0454, camEye0450);
  camN081A = prim normalize0137<$[3]> (_t0819);
  vec3 _t081B = prim ×00BE (camN081A, camUp0458);
  camU081C = prim normalize0137<$[3]> (_t081B);
  camV081D = prim ×00BE (camU081C, camN081A);
  real _t081E = 0.314159265358979323846264338327950288e1;
  real _t081F = prim *0034 (camFOV045C, _t081E);
  real _t0820 = 0.36e3;
  real _t0821 = prim /0055 (_t081F, _t0820);
  real _t0822 = prim tan0179 (_t0821);
  camVmax0823 = prim *0034 (_t0822, camDist0816);
  real _t0824 = (real)iresU045D;
  real _t0825 = prim *0034 (camVmax0823, _t0824);
  real _t0826 = (real)iresV045E;
  camUmax0827 = prim /0055 (_t0825, _t0826);
  kernel _t0828 = tent;
  IMAGE1D<double[3]> img0829 = clamp(cmap0481);
  CM082A = prim ⊛0074<#0; %1; $[3]> (_t0828, img0829);
  tensor[3,3] _t082B = [camU081C, camV081D, camN081A];
  tensor[3,3] _t082C = prim transpose0145<%3; %3> (_t082B);
  vec3 _t082D = prim normalize0137<$[3]> (lightVsp048A);
  L082E = prim •00CE<$[3,3]; $[3]; $[3]> (_t082C, _t082D);
}
strand ray (int ui0838, int vi0839) {
  real rayU083A;
  real rayV0841;
  vec3 UV0848;
  vec3 rayOrig084B;
  vec3 rayVec084C;
  real camNearVsp0851;
  real camFarVsp0852;
  vec3 rayStart0853;
  int offset0855;
  int len0858;
  int itter085D;
  int intersectionItter085E;
  int idx085F;
  vec2 interval0860;
  real s0861;
  real e0862;
  Femdata: MeshCell cc0863;
  Femdata: FuncCell fc0865;
  bool newton0866;
  output real out0867;
  output vec4 rgba0868;
  output vec3[] locs086D;
  {
    real _t083B = prim unary -008B<$[]> (camUmax0827);
    real _t083C = -0.5e0;
    real _t083D = (real)ui0838;
    real _t083E = (real)iresU045D;
    real _t083F = 0.5e0;
    real _t0840 = prim -0026<$[]> (_t083E, _t083F);
    rayU083A = prim lerp0098<$[]> (_t083B, camUmax0827, _t083C, _t083D, _t0840);
    real _t0842 = prim unary -008B<$[]> (camVmax0823);
    real _t0843 = -0.5e0;
    real _t0844 = (real)vi0839;
    real _t0845 = (real)iresV045E;
    real _t0846 = 0.5e0;
    real _t0847 = prim -0026<$[]> (_t0845, _t0846);
    rayV0841 = prim lerp0098<$[]> (_t0842, camVmax0823, _t0843, _t0844, _t0847);
    vec3 _t0849 = prim *0036<$[3]> (rayU083A, camU081C);
    vec3 _t084A = prim *0036<$[3]> (rayV0841, camV081D);
    UV0848 = prim +0017<$[3]> (_t0849, _t084A);
    rayOrig084B = prim +0017<$[3]> (camEye0450, UV0848);
    real _t084D = 0.e0;
    real _t084E = 0.e0;
    real _t084F = 0.e0;
    vec3 _t0850 = [_t084D, _t084E, _t084F];
    rayVec084C = prim +0017<$[3]> (camN081A, _t0850);
    camNearVsp0851 = camNearVsp0817;
    camFarVsp0852 = camFarVsp0818;
    vec3 _t0854 = prim *0036<$[3]> (camNearVsp0851, rayVec084C);
    rayStart0853 = prim +0017<$[3]> (rayOrig084B, _t0854);
    int _t0856 = prim *0033 (ui0838, iresV045E);
    int _t0857 = prim +0015 (_t0856, vi0839);
    offset0855 = prim $dynsub01C2<int> (indecies0475, _t0857);
    int _t0859 = prim *0033 (iresU045D, iresV045E);
    int _t085A = prim *0033 (ui0838, iresV045E);
    int _t085B = prim +0015 (_t0859, _t085A);
    int _t085C = prim +0015 (_t085B, vi0839);
    len0858 = prim $dynsub01C2<int> (indecies0475, _t085C);
    itter085D = 0;
    intersectionItter085E = 0;
    idx085F = prim +0015 (offset0855, itter085D);
    interval0860 = prim $dynsub01C2<vec2> (times0476, idx085F);
    s0861 = interval0860[0];
    e0862 = interval0860[1];
    int _t0864 = 0;
    cc0863 = prim $dynsub01C2<Femdata: MeshCell> (0cell_a0464, _t0864);
    fc0865 = func funcCell0810 (c0471, cc0863);
    newton0866 = true;
    out0867 = 0.e0;
    real _t0869 = 0.e0;
    real _t086A = 0.e0;
    real _t086B = 0.e0;
    real _t086C = 0.e0;
    rgba0868 = [_t0869, _t086A, _t086B, _t086C];
    vec3[0] _t086E = {};
    vec3[] _t086F = (vec3[])_t086E;
    locs086D = _t086F;
  }
  start
  {
    if debug048E {
      bool _t0870 = prim !=0086 (ui0838, debugU048F);
      if _t0870 {
        bool _t0871 = prim !=0086 (vi0839, debugV0490);
        if _t0871 {
          stabilize;
        }
      }
    }
    int _t0872 = 0;
    bool _t0873 = prim ==0082 (len0858, _t0872);
    if _t0873 {
      string _t0874 = "(find:)No intersection found:";
      string _t0875 = "/";
      string _t0876 = "\n";
      print (_t0874, ui0838, _t0875, vi0839, _t0876);
      stabilize;
    }
    int _t0877 = prim $dynsub01C2<int> (cells0477, idx085F);
    cc0863 = prim $dynsub01C2<Femdata: MeshCell> (0cell_a0464, _t0877);
    fc0865 = func funcCell0810 (c0471, cc0863);
  }
  update
  {
    string _t0878 = "Ui/Vi::";
    string _t0879 = "/";
    string _t087A = "\n";
    print (_t0878, ui0838, _t0879, vi0839, _t087A);
    string _t087B = "Interval:";
    vec2 _t087C = [s0861, e0862];
    string _t087D = "\n";
    print (_t087B, _t087C, _t087D);
    string _t087E = "inner itter:";
    string _t087F = "\n";
    print (_t087E, intersectionItter085E, _t087F);
    string _t0880 = "Outer itter:";
    string _t0881 = "\n";
    print (_t0880, itter085D, _t0881);
    real _t0882 = rayOrig084B[0];
    real _t0883 = rayOrig084B[1];
    vec2 _t0884 = [_t0882, _t0883];
    real _t0885 = rayVec084C[0];
    real _t0886 = rayVec084C[1];
    vec2 _t0887 = [_t0885, _t0886];
    vec2 _t0888 = prim *0036<$[2]> (s0861, _t0887);
    vec2 startRay0889 = prim +0017<$[2]> (_t0884, _t0888);
    real _t088A = rayOrig084B[0];
    real _t088B = rayOrig084B[1];
    vec2 _t088C = [_t088A, _t088B];
    real _t088D = rayVec084C[0];
    real _t088E = rayVec084C[1];
    vec2 _t088F = [_t088D, _t088E];
    vec2 _t0890 = prim *0036<$[2]> (e0862, _t088F);
    vec2 endRay0891 = prim +0017<$[2]> (_t088C, _t0890);
    Femdata: Mesh _t0892 = extractFem(cc0863, Mesh);
    Femdata: Mesh _t0893 = extractFem(cc0863, Mesh);
    int _t0894 = extractFemItem(CellIndex(MeshCell), int, cc0863);
    field(2)[2] _t0895 = femField(_t0892,_t0894,field(2)[2],InvTransform,_msh_newtonInverse04FC );
    vec2 invertA0896 = prim @00A5<#∞; %2; $[2]> (_t0895, startRay0889);
    Femdata: Mesh _t0897 = extractFem(cc0863, Mesh);
    Femdata: Mesh _t0898 = extractFem(cc0863, Mesh);
    int _t0899 = extractFemItem(CellIndex(MeshCell), int, cc0863);
    field(2)[2] _t089A = femField(_t0897,_t0899,field(2)[2],InvTransform,_msh_newtonInverse04FC );
    vec2 invertB089B = prim @00A5<#∞; %2; $[2]> (_t089A, endRay0891);
    string _t089C = "inverses:";
    string _t089D = "\n";
    print (_t089C, invertA0896, invertB089B, _t089D);
    Femdata: FemFunc _t089E = extractFem(fc0865, FemFunc);
    Femdata: FemFunc _t089F = extractFem(fc0865, FemFunc);
    Femdata: Space _t08A0 = extractFem(_t089F, Space);
    int _t08A1 = extractFemItem(CellIndex(FuncCell), int, fc0865);
    field(2)[] _t08A2 = femField(_t089E,_t08A1,field(2)[],refField,);
    real faVal08A3 = prim @00A5<#∞; %2; $[]> (_t08A2, invertA0896);
    real _t08A4 = rayVec084C[2];
    real _t08A5 = prim *0034 (_t08A4, s0861);
    real _t08A6 = prim -0026<$[]> (faVal08A3, _t08A5);
    real _t08A7 = rayOrig084B[2];
    real fa08A8 = prim -0026<$[]> (_t08A6, _t08A7);
    Femdata: FemFunc _t08A9 = extractFem(fc0865, FemFunc);
    Femdata: FemFunc _t08AA = extractFem(fc0865, FemFunc);
    Femdata: Space _t08AB = extractFem(_t08AA, Space);
    int _t08AC = extractFemItem(CellIndex(FuncCell), int, fc0865);
    field(2)[] _t08AD = femField(_t08A9,_t08AC,field(2)[],refField,);
    real _t08AE = prim @00A5<#∞; %2; $[]> (_t08AD, invertB089B);
    real _t08AF = rayVec084C[2];
    real _t08B0 = prim *0034 (_t08AF, e0862);
    real _t08B1 = prim -0026<$[]> (_t08AE, _t08B0);
    real _t08B2 = rayOrig084B[2];
    real fb08B3 = prim -0026<$[]> (_t08B1, _t08B2);
    string _t08B4 = "Vals:";
    vec2 _t08B5 = [fa08A8, fb08B3];
    string _t08B6 = "\n";
    print (_t08B4, _t08B5, _t08B6);
    real _t08B7 = prim -0026<$[]> (fa08A8, fb08B3);
    real _t08B8 = prim |()|00B5<$[]> (_t08B7);
    bool _t08B9 = prim <007A (_t08B8, intervalEps0474);
    if _t08B9 {
      real _t08BA = prim |()|00B5<$[]> (fa08A8);
      bool _t08BB = prim >0080 (_t08BA, intervalEps0474);
      if _t08BB {
        real _t08BC = prim |()|00B5<$[]> (fb08B3);
        bool _t08BD = prim >0080 (_t08BC, intervalEps0474);
        if _t08BD {
          string _t08BE = "warn\n";
          print (_t08BE);
          s0861 = prim +0017<$[]> (s0861, intervalEps0474);
          continue;
        }
      }
    }
    real _t08BF = prim *0034 (s0861, fb08B3);
    real _t08C0 = prim *0034 (e0862, fa08A8);
    real _t08C1 = prim -0026<$[]> (_t08BF, _t08C0);
    real _t08C2 = prim -0026<$[]> (fb08B3, fa08A8);
    real cup08C3 = prim /0055 (_t08C1, _t08C2);
    string _t08C4 = "Mid time:";
    string _t08C5 = "\n";
    print (_t08C4, cup08C3, _t08C5);
    real _t08C6 = rayOrig084B[0];
    real _t08C7 = rayOrig084B[1];
    vec2 _t08C8 = [_t08C6, _t08C7];
    real _t08C9 = rayVec084C[0];
    real _t08CA = rayVec084C[1];
    vec2 _t08CB = [_t08C9, _t08CA];
    vec2 _t08CC = prim *0036<$[2]> (cup08C3, _t08CB);
    vec2 midRay08CD = prim +0017<$[2]> (_t08C8, _t08CC);
    Femdata: Mesh _t08CE = extractFem(cc0863, Mesh);
    Femdata: Mesh _t08CF = extractFem(cc0863, Mesh);
    int _t08D0 = extractFemItem(CellIndex(MeshCell), int, cc0863);
    field(2)[2] _t08D1 = femField(_t08CE,_t08D0,field(2)[2],InvTransform,_msh_newtonInverse04FC );
    vec2 invertC08D2 = prim @00A5<#∞; %2; $[2]> (_t08D1, midRay08CD);
    Femdata: FemFunc _t08D3 = extractFem(fc0865, FemFunc);
    Femdata: FemFunc _t08D4 = extractFem(fc0865, FemFunc);
    Femdata: Space _t08D5 = extractFem(_t08D4, Space);
    int _t08D6 = extractFemItem(CellIndex(FuncCell), int, fc0865);
    field(2)[] _t08D7 = femField(_t08D3,_t08D6,field(2)[],refField,);
    real fmVal08D8 = prim @00A5<#∞; %2; $[]> (_t08D7, invertC08D2);
    real _t08D9 = rayVec084C[2];
    real _t08DA = prim *0034 (_t08D9, cup08C3);
    real _t08DB = prim -0026<$[]> (fmVal08D8, _t08DA);
    real _t08DC = rayOrig084B[2];
    real fm08DD = prim -0026<$[]> (_t08DB, _t08DC);
    string _t08DE = "all vals:";
    vec3 _t08DF = [fa08A8, fm08DD, fb08B3];
    string _t08E0 = "\n";
    print (_t08DE, _t08DF, _t08E0);
    int _t08E1 = 1;
    intersectionItter085E = prim +0015 (intersectionItter085E, _t08E1);
    int _t08E2 = func sign082F (fa08A8);
    int _t08E3 = func sign082F (fm08DD);
    int _t08E4 = prim *0033 (_t08E2, _t08E3);
    int _t08E5 = 0;
    bool _t08E6 = prim <0079 (_t08E4, _t08E5);
    if _t08E6 {
      e0862 = cup08C3;
    } else {
      int _t08E7 = func sign082F (fa08A8);
      int _t08E8 = func sign082F (fm08DD);
      int _t08E9 = prim *0033 (_t08E7, _t08E8);
      int _t08EA = 0;
      bool _t08EB = prim >007F (_t08E9, _t08EA);
      if _t08EB {
        s0861 = cup08C3;
      }
    }
    string _t08EC = "new interval:";
    vec2 _t08ED = [s0861, e0862];
    string _t08EE = "\n";
    print (_t08EC, _t08ED, _t08EE);
    real _t08EF = prim |()|00B5<$[]> (fm08DD);
    bool _t08F0 = prim <007A (_t08EF, zeroEps0473);
    if _t08F0 {
      real _t08F1 = 0.e0;
      real _t08F2 = 0.e0;
      vec2 grad08F3 = [_t08F1, _t08F2];
      vec3 loc08F4 = rayOrig084B;
      real _t08F5 = prim |()|00B5<$[]> (fm08DD);
      bool _t08F6 = prim <007A (_t08F5, zeroEps0473);
      if _t08F6 {
        Femdata: FemFunc _t08F7 = extractFem(fc0865, FemFunc);
        Femdata: FemFunc _t08F8 = extractFem(fc0865, FemFunc);
        Femdata: Space _t08F9 = extractFem(_t08F8, Space);
        int _t08FA = extractFemItem(CellIndex(FuncCell), int, fc0865);
        field(2)[] _t08FB = femField(_t08F7,_t08FA,field(2)[],refField,);
        Femdata: Mesh _t08FC = extractFem(cc0863, Mesh);
        Femdata: Mesh _t08FD = extractFem(cc0863, Mesh);
        int _t08FE = extractFemItem(CellIndex(MeshCell), int, cc0863);
        field(2)[2] _t08FF = femField(_t08FC,_t08FE,field(2)[2],InvTransform,_msh_newtonInverse04FC );
        field(2)[] _t0900 = prim ∘0164<#∞; %2; $[]; %2; $[2]> (_t08FB, _t08FF);
        field(2)[2] _t0901 = prim ∇00A8<#∞; %2> (_t0900);
        grad08F3 = prim @00A5<#∞; %2; $[2]> (_t0901, midRay08CD);
        out0867 = fmVal08D8;
      }
      string _t0902 = "Out val:";
      string _t0903 = "\n";
      print (_t0902, out0867, _t0903);
      string _t0904 = "Grad val:";
      string _t0905 = "\n";
      print (_t0904, grad08F3, _t0905);
      real _t0906 = 0.1e1;
      real _t0907 = 0.1e1;
      real _t0908 = 0.1e1;
      vec3 mcol0909 = [_t0906, _t0907, _t0908];
      bool _t090A = prim !=0088 (cmin0482, cmax0483);
      if _t090A {
        int _t090B = -1;
        real _t090C = (real)_t090B;
        real _t090D = 0.1e1;
        real _t090E = prim lerp0098<$[]> (_t090C, _t090D, cmin0482, out0867, cmax0483);
        mcol0909 = prim @00A5<#0; %1; $[3]> (CM082A, _t090E);
      }
      if light0484 {
        real _t090F = grad08F3[0];
        real _t0910 = grad08F3[1];
        int _t0911 = -1;
        real _t0912 = (real)_t0911;
        vec3 _t0913 = [_t090F, _t0910, _t0912];
        vec3 N0914 = prim normalize0137<$[3]> (_t0913);
        vec3 _t0915 = prim normalize0137<$[3]> (rayVec084C);
        vec3 _t0916 = prim unary -008B<$[3]> (_t0915);
        vec3 _t0917 = prim +0017<$[3]> (_t0916, L082E);
        vec3 H0918 = prim normalize0137<$[3]> (_t0917);
        vec3 lightColor0919 = prim lerp0098<$[3]> (mcnear0478, mcfar047C, camNearVsp0851, cup08C3, camFarVsp0852);
        vec3 ambientTerm091A = prim *0036<$[3]> (phongKa0485, mcol0909);
        vec3 _t091B = prim modulate0129<%3> (mcol0909, lightColor0919);
        vec3 _t091C = prim *0036<$[3]> (phongKd0486, _t091B);
        real _t091D = 0.e0;
        real _t091E = prim •00CE<$[3]; $[3]; $[]> (N0914, L082E);
        real _t091F = prim max0125 (_t091D, _t091E);
        vec3 diffuse0920 = prim *0038<$[3]> (_t091C, _t091F);
        vec3 _t0921 = prim *0036<$[3]> (phongKs0487, lightColor0919);
        real _t0922 = 0.e0;
        real _t0923 = prim •00CE<$[3]; $[3]; $[]> (N0914, H0918);
        real _t0924 = prim max0125 (_t0922, _t0923);
        real _t0925 = prim ^0069 (_t0924, phongSp0488);
        vec3 specular0926 = prim *0038<$[3]> (_t0921, _t0925);
        vec3 _t0927 = prim +0017<$[3]> (ambientTerm091A, diffuse0920);
        vec3 fin0928 = prim +0017<$[3]> (_t0927, specular0926);
        real _t0929 = fin0928[0];
        real _t092A = fin0928[1];
        real _t092B = fin0928[2];
        real _t092C = 0.1e1;
        rgba0868 = [_t0929, _t092A, _t092B, _t092C];
      } else {
        real _t092D = mcol0909[0];
        real _t092E = mcol0909[1];
        real _t092F = mcol0909[2];
        real _t0930 = 0.1e1;
        rgba0868 = [_t092D, _t092E, _t092F, _t0930];
      }
      vec3 _t0931 = prim *0038<$[3]> (rayVec084C, cup08C3);
      vec3 _t0932 = prim +0017<$[3]> (_t0931, rayOrig084B);
      vec3[1] _t0933 = {_t0932};
      vec3[] _t0934 = (vec3[])_t0933;
      locs086D = _t0934;
      stabilize;
    }
    int _t0935 = 32;
    bool _t0936 = prim >007F (intersectionItter085E, _t0935);
    if _t0936 {
      intersectionItter085E = 0;
      int _t0937 = 1;
      itter085D = prim +0015 (itter085D, _t0937);
      bool _t0938 = prim >=007D (itter085D, len0858);
      if _t0938 {
        string _t0939 = "No intersection found\n";
        print (_t0939);
        string _t093A = "Fin pixel=============================\n";
        print (_t093A);
        stabilize;
      }
      int _t093B = prim +0015 (offset0855, itter085D);
      interval0860 = prim $dynsub01C2<vec2> (times0476, _t093B);
      int _t093C = prim +0015 (offset0855, itter085D);
      int _t093D = prim $dynsub01C2<int> (cells0477, _t093C);
      cc0863 = prim $dynsub01C2<Femdata: MeshCell> (0cell_a0464, _t093D);
      s0861 = interval0860[0];
      e0862 = interval0860[1];
      fc0865 = func funcCell0810 (c0471, cc0863);
      string _t093E = "++++++++++++++++Next interval!+++++++++++++++++++\n";
      print (_t093E);
      continue;
    } else {
      string _t093F = "---------------\n";
      print (_t093F);
    }
  }
}
grid(2) {
  int _t0940 = 0;
  int _t0941 = 1;
  int _t0942 = prim -0024 (iresU045D, _t0941);
  int[] _t0943 = prim $range01C3 (_t0940, _t0942);
  foreach vi0949 in _t0943 {
    int _t0944 = 0;
    int _t0945 = 1;
    int _t0946 = prim -0024 (iresV045E, _t0945);
    int[] _t0947 = prim $range01C3 (_t0944, _t0946);
    foreach ui0948 in _t0947 {
      new ray (ui0948, vi0949);
    }
  }
}
/* Program end */
/* Simplified Program (after after contraction (1)) start */
properties: GlobalInit,StrandArray,HasStartMethod,ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[]),HasInputs,HasGlobals
input real isoval044E = <default>;
input real thick044F = <default>;
input vec3 camEye0450 = <default>;
input vec3 camAt0454 = <default>;
input vec3 camUp0458 = <default>;
input real camFOV045C = <default>;
input int iresU045D = <default>;
input int iresV045E = <default>;
input real camNear045F = <default>;
input real camFar0460 = <default>;
input real refStep0461 = <default>;
input real rayStep0462 = <default>;
input FemData:Mesh a0463;
input FemData:Space 0b046F_intermedateGlobal0470;
input FemData:FemFunc 0c0471_intermedateGlobal0472;
input real zeroEps0473 = <default>;
input real intervalEps0474 = <default>;
input int[] indecies0475;
input vec2[] times0476;
input int[] cells0477;
input vec3 mcnear0478("material color at near clipping plane (for depth cuing)") = <default>;
input vec3 mcfar047C("material color at far clipping plane") = <default>;
input image(1)[3] cmap0481("univariate colormap") = image("/home/teocollin/gitcode/diderot/tests/lipRay/find/cmap.nrrd");
input real cmin0482("value mapped to min end of colormap") = <default>;
input real cmax0483("value mapped to max end of colormap. By default cmin==cmax==0, which disables this colormapping") = <default>;
input bool light0484 = <default>;
input real phongKa0485("Blinn-Phong ambient component") = <default>;
input real phongKd0486("Blinn-Phong diffuse component") = <default>;
input real phongKs0487("Blinn-Phong specular component") = <default>;
input real phongSp0488("Blinn-Phong specularity exponent") = <default>;
input real maxAlpha0489("maximum opacity on rendered surface") = <default>;
input vec3 lightVsp048A = <default>;
input bool debug048E = <default>;
input int debugU048F = <default>;
input int debugV0490 = <default>;
constants {
  isoval044E = 0.2e0;
  thick044F = 0.7e-1;
  real _t0451 = 0.3e1;
  real _t0452 = -0.3e1;
  real _t0453 = 0.3e1;
  camEye0450 = [_t0451, _t0452, _t0453];
  real _t0455 = 0.5e0;
  real _t0456 = 0.5e0;
  real _t0457 = 0.5e0;
  camAt0454 = [_t0455, _t0456, _t0457];
  real _t0459 = 0.e0;
  real _t045A = 0.e0;
  real _t045B = 0.1e1;
  camUp0458 = [_t0459, _t045A, _t045B];
  camFOV045C = 0.137e2;
  iresU045D = 10;
  iresV045E = 10;
  camNear045F = -0.2e1;
  camFar0460 = 0.5e1;
  refStep0461 = 0.1e1;
  rayStep0462 = 0.1e-1;
  zeroEps0473 = 0.1e-10;
  intervalEps0474 = 0.1e-10;
  real _t0479 = 0.1e1;
  real _t047A = 0.1e1;
  real _t047B = 0.1e1;
  mcnear0478 = [_t0479, _t047A, _t047B];
  real _t047D = 0.1e1;
  real _t047E = 0.1e1;
  real _t047F = 0.1e1;
  mcfar047C = [_t047D, _t047E, _t047F];
  cmin0482 = 0.e0;
  cmax0483 = 0.1e1;
  light0484 = false;
  phongKa0485 = 0.5e0;
  phongKd0486 = 0.5e0;
  phongKs0487 = 0.e0;
  phongSp0488 = 0.6e2;
  maxAlpha0489 = 0.1e1;
  real _t048B = 0.e0;
  real _t048C = 0.369e1;
  real _t048D = 0.153e1;
  lightVsp048A = [_t048B, _t048C, _t048D];
  debug048E = false;
  debugU048F = 8;
  debugV0490 = 2;
}
global Femdata: MeshCell[] 0cell_a0464;
global Femdata: Space b046F;
global Femdata: FemFunc c0471;
global real camDist0816;
global real camNearVsp0817;
global real camFarVsp0818;
global vec3 camN081A;
global vec3 camU081C;
global vec3 camV081D;
global real camVmax0823;
global real camUmax0827;
global field#0(1)[3] CM082A;
global vec3 L082E;
function bool#0 !=0491 (Femdata: MeshCell cell10492, Femdata: MeshCell cell10493)
{
  int _t0494 = extractFemItem(CellIndex(Mesh), int, cell10492);
  int _t0495 = extractFemItem(CellIndex(Mesh), int, cell10493);
  bool _t0496 = prim !=0086 (_t0494, _t0495);
  return _t0496;
}
function bool#0 ==0497 (Femdata: MeshCell cell10492, Femdata: MeshCell cell10493)
{
  int _t0498 = extractFemItem(CellIndex(Mesh), int, cell10492);
  int _t0499 = extractFemItem(CellIndex(Mesh), int, cell10493);
  bool _t049A = prim ==0082 (_t0498, _t0499);
  return _t049A;
}
function Femdata: MeshPos#0 findPos049B (Femdata: Mesh mesh049C, vec2 pos049D)
{
  real _t049E = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t049F = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  xn04A0 = [_t049E, _t049F];
  newtonInt04A1 = 0;
  cellInt04A2 = extractFemItem(StartCell(Mesh), int, mesh049C);
  int _t04A3 = extractFemItem(NumCell(Mesh), int, mesh049C);
  int _t04A4 = 1;
  numCell04A5 = prim -0024 (_t04A3, _t04A4);
  yayCells04A6 = extractFemItem2(NearbyCell(File=spat.in)(Mesh), vec2, mesh049C, pos049D : vec2);
  foreach cellItter04A7 in yayCells04A6 {
    cellInt04A2 = cellItter04A7;
    field(2)[2] _t04A8 = femField(mesh049C,cellInt04A2,field(2)[2],Transform,);
    field(2)[2,2] _t04A9 = prim ∇⊗00AD<#∞; %2; $[]; %2> (_t04A8);
    field(2)[2,2] _t04AA = prim inv015B<#∞; %2> (_t04A9);
    real _t04AB = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    real _t04AC = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    vec2 _t04AD = [_t04AB, _t04AC];
    A04AE = prim @00A5<#∞; %2; $[2,2]> (_t04AA, _t04AD);
    int _t04AF = 0;
    int _t04B0 = 16;
    int[] _t04B1 = prim $range01C3 (_t04AF, _t04B0);
    foreach newtonItter04D4 in _t04B1 {
      field(2)[2] _t04B2 = femField(mesh049C,cellInt04A2,field(2)[2],Transform,);
      field(2)[2] _t04B3 = prim -002E<#∞; %2; $[2]> (_t04B2, pos049D);
      field(2)[2] _t04B4 = prim •00D4<#∞; %2; $[2,2]; $[2]; $[2]> (A04AE, _t04B3);
      delta04B5 = prim @00A5<#∞; %2; $[2]> (_t04B4, xn04A0);
      xn04A0 = prim -0026<$[2]> (xn04A0, delta04B5);
      real _t04B6 = 0.1e-7;
      real _t04B7 = 0.1e-7;
      real _t04B8 = prim *0034 (_t04B6, _t04B7);
      real _t04B9 = prim •00CE<$[2]; $[2]; $[]> (delta04B5, delta04B5);
      bool _t04BA = prim >=007E (_t04B8, _t04B9);
      if _t04BA {
        real _t04BB = 0.1e1;
        real _t04BC = 0.1e-8;
        real _t04BD = prim +0017<$[]> (_t04BB, _t04BC);
        real _t04BE = 0.1e1;
        real _t04BF = 0.1e1;
        vec2 _t04C0 = [_t04BE, _t04BF];
        real _t04C1 = prim •00CE<$[2]; $[2]; $[]> (_t04C0, xn04A0);
        bool _t04C2 = prim >0080 (_t04BD, _t04C1);
        real _t04C3 = 0.1e-8;
        real _t04C4 = 0.1e-8;
        vec2 _t04C5 = [_t04C3, _t04C4];
        vec2 _t04C6 = prim +0017<$[2]> (_t04C5, xn04A0);
        real _t04C7 = _t04C6[0];
        real _t04C8 = -0.e0;
        bool _t04C9 = prim >0080 (_t04C7, _t04C8);
        real _t04CA = 0.1e-8;
        real _t04CB = 0.1e-8;
        vec2 _t04CC = [_t04CA, _t04CB];
        vec2 _t04CD = prim +0017<$[2]> (_t04CC, xn04A0);
        real _t04CE = _t04CD[1];
        real _t04CF = -0.e0;
        bool _t04D0 = prim >0080 (_t04CE, _t04CF);
        bool _t04D1 = prim $and01C4 (_t04C9, _t04D0);
        bool _t04D2 = prim $and01C4 (_t04C2, _t04D1);
        if _t04D2 {
          Femdata: MeshPos _t04D3 = extractFemItemN((mesh049C, cellInt04A2, xn04A0, pos049D),AllBuild(MeshPos),);
          return _t04D3;
        }
      }
    }
  }
  string _t04D5 = "Bad end 2";
  string _t04D6 = "\n";
  print (_t04D5, _t04D6);
  Femdata: MeshPos _t04D7 = extractFemItemN((mesh049C),InvalidBuild(MeshPos),);
  return _t04D7;
}
function Femdata: RefCell#0 refcell04D8 (Femdata: Mesh arg004D9)
{
  Femdata: RefCell _t04DA = extractFemItem(RefCell(Mesh), Femdata: RefCell, arg004D9);
  return _t04DA;
}
function Femdata: MeshCell[]#0 cells04DB (Femdata: Mesh arg004DC)
{
  Femdata: MeshCell[] _t04DD = extractFemItem(Cells(Mesh), Femdata: MeshCell[], arg004DC);
  return _t04DD;
}
function Femdata: MeshCell[]#0 cells04DE (Femdata: Mesh arg004DC)
{
  int _t04DF = 0;
  int _t04E0 = extractFemItem(NumCell(Mesh), int, arg004DC);
  int[] _t04E1 = prim $range01C3 (_t04DF, _t04E0);
  Femdata: MeshCell[] accum04E4 = {};
  foreach i04E2 in _t04E1 {
    Femdata: MeshCell _t04E3 = loadFem(MeshCell, arg004DC, i04E2);
    accum04E4 = prim @0010<Femdata: MeshCell> (accum04E4, _t04E3);
  }
  return accum04E4;
}
function int#0 numCell04E5 (Femdata: Mesh arg004D9)
{
  int _t04E6 = extractFemItem(NumCell(Mesh), int, arg004D9);
  return _t04E6;
}
function tensor[2,2,2,2]#0 msh_transform_304E7 (vec2 pos04E8, int cell04E9, Femdata: Mesh mesh04EA)
{
  field(2)[2] _t04EB = femField(mesh04EA,cell04E9,field(2)[2],Transform,);
  field(2)[2,2] _t04EC = prim ∇⊗00AD<#∞; %2; $[]; %2> (_t04EB);
  field(2)[2,2,2] _t04ED = prim ∇⊗00AD<#∞; %2; $[2]; %2> (_t04EC);
  field(2)[2,2,2,2] _t04EE = prim ∇⊗00AD<#∞; %2; $[2,2]; %2> (_t04ED);
  tensor[2,2,2,2] _t04EF = prim @00A5<#∞; %2; $[2,2,2,2]> (_t04EE, pos04E8);
  return _t04EF;
}
function tensor[2,2,2]#0 msh_transform_204F0 (vec2 pos04E8, int cell04E9, Femdata: Mesh mesh04EA)
{
  field(2)[2] _t04F1 = femField(mesh04EA,cell04E9,field(2)[2],Transform,);
  field(2)[2,2] _t04F2 = prim ∇⊗00AD<#∞; %2; $[]; %2> (_t04F1);
  field(2)[2,2,2] _t04F3 = prim ∇⊗00AD<#∞; %2; $[2]; %2> (_t04F2);
  tensor[2,2,2] _t04F4 = prim @00A5<#∞; %2; $[2,2,2]> (_t04F3, pos04E8);
  return _t04F4;
}
function tensor[2,2]#0 msh_transform_104F5 (vec2 pos04E8, int cell04E9, Femdata: Mesh mesh04EA)
{
  field(2)[2] _t04F6 = femField(mesh04EA,cell04E9,field(2)[2],Transform,);
  field(2)[2,2] _t04F7 = prim ∇⊗00AD<#∞; %2; $[]; %2> (_t04F6);
  tensor[2,2] _t04F8 = prim @00A5<#∞; %2; $[2,2]> (_t04F7, pos04E8);
  return _t04F8;
}
function vec2#2 msh_transform_004F9 (vec2 pos04E8, int cell04E9, Femdata: Mesh mesh04EA)
{
  field(2)[2] _t04FA = femField(mesh04EA,cell04E9,field(2)[2],Transform,);
  vec2 _t04FB = prim @00A5<#∞; %2; $[2]> (_t04FA, pos04E8);
  return _t04FB;
}
function Femdata: MeshPos#4 _msh_newtonInverse04FC (vec2 pos04FD, int cellInt04FE, Femdata: Mesh mesh04FF)
{
  real _t0500 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t0501 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  xn0502 = [_t0500, _t0501];
  field(2)[2] _t0503 = femField(mesh04FF,cellInt04FE,field(2)[2],Transform,);
  field(2)[2,2] _t0504 = prim ∇⊗00AD<#∞; %2; $[]; %2> (_t0503);
  field(2)[2,2] _t0505 = prim inv015B<#∞; %2> (_t0504);
  real _t0506 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t0507 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  vec2 _t0508 = [_t0506, _t0507];
  A0509 = prim @00A5<#∞; %2; $[2,2]> (_t0505, _t0508);
  int _t050A = 0;
  int _t050B = 16;
  int[] _t050C = prim $range01C3 (_t050A, _t050B);
  foreach itter0530 in _t050C {
    field(2)[2] _t050D = femField(mesh04FF,cellInt04FE,field(2)[2],Transform,);
    field(2)[2] _t050E = prim -002E<#∞; %2; $[2]> (_t050D, pos04FD);
    field(2)[2] _t050F = prim •00D4<#∞; %2; $[2,2]; $[2]; $[2]> (A0509, _t050E);
    delta0510 = prim @00A5<#∞; %2; $[2]> (_t050F, xn0502);
    xn0502 = prim -0026<$[2]> (xn0502, delta0510);
    real _t0511 = 0.1e-7;
    real _t0512 = 0.1e-7;
    real _t0513 = prim *0034 (_t0511, _t0512);
    real _t0514 = prim •00CE<$[2]; $[2]; $[]> (delta0510, delta0510);
    bool _t0515 = prim >=007E (_t0513, _t0514);
    if _t0515 {
      real _t0516 = 0.1e1;
      real _t0517 = 0.1e-8;
      real _t0518 = prim +0017<$[]> (_t0516, _t0517);
      real _t0519 = 0.1e1;
      real _t051A = 0.1e1;
      vec2 _t051B = [_t0519, _t051A];
      real _t051C = prim •00CE<$[2]; $[2]; $[]> (_t051B, xn0502);
      bool _t051D = prim >0080 (_t0518, _t051C);
      real _t051E = 0.1e-8;
      real _t051F = 0.1e-8;
      vec2 _t0520 = [_t051E, _t051F];
      vec2 _t0521 = prim +0017<$[2]> (_t0520, xn0502);
      real _t0522 = _t0521[0];
      real _t0523 = -0.e0;
      bool _t0524 = prim >0080 (_t0522, _t0523);
      real _t0525 = 0.1e-8;
      real _t0526 = 0.1e-8;
      vec2 _t0527 = [_t0525, _t0526];
      vec2 _t0528 = prim +0017<$[2]> (_t0527, xn0502);
      real _t0529 = _t0528[1];
      real _t052A = -0.e0;
      bool _t052B = prim >0080 (_t0529, _t052A);
      bool _t052C = prim $and01C4 (_t0524, _t052B);
      bool _t052D = prim $and01C4 (_t051D, _t052C);
      if _t052D {
        Femdata: MeshPos _t052E = extractFemItemN((mesh04FF, cellInt04FE, xn0502, pos04FD),AllBuild(MeshPos),);
        return _t052E;
      } else {
        Femdata: MeshPos _t052F = extractFemItemN((mesh04FF),InvalidBuild(MeshPos),);
        return _t052F;
      }
    }
  }
  Femdata: MeshPos _t0531 = extractFemItemN((mesh04FF),InvalidBuild(MeshPos),);
  return _t0531;
}
function Femdata: MeshPos#0 _mesh_pos_msh_build_world_pos0532 (Femdata: MeshPos pos0533)
{
  bool _t0534 = extractFemItem(WorldTest(MeshPos), bool, pos0533);
  if _t0534 {
    vec2 _t0535 = extractFemItem(RefPos(MeshPos), vec2, pos0533);
    int _t0536 = extractFemItem(CellIndex(MeshPos), int, pos0533);
    Femdata: Mesh _t0537 = extractFem(pos0533, Mesh);
    vec2 _t0538 = func msh_transform_004F9 (_t0535, _t0536, _t0537);
    Femdata: MeshPos _t0539 = extractFemItemN((pos0533, _t0538),NewWorld(MeshPos),);
    return _t0539;
  } else {
    return pos0533;
  }
}
function vec2#0 worldPos053A (Femdata: MeshPos pos0533)
{
  vec2 _t053B = extractFemItem(RefPos(MeshPos), vec2, pos0533);
  int _t053C = extractFemItem(CellIndex(MeshPos), int, pos0533);
  Femdata: Mesh _t053D = extractFem(pos0533, Mesh);
  vec2 _t053E = func msh_transform_004F9 (_t053B, _t053C, _t053D);
  return _t053E;
}
function Femdata: MeshPos#0 $exitPos053F (Femdata: Mesh mesh0540, int cellId0541, vec2 refPos0542, vec2 dPos0543, real[2] time0544)
{
  int _t0545 = -1;
  real _t0546 = time0544[1];
  int _t0547 = prim $r2i01B7 (_t0546);
  int[2] _t0549 = func nextCell40548 (_t0547, cellId0541, mesh0540);
  int _t054A = 0;
  int _t054B = prim $sub01C0<int; %2> (_t0549, _t054A);
  bool _t054C = prim !=0086 (_t0545, _t054B);
  if _t054C {
    real _t054D = time0544[1];
    int _t054E = prim $r2i01B7 (_t054D);
    int[2] _t054F = func nextCell40548 (_t054E, cellId0541, mesh0540);
    int _t0550 = 0;
    int _t0551 = prim $sub01C0<int; %2> (_t054F, _t0550);
    real _t0552 = 0.1e1;
    real _t0553 = 0.e0;
    vec2 _t0554 = [_t0552, _t0553];
    real _t0555 = 0.e0;
    real _t0556 = 0.e0;
    vec2 _t0557 = [_t0555, _t0556];
    real _t0558 = 0.e0;
    real _t0559 = 0.e0;
    vec2 _t055A = [_t0558, _t0559];
    vec2[3] _t055B = {_t0554, _t0557, _t055A};
    real _t055C = time0544[1];
    int _t055D = prim $r2i01B7 (_t055C);
    int[2] _t055E = func nextCell40548 (_t055D, cellId0541, mesh0540);
    int _t055F = 1;
    int _t0560 = prim $sub01C0<int; %2> (_t055E, _t055F);
    vec2 _t0561 = prim $sub01C0<vec2; %3> (_t055B, _t0560);
    real _t0562 = -0.1e1;
    real _t0563 = 0.1e1;
    vec2 _t0564 = [_t0562, _t0563];
    real _t0565 = 0.e0;
    real _t0566 = 0.1e1;
    vec2 _t0567 = [_t0565, _t0566];
    real _t0568 = 0.1e1;
    real _t0569 = 0.e0;
    vec2 _t056A = [_t0568, _t0569];
    vec2[3] _t056B = {_t0564, _t0567, _t056A};
    real _t056C = time0544[1];
    int _t056D = prim $r2i01B7 (_t056C);
    int[2] _t056E = func nextCell40548 (_t056D, cellId0541, mesh0540);
    int _t056F = 1;
    int _t0570 = prim $sub01C0<int; %2> (_t056E, _t056F);
    vec2 _t0571 = prim $sub01C0<vec2; %3> (_t056B, _t0570);
    real _t0572 = time0544[0];
    vec2 _t0573 = prim *0036<$[2]> (_t0572, dPos0543);
    vec2 _t0574 = prim +0017<$[2]> (_t0573, refPos0542);
    real _t0575 = _t0574[0];
    real _t0576 = time0544[0];
    vec2 _t0577 = prim *0036<$[2]> (_t0576, dPos0543);
    vec2 _t0578 = prim +0017<$[2]> (_t0577, refPos0542);
    real _t0579 = _t0578[1];
    real[2] _t057A = {_t0575, _t0579};
    int _t057B = 1;
    int _t057C = 1;
    int _t057D = 0;
    int[3] _t057E = {_t057B, _t057C, _t057D};
    real _t057F = time0544[1];
    int _t0580 = prim $r2i01B7 (_t057F);
    int _t0581 = prim $sub01C0<int; %3> (_t057E, _t0580);
    real _t0582 = prim $sub01C0<real; %2> (_t057A, _t0581);
    real _t0583 = 0.1e1;
    real _t0584 = 0.e0;
    real[2] _t0585 = {_t0583, _t0584};
    real _t0586 = 0.e0;
    real _t0587 = 0.e0;
    real[2] _t0588 = {_t0586, _t0587};
    real _t0589 = 0.e0;
    real _t058A = 0.e0;
    real[2] _t058B = {_t0589, _t058A};
    real[2][3] _t058C = {_t0585, _t0588, _t058B};
    real _t058D = time0544[1];
    int _t058E = prim $r2i01B7 (_t058D);
    real[2] _t058F = prim $sub01C0<real[2]; %3> (_t058C, _t058E);
    int _t0590 = 1;
    int _t0591 = 1;
    int _t0592 = 0;
    int[3] _t0593 = {_t0590, _t0591, _t0592};
    real _t0594 = time0544[1];
    int _t0595 = prim $r2i01B7 (_t0594);
    int _t0596 = prim $sub01C0<int; %3> (_t0593, _t0595);
    real _t0597 = prim $sub01C0<real; %2> (_t058F, _t0596);
    real _t0598 = prim -0026<$[]> (_t0582, _t0597);
    real _t0599 = -0.1e1;
    real _t059A = 0.1e1;
    real[2] _t059B = {_t0599, _t059A};
    real _t059C = 0.e0;
    real _t059D = 0.1e1;
    real[2] _t059E = {_t059C, _t059D};
    real _t059F = 0.1e1;
    real _t05A0 = 0.e0;
    real[2] _t05A1 = {_t059F, _t05A0};
    real[2][3] _t05A2 = {_t059B, _t059E, _t05A1};
    real _t05A3 = time0544[1];
    int _t05A4 = prim $r2i01B7 (_t05A3);
    real[2] _t05A5 = prim $sub01C0<real[2]; %3> (_t05A2, _t05A4);
    int _t05A6 = 1;
    int _t05A7 = 1;
    int _t05A8 = 0;
    int[3] _t05A9 = {_t05A6, _t05A7, _t05A8};
    real _t05AA = time0544[1];
    int _t05AB = prim $r2i01B7 (_t05AA);
    int _t05AC = prim $sub01C0<int; %3> (_t05A9, _t05AB);
    real _t05AD = prim $sub01C0<real; %2> (_t05A5, _t05AC);
    real _t05AE = prim /0055 (_t0598, _t05AD);
    vec2 _t05AF = prim *0038<$[2]> (_t0571, _t05AE);
    vec2 _t05B0 = prim +0017<$[2]> (_t0561, _t05AF);
    real _t05B1 = time0544[1];
    int _t05B2 = prim $r2i01B7 (_t05B1);
    int[2] _t05B3 = func nextCell40548 (_t05B2, cellId0541, mesh0540);
    int _t05B4 = 1;
    int _t05B5 = prim $sub01C0<int; %2> (_t05B3, _t05B4);
    Femdata: MeshPos _t05B6 = extractFemItemN((mesh0540, _t0551, _t05B0, _t05B5),RefBuild(Mesh),);
    return _t05B6;
  } else {
    real _t05B7 = time0544[0];
    vec2 _t05B8 = prim *0036<$[2]> (_t05B7, dPos0543);
    vec2 _t05B9 = prim +0017<$[2]> (_t05B8, refPos0542);
    Femdata: MeshPos _t05BA = extractFemItemN((mesh0540, _t05B9),InvalidBuildBoundary(MeshPos),);
    return _t05BA;
  }
}
function int[2]#5 nextCell40548 (int faceIdx05BB, int cell05BC, Femdata: Mesh mesh05BD)
{
  int _t05BE = 6;
  int _t05BF = prim *0033 (cell05BC, _t05BE);
  int _t05C0 = 2;
  int _t05C1 = prim *0033 (faceIdx05BB, _t05C0);
  int _t05C2 = prim +0015 (_t05BF, _t05C1);
  int[2] _t05C3 = extractFemItemN((mesh05BD, _t05C2),CellFaceCell(Mesh),);
  return _t05C3;
}
function vec2#0 _enter05C4 (vec2 refPos05C5, vec2 dPos05C6)
{
  real time05C7 = +inf;
  int face05C8 = -1;
  real faceTime05C9 = -inf;
  real _t05CA = 0.1e1;
  real _t05CB = 0.e0;
  vec2 _t05CC = [_t05CA, _t05CB];
  vec2 _t05CD = prim -0026<$[2]> (_t05CC, refPos05C5);
  real _t05CE = -0.1e1;
  real _t05CF = 0.1e1;
  vec2 _t05D0 = [_t05CE, _t05CF];
  real _t05D1 = -0.1e1;
  real _t05D2 = 0.1e1;
  vec2 _t05D3 = [_t05D1, _t05D2];
  real _t05D4 = prim ×00BD (dPos05C6, _t05D3);
  vec2 _t05D5 = prim /0057<$[2]> (_t05D0, _t05D4);
  real _t05D6 = prim ×00BD (_t05CD, _t05D5);
  real _t05D7 = -0.1e-15;
  bool _t05D8 = prim >=007E (_t05D6, _t05D7);
  real _t05D9 = 0.1e1;
  real _t05DA = 0.e0;
  vec2 _t05DB = [_t05D9, _t05DA];
  vec2 _t05DC = prim -0026<$[2]> (_t05DB, refPos05C5);
  real _t05DD = -0.1e1;
  real _t05DE = 0.1e1;
  vec2 _t05DF = [_t05DD, _t05DE];
  real _t05E0 = -0.1e1;
  real _t05E1 = 0.1e1;
  vec2 _t05E2 = [_t05E0, _t05E1];
  real _t05E3 = prim ×00BD (dPos05C6, _t05E2);
  vec2 _t05E4 = prim /0057<$[2]> (_t05DF, _t05E3);
  real _t05E5 = prim ×00BD (_t05DC, _t05E4);
  bool _t05E6 = prim >0080 (time05C7, _t05E5);
  real _t05E7 = -0.1e1;
  real _t05E8 = 0.1e1;
  vec2 _t05E9 = [_t05E7, _t05E8];
  real _t05EA = prim ×00BD (dPos05C6, _t05E9);
  real _t05EB = prim |()|00B5<$[]> (_t05EA);
  real _t05EC = 0.1e-20;
  bool _t05ED = prim >=007E (_t05EB, _t05EC);
  bool _t05EE = prim $and01C4 (_t05E6, _t05ED);
  bool _t05EF = prim $and01C4 (_t05D8, _t05EE);
  if _t05EF {
    real _t05F0 = 0.1e1;
    real _t05F1 = 0.1e-8;
    real _t05F2 = prim +0017<$[]> (_t05F0, _t05F1);
    real _t05F3 = 0.1e1;
    real _t05F4 = 0.1e1;
    vec2 _t05F5 = [_t05F3, _t05F4];
    real _t05F6 = 0.1e1;
    real _t05F7 = 0.e0;
    vec2 _t05F8 = [_t05F6, _t05F7];
    vec2 _t05F9 = prim -0026<$[2]> (_t05F8, refPos05C5);
    real _t05FA = -0.1e1;
    real _t05FB = 0.1e1;
    vec2 _t05FC = [_t05FA, _t05FB];
    real _t05FD = -0.1e1;
    real _t05FE = 0.1e1;
    vec2 _t05FF = [_t05FD, _t05FE];
    real _t0600 = prim ×00BD (dPos05C6, _t05FF);
    vec2 _t0601 = prim /0057<$[2]> (_t05FC, _t0600);
    real _t0602 = prim ×00BD (_t05F9, _t0601);
    vec2 _t0603 = prim *0038<$[2]> (dPos05C6, _t0602);
    vec2 _t0604 = prim +0017<$[2]> (refPos05C5, _t0603);
    real _t0605 = prim •00CE<$[2]; $[2]; $[]> (_t05F5, _t0604);
    bool _t0606 = prim >0080 (_t05F2, _t0605);
    real _t0607 = 0.1e-8;
    real _t0608 = 0.1e-8;
    vec2 _t0609 = [_t0607, _t0608];
    real _t060A = 0.1e1;
    real _t060B = 0.e0;
    vec2 _t060C = [_t060A, _t060B];
    vec2 _t060D = prim -0026<$[2]> (_t060C, refPos05C5);
    real _t060E = -0.1e1;
    real _t060F = 0.1e1;
    vec2 _t0610 = [_t060E, _t060F];
    real _t0611 = -0.1e1;
    real _t0612 = 0.1e1;
    vec2 _t0613 = [_t0611, _t0612];
    real _t0614 = prim ×00BD (dPos05C6, _t0613);
    vec2 _t0615 = prim /0057<$[2]> (_t0610, _t0614);
    real _t0616 = prim ×00BD (_t060D, _t0615);
    vec2 _t0617 = prim *0038<$[2]> (dPos05C6, _t0616);
    vec2 _t0618 = prim +0017<$[2]> (refPos05C5, _t0617);
    vec2 _t0619 = prim +0017<$[2]> (_t0609, _t0618);
    real _t061A = _t0619[0];
    real _t061B = -0.e0;
    bool _t061C = prim >0080 (_t061A, _t061B);
    real _t061D = 0.1e-8;
    real _t061E = 0.1e-8;
    vec2 _t061F = [_t061D, _t061E];
    real _t0620 = 0.1e1;
    real _t0621 = 0.e0;
    vec2 _t0622 = [_t0620, _t0621];
    vec2 _t0623 = prim -0026<$[2]> (_t0622, refPos05C5);
    real _t0624 = -0.1e1;
    real _t0625 = 0.1e1;
    vec2 _t0626 = [_t0624, _t0625];
    real _t0627 = -0.1e1;
    real _t0628 = 0.1e1;
    vec2 _t0629 = [_t0627, _t0628];
    real _t062A = prim ×00BD (dPos05C6, _t0629);
    vec2 _t062B = prim /0057<$[2]> (_t0626, _t062A);
    real _t062C = prim ×00BD (_t0623, _t062B);
    vec2 _t062D = prim *0038<$[2]> (dPos05C6, _t062C);
    vec2 _t062E = prim +0017<$[2]> (refPos05C5, _t062D);
    vec2 _t062F = prim +0017<$[2]> (_t061F, _t062E);
    real _t0630 = _t062F[1];
    real _t0631 = -0.e0;
    bool _t0632 = prim >0080 (_t0630, _t0631);
    bool _t0633 = prim $and01C4 (_t061C, _t0632);
    bool _t0634 = prim $and01C4 (_t0606, _t0633);
    if _t0634 {
      real _t0635 = 0.1e1;
      real _t0636 = 0.e0;
      vec2 _t0637 = [_t0635, _t0636];
      vec2 _t0638 = prim -0026<$[2]> (_t0637, refPos05C5);
      real _t0639 = -0.1e1;
      real _t063A = 0.1e1;
      vec2 _t063B = [_t0639, _t063A];
      real _t063C = -0.1e1;
      real _t063D = 0.1e1;
      vec2 _t063E = [_t063C, _t063D];
      real _t063F = prim ×00BD (dPos05C6, _t063E);
      vec2 _t0640 = prim /0057<$[2]> (_t063B, _t063F);
      time05C7 = prim ×00BD (_t0638, _t0640);
      face05C8 = 0;
    }
  }
  real _t0641 = 0.e0;
  real _t0642 = 0.e0;
  vec2 _t0643 = [_t0641, _t0642];
  vec2 _t0644 = prim -0026<$[2]> (_t0643, refPos05C5);
  real _t0645 = 0.e0;
  real _t0646 = 0.1e1;
  vec2 _t0647 = [_t0645, _t0646];
  real _t0648 = 0.e0;
  real _t0649 = 0.1e1;
  vec2 _t064A = [_t0648, _t0649];
  real _t064B = prim ×00BD (dPos05C6, _t064A);
  vec2 _t064C = prim /0057<$[2]> (_t0647, _t064B);
  real _t064D = prim ×00BD (_t0644, _t064C);
  real _t064E = -0.1e-15;
  bool _t064F = prim >=007E (_t064D, _t064E);
  real _t0650 = 0.e0;
  real _t0651 = 0.e0;
  vec2 _t0652 = [_t0650, _t0651];
  vec2 _t0653 = prim -0026<$[2]> (_t0652, refPos05C5);
  real _t0654 = 0.e0;
  real _t0655 = 0.1e1;
  vec2 _t0656 = [_t0654, _t0655];
  real _t0657 = 0.e0;
  real _t0658 = 0.1e1;
  vec2 _t0659 = [_t0657, _t0658];
  real _t065A = prim ×00BD (dPos05C6, _t0659);
  vec2 _t065B = prim /0057<$[2]> (_t0656, _t065A);
  real _t065C = prim ×00BD (_t0653, _t065B);
  bool _t065D = prim >0080 (time05C7, _t065C);
  real _t065E = 0.e0;
  real _t065F = 0.1e1;
  vec2 _t0660 = [_t065E, _t065F];
  real _t0661 = prim ×00BD (dPos05C6, _t0660);
  real _t0662 = prim |()|00B5<$[]> (_t0661);
  real _t0663 = 0.1e-20;
  bool _t0664 = prim >=007E (_t0662, _t0663);
  bool _t0665 = prim $and01C4 (_t065D, _t0664);
  bool _t0666 = prim $and01C4 (_t064F, _t0665);
  if _t0666 {
    real _t0667 = 0.1e1;
    real _t0668 = 0.1e-8;
    real _t0669 = prim +0017<$[]> (_t0667, _t0668);
    real _t066A = 0.1e1;
    real _t066B = 0.1e1;
    vec2 _t066C = [_t066A, _t066B];
    real _t066D = 0.e0;
    real _t066E = 0.e0;
    vec2 _t066F = [_t066D, _t066E];
    vec2 _t0670 = prim -0026<$[2]> (_t066F, refPos05C5);
    real _t0671 = 0.e0;
    real _t0672 = 0.1e1;
    vec2 _t0673 = [_t0671, _t0672];
    real _t0674 = 0.e0;
    real _t0675 = 0.1e1;
    vec2 _t0676 = [_t0674, _t0675];
    real _t0677 = prim ×00BD (dPos05C6, _t0676);
    vec2 _t0678 = prim /0057<$[2]> (_t0673, _t0677);
    real _t0679 = prim ×00BD (_t0670, _t0678);
    vec2 _t067A = prim *0038<$[2]> (dPos05C6, _t0679);
    vec2 _t067B = prim +0017<$[2]> (refPos05C5, _t067A);
    real _t067C = prim •00CE<$[2]; $[2]; $[]> (_t066C, _t067B);
    bool _t067D = prim >0080 (_t0669, _t067C);
    real _t067E = 0.1e-8;
    real _t067F = 0.1e-8;
    vec2 _t0680 = [_t067E, _t067F];
    real _t0681 = 0.e0;
    real _t0682 = 0.e0;
    vec2 _t0683 = [_t0681, _t0682];
    vec2 _t0684 = prim -0026<$[2]> (_t0683, refPos05C5);
    real _t0685 = 0.e0;
    real _t0686 = 0.1e1;
    vec2 _t0687 = [_t0685, _t0686];
    real _t0688 = 0.e0;
    real _t0689 = 0.1e1;
    vec2 _t068A = [_t0688, _t0689];
    real _t068B = prim ×00BD (dPos05C6, _t068A);
    vec2 _t068C = prim /0057<$[2]> (_t0687, _t068B);
    real _t068D = prim ×00BD (_t0684, _t068C);
    vec2 _t068E = prim *0038<$[2]> (dPos05C6, _t068D);
    vec2 _t068F = prim +0017<$[2]> (refPos05C5, _t068E);
    vec2 _t0690 = prim +0017<$[2]> (_t0680, _t068F);
    real _t0691 = _t0690[0];
    real _t0692 = -0.e0;
    bool _t0693 = prim >0080 (_t0691, _t0692);
    real _t0694 = 0.1e-8;
    real _t0695 = 0.1e-8;
    vec2 _t0696 = [_t0694, _t0695];
    real _t0697 = 0.e0;
    real _t0698 = 0.e0;
    vec2 _t0699 = [_t0697, _t0698];
    vec2 _t069A = prim -0026<$[2]> (_t0699, refPos05C5);
    real _t069B = 0.e0;
    real _t069C = 0.1e1;
    vec2 _t069D = [_t069B, _t069C];
    real _t069E = 0.e0;
    real _t069F = 0.1e1;
    vec2 _t06A0 = [_t069E, _t069F];
    real _t06A1 = prim ×00BD (dPos05C6, _t06A0);
    vec2 _t06A2 = prim /0057<$[2]> (_t069D, _t06A1);
    real _t06A3 = prim ×00BD (_t069A, _t06A2);
    vec2 _t06A4 = prim *0038<$[2]> (dPos05C6, _t06A3);
    vec2 _t06A5 = prim +0017<$[2]> (refPos05C5, _t06A4);
    vec2 _t06A6 = prim +0017<$[2]> (_t0696, _t06A5);
    real _t06A7 = _t06A6[1];
    real _t06A8 = -0.e0;
    bool _t06A9 = prim >0080 (_t06A7, _t06A8);
    bool _t06AA = prim $and01C4 (_t0693, _t06A9);
    bool _t06AB = prim $and01C4 (_t067D, _t06AA);
    if _t06AB {
      real _t06AC = 0.e0;
      real _t06AD = 0.e0;
      vec2 _t06AE = [_t06AC, _t06AD];
      vec2 _t06AF = prim -0026<$[2]> (_t06AE, refPos05C5);
      real _t06B0 = 0.e0;
      real _t06B1 = 0.1e1;
      vec2 _t06B2 = [_t06B0, _t06B1];
      real _t06B3 = 0.e0;
      real _t06B4 = 0.1e1;
      vec2 _t06B5 = [_t06B3, _t06B4];
      real _t06B6 = prim ×00BD (dPos05C6, _t06B5);
      vec2 _t06B7 = prim /0057<$[2]> (_t06B2, _t06B6);
      time05C7 = prim ×00BD (_t06AF, _t06B7);
      face05C8 = 1;
    }
  }
  real _t06B8 = 0.e0;
  real _t06B9 = 0.e0;
  vec2 _t06BA = [_t06B8, _t06B9];
  vec2 _t06BB = prim -0026<$[2]> (_t06BA, refPos05C5);
  real _t06BC = 0.1e1;
  real _t06BD = 0.e0;
  vec2 _t06BE = [_t06BC, _t06BD];
  real _t06BF = 0.1e1;
  real _t06C0 = 0.e0;
  vec2 _t06C1 = [_t06BF, _t06C0];
  real _t06C2 = prim ×00BD (dPos05C6, _t06C1);
  vec2 _t06C3 = prim /0057<$[2]> (_t06BE, _t06C2);
  real _t06C4 = prim ×00BD (_t06BB, _t06C3);
  real _t06C5 = -0.1e-15;
  bool _t06C6 = prim >=007E (_t06C4, _t06C5);
  real _t06C7 = 0.e0;
  real _t06C8 = 0.e0;
  vec2 _t06C9 = [_t06C7, _t06C8];
  vec2 _t06CA = prim -0026<$[2]> (_t06C9, refPos05C5);
  real _t06CB = 0.1e1;
  real _t06CC = 0.e0;
  vec2 _t06CD = [_t06CB, _t06CC];
  real _t06CE = 0.1e1;
  real _t06CF = 0.e0;
  vec2 _t06D0 = [_t06CE, _t06CF];
  real _t06D1 = prim ×00BD (dPos05C6, _t06D0);
  vec2 _t06D2 = prim /0057<$[2]> (_t06CD, _t06D1);
  real _t06D3 = prim ×00BD (_t06CA, _t06D2);
  bool _t06D4 = prim >0080 (time05C7, _t06D3);
  real _t06D5 = 0.1e1;
  real _t06D6 = 0.e0;
  vec2 _t06D7 = [_t06D5, _t06D6];
  real _t06D8 = prim ×00BD (dPos05C6, _t06D7);
  real _t06D9 = prim |()|00B5<$[]> (_t06D8);
  real _t06DA = 0.1e-20;
  bool _t06DB = prim >=007E (_t06D9, _t06DA);
  bool _t06DC = prim $and01C4 (_t06D4, _t06DB);
  bool _t06DD = prim $and01C4 (_t06C6, _t06DC);
  if _t06DD {
    real _t06DE = 0.1e1;
    real _t06DF = 0.1e-8;
    real _t06E0 = prim +0017<$[]> (_t06DE, _t06DF);
    real _t06E1 = 0.1e1;
    real _t06E2 = 0.1e1;
    vec2 _t06E3 = [_t06E1, _t06E2];
    real _t06E4 = 0.e0;
    real _t06E5 = 0.e0;
    vec2 _t06E6 = [_t06E4, _t06E5];
    vec2 _t06E7 = prim -0026<$[2]> (_t06E6, refPos05C5);
    real _t06E8 = 0.1e1;
    real _t06E9 = 0.e0;
    vec2 _t06EA = [_t06E8, _t06E9];
    real _t06EB = 0.1e1;
    real _t06EC = 0.e0;
    vec2 _t06ED = [_t06EB, _t06EC];
    real _t06EE = prim ×00BD (dPos05C6, _t06ED);
    vec2 _t06EF = prim /0057<$[2]> (_t06EA, _t06EE);
    real _t06F0 = prim ×00BD (_t06E7, _t06EF);
    vec2 _t06F1 = prim *0038<$[2]> (dPos05C6, _t06F0);
    vec2 _t06F2 = prim +0017<$[2]> (refPos05C5, _t06F1);
    real _t06F3 = prim •00CE<$[2]; $[2]; $[]> (_t06E3, _t06F2);
    bool _t06F4 = prim >0080 (_t06E0, _t06F3);
    real _t06F5 = 0.1e-8;
    real _t06F6 = 0.1e-8;
    vec2 _t06F7 = [_t06F5, _t06F6];
    real _t06F8 = 0.e0;
    real _t06F9 = 0.e0;
    vec2 _t06FA = [_t06F8, _t06F9];
    vec2 _t06FB = prim -0026<$[2]> (_t06FA, refPos05C5);
    real _t06FC = 0.1e1;
    real _t06FD = 0.e0;
    vec2 _t06FE = [_t06FC, _t06FD];
    real _t06FF = 0.1e1;
    real _t0700 = 0.e0;
    vec2 _t0701 = [_t06FF, _t0700];
    real _t0702 = prim ×00BD (dPos05C6, _t0701);
    vec2 _t0703 = prim /0057<$[2]> (_t06FE, _t0702);
    real _t0704 = prim ×00BD (_t06FB, _t0703);
    vec2 _t0705 = prim *0038<$[2]> (dPos05C6, _t0704);
    vec2 _t0706 = prim +0017<$[2]> (refPos05C5, _t0705);
    vec2 _t0707 = prim +0017<$[2]> (_t06F7, _t0706);
    real _t0708 = _t0707[0];
    real _t0709 = -0.e0;
    bool _t070A = prim >0080 (_t0708, _t0709);
    real _t070B = 0.1e-8;
    real _t070C = 0.1e-8;
    vec2 _t070D = [_t070B, _t070C];
    real _t070E = 0.e0;
    real _t070F = 0.e0;
    vec2 _t0710 = [_t070E, _t070F];
    vec2 _t0711 = prim -0026<$[2]> (_t0710, refPos05C5);
    real _t0712 = 0.1e1;
    real _t0713 = 0.e0;
    vec2 _t0714 = [_t0712, _t0713];
    real _t0715 = 0.1e1;
    real _t0716 = 0.e0;
    vec2 _t0717 = [_t0715, _t0716];
    real _t0718 = prim ×00BD (dPos05C6, _t0717);
    vec2 _t0719 = prim /0057<$[2]> (_t0714, _t0718);
    real _t071A = prim ×00BD (_t0711, _t0719);
    vec2 _t071B = prim *0038<$[2]> (dPos05C6, _t071A);
    vec2 _t071C = prim +0017<$[2]> (refPos05C5, _t071B);
    vec2 _t071D = prim +0017<$[2]> (_t070D, _t071C);
    real _t071E = _t071D[1];
    real _t071F = -0.e0;
    bool _t0720 = prim >0080 (_t071E, _t071F);
    bool _t0721 = prim $and01C4 (_t070A, _t0720);
    bool _t0722 = prim $and01C4 (_t06F4, _t0721);
    if _t0722 {
      real _t0723 = 0.e0;
      real _t0724 = 0.e0;
      vec2 _t0725 = [_t0723, _t0724];
      vec2 _t0726 = prim -0026<$[2]> (_t0725, refPos05C5);
      real _t0727 = 0.1e1;
      real _t0728 = 0.e0;
      vec2 _t0729 = [_t0727, _t0728];
      real _t072A = 0.1e1;
      real _t072B = 0.e0;
      vec2 _t072C = [_t072A, _t072B];
      real _t072D = prim ×00BD (dPos05C6, _t072C);
      vec2 _t072E = prim /0057<$[2]> (_t0729, _t072D);
      time05C7 = prim ×00BD (_t0726, _t072E);
      face05C8 = 2;
    }
  }
  int _t072F = -1;
  bool _t0730 = prim !=0086 (face05C8, _t072F);
  if _t0730 {
    real _t0731 = 0.e0;
    real _t0732 = prim max0125 (time05C7, _t0731);
    real _t0733 = (real)face05C8;
    vec2 _t0734 = [_t0732, _t0733];
    return _t0734;
  } else {
    real _t0735 = -0.1e1;
    real _t0736 = -0.1e1;
    vec2 _t0737 = [_t0735, _t0736];
    return _t0737;
  }
}
function vec2#0 _exit0738 (vec2 refPos05C5, vec2 dPos05C6, int i0739)
{
  real time073A = +inf;
  int face073B = -1;
  real faceTime073C = -inf;
  real _t073D = 0.1e1;
  real _t073E = 0.e0;
  vec2 _t073F = [_t073D, _t073E];
  vec2 _t0740 = prim -0026<$[2]> (_t073F, refPos05C5);
  real _t0741 = -0.1e1;
  real _t0742 = 0.1e1;
  vec2 _t0743 = [_t0741, _t0742];
  real _t0744 = -0.1e1;
  real _t0745 = 0.1e1;
  vec2 _t0746 = [_t0744, _t0745];
  real _t0747 = prim ×00BD (dPos05C6, _t0746);
  vec2 _t0748 = prim /0057<$[2]> (_t0743, _t0747);
  real _t0749 = prim ×00BD (_t0740, _t0748);
  real _t074A = -0.1e-15;
  bool _t074B = prim >=007E (_t0749, _t074A);
  real _t074C = 0.1e1;
  real _t074D = 0.e0;
  vec2 _t074E = [_t074C, _t074D];
  vec2 _t074F = prim -0026<$[2]> (_t074E, refPos05C5);
  real _t0750 = -0.1e1;
  real _t0751 = 0.1e1;
  vec2 _t0752 = [_t0750, _t0751];
  real _t0753 = -0.1e1;
  real _t0754 = 0.1e1;
  vec2 _t0755 = [_t0753, _t0754];
  real _t0756 = prim ×00BD (dPos05C6, _t0755);
  vec2 _t0757 = prim /0057<$[2]> (_t0752, _t0756);
  real _t0758 = prim ×00BD (_t074F, _t0757);
  bool _t0759 = prim >0080 (time073A, _t0758);
  real _t075A = -0.1e1;
  real _t075B = 0.1e1;
  vec2 _t075C = [_t075A, _t075B];
  real _t075D = prim ×00BD (dPos05C6, _t075C);
  real _t075E = prim |()|00B5<$[]> (_t075D);
  real _t075F = 0.1e-20;
  bool _t0760 = prim >=007E (_t075E, _t075F);
  bool _t0761 = prim $and01C4 (_t0759, _t0760);
  bool _t0762 = prim $and01C4 (_t074B, _t0761);
  if _t0762 {
    int _t0763 = 0;
    bool _t0764 = prim !=0086 (i0739, _t0763);
    if _t0764 {
      real _t0765 = 0.1e1;
      real _t0766 = 0.e0;
      vec2 _t0767 = [_t0765, _t0766];
      vec2 _t0768 = prim -0026<$[2]> (_t0767, refPos05C5);
      real _t0769 = -0.1e1;
      real _t076A = 0.1e1;
      vec2 _t076B = [_t0769, _t076A];
      real _t076C = -0.1e1;
      real _t076D = 0.1e1;
      vec2 _t076E = [_t076C, _t076D];
      real _t076F = prim ×00BD (dPos05C6, _t076E);
      vec2 _t0770 = prim /0057<$[2]> (_t076B, _t076F);
      time073A = prim ×00BD (_t0768, _t0770);
      face073B = 0;
    } else {
      real _t0771 = 0.1e1;
      real _t0772 = 0.e0;
      vec2 _t0773 = [_t0771, _t0772];
      vec2 _t0774 = prim -0026<$[2]> (_t0773, refPos05C5);
      real _t0775 = -0.1e1;
      real _t0776 = 0.1e1;
      vec2 _t0777 = [_t0775, _t0776];
      real _t0778 = -0.1e1;
      real _t0779 = 0.1e1;
      vec2 _t077A = [_t0778, _t0779];
      real _t077B = prim ×00BD (dPos05C6, _t077A);
      vec2 _t077C = prim /0057<$[2]> (_t0777, _t077B);
      faceTime073C = prim ×00BD (_t0774, _t077C);
    }
  }
  real _t077D = 0.e0;
  real _t077E = 0.e0;
  vec2 _t077F = [_t077D, _t077E];
  vec2 _t0780 = prim -0026<$[2]> (_t077F, refPos05C5);
  real _t0781 = 0.e0;
  real _t0782 = 0.1e1;
  vec2 _t0783 = [_t0781, _t0782];
  real _t0784 = 0.e0;
  real _t0785 = 0.1e1;
  vec2 _t0786 = [_t0784, _t0785];
  real _t0787 = prim ×00BD (dPos05C6, _t0786);
  vec2 _t0788 = prim /0057<$[2]> (_t0783, _t0787);
  real _t0789 = prim ×00BD (_t0780, _t0788);
  real _t078A = -0.1e-15;
  bool _t078B = prim >=007E (_t0789, _t078A);
  real _t078C = 0.e0;
  real _t078D = 0.e0;
  vec2 _t078E = [_t078C, _t078D];
  vec2 _t078F = prim -0026<$[2]> (_t078E, refPos05C5);
  real _t0790 = 0.e0;
  real _t0791 = 0.1e1;
  vec2 _t0792 = [_t0790, _t0791];
  real _t0793 = 0.e0;
  real _t0794 = 0.1e1;
  vec2 _t0795 = [_t0793, _t0794];
  real _t0796 = prim ×00BD (dPos05C6, _t0795);
  vec2 _t0797 = prim /0057<$[2]> (_t0792, _t0796);
  real _t0798 = prim ×00BD (_t078F, _t0797);
  bool _t0799 = prim >0080 (time073A, _t0798);
  real _t079A = 0.e0;
  real _t079B = 0.1e1;
  vec2 _t079C = [_t079A, _t079B];
  real _t079D = prim ×00BD (dPos05C6, _t079C);
  real _t079E = prim |()|00B5<$[]> (_t079D);
  real _t079F = 0.1e-20;
  bool _t07A0 = prim >=007E (_t079E, _t079F);
  bool _t07A1 = prim $and01C4 (_t0799, _t07A0);
  bool _t07A2 = prim $and01C4 (_t078B, _t07A1);
  if _t07A2 {
    int _t07A3 = 1;
    bool _t07A4 = prim !=0086 (i0739, _t07A3);
    if _t07A4 {
      real _t07A5 = 0.e0;
      real _t07A6 = 0.e0;
      vec2 _t07A7 = [_t07A5, _t07A6];
      vec2 _t07A8 = prim -0026<$[2]> (_t07A7, refPos05C5);
      real _t07A9 = 0.e0;
      real _t07AA = 0.1e1;
      vec2 _t07AB = [_t07A9, _t07AA];
      real _t07AC = 0.e0;
      real _t07AD = 0.1e1;
      vec2 _t07AE = [_t07AC, _t07AD];
      real _t07AF = prim ×00BD (dPos05C6, _t07AE);
      vec2 _t07B0 = prim /0057<$[2]> (_t07AB, _t07AF);
      time073A = prim ×00BD (_t07A8, _t07B0);
      face073B = 1;
    } else {
      real _t07B1 = 0.e0;
      real _t07B2 = 0.e0;
      vec2 _t07B3 = [_t07B1, _t07B2];
      vec2 _t07B4 = prim -0026<$[2]> (_t07B3, refPos05C5);
      real _t07B5 = 0.e0;
      real _t07B6 = 0.1e1;
      vec2 _t07B7 = [_t07B5, _t07B6];
      real _t07B8 = 0.e0;
      real _t07B9 = 0.1e1;
      vec2 _t07BA = [_t07B8, _t07B9];
      real _t07BB = prim ×00BD (dPos05C6, _t07BA);
      vec2 _t07BC = prim /0057<$[2]> (_t07B7, _t07BB);
      faceTime073C = prim ×00BD (_t07B4, _t07BC);
    }
  }
  real _t07BD = 0.e0;
  real _t07BE = 0.e0;
  vec2 _t07BF = [_t07BD, _t07BE];
  vec2 _t07C0 = prim -0026<$[2]> (_t07BF, refPos05C5);
  real _t07C1 = 0.1e1;
  real _t07C2 = 0.e0;
  vec2 _t07C3 = [_t07C1, _t07C2];
  real _t07C4 = 0.1e1;
  real _t07C5 = 0.e0;
  vec2 _t07C6 = [_t07C4, _t07C5];
  real _t07C7 = prim ×00BD (dPos05C6, _t07C6);
  vec2 _t07C8 = prim /0057<$[2]> (_t07C3, _t07C7);
  real _t07C9 = prim ×00BD (_t07C0, _t07C8);
  real _t07CA = -0.1e-15;
  bool _t07CB = prim >=007E (_t07C9, _t07CA);
  real _t07CC = 0.e0;
  real _t07CD = 0.e0;
  vec2 _t07CE = [_t07CC, _t07CD];
  vec2 _t07CF = prim -0026<$[2]> (_t07CE, refPos05C5);
  real _t07D0 = 0.1e1;
  real _t07D1 = 0.e0;
  vec2 _t07D2 = [_t07D0, _t07D1];
  real _t07D3 = 0.1e1;
  real _t07D4 = 0.e0;
  vec2 _t07D5 = [_t07D3, _t07D4];
  real _t07D6 = prim ×00BD (dPos05C6, _t07D5);
  vec2 _t07D7 = prim /0057<$[2]> (_t07D2, _t07D6);
  real _t07D8 = prim ×00BD (_t07CF, _t07D7);
  bool _t07D9 = prim >0080 (time073A, _t07D8);
  real _t07DA = 0.1e1;
  real _t07DB = 0.e0;
  vec2 _t07DC = [_t07DA, _t07DB];
  real _t07DD = prim ×00BD (dPos05C6, _t07DC);
  real _t07DE = prim |()|00B5<$[]> (_t07DD);
  real _t07DF = 0.1e-20;
  bool _t07E0 = prim >=007E (_t07DE, _t07DF);
  bool _t07E1 = prim $and01C4 (_t07D9, _t07E0);
  bool _t07E2 = prim $and01C4 (_t07CB, _t07E1);
  if _t07E2 {
    int _t07E3 = 2;
    bool _t07E4 = prim !=0086 (i0739, _t07E3);
    if _t07E4 {
      real _t07E5 = 0.e0;
      real _t07E6 = 0.e0;
      vec2 _t07E7 = [_t07E5, _t07E6];
      vec2 _t07E8 = prim -0026<$[2]> (_t07E7, refPos05C5);
      real _t07E9 = 0.1e1;
      real _t07EA = 0.e0;
      vec2 _t07EB = [_t07E9, _t07EA];
      real _t07EC = 0.1e1;
      real _t07ED = 0.e0;
      vec2 _t07EE = [_t07EC, _t07ED];
      real _t07EF = prim ×00BD (dPos05C6, _t07EE);
      vec2 _t07F0 = prim /0057<$[2]> (_t07EB, _t07EF);
      time073A = prim ×00BD (_t07E8, _t07F0);
      face073B = 2;
    } else {
      real _t07F1 = 0.e0;
      real _t07F2 = 0.e0;
      vec2 _t07F3 = [_t07F1, _t07F2];
      vec2 _t07F4 = prim -0026<$[2]> (_t07F3, refPos05C5);
      real _t07F5 = 0.1e1;
      real _t07F6 = 0.e0;
      vec2 _t07F7 = [_t07F5, _t07F6];
      real _t07F8 = 0.1e1;
      real _t07F9 = 0.e0;
      vec2 _t07FA = [_t07F8, _t07F9];
      real _t07FB = prim ×00BD (dPos05C6, _t07FA);
      vec2 _t07FC = prim /0057<$[2]> (_t07F7, _t07FB);
      faceTime073C = prim ×00BD (_t07F4, _t07FC);
    }
  }
  int _t07FD = -1;
  bool _t07FE = prim !=0086 (face073B, _t07FD);
  if _t07FE {
    real _t07FF = 0.e0;
    real _t0800 = prim max0125 (time073A, _t07FF);
    real _t0801 = (real)face073B;
    vec2 _t0802 = [_t0800, _t0801];
    return _t0802;
  } else {
    real _t0803 = -inf;
    bool _t0804 = prim ==0084 (_t0803, faceTime073C);
    if _t0804 {
      real _t0805 = -0.1e1;
      real _t0806 = -0.1e1;
      vec2 _t0807 = [_t0805, _t0806];
      return _t0807;
    } else {
      real _t0808 = (real)i0739;
      vec2 _t0809 = [faceTime073C, _t0808];
      return _t0809;
    }
  }
}
function Femdata: Mesh#0 domain080A (Femdata: Space arg0080B)
{
  Femdata: Mesh _t080C = extractFem(arg0080B, Mesh);
  return _t080C;
}
function Femdata: Space#0 space080D (Femdata: FemFunc arg0080E)
{
  Femdata: Space _t080F = extractFem(arg0080E, Space);
  return _t080F;
}
function Femdata: FuncCell#3 funcCell0810 (Femdata: FemFunc arg00811, Femdata: MeshCell arg10812)
{
  int _t0813 = extractFemItem(CellIndex(MeshCell), int, arg10812);
  Femdata: FuncCell _t0814 = loadFem(FuncCell, arg00811, _t0813);
  return _t0814;
}
function int#4 sign082F (real x0830)
{
  real _t0831 = 0.e0;
  bool _t0832 = prim >0080 (x0830, _t0831);
  if _t0832 {
    int _t0833 = 1;
    return _t0833;
  } else {
    real _t0834 = 0.e0;
    bool _t0835 = prim <007A (x0830, _t0834);
    if _t0835 {
      int _t0836 = -1;
      return _t0836;
    } else {
      int _t0837 = 0;
      return _t0837;
    }
  }
}
globalInit {
  int _t0467 = 0;
  int _t0465 = 1;
  int _t0469 = extractFemItem(NumCell(Mesh), int, a0463);
  int _t0468 = prim -0024 (_t0469, _t0465);
  int[] _t046C = prim $range01C3 (_t0467, _t0468);
  Femdata: MeshCell[] _t046D = {};
  foreach _t046B in _t046C {
    Femdata: MeshCell _t046E = loadFem(MeshCell, a0463, _t046B);
    _t046D = prim @0010<Femdata: MeshCell> (_t046D, _t046E);
  }
  0cell_a0464 = _t046D;
  b046F = loadFem(Space, 0b046F_intermedateGlobal0470, a0463);
  c0471 = loadFem(FemFunc, 0c0471_intermedateGlobal0472, b046F);
  vec3 _t0815 = prim -0026<$[3]> (camAt0454, camEye0450);
  camDist0816 = prim |()|00B5<$[3]> (_t0815);
  camNearVsp0817 = prim +0017<$[]> (camNear045F, camDist0816);
  camFarVsp0818 = prim +0017<$[]> (camFar0460, camDist0816);
  vec3 _t0819 = prim -0026<$[3]> (camAt0454, camEye0450);
  camN081A = prim normalize0137<$[3]> (_t0819);
  vec3 _t081B = prim ×00BE (camN081A, camUp0458);
  camU081C = prim normalize0137<$[3]> (_t081B);
  camV081D = prim ×00BE (camU081C, camN081A);
  real _t081E = 0.314159265358979323846264338327950288e1;
  real _t081F = prim *0034 (camFOV045C, _t081E);
  real _t0820 = 0.36e3;
  real _t0821 = prim /0055 (_t081F, _t0820);
  real _t0822 = prim tan0179 (_t0821);
  camVmax0823 = prim *0034 (_t0822, camDist0816);
  real _t0824 = (real)iresU045D;
  real _t0825 = prim *0034 (camVmax0823, _t0824);
  real _t0826 = (real)iresV045E;
  camUmax0827 = prim /0055 (_t0825, _t0826);
  kernel _t0828 = tent;
  IMAGE1D<double[3]> img0829 = clamp(cmap0481);
  CM082A = prim ⊛0074<#0; %1; $[3]> (_t0828, img0829);
  tensor[3,3] _t082B = [camU081C, camV081D, camN081A];
  tensor[3,3] _t082C = prim transpose0145<%3; %3> (_t082B);
  vec3 _t082D = prim normalize0137<$[3]> (lightVsp048A);
  L082E = prim •00CE<$[3,3]; $[3]; $[3]> (_t082C, _t082D);
}
strand ray (int ui0838, int vi0839) {
  real rayU083A;
  real rayV0841;
  vec3 UV0848;
  vec3 rayOrig084B;
  vec3 rayVec084C;
  real camNearVsp0851;
  real camFarVsp0852;
  int offset0855;
  int len0858;
  int itter085D;
  int intersectionItter085E;
  int idx085F;
  vec2 interval0860;
  real s0861;
  real e0862;
  Femdata: MeshCell cc0863;
  Femdata: FuncCell fc0865;
  output real out0867;
  output vec4 rgba0868;
  output vec3[] locs086D;
  {
    real _t083B = prim unary -008B<$[]> (camUmax0827);
    real _t083C = -0.5e0;
    real _t083D = (real)ui0838;
    real _t083E = (real)iresU045D;
    real _t083F = 0.5e0;
    real _t0840 = prim -0026<$[]> (_t083E, _t083F);
    rayU083A = prim lerp0098<$[]> (_t083B, camUmax0827, _t083C, _t083D, _t0840);
    real _t0842 = prim unary -008B<$[]> (camVmax0823);
    real _t0843 = -0.5e0;
    real _t0844 = (real)vi0839;
    real _t0845 = (real)iresV045E;
    real _t0846 = 0.5e0;
    real _t0847 = prim -0026<$[]> (_t0845, _t0846);
    rayV0841 = prim lerp0098<$[]> (_t0842, camVmax0823, _t0843, _t0844, _t0847);
    vec3 _t0849 = prim *0036<$[3]> (rayU083A, camU081C);
    vec3 _t084A = prim *0036<$[3]> (rayV0841, camV081D);
    UV0848 = prim +0017<$[3]> (_t0849, _t084A);
    rayOrig084B = prim +0017<$[3]> (camEye0450, UV0848);
    real _t084D = 0.e0;
    real _t084E = 0.e0;
    real _t084F = 0.e0;
    vec3 _t0850 = [_t084D, _t084E, _t084F];
    rayVec084C = prim +0017<$[3]> (camN081A, _t0850);
    camNearVsp0851 = camNearVsp0817;
    camFarVsp0852 = camFarVsp0818;
    int _t0856 = prim *0033 (ui0838, iresV045E);
    int _t0857 = prim +0015 (_t0856, vi0839);
    offset0855 = prim $dynsub01C2<int> (indecies0475, _t0857);
    int _t0859 = prim *0033 (iresU045D, iresV045E);
    int _t085A = prim *0033 (ui0838, iresV045E);
    int _t085B = prim +0015 (_t0859, _t085A);
    int _t085C = prim +0015 (_t085B, vi0839);
    len0858 = prim $dynsub01C2<int> (indecies0475, _t085C);
    itter085D = 0;
    intersectionItter085E = 0;
    idx085F = prim +0015 (offset0855, itter085D);
    interval0860 = prim $dynsub01C2<vec2> (times0476, idx085F);
    s0861 = interval0860[0];
    e0862 = interval0860[1];
    int _t0864 = 0;
    cc0863 = prim $dynsub01C2<Femdata: MeshCell> (0cell_a0464, _t0864);
    fc0865 = func funcCell0810 (c0471, cc0863);
    out0867 = 0.e0;
    real _t0869 = 0.e0;
    real _t086A = 0.e0;
    real _t086B = 0.e0;
    real _t086C = 0.e0;
    rgba0868 = [_t0869, _t086A, _t086B, _t086C];
    vec3[0] _t086E = {};
    vec3[] _t086F = (vec3[])_t086E;
    locs086D = _t086F;
  }
  start
  {
    if debug048E {
      bool _t0870 = prim !=0086 (ui0838, debugU048F);
      if _t0870 {
        bool _t0871 = prim !=0086 (vi0839, debugV0490);
        if _t0871 {
          stabilize;
        }
      }
    }
    int _t0872 = 0;
    bool _t0873 = prim ==0082 (len0858, _t0872);
    if _t0873 {
      string _t0874 = "(find:)No intersection found:";
      string _t0875 = "/";
      string _t0876 = "\n";
      print (_t0874, ui0838, _t0875, vi0839, _t0876);
      stabilize;
    }
    int _t0877 = prim $dynsub01C2<int> (cells0477, idx085F);
    cc0863 = prim $dynsub01C2<Femdata: MeshCell> (0cell_a0464, _t0877);
    fc0865 = func funcCell0810 (c0471, cc0863);
  }
  update
  {
    string _t0878 = "Ui/Vi::";
    string _t0879 = "/";
    string _t087A = "\n";
    print (_t0878, ui0838, _t0879, vi0839, _t087A);
    string _t087B = "Interval:";
    vec2 _t087C = [s0861, e0862];
    string _t087D = "\n";
    print (_t087B, _t087C, _t087D);
    string _t087E = "inner itter:";
    string _t087F = "\n";
    print (_t087E, intersectionItter085E, _t087F);
    string _t0880 = "Outer itter:";
    string _t0881 = "\n";
    print (_t0880, itter085D, _t0881);
    real _t0882 = rayOrig084B[0];
    real _t0883 = rayOrig084B[1];
    vec2 _t0884 = [_t0882, _t0883];
    real _t0885 = rayVec084C[0];
    real _t0886 = rayVec084C[1];
    vec2 _t0887 = [_t0885, _t0886];
    vec2 _t0888 = prim *0036<$[2]> (s0861, _t0887);
    vec2 startRay0889 = prim +0017<$[2]> (_t0884, _t0888);
    real _t088A = rayOrig084B[0];
    real _t088B = rayOrig084B[1];
    vec2 _t088C = [_t088A, _t088B];
    real _t088D = rayVec084C[0];
    real _t088E = rayVec084C[1];
    vec2 _t088F = [_t088D, _t088E];
    vec2 _t0890 = prim *0036<$[2]> (e0862, _t088F);
    vec2 endRay0891 = prim +0017<$[2]> (_t088C, _t0890);
    Femdata: Mesh _t0892 = extractFem(cc0863, Mesh);
    Femdata: Mesh _t0893 = extractFem(cc0863, Mesh);
    int _t0894 = extractFemItem(CellIndex(MeshCell), int, cc0863);
    field(2)[2] _t0895 = femField(_t0892,_t0894,field(2)[2],InvTransform,_msh_newtonInverse04FC );
    vec2 invertA0896 = prim @00A5<#∞; %2; $[2]> (_t0895, startRay0889);
    Femdata: Mesh _t0897 = extractFem(cc0863, Mesh);
    Femdata: Mesh _t0898 = extractFem(cc0863, Mesh);
    int _t0899 = extractFemItem(CellIndex(MeshCell), int, cc0863);
    field(2)[2] _t089A = femField(_t0897,_t0899,field(2)[2],InvTransform,_msh_newtonInverse04FC );
    vec2 invertB089B = prim @00A5<#∞; %2; $[2]> (_t089A, endRay0891);
    string _t089C = "inverses:";
    string _t089D = "\n";
    print (_t089C, invertA0896, invertB089B, _t089D);
    Femdata: FemFunc _t089E = extractFem(fc0865, FemFunc);
    Femdata: FemFunc _t089F = extractFem(fc0865, FemFunc);
    Femdata: Space _t08A0 = extractFem(_t089F, Space);
    int _t08A1 = extractFemItem(CellIndex(FuncCell), int, fc0865);
    field(2)[] _t08A2 = femField(_t089E,_t08A1,field(2)[],refField,);
    real faVal08A3 = prim @00A5<#∞; %2; $[]> (_t08A2, invertA0896);
    real _t08A4 = rayVec084C[2];
    real _t08A5 = prim *0034 (_t08A4, s0861);
    real _t08A6 = prim -0026<$[]> (faVal08A3, _t08A5);
    real _t08A7 = rayOrig084B[2];
    real fa08A8 = prim -0026<$[]> (_t08A6, _t08A7);
    Femdata: FemFunc _t08A9 = extractFem(fc0865, FemFunc);
    Femdata: FemFunc _t08AA = extractFem(fc0865, FemFunc);
    Femdata: Space _t08AB = extractFem(_t08AA, Space);
    int _t08AC = extractFemItem(CellIndex(FuncCell), int, fc0865);
    field(2)[] _t08AD = femField(_t08A9,_t08AC,field(2)[],refField,);
    real _t08AE = prim @00A5<#∞; %2; $[]> (_t08AD, invertB089B);
    real _t08AF = rayVec084C[2];
    real _t08B0 = prim *0034 (_t08AF, e0862);
    real _t08B1 = prim -0026<$[]> (_t08AE, _t08B0);
    real _t08B2 = rayOrig084B[2];
    real fb08B3 = prim -0026<$[]> (_t08B1, _t08B2);
    string _t08B4 = "Vals:";
    vec2 _t08B5 = [fa08A8, fb08B3];
    string _t08B6 = "\n";
    print (_t08B4, _t08B5, _t08B6);
    real _t08B7 = prim -0026<$[]> (fa08A8, fb08B3);
    real _t08B8 = prim |()|00B5<$[]> (_t08B7);
    bool _t08B9 = prim <007A (_t08B8, intervalEps0474);
    if _t08B9 {
      real _t08BA = prim |()|00B5<$[]> (fa08A8);
      bool _t08BB = prim >0080 (_t08BA, intervalEps0474);
      if _t08BB {
        real _t08BC = prim |()|00B5<$[]> (fb08B3);
        bool _t08BD = prim >0080 (_t08BC, intervalEps0474);
        if _t08BD {
          string _t08BE = "warn\n";
          print (_t08BE);
          s0861 = prim +0017<$[]> (s0861, intervalEps0474);
          continue;
        }
      }
    }
    real _t08BF = prim *0034 (s0861, fb08B3);
    real _t08C0 = prim *0034 (e0862, fa08A8);
    real _t08C1 = prim -0026<$[]> (_t08BF, _t08C0);
    real _t08C2 = prim -0026<$[]> (fb08B3, fa08A8);
    real cup08C3 = prim /0055 (_t08C1, _t08C2);
    string _t08C4 = "Mid time:";
    string _t08C5 = "\n";
    print (_t08C4, cup08C3, _t08C5);
    real _t08C6 = rayOrig084B[0];
    real _t08C7 = rayOrig084B[1];
    vec2 _t08C8 = [_t08C6, _t08C7];
    real _t08C9 = rayVec084C[0];
    real _t08CA = rayVec084C[1];
    vec2 _t08CB = [_t08C9, _t08CA];
    vec2 _t08CC = prim *0036<$[2]> (cup08C3, _t08CB);
    vec2 midRay08CD = prim +0017<$[2]> (_t08C8, _t08CC);
    Femdata: Mesh _t08CE = extractFem(cc0863, Mesh);
    Femdata: Mesh _t08CF = extractFem(cc0863, Mesh);
    int _t08D0 = extractFemItem(CellIndex(MeshCell), int, cc0863);
    field(2)[2] _t08D1 = femField(_t08CE,_t08D0,field(2)[2],InvTransform,_msh_newtonInverse04FC );
    vec2 invertC08D2 = prim @00A5<#∞; %2; $[2]> (_t08D1, midRay08CD);
    Femdata: FemFunc _t08D3 = extractFem(fc0865, FemFunc);
    Femdata: FemFunc _t08D4 = extractFem(fc0865, FemFunc);
    Femdata: Space _t08D5 = extractFem(_t08D4, Space);
    int _t08D6 = extractFemItem(CellIndex(FuncCell), int, fc0865);
    field(2)[] _t08D7 = femField(_t08D3,_t08D6,field(2)[],refField,);
    real fmVal08D8 = prim @00A5<#∞; %2; $[]> (_t08D7, invertC08D2);
    real _t08D9 = rayVec084C[2];
    real _t08DA = prim *0034 (_t08D9, cup08C3);
    real _t08DB = prim -0026<$[]> (fmVal08D8, _t08DA);
    real _t08DC = rayOrig084B[2];
    real fm08DD = prim -0026<$[]> (_t08DB, _t08DC);
    string _t08DE = "all vals:";
    vec3 _t08DF = [fa08A8, fm08DD, fb08B3];
    string _t08E0 = "\n";
    print (_t08DE, _t08DF, _t08E0);
    int _t08E1 = 1;
    intersectionItter085E = prim +0015 (intersectionItter085E, _t08E1);
    int _t08E2 = func sign082F (fa08A8);
    int _t08E3 = func sign082F (fm08DD);
    int _t08E4 = prim *0033 (_t08E2, _t08E3);
    int _t08E5 = 0;
    bool _t08E6 = prim <0079 (_t08E4, _t08E5);
    if _t08E6 {
      e0862 = cup08C3;
    } else {
      int _t08E7 = func sign082F (fa08A8);
      int _t08E8 = func sign082F (fm08DD);
      int _t08E9 = prim *0033 (_t08E7, _t08E8);
      int _t08EA = 0;
      bool _t08EB = prim >007F (_t08E9, _t08EA);
      if _t08EB {
        s0861 = cup08C3;
      }
    }
    string _t08EC = "new interval:";
    vec2 _t08ED = [s0861, e0862];
    string _t08EE = "\n";
    print (_t08EC, _t08ED, _t08EE);
    real _t08EF = prim |()|00B5<$[]> (fm08DD);
    bool _t08F0 = prim <007A (_t08EF, zeroEps0473);
    if _t08F0 {
      real _t08F1 = 0.e0;
      real _t08F2 = 0.e0;
      vec2 grad08F3 = [_t08F1, _t08F2];
      real _t08F5 = prim |()|00B5<$[]> (fm08DD);
      bool _t08F6 = prim <007A (_t08F5, zeroEps0473);
      if _t08F6 {
        Femdata: FemFunc _t08F7 = extractFem(fc0865, FemFunc);
        Femdata: FemFunc _t08F8 = extractFem(fc0865, FemFunc);
        Femdata: Space _t08F9 = extractFem(_t08F8, Space);
        int _t08FA = extractFemItem(CellIndex(FuncCell), int, fc0865);
        field(2)[] _t08FB = femField(_t08F7,_t08FA,field(2)[],refField,);
        Femdata: Mesh _t08FC = extractFem(cc0863, Mesh);
        Femdata: Mesh _t08FD = extractFem(cc0863, Mesh);
        int _t08FE = extractFemItem(CellIndex(MeshCell), int, cc0863);
        field(2)[2] _t08FF = femField(_t08FC,_t08FE,field(2)[2],InvTransform,_msh_newtonInverse04FC );
        field(2)[] _t0900 = prim ∘0164<#∞; %2; $[]; %2; $[2]> (_t08FB, _t08FF);
        field(2)[2] _t0901 = prim ∇00A8<#∞; %2> (_t0900);
        grad08F3 = prim @00A5<#∞; %2; $[2]> (_t0901, midRay08CD);
        out0867 = fmVal08D8;
      }
      string _t0902 = "Out val:";
      string _t0903 = "\n";
      print (_t0902, out0867, _t0903);
      string _t0904 = "Grad val:";
      string _t0905 = "\n";
      print (_t0904, grad08F3, _t0905);
      real _t0906 = 0.1e1;
      real _t0907 = 0.1e1;
      real _t0908 = 0.1e1;
      vec3 mcol0909 = [_t0906, _t0907, _t0908];
      bool _t090A = prim !=0088 (cmin0482, cmax0483);
      if _t090A {
        int _t090B = -1;
        real _t090C = (real)_t090B;
        real _t090D = 0.1e1;
        real _t090E = prim lerp0098<$[]> (_t090C, _t090D, cmin0482, out0867, cmax0483);
        mcol0909 = prim @00A5<#0; %1; $[3]> (CM082A, _t090E);
      }
      if light0484 {
        real _t090F = grad08F3[0];
        real _t0910 = grad08F3[1];
        int _t0911 = -1;
        real _t0912 = (real)_t0911;
        vec3 _t0913 = [_t090F, _t0910, _t0912];
        vec3 N0914 = prim normalize0137<$[3]> (_t0913);
        vec3 _t0915 = prim normalize0137<$[3]> (rayVec084C);
        vec3 _t0916 = prim unary -008B<$[3]> (_t0915);
        vec3 _t0917 = prim +0017<$[3]> (_t0916, L082E);
        vec3 H0918 = prim normalize0137<$[3]> (_t0917);
        vec3 lightColor0919 = prim lerp0098<$[3]> (mcnear0478, mcfar047C, camNearVsp0851, cup08C3, camFarVsp0852);
        vec3 ambientTerm091A = prim *0036<$[3]> (phongKa0485, mcol0909);
        vec3 _t091B = prim modulate0129<%3> (mcol0909, lightColor0919);
        vec3 _t091C = prim *0036<$[3]> (phongKd0486, _t091B);
        real _t091D = 0.e0;
        real _t091E = prim •00CE<$[3]; $[3]; $[]> (N0914, L082E);
        real _t091F = prim max0125 (_t091D, _t091E);
        vec3 diffuse0920 = prim *0038<$[3]> (_t091C, _t091F);
        vec3 _t0921 = prim *0036<$[3]> (phongKs0487, lightColor0919);
        real _t0922 = 0.e0;
        real _t0923 = prim •00CE<$[3]; $[3]; $[]> (N0914, H0918);
        real _t0924 = prim max0125 (_t0922, _t0923);
        real _t0925 = prim ^0069 (_t0924, phongSp0488);
        vec3 specular0926 = prim *0038<$[3]> (_t0921, _t0925);
        vec3 _t0927 = prim +0017<$[3]> (ambientTerm091A, diffuse0920);
        vec3 fin0928 = prim +0017<$[3]> (_t0927, specular0926);
        real _t0929 = fin0928[0];
        real _t092A = fin0928[1];
        real _t092B = fin0928[2];
        real _t092C = 0.1e1;
        rgba0868 = [_t0929, _t092A, _t092B, _t092C];
      } else {
        real _t092D = mcol0909[0];
        real _t092E = mcol0909[1];
        real _t092F = mcol0909[2];
        real _t0930 = 0.1e1;
        rgba0868 = [_t092D, _t092E, _t092F, _t0930];
      }
      vec3 _t0931 = prim *0038<$[3]> (rayVec084C, cup08C3);
      vec3 _t0932 = prim +0017<$[3]> (_t0931, rayOrig084B);
      vec3[1] _t0933 = {_t0932};
      vec3[] _t0934 = (vec3[])_t0933;
      locs086D = _t0934;
      stabilize;
    }
    int _t0935 = 32;
    bool _t0936 = prim >007F (intersectionItter085E, _t0935);
    if _t0936 {
      intersectionItter085E = 0;
      int _t0937 = 1;
      itter085D = prim +0015 (itter085D, _t0937);
      bool _t0938 = prim >=007D (itter085D, len0858);
      if _t0938 {
        string _t0939 = "No intersection found\n";
        print (_t0939);
        string _t093A = "Fin pixel=============================\n";
        print (_t093A);
        stabilize;
      }
      int _t093B = prim +0015 (offset0855, itter085D);
      interval0860 = prim $dynsub01C2<vec2> (times0476, _t093B);
      int _t093C = prim +0015 (offset0855, itter085D);
      int _t093D = prim $dynsub01C2<int> (cells0477, _t093C);
      cc0863 = prim $dynsub01C2<Femdata: MeshCell> (0cell_a0464, _t093D);
      s0861 = interval0860[0];
      e0862 = interval0860[1];
      fc0865 = func funcCell0810 (c0471, cc0863);
      string _t093E = "++++++++++++++++Next interval!+++++++++++++++++++\n";
      print (_t093E);
      continue;
    } else {
      string _t093F = "---------------\n";
      print (_t093F);
    }
  }
}
grid(2) {
  int _t0940 = 0;
  int _t0941 = 1;
  int _t0942 = prim -0024 (iresU045D, _t0941);
  int[] _t0943 = prim $range01C3 (_t0940, _t0942);
  foreach vi0949 in _t0943 {
    int _t0944 = 0;
    int _t0945 = 1;
    int _t0946 = prim -0024 (iresV045E, _t0945);
    int[] _t0947 = prim $range01C3 (_t0944, _t0946);
    foreach ui0948 in _t0947 {
      new ray (ui0948, vi0949);
    }
  }
}
/* Program end */
/* Simplified Program (after after map-reduce-fusion) start */
properties: GlobalInit,StrandArray,HasStartMethod,ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[]),HasInputs,HasGlobals
input real isoval044E = <default>;
input real thick044F = <default>;
input vec3 camEye0450 = <default>;
input vec3 camAt0454 = <default>;
input vec3 camUp0458 = <default>;
input real camFOV045C = <default>;
input int iresU045D = <default>;
input int iresV045E = <default>;
input real camNear045F = <default>;
input real camFar0460 = <default>;
input real refStep0461 = <default>;
input real rayStep0462 = <default>;
input FemData:Mesh a0463;
input FemData:Space 0b046F_intermedateGlobal0470;
input FemData:FemFunc 0c0471_intermedateGlobal0472;
input real zeroEps0473 = <default>;
input real intervalEps0474 = <default>;
input int[] indecies0475;
input vec2[] times0476;
input int[] cells0477;
input vec3 mcnear0478("material color at near clipping plane (for depth cuing)") = <default>;
input vec3 mcfar047C("material color at far clipping plane") = <default>;
input image(1)[3] cmap0481("univariate colormap") = image("/home/teocollin/gitcode/diderot/tests/lipRay/find/cmap.nrrd");
input real cmin0482("value mapped to min end of colormap") = <default>;
input real cmax0483("value mapped to max end of colormap. By default cmin==cmax==0, which disables this colormapping") = <default>;
input bool light0484 = <default>;
input real phongKa0485("Blinn-Phong ambient component") = <default>;
input real phongKd0486("Blinn-Phong diffuse component") = <default>;
input real phongKs0487("Blinn-Phong specular component") = <default>;
input real phongSp0488("Blinn-Phong specularity exponent") = <default>;
input real maxAlpha0489("maximum opacity on rendered surface") = <default>;
input vec3 lightVsp048A = <default>;
input bool debug048E = <default>;
input int debugU048F = <default>;
input int debugV0490 = <default>;
constants {
  isoval044E = 0.2e0;
  thick044F = 0.7e-1;
  real _t0451 = 0.3e1;
  real _t0452 = -0.3e1;
  real _t0453 = 0.3e1;
  camEye0450 = [_t0451, _t0452, _t0453];
  real _t0455 = 0.5e0;
  real _t0456 = 0.5e0;
  real _t0457 = 0.5e0;
  camAt0454 = [_t0455, _t0456, _t0457];
  real _t0459 = 0.e0;
  real _t045A = 0.e0;
  real _t045B = 0.1e1;
  camUp0458 = [_t0459, _t045A, _t045B];
  camFOV045C = 0.137e2;
  iresU045D = 10;
  iresV045E = 10;
  camNear045F = -0.2e1;
  camFar0460 = 0.5e1;
  refStep0461 = 0.1e1;
  rayStep0462 = 0.1e-1;
  zeroEps0473 = 0.1e-10;
  intervalEps0474 = 0.1e-10;
  real _t0479 = 0.1e1;
  real _t047A = 0.1e1;
  real _t047B = 0.1e1;
  mcnear0478 = [_t0479, _t047A, _t047B];
  real _t047D = 0.1e1;
  real _t047E = 0.1e1;
  real _t047F = 0.1e1;
  mcfar047C = [_t047D, _t047E, _t047F];
  cmin0482 = 0.e0;
  cmax0483 = 0.1e1;
  light0484 = false;
  phongKa0485 = 0.5e0;
  phongKd0486 = 0.5e0;
  phongKs0487 = 0.e0;
  phongSp0488 = 0.6e2;
  maxAlpha0489 = 0.1e1;
  real _t048B = 0.e0;
  real _t048C = 0.369e1;
  real _t048D = 0.153e1;
  lightVsp048A = [_t048B, _t048C, _t048D];
  debug048E = false;
  debugU048F = 8;
  debugV0490 = 2;
}
global Femdata: MeshCell[] 0cell_a0464;
global Femdata: Space b046F;
global Femdata: FemFunc c0471;
global real camDist0816;
global real camNearVsp0817;
global real camFarVsp0818;
global vec3 camN081A;
global vec3 camU081C;
global vec3 camV081D;
global real camVmax0823;
global real camUmax0827;
global field#0(1)[3] CM082A;
global vec3 L082E;
function bool#0 !=0491 (Femdata: MeshCell cell10492, Femdata: MeshCell cell10493)
{
  int _t0494 = extractFemItem(CellIndex(Mesh), int, cell10492);
  int _t0495 = extractFemItem(CellIndex(Mesh), int, cell10493);
  bool _t0496 = prim !=0086 (_t0494, _t0495);
  return _t0496;
}
function bool#0 ==0497 (Femdata: MeshCell cell10492, Femdata: MeshCell cell10493)
{
  int _t0498 = extractFemItem(CellIndex(Mesh), int, cell10492);
  int _t0499 = extractFemItem(CellIndex(Mesh), int, cell10493);
  bool _t049A = prim ==0082 (_t0498, _t0499);
  return _t049A;
}
function Femdata: MeshPos#0 findPos049B (Femdata: Mesh mesh049C, vec2 pos049D)
{
  real _t049E = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t049F = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  xn04A0 = [_t049E, _t049F];
  newtonInt04A1 = 0;
  cellInt04A2 = extractFemItem(StartCell(Mesh), int, mesh049C);
  int _t04A3 = extractFemItem(NumCell(Mesh), int, mesh049C);
  int _t04A4 = 1;
  numCell04A5 = prim -0024 (_t04A3, _t04A4);
  yayCells04A6 = extractFemItem2(NearbyCell(File=spat.in)(Mesh), vec2, mesh049C, pos049D : vec2);
  foreach cellItter04A7 in yayCells04A6 {
    cellInt04A2 = cellItter04A7;
    field(2)[2] _t04A8 = femField(mesh049C,cellInt04A2,field(2)[2],Transform,);
    field(2)[2,2] _t04A9 = prim ∇⊗00AD<#∞; %2; $[]; %2> (_t04A8);
    field(2)[2,2] _t04AA = prim inv015B<#∞; %2> (_t04A9);
    real _t04AB = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    real _t04AC = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    vec2 _t04AD = [_t04AB, _t04AC];
    A04AE = prim @00A5<#∞; %2; $[2,2]> (_t04AA, _t04AD);
    int _t04AF = 0;
    int _t04B0 = 16;
    int[] _t04B1 = prim $range01C3 (_t04AF, _t04B0);
    foreach newtonItter04D4 in _t04B1 {
      field(2)[2] _t04B2 = femField(mesh049C,cellInt04A2,field(2)[2],Transform,);
      field(2)[2] _t04B3 = prim -002E<#∞; %2; $[2]> (_t04B2, pos049D);
      field(2)[2] _t04B4 = prim •00D4<#∞; %2; $[2,2]; $[2]; $[2]> (A04AE, _t04B3);
      delta04B5 = prim @00A5<#∞; %2; $[2]> (_t04B4, xn04A0);
      xn04A0 = prim -0026<$[2]> (xn04A0, delta04B5);
      real _t04B6 = 0.1e-7;
      real _t04B7 = 0.1e-7;
      real _t04B8 = prim *0034 (_t04B6, _t04B7);
      real _t04B9 = prim •00CE<$[2]; $[2]; $[]> (delta04B5, delta04B5);
      bool _t04BA = prim >=007E (_t04B8, _t04B9);
      if _t04BA {
        real _t04BB = 0.1e1;
        real _t04BC = 0.1e-8;
        real _t04BD = prim +0017<$[]> (_t04BB, _t04BC);
        real _t04BE = 0.1e1;
        real _t04BF = 0.1e1;
        vec2 _t04C0 = [_t04BE, _t04BF];
        real _t04C1 = prim •00CE<$[2]; $[2]; $[]> (_t04C0, xn04A0);
        bool _t04C2 = prim >0080 (_t04BD, _t04C1);
        real _t04C3 = 0.1e-8;
        real _t04C4 = 0.1e-8;
        vec2 _t04C5 = [_t04C3, _t04C4];
        vec2 _t04C6 = prim +0017<$[2]> (_t04C5, xn04A0);
        real _t04C7 = _t04C6[0];
        real _t04C8 = -0.e0;
        bool _t04C9 = prim >0080 (_t04C7, _t04C8);
        real _t04CA = 0.1e-8;
        real _t04CB = 0.1e-8;
        vec2 _t04CC = [_t04CA, _t04CB];
        vec2 _t04CD = prim +0017<$[2]> (_t04CC, xn04A0);
        real _t04CE = _t04CD[1];
        real _t04CF = -0.e0;
        bool _t04D0 = prim >0080 (_t04CE, _t04CF);
        bool _t04D1 = prim $and01C4 (_t04C9, _t04D0);
        bool _t04D2 = prim $and01C4 (_t04C2, _t04D1);
        if _t04D2 {
          Femdata: MeshPos _t04D3 = extractFemItemN((mesh049C, cellInt04A2, xn04A0, pos049D),AllBuild(MeshPos),);
          return _t04D3;
        }
      }
    }
  }
  string _t04D5 = "Bad end 2";
  string _t04D6 = "\n";
  print (_t04D5, _t04D6);
  Femdata: MeshPos _t04D7 = extractFemItemN((mesh049C),InvalidBuild(MeshPos),);
  return _t04D7;
}
function Femdata: RefCell#0 refcell04D8 (Femdata: Mesh arg004D9)
{
  Femdata: RefCell _t04DA = extractFemItem(RefCell(Mesh), Femdata: RefCell, arg004D9);
  return _t04DA;
}
function Femdata: MeshCell[]#0 cells04DB (Femdata: Mesh arg004DC)
{
  Femdata: MeshCell[] _t04DD = extractFemItem(Cells(Mesh), Femdata: MeshCell[], arg004DC);
  return _t04DD;
}
function Femdata: MeshCell[]#0 cells04DE (Femdata: Mesh arg004DC)
{
  int _t04DF = 0;
  int _t04E0 = extractFemItem(NumCell(Mesh), int, arg004DC);
  int[] _t04E1 = prim $range01C3 (_t04DF, _t04E0);
  Femdata: MeshCell[] accum04E4 = {};
  foreach i04E2 in _t04E1 {
    Femdata: MeshCell _t04E3 = loadFem(MeshCell, arg004DC, i04E2);
    accum04E4 = prim @0010<Femdata: MeshCell> (accum04E4, _t04E3);
  }
  return accum04E4;
}
function int#0 numCell04E5 (Femdata: Mesh arg004D9)
{
  int _t04E6 = extractFemItem(NumCell(Mesh), int, arg004D9);
  return _t04E6;
}
function tensor[2,2,2,2]#0 msh_transform_304E7 (vec2 pos04E8, int cell04E9, Femdata: Mesh mesh04EA)
{
  field(2)[2] _t04EB = femField(mesh04EA,cell04E9,field(2)[2],Transform,);
  field(2)[2,2] _t04EC = prim ∇⊗00AD<#∞; %2; $[]; %2> (_t04EB);
  field(2)[2,2,2] _t04ED = prim ∇⊗00AD<#∞; %2; $[2]; %2> (_t04EC);
  field(2)[2,2,2,2] _t04EE = prim ∇⊗00AD<#∞; %2; $[2,2]; %2> (_t04ED);
  tensor[2,2,2,2] _t04EF = prim @00A5<#∞; %2; $[2,2,2,2]> (_t04EE, pos04E8);
  return _t04EF;
}
function tensor[2,2,2]#0 msh_transform_204F0 (vec2 pos04E8, int cell04E9, Femdata: Mesh mesh04EA)
{
  field(2)[2] _t04F1 = femField(mesh04EA,cell04E9,field(2)[2],Transform,);
  field(2)[2,2] _t04F2 = prim ∇⊗00AD<#∞; %2; $[]; %2> (_t04F1);
  field(2)[2,2,2] _t04F3 = prim ∇⊗00AD<#∞; %2; $[2]; %2> (_t04F2);
  tensor[2,2,2] _t04F4 = prim @00A5<#∞; %2; $[2,2,2]> (_t04F3, pos04E8);
  return _t04F4;
}
function tensor[2,2]#0 msh_transform_104F5 (vec2 pos04E8, int cell04E9, Femdata: Mesh mesh04EA)
{
  field(2)[2] _t04F6 = femField(mesh04EA,cell04E9,field(2)[2],Transform,);
  field(2)[2,2] _t04F7 = prim ∇⊗00AD<#∞; %2; $[]; %2> (_t04F6);
  tensor[2,2] _t04F8 = prim @00A5<#∞; %2; $[2,2]> (_t04F7, pos04E8);
  return _t04F8;
}
function vec2#2 msh_transform_004F9 (vec2 pos04E8, int cell04E9, Femdata: Mesh mesh04EA)
{
  field(2)[2] _t04FA = femField(mesh04EA,cell04E9,field(2)[2],Transform,);
  vec2 _t04FB = prim @00A5<#∞; %2; $[2]> (_t04FA, pos04E8);
  return _t04FB;
}
function Femdata: MeshPos#4 _msh_newtonInverse04FC (vec2 pos04FD, int cellInt04FE, Femdata: Mesh mesh04FF)
{
  real _t0500 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t0501 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  xn0502 = [_t0500, _t0501];
  field(2)[2] _t0503 = femField(mesh04FF,cellInt04FE,field(2)[2],Transform,);
  field(2)[2,2] _t0504 = prim ∇⊗00AD<#∞; %2; $[]; %2> (_t0503);
  field(2)[2,2] _t0505 = prim inv015B<#∞; %2> (_t0504);
  real _t0506 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t0507 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  vec2 _t0508 = [_t0506, _t0507];
  A0509 = prim @00A5<#∞; %2; $[2,2]> (_t0505, _t0508);
  int _t050A = 0;
  int _t050B = 16;
  int[] _t050C = prim $range01C3 (_t050A, _t050B);
  foreach itter0530 in _t050C {
    field(2)[2] _t050D = femField(mesh04FF,cellInt04FE,field(2)[2],Transform,);
    field(2)[2] _t050E = prim -002E<#∞; %2; $[2]> (_t050D, pos04FD);
    field(2)[2] _t050F = prim •00D4<#∞; %2; $[2,2]; $[2]; $[2]> (A0509, _t050E);
    delta0510 = prim @00A5<#∞; %2; $[2]> (_t050F, xn0502);
    xn0502 = prim -0026<$[2]> (xn0502, delta0510);
    real _t0511 = 0.1e-7;
    real _t0512 = 0.1e-7;
    real _t0513 = prim *0034 (_t0511, _t0512);
    real _t0514 = prim •00CE<$[2]; $[2]; $[]> (delta0510, delta0510);
    bool _t0515 = prim >=007E (_t0513, _t0514);
    if _t0515 {
      real _t0516 = 0.1e1;
      real _t0517 = 0.1e-8;
      real _t0518 = prim +0017<$[]> (_t0516, _t0517);
      real _t0519 = 0.1e1;
      real _t051A = 0.1e1;
      vec2 _t051B = [_t0519, _t051A];
      real _t051C = prim •00CE<$[2]; $[2]; $[]> (_t051B, xn0502);
      bool _t051D = prim >0080 (_t0518, _t051C);
      real _t051E = 0.1e-8;
      real _t051F = 0.1e-8;
      vec2 _t0520 = [_t051E, _t051F];
      vec2 _t0521 = prim +0017<$[2]> (_t0520, xn0502);
      real _t0522 = _t0521[0];
      real _t0523 = -0.e0;
      bool _t0524 = prim >0080 (_t0522, _t0523);
      real _t0525 = 0.1e-8;
      real _t0526 = 0.1e-8;
      vec2 _t0527 = [_t0525, _t0526];
      vec2 _t0528 = prim +0017<$[2]> (_t0527, xn0502);
      real _t0529 = _t0528[1];
      real _t052A = -0.e0;
      bool _t052B = prim >0080 (_t0529, _t052A);
      bool _t052C = prim $and01C4 (_t0524, _t052B);
      bool _t052D = prim $and01C4 (_t051D, _t052C);
      if _t052D {
        Femdata: MeshPos _t052E = extractFemItemN((mesh04FF, cellInt04FE, xn0502, pos04FD),AllBuild(MeshPos),);
        return _t052E;
      } else {
        Femdata: MeshPos _t052F = extractFemItemN((mesh04FF),InvalidBuild(MeshPos),);
        return _t052F;
      }
    }
  }
  Femdata: MeshPos _t0531 = extractFemItemN((mesh04FF),InvalidBuild(MeshPos),);
  return _t0531;
}
function Femdata: MeshPos#0 _mesh_pos_msh_build_world_pos0532 (Femdata: MeshPos pos0533)
{
  bool _t0534 = extractFemItem(WorldTest(MeshPos), bool, pos0533);
  if _t0534 {
    vec2 _t0535 = extractFemItem(RefPos(MeshPos), vec2, pos0533);
    int _t0536 = extractFemItem(CellIndex(MeshPos), int, pos0533);
    Femdata: Mesh _t0537 = extractFem(pos0533, Mesh);
    vec2 _t0538 = func msh_transform_004F9 (_t0535, _t0536, _t0537);
    Femdata: MeshPos _t0539 = extractFemItemN((pos0533, _t0538),NewWorld(MeshPos),);
    return _t0539;
  } else {
    return pos0533;
  }
}
function vec2#0 worldPos053A (Femdata: MeshPos pos0533)
{
  vec2 _t053B = extractFemItem(RefPos(MeshPos), vec2, pos0533);
  int _t053C = extractFemItem(CellIndex(MeshPos), int, pos0533);
  Femdata: Mesh _t053D = extractFem(pos0533, Mesh);
  vec2 _t053E = func msh_transform_004F9 (_t053B, _t053C, _t053D);
  return _t053E;
}
function Femdata: MeshPos#0 $exitPos053F (Femdata: Mesh mesh0540, int cellId0541, vec2 refPos0542, vec2 dPos0543, real[2] time0544)
{
  int _t0545 = -1;
  real _t0546 = time0544[1];
  int _t0547 = prim $r2i01B7 (_t0546);
  int[2] _t0549 = func nextCell40548 (_t0547, cellId0541, mesh0540);
  int _t054A = 0;
  int _t054B = prim $sub01C0<int; %2> (_t0549, _t054A);
  bool _t054C = prim !=0086 (_t0545, _t054B);
  if _t054C {
    real _t054D = time0544[1];
    int _t054E = prim $r2i01B7 (_t054D);
    int[2] _t054F = func nextCell40548 (_t054E, cellId0541, mesh0540);
    int _t0550 = 0;
    int _t0551 = prim $sub01C0<int; %2> (_t054F, _t0550);
    real _t0552 = 0.1e1;
    real _t0553 = 0.e0;
    vec2 _t0554 = [_t0552, _t0553];
    real _t0555 = 0.e0;
    real _t0556 = 0.e0;
    vec2 _t0557 = [_t0555, _t0556];
    real _t0558 = 0.e0;
    real _t0559 = 0.e0;
    vec2 _t055A = [_t0558, _t0559];
    vec2[3] _t055B = {_t0554, _t0557, _t055A};
    real _t055C = time0544[1];
    int _t055D = prim $r2i01B7 (_t055C);
    int[2] _t055E = func nextCell40548 (_t055D, cellId0541, mesh0540);
    int _t055F = 1;
    int _t0560 = prim $sub01C0<int; %2> (_t055E, _t055F);
    vec2 _t0561 = prim $sub01C0<vec2; %3> (_t055B, _t0560);
    real _t0562 = -0.1e1;
    real _t0563 = 0.1e1;
    vec2 _t0564 = [_t0562, _t0563];
    real _t0565 = 0.e0;
    real _t0566 = 0.1e1;
    vec2 _t0567 = [_t0565, _t0566];
    real _t0568 = 0.1e1;
    real _t0569 = 0.e0;
    vec2 _t056A = [_t0568, _t0569];
    vec2[3] _t056B = {_t0564, _t0567, _t056A};
    real _t056C = time0544[1];
    int _t056D = prim $r2i01B7 (_t056C);
    int[2] _t056E = func nextCell40548 (_t056D, cellId0541, mesh0540);
    int _t056F = 1;
    int _t0570 = prim $sub01C0<int; %2> (_t056E, _t056F);
    vec2 _t0571 = prim $sub01C0<vec2; %3> (_t056B, _t0570);
    real _t0572 = time0544[0];
    vec2 _t0573 = prim *0036<$[2]> (_t0572, dPos0543);
    vec2 _t0574 = prim +0017<$[2]> (_t0573, refPos0542);
    real _t0575 = _t0574[0];
    real _t0576 = time0544[0];
    vec2 _t0577 = prim *0036<$[2]> (_t0576, dPos0543);
    vec2 _t0578 = prim +0017<$[2]> (_t0577, refPos0542);
    real _t0579 = _t0578[1];
    real[2] _t057A = {_t0575, _t0579};
    int _t057B = 1;
    int _t057C = 1;
    int _t057D = 0;
    int[3] _t057E = {_t057B, _t057C, _t057D};
    real _t057F = time0544[1];
    int _t0580 = prim $r2i01B7 (_t057F);
    int _t0581 = prim $sub01C0<int; %3> (_t057E, _t0580);
    real _t0582 = prim $sub01C0<real; %2> (_t057A, _t0581);
    real _t0583 = 0.1e1;
    real _t0584 = 0.e0;
    real[2] _t0585 = {_t0583, _t0584};
    real _t0586 = 0.e0;
    real _t0587 = 0.e0;
    real[2] _t0588 = {_t0586, _t0587};
    real _t0589 = 0.e0;
    real _t058A = 0.e0;
    real[2] _t058B = {_t0589, _t058A};
    real[2][3] _t058C = {_t0585, _t0588, _t058B};
    real _t058D = time0544[1];
    int _t058E = prim $r2i01B7 (_t058D);
    real[2] _t058F = prim $sub01C0<real[2]; %3> (_t058C, _t058E);
    int _t0590 = 1;
    int _t0591 = 1;
    int _t0592 = 0;
    int[3] _t0593 = {_t0590, _t0591, _t0592};
    real _t0594 = time0544[1];
    int _t0595 = prim $r2i01B7 (_t0594);
    int _t0596 = prim $sub01C0<int; %3> (_t0593, _t0595);
    real _t0597 = prim $sub01C0<real; %2> (_t058F, _t0596);
    real _t0598 = prim -0026<$[]> (_t0582, _t0597);
    real _t0599 = -0.1e1;
    real _t059A = 0.1e1;
    real[2] _t059B = {_t0599, _t059A};
    real _t059C = 0.e0;
    real _t059D = 0.1e1;
    real[2] _t059E = {_t059C, _t059D};
    real _t059F = 0.1e1;
    real _t05A0 = 0.e0;
    real[2] _t05A1 = {_t059F, _t05A0};
    real[2][3] _t05A2 = {_t059B, _t059E, _t05A1};
    real _t05A3 = time0544[1];
    int _t05A4 = prim $r2i01B7 (_t05A3);
    real[2] _t05A5 = prim $sub01C0<real[2]; %3> (_t05A2, _t05A4);
    int _t05A6 = 1;
    int _t05A7 = 1;
    int _t05A8 = 0;
    int[3] _t05A9 = {_t05A6, _t05A7, _t05A8};
    real _t05AA = time0544[1];
    int _t05AB = prim $r2i01B7 (_t05AA);
    int _t05AC = prim $sub01C0<int; %3> (_t05A9, _t05AB);
    real _t05AD = prim $sub01C0<real; %2> (_t05A5, _t05AC);
    real _t05AE = prim /0055 (_t0598, _t05AD);
    vec2 _t05AF = prim *0038<$[2]> (_t0571, _t05AE);
    vec2 _t05B0 = prim +0017<$[2]> (_t0561, _t05AF);
    real _t05B1 = time0544[1];
    int _t05B2 = prim $r2i01B7 (_t05B1);
    int[2] _t05B3 = func nextCell40548 (_t05B2, cellId0541, mesh0540);
    int _t05B4 = 1;
    int _t05B5 = prim $sub01C0<int; %2> (_t05B3, _t05B4);
    Femdata: MeshPos _t05B6 = extractFemItemN((mesh0540, _t0551, _t05B0, _t05B5),RefBuild(Mesh),);
    return _t05B6;
  } else {
    real _t05B7 = time0544[0];
    vec2 _t05B8 = prim *0036<$[2]> (_t05B7, dPos0543);
    vec2 _t05B9 = prim +0017<$[2]> (_t05B8, refPos0542);
    Femdata: MeshPos _t05BA = extractFemItemN((mesh0540, _t05B9),InvalidBuildBoundary(MeshPos),);
    return _t05BA;
  }
}
function int[2]#5 nextCell40548 (int faceIdx05BB, int cell05BC, Femdata: Mesh mesh05BD)
{
  int _t05BE = 6;
  int _t05BF = prim *0033 (cell05BC, _t05BE);
  int _t05C0 = 2;
  int _t05C1 = prim *0033 (faceIdx05BB, _t05C0);
  int _t05C2 = prim +0015 (_t05BF, _t05C1);
  int[2] _t05C3 = extractFemItemN((mesh05BD, _t05C2),CellFaceCell(Mesh),);
  return _t05C3;
}
function vec2#0 _enter05C4 (vec2 refPos05C5, vec2 dPos05C6)
{
  real time05C7 = +inf;
  int face05C8 = -1;
  real faceTime05C9 = -inf;
  real _t05CA = 0.1e1;
  real _t05CB = 0.e0;
  vec2 _t05CC = [_t05CA, _t05CB];
  vec2 _t05CD = prim -0026<$[2]> (_t05CC, refPos05C5);
  real _t05CE = -0.1e1;
  real _t05CF = 0.1e1;
  vec2 _t05D0 = [_t05CE, _t05CF];
  real _t05D1 = -0.1e1;
  real _t05D2 = 0.1e1;
  vec2 _t05D3 = [_t05D1, _t05D2];
  real _t05D4 = prim ×00BD (dPos05C6, _t05D3);
  vec2 _t05D5 = prim /0057<$[2]> (_t05D0, _t05D4);
  real _t05D6 = prim ×00BD (_t05CD, _t05D5);
  real _t05D7 = -0.1e-15;
  bool _t05D8 = prim >=007E (_t05D6, _t05D7);
  real _t05D9 = 0.1e1;
  real _t05DA = 0.e0;
  vec2 _t05DB = [_t05D9, _t05DA];
  vec2 _t05DC = prim -0026<$[2]> (_t05DB, refPos05C5);
  real _t05DD = -0.1e1;
  real _t05DE = 0.1e1;
  vec2 _t05DF = [_t05DD, _t05DE];
  real _t05E0 = -0.1e1;
  real _t05E1 = 0.1e1;
  vec2 _t05E2 = [_t05E0, _t05E1];
  real _t05E3 = prim ×00BD (dPos05C6, _t05E2);
  vec2 _t05E4 = prim /0057<$[2]> (_t05DF, _t05E3);
  real _t05E5 = prim ×00BD (_t05DC, _t05E4);
  bool _t05E6 = prim >0080 (time05C7, _t05E5);
  real _t05E7 = -0.1e1;
  real _t05E8 = 0.1e1;
  vec2 _t05E9 = [_t05E7, _t05E8];
  real _t05EA = prim ×00BD (dPos05C6, _t05E9);
  real _t05EB = prim |()|00B5<$[]> (_t05EA);
  real _t05EC = 0.1e-20;
  bool _t05ED = prim >=007E (_t05EB, _t05EC);
  bool _t05EE = prim $and01C4 (_t05E6, _t05ED);
  bool _t05EF = prim $and01C4 (_t05D8, _t05EE);
  if _t05EF {
    real _t05F0 = 0.1e1;
    real _t05F1 = 0.1e-8;
    real _t05F2 = prim +0017<$[]> (_t05F0, _t05F1);
    real _t05F3 = 0.1e1;
    real _t05F4 = 0.1e1;
    vec2 _t05F5 = [_t05F3, _t05F4];
    real _t05F6 = 0.1e1;
    real _t05F7 = 0.e0;
    vec2 _t05F8 = [_t05F6, _t05F7];
    vec2 _t05F9 = prim -0026<$[2]> (_t05F8, refPos05C5);
    real _t05FA = -0.1e1;
    real _t05FB = 0.1e1;
    vec2 _t05FC = [_t05FA, _t05FB];
    real _t05FD = -0.1e1;
    real _t05FE = 0.1e1;
    vec2 _t05FF = [_t05FD, _t05FE];
    real _t0600 = prim ×00BD (dPos05C6, _t05FF);
    vec2 _t0601 = prim /0057<$[2]> (_t05FC, _t0600);
    real _t0602 = prim ×00BD (_t05F9, _t0601);
    vec2 _t0603 = prim *0038<$[2]> (dPos05C6, _t0602);
    vec2 _t0604 = prim +0017<$[2]> (refPos05C5, _t0603);
    real _t0605 = prim •00CE<$[2]; $[2]; $[]> (_t05F5, _t0604);
    bool _t0606 = prim >0080 (_t05F2, _t0605);
    real _t0607 = 0.1e-8;
    real _t0608 = 0.1e-8;
    vec2 _t0609 = [_t0607, _t0608];
    real _t060A = 0.1e1;
    real _t060B = 0.e0;
    vec2 _t060C = [_t060A, _t060B];
    vec2 _t060D = prim -0026<$[2]> (_t060C, refPos05C5);
    real _t060E = -0.1e1;
    real _t060F = 0.1e1;
    vec2 _t0610 = [_t060E, _t060F];
    real _t0611 = -0.1e1;
    real _t0612 = 0.1e1;
    vec2 _t0613 = [_t0611, _t0612];
    real _t0614 = prim ×00BD (dPos05C6, _t0613);
    vec2 _t0615 = prim /0057<$[2]> (_t0610, _t0614);
    real _t0616 = prim ×00BD (_t060D, _t0615);
    vec2 _t0617 = prim *0038<$[2]> (dPos05C6, _t0616);
    vec2 _t0618 = prim +0017<$[2]> (refPos05C5, _t0617);
    vec2 _t0619 = prim +0017<$[2]> (_t0609, _t0618);
    real _t061A = _t0619[0];
    real _t061B = -0.e0;
    bool _t061C = prim >0080 (_t061A, _t061B);
    real _t061D = 0.1e-8;
    real _t061E = 0.1e-8;
    vec2 _t061F = [_t061D, _t061E];
    real _t0620 = 0.1e1;
    real _t0621 = 0.e0;
    vec2 _t0622 = [_t0620, _t0621];
    vec2 _t0623 = prim -0026<$[2]> (_t0622, refPos05C5);
    real _t0624 = -0.1e1;
    real _t0625 = 0.1e1;
    vec2 _t0626 = [_t0624, _t0625];
    real _t0627 = -0.1e1;
    real _t0628 = 0.1e1;
    vec2 _t0629 = [_t0627, _t0628];
    real _t062A = prim ×00BD (dPos05C6, _t0629);
    vec2 _t062B = prim /0057<$[2]> (_t0626, _t062A);
    real _t062C = prim ×00BD (_t0623, _t062B);
    vec2 _t062D = prim *0038<$[2]> (dPos05C6, _t062C);
    vec2 _t062E = prim +0017<$[2]> (refPos05C5, _t062D);
    vec2 _t062F = prim +0017<$[2]> (_t061F, _t062E);
    real _t0630 = _t062F[1];
    real _t0631 = -0.e0;
    bool _t0632 = prim >0080 (_t0630, _t0631);
    bool _t0633 = prim $and01C4 (_t061C, _t0632);
    bool _t0634 = prim $and01C4 (_t0606, _t0633);
    if _t0634 {
      real _t0635 = 0.1e1;
      real _t0636 = 0.e0;
      vec2 _t0637 = [_t0635, _t0636];
      vec2 _t0638 = prim -0026<$[2]> (_t0637, refPos05C5);
      real _t0639 = -0.1e1;
      real _t063A = 0.1e1;
      vec2 _t063B = [_t0639, _t063A];
      real _t063C = -0.1e1;
      real _t063D = 0.1e1;
      vec2 _t063E = [_t063C, _t063D];
      real _t063F = prim ×00BD (dPos05C6, _t063E);
      vec2 _t0640 = prim /0057<$[2]> (_t063B, _t063F);
      time05C7 = prim ×00BD (_t0638, _t0640);
      face05C8 = 0;
    }
  }
  real _t0641 = 0.e0;
  real _t0642 = 0.e0;
  vec2 _t0643 = [_t0641, _t0642];
  vec2 _t0644 = prim -0026<$[2]> (_t0643, refPos05C5);
  real _t0645 = 0.e0;
  real _t0646 = 0.1e1;
  vec2 _t0647 = [_t0645, _t0646];
  real _t0648 = 0.e0;
  real _t0649 = 0.1e1;
  vec2 _t064A = [_t0648, _t0649];
  real _t064B = prim ×00BD (dPos05C6, _t064A);
  vec2 _t064C = prim /0057<$[2]> (_t0647, _t064B);
  real _t064D = prim ×00BD (_t0644, _t064C);
  real _t064E = -0.1e-15;
  bool _t064F = prim >=007E (_t064D, _t064E);
  real _t0650 = 0.e0;
  real _t0651 = 0.e0;
  vec2 _t0652 = [_t0650, _t0651];
  vec2 _t0653 = prim -0026<$[2]> (_t0652, refPos05C5);
  real _t0654 = 0.e0;
  real _t0655 = 0.1e1;
  vec2 _t0656 = [_t0654, _t0655];
  real _t0657 = 0.e0;
  real _t0658 = 0.1e1;
  vec2 _t0659 = [_t0657, _t0658];
  real _t065A = prim ×00BD (dPos05C6, _t0659);
  vec2 _t065B = prim /0057<$[2]> (_t0656, _t065A);
  real _t065C = prim ×00BD (_t0653, _t065B);
  bool _t065D = prim >0080 (time05C7, _t065C);
  real _t065E = 0.e0;
  real _t065F = 0.1e1;
  vec2 _t0660 = [_t065E, _t065F];
  real _t0661 = prim ×00BD (dPos05C6, _t0660);
  real _t0662 = prim |()|00B5<$[]> (_t0661);
  real _t0663 = 0.1e-20;
  bool _t0664 = prim >=007E (_t0662, _t0663);
  bool _t0665 = prim $and01C4 (_t065D, _t0664);
  bool _t0666 = prim $and01C4 (_t064F, _t0665);
  if _t0666 {
    real _t0667 = 0.1e1;
    real _t0668 = 0.1e-8;
    real _t0669 = prim +0017<$[]> (_t0667, _t0668);
    real _t066A = 0.1e1;
    real _t066B = 0.1e1;
    vec2 _t066C = [_t066A, _t066B];
    real _t066D = 0.e0;
    real _t066E = 0.e0;
    vec2 _t066F = [_t066D, _t066E];
    vec2 _t0670 = prim -0026<$[2]> (_t066F, refPos05C5);
    real _t0671 = 0.e0;
    real _t0672 = 0.1e1;
    vec2 _t0673 = [_t0671, _t0672];
    real _t0674 = 0.e0;
    real _t0675 = 0.1e1;
    vec2 _t0676 = [_t0674, _t0675];
    real _t0677 = prim ×00BD (dPos05C6, _t0676);
    vec2 _t0678 = prim /0057<$[2]> (_t0673, _t0677);
    real _t0679 = prim ×00BD (_t0670, _t0678);
    vec2 _t067A = prim *0038<$[2]> (dPos05C6, _t0679);
    vec2 _t067B = prim +0017<$[2]> (refPos05C5, _t067A);
    real _t067C = prim •00CE<$[2]; $[2]; $[]> (_t066C, _t067B);
    bool _t067D = prim >0080 (_t0669, _t067C);
    real _t067E = 0.1e-8;
    real _t067F = 0.1e-8;
    vec2 _t0680 = [_t067E, _t067F];
    real _t0681 = 0.e0;
    real _t0682 = 0.e0;
    vec2 _t0683 = [_t0681, _t0682];
    vec2 _t0684 = prim -0026<$[2]> (_t0683, refPos05C5);
    real _t0685 = 0.e0;
    real _t0686 = 0.1e1;
    vec2 _t0687 = [_t0685, _t0686];
    real _t0688 = 0.e0;
    real _t0689 = 0.1e1;
    vec2 _t068A = [_t0688, _t0689];
    real _t068B = prim ×00BD (dPos05C6, _t068A);
    vec2 _t068C = prim /0057<$[2]> (_t0687, _t068B);
    real _t068D = prim ×00BD (_t0684, _t068C);
    vec2 _t068E = prim *0038<$[2]> (dPos05C6, _t068D);
    vec2 _t068F = prim +0017<$[2]> (refPos05C5, _t068E);
    vec2 _t0690 = prim +0017<$[2]> (_t0680, _t068F);
    real _t0691 = _t0690[0];
    real _t0692 = -0.e0;
    bool _t0693 = prim >0080 (_t0691, _t0692);
    real _t0694 = 0.1e-8;
    real _t0695 = 0.1e-8;
    vec2 _t0696 = [_t0694, _t0695];
    real _t0697 = 0.e0;
    real _t0698 = 0.e0;
    vec2 _t0699 = [_t0697, _t0698];
    vec2 _t069A = prim -0026<$[2]> (_t0699, refPos05C5);
    real _t069B = 0.e0;
    real _t069C = 0.1e1;
    vec2 _t069D = [_t069B, _t069C];
    real _t069E = 0.e0;
    real _t069F = 0.1e1;
    vec2 _t06A0 = [_t069E, _t069F];
    real _t06A1 = prim ×00BD (dPos05C6, _t06A0);
    vec2 _t06A2 = prim /0057<$[2]> (_t069D, _t06A1);
    real _t06A3 = prim ×00BD (_t069A, _t06A2);
    vec2 _t06A4 = prim *0038<$[2]> (dPos05C6, _t06A3);
    vec2 _t06A5 = prim +0017<$[2]> (refPos05C5, _t06A4);
    vec2 _t06A6 = prim +0017<$[2]> (_t0696, _t06A5);
    real _t06A7 = _t06A6[1];
    real _t06A8 = -0.e0;
    bool _t06A9 = prim >0080 (_t06A7, _t06A8);
    bool _t06AA = prim $and01C4 (_t0693, _t06A9);
    bool _t06AB = prim $and01C4 (_t067D, _t06AA);
    if _t06AB {
      real _t06AC = 0.e0;
      real _t06AD = 0.e0;
      vec2 _t06AE = [_t06AC, _t06AD];
      vec2 _t06AF = prim -0026<$[2]> (_t06AE, refPos05C5);
      real _t06B0 = 0.e0;
      real _t06B1 = 0.1e1;
      vec2 _t06B2 = [_t06B0, _t06B1];
      real _t06B3 = 0.e0;
      real _t06B4 = 0.1e1;
      vec2 _t06B5 = [_t06B3, _t06B4];
      real _t06B6 = prim ×00BD (dPos05C6, _t06B5);
      vec2 _t06B7 = prim /0057<$[2]> (_t06B2, _t06B6);
      time05C7 = prim ×00BD (_t06AF, _t06B7);
      face05C8 = 1;
    }
  }
  real _t06B8 = 0.e0;
  real _t06B9 = 0.e0;
  vec2 _t06BA = [_t06B8, _t06B9];
  vec2 _t06BB = prim -0026<$[2]> (_t06BA, refPos05C5);
  real _t06BC = 0.1e1;
  real _t06BD = 0.e0;
  vec2 _t06BE = [_t06BC, _t06BD];
  real _t06BF = 0.1e1;
  real _t06C0 = 0.e0;
  vec2 _t06C1 = [_t06BF, _t06C0];
  real _t06C2 = prim ×00BD (dPos05C6, _t06C1);
  vec2 _t06C3 = prim /0057<$[2]> (_t06BE, _t06C2);
  real _t06C4 = prim ×00BD (_t06BB, _t06C3);
  real _t06C5 = -0.1e-15;
  bool _t06C6 = prim >=007E (_t06C4, _t06C5);
  real _t06C7 = 0.e0;
  real _t06C8 = 0.e0;
  vec2 _t06C9 = [_t06C7, _t06C8];
  vec2 _t06CA = prim -0026<$[2]> (_t06C9, refPos05C5);
  real _t06CB = 0.1e1;
  real _t06CC = 0.e0;
  vec2 _t06CD = [_t06CB, _t06CC];
  real _t06CE = 0.1e1;
  real _t06CF = 0.e0;
  vec2 _t06D0 = [_t06CE, _t06CF];
  real _t06D1 = prim ×00BD (dPos05C6, _t06D0);
  vec2 _t06D2 = prim /0057<$[2]> (_t06CD, _t06D1);
  real _t06D3 = prim ×00BD (_t06CA, _t06D2);
  bool _t06D4 = prim >0080 (time05C7, _t06D3);
  real _t06D5 = 0.1e1;
  real _t06D6 = 0.e0;
  vec2 _t06D7 = [_t06D5, _t06D6];
  real _t06D8 = prim ×00BD (dPos05C6, _t06D7);
  real _t06D9 = prim |()|00B5<$[]> (_t06D8);
  real _t06DA = 0.1e-20;
  bool _t06DB = prim >=007E (_t06D9, _t06DA);
  bool _t06DC = prim $and01C4 (_t06D4, _t06DB);
  bool _t06DD = prim $and01C4 (_t06C6, _t06DC);
  if _t06DD {
    real _t06DE = 0.1e1;
    real _t06DF = 0.1e-8;
    real _t06E0 = prim +0017<$[]> (_t06DE, _t06DF);
    real _t06E1 = 0.1e1;
    real _t06E2 = 0.1e1;
    vec2 _t06E3 = [_t06E1, _t06E2];
    real _t06E4 = 0.e0;
    real _t06E5 = 0.e0;
    vec2 _t06E6 = [_t06E4, _t06E5];
    vec2 _t06E7 = prim -0026<$[2]> (_t06E6, refPos05C5);
    real _t06E8 = 0.1e1;
    real _t06E9 = 0.e0;
    vec2 _t06EA = [_t06E8, _t06E9];
    real _t06EB = 0.1e1;
    real _t06EC = 0.e0;
    vec2 _t06ED = [_t06EB, _t06EC];
    real _t06EE = prim ×00BD (dPos05C6, _t06ED);
    vec2 _t06EF = prim /0057<$[2]> (_t06EA, _t06EE);
    real _t06F0 = prim ×00BD (_t06E7, _t06EF);
    vec2 _t06F1 = prim *0038<$[2]> (dPos05C6, _t06F0);
    vec2 _t06F2 = prim +0017<$[2]> (refPos05C5, _t06F1);
    real _t06F3 = prim •00CE<$[2]; $[2]; $[]> (_t06E3, _t06F2);
    bool _t06F4 = prim >0080 (_t06E0, _t06F3);
    real _t06F5 = 0.1e-8;
    real _t06F6 = 0.1e-8;
    vec2 _t06F7 = [_t06F5, _t06F6];
    real _t06F8 = 0.e0;
    real _t06F9 = 0.e0;
    vec2 _t06FA = [_t06F8, _t06F9];
    vec2 _t06FB = prim -0026<$[2]> (_t06FA, refPos05C5);
    real _t06FC = 0.1e1;
    real _t06FD = 0.e0;
    vec2 _t06FE = [_t06FC, _t06FD];
    real _t06FF = 0.1e1;
    real _t0700 = 0.e0;
    vec2 _t0701 = [_t06FF, _t0700];
    real _t0702 = prim ×00BD (dPos05C6, _t0701);
    vec2 _t0703 = prim /0057<$[2]> (_t06FE, _t0702);
    real _t0704 = prim ×00BD (_t06FB, _t0703);
    vec2 _t0705 = prim *0038<$[2]> (dPos05C6, _t0704);
    vec2 _t0706 = prim +0017<$[2]> (refPos05C5, _t0705);
    vec2 _t0707 = prim +0017<$[2]> (_t06F7, _t0706);
    real _t0708 = _t0707[0];
    real _t0709 = -0.e0;
    bool _t070A = prim >0080 (_t0708, _t0709);
    real _t070B = 0.1e-8;
    real _t070C = 0.1e-8;
    vec2 _t070D = [_t070B, _t070C];
    real _t070E = 0.e0;
    real _t070F = 0.e0;
    vec2 _t0710 = [_t070E, _t070F];
    vec2 _t0711 = prim -0026<$[2]> (_t0710, refPos05C5);
    real _t0712 = 0.1e1;
    real _t0713 = 0.e0;
    vec2 _t0714 = [_t0712, _t0713];
    real _t0715 = 0.1e1;
    real _t0716 = 0.e0;
    vec2 _t0717 = [_t0715, _t0716];
    real _t0718 = prim ×00BD (dPos05C6, _t0717);
    vec2 _t0719 = prim /0057<$[2]> (_t0714, _t0718);
    real _t071A = prim ×00BD (_t0711, _t0719);
    vec2 _t071B = prim *0038<$[2]> (dPos05C6, _t071A);
    vec2 _t071C = prim +0017<$[2]> (refPos05C5, _t071B);
    vec2 _t071D = prim +0017<$[2]> (_t070D, _t071C);
    real _t071E = _t071D[1];
    real _t071F = -0.e0;
    bool _t0720 = prim >0080 (_t071E, _t071F);
    bool _t0721 = prim $and01C4 (_t070A, _t0720);
    bool _t0722 = prim $and01C4 (_t06F4, _t0721);
    if _t0722 {
      real _t0723 = 0.e0;
      real _t0724 = 0.e0;
      vec2 _t0725 = [_t0723, _t0724];
      vec2 _t0726 = prim -0026<$[2]> (_t0725, refPos05C5);
      real _t0727 = 0.1e1;
      real _t0728 = 0.e0;
      vec2 _t0729 = [_t0727, _t0728];
      real _t072A = 0.1e1;
      real _t072B = 0.e0;
      vec2 _t072C = [_t072A, _t072B];
      real _t072D = prim ×00BD (dPos05C6, _t072C);
      vec2 _t072E = prim /0057<$[2]> (_t0729, _t072D);
      time05C7 = prim ×00BD (_t0726, _t072E);
      face05C8 = 2;
    }
  }
  int _t072F = -1;
  bool _t0730 = prim !=0086 (face05C8, _t072F);
  if _t0730 {
    real _t0731 = 0.e0;
    real _t0732 = prim max0125 (time05C7, _t0731);
    real _t0733 = (real)face05C8;
    vec2 _t0734 = [_t0732, _t0733];
    return _t0734;
  } else {
    real _t0735 = -0.1e1;
    real _t0736 = -0.1e1;
    vec2 _t0737 = [_t0735, _t0736];
    return _t0737;
  }
}
function vec2#0 _exit0738 (vec2 refPos05C5, vec2 dPos05C6, int i0739)
{
  real time073A = +inf;
  int face073B = -1;
  real faceTime073C = -inf;
  real _t073D = 0.1e1;
  real _t073E = 0.e0;
  vec2 _t073F = [_t073D, _t073E];
  vec2 _t0740 = prim -0026<$[2]> (_t073F, refPos05C5);
  real _t0741 = -0.1e1;
  real _t0742 = 0.1e1;
  vec2 _t0743 = [_t0741, _t0742];
  real _t0744 = -0.1e1;
  real _t0745 = 0.1e1;
  vec2 _t0746 = [_t0744, _t0745];
  real _t0747 = prim ×00BD (dPos05C6, _t0746);
  vec2 _t0748 = prim /0057<$[2]> (_t0743, _t0747);
  real _t0749 = prim ×00BD (_t0740, _t0748);
  real _t074A = -0.1e-15;
  bool _t074B = prim >=007E (_t0749, _t074A);
  real _t074C = 0.1e1;
  real _t074D = 0.e0;
  vec2 _t074E = [_t074C, _t074D];
  vec2 _t074F = prim -0026<$[2]> (_t074E, refPos05C5);
  real _t0750 = -0.1e1;
  real _t0751 = 0.1e1;
  vec2 _t0752 = [_t0750, _t0751];
  real _t0753 = -0.1e1;
  real _t0754 = 0.1e1;
  vec2 _t0755 = [_t0753, _t0754];
  real _t0756 = prim ×00BD (dPos05C6, _t0755);
  vec2 _t0757 = prim /0057<$[2]> (_t0752, _t0756);
  real _t0758 = prim ×00BD (_t074F, _t0757);
  bool _t0759 = prim >0080 (time073A, _t0758);
  real _t075A = -0.1e1;
  real _t075B = 0.1e1;
  vec2 _t075C = [_t075A, _t075B];
  real _t075D = prim ×00BD (dPos05C6, _t075C);
  real _t075E = prim |()|00B5<$[]> (_t075D);
  real _t075F = 0.1e-20;
  bool _t0760 = prim >=007E (_t075E, _t075F);
  bool _t0761 = prim $and01C4 (_t0759, _t0760);
  bool _t0762 = prim $and01C4 (_t074B, _t0761);
  if _t0762 {
    int _t0763 = 0;
    bool _t0764 = prim !=0086 (i0739, _t0763);
    if _t0764 {
      real _t0765 = 0.1e1;
      real _t0766 = 0.e0;
      vec2 _t0767 = [_t0765, _t0766];
      vec2 _t0768 = prim -0026<$[2]> (_t0767, refPos05C5);
      real _t0769 = -0.1e1;
      real _t076A = 0.1e1;
      vec2 _t076B = [_t0769, _t076A];
      real _t076C = -0.1e1;
      real _t076D = 0.1e1;
      vec2 _t076E = [_t076C, _t076D];
      real _t076F = prim ×00BD (dPos05C6, _t076E);
      vec2 _t0770 = prim /0057<$[2]> (_t076B, _t076F);
      time073A = prim ×00BD (_t0768, _t0770);
      face073B = 0;
    } else {
      real _t0771 = 0.1e1;
      real _t0772 = 0.e0;
      vec2 _t0773 = [_t0771, _t0772];
      vec2 _t0774 = prim -0026<$[2]> (_t0773, refPos05C5);
      real _t0775 = -0.1e1;
      real _t0776 = 0.1e1;
      vec2 _t0777 = [_t0775, _t0776];
      real _t0778 = -0.1e1;
      real _t0779 = 0.1e1;
      vec2 _t077A = [_t0778, _t0779];
      real _t077B = prim ×00BD (dPos05C6, _t077A);
      vec2 _t077C = prim /0057<$[2]> (_t0777, _t077B);
      faceTime073C = prim ×00BD (_t0774, _t077C);
    }
  }
  real _t077D = 0.e0;
  real _t077E = 0.e0;
  vec2 _t077F = [_t077D, _t077E];
  vec2 _t0780 = prim -0026<$[2]> (_t077F, refPos05C5);
  real _t0781 = 0.e0;
  real _t0782 = 0.1e1;
  vec2 _t0783 = [_t0781, _t0782];
  real _t0784 = 0.e0;
  real _t0785 = 0.1e1;
  vec2 _t0786 = [_t0784, _t0785];
  real _t0787 = prim ×00BD (dPos05C6, _t0786);
  vec2 _t0788 = prim /0057<$[2]> (_t0783, _t0787);
  real _t0789 = prim ×00BD (_t0780, _t0788);
  real _t078A = -0.1e-15;
  bool _t078B = prim >=007E (_t0789, _t078A);
  real _t078C = 0.e0;
  real _t078D = 0.e0;
  vec2 _t078E = [_t078C, _t078D];
  vec2 _t078F = prim -0026<$[2]> (_t078E, refPos05C5);
  real _t0790 = 0.e0;
  real _t0791 = 0.1e1;
  vec2 _t0792 = [_t0790, _t0791];
  real _t0793 = 0.e0;
  real _t0794 = 0.1e1;
  vec2 _t0795 = [_t0793, _t0794];
  real _t0796 = prim ×00BD (dPos05C6, _t0795);
  vec2 _t0797 = prim /0057<$[2]> (_t0792, _t0796);
  real _t0798 = prim ×00BD (_t078F, _t0797);
  bool _t0799 = prim >0080 (time073A, _t0798);
  real _t079A = 0.e0;
  real _t079B = 0.1e1;
  vec2 _t079C = [_t079A, _t079B];
  real _t079D = prim ×00BD (dPos05C6, _t079C);
  real _t079E = prim |()|00B5<$[]> (_t079D);
  real _t079F = 0.1e-20;
  bool _t07A0 = prim >=007E (_t079E, _t079F);
  bool _t07A1 = prim $and01C4 (_t0799, _t07A0);
  bool _t07A2 = prim $and01C4 (_t078B, _t07A1);
  if _t07A2 {
    int _t07A3 = 1;
    bool _t07A4 = prim !=0086 (i0739, _t07A3);
    if _t07A4 {
      real _t07A5 = 0.e0;
      real _t07A6 = 0.e0;
      vec2 _t07A7 = [_t07A5, _t07A6];
      vec2 _t07A8 = prim -0026<$[2]> (_t07A7, refPos05C5);
      real _t07A9 = 0.e0;
      real _t07AA = 0.1e1;
      vec2 _t07AB = [_t07A9, _t07AA];
      real _t07AC = 0.e0;
      real _t07AD = 0.1e1;
      vec2 _t07AE = [_t07AC, _t07AD];
      real _t07AF = prim ×00BD (dPos05C6, _t07AE);
      vec2 _t07B0 = prim /0057<$[2]> (_t07AB, _t07AF);
      time073A = prim ×00BD (_t07A8, _t07B0);
      face073B = 1;
    } else {
      real _t07B1 = 0.e0;
      real _t07B2 = 0.e0;
      vec2 _t07B3 = [_t07B1, _t07B2];
      vec2 _t07B4 = prim -0026<$[2]> (_t07B3, refPos05C5);
      real _t07B5 = 0.e0;
      real _t07B6 = 0.1e1;
      vec2 _t07B7 = [_t07B5, _t07B6];
      real _t07B8 = 0.e0;
      real _t07B9 = 0.1e1;
      vec2 _t07BA = [_t07B8, _t07B9];
      real _t07BB = prim ×00BD (dPos05C6, _t07BA);
      vec2 _t07BC = prim /0057<$[2]> (_t07B7, _t07BB);
      faceTime073C = prim ×00BD (_t07B4, _t07BC);
    }
  }
  real _t07BD = 0.e0;
  real _t07BE = 0.e0;
  vec2 _t07BF = [_t07BD, _t07BE];
  vec2 _t07C0 = prim -0026<$[2]> (_t07BF, refPos05C5);
  real _t07C1 = 0.1e1;
  real _t07C2 = 0.e0;
  vec2 _t07C3 = [_t07C1, _t07C2];
  real _t07C4 = 0.1e1;
  real _t07C5 = 0.e0;
  vec2 _t07C6 = [_t07C4, _t07C5];
  real _t07C7 = prim ×00BD (dPos05C6, _t07C6);
  vec2 _t07C8 = prim /0057<$[2]> (_t07C3, _t07C7);
  real _t07C9 = prim ×00BD (_t07C0, _t07C8);
  real _t07CA = -0.1e-15;
  bool _t07CB = prim >=007E (_t07C9, _t07CA);
  real _t07CC = 0.e0;
  real _t07CD = 0.e0;
  vec2 _t07CE = [_t07CC, _t07CD];
  vec2 _t07CF = prim -0026<$[2]> (_t07CE, refPos05C5);
  real _t07D0 = 0.1e1;
  real _t07D1 = 0.e0;
  vec2 _t07D2 = [_t07D0, _t07D1];
  real _t07D3 = 0.1e1;
  real _t07D4 = 0.e0;
  vec2 _t07D5 = [_t07D3, _t07D4];
  real _t07D6 = prim ×00BD (dPos05C6, _t07D5);
  vec2 _t07D7 = prim /0057<$[2]> (_t07D2, _t07D6);
  real _t07D8 = prim ×00BD (_t07CF, _t07D7);
  bool _t07D9 = prim >0080 (time073A, _t07D8);
  real _t07DA = 0.1e1;
  real _t07DB = 0.e0;
  vec2 _t07DC = [_t07DA, _t07DB];
  real _t07DD = prim ×00BD (dPos05C6, _t07DC);
  real _t07DE = prim |()|00B5<$[]> (_t07DD);
  real _t07DF = 0.1e-20;
  bool _t07E0 = prim >=007E (_t07DE, _t07DF);
  bool _t07E1 = prim $and01C4 (_t07D9, _t07E0);
  bool _t07E2 = prim $and01C4 (_t07CB, _t07E1);
  if _t07E2 {
    int _t07E3 = 2;
    bool _t07E4 = prim !=0086 (i0739, _t07E3);
    if _t07E4 {
      real _t07E5 = 0.e0;
      real _t07E6 = 0.e0;
      vec2 _t07E7 = [_t07E5, _t07E6];
      vec2 _t07E8 = prim -0026<$[2]> (_t07E7, refPos05C5);
      real _t07E9 = 0.1e1;
      real _t07EA = 0.e0;
      vec2 _t07EB = [_t07E9, _t07EA];
      real _t07EC = 0.1e1;
      real _t07ED = 0.e0;
      vec2 _t07EE = [_t07EC, _t07ED];
      real _t07EF = prim ×00BD (dPos05C6, _t07EE);
      vec2 _t07F0 = prim /0057<$[2]> (_t07EB, _t07EF);
      time073A = prim ×00BD (_t07E8, _t07F0);
      face073B = 2;
    } else {
      real _t07F1 = 0.e0;
      real _t07F2 = 0.e0;
      vec2 _t07F3 = [_t07F1, _t07F2];
      vec2 _t07F4 = prim -0026<$[2]> (_t07F3, refPos05C5);
      real _t07F5 = 0.1e1;
      real _t07F6 = 0.e0;
      vec2 _t07F7 = [_t07F5, _t07F6];
      real _t07F8 = 0.1e1;
      real _t07F9 = 0.e0;
      vec2 _t07FA = [_t07F8, _t07F9];
      real _t07FB = prim ×00BD (dPos05C6, _t07FA);
      vec2 _t07FC = prim /0057<$[2]> (_t07F7, _t07FB);
      faceTime073C = prim ×00BD (_t07F4, _t07FC);
    }
  }
  int _t07FD = -1;
  bool _t07FE = prim !=0086 (face073B, _t07FD);
  if _t07FE {
    real _t07FF = 0.e0;
    real _t0800 = prim max0125 (time073A, _t07FF);
    real _t0801 = (real)face073B;
    vec2 _t0802 = [_t0800, _t0801];
    return _t0802;
  } else {
    real _t0803 = -inf;
    bool _t0804 = prim ==0084 (_t0803, faceTime073C);
    if _t0804 {
      real _t0805 = -0.1e1;
      real _t0806 = -0.1e1;
      vec2 _t0807 = [_t0805, _t0806];
      return _t0807;
    } else {
      real _t0808 = (real)i0739;
      vec2 _t0809 = [faceTime073C, _t0808];
      return _t0809;
    }
  }
}
function Femdata: Mesh#0 domain080A (Femdata: Space arg0080B)
{
  Femdata: Mesh _t080C = extractFem(arg0080B, Mesh);
  return _t080C;
}
function Femdata: Space#0 space080D (Femdata: FemFunc arg0080E)
{
  Femdata: Space _t080F = extractFem(arg0080E, Space);
  return _t080F;
}
function Femdata: FuncCell#3 funcCell0810 (Femdata: FemFunc arg00811, Femdata: MeshCell arg10812)
{
  int _t0813 = extractFemItem(CellIndex(MeshCell), int, arg10812);
  Femdata: FuncCell _t0814 = loadFem(FuncCell, arg00811, _t0813);
  return _t0814;
}
function int#4 sign082F (real x0830)
{
  real _t0831 = 0.e0;
  bool _t0832 = prim >0080 (x0830, _t0831);
  if _t0832 {
    int _t0833 = 1;
    return _t0833;
  } else {
    real _t0834 = 0.e0;
    bool _t0835 = prim <007A (x0830, _t0834);
    if _t0835 {
      int _t0836 = -1;
      return _t0836;
    } else {
      int _t0837 = 0;
      return _t0837;
    }
  }
}
globalInit {
  int _t0467 = 0;
  int _t0465 = 1;
  int _t0469 = extractFemItem(NumCell(Mesh), int, a0463);
  int _t0468 = prim -0024 (_t0469, _t0465);
  int[] _t046C = prim $range01C3 (_t0467, _t0468);
  Femdata: MeshCell[] _t046D = {};
  foreach _t046B in _t046C {
    Femdata: MeshCell _t046E = loadFem(MeshCell, a0463, _t046B);
    _t046D = prim @0010<Femdata: MeshCell> (_t046D, _t046E);
  }
  0cell_a0464 = _t046D;
  b046F = loadFem(Space, 0b046F_intermedateGlobal0470, a0463);
  c0471 = loadFem(FemFunc, 0c0471_intermedateGlobal0472, b046F);
  vec3 _t0815 = prim -0026<$[3]> (camAt0454, camEye0450);
  camDist0816 = prim |()|00B5<$[3]> (_t0815);
  camNearVsp0817 = prim +0017<$[]> (camNear045F, camDist0816);
  camFarVsp0818 = prim +0017<$[]> (camFar0460, camDist0816);
  vec3 _t0819 = prim -0026<$[3]> (camAt0454, camEye0450);
  camN081A = prim normalize0137<$[3]> (_t0819);
  vec3 _t081B = prim ×00BE (camN081A, camUp0458);
  camU081C = prim normalize0137<$[3]> (_t081B);
  camV081D = prim ×00BE (camU081C, camN081A);
  real _t081E = 0.314159265358979323846264338327950288e1;
  real _t081F = prim *0034 (camFOV045C, _t081E);
  real _t0820 = 0.36e3;
  real _t0821 = prim /0055 (_t081F, _t0820);
  real _t0822 = prim tan0179 (_t0821);
  camVmax0823 = prim *0034 (_t0822, camDist0816);
  real _t0824 = (real)iresU045D;
  real _t0825 = prim *0034 (camVmax0823, _t0824);
  real _t0826 = (real)iresV045E;
  camUmax0827 = prim /0055 (_t0825, _t0826);
  kernel _t0828 = tent;
  IMAGE1D<double[3]> img0829 = clamp(cmap0481);
  CM082A = prim ⊛0074<#0; %1; $[3]> (_t0828, img0829);
  tensor[3,3] _t082B = [camU081C, camV081D, camN081A];
  tensor[3,3] _t082C = prim transpose0145<%3; %3> (_t082B);
  vec3 _t082D = prim normalize0137<$[3]> (lightVsp048A);
  L082E = prim •00CE<$[3,3]; $[3]; $[3]> (_t082C, _t082D);
}
strand ray (int ui0838, int vi0839) {
  real rayU083A;
  real rayV0841;
  vec3 UV0848;
  vec3 rayOrig084B;
  vec3 rayVec084C;
  real camNearVsp0851;
  real camFarVsp0852;
  int offset0855;
  int len0858;
  int itter085D;
  int intersectionItter085E;
  int idx085F;
  vec2 interval0860;
  real s0861;
  real e0862;
  Femdata: MeshCell cc0863;
  Femdata: FuncCell fc0865;
  output real out0867;
  output vec4 rgba0868;
  output vec3[] locs086D;
  {
    real _t083B = prim unary -008B<$[]> (camUmax0827);
    real _t083C = -0.5e0;
    real _t083D = (real)ui0838;
    real _t083E = (real)iresU045D;
    real _t083F = 0.5e0;
    real _t0840 = prim -0026<$[]> (_t083E, _t083F);
    rayU083A = prim lerp0098<$[]> (_t083B, camUmax0827, _t083C, _t083D, _t0840);
    real _t0842 = prim unary -008B<$[]> (camVmax0823);
    real _t0843 = -0.5e0;
    real _t0844 = (real)vi0839;
    real _t0845 = (real)iresV045E;
    real _t0846 = 0.5e0;
    real _t0847 = prim -0026<$[]> (_t0845, _t0846);
    rayV0841 = prim lerp0098<$[]> (_t0842, camVmax0823, _t0843, _t0844, _t0847);
    vec3 _t0849 = prim *0036<$[3]> (rayU083A, camU081C);
    vec3 _t084A = prim *0036<$[3]> (rayV0841, camV081D);
    UV0848 = prim +0017<$[3]> (_t0849, _t084A);
    rayOrig084B = prim +0017<$[3]> (camEye0450, UV0848);
    real _t084D = 0.e0;
    real _t084E = 0.e0;
    real _t084F = 0.e0;
    vec3 _t0850 = [_t084D, _t084E, _t084F];
    rayVec084C = prim +0017<$[3]> (camN081A, _t0850);
    camNearVsp0851 = camNearVsp0817;
    camFarVsp0852 = camFarVsp0818;
    int _t0856 = prim *0033 (ui0838, iresV045E);
    int _t0857 = prim +0015 (_t0856, vi0839);
    offset0855 = prim $dynsub01C2<int> (indecies0475, _t0857);
    int _t0859 = prim *0033 (iresU045D, iresV045E);
    int _t085A = prim *0033 (ui0838, iresV045E);
    int _t085B = prim +0015 (_t0859, _t085A);
    int _t085C = prim +0015 (_t085B, vi0839);
    len0858 = prim $dynsub01C2<int> (indecies0475, _t085C);
    itter085D = 0;
    intersectionItter085E = 0;
    idx085F = prim +0015 (offset0855, itter085D);
    interval0860 = prim $dynsub01C2<vec2> (times0476, idx085F);
    s0861 = interval0860[0];
    e0862 = interval0860[1];
    int _t0864 = 0;
    cc0863 = prim $dynsub01C2<Femdata: MeshCell> (0cell_a0464, _t0864);
    fc0865 = func funcCell0810 (c0471, cc0863);
    out0867 = 0.e0;
    real _t0869 = 0.e0;
    real _t086A = 0.e0;
    real _t086B = 0.e0;
    real _t086C = 0.e0;
    rgba0868 = [_t0869, _t086A, _t086B, _t086C];
    vec3[0] _t086E = {};
    vec3[] _t086F = (vec3[])_t086E;
    locs086D = _t086F;
  }
  start
  {
    if debug048E {
      bool _t0870 = prim !=0086 (ui0838, debugU048F);
      if _t0870 {
        bool _t0871 = prim !=0086 (vi0839, debugV0490);
        if _t0871 {
          stabilize;
        }
      }
    }
    int _t0872 = 0;
    bool _t0873 = prim ==0082 (len0858, _t0872);
    if _t0873 {
      string _t0874 = "(find:)No intersection found:";
      string _t0875 = "/";
      string _t0876 = "\n";
      print (_t0874, ui0838, _t0875, vi0839, _t0876);
      stabilize;
    }
    int _t0877 = prim $dynsub01C2<int> (cells0477, idx085F);
    cc0863 = prim $dynsub01C2<Femdata: MeshCell> (0cell_a0464, _t0877);
    fc0865 = func funcCell0810 (c0471, cc0863);
  }
  update
  {
    string _t0878 = "Ui/Vi::";
    string _t0879 = "/";
    string _t087A = "\n";
    print (_t0878, ui0838, _t0879, vi0839, _t087A);
    string _t087B = "Interval:";
    vec2 _t087C = [s0861, e0862];
    string _t087D = "\n";
    print (_t087B, _t087C, _t087D);
    string _t087E = "inner itter:";
    string _t087F = "\n";
    print (_t087E, intersectionItter085E, _t087F);
    string _t0880 = "Outer itter:";
    string _t0881 = "\n";
    print (_t0880, itter085D, _t0881);
    real _t0882 = rayOrig084B[0];
    real _t0883 = rayOrig084B[1];
    vec2 _t0884 = [_t0882, _t0883];
    real _t0885 = rayVec084C[0];
    real _t0886 = rayVec084C[1];
    vec2 _t0887 = [_t0885, _t0886];
    vec2 _t0888 = prim *0036<$[2]> (s0861, _t0887);
    vec2 startRay0889 = prim +0017<$[2]> (_t0884, _t0888);
    real _t088A = rayOrig084B[0];
    real _t088B = rayOrig084B[1];
    vec2 _t088C = [_t088A, _t088B];
    real _t088D = rayVec084C[0];
    real _t088E = rayVec084C[1];
    vec2 _t088F = [_t088D, _t088E];
    vec2 _t0890 = prim *0036<$[2]> (e0862, _t088F);
    vec2 endRay0891 = prim +0017<$[2]> (_t088C, _t0890);
    Femdata: Mesh _t0892 = extractFem(cc0863, Mesh);
    Femdata: Mesh _t0893 = extractFem(cc0863, Mesh);
    int _t0894 = extractFemItem(CellIndex(MeshCell), int, cc0863);
    field(2)[2] _t0895 = femField(_t0892,_t0894,field(2)[2],InvTransform,_msh_newtonInverse04FC );
    vec2 invertA0896 = prim @00A5<#∞; %2; $[2]> (_t0895, startRay0889);
    Femdata: Mesh _t0897 = extractFem(cc0863, Mesh);
    Femdata: Mesh _t0898 = extractFem(cc0863, Mesh);
    int _t0899 = extractFemItem(CellIndex(MeshCell), int, cc0863);
    field(2)[2] _t089A = femField(_t0897,_t0899,field(2)[2],InvTransform,_msh_newtonInverse04FC );
    vec2 invertB089B = prim @00A5<#∞; %2; $[2]> (_t089A, endRay0891);
    string _t089C = "inverses:";
    string _t089D = "\n";
    print (_t089C, invertA0896, invertB089B, _t089D);
    Femdata: FemFunc _t089E = extractFem(fc0865, FemFunc);
    Femdata: FemFunc _t089F = extractFem(fc0865, FemFunc);
    Femdata: Space _t08A0 = extractFem(_t089F, Space);
    int _t08A1 = extractFemItem(CellIndex(FuncCell), int, fc0865);
    field(2)[] _t08A2 = femField(_t089E,_t08A1,field(2)[],refField,);
    real faVal08A3 = prim @00A5<#∞; %2; $[]> (_t08A2, invertA0896);
    real _t08A4 = rayVec084C[2];
    real _t08A5 = prim *0034 (_t08A4, s0861);
    real _t08A6 = prim -0026<$[]> (faVal08A3, _t08A5);
    real _t08A7 = rayOrig084B[2];
    real fa08A8 = prim -0026<$[]> (_t08A6, _t08A7);
    Femdata: FemFunc _t08A9 = extractFem(fc0865, FemFunc);
    Femdata: FemFunc _t08AA = extractFem(fc0865, FemFunc);
    Femdata: Space _t08AB = extractFem(_t08AA, Space);
    int _t08AC = extractFemItem(CellIndex(FuncCell), int, fc0865);
    field(2)[] _t08AD = femField(_t08A9,_t08AC,field(2)[],refField,);
    real _t08AE = prim @00A5<#∞; %2; $[]> (_t08AD, invertB089B);
    real _t08AF = rayVec084C[2];
    real _t08B0 = prim *0034 (_t08AF, e0862);
    real _t08B1 = prim -0026<$[]> (_t08AE, _t08B0);
    real _t08B2 = rayOrig084B[2];
    real fb08B3 = prim -0026<$[]> (_t08B1, _t08B2);
    string _t08B4 = "Vals:";
    vec2 _t08B5 = [fa08A8, fb08B3];
    string _t08B6 = "\n";
    print (_t08B4, _t08B5, _t08B6);
    real _t08B7 = prim -0026<$[]> (fa08A8, fb08B3);
    real _t08B8 = prim |()|00B5<$[]> (_t08B7);
    bool _t08B9 = prim <007A (_t08B8, intervalEps0474);
    if _t08B9 {
      real _t08BA = prim |()|00B5<$[]> (fa08A8);
      bool _t08BB = prim >0080 (_t08BA, intervalEps0474);
      if _t08BB {
        real _t08BC = prim |()|00B5<$[]> (fb08B3);
        bool _t08BD = prim >0080 (_t08BC, intervalEps0474);
        if _t08BD {
          string _t08BE = "warn\n";
          print (_t08BE);
          s0861 = prim +0017<$[]> (s0861, intervalEps0474);
          continue;
        }
      }
    }
    real _t08BF = prim *0034 (s0861, fb08B3);
    real _t08C0 = prim *0034 (e0862, fa08A8);
    real _t08C1 = prim -0026<$[]> (_t08BF, _t08C0);
    real _t08C2 = prim -0026<$[]> (fb08B3, fa08A8);
    real cup08C3 = prim /0055 (_t08C1, _t08C2);
    string _t08C4 = "Mid time:";
    string _t08C5 = "\n";
    print (_t08C4, cup08C3, _t08C5);
    real _t08C6 = rayOrig084B[0];
    real _t08C7 = rayOrig084B[1];
    vec2 _t08C8 = [_t08C6, _t08C7];
    real _t08C9 = rayVec084C[0];
    real _t08CA = rayVec084C[1];
    vec2 _t08CB = [_t08C9, _t08CA];
    vec2 _t08CC = prim *0036<$[2]> (cup08C3, _t08CB);
    vec2 midRay08CD = prim +0017<$[2]> (_t08C8, _t08CC);
    Femdata: Mesh _t08CE = extractFem(cc0863, Mesh);
    Femdata: Mesh _t08CF = extractFem(cc0863, Mesh);
    int _t08D0 = extractFemItem(CellIndex(MeshCell), int, cc0863);
    field(2)[2] _t08D1 = femField(_t08CE,_t08D0,field(2)[2],InvTransform,_msh_newtonInverse04FC );
    vec2 invertC08D2 = prim @00A5<#∞; %2; $[2]> (_t08D1, midRay08CD);
    Femdata: FemFunc _t08D3 = extractFem(fc0865, FemFunc);
    Femdata: FemFunc _t08D4 = extractFem(fc0865, FemFunc);
    Femdata: Space _t08D5 = extractFem(_t08D4, Space);
    int _t08D6 = extractFemItem(CellIndex(FuncCell), int, fc0865);
    field(2)[] _t08D7 = femField(_t08D3,_t08D6,field(2)[],refField,);
    real fmVal08D8 = prim @00A5<#∞; %2; $[]> (_t08D7, invertC08D2);
    real _t08D9 = rayVec084C[2];
    real _t08DA = prim *0034 (_t08D9, cup08C3);
    real _t08DB = prim -0026<$[]> (fmVal08D8, _t08DA);
    real _t08DC = rayOrig084B[2];
    real fm08DD = prim -0026<$[]> (_t08DB, _t08DC);
    string _t08DE = "all vals:";
    vec3 _t08DF = [fa08A8, fm08DD, fb08B3];
    string _t08E0 = "\n";
    print (_t08DE, _t08DF, _t08E0);
    int _t08E1 = 1;
    intersectionItter085E = prim +0015 (intersectionItter085E, _t08E1);
    int _t08E2 = func sign082F (fa08A8);
    int _t08E3 = func sign082F (fm08DD);
    int _t08E4 = prim *0033 (_t08E2, _t08E3);
    int _t08E5 = 0;
    bool _t08E6 = prim <0079 (_t08E4, _t08E5);
    if _t08E6 {
      e0862 = cup08C3;
    } else {
      int _t08E7 = func sign082F (fa08A8);
      int _t08E8 = func sign082F (fm08DD);
      int _t08E9 = prim *0033 (_t08E7, _t08E8);
      int _t08EA = 0;
      bool _t08EB = prim >007F (_t08E9, _t08EA);
      if _t08EB {
        s0861 = cup08C3;
      }
    }
    string _t08EC = "new interval:";
    vec2 _t08ED = [s0861, e0862];
    string _t08EE = "\n";
    print (_t08EC, _t08ED, _t08EE);
    real _t08EF = prim |()|00B5<$[]> (fm08DD);
    bool _t08F0 = prim <007A (_t08EF, zeroEps0473);
    if _t08F0 {
      real _t08F1 = 0.e0;
      real _t08F2 = 0.e0;
      vec2 grad08F3 = [_t08F1, _t08F2];
      real _t08F5 = prim |()|00B5<$[]> (fm08DD);
      bool _t08F6 = prim <007A (_t08F5, zeroEps0473);
      if _t08F6 {
        Femdata: FemFunc _t08F7 = extractFem(fc0865, FemFunc);
        Femdata: FemFunc _t08F8 = extractFem(fc0865, FemFunc);
        Femdata: Space _t08F9 = extractFem(_t08F8, Space);
        int _t08FA = extractFemItem(CellIndex(FuncCell), int, fc0865);
        field(2)[] _t08FB = femField(_t08F7,_t08FA,field(2)[],refField,);
        Femdata: Mesh _t08FC = extractFem(cc0863, Mesh);
        Femdata: Mesh _t08FD = extractFem(cc0863, Mesh);
        int _t08FE = extractFemItem(CellIndex(MeshCell), int, cc0863);
        field(2)[2] _t08FF = femField(_t08FC,_t08FE,field(2)[2],InvTransform,_msh_newtonInverse04FC );
        field(2)[] _t0900 = prim ∘0164<#∞; %2; $[]; %2; $[2]> (_t08FB, _t08FF);
        field(2)[2] _t0901 = prim ∇00A8<#∞; %2> (_t0900);
        grad08F3 = prim @00A5<#∞; %2; $[2]> (_t0901, midRay08CD);
        out0867 = fmVal08D8;
      }
      string _t0902 = "Out val:";
      string _t0903 = "\n";
      print (_t0902, out0867, _t0903);
      string _t0904 = "Grad val:";
      string _t0905 = "\n";
      print (_t0904, grad08F3, _t0905);
      real _t0906 = 0.1e1;
      real _t0907 = 0.1e1;
      real _t0908 = 0.1e1;
      vec3 mcol0909 = [_t0906, _t0907, _t0908];
      bool _t090A = prim !=0088 (cmin0482, cmax0483);
      if _t090A {
        int _t090B = -1;
        real _t090C = (real)_t090B;
        real _t090D = 0.1e1;
        real _t090E = prim lerp0098<$[]> (_t090C, _t090D, cmin0482, out0867, cmax0483);
        mcol0909 = prim @00A5<#0; %1; $[3]> (CM082A, _t090E);
      }
      if light0484 {
        real _t090F = grad08F3[0];
        real _t0910 = grad08F3[1];
        int _t0911 = -1;
        real _t0912 = (real)_t0911;
        vec3 _t0913 = [_t090F, _t0910, _t0912];
        vec3 N0914 = prim normalize0137<$[3]> (_t0913);
        vec3 _t0915 = prim normalize0137<$[3]> (rayVec084C);
        vec3 _t0916 = prim unary -008B<$[3]> (_t0915);
        vec3 _t0917 = prim +0017<$[3]> (_t0916, L082E);
        vec3 H0918 = prim normalize0137<$[3]> (_t0917);
        vec3 lightColor0919 = prim lerp0098<$[3]> (mcnear0478, mcfar047C, camNearVsp0851, cup08C3, camFarVsp0852);
        vec3 ambientTerm091A = prim *0036<$[3]> (phongKa0485, mcol0909);
        vec3 _t091B = prim modulate0129<%3> (mcol0909, lightColor0919);
        vec3 _t091C = prim *0036<$[3]> (phongKd0486, _t091B);
        real _t091D = 0.e0;
        real _t091E = prim •00CE<$[3]; $[3]; $[]> (N0914, L082E);
        real _t091F = prim max0125 (_t091D, _t091E);
        vec3 diffuse0920 = prim *0038<$[3]> (_t091C, _t091F);
        vec3 _t0921 = prim *0036<$[3]> (phongKs0487, lightColor0919);
        real _t0922 = 0.e0;
        real _t0923 = prim •00CE<$[3]; $[3]; $[]> (N0914, H0918);
        real _t0924 = prim max0125 (_t0922, _t0923);
        real _t0925 = prim ^0069 (_t0924, phongSp0488);
        vec3 specular0926 = prim *0038<$[3]> (_t0921, _t0925);
        vec3 _t0927 = prim +0017<$[3]> (ambientTerm091A, diffuse0920);
        vec3 fin0928 = prim +0017<$[3]> (_t0927, specular0926);
        real _t0929 = fin0928[0];
        real _t092A = fin0928[1];
        real _t092B = fin0928[2];
        real _t092C = 0.1e1;
        rgba0868 = [_t0929, _t092A, _t092B, _t092C];
      } else {
        real _t092D = mcol0909[0];
        real _t092E = mcol0909[1];
        real _t092F = mcol0909[2];
        real _t0930 = 0.1e1;
        rgba0868 = [_t092D, _t092E, _t092F, _t0930];
      }
      vec3 _t0931 = prim *0038<$[3]> (rayVec084C, cup08C3);
      vec3 _t0932 = prim +0017<$[3]> (_t0931, rayOrig084B);
      vec3[1] _t0933 = {_t0932};
      vec3[] _t0934 = (vec3[])_t0933;
      locs086D = _t0934;
      stabilize;
    }
    int _t0935 = 32;
    bool _t0936 = prim >007F (intersectionItter085E, _t0935);
    if _t0936 {
      intersectionItter085E = 0;
      int _t0937 = 1;
      itter085D = prim +0015 (itter085D, _t0937);
      bool _t0938 = prim >=007D (itter085D, len0858);
      if _t0938 {
        string _t0939 = "No intersection found\n";
        print (_t0939);
        string _t093A = "Fin pixel=============================\n";
        print (_t093A);
        stabilize;
      }
      int _t093B = prim +0015 (offset0855, itter085D);
      interval0860 = prim $dynsub01C2<vec2> (times0476, _t093B);
      int _t093C = prim +0015 (offset0855, itter085D);
      int _t093D = prim $dynsub01C2<int> (cells0477, _t093C);
      cc0863 = prim $dynsub01C2<Femdata: MeshCell> (0cell_a0464, _t093D);
      s0861 = interval0860[0];
      e0862 = interval0860[1];
      fc0865 = func funcCell0810 (c0471, cc0863);
      string _t093E = "++++++++++++++++Next interval!+++++++++++++++++++\n";
      print (_t093E);
      continue;
    } else {
      string _t093F = "---------------\n";
      print (_t093F);
    }
  }
}
grid(2) {
  int _t0940 = 0;
  int _t0941 = 1;
  int _t0942 = prim -0024 (iresU045D, _t0941);
  int[] _t0943 = prim $range01C3 (_t0940, _t0942);
  foreach vi0949 in _t0943 {
    int _t0944 = 0;
    int _t0945 = 1;
    int _t0946 = prim -0024 (iresV045E, _t0945);
    int[] _t0947 = prim $range01C3 (_t0944, _t0946);
    foreach ui0948 in _t0947 {
      new ray (ui0948, vi0949);
    }
  }
}
/* Program end */
/* Simplified Program (after after inlining) start */
properties: GlobalInit,StrandArray,HasStartMethod,ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[]),HasInputs,HasGlobals
input real isoval044E = <default>;
input real thick044F = <default>;
input vec3 camEye0450 = <default>;
input vec3 camAt0454 = <default>;
input vec3 camUp0458 = <default>;
input real camFOV045C = <default>;
input int iresU045D = <default>;
input int iresV045E = <default>;
input real camNear045F = <default>;
input real camFar0460 = <default>;
input real refStep0461 = <default>;
input real rayStep0462 = <default>;
input FemData:Mesh a0463;
input FemData:Space 0b046F_intermedateGlobal0470;
input FemData:FemFunc 0c0471_intermedateGlobal0472;
input real zeroEps0473 = <default>;
input real intervalEps0474 = <default>;
input int[] indecies0475;
input vec2[] times0476;
input int[] cells0477;
input vec3 mcnear0478("material color at near clipping plane (for depth cuing)") = <default>;
input vec3 mcfar047C("material color at far clipping plane") = <default>;
input image(1)[3] cmap0481("univariate colormap") = image("/home/teocollin/gitcode/diderot/tests/lipRay/find/cmap.nrrd");
input real cmin0482("value mapped to min end of colormap") = <default>;
input real cmax0483("value mapped to max end of colormap. By default cmin==cmax==0, which disables this colormapping") = <default>;
input bool light0484 = <default>;
input real phongKa0485("Blinn-Phong ambient component") = <default>;
input real phongKd0486("Blinn-Phong diffuse component") = <default>;
input real phongKs0487("Blinn-Phong specular component") = <default>;
input real phongSp0488("Blinn-Phong specularity exponent") = <default>;
input real maxAlpha0489("maximum opacity on rendered surface") = <default>;
input vec3 lightVsp048A = <default>;
input bool debug048E = <default>;
input int debugU048F = <default>;
input int debugV0490 = <default>;
constants {
  isoval044E = 0.2e0;
  thick044F = 0.7e-1;
  real _t0451 = 0.3e1;
  real _t0452 = -0.3e1;
  real _t0453 = 0.3e1;
  camEye0450 = [_t0451, _t0452, _t0453];
  real _t0455 = 0.5e0;
  real _t0456 = 0.5e0;
  real _t0457 = 0.5e0;
  camAt0454 = [_t0455, _t0456, _t0457];
  real _t0459 = 0.e0;
  real _t045A = 0.e0;
  real _t045B = 0.1e1;
  camUp0458 = [_t0459, _t045A, _t045B];
  camFOV045C = 0.137e2;
  iresU045D = 10;
  iresV045E = 10;
  camNear045F = -0.2e1;
  camFar0460 = 0.5e1;
  refStep0461 = 0.1e1;
  rayStep0462 = 0.1e-1;
  zeroEps0473 = 0.1e-10;
  intervalEps0474 = 0.1e-10;
  real _t0479 = 0.1e1;
  real _t047A = 0.1e1;
  real _t047B = 0.1e1;
  mcnear0478 = [_t0479, _t047A, _t047B];
  real _t047D = 0.1e1;
  real _t047E = 0.1e1;
  real _t047F = 0.1e1;
  mcfar047C = [_t047D, _t047E, _t047F];
  cmin0482 = 0.e0;
  cmax0483 = 0.1e1;
  light0484 = false;
  phongKa0485 = 0.5e0;
  phongKd0486 = 0.5e0;
  phongKs0487 = 0.e0;
  phongSp0488 = 0.6e2;
  maxAlpha0489 = 0.1e1;
  real _t048B = 0.e0;
  real _t048C = 0.369e1;
  real _t048D = 0.153e1;
  lightVsp048A = [_t048B, _t048C, _t048D];
  debug048E = false;
  debugU048F = 8;
  debugV0490 = 2;
}
global Femdata: MeshCell[] 0cell_a0464;
global Femdata: Space b046F;
global Femdata: FemFunc c0471;
global real camDist0816;
global real camNearVsp0817;
global real camFarVsp0818;
global vec3 camN081A;
global vec3 camU081C;
global vec3 camV081D;
global real camVmax0823;
global real camUmax0827;
global field#0(1)[3] CM082A;
global vec3 L082E;
function Femdata: MeshPos#4 _msh_newtonInverse04FC (vec2 pos04FD, int cellInt04FE, Femdata: Mesh mesh04FF)
{
  real _t0500 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t0501 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  xn0502 = [_t0500, _t0501];
  field(2)[2] _t0503 = femField(mesh04FF,cellInt04FE,field(2)[2],Transform,);
  field(2)[2,2] _t0504 = prim ∇⊗00AD<#∞; %2; $[]; %2> (_t0503);
  field(2)[2,2] _t0505 = prim inv015B<#∞; %2> (_t0504);
  real _t0506 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t0507 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  vec2 _t0508 = [_t0506, _t0507];
  A0509 = prim @00A5<#∞; %2; $[2,2]> (_t0505, _t0508);
  int _t050A = 0;
  int _t050B = 16;
  int[] _t050C = prim $range01C3 (_t050A, _t050B);
  foreach itter0530 in _t050C {
    field(2)[2] _t050D = femField(mesh04FF,cellInt04FE,field(2)[2],Transform,);
    field(2)[2] _t050E = prim -002E<#∞; %2; $[2]> (_t050D, pos04FD);
    field(2)[2] _t050F = prim •00D4<#∞; %2; $[2,2]; $[2]; $[2]> (A0509, _t050E);
    delta0510 = prim @00A5<#∞; %2; $[2]> (_t050F, xn0502);
    xn0502 = prim -0026<$[2]> (xn0502, delta0510);
    real _t0511 = 0.1e-7;
    real _t0512 = 0.1e-7;
    real _t0513 = prim *0034 (_t0511, _t0512);
    real _t0514 = prim •00CE<$[2]; $[2]; $[]> (delta0510, delta0510);
    bool _t0515 = prim >=007E (_t0513, _t0514);
    if _t0515 {
      real _t0516 = 0.1e1;
      real _t0517 = 0.1e-8;
      real _t0518 = prim +0017<$[]> (_t0516, _t0517);
      real _t0519 = 0.1e1;
      real _t051A = 0.1e1;
      vec2 _t051B = [_t0519, _t051A];
      real _t051C = prim •00CE<$[2]; $[2]; $[]> (_t051B, xn0502);
      bool _t051D = prim >0080 (_t0518, _t051C);
      real _t051E = 0.1e-8;
      real _t051F = 0.1e-8;
      vec2 _t0520 = [_t051E, _t051F];
      vec2 _t0521 = prim +0017<$[2]> (_t0520, xn0502);
      real _t0522 = _t0521[0];
      real _t0523 = -0.e0;
      bool _t0524 = prim >0080 (_t0522, _t0523);
      real _t0525 = 0.1e-8;
      real _t0526 = 0.1e-8;
      vec2 _t0527 = [_t0525, _t0526];
      vec2 _t0528 = prim +0017<$[2]> (_t0527, xn0502);
      real _t0529 = _t0528[1];
      real _t052A = -0.e0;
      bool _t052B = prim >0080 (_t0529, _t052A);
      bool _t052C = prim $and01C4 (_t0524, _t052B);
      bool _t052D = prim $and01C4 (_t051D, _t052C);
      if _t052D {
        Femdata: MeshPos _t052E = extractFemItemN((mesh04FF, cellInt04FE, xn0502, pos04FD),AllBuild(MeshPos),);
        return _t052E;
      } else {
        Femdata: MeshPos _t052F = extractFemItemN((mesh04FF),InvalidBuild(MeshPos),);
        return _t052F;
      }
    }
  }
  Femdata: MeshPos _t0531 = extractFemItemN((mesh04FF),InvalidBuild(MeshPos),);
  return _t0531;
}
function int[2]#5 nextCell40548 (int faceIdx05BB, int cell05BC, Femdata: Mesh mesh05BD)
{
  int _t05BE = 6;
  int _t05BF = prim *0033 (cell05BC, _t05BE);
  int _t05C0 = 2;
  int _t05C1 = prim *0033 (faceIdx05BB, _t05C0);
  int _t05C2 = prim +0015 (_t05BF, _t05C1);
  int[2] _t05C3 = extractFemItemN((mesh05BD, _t05C2),CellFaceCell(Mesh),);
  return _t05C3;
}
globalInit {
  int _t0467 = 0;
  int _t0465 = 1;
  int _t0469 = extractFemItem(NumCell(Mesh), int, a0463);
  int _t0468 = prim -0024 (_t0469, _t0465);
  int[] _t046C = prim $range01C3 (_t0467, _t0468);
  Femdata: MeshCell[] _t046D = {};
  foreach _t046B in _t046C {
    Femdata: MeshCell _t046E = loadFem(MeshCell, a0463, _t046B);
    _t046D = prim @0010<Femdata: MeshCell> (_t046D, _t046E);
  }
  0cell_a0464 = _t046D;
  b046F = loadFem(Space, 0b046F_intermedateGlobal0470, a0463);
  c0471 = loadFem(FemFunc, 0c0471_intermedateGlobal0472, b046F);
  vec3 _t0815 = prim -0026<$[3]> (camAt0454, camEye0450);
  camDist0816 = prim |()|00B5<$[3]> (_t0815);
  camNearVsp0817 = prim +0017<$[]> (camNear045F, camDist0816);
  camFarVsp0818 = prim +0017<$[]> (camFar0460, camDist0816);
  vec3 _t0819 = prim -0026<$[3]> (camAt0454, camEye0450);
  camN081A = prim normalize0137<$[3]> (_t0819);
  vec3 _t081B = prim ×00BE (camN081A, camUp0458);
  camU081C = prim normalize0137<$[3]> (_t081B);
  camV081D = prim ×00BE (camU081C, camN081A);
  real _t081E = 0.314159265358979323846264338327950288e1;
  real _t081F = prim *0034 (camFOV045C, _t081E);
  real _t0820 = 0.36e3;
  real _t0821 = prim /0055 (_t081F, _t0820);
  real _t0822 = prim tan0179 (_t0821);
  camVmax0823 = prim *0034 (_t0822, camDist0816);
  real _t0824 = (real)iresU045D;
  real _t0825 = prim *0034 (camVmax0823, _t0824);
  real _t0826 = (real)iresV045E;
  camUmax0827 = prim /0055 (_t0825, _t0826);
  kernel _t0828 = tent;
  IMAGE1D<double[3]> img0829 = clamp(cmap0481);
  CM082A = prim ⊛0074<#0; %1; $[3]> (_t0828, img0829);
  tensor[3,3] _t082B = [camU081C, camV081D, camN081A];
  tensor[3,3] _t082C = prim transpose0145<%3; %3> (_t082B);
  vec3 _t082D = prim normalize0137<$[3]> (lightVsp048A);
  L082E = prim •00CE<$[3,3]; $[3]; $[3]> (_t082C, _t082D);
}
strand ray (int ui0838, int vi0839) {
  real rayU083A;
  real rayV0841;
  vec3 UV0848;
  vec3 rayOrig084B;
  vec3 rayVec084C;
  real camNearVsp0851;
  real camFarVsp0852;
  int offset0855;
  int len0858;
  int itter085D;
  int intersectionItter085E;
  int idx085F;
  vec2 interval0860;
  real s0861;
  real e0862;
  Femdata: MeshCell cc0863;
  Femdata: FuncCell fc0865;
  output real out0867;
  output vec4 rgba0868;
  output vec3[] locs086D;
  {
    real _t083B = prim unary -008B<$[]> (camUmax0827);
    real _t083C = -0.5e0;
    real _t083D = (real)ui0838;
    real _t083E = (real)iresU045D;
    real _t083F = 0.5e0;
    real _t0840 = prim -0026<$[]> (_t083E, _t083F);
    rayU083A = prim lerp0098<$[]> (_t083B, camUmax0827, _t083C, _t083D, _t0840);
    real _t0842 = prim unary -008B<$[]> (camVmax0823);
    real _t0843 = -0.5e0;
    real _t0844 = (real)vi0839;
    real _t0845 = (real)iresV045E;
    real _t0846 = 0.5e0;
    real _t0847 = prim -0026<$[]> (_t0845, _t0846);
    rayV0841 = prim lerp0098<$[]> (_t0842, camVmax0823, _t0843, _t0844, _t0847);
    vec3 _t0849 = prim *0036<$[3]> (rayU083A, camU081C);
    vec3 _t084A = prim *0036<$[3]> (rayV0841, camV081D);
    UV0848 = prim +0017<$[3]> (_t0849, _t084A);
    rayOrig084B = prim +0017<$[3]> (camEye0450, UV0848);
    real _t084D = 0.e0;
    real _t084E = 0.e0;
    real _t084F = 0.e0;
    vec3 _t0850 = [_t084D, _t084E, _t084F];
    rayVec084C = prim +0017<$[3]> (camN081A, _t0850);
    camNearVsp0851 = camNearVsp0817;
    camFarVsp0852 = camFarVsp0818;
    int _t0856 = prim *0033 (ui0838, iresV045E);
    int _t0857 = prim +0015 (_t0856, vi0839);
    offset0855 = prim $dynsub01C2<int> (indecies0475, _t0857);
    int _t0859 = prim *0033 (iresU045D, iresV045E);
    int _t085A = prim *0033 (ui0838, iresV045E);
    int _t085B = prim +0015 (_t0859, _t085A);
    int _t085C = prim +0015 (_t085B, vi0839);
    len0858 = prim $dynsub01C2<int> (indecies0475, _t085C);
    itter085D = 0;
    intersectionItter085E = 0;
    idx085F = prim +0015 (offset0855, itter085D);
    interval0860 = prim $dynsub01C2<vec2> (times0476, idx085F);
    s0861 = interval0860[0];
    e0862 = interval0860[1];
    int _t0864 = 0;
    cc0863 = prim $dynsub01C2<Femdata: MeshCell> (0cell_a0464, _t0864);
    Femdata: FuncCell fc094E;
    int _t094F = extractFemItem(CellIndex(MeshCell), int, cc0863);
    Femdata: FuncCell _t0950 = loadFem(FuncCell, c0471, _t094F);
    fc094E = _t0950;
    fc0865 = fc094E;
    out0867 = 0.e0;
    real _t0869 = 0.e0;
    real _t086A = 0.e0;
    real _t086B = 0.e0;
    real _t086C = 0.e0;
    rgba0868 = [_t0869, _t086A, _t086B, _t086C];
    vec3[0] _t086E = {};
    vec3[] _t086F = (vec3[])_t086E;
    locs086D = _t086F;
  }
  start
  {
    if debug048E {
      bool _t0870 = prim !=0086 (ui0838, debugU048F);
      if _t0870 {
        bool _t0871 = prim !=0086 (vi0839, debugV0490);
        if _t0871 {
          stabilize;
        }
      }
    }
    int _t0872 = 0;
    bool _t0873 = prim ==0082 (len0858, _t0872);
    if _t0873 {
      string _t0874 = "(find:)No intersection found:";
      string _t0875 = "/";
      string _t0876 = "\n";
      print (_t0874, ui0838, _t0875, vi0839, _t0876);
      stabilize;
    }
    int _t0877 = prim $dynsub01C2<int> (cells0477, idx085F);
    cc0863 = prim $dynsub01C2<Femdata: MeshCell> (0cell_a0464, _t0877);
    Femdata: FuncCell fc0951;
    int _t0952 = extractFemItem(CellIndex(MeshCell), int, cc0863);
    Femdata: FuncCell _t0953 = loadFem(FuncCell, c0471, _t0952);
    fc0951 = _t0953;
    fc0865 = fc0951;
  }
  update
  {
    string _t0878 = "Ui/Vi::";
    string _t0879 = "/";
    string _t087A = "\n";
    print (_t0878, ui0838, _t0879, vi0839, _t087A);
    string _t087B = "Interval:";
    vec2 _t087C = [s0861, e0862];
    string _t087D = "\n";
    print (_t087B, _t087C, _t087D);
    string _t087E = "inner itter:";
    string _t087F = "\n";
    print (_t087E, intersectionItter085E, _t087F);
    string _t0880 = "Outer itter:";
    string _t0881 = "\n";
    print (_t0880, itter085D, _t0881);
    real _t0882 = rayOrig084B[0];
    real _t0883 = rayOrig084B[1];
    vec2 _t0884 = [_t0882, _t0883];
    real _t0885 = rayVec084C[0];
    real _t0886 = rayVec084C[1];
    vec2 _t0887 = [_t0885, _t0886];
    vec2 _t0888 = prim *0036<$[2]> (s0861, _t0887);
    vec2 startRay0889 = prim +0017<$[2]> (_t0884, _t0888);
    real _t088A = rayOrig084B[0];
    real _t088B = rayOrig084B[1];
    vec2 _t088C = [_t088A, _t088B];
    real _t088D = rayVec084C[0];
    real _t088E = rayVec084C[1];
    vec2 _t088F = [_t088D, _t088E];
    vec2 _t0890 = prim *0036<$[2]> (e0862, _t088F);
    vec2 endRay0891 = prim +0017<$[2]> (_t088C, _t0890);
    Femdata: Mesh _t0892 = extractFem(cc0863, Mesh);
    Femdata: Mesh _t0893 = extractFem(cc0863, Mesh);
    int _t0894 = extractFemItem(CellIndex(MeshCell), int, cc0863);
    field(2)[2] _t0895 = femField(_t0892,_t0894,field(2)[2],InvTransform,_msh_newtonInverse04FC );
    vec2 invertA0896 = prim @00A5<#∞; %2; $[2]> (_t0895, startRay0889);
    Femdata: Mesh _t0897 = extractFem(cc0863, Mesh);
    Femdata: Mesh _t0898 = extractFem(cc0863, Mesh);
    int _t0899 = extractFemItem(CellIndex(MeshCell), int, cc0863);
    field(2)[2] _t089A = femField(_t0897,_t0899,field(2)[2],InvTransform,_msh_newtonInverse04FC );
    vec2 invertB089B = prim @00A5<#∞; %2; $[2]> (_t089A, endRay0891);
    string _t089C = "inverses:";
    string _t089D = "\n";
    print (_t089C, invertA0896, invertB089B, _t089D);
    Femdata: FemFunc _t089E = extractFem(fc0865, FemFunc);
    Femdata: FemFunc _t089F = extractFem(fc0865, FemFunc);
    Femdata: Space _t08A0 = extractFem(_t089F, Space);
    int _t08A1 = extractFemItem(CellIndex(FuncCell), int, fc0865);
    field(2)[] _t08A2 = femField(_t089E,_t08A1,field(2)[],refField,);
    real faVal08A3 = prim @00A5<#∞; %2; $[]> (_t08A2, invertA0896);
    real _t08A4 = rayVec084C[2];
    real _t08A5 = prim *0034 (_t08A4, s0861);
    real _t08A6 = prim -0026<$[]> (faVal08A3, _t08A5);
    real _t08A7 = rayOrig084B[2];
    real fa08A8 = prim -0026<$[]> (_t08A6, _t08A7);
    Femdata: FemFunc _t08A9 = extractFem(fc0865, FemFunc);
    Femdata: FemFunc _t08AA = extractFem(fc0865, FemFunc);
    Femdata: Space _t08AB = extractFem(_t08AA, Space);
    int _t08AC = extractFemItem(CellIndex(FuncCell), int, fc0865);
    field(2)[] _t08AD = femField(_t08A9,_t08AC,field(2)[],refField,);
    real _t08AE = prim @00A5<#∞; %2; $[]> (_t08AD, invertB089B);
    real _t08AF = rayVec084C[2];
    real _t08B0 = prim *0034 (_t08AF, e0862);
    real _t08B1 = prim -0026<$[]> (_t08AE, _t08B0);
    real _t08B2 = rayOrig084B[2];
    real fb08B3 = prim -0026<$[]> (_t08B1, _t08B2);
    string _t08B4 = "Vals:";
    vec2 _t08B5 = [fa08A8, fb08B3];
    string _t08B6 = "\n";
    print (_t08B4, _t08B5, _t08B6);
    real _t08B7 = prim -0026<$[]> (fa08A8, fb08B3);
    real _t08B8 = prim |()|00B5<$[]> (_t08B7);
    bool _t08B9 = prim <007A (_t08B8, intervalEps0474);
    if _t08B9 {
      real _t08BA = prim |()|00B5<$[]> (fa08A8);
      bool _t08BB = prim >0080 (_t08BA, intervalEps0474);
      if _t08BB {
        real _t08BC = prim |()|00B5<$[]> (fb08B3);
        bool _t08BD = prim >0080 (_t08BC, intervalEps0474);
        if _t08BD {
          string _t08BE = "warn\n";
          print (_t08BE);
          s0861 = prim +0017<$[]> (s0861, intervalEps0474);
          continue;
        }
      }
    }
    real _t08BF = prim *0034 (s0861, fb08B3);
    real _t08C0 = prim *0034 (e0862, fa08A8);
    real _t08C1 = prim -0026<$[]> (_t08BF, _t08C0);
    real _t08C2 = prim -0026<$[]> (fb08B3, fa08A8);
    real cup08C3 = prim /0055 (_t08C1, _t08C2);
    string _t08C4 = "Mid time:";
    string _t08C5 = "\n";
    print (_t08C4, cup08C3, _t08C5);
    real _t08C6 = rayOrig084B[0];
    real _t08C7 = rayOrig084B[1];
    vec2 _t08C8 = [_t08C6, _t08C7];
    real _t08C9 = rayVec084C[0];
    real _t08CA = rayVec084C[1];
    vec2 _t08CB = [_t08C9, _t08CA];
    vec2 _t08CC = prim *0036<$[2]> (cup08C3, _t08CB);
    vec2 midRay08CD = prim +0017<$[2]> (_t08C8, _t08CC);
    Femdata: Mesh _t08CE = extractFem(cc0863, Mesh);
    Femdata: Mesh _t08CF = extractFem(cc0863, Mesh);
    int _t08D0 = extractFemItem(CellIndex(MeshCell), int, cc0863);
    field(2)[2] _t08D1 = femField(_t08CE,_t08D0,field(2)[2],InvTransform,_msh_newtonInverse04FC );
    vec2 invertC08D2 = prim @00A5<#∞; %2; $[2]> (_t08D1, midRay08CD);
    Femdata: FemFunc _t08D3 = extractFem(fc0865, FemFunc);
    Femdata: FemFunc _t08D4 = extractFem(fc0865, FemFunc);
    Femdata: Space _t08D5 = extractFem(_t08D4, Space);
    int _t08D6 = extractFemItem(CellIndex(FuncCell), int, fc0865);
    field(2)[] _t08D7 = femField(_t08D3,_t08D6,field(2)[],refField,);
    real fmVal08D8 = prim @00A5<#∞; %2; $[]> (_t08D7, invertC08D2);
    real _t08D9 = rayVec084C[2];
    real _t08DA = prim *0034 (_t08D9, cup08C3);
    real _t08DB = prim -0026<$[]> (fmVal08D8, _t08DA);
    real _t08DC = rayOrig084B[2];
    real fm08DD = prim -0026<$[]> (_t08DB, _t08DC);
    string _t08DE = "all vals:";
    vec3 _t08DF = [fa08A8, fm08DD, fb08B3];
    string _t08E0 = "\n";
    print (_t08DE, _t08DF, _t08E0);
    int _t08E1 = 1;
    intersectionItter085E = prim +0015 (intersectionItter085E, _t08E1);
    int _t08E2;
    real _t096C = 0.e0;
    bool _t096D = prim >0080 (fa08A8, _t096C);
    if _t096D {
      int _t096E = 1;
      _t08E2 = _t096E;
    } else {
      real _t096F = 0.e0;
      bool _t0970 = prim <007A (fa08A8, _t096F);
      if _t0970 {
        int _t0971 = -1;
        _t08E2 = _t0971;
      } else {
        int _t0972 = 0;
        _t08E2 = _t0972;
      }
    }
    int _t08E3;
    real _t0965 = 0.e0;
    bool _t0966 = prim >0080 (fm08DD, _t0965);
    if _t0966 {
      int _t0967 = 1;
      _t08E3 = _t0967;
    } else {
      real _t0968 = 0.e0;
      bool _t0969 = prim <007A (fm08DD, _t0968);
      if _t0969 {
        int _t096A = -1;
        _t08E3 = _t096A;
      } else {
        int _t096B = 0;
        _t08E3 = _t096B;
      }
    }
    int _t08E4 = prim *0033 (_t08E2, _t08E3);
    int _t08E5 = 0;
    bool _t08E6 = prim <0079 (_t08E4, _t08E5);
    if _t08E6 {
      e0862 = cup08C3;
    } else {
      int _t08E7;
      real _t095E = 0.e0;
      bool _t095F = prim >0080 (fa08A8, _t095E);
      if _t095F {
        int _t0960 = 1;
        _t08E7 = _t0960;
      } else {
        real _t0961 = 0.e0;
        bool _t0962 = prim <007A (fa08A8, _t0961);
        if _t0962 {
          int _t0963 = -1;
          _t08E7 = _t0963;
        } else {
          int _t0964 = 0;
          _t08E7 = _t0964;
        }
      }
      int _t08E8;
      real _t0957 = 0.e0;
      bool _t0958 = prim >0080 (fm08DD, _t0957);
      if _t0958 {
        int _t0959 = 1;
        _t08E8 = _t0959;
      } else {
        real _t095A = 0.e0;
        bool _t095B = prim <007A (fm08DD, _t095A);
        if _t095B {
          int _t095C = -1;
          _t08E8 = _t095C;
        } else {
          int _t095D = 0;
          _t08E8 = _t095D;
        }
      }
      int _t08E9 = prim *0033 (_t08E7, _t08E8);
      int _t08EA = 0;
      bool _t08EB = prim >007F (_t08E9, _t08EA);
      if _t08EB {
        s0861 = cup08C3;
      }
    }
    string _t08EC = "new interval:";
    vec2 _t08ED = [s0861, e0862];
    string _t08EE = "\n";
    print (_t08EC, _t08ED, _t08EE);
    real _t08EF = prim |()|00B5<$[]> (fm08DD);
    bool _t08F0 = prim <007A (_t08EF, zeroEps0473);
    if _t08F0 {
      real _t08F1 = 0.e0;
      real _t08F2 = 0.e0;
      vec2 grad08F3 = [_t08F1, _t08F2];
      real _t08F5 = prim |()|00B5<$[]> (fm08DD);
      bool _t08F6 = prim <007A (_t08F5, zeroEps0473);
      if _t08F6 {
        Femdata: FemFunc _t08F7 = extractFem(fc0865, FemFunc);
        Femdata: FemFunc _t08F8 = extractFem(fc0865, FemFunc);
        Femdata: Space _t08F9 = extractFem(_t08F8, Space);
        int _t08FA = extractFemItem(CellIndex(FuncCell), int, fc0865);
        field(2)[] _t08FB = femField(_t08F7,_t08FA,field(2)[],refField,);
        Femdata: Mesh _t08FC = extractFem(cc0863, Mesh);
        Femdata: Mesh _t08FD = extractFem(cc0863, Mesh);
        int _t08FE = extractFemItem(CellIndex(MeshCell), int, cc0863);
        field(2)[2] _t08FF = femField(_t08FC,_t08FE,field(2)[2],InvTransform,_msh_newtonInverse04FC );
        field(2)[] _t0900 = prim ∘0164<#∞; %2; $[]; %2; $[2]> (_t08FB, _t08FF);
        field(2)[2] _t0901 = prim ∇00A8<#∞; %2> (_t0900);
        grad08F3 = prim @00A5<#∞; %2; $[2]> (_t0901, midRay08CD);
        out0867 = fmVal08D8;
      }
      string _t0902 = "Out val:";
      string _t0903 = "\n";
      print (_t0902, out0867, _t0903);
      string _t0904 = "Grad val:";
      string _t0905 = "\n";
      print (_t0904, grad08F3, _t0905);
      real _t0906 = 0.1e1;
      real _t0907 = 0.1e1;
      real _t0908 = 0.1e1;
      vec3 mcol0909 = [_t0906, _t0907, _t0908];
      bool _t090A = prim !=0088 (cmin0482, cmax0483);
      if _t090A {
        int _t090B = -1;
        real _t090C = (real)_t090B;
        real _t090D = 0.1e1;
        real _t090E = prim lerp0098<$[]> (_t090C, _t090D, cmin0482, out0867, cmax0483);
        mcol0909 = prim @00A5<#0; %1; $[3]> (CM082A, _t090E);
      }
      if light0484 {
        real _t090F = grad08F3[0];
        real _t0910 = grad08F3[1];
        int _t0911 = -1;
        real _t0912 = (real)_t0911;
        vec3 _t0913 = [_t090F, _t0910, _t0912];
        vec3 N0914 = prim normalize0137<$[3]> (_t0913);
        vec3 _t0915 = prim normalize0137<$[3]> (rayVec084C);
        vec3 _t0916 = prim unary -008B<$[3]> (_t0915);
        vec3 _t0917 = prim +0017<$[3]> (_t0916, L082E);
        vec3 H0918 = prim normalize0137<$[3]> (_t0917);
        vec3 lightColor0919 = prim lerp0098<$[3]> (mcnear0478, mcfar047C, camNearVsp0851, cup08C3, camFarVsp0852);
        vec3 ambientTerm091A = prim *0036<$[3]> (phongKa0485, mcol0909);
        vec3 _t091B = prim modulate0129<%3> (mcol0909, lightColor0919);
        vec3 _t091C = prim *0036<$[3]> (phongKd0486, _t091B);
        real _t091D = 0.e0;
        real _t091E = prim •00CE<$[3]; $[3]; $[]> (N0914, L082E);
        real _t091F = prim max0125 (_t091D, _t091E);
        vec3 diffuse0920 = prim *0038<$[3]> (_t091C, _t091F);
        vec3 _t0921 = prim *0036<$[3]> (phongKs0487, lightColor0919);
        real _t0922 = 0.e0;
        real _t0923 = prim •00CE<$[3]; $[3]; $[]> (N0914, H0918);
        real _t0924 = prim max0125 (_t0922, _t0923);
        real _t0925 = prim ^0069 (_t0924, phongSp0488);
        vec3 specular0926 = prim *0038<$[3]> (_t0921, _t0925);
        vec3 _t0927 = prim +0017<$[3]> (ambientTerm091A, diffuse0920);
        vec3 fin0928 = prim +0017<$[3]> (_t0927, specular0926);
        real _t0929 = fin0928[0];
        real _t092A = fin0928[1];
        real _t092B = fin0928[2];
        real _t092C = 0.1e1;
        rgba0868 = [_t0929, _t092A, _t092B, _t092C];
      } else {
        real _t092D = mcol0909[0];
        real _t092E = mcol0909[1];
        real _t092F = mcol0909[2];
        real _t0930 = 0.1e1;
        rgba0868 = [_t092D, _t092E, _t092F, _t0930];
      }
      vec3 _t0931 = prim *0038<$[3]> (rayVec084C, cup08C3);
      vec3 _t0932 = prim +0017<$[3]> (_t0931, rayOrig084B);
      vec3[1] _t0933 = {_t0932};
      vec3[] _t0934 = (vec3[])_t0933;
      locs086D = _t0934;
      stabilize;
    }
    int _t0935 = 32;
    bool _t0936 = prim >007F (intersectionItter085E, _t0935);
    if _t0936 {
      intersectionItter085E = 0;
      int _t0937 = 1;
      itter085D = prim +0015 (itter085D, _t0937);
      bool _t0938 = prim >=007D (itter085D, len0858);
      if _t0938 {
        string _t0939 = "No intersection found\n";
        print (_t0939);
        string _t093A = "Fin pixel=============================\n";
        print (_t093A);
        stabilize;
      }
      int _t093B = prim +0015 (offset0855, itter085D);
      interval0860 = prim $dynsub01C2<vec2> (times0476, _t093B);
      int _t093C = prim +0015 (offset0855, itter085D);
      int _t093D = prim $dynsub01C2<int> (cells0477, _t093C);
      cc0863 = prim $dynsub01C2<Femdata: MeshCell> (0cell_a0464, _t093D);
      s0861 = interval0860[0];
      e0862 = interval0860[1];
      Femdata: FuncCell fc0954;
      int _t0955 = extractFemItem(CellIndex(MeshCell), int, cc0863);
      Femdata: FuncCell _t0956 = loadFem(FuncCell, c0471, _t0955);
      fc0954 = _t0956;
      fc0865 = fc0954;
      string _t093E = "++++++++++++++++Next interval!+++++++++++++++++++\n";
      print (_t093E);
      continue;
    } else {
      string _t093F = "---------------\n";
      print (_t093F);
    }
  }
}
grid(2) {
  int _t0940 = 0;
  int _t0941 = 1;
  int _t0942 = prim -0024 (iresU045D, _t0941);
  int[] _t0943 = prim $range01C3 (_t0940, _t0942);
  foreach vi0949 in _t0943 {
    int _t0944 = 0;
    int _t0945 = 1;
    int _t0946 = prim -0024 (iresV045E, _t0945);
    int[] _t0947 = prim $range01C3 (_t0944, _t0946);
    foreach ui0948 in _t0947 {
      new ray (ui0948, vi0949);
    }
  }
}
/* Program end */
/* Simplified Program (after after contraction (2)) start */
properties: GlobalInit,StrandArray,HasStartMethod,ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[]),HasInputs,HasGlobals
input real isoval044E = <default>;
input real thick044F = <default>;
input vec3 camEye0450 = <default>;
input vec3 camAt0454 = <default>;
input vec3 camUp0458 = <default>;
input real camFOV045C = <default>;
input int iresU045D = <default>;
input int iresV045E = <default>;
input real camNear045F = <default>;
input real camFar0460 = <default>;
input real refStep0461 = <default>;
input real rayStep0462 = <default>;
input FemData:Mesh a0463;
input FemData:Space 0b046F_intermedateGlobal0470;
input FemData:FemFunc 0c0471_intermedateGlobal0472;
input real zeroEps0473 = <default>;
input real intervalEps0474 = <default>;
input int[] indecies0475;
input vec2[] times0476;
input int[] cells0477;
input vec3 mcnear0478("material color at near clipping plane (for depth cuing)") = <default>;
input vec3 mcfar047C("material color at far clipping plane") = <default>;
input image(1)[3] cmap0481("univariate colormap") = image("/home/teocollin/gitcode/diderot/tests/lipRay/find/cmap.nrrd");
input real cmin0482("value mapped to min end of colormap") = <default>;
input real cmax0483("value mapped to max end of colormap. By default cmin==cmax==0, which disables this colormapping") = <default>;
input bool light0484 = <default>;
input real phongKa0485("Blinn-Phong ambient component") = <default>;
input real phongKd0486("Blinn-Phong diffuse component") = <default>;
input real phongKs0487("Blinn-Phong specular component") = <default>;
input real phongSp0488("Blinn-Phong specularity exponent") = <default>;
input real maxAlpha0489("maximum opacity on rendered surface") = <default>;
input vec3 lightVsp048A = <default>;
input bool debug048E = <default>;
input int debugU048F = <default>;
input int debugV0490 = <default>;
constants {
  isoval044E = 0.2e0;
  thick044F = 0.7e-1;
  real _t0451 = 0.3e1;
  real _t0452 = -0.3e1;
  real _t0453 = 0.3e1;
  camEye0450 = [_t0451, _t0452, _t0453];
  real _t0455 = 0.5e0;
  real _t0456 = 0.5e0;
  real _t0457 = 0.5e0;
  camAt0454 = [_t0455, _t0456, _t0457];
  real _t0459 = 0.e0;
  real _t045A = 0.e0;
  real _t045B = 0.1e1;
  camUp0458 = [_t0459, _t045A, _t045B];
  camFOV045C = 0.137e2;
  iresU045D = 10;
  iresV045E = 10;
  camNear045F = -0.2e1;
  camFar0460 = 0.5e1;
  refStep0461 = 0.1e1;
  rayStep0462 = 0.1e-1;
  zeroEps0473 = 0.1e-10;
  intervalEps0474 = 0.1e-10;
  real _t0479 = 0.1e1;
  real _t047A = 0.1e1;
  real _t047B = 0.1e1;
  mcnear0478 = [_t0479, _t047A, _t047B];
  real _t047D = 0.1e1;
  real _t047E = 0.1e1;
  real _t047F = 0.1e1;
  mcfar047C = [_t047D, _t047E, _t047F];
  cmin0482 = 0.e0;
  cmax0483 = 0.1e1;
  light0484 = false;
  phongKa0485 = 0.5e0;
  phongKd0486 = 0.5e0;
  phongKs0487 = 0.e0;
  phongSp0488 = 0.6e2;
  maxAlpha0489 = 0.1e1;
  real _t048B = 0.e0;
  real _t048C = 0.369e1;
  real _t048D = 0.153e1;
  lightVsp048A = [_t048B, _t048C, _t048D];
  debug048E = false;
  debugU048F = 8;
  debugV0490 = 2;
}
global Femdata: MeshCell[] 0cell_a0464;
global Femdata: Space b046F;
global Femdata: FemFunc c0471;
global real camDist0816;
global real camNearVsp0817;
global real camFarVsp0818;
global vec3 camN081A;
global vec3 camU081C;
global vec3 camV081D;
global real camVmax0823;
global real camUmax0827;
global field#0(1)[3] CM082A;
global vec3 L082E;
function Femdata: MeshPos#4 _msh_newtonInverse04FC (vec2 pos04FD, int cellInt04FE, Femdata: Mesh mesh04FF)
{
  real _t0500 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t0501 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  xn0502 = [_t0500, _t0501];
  field(2)[2] _t0503 = femField(mesh04FF,cellInt04FE,field(2)[2],Transform,);
  field(2)[2,2] _t0504 = prim ∇⊗00AD<#∞; %2; $[]; %2> (_t0503);
  field(2)[2,2] _t0505 = prim inv015B<#∞; %2> (_t0504);
  real _t0506 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t0507 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  vec2 _t0508 = [_t0506, _t0507];
  A0509 = prim @00A5<#∞; %2; $[2,2]> (_t0505, _t0508);
  int _t050A = 0;
  int _t050B = 16;
  int[] _t050C = prim $range01C3 (_t050A, _t050B);
  foreach itter0530 in _t050C {
    field(2)[2] _t050D = femField(mesh04FF,cellInt04FE,field(2)[2],Transform,);
    field(2)[2] _t050E = prim -002E<#∞; %2; $[2]> (_t050D, pos04FD);
    field(2)[2] _t050F = prim •00D4<#∞; %2; $[2,2]; $[2]; $[2]> (A0509, _t050E);
    delta0510 = prim @00A5<#∞; %2; $[2]> (_t050F, xn0502);
    xn0502 = prim -0026<$[2]> (xn0502, delta0510);
    real _t0511 = 0.1e-7;
    real _t0512 = 0.1e-7;
    real _t0513 = prim *0034 (_t0511, _t0512);
    real _t0514 = prim •00CE<$[2]; $[2]; $[]> (delta0510, delta0510);
    bool _t0515 = prim >=007E (_t0513, _t0514);
    if _t0515 {
      real _t0516 = 0.1e1;
      real _t0517 = 0.1e-8;
      real _t0518 = prim +0017<$[]> (_t0516, _t0517);
      real _t0519 = 0.1e1;
      real _t051A = 0.1e1;
      vec2 _t051B = [_t0519, _t051A];
      real _t051C = prim •00CE<$[2]; $[2]; $[]> (_t051B, xn0502);
      bool _t051D = prim >0080 (_t0518, _t051C);
      real _t051E = 0.1e-8;
      real _t051F = 0.1e-8;
      vec2 _t0520 = [_t051E, _t051F];
      vec2 _t0521 = prim +0017<$[2]> (_t0520, xn0502);
      real _t0522 = _t0521[0];
      real _t0523 = -0.e0;
      bool _t0524 = prim >0080 (_t0522, _t0523);
      real _t0525 = 0.1e-8;
      real _t0526 = 0.1e-8;
      vec2 _t0527 = [_t0525, _t0526];
      vec2 _t0528 = prim +0017<$[2]> (_t0527, xn0502);
      real _t0529 = _t0528[1];
      real _t052A = -0.e0;
      bool _t052B = prim >0080 (_t0529, _t052A);
      bool _t052C = prim $and01C4 (_t0524, _t052B);
      bool _t052D = prim $and01C4 (_t051D, _t052C);
      if _t052D {
        Femdata: MeshPos _t052E = extractFemItemN((mesh04FF, cellInt04FE, xn0502, pos04FD),AllBuild(MeshPos),);
        return _t052E;
      } else {
        Femdata: MeshPos _t052F = extractFemItemN((mesh04FF),InvalidBuild(MeshPos),);
        return _t052F;
      }
    }
  }
  Femdata: MeshPos _t0531 = extractFemItemN((mesh04FF),InvalidBuild(MeshPos),);
  return _t0531;
}
function int[2]#5 nextCell40548 (int faceIdx05BB, int cell05BC, Femdata: Mesh mesh05BD)
{
  int _t05BE = 6;
  int _t05BF = prim *0033 (cell05BC, _t05BE);
  int _t05C0 = 2;
  int _t05C1 = prim *0033 (faceIdx05BB, _t05C0);
  int _t05C2 = prim +0015 (_t05BF, _t05C1);
  int[2] _t05C3 = extractFemItemN((mesh05BD, _t05C2),CellFaceCell(Mesh),);
  return _t05C3;
}
globalInit {
  int _t0467 = 0;
  int _t0465 = 1;
  int _t0469 = extractFemItem(NumCell(Mesh), int, a0463);
  int _t0468 = prim -0024 (_t0469, _t0465);
  int[] _t046C = prim $range01C3 (_t0467, _t0468);
  Femdata: MeshCell[] _t046D = {};
  foreach _t046B in _t046C {
    Femdata: MeshCell _t046E = loadFem(MeshCell, a0463, _t046B);
    _t046D = prim @0010<Femdata: MeshCell> (_t046D, _t046E);
  }
  0cell_a0464 = _t046D;
  b046F = loadFem(Space, 0b046F_intermedateGlobal0470, a0463);
  c0471 = loadFem(FemFunc, 0c0471_intermedateGlobal0472, b046F);
  vec3 _t0815 = prim -0026<$[3]> (camAt0454, camEye0450);
  camDist0816 = prim |()|00B5<$[3]> (_t0815);
  camNearVsp0817 = prim +0017<$[]> (camNear045F, camDist0816);
  camFarVsp0818 = prim +0017<$[]> (camFar0460, camDist0816);
  vec3 _t0819 = prim -0026<$[3]> (camAt0454, camEye0450);
  camN081A = prim normalize0137<$[3]> (_t0819);
  vec3 _t081B = prim ×00BE (camN081A, camUp0458);
  camU081C = prim normalize0137<$[3]> (_t081B);
  camV081D = prim ×00BE (camU081C, camN081A);
  real _t081E = 0.314159265358979323846264338327950288e1;
  real _t081F = prim *0034 (camFOV045C, _t081E);
  real _t0820 = 0.36e3;
  real _t0821 = prim /0055 (_t081F, _t0820);
  real _t0822 = prim tan0179 (_t0821);
  camVmax0823 = prim *0034 (_t0822, camDist0816);
  real _t0824 = (real)iresU045D;
  real _t0825 = prim *0034 (camVmax0823, _t0824);
  real _t0826 = (real)iresV045E;
  camUmax0827 = prim /0055 (_t0825, _t0826);
  kernel _t0828 = tent;
  IMAGE1D<double[3]> img0829 = clamp(cmap0481);
  CM082A = prim ⊛0074<#0; %1; $[3]> (_t0828, img0829);
  tensor[3,3] _t082B = [camU081C, camV081D, camN081A];
  tensor[3,3] _t082C = prim transpose0145<%3; %3> (_t082B);
  vec3 _t082D = prim normalize0137<$[3]> (lightVsp048A);
  L082E = prim •00CE<$[3,3]; $[3]; $[3]> (_t082C, _t082D);
}
strand ray (int ui0838, int vi0839) {
  real rayU083A;
  real rayV0841;
  vec3 UV0848;
  vec3 rayOrig084B;
  vec3 rayVec084C;
  real camNearVsp0851;
  real camFarVsp0852;
  int offset0855;
  int len0858;
  int itter085D;
  int intersectionItter085E;
  int idx085F;
  vec2 interval0860;
  real s0861;
  real e0862;
  Femdata: MeshCell cc0863;
  Femdata: FuncCell fc0865;
  output real out0867;
  output vec4 rgba0868;
  output vec3[] locs086D;
  {
    real _t083B = prim unary -008B<$[]> (camUmax0827);
    real _t083C = -0.5e0;
    real _t083D = (real)ui0838;
    real _t083E = (real)iresU045D;
    real _t083F = 0.5e0;
    real _t0840 = prim -0026<$[]> (_t083E, _t083F);
    rayU083A = prim lerp0098<$[]> (_t083B, camUmax0827, _t083C, _t083D, _t0840);
    real _t0842 = prim unary -008B<$[]> (camVmax0823);
    real _t0843 = -0.5e0;
    real _t0844 = (real)vi0839;
    real _t0845 = (real)iresV045E;
    real _t0846 = 0.5e0;
    real _t0847 = prim -0026<$[]> (_t0845, _t0846);
    rayV0841 = prim lerp0098<$[]> (_t0842, camVmax0823, _t0843, _t0844, _t0847);
    vec3 _t0849 = prim *0036<$[3]> (rayU083A, camU081C);
    vec3 _t084A = prim *0036<$[3]> (rayV0841, camV081D);
    UV0848 = prim +0017<$[3]> (_t0849, _t084A);
    rayOrig084B = prim +0017<$[3]> (camEye0450, UV0848);
    real _t084D = 0.e0;
    real _t084E = 0.e0;
    real _t084F = 0.e0;
    vec3 _t0850 = [_t084D, _t084E, _t084F];
    rayVec084C = prim +0017<$[3]> (camN081A, _t0850);
    camNearVsp0851 = camNearVsp0817;
    camFarVsp0852 = camFarVsp0818;
    int _t0856 = prim *0033 (ui0838, iresV045E);
    int _t0857 = prim +0015 (_t0856, vi0839);
    offset0855 = prim $dynsub01C2<int> (indecies0475, _t0857);
    int _t0859 = prim *0033 (iresU045D, iresV045E);
    int _t085A = prim *0033 (ui0838, iresV045E);
    int _t085B = prim +0015 (_t0859, _t085A);
    int _t085C = prim +0015 (_t085B, vi0839);
    len0858 = prim $dynsub01C2<int> (indecies0475, _t085C);
    itter085D = 0;
    intersectionItter085E = 0;
    idx085F = prim +0015 (offset0855, itter085D);
    interval0860 = prim $dynsub01C2<vec2> (times0476, idx085F);
    s0861 = interval0860[0];
    e0862 = interval0860[1];
    int _t0864 = 0;
    cc0863 = prim $dynsub01C2<Femdata: MeshCell> (0cell_a0464, _t0864);
    Femdata: FuncCell fc094E;
    int _t094F = extractFemItem(CellIndex(MeshCell), int, cc0863);
    Femdata: FuncCell _t0950 = loadFem(FuncCell, c0471, _t094F);
    fc094E = _t0950;
    fc0865 = fc094E;
    out0867 = 0.e0;
    real _t0869 = 0.e0;
    real _t086A = 0.e0;
    real _t086B = 0.e0;
    real _t086C = 0.e0;
    rgba0868 = [_t0869, _t086A, _t086B, _t086C];
    vec3[0] _t086E = {};
    vec3[] _t086F = (vec3[])_t086E;
    locs086D = _t086F;
  }
  start
  {
    if debug048E {
      bool _t0870 = prim !=0086 (ui0838, debugU048F);
      if _t0870 {
        bool _t0871 = prim !=0086 (vi0839, debugV0490);
        if _t0871 {
          stabilize;
        }
      }
    }
    int _t0872 = 0;
    bool _t0873 = prim ==0082 (len0858, _t0872);
    if _t0873 {
      string _t0874 = "(find:)No intersection found:";
      string _t0875 = "/";
      string _t0876 = "\n";
      print (_t0874, ui0838, _t0875, vi0839, _t0876);
      stabilize;
    }
    int _t0877 = prim $dynsub01C2<int> (cells0477, idx085F);
    cc0863 = prim $dynsub01C2<Femdata: MeshCell> (0cell_a0464, _t0877);
    Femdata: FuncCell fc0951;
    int _t0952 = extractFemItem(CellIndex(MeshCell), int, cc0863);
    Femdata: FuncCell _t0953 = loadFem(FuncCell, c0471, _t0952);
    fc0951 = _t0953;
    fc0865 = fc0951;
  }
  update
  {
    string _t0878 = "Ui/Vi::";
    string _t0879 = "/";
    string _t087A = "\n";
    print (_t0878, ui0838, _t0879, vi0839, _t087A);
    string _t087B = "Interval:";
    vec2 _t087C = [s0861, e0862];
    string _t087D = "\n";
    print (_t087B, _t087C, _t087D);
    string _t087E = "inner itter:";
    string _t087F = "\n";
    print (_t087E, intersectionItter085E, _t087F);
    string _t0880 = "Outer itter:";
    string _t0881 = "\n";
    print (_t0880, itter085D, _t0881);
    real _t0882 = rayOrig084B[0];
    real _t0883 = rayOrig084B[1];
    vec2 _t0884 = [_t0882, _t0883];
    real _t0885 = rayVec084C[0];
    real _t0886 = rayVec084C[1];
    vec2 _t0887 = [_t0885, _t0886];
    vec2 _t0888 = prim *0036<$[2]> (s0861, _t0887);
    vec2 startRay0889 = prim +0017<$[2]> (_t0884, _t0888);
    real _t088A = rayOrig084B[0];
    real _t088B = rayOrig084B[1];
    vec2 _t088C = [_t088A, _t088B];
    real _t088D = rayVec084C[0];
    real _t088E = rayVec084C[1];
    vec2 _t088F = [_t088D, _t088E];
    vec2 _t0890 = prim *0036<$[2]> (e0862, _t088F);
    vec2 endRay0891 = prim +0017<$[2]> (_t088C, _t0890);
    Femdata: Mesh _t0892 = extractFem(cc0863, Mesh);
    Femdata: Mesh _t0893 = extractFem(cc0863, Mesh);
    int _t0894 = extractFemItem(CellIndex(MeshCell), int, cc0863);
    field(2)[2] _t0895 = femField(_t0892,_t0894,field(2)[2],InvTransform,_msh_newtonInverse04FC );
    vec2 invertA0896 = prim @00A5<#∞; %2; $[2]> (_t0895, startRay0889);
    Femdata: Mesh _t0897 = extractFem(cc0863, Mesh);
    Femdata: Mesh _t0898 = extractFem(cc0863, Mesh);
    int _t0899 = extractFemItem(CellIndex(MeshCell), int, cc0863);
    field(2)[2] _t089A = femField(_t0897,_t0899,field(2)[2],InvTransform,_msh_newtonInverse04FC );
    vec2 invertB089B = prim @00A5<#∞; %2; $[2]> (_t089A, endRay0891);
    string _t089C = "inverses:";
    string _t089D = "\n";
    print (_t089C, invertA0896, invertB089B, _t089D);
    Femdata: FemFunc _t089E = extractFem(fc0865, FemFunc);
    Femdata: FemFunc _t089F = extractFem(fc0865, FemFunc);
    Femdata: Space _t08A0 = extractFem(_t089F, Space);
    int _t08A1 = extractFemItem(CellIndex(FuncCell), int, fc0865);
    field(2)[] _t08A2 = femField(_t089E,_t08A1,field(2)[],refField,);
    real faVal08A3 = prim @00A5<#∞; %2; $[]> (_t08A2, invertA0896);
    real _t08A4 = rayVec084C[2];
    real _t08A5 = prim *0034 (_t08A4, s0861);
    real _t08A6 = prim -0026<$[]> (faVal08A3, _t08A5);
    real _t08A7 = rayOrig084B[2];
    real fa08A8 = prim -0026<$[]> (_t08A6, _t08A7);
    Femdata: FemFunc _t08A9 = extractFem(fc0865, FemFunc);
    Femdata: FemFunc _t08AA = extractFem(fc0865, FemFunc);
    Femdata: Space _t08AB = extractFem(_t08AA, Space);
    int _t08AC = extractFemItem(CellIndex(FuncCell), int, fc0865);
    field(2)[] _t08AD = femField(_t08A9,_t08AC,field(2)[],refField,);
    real _t08AE = prim @00A5<#∞; %2; $[]> (_t08AD, invertB089B);
    real _t08AF = rayVec084C[2];
    real _t08B0 = prim *0034 (_t08AF, e0862);
    real _t08B1 = prim -0026<$[]> (_t08AE, _t08B0);
    real _t08B2 = rayOrig084B[2];
    real fb08B3 = prim -0026<$[]> (_t08B1, _t08B2);
    string _t08B4 = "Vals:";
    vec2 _t08B5 = [fa08A8, fb08B3];
    string _t08B6 = "\n";
    print (_t08B4, _t08B5, _t08B6);
    real _t08B7 = prim -0026<$[]> (fa08A8, fb08B3);
    real _t08B8 = prim |()|00B5<$[]> (_t08B7);
    bool _t08B9 = prim <007A (_t08B8, intervalEps0474);
    if _t08B9 {
      real _t08BA = prim |()|00B5<$[]> (fa08A8);
      bool _t08BB = prim >0080 (_t08BA, intervalEps0474);
      if _t08BB {
        real _t08BC = prim |()|00B5<$[]> (fb08B3);
        bool _t08BD = prim >0080 (_t08BC, intervalEps0474);
        if _t08BD {
          string _t08BE = "warn\n";
          print (_t08BE);
          s0861 = prim +0017<$[]> (s0861, intervalEps0474);
          continue;
        }
      }
    }
    real _t08BF = prim *0034 (s0861, fb08B3);
    real _t08C0 = prim *0034 (e0862, fa08A8);
    real _t08C1 = prim -0026<$[]> (_t08BF, _t08C0);
    real _t08C2 = prim -0026<$[]> (fb08B3, fa08A8);
    real cup08C3 = prim /0055 (_t08C1, _t08C2);
    string _t08C4 = "Mid time:";
    string _t08C5 = "\n";
    print (_t08C4, cup08C3, _t08C5);
    real _t08C6 = rayOrig084B[0];
    real _t08C7 = rayOrig084B[1];
    vec2 _t08C8 = [_t08C6, _t08C7];
    real _t08C9 = rayVec084C[0];
    real _t08CA = rayVec084C[1];
    vec2 _t08CB = [_t08C9, _t08CA];
    vec2 _t08CC = prim *0036<$[2]> (cup08C3, _t08CB);
    vec2 midRay08CD = prim +0017<$[2]> (_t08C8, _t08CC);
    Femdata: Mesh _t08CE = extractFem(cc0863, Mesh);
    Femdata: Mesh _t08CF = extractFem(cc0863, Mesh);
    int _t08D0 = extractFemItem(CellIndex(MeshCell), int, cc0863);
    field(2)[2] _t08D1 = femField(_t08CE,_t08D0,field(2)[2],InvTransform,_msh_newtonInverse04FC );
    vec2 invertC08D2 = prim @00A5<#∞; %2; $[2]> (_t08D1, midRay08CD);
    Femdata: FemFunc _t08D3 = extractFem(fc0865, FemFunc);
    Femdata: FemFunc _t08D4 = extractFem(fc0865, FemFunc);
    Femdata: Space _t08D5 = extractFem(_t08D4, Space);
    int _t08D6 = extractFemItem(CellIndex(FuncCell), int, fc0865);
    field(2)[] _t08D7 = femField(_t08D3,_t08D6,field(2)[],refField,);
    real fmVal08D8 = prim @00A5<#∞; %2; $[]> (_t08D7, invertC08D2);
    real _t08D9 = rayVec084C[2];
    real _t08DA = prim *0034 (_t08D9, cup08C3);
    real _t08DB = prim -0026<$[]> (fmVal08D8, _t08DA);
    real _t08DC = rayOrig084B[2];
    real fm08DD = prim -0026<$[]> (_t08DB, _t08DC);
    string _t08DE = "all vals:";
    vec3 _t08DF = [fa08A8, fm08DD, fb08B3];
    string _t08E0 = "\n";
    print (_t08DE, _t08DF, _t08E0);
    int _t08E1 = 1;
    intersectionItter085E = prim +0015 (intersectionItter085E, _t08E1);
    int _t08E2;
    real _t096C = 0.e0;
    bool _t096D = prim >0080 (fa08A8, _t096C);
    if _t096D {
      int _t096E = 1;
      _t08E2 = _t096E;
    } else {
      real _t096F = 0.e0;
      bool _t0970 = prim <007A (fa08A8, _t096F);
      if _t0970 {
        int _t0971 = -1;
        _t08E2 = _t0971;
      } else {
        int _t0972 = 0;
        _t08E2 = _t0972;
      }
    }
    int _t08E3;
    real _t0965 = 0.e0;
    bool _t0966 = prim >0080 (fm08DD, _t0965);
    if _t0966 {
      int _t0967 = 1;
      _t08E3 = _t0967;
    } else {
      real _t0968 = 0.e0;
      bool _t0969 = prim <007A (fm08DD, _t0968);
      if _t0969 {
        int _t096A = -1;
        _t08E3 = _t096A;
      } else {
        int _t096B = 0;
        _t08E3 = _t096B;
      }
    }
    int _t08E4 = prim *0033 (_t08E2, _t08E3);
    int _t08E5 = 0;
    bool _t08E6 = prim <0079 (_t08E4, _t08E5);
    if _t08E6 {
      e0862 = cup08C3;
    } else {
      int _t08E7;
      real _t095E = 0.e0;
      bool _t095F = prim >0080 (fa08A8, _t095E);
      if _t095F {
        int _t0960 = 1;
        _t08E7 = _t0960;
      } else {
        real _t0961 = 0.e0;
        bool _t0962 = prim <007A (fa08A8, _t0961);
        if _t0962 {
          int _t0963 = -1;
          _t08E7 = _t0963;
        } else {
          int _t0964 = 0;
          _t08E7 = _t0964;
        }
      }
      int _t08E8;
      real _t0957 = 0.e0;
      bool _t0958 = prim >0080 (fm08DD, _t0957);
      if _t0958 {
        int _t0959 = 1;
        _t08E8 = _t0959;
      } else {
        real _t095A = 0.e0;
        bool _t095B = prim <007A (fm08DD, _t095A);
        if _t095B {
          int _t095C = -1;
          _t08E8 = _t095C;
        } else {
          int _t095D = 0;
          _t08E8 = _t095D;
        }
      }
      int _t08E9 = prim *0033 (_t08E7, _t08E8);
      int _t08EA = 0;
      bool _t08EB = prim >007F (_t08E9, _t08EA);
      if _t08EB {
        s0861 = cup08C3;
      }
    }
    string _t08EC = "new interval:";
    vec2 _t08ED = [s0861, e0862];
    string _t08EE = "\n";
    print (_t08EC, _t08ED, _t08EE);
    real _t08EF = prim |()|00B5<$[]> (fm08DD);
    bool _t08F0 = prim <007A (_t08EF, zeroEps0473);
    if _t08F0 {
      real _t08F1 = 0.e0;
      real _t08F2 = 0.e0;
      vec2 grad08F3 = [_t08F1, _t08F2];
      real _t08F5 = prim |()|00B5<$[]> (fm08DD);
      bool _t08F6 = prim <007A (_t08F5, zeroEps0473);
      if _t08F6 {
        Femdata: FemFunc _t08F7 = extractFem(fc0865, FemFunc);
        Femdata: FemFunc _t08F8 = extractFem(fc0865, FemFunc);
        Femdata: Space _t08F9 = extractFem(_t08F8, Space);
        int _t08FA = extractFemItem(CellIndex(FuncCell), int, fc0865);
        field(2)[] _t08FB = femField(_t08F7,_t08FA,field(2)[],refField,);
        Femdata: Mesh _t08FC = extractFem(cc0863, Mesh);
        Femdata: Mesh _t08FD = extractFem(cc0863, Mesh);
        int _t08FE = extractFemItem(CellIndex(MeshCell), int, cc0863);
        field(2)[2] _t08FF = femField(_t08FC,_t08FE,field(2)[2],InvTransform,_msh_newtonInverse04FC );
        field(2)[] _t0900 = prim ∘0164<#∞; %2; $[]; %2; $[2]> (_t08FB, _t08FF);
        field(2)[2] _t0901 = prim ∇00A8<#∞; %2> (_t0900);
        grad08F3 = prim @00A5<#∞; %2; $[2]> (_t0901, midRay08CD);
        out0867 = fmVal08D8;
      }
      string _t0902 = "Out val:";
      string _t0903 = "\n";
      print (_t0902, out0867, _t0903);
      string _t0904 = "Grad val:";
      string _t0905 = "\n";
      print (_t0904, grad08F3, _t0905);
      real _t0906 = 0.1e1;
      real _t0907 = 0.1e1;
      real _t0908 = 0.1e1;
      vec3 mcol0909 = [_t0906, _t0907, _t0908];
      bool _t090A = prim !=0088 (cmin0482, cmax0483);
      if _t090A {
        int _t090B = -1;
        real _t090C = (real)_t090B;
        real _t090D = 0.1e1;
        real _t090E = prim lerp0098<$[]> (_t090C, _t090D, cmin0482, out0867, cmax0483);
        mcol0909 = prim @00A5<#0; %1; $[3]> (CM082A, _t090E);
      }
      if light0484 {
        real _t090F = grad08F3[0];
        real _t0910 = grad08F3[1];
        int _t0911 = -1;
        real _t0912 = (real)_t0911;
        vec3 _t0913 = [_t090F, _t0910, _t0912];
        vec3 N0914 = prim normalize0137<$[3]> (_t0913);
        vec3 _t0915 = prim normalize0137<$[3]> (rayVec084C);
        vec3 _t0916 = prim unary -008B<$[3]> (_t0915);
        vec3 _t0917 = prim +0017<$[3]> (_t0916, L082E);
        vec3 H0918 = prim normalize0137<$[3]> (_t0917);
        vec3 lightColor0919 = prim lerp0098<$[3]> (mcnear0478, mcfar047C, camNearVsp0851, cup08C3, camFarVsp0852);
        vec3 ambientTerm091A = prim *0036<$[3]> (phongKa0485, mcol0909);
        vec3 _t091B = prim modulate0129<%3> (mcol0909, lightColor0919);
        vec3 _t091C = prim *0036<$[3]> (phongKd0486, _t091B);
        real _t091D = 0.e0;
        real _t091E = prim •00CE<$[3]; $[3]; $[]> (N0914, L082E);
        real _t091F = prim max0125 (_t091D, _t091E);
        vec3 diffuse0920 = prim *0038<$[3]> (_t091C, _t091F);
        vec3 _t0921 = prim *0036<$[3]> (phongKs0487, lightColor0919);
        real _t0922 = 0.e0;
        real _t0923 = prim •00CE<$[3]; $[3]; $[]> (N0914, H0918);
        real _t0924 = prim max0125 (_t0922, _t0923);
        real _t0925 = prim ^0069 (_t0924, phongSp0488);
        vec3 specular0926 = prim *0038<$[3]> (_t0921, _t0925);
        vec3 _t0927 = prim +0017<$[3]> (ambientTerm091A, diffuse0920);
        vec3 fin0928 = prim +0017<$[3]> (_t0927, specular0926);
        real _t0929 = fin0928[0];
        real _t092A = fin0928[1];
        real _t092B = fin0928[2];
        real _t092C = 0.1e1;
        rgba0868 = [_t0929, _t092A, _t092B, _t092C];
      } else {
        real _t092D = mcol0909[0];
        real _t092E = mcol0909[1];
        real _t092F = mcol0909[2];
        real _t0930 = 0.1e1;
        rgba0868 = [_t092D, _t092E, _t092F, _t0930];
      }
      vec3 _t0931 = prim *0038<$[3]> (rayVec084C, cup08C3);
      vec3 _t0932 = prim +0017<$[3]> (_t0931, rayOrig084B);
      vec3[1] _t0933 = {_t0932};
      vec3[] _t0934 = (vec3[])_t0933;
      locs086D = _t0934;
      stabilize;
    }
    int _t0935 = 32;
    bool _t0936 = prim >007F (intersectionItter085E, _t0935);
    if _t0936 {
      intersectionItter085E = 0;
      int _t0937 = 1;
      itter085D = prim +0015 (itter085D, _t0937);
      bool _t0938 = prim >=007D (itter085D, len0858);
      if _t0938 {
        string _t0939 = "No intersection found\n";
        print (_t0939);
        string _t093A = "Fin pixel=============================\n";
        print (_t093A);
        stabilize;
      }
      int _t093B = prim +0015 (offset0855, itter085D);
      interval0860 = prim $dynsub01C2<vec2> (times0476, _t093B);
      int _t093C = prim +0015 (offset0855, itter085D);
      int _t093D = prim $dynsub01C2<int> (cells0477, _t093C);
      cc0863 = prim $dynsub01C2<Femdata: MeshCell> (0cell_a0464, _t093D);
      s0861 = interval0860[0];
      e0862 = interval0860[1];
      Femdata: FuncCell fc0954;
      int _t0955 = extractFemItem(CellIndex(MeshCell), int, cc0863);
      Femdata: FuncCell _t0956 = loadFem(FuncCell, c0471, _t0955);
      fc0954 = _t0956;
      fc0865 = fc0954;
      string _t093E = "++++++++++++++++Next interval!+++++++++++++++++++\n";
      print (_t093E);
      continue;
    } else {
      string _t093F = "---------------\n";
      print (_t093F);
    }
  }
}
grid(2) {
  int _t0940 = 0;
  int _t0941 = 1;
  int _t0942 = prim -0024 (iresU045D, _t0941);
  int[] _t0943 = prim $range01C3 (_t0940, _t0942);
  foreach vi0949 in _t0943 {
    int _t0944 = 0;
    int _t0945 = 1;
    int _t0946 = prim -0024 (iresV045E, _t0945);
    int[] _t0947 = prim $range01C3 (_t0944, _t0946);
    foreach ui0948 in _t0947 {
      new ray (ui0948, vi0949);
    }
  }
}
/* Program end */
/* Simplified Program (after after simplify fields) start */
properties: GlobalInit,StrandArray,HasStartMethod,ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[]),HasInputs,HasGlobals
input real isoval044E = <default>;
input real thick044F = <default>;
input vec3 camEye0450 = <default>;
input vec3 camAt0454 = <default>;
input vec3 camUp0458 = <default>;
input real camFOV045C = <default>;
input int iresU045D = <default>;
input int iresV045E = <default>;
input real camNear045F = <default>;
input real camFar0460 = <default>;
input real refStep0461 = <default>;
input real rayStep0462 = <default>;
input FemData:Mesh a0463;
input FemData:Space 0b046F_intermedateGlobal0470;
input FemData:FemFunc 0c0471_intermedateGlobal0472;
input real zeroEps0473 = <default>;
input real intervalEps0474 = <default>;
input int[] indecies0475;
input vec2[] times0476;
input int[] cells0477;
input vec3 mcnear0478("material color at near clipping plane (for depth cuing)") = <default>;
input vec3 mcfar047C("material color at far clipping plane") = <default>;
input image(1)[3] cmap0481("univariate colormap") = image("/home/teocollin/gitcode/diderot/tests/lipRay/find/cmap.nrrd");
input real cmin0482("value mapped to min end of colormap") = <default>;
input real cmax0483("value mapped to max end of colormap. By default cmin==cmax==0, which disables this colormapping") = <default>;
input bool light0484 = <default>;
input real phongKa0485("Blinn-Phong ambient component") = <default>;
input real phongKd0486("Blinn-Phong diffuse component") = <default>;
input real phongKs0487("Blinn-Phong specular component") = <default>;
input real phongSp0488("Blinn-Phong specularity exponent") = <default>;
input real maxAlpha0489("maximum opacity on rendered surface") = <default>;
input vec3 lightVsp048A = <default>;
input bool debug048E = <default>;
input int debugU048F = <default>;
input int debugV0490 = <default>;
constants {
  isoval044E = 0.2e0;
  thick044F = 0.7e-1;
  real _t0451 = 0.3e1;
  real _t0452 = -0.3e1;
  real _t0453 = 0.3e1;
  camEye0450 = [_t0451, _t0452, _t0453];
  real _t0455 = 0.5e0;
  real _t0456 = 0.5e0;
  real _t0457 = 0.5e0;
  camAt0454 = [_t0455, _t0456, _t0457];
  real _t0459 = 0.e0;
  real _t045A = 0.e0;
  real _t045B = 0.1e1;
  camUp0458 = [_t0459, _t045A, _t045B];
  camFOV045C = 0.137e2;
  iresU045D = 10;
  iresV045E = 10;
  camNear045F = -0.2e1;
  camFar0460 = 0.5e1;
  refStep0461 = 0.1e1;
  rayStep0462 = 0.1e-1;
  zeroEps0473 = 0.1e-10;
  intervalEps0474 = 0.1e-10;
  real _t0479 = 0.1e1;
  real _t047A = 0.1e1;
  real _t047B = 0.1e1;
  mcnear0478 = [_t0479, _t047A, _t047B];
  real _t047D = 0.1e1;
  real _t047E = 0.1e1;
  real _t047F = 0.1e1;
  mcfar047C = [_t047D, _t047E, _t047F];
  cmin0482 = 0.e0;
  cmax0483 = 0.1e1;
  light0484 = false;
  phongKa0485 = 0.5e0;
  phongKd0486 = 0.5e0;
  phongKs0487 = 0.e0;
  phongSp0488 = 0.6e2;
  maxAlpha0489 = 0.1e1;
  real _t048B = 0.e0;
  real _t048C = 0.369e1;
  real _t048D = 0.153e1;
  lightVsp048A = [_t048B, _t048C, _t048D];
  debug048E = false;
  debugU048F = 8;
  debugV0490 = 2;
}
global Femdata: MeshCell[] 0cell_a0464;
global Femdata: Space b046F;
global Femdata: FemFunc c0471;
global real camDist0816;
global real camNearVsp0817;
global real camFarVsp0818;
global vec3 camN081A;
global vec3 camU081C;
global vec3 camV081D;
global real camVmax0823;
global real camUmax0827;
global field#0(1)[3] CM082A;
global vec3 L082E;
function Femdata: MeshPos#4 _msh_newtonInverse04FC (vec2 pos04FD, int cellInt04FE, Femdata: Mesh mesh04FF)
{
  real _t0500 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t0501 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  xn0502 = [_t0500, _t0501];
  field(2)[2] _t0503 = femField(mesh04FF,cellInt04FE,field(2)[2],Transform,);
  field(2)[2,2] _t0504 = prim ∇⊗00AD<#∞; %2; $[]; %2> (_t0503);
  field(2)[2,2] _t0505 = prim inv015B<#∞; %2> (_t0504);
  real _t0506 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t0507 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  vec2 _t0508 = [_t0506, _t0507];
  A0509 = prim @00A5<#∞; %2; $[2,2]> (_t0505, _t0508);
  int _t050A = 0;
  int _t050B = 16;
  int[] _t050C = prim $range01C3 (_t050A, _t050B);
  foreach itter0530 in _t050C {
    field(2)[2] _t050D = femField(mesh04FF,cellInt04FE,field(2)[2],Transform,);
    field(2)[2] _t050E = prim -002E<#∞; %2; $[2]> (_t050D, pos04FD);
    field(2)[2] _t050F = prim •00D4<#∞; %2; $[2,2]; $[2]; $[2]> (A0509, _t050E);
    delta0510 = prim @00A5<#∞; %2; $[2]> (_t050F, xn0502);
    xn0502 = prim -0026<$[2]> (xn0502, delta0510);
    real _t0511 = 0.1e-7;
    real _t0512 = 0.1e-7;
    real _t0513 = prim *0034 (_t0511, _t0512);
    real _t0514 = prim •00CE<$[2]; $[2]; $[]> (delta0510, delta0510);
    bool _t0515 = prim >=007E (_t0513, _t0514);
    if _t0515 {
      real _t0516 = 0.1e1;
      real _t0517 = 0.1e-8;
      real _t0518 = prim +0017<$[]> (_t0516, _t0517);
      real _t0519 = 0.1e1;
      real _t051A = 0.1e1;
      vec2 _t051B = [_t0519, _t051A];
      real _t051C = prim •00CE<$[2]; $[2]; $[]> (_t051B, xn0502);
      bool _t051D = prim >0080 (_t0518, _t051C);
      real _t051E = 0.1e-8;
      real _t051F = 0.1e-8;
      vec2 _t0520 = [_t051E, _t051F];
      vec2 _t0521 = prim +0017<$[2]> (_t0520, xn0502);
      real _t0522 = _t0521[0];
      real _t0523 = -0.e0;
      bool _t0524 = prim >0080 (_t0522, _t0523);
      real _t0525 = 0.1e-8;
      real _t0526 = 0.1e-8;
      vec2 _t0527 = [_t0525, _t0526];
      vec2 _t0528 = prim +0017<$[2]> (_t0527, xn0502);
      real _t0529 = _t0528[1];
      real _t052A = -0.e0;
      bool _t052B = prim >0080 (_t0529, _t052A);
      bool _t052C = prim $and01C4 (_t0524, _t052B);
      bool _t052D = prim $and01C4 (_t051D, _t052C);
      if _t052D {
        Femdata: MeshPos _t052E = extractFemItemN((mesh04FF, cellInt04FE, xn0502, pos04FD),AllBuild(MeshPos),);
        return _t052E;
      } else {
        Femdata: MeshPos _t052F = extractFemItemN((mesh04FF),InvalidBuild(MeshPos),);
        return _t052F;
      }
    }
  }
  Femdata: MeshPos _t0531 = extractFemItemN((mesh04FF),InvalidBuild(MeshPos),);
  return _t0531;
}
function int[2]#5 nextCell40548 (int faceIdx05BB, int cell05BC, Femdata: Mesh mesh05BD)
{
  int _t05BE = 6;
  int _t05BF = prim *0033 (cell05BC, _t05BE);
  int _t05C0 = 2;
  int _t05C1 = prim *0033 (faceIdx05BB, _t05C0);
  int _t05C2 = prim +0015 (_t05BF, _t05C1);
  int[2] _t05C3 = extractFemItemN((mesh05BD, _t05C2),CellFaceCell(Mesh),);
  return _t05C3;
}
globalInit {
  int _t0467 = 0;
  int _t0465 = 1;
  int _t0469 = extractFemItem(NumCell(Mesh), int, a0463);
  int _t0468 = prim -0024 (_t0469, _t0465);
  int[] _t046C = prim $range01C3 (_t0467, _t0468);
  Femdata: MeshCell[] _t046D = {};
  foreach _t046B in _t046C {
    Femdata: MeshCell _t046E = loadFem(MeshCell, a0463, _t046B);
    _t046D = prim @0010<Femdata: MeshCell> (_t046D, _t046E);
  }
  0cell_a0464 = _t046D;
  b046F = loadFem(Space, 0b046F_intermedateGlobal0470, a0463);
  c0471 = loadFem(FemFunc, 0c0471_intermedateGlobal0472, b046F);
  vec3 _t0815 = prim -0026<$[3]> (camAt0454, camEye0450);
  camDist0816 = prim |()|00B5<$[3]> (_t0815);
  camNearVsp0817 = prim +0017<$[]> (camNear045F, camDist0816);
  camFarVsp0818 = prim +0017<$[]> (camFar0460, camDist0816);
  vec3 _t0819 = prim -0026<$[3]> (camAt0454, camEye0450);
  camN081A = prim normalize0137<$[3]> (_t0819);
  vec3 _t081B = prim ×00BE (camN081A, camUp0458);
  camU081C = prim normalize0137<$[3]> (_t081B);
  camV081D = prim ×00BE (camU081C, camN081A);
  real _t081E = 0.314159265358979323846264338327950288e1;
  real _t081F = prim *0034 (camFOV045C, _t081E);
  real _t0820 = 0.36e3;
  real _t0821 = prim /0055 (_t081F, _t0820);
  real _t0822 = prim tan0179 (_t0821);
  camVmax0823 = prim *0034 (_t0822, camDist0816);
  real _t0824 = (real)iresU045D;
  real _t0825 = prim *0034 (camVmax0823, _t0824);
  real _t0826 = (real)iresV045E;
  camUmax0827 = prim /0055 (_t0825, _t0826);
  kernel _t0828 = tent;
  IMAGE1D<double[3]> img0829 = clamp(cmap0481);
  CM082A = prim ⊛0074<#0; %1; $[3]> (_t0828, img0829);
  tensor[3,3] _t082B = [camU081C, camV081D, camN081A];
  tensor[3,3] _t082C = prim transpose0145<%3; %3> (_t082B);
  vec3 _t082D = prim normalize0137<$[3]> (lightVsp048A);
  L082E = prim •00CE<$[3,3]; $[3]; $[3]> (_t082C, _t082D);
}
strand ray (int ui0838, int vi0839) {
  real rayU083A;
  real rayV0841;
  vec3 UV0848;
  vec3 rayOrig084B;
  vec3 rayVec084C;
  real camNearVsp0851;
  real camFarVsp0852;
  int offset0855;
  int len0858;
  int itter085D;
  int intersectionItter085E;
  int idx085F;
  vec2 interval0860;
  real s0861;
  real e0862;
  Femdata: MeshCell cc0863;
  Femdata: FuncCell fc0865;
  output real out0867;
  output vec4 rgba0868;
  output vec3[] locs086D;
  {
    real _t083B = prim unary -008B<$[]> (camUmax0827);
    real _t083C = -0.5e0;
    real _t083D = (real)ui0838;
    real _t083E = (real)iresU045D;
    real _t083F = 0.5e0;
    real _t0840 = prim -0026<$[]> (_t083E, _t083F);
    rayU083A = prim lerp0098<$[]> (_t083B, camUmax0827, _t083C, _t083D, _t0840);
    real _t0842 = prim unary -008B<$[]> (camVmax0823);
    real _t0843 = -0.5e0;
    real _t0844 = (real)vi0839;
    real _t0845 = (real)iresV045E;
    real _t0846 = 0.5e0;
    real _t0847 = prim -0026<$[]> (_t0845, _t0846);
    rayV0841 = prim lerp0098<$[]> (_t0842, camVmax0823, _t0843, _t0844, _t0847);
    vec3 _t0849 = prim *0036<$[3]> (rayU083A, camU081C);
    vec3 _t084A = prim *0036<$[3]> (rayV0841, camV081D);
    UV0848 = prim +0017<$[3]> (_t0849, _t084A);
    rayOrig084B = prim +0017<$[3]> (camEye0450, UV0848);
    real _t084D = 0.e0;
    real _t084E = 0.e0;
    real _t084F = 0.e0;
    vec3 _t0850 = [_t084D, _t084E, _t084F];
    rayVec084C = prim +0017<$[3]> (camN081A, _t0850);
    camNearVsp0851 = camNearVsp0817;
    camFarVsp0852 = camFarVsp0818;
    int _t0856 = prim *0033 (ui0838, iresV045E);
    int _t0857 = prim +0015 (_t0856, vi0839);
    offset0855 = prim $dynsub01C2<int> (indecies0475, _t0857);
    int _t0859 = prim *0033 (iresU045D, iresV045E);
    int _t085A = prim *0033 (ui0838, iresV045E);
    int _t085B = prim +0015 (_t0859, _t085A);
    int _t085C = prim +0015 (_t085B, vi0839);
    len0858 = prim $dynsub01C2<int> (indecies0475, _t085C);
    itter085D = 0;
    intersectionItter085E = 0;
    idx085F = prim +0015 (offset0855, itter085D);
    interval0860 = prim $dynsub01C2<vec2> (times0476, idx085F);
    s0861 = interval0860[0];
    e0862 = interval0860[1];
    int _t0864 = 0;
    cc0863 = prim $dynsub01C2<Femdata: MeshCell> (0cell_a0464, _t0864);
    Femdata: FuncCell fc094E;
    int _t094F = extractFemItem(CellIndex(MeshCell), int, cc0863);
    Femdata: FuncCell _t0950 = loadFem(FuncCell, c0471, _t094F);
    fc094E = _t0950;
    fc0865 = fc094E;
    out0867 = 0.e0;
    real _t0869 = 0.e0;
    real _t086A = 0.e0;
    real _t086B = 0.e0;
    real _t086C = 0.e0;
    rgba0868 = [_t0869, _t086A, _t086B, _t086C];
    vec3[0] _t086E = {};
    vec3[] _t086F = (vec3[])_t086E;
    locs086D = _t086F;
  }
  start
  {
    if debug048E {
      bool _t0870 = prim !=0086 (ui0838, debugU048F);
      if _t0870 {
        bool _t0871 = prim !=0086 (vi0839, debugV0490);
        if _t0871 {
          stabilize;
        }
      }
    }
    int _t0872 = 0;
    bool _t0873 = prim ==0082 (len0858, _t0872);
    if _t0873 {
      string _t0874 = "(find:)No intersection found:";
      string _t0875 = "/";
      string _t0876 = "\n";
      print (_t0874, ui0838, _t0875, vi0839, _t0876);
      stabilize;
    }
    int _t0877 = prim $dynsub01C2<int> (cells0477, idx085F);
    cc0863 = prim $dynsub01C2<Femdata: MeshCell> (0cell_a0464, _t0877);
    Femdata: FuncCell fc0951;
    int _t0952 = extractFemItem(CellIndex(MeshCell), int, cc0863);
    Femdata: FuncCell _t0953 = loadFem(FuncCell, c0471, _t0952);
    fc0951 = _t0953;
    fc0865 = fc0951;
  }
  update
  {
    string _t0878 = "Ui/Vi::";
    string _t0879 = "/";
    string _t087A = "\n";
    print (_t0878, ui0838, _t0879, vi0839, _t087A);
    string _t087B = "Interval:";
    vec2 _t087C = [s0861, e0862];
    string _t087D = "\n";
    print (_t087B, _t087C, _t087D);
    string _t087E = "inner itter:";
    string _t087F = "\n";
    print (_t087E, intersectionItter085E, _t087F);
    string _t0880 = "Outer itter:";
    string _t0881 = "\n";
    print (_t0880, itter085D, _t0881);
    real _t0882 = rayOrig084B[0];
    real _t0883 = rayOrig084B[1];
    vec2 _t0884 = [_t0882, _t0883];
    real _t0885 = rayVec084C[0];
    real _t0886 = rayVec084C[1];
    vec2 _t0887 = [_t0885, _t0886];
    vec2 _t0888 = prim *0036<$[2]> (s0861, _t0887);
    vec2 startRay0889 = prim +0017<$[2]> (_t0884, _t0888);
    real _t088A = rayOrig084B[0];
    real _t088B = rayOrig084B[1];
    vec2 _t088C = [_t088A, _t088B];
    real _t088D = rayVec084C[0];
    real _t088E = rayVec084C[1];
    vec2 _t088F = [_t088D, _t088E];
    vec2 _t0890 = prim *0036<$[2]> (e0862, _t088F);
    vec2 endRay0891 = prim +0017<$[2]> (_t088C, _t0890);
    Femdata: Mesh _t0892 = extractFem(cc0863, Mesh);
    Femdata: Mesh _t0893 = extractFem(cc0863, Mesh);
    int _t0894 = extractFemItem(CellIndex(MeshCell), int, cc0863);
    field(2)[2] _t0895 = femField(_t0892,_t0894,field(2)[2],InvTransform,_msh_newtonInverse04FC );
    vec2 invertA0896 = prim @00A5<#∞; %2; $[2]> (_t0895, startRay0889);
    Femdata: Mesh _t0897 = extractFem(cc0863, Mesh);
    Femdata: Mesh _t0898 = extractFem(cc0863, Mesh);
    int _t0899 = extractFemItem(CellIndex(MeshCell), int, cc0863);
    field(2)[2] _t089A = femField(_t0897,_t0899,field(2)[2],InvTransform,_msh_newtonInverse04FC );
    vec2 invertB089B = prim @00A5<#∞; %2; $[2]> (_t089A, endRay0891);
    string _t089C = "inverses:";
    string _t089D = "\n";
    print (_t089C, invertA0896, invertB089B, _t089D);
    Femdata: FemFunc _t089E = extractFem(fc0865, FemFunc);
    Femdata: FemFunc _t089F = extractFem(fc0865, FemFunc);
    Femdata: Space _t08A0 = extractFem(_t089F, Space);
    int _t08A1 = extractFemItem(CellIndex(FuncCell), int, fc0865);
    field(2)[] _t08A2 = femField(_t089E,_t08A1,field(2)[],refField,);
    real faVal08A3 = prim @00A5<#∞; %2; $[]> (_t08A2, invertA0896);
    real _t08A4 = rayVec084C[2];
    real _t08A5 = prim *0034 (_t08A4, s0861);
    real _t08A6 = prim -0026<$[]> (faVal08A3, _t08A5);
    real _t08A7 = rayOrig084B[2];
    real fa08A8 = prim -0026<$[]> (_t08A6, _t08A7);
    Femdata: FemFunc _t08A9 = extractFem(fc0865, FemFunc);
    Femdata: FemFunc _t08AA = extractFem(fc0865, FemFunc);
    Femdata: Space _t08AB = extractFem(_t08AA, Space);
    int _t08AC = extractFemItem(CellIndex(FuncCell), int, fc0865);
    field(2)[] _t08AD = femField(_t08A9,_t08AC,field(2)[],refField,);
    real _t08AE = prim @00A5<#∞; %2; $[]> (_t08AD, invertB089B);
    real _t08AF = rayVec084C[2];
    real _t08B0 = prim *0034 (_t08AF, e0862);
    real _t08B1 = prim -0026<$[]> (_t08AE, _t08B0);
    real _t08B2 = rayOrig084B[2];
    real fb08B3 = prim -0026<$[]> (_t08B1, _t08B2);
    string _t08B4 = "Vals:";
    vec2 _t08B5 = [fa08A8, fb08B3];
    string _t08B6 = "\n";
    print (_t08B4, _t08B5, _t08B6);
    real _t08B7 = prim -0026<$[]> (fa08A8, fb08B3);
    real _t08B8 = prim |()|00B5<$[]> (_t08B7);
    bool _t08B9 = prim <007A (_t08B8, intervalEps0474);
    if _t08B9 {
      real _t08BA = prim |()|00B5<$[]> (fa08A8);
      bool _t08BB = prim >0080 (_t08BA, intervalEps0474);
      if _t08BB {
        real _t08BC = prim |()|00B5<$[]> (fb08B3);
        bool _t08BD = prim >0080 (_t08BC, intervalEps0474);
        if _t08BD {
          string _t08BE = "warn\n";
          print (_t08BE);
          s0861 = prim +0017<$[]> (s0861, intervalEps0474);
          continue;
        }
      }
    }
    real _t08BF = prim *0034 (s0861, fb08B3);
    real _t08C0 = prim *0034 (e0862, fa08A8);
    real _t08C1 = prim -0026<$[]> (_t08BF, _t08C0);
    real _t08C2 = prim -0026<$[]> (fb08B3, fa08A8);
    real cup08C3 = prim /0055 (_t08C1, _t08C2);
    string _t08C4 = "Mid time:";
    string _t08C5 = "\n";
    print (_t08C4, cup08C3, _t08C5);
    real _t08C6 = rayOrig084B[0];
    real _t08C7 = rayOrig084B[1];
    vec2 _t08C8 = [_t08C6, _t08C7];
    real _t08C9 = rayVec084C[0];
    real _t08CA = rayVec084C[1];
    vec2 _t08CB = [_t08C9, _t08CA];
    vec2 _t08CC = prim *0036<$[2]> (cup08C3, _t08CB);
    vec2 midRay08CD = prim +0017<$[2]> (_t08C8, _t08CC);
    Femdata: Mesh _t08CE = extractFem(cc0863, Mesh);
    Femdata: Mesh _t08CF = extractFem(cc0863, Mesh);
    int _t08D0 = extractFemItem(CellIndex(MeshCell), int, cc0863);
    field(2)[2] _t08D1 = femField(_t08CE,_t08D0,field(2)[2],InvTransform,_msh_newtonInverse04FC );
    vec2 invertC08D2 = prim @00A5<#∞; %2; $[2]> (_t08D1, midRay08CD);
    Femdata: FemFunc _t08D3 = extractFem(fc0865, FemFunc);
    Femdata: FemFunc _t08D4 = extractFem(fc0865, FemFunc);
    Femdata: Space _t08D5 = extractFem(_t08D4, Space);
    int _t08D6 = extractFemItem(CellIndex(FuncCell), int, fc0865);
    field(2)[] _t08D7 = femField(_t08D3,_t08D6,field(2)[],refField,);
    real fmVal08D8 = prim @00A5<#∞; %2; $[]> (_t08D7, invertC08D2);
    real _t08D9 = rayVec084C[2];
    real _t08DA = prim *0034 (_t08D9, cup08C3);
    real _t08DB = prim -0026<$[]> (fmVal08D8, _t08DA);
    real _t08DC = rayOrig084B[2];
    real fm08DD = prim -0026<$[]> (_t08DB, _t08DC);
    string _t08DE = "all vals:";
    vec3 _t08DF = [fa08A8, fm08DD, fb08B3];
    string _t08E0 = "\n";
    print (_t08DE, _t08DF, _t08E0);
    int _t08E1 = 1;
    intersectionItter085E = prim +0015 (intersectionItter085E, _t08E1);
    int _t08E2;
    real _t096C = 0.e0;
    bool _t096D = prim >0080 (fa08A8, _t096C);
    if _t096D {
      int _t096E = 1;
      _t08E2 = _t096E;
    } else {
      real _t096F = 0.e0;
      bool _t0970 = prim <007A (fa08A8, _t096F);
      if _t0970 {
        int _t0971 = -1;
        _t08E2 = _t0971;
      } else {
        int _t0972 = 0;
        _t08E2 = _t0972;
      }
    }
    int _t08E3;
    real _t0965 = 0.e0;
    bool _t0966 = prim >0080 (fm08DD, _t0965);
    if _t0966 {
      int _t0967 = 1;
      _t08E3 = _t0967;
    } else {
      real _t0968 = 0.e0;
      bool _t0969 = prim <007A (fm08DD, _t0968);
      if _t0969 {
        int _t096A = -1;
        _t08E3 = _t096A;
      } else {
        int _t096B = 0;
        _t08E3 = _t096B;
      }
    }
    int _t08E4 = prim *0033 (_t08E2, _t08E3);
    int _t08E5 = 0;
    bool _t08E6 = prim <0079 (_t08E4, _t08E5);
    if _t08E6 {
      e0862 = cup08C3;
    } else {
      int _t08E7;
      real _t095E = 0.e0;
      bool _t095F = prim >0080 (fa08A8, _t095E);
      if _t095F {
        int _t0960 = 1;
        _t08E7 = _t0960;
      } else {
        real _t0961 = 0.e0;
        bool _t0962 = prim <007A (fa08A8, _t0961);
        if _t0962 {
          int _t0963 = -1;
          _t08E7 = _t0963;
        } else {
          int _t0964 = 0;
          _t08E7 = _t0964;
        }
      }
      int _t08E8;
      real _t0957 = 0.e0;
      bool _t0958 = prim >0080 (fm08DD, _t0957);
      if _t0958 {
        int _t0959 = 1;
        _t08E8 = _t0959;
      } else {
        real _t095A = 0.e0;
        bool _t095B = prim <007A (fm08DD, _t095A);
        if _t095B {
          int _t095C = -1;
          _t08E8 = _t095C;
        } else {
          int _t095D = 0;
          _t08E8 = _t095D;
        }
      }
      int _t08E9 = prim *0033 (_t08E7, _t08E8);
      int _t08EA = 0;
      bool _t08EB = prim >007F (_t08E9, _t08EA);
      if _t08EB {
        s0861 = cup08C3;
      }
    }
    string _t08EC = "new interval:";
    vec2 _t08ED = [s0861, e0862];
    string _t08EE = "\n";
    print (_t08EC, _t08ED, _t08EE);
    real _t08EF = prim |()|00B5<$[]> (fm08DD);
    bool _t08F0 = prim <007A (_t08EF, zeroEps0473);
    if _t08F0 {
      real _t08F1 = 0.e0;
      real _t08F2 = 0.e0;
      vec2 grad08F3 = [_t08F1, _t08F2];
      real _t08F5 = prim |()|00B5<$[]> (fm08DD);
      bool _t08F6 = prim <007A (_t08F5, zeroEps0473);
      if _t08F6 {
        Femdata: FemFunc _t08F7 = extractFem(fc0865, FemFunc);
        Femdata: FemFunc _t08F8 = extractFem(fc0865, FemFunc);
        Femdata: Space _t08F9 = extractFem(_t08F8, Space);
        int _t08FA = extractFemItem(CellIndex(FuncCell), int, fc0865);
        field(2)[] _t08FB = femField(_t08F7,_t08FA,field(2)[],refField,);
        Femdata: Mesh _t08FC = extractFem(cc0863, Mesh);
        Femdata: Mesh _t08FD = extractFem(cc0863, Mesh);
        int _t08FE = extractFemItem(CellIndex(MeshCell), int, cc0863);
        field(2)[2] _t08FF = femField(_t08FC,_t08FE,field(2)[2],InvTransform,_msh_newtonInverse04FC );
        field(2)[] _t0900 = prim ∘0164<#∞; %2; $[]; %2; $[2]> (_t08FB, _t08FF);
        field(2)[2] _t0901 = prim ∇00A8<#∞; %2> (_t0900);
        grad08F3 = prim @00A5<#∞; %2; $[2]> (_t0901, midRay08CD);
        out0867 = fmVal08D8;
      }
      string _t0902 = "Out val:";
      string _t0903 = "\n";
      print (_t0902, out0867, _t0903);
      string _t0904 = "Grad val:";
      string _t0905 = "\n";
      print (_t0904, grad08F3, _t0905);
      real _t0906 = 0.1e1;
      real _t0907 = 0.1e1;
      real _t0908 = 0.1e1;
      vec3 mcol0909 = [_t0906, _t0907, _t0908];
      bool _t090A = prim !=0088 (cmin0482, cmax0483);
      if _t090A {
        int _t090B = -1;
        real _t090C = (real)_t090B;
        real _t090D = 0.1e1;
        real _t090E = prim lerp0098<$[]> (_t090C, _t090D, cmin0482, out0867, cmax0483);
        mcol0909 = prim @00A5<#0; %1; $[3]> (CM082A, _t090E);
      }
      if light0484 {
        real _t090F = grad08F3[0];
        real _t0910 = grad08F3[1];
        int _t0911 = -1;
        real _t0912 = (real)_t0911;
        vec3 _t0913 = [_t090F, _t0910, _t0912];
        vec3 N0914 = prim normalize0137<$[3]> (_t0913);
        vec3 _t0915 = prim normalize0137<$[3]> (rayVec084C);
        vec3 _t0916 = prim unary -008B<$[3]> (_t0915);
        vec3 _t0917 = prim +0017<$[3]> (_t0916, L082E);
        vec3 H0918 = prim normalize0137<$[3]> (_t0917);
        vec3 lightColor0919 = prim lerp0098<$[3]> (mcnear0478, mcfar047C, camNearVsp0851, cup08C3, camFarVsp0852);
        vec3 ambientTerm091A = prim *0036<$[3]> (phongKa0485, mcol0909);
        vec3 _t091B = prim modulate0129<%3> (mcol0909, lightColor0919);
        vec3 _t091C = prim *0036<$[3]> (phongKd0486, _t091B);
        real _t091D = 0.e0;
        real _t091E = prim •00CE<$[3]; $[3]; $[]> (N0914, L082E);
        real _t091F = prim max0125 (_t091D, _t091E);
        vec3 diffuse0920 = prim *0038<$[3]> (_t091C, _t091F);
        vec3 _t0921 = prim *0036<$[3]> (phongKs0487, lightColor0919);
        real _t0922 = 0.e0;
        real _t0923 = prim •00CE<$[3]; $[3]; $[]> (N0914, H0918);
        real _t0924 = prim max0125 (_t0922, _t0923);
        real _t0925 = prim ^0069 (_t0924, phongSp0488);
        vec3 specular0926 = prim *0038<$[3]> (_t0921, _t0925);
        vec3 _t0927 = prim +0017<$[3]> (ambientTerm091A, diffuse0920);
        vec3 fin0928 = prim +0017<$[3]> (_t0927, specular0926);
        real _t0929 = fin0928[0];
        real _t092A = fin0928[1];
        real _t092B = fin0928[2];
        real _t092C = 0.1e1;
        rgba0868 = [_t0929, _t092A, _t092B, _t092C];
      } else {
        real _t092D = mcol0909[0];
        real _t092E = mcol0909[1];
        real _t092F = mcol0909[2];
        real _t0930 = 0.1e1;
        rgba0868 = [_t092D, _t092E, _t092F, _t0930];
      }
      vec3 _t0931 = prim *0038<$[3]> (rayVec084C, cup08C3);
      vec3 _t0932 = prim +0017<$[3]> (_t0931, rayOrig084B);
      vec3[1] _t0933 = {_t0932};
      vec3[] _t0934 = (vec3[])_t0933;
      locs086D = _t0934;
      stabilize;
    }
    int _t0935 = 32;
    bool _t0936 = prim >007F (intersectionItter085E, _t0935);
    if _t0936 {
      intersectionItter085E = 0;
      int _t0937 = 1;
      itter085D = prim +0015 (itter085D, _t0937);
      bool _t0938 = prim >=007D (itter085D, len0858);
      if _t0938 {
        string _t0939 = "No intersection found\n";
        print (_t0939);
        string _t093A = "Fin pixel=============================\n";
        print (_t093A);
        stabilize;
      }
      int _t093B = prim +0015 (offset0855, itter085D);
      interval0860 = prim $dynsub01C2<vec2> (times0476, _t093B);
      int _t093C = prim +0015 (offset0855, itter085D);
      int _t093D = prim $dynsub01C2<int> (cells0477, _t093C);
      cc0863 = prim $dynsub01C2<Femdata: MeshCell> (0cell_a0464, _t093D);
      s0861 = interval0860[0];
      e0862 = interval0860[1];
      Femdata: FuncCell fc0954;
      int _t0955 = extractFemItem(CellIndex(MeshCell), int, cc0863);
      Femdata: FuncCell _t0956 = loadFem(FuncCell, c0471, _t0955);
      fc0954 = _t0956;
      fc0865 = fc0954;
      string _t093E = "++++++++++++++++Next interval!+++++++++++++++++++\n";
      print (_t093E);
      continue;
    } else {
      string _t093F = "---------------\n";
      print (_t093F);
    }
  }
}
grid(2) {
  int _t0940 = 0;
  int _t0941 = 1;
  int _t0942 = prim -0024 (iresU045D, _t0941);
  int[] _t0943 = prim $range01C3 (_t0940, _t0942);
  foreach vi0949 in _t0943 {
    int _t0944 = 0;
    int _t0945 = 1;
    int _t0946 = prim -0024 (iresV045E, _t0945);
    int[] _t0947 = prim $range01C3 (_t0944, _t0946);
    foreach ui0948 in _t0947 {
      new ray (ui0948, vi0949);
    }
  }
}
/* Program end */
/* Simplified Program (after after simplify variables) start */
properties: GlobalInit,StrandArray,HasStartMethod,ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[]),HasInputs,HasGlobals
input real isoval044E = <default>;
input real thick044F = <default>;
input vec3 camEye0450 = <default>;
input vec3 camAt0454 = <default>;
input vec3 camUp0458 = <default>;
input real camFOV045C = <default>;
input int iresU045D = <default>;
input int iresV045E = <default>;
input real camNear045F = <default>;
input real camFar0460 = <default>;
input real refStep0461 = <default>;
input real rayStep0462 = <default>;
input FemData:Mesh a0463;
input FemData:Space 0b046F_intermedateGlobal0470;
input FemData:FemFunc 0c0471_intermedateGlobal0472;
input real zeroEps0473 = <default>;
input real intervalEps0474 = <default>;
input int[] indecies0475;
input vec2[] times0476;
input int[] cells0477;
input vec3 mcnear0478("material color at near clipping plane (for depth cuing)") = <default>;
input vec3 mcfar047C("material color at far clipping plane") = <default>;
input image(1)[3] cmap0481("univariate colormap") = image("/home/teocollin/gitcode/diderot/tests/lipRay/find/cmap.nrrd");
input real cmin0482("value mapped to min end of colormap") = <default>;
input real cmax0483("value mapped to max end of colormap. By default cmin==cmax==0, which disables this colormapping") = <default>;
input bool light0484 = <default>;
input real phongKa0485("Blinn-Phong ambient component") = <default>;
input real phongKd0486("Blinn-Phong diffuse component") = <default>;
input real phongKs0487("Blinn-Phong specular component") = <default>;
input real phongSp0488("Blinn-Phong specularity exponent") = <default>;
input real maxAlpha0489("maximum opacity on rendered surface") = <default>;
input vec3 lightVsp048A = <default>;
input bool debug048E = <default>;
input int debugU048F = <default>;
input int debugV0490 = <default>;
constants {
  isoval044E = 0.2e0;
  thick044F = 0.7e-1;
  real _t0451 = 0.3e1;
  real _t0452 = -0.3e1;
  real _t0453 = 0.3e1;
  camEye0450 = [_t0451, _t0452, _t0453];
  real _t0455 = 0.5e0;
  real _t0456 = 0.5e0;
  real _t0457 = 0.5e0;
  camAt0454 = [_t0455, _t0456, _t0457];
  real _t0459 = 0.e0;
  real _t045A = 0.e0;
  real _t045B = 0.1e1;
  camUp0458 = [_t0459, _t045A, _t045B];
  camFOV045C = 0.137e2;
  iresU045D = 10;
  iresV045E = 10;
  camNear045F = -0.2e1;
  camFar0460 = 0.5e1;
  refStep0461 = 0.1e1;
  rayStep0462 = 0.1e-1;
  zeroEps0473 = 0.1e-10;
  intervalEps0474 = 0.1e-10;
  real _t0479 = 0.1e1;
  real _t047A = 0.1e1;
  real _t047B = 0.1e1;
  mcnear0478 = [_t0479, _t047A, _t047B];
  real _t047D = 0.1e1;
  real _t047E = 0.1e1;
  real _t047F = 0.1e1;
  mcfar047C = [_t047D, _t047E, _t047F];
  cmin0482 = 0.e0;
  cmax0483 = 0.1e1;
  light0484 = false;
  phongKa0485 = 0.5e0;
  phongKd0486 = 0.5e0;
  phongKs0487 = 0.e0;
  phongSp0488 = 0.6e2;
  maxAlpha0489 = 0.1e1;
  real _t048B = 0.e0;
  real _t048C = 0.369e1;
  real _t048D = 0.153e1;
  lightVsp048A = [_t048B, _t048C, _t048D];
  debug048E = false;
  debugU048F = 8;
  debugV0490 = 2;
}
global Femdata: MeshCell[] 0cell_a0464;
global Femdata: Space b046F;
global Femdata: FemFunc c0471;
global real camDist0816;
global real camNearVsp0817;
global real camFarVsp0818;
global vec3 camN081A;
global vec3 camU081C;
global vec3 camV081D;
global real camVmax0823;
global real camUmax0827;
global field#0(1)[3] CM082A;
global vec3 L082E;
function Femdata: MeshPos#4 _msh_newtonInverse04FC (vec2 pos04FD, int cellInt04FE, Femdata: Mesh mesh04FF)
{
  real _t0500 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t0501 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  xn0502 = [_t0500, _t0501];
  field(2)[2] _t0503 = femField(mesh04FF,cellInt04FE,field(2)[2],Transform,);
  field(2)[2,2] _t0504 = prim ∇⊗00AD<#∞; %2; $[]; %2> (_t0503);
  field(2)[2,2] _t0505 = prim inv015B<#∞; %2> (_t0504);
  real _t0506 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t0507 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  vec2 _t0508 = [_t0506, _t0507];
  A0509 = prim @00A5<#∞; %2; $[2,2]> (_t0505, _t0508);
  int _t050A = 0;
  int _t050B = 16;
  int[] _t050C = prim $range01C3 (_t050A, _t050B);
  foreach itter0530 in _t050C {
    field(2)[2] _t050D = femField(mesh04FF,cellInt04FE,field(2)[2],Transform,);
    field(2)[2] _t050E = prim -002E<#∞; %2; $[2]> (_t050D, pos04FD);
    field(2)[2] _t050F = prim •00D4<#∞; %2; $[2,2]; $[2]; $[2]> (A0509, _t050E);
    delta0510 = prim @00A5<#∞; %2; $[2]> (_t050F, xn0502);
    xn0502 = prim -0026<$[2]> (xn0502, delta0510);
    real _t0511 = 0.1e-7;
    real _t0512 = 0.1e-7;
    real _t0513 = prim *0034 (_t0511, _t0512);
    real _t0514 = prim •00CE<$[2]; $[2]; $[]> (delta0510, delta0510);
    bool _t0515 = prim >=007E (_t0513, _t0514);
    if _t0515 {
      real _t0516 = 0.1e1;
      real _t0517 = 0.1e-8;
      real _t0518 = prim +0017<$[]> (_t0516, _t0517);
      real _t0519 = 0.1e1;
      real _t051A = 0.1e1;
      vec2 _t051B = [_t0519, _t051A];
      real _t051C = prim •00CE<$[2]; $[2]; $[]> (_t051B, xn0502);
      bool _t051D = prim >0080 (_t0518, _t051C);
      real _t051E = 0.1e-8;
      real _t051F = 0.1e-8;
      vec2 _t0520 = [_t051E, _t051F];
      vec2 _t0521 = prim +0017<$[2]> (_t0520, xn0502);
      real _t0522 = _t0521[0];
      real _t0523 = -0.e0;
      bool _t0524 = prim >0080 (_t0522, _t0523);
      real _t0525 = 0.1e-8;
      real _t0526 = 0.1e-8;
      vec2 _t0527 = [_t0525, _t0526];
      vec2 _t0528 = prim +0017<$[2]> (_t0527, xn0502);
      real _t0529 = _t0528[1];
      real _t052A = -0.e0;
      bool _t052B = prim >0080 (_t0529, _t052A);
      bool _t052C = prim $and01C4 (_t0524, _t052B);
      bool _t052D = prim $and01C4 (_t051D, _t052C);
      if _t052D {
        Femdata: MeshPos _t052E = extractFemItemN((mesh04FF, cellInt04FE, xn0502, pos04FD),AllBuild(MeshPos),);
        return _t052E;
      } else {
        Femdata: MeshPos _t052F = extractFemItemN((mesh04FF),InvalidBuild(MeshPos),);
        return _t052F;
      }
    }
  }
  Femdata: MeshPos _t0531 = extractFemItemN((mesh04FF),InvalidBuild(MeshPos),);
  return _t0531;
}
function int[2]#5 nextCell40548 (int faceIdx05BB, int cell05BC, Femdata: Mesh mesh05BD)
{
  int _t05BE = 6;
  int _t05BF = prim *0033 (cell05BC, _t05BE);
  int _t05C0 = 2;
  int _t05C1 = prim *0033 (faceIdx05BB, _t05C0);
  int _t05C2 = prim +0015 (_t05BF, _t05C1);
  int[2] _t05C3 = extractFemItemN((mesh05BD, _t05C2),CellFaceCell(Mesh),);
  return _t05C3;
}
globalInit {
  int _t0467 = 0;
  int _t0465 = 1;
  int _t0469 = extractFemItem(NumCell(Mesh), int, a0463);
  int _t0468 = prim -0024 (_t0469, _t0465);
  int[] _t046C = prim $range01C3 (_t0467, _t0468);
  Femdata: MeshCell[] _t046D = {};
  foreach _t046B in _t046C {
    Femdata: MeshCell _t046E = loadFem(MeshCell, a0463, _t046B);
    _t046D = prim @0010<Femdata: MeshCell> (_t046D, _t046E);
  }
  0cell_a0464 = _t046D;
  b046F = loadFem(Space, 0b046F_intermedateGlobal0470, a0463);
  c0471 = loadFem(FemFunc, 0c0471_intermedateGlobal0472, b046F);
  vec3 _t0815 = prim -0026<$[3]> (camAt0454, camEye0450);
  camDist0816 = prim |()|00B5<$[3]> (_t0815);
  camNearVsp0817 = prim +0017<$[]> (camNear045F, camDist0816);
  camFarVsp0818 = prim +0017<$[]> (camFar0460, camDist0816);
  vec3 _t0819 = prim -0026<$[3]> (camAt0454, camEye0450);
  camN081A = prim normalize0137<$[3]> (_t0819);
  vec3 _t081B = prim ×00BE (camN081A, camUp0458);
  camU081C = prim normalize0137<$[3]> (_t081B);
  camV081D = prim ×00BE (camU081C, camN081A);
  real _t081E = 0.314159265358979323846264338327950288e1;
  real _t081F = prim *0034 (camFOV045C, _t081E);
  real _t0820 = 0.36e3;
  real _t0821 = prim /0055 (_t081F, _t0820);
  real _t0822 = prim tan0179 (_t0821);
  camVmax0823 = prim *0034 (_t0822, camDist0816);
  real _t0824 = (real)iresU045D;
  real _t0825 = prim *0034 (camVmax0823, _t0824);
  real _t0826 = (real)iresV045E;
  camUmax0827 = prim /0055 (_t0825, _t0826);
  kernel _t0828 = tent;
  IMAGE1D<double[3]> img0829 = clamp(cmap0481);
  CM082A = prim ⊛0074<#0; %1; $[3]> (_t0828, img0829);
  tensor[3,3] _t082B = [camU081C, camV081D, camN081A];
  tensor[3,3] _t082C = prim transpose0145<%3; %3> (_t082B);
  vec3 _t082D = prim normalize0137<$[3]> (lightVsp048A);
  L082E = prim •00CE<$[3,3]; $[3]; $[3]> (_t082C, _t082D);
}
strand ray (int ui0838, int vi0839) {
  real rayU083A;
  real rayV0841;
  vec3 UV0848;
  vec3 rayOrig084B;
  vec3 rayVec084C;
  real camNearVsp0851;
  real camFarVsp0852;
  int offset0855;
  int len0858;
  int itter085D;
  int intersectionItter085E;
  int idx085F;
  vec2 interval0860;
  real s0861;
  real e0862;
  Femdata: MeshCell cc0863;
  Femdata: FuncCell fc0865;
  output real out0867;
  output vec4 rgba0868;
  output vec3[] locs086D;
  int ui0974;
  int vi0973;
  {
    real _t083B = prim unary -008B<$[]> (camUmax0827);
    real _t083C = -0.5e0;
    real _t083D = (real)ui0838;
    real _t083E = (real)iresU045D;
    real _t083F = 0.5e0;
    real _t0840 = prim -0026<$[]> (_t083E, _t083F);
    rayU083A = prim lerp0098<$[]> (_t083B, camUmax0827, _t083C, _t083D, _t0840);
    real _t0842 = prim unary -008B<$[]> (camVmax0823);
    real _t0843 = -0.5e0;
    real _t0844 = (real)vi0839;
    real _t0845 = (real)iresV045E;
    real _t0846 = 0.5e0;
    real _t0847 = prim -0026<$[]> (_t0845, _t0846);
    rayV0841 = prim lerp0098<$[]> (_t0842, camVmax0823, _t0843, _t0844, _t0847);
    vec3 _t0849 = prim *0036<$[3]> (rayU083A, camU081C);
    vec3 _t084A = prim *0036<$[3]> (rayV0841, camV081D);
    UV0848 = prim +0017<$[3]> (_t0849, _t084A);
    rayOrig084B = prim +0017<$[3]> (camEye0450, UV0848);
    real _t084D = 0.e0;
    real _t084E = 0.e0;
    real _t084F = 0.e0;
    vec3 _t0850 = [_t084D, _t084E, _t084F];
    rayVec084C = prim +0017<$[3]> (camN081A, _t0850);
    camNearVsp0851 = camNearVsp0817;
    camFarVsp0852 = camFarVsp0818;
    int _t0856 = prim *0033 (ui0838, iresV045E);
    int _t0857 = prim +0015 (_t0856, vi0839);
    offset0855 = prim $dynsub01C2<int> (indecies0475, _t0857);
    int _t0859 = prim *0033 (iresU045D, iresV045E);
    int _t085A = prim *0033 (ui0838, iresV045E);
    int _t085B = prim +0015 (_t0859, _t085A);
    int _t085C = prim +0015 (_t085B, vi0839);
    len0858 = prim $dynsub01C2<int> (indecies0475, _t085C);
    itter085D = 0;
    intersectionItter085E = 0;
    idx085F = prim +0015 (offset0855, itter085D);
    interval0860 = prim $dynsub01C2<vec2> (times0476, idx085F);
    s0861 = interval0860[0];
    e0862 = interval0860[1];
    int _t0864 = 0;
    cc0863 = prim $dynsub01C2<Femdata: MeshCell> (0cell_a0464, _t0864);
    Femdata: FuncCell fc094E;
    int _t094F = extractFemItem(CellIndex(MeshCell), int, cc0863);
    Femdata: FuncCell _t0950 = loadFem(FuncCell, c0471, _t094F);
    fc094E = _t0950;
    fc0865 = fc094E;
    out0867 = 0.e0;
    real _t0869 = 0.e0;
    real _t086A = 0.e0;
    real _t086B = 0.e0;
    real _t086C = 0.e0;
    rgba0868 = [_t0869, _t086A, _t086B, _t086C];
    vec3[0] _t086E = {};
    vec3[] _t086F = (vec3[])_t086E;
    locs086D = _t086F;
    ui0974 = ui0838;
    vi0973 = vi0839;
  }
  start
  {
    if debug048E {
      bool _t0870 = prim !=0086 (ui0974, debugU048F);
      if _t0870 {
        bool _t0871 = prim !=0086 (vi0973, debugV0490);
        if _t0871 {
          stabilize;
        }
      }
    }
    int _t0872 = 0;
    bool _t0873 = prim ==0082 (len0858, _t0872);
    if _t0873 {
      string _t0874 = "(find:)No intersection found:";
      string _t0875 = "/";
      string _t0876 = "\n";
      print (_t0874, ui0974, _t0875, vi0973, _t0876);
      stabilize;
    }
    int _t0877 = prim $dynsub01C2<int> (cells0477, idx085F);
    cc0863 = prim $dynsub01C2<Femdata: MeshCell> (0cell_a0464, _t0877);
    Femdata: FuncCell fc0951;
    int _t0952 = extractFemItem(CellIndex(MeshCell), int, cc0863);
    Femdata: FuncCell _t0953 = loadFem(FuncCell, c0471, _t0952);
    fc0951 = _t0953;
    fc0865 = fc0951;
  }
  update
  {
    string _t0878 = "Ui/Vi::";
    string _t0879 = "/";
    string _t087A = "\n";
    print (_t0878, ui0974, _t0879, vi0973, _t087A);
    string _t087B = "Interval:";
    vec2 _t087C = [s0861, e0862];
    string _t087D = "\n";
    print (_t087B, _t087C, _t087D);
    string _t087E = "inner itter:";
    string _t087F = "\n";
    print (_t087E, intersectionItter085E, _t087F);
    string _t0880 = "Outer itter:";
    string _t0881 = "\n";
    print (_t0880, itter085D, _t0881);
    real _t0882 = rayOrig084B[0];
    real _t0883 = rayOrig084B[1];
    vec2 _t0884 = [_t0882, _t0883];
    real _t0885 = rayVec084C[0];
    real _t0886 = rayVec084C[1];
    vec2 _t0887 = [_t0885, _t0886];
    vec2 _t0888 = prim *0036<$[2]> (s0861, _t0887);
    vec2 startRay0889 = prim +0017<$[2]> (_t0884, _t0888);
    real _t088A = rayOrig084B[0];
    real _t088B = rayOrig084B[1];
    vec2 _t088C = [_t088A, _t088B];
    real _t088D = rayVec084C[0];
    real _t088E = rayVec084C[1];
    vec2 _t088F = [_t088D, _t088E];
    vec2 _t0890 = prim *0036<$[2]> (e0862, _t088F);
    vec2 endRay0891 = prim +0017<$[2]> (_t088C, _t0890);
    Femdata: Mesh _t0892 = extractFem(cc0863, Mesh);
    Femdata: Mesh _t0893 = extractFem(cc0863, Mesh);
    int _t0894 = extractFemItem(CellIndex(MeshCell), int, cc0863);
    field(2)[2] _t0895 = femField(_t0892,_t0894,field(2)[2],InvTransform,_msh_newtonInverse04FC );
    vec2 invertA0896 = prim @00A5<#∞; %2; $[2]> (_t0895, startRay0889);
    Femdata: Mesh _t0897 = extractFem(cc0863, Mesh);
    Femdata: Mesh _t0898 = extractFem(cc0863, Mesh);
    int _t0899 = extractFemItem(CellIndex(MeshCell), int, cc0863);
    field(2)[2] _t089A = femField(_t0897,_t0899,field(2)[2],InvTransform,_msh_newtonInverse04FC );
    vec2 invertB089B = prim @00A5<#∞; %2; $[2]> (_t089A, endRay0891);
    string _t089C = "inverses:";
    string _t089D = "\n";
    print (_t089C, invertA0896, invertB089B, _t089D);
    Femdata: FemFunc _t089E = extractFem(fc0865, FemFunc);
    Femdata: FemFunc _t089F = extractFem(fc0865, FemFunc);
    Femdata: Space _t08A0 = extractFem(_t089F, Space);
    int _t08A1 = extractFemItem(CellIndex(FuncCell), int, fc0865);
    field(2)[] _t08A2 = femField(_t089E,_t08A1,field(2)[],refField,);
    real faVal08A3 = prim @00A5<#∞; %2; $[]> (_t08A2, invertA0896);
    real _t08A4 = rayVec084C[2];
    real _t08A5 = prim *0034 (_t08A4, s0861);
    real _t08A6 = prim -0026<$[]> (faVal08A3, _t08A5);
    real _t08A7 = rayOrig084B[2];
    real fa08A8 = prim -0026<$[]> (_t08A6, _t08A7);
    Femdata: FemFunc _t08A9 = extractFem(fc0865, FemFunc);
    Femdata: FemFunc _t08AA = extractFem(fc0865, FemFunc);
    Femdata: Space _t08AB = extractFem(_t08AA, Space);
    int _t08AC = extractFemItem(CellIndex(FuncCell), int, fc0865);
    field(2)[] _t08AD = femField(_t08A9,_t08AC,field(2)[],refField,);
    real _t08AE = prim @00A5<#∞; %2; $[]> (_t08AD, invertB089B);
    real _t08AF = rayVec084C[2];
    real _t08B0 = prim *0034 (_t08AF, e0862);
    real _t08B1 = prim -0026<$[]> (_t08AE, _t08B0);
    real _t08B2 = rayOrig084B[2];
    real fb08B3 = prim -0026<$[]> (_t08B1, _t08B2);
    string _t08B4 = "Vals:";
    vec2 _t08B5 = [fa08A8, fb08B3];
    string _t08B6 = "\n";
    print (_t08B4, _t08B5, _t08B6);
    real _t08B7 = prim -0026<$[]> (fa08A8, fb08B3);
    real _t08B8 = prim |()|00B5<$[]> (_t08B7);
    bool _t08B9 = prim <007A (_t08B8, intervalEps0474);
    if _t08B9 {
      real _t08BA = prim |()|00B5<$[]> (fa08A8);
      bool _t08BB = prim >0080 (_t08BA, intervalEps0474);
      if _t08BB {
        real _t08BC = prim |()|00B5<$[]> (fb08B3);
        bool _t08BD = prim >0080 (_t08BC, intervalEps0474);
        if _t08BD {
          string _t08BE = "warn\n";
          print (_t08BE);
          s0861 = prim +0017<$[]> (s0861, intervalEps0474);
          continue;
        }
      }
    }
    real _t08BF = prim *0034 (s0861, fb08B3);
    real _t08C0 = prim *0034 (e0862, fa08A8);
    real _t08C1 = prim -0026<$[]> (_t08BF, _t08C0);
    real _t08C2 = prim -0026<$[]> (fb08B3, fa08A8);
    real cup08C3 = prim /0055 (_t08C1, _t08C2);
    string _t08C4 = "Mid time:";
    string _t08C5 = "\n";
    print (_t08C4, cup08C3, _t08C5);
    real _t08C6 = rayOrig084B[0];
    real _t08C7 = rayOrig084B[1];
    vec2 _t08C8 = [_t08C6, _t08C7];
    real _t08C9 = rayVec084C[0];
    real _t08CA = rayVec084C[1];
    vec2 _t08CB = [_t08C9, _t08CA];
    vec2 _t08CC = prim *0036<$[2]> (cup08C3, _t08CB);
    vec2 midRay08CD = prim +0017<$[2]> (_t08C8, _t08CC);
    Femdata: Mesh _t08CE = extractFem(cc0863, Mesh);
    Femdata: Mesh _t08CF = extractFem(cc0863, Mesh);
    int _t08D0 = extractFemItem(CellIndex(MeshCell), int, cc0863);
    field(2)[2] _t08D1 = femField(_t08CE,_t08D0,field(2)[2],InvTransform,_msh_newtonInverse04FC );
    vec2 invertC08D2 = prim @00A5<#∞; %2; $[2]> (_t08D1, midRay08CD);
    Femdata: FemFunc _t08D3 = extractFem(fc0865, FemFunc);
    Femdata: FemFunc _t08D4 = extractFem(fc0865, FemFunc);
    Femdata: Space _t08D5 = extractFem(_t08D4, Space);
    int _t08D6 = extractFemItem(CellIndex(FuncCell), int, fc0865);
    field(2)[] _t08D7 = femField(_t08D3,_t08D6,field(2)[],refField,);
    real fmVal08D8 = prim @00A5<#∞; %2; $[]> (_t08D7, invertC08D2);
    real _t08D9 = rayVec084C[2];
    real _t08DA = prim *0034 (_t08D9, cup08C3);
    real _t08DB = prim -0026<$[]> (fmVal08D8, _t08DA);
    real _t08DC = rayOrig084B[2];
    real fm08DD = prim -0026<$[]> (_t08DB, _t08DC);
    string _t08DE = "all vals:";
    vec3 _t08DF = [fa08A8, fm08DD, fb08B3];
    string _t08E0 = "\n";
    print (_t08DE, _t08DF, _t08E0);
    int _t08E1 = 1;
    intersectionItter085E = prim +0015 (intersectionItter085E, _t08E1);
    int _t08E2;
    real _t096C = 0.e0;
    bool _t096D = prim >0080 (fa08A8, _t096C);
    if _t096D {
      int _t096E = 1;
      _t08E2 = _t096E;
    } else {
      real _t096F = 0.e0;
      bool _t0970 = prim <007A (fa08A8, _t096F);
      if _t0970 {
        int _t0971 = -1;
        _t08E2 = _t0971;
      } else {
        int _t0972 = 0;
        _t08E2 = _t0972;
      }
    }
    int _t08E3;
    real _t0965 = 0.e0;
    bool _t0966 = prim >0080 (fm08DD, _t0965);
    if _t0966 {
      int _t0967 = 1;
      _t08E3 = _t0967;
    } else {
      real _t0968 = 0.e0;
      bool _t0969 = prim <007A (fm08DD, _t0968);
      if _t0969 {
        int _t096A = -1;
        _t08E3 = _t096A;
      } else {
        int _t096B = 0;
        _t08E3 = _t096B;
      }
    }
    int _t08E4 = prim *0033 (_t08E2, _t08E3);
    int _t08E5 = 0;
    bool _t08E6 = prim <0079 (_t08E4, _t08E5);
    if _t08E6 {
      e0862 = cup08C3;
    } else {
      int _t08E7;
      real _t095E = 0.e0;
      bool _t095F = prim >0080 (fa08A8, _t095E);
      if _t095F {
        int _t0960 = 1;
        _t08E7 = _t0960;
      } else {
        real _t0961 = 0.e0;
        bool _t0962 = prim <007A (fa08A8, _t0961);
        if _t0962 {
          int _t0963 = -1;
          _t08E7 = _t0963;
        } else {
          int _t0964 = 0;
          _t08E7 = _t0964;
        }
      }
      int _t08E8;
      real _t0957 = 0.e0;
      bool _t0958 = prim >0080 (fm08DD, _t0957);
      if _t0958 {
        int _t0959 = 1;
        _t08E8 = _t0959;
      } else {
        real _t095A = 0.e0;
        bool _t095B = prim <007A (fm08DD, _t095A);
        if _t095B {
          int _t095C = -1;
          _t08E8 = _t095C;
        } else {
          int _t095D = 0;
          _t08E8 = _t095D;
        }
      }
      int _t08E9 = prim *0033 (_t08E7, _t08E8);
      int _t08EA = 0;
      bool _t08EB = prim >007F (_t08E9, _t08EA);
      if _t08EB {
        s0861 = cup08C3;
      }
    }
    string _t08EC = "new interval:";
    vec2 _t08ED = [s0861, e0862];
    string _t08EE = "\n";
    print (_t08EC, _t08ED, _t08EE);
    real _t08EF = prim |()|00B5<$[]> (fm08DD);
    bool _t08F0 = prim <007A (_t08EF, zeroEps0473);
    if _t08F0 {
      real _t08F1 = 0.e0;
      real _t08F2 = 0.e0;
      vec2 grad08F3 = [_t08F1, _t08F2];
      real _t08F5 = prim |()|00B5<$[]> (fm08DD);
      bool _t08F6 = prim <007A (_t08F5, zeroEps0473);
      if _t08F6 {
        Femdata: FemFunc _t08F7 = extractFem(fc0865, FemFunc);
        Femdata: FemFunc _t08F8 = extractFem(fc0865, FemFunc);
        Femdata: Space _t08F9 = extractFem(_t08F8, Space);
        int _t08FA = extractFemItem(CellIndex(FuncCell), int, fc0865);
        field(2)[] _t08FB = femField(_t08F7,_t08FA,field(2)[],refField,);
        Femdata: Mesh _t08FC = extractFem(cc0863, Mesh);
        Femdata: Mesh _t08FD = extractFem(cc0863, Mesh);
        int _t08FE = extractFemItem(CellIndex(MeshCell), int, cc0863);
        field(2)[2] _t08FF = femField(_t08FC,_t08FE,field(2)[2],InvTransform,_msh_newtonInverse04FC );
        field(2)[] _t0900 = prim ∘0164<#∞; %2; $[]; %2; $[2]> (_t08FB, _t08FF);
        field(2)[2] _t0901 = prim ∇00A8<#∞; %2> (_t0900);
        grad08F3 = prim @00A5<#∞; %2; $[2]> (_t0901, midRay08CD);
        out0867 = fmVal08D8;
      }
      string _t0902 = "Out val:";
      string _t0903 = "\n";
      print (_t0902, out0867, _t0903);
      string _t0904 = "Grad val:";
      string _t0905 = "\n";
      print (_t0904, grad08F3, _t0905);
      real _t0906 = 0.1e1;
      real _t0907 = 0.1e1;
      real _t0908 = 0.1e1;
      vec3 mcol0909 = [_t0906, _t0907, _t0908];
      bool _t090A = prim !=0088 (cmin0482, cmax0483);
      if _t090A {
        int _t090B = -1;
        real _t090C = (real)_t090B;
        real _t090D = 0.1e1;
        real _t090E = prim lerp0098<$[]> (_t090C, _t090D, cmin0482, out0867, cmax0483);
        mcol0909 = prim @00A5<#0; %1; $[3]> (CM082A, _t090E);
      }
      if light0484 {
        real _t090F = grad08F3[0];
        real _t0910 = grad08F3[1];
        int _t0911 = -1;
        real _t0912 = (real)_t0911;
        vec3 _t0913 = [_t090F, _t0910, _t0912];
        vec3 N0914 = prim normalize0137<$[3]> (_t0913);
        vec3 _t0915 = prim normalize0137<$[3]> (rayVec084C);
        vec3 _t0916 = prim unary -008B<$[3]> (_t0915);
        vec3 _t0917 = prim +0017<$[3]> (_t0916, L082E);
        vec3 H0918 = prim normalize0137<$[3]> (_t0917);
        vec3 lightColor0919 = prim lerp0098<$[3]> (mcnear0478, mcfar047C, camNearVsp0851, cup08C3, camFarVsp0852);
        vec3 ambientTerm091A = prim *0036<$[3]> (phongKa0485, mcol0909);
        vec3 _t091B = prim modulate0129<%3> (mcol0909, lightColor0919);
        vec3 _t091C = prim *0036<$[3]> (phongKd0486, _t091B);
        real _t091D = 0.e0;
        real _t091E = prim •00CE<$[3]; $[3]; $[]> (N0914, L082E);
        real _t091F = prim max0125 (_t091D, _t091E);
        vec3 diffuse0920 = prim *0038<$[3]> (_t091C, _t091F);
        vec3 _t0921 = prim *0036<$[3]> (phongKs0487, lightColor0919);
        real _t0922 = 0.e0;
        real _t0923 = prim •00CE<$[3]; $[3]; $[]> (N0914, H0918);
        real _t0924 = prim max0125 (_t0922, _t0923);
        real _t0925 = prim ^0069 (_t0924, phongSp0488);
        vec3 specular0926 = prim *0038<$[3]> (_t0921, _t0925);
        vec3 _t0927 = prim +0017<$[3]> (ambientTerm091A, diffuse0920);
        vec3 fin0928 = prim +0017<$[3]> (_t0927, specular0926);
        real _t0929 = fin0928[0];
        real _t092A = fin0928[1];
        real _t092B = fin0928[2];
        real _t092C = 0.1e1;
        rgba0868 = [_t0929, _t092A, _t092B, _t092C];
      } else {
        real _t092D = mcol0909[0];
        real _t092E = mcol0909[1];
        real _t092F = mcol0909[2];
        real _t0930 = 0.1e1;
        rgba0868 = [_t092D, _t092E, _t092F, _t0930];
      }
      vec3 _t0931 = prim *0038<$[3]> (rayVec084C, cup08C3);
      vec3 _t0932 = prim +0017<$[3]> (_t0931, rayOrig084B);
      vec3[1] _t0933 = {_t0932};
      vec3[] _t0934 = (vec3[])_t0933;
      locs086D = _t0934;
      stabilize;
    }
    int _t0935 = 32;
    bool _t0936 = prim >007F (intersectionItter085E, _t0935);
    if _t0936 {
      intersectionItter085E = 0;
      int _t0937 = 1;
      itter085D = prim +0015 (itter085D, _t0937);
      bool _t0938 = prim >=007D (itter085D, len0858);
      if _t0938 {
        string _t0939 = "No intersection found\n";
        print (_t0939);
        string _t093A = "Fin pixel=============================\n";
        print (_t093A);
        stabilize;
      }
      int _t093B = prim +0015 (offset0855, itter085D);
      interval0860 = prim $dynsub01C2<vec2> (times0476, _t093B);
      int _t093C = prim +0015 (offset0855, itter085D);
      int _t093D = prim $dynsub01C2<int> (cells0477, _t093C);
      cc0863 = prim $dynsub01C2<Femdata: MeshCell> (0cell_a0464, _t093D);
      s0861 = interval0860[0];
      e0862 = interval0860[1];
      Femdata: FuncCell fc0954;
      int _t0955 = extractFemItem(CellIndex(MeshCell), int, cc0863);
      Femdata: FuncCell _t0956 = loadFem(FuncCell, c0471, _t0955);
      fc0954 = _t0956;
      fc0865 = fc0954;
      string _t093E = "++++++++++++++++Next interval!+++++++++++++++++++\n";
      print (_t093E);
      continue;
    } else {
      string _t093F = "---------------\n";
      print (_t093F);
    }
  }
}
grid(2) {
  int _t0940 = 0;
  int _t0941 = 1;
  int _t0942 = prim -0024 (iresU045D, _t0941);
  int[] _t0943 = prim $range01C3 (_t0940, _t0942);
  foreach vi0949 in _t0943 {
    int _t0944 = 0;
    int _t0945 = 1;
    int _t0946 = prim -0024 (iresV045E, _t0945);
    int[] _t0947 = prim $range01C3 (_t0944, _t0946);
    foreach ui0948 in _t0947 {
      new ray (ui0948, vi0949);
    }
  }
}
/* Program end */
/* Simplified Program (after after simplify fem vars) start */
properties: GlobalInit,StrandArray,HasStartMethod,ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[]),HasInputs,HasGlobals
input real isoval044E = <default>;
input real thick044F = <default>;
input vec3 camEye0450 = <default>;
input vec3 camAt0454 = <default>;
input vec3 camUp0458 = <default>;
input real camFOV045C = <default>;
input int iresU045D = <default>;
input int iresV045E = <default>;
input real camNear045F = <default>;
input real camFar0460 = <default>;
input real refStep0461 = <default>;
input real rayStep0462 = <default>;
input FemData:Mesh a0463;
input FemData:Space 0b046F_intermedateGlobal0470;
input FemData:FemFunc 0c0471_intermedateGlobal0472;
input real zeroEps0473 = <default>;
input real intervalEps0474 = <default>;
input int[] indecies0475;
input vec2[] times0476;
input int[] cells0477;
input vec3 mcnear0478("material color at near clipping plane (for depth cuing)") = <default>;
input vec3 mcfar047C("material color at far clipping plane") = <default>;
input image(1)[3] cmap0481("univariate colormap") = image("/home/teocollin/gitcode/diderot/tests/lipRay/find/cmap.nrrd");
input real cmin0482("value mapped to min end of colormap") = <default>;
input real cmax0483("value mapped to max end of colormap. By default cmin==cmax==0, which disables this colormapping") = <default>;
input bool light0484 = <default>;
input real phongKa0485("Blinn-Phong ambient component") = <default>;
input real phongKd0486("Blinn-Phong diffuse component") = <default>;
input real phongKs0487("Blinn-Phong specular component") = <default>;
input real phongSp0488("Blinn-Phong specularity exponent") = <default>;
input real maxAlpha0489("maximum opacity on rendered surface") = <default>;
input vec3 lightVsp048A = <default>;
input bool debug048E = <default>;
input int debugU048F = <default>;
input int debugV0490 = <default>;
constants {
  isoval044E = 0.2e0;
  thick044F = 0.7e-1;
  real _t0451 = 0.3e1;
  real _t0452 = -0.3e1;
  real _t0453 = 0.3e1;
  camEye0450 = [_t0451, _t0452, _t0453];
  real _t0455 = 0.5e0;
  real _t0456 = 0.5e0;
  real _t0457 = 0.5e0;
  camAt0454 = [_t0455, _t0456, _t0457];
  real _t0459 = 0.e0;
  real _t045A = 0.e0;
  real _t045B = 0.1e1;
  camUp0458 = [_t0459, _t045A, _t045B];
  camFOV045C = 0.137e2;
  iresU045D = 10;
  iresV045E = 10;
  camNear045F = -0.2e1;
  camFar0460 = 0.5e1;
  refStep0461 = 0.1e1;
  rayStep0462 = 0.1e-1;
  zeroEps0473 = 0.1e-10;
  intervalEps0474 = 0.1e-10;
  real _t0479 = 0.1e1;
  real _t047A = 0.1e1;
  real _t047B = 0.1e1;
  mcnear0478 = [_t0479, _t047A, _t047B];
  real _t047D = 0.1e1;
  real _t047E = 0.1e1;
  real _t047F = 0.1e1;
  mcfar047C = [_t047D, _t047E, _t047F];
  cmin0482 = 0.e0;
  cmax0483 = 0.1e1;
  light0484 = false;
  phongKa0485 = 0.5e0;
  phongKd0486 = 0.5e0;
  phongKs0487 = 0.e0;
  phongSp0488 = 0.6e2;
  maxAlpha0489 = 0.1e1;
  real _t048B = 0.e0;
  real _t048C = 0.369e1;
  real _t048D = 0.153e1;
  lightVsp048A = [_t048B, _t048C, _t048D];
  debug048E = false;
  debugU048F = 8;
  debugV0490 = 2;
}
global Femdata: MeshCell[] 0cell_a0464;
global Femdata: Space b046F;
global Femdata: FemFunc c0471;
global real camDist0816;
global real camNearVsp0817;
global real camFarVsp0818;
global vec3 camN081A;
global vec3 camU081C;
global vec3 camV081D;
global real camVmax0823;
global real camUmax0827;
global field#0(1)[3] CM082A;
global vec3 L082E;
function Femdata: MeshPos#4 _msh_newtonInverse04FC (vec2 pos04FD, int cellInt04FE, Femdata: Mesh mesh04FF)
{
  real _t0500 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t0501 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  xn0502 = [_t0500, _t0501];
  field(2)[2] _t0503 = femField(mesh04FF,cellInt04FE,field(2)[2],Transform,);
  field(2)[2,2] _t0504 = prim ∇⊗00AD<#∞; %2; $[]; %2> (_t0503);
  field(2)[2,2] _t0505 = prim inv015B<#∞; %2> (_t0504);
  real _t0506 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t0507 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  vec2 _t0508 = [_t0506, _t0507];
  A0509 = prim @00A5<#∞; %2; $[2,2]> (_t0505, _t0508);
  int _t050A = 0;
  int _t050B = 16;
  int[] _t050C = prim $range01C3 (_t050A, _t050B);
  foreach itter0530 in _t050C {
    field(2)[2] _t050D = femField(mesh04FF,cellInt04FE,field(2)[2],Transform,);
    field(2)[2] _t050E = prim -002E<#∞; %2; $[2]> (_t050D, pos04FD);
    field(2)[2] _t050F = prim •00D4<#∞; %2; $[2,2]; $[2]; $[2]> (A0509, _t050E);
    delta0510 = prim @00A5<#∞; %2; $[2]> (_t050F, xn0502);
    xn0502 = prim -0026<$[2]> (xn0502, delta0510);
    real _t0511 = 0.1e-7;
    real _t0512 = 0.1e-7;
    real _t0513 = prim *0034 (_t0511, _t0512);
    real _t0514 = prim •00CE<$[2]; $[2]; $[]> (delta0510, delta0510);
    bool _t0515 = prim >=007E (_t0513, _t0514);
    if _t0515 {
      real _t0516 = 0.1e1;
      real _t0517 = 0.1e-8;
      real _t0518 = prim +0017<$[]> (_t0516, _t0517);
      real _t0519 = 0.1e1;
      real _t051A = 0.1e1;
      vec2 _t051B = [_t0519, _t051A];
      real _t051C = prim •00CE<$[2]; $[2]; $[]> (_t051B, xn0502);
      bool _t051D = prim >0080 (_t0518, _t051C);
      real _t051E = 0.1e-8;
      real _t051F = 0.1e-8;
      vec2 _t0520 = [_t051E, _t051F];
      vec2 _t0521 = prim +0017<$[2]> (_t0520, xn0502);
      real _t0522 = _t0521[0];
      real _t0523 = -0.e0;
      bool _t0524 = prim >0080 (_t0522, _t0523);
      real _t0525 = 0.1e-8;
      real _t0526 = 0.1e-8;
      vec2 _t0527 = [_t0525, _t0526];
      vec2 _t0528 = prim +0017<$[2]> (_t0527, xn0502);
      real _t0529 = _t0528[1];
      real _t052A = -0.e0;
      bool _t052B = prim >0080 (_t0529, _t052A);
      bool _t052C = prim $and01C4 (_t0524, _t052B);
      bool _t052D = prim $and01C4 (_t051D, _t052C);
      if _t052D {
        Femdata: MeshPos _t052E = extractFemItemN((mesh04FF, cellInt04FE, xn0502, pos04FD),AllBuild(MeshPos),);
        return _t052E;
      } else {
        Femdata: MeshPos _t052F = extractFemItemN((mesh04FF),InvalidBuild(MeshPos),);
        return _t052F;
      }
    }
  }
  Femdata: MeshPos _t0531 = extractFemItemN((mesh04FF),InvalidBuild(MeshPos),);
  return _t0531;
}
function int[2]#5 nextCell40548 (int faceIdx05BB, int cell05BC, Femdata: Mesh mesh05BD)
{
  int _t05BE = 6;
  int _t05BF = prim *0033 (cell05BC, _t05BE);
  int _t05C0 = 2;
  int _t05C1 = prim *0033 (faceIdx05BB, _t05C0);
  int _t05C2 = prim +0015 (_t05BF, _t05C1);
  int[2] _t05C3 = extractFemItemN((mesh05BD, _t05C2),CellFaceCell(Mesh),);
  return _t05C3;
}
globalInit {
  int _t0467 = 0;
  int _t0465 = 1;
  int _t0469 = extractFemItem(NumCell(Mesh), int, a0463);
  int _t0468 = prim -0024 (_t0469, _t0465);
  int[] _t046C = prim $range01C3 (_t0467, _t0468);
  Femdata: MeshCell[] _t046D = {};
  foreach _t046B in _t046C {
    Femdata: MeshCell _t046E = loadFem(MeshCell, a0463, _t046B);
    _t046D = prim @0010<Femdata: MeshCell> (_t046D, _t046E);
  }
  0cell_a0464 = _t046D;
  b046F = loadFem(Space, 0b046F_intermedateGlobal0470, a0463);
  c0471 = loadFem(FemFunc, 0c0471_intermedateGlobal0472, b046F);
  vec3 _t0815 = prim -0026<$[3]> (camAt0454, camEye0450);
  camDist0816 = prim |()|00B5<$[3]> (_t0815);
  camNearVsp0817 = prim +0017<$[]> (camNear045F, camDist0816);
  camFarVsp0818 = prim +0017<$[]> (camFar0460, camDist0816);
  vec3 _t0819 = prim -0026<$[3]> (camAt0454, camEye0450);
  camN081A = prim normalize0137<$[3]> (_t0819);
  vec3 _t081B = prim ×00BE (camN081A, camUp0458);
  camU081C = prim normalize0137<$[3]> (_t081B);
  camV081D = prim ×00BE (camU081C, camN081A);
  real _t081E = 0.314159265358979323846264338327950288e1;
  real _t081F = prim *0034 (camFOV045C, _t081E);
  real _t0820 = 0.36e3;
  real _t0821 = prim /0055 (_t081F, _t0820);
  real _t0822 = prim tan0179 (_t0821);
  camVmax0823 = prim *0034 (_t0822, camDist0816);
  real _t0824 = (real)iresU045D;
  real _t0825 = prim *0034 (camVmax0823, _t0824);
  real _t0826 = (real)iresV045E;
  camUmax0827 = prim /0055 (_t0825, _t0826);
  kernel _t0828 = tent;
  IMAGE1D<double[3]> img0829 = clamp(cmap0481);
  CM082A = prim ⊛0074<#0; %1; $[3]> (_t0828, img0829);
  tensor[3,3] _t082B = [camU081C, camV081D, camN081A];
  tensor[3,3] _t082C = prim transpose0145<%3; %3> (_t082B);
  vec3 _t082D = prim normalize0137<$[3]> (lightVsp048A);
  L082E = prim •00CE<$[3,3]; $[3]; $[3]> (_t082C, _t082D);
}
strand ray (int ui0838, int vi0839) {
  real rayU083A;
  real rayV0841;
  vec3 UV0848;
  vec3 rayOrig084B;
  vec3 rayVec084C;
  real camNearVsp0851;
  real camFarVsp0852;
  int offset0855;
  int len0858;
  int itter085D;
  int intersectionItter085E;
  int idx085F;
  vec2 interval0860;
  real s0861;
  real e0862;
  Femdata: MeshCell cc0863;
  Femdata: FuncCell fc0865;
  output real out0867;
  output vec4 rgba0868;
  output vec3[] locs086D;
  int ui0974;
  int vi0973;
  {
    real _t083B = prim unary -008B<$[]> (camUmax0827);
    real _t083C = -0.5e0;
    real _t083D = (real)ui0838;
    real _t083E = (real)iresU045D;
    real _t083F = 0.5e0;
    real _t0840 = prim -0026<$[]> (_t083E, _t083F);
    rayU083A = prim lerp0098<$[]> (_t083B, camUmax0827, _t083C, _t083D, _t0840);
    real _t0842 = prim unary -008B<$[]> (camVmax0823);
    real _t0843 = -0.5e0;
    real _t0844 = (real)vi0839;
    real _t0845 = (real)iresV045E;
    real _t0846 = 0.5e0;
    real _t0847 = prim -0026<$[]> (_t0845, _t0846);
    rayV0841 = prim lerp0098<$[]> (_t0842, camVmax0823, _t0843, _t0844, _t0847);
    vec3 _t0849 = prim *0036<$[3]> (rayU083A, camU081C);
    vec3 _t084A = prim *0036<$[3]> (rayV0841, camV081D);
    UV0848 = prim +0017<$[3]> (_t0849, _t084A);
    rayOrig084B = prim +0017<$[3]> (camEye0450, UV0848);
    real _t084D = 0.e0;
    real _t084E = 0.e0;
    real _t084F = 0.e0;
    vec3 _t0850 = [_t084D, _t084E, _t084F];
    rayVec084C = prim +0017<$[3]> (camN081A, _t0850);
    camNearVsp0851 = camNearVsp0817;
    camFarVsp0852 = camFarVsp0818;
    int _t0856 = prim *0033 (ui0838, iresV045E);
    int _t0857 = prim +0015 (_t0856, vi0839);
    offset0855 = prim $dynsub01C2<int> (indecies0475, _t0857);
    int _t0859 = prim *0033 (iresU045D, iresV045E);
    int _t085A = prim *0033 (ui0838, iresV045E);
    int _t085B = prim +0015 (_t0859, _t085A);
    int _t085C = prim +0015 (_t085B, vi0839);
    len0858 = prim $dynsub01C2<int> (indecies0475, _t085C);
    itter085D = 0;
    intersectionItter085E = 0;
    idx085F = prim +0015 (offset0855, itter085D);
    interval0860 = prim $dynsub01C2<vec2> (times0476, idx085F);
    s0861 = interval0860[0];
    e0862 = interval0860[1];
    int _t0864 = 0;
    cc0863 = prim $dynsub01C2<Femdata: MeshCell> (0cell_a0464, _t0864);
    Femdata: FuncCell fc094E;
    int _t094F = extractFemItem(CellIndex(MeshCell), int, cc0863);
    Femdata: FuncCell _t0950 = loadFem(FuncCell, c0471, _t094F);
    fc094E = _t0950;
    fc0865 = fc094E;
    out0867 = 0.e0;
    real _t0869 = 0.e0;
    real _t086A = 0.e0;
    real _t086B = 0.e0;
    real _t086C = 0.e0;
    rgba0868 = [_t0869, _t086A, _t086B, _t086C];
    vec3[0] _t086E = {};
    vec3[] _t086F = (vec3[])_t086E;
    locs086D = _t086F;
    ui0974 = ui0838;
    vi0973 = vi0839;
  }
  start
  {
    if debug048E {
      bool _t0870 = prim !=0086 (ui0974, debugU048F);
      if _t0870 {
        bool _t0871 = prim !=0086 (vi0973, debugV0490);
        if _t0871 {
          stabilize;
        }
      }
    }
    int _t0872 = 0;
    bool _t0873 = prim ==0082 (len0858, _t0872);
    if _t0873 {
      string _t0874 = "(find:)No intersection found:";
      string _t0875 = "/";
      string _t0876 = "\n";
      print (_t0874, ui0974, _t0875, vi0973, _t0876);
      stabilize;
    }
    int _t0877 = prim $dynsub01C2<int> (cells0477, idx085F);
    cc0863 = prim $dynsub01C2<Femdata: MeshCell> (0cell_a0464, _t0877);
    Femdata: FuncCell fc0951;
    int _t0952 = extractFemItem(CellIndex(MeshCell), int, cc0863);
    Femdata: FuncCell _t0953 = loadFem(FuncCell, c0471, _t0952);
    fc0951 = _t0953;
    fc0865 = fc0951;
  }
  update
  {
    string _t0878 = "Ui/Vi::";
    string _t0879 = "/";
    string _t087A = "\n";
    print (_t0878, ui0974, _t0879, vi0973, _t087A);
    string _t087B = "Interval:";
    vec2 _t087C = [s0861, e0862];
    string _t087D = "\n";
    print (_t087B, _t087C, _t087D);
    string _t087E = "inner itter:";
    string _t087F = "\n";
    print (_t087E, intersectionItter085E, _t087F);
    string _t0880 = "Outer itter:";
    string _t0881 = "\n";
    print (_t0880, itter085D, _t0881);
    real _t0882 = rayOrig084B[0];
    real _t0883 = rayOrig084B[1];
    vec2 _t0884 = [_t0882, _t0883];
    real _t0885 = rayVec084C[0];
    real _t0886 = rayVec084C[1];
    vec2 _t0887 = [_t0885, _t0886];
    vec2 _t0888 = prim *0036<$[2]> (s0861, _t0887);
    vec2 startRay0889 = prim +0017<$[2]> (_t0884, _t0888);
    real _t088A = rayOrig084B[0];
    real _t088B = rayOrig084B[1];
    vec2 _t088C = [_t088A, _t088B];
    real _t088D = rayVec084C[0];
    real _t088E = rayVec084C[1];
    vec2 _t088F = [_t088D, _t088E];
    vec2 _t0890 = prim *0036<$[2]> (e0862, _t088F);
    vec2 endRay0891 = prim +0017<$[2]> (_t088C, _t0890);
    Femdata: Mesh _t0892 = extractFem(cc0863, Mesh);
    Femdata: Mesh _t0893 = extractFem(cc0863, Mesh);
    int _t0894 = extractFemItem(CellIndex(MeshCell), int, cc0863);
    field(2)[2] _t0895 = femField(_t0892,_t0894,field(2)[2],InvTransform,_msh_newtonInverse04FC );
    vec2 invertA0896 = prim @00A5<#∞; %2; $[2]> (_t0895, startRay0889);
    Femdata: Mesh _t0897 = extractFem(cc0863, Mesh);
    Femdata: Mesh _t0898 = extractFem(cc0863, Mesh);
    int _t0899 = extractFemItem(CellIndex(MeshCell), int, cc0863);
    field(2)[2] _t089A = femField(_t0897,_t0899,field(2)[2],InvTransform,_msh_newtonInverse04FC );
    vec2 invertB089B = prim @00A5<#∞; %2; $[2]> (_t089A, endRay0891);
    string _t089C = "inverses:";
    string _t089D = "\n";
    print (_t089C, invertA0896, invertB089B, _t089D);
    Femdata: FemFunc _t089E = extractFem(fc0865, FemFunc);
    Femdata: FemFunc _t089F = extractFem(fc0865, FemFunc);
    Femdata: Space _t08A0 = extractFem(_t089F, Space);
    int _t08A1 = extractFemItem(CellIndex(FuncCell), int, fc0865);
    field(2)[] _t08A2 = femField(_t089E,_t08A1,field(2)[],refField,);
    real faVal08A3 = prim @00A5<#∞; %2; $[]> (_t08A2, invertA0896);
    real _t08A4 = rayVec084C[2];
    real _t08A5 = prim *0034 (_t08A4, s0861);
    real _t08A6 = prim -0026<$[]> (faVal08A3, _t08A5);
    real _t08A7 = rayOrig084B[2];
    real fa08A8 = prim -0026<$[]> (_t08A6, _t08A7);
    Femdata: FemFunc _t08A9 = extractFem(fc0865, FemFunc);
    Femdata: FemFunc _t08AA = extractFem(fc0865, FemFunc);
    Femdata: Space _t08AB = extractFem(_t08AA, Space);
    int _t08AC = extractFemItem(CellIndex(FuncCell), int, fc0865);
    field(2)[] _t08AD = femField(_t08A9,_t08AC,field(2)[],refField,);
    real _t08AE = prim @00A5<#∞; %2; $[]> (_t08AD, invertB089B);
    real _t08AF = rayVec084C[2];
    real _t08B0 = prim *0034 (_t08AF, e0862);
    real _t08B1 = prim -0026<$[]> (_t08AE, _t08B0);
    real _t08B2 = rayOrig084B[2];
    real fb08B3 = prim -0026<$[]> (_t08B1, _t08B2);
    string _t08B4 = "Vals:";
    vec2 _t08B5 = [fa08A8, fb08B3];
    string _t08B6 = "\n";
    print (_t08B4, _t08B5, _t08B6);
    real _t08B7 = prim -0026<$[]> (fa08A8, fb08B3);
    real _t08B8 = prim |()|00B5<$[]> (_t08B7);
    bool _t08B9 = prim <007A (_t08B8, intervalEps0474);
    if _t08B9 {
      real _t08BA = prim |()|00B5<$[]> (fa08A8);
      bool _t08BB = prim >0080 (_t08BA, intervalEps0474);
      if _t08BB {
        real _t08BC = prim |()|00B5<$[]> (fb08B3);
        bool _t08BD = prim >0080 (_t08BC, intervalEps0474);
        if _t08BD {
          string _t08BE = "warn\n";
          print (_t08BE);
          s0861 = prim +0017<$[]> (s0861, intervalEps0474);
          continue;
        }
      }
    }
    real _t08BF = prim *0034 (s0861, fb08B3);
    real _t08C0 = prim *0034 (e0862, fa08A8);
    real _t08C1 = prim -0026<$[]> (_t08BF, _t08C0);
    real _t08C2 = prim -0026<$[]> (fb08B3, fa08A8);
    real cup08C3 = prim /0055 (_t08C1, _t08C2);
    string _t08C4 = "Mid time:";
    string _t08C5 = "\n";
    print (_t08C4, cup08C3, _t08C5);
    real _t08C6 = rayOrig084B[0];
    real _t08C7 = rayOrig084B[1];
    vec2 _t08C8 = [_t08C6, _t08C7];
    real _t08C9 = rayVec084C[0];
    real _t08CA = rayVec084C[1];
    vec2 _t08CB = [_t08C9, _t08CA];
    vec2 _t08CC = prim *0036<$[2]> (cup08C3, _t08CB);
    vec2 midRay08CD = prim +0017<$[2]> (_t08C8, _t08CC);
    Femdata: Mesh _t08CE = extractFem(cc0863, Mesh);
    Femdata: Mesh _t08CF = extractFem(cc0863, Mesh);
    int _t08D0 = extractFemItem(CellIndex(MeshCell), int, cc0863);
    field(2)[2] _t08D1 = femField(_t08CE,_t08D0,field(2)[2],InvTransform,_msh_newtonInverse04FC );
    vec2 invertC08D2 = prim @00A5<#∞; %2; $[2]> (_t08D1, midRay08CD);
    Femdata: FemFunc _t08D3 = extractFem(fc0865, FemFunc);
    Femdata: FemFunc _t08D4 = extractFem(fc0865, FemFunc);
    Femdata: Space _t08D5 = extractFem(_t08D4, Space);
    int _t08D6 = extractFemItem(CellIndex(FuncCell), int, fc0865);
    field(2)[] _t08D7 = femField(_t08D3,_t08D6,field(2)[],refField,);
    real fmVal08D8 = prim @00A5<#∞; %2; $[]> (_t08D7, invertC08D2);
    real _t08D9 = rayVec084C[2];
    real _t08DA = prim *0034 (_t08D9, cup08C3);
    real _t08DB = prim -0026<$[]> (fmVal08D8, _t08DA);
    real _t08DC = rayOrig084B[2];
    real fm08DD = prim -0026<$[]> (_t08DB, _t08DC);
    string _t08DE = "all vals:";
    vec3 _t08DF = [fa08A8, fm08DD, fb08B3];
    string _t08E0 = "\n";
    print (_t08DE, _t08DF, _t08E0);
    int _t08E1 = 1;
    intersectionItter085E = prim +0015 (intersectionItter085E, _t08E1);
    int _t08E2;
    real _t096C = 0.e0;
    bool _t096D = prim >0080 (fa08A8, _t096C);
    if _t096D {
      int _t096E = 1;
      _t08E2 = _t096E;
    } else {
      real _t096F = 0.e0;
      bool _t0970 = prim <007A (fa08A8, _t096F);
      if _t0970 {
        int _t0971 = -1;
        _t08E2 = _t0971;
      } else {
        int _t0972 = 0;
        _t08E2 = _t0972;
      }
    }
    int _t08E3;
    real _t0965 = 0.e0;
    bool _t0966 = prim >0080 (fm08DD, _t0965);
    if _t0966 {
      int _t0967 = 1;
      _t08E3 = _t0967;
    } else {
      real _t0968 = 0.e0;
      bool _t0969 = prim <007A (fm08DD, _t0968);
      if _t0969 {
        int _t096A = -1;
        _t08E3 = _t096A;
      } else {
        int _t096B = 0;
        _t08E3 = _t096B;
      }
    }
    int _t08E4 = prim *0033 (_t08E2, _t08E3);
    int _t08E5 = 0;
    bool _t08E6 = prim <0079 (_t08E4, _t08E5);
    if _t08E6 {
      e0862 = cup08C3;
    } else {
      int _t08E7;
      real _t095E = 0.e0;
      bool _t095F = prim >0080 (fa08A8, _t095E);
      if _t095F {
        int _t0960 = 1;
        _t08E7 = _t0960;
      } else {
        real _t0961 = 0.e0;
        bool _t0962 = prim <007A (fa08A8, _t0961);
        if _t0962 {
          int _t0963 = -1;
          _t08E7 = _t0963;
        } else {
          int _t0964 = 0;
          _t08E7 = _t0964;
        }
      }
      int _t08E8;
      real _t0957 = 0.e0;
      bool _t0958 = prim >0080 (fm08DD, _t0957);
      if _t0958 {
        int _t0959 = 1;
        _t08E8 = _t0959;
      } else {
        real _t095A = 0.e0;
        bool _t095B = prim <007A (fm08DD, _t095A);
        if _t095B {
          int _t095C = -1;
          _t08E8 = _t095C;
        } else {
          int _t095D = 0;
          _t08E8 = _t095D;
        }
      }
      int _t08E9 = prim *0033 (_t08E7, _t08E8);
      int _t08EA = 0;
      bool _t08EB = prim >007F (_t08E9, _t08EA);
      if _t08EB {
        s0861 = cup08C3;
      }
    }
    string _t08EC = "new interval:";
    vec2 _t08ED = [s0861, e0862];
    string _t08EE = "\n";
    print (_t08EC, _t08ED, _t08EE);
    real _t08EF = prim |()|00B5<$[]> (fm08DD);
    bool _t08F0 = prim <007A (_t08EF, zeroEps0473);
    if _t08F0 {
      real _t08F1 = 0.e0;
      real _t08F2 = 0.e0;
      vec2 grad08F3 = [_t08F1, _t08F2];
      real _t08F5 = prim |()|00B5<$[]> (fm08DD);
      bool _t08F6 = prim <007A (_t08F5, zeroEps0473);
      if _t08F6 {
        Femdata: FemFunc _t08F7 = extractFem(fc0865, FemFunc);
        Femdata: FemFunc _t08F8 = extractFem(fc0865, FemFunc);
        Femdata: Space _t08F9 = extractFem(_t08F8, Space);
        int _t08FA = extractFemItem(CellIndex(FuncCell), int, fc0865);
        field(2)[] _t08FB = femField(_t08F7,_t08FA,field(2)[],refField,);
        Femdata: Mesh _t08FC = extractFem(cc0863, Mesh);
        Femdata: Mesh _t08FD = extractFem(cc0863, Mesh);
        int _t08FE = extractFemItem(CellIndex(MeshCell), int, cc0863);
        field(2)[2] _t08FF = femField(_t08FC,_t08FE,field(2)[2],InvTransform,_msh_newtonInverse04FC );
        field(2)[] _t0900 = prim ∘0164<#∞; %2; $[]; %2; $[2]> (_t08FB, _t08FF);
        field(2)[2] _t0901 = prim ∇00A8<#∞; %2> (_t0900);
        grad08F3 = prim @00A5<#∞; %2; $[2]> (_t0901, midRay08CD);
        out0867 = fmVal08D8;
      }
      string _t0902 = "Out val:";
      string _t0903 = "\n";
      print (_t0902, out0867, _t0903);
      string _t0904 = "Grad val:";
      string _t0905 = "\n";
      print (_t0904, grad08F3, _t0905);
      real _t0906 = 0.1e1;
      real _t0907 = 0.1e1;
      real _t0908 = 0.1e1;
      vec3 mcol0909 = [_t0906, _t0907, _t0908];
      bool _t090A = prim !=0088 (cmin0482, cmax0483);
      if _t090A {
        int _t090B = -1;
        real _t090C = (real)_t090B;
        real _t090D = 0.1e1;
        real _t090E = prim lerp0098<$[]> (_t090C, _t090D, cmin0482, out0867, cmax0483);
        mcol0909 = prim @00A5<#0; %1; $[3]> (CM082A, _t090E);
      }
      if light0484 {
        real _t090F = grad08F3[0];
        real _t0910 = grad08F3[1];
        int _t0911 = -1;
        real _t0912 = (real)_t0911;
        vec3 _t0913 = [_t090F, _t0910, _t0912];
        vec3 N0914 = prim normalize0137<$[3]> (_t0913);
        vec3 _t0915 = prim normalize0137<$[3]> (rayVec084C);
        vec3 _t0916 = prim unary -008B<$[3]> (_t0915);
        vec3 _t0917 = prim +0017<$[3]> (_t0916, L082E);
        vec3 H0918 = prim normalize0137<$[3]> (_t0917);
        vec3 lightColor0919 = prim lerp0098<$[3]> (mcnear0478, mcfar047C, camNearVsp0851, cup08C3, camFarVsp0852);
        vec3 ambientTerm091A = prim *0036<$[3]> (phongKa0485, mcol0909);
        vec3 _t091B = prim modulate0129<%3> (mcol0909, lightColor0919);
        vec3 _t091C = prim *0036<$[3]> (phongKd0486, _t091B);
        real _t091D = 0.e0;
        real _t091E = prim •00CE<$[3]; $[3]; $[]> (N0914, L082E);
        real _t091F = prim max0125 (_t091D, _t091E);
        vec3 diffuse0920 = prim *0038<$[3]> (_t091C, _t091F);
        vec3 _t0921 = prim *0036<$[3]> (phongKs0487, lightColor0919);
        real _t0922 = 0.e0;
        real _t0923 = prim •00CE<$[3]; $[3]; $[]> (N0914, H0918);
        real _t0924 = prim max0125 (_t0922, _t0923);
        real _t0925 = prim ^0069 (_t0924, phongSp0488);
        vec3 specular0926 = prim *0038<$[3]> (_t0921, _t0925);
        vec3 _t0927 = prim +0017<$[3]> (ambientTerm091A, diffuse0920);
        vec3 fin0928 = prim +0017<$[3]> (_t0927, specular0926);
        real _t0929 = fin0928[0];
        real _t092A = fin0928[1];
        real _t092B = fin0928[2];
        real _t092C = 0.1e1;
        rgba0868 = [_t0929, _t092A, _t092B, _t092C];
      } else {
        real _t092D = mcol0909[0];
        real _t092E = mcol0909[1];
        real _t092F = mcol0909[2];
        real _t0930 = 0.1e1;
        rgba0868 = [_t092D, _t092E, _t092F, _t0930];
      }
      vec3 _t0931 = prim *0038<$[3]> (rayVec084C, cup08C3);
      vec3 _t0932 = prim +0017<$[3]> (_t0931, rayOrig084B);
      vec3[1] _t0933 = {_t0932};
      vec3[] _t0934 = (vec3[])_t0933;
      locs086D = _t0934;
      stabilize;
    }
    int _t0935 = 32;
    bool _t0936 = prim >007F (intersectionItter085E, _t0935);
    if _t0936 {
      intersectionItter085E = 0;
      int _t0937 = 1;
      itter085D = prim +0015 (itter085D, _t0937);
      bool _t0938 = prim >=007D (itter085D, len0858);
      if _t0938 {
        string _t0939 = "No intersection found\n";
        print (_t0939);
        string _t093A = "Fin pixel=============================\n";
        print (_t093A);
        stabilize;
      }
      int _t093B = prim +0015 (offset0855, itter085D);
      interval0860 = prim $dynsub01C2<vec2> (times0476, _t093B);
      int _t093C = prim +0015 (offset0855, itter085D);
      int _t093D = prim $dynsub01C2<int> (cells0477, _t093C);
      cc0863 = prim $dynsub01C2<Femdata: MeshCell> (0cell_a0464, _t093D);
      s0861 = interval0860[0];
      e0862 = interval0860[1];
      Femdata: FuncCell fc0954;
      int _t0955 = extractFemItem(CellIndex(MeshCell), int, cc0863);
      Femdata: FuncCell _t0956 = loadFem(FuncCell, c0471, _t0955);
      fc0954 = _t0956;
      fc0865 = fc0954;
      string _t093E = "++++++++++++++++Next interval!+++++++++++++++++++\n";
      print (_t093E);
      continue;
    } else {
      string _t093F = "---------------\n";
      print (_t093F);
    }
  }
}
grid(2) {
  int _t0940 = 0;
  int _t0941 = 1;
  int _t0942 = prim -0024 (iresU045D, _t0941);
  int[] _t0943 = prim $range01C3 (_t0940, _t0942);
  foreach vi0949 in _t0943 {
    int _t0944 = 0;
    int _t0945 = 1;
    int _t0946 = prim -0024 (iresV045E, _t0945);
    int[] _t0947 = prim $range01C3 (_t0944, _t0946);
    foreach ui0948 in _t0947 {
      new ray (ui0948, vi0949);
    }
  }
}
/* Program end */
##### high-ir: after simple-to-high translation ####
## properties
  GlobalInit StrandArray HasStartMethod ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[]) HasInputs HasGlobals
## globals
  input isoval0975 (isoval) = <default>
  input thick0976 (thick) = <default>
  input camEye0977 (camEye) = <default>
  input camAt0978 (camAt) = <default>
  input camUp0979 (camUp) = <default>
  input camFOV097A (camFOV) = <default>
  input iresU097B (iresU) = <default>
  input iresV097C (iresV) = <default>
  input camNear097D (camNear) = <default>
  input camFar097E (camFar) = <default>
  input refStep097F (refStep) = <default>
  input rayStep0980 (rayStep) = <default>
  input a0981 (a) = <no-default>
  input 0b046F_intermedateGlobal0982 (b) = <no-default>
  input 0c0471_intermedateGlobal0983 (c) = <no-default>
  input zeroEps0984 (zeroEps) = <default>
  input intervalEps0985 (intervalEps) = <default>
  input indecies0986 (indecies) = <no-default>
  input times0987 (times) = <no-default>
  input cells0988 (cells) = <no-default>
  input mcnear0989 (mcnear) = <default>
  input mcfar098A (mcfar) = <default>
  input cmap098B (cmap) = image("/home/teocollin/gitcode/diderot/tests/lipRay/find/cmap.nrrd")
  input cmin098C (cmin) = <default>
  input cmax098D (cmax) = <default>
  input light098E (light) = <default>
  input phongKa098F (phongKa) = <default>
  input phongKd0990 (phongKd) = <default>
  input phongKs0991 (phongKs) = <default>
  input phongSp0992 (phongSp) = <default>
  input maxAlpha0993 (maxAlpha) = <default>
  input lightVsp0994 (lightVsp) = <default>
  input debug0995 (debug) = <default>
  input debugU0996 (debugU) = <default>
  input debugV0997 (debugV) = <default>
  global femData:MeshCell[] 0cell_a0A12
  global femData:Space b0A13
  global femData:FemFunc c0A14
  global real camDist0A15
  global real camNearVsp0A16
  global real camFarVsp0A17
  global tensor[3] camN0A18
  global tensor[3] camU0A19
  global tensor[3] camV0A1A
  global real camVmax0A1B
  global real camUmax0A1C
  global field CM0A1D
  global tensor[3] L0A1E
## functions
  function femData:MeshPos _msh_newtonInverse0A92 (tensor[2] pos0A1F#2, int cellInt0A20#3, femData:Mesh mesh0A21#7) {
    ENTRY0A91:  preds = []
      real _t0A22#1 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
      real _t0A24#1 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
      tensor[2] xn0A26#1 = <tensor[2]>[_t0A22,_t0A24];
      field _t0A28#1 = λ(INT0,FEM(msh)1,FEM(msh)2)<femV(noFunc, 0, 1, 2)_{i0}⊛Basis()>_{2} (cellInt0A20,mesh0A21,mesh0A21);
      field _t0A2A#1 = λ(F0[2])<∂/∂x_{i1}@(F0_{i0})>_{2 2} (_t0A28);
      field _t0A2C#1 = λ(F0[2])<((Σ(i5=0..1)(i7=0..1)<((ϵ_{ii5,ii0} * ϵ_{ii7,ii1} * F0_{i7,i5}))>(i5=0..1)(i7=0..1)) / ( 1)) / ( Σ(i3=0..1)(i4=0..1)<((ϵ_{ii3,ii4} * F0_{i3,'0'} * F0_{i4,'1'}))>(i3=0..1)(i4=0..1))>_{2 2} (_t0A2A);
      real _t0A2E#1 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
      real _t0A30#1 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
      tensor[2] _t0A32#1 = <tensor[2]>[_t0A2E,_t0A30];
      tensor[2,2] A0A34#1 = λ(F0[2],T1[2])<Probe(F0_{i0,i1},T1)>_{2 2} (_t0A2C,_t0A32);
      int _t0A36#1 = 0;
      int _t0A38#1 = 16;
      int[] _t0A3A#1 = Range(_t0A36,_t0A38);
    FOREACH0A3E:  preds = [ASSIGN0A3B,NEXT0A8D]
      foreach (itter0A3C in _t0A3A) on exit goto ASSIGN0A8F
        tensor[2] xn0A3D#2 = phi(xn0A26,xn0A47)
      field _t0A3F#1 = λ(INT0,FEM(msh)1,FEM(msh)2)<femV(noFunc, 0, 1, 2)_{i0}⊛Basis()>_{2} (cellInt0A20,mesh0A21,mesh0A21);
      field _t0A41#1 = λ(T0[2],F1[2])<(F1_{i0}) - («T0_{i0}»)>_{2} (pos0A1F,_t0A3F);
      field _t0A43#1 = λ(T0[2 2],F1[2])<Σ(i1=0..1)<((«T0_{i0,i1}» * F1_{i1}))>(i1=0..1)>_{2} (A0A34,_t0A41);
      tensor[2] delta0A45#3 = λ(F0[2],T1[2])<Probe(F0_{i0},T1)>_{2} (_t0A43,xn0A3D);
      tensor[2] xn0A47#5 = λ(T0[2],T1[2])<(T0_{i0}) - (T1_{i0})>_{2} (xn0A3D,delta0A45);
      real _t0A49#1 = 0.1e-7;
      real _t0A4B#1 = 0.1e-7;
      real _t0A4D#1 = λ(T0[],T1[])<(T0 * T1)> (_t0A49,_t0A4B);
      real _t0A4F#1 = λ(T0[2],T1[2])<Σ(i0=0..1)<((T0_{i0} * T1_{i0}))>(i0=0..1)> (delta0A45,delta0A45);
      bool _t0A51#1 = GTE<real>(_t0A4D,_t0A4F);
      if _t0A51 then goto ASSIGN0A55 else goto JOIN0A53
    ASSIGN0A55:  preds = [COND0A8C]
      real _t0A54#1 = 0.1e1;
      real _t0A56#1 = 0.1e-8;
      real _t0A58#1 = λ(T0[],T1[])<(T0 + T1)> (_t0A54,_t0A56);
      real _t0A5A#1 = 0.1e1;
      real _t0A5C#1 = 0.1e1;
      tensor[2] _t0A5E#1 = <tensor[2]>[_t0A5A,_t0A5C];
      real _t0A60#1 = λ(T0[2],T1[2])<Σ(i0=0..1)<((T0_{i0} * T1_{i0}))>(i0=0..1)> (_t0A5E,xn0A47);
      bool _t0A62#1 = GT<real>(_t0A58,_t0A60);
      real _t0A64#1 = 0.1e-8;
      real _t0A66#1 = 0.1e-8;
      tensor[2] _t0A68#1 = <tensor[2]>[_t0A64,_t0A66];
      tensor[2] _t0A6A#1 = λ(T0[2],T1[2])<(T0_{i0} + T1_{i0})>_{2} (_t0A68,xn0A47);
      real _t0A6C#1 = TensorIndex<tensor[2],[0]>(_t0A6A);
      real _t0A6E#1 = -0.e0;
      bool _t0A70#1 = GT<real>(_t0A6C,_t0A6E);
      real _t0A72#1 = 0.1e-8;
      real _t0A74#1 = 0.1e-8;
      tensor[2] _t0A76#1 = <tensor[2]>[_t0A72,_t0A74];
      tensor[2] _t0A78#1 = λ(T0[2],T1[2])<(T0_{i0} + T1_{i0})>_{2} (_t0A76,xn0A47);
      real _t0A7A#1 = TensorIndex<tensor[2],[1]>(_t0A78);
      real _t0A7C#1 = -0.e0;
      bool _t0A7E#1 = GT<real>(_t0A7A,_t0A7C);
      bool _t0A80#1 = BAnd(_t0A70,_t0A7E);
      bool _t0A82#1 = BAnd(_t0A62,_t0A80);
      if _t0A82 then goto ASSIGN0A86 else goto ASSIGN0A89
    ASSIGN0A86:  preds = [COND0A8B]
      femData:MeshPos _t0A85#1 = ExtractFemItemN<[femData:Mesh,int,tensor[2],tensor[2]],femData:MeshPos,AllBuild(MeshPos),0000,"",[],int>(mesh0A21,cellInt0A20,xn0A47,pos0A1F);
      return _t0A85
      goto JOIN0A84
    JOIN0A84:  preds = [*RETURN(_t0A85)0A87,*RETURN(_t0A88)0A8A]
      goto JOIN0A53
    JOIN0A53:  preds = [*JOIN0A84,COND0A8C]
      goto FOREACH0A3E
    ASSIGN0A89:  preds = [COND0A8B]
      femData:MeshPos _t0A88#1 = ExtractFemItemN<[femData:Mesh],femData:MeshPos,InvalidBuild(MeshPos),0000,"",[],int>(mesh0A21);
      return _t0A88
      goto JOIN0A84
    ASSIGN0A8F:  preds = [FOREACH0A3E]
      femData:MeshPos _t0A8E#1 = ExtractFemItemN<[femData:Mesh],femData:MeshPos,InvalidBuild(MeshPos),0000,"",[],int>(mesh0A21);
      return _t0A8E
}
  function int[2] nextCell40AA4 (int faceIdx0A93#1, int cell0A94#1, femData:Mesh mesh0A95#1) {
    ENTRY0AA3:  preds = []
      int _t0A96#1 = 6;
      int _t0A98#1 = IMul(cell0A94,_t0A96);
      int _t0A9A#1 = 2;
      int _t0A9C#1 = IMul(faceIdx0A93,_t0A9A);
      int _t0A9E#1 = IAdd(_t0A98,_t0A9C);
      int[2] _t0AA0#1 = ExtractFemItemN<[femData:Mesh,int],int[2],CellFaceCell(Mesh),0000,"",[],int>(mesh0A95,_t0A9E);
      return _t0AA0
}
## input initialization
  ENTRY0A10:  preds = []
    real isoval0998#1 = 0.2e0;
    globals.isoval0975 = isoval0998;
    real thick099B#1 = 0.7e-1;
    globals.thick0976 = thick099B;
    real _t099E#1 = 0.3e1;
    real _t09A0#1 = -0.3e1;
    real _t09A2#1 = 0.3e1;
    tensor[3] camEye09A4#1 = <tensor[3]>[_t099E,_t09A0,_t09A2];
    globals.camEye0977 = camEye09A4;
    real _t09A7#1 = 0.5e0;
    real _t09A9#1 = 0.5e0;
    real _t09AB#1 = 0.5e0;
    tensor[3] camAt09AD#1 = <tensor[3]>[_t09A7,_t09A9,_t09AB];
    globals.camAt0978 = camAt09AD;
    real _t09B0#1 = 0.e0;
    real _t09B2#1 = 0.e0;
    real _t09B4#1 = 0.1e1;
    tensor[3] camUp09B6#1 = <tensor[3]>[_t09B0,_t09B2,_t09B4];
    globals.camUp0979 = camUp09B6;
    real camFOV09B9#1 = 0.137e2;
    globals.camFOV097A = camFOV09B9;
    int iresU09BC#1 = 10;
    globals.iresU097B = iresU09BC;
    int iresV09BF#1 = 10;
    globals.iresV097C = iresV09BF;
    real camNear09C2#1 = -0.2e1;
    globals.camNear097D = camNear09C2;
    real camFar09C5#1 = 0.5e1;
    globals.camFar097E = camFar09C5;
    real refStep09C8#1 = 0.1e1;
    globals.refStep097F = refStep09C8;
    real rayStep09CB#1 = 0.1e-1;
    globals.rayStep0980 = rayStep09CB;
    real zeroEps09CE#1 = 0.1e-10;
    globals.zeroEps0984 = zeroEps09CE;
    real intervalEps09D1#1 = 0.1e-10;
    globals.intervalEps0985 = intervalEps09D1;
    real _t09D4#1 = 0.1e1;
    real _t09D6#1 = 0.1e1;
    real _t09D8#1 = 0.1e1;
    tensor[3] mcnear09DA#1 = <tensor[3]>[_t09D4,_t09D6,_t09D8];
    globals.mcnear0989 = mcnear09DA;
    real _t09DD#1 = 0.1e1;
    real _t09DF#1 = 0.1e1;
    real _t09E1#1 = 0.1e1;
    tensor[3] mcfar09E3#1 = <tensor[3]>[_t09DD,_t09DF,_t09E1];
    globals.mcfar098A = mcfar09E3;
    real cmin09E6#1 = 0.e0;
    globals.cmin098C = cmin09E6;
    real cmax09E9#1 = 0.1e1;
    globals.cmax098D = cmax09E9;
    bool light09EC#1 = false;
    globals.light098E = light09EC;
    real phongKa09EF#1 = 0.5e0;
    globals.phongKa098F = phongKa09EF;
    real phongKd09F2#1 = 0.5e0;
    globals.phongKd0990 = phongKd09F2;
    real phongKs09F5#1 = 0.e0;
    globals.phongKs0991 = phongKs09F5;
    real phongSp09F8#1 = 0.6e2;
    globals.phongSp0992 = phongSp09F8;
    real maxAlpha09FB#1 = 0.1e1;
    globals.maxAlpha0993 = maxAlpha09FB;
    real _t09FE#1 = 0.e0;
    real _t0A00#1 = 0.369e1;
    real _t0A02#1 = 0.153e1;
    tensor[3] lightVsp0A04#1 = <tensor[3]>[_t09FE,_t0A00,_t0A02];
    globals.lightVsp0994 = lightVsp0A04;
    bool debug0A07#1 = false;
    globals.debug0995 = debug0A07;
    int debugU0A0A#1 = 8;
    globals.debugU0996 = debugU0A0A;
    int debugV0A0D#1 = 2;
    globals.debugV0997 = debugV0A0D;
    return
## global-variable initialization
  ENTRY0B1A:  preds = []
    tensor[3] camEye0AB1#2 = globals.camEye0977;
    tensor[3] camAt0AB0#2 = globals.camAt0978;
    tensor[3] camUp0AAF#1 = globals.camUp0979;
    real camFOV0AAE#1 = globals.camFOV097A;
    int iresU0AAD#1 = globals.iresU097B;
    int iresV0AAC#1 = globals.iresV097C;
    real camNear0AAB#1 = globals.camNear097D;
    real camFar0AAA#1 = globals.camFar097E;
    femData:Mesh a0AA9#3 = globals.a0981;
    femData:Space 0b046F_intermedateGlobal0AA8#1 = globals.0b046F_intermedateGlobal0982;
    femData:FemFunc 0c0471_intermedateGlobal0AA7#1 = globals.0c0471_intermedateGlobal0983;
    image(IMAGE1D<double[3]>) cmap0AA6#1 = globals.cmap098B;
    tensor[3] lightVsp0AA5#2 = globals.lightVsp0994;
    int _t0ABF#1 = 0;
    int _t0AC1#1 = 1;
    int _t0AC3#1 = ExtractFemItem<int,NumCell(Mesh)>(a0AA9);
    int _t0AC5#1 = ISub(_t0AC3,_t0AC1);
    int[] _t0AC7#1 = Range(_t0ABF,_t0AC5);
    femData:MeshCell[] _t0AC9#1 = <femData:MeshCell[]>{};
  FOREACH0ACD:  preds = [ASSIGN0ACA,NEXT0AD2]
    foreach (_t0ACB in _t0AC7) on exit goto ASSIGN0AD4
      femData:MeshCell[] _t0ACC#2 = phi(_t0AC9,_t0AD0)
    femData:MeshCell _t0ACE#1 = LoadFem<femData:MeshCell>(a0AA9,_t0ACB);
    femData:MeshCell[] _t0AD0#1 = Append<femData:MeshCell>(_t0ACC,_t0ACE);
    goto FOREACH0ACD
  ASSIGN0AD4:  preds = [FOREACH0ACD]
    femData:MeshCell[] 0cell_a0AD3#1 = _t0ACC;
    globals.0cell_a0A12 = 0cell_a0AD3;
    femData:Space b0AD6#2 = LoadFem<femData:Space>(0b046F_intermedateGlobal0AA8,a0AA9);
    globals.b0A13 = b0AD6;
    femData:FemFunc c0AD9#1 = LoadFem<femData:FemFunc>(0c0471_intermedateGlobal0AA7,b0AD6);
    globals.c0A14 = c0AD9;
    tensor[3] _t0ADC#1 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (camAt0AB0,camEye0AB1);
    real camDist0ADE#4 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (_t0ADC);
    globals.camDist0A15 = camDist0ADE;
    real camNearVsp0AE1#1 = λ(T0[],T1[])<(T0 + T1)> (camNear0AAB,camDist0ADE);
    globals.camNearVsp0A16 = camNearVsp0AE1;
    real camFarVsp0AE4#1 = λ(T0[],T1[])<(T0 + T1)> (camFar0AAA,camDist0ADE);
    globals.camFarVsp0A17 = camFarVsp0AE4;
    tensor[3] _t0AE7#2 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (camAt0AB0,camEye0AB1);
    tensor[3] camN0AE9#4 = λ(T0[3],T1[3])<(T0_{i0} * (1) / ( Sqrt(Σ(i1=0..2)<((T1_{i1} * T1_{i1}))>(i1=0..2))))>_{3} (_t0AE7,_t0AE7);
    globals.camN0A18 = camN0AE9;
    tensor[3] _t0AEC#2 = λ(T0[3],T1[3])<Σ(i1=0..2)(i2=0..2)<((ϵ_{ii0,ii1,ii2} * T0_{i1} * T1_{i2}))>(i1=0..2)(i2=0..2)>_{3} (camN0AE9,camUp0AAF);
    tensor[3] camU0AEE#3 = λ(T0[3],T1[3])<(T0_{i0} * (1) / ( Sqrt(Σ(i1=0..2)<((T1_{i1} * T1_{i1}))>(i1=0..2))))>_{3} (_t0AEC,_t0AEC);
    globals.camU0A19 = camU0AEE;
    tensor[3] camV0AF1#2 = λ(T0[3],T1[3])<Σ(i1=0..2)(i2=0..2)<((ϵ_{ii0,ii1,ii2} * T0_{i1} * T1_{i2}))>(i1=0..2)(i2=0..2)>_{3} (camU0AEE,camN0AE9);
    globals.camV0A1A = camV0AF1;
    real _t0AF4#1 = 0.314159265358979323846264338327950288e1;
    real _t0AF6#1 = λ(T0[],T1[])<(T0 * T1)> (camFOV0AAE,_t0AF4);
    real _t0AF8#1 = 0.36e3;
    real _t0AFA#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t0AF6,_t0AF8);
    real _t0AFC#1 = λ(T0[])<Tangent(T0)> (_t0AFA);
    real camVmax0AFE#2 = λ(T0[],T1[])<(T0 * T1)> (_t0AFC,camDist0ADE);
    globals.camVmax0A1B = camVmax0AFE;
    real _t0B01#1 = IntToReal(iresU0AAD);
    real _t0B03#1 = λ(T0[],T1[])<(T0 * T1)> (camVmax0AFE,_t0B01);
    real _t0B05#1 = IntToReal(iresV0AAC);
    real camUmax0B07#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t0B03,_t0B05);
    globals.camUmax0A1C = camUmax0B07;
    kernel _t0B0A#1 = Kernel<tent,0>;
    image(IMAGE1D<double[3]>) img0B0C#1 = BorderCtlClamp<IMAGE1D<double[3]>>(cmap0AA6);
    field CM0B0E#1 = λ(V0(1)[3],H1)<V0_{i0}⊛H1>_{3} (img0B0C,_t0B0A);
    globals.CM0A1D = CM0B0E;
    tensor[3,3] _t0B11#1 = <tensor[3,3]>[camU0AEE,camV0AF1,camN0AE9];
    tensor[3,3] _t0B13#1 = λ(T0[3 3])<T0_{i1,i0}>_{3 3} (_t0B11);
    tensor[3] _t0B15#1 = λ(T0[3],T1[3])<(T0_{i0} * (1) / ( Sqrt(Σ(i1=0..2)<((T1_{i1} * T1_{i1}))>(i1=0..2))))>_{3} (lightVsp0AA5,lightVsp0AA5);
    tensor[3] L0B17#1 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (_t0B13,_t0B15);
    globals.L0A1E = L0B17;
    return
## strand
  strand ray (int ui0B39#4, int vi0B3A#4)
    state:
      real rayU;
      real rayV;
      tensor[3] UV;
      tensor[3] rayOrig;
      tensor[3] rayVec;
      real camNearVsp;
      real camFarVsp;
      int offset;
      int len;
      int itter;
      int intersectionItter;
      int idx;
      tensor[2] interval;
      real s;
      real e;
      femData:MeshCell cc;
      femData:FuncCell fc;
      output real out;
      output tensor[4] rgba;
      output tensor[3][] locs;
      int ui;
      int vi;
    state init
      ENTRY0BF4:  preds = []
        tensor[3] camEye0B5E#1 = globals.camEye0977;
        int iresU0B5D#2 = globals.iresU097B;
        int iresV0B5C#4 = globals.iresV097C;
        femData:MeshCell[] 0cell_a0B5B#1 = globals.0cell_a0A12;
        femData:FemFunc c0B5A#1 = globals.c0A14;
        int[] indecies0B59#2 = globals.indecies0986;
        tensor[2][] times0B58#1 = globals.times0987;
        real camNearVsp0B57#1 = globals.camNearVsp0A16;
        real camFarVsp0B56#1 = globals.camFarVsp0A17;
        tensor[3] camN0B55#1 = globals.camN0A18;
        tensor[3] camU0B54#1 = globals.camU0A19;
        tensor[3] camV0B53#1 = globals.camV0A1A;
        real camVmax0B52#2 = globals.camVmax0A1B;
        real camUmax0B51#2 = globals.camUmax0A1C;
        real _t0B83#1 = λ(T0[])<Neg(T0)> (camUmax0B51);
        real _t0B85#1 = -0.5e0;
        real _t0B87#1 = IntToReal(ui0B39);
        real _t0B89#1 = IntToReal(iresU0B5D);
        real _t0B8B#1 = 0.5e0;
        real _t0B8D#1 = λ(T0[],T1[])<(T0) - (T1)> (_t0B89,_t0B8B);
        real rayU0B8F#2 = λ(T0[],T1[],T2[],T3[],T4[])<(T0 + (((T3) - (T2)) / ( (T4) - (T2)) * (T1) - (T0)))> (_t0B83,camUmax0B51,_t0B85,_t0B87,_t0B8D);
        real _t0B91#1 = λ(T0[])<Neg(T0)> (camVmax0B52);
        real _t0B93#1 = -0.5e0;
        real _t0B95#1 = IntToReal(vi0B3A);
        real _t0B97#1 = IntToReal(iresV0B5C);
        real _t0B99#1 = 0.5e0;
        real _t0B9B#1 = λ(T0[],T1[])<(T0) - (T1)> (_t0B97,_t0B99);
        real rayV0B9D#2 = λ(T0[],T1[],T2[],T3[],T4[])<(T0 + (((T3) - (T2)) / ( (T4) - (T2)) * (T1) - (T0)))> (_t0B91,camVmax0B52,_t0B93,_t0B95,_t0B9B);
        tensor[3] _t0B9F#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (rayU0B8F,camU0B54);
        tensor[3] _t0BA1#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (rayV0B9D,camV0B53);
        tensor[3] UV0BA3#2 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (_t0B9F,_t0BA1);
        tensor[3] rayOrig0BA5#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (camEye0B5E,UV0BA3);
        real _t0BA7#1 = 0.e0;
        real _t0BA9#1 = 0.e0;
        real _t0BAB#1 = 0.e0;
        tensor[3] _t0BAD#1 = <tensor[3]>[_t0BA7,_t0BA9,_t0BAB];
        tensor[3] rayVec0BAF#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (camN0B55,_t0BAD);
        real camNearVsp0BB1#1 = camNearVsp0B57;
        real camFarVsp0BB3#1 = camFarVsp0B56;
        int _t0BB5#1 = IMul(ui0B39,iresV0B5C);
        int _t0BB7#1 = IAdd(_t0BB5,vi0B3A);
        int offset0BB9#2 = Subscript<int[]>(indecies0B59,_t0BB7);
        int _t0BBB#1 = IMul(iresU0B5D,iresV0B5C);
        int _t0BBD#1 = IMul(ui0B39,iresV0B5C);
        int _t0BBF#1 = IAdd(_t0BBB,_t0BBD);
        int _t0BC1#1 = IAdd(_t0BBF,vi0B3A);
        int len0BC3#1 = Subscript<int[]>(indecies0B59,_t0BC1);
        int itter0BC5#2 = 0;
        int intersectionItter0BC7#1 = 0;
        int idx0BC9#2 = IAdd(offset0BB9,itter0BC5);
        tensor[2] interval0BCB#3 = Subscript<tensor[2][]>(times0B58,idx0BC9);
        real s0BCD#1 = TensorIndex<tensor[2],[0]>(interval0BCB);
        real e0BCF#1 = TensorIndex<tensor[2],[1]>(interval0BCB);
        int _t0BD1#1 = 0;
        femData:MeshCell cc0BD3#2 = Subscript<femData:MeshCell[]>(0cell_a0B5B,_t0BD1);
        int _t0BD6#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc0BD3);
        femData:FuncCell _t0BD8#1 = LoadFem<femData:FuncCell>(c0B5A,_t0BD6);
        femData:FuncCell fc0BDA#1 = _t0BD8;
        femData:FuncCell fc0BDC#1 = fc0BDA;
        real out0BDE#1 = 0.e0;
        real _t0BE0#1 = 0.e0;
        real _t0BE2#1 = 0.e0;
        real _t0BE4#1 = 0.e0;
        real _t0BE6#1 = 0.e0;
        tensor[4] rgba0BE8#1 = <tensor[4]>[_t0BE0,_t0BE2,_t0BE4,_t0BE6];
        tensor[3][0] _t0BEA#1 = <tensor[3][0]>{};
        tensor[3][] _t0BEC#1 = MkDynamic<tensor[3],0>(_t0BEA);
        tensor[3][] locs0BEE#1 = _t0BEC;
        int ui0BF0#1 = ui0B39;
        int vi0BF2#1 = vi0B3A;
        self.rayU = rayU0B8F;
        self.rayV = rayV0B9D;
        self.UV = UV0BA3;
        self.rayOrig = rayOrig0BA5;
        self.rayVec = rayVec0BAF;
        self.camNearVsp = camNearVsp0BB1;
        self.camFarVsp = camFarVsp0BB3;
        self.offset = offset0BB9;
        self.len = len0BC3;
        self.itter = itter0BC5;
        self.intersectionItter = intersectionItter0BC7;
        self.idx = idx0BC9;
        self.interval = interval0BCB;
        self.s = s0BCD;
        self.e = e0BCF;
        self.cc = cc0BD3;
        self.fc = fc0BDC;
        self.out = out0BDE;
        self.rgba = rgba0BE8;
        self.locs = locs0BEE;
        self.ui = ui0BF0;
        self.vi = vi0BF2;
        return
    end state init
    method start
        ENTRY0C7E:  preds = []
          femData:MeshCell[] 0cell_a0C11#1 = globals.0cell_a0A12;
          femData:FemFunc c0C10#1 = globals.c0A14;
          int[] cells0C0F#1 = globals.cells0988;
          bool debug0C0E#1 = globals.debug0995;
          int debugU0C0D#1 = globals.debugU0996;
          int debugV0C0C#1 = globals.debugV0997;
          real rayU0C18#0 = self.rayU;
          real rayV0C19#0 = self.rayV;
          tensor[3] UV0C1A#0 = self.UV;
          tensor[3] rayOrig0C1B#0 = self.rayOrig;
          tensor[3] rayVec0C1C#0 = self.rayVec;
          real camNearVsp0C1D#0 = self.camNearVsp;
          real camFarVsp0C1E#0 = self.camFarVsp;
          int offset0C1F#0 = self.offset;
          int len0C20#1 = self.len;
          int itter0C21#3 = self.itter;
          int intersectionItter0C22#3 = self.intersectionItter;
          int idx0C23#1 = self.idx;
          tensor[2] interval0C24#3 = self.interval;
          real s0C25#3 = self.s;
          real e0C26#3 = self.e;
          femData:MeshCell cc0C27#2 = self.cc;
          femData:FuncCell fc0C28#2 = self.fc;
          real out0C29#3 = self.out;
          tensor[4] rgba0C2A#3 = self.rgba;
          tensor[3][] locs0C2B#3 = self.locs;
          int ui0C2C#2 = self.ui;
          int vi0C2D#2 = self.vi;
          if debug0C0E then goto ASSIGN0C46 else goto JOIN0C44
        ASSIGN0C46:  preds = [COND0C58]
          bool _t0C45#1 = NEQ<int>(ui0C2C,debugU0C0D);
          if _t0C45 then goto ASSIGN0C49 else goto JOIN0C47
        ASSIGN0C49:  preds = [COND0C57]
          bool _t0C48#1 = NEQ<int>(vi0C2D,debugV0C0C);
          if _t0C48 then goto SAVE0C4C else goto JOIN0C4A
        SAVE0C4C:  preds = [COND0C56]
          self.itter = itter0C21;
          self.intersectionItter = intersectionItter0C22;
          self.interval = interval0C24;
          self.s = s0C25;
          self.e = e0C26;
          self.cc = cc0C27;
          self.fc = fc0C28;
          self.out = out0C29;
          self.rgba = rgba0C2A;
          self.locs = locs0C2B;
          stabilize
          goto JOIN0C4A
        JOIN0C4A:  preds = [*STABILIZE0C4B,COND0C56]
          goto JOIN0C47
        JOIN0C47:  preds = [JOIN0C4A,COND0C57]
          goto JOIN0C44
        JOIN0C44:  preds = [JOIN0C47,COND0C58]
          int _t0C59#1 = 0;
          bool _t0C5B#1 = EQ<int>(len0C20,_t0C59);
          if _t0C5B then goto ASSIGN0C5F else goto JOIN0C5D
        ASSIGN0C5F:  preds = [COND0C70]
          string _t0C5E#1 = "(find:)No intersection found:";
          string _t0C60#1 = "/";
          string _t0C62#1 = "\n";
          Print<[string,int,string,int,string]>(_t0C5E,ui0C2C,_t0C60,vi0C2D,_t0C62);
          self.itter = itter0C21;
          self.intersectionItter = intersectionItter0C22;
          self.interval = interval0C24;
          self.s = s0C25;
          self.e = e0C26;
          self.cc = cc0C27;
          self.fc = fc0C28;
          self.out = out0C29;
          self.rgba = rgba0C2A;
          self.locs = locs0C2B;
          stabilize
          goto JOIN0C5D
        JOIN0C5D:  preds = [*STABILIZE0C65,COND0C70]
          int _t0C71#1 = Subscript<int[]>(cells0C0F,idx0C23);
          femData:MeshCell cc0C73#2 = Subscript<femData:MeshCell[]>(0cell_a0C11,_t0C71);
          int _t0C76#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc0C73);
          femData:FuncCell _t0C78#1 = LoadFem<femData:FuncCell>(c0C10,_t0C76);
          femData:FuncCell fc0C7A#1 = _t0C78;
          femData:FuncCell fc0C7C#1 = fc0C7A;
          self.itter = itter0C21;
          self.intersectionItter = intersectionItter0C22;
          self.interval = interval0C24;
          self.s = s0C25;
          self.e = e0C26;
          self.cc = cc0C73;
          self.fc = fc0C7C;
          self.out = out0C29;
          self.rgba = rgba0C2A;
          self.locs = locs0C2B;
          active
    end start
    method update
        ENTRY0F59:  preds = []
          femData:MeshCell[] 0cell_a0C9A#1 = globals.0cell_a0A12;
          femData:FemFunc c0C99#1 = globals.c0A14;
          real zeroEps0C98#2 = globals.zeroEps0984;
          real intervalEps0C97#4 = globals.intervalEps0985;
          tensor[2][] times0C96#1 = globals.times0987;
          int[] cells0C95#1 = globals.cells0988;
          tensor[3] mcnear0C94#1 = globals.mcnear0989;
          tensor[3] mcfar0C93#1 = globals.mcfar098A;
          real cmin0C92#2 = globals.cmin098C;
          real cmax0C91#2 = globals.cmax098D;
          bool light0C90#1 = globals.light098E;
          real phongKa0C8F#1 = globals.phongKa098F;
          real phongKd0C8E#1 = globals.phongKd0990;
          real phongKs0C8D#1 = globals.phongKs0991;
          real phongSp0C8C#1 = globals.phongSp0992;
          field CM0C8B#1 = globals.CM0A1D;
          tensor[3] L0C8A#2 = globals.L0A1E;
          real rayU0CAC#0 = self.rayU;
          real rayV0CAD#0 = self.rayV;
          tensor[3] UV0CAE#0 = self.UV;
          tensor[3] rayOrig0CAF#10 = self.rayOrig;
          tensor[3] rayVec0CB0#12 = self.rayVec;
          real camNearVsp0CB1#1 = self.camNearVsp;
          real camFarVsp0CB2#1 = self.camFarVsp;
          int offset0CB3#2 = self.offset;
          int len0CB4#1 = self.len;
          int itter0CB5#5 = self.itter;
          int intersectionItter0CB6#3 = self.intersectionItter;
          int idx0CB7#0 = self.idx;
          tensor[2] interval0CB8#4 = self.interval;
          real s0CB9#7 = self.s;
          real e0CBA#6 = self.e;
          femData:MeshCell cc0CBB#16 = self.cc;
          femData:FuncCell fc0CBC#16 = self.fc;
          real out0CBD#3 = self.out;
          tensor[4] rgba0CBE#2 = self.rgba;
          tensor[3][] locs0CBF#2 = self.locs;
          int ui0CC0#1 = self.ui;
          int vi0CC1#1 = self.vi;
          string _t0CD8#1 = "Ui/Vi::";
          string _t0CDA#1 = "/";
          string _t0CDC#1 = "\n";
          Print<[string,int,string,int,string]>(_t0CD8,ui0CC0,_t0CDA,vi0CC1,_t0CDC);
          string _t0CDF#1 = "Interval:";
          tensor[2] _t0CE1#1 = <tensor[2]>[s0CB9,e0CBA];
          string _t0CE3#1 = "\n";
          Print<[string,tensor[2],string]>(_t0CDF,_t0CE1,_t0CE3);
          string _t0CE6#1 = "inner itter:";
          string _t0CE8#1 = "\n";
          Print<[string,int,string]>(_t0CE6,intersectionItter0CB6,_t0CE8);
          string _t0CEB#1 = "Outer itter:";
          string _t0CED#1 = "\n";
          Print<[string,int,string]>(_t0CEB,itter0CB5,_t0CED);
          real _t0CF0#1 = TensorIndex<tensor[3],[0]>(rayOrig0CAF);
          real _t0CF2#1 = TensorIndex<tensor[3],[1]>(rayOrig0CAF);
          tensor[2] _t0CF4#1 = <tensor[2]>[_t0CF0,_t0CF2];
          real _t0CF6#1 = TensorIndex<tensor[3],[0]>(rayVec0CB0);
          real _t0CF8#1 = TensorIndex<tensor[3],[1]>(rayVec0CB0);
          tensor[2] _t0CFA#1 = <tensor[2]>[_t0CF6,_t0CF8];
          tensor[2] _t0CFC#1 = λ(T0[],T1[2])<(T0 * T1_{i0})>_{2} (s0CB9,_t0CFA);
          tensor[2] startRay0CFE#1 = λ(T0[2],T1[2])<(T0_{i0} + T1_{i0})>_{2} (_t0CF4,_t0CFC);
          real _t0D00#1 = TensorIndex<tensor[3],[0]>(rayOrig0CAF);
          real _t0D02#1 = TensorIndex<tensor[3],[1]>(rayOrig0CAF);
          tensor[2] _t0D04#1 = <tensor[2]>[_t0D00,_t0D02];
          real _t0D06#1 = TensorIndex<tensor[3],[0]>(rayVec0CB0);
          real _t0D08#1 = TensorIndex<tensor[3],[1]>(rayVec0CB0);
          tensor[2] _t0D0A#1 = <tensor[2]>[_t0D06,_t0D08];
          tensor[2] _t0D0C#1 = λ(T0[],T1[2])<(T0 * T1_{i0})>_{2} (e0CBA,_t0D0A);
          tensor[2] endRay0D0E#1 = λ(T0[2],T1[2])<(T0_{i0} + T1_{i0})>_{2} (_t0D04,_t0D0C);
          femData:Mesh _t0D10#2 = ExtractFem<femData:Mesh,femData:MeshCell>(cc0CBB);
          femData:Mesh _t0D12#0 = ExtractFem<femData:Mesh,femData:MeshCell>(cc0CBB);
          int _t0D14#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc0CBB);
          field _t0D16#1 = λ(INT0,FEM(msh)1,FEM(msh)2)<femInvV(0A92, 0, 1, 2)_{i0}⊛Basis()>_{2} (_t0D14,_t0D10,_t0D10);
          tensor[2] invertA0D18#2 = λ(F0[2],T1[2])<Probe(F0_{i0},T1)>_{2} (_t0D16,startRay0CFE);
          femData:Mesh _t0D1A#2 = ExtractFem<femData:Mesh,femData:MeshCell>(cc0CBB);
          femData:Mesh _t0D1C#0 = ExtractFem<femData:Mesh,femData:MeshCell>(cc0CBB);
          int _t0D1E#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc0CBB);
          field _t0D20#1 = λ(INT0,FEM(msh)1,FEM(msh)2)<femInvV(0A92, 0, 1, 2)_{i0}⊛Basis()>_{2} (_t0D1E,_t0D1A,_t0D1A);
          tensor[2] invertB0D22#2 = λ(F0[2],T1[2])<Probe(F0_{i0},T1)>_{2} (_t0D20,endRay0D0E);
          string _t0D24#1 = "inverses:";
          string _t0D26#1 = "\n";
          Print<[string,tensor[2],tensor[2],string]>(_t0D24,invertA0D18,invertB0D22,_t0D26);
          femData:FemFunc _t0D29#1 = ExtractFem<femData:FemFunc,femData:FuncCell>(fc0CBC);
          femData:FemFunc _t0D2B#1 = ExtractFem<femData:FemFunc,femData:FuncCell>(fc0CBC);
          femData:Space _t0D2D#1 = ExtractFem<femData:Space,femData:FemFunc>(_t0D2B);
          int _t0D2F#1 = ExtractFemItem<int,CellIndex(FuncCell)>(fc0CBC);
          field _t0D31#1 = λ(INT0,FEM(fns)1,FEM(func)2)<femV(noFunc, 0, 1, 2)⊛Basis()> (_t0D2F,_t0D2D,_t0D29);
          real faVal0D33#1 = λ(F0[2],T1[2])<Probe(F0,T1)> (_t0D31,invertA0D18);
          real _t0D35#1 = TensorIndex<tensor[3],[2]>(rayVec0CB0);
          real _t0D37#1 = λ(T0[],T1[])<(T0 * T1)> (_t0D35,s0CB9);
          real _t0D39#1 = λ(T0[],T1[])<(T0) - (T1)> (faVal0D33,_t0D37);
          real _t0D3B#1 = TensorIndex<tensor[3],[2]>(rayOrig0CAF);
          real fa0D3D#10 = λ(T0[],T1[])<(T0) - (T1)> (_t0D39,_t0D3B);
          femData:FemFunc _t0D3F#1 = ExtractFem<femData:FemFunc,femData:FuncCell>(fc0CBC);
          femData:FemFunc _t0D41#1 = ExtractFem<femData:FemFunc,femData:FuncCell>(fc0CBC);
          femData:Space _t0D43#1 = ExtractFem<femData:Space,femData:FemFunc>(_t0D41);
          int _t0D45#1 = ExtractFemItem<int,CellIndex(FuncCell)>(fc0CBC);
          field _t0D47#1 = λ(INT0,FEM(fns)1,FEM(func)2)<femV(noFunc, 0, 1, 2)⊛Basis()> (_t0D45,_t0D43,_t0D3F);
          real _t0D49#1 = λ(F0[2],T1[2])<Probe(F0,T1)> (_t0D47,invertB0D22);
          real _t0D4B#1 = TensorIndex<tensor[3],[2]>(rayVec0CB0);
          real _t0D4D#1 = λ(T0[],T1[])<(T0 * T1)> (_t0D4B,e0CBA);
          real _t0D4F#1 = λ(T0[],T1[])<(T0) - (T1)> (_t0D49,_t0D4D);
          real _t0D51#1 = TensorIndex<tensor[3],[2]>(rayOrig0CAF);
          real fb0D53#6 = λ(T0[],T1[])<(T0) - (T1)> (_t0D4F,_t0D51);
          string _t0D55#1 = "Vals:";
          tensor[2] _t0D57#1 = <tensor[2]>[fa0D3D,fb0D53];
          string _t0D59#1 = "\n";
          Print<[string,tensor[2],string]>(_t0D55,_t0D57,_t0D59);
          real _t0D5C#1 = λ(T0[],T1[])<(T0) - (T1)> (fa0D3D,fb0D53);
          real _t0D5E#1 = λ(T0[])<Abs(T0)> (_t0D5C);
          bool _t0D60#1 = LT<real>(_t0D5E,intervalEps0C97);
          if _t0D60 then goto ASSIGN0D64 else goto JOIN0D62
        ASSIGN0D64:  preds = [COND0D82]
          real _t0D63#1 = λ(T0[])<Abs(T0)> (fa0D3D);
          bool _t0D65#1 = GT<real>(_t0D63,intervalEps0C97);
          if _t0D65 then goto ASSIGN0D69 else goto JOIN0D67
        ASSIGN0D69:  preds = [COND0D80]
          real _t0D68#1 = λ(T0[])<Abs(T0)> (fb0D53);
          bool _t0D6A#1 = GT<real>(_t0D68,intervalEps0C97);
          if _t0D6A then goto ASSIGN0D6E else goto JOIN0D6C
        ASSIGN0D6E:  preds = [COND0D7E]
          string _t0D6D#1 = "warn\n";
          Print<[string]>(_t0D6D);
          real s0D70#1 = λ(T0[],T1[])<(T0 + T1)> (s0CB9,intervalEps0C97);
          self.itter = itter0CB5;
          self.intersectionItter = intersectionItter0CB6;
          self.interval = interval0CB8;
          self.s = s0D70;
          self.e = e0CBA;
          self.cc = cc0CBB;
          self.fc = fc0CBC;
          self.out = out0CBD;
          self.rgba = rgba0CBE;
          self.locs = locs0CBF;
          active
          goto JOIN0D6C
        JOIN0D6C:  preds = [*ACTIVE0D73,COND0D7E]
          real s0D71#1 = phi(s0CB9)
          goto JOIN0D67
        JOIN0D67:  preds = [JOIN0D6C,COND0D80]
          real s0D7F#1 = phi(s0D71,s0CB9)
          goto JOIN0D62
        JOIN0D62:  preds = [JOIN0D67,COND0D82]
          real s0D81#3 = phi(s0D7F,s0CB9)
          real _t0D83#1 = λ(T0[],T1[])<(T0 * T1)> (s0D81,fb0D53);
          real _t0D85#1 = λ(T0[],T1[])<(T0 * T1)> (e0CBA,fa0D3D);
          real _t0D87#1 = λ(T0[],T1[])<(T0) - (T1)> (_t0D83,_t0D85);
          real _t0D89#1 = λ(T0[],T1[])<(T0) - (T1)> (fb0D53,fa0D3D);
          real cup0D8B#7 = λ(T0[],T1[])<(T0) / ( T1)> (_t0D87,_t0D89);
          string _t0D8D#1 = "Mid time:";
          string _t0D8F#1 = "\n";
          Print<[string,real,string]>(_t0D8D,cup0D8B,_t0D8F);
          real _t0D92#1 = TensorIndex<tensor[3],[0]>(rayOrig0CAF);
          real _t0D94#1 = TensorIndex<tensor[3],[1]>(rayOrig0CAF);
          tensor[2] _t0D96#1 = <tensor[2]>[_t0D92,_t0D94];
          real _t0D98#1 = TensorIndex<tensor[3],[0]>(rayVec0CB0);
          real _t0D9A#1 = TensorIndex<tensor[3],[1]>(rayVec0CB0);
          tensor[2] _t0D9C#1 = <tensor[2]>[_t0D98,_t0D9A];
          tensor[2] _t0D9E#1 = λ(T0[],T1[2])<(T0 * T1_{i0})>_{2} (cup0D8B,_t0D9C);
          tensor[2] midRay0DA0#2 = λ(T0[2],T1[2])<(T0_{i0} + T1_{i0})>_{2} (_t0D96,_t0D9E);
          femData:Mesh _t0DA2#2 = ExtractFem<femData:Mesh,femData:MeshCell>(cc0CBB);
          femData:Mesh _t0DA4#0 = ExtractFem<femData:Mesh,femData:MeshCell>(cc0CBB);
          int _t0DA6#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc0CBB);
          field _t0DA8#1 = λ(INT0,FEM(msh)1,FEM(msh)2)<femInvV(0A92, 0, 1, 2)_{i0}⊛Basis()>_{2} (_t0DA6,_t0DA2,_t0DA2);
          tensor[2] invertC0DAA#1 = λ(F0[2],T1[2])<Probe(F0_{i0},T1)>_{2} (_t0DA8,midRay0DA0);
          femData:FemFunc _t0DAC#1 = ExtractFem<femData:FemFunc,femData:FuncCell>(fc0CBC);
          femData:FemFunc _t0DAE#1 = ExtractFem<femData:FemFunc,femData:FuncCell>(fc0CBC);
          femData:Space _t0DB0#1 = ExtractFem<femData:Space,femData:FemFunc>(_t0DAE);
          int _t0DB2#1 = ExtractFemItem<int,CellIndex(FuncCell)>(fc0CBC);
          field _t0DB4#1 = λ(INT0,FEM(fns)1,FEM(func)2)<femV(noFunc, 0, 1, 2)⊛Basis()> (_t0DB2,_t0DB0,_t0DAC);
          real fmVal0DB6#2 = λ(F0[2],T1[2])<Probe(F0,T1)> (_t0DB4,invertC0DAA);
          real _t0DB8#1 = TensorIndex<tensor[3],[2]>(rayVec0CB0);
          real _t0DBA#1 = λ(T0[],T1[])<(T0 * T1)> (_t0DB8,cup0D8B);
          real _t0DBC#1 = λ(T0[],T1[])<(T0) - (T1)> (fmVal0DB6,_t0DBA);
          real _t0DBE#1 = TensorIndex<tensor[3],[2]>(rayOrig0CAF);
          real fm0DC0#7 = λ(T0[],T1[])<(T0) - (T1)> (_t0DBC,_t0DBE);
          string _t0DC2#1 = "all vals:";
          tensor[3] _t0DC4#1 = <tensor[3]>[fa0D3D,fm0DC0,fb0D53];
          string _t0DC6#1 = "\n";
          Print<[string,tensor[3],string]>(_t0DC2,_t0DC4,_t0DC6);
          int _t0DC9#1 = 1;
          int intersectionItter0DCB#3 = IAdd(intersectionItter0CB6,_t0DC9);
          real _t0DCE#1 = 0.e0;
          bool _t0DD0#1 = GT<real>(fa0D3D,_t0DCE);
          if _t0DD0 then goto ASSIGN0DD4 else goto ASSIGN0DD9
        ASSIGN0DD4:  preds = [COND0DE7]
          int _t0DD3#1 = 1;
          int _t0DD5#1 = _t0DD3;
          goto JOIN0DD2
        JOIN0DD2:  preds = [ASSIGN0DD7,JOIN0DDC]
          int _t0DD6#1 = phi(_t0DD5,_t0DE0)
          real _t0DE9#1 = 0.e0;
          bool _t0DEB#1 = GT<real>(fm0DC0,_t0DE9);
          if _t0DEB then goto ASSIGN0DEF else goto ASSIGN0DF4
        ASSIGN0DEF:  preds = [COND0E02]
          int _t0DEE#1 = 1;
          int _t0DF0#1 = _t0DEE;
          goto JOIN0DED
        JOIN0DED:  preds = [ASSIGN0DF2,JOIN0DF7]
          int _t0DF1#1 = phi(_t0DF0,_t0DFB)
          int _t0E03#1 = IMul(_t0DD6,_t0DF1);
          int _t0E05#1 = 0;
          bool _t0E07#1 = LT<int>(_t0E03,_t0E05);
          if _t0E07 then goto ASSIGN0E0C else goto ASSIGN0E0F
        ASSIGN0E0C:  preds = [COND0E4F]
          real e0E0A#1 = cup0D8B;
          goto JOIN0E09
        JOIN0E09:  preds = [ASSIGN0E0C,JOIN0E49]
          real e0E0B#4 = phi(e0E0A,e0CBA)
          real s0E4E#4 = phi(s0D81,s0E4B)
          string _t0E50#1 = "new interval:";
          tensor[2] _t0E52#1 = <tensor[2]>[s0E4E,e0E0B];
          string _t0E54#1 = "\n";
          Print<[string,tensor[2],string]>(_t0E50,_t0E52,_t0E54);
          real _t0E57#1 = λ(T0[])<Abs(T0)> (fm0DC0);
          bool _t0E59#1 = LT<real>(_t0E57,zeroEps0C98);
          if _t0E59 then goto ASSIGN0E5D else goto JOIN0E5B
        ASSIGN0E5D:  preds = [COND0F08]
          real _t0E5C#1 = 0.e0;
          real _t0E5E#1 = 0.e0;
          tensor[2] grad0E60#1 = <tensor[2]>[_t0E5C,_t0E5E];
          real _t0E62#1 = λ(T0[])<Abs(T0)> (fm0DC0);
          bool _t0E64#1 = LT<real>(_t0E62,zeroEps0C98);
          if _t0E64 then goto ASSIGN0E68 else goto JOIN0E66
        ASSIGN0E68:  preds = [COND0E83]
          femData:FemFunc _t0E67#1 = ExtractFem<femData:FemFunc,femData:FuncCell>(fc0CBC);
          femData:FemFunc _t0E69#1 = ExtractFem<femData:FemFunc,femData:FuncCell>(fc0CBC);
          femData:Space _t0E6B#1 = ExtractFem<femData:Space,femData:FemFunc>(_t0E69);
          int _t0E6D#1 = ExtractFemItem<int,CellIndex(FuncCell)>(fc0CBC);
          field _t0E6F#1 = λ(INT0,FEM(fns)1,FEM(func)2)<femV(noFunc, 0, 1, 2)⊛Basis()> (_t0E6D,_t0E6B,_t0E67);
          femData:Mesh _t0E71#2 = ExtractFem<femData:Mesh,femData:MeshCell>(cc0CBB);
          femData:Mesh _t0E73#0 = ExtractFem<femData:Mesh,femData:MeshCell>(cc0CBB);
          int _t0E75#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc0CBB);
          field _t0E77#1 = λ(INT0,FEM(msh)1,FEM(msh)2)<femInvV(0A92, 0, 1, 2)_{i0}⊛Basis()>_{2} (_t0E75,_t0E71,_t0E71);
          field _t0E79#1 = λ(F0[2],F1[2])<Cmp(F0)[F1_{i0}{2}]> (_t0E6F,_t0E77);
          field _t0E7B#1 = λ(F0[2])<∂/∂x_{i0}@(F0)>_{2} (_t0E79);
          tensor[2] grad0E7D#1 = λ(F0[2],T1[2])<Probe(F0_{i0},T1)>_{2} (_t0E7B,midRay0DA0);
          real out0E80#1 = fmVal0DB6;
          goto JOIN0E66
        JOIN0E66:  preds = [ASSIGN0E82,COND0E83]
          tensor[2] grad0E7E#3 = phi(grad0E7D,grad0E60)
          real out0E81#3 = phi(out0E80,out0CBD)
          string _t0E85#1 = "Out val:";
          string _t0E87#1 = "\n";
          Print<[string,real,string]>(_t0E85,out0E81,_t0E87);
          string _t0E8A#1 = "Grad val:";
          string _t0E8C#1 = "\n";
          Print<[string,tensor[2],string]>(_t0E8A,grad0E7E,_t0E8C);
          real _t0E8F#1 = 0.1e1;
          real _t0E91#1 = 0.1e1;
          real _t0E93#1 = 0.1e1;
          tensor[3] mcol0E95#1 = <tensor[3]>[_t0E8F,_t0E91,_t0E93];
          bool _t0E97#1 = NEQ<real>(cmin0C92,cmax0C91);
          if _t0E97 then goto ASSIGN0E9B else goto JOIN0E99
        ASSIGN0E9B:  preds = [COND0EA5]
          int _t0E9A#1 = -1;
          real _t0E9C#1 = IntToReal(_t0E9A);
          real _t0E9E#1 = 0.1e1;
          real _t0EA0#1 = λ(T0[],T1[],T2[],T3[],T4[])<(T0 + (((T3) - (T2)) / ( (T4) - (T2)) * (T1) - (T0)))> (_t0E9C,_t0E9E,cmin0C92,out0E81,cmax0C91);
          tensor[3] mcol0EA2#1 = λ(F0[1],T1[1])<Probe(F0_{i0},T1)>_{3} (CM0C8B,_t0EA0);
          goto JOIN0E99
        JOIN0E99:  preds = [ASSIGN0EA4,COND0EA5]
          tensor[3] mcol0EA3#5 = phi(mcol0EA2,mcol0E95)
          if light0C90 then goto ASSIGN0EA8 else goto ASSIGN0EE7
        ASSIGN0EA8:  preds = [COND0EF0]
          real _t0EA7#1 = TensorIndex<tensor[2],[0]>(grad0E7E);
          real _t0EA9#1 = TensorIndex<tensor[2],[1]>(grad0E7E);
          int _t0EAB#1 = -1;
          real _t0EAD#1 = IntToReal(_t0EAB);
          tensor[3] _t0EAF#2 = <tensor[3]>[_t0EA7,_t0EA9,_t0EAD];
          tensor[3] N0EB1#2 = λ(T0[3],T1[3])<(T0_{i0} * (1) / ( Sqrt(Σ(i1=0..2)<((T1_{i1} * T1_{i1}))>(i1=0..2))))>_{3} (_t0EAF,_t0EAF);
          tensor[3] _t0EB3#1 = λ(T0[3],T1[3])<(T0_{i0} * (1) / ( Sqrt(Σ(i1=0..2)<((T1_{i1} * T1_{i1}))>(i1=0..2))))>_{3} (rayVec0CB0,rayVec0CB0);
          tensor[3] _t0EB5#1 = λ(T0[3])<Neg(T0_{i0})>_{3} (_t0EB3);
          tensor[3] _t0EB7#2 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (_t0EB5,L0C8A);
          tensor[3] H0EB9#1 = λ(T0[3],T1[3])<(T0_{i0} * (1) / ( Sqrt(Σ(i1=0..2)<((T1_{i1} * T1_{i1}))>(i1=0..2))))>_{3} (_t0EB7,_t0EB7);
          tensor[3] lightColor0EBB#2 = λ(T0[3],T1[3],T2[],T3[],T4[])<(T0_{i0} + (((T3) - (T2)) / ( (T4) - (T2)) * (T1_{i0}) - (T0_{i0})))>_{3} (mcnear0C94,mcfar0C93,camNearVsp0CB1,cup0D8B,camFarVsp0CB2);
          tensor[3] ambientTerm0EBD#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (phongKa0C8F,mcol0EA3);
          tensor[3] _t0EBF#1 = λ(T0[3],T1[3])<(T0_{i0} * T1_{i0})>_{3} (mcol0EA3,lightColor0EBB);
          tensor[3] _t0EC1#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (phongKd0C8E,_t0EBF);
          real _t0EC3#1 = 0.e0;
          real _t0EC5#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (N0EB1,L0C8A);
          real _t0EC7#1 = Max<real>(_t0EC3,_t0EC5);
          tensor[3] diffuse0EC9#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (_t0EC7,_t0EC1);
          tensor[3] _t0ECB#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (phongKs0C8D,lightColor0EBB);
          real _t0ECD#1 = 0.e0;
          real _t0ECF#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (N0EB1,H0EB9);
          real _t0ED1#1 = Max<real>(_t0ECD,_t0ECF);
          real _t0ED3#1 = MathFn<pow>(_t0ED1,phongSp0C8C);
          tensor[3] specular0ED5#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (_t0ED3,_t0ECB);
          tensor[3] _t0ED7#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (ambientTerm0EBD,diffuse0EC9);
          tensor[3] fin0ED9#3 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (_t0ED7,specular0ED5);
          real _t0EDB#1 = TensorIndex<tensor[3],[0]>(fin0ED9);
          real _t0EDD#1 = TensorIndex<tensor[3],[1]>(fin0ED9);
          real _t0EDF#1 = TensorIndex<tensor[3],[2]>(fin0ED9);
          real _t0EE1#1 = 0.1e1;
          tensor[4] rgba0EE3#1 = <tensor[4]>[_t0EDB,_t0EDD,_t0EDF,_t0EE1];
          goto JOIN0EA6
        JOIN0EA6:  preds = [ASSIGN0EE5,ASSIGN0EEF]
          tensor[4] rgba0EE4#1 = phi(rgba0EE3,rgba0EEE)
          tensor[3] _t0EF2#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (cup0D8B,rayVec0CB0);
          tensor[3] _t0EF4#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (_t0EF2,rayOrig0CAF);
          tensor[3][1] _t0EF6#1 = <tensor[3][1]>{_t0EF4};
          tensor[3][] _t0EF8#1 = MkDynamic<tensor[3],1>(_t0EF6);
          tensor[3][] locs0EFA#1 = _t0EF8;
          self.itter = itter0CB5;
          self.intersectionItter = intersectionItter0DCB;
          self.interval = interval0CB8;
          self.s = s0E4E;
          self.e = e0E0B;
          self.cc = cc0CBB;
          self.fc = fc0CBC;
          self.out = out0E81;
          self.rgba = rgba0EE4;
          self.locs = locs0EFA;
          stabilize
          goto JOIN0E5B
        JOIN0E5B:  preds = [*STABILIZE0EFD,COND0F08]
          tensor[3][] locs0EFB#3 = phi(locs0CBF)
          tensor[4] rgba0EF1#3 = phi(rgba0CBE)
          real out0E84#3 = phi(out0CBD)
          int _t0F09#1 = 32;
          bool _t0F0B#1 = GT<int>(intersectionItter0DCB,_t0F09);
          if _t0F0B then goto ASSIGN0F10 else goto ASSIGN0F56
        ASSIGN0F10:  preds = [COND0F58]
          int intersectionItter0F0E#2 = 0;
          int _t0F11#1 = 1;
          int itter0F13#5 = IAdd(itter0CB5,_t0F11);
          bool _t0F16#1 = GTE<int>(itter0F13,len0CB4);
          if _t0F16 then goto ASSIGN0F1A else goto JOIN0F18
        ASSIGN0F1A:  preds = [COND0F2A]
          string _t0F19#1 = "No intersection found\n";
          Print<[string]>(_t0F19);
          string _t0F1C#1 = "Fin pixel=============================\n";
          Print<[string]>(_t0F1C);
          self.itter = itter0F13;
          self.intersectionItter = intersectionItter0F0E;
          self.interval = interval0CB8;
          self.s = s0E4E;
          self.e = e0E0B;
          self.cc = cc0CBB;
          self.fc = fc0CBC;
          self.out = out0E84;
          self.rgba = rgba0EF1;
          self.locs = locs0EFB;
          stabilize
          goto JOIN0F18
        JOIN0F18:  preds = [*STABILIZE0F1F,COND0F2A]
          int _t0F2B#1 = IAdd(offset0CB3,itter0F13);
          tensor[2] interval0F2D#3 = Subscript<tensor[2][]>(times0C96,_t0F2B);
          int _t0F30#1 = IAdd(offset0CB3,itter0F13);
          int _t0F32#1 = Subscript<int[]>(cells0C95,_t0F30);
          femData:MeshCell cc0F34#2 = Subscript<femData:MeshCell[]>(0cell_a0C9A,_t0F32);
          real s0F37#1 = TensorIndex<tensor[2],[0]>(interval0F2D);
          real e0F3A#1 = TensorIndex<tensor[2],[1]>(interval0F2D);
          int _t0F3E#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc0F34);
          femData:FuncCell _t0F40#1 = LoadFem<femData:FuncCell>(c0C99,_t0F3E);
          femData:FuncCell fc0F42#1 = _t0F40;
          femData:FuncCell fc0F44#1 = fc0F42;
          string _t0F47#1 = "++++++++++++++++Next interval!+++++++++++++++++++\n";
          Print<[string]>(_t0F47);
          self.itter = itter0F13;
          self.intersectionItter = intersectionItter0F0E;
          self.interval = interval0F2D;
          self.s = s0F37;
          self.e = e0F3A;
          self.cc = cc0F34;
          self.fc = fc0F44;
          self.out = out0E84;
          self.rgba = rgba0EF1;
          self.locs = locs0EFB;
          active
          goto JOIN0F0D
        JOIN0F0D:  preds = [*ACTIVE0F4A,MASSIGN0F57]
          femData:FuncCell fc0F45#1 = phi(fc0CBC)
          femData:MeshCell cc0F35#1 = phi(cc0CBB)
          real e0F3B#1 = phi(e0E0B)
          real s0F38#1 = phi(s0E4E)
          tensor[2] interval0F2E#1 = phi(interval0CB8)
          int intersectionItter0F0F#1 = phi(intersectionItter0DCB)
          int itter0F14#1 = phi(itter0CB5)
          self.itter = itter0F14;
          self.intersectionItter = intersectionItter0F0F;
          self.interval = interval0F2E;
          self.s = s0F38;
          self.e = e0F3B;
          self.cc = cc0F35;
          self.fc = fc0F45;
          self.out = out0E84;
          self.rgba = rgba0EF1;
          self.locs = locs0EFB;
          active
        ASSIGN0F56:  preds = [COND0F58]
          string _t0F55#1 = "---------------\n";
          Print<[string]>(_t0F55);
          goto JOIN0F0D
        ASSIGN0EE7:  preds = [COND0EF0]
          real _t0EE6#1 = TensorIndex<tensor[3],[0]>(mcol0EA3);
          real _t0EE8#1 = TensorIndex<tensor[3],[1]>(mcol0EA3);
          real _t0EEA#1 = TensorIndex<tensor[3],[2]>(mcol0EA3);
          real _t0EEC#1 = 0.1e1;
          tensor[4] rgba0EEE#1 = <tensor[4]>[_t0EE6,_t0EE8,_t0EEA,_t0EEC];
          goto JOIN0EA6
        ASSIGN0E0F:  preds = [COND0E4F]
          real _t0E0E#1 = 0.e0;
          bool _t0E10#1 = GT<real>(fa0D3D,_t0E0E);
          if _t0E10 then goto ASSIGN0E14 else goto ASSIGN0E19
        ASSIGN0E14:  preds = [COND0E27]
          int _t0E13#1 = 1;
          int _t0E15#1 = _t0E13;
          goto JOIN0E12
        JOIN0E12:  preds = [ASSIGN0E17,JOIN0E1C]
          int _t0E16#1 = phi(_t0E15,_t0E20)
          real _t0E29#1 = 0.e0;
          bool _t0E2B#1 = GT<real>(fm0DC0,_t0E29);
          if _t0E2B then goto ASSIGN0E2F else goto ASSIGN0E34
        ASSIGN0E2F:  preds = [COND0E42]
          int _t0E2E#1 = 1;
          int _t0E30#1 = _t0E2E;
          goto JOIN0E2D
        JOIN0E2D:  preds = [ASSIGN0E32,JOIN0E37]
          int _t0E31#1 = phi(_t0E30,_t0E3B)
          int _t0E43#1 = IMul(_t0E16,_t0E31);
          int _t0E45#1 = 0;
          bool _t0E47#1 = GT<int>(_t0E43,_t0E45);
          if _t0E47 then goto ASSIGN0E4C else goto JOIN0E49
        ASSIGN0E4C:  preds = [COND0E4D]
          real s0E4A#1 = cup0D8B;
          goto JOIN0E49
        JOIN0E49:  preds = [ASSIGN0E4C,COND0E4D]
          real s0E4B#1 = phi(s0E4A,s0D81)
          goto JOIN0E09
        ASSIGN0E34:  preds = [COND0E42]
          real _t0E33#1 = 0.e0;
          bool _t0E35#1 = LT<real>(fm0DC0,_t0E33);
          if _t0E35 then goto ASSIGN0E39 else goto ASSIGN0E3E
        ASSIGN0E39:  preds = [COND0E41]
          int _t0E38#1 = -1;
          int _t0E3A#1 = _t0E38;
          goto JOIN0E37
        JOIN0E37:  preds = [ASSIGN0E3C,ASSIGN0E40]
          int _t0E3B#1 = phi(_t0E3A,_t0E3F)
          goto JOIN0E2D
        ASSIGN0E3E:  preds = [COND0E41]
          int _t0E3D#1 = 0;
          int _t0E3F#1 = _t0E3D;
          goto JOIN0E37
        ASSIGN0E19:  preds = [COND0E27]
          real _t0E18#1 = 0.e0;
          bool _t0E1A#1 = LT<real>(fa0D3D,_t0E18);
          if _t0E1A then goto ASSIGN0E1E else goto ASSIGN0E23
        ASSIGN0E1E:  preds = [COND0E26]
          int _t0E1D#1 = -1;
          int _t0E1F#1 = _t0E1D;
          goto JOIN0E1C
        JOIN0E1C:  preds = [ASSIGN0E21,ASSIGN0E25]
          int _t0E20#1 = phi(_t0E1F,_t0E24)
          goto JOIN0E12
        ASSIGN0E23:  preds = [COND0E26]
          int _t0E22#1 = 0;
          int _t0E24#1 = _t0E22;
          goto JOIN0E1C
        ASSIGN0DF4:  preds = [COND0E02]
          real _t0DF3#1 = 0.e0;
          bool _t0DF5#1 = LT<real>(fm0DC0,_t0DF3);
          if _t0DF5 then goto ASSIGN0DF9 else goto ASSIGN0DFE
        ASSIGN0DF9:  preds = [COND0E01]
          int _t0DF8#1 = -1;
          int _t0DFA#1 = _t0DF8;
          goto JOIN0DF7
        JOIN0DF7:  preds = [ASSIGN0DFC,ASSIGN0E00]
          int _t0DFB#1 = phi(_t0DFA,_t0DFF)
          goto JOIN0DED
        ASSIGN0DFE:  preds = [COND0E01]
          int _t0DFD#1 = 0;
          int _t0DFF#1 = _t0DFD;
          goto JOIN0DF7
        ASSIGN0DD9:  preds = [COND0DE7]
          real _t0DD8#1 = 0.e0;
          bool _t0DDA#1 = LT<real>(fa0D3D,_t0DD8);
          if _t0DDA then goto ASSIGN0DDE else goto ASSIGN0DE3
        ASSIGN0DDE:  preds = [COND0DE6]
          int _t0DDD#1 = -1;
          int _t0DDF#1 = _t0DDD;
          goto JOIN0DDC
        JOIN0DDC:  preds = [ASSIGN0DE1,ASSIGN0DE5]
          int _t0DE0#1 = phi(_t0DDF,_t0DE4)
          goto JOIN0DD2
        ASSIGN0DE3:  preds = [COND0DE6]
          int _t0DE2#1 = 0;
          int _t0DE4#1 = _t0DE2;
          goto JOIN0DDC
    end update
  end ray
## initial strand creation
  GRID(2)
    ENTRY0B37:  preds = []
      int iresU0B1D#1 = globals.iresU097B;
      int iresV0B1C#1 = globals.iresV097C;
      int _t0B20#1 = 0;
      int _t0B22#1 = 1;
      int _t0B24#1 = ISub(iresU0B1D,_t0B22);
      int[] _t0B26#1 = Range(_t0B20,_t0B24);
    FOREACH0B29:  preds = [ASSIGN0B27,NEXT0B36]
      foreach (vi0B28 in _t0B26) on exit goto RETURN0B38
      int _t0B2A#1 = 0;
      int _t0B2C#1 = 1;
      int _t0B2E#1 = ISub(iresV0B1C,_t0B2C);
      int[] _t0B30#1 = Range(_t0B2A,_t0B2E);
    FOREACH0B33:  preds = [ASSIGN0B31,NEXT0B35]
      foreach (ui0B32 in _t0B30) on exit goto NEXT0B36
      new ray(ui0B32,vi0B28);
      goto FOREACH0B33
    NEXT0B36:  preds = [FOREACH0B33]
      goto FOREACH0B29
    RETURN0B38:  preds = [FOREACH0B29]
      return
#### end program ####
##### high-ir: after value numbering ####
## properties
  GlobalInit StrandArray HasStartMethod ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[]) HasInputs HasGlobals
## globals
  input isoval0975 (isoval) = <default>
  input thick0976 (thick) = <default>
  input camEye0977 (camEye) = <default>
  input camAt0978 (camAt) = <default>
  input camUp0979 (camUp) = <default>
  input camFOV097A (camFOV) = <default>
  input iresU097B (iresU) = <default>
  input iresV097C (iresV) = <default>
  input camNear097D (camNear) = <default>
  input camFar097E (camFar) = <default>
  input refStep097F (refStep) = <default>
  input rayStep0980 (rayStep) = <default>
  input a0981 (a) = <no-default>
  input 0b046F_intermedateGlobal0982 (b) = <no-default>
  input 0c0471_intermedateGlobal0983 (c) = <no-default>
  input zeroEps0984 (zeroEps) = <default>
  input intervalEps0985 (intervalEps) = <default>
  input indecies0986 (indecies) = <no-default>
  input times0987 (times) = <no-default>
  input cells0988 (cells) = <no-default>
  input mcnear0989 (mcnear) = <default>
  input mcfar098A (mcfar) = <default>
  input cmap098B (cmap) = image("/home/teocollin/gitcode/diderot/tests/lipRay/find/cmap.nrrd")
  input cmin098C (cmin) = <default>
  input cmax098D (cmax) = <default>
  input light098E (light) = <default>
  input phongKa098F (phongKa) = <default>
  input phongKd0990 (phongKd) = <default>
  input phongKs0991 (phongKs) = <default>
  input phongSp0992 (phongSp) = <default>
  input maxAlpha0993 (maxAlpha) = <default>
  input lightVsp0994 (lightVsp) = <default>
  input debug0995 (debug) = <default>
  input debugU0996 (debugU) = <default>
  input debugV0997 (debugV) = <default>
  global femData:MeshCell[] 0cell_a0A12
  global femData:Space b0A13
  global femData:FemFunc c0A14
  global real camDist0A15
  global real camNearVsp0A16
  global real camFarVsp0A17
  global tensor[3] camN0A18
  global tensor[3] camU0A19
  global tensor[3] camV0A1A
  global real camVmax0A1B
  global real camUmax0A1C
  global field CM0A1D
  global tensor[3] L0A1E
## functions
  function femData:MeshPos _msh_newtonInverse0A92 (tensor[2] pos0A1F#2, int cellInt0A20#2, femData:Mesh mesh0A21#5) {
    ENTRY0A91:  preds = []
      real _t0A22#2 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
      tensor[2] xn0A26#2 = <tensor[2]>[_t0A22,_t0A22];
      field _t0A28#2 = λ(INT0,FEM(msh)1,FEM(msh)2)<femV(noFunc, 0, 1, 2)_{i0}⊛Basis()>_{2} (cellInt0A20,mesh0A21,mesh0A21);
      field _t0A2A#1 = λ(F0[2])<∂/∂x_{i1}@(F0_{i0})>_{2 2} (_t0A28);
      field _t0A2C#1 = λ(F0[2])<((Σ(i5=0..1)(i7=0..1)<((ϵ_{ii5,ii0} * ϵ_{ii7,ii1} * F0_{i7,i5}))>(i5=0..1)(i7=0..1)) / ( 1)) / ( Σ(i3=0..1)(i4=0..1)<((ϵ_{ii3,ii4} * F0_{i3,'0'} * F0_{i4,'1'}))>(i3=0..1)(i4=0..1))>_{2 2} (_t0A2A);
      tensor[2,2] A0A34#1 = λ(F0[2],T1[2])<Probe(F0_{i0,i1},T1)>_{2 2} (_t0A2C,xn0A26);
      int _t0A36#1 = 0;
      int _t0A38#1 = 16;
      int[] _t0A3A#1 = Range(_t0A36,_t0A38);
    FOREACH0A3E:  preds = [ASSIGN0A3B,NEXT0A8D]
      foreach (itter0A3C in _t0A3A) on exit goto ASSIGN0A8F
        tensor[2] xn0A3D#2 = phi(xn0A26,xn0A47)
      field _t0A41#1 = λ(T0[2],F1[2])<(F1_{i0}) - («T0_{i0}»)>_{2} (pos0A1F,_t0A28);
      field _t0A43#1 = λ(T0[2 2],F1[2])<Σ(i1=0..1)<((«T0_{i0,i1}» * F1_{i1}))>(i1=0..1)>_{2} (A0A34,_t0A41);
      tensor[2] delta0A45#3 = λ(F0[2],T1[2])<Probe(F0_{i0},T1)>_{2} (_t0A43,xn0A3D);
      tensor[2] xn0A47#4 = λ(T0[2],T1[2])<(T0_{i0}) - (T1_{i0})>_{2} (xn0A3D,delta0A45);
      real _t0A49#2 = 0.1e-7;
      real _t0A4D#1 = λ(T0[],T1[])<(T0 * T1)> (_t0A49,_t0A49);
      real _t0A4F#1 = λ(T0[2],T1[2])<Σ(i0=0..1)<((T0_{i0} * T1_{i0}))>(i0=0..1)> (delta0A45,delta0A45);
      bool _t0A51#1 = GTE<real>(_t0A4D,_t0A4F);
      if _t0A51 then goto ASSIGN0A55 else goto JOIN0A53
    ASSIGN0A55:  preds = [COND0A8C]
      real _t0A54#3 = 0.1e1;
      real _t0A56#3 = 0.1e-8;
      real _t0A58#1 = λ(T0[],T1[])<(T0 + T1)> (_t0A54,_t0A56);
      tensor[2] _t0A5E#1 = <tensor[2]>[_t0A54,_t0A54];
      real _t0A60#1 = λ(T0[2],T1[2])<Σ(i0=0..1)<((T0_{i0} * T1_{i0}))>(i0=0..1)> (_t0A5E,xn0A47);
      bool _t0A62#1 = GT<real>(_t0A58,_t0A60);
      tensor[2] _t0A68#1 = <tensor[2]>[_t0A56,_t0A56];
      tensor[2] _t0A6A#2 = λ(T0[2],T1[2])<(T0_{i0} + T1_{i0})>_{2} (_t0A68,xn0A47);
      real _t0A6C#1 = TensorIndex<tensor[2],[0]>(_t0A6A);
      real _t0A6E#2 = -0.e0;
      bool _t0A70#1 = GT<real>(_t0A6C,_t0A6E);
      real _t0A7A#1 = TensorIndex<tensor[2],[1]>(_t0A6A);
      bool _t0A7E#1 = GT<real>(_t0A7A,_t0A6E);
      bool _t0A80#1 = BAnd(_t0A70,_t0A7E);
      bool _t0A82#1 = BAnd(_t0A62,_t0A80);
      if _t0A82 then goto ASSIGN0A86 else goto ASSIGN0A89
    ASSIGN0A86:  preds = [COND0A8B]
      femData:MeshPos _t0A85#1 = ExtractFemItemN<[femData:Mesh,int,tensor[2],tensor[2]],femData:MeshPos,AllBuild(MeshPos),0000,"",[],int>(mesh0A21,cellInt0A20,xn0A47,pos0A1F);
      return _t0A85
      goto JOIN0A84
    JOIN0A84:  preds = [*RETURN(_t0A85)0A87,*RETURN(_t0A88)0A8A]
      goto JOIN0A53
    JOIN0A53:  preds = [*JOIN0A84,COND0A8C]
      goto FOREACH0A3E
    ASSIGN0A89:  preds = [COND0A8B]
      femData:MeshPos _t0A88#1 = ExtractFemItemN<[femData:Mesh],femData:MeshPos,InvalidBuild(MeshPos),0000,"",[],int>(mesh0A21);
      return _t0A88
      goto JOIN0A84
    ASSIGN0A8F:  preds = [FOREACH0A3E]
      femData:MeshPos _t0A8E#1 = ExtractFemItemN<[femData:Mesh],femData:MeshPos,InvalidBuild(MeshPos),0000,"",[],int>(mesh0A21);
      return _t0A8E
}
  function int[2] nextCell40AA4 (int faceIdx0A93#1, int cell0A94#1, femData:Mesh mesh0A95#1) {
    ENTRY0AA3:  preds = []
      int _t0A96#1 = 6;
      int _t0A98#1 = IMul(cell0A94,_t0A96);
      int _t0A9A#1 = 2;
      int _t0A9C#1 = IMul(faceIdx0A93,_t0A9A);
      int _t0A9E#1 = IAdd(_t0A98,_t0A9C);
      int[2] _t0AA0#1 = ExtractFemItemN<[femData:Mesh,int],int[2],CellFaceCell(Mesh),0000,"",[],int>(mesh0A95,_t0A9E);
      return _t0AA0
}
## input initialization
  ENTRY0A10:  preds = []
    real isoval0998#1 = 0.2e0;
    globals.isoval0975 = isoval0998;
    real thick099B#1 = 0.7e-1;
    globals.thick0976 = thick099B;
    real _t099E#2 = 0.3e1;
    real _t09A0#1 = -0.3e1;
    tensor[3] camEye09A4#1 = <tensor[3]>[_t099E,_t09A0,_t099E];
    globals.camEye0977 = camEye09A4;
    real _t09A7#5 = 0.5e0;
    tensor[3] camAt09AD#1 = <tensor[3]>[_t09A7,_t09A7,_t09A7];
    globals.camAt0978 = camAt09AD;
    real _t09B0#5 = 0.e0;
    real _t09B4#7 = 0.1e1;
    tensor[3] camUp09B6#1 = <tensor[3]>[_t09B0,_t09B0,_t09B4];
    globals.camUp0979 = camUp09B6;
    real camFOV09B9#1 = 0.137e2;
    globals.camFOV097A = camFOV09B9;
    int iresU09BC#2 = 10;
    globals.iresU097B = iresU09BC;
    globals.iresV097C = iresU09BC;
    real camNear09C2#1 = -0.2e1;
    globals.camNear097D = camNear09C2;
    real camFar09C5#1 = 0.5e1;
    globals.camFar097E = camFar09C5;
    globals.refStep097F = _t09B4;
    real rayStep09CB#1 = 0.1e-1;
    globals.rayStep0980 = rayStep09CB;
    real zeroEps09CE#2 = 0.1e-10;
    globals.zeroEps0984 = zeroEps09CE;
    globals.intervalEps0985 = zeroEps09CE;
    tensor[3] mcnear09DA#2 = <tensor[3]>[_t09B4,_t09B4,_t09B4];
    globals.mcnear0989 = mcnear09DA;
    globals.mcfar098A = mcnear09DA;
    globals.cmin098C = _t09B0;
    globals.cmax098D = _t09B4;
    bool light09EC#2 = false;
    globals.light098E = light09EC;
    globals.phongKa098F = _t09A7;
    globals.phongKd0990 = _t09A7;
    globals.phongKs0991 = _t09B0;
    real phongSp09F8#1 = 0.6e2;
    globals.phongSp0992 = phongSp09F8;
    globals.maxAlpha0993 = _t09B4;
    real _t0A00#1 = 0.369e1;
    real _t0A02#1 = 0.153e1;
    tensor[3] lightVsp0A04#1 = <tensor[3]>[_t09B0,_t0A00,_t0A02];
    globals.lightVsp0994 = lightVsp0A04;
    globals.debug0995 = light09EC;
    int debugU0A0A#1 = 8;
    globals.debugU0996 = debugU0A0A;
    int debugV0A0D#1 = 2;
    globals.debugV0997 = debugV0A0D;
    return
## global-variable initialization
  ENTRY0B1A:  preds = []
    tensor[3] camEye0AB1#1 = globals.camEye0977;
    tensor[3] camAt0AB0#1 = globals.camAt0978;
    tensor[3] camUp0AAF#1 = globals.camUp0979;
    real camFOV0AAE#1 = globals.camFOV097A;
    int iresU0AAD#1 = globals.iresU097B;
    int iresV0AAC#1 = globals.iresV097C;
    real camNear0AAB#1 = globals.camNear097D;
    real camFar0AAA#1 = globals.camFar097E;
    femData:Mesh a0AA9#3 = globals.a0981;
    femData:Space 0b046F_intermedateGlobal0AA8#1 = globals.0b046F_intermedateGlobal0982;
    femData:FemFunc 0c0471_intermedateGlobal0AA7#1 = globals.0c0471_intermedateGlobal0983;
    image(IMAGE1D<double[3]>) cmap0AA6#1 = globals.cmap098B;
    tensor[3] lightVsp0AA5#2 = globals.lightVsp0994;
    int _t0ABF#1 = 0;
    int _t0AC1#1 = 1;
    int _t0AC3#1 = ExtractFemItem<int,NumCell(Mesh)>(a0AA9);
    int _t0AC5#1 = ISub(_t0AC3,_t0AC1);
    int[] _t0AC7#1 = Range(_t0ABF,_t0AC5);
    femData:MeshCell[] _t0AC9#1 = <femData:MeshCell[]>{};
  FOREACH0ACD:  preds = [ASSIGN0ACA,NEXT0AD2]
    foreach (_t0ACB in _t0AC7) on exit goto GASSIGN0F7F
      femData:MeshCell[] _t0ACC#2 = phi(_t0AC9,_t0AD0)
    femData:MeshCell _t0ACE#1 = LoadFem<femData:MeshCell>(a0AA9,_t0ACB);
    femData:MeshCell[] _t0AD0#1 = Append<femData:MeshCell>(_t0ACC,_t0ACE);
    goto FOREACH0ACD
  GASSIGN0F7F:  preds = [FOREACH0ACD]
    globals.0cell_a0A12 = _t0ACC;
    femData:Space b0AD6#2 = LoadFem<femData:Space>(0b046F_intermedateGlobal0AA8,a0AA9);
    globals.b0A13 = b0AD6;
    femData:FemFunc c0AD9#1 = LoadFem<femData:FemFunc>(0c0471_intermedateGlobal0AA7,b0AD6);
    globals.c0A14 = c0AD9;
    tensor[3] _t0ADC#3 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (camAt0AB0,camEye0AB1);
    real camDist0ADE#4 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (_t0ADC);
    globals.camDist0A15 = camDist0ADE;
    real camNearVsp0AE1#1 = λ(T0[],T1[])<(T0 + T1)> (camNear0AAB,camDist0ADE);
    globals.camNearVsp0A16 = camNearVsp0AE1;
    real camFarVsp0AE4#1 = λ(T0[],T1[])<(T0 + T1)> (camFar0AAA,camDist0ADE);
    globals.camFarVsp0A17 = camFarVsp0AE4;
    tensor[3] camN0AE9#4 = λ(T0[3],T1[3])<(T0_{i0} * (1) / ( Sqrt(Σ(i1=0..2)<((T1_{i1} * T1_{i1}))>(i1=0..2))))>_{3} (_t0ADC,_t0ADC);
    globals.camN0A18 = camN0AE9;
    tensor[3] _t0AEC#2 = λ(T0[3],T1[3])<Σ(i1=0..2)(i2=0..2)<((ϵ_{ii0,ii1,ii2} * T0_{i1} * T1_{i2}))>(i1=0..2)(i2=0..2)>_{3} (camN0AE9,camUp0AAF);
    tensor[3] camU0AEE#3 = λ(T0[3],T1[3])<(T0_{i0} * (1) / ( Sqrt(Σ(i1=0..2)<((T1_{i1} * T1_{i1}))>(i1=0..2))))>_{3} (_t0AEC,_t0AEC);
    globals.camU0A19 = camU0AEE;
    tensor[3] camV0AF1#2 = λ(T0[3],T1[3])<Σ(i1=0..2)(i2=0..2)<((ϵ_{ii0,ii1,ii2} * T0_{i1} * T1_{i2}))>(i1=0..2)(i2=0..2)>_{3} (camU0AEE,camN0AE9);
    globals.camV0A1A = camV0AF1;
    real _t0AF4#1 = 0.314159265358979323846264338327950288e1;
    real _t0AF6#1 = λ(T0[],T1[])<(T0 * T1)> (camFOV0AAE,_t0AF4);
    real _t0AF8#1 = 0.36e3;
    real _t0AFA#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t0AF6,_t0AF8);
    real _t0AFC#1 = λ(T0[])<Tangent(T0)> (_t0AFA);
    real camVmax0AFE#2 = λ(T0[],T1[])<(T0 * T1)> (_t0AFC,camDist0ADE);
    globals.camVmax0A1B = camVmax0AFE;
    real _t0B01#1 = IntToReal(iresU0AAD);
    real _t0B03#1 = λ(T0[],T1[])<(T0 * T1)> (camVmax0AFE,_t0B01);
    real _t0B05#1 = IntToReal(iresV0AAC);
    real camUmax0B07#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t0B03,_t0B05);
    globals.camUmax0A1C = camUmax0B07;
    kernel _t0B0A#1 = Kernel<tent,0>;
    image(IMAGE1D<double[3]>) img0B0C#1 = BorderCtlClamp<IMAGE1D<double[3]>>(cmap0AA6);
    field CM0B0E#1 = λ(V0(1)[3],H1)<V0_{i0}⊛H1>_{3} (img0B0C,_t0B0A);
    globals.CM0A1D = CM0B0E;
    tensor[3,3] _t0B11#1 = <tensor[3,3]>[camU0AEE,camV0AF1,camN0AE9];
    tensor[3,3] _t0B13#1 = λ(T0[3 3])<T0_{i1,i0}>_{3 3} (_t0B11);
    tensor[3] _t0B15#1 = λ(T0[3],T1[3])<(T0_{i0} * (1) / ( Sqrt(Σ(i1=0..2)<((T1_{i1} * T1_{i1}))>(i1=0..2))))>_{3} (lightVsp0AA5,lightVsp0AA5);
    tensor[3] L0B17#1 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (_t0B13,_t0B15);
    globals.L0A1E = L0B17;
    return
## strand
  strand ray (int ui0B39#3, int vi0B3A#4)
    state:
      real rayU;
      real rayV;
      tensor[3] UV;
      tensor[3] rayOrig;
      tensor[3] rayVec;
      real camNearVsp;
      real camFarVsp;
      int offset;
      int len;
      int itter;
      int intersectionItter;
      int idx;
      tensor[2] interval;
      real s;
      real e;
      femData:MeshCell cc;
      femData:FuncCell fc;
      output real out;
      output tensor[4] rgba;
      output tensor[3][] locs;
      int ui;
      int vi;
    state init
      ENTRY0BF4:  preds = []
        tensor[3] camEye0B5E#1 = globals.camEye0977;
        int iresU0B5D#2 = globals.iresU097B;
        int iresV0B5C#3 = globals.iresV097C;
        femData:MeshCell[] 0cell_a0B5B#1 = globals.0cell_a0A12;
        femData:FemFunc c0B5A#1 = globals.c0A14;
        int[] indecies0B59#2 = globals.indecies0986;
        tensor[2][] times0B58#1 = globals.times0987;
        real camNearVsp0B57#1 = globals.camNearVsp0A16;
        real camFarVsp0B56#1 = globals.camFarVsp0A17;
        tensor[3] camN0B55#1 = globals.camN0A18;
        tensor[3] camU0B54#1 = globals.camU0A19;
        tensor[3] camV0B53#1 = globals.camV0A1A;
        real camVmax0B52#2 = globals.camVmax0A1B;
        real camUmax0B51#2 = globals.camUmax0A1C;
        real _t0B83#1 = λ(T0[])<Neg(T0)> (camUmax0B51);
        real _t0B85#2 = -0.5e0;
        real _t0B87#1 = IntToReal(ui0B39);
        real _t0B89#1 = IntToReal(iresU0B5D);
        real _t0B8B#2 = 0.5e0;
        real _t0B8D#1 = λ(T0[],T1[])<(T0) - (T1)> (_t0B89,_t0B8B);
        real rayU0B8F#2 = λ(T0[],T1[],T2[],T3[],T4[])<(T0 + (((T3) - (T2)) / ( (T4) - (T2)) * (T1) - (T0)))> (_t0B83,camUmax0B51,_t0B85,_t0B87,_t0B8D);
        real _t0B91#1 = λ(T0[])<Neg(T0)> (camVmax0B52);
        real _t0B95#1 = IntToReal(vi0B3A);
        real _t0B97#1 = IntToReal(iresV0B5C);
        real _t0B9B#1 = λ(T0[],T1[])<(T0) - (T1)> (_t0B97,_t0B8B);
        real rayV0B9D#2 = λ(T0[],T1[],T2[],T3[],T4[])<(T0 + (((T3) - (T2)) / ( (T4) - (T2)) * (T1) - (T0)))> (_t0B91,camVmax0B52,_t0B85,_t0B95,_t0B9B);
        tensor[3] _t0B9F#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (rayU0B8F,camU0B54);
        tensor[3] _t0BA1#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (rayV0B9D,camV0B53);
        tensor[3] UV0BA3#2 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (_t0B9F,_t0BA1);
        tensor[3] rayOrig0BA5#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (camEye0B5E,UV0BA3);
        real _t0BA7#8 = 0.e0;
        tensor[3] _t0BAD#1 = <tensor[3]>[_t0BA7,_t0BA7,_t0BA7];
        tensor[3] rayVec0BAF#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (camN0B55,_t0BAD);
        int _t0BB5#2 = IMul(ui0B39,iresV0B5C);
        int _t0BB7#1 = IAdd(_t0BB5,vi0B3A);
        int offset0BB9#2 = Subscript<int[]>(indecies0B59,_t0BB7);
        int _t0BBB#1 = IMul(iresU0B5D,iresV0B5C);
        int _t0BBF#1 = IAdd(_t0BBB,_t0BB5);
        int _t0BC1#1 = IAdd(_t0BBF,vi0B3A);
        int len0BC3#1 = Subscript<int[]>(indecies0B59,_t0BC1);
        int itter0BC5#4 = 0;
        int idx0BC9#2 = IAdd(offset0BB9,itter0BC5);
        tensor[2] interval0BCB#3 = Subscript<tensor[2][]>(times0B58,idx0BC9);
        real s0BCD#1 = TensorIndex<tensor[2],[0]>(interval0BCB);
        real e0BCF#1 = TensorIndex<tensor[2],[1]>(interval0BCB);
        femData:MeshCell cc0BD3#2 = Subscript<femData:MeshCell[]>(0cell_a0B5B,itter0BC5);
        int _t0BD6#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc0BD3);
        femData:FuncCell _t0BD8#1 = LoadFem<femData:FuncCell>(c0B5A,_t0BD6);
        tensor[4] rgba0BE8#1 = <tensor[4]>[_t0BA7,_t0BA7,_t0BA7,_t0BA7];
        tensor[3][0] _t0BEA#1 = <tensor[3][0]>{};
        tensor[3][] _t0BEC#1 = MkDynamic<tensor[3],0>(_t0BEA);
        self.rayU = rayU0B8F;
        self.rayV = rayV0B9D;
        self.UV = UV0BA3;
        self.rayOrig = rayOrig0BA5;
        self.rayVec = rayVec0BAF;
        self.camNearVsp = camNearVsp0B57;
        self.camFarVsp = camFarVsp0B56;
        self.offset = offset0BB9;
        self.len = len0BC3;
        self.itter = itter0BC5;
        self.intersectionItter = itter0BC5;
        self.idx = idx0BC9;
        self.interval = interval0BCB;
        self.s = s0BCD;
        self.e = e0BCF;
        self.cc = cc0BD3;
        self.fc = _t0BD8;
        self.out = _t0BA7;
        self.rgba = rgba0BE8;
        self.locs = _t0BEC;
        self.ui = ui0B39;
        self.vi = vi0B3A;
        return
    end state init
    method start
        ENTRY0C7E:  preds = []
          femData:MeshCell[] 0cell_a0C11#1 = globals.0cell_a0A12;
          femData:FemFunc c0C10#1 = globals.c0A14;
          int[] cells0C0F#1 = globals.cells0988;
          bool debug0C0E#1 = globals.debug0995;
          int debugU0C0D#1 = globals.debugU0996;
          int debugV0C0C#1 = globals.debugV0997;
          real rayU0C18#0 = self.rayU;
          real rayV0C19#0 = self.rayV;
          tensor[3] UV0C1A#0 = self.UV;
          tensor[3] rayOrig0C1B#0 = self.rayOrig;
          tensor[3] rayVec0C1C#0 = self.rayVec;
          real camNearVsp0C1D#0 = self.camNearVsp;
          real camFarVsp0C1E#0 = self.camFarVsp;
          int offset0C1F#0 = self.offset;
          int len0C20#1 = self.len;
          int itter0C21#0 = self.itter;
          int intersectionItter0C22#0 = self.intersectionItter;
          int idx0C23#1 = self.idx;
          tensor[2] interval0C24#0 = self.interval;
          real s0C25#0 = self.s;
          real e0C26#0 = self.e;
          femData:MeshCell cc0C27#0 = self.cc;
          femData:FuncCell fc0C28#0 = self.fc;
          real out0C29#0 = self.out;
          tensor[4] rgba0C2A#0 = self.rgba;
          tensor[3][] locs0C2B#0 = self.locs;
          int ui0C2C#2 = self.ui;
          int vi0C2D#2 = self.vi;
          if debug0C0E then goto ASSIGN0C46 else goto JOIN0C44
        ASSIGN0C46:  preds = [COND0C58]
          bool _t0C45#1 = NEQ<int>(ui0C2C,debugU0C0D);
          if _t0C45 then goto ASSIGN0C49 else goto JOIN0C47
        ASSIGN0C49:  preds = [COND0C57]
          bool _t0C48#1 = NEQ<int>(vi0C2D,debugV0C0C);
          if _t0C48 then goto STABILIZE0C4B else goto JOIN0C4A
        STABILIZE0C4B:  preds = [COND0C56]
          stabilize
          goto JOIN0C4A
        JOIN0C4A:  preds = [*STABILIZE0C4B,COND0C56]
          goto JOIN0C47
        JOIN0C47:  preds = [JOIN0C4A,COND0C57]
          goto JOIN0C44
        JOIN0C44:  preds = [JOIN0C47,COND0C58]
          int _t0C59#1 = 0;
          bool _t0C5B#1 = EQ<int>(len0C20,_t0C59);
          if _t0C5B then goto ASSIGN0C5F else goto JOIN0C5D
        ASSIGN0C5F:  preds = [COND0C70]
          string _t0C5E#1 = "(find:)No intersection found:";
          string _t0C60#1 = "/";
          string _t0C62#1 = "\n";
          Print<[string,int,string,int,string]>(_t0C5E,ui0C2C,_t0C60,vi0C2D,_t0C62);
          stabilize
          goto JOIN0C5D
        JOIN0C5D:  preds = [*STABILIZE0C65,COND0C70]
          int _t0C71#1 = Subscript<int[]>(cells0C0F,idx0C23);
          femData:MeshCell cc0C73#2 = Subscript<femData:MeshCell[]>(0cell_a0C11,_t0C71);
          int _t0C76#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc0C73);
          femData:FuncCell _t0C78#1 = LoadFem<femData:FuncCell>(c0C10,_t0C76);
          self.cc = cc0C73;
          self.fc = _t0C78;
          active
    end start
    method update
        ENTRY0F59:  preds = []
          femData:MeshCell[] 0cell_a0C9A#1 = globals.0cell_a0A12;
          femData:FemFunc c0C99#1 = globals.c0A14;
          real zeroEps0C98#1 = globals.zeroEps0984;
          real intervalEps0C97#4 = globals.intervalEps0985;
          tensor[2][] times0C96#1 = globals.times0987;
          int[] cells0C95#1 = globals.cells0988;
          tensor[3] mcnear0C94#1 = globals.mcnear0989;
          tensor[3] mcfar0C93#1 = globals.mcfar098A;
          real cmin0C92#2 = globals.cmin098C;
          real cmax0C91#2 = globals.cmax098D;
          bool light0C90#1 = globals.light098E;
          real phongKa0C8F#1 = globals.phongKa098F;
          real phongKd0C8E#1 = globals.phongKd0990;
          real phongKs0C8D#1 = globals.phongKs0991;
          real phongSp0C8C#1 = globals.phongSp0992;
          field CM0C8B#1 = globals.CM0A1D;
          tensor[3] L0C8A#2 = globals.L0A1E;
          real rayU0CAC#0 = self.rayU;
          real rayV0CAD#0 = self.rayV;
          tensor[3] UV0CAE#0 = self.UV;
          tensor[3] rayOrig0CAF#4 = self.rayOrig;
          tensor[3] rayVec0CB0#6 = self.rayVec;
          real camNearVsp0CB1#1 = self.camNearVsp;
          real camFarVsp0CB2#1 = self.camFarVsp;
          int offset0CB3#1 = self.offset;
          int len0CB4#1 = self.len;
          int itter0CB5#3 = self.itter;
          int intersectionItter0CB6#2 = self.intersectionItter;
          int idx0CB7#0 = self.idx;
          tensor[2] interval0CB8#1 = self.interval;
          real s0CB9#7 = self.s;
          real e0CBA#5 = self.e;
          femData:MeshCell cc0CBB#3 = self.cc;
          femData:FuncCell fc0CBC#3 = self.fc;
          real out0CBD#2 = self.out;
          tensor[4] rgba0CBE#1 = self.rgba;
          tensor[3][] locs0CBF#1 = self.locs;
          int ui0CC0#1 = self.ui;
          int vi0CC1#1 = self.vi;
          string _t0CD8#1 = "Ui/Vi::";
          string _t0CDA#1 = "/";
          string _t0CDC#11 = "\n";
          Print<[string,int,string,int,string]>(_t0CD8,ui0CC0,_t0CDA,vi0CC1,_t0CDC);
          string _t0CDF#1 = "Interval:";
          tensor[2] _t0CE1#1 = <tensor[2]>[s0CB9,e0CBA];
          Print<[string,tensor[2],string]>(_t0CDF,_t0CE1,_t0CDC);
          string _t0CE6#1 = "inner itter:";
          Print<[string,int,string]>(_t0CE6,intersectionItter0CB6,_t0CDC);
          string _t0CEB#1 = "Outer itter:";
          Print<[string,int,string]>(_t0CEB,itter0CB5,_t0CDC);
          real _t0CF0#1 = TensorIndex<tensor[3],[0]>(rayOrig0CAF);
          real _t0CF2#1 = TensorIndex<tensor[3],[1]>(rayOrig0CAF);
          tensor[2] _t0CF4#3 = <tensor[2]>[_t0CF0,_t0CF2];
          real _t0CF6#1 = TensorIndex<tensor[3],[0]>(rayVec0CB0);
          real _t0CF8#1 = TensorIndex<tensor[3],[1]>(rayVec0CB0);
          tensor[2] _t0CFA#3 = <tensor[2]>[_t0CF6,_t0CF8];
          tensor[2] _t0CFC#1 = λ(T0[],T1[2])<(T0 * T1_{i0})>_{2} (s0CB9,_t0CFA);
          tensor[2] startRay0CFE#1 = λ(T0[2],T1[2])<(T0_{i0} + T1_{i0})>_{2} (_t0CF4,_t0CFC);
          tensor[2] _t0D0C#1 = λ(T0[],T1[2])<(T0 * T1_{i0})>_{2} (e0CBA,_t0CFA);
          tensor[2] endRay0D0E#1 = λ(T0[2],T1[2])<(T0_{i0} + T1_{i0})>_{2} (_t0CF4,_t0D0C);
          femData:Mesh _t0D10#2 = ExtractFem<femData:Mesh,femData:MeshCell>(cc0CBB);
          int _t0D14#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc0CBB);
          field _t0D16#4 = λ(INT0,FEM(msh)1,FEM(msh)2)<femInvV(0A92, 0, 1, 2)_{i0}⊛Basis()>_{2} (_t0D14,_t0D10,_t0D10);
          tensor[2] invertA0D18#2 = λ(F0[2],T1[2])<Probe(F0_{i0},T1)>_{2} (_t0D16,startRay0CFE);
          tensor[2] invertB0D22#2 = λ(F0[2],T1[2])<Probe(F0_{i0},T1)>_{2} (_t0D16,endRay0D0E);
          string _t0D24#1 = "inverses:";
          Print<[string,tensor[2],tensor[2],string]>(_t0D24,invertA0D18,invertB0D22,_t0CDC);
          femData:FemFunc _t0D29#2 = ExtractFem<femData:FemFunc,femData:FuncCell>(fc0CBC);
          femData:Space _t0D2D#1 = ExtractFem<femData:Space,femData:FemFunc>(_t0D29);
          int _t0D2F#1 = ExtractFemItem<int,CellIndex(FuncCell)>(fc0CBC);
          field _t0D31#4 = λ(INT0,FEM(fns)1,FEM(func)2)<femV(noFunc, 0, 1, 2)⊛Basis()> (_t0D2F,_t0D2D,_t0D29);
          real faVal0D33#1 = λ(F0[2],T1[2])<Probe(F0,T1)> (_t0D31,invertA0D18);
          real _t0D35#3 = TensorIndex<tensor[3],[2]>(rayVec0CB0);
          real _t0D37#1 = λ(T0[],T1[])<(T0 * T1)> (_t0D35,s0CB9);
          real _t0D39#1 = λ(T0[],T1[])<(T0) - (T1)> (faVal0D33,_t0D37);
          real _t0D3B#3 = TensorIndex<tensor[3],[2]>(rayOrig0CAF);
          real fa0D3D#9 = λ(T0[],T1[])<(T0) - (T1)> (_t0D39,_t0D3B);
          real _t0D49#1 = λ(F0[2],T1[2])<Probe(F0,T1)> (_t0D31,invertB0D22);
          real _t0D4D#1 = λ(T0[],T1[])<(T0 * T1)> (_t0D35,e0CBA);
          real _t0D4F#1 = λ(T0[],T1[])<(T0) - (T1)> (_t0D49,_t0D4D);
          real fb0D53#6 = λ(T0[],T1[])<(T0) - (T1)> (_t0D4F,_t0D3B);
          string _t0D55#1 = "Vals:";
          tensor[2] _t0D57#1 = <tensor[2]>[fa0D3D,fb0D53];
          Print<[string,tensor[2],string]>(_t0D55,_t0D57,_t0CDC);
          real _t0D5C#1 = λ(T0[],T1[])<(T0) - (T1)> (fa0D3D,fb0D53);
          real _t0D5E#1 = λ(T0[])<Abs(T0)> (_t0D5C);
          bool _t0D60#1 = LT<real>(_t0D5E,intervalEps0C97);
          if _t0D60 then goto ASSIGN0D64 else goto JOIN0D62
        ASSIGN0D64:  preds = [COND0D82]
          real _t0D63#1 = λ(T0[])<Abs(T0)> (fa0D3D);
          bool _t0D65#1 = GT<real>(_t0D63,intervalEps0C97);
          if _t0D65 then goto ASSIGN0D69 else goto JOIN0D67
        ASSIGN0D69:  preds = [COND0D80]
          real _t0D68#1 = λ(T0[])<Abs(T0)> (fb0D53);
          bool _t0D6A#1 = GT<real>(_t0D68,intervalEps0C97);
          if _t0D6A then goto ASSIGN0D6E else goto JOIN0D6C
        ASSIGN0D6E:  preds = [COND0D7E]
          string _t0D6D#1 = "warn\n";
          Print<[string]>(_t0D6D);
          real s0D70#1 = λ(T0[],T1[])<(T0 + T1)> (s0CB9,intervalEps0C97);
          self.s = s0D70;
          active
          goto JOIN0D6C
        JOIN0D6C:  preds = [*ACTIVE0D73,COND0D7E]
          real s0D71#1 = phi(s0CB9)
          goto JOIN0D67
        JOIN0D67:  preds = [JOIN0D6C,COND0D80]
          real s0D7F#1 = phi(s0D71,s0CB9)
          goto JOIN0D62
        JOIN0D62:  preds = [JOIN0D67,COND0D82]
          real s0D81#3 = phi(s0D7F,s0CB9)
          real _t0D83#1 = λ(T0[],T1[])<(T0 * T1)> (s0D81,fb0D53);
          real _t0D85#1 = λ(T0[],T1[])<(T0 * T1)> (e0CBA,fa0D3D);
          real _t0D87#1 = λ(T0[],T1[])<(T0) - (T1)> (_t0D83,_t0D85);
          real _t0D89#1 = λ(T0[],T1[])<(T0) - (T1)> (fb0D53,fa0D3D);
          real cup0D8B#7 = λ(T0[],T1[])<(T0) / ( T1)> (_t0D87,_t0D89);
          string _t0D8D#1 = "Mid time:";
          Print<[string,real,string]>(_t0D8D,cup0D8B,_t0CDC);
          tensor[2] _t0D9E#1 = λ(T0[],T1[2])<(T0 * T1_{i0})>_{2} (cup0D8B,_t0CFA);
          tensor[2] midRay0DA0#2 = λ(T0[2],T1[2])<(T0_{i0} + T1_{i0})>_{2} (_t0CF4,_t0D9E);
          tensor[2] invertC0DAA#1 = λ(F0[2],T1[2])<Probe(F0_{i0},T1)>_{2} (_t0D16,midRay0DA0);
          real fmVal0DB6#2 = λ(F0[2],T1[2])<Probe(F0,T1)> (_t0D31,invertC0DAA);
          real _t0DBA#1 = λ(T0[],T1[])<(T0 * T1)> (_t0D35,cup0D8B);
          real _t0DBC#1 = λ(T0[],T1[])<(T0) - (T1)> (fmVal0DB6,_t0DBA);
          real fm0DC0#5 = λ(T0[],T1[])<(T0) - (T1)> (_t0DBC,_t0D3B);
          string _t0DC2#1 = "all vals:";
          tensor[3] _t0DC4#1 = <tensor[3]>[fa0D3D,fm0DC0,fb0D53];
          Print<[string,tensor[3],string]>(_t0DC2,_t0DC4,_t0CDC);
          int _t0DC9#6 = 1;
          int intersectionItter0DCB#3 = IAdd(intersectionItter0CB6,_t0DC9);
          real _t0DCE#10 = 0.e0;
          bool _t0DD0#2 = GT<real>(fa0D3D,_t0DCE);
          if _t0DD0 then goto JOIN0DD2 else goto ASSIGN0FA4
        JOIN0DD2:  preds = [COND0DE7,JOIN0DDC]
          int _t0DD6#1 = phi(_t0DC9,_t0DE0)
          bool _t0DEB#2 = GT<real>(fm0DC0,_t0DCE);
          if _t0DEB then goto JOIN0DED else goto ASSIGN0FA6
        JOIN0DED:  preds = [COND0E02,JOIN0DF7]
          int _t0DF1#1 = phi(_t0DC9,_t0DFB)
          int _t0E03#1 = IMul(_t0DD6,_t0DF1);
          int _t0E05#6 = 0;
          bool _t0E07#1 = LT<int>(_t0E03,_t0E05);
          if _t0E07 then goto JOIN0E09 else goto COND0E27
        JOIN0E09:  preds = [COND0E4F,JOIN0E49]
          real e0E0B#4 = phi(cup0D8B,e0CBA)
          real s0E4E#4 = phi(s0D81,s0E4B)
          string _t0E50#1 = "new interval:";
          tensor[2] _t0E52#1 = <tensor[2]>[s0E4E,e0E0B];
          Print<[string,tensor[2],string]>(_t0E50,_t0E52,_t0CDC);
          real _t0E57#1 = λ(T0[])<Abs(T0)> (fm0DC0);
          bool _t0E59#2 = LT<real>(_t0E57,zeroEps0C98);
          if _t0E59 then goto ASSIGN0FAB else goto JOIN0E5B
        ASSIGN0FAB:  preds = [COND0F08]
          tensor[2] grad0E60#1 = <tensor[2]>[_t0DCE,_t0DCE];
          if _t0E59 then goto ASSIGN0FAC else goto JOIN0E66
        ASSIGN0FAC:  preds = [COND0E83]
          field _t0E79#1 = λ(F0[2],F1[2])<Cmp(F0)[F1_{i0}{2}]> (_t0D31,_t0D16);
          field _t0E7B#1 = λ(F0[2])<∂/∂x_{i0}@(F0)>_{2} (_t0E79);
          tensor[2] grad0E7D#1 = λ(F0[2],T1[2])<Probe(F0_{i0},T1)>_{2} (_t0E7B,midRay0DA0);
          goto JOIN0E66
        JOIN0E66:  preds = [ASSIGN0E7F,COND0E83]
          tensor[2] grad0E7E#3 = phi(grad0E7D,grad0E60)
          real out0E81#3 = phi(fmVal0DB6,out0CBD)
          string _t0E85#1 = "Out val:";
          Print<[string,real,string]>(_t0E85,out0E81,_t0CDC);
          string _t0E8A#1 = "Grad val:";
          Print<[string,tensor[2],string]>(_t0E8A,grad0E7E,_t0CDC);
          real _t0E8F#6 = 0.1e1;
          tensor[3] mcol0E95#1 = <tensor[3]>[_t0E8F,_t0E8F,_t0E8F];
          bool _t0E97#1 = NEQ<real>(cmin0C92,cmax0C91);
          if _t0E97 then goto ASSIGN0E9B else goto JOIN0E99
        ASSIGN0E9B:  preds = [COND0EA5]
          int _t0E9A#1 = -1;
          real _t0E9C#1 = IntToReal(_t0E9A);
          real _t0EA0#1 = λ(T0[],T1[],T2[],T3[],T4[])<(T0 + (((T3) - (T2)) / ( (T4) - (T2)) * (T1) - (T0)))> (_t0E9C,_t0E8F,cmin0C92,out0E81,cmax0C91);
          tensor[3] mcol0EA2#1 = λ(F0[1],T1[1])<Probe(F0_{i0},T1)>_{3} (CM0C8B,_t0EA0);
          goto JOIN0E99
        JOIN0E99:  preds = [ASSIGN0EA4,COND0EA5]
          tensor[3] mcol0EA3#5 = phi(mcol0EA2,mcol0E95)
          if light0C90 then goto ASSIGN0EA8 else goto ASSIGN0EE7
        ASSIGN0EA8:  preds = [COND0EF0]
          real _t0EA7#1 = TensorIndex<tensor[2],[0]>(grad0E7E);
          real _t0EA9#1 = TensorIndex<tensor[2],[1]>(grad0E7E);
          int _t0EAB#1 = -1;
          real _t0EAD#1 = IntToReal(_t0EAB);
          tensor[3] _t0EAF#2 = <tensor[3]>[_t0EA7,_t0EA9,_t0EAD];
          tensor[3] N0EB1#2 = λ(T0[3],T1[3])<(T0_{i0} * (1) / ( Sqrt(Σ(i1=0..2)<((T1_{i1} * T1_{i1}))>(i1=0..2))))>_{3} (_t0EAF,_t0EAF);
          tensor[3] _t0EB3#1 = λ(T0[3],T1[3])<(T0_{i0} * (1) / ( Sqrt(Σ(i1=0..2)<((T1_{i1} * T1_{i1}))>(i1=0..2))))>_{3} (rayVec0CB0,rayVec0CB0);
          tensor[3] _t0EB5#1 = λ(T0[3])<Neg(T0_{i0})>_{3} (_t0EB3);
          tensor[3] _t0EB7#2 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (_t0EB5,L0C8A);
          tensor[3] H0EB9#1 = λ(T0[3],T1[3])<(T0_{i0} * (1) / ( Sqrt(Σ(i1=0..2)<((T1_{i1} * T1_{i1}))>(i1=0..2))))>_{3} (_t0EB7,_t0EB7);
          tensor[3] lightColor0EBB#2 = λ(T0[3],T1[3],T2[],T3[],T4[])<(T0_{i0} + (((T3) - (T2)) / ( (T4) - (T2)) * (T1_{i0}) - (T0_{i0})))>_{3} (mcnear0C94,mcfar0C93,camNearVsp0CB1,cup0D8B,camFarVsp0CB2);
          tensor[3] ambientTerm0EBD#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (phongKa0C8F,mcol0EA3);
          tensor[3] _t0EBF#1 = λ(T0[3],T1[3])<(T0_{i0} * T1_{i0})>_{3} (mcol0EA3,lightColor0EBB);
          tensor[3] _t0EC1#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (phongKd0C8E,_t0EBF);
          real _t0EC5#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (N0EB1,L0C8A);
          real _t0EC7#1 = Max<real>(_t0DCE,_t0EC5);
          tensor[3] diffuse0EC9#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (_t0EC7,_t0EC1);
          tensor[3] _t0ECB#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (phongKs0C8D,lightColor0EBB);
          real _t0ECF#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (N0EB1,H0EB9);
          real _t0ED1#1 = Max<real>(_t0DCE,_t0ECF);
          real _t0ED3#1 = MathFn<pow>(_t0ED1,phongSp0C8C);
          tensor[3] specular0ED5#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (_t0ED3,_t0ECB);
          tensor[3] _t0ED7#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (ambientTerm0EBD,diffuse0EC9);
          tensor[3] fin0ED9#3 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (_t0ED7,specular0ED5);
          real _t0EDB#1 = TensorIndex<tensor[3],[0]>(fin0ED9);
          real _t0EDD#1 = TensorIndex<tensor[3],[1]>(fin0ED9);
          real _t0EDF#1 = TensorIndex<tensor[3],[2]>(fin0ED9);
          tensor[4] rgba0EE3#1 = <tensor[4]>[_t0EDB,_t0EDD,_t0EDF,_t0E8F];
          goto JOIN0EA6
        JOIN0EA6:  preds = [ASSIGN0FB4,ASSIGN0FB1]
          tensor[4] rgba0EE4#1 = phi(rgba0EE3,rgba0EEE)
          tensor[3] _t0EF2#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (cup0D8B,rayVec0CB0);
          tensor[3] _t0EF4#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (_t0EF2,rayOrig0CAF);
          tensor[3][1] _t0EF6#1 = <tensor[3][1]>{_t0EF4};
          tensor[3][] _t0EF8#1 = MkDynamic<tensor[3],1>(_t0EF6);
          self.intersectionItter = intersectionItter0DCB;
          self.s = s0E4E;
          self.e = e0E0B;
          self.out = out0E81;
          self.rgba = rgba0EE4;
          self.locs = _t0EF8;
          stabilize
          goto JOIN0E5B
        JOIN0E5B:  preds = [*STABILIZE0EFD,COND0F08]
          tensor[3][] locs0EFB#3 = phi(locs0CBF)
          tensor[4] rgba0EF1#3 = phi(rgba0CBE)
          real out0E84#3 = phi(out0CBD)
          int _t0F09#1 = 32;
          bool _t0F0B#1 = GT<int>(intersectionItter0DCB,_t0F09);
          if _t0F0B then goto ASSIGN0FB6 else goto ASSIGN0F56
        ASSIGN0FB6:  preds = [COND0F58]
          int itter0F13#4 = IAdd(itter0CB5,_t0DC9);
          bool _t0F16#1 = GTE<int>(itter0F13,len0CB4);
          if _t0F16 then goto ASSIGN0F1A else goto JOIN0F18
        ASSIGN0F1A:  preds = [COND0F2A]
          string _t0F19#1 = "No intersection found\n";
          Print<[string]>(_t0F19);
          string _t0F1C#1 = "Fin pixel=============================\n";
          Print<[string]>(_t0F1C);
          self.itter = itter0F13;
          self.intersectionItter = _t0E05;
          self.s = s0E4E;
          self.e = e0E0B;
          self.out = out0E84;
          self.rgba = rgba0EF1;
          self.locs = locs0EFB;
          stabilize
          goto JOIN0F18
        JOIN0F18:  preds = [*STABILIZE0F1F,COND0F2A]
          int _t0F2B#2 = IAdd(offset0CB3,itter0F13);
          tensor[2] interval0F2D#3 = Subscript<tensor[2][]>(times0C96,_t0F2B);
          int _t0F32#1 = Subscript<int[]>(cells0C95,_t0F2B);
          femData:MeshCell cc0F34#2 = Subscript<femData:MeshCell[]>(0cell_a0C9A,_t0F32);
          real s0F37#1 = TensorIndex<tensor[2],[0]>(interval0F2D);
          real e0F3A#1 = TensorIndex<tensor[2],[1]>(interval0F2D);
          int _t0F3E#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc0F34);
          femData:FuncCell _t0F40#1 = LoadFem<femData:FuncCell>(c0C99,_t0F3E);
          string _t0F47#1 = "++++++++++++++++Next interval!+++++++++++++++++++\n";
          Print<[string]>(_t0F47);
          self.itter = itter0F13;
          self.intersectionItter = _t0E05;
          self.interval = interval0F2D;
          self.s = s0F37;
          self.e = e0F3A;
          self.cc = cc0F34;
          self.fc = _t0F40;
          self.out = out0E84;
          self.rgba = rgba0EF1;
          self.locs = locs0EFB;
          active
          goto JOIN0F0D
        JOIN0F0D:  preds = [*ACTIVE0F4A,MASSIGN0F57]
          femData:FuncCell fc0F45#1 = phi(fc0CBC)
          femData:MeshCell cc0F35#1 = phi(cc0CBB)
          real e0F3B#1 = phi(e0E0B)
          real s0F38#1 = phi(s0E4E)
          tensor[2] interval0F2E#1 = phi(interval0CB8)
          int intersectionItter0F0F#1 = phi(intersectionItter0DCB)
          int itter0F14#1 = phi(itter0CB5)
          self.itter = itter0F14;
          self.intersectionItter = intersectionItter0F0F;
          self.interval = interval0F2E;
          self.s = s0F38;
          self.e = e0F3B;
          self.cc = cc0F35;
          self.fc = fc0F45;
          self.out = out0E84;
          self.rgba = rgba0EF1;
          self.locs = locs0EFB;
          active
        ASSIGN0F56:  preds = [COND0F58]
          string _t0F55#1 = "---------------\n";
          Print<[string]>(_t0F55);
          goto JOIN0F0D
        ASSIGN0EE7:  preds = [COND0EF0]
          real _t0EE6#1 = TensorIndex<tensor[3],[0]>(mcol0EA3);
          real _t0EE8#1 = TensorIndex<tensor[3],[1]>(mcol0EA3);
          real _t0EEA#1 = TensorIndex<tensor[3],[2]>(mcol0EA3);
          tensor[4] rgba0EEE#1 = <tensor[4]>[_t0EE6,_t0EE8,_t0EEA,_t0E8F];
          goto JOIN0EA6
        COND0E27:  preds = [COND0E4F]
          if _t0DD0 then goto JOIN0E12 else goto ASSIGN0FA7
        JOIN0E12:  preds = [COND0E27,JOIN0E1C]
          int _t0E16#1 = phi(_t0DC9,_t0E20)
          if _t0DEB then goto JOIN0E2D else goto ASSIGN0FA8
        JOIN0E2D:  preds = [COND0E42,JOIN0E37]
          int _t0E31#1 = phi(_t0DC9,_t0E3B)
          int _t0E43#1 = IMul(_t0E16,_t0E31);
          bool _t0E47#1 = GT<int>(_t0E43,_t0E05);
          if _t0E47 then goto JOIN0E49 else goto JOIN0E49
        JOIN0E49:  preds = [COND0E4D,COND0E4D]
          real s0E4B#1 = phi(cup0D8B,s0D81)
          goto JOIN0E09
        ASSIGN0FA8:  preds = [COND0E42]
          bool _t0E35#1 = LT<real>(fm0DC0,_t0DCE);
          if _t0E35 then goto ASSIGN0E39 else goto JOIN0E37
        ASSIGN0E39:  preds = [COND0E41]
          int _t0E38#1 = -1;
          goto JOIN0E37
        JOIN0E37:  preds = [ASSIGN0E39,COND0E41]
          int _t0E3B#1 = phi(_t0E38,_t0E05)
          goto JOIN0E2D
        ASSIGN0FA7:  preds = [COND0E27]
          bool _t0E1A#1 = LT<real>(fa0D3D,_t0DCE);
          if _t0E1A then goto ASSIGN0E1E else goto JOIN0E1C
        ASSIGN0E1E:  preds = [COND0E26]
          int _t0E1D#1 = -1;
          goto JOIN0E1C
        JOIN0E1C:  preds = [ASSIGN0E1E,COND0E26]
          int _t0E20#1 = phi(_t0E1D,_t0E05)
          goto JOIN0E12
        ASSIGN0FA6:  preds = [COND0E02]
          bool _t0DF5#1 = LT<real>(fm0DC0,_t0DCE);
          if _t0DF5 then goto ASSIGN0DF9 else goto ASSIGN0DFE
        ASSIGN0DF9:  preds = [COND0E01]
          int _t0DF8#1 = -1;
          goto JOIN0DF7
        JOIN0DF7:  preds = [ASSIGN0DF9,ASSIGN0DFE]
          int _t0DFB#1 = phi(_t0DF8,_t0DFD)
          goto JOIN0DED
        ASSIGN0DFE:  preds = [COND0E01]
          int _t0DFD#1 = 0;
          goto JOIN0DF7
        ASSIGN0FA4:  preds = [COND0DE7]
          bool _t0DDA#1 = LT<real>(fa0D3D,_t0DCE);
          if _t0DDA then goto ASSIGN0DDE else goto ASSIGN0DE3
        ASSIGN0DDE:  preds = [COND0DE6]
          int _t0DDD#1 = -1;
          goto JOIN0DDC
        JOIN0DDC:  preds = [ASSIGN0DDE,ASSIGN0DE3]
          int _t0DE0#1 = phi(_t0DDD,_t0DE2)
          goto JOIN0DD2
        ASSIGN0DE3:  preds = [COND0DE6]
          int _t0DE2#1 = 0;
          goto JOIN0DDC
    end update
  end ray
## initial strand creation
  GRID(2)
    ENTRY0B37:  preds = []
      int iresU0B1D#1 = globals.iresU097B;
      int iresV0B1C#1 = globals.iresV097C;
      int _t0B20#2 = 0;
      int _t0B22#2 = 1;
      int _t0B24#1 = ISub(iresU0B1D,_t0B22);
      int[] _t0B26#1 = Range(_t0B20,_t0B24);
    FOREACH0B29:  preds = [ASSIGN0B27,NEXT0B36]
      foreach (vi0B28 in _t0B26) on exit goto RETURN0B38
      int _t0B2E#1 = ISub(iresV0B1C,_t0B22);
      int[] _t0B30#1 = Range(_t0B20,_t0B2E);
    FOREACH0B33:  preds = [ASSIGN0F66,NEXT0B35]
      foreach (ui0B32 in _t0B30) on exit goto NEXT0B36
      new ray(ui0B32,vi0B28);
      goto FOREACH0B33
    NEXT0B36:  preds = [FOREACH0B33]
      goto FOREACH0B29
    RETURN0B38:  preds = [FOREACH0B29]
      return
#### end program ####
##### high-ir: after normalization rewriting ####
## properties
  GlobalInit StrandArray HasStartMethod ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[]) HasInputs HasGlobals
## globals
  input isoval0975 (isoval) = <default>
  input thick0976 (thick) = <default>
  input camEye0977 (camEye) = <default>
  input camAt0978 (camAt) = <default>
  input camUp0979 (camUp) = <default>
  input camFOV097A (camFOV) = <default>
  input iresU097B (iresU) = <default>
  input iresV097C (iresV) = <default>
  input camNear097D (camNear) = <default>
  input camFar097E (camFar) = <default>
  input refStep097F (refStep) = <default>
  input rayStep0980 (rayStep) = <default>
  input a0981 (a) = <no-default>
  input 0b046F_intermedateGlobal0982 (b) = <no-default>
  input 0c0471_intermedateGlobal0983 (c) = <no-default>
  input zeroEps0984 (zeroEps) = <default>
  input intervalEps0985 (intervalEps) = <default>
  input indecies0986 (indecies) = <no-default>
  input times0987 (times) = <no-default>
  input cells0988 (cells) = <no-default>
  input mcnear0989 (mcnear) = <default>
  input mcfar098A (mcfar) = <default>
  input cmap098B (cmap) = image("/home/teocollin/gitcode/diderot/tests/lipRay/find/cmap.nrrd")
  input cmin098C (cmin) = <default>
  input cmax098D (cmax) = <default>
  input light098E (light) = <default>
  input phongKa098F (phongKa) = <default>
  input phongKd0990 (phongKd) = <default>
  input phongKs0991 (phongKs) = <default>
  input phongSp0992 (phongSp) = <default>
  input maxAlpha0993 (maxAlpha) = <default>
  input lightVsp0994 (lightVsp) = <default>
  input debug0995 (debug) = <default>
  input debugU0996 (debugU) = <default>
  input debugV0997 (debugV) = <default>
  global femData:MeshCell[] 0cell_a0A12
  global femData:FemFunc c0A14
  global real camNearVsp0A16
  global real camFarVsp0A17
  global tensor[3] camN0A18
  global tensor[3] camU0A19
  global tensor[3] camV0A1A
  global real camVmax0A1B
  global real camUmax0A1C
  global tensor[3] L0A1E
## functions
  function femData:MeshPos _msh_newtonInverse0A92 (tensor[2] pos0A1F#6, int cellInt0A20#11, femData:Mesh mesh0A21#23) {
    ENTRY0A91:  preds = []
      real _t0A22#2 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
      tensor[2] xn0A26#6 = <tensor[2]>[_t0A22,_t0A22];
      int _t0A36#1 = 0;
      int _t0A38#1 = 16;
      int[] _t0A3A#1 = Range(_t0A36,_t0A38);
    FOREACH0A3E:  preds = [ASSIGN0A3B,NEXT0A8D]
      foreach (itter0A3C in _t0A3A) on exit goto ASSIGN0A8F
        tensor[2] xn0A3D#8 = phi(xn0A26,xn0A47)
      tensor[2] xn0A47#2 = λ(T0[2],INT1,FEM(msh)2,FEM(msh)3,T4[2],T5[2],INT6,FEM(msh)7,FEM(msh)8,T9[2])<(T0_{i0}) - (Σ(i3=0..1)<(((Σ(i10=0..1)<((ϵ_{ii10,ii0} * Σ(i12=0..1)<((ϵ_{ii12,ii3} * Probe(femV(noFunc, 1, 2, 2)_{i12}⊛Basis()dx_{i10},T4)))>(i12=0..1)))>(i10=0..1)) / ( Σ(i8=0..1)<((Probe(femV(noFunc, 1, 2, 2)_{i8}⊛Basis()dx_{'0'},T4) * Σ(i9=0..1)<((ϵ_{ii8,ii9} * Probe(femV(noFunc, 1, 2, 2)_{i9}⊛Basis()dx_{'1'},T4)))>(i9=0..1)))>(i8=0..1)) * (Probe(femV(noFunc, 1, 2, 2)_{i3}⊛Basis(),T0)) - (T5_{i3})))>(i3=0..1))>_{2} (xn0A3D,cellInt0A20,mesh0A21,mesh0A21,xn0A26,pos0A1F,cellInt0A20,mesh0A21,mesh0A21,xn0A3D);
      real _t0A49#2 = 0.1e-7;
      real _t0A4D#1 = λ(T0[],T1[])<(T0 * T1)> (_t0A49,_t0A49);
      real _t0A4F#1 = λ(INT0,FEM(msh)1,FEM(msh)2,T3[2],T4[2],INT5,FEM(msh)6,FEM(msh)7,T8[2],INT9,FEM(msh)10,FEM(msh)11,T12[2],T13[2],INT14,FEM(msh)15,FEM(msh)16,T17[2])<Σ(i0=0..1)<((Σ(i2=0..1)<(((Σ(i9=0..1)<((ϵ_{ii9,ii0} * Σ(i11=0..1)<((ϵ_{ii11,ii2} * Probe(femV(noFunc, 0, 1, 1)_{i11}⊛Basis()dx_{i9},T3)))>(i11=0..1)))>(i9=0..1)) / ( Σ(i7=0..1)<((Probe(femV(noFunc, 0, 1, 1)_{i7}⊛Basis()dx_{'0'},T3) * Σ(i8=0..1)<((ϵ_{ii7,ii8} * Probe(femV(noFunc, 0, 1, 1)_{i8}⊛Basis()dx_{'1'},T3)))>(i8=0..1)))>(i7=0..1)) * (Probe(femV(noFunc, 0, 1, 1)_{i2}⊛Basis(),T8)) - (T4_{i2})))>(i2=0..1) * Σ(i10=0..1)<(((Σ(i17=0..1)<((ϵ_{ii17,ii0} * Σ(i19=0..1)<((ϵ_{ii19,ii10} * Probe(femV(noFunc, 0, 1, 1)_{i19}⊛Basis()dx_{i17},T3)))>(i19=0..1)))>(i17=0..1)) / ( Σ(i15=0..1)<((Probe(femV(noFunc, 0, 1, 1)_{i15}⊛Basis()dx_{'0'},T3) * Σ(i16=0..1)<((ϵ_{ii15,ii16} * Probe(femV(noFunc, 0, 1, 1)_{i16}⊛Basis()dx_{'1'},T3)))>(i16=0..1)))>(i15=0..1)) * (Probe(femV(noFunc, 0, 1, 1)_{i10}⊛Basis(),T8)) - (T4_{i10})))>(i10=0..1)))>(i0=0..1)> (cellInt0A20,mesh0A21,mesh0A21,xn0A26,pos0A1F,cellInt0A20,mesh0A21,mesh0A21,xn0A3D,cellInt0A20,mesh0A21,mesh0A21,xn0A26,pos0A1F,cellInt0A20,mesh0A21,mesh0A21,xn0A3D);
      bool _t0A51#1 = GTE<real>(_t0A4D,_t0A4F);
      if _t0A51 then goto ASSIGN0A55 else goto JOIN0A53
    ASSIGN0A55:  preds = [COND0A8C]
      real _t0A54#3 = 0.1e1;
      real _t0A56#3 = 0.1e-8;
      real _t0A58#1 = λ(T0[],T1[])<(T0 + T1)> (_t0A54,_t0A56);
      tensor[2] _t0A5E#1 = <tensor[2]>[_t0A54,_t0A54];
      real _t0A60#1 = λ(T0[2],T1[2],INT2,FEM(msh)3,FEM(msh)4,T5[2],T6[2],INT7,FEM(msh)8,FEM(msh)9,T10[2])<Σ(i0=0..1)<((T0_{i0} * (T1_{i0}) - (Σ(i3=0..1)<(((Σ(i10=0..1)<((ϵ_{ii10,ii0} * Σ(i12=0..1)<((ϵ_{ii12,ii3} * Probe(femV(noFunc, 2, 3, 3)_{i12}⊛Basis()dx_{i10},T5)))>(i12=0..1)))>(i10=0..1)) / ( Σ(i8=0..1)<((Probe(femV(noFunc, 2, 3, 3)_{i8}⊛Basis()dx_{'0'},T5) * Σ(i9=0..1)<((ϵ_{ii8,ii9} * Probe(femV(noFunc, 2, 3, 3)_{i9}⊛Basis()dx_{'1'},T5)))>(i9=0..1)))>(i8=0..1)) * (Probe(femV(noFunc, 2, 3, 3)_{i3}⊛Basis(),T1)) - (T6_{i3})))>(i3=0..1))))>(i0=0..1)> (_t0A5E,xn0A3D,cellInt0A20,mesh0A21,mesh0A21,xn0A26,pos0A1F,cellInt0A20,mesh0A21,mesh0A21,xn0A3D);
      bool _t0A62#1 = GT<real>(_t0A58,_t0A60);
      tensor[2] _t0A68#1 = <tensor[2]>[_t0A56,_t0A56];
      tensor[2] _t0A6A#2 = λ(T0[2],T1[2],INT2,FEM(msh)3,FEM(msh)4,T5[2],T6[2],INT7,FEM(msh)8,FEM(msh)9,T10[2])<(T0_{i0} + (T1_{i0}) - (Σ(i4=0..1)<(((Σ(i11=0..1)<((ϵ_{ii11,ii0} * Σ(i13=0..1)<((ϵ_{ii13,ii4} * Probe(femV(noFunc, 2, 3, 3)_{i13}⊛Basis()dx_{i11},T5)))>(i13=0..1)))>(i11=0..1)) / ( Σ(i9=0..1)<((Probe(femV(noFunc, 2, 3, 3)_{i9}⊛Basis()dx_{'0'},T5) * Σ(i10=0..1)<((ϵ_{ii9,ii10} * Probe(femV(noFunc, 2, 3, 3)_{i10}⊛Basis()dx_{'1'},T5)))>(i10=0..1)))>(i9=0..1)) * (Probe(femV(noFunc, 2, 3, 3)_{i4}⊛Basis(),T1)) - (T6_{i4})))>(i4=0..1)))>_{2} (_t0A68,xn0A3D,cellInt0A20,mesh0A21,mesh0A21,xn0A26,pos0A1F,cellInt0A20,mesh0A21,mesh0A21,xn0A3D);
      real _t0A6C#1 = TensorIndex<tensor[2],[0]>(_t0A6A);
      real _t0A6E#2 = -0.e0;
      bool _t0A70#1 = GT<real>(_t0A6C,_t0A6E);
      real _t0A7A#1 = TensorIndex<tensor[2],[1]>(_t0A6A);
      bool _t0A7E#1 = GT<real>(_t0A7A,_t0A6E);
      bool _t0A80#1 = BAnd(_t0A70,_t0A7E);
      bool _t0A82#1 = BAnd(_t0A62,_t0A80);
      if _t0A82 then goto ASSIGN0A86 else goto ASSIGN0A89
    ASSIGN0A86:  preds = [COND0A8B]
      femData:MeshPos _t0A85#1 = ExtractFemItemN<[femData:Mesh,int,tensor[2],tensor[2]],femData:MeshPos,AllBuild(MeshPos),0000,"",[],int>(mesh0A21,cellInt0A20,xn0A47,pos0A1F);
      return _t0A85
      goto JOIN0A84
    JOIN0A84:  preds = [*RETURN(_t0A85)0A87,*RETURN(_t0A88)0A8A]
      goto JOIN0A53
    JOIN0A53:  preds = [*JOIN0A84,COND0A8C]
      goto FOREACH0A3E
    ASSIGN0A89:  preds = [COND0A8B]
      femData:MeshPos _t0A88#1 = ExtractFemItemN<[femData:Mesh],femData:MeshPos,InvalidBuild(MeshPos),0000,"",[],int>(mesh0A21);
      return _t0A88
      goto JOIN0A84
    ASSIGN0A8F:  preds = [FOREACH0A3E]
      femData:MeshPos _t0A8E#1 = ExtractFemItemN<[femData:Mesh],femData:MeshPos,InvalidBuild(MeshPos),0000,"",[],int>(mesh0A21);
      return _t0A8E
}
  function int[2] nextCell40AA4 (int faceIdx0A93#1, int cell0A94#1, femData:Mesh mesh0A95#1) {
    ENTRY0AA3:  preds = []
      int _t0A96#1 = 6;
      int _t0A98#1 = IMul(cell0A94,_t0A96);
      int _t0A9A#1 = 2;
      int _t0A9C#1 = IMul(faceIdx0A93,_t0A9A);
      int _t0A9E#1 = IAdd(_t0A98,_t0A9C);
      int[2] _t0AA0#1 = ExtractFemItemN<[femData:Mesh,int],int[2],CellFaceCell(Mesh),0000,"",[],int>(mesh0A95,_t0A9E);
      return _t0AA0
}
## input initialization
  ENTRY0A10:  preds = []
    real isoval0998#1 = 0.2e0;
    globals.isoval0975 = isoval0998;
    real thick099B#1 = 0.7e-1;
    globals.thick0976 = thick099B;
    real _t099E#2 = 0.3e1;
    real _t09A0#1 = -0.3e1;
    tensor[3] camEye09A4#1 = <tensor[3]>[_t099E,_t09A0,_t099E];
    globals.camEye0977 = camEye09A4;
    real _t09A7#5 = 0.5e0;
    tensor[3] camAt09AD#1 = <tensor[3]>[_t09A7,_t09A7,_t09A7];
    globals.camAt0978 = camAt09AD;
    real _t09B0#5 = 0.e0;
    real _t09B4#7 = 0.1e1;
    tensor[3] camUp09B6#1 = <tensor[3]>[_t09B0,_t09B0,_t09B4];
    globals.camUp0979 = camUp09B6;
    real camFOV09B9#1 = 0.137e2;
    globals.camFOV097A = camFOV09B9;
    int iresU09BC#2 = 10;
    globals.iresU097B = iresU09BC;
    globals.iresV097C = iresU09BC;
    real camNear09C2#1 = -0.2e1;
    globals.camNear097D = camNear09C2;
    real camFar09C5#1 = 0.5e1;
    globals.camFar097E = camFar09C5;
    globals.refStep097F = _t09B4;
    real rayStep09CB#1 = 0.1e-1;
    globals.rayStep0980 = rayStep09CB;
    real zeroEps09CE#2 = 0.1e-10;
    globals.zeroEps0984 = zeroEps09CE;
    globals.intervalEps0985 = zeroEps09CE;
    tensor[3] mcnear09DA#2 = <tensor[3]>[_t09B4,_t09B4,_t09B4];
    globals.mcnear0989 = mcnear09DA;
    globals.mcfar098A = mcnear09DA;
    globals.cmin098C = _t09B0;
    globals.cmax098D = _t09B4;
    bool light09EC#2 = false;
    globals.light098E = light09EC;
    globals.phongKa098F = _t09A7;
    globals.phongKd0990 = _t09A7;
    globals.phongKs0991 = _t09B0;
    real phongSp09F8#1 = 0.6e2;
    globals.phongSp0992 = phongSp09F8;
    globals.maxAlpha0993 = _t09B4;
    real _t0A00#1 = 0.369e1;
    real _t0A02#1 = 0.153e1;
    tensor[3] lightVsp0A04#1 = <tensor[3]>[_t09B0,_t0A00,_t0A02];
    globals.lightVsp0994 = lightVsp0A04;
    globals.debug0995 = light09EC;
    int debugU0A0A#1 = 8;
    globals.debugU0996 = debugU0A0A;
    int debugV0A0D#1 = 2;
    globals.debugV0997 = debugV0A0D;
    return
## global-variable initialization
  ENTRY0B1A:  preds = []
    tensor[3] camEye0AB1#16 = globals.camEye0977;
    tensor[3] camAt0AB0#16 = globals.camAt0978;
    tensor[3] camUp0AAF#4 = globals.camUp0979;
    real camFOV0AAE#2 = globals.camFOV097A;
    int iresU0AAD#1 = globals.iresU097B;
    int iresV0AAC#1 = globals.iresV097C;
    real camNear0AAB#1 = globals.camNear097D;
    real camFar0AAA#1 = globals.camFar097E;
    femData:Mesh a0AA9#3 = globals.a0981;
    femData:Space 0b046F_intermedateGlobal0AA8#1 = globals.0b046F_intermedateGlobal0982;
    femData:FemFunc 0c0471_intermedateGlobal0AA7#1 = globals.0c0471_intermedateGlobal0983;
    image(IMAGE1D<double[3]>) cmap0AA6#1 = globals.cmap098B;
    tensor[3] lightVsp0AA5#2 = globals.lightVsp0994;
    int _t0ABF#1 = 0;
    int _t0AC1#1 = 1;
    int _t0AC3#1 = ExtractFemItem<int,NumCell(Mesh)>(a0AA9);
    int _t0AC5#1 = ISub(_t0AC3,_t0AC1);
    int[] _t0AC7#1 = Range(_t0ABF,_t0AC5);
    femData:MeshCell[] _t0AC9#1 = <femData:MeshCell[]>{};
  FOREACH0ACD:  preds = [ASSIGN0ACA,NEXT0AD2]
    foreach (_t0ACB in _t0AC7) on exit goto GASSIGN0F7F
      femData:MeshCell[] _t0ACC#2 = phi(_t0AC9,_t0AD0)
    femData:MeshCell _t0ACE#1 = LoadFem<femData:MeshCell>(a0AA9,_t0ACB);
    femData:MeshCell[] _t0AD0#1 = Append<femData:MeshCell>(_t0ACC,_t0ACE);
    goto FOREACH0ACD
  GASSIGN0F7F:  preds = [FOREACH0ACD]
    globals.0cell_a0A12 = _t0ACC;
    femData:Space b0AD6#1 = LoadFem<femData:Space>(0b046F_intermedateGlobal0AA8,a0AA9);
    femData:FemFunc c0AD9#1 = LoadFem<femData:FemFunc>(0c0471_intermedateGlobal0AA7,b0AD6);
    globals.c0A14 = c0AD9;
    real camNearVsp0AE1#1 = λ(T0[],T1[3],T2[3])<(T0 + Sqrt(Σ(i0=0..2)<(((T1_{i0}) - (T2_{i0}) * (T1_{i0}) - (T2_{i0})))>(i0=0..2)))> (camNear0AAB,camAt0AB0,camEye0AB1);
    globals.camNearVsp0A16 = camNearVsp0AE1;
    real camFarVsp0AE4#1 = λ(T0[],T1[3],T2[3])<(T0 + Sqrt(Σ(i0=0..2)<(((T1_{i0}) - (T2_{i0}) * (T1_{i0}) - (T2_{i0})))>(i0=0..2)))> (camFar0AAA,camAt0AB0,camEye0AB1);
    globals.camFarVsp0A17 = camFarVsp0AE4;
    tensor[3] camN0AE9#2 = λ(T0[3],T1[3],T2[3],T3[3])<((T0_{i0}) - (T1_{i0}) * (1) / ( Sqrt(Σ(i1=0..2)<(((T0_{i1}) - (T1_{i1}) * (T0_{i1}) - (T1_{i1})))>(i1=0..2))))>_{3} (camAt0AB0,camEye0AB1,camAt0AB0,camEye0AB1);
    globals.camN0A18 = camN0AE9;
    tensor[3] camU0AEE#2 = λ(T0[3],T1[3],T2[3],T3[3],T4[3],T5[3],T6[3],T7[3],T8[3],T9[3])<(Σ(i2=0..2)(i3=0..2)<((ϵ_{ii0,ii2,ii3} * (T0_{i2}) - (T1_{i2}) * (1) / ( Sqrt(Σ(i4=0..2)<(((T0_{i4}) - (T1_{i4}) * (T0_{i4}) - (T1_{i4})))>(i4=0..2))) * T4_{i3}))>(i2=0..2)(i3=0..2) * (1) / ( Sqrt(Σ(i1=0..2)<((Σ(i2=0..2)(i3=0..2)<((ϵ_{ii1,ii2,ii3} * (T0_{i2}) - (T1_{i2}) * (1) / ( Sqrt(Σ(i4=0..2)<(((T0_{i4}) - (T1_{i4}) * (T0_{i4}) - (T1_{i4})))>(i4=0..2))) * T4_{i3}))>(i2=0..2)(i3=0..2) * Σ(i2=0..2)(i3=0..2)<((ϵ_{ii1,ii2,ii3} * (T0_{i2}) - (T1_{i2}) * (1) / ( Sqrt(Σ(i4=0..2)<(((T0_{i4}) - (T1_{i4}) * (T0_{i4}) - (T1_{i4})))>(i4=0..2))) * T4_{i3}))>(i2=0..2)(i3=0..2)))>(i1=0..2))))>_{3} (camAt0AB0,camEye0AB1,camAt0AB0,camEye0AB1,camUp0AAF,camAt0AB0,camEye0AB1,camAt0AB0,camEye0AB1,camUp0AAF);
    globals.camU0A19 = camU0AEE;
    tensor[3] camV0AF1#2 = λ(T0[3],T1[3],T2[3],T3[3],T4[3],T5[3],T6[3],T7[3],T8[3],T9[3],T10[3],T11[3],T12[3],T13[3])<Σ(i1=0..2)(i2=0..2)<((ϵ_{ii0,ii1,ii2} * Σ(i4=0..2)(i5=0..2)<((ϵ_{ii1,ii4,ii5} * (T0_{i4}) - (T1_{i4}) * (1) / ( Sqrt(Σ(i6=0..2)<(((T0_{i6}) - (T1_{i6}) * (T0_{i6}) - (T1_{i6})))>(i6=0..2))) * T4_{i5}))>(i4=0..2)(i5=0..2) * (1) / ( Sqrt(Σ(i3=0..2)<((Σ(i4=0..2)(i5=0..2)<((ϵ_{ii3,ii4,ii5} * (T0_{i4}) - (T1_{i4}) * (1) / ( Sqrt(Σ(i6=0..2)<(((T0_{i6}) - (T1_{i6}) * (T0_{i6}) - (T1_{i6})))>(i6=0..2))) * T4_{i5}))>(i4=0..2)(i5=0..2) * Σ(i4=0..2)(i5=0..2)<((ϵ_{ii3,ii4,ii5} * (T0_{i4}) - (T1_{i4}) * (1) / ( Sqrt(Σ(i6=0..2)<(((T0_{i6}) - (T1_{i6}) * (T0_{i6}) - (T1_{i6})))>(i6=0..2))) * T4_{i5}))>(i4=0..2)(i5=0..2)))>(i3=0..2))) * (T0_{i2}) - (T1_{i2}) * (1) / ( Sqrt(Σ(i7=0..2)<(((T0_{i7}) - (T1_{i7}) * (T0_{i7}) - (T1_{i7})))>(i7=0..2)))))>(i1=0..2)(i2=0..2)>_{3} (camAt0AB0,camEye0AB1,camAt0AB0,camEye0AB1,camUp0AAF,camAt0AB0,camEye0AB1,camAt0AB0,camEye0AB1,camUp0AAF,camAt0AB0,camEye0AB1,camAt0AB0,camEye0AB1);
    globals.camV0A1A = camV0AF1;
    real _t0AF4#2 = 0.314159265358979323846264338327950288e1;
    real _t0AF8#2 = 0.36e3;
    real camVmax0AFE#1 = λ(T0[],T1[],T2[],T3[3],T4[3])<(Tangent(((T0 * T1)) / ( T2)) * Sqrt(Σ(i0=0..2)<(((T3_{i0}) - (T4_{i0}) * (T3_{i0}) - (T4_{i0})))>(i0=0..2)))> (camFOV0AAE,_t0AF4,_t0AF8,camAt0AB0,camEye0AB1);
    globals.camVmax0A1B = camVmax0AFE;
    real _t0B01#1 = IntToReal(iresU0AAD);
    real _t0B05#1 = IntToReal(iresV0AAC);
    real camUmax0B07#1 = λ(T0[],T1[],T2[],T3[3],T4[3],T5[],T6[])<((T5 * Tangent(((T0 * T1)) / ( T2)) * Sqrt(Σ(i0=0..2)<(((T3_{i0}) - (T4_{i0}) * (T3_{i0}) - (T4_{i0})))>(i0=0..2)))) / ( T6)> (camFOV0AAE,_t0AF4,_t0AF8,camAt0AB0,camEye0AB1,_t0B01,_t0B05);
    globals.camUmax0A1C = camUmax0B07;
    kernel _t0B0A#1 = Kernel<tent,0>;
    image(IMAGE1D<double[3]>) img0B0C#1 = BorderCtlClamp<IMAGE1D<double[3]>>(cmap0AA6);
    tensor[3,3] _t0B11#1 = <tensor[3,3]>[camU0AEE,camV0AF1,camN0AE9];
    tensor[3] L0B17#1 = λ(T0[3 3],T1[3],T2[3])<Σ(i1=0..2)<((T0_{i1,i0} * T1_{i1} * (1) / ( Sqrt(Σ(i2=0..2)<((T1_{i2} * T1_{i2}))>(i2=0..2)))))>(i1=0..2)>_{3} (_t0B11,lightVsp0AA5,lightVsp0AA5);
    globals.L0A1E = L0B17;
    return
## strand
  strand ray (int ui0B39#3, int vi0B3A#4)
    state:
      real rayU;
      real rayV;
      tensor[3] UV;
      tensor[3] rayOrig;
      tensor[3] rayVec;
      real camNearVsp;
      real camFarVsp;
      int offset;
      int len;
      int itter;
      int intersectionItter;
      int idx;
      tensor[2] interval;
      real s;
      real e;
      femData:MeshCell cc;
      femData:FuncCell fc;
      output real out;
      output tensor[4] rgba;
      output tensor[3][] locs;
      int ui;
      int vi;
    state init
      ENTRY0BF4:  preds = []
        tensor[3] camEye0B5E#1 = globals.camEye0977;
        int iresU0B5D#2 = globals.iresU097B;
        int iresV0B5C#3 = globals.iresV097C;
        femData:MeshCell[] 0cell_a0B5B#1 = globals.0cell_a0A12;
        femData:FemFunc c0B5A#1 = globals.c0A14;
        int[] indecies0B59#2 = globals.indecies0986;
        tensor[2][] times0B58#1 = globals.times0987;
        real camNearVsp0B57#1 = globals.camNearVsp0A16;
        real camFarVsp0B56#1 = globals.camFarVsp0A17;
        tensor[3] camN0B55#1 = globals.camN0A18;
        tensor[3] camU0B54#2 = globals.camU0A19;
        tensor[3] camV0B53#2 = globals.camV0A1A;
        real camVmax0B52#6 = globals.camVmax0A1B;
        real camUmax0B51#6 = globals.camUmax0A1C;
        real _t0B85#6 = -0.5e0;
        real _t0B87#3 = IntToReal(ui0B39);
        real _t0B89#3 = IntToReal(iresU0B5D);
        real _t0B8B#6 = 0.5e0;
        real rayU0B8F#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[])<(Neg(T0) + (((T3) - (T2)) / ( ((T4) - (T5)) - (T2)) * (T1) - (Neg(T0))))> (camUmax0B51,camUmax0B51,_t0B85,_t0B87,_t0B89,_t0B8B);
        real _t0B95#3 = IntToReal(vi0B3A);
        real _t0B97#3 = IntToReal(iresV0B5C);
        real rayV0B9D#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[])<(Neg(T0) + (((T3) - (T2)) / ( ((T4) - (T5)) - (T2)) * (T1) - (Neg(T0))))> (camVmax0B52,camVmax0B52,_t0B85,_t0B95,_t0B97,_t0B8B);
        tensor[3] UV0BA3#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[3],T7[],T8[],T9[],T10[],T11[],T12[],T13[3])<(((Neg(T0) + (((T3) - (T2)) / ( ((T4) - (T5)) - (T2)) * (T0) - (Neg(T0)))) * T6_{i0}) + ((Neg(T7) + (((T10) - (T2)) / ( ((T11) - (T5)) - (T2)) * (T7) - (Neg(T7)))) * T13_{i0}))>_{3} (camUmax0B51,camUmax0B51,_t0B85,_t0B87,_t0B89,_t0B8B,camU0B54,camVmax0B52,camVmax0B52,_t0B85,_t0B95,_t0B97,_t0B8B,camV0B53);
        tensor[3] rayOrig0BA5#1 = λ(T0[3],T1[],T2[],T3[],T4[],T5[],T6[],T7[3],T8[],T9[],T10[],T11[],T12[],T13[],T14[3])<(T0_{i0} + ((Neg(T1) + (((T4) - (T3)) / ( ((T5) - (T6)) - (T3)) * (T1) - (Neg(T1)))) * T7_{i0}) + ((Neg(T8) + (((T11) - (T3)) / ( ((T12) - (T6)) - (T3)) * (T8) - (Neg(T8)))) * T14_{i0}))>_{3} (camEye0B5E,camUmax0B51,camUmax0B51,_t0B85,_t0B87,_t0B89,_t0B8B,camU0B54,camVmax0B52,camVmax0B52,_t0B85,_t0B95,_t0B97,_t0B8B,camV0B53);
        real _t0BA7#8 = 0.e0;
        tensor[3] _t0BAD#1 = <tensor[3]>[_t0BA7,_t0BA7,_t0BA7];
        tensor[3] rayVec0BAF#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (camN0B55,_t0BAD);
        int _t0BB5#2 = IMul(ui0B39,iresV0B5C);
        int _t0BB7#1 = IAdd(_t0BB5,vi0B3A);
        int offset0BB9#2 = Subscript<int[]>(indecies0B59,_t0BB7);
        int _t0BBB#1 = IMul(iresU0B5D,iresV0B5C);
        int _t0BBF#1 = IAdd(_t0BBB,_t0BB5);
        int _t0BC1#1 = IAdd(_t0BBF,vi0B3A);
        int len0BC3#1 = Subscript<int[]>(indecies0B59,_t0BC1);
        int itter0BC5#4 = 0;
        int idx0BC9#2 = IAdd(offset0BB9,itter0BC5);
        tensor[2] interval0BCB#3 = Subscript<tensor[2][]>(times0B58,idx0BC9);
        real s0BCD#1 = TensorIndex<tensor[2],[0]>(interval0BCB);
        real e0BCF#1 = TensorIndex<tensor[2],[1]>(interval0BCB);
        femData:MeshCell cc0BD3#2 = Subscript<femData:MeshCell[]>(0cell_a0B5B,itter0BC5);
        int _t0BD6#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc0BD3);
        femData:FuncCell _t0BD8#1 = LoadFem<femData:FuncCell>(c0B5A,_t0BD6);
        tensor[4] rgba0BE8#1 = <tensor[4]>[_t0BA7,_t0BA7,_t0BA7,_t0BA7];
        tensor[3][0] _t0BEA#1 = <tensor[3][0]>{};
        tensor[3][] _t0BEC#1 = MkDynamic<tensor[3],0>(_t0BEA);
        self.rayU = rayU0B8F;
        self.rayV = rayV0B9D;
        self.UV = UV0BA3;
        self.rayOrig = rayOrig0BA5;
        self.rayVec = rayVec0BAF;
        self.camNearVsp = camNearVsp0B57;
        self.camFarVsp = camFarVsp0B56;
        self.offset = offset0BB9;
        self.len = len0BC3;
        self.itter = itter0BC5;
        self.intersectionItter = itter0BC5;
        self.idx = idx0BC9;
        self.interval = interval0BCB;
        self.s = s0BCD;
        self.e = e0BCF;
        self.cc = cc0BD3;
        self.fc = _t0BD8;
        self.out = _t0BA7;
        self.rgba = rgba0BE8;
        self.locs = _t0BEC;
        self.ui = ui0B39;
        self.vi = vi0B3A;
        return
    end state init
    method start
        ENTRY0C7E:  preds = []
          femData:MeshCell[] 0cell_a0C11#1 = globals.0cell_a0A12;
          femData:FemFunc c0C10#1 = globals.c0A14;
          int[] cells0C0F#1 = globals.cells0988;
          bool debug0C0E#1 = globals.debug0995;
          int debugU0C0D#1 = globals.debugU0996;
          int debugV0C0C#1 = globals.debugV0997;
          int len0C20#1 = self.len;
          int idx0C23#1 = self.idx;
          int ui0C2C#2 = self.ui;
          int vi0C2D#2 = self.vi;
          if debug0C0E then goto ASSIGN0C46 else goto JOIN0C44
        ASSIGN0C46:  preds = [COND0C58]
          bool _t0C45#1 = NEQ<int>(ui0C2C,debugU0C0D);
          if _t0C45 then goto ASSIGN0C49 else goto JOIN0C47
        ASSIGN0C49:  preds = [COND0C57]
          bool _t0C48#1 = NEQ<int>(vi0C2D,debugV0C0C);
          if _t0C48 then goto STABILIZE0C4B else goto JOIN0C4A
        STABILIZE0C4B:  preds = [COND0C56]
          stabilize
          goto JOIN0C4A
        JOIN0C4A:  preds = [*STABILIZE0C4B,COND0C56]
          goto JOIN0C47
        JOIN0C47:  preds = [JOIN0C4A,COND0C57]
          goto JOIN0C44
        JOIN0C44:  preds = [JOIN0C47,COND0C58]
          int _t0C59#1 = 0;
          bool _t0C5B#1 = EQ<int>(len0C20,_t0C59);
          if _t0C5B then goto ASSIGN0C5F else goto JOIN0C5D
        ASSIGN0C5F:  preds = [COND0C70]
          string _t0C5E#1 = "(find:)No intersection found:";
          string _t0C60#1 = "/";
          string _t0C62#1 = "\n";
          Print<[string,int,string,int,string]>(_t0C5E,ui0C2C,_t0C60,vi0C2D,_t0C62);
          stabilize
          goto JOIN0C5D
        JOIN0C5D:  preds = [*STABILIZE0C65,COND0C70]
          int _t0C71#1 = Subscript<int[]>(cells0C0F,idx0C23);
          femData:MeshCell cc0C73#2 = Subscript<femData:MeshCell[]>(0cell_a0C11,_t0C71);
          int _t0C76#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc0C73);
          femData:FuncCell _t0C78#1 = LoadFem<femData:FuncCell>(c0C10,_t0C76);
          self.cc = cc0C73;
          self.fc = _t0C78;
          active
    end start
    method update
        ENTRY0F59:  preds = []
          femData:MeshCell[] 0cell_a0C9A#1 = globals.0cell_a0A12;
          femData:FemFunc c0C99#1 = globals.c0A14;
          real zeroEps0C98#1 = globals.zeroEps0984;
          real intervalEps0C97#4 = globals.intervalEps0985;
          tensor[2][] times0C96#1 = globals.times0987;
          int[] cells0C95#1 = globals.cells0988;
          tensor[3] mcnear0C94#2 = globals.mcnear0989;
          tensor[3] mcfar0C93#2 = globals.mcfar098A;
          real cmin0C92#2 = globals.cmin098C;
          real cmax0C91#2 = globals.cmax098D;
          bool light0C90#1 = globals.light098E;
          real phongKa0C8F#1 = globals.phongKa098F;
          real phongKd0C8E#1 = globals.phongKd0990;
          real phongKs0C8D#1 = globals.phongKs0991;
          real phongSp0C8C#1 = globals.phongSp0992;
          tensor[3] L0C8A#3 = globals.L0A1E;
          tensor[3] rayOrig0CAF#4 = self.rayOrig;
          tensor[3] rayVec0CB0#8 = self.rayVec;
          real camNearVsp0CB1#2 = self.camNearVsp;
          real camFarVsp0CB2#2 = self.camFarVsp;
          int offset0CB3#1 = self.offset;
          int len0CB4#1 = self.len;
          int itter0CB5#3 = self.itter;
          int intersectionItter0CB6#2 = self.intersectionItter;
          tensor[2] interval0CB8#1 = self.interval;
          real s0CB9#23 = self.s;
          real e0CBA#27 = self.e;
          femData:MeshCell cc0CBB#3 = self.cc;
          femData:FuncCell fc0CBC#3 = self.fc;
          real out0CBD#2 = self.out;
          tensor[4] rgba0CBE#1 = self.rgba;
          tensor[3][] locs0CBF#1 = self.locs;
          int ui0CC0#1 = self.ui;
          int vi0CC1#1 = self.vi;
          string _t0CD8#1 = "Ui/Vi::";
          string _t0CDA#1 = "/";
          string _t0CDC#11 = "\n";
          Print<[string,int,string,int,string]>(_t0CD8,ui0CC0,_t0CDA,vi0CC1,_t0CDC);
          string _t0CDF#1 = "Interval:";
          tensor[2] _t0CE1#1 = <tensor[2]>[s0CB9,e0CBA];
          Print<[string,tensor[2],string]>(_t0CDF,_t0CE1,_t0CDC);
          string _t0CE6#1 = "inner itter:";
          Print<[string,int,string]>(_t0CE6,intersectionItter0CB6,_t0CDC);
          string _t0CEB#1 = "Outer itter:";
          Print<[string,int,string]>(_t0CEB,itter0CB5,_t0CDC);
          real _t0CF0#1 = TensorIndex<tensor[3],[0]>(rayOrig0CAF);
          real _t0CF2#1 = TensorIndex<tensor[3],[1]>(rayOrig0CAF);
          tensor[2] _t0CF4#3 = <tensor[2]>[_t0CF0,_t0CF2];
          real _t0CF6#1 = TensorIndex<tensor[3],[0]>(rayVec0CB0);
          real _t0CF8#1 = TensorIndex<tensor[3],[1]>(rayVec0CB0);
          tensor[2] _t0CFA#3 = <tensor[2]>[_t0CF6,_t0CF8];
          tensor[2] startRay0CFE#1 = λ(T0[2],T1[],T2[2])<(T0_{i0} + (T1 * T2_{i0}))>_{2} (_t0CF4,s0CB9,_t0CFA);
          tensor[2] endRay0D0E#1 = λ(T0[2],T1[],T2[2])<(T0_{i0} + (T1 * T2_{i0}))>_{2} (_t0CF4,e0CBA,_t0CFA);
          femData:Mesh _t0D10#8 = ExtractFem<femData:Mesh,femData:MeshCell>(cc0CBB);
          int _t0D14#4 = ExtractFemItem<int,CellIndex(MeshCell)>(cc0CBB);
          tensor[2] invertA0D18#18 = λ(INT0,FEM(msh)1,FEM(msh)2,T3[2])<Probe(femInvV(0A92, 0, 1, 1)_{i0}⊛Basis(),T3)>_{2} (_t0D14,_t0D10,_t0D10,startRay0CFE);
          tensor[2] invertB0D22#18 = λ(INT0,FEM(msh)1,FEM(msh)2,T3[2])<Probe(femInvV(0A92, 0, 1, 1)_{i0}⊛Basis(),T3)>_{2} (_t0D14,_t0D10,_t0D10,endRay0D0E);
          string _t0D24#1 = "inverses:";
          Print<[string,tensor[2],tensor[2],string]>(_t0D24,invertA0D18,invertB0D22,_t0CDC);
          femData:FemFunc _t0D29#39 = ExtractFem<femData:FemFunc,femData:FuncCell>(fc0CBC);
          femData:Space _t0D2D#38 = ExtractFem<femData:Space,femData:FemFunc>(_t0D29);
          int _t0D2F#38 = ExtractFemItem<int,CellIndex(FuncCell)>(fc0CBC);
          real _t0D35#36 = TensorIndex<tensor[3],[2]>(rayVec0CB0);
          real _t0D3B#36 = TensorIndex<tensor[3],[2]>(rayOrig0CAF);
          real fa0D3D#5 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[],T5[],T6[])<((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T3)) - ((T4 * T5))) - (T6)> (_t0D2F,_t0D2D,_t0D29,invertA0D18,_t0D35,s0CB9,_t0D3B);
          real fb0D53#2 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[],T5[],T6[])<((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T3)) - ((T4 * T5))) - (T6)> (_t0D2F,_t0D2D,_t0D29,invertB0D22,_t0D35,e0CBA,_t0D3B);
          string _t0D55#1 = "Vals:";
          tensor[2] _t0D57#1 = <tensor[2]>[fa0D3D,fb0D53];
          Print<[string,tensor[2],string]>(_t0D55,_t0D57,_t0CDC);
          real _t0D5E#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[],T5[],T6[],INT7,FEM(fns)8,FEM(func)9,T10[2],T11[],T12[],T13[])<Abs((((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T3)) - ((T4 * T5))) - (T6)) - (((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T10)) - ((T4 * T12))) - (T6)))> (_t0D2F,_t0D2D,_t0D29,invertA0D18,_t0D35,s0CB9,_t0D3B,_t0D2F,_t0D2D,_t0D29,invertB0D22,_t0D35,e0CBA,_t0D3B);
          bool _t0D60#1 = LT<real>(_t0D5E,intervalEps0C97);
          if _t0D60 then goto ASSIGN0FE4 else goto JOIN0D62
        ASSIGN0FE4:  preds = [COND0D82]
          real _t0D63#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[],T5[],T6[])<Abs(((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T3)) - ((T4 * T5))) - (T6))> (_t0D2F,_t0D2D,_t0D29,invertA0D18,_t0D35,s0CB9,_t0D3B);
          bool _t0D65#1 = GT<real>(_t0D63,intervalEps0C97);
          if _t0D65 then goto ASSIGN0FE5 else goto JOIN0D67
        ASSIGN0FE5:  preds = [COND0D80]
          real _t0D68#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[],T5[],T6[])<Abs(((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T3)) - ((T4 * T5))) - (T6))> (_t0D2F,_t0D2D,_t0D29,invertB0D22,_t0D35,e0CBA,_t0D3B);
          bool _t0D6A#1 = GT<real>(_t0D68,intervalEps0C97);
          if _t0D6A then goto ASSIGN0D6E else goto JOIN0D6C
        ASSIGN0D6E:  preds = [COND0D7E]
          string _t0D6D#1 = "warn\n";
          Print<[string]>(_t0D6D);
          real s0D70#1 = λ(T0[],T1[])<(T0 + T1)> (s0CB9,intervalEps0C97);
          self.s = s0D70;
          active
          goto JOIN0D6C
        JOIN0D6C:  preds = [*ACTIVE0D73,COND0D7E]
          real s0D71#1 = phi(s0CB9)
          goto JOIN0D67
        JOIN0D67:  preds = [JOIN0D6C,COND0D80]
          real s0D7F#1 = phi(s0D71,s0CB9)
          goto JOIN0D62
        JOIN0D62:  preds = [JOIN0D67,COND0D82]
          real s0D81#9 = phi(s0D7F,s0CB9)
          real cup0D8B#3 = λ(T0[],INT1,FEM(fns)2,FEM(func)3,T4[2],T5[],T6[],T7[],T8[],INT9,FEM(fns)10,FEM(func)11,T12[2],T13[],T14[],T15[],INT16,FEM(fns)17,FEM(func)18,T19[2],T20[],T21[],T22[],INT23,FEM(fns)24,FEM(func)25,T26[2],T27[],T28[],T29[])<(((T0 * ((Probe(femV(noFunc, 1, 2, 3)⊛Basis(),T4)) - ((T5 * T6))) - (T7))) - ((T6 * ((Probe(femV(noFunc, 1, 2, 3)⊛Basis(),T12)) - ((T5 * T14))) - (T7)))) / ( (((Probe(femV(noFunc, 1, 2, 3)⊛Basis(),T4)) - ((T5 * T6))) - (T7)) - (((Probe(femV(noFunc, 1, 2, 3)⊛Basis(),T12)) - ((T5 * T14))) - (T7)))> (s0D81,_t0D2F,_t0D2D,_t0D29,invertB0D22,_t0D35,e0CBA,_t0D3B,e0CBA,_t0D2F,_t0D2D,_t0D29,invertA0D18,_t0D35,s0CB9,_t0D3B,_t0D2F,_t0D2D,_t0D29,invertB0D22,_t0D35,e0CBA,_t0D3B,_t0D2F,_t0D2D,_t0D29,invertA0D18,_t0D35,s0CB9,_t0D3B);
          string _t0D8D#1 = "Mid time:";
          Print<[string,real,string]>(_t0D8D,cup0D8B,_t0CDC);
          tensor[2] midRay0DA0#2 = λ(T0[2],T1[],INT2,FEM(fns)3,FEM(func)4,T5[2],T6[],T7[],T8[],T9[],INT10,FEM(fns)11,FEM(func)12,T13[2],T14[],T15[],T16[],INT17,FEM(fns)18,FEM(func)19,T20[2],T21[],T22[],T23[],INT24,FEM(fns)25,FEM(func)26,T27[2],T28[],T29[],T30[],T31[2])<(T0_{i0} + ((((T1 * ((Probe(femV(noFunc, 2, 3, 4)⊛Basis(),T5)) - ((T6 * T7))) - (T8))) - ((T7 * ((Probe(femV(noFunc, 2, 3, 4)⊛Basis(),T13)) - ((T6 * T15))) - (T8)))) / ( (((Probe(femV(noFunc, 2, 3, 4)⊛Basis(),T5)) - ((T6 * T7))) - (T8)) - (((Probe(femV(noFunc, 2, 3, 4)⊛Basis(),T13)) - ((T6 * T15))) - (T8))) * T31_{i0}))>_{2} (_t0CF4,s0D81,_t0D2F,_t0D2D,_t0D29,invertB0D22,_t0D35,e0CBA,_t0D3B,e0CBA,_t0D2F,_t0D2D,_t0D29,invertA0D18,_t0D35,s0CB9,_t0D3B,_t0D2F,_t0D2D,_t0D29,invertB0D22,_t0D35,e0CBA,_t0D3B,_t0D2F,_t0D2D,_t0D29,invertA0D18,_t0D35,s0CB9,_t0D3B,_t0CFA);
          tensor[2] invertC0DAA#3 = λ(INT0,FEM(msh)1,FEM(msh)2,T3[2])<Probe(femInvV(0A92, 0, 1, 1)_{i0}⊛Basis(),T3)>_{2} (_t0D14,_t0D10,_t0D10,midRay0DA0);
          real fmVal0DB6#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2])<Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T3)> (_t0D2F,_t0D2D,_t0D29,invertC0DAA);
          real fm0DC0#4 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[],T5[],INT6,FEM(fns)7,FEM(func)8,T9[2],T10[],T11[],T12[],T13[],INT14,FEM(fns)15,FEM(func)16,T17[2],T18[],T19[],T20[],INT21,FEM(fns)22,FEM(func)23,T24[2],T25[],T26[],T27[],INT28,FEM(fns)29,FEM(func)30,T31[2],T32[],T33[],T34[],T35[])<((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T3)) - ((T4 * (((T5 * ((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T9)) - ((T4 * T11))) - (T12))) - ((T11 * ((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T17)) - ((T4 * T19))) - (T12)))) / ( (((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T9)) - ((T4 * T11))) - (T12)) - (((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T17)) - ((T4 * T19))) - (T12)))))) - (T35)> (_t0D2F,_t0D2D,_t0D29,invertC0DAA,_t0D35,s0D81,_t0D2F,_t0D2D,_t0D29,invertB0D22,_t0D35,e0CBA,_t0D3B,e0CBA,_t0D2F,_t0D2D,_t0D29,invertA0D18,_t0D35,s0CB9,_t0D3B,_t0D2F,_t0D2D,_t0D29,invertB0D22,_t0D35,e0CBA,_t0D3B,_t0D2F,_t0D2D,_t0D29,invertA0D18,_t0D35,s0CB9,_t0D3B,_t0D3B);
          string _t0DC2#1 = "all vals:";
          tensor[3] _t0DC4#1 = <tensor[3]>[fa0D3D,fm0DC0,fb0D53];
          Print<[string,tensor[3],string]>(_t0DC2,_t0DC4,_t0CDC);
          int _t0DC9#6 = 1;
          int intersectionItter0DCB#3 = IAdd(intersectionItter0CB6,_t0DC9);
          real _t0DCE#10 = 0.e0;
          bool _t0DD0#2 = GT<real>(fa0D3D,_t0DCE);
          if _t0DD0 then goto JOIN0DD2 else goto ASSIGN0FA4
        JOIN0DD2:  preds = [COND0DE7,JOIN0DDC]
          int _t0DD6#1 = phi(_t0DC9,_t0DE0)
          bool _t0DEB#2 = GT<real>(fm0DC0,_t0DCE);
          if _t0DEB then goto JOIN0DED else goto ASSIGN0FA6
        JOIN0DED:  preds = [COND0E02,JOIN0DF7]
          int _t0DF1#1 = phi(_t0DC9,_t0DFB)
          int _t0E03#1 = IMul(_t0DD6,_t0DF1);
          int _t0E05#6 = 0;
          bool _t0E07#1 = LT<int>(_t0E03,_t0E05);
          if _t0E07 then goto JOIN0E09 else goto COND0E27
        JOIN0E09:  preds = [COND0E4F,JOIN0E49]
          real e0E0B#4 = phi(cup0D8B,e0CBA)
          real s0E4E#4 = phi(s0D81,s0E4B)
          string _t0E50#1 = "new interval:";
          tensor[2] _t0E52#1 = <tensor[2]>[s0E4E,e0E0B];
          Print<[string,tensor[2],string]>(_t0E50,_t0E52,_t0CDC);
          real _t0E57#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[],T5[],INT6,FEM(fns)7,FEM(func)8,T9[2],T10[],T11[],T12[],T13[],INT14,FEM(fns)15,FEM(func)16,T17[2],T18[],T19[],T20[],INT21,FEM(fns)22,FEM(func)23,T24[2],T25[],T26[],T27[],INT28,FEM(fns)29,FEM(func)30,T31[2],T32[],T33[],T34[],T35[])<Abs(((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T3)) - ((T4 * (((T5 * ((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T9)) - ((T4 * T11))) - (T12))) - ((T11 * ((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T17)) - ((T4 * T19))) - (T12)))) / ( (((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T9)) - ((T4 * T11))) - (T12)) - (((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T17)) - ((T4 * T19))) - (T12)))))) - (T12))> (_t0D2F,_t0D2D,_t0D29,invertC0DAA,_t0D35,s0D81,_t0D2F,_t0D2D,_t0D29,invertB0D22,_t0D35,e0CBA,_t0D3B,e0CBA,_t0D2F,_t0D2D,_t0D29,invertA0D18,_t0D35,s0CB9,_t0D3B,_t0D2F,_t0D2D,_t0D29,invertB0D22,_t0D35,e0CBA,_t0D3B,_t0D2F,_t0D2D,_t0D29,invertA0D18,_t0D35,s0CB9,_t0D3B,_t0D3B);
          bool _t0E59#2 = LT<real>(_t0E57,zeroEps0C98);
          if _t0E59 then goto ASSIGN0FAB else goto JOIN0E5B
        ASSIGN0FAB:  preds = [COND0F08]
          tensor[2] grad0E60#1 = <tensor[2]>[_t0DCE,_t0DCE];
          if _t0E59 then goto ASSIGN0FF5 else goto JOIN0E66
        ASSIGN0FF5:  preds = [COND0E83]
          tensor[2] grad0E7D#1 = λ(INT0,FEM(fns)1,FEM(func)2,INT3,FEM(msh)4,FEM(msh)5,T6[2])<Σ(i104=0..1)<((Probe(Cmp(femV(noFunc, 0, 1, 2)⊛Basis()dx_{i104})[femInvV(0A92, 3, 4, 4)_{i0}⊛Basis(){2}],T6) * (Σ(i114=0..1)<((ϵ_{ii114,ii104} * Σ(i116=0..1)<((ϵ_{ii116,ii0} * Probe(femV(0A92, 3, 4, 4)_{i116}⊛Basis()dx_{i114},T6)))>(i116=0..1)))>(i114=0..1)) / ( Σ(i112=0..1)<((Probe(femV(0A92, 3, 4, 4)_{i112}⊛Basis()dx_{'0'},T6) * Σ(i113=0..1)<((ϵ_{ii112,ii113} * Probe(femV(0A92, 3, 4, 4)_{i113}⊛Basis()dx_{'1'},T6)))>(i113=0..1)))>(i112=0..1))))>(i104=0..1)>_{2} (_t0D2F,_t0D2D,_t0D29,_t0D14,_t0D10,_t0D10,midRay0DA0);
          goto JOIN0E66
        JOIN0E66:  preds = [ASSIGN0FF5,COND0E83]
          tensor[2] grad0E7E#3 = phi(grad0E7D,grad0E60)
          real out0E81#3 = phi(fmVal0DB6,out0CBD)
          string _t0E85#1 = "Out val:";
          Print<[string,real,string]>(_t0E85,out0E81,_t0CDC);
          string _t0E8A#1 = "Grad val:";
          Print<[string,tensor[2],string]>(_t0E8A,grad0E7E,_t0CDC);
          real _t0E8F#6 = 0.1e1;
          tensor[3] mcol0E95#1 = <tensor[3]>[_t0E8F,_t0E8F,_t0E8F];
          bool _t0E97#1 = NEQ<real>(cmin0C92,cmax0C91);
          if _t0E97 then goto ASSIGN0E9B else goto JOIN0E99
        ASSIGN0E9B:  preds = [COND0EA5]
          int _t0E9A#1 = -1;
          real _t0E9C#1 = IntToReal(_t0E9A);
          real _t0EA0#1 = λ(T0[],T1[],T2[],T3[],T4[])<(T0 + (((T3) - (T2)) / ( (T4) - (T2)) * (T1) - (T0)))> (_t0E9C,_t0E8F,cmin0C92,out0E81,cmax0C91);
          tensor[3] mcol0EA2#1 = λ(V0(1)[3],H1,T2[1])<Probe(V0_{i0}⊛H1,T2)>_{3} (img0B0C,_t0B0A,_t0EA0);
          goto JOIN0E99
        JOIN0E99:  preds = [ASSIGN0FF6,COND0EA5]
          tensor[3] mcol0EA3#5 = phi(mcol0EA2,mcol0E95)
          if light0C90 then goto ASSIGN0EA8 else goto ASSIGN0EE7
        ASSIGN0EA8:  preds = [COND0EF0]
          real _t0EA7#1 = TensorIndex<tensor[2],[0]>(grad0E7E);
          real _t0EA9#1 = TensorIndex<tensor[2],[1]>(grad0E7E);
          int _t0EAB#1 = -1;
          real _t0EAD#1 = IntToReal(_t0EAB);
          tensor[3] _t0EAF#4 = <tensor[3]>[_t0EA7,_t0EA9,_t0EAD];
          real _t0EC5#1 = λ(T0[3],T1[3],T2[3])<Σ(i0=0..2)<((T0_{i0} * (1) / ( Sqrt(Σ(i1=0..2)<((T0_{i1} * T0_{i1}))>(i1=0..2))) * T2_{i0}))>(i0=0..2)> (_t0EAF,_t0EAF,L0C8A);
          real _t0EC7#1 = Max<real>(_t0DCE,_t0EC5);
          real _t0ECF#1 = λ(T0[3],T1[3],T2[3],T3[3],T4[3],T5[3],T6[3],T7[3])<Σ(i0=0..2)<((T0_{i0} * (1) / ( Sqrt(Σ(i1=0..2)<((T0_{i1} * T0_{i1}))>(i1=0..2))) * (Neg((T2_{i0} * (1) / ( Sqrt(Σ(i5=0..2)<((T2_{i5} * T2_{i5}))>(i5=0..2))))) + T4_{i0}) * (1) / ( Sqrt(Σ(i2=0..2)<(((Neg((T2_{i2} * (1) / ( Sqrt(Σ(i5=0..2)<((T2_{i5} * T2_{i5}))>(i5=0..2))))) + T4_{i2}) * (Neg((T2_{i2} * (1) / ( Sqrt(Σ(i5=0..2)<((T2_{i5} * T2_{i5}))>(i5=0..2))))) + T4_{i2})))>(i2=0..2)))))>(i0=0..2)> (_t0EAF,_t0EAF,rayVec0CB0,rayVec0CB0,L0C8A,rayVec0CB0,rayVec0CB0,L0C8A);
          real _t0ED1#1 = Max<real>(_t0DCE,_t0ECF);
          real _t0ED3#1 = MathFn<pow>(_t0ED1,phongSp0C8C);
          tensor[3] fin0ED9#3 = λ(T0[],T1[3],T2[],T3[],T4[3],T5[3],T6[3],T7[],T8[],INT9,FEM(fns)10,FEM(func)11,T12[2],T13[],T14[],T15[],T16[],INT17,FEM(fns)18,FEM(func)19,T20[2],T21[],T22[],T23[],INT24,FEM(fns)25,FEM(func)26,T27[2],T28[],T29[],T30[],INT31,FEM(fns)32,FEM(func)33,T34[2],T35[],T36[],T37[],T38[],T39[],T40[],T41[3],T42[3],T43[],T44[],INT45,FEM(fns)46,FEM(func)47,T48[2],T49[],T50[],T51[],T52[],INT53,FEM(fns)54,FEM(func)55,T56[2],T57[],T58[],T59[],INT60,FEM(fns)61,FEM(func)62,T63[2],T64[],T65[],T66[],INT67,FEM(fns)68,FEM(func)69,T70[2],T71[],T72[],T73[],T74[])<((T0 * T1_{i0}) + (T2 * T3 * T1_{i0} * (T5_{i0} + ((((((T8 * ((Probe(femV(noFunc, 9, 10, 11)⊛Basis(),T12)) - ((T13 * T14))) - (T15))) - ((T14 * ((Probe(femV(noFunc, 9, 10, 11)⊛Basis(),T20)) - ((T13 * T22))) - (T15)))) / ( (((Probe(femV(noFunc, 9, 10, 11)⊛Basis(),T12)) - ((T13 * T14))) - (T15)) - (((Probe(femV(noFunc, 9, 10, 11)⊛Basis(),T20)) - ((T13 * T22))) - (T15)))) - (T7)) / ( (T38) - (T7)) * (T6_{i0}) - (T5_{i0})))) + (T39 * T40 * (T5_{i0} + ((((((T8 * ((Probe(femV(noFunc, 9, 10, 11)⊛Basis(),T12)) - ((T13 * T14))) - (T15))) - ((T14 * ((Probe(femV(noFunc, 9, 10, 11)⊛Basis(),T20)) - ((T13 * T22))) - (T15)))) / ( (((Probe(femV(noFunc, 9, 10, 11)⊛Basis(),T12)) - ((T13 * T14))) - (T15)) - (((Probe(femV(noFunc, 9, 10, 11)⊛Basis(),T20)) - ((T13 * T22))) - (T15)))) - (T7)) / ( (T38) - (T7)) * (T6_{i0}) - (T5_{i0})))))>_{3} (phongKa0C8F,mcol0EA3,_t0EC7,phongKd0C8E,mcol0EA3,mcnear0C94,mcfar0C93,camNearVsp0CB1,s0D81,_t0D2F,_t0D2D,_t0D29,invertB0D22,_t0D35,e0CBA,_t0D3B,e0CBA,_t0D2F,_t0D2D,_t0D29,invertA0D18,_t0D35,s0CB9,_t0D3B,_t0D2F,_t0D2D,_t0D29,invertB0D22,_t0D35,e0CBA,_t0D3B,_t0D2F,_t0D2D,_t0D29,invertA0D18,_t0D35,s0CB9,_t0D3B,camFarVsp0CB2,_t0ED3,phongKs0C8D,mcnear0C94,mcfar0C93,camNearVsp0CB1,s0D81,_t0D2F,_t0D2D,_t0D29,invertB0D22,_t0D35,e0CBA,_t0D3B,e0CBA,_t0D2F,_t0D2D,_t0D29,invertA0D18,_t0D35,s0CB9,_t0D3B,_t0D2F,_t0D2D,_t0D29,invertB0D22,_t0D35,e0CBA,_t0D3B,_t0D2F,_t0D2D,_t0D29,invertA0D18,_t0D35,s0CB9,_t0D3B,camFarVsp0CB2);
          real _t0EDB#1 = TensorIndex<tensor[3],[0]>(fin0ED9);
          real _t0EDD#1 = TensorIndex<tensor[3],[1]>(fin0ED9);
          real _t0EDF#1 = TensorIndex<tensor[3],[2]>(fin0ED9);
          tensor[4] rgba0EE3#1 = <tensor[4]>[_t0EDB,_t0EDD,_t0EDF,_t0E8F];
          goto JOIN0EA6
        JOIN0EA6:  preds = [ASSIGN0FB4,ASSIGN0FB1]
          tensor[4] rgba0EE4#1 = phi(rgba0EE3,rgba0EEE)
          tensor[3] _t0EF4#1 = λ(T0[],INT1,FEM(fns)2,FEM(func)3,T4[2],T5[],T6[],T7[],T8[],INT9,FEM(fns)10,FEM(func)11,T12[2],T13[],T14[],T15[],INT16,FEM(fns)17,FEM(func)18,T19[2],T20[],T21[],T22[],INT23,FEM(fns)24,FEM(func)25,T26[2],T27[],T28[],T29[],T30[3],T31[3])<(((((T0 * ((Probe(femV(noFunc, 1, 2, 3)⊛Basis(),T4)) - ((T5 * T6))) - (T7))) - ((T6 * ((Probe(femV(noFunc, 1, 2, 3)⊛Basis(),T12)) - ((T5 * T14))) - (T7)))) / ( (((Probe(femV(noFunc, 1, 2, 3)⊛Basis(),T4)) - ((T5 * T6))) - (T7)) - (((Probe(femV(noFunc, 1, 2, 3)⊛Basis(),T12)) - ((T5 * T14))) - (T7))) * T30_{i0}) + T31_{i0})>_{3} (s0D81,_t0D2F,_t0D2D,_t0D29,invertB0D22,_t0D35,e0CBA,_t0D3B,e0CBA,_t0D2F,_t0D2D,_t0D29,invertA0D18,_t0D35,s0CB9,_t0D3B,_t0D2F,_t0D2D,_t0D29,invertB0D22,_t0D35,e0CBA,_t0D3B,_t0D2F,_t0D2D,_t0D29,invertA0D18,_t0D35,s0CB9,_t0D3B,rayVec0CB0,rayOrig0CAF);
          tensor[3][1] _t0EF6#1 = <tensor[3][1]>{_t0EF4};
          tensor[3][] _t0EF8#1 = MkDynamic<tensor[3],1>(_t0EF6);
          self.intersectionItter = intersectionItter0DCB;
          self.s = s0E4E;
          self.e = e0E0B;
          self.out = out0E81;
          self.rgba = rgba0EE4;
          self.locs = _t0EF8;
          stabilize
          goto JOIN0E5B
        JOIN0E5B:  preds = [*STABILIZE0EFD,COND0F08]
          tensor[3][] locs0EFB#3 = phi(locs0CBF)
          tensor[4] rgba0EF1#3 = phi(rgba0CBE)
          real out0E84#3 = phi(out0CBD)
          int _t0F09#1 = 32;
          bool _t0F0B#1 = GT<int>(intersectionItter0DCB,_t0F09);
          if _t0F0B then goto ASSIGN0FB6 else goto ASSIGN0F56
        ASSIGN0FB6:  preds = [COND0F58]
          int itter0F13#4 = IAdd(itter0CB5,_t0DC9);
          bool _t0F16#1 = GTE<int>(itter0F13,len0CB4);
          if _t0F16 then goto ASSIGN0F1A else goto JOIN0F18
        ASSIGN0F1A:  preds = [COND0F2A]
          string _t0F19#1 = "No intersection found\n";
          Print<[string]>(_t0F19);
          string _t0F1C#1 = "Fin pixel=============================\n";
          Print<[string]>(_t0F1C);
          self.itter = itter0F13;
          self.intersectionItter = _t0E05;
          self.s = s0E4E;
          self.e = e0E0B;
          self.out = out0E84;
          self.rgba = rgba0EF1;
          self.locs = locs0EFB;
          stabilize
          goto JOIN0F18
        JOIN0F18:  preds = [*STABILIZE0F1F,COND0F2A]
          int _t0F2B#2 = IAdd(offset0CB3,itter0F13);
          tensor[2] interval0F2D#3 = Subscript<tensor[2][]>(times0C96,_t0F2B);
          int _t0F32#1 = Subscript<int[]>(cells0C95,_t0F2B);
          femData:MeshCell cc0F34#2 = Subscript<femData:MeshCell[]>(0cell_a0C9A,_t0F32);
          real s0F37#1 = TensorIndex<tensor[2],[0]>(interval0F2D);
          real e0F3A#1 = TensorIndex<tensor[2],[1]>(interval0F2D);
          int _t0F3E#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc0F34);
          femData:FuncCell _t0F40#1 = LoadFem<femData:FuncCell>(c0C99,_t0F3E);
          string _t0F47#1 = "++++++++++++++++Next interval!+++++++++++++++++++\n";
          Print<[string]>(_t0F47);
          self.itter = itter0F13;
          self.intersectionItter = _t0E05;
          self.interval = interval0F2D;
          self.s = s0F37;
          self.e = e0F3A;
          self.cc = cc0F34;
          self.fc = _t0F40;
          self.out = out0E84;
          self.rgba = rgba0EF1;
          self.locs = locs0EFB;
          active
          goto JOIN0F0D
        JOIN0F0D:  preds = [*ACTIVE0F4A,MASSIGN0F57]
          femData:FuncCell fc0F45#1 = phi(fc0CBC)
          femData:MeshCell cc0F35#1 = phi(cc0CBB)
          real e0F3B#1 = phi(e0E0B)
          real s0F38#1 = phi(s0E4E)
          tensor[2] interval0F2E#1 = phi(interval0CB8)
          int intersectionItter0F0F#1 = phi(intersectionItter0DCB)
          int itter0F14#1 = phi(itter0CB5)
          self.itter = itter0F14;
          self.intersectionItter = intersectionItter0F0F;
          self.interval = interval0F2E;
          self.s = s0F38;
          self.e = e0F3B;
          self.cc = cc0F35;
          self.fc = fc0F45;
          self.out = out0E84;
          self.rgba = rgba0EF1;
          self.locs = locs0EFB;
          active
        ASSIGN0F56:  preds = [COND0F58]
          string _t0F55#1 = "---------------\n";
          Print<[string]>(_t0F55);
          goto JOIN0F0D
        ASSIGN0EE7:  preds = [COND0EF0]
          real _t0EE6#1 = TensorIndex<tensor[3],[0]>(mcol0EA3);
          real _t0EE8#1 = TensorIndex<tensor[3],[1]>(mcol0EA3);
          real _t0EEA#1 = TensorIndex<tensor[3],[2]>(mcol0EA3);
          tensor[4] rgba0EEE#1 = <tensor[4]>[_t0EE6,_t0EE8,_t0EEA,_t0E8F];
          goto JOIN0EA6
        COND0E27:  preds = [COND0E4F]
          if _t0DD0 then goto JOIN0E12 else goto ASSIGN0FA7
        JOIN0E12:  preds = [COND0E27,JOIN0E1C]
          int _t0E16#1 = phi(_t0DC9,_t0E20)
          if _t0DEB then goto JOIN0E2D else goto ASSIGN0FA8
        JOIN0E2D:  preds = [COND0E42,JOIN0E37]
          int _t0E31#1 = phi(_t0DC9,_t0E3B)
          int _t0E43#1 = IMul(_t0E16,_t0E31);
          bool _t0E47#1 = GT<int>(_t0E43,_t0E05);
          if _t0E47 then goto JOIN0E49 else goto JOIN0E49
        JOIN0E49:  preds = [COND0E4D,COND0E4D]
          real s0E4B#1 = phi(cup0D8B,s0D81)
          goto JOIN0E09
        ASSIGN0FA8:  preds = [COND0E42]
          bool _t0E35#1 = LT<real>(fm0DC0,_t0DCE);
          if _t0E35 then goto ASSIGN0E39 else goto JOIN0E37
        ASSIGN0E39:  preds = [COND0E41]
          int _t0E38#1 = -1;
          goto JOIN0E37
        JOIN0E37:  preds = [ASSIGN0E39,COND0E41]
          int _t0E3B#1 = phi(_t0E38,_t0E05)
          goto JOIN0E2D
        ASSIGN0FA7:  preds = [COND0E27]
          bool _t0E1A#1 = LT<real>(fa0D3D,_t0DCE);
          if _t0E1A then goto ASSIGN0E1E else goto JOIN0E1C
        ASSIGN0E1E:  preds = [COND0E26]
          int _t0E1D#1 = -1;
          goto JOIN0E1C
        JOIN0E1C:  preds = [ASSIGN0E1E,COND0E26]
          int _t0E20#1 = phi(_t0E1D,_t0E05)
          goto JOIN0E12
        ASSIGN0FA6:  preds = [COND0E02]
          bool _t0DF5#1 = LT<real>(fm0DC0,_t0DCE);
          if _t0DF5 then goto ASSIGN0DF9 else goto ASSIGN0DFE
        ASSIGN0DF9:  preds = [COND0E01]
          int _t0DF8#1 = -1;
          goto JOIN0DF7
        JOIN0DF7:  preds = [ASSIGN0DF9,ASSIGN0DFE]
          int _t0DFB#1 = phi(_t0DF8,_t0DFD)
          goto JOIN0DED
        ASSIGN0DFE:  preds = [COND0E01]
          int _t0DFD#1 = 0;
          goto JOIN0DF7
        ASSIGN0FA4:  preds = [COND0DE7]
          bool _t0DDA#1 = LT<real>(fa0D3D,_t0DCE);
          if _t0DDA then goto ASSIGN0DDE else goto ASSIGN0DE3
        ASSIGN0DDE:  preds = [COND0DE6]
          int _t0DDD#1 = -1;
          goto JOIN0DDC
        JOIN0DDC:  preds = [ASSIGN0DDE,ASSIGN0DE3]
          int _t0DE0#1 = phi(_t0DDD,_t0DE2)
          goto JOIN0DD2
        ASSIGN0DE3:  preds = [COND0DE6]
          int _t0DE2#1 = 0;
          goto JOIN0DDC
    end update
  end ray
## initial strand creation
  GRID(2)
    ENTRY0B37:  preds = []
      int iresU0B1D#1 = globals.iresU097B;
      int iresV0B1C#1 = globals.iresV097C;
      int _t0B20#2 = 0;
      int _t0B22#2 = 1;
      int _t0B24#1 = ISub(iresU0B1D,_t0B22);
      int[] _t0B26#1 = Range(_t0B20,_t0B24);
    FOREACH0B29:  preds = [ASSIGN0B27,NEXT0B36]
      foreach (vi0B28 in _t0B26) on exit goto RETURN0B38
      int _t0B2E#1 = ISub(iresV0B1C,_t0B22);
      int[] _t0B30#1 = Range(_t0B20,_t0B2E);
    FOREACH0B33:  preds = [ASSIGN0F66,NEXT0B35]
      foreach (ui0B32 in _t0B30) on exit goto NEXT0B36
      new ray(ui0B32,vi0B28);
      goto FOREACH0B33
    NEXT0B36:  preds = [FOREACH0B33]
      goto FOREACH0B29
    RETURN0B38:  preds = [FOREACH0B29]
      return
#### end program ####
promote img0B0C --> globals.img1007
promote _t0B0A --> globals._t100A
##### high-ir: after normalization promotion ####
## properties
  GlobalInit StrandArray HasStartMethod ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[]) HasInputs HasGlobals
## globals
  input isoval0975 (isoval) = <default>
  input thick0976 (thick) = <default>
  input camEye0977 (camEye) = <default>
  input camAt0978 (camAt) = <default>
  input camUp0979 (camUp) = <default>
  input camFOV097A (camFOV) = <default>
  input iresU097B (iresU) = <default>
  input iresV097C (iresV) = <default>
  input camNear097D (camNear) = <default>
  input camFar097E (camFar) = <default>
  input refStep097F (refStep) = <default>
  input rayStep0980 (rayStep) = <default>
  input a0981 (a) = <no-default>
  input 0b046F_intermedateGlobal0982 (b) = <no-default>
  input 0c0471_intermedateGlobal0983 (c) = <no-default>
  input zeroEps0984 (zeroEps) = <default>
  input intervalEps0985 (intervalEps) = <default>
  input indecies0986 (indecies) = <no-default>
  input times0987 (times) = <no-default>
  input cells0988 (cells) = <no-default>
  input mcnear0989 (mcnear) = <default>
  input mcfar098A (mcfar) = <default>
  input cmap098B (cmap) = image("/home/teocollin/gitcode/diderot/tests/lipRay/find/cmap.nrrd")
  input cmin098C (cmin) = <default>
  input cmax098D (cmax) = <default>
  input light098E (light) = <default>
  input phongKa098F (phongKa) = <default>
  input phongKd0990 (phongKd) = <default>
  input phongKs0991 (phongKs) = <default>
  input phongSp0992 (phongSp) = <default>
  input maxAlpha0993 (maxAlpha) = <default>
  input lightVsp0994 (lightVsp) = <default>
  input debug0995 (debug) = <default>
  input debugU0996 (debugU) = <default>
  input debugV0997 (debugV) = <default>
  global femData:MeshCell[] 0cell_a0A12
  global femData:FemFunc c0A14
  global real camNearVsp0A16
  global real camFarVsp0A17
  global tensor[3] camN0A18
  global tensor[3] camU0A19
  global tensor[3] camV0A1A
  global real camVmax0A1B
  global real camUmax0A1C
  global tensor[3] L0A1E
  global image(IMAGE1D<double[3]>) img1007
  global kernel _t100A
## functions
  function femData:MeshPos _msh_newtonInverse0A92 (tensor[2] pos0A1F#6, int cellInt0A20#11, femData:Mesh mesh0A21#23) {
    ENTRY0A91:  preds = []
      real _t0A22#2 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
      tensor[2] xn0A26#6 = <tensor[2]>[_t0A22,_t0A22];
      int _t0A36#1 = 0;
      int _t0A38#1 = 16;
      int[] _t0A3A#1 = Range(_t0A36,_t0A38);
    FOREACH0A3E:  preds = [ASSIGN0A3B,NEXT0A8D]
      foreach (itter0A3C in _t0A3A) on exit goto ASSIGN0A8F
        tensor[2] xn0A3D#8 = phi(xn0A26,xn0A47)
      tensor[2] xn0A47#2 = λ(T0[2],INT1,FEM(msh)2,FEM(msh)3,T4[2],T5[2],INT6,FEM(msh)7,FEM(msh)8,T9[2])<(T0_{i0}) - (Σ(i3=0..1)<(((Σ(i10=0..1)<((ϵ_{ii10,ii0} * Σ(i12=0..1)<((ϵ_{ii12,ii3} * Probe(femV(noFunc, 1, 2, 2)_{i12}⊛Basis()dx_{i10},T4)))>(i12=0..1)))>(i10=0..1)) / ( Σ(i8=0..1)<((Probe(femV(noFunc, 1, 2, 2)_{i8}⊛Basis()dx_{'0'},T4) * Σ(i9=0..1)<((ϵ_{ii8,ii9} * Probe(femV(noFunc, 1, 2, 2)_{i9}⊛Basis()dx_{'1'},T4)))>(i9=0..1)))>(i8=0..1)) * (Probe(femV(noFunc, 1, 2, 2)_{i3}⊛Basis(),T0)) - (T5_{i3})))>(i3=0..1))>_{2} (xn0A3D,cellInt0A20,mesh0A21,mesh0A21,xn0A26,pos0A1F,cellInt0A20,mesh0A21,mesh0A21,xn0A3D);
      real _t0A49#2 = 0.1e-7;
      real _t0A4D#1 = λ(T0[],T1[])<(T0 * T1)> (_t0A49,_t0A49);
      real _t0A4F#1 = λ(INT0,FEM(msh)1,FEM(msh)2,T3[2],T4[2],INT5,FEM(msh)6,FEM(msh)7,T8[2],INT9,FEM(msh)10,FEM(msh)11,T12[2],T13[2],INT14,FEM(msh)15,FEM(msh)16,T17[2])<Σ(i0=0..1)<((Σ(i2=0..1)<(((Σ(i9=0..1)<((ϵ_{ii9,ii0} * Σ(i11=0..1)<((ϵ_{ii11,ii2} * Probe(femV(noFunc, 0, 1, 1)_{i11}⊛Basis()dx_{i9},T3)))>(i11=0..1)))>(i9=0..1)) / ( Σ(i7=0..1)<((Probe(femV(noFunc, 0, 1, 1)_{i7}⊛Basis()dx_{'0'},T3) * Σ(i8=0..1)<((ϵ_{ii7,ii8} * Probe(femV(noFunc, 0, 1, 1)_{i8}⊛Basis()dx_{'1'},T3)))>(i8=0..1)))>(i7=0..1)) * (Probe(femV(noFunc, 0, 1, 1)_{i2}⊛Basis(),T8)) - (T4_{i2})))>(i2=0..1) * Σ(i10=0..1)<(((Σ(i17=0..1)<((ϵ_{ii17,ii0} * Σ(i19=0..1)<((ϵ_{ii19,ii10} * Probe(femV(noFunc, 0, 1, 1)_{i19}⊛Basis()dx_{i17},T3)))>(i19=0..1)))>(i17=0..1)) / ( Σ(i15=0..1)<((Probe(femV(noFunc, 0, 1, 1)_{i15}⊛Basis()dx_{'0'},T3) * Σ(i16=0..1)<((ϵ_{ii15,ii16} * Probe(femV(noFunc, 0, 1, 1)_{i16}⊛Basis()dx_{'1'},T3)))>(i16=0..1)))>(i15=0..1)) * (Probe(femV(noFunc, 0, 1, 1)_{i10}⊛Basis(),T8)) - (T4_{i10})))>(i10=0..1)))>(i0=0..1)> (cellInt0A20,mesh0A21,mesh0A21,xn0A26,pos0A1F,cellInt0A20,mesh0A21,mesh0A21,xn0A3D,cellInt0A20,mesh0A21,mesh0A21,xn0A26,pos0A1F,cellInt0A20,mesh0A21,mesh0A21,xn0A3D);
      bool _t0A51#1 = GTE<real>(_t0A4D,_t0A4F);
      if _t0A51 then goto ASSIGN0A55 else goto JOIN0A53
    ASSIGN0A55:  preds = [COND0A8C]
      real _t0A54#3 = 0.1e1;
      real _t0A56#3 = 0.1e-8;
      real _t0A58#1 = λ(T0[],T1[])<(T0 + T1)> (_t0A54,_t0A56);
      tensor[2] _t0A5E#1 = <tensor[2]>[_t0A54,_t0A54];
      real _t0A60#1 = λ(T0[2],T1[2],INT2,FEM(msh)3,FEM(msh)4,T5[2],T6[2],INT7,FEM(msh)8,FEM(msh)9,T10[2])<Σ(i0=0..1)<((T0_{i0} * (T1_{i0}) - (Σ(i3=0..1)<(((Σ(i10=0..1)<((ϵ_{ii10,ii0} * Σ(i12=0..1)<((ϵ_{ii12,ii3} * Probe(femV(noFunc, 2, 3, 3)_{i12}⊛Basis()dx_{i10},T5)))>(i12=0..1)))>(i10=0..1)) / ( Σ(i8=0..1)<((Probe(femV(noFunc, 2, 3, 3)_{i8}⊛Basis()dx_{'0'},T5) * Σ(i9=0..1)<((ϵ_{ii8,ii9} * Probe(femV(noFunc, 2, 3, 3)_{i9}⊛Basis()dx_{'1'},T5)))>(i9=0..1)))>(i8=0..1)) * (Probe(femV(noFunc, 2, 3, 3)_{i3}⊛Basis(),T1)) - (T6_{i3})))>(i3=0..1))))>(i0=0..1)> (_t0A5E,xn0A3D,cellInt0A20,mesh0A21,mesh0A21,xn0A26,pos0A1F,cellInt0A20,mesh0A21,mesh0A21,xn0A3D);
      bool _t0A62#1 = GT<real>(_t0A58,_t0A60);
      tensor[2] _t0A68#1 = <tensor[2]>[_t0A56,_t0A56];
      tensor[2] _t0A6A#2 = λ(T0[2],T1[2],INT2,FEM(msh)3,FEM(msh)4,T5[2],T6[2],INT7,FEM(msh)8,FEM(msh)9,T10[2])<(T0_{i0} + (T1_{i0}) - (Σ(i4=0..1)<(((Σ(i11=0..1)<((ϵ_{ii11,ii0} * Σ(i13=0..1)<((ϵ_{ii13,ii4} * Probe(femV(noFunc, 2, 3, 3)_{i13}⊛Basis()dx_{i11},T5)))>(i13=0..1)))>(i11=0..1)) / ( Σ(i9=0..1)<((Probe(femV(noFunc, 2, 3, 3)_{i9}⊛Basis()dx_{'0'},T5) * Σ(i10=0..1)<((ϵ_{ii9,ii10} * Probe(femV(noFunc, 2, 3, 3)_{i10}⊛Basis()dx_{'1'},T5)))>(i10=0..1)))>(i9=0..1)) * (Probe(femV(noFunc, 2, 3, 3)_{i4}⊛Basis(),T1)) - (T6_{i4})))>(i4=0..1)))>_{2} (_t0A68,xn0A3D,cellInt0A20,mesh0A21,mesh0A21,xn0A26,pos0A1F,cellInt0A20,mesh0A21,mesh0A21,xn0A3D);
      real _t0A6C#1 = TensorIndex<tensor[2],[0]>(_t0A6A);
      real _t0A6E#2 = -0.e0;
      bool _t0A70#1 = GT<real>(_t0A6C,_t0A6E);
      real _t0A7A#1 = TensorIndex<tensor[2],[1]>(_t0A6A);
      bool _t0A7E#1 = GT<real>(_t0A7A,_t0A6E);
      bool _t0A80#1 = BAnd(_t0A70,_t0A7E);
      bool _t0A82#1 = BAnd(_t0A62,_t0A80);
      if _t0A82 then goto ASSIGN0A86 else goto ASSIGN0A89
    ASSIGN0A86:  preds = [COND0A8B]
      femData:MeshPos _t0A85#1 = ExtractFemItemN<[femData:Mesh,int,tensor[2],tensor[2]],femData:MeshPos,AllBuild(MeshPos),0000,"",[],int>(mesh0A21,cellInt0A20,xn0A47,pos0A1F);
      return _t0A85
      goto JOIN0A84
    JOIN0A84:  preds = [*RETURN(_t0A85)0A87,*RETURN(_t0A88)0A8A]
      goto JOIN0A53
    JOIN0A53:  preds = [*JOIN0A84,COND0A8C]
      goto FOREACH0A3E
    ASSIGN0A89:  preds = [COND0A8B]
      femData:MeshPos _t0A88#1 = ExtractFemItemN<[femData:Mesh],femData:MeshPos,InvalidBuild(MeshPos),0000,"",[],int>(mesh0A21);
      return _t0A88
      goto JOIN0A84
    ASSIGN0A8F:  preds = [FOREACH0A3E]
      femData:MeshPos _t0A8E#1 = ExtractFemItemN<[femData:Mesh],femData:MeshPos,InvalidBuild(MeshPos),0000,"",[],int>(mesh0A21);
      return _t0A8E
}
  function int[2] nextCell40AA4 (int faceIdx0A93#1, int cell0A94#1, femData:Mesh mesh0A95#1) {
    ENTRY0AA3:  preds = []
      int _t0A96#1 = 6;
      int _t0A98#1 = IMul(cell0A94,_t0A96);
      int _t0A9A#1 = 2;
      int _t0A9C#1 = IMul(faceIdx0A93,_t0A9A);
      int _t0A9E#1 = IAdd(_t0A98,_t0A9C);
      int[2] _t0AA0#1 = ExtractFemItemN<[femData:Mesh,int],int[2],CellFaceCell(Mesh),0000,"",[],int>(mesh0A95,_t0A9E);
      return _t0AA0
}
## input initialization
  ENTRY0A10:  preds = []
    real isoval0998#1 = 0.2e0;
    globals.isoval0975 = isoval0998;
    real thick099B#1 = 0.7e-1;
    globals.thick0976 = thick099B;
    real _t099E#2 = 0.3e1;
    real _t09A0#1 = -0.3e1;
    tensor[3] camEye09A4#1 = <tensor[3]>[_t099E,_t09A0,_t099E];
    globals.camEye0977 = camEye09A4;
    real _t09A7#5 = 0.5e0;
    tensor[3] camAt09AD#1 = <tensor[3]>[_t09A7,_t09A7,_t09A7];
    globals.camAt0978 = camAt09AD;
    real _t09B0#5 = 0.e0;
    real _t09B4#7 = 0.1e1;
    tensor[3] camUp09B6#1 = <tensor[3]>[_t09B0,_t09B0,_t09B4];
    globals.camUp0979 = camUp09B6;
    real camFOV09B9#1 = 0.137e2;
    globals.camFOV097A = camFOV09B9;
    int iresU09BC#2 = 10;
    globals.iresU097B = iresU09BC;
    globals.iresV097C = iresU09BC;
    real camNear09C2#1 = -0.2e1;
    globals.camNear097D = camNear09C2;
    real camFar09C5#1 = 0.5e1;
    globals.camFar097E = camFar09C5;
    globals.refStep097F = _t09B4;
    real rayStep09CB#1 = 0.1e-1;
    globals.rayStep0980 = rayStep09CB;
    real zeroEps09CE#2 = 0.1e-10;
    globals.zeroEps0984 = zeroEps09CE;
    globals.intervalEps0985 = zeroEps09CE;
    tensor[3] mcnear09DA#2 = <tensor[3]>[_t09B4,_t09B4,_t09B4];
    globals.mcnear0989 = mcnear09DA;
    globals.mcfar098A = mcnear09DA;
    globals.cmin098C = _t09B0;
    globals.cmax098D = _t09B4;
    bool light09EC#2 = false;
    globals.light098E = light09EC;
    globals.phongKa098F = _t09A7;
    globals.phongKd0990 = _t09A7;
    globals.phongKs0991 = _t09B0;
    real phongSp09F8#1 = 0.6e2;
    globals.phongSp0992 = phongSp09F8;
    globals.maxAlpha0993 = _t09B4;
    real _t0A00#1 = 0.369e1;
    real _t0A02#1 = 0.153e1;
    tensor[3] lightVsp0A04#1 = <tensor[3]>[_t09B0,_t0A00,_t0A02];
    globals.lightVsp0994 = lightVsp0A04;
    globals.debug0995 = light09EC;
    int debugU0A0A#1 = 8;
    globals.debugU0996 = debugU0A0A;
    int debugV0A0D#1 = 2;
    globals.debugV0997 = debugV0A0D;
    return
## global-variable initialization
  ENTRY0B1A:  preds = []
    tensor[3] camEye0AB1#16 = globals.camEye0977;
    tensor[3] camAt0AB0#16 = globals.camAt0978;
    tensor[3] camUp0AAF#4 = globals.camUp0979;
    real camFOV0AAE#2 = globals.camFOV097A;
    int iresU0AAD#1 = globals.iresU097B;
    int iresV0AAC#1 = globals.iresV097C;
    real camNear0AAB#1 = globals.camNear097D;
    real camFar0AAA#1 = globals.camFar097E;
    femData:Mesh a0AA9#3 = globals.a0981;
    femData:Space 0b046F_intermedateGlobal0AA8#1 = globals.0b046F_intermedateGlobal0982;
    femData:FemFunc 0c0471_intermedateGlobal0AA7#1 = globals.0c0471_intermedateGlobal0983;
    image(IMAGE1D<double[3]>) cmap0AA6#1 = globals.cmap098B;
    tensor[3] lightVsp0AA5#2 = globals.lightVsp0994;
    int _t0ABF#1 = 0;
    int _t0AC1#1 = 1;
    int _t0AC3#1 = ExtractFemItem<int,NumCell(Mesh)>(a0AA9);
    int _t0AC5#1 = ISub(_t0AC3,_t0AC1);
    int[] _t0AC7#1 = Range(_t0ABF,_t0AC5);
    femData:MeshCell[] _t0AC9#1 = <femData:MeshCell[]>{};
  FOREACH0ACD:  preds = [ASSIGN0ACA,NEXT0AD2]
    foreach (_t0ACB in _t0AC7) on exit goto GASSIGN0F7F
      femData:MeshCell[] _t0ACC#2 = phi(_t0AC9,_t0AD0)
    femData:MeshCell _t0ACE#1 = LoadFem<femData:MeshCell>(a0AA9,_t0ACB);
    femData:MeshCell[] _t0AD0#1 = Append<femData:MeshCell>(_t0ACC,_t0ACE);
    goto FOREACH0ACD
  GASSIGN0F7F:  preds = [FOREACH0ACD]
    globals.0cell_a0A12 = _t0ACC;
    femData:Space b0AD6#1 = LoadFem<femData:Space>(0b046F_intermedateGlobal0AA8,a0AA9);
    femData:FemFunc c0AD9#1 = LoadFem<femData:FemFunc>(0c0471_intermedateGlobal0AA7,b0AD6);
    globals.c0A14 = c0AD9;
    real camNearVsp0AE1#1 = λ(T0[],T1[3],T2[3])<(T0 + Sqrt(Σ(i0=0..2)<(((T1_{i0}) - (T2_{i0}) * (T1_{i0}) - (T2_{i0})))>(i0=0..2)))> (camNear0AAB,camAt0AB0,camEye0AB1);
    globals.camNearVsp0A16 = camNearVsp0AE1;
    real camFarVsp0AE4#1 = λ(T0[],T1[3],T2[3])<(T0 + Sqrt(Σ(i0=0..2)<(((T1_{i0}) - (T2_{i0}) * (T1_{i0}) - (T2_{i0})))>(i0=0..2)))> (camFar0AAA,camAt0AB0,camEye0AB1);
    globals.camFarVsp0A17 = camFarVsp0AE4;
    tensor[3] camN0AE9#2 = λ(T0[3],T1[3],T2[3],T3[3])<((T0_{i0}) - (T1_{i0}) * (1) / ( Sqrt(Σ(i1=0..2)<(((T0_{i1}) - (T1_{i1}) * (T0_{i1}) - (T1_{i1})))>(i1=0..2))))>_{3} (camAt0AB0,camEye0AB1,camAt0AB0,camEye0AB1);
    globals.camN0A18 = camN0AE9;
    tensor[3] camU0AEE#2 = λ(T0[3],T1[3],T2[3],T3[3],T4[3],T5[3],T6[3],T7[3],T8[3],T9[3])<(Σ(i2=0..2)(i3=0..2)<((ϵ_{ii0,ii2,ii3} * (T0_{i2}) - (T1_{i2}) * (1) / ( Sqrt(Σ(i4=0..2)<(((T0_{i4}) - (T1_{i4}) * (T0_{i4}) - (T1_{i4})))>(i4=0..2))) * T4_{i3}))>(i2=0..2)(i3=0..2) * (1) / ( Sqrt(Σ(i1=0..2)<((Σ(i2=0..2)(i3=0..2)<((ϵ_{ii1,ii2,ii3} * (T0_{i2}) - (T1_{i2}) * (1) / ( Sqrt(Σ(i4=0..2)<(((T0_{i4}) - (T1_{i4}) * (T0_{i4}) - (T1_{i4})))>(i4=0..2))) * T4_{i3}))>(i2=0..2)(i3=0..2) * Σ(i2=0..2)(i3=0..2)<((ϵ_{ii1,ii2,ii3} * (T0_{i2}) - (T1_{i2}) * (1) / ( Sqrt(Σ(i4=0..2)<(((T0_{i4}) - (T1_{i4}) * (T0_{i4}) - (T1_{i4})))>(i4=0..2))) * T4_{i3}))>(i2=0..2)(i3=0..2)))>(i1=0..2))))>_{3} (camAt0AB0,camEye0AB1,camAt0AB0,camEye0AB1,camUp0AAF,camAt0AB0,camEye0AB1,camAt0AB0,camEye0AB1,camUp0AAF);
    globals.camU0A19 = camU0AEE;
    tensor[3] camV0AF1#2 = λ(T0[3],T1[3],T2[3],T3[3],T4[3],T5[3],T6[3],T7[3],T8[3],T9[3],T10[3],T11[3],T12[3],T13[3])<Σ(i1=0..2)(i2=0..2)<((ϵ_{ii0,ii1,ii2} * Σ(i4=0..2)(i5=0..2)<((ϵ_{ii1,ii4,ii5} * (T0_{i4}) - (T1_{i4}) * (1) / ( Sqrt(Σ(i6=0..2)<(((T0_{i6}) - (T1_{i6}) * (T0_{i6}) - (T1_{i6})))>(i6=0..2))) * T4_{i5}))>(i4=0..2)(i5=0..2) * (1) / ( Sqrt(Σ(i3=0..2)<((Σ(i4=0..2)(i5=0..2)<((ϵ_{ii3,ii4,ii5} * (T0_{i4}) - (T1_{i4}) * (1) / ( Sqrt(Σ(i6=0..2)<(((T0_{i6}) - (T1_{i6}) * (T0_{i6}) - (T1_{i6})))>(i6=0..2))) * T4_{i5}))>(i4=0..2)(i5=0..2) * Σ(i4=0..2)(i5=0..2)<((ϵ_{ii3,ii4,ii5} * (T0_{i4}) - (T1_{i4}) * (1) / ( Sqrt(Σ(i6=0..2)<(((T0_{i6}) - (T1_{i6}) * (T0_{i6}) - (T1_{i6})))>(i6=0..2))) * T4_{i5}))>(i4=0..2)(i5=0..2)))>(i3=0..2))) * (T0_{i2}) - (T1_{i2}) * (1) / ( Sqrt(Σ(i7=0..2)<(((T0_{i7}) - (T1_{i7}) * (T0_{i7}) - (T1_{i7})))>(i7=0..2)))))>(i1=0..2)(i2=0..2)>_{3} (camAt0AB0,camEye0AB1,camAt0AB0,camEye0AB1,camUp0AAF,camAt0AB0,camEye0AB1,camAt0AB0,camEye0AB1,camUp0AAF,camAt0AB0,camEye0AB1,camAt0AB0,camEye0AB1);
    globals.camV0A1A = camV0AF1;
    real _t0AF4#2 = 0.314159265358979323846264338327950288e1;
    real _t0AF8#2 = 0.36e3;
    real camVmax0AFE#1 = λ(T0[],T1[],T2[],T3[3],T4[3])<(Tangent(((T0 * T1)) / ( T2)) * Sqrt(Σ(i0=0..2)<(((T3_{i0}) - (T4_{i0}) * (T3_{i0}) - (T4_{i0})))>(i0=0..2)))> (camFOV0AAE,_t0AF4,_t0AF8,camAt0AB0,camEye0AB1);
    globals.camVmax0A1B = camVmax0AFE;
    real _t0B01#1 = IntToReal(iresU0AAD);
    real _t0B05#1 = IntToReal(iresV0AAC);
    real camUmax0B07#1 = λ(T0[],T1[],T2[],T3[3],T4[3],T5[],T6[])<((T5 * Tangent(((T0 * T1)) / ( T2)) * Sqrt(Σ(i0=0..2)<(((T3_{i0}) - (T4_{i0}) * (T3_{i0}) - (T4_{i0})))>(i0=0..2)))) / ( T6)> (camFOV0AAE,_t0AF4,_t0AF8,camAt0AB0,camEye0AB1,_t0B01,_t0B05);
    globals.camUmax0A1C = camUmax0B07;
    kernel _t0B0A#1 = Kernel<tent,0>;
    image(IMAGE1D<double[3]>) img0B0C#1 = BorderCtlClamp<IMAGE1D<double[3]>>(cmap0AA6);
    tensor[3,3] _t0B11#1 = <tensor[3,3]>[camU0AEE,camV0AF1,camN0AE9];
    tensor[3] L0B17#1 = λ(T0[3 3],T1[3],T2[3])<Σ(i1=0..2)<((T0_{i1,i0} * T1_{i1} * (1) / ( Sqrt(Σ(i2=0..2)<((T1_{i2} * T1_{i2}))>(i2=0..2)))))>(i1=0..2)>_{3} (_t0B11,lightVsp0AA5,lightVsp0AA5);
    globals.L0A1E = L0B17;
    globals.img1007 = img0B0C;
    globals._t100A = _t0B0A;
    return
## strand
  strand ray (int ui0B39#3, int vi0B3A#4)
    state:
      real rayU;
      real rayV;
      tensor[3] UV;
      tensor[3] rayOrig;
      tensor[3] rayVec;
      real camNearVsp;
      real camFarVsp;
      int offset;
      int len;
      int itter;
      int intersectionItter;
      int idx;
      tensor[2] interval;
      real s;
      real e;
      femData:MeshCell cc;
      femData:FuncCell fc;
      output real out;
      output tensor[4] rgba;
      output tensor[3][] locs;
      int ui;
      int vi;
    state init
      ENTRY0BF4:  preds = []
        tensor[3] camEye0B5E#1 = globals.camEye0977;
        int iresU0B5D#2 = globals.iresU097B;
        int iresV0B5C#3 = globals.iresV097C;
        femData:MeshCell[] 0cell_a0B5B#1 = globals.0cell_a0A12;
        femData:FemFunc c0B5A#1 = globals.c0A14;
        int[] indecies0B59#2 = globals.indecies0986;
        tensor[2][] times0B58#1 = globals.times0987;
        real camNearVsp0B57#1 = globals.camNearVsp0A16;
        real camFarVsp0B56#1 = globals.camFarVsp0A17;
        tensor[3] camN0B55#1 = globals.camN0A18;
        tensor[3] camU0B54#2 = globals.camU0A19;
        tensor[3] camV0B53#2 = globals.camV0A1A;
        real camVmax0B52#6 = globals.camVmax0A1B;
        real camUmax0B51#6 = globals.camUmax0A1C;
        real _t0B85#6 = -0.5e0;
        real _t0B87#3 = IntToReal(ui0B39);
        real _t0B89#3 = IntToReal(iresU0B5D);
        real _t0B8B#6 = 0.5e0;
        real rayU0B8F#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[])<(Neg(T0) + (((T3) - (T2)) / ( ((T4) - (T5)) - (T2)) * (T1) - (Neg(T0))))> (camUmax0B51,camUmax0B51,_t0B85,_t0B87,_t0B89,_t0B8B);
        real _t0B95#3 = IntToReal(vi0B3A);
        real _t0B97#3 = IntToReal(iresV0B5C);
        real rayV0B9D#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[])<(Neg(T0) + (((T3) - (T2)) / ( ((T4) - (T5)) - (T2)) * (T1) - (Neg(T0))))> (camVmax0B52,camVmax0B52,_t0B85,_t0B95,_t0B97,_t0B8B);
        tensor[3] UV0BA3#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[3],T7[],T8[],T9[],T10[],T11[],T12[],T13[3])<(((Neg(T0) + (((T3) - (T2)) / ( ((T4) - (T5)) - (T2)) * (T0) - (Neg(T0)))) * T6_{i0}) + ((Neg(T7) + (((T10) - (T2)) / ( ((T11) - (T5)) - (T2)) * (T7) - (Neg(T7)))) * T13_{i0}))>_{3} (camUmax0B51,camUmax0B51,_t0B85,_t0B87,_t0B89,_t0B8B,camU0B54,camVmax0B52,camVmax0B52,_t0B85,_t0B95,_t0B97,_t0B8B,camV0B53);
        tensor[3] rayOrig0BA5#1 = λ(T0[3],T1[],T2[],T3[],T4[],T5[],T6[],T7[3],T8[],T9[],T10[],T11[],T12[],T13[],T14[3])<(T0_{i0} + ((Neg(T1) + (((T4) - (T3)) / ( ((T5) - (T6)) - (T3)) * (T1) - (Neg(T1)))) * T7_{i0}) + ((Neg(T8) + (((T11) - (T3)) / ( ((T12) - (T6)) - (T3)) * (T8) - (Neg(T8)))) * T14_{i0}))>_{3} (camEye0B5E,camUmax0B51,camUmax0B51,_t0B85,_t0B87,_t0B89,_t0B8B,camU0B54,camVmax0B52,camVmax0B52,_t0B85,_t0B95,_t0B97,_t0B8B,camV0B53);
        real _t0BA7#8 = 0.e0;
        tensor[3] _t0BAD#1 = <tensor[3]>[_t0BA7,_t0BA7,_t0BA7];
        tensor[3] rayVec0BAF#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (camN0B55,_t0BAD);
        int _t0BB5#2 = IMul(ui0B39,iresV0B5C);
        int _t0BB7#1 = IAdd(_t0BB5,vi0B3A);
        int offset0BB9#2 = Subscript<int[]>(indecies0B59,_t0BB7);
        int _t0BBB#1 = IMul(iresU0B5D,iresV0B5C);
        int _t0BBF#1 = IAdd(_t0BBB,_t0BB5);
        int _t0BC1#1 = IAdd(_t0BBF,vi0B3A);
        int len0BC3#1 = Subscript<int[]>(indecies0B59,_t0BC1);
        int itter0BC5#4 = 0;
        int idx0BC9#2 = IAdd(offset0BB9,itter0BC5);
        tensor[2] interval0BCB#3 = Subscript<tensor[2][]>(times0B58,idx0BC9);
        real s0BCD#1 = TensorIndex<tensor[2],[0]>(interval0BCB);
        real e0BCF#1 = TensorIndex<tensor[2],[1]>(interval0BCB);
        femData:MeshCell cc0BD3#2 = Subscript<femData:MeshCell[]>(0cell_a0B5B,itter0BC5);
        int _t0BD6#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc0BD3);
        femData:FuncCell _t0BD8#1 = LoadFem<femData:FuncCell>(c0B5A,_t0BD6);
        tensor[4] rgba0BE8#1 = <tensor[4]>[_t0BA7,_t0BA7,_t0BA7,_t0BA7];
        tensor[3][0] _t0BEA#1 = <tensor[3][0]>{};
        tensor[3][] _t0BEC#1 = MkDynamic<tensor[3],0>(_t0BEA);
        self.rayU = rayU0B8F;
        self.rayV = rayV0B9D;
        self.UV = UV0BA3;
        self.rayOrig = rayOrig0BA5;
        self.rayVec = rayVec0BAF;
        self.camNearVsp = camNearVsp0B57;
        self.camFarVsp = camFarVsp0B56;
        self.offset = offset0BB9;
        self.len = len0BC3;
        self.itter = itter0BC5;
        self.intersectionItter = itter0BC5;
        self.idx = idx0BC9;
        self.interval = interval0BCB;
        self.s = s0BCD;
        self.e = e0BCF;
        self.cc = cc0BD3;
        self.fc = _t0BD8;
        self.out = _t0BA7;
        self.rgba = rgba0BE8;
        self.locs = _t0BEC;
        self.ui = ui0B39;
        self.vi = vi0B3A;
        return
    end state init
    method start
        ENTRY0C7E:  preds = []
          femData:MeshCell[] 0cell_a0C11#1 = globals.0cell_a0A12;
          femData:FemFunc c0C10#1 = globals.c0A14;
          int[] cells0C0F#1 = globals.cells0988;
          bool debug0C0E#1 = globals.debug0995;
          int debugU0C0D#1 = globals.debugU0996;
          int debugV0C0C#1 = globals.debugV0997;
          int len0C20#1 = self.len;
          int idx0C23#1 = self.idx;
          int ui0C2C#2 = self.ui;
          int vi0C2D#2 = self.vi;
          if debug0C0E then goto ASSIGN0C46 else goto JOIN0C44
        ASSIGN0C46:  preds = [COND0C58]
          bool _t0C45#1 = NEQ<int>(ui0C2C,debugU0C0D);
          if _t0C45 then goto ASSIGN0C49 else goto JOIN0C47
        ASSIGN0C49:  preds = [COND0C57]
          bool _t0C48#1 = NEQ<int>(vi0C2D,debugV0C0C);
          if _t0C48 then goto STABILIZE0C4B else goto JOIN0C4A
        STABILIZE0C4B:  preds = [COND0C56]
          stabilize
          goto JOIN0C4A
        JOIN0C4A:  preds = [*STABILIZE0C4B,COND0C56]
          goto JOIN0C47
        JOIN0C47:  preds = [JOIN0C4A,COND0C57]
          goto JOIN0C44
        JOIN0C44:  preds = [JOIN0C47,COND0C58]
          int _t0C59#1 = 0;
          bool _t0C5B#1 = EQ<int>(len0C20,_t0C59);
          if _t0C5B then goto ASSIGN0C5F else goto JOIN0C5D
        ASSIGN0C5F:  preds = [COND0C70]
          string _t0C5E#1 = "(find:)No intersection found:";
          string _t0C60#1 = "/";
          string _t0C62#1 = "\n";
          Print<[string,int,string,int,string]>(_t0C5E,ui0C2C,_t0C60,vi0C2D,_t0C62);
          stabilize
          goto JOIN0C5D
        JOIN0C5D:  preds = [*STABILIZE0C65,COND0C70]
          int _t0C71#1 = Subscript<int[]>(cells0C0F,idx0C23);
          femData:MeshCell cc0C73#2 = Subscript<femData:MeshCell[]>(0cell_a0C11,_t0C71);
          int _t0C76#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc0C73);
          femData:FuncCell _t0C78#1 = LoadFem<femData:FuncCell>(c0C10,_t0C76);
          self.cc = cc0C73;
          self.fc = _t0C78;
          active
    end start
    method update
        ENTRY0F59:  preds = []
          image(IMAGE1D<double[3]>) img1008#1 = globals.img1007;
          kernel _t100B#1 = globals._t100A;
          femData:MeshCell[] 0cell_a0C9A#1 = globals.0cell_a0A12;
          femData:FemFunc c0C99#1 = globals.c0A14;
          real zeroEps0C98#1 = globals.zeroEps0984;
          real intervalEps0C97#4 = globals.intervalEps0985;
          tensor[2][] times0C96#1 = globals.times0987;
          int[] cells0C95#1 = globals.cells0988;
          tensor[3] mcnear0C94#2 = globals.mcnear0989;
          tensor[3] mcfar0C93#2 = globals.mcfar098A;
          real cmin0C92#2 = globals.cmin098C;
          real cmax0C91#2 = globals.cmax098D;
          bool light0C90#1 = globals.light098E;
          real phongKa0C8F#1 = globals.phongKa098F;
          real phongKd0C8E#1 = globals.phongKd0990;
          real phongKs0C8D#1 = globals.phongKs0991;
          real phongSp0C8C#1 = globals.phongSp0992;
          tensor[3] L0C8A#3 = globals.L0A1E;
          tensor[3] rayOrig0CAF#4 = self.rayOrig;
          tensor[3] rayVec0CB0#8 = self.rayVec;
          real camNearVsp0CB1#2 = self.camNearVsp;
          real camFarVsp0CB2#2 = self.camFarVsp;
          int offset0CB3#1 = self.offset;
          int len0CB4#1 = self.len;
          int itter0CB5#3 = self.itter;
          int intersectionItter0CB6#2 = self.intersectionItter;
          tensor[2] interval0CB8#1 = self.interval;
          real s0CB9#23 = self.s;
          real e0CBA#27 = self.e;
          femData:MeshCell cc0CBB#3 = self.cc;
          femData:FuncCell fc0CBC#3 = self.fc;
          real out0CBD#2 = self.out;
          tensor[4] rgba0CBE#1 = self.rgba;
          tensor[3][] locs0CBF#1 = self.locs;
          int ui0CC0#1 = self.ui;
          int vi0CC1#1 = self.vi;
          string _t0CD8#1 = "Ui/Vi::";
          string _t0CDA#1 = "/";
          string _t0CDC#11 = "\n";
          Print<[string,int,string,int,string]>(_t0CD8,ui0CC0,_t0CDA,vi0CC1,_t0CDC);
          string _t0CDF#1 = "Interval:";
          tensor[2] _t0CE1#1 = <tensor[2]>[s0CB9,e0CBA];
          Print<[string,tensor[2],string]>(_t0CDF,_t0CE1,_t0CDC);
          string _t0CE6#1 = "inner itter:";
          Print<[string,int,string]>(_t0CE6,intersectionItter0CB6,_t0CDC);
          string _t0CEB#1 = "Outer itter:";
          Print<[string,int,string]>(_t0CEB,itter0CB5,_t0CDC);
          real _t0CF0#1 = TensorIndex<tensor[3],[0]>(rayOrig0CAF);
          real _t0CF2#1 = TensorIndex<tensor[3],[1]>(rayOrig0CAF);
          tensor[2] _t0CF4#3 = <tensor[2]>[_t0CF0,_t0CF2];
          real _t0CF6#1 = TensorIndex<tensor[3],[0]>(rayVec0CB0);
          real _t0CF8#1 = TensorIndex<tensor[3],[1]>(rayVec0CB0);
          tensor[2] _t0CFA#3 = <tensor[2]>[_t0CF6,_t0CF8];
          tensor[2] startRay0CFE#1 = λ(T0[2],T1[],T2[2])<(T0_{i0} + (T1 * T2_{i0}))>_{2} (_t0CF4,s0CB9,_t0CFA);
          tensor[2] endRay0D0E#1 = λ(T0[2],T1[],T2[2])<(T0_{i0} + (T1 * T2_{i0}))>_{2} (_t0CF4,e0CBA,_t0CFA);
          femData:Mesh _t0D10#8 = ExtractFem<femData:Mesh,femData:MeshCell>(cc0CBB);
          int _t0D14#4 = ExtractFemItem<int,CellIndex(MeshCell)>(cc0CBB);
          tensor[2] invertA0D18#18 = λ(INT0,FEM(msh)1,FEM(msh)2,T3[2])<Probe(femInvV(0A92, 0, 1, 1)_{i0}⊛Basis(),T3)>_{2} (_t0D14,_t0D10,_t0D10,startRay0CFE);
          tensor[2] invertB0D22#18 = λ(INT0,FEM(msh)1,FEM(msh)2,T3[2])<Probe(femInvV(0A92, 0, 1, 1)_{i0}⊛Basis(),T3)>_{2} (_t0D14,_t0D10,_t0D10,endRay0D0E);
          string _t0D24#1 = "inverses:";
          Print<[string,tensor[2],tensor[2],string]>(_t0D24,invertA0D18,invertB0D22,_t0CDC);
          femData:FemFunc _t0D29#39 = ExtractFem<femData:FemFunc,femData:FuncCell>(fc0CBC);
          femData:Space _t0D2D#38 = ExtractFem<femData:Space,femData:FemFunc>(_t0D29);
          int _t0D2F#38 = ExtractFemItem<int,CellIndex(FuncCell)>(fc0CBC);
          real _t0D35#36 = TensorIndex<tensor[3],[2]>(rayVec0CB0);
          real _t0D3B#36 = TensorIndex<tensor[3],[2]>(rayOrig0CAF);
          real fa0D3D#5 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[],T5[],T6[])<((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T3)) - ((T4 * T5))) - (T6)> (_t0D2F,_t0D2D,_t0D29,invertA0D18,_t0D35,s0CB9,_t0D3B);
          real fb0D53#2 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[],T5[],T6[])<((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T3)) - ((T4 * T5))) - (T6)> (_t0D2F,_t0D2D,_t0D29,invertB0D22,_t0D35,e0CBA,_t0D3B);
          string _t0D55#1 = "Vals:";
          tensor[2] _t0D57#1 = <tensor[2]>[fa0D3D,fb0D53];
          Print<[string,tensor[2],string]>(_t0D55,_t0D57,_t0CDC);
          real _t0D5E#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[],T5[],T6[],INT7,FEM(fns)8,FEM(func)9,T10[2],T11[],T12[],T13[])<Abs((((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T3)) - ((T4 * T5))) - (T6)) - (((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T10)) - ((T4 * T12))) - (T6)))> (_t0D2F,_t0D2D,_t0D29,invertA0D18,_t0D35,s0CB9,_t0D3B,_t0D2F,_t0D2D,_t0D29,invertB0D22,_t0D35,e0CBA,_t0D3B);
          bool _t0D60#1 = LT<real>(_t0D5E,intervalEps0C97);
          if _t0D60 then goto ASSIGN0FE4 else goto JOIN0D62
        ASSIGN0FE4:  preds = [COND0D82]
          real _t0D63#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[],T5[],T6[])<Abs(((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T3)) - ((T4 * T5))) - (T6))> (_t0D2F,_t0D2D,_t0D29,invertA0D18,_t0D35,s0CB9,_t0D3B);
          bool _t0D65#1 = GT<real>(_t0D63,intervalEps0C97);
          if _t0D65 then goto ASSIGN0FE5 else goto JOIN0D67
        ASSIGN0FE5:  preds = [COND0D80]
          real _t0D68#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[],T5[],T6[])<Abs(((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T3)) - ((T4 * T5))) - (T6))> (_t0D2F,_t0D2D,_t0D29,invertB0D22,_t0D35,e0CBA,_t0D3B);
          bool _t0D6A#1 = GT<real>(_t0D68,intervalEps0C97);
          if _t0D6A then goto ASSIGN0D6E else goto JOIN0D6C
        ASSIGN0D6E:  preds = [COND0D7E]
          string _t0D6D#1 = "warn\n";
          Print<[string]>(_t0D6D);
          real s0D70#1 = λ(T0[],T1[])<(T0 + T1)> (s0CB9,intervalEps0C97);
          self.s = s0D70;
          active
          goto JOIN0D6C
        JOIN0D6C:  preds = [*ACTIVE0D73,COND0D7E]
          real s0D71#1 = phi(s0CB9)
          goto JOIN0D67
        JOIN0D67:  preds = [JOIN0D6C,COND0D80]
          real s0D7F#1 = phi(s0D71,s0CB9)
          goto JOIN0D62
        JOIN0D62:  preds = [JOIN0D67,COND0D82]
          real s0D81#9 = phi(s0D7F,s0CB9)
          real cup0D8B#3 = λ(T0[],INT1,FEM(fns)2,FEM(func)3,T4[2],T5[],T6[],T7[],T8[],INT9,FEM(fns)10,FEM(func)11,T12[2],T13[],T14[],T15[],INT16,FEM(fns)17,FEM(func)18,T19[2],T20[],T21[],T22[],INT23,FEM(fns)24,FEM(func)25,T26[2],T27[],T28[],T29[])<(((T0 * ((Probe(femV(noFunc, 1, 2, 3)⊛Basis(),T4)) - ((T5 * T6))) - (T7))) - ((T6 * ((Probe(femV(noFunc, 1, 2, 3)⊛Basis(),T12)) - ((T5 * T14))) - (T7)))) / ( (((Probe(femV(noFunc, 1, 2, 3)⊛Basis(),T4)) - ((T5 * T6))) - (T7)) - (((Probe(femV(noFunc, 1, 2, 3)⊛Basis(),T12)) - ((T5 * T14))) - (T7)))> (s0D81,_t0D2F,_t0D2D,_t0D29,invertB0D22,_t0D35,e0CBA,_t0D3B,e0CBA,_t0D2F,_t0D2D,_t0D29,invertA0D18,_t0D35,s0CB9,_t0D3B,_t0D2F,_t0D2D,_t0D29,invertB0D22,_t0D35,e0CBA,_t0D3B,_t0D2F,_t0D2D,_t0D29,invertA0D18,_t0D35,s0CB9,_t0D3B);
          string _t0D8D#1 = "Mid time:";
          Print<[string,real,string]>(_t0D8D,cup0D8B,_t0CDC);
          tensor[2] midRay0DA0#2 = λ(T0[2],T1[],INT2,FEM(fns)3,FEM(func)4,T5[2],T6[],T7[],T8[],T9[],INT10,FEM(fns)11,FEM(func)12,T13[2],T14[],T15[],T16[],INT17,FEM(fns)18,FEM(func)19,T20[2],T21[],T22[],T23[],INT24,FEM(fns)25,FEM(func)26,T27[2],T28[],T29[],T30[],T31[2])<(T0_{i0} + ((((T1 * ((Probe(femV(noFunc, 2, 3, 4)⊛Basis(),T5)) - ((T6 * T7))) - (T8))) - ((T7 * ((Probe(femV(noFunc, 2, 3, 4)⊛Basis(),T13)) - ((T6 * T15))) - (T8)))) / ( (((Probe(femV(noFunc, 2, 3, 4)⊛Basis(),T5)) - ((T6 * T7))) - (T8)) - (((Probe(femV(noFunc, 2, 3, 4)⊛Basis(),T13)) - ((T6 * T15))) - (T8))) * T31_{i0}))>_{2} (_t0CF4,s0D81,_t0D2F,_t0D2D,_t0D29,invertB0D22,_t0D35,e0CBA,_t0D3B,e0CBA,_t0D2F,_t0D2D,_t0D29,invertA0D18,_t0D35,s0CB9,_t0D3B,_t0D2F,_t0D2D,_t0D29,invertB0D22,_t0D35,e0CBA,_t0D3B,_t0D2F,_t0D2D,_t0D29,invertA0D18,_t0D35,s0CB9,_t0D3B,_t0CFA);
          tensor[2] invertC0DAA#3 = λ(INT0,FEM(msh)1,FEM(msh)2,T3[2])<Probe(femInvV(0A92, 0, 1, 1)_{i0}⊛Basis(),T3)>_{2} (_t0D14,_t0D10,_t0D10,midRay0DA0);
          real fmVal0DB6#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2])<Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T3)> (_t0D2F,_t0D2D,_t0D29,invertC0DAA);
          real fm0DC0#4 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[],T5[],INT6,FEM(fns)7,FEM(func)8,T9[2],T10[],T11[],T12[],T13[],INT14,FEM(fns)15,FEM(func)16,T17[2],T18[],T19[],T20[],INT21,FEM(fns)22,FEM(func)23,T24[2],T25[],T26[],T27[],INT28,FEM(fns)29,FEM(func)30,T31[2],T32[],T33[],T34[],T35[])<((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T3)) - ((T4 * (((T5 * ((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T9)) - ((T4 * T11))) - (T12))) - ((T11 * ((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T17)) - ((T4 * T19))) - (T12)))) / ( (((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T9)) - ((T4 * T11))) - (T12)) - (((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T17)) - ((T4 * T19))) - (T12)))))) - (T35)> (_t0D2F,_t0D2D,_t0D29,invertC0DAA,_t0D35,s0D81,_t0D2F,_t0D2D,_t0D29,invertB0D22,_t0D35,e0CBA,_t0D3B,e0CBA,_t0D2F,_t0D2D,_t0D29,invertA0D18,_t0D35,s0CB9,_t0D3B,_t0D2F,_t0D2D,_t0D29,invertB0D22,_t0D35,e0CBA,_t0D3B,_t0D2F,_t0D2D,_t0D29,invertA0D18,_t0D35,s0CB9,_t0D3B,_t0D3B);
          string _t0DC2#1 = "all vals:";
          tensor[3] _t0DC4#1 = <tensor[3]>[fa0D3D,fm0DC0,fb0D53];
          Print<[string,tensor[3],string]>(_t0DC2,_t0DC4,_t0CDC);
          int _t0DC9#6 = 1;
          int intersectionItter0DCB#3 = IAdd(intersectionItter0CB6,_t0DC9);
          real _t0DCE#10 = 0.e0;
          bool _t0DD0#2 = GT<real>(fa0D3D,_t0DCE);
          if _t0DD0 then goto JOIN0DD2 else goto ASSIGN0FA4
        JOIN0DD2:  preds = [COND0DE7,JOIN0DDC]
          int _t0DD6#1 = phi(_t0DC9,_t0DE0)
          bool _t0DEB#2 = GT<real>(fm0DC0,_t0DCE);
          if _t0DEB then goto JOIN0DED else goto ASSIGN0FA6
        JOIN0DED:  preds = [COND0E02,JOIN0DF7]
          int _t0DF1#1 = phi(_t0DC9,_t0DFB)
          int _t0E03#1 = IMul(_t0DD6,_t0DF1);
          int _t0E05#6 = 0;
          bool _t0E07#1 = LT<int>(_t0E03,_t0E05);
          if _t0E07 then goto JOIN0E09 else goto COND0E27
        JOIN0E09:  preds = [COND0E4F,JOIN0E49]
          real e0E0B#4 = phi(cup0D8B,e0CBA)
          real s0E4E#4 = phi(s0D81,s0E4B)
          string _t0E50#1 = "new interval:";
          tensor[2] _t0E52#1 = <tensor[2]>[s0E4E,e0E0B];
          Print<[string,tensor[2],string]>(_t0E50,_t0E52,_t0CDC);
          real _t0E57#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[],T5[],INT6,FEM(fns)7,FEM(func)8,T9[2],T10[],T11[],T12[],T13[],INT14,FEM(fns)15,FEM(func)16,T17[2],T18[],T19[],T20[],INT21,FEM(fns)22,FEM(func)23,T24[2],T25[],T26[],T27[],INT28,FEM(fns)29,FEM(func)30,T31[2],T32[],T33[],T34[],T35[])<Abs(((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T3)) - ((T4 * (((T5 * ((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T9)) - ((T4 * T11))) - (T12))) - ((T11 * ((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T17)) - ((T4 * T19))) - (T12)))) / ( (((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T9)) - ((T4 * T11))) - (T12)) - (((Probe(femV(noFunc, 0, 1, 2)⊛Basis(),T17)) - ((T4 * T19))) - (T12)))))) - (T12))> (_t0D2F,_t0D2D,_t0D29,invertC0DAA,_t0D35,s0D81,_t0D2F,_t0D2D,_t0D29,invertB0D22,_t0D35,e0CBA,_t0D3B,e0CBA,_t0D2F,_t0D2D,_t0D29,invertA0D18,_t0D35,s0CB9,_t0D3B,_t0D2F,_t0D2D,_t0D29,invertB0D22,_t0D35,e0CBA,_t0D3B,_t0D2F,_t0D2D,_t0D29,invertA0D18,_t0D35,s0CB9,_t0D3B,_t0D3B);
          bool _t0E59#2 = LT<real>(_t0E57,zeroEps0C98);
          if _t0E59 then goto ASSIGN0FAB else goto JOIN0E5B
        ASSIGN0FAB:  preds = [COND0F08]
          tensor[2] grad0E60#1 = <tensor[2]>[_t0DCE,_t0DCE];
          if _t0E59 then goto ASSIGN0FF5 else goto JOIN0E66
        ASSIGN0FF5:  preds = [COND0E83]
          tensor[2] grad0E7D#1 = λ(INT0,FEM(fns)1,FEM(func)2,INT3,FEM(msh)4,FEM(msh)5,T6[2])<Σ(i104=0..1)<((Probe(Cmp(femV(noFunc, 0, 1, 2)⊛Basis()dx_{i104})[femInvV(0A92, 3, 4, 4)_{i0}⊛Basis(){2}],T6) * (Σ(i114=0..1)<((ϵ_{ii114,ii104} * Σ(i116=0..1)<((ϵ_{ii116,ii0} * Probe(femV(0A92, 3, 4, 4)_{i116}⊛Basis()dx_{i114},T6)))>(i116=0..1)))>(i114=0..1)) / ( Σ(i112=0..1)<((Probe(femV(0A92, 3, 4, 4)_{i112}⊛Basis()dx_{'0'},T6) * Σ(i113=0..1)<((ϵ_{ii112,ii113} * Probe(femV(0A92, 3, 4, 4)_{i113}⊛Basis()dx_{'1'},T6)))>(i113=0..1)))>(i112=0..1))))>(i104=0..1)>_{2} (_t0D2F,_t0D2D,_t0D29,_t0D14,_t0D10,_t0D10,midRay0DA0);
          goto JOIN0E66
        JOIN0E66:  preds = [ASSIGN0FF5,COND0E83]
          tensor[2] grad0E7E#3 = phi(grad0E7D,grad0E60)
          real out0E81#3 = phi(fmVal0DB6,out0CBD)
          string _t0E85#1 = "Out val:";
          Print<[string,real,string]>(_t0E85,out0E81,_t0CDC);
          string _t0E8A#1 = "Grad val:";
          Print<[string,tensor[2],string]>(_t0E8A,grad0E7E,_t0CDC);
          real _t0E8F#6 = 0.1e1;
          tensor[3] mcol0E95#1 = <tensor[3]>[_t0E8F,_t0E8F,_t0E8F];
          bool _t0E97#1 = NEQ<real>(cmin0C92,cmax0C91);
          if _t0E97 then goto ASSIGN0E9B else goto JOIN0E99
        ASSIGN0E9B:  preds = [COND0EA5]
          int _t0E9A#1 = -1;
          real _t0E9C#1 = IntToReal(_t0E9A);
          real _t0EA0#1 = λ(T0[],T1[],T2[],T3[],T4[])<(T0 + (((T3) - (T2)) / ( (T4) - (T2)) * (T1) - (T0)))> (_t0E9C,_t0E8F,cmin0C92,out0E81,cmax0C91);
          tensor[3] mcol0EA2#1 = λ(V0(1)[3],H1,T2[1])<Probe(V0_{i0}⊛H1,T2)>_{3} (img1008,_t100B,_t0EA0);
          goto JOIN0E99
        JOIN0E99:  preds = [ASSIGN100C,COND0EA5]
          tensor[3] mcol0EA3#5 = phi(mcol0EA2,mcol0E95)
          if light0C90 then goto ASSIGN0EA8 else goto ASSIGN0EE7
        ASSIGN0EA8:  preds = [COND0EF0]
          real _t0EA7#1 = TensorIndex<tensor[2],[0]>(grad0E7E);
          real _t0EA9#1 = TensorIndex<tensor[2],[1]>(grad0E7E);
          int _t0EAB#1 = -1;
          real _t0EAD#1 = IntToReal(_t0EAB);
          tensor[3] _t0EAF#4 = <tensor[3]>[_t0EA7,_t0EA9,_t0EAD];
          real _t0EC5#1 = λ(T0[3],T1[3],T2[3])<Σ(i0=0..2)<((T0_{i0} * (1) / ( Sqrt(Σ(i1=0..2)<((T0_{i1} * T0_{i1}))>(i1=0..2))) * T2_{i0}))>(i0=0..2)> (_t0EAF,_t0EAF,L0C8A);
          real _t0EC7#1 = Max<real>(_t0DCE,_t0EC5);
          real _t0ECF#1 = λ(T0[3],T1[3],T2[3],T3[3],T4[3],T5[3],T6[3],T7[3])<Σ(i0=0..2)<((T0_{i0} * (1) / ( Sqrt(Σ(i1=0..2)<((T0_{i1} * T0_{i1}))>(i1=0..2))) * (Neg((T2_{i0} * (1) / ( Sqrt(Σ(i5=0..2)<((T2_{i5} * T2_{i5}))>(i5=0..2))))) + T4_{i0}) * (1) / ( Sqrt(Σ(i2=0..2)<(((Neg((T2_{i2} * (1) / ( Sqrt(Σ(i5=0..2)<((T2_{i5} * T2_{i5}))>(i5=0..2))))) + T4_{i2}) * (Neg((T2_{i2} * (1) / ( Sqrt(Σ(i5=0..2)<((T2_{i5} * T2_{i5}))>(i5=0..2))))) + T4_{i2})))>(i2=0..2)))))>(i0=0..2)> (_t0EAF,_t0EAF,rayVec0CB0,rayVec0CB0,L0C8A,rayVec0CB0,rayVec0CB0,L0C8A);
          real _t0ED1#1 = Max<real>(_t0DCE,_t0ECF);
          real _t0ED3#1 = MathFn<pow>(_t0ED1,phongSp0C8C);
          tensor[3] fin0ED9#3 = λ(T0[],T1[3],T2[],T3[],T4[3],T5[3],T6[3],T7[],T8[],INT9,FEM(fns)10,FEM(func)11,T12[2],T13[],T14[],T15[],T16[],INT17,FEM(fns)18,FEM(func)19,T20[2],T21[],T22[],T23[],INT24,FEM(fns)25,FEM(func)26,T27[2],T28[],T29[],T30[],INT31,FEM(fns)32,FEM(func)33,T34[2],T35[],T36[],T37[],T38[],T39[],T40[],T41[3],T42[3],T43[],T44[],INT45,FEM(fns)46,FEM(func)47,T48[2],T49[],T50[],T51[],T52[],INT53,FEM(fns)54,FEM(func)55,T56[2],T57[],T58[],T59[],INT60,FEM(fns)61,FEM(func)62,T63[2],T64[],T65[],T66[],INT67,FEM(fns)68,FEM(func)69,T70[2],T71[],T72[],T73[],T74[])<((T0 * T1_{i0}) + (T2 * T3 * T1_{i0} * (T5_{i0} + ((((((T8 * ((Probe(femV(noFunc, 9, 10, 11)⊛Basis(),T12)) - ((T13 * T14))) - (T15))) - ((T14 * ((Probe(femV(noFunc, 9, 10, 11)⊛Basis(),T20)) - ((T13 * T22))) - (T15)))) / ( (((Probe(femV(noFunc, 9, 10, 11)⊛Basis(),T12)) - ((T13 * T14))) - (T15)) - (((Probe(femV(noFunc, 9, 10, 11)⊛Basis(),T20)) - ((T13 * T22))) - (T15)))) - (T7)) / ( (T38) - (T7)) * (T6_{i0}) - (T5_{i0})))) + (T39 * T40 * (T5_{i0} + ((((((T8 * ((Probe(femV(noFunc, 9, 10, 11)⊛Basis(),T12)) - ((T13 * T14))) - (T15))) - ((T14 * ((Probe(femV(noFunc, 9, 10, 11)⊛Basis(),T20)) - ((T13 * T22))) - (T15)))) / ( (((Probe(femV(noFunc, 9, 10, 11)⊛Basis(),T12)) - ((T13 * T14))) - (T15)) - (((Probe(femV(noFunc, 9, 10, 11)⊛Basis(),T20)) - ((T13 * T22))) - (T15)))) - (T7)) / ( (T38) - (T7)) * (T6_{i0}) - (T5_{i0})))))>_{3} (phongKa0C8F,mcol0EA3,_t0EC7,phongKd0C8E,mcol0EA3,mcnear0C94,mcfar0C93,camNearVsp0CB1,s0D81,_t0D2F,_t0D2D,_t0D29,invertB0D22,_t0D35,e0CBA,_t0D3B,e0CBA,_t0D2F,_t0D2D,_t0D29,invertA0D18,_t0D35,s0CB9,_t0D3B,_t0D2F,_t0D2D,_t0D29,invertB0D22,_t0D35,e0CBA,_t0D3B,_t0D2F,_t0D2D,_t0D29,invertA0D18,_t0D35,s0CB9,_t0D3B,camFarVsp0CB2,_t0ED3,phongKs0C8D,mcnear0C94,mcfar0C93,camNearVsp0CB1,s0D81,_t0D2F,_t0D2D,_t0D29,invertB0D22,_t0D35,e0CBA,_t0D3B,e0CBA,_t0D2F,_t0D2D,_t0D29,invertA0D18,_t0D35,s0CB9,_t0D3B,_t0D2F,_t0D2D,_t0D29,invertB0D22,_t0D35,e0CBA,_t0D3B,_t0D2F,_t0D2D,_t0D29,invertA0D18,_t0D35,s0CB9,_t0D3B,camFarVsp0CB2);
          real _t0EDB#1 = TensorIndex<tensor[3],[0]>(fin0ED9);
          real _t0EDD#1 = TensorIndex<tensor[3],[1]>(fin0ED9);
          real _t0EDF#1 = TensorIndex<tensor[3],[2]>(fin0ED9);
          tensor[4] rgba0EE3#1 = <tensor[4]>[_t0EDB,_t0EDD,_t0EDF,_t0E8F];
          goto JOIN0EA6
        JOIN0EA6:  preds = [ASSIGN0FB4,ASSIGN0FB1]
          tensor[4] rgba0EE4#1 = phi(rgba0EE3,rgba0EEE)
          tensor[3] _t0EF4#1 = λ(T0[],INT1,FEM(fns)2,FEM(func)3,T4[2],T5[],T6[],T7[],T8[],INT9,FEM(fns)10,FEM(func)11,T12[2],T13[],T14[],T15[],INT16,FEM(fns)17,FEM(func)18,T19[2],T20[],T21[],T22[],INT23,FEM(fns)24,FEM(func)25,T26[2],T27[],T28[],T29[],T30[3],T31[3])<(((((T0 * ((Probe(femV(noFunc, 1, 2, 3)⊛Basis(),T4)) - ((T5 * T6))) - (T7))) - ((T6 * ((Probe(femV(noFunc, 1, 2, 3)⊛Basis(),T12)) - ((T5 * T14))) - (T7)))) / ( (((Probe(femV(noFunc, 1, 2, 3)⊛Basis(),T4)) - ((T5 * T6))) - (T7)) - (((Probe(femV(noFunc, 1, 2, 3)⊛Basis(),T12)) - ((T5 * T14))) - (T7))) * T30_{i0}) + T31_{i0})>_{3} (s0D81,_t0D2F,_t0D2D,_t0D29,invertB0D22,_t0D35,e0CBA,_t0D3B,e0CBA,_t0D2F,_t0D2D,_t0D29,invertA0D18,_t0D35,s0CB9,_t0D3B,_t0D2F,_t0D2D,_t0D29,invertB0D22,_t0D35,e0CBA,_t0D3B,_t0D2F,_t0D2D,_t0D29,invertA0D18,_t0D35,s0CB9,_t0D3B,rayVec0CB0,rayOrig0CAF);
          tensor[3][1] _t0EF6#1 = <tensor[3][1]>{_t0EF4};
          tensor[3][] _t0EF8#1 = MkDynamic<tensor[3],1>(_t0EF6);
          self.intersectionItter = intersectionItter0DCB;
          self.s = s0E4E;
          self.e = e0E0B;
          self.out = out0E81;
          self.rgba = rgba0EE4;
          self.locs = _t0EF8;
          stabilize
          goto JOIN0E5B
        JOIN0E5B:  preds = [*STABILIZE0EFD,COND0F08]
          tensor[3][] locs0EFB#3 = phi(locs0CBF)
          tensor[4] rgba0EF1#3 = phi(rgba0CBE)
          real out0E84#3 = phi(out0CBD)
          int _t0F09#1 = 32;
          bool _t0F0B#1 = GT<int>(intersectionItter0DCB,_t0F09);
          if _t0F0B then goto ASSIGN0FB6 else goto ASSIGN0F56
        ASSIGN0FB6:  preds = [COND0F58]
          int itter0F13#4 = IAdd(itter0CB5,_t0DC9);
          bool _t0F16#1 = GTE<int>(itter0F13,len0CB4);
          if _t0F16 then goto ASSIGN0F1A else goto JOIN0F18
        ASSIGN0F1A:  preds = [COND0F2A]
          string _t0F19#1 = "No intersection found\n";
          Print<[string]>(_t0F19);
          string _t0F1C#1 = "Fin pixel=============================\n";
          Print<[string]>(_t0F1C);
          self.itter = itter0F13;
          self.intersectionItter = _t0E05;
          self.s = s0E4E;
          self.e = e0E0B;
          self.out = out0E84;
          self.rgba = rgba0EF1;
          self.locs = locs0EFB;
          stabilize
          goto JOIN0F18
        JOIN0F18:  preds = [*STABILIZE0F1F,COND0F2A]
          int _t0F2B#2 = IAdd(offset0CB3,itter0F13);
          tensor[2] interval0F2D#3 = Subscript<tensor[2][]>(times0C96,_t0F2B);
          int _t0F32#1 = Subscript<int[]>(cells0C95,_t0F2B);
          femData:MeshCell cc0F34#2 = Subscript<femData:MeshCell[]>(0cell_a0C9A,_t0F32);
          real s0F37#1 = TensorIndex<tensor[2],[0]>(interval0F2D);
          real e0F3A#1 = TensorIndex<tensor[2],[1]>(interval0F2D);
          int _t0F3E#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc0F34);
          femData:FuncCell _t0F40#1 = LoadFem<femData:FuncCell>(c0C99,_t0F3E);
          string _t0F47#1 = "++++++++++++++++Next interval!+++++++++++++++++++\n";
          Print<[string]>(_t0F47);
          self.itter = itter0F13;
          self.intersectionItter = _t0E05;
          self.interval = interval0F2D;
          self.s = s0F37;
          self.e = e0F3A;
          self.cc = cc0F34;
          self.fc = _t0F40;
          self.out = out0E84;
          self.rgba = rgba0EF1;
          self.locs = locs0EFB;
          active
          goto JOIN0F0D
        JOIN0F0D:  preds = [*ACTIVE0F4A,MASSIGN0F57]
          femData:FuncCell fc0F45#1 = phi(fc0CBC)
          femData:MeshCell cc0F35#1 = phi(cc0CBB)
          real e0F3B#1 = phi(e0E0B)
          real s0F38#1 = phi(s0E4E)
          tensor[2] interval0F2E#1 = phi(interval0CB8)
          int intersectionItter0F0F#1 = phi(intersectionItter0DCB)
          int itter0F14#1 = phi(itter0CB5)
          self.itter = itter0F14;
          self.intersectionItter = intersectionItter0F0F;
          self.interval = interval0F2E;
          self.s = s0F38;
          self.e = e0F3B;
          self.cc = cc0F35;
          self.fc = fc0F45;
          self.out = out0E84;
          self.rgba = rgba0EF1;
          self.locs = locs0EFB;
          active
        ASSIGN0F56:  preds = [COND0F58]
          string _t0F55#1 = "---------------\n";
          Print<[string]>(_t0F55);
          goto JOIN0F0D
        ASSIGN0EE7:  preds = [COND0EF0]
          real _t0EE6#1 = TensorIndex<tensor[3],[0]>(mcol0EA3);
          real _t0EE8#1 = TensorIndex<tensor[3],[1]>(mcol0EA3);
          real _t0EEA#1 = TensorIndex<tensor[3],[2]>(mcol0EA3);
          tensor[4] rgba0EEE#1 = <tensor[4]>[_t0EE6,_t0EE8,_t0EEA,_t0E8F];
          goto JOIN0EA6
        COND0E27:  preds = [COND0E4F]
          if _t0DD0 then goto JOIN0E12 else goto ASSIGN0FA7
        JOIN0E12:  preds = [COND0E27,JOIN0E1C]
          int _t0E16#1 = phi(_t0DC9,_t0E20)
          if _t0DEB then goto JOIN0E2D else goto ASSIGN0FA8
        JOIN0E2D:  preds = [COND0E42,JOIN0E37]
          int _t0E31#1 = phi(_t0DC9,_t0E3B)
          int _t0E43#1 = IMul(_t0E16,_t0E31);
          bool _t0E47#1 = GT<int>(_t0E43,_t0E05);
          if _t0E47 then goto JOIN0E49 else goto JOIN0E49
        JOIN0E49:  preds = [COND0E4D,COND0E4D]
          real s0E4B#1 = phi(cup0D8B,s0D81)
          goto JOIN0E09
        ASSIGN0FA8:  preds = [COND0E42]
          bool _t0E35#1 = LT<real>(fm0DC0,_t0DCE);
          if _t0E35 then goto ASSIGN0E39 else goto JOIN0E37
        ASSIGN0E39:  preds = [COND0E41]
          int _t0E38#1 = -1;
          goto JOIN0E37
        JOIN0E37:  preds = [ASSIGN0E39,COND0E41]
          int _t0E3B#1 = phi(_t0E38,_t0E05)
          goto JOIN0E2D
        ASSIGN0FA7:  preds = [COND0E27]
          bool _t0E1A#1 = LT<real>(fa0D3D,_t0DCE);
          if _t0E1A then goto ASSIGN0E1E else goto JOIN0E1C
        ASSIGN0E1E:  preds = [COND0E26]
          int _t0E1D#1 = -1;
          goto JOIN0E1C
        JOIN0E1C:  preds = [ASSIGN0E1E,COND0E26]
          int _t0E20#1 = phi(_t0E1D,_t0E05)
          goto JOIN0E12
        ASSIGN0FA6:  preds = [COND0E02]
          bool _t0DF5#1 = LT<real>(fm0DC0,_t0DCE);
          if _t0DF5 then goto ASSIGN0DF9 else goto ASSIGN0DFE
        ASSIGN0DF9:  preds = [COND0E01]
          int _t0DF8#1 = -1;
          goto JOIN0DF7
        JOIN0DF7:  preds = [ASSIGN0DF9,ASSIGN0DFE]
          int _t0DFB#1 = phi(_t0DF8,_t0DFD)
          goto JOIN0DED
        ASSIGN0DFE:  preds = [COND0E01]
          int _t0DFD#1 = 0;
          goto JOIN0DF7
        ASSIGN0FA4:  preds = [COND0DE7]
          bool _t0DDA#1 = LT<real>(fa0D3D,_t0DCE);
          if _t0DDA then goto ASSIGN0DDE else goto ASSIGN0DE3
        ASSIGN0DDE:  preds = [COND0DE6]
          int _t0DDD#1 = -1;
          goto JOIN0DDC
        JOIN0DDC:  preds = [ASSIGN0DDE,ASSIGN0DE3]
          int _t0DE0#1 = phi(_t0DDD,_t0DE2)
          goto JOIN0DD2
        ASSIGN0DE3:  preds = [COND0DE6]
          int _t0DE2#1 = 0;
          goto JOIN0DDC
    end update
  end ray
## initial strand creation
  GRID(2)
    ENTRY0B37:  preds = []
      int iresU0B1D#1 = globals.iresU097B;
      int iresV0B1C#1 = globals.iresV097C;
      int _t0B20#2 = 0;
      int _t0B22#2 = 1;
      int _t0B24#1 = ISub(iresU0B1D,_t0B22);
      int[] _t0B26#1 = Range(_t0B20,_t0B24);
    FOREACH0B29:  preds = [ASSIGN0B27,NEXT0B36]
      foreach (vi0B28 in _t0B26) on exit goto RETURN0B38
      int _t0B2E#1 = ISub(iresV0B1C,_t0B22);
      int[] _t0B30#1 = Range(_t0B20,_t0B2E);
    FOREACH0B33:  preds = [ASSIGN0F66,NEXT0B35]
      foreach (ui0B32 in _t0B30) on exit goto NEXT0B36
      new ray(ui0B32,vi0B28);
      goto FOREACH0B33
    NEXT0B36:  preds = [FOREACH0B33]
      goto FOREACH0B29
    RETURN0B38:  preds = [FOREACH0B29]
      return
#### end program ####
##### mid-ir: after high-to-mid translation ####
## properties
  GlobalInit StrandArray HasStartMethod ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[]) HasInputs HasGlobals
## globals
  input isoval1011 (isoval) = <default>
  input thick1012 (thick) = <default>
  input camEye1013 (camEye) = <default>
  input camAt1014 (camAt) = <default>
  input camUp1015 (camUp) = <default>
  input camFOV1016 (camFOV) = <default>
  input iresU1017 (iresU) = <default>
  input iresV1018 (iresV) = <default>
  input camNear1019 (camNear) = <default>
  input camFar101A (camFar) = <default>
  input refStep101B (refStep) = <default>
  input rayStep101C (rayStep) = <default>
  input a101D (a) = <no-default>
  input 0b046F_intermedateGlobal101E (b) = <no-default>
  input 0c0471_intermedateGlobal101F (c) = <no-default>
  input zeroEps1020 (zeroEps) = <default>
  input intervalEps1021 (intervalEps) = <default>
  input indecies1022 (indecies) = <no-default>
  input times1023 (times) = <no-default>
  input cells1024 (cells) = <no-default>
  input mcnear1025 (mcnear) = <default>
  input mcfar1026 (mcfar) = <default>
  input cmap1027 (cmap) = image("/home/teocollin/gitcode/diderot/tests/lipRay/find/cmap.nrrd")
  input cmin1028 (cmin) = <default>
  input cmax1029 (cmax) = <default>
  input light102A (light) = <default>
  input phongKa102B (phongKa) = <default>
  input phongKd102C (phongKd) = <default>
  input phongKs102D (phongKs) = <default>
  input phongSp102E (phongSp) = <default>
  input maxAlpha102F (maxAlpha) = <default>
  input lightVsp1030 (lightVsp) = <default>
  input debug1031 (debug) = <default>
  input debugU1032 (debugU) = <default>
  input debugV1033 (debugV) = <default>
  global femData:MeshCell[] 0cell_a1034
  global femData:FemFunc c1035
  global real camNearVsp1036
  global real camFarVsp1037
  global tensor[3] camN1038
  global tensor[3] camU1039
  global tensor[3] camV103A
  global real camVmax103B
  global real camUmax103C
  global tensor[3] L103D
  global image(IMAGE1D<double[3]>) img103E
  global kernel _t103F
## functions
  function femData:MeshPos _0A92_msh_newtonInverse12ED (tensor[2] pos12EE#5, int cellInt12EF#21, femData:Mesh mesh12F0#27) {
    ENTRY12F1:  preds = []
      real _t12F2#2 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
      tensor[2] xn12F4#37 = <tensor[2]>[_t12F2,_t12F2];
      int _t12F6#1 = 0;
      int _t12F8#1 = 16;
      int[] _t12FA#1 = Range(_t12F6,_t12F8);
    FOREACH12FD:  preds = [ASSIGN12FB,NEXT13DA]
      foreach (itter12FC in _t12FA) on exit goto ASSIGN13DF
        tensor[2] xn12FF#15 = phi(xn12F4,xn12FE)
      int[3] femIndicies130C#1 = ExtractFemItem2<int,int[3],ExtractIndices(Mesh)>(mesh12F0,cellInt12EF);
      tensor[3,2] femDofs130D#4 = ExtractFemItem2<int[3],tensor[3,2],ExtractDofsSeq(Mesh)>(mesh12F0,femIndicies130C);
      tensor[3,2] dofs130B#1 = femDofs130D;
      tensor[2,3] basisResult130E#1 = EvaluateBasis<BasisArray(2,3)>(xn12F4);
      tensor[2,2] probe_l_101300#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i3=0..2)<((T3_{i3,i0} * T4_{i1,i3}))>(i3=0..2)>_{2 2} (cellInt12EF,mesh12F0,xn12F4,dofs130B,basisResult130E,xn12F4);
      tensor[2,2] op1_e3_l_111301#1 = λ(T0[2 2])<Σ(i2=0..1)<((ϵ_{ii2,ii0} * T0_{i2,i1}))>(i2=0..1)>_{2 2} (probe_l_101300);
      tensor[3,2] dofs130F#1 = femDofs130D;
      tensor[2,3] basisResult1310#1 = EvaluateBasis<BasisArray(2,3)>(xn12F4);
      tensor[2] probe_l_121302#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i2=0..2)<((T3_{i2,i0} * T4_{'0',i2}))>(i2=0..2)>_{2} (cellInt12EF,mesh12F0,xn12F4,dofs130F,basisResult1310,xn12F4);
      tensor[3,2] dofs1311#1 = femDofs130D;
      tensor[2,3] basisResult1312#1 = EvaluateBasis<BasisArray(2,3)>(xn12F4);
      tensor[2] probe_l_131303#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i2=0..2)<((T3_{i2,i0} * T4_{'1',i2}))>(i2=0..2)>_{2} (cellInt12EF,mesh12F0,xn12F4,dofs1311,basisResult1312,xn12F4);
      tensor[2] op1_e3_l_141304#1 = λ(T0[2])<Σ(i1=0..1)<((ϵ_{ii0,ii1} * T0_{i1}))>(i1=0..1)>_{2} (probe_l_131303);
      tensor[2,2] op1_e3_l_151305#1 = λ(T0[2 2])<Σ(i2=0..1)<((ϵ_{ii2,ii0} * T0_{i1,i2}))>(i2=0..1)>_{2 2} (op1_e3_l_111301);
      real op1_e3_l_161306#1 = λ(T0[2],T1[2])<Σ(i0=0..1)<((T0_{i0} * T1_{i0}))>(i0=0..1)> (probe_l_121302,op1_e3_l_141304);
      tensor[3,2] dofs1313#1 = femDofs130D;
      tensor[3] basisResult1314#1 = EvaluateBasis<BasisArray(3)>(xn12FF);
      tensor[2] probe_l_171307#1 = λ(T0[2],INT1,FEM(msh)2,T3[3 2],T4[3],T5[2])<Σ(i1=0..2)<((T3_{i1,i0} * T4_{i1}))>(i1=0..2)>_{2} (xn12FF,cellInt12EF,mesh12F0,dofs1313,basisResult1314,xn12FF);
      tensor[2,2] op1_e3_l_181308#1 = λ(T0[2 2],T1[])<(T0_{i0,i1}) / ( T1)>_{2 2} (op1_e3_l_151305,op1_e3_l_161306);
      tensor[2] op1_e3_l_191309#1 = λ(T0[2],T1[2])<(T1_{i0}) - (T0_{i0})>_{2} (pos12EE,probe_l_171307);
      tensor[2] op1_e3_l_20130A#1 = λ(T0[2 2],T1[2])<Σ(i1=0..1)<((T0_{i0,i1} * T1_{i1}))>(i1=0..1)>_{2} (op1_e3_l_181308,op1_e3_l_191309);
      tensor[2] xn12FE#2 = λ(T0[2],T1[2])<(T0_{i0}) - (T1_{i0})>_{2} (xn12FF,op1_e3_l_20130A);
      real _t132B#2 = 0.1e-7;
      real _t132D#1 = λ(T0[],T1[])<(T0 * T1)> (_t132B,_t132B);
      int[3] femIndicies133C#1 = ExtractFemItem2<int,int[3],ExtractIndices(Mesh)>(mesh12F0,cellInt12EF);
      tensor[3,2] femDofs133D#4 = ExtractFemItem2<int[3],tensor[3,2],ExtractDofsSeq(Mesh)>(mesh12F0,femIndicies133C);
      tensor[3,2] dofs133B#1 = femDofs133D;
      tensor[2,3] basisResult133E#1 = EvaluateBasis<BasisArray(2,3)>(xn12F4);
      tensor[2,2] probe_l_181330#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i3=0..2)<((T3_{i3,i0} * T4_{i1,i3}))>(i3=0..2)>_{2 2} (cellInt12EF,mesh12F0,xn12F4,dofs133B,basisResult133E,xn12F4);
      tensor[2,2] op1_e3_l_191331#1 = λ(T0[2 2])<Σ(i2=0..1)<((ϵ_{ii2,ii0} * T0_{i2,i1}))>(i2=0..1)>_{2 2} (probe_l_181330);
      tensor[3,2] dofs133F#1 = femDofs133D;
      tensor[2,3] basisResult1340#1 = EvaluateBasis<BasisArray(2,3)>(xn12F4);
      tensor[2] probe_l_201332#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i2=0..2)<((T3_{i2,i0} * T4_{'0',i2}))>(i2=0..2)>_{2} (cellInt12EF,mesh12F0,xn12F4,dofs133F,basisResult1340,xn12F4);
      tensor[3,2] dofs1341#1 = femDofs133D;
      tensor[2,3] basisResult1342#1 = EvaluateBasis<BasisArray(2,3)>(xn12F4);
      tensor[2] probe_l_211333#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i2=0..2)<((T3_{i2,i0} * T4_{'1',i2}))>(i2=0..2)>_{2} (cellInt12EF,mesh12F0,xn12F4,dofs1341,basisResult1342,xn12F4);
      tensor[2] op1_e3_l_221334#1 = λ(T0[2])<Σ(i1=0..1)<((ϵ_{ii0,ii1} * T0_{i1}))>(i1=0..1)>_{2} (probe_l_211333);
      tensor[2,2] op1_e3_l_231335#1 = λ(T0[2 2])<Σ(i2=0..1)<((ϵ_{ii2,ii0} * T0_{i1,i2}))>(i2=0..1)>_{2 2} (op1_e3_l_191331);
      real op1_e3_l_241336#1 = λ(T0[2],T1[2])<Σ(i0=0..1)<((T0_{i0} * T1_{i0}))>(i0=0..1)> (probe_l_201332,op1_e3_l_221334);
      tensor[3,2] dofs1343#1 = femDofs133D;
      tensor[3] basisResult1344#1 = EvaluateBasis<BasisArray(3)>(xn12FF);
      tensor[2] probe_l_251337#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[3],T5[2])<Σ(i1=0..2)<((T3_{i1,i0} * T4_{i1}))>(i1=0..2)>_{2} (cellInt12EF,mesh12F0,xn12FF,dofs1343,basisResult1344,xn12FF);
      tensor[2,2] op1_e3_l_261338#1 = λ(T0[2 2],T1[])<(T0_{i0,i1}) / ( T1)>_{2 2} (op1_e3_l_231335,op1_e3_l_241336);
      tensor[2] op1_e3_l_271339#1 = λ(T0[2],T1[2])<(T1_{i0}) - (T0_{i0})>_{2} (pos12EE,probe_l_251337);
      tensor[2] op1_e3_l_38133A#2 = λ(T0[2 2],T1[2])<Σ(i1=0..1)<((T0_{i0,i1} * T1_{i1}))>(i1=0..1)>_{2} (op1_e3_l_261338,op1_e3_l_271339);
      real _t132F#1 = λ(T0[2],T1[2])<Σ(i0=0..1)<((T0_{i0} * T1_{i0}))>(i0=0..1)> (op1_e3_l_38133A,op1_e3_l_38133A);
      bool _t135B#1 = GTE<real>(_t132D,_t132F);
      if _t135B then goto ASSIGN135F else goto JOIN13D9
    ASSIGN135F:  preds = [COND135D]
      real _t135E#3 = 0.1e1;
      real _t1360#3 = 0.1e-8;
      real _t1362#1 = λ(T0[],T1[])<(T0 + T1)> (_t135E,_t1360);
      tensor[2] _t1364#1 = <tensor[2]>[_t135E,_t135E];
      int[3] femIndicies1374#1 = ExtractFemItem2<int,int[3],ExtractIndices(Mesh)>(mesh12F0,cellInt12EF);
      tensor[3,2] femDofs1375#4 = ExtractFemItem2<int[3],tensor[3,2],ExtractDofsSeq(Mesh)>(mesh12F0,femIndicies1374);
      tensor[3,2] dofs1373#1 = femDofs1375;
      tensor[2,3] basisResult1376#1 = EvaluateBasis<BasisArray(2,3)>(xn12F4);
      tensor[2,2] probe_l_111367#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i3=0..2)<((T3_{i3,i0} * T4_{i1,i3}))>(i3=0..2)>_{2 2} (cellInt12EF,mesh12F0,xn12F4,dofs1373,basisResult1376,xn12F4);
      tensor[2,2] op1_e3_l_121368#1 = λ(T0[2 2])<Σ(i2=0..1)<((ϵ_{ii2,ii0} * T0_{i2,i1}))>(i2=0..1)>_{2 2} (probe_l_111367);
      tensor[3,2] dofs1377#1 = femDofs1375;
      tensor[2,3] basisResult1378#1 = EvaluateBasis<BasisArray(2,3)>(xn12F4);
      tensor[2] probe_l_131369#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i2=0..2)<((T3_{i2,i0} * T4_{'0',i2}))>(i2=0..2)>_{2} (cellInt12EF,mesh12F0,xn12F4,dofs1377,basisResult1378,xn12F4);
      tensor[3,2] dofs1379#1 = femDofs1375;
      tensor[2,3] basisResult137A#1 = EvaluateBasis<BasisArray(2,3)>(xn12F4);
      tensor[2] probe_l_14136A#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i2=0..2)<((T3_{i2,i0} * T4_{'1',i2}))>(i2=0..2)>_{2} (cellInt12EF,mesh12F0,xn12F4,dofs1379,basisResult137A,xn12F4);
      tensor[2] op1_e3_l_15136B#1 = λ(T0[2])<Σ(i1=0..1)<((ϵ_{ii0,ii1} * T0_{i1}))>(i1=0..1)>_{2} (probe_l_14136A);
      tensor[2,2] op1_e3_l_16136C#1 = λ(T0[2 2])<Σ(i2=0..1)<((ϵ_{ii2,ii0} * T0_{i1,i2}))>(i2=0..1)>_{2 2} (op1_e3_l_121368);
      real op1_e3_l_17136D#1 = λ(T0[2],T1[2])<Σ(i0=0..1)<((T0_{i0} * T1_{i0}))>(i0=0..1)> (probe_l_131369,op1_e3_l_15136B);
      tensor[3,2] dofs137B#1 = femDofs1375;
      tensor[3] basisResult137C#1 = EvaluateBasis<BasisArray(3)>(xn12FF);
      tensor[2] probe_l_18136E#1 = λ(T0[2],INT1,FEM(msh)2,T3[3 2],T4[3],T5[2])<Σ(i1=0..2)<((T3_{i1,i0} * T4_{i1}))>(i1=0..2)>_{2} (xn12FF,cellInt12EF,mesh12F0,dofs137B,basisResult137C,xn12FF);
      tensor[2,2] op1_e3_l_19136F#1 = λ(T0[2 2],T1[])<(T0_{i0,i1}) / ( T1)>_{2 2} (op1_e3_l_16136C,op1_e3_l_17136D);
      tensor[2] op1_e3_l_201370#1 = λ(T0[2],T1[2])<(T1_{i0}) - (T0_{i0})>_{2} (pos12EE,probe_l_18136E);
      tensor[2] op1_e3_l_211371#1 = λ(T0[2 2],T1[2])<Σ(i1=0..1)<((T0_{i0,i1} * T1_{i1}))>(i1=0..1)>_{2} (op1_e3_l_19136F,op1_e3_l_201370);
      tensor[2] op1_e3_l_221372#1 = λ(T0[2],T1[2])<(T0_{i0}) - (T1_{i0})>_{2} (xn12FF,op1_e3_l_211371);
      real _t1366#1 = λ(T0[2],T1[2])<Σ(i0=0..1)<((T0_{i0} * T1_{i0}))>(i0=0..1)> (_t1364,op1_e3_l_221372);
      bool _t1394#1 = GT<real>(_t1362,_t1366);
      tensor[2] _t1396#1 = <tensor[2]>[_t1360,_t1360];
      int[3] femIndicies13A6#1 = ExtractFemItem2<int,int[3],ExtractIndices(Mesh)>(mesh12F0,cellInt12EF);
      tensor[3,2] femDofs13A7#4 = ExtractFemItem2<int[3],tensor[3,2],ExtractDofsSeq(Mesh)>(mesh12F0,femIndicies13A6);
      tensor[3,2] dofs13A5#1 = femDofs13A7;
      tensor[2,3] basisResult13A8#1 = EvaluateBasis<BasisArray(2,3)>(xn12F4);
      tensor[2,2] probe_l_111399#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i3=0..2)<((T3_{i3,i0} * T4_{i1,i3}))>(i3=0..2)>_{2 2} (cellInt12EF,mesh12F0,xn12F4,dofs13A5,basisResult13A8,xn12F4);
      tensor[2,2] op1_e3_l_12139A#1 = λ(T0[2 2])<Σ(i2=0..1)<((ϵ_{ii2,ii0} * T0_{i2,i1}))>(i2=0..1)>_{2 2} (probe_l_111399);
      tensor[3,2] dofs13A9#1 = femDofs13A7;
      tensor[2,3] basisResult13AA#1 = EvaluateBasis<BasisArray(2,3)>(xn12F4);
      tensor[2] probe_l_13139B#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i2=0..2)<((T3_{i2,i0} * T4_{'0',i2}))>(i2=0..2)>_{2} (cellInt12EF,mesh12F0,xn12F4,dofs13A9,basisResult13AA,xn12F4);
      tensor[3,2] dofs13AB#1 = femDofs13A7;
      tensor[2,3] basisResult13AC#1 = EvaluateBasis<BasisArray(2,3)>(xn12F4);
      tensor[2] probe_l_14139C#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i2=0..2)<((T3_{i2,i0} * T4_{'1',i2}))>(i2=0..2)>_{2} (cellInt12EF,mesh12F0,xn12F4,dofs13AB,basisResult13AC,xn12F4);
      tensor[2] op1_e3_l_15139D#1 = λ(T0[2])<Σ(i1=0..1)<((ϵ_{ii0,ii1} * T0_{i1}))>(i1=0..1)>_{2} (probe_l_14139C);
      tensor[2,2] op1_e3_l_16139E#1 = λ(T0[2 2])<Σ(i2=0..1)<((ϵ_{ii2,ii0} * T0_{i1,i2}))>(i2=0..1)>_{2 2} (op1_e3_l_12139A);
      real op1_e3_l_17139F#1 = λ(T0[2],T1[2])<Σ(i0=0..1)<((T0_{i0} * T1_{i0}))>(i0=0..1)> (probe_l_13139B,op1_e3_l_15139D);
      tensor[3,2] dofs13AD#1 = femDofs13A7;
      tensor[3] basisResult13AE#1 = EvaluateBasis<BasisArray(3)>(xn12FF);
      tensor[2] probe_l_1813A0#1 = λ(T0[2],INT1,FEM(msh)2,T3[3 2],T4[3],T5[2])<Σ(i1=0..2)<((T3_{i1,i0} * T4_{i1}))>(i1=0..2)>_{2} (xn12FF,cellInt12EF,mesh12F0,dofs13AD,basisResult13AE,xn12FF);
      tensor[2,2] op1_e3_l_1913A1#1 = λ(T0[2 2],T1[])<(T0_{i0,i1}) / ( T1)>_{2 2} (op1_e3_l_16139E,op1_e3_l_17139F);
      tensor[2] op1_e3_l_2013A2#1 = λ(T0[2],T1[2])<(T1_{i0}) - (T0_{i0})>_{2} (pos12EE,probe_l_1813A0);
      tensor[2] op1_e3_l_2113A3#1 = λ(T0[2 2],T1[2])<Σ(i1=0..1)<((T0_{i0,i1} * T1_{i1}))>(i1=0..1)>_{2} (op1_e3_l_1913A1,op1_e3_l_2013A2);
      tensor[2] op1_e3_l_2213A4#1 = λ(T0[2],T1[2])<(T0_{i0}) - (T1_{i0})>_{2} (xn12FF,op1_e3_l_2113A3);
      tensor[2] _t1398#2 = λ(T0[2],T1[2])<(T0_{i0} + T1_{i0})>_{2} (_t1396,op1_e3_l_2213A4);
      real _t13C6#1 = TensorIndex<tensor[2],[0]>(_t1398);
      real _t13C8#2 = -0.e0;
      bool _t13CA#1 = GT<real>(_t13C6,_t13C8);
      real _t13CC#1 = TensorIndex<tensor[2],[1]>(_t1398);
      bool _t13CE#1 = GT<real>(_t13CC,_t13C8);
      bool _t13D0#1 = BAnd(_t13CA,_t13CE);
      bool _t13D2#1 = BAnd(_t1394,_t13D0);
      if _t13D2 then goto ASSIGN13D6 else goto ASSIGN13DC
    ASSIGN13D6:  preds = [COND13D4]
      femData:MeshPos _t13D5#1 = ExtractFemItemN<[femData:Mesh,int,tensor[2],tensor[2]],femData:MeshPos,AllBuild(MeshPos),0000,"",[],int>(mesh12F0,cellInt12EF,xn12FE,pos12EE);
      return _t13D5
      goto JOIN13D8
    JOIN13D8:  preds = [*RETURN(_t13D5)13D7,*RETURN(_t13DB)13DD]
      goto JOIN13D9
    JOIN13D9:  preds = [*JOIN13D8,COND135D]
      goto FOREACH12FD
    ASSIGN13DC:  preds = [COND13D4]
      femData:MeshPos _t13DB#1 = ExtractFemItemN<[femData:Mesh],femData:MeshPos,InvalidBuild(MeshPos),0000,"",[],int>(mesh12F0);
      return _t13DB
      goto JOIN13D8
    ASSIGN13DF:  preds = [FOREACH12FD]
      femData:MeshPos _t13DE#1 = ExtractFemItemN<[femData:Mesh],femData:MeshPos,InvalidBuild(MeshPos),0000,"",[],int>(mesh12F0);
      return _t13DE
}
## input initialization
  ENTRY1040:  preds = []
    real isoval1041#1 = 0.2e0;
    globals.isoval1011 = isoval1041;
    real thick1044#1 = 0.7e-1;
    globals.thick1012 = thick1044;
    real _t1047#2 = 0.3e1;
    real _t1049#1 = -0.3e1;
    tensor[3] camEye104B#1 = <tensor[3]>[_t1047,_t1049,_t1047];
    globals.camEye1013 = camEye104B;
    real _t104E#5 = 0.5e0;
    tensor[3] camAt1050#1 = <tensor[3]>[_t104E,_t104E,_t104E];
    globals.camAt1014 = camAt1050;
    real _t1053#5 = 0.e0;
    real _t1055#7 = 0.1e1;
    tensor[3] camUp1057#1 = <tensor[3]>[_t1053,_t1053,_t1055];
    globals.camUp1015 = camUp1057;
    real camFOV105A#1 = 0.137e2;
    globals.camFOV1016 = camFOV105A;
    int iresU105D#2 = 10;
    globals.iresU1017 = iresU105D;
    globals.iresV1018 = iresU105D;
    real camNear1061#1 = -0.2e1;
    globals.camNear1019 = camNear1061;
    real camFar1064#1 = 0.5e1;
    globals.camFar101A = camFar1064;
    globals.refStep101B = _t1055;
    real rayStep1068#1 = 0.1e-1;
    globals.rayStep101C = rayStep1068;
    real zeroEps106B#2 = 0.1e-10;
    globals.zeroEps1020 = zeroEps106B;
    globals.intervalEps1021 = zeroEps106B;
    tensor[3] mcnear106F#2 = <tensor[3]>[_t1055,_t1055,_t1055];
    globals.mcnear1025 = mcnear106F;
    globals.mcfar1026 = mcnear106F;
    globals.cmin1028 = _t1053;
    globals.cmax1029 = _t1055;
    bool light1075#2 = false;
    globals.light102A = light1075;
    globals.phongKa102B = _t104E;
    globals.phongKd102C = _t104E;
    globals.phongKs102D = _t1053;
    real phongSp107B#1 = 0.6e2;
    globals.phongSp102E = phongSp107B;
    globals.maxAlpha102F = _t1055;
    real _t107F#1 = 0.369e1;
    real _t1081#1 = 0.153e1;
    tensor[3] lightVsp1083#1 = <tensor[3]>[_t1053,_t107F,_t1081];
    globals.lightVsp1030 = lightVsp1083;
    globals.debug1031 = light1075;
    int debugU1087#1 = 8;
    globals.debugU1032 = debugU1087;
    int debugV108A#1 = 2;
    globals.debugV1033 = debugV108A;
    return
## global-variable initialization
  ENTRY108E:  preds = []
    tensor[3] camEye108F#7 = globals.camEye1013;
    tensor[3] camAt1091#7 = globals.camAt1014;
    tensor[3] camUp1093#2 = globals.camUp1015;
    real camFOV1095#2 = globals.camFOV1016;
    int iresU1097#1 = globals.iresU1017;
    int iresV1099#1 = globals.iresV1018;
    real camNear109B#1 = globals.camNear1019;
    real camFar109D#1 = globals.camFar101A;
    femData:Mesh a109F#3 = globals.a101D;
    femData:Space 0b046F_intermedateGlobal10A1#1 = globals.0b046F_intermedateGlobal101E;
    femData:FemFunc 0c0471_intermedateGlobal10A3#1 = globals.0c0471_intermedateGlobal101F;
    image(IMAGE1D<double[3]>) cmap10A5#1 = globals.cmap1027;
    tensor[3] lightVsp10A7#2 = globals.lightVsp1030;
    int _t10A9#1 = 0;
    int _t10AB#1 = 1;
    int _t10AD#1 = ExtractFemItem<int,NumCell(Mesh)>(a109F);
    int _t10AF#1 = ISub(_t10AD,_t10AB);
    int[] _t10B1#1 = Range(_t10A9,_t10AF);
    femData:MeshCell[] _t10B3#1 = <femData:MeshCell[]>{};
  FOREACH10B6:  preds = [ASSIGN10B4,NEXT10BC]
    foreach (_t10B5 in _t10B1) on exit goto GASSIGN10BD
      femData:MeshCell[] _t10BA#2 = phi(_t10B3,_t10B9)
    femData:MeshCell _t10B7#1 = LoadFem<femData:MeshCell>(a109F,_t10B5);
    femData:MeshCell[] _t10B9#1 = Append<femData:MeshCell>(_t10BA,_t10B7);
    goto FOREACH10B6
  GASSIGN10BD:  preds = [FOREACH10B6]
    globals.0cell_a1034 = _t10BA;
    femData:Space b10BE#1 = LoadFem<femData:Space>(0b046F_intermedateGlobal10A1,a109F);
    femData:FemFunc c10C0#1 = LoadFem<femData:FemFunc>(0c0471_intermedateGlobal10A3,b10BE);
    globals.c1035 = c10C0;
    tensor[3] op1_e3_l_310C4#2 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (camAt1091,camEye108F);
    real op1_e3_l_510C5#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_310C4,op1_e3_l_310C4);
    real op1_e3_l_610C6#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_510C5);
    real camNearVsp10C3#1 = λ(T0[],T1[])<(T0 + T1)> (camNear109B,op1_e3_l_610C6);
    globals.camNearVsp1036 = camNearVsp10C3;
    tensor[3] op1_e3_l_310CD#2 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (camAt1091,camEye108F);
    real op1_e3_l_510CE#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_310CD,op1_e3_l_310CD);
    real op1_e3_l_610CF#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_510CE);
    real camFarVsp10CC#1 = λ(T0[],T1[])<(T0 + T1)> (camFar109D,op1_e3_l_610CF);
    globals.camFarVsp1037 = camFarVsp10CC;
    tensor[3] op1_e3_l_410D6#3 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (camAt1091,camEye108F);
    real op1_e3_l_610D7#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_410D6,op1_e3_l_410D6);
    real op1_e3_l_710D8#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_610D7);
    real op1_e3_l_910D9#1 = λ(T0[])<(1) / ( T0)> (op1_e3_l_710D8);
    tensor[3] camN10D5#2 = λ(T0[3],T1[])<(T0_{i0} * T1)>_{3} (op1_e3_l_410D6,op1_e3_l_910D9);
    globals.camN1038 = camN10D5;
    tensor[3] op1_e3_l_1010E1#3 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (camAt1091,camEye108F);
    real op1_e3_l_1210E2#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_1010E1,op1_e3_l_1010E1);
    real op1_e3_l_1310E3#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_1210E2);
    tensor[3,3] op1_e3_l_1510E4#1 = λ(T0[3])<Σ(i2=0..2)<((ϵ_{ii0,ii1,ii2} * T0_{i2}))>(i2=0..2)>_{3 3} (camUp1093);
    real op1_e3_l_1610E5#3 = λ(T0[])<(1) / ( T0)> (op1_e3_l_1310E3);
    tensor[3] op1_e3_l_1710E6#3 = λ(T0[3],T1[3 3])<Σ(i1=0..2)<((T0_{i1} * T1_{i0,i1}))>(i1=0..2)>_{3} (op1_e3_l_1010E1,op1_e3_l_1510E4);
    real op1_e3_l_3410E7#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_1710E6,op1_e3_l_1710E6);
    real op1_e3_l_3510E8#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (op1_e3_l_1610E5,op1_e3_l_1610E5,op1_e3_l_3410E7);
    real op1_e3_l_3610E9#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_3510E8);
    tensor[3] op1_e3_l_3710EA#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (op1_e3_l_1610E5,op1_e3_l_1710E6);
    real op1_e3_l_3810EB#1 = λ(T0[])<(1) / ( T0)> (op1_e3_l_3610E9);
    tensor[3] camU10E0#2 = λ(T0[3],T1[])<(T0_{i0} * T1)>_{3} (op1_e3_l_3710EA,op1_e3_l_3810EB);
    globals.camU1039 = camU10E0;
    tensor[3] op1_e3_l_1410FA#4 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (camAt1091,camEye108F);
    real op1_e3_l_1610FB#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_1410FA,op1_e3_l_1410FA);
    real op1_e3_l_1710FC#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_1610FB);
    tensor[3,3] op1_e3_l_2310FD#1 = λ(T0[3])<Σ(i2=0..2)<((ϵ_{ii0,ii1,ii2} * T0_{i2}))>(i2=0..2)>_{3 3} (camUp1093);
    tensor[3] op1_e3_l_2610FE#3 = λ(T0[3],T1[3 3])<Σ(i1=0..2)<((T0_{i1} * T1_{i0,i1}))>(i1=0..2)>_{3} (op1_e3_l_1410FA,op1_e3_l_2310FD);
    real op1_e3_l_2810FF#4 = λ(T0[])<(1) / ( T0)> (op1_e3_l_1710FC);
    real op1_e3_l_301100#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_2610FE,op1_e3_l_2610FE);
    real op1_e3_l_311101#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (op1_e3_l_2810FF,op1_e3_l_2810FF,op1_e3_l_301100);
    real op1_e3_l_321102#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_311101);
    tensor[3,3] op1_e3_l_451103#1 = λ(T0[3])<Σ(i2=0..2)<((ϵ_{ii0,ii1,ii2} * T0_{i2}))>(i2=0..2)>_{3 3} (op1_e3_l_1410FA);
    tensor[3] op1_e3_l_471104#1 = λ(T0[3],T1[3 3])<Σ(i1=0..2)<((T0_{i1} * T1_{i0,i1}))>(i1=0..2)>_{3} (op1_e3_l_2610FE,op1_e3_l_451103);
    real op1_e3_l_481105#1 = λ(T0[])<(1) / ( T0)> (op1_e3_l_321102);
    tensor[3] op1_e3_l_501106#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (op1_e3_l_2810FF,op1_e3_l_471104);
    tensor[3] camV10F9#2 = λ(T0[],T1[],T2[3])<(T0 * T1 * T2_{i0})>_{3} (op1_e3_l_481105,op1_e3_l_2810FF,op1_e3_l_501106);
    globals.camV103A = camV10F9;
    real _t1116#2 = 0.314159265358979323846264338327950288e1;
    real _t1118#2 = 0.36e3;
    real op1_e3_l_5111B#1 = λ(T0[],T1[])<(T0 * T1)> (camFOV1095,_t1116);
    real op1_e3_l_6111C#1 = λ(T0[],T1[])<(T1) / ( T0)> (_t1118,op1_e3_l_5111B);
    tensor[3] op1_e3_l_7111D#2 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (camAt1091,camEye108F);
    real op1_e3_l_9111E#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_7111D,op1_e3_l_7111D);
    real op1_e3_l_10111F#1 = λ(T0[])<Tangent(T0)> (op1_e3_l_6111C);
    real op1_e3_l_111120#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_9111E);
    real camVmax111A#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_10111F,op1_e3_l_111120);
    globals.camVmax103B = camVmax111A;
    real _t1129#1 = IntToReal(iresU1097);
    real _t112B#1 = IntToReal(iresV1099);
    real op1_e3_l_7112E#1 = λ(T0[],T1[])<(T0 * T1)> (camFOV1095,_t1116);
    real op1_e3_l_8112F#1 = λ(T0[],T1[])<(T1) / ( T0)> (_t1118,op1_e3_l_7112E);
    tensor[3] op1_e3_l_91130#2 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (camAt1091,camEye108F);
    real op1_e3_l_111131#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_91130,op1_e3_l_91130);
    real op1_e3_l_121132#1 = λ(T0[])<Tangent(T0)> (op1_e3_l_8112F);
    real op1_e3_l_131133#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_111131);
    real op1_e3_l_141134#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1129,op1_e3_l_121132,op1_e3_l_131133);
    real camUmax112D#1 = λ(T0[],T1[])<(T1) / ( T0)> (_t112B,op1_e3_l_141134);
    globals.camUmax103C = camUmax112D;
    kernel _t113E#1 = Kernel<tent,0>;
    image(IMAGE1D<double[3]>) img1140#1 = BorderCtlClamp<IMAGE1D<double[3]>>(cmap10A5);
    tensor[3,3] _t1142#1 = <tensor[3,3]>[camU10E0,camV10F9,camN10D5];
    real op1_e3_l_31145#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (lightVsp10A7);
    real op1_e3_l_41146#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_31145);
    real op1_e3_l_51147#1 = λ(T0[])<(1) / ( T0)> (op1_e3_l_41146);
    tensor[3] op1_e3_l_61148#1 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i1,i0} * T1_{i1}))>(i1=0..2)>_{3} (_t1142,lightVsp10A7);
    tensor[3] L1144#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (op1_e3_l_51147,op1_e3_l_61148);
    globals.L103D = L1144;
    globals.img103E = img1140;
    globals._t103F = _t113E;
    return
## strand
  strand ray (int ui1152#3, int vi1153#4)
    state:
      real rayU;
      real rayV;
      tensor[3] UV;
      tensor[3] rayOrig;
      tensor[3] rayVec;
      real camNearVsp;
      real camFarVsp;
      int offset;
      int len;
      int itter;
      int intersectionItter;
      int idx;
      tensor[2] interval;
      real s;
      real e;
      femData:MeshCell cc;
      femData:FuncCell fc;
      output real out;
      output tensor[4] rgba;
      output tensor[3][] locs;
      int ui;
      int vi;
    state init
      ENTRY116A:  preds = []
        tensor[3] camEye116B#1 = globals.camEye1013;
        int iresU116D#2 = globals.iresU1017;
        int iresV116F#3 = globals.iresV1018;
        femData:MeshCell[] 0cell_a1171#1 = globals.0cell_a1034;
        femData:FemFunc c1173#1 = globals.c1035;
        int[] indecies1175#2 = globals.indecies1022;
        tensor[2][] times1177#1 = globals.times1023;
        real camNearVsp1179#1 = globals.camNearVsp1036;
        real camFarVsp117B#1 = globals.camFarVsp1037;
        tensor[3] camN117D#1 = globals.camN1038;
        tensor[3] camU117F#2 = globals.camU1039;
        tensor[3] camV1181#2 = globals.camV103A;
        real camVmax1183#6 = globals.camVmax103B;
        real camUmax1185#6 = globals.camUmax103C;
        real _t1187#12 = -0.5e0;
        real _t1189#3 = IntToReal(ui1152);
        real _t118B#3 = IntToReal(iresU116D);
        real _t118D#6 = 0.5e0;
        real op1_e3_l_61190#1 = λ(T0[],T1[])<(T0) - (T1)> (_t118B,_t118D);
        real op1_e3_l_71191#1 = λ(T0[],T1[])<(T1) - (T0)> (_t1187,_t1189);
        real op1_e3_l_81192#1 = λ(T0[],T1[])<(T1) - (T0)> (_t1187,op1_e3_l_61190);
        real op1_e3_l_91193#2 = λ(T0[])<Neg(T0)> (camUmax1185);
        real op1_e3_l_101194#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_71191,op1_e3_l_81192);
        real op1_e3_l_111195#1 = λ(T0[],T1[])<(T0) - (T1)> (camUmax1185,op1_e3_l_91193);
        real op1_e3_l_131196#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_101194,op1_e3_l_111195);
        real rayU118F#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_91193,op1_e3_l_131196);
        real _t119F#3 = IntToReal(vi1153);
        real _t11A1#3 = IntToReal(iresV116F);
        real op1_e3_l_611A4#1 = λ(T0[],T1[])<(T0) - (T1)> (_t11A1,_t118D);
        real op1_e3_l_711A5#1 = λ(T0[],T1[])<(T1) - (T0)> (_t1187,_t119F);
        real op1_e3_l_811A6#1 = λ(T0[],T1[])<(T1) - (T0)> (_t1187,op1_e3_l_611A4);
        real op1_e3_l_911A7#2 = λ(T0[])<Neg(T0)> (camVmax1183);
        real op1_e3_l_1011A8#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_711A5,op1_e3_l_811A6);
        real op1_e3_l_1111A9#1 = λ(T0[],T1[])<(T0) - (T1)> (camVmax1183,op1_e3_l_911A7);
        real op1_e3_l_1311AA#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_1011A8,op1_e3_l_1111A9);
        real rayV11A3#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_911A7,op1_e3_l_1311AA);
        real op1_e3_l_1411B4#1 = λ(T0[],T1[])<(T0) - (T1)> (_t118B,_t118D);
        real op1_e3_l_1511B5#1 = λ(T0[],T1[])<(T1) - (T0)> (_t1187,_t1189);
        real op1_e3_l_1611B6#1 = λ(T0[],T1[])<(T1) - (T0)> (_t1187,op1_e3_l_1411B4);
        real op1_e3_l_1711B7#2 = λ(T0[])<Neg(T0)> (camUmax1185);
        real op1_e3_l_1811B8#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_1511B5,op1_e3_l_1611B6);
        real op1_e3_l_1911B9#1 = λ(T0[],T1[])<(T0) - (T1)> (camUmax1185,op1_e3_l_1711B7);
        real op1_e3_l_2111BA#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_1811B8,op1_e3_l_1911B9);
        real op1_e3_l_2211BB#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_1711B7,op1_e3_l_2111BA);
        real op1_e3_l_2311BC#1 = λ(T0[],T1[])<(T1) - (T0)> (_t118D,_t11A1);
        real op1_e3_l_2411BD#1 = λ(T0[],T1[])<(T1) - (T0)> (_t1187,_t119F);
        real op1_e3_l_2511BE#1 = λ(T0[],T1[])<(T1) - (T0)> (_t1187,op1_e3_l_2311BC);
        real op1_e3_l_2611BF#2 = λ(T0[])<Neg(T0)> (camVmax1183);
        real op1_e3_l_2711C0#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_2411BD,op1_e3_l_2511BE);
        real op1_e3_l_2811C1#1 = λ(T0[],T1[])<(T0) - (T1)> (camVmax1183,op1_e3_l_2611BF);
        real op1_e3_l_3011C2#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_2711C0,op1_e3_l_2811C1);
        real op1_e3_l_3111C3#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_2611BF,op1_e3_l_3011C2);
        tensor[3] op1_e3_l_3211C4#1 = λ(T0[3],T1[])<(T1 * T0_{i0})>_{3} (camU117F,op1_e3_l_2211BB);
        tensor[3] op1_e3_l_3311C5#1 = λ(T0[3],T1[])<(T1 * T0_{i0})>_{3} (camV1181,op1_e3_l_3111C3);
        tensor[3] UV11B3#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (op1_e3_l_3211C4,op1_e3_l_3311C5);
        real op1_e3_l_1511DA#1 = λ(T0[],T1[])<(T0) - (T1)> (_t118B,_t118D);
        real op1_e3_l_1611DB#1 = λ(T0[],T1[])<(T1) - (T0)> (_t1187,_t1189);
        real op1_e3_l_1711DC#1 = λ(T0[],T1[])<(T1) - (T0)> (_t1187,op1_e3_l_1511DA);
        real op1_e3_l_1811DD#2 = λ(T0[])<Neg(T0)> (camUmax1185);
        real op1_e3_l_1911DE#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_1611DB,op1_e3_l_1711DC);
        real op1_e3_l_2011DF#1 = λ(T0[],T1[])<(T0) - (T1)> (camUmax1185,op1_e3_l_1811DD);
        real op1_e3_l_2211E0#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_1911DE,op1_e3_l_2011DF);
        real op1_e3_l_2311E1#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_1811DD,op1_e3_l_2211E0);
        real op1_e3_l_2411E2#1 = λ(T0[],T1[])<(T1) - (T0)> (_t118D,_t11A1);
        real op1_e3_l_2511E3#1 = λ(T0[],T1[])<(T1) - (T0)> (_t1187,_t119F);
        real op1_e3_l_2611E4#1 = λ(T0[],T1[])<(T1) - (T0)> (_t1187,op1_e3_l_2411E2);
        real op1_e3_l_2711E5#2 = λ(T0[])<Neg(T0)> (camVmax1183);
        real op1_e3_l_2811E6#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_2511E3,op1_e3_l_2611E4);
        real op1_e3_l_2911E7#1 = λ(T0[],T1[])<(T0) - (T1)> (camVmax1183,op1_e3_l_2711E5);
        real op1_e3_l_3111E8#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_2811E6,op1_e3_l_2911E7);
        real op1_e3_l_3211E9#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_2711E5,op1_e3_l_3111E8);
        tensor[3] op1_e3_l_3311EA#1 = λ(T0[3],T1[])<(T1 * T0_{i0})>_{3} (camU117F,op1_e3_l_2311E1);
        tensor[3] op1_e3_l_3411EB#1 = λ(T0[3],T1[])<(T1 * T0_{i0})>_{3} (camV1181,op1_e3_l_3211E9);
        tensor[3] rayOrig11D9#1 = λ(T0[3],T1[3],T2[3])<(T0_{i0} + T1_{i0} + T2_{i0})>_{3} (camEye116B,op1_e3_l_3311EA,op1_e3_l_3411EB);
        real _t11FF#8 = 0.e0;
        tensor[3] _t1201#1 = <tensor[3]>[_t11FF,_t11FF,_t11FF];
        tensor[3] rayVec1203#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (camN117D,_t1201);
        int _t1205#2 = IMul(ui1152,iresV116F);
        int _t1207#1 = IAdd(_t1205,vi1153);
        int offset1209#2 = Subscript<int[]>(indecies1175,_t1207);
        int _t120B#1 = IMul(iresU116D,iresV116F);
        int _t120D#1 = IAdd(_t120B,_t1205);
        int _t120F#1 = IAdd(_t120D,vi1153);
        int len1211#1 = Subscript<int[]>(indecies1175,_t120F);
        int itter1213#4 = 0;
        int idx1215#2 = IAdd(offset1209,itter1213);
        tensor[2] interval1217#3 = Subscript<tensor[2][]>(times1177,idx1215);
        real s1219#1 = TensorIndex<tensor[2],[0]>(interval1217);
        real e121B#1 = TensorIndex<tensor[2],[1]>(interval1217);
        femData:MeshCell cc121D#2 = Subscript<femData:MeshCell[]>(0cell_a1171,itter1213);
        int _t121F#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc121D);
        femData:FuncCell _t1221#1 = LoadFem<femData:FuncCell>(c1173,_t121F);
        tensor[4] rgba1223#1 = <tensor[4]>[_t11FF,_t11FF,_t11FF,_t11FF];
        tensor[3][0] _t1225#1 = <tensor[3][0]>{};
        tensor[3][] _t1227#1 = MkDynamic<tensor[3],0>(_t1225);
        self.rayU = rayU118F;
        self.rayV = rayV11A3;
        self.UV = UV11B3;
        self.rayOrig = rayOrig11D9;
        self.rayVec = rayVec1203;
        self.camNearVsp = camNearVsp1179;
        self.camFarVsp = camFarVsp117B;
        self.offset = offset1209;
        self.len = len1211;
        self.itter = itter1213;
        self.intersectionItter = itter1213;
        self.idx = idx1215;
        self.interval = interval1217;
        self.s = s1219;
        self.e = e121B;
        self.cc = cc121D;
        self.fc = _t1221;
        self.out = _t11FF;
        self.rgba = rgba1223;
        self.locs = _t1227;
        self.ui = ui1152;
        self.vi = vi1153;
        return
    end state init
    method start
        ENTRY1240:  preds = []
          femData:MeshCell[] 0cell_a1241#1 = globals.0cell_a1034;
          femData:FemFunc c1243#1 = globals.c1035;
          int[] cells1245#1 = globals.cells1024;
          bool debug1247#1 = globals.debug1031;
          int debugU1249#1 = globals.debugU1032;
          int debugV124B#1 = globals.debugV1033;
          int len124D#1 = self.len;
          int idx124F#1 = self.idx;
          int ui1251#2 = self.ui;
          int vi1253#2 = self.vi;
          if debug1247 then goto ASSIGN1257 else goto JOIN125F
        ASSIGN1257:  preds = [COND1255]
          bool _t1256#1 = NEQ<int>(ui1251,debugU1249);
          if _t1256 then goto ASSIGN125A else goto JOIN125E
        ASSIGN125A:  preds = [COND1258]
          bool _t1259#1 = NEQ<int>(vi1253,debugV124B);
          if _t1259 then goto STABILIZE125C else goto JOIN125D
        STABILIZE125C:  preds = [COND125B]
          stabilize
          goto JOIN125D
        JOIN125D:  preds = [*STABILIZE125C,COND125B]
          goto JOIN125E
        JOIN125E:  preds = [JOIN125D,COND1258]
          goto JOIN125F
        JOIN125F:  preds = [JOIN125E,COND1255]
          int _t1260#1 = 0;
          bool _t1262#1 = EQ<int>(len124D,_t1260);
          if _t1262 then goto ASSIGN1266 else goto JOIN126D
        ASSIGN1266:  preds = [COND1264]
          string _t1265#1 = "(find:)No intersection found:";
          string _t1267#1 = "/";
          string _t1269#1 = "\n";
          Print<[string,int,string,int,string]>(_t1265,ui1251,_t1267,vi1253,_t1269);
          stabilize
          goto JOIN126D
        JOIN126D:  preds = [*STABILIZE126C,COND1264]
          int _t126E#1 = Subscript<int[]>(cells1245,idx124F);
          femData:MeshCell cc1270#2 = Subscript<femData:MeshCell[]>(0cell_a1241,_t126E);
          int _t1272#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc1270);
          femData:FuncCell _t1274#1 = LoadFem<femData:FuncCell>(c1243,_t1272);
          self.cc = cc1270;
          self.fc = _t1274;
          active
    end start
    method update
        ENTRY1279:  preds = []
          image(IMAGE1D<double[3]>) cmap1729#3 = globals.cmap1027;
          image(IMAGE1D<double[3]>) img127A#1 = globals.img103E;
          kernel _t127C#1 = globals._t103F;
          femData:MeshCell[] 0cell_a127E#1 = globals.0cell_a1034;
          femData:FemFunc c1280#1 = globals.c1035;
          real zeroEps1282#1 = globals.zeroEps1020;
          real intervalEps1284#4 = globals.intervalEps1021;
          tensor[2][] times1286#1 = globals.times1023;
          int[] cells1288#1 = globals.cells1024;
          tensor[3] mcnear128A#2 = globals.mcnear1025;
          tensor[3] mcfar128C#1 = globals.mcfar1026;
          real cmin128E#3 = globals.cmin1028;
          real cmax1290#2 = globals.cmax1029;
          bool light1292#1 = globals.light102A;
          real phongKa1294#1 = globals.phongKa102B;
          real phongKd1296#1 = globals.phongKd102C;
          real phongKs1298#1 = globals.phongKs102D;
          real phongSp129A#1 = globals.phongSp102E;
          tensor[3] L129C#2 = globals.L103D;
          tensor[3] rayOrig129E#4 = self.rayOrig;
          tensor[3] rayVec12A0#6 = self.rayVec;
          real camNearVsp12A2#2 = self.camNearVsp;
          real camFarVsp12A4#1 = self.camFarVsp;
          int offset12A6#1 = self.offset;
          int len12A8#1 = self.len;
          int itter12AA#3 = self.itter;
          int intersectionItter12AC#2 = self.intersectionItter;
          tensor[2] interval12AE#1 = self.interval;
          real s12B0#15 = self.s;
          real e12B2#18 = self.e;
          femData:MeshCell cc12B4#3 = self.cc;
          femData:FuncCell fc12B6#3 = self.fc;
          real out12B8#2 = self.out;
          tensor[4] rgba12BA#1 = self.rgba;
          tensor[3][] locs12BC#1 = self.locs;
          int ui12BE#1 = self.ui;
          int vi12C0#1 = self.vi;
          string _t12C2#1 = "Ui/Vi::";
          string _t12C4#1 = "/";
          string _t12C6#11 = "\n";
          Print<[string,int,string,int,string]>(_t12C2,ui12BE,_t12C4,vi12C0,_t12C6);
          string _t12C9#1 = "Interval:";
          tensor[2] _t12CB#1 = <tensor[2]>[s12B0,e12B2];
          Print<[string,tensor[2],string]>(_t12C9,_t12CB,_t12C6);
          string _t12CE#1 = "inner itter:";
          Print<[string,int,string]>(_t12CE,intersectionItter12AC,_t12C6);
          string _t12D1#1 = "Outer itter:";
          Print<[string,int,string]>(_t12D1,itter12AA,_t12C6);
          real _t12D4#1 = TensorIndex<tensor[3],[0]>(rayOrig129E);
          real _t12D6#1 = TensorIndex<tensor[3],[1]>(rayOrig129E);
          tensor[2] _t12D8#3 = <tensor[2]>[_t12D4,_t12D6];
          real _t12DA#1 = TensorIndex<tensor[3],[0]>(rayVec12A0);
          real _t12DC#1 = TensorIndex<tensor[3],[1]>(rayVec12A0);
          tensor[2] _t12DE#3 = <tensor[2]>[_t12DA,_t12DC];
          tensor[2] op1_e3_l_312E1#1 = λ(T0[],T1[2])<(T0 * T1_{i0})>_{2} (s12B0,_t12DE);
          tensor[2] startRay12E0#1 = λ(T0[2],T1[2])<(T0_{i0} + T1_{i0})>_{2} (_t12D8,op1_e3_l_312E1);
          tensor[2] op1_e3_l_312E5#1 = λ(T0[],T1[2])<(T0 * T1_{i0})>_{2} (e12B2,_t12DE);
          tensor[2] endRay12E4#1 = λ(T0[2],T1[2])<(T0_{i0} + T1_{i0})>_{2} (_t12D8,op1_e3_l_312E5);
          femData:Mesh _t12E8#9 = ExtractFem<femData:Mesh,femData:MeshCell>(cc12B4);
          int _t12EA#8 = ExtractFemItem<int,CellIndex(MeshCell)>(cc12B4);
          femData:MeshPos callNewtonPos13E1#1 = _0A92_msh_newtonInverse12ED (startRay12E0,_t12EA,_t12E8);
          tensor[2] refPos13E2#1 = ExtractFemItem<tensor[2],RefPos(Mesh)>(callNewtonPos13E1);
          tensor[2] invertA12EC#28 = refPos13E2;
          femData:MeshPos callNewtonPos13E7#1 = _0A92_msh_newtonInverse12ED (endRay12E4,_t12EA,_t12E8);
          tensor[2] refPos13E8#1 = ExtractFemItem<tensor[2],RefPos(Mesh)>(callNewtonPos13E7);
          tensor[2] invertB13E6#28 = refPos13E8;
          string _t13EC#1 = "inverses:";
          Print<[string,tensor[2],tensor[2],string]>(_t13EC,invertA12EC,invertB13E6,_t12C6);
          femData:FemFunc _t13EF#36 = ExtractFem<femData:FemFunc,femData:FuncCell>(fc12B6);
          femData:Space _t13F1#35 = ExtractFem<femData:Space,femData:FemFunc>(_t13EF);
          int _t13F3#35 = ExtractFemItem<int,CellIndex(FuncCell)>(fc12B6);
          real _t13F5#20 = TensorIndex<tensor[3],[2]>(rayVec12A0);
          real _t13F7#20 = TensorIndex<tensor[3],[2]>(rayOrig129E);
          int[6] femIndicies13FE#1 = ExtractFemItem2<int,int[6],ExtractIndices(Space)>(_t13F1,_t13F3);
          tensor[6] femDofs13FF#1 = ExtractFemItem2<int[6],tensor[6],ExtractDofsSeq(FemFunc)>(_t13EF,femIndicies13FE);
          tensor[6] dofs13FD#1 = femDofs13FF;
          tensor[6] basisResult1400#1 = EvaluateBasis<BasisArray(6)>(invertA12EC);
          real probe_l_713FA#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[6],T6[2])<Σ(i0=0..5)<((T4_{i0} * T5_{i0}))>(i0=0..5)> (_t13F3,_t13F1,_t13EF,invertA12EC,dofs13FD,basisResult1400,invertA12EC);
          real op1_e3_l_813FB#1 = λ(T0[],T1[])<(T0 * T1)> (_t13F5,s12B0);
          real op1_e3_l_913FC#1 = λ(T0[],T1[])<(T0) - (T1)> (probe_l_713FA,op1_e3_l_813FB);
          real fa13F9#5 = λ(T0[],T1[])<(T1) - (T0)> (_t13F7,op1_e3_l_913FC);
          int[6] femIndicies140E#1 = ExtractFemItem2<int,int[6],ExtractIndices(Space)>(_t13F1,_t13F3);
          tensor[6] femDofs140F#1 = ExtractFemItem2<int[6],tensor[6],ExtractDofsSeq(FemFunc)>(_t13EF,femIndicies140E);
          tensor[6] dofs140D#1 = femDofs140F;
          tensor[6] basisResult1410#1 = EvaluateBasis<BasisArray(6)>(invertB13E6);
          real probe_l_7140A#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[6],T6[2])<Σ(i0=0..5)<((T4_{i0} * T5_{i0}))>(i0=0..5)> (_t13F3,_t13F1,_t13EF,invertB13E6,dofs140D,basisResult1410,invertB13E6);
          real op1_e3_l_8140B#1 = λ(T0[],T1[])<(T0 * T1)> (_t13F5,e12B2);
          real op1_e3_l_9140C#1 = λ(T0[],T1[])<(T0) - (T1)> (probe_l_7140A,op1_e3_l_8140B);
          real fb1409#2 = λ(T0[],T1[])<(T1) - (T0)> (_t13F7,op1_e3_l_9140C);
          string _t1419#1 = "Vals:";
          tensor[2] _t141B#1 = <tensor[2]>[fa13F9,fb1409];
          Print<[string,tensor[2],string]>(_t1419,_t141B,_t12C6);
          int[6] femIndicies1429#1 = ExtractFemItem2<int,int[6],ExtractIndices(Space)>(_t13F1,_t13F3);
          tensor[6] femDofs142A#2 = ExtractFemItem2<int[6],tensor[6],ExtractDofsSeq(FemFunc)>(_t13EF,femIndicies1429);
          tensor[6] dofs1428#1 = femDofs142A;
          tensor[6] basisResult142B#1 = EvaluateBasis<BasisArray(6)>(invertA12EC);
          real probe_l_14141F#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[6],T6[2])<Σ(i0=0..5)<((T4_{i0} * T5_{i0}))>(i0=0..5)> (_t13F3,_t13F1,_t13EF,invertA12EC,dofs1428,basisResult142B,invertA12EC);
          real op1_e3_l_151420#1 = λ(T0[],T1[])<(T0 * T1)> (_t13F5,s12B0);
          real op1_e3_l_161421#1 = λ(T0[],T1[])<(T0) - (T1)> (probe_l_14141F,op1_e3_l_151420);
          tensor[6] dofs142C#1 = femDofs142A;
          tensor[6] basisResult142D#1 = EvaluateBasis<BasisArray(6)>(invertB13E6);
          real probe_l_171422#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[6],T6[2])<Σ(i0=0..5)<((T4_{i0} * T5_{i0}))>(i0=0..5)> (_t13F3,_t13F1,_t13EF,invertB13E6,dofs142C,basisResult142D,invertB13E6);
          real op1_e3_l_181423#1 = λ(T0[],T1[])<(T0 * T1)> (_t13F5,e12B2);
          real op1_e3_l_191424#1 = λ(T0[],T1[])<(T0) - (T1)> (probe_l_171422,op1_e3_l_181423);
          real op1_e3_l_201425#1 = λ(T0[],T1[])<(T1) - (T0)> (_t13F7,op1_e3_l_161421);
          real op1_e3_l_211426#1 = λ(T0[],T1[])<(T1) - (T0)> (_t13F7,op1_e3_l_191424);
          real op1_e3_l_221427#1 = λ(T0[],T1[])<(T0) - (T1)> (op1_e3_l_201425,op1_e3_l_211426);
          real _t141E#1 = λ(T0[])<Abs(T0)> (op1_e3_l_221427);
          bool _t143E#1 = LT<real>(_t141E,intervalEps1284);
          if _t143E then goto ASSIGN144A else goto JOIN1477
        ASSIGN144A:  preds = [COND1440]
          int[6] femIndicies1447#1 = ExtractFemItem2<int,int[6],ExtractIndices(Space)>(_t13F1,_t13F3);
          tensor[6] femDofs1448#1 = ExtractFemItem2<int[6],tensor[6],ExtractDofsSeq(FemFunc)>(_t13EF,femIndicies1447);
          tensor[6] dofs1446#1 = femDofs1448;
          tensor[6] basisResult1449#1 = EvaluateBasis<BasisArray(6)>(invertA12EC);
          real probe_l_71442#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[6],T6[2])<Σ(i0=0..5)<((T4_{i0} * T5_{i0}))>(i0=0..5)> (_t13F3,_t13F1,_t13EF,invertA12EC,dofs1446,basisResult1449,invertA12EC);
          real op1_e3_l_81443#1 = λ(T0[],T1[])<(T0 * T1)> (_t13F5,s12B0);
          real op1_e3_l_91444#1 = λ(T0[],T1[])<(T0) - (T1)> (probe_l_71442,op1_e3_l_81443);
          real op1_e3_l_101445#1 = λ(T0[],T1[])<(T1) - (T0)> (_t13F7,op1_e3_l_91444);
          real _t1441#1 = λ(T0[])<Abs(T0)> (op1_e3_l_101445);
          bool _t1453#1 = GT<real>(_t1441,intervalEps1284);
          if _t1453 then goto ASSIGN145F else goto JOIN1475
        ASSIGN145F:  preds = [COND1455]
          int[6] femIndicies145C#1 = ExtractFemItem2<int,int[6],ExtractIndices(Space)>(_t13F1,_t13F3);
          tensor[6] femDofs145D#1 = ExtractFemItem2<int[6],tensor[6],ExtractDofsSeq(FemFunc)>(_t13EF,femIndicies145C);
          tensor[6] dofs145B#1 = femDofs145D;
          tensor[6] basisResult145E#1 = EvaluateBasis<BasisArray(6)>(invertB13E6);
          real probe_l_71457#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[6],T6[2])<Σ(i0=0..5)<((T4_{i0} * T5_{i0}))>(i0=0..5)> (_t13F3,_t13F1,_t13EF,invertB13E6,dofs145B,basisResult145E,invertB13E6);
          real op1_e3_l_81458#1 = λ(T0[],T1[])<(T0 * T1)> (_t13F5,e12B2);
          real op1_e3_l_91459#1 = λ(T0[],T1[])<(T0) - (T1)> (probe_l_71457,op1_e3_l_81458);
          real op1_e3_l_10145A#1 = λ(T0[],T1[])<(T1) - (T0)> (_t13F7,op1_e3_l_91459);
          real _t1456#1 = λ(T0[])<Abs(T0)> (op1_e3_l_10145A);
          bool _t1468#1 = GT<real>(_t1456,intervalEps1284);
          if _t1468 then goto ASSIGN146C else goto JOIN1473
        ASSIGN146C:  preds = [COND146A]
          string _t146B#1 = "warn\n";
          Print<[string]>(_t146B);
          real s146E#1 = λ(T0[],T1[])<(T0 + T1)> (s12B0,intervalEps1284);
          self.s = s146E;
          active
          goto JOIN1473
        JOIN1473:  preds = [*ACTIVE1471,COND146A]
          real s1472#1 = phi(s12B0)
          goto JOIN1475
        JOIN1475:  preds = [JOIN1473,COND1455]
          real s1474#1 = phi(s1472,s12B0)
          goto JOIN1477
        JOIN1477:  preds = [JOIN1475,COND1440]
          real s1476#8 = phi(s1474,s12B0)
          int[6] femIndicies1486#1 = ExtractFemItem2<int,int[6],ExtractIndices(Space)>(_t13F1,_t13F3);
          tensor[6] femDofs1487#2 = ExtractFemItem2<int[6],tensor[6],ExtractDofsSeq(FemFunc)>(_t13EF,femIndicies1486);
          tensor[6] dofs1485#1 = femDofs1487;
          tensor[6] basisResult1488#1 = EvaluateBasis<BasisArray(6)>(invertB13E6);
          real probe_l_301479#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[6],T6[2])<Σ(i0=0..5)<((T4_{i0} * T5_{i0}))>(i0=0..5)> (_t13F3,_t13F1,_t13EF,invertB13E6,dofs1485,basisResult1488,invertB13E6);
          real op1_e3_l_31147A#1 = λ(T0[],T1[])<(T0 * T1)> (_t13F5,e12B2);
          real op1_e3_l_32147B#1 = λ(T0[],T1[])<(T0) - (T1)> (probe_l_301479,op1_e3_l_31147A);
          real op1_e3_l_33147C#2 = λ(T0[],T1[])<(T1) - (T0)> (_t13F7,op1_e3_l_32147B);
          tensor[6] dofs1489#1 = femDofs1487;
          tensor[6] basisResult148A#1 = EvaluateBasis<BasisArray(6)>(invertA12EC);
          real probe_l_34147D#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[6],T6[2])<Σ(i0=0..5)<((T4_{i0} * T5_{i0}))>(i0=0..5)> (_t13F3,_t13F1,_t13EF,invertA12EC,dofs1489,basisResult148A,invertA12EC);
          real op1_e3_l_35147E#1 = λ(T0[],T1[])<(T0 * T1)> (_t13F5,s12B0);
          real op1_e3_l_36147F#1 = λ(T0[],T1[])<(T0) - (T1)> (probe_l_34147D,op1_e3_l_35147E);
          real op1_e3_l_371480#2 = λ(T0[],T1[])<(T1) - (T0)> (_t13F7,op1_e3_l_36147F);
          real op1_e3_l_381481#1 = λ(T0[],T1[])<(T0 * T1)> (s1476,op1_e3_l_33147C);
          real op1_e3_l_391482#1 = λ(T0[],T1[])<(T0 * T1)> (e12B2,op1_e3_l_371480);
          real op1_e3_l_481483#1 = λ(T0[],T1[])<(T0) - (T1)> (op1_e3_l_381481,op1_e3_l_391482);
          real op1_e3_l_491484#1 = λ(T0[],T1[])<(T0) - (T1)> (op1_e3_l_33147C,op1_e3_l_371480);
          real cup1478#3 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_481483,op1_e3_l_491484);
          string _t149E#1 = "Mid time:";
          Print<[string,real,string]>(_t149E,cup1478,_t12C6);
          int[6] femIndicies14B1#1 = ExtractFemItem2<int,int[6],ExtractIndices(Space)>(_t13F1,_t13F3);
          tensor[6] femDofs14B2#2 = ExtractFemItem2<int[6],tensor[6],ExtractDofsSeq(FemFunc)>(_t13EF,femIndicies14B1);
          tensor[6] dofs14B0#1 = femDofs14B2;
          tensor[6] basisResult14B3#1 = EvaluateBasis<BasisArray(6)>(invertB13E6);
          real probe_l_3214A2#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[6],T6[2])<Σ(i0=0..5)<((T4_{i0} * T5_{i0}))>(i0=0..5)> (_t13F3,_t13F1,_t13EF,invertB13E6,dofs14B0,basisResult14B3,invertB13E6);
          real op1_e3_l_3314A3#1 = λ(T0[],T1[])<(T0 * T1)> (_t13F5,e12B2);
          real op1_e3_l_3414A4#1 = λ(T0[],T1[])<(T0) - (T1)> (probe_l_3214A2,op1_e3_l_3314A3);
          real op1_e3_l_3514A5#2 = λ(T0[],T1[])<(T1) - (T0)> (_t13F7,op1_e3_l_3414A4);
          tensor[6] dofs14B4#1 = femDofs14B2;
          tensor[6] basisResult14B5#1 = EvaluateBasis<BasisArray(6)>(invertA12EC);
          real probe_l_3614A6#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[6],T6[2])<Σ(i0=0..5)<((T4_{i0} * T5_{i0}))>(i0=0..5)> (_t13F3,_t13F1,_t13EF,invertA12EC,dofs14B4,basisResult14B5,invertA12EC);
          real op1_e3_l_3714A7#1 = λ(T0[],T1[])<(T0 * T1)> (_t13F5,s12B0);
          real op1_e3_l_3814A8#1 = λ(T0[],T1[])<(T0) - (T1)> (probe_l_3614A6,op1_e3_l_3714A7);
          real op1_e3_l_3914A9#2 = λ(T0[],T1[])<(T1) - (T0)> (_t13F7,op1_e3_l_3814A8);
          real op1_e3_l_4014AA#1 = λ(T0[],T1[])<(T0 * T1)> (s1476,op1_e3_l_3514A5);
          real op1_e3_l_4114AB#1 = λ(T0[],T1[])<(T0 * T1)> (e12B2,op1_e3_l_3914A9);
          real op1_e3_l_5014AC#1 = λ(T0[],T1[])<(T0) - (T1)> (op1_e3_l_4014AA,op1_e3_l_4114AB);
          real op1_e3_l_5114AD#1 = λ(T0[],T1[])<(T0) - (T1)> (op1_e3_l_3514A5,op1_e3_l_3914A9);
          real op1_e3_l_5214AE#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_5014AC,op1_e3_l_5114AD);
          tensor[2] op1_e3_l_5314AF#1 = λ(T0[2],T1[])<(T1 * T0_{i0})>_{2} (_t12DE,op1_e3_l_5214AE);
          tensor[2] midRay14A1#5 = λ(T0[2],T1[2])<(T0_{i0} + T1_{i0})>_{2} (_t12D8,op1_e3_l_5314AF);
          femData:MeshPos callNewtonPos14CC#1 = _0A92_msh_newtonInverse12ED (midRay14A1,_t12EA,_t12E8);
          tensor[2] refPos14CD#1 = ExtractFemItem<tensor[2],RefPos(Mesh)>(callNewtonPos14CC);
          tensor[2] invertC14CB#9 = refPos14CD;
          int[6] femIndicies14D3#1 = ExtractFemItem2<int,int[6],ExtractIndices(Space)>(_t13F1,_t13F3);
          tensor[6] femDofs14D4#1 = ExtractFemItem2<int[6],tensor[6],ExtractDofsSeq(FemFunc)>(_t13EF,femIndicies14D3);
          tensor[6] dofs14D2#1 = femDofs14D4;
          tensor[6] basisResult14D5#1 = EvaluateBasis<BasisArray(6)>(invertC14CB);
          real fmVal14D1#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[6],T6[2])<Σ(i0=0..5)<((T4_{i0} * T5_{i0}))>(i0=0..5)> (_t13F3,_t13F1,_t13EF,invertC14CB,dofs14D2,basisResult14D5,invertC14CB);
          int[6] femIndicies14ED#1 = ExtractFemItem2<int,int[6],ExtractIndices(Space)>(_t13F1,_t13F3);
          tensor[6] femDofs14EE#3 = ExtractFemItem2<int[6],tensor[6],ExtractDofsSeq(FemFunc)>(_t13EF,femIndicies14ED);
          tensor[6] dofs14EC#1 = femDofs14EE;
          tensor[6] basisResult14EF#1 = EvaluateBasis<BasisArray(6)>(invertC14CB);
          real probe_l_3614DC#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[6],T6[2])<Σ(i0=0..5)<((T4_{i0} * T5_{i0}))>(i0=0..5)> (_t13F3,_t13F1,_t13EF,invertC14CB,dofs14EC,basisResult14EF,invertC14CB);
          tensor[6] dofs14F0#1 = femDofs14EE;
          tensor[6] basisResult14F1#1 = EvaluateBasis<BasisArray(6)>(invertB13E6);
          real probe_l_3714DD#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[6],T6[2])<Σ(i0=0..5)<((T4_{i0} * T5_{i0}))>(i0=0..5)> (_t13F3,_t13F1,_t13EF,invertB13E6,dofs14F0,basisResult14F1,invertB13E6);
          real op1_e3_l_3814DE#1 = λ(T0[],T1[])<(T0 * T1)> (_t13F5,e12B2);
          real op1_e3_l_3914DF#1 = λ(T0[],T1[])<(T0) - (T1)> (probe_l_3714DD,op1_e3_l_3814DE);
          real op1_e3_l_4014E0#2 = λ(T0[],T1[])<(T1) - (T0)> (_t13F7,op1_e3_l_3914DF);
          tensor[6] dofs14F2#1 = femDofs14EE;
          tensor[6] basisResult14F3#1 = EvaluateBasis<BasisArray(6)>(invertA12EC);
          real probe_l_4114E1#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[6],T6[2])<Σ(i0=0..5)<((T4_{i0} * T5_{i0}))>(i0=0..5)> (_t13F3,_t13F1,_t13EF,invertA12EC,dofs14F2,basisResult14F3,invertA12EC);
          real op1_e3_l_4214E2#1 = λ(T0[],T1[])<(T0 * T1)> (_t13F5,s12B0);
          real op1_e3_l_4314E3#1 = λ(T0[],T1[])<(T0) - (T1)> (probe_l_4114E1,op1_e3_l_4214E2);
          real op1_e3_l_4414E4#2 = λ(T0[],T1[])<(T1) - (T0)> (_t13F7,op1_e3_l_4314E3);
          real op1_e3_l_4514E5#1 = λ(T0[],T1[])<(T0 * T1)> (s1476,op1_e3_l_4014E0);
          real op1_e3_l_4614E6#1 = λ(T0[],T1[])<(T0 * T1)> (e12B2,op1_e3_l_4414E4);
          real op1_e3_l_5514E7#1 = λ(T0[],T1[])<(T0) - (T1)> (op1_e3_l_4514E5,op1_e3_l_4614E6);
          real op1_e3_l_5614E8#1 = λ(T0[],T1[])<(T0) - (T1)> (op1_e3_l_4014E0,op1_e3_l_4414E4);
          real op1_e3_l_5714E9#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_5514E7,op1_e3_l_5614E8);
          real op1_e3_l_5814EA#1 = λ(T0[],T1[])<(T0 * T1)> (_t13F5,op1_e3_l_5714E9);
          real op1_e3_l_5914EB#1 = λ(T0[],T1[])<(T0) - (T1)> (probe_l_3614DC,op1_e3_l_5814EA);
          real fm14DB#4 = λ(T0[],T1[])<(T1) - (T0)> (_t13F7,op1_e3_l_5914EB);
          string _t150D#1 = "all vals:";
          tensor[3] _t150F#1 = <tensor[3]>[fa13F9,fm14DB,fb1409];
          Print<[string,tensor[3],string]>(_t150D,_t150F,_t12C6);
          int _t1512#6 = 1;
          int intersectionItter1514#3 = IAdd(intersectionItter12AC,_t1512);
          real _t1516#10 = 0.e0;
          bool _t1518#2 = GT<real>(fa13F9,_t1516);
          if _t1518 then goto JOIN151D else goto ASSIGN1708
        JOIN151D:  preds = [COND151A,JOIN170D]
          int _t151B#1 = phi(_t1512,_t151C)
          bool _t151E#2 = GT<real>(fm14DB,_t1516);
          if _t151E then goto JOIN1523 else goto ASSIGN1700
        JOIN1523:  preds = [COND1520,JOIN1705]
          int _t1521#1 = phi(_t1512,_t1522)
          int _t1524#1 = IMul(_t151B,_t1521);
          int _t1526#6 = 0;
          bool _t1528#1 = LT<int>(_t1524,_t1526);
          if _t1528 then goto JOIN152E else goto COND16E5
        JOIN152E:  preds = [COND152A,JOIN16F2]
          real e152B#4 = phi(cup1478,e12B2)
          real s152C#4 = phi(s1476,s152D)
          string _t152F#1 = "new interval:";
          tensor[2] _t1531#1 = <tensor[2]>[s152C,e152B];
          Print<[string,tensor[2],string]>(_t152F,_t1531,_t12C6);
          int[6] femIndicies1547#1 = ExtractFemItem2<int,int[6],ExtractIndices(Space)>(_t13F1,_t13F3);
          tensor[6] femDofs1548#3 = ExtractFemItem2<int[6],tensor[6],ExtractDofsSeq(FemFunc)>(_t13EF,femIndicies1547);
          tensor[6] dofs1546#1 = femDofs1548;
          tensor[6] basisResult1549#1 = EvaluateBasis<BasisArray(6)>(invertC14CB);
          real probe_l_361535#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[6],T6[2])<Σ(i0=0..5)<((T4_{i0} * T5_{i0}))>(i0=0..5)> (_t13F3,_t13F1,_t13EF,invertC14CB,dofs1546,basisResult1549,invertC14CB);
          tensor[6] dofs154A#1 = femDofs1548;
          tensor[6] basisResult154B#1 = EvaluateBasis<BasisArray(6)>(invertB13E6);
          real probe_l_371536#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[6],T6[2])<Σ(i0=0..5)<((T4_{i0} * T5_{i0}))>(i0=0..5)> (_t13F3,_t13F1,_t13EF,invertB13E6,dofs154A,basisResult154B,invertB13E6);
          real op1_e3_l_381537#1 = λ(T0[],T1[])<(T0 * T1)> (_t13F5,e12B2);
          real op1_e3_l_391538#1 = λ(T0[],T1[])<(T0) - (T1)> (probe_l_371536,op1_e3_l_381537);
          real op1_e3_l_401539#2 = λ(T0[],T1[])<(T1) - (T0)> (_t13F7,op1_e3_l_391538);
          tensor[6] dofs154C#1 = femDofs1548;
          tensor[6] basisResult154D#1 = EvaluateBasis<BasisArray(6)>(invertA12EC);
          real probe_l_41153A#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[6],T6[2])<Σ(i0=0..5)<((T4_{i0} * T5_{i0}))>(i0=0..5)> (_t13F3,_t13F1,_t13EF,invertA12EC,dofs154C,basisResult154D,invertA12EC);
          real op1_e3_l_42153B#1 = λ(T0[],T1[])<(T0 * T1)> (_t13F5,s12B0);
          real op1_e3_l_43153C#1 = λ(T0[],T1[])<(T0) - (T1)> (probe_l_41153A,op1_e3_l_42153B);
          real op1_e3_l_44153D#2 = λ(T0[],T1[])<(T1) - (T0)> (_t13F7,op1_e3_l_43153C);
          real op1_e3_l_45153E#1 = λ(T0[],T1[])<(T0 * T1)> (s1476,op1_e3_l_401539);
          real op1_e3_l_46153F#1 = λ(T0[],T1[])<(T0 * T1)> (e12B2,op1_e3_l_44153D);
          real op1_e3_l_551540#1 = λ(T0[],T1[])<(T0) - (T1)> (op1_e3_l_45153E,op1_e3_l_46153F);
          real op1_e3_l_561541#1 = λ(T0[],T1[])<(T0) - (T1)> (op1_e3_l_401539,op1_e3_l_44153D);
          real op1_e3_l_571542#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_551540,op1_e3_l_561541);
          real op1_e3_l_581543#1 = λ(T0[],T1[])<(T0 * T1)> (_t13F5,op1_e3_l_571542);
          real op1_e3_l_591544#1 = λ(T0[],T1[])<(T0) - (T1)> (probe_l_361535,op1_e3_l_581543);
          real op1_e3_l_601545#1 = λ(T0[],T1[])<(T1) - (T0)> (_t13F7,op1_e3_l_591544);
          real _t1534#1 = λ(T0[])<Abs(T0)> (op1_e3_l_601545);
          bool _t1568#2 = LT<real>(_t1534,zeroEps1282);
          if _t1568 then goto ASSIGN156C else goto JOIN1690
        ASSIGN156C:  preds = [COND156A]
          tensor[2] grad156B#1 = <tensor[2]>[_t1516,_t1516];
          if _t1568 then goto ASSIGN1587 else goto JOIN15A2
        ASSIGN1587:  preds = [COND156D]
          femData:MeshPos callNewtonPos1579#1 = _0A92_msh_newtonInverse12ED (midRay14A1,_t12EA,_t12E8);
          tensor[2] refPos157A#7 = ExtractFemItem<tensor[2],RefPos(Mesh)>(callNewtonPos1579);
          tensor[2] Inner156F#3 = refPos157A;
          int[6] femIndicies157C#1 = ExtractFemItem2<int,int[6],ExtractIndices(Space)>(_t13F1,_t13F3);
          tensor[6] femDofs157D#1 = ExtractFemItem2<int[6],tensor[6],ExtractDofsSeq(FemFunc)>(_t13EF,femIndicies157C);
          tensor[6] dofs157B#1 = femDofs157D;
          tensor[2,6] basisResult157E#1 = EvaluateBasis<BasisArray(2,6)>(Inner156F);
          tensor[2] compositionl1570#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[2 6],T6[2])<Σ(i2=0..5)<((T4_{i2} * T5_{i0,i2}))>(i2=0..5)>_{2} (_t13F3,_t13F1,_t13EF,Inner156F,dofs157B,basisResult157E,Inner156F);
          int[3] femIndicies1580#1 = ExtractFemItem2<int,int[3],ExtractIndices(Mesh)>(_t12E8,_t12EA);
          tensor[3,2] femDofs1581#3 = ExtractFemItem2<int[3],tensor[3,2],ExtractDofsSeq(Mesh)>(_t12E8,femIndicies1580);
          tensor[3,2] dofs157F#1 = femDofs1581;
          tensor[2,3] basisResult1582#1 = EvaluateBasis<BasisArray(2,3)>(refPos157A);
          tensor[2,2] probe_l_81571#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i3=0..2)<((T3_{i3,i0} * T4_{i1,i3}))>(i3=0..2)>_{2 2} (_t12EA,_t12E8,midRay14A1,dofs157F,basisResult1582,refPos157A);
          tensor[2,2] op1_e3_l_91572#1 = λ(T0[2 2])<Σ(i2=0..1)<((ϵ_{ii2,ii0} * T0_{i2,i1}))>(i2=0..1)>_{2 2} (probe_l_81571);
          tensor[3,2] dofs1583#1 = femDofs1581;
          tensor[2,3] basisResult1584#1 = EvaluateBasis<BasisArray(2,3)>(refPos157A);
          tensor[2] probe_l_101573#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i2=0..2)<((T3_{i2,i0} * T4_{'0',i2}))>(i2=0..2)>_{2} (_t12EA,_t12E8,midRay14A1,dofs1583,basisResult1584,refPos157A);
          tensor[3,2] dofs1585#1 = femDofs1581;
          tensor[2,3] basisResult1586#1 = EvaluateBasis<BasisArray(2,3)>(refPos157A);
          tensor[2] probe_l_111574#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i2=0..2)<((T3_{i2,i0} * T4_{'1',i2}))>(i2=0..2)>_{2} (_t12EA,_t12E8,midRay14A1,dofs1585,basisResult1586,refPos157A);
          tensor[2] op1_e3_l_121575#1 = λ(T0[2])<Σ(i1=0..1)<((ϵ_{ii0,ii1} * T0_{i1}))>(i1=0..1)>_{2} (probe_l_111574);
          tensor[2,2] op1_e3_l_131576#1 = λ(T0[2 2])<Σ(i2=0..1)<((ϵ_{ii2,ii0} * T0_{i1,i2}))>(i2=0..1)>_{2 2} (op1_e3_l_91572);
          real op1_e3_l_141577#1 = λ(T0[2],T1[2])<Σ(i0=0..1)<((T0_{i0} * T1_{i0}))>(i0=0..1)> (probe_l_101573,op1_e3_l_121575);
          tensor[2,2] op1_e3_l_151578#1 = λ(T0[2 2],T1[])<(T0_{i0,i1}) / ( T1)>_{2 2} (op1_e3_l_131576,op1_e3_l_141577);
          tensor[2] grad156E#1 = λ(T0[2],T1[2 2])<Σ(i104=0..1)<((T0_{i104} * T1_{i104,i0}))>(i104=0..1)>_{2} (compositionl1570,op1_e3_l_151578);
          goto JOIN15A2
        JOIN15A2:  preds = [ASSIGN159F,COND156D]
          tensor[2] grad15A0#3 = phi(grad156E,grad156B)
          real out15A1#3 = phi(fmVal14D1,out12B8)
          string _t15A3#1 = "Out val:";
          Print<[string,real,string]>(_t15A3,out15A1,_t12C6);
          string _t15A6#1 = "Grad val:";
          Print<[string,tensor[2],string]>(_t15A6,grad15A0,_t12C6);
          real _t15A9#6 = 0.1e1;
          tensor[3] mcol15AB#1 = <tensor[3]>[_t15A9,_t15A9,_t15A9];
          bool _t15AD#1 = NEQ<real>(cmin128E,cmax1290);
          if _t15AD then goto ASSIGN15B1 else goto JOIN15DB
        ASSIGN15B1:  preds = [COND15AF]
          int _t15B0#1 = -1;
          real _t15B2#2 = IntToReal(_t15B0);
          real op1_e3_l_515B5#1 = λ(T0[],T1[])<(T1) - (T0)> (cmin128E,out15A1);
          real op1_e3_l_615B6#1 = λ(T0[],T1[])<(T1) - (T0)> (cmin128E,cmax1290);
          real op1_e3_l_715B7#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_515B5,op1_e3_l_615B6);
          real op1_e3_l_815B8#1 = λ(T0[],T1[])<(T1) - (T0)> (_t15B2,_t15A9);
          real op1_e3_l_915B9#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_715B7,op1_e3_l_815B8);
          real _t15B4#2 = λ(T0[],T1[])<(T0 + T1)> (_t15B2,op1_e3_l_915B9);
          real Mtransform15C1#2 = Transform<IMAGE1D<double[3]>>(cmap1729);
          real MxPos15C2#1 = λ(T0[],T1[])<(T0 * T1)> (Mtransform15C1,_t15B4);
          real Ttranslate15C3#1 = Translate<IMAGE1D<double[3]>>(cmap1729);
          real imgPos15C4#2 = λ(T0[],T1[])<(T0 + T1)> (MxPos15C2,Ttranslate15C3);
          real nd15C5#2 = Floor<1>(imgPos15C4);
          real f15C6#1 = λ(T0[],T1[])<(T0) - (T1)> (imgPos15C4,nd15C5);
          int n15C7#1 = RealToInt<1>(nd15C5);
          int lit15C8#1 = 0;
          int idx15C9#1 = IAdd(n15C7,lit15C8);
          tensor[3,2] ldvox15CA#1 = LoadVoxelsWithCtl<IMAGE1D<double[3]>,2,clamp>(cmap1729,idx15C9);
          tensor[2] kernX_15CB#1 = BuildPos<1>(f15C6);
          tensor[2] kevalX_d0_15CC#1 = EvalKernel<2,tent,0>(kernX_15CB);
          tensor[3] mcol15C0#1 = λ(V0(1)[3],H1,T2[1],T3[1 1],V4(1)[3],H5)<Σ(i1=0..1)<((V4_{i0}(1)[i1]# * H5(1)))>(i1=0..1)>_{3} (img127A,_t127C,_t15B4,Mtransform15C1,ldvox15CA,kevalX_d0_15CC);
          goto JOIN15DB
        JOIN15DB:  preds = [ASSIGN15D9,COND15AF]
          tensor[3] mcol15DA#5 = phi(mcol15C0,mcol15AB)
          if light1292 then goto ASSIGN15DE else goto ASSIGN16DF
        ASSIGN15DE:  preds = [COND15DC]
          real _t15DD#1 = TensorIndex<tensor[2],[0]>(grad15A0);
          real _t15DF#1 = TensorIndex<tensor[2],[1]>(grad15A0);
          int _t15E1#1 = -1;
          real _t15E3#1 = IntToReal(_t15E1);
          tensor[3] _t15E5#4 = <tensor[3]>[_t15DD,_t15DF,_t15E3];
          real op1_e3_l_315E8#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (_t15E5);
          real op1_e3_l_415E9#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_315E8);
          real op1_e3_l_515EA#1 = λ(T0[])<(1) / ( T0)> (op1_e3_l_415E9);
          real op1_e3_l_615EB#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (_t15E5,L129C);
          real _t15E7#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_515EA,op1_e3_l_615EB);
          real _t15F1#1 = Max<real>(_t1516,_t15E7);
          real op1_e3_l_815F4#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (_t15E5);
          real op1_e3_l_915F5#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_815F4);
          real op1_e3_l_1015F6#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (rayVec12A0);
          real op1_e3_l_1115F7#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_1015F6);
          real op1_e3_l_1215F8#1 = λ(T0[])<(1) / ( T0)> (op1_e3_l_1115F7);
          tensor[3] op1_e3_l_1315F9#1 = λ(T0[3],T1[])<(T0_{i0} * T1)>_{3} (rayVec12A0,op1_e3_l_1215F8);
          tensor[3] op1_e3_l_1415FA#1 = λ(T0[3])<Neg(T0_{i0})>_{3} (op1_e3_l_1315F9);
          tensor[3] op1_e3_l_2015FB#3 = λ(T0[3],T1[3])<(T1_{i0} + T0_{i0})>_{3} (L129C,op1_e3_l_1415FA);
          real op1_e3_l_2215FC#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_2015FB,op1_e3_l_2015FB);
          real op1_e3_l_2315FD#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_2215FC);
          real op1_e3_l_3015FE#1 = λ(T0[])<(1) / ( T0)> (op1_e3_l_915F5);
          real op1_e3_l_3115FF#1 = λ(T0[])<(1) / ( T0)> (op1_e3_l_2315FD);
          real op1_e3_l_321600#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (_t15E5,op1_e3_l_2015FB);
          real _t15F3#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (op1_e3_l_3015FE,op1_e3_l_3115FF,op1_e3_l_321600);
          real _t160F#1 = Max<real>(_t1516,_t15F3);
          real _t1611#1 = MathFn<pow>(_t160F,phongSp129A);
          int[6] femIndicies162B#1 = ExtractFemItem2<int,int[6],ExtractIndices(Space)>(_t13F1,_t13F3);
          tensor[6] femDofs162C#2 = ExtractFemItem2<int[6],tensor[6],ExtractDofsSeq(FemFunc)>(_t13EF,femIndicies162B);
          tensor[6] dofs162A#1 = femDofs162C;
          tensor[6] basisResult162D#1 = EvaluateBasis<BasisArray(6)>(invertB13E6);
          real probe_l_751614#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[6],T6[2])<Σ(i0=0..5)<((T4_{i0} * T5_{i0}))>(i0=0..5)> (_t13F3,_t13F1,_t13EF,invertB13E6,dofs162A,basisResult162D,invertB13E6);
          real op1_e3_l_761615#1 = λ(T0[],T1[])<(T0 * T1)> (_t13F5,e12B2);
          real op1_e3_l_771616#1 = λ(T0[],T1[])<(T0) - (T1)> (probe_l_751614,op1_e3_l_761615);
          real op1_e3_l_781617#2 = λ(T0[],T1[])<(T1) - (T0)> (_t13F7,op1_e3_l_771616);
          tensor[6] dofs162E#1 = femDofs162C;
          tensor[6] basisResult162F#1 = EvaluateBasis<BasisArray(6)>(invertA12EC);
          real probe_l_791618#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[6],T6[2])<Σ(i0=0..5)<((T4_{i0} * T5_{i0}))>(i0=0..5)> (_t13F3,_t13F1,_t13EF,invertA12EC,dofs162E,basisResult162F,invertA12EC);
          real op1_e3_l_801619#1 = λ(T0[],T1[])<(T0 * T1)> (_t13F5,s12B0);
          real op1_e3_l_81161A#1 = λ(T0[],T1[])<(T0) - (T1)> (probe_l_791618,op1_e3_l_801619);
          real op1_e3_l_82161B#2 = λ(T0[],T1[])<(T1) - (T0)> (_t13F7,op1_e3_l_81161A);
          real op1_e3_l_83161C#1 = λ(T0[],T1[])<(T0 * T1)> (s1476,op1_e3_l_781617);
          real op1_e3_l_84161D#1 = λ(T0[],T1[])<(T0 * T1)> (e12B2,op1_e3_l_82161B);
          real op1_e3_l_93161E#1 = λ(T0[],T1[])<(T0) - (T1)> (op1_e3_l_83161C,op1_e3_l_84161D);
          real op1_e3_l_94161F#1 = λ(T0[],T1[])<(T0) - (T1)> (op1_e3_l_781617,op1_e3_l_82161B);
          real op1_e3_l_951620#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_93161E,op1_e3_l_94161F);
          real op1_e3_l_961621#1 = λ(T0[],T1[])<(T1) - (T0)> (camNearVsp12A2,op1_e3_l_951620);
          real op1_e3_l_971622#1 = λ(T0[],T1[])<(T1) - (T0)> (camNearVsp12A2,camFarVsp12A4);
          real op1_e3_l_981623#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_961621,op1_e3_l_971622);
          tensor[3] op1_e3_l_991624#1 = λ(T0[3],T1[3])<(T1_{i0}) - (T0_{i0})>_{3} (mcnear128A,mcfar128C);
          tensor[3] op1_e3_l_1001625#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (op1_e3_l_981623,op1_e3_l_991624);
          tensor[3] op1_e3_l_1011626#2 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (mcnear128A,op1_e3_l_1001625);
          tensor[3] op1_e3_l_1291627#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (phongKa1294,mcol15DA);
          tensor[3] op1_e3_l_1301628#1 = λ(T0[3],T1[],T2[],T3[3])<(T1 * T2 * T0_{i0} * T3_{i0})>_{3} (mcol15DA,_t15F1,phongKd1296,op1_e3_l_1011626);
          tensor[3] op1_e3_l_1311629#1 = λ(T0[],T1[],T2[3])<(T0 * T1 * T2_{i0})>_{3} (_t1611,phongKs1298,op1_e3_l_1011626);
          tensor[3] fin1613#3 = λ(T0[3],T1[3],T2[3])<(T0_{i0} + T1_{i0} + T2_{i0})>_{3} (op1_e3_l_1291627,op1_e3_l_1301628,op1_e3_l_1311629);
          real _t164D#1 = TensorIndex<tensor[3],[0]>(fin1613);
          real _t164F#1 = TensorIndex<tensor[3],[1]>(fin1613);
          real _t1651#1 = TensorIndex<tensor[3],[2]>(fin1613);
          tensor[4] rgba1653#1 = <tensor[4]>[_t164D,_t164F,_t1651,_t15A9];
          goto JOIN1657
        JOIN1657:  preds = [ASSIGN1654,ASSIGN16E4]
          tensor[4] rgba1655#1 = phi(rgba1653,rgba1656)
          int[6] femIndicies1668#1 = ExtractFemItem2<int,int[6],ExtractIndices(Space)>(_t13F1,_t13F3);
          tensor[6] femDofs1669#2 = ExtractFemItem2<int[6],tensor[6],ExtractDofsSeq(FemFunc)>(_t13EF,femIndicies1668);
          tensor[6] dofs1667#1 = femDofs1669;
          tensor[6] basisResult166A#1 = EvaluateBasis<BasisArray(6)>(invertB13E6);
          real probe_l_321659#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[6],T6[2])<Σ(i0=0..5)<((T4_{i0} * T5_{i0}))>(i0=0..5)> (_t13F3,_t13F1,_t13EF,invertB13E6,dofs1667,basisResult166A,invertB13E6);
          real op1_e3_l_33165A#1 = λ(T0[],T1[])<(T0 * T1)> (_t13F5,e12B2);
          real op1_e3_l_34165B#1 = λ(T0[],T1[])<(T0) - (T1)> (probe_l_321659,op1_e3_l_33165A);
          real op1_e3_l_35165C#2 = λ(T0[],T1[])<(T1) - (T0)> (_t13F7,op1_e3_l_34165B);
          tensor[6] dofs166B#1 = femDofs1669;
          tensor[6] basisResult166C#1 = EvaluateBasis<BasisArray(6)>(invertA12EC);
          real probe_l_36165D#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[6],T6[2])<Σ(i0=0..5)<((T4_{i0} * T5_{i0}))>(i0=0..5)> (_t13F3,_t13F1,_t13EF,invertA12EC,dofs166B,basisResult166C,invertA12EC);
          real op1_e3_l_37165E#1 = λ(T0[],T1[])<(T0 * T1)> (_t13F5,s12B0);
          real op1_e3_l_38165F#1 = λ(T0[],T1[])<(T0) - (T1)> (probe_l_36165D,op1_e3_l_37165E);
          real op1_e3_l_391660#2 = λ(T0[],T1[])<(T1) - (T0)> (_t13F7,op1_e3_l_38165F);
          real op1_e3_l_401661#1 = λ(T0[],T1[])<(T0 * T1)> (s1476,op1_e3_l_35165C);
          real op1_e3_l_411662#1 = λ(T0[],T1[])<(T0 * T1)> (e12B2,op1_e3_l_391660);
          real op1_e3_l_501663#1 = λ(T0[],T1[])<(T0) - (T1)> (op1_e3_l_401661,op1_e3_l_411662);
          real op1_e3_l_511664#1 = λ(T0[],T1[])<(T0) - (T1)> (op1_e3_l_35165C,op1_e3_l_391660);
          real op1_e3_l_521665#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_501663,op1_e3_l_511664);
          tensor[3] op1_e3_l_531666#1 = λ(T0[3],T1[])<(T1 * T0_{i0})>_{3} (rayVec12A0,op1_e3_l_521665);
          tensor[3] _t1658#1 = λ(T0[3],T1[3])<(T1_{i0} + T0_{i0})>_{3} (rayOrig129E,op1_e3_l_531666);
          tensor[3][1] _t1682#1 = <tensor[3][1]>{_t1658};
          tensor[3][] _t1684#1 = MkDynamic<tensor[3],1>(_t1682);
          self.intersectionItter = intersectionItter1514;
          self.s = s152C;
          self.e = e152B;
          self.out = out15A1;
          self.rgba = rgba1655;
          self.locs = _t1684;
          stabilize
          goto JOIN1690
        JOIN1690:  preds = [*STABILIZE168C,COND156A]
          tensor[3][] locs168D#3 = phi(locs12BC)
          tensor[4] rgba168E#3 = phi(rgba12BA)
          real out168F#3 = phi(out12B8)
          int _t1691#1 = 32;
          bool _t1693#1 = GT<int>(intersectionItter1514,_t1691);
          if _t1693 then goto ASSIGN1697 else goto ASSIGN16DC
        ASSIGN1697:  preds = [COND1695]
          int itter1696#4 = IAdd(itter12AA,_t1512);
          bool _t1698#1 = GTE<int>(itter1696,len12A8);
          if _t1698 then goto ASSIGN169C else goto JOIN16A9
        ASSIGN169C:  preds = [COND169A]
          string _t169B#1 = "No intersection found\n";
          Print<[string]>(_t169B);
          string _t169E#1 = "Fin pixel=============================\n";
          Print<[string]>(_t169E);
          self.itter = itter1696;
          self.intersectionItter = _t1526;
          self.s = s152C;
          self.e = e152B;
          self.out = out168F;
          self.rgba = rgba168E;
          self.locs = locs168D;
          stabilize
          goto JOIN16A9
        JOIN16A9:  preds = [*STABILIZE16A8,COND169A]
          int _t16AA#2 = IAdd(offset12A6,itter1696);
          tensor[2] interval16AC#3 = Subscript<tensor[2][]>(times1286,_t16AA);
          int _t16AE#1 = Subscript<int[]>(cells1288,_t16AA);
          femData:MeshCell cc16B0#2 = Subscript<femData:MeshCell[]>(0cell_a127E,_t16AE);
          real s16B2#1 = TensorIndex<tensor[2],[0]>(interval16AC);
          real e16B4#1 = TensorIndex<tensor[2],[1]>(interval16AC);
          int _t16B6#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc16B0);
          femData:FuncCell _t16B8#1 = LoadFem<femData:FuncCell>(c1280,_t16B6);
          string _t16BA#1 = "++++++++++++++++Next interval!+++++++++++++++++++\n";
          Print<[string]>(_t16BA);
          self.itter = itter1696;
          self.intersectionItter = _t1526;
          self.interval = interval16AC;
          self.s = s16B2;
          self.e = e16B4;
          self.cc = cc16B0;
          self.fc = _t16B8;
          self.out = out168F;
          self.rgba = rgba168E;
          self.locs = locs168D;
          active
          goto JOIN16CF
        JOIN16CF:  preds = [*ACTIVE16C7,MASSIGN16DD]
          femData:FuncCell fc16C8#1 = phi(fc12B6)
          femData:MeshCell cc16C9#1 = phi(cc12B4)
          real e16CA#1 = phi(e152B)
          real s16CB#1 = phi(s152C)
          tensor[2] interval16CC#1 = phi(interval12AE)
          int intersectionItter16CD#1 = phi(intersectionItter1514)
          int itter16CE#1 = phi(itter12AA)
          self.itter = itter16CE;
          self.intersectionItter = intersectionItter16CD;
          self.interval = interval16CC;
          self.s = s16CB;
          self.e = e16CA;
          self.cc = cc16C9;
          self.fc = fc16C8;
          self.out = out168F;
          self.rgba = rgba168E;
          self.locs = locs168D;
          active
        ASSIGN16DC:  preds = [COND1695]
          string _t16DB#1 = "---------------\n";
          Print<[string]>(_t16DB);
          goto JOIN16CF
        ASSIGN16DF:  preds = [COND15DC]
          real _t16DE#1 = TensorIndex<tensor[3],[0]>(mcol15DA);
          real _t16E0#1 = TensorIndex<tensor[3],[1]>(mcol15DA);
          real _t16E2#1 = TensorIndex<tensor[3],[2]>(mcol15DA);
          tensor[4] rgba1656#1 = <tensor[4]>[_t16DE,_t16E0,_t16E2,_t15A9];
          goto JOIN1657
        COND16E5:  preds = [COND152A]
          if _t1518 then goto JOIN16E8 else goto ASSIGN16FA
        JOIN16E8:  preds = [COND16E5,JOIN16FE]
          int _t16E6#1 = phi(_t1512,_t16E7)
          if _t151E then goto JOIN16EC else goto ASSIGN16F4
        JOIN16EC:  preds = [COND16E9,JOIN16F8]
          int _t16EA#1 = phi(_t1512,_t16EB)
          int _t16ED#1 = IMul(_t16E6,_t16EA);
          bool _t16EF#1 = GT<int>(_t16ED,_t1526);
          if _t16EF then goto JOIN16F2 else goto JOIN16F2
        JOIN16F2:  preds = [COND16F1,COND16F1]
          real s152D#1 = phi(cup1478,s1476)
          goto JOIN152E
        ASSIGN16F4:  preds = [COND16E9]
          bool _t16F3#1 = LT<real>(fm14DB,_t1516);
          if _t16F3 then goto ASSIGN16F7 else goto JOIN16F8
        ASSIGN16F7:  preds = [COND16F5]
          int _t16F6#1 = -1;
          goto JOIN16F8
        JOIN16F8:  preds = [ASSIGN16F7,COND16F5]
          int _t16EB#1 = phi(_t16F6,_t1526)
          goto JOIN16EC
        ASSIGN16FA:  preds = [COND16E5]
          bool _t16F9#1 = LT<real>(fa13F9,_t1516);
          if _t16F9 then goto ASSIGN16FD else goto JOIN16FE
        ASSIGN16FD:  preds = [COND16FB]
          int _t16FC#1 = -1;
          goto JOIN16FE
        JOIN16FE:  preds = [ASSIGN16FD,COND16FB]
          int _t16E7#1 = phi(_t16FC,_t1526)
          goto JOIN16E8
        ASSIGN1700:  preds = [COND1520]
          bool _t16FF#1 = LT<real>(fm14DB,_t1516);
          if _t16FF then goto ASSIGN1703 else goto ASSIGN1706
        ASSIGN1703:  preds = [COND1701]
          int _t1702#1 = -1;
          goto JOIN1705
        JOIN1705:  preds = [ASSIGN1703,ASSIGN1706]
          int _t1522#1 = phi(_t1702,_t1704)
          goto JOIN1523
        ASSIGN1706:  preds = [COND1701]
          int _t1704#1 = 0;
          goto JOIN1705
        ASSIGN1708:  preds = [COND151A]
          bool _t1707#1 = LT<real>(fa13F9,_t1516);
          if _t1707 then goto ASSIGN170B else goto ASSIGN170E
        ASSIGN170B:  preds = [COND1709]
          int _t170A#1 = -1;
          goto JOIN170D
        JOIN170D:  preds = [ASSIGN170B,ASSIGN170E]
          int _t151C#1 = phi(_t170A,_t170C)
          goto JOIN151D
        ASSIGN170E:  preds = [COND1709]
          int _t170C#1 = 0;
          goto JOIN170D
    end update
  end ray
## initial strand creation
  GRID(2)
    ENTRY170F:  preds = []
      int iresU1710#1 = globals.iresU1017;
      int iresV1712#1 = globals.iresV1018;
      int _t1714#2 = 0;
      int _t1716#2 = 1;
      int _t1718#1 = ISub(iresU1710,_t1716);
      int[] _t171A#1 = Range(_t1714,_t1718);
    FOREACH171D:  preds = [ASSIGN171B,NEXT1726]
      foreach (vi171C in _t171A) on exit goto RETURN1727
      int _t171E#1 = ISub(iresV1712,_t1716);
      int[] _t1720#1 = Range(_t1714,_t171E);
    FOREACH1723:  preds = [ASSIGN1721,NEXT1725]
      foreach (ui1722 in _t1720) on exit goto NEXT1726
      new ray(ui1722,vi171C);
      goto FOREACH1723
    NEXT1726:  preds = [FOREACH1723]
      goto FOREACH171D
    RETURN1727:  preds = [FOREACH171D]
      return
#### end program ####
##### mid-ir: after value numbering ####
## properties
  GlobalInit StrandArray HasStartMethod ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[]) HasInputs HasGlobals
## globals
  input isoval1011 (isoval) = <default>
  input thick1012 (thick) = <default>
  input camEye1013 (camEye) = <default>
  input camAt1014 (camAt) = <default>
  input camUp1015 (camUp) = <default>
  input camFOV1016 (camFOV) = <default>
  input iresU1017 (iresU) = <default>
  input iresV1018 (iresV) = <default>
  input camNear1019 (camNear) = <default>
  input camFar101A (camFar) = <default>
  input refStep101B (refStep) = <default>
  input rayStep101C (rayStep) = <default>
  input a101D (a) = <no-default>
  input 0b046F_intermedateGlobal101E (b) = <no-default>
  input 0c0471_intermedateGlobal101F (c) = <no-default>
  input zeroEps1020 (zeroEps) = <default>
  input intervalEps1021 (intervalEps) = <default>
  input indecies1022 (indecies) = <no-default>
  input times1023 (times) = <no-default>
  input cells1024 (cells) = <no-default>
  input mcnear1025 (mcnear) = <default>
  input mcfar1026 (mcfar) = <default>
  input cmap1027 (cmap) = image("/home/teocollin/gitcode/diderot/tests/lipRay/find/cmap.nrrd")
  input cmin1028 (cmin) = <default>
  input cmax1029 (cmax) = <default>
  input light102A (light) = <default>
  input phongKa102B (phongKa) = <default>
  input phongKd102C (phongKd) = <default>
  input phongKs102D (phongKs) = <default>
  input phongSp102E (phongSp) = <default>
  input maxAlpha102F (maxAlpha) = <default>
  input lightVsp1030 (lightVsp) = <default>
  input debug1031 (debug) = <default>
  input debugU1032 (debugU) = <default>
  input debugV1033 (debugV) = <default>
  global femData:MeshCell[] 0cell_a1034
  global femData:FemFunc c1035
  global real camNearVsp1036
  global real camFarVsp1037
  global tensor[3] camN1038
  global tensor[3] camU1039
  global tensor[3] camV103A
  global real camVmax103B
  global real camUmax103C
  global tensor[3] L103D
  global image(IMAGE1D<double[3]>) img103E
  global kernel _t103F
## functions
  function femData:MeshPos _0A92_msh_newtonInverse12ED (tensor[2] pos12EE#3, int cellInt12EF#7, femData:Mesh mesh12F0#10) {
    ENTRY12F1:  preds = []
      real _t12F2#2 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
      tensor[2] xn12F4#8 = <tensor[2]>[_t12F2,_t12F2];
      int _t12F6#1 = 0;
      int _t12F8#1 = 16;
      int[] _t12FA#1 = Range(_t12F6,_t12F8);
    FOREACH12FD:  preds = [ASSIGN12FB,NEXT13DA]
      foreach (itter12FC in _t12FA) on exit goto ASSIGN13DF
        tensor[2] xn12FF#6 = phi(xn12F4,xn12FE)
      int[3] femIndicies130C#1 = ExtractFemItem2<int,int[3],ExtractIndices(Mesh)>(mesh12F0,cellInt12EF);
      tensor[3,2] femDofs130D#5 = ExtractFemItem2<int[3],tensor[3,2],ExtractDofsSeq(Mesh)>(mesh12F0,femIndicies130C);
      tensor[2,3] basisResult130E#3 = EvaluateBasis<BasisArray(2,3)>(xn12F4);
      tensor[2,2] probe_l_101300#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i3=0..2)<((T3_{i3,i0} * T4_{i1,i3}))>(i3=0..2)>_{2 2} (cellInt12EF,mesh12F0,xn12F4,femDofs130D,basisResult130E,xn12F4);
      tensor[2,2] op1_e3_l_111301#1 = λ(T0[2 2])<Σ(i2=0..1)<((ϵ_{ii2,ii0} * T0_{i2,i1}))>(i2=0..1)>_{2 2} (probe_l_101300);
      tensor[2] probe_l_121302#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i2=0..2)<((T3_{i2,i0} * T4_{'0',i2}))>(i2=0..2)>_{2} (cellInt12EF,mesh12F0,xn12F4,femDofs130D,basisResult130E,xn12F4);
      tensor[2] probe_l_131303#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i2=0..2)<((T3_{i2,i0} * T4_{'1',i2}))>(i2=0..2)>_{2} (cellInt12EF,mesh12F0,xn12F4,femDofs130D,basisResult130E,xn12F4);
      tensor[2] op1_e3_l_141304#1 = λ(T0[2])<Σ(i1=0..1)<((ϵ_{ii0,ii1} * T0_{i1}))>(i1=0..1)>_{2} (probe_l_131303);
      tensor[2,2] op1_e3_l_151305#1 = λ(T0[2 2])<Σ(i2=0..1)<((ϵ_{ii2,ii0} * T0_{i1,i2}))>(i2=0..1)>_{2 2} (op1_e3_l_111301);
      real op1_e3_l_161306#1 = λ(T0[2],T1[2])<Σ(i0=0..1)<((T0_{i0} * T1_{i0}))>(i0=0..1)> (probe_l_121302,op1_e3_l_141304);
      tensor[3] basisResult1314#2 = EvaluateBasis<BasisArray(3)>(xn12FF);
      tensor[2] probe_l_171307#1 = λ(T0[2],INT1,FEM(msh)2,T3[3 2],T4[3],T5[2])<Σ(i1=0..2)<((T3_{i1,i0} * T4_{i1}))>(i1=0..2)>_{2} (xn12FF,cellInt12EF,mesh12F0,femDofs130D,basisResult1314,xn12FF);
      tensor[2,2] op1_e3_l_181308#2 = λ(T0[2 2],T1[])<(T0_{i0,i1}) / ( T1)>_{2 2} (op1_e3_l_151305,op1_e3_l_161306);
      tensor[2] op1_e3_l_191309#1 = λ(T0[2],T1[2])<(T1_{i0}) - (T0_{i0})>_{2} (pos12EE,probe_l_171307);
      tensor[2] op1_e3_l_20130A#1 = λ(T0[2 2],T1[2])<Σ(i1=0..1)<((T0_{i0,i1} * T1_{i1}))>(i1=0..1)>_{2} (op1_e3_l_181308,op1_e3_l_191309);
      tensor[2] xn12FE#4 = λ(T0[2],T1[2])<(T0_{i0}) - (T1_{i0})>_{2} (xn12FF,op1_e3_l_20130A);
      real _t132B#2 = 0.1e-7;
      real _t132D#1 = λ(T0[],T1[])<(T0 * T1)> (_t132B,_t132B);
      tensor[2] probe_l_251337#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[3],T5[2])<Σ(i1=0..2)<((T3_{i1,i0} * T4_{i1}))>(i1=0..2)>_{2} (cellInt12EF,mesh12F0,xn12FF,femDofs130D,basisResult1314,xn12FF);
      tensor[2] op1_e3_l_271339#1 = λ(T0[2],T1[2])<(T1_{i0}) - (T0_{i0})>_{2} (pos12EE,probe_l_251337);
      tensor[2] op1_e3_l_38133A#2 = λ(T0[2 2],T1[2])<Σ(i1=0..1)<((T0_{i0,i1} * T1_{i1}))>(i1=0..1)>_{2} (op1_e3_l_181308,op1_e3_l_271339);
      real _t132F#1 = λ(T0[2],T1[2])<Σ(i0=0..1)<((T0_{i0} * T1_{i0}))>(i0=0..1)> (op1_e3_l_38133A,op1_e3_l_38133A);
      bool _t135B#1 = GTE<real>(_t132D,_t132F);
      if _t135B then goto ASSIGN135F else goto JOIN13D9
    ASSIGN135F:  preds = [COND135D]
      real _t135E#3 = 0.1e1;
      real _t1360#3 = 0.1e-8;
      real _t1362#1 = λ(T0[],T1[])<(T0 + T1)> (_t135E,_t1360);
      tensor[2] _t1364#1 = <tensor[2]>[_t135E,_t135E];
      real _t1366#1 = λ(T0[2],T1[2])<Σ(i0=0..1)<((T0_{i0} * T1_{i0}))>(i0=0..1)> (_t1364,xn12FE);
      bool _t1394#1 = GT<real>(_t1362,_t1366);
      tensor[2] _t1396#1 = <tensor[2]>[_t1360,_t1360];
      tensor[2] _t1398#2 = λ(T0[2],T1[2])<(T0_{i0} + T1_{i0})>_{2} (_t1396,xn12FE);
      real _t13C6#1 = TensorIndex<tensor[2],[0]>(_t1398);
      real _t13C8#2 = -0.e0;
      bool _t13CA#1 = GT<real>(_t13C6,_t13C8);
      real _t13CC#1 = TensorIndex<tensor[2],[1]>(_t1398);
      bool _t13CE#1 = GT<real>(_t13CC,_t13C8);
      bool _t13D0#1 = BAnd(_t13CA,_t13CE);
      bool _t13D2#1 = BAnd(_t1394,_t13D0);
      if _t13D2 then goto ASSIGN13D6 else goto ASSIGN13DC
    ASSIGN13D6:  preds = [COND13D4]
      femData:MeshPos _t13D5#1 = ExtractFemItemN<[femData:Mesh,int,tensor[2],tensor[2]],femData:MeshPos,AllBuild(MeshPos),0000,"",[],int>(mesh12F0,cellInt12EF,xn12FE,pos12EE);
      return _t13D5
      goto JOIN13D8
    JOIN13D8:  preds = [*RETURN(_t13D5)13D7,*RETURN(_t13DB)13DD]
      goto JOIN13D9
    JOIN13D9:  preds = [*JOIN13D8,COND135D]
      goto FOREACH12FD
    ASSIGN13DC:  preds = [COND13D4]
      femData:MeshPos _t13DB#1 = ExtractFemItemN<[femData:Mesh],femData:MeshPos,InvalidBuild(MeshPos),0000,"",[],int>(mesh12F0);
      return _t13DB
      goto JOIN13D8
    ASSIGN13DF:  preds = [FOREACH12FD]
      femData:MeshPos _t13DE#1 = ExtractFemItemN<[femData:Mesh],femData:MeshPos,InvalidBuild(MeshPos),0000,"",[],int>(mesh12F0);
      return _t13DE
}
## input initialization
  ENTRY1040:  preds = []
    real isoval1041#1 = 0.2e0;
    globals.isoval1011 = isoval1041;
    real thick1044#1 = 0.7e-1;
    globals.thick1012 = thick1044;
    real _t1047#2 = 0.3e1;
    real _t1049#1 = -0.3e1;
    tensor[3] camEye104B#1 = <tensor[3]>[_t1047,_t1049,_t1047];
    globals.camEye1013 = camEye104B;
    real _t104E#5 = 0.5e0;
    tensor[3] camAt1050#1 = <tensor[3]>[_t104E,_t104E,_t104E];
    globals.camAt1014 = camAt1050;
    real _t1053#5 = 0.e0;
    real _t1055#7 = 0.1e1;
    tensor[3] camUp1057#1 = <tensor[3]>[_t1053,_t1053,_t1055];
    globals.camUp1015 = camUp1057;
    real camFOV105A#1 = 0.137e2;
    globals.camFOV1016 = camFOV105A;
    int iresU105D#2 = 10;
    globals.iresU1017 = iresU105D;
    globals.iresV1018 = iresU105D;
    real camNear1061#1 = -0.2e1;
    globals.camNear1019 = camNear1061;
    real camFar1064#1 = 0.5e1;
    globals.camFar101A = camFar1064;
    globals.refStep101B = _t1055;
    real rayStep1068#1 = 0.1e-1;
    globals.rayStep101C = rayStep1068;
    real zeroEps106B#2 = 0.1e-10;
    globals.zeroEps1020 = zeroEps106B;
    globals.intervalEps1021 = zeroEps106B;
    tensor[3] mcnear106F#2 = <tensor[3]>[_t1055,_t1055,_t1055];
    globals.mcnear1025 = mcnear106F;
    globals.mcfar1026 = mcnear106F;
    globals.cmin1028 = _t1053;
    globals.cmax1029 = _t1055;
    bool light1075#2 = false;
    globals.light102A = light1075;
    globals.phongKa102B = _t104E;
    globals.phongKd102C = _t104E;
    globals.phongKs102D = _t1053;
    real phongSp107B#1 = 0.6e2;
    globals.phongSp102E = phongSp107B;
    globals.maxAlpha102F = _t1055;
    real _t107F#1 = 0.369e1;
    real _t1081#1 = 0.153e1;
    tensor[3] lightVsp1083#1 = <tensor[3]>[_t1053,_t107F,_t1081];
    globals.lightVsp1030 = lightVsp1083;
    globals.debug1031 = light1075;
    int debugU1087#1 = 8;
    globals.debugU1032 = debugU1087;
    int debugV108A#1 = 2;
    globals.debugV1033 = debugV108A;
    return
## global-variable initialization
  ENTRY108E:  preds = []
    tensor[3] camEye108F#1 = globals.camEye1013;
    tensor[3] camAt1091#1 = globals.camAt1014;
    tensor[3] camUp1093#1 = globals.camUp1015;
    real camFOV1095#1 = globals.camFOV1016;
    int iresU1097#1 = globals.iresU1017;
    int iresV1099#1 = globals.iresV1018;
    real camNear109B#1 = globals.camNear1019;
    real camFar109D#1 = globals.camFar101A;
    femData:Mesh a109F#3 = globals.a101D;
    femData:Space 0b046F_intermedateGlobal10A1#1 = globals.0b046F_intermedateGlobal101E;
    femData:FemFunc 0c0471_intermedateGlobal10A3#1 = globals.0c0471_intermedateGlobal101F;
    image(IMAGE1D<double[3]>) cmap10A5#1 = globals.cmap1027;
    tensor[3] lightVsp10A7#2 = globals.lightVsp1030;
    int _t10A9#1 = 0;
    int _t10AB#1 = 1;
    int _t10AD#1 = ExtractFemItem<int,NumCell(Mesh)>(a109F);
    int _t10AF#1 = ISub(_t10AD,_t10AB);
    int[] _t10B1#1 = Range(_t10A9,_t10AF);
    femData:MeshCell[] _t10B3#1 = <femData:MeshCell[]>{};
  FOREACH10B6:  preds = [ASSIGN10B4,NEXT10BC]
    foreach (_t10B5 in _t10B1) on exit goto GASSIGN10BD
      femData:MeshCell[] _t10BA#2 = phi(_t10B3,_t10B9)
    femData:MeshCell _t10B7#1 = LoadFem<femData:MeshCell>(a109F,_t10B5);
    femData:MeshCell[] _t10B9#1 = Append<femData:MeshCell>(_t10BA,_t10B7);
    goto FOREACH10B6
  GASSIGN10BD:  preds = [FOREACH10B6]
    globals.0cell_a1034 = _t10BA;
    femData:Space b10BE#1 = LoadFem<femData:Space>(0b046F_intermedateGlobal10A1,a109F);
    femData:FemFunc c10C0#1 = LoadFem<femData:FemFunc>(0c0471_intermedateGlobal10A3,b10BE);
    globals.c1035 = c10C0;
    tensor[3] op1_e3_l_310C4#5 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (camAt1091,camEye108F);
    real op1_e3_l_510C5#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_310C4,op1_e3_l_310C4);
    real op1_e3_l_610C6#5 = λ(T0[])<Sqrt(T0)> (op1_e3_l_510C5);
    real camNearVsp10C3#1 = λ(T0[],T1[])<(T0 + T1)> (camNear109B,op1_e3_l_610C6);
    globals.camNearVsp1036 = camNearVsp10C3;
    real camFarVsp10CC#1 = λ(T0[],T1[])<(T0 + T1)> (camFar109D,op1_e3_l_610C6);
    globals.camFarVsp1037 = camFarVsp10CC;
    real op1_e3_l_910D9#6 = λ(T0[])<(1) / ( T0)> (op1_e3_l_610C6);
    tensor[3] camN10D5#2 = λ(T0[3],T1[])<(T0_{i0} * T1)>_{3} (op1_e3_l_310C4,op1_e3_l_910D9);
    globals.camN1038 = camN10D5;
    tensor[3,3] op1_e3_l_1510E4#1 = λ(T0[3])<Σ(i2=0..2)<((ϵ_{ii0,ii1,ii2} * T0_{i2}))>(i2=0..2)>_{3 3} (camUp1093);
    tensor[3] op1_e3_l_1710E6#4 = λ(T0[3],T1[3 3])<Σ(i1=0..2)<((T0_{i1} * T1_{i0,i1}))>(i1=0..2)>_{3} (op1_e3_l_310C4,op1_e3_l_1510E4);
    real op1_e3_l_3410E7#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_1710E6,op1_e3_l_1710E6);
    real op1_e3_l_3510E8#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (op1_e3_l_910D9,op1_e3_l_910D9,op1_e3_l_3410E7);
    real op1_e3_l_3610E9#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_3510E8);
    tensor[3] op1_e3_l_3710EA#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (op1_e3_l_910D9,op1_e3_l_1710E6);
    real op1_e3_l_3810EB#2 = λ(T0[])<(1) / ( T0)> (op1_e3_l_3610E9);
    tensor[3] camU10E0#2 = λ(T0[3],T1[])<(T0_{i0} * T1)>_{3} (op1_e3_l_3710EA,op1_e3_l_3810EB);
    globals.camU1039 = camU10E0;
    tensor[3,3] op1_e3_l_451103#1 = λ(T0[3])<Σ(i2=0..2)<((ϵ_{ii0,ii1,ii2} * T0_{i2}))>(i2=0..2)>_{3 3} (op1_e3_l_310C4);
    tensor[3] op1_e3_l_471104#1 = λ(T0[3],T1[3 3])<Σ(i1=0..2)<((T0_{i1} * T1_{i0,i1}))>(i1=0..2)>_{3} (op1_e3_l_1710E6,op1_e3_l_451103);
    tensor[3] op1_e3_l_501106#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (op1_e3_l_910D9,op1_e3_l_471104);
    tensor[3] camV10F9#2 = λ(T0[],T1[],T2[3])<(T0 * T1 * T2_{i0})>_{3} (op1_e3_l_3810EB,op1_e3_l_910D9,op1_e3_l_501106);
    globals.camV103A = camV10F9;
    real _t1116#1 = 0.314159265358979323846264338327950288e1;
    real _t1118#1 = 0.36e3;
    real op1_e3_l_5111B#1 = λ(T0[],T1[])<(T0 * T1)> (camFOV1095,_t1116);
    real op1_e3_l_6111C#1 = λ(T0[],T1[])<(T1) / ( T0)> (_t1118,op1_e3_l_5111B);
    real op1_e3_l_10111F#2 = λ(T0[])<Tangent(T0)> (op1_e3_l_6111C);
    real camVmax111A#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_10111F,op1_e3_l_610C6);
    globals.camVmax103B = camVmax111A;
    real _t1129#1 = IntToReal(iresU1097);
    real _t112B#1 = IntToReal(iresV1099);
    real op1_e3_l_141134#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1129,op1_e3_l_10111F,op1_e3_l_610C6);
    real camUmax112D#1 = λ(T0[],T1[])<(T1) / ( T0)> (_t112B,op1_e3_l_141134);
    globals.camUmax103C = camUmax112D;
    kernel _t113E#1 = Kernel<tent,0>;
    image(IMAGE1D<double[3]>) img1140#1 = BorderCtlClamp<IMAGE1D<double[3]>>(cmap10A5);
    tensor[3,3] _t1142#1 = <tensor[3,3]>[camU10E0,camV10F9,camN10D5];
    real op1_e3_l_31145#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (lightVsp10A7);
    real op1_e3_l_41146#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_31145);
    real op1_e3_l_51147#1 = λ(T0[])<(1) / ( T0)> (op1_e3_l_41146);
    tensor[3] op1_e3_l_61148#1 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i1,i0} * T1_{i1}))>(i1=0..2)>_{3} (_t1142,lightVsp10A7);
    tensor[3] L1144#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (op1_e3_l_51147,op1_e3_l_61148);
    globals.L103D = L1144;
    globals.img103E = img1140;
    globals._t103F = _t113E;
    return
## strand
  strand ray (int ui1152#3, int vi1153#4)
    state:
      real rayU;
      real rayV;
      tensor[3] UV;
      tensor[3] rayOrig;
      tensor[3] rayVec;
      real camNearVsp;
      real camFarVsp;
      int offset;
      int len;
      int itter;
      int intersectionItter;
      int idx;
      tensor[2] interval;
      real s;
      real e;
      femData:MeshCell cc;
      femData:FuncCell fc;
      output real out;
      output tensor[4] rgba;
      output tensor[3][] locs;
      int ui;
      int vi;
    state init
      ENTRY116A:  preds = []
        tensor[3] camEye116B#1 = globals.camEye1013;
        int iresU116D#2 = globals.iresU1017;
        int iresV116F#3 = globals.iresV1018;
        femData:MeshCell[] 0cell_a1171#1 = globals.0cell_a1034;
        femData:FemFunc c1173#1 = globals.c1035;
        int[] indecies1175#2 = globals.indecies1022;
        tensor[2][] times1177#1 = globals.times1023;
        real camNearVsp1179#1 = globals.camNearVsp1036;
        real camFarVsp117B#1 = globals.camFarVsp1037;
        tensor[3] camN117D#1 = globals.camN1038;
        tensor[3] camU117F#1 = globals.camU1039;
        tensor[3] camV1181#1 = globals.camV103A;
        real camVmax1183#2 = globals.camVmax103B;
        real camUmax1185#2 = globals.camUmax103C;
        real _t1187#5 = -0.5e0;
        real _t1189#1 = IntToReal(ui1152);
        real _t118B#1 = IntToReal(iresU116D);
        real _t118D#3 = 0.5e0;
        real op1_e3_l_61190#1 = λ(T0[],T1[])<(T0) - (T1)> (_t118B,_t118D);
        real op1_e3_l_71191#1 = λ(T0[],T1[])<(T1) - (T0)> (_t1187,_t1189);
        real op1_e3_l_81192#1 = λ(T0[],T1[])<(T1) - (T0)> (_t1187,op1_e3_l_61190);
        real op1_e3_l_91193#2 = λ(T0[])<Neg(T0)> (camUmax1185);
        real op1_e3_l_101194#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_71191,op1_e3_l_81192);
        real op1_e3_l_111195#1 = λ(T0[],T1[])<(T0) - (T1)> (camUmax1185,op1_e3_l_91193);
        real op1_e3_l_131196#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_101194,op1_e3_l_111195);
        real rayU118F#2 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_91193,op1_e3_l_131196);
        real _t119F#1 = IntToReal(vi1153);
        real _t11A1#2 = IntToReal(iresV116F);
        real op1_e3_l_611A4#1 = λ(T0[],T1[])<(T0) - (T1)> (_t11A1,_t118D);
        real op1_e3_l_711A5#2 = λ(T0[],T1[])<(T1) - (T0)> (_t1187,_t119F);
        real op1_e3_l_811A6#1 = λ(T0[],T1[])<(T1) - (T0)> (_t1187,op1_e3_l_611A4);
        real op1_e3_l_911A7#3 = λ(T0[])<Neg(T0)> (camVmax1183);
        real op1_e3_l_1011A8#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_711A5,op1_e3_l_811A6);
        real op1_e3_l_1111A9#2 = λ(T0[],T1[])<(T0) - (T1)> (camVmax1183,op1_e3_l_911A7);
        real op1_e3_l_1311AA#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_1011A8,op1_e3_l_1111A9);
        real rayV11A3#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_911A7,op1_e3_l_1311AA);
        real op1_e3_l_2311BC#1 = λ(T0[],T1[])<(T1) - (T0)> (_t118D,_t11A1);
        real op1_e3_l_2511BE#1 = λ(T0[],T1[])<(T1) - (T0)> (_t1187,op1_e3_l_2311BC);
        real op1_e3_l_2711C0#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_711A5,op1_e3_l_2511BE);
        real op1_e3_l_3011C2#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_2711C0,op1_e3_l_1111A9);
        real op1_e3_l_3111C3#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_911A7,op1_e3_l_3011C2);
        tensor[3] op1_e3_l_3211C4#2 = λ(T0[3],T1[])<(T1 * T0_{i0})>_{3} (camU117F,rayU118F);
        tensor[3] op1_e3_l_3311C5#2 = λ(T0[3],T1[])<(T1 * T0_{i0})>_{3} (camV1181,op1_e3_l_3111C3);
        tensor[3] UV11B3#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (op1_e3_l_3211C4,op1_e3_l_3311C5);
        tensor[3] rayOrig11D9#1 = λ(T0[3],T1[3],T2[3])<(T0_{i0} + T1_{i0} + T2_{i0})>_{3} (camEye116B,op1_e3_l_3211C4,op1_e3_l_3311C5);
        real _t11FF#8 = 0.e0;
        tensor[3] _t1201#1 = <tensor[3]>[_t11FF,_t11FF,_t11FF];
        tensor[3] rayVec1203#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (camN117D,_t1201);
        int _t1205#2 = IMul(ui1152,iresV116F);
        int _t1207#1 = IAdd(_t1205,vi1153);
        int offset1209#2 = Subscript<int[]>(indecies1175,_t1207);
        int _t120B#1 = IMul(iresU116D,iresV116F);
        int _t120D#1 = IAdd(_t120B,_t1205);
        int _t120F#1 = IAdd(_t120D,vi1153);
        int len1211#1 = Subscript<int[]>(indecies1175,_t120F);
        int itter1213#4 = 0;
        int idx1215#2 = IAdd(offset1209,itter1213);
        tensor[2] interval1217#3 = Subscript<tensor[2][]>(times1177,idx1215);
        real s1219#1 = TensorIndex<tensor[2],[0]>(interval1217);
        real e121B#1 = TensorIndex<tensor[2],[1]>(interval1217);
        femData:MeshCell cc121D#2 = Subscript<femData:MeshCell[]>(0cell_a1171,itter1213);
        int _t121F#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc121D);
        femData:FuncCell _t1221#1 = LoadFem<femData:FuncCell>(c1173,_t121F);
        tensor[4] rgba1223#1 = <tensor[4]>[_t11FF,_t11FF,_t11FF,_t11FF];
        tensor[3][0] _t1225#1 = <tensor[3][0]>{};
        tensor[3][] _t1227#1 = MkDynamic<tensor[3],0>(_t1225);
        self.rayU = rayU118F;
        self.rayV = rayV11A3;
        self.UV = UV11B3;
        self.rayOrig = rayOrig11D9;
        self.rayVec = rayVec1203;
        self.camNearVsp = camNearVsp1179;
        self.camFarVsp = camFarVsp117B;
        self.offset = offset1209;
        self.len = len1211;
        self.itter = itter1213;
        self.intersectionItter = itter1213;
        self.idx = idx1215;
        self.interval = interval1217;
        self.s = s1219;
        self.e = e121B;
        self.cc = cc121D;
        self.fc = _t1221;
        self.out = _t11FF;
        self.rgba = rgba1223;
        self.locs = _t1227;
        self.ui = ui1152;
        self.vi = vi1153;
        return
    end state init
    method start
        ENTRY1240:  preds = []
          femData:MeshCell[] 0cell_a1241#1 = globals.0cell_a1034;
          femData:FemFunc c1243#1 = globals.c1035;
          int[] cells1245#1 = globals.cells1024;
          bool debug1247#1 = globals.debug1031;
          int debugU1249#1 = globals.debugU1032;
          int debugV124B#1 = globals.debugV1033;
          int len124D#1 = self.len;
          int idx124F#1 = self.idx;
          int ui1251#2 = self.ui;
          int vi1253#2 = self.vi;
          if debug1247 then goto ASSIGN1257 else goto JOIN125F
        ASSIGN1257:  preds = [COND1255]
          bool _t1256#1 = NEQ<int>(ui1251,debugU1249);
          if _t1256 then goto ASSIGN125A else goto JOIN125E
        ASSIGN125A:  preds = [COND1258]
          bool _t1259#1 = NEQ<int>(vi1253,debugV124B);
          if _t1259 then goto STABILIZE125C else goto JOIN125D
        STABILIZE125C:  preds = [COND125B]
          stabilize
          goto JOIN125D
        JOIN125D:  preds = [*STABILIZE125C,COND125B]
          goto JOIN125E
        JOIN125E:  preds = [JOIN125D,COND1258]
          goto JOIN125F
        JOIN125F:  preds = [JOIN125E,COND1255]
          int _t1260#1 = 0;
          bool _t1262#1 = EQ<int>(len124D,_t1260);
          if _t1262 then goto ASSIGN1266 else goto JOIN126D
        ASSIGN1266:  preds = [COND1264]
          string _t1265#1 = "(find:)No intersection found:";
          string _t1267#1 = "/";
          string _t1269#1 = "\n";
          Print<[string,int,string,int,string]>(_t1265,ui1251,_t1267,vi1253,_t1269);
          stabilize
          goto JOIN126D
        JOIN126D:  preds = [*STABILIZE126C,COND1264]
          int _t126E#1 = Subscript<int[]>(cells1245,idx124F);
          femData:MeshCell cc1270#2 = Subscript<femData:MeshCell[]>(0cell_a1241,_t126E);
          int _t1272#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc1270);
          femData:FuncCell _t1274#1 = LoadFem<femData:FuncCell>(c1243,_t1272);
          self.cc = cc1270;
          self.fc = _t1274;
          active
    end start
    method update
        ENTRY1279:  preds = []
          image(IMAGE1D<double[3]>) cmap1729#3 = globals.cmap1027;
          image(IMAGE1D<double[3]>) img127A#1 = globals.img103E;
          kernel _t127C#1 = globals._t103F;
          femData:MeshCell[] 0cell_a127E#1 = globals.0cell_a1034;
          femData:FemFunc c1280#1 = globals.c1035;
          real zeroEps1282#1 = globals.zeroEps1020;
          real intervalEps1284#4 = globals.intervalEps1021;
          tensor[2][] times1286#1 = globals.times1023;
          int[] cells1288#1 = globals.cells1024;
          tensor[3] mcnear128A#2 = globals.mcnear1025;
          tensor[3] mcfar128C#1 = globals.mcfar1026;
          real cmin128E#3 = globals.cmin1028;
          real cmax1290#2 = globals.cmax1029;
          bool light1292#1 = globals.light102A;
          real phongKa1294#1 = globals.phongKa102B;
          real phongKd1296#1 = globals.phongKd102C;
          real phongKs1298#1 = globals.phongKs102D;
          real phongSp129A#1 = globals.phongSp102E;
          tensor[3] L129C#2 = globals.L103D;
          tensor[3] rayOrig129E#4 = self.rayOrig;
          tensor[3] rayVec12A0#6 = self.rayVec;
          real camNearVsp12A2#2 = self.camNearVsp;
          real camFarVsp12A4#1 = self.camFarVsp;
          int offset12A6#1 = self.offset;
          int len12A8#1 = self.len;
          int itter12AA#3 = self.itter;
          int intersectionItter12AC#2 = self.intersectionItter;
          tensor[2] interval12AE#1 = self.interval;
          real s12B0#7 = self.s;
          real e12B2#5 = self.e;
          femData:MeshCell cc12B4#3 = self.cc;
          femData:FuncCell fc12B6#3 = self.fc;
          real out12B8#2 = self.out;
          tensor[4] rgba12BA#1 = self.rgba;
          tensor[3][] locs12BC#1 = self.locs;
          int ui12BE#1 = self.ui;
          int vi12C0#1 = self.vi;
          string _t12C2#1 = "Ui/Vi::";
          string _t12C4#1 = "/";
          string _t12C6#11 = "\n";
          Print<[string,int,string,int,string]>(_t12C2,ui12BE,_t12C4,vi12C0,_t12C6);
          string _t12C9#1 = "Interval:";
          tensor[2] _t12CB#1 = <tensor[2]>[s12B0,e12B2];
          Print<[string,tensor[2],string]>(_t12C9,_t12CB,_t12C6);
          string _t12CE#1 = "inner itter:";
          Print<[string,int,string]>(_t12CE,intersectionItter12AC,_t12C6);
          string _t12D1#1 = "Outer itter:";
          Print<[string,int,string]>(_t12D1,itter12AA,_t12C6);
          real _t12D4#1 = TensorIndex<tensor[3],[0]>(rayOrig129E);
          real _t12D6#1 = TensorIndex<tensor[3],[1]>(rayOrig129E);
          tensor[2] _t12D8#3 = <tensor[2]>[_t12D4,_t12D6];
          real _t12DA#1 = TensorIndex<tensor[3],[0]>(rayVec12A0);
          real _t12DC#1 = TensorIndex<tensor[3],[1]>(rayVec12A0);
          tensor[2] _t12DE#3 = <tensor[2]>[_t12DA,_t12DC];
          tensor[2] op1_e3_l_312E1#1 = λ(T0[],T1[2])<(T0 * T1_{i0})>_{2} (s12B0,_t12DE);
          tensor[2] startRay12E0#1 = λ(T0[2],T1[2])<(T0_{i0} + T1_{i0})>_{2} (_t12D8,op1_e3_l_312E1);
          tensor[2] op1_e3_l_312E5#1 = λ(T0[],T1[2])<(T0 * T1_{i0})>_{2} (e12B2,_t12DE);
          tensor[2] endRay12E4#1 = λ(T0[2],T1[2])<(T0_{i0} + T1_{i0})>_{2} (_t12D8,op1_e3_l_312E5);
          femData:Mesh _t12E8#8 = ExtractFem<femData:Mesh,femData:MeshCell>(cc12B4);
          int _t12EA#7 = ExtractFemItem<int,CellIndex(MeshCell)>(cc12B4);
          femData:MeshPos callNewtonPos13E1#1 = _0A92_msh_newtonInverse12ED (startRay12E0,_t12EA,_t12E8);
          tensor[2] refPos13E2#4 = ExtractFemItem<tensor[2],RefPos(Mesh)>(callNewtonPos13E1);
          femData:MeshPos callNewtonPos13E7#1 = _0A92_msh_newtonInverse12ED (endRay12E4,_t12EA,_t12E8);
          tensor[2] refPos13E8#4 = ExtractFemItem<tensor[2],RefPos(Mesh)>(callNewtonPos13E7);
          string _t13EC#1 = "inverses:";
          Print<[string,tensor[2],tensor[2],string]>(_t13EC,refPos13E2,refPos13E8,_t12C6);
          femData:FemFunc _t13EF#6 = ExtractFem<femData:FemFunc,femData:FuncCell>(fc12B6);
          femData:Space _t13F1#5 = ExtractFem<femData:Space,femData:FemFunc>(_t13EF);
          int _t13F3#5 = ExtractFemItem<int,CellIndex(FuncCell)>(fc12B6);
          real _t13F5#3 = TensorIndex<tensor[3],[2]>(rayVec12A0);
          real _t13F7#3 = TensorIndex<tensor[3],[2]>(rayOrig129E);
          int[6] femIndicies13FE#1 = ExtractFemItem2<int,int[6],ExtractIndices(Space)>(_t13F1,_t13F3);
          tensor[6] femDofs13FF#4 = ExtractFemItem2<int[6],tensor[6],ExtractDofsSeq(FemFunc)>(_t13EF,femIndicies13FE);
          tensor[6] basisResult1400#1 = EvaluateBasis<BasisArray(6)>(refPos13E2);
          real probe_l_713FA#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[6],T6[2])<Σ(i0=0..5)<((T4_{i0} * T5_{i0}))>(i0=0..5)> (_t13F3,_t13F1,_t13EF,refPos13E2,femDofs13FF,basisResult1400,refPos13E2);
          real op1_e3_l_813FB#1 = λ(T0[],T1[])<(T0 * T1)> (_t13F5,s12B0);
          real op1_e3_l_913FC#1 = λ(T0[],T1[])<(T0) - (T1)> (probe_l_713FA,op1_e3_l_813FB);
          real fa13F9#9 = λ(T0[],T1[])<(T1) - (T0)> (_t13F7,op1_e3_l_913FC);
          tensor[6] basisResult1410#1 = EvaluateBasis<BasisArray(6)>(refPos13E8);
          real probe_l_7140A#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[6],T6[2])<Σ(i0=0..5)<((T4_{i0} * T5_{i0}))>(i0=0..5)> (_t13F3,_t13F1,_t13EF,refPos13E8,femDofs13FF,basisResult1410,refPos13E8);
          real op1_e3_l_8140B#1 = λ(T0[],T1[])<(T0 * T1)> (_t13F5,e12B2);
          real op1_e3_l_9140C#1 = λ(T0[],T1[])<(T0) - (T1)> (probe_l_7140A,op1_e3_l_8140B);
          real fb1409#6 = λ(T0[],T1[])<(T1) - (T0)> (_t13F7,op1_e3_l_9140C);
          string _t1419#1 = "Vals:";
          tensor[2] _t141B#1 = <tensor[2]>[fa13F9,fb1409];
          Print<[string,tensor[2],string]>(_t1419,_t141B,_t12C6);
          real op1_e3_l_221427#1 = λ(T0[],T1[])<(T0) - (T1)> (fa13F9,fb1409);
          real _t141E#1 = λ(T0[])<Abs(T0)> (op1_e3_l_221427);
          bool _t143E#1 = LT<real>(_t141E,intervalEps1284);
          if _t143E then goto ASSIGN174D else goto JOIN1477
        ASSIGN174D:  preds = [COND1440]
          real _t1441#1 = λ(T0[])<Abs(T0)> (fa13F9);
          bool _t1453#1 = GT<real>(_t1441,intervalEps1284);
          if _t1453 then goto ASSIGN174E else goto JOIN1475
        ASSIGN174E:  preds = [COND1455]
          real _t1456#1 = λ(T0[])<Abs(T0)> (fb1409);
          bool _t1468#1 = GT<real>(_t1456,intervalEps1284);
          if _t1468 then goto ASSIGN146C else goto JOIN1473
        ASSIGN146C:  preds = [COND146A]
          string _t146B#1 = "warn\n";
          Print<[string]>(_t146B);
          real s146E#1 = λ(T0[],T1[])<(T0 + T1)> (s12B0,intervalEps1284);
          self.s = s146E;
          active
          goto JOIN1473
        JOIN1473:  preds = [*ACTIVE1471,COND146A]
          real s1472#1 = phi(s12B0)
          goto JOIN1475
        JOIN1475:  preds = [JOIN1473,COND1455]
          real s1474#1 = phi(s1472,s12B0)
          goto JOIN1477
        JOIN1477:  preds = [JOIN1475,COND1440]
          real s1476#3 = phi(s1474,s12B0)
          real op1_e3_l_381481#1 = λ(T0[],T1[])<(T0 * T1)> (s1476,fb1409);
          real op1_e3_l_391482#1 = λ(T0[],T1[])<(T0 * T1)> (e12B2,fa13F9);
          real op1_e3_l_481483#1 = λ(T0[],T1[])<(T0) - (T1)> (op1_e3_l_381481,op1_e3_l_391482);
          real op1_e3_l_491484#1 = λ(T0[],T1[])<(T0) - (T1)> (fb1409,fa13F9);
          real cup1478#7 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_481483,op1_e3_l_491484);
          string _t149E#1 = "Mid time:";
          Print<[string,real,string]>(_t149E,cup1478,_t12C6);
          tensor[2] op1_e3_l_5314AF#1 = λ(T0[2],T1[])<(T1 * T0_{i0})>_{2} (_t12DE,cup1478);
          tensor[2] midRay14A1#4 = λ(T0[2],T1[2])<(T0_{i0} + T1_{i0})>_{2} (_t12D8,op1_e3_l_5314AF);
          femData:MeshPos callNewtonPos14CC#1 = _0A92_msh_newtonInverse12ED (midRay14A1,_t12EA,_t12E8);
          tensor[2] refPos14CD#10 = ExtractFemItem<tensor[2],RefPos(Mesh)>(callNewtonPos14CC);
          tensor[6] basisResult14D5#1 = EvaluateBasis<BasisArray(6)>(refPos14CD);
          real fmVal14D1#2 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[6],T6[2])<Σ(i0=0..5)<((T4_{i0} * T5_{i0}))>(i0=0..5)> (_t13F3,_t13F1,_t13EF,refPos14CD,femDofs13FF,basisResult14D5,refPos14CD);
          real op1_e3_l_5814EA#1 = λ(T0[],T1[])<(T0 * T1)> (_t13F5,cup1478);
          real op1_e3_l_5914EB#1 = λ(T0[],T1[])<(T0) - (T1)> (fmVal14D1,op1_e3_l_5814EA);
          real fm14DB#5 = λ(T0[],T1[])<(T1) - (T0)> (_t13F7,op1_e3_l_5914EB);
          string _t150D#1 = "all vals:";
          tensor[3] _t150F#1 = <tensor[3]>[fa13F9,fm14DB,fb1409];
          Print<[string,tensor[3],string]>(_t150D,_t150F,_t12C6);
          int _t1512#6 = 1;
          int intersectionItter1514#3 = IAdd(intersectionItter12AC,_t1512);
          real _t1516#10 = 0.e0;
          bool _t1518#2 = GT<real>(fa13F9,_t1516);
          if _t1518 then goto JOIN151D else goto ASSIGN1708
        JOIN151D:  preds = [COND151A,JOIN170D]
          int _t151B#1 = phi(_t1512,_t151C)
          bool _t151E#2 = GT<real>(fm14DB,_t1516);
          if _t151E then goto JOIN1523 else goto ASSIGN1700
        JOIN1523:  preds = [COND1520,JOIN1705]
          int _t1521#1 = phi(_t1512,_t1522)
          int _t1524#1 = IMul(_t151B,_t1521);
          int _t1526#7 = 0;
          bool _t1528#1 = LT<int>(_t1524,_t1526);
          if _t1528 then goto JOIN152E else goto COND16E5
        JOIN152E:  preds = [COND152A,JOIN16F2]
          real e152B#4 = phi(cup1478,e12B2)
          real s152C#4 = phi(s1476,s152D)
          string _t152F#1 = "new interval:";
          tensor[2] _t1531#1 = <tensor[2]>[s152C,e152B];
          Print<[string,tensor[2],string]>(_t152F,_t1531,_t12C6);
          real _t1534#1 = λ(T0[])<Abs(T0)> (fm14DB);
          bool _t1568#2 = LT<real>(_t1534,zeroEps1282);
          if _t1568 then goto ASSIGN156C else goto JOIN1690
        ASSIGN156C:  preds = [COND156A]
          tensor[2] grad156B#1 = <tensor[2]>[_t1516,_t1516];
          if _t1568 then goto ASSIGN1758 else goto JOIN15A2
        ASSIGN1758:  preds = [COND156D]
          tensor[2,6] basisResult157E#1 = EvaluateBasis<BasisArray(2,6)>(refPos14CD);
          tensor[2] compositionl1570#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[2 6],T6[2])<Σ(i2=0..5)<((T4_{i2} * T5_{i0,i2}))>(i2=0..5)>_{2} (_t13F3,_t13F1,_t13EF,refPos14CD,femDofs13FF,basisResult157E,refPos14CD);
          int[3] femIndicies1580#1 = ExtractFemItem2<int,int[3],ExtractIndices(Mesh)>(_t12E8,_t12EA);
          tensor[3,2] femDofs1581#3 = ExtractFemItem2<int[3],tensor[3,2],ExtractDofsSeq(Mesh)>(_t12E8,femIndicies1580);
          tensor[2,3] basisResult1582#3 = EvaluateBasis<BasisArray(2,3)>(refPos14CD);
          tensor[2,2] probe_l_81571#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i3=0..2)<((T3_{i3,i0} * T4_{i1,i3}))>(i3=0..2)>_{2 2} (_t12EA,_t12E8,midRay14A1,femDofs1581,basisResult1582,refPos14CD);
          tensor[2,2] op1_e3_l_91572#1 = λ(T0[2 2])<Σ(i2=0..1)<((ϵ_{ii2,ii0} * T0_{i2,i1}))>(i2=0..1)>_{2 2} (probe_l_81571);
          tensor[2] probe_l_101573#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i2=0..2)<((T3_{i2,i0} * T4_{'0',i2}))>(i2=0..2)>_{2} (_t12EA,_t12E8,midRay14A1,femDofs1581,basisResult1582,refPos14CD);
          tensor[2] probe_l_111574#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i2=0..2)<((T3_{i2,i0} * T4_{'1',i2}))>(i2=0..2)>_{2} (_t12EA,_t12E8,midRay14A1,femDofs1581,basisResult1582,refPos14CD);
          tensor[2] op1_e3_l_121575#1 = λ(T0[2])<Σ(i1=0..1)<((ϵ_{ii0,ii1} * T0_{i1}))>(i1=0..1)>_{2} (probe_l_111574);
          tensor[2,2] op1_e3_l_131576#1 = λ(T0[2 2])<Σ(i2=0..1)<((ϵ_{ii2,ii0} * T0_{i1,i2}))>(i2=0..1)>_{2 2} (op1_e3_l_91572);
          real op1_e3_l_141577#1 = λ(T0[2],T1[2])<Σ(i0=0..1)<((T0_{i0} * T1_{i0}))>(i0=0..1)> (probe_l_101573,op1_e3_l_121575);
          tensor[2,2] op1_e3_l_151578#1 = λ(T0[2 2],T1[])<(T0_{i0,i1}) / ( T1)>_{2 2} (op1_e3_l_131576,op1_e3_l_141577);
          tensor[2] grad156E#1 = λ(T0[2],T1[2 2])<Σ(i104=0..1)<((T0_{i104} * T1_{i104,i0}))>(i104=0..1)>_{2} (compositionl1570,op1_e3_l_151578);
          goto JOIN15A2
        JOIN15A2:  preds = [ASSIGN159F,COND156D]
          tensor[2] grad15A0#3 = phi(grad156E,grad156B)
          real out15A1#3 = phi(fmVal14D1,out12B8)
          string _t15A3#1 = "Out val:";
          Print<[string,real,string]>(_t15A3,out15A1,_t12C6);
          string _t15A6#1 = "Grad val:";
          Print<[string,tensor[2],string]>(_t15A6,grad15A0,_t12C6);
          real _t15A9#6 = 0.1e1;
          tensor[3] mcol15AB#1 = <tensor[3]>[_t15A9,_t15A9,_t15A9];
          bool _t15AD#1 = NEQ<real>(cmin128E,cmax1290);
          if _t15AD then goto ASSIGN15B1 else goto JOIN15DB
        ASSIGN15B1:  preds = [COND15AF]
          int _t15B0#1 = -1;
          real _t15B2#2 = IntToReal(_t15B0);
          real op1_e3_l_515B5#1 = λ(T0[],T1[])<(T1) - (T0)> (cmin128E,out15A1);
          real op1_e3_l_615B6#1 = λ(T0[],T1[])<(T1) - (T0)> (cmin128E,cmax1290);
          real op1_e3_l_715B7#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_515B5,op1_e3_l_615B6);
          real op1_e3_l_815B8#1 = λ(T0[],T1[])<(T1) - (T0)> (_t15B2,_t15A9);
          real op1_e3_l_915B9#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_715B7,op1_e3_l_815B8);
          real _t15B4#2 = λ(T0[],T1[])<(T0 + T1)> (_t15B2,op1_e3_l_915B9);
          real Mtransform15C1#2 = Transform<IMAGE1D<double[3]>>(cmap1729);
          real MxPos15C2#1 = λ(T0[],T1[])<(T0 * T1)> (Mtransform15C1,_t15B4);
          real Ttranslate15C3#1 = Translate<IMAGE1D<double[3]>>(cmap1729);
          real imgPos15C4#2 = λ(T0[],T1[])<(T0 + T1)> (MxPos15C2,Ttranslate15C3);
          real nd15C5#2 = Floor<1>(imgPos15C4);
          real f15C6#1 = λ(T0[],T1[])<(T0) - (T1)> (imgPos15C4,nd15C5);
          int n15C7#1 = RealToInt<1>(nd15C5);
          int idx15C9#1 = IAdd(n15C7,_t1526);
          tensor[3,2] ldvox15CA#1 = LoadVoxelsWithCtl<IMAGE1D<double[3]>,2,clamp>(cmap1729,idx15C9);
          tensor[2] kernX_15CB#1 = BuildPos<1>(f15C6);
          tensor[2] kevalX_d0_15CC#1 = EvalKernel<2,tent,0>(kernX_15CB);
          tensor[3] mcol15C0#1 = λ(V0(1)[3],H1,T2[1],T3[1 1],V4(1)[3],H5)<Σ(i1=0..1)<((V4_{i0}(1)[i1]# * H5(1)))>(i1=0..1)>_{3} (img127A,_t127C,_t15B4,Mtransform15C1,ldvox15CA,kevalX_d0_15CC);
          goto JOIN15DB
        JOIN15DB:  preds = [ASSIGN15D9,COND15AF]
          tensor[3] mcol15DA#5 = phi(mcol15C0,mcol15AB)
          if light1292 then goto ASSIGN15DE else goto ASSIGN16DF
        ASSIGN15DE:  preds = [COND15DC]
          real _t15DD#1 = TensorIndex<tensor[2],[0]>(grad15A0);
          real _t15DF#1 = TensorIndex<tensor[2],[1]>(grad15A0);
          int _t15E1#1 = -1;
          real _t15E3#1 = IntToReal(_t15E1);
          tensor[3] _t15E5#3 = <tensor[3]>[_t15DD,_t15DF,_t15E3];
          real op1_e3_l_315E8#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (_t15E5);
          real op1_e3_l_415E9#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_315E8);
          real op1_e3_l_515EA#2 = λ(T0[])<(1) / ( T0)> (op1_e3_l_415E9);
          real op1_e3_l_615EB#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (_t15E5,L129C);
          real _t15E7#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_515EA,op1_e3_l_615EB);
          real _t15F1#1 = Max<real>(_t1516,_t15E7);
          real op1_e3_l_1015F6#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (rayVec12A0);
          real op1_e3_l_1115F7#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_1015F6);
          real op1_e3_l_1215F8#1 = λ(T0[])<(1) / ( T0)> (op1_e3_l_1115F7);
          tensor[3] op1_e3_l_1315F9#1 = λ(T0[3],T1[])<(T0_{i0} * T1)>_{3} (rayVec12A0,op1_e3_l_1215F8);
          tensor[3] op1_e3_l_1415FA#1 = λ(T0[3])<Neg(T0_{i0})>_{3} (op1_e3_l_1315F9);
          tensor[3] op1_e3_l_2015FB#3 = λ(T0[3],T1[3])<(T1_{i0} + T0_{i0})>_{3} (L129C,op1_e3_l_1415FA);
          real op1_e3_l_2215FC#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_2015FB,op1_e3_l_2015FB);
          real op1_e3_l_2315FD#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_2215FC);
          real op1_e3_l_3115FF#1 = λ(T0[])<(1) / ( T0)> (op1_e3_l_2315FD);
          real op1_e3_l_321600#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (_t15E5,op1_e3_l_2015FB);
          real _t15F3#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (op1_e3_l_515EA,op1_e3_l_3115FF,op1_e3_l_321600);
          real _t160F#1 = Max<real>(_t1516,_t15F3);
          real _t1611#1 = MathFn<pow>(_t160F,phongSp129A);
          real op1_e3_l_961621#1 = λ(T0[],T1[])<(T1) - (T0)> (camNearVsp12A2,cup1478);
          real op1_e3_l_971622#1 = λ(T0[],T1[])<(T1) - (T0)> (camNearVsp12A2,camFarVsp12A4);
          real op1_e3_l_981623#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_961621,op1_e3_l_971622);
          tensor[3] op1_e3_l_991624#1 = λ(T0[3],T1[3])<(T1_{i0}) - (T0_{i0})>_{3} (mcnear128A,mcfar128C);
          tensor[3] op1_e3_l_1001625#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (op1_e3_l_981623,op1_e3_l_991624);
          tensor[3] op1_e3_l_1011626#2 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (mcnear128A,op1_e3_l_1001625);
          tensor[3] op1_e3_l_1291627#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (phongKa1294,mcol15DA);
          tensor[3] op1_e3_l_1301628#1 = λ(T0[3],T1[],T2[],T3[3])<(T1 * T2 * T0_{i0} * T3_{i0})>_{3} (mcol15DA,_t15F1,phongKd1296,op1_e3_l_1011626);
          tensor[3] op1_e3_l_1311629#1 = λ(T0[],T1[],T2[3])<(T0 * T1 * T2_{i0})>_{3} (_t1611,phongKs1298,op1_e3_l_1011626);
          tensor[3] fin1613#3 = λ(T0[3],T1[3],T2[3])<(T0_{i0} + T1_{i0} + T2_{i0})>_{3} (op1_e3_l_1291627,op1_e3_l_1301628,op1_e3_l_1311629);
          real _t164D#1 = TensorIndex<tensor[3],[0]>(fin1613);
          real _t164F#1 = TensorIndex<tensor[3],[1]>(fin1613);
          real _t1651#1 = TensorIndex<tensor[3],[2]>(fin1613);
          tensor[4] rgba1653#1 = <tensor[4]>[_t164D,_t164F,_t1651,_t15A9];
          goto JOIN1657
        JOIN1657:  preds = [ASSIGN1654,ASSIGN16E4]
          tensor[4] rgba1655#1 = phi(rgba1653,rgba1656)
          tensor[3] op1_e3_l_531666#1 = λ(T0[3],T1[])<(T1 * T0_{i0})>_{3} (rayVec12A0,cup1478);
          tensor[3] _t1658#1 = λ(T0[3],T1[3])<(T1_{i0} + T0_{i0})>_{3} (rayOrig129E,op1_e3_l_531666);
          tensor[3][1] _t1682#1 = <tensor[3][1]>{_t1658};
          tensor[3][] _t1684#1 = MkDynamic<tensor[3],1>(_t1682);
          self.intersectionItter = intersectionItter1514;
          self.s = s152C;
          self.e = e152B;
          self.out = out15A1;
          self.rgba = rgba1655;
          self.locs = _t1684;
          stabilize
          goto JOIN1690
        JOIN1690:  preds = [*STABILIZE168C,COND156A]
          tensor[3][] locs168D#3 = phi(locs12BC)
          tensor[4] rgba168E#3 = phi(rgba12BA)
          real out168F#3 = phi(out12B8)
          int _t1691#1 = 32;
          bool _t1693#1 = GT<int>(intersectionItter1514,_t1691);
          if _t1693 then goto ASSIGN1697 else goto ASSIGN16DC
        ASSIGN1697:  preds = [COND1695]
          int itter1696#4 = IAdd(itter12AA,_t1512);
          bool _t1698#1 = GTE<int>(itter1696,len12A8);
          if _t1698 then goto ASSIGN169C else goto JOIN16A9
        ASSIGN169C:  preds = [COND169A]
          string _t169B#1 = "No intersection found\n";
          Print<[string]>(_t169B);
          string _t169E#1 = "Fin pixel=============================\n";
          Print<[string]>(_t169E);
          self.itter = itter1696;
          self.intersectionItter = _t1526;
          self.s = s152C;
          self.e = e152B;
          self.out = out168F;
          self.rgba = rgba168E;
          self.locs = locs168D;
          stabilize
          goto JOIN16A9
        JOIN16A9:  preds = [*STABILIZE16A8,COND169A]
          int _t16AA#2 = IAdd(offset12A6,itter1696);
          tensor[2] interval16AC#3 = Subscript<tensor[2][]>(times1286,_t16AA);
          int _t16AE#1 = Subscript<int[]>(cells1288,_t16AA);
          femData:MeshCell cc16B0#2 = Subscript<femData:MeshCell[]>(0cell_a127E,_t16AE);
          real s16B2#1 = TensorIndex<tensor[2],[0]>(interval16AC);
          real e16B4#1 = TensorIndex<tensor[2],[1]>(interval16AC);
          int _t16B6#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc16B0);
          femData:FuncCell _t16B8#1 = LoadFem<femData:FuncCell>(c1280,_t16B6);
          string _t16BA#1 = "++++++++++++++++Next interval!+++++++++++++++++++\n";
          Print<[string]>(_t16BA);
          self.itter = itter1696;
          self.intersectionItter = _t1526;
          self.interval = interval16AC;
          self.s = s16B2;
          self.e = e16B4;
          self.cc = cc16B0;
          self.fc = _t16B8;
          self.out = out168F;
          self.rgba = rgba168E;
          self.locs = locs168D;
          active
          goto JOIN16CF
        JOIN16CF:  preds = [*ACTIVE16C7,MASSIGN16DD]
          femData:FuncCell fc16C8#1 = phi(fc12B6)
          femData:MeshCell cc16C9#1 = phi(cc12B4)
          real e16CA#1 = phi(e152B)
          real s16CB#1 = phi(s152C)
          tensor[2] interval16CC#1 = phi(interval12AE)
          int intersectionItter16CD#1 = phi(intersectionItter1514)
          int itter16CE#1 = phi(itter12AA)
          self.itter = itter16CE;
          self.intersectionItter = intersectionItter16CD;
          self.interval = interval16CC;
          self.s = s16CB;
          self.e = e16CA;
          self.cc = cc16C9;
          self.fc = fc16C8;
          self.out = out168F;
          self.rgba = rgba168E;
          self.locs = locs168D;
          active
        ASSIGN16DC:  preds = [COND1695]
          string _t16DB#1 = "---------------\n";
          Print<[string]>(_t16DB);
          goto JOIN16CF
        ASSIGN16DF:  preds = [COND15DC]
          real _t16DE#1 = TensorIndex<tensor[3],[0]>(mcol15DA);
          real _t16E0#1 = TensorIndex<tensor[3],[1]>(mcol15DA);
          real _t16E2#1 = TensorIndex<tensor[3],[2]>(mcol15DA);
          tensor[4] rgba1656#1 = <tensor[4]>[_t16DE,_t16E0,_t16E2,_t15A9];
          goto JOIN1657
        COND16E5:  preds = [COND152A]
          if _t1518 then goto JOIN16E8 else goto ASSIGN16FA
        JOIN16E8:  preds = [COND16E5,JOIN16FE]
          int _t16E6#1 = phi(_t1512,_t16E7)
          if _t151E then goto JOIN16EC else goto ASSIGN16F4
        JOIN16EC:  preds = [COND16E9,JOIN16F8]
          int _t16EA#1 = phi(_t1512,_t16EB)
          int _t16ED#1 = IMul(_t16E6,_t16EA);
          bool _t16EF#1 = GT<int>(_t16ED,_t1526);
          if _t16EF then goto JOIN16F2 else goto JOIN16F2
        JOIN16F2:  preds = [COND16F1,COND16F1]
          real s152D#1 = phi(cup1478,s1476)
          goto JOIN152E
        ASSIGN16F4:  preds = [COND16E9]
          bool _t16F3#1 = LT<real>(fm14DB,_t1516);
          if _t16F3 then goto ASSIGN16F7 else goto JOIN16F8
        ASSIGN16F7:  preds = [COND16F5]
          int _t16F6#1 = -1;
          goto JOIN16F8
        JOIN16F8:  preds = [ASSIGN16F7,COND16F5]
          int _t16EB#1 = phi(_t16F6,_t1526)
          goto JOIN16EC
        ASSIGN16FA:  preds = [COND16E5]
          bool _t16F9#1 = LT<real>(fa13F9,_t1516);
          if _t16F9 then goto ASSIGN16FD else goto JOIN16FE
        ASSIGN16FD:  preds = [COND16FB]
          int _t16FC#1 = -1;
          goto JOIN16FE
        JOIN16FE:  preds = [ASSIGN16FD,COND16FB]
          int _t16E7#1 = phi(_t16FC,_t1526)
          goto JOIN16E8
        ASSIGN1700:  preds = [COND1520]
          bool _t16FF#1 = LT<real>(fm14DB,_t1516);
          if _t16FF then goto ASSIGN1703 else goto ASSIGN1706
        ASSIGN1703:  preds = [COND1701]
          int _t1702#1 = -1;
          goto JOIN1705
        JOIN1705:  preds = [ASSIGN1703,ASSIGN1706]
          int _t1522#1 = phi(_t1702,_t1704)
          goto JOIN1523
        ASSIGN1706:  preds = [COND1701]
          int _t1704#1 = 0;
          goto JOIN1705
        ASSIGN1708:  preds = [COND151A]
          bool _t1707#1 = LT<real>(fa13F9,_t1516);
          if _t1707 then goto ASSIGN170B else goto ASSIGN170E
        ASSIGN170B:  preds = [COND1709]
          int _t170A#1 = -1;
          goto JOIN170D
        JOIN170D:  preds = [ASSIGN170B,ASSIGN170E]
          int _t151C#1 = phi(_t170A,_t170C)
          goto JOIN151D
        ASSIGN170E:  preds = [COND1709]
          int _t170C#1 = 0;
          goto JOIN170D
    end update
  end ray
## initial strand creation
  GRID(2)
    ENTRY170F:  preds = []
      int iresU1710#1 = globals.iresU1017;
      int iresV1712#1 = globals.iresV1018;
      int _t1714#2 = 0;
      int _t1716#2 = 1;
      int _t1718#1 = ISub(iresU1710,_t1716);
      int[] _t171A#1 = Range(_t1714,_t1718);
    FOREACH171D:  preds = [ASSIGN171B,NEXT1726]
      foreach (vi171C in _t171A) on exit goto RETURN1727
      int _t171E#1 = ISub(iresV1712,_t1716);
      int[] _t1720#1 = Range(_t1714,_t171E);
    FOREACH1723:  preds = [ASSIGN1721,NEXT1725]
      foreach (ui1722 in _t1720) on exit goto NEXT1726
      new ray(ui1722,vi171C);
      goto FOREACH1723
    NEXT1726:  preds = [FOREACH1723]
      goto FOREACH171D
    RETURN1727:  preds = [FOREACH171D]
      return
#### end program ####
##### mid-ir: after contraction ####
## properties
  GlobalInit StrandArray HasStartMethod ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[]) HasInputs HasGlobals
## globals
  input isoval1011 (isoval) = <default>
  input thick1012 (thick) = <default>
  input camEye1013 (camEye) = <default>
  input camAt1014 (camAt) = <default>
  input camUp1015 (camUp) = <default>
  input camFOV1016 (camFOV) = <default>
  input iresU1017 (iresU) = <default>
  input iresV1018 (iresV) = <default>
  input camNear1019 (camNear) = <default>
  input camFar101A (camFar) = <default>
  input refStep101B (refStep) = <default>
  input rayStep101C (rayStep) = <default>
  input a101D (a) = <no-default>
  input 0b046F_intermedateGlobal101E (b) = <no-default>
  input 0c0471_intermedateGlobal101F (c) = <no-default>
  input zeroEps1020 (zeroEps) = <default>
  input intervalEps1021 (intervalEps) = <default>
  input indecies1022 (indecies) = <no-default>
  input times1023 (times) = <no-default>
  input cells1024 (cells) = <no-default>
  input mcnear1025 (mcnear) = <default>
  input mcfar1026 (mcfar) = <default>
  input cmap1027 (cmap) = image("/home/teocollin/gitcode/diderot/tests/lipRay/find/cmap.nrrd")
  input cmin1028 (cmin) = <default>
  input cmax1029 (cmax) = <default>
  input light102A (light) = <default>
  input phongKa102B (phongKa) = <default>
  input phongKd102C (phongKd) = <default>
  input phongKs102D (phongKs) = <default>
  input phongSp102E (phongSp) = <default>
  input maxAlpha102F (maxAlpha) = <default>
  input lightVsp1030 (lightVsp) = <default>
  input debug1031 (debug) = <default>
  input debugU1032 (debugU) = <default>
  input debugV1033 (debugV) = <default>
  global femData:MeshCell[] 0cell_a1034
  global femData:FemFunc c1035
  global real camNearVsp1036
  global real camFarVsp1037
  global tensor[3] camN1038
  global tensor[3] camU1039
  global tensor[3] camV103A
  global real camVmax103B
  global real camUmax103C
  global tensor[3] L103D
  global image(IMAGE1D<double[3]>) img103E
  global kernel _t103F
## functions
  function femData:MeshPos _0A92_msh_newtonInverse12ED (tensor[2] pos12EE#3, int cellInt12EF#7, femData:Mesh mesh12F0#10) {
    ENTRY12F1:  preds = []
      real _t12F2#2 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
      tensor[2] xn12F4#8 = <tensor[2]>[_t12F2,_t12F2];
      int _t12F6#1 = 0;
      int _t12F8#1 = 16;
      int[] _t12FA#1 = Range(_t12F6,_t12F8);
    FOREACH12FD:  preds = [ASSIGN12FB,NEXT13DA]
      foreach (itter12FC in _t12FA) on exit goto ASSIGN13DF
        tensor[2] xn12FF#6 = phi(xn12F4,xn12FE)
      int[3] femIndicies130C#1 = ExtractFemItem2<int,int[3],ExtractIndices(Mesh)>(mesh12F0,cellInt12EF);
      tensor[3,2] femDofs130D#5 = ExtractFemItem2<int[3],tensor[3,2],ExtractDofsSeq(Mesh)>(mesh12F0,femIndicies130C);
      tensor[2,3] basisResult130E#3 = EvaluateBasis<BasisArray(2,3)>(xn12F4);
      tensor[2,2] probe_l_101300#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i3=0..2)<((T3_{i3,i0} * T4_{i1,i3}))>(i3=0..2)>_{2 2} (cellInt12EF,mesh12F0,xn12F4,femDofs130D,basisResult130E,xn12F4);
      tensor[2,2] op1_e3_l_111301#1 = λ(T0[2 2])<Σ(i2=0..1)<((ϵ_{ii2,ii0} * T0_{i2,i1}))>(i2=0..1)>_{2 2} (probe_l_101300);
      tensor[2] probe_l_121302#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i2=0..2)<((T3_{i2,i0} * T4_{'0',i2}))>(i2=0..2)>_{2} (cellInt12EF,mesh12F0,xn12F4,femDofs130D,basisResult130E,xn12F4);
      tensor[2] probe_l_131303#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i2=0..2)<((T3_{i2,i0} * T4_{'1',i2}))>(i2=0..2)>_{2} (cellInt12EF,mesh12F0,xn12F4,femDofs130D,basisResult130E,xn12F4);
      tensor[2] op1_e3_l_141304#1 = λ(T0[2])<Σ(i1=0..1)<((ϵ_{ii0,ii1} * T0_{i1}))>(i1=0..1)>_{2} (probe_l_131303);
      tensor[2,2] op1_e3_l_151305#1 = λ(T0[2 2])<Σ(i2=0..1)<((ϵ_{ii2,ii0} * T0_{i1,i2}))>(i2=0..1)>_{2 2} (op1_e3_l_111301);
      real op1_e3_l_161306#1 = λ(T0[2],T1[2])<Σ(i0=0..1)<((T0_{i0} * T1_{i0}))>(i0=0..1)> (probe_l_121302,op1_e3_l_141304);
      tensor[3] basisResult1314#2 = EvaluateBasis<BasisArray(3)>(xn12FF);
      tensor[2] probe_l_171307#1 = λ(T0[2],INT1,FEM(msh)2,T3[3 2],T4[3],T5[2])<Σ(i1=0..2)<((T3_{i1,i0} * T4_{i1}))>(i1=0..2)>_{2} (xn12FF,cellInt12EF,mesh12F0,femDofs130D,basisResult1314,xn12FF);
      tensor[2,2] op1_e3_l_181308#2 = λ(T0[2 2],T1[])<(T0_{i0,i1}) / ( T1)>_{2 2} (op1_e3_l_151305,op1_e3_l_161306);
      tensor[2] op1_e3_l_191309#1 = λ(T0[2],T1[2])<(T1_{i0}) - (T0_{i0})>_{2} (pos12EE,probe_l_171307);
      tensor[2] op1_e3_l_20130A#1 = λ(T0[2 2],T1[2])<Σ(i1=0..1)<((T0_{i0,i1} * T1_{i1}))>(i1=0..1)>_{2} (op1_e3_l_181308,op1_e3_l_191309);
      tensor[2] xn12FE#4 = λ(T0[2],T1[2])<(T0_{i0}) - (T1_{i0})>_{2} (xn12FF,op1_e3_l_20130A);
      real _t132B#2 = 0.1e-7;
      real _t132D#1 = λ(T0[],T1[])<(T0 * T1)> (_t132B,_t132B);
      tensor[2] probe_l_251337#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[3],T5[2])<Σ(i1=0..2)<((T3_{i1,i0} * T4_{i1}))>(i1=0..2)>_{2} (cellInt12EF,mesh12F0,xn12FF,femDofs130D,basisResult1314,xn12FF);
      tensor[2] op1_e3_l_271339#1 = λ(T0[2],T1[2])<(T1_{i0}) - (T0_{i0})>_{2} (pos12EE,probe_l_251337);
      tensor[2] op1_e3_l_38133A#2 = λ(T0[2 2],T1[2])<Σ(i1=0..1)<((T0_{i0,i1} * T1_{i1}))>(i1=0..1)>_{2} (op1_e3_l_181308,op1_e3_l_271339);
      real _t132F#1 = λ(T0[2],T1[2])<Σ(i0=0..1)<((T0_{i0} * T1_{i0}))>(i0=0..1)> (op1_e3_l_38133A,op1_e3_l_38133A);
      bool _t135B#1 = GTE<real>(_t132D,_t132F);
      if _t135B then goto ASSIGN135F else goto JOIN13D9
    ASSIGN135F:  preds = [COND135D]
      real _t135E#3 = 0.1e1;
      real _t1360#3 = 0.1e-8;
      real _t1362#1 = λ(T0[],T1[])<(T0 + T1)> (_t135E,_t1360);
      tensor[2] _t1364#1 = <tensor[2]>[_t135E,_t135E];
      real _t1366#1 = λ(T0[2],T1[2])<Σ(i0=0..1)<((T0_{i0} * T1_{i0}))>(i0=0..1)> (_t1364,xn12FE);
      bool _t1394#1 = GT<real>(_t1362,_t1366);
      tensor[2] _t1396#1 = <tensor[2]>[_t1360,_t1360];
      tensor[2] _t1398#2 = λ(T0[2],T1[2])<(T0_{i0} + T1_{i0})>_{2} (_t1396,xn12FE);
      real _t13C6#1 = TensorIndex<tensor[2],[0]>(_t1398);
      real _t13C8#2 = -0.e0;
      bool _t13CA#1 = GT<real>(_t13C6,_t13C8);
      real _t13CC#1 = TensorIndex<tensor[2],[1]>(_t1398);
      bool _t13CE#1 = GT<real>(_t13CC,_t13C8);
      bool _t13D0#1 = BAnd(_t13CA,_t13CE);
      bool _t13D2#1 = BAnd(_t1394,_t13D0);
      if _t13D2 then goto ASSIGN13D6 else goto ASSIGN13DC
    ASSIGN13D6:  preds = [COND13D4]
      femData:MeshPos _t13D5#1 = ExtractFemItemN<[femData:Mesh,int,tensor[2],tensor[2]],femData:MeshPos,AllBuild(MeshPos),0000,"",[],int>(mesh12F0,cellInt12EF,xn12FE,pos12EE);
      return _t13D5
      goto JOIN13D8
    JOIN13D8:  preds = [*RETURN(_t13D5)13D7,*RETURN(_t13DB)13DD]
      goto JOIN13D9
    JOIN13D9:  preds = [*JOIN13D8,COND135D]
      goto FOREACH12FD
    ASSIGN13DC:  preds = [COND13D4]
      femData:MeshPos _t13DB#1 = ExtractFemItemN<[femData:Mesh],femData:MeshPos,InvalidBuild(MeshPos),0000,"",[],int>(mesh12F0);
      return _t13DB
      goto JOIN13D8
    ASSIGN13DF:  preds = [FOREACH12FD]
      femData:MeshPos _t13DE#1 = ExtractFemItemN<[femData:Mesh],femData:MeshPos,InvalidBuild(MeshPos),0000,"",[],int>(mesh12F0);
      return _t13DE
}
## input initialization
  ENTRY1040:  preds = []
    real isoval1041#1 = 0.2e0;
    globals.isoval1011 = isoval1041;
    real thick1044#1 = 0.7e-1;
    globals.thick1012 = thick1044;
    real _t1047#2 = 0.3e1;
    real _t1049#1 = -0.3e1;
    tensor[3] camEye104B#1 = <tensor[3]>[_t1047,_t1049,_t1047];
    globals.camEye1013 = camEye104B;
    real _t104E#5 = 0.5e0;
    tensor[3] camAt1050#1 = <tensor[3]>[_t104E,_t104E,_t104E];
    globals.camAt1014 = camAt1050;
    real _t1053#5 = 0.e0;
    real _t1055#7 = 0.1e1;
    tensor[3] camUp1057#1 = <tensor[3]>[_t1053,_t1053,_t1055];
    globals.camUp1015 = camUp1057;
    real camFOV105A#1 = 0.137e2;
    globals.camFOV1016 = camFOV105A;
    int iresU105D#2 = 10;
    globals.iresU1017 = iresU105D;
    globals.iresV1018 = iresU105D;
    real camNear1061#1 = -0.2e1;
    globals.camNear1019 = camNear1061;
    real camFar1064#1 = 0.5e1;
    globals.camFar101A = camFar1064;
    globals.refStep101B = _t1055;
    real rayStep1068#1 = 0.1e-1;
    globals.rayStep101C = rayStep1068;
    real zeroEps106B#2 = 0.1e-10;
    globals.zeroEps1020 = zeroEps106B;
    globals.intervalEps1021 = zeroEps106B;
    tensor[3] mcnear106F#2 = <tensor[3]>[_t1055,_t1055,_t1055];
    globals.mcnear1025 = mcnear106F;
    globals.mcfar1026 = mcnear106F;
    globals.cmin1028 = _t1053;
    globals.cmax1029 = _t1055;
    bool light1075#2 = false;
    globals.light102A = light1075;
    globals.phongKa102B = _t104E;
    globals.phongKd102C = _t104E;
    globals.phongKs102D = _t1053;
    real phongSp107B#1 = 0.6e2;
    globals.phongSp102E = phongSp107B;
    globals.maxAlpha102F = _t1055;
    real _t107F#1 = 0.369e1;
    real _t1081#1 = 0.153e1;
    tensor[3] lightVsp1083#1 = <tensor[3]>[_t1053,_t107F,_t1081];
    globals.lightVsp1030 = lightVsp1083;
    globals.debug1031 = light1075;
    int debugU1087#1 = 8;
    globals.debugU1032 = debugU1087;
    int debugV108A#1 = 2;
    globals.debugV1033 = debugV108A;
    return
## global-variable initialization
  ENTRY108E:  preds = []
    tensor[3] camEye108F#1 = globals.camEye1013;
    tensor[3] camAt1091#1 = globals.camAt1014;
    tensor[3] camUp1093#1 = globals.camUp1015;
    real camFOV1095#1 = globals.camFOV1016;
    int iresU1097#1 = globals.iresU1017;
    int iresV1099#1 = globals.iresV1018;
    real camNear109B#1 = globals.camNear1019;
    real camFar109D#1 = globals.camFar101A;
    femData:Mesh a109F#3 = globals.a101D;
    femData:Space 0b046F_intermedateGlobal10A1#1 = globals.0b046F_intermedateGlobal101E;
    femData:FemFunc 0c0471_intermedateGlobal10A3#1 = globals.0c0471_intermedateGlobal101F;
    image(IMAGE1D<double[3]>) cmap10A5#1 = globals.cmap1027;
    tensor[3] lightVsp10A7#2 = globals.lightVsp1030;
    int _t10A9#1 = 0;
    int _t10AB#1 = 1;
    int _t10AD#1 = ExtractFemItem<int,NumCell(Mesh)>(a109F);
    int _t10AF#1 = ISub(_t10AD,_t10AB);
    int[] _t10B1#1 = Range(_t10A9,_t10AF);
    femData:MeshCell[] _t10B3#1 = <femData:MeshCell[]>{};
  FOREACH10B6:  preds = [ASSIGN10B4,NEXT10BC]
    foreach (_t10B5 in _t10B1) on exit goto GASSIGN10BD
      femData:MeshCell[] _t10BA#2 = phi(_t10B3,_t10B9)
    femData:MeshCell _t10B7#1 = LoadFem<femData:MeshCell>(a109F,_t10B5);
    femData:MeshCell[] _t10B9#1 = Append<femData:MeshCell>(_t10BA,_t10B7);
    goto FOREACH10B6
  GASSIGN10BD:  preds = [FOREACH10B6]
    globals.0cell_a1034 = _t10BA;
    femData:Space b10BE#1 = LoadFem<femData:Space>(0b046F_intermedateGlobal10A1,a109F);
    femData:FemFunc c10C0#1 = LoadFem<femData:FemFunc>(0c0471_intermedateGlobal10A3,b10BE);
    globals.c1035 = c10C0;
    tensor[3] op1_e3_l_310C4#5 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (camAt1091,camEye108F);
    real op1_e3_l_510C5#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_310C4,op1_e3_l_310C4);
    real op1_e3_l_610C6#5 = λ(T0[])<Sqrt(T0)> (op1_e3_l_510C5);
    real camNearVsp10C3#1 = λ(T0[],T1[])<(T0 + T1)> (camNear109B,op1_e3_l_610C6);
    globals.camNearVsp1036 = camNearVsp10C3;
    real camFarVsp10CC#1 = λ(T0[],T1[])<(T0 + T1)> (camFar109D,op1_e3_l_610C6);
    globals.camFarVsp1037 = camFarVsp10CC;
    real op1_e3_l_910D9#6 = λ(T0[])<(1) / ( T0)> (op1_e3_l_610C6);
    tensor[3] camN10D5#2 = λ(T0[3],T1[])<(T0_{i0} * T1)>_{3} (op1_e3_l_310C4,op1_e3_l_910D9);
    globals.camN1038 = camN10D5;
    tensor[3,3] op1_e3_l_1510E4#1 = λ(T0[3])<Σ(i2=0..2)<((ϵ_{ii0,ii1,ii2} * T0_{i2}))>(i2=0..2)>_{3 3} (camUp1093);
    tensor[3] op1_e3_l_1710E6#4 = λ(T0[3],T1[3 3])<Σ(i1=0..2)<((T0_{i1} * T1_{i0,i1}))>(i1=0..2)>_{3} (op1_e3_l_310C4,op1_e3_l_1510E4);
    real op1_e3_l_3410E7#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_1710E6,op1_e3_l_1710E6);
    real op1_e3_l_3510E8#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (op1_e3_l_910D9,op1_e3_l_910D9,op1_e3_l_3410E7);
    real op1_e3_l_3610E9#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_3510E8);
    tensor[3] op1_e3_l_3710EA#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (op1_e3_l_910D9,op1_e3_l_1710E6);
    real op1_e3_l_3810EB#2 = λ(T0[])<(1) / ( T0)> (op1_e3_l_3610E9);
    tensor[3] camU10E0#2 = λ(T0[3],T1[])<(T0_{i0} * T1)>_{3} (op1_e3_l_3710EA,op1_e3_l_3810EB);
    globals.camU1039 = camU10E0;
    tensor[3,3] op1_e3_l_451103#1 = λ(T0[3])<Σ(i2=0..2)<((ϵ_{ii0,ii1,ii2} * T0_{i2}))>(i2=0..2)>_{3 3} (op1_e3_l_310C4);
    tensor[3] op1_e3_l_471104#1 = λ(T0[3],T1[3 3])<Σ(i1=0..2)<((T0_{i1} * T1_{i0,i1}))>(i1=0..2)>_{3} (op1_e3_l_1710E6,op1_e3_l_451103);
    tensor[3] op1_e3_l_501106#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (op1_e3_l_910D9,op1_e3_l_471104);
    tensor[3] camV10F9#2 = λ(T0[],T1[],T2[3])<(T0 * T1 * T2_{i0})>_{3} (op1_e3_l_3810EB,op1_e3_l_910D9,op1_e3_l_501106);
    globals.camV103A = camV10F9;
    real _t1116#1 = 0.314159265358979323846264338327950288e1;
    real _t1118#1 = 0.36e3;
    real op1_e3_l_5111B#1 = λ(T0[],T1[])<(T0 * T1)> (camFOV1095,_t1116);
    real op1_e3_l_6111C#1 = λ(T0[],T1[])<(T1) / ( T0)> (_t1118,op1_e3_l_5111B);
    real op1_e3_l_10111F#2 = λ(T0[])<Tangent(T0)> (op1_e3_l_6111C);
    real camVmax111A#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_10111F,op1_e3_l_610C6);
    globals.camVmax103B = camVmax111A;
    real _t1129#1 = IntToReal(iresU1097);
    real _t112B#1 = IntToReal(iresV1099);
    real op1_e3_l_141134#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1129,op1_e3_l_10111F,op1_e3_l_610C6);
    real camUmax112D#1 = λ(T0[],T1[])<(T1) / ( T0)> (_t112B,op1_e3_l_141134);
    globals.camUmax103C = camUmax112D;
    kernel _t113E#1 = Kernel<tent,0>;
    image(IMAGE1D<double[3]>) img1140#1 = BorderCtlClamp<IMAGE1D<double[3]>>(cmap10A5);
    tensor[3,3] _t1142#1 = <tensor[3,3]>[camU10E0,camV10F9,camN10D5];
    real op1_e3_l_31145#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (lightVsp10A7);
    real op1_e3_l_41146#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_31145);
    real op1_e3_l_51147#1 = λ(T0[])<(1) / ( T0)> (op1_e3_l_41146);
    tensor[3] op1_e3_l_61148#1 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i1,i0} * T1_{i1}))>(i1=0..2)>_{3} (_t1142,lightVsp10A7);
    tensor[3] L1144#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (op1_e3_l_51147,op1_e3_l_61148);
    globals.L103D = L1144;
    globals.img103E = img1140;
    globals._t103F = _t113E;
    return
## strand
  strand ray (int ui1152#3, int vi1153#4)
    state:
      real rayU;
      real rayV;
      tensor[3] UV;
      tensor[3] rayOrig;
      tensor[3] rayVec;
      real camNearVsp;
      real camFarVsp;
      int offset;
      int len;
      int itter;
      int intersectionItter;
      int idx;
      tensor[2] interval;
      real s;
      real e;
      femData:MeshCell cc;
      femData:FuncCell fc;
      output real out;
      output tensor[4] rgba;
      output tensor[3][] locs;
      int ui;
      int vi;
    state init
      ENTRY116A:  preds = []
        tensor[3] camEye116B#1 = globals.camEye1013;
        int iresU116D#2 = globals.iresU1017;
        int iresV116F#3 = globals.iresV1018;
        femData:MeshCell[] 0cell_a1171#1 = globals.0cell_a1034;
        femData:FemFunc c1173#1 = globals.c1035;
        int[] indecies1175#2 = globals.indecies1022;
        tensor[2][] times1177#1 = globals.times1023;
        real camNearVsp1179#1 = globals.camNearVsp1036;
        real camFarVsp117B#1 = globals.camFarVsp1037;
        tensor[3] camN117D#1 = globals.camN1038;
        tensor[3] camU117F#1 = globals.camU1039;
        tensor[3] camV1181#1 = globals.camV103A;
        real camVmax1183#2 = globals.camVmax103B;
        real camUmax1185#2 = globals.camUmax103C;
        real _t1187#5 = -0.5e0;
        real _t1189#1 = IntToReal(ui1152);
        real _t118B#1 = IntToReal(iresU116D);
        real _t118D#3 = 0.5e0;
        real op1_e3_l_61190#1 = λ(T0[],T1[])<(T0) - (T1)> (_t118B,_t118D);
        real op1_e3_l_71191#1 = λ(T0[],T1[])<(T1) - (T0)> (_t1187,_t1189);
        real op1_e3_l_81192#1 = λ(T0[],T1[])<(T1) - (T0)> (_t1187,op1_e3_l_61190);
        real op1_e3_l_91193#2 = λ(T0[])<Neg(T0)> (camUmax1185);
        real op1_e3_l_101194#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_71191,op1_e3_l_81192);
        real op1_e3_l_111195#1 = λ(T0[],T1[])<(T0) - (T1)> (camUmax1185,op1_e3_l_91193);
        real op1_e3_l_131196#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_101194,op1_e3_l_111195);
        real rayU118F#2 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_91193,op1_e3_l_131196);
        real _t119F#1 = IntToReal(vi1153);
        real _t11A1#2 = IntToReal(iresV116F);
        real op1_e3_l_611A4#1 = λ(T0[],T1[])<(T0) - (T1)> (_t11A1,_t118D);
        real op1_e3_l_711A5#2 = λ(T0[],T1[])<(T1) - (T0)> (_t1187,_t119F);
        real op1_e3_l_811A6#1 = λ(T0[],T1[])<(T1) - (T0)> (_t1187,op1_e3_l_611A4);
        real op1_e3_l_911A7#3 = λ(T0[])<Neg(T0)> (camVmax1183);
        real op1_e3_l_1011A8#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_711A5,op1_e3_l_811A6);
        real op1_e3_l_1111A9#2 = λ(T0[],T1[])<(T0) - (T1)> (camVmax1183,op1_e3_l_911A7);
        real op1_e3_l_1311AA#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_1011A8,op1_e3_l_1111A9);
        real rayV11A3#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_911A7,op1_e3_l_1311AA);
        real op1_e3_l_2311BC#1 = λ(T0[],T1[])<(T1) - (T0)> (_t118D,_t11A1);
        real op1_e3_l_2511BE#1 = λ(T0[],T1[])<(T1) - (T0)> (_t1187,op1_e3_l_2311BC);
        real op1_e3_l_2711C0#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_711A5,op1_e3_l_2511BE);
        real op1_e3_l_3011C2#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_2711C0,op1_e3_l_1111A9);
        real op1_e3_l_3111C3#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_911A7,op1_e3_l_3011C2);
        tensor[3] op1_e3_l_3211C4#2 = λ(T0[3],T1[])<(T1 * T0_{i0})>_{3} (camU117F,rayU118F);
        tensor[3] op1_e3_l_3311C5#2 = λ(T0[3],T1[])<(T1 * T0_{i0})>_{3} (camV1181,op1_e3_l_3111C3);
        tensor[3] UV11B3#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (op1_e3_l_3211C4,op1_e3_l_3311C5);
        tensor[3] rayOrig11D9#1 = λ(T0[3],T1[3],T2[3])<(T0_{i0} + T1_{i0} + T2_{i0})>_{3} (camEye116B,op1_e3_l_3211C4,op1_e3_l_3311C5);
        real _t11FF#8 = 0.e0;
        tensor[3] _t1201#1 = <tensor[3]>[_t11FF,_t11FF,_t11FF];
        tensor[3] rayVec1203#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (camN117D,_t1201);
        int _t1205#2 = IMul(ui1152,iresV116F);
        int _t1207#1 = IAdd(_t1205,vi1153);
        int offset1209#2 = Subscript<int[]>(indecies1175,_t1207);
        int _t120B#1 = IMul(iresU116D,iresV116F);
        int _t120D#1 = IAdd(_t120B,_t1205);
        int _t120F#1 = IAdd(_t120D,vi1153);
        int len1211#1 = Subscript<int[]>(indecies1175,_t120F);
        int itter1213#3 = 0;
        int idx1215#2 = offset1209;
        tensor[2] interval1217#3 = Subscript<tensor[2][]>(times1177,idx1215);
        real s1219#1 = TensorIndex<tensor[2],[0]>(interval1217);
        real e121B#1 = TensorIndex<tensor[2],[1]>(interval1217);
        femData:MeshCell cc121D#2 = Subscript<femData:MeshCell[]>(0cell_a1171,itter1213);
        int _t121F#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc121D);
        femData:FuncCell _t1221#1 = LoadFem<femData:FuncCell>(c1173,_t121F);
        tensor[4] rgba1223#1 = <tensor[4]>[_t11FF,_t11FF,_t11FF,_t11FF];
        tensor[3][0] _t1225#1 = <tensor[3][0]>{};
        tensor[3][] _t1227#1 = MkDynamic<tensor[3],0>(_t1225);
        self.rayU = rayU118F;
        self.rayV = rayV11A3;
        self.UV = UV11B3;
        self.rayOrig = rayOrig11D9;
        self.rayVec = rayVec1203;
        self.camNearVsp = camNearVsp1179;
        self.camFarVsp = camFarVsp117B;
        self.offset = offset1209;
        self.len = len1211;
        self.itter = itter1213;
        self.intersectionItter = itter1213;
        self.idx = idx1215;
        self.interval = interval1217;
        self.s = s1219;
        self.e = e121B;
        self.cc = cc121D;
        self.fc = _t1221;
        self.out = _t11FF;
        self.rgba = rgba1223;
        self.locs = _t1227;
        self.ui = ui1152;
        self.vi = vi1153;
        return
    end state init
    method start
        ENTRY1240:  preds = []
          femData:MeshCell[] 0cell_a1241#1 = globals.0cell_a1034;
          femData:FemFunc c1243#1 = globals.c1035;
          int[] cells1245#1 = globals.cells1024;
          bool debug1247#1 = globals.debug1031;
          int debugU1249#1 = globals.debugU1032;
          int debugV124B#1 = globals.debugV1033;
          int len124D#1 = self.len;
          int idx124F#1 = self.idx;
          int ui1251#2 = self.ui;
          int vi1253#2 = self.vi;
          if debug1247 then goto ASSIGN1257 else goto JOIN125F
        ASSIGN1257:  preds = [COND1255]
          bool _t1256#1 = NEQ<int>(ui1251,debugU1249);
          if _t1256 then goto ASSIGN125A else goto JOIN125E
        ASSIGN125A:  preds = [COND1258]
          bool _t1259#1 = NEQ<int>(vi1253,debugV124B);
          if _t1259 then goto STABILIZE125C else goto JOIN125D
        STABILIZE125C:  preds = [COND125B]
          stabilize
          goto JOIN125D
        JOIN125D:  preds = [*STABILIZE125C,COND125B]
          goto JOIN125E
        JOIN125E:  preds = [JOIN125D,COND1258]
          goto JOIN125F
        JOIN125F:  preds = [JOIN125E,COND1255]
          int _t1260#1 = 0;
          bool _t1262#1 = EQ<int>(len124D,_t1260);
          if _t1262 then goto ASSIGN1266 else goto JOIN126D
        ASSIGN1266:  preds = [COND1264]
          string _t1265#1 = "(find:)No intersection found:";
          string _t1267#1 = "/";
          string _t1269#1 = "\n";
          Print<[string,int,string,int,string]>(_t1265,ui1251,_t1267,vi1253,_t1269);
          stabilize
          goto JOIN126D
        JOIN126D:  preds = [*STABILIZE126C,COND1264]
          int _t126E#1 = Subscript<int[]>(cells1245,idx124F);
          femData:MeshCell cc1270#2 = Subscript<femData:MeshCell[]>(0cell_a1241,_t126E);
          int _t1272#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc1270);
          femData:FuncCell _t1274#1 = LoadFem<femData:FuncCell>(c1243,_t1272);
          self.cc = cc1270;
          self.fc = _t1274;
          active
    end start
    method update
        ENTRY1279:  preds = []
          image(IMAGE1D<double[3]>) cmap1729#3 = globals.cmap1027;
          image(IMAGE1D<double[3]>) img127A#1 = globals.img103E;
          kernel _t127C#1 = globals._t103F;
          femData:MeshCell[] 0cell_a127E#1 = globals.0cell_a1034;
          femData:FemFunc c1280#1 = globals.c1035;
          real zeroEps1282#1 = globals.zeroEps1020;
          real intervalEps1284#4 = globals.intervalEps1021;
          tensor[2][] times1286#1 = globals.times1023;
          int[] cells1288#1 = globals.cells1024;
          tensor[3] mcnear128A#2 = globals.mcnear1025;
          tensor[3] mcfar128C#1 = globals.mcfar1026;
          real cmin128E#3 = globals.cmin1028;
          real cmax1290#2 = globals.cmax1029;
          bool light1292#1 = globals.light102A;
          real phongKa1294#1 = globals.phongKa102B;
          real phongKd1296#1 = globals.phongKd102C;
          real phongKs1298#1 = globals.phongKs102D;
          real phongSp129A#1 = globals.phongSp102E;
          tensor[3] L129C#2 = globals.L103D;
          tensor[3] rayOrig129E#4 = self.rayOrig;
          tensor[3] rayVec12A0#6 = self.rayVec;
          real camNearVsp12A2#2 = self.camNearVsp;
          real camFarVsp12A4#1 = self.camFarVsp;
          int offset12A6#1 = self.offset;
          int len12A8#1 = self.len;
          int itter12AA#3 = self.itter;
          int intersectionItter12AC#2 = self.intersectionItter;
          tensor[2] interval12AE#1 = self.interval;
          real s12B0#7 = self.s;
          real e12B2#5 = self.e;
          femData:MeshCell cc12B4#3 = self.cc;
          femData:FuncCell fc12B6#3 = self.fc;
          real out12B8#2 = self.out;
          tensor[4] rgba12BA#1 = self.rgba;
          tensor[3][] locs12BC#1 = self.locs;
          int ui12BE#1 = self.ui;
          int vi12C0#1 = self.vi;
          string _t12C2#1 = "Ui/Vi::";
          string _t12C4#1 = "/";
          string _t12C6#11 = "\n";
          Print<[string,int,string,int,string]>(_t12C2,ui12BE,_t12C4,vi12C0,_t12C6);
          string _t12C9#1 = "Interval:";
          tensor[2] _t12CB#1 = <tensor[2]>[s12B0,e12B2];
          Print<[string,tensor[2],string]>(_t12C9,_t12CB,_t12C6);
          string _t12CE#1 = "inner itter:";
          Print<[string,int,string]>(_t12CE,intersectionItter12AC,_t12C6);
          string _t12D1#1 = "Outer itter:";
          Print<[string,int,string]>(_t12D1,itter12AA,_t12C6);
          real _t12D4#1 = TensorIndex<tensor[3],[0]>(rayOrig129E);
          real _t12D6#1 = TensorIndex<tensor[3],[1]>(rayOrig129E);
          tensor[2] _t12D8#3 = <tensor[2]>[_t12D4,_t12D6];
          real _t12DA#1 = TensorIndex<tensor[3],[0]>(rayVec12A0);
          real _t12DC#1 = TensorIndex<tensor[3],[1]>(rayVec12A0);
          tensor[2] _t12DE#3 = <tensor[2]>[_t12DA,_t12DC];
          tensor[2] op1_e3_l_312E1#1 = λ(T0[],T1[2])<(T0 * T1_{i0})>_{2} (s12B0,_t12DE);
          tensor[2] startRay12E0#1 = λ(T0[2],T1[2])<(T0_{i0} + T1_{i0})>_{2} (_t12D8,op1_e3_l_312E1);
          tensor[2] op1_e3_l_312E5#1 = λ(T0[],T1[2])<(T0 * T1_{i0})>_{2} (e12B2,_t12DE);
          tensor[2] endRay12E4#1 = λ(T0[2],T1[2])<(T0_{i0} + T1_{i0})>_{2} (_t12D8,op1_e3_l_312E5);
          femData:Mesh _t12E8#8 = ExtractFem<femData:Mesh,femData:MeshCell>(cc12B4);
          int _t12EA#7 = ExtractFemItem<int,CellIndex(MeshCell)>(cc12B4);
          femData:MeshPos callNewtonPos13E1#1 = _0A92_msh_newtonInverse12ED (startRay12E0,_t12EA,_t12E8);
          tensor[2] refPos13E2#4 = ExtractFemItem<tensor[2],RefPos(Mesh)>(callNewtonPos13E1);
          femData:MeshPos callNewtonPos13E7#1 = _0A92_msh_newtonInverse12ED (endRay12E4,_t12EA,_t12E8);
          tensor[2] refPos13E8#4 = ExtractFemItem<tensor[2],RefPos(Mesh)>(callNewtonPos13E7);
          string _t13EC#1 = "inverses:";
          Print<[string,tensor[2],tensor[2],string]>(_t13EC,refPos13E2,refPos13E8,_t12C6);
          femData:FemFunc _t13EF#6 = ExtractFem<femData:FemFunc,femData:FuncCell>(fc12B6);
          femData:Space _t13F1#5 = ExtractFem<femData:Space,femData:FemFunc>(_t13EF);
          int _t13F3#5 = ExtractFemItem<int,CellIndex(FuncCell)>(fc12B6);
          real _t13F5#3 = TensorIndex<tensor[3],[2]>(rayVec12A0);
          real _t13F7#3 = TensorIndex<tensor[3],[2]>(rayOrig129E);
          int[6] femIndicies13FE#1 = ExtractFemItem2<int,int[6],ExtractIndices(Space)>(_t13F1,_t13F3);
          tensor[6] femDofs13FF#4 = ExtractFemItem2<int[6],tensor[6],ExtractDofsSeq(FemFunc)>(_t13EF,femIndicies13FE);
          tensor[6] basisResult1400#1 = EvaluateBasis<BasisArray(6)>(refPos13E2);
          real probe_l_713FA#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[6],T6[2])<Σ(i0=0..5)<((T4_{i0} * T5_{i0}))>(i0=0..5)> (_t13F3,_t13F1,_t13EF,refPos13E2,femDofs13FF,basisResult1400,refPos13E2);
          real op1_e3_l_813FB#1 = λ(T0[],T1[])<(T0 * T1)> (_t13F5,s12B0);
          real op1_e3_l_913FC#1 = λ(T0[],T1[])<(T0) - (T1)> (probe_l_713FA,op1_e3_l_813FB);
          real fa13F9#9 = λ(T0[],T1[])<(T1) - (T0)> (_t13F7,op1_e3_l_913FC);
          tensor[6] basisResult1410#1 = EvaluateBasis<BasisArray(6)>(refPos13E8);
          real probe_l_7140A#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[6],T6[2])<Σ(i0=0..5)<((T4_{i0} * T5_{i0}))>(i0=0..5)> (_t13F3,_t13F1,_t13EF,refPos13E8,femDofs13FF,basisResult1410,refPos13E8);
          real op1_e3_l_8140B#1 = λ(T0[],T1[])<(T0 * T1)> (_t13F5,e12B2);
          real op1_e3_l_9140C#1 = λ(T0[],T1[])<(T0) - (T1)> (probe_l_7140A,op1_e3_l_8140B);
          real fb1409#6 = λ(T0[],T1[])<(T1) - (T0)> (_t13F7,op1_e3_l_9140C);
          string _t1419#1 = "Vals:";
          tensor[2] _t141B#1 = <tensor[2]>[fa13F9,fb1409];
          Print<[string,tensor[2],string]>(_t1419,_t141B,_t12C6);
          real op1_e3_l_221427#1 = λ(T0[],T1[])<(T0) - (T1)> (fa13F9,fb1409);
          real _t141E#1 = λ(T0[])<Abs(T0)> (op1_e3_l_221427);
          bool _t143E#1 = LT<real>(_t141E,intervalEps1284);
          if _t143E then goto ASSIGN174D else goto JOIN1477
        ASSIGN174D:  preds = [COND1440]
          real _t1441#1 = λ(T0[])<Abs(T0)> (fa13F9);
          bool _t1453#1 = GT<real>(_t1441,intervalEps1284);
          if _t1453 then goto ASSIGN174E else goto JOIN1475
        ASSIGN174E:  preds = [COND1455]
          real _t1456#1 = λ(T0[])<Abs(T0)> (fb1409);
          bool _t1468#1 = GT<real>(_t1456,intervalEps1284);
          if _t1468 then goto ASSIGN146C else goto JOIN1473
        ASSIGN146C:  preds = [COND146A]
          string _t146B#1 = "warn\n";
          Print<[string]>(_t146B);
          real s146E#1 = λ(T0[],T1[])<(T0 + T1)> (s12B0,intervalEps1284);
          self.s = s146E;
          active
          goto JOIN1473
        JOIN1473:  preds = [*ACTIVE1471,COND146A]
          real s1472#1 = phi(s12B0)
          goto JOIN1475
        JOIN1475:  preds = [JOIN1473,COND1455]
          real s1474#1 = phi(s1472,s12B0)
          goto JOIN1477
        JOIN1477:  preds = [JOIN1475,COND1440]
          real s1476#3 = phi(s1474,s12B0)
          real op1_e3_l_381481#1 = λ(T0[],T1[])<(T0 * T1)> (s1476,fb1409);
          real op1_e3_l_391482#1 = λ(T0[],T1[])<(T0 * T1)> (e12B2,fa13F9);
          real op1_e3_l_481483#1 = λ(T0[],T1[])<(T0) - (T1)> (op1_e3_l_381481,op1_e3_l_391482);
          real op1_e3_l_491484#1 = λ(T0[],T1[])<(T0) - (T1)> (fb1409,fa13F9);
          real cup1478#7 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_481483,op1_e3_l_491484);
          string _t149E#1 = "Mid time:";
          Print<[string,real,string]>(_t149E,cup1478,_t12C6);
          tensor[2] op1_e3_l_5314AF#1 = λ(T0[2],T1[])<(T1 * T0_{i0})>_{2} (_t12DE,cup1478);
          tensor[2] midRay14A1#4 = λ(T0[2],T1[2])<(T0_{i0} + T1_{i0})>_{2} (_t12D8,op1_e3_l_5314AF);
          femData:MeshPos callNewtonPos14CC#1 = _0A92_msh_newtonInverse12ED (midRay14A1,_t12EA,_t12E8);
          tensor[2] refPos14CD#10 = ExtractFemItem<tensor[2],RefPos(Mesh)>(callNewtonPos14CC);
          tensor[6] basisResult14D5#1 = EvaluateBasis<BasisArray(6)>(refPos14CD);
          real fmVal14D1#2 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[6],T6[2])<Σ(i0=0..5)<((T4_{i0} * T5_{i0}))>(i0=0..5)> (_t13F3,_t13F1,_t13EF,refPos14CD,femDofs13FF,basisResult14D5,refPos14CD);
          real op1_e3_l_5814EA#1 = λ(T0[],T1[])<(T0 * T1)> (_t13F5,cup1478);
          real op1_e3_l_5914EB#1 = λ(T0[],T1[])<(T0) - (T1)> (fmVal14D1,op1_e3_l_5814EA);
          real fm14DB#5 = λ(T0[],T1[])<(T1) - (T0)> (_t13F7,op1_e3_l_5914EB);
          string _t150D#1 = "all vals:";
          tensor[3] _t150F#1 = <tensor[3]>[fa13F9,fm14DB,fb1409];
          Print<[string,tensor[3],string]>(_t150D,_t150F,_t12C6);
          int _t1512#6 = 1;
          int intersectionItter1514#3 = IAdd(intersectionItter12AC,_t1512);
          real _t1516#10 = 0.e0;
          bool _t1518#2 = GT<real>(fa13F9,_t1516);
          if _t1518 then goto JOIN151D else goto ASSIGN1708
        JOIN151D:  preds = [COND151A,JOIN170D]
          int _t151B#1 = phi(_t1512,_t151C)
          bool _t151E#2 = GT<real>(fm14DB,_t1516);
          if _t151E then goto JOIN1523 else goto ASSIGN1700
        JOIN1523:  preds = [COND1520,JOIN1705]
          int _t1521#1 = phi(_t1512,_t1522)
          int _t1524#1 = IMul(_t151B,_t1521);
          int _t1526#6 = 0;
          bool _t1528#1 = LT<int>(_t1524,_t1526);
          if _t1528 then goto JOIN152E else goto COND16E5
        JOIN152E:  preds = [COND152A,JOIN16F2]
          real e152B#4 = phi(cup1478,e12B2)
          real s152C#4 = phi(s1476,s152D)
          string _t152F#1 = "new interval:";
          tensor[2] _t1531#1 = <tensor[2]>[s152C,e152B];
          Print<[string,tensor[2],string]>(_t152F,_t1531,_t12C6);
          real _t1534#1 = λ(T0[])<Abs(T0)> (fm14DB);
          bool _t1568#2 = LT<real>(_t1534,zeroEps1282);
          if _t1568 then goto ASSIGN156C else goto JOIN1690
        ASSIGN156C:  preds = [COND156A]
          tensor[2] grad156B#1 = <tensor[2]>[_t1516,_t1516];
          if _t1568 then goto ASSIGN1758 else goto JOIN15A2
        ASSIGN1758:  preds = [COND156D]
          tensor[2,6] basisResult157E#1 = EvaluateBasis<BasisArray(2,6)>(refPos14CD);
          tensor[2] compositionl1570#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[2 6],T6[2])<Σ(i2=0..5)<((T4_{i2} * T5_{i0,i2}))>(i2=0..5)>_{2} (_t13F3,_t13F1,_t13EF,refPos14CD,femDofs13FF,basisResult157E,refPos14CD);
          int[3] femIndicies1580#1 = ExtractFemItem2<int,int[3],ExtractIndices(Mesh)>(_t12E8,_t12EA);
          tensor[3,2] femDofs1581#3 = ExtractFemItem2<int[3],tensor[3,2],ExtractDofsSeq(Mesh)>(_t12E8,femIndicies1580);
          tensor[2,3] basisResult1582#3 = EvaluateBasis<BasisArray(2,3)>(refPos14CD);
          tensor[2,2] probe_l_81571#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i3=0..2)<((T3_{i3,i0} * T4_{i1,i3}))>(i3=0..2)>_{2 2} (_t12EA,_t12E8,midRay14A1,femDofs1581,basisResult1582,refPos14CD);
          tensor[2,2] op1_e3_l_91572#1 = λ(T0[2 2])<Σ(i2=0..1)<((ϵ_{ii2,ii0} * T0_{i2,i1}))>(i2=0..1)>_{2 2} (probe_l_81571);
          tensor[2] probe_l_101573#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i2=0..2)<((T3_{i2,i0} * T4_{'0',i2}))>(i2=0..2)>_{2} (_t12EA,_t12E8,midRay14A1,femDofs1581,basisResult1582,refPos14CD);
          tensor[2] probe_l_111574#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i2=0..2)<((T3_{i2,i0} * T4_{'1',i2}))>(i2=0..2)>_{2} (_t12EA,_t12E8,midRay14A1,femDofs1581,basisResult1582,refPos14CD);
          tensor[2] op1_e3_l_121575#1 = λ(T0[2])<Σ(i1=0..1)<((ϵ_{ii0,ii1} * T0_{i1}))>(i1=0..1)>_{2} (probe_l_111574);
          tensor[2,2] op1_e3_l_131576#1 = λ(T0[2 2])<Σ(i2=0..1)<((ϵ_{ii2,ii0} * T0_{i1,i2}))>(i2=0..1)>_{2 2} (op1_e3_l_91572);
          real op1_e3_l_141577#1 = λ(T0[2],T1[2])<Σ(i0=0..1)<((T0_{i0} * T1_{i0}))>(i0=0..1)> (probe_l_101573,op1_e3_l_121575);
          tensor[2,2] op1_e3_l_151578#1 = λ(T0[2 2],T1[])<(T0_{i0,i1}) / ( T1)>_{2 2} (op1_e3_l_131576,op1_e3_l_141577);
          tensor[2] grad156E#1 = λ(T0[2],T1[2 2])<Σ(i104=0..1)<((T0_{i104} * T1_{i104,i0}))>(i104=0..1)>_{2} (compositionl1570,op1_e3_l_151578);
          goto JOIN15A2
        JOIN15A2:  preds = [ASSIGN159F,COND156D]
          tensor[2] grad15A0#3 = phi(grad156E,grad156B)
          real out15A1#3 = phi(fmVal14D1,out12B8)
          string _t15A3#1 = "Out val:";
          Print<[string,real,string]>(_t15A3,out15A1,_t12C6);
          string _t15A6#1 = "Grad val:";
          Print<[string,tensor[2],string]>(_t15A6,grad15A0,_t12C6);
          real _t15A9#6 = 0.1e1;
          tensor[3] mcol15AB#1 = <tensor[3]>[_t15A9,_t15A9,_t15A9];
          bool _t15AD#1 = NEQ<real>(cmin128E,cmax1290);
          if _t15AD then goto ASSIGN1763 else goto JOIN15DB
        ASSIGN1763:  preds = [COND15AF]
          real _t15B2#2 = -0.1e1;
          real op1_e3_l_515B5#1 = λ(T0[],T1[])<(T1) - (T0)> (cmin128E,out15A1);
          real op1_e3_l_615B6#1 = λ(T0[],T1[])<(T1) - (T0)> (cmin128E,cmax1290);
          real op1_e3_l_715B7#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_515B5,op1_e3_l_615B6);
          real op1_e3_l_815B8#1 = λ(T0[],T1[])<(T1) - (T0)> (_t15B2,_t15A9);
          real op1_e3_l_915B9#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_715B7,op1_e3_l_815B8);
          real _t15B4#2 = λ(T0[],T1[])<(T0 + T1)> (_t15B2,op1_e3_l_915B9);
          real Mtransform15C1#2 = Transform<IMAGE1D<double[3]>>(cmap1729);
          real MxPos15C2#1 = λ(T0[],T1[])<(T0 * T1)> (Mtransform15C1,_t15B4);
          real Ttranslate15C3#1 = Translate<IMAGE1D<double[3]>>(cmap1729);
          real imgPos15C4#2 = λ(T0[],T1[])<(T0 + T1)> (MxPos15C2,Ttranslate15C3);
          real nd15C5#2 = Floor<1>(imgPos15C4);
          real f15C6#1 = λ(T0[],T1[])<(T0) - (T1)> (imgPos15C4,nd15C5);
          int n15C7#1 = RealToInt<1>(nd15C5);
          int idx15C9#1 = n15C7;
          tensor[3,2] ldvox15CA#1 = LoadVoxelsWithCtl<IMAGE1D<double[3]>,2,clamp>(cmap1729,idx15C9);
          tensor[2] kernX_15CB#1 = BuildPos<1>(f15C6);
          tensor[2] kevalX_d0_15CC#1 = EvalKernel<2,tent,0>(kernX_15CB);
          tensor[3] mcol15C0#1 = λ(V0(1)[3],H1,T2[1],T3[1 1],V4(1)[3],H5)<Σ(i1=0..1)<((V4_{i0}(1)[i1]# * H5(1)))>(i1=0..1)>_{3} (img127A,_t127C,_t15B4,Mtransform15C1,ldvox15CA,kevalX_d0_15CC);
          goto JOIN15DB
        JOIN15DB:  preds = [ASSIGN15D9,COND15AF]
          tensor[3] mcol15DA#5 = phi(mcol15C0,mcol15AB)
          if light1292 then goto ASSIGN15DE else goto ASSIGN16DF
        ASSIGN15DE:  preds = [COND15DC]
          real _t15DD#1 = TensorIndex<tensor[2],[0]>(grad15A0);
          real _t15DF#1 = TensorIndex<tensor[2],[1]>(grad15A0);
          real _t15E3#1 = -0.1e1;
          tensor[3] _t15E5#3 = <tensor[3]>[_t15DD,_t15DF,_t15E3];
          real op1_e3_l_315E8#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (_t15E5);
          real op1_e3_l_415E9#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_315E8);
          real op1_e3_l_515EA#2 = λ(T0[])<(1) / ( T0)> (op1_e3_l_415E9);
          real op1_e3_l_615EB#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (_t15E5,L129C);
          real _t15E7#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_515EA,op1_e3_l_615EB);
          real _t15F1#1 = Max<real>(_t1516,_t15E7);
          real op1_e3_l_1015F6#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (rayVec12A0);
          real op1_e3_l_1115F7#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_1015F6);
          real op1_e3_l_1215F8#1 = λ(T0[])<(1) / ( T0)> (op1_e3_l_1115F7);
          tensor[3] op1_e3_l_1315F9#1 = λ(T0[3],T1[])<(T0_{i0} * T1)>_{3} (rayVec12A0,op1_e3_l_1215F8);
          tensor[3] op1_e3_l_1415FA#1 = λ(T0[3])<Neg(T0_{i0})>_{3} (op1_e3_l_1315F9);
          tensor[3] op1_e3_l_2015FB#3 = λ(T0[3],T1[3])<(T1_{i0} + T0_{i0})>_{3} (L129C,op1_e3_l_1415FA);
          real op1_e3_l_2215FC#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_2015FB,op1_e3_l_2015FB);
          real op1_e3_l_2315FD#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_2215FC);
          real op1_e3_l_3115FF#1 = λ(T0[])<(1) / ( T0)> (op1_e3_l_2315FD);
          real op1_e3_l_321600#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (_t15E5,op1_e3_l_2015FB);
          real _t15F3#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (op1_e3_l_515EA,op1_e3_l_3115FF,op1_e3_l_321600);
          real _t160F#1 = Max<real>(_t1516,_t15F3);
          real _t1611#1 = MathFn<pow>(_t160F,phongSp129A);
          real op1_e3_l_961621#1 = λ(T0[],T1[])<(T1) - (T0)> (camNearVsp12A2,cup1478);
          real op1_e3_l_971622#1 = λ(T0[],T1[])<(T1) - (T0)> (camNearVsp12A2,camFarVsp12A4);
          real op1_e3_l_981623#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_961621,op1_e3_l_971622);
          tensor[3] op1_e3_l_991624#1 = λ(T0[3],T1[3])<(T1_{i0}) - (T0_{i0})>_{3} (mcnear128A,mcfar128C);
          tensor[3] op1_e3_l_1001625#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (op1_e3_l_981623,op1_e3_l_991624);
          tensor[3] op1_e3_l_1011626#2 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (mcnear128A,op1_e3_l_1001625);
          tensor[3] op1_e3_l_1291627#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (phongKa1294,mcol15DA);
          tensor[3] op1_e3_l_1301628#1 = λ(T0[3],T1[],T2[],T3[3])<(T1 * T2 * T0_{i0} * T3_{i0})>_{3} (mcol15DA,_t15F1,phongKd1296,op1_e3_l_1011626);
          tensor[3] op1_e3_l_1311629#1 = λ(T0[],T1[],T2[3])<(T0 * T1 * T2_{i0})>_{3} (_t1611,phongKs1298,op1_e3_l_1011626);
          tensor[3] fin1613#3 = λ(T0[3],T1[3],T2[3])<(T0_{i0} + T1_{i0} + T2_{i0})>_{3} (op1_e3_l_1291627,op1_e3_l_1301628,op1_e3_l_1311629);
          real _t164D#1 = TensorIndex<tensor[3],[0]>(fin1613);
          real _t164F#1 = TensorIndex<tensor[3],[1]>(fin1613);
          real _t1651#1 = TensorIndex<tensor[3],[2]>(fin1613);
          tensor[4] rgba1653#1 = <tensor[4]>[_t164D,_t164F,_t1651,_t15A9];
          goto JOIN1657
        JOIN1657:  preds = [ASSIGN1654,ASSIGN16E4]
          tensor[4] rgba1655#1 = phi(rgba1653,rgba1656)
          tensor[3] op1_e3_l_531666#1 = λ(T0[3],T1[])<(T1 * T0_{i0})>_{3} (rayVec12A0,cup1478);
          tensor[3] _t1658#1 = λ(T0[3],T1[3])<(T1_{i0} + T0_{i0})>_{3} (rayOrig129E,op1_e3_l_531666);
          tensor[3][1] _t1682#1 = <tensor[3][1]>{_t1658};
          tensor[3][] _t1684#1 = MkDynamic<tensor[3],1>(_t1682);
          self.intersectionItter = intersectionItter1514;
          self.s = s152C;
          self.e = e152B;
          self.out = out15A1;
          self.rgba = rgba1655;
          self.locs = _t1684;
          stabilize
          goto JOIN1690
        JOIN1690:  preds = [*STABILIZE168C,COND156A]
          tensor[3][] locs168D#3 = phi(locs12BC)
          tensor[4] rgba168E#3 = phi(rgba12BA)
          real out168F#3 = phi(out12B8)
          int _t1691#1 = 32;
          bool _t1693#1 = GT<int>(intersectionItter1514,_t1691);
          if _t1693 then goto ASSIGN1697 else goto ASSIGN16DC
        ASSIGN1697:  preds = [COND1695]
          int itter1696#4 = IAdd(itter12AA,_t1512);
          bool _t1698#1 = GTE<int>(itter1696,len12A8);
          if _t1698 then goto ASSIGN169C else goto JOIN16A9
        ASSIGN169C:  preds = [COND169A]
          string _t169B#1 = "No intersection found\n";
          Print<[string]>(_t169B);
          string _t169E#1 = "Fin pixel=============================\n";
          Print<[string]>(_t169E);
          self.itter = itter1696;
          self.intersectionItter = _t1526;
          self.s = s152C;
          self.e = e152B;
          self.out = out168F;
          self.rgba = rgba168E;
          self.locs = locs168D;
          stabilize
          goto JOIN16A9
        JOIN16A9:  preds = [*STABILIZE16A8,COND169A]
          int _t16AA#2 = IAdd(offset12A6,itter1696);
          tensor[2] interval16AC#3 = Subscript<tensor[2][]>(times1286,_t16AA);
          int _t16AE#1 = Subscript<int[]>(cells1288,_t16AA);
          femData:MeshCell cc16B0#2 = Subscript<femData:MeshCell[]>(0cell_a127E,_t16AE);
          real s16B2#1 = TensorIndex<tensor[2],[0]>(interval16AC);
          real e16B4#1 = TensorIndex<tensor[2],[1]>(interval16AC);
          int _t16B6#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc16B0);
          femData:FuncCell _t16B8#1 = LoadFem<femData:FuncCell>(c1280,_t16B6);
          string _t16BA#1 = "++++++++++++++++Next interval!+++++++++++++++++++\n";
          Print<[string]>(_t16BA);
          self.itter = itter1696;
          self.intersectionItter = _t1526;
          self.interval = interval16AC;
          self.s = s16B2;
          self.e = e16B4;
          self.cc = cc16B0;
          self.fc = _t16B8;
          self.out = out168F;
          self.rgba = rgba168E;
          self.locs = locs168D;
          active
          goto JOIN16CF
        JOIN16CF:  preds = [*ACTIVE16C7,MASSIGN16DD]
          femData:FuncCell fc16C8#1 = phi(fc12B6)
          femData:MeshCell cc16C9#1 = phi(cc12B4)
          real e16CA#1 = phi(e152B)
          real s16CB#1 = phi(s152C)
          tensor[2] interval16CC#1 = phi(interval12AE)
          int intersectionItter16CD#1 = phi(intersectionItter1514)
          int itter16CE#1 = phi(itter12AA)
          self.itter = itter16CE;
          self.intersectionItter = intersectionItter16CD;
          self.interval = interval16CC;
          self.s = s16CB;
          self.e = e16CA;
          self.cc = cc16C9;
          self.fc = fc16C8;
          self.out = out168F;
          self.rgba = rgba168E;
          self.locs = locs168D;
          active
        ASSIGN16DC:  preds = [COND1695]
          string _t16DB#1 = "---------------\n";
          Print<[string]>(_t16DB);
          goto JOIN16CF
        ASSIGN16DF:  preds = [COND15DC]
          real _t16DE#1 = TensorIndex<tensor[3],[0]>(mcol15DA);
          real _t16E0#1 = TensorIndex<tensor[3],[1]>(mcol15DA);
          real _t16E2#1 = TensorIndex<tensor[3],[2]>(mcol15DA);
          tensor[4] rgba1656#1 = <tensor[4]>[_t16DE,_t16E0,_t16E2,_t15A9];
          goto JOIN1657
        COND16E5:  preds = [COND152A]
          if _t1518 then goto JOIN16E8 else goto ASSIGN16FA
        JOIN16E8:  preds = [COND16E5,JOIN16FE]
          int _t16E6#1 = phi(_t1512,_t16E7)
          if _t151E then goto JOIN16EC else goto ASSIGN16F4
        JOIN16EC:  preds = [COND16E9,JOIN16F8]
          int _t16EA#1 = phi(_t1512,_t16EB)
          int _t16ED#1 = IMul(_t16E6,_t16EA);
          bool _t16EF#1 = GT<int>(_t16ED,_t1526);
          if _t16EF then goto JOIN16F2 else goto JOIN16F2
        JOIN16F2:  preds = [COND16F1,COND16F1]
          real s152D#1 = phi(cup1478,s1476)
          goto JOIN152E
        ASSIGN16F4:  preds = [COND16E9]
          bool _t16F3#1 = LT<real>(fm14DB,_t1516);
          if _t16F3 then goto ASSIGN16F7 else goto JOIN16F8
        ASSIGN16F7:  preds = [COND16F5]
          int _t16F6#1 = -1;
          goto JOIN16F8
        JOIN16F8:  preds = [ASSIGN16F7,COND16F5]
          int _t16EB#1 = phi(_t16F6,_t1526)
          goto JOIN16EC
        ASSIGN16FA:  preds = [COND16E5]
          bool _t16F9#1 = LT<real>(fa13F9,_t1516);
          if _t16F9 then goto ASSIGN16FD else goto JOIN16FE
        ASSIGN16FD:  preds = [COND16FB]
          int _t16FC#1 = -1;
          goto JOIN16FE
        JOIN16FE:  preds = [ASSIGN16FD,COND16FB]
          int _t16E7#1 = phi(_t16FC,_t1526)
          goto JOIN16E8
        ASSIGN1700:  preds = [COND1520]
          bool _t16FF#1 = LT<real>(fm14DB,_t1516);
          if _t16FF then goto ASSIGN1703 else goto ASSIGN1706
        ASSIGN1703:  preds = [COND1701]
          int _t1702#1 = -1;
          goto JOIN1705
        JOIN1705:  preds = [ASSIGN1703,ASSIGN1706]
          int _t1522#1 = phi(_t1702,_t1704)
          goto JOIN1523
        ASSIGN1706:  preds = [COND1701]
          int _t1704#1 = 0;
          goto JOIN1705
        ASSIGN1708:  preds = [COND151A]
          bool _t1707#1 = LT<real>(fa13F9,_t1516);
          if _t1707 then goto ASSIGN170B else goto ASSIGN170E
        ASSIGN170B:  preds = [COND1709]
          int _t170A#1 = -1;
          goto JOIN170D
        JOIN170D:  preds = [ASSIGN170B,ASSIGN170E]
          int _t151C#1 = phi(_t170A,_t170C)
          goto JOIN151D
        ASSIGN170E:  preds = [COND1709]
          int _t170C#1 = 0;
          goto JOIN170D
    end update
  end ray
## initial strand creation
  GRID(2)
    ENTRY170F:  preds = []
      int iresU1710#1 = globals.iresU1017;
      int iresV1712#1 = globals.iresV1018;
      int _t1714#2 = 0;
      int _t1716#2 = 1;
      int _t1718#1 = ISub(iresU1710,_t1716);
      int[] _t171A#1 = Range(_t1714,_t1718);
    FOREACH171D:  preds = [ASSIGN171B,NEXT1726]
      foreach (vi171C in _t171A) on exit goto RETURN1727
      int _t171E#1 = ISub(iresV1712,_t1716);
      int[] _t1720#1 = Range(_t1714,_t171E);
    FOREACH1723:  preds = [ASSIGN1721,NEXT1725]
      foreach (ui1722 in _t1720) on exit goto NEXT1726
      new ray(ui1722,vi171C);
      goto FOREACH1723
    NEXT1726:  preds = [FOREACH1723]
      goto FOREACH171D
    RETURN1727:  preds = [FOREACH171D]
      return
#### end program ####
##### mid-ir: after border control ####
## properties
  GlobalInit StrandArray HasStartMethod ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[]) HasInputs HasGlobals
## globals
  input isoval1011 (isoval) = <default>
  input thick1012 (thick) = <default>
  input camEye1013 (camEye) = <default>
  input camAt1014 (camAt) = <default>
  input camUp1015 (camUp) = <default>
  input camFOV1016 (camFOV) = <default>
  input iresU1017 (iresU) = <default>
  input iresV1018 (iresV) = <default>
  input camNear1019 (camNear) = <default>
  input camFar101A (camFar) = <default>
  input refStep101B (refStep) = <default>
  input rayStep101C (rayStep) = <default>
  input a101D (a) = <no-default>
  input 0b046F_intermedateGlobal101E (b) = <no-default>
  input 0c0471_intermedateGlobal101F (c) = <no-default>
  input zeroEps1020 (zeroEps) = <default>
  input intervalEps1021 (intervalEps) = <default>
  input indecies1022 (indecies) = <no-default>
  input times1023 (times) = <no-default>
  input cells1024 (cells) = <no-default>
  input mcnear1025 (mcnear) = <default>
  input mcfar1026 (mcfar) = <default>
  input cmap1027 (cmap) = image("/home/teocollin/gitcode/diderot/tests/lipRay/find/cmap.nrrd")
  input cmin1028 (cmin) = <default>
  input cmax1029 (cmax) = <default>
  input light102A (light) = <default>
  input phongKa102B (phongKa) = <default>
  input phongKd102C (phongKd) = <default>
  input phongKs102D (phongKs) = <default>
  input phongSp102E (phongSp) = <default>
  input maxAlpha102F (maxAlpha) = <default>
  input lightVsp1030 (lightVsp) = <default>
  input debug1031 (debug) = <default>
  input debugU1032 (debugU) = <default>
  input debugV1033 (debugV) = <default>
  global femData:MeshCell[] 0cell_a1034
  global femData:FemFunc c1035
  global real camNearVsp1036
  global real camFarVsp1037
  global tensor[3] camN1038
  global tensor[3] camU1039
  global tensor[3] camV103A
  global real camVmax103B
  global real camUmax103C
  global tensor[3] L103D
  global image(IMAGE1D<double[3]>) img103E
  global kernel _t103F
## functions
  function femData:MeshPos _0A92_msh_newtonInverse12ED (tensor[2] pos12EE#3, int cellInt12EF#7, femData:Mesh mesh12F0#10) {
    ENTRY12F1:  preds = []
      real _t12F2#2 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
      tensor[2] xn12F4#8 = <tensor[2]>[_t12F2,_t12F2];
      int _t12F6#1 = 0;
      int _t12F8#1 = 16;
      int[] _t12FA#1 = Range(_t12F6,_t12F8);
    FOREACH12FD:  preds = [ASSIGN12FB,NEXT13DA]
      foreach (itter12FC in _t12FA) on exit goto ASSIGN13DF
        tensor[2] xn12FF#6 = phi(xn12F4,xn12FE)
      int[3] femIndicies130C#1 = ExtractFemItem2<int,int[3],ExtractIndices(Mesh)>(mesh12F0,cellInt12EF);
      tensor[3,2] femDofs130D#5 = ExtractFemItem2<int[3],tensor[3,2],ExtractDofsSeq(Mesh)>(mesh12F0,femIndicies130C);
      tensor[2,3] basisResult130E#3 = EvaluateBasis<BasisArray(2,3)>(xn12F4);
      tensor[2,2] probe_l_101300#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i3=0..2)<((T3_{i3,i0} * T4_{i1,i3}))>(i3=0..2)>_{2 2} (cellInt12EF,mesh12F0,xn12F4,femDofs130D,basisResult130E,xn12F4);
      tensor[2,2] op1_e3_l_111301#1 = λ(T0[2 2])<Σ(i2=0..1)<((ϵ_{ii2,ii0} * T0_{i2,i1}))>(i2=0..1)>_{2 2} (probe_l_101300);
      tensor[2] probe_l_121302#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i2=0..2)<((T3_{i2,i0} * T4_{'0',i2}))>(i2=0..2)>_{2} (cellInt12EF,mesh12F0,xn12F4,femDofs130D,basisResult130E,xn12F4);
      tensor[2] probe_l_131303#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i2=0..2)<((T3_{i2,i0} * T4_{'1',i2}))>(i2=0..2)>_{2} (cellInt12EF,mesh12F0,xn12F4,femDofs130D,basisResult130E,xn12F4);
      tensor[2] op1_e3_l_141304#1 = λ(T0[2])<Σ(i1=0..1)<((ϵ_{ii0,ii1} * T0_{i1}))>(i1=0..1)>_{2} (probe_l_131303);
      tensor[2,2] op1_e3_l_151305#1 = λ(T0[2 2])<Σ(i2=0..1)<((ϵ_{ii2,ii0} * T0_{i1,i2}))>(i2=0..1)>_{2 2} (op1_e3_l_111301);
      real op1_e3_l_161306#1 = λ(T0[2],T1[2])<Σ(i0=0..1)<((T0_{i0} * T1_{i0}))>(i0=0..1)> (probe_l_121302,op1_e3_l_141304);
      tensor[3] basisResult1314#2 = EvaluateBasis<BasisArray(3)>(xn12FF);
      tensor[2] probe_l_171307#1 = λ(T0[2],INT1,FEM(msh)2,T3[3 2],T4[3],T5[2])<Σ(i1=0..2)<((T3_{i1,i0} * T4_{i1}))>(i1=0..2)>_{2} (xn12FF,cellInt12EF,mesh12F0,femDofs130D,basisResult1314,xn12FF);
      tensor[2,2] op1_e3_l_181308#2 = λ(T0[2 2],T1[])<(T0_{i0,i1}) / ( T1)>_{2 2} (op1_e3_l_151305,op1_e3_l_161306);
      tensor[2] op1_e3_l_191309#1 = λ(T0[2],T1[2])<(T1_{i0}) - (T0_{i0})>_{2} (pos12EE,probe_l_171307);
      tensor[2] op1_e3_l_20130A#1 = λ(T0[2 2],T1[2])<Σ(i1=0..1)<((T0_{i0,i1} * T1_{i1}))>(i1=0..1)>_{2} (op1_e3_l_181308,op1_e3_l_191309);
      tensor[2] xn12FE#4 = λ(T0[2],T1[2])<(T0_{i0}) - (T1_{i0})>_{2} (xn12FF,op1_e3_l_20130A);
      real _t132B#2 = 0.1e-7;
      real _t132D#1 = λ(T0[],T1[])<(T0 * T1)> (_t132B,_t132B);
      tensor[2] probe_l_251337#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[3],T5[2])<Σ(i1=0..2)<((T3_{i1,i0} * T4_{i1}))>(i1=0..2)>_{2} (cellInt12EF,mesh12F0,xn12FF,femDofs130D,basisResult1314,xn12FF);
      tensor[2] op1_e3_l_271339#1 = λ(T0[2],T1[2])<(T1_{i0}) - (T0_{i0})>_{2} (pos12EE,probe_l_251337);
      tensor[2] op1_e3_l_38133A#2 = λ(T0[2 2],T1[2])<Σ(i1=0..1)<((T0_{i0,i1} * T1_{i1}))>(i1=0..1)>_{2} (op1_e3_l_181308,op1_e3_l_271339);
      real _t132F#1 = λ(T0[2],T1[2])<Σ(i0=0..1)<((T0_{i0} * T1_{i0}))>(i0=0..1)> (op1_e3_l_38133A,op1_e3_l_38133A);
      bool _t135B#1 = GTE<real>(_t132D,_t132F);
      if _t135B then goto ASSIGN135F else goto JOIN13D9
    ASSIGN135F:  preds = [COND135D]
      real _t135E#3 = 0.1e1;
      real _t1360#3 = 0.1e-8;
      real _t1362#1 = λ(T0[],T1[])<(T0 + T1)> (_t135E,_t1360);
      tensor[2] _t1364#1 = <tensor[2]>[_t135E,_t135E];
      real _t1366#1 = λ(T0[2],T1[2])<Σ(i0=0..1)<((T0_{i0} * T1_{i0}))>(i0=0..1)> (_t1364,xn12FE);
      bool _t1394#1 = GT<real>(_t1362,_t1366);
      tensor[2] _t1396#1 = <tensor[2]>[_t1360,_t1360];
      tensor[2] _t1398#2 = λ(T0[2],T1[2])<(T0_{i0} + T1_{i0})>_{2} (_t1396,xn12FE);
      real _t13C6#1 = TensorIndex<tensor[2],[0]>(_t1398);
      real _t13C8#2 = -0.e0;
      bool _t13CA#1 = GT<real>(_t13C6,_t13C8);
      real _t13CC#1 = TensorIndex<tensor[2],[1]>(_t1398);
      bool _t13CE#1 = GT<real>(_t13CC,_t13C8);
      bool _t13D0#1 = BAnd(_t13CA,_t13CE);
      bool _t13D2#1 = BAnd(_t1394,_t13D0);
      if _t13D2 then goto ASSIGN13D6 else goto ASSIGN13DC
    ASSIGN13D6:  preds = [COND13D4]
      femData:MeshPos _t13D5#1 = ExtractFemItemN<[femData:Mesh,int,tensor[2],tensor[2]],femData:MeshPos,AllBuild(MeshPos),0000,"",[],int>(mesh12F0,cellInt12EF,xn12FE,pos12EE);
      return _t13D5
      goto JOIN13D8
    JOIN13D8:  preds = [*RETURN(_t13D5)13D7,*RETURN(_t13DB)13DD]
      goto JOIN13D9
    JOIN13D9:  preds = [*JOIN13D8,COND135D]
      goto FOREACH12FD
    ASSIGN13DC:  preds = [COND13D4]
      femData:MeshPos _t13DB#1 = ExtractFemItemN<[femData:Mesh],femData:MeshPos,InvalidBuild(MeshPos),0000,"",[],int>(mesh12F0);
      return _t13DB
      goto JOIN13D8
    ASSIGN13DF:  preds = [FOREACH12FD]
      femData:MeshPos _t13DE#1 = ExtractFemItemN<[femData:Mesh],femData:MeshPos,InvalidBuild(MeshPos),0000,"",[],int>(mesh12F0);
      return _t13DE
}
## input initialization
  ENTRY1040:  preds = []
    real isoval1041#1 = 0.2e0;
    globals.isoval1011 = isoval1041;
    real thick1044#1 = 0.7e-1;
    globals.thick1012 = thick1044;
    real _t1047#2 = 0.3e1;
    real _t1049#1 = -0.3e1;
    tensor[3] camEye104B#1 = <tensor[3]>[_t1047,_t1049,_t1047];
    globals.camEye1013 = camEye104B;
    real _t104E#5 = 0.5e0;
    tensor[3] camAt1050#1 = <tensor[3]>[_t104E,_t104E,_t104E];
    globals.camAt1014 = camAt1050;
    real _t1053#5 = 0.e0;
    real _t1055#7 = 0.1e1;
    tensor[3] camUp1057#1 = <tensor[3]>[_t1053,_t1053,_t1055];
    globals.camUp1015 = camUp1057;
    real camFOV105A#1 = 0.137e2;
    globals.camFOV1016 = camFOV105A;
    int iresU105D#2 = 10;
    globals.iresU1017 = iresU105D;
    globals.iresV1018 = iresU105D;
    real camNear1061#1 = -0.2e1;
    globals.camNear1019 = camNear1061;
    real camFar1064#1 = 0.5e1;
    globals.camFar101A = camFar1064;
    globals.refStep101B = _t1055;
    real rayStep1068#1 = 0.1e-1;
    globals.rayStep101C = rayStep1068;
    real zeroEps106B#2 = 0.1e-10;
    globals.zeroEps1020 = zeroEps106B;
    globals.intervalEps1021 = zeroEps106B;
    tensor[3] mcnear106F#2 = <tensor[3]>[_t1055,_t1055,_t1055];
    globals.mcnear1025 = mcnear106F;
    globals.mcfar1026 = mcnear106F;
    globals.cmin1028 = _t1053;
    globals.cmax1029 = _t1055;
    bool light1075#2 = false;
    globals.light102A = light1075;
    globals.phongKa102B = _t104E;
    globals.phongKd102C = _t104E;
    globals.phongKs102D = _t1053;
    real phongSp107B#1 = 0.6e2;
    globals.phongSp102E = phongSp107B;
    globals.maxAlpha102F = _t1055;
    real _t107F#1 = 0.369e1;
    real _t1081#1 = 0.153e1;
    tensor[3] lightVsp1083#1 = <tensor[3]>[_t1053,_t107F,_t1081];
    globals.lightVsp1030 = lightVsp1083;
    globals.debug1031 = light1075;
    int debugU1087#1 = 8;
    globals.debugU1032 = debugU1087;
    int debugV108A#1 = 2;
    globals.debugV1033 = debugV108A;
    return
## global-variable initialization
  ENTRY108E:  preds = []
    tensor[3] camEye108F#1 = globals.camEye1013;
    tensor[3] camAt1091#1 = globals.camAt1014;
    tensor[3] camUp1093#1 = globals.camUp1015;
    real camFOV1095#1 = globals.camFOV1016;
    int iresU1097#1 = globals.iresU1017;
    int iresV1099#1 = globals.iresV1018;
    real camNear109B#1 = globals.camNear1019;
    real camFar109D#1 = globals.camFar101A;
    femData:Mesh a109F#3 = globals.a101D;
    femData:Space 0b046F_intermedateGlobal10A1#1 = globals.0b046F_intermedateGlobal101E;
    femData:FemFunc 0c0471_intermedateGlobal10A3#1 = globals.0c0471_intermedateGlobal101F;
    image(IMAGE1D<double[3]>) cmap10A5#1 = globals.cmap1027;
    tensor[3] lightVsp10A7#2 = globals.lightVsp1030;
    int _t10A9#1 = 0;
    int _t10AB#1 = 1;
    int _t10AD#1 = ExtractFemItem<int,NumCell(Mesh)>(a109F);
    int _t10AF#1 = ISub(_t10AD,_t10AB);
    int[] _t10B1#1 = Range(_t10A9,_t10AF);
    femData:MeshCell[] _t10B3#1 = <femData:MeshCell[]>{};
  FOREACH10B6:  preds = [ASSIGN10B4,NEXT10BC]
    foreach (_t10B5 in _t10B1) on exit goto GASSIGN10BD
      femData:MeshCell[] _t10BA#2 = phi(_t10B3,_t10B9)
    femData:MeshCell _t10B7#1 = LoadFem<femData:MeshCell>(a109F,_t10B5);
    femData:MeshCell[] _t10B9#1 = Append<femData:MeshCell>(_t10BA,_t10B7);
    goto FOREACH10B6
  GASSIGN10BD:  preds = [FOREACH10B6]
    globals.0cell_a1034 = _t10BA;
    femData:Space b10BE#1 = LoadFem<femData:Space>(0b046F_intermedateGlobal10A1,a109F);
    femData:FemFunc c10C0#1 = LoadFem<femData:FemFunc>(0c0471_intermedateGlobal10A3,b10BE);
    globals.c1035 = c10C0;
    tensor[3] op1_e3_l_310C4#5 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (camAt1091,camEye108F);
    real op1_e3_l_510C5#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_310C4,op1_e3_l_310C4);
    real op1_e3_l_610C6#5 = λ(T0[])<Sqrt(T0)> (op1_e3_l_510C5);
    real camNearVsp10C3#1 = λ(T0[],T1[])<(T0 + T1)> (camNear109B,op1_e3_l_610C6);
    globals.camNearVsp1036 = camNearVsp10C3;
    real camFarVsp10CC#1 = λ(T0[],T1[])<(T0 + T1)> (camFar109D,op1_e3_l_610C6);
    globals.camFarVsp1037 = camFarVsp10CC;
    real op1_e3_l_910D9#6 = λ(T0[])<(1) / ( T0)> (op1_e3_l_610C6);
    tensor[3] camN10D5#2 = λ(T0[3],T1[])<(T0_{i0} * T1)>_{3} (op1_e3_l_310C4,op1_e3_l_910D9);
    globals.camN1038 = camN10D5;
    tensor[3,3] op1_e3_l_1510E4#1 = λ(T0[3])<Σ(i2=0..2)<((ϵ_{ii0,ii1,ii2} * T0_{i2}))>(i2=0..2)>_{3 3} (camUp1093);
    tensor[3] op1_e3_l_1710E6#4 = λ(T0[3],T1[3 3])<Σ(i1=0..2)<((T0_{i1} * T1_{i0,i1}))>(i1=0..2)>_{3} (op1_e3_l_310C4,op1_e3_l_1510E4);
    real op1_e3_l_3410E7#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_1710E6,op1_e3_l_1710E6);
    real op1_e3_l_3510E8#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (op1_e3_l_910D9,op1_e3_l_910D9,op1_e3_l_3410E7);
    real op1_e3_l_3610E9#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_3510E8);
    tensor[3] op1_e3_l_3710EA#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (op1_e3_l_910D9,op1_e3_l_1710E6);
    real op1_e3_l_3810EB#2 = λ(T0[])<(1) / ( T0)> (op1_e3_l_3610E9);
    tensor[3] camU10E0#2 = λ(T0[3],T1[])<(T0_{i0} * T1)>_{3} (op1_e3_l_3710EA,op1_e3_l_3810EB);
    globals.camU1039 = camU10E0;
    tensor[3,3] op1_e3_l_451103#1 = λ(T0[3])<Σ(i2=0..2)<((ϵ_{ii0,ii1,ii2} * T0_{i2}))>(i2=0..2)>_{3 3} (op1_e3_l_310C4);
    tensor[3] op1_e3_l_471104#1 = λ(T0[3],T1[3 3])<Σ(i1=0..2)<((T0_{i1} * T1_{i0,i1}))>(i1=0..2)>_{3} (op1_e3_l_1710E6,op1_e3_l_451103);
    tensor[3] op1_e3_l_501106#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (op1_e3_l_910D9,op1_e3_l_471104);
    tensor[3] camV10F9#2 = λ(T0[],T1[],T2[3])<(T0 * T1 * T2_{i0})>_{3} (op1_e3_l_3810EB,op1_e3_l_910D9,op1_e3_l_501106);
    globals.camV103A = camV10F9;
    real _t1116#1 = 0.314159265358979323846264338327950288e1;
    real _t1118#1 = 0.36e3;
    real op1_e3_l_5111B#1 = λ(T0[],T1[])<(T0 * T1)> (camFOV1095,_t1116);
    real op1_e3_l_6111C#1 = λ(T0[],T1[])<(T1) / ( T0)> (_t1118,op1_e3_l_5111B);
    real op1_e3_l_10111F#2 = λ(T0[])<Tangent(T0)> (op1_e3_l_6111C);
    real camVmax111A#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_10111F,op1_e3_l_610C6);
    globals.camVmax103B = camVmax111A;
    real _t1129#1 = IntToReal(iresU1097);
    real _t112B#1 = IntToReal(iresV1099);
    real op1_e3_l_141134#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t1129,op1_e3_l_10111F,op1_e3_l_610C6);
    real camUmax112D#1 = λ(T0[],T1[])<(T1) / ( T0)> (_t112B,op1_e3_l_141134);
    globals.camUmax103C = camUmax112D;
    kernel _t113E#1 = Kernel<tent,0>;
    image(IMAGE1D<double[3]>) img1140#1 = BorderCtlClamp<IMAGE1D<double[3]>>(cmap10A5);
    tensor[3,3] _t1142#1 = <tensor[3,3]>[camU10E0,camV10F9,camN10D5];
    real op1_e3_l_31145#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (lightVsp10A7);
    real op1_e3_l_41146#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_31145);
    real op1_e3_l_51147#1 = λ(T0[])<(1) / ( T0)> (op1_e3_l_41146);
    tensor[3] op1_e3_l_61148#1 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i1,i0} * T1_{i1}))>(i1=0..2)>_{3} (_t1142,lightVsp10A7);
    tensor[3] L1144#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (op1_e3_l_51147,op1_e3_l_61148);
    globals.L103D = L1144;
    globals.img103E = img1140;
    globals._t103F = _t113E;
    return
## strand
  strand ray (int ui1152#3, int vi1153#4)
    state:
      real rayU;
      real rayV;
      tensor[3] UV;
      tensor[3] rayOrig;
      tensor[3] rayVec;
      real camNearVsp;
      real camFarVsp;
      int offset;
      int len;
      int itter;
      int intersectionItter;
      int idx;
      tensor[2] interval;
      real s;
      real e;
      femData:MeshCell cc;
      femData:FuncCell fc;
      output real out;
      output tensor[4] rgba;
      output tensor[3][] locs;
      int ui;
      int vi;
    state init
      ENTRY116A:  preds = []
        tensor[3] camEye116B#1 = globals.camEye1013;
        int iresU116D#2 = globals.iresU1017;
        int iresV116F#3 = globals.iresV1018;
        femData:MeshCell[] 0cell_a1171#1 = globals.0cell_a1034;
        femData:FemFunc c1173#1 = globals.c1035;
        int[] indecies1175#2 = globals.indecies1022;
        tensor[2][] times1177#1 = globals.times1023;
        real camNearVsp1179#1 = globals.camNearVsp1036;
        real camFarVsp117B#1 = globals.camFarVsp1037;
        tensor[3] camN117D#1 = globals.camN1038;
        tensor[3] camU117F#1 = globals.camU1039;
        tensor[3] camV1181#1 = globals.camV103A;
        real camVmax1183#2 = globals.camVmax103B;
        real camUmax1185#2 = globals.camUmax103C;
        real _t1187#5 = -0.5e0;
        real _t1189#1 = IntToReal(ui1152);
        real _t118B#1 = IntToReal(iresU116D);
        real _t118D#3 = 0.5e0;
        real op1_e3_l_61190#1 = λ(T0[],T1[])<(T0) - (T1)> (_t118B,_t118D);
        real op1_e3_l_71191#1 = λ(T0[],T1[])<(T1) - (T0)> (_t1187,_t1189);
        real op1_e3_l_81192#1 = λ(T0[],T1[])<(T1) - (T0)> (_t1187,op1_e3_l_61190);
        real op1_e3_l_91193#2 = λ(T0[])<Neg(T0)> (camUmax1185);
        real op1_e3_l_101194#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_71191,op1_e3_l_81192);
        real op1_e3_l_111195#1 = λ(T0[],T1[])<(T0) - (T1)> (camUmax1185,op1_e3_l_91193);
        real op1_e3_l_131196#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_101194,op1_e3_l_111195);
        real rayU118F#2 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_91193,op1_e3_l_131196);
        real _t119F#1 = IntToReal(vi1153);
        real _t11A1#2 = IntToReal(iresV116F);
        real op1_e3_l_611A4#1 = λ(T0[],T1[])<(T0) - (T1)> (_t11A1,_t118D);
        real op1_e3_l_711A5#2 = λ(T0[],T1[])<(T1) - (T0)> (_t1187,_t119F);
        real op1_e3_l_811A6#1 = λ(T0[],T1[])<(T1) - (T0)> (_t1187,op1_e3_l_611A4);
        real op1_e3_l_911A7#3 = λ(T0[])<Neg(T0)> (camVmax1183);
        real op1_e3_l_1011A8#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_711A5,op1_e3_l_811A6);
        real op1_e3_l_1111A9#2 = λ(T0[],T1[])<(T0) - (T1)> (camVmax1183,op1_e3_l_911A7);
        real op1_e3_l_1311AA#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_1011A8,op1_e3_l_1111A9);
        real rayV11A3#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_911A7,op1_e3_l_1311AA);
        real op1_e3_l_2311BC#1 = λ(T0[],T1[])<(T1) - (T0)> (_t118D,_t11A1);
        real op1_e3_l_2511BE#1 = λ(T0[],T1[])<(T1) - (T0)> (_t1187,op1_e3_l_2311BC);
        real op1_e3_l_2711C0#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_711A5,op1_e3_l_2511BE);
        real op1_e3_l_3011C2#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_2711C0,op1_e3_l_1111A9);
        real op1_e3_l_3111C3#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_911A7,op1_e3_l_3011C2);
        tensor[3] op1_e3_l_3211C4#2 = λ(T0[3],T1[])<(T1 * T0_{i0})>_{3} (camU117F,rayU118F);
        tensor[3] op1_e3_l_3311C5#2 = λ(T0[3],T1[])<(T1 * T0_{i0})>_{3} (camV1181,op1_e3_l_3111C3);
        tensor[3] UV11B3#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (op1_e3_l_3211C4,op1_e3_l_3311C5);
        tensor[3] rayOrig11D9#1 = λ(T0[3],T1[3],T2[3])<(T0_{i0} + T1_{i0} + T2_{i0})>_{3} (camEye116B,op1_e3_l_3211C4,op1_e3_l_3311C5);
        real _t11FF#8 = 0.e0;
        tensor[3] _t1201#1 = <tensor[3]>[_t11FF,_t11FF,_t11FF];
        tensor[3] rayVec1203#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (camN117D,_t1201);
        int _t1205#2 = IMul(ui1152,iresV116F);
        int _t1207#1 = IAdd(_t1205,vi1153);
        int offset1209#2 = Subscript<int[]>(indecies1175,_t1207);
        int _t120B#1 = IMul(iresU116D,iresV116F);
        int _t120D#1 = IAdd(_t120B,_t1205);
        int _t120F#1 = IAdd(_t120D,vi1153);
        int len1211#1 = Subscript<int[]>(indecies1175,_t120F);
        int itter1213#3 = 0;
        int idx1215#2 = offset1209;
        tensor[2] interval1217#3 = Subscript<tensor[2][]>(times1177,idx1215);
        real s1219#1 = TensorIndex<tensor[2],[0]>(interval1217);
        real e121B#1 = TensorIndex<tensor[2],[1]>(interval1217);
        femData:MeshCell cc121D#2 = Subscript<femData:MeshCell[]>(0cell_a1171,itter1213);
        int _t121F#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc121D);
        femData:FuncCell _t1221#1 = LoadFem<femData:FuncCell>(c1173,_t121F);
        tensor[4] rgba1223#1 = <tensor[4]>[_t11FF,_t11FF,_t11FF,_t11FF];
        tensor[3][0] _t1225#1 = <tensor[3][0]>{};
        tensor[3][] _t1227#1 = MkDynamic<tensor[3],0>(_t1225);
        self.rayU = rayU118F;
        self.rayV = rayV11A3;
        self.UV = UV11B3;
        self.rayOrig = rayOrig11D9;
        self.rayVec = rayVec1203;
        self.camNearVsp = camNearVsp1179;
        self.camFarVsp = camFarVsp117B;
        self.offset = offset1209;
        self.len = len1211;
        self.itter = itter1213;
        self.intersectionItter = itter1213;
        self.idx = idx1215;
        self.interval = interval1217;
        self.s = s1219;
        self.e = e121B;
        self.cc = cc121D;
        self.fc = _t1221;
        self.out = _t11FF;
        self.rgba = rgba1223;
        self.locs = _t1227;
        self.ui = ui1152;
        self.vi = vi1153;
        return
    end state init
    method start
        ENTRY1240:  preds = []
          femData:MeshCell[] 0cell_a1241#1 = globals.0cell_a1034;
          femData:FemFunc c1243#1 = globals.c1035;
          int[] cells1245#1 = globals.cells1024;
          bool debug1247#1 = globals.debug1031;
          int debugU1249#1 = globals.debugU1032;
          int debugV124B#1 = globals.debugV1033;
          int len124D#1 = self.len;
          int idx124F#1 = self.idx;
          int ui1251#2 = self.ui;
          int vi1253#2 = self.vi;
          if debug1247 then goto ASSIGN1257 else goto JOIN125F
        ASSIGN1257:  preds = [COND1255]
          bool _t1256#1 = NEQ<int>(ui1251,debugU1249);
          if _t1256 then goto ASSIGN125A else goto JOIN125E
        ASSIGN125A:  preds = [COND1258]
          bool _t1259#1 = NEQ<int>(vi1253,debugV124B);
          if _t1259 then goto STABILIZE125C else goto JOIN125D
        STABILIZE125C:  preds = [COND125B]
          stabilize
          goto JOIN125D
        JOIN125D:  preds = [*STABILIZE125C,COND125B]
          goto JOIN125E
        JOIN125E:  preds = [JOIN125D,COND1258]
          goto JOIN125F
        JOIN125F:  preds = [JOIN125E,COND1255]
          int _t1260#1 = 0;
          bool _t1262#1 = EQ<int>(len124D,_t1260);
          if _t1262 then goto ASSIGN1266 else goto JOIN126D
        ASSIGN1266:  preds = [COND1264]
          string _t1265#1 = "(find:)No intersection found:";
          string _t1267#1 = "/";
          string _t1269#1 = "\n";
          Print<[string,int,string,int,string]>(_t1265,ui1251,_t1267,vi1253,_t1269);
          stabilize
          goto JOIN126D
        JOIN126D:  preds = [*STABILIZE126C,COND1264]
          int _t126E#1 = Subscript<int[]>(cells1245,idx124F);
          femData:MeshCell cc1270#2 = Subscript<femData:MeshCell[]>(0cell_a1241,_t126E);
          int _t1272#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc1270);
          femData:FuncCell _t1274#1 = LoadFem<femData:FuncCell>(c1243,_t1272);
          self.cc = cc1270;
          self.fc = _t1274;
          active
    end start
    method update
        ENTRY1279:  preds = []
          image(IMAGE1D<double[3]>) cmap1729#5 = globals.cmap1027;
          image(IMAGE1D<double[3]>) img127A#1 = globals.img103E;
          kernel _t127C#1 = globals._t103F;
          femData:MeshCell[] 0cell_a127E#1 = globals.0cell_a1034;
          femData:FemFunc c1280#1 = globals.c1035;
          real zeroEps1282#1 = globals.zeroEps1020;
          real intervalEps1284#4 = globals.intervalEps1021;
          tensor[2][] times1286#1 = globals.times1023;
          int[] cells1288#1 = globals.cells1024;
          tensor[3] mcnear128A#2 = globals.mcnear1025;
          tensor[3] mcfar128C#1 = globals.mcfar1026;
          real cmin128E#3 = globals.cmin1028;
          real cmax1290#2 = globals.cmax1029;
          bool light1292#1 = globals.light102A;
          real phongKa1294#1 = globals.phongKa102B;
          real phongKd1296#1 = globals.phongKd102C;
          real phongKs1298#1 = globals.phongKs102D;
          real phongSp129A#1 = globals.phongSp102E;
          tensor[3] L129C#2 = globals.L103D;
          tensor[3] rayOrig129E#4 = self.rayOrig;
          tensor[3] rayVec12A0#6 = self.rayVec;
          real camNearVsp12A2#2 = self.camNearVsp;
          real camFarVsp12A4#1 = self.camFarVsp;
          int offset12A6#1 = self.offset;
          int len12A8#1 = self.len;
          int itter12AA#3 = self.itter;
          int intersectionItter12AC#2 = self.intersectionItter;
          tensor[2] interval12AE#1 = self.interval;
          real s12B0#7 = self.s;
          real e12B2#5 = self.e;
          femData:MeshCell cc12B4#3 = self.cc;
          femData:FuncCell fc12B6#3 = self.fc;
          real out12B8#2 = self.out;
          tensor[4] rgba12BA#1 = self.rgba;
          tensor[3][] locs12BC#1 = self.locs;
          int ui12BE#1 = self.ui;
          int vi12C0#1 = self.vi;
          string _t12C2#1 = "Ui/Vi::";
          string _t12C4#1 = "/";
          string _t12C6#11 = "\n";
          Print<[string,int,string,int,string]>(_t12C2,ui12BE,_t12C4,vi12C0,_t12C6);
          string _t12C9#1 = "Interval:";
          tensor[2] _t12CB#1 = <tensor[2]>[s12B0,e12B2];
          Print<[string,tensor[2],string]>(_t12C9,_t12CB,_t12C6);
          string _t12CE#1 = "inner itter:";
          Print<[string,int,string]>(_t12CE,intersectionItter12AC,_t12C6);
          string _t12D1#1 = "Outer itter:";
          Print<[string,int,string]>(_t12D1,itter12AA,_t12C6);
          real _t12D4#1 = TensorIndex<tensor[3],[0]>(rayOrig129E);
          real _t12D6#1 = TensorIndex<tensor[3],[1]>(rayOrig129E);
          tensor[2] _t12D8#3 = <tensor[2]>[_t12D4,_t12D6];
          real _t12DA#1 = TensorIndex<tensor[3],[0]>(rayVec12A0);
          real _t12DC#1 = TensorIndex<tensor[3],[1]>(rayVec12A0);
          tensor[2] _t12DE#3 = <tensor[2]>[_t12DA,_t12DC];
          tensor[2] op1_e3_l_312E1#1 = λ(T0[],T1[2])<(T0 * T1_{i0})>_{2} (s12B0,_t12DE);
          tensor[2] startRay12E0#1 = λ(T0[2],T1[2])<(T0_{i0} + T1_{i0})>_{2} (_t12D8,op1_e3_l_312E1);
          tensor[2] op1_e3_l_312E5#1 = λ(T0[],T1[2])<(T0 * T1_{i0})>_{2} (e12B2,_t12DE);
          tensor[2] endRay12E4#1 = λ(T0[2],T1[2])<(T0_{i0} + T1_{i0})>_{2} (_t12D8,op1_e3_l_312E5);
          femData:Mesh _t12E8#8 = ExtractFem<femData:Mesh,femData:MeshCell>(cc12B4);
          int _t12EA#7 = ExtractFemItem<int,CellIndex(MeshCell)>(cc12B4);
          femData:MeshPos callNewtonPos13E1#1 = _0A92_msh_newtonInverse12ED (startRay12E0,_t12EA,_t12E8);
          tensor[2] refPos13E2#4 = ExtractFemItem<tensor[2],RefPos(Mesh)>(callNewtonPos13E1);
          femData:MeshPos callNewtonPos13E7#1 = _0A92_msh_newtonInverse12ED (endRay12E4,_t12EA,_t12E8);
          tensor[2] refPos13E8#4 = ExtractFemItem<tensor[2],RefPos(Mesh)>(callNewtonPos13E7);
          string _t13EC#1 = "inverses:";
          Print<[string,tensor[2],tensor[2],string]>(_t13EC,refPos13E2,refPos13E8,_t12C6);
          femData:FemFunc _t13EF#6 = ExtractFem<femData:FemFunc,femData:FuncCell>(fc12B6);
          femData:Space _t13F1#5 = ExtractFem<femData:Space,femData:FemFunc>(_t13EF);
          int _t13F3#5 = ExtractFemItem<int,CellIndex(FuncCell)>(fc12B6);
          real _t13F5#3 = TensorIndex<tensor[3],[2]>(rayVec12A0);
          real _t13F7#3 = TensorIndex<tensor[3],[2]>(rayOrig129E);
          int[6] femIndicies13FE#1 = ExtractFemItem2<int,int[6],ExtractIndices(Space)>(_t13F1,_t13F3);
          tensor[6] femDofs13FF#4 = ExtractFemItem2<int[6],tensor[6],ExtractDofsSeq(FemFunc)>(_t13EF,femIndicies13FE);
          tensor[6] basisResult1400#1 = EvaluateBasis<BasisArray(6)>(refPos13E2);
          real probe_l_713FA#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[6],T6[2])<Σ(i0=0..5)<((T4_{i0} * T5_{i0}))>(i0=0..5)> (_t13F3,_t13F1,_t13EF,refPos13E2,femDofs13FF,basisResult1400,refPos13E2);
          real op1_e3_l_813FB#1 = λ(T0[],T1[])<(T0 * T1)> (_t13F5,s12B0);
          real op1_e3_l_913FC#1 = λ(T0[],T1[])<(T0) - (T1)> (probe_l_713FA,op1_e3_l_813FB);
          real fa13F9#9 = λ(T0[],T1[])<(T1) - (T0)> (_t13F7,op1_e3_l_913FC);
          tensor[6] basisResult1410#1 = EvaluateBasis<BasisArray(6)>(refPos13E8);
          real probe_l_7140A#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[6],T6[2])<Σ(i0=0..5)<((T4_{i0} * T5_{i0}))>(i0=0..5)> (_t13F3,_t13F1,_t13EF,refPos13E8,femDofs13FF,basisResult1410,refPos13E8);
          real op1_e3_l_8140B#1 = λ(T0[],T1[])<(T0 * T1)> (_t13F5,e12B2);
          real op1_e3_l_9140C#1 = λ(T0[],T1[])<(T0) - (T1)> (probe_l_7140A,op1_e3_l_8140B);
          real fb1409#6 = λ(T0[],T1[])<(T1) - (T0)> (_t13F7,op1_e3_l_9140C);
          string _t1419#1 = "Vals:";
          tensor[2] _t141B#1 = <tensor[2]>[fa13F9,fb1409];
          Print<[string,tensor[2],string]>(_t1419,_t141B,_t12C6);
          real op1_e3_l_221427#1 = λ(T0[],T1[])<(T0) - (T1)> (fa13F9,fb1409);
          real _t141E#1 = λ(T0[])<Abs(T0)> (op1_e3_l_221427);
          bool _t143E#1 = LT<real>(_t141E,intervalEps1284);
          if _t143E then goto ASSIGN174D else goto JOIN1477
        ASSIGN174D:  preds = [COND1440]
          real _t1441#1 = λ(T0[])<Abs(T0)> (fa13F9);
          bool _t1453#1 = GT<real>(_t1441,intervalEps1284);
          if _t1453 then goto ASSIGN174E else goto JOIN1475
        ASSIGN174E:  preds = [COND1455]
          real _t1456#1 = λ(T0[])<Abs(T0)> (fb1409);
          bool _t1468#1 = GT<real>(_t1456,intervalEps1284);
          if _t1468 then goto ASSIGN146C else goto JOIN1473
        ASSIGN146C:  preds = [COND146A]
          string _t146B#1 = "warn\n";
          Print<[string]>(_t146B);
          real s146E#1 = λ(T0[],T1[])<(T0 + T1)> (s12B0,intervalEps1284);
          self.s = s146E;
          active
          goto JOIN1473
        JOIN1473:  preds = [*ACTIVE1471,COND146A]
          real s1472#1 = phi(s12B0)
          goto JOIN1475
        JOIN1475:  preds = [JOIN1473,COND1455]
          real s1474#1 = phi(s1472,s12B0)
          goto JOIN1477
        JOIN1477:  preds = [JOIN1475,COND1440]
          real s1476#3 = phi(s1474,s12B0)
          real op1_e3_l_381481#1 = λ(T0[],T1[])<(T0 * T1)> (s1476,fb1409);
          real op1_e3_l_391482#1 = λ(T0[],T1[])<(T0 * T1)> (e12B2,fa13F9);
          real op1_e3_l_481483#1 = λ(T0[],T1[])<(T0) - (T1)> (op1_e3_l_381481,op1_e3_l_391482);
          real op1_e3_l_491484#1 = λ(T0[],T1[])<(T0) - (T1)> (fb1409,fa13F9);
          real cup1478#7 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_481483,op1_e3_l_491484);
          string _t149E#1 = "Mid time:";
          Print<[string,real,string]>(_t149E,cup1478,_t12C6);
          tensor[2] op1_e3_l_5314AF#1 = λ(T0[2],T1[])<(T1 * T0_{i0})>_{2} (_t12DE,cup1478);
          tensor[2] midRay14A1#4 = λ(T0[2],T1[2])<(T0_{i0} + T1_{i0})>_{2} (_t12D8,op1_e3_l_5314AF);
          femData:MeshPos callNewtonPos14CC#1 = _0A92_msh_newtonInverse12ED (midRay14A1,_t12EA,_t12E8);
          tensor[2] refPos14CD#10 = ExtractFemItem<tensor[2],RefPos(Mesh)>(callNewtonPos14CC);
          tensor[6] basisResult14D5#1 = EvaluateBasis<BasisArray(6)>(refPos14CD);
          real fmVal14D1#2 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[6],T6[2])<Σ(i0=0..5)<((T4_{i0} * T5_{i0}))>(i0=0..5)> (_t13F3,_t13F1,_t13EF,refPos14CD,femDofs13FF,basisResult14D5,refPos14CD);
          real op1_e3_l_5814EA#1 = λ(T0[],T1[])<(T0 * T1)> (_t13F5,cup1478);
          real op1_e3_l_5914EB#1 = λ(T0[],T1[])<(T0) - (T1)> (fmVal14D1,op1_e3_l_5814EA);
          real fm14DB#5 = λ(T0[],T1[])<(T1) - (T0)> (_t13F7,op1_e3_l_5914EB);
          string _t150D#1 = "all vals:";
          tensor[3] _t150F#1 = <tensor[3]>[fa13F9,fm14DB,fb1409];
          Print<[string,tensor[3],string]>(_t150D,_t150F,_t12C6);
          int _t1512#6 = 1;
          int intersectionItter1514#3 = IAdd(intersectionItter12AC,_t1512);
          real _t1516#10 = 0.e0;
          bool _t1518#2 = GT<real>(fa13F9,_t1516);
          if _t1518 then goto JOIN151D else goto ASSIGN1708
        JOIN151D:  preds = [COND151A,JOIN170D]
          int _t151B#1 = phi(_t1512,_t151C)
          bool _t151E#2 = GT<real>(fm14DB,_t1516);
          if _t151E then goto JOIN1523 else goto ASSIGN1700
        JOIN1523:  preds = [COND1520,JOIN1705]
          int _t1521#1 = phi(_t1512,_t1522)
          int _t1524#1 = IMul(_t151B,_t1521);
          int _t1526#6 = 0;
          bool _t1528#1 = LT<int>(_t1524,_t1526);
          if _t1528 then goto JOIN152E else goto COND16E5
        JOIN152E:  preds = [COND152A,JOIN16F2]
          real e152B#4 = phi(cup1478,e12B2)
          real s152C#4 = phi(s1476,s152D)
          string _t152F#1 = "new interval:";
          tensor[2] _t1531#1 = <tensor[2]>[s152C,e152B];
          Print<[string,tensor[2],string]>(_t152F,_t1531,_t12C6);
          real _t1534#1 = λ(T0[])<Abs(T0)> (fm14DB);
          bool _t1568#2 = LT<real>(_t1534,zeroEps1282);
          if _t1568 then goto ASSIGN156C else goto JOIN1690
        ASSIGN156C:  preds = [COND156A]
          tensor[2] grad156B#1 = <tensor[2]>[_t1516,_t1516];
          if _t1568 then goto ASSIGN1758 else goto JOIN15A2
        ASSIGN1758:  preds = [COND156D]
          tensor[2,6] basisResult157E#1 = EvaluateBasis<BasisArray(2,6)>(refPos14CD);
          tensor[2] compositionl1570#1 = λ(INT0,FEM(fns)1,FEM(func)2,T3[2],T4[6],T5[2 6],T6[2])<Σ(i2=0..5)<((T4_{i2} * T5_{i0,i2}))>(i2=0..5)>_{2} (_t13F3,_t13F1,_t13EF,refPos14CD,femDofs13FF,basisResult157E,refPos14CD);
          int[3] femIndicies1580#1 = ExtractFemItem2<int,int[3],ExtractIndices(Mesh)>(_t12E8,_t12EA);
          tensor[3,2] femDofs1581#3 = ExtractFemItem2<int[3],tensor[3,2],ExtractDofsSeq(Mesh)>(_t12E8,femIndicies1580);
          tensor[2,3] basisResult1582#3 = EvaluateBasis<BasisArray(2,3)>(refPos14CD);
          tensor[2,2] probe_l_81571#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i3=0..2)<((T3_{i3,i0} * T4_{i1,i3}))>(i3=0..2)>_{2 2} (_t12EA,_t12E8,midRay14A1,femDofs1581,basisResult1582,refPos14CD);
          tensor[2,2] op1_e3_l_91572#1 = λ(T0[2 2])<Σ(i2=0..1)<((ϵ_{ii2,ii0} * T0_{i2,i1}))>(i2=0..1)>_{2 2} (probe_l_81571);
          tensor[2] probe_l_101573#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i2=0..2)<((T3_{i2,i0} * T4_{'0',i2}))>(i2=0..2)>_{2} (_t12EA,_t12E8,midRay14A1,femDofs1581,basisResult1582,refPos14CD);
          tensor[2] probe_l_111574#1 = λ(INT0,FEM(msh)1,T2[2],T3[3 2],T4[2 3],T5[2])<Σ(i2=0..2)<((T3_{i2,i0} * T4_{'1',i2}))>(i2=0..2)>_{2} (_t12EA,_t12E8,midRay14A1,femDofs1581,basisResult1582,refPos14CD);
          tensor[2] op1_e3_l_121575#1 = λ(T0[2])<Σ(i1=0..1)<((ϵ_{ii0,ii1} * T0_{i1}))>(i1=0..1)>_{2} (probe_l_111574);
          tensor[2,2] op1_e3_l_131576#1 = λ(T0[2 2])<Σ(i2=0..1)<((ϵ_{ii2,ii0} * T0_{i1,i2}))>(i2=0..1)>_{2 2} (op1_e3_l_91572);
          real op1_e3_l_141577#1 = λ(T0[2],T1[2])<Σ(i0=0..1)<((T0_{i0} * T1_{i0}))>(i0=0..1)> (probe_l_101573,op1_e3_l_121575);
          tensor[2,2] op1_e3_l_151578#1 = λ(T0[2 2],T1[])<(T0_{i0,i1}) / ( T1)>_{2 2} (op1_e3_l_131576,op1_e3_l_141577);
          tensor[2] grad156E#1 = λ(T0[2],T1[2 2])<Σ(i104=0..1)<((T0_{i104} * T1_{i104,i0}))>(i104=0..1)>_{2} (compositionl1570,op1_e3_l_151578);
          goto JOIN15A2
        JOIN15A2:  preds = [ASSIGN159F,COND156D]
          tensor[2] grad15A0#3 = phi(grad156E,grad156B)
          real out15A1#3 = phi(fmVal14D1,out12B8)
          string _t15A3#1 = "Out val:";
          Print<[string,real,string]>(_t15A3,out15A1,_t12C6);
          string _t15A6#1 = "Grad val:";
          Print<[string,tensor[2],string]>(_t15A6,grad15A0,_t12C6);
          real _t15A9#6 = 0.1e1;
          tensor[3] mcol15AB#1 = <tensor[3]>[_t15A9,_t15A9,_t15A9];
          bool _t15AD#1 = NEQ<real>(cmin128E,cmax1290);
          if _t15AD then goto ASSIGN1763 else goto JOIN15DB
        ASSIGN1763:  preds = [COND15AF]
          real _t15B2#2 = -0.1e1;
          real op1_e3_l_515B5#1 = λ(T0[],T1[])<(T1) - (T0)> (cmin128E,out15A1);
          real op1_e3_l_615B6#1 = λ(T0[],T1[])<(T1) - (T0)> (cmin128E,cmax1290);
          real op1_e3_l_715B7#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_515B5,op1_e3_l_615B6);
          real op1_e3_l_815B8#1 = λ(T0[],T1[])<(T1) - (T0)> (_t15B2,_t15A9);
          real op1_e3_l_915B9#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_715B7,op1_e3_l_815B8);
          real _t15B4#2 = λ(T0[],T1[])<(T0 + T1)> (_t15B2,op1_e3_l_915B9);
          real Mtransform15C1#2 = Transform<IMAGE1D<double[3]>>(cmap1729);
          real MxPos15C2#1 = λ(T0[],T1[])<(T0 * T1)> (Mtransform15C1,_t15B4);
          real Ttranslate15C3#1 = Translate<IMAGE1D<double[3]>>(cmap1729);
          real imgPos15C4#2 = λ(T0[],T1[])<(T0 + T1)> (MxPos15C2,Ttranslate15C3);
          real nd15C5#2 = Floor<1>(imgPos15C4);
          real f15C6#1 = λ(T0[],T1[])<(T0) - (T1)> (imgPos15C4,nd15C5);
          int n15C7#1 = RealToInt<1>(nd15C5);
          int idx15C9#3 = n15C7;
          bool isInside1768#1 = IndexInside<IMAGE1D<double[3]>,2>(idx15C9,cmap1729);
          if isInside1768 then goto ASSIGN1769 else goto ASSIGN176A
        ASSIGN1769:  preds = [COND176C]
          tensor[3,2] ldvox1766#1 = LoadVoxels<IMAGE1D<double[3]>,2>(cmap1729,idx15C9);
          goto JOIN176D
        JOIN176D:  preds = [ASSIGN1769,ASSIGN176A]
          tensor[3,2] ldvox15CA#1 = phi(ldvox1766,ldvox1767)
          tensor[2] kernX_15CB#1 = BuildPos<1>(f15C6);
          tensor[2] kevalX_d0_15CC#1 = EvalKernel<2,tent,0>(kernX_15CB);
          tensor[3] mcol15C0#1 = λ(V0(1)[3],H1,T2[1],T3[1 1],V4(1)[3],H5)<Σ(i1=0..1)<((V4_{i0}(1)[i1]# * H5(1)))>(i1=0..1)>_{3} (img127A,_t127C,_t15B4,Mtransform15C1,ldvox15CA,kevalX_d0_15CC);
          goto JOIN15DB
        JOIN15DB:  preds = [ASSIGN15D9,COND15AF]
          tensor[3] mcol15DA#5 = phi(mcol15C0,mcol15AB)
          if light1292 then goto ASSIGN15DE else goto ASSIGN16DF
        ASSIGN15DE:  preds = [COND15DC]
          real _t15DD#1 = TensorIndex<tensor[2],[0]>(grad15A0);
          real _t15DF#1 = TensorIndex<tensor[2],[1]>(grad15A0);
          real _t15E3#1 = -0.1e1;
          tensor[3] _t15E5#3 = <tensor[3]>[_t15DD,_t15DF,_t15E3];
          real op1_e3_l_315E8#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (_t15E5);
          real op1_e3_l_415E9#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_315E8);
          real op1_e3_l_515EA#2 = λ(T0[])<(1) / ( T0)> (op1_e3_l_415E9);
          real op1_e3_l_615EB#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (_t15E5,L129C);
          real _t15E7#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_515EA,op1_e3_l_615EB);
          real _t15F1#1 = Max<real>(_t1516,_t15E7);
          real op1_e3_l_1015F6#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (rayVec12A0);
          real op1_e3_l_1115F7#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_1015F6);
          real op1_e3_l_1215F8#1 = λ(T0[])<(1) / ( T0)> (op1_e3_l_1115F7);
          tensor[3] op1_e3_l_1315F9#1 = λ(T0[3],T1[])<(T0_{i0} * T1)>_{3} (rayVec12A0,op1_e3_l_1215F8);
          tensor[3] op1_e3_l_1415FA#1 = λ(T0[3])<Neg(T0_{i0})>_{3} (op1_e3_l_1315F9);
          tensor[3] op1_e3_l_2015FB#3 = λ(T0[3],T1[3])<(T1_{i0} + T0_{i0})>_{3} (L129C,op1_e3_l_1415FA);
          real op1_e3_l_2215FC#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_2015FB,op1_e3_l_2015FB);
          real op1_e3_l_2315FD#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_2215FC);
          real op1_e3_l_3115FF#1 = λ(T0[])<(1) / ( T0)> (op1_e3_l_2315FD);
          real op1_e3_l_321600#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (_t15E5,op1_e3_l_2015FB);
          real _t15F3#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (op1_e3_l_515EA,op1_e3_l_3115FF,op1_e3_l_321600);
          real _t160F#1 = Max<real>(_t1516,_t15F3);
          real _t1611#1 = MathFn<pow>(_t160F,phongSp129A);
          real op1_e3_l_961621#1 = λ(T0[],T1[])<(T1) - (T0)> (camNearVsp12A2,cup1478);
          real op1_e3_l_971622#1 = λ(T0[],T1[])<(T1) - (T0)> (camNearVsp12A2,camFarVsp12A4);
          real op1_e3_l_981623#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_961621,op1_e3_l_971622);
          tensor[3] op1_e3_l_991624#1 = λ(T0[3],T1[3])<(T1_{i0}) - (T0_{i0})>_{3} (mcnear128A,mcfar128C);
          tensor[3] op1_e3_l_1001625#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (op1_e3_l_981623,op1_e3_l_991624);
          tensor[3] op1_e3_l_1011626#2 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (mcnear128A,op1_e3_l_1001625);
          tensor[3] op1_e3_l_1291627#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (phongKa1294,mcol15DA);
          tensor[3] op1_e3_l_1301628#1 = λ(T0[3],T1[],T2[],T3[3])<(T1 * T2 * T0_{i0} * T3_{i0})>_{3} (mcol15DA,_t15F1,phongKd1296,op1_e3_l_1011626);
          tensor[3] op1_e3_l_1311629#1 = λ(T0[],T1[],T2[3])<(T0 * T1 * T2_{i0})>_{3} (_t1611,phongKs1298,op1_e3_l_1011626);
          tensor[3] fin1613#3 = λ(T0[3],T1[3],T2[3])<(T0_{i0} + T1_{i0} + T2_{i0})>_{3} (op1_e3_l_1291627,op1_e3_l_1301628,op1_e3_l_1311629);
          real _t164D#1 = TensorIndex<tensor[3],[0]>(fin1613);
          real _t164F#1 = TensorIndex<tensor[3],[1]>(fin1613);
          real _t1651#1 = TensorIndex<tensor[3],[2]>(fin1613);
          tensor[4] rgba1653#1 = <tensor[4]>[_t164D,_t164F,_t1651,_t15A9];
          goto JOIN1657
        JOIN1657:  preds = [ASSIGN1654,ASSIGN16E4]
          tensor[4] rgba1655#1 = phi(rgba1653,rgba1656)
          tensor[3] op1_e3_l_531666#1 = λ(T0[3],T1[])<(T1 * T0_{i0})>_{3} (rayVec12A0,cup1478);
          tensor[3] _t1658#1 = λ(T0[3],T1[3])<(T1_{i0} + T0_{i0})>_{3} (rayOrig129E,op1_e3_l_531666);
          tensor[3][1] _t1682#1 = <tensor[3][1]>{_t1658};
          tensor[3][] _t1684#1 = MkDynamic<tensor[3],1>(_t1682);
          self.intersectionItter = intersectionItter1514;
          self.s = s152C;
          self.e = e152B;
          self.out = out15A1;
          self.rgba = rgba1655;
          self.locs = _t1684;
          stabilize
          goto JOIN1690
        JOIN1690:  preds = [*STABILIZE168C,COND156A]
          tensor[3][] locs168D#3 = phi(locs12BC)
          tensor[4] rgba168E#3 = phi(rgba12BA)
          real out168F#3 = phi(out12B8)
          int _t1691#1 = 32;
          bool _t1693#1 = GT<int>(intersectionItter1514,_t1691);
          if _t1693 then goto ASSIGN1697 else goto ASSIGN16DC
        ASSIGN1697:  preds = [COND1695]
          int itter1696#4 = IAdd(itter12AA,_t1512);
          bool _t1698#1 = GTE<int>(itter1696,len12A8);
          if _t1698 then goto ASSIGN169C else goto JOIN16A9
        ASSIGN169C:  preds = [COND169A]
          string _t169B#1 = "No intersection found\n";
          Print<[string]>(_t169B);
          string _t169E#1 = "Fin pixel=============================\n";
          Print<[string]>(_t169E);
          self.itter = itter1696;
          self.intersectionItter = _t1526;
          self.s = s152C;
          self.e = e152B;
          self.out = out168F;
          self.rgba = rgba168E;
          self.locs = locs168D;
          stabilize
          goto JOIN16A9
        JOIN16A9:  preds = [*STABILIZE16A8,COND169A]
          int _t16AA#2 = IAdd(offset12A6,itter1696);
          tensor[2] interval16AC#3 = Subscript<tensor[2][]>(times1286,_t16AA);
          int _t16AE#1 = Subscript<int[]>(cells1288,_t16AA);
          femData:MeshCell cc16B0#2 = Subscript<femData:MeshCell[]>(0cell_a127E,_t16AE);
          real s16B2#1 = TensorIndex<tensor[2],[0]>(interval16AC);
          real e16B4#1 = TensorIndex<tensor[2],[1]>(interval16AC);
          int _t16B6#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc16B0);
          femData:FuncCell _t16B8#1 = LoadFem<femData:FuncCell>(c1280,_t16B6);
          string _t16BA#1 = "++++++++++++++++Next interval!+++++++++++++++++++\n";
          Print<[string]>(_t16BA);
          self.itter = itter1696;
          self.intersectionItter = _t1526;
          self.interval = interval16AC;
          self.s = s16B2;
          self.e = e16B4;
          self.cc = cc16B0;
          self.fc = _t16B8;
          self.out = out168F;
          self.rgba = rgba168E;
          self.locs = locs168D;
          active
          goto JOIN16CF
        JOIN16CF:  preds = [*ACTIVE16C7,MASSIGN16DD]
          femData:FuncCell fc16C8#1 = phi(fc12B6)
          femData:MeshCell cc16C9#1 = phi(cc12B4)
          real e16CA#1 = phi(e152B)
          real s16CB#1 = phi(s152C)
          tensor[2] interval16CC#1 = phi(interval12AE)
          int intersectionItter16CD#1 = phi(intersectionItter1514)
          int itter16CE#1 = phi(itter12AA)
          self.itter = itter16CE;
          self.intersectionItter = intersectionItter16CD;
          self.interval = interval16CC;
          self.s = s16CB;
          self.e = e16CA;
          self.cc = cc16C9;
          self.fc = fc16C8;
          self.out = out168F;
          self.rgba = rgba168E;
          self.locs = locs168D;
          active
        ASSIGN16DC:  preds = [COND1695]
          string _t16DB#1 = "---------------\n";
          Print<[string]>(_t16DB);
          goto JOIN16CF
        ASSIGN16DF:  preds = [COND15DC]
          real _t16DE#1 = TensorIndex<tensor[3],[0]>(mcol15DA);
          real _t16E0#1 = TensorIndex<tensor[3],[1]>(mcol15DA);
          real _t16E2#1 = TensorIndex<tensor[3],[2]>(mcol15DA);
          tensor[4] rgba1656#1 = <tensor[4]>[_t16DE,_t16E0,_t16E2,_t15A9];
          goto JOIN1657
        ASSIGN176A:  preds = [COND176C]
          tensor[3,2] ldvox1767#1 = LoadVoxelsWithCtl<IMAGE1D<double[3]>,2,clamp>(cmap1729,idx15C9);
          goto JOIN176D
        COND16E5:  preds = [COND152A]
          if _t1518 then goto JOIN16E8 else goto ASSIGN16FA
        JOIN16E8:  preds = [COND16E5,JOIN16FE]
          int _t16E6#1 = phi(_t1512,_t16E7)
          if _t151E then goto JOIN16EC else goto ASSIGN16F4
        JOIN16EC:  preds = [COND16E9,JOIN16F8]
          int _t16EA#1 = phi(_t1512,_t16EB)
          int _t16ED#1 = IMul(_t16E6,_t16EA);
          bool _t16EF#1 = GT<int>(_t16ED,_t1526);
          if _t16EF then goto JOIN16F2 else goto JOIN16F2
        JOIN16F2:  preds = [COND16F1,COND16F1]
          real s152D#1 = phi(cup1478,s1476)
          goto JOIN152E
        ASSIGN16F4:  preds = [COND16E9]
          bool _t16F3#1 = LT<real>(fm14DB,_t1516);
          if _t16F3 then goto ASSIGN16F7 else goto JOIN16F8
        ASSIGN16F7:  preds = [COND16F5]
          int _t16F6#1 = -1;
          goto JOIN16F8
        JOIN16F8:  preds = [ASSIGN16F7,COND16F5]
          int _t16EB#1 = phi(_t16F6,_t1526)
          goto JOIN16EC
        ASSIGN16FA:  preds = [COND16E5]
          bool _t16F9#1 = LT<real>(fa13F9,_t1516);
          if _t16F9 then goto ASSIGN16FD else goto JOIN16FE
        ASSIGN16FD:  preds = [COND16FB]
          int _t16FC#1 = -1;
          goto JOIN16FE
        JOIN16FE:  preds = [ASSIGN16FD,COND16FB]
          int _t16E7#1 = phi(_t16FC,_t1526)
          goto JOIN16E8
        ASSIGN1700:  preds = [COND1520]
          bool _t16FF#1 = LT<real>(fm14DB,_t1516);
          if _t16FF then goto ASSIGN1703 else goto ASSIGN1706
        ASSIGN1703:  preds = [COND1701]
          int _t1702#1 = -1;
          goto JOIN1705
        JOIN1705:  preds = [ASSIGN1703,ASSIGN1706]
          int _t1522#1 = phi(_t1702,_t1704)
          goto JOIN1523
        ASSIGN1706:  preds = [COND1701]
          int _t1704#1 = 0;
          goto JOIN1705
        ASSIGN1708:  preds = [COND151A]
          bool _t1707#1 = LT<real>(fa13F9,_t1516);
          if _t1707 then goto ASSIGN170B else goto ASSIGN170E
        ASSIGN170B:  preds = [COND1709]
          int _t170A#1 = -1;
          goto JOIN170D
        JOIN170D:  preds = [ASSIGN170B,ASSIGN170E]
          int _t151C#1 = phi(_t170A,_t170C)
          goto JOIN151D
        ASSIGN170E:  preds = [COND1709]
          int _t170C#1 = 0;
          goto JOIN170D
    end update
  end ray
## initial strand creation
  GRID(2)
    ENTRY170F:  preds = []
      int iresU1710#1 = globals.iresU1017;
      int iresV1712#1 = globals.iresV1018;
      int _t1714#2 = 0;
      int _t1716#2 = 1;
      int _t1718#1 = ISub(iresU1710,_t1716);
      int[] _t171A#1 = Range(_t1714,_t1718);
    FOREACH171D:  preds = [ASSIGN171B,NEXT1726]
      foreach (vi171C in _t171A) on exit goto RETURN1727
      int _t171E#1 = ISub(iresV1712,_t1716);
      int[] _t1720#1 = Range(_t1714,_t171E);
    FOREACH1723:  preds = [ASSIGN1721,NEXT1725]
      foreach (ui1722 in _t1720) on exit goto NEXT1726
      new ray(ui1722,vi171C);
      goto FOREACH1723
    NEXT1726:  preds = [FOREACH1723]
      goto FOREACH171D
    RETURN1727:  preds = [FOREACH171D]
      return
#### end program ####
##### low-ir: after mid-to-low translation ####
## properties
  GlobalInit StrandArray HasStartMethod ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[]) HasInputs HasGlobals
## globals
  input isoval176E (isoval) = <default>
  input thick176F (thick) = <default>
  input camEye1770 (camEye) = <default>
  input camAt1771 (camAt) = <default>
  input camUp1772 (camUp) = <default>
  input camFOV1773 (camFOV) = <default>
  input iresU1774 (iresU) = <default>
  input iresV1775 (iresV) = <default>
  input camNear1776 (camNear) = <default>
  input camFar1777 (camFar) = <default>
  input refStep1778 (refStep) = <default>
  input rayStep1779 (rayStep) = <default>
  input a177A (a) = <no-default>
  input 0b046F_intermedateGlobal177B (b) = <no-default>
  input 0c0471_intermedateGlobal177C (c) = <no-default>
  input zeroEps177D (zeroEps) = <default>
  input intervalEps177E (intervalEps) = <default>
  input indecies177F (indecies) = <no-default>
  input times1780 (times) = <no-default>
  input cells1781 (cells) = <no-default>
  input mcnear1782 (mcnear) = <default>
  input mcfar1783 (mcfar) = <default>
  input cmap1784 (cmap) = image("/home/teocollin/gitcode/diderot/tests/lipRay/find/cmap.nrrd")
  input cmin1785 (cmin) = <default>
  input cmax1786 (cmax) = <default>
  input light1787 (light) = <default>
  input phongKa1788 (phongKa) = <default>
  input phongKd1789 (phongKd) = <default>
  input phongKs178A (phongKs) = <default>
  input phongSp178B (phongSp) = <default>
  input maxAlpha178C (maxAlpha) = <default>
  input lightVsp178D (lightVsp) = <default>
  input debug178E (debug) = <default>
  input debugU178F (debugU) = <default>
  input debugV1790 (debugV) = <default>
  global femData:MeshCell[] 0cell_a1791
  global femData:FemFunc c1792
  global real camNearVsp1793
  global real camFarVsp1794
  global tensor[3] camN1795
  global tensor[3] camU1796
  global tensor[3] camV1797
  global real camVmax1798
  global real camUmax1799
  global tensor[3] L179A
  global image(IMAGE1D<double[3]>) img179B
  global int _t179C
## functions
  function femData:MeshPos _0A92_msh_newtonInverse1AF4 (tensor[2] pos1AF5#3, int cellInt1AF6#2, femData:Mesh mesh1AF7#12) {
    ENTRY1AF8:  preds = []
      real _t1AF9#2 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
      tensor[2] xn1AFB#3 = <tensor[2]>[_t1AF9,_t1AF9];
      int _t1AFD#1 = 0;
      int _t1AFF#1 = 16;
      int[] _t1B01#1 = Range(_t1AFD,_t1AFF);
    FOREACH1B04:  preds = [ASSIGN1B02,NEXT1D5B]
      foreach (itter1B03 in _t1B01) on exit goto ASSIGN1D60
        tensor[2] xn1C7B#3 = phi(xn1AFB,xn1CEF)
      int ilit1B06#1 = 3;
      int mulRes1B07#3 = IMul(cellInt1AF6,ilit1B06);
      int ilit1B08#1 = 0;
      int addRes1B09#1 = IAdd(mulRes1B07,ilit1B08);
      int idx1B0A#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(mesh1AF7,addRes1B09);
      int ilit1B0B#1 = 1;
      int addRes1B0C#1 = IAdd(mulRes1B07,ilit1B0B);
      int idx1B0D#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(mesh1AF7,addRes1B0C);
      int ilit1B0E#1 = 2;
      int addRes1B0F#1 = IAdd(mulRes1B07,ilit1B0E);
      int idx1B10#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(mesh1AF7,addRes1B0F);
      int[3] seq1B11#1 = <int[3]>{idx1B0A,idx1B0D,idx1B10};
      int[3] femIndicies1B05#3 = seq1B11;
      int ilit1B20#4 = 0;
      int ilit1B21#4 = 2;
      int idx1B22#1 = Subscript<int>(femIndicies1B05,ilit1B20);
      int mulRes1B23#2 = IMul(ilit1B21,idx1B22);
      int addRes1B24#1 = IAdd(ilit1B20,mulRes1B23);
      int ilit1B25#4 = 1;
      int addRes1B26#1 = IAdd(ilit1B25,mulRes1B23);
      real dof_load1B27#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh1AF7,addRes1B24);
      real dof_load1B28#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh1AF7,addRes1B26);
      tensor[2] interCons1B29#1 = <tensor[2]>[dof_load1B27,dof_load1B28];
      int idx1B2A#1 = Subscript<int>(femIndicies1B05,ilit1B25);
      int mulRes1B2B#2 = IMul(ilit1B21,idx1B2A);
      int addRes1B2C#1 = IAdd(ilit1B20,mulRes1B2B);
      int addRes1B2D#1 = IAdd(ilit1B25,mulRes1B2B);
      real dof_load1B2E#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh1AF7,addRes1B2C);
      real dof_load1B2F#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh1AF7,addRes1B2D);
      tensor[2] interCons1B30#1 = <tensor[2]>[dof_load1B2E,dof_load1B2F];
      int idx1B31#1 = Subscript<int>(femIndicies1B05,ilit1B21);
      int mulRes1B32#2 = IMul(ilit1B21,idx1B31);
      int addRes1B33#1 = IAdd(ilit1B20,mulRes1B32);
      int addRes1B34#1 = IAdd(ilit1B25,mulRes1B32);
      real dof_load1B35#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh1AF7,addRes1B33);
      real dof_load1B36#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh1AF7,addRes1B34);
      tensor[2] interCons1B37#1 = <tensor[2]>[dof_load1B35,dof_load1B36];
      tensor[3,2] dofs1B38#1 = <tensor[3,2]>[interCons1B29,interCons1B30,interCons1B37];
      tensor[3,2] femDofs1B1F#30 = dofs1B38;
      real varAcc1B54#0 = VIndex<2,0>(xn1AFB);
      real varAcc1B55#0 = VIndex<2,1>(xn1AFB);
      real coeff1B56#1 = -0.1e1;
      real one1B57#3 = 0.1e1;
      real prod1B58#2 = RMul(one1B57,one1B57);
      real basisEval1B59#2 = RMul(coeff1B56,prod1B58);
      real basisEval1B5A#2 = RMul(one1B57,prod1B58);
      real basisEval1B5B#2 = 0.e0;
      tensor[3] intermediateCons1B5C#1 = <tensor[3]>[basisEval1B59,basisEval1B5A,basisEval1B5B];
      tensor[3] intermediateCons1B5D#1 = <tensor[3]>[basisEval1B59,basisEval1B5B,basisEval1B5A];
      tensor[2,3] intermediateCons1B5E#1 = <tensor[2,3]>[intermediateCons1B5C,intermediateCons1B5D];
      tensor[2,3] basisResult1B53#12 = intermediateCons1B5E;
      real r1B6C#2 = TensorIndex<tensor[3,2],[0,0]>(femDofs1B1F);
      real r1B6D#2 = TensorIndex<tensor[2,3],[0,0]>(basisResult1B53);
      real r1B6E#1 = RMul(r1B6C,r1B6D);
      real r1B6F#2 = TensorIndex<tensor[3,2],[1,0]>(femDofs1B1F);
      real r1B70#2 = TensorIndex<tensor[2,3],[0,1]>(basisResult1B53);
      real r1B71#1 = RMul(r1B6F,r1B70);
      real r1B72#2 = TensorIndex<tensor[3,2],[2,0]>(femDofs1B1F);
      real r1B73#2 = TensorIndex<tensor[2,3],[0,2]>(basisResult1B53);
      real r1B74#1 = RMul(r1B72,r1B73);
      real r1B75#1 = RAdd(r1B6E,r1B71);
      real r1B76#1 = RAdd(r1B75,r1B74);
      real r1B77#2 = TensorIndex<tensor[2,3],[1,0]>(basisResult1B53);
      real r1B78#1 = RMul(r1B6C,r1B77);
      real r1B79#2 = TensorIndex<tensor[2,3],[1,1]>(basisResult1B53);
      real r1B7A#1 = RMul(r1B6F,r1B79);
      real r1B7B#2 = TensorIndex<tensor[2,3],[1,2]>(basisResult1B53);
      real r1B7C#1 = RMul(r1B72,r1B7B);
      real r1B7D#1 = RAdd(r1B78,r1B7A);
      real r1B7E#1 = RAdd(r1B7D,r1B7C);
      tensor[2] tensor1B7F#1 = <tensor[2]>[r1B76,r1B7E];
      real r1B80#2 = TensorIndex<tensor[3,2],[0,1]>(femDofs1B1F);
      real r1B81#1 = RMul(r1B80,r1B6D);
      real r1B82#2 = TensorIndex<tensor[3,2],[1,1]>(femDofs1B1F);
      real r1B83#1 = RMul(r1B82,r1B70);
      real r1B84#2 = TensorIndex<tensor[3,2],[2,1]>(femDofs1B1F);
      real r1B85#1 = RMul(r1B84,r1B73);
      real r1B86#1 = RAdd(r1B81,r1B83);
      real r1B87#1 = RAdd(r1B86,r1B85);
      real r1B88#1 = RMul(r1B80,r1B77);
      real r1B89#1 = RMul(r1B82,r1B79);
      real r1B8A#1 = RMul(r1B84,r1B7B);
      real r1B8B#1 = RAdd(r1B88,r1B89);
      real r1B8C#1 = RAdd(r1B8B,r1B8A);
      tensor[2] tensor1B8D#1 = <tensor[2]>[r1B87,r1B8C];
      tensor[2,2] probe_l_101B6B#4 = <tensor[2,2]>[tensor1B7F,tensor1B8D];
      real realLit1BB3#4 = 0.e0;
      real r1BB4#2 = TensorIndex<tensor[2,2],[0,0]>(probe_l_101B6B);
      real r1BB5#1 = RMul(realLit1BB3,r1BB4);
      real realLit1BB6#2 = -0.1e1;
      real r1BB7#2 = TensorIndex<tensor[2,2],[1,0]>(probe_l_101B6B);
      real r1BB8#1 = RMul(realLit1BB6,r1BB7);
      real r1BB9#1 = RAdd(r1BB5,r1BB8);
      real r1BBA#2 = TensorIndex<tensor[2,2],[0,1]>(probe_l_101B6B);
      real r1BBB#1 = RMul(realLit1BB3,r1BBA);
      real r1BBC#2 = TensorIndex<tensor[2,2],[1,1]>(probe_l_101B6B);
      real r1BBD#1 = RMul(realLit1BB6,r1BBC);
      real r1BBE#1 = RAdd(r1BBB,r1BBD);
      tensor[2] tensor1BBF#1 = <tensor[2]>[r1BB9,r1BBE];
      real realLit1BC0#2 = 0.1e1;
      real r1BC1#1 = RMul(realLit1BC0,r1BB4);
      real r1BC2#1 = RMul(realLit1BB3,r1BB7);
      real r1BC3#1 = RAdd(r1BC1,r1BC2);
      real r1BC4#1 = RMul(realLit1BC0,r1BBA);
      real r1BC5#1 = RMul(realLit1BB3,r1BBC);
      real r1BC6#1 = RAdd(r1BC4,r1BC5);
      tensor[2] tensor1BC7#1 = <tensor[2]>[r1BC3,r1BC6];
      tensor[2,2] op1_e3_l_111BB2#4 = <tensor[2,2]>[tensor1BBF,tensor1BC7];
      real r1BE0#1 = TensorIndex<tensor[3,2],[0,0]>(femDofs1B1F);
      real r1BE1#2 = TensorIndex<tensor[2,3],[0,0]>(basisResult1B53);
      real r1BE2#1 = RMul(r1BE0,r1BE1);
      real r1BE3#1 = TensorIndex<tensor[3,2],[1,0]>(femDofs1B1F);
      real r1BE4#2 = TensorIndex<tensor[2,3],[0,1]>(basisResult1B53);
      real r1BE5#1 = RMul(r1BE3,r1BE4);
      real r1BE6#1 = TensorIndex<tensor[3,2],[2,0]>(femDofs1B1F);
      real r1BE7#2 = TensorIndex<tensor[2,3],[0,2]>(basisResult1B53);
      real r1BE8#1 = RMul(r1BE6,r1BE7);
      real r1BE9#1 = RAdd(r1BE2,r1BE5);
      real r1BEA#1 = RAdd(r1BE9,r1BE8);
      real r1BEB#1 = TensorIndex<tensor[3,2],[0,1]>(femDofs1B1F);
      real r1BEC#1 = RMul(r1BEB,r1BE1);
      real r1BED#1 = TensorIndex<tensor[3,2],[1,1]>(femDofs1B1F);
      real r1BEE#1 = RMul(r1BED,r1BE4);
      real r1BEF#1 = TensorIndex<tensor[3,2],[2,1]>(femDofs1B1F);
      real r1BF0#1 = RMul(r1BEF,r1BE7);
      real r1BF1#1 = RAdd(r1BEC,r1BEE);
      real r1BF2#1 = RAdd(r1BF1,r1BF0);
      tensor[2] probe_l_121BDF#1 = <tensor[2]>[r1BEA,r1BF2];
      real r1C09#1 = TensorIndex<tensor[3,2],[0,0]>(femDofs1B1F);
      real r1C0A#2 = TensorIndex<tensor[2,3],[1,0]>(basisResult1B53);
      real r1C0B#1 = RMul(r1C09,r1C0A);
      real r1C0C#1 = TensorIndex<tensor[3,2],[1,0]>(femDofs1B1F);
      real r1C0D#2 = TensorIndex<tensor[2,3],[1,1]>(basisResult1B53);
      real r1C0E#1 = RMul(r1C0C,r1C0D);
      real r1C0F#1 = TensorIndex<tensor[3,2],[2,0]>(femDofs1B1F);
      real r1C10#2 = TensorIndex<tensor[2,3],[1,2]>(basisResult1B53);
      real r1C11#1 = RMul(r1C0F,r1C10);
      real r1C12#1 = RAdd(r1C0B,r1C0E);
      real r1C13#1 = RAdd(r1C12,r1C11);
      real r1C14#1 = TensorIndex<tensor[3,2],[0,1]>(femDofs1B1F);
      real r1C15#1 = RMul(r1C14,r1C0A);
      real r1C16#1 = TensorIndex<tensor[3,2],[1,1]>(femDofs1B1F);
      real r1C17#1 = RMul(r1C16,r1C0D);
      real r1C18#1 = TensorIndex<tensor[3,2],[2,1]>(femDofs1B1F);
      real r1C19#1 = RMul(r1C18,r1C10);
      real r1C1A#1 = RAdd(r1C15,r1C17);
      real r1C1B#1 = RAdd(r1C1A,r1C19);
      tensor[2] probe_l_131C08#2 = <tensor[2]>[r1C13,r1C1B];
      real realLit1C32#2 = 0.e0;
      real r1C33#2 = TensorIndex<tensor[2],[0]>(probe_l_131C08);
      real r1C34#1 = RMul(realLit1C32,r1C33);
      real realLit1C35#1 = 0.1e1;
      real r1C36#2 = TensorIndex<tensor[2],[1]>(probe_l_131C08);
      real r1C37#1 = RMul(realLit1C35,r1C36);
      real r1C38#1 = RAdd(r1C34,r1C37);
      real realLit1C39#1 = -0.1e1;
      real r1C3A#1 = RMul(realLit1C39,r1C33);
      real r1C3B#1 = RMul(realLit1C32,r1C36);
      real r1C3C#1 = RAdd(r1C3A,r1C3B);
      tensor[2] op1_e3_l_141C31#1 = <tensor[2]>[r1C38,r1C3C];
      real realLit1C4B#4 = 0.e0;
      real r1C4C#2 = TensorIndex<tensor[2,2],[0,0]>(op1_e3_l_111BB2);
      real r1C4D#1 = RMul(realLit1C4B,r1C4C);
      real realLit1C4E#2 = -0.1e1;
      real r1C4F#2 = TensorIndex<tensor[2,2],[0,1]>(op1_e3_l_111BB2);
      real r1C50#1 = RMul(realLit1C4E,r1C4F);
      real r1C51#1 = RAdd(r1C4D,r1C50);
      real r1C52#2 = TensorIndex<tensor[2,2],[1,0]>(op1_e3_l_111BB2);
      real r1C53#1 = RMul(realLit1C4B,r1C52);
      real r1C54#2 = TensorIndex<tensor[2,2],[1,1]>(op1_e3_l_111BB2);
      real r1C55#1 = RMul(realLit1C4E,r1C54);
      real r1C56#1 = RAdd(r1C53,r1C55);
      tensor[2] tensor1C57#1 = <tensor[2]>[r1C51,r1C56];
      real realLit1C58#2 = 0.1e1;
      real r1C59#1 = RMul(realLit1C58,r1C4C);
      real r1C5A#1 = RMul(realLit1C4B,r1C4F);
      real r1C5B#1 = RAdd(r1C59,r1C5A);
      real r1C5C#1 = RMul(realLit1C58,r1C52);
      real r1C5D#1 = RMul(realLit1C4B,r1C54);
      real r1C5E#1 = RAdd(r1C5C,r1C5D);
      tensor[2] tensor1C5F#1 = <tensor[2]>[r1C5B,r1C5E];
      tensor[2,2] op1_e3_l_151C4A#4 = <tensor[2,2]>[tensor1C57,tensor1C5F];
      real op1_e3_l_161C77#4 = VDot<2>(probe_l_121BDF,op1_e3_l_141C31);
      real varAcc1C7C#1 = VIndex<2,0>(xn1C7B);
      real varAcc1C7D#1 = VIndex<2,1>(xn1C7B);
      real coeff1C7E#2 = -0.1e1;
      real iden1C7F#1 = varAcc1C7C;
      real one1C80#7 = 0.1e1;
      real prod1C81#2 = RMul(iden1C7F,one1C80);
      real iden1C82#1 = varAcc1C7D;
      real prod1C83#2 = RMul(one1C80,iden1C82);
      real prod1C84#1 = RMul(one1C80,one1C80);
      real mult1C85#1 = RMul(one1C80,prod1C84);
      real mult1C86#1 = RMul(coeff1C7E,prod1C83);
      real mult1C87#1 = RMul(coeff1C7E,prod1C81);
      real sum1C88#1 = RAdd(mult1C86,mult1C87);
      real sum1C89#1 = RAdd(mult1C85,sum1C88);
      real intermediate1C8A#1 = sum1C89;
      real basisEval1C8B#1 = RMul(one1C80,prod1C81);
      real basisEval1C8C#1 = RMul(one1C80,prod1C83);
      tensor[3] intermediateCons1C8D#1 = <tensor[3]>[intermediate1C8A,basisEval1C8B,basisEval1C8C];
      tensor[3] basisResult1C7A#6 = intermediateCons1C8D;
      real r1CA2#1 = TensorIndex<tensor[3,2],[0,0]>(femDofs1B1F);
      real r1CA3#2 = TensorIndex<tensor[3],[0]>(basisResult1C7A);
      real r1CA4#1 = RMul(r1CA2,r1CA3);
      real r1CA5#1 = TensorIndex<tensor[3,2],[1,0]>(femDofs1B1F);
      real r1CA6#2 = TensorIndex<tensor[3],[1]>(basisResult1C7A);
      real r1CA7#1 = RMul(r1CA5,r1CA6);
      real r1CA8#1 = TensorIndex<tensor[3,2],[2,0]>(femDofs1B1F);
      real r1CA9#2 = TensorIndex<tensor[3],[2]>(basisResult1C7A);
      real r1CAA#1 = RMul(r1CA8,r1CA9);
      real r1CAB#1 = RAdd(r1CA4,r1CA7);
      real r1CAC#1 = RAdd(r1CAB,r1CAA);
      real r1CAD#1 = TensorIndex<tensor[3,2],[0,1]>(femDofs1B1F);
      real r1CAE#1 = RMul(r1CAD,r1CA3);
      real r1CAF#1 = TensorIndex<tensor[3,2],[1,1]>(femDofs1B1F);
      real r1CB0#1 = RMul(r1CAF,r1CA6);
      real r1CB1#1 = TensorIndex<tensor[3,2],[2,1]>(femDofs1B1F);
      real r1CB2#1 = RMul(r1CB1,r1CA9);
      real r1CB3#1 = RAdd(r1CAE,r1CB0);
      real r1CB4#1 = RAdd(r1CB3,r1CB2);
      tensor[2] probe_l_171CA1#1 = <tensor[2]>[r1CAC,r1CB4];
      real r1CCB#1 = TensorIndex<tensor[2,2],[0,0]>(op1_e3_l_151C4A);
      real r1CCC#1 = RDiv(r1CCB,op1_e3_l_161C77);
      real r1CCD#1 = TensorIndex<tensor[2,2],[0,1]>(op1_e3_l_151C4A);
      real r1CCE#1 = RDiv(r1CCD,op1_e3_l_161C77);
      tensor[2] tensor1CCF#1 = <tensor[2]>[r1CCC,r1CCE];
      real r1CD0#1 = TensorIndex<tensor[2,2],[1,0]>(op1_e3_l_151C4A);
      real r1CD1#1 = RDiv(r1CD0,op1_e3_l_161C77);
      real r1CD2#1 = TensorIndex<tensor[2,2],[1,1]>(op1_e3_l_151C4A);
      real r1CD3#1 = RDiv(r1CD2,op1_e3_l_161C77);
      tensor[2] tensor1CD4#1 = <tensor[2]>[r1CD1,r1CD3];
      tensor[2,2] op1_e3_l_181CCA#4 = <tensor[2,2]>[tensor1CCF,tensor1CD4];
      tensor[2] op1_e3_l_191CE1#2 = VSub<2>(probe_l_171CA1,pos1AF5);
      tensor[2] projParam1CE5#1 = ProjectLast<tensor[2,2],[0]>(op1_e3_l_181CCA);
      real vdot1CE6#1 = VDot<2>(projParam1CE5,op1_e3_l_191CE1);
      tensor[2] projParam1CE7#1 = ProjectLast<tensor[2,2],[1]>(op1_e3_l_181CCA);
      real vdot1CE8#1 = VDot<2>(projParam1CE7,op1_e3_l_191CE1);
      tensor[2] op1_e3_l_201CE4#1 = <tensor[2]>[vdot1CE6,vdot1CE8];
      tensor[2] xn1CEF#4 = VSub<2>(xn1C7B,op1_e3_l_201CE4);
      real _t1CF2#2 = 0.1e-7;
      real _t1CF4#1 = RMul(_t1CF2,_t1CF2);
      real r1CF8#1 = TensorIndex<tensor[3,2],[0,0]>(femDofs1B1F);
      real r1CF9#2 = TensorIndex<tensor[3],[0]>(basisResult1C7A);
      real r1CFA#1 = RMul(r1CF8,r1CF9);
      real r1CFB#1 = TensorIndex<tensor[3,2],[1,0]>(femDofs1B1F);
      real r1CFC#2 = TensorIndex<tensor[3],[1]>(basisResult1C7A);
      real r1CFD#1 = RMul(r1CFB,r1CFC);
      real r1CFE#1 = TensorIndex<tensor[3,2],[2,0]>(femDofs1B1F);
      real r1CFF#2 = TensorIndex<tensor[3],[2]>(basisResult1C7A);
      real r1D00#1 = RMul(r1CFE,r1CFF);
      real r1D01#1 = RAdd(r1CFA,r1CFD);
      real r1D02#1 = RAdd(r1D01,r1D00);
      real r1D03#1 = TensorIndex<tensor[3,2],[0,1]>(femDofs1B1F);
      real r1D04#1 = RMul(r1D03,r1CF9);
      real r1D05#1 = TensorIndex<tensor[3,2],[1,1]>(femDofs1B1F);
      real r1D06#1 = RMul(r1D05,r1CFC);
      real r1D07#1 = TensorIndex<tensor[3,2],[2,1]>(femDofs1B1F);
      real r1D08#1 = RMul(r1D07,r1CFF);
      real r1D09#1 = RAdd(r1D04,r1D06);
      real r1D0A#1 = RAdd(r1D09,r1D08);
      tensor[2] probe_l_251CF7#1 = <tensor[2]>[r1D02,r1D0A];
      tensor[2] op1_e3_l_271D20#2 = VSub<2>(probe_l_251CF7,pos1AF5);
      tensor[2] projParam1D24#1 = ProjectLast<tensor[2,2],[0]>(op1_e3_l_181CCA);
      real vdot1D25#1 = VDot<2>(projParam1D24,op1_e3_l_271D20);
      tensor[2] projParam1D26#1 = ProjectLast<tensor[2,2],[1]>(op1_e3_l_181CCA);
      real vdot1D27#1 = VDot<2>(projParam1D26,op1_e3_l_271D20);
      tensor[2] op1_e3_l_381D23#2 = <tensor[2]>[vdot1D25,vdot1D27];
      real _t1D2E#1 = VDot<2>(op1_e3_l_381D23,op1_e3_l_381D23);
      bool _t1D31#1 = GTE<real>(_t1CF4,_t1D2E);
      if _t1D31 then goto ASSIGN1D35 else goto JOIN1D5A
    ASSIGN1D35:  preds = [COND1D33]
      real _t1D34#3 = 0.1e1;
      real _t1D36#3 = 0.1e-8;
      real _t1D38#1 = RAdd(_t1D34,_t1D36);
      tensor[2] _t1D3B#1 = <tensor[2]>[_t1D34,_t1D34];
      real _t1D3D#1 = VDot<2>(_t1D3B,xn1CEF);
      bool _t1D40#1 = GT<real>(_t1D38,_t1D3D);
      tensor[2] _t1D42#1 = <tensor[2]>[_t1D36,_t1D36];
      tensor[2] _t1D44#2 = VAdd<2>(_t1D42,xn1CEF);
      real _t1D47#1 = VIndex<2,0>(_t1D44);
      real _t1D49#2 = -0.e0;
      bool _t1D4B#1 = GT<real>(_t1D47,_t1D49);
      real _t1D4D#1 = VIndex<2,1>(_t1D44);
      bool _t1D4F#1 = GT<real>(_t1D4D,_t1D49);
      bool _t1D51#1 = BAnd(_t1D4B,_t1D4F);
      bool _t1D53#1 = BAnd(_t1D40,_t1D51);
      if _t1D53 then goto ASSIGN1D57 else goto ASSIGN1D5D
    ASSIGN1D57:  preds = [COND1D55]
      femData:MeshPos _t1D56#1 = ExtractFemItemN<[femData:Mesh,int,tensor[2],tensor[2]],femData:MeshPos,AllBuild(MeshPos),0000,"",[],int>(mesh1AF7,cellInt1AF6,xn1CEF,pos1AF5);
      return _t1D56
      goto JOIN1D59
    JOIN1D59:  preds = [*RETURN(_t1D56)1D58,*RETURN(_t1D5C)1D5E]
      goto JOIN1D5A
    JOIN1D5A:  preds = [*JOIN1D59,COND1D33]
      goto FOREACH1B04
    ASSIGN1D5D:  preds = [COND1D55]
      femData:MeshPos _t1D5C#1 = ExtractFemItemN<[femData:Mesh],femData:MeshPos,InvalidBuild(MeshPos),0000,"",[],int>(mesh1AF7);
      return _t1D5C
      goto JOIN1D59
    ASSIGN1D60:  preds = [FOREACH1B04]
      femData:MeshPos _t1D5F#1 = ExtractFemItemN<[femData:Mesh],femData:MeshPos,InvalidBuild(MeshPos),0000,"",[],int>(mesh1AF7);
      return _t1D5F
}
## input initialization
  ENTRY179D:  preds = []
    real isoval179E#1 = 0.2e0;
    globals.isoval176E = isoval179E;
    real thick17A1#1 = 0.7e-1;
    globals.thick176F = thick17A1;
    real _t17A4#2 = 0.3e1;
    real _t17A6#1 = -0.3e1;
    tensor[3] camEye17A8#1 = <tensor[3]>[_t17A4,_t17A6,_t17A4];
    globals.camEye1770 = camEye17A8;
    real _t17AB#5 = 0.5e0;
    tensor[3] camAt17AD#1 = <tensor[3]>[_t17AB,_t17AB,_t17AB];
    globals.camAt1771 = camAt17AD;
    real _t17B0#5 = 0.e0;
    real _t17B2#7 = 0.1e1;
    tensor[3] camUp17B4#1 = <tensor[3]>[_t17B0,_t17B0,_t17B2];
    globals.camUp1772 = camUp17B4;
    real camFOV17B7#1 = 0.137e2;
    globals.camFOV1773 = camFOV17B7;
    int iresU17BA#2 = 10;
    globals.iresU1774 = iresU17BA;
    globals.iresV1775 = iresU17BA;
    real camNear17BE#1 = -0.2e1;
    globals.camNear1776 = camNear17BE;
    real camFar17C1#1 = 0.5e1;
    globals.camFar1777 = camFar17C1;
    globals.refStep1778 = _t17B2;
    real rayStep17C5#1 = 0.1e-1;
    globals.rayStep1779 = rayStep17C5;
    real zeroEps17C8#2 = 0.1e-10;
    globals.zeroEps177D = zeroEps17C8;
    globals.intervalEps177E = zeroEps17C8;
    tensor[3] mcnear17CC#2 = <tensor[3]>[_t17B2,_t17B2,_t17B2];
    globals.mcnear1782 = mcnear17CC;
    globals.mcfar1783 = mcnear17CC;
    globals.cmin1785 = _t17B0;
    globals.cmax1786 = _t17B2;
    bool light17D2#2 = false;
    globals.light1787 = light17D2;
    globals.phongKa1788 = _t17AB;
    globals.phongKd1789 = _t17AB;
    globals.phongKs178A = _t17B0;
    real phongSp17D8#1 = 0.6e2;
    globals.phongSp178B = phongSp17D8;
    globals.maxAlpha178C = _t17B2;
    real _t17DC#1 = 0.369e1;
    real _t17DE#1 = 0.153e1;
    tensor[3] lightVsp17E0#1 = <tensor[3]>[_t17B0,_t17DC,_t17DE];
    globals.lightVsp178D = lightVsp17E0;
    globals.debug178E = light17D2;
    int debugU17E4#1 = 8;
    globals.debugU178F = debugU17E4;
    int debugV17E7#1 = 2;
    globals.debugV1790 = debugV17E7;
    return
## global-variable initialization
  ENTRY17EB:  preds = []
    tensor[3] camEye17EC#1 = globals.camEye1770;
    tensor[3] camAt17EE#1 = globals.camAt1771;
    tensor[3] camUp17F0#3 = globals.camUp1772;
    real camFOV17F2#1 = globals.camFOV1773;
    int iresU17F4#1 = globals.iresU1774;
    int iresV17F6#1 = globals.iresV1775;
    real camNear17F8#1 = globals.camNear1776;
    real camFar17FA#1 = globals.camFar1777;
    femData:Mesh a17FC#3 = globals.a177A;
    femData:Space 0b046F_intermedateGlobal17FE#1 = globals.0b046F_intermedateGlobal177B;
    femData:FemFunc 0c0471_intermedateGlobal1800#1 = globals.0c0471_intermedateGlobal177C;
    image(IMAGE1D<double[3]>) cmap1802#1 = globals.cmap1784;
    tensor[3] lightVsp1804#5 = globals.lightVsp178D;
    int _t1806#1 = 0;
    int _t1808#1 = 1;
    int _t180A#1 = ExtractFemItem<int,NumCell(Mesh)>(a17FC);
    int _t180C#1 = ISub(_t180A,_t1808);
    int[] _t180E#1 = Range(_t1806,_t180C);
    femData:MeshCell[] _t1810#1 = <femData:MeshCell[]>{};
  FOREACH1813:  preds = [ASSIGN1811,NEXT1819]
    foreach (_t1812 in _t180E) on exit goto GASSIGN181A
      femData:MeshCell[] _t1817#2 = phi(_t1810,_t1816)
    femData:MeshCell _t1814#1 = LoadFem<femData:MeshCell>(a17FC,_t1812);
    femData:MeshCell[] _t1816#1 = Append<femData:MeshCell>(_t1817,_t1814);
    goto FOREACH1813
  GASSIGN181A:  preds = [FOREACH1813]
    globals.0cell_a1791 = _t1817;
    femData:Space b181B#1 = LoadFem<femData:Space>(0b046F_intermedateGlobal17FE,a17FC);
    femData:FemFunc c181D#1 = LoadFem<femData:FemFunc>(0c0471_intermedateGlobal1800,b181B);
    globals.c1792 = c181D;
    tensor[3] op1_e3_l_31820#9 = VSub<3>(camAt17EE,camEye17EC);
    real op1_e3_l_51823#1 = VDot<3>(op1_e3_l_31820,op1_e3_l_31820);
    real op1_e3_l_61826#5 = Sqrt(op1_e3_l_51823);
    real camNearVsp1829#1 = RAdd(camNear17F8,op1_e3_l_61826);
    globals.camNearVsp1793 = camNearVsp1829;
    real camFarVsp182D#1 = RAdd(camFar17FA,op1_e3_l_61826);
    globals.camFarVsp1794 = camFarVsp182D;
    real realLit1832#1 = 0.1e1;
    real op1_e3_l_91831#6 = RDiv(realLit1832,op1_e3_l_61826);
    tensor[3] camN1836#2 = VScale<3>(op1_e3_l_91831,op1_e3_l_31820);
    globals.camN1795 = camN1836;
    real realLit183B#3 = 0.e0;
    real r183C#3 = TensorIndex<tensor[3],[0]>(camUp17F0);
    real r183D#3 = RMul(realLit183B,r183C);
    real r183E#3 = TensorIndex<tensor[3],[1]>(camUp17F0);
    real r183F#3 = RMul(realLit183B,r183E);
    real r1840#3 = TensorIndex<tensor[3],[2]>(camUp17F0);
    real r1841#5 = RMul(realLit183B,r1840);
    real r1842#3 = RAdd(r183D,r183F);
    real r1843#3 = RAdd(r1842,r1841);
    real realLit1844#3 = 0.1e1;
    real r1845#1 = RMul(realLit1844,r1840);
    real r1846#1 = RAdd(r1842,r1845);
    real realLit1847#3 = -0.1e1;
    real r1848#1 = RMul(realLit1847,r183E);
    real r1849#1 = RAdd(r183D,r1848);
    real r184A#1 = RAdd(r1849,r1841);
    tensor[3] tensor184B#1 = <tensor[3]>[r1843,r1846,r184A];
    real r184C#1 = RMul(realLit1847,r1840);
    real r184D#1 = RAdd(r1842,r184C);
    real r184E#1 = RMul(realLit1844,r183C);
    real r184F#1 = RAdd(r184E,r183F);
    real r1850#1 = RAdd(r184F,r1841);
    tensor[3] tensor1851#1 = <tensor[3]>[r184D,r1843,r1850];
    real r1852#1 = RMul(realLit1844,r183E);
    real r1853#1 = RAdd(r183D,r1852);
    real r1854#1 = RAdd(r1853,r1841);
    real r1855#1 = RMul(realLit1847,r183C);
    real r1856#1 = RAdd(r1855,r183F);
    real r1857#1 = RAdd(r1856,r1841);
    tensor[3] tensor1858#1 = <tensor[3]>[r1854,r1857,r1843];
    tensor[3,3] op1_e3_l_15183A#3 = <tensor[3,3]>[tensor184B,tensor1851,tensor1858];
    tensor[3] projParam187A#1 = ProjectLast<tensor[3,3],[0]>(op1_e3_l_15183A);
    real vdot187B#1 = VDot<3>(op1_e3_l_31820,projParam187A);
    tensor[3] projParam187C#1 = ProjectLast<tensor[3,3],[1]>(op1_e3_l_15183A);
    real vdot187D#1 = VDot<3>(op1_e3_l_31820,projParam187C);
    tensor[3] projParam187E#1 = ProjectLast<tensor[3,3],[2]>(op1_e3_l_15183A);
    real vdot187F#1 = VDot<3>(op1_e3_l_31820,projParam187E);
    tensor[3] op1_e3_l_171879#6 = <tensor[3]>[vdot187B,vdot187D,vdot187F];
    real op1_e3_l_341888#1 = VDot<3>(op1_e3_l_171879,op1_e3_l_171879);
    real r188C#1 = RMul(op1_e3_l_91831,op1_e3_l_91831);
    real op1_e3_l_35188B#1 = RMul(r188C,op1_e3_l_341888);
    real op1_e3_l_361890#1 = Sqrt(op1_e3_l_35188B);
    tensor[3] op1_e3_l_371893#1 = VScale<3>(op1_e3_l_91831,op1_e3_l_171879);
    real realLit1897#1 = 0.1e1;
    real op1_e3_l_381896#2 = RDiv(realLit1897,op1_e3_l_361890);
    tensor[3] camU189B#2 = VScale<3>(op1_e3_l_381896,op1_e3_l_371893);
    globals.camU1796 = camU189B;
    real realLit18A0#3 = 0.e0;
    real r18A1#3 = TensorIndex<tensor[3],[0]>(op1_e3_l_31820);
    real r18A2#3 = RMul(realLit18A0,r18A1);
    real r18A3#3 = TensorIndex<tensor[3],[1]>(op1_e3_l_31820);
    real r18A4#3 = RMul(realLit18A0,r18A3);
    real r18A5#3 = TensorIndex<tensor[3],[2]>(op1_e3_l_31820);
    real r18A6#5 = RMul(realLit18A0,r18A5);
    real r18A7#3 = RAdd(r18A2,r18A4);
    real r18A8#3 = RAdd(r18A7,r18A6);
    real realLit18A9#3 = 0.1e1;
    real r18AA#1 = RMul(realLit18A9,r18A5);
    real r18AB#1 = RAdd(r18A7,r18AA);
    real realLit18AC#3 = -0.1e1;
    real r18AD#1 = RMul(realLit18AC,r18A3);
    real r18AE#1 = RAdd(r18A2,r18AD);
    real r18AF#1 = RAdd(r18AE,r18A6);
    tensor[3] tensor18B0#1 = <tensor[3]>[r18A8,r18AB,r18AF];
    real r18B1#1 = RMul(realLit18AC,r18A5);
    real r18B2#1 = RAdd(r18A7,r18B1);
    real r18B3#1 = RMul(realLit18A9,r18A1);
    real r18B4#1 = RAdd(r18B3,r18A4);
    real r18B5#1 = RAdd(r18B4,r18A6);
    tensor[3] tensor18B6#1 = <tensor[3]>[r18B2,r18A8,r18B5];
    real r18B7#1 = RMul(realLit18A9,r18A3);
    real r18B8#1 = RAdd(r18A2,r18B7);
    real r18B9#1 = RAdd(r18B8,r18A6);
    real r18BA#1 = RMul(realLit18AC,r18A1);
    real r18BB#1 = RAdd(r18BA,r18A4);
    real r18BC#1 = RAdd(r18BB,r18A6);
    tensor[3] tensor18BD#1 = <tensor[3]>[r18B9,r18BC,r18A8];
    tensor[3,3] op1_e3_l_45189F#3 = <tensor[3,3]>[tensor18B0,tensor18B6,tensor18BD];
    tensor[3] projParam18DF#1 = ProjectLast<tensor[3,3],[0]>(op1_e3_l_45189F);
    real vdot18E0#1 = VDot<3>(op1_e3_l_171879,projParam18DF);
    tensor[3] projParam18E1#1 = ProjectLast<tensor[3,3],[1]>(op1_e3_l_45189F);
    real vdot18E2#1 = VDot<3>(op1_e3_l_171879,projParam18E1);
    tensor[3] projParam18E3#1 = ProjectLast<tensor[3,3],[2]>(op1_e3_l_45189F);
    real vdot18E4#1 = VDot<3>(op1_e3_l_171879,projParam18E3);
    tensor[3] op1_e3_l_4718DE#1 = <tensor[3]>[vdot18E0,vdot18E2,vdot18E4];
    tensor[3] op1_e3_l_5018ED#3 = VScale<3>(op1_e3_l_91831,op1_e3_l_4718DE);
    real r18F1#1 = TensorIndex<tensor[3],[0]>(op1_e3_l_5018ED);
    real r18F2#3 = RMul(op1_e3_l_381896,op1_e3_l_91831);
    real r18F3#1 = RMul(r18F2,r18F1);
    real r18F4#1 = TensorIndex<tensor[3],[1]>(op1_e3_l_5018ED);
    real r18F5#1 = RMul(r18F2,r18F4);
    real r18F6#1 = TensorIndex<tensor[3],[2]>(op1_e3_l_5018ED);
    real r18F7#1 = RMul(r18F2,r18F6);
    tensor[3] camV18F0#2 = <tensor[3]>[r18F3,r18F5,r18F7];
    globals.camV1797 = camV18F0;
    real _t1902#1 = 0.314159265358979323846264338327950288e1;
    real _t1904#1 = 0.36e3;
    real op1_e3_l_51906#1 = RMul(camFOV17F2,_t1902);
    real op1_e3_l_61909#1 = RDiv(op1_e3_l_51906,_t1904);
    real op1_e3_l_10190C#2 = Tan(op1_e3_l_61909);
    real camVmax190F#1 = RMul(op1_e3_l_10190C,op1_e3_l_61826);
    globals.camVmax1798 = camVmax190F;
    real _t1913#1 = IntToReal(iresU17F4);
    real _t1915#1 = IntToReal(iresV17F6);
    real r1918#1 = RMul(_t1913,op1_e3_l_10190C);
    real op1_e3_l_141917#1 = RMul(r1918,op1_e3_l_61826);
    real camUmax191C#1 = RDiv(op1_e3_l_141917,_t1915);
    globals.camUmax1799 = camUmax191C;
    int _t1920#1 = 0;
    image(IMAGE1D<double[3]>) img1922#1 = cmap1802;
    tensor[3,3] _t1924#9 = <tensor[3,3]>[camU189B,camV18F0,camN1836];
    real op1_e3_l_31926#1 = VDot<3>(lightVsp1804,lightVsp1804);
    real op1_e3_l_41929#1 = Sqrt(op1_e3_l_31926);
    real realLit192D#1 = 0.1e1;
    real op1_e3_l_5192C#1 = RDiv(realLit192D,op1_e3_l_41929);
    real r1932#1 = TensorIndex<tensor[3,3],[0,0]>(_t1924);
    real r1933#3 = TensorIndex<tensor[3],[0]>(lightVsp1804);
    real r1934#1 = RMul(r1932,r1933);
    real r1935#1 = TensorIndex<tensor[3,3],[1,0]>(_t1924);
    real r1936#3 = TensorIndex<tensor[3],[1]>(lightVsp1804);
    real r1937#1 = RMul(r1935,r1936);
    real r1938#1 = TensorIndex<tensor[3,3],[2,0]>(_t1924);
    real r1939#3 = TensorIndex<tensor[3],[2]>(lightVsp1804);
    real r193A#1 = RMul(r1938,r1939);
    real r193B#1 = RAdd(r1934,r1937);
    real r193C#1 = RAdd(r193B,r193A);
    real r193D#1 = TensorIndex<tensor[3,3],[0,1]>(_t1924);
    real r193E#1 = RMul(r193D,r1933);
    real r193F#1 = TensorIndex<tensor[3,3],[1,1]>(_t1924);
    real r1940#1 = RMul(r193F,r1936);
    real r1941#1 = TensorIndex<tensor[3,3],[2,1]>(_t1924);
    real r1942#1 = RMul(r1941,r1939);
    real r1943#1 = RAdd(r193E,r1940);
    real r1944#1 = RAdd(r1943,r1942);
    real r1945#1 = TensorIndex<tensor[3,3],[0,2]>(_t1924);
    real r1946#1 = RMul(r1945,r1933);
    real r1947#1 = TensorIndex<tensor[3,3],[1,2]>(_t1924);
    real r1948#1 = RMul(r1947,r1936);
    real r1949#1 = TensorIndex<tensor[3,3],[2,2]>(_t1924);
    real r194A#1 = RMul(r1949,r1939);
    real r194B#1 = RAdd(r1946,r1948);
    real r194C#1 = RAdd(r194B,r194A);
    tensor[3] op1_e3_l_61931#1 = <tensor[3]>[r193C,r1944,r194C];
    tensor[3] L196A#1 = VScale<3>(op1_e3_l_5192C,op1_e3_l_61931);
    globals.L179A = L196A;
    globals.img179B = img1922;
    globals._t179C = _t1920;
    return
## strand
  strand ray (int ui1971#3, int vi1972#4)
    state:
      real rayU;
      real rayV;
      tensor[3] UV;
      tensor[3] rayOrig;
      tensor[3] rayVec;
      real camNearVsp;
      real camFarVsp;
      int offset;
      int len;
      int itter;
      int intersectionItter;
      int idx;
      tensor[2] interval;
      real s;
      real e;
      femData:MeshCell cc;
      femData:FuncCell fc;
      output real out;
      output tensor[4] rgba;
      output tensor[3][] locs;
      int ui;
      int vi;
    state init
      ENTRY1989:  preds = []
        tensor[3] camEye198A#1 = globals.camEye1770;
        int iresU198C#2 = globals.iresU1774;
        int iresV198E#3 = globals.iresV1775;
        femData:MeshCell[] 0cell_a1990#1 = globals.0cell_a1791;
        femData:FemFunc c1992#1 = globals.c1792;
        int[] indecies1994#2 = globals.indecies177F;
        tensor[2][] times1996#1 = globals.times1780;
        real camNearVsp1998#1 = globals.camNearVsp1793;
        real camFarVsp199A#1 = globals.camFarVsp1794;
        tensor[3] camN199C#1 = globals.camN1795;
        tensor[3] camU199E#1 = globals.camU1796;
        tensor[3] camV19A0#1 = globals.camV1797;
        real camVmax19A2#2 = globals.camVmax1798;
        real camUmax19A4#2 = globals.camUmax1799;
        real _t19A6#5 = -0.5e0;
        real _t19A8#1 = IntToReal(ui1971);
        real _t19AA#1 = IntToReal(iresU198C);
        real _t19AC#3 = 0.5e0;
        real op1_e3_l_619AE#1 = RSub(_t19AA,_t19AC);
        real op1_e3_l_719B1#1 = RSub(_t19A8,_t19A6);
        real op1_e3_l_819B4#1 = RSub(op1_e3_l_619AE,_t19A6);
        real op1_e3_l_919B7#2 = RNeg(camUmax19A4);
        real op1_e3_l_1019BA#1 = RDiv(op1_e3_l_719B1,op1_e3_l_819B4);
        real op1_e3_l_1119BD#1 = RSub(camUmax19A4,op1_e3_l_919B7);
        real op1_e3_l_1319C0#1 = RMul(op1_e3_l_1019BA,op1_e3_l_1119BD);
        real rayU19C3#2 = RAdd(op1_e3_l_919B7,op1_e3_l_1319C0);
        real _t19C6#1 = IntToReal(vi1972);
        real _t19C8#2 = IntToReal(iresV198E);
        real op1_e3_l_619CA#1 = RSub(_t19C8,_t19AC);
        real op1_e3_l_719CD#2 = RSub(_t19C6,_t19A6);
        real op1_e3_l_819D0#1 = RSub(op1_e3_l_619CA,_t19A6);
        real op1_e3_l_919D3#3 = RNeg(camVmax19A2);
        real op1_e3_l_1019D6#1 = RDiv(op1_e3_l_719CD,op1_e3_l_819D0);
        real op1_e3_l_1119D9#2 = RSub(camVmax19A2,op1_e3_l_919D3);
        real op1_e3_l_1319DC#1 = RMul(op1_e3_l_1019D6,op1_e3_l_1119D9);
        real rayV19DF#1 = RAdd(op1_e3_l_919D3,op1_e3_l_1319DC);
        real op1_e3_l_2319E2#1 = RSub(_t19C8,_t19AC);
        real op1_e3_l_2519E5#1 = RSub(op1_e3_l_2319E2,_t19A6);
        real op1_e3_l_2719E8#1 = RDiv(op1_e3_l_719CD,op1_e3_l_2519E5);
        real op1_e3_l_3019EB#1 = RMul(op1_e3_l_2719E8,op1_e3_l_1119D9);
        real op1_e3_l_3119EE#1 = RAdd(op1_e3_l_919D3,op1_e3_l_3019EB);
        tensor[3] op1_e3_l_3219F1#2 = VScale<3>(rayU19C3,camU199E);
        tensor[3] op1_e3_l_3319F4#2 = VScale<3>(op1_e3_l_3119EE,camV19A0);
        tensor[3] UV19F7#1 = VAdd<3>(op1_e3_l_3219F1,op1_e3_l_3319F4);
        tensor[3] v19FB#1 = VAdd<3>(camEye198A,op1_e3_l_3219F1);
        tensor[3] rayOrig19FA#1 = VAdd<3>(v19FB,op1_e3_l_3319F4);
        real _t19FF#8 = 0.e0;
        tensor[3] _t1A01#1 = <tensor[3]>[_t19FF,_t19FF,_t19FF];
        tensor[3] rayVec1A03#1 = VAdd<3>(camN199C,_t1A01);
        int _t1A06#2 = IMul(ui1971,iresV198E);
        int _t1A08#1 = IAdd(_t1A06,vi1972);
        int offset1A0A#2 = Subscript<int[]>(indecies1994,_t1A08);
        int _t1A0C#1 = IMul(iresU198C,iresV198E);
        int _t1A0E#1 = IAdd(_t1A0C,_t1A06);
        int _t1A10#1 = IAdd(_t1A0E,vi1972);
        int len1A12#1 = Subscript<int[]>(indecies1994,_t1A10);
        int itter1A14#3 = 0;
        int idx1A16#2 = offset1A0A;
        tensor[2] interval1A18#3 = Subscript<tensor[2][]>(times1996,idx1A16);
        real s1A1A#1 = VIndex<2,0>(interval1A18);
        real e1A1C#1 = VIndex<2,1>(interval1A18);
        femData:MeshCell cc1A1E#2 = Subscript<femData:MeshCell[]>(0cell_a1990,itter1A14);
        int _t1A20#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc1A1E);
        femData:FuncCell _t1A22#1 = LoadFem<femData:FuncCell>(c1992,_t1A20);
        tensor[4] rgba1A24#1 = <tensor[4]>[_t19FF,_t19FF,_t19FF,_t19FF];
        tensor[3][0] _t1A26#1 = <tensor[3][0]>{};
        tensor[3][] _t1A28#1 = MkDynamic<tensor[3],0>(_t1A26);
        self.rayU = rayU19C3;
        self.rayV = rayV19DF;
        self.UV = UV19F7;
        self.rayOrig = rayOrig19FA;
        self.rayVec = rayVec1A03;
        self.camNearVsp = camNearVsp1998;
        self.camFarVsp = camFarVsp199A;
        self.offset = offset1A0A;
        self.len = len1A12;
        self.itter = itter1A14;
        self.intersectionItter = itter1A14;
        self.idx = idx1A16;
        self.interval = interval1A18;
        self.s = s1A1A;
        self.e = e1A1C;
        self.cc = cc1A1E;
        self.fc = _t1A22;
        self.out = _t19FF;
        self.rgba = rgba1A24;
        self.locs = _t1A28;
        self.ui = ui1971;
        self.vi = vi1972;
        return
    end state init
    method start
        ENTRY1A41:  preds = []
          femData:MeshCell[] 0cell_a1A42#1 = globals.0cell_a1791;
          femData:FemFunc c1A44#1 = globals.c1792;
          int[] cells1A46#1 = globals.cells1781;
          bool debug1A48#1 = globals.debug178E;
          int debugU1A4A#1 = globals.debugU178F;
          int debugV1A4C#1 = globals.debugV1790;
          int len1A4E#1 = self.len;
          int idx1A50#1 = self.idx;
          int ui1A52#2 = self.ui;
          int vi1A54#2 = self.vi;
          if debug1A48 then goto ASSIGN1A58 else goto JOIN1A60
        ASSIGN1A58:  preds = [COND1A56]
          bool _t1A57#1 = NEQ<int>(ui1A52,debugU1A4A);
          if _t1A57 then goto ASSIGN1A5B else goto JOIN1A5F
        ASSIGN1A5B:  preds = [COND1A59]
          bool _t1A5A#1 = NEQ<int>(vi1A54,debugV1A4C);
          if _t1A5A then goto STABILIZE1A5D else goto JOIN1A5E
        STABILIZE1A5D:  preds = [COND1A5C]
          stabilize
          goto JOIN1A5E
        JOIN1A5E:  preds = [*STABILIZE1A5D,COND1A5C]
          goto JOIN1A5F
        JOIN1A5F:  preds = [JOIN1A5E,COND1A59]
          goto JOIN1A60
        JOIN1A60:  preds = [JOIN1A5F,COND1A56]
          int _t1A61#1 = 0;
          bool _t1A63#1 = EQ<int>(len1A4E,_t1A61);
          if _t1A63 then goto ASSIGN1A67 else goto JOIN1A6E
        ASSIGN1A67:  preds = [COND1A65]
          string _t1A66#1 = "(find:)No intersection found:";
          string _t1A68#1 = "/";
          string _t1A6A#1 = "\n";
          Print<[string,int,string,int,string]>(_t1A66,ui1A52,_t1A68,vi1A54,_t1A6A);
          stabilize
          goto JOIN1A6E
        JOIN1A6E:  preds = [*STABILIZE1A6D,COND1A65]
          int _t1A6F#1 = Subscript<int[]>(cells1A46,idx1A50);
          femData:MeshCell cc1A71#2 = Subscript<femData:MeshCell[]>(0cell_a1A42,_t1A6F);
          int _t1A73#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc1A71);
          femData:FuncCell _t1A75#1 = LoadFem<femData:FuncCell>(c1A44,_t1A73);
          self.cc = cc1A71;
          self.fc = _t1A75;
          active
    end start
    method update
        ENTRY1A7A:  preds = []
          image(IMAGE1D<double[3]>) cmap1A7B#17 = globals.cmap1784;
          image(IMAGE1D<double[3]>) img1A7D#0 = globals.img179B;
          int _t1A7F#0 = globals._t179C;
          femData:MeshCell[] 0cell_a1A81#1 = globals.0cell_a1791;
          femData:FemFunc c1A83#1 = globals.c1792;
          real zeroEps1A85#1 = globals.zeroEps177D;
          real intervalEps1A87#4 = globals.intervalEps177E;
          tensor[2][] times1A89#1 = globals.times1780;
          int[] cells1A8B#1 = globals.cells1781;
          tensor[3] mcnear1A8D#2 = globals.mcnear1782;
          tensor[3] mcfar1A8F#1 = globals.mcfar1783;
          real cmin1A91#3 = globals.cmin1785;
          real cmax1A93#2 = globals.cmax1786;
          bool light1A95#1 = globals.light1787;
          real phongKa1A97#1 = globals.phongKa1788;
          real phongKd1A99#1 = globals.phongKd1789;
          real phongKs1A9B#1 = globals.phongKs178A;
          real phongSp1A9D#1 = globals.phongSp178B;
          tensor[3] L1A9F#2 = globals.L179A;
          tensor[3] rayOrig1AA1#4 = self.rayOrig;
          tensor[3] rayVec1AA3#7 = self.rayVec;
          real camNearVsp1AA5#2 = self.camNearVsp;
          real camFarVsp1AA7#1 = self.camFarVsp;
          int offset1AA9#1 = self.offset;
          int len1AAB#1 = self.len;
          int itter1AAD#3 = self.itter;
          int intersectionItter1AAF#2 = self.intersectionItter;
          tensor[2] interval1AB1#1 = self.interval;
          real s1AB3#7 = self.s;
          real e1AB5#5 = self.e;
          femData:MeshCell cc1AB7#3 = self.cc;
          femData:FuncCell fc1AB9#3 = self.fc;
          real out1ABB#2 = self.out;
          tensor[4] rgba1ABD#1 = self.rgba;
          tensor[3][] locs1ABF#1 = self.locs;
          int ui1AC1#1 = self.ui;
          int vi1AC3#1 = self.vi;
          string _t1AC5#1 = "Ui/Vi::";
          string _t1AC7#1 = "/";
          string _t1AC9#11 = "\n";
          Print<[string,int,string,int,string]>(_t1AC5,ui1AC1,_t1AC7,vi1AC3,_t1AC9);
          string _t1ACC#1 = "Interval:";
          tensor[2] _t1ACE#1 = <tensor[2]>[s1AB3,e1AB5];
          Print<[string,tensor[2],string]>(_t1ACC,_t1ACE,_t1AC9);
          string _t1AD1#1 = "inner itter:";
          Print<[string,int,string]>(_t1AD1,intersectionItter1AAF,_t1AC9);
          string _t1AD4#1 = "Outer itter:";
          Print<[string,int,string]>(_t1AD4,itter1AAD,_t1AC9);
          real _t1AD7#1 = VIndex<3,0>(rayOrig1AA1);
          real _t1AD9#1 = VIndex<3,1>(rayOrig1AA1);
          tensor[2] _t1ADB#3 = <tensor[2]>[_t1AD7,_t1AD9];
          real _t1ADD#1 = VIndex<3,0>(rayVec1AA3);
          real _t1ADF#1 = VIndex<3,1>(rayVec1AA3);
          tensor[2] _t1AE1#3 = <tensor[2]>[_t1ADD,_t1ADF];
          tensor[2] op1_e3_l_31AE3#1 = VScale<2>(s1AB3,_t1AE1);
          tensor[2] startRay1AE6#1 = VAdd<2>(_t1ADB,op1_e3_l_31AE3);
          tensor[2] op1_e3_l_31AE9#1 = VScale<2>(e1AB5,_t1AE1);
          tensor[2] endRay1AEC#1 = VAdd<2>(_t1ADB,op1_e3_l_31AE9);
          femData:Mesh _t1AEF#12 = ExtractFem<femData:Mesh,femData:MeshCell>(cc1AB7);
          int _t1AF1#4 = ExtractFemItem<int,CellIndex(MeshCell)>(cc1AB7);
          femData:MeshPos callNewtonPos1AF3#1 = _0A92_msh_newtonInverse1AF4 (startRay1AE6,_t1AF1,_t1AEF);
          tensor[2] refPos1D63#3 = ExtractFemItem<tensor[2],RefPos(Mesh)>(callNewtonPos1AF3);
          femData:MeshPos callNewtonPos1D65#1 = _0A92_msh_newtonInverse1AF4 (endRay1AEC,_t1AF1,_t1AEF);
          tensor[2] refPos1D67#3 = ExtractFemItem<tensor[2],RefPos(Mesh)>(callNewtonPos1D65);
          string _t1D69#1 = "inverses:";
          Print<[string,tensor[2],tensor[2],string]>(_t1D69,refPos1D63,refPos1D67,_t1AC9);
          femData:FemFunc _t1D6C#7 = ExtractFem<femData:FemFunc,femData:FuncCell>(fc1AB9);
          femData:Space _t1D6E#6 = ExtractFem<femData:Space,femData:FemFunc>(_t1D6C);
          int _t1D70#1 = ExtractFemItem<int,CellIndex(FuncCell)>(fc1AB9);
          real _t1D72#3 = VIndex<3,2>(rayVec1AA3);
          real _t1D74#3 = VIndex<3,2>(rayOrig1AA1);
          int ilit1D77#1 = 6;
          int mulRes1D78#6 = IMul(_t1D70,ilit1D77);
          int ilit1D79#1 = 0;
          int addRes1D7A#1 = IAdd(mulRes1D78,ilit1D79);
          int idx1D7B#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1D6E,addRes1D7A);
          int ilit1D7C#1 = 1;
          int addRes1D7D#1 = IAdd(mulRes1D78,ilit1D7C);
          int idx1D7E#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1D6E,addRes1D7D);
          int ilit1D7F#1 = 2;
          int addRes1D80#1 = IAdd(mulRes1D78,ilit1D7F);
          int idx1D81#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1D6E,addRes1D80);
          int ilit1D82#1 = 3;
          int addRes1D83#1 = IAdd(mulRes1D78,ilit1D82);
          int idx1D84#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1D6E,addRes1D83);
          int ilit1D85#1 = 4;
          int addRes1D86#1 = IAdd(mulRes1D78,ilit1D85);
          int idx1D87#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1D6E,addRes1D86);
          int ilit1D88#1 = 5;
          int addRes1D89#1 = IAdd(mulRes1D78,ilit1D88);
          int idx1D8A#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1D6E,addRes1D89);
          int[6] seq1D8B#1 = <int[6]>{idx1D7B,idx1D7E,idx1D81,idx1D84,idx1D87,idx1D8A};
          int[6] femIndicies1D76#6 = seq1D8B;
          int ilit1DA3#7 = 1;
          int ilit1DA4#1 = 0;
          int idx1DA5#1 = Subscript<int>(femIndicies1D76,ilit1DA4);
          int mulRes1DA6#1 = IMul(ilit1DA3,idx1DA5);
          int idx1DA7#1 = Subscript<int>(femIndicies1D76,ilit1DA3);
          int mulRes1DA8#1 = IMul(ilit1DA3,idx1DA7);
          int ilit1DA9#1 = 2;
          int idx1DAA#1 = Subscript<int>(femIndicies1D76,ilit1DA9);
          int mulRes1DAB#1 = IMul(ilit1DA3,idx1DAA);
          int ilit1DAC#1 = 3;
          int idx1DAD#1 = Subscript<int>(femIndicies1D76,ilit1DAC);
          int mulRes1DAE#1 = IMul(ilit1DA3,idx1DAD);
          int ilit1DAF#1 = 4;
          int idx1DB0#1 = Subscript<int>(femIndicies1D76,ilit1DAF);
          int mulRes1DB1#1 = IMul(ilit1DA3,idx1DB0);
          int ilit1DB2#1 = 5;
          int idx1DB3#1 = Subscript<int>(femIndicies1D76,ilit1DB2);
          int mulRes1DB4#1 = IMul(ilit1DA3,idx1DB3);
          real dof1DB5#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(_t1D6C,mulRes1DA6);
          real dof1DB6#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(_t1D6C,mulRes1DA8);
          real dof1DB7#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(_t1D6C,mulRes1DAB);
          real dof1DB8#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(_t1D6C,mulRes1DAE);
          real dof1DB9#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(_t1D6C,mulRes1DB1);
          real dof1DBA#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(_t1D6C,mulRes1DB4);
          tensor[6] dofs1DBB#1 = <tensor[6]>[dof1DB5,dof1DB6,dof1DB7,dof1DB8,dof1DB9,dof1DBA];
          tensor[6] femDofs1DA2#5 = dofs1DBB;
          real varAcc1DD7#2 = VIndex<2,0>(refPos1D63);
          real varAcc1DD8#2 = VIndex<2,1>(refPos1D63);
          real coeff1DD9#2 = 0.2e1;
          real iden1DDA#3 = varAcc1DD7;
          real prod21DDB#1 = RMul(iden1DDA,varAcc1DD7);
          real one1DDC#7 = 0.1e1;
          real prod1DDD#2 = RMul(prod21DDB,one1DDC);
          real coeff1DDE#3 = 0.4e1;
          real iden1DDF#3 = varAcc1DD8;
          real prod1DE0#2 = RMul(iden1DDA,iden1DDF);
          real coeff1DE1#2 = -0.3e1;
          real prod1DE2#3 = RMul(iden1DDA,one1DDC);
          real prod21DE3#1 = RMul(iden1DDF,varAcc1DD8);
          real prod1DE4#2 = RMul(one1DDC,prod21DE3);
          real prod1DE5#3 = RMul(one1DDC,iden1DDF);
          real prod1DE6#1 = RMul(one1DDC,one1DDC);
          real mult1DE7#1 = RMul(one1DDC,prod1DE6);
          real mult1DE8#1 = RMul(coeff1DE1,prod1DE5);
          real mult1DE9#2 = RMul(coeff1DD9,prod1DE4);
          real mult1DEA#1 = RMul(coeff1DE1,prod1DE2);
          real mult1DEB#2 = RMul(coeff1DDE,prod1DE0);
          real mult1DEC#2 = RMul(coeff1DD9,prod1DDD);
          real sum1DED#1 = RAdd(mult1DEB,mult1DEC);
          real sum1DEE#1 = RAdd(mult1DEA,sum1DED);
          real sum1DEF#1 = RAdd(mult1DE9,sum1DEE);
          real sum1DF0#1 = RAdd(mult1DE8,sum1DEF);
          real sum1DF1#1 = RAdd(mult1DE7,sum1DF0);
          real intermediate1DF2#1 = sum1DF1;
          real coeff1DF3#2 = -0.1e1;
          real mult1DF4#1 = RMul(coeff1DF3,prod1DE2);
          real sum1DF5#1 = RAdd(mult1DF4,mult1DEC);
          real intermediate1DF6#1 = sum1DF5;
          real mult1DF7#1 = RMul(coeff1DF3,prod1DE5);
          real sum1DF8#1 = RAdd(mult1DF7,mult1DE9);
          real intermediate1DF9#1 = sum1DF8;
          real coeff1DFA#3 = -0.4e1;
          real mult1DFB#1 = RMul(coeff1DDE,prod1DE5);
          real mult1DFC#1 = RMul(coeff1DFA,prod1DE4);
          real mult1DFD#2 = RMul(coeff1DFA,prod1DE0);
          real sum1DFE#1 = RAdd(mult1DFC,mult1DFD);
          real sum1DFF#1 = RAdd(mult1DFB,sum1DFE);
          real intermediate1E00#1 = sum1DFF;
          real mult1E01#1 = RMul(coeff1DDE,prod1DE2);
          real mult1E02#1 = RMul(coeff1DFA,prod1DDD);
          real sum1E03#1 = RAdd(mult1DFD,mult1E02);
          real sum1E04#1 = RAdd(mult1E01,sum1E03);
          real intermediate1E05#1 = sum1E04;
          tensor[6] intermediateCons1E06#1 = <tensor[6]>[intermediate1DF2,intermediate1DF6,intermediate1DF9,mult1DEB,intermediate1E00,intermediate1E05];
          tensor[6] basisResult1DD6#1 = intermediateCons1E06;
          real probe_l_71E38#1 = VDot<6>(femDofs1DA2,basisResult1DD6);
          real op1_e3_l_81E3B#1 = RMul(_t1D72,s1AB3);
          real op1_e3_l_91E3E#1 = RSub(probe_l_71E38,op1_e3_l_81E3B);
          real fa1E41#9 = RSub(op1_e3_l_91E3E,_t1D74);
          real varAcc1E45#2 = VIndex<2,0>(refPos1D67);
          real varAcc1E46#2 = VIndex<2,1>(refPos1D67);
          real coeff1E47#2 = 0.2e1;
          real iden1E48#3 = varAcc1E45;
          real prod21E49#1 = RMul(iden1E48,varAcc1E45);
          real one1E4A#7 = 0.1e1;
          real prod1E4B#2 = RMul(prod21E49,one1E4A);
          real coeff1E4C#3 = 0.4e1;
          real iden1E4D#3 = varAcc1E46;
          real prod1E4E#2 = RMul(iden1E48,iden1E4D);
          real coeff1E4F#2 = -0.3e1;
          real prod1E50#3 = RMul(iden1E48,one1E4A);
          real prod21E51#1 = RMul(iden1E4D,varAcc1E46);
          real prod1E52#2 = RMul(one1E4A,prod21E51);
          real prod1E53#3 = RMul(one1E4A,iden1E4D);
          real prod1E54#1 = RMul(one1E4A,one1E4A);
          real mult1E55#1 = RMul(one1E4A,prod1E54);
          real mult1E56#1 = RMul(coeff1E4F,prod1E53);
          real mult1E57#2 = RMul(coeff1E47,prod1E52);
          real mult1E58#1 = RMul(coeff1E4F,prod1E50);
          real mult1E59#2 = RMul(coeff1E4C,prod1E4E);
          real mult1E5A#2 = RMul(coeff1E47,prod1E4B);
          real sum1E5B#1 = RAdd(mult1E59,mult1E5A);
          real sum1E5C#1 = RAdd(mult1E58,sum1E5B);
          real sum1E5D#1 = RAdd(mult1E57,sum1E5C);
          real sum1E5E#1 = RAdd(mult1E56,sum1E5D);
          real sum1E5F#1 = RAdd(mult1E55,sum1E5E);
          real intermediate1E60#1 = sum1E5F;
          real coeff1E61#2 = -0.1e1;
          real mult1E62#1 = RMul(coeff1E61,prod1E50);
          real sum1E63#1 = RAdd(mult1E62,mult1E5A);
          real intermediate1E64#1 = sum1E63;
          real mult1E65#1 = RMul(coeff1E61,prod1E53);
          real sum1E66#1 = RAdd(mult1E65,mult1E57);
          real intermediate1E67#1 = sum1E66;
          real coeff1E68#3 = -0.4e1;
          real mult1E69#1 = RMul(coeff1E4C,prod1E53);
          real mult1E6A#1 = RMul(coeff1E68,prod1E52);
          real mult1E6B#2 = RMul(coeff1E68,prod1E4E);
          real sum1E6C#1 = RAdd(mult1E6A,mult1E6B);
          real sum1E6D#1 = RAdd(mult1E69,sum1E6C);
          real intermediate1E6E#1 = sum1E6D;
          real mult1E6F#1 = RMul(coeff1E4C,prod1E50);
          real mult1E70#1 = RMul(coeff1E68,prod1E4B);
          real sum1E71#1 = RAdd(mult1E6B,mult1E70);
          real sum1E72#1 = RAdd(mult1E6F,sum1E71);
          real intermediate1E73#1 = sum1E72;
          tensor[6] intermediateCons1E74#1 = <tensor[6]>[intermediate1E60,intermediate1E64,intermediate1E67,mult1E59,intermediate1E6E,intermediate1E73];
          tensor[6] basisResult1E44#1 = intermediateCons1E74;
          real probe_l_71EA6#1 = VDot<6>(femDofs1DA2,basisResult1E44);
          real op1_e3_l_81EA9#1 = RMul(_t1D72,e1AB5);
          real op1_e3_l_91EAC#1 = RSub(probe_l_71EA6,op1_e3_l_81EA9);
          real fb1EAF#6 = RSub(op1_e3_l_91EAC,_t1D74);
          string _t1EB2#1 = "Vals:";
          tensor[2] _t1EB4#1 = <tensor[2]>[fa1E41,fb1EAF];
          Print<[string,tensor[2],string]>(_t1EB2,_t1EB4,_t1AC9);
          real op1_e3_l_221EB7#1 = RSub(fa1E41,fb1EAF);
          real _t1EBA#1 = Abs<real>(op1_e3_l_221EB7);
          bool _t1EBD#1 = LT<real>(_t1EBA,intervalEps1A87);
          if _t1EBD then goto ASSIGN1EC2 else goto JOIN1ED9
        ASSIGN1EC2:  preds = [COND1EBF]
          real _t1EC0#1 = Abs<real>(fa1E41);
          bool _t1EC3#1 = GT<real>(_t1EC0,intervalEps1A87);
          if _t1EC3 then goto ASSIGN1EC8 else goto JOIN1ED7
        ASSIGN1EC8:  preds = [COND1EC5]
          real _t1EC6#1 = Abs<real>(fb1EAF);
          bool _t1EC9#1 = GT<real>(_t1EC6,intervalEps1A87);
          if _t1EC9 then goto ASSIGN1ECD else goto JOIN1ED5
        ASSIGN1ECD:  preds = [COND1ECB]
          string _t1ECC#1 = "warn\n";
          Print<[string]>(_t1ECC);
          real s1ECF#1 = RAdd(s1AB3,intervalEps1A87);
          self.s = s1ECF;
          active
          goto JOIN1ED5
        JOIN1ED5:  preds = [*ACTIVE1ED3,COND1ECB]
          real s1ED4#1 = phi(s1AB3)
          goto JOIN1ED7
        JOIN1ED7:  preds = [JOIN1ED5,COND1EC5]
          real s1ED6#1 = phi(s1ED4,s1AB3)
          goto JOIN1ED9
        JOIN1ED9:  preds = [JOIN1ED7,COND1EBF]
          real s1ED8#3 = phi(s1ED6,s1AB3)
          real op1_e3_l_381EDA#1 = RMul(s1ED8,fb1EAF);
          real op1_e3_l_391EDD#1 = RMul(e1AB5,fa1E41);
          real op1_e3_l_481EE0#1 = RSub(op1_e3_l_381EDA,op1_e3_l_391EDD);
          real op1_e3_l_491EE3#1 = RSub(fb1EAF,fa1E41);
          real cup1EE6#7 = RDiv(op1_e3_l_481EE0,op1_e3_l_491EE3);
          string _t1EE9#1 = "Mid time:";
          Print<[string,real,string]>(_t1EE9,cup1EE6,_t1AC9);
          tensor[2] op1_e3_l_531EEC#1 = VScale<2>(cup1EE6,_t1AE1);
          tensor[2] midRay1EEF#1 = VAdd<2>(_t1ADB,op1_e3_l_531EEC);
          femData:MeshPos callNewtonPos1EF2#1 = _0A92_msh_newtonInverse1AF4 (midRay1EEF,_t1AF1,_t1AEF);
          tensor[2] refPos1EF4#6 = ExtractFemItem<tensor[2],RefPos(Mesh)>(callNewtonPos1EF2);
          real varAcc1EF7#2 = VIndex<2,0>(refPos1EF4);
          real varAcc1EF8#2 = VIndex<2,1>(refPos1EF4);
          real coeff1EF9#2 = 0.2e1;
          real iden1EFA#3 = varAcc1EF7;
          real prod21EFB#1 = RMul(iden1EFA,varAcc1EF7);
          real one1EFC#7 = 0.1e1;
          real prod1EFD#2 = RMul(prod21EFB,one1EFC);
          real coeff1EFE#3 = 0.4e1;
          real iden1EFF#3 = varAcc1EF8;
          real prod1F00#2 = RMul(iden1EFA,iden1EFF);
          real coeff1F01#2 = -0.3e1;
          real prod1F02#3 = RMul(iden1EFA,one1EFC);
          real prod21F03#1 = RMul(iden1EFF,varAcc1EF8);
          real prod1F04#2 = RMul(one1EFC,prod21F03);
          real prod1F05#3 = RMul(one1EFC,iden1EFF);
          real prod1F06#1 = RMul(one1EFC,one1EFC);
          real mult1F07#1 = RMul(one1EFC,prod1F06);
          real mult1F08#1 = RMul(coeff1F01,prod1F05);
          real mult1F09#2 = RMul(coeff1EF9,prod1F04);
          real mult1F0A#1 = RMul(coeff1F01,prod1F02);
          real mult1F0B#2 = RMul(coeff1EFE,prod1F00);
          real mult1F0C#2 = RMul(coeff1EF9,prod1EFD);
          real sum1F0D#1 = RAdd(mult1F0B,mult1F0C);
          real sum1F0E#1 = RAdd(mult1F0A,sum1F0D);
          real sum1F0F#1 = RAdd(mult1F09,sum1F0E);
          real sum1F10#1 = RAdd(mult1F08,sum1F0F);
          real sum1F11#1 = RAdd(mult1F07,sum1F10);
          real intermediate1F12#1 = sum1F11;
          real coeff1F13#2 = -0.1e1;
          real mult1F14#1 = RMul(coeff1F13,prod1F02);
          real sum1F15#1 = RAdd(mult1F14,mult1F0C);
          real intermediate1F16#1 = sum1F15;
          real mult1F17#1 = RMul(coeff1F13,prod1F05);
          real sum1F18#1 = RAdd(mult1F17,mult1F09);
          real intermediate1F19#1 = sum1F18;
          real coeff1F1A#3 = -0.4e1;
          real mult1F1B#1 = RMul(coeff1EFE,prod1F05);
          real mult1F1C#1 = RMul(coeff1F1A,prod1F04);
          real mult1F1D#2 = RMul(coeff1F1A,prod1F00);
          real sum1F1E#1 = RAdd(mult1F1C,mult1F1D);
          real sum1F1F#1 = RAdd(mult1F1B,sum1F1E);
          real intermediate1F20#1 = sum1F1F;
          real mult1F21#1 = RMul(coeff1EFE,prod1F02);
          real mult1F22#1 = RMul(coeff1F1A,prod1EFD);
          real sum1F23#1 = RAdd(mult1F1D,mult1F22);
          real sum1F24#1 = RAdd(mult1F21,sum1F23);
          real intermediate1F25#1 = sum1F24;
          tensor[6] intermediateCons1F26#1 = <tensor[6]>[intermediate1F12,intermediate1F16,intermediate1F19,mult1F0B,intermediate1F20,intermediate1F25];
          tensor[6] basisResult1EF6#1 = intermediateCons1F26;
          real fmVal1F58#2 = VDot<6>(femDofs1DA2,basisResult1EF6);
          real op1_e3_l_581F5B#1 = RMul(_t1D72,cup1EE6);
          real op1_e3_l_591F5E#1 = RSub(fmVal1F58,op1_e3_l_581F5B);
          real fm1F61#5 = RSub(op1_e3_l_591F5E,_t1D74);
          string _t1F64#1 = "all vals:";
          tensor[3] _t1F66#1 = <tensor[3]>[fa1E41,fm1F61,fb1EAF];
          Print<[string,tensor[3],string]>(_t1F64,_t1F66,_t1AC9);
          int _t1F69#6 = 1;
          int intersectionItter1F6B#3 = IAdd(intersectionItter1AAF,_t1F69);
          real _t1F6D#10 = 0.e0;
          bool _t1F6F#2 = GT<real>(fa1E41,_t1F6D);
          if _t1F6F then goto JOIN1F74 else goto ASSIGN2381
        JOIN1F74:  preds = [COND1F71,JOIN2386]
          int _t1F72#1 = phi(_t1F69,_t1F73)
          bool _t1F75#2 = GT<real>(fm1F61,_t1F6D);
          if _t1F75 then goto JOIN1F7A else goto ASSIGN2379
        JOIN1F7A:  preds = [COND1F77,JOIN237E]
          int _t1F78#1 = phi(_t1F69,_t1F79)
          int _t1F7B#1 = IMul(_t1F72,_t1F78);
          int _t1F7D#6 = 0;
          bool _t1F7F#1 = LT<int>(_t1F7B,_t1F7D);
          if _t1F7F then goto JOIN1F85 else goto COND235E
        JOIN1F85:  preds = [COND1F81,JOIN236B]
          real e1F82#4 = phi(cup1EE6,e1AB5)
          real s1F83#4 = phi(s1ED8,s1F84)
          string _t1F86#1 = "new interval:";
          tensor[2] _t1F88#1 = <tensor[2]>[s1F83,e1F82];
          Print<[string,tensor[2],string]>(_t1F86,_t1F88,_t1AC9);
          real _t1F8B#1 = Abs<real>(fm1F61);
          bool _t1F8E#2 = LT<real>(_t1F8B,zeroEps1A85);
          if _t1F8E then goto ASSIGN1F92 else goto JOIN22D8
        ASSIGN1F92:  preds = [COND1F90]
          tensor[2] grad1F91#1 = <tensor[2]>[_t1F6D,_t1F6D];
          if _t1F8E then goto ASSIGN1FBD else goto JOIN219A
        ASSIGN1FBD:  preds = [COND1F93]
          real varAcc1F95#1 = VIndex<2,0>(refPos1EF4);
          real varAcc1F96#1 = VIndex<2,1>(refPos1EF4);
          real coeff1F97#3 = 0.4e1;
          real iden1F98#1 = varAcc1F95;
          real one1F99#4 = 0.1e1;
          real prod1F9A#3 = RMul(iden1F98,one1F99);
          real iden1F9B#1 = varAcc1F96;
          real prod1F9C#3 = RMul(one1F99,iden1F9B);
          real coeff1F9D#1 = -0.3e1;
          real prod1F9E#3 = RMul(one1F99,one1F99);
          real mult1F9F#1 = RMul(coeff1F9D,prod1F9E);
          real mult1FA0#3 = RMul(coeff1F97,prod1F9C);
          real mult1FA1#3 = RMul(coeff1F97,prod1F9A);
          real sum1FA2#1 = RAdd(mult1FA0,mult1FA1);
          real sum1FA3#2 = RAdd(mult1F9F,sum1FA2);
          real intermediate1FA4#1 = sum1FA3;
          real coeff1FA5#1 = -0.1e1;
          real mult1FA6#2 = RMul(coeff1FA5,prod1F9E);
          real sum1FA7#1 = RAdd(mult1FA6,mult1FA1);
          real intermediate1FA8#1 = sum1FA7;
          real basisEval1FA9#2 = 0.e0;
          real coeff1FAA#2 = -0.4e1;
          real basisEval1FAB#2 = RMul(coeff1FAA,prod1F9C);
          real coeff1FAC#2 = -0.8e1;
          real mult1FAD#2 = RMul(coeff1F97,prod1F9E);
          real mult1FAE#1 = RMul(coeff1FAC,prod1F9A);
          real sum1FAF#1 = RAdd(basisEval1FAB,mult1FAE);
          real sum1FB0#1 = RAdd(mult1FAD,sum1FAF);
          real intermediate1FB1#1 = sum1FB0;
          real intermediate1FB2#1 = sum1FA3;
          real sum1FB3#1 = RAdd(mult1FA6,mult1FA0);
          real intermediate1FB4#1 = sum1FB3;
          real mult1FB5#1 = RMul(coeff1FAC,prod1F9C);
          real mult1FB6#2 = RMul(coeff1FAA,prod1F9A);
          real sum1FB7#1 = RAdd(mult1FB5,mult1FB6);
          real sum1FB8#1 = RAdd(mult1FAD,sum1FB7);
          real intermediate1FB9#1 = sum1FB8;
          tensor[6] intermediateCons1FBA#1 = <tensor[6]>[intermediate1FA4,intermediate1FA8,basisEval1FA9,mult1FA0,basisEval1FAB,intermediate1FB1];
          tensor[6] intermediateCons1FBB#1 = <tensor[6]>[intermediate1FB2,basisEval1FA9,intermediate1FB4,mult1FA1,intermediate1FB9,mult1FB6];
          tensor[2,6] intermediateCons1FBC#1 = <tensor[2,6]>[intermediateCons1FBA,intermediateCons1FBB];
          tensor[2,6] basisResult1F94#2 = intermediateCons1FBC;
          tensor[6] projParam1FE7#1 = ProjectLast<tensor[2,6],[0]>(basisResult1F94);
          real vdot1FE8#1 = VDot<6>(femDofs1DA2,projParam1FE7);
          tensor[6] projParam1FE9#1 = ProjectLast<tensor[2,6],[1]>(basisResult1F94);
          real vdot1FEA#1 = VDot<6>(femDofs1DA2,projParam1FE9);
          tensor[2] compositionl1FE6#2 = <tensor[2]>[vdot1FE8,vdot1FEA];
          int ilit1FF2#1 = 3;
          int mulRes1FF3#3 = IMul(_t1AF1,ilit1FF2);
          int ilit1FF4#1 = 0;
          int addRes1FF5#1 = IAdd(mulRes1FF3,ilit1FF4);
          int idx1FF6#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(_t1AEF,addRes1FF5);
          int ilit1FF7#1 = 1;
          int addRes1FF8#1 = IAdd(mulRes1FF3,ilit1FF7);
          int idx1FF9#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(_t1AEF,addRes1FF8);
          int ilit1FFA#1 = 2;
          int addRes1FFB#1 = IAdd(mulRes1FF3,ilit1FFA);
          int idx1FFC#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(_t1AEF,addRes1FFB);
          int[3] seq1FFD#1 = <int[3]>{idx1FF6,idx1FF9,idx1FFC};
          int[3] femIndicies1FF1#3 = seq1FFD;
          int ilit200C#4 = 0;
          int ilit200D#4 = 2;
          int idx200E#1 = Subscript<int>(femIndicies1FF1,ilit200C);
          int mulRes200F#2 = IMul(ilit200D,idx200E);
          int addRes2010#1 = IAdd(ilit200C,mulRes200F);
          int ilit2011#4 = 1;
          int addRes2012#1 = IAdd(ilit2011,mulRes200F);
          real dof_load2013#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1AEF,addRes2010);
          real dof_load2014#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1AEF,addRes2012);
          tensor[2] interCons2015#1 = <tensor[2]>[dof_load2013,dof_load2014];
          int idx2016#1 = Subscript<int>(femIndicies1FF1,ilit2011);
          int mulRes2017#2 = IMul(ilit200D,idx2016);
          int addRes2018#1 = IAdd(ilit200C,mulRes2017);
          int addRes2019#1 = IAdd(ilit2011,mulRes2017);
          real dof_load201A#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1AEF,addRes2018);
          real dof_load201B#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1AEF,addRes2019);
          tensor[2] interCons201C#1 = <tensor[2]>[dof_load201A,dof_load201B];
          int idx201D#1 = Subscript<int>(femIndicies1FF1,ilit200D);
          int mulRes201E#2 = IMul(ilit200D,idx201D);
          int addRes201F#1 = IAdd(ilit200C,mulRes201E);
          int addRes2020#1 = IAdd(ilit2011,mulRes201E);
          real dof_load2021#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1AEF,addRes201F);
          real dof_load2022#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1AEF,addRes2020);
          tensor[2] interCons2023#1 = <tensor[2]>[dof_load2021,dof_load2022];
          tensor[3,2] dofs2024#1 = <tensor[3,2]>[interCons2015,interCons201C,interCons2023];
          tensor[3,2] femDofs200B#18 = dofs2024;
          real varAcc2040#0 = VIndex<2,0>(refPos1EF4);
          real varAcc2041#0 = VIndex<2,1>(refPos1EF4);
          real coeff2042#1 = -0.1e1;
          real one2043#3 = 0.1e1;
          real prod2044#2 = RMul(one2043,one2043);
          real basisEval2045#2 = RMul(coeff2042,prod2044);
          real basisEval2046#2 = RMul(one2043,prod2044);
          real basisEval2047#2 = 0.e0;
          tensor[3] intermediateCons2048#1 = <tensor[3]>[basisEval2045,basisEval2046,basisEval2047];
          tensor[3] intermediateCons2049#1 = <tensor[3]>[basisEval2045,basisEval2047,basisEval2046];
          tensor[2,3] intermediateCons204A#1 = <tensor[2,3]>[intermediateCons2048,intermediateCons2049];
          tensor[2,3] basisResult203F#12 = intermediateCons204A;
          real r2058#2 = TensorIndex<tensor[3,2],[0,0]>(femDofs200B);
          real r2059#2 = TensorIndex<tensor[2,3],[0,0]>(basisResult203F);
          real r205A#1 = RMul(r2058,r2059);
          real r205B#2 = TensorIndex<tensor[3,2],[1,0]>(femDofs200B);
          real r205C#2 = TensorIndex<tensor[2,3],[0,1]>(basisResult203F);
          real r205D#1 = RMul(r205B,r205C);
          real r205E#2 = TensorIndex<tensor[3,2],[2,0]>(femDofs200B);
          real r205F#2 = TensorIndex<tensor[2,3],[0,2]>(basisResult203F);
          real r2060#1 = RMul(r205E,r205F);
          real r2061#1 = RAdd(r205A,r205D);
          real r2062#1 = RAdd(r2061,r2060);
          real r2063#2 = TensorIndex<tensor[2,3],[1,0]>(basisResult203F);
          real r2064#1 = RMul(r2058,r2063);
          real r2065#2 = TensorIndex<tensor[2,3],[1,1]>(basisResult203F);
          real r2066#1 = RMul(r205B,r2065);
          real r2067#2 = TensorIndex<tensor[2,3],[1,2]>(basisResult203F);
          real r2068#1 = RMul(r205E,r2067);
          real r2069#1 = RAdd(r2064,r2066);
          real r206A#1 = RAdd(r2069,r2068);
          tensor[2] tensor206B#1 = <tensor[2]>[r2062,r206A];
          real r206C#2 = TensorIndex<tensor[3,2],[0,1]>(femDofs200B);
          real r206D#1 = RMul(r206C,r2059);
          real r206E#2 = TensorIndex<tensor[3,2],[1,1]>(femDofs200B);
          real r206F#1 = RMul(r206E,r205C);
          real r2070#2 = TensorIndex<tensor[3,2],[2,1]>(femDofs200B);
          real r2071#1 = RMul(r2070,r205F);
          real r2072#1 = RAdd(r206D,r206F);
          real r2073#1 = RAdd(r2072,r2071);
          real r2074#1 = RMul(r206C,r2063);
          real r2075#1 = RMul(r206E,r2065);
          real r2076#1 = RMul(r2070,r2067);
          real r2077#1 = RAdd(r2074,r2075);
          real r2078#1 = RAdd(r2077,r2076);
          tensor[2] tensor2079#1 = <tensor[2]>[r2073,r2078];
          tensor[2,2] probe_l_82057#4 = <tensor[2,2]>[tensor206B,tensor2079];
          real realLit209F#4 = 0.e0;
          real r20A0#2 = TensorIndex<tensor[2,2],[0,0]>(probe_l_82057);
          real r20A1#1 = RMul(realLit209F,r20A0);
          real realLit20A2#2 = -0.1e1;
          real r20A3#2 = TensorIndex<tensor[2,2],[1,0]>(probe_l_82057);
          real r20A4#1 = RMul(realLit20A2,r20A3);
          real r20A5#1 = RAdd(r20A1,r20A4);
          real r20A6#2 = TensorIndex<tensor[2,2],[0,1]>(probe_l_82057);
          real r20A7#1 = RMul(realLit209F,r20A6);
          real r20A8#2 = TensorIndex<tensor[2,2],[1,1]>(probe_l_82057);
          real r20A9#1 = RMul(realLit20A2,r20A8);
          real r20AA#1 = RAdd(r20A7,r20A9);
          tensor[2] tensor20AB#1 = <tensor[2]>[r20A5,r20AA];
          real realLit20AC#2 = 0.1e1;
          real r20AD#1 = RMul(realLit20AC,r20A0);
          real r20AE#1 = RMul(realLit209F,r20A3);
          real r20AF#1 = RAdd(r20AD,r20AE);
          real r20B0#1 = RMul(realLit20AC,r20A6);
          real r20B1#1 = RMul(realLit209F,r20A8);
          real r20B2#1 = RAdd(r20B0,r20B1);
          tensor[2] tensor20B3#1 = <tensor[2]>[r20AF,r20B2];
          tensor[2,2] op1_e3_l_9209E#4 = <tensor[2,2]>[tensor20AB,tensor20B3];
          real r20CC#1 = TensorIndex<tensor[3,2],[0,0]>(femDofs200B);
          real r20CD#2 = TensorIndex<tensor[2,3],[0,0]>(basisResult203F);
          real r20CE#1 = RMul(r20CC,r20CD);
          real r20CF#1 = TensorIndex<tensor[3,2],[1,0]>(femDofs200B);
          real r20D0#2 = TensorIndex<tensor[2,3],[0,1]>(basisResult203F);
          real r20D1#1 = RMul(r20CF,r20D0);
          real r20D2#1 = TensorIndex<tensor[3,2],[2,0]>(femDofs200B);
          real r20D3#2 = TensorIndex<tensor[2,3],[0,2]>(basisResult203F);
          real r20D4#1 = RMul(r20D2,r20D3);
          real r20D5#1 = RAdd(r20CE,r20D1);
          real r20D6#1 = RAdd(r20D5,r20D4);
          real r20D7#1 = TensorIndex<tensor[3,2],[0,1]>(femDofs200B);
          real r20D8#1 = RMul(r20D7,r20CD);
          real r20D9#1 = TensorIndex<tensor[3,2],[1,1]>(femDofs200B);
          real r20DA#1 = RMul(r20D9,r20D0);
          real r20DB#1 = TensorIndex<tensor[3,2],[2,1]>(femDofs200B);
          real r20DC#1 = RMul(r20DB,r20D3);
          real r20DD#1 = RAdd(r20D8,r20DA);
          real r20DE#1 = RAdd(r20DD,r20DC);
          tensor[2] probe_l_1020CB#1 = <tensor[2]>[r20D6,r20DE];
          real r20F5#1 = TensorIndex<tensor[3,2],[0,0]>(femDofs200B);
          real r20F6#2 = TensorIndex<tensor[2,3],[1,0]>(basisResult203F);
          real r20F7#1 = RMul(r20F5,r20F6);
          real r20F8#1 = TensorIndex<tensor[3,2],[1,0]>(femDofs200B);
          real r20F9#2 = TensorIndex<tensor[2,3],[1,1]>(basisResult203F);
          real r20FA#1 = RMul(r20F8,r20F9);
          real r20FB#1 = TensorIndex<tensor[3,2],[2,0]>(femDofs200B);
          real r20FC#2 = TensorIndex<tensor[2,3],[1,2]>(basisResult203F);
          real r20FD#1 = RMul(r20FB,r20FC);
          real r20FE#1 = RAdd(r20F7,r20FA);
          real r20FF#1 = RAdd(r20FE,r20FD);
          real r2100#1 = TensorIndex<tensor[3,2],[0,1]>(femDofs200B);
          real r2101#1 = RMul(r2100,r20F6);
          real r2102#1 = TensorIndex<tensor[3,2],[1,1]>(femDofs200B);
          real r2103#1 = RMul(r2102,r20F9);
          real r2104#1 = TensorIndex<tensor[3,2],[2,1]>(femDofs200B);
          real r2105#1 = RMul(r2104,r20FC);
          real r2106#1 = RAdd(r2101,r2103);
          real r2107#1 = RAdd(r2106,r2105);
          tensor[2] probe_l_1120F4#2 = <tensor[2]>[r20FF,r2107];
          real realLit211E#2 = 0.e0;
          real r211F#2 = TensorIndex<tensor[2],[0]>(probe_l_1120F4);
          real r2120#1 = RMul(realLit211E,r211F);
          real realLit2121#1 = 0.1e1;
          real r2122#2 = TensorIndex<tensor[2],[1]>(probe_l_1120F4);
          real r2123#1 = RMul(realLit2121,r2122);
          real r2124#1 = RAdd(r2120,r2123);
          real realLit2125#1 = -0.1e1;
          real r2126#1 = RMul(realLit2125,r211F);
          real r2127#1 = RMul(realLit211E,r2122);
          real r2128#1 = RAdd(r2126,r2127);
          tensor[2] op1_e3_l_12211D#1 = <tensor[2]>[r2124,r2128];
          real realLit2137#4 = 0.e0;
          real r2138#2 = TensorIndex<tensor[2,2],[0,0]>(op1_e3_l_9209E);
          real r2139#1 = RMul(realLit2137,r2138);
          real realLit213A#2 = -0.1e1;
          real r213B#2 = TensorIndex<tensor[2,2],[0,1]>(op1_e3_l_9209E);
          real r213C#1 = RMul(realLit213A,r213B);
          real r213D#1 = RAdd(r2139,r213C);
          real r213E#2 = TensorIndex<tensor[2,2],[1,0]>(op1_e3_l_9209E);
          real r213F#1 = RMul(realLit2137,r213E);
          real r2140#2 = TensorIndex<tensor[2,2],[1,1]>(op1_e3_l_9209E);
          real r2141#1 = RMul(realLit213A,r2140);
          real r2142#1 = RAdd(r213F,r2141);
          tensor[2] tensor2143#1 = <tensor[2]>[r213D,r2142];
          real realLit2144#2 = 0.1e1;
          real r2145#1 = RMul(realLit2144,r2138);
          real r2146#1 = RMul(realLit2137,r213B);
          real r2147#1 = RAdd(r2145,r2146);
          real r2148#1 = RMul(realLit2144,r213E);
          real r2149#1 = RMul(realLit2137,r2140);
          real r214A#1 = RAdd(r2148,r2149);
          tensor[2] tensor214B#1 = <tensor[2]>[r2147,r214A];
          tensor[2,2] op1_e3_l_132136#4 = <tensor[2,2]>[tensor2143,tensor214B];
          real op1_e3_l_142163#4 = VDot<2>(probe_l_1020CB,op1_e3_l_12211D);
          real r2167#1 = TensorIndex<tensor[2,2],[0,0]>(op1_e3_l_132136);
          real r2168#1 = RDiv(r2167,op1_e3_l_142163);
          real r2169#1 = TensorIndex<tensor[2,2],[0,1]>(op1_e3_l_132136);
          real r216A#1 = RDiv(r2169,op1_e3_l_142163);
          tensor[2] tensor216B#1 = <tensor[2]>[r2168,r216A];
          real r216C#1 = TensorIndex<tensor[2,2],[1,0]>(op1_e3_l_132136);
          real r216D#1 = RDiv(r216C,op1_e3_l_142163);
          real r216E#1 = TensorIndex<tensor[2,2],[1,1]>(op1_e3_l_132136);
          real r216F#1 = RDiv(r216E,op1_e3_l_142163);
          tensor[2] tensor2170#1 = <tensor[2]>[r216D,r216F];
          tensor[2,2] op1_e3_l_152166#4 = <tensor[2,2]>[tensor216B,tensor2170];
          real r217E#2 = TensorIndex<tensor[2],[0]>(compositionl1FE6);
          real r217F#1 = TensorIndex<tensor[2,2],[0,0]>(op1_e3_l_152166);
          real r2180#1 = RMul(r217E,r217F);
          real r2181#2 = TensorIndex<tensor[2],[1]>(compositionl1FE6);
          real r2182#1 = TensorIndex<tensor[2,2],[1,0]>(op1_e3_l_152166);
          real r2183#1 = RMul(r2181,r2182);
          real r2184#1 = RAdd(r2180,r2183);
          real r2185#1 = TensorIndex<tensor[2,2],[0,1]>(op1_e3_l_152166);
          real r2186#1 = RMul(r217E,r2185);
          real r2187#1 = TensorIndex<tensor[2,2],[1,1]>(op1_e3_l_152166);
          real r2188#1 = RMul(r2181,r2187);
          real r2189#1 = RAdd(r2186,r2188);
          tensor[2] grad217D#1 = <tensor[2]>[r2184,r2189];
          goto JOIN219A
        JOIN219A:  preds = [ASSIGN2197,COND1F93]
          tensor[2] grad2198#3 = phi(grad217D,grad1F91)
          real out2199#3 = phi(fmVal1F58,out1ABB)
          string _t219B#1 = "Out val:";
          Print<[string,real,string]>(_t219B,out2199,_t1AC9);
          string _t219E#1 = "Grad val:";
          Print<[string,tensor[2],string]>(_t219E,grad2198,_t1AC9);
          real _t21A1#6 = 0.1e1;
          tensor[3] mcol21A3#1 = <tensor[3]>[_t21A1,_t21A1,_t21A1];
          bool _t21A5#1 = NEQ<real>(cmin1A91,cmax1A93);
          if _t21A5 then goto ASSIGN21A9 else goto JOIN2229
        ASSIGN21A9:  preds = [COND21A7]
          real _t21A8#2 = -0.1e1;
          real op1_e3_l_521AA#1 = RSub(out2199,cmin1A91);
          real op1_e3_l_621AD#1 = RSub(cmax1A93,cmin1A91);
          real op1_e3_l_721B0#1 = RDiv(op1_e3_l_521AA,op1_e3_l_621AD);
          real op1_e3_l_821B3#1 = RSub(_t21A1,_t21A8);
          real op1_e3_l_921B6#1 = RMul(op1_e3_l_721B0,op1_e3_l_821B3);
          real _t21B9#1 = RAdd(_t21A8,op1_e3_l_921B6);
          real Mtransform21BC#1 = Transform<IMAGE1D<double[3]>>(cmap1A7B);
          real MxPos21BE#1 = RMul(Mtransform21BC,_t21B9);
          real Ttranslate21C1#1 = Translate<IMAGE1D<double[3]>>(cmap1A7B);
          real imgPos21C3#2 = RAdd(MxPos21BE,Ttranslate21C1);
          real nd21C6#2 = Floor<1>(imgPos21C3);
          real f21C8#2 = RSub(imgPos21C3,nd21C6);
          int n21CB#1 = RealToInt<1>(nd21C6);
          int idx21CD#5 = n21CB;
          bool isInside21CF#1 = IndexInside<IMAGE1D<double[3]>,2>(idx21CD,cmap1A7B);
          if isInside21CF then goto ASSIGN21E9 else goto ASSIGN2345
        ASSIGN21E9:  preds = [COND21D1]
          int ilit21D3#1 = 0;
          int addRes21D4#1 = IAdd(idx21CD,ilit21D3);
          int stride21D5#2 = 3;
          int offp21D6#3 = IMul(stride21D5,addRes21D4);
          real v0_21D7#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap1A7B,offp21D6);
          int ilit21D8#3 = 1;
          int addRes21D9#1 = IAdd(idx21CD,ilit21D8);
          int offp21DA#3 = IMul(stride21D5,addRes21D9);
          real v1_21DB#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap1A7B,offp21DA);
          tensor[2] v_21DC#1 = <tensor[2]>[v0_21D7,v1_21DB];
          int offp21DD#1 = IAdd(offp21D6,ilit21D8);
          real v0_21DE#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap1A7B,offp21DD);
          int offp21DF#1 = IAdd(offp21DA,ilit21D8);
          real v1_21E0#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap1A7B,offp21DF);
          tensor[2] v_21E1#1 = <tensor[2]>[v0_21DE,v1_21E0];
          int offset21E2#2 = 2;
          int offp21E3#1 = IAdd(offp21D6,offset21E2);
          real v0_21E4#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap1A7B,offp21E3);
          int offp21E5#1 = IAdd(offp21DA,offset21E2);
          real v1_21E6#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap1A7B,offp21E5);
          tensor[2] v_21E7#1 = <tensor[2]>[v0_21E4,v1_21E6];
          tensor[3,2] voxels21E8#1 = <tensor[3,2]>[v_21DC,v_21E1,v_21E7];
          tensor[3,2] ldvox21D2#1 = voxels21E8;
          goto JOIN2202
        JOIN2202:  preds = [ASSIGN21FF,ASSIGN235D]
          tensor[3,2] ldvox2200#3 = phi(ldvox21D2,ldvox2201)
          real rlit2204#1 = 0.1e1;
          real idx2205#1 = RSub(f21C8,rlit2204);
          tensor[2] kernX_2203#1 = <tensor[2]>[f21C8,idx2205];
          real _f220E#1 = 0.1e1;
          real _f220F#1 = 0.1e1;
          tensor[2] a0220A#1 = <tensor[2]>[_f220E,_f220F];
          real _f220C#1 = -0.1e1;
          real _f220D#1 = 0.1e1;
          tensor[2] a1220B#1 = <tensor[2]>[_f220C,_f220D];
          tensor[2] prod12210#1 = VMul<2>(kernX_2203,a1220B);
          tensor[2] kevalX_d0_2209#3 = VAdd<2>(a0220A,prod12210);
          tensor[2] projIx221A#1 = ProjectLast<tensor[3,2],[0]>(ldvox2200);
          real vdot221B#1 = VDot<2>(projIx221A,kevalX_d0_2209);
          tensor[2] projIx221C#1 = ProjectLast<tensor[3,2],[1]>(ldvox2200);
          real vdot221D#1 = VDot<2>(projIx221C,kevalX_d0_2209);
          tensor[2] projIx221E#1 = ProjectLast<tensor[3,2],[2]>(ldvox2200);
          real vdot221F#1 = VDot<2>(projIx221E,kevalX_d0_2209);
          tensor[3] mcol2219#1 = <tensor[3]>[vdot221B,vdot221D,vdot221F];
          goto JOIN2229
        JOIN2229:  preds = [ASSIGN2227,COND21A7]
          tensor[3] mcol2228#7 = phi(mcol2219,mcol21A3)
          if light1A95 then goto ASSIGN222C else goto ASSIGN2327
        ASSIGN222C:  preds = [COND222A]
          real _t222B#1 = VIndex<2,0>(grad2198);
          real _t222D#1 = VIndex<2,1>(grad2198);
          real _t222F#1 = -0.1e1;
          tensor[3] _t2231#4 = <tensor[3]>[_t222B,_t222D,_t222F];
          real op1_e3_l_32233#1 = VDot<3>(_t2231,_t2231);
          real op1_e3_l_42236#1 = Sqrt(op1_e3_l_32233);
          real realLit223A#1 = 0.1e1;
          real op1_e3_l_52239#2 = RDiv(realLit223A,op1_e3_l_42236);
          real op1_e3_l_6223E#1 = VDot<3>(_t2231,L1A9F);
          real _t2241#1 = RMul(op1_e3_l_52239,op1_e3_l_6223E);
          real _t2244#1 = Max<real>(_t1F6D,_t2241);
          real op1_e3_l_102246#1 = VDot<3>(rayVec1AA3,rayVec1AA3);
          real op1_e3_l_112249#1 = Sqrt(op1_e3_l_102246);
          real realLit224D#1 = 0.1e1;
          real op1_e3_l_12224C#1 = RDiv(realLit224D,op1_e3_l_112249);
          tensor[3] op1_e3_l_132251#1 = VScale<3>(op1_e3_l_12224C,rayVec1AA3);
          tensor[3] op1_e3_l_142254#1 = VNeg<3>(op1_e3_l_132251);
          tensor[3] op1_e3_l_202257#3 = VAdd<3>(op1_e3_l_142254,L1A9F);
          real op1_e3_l_22225A#1 = VDot<3>(op1_e3_l_202257,op1_e3_l_202257);
          real op1_e3_l_23225D#1 = Sqrt(op1_e3_l_22225A);
          real realLit2261#1 = 0.1e1;
          real op1_e3_l_312260#1 = RDiv(realLit2261,op1_e3_l_23225D);
          real op1_e3_l_322265#1 = VDot<3>(_t2231,op1_e3_l_202257);
          real r2269#1 = RMul(op1_e3_l_52239,op1_e3_l_312260);
          real _t2268#1 = RMul(r2269,op1_e3_l_322265);
          real _t226D#1 = Max<real>(_t1F6D,_t2268);
          real _t226F#1 = MathFn<pow>(_t226D,phongSp1A9D);
          real op1_e3_l_962271#1 = RSub(cup1EE6,camNearVsp1AA5);
          real op1_e3_l_972274#1 = RSub(camFarVsp1AA7,camNearVsp1AA5);
          real op1_e3_l_982277#1 = RDiv(op1_e3_l_962271,op1_e3_l_972274);
          tensor[3] op1_e3_l_99227A#1 = VSub<3>(mcfar1A8F,mcnear1A8D);
          tensor[3] op1_e3_l_100227D#1 = VScale<3>(op1_e3_l_982277,op1_e3_l_99227A);
          tensor[3] op1_e3_l_1012280#6 = VAdd<3>(mcnear1A8D,op1_e3_l_100227D);
          tensor[3] op1_e3_l_1292283#1 = VScale<3>(phongKa1A97,mcol2228);
          real r2287#1 = TensorIndex<tensor[3],[0]>(mcol2228);
          real r2288#1 = TensorIndex<tensor[3],[0]>(op1_e3_l_1012280);
          real r2289#3 = RMul(_t2244,phongKd1A99);
          real r228A#1 = RMul(r2289,r2287);
          real r228B#1 = RMul(r228A,r2288);
          real r228C#1 = TensorIndex<tensor[3],[1]>(mcol2228);
          real r228D#1 = TensorIndex<tensor[3],[1]>(op1_e3_l_1012280);
          real r228E#1 = RMul(r2289,r228C);
          real r228F#1 = RMul(r228E,r228D);
          real r2290#1 = TensorIndex<tensor[3],[2]>(mcol2228);
          real r2291#1 = TensorIndex<tensor[3],[2]>(op1_e3_l_1012280);
          real r2292#1 = RMul(r2289,r2290);
          real r2293#1 = RMul(r2292,r2291);
          tensor[3] op1_e3_l_1302286#1 = <tensor[3]>[r228B,r228F,r2293];
          real r22A4#1 = TensorIndex<tensor[3],[0]>(op1_e3_l_1012280);
          real r22A5#3 = RMul(_t226F,phongKs1A9B);
          real r22A6#1 = RMul(r22A5,r22A4);
          real r22A7#1 = TensorIndex<tensor[3],[1]>(op1_e3_l_1012280);
          real r22A8#1 = RMul(r22A5,r22A7);
          real r22A9#1 = TensorIndex<tensor[3],[2]>(op1_e3_l_1012280);
          real r22AA#1 = RMul(r22A5,r22A9);
          tensor[3] op1_e3_l_13122A3#1 = <tensor[3]>[r22A6,r22A8,r22AA];
          tensor[3] v22B5#1 = VAdd<3>(op1_e3_l_1292283,op1_e3_l_1302286);
          tensor[3] fin22B4#3 = VAdd<3>(v22B5,op1_e3_l_13122A3);
          real _t22B9#1 = VIndex<3,0>(fin22B4);
          real _t22BB#1 = VIndex<3,1>(fin22B4);
          real _t22BD#1 = VIndex<3,2>(fin22B4);
          tensor[4] rgba22BF#1 = <tensor[4]>[_t22B9,_t22BB,_t22BD,_t21A1];
          goto JOIN22C3
        JOIN22C3:  preds = [ASSIGN22C0,ASSIGN232C]
          tensor[4] rgba22C1#1 = phi(rgba22BF,rgba22C2)
          tensor[3] op1_e3_l_5322C4#1 = VScale<3>(cup1EE6,rayVec1AA3);
          tensor[3] _t22C7#1 = VAdd<3>(op1_e3_l_5322C4,rayOrig1AA1);
          tensor[3][1] _t22CA#1 = <tensor[3][1]>{_t22C7};
          tensor[3][] _t22CC#1 = MkDynamic<tensor[3],1>(_t22CA);
          self.intersectionItter = intersectionItter1F6B;
          self.s = s1F83;
          self.e = e1F82;
          self.out = out2199;
          self.rgba = rgba22C1;
          self.locs = _t22CC;
          stabilize
          goto JOIN22D8
        JOIN22D8:  preds = [*STABILIZE22D4,COND1F90]
          tensor[3][] locs22D5#3 = phi(locs1ABF)
          tensor[4] rgba22D6#3 = phi(rgba1ABD)
          real out22D7#3 = phi(out1ABB)
          int _t22D9#1 = 32;
          bool _t22DB#1 = GT<int>(intersectionItter1F6B,_t22D9);
          if _t22DB then goto ASSIGN22DF else goto ASSIGN2324
        ASSIGN22DF:  preds = [COND22DD]
          int itter22DE#4 = IAdd(itter1AAD,_t1F69);
          bool _t22E0#1 = GTE<int>(itter22DE,len1AAB);
          if _t22E0 then goto ASSIGN22E4 else goto JOIN22F1
        ASSIGN22E4:  preds = [COND22E2]
          string _t22E3#1 = "No intersection found\n";
          Print<[string]>(_t22E3);
          string _t22E6#1 = "Fin pixel=============================\n";
          Print<[string]>(_t22E6);
          self.itter = itter22DE;
          self.intersectionItter = _t1F7D;
          self.s = s1F83;
          self.e = e1F82;
          self.out = out22D7;
          self.rgba = rgba22D6;
          self.locs = locs22D5;
          stabilize
          goto JOIN22F1
        JOIN22F1:  preds = [*STABILIZE22F0,COND22E2]
          int _t22F2#2 = IAdd(offset1AA9,itter22DE);
          tensor[2] interval22F4#3 = Subscript<tensor[2][]>(times1A89,_t22F2);
          int _t22F6#1 = Subscript<int[]>(cells1A8B,_t22F2);
          femData:MeshCell cc22F8#2 = Subscript<femData:MeshCell[]>(0cell_a1A81,_t22F6);
          real s22FA#1 = VIndex<2,0>(interval22F4);
          real e22FC#1 = VIndex<2,1>(interval22F4);
          int _t22FE#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc22F8);
          femData:FuncCell _t2300#1 = LoadFem<femData:FuncCell>(c1A83,_t22FE);
          string _t2302#1 = "++++++++++++++++Next interval!+++++++++++++++++++\n";
          Print<[string]>(_t2302);
          self.itter = itter22DE;
          self.intersectionItter = _t1F7D;
          self.interval = interval22F4;
          self.s = s22FA;
          self.e = e22FC;
          self.cc = cc22F8;
          self.fc = _t2300;
          self.out = out22D7;
          self.rgba = rgba22D6;
          self.locs = locs22D5;
          active
          goto JOIN2317
        JOIN2317:  preds = [*ACTIVE230F,MASSIGN2325]
          femData:FuncCell fc2310#1 = phi(fc1AB9)
          femData:MeshCell cc2311#1 = phi(cc1AB7)
          real e2312#1 = phi(e1F82)
          real s2313#1 = phi(s1F83)
          tensor[2] interval2314#1 = phi(interval1AB1)
          int intersectionItter2315#1 = phi(intersectionItter1F6B)
          int itter2316#1 = phi(itter1AAD)
          self.itter = itter2316;
          self.intersectionItter = intersectionItter2315;
          self.interval = interval2314;
          self.s = s2313;
          self.e = e2312;
          self.cc = cc2311;
          self.fc = fc2310;
          self.out = out22D7;
          self.rgba = rgba22D6;
          self.locs = locs22D5;
          active
        ASSIGN2324:  preds = [COND22DD]
          string _t2323#1 = "---------------\n";
          Print<[string]>(_t2323);
          goto JOIN2317
        ASSIGN2327:  preds = [COND222A]
          real _t2326#1 = VIndex<3,0>(mcol2228);
          real _t2328#1 = VIndex<3,1>(mcol2228);
          real _t232A#1 = VIndex<3,2>(mcol2228);
          tensor[4] rgba22C2#1 = <tensor[4]>[_t2326,_t2328,_t232A,_t21A1];
          goto JOIN22C3
        ASSIGN2345:  preds = [COND21D1]
          int ilit232D#1 = 0;
          int addRes232E#1 = IAdd(idx21CD,ilit232D);
          int ix232F#1 = ControlIndex<IMAGE1D<double[3]>,clamp,0>(cmap1A7B,addRes232E);
          int stride2330#2 = 3;
          int offp2331#3 = IMul(stride2330,ix232F);
          real v0_2332#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap1A7B,offp2331);
          int ilit2333#3 = 1;
          int addRes2334#1 = IAdd(idx21CD,ilit2333);
          int ix2335#1 = ControlIndex<IMAGE1D<double[3]>,clamp,0>(cmap1A7B,addRes2334);
          int offp2336#3 = IMul(stride2330,ix2335);
          real v1_2337#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap1A7B,offp2336);
          tensor[2] v_2338#1 = <tensor[2]>[v0_2332,v1_2337];
          int offp2339#1 = IAdd(offp2331,ilit2333);
          real v0_233A#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap1A7B,offp2339);
          int offp233B#1 = IAdd(offp2336,ilit2333);
          real v1_233C#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap1A7B,offp233B);
          tensor[2] v_233D#1 = <tensor[2]>[v0_233A,v1_233C];
          int offset233E#2 = 2;
          int offp233F#1 = IAdd(offp2331,offset233E);
          real v0_2340#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap1A7B,offp233F);
          int offp2341#1 = IAdd(offp2336,offset233E);
          real v1_2342#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap1A7B,offp2341);
          tensor[2] v_2343#1 = <tensor[2]>[v0_2340,v1_2342];
          tensor[3,2] voxels2344#1 = <tensor[3,2]>[v_2338,v_233D,v_2343];
          tensor[3,2] ldvox2201#1 = voxels2344;
          goto JOIN2202
        COND235E:  preds = [COND1F81]
          if _t1F6F then goto JOIN2361 else goto ASSIGN2373
        JOIN2361:  preds = [COND235E,JOIN2377]
          int _t235F#1 = phi(_t1F69,_t2360)
          if _t1F75 then goto JOIN2365 else goto ASSIGN236D
        JOIN2365:  preds = [COND2362,JOIN2371]
          int _t2363#1 = phi(_t1F69,_t2364)
          int _t2366#1 = IMul(_t235F,_t2363);
          bool _t2368#1 = GT<int>(_t2366,_t1F7D);
          if _t2368 then goto JOIN236B else goto JOIN236B
        JOIN236B:  preds = [COND236A,COND236A]
          real s1F84#1 = phi(cup1EE6,s1ED8)
          goto JOIN1F85
        ASSIGN236D:  preds = [COND2362]
          bool _t236C#1 = LT<real>(fm1F61,_t1F6D);
          if _t236C then goto ASSIGN2370 else goto JOIN2371
        ASSIGN2370:  preds = [COND236E]
          int _t236F#1 = -1;
          goto JOIN2371
        JOIN2371:  preds = [ASSIGN2370,COND236E]
          int _t2364#1 = phi(_t236F,_t1F7D)
          goto JOIN2365
        ASSIGN2373:  preds = [COND235E]
          bool _t2372#1 = LT<real>(fa1E41,_t1F6D);
          if _t2372 then goto ASSIGN2376 else goto JOIN2377
        ASSIGN2376:  preds = [COND2374]
          int _t2375#1 = -1;
          goto JOIN2377
        JOIN2377:  preds = [ASSIGN2376,COND2374]
          int _t2360#1 = phi(_t2375,_t1F7D)
          goto JOIN2361
        ASSIGN2379:  preds = [COND1F77]
          bool _t2378#1 = LT<real>(fm1F61,_t1F6D);
          if _t2378 then goto ASSIGN237C else goto ASSIGN237F
        ASSIGN237C:  preds = [COND237A]
          int _t237B#1 = -1;
          goto JOIN237E
        JOIN237E:  preds = [ASSIGN237C,ASSIGN237F]
          int _t1F79#1 = phi(_t237B,_t237D)
          goto JOIN1F7A
        ASSIGN237F:  preds = [COND237A]
          int _t237D#1 = 0;
          goto JOIN237E
        ASSIGN2381:  preds = [COND1F71]
          bool _t2380#1 = LT<real>(fa1E41,_t1F6D);
          if _t2380 then goto ASSIGN2384 else goto ASSIGN2387
        ASSIGN2384:  preds = [COND2382]
          int _t2383#1 = -1;
          goto JOIN2386
        JOIN2386:  preds = [ASSIGN2384,ASSIGN2387]
          int _t1F73#1 = phi(_t2383,_t2385)
          goto JOIN1F74
        ASSIGN2387:  preds = [COND2382]
          int _t2385#1 = 0;
          goto JOIN2386
    end update
  end ray
## initial strand creation
  GRID(2)
    ENTRY2388:  preds = []
      int iresU2389#1 = globals.iresU1774;
      int iresV238B#1 = globals.iresV1775;
      int _t238D#2 = 0;
      int _t238F#2 = 1;
      int _t2391#1 = ISub(iresU2389,_t238F);
      int[] _t2393#1 = Range(_t238D,_t2391);
    FOREACH2396:  preds = [ASSIGN2394,NEXT239F]
      foreach (vi2395 in _t2393) on exit goto RETURN23A0
      int _t2397#1 = ISub(iresV238B,_t238F);
      int[] _t2399#1 = Range(_t238D,_t2397);
    FOREACH239C:  preds = [ASSIGN239A,NEXT239E]
      foreach (ui239B in _t2399) on exit goto NEXT239F
      new ray(ui239B,vi2395);
      goto FOREACH239C
    NEXT239F:  preds = [FOREACH239C]
      goto FOREACH2396
    RETURN23A0:  preds = [FOREACH2396]
      return
#### end program ####
##### low-ir: after contraction(1) ####
## properties
  GlobalInit StrandArray HasStartMethod ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[]) HasInputs HasGlobals
## globals
  input isoval176E (isoval) = <default>
  input thick176F (thick) = <default>
  input camEye1770 (camEye) = <default>
  input camAt1771 (camAt) = <default>
  input camUp1772 (camUp) = <default>
  input camFOV1773 (camFOV) = <default>
  input iresU1774 (iresU) = <default>
  input iresV1775 (iresV) = <default>
  input camNear1776 (camNear) = <default>
  input camFar1777 (camFar) = <default>
  input refStep1778 (refStep) = <default>
  input rayStep1779 (rayStep) = <default>
  input a177A (a) = <no-default>
  input 0b046F_intermedateGlobal177B (b) = <no-default>
  input 0c0471_intermedateGlobal177C (c) = <no-default>
  input zeroEps177D (zeroEps) = <default>
  input intervalEps177E (intervalEps) = <default>
  input indecies177F (indecies) = <no-default>
  input times1780 (times) = <no-default>
  input cells1781 (cells) = <no-default>
  input mcnear1782 (mcnear) = <default>
  input mcfar1783 (mcfar) = <default>
  input cmap1784 (cmap) = image("/home/teocollin/gitcode/diderot/tests/lipRay/find/cmap.nrrd")
  input cmin1785 (cmin) = <default>
  input cmax1786 (cmax) = <default>
  input light1787 (light) = <default>
  input phongKa1788 (phongKa) = <default>
  input phongKd1789 (phongKd) = <default>
  input phongKs178A (phongKs) = <default>
  input phongSp178B (phongSp) = <default>
  input maxAlpha178C (maxAlpha) = <default>
  input lightVsp178D (lightVsp) = <default>
  input debug178E (debug) = <default>
  input debugU178F (debugU) = <default>
  input debugV1790 (debugV) = <default>
  global femData:MeshCell[] 0cell_a1791
  global femData:FemFunc c1792
  global real camNearVsp1793
  global real camFarVsp1794
  global tensor[3] camN1795
  global tensor[3] camU1796
  global tensor[3] camV1797
  global real camVmax1798
  global real camUmax1799
  global tensor[3] L179A
## functions
  function femData:MeshPos _0A92_msh_newtonInverse1AF4 (tensor[2] pos1AF5#3, int cellInt1AF6#2, femData:Mesh mesh1AF7#12) {
    ENTRY1AF8:  preds = []
      real _t1AF9#2 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
      tensor[2] xn1AFB#1 = <tensor[2]>[_t1AF9,_t1AF9];
      int _t1AFD#1 = 0;
      int _t1AFF#1 = 16;
      int[] _t1B01#1 = Range(_t1AFD,_t1AFF);
    FOREACH1B04:  preds = [ASSIGN1B02,NEXT1D5B]
      foreach (itter1B03 in _t1B01) on exit goto ASSIGN1D60
        tensor[2] xn1C7B#3 = phi(xn1AFB,xn1CEF)
      int ilit1B06#1 = 3;
      int mulRes1B07#3 = IMul(cellInt1AF6,ilit1B06);
      int addRes1B09#1 = mulRes1B07;
      int idx1B0A#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(mesh1AF7,addRes1B09);
      int ilit1B0B#1 = 1;
      int addRes1B0C#1 = IAdd(mulRes1B07,ilit1B0B);
      int idx1B0D#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(mesh1AF7,addRes1B0C);
      int ilit1B0E#1 = 2;
      int addRes1B0F#1 = IAdd(mulRes1B07,ilit1B0E);
      int idx1B10#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(mesh1AF7,addRes1B0F);
      int ilit1B21#3 = 2;
      int idx1B22#1 = idx1B0A;
      int mulRes1B23#2 = IMul(ilit1B21,idx1B22);
      int addRes1B24#1 = mulRes1B23;
      int ilit1B25#3 = 1;
      int addRes1B26#1 = IAdd(ilit1B25,mulRes1B23);
      real dof_load1B27#5 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh1AF7,addRes1B24);
      real dof_load1B28#5 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh1AF7,addRes1B26);
      int idx1B2A#1 = idx1B0D;
      int mulRes1B2B#2 = IMul(ilit1B21,idx1B2A);
      int addRes1B2C#1 = mulRes1B2B;
      int addRes1B2D#1 = IAdd(ilit1B25,mulRes1B2B);
      real dof_load1B2E#5 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh1AF7,addRes1B2C);
      real dof_load1B2F#5 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh1AF7,addRes1B2D);
      int idx1B31#1 = idx1B10;
      int mulRes1B32#2 = IMul(ilit1B21,idx1B31);
      int addRes1B33#1 = mulRes1B32;
      int addRes1B34#1 = IAdd(ilit1B25,mulRes1B32);
      real dof_load1B35#5 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh1AF7,addRes1B33);
      real dof_load1B36#5 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh1AF7,addRes1B34);
      real coeff1B56#1 = -0.1e1;
      real one1B57#3 = 0.1e1;
      real prod1B58#2 = RMul(one1B57,one1B57);
      real basisEval1B59#4 = RMul(coeff1B56,prod1B58);
      real basisEval1B5A#4 = RMul(one1B57,prod1B58);
      real basisEval1B5B#4 = 0.e0;
      real r1B6C#2 = dof_load1B27;
      real r1B6D#2 = basisEval1B59;
      real r1B6E#1 = RMul(r1B6C,r1B6D);
      real r1B6F#2 = dof_load1B2E;
      real r1B70#2 = basisEval1B5A;
      real r1B71#1 = RMul(r1B6F,r1B70);
      real r1B72#2 = dof_load1B35;
      real r1B73#2 = basisEval1B5B;
      real r1B74#1 = RMul(r1B72,r1B73);
      real r1B75#1 = RAdd(r1B6E,r1B71);
      real r1B76#1 = RAdd(r1B75,r1B74);
      real r1B77#2 = basisEval1B59;
      real r1B78#1 = RMul(r1B6C,r1B77);
      real r1B79#2 = basisEval1B5B;
      real r1B7A#1 = RMul(r1B6F,r1B79);
      real r1B7B#2 = basisEval1B5A;
      real r1B7C#1 = RMul(r1B72,r1B7B);
      real r1B7D#1 = RAdd(r1B78,r1B7A);
      real r1B7E#1 = RAdd(r1B7D,r1B7C);
      real r1B80#2 = dof_load1B28;
      real r1B81#1 = RMul(r1B80,r1B6D);
      real r1B82#2 = dof_load1B2F;
      real r1B83#1 = RMul(r1B82,r1B70);
      real r1B84#2 = dof_load1B36;
      real r1B85#1 = RMul(r1B84,r1B73);
      real r1B86#1 = RAdd(r1B81,r1B83);
      real r1B87#1 = RAdd(r1B86,r1B85);
      real r1B88#1 = RMul(r1B80,r1B77);
      real r1B89#1 = RMul(r1B82,r1B79);
      real r1B8A#1 = RMul(r1B84,r1B7B);
      real r1B8B#1 = RAdd(r1B88,r1B89);
      real r1B8C#1 = RAdd(r1B8B,r1B8A);
      real realLit1BB3#4 = 0.e0;
      real r1BB4#2 = r1B76;
      real r1BB5#1 = RMul(realLit1BB3,r1BB4);
      real realLit1BB6#2 = -0.1e1;
      real r1BB7#2 = r1B87;
      real r1BB8#1 = RMul(realLit1BB6,r1BB7);
      real r1BB9#1 = RAdd(r1BB5,r1BB8);
      real r1BBA#2 = r1B7E;
      real r1BBB#1 = RMul(realLit1BB3,r1BBA);
      real r1BBC#2 = r1B8C;
      real r1BBD#1 = RMul(realLit1BB6,r1BBC);
      real r1BBE#1 = RAdd(r1BBB,r1BBD);
      real realLit1BC0#2 = 0.1e1;
      real r1BC1#1 = RMul(realLit1BC0,r1BB4);
      real r1BC2#1 = RMul(realLit1BB3,r1BB7);
      real r1BC3#1 = RAdd(r1BC1,r1BC2);
      real r1BC4#1 = RMul(realLit1BC0,r1BBA);
      real r1BC5#1 = RMul(realLit1BB3,r1BBC);
      real r1BC6#1 = RAdd(r1BC4,r1BC5);
      real r1BE0#1 = dof_load1B27;
      real r1BE1#2 = basisEval1B59;
      real r1BE2#1 = RMul(r1BE0,r1BE1);
      real r1BE3#1 = dof_load1B2E;
      real r1BE4#2 = basisEval1B5A;
      real r1BE5#1 = RMul(r1BE3,r1BE4);
      real r1BE6#1 = dof_load1B35;
      real r1BE7#2 = basisEval1B5B;
      real r1BE8#1 = RMul(r1BE6,r1BE7);
      real r1BE9#1 = RAdd(r1BE2,r1BE5);
      real r1BEA#1 = RAdd(r1BE9,r1BE8);
      real r1BEB#1 = dof_load1B28;
      real r1BEC#1 = RMul(r1BEB,r1BE1);
      real r1BED#1 = dof_load1B2F;
      real r1BEE#1 = RMul(r1BED,r1BE4);
      real r1BEF#1 = dof_load1B36;
      real r1BF0#1 = RMul(r1BEF,r1BE7);
      real r1BF1#1 = RAdd(r1BEC,r1BEE);
      real r1BF2#1 = RAdd(r1BF1,r1BF0);
      tensor[2] probe_l_121BDF#1 = <tensor[2]>[r1BEA,r1BF2];
      real r1C09#1 = dof_load1B27;
      real r1C0A#2 = basisEval1B59;
      real r1C0B#1 = RMul(r1C09,r1C0A);
      real r1C0C#1 = dof_load1B2E;
      real r1C0D#2 = basisEval1B5B;
      real r1C0E#1 = RMul(r1C0C,r1C0D);
      real r1C0F#1 = dof_load1B35;
      real r1C10#2 = basisEval1B5A;
      real r1C11#1 = RMul(r1C0F,r1C10);
      real r1C12#1 = RAdd(r1C0B,r1C0E);
      real r1C13#1 = RAdd(r1C12,r1C11);
      real r1C14#1 = dof_load1B28;
      real r1C15#1 = RMul(r1C14,r1C0A);
      real r1C16#1 = dof_load1B2F;
      real r1C17#1 = RMul(r1C16,r1C0D);
      real r1C18#1 = dof_load1B36;
      real r1C19#1 = RMul(r1C18,r1C10);
      real r1C1A#1 = RAdd(r1C15,r1C17);
      real r1C1B#1 = RAdd(r1C1A,r1C19);
      real realLit1C32#2 = 0.e0;
      real r1C33#2 = r1C13;
      real r1C34#1 = RMul(realLit1C32,r1C33);
      real realLit1C35#1 = 0.1e1;
      real r1C36#2 = r1C1B;
      real r1C37#1 = RMul(realLit1C35,r1C36);
      real r1C38#1 = RAdd(r1C34,r1C37);
      real realLit1C39#1 = -0.1e1;
      real r1C3A#1 = RMul(realLit1C39,r1C33);
      real r1C3B#1 = RMul(realLit1C32,r1C36);
      real r1C3C#1 = RAdd(r1C3A,r1C3B);
      tensor[2] op1_e3_l_141C31#1 = <tensor[2]>[r1C38,r1C3C];
      real realLit1C4B#4 = 0.e0;
      real r1C4C#2 = r1BB9;
      real r1C4D#1 = RMul(realLit1C4B,r1C4C);
      real realLit1C4E#2 = -0.1e1;
      real r1C4F#2 = r1BBE;
      real r1C50#1 = RMul(realLit1C4E,r1C4F);
      real r1C51#1 = RAdd(r1C4D,r1C50);
      real r1C52#2 = r1BC3;
      real r1C53#1 = RMul(realLit1C4B,r1C52);
      real r1C54#2 = r1BC6;
      real r1C55#1 = RMul(realLit1C4E,r1C54);
      real r1C56#1 = RAdd(r1C53,r1C55);
      real realLit1C58#2 = 0.1e1;
      real r1C59#1 = RMul(realLit1C58,r1C4C);
      real r1C5A#1 = RMul(realLit1C4B,r1C4F);
      real r1C5B#1 = RAdd(r1C59,r1C5A);
      real r1C5C#1 = RMul(realLit1C58,r1C52);
      real r1C5D#1 = RMul(realLit1C4B,r1C54);
      real r1C5E#1 = RAdd(r1C5C,r1C5D);
      real op1_e3_l_161C77#4 = VDot<2>(probe_l_121BDF,op1_e3_l_141C31);
      real varAcc1C7C#1 = VIndex<2,0>(xn1C7B);
      real varAcc1C7D#1 = VIndex<2,1>(xn1C7B);
      real coeff1C7E#2 = -0.1e1;
      real iden1C7F#1 = varAcc1C7C;
      real one1C80#7 = 0.1e1;
      real prod1C81#2 = RMul(iden1C7F,one1C80);
      real iden1C82#1 = varAcc1C7D;
      real prod1C83#2 = RMul(one1C80,iden1C82);
      real prod1C84#1 = RMul(one1C80,one1C80);
      real mult1C85#1 = RMul(one1C80,prod1C84);
      real mult1C86#1 = RMul(coeff1C7E,prod1C83);
      real mult1C87#1 = RMul(coeff1C7E,prod1C81);
      real sum1C88#1 = RAdd(mult1C86,mult1C87);
      real sum1C89#1 = RAdd(mult1C85,sum1C88);
      real intermediate1C8A#2 = sum1C89;
      real basisEval1C8B#2 = RMul(one1C80,prod1C81);
      real basisEval1C8C#2 = RMul(one1C80,prod1C83);
      real r1CA2#1 = dof_load1B27;
      real r1CA3#2 = intermediate1C8A;
      real r1CA4#1 = RMul(r1CA2,r1CA3);
      real r1CA5#1 = dof_load1B2E;
      real r1CA6#2 = basisEval1C8B;
      real r1CA7#1 = RMul(r1CA5,r1CA6);
      real r1CA8#1 = dof_load1B35;
      real r1CA9#2 = basisEval1C8C;
      real r1CAA#1 = RMul(r1CA8,r1CA9);
      real r1CAB#1 = RAdd(r1CA4,r1CA7);
      real r1CAC#1 = RAdd(r1CAB,r1CAA);
      real r1CAD#1 = dof_load1B28;
      real r1CAE#1 = RMul(r1CAD,r1CA3);
      real r1CAF#1 = dof_load1B2F;
      real r1CB0#1 = RMul(r1CAF,r1CA6);
      real r1CB1#1 = dof_load1B36;
      real r1CB2#1 = RMul(r1CB1,r1CA9);
      real r1CB3#1 = RAdd(r1CAE,r1CB0);
      real r1CB4#1 = RAdd(r1CB3,r1CB2);
      tensor[2] probe_l_171CA1#1 = <tensor[2]>[r1CAC,r1CB4];
      real r1CCB#1 = r1C51;
      real r1CCC#1 = RDiv(r1CCB,op1_e3_l_161C77);
      real r1CCD#1 = r1C56;
      real r1CCE#1 = RDiv(r1CCD,op1_e3_l_161C77);
      tensor[2] tensor1CCF#2 = <tensor[2]>[r1CCC,r1CCE];
      real r1CD0#1 = r1C5B;
      real r1CD1#1 = RDiv(r1CD0,op1_e3_l_161C77);
      real r1CD2#1 = r1C5E;
      real r1CD3#1 = RDiv(r1CD2,op1_e3_l_161C77);
      tensor[2] tensor1CD4#2 = <tensor[2]>[r1CD1,r1CD3];
      tensor[2] op1_e3_l_191CE1#2 = VSub<2>(probe_l_171CA1,pos1AF5);
      tensor[2] projParam1CE5#1 = tensor1CCF;
      real vdot1CE6#1 = VDot<2>(projParam1CE5,op1_e3_l_191CE1);
      tensor[2] projParam1CE7#1 = tensor1CD4;
      real vdot1CE8#1 = VDot<2>(projParam1CE7,op1_e3_l_191CE1);
      tensor[2] op1_e3_l_201CE4#1 = <tensor[2]>[vdot1CE6,vdot1CE8];
      tensor[2] xn1CEF#4 = VSub<2>(xn1C7B,op1_e3_l_201CE4);
      real _t1CF2#2 = 0.1e-7;
      real _t1CF4#1 = RMul(_t1CF2,_t1CF2);
      real r1CF8#1 = dof_load1B27;
      real r1CF9#2 = intermediate1C8A;
      real r1CFA#1 = RMul(r1CF8,r1CF9);
      real r1CFB#1 = dof_load1B2E;
      real r1CFC#2 = basisEval1C8B;
      real r1CFD#1 = RMul(r1CFB,r1CFC);
      real r1CFE#1 = dof_load1B35;
      real r1CFF#2 = basisEval1C8C;
      real r1D00#1 = RMul(r1CFE,r1CFF);
      real r1D01#1 = RAdd(r1CFA,r1CFD);
      real r1D02#1 = RAdd(r1D01,r1D00);
      real r1D03#1 = dof_load1B28;
      real r1D04#1 = RMul(r1D03,r1CF9);
      real r1D05#1 = dof_load1B2F;
      real r1D06#1 = RMul(r1D05,r1CFC);
      real r1D07#1 = dof_load1B36;
      real r1D08#1 = RMul(r1D07,r1CFF);
      real r1D09#1 = RAdd(r1D04,r1D06);
      real r1D0A#1 = RAdd(r1D09,r1D08);
      tensor[2] probe_l_251CF7#1 = <tensor[2]>[r1D02,r1D0A];
      tensor[2] op1_e3_l_271D20#2 = VSub<2>(probe_l_251CF7,pos1AF5);
      tensor[2] projParam1D24#1 = tensor1CCF;
      real vdot1D25#1 = VDot<2>(projParam1D24,op1_e3_l_271D20);
      tensor[2] projParam1D26#1 = tensor1CD4;
      real vdot1D27#1 = VDot<2>(projParam1D26,op1_e3_l_271D20);
      tensor[2] op1_e3_l_381D23#2 = <tensor[2]>[vdot1D25,vdot1D27];
      real _t1D2E#1 = VDot<2>(op1_e3_l_381D23,op1_e3_l_381D23);
      bool _t1D31#1 = GTE<real>(_t1CF4,_t1D2E);
      if _t1D31 then goto ASSIGN1D35 else goto JOIN1D5A
    ASSIGN1D35:  preds = [COND1D33]
      real _t1D34#3 = 0.1e1;
      real _t1D36#3 = 0.1e-8;
      real _t1D38#1 = RAdd(_t1D34,_t1D36);
      tensor[2] _t1D3B#1 = <tensor[2]>[_t1D34,_t1D34];
      real _t1D3D#1 = VDot<2>(_t1D3B,xn1CEF);
      bool _t1D40#1 = GT<real>(_t1D38,_t1D3D);
      tensor[2] _t1D42#1 = <tensor[2]>[_t1D36,_t1D36];
      tensor[2] _t1D44#2 = VAdd<2>(_t1D42,xn1CEF);
      real _t1D47#1 = VIndex<2,0>(_t1D44);
      real _t1D49#2 = -0.e0;
      bool _t1D4B#1 = GT<real>(_t1D47,_t1D49);
      real _t1D4D#1 = VIndex<2,1>(_t1D44);
      bool _t1D4F#1 = GT<real>(_t1D4D,_t1D49);
      bool _t1D51#1 = BAnd(_t1D4B,_t1D4F);
      bool _t1D53#1 = BAnd(_t1D40,_t1D51);
      if _t1D53 then goto ASSIGN1D57 else goto ASSIGN1D5D
    ASSIGN1D57:  preds = [COND1D55]
      femData:MeshPos _t1D56#1 = ExtractFemItemN<[femData:Mesh,int,tensor[2],tensor[2]],femData:MeshPos,AllBuild(MeshPos),0000,"",[],int>(mesh1AF7,cellInt1AF6,xn1CEF,pos1AF5);
      return _t1D56
      goto JOIN1D59
    JOIN1D59:  preds = [*RETURN(_t1D56)1D58,*RETURN(_t1D5C)1D5E]
      goto JOIN1D5A
    JOIN1D5A:  preds = [*JOIN1D59,COND1D33]
      goto FOREACH1B04
    ASSIGN1D5D:  preds = [COND1D55]
      femData:MeshPos _t1D5C#1 = ExtractFemItemN<[femData:Mesh],femData:MeshPos,InvalidBuild(MeshPos),0000,"",[],int>(mesh1AF7);
      return _t1D5C
      goto JOIN1D59
    ASSIGN1D60:  preds = [FOREACH1B04]
      femData:MeshPos _t1D5F#1 = ExtractFemItemN<[femData:Mesh],femData:MeshPos,InvalidBuild(MeshPos),0000,"",[],int>(mesh1AF7);
      return _t1D5F
}
## input initialization
  ENTRY179D:  preds = []
    real isoval179E#1 = 0.2e0;
    globals.isoval176E = isoval179E;
    real thick17A1#1 = 0.7e-1;
    globals.thick176F = thick17A1;
    real _t17A4#2 = 0.3e1;
    real _t17A6#1 = -0.3e1;
    tensor[3] camEye17A8#1 = <tensor[3]>[_t17A4,_t17A6,_t17A4];
    globals.camEye1770 = camEye17A8;
    real _t17AB#5 = 0.5e0;
    tensor[3] camAt17AD#1 = <tensor[3]>[_t17AB,_t17AB,_t17AB];
    globals.camAt1771 = camAt17AD;
    real _t17B0#5 = 0.e0;
    real _t17B2#7 = 0.1e1;
    tensor[3] camUp17B4#1 = <tensor[3]>[_t17B0,_t17B0,_t17B2];
    globals.camUp1772 = camUp17B4;
    real camFOV17B7#1 = 0.137e2;
    globals.camFOV1773 = camFOV17B7;
    int iresU17BA#2 = 10;
    globals.iresU1774 = iresU17BA;
    globals.iresV1775 = iresU17BA;
    real camNear17BE#1 = -0.2e1;
    globals.camNear1776 = camNear17BE;
    real camFar17C1#1 = 0.5e1;
    globals.camFar1777 = camFar17C1;
    globals.refStep1778 = _t17B2;
    real rayStep17C5#1 = 0.1e-1;
    globals.rayStep1779 = rayStep17C5;
    real zeroEps17C8#2 = 0.1e-10;
    globals.zeroEps177D = zeroEps17C8;
    globals.intervalEps177E = zeroEps17C8;
    tensor[3] mcnear17CC#2 = <tensor[3]>[_t17B2,_t17B2,_t17B2];
    globals.mcnear1782 = mcnear17CC;
    globals.mcfar1783 = mcnear17CC;
    globals.cmin1785 = _t17B0;
    globals.cmax1786 = _t17B2;
    bool light17D2#2 = false;
    globals.light1787 = light17D2;
    globals.phongKa1788 = _t17AB;
    globals.phongKd1789 = _t17AB;
    globals.phongKs178A = _t17B0;
    real phongSp17D8#1 = 0.6e2;
    globals.phongSp178B = phongSp17D8;
    globals.maxAlpha178C = _t17B2;
    real _t17DC#1 = 0.369e1;
    real _t17DE#1 = 0.153e1;
    tensor[3] lightVsp17E0#1 = <tensor[3]>[_t17B0,_t17DC,_t17DE];
    globals.lightVsp178D = lightVsp17E0;
    globals.debug178E = light17D2;
    int debugU17E4#1 = 8;
    globals.debugU178F = debugU17E4;
    int debugV17E7#1 = 2;
    globals.debugV1790 = debugV17E7;
    return
## global-variable initialization
  ENTRY17EB:  preds = []
    tensor[3] camEye17EC#1 = globals.camEye1770;
    tensor[3] camAt17EE#1 = globals.camAt1771;
    tensor[3] camUp17F0#3 = globals.camUp1772;
    real camFOV17F2#1 = globals.camFOV1773;
    int iresU17F4#1 = globals.iresU1774;
    int iresV17F6#1 = globals.iresV1775;
    real camNear17F8#1 = globals.camNear1776;
    real camFar17FA#1 = globals.camFar1777;
    femData:Mesh a17FC#3 = globals.a177A;
    femData:Space 0b046F_intermedateGlobal17FE#1 = globals.0b046F_intermedateGlobal177B;
    femData:FemFunc 0c0471_intermedateGlobal1800#1 = globals.0c0471_intermedateGlobal177C;
    tensor[3] lightVsp1804#5 = globals.lightVsp178D;
    int _t1806#1 = 0;
    int _t1808#1 = 1;
    int _t180A#1 = ExtractFemItem<int,NumCell(Mesh)>(a17FC);
    int _t180C#1 = ISub(_t180A,_t1808);
    int[] _t180E#1 = Range(_t1806,_t180C);
    femData:MeshCell[] _t1810#1 = <femData:MeshCell[]>{};
  FOREACH1813:  preds = [ASSIGN1811,NEXT1819]
    foreach (_t1812 in _t180E) on exit goto GASSIGN181A
      femData:MeshCell[] _t1817#2 = phi(_t1810,_t1816)
    femData:MeshCell _t1814#1 = LoadFem<femData:MeshCell>(a17FC,_t1812);
    femData:MeshCell[] _t1816#1 = Append<femData:MeshCell>(_t1817,_t1814);
    goto FOREACH1813
  GASSIGN181A:  preds = [FOREACH1813]
    globals.0cell_a1791 = _t1817;
    femData:Space b181B#1 = LoadFem<femData:Space>(0b046F_intermedateGlobal17FE,a17FC);
    femData:FemFunc c181D#1 = LoadFem<femData:FemFunc>(0c0471_intermedateGlobal1800,b181B);
    globals.c1792 = c181D;
    tensor[3] op1_e3_l_31820#9 = VSub<3>(camAt17EE,camEye17EC);
    real op1_e3_l_51823#1 = VDot<3>(op1_e3_l_31820,op1_e3_l_31820);
    real op1_e3_l_61826#5 = Sqrt(op1_e3_l_51823);
    real camNearVsp1829#1 = RAdd(camNear17F8,op1_e3_l_61826);
    globals.camNearVsp1793 = camNearVsp1829;
    real camFarVsp182D#1 = RAdd(camFar17FA,op1_e3_l_61826);
    globals.camFarVsp1794 = camFarVsp182D;
    real realLit1832#1 = 0.1e1;
    real op1_e3_l_91831#6 = RDiv(realLit1832,op1_e3_l_61826);
    tensor[3] camN1836#4 = VScale<3>(op1_e3_l_91831,op1_e3_l_31820);
    globals.camN1795 = camN1836;
    real realLit183B#3 = 0.e0;
    real r183C#3 = TensorIndex<tensor[3],[0]>(camUp17F0);
    real r183D#3 = RMul(realLit183B,r183C);
    real r183E#3 = TensorIndex<tensor[3],[1]>(camUp17F0);
    real r183F#3 = RMul(realLit183B,r183E);
    real r1840#3 = TensorIndex<tensor[3],[2]>(camUp17F0);
    real r1841#5 = RMul(realLit183B,r1840);
    real r1842#3 = RAdd(r183D,r183F);
    real r1843#3 = RAdd(r1842,r1841);
    real realLit1844#3 = 0.1e1;
    real r1845#1 = RMul(realLit1844,r1840);
    real r1846#1 = RAdd(r1842,r1845);
    real realLit1847#3 = -0.1e1;
    real r1848#1 = RMul(realLit1847,r183E);
    real r1849#1 = RAdd(r183D,r1848);
    real r184A#1 = RAdd(r1849,r1841);
    tensor[3] tensor184B#1 = <tensor[3]>[r1843,r1846,r184A];
    real r184C#1 = RMul(realLit1847,r1840);
    real r184D#1 = RAdd(r1842,r184C);
    real r184E#1 = RMul(realLit1844,r183C);
    real r184F#1 = RAdd(r184E,r183F);
    real r1850#1 = RAdd(r184F,r1841);
    tensor[3] tensor1851#1 = <tensor[3]>[r184D,r1843,r1850];
    real r1852#1 = RMul(realLit1844,r183E);
    real r1853#1 = RAdd(r183D,r1852);
    real r1854#1 = RAdd(r1853,r1841);
    real r1855#1 = RMul(realLit1847,r183C);
    real r1856#1 = RAdd(r1855,r183F);
    real r1857#1 = RAdd(r1856,r1841);
    tensor[3] tensor1858#1 = <tensor[3]>[r1854,r1857,r1843];
    tensor[3] projParam187A#1 = tensor184B;
    real vdot187B#1 = VDot<3>(op1_e3_l_31820,projParam187A);
    tensor[3] projParam187C#1 = tensor1851;
    real vdot187D#1 = VDot<3>(op1_e3_l_31820,projParam187C);
    tensor[3] projParam187E#1 = tensor1858;
    real vdot187F#1 = VDot<3>(op1_e3_l_31820,projParam187E);
    tensor[3] op1_e3_l_171879#6 = <tensor[3]>[vdot187B,vdot187D,vdot187F];
    real op1_e3_l_341888#1 = VDot<3>(op1_e3_l_171879,op1_e3_l_171879);
    real r188C#1 = RMul(op1_e3_l_91831,op1_e3_l_91831);
    real op1_e3_l_35188B#1 = RMul(r188C,op1_e3_l_341888);
    real op1_e3_l_361890#1 = Sqrt(op1_e3_l_35188B);
    tensor[3] op1_e3_l_371893#1 = VScale<3>(op1_e3_l_91831,op1_e3_l_171879);
    real realLit1897#1 = 0.1e1;
    real op1_e3_l_381896#2 = RDiv(realLit1897,op1_e3_l_361890);
    tensor[3] camU189B#4 = VScale<3>(op1_e3_l_381896,op1_e3_l_371893);
    globals.camU1796 = camU189B;
    real realLit18A0#3 = 0.e0;
    real r18A1#3 = TensorIndex<tensor[3],[0]>(op1_e3_l_31820);
    real r18A2#3 = RMul(realLit18A0,r18A1);
    real r18A3#3 = TensorIndex<tensor[3],[1]>(op1_e3_l_31820);
    real r18A4#3 = RMul(realLit18A0,r18A3);
    real r18A5#3 = TensorIndex<tensor[3],[2]>(op1_e3_l_31820);
    real r18A6#5 = RMul(realLit18A0,r18A5);
    real r18A7#3 = RAdd(r18A2,r18A4);
    real r18A8#3 = RAdd(r18A7,r18A6);
    real realLit18A9#3 = 0.1e1;
    real r18AA#1 = RMul(realLit18A9,r18A5);
    real r18AB#1 = RAdd(r18A7,r18AA);
    real realLit18AC#3 = -0.1e1;
    real r18AD#1 = RMul(realLit18AC,r18A3);
    real r18AE#1 = RAdd(r18A2,r18AD);
    real r18AF#1 = RAdd(r18AE,r18A6);
    tensor[3] tensor18B0#1 = <tensor[3]>[r18A8,r18AB,r18AF];
    real r18B1#1 = RMul(realLit18AC,r18A5);
    real r18B2#1 = RAdd(r18A7,r18B1);
    real r18B3#1 = RMul(realLit18A9,r18A1);
    real r18B4#1 = RAdd(r18B3,r18A4);
    real r18B5#1 = RAdd(r18B4,r18A6);
    tensor[3] tensor18B6#1 = <tensor[3]>[r18B2,r18A8,r18B5];
    real r18B7#1 = RMul(realLit18A9,r18A3);
    real r18B8#1 = RAdd(r18A2,r18B7);
    real r18B9#1 = RAdd(r18B8,r18A6);
    real r18BA#1 = RMul(realLit18AC,r18A1);
    real r18BB#1 = RAdd(r18BA,r18A4);
    real r18BC#1 = RAdd(r18BB,r18A6);
    tensor[3] tensor18BD#1 = <tensor[3]>[r18B9,r18BC,r18A8];
    tensor[3] projParam18DF#1 = tensor18B0;
    real vdot18E0#1 = VDot<3>(op1_e3_l_171879,projParam18DF);
    tensor[3] projParam18E1#1 = tensor18B6;
    real vdot18E2#1 = VDot<3>(op1_e3_l_171879,projParam18E1);
    tensor[3] projParam18E3#1 = tensor18BD;
    real vdot18E4#1 = VDot<3>(op1_e3_l_171879,projParam18E3);
    tensor[3] op1_e3_l_4718DE#1 = <tensor[3]>[vdot18E0,vdot18E2,vdot18E4];
    tensor[3] op1_e3_l_5018ED#3 = VScale<3>(op1_e3_l_91831,op1_e3_l_4718DE);
    real r18F1#1 = TensorIndex<tensor[3],[0]>(op1_e3_l_5018ED);
    real r18F2#3 = RMul(op1_e3_l_381896,op1_e3_l_91831);
    real r18F3#2 = RMul(r18F2,r18F1);
    real r18F4#1 = TensorIndex<tensor[3],[1]>(op1_e3_l_5018ED);
    real r18F5#2 = RMul(r18F2,r18F4);
    real r18F6#1 = TensorIndex<tensor[3],[2]>(op1_e3_l_5018ED);
    real r18F7#2 = RMul(r18F2,r18F6);
    tensor[3] camV18F0#1 = <tensor[3]>[r18F3,r18F5,r18F7];
    globals.camV1797 = camV18F0;
    real _t1902#1 = 0.314159265358979323846264338327950288e1;
    real _t1904#1 = 0.36e3;
    real op1_e3_l_51906#1 = RMul(camFOV17F2,_t1902);
    real op1_e3_l_61909#1 = RDiv(op1_e3_l_51906,_t1904);
    real op1_e3_l_10190C#2 = Tan(op1_e3_l_61909);
    real camVmax190F#1 = RMul(op1_e3_l_10190C,op1_e3_l_61826);
    globals.camVmax1798 = camVmax190F;
    real _t1913#1 = IntToReal(iresU17F4);
    real _t1915#1 = IntToReal(iresV17F6);
    real r1918#1 = RMul(_t1913,op1_e3_l_10190C);
    real op1_e3_l_141917#1 = RMul(r1918,op1_e3_l_61826);
    real camUmax191C#1 = RDiv(op1_e3_l_141917,_t1915);
    globals.camUmax1799 = camUmax191C;
    real op1_e3_l_31926#1 = VDot<3>(lightVsp1804,lightVsp1804);
    real op1_e3_l_41929#1 = Sqrt(op1_e3_l_31926);
    real realLit192D#1 = 0.1e1;
    real op1_e3_l_5192C#1 = RDiv(realLit192D,op1_e3_l_41929);
    real r1932#1 = VIndex<3,0>(camU189B);
    real r1933#3 = TensorIndex<tensor[3],[0]>(lightVsp1804);
    real r1934#1 = RMul(r1932,r1933);
    real r1935#1 = r18F3;
    real r1936#3 = TensorIndex<tensor[3],[1]>(lightVsp1804);
    real r1937#1 = RMul(r1935,r1936);
    real r1938#1 = VIndex<3,0>(camN1836);
    real r1939#3 = TensorIndex<tensor[3],[2]>(lightVsp1804);
    real r193A#1 = RMul(r1938,r1939);
    real r193B#1 = RAdd(r1934,r1937);
    real r193C#1 = RAdd(r193B,r193A);
    real r193D#1 = VIndex<3,1>(camU189B);
    real r193E#1 = RMul(r193D,r1933);
    real r193F#1 = r18F5;
    real r1940#1 = RMul(r193F,r1936);
    real r1941#1 = VIndex<3,1>(camN1836);
    real r1942#1 = RMul(r1941,r1939);
    real r1943#1 = RAdd(r193E,r1940);
    real r1944#1 = RAdd(r1943,r1942);
    real r1945#1 = VIndex<3,2>(camU189B);
    real r1946#1 = RMul(r1945,r1933);
    real r1947#1 = r18F7;
    real r1948#1 = RMul(r1947,r1936);
    real r1949#1 = VIndex<3,2>(camN1836);
    real r194A#1 = RMul(r1949,r1939);
    real r194B#1 = RAdd(r1946,r1948);
    real r194C#1 = RAdd(r194B,r194A);
    tensor[3] op1_e3_l_61931#1 = <tensor[3]>[r193C,r1944,r194C];
    tensor[3] L196A#1 = VScale<3>(op1_e3_l_5192C,op1_e3_l_61931);
    globals.L179A = L196A;
    return
## strand
  strand ray (int ui1971#3, int vi1972#4)
    state:
      real rayU;
      real rayV;
      tensor[3] UV;
      tensor[3] rayOrig;
      tensor[3] rayVec;
      real camNearVsp;
      real camFarVsp;
      int offset;
      int len;
      int itter;
      int intersectionItter;
      int idx;
      tensor[2] interval;
      real s;
      real e;
      femData:MeshCell cc;
      femData:FuncCell fc;
      output real out;
      output tensor[4] rgba;
      output tensor[3][] locs;
      int ui;
      int vi;
    state init
      ENTRY1989:  preds = []
        tensor[3] camEye198A#1 = globals.camEye1770;
        int iresU198C#2 = globals.iresU1774;
        int iresV198E#3 = globals.iresV1775;
        femData:MeshCell[] 0cell_a1990#1 = globals.0cell_a1791;
        femData:FemFunc c1992#1 = globals.c1792;
        int[] indecies1994#2 = globals.indecies177F;
        tensor[2][] times1996#1 = globals.times1780;
        real camNearVsp1998#1 = globals.camNearVsp1793;
        real camFarVsp199A#1 = globals.camFarVsp1794;
        tensor[3] camN199C#1 = globals.camN1795;
        tensor[3] camU199E#1 = globals.camU1796;
        tensor[3] camV19A0#1 = globals.camV1797;
        real camVmax19A2#2 = globals.camVmax1798;
        real camUmax19A4#2 = globals.camUmax1799;
        real _t19A6#5 = -0.5e0;
        real _t19A8#1 = IntToReal(ui1971);
        real _t19AA#1 = IntToReal(iresU198C);
        real _t19AC#3 = 0.5e0;
        real op1_e3_l_619AE#1 = RSub(_t19AA,_t19AC);
        real op1_e3_l_719B1#1 = RSub(_t19A8,_t19A6);
        real op1_e3_l_819B4#1 = RSub(op1_e3_l_619AE,_t19A6);
        real op1_e3_l_919B7#2 = RNeg(camUmax19A4);
        real op1_e3_l_1019BA#1 = RDiv(op1_e3_l_719B1,op1_e3_l_819B4);
        real op1_e3_l_1119BD#1 = RSub(camUmax19A4,op1_e3_l_919B7);
        real op1_e3_l_1319C0#1 = RMul(op1_e3_l_1019BA,op1_e3_l_1119BD);
        real rayU19C3#2 = RAdd(op1_e3_l_919B7,op1_e3_l_1319C0);
        real _t19C6#1 = IntToReal(vi1972);
        real _t19C8#2 = IntToReal(iresV198E);
        real op1_e3_l_619CA#1 = RSub(_t19C8,_t19AC);
        real op1_e3_l_719CD#2 = RSub(_t19C6,_t19A6);
        real op1_e3_l_819D0#1 = RSub(op1_e3_l_619CA,_t19A6);
        real op1_e3_l_919D3#3 = RNeg(camVmax19A2);
        real op1_e3_l_1019D6#1 = RDiv(op1_e3_l_719CD,op1_e3_l_819D0);
        real op1_e3_l_1119D9#2 = RSub(camVmax19A2,op1_e3_l_919D3);
        real op1_e3_l_1319DC#1 = RMul(op1_e3_l_1019D6,op1_e3_l_1119D9);
        real rayV19DF#1 = RAdd(op1_e3_l_919D3,op1_e3_l_1319DC);
        real op1_e3_l_2319E2#1 = RSub(_t19C8,_t19AC);
        real op1_e3_l_2519E5#1 = RSub(op1_e3_l_2319E2,_t19A6);
        real op1_e3_l_2719E8#1 = RDiv(op1_e3_l_719CD,op1_e3_l_2519E5);
        real op1_e3_l_3019EB#1 = RMul(op1_e3_l_2719E8,op1_e3_l_1119D9);
        real op1_e3_l_3119EE#1 = RAdd(op1_e3_l_919D3,op1_e3_l_3019EB);
        tensor[3] op1_e3_l_3219F1#2 = VScale<3>(rayU19C3,camU199E);
        tensor[3] op1_e3_l_3319F4#2 = VScale<3>(op1_e3_l_3119EE,camV19A0);
        tensor[3] UV19F7#1 = VAdd<3>(op1_e3_l_3219F1,op1_e3_l_3319F4);
        tensor[3] v19FB#1 = VAdd<3>(camEye198A,op1_e3_l_3219F1);
        tensor[3] rayOrig19FA#1 = VAdd<3>(v19FB,op1_e3_l_3319F4);
        real _t19FF#8 = 0.e0;
        tensor[3] _t1A01#1 = <tensor[3]>[_t19FF,_t19FF,_t19FF];
        tensor[3] rayVec1A03#1 = VAdd<3>(camN199C,_t1A01);
        int _t1A06#2 = IMul(ui1971,iresV198E);
        int _t1A08#1 = IAdd(_t1A06,vi1972);
        int offset1A0A#2 = Subscript<int[]>(indecies1994,_t1A08);
        int _t1A0C#1 = IMul(iresU198C,iresV198E);
        int _t1A0E#1 = IAdd(_t1A0C,_t1A06);
        int _t1A10#1 = IAdd(_t1A0E,vi1972);
        int len1A12#1 = Subscript<int[]>(indecies1994,_t1A10);
        int itter1A14#3 = 0;
        int idx1A16#2 = offset1A0A;
        tensor[2] interval1A18#3 = Subscript<tensor[2][]>(times1996,idx1A16);
        real s1A1A#1 = VIndex<2,0>(interval1A18);
        real e1A1C#1 = VIndex<2,1>(interval1A18);
        femData:MeshCell cc1A1E#2 = Subscript<femData:MeshCell[]>(0cell_a1990,itter1A14);
        int _t1A20#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc1A1E);
        femData:FuncCell _t1A22#1 = LoadFem<femData:FuncCell>(c1992,_t1A20);
        tensor[4] rgba1A24#1 = <tensor[4]>[_t19FF,_t19FF,_t19FF,_t19FF];
        tensor[3][0] _t1A26#1 = <tensor[3][0]>{};
        tensor[3][] _t1A28#1 = MkDynamic<tensor[3],0>(_t1A26);
        self.rayU = rayU19C3;
        self.rayV = rayV19DF;
        self.UV = UV19F7;
        self.rayOrig = rayOrig19FA;
        self.rayVec = rayVec1A03;
        self.camNearVsp = camNearVsp1998;
        self.camFarVsp = camFarVsp199A;
        self.offset = offset1A0A;
        self.len = len1A12;
        self.itter = itter1A14;
        self.intersectionItter = itter1A14;
        self.idx = idx1A16;
        self.interval = interval1A18;
        self.s = s1A1A;
        self.e = e1A1C;
        self.cc = cc1A1E;
        self.fc = _t1A22;
        self.out = _t19FF;
        self.rgba = rgba1A24;
        self.locs = _t1A28;
        self.ui = ui1971;
        self.vi = vi1972;
        return
    end state init
    method start
        ENTRY1A41:  preds = []
          femData:MeshCell[] 0cell_a1A42#1 = globals.0cell_a1791;
          femData:FemFunc c1A44#1 = globals.c1792;
          int[] cells1A46#1 = globals.cells1781;
          bool debug1A48#1 = globals.debug178E;
          int debugU1A4A#1 = globals.debugU178F;
          int debugV1A4C#1 = globals.debugV1790;
          int len1A4E#1 = self.len;
          int idx1A50#1 = self.idx;
          int ui1A52#2 = self.ui;
          int vi1A54#2 = self.vi;
          if debug1A48 then goto ASSIGN1A58 else goto JOIN1A60
        ASSIGN1A58:  preds = [COND1A56]
          bool _t1A57#1 = NEQ<int>(ui1A52,debugU1A4A);
          if _t1A57 then goto ASSIGN1A5B else goto JOIN1A5F
        ASSIGN1A5B:  preds = [COND1A59]
          bool _t1A5A#1 = NEQ<int>(vi1A54,debugV1A4C);
          if _t1A5A then goto STABILIZE1A5D else goto JOIN1A5E
        STABILIZE1A5D:  preds = [COND1A5C]
          stabilize
          goto JOIN1A5E
        JOIN1A5E:  preds = [*STABILIZE1A5D,COND1A5C]
          goto JOIN1A5F
        JOIN1A5F:  preds = [JOIN1A5E,COND1A59]
          goto JOIN1A60
        JOIN1A60:  preds = [JOIN1A5F,COND1A56]
          int _t1A61#1 = 0;
          bool _t1A63#1 = EQ<int>(len1A4E,_t1A61);
          if _t1A63 then goto ASSIGN1A67 else goto JOIN1A6E
        ASSIGN1A67:  preds = [COND1A65]
          string _t1A66#1 = "(find:)No intersection found:";
          string _t1A68#1 = "/";
          string _t1A6A#1 = "\n";
          Print<[string,int,string,int,string]>(_t1A66,ui1A52,_t1A68,vi1A54,_t1A6A);
          stabilize
          goto JOIN1A6E
        JOIN1A6E:  preds = [*STABILIZE1A6D,COND1A65]
          int _t1A6F#1 = Subscript<int[]>(cells1A46,idx1A50);
          femData:MeshCell cc1A71#2 = Subscript<femData:MeshCell[]>(0cell_a1A42,_t1A6F);
          int _t1A73#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc1A71);
          femData:FuncCell _t1A75#1 = LoadFem<femData:FuncCell>(c1A44,_t1A73);
          self.cc = cc1A71;
          self.fc = _t1A75;
          active
    end start
    method update
        ENTRY1A7A:  preds = []
          image(IMAGE1D<double[3]>) cmap1A7B#17 = globals.cmap1784;
          femData:MeshCell[] 0cell_a1A81#1 = globals.0cell_a1791;
          femData:FemFunc c1A83#1 = globals.c1792;
          real zeroEps1A85#1 = globals.zeroEps177D;
          real intervalEps1A87#4 = globals.intervalEps177E;
          tensor[2][] times1A89#1 = globals.times1780;
          int[] cells1A8B#1 = globals.cells1781;
          tensor[3] mcnear1A8D#2 = globals.mcnear1782;
          tensor[3] mcfar1A8F#1 = globals.mcfar1783;
          real cmin1A91#3 = globals.cmin1785;
          real cmax1A93#2 = globals.cmax1786;
          bool light1A95#1 = globals.light1787;
          real phongKa1A97#1 = globals.phongKa1788;
          real phongKd1A99#1 = globals.phongKd1789;
          real phongKs1A9B#1 = globals.phongKs178A;
          real phongSp1A9D#1 = globals.phongSp178B;
          tensor[3] L1A9F#2 = globals.L179A;
          tensor[3] rayOrig1AA1#4 = self.rayOrig;
          tensor[3] rayVec1AA3#7 = self.rayVec;
          real camNearVsp1AA5#2 = self.camNearVsp;
          real camFarVsp1AA7#1 = self.camFarVsp;
          int offset1AA9#1 = self.offset;
          int len1AAB#1 = self.len;
          int itter1AAD#3 = self.itter;
          int intersectionItter1AAF#2 = self.intersectionItter;
          tensor[2] interval1AB1#1 = self.interval;
          real s1AB3#7 = self.s;
          real e1AB5#5 = self.e;
          femData:MeshCell cc1AB7#3 = self.cc;
          femData:FuncCell fc1AB9#3 = self.fc;
          real out1ABB#2 = self.out;
          tensor[4] rgba1ABD#1 = self.rgba;
          tensor[3][] locs1ABF#1 = self.locs;
          int ui1AC1#1 = self.ui;
          int vi1AC3#1 = self.vi;
          string _t1AC5#1 = "Ui/Vi::";
          string _t1AC7#1 = "/";
          string _t1AC9#11 = "\n";
          Print<[string,int,string,int,string]>(_t1AC5,ui1AC1,_t1AC7,vi1AC3,_t1AC9);
          string _t1ACC#1 = "Interval:";
          tensor[2] _t1ACE#1 = <tensor[2]>[s1AB3,e1AB5];
          Print<[string,tensor[2],string]>(_t1ACC,_t1ACE,_t1AC9);
          string _t1AD1#1 = "inner itter:";
          Print<[string,int,string]>(_t1AD1,intersectionItter1AAF,_t1AC9);
          string _t1AD4#1 = "Outer itter:";
          Print<[string,int,string]>(_t1AD4,itter1AAD,_t1AC9);
          real _t1AD7#1 = VIndex<3,0>(rayOrig1AA1);
          real _t1AD9#1 = VIndex<3,1>(rayOrig1AA1);
          tensor[2] _t1ADB#3 = <tensor[2]>[_t1AD7,_t1AD9];
          real _t1ADD#1 = VIndex<3,0>(rayVec1AA3);
          real _t1ADF#1 = VIndex<3,1>(rayVec1AA3);
          tensor[2] _t1AE1#3 = <tensor[2]>[_t1ADD,_t1ADF];
          tensor[2] op1_e3_l_31AE3#1 = VScale<2>(s1AB3,_t1AE1);
          tensor[2] startRay1AE6#1 = VAdd<2>(_t1ADB,op1_e3_l_31AE3);
          tensor[2] op1_e3_l_31AE9#1 = VScale<2>(e1AB5,_t1AE1);
          tensor[2] endRay1AEC#1 = VAdd<2>(_t1ADB,op1_e3_l_31AE9);
          femData:Mesh _t1AEF#12 = ExtractFem<femData:Mesh,femData:MeshCell>(cc1AB7);
          int _t1AF1#4 = ExtractFemItem<int,CellIndex(MeshCell)>(cc1AB7);
          femData:MeshPos callNewtonPos1AF3#1 = _0A92_msh_newtonInverse1AF4 (startRay1AE6,_t1AF1,_t1AEF);
          tensor[2] refPos1D63#3 = ExtractFemItem<tensor[2],RefPos(Mesh)>(callNewtonPos1AF3);
          femData:MeshPos callNewtonPos1D65#1 = _0A92_msh_newtonInverse1AF4 (endRay1AEC,_t1AF1,_t1AEF);
          tensor[2] refPos1D67#3 = ExtractFemItem<tensor[2],RefPos(Mesh)>(callNewtonPos1D65);
          string _t1D69#1 = "inverses:";
          Print<[string,tensor[2],tensor[2],string]>(_t1D69,refPos1D63,refPos1D67,_t1AC9);
          femData:FemFunc _t1D6C#7 = ExtractFem<femData:FemFunc,femData:FuncCell>(fc1AB9);
          femData:Space _t1D6E#6 = ExtractFem<femData:Space,femData:FemFunc>(_t1D6C);
          int _t1D70#1 = ExtractFemItem<int,CellIndex(FuncCell)>(fc1AB9);
          real _t1D72#3 = VIndex<3,2>(rayVec1AA3);
          real _t1D74#3 = VIndex<3,2>(rayOrig1AA1);
          int ilit1D77#1 = 6;
          int mulRes1D78#6 = IMul(_t1D70,ilit1D77);
          int addRes1D7A#1 = mulRes1D78;
          int idx1D7B#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1D6E,addRes1D7A);
          int ilit1D7C#1 = 1;
          int addRes1D7D#1 = IAdd(mulRes1D78,ilit1D7C);
          int idx1D7E#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1D6E,addRes1D7D);
          int ilit1D7F#1 = 2;
          int addRes1D80#1 = IAdd(mulRes1D78,ilit1D7F);
          int idx1D81#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1D6E,addRes1D80);
          int ilit1D82#1 = 3;
          int addRes1D83#1 = IAdd(mulRes1D78,ilit1D82);
          int idx1D84#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1D6E,addRes1D83);
          int ilit1D85#1 = 4;
          int addRes1D86#1 = IAdd(mulRes1D78,ilit1D85);
          int idx1D87#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1D6E,addRes1D86);
          int ilit1D88#1 = 5;
          int addRes1D89#1 = IAdd(mulRes1D78,ilit1D88);
          int idx1D8A#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1D6E,addRes1D89);
          int ilit1DA3#6 = 1;
          int idx1DA5#1 = idx1D7B;
          int mulRes1DA6#1 = IMul(ilit1DA3,idx1DA5);
          int idx1DA7#1 = idx1D7E;
          int mulRes1DA8#1 = IMul(ilit1DA3,idx1DA7);
          int idx1DAA#1 = idx1D81;
          int mulRes1DAB#1 = IMul(ilit1DA3,idx1DAA);
          int idx1DAD#1 = idx1D84;
          int mulRes1DAE#1 = IMul(ilit1DA3,idx1DAD);
          int idx1DB0#1 = idx1D87;
          int mulRes1DB1#1 = IMul(ilit1DA3,idx1DB0);
          int idx1DB3#1 = idx1D8A;
          int mulRes1DB4#1 = IMul(ilit1DA3,idx1DB3);
          real dof1DB5#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(_t1D6C,mulRes1DA6);
          real dof1DB6#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(_t1D6C,mulRes1DA8);
          real dof1DB7#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(_t1D6C,mulRes1DAB);
          real dof1DB8#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(_t1D6C,mulRes1DAE);
          real dof1DB9#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(_t1D6C,mulRes1DB1);
          real dof1DBA#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(_t1D6C,mulRes1DB4);
          tensor[6] dofs1DBB#1 = <tensor[6]>[dof1DB5,dof1DB6,dof1DB7,dof1DB8,dof1DB9,dof1DBA];
          tensor[6] femDofs1DA2#5 = dofs1DBB;
          real varAcc1DD7#2 = VIndex<2,0>(refPos1D63);
          real varAcc1DD8#2 = VIndex<2,1>(refPos1D63);
          real coeff1DD9#2 = 0.2e1;
          real iden1DDA#3 = varAcc1DD7;
          real prod21DDB#1 = RMul(iden1DDA,varAcc1DD7);
          real one1DDC#7 = 0.1e1;
          real prod1DDD#2 = RMul(prod21DDB,one1DDC);
          real coeff1DDE#3 = 0.4e1;
          real iden1DDF#3 = varAcc1DD8;
          real prod1DE0#2 = RMul(iden1DDA,iden1DDF);
          real coeff1DE1#2 = -0.3e1;
          real prod1DE2#3 = RMul(iden1DDA,one1DDC);
          real prod21DE3#1 = RMul(iden1DDF,varAcc1DD8);
          real prod1DE4#2 = RMul(one1DDC,prod21DE3);
          real prod1DE5#3 = RMul(one1DDC,iden1DDF);
          real prod1DE6#1 = RMul(one1DDC,one1DDC);
          real mult1DE7#1 = RMul(one1DDC,prod1DE6);
          real mult1DE8#1 = RMul(coeff1DE1,prod1DE5);
          real mult1DE9#2 = RMul(coeff1DD9,prod1DE4);
          real mult1DEA#1 = RMul(coeff1DE1,prod1DE2);
          real mult1DEB#2 = RMul(coeff1DDE,prod1DE0);
          real mult1DEC#2 = RMul(coeff1DD9,prod1DDD);
          real sum1DED#1 = RAdd(mult1DEB,mult1DEC);
          real sum1DEE#1 = RAdd(mult1DEA,sum1DED);
          real sum1DEF#1 = RAdd(mult1DE9,sum1DEE);
          real sum1DF0#1 = RAdd(mult1DE8,sum1DEF);
          real sum1DF1#1 = RAdd(mult1DE7,sum1DF0);
          real intermediate1DF2#1 = sum1DF1;
          real coeff1DF3#2 = -0.1e1;
          real mult1DF4#1 = RMul(coeff1DF3,prod1DE2);
          real sum1DF5#1 = RAdd(mult1DF4,mult1DEC);
          real intermediate1DF6#1 = sum1DF5;
          real mult1DF7#1 = RMul(coeff1DF3,prod1DE5);
          real sum1DF8#1 = RAdd(mult1DF7,mult1DE9);
          real intermediate1DF9#1 = sum1DF8;
          real coeff1DFA#3 = -0.4e1;
          real mult1DFB#1 = RMul(coeff1DDE,prod1DE5);
          real mult1DFC#1 = RMul(coeff1DFA,prod1DE4);
          real mult1DFD#2 = RMul(coeff1DFA,prod1DE0);
          real sum1DFE#1 = RAdd(mult1DFC,mult1DFD);
          real sum1DFF#1 = RAdd(mult1DFB,sum1DFE);
          real intermediate1E00#1 = sum1DFF;
          real mult1E01#1 = RMul(coeff1DDE,prod1DE2);
          real mult1E02#1 = RMul(coeff1DFA,prod1DDD);
          real sum1E03#1 = RAdd(mult1DFD,mult1E02);
          real sum1E04#1 = RAdd(mult1E01,sum1E03);
          real intermediate1E05#1 = sum1E04;
          tensor[6] intermediateCons1E06#1 = <tensor[6]>[intermediate1DF2,intermediate1DF6,intermediate1DF9,mult1DEB,intermediate1E00,intermediate1E05];
          tensor[6] basisResult1DD6#1 = intermediateCons1E06;
          real probe_l_71E38#1 = VDot<6>(femDofs1DA2,basisResult1DD6);
          real op1_e3_l_81E3B#1 = RMul(_t1D72,s1AB3);
          real op1_e3_l_91E3E#1 = RSub(probe_l_71E38,op1_e3_l_81E3B);
          real fa1E41#9 = RSub(op1_e3_l_91E3E,_t1D74);
          real varAcc1E45#2 = VIndex<2,0>(refPos1D67);
          real varAcc1E46#2 = VIndex<2,1>(refPos1D67);
          real coeff1E47#2 = 0.2e1;
          real iden1E48#3 = varAcc1E45;
          real prod21E49#1 = RMul(iden1E48,varAcc1E45);
          real one1E4A#7 = 0.1e1;
          real prod1E4B#2 = RMul(prod21E49,one1E4A);
          real coeff1E4C#3 = 0.4e1;
          real iden1E4D#3 = varAcc1E46;
          real prod1E4E#2 = RMul(iden1E48,iden1E4D);
          real coeff1E4F#2 = -0.3e1;
          real prod1E50#3 = RMul(iden1E48,one1E4A);
          real prod21E51#1 = RMul(iden1E4D,varAcc1E46);
          real prod1E52#2 = RMul(one1E4A,prod21E51);
          real prod1E53#3 = RMul(one1E4A,iden1E4D);
          real prod1E54#1 = RMul(one1E4A,one1E4A);
          real mult1E55#1 = RMul(one1E4A,prod1E54);
          real mult1E56#1 = RMul(coeff1E4F,prod1E53);
          real mult1E57#2 = RMul(coeff1E47,prod1E52);
          real mult1E58#1 = RMul(coeff1E4F,prod1E50);
          real mult1E59#2 = RMul(coeff1E4C,prod1E4E);
          real mult1E5A#2 = RMul(coeff1E47,prod1E4B);
          real sum1E5B#1 = RAdd(mult1E59,mult1E5A);
          real sum1E5C#1 = RAdd(mult1E58,sum1E5B);
          real sum1E5D#1 = RAdd(mult1E57,sum1E5C);
          real sum1E5E#1 = RAdd(mult1E56,sum1E5D);
          real sum1E5F#1 = RAdd(mult1E55,sum1E5E);
          real intermediate1E60#1 = sum1E5F;
          real coeff1E61#2 = -0.1e1;
          real mult1E62#1 = RMul(coeff1E61,prod1E50);
          real sum1E63#1 = RAdd(mult1E62,mult1E5A);
          real intermediate1E64#1 = sum1E63;
          real mult1E65#1 = RMul(coeff1E61,prod1E53);
          real sum1E66#1 = RAdd(mult1E65,mult1E57);
          real intermediate1E67#1 = sum1E66;
          real coeff1E68#3 = -0.4e1;
          real mult1E69#1 = RMul(coeff1E4C,prod1E53);
          real mult1E6A#1 = RMul(coeff1E68,prod1E52);
          real mult1E6B#2 = RMul(coeff1E68,prod1E4E);
          real sum1E6C#1 = RAdd(mult1E6A,mult1E6B);
          real sum1E6D#1 = RAdd(mult1E69,sum1E6C);
          real intermediate1E6E#1 = sum1E6D;
          real mult1E6F#1 = RMul(coeff1E4C,prod1E50);
          real mult1E70#1 = RMul(coeff1E68,prod1E4B);
          real sum1E71#1 = RAdd(mult1E6B,mult1E70);
          real sum1E72#1 = RAdd(mult1E6F,sum1E71);
          real intermediate1E73#1 = sum1E72;
          tensor[6] intermediateCons1E74#1 = <tensor[6]>[intermediate1E60,intermediate1E64,intermediate1E67,mult1E59,intermediate1E6E,intermediate1E73];
          tensor[6] basisResult1E44#1 = intermediateCons1E74;
          real probe_l_71EA6#1 = VDot<6>(femDofs1DA2,basisResult1E44);
          real op1_e3_l_81EA9#1 = RMul(_t1D72,e1AB5);
          real op1_e3_l_91EAC#1 = RSub(probe_l_71EA6,op1_e3_l_81EA9);
          real fb1EAF#6 = RSub(op1_e3_l_91EAC,_t1D74);
          string _t1EB2#1 = "Vals:";
          tensor[2] _t1EB4#1 = <tensor[2]>[fa1E41,fb1EAF];
          Print<[string,tensor[2],string]>(_t1EB2,_t1EB4,_t1AC9);
          real op1_e3_l_221EB7#1 = RSub(fa1E41,fb1EAF);
          real _t1EBA#1 = Abs<real>(op1_e3_l_221EB7);
          bool _t1EBD#1 = LT<real>(_t1EBA,intervalEps1A87);
          if _t1EBD then goto ASSIGN1EC2 else goto JOIN1ED9
        ASSIGN1EC2:  preds = [COND1EBF]
          real _t1EC0#1 = Abs<real>(fa1E41);
          bool _t1EC3#1 = GT<real>(_t1EC0,intervalEps1A87);
          if _t1EC3 then goto ASSIGN1EC8 else goto JOIN1ED7
        ASSIGN1EC8:  preds = [COND1EC5]
          real _t1EC6#1 = Abs<real>(fb1EAF);
          bool _t1EC9#1 = GT<real>(_t1EC6,intervalEps1A87);
          if _t1EC9 then goto ASSIGN1ECD else goto JOIN1ED5
        ASSIGN1ECD:  preds = [COND1ECB]
          string _t1ECC#1 = "warn\n";
          Print<[string]>(_t1ECC);
          real s1ECF#1 = RAdd(s1AB3,intervalEps1A87);
          self.s = s1ECF;
          active
          goto JOIN1ED5
        JOIN1ED5:  preds = [*ACTIVE1ED3,COND1ECB]
          real s1ED4#1 = phi(s1AB3)
          goto JOIN1ED7
        JOIN1ED7:  preds = [JOIN1ED5,COND1EC5]
          real s1ED6#1 = phi(s1ED4,s1AB3)
          goto JOIN1ED9
        JOIN1ED9:  preds = [JOIN1ED7,COND1EBF]
          real s1ED8#3 = phi(s1ED6,s1AB3)
          real op1_e3_l_381EDA#1 = RMul(s1ED8,fb1EAF);
          real op1_e3_l_391EDD#1 = RMul(e1AB5,fa1E41);
          real op1_e3_l_481EE0#1 = RSub(op1_e3_l_381EDA,op1_e3_l_391EDD);
          real op1_e3_l_491EE3#1 = RSub(fb1EAF,fa1E41);
          real cup1EE6#7 = RDiv(op1_e3_l_481EE0,op1_e3_l_491EE3);
          string _t1EE9#1 = "Mid time:";
          Print<[string,real,string]>(_t1EE9,cup1EE6,_t1AC9);
          tensor[2] op1_e3_l_531EEC#1 = VScale<2>(cup1EE6,_t1AE1);
          tensor[2] midRay1EEF#1 = VAdd<2>(_t1ADB,op1_e3_l_531EEC);
          femData:MeshPos callNewtonPos1EF2#1 = _0A92_msh_newtonInverse1AF4 (midRay1EEF,_t1AF1,_t1AEF);
          tensor[2] refPos1EF4#4 = ExtractFemItem<tensor[2],RefPos(Mesh)>(callNewtonPos1EF2);
          real varAcc1EF7#2 = VIndex<2,0>(refPos1EF4);
          real varAcc1EF8#2 = VIndex<2,1>(refPos1EF4);
          real coeff1EF9#2 = 0.2e1;
          real iden1EFA#3 = varAcc1EF7;
          real prod21EFB#1 = RMul(iden1EFA,varAcc1EF7);
          real one1EFC#7 = 0.1e1;
          real prod1EFD#2 = RMul(prod21EFB,one1EFC);
          real coeff1EFE#3 = 0.4e1;
          real iden1EFF#3 = varAcc1EF8;
          real prod1F00#2 = RMul(iden1EFA,iden1EFF);
          real coeff1F01#2 = -0.3e1;
          real prod1F02#3 = RMul(iden1EFA,one1EFC);
          real prod21F03#1 = RMul(iden1EFF,varAcc1EF8);
          real prod1F04#2 = RMul(one1EFC,prod21F03);
          real prod1F05#3 = RMul(one1EFC,iden1EFF);
          real prod1F06#1 = RMul(one1EFC,one1EFC);
          real mult1F07#1 = RMul(one1EFC,prod1F06);
          real mult1F08#1 = RMul(coeff1F01,prod1F05);
          real mult1F09#2 = RMul(coeff1EF9,prod1F04);
          real mult1F0A#1 = RMul(coeff1F01,prod1F02);
          real mult1F0B#2 = RMul(coeff1EFE,prod1F00);
          real mult1F0C#2 = RMul(coeff1EF9,prod1EFD);
          real sum1F0D#1 = RAdd(mult1F0B,mult1F0C);
          real sum1F0E#1 = RAdd(mult1F0A,sum1F0D);
          real sum1F0F#1 = RAdd(mult1F09,sum1F0E);
          real sum1F10#1 = RAdd(mult1F08,sum1F0F);
          real sum1F11#1 = RAdd(mult1F07,sum1F10);
          real intermediate1F12#1 = sum1F11;
          real coeff1F13#2 = -0.1e1;
          real mult1F14#1 = RMul(coeff1F13,prod1F02);
          real sum1F15#1 = RAdd(mult1F14,mult1F0C);
          real intermediate1F16#1 = sum1F15;
          real mult1F17#1 = RMul(coeff1F13,prod1F05);
          real sum1F18#1 = RAdd(mult1F17,mult1F09);
          real intermediate1F19#1 = sum1F18;
          real coeff1F1A#3 = -0.4e1;
          real mult1F1B#1 = RMul(coeff1EFE,prod1F05);
          real mult1F1C#1 = RMul(coeff1F1A,prod1F04);
          real mult1F1D#2 = RMul(coeff1F1A,prod1F00);
          real sum1F1E#1 = RAdd(mult1F1C,mult1F1D);
          real sum1F1F#1 = RAdd(mult1F1B,sum1F1E);
          real intermediate1F20#1 = sum1F1F;
          real mult1F21#1 = RMul(coeff1EFE,prod1F02);
          real mult1F22#1 = RMul(coeff1F1A,prod1EFD);
          real sum1F23#1 = RAdd(mult1F1D,mult1F22);
          real sum1F24#1 = RAdd(mult1F21,sum1F23);
          real intermediate1F25#1 = sum1F24;
          tensor[6] intermediateCons1F26#1 = <tensor[6]>[intermediate1F12,intermediate1F16,intermediate1F19,mult1F0B,intermediate1F20,intermediate1F25];
          tensor[6] basisResult1EF6#1 = intermediateCons1F26;
          real fmVal1F58#2 = VDot<6>(femDofs1DA2,basisResult1EF6);
          real op1_e3_l_581F5B#1 = RMul(_t1D72,cup1EE6);
          real op1_e3_l_591F5E#1 = RSub(fmVal1F58,op1_e3_l_581F5B);
          real fm1F61#5 = RSub(op1_e3_l_591F5E,_t1D74);
          string _t1F64#1 = "all vals:";
          tensor[3] _t1F66#1 = <tensor[3]>[fa1E41,fm1F61,fb1EAF];
          Print<[string,tensor[3],string]>(_t1F64,_t1F66,_t1AC9);
          int _t1F69#6 = 1;
          int intersectionItter1F6B#3 = IAdd(intersectionItter1AAF,_t1F69);
          real _t1F6D#10 = 0.e0;
          bool _t1F6F#2 = GT<real>(fa1E41,_t1F6D);
          if _t1F6F then goto JOIN1F74 else goto ASSIGN2381
        JOIN1F74:  preds = [COND1F71,JOIN2386]
          int _t1F72#1 = phi(_t1F69,_t1F73)
          bool _t1F75#2 = GT<real>(fm1F61,_t1F6D);
          if _t1F75 then goto JOIN1F7A else goto ASSIGN2379
        JOIN1F7A:  preds = [COND1F77,JOIN237E]
          int _t1F78#1 = phi(_t1F69,_t1F79)
          int _t1F7B#1 = IMul(_t1F72,_t1F78);
          int _t1F7D#6 = 0;
          bool _t1F7F#1 = LT<int>(_t1F7B,_t1F7D);
          if _t1F7F then goto JOIN1F85 else goto COND235E
        JOIN1F85:  preds = [COND1F81,JOIN236B]
          real e1F82#4 = phi(cup1EE6,e1AB5)
          real s1F83#4 = phi(s1ED8,s1F84)
          string _t1F86#1 = "new interval:";
          tensor[2] _t1F88#1 = <tensor[2]>[s1F83,e1F82];
          Print<[string,tensor[2],string]>(_t1F86,_t1F88,_t1AC9);
          real _t1F8B#1 = Abs<real>(fm1F61);
          bool _t1F8E#2 = LT<real>(_t1F8B,zeroEps1A85);
          if _t1F8E then goto ASSIGN1F92 else goto JOIN22D8
        ASSIGN1F92:  preds = [COND1F90]
          tensor[2] grad1F91#1 = <tensor[2]>[_t1F6D,_t1F6D];
          if _t1F8E then goto ASSIGN1FBD else goto JOIN219A
        ASSIGN1FBD:  preds = [COND1F93]
          real varAcc1F95#1 = VIndex<2,0>(refPos1EF4);
          real varAcc1F96#1 = VIndex<2,1>(refPos1EF4);
          real coeff1F97#3 = 0.4e1;
          real iden1F98#1 = varAcc1F95;
          real one1F99#4 = 0.1e1;
          real prod1F9A#3 = RMul(iden1F98,one1F99);
          real iden1F9B#1 = varAcc1F96;
          real prod1F9C#3 = RMul(one1F99,iden1F9B);
          real coeff1F9D#1 = -0.3e1;
          real prod1F9E#3 = RMul(one1F99,one1F99);
          real mult1F9F#1 = RMul(coeff1F9D,prod1F9E);
          real mult1FA0#3 = RMul(coeff1F97,prod1F9C);
          real mult1FA1#3 = RMul(coeff1F97,prod1F9A);
          real sum1FA2#1 = RAdd(mult1FA0,mult1FA1);
          real sum1FA3#2 = RAdd(mult1F9F,sum1FA2);
          real intermediate1FA4#1 = sum1FA3;
          real coeff1FA5#1 = -0.1e1;
          real mult1FA6#2 = RMul(coeff1FA5,prod1F9E);
          real sum1FA7#1 = RAdd(mult1FA6,mult1FA1);
          real intermediate1FA8#1 = sum1FA7;
          real basisEval1FA9#2 = 0.e0;
          real coeff1FAA#2 = -0.4e1;
          real basisEval1FAB#2 = RMul(coeff1FAA,prod1F9C);
          real coeff1FAC#2 = -0.8e1;
          real mult1FAD#2 = RMul(coeff1F97,prod1F9E);
          real mult1FAE#1 = RMul(coeff1FAC,prod1F9A);
          real sum1FAF#1 = RAdd(basisEval1FAB,mult1FAE);
          real sum1FB0#1 = RAdd(mult1FAD,sum1FAF);
          real intermediate1FB1#1 = sum1FB0;
          real intermediate1FB2#1 = sum1FA3;
          real sum1FB3#1 = RAdd(mult1FA6,mult1FA0);
          real intermediate1FB4#1 = sum1FB3;
          real mult1FB5#1 = RMul(coeff1FAC,prod1F9C);
          real mult1FB6#2 = RMul(coeff1FAA,prod1F9A);
          real sum1FB7#1 = RAdd(mult1FB5,mult1FB6);
          real sum1FB8#1 = RAdd(mult1FAD,sum1FB7);
          real intermediate1FB9#1 = sum1FB8;
          tensor[6] intermediateCons1FBA#1 = <tensor[6]>[intermediate1FA4,intermediate1FA8,basisEval1FA9,mult1FA0,basisEval1FAB,intermediate1FB1];
          tensor[6] intermediateCons1FBB#1 = <tensor[6]>[intermediate1FB2,basisEval1FA9,intermediate1FB4,mult1FA1,intermediate1FB9,mult1FB6];
          tensor[6] projParam1FE7#1 = intermediateCons1FBA;
          real vdot1FE8#1 = VDot<6>(femDofs1DA2,projParam1FE7);
          tensor[6] projParam1FE9#1 = intermediateCons1FBB;
          real vdot1FEA#1 = VDot<6>(femDofs1DA2,projParam1FE9);
          int ilit1FF2#1 = 3;
          int mulRes1FF3#3 = IMul(_t1AF1,ilit1FF2);
          int addRes1FF5#1 = mulRes1FF3;
          int idx1FF6#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(_t1AEF,addRes1FF5);
          int ilit1FF7#1 = 1;
          int addRes1FF8#1 = IAdd(mulRes1FF3,ilit1FF7);
          int idx1FF9#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(_t1AEF,addRes1FF8);
          int ilit1FFA#1 = 2;
          int addRes1FFB#1 = IAdd(mulRes1FF3,ilit1FFA);
          int idx1FFC#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(_t1AEF,addRes1FFB);
          int ilit200D#3 = 2;
          int idx200E#1 = idx1FF6;
          int mulRes200F#2 = IMul(ilit200D,idx200E);
          int addRes2010#1 = mulRes200F;
          int ilit2011#3 = 1;
          int addRes2012#1 = IAdd(ilit2011,mulRes200F);
          real dof_load2013#3 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1AEF,addRes2010);
          real dof_load2014#3 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1AEF,addRes2012);
          int idx2016#1 = idx1FF9;
          int mulRes2017#2 = IMul(ilit200D,idx2016);
          int addRes2018#1 = mulRes2017;
          int addRes2019#1 = IAdd(ilit2011,mulRes2017);
          real dof_load201A#3 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1AEF,addRes2018);
          real dof_load201B#3 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1AEF,addRes2019);
          int idx201D#1 = idx1FFC;
          int mulRes201E#2 = IMul(ilit200D,idx201D);
          int addRes201F#1 = mulRes201E;
          int addRes2020#1 = IAdd(ilit2011,mulRes201E);
          real dof_load2021#3 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1AEF,addRes201F);
          real dof_load2022#3 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1AEF,addRes2020);
          real coeff2042#1 = -0.1e1;
          real one2043#3 = 0.1e1;
          real prod2044#2 = RMul(one2043,one2043);
          real basisEval2045#4 = RMul(coeff2042,prod2044);
          real basisEval2046#4 = RMul(one2043,prod2044);
          real basisEval2047#4 = 0.e0;
          real r2058#2 = dof_load2013;
          real r2059#2 = basisEval2045;
          real r205A#1 = RMul(r2058,r2059);
          real r205B#2 = dof_load201A;
          real r205C#2 = basisEval2046;
          real r205D#1 = RMul(r205B,r205C);
          real r205E#2 = dof_load2021;
          real r205F#2 = basisEval2047;
          real r2060#1 = RMul(r205E,r205F);
          real r2061#1 = RAdd(r205A,r205D);
          real r2062#1 = RAdd(r2061,r2060);
          real r2063#2 = basisEval2045;
          real r2064#1 = RMul(r2058,r2063);
          real r2065#2 = basisEval2047;
          real r2066#1 = RMul(r205B,r2065);
          real r2067#2 = basisEval2046;
          real r2068#1 = RMul(r205E,r2067);
          real r2069#1 = RAdd(r2064,r2066);
          real r206A#1 = RAdd(r2069,r2068);
          real r206C#2 = dof_load2014;
          real r206D#1 = RMul(r206C,r2059);
          real r206E#2 = dof_load201B;
          real r206F#1 = RMul(r206E,r205C);
          real r2070#2 = dof_load2022;
          real r2071#1 = RMul(r2070,r205F);
          real r2072#1 = RAdd(r206D,r206F);
          real r2073#1 = RAdd(r2072,r2071);
          real r2074#1 = RMul(r206C,r2063);
          real r2075#1 = RMul(r206E,r2065);
          real r2076#1 = RMul(r2070,r2067);
          real r2077#1 = RAdd(r2074,r2075);
          real r2078#1 = RAdd(r2077,r2076);
          real realLit209F#4 = 0.e0;
          real r20A0#2 = r2062;
          real r20A1#1 = RMul(realLit209F,r20A0);
          real realLit20A2#2 = -0.1e1;
          real r20A3#2 = r2073;
          real r20A4#1 = RMul(realLit20A2,r20A3);
          real r20A5#1 = RAdd(r20A1,r20A4);
          real r20A6#2 = r206A;
          real r20A7#1 = RMul(realLit209F,r20A6);
          real r20A8#2 = r2078;
          real r20A9#1 = RMul(realLit20A2,r20A8);
          real r20AA#1 = RAdd(r20A7,r20A9);
          real realLit20AC#2 = 0.1e1;
          real r20AD#1 = RMul(realLit20AC,r20A0);
          real r20AE#1 = RMul(realLit209F,r20A3);
          real r20AF#1 = RAdd(r20AD,r20AE);
          real r20B0#1 = RMul(realLit20AC,r20A6);
          real r20B1#1 = RMul(realLit209F,r20A8);
          real r20B2#1 = RAdd(r20B0,r20B1);
          real r20CC#1 = dof_load2013;
          real r20CD#2 = basisEval2045;
          real r20CE#1 = RMul(r20CC,r20CD);
          real r20CF#1 = dof_load201A;
          real r20D0#2 = basisEval2046;
          real r20D1#1 = RMul(r20CF,r20D0);
          real r20D2#1 = dof_load2021;
          real r20D3#2 = basisEval2047;
          real r20D4#1 = RMul(r20D2,r20D3);
          real r20D5#1 = RAdd(r20CE,r20D1);
          real r20D6#1 = RAdd(r20D5,r20D4);
          real r20D7#1 = dof_load2014;
          real r20D8#1 = RMul(r20D7,r20CD);
          real r20D9#1 = dof_load201B;
          real r20DA#1 = RMul(r20D9,r20D0);
          real r20DB#1 = dof_load2022;
          real r20DC#1 = RMul(r20DB,r20D3);
          real r20DD#1 = RAdd(r20D8,r20DA);
          real r20DE#1 = RAdd(r20DD,r20DC);
          tensor[2] probe_l_1020CB#1 = <tensor[2]>[r20D6,r20DE];
          real r20F5#1 = dof_load2013;
          real r20F6#2 = basisEval2045;
          real r20F7#1 = RMul(r20F5,r20F6);
          real r20F8#1 = dof_load201A;
          real r20F9#2 = basisEval2047;
          real r20FA#1 = RMul(r20F8,r20F9);
          real r20FB#1 = dof_load2021;
          real r20FC#2 = basisEval2046;
          real r20FD#1 = RMul(r20FB,r20FC);
          real r20FE#1 = RAdd(r20F7,r20FA);
          real r20FF#1 = RAdd(r20FE,r20FD);
          real r2100#1 = dof_load2014;
          real r2101#1 = RMul(r2100,r20F6);
          real r2102#1 = dof_load201B;
          real r2103#1 = RMul(r2102,r20F9);
          real r2104#1 = dof_load2022;
          real r2105#1 = RMul(r2104,r20FC);
          real r2106#1 = RAdd(r2101,r2103);
          real r2107#1 = RAdd(r2106,r2105);
          real realLit211E#2 = 0.e0;
          real r211F#2 = r20FF;
          real r2120#1 = RMul(realLit211E,r211F);
          real realLit2121#1 = 0.1e1;
          real r2122#2 = r2107;
          real r2123#1 = RMul(realLit2121,r2122);
          real r2124#1 = RAdd(r2120,r2123);
          real realLit2125#1 = -0.1e1;
          real r2126#1 = RMul(realLit2125,r211F);
          real r2127#1 = RMul(realLit211E,r2122);
          real r2128#1 = RAdd(r2126,r2127);
          tensor[2] op1_e3_l_12211D#1 = <tensor[2]>[r2124,r2128];
          real realLit2137#4 = 0.e0;
          real r2138#2 = r20A5;
          real r2139#1 = RMul(realLit2137,r2138);
          real realLit213A#2 = -0.1e1;
          real r213B#2 = r20AA;
          real r213C#1 = RMul(realLit213A,r213B);
          real r213D#1 = RAdd(r2139,r213C);
          real r213E#2 = r20AF;
          real r213F#1 = RMul(realLit2137,r213E);
          real r2140#2 = r20B2;
          real r2141#1 = RMul(realLit213A,r2140);
          real r2142#1 = RAdd(r213F,r2141);
          real realLit2144#2 = 0.1e1;
          real r2145#1 = RMul(realLit2144,r2138);
          real r2146#1 = RMul(realLit2137,r213B);
          real r2147#1 = RAdd(r2145,r2146);
          real r2148#1 = RMul(realLit2144,r213E);
          real r2149#1 = RMul(realLit2137,r2140);
          real r214A#1 = RAdd(r2148,r2149);
          real op1_e3_l_142163#4 = VDot<2>(probe_l_1020CB,op1_e3_l_12211D);
          real r2167#1 = r213D;
          real r2168#1 = RDiv(r2167,op1_e3_l_142163);
          real r2169#1 = r2142;
          real r216A#1 = RDiv(r2169,op1_e3_l_142163);
          real r216C#1 = r2147;
          real r216D#1 = RDiv(r216C,op1_e3_l_142163);
          real r216E#1 = r214A;
          real r216F#1 = RDiv(r216E,op1_e3_l_142163);
          real r217E#2 = vdot1FE8;
          real r217F#1 = r2168;
          real r2180#1 = RMul(r217E,r217F);
          real r2181#2 = vdot1FEA;
          real r2182#1 = r216D;
          real r2183#1 = RMul(r2181,r2182);
          real r2184#1 = RAdd(r2180,r2183);
          real r2185#1 = r216A;
          real r2186#1 = RMul(r217E,r2185);
          real r2187#1 = r216F;
          real r2188#1 = RMul(r2181,r2187);
          real r2189#1 = RAdd(r2186,r2188);
          tensor[2] grad217D#1 = <tensor[2]>[r2184,r2189];
          goto JOIN219A
        JOIN219A:  preds = [ASSIGN2197,COND1F93]
          tensor[2] grad2198#3 = phi(grad217D,grad1F91)
          real out2199#3 = phi(fmVal1F58,out1ABB)
          string _t219B#1 = "Out val:";
          Print<[string,real,string]>(_t219B,out2199,_t1AC9);
          string _t219E#1 = "Grad val:";
          Print<[string,tensor[2],string]>(_t219E,grad2198,_t1AC9);
          real _t21A1#6 = 0.1e1;
          tensor[3] mcol21A3#1 = <tensor[3]>[_t21A1,_t21A1,_t21A1];
          bool _t21A5#1 = NEQ<real>(cmin1A91,cmax1A93);
          if _t21A5 then goto ASSIGN21A9 else goto JOIN2229
        ASSIGN21A9:  preds = [COND21A7]
          real _t21A8#2 = -0.1e1;
          real op1_e3_l_521AA#1 = RSub(out2199,cmin1A91);
          real op1_e3_l_621AD#1 = RSub(cmax1A93,cmin1A91);
          real op1_e3_l_721B0#1 = RDiv(op1_e3_l_521AA,op1_e3_l_621AD);
          real op1_e3_l_821B3#1 = RSub(_t21A1,_t21A8);
          real op1_e3_l_921B6#1 = RMul(op1_e3_l_721B0,op1_e3_l_821B3);
          real _t21B9#1 = RAdd(_t21A8,op1_e3_l_921B6);
          real Mtransform21BC#1 = Transform<IMAGE1D<double[3]>>(cmap1A7B);
          real MxPos21BE#1 = RMul(Mtransform21BC,_t21B9);
          real Ttranslate21C1#1 = Translate<IMAGE1D<double[3]>>(cmap1A7B);
          real imgPos21C3#2 = RAdd(MxPos21BE,Ttranslate21C1);
          real nd21C6#2 = Floor<1>(imgPos21C3);
          real f21C8#2 = RSub(imgPos21C3,nd21C6);
          int n21CB#1 = RealToInt<1>(nd21C6);
          int idx21CD#5 = n21CB;
          bool isInside21CF#1 = IndexInside<IMAGE1D<double[3]>,2>(idx21CD,cmap1A7B);
          if isInside21CF then goto ASSIGN243B else goto ASSIGN243C
        ASSIGN243B:  preds = [COND21D1]
          int addRes21D4#1 = idx21CD;
          int stride21D5#2 = 3;
          int offp21D6#3 = IMul(stride21D5,addRes21D4);
          real v0_21D7#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap1A7B,offp21D6);
          int ilit21D8#3 = 1;
          int addRes21D9#1 = IAdd(idx21CD,ilit21D8);
          int offp21DA#3 = IMul(stride21D5,addRes21D9);
          real v1_21DB#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap1A7B,offp21DA);
          tensor[2] v_21DC#1 = <tensor[2]>[v0_21D7,v1_21DB];
          int offp21DD#1 = IAdd(offp21D6,ilit21D8);
          real v0_21DE#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap1A7B,offp21DD);
          int offp21DF#1 = IAdd(offp21DA,ilit21D8);
          real v1_21E0#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap1A7B,offp21DF);
          tensor[2] v_21E1#1 = <tensor[2]>[v0_21DE,v1_21E0];
          int offset21E2#2 = 2;
          int offp21E3#1 = IAdd(offp21D6,offset21E2);
          real v0_21E4#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap1A7B,offp21E3);
          int offp21E5#1 = IAdd(offp21DA,offset21E2);
          real v1_21E6#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap1A7B,offp21E5);
          tensor[2] v_21E7#1 = <tensor[2]>[v0_21E4,v1_21E6];
          tensor[3,2] voxels21E8#1 = <tensor[3,2]>[v_21DC,v_21E1,v_21E7];
          tensor[3,2] ldvox21D2#1 = voxels21E8;
          goto JOIN2202
        JOIN2202:  preds = [ASSIGN21FF,ASSIGN235D]
          tensor[3,2] ldvox2200#3 = phi(ldvox21D2,ldvox2201)
          real rlit2204#1 = 0.1e1;
          real idx2205#1 = RSub(f21C8,rlit2204);
          tensor[2] kernX_2203#1 = <tensor[2]>[f21C8,idx2205];
          real _f220E#1 = 0.1e1;
          real _f220F#1 = 0.1e1;
          tensor[2] a0220A#1 = <tensor[2]>[_f220E,_f220F];
          real _f220C#1 = -0.1e1;
          real _f220D#1 = 0.1e1;
          tensor[2] a1220B#1 = <tensor[2]>[_f220C,_f220D];
          tensor[2] prod12210#1 = VMul<2>(kernX_2203,a1220B);
          tensor[2] kevalX_d0_2209#3 = VAdd<2>(a0220A,prod12210);
          tensor[2] projIx221A#1 = ProjectLast<tensor[3,2],[0]>(ldvox2200);
          real vdot221B#1 = VDot<2>(projIx221A,kevalX_d0_2209);
          tensor[2] projIx221C#1 = ProjectLast<tensor[3,2],[1]>(ldvox2200);
          real vdot221D#1 = VDot<2>(projIx221C,kevalX_d0_2209);
          tensor[2] projIx221E#1 = ProjectLast<tensor[3,2],[2]>(ldvox2200);
          real vdot221F#1 = VDot<2>(projIx221E,kevalX_d0_2209);
          tensor[3] mcol2219#1 = <tensor[3]>[vdot221B,vdot221D,vdot221F];
          goto JOIN2229
        JOIN2229:  preds = [ASSIGN2227,COND21A7]
          tensor[3] mcol2228#7 = phi(mcol2219,mcol21A3)
          if light1A95 then goto ASSIGN222C else goto ASSIGN2327
        ASSIGN222C:  preds = [COND222A]
          real _t222B#1 = VIndex<2,0>(grad2198);
          real _t222D#1 = VIndex<2,1>(grad2198);
          real _t222F#1 = -0.1e1;
          tensor[3] _t2231#4 = <tensor[3]>[_t222B,_t222D,_t222F];
          real op1_e3_l_32233#1 = VDot<3>(_t2231,_t2231);
          real op1_e3_l_42236#1 = Sqrt(op1_e3_l_32233);
          real realLit223A#1 = 0.1e1;
          real op1_e3_l_52239#2 = RDiv(realLit223A,op1_e3_l_42236);
          real op1_e3_l_6223E#1 = VDot<3>(_t2231,L1A9F);
          real _t2241#1 = RMul(op1_e3_l_52239,op1_e3_l_6223E);
          real _t2244#1 = Max<real>(_t1F6D,_t2241);
          real op1_e3_l_102246#1 = VDot<3>(rayVec1AA3,rayVec1AA3);
          real op1_e3_l_112249#1 = Sqrt(op1_e3_l_102246);
          real realLit224D#1 = 0.1e1;
          real op1_e3_l_12224C#1 = RDiv(realLit224D,op1_e3_l_112249);
          tensor[3] op1_e3_l_132251#1 = VScale<3>(op1_e3_l_12224C,rayVec1AA3);
          tensor[3] op1_e3_l_142254#1 = VNeg<3>(op1_e3_l_132251);
          tensor[3] op1_e3_l_202257#3 = VAdd<3>(op1_e3_l_142254,L1A9F);
          real op1_e3_l_22225A#1 = VDot<3>(op1_e3_l_202257,op1_e3_l_202257);
          real op1_e3_l_23225D#1 = Sqrt(op1_e3_l_22225A);
          real realLit2261#1 = 0.1e1;
          real op1_e3_l_312260#1 = RDiv(realLit2261,op1_e3_l_23225D);
          real op1_e3_l_322265#1 = VDot<3>(_t2231,op1_e3_l_202257);
          real r2269#1 = RMul(op1_e3_l_52239,op1_e3_l_312260);
          real _t2268#1 = RMul(r2269,op1_e3_l_322265);
          real _t226D#1 = Max<real>(_t1F6D,_t2268);
          real _t226F#1 = MathFn<pow>(_t226D,phongSp1A9D);
          real op1_e3_l_962271#1 = RSub(cup1EE6,camNearVsp1AA5);
          real op1_e3_l_972274#1 = RSub(camFarVsp1AA7,camNearVsp1AA5);
          real op1_e3_l_982277#1 = RDiv(op1_e3_l_962271,op1_e3_l_972274);
          tensor[3] op1_e3_l_99227A#1 = VSub<3>(mcfar1A8F,mcnear1A8D);
          tensor[3] op1_e3_l_100227D#1 = VScale<3>(op1_e3_l_982277,op1_e3_l_99227A);
          tensor[3] op1_e3_l_1012280#6 = VAdd<3>(mcnear1A8D,op1_e3_l_100227D);
          tensor[3] op1_e3_l_1292283#1 = VScale<3>(phongKa1A97,mcol2228);
          real r2287#1 = TensorIndex<tensor[3],[0]>(mcol2228);
          real r2288#1 = TensorIndex<tensor[3],[0]>(op1_e3_l_1012280);
          real r2289#3 = RMul(_t2244,phongKd1A99);
          real r228A#1 = RMul(r2289,r2287);
          real r228B#1 = RMul(r228A,r2288);
          real r228C#1 = TensorIndex<tensor[3],[1]>(mcol2228);
          real r228D#1 = TensorIndex<tensor[3],[1]>(op1_e3_l_1012280);
          real r228E#1 = RMul(r2289,r228C);
          real r228F#1 = RMul(r228E,r228D);
          real r2290#1 = TensorIndex<tensor[3],[2]>(mcol2228);
          real r2291#1 = TensorIndex<tensor[3],[2]>(op1_e3_l_1012280);
          real r2292#1 = RMul(r2289,r2290);
          real r2293#1 = RMul(r2292,r2291);
          tensor[3] op1_e3_l_1302286#1 = <tensor[3]>[r228B,r228F,r2293];
          real r22A4#1 = TensorIndex<tensor[3],[0]>(op1_e3_l_1012280);
          real r22A5#3 = RMul(_t226F,phongKs1A9B);
          real r22A6#1 = RMul(r22A5,r22A4);
          real r22A7#1 = TensorIndex<tensor[3],[1]>(op1_e3_l_1012280);
          real r22A8#1 = RMul(r22A5,r22A7);
          real r22A9#1 = TensorIndex<tensor[3],[2]>(op1_e3_l_1012280);
          real r22AA#1 = RMul(r22A5,r22A9);
          tensor[3] op1_e3_l_13122A3#1 = <tensor[3]>[r22A6,r22A8,r22AA];
          tensor[3] v22B5#1 = VAdd<3>(op1_e3_l_1292283,op1_e3_l_1302286);
          tensor[3] fin22B4#3 = VAdd<3>(v22B5,op1_e3_l_13122A3);
          real _t22B9#1 = VIndex<3,0>(fin22B4);
          real _t22BB#1 = VIndex<3,1>(fin22B4);
          real _t22BD#1 = VIndex<3,2>(fin22B4);
          tensor[4] rgba22BF#1 = <tensor[4]>[_t22B9,_t22BB,_t22BD,_t21A1];
          goto JOIN22C3
        JOIN22C3:  preds = [ASSIGN22C0,ASSIGN232C]
          tensor[4] rgba22C1#1 = phi(rgba22BF,rgba22C2)
          tensor[3] op1_e3_l_5322C4#1 = VScale<3>(cup1EE6,rayVec1AA3);
          tensor[3] _t22C7#1 = VAdd<3>(op1_e3_l_5322C4,rayOrig1AA1);
          tensor[3][1] _t22CA#1 = <tensor[3][1]>{_t22C7};
          tensor[3][] _t22CC#1 = MkDynamic<tensor[3],1>(_t22CA);
          self.intersectionItter = intersectionItter1F6B;
          self.s = s1F83;
          self.e = e1F82;
          self.out = out2199;
          self.rgba = rgba22C1;
          self.locs = _t22CC;
          stabilize
          goto JOIN22D8
        JOIN22D8:  preds = [*STABILIZE22D4,COND1F90]
          tensor[3][] locs22D5#3 = phi(locs1ABF)
          tensor[4] rgba22D6#3 = phi(rgba1ABD)
          real out22D7#3 = phi(out1ABB)
          int _t22D9#1 = 32;
          bool _t22DB#1 = GT<int>(intersectionItter1F6B,_t22D9);
          if _t22DB then goto ASSIGN22DF else goto ASSIGN2324
        ASSIGN22DF:  preds = [COND22DD]
          int itter22DE#4 = IAdd(itter1AAD,_t1F69);
          bool _t22E0#1 = GTE<int>(itter22DE,len1AAB);
          if _t22E0 then goto ASSIGN22E4 else goto JOIN22F1
        ASSIGN22E4:  preds = [COND22E2]
          string _t22E3#1 = "No intersection found\n";
          Print<[string]>(_t22E3);
          string _t22E6#1 = "Fin pixel=============================\n";
          Print<[string]>(_t22E6);
          self.itter = itter22DE;
          self.intersectionItter = _t1F7D;
          self.s = s1F83;
          self.e = e1F82;
          self.out = out22D7;
          self.rgba = rgba22D6;
          self.locs = locs22D5;
          stabilize
          goto JOIN22F1
        JOIN22F1:  preds = [*STABILIZE22F0,COND22E2]
          int _t22F2#2 = IAdd(offset1AA9,itter22DE);
          tensor[2] interval22F4#3 = Subscript<tensor[2][]>(times1A89,_t22F2);
          int _t22F6#1 = Subscript<int[]>(cells1A8B,_t22F2);
          femData:MeshCell cc22F8#2 = Subscript<femData:MeshCell[]>(0cell_a1A81,_t22F6);
          real s22FA#1 = VIndex<2,0>(interval22F4);
          real e22FC#1 = VIndex<2,1>(interval22F4);
          int _t22FE#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc22F8);
          femData:FuncCell _t2300#1 = LoadFem<femData:FuncCell>(c1A83,_t22FE);
          string _t2302#1 = "++++++++++++++++Next interval!+++++++++++++++++++\n";
          Print<[string]>(_t2302);
          self.itter = itter22DE;
          self.intersectionItter = _t1F7D;
          self.interval = interval22F4;
          self.s = s22FA;
          self.e = e22FC;
          self.cc = cc22F8;
          self.fc = _t2300;
          self.out = out22D7;
          self.rgba = rgba22D6;
          self.locs = locs22D5;
          active
          goto JOIN2317
        JOIN2317:  preds = [*ACTIVE230F,MASSIGN2325]
          femData:FuncCell fc2310#1 = phi(fc1AB9)
          femData:MeshCell cc2311#1 = phi(cc1AB7)
          real e2312#1 = phi(e1F82)
          real s2313#1 = phi(s1F83)
          tensor[2] interval2314#1 = phi(interval1AB1)
          int intersectionItter2315#1 = phi(intersectionItter1F6B)
          int itter2316#1 = phi(itter1AAD)
          self.itter = itter2316;
          self.intersectionItter = intersectionItter2315;
          self.interval = interval2314;
          self.s = s2313;
          self.e = e2312;
          self.cc = cc2311;
          self.fc = fc2310;
          self.out = out22D7;
          self.rgba = rgba22D6;
          self.locs = locs22D5;
          active
        ASSIGN2324:  preds = [COND22DD]
          string _t2323#1 = "---------------\n";
          Print<[string]>(_t2323);
          goto JOIN2317
        ASSIGN2327:  preds = [COND222A]
          real _t2326#1 = VIndex<3,0>(mcol2228);
          real _t2328#1 = VIndex<3,1>(mcol2228);
          real _t232A#1 = VIndex<3,2>(mcol2228);
          tensor[4] rgba22C2#1 = <tensor[4]>[_t2326,_t2328,_t232A,_t21A1];
          goto JOIN22C3
        ASSIGN243C:  preds = [COND21D1]
          int addRes232E#1 = idx21CD;
          int ix232F#1 = ControlIndex<IMAGE1D<double[3]>,clamp,0>(cmap1A7B,addRes232E);
          int stride2330#2 = 3;
          int offp2331#3 = IMul(stride2330,ix232F);
          real v0_2332#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap1A7B,offp2331);
          int ilit2333#3 = 1;
          int addRes2334#1 = IAdd(idx21CD,ilit2333);
          int ix2335#1 = ControlIndex<IMAGE1D<double[3]>,clamp,0>(cmap1A7B,addRes2334);
          int offp2336#3 = IMul(stride2330,ix2335);
          real v1_2337#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap1A7B,offp2336);
          tensor[2] v_2338#1 = <tensor[2]>[v0_2332,v1_2337];
          int offp2339#1 = IAdd(offp2331,ilit2333);
          real v0_233A#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap1A7B,offp2339);
          int offp233B#1 = IAdd(offp2336,ilit2333);
          real v1_233C#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap1A7B,offp233B);
          tensor[2] v_233D#1 = <tensor[2]>[v0_233A,v1_233C];
          int offset233E#2 = 2;
          int offp233F#1 = IAdd(offp2331,offset233E);
          real v0_2340#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap1A7B,offp233F);
          int offp2341#1 = IAdd(offp2336,offset233E);
          real v1_2342#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap1A7B,offp2341);
          tensor[2] v_2343#1 = <tensor[2]>[v0_2340,v1_2342];
          tensor[3,2] voxels2344#1 = <tensor[3,2]>[v_2338,v_233D,v_2343];
          tensor[3,2] ldvox2201#1 = voxels2344;
          goto JOIN2202
        COND235E:  preds = [COND1F81]
          if _t1F6F then goto JOIN2361 else goto ASSIGN2373
        JOIN2361:  preds = [COND235E,JOIN2377]
          int _t235F#1 = phi(_t1F69,_t2360)
          if _t1F75 then goto JOIN2365 else goto ASSIGN236D
        JOIN2365:  preds = [COND2362,JOIN2371]
          int _t2363#1 = phi(_t1F69,_t2364)
          int _t2366#1 = IMul(_t235F,_t2363);
          bool _t2368#1 = GT<int>(_t2366,_t1F7D);
          if _t2368 then goto JOIN236B else goto JOIN236B
        JOIN236B:  preds = [COND236A,COND236A]
          real s1F84#1 = phi(cup1EE6,s1ED8)
          goto JOIN1F85
        ASSIGN236D:  preds = [COND2362]
          bool _t236C#1 = LT<real>(fm1F61,_t1F6D);
          if _t236C then goto ASSIGN2370 else goto JOIN2371
        ASSIGN2370:  preds = [COND236E]
          int _t236F#1 = -1;
          goto JOIN2371
        JOIN2371:  preds = [ASSIGN2370,COND236E]
          int _t2364#1 = phi(_t236F,_t1F7D)
          goto JOIN2365
        ASSIGN2373:  preds = [COND235E]
          bool _t2372#1 = LT<real>(fa1E41,_t1F6D);
          if _t2372 then goto ASSIGN2376 else goto JOIN2377
        ASSIGN2376:  preds = [COND2374]
          int _t2375#1 = -1;
          goto JOIN2377
        JOIN2377:  preds = [ASSIGN2376,COND2374]
          int _t2360#1 = phi(_t2375,_t1F7D)
          goto JOIN2361
        ASSIGN2379:  preds = [COND1F77]
          bool _t2378#1 = LT<real>(fm1F61,_t1F6D);
          if _t2378 then goto ASSIGN237C else goto ASSIGN237F
        ASSIGN237C:  preds = [COND237A]
          int _t237B#1 = -1;
          goto JOIN237E
        JOIN237E:  preds = [ASSIGN237C,ASSIGN237F]
          int _t1F79#1 = phi(_t237B,_t237D)
          goto JOIN1F7A
        ASSIGN237F:  preds = [COND237A]
          int _t237D#1 = 0;
          goto JOIN237E
        ASSIGN2381:  preds = [COND1F71]
          bool _t2380#1 = LT<real>(fa1E41,_t1F6D);
          if _t2380 then goto ASSIGN2384 else goto ASSIGN2387
        ASSIGN2384:  preds = [COND2382]
          int _t2383#1 = -1;
          goto JOIN2386
        JOIN2386:  preds = [ASSIGN2384,ASSIGN2387]
          int _t1F73#1 = phi(_t2383,_t2385)
          goto JOIN1F74
        ASSIGN2387:  preds = [COND2382]
          int _t2385#1 = 0;
          goto JOIN2386
    end update
  end ray
## initial strand creation
  GRID(2)
    ENTRY2388:  preds = []
      int iresU2389#1 = globals.iresU1774;
      int iresV238B#1 = globals.iresV1775;
      int _t238D#2 = 0;
      int _t238F#2 = 1;
      int _t2391#1 = ISub(iresU2389,_t238F);
      int[] _t2393#1 = Range(_t238D,_t2391);
    FOREACH2396:  preds = [ASSIGN2394,NEXT239F]
      foreach (vi2395 in _t2393) on exit goto RETURN23A0
      int _t2397#1 = ISub(iresV238B,_t238F);
      int[] _t2399#1 = Range(_t238D,_t2397);
    FOREACH239C:  preds = [ASSIGN239A,NEXT239E]
      foreach (ui239B in _t2399) on exit goto NEXT239F
      new ray(ui239B,vi2395);
      goto FOREACH239C
    NEXT239F:  preds = [FOREACH239C]
      goto FOREACH2396
    RETURN23A0:  preds = [FOREACH2396]
      return
#### end program ####
##### low-ir: after value numbering ####
## properties
  GlobalInit StrandArray HasStartMethod ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[]) HasInputs HasGlobals
## globals
  input isoval176E (isoval) = <default>
  input thick176F (thick) = <default>
  input camEye1770 (camEye) = <default>
  input camAt1771 (camAt) = <default>
  input camUp1772 (camUp) = <default>
  input camFOV1773 (camFOV) = <default>
  input iresU1774 (iresU) = <default>
  input iresV1775 (iresV) = <default>
  input camNear1776 (camNear) = <default>
  input camFar1777 (camFar) = <default>
  input refStep1778 (refStep) = <default>
  input rayStep1779 (rayStep) = <default>
  input a177A (a) = <no-default>
  input 0b046F_intermedateGlobal177B (b) = <no-default>
  input 0c0471_intermedateGlobal177C (c) = <no-default>
  input zeroEps177D (zeroEps) = <default>
  input intervalEps177E (intervalEps) = <default>
  input indecies177F (indecies) = <no-default>
  input times1780 (times) = <no-default>
  input cells1781 (cells) = <no-default>
  input mcnear1782 (mcnear) = <default>
  input mcfar1783 (mcfar) = <default>
  input cmap1784 (cmap) = image("/home/teocollin/gitcode/diderot/tests/lipRay/find/cmap.nrrd")
  input cmin1785 (cmin) = <default>
  input cmax1786 (cmax) = <default>
  input light1787 (light) = <default>
  input phongKa1788 (phongKa) = <default>
  input phongKd1789 (phongKd) = <default>
  input phongKs178A (phongKs) = <default>
  input phongSp178B (phongSp) = <default>
  input maxAlpha178C (maxAlpha) = <default>
  input lightVsp178D (lightVsp) = <default>
  input debug178E (debug) = <default>
  input debugU178F (debugU) = <default>
  input debugV1790 (debugV) = <default>
  global femData:MeshCell[] 0cell_a1791
  global femData:FemFunc c1792
  global real camNearVsp1793
  global real camFarVsp1794
  global tensor[3] camN1795
  global tensor[3] camU1796
  global tensor[3] camV1797
  global real camVmax1798
  global real camUmax1799
  global tensor[3] L179A
## functions
  function femData:MeshPos _0A92_msh_newtonInverse1AF4 (tensor[2] pos1AF5#2, int cellInt1AF6#2, femData:Mesh mesh1AF7#12) {
    ENTRY1AF8:  preds = []
      real _t1AF9#2 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
      tensor[2] xn1AFB#1 = <tensor[2]>[_t1AF9,_t1AF9];
      int _t1AFD#1 = 0;
      int _t1AFF#1 = 16;
      int[] _t1B01#1 = Range(_t1AFD,_t1AFF);
    FOREACH1B04:  preds = [ASSIGN1B02,NEXT1D5B]
      foreach (itter1B03 in _t1B01) on exit goto ASSIGN1D60
        tensor[2] xn1C7B#3 = phi(xn1AFB,xn1CEF)
      int ilit1B06#1 = 3;
      int mulRes1B07#3 = IMul(cellInt1AF6,ilit1B06);
      int idx1B0A#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(mesh1AF7,mulRes1B07);
      int ilit1B0B#4 = 1;
      int addRes1B0C#1 = IAdd(mulRes1B07,ilit1B0B);
      int idx1B0D#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(mesh1AF7,addRes1B0C);
      int ilit1B0E#4 = 2;
      int addRes1B0F#1 = IAdd(mulRes1B07,ilit1B0E);
      int idx1B10#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(mesh1AF7,addRes1B0F);
      int mulRes1B23#2 = IMul(ilit1B0E,idx1B0A);
      int addRes1B26#1 = IAdd(ilit1B0B,mulRes1B23);
      real dof_load1B27#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh1AF7,mulRes1B23);
      real dof_load1B28#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh1AF7,addRes1B26);
      int mulRes1B2B#2 = IMul(ilit1B0E,idx1B0D);
      int addRes1B2D#1 = IAdd(ilit1B0B,mulRes1B2B);
      real dof_load1B2E#3 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh1AF7,mulRes1B2B);
      real dof_load1B2F#3 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh1AF7,addRes1B2D);
      int mulRes1B32#2 = IMul(ilit1B0E,idx1B10);
      int addRes1B34#1 = IAdd(ilit1B0B,mulRes1B32);
      real dof_load1B35#3 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh1AF7,mulRes1B32);
      real dof_load1B36#3 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh1AF7,addRes1B34);
      real coeff1B56#8 = -0.1e1;
      real one1B57#15 = 0.1e1;
      real prod1B58#2 = RMul(one1B57,one1B57);
      real basisEval1B59#2 = RMul(coeff1B56,prod1B58);
      real basisEval1B5A#5 = RMul(one1B57,prod1B58);
      real basisEval1B5B#12 = 0.e0;
      real r1B6E#2 = RMul(dof_load1B27,basisEval1B59);
      real r1B71#1 = RMul(dof_load1B2E,basisEval1B5A);
      real r1B74#1 = RMul(dof_load1B35,basisEval1B5B);
      real r1B75#1 = RAdd(r1B6E,r1B71);
      real r1B76#3 = RAdd(r1B75,r1B74);
      real r1B7A#1 = RMul(dof_load1B2E,basisEval1B5B);
      real r1B7C#1 = RMul(dof_load1B35,basisEval1B5A);
      real r1B7D#1 = RAdd(r1B6E,r1B7A);
      real r1B7E#3 = RAdd(r1B7D,r1B7C);
      real r1B81#2 = RMul(dof_load1B28,basisEval1B59);
      real r1B83#1 = RMul(dof_load1B2F,basisEval1B5A);
      real r1B85#1 = RMul(dof_load1B36,basisEval1B5B);
      real r1B86#1 = RAdd(r1B81,r1B83);
      real r1B87#3 = RAdd(r1B86,r1B85);
      real r1B89#1 = RMul(dof_load1B2F,basisEval1B5B);
      real r1B8A#1 = RMul(dof_load1B36,basisEval1B5A);
      real r1B8B#1 = RAdd(r1B81,r1B89);
      real r1B8C#3 = RAdd(r1B8B,r1B8A);
      real r1BB5#1 = RMul(basisEval1B5B,r1B76);
      real r1BB8#1 = RMul(coeff1B56,r1B87);
      real r1BB9#2 = RAdd(r1BB5,r1BB8);
      real r1BBB#2 = RMul(basisEval1B5B,r1B7E);
      real r1BBD#1 = RMul(coeff1B56,r1B8C);
      real r1BBE#2 = RAdd(r1BBB,r1BBD);
      real r1BC1#1 = RMul(one1B57,r1B76);
      real r1BC2#1 = RMul(basisEval1B5B,r1B87);
      real r1BC3#2 = RAdd(r1BC1,r1BC2);
      real r1BC4#1 = RMul(one1B57,r1B7E);
      real r1BC5#2 = RMul(basisEval1B5B,r1B8C);
      real r1BC6#2 = RAdd(r1BC4,r1BC5);
      tensor[2] probe_l_121BDF#1 = <tensor[2]>[r1B76,r1B87];
      real r1C37#1 = RMul(one1B57,r1B8C);
      real r1C38#1 = RAdd(r1BBB,r1C37);
      real r1C3A#1 = RMul(coeff1B56,r1B7E);
      real r1C3C#1 = RAdd(r1C3A,r1BC5);
      tensor[2] op1_e3_l_141C31#1 = <tensor[2]>[r1C38,r1C3C];
      real r1C4D#1 = RMul(basisEval1B5B,r1BB9);
      real r1C50#1 = RMul(coeff1B56,r1BBE);
      real r1C51#1 = RAdd(r1C4D,r1C50);
      real r1C53#1 = RMul(basisEval1B5B,r1BC3);
      real r1C55#1 = RMul(coeff1B56,r1BC6);
      real r1C56#1 = RAdd(r1C53,r1C55);
      real r1C59#1 = RMul(one1B57,r1BB9);
      real r1C5A#1 = RMul(basisEval1B5B,r1BBE);
      real r1C5B#1 = RAdd(r1C59,r1C5A);
      real r1C5C#1 = RMul(one1B57,r1BC3);
      real r1C5D#1 = RMul(basisEval1B5B,r1BC6);
      real r1C5E#1 = RAdd(r1C5C,r1C5D);
      real op1_e3_l_161C77#4 = VDot<2>(probe_l_121BDF,op1_e3_l_141C31);
      real varAcc1C7C#1 = VIndex<2,0>(xn1C7B);
      real varAcc1C7D#1 = VIndex<2,1>(xn1C7B);
      real prod1C81#2 = RMul(varAcc1C7C,one1B57);
      real prod1C83#2 = RMul(one1B57,varAcc1C7D);
      real mult1C86#1 = RMul(coeff1B56,prod1C83);
      real mult1C87#1 = RMul(coeff1B56,prod1C81);
      real sum1C88#1 = RAdd(mult1C86,mult1C87);
      real sum1C89#2 = RAdd(basisEval1B5A,sum1C88);
      real basisEval1C8B#2 = RMul(one1B57,prod1C81);
      real basisEval1C8C#2 = RMul(one1B57,prod1C83);
      real r1CA4#1 = RMul(dof_load1B27,sum1C89);
      real r1CA7#1 = RMul(dof_load1B2E,basisEval1C8B);
      real r1CAA#1 = RMul(dof_load1B35,basisEval1C8C);
      real r1CAB#1 = RAdd(r1CA4,r1CA7);
      real r1CAC#1 = RAdd(r1CAB,r1CAA);
      real r1CAE#1 = RMul(dof_load1B28,sum1C89);
      real r1CB0#1 = RMul(dof_load1B2F,basisEval1C8B);
      real r1CB2#1 = RMul(dof_load1B36,basisEval1C8C);
      real r1CB3#1 = RAdd(r1CAE,r1CB0);
      real r1CB4#1 = RAdd(r1CB3,r1CB2);
      tensor[2] probe_l_171CA1#1 = <tensor[2]>[r1CAC,r1CB4];
      real r1CCC#1 = RDiv(r1C51,op1_e3_l_161C77);
      real r1CCE#1 = RDiv(r1C56,op1_e3_l_161C77);
      tensor[2] tensor1CCF#1 = <tensor[2]>[r1CCC,r1CCE];
      real r1CD1#1 = RDiv(r1C5B,op1_e3_l_161C77);
      real r1CD3#1 = RDiv(r1C5E,op1_e3_l_161C77);
      tensor[2] tensor1CD4#1 = <tensor[2]>[r1CD1,r1CD3];
      tensor[2] op1_e3_l_191CE1#2 = VSub<2>(probe_l_171CA1,pos1AF5);
      real vdot1CE6#1 = VDot<2>(tensor1CCF,op1_e3_l_191CE1);
      real vdot1CE8#1 = VDot<2>(tensor1CD4,op1_e3_l_191CE1);
      tensor[2] op1_e3_l_201CE4#3 = <tensor[2]>[vdot1CE6,vdot1CE8];
      tensor[2] xn1CEF#4 = VSub<2>(xn1C7B,op1_e3_l_201CE4);
      real _t1CF2#2 = 0.1e-7;
      real _t1CF4#1 = RMul(_t1CF2,_t1CF2);
      real _t1D2E#1 = VDot<2>(op1_e3_l_201CE4,op1_e3_l_201CE4);
      bool _t1D31#1 = GTE<real>(_t1CF4,_t1D2E);
      if _t1D31 then goto ASSIGN1D37 else goto JOIN1D5A
    ASSIGN1D37:  preds = [COND1D33]
      real _t1D36#3 = 0.1e-8;
      real _t1D38#1 = RAdd(one1B57,_t1D36);
      tensor[2] _t1D3B#1 = <tensor[2]>[one1B57,one1B57];
      real _t1D3D#1 = VDot<2>(_t1D3B,xn1CEF);
      bool _t1D40#1 = GT<real>(_t1D38,_t1D3D);
      tensor[2] _t1D42#1 = <tensor[2]>[_t1D36,_t1D36];
      tensor[2] _t1D44#2 = VAdd<2>(_t1D42,xn1CEF);
      real _t1D47#1 = VIndex<2,0>(_t1D44);
      real _t1D49#2 = -0.e0;
      bool _t1D4B#1 = GT<real>(_t1D47,_t1D49);
      real _t1D4D#1 = VIndex<2,1>(_t1D44);
      bool _t1D4F#1 = GT<real>(_t1D4D,_t1D49);
      bool _t1D51#1 = BAnd(_t1D4B,_t1D4F);
      bool _t1D53#1 = BAnd(_t1D40,_t1D51);
      if _t1D53 then goto ASSIGN1D57 else goto ASSIGN1D5D
    ASSIGN1D57:  preds = [COND1D55]
      femData:MeshPos _t1D56#1 = ExtractFemItemN<[femData:Mesh,int,tensor[2],tensor[2]],femData:MeshPos,AllBuild(MeshPos),0000,"",[],int>(mesh1AF7,cellInt1AF6,xn1CEF,pos1AF5);
      return _t1D56
      goto JOIN1D59
    JOIN1D59:  preds = [*RETURN(_t1D56)1D58,*RETURN(_t1D5C)1D5E]
      goto JOIN1D5A
    JOIN1D5A:  preds = [*JOIN1D59,COND1D33]
      goto FOREACH1B04
    ASSIGN1D5D:  preds = [COND1D55]
      femData:MeshPos _t1D5C#1 = ExtractFemItemN<[femData:Mesh],femData:MeshPos,InvalidBuild(MeshPos),0000,"",[],int>(mesh1AF7);
      return _t1D5C
      goto JOIN1D59
    ASSIGN1D60:  preds = [FOREACH1B04]
      femData:MeshPos _t1D5F#1 = ExtractFemItemN<[femData:Mesh],femData:MeshPos,InvalidBuild(MeshPos),0000,"",[],int>(mesh1AF7);
      return _t1D5F
}
## input initialization
  ENTRY179D:  preds = []
    real isoval179E#1 = 0.2e0;
    globals.isoval176E = isoval179E;
    real thick17A1#1 = 0.7e-1;
    globals.thick176F = thick17A1;
    real _t17A4#2 = 0.3e1;
    real _t17A6#1 = -0.3e1;
    tensor[3] camEye17A8#1 = <tensor[3]>[_t17A4,_t17A6,_t17A4];
    globals.camEye1770 = camEye17A8;
    real _t17AB#5 = 0.5e0;
    tensor[3] camAt17AD#1 = <tensor[3]>[_t17AB,_t17AB,_t17AB];
    globals.camAt1771 = camAt17AD;
    real _t17B0#5 = 0.e0;
    real _t17B2#7 = 0.1e1;
    tensor[3] camUp17B4#1 = <tensor[3]>[_t17B0,_t17B0,_t17B2];
    globals.camUp1772 = camUp17B4;
    real camFOV17B7#1 = 0.137e2;
    globals.camFOV1773 = camFOV17B7;
    int iresU17BA#2 = 10;
    globals.iresU1774 = iresU17BA;
    globals.iresV1775 = iresU17BA;
    real camNear17BE#1 = -0.2e1;
    globals.camNear1776 = camNear17BE;
    real camFar17C1#1 = 0.5e1;
    globals.camFar1777 = camFar17C1;
    globals.refStep1778 = _t17B2;
    real rayStep17C5#1 = 0.1e-1;
    globals.rayStep1779 = rayStep17C5;
    real zeroEps17C8#2 = 0.1e-10;
    globals.zeroEps177D = zeroEps17C8;
    globals.intervalEps177E = zeroEps17C8;
    tensor[3] mcnear17CC#2 = <tensor[3]>[_t17B2,_t17B2,_t17B2];
    globals.mcnear1782 = mcnear17CC;
    globals.mcfar1783 = mcnear17CC;
    globals.cmin1785 = _t17B0;
    globals.cmax1786 = _t17B2;
    bool light17D2#2 = false;
    globals.light1787 = light17D2;
    globals.phongKa1788 = _t17AB;
    globals.phongKd1789 = _t17AB;
    globals.phongKs178A = _t17B0;
    real phongSp17D8#1 = 0.6e2;
    globals.phongSp178B = phongSp17D8;
    globals.maxAlpha178C = _t17B2;
    real _t17DC#1 = 0.369e1;
    real _t17DE#1 = 0.153e1;
    tensor[3] lightVsp17E0#1 = <tensor[3]>[_t17B0,_t17DC,_t17DE];
    globals.lightVsp178D = lightVsp17E0;
    globals.debug178E = light17D2;
    int debugU17E4#1 = 8;
    globals.debugU178F = debugU17E4;
    int debugV17E7#1 = 2;
    globals.debugV1790 = debugV17E7;
    return
## global-variable initialization
  ENTRY17EB:  preds = []
    tensor[3] camEye17EC#1 = globals.camEye1770;
    tensor[3] camAt17EE#1 = globals.camAt1771;
    tensor[3] camUp17F0#3 = globals.camUp1772;
    real camFOV17F2#1 = globals.camFOV1773;
    int iresU17F4#1 = globals.iresU1774;
    int iresV17F6#1 = globals.iresV1775;
    real camNear17F8#1 = globals.camNear1776;
    real camFar17FA#1 = globals.camFar1777;
    femData:Mesh a17FC#3 = globals.a177A;
    femData:Space 0b046F_intermedateGlobal17FE#1 = globals.0b046F_intermedateGlobal177B;
    femData:FemFunc 0c0471_intermedateGlobal1800#1 = globals.0c0471_intermedateGlobal177C;
    tensor[3] lightVsp1804#5 = globals.lightVsp178D;
    int _t1806#1 = 0;
    int _t1808#1 = 1;
    int _t180A#1 = ExtractFemItem<int,NumCell(Mesh)>(a17FC);
    int _t180C#1 = ISub(_t180A,_t1808);
    int[] _t180E#1 = Range(_t1806,_t180C);
    femData:MeshCell[] _t1810#1 = <femData:MeshCell[]>{};
  FOREACH1813:  preds = [ASSIGN1811,NEXT1819]
    foreach (_t1812 in _t180E) on exit goto GASSIGN181A
      femData:MeshCell[] _t1817#2 = phi(_t1810,_t1816)
    femData:MeshCell _t1814#1 = LoadFem<femData:MeshCell>(a17FC,_t1812);
    femData:MeshCell[] _t1816#1 = Append<femData:MeshCell>(_t1817,_t1814);
    goto FOREACH1813
  GASSIGN181A:  preds = [FOREACH1813]
    globals.0cell_a1791 = _t1817;
    femData:Space b181B#1 = LoadFem<femData:Space>(0b046F_intermedateGlobal17FE,a17FC);
    femData:FemFunc c181D#1 = LoadFem<femData:FemFunc>(0c0471_intermedateGlobal1800,b181B);
    globals.c1792 = c181D;
    tensor[3] op1_e3_l_31820#9 = VSub<3>(camAt17EE,camEye17EC);
    real op1_e3_l_51823#1 = VDot<3>(op1_e3_l_31820,op1_e3_l_31820);
    real op1_e3_l_61826#5 = Sqrt(op1_e3_l_51823);
    real camNearVsp1829#1 = RAdd(camNear17F8,op1_e3_l_61826);
    globals.camNearVsp1793 = camNearVsp1829;
    real camFarVsp182D#1 = RAdd(camFar17FA,op1_e3_l_61826);
    globals.camFarVsp1794 = camFarVsp182D;
    real realLit1832#9 = 0.1e1;
    real op1_e3_l_91831#6 = RDiv(realLit1832,op1_e3_l_61826);
    tensor[3] camN1836#4 = VScale<3>(op1_e3_l_91831,op1_e3_l_31820);
    globals.camN1795 = camN1836;
    real realLit183B#6 = 0.e0;
    real r183C#3 = TensorIndex<tensor[3],[0]>(camUp17F0);
    real r183D#3 = RMul(realLit183B,r183C);
    real r183E#3 = TensorIndex<tensor[3],[1]>(camUp17F0);
    real r183F#3 = RMul(realLit183B,r183E);
    real r1840#3 = TensorIndex<tensor[3],[2]>(camUp17F0);
    real r1841#5 = RMul(realLit183B,r1840);
    real r1842#3 = RAdd(r183D,r183F);
    real r1843#3 = RAdd(r1842,r1841);
    real r1845#1 = RMul(realLit1832,r1840);
    real r1846#1 = RAdd(r1842,r1845);
    real realLit1847#6 = -0.1e1;
    real r1848#1 = RMul(realLit1847,r183E);
    real r1849#1 = RAdd(r183D,r1848);
    real r184A#1 = RAdd(r1849,r1841);
    tensor[3] tensor184B#1 = <tensor[3]>[r1843,r1846,r184A];
    real r184C#1 = RMul(realLit1847,r1840);
    real r184D#1 = RAdd(r1842,r184C);
    real r184E#1 = RMul(realLit1832,r183C);
    real r184F#1 = RAdd(r184E,r183F);
    real r1850#1 = RAdd(r184F,r1841);
    tensor[3] tensor1851#1 = <tensor[3]>[r184D,r1843,r1850];
    real r1852#1 = RMul(realLit1832,r183E);
    real r1853#1 = RAdd(r183D,r1852);
    real r1854#1 = RAdd(r1853,r1841);
    real r1855#1 = RMul(realLit1847,r183C);
    real r1856#1 = RAdd(r1855,r183F);
    real r1857#1 = RAdd(r1856,r1841);
    tensor[3] tensor1858#1 = <tensor[3]>[r1854,r1857,r1843];
    real vdot187B#1 = VDot<3>(op1_e3_l_31820,tensor184B);
    real vdot187D#1 = VDot<3>(op1_e3_l_31820,tensor1851);
    real vdot187F#1 = VDot<3>(op1_e3_l_31820,tensor1858);
    tensor[3] op1_e3_l_171879#6 = <tensor[3]>[vdot187B,vdot187D,vdot187F];
    real op1_e3_l_341888#1 = VDot<3>(op1_e3_l_171879,op1_e3_l_171879);
    real r188C#1 = RMul(op1_e3_l_91831,op1_e3_l_91831);
    real op1_e3_l_35188B#1 = RMul(r188C,op1_e3_l_341888);
    real op1_e3_l_361890#1 = Sqrt(op1_e3_l_35188B);
    tensor[3] op1_e3_l_371893#1 = VScale<3>(op1_e3_l_91831,op1_e3_l_171879);
    real op1_e3_l_381896#2 = RDiv(realLit1832,op1_e3_l_361890);
    tensor[3] camU189B#4 = VScale<3>(op1_e3_l_381896,op1_e3_l_371893);
    globals.camU1796 = camU189B;
    real r18A1#3 = TensorIndex<tensor[3],[0]>(op1_e3_l_31820);
    real r18A2#3 = RMul(realLit183B,r18A1);
    real r18A3#3 = TensorIndex<tensor[3],[1]>(op1_e3_l_31820);
    real r18A4#3 = RMul(realLit183B,r18A3);
    real r18A5#3 = TensorIndex<tensor[3],[2]>(op1_e3_l_31820);
    real r18A6#5 = RMul(realLit183B,r18A5);
    real r18A7#3 = RAdd(r18A2,r18A4);
    real r18A8#3 = RAdd(r18A7,r18A6);
    real r18AA#1 = RMul(realLit1832,r18A5);
    real r18AB#1 = RAdd(r18A7,r18AA);
    real r18AD#1 = RMul(realLit1847,r18A3);
    real r18AE#1 = RAdd(r18A2,r18AD);
    real r18AF#1 = RAdd(r18AE,r18A6);
    tensor[3] tensor18B0#1 = <tensor[3]>[r18A8,r18AB,r18AF];
    real r18B1#1 = RMul(realLit1847,r18A5);
    real r18B2#1 = RAdd(r18A7,r18B1);
    real r18B3#1 = RMul(realLit1832,r18A1);
    real r18B4#1 = RAdd(r18B3,r18A4);
    real r18B5#1 = RAdd(r18B4,r18A6);
    tensor[3] tensor18B6#1 = <tensor[3]>[r18B2,r18A8,r18B5];
    real r18B7#1 = RMul(realLit1832,r18A3);
    real r18B8#1 = RAdd(r18A2,r18B7);
    real r18B9#1 = RAdd(r18B8,r18A6);
    real r18BA#1 = RMul(realLit1847,r18A1);
    real r18BB#1 = RAdd(r18BA,r18A4);
    real r18BC#1 = RAdd(r18BB,r18A6);
    tensor[3] tensor18BD#1 = <tensor[3]>[r18B9,r18BC,r18A8];
    real vdot18E0#1 = VDot<3>(op1_e3_l_171879,tensor18B0);
    real vdot18E2#1 = VDot<3>(op1_e3_l_171879,tensor18B6);
    real vdot18E4#1 = VDot<3>(op1_e3_l_171879,tensor18BD);
    tensor[3] op1_e3_l_4718DE#1 = <tensor[3]>[vdot18E0,vdot18E2,vdot18E4];
    tensor[3] op1_e3_l_5018ED#3 = VScale<3>(op1_e3_l_91831,op1_e3_l_4718DE);
    real r18F1#1 = TensorIndex<tensor[3],[0]>(op1_e3_l_5018ED);
    real r18F2#3 = RMul(op1_e3_l_381896,op1_e3_l_91831);
    real r18F3#2 = RMul(r18F2,r18F1);
    real r18F4#1 = TensorIndex<tensor[3],[1]>(op1_e3_l_5018ED);
    real r18F5#2 = RMul(r18F2,r18F4);
    real r18F6#1 = TensorIndex<tensor[3],[2]>(op1_e3_l_5018ED);
    real r18F7#2 = RMul(r18F2,r18F6);
    tensor[3] camV18F0#1 = <tensor[3]>[r18F3,r18F5,r18F7];
    globals.camV1797 = camV18F0;
    real _t1902#1 = 0.314159265358979323846264338327950288e1;
    real _t1904#1 = 0.36e3;
    real op1_e3_l_51906#1 = RMul(camFOV17F2,_t1902);
    real op1_e3_l_61909#1 = RDiv(op1_e3_l_51906,_t1904);
    real op1_e3_l_10190C#2 = Tan(op1_e3_l_61909);
    real camVmax190F#1 = RMul(op1_e3_l_10190C,op1_e3_l_61826);
    globals.camVmax1798 = camVmax190F;
    real _t1913#1 = IntToReal(iresU17F4);
    real _t1915#1 = IntToReal(iresV17F6);
    real r1918#1 = RMul(_t1913,op1_e3_l_10190C);
    real op1_e3_l_141917#1 = RMul(r1918,op1_e3_l_61826);
    real camUmax191C#1 = RDiv(op1_e3_l_141917,_t1915);
    globals.camUmax1799 = camUmax191C;
    real op1_e3_l_31926#1 = VDot<3>(lightVsp1804,lightVsp1804);
    real op1_e3_l_41929#1 = Sqrt(op1_e3_l_31926);
    real op1_e3_l_5192C#1 = RDiv(realLit1832,op1_e3_l_41929);
    real r1932#1 = VIndex<3,0>(camU189B);
    real r1933#3 = TensorIndex<tensor[3],[0]>(lightVsp1804);
    real r1934#1 = RMul(r1932,r1933);
    real r1936#3 = TensorIndex<tensor[3],[1]>(lightVsp1804);
    real r1937#1 = RMul(r18F3,r1936);
    real r1938#1 = VIndex<3,0>(camN1836);
    real r1939#3 = TensorIndex<tensor[3],[2]>(lightVsp1804);
    real r193A#1 = RMul(r1938,r1939);
    real r193B#1 = RAdd(r1934,r1937);
    real r193C#1 = RAdd(r193B,r193A);
    real r193D#1 = VIndex<3,1>(camU189B);
    real r193E#1 = RMul(r193D,r1933);
    real r1940#1 = RMul(r18F5,r1936);
    real r1941#1 = VIndex<3,1>(camN1836);
    real r1942#1 = RMul(r1941,r1939);
    real r1943#1 = RAdd(r193E,r1940);
    real r1944#1 = RAdd(r1943,r1942);
    real r1945#1 = VIndex<3,2>(camU189B);
    real r1946#1 = RMul(r1945,r1933);
    real r1948#1 = RMul(r18F7,r1936);
    real r1949#1 = VIndex<3,2>(camN1836);
    real r194A#1 = RMul(r1949,r1939);
    real r194B#1 = RAdd(r1946,r1948);
    real r194C#1 = RAdd(r194B,r194A);
    tensor[3] op1_e3_l_61931#1 = <tensor[3]>[r193C,r1944,r194C];
    tensor[3] L196A#1 = VScale<3>(op1_e3_l_5192C,op1_e3_l_61931);
    globals.L179A = L196A;
    return
## strand
  strand ray (int ui1971#3, int vi1972#4)
    state:
      real rayU;
      real rayV;
      tensor[3] UV;
      tensor[3] rayOrig;
      tensor[3] rayVec;
      real camNearVsp;
      real camFarVsp;
      int offset;
      int len;
      int itter;
      int intersectionItter;
      int idx;
      tensor[2] interval;
      real s;
      real e;
      femData:MeshCell cc;
      femData:FuncCell fc;
      output real out;
      output tensor[4] rgba;
      output tensor[3][] locs;
      int ui;
      int vi;
    state init
      ENTRY1989:  preds = []
        tensor[3] camEye198A#1 = globals.camEye1770;
        int iresU198C#2 = globals.iresU1774;
        int iresV198E#3 = globals.iresV1775;
        femData:MeshCell[] 0cell_a1990#1 = globals.0cell_a1791;
        femData:FemFunc c1992#1 = globals.c1792;
        int[] indecies1994#2 = globals.indecies177F;
        tensor[2][] times1996#1 = globals.times1780;
        real camNearVsp1998#1 = globals.camNearVsp1793;
        real camFarVsp199A#1 = globals.camFarVsp1794;
        tensor[3] camN199C#1 = globals.camN1795;
        tensor[3] camU199E#1 = globals.camU1796;
        tensor[3] camV19A0#1 = globals.camV1797;
        real camVmax19A2#2 = globals.camVmax1798;
        real camUmax19A4#2 = globals.camUmax1799;
        real _t19A6#4 = -0.5e0;
        real _t19A8#1 = IntToReal(ui1971);
        real _t19AA#1 = IntToReal(iresU198C);
        real _t19AC#2 = 0.5e0;
        real op1_e3_l_619AE#1 = RSub(_t19AA,_t19AC);
        real op1_e3_l_719B1#1 = RSub(_t19A8,_t19A6);
        real op1_e3_l_819B4#1 = RSub(op1_e3_l_619AE,_t19A6);
        real op1_e3_l_919B7#2 = RNeg(camUmax19A4);
        real op1_e3_l_1019BA#1 = RDiv(op1_e3_l_719B1,op1_e3_l_819B4);
        real op1_e3_l_1119BD#1 = RSub(camUmax19A4,op1_e3_l_919B7);
        real op1_e3_l_1319C0#1 = RMul(op1_e3_l_1019BA,op1_e3_l_1119BD);
        real rayU19C3#2 = RAdd(op1_e3_l_919B7,op1_e3_l_1319C0);
        real _t19C6#1 = IntToReal(vi1972);
        real _t19C8#1 = IntToReal(iresV198E);
        real op1_e3_l_619CA#1 = RSub(_t19C8,_t19AC);
        real op1_e3_l_719CD#1 = RSub(_t19C6,_t19A6);
        real op1_e3_l_819D0#1 = RSub(op1_e3_l_619CA,_t19A6);
        real op1_e3_l_919D3#2 = RNeg(camVmax19A2);
        real op1_e3_l_1019D6#1 = RDiv(op1_e3_l_719CD,op1_e3_l_819D0);
        real op1_e3_l_1119D9#1 = RSub(camVmax19A2,op1_e3_l_919D3);
        real op1_e3_l_1319DC#1 = RMul(op1_e3_l_1019D6,op1_e3_l_1119D9);
        real rayV19DF#2 = RAdd(op1_e3_l_919D3,op1_e3_l_1319DC);
        tensor[3] op1_e3_l_3219F1#2 = VScale<3>(rayU19C3,camU199E);
        tensor[3] op1_e3_l_3319F4#2 = VScale<3>(rayV19DF,camV19A0);
        tensor[3] UV19F7#1 = VAdd<3>(op1_e3_l_3219F1,op1_e3_l_3319F4);
        tensor[3] v19FB#1 = VAdd<3>(camEye198A,op1_e3_l_3219F1);
        tensor[3] rayOrig19FA#1 = VAdd<3>(v19FB,op1_e3_l_3319F4);
        real _t19FF#8 = 0.e0;
        tensor[3] _t1A01#1 = <tensor[3]>[_t19FF,_t19FF,_t19FF];
        tensor[3] rayVec1A03#1 = VAdd<3>(camN199C,_t1A01);
        int _t1A06#2 = IMul(ui1971,iresV198E);
        int _t1A08#1 = IAdd(_t1A06,vi1972);
        int offset1A0A#3 = Subscript<int[]>(indecies1994,_t1A08);
        int _t1A0C#1 = IMul(iresU198C,iresV198E);
        int _t1A0E#1 = IAdd(_t1A0C,_t1A06);
        int _t1A10#1 = IAdd(_t1A0E,vi1972);
        int len1A12#1 = Subscript<int[]>(indecies1994,_t1A10);
        int itter1A14#3 = 0;
        tensor[2] interval1A18#3 = Subscript<tensor[2][]>(times1996,offset1A0A);
        real s1A1A#1 = VIndex<2,0>(interval1A18);
        real e1A1C#1 = VIndex<2,1>(interval1A18);
        femData:MeshCell cc1A1E#2 = Subscript<femData:MeshCell[]>(0cell_a1990,itter1A14);
        int _t1A20#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc1A1E);
        femData:FuncCell _t1A22#1 = LoadFem<femData:FuncCell>(c1992,_t1A20);
        tensor[4] rgba1A24#1 = <tensor[4]>[_t19FF,_t19FF,_t19FF,_t19FF];
        tensor[3][0] _t1A26#1 = <tensor[3][0]>{};
        tensor[3][] _t1A28#1 = MkDynamic<tensor[3],0>(_t1A26);
        self.rayU = rayU19C3;
        self.rayV = rayV19DF;
        self.UV = UV19F7;
        self.rayOrig = rayOrig19FA;
        self.rayVec = rayVec1A03;
        self.camNearVsp = camNearVsp1998;
        self.camFarVsp = camFarVsp199A;
        self.offset = offset1A0A;
        self.len = len1A12;
        self.itter = itter1A14;
        self.intersectionItter = itter1A14;
        self.idx = offset1A0A;
        self.interval = interval1A18;
        self.s = s1A1A;
        self.e = e1A1C;
        self.cc = cc1A1E;
        self.fc = _t1A22;
        self.out = _t19FF;
        self.rgba = rgba1A24;
        self.locs = _t1A28;
        self.ui = ui1971;
        self.vi = vi1972;
        return
    end state init
    method start
        ENTRY1A41:  preds = []
          femData:MeshCell[] 0cell_a1A42#1 = globals.0cell_a1791;
          femData:FemFunc c1A44#1 = globals.c1792;
          int[] cells1A46#1 = globals.cells1781;
          bool debug1A48#1 = globals.debug178E;
          int debugU1A4A#1 = globals.debugU178F;
          int debugV1A4C#1 = globals.debugV1790;
          int len1A4E#1 = self.len;
          int idx1A50#1 = self.idx;
          int ui1A52#2 = self.ui;
          int vi1A54#2 = self.vi;
          if debug1A48 then goto ASSIGN1A58 else goto JOIN1A60
        ASSIGN1A58:  preds = [COND1A56]
          bool _t1A57#1 = NEQ<int>(ui1A52,debugU1A4A);
          if _t1A57 then goto ASSIGN1A5B else goto JOIN1A5F
        ASSIGN1A5B:  preds = [COND1A59]
          bool _t1A5A#1 = NEQ<int>(vi1A54,debugV1A4C);
          if _t1A5A then goto STABILIZE1A5D else goto JOIN1A5E
        STABILIZE1A5D:  preds = [COND1A5C]
          stabilize
          goto JOIN1A5E
        JOIN1A5E:  preds = [*STABILIZE1A5D,COND1A5C]
          goto JOIN1A5F
        JOIN1A5F:  preds = [JOIN1A5E,COND1A59]
          goto JOIN1A60
        JOIN1A60:  preds = [JOIN1A5F,COND1A56]
          int _t1A61#1 = 0;
          bool _t1A63#1 = EQ<int>(len1A4E,_t1A61);
          if _t1A63 then goto ASSIGN1A67 else goto JOIN1A6E
        ASSIGN1A67:  preds = [COND1A65]
          string _t1A66#1 = "(find:)No intersection found:";
          string _t1A68#1 = "/";
          string _t1A6A#1 = "\n";
          Print<[string,int,string,int,string]>(_t1A66,ui1A52,_t1A68,vi1A54,_t1A6A);
          stabilize
          goto JOIN1A6E
        JOIN1A6E:  preds = [*STABILIZE1A6D,COND1A65]
          int _t1A6F#1 = Subscript<int[]>(cells1A46,idx1A50);
          femData:MeshCell cc1A71#2 = Subscript<femData:MeshCell[]>(0cell_a1A42,_t1A6F);
          int _t1A73#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc1A71);
          femData:FuncCell _t1A75#1 = LoadFem<femData:FuncCell>(c1A44,_t1A73);
          self.cc = cc1A71;
          self.fc = _t1A75;
          active
    end start
    method update
        ENTRY1A7A:  preds = []
          image(IMAGE1D<double[3]>) cmap1A7B#17 = globals.cmap1784;
          femData:MeshCell[] 0cell_a1A81#1 = globals.0cell_a1791;
          femData:FemFunc c1A83#1 = globals.c1792;
          real zeroEps1A85#1 = globals.zeroEps177D;
          real intervalEps1A87#4 = globals.intervalEps177E;
          tensor[2][] times1A89#1 = globals.times1780;
          int[] cells1A8B#1 = globals.cells1781;
          tensor[3] mcnear1A8D#2 = globals.mcnear1782;
          tensor[3] mcfar1A8F#1 = globals.mcfar1783;
          real cmin1A91#3 = globals.cmin1785;
          real cmax1A93#2 = globals.cmax1786;
          bool light1A95#1 = globals.light1787;
          real phongKa1A97#1 = globals.phongKa1788;
          real phongKd1A99#1 = globals.phongKd1789;
          real phongKs1A9B#1 = globals.phongKs178A;
          real phongSp1A9D#1 = globals.phongSp178B;
          tensor[3] L1A9F#2 = globals.L179A;
          tensor[3] rayOrig1AA1#4 = self.rayOrig;
          tensor[3] rayVec1AA3#7 = self.rayVec;
          real camNearVsp1AA5#2 = self.camNearVsp;
          real camFarVsp1AA7#1 = self.camFarVsp;
          int offset1AA9#1 = self.offset;
          int len1AAB#1 = self.len;
          int itter1AAD#3 = self.itter;
          int intersectionItter1AAF#2 = self.intersectionItter;
          tensor[2] interval1AB1#1 = self.interval;
          real s1AB3#7 = self.s;
          real e1AB5#5 = self.e;
          femData:MeshCell cc1AB7#3 = self.cc;
          femData:FuncCell fc1AB9#3 = self.fc;
          real out1ABB#2 = self.out;
          tensor[4] rgba1ABD#1 = self.rgba;
          tensor[3][] locs1ABF#1 = self.locs;
          int ui1AC1#1 = self.ui;
          int vi1AC3#1 = self.vi;
          string _t1AC5#1 = "Ui/Vi::";
          string _t1AC7#1 = "/";
          string _t1AC9#11 = "\n";
          Print<[string,int,string,int,string]>(_t1AC5,ui1AC1,_t1AC7,vi1AC3,_t1AC9);
          string _t1ACC#1 = "Interval:";
          tensor[2] _t1ACE#1 = <tensor[2]>[s1AB3,e1AB5];
          Print<[string,tensor[2],string]>(_t1ACC,_t1ACE,_t1AC9);
          string _t1AD1#1 = "inner itter:";
          Print<[string,int,string]>(_t1AD1,intersectionItter1AAF,_t1AC9);
          string _t1AD4#1 = "Outer itter:";
          Print<[string,int,string]>(_t1AD4,itter1AAD,_t1AC9);
          real _t1AD7#1 = VIndex<3,0>(rayOrig1AA1);
          real _t1AD9#1 = VIndex<3,1>(rayOrig1AA1);
          tensor[2] _t1ADB#3 = <tensor[2]>[_t1AD7,_t1AD9];
          real _t1ADD#1 = VIndex<3,0>(rayVec1AA3);
          real _t1ADF#1 = VIndex<3,1>(rayVec1AA3);
          tensor[2] _t1AE1#3 = <tensor[2]>[_t1ADD,_t1ADF];
          tensor[2] op1_e3_l_31AE3#1 = VScale<2>(s1AB3,_t1AE1);
          tensor[2] startRay1AE6#1 = VAdd<2>(_t1ADB,op1_e3_l_31AE3);
          tensor[2] op1_e3_l_31AE9#1 = VScale<2>(e1AB5,_t1AE1);
          tensor[2] endRay1AEC#1 = VAdd<2>(_t1ADB,op1_e3_l_31AE9);
          femData:Mesh _t1AEF#12 = ExtractFem<femData:Mesh,femData:MeshCell>(cc1AB7);
          int _t1AF1#4 = ExtractFemItem<int,CellIndex(MeshCell)>(cc1AB7);
          femData:MeshPos callNewtonPos1AF3#1 = _0A92_msh_newtonInverse1AF4 (startRay1AE6,_t1AF1,_t1AEF);
          tensor[2] refPos1D63#3 = ExtractFemItem<tensor[2],RefPos(Mesh)>(callNewtonPos1AF3);
          femData:MeshPos callNewtonPos1D65#1 = _0A92_msh_newtonInverse1AF4 (endRay1AEC,_t1AF1,_t1AEF);
          tensor[2] refPos1D67#3 = ExtractFemItem<tensor[2],RefPos(Mesh)>(callNewtonPos1D65);
          string _t1D69#1 = "inverses:";
          Print<[string,tensor[2],tensor[2],string]>(_t1D69,refPos1D63,refPos1D67,_t1AC9);
          femData:FemFunc _t1D6C#7 = ExtractFem<femData:FemFunc,femData:FuncCell>(fc1AB9);
          femData:Space _t1D6E#6 = ExtractFem<femData:Space,femData:FemFunc>(_t1D6C);
          int _t1D70#1 = ExtractFemItem<int,CellIndex(FuncCell)>(fc1AB9);
          real _t1D72#3 = VIndex<3,2>(rayVec1AA3);
          real _t1D74#3 = VIndex<3,2>(rayOrig1AA1);
          int ilit1D77#1 = 6;
          int mulRes1D78#6 = IMul(_t1D70,ilit1D77);
          int idx1D7B#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1D6E,mulRes1D78);
          int ilit1D7C#23 = 1;
          int addRes1D7D#1 = IAdd(mulRes1D78,ilit1D7C);
          int idx1D7E#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1D6E,addRes1D7D);
          int ilit1D7F#9 = 2;
          int addRes1D80#1 = IAdd(mulRes1D78,ilit1D7F);
          int idx1D81#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1D6E,addRes1D80);
          int ilit1D82#6 = 3;
          int addRes1D83#1 = IAdd(mulRes1D78,ilit1D82);
          int idx1D84#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1D6E,addRes1D83);
          int ilit1D85#1 = 4;
          int addRes1D86#1 = IAdd(mulRes1D78,ilit1D85);
          int idx1D87#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1D6E,addRes1D86);
          int ilit1D88#1 = 5;
          int addRes1D89#1 = IAdd(mulRes1D78,ilit1D88);
          int idx1D8A#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1D6E,addRes1D89);
          int mulRes1DA6#1 = IMul(ilit1D7C,idx1D7B);
          int mulRes1DA8#1 = IMul(ilit1D7C,idx1D7E);
          int mulRes1DAB#1 = IMul(ilit1D7C,idx1D81);
          int mulRes1DAE#1 = IMul(ilit1D7C,idx1D84);
          int mulRes1DB1#1 = IMul(ilit1D7C,idx1D87);
          int mulRes1DB4#1 = IMul(ilit1D7C,idx1D8A);
          real dof1DB5#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(_t1D6C,mulRes1DA6);
          real dof1DB6#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(_t1D6C,mulRes1DA8);
          real dof1DB7#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(_t1D6C,mulRes1DAB);
          real dof1DB8#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(_t1D6C,mulRes1DAE);
          real dof1DB9#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(_t1D6C,mulRes1DB1);
          real dof1DBA#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(_t1D6C,mulRes1DB4);
          tensor[6] dofs1DBB#5 = <tensor[6]>[dof1DB5,dof1DB6,dof1DB7,dof1DB8,dof1DB9,dof1DBA];
          real varAcc1DD7#4 = VIndex<2,0>(refPos1D63);
          real varAcc1DD8#4 = VIndex<2,1>(refPos1D63);
          real coeff1DD9#6 = 0.2e1;
          real prod21DDB#1 = RMul(varAcc1DD7,varAcc1DD7);
          real one1DDC#33 = 0.1e1;
          real prod1DDD#2 = RMul(prod21DDB,one1DDC);
          real coeff1DDE#10 = 0.4e1;
          real prod1DE0#2 = RMul(varAcc1DD7,varAcc1DD8);
          real coeff1DE1#7 = -0.3e1;
          real prod1DE2#3 = RMul(varAcc1DD7,one1DDC);
          real prod21DE3#1 = RMul(varAcc1DD8,varAcc1DD8);
          real prod1DE4#2 = RMul(one1DDC,prod21DE3);
          real prod1DE5#3 = RMul(one1DDC,varAcc1DD8);
          real prod1DE6#4 = RMul(one1DDC,one1DDC);
          real mult1DE7#7 = RMul(one1DDC,prod1DE6);
          real mult1DE8#1 = RMul(coeff1DE1,prod1DE5);
          real mult1DE9#2 = RMul(coeff1DD9,prod1DE4);
          real mult1DEA#1 = RMul(coeff1DE1,prod1DE2);
          real mult1DEB#2 = RMul(coeff1DDE,prod1DE0);
          real mult1DEC#2 = RMul(coeff1DD9,prod1DDD);
          real sum1DED#1 = RAdd(mult1DEB,mult1DEC);
          real sum1DEE#1 = RAdd(mult1DEA,sum1DED);
          real sum1DEF#1 = RAdd(mult1DE9,sum1DEE);
          real sum1DF0#1 = RAdd(mult1DE8,sum1DEF);
          real sum1DF1#1 = RAdd(mult1DE7,sum1DF0);
          real coeff1DF3#16 = -0.1e1;
          real mult1DF4#1 = RMul(coeff1DF3,prod1DE2);
          real sum1DF5#1 = RAdd(mult1DF4,mult1DEC);
          real mult1DF7#1 = RMul(coeff1DF3,prod1DE5);
          real sum1DF8#1 = RAdd(mult1DF7,mult1DE9);
          real coeff1DFA#11 = -0.4e1;
          real mult1DFB#1 = RMul(coeff1DDE,prod1DE5);
          real mult1DFC#1 = RMul(coeff1DFA,prod1DE4);
          real mult1DFD#2 = RMul(coeff1DFA,prod1DE0);
          real sum1DFE#1 = RAdd(mult1DFC,mult1DFD);
          real sum1DFF#1 = RAdd(mult1DFB,sum1DFE);
          real mult1E01#1 = RMul(coeff1DDE,prod1DE2);
          real mult1E02#1 = RMul(coeff1DFA,prod1DDD);
          real sum1E03#1 = RAdd(mult1DFD,mult1E02);
          real sum1E04#1 = RAdd(mult1E01,sum1E03);
          tensor[6] intermediateCons1E06#1 = <tensor[6]>[sum1DF1,sum1DF5,sum1DF8,mult1DEB,sum1DFF,sum1E04];
          real probe_l_71E38#1 = VDot<6>(dofs1DBB,intermediateCons1E06);
          real op1_e3_l_81E3B#1 = RMul(_t1D72,s1AB3);
          real op1_e3_l_91E3E#1 = RSub(probe_l_71E38,op1_e3_l_81E3B);
          real fa1E41#9 = RSub(op1_e3_l_91E3E,_t1D74);
          real varAcc1E45#4 = VIndex<2,0>(refPos1D67);
          real varAcc1E46#4 = VIndex<2,1>(refPos1D67);
          real prod21E49#1 = RMul(varAcc1E45,varAcc1E45);
          real prod1E4B#2 = RMul(prod21E49,one1DDC);
          real prod1E4E#2 = RMul(varAcc1E45,varAcc1E46);
          real prod1E50#3 = RMul(varAcc1E45,one1DDC);
          real prod21E51#1 = RMul(varAcc1E46,varAcc1E46);
          real prod1E52#2 = RMul(one1DDC,prod21E51);
          real prod1E53#3 = RMul(one1DDC,varAcc1E46);
          real mult1E56#1 = RMul(coeff1DE1,prod1E53);
          real mult1E57#2 = RMul(coeff1DD9,prod1E52);
          real mult1E58#1 = RMul(coeff1DE1,prod1E50);
          real mult1E59#2 = RMul(coeff1DDE,prod1E4E);
          real mult1E5A#2 = RMul(coeff1DD9,prod1E4B);
          real sum1E5B#1 = RAdd(mult1E59,mult1E5A);
          real sum1E5C#1 = RAdd(mult1E58,sum1E5B);
          real sum1E5D#1 = RAdd(mult1E57,sum1E5C);
          real sum1E5E#1 = RAdd(mult1E56,sum1E5D);
          real sum1E5F#1 = RAdd(mult1DE7,sum1E5E);
          real mult1E62#1 = RMul(coeff1DF3,prod1E50);
          real sum1E63#1 = RAdd(mult1E62,mult1E5A);
          real mult1E65#1 = RMul(coeff1DF3,prod1E53);
          real sum1E66#1 = RAdd(mult1E65,mult1E57);
          real mult1E69#1 = RMul(coeff1DDE,prod1E53);
          real mult1E6A#1 = RMul(coeff1DFA,prod1E52);
          real mult1E6B#2 = RMul(coeff1DFA,prod1E4E);
          real sum1E6C#1 = RAdd(mult1E6A,mult1E6B);
          real sum1E6D#1 = RAdd(mult1E69,sum1E6C);
          real mult1E6F#1 = RMul(coeff1DDE,prod1E50);
          real mult1E70#1 = RMul(coeff1DFA,prod1E4B);
          real sum1E71#1 = RAdd(mult1E6B,mult1E70);
          real sum1E72#1 = RAdd(mult1E6F,sum1E71);
          tensor[6] intermediateCons1E74#1 = <tensor[6]>[sum1E5F,sum1E63,sum1E66,mult1E59,sum1E6D,sum1E72];
          real probe_l_71EA6#1 = VDot<6>(dofs1DBB,intermediateCons1E74);
          real op1_e3_l_81EA9#1 = RMul(_t1D72,e1AB5);
          real op1_e3_l_91EAC#1 = RSub(probe_l_71EA6,op1_e3_l_81EA9);
          real fb1EAF#6 = RSub(op1_e3_l_91EAC,_t1D74);
          string _t1EB2#1 = "Vals:";
          tensor[2] _t1EB4#1 = <tensor[2]>[fa1E41,fb1EAF];
          Print<[string,tensor[2],string]>(_t1EB2,_t1EB4,_t1AC9);
          real op1_e3_l_221EB7#1 = RSub(fa1E41,fb1EAF);
          real _t1EBA#1 = Abs<real>(op1_e3_l_221EB7);
          bool _t1EBD#1 = LT<real>(_t1EBA,intervalEps1A87);
          if _t1EBD then goto ASSIGN1EC2 else goto JOIN1ED9
        ASSIGN1EC2:  preds = [COND1EBF]
          real _t1EC0#1 = Abs<real>(fa1E41);
          bool _t1EC3#1 = GT<real>(_t1EC0,intervalEps1A87);
          if _t1EC3 then goto ASSIGN1EC8 else goto JOIN1ED7
        ASSIGN1EC8:  preds = [COND1EC5]
          real _t1EC6#1 = Abs<real>(fb1EAF);
          bool _t1EC9#1 = GT<real>(_t1EC6,intervalEps1A87);
          if _t1EC9 then goto ASSIGN1ECD else goto JOIN1ED5
        ASSIGN1ECD:  preds = [COND1ECB]
          string _t1ECC#1 = "warn\n";
          Print<[string]>(_t1ECC);
          real s1ECF#1 = RAdd(s1AB3,intervalEps1A87);
          self.s = s1ECF;
          active
          goto JOIN1ED5
        JOIN1ED5:  preds = [*ACTIVE1ED3,COND1ECB]
          real s1ED4#1 = phi(s1AB3)
          goto JOIN1ED7
        JOIN1ED7:  preds = [JOIN1ED5,COND1EC5]
          real s1ED6#1 = phi(s1ED4,s1AB3)
          goto JOIN1ED9
        JOIN1ED9:  preds = [JOIN1ED7,COND1EBF]
          real s1ED8#3 = phi(s1ED6,s1AB3)
          real op1_e3_l_381EDA#1 = RMul(s1ED8,fb1EAF);
          real op1_e3_l_391EDD#1 = RMul(e1AB5,fa1E41);
          real op1_e3_l_481EE0#1 = RSub(op1_e3_l_381EDA,op1_e3_l_391EDD);
          real op1_e3_l_491EE3#1 = RSub(fb1EAF,fa1E41);
          real cup1EE6#7 = RDiv(op1_e3_l_481EE0,op1_e3_l_491EE3);
          string _t1EE9#1 = "Mid time:";
          Print<[string,real,string]>(_t1EE9,cup1EE6,_t1AC9);
          tensor[2] op1_e3_l_531EEC#1 = VScale<2>(cup1EE6,_t1AE1);
          tensor[2] midRay1EEF#1 = VAdd<2>(_t1ADB,op1_e3_l_531EEC);
          femData:MeshPos callNewtonPos1EF2#1 = _0A92_msh_newtonInverse1AF4 (midRay1EEF,_t1AF1,_t1AEF);
          tensor[2] refPos1EF4#2 = ExtractFemItem<tensor[2],RefPos(Mesh)>(callNewtonPos1EF2);
          real varAcc1EF7#4 = VIndex<2,0>(refPos1EF4);
          real varAcc1EF8#4 = VIndex<2,1>(refPos1EF4);
          real prod21EFB#1 = RMul(varAcc1EF7,varAcc1EF7);
          real prod1EFD#2 = RMul(prod21EFB,one1DDC);
          real prod1F00#2 = RMul(varAcc1EF7,varAcc1EF8);
          real prod1F02#5 = RMul(varAcc1EF7,one1DDC);
          real prod21F03#1 = RMul(varAcc1EF8,varAcc1EF8);
          real prod1F04#2 = RMul(one1DDC,prod21F03);
          real prod1F05#5 = RMul(one1DDC,varAcc1EF8);
          real mult1F08#1 = RMul(coeff1DE1,prod1F05);
          real mult1F09#2 = RMul(coeff1DD9,prod1F04);
          real mult1F0A#1 = RMul(coeff1DE1,prod1F02);
          real mult1F0B#2 = RMul(coeff1DDE,prod1F00);
          real mult1F0C#2 = RMul(coeff1DD9,prod1EFD);
          real sum1F0D#1 = RAdd(mult1F0B,mult1F0C);
          real sum1F0E#1 = RAdd(mult1F0A,sum1F0D);
          real sum1F0F#1 = RAdd(mult1F09,sum1F0E);
          real sum1F10#1 = RAdd(mult1F08,sum1F0F);
          real sum1F11#1 = RAdd(mult1DE7,sum1F10);
          real mult1F14#1 = RMul(coeff1DF3,prod1F02);
          real sum1F15#1 = RAdd(mult1F14,mult1F0C);
          real mult1F17#1 = RMul(coeff1DF3,prod1F05);
          real sum1F18#1 = RAdd(mult1F17,mult1F09);
          real mult1F1B#4 = RMul(coeff1DDE,prod1F05);
          real mult1F1C#1 = RMul(coeff1DFA,prod1F04);
          real mult1F1D#2 = RMul(coeff1DFA,prod1F00);
          real sum1F1E#1 = RAdd(mult1F1C,mult1F1D);
          real sum1F1F#1 = RAdd(mult1F1B,sum1F1E);
          real mult1F21#4 = RMul(coeff1DDE,prod1F02);
          real mult1F22#1 = RMul(coeff1DFA,prod1EFD);
          real sum1F23#1 = RAdd(mult1F1D,mult1F22);
          real sum1F24#1 = RAdd(mult1F21,sum1F23);
          tensor[6] intermediateCons1F26#1 = <tensor[6]>[sum1F11,sum1F15,sum1F18,mult1F0B,sum1F1F,sum1F24];
          real fmVal1F58#2 = VDot<6>(dofs1DBB,intermediateCons1F26);
          real op1_e3_l_581F5B#1 = RMul(_t1D72,cup1EE6);
          real op1_e3_l_591F5E#1 = RSub(fmVal1F58,op1_e3_l_581F5B);
          real fm1F61#5 = RSub(op1_e3_l_591F5E,_t1D74);
          string _t1F64#1 = "all vals:";
          tensor[3] _t1F66#1 = <tensor[3]>[fa1E41,fm1F61,fb1EAF];
          Print<[string,tensor[3],string]>(_t1F64,_t1F66,_t1AC9);
          int intersectionItter1F6B#3 = IAdd(intersectionItter1AAF,ilit1D7C);
          real _t1F6D#24 = 0.e0;
          bool _t1F6F#2 = GT<real>(fa1E41,_t1F6D);
          if _t1F6F then goto JOIN1F74 else goto ASSIGN2381
        JOIN1F74:  preds = [COND1F71,JOIN2386]
          int _t1F72#1 = phi(ilit1D7C,_t1F73)
          bool _t1F75#2 = GT<real>(fm1F61,_t1F6D);
          if _t1F75 then goto JOIN1F7A else goto ASSIGN2379
        JOIN1F7A:  preds = [COND1F77,JOIN237E]
          int _t1F78#1 = phi(ilit1D7C,_t1F79)
          int _t1F7B#1 = IMul(_t1F72,_t1F78);
          int _t1F7D#6 = 0;
          bool _t1F7F#1 = LT<int>(_t1F7B,_t1F7D);
          if _t1F7F then goto JOIN1F85 else goto COND235E
        JOIN1F85:  preds = [COND1F81,JOIN236B]
          real e1F82#4 = phi(cup1EE6,e1AB5)
          real s1F83#4 = phi(s1ED8,s1F84)
          string _t1F86#1 = "new interval:";
          tensor[2] _t1F88#1 = <tensor[2]>[s1F83,e1F82];
          Print<[string,tensor[2],string]>(_t1F86,_t1F88,_t1AC9);
          real _t1F8B#1 = Abs<real>(fm1F61);
          bool _t1F8E#2 = LT<real>(_t1F8B,zeroEps1A85);
          if _t1F8E then goto ASSIGN1F92 else goto JOIN22D8
        ASSIGN1F92:  preds = [COND1F90]
          tensor[2] grad1F91#1 = <tensor[2]>[_t1F6D,_t1F6D];
          if _t1F8E then goto ASSIGN24D3 else goto JOIN219A
        ASSIGN24D3:  preds = [COND1F93]
          real mult1F9F#1 = RMul(coeff1DE1,prod1DE6);
          real sum1FA2#1 = RAdd(mult1F1B,mult1F21);
          real sum1FA3#2 = RAdd(mult1F9F,sum1FA2);
          real mult1FA6#4 = RMul(coeff1DF3,prod1DE6);
          real sum1FA7#1 = RAdd(mult1FA6,mult1F21);
          real basisEval1FAB#2 = RMul(coeff1DFA,prod1F05);
          real coeff1FAC#2 = -0.8e1;
          real mult1FAD#2 = RMul(coeff1DDE,prod1DE6);
          real mult1FAE#1 = RMul(coeff1FAC,prod1F02);
          real sum1FAF#1 = RAdd(basisEval1FAB,mult1FAE);
          real sum1FB0#1 = RAdd(mult1FAD,sum1FAF);
          real sum1FB3#1 = RAdd(mult1FA6,mult1F1B);
          real mult1FB5#1 = RMul(coeff1FAC,prod1F05);
          real mult1FB6#2 = RMul(coeff1DFA,prod1F02);
          real sum1FB7#1 = RAdd(mult1FB5,mult1FB6);
          real sum1FB8#1 = RAdd(mult1FAD,sum1FB7);
          tensor[6] intermediateCons1FBA#1 = <tensor[6]>[sum1FA3,sum1FA7,_t1F6D,mult1F1B,basisEval1FAB,sum1FB0];
          tensor[6] intermediateCons1FBB#1 = <tensor[6]>[sum1FA3,_t1F6D,sum1FB3,mult1F21,sum1FB8,mult1FB6];
          real vdot1FE8#2 = VDot<6>(dofs1DBB,intermediateCons1FBA);
          real vdot1FEA#2 = VDot<6>(dofs1DBB,intermediateCons1FBB);
          int mulRes1FF3#3 = IMul(_t1AF1,ilit1D82);
          int idx1FF6#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(_t1AEF,mulRes1FF3);
          int addRes1FF8#1 = IAdd(mulRes1FF3,ilit1D7C);
          int idx1FF9#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(_t1AEF,addRes1FF8);
          int addRes1FFB#1 = IAdd(mulRes1FF3,ilit1D7F);
          int idx1FFC#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(_t1AEF,addRes1FFB);
          int mulRes200F#2 = IMul(ilit1D7F,idx1FF6);
          int addRes2012#1 = IAdd(ilit1D7C,mulRes200F);
          real dof_load2013#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1AEF,mulRes200F);
          real dof_load2014#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1AEF,addRes2012);
          int mulRes2017#2 = IMul(ilit1D7F,idx1FF9);
          int addRes2019#1 = IAdd(ilit1D7C,mulRes2017);
          real dof_load201A#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1AEF,mulRes2017);
          real dof_load201B#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1AEF,addRes2019);
          int mulRes201E#2 = IMul(ilit1D7F,idx1FFC);
          int addRes2020#1 = IAdd(ilit1D7C,mulRes201E);
          real dof_load2021#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1AEF,mulRes201E);
          real dof_load2022#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1AEF,addRes2020);
          real r205A#2 = RMul(dof_load2013,mult1FA6);
          real r205D#1 = RMul(dof_load201A,mult1DE7);
          real r2060#1 = RMul(dof_load2021,_t1F6D);
          real r2061#1 = RAdd(r205A,r205D);
          real r2062#3 = RAdd(r2061,r2060);
          real r2066#1 = RMul(dof_load201A,_t1F6D);
          real r2068#1 = RMul(dof_load2021,mult1DE7);
          real r2069#1 = RAdd(r205A,r2066);
          real r206A#3 = RAdd(r2069,r2068);
          real r206D#2 = RMul(dof_load2014,mult1FA6);
          real r206F#1 = RMul(dof_load201B,mult1DE7);
          real r2071#1 = RMul(dof_load2022,_t1F6D);
          real r2072#1 = RAdd(r206D,r206F);
          real r2073#3 = RAdd(r2072,r2071);
          real r2075#1 = RMul(dof_load201B,_t1F6D);
          real r2076#1 = RMul(dof_load2022,mult1DE7);
          real r2077#1 = RAdd(r206D,r2075);
          real r2078#3 = RAdd(r2077,r2076);
          real r20A1#1 = RMul(_t1F6D,r2062);
          real r20A4#1 = RMul(coeff1DF3,r2073);
          real r20A5#2 = RAdd(r20A1,r20A4);
          real r20A7#2 = RMul(_t1F6D,r206A);
          real r20A9#1 = RMul(coeff1DF3,r2078);
          real r20AA#2 = RAdd(r20A7,r20A9);
          real r20AD#1 = RMul(one1DDC,r2062);
          real r20AE#1 = RMul(_t1F6D,r2073);
          real r20AF#2 = RAdd(r20AD,r20AE);
          real r20B0#1 = RMul(one1DDC,r206A);
          real r20B1#2 = RMul(_t1F6D,r2078);
          real r20B2#2 = RAdd(r20B0,r20B1);
          tensor[2] probe_l_1020CB#1 = <tensor[2]>[r2062,r2073];
          real r2123#1 = RMul(one1DDC,r2078);
          real r2124#1 = RAdd(r20A7,r2123);
          real r2126#1 = RMul(coeff1DF3,r206A);
          real r2128#1 = RAdd(r2126,r20B1);
          tensor[2] op1_e3_l_12211D#1 = <tensor[2]>[r2124,r2128];
          real r2139#1 = RMul(_t1F6D,r20A5);
          real r213C#1 = RMul(coeff1DF3,r20AA);
          real r213D#1 = RAdd(r2139,r213C);
          real r213F#1 = RMul(_t1F6D,r20AF);
          real r2141#1 = RMul(coeff1DF3,r20B2);
          real r2142#1 = RAdd(r213F,r2141);
          real r2145#1 = RMul(one1DDC,r20A5);
          real r2146#1 = RMul(_t1F6D,r20AA);
          real r2147#1 = RAdd(r2145,r2146);
          real r2148#1 = RMul(one1DDC,r20AF);
          real r2149#1 = RMul(_t1F6D,r20B2);
          real r214A#1 = RAdd(r2148,r2149);
          real op1_e3_l_142163#4 = VDot<2>(probe_l_1020CB,op1_e3_l_12211D);
          real r2168#1 = RDiv(r213D,op1_e3_l_142163);
          real r216A#1 = RDiv(r2142,op1_e3_l_142163);
          real r216D#1 = RDiv(r2147,op1_e3_l_142163);
          real r216F#1 = RDiv(r214A,op1_e3_l_142163);
          real r2180#1 = RMul(vdot1FE8,r2168);
          real r2183#1 = RMul(vdot1FEA,r216D);
          real r2184#1 = RAdd(r2180,r2183);
          real r2186#1 = RMul(vdot1FE8,r216A);
          real r2188#1 = RMul(vdot1FEA,r216F);
          real r2189#1 = RAdd(r2186,r2188);
          tensor[2] grad217D#1 = <tensor[2]>[r2184,r2189];
          goto JOIN219A
        JOIN219A:  preds = [ASSIGN2197,COND1F93]
          tensor[2] grad2198#3 = phi(grad217D,grad1F91)
          real out2199#3 = phi(fmVal1F58,out1ABB)
          string _t219B#1 = "Out val:";
          Print<[string,real,string]>(_t219B,out2199,_t1AC9);
          string _t219E#1 = "Grad val:";
          Print<[string,tensor[2],string]>(_t219E,grad2198,_t1AC9);
          tensor[3] mcol21A3#1 = <tensor[3]>[one1DDC,one1DDC,one1DDC];
          bool _t21A5#1 = NEQ<real>(cmin1A91,cmax1A93);
          if _t21A5 then goto ASSIGN21AC else goto JOIN2229
        ASSIGN21AC:  preds = [COND21A7]
          real op1_e3_l_521AA#1 = RSub(out2199,cmin1A91);
          real op1_e3_l_621AD#1 = RSub(cmax1A93,cmin1A91);
          real op1_e3_l_721B0#1 = RDiv(op1_e3_l_521AA,op1_e3_l_621AD);
          real op1_e3_l_821B3#1 = RSub(one1DDC,coeff1DF3);
          real op1_e3_l_921B6#1 = RMul(op1_e3_l_721B0,op1_e3_l_821B3);
          real _t21B9#1 = RAdd(coeff1DF3,op1_e3_l_921B6);
          real Mtransform21BC#1 = Transform<IMAGE1D<double[3]>>(cmap1A7B);
          real MxPos21BE#1 = RMul(Mtransform21BC,_t21B9);
          real Ttranslate21C1#1 = Translate<IMAGE1D<double[3]>>(cmap1A7B);
          real imgPos21C3#2 = RAdd(MxPos21BE,Ttranslate21C1);
          real nd21C6#2 = Floor<1>(imgPos21C3);
          real f21C8#2 = RSub(imgPos21C3,nd21C6);
          int n21CB#5 = RealToInt<1>(nd21C6);
          bool isInside21CF#1 = IndexInside<IMAGE1D<double[3]>,2>(n21CB,cmap1A7B);
          if isInside21CF then goto ASSIGN2523 else goto ASSIGN251B
        ASSIGN2523:  preds = [COND21D1]
          int offp21D6#3 = IMul(ilit1D82,n21CB);
          real v0_21D7#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap1A7B,offp21D6);
          int addRes21D9#1 = IAdd(n21CB,ilit1D7C);
          int offp21DA#3 = IMul(ilit1D82,addRes21D9);
          real v1_21DB#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap1A7B,offp21DA);
          tensor[2] v_21DC#1 = <tensor[2]>[v0_21D7,v1_21DB];
          int offp21DD#1 = IAdd(offp21D6,ilit1D7C);
          real v0_21DE#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap1A7B,offp21DD);
          int offp21DF#1 = IAdd(offp21DA,ilit1D7C);
          real v1_21E0#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap1A7B,offp21DF);
          tensor[2] v_21E1#1 = <tensor[2]>[v0_21DE,v1_21E0];
          int offp21E3#1 = IAdd(offp21D6,ilit1D7F);
          real v0_21E4#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap1A7B,offp21E3);
          int offp21E5#1 = IAdd(offp21DA,ilit1D7F);
          real v1_21E6#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap1A7B,offp21E5);
          tensor[2] v_21E7#1 = <tensor[2]>[v0_21E4,v1_21E6];
          tensor[3,2] voxels21E8#1 = <tensor[3,2]>[v_21DC,v_21E1,v_21E7];
          goto JOIN2202
        JOIN2202:  preds = [ASSIGN21FE,ASSIGN235C]
          tensor[3,2] ldvox2200#3 = phi(voxels21E8,voxels2344)
          real idx2205#1 = RSub(f21C8,one1DDC);
          tensor[2] kernX_2203#1 = <tensor[2]>[f21C8,idx2205];
          tensor[2] a0220A#1 = <tensor[2]>[one1DDC,one1DDC];
          tensor[2] a1220B#1 = <tensor[2]>[coeff1DF3,one1DDC];
          tensor[2] prod12210#1 = VMul<2>(kernX_2203,a1220B);
          tensor[2] kevalX_d0_2209#3 = VAdd<2>(a0220A,prod12210);
          tensor[2] projIx221A#1 = ProjectLast<tensor[3,2],[0]>(ldvox2200);
          real vdot221B#1 = VDot<2>(projIx221A,kevalX_d0_2209);
          tensor[2] projIx221C#1 = ProjectLast<tensor[3,2],[1]>(ldvox2200);
          real vdot221D#1 = VDot<2>(projIx221C,kevalX_d0_2209);
          tensor[2] projIx221E#1 = ProjectLast<tensor[3,2],[2]>(ldvox2200);
          real vdot221F#1 = VDot<2>(projIx221E,kevalX_d0_2209);
          tensor[3] mcol2219#1 = <tensor[3]>[vdot221B,vdot221D,vdot221F];
          goto JOIN2229
        JOIN2229:  preds = [ASSIGN2227,COND21A7]
          tensor[3] mcol2228#7 = phi(mcol2219,mcol21A3)
          if light1A95 then goto ASSIGN222C else goto ASSIGN2327
        ASSIGN222C:  preds = [COND222A]
          real _t222B#1 = VIndex<2,0>(grad2198);
          real _t222D#1 = VIndex<2,1>(grad2198);
          tensor[3] _t2231#4 = <tensor[3]>[_t222B,_t222D,coeff1DF3];
          real op1_e3_l_32233#1 = VDot<3>(_t2231,_t2231);
          real op1_e3_l_42236#1 = Sqrt(op1_e3_l_32233);
          real op1_e3_l_52239#2 = RDiv(one1DDC,op1_e3_l_42236);
          real op1_e3_l_6223E#1 = VDot<3>(_t2231,L1A9F);
          real _t2241#1 = RMul(op1_e3_l_52239,op1_e3_l_6223E);
          real _t2244#1 = Max<real>(_t1F6D,_t2241);
          real op1_e3_l_102246#1 = VDot<3>(rayVec1AA3,rayVec1AA3);
          real op1_e3_l_112249#1 = Sqrt(op1_e3_l_102246);
          real op1_e3_l_12224C#1 = RDiv(one1DDC,op1_e3_l_112249);
          tensor[3] op1_e3_l_132251#1 = VScale<3>(op1_e3_l_12224C,rayVec1AA3);
          tensor[3] op1_e3_l_142254#1 = VNeg<3>(op1_e3_l_132251);
          tensor[3] op1_e3_l_202257#3 = VAdd<3>(op1_e3_l_142254,L1A9F);
          real op1_e3_l_22225A#1 = VDot<3>(op1_e3_l_202257,op1_e3_l_202257);
          real op1_e3_l_23225D#1 = Sqrt(op1_e3_l_22225A);
          real op1_e3_l_312260#1 = RDiv(one1DDC,op1_e3_l_23225D);
          real op1_e3_l_322265#1 = VDot<3>(_t2231,op1_e3_l_202257);
          real r2269#1 = RMul(op1_e3_l_52239,op1_e3_l_312260);
          real _t2268#1 = RMul(r2269,op1_e3_l_322265);
          real _t226D#1 = Max<real>(_t1F6D,_t2268);
          real _t226F#1 = MathFn<pow>(_t226D,phongSp1A9D);
          real op1_e3_l_962271#1 = RSub(cup1EE6,camNearVsp1AA5);
          real op1_e3_l_972274#1 = RSub(camFarVsp1AA7,camNearVsp1AA5);
          real op1_e3_l_982277#1 = RDiv(op1_e3_l_962271,op1_e3_l_972274);
          tensor[3] op1_e3_l_99227A#1 = VSub<3>(mcfar1A8F,mcnear1A8D);
          tensor[3] op1_e3_l_100227D#1 = VScale<3>(op1_e3_l_982277,op1_e3_l_99227A);
          tensor[3] op1_e3_l_1012280#3 = VAdd<3>(mcnear1A8D,op1_e3_l_100227D);
          tensor[3] op1_e3_l_1292283#1 = VScale<3>(phongKa1A97,mcol2228);
          real r2287#1 = TensorIndex<tensor[3],[0]>(mcol2228);
          real r2288#2 = TensorIndex<tensor[3],[0]>(op1_e3_l_1012280);
          real r2289#3 = RMul(_t2244,phongKd1A99);
          real r228A#1 = RMul(r2289,r2287);
          real r228B#1 = RMul(r228A,r2288);
          real r228C#1 = TensorIndex<tensor[3],[1]>(mcol2228);
          real r228D#2 = TensorIndex<tensor[3],[1]>(op1_e3_l_1012280);
          real r228E#1 = RMul(r2289,r228C);
          real r228F#1 = RMul(r228E,r228D);
          real r2290#1 = TensorIndex<tensor[3],[2]>(mcol2228);
          real r2291#2 = TensorIndex<tensor[3],[2]>(op1_e3_l_1012280);
          real r2292#1 = RMul(r2289,r2290);
          real r2293#1 = RMul(r2292,r2291);
          tensor[3] op1_e3_l_1302286#1 = <tensor[3]>[r228B,r228F,r2293];
          real r22A5#3 = RMul(_t226F,phongKs1A9B);
          real r22A6#1 = RMul(r22A5,r2288);
          real r22A8#1 = RMul(r22A5,r228D);
          real r22AA#1 = RMul(r22A5,r2291);
          tensor[3] op1_e3_l_13122A3#1 = <tensor[3]>[r22A6,r22A8,r22AA];
          tensor[3] v22B5#1 = VAdd<3>(op1_e3_l_1292283,op1_e3_l_1302286);
          tensor[3] fin22B4#3 = VAdd<3>(v22B5,op1_e3_l_13122A3);
          real _t22B9#1 = VIndex<3,0>(fin22B4);
          real _t22BB#1 = VIndex<3,1>(fin22B4);
          real _t22BD#1 = VIndex<3,2>(fin22B4);
          tensor[4] rgba22BF#1 = <tensor[4]>[_t22B9,_t22BB,_t22BD,one1DDC];
          goto JOIN22C3
        JOIN22C3:  preds = [ASSIGN2535,ASSIGN252D]
          tensor[4] rgba22C1#1 = phi(rgba22BF,rgba22C2)
          tensor[3] op1_e3_l_5322C4#1 = VScale<3>(cup1EE6,rayVec1AA3);
          tensor[3] _t22C7#1 = VAdd<3>(op1_e3_l_5322C4,rayOrig1AA1);
          tensor[3][1] _t22CA#1 = <tensor[3][1]>{_t22C7};
          tensor[3][] _t22CC#1 = MkDynamic<tensor[3],1>(_t22CA);
          self.intersectionItter = intersectionItter1F6B;
          self.s = s1F83;
          self.e = e1F82;
          self.out = out2199;
          self.rgba = rgba22C1;
          self.locs = _t22CC;
          stabilize
          goto JOIN22D8
        JOIN22D8:  preds = [*STABILIZE22D4,COND1F90]
          tensor[3][] locs22D5#3 = phi(locs1ABF)
          tensor[4] rgba22D6#3 = phi(rgba1ABD)
          real out22D7#3 = phi(out1ABB)
          int _t22D9#1 = 32;
          bool _t22DB#1 = GT<int>(intersectionItter1F6B,_t22D9);
          if _t22DB then goto ASSIGN2536 else goto ASSIGN2324
        ASSIGN2536:  preds = [COND22DD]
          int itter22DE#4 = IAdd(itter1AAD,ilit1D7C);
          bool _t22E0#1 = GTE<int>(itter22DE,len1AAB);
          if _t22E0 then goto ASSIGN22E4 else goto JOIN22F1
        ASSIGN22E4:  preds = [COND22E2]
          string _t22E3#1 = "No intersection found\n";
          Print<[string]>(_t22E3);
          string _t22E6#1 = "Fin pixel=============================\n";
          Print<[string]>(_t22E6);
          self.itter = itter22DE;
          self.intersectionItter = _t1F7D;
          self.s = s1F83;
          self.e = e1F82;
          self.out = out22D7;
          self.rgba = rgba22D6;
          self.locs = locs22D5;
          stabilize
          goto JOIN22F1
        JOIN22F1:  preds = [*STABILIZE22F0,COND22E2]
          int _t22F2#2 = IAdd(offset1AA9,itter22DE);
          tensor[2] interval22F4#3 = Subscript<tensor[2][]>(times1A89,_t22F2);
          int _t22F6#1 = Subscript<int[]>(cells1A8B,_t22F2);
          femData:MeshCell cc22F8#2 = Subscript<femData:MeshCell[]>(0cell_a1A81,_t22F6);
          real s22FA#1 = VIndex<2,0>(interval22F4);
          real e22FC#1 = VIndex<2,1>(interval22F4);
          int _t22FE#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc22F8);
          femData:FuncCell _t2300#1 = LoadFem<femData:FuncCell>(c1A83,_t22FE);
          string _t2302#1 = "++++++++++++++++Next interval!+++++++++++++++++++\n";
          Print<[string]>(_t2302);
          self.itter = itter22DE;
          self.intersectionItter = _t1F7D;
          self.interval = interval22F4;
          self.s = s22FA;
          self.e = e22FC;
          self.cc = cc22F8;
          self.fc = _t2300;
          self.out = out22D7;
          self.rgba = rgba22D6;
          self.locs = locs22D5;
          active
          goto JOIN2317
        JOIN2317:  preds = [*ACTIVE230F,MASSIGN2325]
          femData:FuncCell fc2310#1 = phi(fc1AB9)
          femData:MeshCell cc2311#1 = phi(cc1AB7)
          real e2312#1 = phi(e1F82)
          real s2313#1 = phi(s1F83)
          tensor[2] interval2314#1 = phi(interval1AB1)
          int intersectionItter2315#1 = phi(intersectionItter1F6B)
          int itter2316#1 = phi(itter1AAD)
          self.itter = itter2316;
          self.intersectionItter = intersectionItter2315;
          self.interval = interval2314;
          self.s = s2313;
          self.e = e2312;
          self.cc = cc2311;
          self.fc = fc2310;
          self.out = out22D7;
          self.rgba = rgba22D6;
          self.locs = locs22D5;
          active
        ASSIGN2324:  preds = [COND22DD]
          string _t2323#1 = "---------------\n";
          Print<[string]>(_t2323);
          goto JOIN2317
        ASSIGN2327:  preds = [COND222A]
          real _t2326#1 = VIndex<3,0>(mcol2228);
          real _t2328#1 = VIndex<3,1>(mcol2228);
          real _t232A#1 = VIndex<3,2>(mcol2228);
          tensor[4] rgba22C2#1 = <tensor[4]>[_t2326,_t2328,_t232A,one1DDC];
          goto JOIN22C3
        ASSIGN251B:  preds = [COND21D1]
          int ix232F#1 = ControlIndex<IMAGE1D<double[3]>,clamp,0>(cmap1A7B,n21CB);
          int offp2331#3 = IMul(ilit1D82,ix232F);
          real v0_2332#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap1A7B,offp2331);
          int addRes2334#1 = IAdd(n21CB,ilit1D7C);
          int ix2335#1 = ControlIndex<IMAGE1D<double[3]>,clamp,0>(cmap1A7B,addRes2334);
          int offp2336#3 = IMul(ilit1D82,ix2335);
          real v1_2337#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap1A7B,offp2336);
          tensor[2] v_2338#1 = <tensor[2]>[v0_2332,v1_2337];
          int offp2339#1 = IAdd(offp2331,ilit1D7C);
          real v0_233A#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap1A7B,offp2339);
          int offp233B#1 = IAdd(offp2336,ilit1D7C);
          real v1_233C#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap1A7B,offp233B);
          tensor[2] v_233D#1 = <tensor[2]>[v0_233A,v1_233C];
          int offp233F#1 = IAdd(offp2331,ilit1D7F);
          real v0_2340#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap1A7B,offp233F);
          int offp2341#1 = IAdd(offp2336,ilit1D7F);
          real v1_2342#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap1A7B,offp2341);
          tensor[2] v_2343#1 = <tensor[2]>[v0_2340,v1_2342];
          tensor[3,2] voxels2344#1 = <tensor[3,2]>[v_2338,v_233D,v_2343];
          goto JOIN2202
        COND235E:  preds = [COND1F81]
          if _t1F6F then goto JOIN2361 else goto ASSIGN2373
        JOIN2361:  preds = [COND235E,JOIN2377]
          int _t235F#1 = phi(ilit1D7C,_t2360)
          if _t1F75 then goto JOIN2365 else goto ASSIGN236D
        JOIN2365:  preds = [COND2362,JOIN2371]
          int _t2363#1 = phi(ilit1D7C,_t2364)
          int _t2366#1 = IMul(_t235F,_t2363);
          bool _t2368#1 = GT<int>(_t2366,_t1F7D);
          if _t2368 then goto JOIN236B else goto JOIN236B
        JOIN236B:  preds = [COND236A,COND236A]
          real s1F84#1 = phi(cup1EE6,s1ED8)
          goto JOIN1F85
        ASSIGN236D:  preds = [COND2362]
          bool _t236C#1 = LT<real>(fm1F61,_t1F6D);
          if _t236C then goto ASSIGN2370 else goto JOIN2371
        ASSIGN2370:  preds = [COND236E]
          int _t236F#1 = -1;
          goto JOIN2371
        JOIN2371:  preds = [ASSIGN2370,COND236E]
          int _t2364#1 = phi(_t236F,_t1F7D)
          goto JOIN2365
        ASSIGN2373:  preds = [COND235E]
          bool _t2372#1 = LT<real>(fa1E41,_t1F6D);
          if _t2372 then goto ASSIGN2376 else goto JOIN2377
        ASSIGN2376:  preds = [COND2374]
          int _t2375#1 = -1;
          goto JOIN2377
        JOIN2377:  preds = [ASSIGN2376,COND2374]
          int _t2360#1 = phi(_t2375,_t1F7D)
          goto JOIN2361
        ASSIGN2379:  preds = [COND1F77]
          bool _t2378#1 = LT<real>(fm1F61,_t1F6D);
          if _t2378 then goto ASSIGN237C else goto ASSIGN237F
        ASSIGN237C:  preds = [COND237A]
          int _t237B#1 = -1;
          goto JOIN237E
        JOIN237E:  preds = [ASSIGN237C,ASSIGN237F]
          int _t1F79#1 = phi(_t237B,_t237D)
          goto JOIN1F7A
        ASSIGN237F:  preds = [COND237A]
          int _t237D#1 = 0;
          goto JOIN237E
        ASSIGN2381:  preds = [COND1F71]
          bool _t2380#1 = LT<real>(fa1E41,_t1F6D);
          if _t2380 then goto ASSIGN2384 else goto ASSIGN2387
        ASSIGN2384:  preds = [COND2382]
          int _t2383#1 = -1;
          goto JOIN2386
        JOIN2386:  preds = [ASSIGN2384,ASSIGN2387]
          int _t1F73#1 = phi(_t2383,_t2385)
          goto JOIN1F74
        ASSIGN2387:  preds = [COND2382]
          int _t2385#1 = 0;
          goto JOIN2386
    end update
  end ray
## initial strand creation
  GRID(2)
    ENTRY2388:  preds = []
      int iresU2389#1 = globals.iresU1774;
      int iresV238B#1 = globals.iresV1775;
      int _t238D#2 = 0;
      int _t238F#2 = 1;
      int _t2391#1 = ISub(iresU2389,_t238F);
      int[] _t2393#1 = Range(_t238D,_t2391);
    FOREACH2396:  preds = [ASSIGN2394,NEXT239F]
      foreach (vi2395 in _t2393) on exit goto RETURN23A0
      int _t2397#1 = ISub(iresV238B,_t238F);
      int[] _t2399#1 = Range(_t238D,_t2397);
    FOREACH239C:  preds = [ASSIGN239A,NEXT239E]
      foreach (ui239B in _t2399) on exit goto NEXT239F
      new ray(ui239B,vi2395);
      goto FOREACH239C
    NEXT239F:  preds = [FOREACH239C]
      goto FOREACH2396
    RETURN23A0:  preds = [FOREACH2396]
      return
#### end program ####
##### low-ir: after contraction(2) ####
## properties
  GlobalInit StrandArray HasStartMethod ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[]) HasInputs HasGlobals
## globals
  input isoval176E (isoval) = <default>
  input thick176F (thick) = <default>
  input camEye1770 (camEye) = <default>
  input camAt1771 (camAt) = <default>
  input camUp1772 (camUp) = <default>
  input camFOV1773 (camFOV) = <default>
  input iresU1774 (iresU) = <default>
  input iresV1775 (iresV) = <default>
  input camNear1776 (camNear) = <default>
  input camFar1777 (camFar) = <default>
  input refStep1778 (refStep) = <default>
  input rayStep1779 (rayStep) = <default>
  input a177A (a) = <no-default>
  input 0b046F_intermedateGlobal177B (b) = <no-default>
  input 0c0471_intermedateGlobal177C (c) = <no-default>
  input zeroEps177D (zeroEps) = <default>
  input intervalEps177E (intervalEps) = <default>
  input indecies177F (indecies) = <no-default>
  input times1780 (times) = <no-default>
  input cells1781 (cells) = <no-default>
  input mcnear1782 (mcnear) = <default>
  input mcfar1783 (mcfar) = <default>
  input cmap1784 (cmap) = image("/home/teocollin/gitcode/diderot/tests/lipRay/find/cmap.nrrd")
  input cmin1785 (cmin) = <default>
  input cmax1786 (cmax) = <default>
  input light1787 (light) = <default>
  input phongKa1788 (phongKa) = <default>
  input phongKd1789 (phongKd) = <default>
  input phongKs178A (phongKs) = <default>
  input phongSp178B (phongSp) = <default>
  input maxAlpha178C (maxAlpha) = <default>
  input lightVsp178D (lightVsp) = <default>
  input debug178E (debug) = <default>
  input debugU178F (debugU) = <default>
  input debugV1790 (debugV) = <default>
  global femData:MeshCell[] 0cell_a1791
  global femData:FemFunc c1792
  global real camNearVsp1793
  global real camFarVsp1794
  global tensor[3] camN1795
  global tensor[3] camU1796
  global tensor[3] camV1797
  global real camVmax1798
  global real camUmax1799
  global tensor[3] L179A
## functions
  function femData:MeshPos _0A92_msh_newtonInverse1AF4 (tensor[2] pos1AF5#2, int cellInt1AF6#2, femData:Mesh mesh1AF7#12) {
    ENTRY1AF8:  preds = []
      real _t1AF9#2 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
      tensor[2] xn1AFB#1 = <tensor[2]>[_t1AF9,_t1AF9];
      int _t1AFD#1 = 0;
      int _t1AFF#1 = 16;
      int[] _t1B01#1 = Range(_t1AFD,_t1AFF);
    FOREACH1B04:  preds = [ASSIGN1B02,NEXT1D5B]
      foreach (itter1B03 in _t1B01) on exit goto ASSIGN1D60
        tensor[2] xn1C7B#3 = phi(xn1AFB,xn1CEF)
      int ilit1B06#1 = 3;
      int mulRes1B07#3 = IMul(cellInt1AF6,ilit1B06);
      int idx1B0A#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(mesh1AF7,mulRes1B07);
      int ilit1B0B#4 = 1;
      int addRes1B0C#1 = IAdd(mulRes1B07,ilit1B0B);
      int idx1B0D#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(mesh1AF7,addRes1B0C);
      int ilit1B0E#4 = 2;
      int addRes1B0F#1 = IAdd(mulRes1B07,ilit1B0E);
      int idx1B10#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(mesh1AF7,addRes1B0F);
      int mulRes1B23#2 = IMul(ilit1B0E,idx1B0A);
      int addRes1B26#1 = IAdd(ilit1B0B,mulRes1B23);
      real dof_load1B27#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh1AF7,mulRes1B23);
      real dof_load1B28#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh1AF7,addRes1B26);
      int mulRes1B2B#2 = IMul(ilit1B0E,idx1B0D);
      int addRes1B2D#1 = IAdd(ilit1B0B,mulRes1B2B);
      real dof_load1B2E#3 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh1AF7,mulRes1B2B);
      real dof_load1B2F#3 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh1AF7,addRes1B2D);
      int mulRes1B32#2 = IMul(ilit1B0E,idx1B10);
      int addRes1B34#1 = IAdd(ilit1B0B,mulRes1B32);
      real dof_load1B35#3 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh1AF7,mulRes1B32);
      real dof_load1B36#3 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh1AF7,addRes1B34);
      real coeff1B56#8 = -0.1e1;
      real one1B57#15 = 0.1e1;
      real prod1B58#2 = RMul(one1B57,one1B57);
      real basisEval1B59#2 = RMul(coeff1B56,prod1B58);
      real basisEval1B5A#5 = RMul(one1B57,prod1B58);
      real basisEval1B5B#12 = 0.e0;
      real r1B6E#2 = RMul(dof_load1B27,basisEval1B59);
      real r1B71#1 = RMul(dof_load1B2E,basisEval1B5A);
      real r1B74#1 = RMul(dof_load1B35,basisEval1B5B);
      real r1B75#1 = RAdd(r1B6E,r1B71);
      real r1B76#3 = RAdd(r1B75,r1B74);
      real r1B7A#1 = RMul(dof_load1B2E,basisEval1B5B);
      real r1B7C#1 = RMul(dof_load1B35,basisEval1B5A);
      real r1B7D#1 = RAdd(r1B6E,r1B7A);
      real r1B7E#3 = RAdd(r1B7D,r1B7C);
      real r1B81#2 = RMul(dof_load1B28,basisEval1B59);
      real r1B83#1 = RMul(dof_load1B2F,basisEval1B5A);
      real r1B85#1 = RMul(dof_load1B36,basisEval1B5B);
      real r1B86#1 = RAdd(r1B81,r1B83);
      real r1B87#3 = RAdd(r1B86,r1B85);
      real r1B89#1 = RMul(dof_load1B2F,basisEval1B5B);
      real r1B8A#1 = RMul(dof_load1B36,basisEval1B5A);
      real r1B8B#1 = RAdd(r1B81,r1B89);
      real r1B8C#3 = RAdd(r1B8B,r1B8A);
      real r1BB5#1 = RMul(basisEval1B5B,r1B76);
      real r1BB8#1 = RMul(coeff1B56,r1B87);
      real r1BB9#2 = RAdd(r1BB5,r1BB8);
      real r1BBB#2 = RMul(basisEval1B5B,r1B7E);
      real r1BBD#1 = RMul(coeff1B56,r1B8C);
      real r1BBE#2 = RAdd(r1BBB,r1BBD);
      real r1BC1#1 = RMul(one1B57,r1B76);
      real r1BC2#1 = RMul(basisEval1B5B,r1B87);
      real r1BC3#2 = RAdd(r1BC1,r1BC2);
      real r1BC4#1 = RMul(one1B57,r1B7E);
      real r1BC5#2 = RMul(basisEval1B5B,r1B8C);
      real r1BC6#2 = RAdd(r1BC4,r1BC5);
      tensor[2] probe_l_121BDF#1 = <tensor[2]>[r1B76,r1B87];
      real r1C37#1 = RMul(one1B57,r1B8C);
      real r1C38#1 = RAdd(r1BBB,r1C37);
      real r1C3A#1 = RMul(coeff1B56,r1B7E);
      real r1C3C#1 = RAdd(r1C3A,r1BC5);
      tensor[2] op1_e3_l_141C31#1 = <tensor[2]>[r1C38,r1C3C];
      real r1C4D#1 = RMul(basisEval1B5B,r1BB9);
      real r1C50#1 = RMul(coeff1B56,r1BBE);
      real r1C51#1 = RAdd(r1C4D,r1C50);
      real r1C53#1 = RMul(basisEval1B5B,r1BC3);
      real r1C55#1 = RMul(coeff1B56,r1BC6);
      real r1C56#1 = RAdd(r1C53,r1C55);
      real r1C59#1 = RMul(one1B57,r1BB9);
      real r1C5A#1 = RMul(basisEval1B5B,r1BBE);
      real r1C5B#1 = RAdd(r1C59,r1C5A);
      real r1C5C#1 = RMul(one1B57,r1BC3);
      real r1C5D#1 = RMul(basisEval1B5B,r1BC6);
      real r1C5E#1 = RAdd(r1C5C,r1C5D);
      real op1_e3_l_161C77#4 = VDot<2>(probe_l_121BDF,op1_e3_l_141C31);
      real varAcc1C7C#1 = VIndex<2,0>(xn1C7B);
      real varAcc1C7D#1 = VIndex<2,1>(xn1C7B);
      real prod1C81#2 = RMul(varAcc1C7C,one1B57);
      real prod1C83#2 = RMul(one1B57,varAcc1C7D);
      real mult1C86#1 = RMul(coeff1B56,prod1C83);
      real mult1C87#1 = RMul(coeff1B56,prod1C81);
      real sum1C88#1 = RAdd(mult1C86,mult1C87);
      real sum1C89#2 = RAdd(basisEval1B5A,sum1C88);
      real basisEval1C8B#2 = RMul(one1B57,prod1C81);
      real basisEval1C8C#2 = RMul(one1B57,prod1C83);
      real r1CA4#1 = RMul(dof_load1B27,sum1C89);
      real r1CA7#1 = RMul(dof_load1B2E,basisEval1C8B);
      real r1CAA#1 = RMul(dof_load1B35,basisEval1C8C);
      real r1CAB#1 = RAdd(r1CA4,r1CA7);
      real r1CAC#1 = RAdd(r1CAB,r1CAA);
      real r1CAE#1 = RMul(dof_load1B28,sum1C89);
      real r1CB0#1 = RMul(dof_load1B2F,basisEval1C8B);
      real r1CB2#1 = RMul(dof_load1B36,basisEval1C8C);
      real r1CB3#1 = RAdd(r1CAE,r1CB0);
      real r1CB4#1 = RAdd(r1CB3,r1CB2);
      tensor[2] probe_l_171CA1#1 = <tensor[2]>[r1CAC,r1CB4];
      real r1CCC#1 = RDiv(r1C51,op1_e3_l_161C77);
      real r1CCE#1 = RDiv(r1C56,op1_e3_l_161C77);
      tensor[2] tensor1CCF#1 = <tensor[2]>[r1CCC,r1CCE];
      real r1CD1#1 = RDiv(r1C5B,op1_e3_l_161C77);
      real r1CD3#1 = RDiv(r1C5E,op1_e3_l_161C77);
      tensor[2] tensor1CD4#1 = <tensor[2]>[r1CD1,r1CD3];
      tensor[2] op1_e3_l_191CE1#2 = VSub<2>(probe_l_171CA1,pos1AF5);
      real vdot1CE6#1 = VDot<2>(tensor1CCF,op1_e3_l_191CE1);
      real vdot1CE8#1 = VDot<2>(tensor1CD4,op1_e3_l_191CE1);
      tensor[2] op1_e3_l_201CE4#3 = <tensor[2]>[vdot1CE6,vdot1CE8];
      tensor[2] xn1CEF#4 = VSub<2>(xn1C7B,op1_e3_l_201CE4);
      real _t1CF2#2 = 0.1e-7;
      real _t1CF4#1 = RMul(_t1CF2,_t1CF2);
      real _t1D2E#1 = VDot<2>(op1_e3_l_201CE4,op1_e3_l_201CE4);
      bool _t1D31#1 = GTE<real>(_t1CF4,_t1D2E);
      if _t1D31 then goto ASSIGN1D37 else goto JOIN1D5A
    ASSIGN1D37:  preds = [COND1D33]
      real _t1D36#3 = 0.1e-8;
      real _t1D38#1 = RAdd(one1B57,_t1D36);
      tensor[2] _t1D3B#1 = <tensor[2]>[one1B57,one1B57];
      real _t1D3D#1 = VDot<2>(_t1D3B,xn1CEF);
      bool _t1D40#1 = GT<real>(_t1D38,_t1D3D);
      tensor[2] _t1D42#1 = <tensor[2]>[_t1D36,_t1D36];
      tensor[2] _t1D44#2 = VAdd<2>(_t1D42,xn1CEF);
      real _t1D47#1 = VIndex<2,0>(_t1D44);
      real _t1D49#2 = -0.e0;
      bool _t1D4B#1 = GT<real>(_t1D47,_t1D49);
      real _t1D4D#1 = VIndex<2,1>(_t1D44);
      bool _t1D4F#1 = GT<real>(_t1D4D,_t1D49);
      bool _t1D51#1 = BAnd(_t1D4B,_t1D4F);
      bool _t1D53#1 = BAnd(_t1D40,_t1D51);
      if _t1D53 then goto ASSIGN1D57 else goto ASSIGN1D5D
    ASSIGN1D57:  preds = [COND1D55]
      femData:MeshPos _t1D56#1 = ExtractFemItemN<[femData:Mesh,int,tensor[2],tensor[2]],femData:MeshPos,AllBuild(MeshPos),0000,"",[],int>(mesh1AF7,cellInt1AF6,xn1CEF,pos1AF5);
      return _t1D56
      goto JOIN1D59
    JOIN1D59:  preds = [*RETURN(_t1D56)1D58,*RETURN(_t1D5C)1D5E]
      goto JOIN1D5A
    JOIN1D5A:  preds = [*JOIN1D59,COND1D33]
      goto FOREACH1B04
    ASSIGN1D5D:  preds = [COND1D55]
      femData:MeshPos _t1D5C#1 = ExtractFemItemN<[femData:Mesh],femData:MeshPos,InvalidBuild(MeshPos),0000,"",[],int>(mesh1AF7);
      return _t1D5C
      goto JOIN1D59
    ASSIGN1D60:  preds = [FOREACH1B04]
      femData:MeshPos _t1D5F#1 = ExtractFemItemN<[femData:Mesh],femData:MeshPos,InvalidBuild(MeshPos),0000,"",[],int>(mesh1AF7);
      return _t1D5F
}
## input initialization
  ENTRY179D:  preds = []
    real isoval179E#1 = 0.2e0;
    globals.isoval176E = isoval179E;
    real thick17A1#1 = 0.7e-1;
    globals.thick176F = thick17A1;
    real _t17A4#2 = 0.3e1;
    real _t17A6#1 = -0.3e1;
    tensor[3] camEye17A8#1 = <tensor[3]>[_t17A4,_t17A6,_t17A4];
    globals.camEye1770 = camEye17A8;
    real _t17AB#5 = 0.5e0;
    tensor[3] camAt17AD#1 = <tensor[3]>[_t17AB,_t17AB,_t17AB];
    globals.camAt1771 = camAt17AD;
    real _t17B0#5 = 0.e0;
    real _t17B2#7 = 0.1e1;
    tensor[3] camUp17B4#1 = <tensor[3]>[_t17B0,_t17B0,_t17B2];
    globals.camUp1772 = camUp17B4;
    real camFOV17B7#1 = 0.137e2;
    globals.camFOV1773 = camFOV17B7;
    int iresU17BA#2 = 10;
    globals.iresU1774 = iresU17BA;
    globals.iresV1775 = iresU17BA;
    real camNear17BE#1 = -0.2e1;
    globals.camNear1776 = camNear17BE;
    real camFar17C1#1 = 0.5e1;
    globals.camFar1777 = camFar17C1;
    globals.refStep1778 = _t17B2;
    real rayStep17C5#1 = 0.1e-1;
    globals.rayStep1779 = rayStep17C5;
    real zeroEps17C8#2 = 0.1e-10;
    globals.zeroEps177D = zeroEps17C8;
    globals.intervalEps177E = zeroEps17C8;
    tensor[3] mcnear17CC#2 = <tensor[3]>[_t17B2,_t17B2,_t17B2];
    globals.mcnear1782 = mcnear17CC;
    globals.mcfar1783 = mcnear17CC;
    globals.cmin1785 = _t17B0;
    globals.cmax1786 = _t17B2;
    bool light17D2#2 = false;
    globals.light1787 = light17D2;
    globals.phongKa1788 = _t17AB;
    globals.phongKd1789 = _t17AB;
    globals.phongKs178A = _t17B0;
    real phongSp17D8#1 = 0.6e2;
    globals.phongSp178B = phongSp17D8;
    globals.maxAlpha178C = _t17B2;
    real _t17DC#1 = 0.369e1;
    real _t17DE#1 = 0.153e1;
    tensor[3] lightVsp17E0#1 = <tensor[3]>[_t17B0,_t17DC,_t17DE];
    globals.lightVsp178D = lightVsp17E0;
    globals.debug178E = light17D2;
    int debugU17E4#1 = 8;
    globals.debugU178F = debugU17E4;
    int debugV17E7#1 = 2;
    globals.debugV1790 = debugV17E7;
    return
## global-variable initialization
  ENTRY17EB:  preds = []
    tensor[3] camEye17EC#1 = globals.camEye1770;
    tensor[3] camAt17EE#1 = globals.camAt1771;
    tensor[3] camUp17F0#3 = globals.camUp1772;
    real camFOV17F2#1 = globals.camFOV1773;
    int iresU17F4#1 = globals.iresU1774;
    int iresV17F6#1 = globals.iresV1775;
    real camNear17F8#1 = globals.camNear1776;
    real camFar17FA#1 = globals.camFar1777;
    femData:Mesh a17FC#3 = globals.a177A;
    femData:Space 0b046F_intermedateGlobal17FE#1 = globals.0b046F_intermedateGlobal177B;
    femData:FemFunc 0c0471_intermedateGlobal1800#1 = globals.0c0471_intermedateGlobal177C;
    tensor[3] lightVsp1804#5 = globals.lightVsp178D;
    int _t1806#1 = 0;
    int _t1808#1 = 1;
    int _t180A#1 = ExtractFemItem<int,NumCell(Mesh)>(a17FC);
    int _t180C#1 = ISub(_t180A,_t1808);
    int[] _t180E#1 = Range(_t1806,_t180C);
    femData:MeshCell[] _t1810#1 = <femData:MeshCell[]>{};
  FOREACH1813:  preds = [ASSIGN1811,NEXT1819]
    foreach (_t1812 in _t180E) on exit goto GASSIGN181A
      femData:MeshCell[] _t1817#2 = phi(_t1810,_t1816)
    femData:MeshCell _t1814#1 = LoadFem<femData:MeshCell>(a17FC,_t1812);
    femData:MeshCell[] _t1816#1 = Append<femData:MeshCell>(_t1817,_t1814);
    goto FOREACH1813
  GASSIGN181A:  preds = [FOREACH1813]
    globals.0cell_a1791 = _t1817;
    femData:Space b181B#1 = LoadFem<femData:Space>(0b046F_intermedateGlobal17FE,a17FC);
    femData:FemFunc c181D#1 = LoadFem<femData:FemFunc>(0c0471_intermedateGlobal1800,b181B);
    globals.c1792 = c181D;
    tensor[3] op1_e3_l_31820#9 = VSub<3>(camAt17EE,camEye17EC);
    real op1_e3_l_51823#1 = VDot<3>(op1_e3_l_31820,op1_e3_l_31820);
    real op1_e3_l_61826#5 = Sqrt(op1_e3_l_51823);
    real camNearVsp1829#1 = RAdd(camNear17F8,op1_e3_l_61826);
    globals.camNearVsp1793 = camNearVsp1829;
    real camFarVsp182D#1 = RAdd(camFar17FA,op1_e3_l_61826);
    globals.camFarVsp1794 = camFarVsp182D;
    real realLit1832#9 = 0.1e1;
    real op1_e3_l_91831#6 = RDiv(realLit1832,op1_e3_l_61826);
    tensor[3] camN1836#4 = VScale<3>(op1_e3_l_91831,op1_e3_l_31820);
    globals.camN1795 = camN1836;
    real realLit183B#6 = 0.e0;
    real r183C#3 = TensorIndex<tensor[3],[0]>(camUp17F0);
    real r183D#3 = RMul(realLit183B,r183C);
    real r183E#3 = TensorIndex<tensor[3],[1]>(camUp17F0);
    real r183F#3 = RMul(realLit183B,r183E);
    real r1840#3 = TensorIndex<tensor[3],[2]>(camUp17F0);
    real r1841#5 = RMul(realLit183B,r1840);
    real r1842#3 = RAdd(r183D,r183F);
    real r1843#3 = RAdd(r1842,r1841);
    real r1845#1 = RMul(realLit1832,r1840);
    real r1846#1 = RAdd(r1842,r1845);
    real realLit1847#6 = -0.1e1;
    real r1848#1 = RMul(realLit1847,r183E);
    real r1849#1 = RAdd(r183D,r1848);
    real r184A#1 = RAdd(r1849,r1841);
    tensor[3] tensor184B#1 = <tensor[3]>[r1843,r1846,r184A];
    real r184C#1 = RMul(realLit1847,r1840);
    real r184D#1 = RAdd(r1842,r184C);
    real r184E#1 = RMul(realLit1832,r183C);
    real r184F#1 = RAdd(r184E,r183F);
    real r1850#1 = RAdd(r184F,r1841);
    tensor[3] tensor1851#1 = <tensor[3]>[r184D,r1843,r1850];
    real r1852#1 = RMul(realLit1832,r183E);
    real r1853#1 = RAdd(r183D,r1852);
    real r1854#1 = RAdd(r1853,r1841);
    real r1855#1 = RMul(realLit1847,r183C);
    real r1856#1 = RAdd(r1855,r183F);
    real r1857#1 = RAdd(r1856,r1841);
    tensor[3] tensor1858#1 = <tensor[3]>[r1854,r1857,r1843];
    real vdot187B#1 = VDot<3>(op1_e3_l_31820,tensor184B);
    real vdot187D#1 = VDot<3>(op1_e3_l_31820,tensor1851);
    real vdot187F#1 = VDot<3>(op1_e3_l_31820,tensor1858);
    tensor[3] op1_e3_l_171879#6 = <tensor[3]>[vdot187B,vdot187D,vdot187F];
    real op1_e3_l_341888#1 = VDot<3>(op1_e3_l_171879,op1_e3_l_171879);
    real r188C#1 = RMul(op1_e3_l_91831,op1_e3_l_91831);
    real op1_e3_l_35188B#1 = RMul(r188C,op1_e3_l_341888);
    real op1_e3_l_361890#1 = Sqrt(op1_e3_l_35188B);
    tensor[3] op1_e3_l_371893#1 = VScale<3>(op1_e3_l_91831,op1_e3_l_171879);
    real op1_e3_l_381896#2 = RDiv(realLit1832,op1_e3_l_361890);
    tensor[3] camU189B#4 = VScale<3>(op1_e3_l_381896,op1_e3_l_371893);
    globals.camU1796 = camU189B;
    real r18A1#3 = TensorIndex<tensor[3],[0]>(op1_e3_l_31820);
    real r18A2#3 = RMul(realLit183B,r18A1);
    real r18A3#3 = TensorIndex<tensor[3],[1]>(op1_e3_l_31820);
    real r18A4#3 = RMul(realLit183B,r18A3);
    real r18A5#3 = TensorIndex<tensor[3],[2]>(op1_e3_l_31820);
    real r18A6#5 = RMul(realLit183B,r18A5);
    real r18A7#3 = RAdd(r18A2,r18A4);
    real r18A8#3 = RAdd(r18A7,r18A6);
    real r18AA#1 = RMul(realLit1832,r18A5);
    real r18AB#1 = RAdd(r18A7,r18AA);
    real r18AD#1 = RMul(realLit1847,r18A3);
    real r18AE#1 = RAdd(r18A2,r18AD);
    real r18AF#1 = RAdd(r18AE,r18A6);
    tensor[3] tensor18B0#1 = <tensor[3]>[r18A8,r18AB,r18AF];
    real r18B1#1 = RMul(realLit1847,r18A5);
    real r18B2#1 = RAdd(r18A7,r18B1);
    real r18B3#1 = RMul(realLit1832,r18A1);
    real r18B4#1 = RAdd(r18B3,r18A4);
    real r18B5#1 = RAdd(r18B4,r18A6);
    tensor[3] tensor18B6#1 = <tensor[3]>[r18B2,r18A8,r18B5];
    real r18B7#1 = RMul(realLit1832,r18A3);
    real r18B8#1 = RAdd(r18A2,r18B7);
    real r18B9#1 = RAdd(r18B8,r18A6);
    real r18BA#1 = RMul(realLit1847,r18A1);
    real r18BB#1 = RAdd(r18BA,r18A4);
    real r18BC#1 = RAdd(r18BB,r18A6);
    tensor[3] tensor18BD#1 = <tensor[3]>[r18B9,r18BC,r18A8];
    real vdot18E0#1 = VDot<3>(op1_e3_l_171879,tensor18B0);
    real vdot18E2#1 = VDot<3>(op1_e3_l_171879,tensor18B6);
    real vdot18E4#1 = VDot<3>(op1_e3_l_171879,tensor18BD);
    tensor[3] op1_e3_l_4718DE#1 = <tensor[3]>[vdot18E0,vdot18E2,vdot18E4];
    tensor[3] op1_e3_l_5018ED#3 = VScale<3>(op1_e3_l_91831,op1_e3_l_4718DE);
    real r18F1#1 = TensorIndex<tensor[3],[0]>(op1_e3_l_5018ED);
    real r18F2#3 = RMul(op1_e3_l_381896,op1_e3_l_91831);
    real r18F3#2 = RMul(r18F2,r18F1);
    real r18F4#1 = TensorIndex<tensor[3],[1]>(op1_e3_l_5018ED);
    real r18F5#2 = RMul(r18F2,r18F4);
    real r18F6#1 = TensorIndex<tensor[3],[2]>(op1_e3_l_5018ED);
    real r18F7#2 = RMul(r18F2,r18F6);
    tensor[3] camV18F0#1 = <tensor[3]>[r18F3,r18F5,r18F7];
    globals.camV1797 = camV18F0;
    real _t1902#1 = 0.314159265358979323846264338327950288e1;
    real _t1904#1 = 0.36e3;
    real op1_e3_l_51906#1 = RMul(camFOV17F2,_t1902);
    real op1_e3_l_61909#1 = RDiv(op1_e3_l_51906,_t1904);
    real op1_e3_l_10190C#2 = Tan(op1_e3_l_61909);
    real camVmax190F#1 = RMul(op1_e3_l_10190C,op1_e3_l_61826);
    globals.camVmax1798 = camVmax190F;
    real _t1913#1 = IntToReal(iresU17F4);
    real _t1915#1 = IntToReal(iresV17F6);
    real r1918#1 = RMul(_t1913,op1_e3_l_10190C);
    real op1_e3_l_141917#1 = RMul(r1918,op1_e3_l_61826);
    real camUmax191C#1 = RDiv(op1_e3_l_141917,_t1915);
    globals.camUmax1799 = camUmax191C;
    real op1_e3_l_31926#1 = VDot<3>(lightVsp1804,lightVsp1804);
    real op1_e3_l_41929#1 = Sqrt(op1_e3_l_31926);
    real op1_e3_l_5192C#1 = RDiv(realLit1832,op1_e3_l_41929);
    real r1932#1 = VIndex<3,0>(camU189B);
    real r1933#3 = TensorIndex<tensor[3],[0]>(lightVsp1804);
    real r1934#1 = RMul(r1932,r1933);
    real r1936#3 = TensorIndex<tensor[3],[1]>(lightVsp1804);
    real r1937#1 = RMul(r18F3,r1936);
    real r1938#1 = VIndex<3,0>(camN1836);
    real r1939#3 = TensorIndex<tensor[3],[2]>(lightVsp1804);
    real r193A#1 = RMul(r1938,r1939);
    real r193B#1 = RAdd(r1934,r1937);
    real r193C#1 = RAdd(r193B,r193A);
    real r193D#1 = VIndex<3,1>(camU189B);
    real r193E#1 = RMul(r193D,r1933);
    real r1940#1 = RMul(r18F5,r1936);
    real r1941#1 = VIndex<3,1>(camN1836);
    real r1942#1 = RMul(r1941,r1939);
    real r1943#1 = RAdd(r193E,r1940);
    real r1944#1 = RAdd(r1943,r1942);
    real r1945#1 = VIndex<3,2>(camU189B);
    real r1946#1 = RMul(r1945,r1933);
    real r1948#1 = RMul(r18F7,r1936);
    real r1949#1 = VIndex<3,2>(camN1836);
    real r194A#1 = RMul(r1949,r1939);
    real r194B#1 = RAdd(r1946,r1948);
    real r194C#1 = RAdd(r194B,r194A);
    tensor[3] op1_e3_l_61931#1 = <tensor[3]>[r193C,r1944,r194C];
    tensor[3] L196A#1 = VScale<3>(op1_e3_l_5192C,op1_e3_l_61931);
    globals.L179A = L196A;
    return
## strand
  strand ray (int ui1971#3, int vi1972#4)
    state:
      real rayU;
      real rayV;
      tensor[3] UV;
      tensor[3] rayOrig;
      tensor[3] rayVec;
      real camNearVsp;
      real camFarVsp;
      int offset;
      int len;
      int itter;
      int intersectionItter;
      int idx;
      tensor[2] interval;
      real s;
      real e;
      femData:MeshCell cc;
      femData:FuncCell fc;
      output real out;
      output tensor[4] rgba;
      output tensor[3][] locs;
      int ui;
      int vi;
    state init
      ENTRY1989:  preds = []
        tensor[3] camEye198A#1 = globals.camEye1770;
        int iresU198C#2 = globals.iresU1774;
        int iresV198E#3 = globals.iresV1775;
        femData:MeshCell[] 0cell_a1990#1 = globals.0cell_a1791;
        femData:FemFunc c1992#1 = globals.c1792;
        int[] indecies1994#2 = globals.indecies177F;
        tensor[2][] times1996#1 = globals.times1780;
        real camNearVsp1998#1 = globals.camNearVsp1793;
        real camFarVsp199A#1 = globals.camFarVsp1794;
        tensor[3] camN199C#1 = globals.camN1795;
        tensor[3] camU199E#1 = globals.camU1796;
        tensor[3] camV19A0#1 = globals.camV1797;
        real camVmax19A2#2 = globals.camVmax1798;
        real camUmax19A4#2 = globals.camUmax1799;
        real _t19A6#4 = -0.5e0;
        real _t19A8#1 = IntToReal(ui1971);
        real _t19AA#1 = IntToReal(iresU198C);
        real _t19AC#2 = 0.5e0;
        real op1_e3_l_619AE#1 = RSub(_t19AA,_t19AC);
        real op1_e3_l_719B1#1 = RSub(_t19A8,_t19A6);
        real op1_e3_l_819B4#1 = RSub(op1_e3_l_619AE,_t19A6);
        real op1_e3_l_919B7#2 = RNeg(camUmax19A4);
        real op1_e3_l_1019BA#1 = RDiv(op1_e3_l_719B1,op1_e3_l_819B4);
        real op1_e3_l_1119BD#1 = RSub(camUmax19A4,op1_e3_l_919B7);
        real op1_e3_l_1319C0#1 = RMul(op1_e3_l_1019BA,op1_e3_l_1119BD);
        real rayU19C3#2 = RAdd(op1_e3_l_919B7,op1_e3_l_1319C0);
        real _t19C6#1 = IntToReal(vi1972);
        real _t19C8#1 = IntToReal(iresV198E);
        real op1_e3_l_619CA#1 = RSub(_t19C8,_t19AC);
        real op1_e3_l_719CD#1 = RSub(_t19C6,_t19A6);
        real op1_e3_l_819D0#1 = RSub(op1_e3_l_619CA,_t19A6);
        real op1_e3_l_919D3#2 = RNeg(camVmax19A2);
        real op1_e3_l_1019D6#1 = RDiv(op1_e3_l_719CD,op1_e3_l_819D0);
        real op1_e3_l_1119D9#1 = RSub(camVmax19A2,op1_e3_l_919D3);
        real op1_e3_l_1319DC#1 = RMul(op1_e3_l_1019D6,op1_e3_l_1119D9);
        real rayV19DF#2 = RAdd(op1_e3_l_919D3,op1_e3_l_1319DC);
        tensor[3] op1_e3_l_3219F1#2 = VScale<3>(rayU19C3,camU199E);
        tensor[3] op1_e3_l_3319F4#2 = VScale<3>(rayV19DF,camV19A0);
        tensor[3] UV19F7#1 = VAdd<3>(op1_e3_l_3219F1,op1_e3_l_3319F4);
        tensor[3] v19FB#1 = VAdd<3>(camEye198A,op1_e3_l_3219F1);
        tensor[3] rayOrig19FA#1 = VAdd<3>(v19FB,op1_e3_l_3319F4);
        real _t19FF#8 = 0.e0;
        tensor[3] _t1A01#1 = <tensor[3]>[_t19FF,_t19FF,_t19FF];
        tensor[3] rayVec1A03#1 = VAdd<3>(camN199C,_t1A01);
        int _t1A06#2 = IMul(ui1971,iresV198E);
        int _t1A08#1 = IAdd(_t1A06,vi1972);
        int offset1A0A#3 = Subscript<int[]>(indecies1994,_t1A08);
        int _t1A0C#1 = IMul(iresU198C,iresV198E);
        int _t1A0E#1 = IAdd(_t1A0C,_t1A06);
        int _t1A10#1 = IAdd(_t1A0E,vi1972);
        int len1A12#1 = Subscript<int[]>(indecies1994,_t1A10);
        int itter1A14#3 = 0;
        tensor[2] interval1A18#3 = Subscript<tensor[2][]>(times1996,offset1A0A);
        real s1A1A#1 = VIndex<2,0>(interval1A18);
        real e1A1C#1 = VIndex<2,1>(interval1A18);
        femData:MeshCell cc1A1E#2 = Subscript<femData:MeshCell[]>(0cell_a1990,itter1A14);
        int _t1A20#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc1A1E);
        femData:FuncCell _t1A22#1 = LoadFem<femData:FuncCell>(c1992,_t1A20);
        tensor[4] rgba1A24#1 = <tensor[4]>[_t19FF,_t19FF,_t19FF,_t19FF];
        tensor[3][0] _t1A26#1 = <tensor[3][0]>{};
        tensor[3][] _t1A28#1 = MkDynamic<tensor[3],0>(_t1A26);
        self.rayU = rayU19C3;
        self.rayV = rayV19DF;
        self.UV = UV19F7;
        self.rayOrig = rayOrig19FA;
        self.rayVec = rayVec1A03;
        self.camNearVsp = camNearVsp1998;
        self.camFarVsp = camFarVsp199A;
        self.offset = offset1A0A;
        self.len = len1A12;
        self.itter = itter1A14;
        self.intersectionItter = itter1A14;
        self.idx = offset1A0A;
        self.interval = interval1A18;
        self.s = s1A1A;
        self.e = e1A1C;
        self.cc = cc1A1E;
        self.fc = _t1A22;
        self.out = _t19FF;
        self.rgba = rgba1A24;
        self.locs = _t1A28;
        self.ui = ui1971;
        self.vi = vi1972;
        return
    end state init
    method start
        ENTRY1A41:  preds = []
          femData:MeshCell[] 0cell_a1A42#1 = globals.0cell_a1791;
          femData:FemFunc c1A44#1 = globals.c1792;
          int[] cells1A46#1 = globals.cells1781;
          bool debug1A48#1 = globals.debug178E;
          int debugU1A4A#1 = globals.debugU178F;
          int debugV1A4C#1 = globals.debugV1790;
          int len1A4E#1 = self.len;
          int idx1A50#1 = self.idx;
          int ui1A52#2 = self.ui;
          int vi1A54#2 = self.vi;
          if debug1A48 then goto ASSIGN1A58 else goto JOIN1A60
        ASSIGN1A58:  preds = [COND1A56]
          bool _t1A57#1 = NEQ<int>(ui1A52,debugU1A4A);
          if _t1A57 then goto ASSIGN1A5B else goto JOIN1A5F
        ASSIGN1A5B:  preds = [COND1A59]
          bool _t1A5A#1 = NEQ<int>(vi1A54,debugV1A4C);
          if _t1A5A then goto STABILIZE1A5D else goto JOIN1A5E
        STABILIZE1A5D:  preds = [COND1A5C]
          stabilize
          goto JOIN1A5E
        JOIN1A5E:  preds = [*STABILIZE1A5D,COND1A5C]
          goto JOIN1A5F
        JOIN1A5F:  preds = [JOIN1A5E,COND1A59]
          goto JOIN1A60
        JOIN1A60:  preds = [JOIN1A5F,COND1A56]
          int _t1A61#1 = 0;
          bool _t1A63#1 = EQ<int>(len1A4E,_t1A61);
          if _t1A63 then goto ASSIGN1A67 else goto JOIN1A6E
        ASSIGN1A67:  preds = [COND1A65]
          string _t1A66#1 = "(find:)No intersection found:";
          string _t1A68#1 = "/";
          string _t1A6A#1 = "\n";
          Print<[string,int,string,int,string]>(_t1A66,ui1A52,_t1A68,vi1A54,_t1A6A);
          stabilize
          goto JOIN1A6E
        JOIN1A6E:  preds = [*STABILIZE1A6D,COND1A65]
          int _t1A6F#1 = Subscript<int[]>(cells1A46,idx1A50);
          femData:MeshCell cc1A71#2 = Subscript<femData:MeshCell[]>(0cell_a1A42,_t1A6F);
          int _t1A73#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc1A71);
          femData:FuncCell _t1A75#1 = LoadFem<femData:FuncCell>(c1A44,_t1A73);
          self.cc = cc1A71;
          self.fc = _t1A75;
          active
    end start
    method update
        ENTRY1A7A:  preds = []
          image(IMAGE1D<double[3]>) cmap1A7B#17 = globals.cmap1784;
          femData:MeshCell[] 0cell_a1A81#1 = globals.0cell_a1791;
          femData:FemFunc c1A83#1 = globals.c1792;
          real zeroEps1A85#1 = globals.zeroEps177D;
          real intervalEps1A87#4 = globals.intervalEps177E;
          tensor[2][] times1A89#1 = globals.times1780;
          int[] cells1A8B#1 = globals.cells1781;
          tensor[3] mcnear1A8D#2 = globals.mcnear1782;
          tensor[3] mcfar1A8F#1 = globals.mcfar1783;
          real cmin1A91#3 = globals.cmin1785;
          real cmax1A93#2 = globals.cmax1786;
          bool light1A95#1 = globals.light1787;
          real phongKa1A97#1 = globals.phongKa1788;
          real phongKd1A99#1 = globals.phongKd1789;
          real phongKs1A9B#1 = globals.phongKs178A;
          real phongSp1A9D#1 = globals.phongSp178B;
          tensor[3] L1A9F#2 = globals.L179A;
          tensor[3] rayOrig1AA1#4 = self.rayOrig;
          tensor[3] rayVec1AA3#7 = self.rayVec;
          real camNearVsp1AA5#2 = self.camNearVsp;
          real camFarVsp1AA7#1 = self.camFarVsp;
          int offset1AA9#1 = self.offset;
          int len1AAB#1 = self.len;
          int itter1AAD#3 = self.itter;
          int intersectionItter1AAF#2 = self.intersectionItter;
          tensor[2] interval1AB1#1 = self.interval;
          real s1AB3#7 = self.s;
          real e1AB5#5 = self.e;
          femData:MeshCell cc1AB7#3 = self.cc;
          femData:FuncCell fc1AB9#3 = self.fc;
          real out1ABB#2 = self.out;
          tensor[4] rgba1ABD#1 = self.rgba;
          tensor[3][] locs1ABF#1 = self.locs;
          int ui1AC1#1 = self.ui;
          int vi1AC3#1 = self.vi;
          string _t1AC5#1 = "Ui/Vi::";
          string _t1AC7#1 = "/";
          string _t1AC9#11 = "\n";
          Print<[string,int,string,int,string]>(_t1AC5,ui1AC1,_t1AC7,vi1AC3,_t1AC9);
          string _t1ACC#1 = "Interval:";
          tensor[2] _t1ACE#1 = <tensor[2]>[s1AB3,e1AB5];
          Print<[string,tensor[2],string]>(_t1ACC,_t1ACE,_t1AC9);
          string _t1AD1#1 = "inner itter:";
          Print<[string,int,string]>(_t1AD1,intersectionItter1AAF,_t1AC9);
          string _t1AD4#1 = "Outer itter:";
          Print<[string,int,string]>(_t1AD4,itter1AAD,_t1AC9);
          real _t1AD7#1 = VIndex<3,0>(rayOrig1AA1);
          real _t1AD9#1 = VIndex<3,1>(rayOrig1AA1);
          tensor[2] _t1ADB#3 = <tensor[2]>[_t1AD7,_t1AD9];
          real _t1ADD#1 = VIndex<3,0>(rayVec1AA3);
          real _t1ADF#1 = VIndex<3,1>(rayVec1AA3);
          tensor[2] _t1AE1#3 = <tensor[2]>[_t1ADD,_t1ADF];
          tensor[2] op1_e3_l_31AE3#1 = VScale<2>(s1AB3,_t1AE1);
          tensor[2] startRay1AE6#1 = VAdd<2>(_t1ADB,op1_e3_l_31AE3);
          tensor[2] op1_e3_l_31AE9#1 = VScale<2>(e1AB5,_t1AE1);
          tensor[2] endRay1AEC#1 = VAdd<2>(_t1ADB,op1_e3_l_31AE9);
          femData:Mesh _t1AEF#12 = ExtractFem<femData:Mesh,femData:MeshCell>(cc1AB7);
          int _t1AF1#4 = ExtractFemItem<int,CellIndex(MeshCell)>(cc1AB7);
          femData:MeshPos callNewtonPos1AF3#1 = _0A92_msh_newtonInverse1AF4 (startRay1AE6,_t1AF1,_t1AEF);
          tensor[2] refPos1D63#3 = ExtractFemItem<tensor[2],RefPos(Mesh)>(callNewtonPos1AF3);
          femData:MeshPos callNewtonPos1D65#1 = _0A92_msh_newtonInverse1AF4 (endRay1AEC,_t1AF1,_t1AEF);
          tensor[2] refPos1D67#3 = ExtractFemItem<tensor[2],RefPos(Mesh)>(callNewtonPos1D65);
          string _t1D69#1 = "inverses:";
          Print<[string,tensor[2],tensor[2],string]>(_t1D69,refPos1D63,refPos1D67,_t1AC9);
          femData:FemFunc _t1D6C#7 = ExtractFem<femData:FemFunc,femData:FuncCell>(fc1AB9);
          femData:Space _t1D6E#6 = ExtractFem<femData:Space,femData:FemFunc>(_t1D6C);
          int _t1D70#1 = ExtractFemItem<int,CellIndex(FuncCell)>(fc1AB9);
          real _t1D72#3 = VIndex<3,2>(rayVec1AA3);
          real _t1D74#3 = VIndex<3,2>(rayOrig1AA1);
          int ilit1D77#1 = 6;
          int mulRes1D78#6 = IMul(_t1D70,ilit1D77);
          int idx1D7B#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1D6E,mulRes1D78);
          int ilit1D7C#23 = 1;
          int addRes1D7D#1 = IAdd(mulRes1D78,ilit1D7C);
          int idx1D7E#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1D6E,addRes1D7D);
          int ilit1D7F#9 = 2;
          int addRes1D80#1 = IAdd(mulRes1D78,ilit1D7F);
          int idx1D81#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1D6E,addRes1D80);
          int ilit1D82#6 = 3;
          int addRes1D83#1 = IAdd(mulRes1D78,ilit1D82);
          int idx1D84#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1D6E,addRes1D83);
          int ilit1D85#1 = 4;
          int addRes1D86#1 = IAdd(mulRes1D78,ilit1D85);
          int idx1D87#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1D6E,addRes1D86);
          int ilit1D88#1 = 5;
          int addRes1D89#1 = IAdd(mulRes1D78,ilit1D88);
          int idx1D8A#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1D6E,addRes1D89);
          int mulRes1DA6#1 = IMul(ilit1D7C,idx1D7B);
          int mulRes1DA8#1 = IMul(ilit1D7C,idx1D7E);
          int mulRes1DAB#1 = IMul(ilit1D7C,idx1D81);
          int mulRes1DAE#1 = IMul(ilit1D7C,idx1D84);
          int mulRes1DB1#1 = IMul(ilit1D7C,idx1D87);
          int mulRes1DB4#1 = IMul(ilit1D7C,idx1D8A);
          real dof1DB5#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(_t1D6C,mulRes1DA6);
          real dof1DB6#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(_t1D6C,mulRes1DA8);
          real dof1DB7#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(_t1D6C,mulRes1DAB);
          real dof1DB8#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(_t1D6C,mulRes1DAE);
          real dof1DB9#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(_t1D6C,mulRes1DB1);
          real dof1DBA#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(_t1D6C,mulRes1DB4);
          tensor[6] dofs1DBB#5 = <tensor[6]>[dof1DB5,dof1DB6,dof1DB7,dof1DB8,dof1DB9,dof1DBA];
          real varAcc1DD7#4 = VIndex<2,0>(refPos1D63);
          real varAcc1DD8#4 = VIndex<2,1>(refPos1D63);
          real coeff1DD9#6 = 0.2e1;
          real prod21DDB#1 = RMul(varAcc1DD7,varAcc1DD7);
          real one1DDC#33 = 0.1e1;
          real prod1DDD#2 = RMul(prod21DDB,one1DDC);
          real coeff1DDE#10 = 0.4e1;
          real prod1DE0#2 = RMul(varAcc1DD7,varAcc1DD8);
          real coeff1DE1#7 = -0.3e1;
          real prod1DE2#3 = RMul(varAcc1DD7,one1DDC);
          real prod21DE3#1 = RMul(varAcc1DD8,varAcc1DD8);
          real prod1DE4#2 = RMul(one1DDC,prod21DE3);
          real prod1DE5#3 = RMul(one1DDC,varAcc1DD8);
          real prod1DE6#4 = RMul(one1DDC,one1DDC);
          real mult1DE7#7 = RMul(one1DDC,prod1DE6);
          real mult1DE8#1 = RMul(coeff1DE1,prod1DE5);
          real mult1DE9#2 = RMul(coeff1DD9,prod1DE4);
          real mult1DEA#1 = RMul(coeff1DE1,prod1DE2);
          real mult1DEB#2 = RMul(coeff1DDE,prod1DE0);
          real mult1DEC#2 = RMul(coeff1DD9,prod1DDD);
          real sum1DED#1 = RAdd(mult1DEB,mult1DEC);
          real sum1DEE#1 = RAdd(mult1DEA,sum1DED);
          real sum1DEF#1 = RAdd(mult1DE9,sum1DEE);
          real sum1DF0#1 = RAdd(mult1DE8,sum1DEF);
          real sum1DF1#1 = RAdd(mult1DE7,sum1DF0);
          real coeff1DF3#16 = -0.1e1;
          real mult1DF4#1 = RMul(coeff1DF3,prod1DE2);
          real sum1DF5#1 = RAdd(mult1DF4,mult1DEC);
          real mult1DF7#1 = RMul(coeff1DF3,prod1DE5);
          real sum1DF8#1 = RAdd(mult1DF7,mult1DE9);
          real coeff1DFA#11 = -0.4e1;
          real mult1DFB#1 = RMul(coeff1DDE,prod1DE5);
          real mult1DFC#1 = RMul(coeff1DFA,prod1DE4);
          real mult1DFD#2 = RMul(coeff1DFA,prod1DE0);
          real sum1DFE#1 = RAdd(mult1DFC,mult1DFD);
          real sum1DFF#1 = RAdd(mult1DFB,sum1DFE);
          real mult1E01#1 = RMul(coeff1DDE,prod1DE2);
          real mult1E02#1 = RMul(coeff1DFA,prod1DDD);
          real sum1E03#1 = RAdd(mult1DFD,mult1E02);
          real sum1E04#1 = RAdd(mult1E01,sum1E03);
          tensor[6] intermediateCons1E06#1 = <tensor[6]>[sum1DF1,sum1DF5,sum1DF8,mult1DEB,sum1DFF,sum1E04];
          real probe_l_71E38#1 = VDot<6>(dofs1DBB,intermediateCons1E06);
          real op1_e3_l_81E3B#1 = RMul(_t1D72,s1AB3);
          real op1_e3_l_91E3E#1 = RSub(probe_l_71E38,op1_e3_l_81E3B);
          real fa1E41#9 = RSub(op1_e3_l_91E3E,_t1D74);
          real varAcc1E45#4 = VIndex<2,0>(refPos1D67);
          real varAcc1E46#4 = VIndex<2,1>(refPos1D67);
          real prod21E49#1 = RMul(varAcc1E45,varAcc1E45);
          real prod1E4B#2 = RMul(prod21E49,one1DDC);
          real prod1E4E#2 = RMul(varAcc1E45,varAcc1E46);
          real prod1E50#3 = RMul(varAcc1E45,one1DDC);
          real prod21E51#1 = RMul(varAcc1E46,varAcc1E46);
          real prod1E52#2 = RMul(one1DDC,prod21E51);
          real prod1E53#3 = RMul(one1DDC,varAcc1E46);
          real mult1E56#1 = RMul(coeff1DE1,prod1E53);
          real mult1E57#2 = RMul(coeff1DD9,prod1E52);
          real mult1E58#1 = RMul(coeff1DE1,prod1E50);
          real mult1E59#2 = RMul(coeff1DDE,prod1E4E);
          real mult1E5A#2 = RMul(coeff1DD9,prod1E4B);
          real sum1E5B#1 = RAdd(mult1E59,mult1E5A);
          real sum1E5C#1 = RAdd(mult1E58,sum1E5B);
          real sum1E5D#1 = RAdd(mult1E57,sum1E5C);
          real sum1E5E#1 = RAdd(mult1E56,sum1E5D);
          real sum1E5F#1 = RAdd(mult1DE7,sum1E5E);
          real mult1E62#1 = RMul(coeff1DF3,prod1E50);
          real sum1E63#1 = RAdd(mult1E62,mult1E5A);
          real mult1E65#1 = RMul(coeff1DF3,prod1E53);
          real sum1E66#1 = RAdd(mult1E65,mult1E57);
          real mult1E69#1 = RMul(coeff1DDE,prod1E53);
          real mult1E6A#1 = RMul(coeff1DFA,prod1E52);
          real mult1E6B#2 = RMul(coeff1DFA,prod1E4E);
          real sum1E6C#1 = RAdd(mult1E6A,mult1E6B);
          real sum1E6D#1 = RAdd(mult1E69,sum1E6C);
          real mult1E6F#1 = RMul(coeff1DDE,prod1E50);
          real mult1E70#1 = RMul(coeff1DFA,prod1E4B);
          real sum1E71#1 = RAdd(mult1E6B,mult1E70);
          real sum1E72#1 = RAdd(mult1E6F,sum1E71);
          tensor[6] intermediateCons1E74#1 = <tensor[6]>[sum1E5F,sum1E63,sum1E66,mult1E59,sum1E6D,sum1E72];
          real probe_l_71EA6#1 = VDot<6>(dofs1DBB,intermediateCons1E74);
          real op1_e3_l_81EA9#1 = RMul(_t1D72,e1AB5);
          real op1_e3_l_91EAC#1 = RSub(probe_l_71EA6,op1_e3_l_81EA9);
          real fb1EAF#6 = RSub(op1_e3_l_91EAC,_t1D74);
          string _t1EB2#1 = "Vals:";
          tensor[2] _t1EB4#1 = <tensor[2]>[fa1E41,fb1EAF];
          Print<[string,tensor[2],string]>(_t1EB2,_t1EB4,_t1AC9);
          real op1_e3_l_221EB7#1 = RSub(fa1E41,fb1EAF);
          real _t1EBA#1 = Abs<real>(op1_e3_l_221EB7);
          bool _t1EBD#1 = LT<real>(_t1EBA,intervalEps1A87);
          if _t1EBD then goto ASSIGN1EC2 else goto JOIN1ED9
        ASSIGN1EC2:  preds = [COND1EBF]
          real _t1EC0#1 = Abs<real>(fa1E41);
          bool _t1EC3#1 = GT<real>(_t1EC0,intervalEps1A87);
          if _t1EC3 then goto ASSIGN1EC8 else goto JOIN1ED7
        ASSIGN1EC8:  preds = [COND1EC5]
          real _t1EC6#1 = Abs<real>(fb1EAF);
          bool _t1EC9#1 = GT<real>(_t1EC6,intervalEps1A87);
          if _t1EC9 then goto ASSIGN1ECD else goto JOIN1ED5
        ASSIGN1ECD:  preds = [COND1ECB]
          string _t1ECC#1 = "warn\n";
          Print<[string]>(_t1ECC);
          real s1ECF#1 = RAdd(s1AB3,intervalEps1A87);
          self.s = s1ECF;
          active
          goto JOIN1ED5
        JOIN1ED5:  preds = [*ACTIVE1ED3,COND1ECB]
          real s1ED4#1 = phi(s1AB3)
          goto JOIN1ED7
        JOIN1ED7:  preds = [JOIN1ED5,COND1EC5]
          real s1ED6#1 = phi(s1ED4,s1AB3)
          goto JOIN1ED9
        JOIN1ED9:  preds = [JOIN1ED7,COND1EBF]
          real s1ED8#3 = phi(s1ED6,s1AB3)
          real op1_e3_l_381EDA#1 = RMul(s1ED8,fb1EAF);
          real op1_e3_l_391EDD#1 = RMul(e1AB5,fa1E41);
          real op1_e3_l_481EE0#1 = RSub(op1_e3_l_381EDA,op1_e3_l_391EDD);
          real op1_e3_l_491EE3#1 = RSub(fb1EAF,fa1E41);
          real cup1EE6#7 = RDiv(op1_e3_l_481EE0,op1_e3_l_491EE3);
          string _t1EE9#1 = "Mid time:";
          Print<[string,real,string]>(_t1EE9,cup1EE6,_t1AC9);
          tensor[2] op1_e3_l_531EEC#1 = VScale<2>(cup1EE6,_t1AE1);
          tensor[2] midRay1EEF#1 = VAdd<2>(_t1ADB,op1_e3_l_531EEC);
          femData:MeshPos callNewtonPos1EF2#1 = _0A92_msh_newtonInverse1AF4 (midRay1EEF,_t1AF1,_t1AEF);
          tensor[2] refPos1EF4#2 = ExtractFemItem<tensor[2],RefPos(Mesh)>(callNewtonPos1EF2);
          real varAcc1EF7#4 = VIndex<2,0>(refPos1EF4);
          real varAcc1EF8#4 = VIndex<2,1>(refPos1EF4);
          real prod21EFB#1 = RMul(varAcc1EF7,varAcc1EF7);
          real prod1EFD#2 = RMul(prod21EFB,one1DDC);
          real prod1F00#2 = RMul(varAcc1EF7,varAcc1EF8);
          real prod1F02#5 = RMul(varAcc1EF7,one1DDC);
          real prod21F03#1 = RMul(varAcc1EF8,varAcc1EF8);
          real prod1F04#2 = RMul(one1DDC,prod21F03);
          real prod1F05#5 = RMul(one1DDC,varAcc1EF8);
          real mult1F08#1 = RMul(coeff1DE1,prod1F05);
          real mult1F09#2 = RMul(coeff1DD9,prod1F04);
          real mult1F0A#1 = RMul(coeff1DE1,prod1F02);
          real mult1F0B#2 = RMul(coeff1DDE,prod1F00);
          real mult1F0C#2 = RMul(coeff1DD9,prod1EFD);
          real sum1F0D#1 = RAdd(mult1F0B,mult1F0C);
          real sum1F0E#1 = RAdd(mult1F0A,sum1F0D);
          real sum1F0F#1 = RAdd(mult1F09,sum1F0E);
          real sum1F10#1 = RAdd(mult1F08,sum1F0F);
          real sum1F11#1 = RAdd(mult1DE7,sum1F10);
          real mult1F14#1 = RMul(coeff1DF3,prod1F02);
          real sum1F15#1 = RAdd(mult1F14,mult1F0C);
          real mult1F17#1 = RMul(coeff1DF3,prod1F05);
          real sum1F18#1 = RAdd(mult1F17,mult1F09);
          real mult1F1B#4 = RMul(coeff1DDE,prod1F05);
          real mult1F1C#1 = RMul(coeff1DFA,prod1F04);
          real mult1F1D#2 = RMul(coeff1DFA,prod1F00);
          real sum1F1E#1 = RAdd(mult1F1C,mult1F1D);
          real sum1F1F#1 = RAdd(mult1F1B,sum1F1E);
          real mult1F21#4 = RMul(coeff1DDE,prod1F02);
          real mult1F22#1 = RMul(coeff1DFA,prod1EFD);
          real sum1F23#1 = RAdd(mult1F1D,mult1F22);
          real sum1F24#1 = RAdd(mult1F21,sum1F23);
          tensor[6] intermediateCons1F26#1 = <tensor[6]>[sum1F11,sum1F15,sum1F18,mult1F0B,sum1F1F,sum1F24];
          real fmVal1F58#2 = VDot<6>(dofs1DBB,intermediateCons1F26);
          real op1_e3_l_581F5B#1 = RMul(_t1D72,cup1EE6);
          real op1_e3_l_591F5E#1 = RSub(fmVal1F58,op1_e3_l_581F5B);
          real fm1F61#5 = RSub(op1_e3_l_591F5E,_t1D74);
          string _t1F64#1 = "all vals:";
          tensor[3] _t1F66#1 = <tensor[3]>[fa1E41,fm1F61,fb1EAF];
          Print<[string,tensor[3],string]>(_t1F64,_t1F66,_t1AC9);
          int intersectionItter1F6B#3 = IAdd(intersectionItter1AAF,ilit1D7C);
          real _t1F6D#24 = 0.e0;
          bool _t1F6F#2 = GT<real>(fa1E41,_t1F6D);
          if _t1F6F then goto JOIN1F74 else goto ASSIGN2381
        JOIN1F74:  preds = [COND1F71,JOIN2386]
          int _t1F72#1 = phi(ilit1D7C,_t1F73)
          bool _t1F75#2 = GT<real>(fm1F61,_t1F6D);
          if _t1F75 then goto JOIN1F7A else goto ASSIGN2379
        JOIN1F7A:  preds = [COND1F77,JOIN237E]
          int _t1F78#1 = phi(ilit1D7C,_t1F79)
          int _t1F7B#1 = IMul(_t1F72,_t1F78);
          int _t1F7D#6 = 0;
          bool _t1F7F#1 = LT<int>(_t1F7B,_t1F7D);
          if _t1F7F then goto JOIN1F85 else goto COND235E
        JOIN1F85:  preds = [COND1F81,JOIN236B]
          real e1F82#4 = phi(cup1EE6,e1AB5)
          real s1F83#4 = phi(s1ED8,s1F84)
          string _t1F86#1 = "new interval:";
          tensor[2] _t1F88#1 = <tensor[2]>[s1F83,e1F82];
          Print<[string,tensor[2],string]>(_t1F86,_t1F88,_t1AC9);
          real _t1F8B#1 = Abs<real>(fm1F61);
          bool _t1F8E#2 = LT<real>(_t1F8B,zeroEps1A85);
          if _t1F8E then goto ASSIGN1F92 else goto JOIN22D8
        ASSIGN1F92:  preds = [COND1F90]
          tensor[2] grad1F91#1 = <tensor[2]>[_t1F6D,_t1F6D];
          if _t1F8E then goto ASSIGN24D3 else goto JOIN219A
        ASSIGN24D3:  preds = [COND1F93]
          real mult1F9F#1 = RMul(coeff1DE1,prod1DE6);
          real sum1FA2#1 = RAdd(mult1F1B,mult1F21);
          real sum1FA3#2 = RAdd(mult1F9F,sum1FA2);
          real mult1FA6#4 = RMul(coeff1DF3,prod1DE6);
          real sum1FA7#1 = RAdd(mult1FA6,mult1F21);
          real basisEval1FAB#2 = RMul(coeff1DFA,prod1F05);
          real coeff1FAC#2 = -0.8e1;
          real mult1FAD#2 = RMul(coeff1DDE,prod1DE6);
          real mult1FAE#1 = RMul(coeff1FAC,prod1F02);
          real sum1FAF#1 = RAdd(basisEval1FAB,mult1FAE);
          real sum1FB0#1 = RAdd(mult1FAD,sum1FAF);
          real sum1FB3#1 = RAdd(mult1FA6,mult1F1B);
          real mult1FB5#1 = RMul(coeff1FAC,prod1F05);
          real mult1FB6#2 = RMul(coeff1DFA,prod1F02);
          real sum1FB7#1 = RAdd(mult1FB5,mult1FB6);
          real sum1FB8#1 = RAdd(mult1FAD,sum1FB7);
          tensor[6] intermediateCons1FBA#1 = <tensor[6]>[sum1FA3,sum1FA7,_t1F6D,mult1F1B,basisEval1FAB,sum1FB0];
          tensor[6] intermediateCons1FBB#1 = <tensor[6]>[sum1FA3,_t1F6D,sum1FB3,mult1F21,sum1FB8,mult1FB6];
          real vdot1FE8#2 = VDot<6>(dofs1DBB,intermediateCons1FBA);
          real vdot1FEA#2 = VDot<6>(dofs1DBB,intermediateCons1FBB);
          int mulRes1FF3#3 = IMul(_t1AF1,ilit1D82);
          int idx1FF6#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(_t1AEF,mulRes1FF3);
          int addRes1FF8#1 = IAdd(mulRes1FF3,ilit1D7C);
          int idx1FF9#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(_t1AEF,addRes1FF8);
          int addRes1FFB#1 = IAdd(mulRes1FF3,ilit1D7F);
          int idx1FFC#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(_t1AEF,addRes1FFB);
          int mulRes200F#2 = IMul(ilit1D7F,idx1FF6);
          int addRes2012#1 = IAdd(ilit1D7C,mulRes200F);
          real dof_load2013#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1AEF,mulRes200F);
          real dof_load2014#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1AEF,addRes2012);
          int mulRes2017#2 = IMul(ilit1D7F,idx1FF9);
          int addRes2019#1 = IAdd(ilit1D7C,mulRes2017);
          real dof_load201A#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1AEF,mulRes2017);
          real dof_load201B#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1AEF,addRes2019);
          int mulRes201E#2 = IMul(ilit1D7F,idx1FFC);
          int addRes2020#1 = IAdd(ilit1D7C,mulRes201E);
          real dof_load2021#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1AEF,mulRes201E);
          real dof_load2022#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1AEF,addRes2020);
          real r205A#2 = RMul(dof_load2013,mult1FA6);
          real r205D#1 = RMul(dof_load201A,mult1DE7);
          real r2060#1 = RMul(dof_load2021,_t1F6D);
          real r2061#1 = RAdd(r205A,r205D);
          real r2062#3 = RAdd(r2061,r2060);
          real r2066#1 = RMul(dof_load201A,_t1F6D);
          real r2068#1 = RMul(dof_load2021,mult1DE7);
          real r2069#1 = RAdd(r205A,r2066);
          real r206A#3 = RAdd(r2069,r2068);
          real r206D#2 = RMul(dof_load2014,mult1FA6);
          real r206F#1 = RMul(dof_load201B,mult1DE7);
          real r2071#1 = RMul(dof_load2022,_t1F6D);
          real r2072#1 = RAdd(r206D,r206F);
          real r2073#3 = RAdd(r2072,r2071);
          real r2075#1 = RMul(dof_load201B,_t1F6D);
          real r2076#1 = RMul(dof_load2022,mult1DE7);
          real r2077#1 = RAdd(r206D,r2075);
          real r2078#3 = RAdd(r2077,r2076);
          real r20A1#1 = RMul(_t1F6D,r2062);
          real r20A4#1 = RMul(coeff1DF3,r2073);
          real r20A5#2 = RAdd(r20A1,r20A4);
          real r20A7#2 = RMul(_t1F6D,r206A);
          real r20A9#1 = RMul(coeff1DF3,r2078);
          real r20AA#2 = RAdd(r20A7,r20A9);
          real r20AD#1 = RMul(one1DDC,r2062);
          real r20AE#1 = RMul(_t1F6D,r2073);
          real r20AF#2 = RAdd(r20AD,r20AE);
          real r20B0#1 = RMul(one1DDC,r206A);
          real r20B1#2 = RMul(_t1F6D,r2078);
          real r20B2#2 = RAdd(r20B0,r20B1);
          tensor[2] probe_l_1020CB#1 = <tensor[2]>[r2062,r2073];
          real r2123#1 = RMul(one1DDC,r2078);
          real r2124#1 = RAdd(r20A7,r2123);
          real r2126#1 = RMul(coeff1DF3,r206A);
          real r2128#1 = RAdd(r2126,r20B1);
          tensor[2] op1_e3_l_12211D#1 = <tensor[2]>[r2124,r2128];
          real r2139#1 = RMul(_t1F6D,r20A5);
          real r213C#1 = RMul(coeff1DF3,r20AA);
          real r213D#1 = RAdd(r2139,r213C);
          real r213F#1 = RMul(_t1F6D,r20AF);
          real r2141#1 = RMul(coeff1DF3,r20B2);
          real r2142#1 = RAdd(r213F,r2141);
          real r2145#1 = RMul(one1DDC,r20A5);
          real r2146#1 = RMul(_t1F6D,r20AA);
          real r2147#1 = RAdd(r2145,r2146);
          real r2148#1 = RMul(one1DDC,r20AF);
          real r2149#1 = RMul(_t1F6D,r20B2);
          real r214A#1 = RAdd(r2148,r2149);
          real op1_e3_l_142163#4 = VDot<2>(probe_l_1020CB,op1_e3_l_12211D);
          real r2168#1 = RDiv(r213D,op1_e3_l_142163);
          real r216A#1 = RDiv(r2142,op1_e3_l_142163);
          real r216D#1 = RDiv(r2147,op1_e3_l_142163);
          real r216F#1 = RDiv(r214A,op1_e3_l_142163);
          real r2180#1 = RMul(vdot1FE8,r2168);
          real r2183#1 = RMul(vdot1FEA,r216D);
          real r2184#1 = RAdd(r2180,r2183);
          real r2186#1 = RMul(vdot1FE8,r216A);
          real r2188#1 = RMul(vdot1FEA,r216F);
          real r2189#1 = RAdd(r2186,r2188);
          tensor[2] grad217D#1 = <tensor[2]>[r2184,r2189];
          goto JOIN219A
        JOIN219A:  preds = [ASSIGN2197,COND1F93]
          tensor[2] grad2198#3 = phi(grad217D,grad1F91)
          real out2199#3 = phi(fmVal1F58,out1ABB)
          string _t219B#1 = "Out val:";
          Print<[string,real,string]>(_t219B,out2199,_t1AC9);
          string _t219E#1 = "Grad val:";
          Print<[string,tensor[2],string]>(_t219E,grad2198,_t1AC9);
          tensor[3] mcol21A3#1 = <tensor[3]>[one1DDC,one1DDC,one1DDC];
          bool _t21A5#1 = NEQ<real>(cmin1A91,cmax1A93);
          if _t21A5 then goto ASSIGN21AC else goto JOIN2229
        ASSIGN21AC:  preds = [COND21A7]
          real op1_e3_l_521AA#1 = RSub(out2199,cmin1A91);
          real op1_e3_l_621AD#1 = RSub(cmax1A93,cmin1A91);
          real op1_e3_l_721B0#1 = RDiv(op1_e3_l_521AA,op1_e3_l_621AD);
          real op1_e3_l_821B3#1 = RSub(one1DDC,coeff1DF3);
          real op1_e3_l_921B6#1 = RMul(op1_e3_l_721B0,op1_e3_l_821B3);
          real _t21B9#1 = RAdd(coeff1DF3,op1_e3_l_921B6);
          real Mtransform21BC#1 = Transform<IMAGE1D<double[3]>>(cmap1A7B);
          real MxPos21BE#1 = RMul(Mtransform21BC,_t21B9);
          real Ttranslate21C1#1 = Translate<IMAGE1D<double[3]>>(cmap1A7B);
          real imgPos21C3#2 = RAdd(MxPos21BE,Ttranslate21C1);
          real nd21C6#2 = Floor<1>(imgPos21C3);
          real f21C8#2 = RSub(imgPos21C3,nd21C6);
          int n21CB#5 = RealToInt<1>(nd21C6);
          bool isInside21CF#1 = IndexInside<IMAGE1D<double[3]>,2>(n21CB,cmap1A7B);
          if isInside21CF then goto ASSIGN2523 else goto ASSIGN251B
        ASSIGN2523:  preds = [COND21D1]
          int offp21D6#3 = IMul(ilit1D82,n21CB);
          real v0_21D7#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap1A7B,offp21D6);
          int addRes21D9#1 = IAdd(n21CB,ilit1D7C);
          int offp21DA#3 = IMul(ilit1D82,addRes21D9);
          real v1_21DB#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap1A7B,offp21DA);
          tensor[2] v_21DC#1 = <tensor[2]>[v0_21D7,v1_21DB];
          int offp21DD#1 = IAdd(offp21D6,ilit1D7C);
          real v0_21DE#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap1A7B,offp21DD);
          int offp21DF#1 = IAdd(offp21DA,ilit1D7C);
          real v1_21E0#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap1A7B,offp21DF);
          tensor[2] v_21E1#1 = <tensor[2]>[v0_21DE,v1_21E0];
          int offp21E3#1 = IAdd(offp21D6,ilit1D7F);
          real v0_21E4#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap1A7B,offp21E3);
          int offp21E5#1 = IAdd(offp21DA,ilit1D7F);
          real v1_21E6#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap1A7B,offp21E5);
          tensor[2] v_21E7#1 = <tensor[2]>[v0_21E4,v1_21E6];
          tensor[3,2] voxels21E8#1 = <tensor[3,2]>[v_21DC,v_21E1,v_21E7];
          goto JOIN2202
        JOIN2202:  preds = [ASSIGN21FE,ASSIGN235C]
          tensor[3,2] ldvox2200#3 = phi(voxels21E8,voxels2344)
          real idx2205#1 = RSub(f21C8,one1DDC);
          tensor[2] kernX_2203#1 = <tensor[2]>[f21C8,idx2205];
          tensor[2] a0220A#1 = <tensor[2]>[one1DDC,one1DDC];
          tensor[2] a1220B#1 = <tensor[2]>[coeff1DF3,one1DDC];
          tensor[2] prod12210#1 = VMul<2>(kernX_2203,a1220B);
          tensor[2] kevalX_d0_2209#3 = VAdd<2>(a0220A,prod12210);
          tensor[2] projIx221A#1 = ProjectLast<tensor[3,2],[0]>(ldvox2200);
          real vdot221B#1 = VDot<2>(projIx221A,kevalX_d0_2209);
          tensor[2] projIx221C#1 = ProjectLast<tensor[3,2],[1]>(ldvox2200);
          real vdot221D#1 = VDot<2>(projIx221C,kevalX_d0_2209);
          tensor[2] projIx221E#1 = ProjectLast<tensor[3,2],[2]>(ldvox2200);
          real vdot221F#1 = VDot<2>(projIx221E,kevalX_d0_2209);
          tensor[3] mcol2219#1 = <tensor[3]>[vdot221B,vdot221D,vdot221F];
          goto JOIN2229
        JOIN2229:  preds = [ASSIGN2227,COND21A7]
          tensor[3] mcol2228#7 = phi(mcol2219,mcol21A3)
          if light1A95 then goto ASSIGN222C else goto ASSIGN2327
        ASSIGN222C:  preds = [COND222A]
          real _t222B#1 = VIndex<2,0>(grad2198);
          real _t222D#1 = VIndex<2,1>(grad2198);
          tensor[3] _t2231#4 = <tensor[3]>[_t222B,_t222D,coeff1DF3];
          real op1_e3_l_32233#1 = VDot<3>(_t2231,_t2231);
          real op1_e3_l_42236#1 = Sqrt(op1_e3_l_32233);
          real op1_e3_l_52239#2 = RDiv(one1DDC,op1_e3_l_42236);
          real op1_e3_l_6223E#1 = VDot<3>(_t2231,L1A9F);
          real _t2241#1 = RMul(op1_e3_l_52239,op1_e3_l_6223E);
          real _t2244#1 = Max<real>(_t1F6D,_t2241);
          real op1_e3_l_102246#1 = VDot<3>(rayVec1AA3,rayVec1AA3);
          real op1_e3_l_112249#1 = Sqrt(op1_e3_l_102246);
          real op1_e3_l_12224C#1 = RDiv(one1DDC,op1_e3_l_112249);
          tensor[3] op1_e3_l_132251#1 = VScale<3>(op1_e3_l_12224C,rayVec1AA3);
          tensor[3] op1_e3_l_142254#1 = VNeg<3>(op1_e3_l_132251);
          tensor[3] op1_e3_l_202257#3 = VAdd<3>(op1_e3_l_142254,L1A9F);
          real op1_e3_l_22225A#1 = VDot<3>(op1_e3_l_202257,op1_e3_l_202257);
          real op1_e3_l_23225D#1 = Sqrt(op1_e3_l_22225A);
          real op1_e3_l_312260#1 = RDiv(one1DDC,op1_e3_l_23225D);
          real op1_e3_l_322265#1 = VDot<3>(_t2231,op1_e3_l_202257);
          real r2269#1 = RMul(op1_e3_l_52239,op1_e3_l_312260);
          real _t2268#1 = RMul(r2269,op1_e3_l_322265);
          real _t226D#1 = Max<real>(_t1F6D,_t2268);
          real _t226F#1 = MathFn<pow>(_t226D,phongSp1A9D);
          real op1_e3_l_962271#1 = RSub(cup1EE6,camNearVsp1AA5);
          real op1_e3_l_972274#1 = RSub(camFarVsp1AA7,camNearVsp1AA5);
          real op1_e3_l_982277#1 = RDiv(op1_e3_l_962271,op1_e3_l_972274);
          tensor[3] op1_e3_l_99227A#1 = VSub<3>(mcfar1A8F,mcnear1A8D);
          tensor[3] op1_e3_l_100227D#1 = VScale<3>(op1_e3_l_982277,op1_e3_l_99227A);
          tensor[3] op1_e3_l_1012280#3 = VAdd<3>(mcnear1A8D,op1_e3_l_100227D);
          tensor[3] op1_e3_l_1292283#1 = VScale<3>(phongKa1A97,mcol2228);
          real r2287#1 = TensorIndex<tensor[3],[0]>(mcol2228);
          real r2288#2 = TensorIndex<tensor[3],[0]>(op1_e3_l_1012280);
          real r2289#3 = RMul(_t2244,phongKd1A99);
          real r228A#1 = RMul(r2289,r2287);
          real r228B#1 = RMul(r228A,r2288);
          real r228C#1 = TensorIndex<tensor[3],[1]>(mcol2228);
          real r228D#2 = TensorIndex<tensor[3],[1]>(op1_e3_l_1012280);
          real r228E#1 = RMul(r2289,r228C);
          real r228F#1 = RMul(r228E,r228D);
          real r2290#1 = TensorIndex<tensor[3],[2]>(mcol2228);
          real r2291#2 = TensorIndex<tensor[3],[2]>(op1_e3_l_1012280);
          real r2292#1 = RMul(r2289,r2290);
          real r2293#1 = RMul(r2292,r2291);
          tensor[3] op1_e3_l_1302286#1 = <tensor[3]>[r228B,r228F,r2293];
          real r22A5#3 = RMul(_t226F,phongKs1A9B);
          real r22A6#1 = RMul(r22A5,r2288);
          real r22A8#1 = RMul(r22A5,r228D);
          real r22AA#1 = RMul(r22A5,r2291);
          tensor[3] op1_e3_l_13122A3#1 = <tensor[3]>[r22A6,r22A8,r22AA];
          tensor[3] v22B5#1 = VAdd<3>(op1_e3_l_1292283,op1_e3_l_1302286);
          tensor[3] fin22B4#3 = VAdd<3>(v22B5,op1_e3_l_13122A3);
          real _t22B9#1 = VIndex<3,0>(fin22B4);
          real _t22BB#1 = VIndex<3,1>(fin22B4);
          real _t22BD#1 = VIndex<3,2>(fin22B4);
          tensor[4] rgba22BF#1 = <tensor[4]>[_t22B9,_t22BB,_t22BD,one1DDC];
          goto JOIN22C3
        JOIN22C3:  preds = [ASSIGN2535,ASSIGN252D]
          tensor[4] rgba22C1#1 = phi(rgba22BF,rgba22C2)
          tensor[3] op1_e3_l_5322C4#1 = VScale<3>(cup1EE6,rayVec1AA3);
          tensor[3] _t22C7#1 = VAdd<3>(op1_e3_l_5322C4,rayOrig1AA1);
          tensor[3][1] _t22CA#1 = <tensor[3][1]>{_t22C7};
          tensor[3][] _t22CC#1 = MkDynamic<tensor[3],1>(_t22CA);
          self.intersectionItter = intersectionItter1F6B;
          self.s = s1F83;
          self.e = e1F82;
          self.out = out2199;
          self.rgba = rgba22C1;
          self.locs = _t22CC;
          stabilize
          goto JOIN22D8
        JOIN22D8:  preds = [*STABILIZE22D4,COND1F90]
          tensor[3][] locs22D5#3 = phi(locs1ABF)
          tensor[4] rgba22D6#3 = phi(rgba1ABD)
          real out22D7#3 = phi(out1ABB)
          int _t22D9#1 = 32;
          bool _t22DB#1 = GT<int>(intersectionItter1F6B,_t22D9);
          if _t22DB then goto ASSIGN2536 else goto ASSIGN2324
        ASSIGN2536:  preds = [COND22DD]
          int itter22DE#4 = IAdd(itter1AAD,ilit1D7C);
          bool _t22E0#1 = GTE<int>(itter22DE,len1AAB);
          if _t22E0 then goto ASSIGN22E4 else goto JOIN22F1
        ASSIGN22E4:  preds = [COND22E2]
          string _t22E3#1 = "No intersection found\n";
          Print<[string]>(_t22E3);
          string _t22E6#1 = "Fin pixel=============================\n";
          Print<[string]>(_t22E6);
          self.itter = itter22DE;
          self.intersectionItter = _t1F7D;
          self.s = s1F83;
          self.e = e1F82;
          self.out = out22D7;
          self.rgba = rgba22D6;
          self.locs = locs22D5;
          stabilize
          goto JOIN22F1
        JOIN22F1:  preds = [*STABILIZE22F0,COND22E2]
          int _t22F2#2 = IAdd(offset1AA9,itter22DE);
          tensor[2] interval22F4#3 = Subscript<tensor[2][]>(times1A89,_t22F2);
          int _t22F6#1 = Subscript<int[]>(cells1A8B,_t22F2);
          femData:MeshCell cc22F8#2 = Subscript<femData:MeshCell[]>(0cell_a1A81,_t22F6);
          real s22FA#1 = VIndex<2,0>(interval22F4);
          real e22FC#1 = VIndex<2,1>(interval22F4);
          int _t22FE#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc22F8);
          femData:FuncCell _t2300#1 = LoadFem<femData:FuncCell>(c1A83,_t22FE);
          string _t2302#1 = "++++++++++++++++Next interval!+++++++++++++++++++\n";
          Print<[string]>(_t2302);
          self.itter = itter22DE;
          self.intersectionItter = _t1F7D;
          self.interval = interval22F4;
          self.s = s22FA;
          self.e = e22FC;
          self.cc = cc22F8;
          self.fc = _t2300;
          self.out = out22D7;
          self.rgba = rgba22D6;
          self.locs = locs22D5;
          active
          goto JOIN2317
        JOIN2317:  preds = [*ACTIVE230F,MASSIGN2325]
          femData:FuncCell fc2310#1 = phi(fc1AB9)
          femData:MeshCell cc2311#1 = phi(cc1AB7)
          real e2312#1 = phi(e1F82)
          real s2313#1 = phi(s1F83)
          tensor[2] interval2314#1 = phi(interval1AB1)
          int intersectionItter2315#1 = phi(intersectionItter1F6B)
          int itter2316#1 = phi(itter1AAD)
          self.itter = itter2316;
          self.intersectionItter = intersectionItter2315;
          self.interval = interval2314;
          self.s = s2313;
          self.e = e2312;
          self.cc = cc2311;
          self.fc = fc2310;
          self.out = out22D7;
          self.rgba = rgba22D6;
          self.locs = locs22D5;
          active
        ASSIGN2324:  preds = [COND22DD]
          string _t2323#1 = "---------------\n";
          Print<[string]>(_t2323);
          goto JOIN2317
        ASSIGN2327:  preds = [COND222A]
          real _t2326#1 = VIndex<3,0>(mcol2228);
          real _t2328#1 = VIndex<3,1>(mcol2228);
          real _t232A#1 = VIndex<3,2>(mcol2228);
          tensor[4] rgba22C2#1 = <tensor[4]>[_t2326,_t2328,_t232A,one1DDC];
          goto JOIN22C3
        ASSIGN251B:  preds = [COND21D1]
          int ix232F#1 = ControlIndex<IMAGE1D<double[3]>,clamp,0>(cmap1A7B,n21CB);
          int offp2331#3 = IMul(ilit1D82,ix232F);
          real v0_2332#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap1A7B,offp2331);
          int addRes2334#1 = IAdd(n21CB,ilit1D7C);
          int ix2335#1 = ControlIndex<IMAGE1D<double[3]>,clamp,0>(cmap1A7B,addRes2334);
          int offp2336#3 = IMul(ilit1D82,ix2335);
          real v1_2337#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap1A7B,offp2336);
          tensor[2] v_2338#1 = <tensor[2]>[v0_2332,v1_2337];
          int offp2339#1 = IAdd(offp2331,ilit1D7C);
          real v0_233A#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap1A7B,offp2339);
          int offp233B#1 = IAdd(offp2336,ilit1D7C);
          real v1_233C#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap1A7B,offp233B);
          tensor[2] v_233D#1 = <tensor[2]>[v0_233A,v1_233C];
          int offp233F#1 = IAdd(offp2331,ilit1D7F);
          real v0_2340#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap1A7B,offp233F);
          int offp2341#1 = IAdd(offp2336,ilit1D7F);
          real v1_2342#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap1A7B,offp2341);
          tensor[2] v_2343#1 = <tensor[2]>[v0_2340,v1_2342];
          tensor[3,2] voxels2344#1 = <tensor[3,2]>[v_2338,v_233D,v_2343];
          goto JOIN2202
        COND235E:  preds = [COND1F81]
          if _t1F6F then goto JOIN2361 else goto ASSIGN2373
        JOIN2361:  preds = [COND235E,JOIN2377]
          int _t235F#1 = phi(ilit1D7C,_t2360)
          if _t1F75 then goto JOIN2365 else goto ASSIGN236D
        JOIN2365:  preds = [COND2362,JOIN2371]
          int _t2363#1 = phi(ilit1D7C,_t2364)
          int _t2366#1 = IMul(_t235F,_t2363);
          bool _t2368#1 = GT<int>(_t2366,_t1F7D);
          if _t2368 then goto JOIN236B else goto JOIN236B
        JOIN236B:  preds = [COND236A,COND236A]
          real s1F84#1 = phi(cup1EE6,s1ED8)
          goto JOIN1F85
        ASSIGN236D:  preds = [COND2362]
          bool _t236C#1 = LT<real>(fm1F61,_t1F6D);
          if _t236C then goto ASSIGN2370 else goto JOIN2371
        ASSIGN2370:  preds = [COND236E]
          int _t236F#1 = -1;
          goto JOIN2371
        JOIN2371:  preds = [ASSIGN2370,COND236E]
          int _t2364#1 = phi(_t236F,_t1F7D)
          goto JOIN2365
        ASSIGN2373:  preds = [COND235E]
          bool _t2372#1 = LT<real>(fa1E41,_t1F6D);
          if _t2372 then goto ASSIGN2376 else goto JOIN2377
        ASSIGN2376:  preds = [COND2374]
          int _t2375#1 = -1;
          goto JOIN2377
        JOIN2377:  preds = [ASSIGN2376,COND2374]
          int _t2360#1 = phi(_t2375,_t1F7D)
          goto JOIN2361
        ASSIGN2379:  preds = [COND1F77]
          bool _t2378#1 = LT<real>(fm1F61,_t1F6D);
          if _t2378 then goto ASSIGN237C else goto ASSIGN237F
        ASSIGN237C:  preds = [COND237A]
          int _t237B#1 = -1;
          goto JOIN237E
        JOIN237E:  preds = [ASSIGN237C,ASSIGN237F]
          int _t1F79#1 = phi(_t237B,_t237D)
          goto JOIN1F7A
        ASSIGN237F:  preds = [COND237A]
          int _t237D#1 = 0;
          goto JOIN237E
        ASSIGN2381:  preds = [COND1F71]
          bool _t2380#1 = LT<real>(fa1E41,_t1F6D);
          if _t2380 then goto ASSIGN2384 else goto ASSIGN2387
        ASSIGN2384:  preds = [COND2382]
          int _t2383#1 = -1;
          goto JOIN2386
        JOIN2386:  preds = [ASSIGN2384,ASSIGN2387]
          int _t1F73#1 = phi(_t2383,_t2385)
          goto JOIN1F74
        ASSIGN2387:  preds = [COND2382]
          int _t2385#1 = 0;
          goto JOIN2386
    end update
  end ray
## initial strand creation
  GRID(2)
    ENTRY2388:  preds = []
      int iresU2389#1 = globals.iresU1774;
      int iresV238B#1 = globals.iresV1775;
      int _t238D#2 = 0;
      int _t238F#2 = 1;
      int _t2391#1 = ISub(iresU2389,_t238F);
      int[] _t2393#1 = Range(_t238D,_t2391);
    FOREACH2396:  preds = [ASSIGN2394,NEXT239F]
      foreach (vi2395 in _t2393) on exit goto RETURN23A0
      int _t2397#1 = ISub(iresV238B,_t238F);
      int[] _t2399#1 = Range(_t238D,_t2397);
    FOREACH239C:  preds = [ASSIGN239A,NEXT239E]
      foreach (ui239B in _t2399) on exit goto NEXT239F
      new ray(ui239B,vi2395);
      goto FOREACH239C
    NEXT239F:  preds = [FOREACH239C]
      goto FOREACH2396
    RETURN23A0:  preds = [FOREACH2396]
      return
#### end program ####
##### low-ir: after flatten ####
## properties
  GlobalInit StrandArray HasStartMethod ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[]) HasInputs HasGlobals
## globals
  input isoval176E (isoval) = <default>
  input thick176F (thick) = <default>
  input camEye1770 (camEye) = <default>
  input camAt1771 (camAt) = <default>
  input camUp1772 (camUp) = <default>
  input camFOV1773 (camFOV) = <default>
  input iresU1774 (iresU) = <default>
  input iresV1775 (iresV) = <default>
  input camNear1776 (camNear) = <default>
  input camFar1777 (camFar) = <default>
  input refStep1778 (refStep) = <default>
  input rayStep1779 (rayStep) = <default>
  input a177A (a) = <no-default>
  input 0b046F_intermedateGlobal177B (b) = <no-default>
  input 0c0471_intermedateGlobal177C (c) = <no-default>
  input zeroEps177D (zeroEps) = <default>
  input intervalEps177E (intervalEps) = <default>
  input indecies177F (indecies) = <no-default>
  input times1780 (times) = <no-default>
  input cells1781 (cells) = <no-default>
  input mcnear1782 (mcnear) = <default>
  input mcfar1783 (mcfar) = <default>
  input cmap1784 (cmap) = image("/home/teocollin/gitcode/diderot/tests/lipRay/find/cmap.nrrd")
  input cmin1785 (cmin) = <default>
  input cmax1786 (cmax) = <default>
  input light1787 (light) = <default>
  input phongKa1788 (phongKa) = <default>
  input phongKd1789 (phongKd) = <default>
  input phongKs178A (phongKs) = <default>
  input phongSp178B (phongSp) = <default>
  input maxAlpha178C (maxAlpha) = <default>
  input lightVsp178D (lightVsp) = <default>
  input debug178E (debug) = <default>
  input debugU178F (debugU) = <default>
  input debugV1790 (debugV) = <default>
  global femData:MeshCell[] 0cell_a1791
  global femData:FemFunc c1792
  global real camNearVsp1793
  global real camFarVsp1794
  global tensor[3] camN1795
  global tensor[3] camU1796
  global tensor[3] camV1797
  global real camVmax1798
  global real camUmax1799
  global tensor[3] L179A
## functions
  function femData:MeshPos _0A92_msh_newtonInverse1AF4 (tensor[2] pos1AF5#2, int cellInt1AF6#2, femData:Mesh mesh1AF7#12) {
    ENTRY1AF8:  preds = []
      real _t1AF9#2 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
      tensor[2] xn1AFB#1 = <tensor[2]>[_t1AF9,_t1AF9];
      int _t1AFD#1 = 0;
      int _t1AFF#1 = 16;
      int[] _t1B01#1 = Range(_t1AFD,_t1AFF);
    FOREACH1B04:  preds = [ASSIGN1B02,NEXT1D5B]
      foreach (itter1B03 in _t1B01) on exit goto ASSIGN1D60
        tensor[2] xn1C7B#3 = phi(xn1AFB,xn1CEF)
      int ilit1B06#1 = 3;
      int mulRes1B07#3 = IMul(cellInt1AF6,ilit1B06);
      int idx1B0A#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(mesh1AF7,mulRes1B07);
      int ilit1B0B#4 = 1;
      int addRes1B0C#1 = IAdd(mulRes1B07,ilit1B0B);
      int idx1B0D#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(mesh1AF7,addRes1B0C);
      int ilit1B0E#4 = 2;
      int addRes1B0F#1 = IAdd(mulRes1B07,ilit1B0E);
      int idx1B10#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(mesh1AF7,addRes1B0F);
      int mulRes1B23#2 = IMul(ilit1B0E,idx1B0A);
      int addRes1B26#1 = IAdd(ilit1B0B,mulRes1B23);
      real dof_load1B27#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh1AF7,mulRes1B23);
      real dof_load1B28#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh1AF7,addRes1B26);
      int mulRes1B2B#2 = IMul(ilit1B0E,idx1B0D);
      int addRes1B2D#1 = IAdd(ilit1B0B,mulRes1B2B);
      real dof_load1B2E#3 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh1AF7,mulRes1B2B);
      real dof_load1B2F#3 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh1AF7,addRes1B2D);
      int mulRes1B32#2 = IMul(ilit1B0E,idx1B10);
      int addRes1B34#1 = IAdd(ilit1B0B,mulRes1B32);
      real dof_load1B35#3 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh1AF7,mulRes1B32);
      real dof_load1B36#3 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh1AF7,addRes1B34);
      real coeff1B56#8 = -0.1e1;
      real one1B57#15 = 0.1e1;
      real prod1B58#2 = RMul(one1B57,one1B57);
      real basisEval1B59#2 = RMul(coeff1B56,prod1B58);
      real basisEval1B5A#5 = RMul(one1B57,prod1B58);
      real basisEval1B5B#12 = 0.e0;
      real r1B6E#2 = RMul(dof_load1B27,basisEval1B59);
      real r1B71#1 = RMul(dof_load1B2E,basisEval1B5A);
      real r1B74#1 = RMul(dof_load1B35,basisEval1B5B);
      real r1B75#1 = RAdd(r1B6E,r1B71);
      real r1B76#3 = RAdd(r1B75,r1B74);
      real r1B7A#1 = RMul(dof_load1B2E,basisEval1B5B);
      real r1B7C#1 = RMul(dof_load1B35,basisEval1B5A);
      real r1B7D#1 = RAdd(r1B6E,r1B7A);
      real r1B7E#3 = RAdd(r1B7D,r1B7C);
      real r1B81#2 = RMul(dof_load1B28,basisEval1B59);
      real r1B83#1 = RMul(dof_load1B2F,basisEval1B5A);
      real r1B85#1 = RMul(dof_load1B36,basisEval1B5B);
      real r1B86#1 = RAdd(r1B81,r1B83);
      real r1B87#3 = RAdd(r1B86,r1B85);
      real r1B89#1 = RMul(dof_load1B2F,basisEval1B5B);
      real r1B8A#1 = RMul(dof_load1B36,basisEval1B5A);
      real r1B8B#1 = RAdd(r1B81,r1B89);
      real r1B8C#3 = RAdd(r1B8B,r1B8A);
      real r1BB5#1 = RMul(basisEval1B5B,r1B76);
      real r1BB8#1 = RMul(coeff1B56,r1B87);
      real r1BB9#2 = RAdd(r1BB5,r1BB8);
      real r1BBB#2 = RMul(basisEval1B5B,r1B7E);
      real r1BBD#1 = RMul(coeff1B56,r1B8C);
      real r1BBE#2 = RAdd(r1BBB,r1BBD);
      real r1BC1#1 = RMul(one1B57,r1B76);
      real r1BC2#1 = RMul(basisEval1B5B,r1B87);
      real r1BC3#2 = RAdd(r1BC1,r1BC2);
      real r1BC4#1 = RMul(one1B57,r1B7E);
      real r1BC5#2 = RMul(basisEval1B5B,r1B8C);
      real r1BC6#2 = RAdd(r1BC4,r1BC5);
      tensor[2] probe_l_121BDF#1 = <tensor[2]>[r1B76,r1B87];
      real r1C37#1 = RMul(one1B57,r1B8C);
      real r1C38#1 = RAdd(r1BBB,r1C37);
      real r1C3A#1 = RMul(coeff1B56,r1B7E);
      real r1C3C#1 = RAdd(r1C3A,r1BC5);
      tensor[2] op1_e3_l_141C31#1 = <tensor[2]>[r1C38,r1C3C];
      real r1C4D#1 = RMul(basisEval1B5B,r1BB9);
      real r1C50#1 = RMul(coeff1B56,r1BBE);
      real r1C51#1 = RAdd(r1C4D,r1C50);
      real r1C53#1 = RMul(basisEval1B5B,r1BC3);
      real r1C55#1 = RMul(coeff1B56,r1BC6);
      real r1C56#1 = RAdd(r1C53,r1C55);
      real r1C59#1 = RMul(one1B57,r1BB9);
      real r1C5A#1 = RMul(basisEval1B5B,r1BBE);
      real r1C5B#1 = RAdd(r1C59,r1C5A);
      real r1C5C#1 = RMul(one1B57,r1BC3);
      real r1C5D#1 = RMul(basisEval1B5B,r1BC6);
      real r1C5E#1 = RAdd(r1C5C,r1C5D);
      real op1_e3_l_161C77#4 = VDot<2>(probe_l_121BDF,op1_e3_l_141C31);
      real varAcc1C7C#1 = VIndex<2,0>(xn1C7B);
      real varAcc1C7D#1 = VIndex<2,1>(xn1C7B);
      real prod1C81#2 = RMul(varAcc1C7C,one1B57);
      real prod1C83#2 = RMul(one1B57,varAcc1C7D);
      real mult1C86#1 = RMul(coeff1B56,prod1C83);
      real mult1C87#1 = RMul(coeff1B56,prod1C81);
      real sum1C88#1 = RAdd(mult1C86,mult1C87);
      real sum1C89#2 = RAdd(basisEval1B5A,sum1C88);
      real basisEval1C8B#2 = RMul(one1B57,prod1C81);
      real basisEval1C8C#2 = RMul(one1B57,prod1C83);
      real r1CA4#1 = RMul(dof_load1B27,sum1C89);
      real r1CA7#1 = RMul(dof_load1B2E,basisEval1C8B);
      real r1CAA#1 = RMul(dof_load1B35,basisEval1C8C);
      real r1CAB#1 = RAdd(r1CA4,r1CA7);
      real r1CAC#1 = RAdd(r1CAB,r1CAA);
      real r1CAE#1 = RMul(dof_load1B28,sum1C89);
      real r1CB0#1 = RMul(dof_load1B2F,basisEval1C8B);
      real r1CB2#1 = RMul(dof_load1B36,basisEval1C8C);
      real r1CB3#1 = RAdd(r1CAE,r1CB0);
      real r1CB4#1 = RAdd(r1CB3,r1CB2);
      tensor[2] probe_l_171CA1#1 = <tensor[2]>[r1CAC,r1CB4];
      real r1CCC#1 = RDiv(r1C51,op1_e3_l_161C77);
      real r1CCE#1 = RDiv(r1C56,op1_e3_l_161C77);
      tensor[2] tensor1CCF#1 = <tensor[2]>[r1CCC,r1CCE];
      real r1CD1#1 = RDiv(r1C5B,op1_e3_l_161C77);
      real r1CD3#1 = RDiv(r1C5E,op1_e3_l_161C77);
      tensor[2] tensor1CD4#1 = <tensor[2]>[r1CD1,r1CD3];
      tensor[2] op1_e3_l_191CE1#2 = VSub<2>(probe_l_171CA1,pos1AF5);
      real vdot1CE6#1 = VDot<2>(tensor1CCF,op1_e3_l_191CE1);
      real vdot1CE8#1 = VDot<2>(tensor1CD4,op1_e3_l_191CE1);
      tensor[2] op1_e3_l_201CE4#3 = <tensor[2]>[vdot1CE6,vdot1CE8];
      tensor[2] xn1CEF#4 = VSub<2>(xn1C7B,op1_e3_l_201CE4);
      real _t1CF2#2 = 0.1e-7;
      real _t1CF4#1 = RMul(_t1CF2,_t1CF2);
      real _t1D2E#1 = VDot<2>(op1_e3_l_201CE4,op1_e3_l_201CE4);
      bool _t1D31#1 = GTE<real>(_t1CF4,_t1D2E);
      if _t1D31 then goto ASSIGN1D37 else goto JOIN1D5A
    ASSIGN1D37:  preds = [COND1D33]
      real _t1D36#3 = 0.1e-8;
      real _t1D38#1 = RAdd(one1B57,_t1D36);
      tensor[2] _t1D3B#1 = <tensor[2]>[one1B57,one1B57];
      real _t1D3D#1 = VDot<2>(_t1D3B,xn1CEF);
      bool _t1D40#1 = GT<real>(_t1D38,_t1D3D);
      tensor[2] _t1D42#1 = <tensor[2]>[_t1D36,_t1D36];
      tensor[2] _t1D44#2 = VAdd<2>(_t1D42,xn1CEF);
      real _t1D47#1 = VIndex<2,0>(_t1D44);
      real _t1D49#2 = -0.e0;
      bool _t1D4B#1 = GT<real>(_t1D47,_t1D49);
      real _t1D4D#1 = VIndex<2,1>(_t1D44);
      bool _t1D4F#1 = GT<real>(_t1D4D,_t1D49);
      bool _t1D51#1 = BAnd(_t1D4B,_t1D4F);
      bool _t1D53#1 = BAnd(_t1D40,_t1D51);
      if _t1D53 then goto ASSIGN1D57 else goto ASSIGN1D5D
    ASSIGN1D57:  preds = [COND1D55]
      femData:MeshPos _t1D56#1 = ExtractFemItemN<[femData:Mesh,int,tensor[2],tensor[2]],femData:MeshPos,AllBuild(MeshPos),0000,"",[],int>(mesh1AF7,cellInt1AF6,xn1CEF,pos1AF5);
      return _t1D56
      goto JOIN1D59
    JOIN1D59:  preds = [*RETURN(_t1D56)1D58,*RETURN(_t1D5C)1D5E]
      goto JOIN1D5A
    JOIN1D5A:  preds = [*JOIN1D59,COND1D33]
      goto FOREACH1B04
    ASSIGN1D5D:  preds = [COND1D55]
      femData:MeshPos _t1D5C#1 = ExtractFemItemN<[femData:Mesh],femData:MeshPos,InvalidBuild(MeshPos),0000,"",[],int>(mesh1AF7);
      return _t1D5C
      goto JOIN1D59
    ASSIGN1D60:  preds = [FOREACH1B04]
      femData:MeshPos _t1D5F#1 = ExtractFemItemN<[femData:Mesh],femData:MeshPos,InvalidBuild(MeshPos),0000,"",[],int>(mesh1AF7);
      return _t1D5F
}
## input initialization
  ENTRY179D:  preds = []
    real isoval179E#1 = 0.2e0;
    globals.isoval176E = isoval179E;
    real thick17A1#1 = 0.7e-1;
    globals.thick176F = thick17A1;
    real _t17A4#2 = 0.3e1;
    real _t17A6#1 = -0.3e1;
    tensor[3] camEye17A8#1 = <tensor[3]>[_t17A4,_t17A6,_t17A4];
    globals.camEye1770 = camEye17A8;
    real _t17AB#5 = 0.5e0;
    tensor[3] camAt17AD#1 = <tensor[3]>[_t17AB,_t17AB,_t17AB];
    globals.camAt1771 = camAt17AD;
    real _t17B0#5 = 0.e0;
    real _t17B2#7 = 0.1e1;
    tensor[3] camUp17B4#1 = <tensor[3]>[_t17B0,_t17B0,_t17B2];
    globals.camUp1772 = camUp17B4;
    real camFOV17B7#1 = 0.137e2;
    globals.camFOV1773 = camFOV17B7;
    int iresU17BA#2 = 10;
    globals.iresU1774 = iresU17BA;
    globals.iresV1775 = iresU17BA;
    real camNear17BE#1 = -0.2e1;
    globals.camNear1776 = camNear17BE;
    real camFar17C1#1 = 0.5e1;
    globals.camFar1777 = camFar17C1;
    globals.refStep1778 = _t17B2;
    real rayStep17C5#1 = 0.1e-1;
    globals.rayStep1779 = rayStep17C5;
    real zeroEps17C8#2 = 0.1e-10;
    globals.zeroEps177D = zeroEps17C8;
    globals.intervalEps177E = zeroEps17C8;
    tensor[3] mcnear17CC#2 = <tensor[3]>[_t17B2,_t17B2,_t17B2];
    globals.mcnear1782 = mcnear17CC;
    globals.mcfar1783 = mcnear17CC;
    globals.cmin1785 = _t17B0;
    globals.cmax1786 = _t17B2;
    bool light17D2#2 = false;
    globals.light1787 = light17D2;
    globals.phongKa1788 = _t17AB;
    globals.phongKd1789 = _t17AB;
    globals.phongKs178A = _t17B0;
    real phongSp17D8#1 = 0.6e2;
    globals.phongSp178B = phongSp17D8;
    globals.maxAlpha178C = _t17B2;
    real _t17DC#1 = 0.369e1;
    real _t17DE#1 = 0.153e1;
    tensor[3] lightVsp17E0#1 = <tensor[3]>[_t17B0,_t17DC,_t17DE];
    globals.lightVsp178D = lightVsp17E0;
    globals.debug178E = light17D2;
    int debugU17E4#1 = 8;
    globals.debugU178F = debugU17E4;
    int debugV17E7#1 = 2;
    globals.debugV1790 = debugV17E7;
    return
## global-variable initialization
  ENTRY17EB:  preds = []
    tensor[3] camEye17EC#1 = globals.camEye1770;
    tensor[3] camAt17EE#1 = globals.camAt1771;
    tensor[3] camUp17F0#3 = globals.camUp1772;
    real camFOV17F2#1 = globals.camFOV1773;
    int iresU17F4#1 = globals.iresU1774;
    int iresV17F6#1 = globals.iresV1775;
    real camNear17F8#1 = globals.camNear1776;
    real camFar17FA#1 = globals.camFar1777;
    femData:Mesh a17FC#3 = globals.a177A;
    femData:Space 0b046F_intermedateGlobal17FE#1 = globals.0b046F_intermedateGlobal177B;
    femData:FemFunc 0c0471_intermedateGlobal1800#1 = globals.0c0471_intermedateGlobal177C;
    tensor[3] lightVsp1804#5 = globals.lightVsp178D;
    int _t1806#1 = 0;
    int _t1808#1 = 1;
    int _t180A#1 = ExtractFemItem<int,NumCell(Mesh)>(a17FC);
    int _t180C#1 = ISub(_t180A,_t1808);
    int[] _t180E#1 = Range(_t1806,_t180C);
    femData:MeshCell[] _t1810#1 = <femData:MeshCell[]>{};
  FOREACH1813:  preds = [ASSIGN1811,NEXT1819]
    foreach (_t1812 in _t180E) on exit goto GASSIGN181A
      femData:MeshCell[] _t1817#2 = phi(_t1810,_t1816)
    femData:MeshCell _t1814#1 = LoadFem<femData:MeshCell>(a17FC,_t1812);
    femData:MeshCell[] _t1816#1 = Append<femData:MeshCell>(_t1817,_t1814);
    goto FOREACH1813
  GASSIGN181A:  preds = [FOREACH1813]
    globals.0cell_a1791 = _t1817;
    femData:Space b181B#1 = LoadFem<femData:Space>(0b046F_intermedateGlobal17FE,a17FC);
    femData:FemFunc c181D#1 = LoadFem<femData:FemFunc>(0c0471_intermedateGlobal1800,b181B);
    globals.c1792 = c181D;
    tensor[3] op1_e3_l_31820#9 = VSub<3>(camAt17EE,camEye17EC);
    real op1_e3_l_51823#1 = VDot<3>(op1_e3_l_31820,op1_e3_l_31820);
    real op1_e3_l_61826#5 = Sqrt(op1_e3_l_51823);
    real camNearVsp1829#1 = RAdd(camNear17F8,op1_e3_l_61826);
    globals.camNearVsp1793 = camNearVsp1829;
    real camFarVsp182D#1 = RAdd(camFar17FA,op1_e3_l_61826);
    globals.camFarVsp1794 = camFarVsp182D;
    real realLit1832#9 = 0.1e1;
    real op1_e3_l_91831#6 = RDiv(realLit1832,op1_e3_l_61826);
    tensor[3] camN1836#4 = VScale<3>(op1_e3_l_91831,op1_e3_l_31820);
    globals.camN1795 = camN1836;
    real realLit183B#6 = 0.e0;
    real r183C#3 = TensorIndex<tensor[3],[0]>(camUp17F0);
    real r183D#3 = RMul(realLit183B,r183C);
    real r183E#3 = TensorIndex<tensor[3],[1]>(camUp17F0);
    real r183F#3 = RMul(realLit183B,r183E);
    real r1840#3 = TensorIndex<tensor[3],[2]>(camUp17F0);
    real r1841#5 = RMul(realLit183B,r1840);
    real r1842#3 = RAdd(r183D,r183F);
    real r1843#3 = RAdd(r1842,r1841);
    real r1845#1 = RMul(realLit1832,r1840);
    real r1846#1 = RAdd(r1842,r1845);
    real realLit1847#6 = -0.1e1;
    real r1848#1 = RMul(realLit1847,r183E);
    real r1849#1 = RAdd(r183D,r1848);
    real r184A#1 = RAdd(r1849,r1841);
    tensor[3] tensor184B#1 = <tensor[3]>[r1843,r1846,r184A];
    real r184C#1 = RMul(realLit1847,r1840);
    real r184D#1 = RAdd(r1842,r184C);
    real r184E#1 = RMul(realLit1832,r183C);
    real r184F#1 = RAdd(r184E,r183F);
    real r1850#1 = RAdd(r184F,r1841);
    tensor[3] tensor1851#1 = <tensor[3]>[r184D,r1843,r1850];
    real r1852#1 = RMul(realLit1832,r183E);
    real r1853#1 = RAdd(r183D,r1852);
    real r1854#1 = RAdd(r1853,r1841);
    real r1855#1 = RMul(realLit1847,r183C);
    real r1856#1 = RAdd(r1855,r183F);
    real r1857#1 = RAdd(r1856,r1841);
    tensor[3] tensor1858#1 = <tensor[3]>[r1854,r1857,r1843];
    real vdot187B#1 = VDot<3>(op1_e3_l_31820,tensor184B);
    real vdot187D#1 = VDot<3>(op1_e3_l_31820,tensor1851);
    real vdot187F#1 = VDot<3>(op1_e3_l_31820,tensor1858);
    tensor[3] op1_e3_l_171879#6 = <tensor[3]>[vdot187B,vdot187D,vdot187F];
    real op1_e3_l_341888#1 = VDot<3>(op1_e3_l_171879,op1_e3_l_171879);
    real r188C#1 = RMul(op1_e3_l_91831,op1_e3_l_91831);
    real op1_e3_l_35188B#1 = RMul(r188C,op1_e3_l_341888);
    real op1_e3_l_361890#1 = Sqrt(op1_e3_l_35188B);
    tensor[3] op1_e3_l_371893#1 = VScale<3>(op1_e3_l_91831,op1_e3_l_171879);
    real op1_e3_l_381896#2 = RDiv(realLit1832,op1_e3_l_361890);
    tensor[3] camU189B#4 = VScale<3>(op1_e3_l_381896,op1_e3_l_371893);
    globals.camU1796 = camU189B;
    real r18A1#3 = TensorIndex<tensor[3],[0]>(op1_e3_l_31820);
    real r18A2#3 = RMul(realLit183B,r18A1);
    real r18A3#3 = TensorIndex<tensor[3],[1]>(op1_e3_l_31820);
    real r18A4#3 = RMul(realLit183B,r18A3);
    real r18A5#3 = TensorIndex<tensor[3],[2]>(op1_e3_l_31820);
    real r18A6#5 = RMul(realLit183B,r18A5);
    real r18A7#3 = RAdd(r18A2,r18A4);
    real r18A8#3 = RAdd(r18A7,r18A6);
    real r18AA#1 = RMul(realLit1832,r18A5);
    real r18AB#1 = RAdd(r18A7,r18AA);
    real r18AD#1 = RMul(realLit1847,r18A3);
    real r18AE#1 = RAdd(r18A2,r18AD);
    real r18AF#1 = RAdd(r18AE,r18A6);
    tensor[3] tensor18B0#1 = <tensor[3]>[r18A8,r18AB,r18AF];
    real r18B1#1 = RMul(realLit1847,r18A5);
    real r18B2#1 = RAdd(r18A7,r18B1);
    real r18B3#1 = RMul(realLit1832,r18A1);
    real r18B4#1 = RAdd(r18B3,r18A4);
    real r18B5#1 = RAdd(r18B4,r18A6);
    tensor[3] tensor18B6#1 = <tensor[3]>[r18B2,r18A8,r18B5];
    real r18B7#1 = RMul(realLit1832,r18A3);
    real r18B8#1 = RAdd(r18A2,r18B7);
    real r18B9#1 = RAdd(r18B8,r18A6);
    real r18BA#1 = RMul(realLit1847,r18A1);
    real r18BB#1 = RAdd(r18BA,r18A4);
    real r18BC#1 = RAdd(r18BB,r18A6);
    tensor[3] tensor18BD#1 = <tensor[3]>[r18B9,r18BC,r18A8];
    real vdot18E0#1 = VDot<3>(op1_e3_l_171879,tensor18B0);
    real vdot18E2#1 = VDot<3>(op1_e3_l_171879,tensor18B6);
    real vdot18E4#1 = VDot<3>(op1_e3_l_171879,tensor18BD);
    tensor[3] op1_e3_l_4718DE#1 = <tensor[3]>[vdot18E0,vdot18E2,vdot18E4];
    tensor[3] op1_e3_l_5018ED#3 = VScale<3>(op1_e3_l_91831,op1_e3_l_4718DE);
    real r18F1#1 = TensorIndex<tensor[3],[0]>(op1_e3_l_5018ED);
    real r18F2#3 = RMul(op1_e3_l_381896,op1_e3_l_91831);
    real r18F3#2 = RMul(r18F2,r18F1);
    real r18F4#1 = TensorIndex<tensor[3],[1]>(op1_e3_l_5018ED);
    real r18F5#2 = RMul(r18F2,r18F4);
    real r18F6#1 = TensorIndex<tensor[3],[2]>(op1_e3_l_5018ED);
    real r18F7#2 = RMul(r18F2,r18F6);
    tensor[3] camV18F0#1 = <tensor[3]>[r18F3,r18F5,r18F7];
    globals.camV1797 = camV18F0;
    real _t1902#1 = 0.314159265358979323846264338327950288e1;
    real _t1904#1 = 0.36e3;
    real op1_e3_l_51906#1 = RMul(camFOV17F2,_t1902);
    real op1_e3_l_61909#1 = RDiv(op1_e3_l_51906,_t1904);
    real op1_e3_l_10190C#2 = Tan(op1_e3_l_61909);
    real camVmax190F#1 = RMul(op1_e3_l_10190C,op1_e3_l_61826);
    globals.camVmax1798 = camVmax190F;
    real _t1913#1 = IntToReal(iresU17F4);
    real _t1915#1 = IntToReal(iresV17F6);
    real r1918#1 = RMul(_t1913,op1_e3_l_10190C);
    real op1_e3_l_141917#1 = RMul(r1918,op1_e3_l_61826);
    real camUmax191C#1 = RDiv(op1_e3_l_141917,_t1915);
    globals.camUmax1799 = camUmax191C;
    real op1_e3_l_31926#1 = VDot<3>(lightVsp1804,lightVsp1804);
    real op1_e3_l_41929#1 = Sqrt(op1_e3_l_31926);
    real op1_e3_l_5192C#1 = RDiv(realLit1832,op1_e3_l_41929);
    real r1932#1 = VIndex<3,0>(camU189B);
    real r1933#3 = TensorIndex<tensor[3],[0]>(lightVsp1804);
    real r1934#1 = RMul(r1932,r1933);
    real r1936#3 = TensorIndex<tensor[3],[1]>(lightVsp1804);
    real r1937#1 = RMul(r18F3,r1936);
    real r1938#1 = VIndex<3,0>(camN1836);
    real r1939#3 = TensorIndex<tensor[3],[2]>(lightVsp1804);
    real r193A#1 = RMul(r1938,r1939);
    real r193B#1 = RAdd(r1934,r1937);
    real r193C#1 = RAdd(r193B,r193A);
    real r193D#1 = VIndex<3,1>(camU189B);
    real r193E#1 = RMul(r193D,r1933);
    real r1940#1 = RMul(r18F5,r1936);
    real r1941#1 = VIndex<3,1>(camN1836);
    real r1942#1 = RMul(r1941,r1939);
    real r1943#1 = RAdd(r193E,r1940);
    real r1944#1 = RAdd(r1943,r1942);
    real r1945#1 = VIndex<3,2>(camU189B);
    real r1946#1 = RMul(r1945,r1933);
    real r1948#1 = RMul(r18F7,r1936);
    real r1949#1 = VIndex<3,2>(camN1836);
    real r194A#1 = RMul(r1949,r1939);
    real r194B#1 = RAdd(r1946,r1948);
    real r194C#1 = RAdd(r194B,r194A);
    tensor[3] op1_e3_l_61931#1 = <tensor[3]>[r193C,r1944,r194C];
    tensor[3] L196A#1 = VScale<3>(op1_e3_l_5192C,op1_e3_l_61931);
    globals.L179A = L196A;
    return
## strand
  strand ray (int ui1971#3, int vi1972#4)
    state:
      real rayU;
      real rayV;
      tensor[3] UV;
      tensor[3] rayOrig;
      tensor[3] rayVec;
      real camNearVsp;
      real camFarVsp;
      int offset;
      int len;
      int itter;
      int intersectionItter;
      int idx;
      tensor[2] interval;
      real s;
      real e;
      femData:MeshCell cc;
      femData:FuncCell fc;
      output real out;
      output tensor[4] rgba;
      output tensor[3][] locs;
      int ui;
      int vi;
    state init
      ENTRY1989:  preds = []
        tensor[3] camEye198A#1 = globals.camEye1770;
        int iresU198C#2 = globals.iresU1774;
        int iresV198E#3 = globals.iresV1775;
        femData:MeshCell[] 0cell_a1990#1 = globals.0cell_a1791;
        femData:FemFunc c1992#1 = globals.c1792;
        int[] indecies1994#2 = globals.indecies177F;
        tensor[2][] times1996#1 = globals.times1780;
        real camNearVsp1998#1 = globals.camNearVsp1793;
        real camFarVsp199A#1 = globals.camFarVsp1794;
        tensor[3] camN199C#1 = globals.camN1795;
        tensor[3] camU199E#1 = globals.camU1796;
        tensor[3] camV19A0#1 = globals.camV1797;
        real camVmax19A2#2 = globals.camVmax1798;
        real camUmax19A4#2 = globals.camUmax1799;
        real _t19A6#4 = -0.5e0;
        real _t19A8#1 = IntToReal(ui1971);
        real _t19AA#1 = IntToReal(iresU198C);
        real _t19AC#2 = 0.5e0;
        real op1_e3_l_619AE#1 = RSub(_t19AA,_t19AC);
        real op1_e3_l_719B1#1 = RSub(_t19A8,_t19A6);
        real op1_e3_l_819B4#1 = RSub(op1_e3_l_619AE,_t19A6);
        real op1_e3_l_919B7#2 = RNeg(camUmax19A4);
        real op1_e3_l_1019BA#1 = RDiv(op1_e3_l_719B1,op1_e3_l_819B4);
        real op1_e3_l_1119BD#1 = RSub(camUmax19A4,op1_e3_l_919B7);
        real op1_e3_l_1319C0#1 = RMul(op1_e3_l_1019BA,op1_e3_l_1119BD);
        real rayU19C3#2 = RAdd(op1_e3_l_919B7,op1_e3_l_1319C0);
        real _t19C6#1 = IntToReal(vi1972);
        real _t19C8#1 = IntToReal(iresV198E);
        real op1_e3_l_619CA#1 = RSub(_t19C8,_t19AC);
        real op1_e3_l_719CD#1 = RSub(_t19C6,_t19A6);
        real op1_e3_l_819D0#1 = RSub(op1_e3_l_619CA,_t19A6);
        real op1_e3_l_919D3#2 = RNeg(camVmax19A2);
        real op1_e3_l_1019D6#1 = RDiv(op1_e3_l_719CD,op1_e3_l_819D0);
        real op1_e3_l_1119D9#1 = RSub(camVmax19A2,op1_e3_l_919D3);
        real op1_e3_l_1319DC#1 = RMul(op1_e3_l_1019D6,op1_e3_l_1119D9);
        real rayV19DF#2 = RAdd(op1_e3_l_919D3,op1_e3_l_1319DC);
        tensor[3] op1_e3_l_3219F1#2 = VScale<3>(rayU19C3,camU199E);
        tensor[3] op1_e3_l_3319F4#2 = VScale<3>(rayV19DF,camV19A0);
        tensor[3] UV19F7#1 = VAdd<3>(op1_e3_l_3219F1,op1_e3_l_3319F4);
        tensor[3] v19FB#1 = VAdd<3>(camEye198A,op1_e3_l_3219F1);
        tensor[3] rayOrig19FA#1 = VAdd<3>(v19FB,op1_e3_l_3319F4);
        real _t19FF#8 = 0.e0;
        tensor[3] _t1A01#1 = <tensor[3]>[_t19FF,_t19FF,_t19FF];
        tensor[3] rayVec1A03#1 = VAdd<3>(camN199C,_t1A01);
        int _t1A06#2 = IMul(ui1971,iresV198E);
        int _t1A08#1 = IAdd(_t1A06,vi1972);
        int offset1A0A#3 = Subscript<int[]>(indecies1994,_t1A08);
        int _t1A0C#1 = IMul(iresU198C,iresV198E);
        int _t1A0E#1 = IAdd(_t1A0C,_t1A06);
        int _t1A10#1 = IAdd(_t1A0E,vi1972);
        int len1A12#1 = Subscript<int[]>(indecies1994,_t1A10);
        int itter1A14#3 = 0;
        tensor[2] interval1A18#3 = Subscript<tensor[2][]>(times1996,offset1A0A);
        real s1A1A#1 = VIndex<2,0>(interval1A18);
        real e1A1C#1 = VIndex<2,1>(interval1A18);
        femData:MeshCell cc1A1E#2 = Subscript<femData:MeshCell[]>(0cell_a1990,itter1A14);
        int _t1A20#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc1A1E);
        femData:FuncCell _t1A22#1 = LoadFem<femData:FuncCell>(c1992,_t1A20);
        tensor[4] rgba1A24#1 = <tensor[4]>[_t19FF,_t19FF,_t19FF,_t19FF];
        tensor[3][0] _t1A26#1 = <tensor[3][0]>{};
        tensor[3][] _t1A28#1 = MkDynamic<tensor[3],0>(_t1A26);
        self.rayU = rayU19C3;
        self.rayV = rayV19DF;
        self.UV = UV19F7;
        self.rayOrig = rayOrig19FA;
        self.rayVec = rayVec1A03;
        self.camNearVsp = camNearVsp1998;
        self.camFarVsp = camFarVsp199A;
        self.offset = offset1A0A;
        self.len = len1A12;
        self.itter = itter1A14;
        self.intersectionItter = itter1A14;
        self.idx = offset1A0A;
        self.interval = interval1A18;
        self.s = s1A1A;
        self.e = e1A1C;
        self.cc = cc1A1E;
        self.fc = _t1A22;
        self.out = _t19FF;
        self.rgba = rgba1A24;
        self.locs = _t1A28;
        self.ui = ui1971;
        self.vi = vi1972;
        return
    end state init
    method start
        ENTRY1A41:  preds = []
          femData:MeshCell[] 0cell_a1A42#1 = globals.0cell_a1791;
          femData:FemFunc c1A44#1 = globals.c1792;
          int[] cells1A46#1 = globals.cells1781;
          bool debug1A48#1 = globals.debug178E;
          int debugU1A4A#1 = globals.debugU178F;
          int debugV1A4C#1 = globals.debugV1790;
          int len1A4E#1 = self.len;
          int idx1A50#1 = self.idx;
          int ui1A52#2 = self.ui;
          int vi1A54#2 = self.vi;
          if debug1A48 then goto ASSIGN1A58 else goto JOIN1A60
        ASSIGN1A58:  preds = [COND1A56]
          bool _t1A57#1 = NEQ<int>(ui1A52,debugU1A4A);
          if _t1A57 then goto ASSIGN1A5B else goto JOIN1A5F
        ASSIGN1A5B:  preds = [COND1A59]
          bool _t1A5A#1 = NEQ<int>(vi1A54,debugV1A4C);
          if _t1A5A then goto STABILIZE1A5D else goto JOIN1A5E
        STABILIZE1A5D:  preds = [COND1A5C]
          stabilize
          goto JOIN1A5E
        JOIN1A5E:  preds = [*STABILIZE1A5D,COND1A5C]
          goto JOIN1A5F
        JOIN1A5F:  preds = [JOIN1A5E,COND1A59]
          goto JOIN1A60
        JOIN1A60:  preds = [JOIN1A5F,COND1A56]
          int _t1A61#1 = 0;
          bool _t1A63#1 = EQ<int>(len1A4E,_t1A61);
          if _t1A63 then goto ASSIGN1A67 else goto JOIN1A6E
        ASSIGN1A67:  preds = [COND1A65]
          string _t1A66#1 = "(find:)No intersection found:";
          string _t1A68#1 = "/";
          string _t1A6A#1 = "\n";
          Print<[string,int,string,int,string]>(_t1A66,ui1A52,_t1A68,vi1A54,_t1A6A);
          stabilize
          goto JOIN1A6E
        JOIN1A6E:  preds = [*STABILIZE1A6D,COND1A65]
          int _t1A6F#1 = Subscript<int[]>(cells1A46,idx1A50);
          femData:MeshCell cc1A71#2 = Subscript<femData:MeshCell[]>(0cell_a1A42,_t1A6F);
          int _t1A73#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc1A71);
          femData:FuncCell _t1A75#1 = LoadFem<femData:FuncCell>(c1A44,_t1A73);
          self.cc = cc1A71;
          self.fc = _t1A75;
          active
    end start
    method update
        ENTRY1A7A:  preds = []
          image(IMAGE1D<double[3]>) cmap1A7B#17 = globals.cmap1784;
          femData:MeshCell[] 0cell_a1A81#1 = globals.0cell_a1791;
          femData:FemFunc c1A83#1 = globals.c1792;
          real zeroEps1A85#1 = globals.zeroEps177D;
          real intervalEps1A87#4 = globals.intervalEps177E;
          tensor[2][] times1A89#1 = globals.times1780;
          int[] cells1A8B#1 = globals.cells1781;
          tensor[3] mcnear1A8D#2 = globals.mcnear1782;
          tensor[3] mcfar1A8F#1 = globals.mcfar1783;
          real cmin1A91#3 = globals.cmin1785;
          real cmax1A93#2 = globals.cmax1786;
          bool light1A95#1 = globals.light1787;
          real phongKa1A97#1 = globals.phongKa1788;
          real phongKd1A99#1 = globals.phongKd1789;
          real phongKs1A9B#1 = globals.phongKs178A;
          real phongSp1A9D#1 = globals.phongSp178B;
          tensor[3] L1A9F#2 = globals.L179A;
          tensor[3] rayOrig1AA1#4 = self.rayOrig;
          tensor[3] rayVec1AA3#7 = self.rayVec;
          real camNearVsp1AA5#2 = self.camNearVsp;
          real camFarVsp1AA7#1 = self.camFarVsp;
          int offset1AA9#1 = self.offset;
          int len1AAB#1 = self.len;
          int itter1AAD#3 = self.itter;
          int intersectionItter1AAF#2 = self.intersectionItter;
          tensor[2] interval1AB1#1 = self.interval;
          real s1AB3#7 = self.s;
          real e1AB5#5 = self.e;
          femData:MeshCell cc1AB7#3 = self.cc;
          femData:FuncCell fc1AB9#3 = self.fc;
          real out1ABB#2 = self.out;
          tensor[4] rgba1ABD#1 = self.rgba;
          tensor[3][] locs1ABF#1 = self.locs;
          int ui1AC1#1 = self.ui;
          int vi1AC3#1 = self.vi;
          string _t1AC5#1 = "Ui/Vi::";
          string _t1AC7#1 = "/";
          string _t1AC9#11 = "\n";
          Print<[string,int,string,int,string]>(_t1AC5,ui1AC1,_t1AC7,vi1AC3,_t1AC9);
          string _t1ACC#1 = "Interval:";
          tensor[2] _t1ACE#1 = <tensor[2]>[s1AB3,e1AB5];
          Print<[string,tensor[2],string]>(_t1ACC,_t1ACE,_t1AC9);
          string _t1AD1#1 = "inner itter:";
          Print<[string,int,string]>(_t1AD1,intersectionItter1AAF,_t1AC9);
          string _t1AD4#1 = "Outer itter:";
          Print<[string,int,string]>(_t1AD4,itter1AAD,_t1AC9);
          real _t1AD7#1 = VIndex<3,0>(rayOrig1AA1);
          real _t1AD9#1 = VIndex<3,1>(rayOrig1AA1);
          tensor[2] _t1ADB#3 = <tensor[2]>[_t1AD7,_t1AD9];
          real _t1ADD#1 = VIndex<3,0>(rayVec1AA3);
          real _t1ADF#1 = VIndex<3,1>(rayVec1AA3);
          tensor[2] _t1AE1#3 = <tensor[2]>[_t1ADD,_t1ADF];
          tensor[2] op1_e3_l_31AE3#1 = VScale<2>(s1AB3,_t1AE1);
          tensor[2] startRay1AE6#1 = VAdd<2>(_t1ADB,op1_e3_l_31AE3);
          tensor[2] op1_e3_l_31AE9#1 = VScale<2>(e1AB5,_t1AE1);
          tensor[2] endRay1AEC#1 = VAdd<2>(_t1ADB,op1_e3_l_31AE9);
          femData:Mesh _t1AEF#12 = ExtractFem<femData:Mesh,femData:MeshCell>(cc1AB7);
          int _t1AF1#4 = ExtractFemItem<int,CellIndex(MeshCell)>(cc1AB7);
          femData:MeshPos callNewtonPos1AF3#1 = _0A92_msh_newtonInverse1AF4 (startRay1AE6,_t1AF1,_t1AEF);
          tensor[2] refPos1D63#3 = ExtractFemItem<tensor[2],RefPos(Mesh)>(callNewtonPos1AF3);
          femData:MeshPos callNewtonPos1D65#1 = _0A92_msh_newtonInverse1AF4 (endRay1AEC,_t1AF1,_t1AEF);
          tensor[2] refPos1D67#3 = ExtractFemItem<tensor[2],RefPos(Mesh)>(callNewtonPos1D65);
          string _t1D69#1 = "inverses:";
          Print<[string,tensor[2],tensor[2],string]>(_t1D69,refPos1D63,refPos1D67,_t1AC9);
          femData:FemFunc _t1D6C#7 = ExtractFem<femData:FemFunc,femData:FuncCell>(fc1AB9);
          femData:Space _t1D6E#6 = ExtractFem<femData:Space,femData:FemFunc>(_t1D6C);
          int _t1D70#1 = ExtractFemItem<int,CellIndex(FuncCell)>(fc1AB9);
          real _t1D72#3 = VIndex<3,2>(rayVec1AA3);
          real _t1D74#3 = VIndex<3,2>(rayOrig1AA1);
          int ilit1D77#1 = 6;
          int mulRes1D78#6 = IMul(_t1D70,ilit1D77);
          int idx1D7B#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1D6E,mulRes1D78);
          int ilit1D7C#23 = 1;
          int addRes1D7D#1 = IAdd(mulRes1D78,ilit1D7C);
          int idx1D7E#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1D6E,addRes1D7D);
          int ilit1D7F#9 = 2;
          int addRes1D80#1 = IAdd(mulRes1D78,ilit1D7F);
          int idx1D81#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1D6E,addRes1D80);
          int ilit1D82#6 = 3;
          int addRes1D83#1 = IAdd(mulRes1D78,ilit1D82);
          int idx1D84#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1D6E,addRes1D83);
          int ilit1D85#1 = 4;
          int addRes1D86#1 = IAdd(mulRes1D78,ilit1D85);
          int idx1D87#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1D6E,addRes1D86);
          int ilit1D88#1 = 5;
          int addRes1D89#1 = IAdd(mulRes1D78,ilit1D88);
          int idx1D8A#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1D6E,addRes1D89);
          int mulRes1DA6#1 = IMul(ilit1D7C,idx1D7B);
          int mulRes1DA8#1 = IMul(ilit1D7C,idx1D7E);
          int mulRes1DAB#1 = IMul(ilit1D7C,idx1D81);
          int mulRes1DAE#1 = IMul(ilit1D7C,idx1D84);
          int mulRes1DB1#1 = IMul(ilit1D7C,idx1D87);
          int mulRes1DB4#1 = IMul(ilit1D7C,idx1D8A);
          real dof1DB5#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(_t1D6C,mulRes1DA6);
          real dof1DB6#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(_t1D6C,mulRes1DA8);
          real dof1DB7#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(_t1D6C,mulRes1DAB);
          real dof1DB8#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(_t1D6C,mulRes1DAE);
          real dof1DB9#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(_t1D6C,mulRes1DB1);
          real dof1DBA#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(_t1D6C,mulRes1DB4);
          tensor[6] dofs1DBB#5 = <tensor[6]>[dof1DB5,dof1DB6,dof1DB7,dof1DB8,dof1DB9,dof1DBA];
          real varAcc1DD7#4 = VIndex<2,0>(refPos1D63);
          real varAcc1DD8#4 = VIndex<2,1>(refPos1D63);
          real coeff1DD9#6 = 0.2e1;
          real prod21DDB#1 = RMul(varAcc1DD7,varAcc1DD7);
          real one1DDC#33 = 0.1e1;
          real prod1DDD#2 = RMul(prod21DDB,one1DDC);
          real coeff1DDE#10 = 0.4e1;
          real prod1DE0#2 = RMul(varAcc1DD7,varAcc1DD8);
          real coeff1DE1#7 = -0.3e1;
          real prod1DE2#3 = RMul(varAcc1DD7,one1DDC);
          real prod21DE3#1 = RMul(varAcc1DD8,varAcc1DD8);
          real prod1DE4#2 = RMul(one1DDC,prod21DE3);
          real prod1DE5#3 = RMul(one1DDC,varAcc1DD8);
          real prod1DE6#4 = RMul(one1DDC,one1DDC);
          real mult1DE7#7 = RMul(one1DDC,prod1DE6);
          real mult1DE8#1 = RMul(coeff1DE1,prod1DE5);
          real mult1DE9#2 = RMul(coeff1DD9,prod1DE4);
          real mult1DEA#1 = RMul(coeff1DE1,prod1DE2);
          real mult1DEB#2 = RMul(coeff1DDE,prod1DE0);
          real mult1DEC#2 = RMul(coeff1DD9,prod1DDD);
          real sum1DED#1 = RAdd(mult1DEB,mult1DEC);
          real sum1DEE#1 = RAdd(mult1DEA,sum1DED);
          real sum1DEF#1 = RAdd(mult1DE9,sum1DEE);
          real sum1DF0#1 = RAdd(mult1DE8,sum1DEF);
          real sum1DF1#1 = RAdd(mult1DE7,sum1DF0);
          real coeff1DF3#16 = -0.1e1;
          real mult1DF4#1 = RMul(coeff1DF3,prod1DE2);
          real sum1DF5#1 = RAdd(mult1DF4,mult1DEC);
          real mult1DF7#1 = RMul(coeff1DF3,prod1DE5);
          real sum1DF8#1 = RAdd(mult1DF7,mult1DE9);
          real coeff1DFA#11 = -0.4e1;
          real mult1DFB#1 = RMul(coeff1DDE,prod1DE5);
          real mult1DFC#1 = RMul(coeff1DFA,prod1DE4);
          real mult1DFD#2 = RMul(coeff1DFA,prod1DE0);
          real sum1DFE#1 = RAdd(mult1DFC,mult1DFD);
          real sum1DFF#1 = RAdd(mult1DFB,sum1DFE);
          real mult1E01#1 = RMul(coeff1DDE,prod1DE2);
          real mult1E02#1 = RMul(coeff1DFA,prod1DDD);
          real sum1E03#1 = RAdd(mult1DFD,mult1E02);
          real sum1E04#1 = RAdd(mult1E01,sum1E03);
          tensor[6] intermediateCons1E06#1 = <tensor[6]>[sum1DF1,sum1DF5,sum1DF8,mult1DEB,sum1DFF,sum1E04];
          real probe_l_71E38#1 = VDot<6>(dofs1DBB,intermediateCons1E06);
          real op1_e3_l_81E3B#1 = RMul(_t1D72,s1AB3);
          real op1_e3_l_91E3E#1 = RSub(probe_l_71E38,op1_e3_l_81E3B);
          real fa1E41#9 = RSub(op1_e3_l_91E3E,_t1D74);
          real varAcc1E45#4 = VIndex<2,0>(refPos1D67);
          real varAcc1E46#4 = VIndex<2,1>(refPos1D67);
          real prod21E49#1 = RMul(varAcc1E45,varAcc1E45);
          real prod1E4B#2 = RMul(prod21E49,one1DDC);
          real prod1E4E#2 = RMul(varAcc1E45,varAcc1E46);
          real prod1E50#3 = RMul(varAcc1E45,one1DDC);
          real prod21E51#1 = RMul(varAcc1E46,varAcc1E46);
          real prod1E52#2 = RMul(one1DDC,prod21E51);
          real prod1E53#3 = RMul(one1DDC,varAcc1E46);
          real mult1E56#1 = RMul(coeff1DE1,prod1E53);
          real mult1E57#2 = RMul(coeff1DD9,prod1E52);
          real mult1E58#1 = RMul(coeff1DE1,prod1E50);
          real mult1E59#2 = RMul(coeff1DDE,prod1E4E);
          real mult1E5A#2 = RMul(coeff1DD9,prod1E4B);
          real sum1E5B#1 = RAdd(mult1E59,mult1E5A);
          real sum1E5C#1 = RAdd(mult1E58,sum1E5B);
          real sum1E5D#1 = RAdd(mult1E57,sum1E5C);
          real sum1E5E#1 = RAdd(mult1E56,sum1E5D);
          real sum1E5F#1 = RAdd(mult1DE7,sum1E5E);
          real mult1E62#1 = RMul(coeff1DF3,prod1E50);
          real sum1E63#1 = RAdd(mult1E62,mult1E5A);
          real mult1E65#1 = RMul(coeff1DF3,prod1E53);
          real sum1E66#1 = RAdd(mult1E65,mult1E57);
          real mult1E69#1 = RMul(coeff1DDE,prod1E53);
          real mult1E6A#1 = RMul(coeff1DFA,prod1E52);
          real mult1E6B#2 = RMul(coeff1DFA,prod1E4E);
          real sum1E6C#1 = RAdd(mult1E6A,mult1E6B);
          real sum1E6D#1 = RAdd(mult1E69,sum1E6C);
          real mult1E6F#1 = RMul(coeff1DDE,prod1E50);
          real mult1E70#1 = RMul(coeff1DFA,prod1E4B);
          real sum1E71#1 = RAdd(mult1E6B,mult1E70);
          real sum1E72#1 = RAdd(mult1E6F,sum1E71);
          tensor[6] intermediateCons1E74#1 = <tensor[6]>[sum1E5F,sum1E63,sum1E66,mult1E59,sum1E6D,sum1E72];
          real probe_l_71EA6#1 = VDot<6>(dofs1DBB,intermediateCons1E74);
          real op1_e3_l_81EA9#1 = RMul(_t1D72,e1AB5);
          real op1_e3_l_91EAC#1 = RSub(probe_l_71EA6,op1_e3_l_81EA9);
          real fb1EAF#6 = RSub(op1_e3_l_91EAC,_t1D74);
          string _t1EB2#1 = "Vals:";
          tensor[2] _t1EB4#1 = <tensor[2]>[fa1E41,fb1EAF];
          Print<[string,tensor[2],string]>(_t1EB2,_t1EB4,_t1AC9);
          real op1_e3_l_221EB7#1 = RSub(fa1E41,fb1EAF);
          real _t1EBA#1 = Abs<real>(op1_e3_l_221EB7);
          bool _t1EBD#1 = LT<real>(_t1EBA,intervalEps1A87);
          if _t1EBD then goto ASSIGN1EC2 else goto JOIN1ED9
        ASSIGN1EC2:  preds = [COND1EBF]
          real _t1EC0#1 = Abs<real>(fa1E41);
          bool _t1EC3#1 = GT<real>(_t1EC0,intervalEps1A87);
          if _t1EC3 then goto ASSIGN1EC8 else goto JOIN1ED7
        ASSIGN1EC8:  preds = [COND1EC5]
          real _t1EC6#1 = Abs<real>(fb1EAF);
          bool _t1EC9#1 = GT<real>(_t1EC6,intervalEps1A87);
          if _t1EC9 then goto ASSIGN1ECD else goto JOIN1ED5
        ASSIGN1ECD:  preds = [COND1ECB]
          string _t1ECC#1 = "warn\n";
          Print<[string]>(_t1ECC);
          real s1ECF#1 = RAdd(s1AB3,intervalEps1A87);
          self.s = s1ECF;
          active
          goto JOIN1ED5
        JOIN1ED5:  preds = [*ACTIVE1ED3,COND1ECB]
          real s1ED4#1 = phi(s1AB3)
          goto JOIN1ED7
        JOIN1ED7:  preds = [JOIN1ED5,COND1EC5]
          real s1ED6#1 = phi(s1ED4,s1AB3)
          goto JOIN1ED9
        JOIN1ED9:  preds = [JOIN1ED7,COND1EBF]
          real s1ED8#3 = phi(s1ED6,s1AB3)
          real op1_e3_l_381EDA#1 = RMul(s1ED8,fb1EAF);
          real op1_e3_l_391EDD#1 = RMul(e1AB5,fa1E41);
          real op1_e3_l_481EE0#1 = RSub(op1_e3_l_381EDA,op1_e3_l_391EDD);
          real op1_e3_l_491EE3#1 = RSub(fb1EAF,fa1E41);
          real cup1EE6#7 = RDiv(op1_e3_l_481EE0,op1_e3_l_491EE3);
          string _t1EE9#1 = "Mid time:";
          Print<[string,real,string]>(_t1EE9,cup1EE6,_t1AC9);
          tensor[2] op1_e3_l_531EEC#1 = VScale<2>(cup1EE6,_t1AE1);
          tensor[2] midRay1EEF#1 = VAdd<2>(_t1ADB,op1_e3_l_531EEC);
          femData:MeshPos callNewtonPos1EF2#1 = _0A92_msh_newtonInverse1AF4 (midRay1EEF,_t1AF1,_t1AEF);
          tensor[2] refPos1EF4#2 = ExtractFemItem<tensor[2],RefPos(Mesh)>(callNewtonPos1EF2);
          real varAcc1EF7#4 = VIndex<2,0>(refPos1EF4);
          real varAcc1EF8#4 = VIndex<2,1>(refPos1EF4);
          real prod21EFB#1 = RMul(varAcc1EF7,varAcc1EF7);
          real prod1EFD#2 = RMul(prod21EFB,one1DDC);
          real prod1F00#2 = RMul(varAcc1EF7,varAcc1EF8);
          real prod1F02#5 = RMul(varAcc1EF7,one1DDC);
          real prod21F03#1 = RMul(varAcc1EF8,varAcc1EF8);
          real prod1F04#2 = RMul(one1DDC,prod21F03);
          real prod1F05#5 = RMul(one1DDC,varAcc1EF8);
          real mult1F08#1 = RMul(coeff1DE1,prod1F05);
          real mult1F09#2 = RMul(coeff1DD9,prod1F04);
          real mult1F0A#1 = RMul(coeff1DE1,prod1F02);
          real mult1F0B#2 = RMul(coeff1DDE,prod1F00);
          real mult1F0C#2 = RMul(coeff1DD9,prod1EFD);
          real sum1F0D#1 = RAdd(mult1F0B,mult1F0C);
          real sum1F0E#1 = RAdd(mult1F0A,sum1F0D);
          real sum1F0F#1 = RAdd(mult1F09,sum1F0E);
          real sum1F10#1 = RAdd(mult1F08,sum1F0F);
          real sum1F11#1 = RAdd(mult1DE7,sum1F10);
          real mult1F14#1 = RMul(coeff1DF3,prod1F02);
          real sum1F15#1 = RAdd(mult1F14,mult1F0C);
          real mult1F17#1 = RMul(coeff1DF3,prod1F05);
          real sum1F18#1 = RAdd(mult1F17,mult1F09);
          real mult1F1B#4 = RMul(coeff1DDE,prod1F05);
          real mult1F1C#1 = RMul(coeff1DFA,prod1F04);
          real mult1F1D#2 = RMul(coeff1DFA,prod1F00);
          real sum1F1E#1 = RAdd(mult1F1C,mult1F1D);
          real sum1F1F#1 = RAdd(mult1F1B,sum1F1E);
          real mult1F21#4 = RMul(coeff1DDE,prod1F02);
          real mult1F22#1 = RMul(coeff1DFA,prod1EFD);
          real sum1F23#1 = RAdd(mult1F1D,mult1F22);
          real sum1F24#1 = RAdd(mult1F21,sum1F23);
          tensor[6] intermediateCons1F26#1 = <tensor[6]>[sum1F11,sum1F15,sum1F18,mult1F0B,sum1F1F,sum1F24];
          real fmVal1F58#2 = VDot<6>(dofs1DBB,intermediateCons1F26);
          real op1_e3_l_581F5B#1 = RMul(_t1D72,cup1EE6);
          real op1_e3_l_591F5E#1 = RSub(fmVal1F58,op1_e3_l_581F5B);
          real fm1F61#5 = RSub(op1_e3_l_591F5E,_t1D74);
          string _t1F64#1 = "all vals:";
          tensor[3] _t1F66#1 = <tensor[3]>[fa1E41,fm1F61,fb1EAF];
          Print<[string,tensor[3],string]>(_t1F64,_t1F66,_t1AC9);
          int intersectionItter1F6B#3 = IAdd(intersectionItter1AAF,ilit1D7C);
          real _t1F6D#24 = 0.e0;
          bool _t1F6F#2 = GT<real>(fa1E41,_t1F6D);
          if _t1F6F then goto JOIN1F74 else goto ASSIGN2381
        JOIN1F74:  preds = [COND1F71,JOIN2386]
          int _t1F72#1 = phi(ilit1D7C,_t1F73)
          bool _t1F75#2 = GT<real>(fm1F61,_t1F6D);
          if _t1F75 then goto JOIN1F7A else goto ASSIGN2379
        JOIN1F7A:  preds = [COND1F77,JOIN237E]
          int _t1F78#1 = phi(ilit1D7C,_t1F79)
          int _t1F7B#1 = IMul(_t1F72,_t1F78);
          int _t1F7D#6 = 0;
          bool _t1F7F#1 = LT<int>(_t1F7B,_t1F7D);
          if _t1F7F then goto JOIN1F85 else goto COND235E
        JOIN1F85:  preds = [COND1F81,JOIN236B]
          real e1F82#4 = phi(cup1EE6,e1AB5)
          real s1F83#4 = phi(s1ED8,s1F84)
          string _t1F86#1 = "new interval:";
          tensor[2] _t1F88#1 = <tensor[2]>[s1F83,e1F82];
          Print<[string,tensor[2],string]>(_t1F86,_t1F88,_t1AC9);
          real _t1F8B#1 = Abs<real>(fm1F61);
          bool _t1F8E#2 = LT<real>(_t1F8B,zeroEps1A85);
          if _t1F8E then goto ASSIGN1F92 else goto JOIN22D8
        ASSIGN1F92:  preds = [COND1F90]
          tensor[2] grad1F91#1 = <tensor[2]>[_t1F6D,_t1F6D];
          if _t1F8E then goto ASSIGN24D3 else goto JOIN219A
        ASSIGN24D3:  preds = [COND1F93]
          real mult1F9F#1 = RMul(coeff1DE1,prod1DE6);
          real sum1FA2#1 = RAdd(mult1F1B,mult1F21);
          real sum1FA3#2 = RAdd(mult1F9F,sum1FA2);
          real mult1FA6#4 = RMul(coeff1DF3,prod1DE6);
          real sum1FA7#1 = RAdd(mult1FA6,mult1F21);
          real basisEval1FAB#2 = RMul(coeff1DFA,prod1F05);
          real coeff1FAC#2 = -0.8e1;
          real mult1FAD#2 = RMul(coeff1DDE,prod1DE6);
          real mult1FAE#1 = RMul(coeff1FAC,prod1F02);
          real sum1FAF#1 = RAdd(basisEval1FAB,mult1FAE);
          real sum1FB0#1 = RAdd(mult1FAD,sum1FAF);
          real sum1FB3#1 = RAdd(mult1FA6,mult1F1B);
          real mult1FB5#1 = RMul(coeff1FAC,prod1F05);
          real mult1FB6#2 = RMul(coeff1DFA,prod1F02);
          real sum1FB7#1 = RAdd(mult1FB5,mult1FB6);
          real sum1FB8#1 = RAdd(mult1FAD,sum1FB7);
          tensor[6] intermediateCons1FBA#1 = <tensor[6]>[sum1FA3,sum1FA7,_t1F6D,mult1F1B,basisEval1FAB,sum1FB0];
          tensor[6] intermediateCons1FBB#1 = <tensor[6]>[sum1FA3,_t1F6D,sum1FB3,mult1F21,sum1FB8,mult1FB6];
          real vdot1FE8#2 = VDot<6>(dofs1DBB,intermediateCons1FBA);
          real vdot1FEA#2 = VDot<6>(dofs1DBB,intermediateCons1FBB);
          int mulRes1FF3#3 = IMul(_t1AF1,ilit1D82);
          int idx1FF6#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(_t1AEF,mulRes1FF3);
          int addRes1FF8#1 = IAdd(mulRes1FF3,ilit1D7C);
          int idx1FF9#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(_t1AEF,addRes1FF8);
          int addRes1FFB#1 = IAdd(mulRes1FF3,ilit1D7F);
          int idx1FFC#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(_t1AEF,addRes1FFB);
          int mulRes200F#2 = IMul(ilit1D7F,idx1FF6);
          int addRes2012#1 = IAdd(ilit1D7C,mulRes200F);
          real dof_load2013#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1AEF,mulRes200F);
          real dof_load2014#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1AEF,addRes2012);
          int mulRes2017#2 = IMul(ilit1D7F,idx1FF9);
          int addRes2019#1 = IAdd(ilit1D7C,mulRes2017);
          real dof_load201A#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1AEF,mulRes2017);
          real dof_load201B#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1AEF,addRes2019);
          int mulRes201E#2 = IMul(ilit1D7F,idx1FFC);
          int addRes2020#1 = IAdd(ilit1D7C,mulRes201E);
          real dof_load2021#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1AEF,mulRes201E);
          real dof_load2022#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1AEF,addRes2020);
          real r205A#2 = RMul(dof_load2013,mult1FA6);
          real r205D#1 = RMul(dof_load201A,mult1DE7);
          real r2060#1 = RMul(dof_load2021,_t1F6D);
          real r2061#1 = RAdd(r205A,r205D);
          real r2062#3 = RAdd(r2061,r2060);
          real r2066#1 = RMul(dof_load201A,_t1F6D);
          real r2068#1 = RMul(dof_load2021,mult1DE7);
          real r2069#1 = RAdd(r205A,r2066);
          real r206A#3 = RAdd(r2069,r2068);
          real r206D#2 = RMul(dof_load2014,mult1FA6);
          real r206F#1 = RMul(dof_load201B,mult1DE7);
          real r2071#1 = RMul(dof_load2022,_t1F6D);
          real r2072#1 = RAdd(r206D,r206F);
          real r2073#3 = RAdd(r2072,r2071);
          real r2075#1 = RMul(dof_load201B,_t1F6D);
          real r2076#1 = RMul(dof_load2022,mult1DE7);
          real r2077#1 = RAdd(r206D,r2075);
          real r2078#3 = RAdd(r2077,r2076);
          real r20A1#1 = RMul(_t1F6D,r2062);
          real r20A4#1 = RMul(coeff1DF3,r2073);
          real r20A5#2 = RAdd(r20A1,r20A4);
          real r20A7#2 = RMul(_t1F6D,r206A);
          real r20A9#1 = RMul(coeff1DF3,r2078);
          real r20AA#2 = RAdd(r20A7,r20A9);
          real r20AD#1 = RMul(one1DDC,r2062);
          real r20AE#1 = RMul(_t1F6D,r2073);
          real r20AF#2 = RAdd(r20AD,r20AE);
          real r20B0#1 = RMul(one1DDC,r206A);
          real r20B1#2 = RMul(_t1F6D,r2078);
          real r20B2#2 = RAdd(r20B0,r20B1);
          tensor[2] probe_l_1020CB#1 = <tensor[2]>[r2062,r2073];
          real r2123#1 = RMul(one1DDC,r2078);
          real r2124#1 = RAdd(r20A7,r2123);
          real r2126#1 = RMul(coeff1DF3,r206A);
          real r2128#1 = RAdd(r2126,r20B1);
          tensor[2] op1_e3_l_12211D#1 = <tensor[2]>[r2124,r2128];
          real r2139#1 = RMul(_t1F6D,r20A5);
          real r213C#1 = RMul(coeff1DF3,r20AA);
          real r213D#1 = RAdd(r2139,r213C);
          real r213F#1 = RMul(_t1F6D,r20AF);
          real r2141#1 = RMul(coeff1DF3,r20B2);
          real r2142#1 = RAdd(r213F,r2141);
          real r2145#1 = RMul(one1DDC,r20A5);
          real r2146#1 = RMul(_t1F6D,r20AA);
          real r2147#1 = RAdd(r2145,r2146);
          real r2148#1 = RMul(one1DDC,r20AF);
          real r2149#1 = RMul(_t1F6D,r20B2);
          real r214A#1 = RAdd(r2148,r2149);
          real op1_e3_l_142163#4 = VDot<2>(probe_l_1020CB,op1_e3_l_12211D);
          real r2168#1 = RDiv(r213D,op1_e3_l_142163);
          real r216A#1 = RDiv(r2142,op1_e3_l_142163);
          real r216D#1 = RDiv(r2147,op1_e3_l_142163);
          real r216F#1 = RDiv(r214A,op1_e3_l_142163);
          real r2180#1 = RMul(vdot1FE8,r2168);
          real r2183#1 = RMul(vdot1FEA,r216D);
          real r2184#1 = RAdd(r2180,r2183);
          real r2186#1 = RMul(vdot1FE8,r216A);
          real r2188#1 = RMul(vdot1FEA,r216F);
          real r2189#1 = RAdd(r2186,r2188);
          tensor[2] grad217D#1 = <tensor[2]>[r2184,r2189];
          goto JOIN219A
        JOIN219A:  preds = [ASSIGN2197,COND1F93]
          tensor[2] grad2198#3 = phi(grad217D,grad1F91)
          real out2199#3 = phi(fmVal1F58,out1ABB)
          string _t219B#1 = "Out val:";
          Print<[string,real,string]>(_t219B,out2199,_t1AC9);
          string _t219E#1 = "Grad val:";
          Print<[string,tensor[2],string]>(_t219E,grad2198,_t1AC9);
          tensor[3] mcol21A3#1 = <tensor[3]>[one1DDC,one1DDC,one1DDC];
          bool _t21A5#1 = NEQ<real>(cmin1A91,cmax1A93);
          if _t21A5 then goto ASSIGN21AC else goto JOIN2229
        ASSIGN21AC:  preds = [COND21A7]
          real op1_e3_l_521AA#1 = RSub(out2199,cmin1A91);
          real op1_e3_l_621AD#1 = RSub(cmax1A93,cmin1A91);
          real op1_e3_l_721B0#1 = RDiv(op1_e3_l_521AA,op1_e3_l_621AD);
          real op1_e3_l_821B3#1 = RSub(one1DDC,coeff1DF3);
          real op1_e3_l_921B6#1 = RMul(op1_e3_l_721B0,op1_e3_l_821B3);
          real _t21B9#1 = RAdd(coeff1DF3,op1_e3_l_921B6);
          real Mtransform21BC#1 = Transform<IMAGE1D<double[3]>>(cmap1A7B);
          real MxPos21BE#1 = RMul(Mtransform21BC,_t21B9);
          real Ttranslate21C1#1 = Translate<IMAGE1D<double[3]>>(cmap1A7B);
          real imgPos21C3#2 = RAdd(MxPos21BE,Ttranslate21C1);
          real nd21C6#2 = Floor<1>(imgPos21C3);
          real f21C8#2 = RSub(imgPos21C3,nd21C6);
          int n21CB#5 = RealToInt<1>(nd21C6);
          bool isInside21CF#1 = IndexInside<IMAGE1D<double[3]>,2>(n21CB,cmap1A7B);
          if isInside21CF then goto ASSIGN2523 else goto ASSIGN251B
        ASSIGN2523:  preds = [COND21D1]
          int offp21D6#3 = IMul(ilit1D82,n21CB);
          real v0_21D7#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap1A7B,offp21D6);
          int addRes21D9#1 = IAdd(n21CB,ilit1D7C);
          int offp21DA#3 = IMul(ilit1D82,addRes21D9);
          real v1_21DB#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap1A7B,offp21DA);
          int offp21DD#1 = IAdd(offp21D6,ilit1D7C);
          real v0_21DE#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap1A7B,offp21DD);
          int offp21DF#1 = IAdd(offp21DA,ilit1D7C);
          real v1_21E0#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap1A7B,offp21DF);
          int offp21E3#1 = IAdd(offp21D6,ilit1D7F);
          real v0_21E4#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap1A7B,offp21E3);
          int offp21E5#1 = IAdd(offp21DA,ilit1D7F);
          real v1_21E6#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap1A7B,offp21E5);
          tensor[3,2] voxels21E8#1 = <tensor[3,2]>[v0_21D7,v1_21DB,v0_21DE,v1_21E0,v0_21E4,v1_21E6];
          goto JOIN2202
        JOIN2202:  preds = [ASSIGN2537,ASSIGN2538]
          tensor[3,2] ldvox2200#3 = phi(voxels21E8,voxels2344)
          real idx2205#1 = RSub(f21C8,one1DDC);
          tensor[2] kernX_2203#1 = <tensor[2]>[f21C8,idx2205];
          tensor[2] a0220A#1 = <tensor[2]>[one1DDC,one1DDC];
          tensor[2] a1220B#1 = <tensor[2]>[coeff1DF3,one1DDC];
          tensor[2] prod12210#1 = VMul<2>(kernX_2203,a1220B);
          tensor[2] kevalX_d0_2209#3 = VAdd<2>(a0220A,prod12210);
          tensor[2] projIx221A#1 = ProjectLast<tensor[3,2],[0]>(ldvox2200);
          real vdot221B#1 = VDot<2>(projIx221A,kevalX_d0_2209);
          tensor[2] projIx221C#1 = ProjectLast<tensor[3,2],[1]>(ldvox2200);
          real vdot221D#1 = VDot<2>(projIx221C,kevalX_d0_2209);
          tensor[2] projIx221E#1 = ProjectLast<tensor[3,2],[2]>(ldvox2200);
          real vdot221F#1 = VDot<2>(projIx221E,kevalX_d0_2209);
          tensor[3] mcol2219#1 = <tensor[3]>[vdot221B,vdot221D,vdot221F];
          goto JOIN2229
        JOIN2229:  preds = [ASSIGN2227,COND21A7]
          tensor[3] mcol2228#7 = phi(mcol2219,mcol21A3)
          if light1A95 then goto ASSIGN222C else goto ASSIGN2327
        ASSIGN222C:  preds = [COND222A]
          real _t222B#1 = VIndex<2,0>(grad2198);
          real _t222D#1 = VIndex<2,1>(grad2198);
          tensor[3] _t2231#4 = <tensor[3]>[_t222B,_t222D,coeff1DF3];
          real op1_e3_l_32233#1 = VDot<3>(_t2231,_t2231);
          real op1_e3_l_42236#1 = Sqrt(op1_e3_l_32233);
          real op1_e3_l_52239#2 = RDiv(one1DDC,op1_e3_l_42236);
          real op1_e3_l_6223E#1 = VDot<3>(_t2231,L1A9F);
          real _t2241#1 = RMul(op1_e3_l_52239,op1_e3_l_6223E);
          real _t2244#1 = Max<real>(_t1F6D,_t2241);
          real op1_e3_l_102246#1 = VDot<3>(rayVec1AA3,rayVec1AA3);
          real op1_e3_l_112249#1 = Sqrt(op1_e3_l_102246);
          real op1_e3_l_12224C#1 = RDiv(one1DDC,op1_e3_l_112249);
          tensor[3] op1_e3_l_132251#1 = VScale<3>(op1_e3_l_12224C,rayVec1AA3);
          tensor[3] op1_e3_l_142254#1 = VNeg<3>(op1_e3_l_132251);
          tensor[3] op1_e3_l_202257#3 = VAdd<3>(op1_e3_l_142254,L1A9F);
          real op1_e3_l_22225A#1 = VDot<3>(op1_e3_l_202257,op1_e3_l_202257);
          real op1_e3_l_23225D#1 = Sqrt(op1_e3_l_22225A);
          real op1_e3_l_312260#1 = RDiv(one1DDC,op1_e3_l_23225D);
          real op1_e3_l_322265#1 = VDot<3>(_t2231,op1_e3_l_202257);
          real r2269#1 = RMul(op1_e3_l_52239,op1_e3_l_312260);
          real _t2268#1 = RMul(r2269,op1_e3_l_322265);
          real _t226D#1 = Max<real>(_t1F6D,_t2268);
          real _t226F#1 = MathFn<pow>(_t226D,phongSp1A9D);
          real op1_e3_l_962271#1 = RSub(cup1EE6,camNearVsp1AA5);
          real op1_e3_l_972274#1 = RSub(camFarVsp1AA7,camNearVsp1AA5);
          real op1_e3_l_982277#1 = RDiv(op1_e3_l_962271,op1_e3_l_972274);
          tensor[3] op1_e3_l_99227A#1 = VSub<3>(mcfar1A8F,mcnear1A8D);
          tensor[3] op1_e3_l_100227D#1 = VScale<3>(op1_e3_l_982277,op1_e3_l_99227A);
          tensor[3] op1_e3_l_1012280#3 = VAdd<3>(mcnear1A8D,op1_e3_l_100227D);
          tensor[3] op1_e3_l_1292283#1 = VScale<3>(phongKa1A97,mcol2228);
          real r2287#1 = TensorIndex<tensor[3],[0]>(mcol2228);
          real r2288#2 = TensorIndex<tensor[3],[0]>(op1_e3_l_1012280);
          real r2289#3 = RMul(_t2244,phongKd1A99);
          real r228A#1 = RMul(r2289,r2287);
          real r228B#1 = RMul(r228A,r2288);
          real r228C#1 = TensorIndex<tensor[3],[1]>(mcol2228);
          real r228D#2 = TensorIndex<tensor[3],[1]>(op1_e3_l_1012280);
          real r228E#1 = RMul(r2289,r228C);
          real r228F#1 = RMul(r228E,r228D);
          real r2290#1 = TensorIndex<tensor[3],[2]>(mcol2228);
          real r2291#2 = TensorIndex<tensor[3],[2]>(op1_e3_l_1012280);
          real r2292#1 = RMul(r2289,r2290);
          real r2293#1 = RMul(r2292,r2291);
          tensor[3] op1_e3_l_1302286#1 = <tensor[3]>[r228B,r228F,r2293];
          real r22A5#3 = RMul(_t226F,phongKs1A9B);
          real r22A6#1 = RMul(r22A5,r2288);
          real r22A8#1 = RMul(r22A5,r228D);
          real r22AA#1 = RMul(r22A5,r2291);
          tensor[3] op1_e3_l_13122A3#1 = <tensor[3]>[r22A6,r22A8,r22AA];
          tensor[3] v22B5#1 = VAdd<3>(op1_e3_l_1292283,op1_e3_l_1302286);
          tensor[3] fin22B4#3 = VAdd<3>(v22B5,op1_e3_l_13122A3);
          real _t22B9#1 = VIndex<3,0>(fin22B4);
          real _t22BB#1 = VIndex<3,1>(fin22B4);
          real _t22BD#1 = VIndex<3,2>(fin22B4);
          tensor[4] rgba22BF#1 = <tensor[4]>[_t22B9,_t22BB,_t22BD,one1DDC];
          goto JOIN22C3
        JOIN22C3:  preds = [ASSIGN2535,ASSIGN252D]
          tensor[4] rgba22C1#1 = phi(rgba22BF,rgba22C2)
          tensor[3] op1_e3_l_5322C4#1 = VScale<3>(cup1EE6,rayVec1AA3);
          tensor[3] _t22C7#1 = VAdd<3>(op1_e3_l_5322C4,rayOrig1AA1);
          tensor[3][1] _t22CA#1 = <tensor[3][1]>{_t22C7};
          tensor[3][] _t22CC#1 = MkDynamic<tensor[3],1>(_t22CA);
          self.intersectionItter = intersectionItter1F6B;
          self.s = s1F83;
          self.e = e1F82;
          self.out = out2199;
          self.rgba = rgba22C1;
          self.locs = _t22CC;
          stabilize
          goto JOIN22D8
        JOIN22D8:  preds = [*STABILIZE22D4,COND1F90]
          tensor[3][] locs22D5#3 = phi(locs1ABF)
          tensor[4] rgba22D6#3 = phi(rgba1ABD)
          real out22D7#3 = phi(out1ABB)
          int _t22D9#1 = 32;
          bool _t22DB#1 = GT<int>(intersectionItter1F6B,_t22D9);
          if _t22DB then goto ASSIGN2536 else goto ASSIGN2324
        ASSIGN2536:  preds = [COND22DD]
          int itter22DE#4 = IAdd(itter1AAD,ilit1D7C);
          bool _t22E0#1 = GTE<int>(itter22DE,len1AAB);
          if _t22E0 then goto ASSIGN22E4 else goto JOIN22F1
        ASSIGN22E4:  preds = [COND22E2]
          string _t22E3#1 = "No intersection found\n";
          Print<[string]>(_t22E3);
          string _t22E6#1 = "Fin pixel=============================\n";
          Print<[string]>(_t22E6);
          self.itter = itter22DE;
          self.intersectionItter = _t1F7D;
          self.s = s1F83;
          self.e = e1F82;
          self.out = out22D7;
          self.rgba = rgba22D6;
          self.locs = locs22D5;
          stabilize
          goto JOIN22F1
        JOIN22F1:  preds = [*STABILIZE22F0,COND22E2]
          int _t22F2#2 = IAdd(offset1AA9,itter22DE);
          tensor[2] interval22F4#3 = Subscript<tensor[2][]>(times1A89,_t22F2);
          int _t22F6#1 = Subscript<int[]>(cells1A8B,_t22F2);
          femData:MeshCell cc22F8#2 = Subscript<femData:MeshCell[]>(0cell_a1A81,_t22F6);
          real s22FA#1 = VIndex<2,0>(interval22F4);
          real e22FC#1 = VIndex<2,1>(interval22F4);
          int _t22FE#1 = ExtractFemItem<int,CellIndex(MeshCell)>(cc22F8);
          femData:FuncCell _t2300#1 = LoadFem<femData:FuncCell>(c1A83,_t22FE);
          string _t2302#1 = "++++++++++++++++Next interval!+++++++++++++++++++\n";
          Print<[string]>(_t2302);
          self.itter = itter22DE;
          self.intersectionItter = _t1F7D;
          self.interval = interval22F4;
          self.s = s22FA;
          self.e = e22FC;
          self.cc = cc22F8;
          self.fc = _t2300;
          self.out = out22D7;
          self.rgba = rgba22D6;
          self.locs = locs22D5;
          active
          goto JOIN2317
        JOIN2317:  preds = [*ACTIVE230F,MASSIGN2325]
          femData:FuncCell fc2310#1 = phi(fc1AB9)
          femData:MeshCell cc2311#1 = phi(cc1AB7)
          real e2312#1 = phi(e1F82)
          real s2313#1 = phi(s1F83)
          tensor[2] interval2314#1 = phi(interval1AB1)
          int intersectionItter2315#1 = phi(intersectionItter1F6B)
          int itter2316#1 = phi(itter1AAD)
          self.itter = itter2316;
          self.intersectionItter = intersectionItter2315;
          self.interval = interval2314;
          self.s = s2313;
          self.e = e2312;
          self.cc = cc2311;
          self.fc = fc2310;
          self.out = out22D7;
          self.rgba = rgba22D6;
          self.locs = locs22D5;
          active
        ASSIGN2324:  preds = [COND22DD]
          string _t2323#1 = "---------------\n";
          Print<[string]>(_t2323);
          goto JOIN2317
        ASSIGN2327:  preds = [COND222A]
          real _t2326#1 = VIndex<3,0>(mcol2228);
          real _t2328#1 = VIndex<3,1>(mcol2228);
          real _t232A#1 = VIndex<3,2>(mcol2228);
          tensor[4] rgba22C2#1 = <tensor[4]>[_t2326,_t2328,_t232A,one1DDC];
          goto JOIN22C3
        ASSIGN251B:  preds = [COND21D1]
          int ix232F#1 = ControlIndex<IMAGE1D<double[3]>,clamp,0>(cmap1A7B,n21CB);
          int offp2331#3 = IMul(ilit1D82,ix232F);
          real v0_2332#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap1A7B,offp2331);
          int addRes2334#1 = IAdd(n21CB,ilit1D7C);
          int ix2335#1 = ControlIndex<IMAGE1D<double[3]>,clamp,0>(cmap1A7B,addRes2334);
          int offp2336#3 = IMul(ilit1D82,ix2335);
          real v1_2337#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap1A7B,offp2336);
          int offp2339#1 = IAdd(offp2331,ilit1D7C);
          real v0_233A#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap1A7B,offp2339);
          int offp233B#1 = IAdd(offp2336,ilit1D7C);
          real v1_233C#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap1A7B,offp233B);
          int offp233F#1 = IAdd(offp2331,ilit1D7F);
          real v0_2340#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap1A7B,offp233F);
          int offp2341#1 = IAdd(offp2336,ilit1D7F);
          real v1_2342#1 = LoadVoxel<IMAGE1D<double[3]>>(cmap1A7B,offp2341);
          tensor[3,2] voxels2344#1 = <tensor[3,2]>[v0_2332,v1_2337,v0_233A,v1_233C,v0_2340,v1_2342];
          goto JOIN2202
        COND235E:  preds = [COND1F81]
          if _t1F6F then goto JOIN2361 else goto ASSIGN2373
        JOIN2361:  preds = [COND235E,JOIN2377]
          int _t235F#1 = phi(ilit1D7C,_t2360)
          if _t1F75 then goto JOIN2365 else goto ASSIGN236D
        JOIN2365:  preds = [COND2362,JOIN2371]
          int _t2363#1 = phi(ilit1D7C,_t2364)
          int _t2366#1 = IMul(_t235F,_t2363);
          bool _t2368#1 = GT<int>(_t2366,_t1F7D);
          if _t2368 then goto JOIN236B else goto JOIN236B
        JOIN236B:  preds = [COND236A,COND236A]
          real s1F84#1 = phi(cup1EE6,s1ED8)
          goto JOIN1F85
        ASSIGN236D:  preds = [COND2362]
          bool _t236C#1 = LT<real>(fm1F61,_t1F6D);
          if _t236C then goto ASSIGN2370 else goto JOIN2371
        ASSIGN2370:  preds = [COND236E]
          int _t236F#1 = -1;
          goto JOIN2371
        JOIN2371:  preds = [ASSIGN2370,COND236E]
          int _t2364#1 = phi(_t236F,_t1F7D)
          goto JOIN2365
        ASSIGN2373:  preds = [COND235E]
          bool _t2372#1 = LT<real>(fa1E41,_t1F6D);
          if _t2372 then goto ASSIGN2376 else goto JOIN2377
        ASSIGN2376:  preds = [COND2374]
          int _t2375#1 = -1;
          goto JOIN2377
        JOIN2377:  preds = [ASSIGN2376,COND2374]
          int _t2360#1 = phi(_t2375,_t1F7D)
          goto JOIN2361
        ASSIGN2379:  preds = [COND1F77]
          bool _t2378#1 = LT<real>(fm1F61,_t1F6D);
          if _t2378 then goto ASSIGN237C else goto ASSIGN237F
        ASSIGN237C:  preds = [COND237A]
          int _t237B#1 = -1;
          goto JOIN237E
        JOIN237E:  preds = [ASSIGN237C,ASSIGN237F]
          int _t1F79#1 = phi(_t237B,_t237D)
          goto JOIN1F7A
        ASSIGN237F:  preds = [COND237A]
          int _t237D#1 = 0;
          goto JOIN237E
        ASSIGN2381:  preds = [COND1F71]
          bool _t2380#1 = LT<real>(fa1E41,_t1F6D);
          if _t2380 then goto ASSIGN2384 else goto ASSIGN2387
        ASSIGN2384:  preds = [COND2382]
          int _t2383#1 = -1;
          goto JOIN2386
        JOIN2386:  preds = [ASSIGN2384,ASSIGN2387]
          int _t1F73#1 = phi(_t2383,_t2385)
          goto JOIN1F74
        ASSIGN2387:  preds = [COND2382]
          int _t2385#1 = 0;
          goto JOIN2386
    end update
  end ray
## initial strand creation
  GRID(2)
    ENTRY2388:  preds = []
      int iresU2389#1 = globals.iresU1774;
      int iresV238B#1 = globals.iresV1775;
      int _t238D#2 = 0;
      int _t238F#2 = 1;
      int _t2391#1 = ISub(iresU2389,_t238F);
      int[] _t2393#1 = Range(_t238D,_t2391);
    FOREACH2396:  preds = [ASSIGN2394,NEXT239F]
      foreach (vi2395 in _t2393) on exit goto RETURN23A0
      int _t2397#1 = ISub(iresV238B,_t238F);
      int[] _t2399#1 = Range(_t238D,_t2397);
    FOREACH239C:  preds = [ASSIGN239A,NEXT239E]
      foreach (ui239B in _t2399) on exit goto NEXT239F
      new ray(ui239B,vi2395);
      goto FOREACH239C
    NEXT239F:  preds = [FOREACH239C]
      goto FOREACH2396
    RETURN23A0:  preds = [FOREACH2396]
      return
#### end program ####
##### TreeIR: after low-to-tree translation ####
//***** PROPERTIES *****
  GlobalInit StrandArray HasStartMethod ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[]) HasInputs HasGlobals
//***** CONSTS *****
//***** INPUTS *****
input real isoval;
input real thick;
input tensor[3] camEye;
input tensor[3] camAt;
input tensor[3] camUp;
input real camFOV;
input int iresU;
input int iresV;
input real camNear;
input real camFar;
input real refStep;
input real rayStep;
input femData(Mesh) a;
input femData(Space) 0b046F_intermedateGlobal;
input femData(FemFunc) 0c0471_intermedateGlobal;
input real zeroEps;
input real intervalEps;
input int[] indecies;
input tensor[2][] times;
input int[] cells;
input tensor[3] mcnear;
input tensor[3] mcfar;
input image(IMAGE1D<double[3]>) cmap;
input real cmin;
input real cmax;
input bool light;
input real phongKa;
input real phongKd;
input real phongKs;
input real phongSp;
input real maxAlpha;
input tensor[3] lightVsp;
input bool debug;
input int debugU;
input int debugV;
//***** CONST INIT *****
  {
    globals.isoval = 0.2e0;
    globals.thick = 0.7e-1;
    globals.camEye = PACK(VEC3{4}(0.3e1,-0.3e1,0.3e1));
    globals.camAt = PACK(VEC3{4}(0.5e0,0.5e0,0.5e0));
    globals.camUp = PACK(VEC3{4}(0.e0,0.e0,0.1e1));
    globals.camFOV = 0.137e2;
    globals.iresU = 10;
    globals.iresV = 10;
    globals.camNear = -0.2e1;
    globals.camFar = 0.5e1;
    globals.refStep = 0.1e1;
    globals.rayStep = 0.1e-1;
    globals.zeroEps = 0.1e-10;
    globals.intervalEps = 0.1e-10;
    vec3{4} v_3 = VEC3{4}(0.1e1,0.1e1,0.1e1);
    globals.mcnear = PACK(v_3);
    globals.mcfar = PACK(v_3);
    globals.cmin = 0.e0;
    globals.cmax = 0.1e1;
    globals.light = false;
    globals.phongKa = 0.5e0;
    globals.phongKd = 0.5e0;
    globals.phongKs = 0.e0;
    globals.phongSp = 0.6e2;
    globals.maxAlpha = 0.1e1;
    globals.lightVsp = PACK(VEC3{4}(0.e0,0.369e1,0.153e1));
    globals.debug = false;
    globals.debugU = 8;
    globals.debugV = 2;
  }
//***** GLOBALS *****
global femData(MeshCell)[] 0cell_a;
global femData(FemFunc) c;
global real camNearVsp;
global real camFarVsp;
global tensor[3] camN;
global tensor[3] camU;
global tensor[3] camV;
global real camVmax;
global real camUmax;
global tensor[3] L;
//***** FUNCTIONS *****
  function femData(MeshPos) _0A92_msh_newtonInverse (&tensor[2] p_pos_7,int p_cellInt_8,femData(Mesh) p_mesh_9) {
    vec2 v_10;
    v_10 = VEC2(0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0,0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0);
    for i_itter_11 = 0 to 16 {
      int l_mulRes_12 = IMul(p_cellInt_8,3);
      int t_13 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(p_mesh_9,l_mulRes_12);
      int l_mulRes_14 = IMul(2,t_13);
      real l_dof_load_15 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(p_mesh_9,l_mulRes_14);
      real l_dof_load_16 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(p_mesh_9,IAdd(1,l_mulRes_14));
      int t_17 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(p_mesh_9,IAdd(l_mulRes_12,1));
      int l_mulRes_18 = IMul(2,t_17);
      real l_dof_load_19 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(p_mesh_9,l_mulRes_18);
      real l_dof_load_20 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(p_mesh_9,IAdd(1,l_mulRes_18));
      int t_21 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(p_mesh_9,IAdd(l_mulRes_12,2));
      int l_mulRes_22 = IMul(2,t_21);
      real l_dof_load_23 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(p_mesh_9,l_mulRes_22);
      real l_dof_load_24 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(p_mesh_9,IAdd(1,l_mulRes_22));
      real l_prod_25 = RMul(0.1e1,0.1e1);
      real l_basisEval_26 = RMul(-0.1e1,l_prod_25);
      real l_basisEval_27 = RMul(0.1e1,l_prod_25);
      real l_r_28 = RMul(l_dof_load_15,l_basisEval_26);
      real l_r_29 = RAdd(RAdd(l_r_28,RMul(l_dof_load_19,l_basisEval_27)),RMul(l_dof_load_23,0.e0));
      real l_r_30 = RAdd(RAdd(l_r_28,RMul(l_dof_load_19,0.e0)),RMul(l_dof_load_23,l_basisEval_27));
      real l_r_31 = RMul(l_dof_load_16,l_basisEval_26);
      real l_r_32 = RAdd(RAdd(l_r_31,RMul(l_dof_load_20,l_basisEval_27)),RMul(l_dof_load_24,0.e0));
      real l_r_33 = RAdd(RAdd(l_r_31,RMul(l_dof_load_20,0.e0)),RMul(l_dof_load_24,l_basisEval_27));
      real l_r_34 = RAdd(RMul(0.e0,l_r_29),RMul(-0.1e1,l_r_32));
      real l_r_35 = RMul(0.e0,l_r_30);
      real l_r_36 = RAdd(l_r_35,RMul(-0.1e1,l_r_33));
      real l_r_37 = RAdd(RMul(0.1e1,l_r_29),RMul(0.e0,l_r_32));
      real l_r_38 = RMul(0.e0,l_r_33);
      real l_r_39 = RAdd(RMul(0.1e1,l_r_30),l_r_38);
      real l_op1_e3_l_16_40 = VDot<2,2>(VEC2(l_r_29,l_r_32),VEC2(RAdd(l_r_35,RMul(0.1e1,l_r_33)),RAdd(RMul(-0.1e1,l_r_30),l_r_38)));
      real l_prod_41 = RMul(VIndex<2,2,0>(v_10),0.1e1);
      real l_prod_42 = RMul(0.1e1,VIndex<2,2,1>(v_10));
      real l_sum_43 = RAdd(l_basisEval_27,RAdd(RMul(-0.1e1,l_prod_42),RMul(-0.1e1,l_prod_41)));
      real l_basisEval_44 = RMul(0.1e1,l_prod_41);
      real l_basisEval_45 = RMul(0.1e1,l_prod_42);
      vec2 v_46 = VSub<2,2>(VEC2(RAdd(RAdd(RMul(l_dof_load_15,l_sum_43),RMul(l_dof_load_19,l_basisEval_44)),RMul(l_dof_load_23,l_basisEval_45)),RAdd(RAdd(RMul(l_dof_load_16,l_sum_43),RMul(l_dof_load_20,l_basisEval_44)),RMul(l_dof_load_24,l_basisEval_45))),LOAD_0(p_pos_7));
      vec2 v_47 = VEC2(VDot<2,2>(VEC2(RDiv(RAdd(RMul(0.e0,l_r_34),RMul(-0.1e1,l_r_36)),l_op1_e3_l_16_40),RDiv(RAdd(RMul(0.e0,l_r_37),RMul(-0.1e1,l_r_39)),l_op1_e3_l_16_40)),v_46),VDot<2,2>(VEC2(RDiv(RAdd(RMul(0.1e1,l_r_34),RMul(0.e0,l_r_36)),l_op1_e3_l_16_40),RDiv(RAdd(RMul(0.1e1,l_r_37),RMul(0.e0,l_r_39)),l_op1_e3_l_16_40)),v_46));
      vec2 v_48 = VSub<2,2>(v_10,v_47);
      vec2 v_49 = v_48;
      if (GTE<real>(RMul(0.1e-7,0.1e-7),VDot<2,2>(v_47,v_47))) {
        vec2 v_50 = VAdd<2,2>(VEC2(0.1e-8,0.1e-8),v_49);
        if (BAnd(GT<real>(RAdd(0.1e1,0.1e-8),VDot<2,2>(VEC2(0.1e1,0.1e1),v_49)),BAnd(GT<real>(VIndex<2,2,0>(v_50),-0.e0),GT<real>(VIndex<2,2,1>(v_50),-0.e0)))) {
          tensor[2] _arg_51 = PACK(v_49);
          return ExtractFemItemN<[femData(Mesh),int,tensor[2],tensor[2]],femData(MeshPos),AllBuild(MeshPos),"","",[],int>(p_mesh_9,p_cellInt_8,_arg_51,p_pos_7)
        } else {
          return ExtractFemItemN<[femData(Mesh)],femData(MeshPos),InvalidBuild(MeshPos),"","",[],int>(p_mesh_9)
        }
      }
      v_10 = v_49;
    }
    return ExtractFemItemN<[femData(Mesh)],femData(MeshPos),InvalidBuild(MeshPos),"","",[],int>(p_mesh_9)
  }
//***** GLOBAL VARIABLE INIT *****
  {
    femData(MeshCell)[] l__t_52;
    l__t_52 = <femData(MeshCell)[]>{};
    for i__t_53 = 0 to ISub(ExtractFemItem<int,NumCell(Mesh)>(globals.a),1) {
      l__t_52 = Append<femData(MeshCell),femData(MeshCell)>(l__t_52,LoadFem<femData(MeshCell)>(globals.a,i__t_53));
    }
    globals.0cell_a = l__t_52;
    globals.c = LoadFem<femData(FemFunc)>(globals.0c0471_intermedateGlobal,LoadFem<femData(Space)>(globals.0b046F_intermedateGlobal,globals.a));
    vec3{4} v_54 = VSub<3,4>(LOAD_0(TensorRef<[3]>(globals.camAt)),LOAD_0(TensorRef<[3]>(globals.camEye)));
    real l_op1_e3_l_6_55 = Sqrt(VDot<3,4>(v_54,v_54));
    globals.camNearVsp = RAdd(globals.camNear,l_op1_e3_l_6_55);
    globals.camFarVsp = RAdd(globals.camFar,l_op1_e3_l_6_55);
    real l_op1_e3_l_9_56 = RDiv(0.1e1,l_op1_e3_l_6_55);
    vec3{4} v_57 = VScale<3,4>(l_op1_e3_l_9_56,v_54);
    globals.camN = PACK(v_57);
    real l_r_59 = TensorIndex<&tensor[3],[0]>(TensorRef<[3]>(globals.camUp));
    real l_r_60 = RMul(0.e0,l_r_59);
    real l_r_61 = TensorIndex<&tensor[3],[1]>(TensorRef<[3]>(globals.camUp));
    real l_r_62 = RMul(0.e0,l_r_61);
    real l_r_63 = TensorIndex<&tensor[3],[2]>(TensorRef<[3]>(globals.camUp));
    real l_r_64 = RMul(0.e0,l_r_63);
    real l_r_65 = RAdd(l_r_60,l_r_62);
    real l_r_66 = RAdd(l_r_65,l_r_64);
    vec3{4} v_67 = VEC3{4}(VDot<3,4>(v_54,VEC3{4}(l_r_66,RAdd(l_r_65,RMul(0.1e1,l_r_63)),RAdd(RAdd(l_r_60,RMul(-0.1e1,l_r_61)),l_r_64))),VDot<3,4>(v_54,VEC3{4}(RAdd(l_r_65,RMul(-0.1e1,l_r_63)),l_r_66,RAdd(RAdd(RMul(0.1e1,l_r_59),l_r_62),l_r_64))),VDot<3,4>(v_54,VEC3{4}(RAdd(RAdd(l_r_60,RMul(0.1e1,l_r_61)),l_r_64),RAdd(RAdd(RMul(-0.1e1,l_r_59),l_r_62),l_r_64),l_r_66)));
    real l_op1_e3_l_38_68 = RDiv(0.1e1,Sqrt(RMul(RMul(l_op1_e3_l_9_56,l_op1_e3_l_9_56),VDot<3,4>(v_67,v_67))));
    vec3{4} v_69 = VScale<3,4>(l_op1_e3_l_38_68,VScale<3,4>(l_op1_e3_l_9_56,v_67));
    globals.camU = PACK(v_69);
    real l_r_71 = VIndex<3,4,0>(v_54);
    real l_r_72 = RMul(0.e0,l_r_71);
    real l_r_73 = VIndex<3,4,1>(v_54);
    real l_r_74 = RMul(0.e0,l_r_73);
    real l_r_75 = VIndex<3,4,2>(v_54);
    real l_r_76 = RMul(0.e0,l_r_75);
    real l_r_77 = RAdd(l_r_72,l_r_74);
    real l_r_78 = RAdd(l_r_77,l_r_76);
    vec3{4} v_79 = VScale<3,4>(l_op1_e3_l_9_56,VEC3{4}(VDot<3,4>(v_67,VEC3{4}(l_r_78,RAdd(l_r_77,RMul(0.1e1,l_r_75)),RAdd(RAdd(l_r_72,RMul(-0.1e1,l_r_73)),l_r_76))),VDot<3,4>(v_67,VEC3{4}(RAdd(l_r_77,RMul(-0.1e1,l_r_75)),l_r_78,RAdd(RAdd(RMul(0.1e1,l_r_71),l_r_74),l_r_76))),VDot<3,4>(v_67,VEC3{4}(RAdd(RAdd(l_r_72,RMul(0.1e1,l_r_73)),l_r_76),RAdd(RAdd(RMul(-0.1e1,l_r_71),l_r_74),l_r_76),l_r_78))));
    real l_r_80 = RMul(l_op1_e3_l_38_68,l_op1_e3_l_9_56);
    real l_r_81 = RMul(l_r_80,VIndex<3,4,0>(v_79));
    real l_r_82 = RMul(l_r_80,VIndex<3,4,1>(v_79));
    real l_r_83 = RMul(l_r_80,VIndex<3,4,2>(v_79));
    globals.camV = PACK(VEC3{4}(l_r_81,l_r_82,l_r_83));
    real l_op1_e3_l_10_85 = Tan(RDiv(RMul(globals.camFOV,0.314159265358979323846264338327950288e1),0.36e3));
    globals.camVmax = RMul(l_op1_e3_l_10_85,l_op1_e3_l_6_55);
    globals.camUmax = RDiv(RMul(RMul(IntToReal(globals.iresU),l_op1_e3_l_10_85),l_op1_e3_l_6_55),IntToReal(globals.iresV));
    real l_r_86 = TensorIndex<&tensor[3],[0]>(TensorRef<[3]>(globals.lightVsp));
    real l_r_87 = TensorIndex<&tensor[3],[1]>(TensorRef<[3]>(globals.lightVsp));
    real l_r_88 = TensorIndex<&tensor[3],[2]>(TensorRef<[3]>(globals.lightVsp));
    globals.L = PACK(VScale<3,4>(RDiv(0.1e1,Sqrt(VDot<3,4>(LOAD_0(TensorRef<[3]>(globals.lightVsp)),LOAD_0(TensorRef<[3]>(globals.lightVsp))))),VEC3{4}(RAdd(RAdd(RMul(VIndex<3,4,0>(v_69),l_r_86),RMul(l_r_81,l_r_87)),RMul(VIndex<3,4,0>(v_57),l_r_88)),RAdd(RAdd(RMul(VIndex<3,4,1>(v_69),l_r_86),RMul(l_r_82,l_r_87)),RMul(VIndex<3,4,1>(v_57),l_r_88)),RAdd(RAdd(RMul(VIndex<3,4,2>(v_69),l_r_86),RMul(l_r_83,l_r_87)),RMul(VIndex<3,4,2>(v_57),l_r_88)))));
  }
//***** STRAND *****
strand ray (int p_ui_90,int p_vi_91) {
  real rayU;
  real rayV;
  tensor[3] UV;
  tensor[3] rayOrig;
  tensor[3] rayVec;
  real camNearVsp;
  real camFarVsp;
  int offset;
  int len;
  varying int itter;
  varying int intersectionItter;
  int idx;
  varying tensor[2] interval;
  varying real s;
  varying real e;
  varying femData(MeshCell) cc;
  varying femData(FuncCell) fc;
  varying output real out;
  varying output tensor[4] rgba;
  varying output tensor[3][] locs;
  int ui;
  int vi;
  initialize (globals) {
    real l_op1_e3_l_9_92 = RNeg(globals.camUmax);
    real l_rayU_93 = RAdd(l_op1_e3_l_9_92,RMul(RDiv(RSub(IntToReal(p_ui_90),-0.5e0),RSub(RSub(IntToReal(globals.iresU),0.5e0),-0.5e0)),RSub(globals.camUmax,l_op1_e3_l_9_92)));
    real l_op1_e3_l_9_94 = RNeg(globals.camVmax);
    real l_rayV_95 = RAdd(l_op1_e3_l_9_94,RMul(RDiv(RSub(IntToReal(p_vi_91),-0.5e0),RSub(RSub(IntToReal(globals.iresV),0.5e0),-0.5e0)),RSub(globals.camVmax,l_op1_e3_l_9_94)));
    vec3{4} v_96 = VScale<3,4>(l_rayU_93,LOAD_0(TensorRef<[3]>(globals.camU)));
    vec3{4} v_97 = VScale<3,4>(l_rayV_95,LOAD_0(TensorRef<[3]>(globals.camV)));
    int l__t_98 = IMul(p_ui_90,globals.iresV);
    int l_offset_99 = Subscript<int[]>(globals.indecies,IAdd(l__t_98,p_vi_91));
    &tensor[2] l_interval_100 = Subscript<tensor[2][]>(globals.times,l_offset_99);
    femData(MeshCell) l_cc_101 = Subscript<femData(MeshCell)[]>(globals.0cell_a,0);
    tensor[3][0] t_103 = <tensor[3][0]>{};
    tensor[3][] l__t_102 = MkDynamic<tensor[3],0>(t_103);
    self.rayU = l_rayU_93;
    self.rayV = l_rayV_95;
    self.UV = PACK(VAdd<3,4>(v_96,v_97));
    self.rayOrig = PACK(VAdd<3,4>(VAdd<3,4>(LOAD_0(TensorRef<[3]>(globals.camEye)),v_96),v_97));
    self.rayVec = PACK(VAdd<3,4>(LOAD_0(TensorRef<[3]>(globals.camN)),VEC3{4}(0.e0,0.e0,0.e0)));
    self.camNearVsp = globals.camNearVsp;
    self.camFarVsp = globals.camFarVsp;
    self.offset = l_offset_99;
    self.len = Subscript<int[]>(globals.indecies,IAdd(IAdd(IMul(globals.iresU,globals.iresV),l__t_98),p_vi_91));
    self.itter = 0;
    self.intersectionItter = 0;
    self.idx = l_offset_99;
    self.interval = TensorCopy<[2]>(l_interval_100);
    self.s = VIndex<2,2,0>(LOAD_0(l_interval_100));
    self.e = VIndex<2,2,1>(LOAD_0(l_interval_100));
    self.cc = l_cc_101;
    self.fc = LoadFem<femData(FuncCell)>(globals.c,ExtractFemItem<int,CellIndex(MeshCell)>(l_cc_101));
    self.out = 0.e0;
    self.rgba = PACK(VEC4(0.e0,0.e0,0.e0,0.e0));
    self.locs = l__t_102;
    self.ui = p_ui_90;
    self.vi = p_vi_91;
  }
  start (world, globals) {
    if (globals.debug) {
      if (NEQ<int>(self.ui,globals.debugU)) {
        if (NEQ<int>(self.vi,globals.debugV)) {
          stabilize;
        }
      }
    }
    if (EQ<int>(self.len,0)) {
      print("(find:)No intersection found:",self.ui,"/",self.vi,"\n");
      stabilize;
    }
    femData(MeshCell) l_cc_108 = Subscript<femData(MeshCell)[]>(globals.0cell_a,Subscript<int[]>(globals.cells,self.idx));
    self.cc = l_cc_108;
    self.fc = LoadFem<femData(FuncCell)>(globals.c,ExtractFemItem<int,CellIndex(MeshCell)>(l_cc_108));
    active;
  }
  update (world, globals) {
    int l_itter_288;
    int l_intersectionItter_287;
    vec2 v_286;
    real l_s_285;
    real l_e_284;
    femData(MeshCell) l_cc_283;
    femData(FuncCell) l_fc_282;
    real l_out_275;
    vec4 v_274;
    tensor[3][] l_locs_273;
    real l_s_201;
    real l_cup_200;
    int l_ilit_198;
    int l_ilit_195;
    real l_s_172;
    print("Ui/Vi::",self.ui,"/",self.vi,"\n");
    tensor[2] _arg_109 = PACK(VEC2(self.s,self.e));
    print("Interval:",TensorRef<[2]>(_arg_109),"\n");
    print("inner itter:",self.intersectionItter,"\n");
    print("Outer itter:",self.itter,"\n");
    vec2 v_110 = VEC2(VIndex<3,4,0>(LOAD_0(TensorRef<[3]>(self.rayOrig))),VIndex<3,4,1>(LOAD_0(TensorRef<[3]>(self.rayOrig))));
    vec2 v_111 = VEC2(VIndex<3,4,0>(LOAD_0(TensorRef<[3]>(self.rayVec))),VIndex<3,4,1>(LOAD_0(TensorRef<[3]>(self.rayVec))));
    femData(Mesh) l__t_112 = ExtractFem<femData(Mesh),femData(MeshCell)>(self.cc);
    int l__t_113 = ExtractFemItem<int,CellIndex(MeshCell)>(self.cc);
    tensor[2] _arg_114 = PACK(VAdd<2,2>(v_110,VScale<2,2>(self.s,v_111)));
    femData(MeshPos) l_callNewtonPos_115 = _0A92_msh_newtonInverse$2571(_arg_114,l__t_113,l__t_112);
    &tensor[2] l_refPos_116 = ExtractFemItem<tensor[2],RefPos(Mesh)>(l_callNewtonPos_115);
    tensor[2] _arg_117 = PACK(VAdd<2,2>(v_110,VScale<2,2>(self.e,v_111)));
    femData(MeshPos) l_callNewtonPos_118 = _0A92_msh_newtonInverse$2571(_arg_117,l__t_113,l__t_112);
    &tensor[2] l_refPos_119 = ExtractFemItem<tensor[2],RefPos(Mesh)>(l_callNewtonPos_118);
    print("inverses:",l_refPos_116,l_refPos_119,"\n");
    femData(FemFunc) l__t_120 = ExtractFem<femData(FemFunc),femData(FuncCell)>(self.fc);
    femData(Space) l__t_121 = ExtractFem<femData(Space),femData(FemFunc)>(l__t_120);
    real l__t_122 = VIndex<3,4,2>(LOAD_0(TensorRef<[3]>(self.rayVec)));
    real l__t_123 = VIndex<3,4,2>(LOAD_0(TensorRef<[3]>(self.rayOrig)));
    int l_mulRes_124 = IMul(ExtractFemItem<int,CellIndex(FuncCell)>(self.fc),6);
    int t_125 = ExtractFemItem2<int,int,ExtractIndex(Space)>(l__t_121,l_mulRes_124);
    int t_126 = ExtractFemItem2<int,int,ExtractIndex(Space)>(l__t_121,IAdd(l_mulRes_124,1));
    int t_127 = ExtractFemItem2<int,int,ExtractIndex(Space)>(l__t_121,IAdd(l_mulRes_124,2));
    int t_128 = ExtractFemItem2<int,int,ExtractIndex(Space)>(l__t_121,IAdd(l_mulRes_124,3));
    int t_129 = ExtractFemItem2<int,int,ExtractIndex(Space)>(l__t_121,IAdd(l_mulRes_124,4));
    int t_130 = ExtractFemItem2<int,int,ExtractIndex(Space)>(l__t_121,IAdd(l_mulRes_124,5));
    real t_131 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(l__t_120,IMul(1,t_130));
    real t_132 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(l__t_120,IMul(1,t_129));
    real t_133 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(l__t_120,IMul(1,t_128));
    real t_134 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(l__t_120,IMul(1,t_127));
    real t_135 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(l__t_120,IMul(1,t_126));
    real t_136 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(l__t_120,IMul(1,t_125));
    vec4 v_137 = VEC4(t_136,t_135,t_134,t_133);
    vec2 v_138 = VEC2(t_132,t_131);
    real l_varAcc_139 = VIndex<2,2,0>(LOAD_0(l_refPos_116));
    real l_varAcc_140 = VIndex<2,2,1>(LOAD_0(l_refPos_116));
    real l_prod_141 = RMul(RMul(l_varAcc_139,l_varAcc_139),0.1e1);
    real l_prod_142 = RMul(l_varAcc_139,l_varAcc_140);
    real l_prod_143 = RMul(l_varAcc_139,0.1e1);
    real l_prod_144 = RMul(0.1e1,RMul(l_varAcc_140,l_varAcc_140));
    real l_prod_145 = RMul(0.1e1,l_varAcc_140);
    real l_prod_146 = RMul(0.1e1,0.1e1);
    real l_mult_147 = RMul(0.1e1,l_prod_146);
    real l_mult_148 = RMul(0.2e1,l_prod_144);
    real l_mult_149 = RMul(0.4e1,l_prod_142);
    real l_mult_150 = RMul(0.2e1,l_prod_141);
    real l_mult_151 = RMul(-0.4e1,l_prod_142);
    real l_fa_152 = RSub(RSub(RAdd(VDot<2,2>(v_138,VEC2(RAdd(RMul(0.4e1,l_prod_145),RAdd(RMul(-0.4e1,l_prod_144),l_mult_151)),RAdd(RMul(0.4e1,l_prod_143),RAdd(l_mult_151,RMul(-0.4e1,l_prod_141))))),VDot<4,4>(v_137,VEC4(RAdd(l_mult_147,RAdd(RMul(-0.3e1,l_prod_145),RAdd(l_mult_148,RAdd(RMul(-0.3e1,l_prod_143),RAdd(l_mult_149,l_mult_150))))),RAdd(RMul(-0.1e1,l_prod_143),l_mult_150),RAdd(RMul(-0.1e1,l_prod_145),l_mult_148),l_mult_149))),RMul(l__t_122,self.s)),l__t_123);
    real l_varAcc_153 = VIndex<2,2,0>(LOAD_0(l_refPos_119));
    real l_varAcc_154 = VIndex<2,2,1>(LOAD_0(l_refPos_119));
    real l_prod_155 = RMul(RMul(l_varAcc_153,l_varAcc_153),0.1e1);
    real l_prod_156 = RMul(l_varAcc_153,l_varAcc_154);
    real l_prod_157 = RMul(l_varAcc_153,0.1e1);
    real l_prod_158 = RMul(0.1e1,RMul(l_varAcc_154,l_varAcc_154));
    real l_prod_159 = RMul(0.1e1,l_varAcc_154);
    real l_mult_160 = RMul(0.2e1,l_prod_158);
    real l_mult_161 = RMul(0.4e1,l_prod_156);
    real l_mult_162 = RMul(0.2e1,l_prod_155);
    real l_mult_163 = RMul(-0.4e1,l_prod_156);
    real l_fb_164 = RSub(RSub(RAdd(VDot<2,2>(v_138,VEC2(RAdd(RMul(0.4e1,l_prod_159),RAdd(RMul(-0.4e1,l_prod_158),l_mult_163)),RAdd(RMul(0.4e1,l_prod_157),RAdd(l_mult_163,RMul(-0.4e1,l_prod_155))))),VDot<4,4>(v_137,VEC4(RAdd(l_mult_147,RAdd(RMul(-0.3e1,l_prod_159),RAdd(l_mult_160,RAdd(RMul(-0.3e1,l_prod_157),RAdd(l_mult_161,l_mult_162))))),RAdd(RMul(-0.1e1,l_prod_157),l_mult_162),RAdd(RMul(-0.1e1,l_prod_159),l_mult_160),l_mult_161))),RMul(l__t_122,self.e)),l__t_123);
    tensor[2] _arg_165 = PACK(VEC2(l_fa_152,l_fb_164));
    print("Vals:",TensorRef<[2]>(_arg_165),"\n");
    vec4 v_166 = v_137;
    vec2 v_167 = v_138;
    vec2 v_168 = v_110;
    vec2 v_169 = v_111;
    if (LT<real>(Abs<real>(RSub(l_fa_152,l_fb_164)),globals.intervalEps)) {
      real l_s_171;
      if (GT<real>(Abs<real>(l_fa_152),globals.intervalEps)) {
        real l_s_170;
        if (GT<real>(Abs<real>(l_fb_164),globals.intervalEps)) {
          print("warn\n");
          self.s = RAdd(self.s,globals.intervalEps);
          active;
        } else {
          l_s_170 = self.s;
        }
        l_s_171 = l_s_170;
      } else {
        l_s_171 = self.s;
      }
      l_s_172 = l_s_171;
    } else {
      l_s_172 = self.s;
    }
    real l_cup_173 = RDiv(RSub(RMul(l_s_172,l_fb_164),RMul(self.e,l_fa_152)),RSub(l_fb_164,l_fa_152));
    print("Mid time:",l_cup_173,"\n");
    tensor[2] _arg_174 = PACK(VAdd<2,2>(v_168,VScale<2,2>(l_cup_173,v_169)));
    femData(MeshPos) l_callNewtonPos_175 = _0A92_msh_newtonInverse$2571(_arg_174,l__t_113,l__t_112);
    &tensor[2] l_refPos_176 = ExtractFemItem<tensor[2],RefPos(Mesh)>(l_callNewtonPos_175);
    real l_varAcc_177 = VIndex<2,2,0>(LOAD_0(l_refPos_176));
    real l_varAcc_178 = VIndex<2,2,1>(LOAD_0(l_refPos_176));
    real l_prod_179 = RMul(RMul(l_varAcc_177,l_varAcc_177),0.1e1);
    real l_prod_180 = RMul(l_varAcc_177,l_varAcc_178);
    real l_prod_181 = RMul(l_varAcc_177,0.1e1);
    real l_prod_182 = RMul(0.1e1,RMul(l_varAcc_178,l_varAcc_178));
    real l_prod_183 = RMul(0.1e1,l_varAcc_178);
    real l_mult_184 = RMul(0.2e1,l_prod_182);
    real l_mult_185 = RMul(0.4e1,l_prod_180);
    real l_mult_186 = RMul(0.2e1,l_prod_179);
    real l_mult_187 = RMul(0.4e1,l_prod_183);
    real l_mult_188 = RMul(-0.4e1,l_prod_180);
    real l_mult_189 = RMul(0.4e1,l_prod_181);
    real l_fmVal_190 = RAdd(VDot<2,2>(v_167,VEC2(RAdd(l_mult_187,RAdd(RMul(-0.4e1,l_prod_182),l_mult_188)),RAdd(l_mult_189,RAdd(l_mult_188,RMul(-0.4e1,l_prod_179))))),VDot<4,4>(v_166,VEC4(RAdd(l_mult_147,RAdd(RMul(-0.3e1,l_prod_183),RAdd(l_mult_184,RAdd(RMul(-0.3e1,l_prod_181),RAdd(l_mult_185,l_mult_186))))),RAdd(RMul(-0.1e1,l_prod_181),l_mult_186),RAdd(RMul(-0.1e1,l_prod_183),l_mult_184),l_mult_185)));
    real l_fm_191 = RSub(RSub(l_fmVal_190,RMul(l__t_122,l_cup_173)),l__t_123);
    tensor[3] _arg_192 = PACK(VEC3{4}(l_fa_152,l_fm_191,l_fb_164));
    print("all vals:",TensorRef<[3]>(_arg_192),"\n");
    int l_intersectionItter_193 = IAdd(self.intersectionItter,1);
    bool l__t_194 = GT<real>(l_fa_152,0.e0);
    if (l__t_194) {
      l_ilit_195 = 1;
    } else {
      int l__t_196;
      if (LT<real>(l_fa_152,0.e0)) {
        l__t_196 = -1;
      } else {
        l__t_196 = 0;
      }
      l_ilit_195 = l__t_196;
    }
    bool l__t_197 = GT<real>(l_fm_191,0.e0);
    if (l__t_197) {
      l_ilit_198 = 1;
    } else {
      int l__t_199;
      if (LT<real>(l_fm_191,0.e0)) {
        l__t_199 = -1;
      } else {
        l__t_199 = 0;
      }
      l_ilit_198 = l__t_199;
    }
    if (LT<int>(IMul(l_ilit_195,l_ilit_198),0)) {
      l_cup_200 = l_cup_173;
      l_s_201 = l_s_172;
    } else {
      real l_cup_206;
      int l_ilit_204;
      int l_ilit_202;
      if (l__t_194) {
        l_ilit_202 = 1;
      } else {
        int l__t_203;
        if (LT<real>(l_fa_152,0.e0)) {
          l__t_203 = -1;
        } else {
          l__t_203 = 0;
        }
        l_ilit_202 = l__t_203;
      }
      if (l__t_197) {
        l_ilit_204 = 1;
      } else {
        int l__t_205;
        if (LT<real>(l_fm_191,0.e0)) {
          l__t_205 = -1;
        } else {
          l__t_205 = 0;
        }
        l_ilit_204 = l__t_205;
      }
      if (GT<int>(IMul(l_ilit_202,l_ilit_204),0)) {
        l_cup_206 = l_cup_173;
      } else {
        l_cup_206 = l_s_172;
      }
      l_cup_200 = self.e;
      l_s_201 = l_cup_206;
    }
    tensor[2] _arg_207 = PACK(VEC2(l_s_201,l_cup_200));
    print("new interval:",TensorRef<[2]>(_arg_207),"\n");
    bool l__t_208 = LT<real>(Abs<real>(l_fm_191),globals.zeroEps);
    if (l__t_208) {
      vec4 v_268;
      vec3{4} v_257;
      real l_fmVal_244;
      vec2 v_243;
      vec2 v_209 = VEC2(0.e0,0.e0);
      if (l__t_208) {
        real l_sum_210 = RAdd(RMul(-0.3e1,l_prod_146),RAdd(l_mult_187,l_mult_189));
        real l_mult_211 = RMul(-0.1e1,l_prod_146);
        real l_basisEval_212 = RMul(-0.4e1,l_prod_183);
        real l_mult_213 = RMul(0.4e1,l_prod_146);
        real l_mult_214 = RMul(-0.4e1,l_prod_181);
        real l_vdot_215 = RAdd(VDot<2,2>(v_167,VEC2(l_basisEval_212,RAdd(l_mult_213,RAdd(l_basisEval_212,RMul(-0.8e1,l_prod_181))))),VDot<4,4>(v_166,VEC4(l_sum_210,RAdd(l_mult_211,l_mult_189),0.e0,l_mult_187)));
        real l_vdot_216 = RAdd(VDot<2,2>(v_167,VEC2(RAdd(l_mult_213,RAdd(RMul(-0.8e1,l_prod_183),l_mult_214)),l_mult_214)),VDot<4,4>(v_166,VEC4(l_sum_210,0.e0,RAdd(l_mult_211,l_mult_187),l_mult_189)));
        int l_mulRes_217 = IMul(l__t_113,3);
        int t_218 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(l__t_112,l_mulRes_217);
        int l_mulRes_219 = IMul(2,t_218);
        int t_220 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(l__t_112,IAdd(l_mulRes_217,1));
        int l_mulRes_221 = IMul(2,t_220);
        real l_dof_load_222 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(l__t_112,l_mulRes_221);
        real l_dof_load_223 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(l__t_112,IAdd(1,l_mulRes_221));
        int t_224 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(l__t_112,IAdd(l_mulRes_217,2));
        int l_mulRes_225 = IMul(2,t_224);
        real l_dof_load_226 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(l__t_112,l_mulRes_225);
        real l_dof_load_227 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(l__t_112,IAdd(1,l_mulRes_225));
        real t_228 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(l__t_112,l_mulRes_219);
        real l_r_229 = RMul(t_228,l_mult_211);
        real l_r_230 = RAdd(RAdd(l_r_229,RMul(l_dof_load_222,l_mult_147)),RMul(l_dof_load_226,0.e0));
        real l_r_231 = RAdd(RAdd(l_r_229,RMul(l_dof_load_222,0.e0)),RMul(l_dof_load_226,l_mult_147));
        real t_232 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(l__t_112,IAdd(1,l_mulRes_219));
        real l_r_233 = RMul(t_232,l_mult_211);
        real l_r_234 = RAdd(RAdd(l_r_233,RMul(l_dof_load_223,l_mult_147)),RMul(l_dof_load_227,0.e0));
        real l_r_235 = RAdd(RAdd(l_r_233,RMul(l_dof_load_223,0.e0)),RMul(l_dof_load_227,l_mult_147));
        real l_r_236 = RAdd(RMul(0.e0,l_r_230),RMul(-0.1e1,l_r_234));
        real l_r_237 = RMul(0.e0,l_r_231);
        real l_r_238 = RAdd(l_r_237,RMul(-0.1e1,l_r_235));
        real l_r_239 = RAdd(RMul(0.1e1,l_r_230),RMul(0.e0,l_r_234));
        real l_r_240 = RMul(0.e0,l_r_235);
        real l_r_241 = RAdd(RMul(0.1e1,l_r_231),l_r_240);
        real l_op1_e3_l_14_242 = VDot<2,2>(VEC2(l_r_230,l_r_234),VEC2(RAdd(l_r_237,RMul(0.1e1,l_r_235)),RAdd(RMul(-0.1e1,l_r_231),l_r_240)));
        v_243 = VEC2(RAdd(RMul(l_vdot_215,RDiv(RAdd(RMul(0.e0,l_r_236),RMul(-0.1e1,l_r_238)),l_op1_e3_l_14_242)),RMul(l_vdot_216,RDiv(RAdd(RMul(0.1e1,l_r_236),RMul(0.e0,l_r_238)),l_op1_e3_l_14_242))),RAdd(RMul(l_vdot_215,RDiv(RAdd(RMul(0.e0,l_r_239),RMul(-0.1e1,l_r_241)),l_op1_e3_l_14_242)),RMul(l_vdot_216,RDiv(RAdd(RMul(0.1e1,l_r_239),RMul(0.e0,l_r_241)),l_op1_e3_l_14_242))));
        l_fmVal_244 = l_fmVal_190;
      } else {
        v_243 = v_209;
        l_fmVal_244 = self.out;
      }
      print("Out val:",l_fmVal_244,"\n");
      tensor[2] _arg_245 = PACK(v_243);
      print("Grad val:",TensorRef<[2]>(_arg_245),"\n");
      vec3{4} v_246 = VEC3{4}(0.1e1,0.1e1,0.1e1);
      if (NEQ<real>(globals.cmin,globals.cmax)) {
        tensor[3,2] l_voxels_253;
        real l_imgPos_247 = RAdd(RMul(Transform<IMAGE1D<double[3]>>(globals.cmap),RAdd(-0.1e1,RMul(RDiv(RSub(l_fmVal_244,globals.cmin),RSub(globals.cmax,globals.cmin)),RSub(0.1e1,-0.1e1)))),Translate<IMAGE1D<double[3]>>(globals.cmap));
        real l_nd_248 = RFloor(l_imgPos_247);
        real l_f_249 = RSub(l_imgPos_247,l_nd_248);
        int l_n_250 = RealToInt(l_nd_248);
        if (IndexInside<IMAGE1D<double[3]>,2>(l_n_250,globals.cmap)) {
          int l_offp_251 = IMul(3,l_n_250);
          int l_offp_252 = IMul(3,IAdd(l_n_250,1));
          l_voxels_253 = <tensor[3,2]>[LoadVoxel<IMAGE1D<double[3]>>(globals.cmap,l_offp_251),LoadVoxel<IMAGE1D<double[3]>>(globals.cmap,l_offp_252),LoadVoxel<IMAGE1D<double[3]>>(globals.cmap,IAdd(l_offp_251,1)),LoadVoxel<IMAGE1D<double[3]>>(globals.cmap,IAdd(l_offp_252,1)),LoadVoxel<IMAGE1D<double[3]>>(globals.cmap,IAdd(l_offp_251,2)),LoadVoxel<IMAGE1D<double[3]>>(globals.cmap,IAdd(l_offp_252,2))];
        } else {
          int l_offp_254 = IMul(3,ControlIndex<IMAGE1D<double[3]>,clamp,0>(globals.cmap,l_n_250));
          int l_offp_255 = IMul(3,ControlIndex<IMAGE1D<double[3]>,clamp,0>(globals.cmap,IAdd(l_n_250,1)));
          l_voxels_253 = <tensor[3,2]>[LoadVoxel<IMAGE1D<double[3]>>(globals.cmap,l_offp_254),LoadVoxel<IMAGE1D<double[3]>>(globals.cmap,l_offp_255),LoadVoxel<IMAGE1D<double[3]>>(globals.cmap,IAdd(l_offp_254,1)),LoadVoxel<IMAGE1D<double[3]>>(globals.cmap,IAdd(l_offp_255,1)),LoadVoxel<IMAGE1D<double[3]>>(globals.cmap,IAdd(l_offp_254,2)),LoadVoxel<IMAGE1D<double[3]>>(globals.cmap,IAdd(l_offp_255,2))];
        }
        vec2 v_256 = VAdd<2,2>(VEC2(0.1e1,0.1e1),VMul<2,2>(VEC2(l_f_249,RSub(l_f_249,0.1e1)),VEC2(-0.1e1,0.1e1)));
        v_257 = VEC3{4}(VDot<2,2>(LOAD_0(ProjectLast<tensor[3,2],[0]>(l_voxels_253)),v_256),VDot<2,2>(LOAD_0(ProjectLast<tensor[3,2],[1]>(l_voxels_253)),v_256),VDot<2,2>(LOAD_0(ProjectLast<tensor[3,2],[2]>(l_voxels_253)),v_256));
      } else {
        v_257 = v_246;
      }
      if (globals.light) {
        vec3{4} v_258 = VEC3{4}(VIndex<2,2,0>(v_243),VIndex<2,2,1>(v_243),-0.1e1);
        real l_op1_e3_l_5_259 = RDiv(0.1e1,Sqrt(VDot<3,4>(v_258,v_258)));
        vec3{4} v_260 = VAdd<3,4>(VNeg<3,4>(VScale<3,4>(RDiv(0.1e1,Sqrt(VDot<3,4>(LOAD_0(TensorRef<[3]>(self.rayVec)),LOAD_0(TensorRef<[3]>(self.rayVec))))),LOAD_0(TensorRef<[3]>(self.rayVec)))),LOAD_0(TensorRef<[3]>(globals.L)));
        vec3{4} v_261 = VAdd<3,4>(LOAD_0(TensorRef<[3]>(globals.mcnear)),VScale<3,4>(RDiv(RSub(l_cup_173,self.camNearVsp),RSub(self.camFarVsp,self.camNearVsp)),VSub<3,4>(LOAD_0(TensorRef<[3]>(globals.mcfar)),LOAD_0(TensorRef<[3]>(globals.mcnear)))));
        real l_r_262 = VIndex<3,4,0>(v_261);
        real l_r_263 = RMul(Max<real>(0.e0,RMul(l_op1_e3_l_5_259,VDot<3,4>(v_258,LOAD_0(TensorRef<[3]>(globals.L))))),globals.phongKd);
        real l_r_264 = VIndex<3,4,1>(v_261);
        real l_r_265 = VIndex<3,4,2>(v_261);
        real l_r_266 = RMul(MathFn<pow>(Max<real>(0.e0,RMul(RMul(l_op1_e3_l_5_259,RDiv(0.1e1,Sqrt(VDot<3,4>(v_260,v_260)))),VDot<3,4>(v_258,v_260))),globals.phongSp),globals.phongKs);
        vec3{4} v_267 = VAdd<3,4>(VAdd<3,4>(VScale<3,4>(globals.phongKa,v_257),VEC3{4}(RMul(RMul(l_r_263,VIndex<3,4,0>(v_257)),l_r_262),RMul(RMul(l_r_263,VIndex<3,4,1>(v_257)),l_r_264),RMul(RMul(l_r_263,VIndex<3,4,2>(v_257)),l_r_265))),VEC3{4}(RMul(l_r_266,l_r_262),RMul(l_r_266,l_r_264),RMul(l_r_266,l_r_265)));
        v_268 = VEC4(VIndex<3,4,0>(v_267),VIndex<3,4,1>(v_267),VIndex<3,4,2>(v_267),0.1e1);
      } else {
        v_268 = VEC4(VIndex<3,4,0>(v_257),VIndex<3,4,1>(v_257),VIndex<3,4,2>(v_257),0.1e1);
      }
      tensor[3] _arg_269 = PACK(VAdd<3,4>(VScale<3,4>(l_cup_173,LOAD_0(TensorRef<[3]>(self.rayVec))),LOAD_0(TensorRef<[3]>(self.rayOrig))));
      tensor[3][1] t_271 = <tensor[3][1]>{_arg_269};
      tensor[3][] l__t_270 = MkDynamic<tensor[3],1>(t_271);
      self.intersectionItter = l_intersectionItter_193;
      self.s = l_s_201;
      self.e = l_cup_200;
      self.out = l_fmVal_244;
      self.rgba = PACK(v_268);
      self.locs = l__t_270;
      stabilize;
    } else {
      l_locs_273 = self.locs;
      v_274 = LOAD_0(TensorRef<[4]>(self.rgba));
      l_out_275 = self.out;
    }
    if (GT<int>(l_intersectionItter_193,32)) {
      int l_itter_276 = IAdd(self.itter,1);
      if (GTE<int>(l_itter_276,self.len)) {
        print("No intersection found\n");
        print("Fin pixel=============================\n");
        self.itter = l_itter_276;
        self.intersectionItter = 0;
        self.s = l_s_201;
        self.e = l_cup_200;
        self.out = l_out_275;
        self.rgba = PACK(v_274);
        self.locs = l_locs_273;
        stabilize;
      }
      int l__t_278 = IAdd(self.offset,l_itter_276);
      &tensor[2] l_interval_279 = Subscript<tensor[2][]>(globals.times,l__t_278);
      femData(MeshCell) l_cc_280 = Subscript<femData(MeshCell)[]>(globals.0cell_a,Subscript<int[]>(globals.cells,l__t_278));
      print("++++++++++++++++Next interval!+++++++++++++++++++\n");
      self.itter = l_itter_276;
      self.intersectionItter = 0;
      self.interval = TensorCopy<[2]>(l_interval_279);
      self.s = VIndex<2,2,0>(LOAD_0(l_interval_279));
      self.e = VIndex<2,2,1>(LOAD_0(l_interval_279));
      self.cc = l_cc_280;
      self.fc = LoadFem<femData(FuncCell)>(globals.c,ExtractFemItem<int,CellIndex(MeshCell)>(l_cc_280));
      self.out = l_out_275;
      self.rgba = PACK(v_274);
      self.locs = l_locs_273;
      active;
    } else {
      print("---------------\n");
      l_fc_282 = self.fc;
      l_cc_283 = self.cc;
      l_e_284 = l_cup_200;
      l_s_285 = l_s_201;
      v_286 = LOAD_0(TensorRef<[2]>(self.interval));
      l_intersectionItter_287 = l_intersectionItter_193;
      l_itter_288 = self.itter;
    }
    self.itter = l_itter_288;
    self.intersectionItter = l_intersectionItter_287;
    self.interval = PACK(v_286);
    self.s = l_s_285;
    self.e = l_e_284;
    self.cc = l_cc_283;
    self.fc = l_fc_282;
    self.out = l_out_275;
    self.rgba = PACK(v_274);
    self.locs = l_locs_273;
    active;
  }
}
//***** CREATE GRID(2) *****
  {
    for i_vi_291 = 0 to ISub(globals.iresU,1) {
      for i_ui_292 = 0 to ISub(globals.iresV,1) {
        new ray(i_ui_292,i_vi_291);
      }
    }
  }
#### end program ####
##### TreeIR: after contraction ####
//***** PROPERTIES *****
  GlobalInit StrandArray HasStartMethod ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[]) HasInputs HasGlobals
//***** CONSTS *****
//***** INPUTS *****
input real isoval;
input real thick;
input tensor[3] camEye;
input tensor[3] camAt;
input tensor[3] camUp;
input real camFOV;
input int iresU;
input int iresV;
input real camNear;
input real camFar;
input real refStep;
input real rayStep;
input femData(Mesh) a;
input femData(Space) 0b046F_intermedateGlobal;
input femData(FemFunc) 0c0471_intermedateGlobal;
input real zeroEps;
input real intervalEps;
input int[] indecies;
input tensor[2][] times;
input int[] cells;
input tensor[3] mcnear;
input tensor[3] mcfar;
input image(IMAGE1D<double[3]>) cmap;
input real cmin;
input real cmax;
input bool light;
input real phongKa;
input real phongKd;
input real phongKs;
input real phongSp;
input real maxAlpha;
input tensor[3] lightVsp;
input bool debug;
input int debugU;
input int debugV;
//***** CONST INIT *****
  {
    globals.isoval = 0.2e0;
    globals.thick = 0.7e-1;
    globals.camEye = <tensor[3]>[0.3e1,-0.3e1,0.3e1];
    globals.camAt = <tensor[3]>[0.5e0,0.5e0,0.5e0];
    globals.camUp = <tensor[3]>[0.e0,0.e0,0.1e1];
    globals.camFOV = 0.137e2;
    globals.iresU = 10;
    globals.iresV = 10;
    globals.camNear = -0.2e1;
    globals.camFar = 0.5e1;
    globals.refStep = 0.1e1;
    globals.rayStep = 0.1e-1;
    globals.zeroEps = 0.1e-10;
    globals.intervalEps = 0.1e-10;
    vec3{4} v_3 = VEC3{4}(0.1e1,0.1e1,0.1e1);
    globals.mcnear = PACK(v_3);
    globals.mcfar = PACK(v_3);
    globals.cmin = 0.e0;
    globals.cmax = 0.1e1;
    globals.light = false;
    globals.phongKa = 0.5e0;
    globals.phongKd = 0.5e0;
    globals.phongKs = 0.e0;
    globals.phongSp = 0.6e2;
    globals.maxAlpha = 0.1e1;
    globals.lightVsp = <tensor[3]>[0.e0,0.369e1,0.153e1];
    globals.debug = false;
    globals.debugU = 8;
    globals.debugV = 2;
  }
//***** GLOBALS *****
global femData(MeshCell)[] 0cell_a;
global femData(FemFunc) c;
global real camNearVsp;
global real camFarVsp;
global tensor[3] camN;
global tensor[3] camU;
global tensor[3] camV;
global real camVmax;
global real camUmax;
global tensor[3] L;
//***** FUNCTIONS *****
  function femData(MeshPos) _0A92_msh_newtonInverse (&tensor[2] p_pos_7,int p_cellInt_8,femData(Mesh) p_mesh_9) {
    vec2 v_10;
    v_10 = VEC2(0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0,0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0);
    for i_itter_11 = 0 to 16 {
      int l_mulRes_12 = IMul(p_cellInt_8,3);
      int t_13 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(p_mesh_9,l_mulRes_12);
      int l_mulRes_14 = IMul(2,t_13);
      real l_dof_load_15 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(p_mesh_9,l_mulRes_14);
      real l_dof_load_16 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(p_mesh_9,IAdd(1,l_mulRes_14));
      int t_17 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(p_mesh_9,IAdd(l_mulRes_12,1));
      int l_mulRes_18 = IMul(2,t_17);
      real l_dof_load_19 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(p_mesh_9,l_mulRes_18);
      real l_dof_load_20 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(p_mesh_9,IAdd(1,l_mulRes_18));
      int t_21 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(p_mesh_9,IAdd(l_mulRes_12,2));
      int l_mulRes_22 = IMul(2,t_21);
      real l_dof_load_23 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(p_mesh_9,l_mulRes_22);
      real l_dof_load_24 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(p_mesh_9,IAdd(1,l_mulRes_22));
      real l_prod_25 = RMul(0.1e1,0.1e1);
      real l_basisEval_26 = RMul(-0.1e1,l_prod_25);
      real l_basisEval_27 = RMul(0.1e1,l_prod_25);
      real l_r_28 = RMul(l_dof_load_15,l_basisEval_26);
      real l_r_29 = RAdd(RAdd(l_r_28,RMul(l_dof_load_19,l_basisEval_27)),RMul(l_dof_load_23,0.e0));
      real l_r_30 = RAdd(RAdd(l_r_28,RMul(l_dof_load_19,0.e0)),RMul(l_dof_load_23,l_basisEval_27));
      real l_r_31 = RMul(l_dof_load_16,l_basisEval_26);
      real l_r_32 = RAdd(RAdd(l_r_31,RMul(l_dof_load_20,l_basisEval_27)),RMul(l_dof_load_24,0.e0));
      real l_r_33 = RAdd(RAdd(l_r_31,RMul(l_dof_load_20,0.e0)),RMul(l_dof_load_24,l_basisEval_27));
      real l_r_34 = RAdd(RMul(0.e0,l_r_29),RMul(-0.1e1,l_r_32));
      real l_r_35 = RMul(0.e0,l_r_30);
      real l_r_36 = RAdd(l_r_35,RMul(-0.1e1,l_r_33));
      real l_r_37 = RAdd(RMul(0.1e1,l_r_29),RMul(0.e0,l_r_32));
      real l_r_38 = RMul(0.e0,l_r_33);
      real l_r_39 = RAdd(RMul(0.1e1,l_r_30),l_r_38);
      real l_op1_e3_l_16_40 = VDot<2,2>(VEC2(l_r_29,l_r_32),VEC2(RAdd(l_r_35,RMul(0.1e1,l_r_33)),RAdd(RMul(-0.1e1,l_r_30),l_r_38)));
      real l_prod_41 = RMul(VIndex<2,2,0>(v_10),0.1e1);
      real l_prod_42 = RMul(0.1e1,VIndex<2,2,1>(v_10));
      real l_sum_43 = RAdd(l_basisEval_27,RAdd(RMul(-0.1e1,l_prod_42),RMul(-0.1e1,l_prod_41)));
      real l_basisEval_44 = RMul(0.1e1,l_prod_41);
      real l_basisEval_45 = RMul(0.1e1,l_prod_42);
      vec2 v_46 = VSub<2,2>(VEC2(RAdd(RAdd(RMul(l_dof_load_15,l_sum_43),RMul(l_dof_load_19,l_basisEval_44)),RMul(l_dof_load_23,l_basisEval_45)),RAdd(RAdd(RMul(l_dof_load_16,l_sum_43),RMul(l_dof_load_20,l_basisEval_44)),RMul(l_dof_load_24,l_basisEval_45))),LOAD_0(p_pos_7));
      vec2 v_47 = VEC2(VDot<2,2>(VEC2(RDiv(RAdd(RMul(0.e0,l_r_34),RMul(-0.1e1,l_r_36)),l_op1_e3_l_16_40),RDiv(RAdd(RMul(0.e0,l_r_37),RMul(-0.1e1,l_r_39)),l_op1_e3_l_16_40)),v_46),VDot<2,2>(VEC2(RDiv(RAdd(RMul(0.1e1,l_r_34),RMul(0.e0,l_r_36)),l_op1_e3_l_16_40),RDiv(RAdd(RMul(0.1e1,l_r_37),RMul(0.e0,l_r_39)),l_op1_e3_l_16_40)),v_46));
      vec2 v_48 = VSub<2,2>(v_10,v_47);
      vec2 v_49 = v_48;
      if (GTE<real>(RMul(0.1e-7,0.1e-7),VDot<2,2>(v_47,v_47))) {
        vec2 v_50 = VAdd<2,2>(VEC2(0.1e-8,0.1e-8),v_49);
        if (BAnd(GT<real>(RAdd(0.1e1,0.1e-8),VDot<2,2>(VEC2(0.1e1,0.1e1),v_49)),BAnd(GT<real>(VIndex<2,2,0>(v_50),-0.e0),GT<real>(VIndex<2,2,1>(v_50),-0.e0)))) {
          tensor[2] _arg_51 = PACK(v_49);
          return ExtractFemItemN<[femData(Mesh),int,tensor[2],tensor[2]],femData(MeshPos),AllBuild(MeshPos),"","",[],int>(p_mesh_9,p_cellInt_8,_arg_51,p_pos_7)
        } else {
          return ExtractFemItemN<[femData(Mesh)],femData(MeshPos),InvalidBuild(MeshPos),"","",[],int>(p_mesh_9)
        }
      }
      v_10 = v_49;
    }
    return ExtractFemItemN<[femData(Mesh)],femData(MeshPos),InvalidBuild(MeshPos),"","",[],int>(p_mesh_9)
  }
//***** GLOBAL VARIABLE INIT *****
  {
    femData(MeshCell)[] l__t_52;
    l__t_52 = <femData(MeshCell)[]>{};
    for i__t_53 = 0 to ISub(ExtractFemItem<int,NumCell(Mesh)>(globals.a),1) {
      l__t_52 = Append<femData(MeshCell),femData(MeshCell)>(l__t_52,LoadFem<femData(MeshCell)>(globals.a,i__t_53));
    }
    globals.0cell_a = l__t_52;
    globals.c = LoadFem<femData(FemFunc)>(globals.0c0471_intermedateGlobal,LoadFem<femData(Space)>(globals.0b046F_intermedateGlobal,globals.a));
    vec3{4} v_54 = VSub<3,4>(LOAD_0(TensorRef<[3]>(globals.camAt)),LOAD_0(TensorRef<[3]>(globals.camEye)));
    real l_op1_e3_l_6_55 = Sqrt(VDot<3,4>(v_54,v_54));
    globals.camNearVsp = RAdd(globals.camNear,l_op1_e3_l_6_55);
    globals.camFarVsp = RAdd(globals.camFar,l_op1_e3_l_6_55);
    real l_op1_e3_l_9_56 = RDiv(0.1e1,l_op1_e3_l_6_55);
    vec3{4} v_57 = VScale<3,4>(l_op1_e3_l_9_56,v_54);
    globals.camN = PACK(v_57);
    real l_r_59 = TensorIndex<&tensor[3],[0]>(TensorRef<[3]>(globals.camUp));
    real l_r_60 = RMul(0.e0,l_r_59);
    real l_r_61 = TensorIndex<&tensor[3],[1]>(TensorRef<[3]>(globals.camUp));
    real l_r_62 = RMul(0.e0,l_r_61);
    real l_r_63 = TensorIndex<&tensor[3],[2]>(TensorRef<[3]>(globals.camUp));
    real l_r_64 = RMul(0.e0,l_r_63);
    real l_r_65 = RAdd(l_r_60,l_r_62);
    real l_r_66 = RAdd(l_r_65,l_r_64);
    vec3{4} v_67 = VEC3{4}(VDot<3,4>(v_54,VEC3{4}(l_r_66,RAdd(l_r_65,RMul(0.1e1,l_r_63)),RAdd(RAdd(l_r_60,RMul(-0.1e1,l_r_61)),l_r_64))),VDot<3,4>(v_54,VEC3{4}(RAdd(l_r_65,RMul(-0.1e1,l_r_63)),l_r_66,RAdd(RAdd(RMul(0.1e1,l_r_59),l_r_62),l_r_64))),VDot<3,4>(v_54,VEC3{4}(RAdd(RAdd(l_r_60,RMul(0.1e1,l_r_61)),l_r_64),RAdd(RAdd(RMul(-0.1e1,l_r_59),l_r_62),l_r_64),l_r_66)));
    real l_op1_e3_l_38_68 = RDiv(0.1e1,Sqrt(RMul(RMul(l_op1_e3_l_9_56,l_op1_e3_l_9_56),VDot<3,4>(v_67,v_67))));
    vec3{4} v_69 = VScale<3,4>(l_op1_e3_l_38_68,VScale<3,4>(l_op1_e3_l_9_56,v_67));
    globals.camU = PACK(v_69);
    real l_r_71 = VIndex<3,4,0>(v_54);
    real l_r_72 = RMul(0.e0,l_r_71);
    real l_r_73 = VIndex<3,4,1>(v_54);
    real l_r_74 = RMul(0.e0,l_r_73);
    real l_r_75 = VIndex<3,4,2>(v_54);
    real l_r_76 = RMul(0.e0,l_r_75);
    real l_r_77 = RAdd(l_r_72,l_r_74);
    real l_r_78 = RAdd(l_r_77,l_r_76);
    vec3{4} v_79 = VScale<3,4>(l_op1_e3_l_9_56,VEC3{4}(VDot<3,4>(v_67,VEC3{4}(l_r_78,RAdd(l_r_77,RMul(0.1e1,l_r_75)),RAdd(RAdd(l_r_72,RMul(-0.1e1,l_r_73)),l_r_76))),VDot<3,4>(v_67,VEC3{4}(RAdd(l_r_77,RMul(-0.1e1,l_r_75)),l_r_78,RAdd(RAdd(RMul(0.1e1,l_r_71),l_r_74),l_r_76))),VDot<3,4>(v_67,VEC3{4}(RAdd(RAdd(l_r_72,RMul(0.1e1,l_r_73)),l_r_76),RAdd(RAdd(RMul(-0.1e1,l_r_71),l_r_74),l_r_76),l_r_78))));
    real l_r_80 = RMul(l_op1_e3_l_38_68,l_op1_e3_l_9_56);
    real l_r_81 = RMul(l_r_80,VIndex<3,4,0>(v_79));
    real l_r_82 = RMul(l_r_80,VIndex<3,4,1>(v_79));
    real l_r_83 = RMul(l_r_80,VIndex<3,4,2>(v_79));
    globals.camV = <tensor[3]>[l_r_81,l_r_82,l_r_83];
    real l_op1_e3_l_10_85 = Tan(RDiv(RMul(globals.camFOV,0.314159265358979323846264338327950288e1),0.36e3));
    globals.camVmax = RMul(l_op1_e3_l_10_85,l_op1_e3_l_6_55);
    globals.camUmax = RDiv(RMul(RMul(IntToReal(globals.iresU),l_op1_e3_l_10_85),l_op1_e3_l_6_55),IntToReal(globals.iresV));
    real l_r_86 = TensorIndex<&tensor[3],[0]>(TensorRef<[3]>(globals.lightVsp));
    real l_r_87 = TensorIndex<&tensor[3],[1]>(TensorRef<[3]>(globals.lightVsp));
    real l_r_88 = TensorIndex<&tensor[3],[2]>(TensorRef<[3]>(globals.lightVsp));
    globals.L = PACK(VScale<3,4>(RDiv(0.1e1,Sqrt(VDot<3,4>(LOAD_0(TensorRef<[3]>(globals.lightVsp)),LOAD_0(TensorRef<[3]>(globals.lightVsp))))),VEC3{4}(RAdd(RAdd(RMul(VIndex<3,4,0>(v_69),l_r_86),RMul(l_r_81,l_r_87)),RMul(VIndex<3,4,0>(v_57),l_r_88)),RAdd(RAdd(RMul(VIndex<3,4,1>(v_69),l_r_86),RMul(l_r_82,l_r_87)),RMul(VIndex<3,4,1>(v_57),l_r_88)),RAdd(RAdd(RMul(VIndex<3,4,2>(v_69),l_r_86),RMul(l_r_83,l_r_87)),RMul(VIndex<3,4,2>(v_57),l_r_88)))));
  }
//***** STRAND *****
strand ray (int p_ui_90,int p_vi_91) {
  real rayU;
  real rayV;
  tensor[3] UV;
  tensor[3] rayOrig;
  tensor[3] rayVec;
  real camNearVsp;
  real camFarVsp;
  int offset;
  int len;
  varying int itter;
  varying int intersectionItter;
  int idx;
  varying tensor[2] interval;
  varying real s;
  varying real e;
  varying femData(MeshCell) cc;
  varying femData(FuncCell) fc;
  varying output real out;
  varying output tensor[4] rgba;
  varying output tensor[3][] locs;
  int ui;
  int vi;
  initialize (globals) {
    real l_op1_e3_l_9_92 = RNeg(globals.camUmax);
    real l_rayU_93 = RAdd(l_op1_e3_l_9_92,RMul(RDiv(RSub(IntToReal(p_ui_90),-0.5e0),RSub(RSub(IntToReal(globals.iresU),0.5e0),-0.5e0)),RSub(globals.camUmax,l_op1_e3_l_9_92)));
    real l_op1_e3_l_9_94 = RNeg(globals.camVmax);
    real l_rayV_95 = RAdd(l_op1_e3_l_9_94,RMul(RDiv(RSub(IntToReal(p_vi_91),-0.5e0),RSub(RSub(IntToReal(globals.iresV),0.5e0),-0.5e0)),RSub(globals.camVmax,l_op1_e3_l_9_94)));
    vec3{4} v_96 = VScale<3,4>(l_rayU_93,LOAD_0(TensorRef<[3]>(globals.camU)));
    vec3{4} v_97 = VScale<3,4>(l_rayV_95,LOAD_0(TensorRef<[3]>(globals.camV)));
    int l__t_98 = IMul(p_ui_90,globals.iresV);
    int l_offset_99 = Subscript<int[]>(globals.indecies,IAdd(l__t_98,p_vi_91));
    &tensor[2] l_interval_100 = Subscript<tensor[2][]>(globals.times,l_offset_99);
    femData(MeshCell) l_cc_101 = Subscript<femData(MeshCell)[]>(globals.0cell_a,0);
    tensor[3][0] t_103 = <tensor[3][0]>{};
    tensor[3][] l__t_102 = MkDynamic<tensor[3],0>(t_103);
    self.rayU = l_rayU_93;
    self.rayV = l_rayV_95;
    self.UV = PACK(VAdd<3,4>(v_96,v_97));
    self.rayOrig = PACK(VAdd<3,4>(VAdd<3,4>(LOAD_0(TensorRef<[3]>(globals.camEye)),v_96),v_97));
    self.rayVec = PACK(VAdd<3,4>(LOAD_0(TensorRef<[3]>(globals.camN)),VEC3{4}(0.e0,0.e0,0.e0)));
    self.camNearVsp = globals.camNearVsp;
    self.camFarVsp = globals.camFarVsp;
    self.offset = l_offset_99;
    self.len = Subscript<int[]>(globals.indecies,IAdd(IAdd(IMul(globals.iresU,globals.iresV),l__t_98),p_vi_91));
    self.itter = 0;
    self.intersectionItter = 0;
    self.idx = l_offset_99;
    self.interval = TensorCopy<[2]>(l_interval_100);
    self.s = TensorIndex<&tensor[2],[0]>(l_interval_100);
    self.e = TensorIndex<&tensor[2],[1]>(l_interval_100);
    self.cc = l_cc_101;
    self.fc = LoadFem<femData(FuncCell)>(globals.c,ExtractFemItem<int,CellIndex(MeshCell)>(l_cc_101));
    self.out = 0.e0;
    self.rgba = <tensor[4]>[0.e0,0.e0,0.e0,0.e0];
    self.locs = l__t_102;
    self.ui = p_ui_90;
    self.vi = p_vi_91;
  }
  start (world, globals) {
    if (globals.debug) {
      if (NEQ<int>(self.ui,globals.debugU)) {
        if (NEQ<int>(self.vi,globals.debugV)) {
          stabilize;
        }
      }
    }
    if (EQ<int>(self.len,0)) {
      print("(find:)No intersection found:",self.ui,"/",self.vi,"\n");
      stabilize;
    }
    femData(MeshCell) l_cc_108 = Subscript<femData(MeshCell)[]>(globals.0cell_a,Subscript<int[]>(globals.cells,self.idx));
    self.cc = l_cc_108;
    self.fc = LoadFem<femData(FuncCell)>(globals.c,ExtractFemItem<int,CellIndex(MeshCell)>(l_cc_108));
    active;
  }
  update (world, globals) {
    int l_itter_288;
    int l_intersectionItter_287;
    vec2 v_286;
    real l_s_285;
    real l_e_284;
    femData(MeshCell) l_cc_283;
    femData(FuncCell) l_fc_282;
    real l_out_275;
    vec4 v_274;
    tensor[3][] l_locs_273;
    real l_s_201;
    real l_cup_200;
    int l_ilit_198;
    int l_ilit_195;
    real l_s_172;
    print("Ui/Vi::",self.ui,"/",self.vi,"\n");
    tensor[2] _arg_109 = <tensor[2]>[self.s,self.e];
    print("Interval:",TensorRef<[2]>(_arg_109),"\n");
    print("inner itter:",self.intersectionItter,"\n");
    print("Outer itter:",self.itter,"\n");
    vec2 v_110 = VEC2(TensorIndex<&tensor[3],[0]>(TensorRef<[3]>(self.rayOrig)),TensorIndex<&tensor[3],[1]>(TensorRef<[3]>(self.rayOrig)));
    vec2 v_111 = VEC2(TensorIndex<&tensor[3],[0]>(TensorRef<[3]>(self.rayVec)),TensorIndex<&tensor[3],[1]>(TensorRef<[3]>(self.rayVec)));
    femData(Mesh) l__t_112 = ExtractFem<femData(Mesh),femData(MeshCell)>(self.cc);
    int l__t_113 = ExtractFemItem<int,CellIndex(MeshCell)>(self.cc);
    tensor[2] _arg_114 = PACK(VAdd<2,2>(v_110,VScale<2,2>(self.s,v_111)));
    femData(MeshPos) l_callNewtonPos_115 = _0A92_msh_newtonInverse$2571(_arg_114,l__t_113,l__t_112);
    &tensor[2] l_refPos_116 = ExtractFemItem<tensor[2],RefPos(Mesh)>(l_callNewtonPos_115);
    tensor[2] _arg_117 = PACK(VAdd<2,2>(v_110,VScale<2,2>(self.e,v_111)));
    femData(MeshPos) l_callNewtonPos_118 = _0A92_msh_newtonInverse$2571(_arg_117,l__t_113,l__t_112);
    &tensor[2] l_refPos_119 = ExtractFemItem<tensor[2],RefPos(Mesh)>(l_callNewtonPos_118);
    print("inverses:",l_refPos_116,l_refPos_119,"\n");
    femData(FemFunc) l__t_120 = ExtractFem<femData(FemFunc),femData(FuncCell)>(self.fc);
    femData(Space) l__t_121 = ExtractFem<femData(Space),femData(FemFunc)>(l__t_120);
    real l__t_122 = TensorIndex<&tensor[3],[2]>(TensorRef<[3]>(self.rayVec));
    real l__t_123 = TensorIndex<&tensor[3],[2]>(TensorRef<[3]>(self.rayOrig));
    int l_mulRes_124 = IMul(ExtractFemItem<int,CellIndex(FuncCell)>(self.fc),6);
    int t_125 = ExtractFemItem2<int,int,ExtractIndex(Space)>(l__t_121,l_mulRes_124);
    int t_126 = ExtractFemItem2<int,int,ExtractIndex(Space)>(l__t_121,IAdd(l_mulRes_124,1));
    int t_127 = ExtractFemItem2<int,int,ExtractIndex(Space)>(l__t_121,IAdd(l_mulRes_124,2));
    int t_128 = ExtractFemItem2<int,int,ExtractIndex(Space)>(l__t_121,IAdd(l_mulRes_124,3));
    int t_129 = ExtractFemItem2<int,int,ExtractIndex(Space)>(l__t_121,IAdd(l_mulRes_124,4));
    int t_130 = ExtractFemItem2<int,int,ExtractIndex(Space)>(l__t_121,IAdd(l_mulRes_124,5));
    real t_131 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(l__t_120,IMul(1,t_130));
    real t_132 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(l__t_120,IMul(1,t_129));
    real t_133 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(l__t_120,IMul(1,t_128));
    real t_134 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(l__t_120,IMul(1,t_127));
    real t_135 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(l__t_120,IMul(1,t_126));
    real t_136 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(l__t_120,IMul(1,t_125));
    vec4 v_137 = VEC4(t_136,t_135,t_134,t_133);
    vec2 v_138 = VEC2(t_132,t_131);
    real l_varAcc_139 = TensorIndex<&tensor[2],[0]>(l_refPos_116);
    real l_varAcc_140 = TensorIndex<&tensor[2],[1]>(l_refPos_116);
    real l_prod_141 = RMul(RMul(l_varAcc_139,l_varAcc_139),0.1e1);
    real l_prod_142 = RMul(l_varAcc_139,l_varAcc_140);
    real l_prod_143 = RMul(l_varAcc_139,0.1e1);
    real l_prod_144 = RMul(0.1e1,RMul(l_varAcc_140,l_varAcc_140));
    real l_prod_145 = RMul(0.1e1,l_varAcc_140);
    real l_prod_146 = RMul(0.1e1,0.1e1);
    real l_mult_147 = RMul(0.1e1,l_prod_146);
    real l_mult_148 = RMul(0.2e1,l_prod_144);
    real l_mult_149 = RMul(0.4e1,l_prod_142);
    real l_mult_150 = RMul(0.2e1,l_prod_141);
    real l_mult_151 = RMul(-0.4e1,l_prod_142);
    real l_fa_152 = RSub(RSub(RAdd(VDot<2,2>(v_138,VEC2(RAdd(RMul(0.4e1,l_prod_145),RAdd(RMul(-0.4e1,l_prod_144),l_mult_151)),RAdd(RMul(0.4e1,l_prod_143),RAdd(l_mult_151,RMul(-0.4e1,l_prod_141))))),VDot<4,4>(v_137,VEC4(RAdd(l_mult_147,RAdd(RMul(-0.3e1,l_prod_145),RAdd(l_mult_148,RAdd(RMul(-0.3e1,l_prod_143),RAdd(l_mult_149,l_mult_150))))),RAdd(RMul(-0.1e1,l_prod_143),l_mult_150),RAdd(RMul(-0.1e1,l_prod_145),l_mult_148),l_mult_149))),RMul(l__t_122,self.s)),l__t_123);
    real l_varAcc_153 = TensorIndex<&tensor[2],[0]>(l_refPos_119);
    real l_varAcc_154 = TensorIndex<&tensor[2],[1]>(l_refPos_119);
    real l_prod_155 = RMul(RMul(l_varAcc_153,l_varAcc_153),0.1e1);
    real l_prod_156 = RMul(l_varAcc_153,l_varAcc_154);
    real l_prod_157 = RMul(l_varAcc_153,0.1e1);
    real l_prod_158 = RMul(0.1e1,RMul(l_varAcc_154,l_varAcc_154));
    real l_prod_159 = RMul(0.1e1,l_varAcc_154);
    real l_mult_160 = RMul(0.2e1,l_prod_158);
    real l_mult_161 = RMul(0.4e1,l_prod_156);
    real l_mult_162 = RMul(0.2e1,l_prod_155);
    real l_mult_163 = RMul(-0.4e1,l_prod_156);
    real l_fb_164 = RSub(RSub(RAdd(VDot<2,2>(v_138,VEC2(RAdd(RMul(0.4e1,l_prod_159),RAdd(RMul(-0.4e1,l_prod_158),l_mult_163)),RAdd(RMul(0.4e1,l_prod_157),RAdd(l_mult_163,RMul(-0.4e1,l_prod_155))))),VDot<4,4>(v_137,VEC4(RAdd(l_mult_147,RAdd(RMul(-0.3e1,l_prod_159),RAdd(l_mult_160,RAdd(RMul(-0.3e1,l_prod_157),RAdd(l_mult_161,l_mult_162))))),RAdd(RMul(-0.1e1,l_prod_157),l_mult_162),RAdd(RMul(-0.1e1,l_prod_159),l_mult_160),l_mult_161))),RMul(l__t_122,self.e)),l__t_123);
    tensor[2] _arg_165 = <tensor[2]>[l_fa_152,l_fb_164];
    print("Vals:",TensorRef<[2]>(_arg_165),"\n");
    vec4 v_166 = v_137;
    vec2 v_167 = v_138;
    vec2 v_168 = v_110;
    vec2 v_169 = v_111;
    if (LT<real>(Abs<real>(RSub(l_fa_152,l_fb_164)),globals.intervalEps)) {
      real l_s_171;
      if (GT<real>(Abs<real>(l_fa_152),globals.intervalEps)) {
        real l_s_170;
        if (GT<real>(Abs<real>(l_fb_164),globals.intervalEps)) {
          print("warn\n");
          self.s = RAdd(self.s,globals.intervalEps);
          active;
        } else {
          l_s_170 = self.s;
        }
        l_s_171 = l_s_170;
      } else {
        l_s_171 = self.s;
      }
      l_s_172 = l_s_171;
    } else {
      l_s_172 = self.s;
    }
    real l_cup_173 = RDiv(RSub(RMul(l_s_172,l_fb_164),RMul(self.e,l_fa_152)),RSub(l_fb_164,l_fa_152));
    print("Mid time:",l_cup_173,"\n");
    tensor[2] _arg_174 = PACK(VAdd<2,2>(v_168,VScale<2,2>(l_cup_173,v_169)));
    femData(MeshPos) l_callNewtonPos_175 = _0A92_msh_newtonInverse$2571(_arg_174,l__t_113,l__t_112);
    &tensor[2] l_refPos_176 = ExtractFemItem<tensor[2],RefPos(Mesh)>(l_callNewtonPos_175);
    real l_varAcc_177 = TensorIndex<&tensor[2],[0]>(l_refPos_176);
    real l_varAcc_178 = TensorIndex<&tensor[2],[1]>(l_refPos_176);
    real l_prod_179 = RMul(RMul(l_varAcc_177,l_varAcc_177),0.1e1);
    real l_prod_180 = RMul(l_varAcc_177,l_varAcc_178);
    real l_prod_181 = RMul(l_varAcc_177,0.1e1);
    real l_prod_182 = RMul(0.1e1,RMul(l_varAcc_178,l_varAcc_178));
    real l_prod_183 = RMul(0.1e1,l_varAcc_178);
    real l_mult_184 = RMul(0.2e1,l_prod_182);
    real l_mult_185 = RMul(0.4e1,l_prod_180);
    real l_mult_186 = RMul(0.2e1,l_prod_179);
    real l_mult_187 = RMul(0.4e1,l_prod_183);
    real l_mult_188 = RMul(-0.4e1,l_prod_180);
    real l_mult_189 = RMul(0.4e1,l_prod_181);
    real l_fmVal_190 = RAdd(VDot<2,2>(v_167,VEC2(RAdd(l_mult_187,RAdd(RMul(-0.4e1,l_prod_182),l_mult_188)),RAdd(l_mult_189,RAdd(l_mult_188,RMul(-0.4e1,l_prod_179))))),VDot<4,4>(v_166,VEC4(RAdd(l_mult_147,RAdd(RMul(-0.3e1,l_prod_183),RAdd(l_mult_184,RAdd(RMul(-0.3e1,l_prod_181),RAdd(l_mult_185,l_mult_186))))),RAdd(RMul(-0.1e1,l_prod_181),l_mult_186),RAdd(RMul(-0.1e1,l_prod_183),l_mult_184),l_mult_185)));
    real l_fm_191 = RSub(RSub(l_fmVal_190,RMul(l__t_122,l_cup_173)),l__t_123);
    tensor[3] _arg_192 = <tensor[3]>[l_fa_152,l_fm_191,l_fb_164];
    print("all vals:",TensorRef<[3]>(_arg_192),"\n");
    int l_intersectionItter_193 = IAdd(self.intersectionItter,1);
    bool l__t_194 = GT<real>(l_fa_152,0.e0);
    if (l__t_194) {
      l_ilit_195 = 1;
    } else {
      int l__t_196;
      if (LT<real>(l_fa_152,0.e0)) {
        l__t_196 = -1;
      } else {
        l__t_196 = 0;
      }
      l_ilit_195 = l__t_196;
    }
    bool l__t_197 = GT<real>(l_fm_191,0.e0);
    if (l__t_197) {
      l_ilit_198 = 1;
    } else {
      int l__t_199;
      if (LT<real>(l_fm_191,0.e0)) {
        l__t_199 = -1;
      } else {
        l__t_199 = 0;
      }
      l_ilit_198 = l__t_199;
    }
    if (LT<int>(IMul(l_ilit_195,l_ilit_198),0)) {
      l_cup_200 = l_cup_173;
      l_s_201 = l_s_172;
    } else {
      real l_cup_206;
      int l_ilit_204;
      int l_ilit_202;
      if (l__t_194) {
        l_ilit_202 = 1;
      } else {
        int l__t_203;
        if (LT<real>(l_fa_152,0.e0)) {
          l__t_203 = -1;
        } else {
          l__t_203 = 0;
        }
        l_ilit_202 = l__t_203;
      }
      if (l__t_197) {
        l_ilit_204 = 1;
      } else {
        int l__t_205;
        if (LT<real>(l_fm_191,0.e0)) {
          l__t_205 = -1;
        } else {
          l__t_205 = 0;
        }
        l_ilit_204 = l__t_205;
      }
      if (GT<int>(IMul(l_ilit_202,l_ilit_204),0)) {
        l_cup_206 = l_cup_173;
      } else {
        l_cup_206 = l_s_172;
      }
      l_cup_200 = self.e;
      l_s_201 = l_cup_206;
    }
    tensor[2] _arg_207 = <tensor[2]>[l_s_201,l_cup_200];
    print("new interval:",TensorRef<[2]>(_arg_207),"\n");
    bool l__t_208 = LT<real>(Abs<real>(l_fm_191),globals.zeroEps);
    if (l__t_208) {
      vec4 v_268;
      vec3{4} v_257;
      real l_fmVal_244;
      vec2 v_243;
      vec2 v_209 = VEC2(0.e0,0.e0);
      if (l__t_208) {
        real l_sum_210 = RAdd(RMul(-0.3e1,l_prod_146),RAdd(l_mult_187,l_mult_189));
        real l_mult_211 = RMul(-0.1e1,l_prod_146);
        real l_basisEval_212 = RMul(-0.4e1,l_prod_183);
        real l_mult_213 = RMul(0.4e1,l_prod_146);
        real l_mult_214 = RMul(-0.4e1,l_prod_181);
        real l_vdot_215 = RAdd(VDot<2,2>(v_167,VEC2(l_basisEval_212,RAdd(l_mult_213,RAdd(l_basisEval_212,RMul(-0.8e1,l_prod_181))))),VDot<4,4>(v_166,VEC4(l_sum_210,RAdd(l_mult_211,l_mult_189),0.e0,l_mult_187)));
        real l_vdot_216 = RAdd(VDot<2,2>(v_167,VEC2(RAdd(l_mult_213,RAdd(RMul(-0.8e1,l_prod_183),l_mult_214)),l_mult_214)),VDot<4,4>(v_166,VEC4(l_sum_210,0.e0,RAdd(l_mult_211,l_mult_187),l_mult_189)));
        int l_mulRes_217 = IMul(l__t_113,3);
        int t_218 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(l__t_112,l_mulRes_217);
        int l_mulRes_219 = IMul(2,t_218);
        int t_220 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(l__t_112,IAdd(l_mulRes_217,1));
        int l_mulRes_221 = IMul(2,t_220);
        real l_dof_load_222 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(l__t_112,l_mulRes_221);
        real l_dof_load_223 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(l__t_112,IAdd(1,l_mulRes_221));
        int t_224 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(l__t_112,IAdd(l_mulRes_217,2));
        int l_mulRes_225 = IMul(2,t_224);
        real l_dof_load_226 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(l__t_112,l_mulRes_225);
        real l_dof_load_227 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(l__t_112,IAdd(1,l_mulRes_225));
        real t_228 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(l__t_112,l_mulRes_219);
        real l_r_229 = RMul(t_228,l_mult_211);
        real l_r_230 = RAdd(RAdd(l_r_229,RMul(l_dof_load_222,l_mult_147)),RMul(l_dof_load_226,0.e0));
        real l_r_231 = RAdd(RAdd(l_r_229,RMul(l_dof_load_222,0.e0)),RMul(l_dof_load_226,l_mult_147));
        real t_232 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(l__t_112,IAdd(1,l_mulRes_219));
        real l_r_233 = RMul(t_232,l_mult_211);
        real l_r_234 = RAdd(RAdd(l_r_233,RMul(l_dof_load_223,l_mult_147)),RMul(l_dof_load_227,0.e0));
        real l_r_235 = RAdd(RAdd(l_r_233,RMul(l_dof_load_223,0.e0)),RMul(l_dof_load_227,l_mult_147));
        real l_r_236 = RAdd(RMul(0.e0,l_r_230),RMul(-0.1e1,l_r_234));
        real l_r_237 = RMul(0.e0,l_r_231);
        real l_r_238 = RAdd(l_r_237,RMul(-0.1e1,l_r_235));
        real l_r_239 = RAdd(RMul(0.1e1,l_r_230),RMul(0.e0,l_r_234));
        real l_r_240 = RMul(0.e0,l_r_235);
        real l_r_241 = RAdd(RMul(0.1e1,l_r_231),l_r_240);
        real l_op1_e3_l_14_242 = VDot<2,2>(VEC2(l_r_230,l_r_234),VEC2(RAdd(l_r_237,RMul(0.1e1,l_r_235)),RAdd(RMul(-0.1e1,l_r_231),l_r_240)));
        v_243 = VEC2(RAdd(RMul(l_vdot_215,RDiv(RAdd(RMul(0.e0,l_r_236),RMul(-0.1e1,l_r_238)),l_op1_e3_l_14_242)),RMul(l_vdot_216,RDiv(RAdd(RMul(0.1e1,l_r_236),RMul(0.e0,l_r_238)),l_op1_e3_l_14_242))),RAdd(RMul(l_vdot_215,RDiv(RAdd(RMul(0.e0,l_r_239),RMul(-0.1e1,l_r_241)),l_op1_e3_l_14_242)),RMul(l_vdot_216,RDiv(RAdd(RMul(0.1e1,l_r_239),RMul(0.e0,l_r_241)),l_op1_e3_l_14_242))));
        l_fmVal_244 = l_fmVal_190;
      } else {
        v_243 = v_209;
        l_fmVal_244 = self.out;
      }
      print("Out val:",l_fmVal_244,"\n");
      tensor[2] _arg_245 = PACK(v_243);
      print("Grad val:",TensorRef<[2]>(_arg_245),"\n");
      vec3{4} v_246 = VEC3{4}(0.1e1,0.1e1,0.1e1);
      if (NEQ<real>(globals.cmin,globals.cmax)) {
        tensor[3,2] l_voxels_253;
        real l_imgPos_247 = RAdd(RMul(Transform<IMAGE1D<double[3]>>(globals.cmap),RAdd(-0.1e1,RMul(RDiv(RSub(l_fmVal_244,globals.cmin),RSub(globals.cmax,globals.cmin)),RSub(0.1e1,-0.1e1)))),Translate<IMAGE1D<double[3]>>(globals.cmap));
        real l_nd_248 = RFloor(l_imgPos_247);
        real l_f_249 = RSub(l_imgPos_247,l_nd_248);
        int l_n_250 = RealToInt(l_nd_248);
        if (IndexInside<IMAGE1D<double[3]>,2>(l_n_250,globals.cmap)) {
          int l_offp_251 = IMul(3,l_n_250);
          int l_offp_252 = IMul(3,IAdd(l_n_250,1));
          l_voxels_253 = <tensor[3,2]>[LoadVoxel<IMAGE1D<double[3]>>(globals.cmap,l_offp_251),LoadVoxel<IMAGE1D<double[3]>>(globals.cmap,l_offp_252),LoadVoxel<IMAGE1D<double[3]>>(globals.cmap,IAdd(l_offp_251,1)),LoadVoxel<IMAGE1D<double[3]>>(globals.cmap,IAdd(l_offp_252,1)),LoadVoxel<IMAGE1D<double[3]>>(globals.cmap,IAdd(l_offp_251,2)),LoadVoxel<IMAGE1D<double[3]>>(globals.cmap,IAdd(l_offp_252,2))];
        } else {
          int l_offp_254 = IMul(3,ControlIndex<IMAGE1D<double[3]>,clamp,0>(globals.cmap,l_n_250));
          int l_offp_255 = IMul(3,ControlIndex<IMAGE1D<double[3]>,clamp,0>(globals.cmap,IAdd(l_n_250,1)));
          l_voxels_253 = <tensor[3,2]>[LoadVoxel<IMAGE1D<double[3]>>(globals.cmap,l_offp_254),LoadVoxel<IMAGE1D<double[3]>>(globals.cmap,l_offp_255),LoadVoxel<IMAGE1D<double[3]>>(globals.cmap,IAdd(l_offp_254,1)),LoadVoxel<IMAGE1D<double[3]>>(globals.cmap,IAdd(l_offp_255,1)),LoadVoxel<IMAGE1D<double[3]>>(globals.cmap,IAdd(l_offp_254,2)),LoadVoxel<IMAGE1D<double[3]>>(globals.cmap,IAdd(l_offp_255,2))];
        }
        vec2 v_256 = VAdd<2,2>(VEC2(0.1e1,0.1e1),VMul<2,2>(VEC2(l_f_249,RSub(l_f_249,0.1e1)),VEC2(-0.1e1,0.1e1)));
        v_257 = VEC3{4}(VDot<2,2>(LOAD_0(ProjectLast<tensor[3,2],[0]>(l_voxels_253)),v_256),VDot<2,2>(LOAD_0(ProjectLast<tensor[3,2],[1]>(l_voxels_253)),v_256),VDot<2,2>(LOAD_0(ProjectLast<tensor[3,2],[2]>(l_voxels_253)),v_256));
      } else {
        v_257 = v_246;
      }
      if (globals.light) {
        vec3{4} v_258 = VEC3{4}(VIndex<2,2,0>(v_243),VIndex<2,2,1>(v_243),-0.1e1);
        real l_op1_e3_l_5_259 = RDiv(0.1e1,Sqrt(VDot<3,4>(v_258,v_258)));
        vec3{4} v_260 = VAdd<3,4>(VNeg<3,4>(VScale<3,4>(RDiv(0.1e1,Sqrt(VDot<3,4>(LOAD_0(TensorRef<[3]>(self.rayVec)),LOAD_0(TensorRef<[3]>(self.rayVec))))),LOAD_0(TensorRef<[3]>(self.rayVec)))),LOAD_0(TensorRef<[3]>(globals.L)));
        vec3{4} v_261 = VAdd<3,4>(LOAD_0(TensorRef<[3]>(globals.mcnear)),VScale<3,4>(RDiv(RSub(l_cup_173,self.camNearVsp),RSub(self.camFarVsp,self.camNearVsp)),VSub<3,4>(LOAD_0(TensorRef<[3]>(globals.mcfar)),LOAD_0(TensorRef<[3]>(globals.mcnear)))));
        real l_r_262 = VIndex<3,4,0>(v_261);
        real l_r_263 = RMul(Max<real>(0.e0,RMul(l_op1_e3_l_5_259,VDot<3,4>(v_258,LOAD_0(TensorRef<[3]>(globals.L))))),globals.phongKd);
        real l_r_264 = VIndex<3,4,1>(v_261);
        real l_r_265 = VIndex<3,4,2>(v_261);
        real l_r_266 = RMul(MathFn<pow>(Max<real>(0.e0,RMul(RMul(l_op1_e3_l_5_259,RDiv(0.1e1,Sqrt(VDot<3,4>(v_260,v_260)))),VDot<3,4>(v_258,v_260))),globals.phongSp),globals.phongKs);
        vec3{4} v_267 = VAdd<3,4>(VAdd<3,4>(VScale<3,4>(globals.phongKa,v_257),VEC3{4}(RMul(RMul(l_r_263,VIndex<3,4,0>(v_257)),l_r_262),RMul(RMul(l_r_263,VIndex<3,4,1>(v_257)),l_r_264),RMul(RMul(l_r_263,VIndex<3,4,2>(v_257)),l_r_265))),VEC3{4}(RMul(l_r_266,l_r_262),RMul(l_r_266,l_r_264),RMul(l_r_266,l_r_265)));
        v_268 = VEC4(VIndex<3,4,0>(v_267),VIndex<3,4,1>(v_267),VIndex<3,4,2>(v_267),0.1e1);
      } else {
        v_268 = VEC4(VIndex<3,4,0>(v_257),VIndex<3,4,1>(v_257),VIndex<3,4,2>(v_257),0.1e1);
      }
      tensor[3] _arg_269 = PACK(VAdd<3,4>(VScale<3,4>(l_cup_173,LOAD_0(TensorRef<[3]>(self.rayVec))),LOAD_0(TensorRef<[3]>(self.rayOrig))));
      tensor[3][1] t_271 = <tensor[3][1]>{_arg_269};
      tensor[3][] l__t_270 = MkDynamic<tensor[3],1>(t_271);
      self.intersectionItter = l_intersectionItter_193;
      self.s = l_s_201;
      self.e = l_cup_200;
      self.out = l_fmVal_244;
      self.rgba = PACK(v_268);
      self.locs = l__t_270;
      stabilize;
    } else {
      l_locs_273 = self.locs;
      v_274 = LOAD_0(TensorRef<[4]>(self.rgba));
      l_out_275 = self.out;
    }
    if (GT<int>(l_intersectionItter_193,32)) {
      int l_itter_276 = IAdd(self.itter,1);
      if (GTE<int>(l_itter_276,self.len)) {
        print("No intersection found\n");
        print("Fin pixel=============================\n");
        self.itter = l_itter_276;
        self.intersectionItter = 0;
        self.s = l_s_201;
        self.e = l_cup_200;
        self.out = l_out_275;
        self.rgba = PACK(v_274);
        self.locs = l_locs_273;
        stabilize;
      }
      int l__t_278 = IAdd(self.offset,l_itter_276);
      &tensor[2] l_interval_279 = Subscript<tensor[2][]>(globals.times,l__t_278);
      femData(MeshCell) l_cc_280 = Subscript<femData(MeshCell)[]>(globals.0cell_a,Subscript<int[]>(globals.cells,l__t_278));
      print("++++++++++++++++Next interval!+++++++++++++++++++\n");
      self.itter = l_itter_276;
      self.intersectionItter = 0;
      self.interval = TensorCopy<[2]>(l_interval_279);
      self.s = TensorIndex<&tensor[2],[0]>(l_interval_279);
      self.e = TensorIndex<&tensor[2],[1]>(l_interval_279);
      self.cc = l_cc_280;
      self.fc = LoadFem<femData(FuncCell)>(globals.c,ExtractFemItem<int,CellIndex(MeshCell)>(l_cc_280));
      self.out = l_out_275;
      self.rgba = PACK(v_274);
      self.locs = l_locs_273;
      active;
    } else {
      print("---------------\n");
      l_fc_282 = self.fc;
      l_cc_283 = self.cc;
      l_e_284 = l_cup_200;
      l_s_285 = l_s_201;
      v_286 = LOAD_0(TensorRef<[2]>(self.interval));
      l_intersectionItter_287 = l_intersectionItter_193;
      l_itter_288 = self.itter;
    }
    self.itter = l_itter_288;
    self.intersectionItter = l_intersectionItter_287;
    self.interval = PACK(v_286);
    self.s = l_s_285;
    self.e = l_e_284;
    self.cc = l_cc_283;
    self.fc = l_fc_282;
    self.out = l_out_275;
    self.rgba = PACK(v_274);
    self.locs = l_locs_273;
    active;
  }
}
//***** CREATE GRID(2) *****
  {
    for i_vi_291 = 0 to ISub(globals.iresU,1) {
      for i_ui_292 = 0 to ISub(globals.iresV,1) {
        new ray(i_ui_292,i_vi_291);
      }
    }
  }
#### end program ####
/usr/bin/clang++ -fPIC -m64 -c -Wreturn-type -Wuninitialized -g -O0 -mavx2 -msse4.2 -I/home/teocollin/gitcode/diderot/include -I/usr/local/include evalProg.cxx
/usr/bin/clang++ -shared -o evalProg.so evalProg.o /home/teocollin/gitcode/diderot/lib/diderot-rt-seq-debug.o -Wl,-rpath=/usr/local/lib -L/usr/local/lib -lteem  -lspatialindex_c   -lspatialindex 
                                       Phase                                         Exclusive    Total  
  compiler ..........................................................................   0.059     2.221
    front end .......................................................................   0.307     0.394
      parser ........................................................................   0.065     0.065
      typechecker ...................................................................   0.022     0.022
      simplify ......................................................................   0.000     0.000
    translate .......................................................................   0.016     0.016
    High IR optimization ............................................................   0.030     0.067
      High IR value numbering .......................................................   0.014     0.014
      High IR normalization .........................................................   0.023     0.023
      High IR checking ..............................................................   0.000     0.000
    High to Mid translation .........................................................   0.046     0.046
    Mid IR optimization .............................................................   0.036     0.060
      Mid IR contraction ............................................................   0.005     0.005
      Mid IR value numbering ........................................................   0.016     0.016
      Mid IR border control .........................................................   0.002     0.002
      Mid IR checking ...............................................................   0.000     0.000
    Mid to Low translation ..........................................................   0.029     0.029
    Low IR optimization .............................................................   0.045     0.100
      Low IR contraction ............................................................   0.027     0.027
      Low IR value numbering ........................................................   0.027     0.027
      Low IR checking ...............................................................   0.000     0.000
    Low to Tree translation .........................................................   0.034     0.034
    Tree IR optimization ............................................................   0.006     0.006
      Tree IR contraction ...........................................................   0.000     0.000
      Tree IR checking ..............................................................   0.000     0.000
    code generation .................................................................   0.029     1.411
      C compiler ....................................................................   1.382     1.382
