/* ParseTree: After parsing */
  Program @ [evalProg.diderot:4.1-425.0] 
    [
      Type: mesh_t= @ [evalProg.diderot:4.1-5.0] 
        Mesh @ [evalProg.diderot:4.6-10] 
        From File : evalProg.json @ [evalProg.diderot:4.1-5.0] 
      Const: dim= @ [evalProg.diderot:5.1-6.0] 
        Select @ [evalProg.diderot:5.17-27] 
          Var: mesh_t @ [evalProg.diderot:5.17-23] 
          dim
      Type: fns_t= @ [evalProg.diderot:6.1-7.0] 
        FunctionSpace(mesh_t) @ [evalProg.diderot:6.6-29] 
          [ ]
        From File : evalProg.json @ [evalProg.diderot:6.1-7.0] 
      Type: func_t= @ [evalProg.diderot:7.1-8.0] 
        FemFunction(fns_t) @ [evalProg.diderot:7.6-24] 
        From File : evalProg.json @ [evalProg.diderot:7.1-8.0] 
      Input: meshData @ [evalProg.diderot:9.1-10.0] 
      Input: space= @ [evalProg.diderot:10.1-11.0] 
        Apply @ [evalProg.diderot:10.21-36] 
          Var: fns_t @ [evalProg.diderot:10.21-26] 
          [
            Var: meshData @ [evalProg.diderot:10.27-35] 
          ]
      Input: data= @ [evalProg.diderot:11.1-12.0] 
        Apply @ [evalProg.diderot:11.21-34] 
          Var: func_t @ [evalProg.diderot:11.21-27] 
          [
            Var: space @ [evalProg.diderot:11.28-33] 
          ]
      Var @ [evalProg.diderot:13.1-14.0] 
        Decl: F= @ [evalProg.diderot:13.1-14.0] 
          Select @ [evalProg.diderot:13.18-24] 
            Var: data @ [evalProg.diderot:13.18-22] 
            F
      Var @ [evalProg.diderot:15.1-16.0] 
        Decl: simplex= @ [evalProg.diderot:15.1-16.0] 
          Apply @ [evalProg.diderot:15.27-45] 
            Select @ [evalProg.diderot:15.27-45] 
              Var: meshData @ [evalProg.diderot:15.27-35] 
              refcell
            [ ]
      Input: fStrTh @ [evalProg.diderot:18.1-19.0] 
        "Feature strength threshold"
      Input: fMaskTh= @ [evalProg.diderot:19.1-20.0] 
        "feature mask threshold"
        Lit: 0 @ [evalProg.diderot:19.49-50] 
      Input: fBias= @ [evalProg.diderot:20.1-21.0] 
        "Bias in feature strength computing"
        Lit: 0.e0 @ [evalProg.diderot:20.59-62] 
      Input: tipd= @ [evalProg.diderot:21.1-58] 
        "Target inter-particle distance"
        Lit: 0.1e1 @ [evalProg.diderot:21.54-57] 
      Input: mabd= @ [evalProg.diderot:24.1-66] 
        "Min allowed birth distance (> 0.7351)"
        Lit: 0.75e0 @ [evalProg.diderot:24.61-65] 
      Input: travMax= @ [evalProg.diderot:25.1-26.0] 
        "Max allowed travel to or on feature"
        Lit: 10 @ [evalProg.diderot:25.62-64] 
      Input: nfsMax= @ [evalProg.diderot:26.1-27.0] 
        "Max allowed # feature steps "
        Lit: 20 @ [evalProg.diderot:26.53-55] 
      Input: gdeTest= @ [evalProg.diderot:28.1-29.0] 
        "Scaling in sufficient decrease test"
        Lit: 0.5e0 @ [evalProg.diderot:28.62-65] 
      Input: gdeBack= @ [evalProg.diderot:29.1-30.0] 
        "How to scale stepsize for backtrack"
        Lit: 0.5e0 @ [evalProg.diderot:29.62-65] 
      Input: gdeOppor= @ [evalProg.diderot:30.1-31.0] 
        "Opportunistic stepsize increase"
        Lit: 0.12e1 @ [evalProg.diderot:30.59-62] 
      Input: fsEps @ [evalProg.diderot:31.1-32.0] 
        "Conv. thresh. on feature step size"
      Input: geoEps= @ [evalProg.diderot:32.1-33.0] 
        "Conv. thresh. on system geometry"
        Lit: 0.1e0 @ [evalProg.diderot:32.58-61] 
      Input: mvmtEps= @ [evalProg.diderot:33.1-34.0] 
        "Conv. thresh. on point movement"
        Lit: 0.1e-1 @ [evalProg.diderot:33.58-62] 
      Input: rpcEps= @ [evalProg.diderot:34.1-35.0] 
        "Conv. thresh. on recent pop. changes"
        Lit: 0.1e-1 @ [evalProg.diderot:34.62-66] 
      Input: pcmvEps= @ [evalProg.diderot:35.1-36.0] 
        "Motion limit before PC"
        Lit: 0.3e0 @ [evalProg.diderot:35.49-52] 
      Input: isoval= @ [evalProg.diderot:36.1-37.0] 
        "Which isosurface to sample"
        Lit: 0 @ [evalProg.diderot:36.52-53] 
      Input: verb= @ [evalProg.diderot:37.1-38.0] 
        "Verbosity level"
        Lit: 0 @ [evalProg.diderot:37.38-39] 
      Input: sfs= @ [evalProg.diderot:38.1-39.0] 
        "Scaling (<=1 for stability) on fStep"
        Lit: 0.5e0 @ [evalProg.diderot:38.59-62] 
      Input: hist= @ [evalProg.diderot:39.1-40.0] 
        "How history matters for convergence"
        Lit: 0.5e0 @ [evalProg.diderot:39.59-62] 
      Input: pcp= @ [evalProg.diderot:41.1-42.0] 
        "periodicity of population control (PC)"
        Lit: 5 @ [evalProg.diderot:41.60-61] 
      Input: ipos @ [evalProg.diderot:42.1-43.0] 
        "Initial point positions"
      Input: fDim= @ [evalProg.diderot:43.1-44.0] 
        Lit: 2 @ [evalProg.diderot:43.18-19] 
      Func: insideTest @ [evalProg.diderot:45.1-54.1] 
        Bool @ [evalProg.diderot:45.10-15] 
        [
          Param: x @ [evalProg.diderot:45.26-32] 
            Tensor @ [evalProg.diderot:45.26-31] 
              [
                Lit: 3 @ [evalProg.diderot:45.26-31] 
              ]
        ]
        Stmt @ [evalProg.diderot:45.1-54.1] 
          Block @ [evalProg.diderot:45.33-51.0] 
            [
              Decl @ [evalProg.diderot:45.33-51.0] 
                Decl: mid= @ [evalProg.diderot:46.3-47.0] 
                  BinOp: - @ [evalProg.diderot:46.14-33] 
                    Var: x @ [evalProg.diderot:46.14-15] 
                    Cons @ [evalProg.diderot:46.18-33] 
                      [
                        Lit: 0.e0 @ [evalProg.diderot:46.19-22] 
                        Lit: 0.e0 @ [evalProg.diderot:46.24-27] 
                        Lit: 0.e0 @ [evalProg.diderot:46.29-32] 
                      ]
              Decl @ [evalProg.diderot:45.33-51.0] 
                Decl: z= @ [evalProg.diderot:47.3-48.0] 
                  AndAlso @ [evalProg.diderot:47.12-62] 
                    BinOp: > @ [evalProg.diderot:47.12-27] 
                      UnaryOp: |()| @ [evalProg.diderot:47.12-20] 
                        Subscript @ [evalProg.diderot:47.13-19] 
                          Var: mid @ [evalProg.diderot:47.13-16] 
                          [
                            Lit: 0 @ [evalProg.diderot:47.17-18] 
                          ]
                      Lit: 0.1e0 @ [evalProg.diderot:47.23-26] 
                    AndAlso @ [evalProg.diderot:47.27-62] 
                      BinOp: > @ [evalProg.diderot:47.30-45] 
                        UnaryOp: |()| @ [evalProg.diderot:47.30-38] 
                          Subscript @ [evalProg.diderot:47.31-37] 
                            Var: mid @ [evalProg.diderot:47.31-34] 
                            [
                              Lit: 1 @ [evalProg.diderot:47.35-36] 
                            ]
                        Lit: 0.1e0 @ [evalProg.diderot:47.41-44] 
                      BinOp: > @ [evalProg.diderot:47.48-62] 
                        UnaryOp: |()| @ [evalProg.diderot:47.48-56] 
                          Subscript @ [evalProg.diderot:47.49-55] 
                            Var: mid @ [evalProg.diderot:47.49-52] 
                            [
                              Lit: 2 @ [evalProg.diderot:47.53-54] 
                            ]
                        Lit: 0.1e0 @ [evalProg.diderot:47.59-62] 
              Return @ [evalProg.diderot:48.3-49.0] 
                AndAlso @ [evalProg.diderot:48.10-36] 
                  BinOp: < @ [evalProg.diderot:48.10-22] 
                    UnaryOp: |()| @ [evalProg.diderot:48.10-15] 
                      Var: mid @ [evalProg.diderot:48.11-14] 
                    Lit: 0.4e1 @ [evalProg.diderot:48.18-21] 
                  BinOp: > @ [evalProg.diderot:48.25-36] 
                    UnaryOp: |()| @ [evalProg.diderot:48.25-30] 
                      Var: mid @ [evalProg.diderot:48.26-29] 
                    Lit: 0.3e1 @ [evalProg.diderot:48.33-36] 
              Return @ [evalProg.diderot:49.3-50.0] 
                AndAlso @ [evalProg.diderot:49.10-63] 
                  BinOp: <= @ [evalProg.diderot:49.10-26] 
                    UnaryOp: |()| @ [evalProg.diderot:49.10-18] 
                      Subscript @ [evalProg.diderot:49.11-17] 
                        Var: mid @ [evalProg.diderot:49.11-14] 
                        [
                          Lit: 0 @ [evalProg.diderot:49.15-16] 
                        ]
                    Lit: 0.5e1 @ [evalProg.diderot:49.22-25] 
                  AndAlso @ [evalProg.diderot:49.26-63] 
                    BinOp: <= @ [evalProg.diderot:49.29-45] 
                      UnaryOp: |()| @ [evalProg.diderot:49.29-37] 
                        Subscript @ [evalProg.diderot:49.30-36] 
                          Var: mid @ [evalProg.diderot:49.30-33] 
                          [
                            Lit: 1 @ [evalProg.diderot:49.34-35] 
                          ]
                      Lit: 0.5e1 @ [evalProg.diderot:49.41-44] 
                    BinOp: <= @ [evalProg.diderot:49.48-63] 
                      UnaryOp: |()| @ [evalProg.diderot:49.48-56] 
                        Subscript @ [evalProg.diderot:49.49-55] 
                          Var: mid @ [evalProg.diderot:49.49-52] 
                          [
                            Lit: 2 @ [evalProg.diderot:49.53-54] 
                          ]
                      Lit: 0.5e1 @ [evalProg.diderot:49.60-63] 
            ]
      Func: grad @ [evalProg.diderot:54.1-62.1] 
        Tensor @ [evalProg.diderot:54.10-15] 
          [
            Lit: 3 @ [evalProg.diderot:54.10-15] 
          ]
        [
          Param: s @ [evalProg.diderot:54.20-26] 
            Tensor @ [evalProg.diderot:54.20-25] 
              [
                Lit: 3 @ [evalProg.diderot:54.20-25] 
              ]
        ]
        Stmt @ [evalProg.diderot:54.1-62.1] 
          Block @ [evalProg.diderot:54.27-61.0] 
            [
              Decl @ [evalProg.diderot:54.27-61.0] 
                Decl: x= @ [evalProg.diderot:55.3-56.0] 
                  Subscript @ [evalProg.diderot:55.12-16] 
                    Var: s @ [evalProg.diderot:55.12-13] 
                    [
                      Lit: 0 @ [evalProg.diderot:55.14-15] 
                    ]
              Decl @ [evalProg.diderot:54.27-61.0] 
                Decl: y= @ [evalProg.diderot:56.3-57.0] 
                  Subscript @ [evalProg.diderot:56.12-16] 
                    Var: s @ [evalProg.diderot:56.12-13] 
                    [
                      Lit: 1 @ [evalProg.diderot:56.14-15] 
                    ]
              Decl @ [evalProg.diderot:54.27-61.0] 
                Decl: z= @ [evalProg.diderot:57.3-58.0] 
                  Subscript @ [evalProg.diderot:57.12-16] 
                    Var: s @ [evalProg.diderot:57.12-13] 
                    [
                      Lit: 2 @ [evalProg.diderot:57.14-15] 
                    ]
              Decl @ [evalProg.diderot:54.27-61.0] 
                Decl: g= @ [evalProg.diderot:58.3-59.0] 
                  Cons @ [evalProg.diderot:58.12-187] 
                    [
                      BinOp: * @ [evalProg.diderot:58.13-57] 
                        BinOp: * @ [evalProg.diderot:58.13-24] 
                          BinOp: * @ [evalProg.diderot:58.13-16] 
                            Lit: 2 @ [evalProg.diderot:58.13-14] 
                            Var: x @ [evalProg.diderot:58.15-16] 
                          BinOp: ^ @ [evalProg.diderot:58.17-24] 
                            Var: z @ [evalProg.diderot:58.18-19] 
                            Lit: 2 @ [evalProg.diderot:58.22-23] 
                        Apply @ [evalProg.diderot:58.25-57] 
                          Var: cos @ [evalProg.diderot:58.25-28] 
                          [
                            BinOp: + @ [evalProg.diderot:58.29-56] 
                              BinOp: + @ [evalProg.diderot:58.29-47] 
                                BinOp: ^ @ [evalProg.diderot:58.29-37] 
                                  Var: x @ [evalProg.diderot:58.30-31] 
                                  Lit: 2 @ [evalProg.diderot:58.34-35] 
                                BinOp: ^ @ [evalProg.diderot:58.39-47] 
                                  Var: y @ [evalProg.diderot:58.40-41] 
                                  Lit: 2 @ [evalProg.diderot:58.44-45] 
                              BinOp: ^ @ [evalProg.diderot:58.49-56] 
                                Var: z @ [evalProg.diderot:58.50-51] 
                                Lit: 2 @ [evalProg.diderot:58.54-55] 
                          ]
                      BinOp: * @ [evalProg.diderot:58.59-103] 
                        BinOp: * @ [evalProg.diderot:58.59-70] 
                          BinOp: * @ [evalProg.diderot:58.59-62] 
                            Lit: 2 @ [evalProg.diderot:58.59-60] 
                            Var: y @ [evalProg.diderot:58.61-62] 
                          BinOp: ^ @ [evalProg.diderot:58.63-70] 
                            Var: z @ [evalProg.diderot:58.64-65] 
                            Lit: 2 @ [evalProg.diderot:58.68-69] 
                        Apply @ [evalProg.diderot:58.71-103] 
                          Var: cos @ [evalProg.diderot:58.71-74] 
                          [
                            BinOp: + @ [evalProg.diderot:58.75-102] 
                              BinOp: + @ [evalProg.diderot:58.75-93] 
                                BinOp: ^ @ [evalProg.diderot:58.75-83] 
                                  Var: x @ [evalProg.diderot:58.76-77] 
                                  Lit: 2 @ [evalProg.diderot:58.80-81] 
                                BinOp: ^ @ [evalProg.diderot:58.85-93] 
                                  Var: y @ [evalProg.diderot:58.86-87] 
                                  Lit: 2 @ [evalProg.diderot:58.90-91] 
                              BinOp: ^ @ [evalProg.diderot:58.95-102] 
                                Var: z @ [evalProg.diderot:58.96-97] 
                                Lit: 2 @ [evalProg.diderot:58.100-101] 
                          ]
                      BinOp: + @ [evalProg.diderot:58.105-186] 
                        BinOp: * @ [evalProg.diderot:58.105-148] 
                          BinOp: * @ [evalProg.diderot:58.105-114] 
                            Lit: 2 @ [evalProg.diderot:58.105-106] 
                            BinOp: ^ @ [evalProg.diderot:58.107-114] 
                              Var: z @ [evalProg.diderot:58.108-109] 
                              Lit: 3 @ [evalProg.diderot:58.112-113] 
                          Apply @ [evalProg.diderot:58.115-147] 
                            Var: cos @ [evalProg.diderot:58.115-118] 
                            [
                              BinOp: + @ [evalProg.diderot:58.119-146] 
                                BinOp: + @ [evalProg.diderot:58.119-137] 
                                  BinOp: ^ @ [evalProg.diderot:58.119-127] 
                                    Var: x @ [evalProg.diderot:58.120-121] 
                                    Lit: 2 @ [evalProg.diderot:58.124-125] 
                                  BinOp: ^ @ [evalProg.diderot:58.129-137] 
                                    Var: y @ [evalProg.diderot:58.130-131] 
                                    Lit: 2 @ [evalProg.diderot:58.134-135] 
                                BinOp: ^ @ [evalProg.diderot:58.139-146] 
                                  Var: z @ [evalProg.diderot:58.140-141] 
                                  Lit: 2 @ [evalProg.diderot:58.144-145] 
                            ]
                        BinOp: * @ [evalProg.diderot:58.150-186] 
                          BinOp: * @ [evalProg.diderot:58.150-153] 
                            Lit: 2 @ [evalProg.diderot:58.150-151] 
                            Var: z @ [evalProg.diderot:58.152-153] 
                          Apply @ [evalProg.diderot:58.154-186] 
                            Var: sin @ [evalProg.diderot:58.154-157] 
                            [
                              BinOp: + @ [evalProg.diderot:58.158-185] 
                                BinOp: + @ [evalProg.diderot:58.158-176] 
                                  BinOp: ^ @ [evalProg.diderot:58.158-166] 
                                    Var: x @ [evalProg.diderot:58.159-160] 
                                    Lit: 2 @ [evalProg.diderot:58.163-164] 
                                  BinOp: ^ @ [evalProg.diderot:58.168-176] 
                                    Var: y @ [evalProg.diderot:58.169-170] 
                                    Lit: 2 @ [evalProg.diderot:58.173-174] 
                                BinOp: ^ @ [evalProg.diderot:58.178-185] 
                                  Var: z @ [evalProg.diderot:58.179-180] 
                                  Lit: 2 @ [evalProg.diderot:58.183-184] 
                            ]
                    ]
              Return @ [evalProg.diderot:59.3-60.0] 
                Var: g @ [evalProg.diderot:59.10-11] 
            ]
      Func: hess @ [evalProg.diderot:62.1-71.1] 
        Tensor @ [evalProg.diderot:62.10-21] 
          [
            Lit: 3 @ [evalProg.diderot:62.17-18] 
            Lit: 3 @ [evalProg.diderot:62.19-20] 
          ]
        [
          Param: s @ [evalProg.diderot:62.27-33] 
            Tensor @ [evalProg.diderot:62.27-32] 
              [
                Lit: 3 @ [evalProg.diderot:62.27-32] 
              ]
        ]
        Stmt @ [evalProg.diderot:62.1-71.1] 
          Block @ [evalProg.diderot:62.34-70.0] 
            [
              Decl @ [evalProg.diderot:62.34-70.0] 
                Decl: x= @ [evalProg.diderot:63.3-64.0] 
                  Subscript @ [evalProg.diderot:63.12-16] 
                    Var: s @ [evalProg.diderot:63.12-13] 
                    [
                      Lit: 0 @ [evalProg.diderot:63.14-15] 
                    ]
              Decl @ [evalProg.diderot:62.34-70.0] 
                Decl: y= @ [evalProg.diderot:64.3-65.0] 
                  Subscript @ [evalProg.diderot:64.12-16] 
                    Var: s @ [evalProg.diderot:64.12-13] 
                    [
                      Lit: 1 @ [evalProg.diderot:64.14-15] 
                    ]
              Decl @ [evalProg.diderot:62.34-70.0] 
                Decl: z= @ [evalProg.diderot:65.3-66.0] 
                  Subscript @ [evalProg.diderot:65.12-16] 
                    Var: s @ [evalProg.diderot:65.12-13] 
                    [
                      Lit: 2 @ [evalProg.diderot:65.14-15] 
                    ]
              Decl @ [evalProg.diderot:62.34-70.0] 
                Decl: hess= @ [evalProg.diderot:66.3-67.0] 
                  Cons @ [evalProg.diderot:66.22-802] 
                    [
                      Cons @ [evalProg.diderot:66.23-258] 
                        [
                          BinOp: + @ [evalProg.diderot:66.24-120] 
                            BinOp: * @ [evalProg.diderot:66.24-76] 
                              BinOp: * @ [evalProg.diderot:66.24-42] 
                                BinOp: * @ [evalProg.diderot:66.24-34] 
                                  UnaryOp: unary - @ [evalProg.diderot:66.24-26] 
                                    Lit: 4 @ [evalProg.diderot:66.25-26] 
                                  BinOp: ^ @ [evalProg.diderot:66.27-34] 
                                    Var: x @ [evalProg.diderot:66.28-29] 
                                    Lit: 2 @ [evalProg.diderot:66.32-33] 
                                BinOp: ^ @ [evalProg.diderot:66.35-42] 
                                  Var: z @ [evalProg.diderot:66.36-37] 
                                  Lit: 2 @ [evalProg.diderot:66.40-41] 
                              Apply @ [evalProg.diderot:66.43-75] 
                                Var: sin @ [evalProg.diderot:66.43-46] 
                                [
                                  BinOp: + @ [evalProg.diderot:66.47-74] 
                                    BinOp: + @ [evalProg.diderot:66.47-65] 
                                      BinOp: ^ @ [evalProg.diderot:66.47-55] 
                                        Var: x @ [evalProg.diderot:66.48-49] 
                                        Lit: 2 @ [evalProg.diderot:66.52-53] 
                                      BinOp: ^ @ [evalProg.diderot:66.57-65] 
                                        Var: y @ [evalProg.diderot:66.58-59] 
                                        Lit: 2 @ [evalProg.diderot:66.62-63] 
                                    BinOp: ^ @ [evalProg.diderot:66.67-74] 
                                      Var: z @ [evalProg.diderot:66.68-69] 
                                      Lit: 2 @ [evalProg.diderot:66.72-73] 
                                ]
                            BinOp: * @ [evalProg.diderot:66.78-120] 
                              BinOp: * @ [evalProg.diderot:66.78-87] 
                                Lit: 2 @ [evalProg.diderot:66.78-79] 
                                BinOp: ^ @ [evalProg.diderot:66.80-87] 
                                  Var: z @ [evalProg.diderot:66.81-82] 
                                  Lit: 2 @ [evalProg.diderot:66.85-86] 
                              Apply @ [evalProg.diderot:66.88-120] 
                                Var: cos @ [evalProg.diderot:66.88-91] 
                                [
                                  BinOp: + @ [evalProg.diderot:66.92-119] 
                                    BinOp: + @ [evalProg.diderot:66.92-110] 
                                      BinOp: ^ @ [evalProg.diderot:66.92-100] 
                                        Var: x @ [evalProg.diderot:66.93-94] 
                                        Lit: 2 @ [evalProg.diderot:66.97-98] 
                                      BinOp: ^ @ [evalProg.diderot:66.102-110] 
                                        Var: y @ [evalProg.diderot:66.103-104] 
                                        Lit: 2 @ [evalProg.diderot:66.107-108] 
                                    BinOp: ^ @ [evalProg.diderot:66.112-119] 
                                      Var: z @ [evalProg.diderot:66.113-114] 
                                      Lit: 2 @ [evalProg.diderot:66.117-118] 
                                ]
                          BinOp: * @ [evalProg.diderot:66.122-169] 
                            BinOp: * @ [evalProg.diderot:66.122-136] 
                              BinOp: * @ [evalProg.diderot:66.122-128] 
                                BinOp: * @ [evalProg.diderot:66.122-126] 
                                  UnaryOp: unary - @ [evalProg.diderot:66.122-124] 
                                    Lit: 4 @ [evalProg.diderot:66.123-124] 
                                  Var: x @ [evalProg.diderot:66.125-126] 
                                Var: y @ [evalProg.diderot:66.127-128] 
                              BinOp: ^ @ [evalProg.diderot:66.129-136] 
                                Var: z @ [evalProg.diderot:66.130-131] 
                                Lit: 2 @ [evalProg.diderot:66.134-135] 
                            Apply @ [evalProg.diderot:66.137-169] 
                              Var: sin @ [evalProg.diderot:66.137-140] 
                              [
                                BinOp: + @ [evalProg.diderot:66.141-168] 
                                  BinOp: + @ [evalProg.diderot:66.141-159] 
                                    BinOp: ^ @ [evalProg.diderot:66.141-149] 
                                      Var: x @ [evalProg.diderot:66.142-143] 
                                      Lit: 2 @ [evalProg.diderot:66.146-147] 
                                    BinOp: ^ @ [evalProg.diderot:66.151-159] 
                                      Var: y @ [evalProg.diderot:66.152-153] 
                                      Lit: 2 @ [evalProg.diderot:66.156-157] 
                                  BinOp: ^ @ [evalProg.diderot:66.161-168] 
                                    Var: z @ [evalProg.diderot:66.162-163] 
                                    Lit: 2 @ [evalProg.diderot:66.166-167] 
                              ]
                          BinOp: + @ [evalProg.diderot:66.171-257] 
                            BinOp: * @ [evalProg.diderot:66.171-217] 
                              BinOp: * @ [evalProg.diderot:66.171-183] 
                                BinOp: * @ [evalProg.diderot:66.171-175] 
                                  UnaryOp: unary - @ [evalProg.diderot:66.171-173] 
                                    Lit: 4 @ [evalProg.diderot:66.172-173] 
                                  Var: x @ [evalProg.diderot:66.174-175] 
                                BinOp: ^ @ [evalProg.diderot:66.176-183] 
                                  Var: z @ [evalProg.diderot:66.177-178] 
                                  Lit: 3 @ [evalProg.diderot:66.181-182] 
                              Apply @ [evalProg.diderot:66.184-216] 
                                Var: sin @ [evalProg.diderot:66.184-187] 
                                [
                                  BinOp: + @ [evalProg.diderot:66.188-215] 
                                    BinOp: + @ [evalProg.diderot:66.188-206] 
                                      BinOp: ^ @ [evalProg.diderot:66.188-196] 
                                        Var: x @ [evalProg.diderot:66.189-190] 
                                        Lit: 2 @ [evalProg.diderot:66.193-194] 
                                      BinOp: ^ @ [evalProg.diderot:66.198-206] 
                                        Var: y @ [evalProg.diderot:66.199-200] 
                                        Lit: 2 @ [evalProg.diderot:66.203-204] 
                                    BinOp: ^ @ [evalProg.diderot:66.208-215] 
                                      Var: z @ [evalProg.diderot:66.209-210] 
                                      Lit: 2 @ [evalProg.diderot:66.213-214] 
                                ]
                            BinOp: * @ [evalProg.diderot:66.219-257] 
                              BinOp: * @ [evalProg.diderot:66.219-224] 
                                BinOp: * @ [evalProg.diderot:66.219-222] 
                                  Lit: 4 @ [evalProg.diderot:66.219-220] 
                                  Var: x @ [evalProg.diderot:66.221-222] 
                                Var: z @ [evalProg.diderot:66.223-224] 
                              Apply @ [evalProg.diderot:66.225-257] 
                                Var: cos @ [evalProg.diderot:66.225-228] 
                                [
                                  BinOp: + @ [evalProg.diderot:66.229-256] 
                                    BinOp: + @ [evalProg.diderot:66.229-247] 
                                      BinOp: ^ @ [evalProg.diderot:66.229-237] 
                                        Var: x @ [evalProg.diderot:66.230-231] 
                                        Lit: 2 @ [evalProg.diderot:66.234-235] 
                                      BinOp: ^ @ [evalProg.diderot:66.239-247] 
                                        Var: y @ [evalProg.diderot:66.240-241] 
                                        Lit: 2 @ [evalProg.diderot:66.244-245] 
                                    BinOp: ^ @ [evalProg.diderot:66.249-256] 
                                      Var: z @ [evalProg.diderot:66.250-251] 
                                      Lit: 2 @ [evalProg.diderot:66.254-255] 
                                ]
                        ]
                      Cons @ [evalProg.diderot:66.260-495] 
                        [
                          BinOp: * @ [evalProg.diderot:66.261-308] 
                            BinOp: * @ [evalProg.diderot:66.261-275] 
                              BinOp: * @ [evalProg.diderot:66.261-267] 
                                BinOp: * @ [evalProg.diderot:66.261-265] 
                                  UnaryOp: unary - @ [evalProg.diderot:66.261-263] 
                                    Lit: 4 @ [evalProg.diderot:66.262-263] 
                                  Var: x @ [evalProg.diderot:66.264-265] 
                                Var: y @ [evalProg.diderot:66.266-267] 
                              BinOp: ^ @ [evalProg.diderot:66.268-275] 
                                Var: z @ [evalProg.diderot:66.269-270] 
                                Lit: 2 @ [evalProg.diderot:66.273-274] 
                            Apply @ [evalProg.diderot:66.276-308] 
                              Var: sin @ [evalProg.diderot:66.276-279] 
                              [
                                BinOp: + @ [evalProg.diderot:66.280-307] 
                                  BinOp: + @ [evalProg.diderot:66.280-298] 
                                    BinOp: ^ @ [evalProg.diderot:66.280-288] 
                                      Var: x @ [evalProg.diderot:66.281-282] 
                                      Lit: 2 @ [evalProg.diderot:66.285-286] 
                                    BinOp: ^ @ [evalProg.diderot:66.290-298] 
                                      Var: y @ [evalProg.diderot:66.291-292] 
                                      Lit: 2 @ [evalProg.diderot:66.295-296] 
                                  BinOp: ^ @ [evalProg.diderot:66.300-307] 
                                    Var: z @ [evalProg.diderot:66.301-302] 
                                    Lit: 2 @ [evalProg.diderot:66.305-306] 
                              ]
                          BinOp: + @ [evalProg.diderot:66.310-406] 
                            BinOp: * @ [evalProg.diderot:66.310-362] 
                              BinOp: * @ [evalProg.diderot:66.310-328] 
                                BinOp: * @ [evalProg.diderot:66.310-320] 
                                  UnaryOp: unary - @ [evalProg.diderot:66.310-312] 
                                    Lit: 4 @ [evalProg.diderot:66.311-312] 
                                  BinOp: ^ @ [evalProg.diderot:66.313-320] 
                                    Var: y @ [evalProg.diderot:66.314-315] 
                                    Lit: 2 @ [evalProg.diderot:66.318-319] 
                                BinOp: ^ @ [evalProg.diderot:66.321-328] 
                                  Var: z @ [evalProg.diderot:66.322-323] 
                                  Lit: 2 @ [evalProg.diderot:66.326-327] 
                              Apply @ [evalProg.diderot:66.329-361] 
                                Var: sin @ [evalProg.diderot:66.329-332] 
                                [
                                  BinOp: + @ [evalProg.diderot:66.333-360] 
                                    BinOp: + @ [evalProg.diderot:66.333-351] 
                                      BinOp: ^ @ [evalProg.diderot:66.333-341] 
                                        Var: x @ [evalProg.diderot:66.334-335] 
                                        Lit: 2 @ [evalProg.diderot:66.338-339] 
                                      BinOp: ^ @ [evalProg.diderot:66.343-351] 
                                        Var: y @ [evalProg.diderot:66.344-345] 
                                        Lit: 2 @ [evalProg.diderot:66.348-349] 
                                    BinOp: ^ @ [evalProg.diderot:66.353-360] 
                                      Var: z @ [evalProg.diderot:66.354-355] 
                                      Lit: 2 @ [evalProg.diderot:66.358-359] 
                                ]
                            BinOp: * @ [evalProg.diderot:66.364-406] 
                              BinOp: * @ [evalProg.diderot:66.364-373] 
                                Lit: 2 @ [evalProg.diderot:66.364-365] 
                                BinOp: ^ @ [evalProg.diderot:66.366-373] 
                                  Var: z @ [evalProg.diderot:66.367-368] 
                                  Lit: 2 @ [evalProg.diderot:66.371-372] 
                              Apply @ [evalProg.diderot:66.374-406] 
                                Var: cos @ [evalProg.diderot:66.374-377] 
                                [
                                  BinOp: + @ [evalProg.diderot:66.378-405] 
                                    BinOp: + @ [evalProg.diderot:66.378-396] 
                                      BinOp: ^ @ [evalProg.diderot:66.378-386] 
                                        Var: x @ [evalProg.diderot:66.379-380] 
                                        Lit: 2 @ [evalProg.diderot:66.383-384] 
                                      BinOp: ^ @ [evalProg.diderot:66.388-396] 
                                        Var: y @ [evalProg.diderot:66.389-390] 
                                        Lit: 2 @ [evalProg.diderot:66.393-394] 
                                    BinOp: ^ @ [evalProg.diderot:66.398-405] 
                                      Var: z @ [evalProg.diderot:66.399-400] 
                                      Lit: 2 @ [evalProg.diderot:66.403-404] 
                                ]
                          BinOp: + @ [evalProg.diderot:66.408-494] 
                            BinOp: * @ [evalProg.diderot:66.408-454] 
                              BinOp: * @ [evalProg.diderot:66.408-420] 
                                BinOp: * @ [evalProg.diderot:66.408-412] 
                                  UnaryOp: unary - @ [evalProg.diderot:66.408-410] 
                                    Lit: 4 @ [evalProg.diderot:66.409-410] 
                                  Var: y @ [evalProg.diderot:66.411-412] 
                                BinOp: ^ @ [evalProg.diderot:66.413-420] 
                                  Var: z @ [evalProg.diderot:66.414-415] 
                                  Lit: 3 @ [evalProg.diderot:66.418-419] 
                              Apply @ [evalProg.diderot:66.421-453] 
                                Var: sin @ [evalProg.diderot:66.421-424] 
                                [
                                  BinOp: + @ [evalProg.diderot:66.425-452] 
                                    BinOp: + @ [evalProg.diderot:66.425-443] 
                                      BinOp: ^ @ [evalProg.diderot:66.425-433] 
                                        Var: x @ [evalProg.diderot:66.426-427] 
                                        Lit: 2 @ [evalProg.diderot:66.430-431] 
                                      BinOp: ^ @ [evalProg.diderot:66.435-443] 
                                        Var: y @ [evalProg.diderot:66.436-437] 
                                        Lit: 2 @ [evalProg.diderot:66.440-441] 
                                    BinOp: ^ @ [evalProg.diderot:66.445-452] 
                                      Var: z @ [evalProg.diderot:66.446-447] 
                                      Lit: 2 @ [evalProg.diderot:66.450-451] 
                                ]
                            BinOp: * @ [evalProg.diderot:66.456-494] 
                              BinOp: * @ [evalProg.diderot:66.456-461] 
                                BinOp: * @ [evalProg.diderot:66.456-459] 
                                  Lit: 4 @ [evalProg.diderot:66.456-457] 
                                  Var: y @ [evalProg.diderot:66.458-459] 
                                Var: z @ [evalProg.diderot:66.460-461] 
                              Apply @ [evalProg.diderot:66.462-494] 
                                Var: cos @ [evalProg.diderot:66.462-465] 
                                [
                                  BinOp: + @ [evalProg.diderot:66.466-493] 
                                    BinOp: + @ [evalProg.diderot:66.466-484] 
                                      BinOp: ^ @ [evalProg.diderot:66.466-474] 
                                        Var: x @ [evalProg.diderot:66.467-468] 
                                        Lit: 2 @ [evalProg.diderot:66.471-472] 
                                      BinOp: ^ @ [evalProg.diderot:66.476-484] 
                                        Var: y @ [evalProg.diderot:66.477-478] 
                                        Lit: 2 @ [evalProg.diderot:66.481-482] 
                                    BinOp: ^ @ [evalProg.diderot:66.486-493] 
                                      Var: z @ [evalProg.diderot:66.487-488] 
                                      Lit: 2 @ [evalProg.diderot:66.491-492] 
                                ]
                        ]
                      Cons @ [evalProg.diderot:66.497-801] 
                        [
                          BinOp: + @ [evalProg.diderot:66.498-584] 
                            BinOp: * @ [evalProg.diderot:66.498-544] 
                              BinOp: * @ [evalProg.diderot:66.498-510] 
                                BinOp: * @ [evalProg.diderot:66.498-502] 
                                  UnaryOp: unary - @ [evalProg.diderot:66.498-500] 
                                    Lit: 4 @ [evalProg.diderot:66.499-500] 
                                  Var: x @ [evalProg.diderot:66.501-502] 
                                BinOp: ^ @ [evalProg.diderot:66.503-510] 
                                  Var: z @ [evalProg.diderot:66.504-505] 
                                  Lit: 3 @ [evalProg.diderot:66.508-509] 
                              Apply @ [evalProg.diderot:66.511-543] 
                                Var: sin @ [evalProg.diderot:66.511-514] 
                                [
                                  BinOp: + @ [evalProg.diderot:66.515-542] 
                                    BinOp: + @ [evalProg.diderot:66.515-533] 
                                      BinOp: ^ @ [evalProg.diderot:66.515-523] 
                                        Var: x @ [evalProg.diderot:66.516-517] 
                                        Lit: 2 @ [evalProg.diderot:66.520-521] 
                                      BinOp: ^ @ [evalProg.diderot:66.525-533] 
                                        Var: y @ [evalProg.diderot:66.526-527] 
                                        Lit: 2 @ [evalProg.diderot:66.530-531] 
                                    BinOp: ^ @ [evalProg.diderot:66.535-542] 
                                      Var: z @ [evalProg.diderot:66.536-537] 
                                      Lit: 2 @ [evalProg.diderot:66.540-541] 
                                ]
                            BinOp: * @ [evalProg.diderot:66.546-584] 
                              BinOp: * @ [evalProg.diderot:66.546-551] 
                                BinOp: * @ [evalProg.diderot:66.546-549] 
                                  Lit: 4 @ [evalProg.diderot:66.546-547] 
                                  Var: x @ [evalProg.diderot:66.548-549] 
                                Var: z @ [evalProg.diderot:66.550-551] 
                              Apply @ [evalProg.diderot:66.552-584] 
                                Var: cos @ [evalProg.diderot:66.552-555] 
                                [
                                  BinOp: + @ [evalProg.diderot:66.556-583] 
                                    BinOp: + @ [evalProg.diderot:66.556-574] 
                                      BinOp: ^ @ [evalProg.diderot:66.556-564] 
                                        Var: x @ [evalProg.diderot:66.557-558] 
                                        Lit: 2 @ [evalProg.diderot:66.561-562] 
                                      BinOp: ^ @ [evalProg.diderot:66.566-574] 
                                        Var: y @ [evalProg.diderot:66.567-568] 
                                        Lit: 2 @ [evalProg.diderot:66.571-572] 
                                    BinOp: ^ @ [evalProg.diderot:66.576-583] 
                                      Var: z @ [evalProg.diderot:66.577-578] 
                                      Lit: 2 @ [evalProg.diderot:66.581-582] 
                                ]
                          BinOp: + @ [evalProg.diderot:66.586-672] 
                            BinOp: * @ [evalProg.diderot:66.586-632] 
                              BinOp: * @ [evalProg.diderot:66.586-598] 
                                BinOp: * @ [evalProg.diderot:66.586-590] 
                                  UnaryOp: unary - @ [evalProg.diderot:66.586-588] 
                                    Lit: 4 @ [evalProg.diderot:66.587-588] 
                                  Var: y @ [evalProg.diderot:66.589-590] 
                                BinOp: ^ @ [evalProg.diderot:66.591-598] 
                                  Var: z @ [evalProg.diderot:66.592-593] 
                                  Lit: 3 @ [evalProg.diderot:66.596-597] 
                              Apply @ [evalProg.diderot:66.599-631] 
                                Var: sin @ [evalProg.diderot:66.599-602] 
                                [
                                  BinOp: + @ [evalProg.diderot:66.603-630] 
                                    BinOp: + @ [evalProg.diderot:66.603-621] 
                                      BinOp: ^ @ [evalProg.diderot:66.603-611] 
                                        Var: x @ [evalProg.diderot:66.604-605] 
                                        Lit: 2 @ [evalProg.diderot:66.608-609] 
                                      BinOp: ^ @ [evalProg.diderot:66.613-621] 
                                        Var: y @ [evalProg.diderot:66.614-615] 
                                        Lit: 2 @ [evalProg.diderot:66.618-619] 
                                    BinOp: ^ @ [evalProg.diderot:66.623-630] 
                                      Var: z @ [evalProg.diderot:66.624-625] 
                                      Lit: 2 @ [evalProg.diderot:66.628-629] 
                                ]
                            BinOp: * @ [evalProg.diderot:66.634-672] 
                              BinOp: * @ [evalProg.diderot:66.634-639] 
                                BinOp: * @ [evalProg.diderot:66.634-637] 
                                  Lit: 4 @ [evalProg.diderot:66.634-635] 
                                  Var: y @ [evalProg.diderot:66.636-637] 
                                Var: z @ [evalProg.diderot:66.638-639] 
                              Apply @ [evalProg.diderot:66.640-672] 
                                Var: cos @ [evalProg.diderot:66.640-643] 
                                [
                                  BinOp: + @ [evalProg.diderot:66.644-671] 
                                    BinOp: + @ [evalProg.diderot:66.644-662] 
                                      BinOp: ^ @ [evalProg.diderot:66.644-652] 
                                        Var: x @ [evalProg.diderot:66.645-646] 
                                        Lit: 2 @ [evalProg.diderot:66.649-650] 
                                      BinOp: ^ @ [evalProg.diderot:66.654-662] 
                                        Var: y @ [evalProg.diderot:66.655-656] 
                                        Lit: 2 @ [evalProg.diderot:66.659-660] 
                                    BinOp: ^ @ [evalProg.diderot:66.664-671] 
                                      Var: z @ [evalProg.diderot:66.665-666] 
                                      Lit: 2 @ [evalProg.diderot:66.669-670] 
                                ]
                          BinOp: + @ [evalProg.diderot:66.674-800] 
                            BinOp: + @ [evalProg.diderot:66.674-764] 
                              BinOp: * @ [evalProg.diderot:66.674-718] 
                                BinOp: * @ [evalProg.diderot:66.674-684] 
                                  UnaryOp: unary - @ [evalProg.diderot:66.674-676] 
                                    Lit: 4 @ [evalProg.diderot:66.675-676] 
                                  BinOp: ^ @ [evalProg.diderot:66.677-684] 
                                    Var: z @ [evalProg.diderot:66.678-679] 
                                    Lit: 4 @ [evalProg.diderot:66.682-683] 
                                Apply @ [evalProg.diderot:66.685-717] 
                                  Var: sin @ [evalProg.diderot:66.685-688] 
                                  [
                                    BinOp: + @ [evalProg.diderot:66.689-716] 
                                      BinOp: + @ [evalProg.diderot:66.689-707] 
                                        BinOp: ^ @ [evalProg.diderot:66.689-697] 
                                          Var: x @ [evalProg.diderot:66.690-691] 
                                          Lit: 2 @ [evalProg.diderot:66.694-695] 
                                        BinOp: ^ @ [evalProg.diderot:66.699-707] 
                                          Var: y @ [evalProg.diderot:66.700-701] 
                                          Lit: 2 @ [evalProg.diderot:66.704-705] 
                                      BinOp: ^ @ [evalProg.diderot:66.709-716] 
                                        Var: z @ [evalProg.diderot:66.710-711] 
                                        Lit: 2 @ [evalProg.diderot:66.714-715] 
                                  ]
                              BinOp: * @ [evalProg.diderot:66.720-764] 
                                BinOp: * @ [evalProg.diderot:66.720-730] 
                                  Lit: 10 @ [evalProg.diderot:66.720-722] 
                                  BinOp: ^ @ [evalProg.diderot:66.723-730] 
                                    Var: z @ [evalProg.diderot:66.724-725] 
                                    Lit: 2 @ [evalProg.diderot:66.728-729] 
                                Apply @ [evalProg.diderot:66.731-763] 
                                  Var: cos @ [evalProg.diderot:66.731-734] 
                                  [
                                    BinOp: + @ [evalProg.diderot:66.735-762] 
                                      BinOp: + @ [evalProg.diderot:66.735-753] 
                                        BinOp: ^ @ [evalProg.diderot:66.735-743] 
                                          Var: x @ [evalProg.diderot:66.736-737] 
                                          Lit: 2 @ [evalProg.diderot:66.740-741] 
                                        BinOp: ^ @ [evalProg.diderot:66.745-753] 
                                          Var: y @ [evalProg.diderot:66.746-747] 
                                          Lit: 2 @ [evalProg.diderot:66.750-751] 
                                      BinOp: ^ @ [evalProg.diderot:66.755-762] 
                                        Var: z @ [evalProg.diderot:66.756-757] 
                                        Lit: 2 @ [evalProg.diderot:66.760-761] 
                                  ]
                            BinOp: * @ [evalProg.diderot:66.766-800] 
                              Lit: 2 @ [evalProg.diderot:66.766-767] 
                              Apply @ [evalProg.diderot:66.768-800] 
                                Var: sin @ [evalProg.diderot:66.768-771] 
                                [
                                  BinOp: + @ [evalProg.diderot:66.772-799] 
                                    BinOp: + @ [evalProg.diderot:66.772-790] 
                                      BinOp: ^ @ [evalProg.diderot:66.772-780] 
                                        Var: x @ [evalProg.diderot:66.773-774] 
                                        Lit: 2 @ [evalProg.diderot:66.777-778] 
                                      BinOp: ^ @ [evalProg.diderot:66.782-790] 
                                        Var: y @ [evalProg.diderot:66.783-784] 
                                        Lit: 2 @ [evalProg.diderot:66.787-788] 
                                    BinOp: ^ @ [evalProg.diderot:66.792-799] 
                                      Var: z @ [evalProg.diderot:66.793-794] 
                                      Lit: 2 @ [evalProg.diderot:66.797-798] 
                                ]
                        ]
                    ]
              Return @ [evalProg.diderot:68.3-69.0] 
                Var: hess @ [evalProg.diderot:68.10-14] 
            ]
      Func: fStep @ [evalProg.diderot:71.1-85.1] 
        Tensor @ [evalProg.diderot:71.10-15] 
          [
            Lit: 3 @ [evalProg.diderot:71.10-15] 
          ]
        [
          Param: s @ [evalProg.diderot:71.21-27] 
            Tensor @ [evalProg.diderot:71.21-26] 
              [
                Lit: 3 @ [evalProg.diderot:71.21-26] 
              ]
        ]
        Stmt @ [evalProg.diderot:71.1-85.1] 
          Block @ [evalProg.diderot:71.29-84.0] 
            [
              Decl @ [evalProg.diderot:71.29-84.0] 
                Decl: g= @ [evalProg.diderot:72.3-73.0] 
                  Apply @ [evalProg.diderot:72.12-19] 
                    Var: grad @ [evalProg.diderot:72.12-16] 
                    [
                      Var: s @ [evalProg.diderot:72.17-18] 
                    ]
              Decl @ [evalProg.diderot:71.29-84.0] 
                Decl: H= @ [evalProg.diderot:73.3-74.0] 
                  Apply @ [evalProg.diderot:73.19-26] 
                    Var: hess @ [evalProg.diderot:73.19-23] 
                    [
                      Var: s @ [evalProg.diderot:73.24-25] 
                    ]
              Decl @ [evalProg.diderot:71.29-84.0] 
                Decl: E= @ [evalProg.diderot:74.3-75.0] 
                  Apply @ [evalProg.diderot:74.15-23] 
                    Var: evecs @ [evalProg.diderot:74.15-20] 
                    [
                      Var: H @ [evalProg.diderot:74.21-22] 
                    ]
              Decl @ [evalProg.diderot:71.29-84.0] 
                Decl: L= @ [evalProg.diderot:75.3-76.0] 
                  Apply @ [evalProg.diderot:75.15-23] 
                    Var: evals @ [evalProg.diderot:75.15-20] 
                    [
                      Var: H @ [evalProg.diderot:75.21-22] 
                    ]
              Decl @ [evalProg.diderot:71.29-84.0] 
                Decl: up= @ [evalProg.diderot:76.3-77.0] 
                  BinOp: • @ [evalProg.diderot:76.14-39] 
                    BinOp: ⊗ @ [evalProg.diderot:76.14-35] 
                      BinOp: * @ [evalProg.diderot:76.14-28] 
                        UnaryOp: unary - @ [evalProg.diderot:76.14-23] 
                          BinOp: / @ [evalProg.diderot:76.16-22] 
                            Lit: 1 @ [evalProg.diderot:76.16-17] 
                            Subscript @ [evalProg.diderot:76.18-22] 
                              Var: L @ [evalProg.diderot:76.18-19] 
                              [
                                Lit: 2 @ [evalProg.diderot:76.20-21] 
                              ]
                        Subscript @ [evalProg.diderot:76.24-28] 
                          Var: E @ [evalProg.diderot:76.24-25] 
                          [
                            Lit: 2 @ [evalProg.diderot:76.26-27] 
                          ]
                      Subscript @ [evalProg.diderot:76.31-35] 
                        Var: E @ [evalProg.diderot:76.31-32] 
                        [
                          Lit: 2 @ [evalProg.diderot:76.33-34] 
                        ]
                    Var: g @ [evalProg.diderot:76.38-39] 
              IfThen @ [evalProg.diderot:77.3-81.3] 
                OrElse @ [evalProg.diderot:77.6-66] 
                  UnaryOp: ! @ [evalProg.diderot:77.6-24] 
                    BinOp: == @ [evalProg.diderot:77.8-22] 
                      Subscript @ [evalProg.diderot:77.8-13] 
                        Var: up @ [evalProg.diderot:77.8-10] 
                        [
                          Lit: 0 @ [evalProg.diderot:77.11-12] 
                        ]
                      Subscript @ [evalProg.diderot:77.17-22] 
                        Var: up @ [evalProg.diderot:77.17-19] 
                        [
                          Lit: 0 @ [evalProg.diderot:77.20-21] 
                        ]
                  OrElse @ [evalProg.diderot:77.24-66] 
                    UnaryOp: ! @ [evalProg.diderot:77.28-46] 
                      BinOp: == @ [evalProg.diderot:77.30-44] 
                        Subscript @ [evalProg.diderot:77.30-35] 
                          Var: up @ [evalProg.diderot:77.30-32] 
                          [
                            Lit: 1 @ [evalProg.diderot:77.33-34] 
                          ]
                        Subscript @ [evalProg.diderot:77.39-44] 
                          Var: up @ [evalProg.diderot:77.39-41] 
                          [
                            Lit: 1 @ [evalProg.diderot:77.42-43] 
                          ]
                    UnaryOp: ! @ [evalProg.diderot:77.49-66] 
                      BinOp: == @ [evalProg.diderot:77.51-65] 
                        Subscript @ [evalProg.diderot:77.51-56] 
                          Var: up @ [evalProg.diderot:77.51-53] 
                          [
                            Lit: 2 @ [evalProg.diderot:77.54-55] 
                          ]
                        Subscript @ [evalProg.diderot:77.60-65] 
                          Var: up @ [evalProg.diderot:77.60-62] 
                          [
                            Lit: 2 @ [evalProg.diderot:77.63-64] 
                          ]
                Return @ [evalProg.diderot:78.5-79.0] 
                  Cons @ [evalProg.diderot:78.12-27] 
                    [
                      Lit: +inf @ [evalProg.diderot:78.13-16] 
                      Lit: +inf @ [evalProg.diderot:78.18-21] 
                      Lit: +inf @ [evalProg.diderot:78.23-26] 
                    ]
              Return @ [evalProg.diderot:81.3-82.0] 
                Var: up @ [evalProg.diderot:81.10-12] 
            ]
      Func: posNanCheck @ [evalProg.diderot:85.1-89.1] 
        Bool @ [evalProg.diderot:85.10-15] 
        [
          Param: up @ [evalProg.diderot:85.27-34] 
            Tensor @ [evalProg.diderot:85.27-32] 
              [
                Lit: 3 @ [evalProg.diderot:85.27-32] 
              ]
        ]
        Stmt @ [evalProg.diderot:85.1-89.1] 
          Return @ [evalProg.diderot:86.3-87.0] 
            OrElse @ [evalProg.diderot:86.11-71] 
              UnaryOp: ! @ [evalProg.diderot:86.11-29] 
                BinOp: == @ [evalProg.diderot:86.13-27] 
                  Subscript @ [evalProg.diderot:86.13-18] 
                    Var: up @ [evalProg.diderot:86.13-15] 
                    [
                      Lit: 0 @ [evalProg.diderot:86.16-17] 
                    ]
                  Subscript @ [evalProg.diderot:86.22-27] 
                    Var: up @ [evalProg.diderot:86.22-24] 
                    [
                      Lit: 0 @ [evalProg.diderot:86.25-26] 
                    ]
              OrElse @ [evalProg.diderot:86.29-71] 
                UnaryOp: ! @ [evalProg.diderot:86.33-51] 
                  BinOp: == @ [evalProg.diderot:86.35-49] 
                    Subscript @ [evalProg.diderot:86.35-40] 
                      Var: up @ [evalProg.diderot:86.35-37] 
                      [
                        Lit: 1 @ [evalProg.diderot:86.38-39] 
                      ]
                    Subscript @ [evalProg.diderot:86.44-49] 
                      Var: up @ [evalProg.diderot:86.44-46] 
                      [
                        Lit: 1 @ [evalProg.diderot:86.47-48] 
                      ]
                UnaryOp: ! @ [evalProg.diderot:86.54-71] 
                  BinOp: == @ [evalProg.diderot:86.56-70] 
                    Subscript @ [evalProg.diderot:86.56-61] 
                      Var: up @ [evalProg.diderot:86.56-58] 
                      [
                        Lit: 2 @ [evalProg.diderot:86.59-60] 
                      ]
                    Subscript @ [evalProg.diderot:86.65-70] 
                      Var: up @ [evalProg.diderot:86.65-67] 
                      [
                        Lit: 2 @ [evalProg.diderot:86.68-69] 
                      ]
      Func: fPerp @ [evalProg.diderot:89.1-101.1] 
        Tensor @ [evalProg.diderot:89.10-21] 
          [
            Lit: 3 @ [evalProg.diderot:89.17-18] 
            Lit: 3 @ [evalProg.diderot:89.19-20] 
          ]
        [
          Param: s @ [evalProg.diderot:89.28-34] 
            Tensor @ [evalProg.diderot:89.28-33] 
              [
                Lit: 3 @ [evalProg.diderot:89.28-33] 
              ]
        ]
        Stmt @ [evalProg.diderot:89.1-101.1] 
          Block @ [evalProg.diderot:89.36-100.0] 
            [
              Decl @ [evalProg.diderot:89.36-100.0] 
                Decl: g= @ [evalProg.diderot:90.3-91.0] 
                  Apply @ [evalProg.diderot:90.12-19] 
                    Var: grad @ [evalProg.diderot:90.12-16] 
                    [
                      Var: s @ [evalProg.diderot:90.17-18] 
                    ]
              Decl @ [evalProg.diderot:89.36-100.0] 
                Decl: H= @ [evalProg.diderot:91.3-92.0] 
                  Apply @ [evalProg.diderot:91.19-26] 
                    Var: hess @ [evalProg.diderot:91.19-23] 
                    [
                      Var: s @ [evalProg.diderot:91.24-25] 
                    ]
              Decl @ [evalProg.diderot:89.36-100.0] 
                Decl: E2= @ [evalProg.diderot:92.3-93.0] 
                  Subscript @ [evalProg.diderot:92.13-24] 
                    Apply @ [evalProg.diderot:92.13-24] 
                      Var: evecs @ [evalProg.diderot:92.13-18] 
                      [
                        Var: H @ [evalProg.diderot:92.19-20] 
                      ]
                    [
                      Lit: 2 @ [evalProg.diderot:92.22-23] 
                    ]
              Decl @ [evalProg.diderot:89.36-100.0] 
                Decl: m= @ [evalProg.diderot:93.3-94.0] 
                  BinOp: - @ [evalProg.diderot:93.13-34] 
                    Id @ [evalProg.diderot:93.13-24] 
                      Lit: 3 @ [evalProg.diderot:93.22-23] 
                    BinOp: ⊗ @ [evalProg.diderot:93.27-34] 
                      Var: E2 @ [evalProg.diderot:93.27-29] 
                      Var: E2 @ [evalProg.diderot:93.32-34] 
              Decl @ [evalProg.diderot:89.36-100.0] 
                Decl: t= @ [evalProg.diderot:94.3-95.0] 
                  BinOp: : @ [evalProg.diderot:94.12-17] 
                    Var: m @ [evalProg.diderot:94.12-13] 
                    Var: m @ [evalProg.diderot:94.16-17] 
              IfThen @ [evalProg.diderot:95.3-98.3] 
                UnaryOp: ! @ [evalProg.diderot:95.6-15] 
                  BinOp: == @ [evalProg.diderot:95.8-14] 
                    Var: t @ [evalProg.diderot:95.8-9] 
                    Var: t @ [evalProg.diderot:95.13-14] 
                Return @ [evalProg.diderot:96.5-97.0] 
                  Zero @ [evalProg.diderot:96.12-22] 
                    [
                      Lit: 3 @ [evalProg.diderot:96.18-19] 
                      Lit: 3 @ [evalProg.diderot:96.20-21] 
                    ]
              Return @ [evalProg.diderot:98.3-99.0] 
                Var: m @ [evalProg.diderot:98.10-11] 
            ]
      Func: fStrength @ [evalProg.diderot:101.1-108.1] 
        Tensor @ [evalProg.diderot:101.10-15] 
          [ ]
        [
          Param: s @ [evalProg.diderot:101.25-31] 
            Tensor @ [evalProg.diderot:101.25-30] 
              [
                Lit: 3 @ [evalProg.diderot:101.25-30] 
              ]
        ]
        Stmt @ [evalProg.diderot:101.1-108.1] 
          Block @ [evalProg.diderot:101.33-107.0] 
            [
              Decl @ [evalProg.diderot:101.33-107.0] 
                Decl: g= @ [evalProg.diderot:102.3-103.0] 
                  Apply @ [evalProg.diderot:102.12-19] 
                    Var: grad @ [evalProg.diderot:102.12-16] 
                    [
                      Var: s @ [evalProg.diderot:102.17-18] 
                    ]
              Decl @ [evalProg.diderot:101.33-107.0] 
                Decl: H= @ [evalProg.diderot:103.3-104.0] 
                  Apply @ [evalProg.diderot:103.19-26] 
                    Var: hess @ [evalProg.diderot:103.19-23] 
                    [
                      Var: s @ [evalProg.diderot:103.24-25] 
                    ]
              Decl @ [evalProg.diderot:101.33-107.0] 
                Decl: str= @ [evalProg.diderot:104.3-105.0] 
                  BinOp: / @ [evalProg.diderot:104.14-40] 
                    UnaryOp: unary - @ [evalProg.diderot:104.14-26] 
                      Subscript @ [evalProg.diderot:104.15-26] 
                        Apply @ [evalProg.diderot:104.15-26] 
                          Var: evals @ [evalProg.diderot:104.15-20] 
                          [
                            Var: H @ [evalProg.diderot:104.21-22] 
                          ]
                        [
                          Lit: 2 @ [evalProg.diderot:104.24-25] 
                        ]
                    BinOp: + @ [evalProg.diderot:104.28-39] 
                      Var: fBias @ [evalProg.diderot:104.28-33] 
                      UnaryOp: |()| @ [evalProg.diderot:104.36-39] 
                        Var: g @ [evalProg.diderot:104.37-38] 
              Return @ [evalProg.diderot:105.3-106.0] 
                Var: str @ [evalProg.diderot:105.10-13] 
            ]
      Func: fMask @ [evalProg.diderot:108.1-109.0] 
        Tensor @ [evalProg.diderot:108.10-15] 
          [ ]
        [
          Param: x @ [evalProg.diderot:108.21-27] 
            Tensor @ [evalProg.diderot:108.21-26] 
              [
                Lit: 3 @ [evalProg.diderot:108.21-26] 
              ]
        ]
        Expr @ [evalProg.diderot:108.1-109.0] 
          Lit: 0.e0 @ [evalProg.diderot:108.31-34] 
      Func: fTest @ [evalProg.diderot:109.1-110.0] 
        Bool @ [evalProg.diderot:109.10-15] 
        [
          Param: x @ [evalProg.diderot:109.21-27] 
            Tensor @ [evalProg.diderot:109.21-26] 
              [
                Lit: 3 @ [evalProg.diderot:109.21-26] 
              ]
        ]
        Expr @ [evalProg.diderot:109.1-110.0] 
          Lit: true @ [evalProg.diderot:109.31-35] 
      Func: posTest @ [evalProg.diderot:111.1-115.19] 
        Bool @ [evalProg.diderot:111.10-15] 
        [
          Param: x @ [evalProg.diderot:111.23-29] 
            Tensor @ [evalProg.diderot:111.23-28] 
              [
                Lit: 3 @ [evalProg.diderot:111.23-28] 
              ]
        ]
        Expr @ [evalProg.diderot:111.1-115.19] 
          AndAlso @ [evalProg.diderot:112.4-115.17] 
            Apply @ [evalProg.diderot:112.4-17] 
              Var: insideTest @ [evalProg.diderot:112.4-14] 
              [
                Var: x @ [evalProg.diderot:112.15-16] 
              ]
            AndAlso @ [evalProg.diderot:113.6-115.17] 
              BinOp: > @ [evalProg.diderot:113.9-114.6] 
                Apply @ [evalProg.diderot:113.9-21] 
                  Var: fStrength @ [evalProg.diderot:113.9-18] 
                  [
                    Var: x @ [evalProg.diderot:113.19-20] 
                  ]
                Var: fStrTh @ [evalProg.diderot:113.24-30] 
              AndAlso @ [evalProg.diderot:114.6-115.17] 
                BinOp: >= @ [evalProg.diderot:114.9-115.6] 
                  Apply @ [evalProg.diderot:114.9-17] 
                    Var: fMask @ [evalProg.diderot:114.9-14] 
                    [
                      Var: x @ [evalProg.diderot:114.15-16] 
                    ]
                  Var: fMaskTh @ [evalProg.diderot:114.21-28] 
                Apply @ [evalProg.diderot:115.9-17] 
                  Var: fTest @ [evalProg.diderot:115.9-14] 
                  [
                    Var: x @ [evalProg.diderot:115.15-16] 
                  ]
      Var @ [evalProg.diderot:118.1-119.0] 
        Decl: nnmin= @ [evalProg.diderot:118.1-119.0] 
          Cond @ [evalProg.diderot:118.13-54] 
            Lit: 6 @ [evalProg.diderot:118.13-14] 
            BinOp: == @ [evalProg.diderot:118.19-26] 
              Lit: 2 @ [evalProg.diderot:118.19-20] 
              Var: fDim @ [evalProg.diderot:118.22-26] 
            Cond @ [evalProg.diderot:118.33-54] 
              Lit: 2 @ [evalProg.diderot:118.33-34] 
              BinOp: == @ [evalProg.diderot:118.39-46] 
                Lit: 1 @ [evalProg.diderot:118.39-40] 
                Var: fDim @ [evalProg.diderot:118.42-46] 
              Lit: 0 @ [evalProg.diderot:118.53-54] 
      Var @ [evalProg.diderot:119.1-120.0] 
        Decl: nnmax= @ [evalProg.diderot:119.1-120.0] 
          Cond @ [evalProg.diderot:119.13-54] 
            Lit: 8 @ [evalProg.diderot:119.13-14] 
            BinOp: == @ [evalProg.diderot:119.19-26] 
              Lit: 2 @ [evalProg.diderot:119.19-20] 
              Var: fDim @ [evalProg.diderot:119.22-26] 
            Cond @ [evalProg.diderot:119.33-54] 
              Lit: 3 @ [evalProg.diderot:119.33-34] 
              BinOp: == @ [evalProg.diderot:119.39-46] 
                Lit: 1 @ [evalProg.diderot:119.39-40] 
                Var: fDim @ [evalProg.diderot:119.42-46] 
              Lit: 0 @ [evalProg.diderot:119.53-54] 
      Func: phi @ [evalProg.diderot:126.1-134.1] 
        Tensor @ [evalProg.diderot:126.10-15] 
          [ ]
        [
          Param: r @ [evalProg.diderot:126.19-25] 
            Tensor @ [evalProg.diderot:126.19-24] 
              [ ]
        ]
        Stmt @ [evalProg.diderot:126.1-134.1] 
          Block @ [evalProg.diderot:126.27-134.0] 
            [
              Decl @ [evalProg.diderot:126.27-134.0] 
                Decl: s= @ [evalProg.diderot:127.3-128.0] 
                  BinOp: - @ [evalProg.diderot:127.10-17] 
                    Var: r @ [evalProg.diderot:127.10-11] 
                    BinOp: / @ [evalProg.diderot:127.12-17] 
                      Lit: 0.2e1 @ [evalProg.diderot:127.12-15] 
                      Lit: 3 @ [evalProg.diderot:127.16-17] 
              Return @ [evalProg.diderot:128.3-133.0] 
                Cond @ [evalProg.diderot:129.5-132.18] 
                  BinOp: + @ [evalProg.diderot:129.5-130.3] 
                    Lit: 1 @ [evalProg.diderot:129.5-6] 
                    BinOp: * @ [evalProg.diderot:129.9-130.3] 
                      Var: r @ [evalProg.diderot:129.9-10] 
                      BinOp: + @ [evalProg.diderot:129.12-61] 
                        UnaryOp: unary - @ [evalProg.diderot:129.12-19] 
                          Lit: 0.5646e1 @ [evalProg.diderot:129.13-18] 
                        BinOp: * @ [evalProg.diderot:129.21-61] 
                          Var: r @ [evalProg.diderot:129.21-22] 
                          BinOp: + @ [evalProg.diderot:129.24-60] 
                            Lit: 0.119835e2 @ [evalProg.diderot:129.24-31] 
                            BinOp: * @ [evalProg.diderot:129.34-60] 
                              Var: r @ [evalProg.diderot:129.34-35] 
                              BinOp: + @ [evalProg.diderot:129.37-59] 
                                UnaryOp: unary - @ [evalProg.diderot:129.37-46] 
                                  Lit: 0.113535e2 @ [evalProg.diderot:129.38-45] 
                                BinOp: * @ [evalProg.diderot:129.48-59] 
                                  Lit: 0.40550625e1 @ [evalProg.diderot:129.48-57] 
                                  Var: r @ [evalProg.diderot:129.58-59] 
                  BinOp: < @ [evalProg.diderot:130.6-16] 
                    Var: r @ [evalProg.diderot:130.6-7] 
                    BinOp: / @ [evalProg.diderot:130.10-16] 
                      Lit: 0.2e1 @ [evalProg.diderot:130.10-13] 
                      Lit: 3 @ [evalProg.diderot:130.14-15] 
                  Cond @ [evalProg.diderot:131.5-132.18] 
                    BinOp: + @ [evalProg.diderot:131.5-132.3] 
                      UnaryOp: unary - @ [evalProg.diderot:131.5-12] 
                        Lit: 0.1e-2 @ [evalProg.diderot:131.6-11] 
                      BinOp: * @ [evalProg.diderot:131.14-132.3] 
                        BinOp: * @ [evalProg.diderot:131.15-57] 
                          BinOp: + @ [evalProg.diderot:131.16-54] 
                            Lit: 0.9e-1 @ [evalProg.diderot:131.16-20] 
                            BinOp: * @ [evalProg.diderot:131.23-54] 
                              BinOp: + @ [evalProg.diderot:131.24-51] 
                                UnaryOp: unary - @ [evalProg.diderot:131.24-30] 
                                  Lit: 0.54e0 @ [evalProg.diderot:131.25-29] 
                                BinOp: * @ [evalProg.diderot:131.32-51] 
                                  BinOp: - @ [evalProg.diderot:131.33-48] 
                                    Lit: 0.1215e1 @ [evalProg.diderot:131.33-38] 
                                    BinOp: * @ [evalProg.diderot:131.41-48] 
                                      Lit: 0.972e0 @ [evalProg.diderot:131.41-46] 
                                      Var: s @ [evalProg.diderot:131.47-48] 
                                  Var: s @ [evalProg.diderot:131.50-51] 
                              Var: s @ [evalProg.diderot:131.53-54] 
                          Var: s @ [evalProg.diderot:131.56-57] 
                        Var: s @ [evalProg.diderot:131.59-132.0] 
                    BinOp: < @ [evalProg.diderot:132.6-12] 
                      Var: r @ [evalProg.diderot:132.6-7] 
                      Lit: 1 @ [evalProg.diderot:132.10-11] 
                    Lit: 0 @ [evalProg.diderot:132.17-18] 
            ]
      Func: phi' @ [evalProg.diderot:134.1-142.1] 
        Tensor @ [evalProg.diderot:134.10-15] 
          [ ]
        [
          Param: r @ [evalProg.diderot:134.20-26] 
            Tensor @ [evalProg.diderot:134.20-25] 
              [ ]
        ]
        Stmt @ [evalProg.diderot:134.1-142.1] 
          Block @ [evalProg.diderot:134.28-142.0] 
            [
              Decl @ [evalProg.diderot:134.28-142.0] 
                Decl: t= @ [evalProg.diderot:135.3-136.0] 
                  BinOp: - @ [evalProg.diderot:135.10-15] 
                    BinOp: * @ [evalProg.diderot:135.10-13] 
                      Lit: 3 @ [evalProg.diderot:135.10-11] 
                      Var: r @ [evalProg.diderot:135.12-13] 
                    Lit: 2 @ [evalProg.diderot:135.14-15] 
              Return @ [evalProg.diderot:136.3-141.0] 
                Cond @ [evalProg.diderot:137.5-140.18] 
                  BinOp: + @ [evalProg.diderot:137.5-138.3] 
                    UnaryOp: unary - @ [evalProg.diderot:137.5-12] 
                      Lit: 0.5646e1 @ [evalProg.diderot:137.6-11] 
                    BinOp: * @ [evalProg.diderot:137.14-138.3] 
                      Var: r @ [evalProg.diderot:137.14-15] 
                      BinOp: + @ [evalProg.diderot:137.17-51] 
                        Lit: 0.23967e2 @ [evalProg.diderot:137.17-23] 
                        BinOp: * @ [evalProg.diderot:137.26-51] 
                          Var: r @ [evalProg.diderot:137.26-27] 
                          BinOp: + @ [evalProg.diderot:137.29-50] 
                            UnaryOp: unary - @ [evalProg.diderot:137.29-38] 
                              Lit: 0.340605e2 @ [evalProg.diderot:137.30-37] 
                            BinOp: * @ [evalProg.diderot:137.40-50] 
                              Lit: 0.1622025e2 @ [evalProg.diderot:137.40-48] 
                              Var: r @ [evalProg.diderot:137.49-50] 
                  BinOp: < @ [evalProg.diderot:138.6-16] 
                    Var: r @ [evalProg.diderot:138.6-7] 
                    BinOp: / @ [evalProg.diderot:138.10-16] 
                      Lit: 0.2e1 @ [evalProg.diderot:138.10-13] 
                      Lit: 3 @ [evalProg.diderot:138.14-15] 
                  Cond @ [evalProg.diderot:139.5-140.18] 
                    BinOp: * @ [evalProg.diderot:139.5-140.3] 
                      BinOp: * @ [evalProg.diderot:139.5-20] 
                        Lit: 0.1234567901e-1 @ [evalProg.diderot:139.5-18] 
                        Var: t @ [evalProg.diderot:139.19-20] 
                      BinOp: + @ [evalProg.diderot:139.22-60] 
                        Lit: 0.486e1 @ [evalProg.diderot:139.22-26] 
                        BinOp: * @ [evalProg.diderot:139.29-60] 
                          Var: t @ [evalProg.diderot:139.29-30] 
                          BinOp: + @ [evalProg.diderot:139.32-59] 
                            UnaryOp: unary - @ [evalProg.diderot:139.32-39] 
                              Lit: 0.1458e2 @ [evalProg.diderot:139.33-38] 
                            BinOp: * @ [evalProg.diderot:139.41-59] 
                              Var: t @ [evalProg.diderot:139.41-42] 
                              BinOp: - @ [evalProg.diderot:139.44-58] 
                                Lit: 0.1458e2 @ [evalProg.diderot:139.44-49] 
                                BinOp: * @ [evalProg.diderot:139.52-58] 
                                  Lit: 0.486e1 @ [evalProg.diderot:139.52-56] 
                                  Var: t @ [evalProg.diderot:139.57-58] 
                    BinOp: < @ [evalProg.diderot:140.6-12] 
                      Var: r @ [evalProg.diderot:140.6-7] 
                      Lit: 1 @ [evalProg.diderot:140.10-11] 
                    Lit: 0 @ [evalProg.diderot:140.17-18] 
            ]
      Var @ [evalProg.diderot:142.1-25] 
        Decl: phiWellRad= @ [evalProg.diderot:142.1-25] 
          BinOp: / @ [evalProg.diderot:142.19-24] 
            Lit: 2 @ [evalProg.diderot:142.19-20] 
            Lit: 0.3e1 @ [evalProg.diderot:142.21-24] 
      Var @ [evalProg.diderot:143.1-28] 
        Decl: rad= @ [evalProg.diderot:143.1-28] 
          BinOp: / @ [evalProg.diderot:143.12-27] 
            Var: tipd @ [evalProg.diderot:143.12-16] 
            Var: phiWellRad @ [evalProg.diderot:143.17-27] 
      Func: enr @ [evalProg.diderot:144.1-42] 
        Tensor @ [evalProg.diderot:144.10-15] 
          [ ]
        [
          Param: x @ [evalProg.diderot:144.19-25] 
            Tensor @ [evalProg.diderot:144.19-24] 
              [
                Lit: 3 @ [evalProg.diderot:144.19-24] 
              ]
        ]
        Expr @ [evalProg.diderot:144.1-42] 
          Apply @ [evalProg.diderot:144.29-41] 
            Var: phi @ [evalProg.diderot:144.29-32] 
            [
              BinOp: / @ [evalProg.diderot:144.33-40] 
                UnaryOp: |()| @ [evalProg.diderot:144.33-36] 
                  Var: x @ [evalProg.diderot:144.34-35] 
                Var: rad @ [evalProg.diderot:144.37-40] 
            ]
      Func: frc @ [evalProg.diderot:145.1-61] 
        Tensor @ [evalProg.diderot:145.10-15] 
          [
            Lit: 3 @ [evalProg.diderot:145.10-15] 
          ]
        [
          Param: x @ [evalProg.diderot:145.19-25] 
            Tensor @ [evalProg.diderot:145.19-24] 
              [
                Lit: 3 @ [evalProg.diderot:145.19-24] 
              ]
        ]
        Expr @ [evalProg.diderot:145.1-61] 
          BinOp: / @ [evalProg.diderot:145.29-60] 
            BinOp: * @ [evalProg.diderot:145.29-56] 
              BinOp: * @ [evalProg.diderot:145.29-53] 
                Apply @ [evalProg.diderot:145.29-42] 
                  Var: phi' @ [evalProg.diderot:145.29-33] 
                  [
                    BinOp: / @ [evalProg.diderot:145.34-41] 
                      UnaryOp: |()| @ [evalProg.diderot:145.34-37] 
                        Var: x @ [evalProg.diderot:145.35-36] 
                      Var: rad @ [evalProg.diderot:145.38-41] 
                  ]
                BinOp: / @ [evalProg.diderot:145.46-51] 
                  Lit: 1 @ [evalProg.diderot:145.46-47] 
                  Var: rad @ [evalProg.diderot:145.48-51] 
              Var: x @ [evalProg.diderot:145.55-56] 
            UnaryOp: |()| @ [evalProg.diderot:145.57-60] 
              Var: x @ [evalProg.diderot:145.58-59] 
      Var @ [evalProg.diderot:148.1-149.0] 
        Decl: pchist= @ [evalProg.diderot:148.1-149.0] 
          BinOp: ^ @ [evalProg.diderot:148.15-33] 
            Var: hist @ [evalProg.diderot:148.15-19] 
            BinOp: / @ [evalProg.diderot:148.21-32] 
              Lit: 0.1e1 @ [evalProg.diderot:148.21-24] 
              BinOp: * @ [evalProg.diderot:148.26-31] 
                Lit: 2 @ [evalProg.diderot:148.26-27] 
                Var: pcp @ [evalProg.diderot:148.28-31] 
      Var @ [evalProg.diderot:150.1-14] 
        Decl: iter= @ [evalProg.diderot:150.1-14] 
          Lit: 0 @ [evalProg.diderot:150.12-13] 
      Var @ [evalProg.diderot:151.1-14] 
        Decl: rpc= @ [evalProg.diderot:151.1-14] 
          Lit: 1 @ [evalProg.diderot:151.12-13] 
      Var @ [evalProg.diderot:152.1-18] 
        Decl: popLast= @ [evalProg.diderot:152.1-18] 
          UnaryOp: unary - @ [evalProg.diderot:152.15-17] 
            Lit: 1 @ [evalProg.diderot:152.16-17] 
      Func: urnd @ [evalProg.diderot:157.1-166.1] 
        Tensor @ [evalProg.diderot:157.10-15] 
          [ ]
        [
          Param: x @ [evalProg.diderot:157.20-26] 
            Tensor @ [evalProg.diderot:157.20-25] 
              [ ]
        ]
        Stmt @ [evalProg.diderot:157.1-166.1] 
          Block @ [evalProg.diderot:157.28-164.0] 
            [
              IfThen @ [evalProg.diderot:158.3-159.3] 
                BinOp: == @ [evalProg.diderot:158.7-11] 
                  Var: x @ [evalProg.diderot:158.7-8] 
                  Lit: 0 @ [evalProg.diderot:158.10-11] 
                Return @ [evalProg.diderot:158.13-159.0] 
                  Lit: 0 @ [evalProg.diderot:158.20-21] 
              Decl @ [evalProg.diderot:157.28-164.0] 
                Decl: l2= @ [evalProg.diderot:159.3-160.0] 
                  Apply @ [evalProg.diderot:159.13-22] 
                    Var: log2 @ [evalProg.diderot:159.13-17] 
                    [
                      UnaryOp: |()| @ [evalProg.diderot:159.18-21] 
                        Var: x @ [evalProg.diderot:159.19-20] 
                    ]
              Decl @ [evalProg.diderot:157.28-164.0] 
                Decl: frxp= @ [evalProg.diderot:160.3-34] 
                  BinOp: ^ @ [evalProg.diderot:160.15-33] 
                    Lit: 2 @ [evalProg.diderot:160.15-16] 
                    BinOp: - @ [evalProg.diderot:160.18-32] 
                      BinOp: - @ [evalProg.diderot:160.18-30] 
                        Var: l2 @ [evalProg.diderot:160.18-20] 
                        Apply @ [evalProg.diderot:160.21-30] 
                          Var: floor @ [evalProg.diderot:160.21-26] 
                          [
                            Var: l2 @ [evalProg.diderot:160.27-29] 
                          ]
                      Lit: 1 @ [evalProg.diderot:160.31-32] 
              Return @ [evalProg.diderot:162.3-163.0] 
                Apply @ [evalProg.diderot:162.10-39] 
                  Var: fmod @ [evalProg.diderot:162.10-14] 
                  [
                    BinOp: * @ [evalProg.diderot:162.15-35] 
                      BinOp: + @ [evalProg.diderot:162.16-29] 
                        BinOp: ^ @ [evalProg.diderot:162.16-21] 
                          Lit: 2 @ [evalProg.diderot:162.16-17] 
                          Lit: 20 @ [evalProg.diderot:162.18-20] 
                        BinOp: * @ [evalProg.diderot:162.23-29] 
                          Lit: 2 @ [evalProg.diderot:162.23-24] 
                          Var: iter @ [evalProg.diderot:162.25-29] 
                      Var: frxp @ [evalProg.diderot:162.31-35] 
                    Lit: 1 @ [evalProg.diderot:162.37-38] 
                  ]
            ]
      Func: v3rnd @ [evalProg.diderot:166.1-168.0] 
        Tensor @ [evalProg.diderot:166.10-15] 
          [ ]
        [
          Param: v @ [evalProg.diderot:166.21-27] 
            Tensor @ [evalProg.diderot:166.21-26] 
              [
                Lit: 3 @ [evalProg.diderot:166.21-26] 
              ]
        ]
        Expr @ [evalProg.diderot:166.1-168.0] 
          Apply @ [evalProg.diderot:167.3-48] 
            Var: fmod @ [evalProg.diderot:167.3-7] 
            [
              BinOp: + @ [evalProg.diderot:167.8-44] 
                BinOp: + @ [evalProg.diderot:167.8-32] 
                  Apply @ [evalProg.diderot:167.8-18] 
                    Var: urnd @ [evalProg.diderot:167.8-12] 
                    [
                      Subscript @ [evalProg.diderot:167.13-17] 
                        Var: v @ [evalProg.diderot:167.13-14] 
                        [
                          Lit: 0 @ [evalProg.diderot:167.15-16] 
                        ]
                    ]
                  Apply @ [evalProg.diderot:167.21-31] 
                    Var: urnd @ [evalProg.diderot:167.21-25] 
                    [
                      Subscript @ [evalProg.diderot:167.26-30] 
                        Var: v @ [evalProg.diderot:167.26-27] 
                        [
                          Lit: 1 @ [evalProg.diderot:167.28-29] 
                        ]
                    ]
                Apply @ [evalProg.diderot:167.34-44] 
                  Var: urnd @ [evalProg.diderot:167.34-38] 
                  [
                    Subscript @ [evalProg.diderot:167.39-43] 
                      Var: v @ [evalProg.diderot:167.39-40] 
                      [
                        Lit: 2 @ [evalProg.diderot:167.41-42] 
                      ]
                  ]
              Lit: 1 @ [evalProg.diderot:167.46-47] 
            ]
      Func: genID @ [evalProg.diderot:170.1-55] 
        Tensor @ [evalProg.diderot:170.10-15] 
          [ ]
        [
          Param: v @ [evalProg.diderot:170.21-27] 
            Tensor @ [evalProg.diderot:170.21-26] 
              [
                Lit: 3 @ [evalProg.diderot:170.21-26] 
              ]
        ]
        Expr @ [evalProg.diderot:170.1-55] 
          Apply @ [evalProg.diderot:170.31-54] 
            Var: floor @ [evalProg.diderot:170.31-36] 
            [
              BinOp: * @ [evalProg.diderot:170.37-53] 
                Lit: 1000000 @ [evalProg.diderot:170.37-44] 
                Apply @ [evalProg.diderot:170.45-53] 
                  Var: v3rnd @ [evalProg.diderot:170.45-50] 
                  [
                    Var: v @ [evalProg.diderot:170.51-52] 
                  ]
            ]
      Func: pcIter @ [evalProg.diderot:177.1-183.1] 
        Int @ [evalProg.diderot:177.10-14] 
        [ ]
        Stmt @ [evalProg.diderot:177.1-183.1] 
          IfThenElse @ [evalProg.diderot:178.3-180.0] 
            AndAlso @ [evalProg.diderot:178.7-41] 
              BinOp: > @ [evalProg.diderot:178.7-13] 
                Var: pcp @ [evalProg.diderot:178.7-10] 
                Lit: 0 @ [evalProg.diderot:178.11-12] 
              AndAlso @ [evalProg.diderot:178.13-41] 
                BinOp: > @ [evalProg.diderot:178.16-23] 
                  Var: iter @ [evalProg.diderot:178.16-20] 
                  Lit: 0 @ [evalProg.diderot:178.21-22] 
                BinOp: == @ [evalProg.diderot:178.26-41] 
                  Lit: 0 @ [evalProg.diderot:178.26-27] 
                  BinOp: % @ [evalProg.diderot:178.31-41] 
                    Var: iter @ [evalProg.diderot:178.31-35] 
                    Var: pcp @ [evalProg.diderot:178.38-41] 
            Return @ [evalProg.diderot:178.44-74] 
              BinOp: - @ [evalProg.diderot:178.52-72] 
                BinOp: * @ [evalProg.diderot:178.52-69] 
                  BinOp: % @ [evalProg.diderot:178.53-65] 
                    BinOp: / @ [evalProg.diderot:178.54-62] 
                      Var: iter @ [evalProg.diderot:178.54-58] 
                      Var: pcp @ [evalProg.diderot:178.59-62] 
                    Lit: 2 @ [evalProg.diderot:178.64-65] 
                  Lit: 2 @ [evalProg.diderot:178.67-68] 
                Lit: 1 @ [evalProg.diderot:178.71-72] 
            Return @ [evalProg.diderot:179.9-18] 
              Lit: 0 @ [evalProg.diderot:179.16-17] 
    ]
    Strand: point @ [evalProg.diderot:183.1-383.1] 
      [
        Param: p0 @ [evalProg.diderot:183.15-22] 
          Tensor @ [evalProg.diderot:183.15-20] 
            [
              Lit: 3 @ [evalProg.diderot:183.15-20] 
            ]
        Param: hh0 @ [evalProg.diderot:183.24-32] 
          Tensor @ [evalProg.diderot:183.24-29] 
            [ ]
      ]
      [
        VarDcl: output @ [evalProg.diderot:184.3-24] 
        VarDcl @ [evalProg.diderot:185.3-23] 
        VarDcl @ [evalProg.diderot:186.3-17] 
        VarDcl @ [evalProg.diderot:187.3-23] 
        VarDcl @ [evalProg.diderot:188.3-22] 
        VarDcl @ [evalProg.diderot:189.3-15] 
        VarDcl @ [evalProg.diderot:190.3-17] 
        VarDcl @ [evalProg.diderot:191.3-17] 
        VarDcl @ [evalProg.diderot:192.3-22] 
        VarDcl @ [evalProg.diderot:193.3-16] 
        VarDcl @ [evalProg.diderot:194.3-21] 
      ]
      [
        Method: Update @ [evalProg.diderot:195.3-382.1] 
          Block @ [evalProg.diderot:195.10-381.4] 
            [
              Decl @ [evalProg.diderot:195.10-381.4] 
                Decl: vv= @ [evalProg.diderot:197.5-21] 
                  Lit: false @ [evalProg.diderot:197.15-20] 
              IfThen @ [evalProg.diderot:198.5-202.5] 
                AndAlso @ [evalProg.diderot:198.9-48] 
                  Var: first @ [evalProg.diderot:198.9-14] 
                  OrElse @ [evalProg.diderot:198.19-47] 
                    AndAlso @ [evalProg.diderot:198.20-34] 
                      BinOp: > @ [evalProg.diderot:198.20-29] 
                        Var: verb @ [evalProg.diderot:198.20-24] 
                        Lit: 0 @ [evalProg.diderot:198.27-28] 
                      Var: vv @ [evalProg.diderot:198.32-34] 
                    BinOp: > @ [evalProg.diderot:198.39-47] 
                      Var: verb @ [evalProg.diderot:198.39-43] 
                      Lit: 1 @ [evalProg.diderot:198.46-47] 
                Block @ [evalProg.diderot:198.50-201.6] 
                  [
                    Print @ [evalProg.diderot:199.7-49] 
                      [
                        Var: ID @ [evalProg.diderot:199.13-15] 
                        Lit: "(i#" @ [evalProg.diderot:199.17-22] 
                        Var: iter @ [evalProg.diderot:199.24-28] 
                        Lit: " @ " @ [evalProg.diderot:199.30-35] 
                        Var: pos @ [evalProg.diderot:199.37-40] 
                        Lit: "): " @ [evalProg.diderot:199.42-47] 
                      ]
                    Print @ [evalProg.diderot:200.7-26] 
                      [
                        Lit: " HELLO!\n" @ [evalProg.diderot:200.13-24] 
                      ]
                  ]
              IfThen @ [evalProg.diderot:202.5-209.5] 
                UnaryOp: ! @ [evalProg.diderot:202.9-22] 
                  Apply @ [evalProg.diderot:202.10-22] 
                    Var: posTest @ [evalProg.diderot:202.10-17] 
                    [
                      Var: pos @ [evalProg.diderot:202.18-21] 
                    ]
                Block @ [evalProg.diderot:202.24-209.0] 
                  [
                    IfThen @ [evalProg.diderot:203.7-207.7] 
                      OrElse @ [evalProg.diderot:203.11-39] 
                        AndAlso @ [evalProg.diderot:203.12-26] 
                          BinOp: > @ [evalProg.diderot:203.12-21] 
                            Var: verb @ [evalProg.diderot:203.12-16] 
                            Lit: 0 @ [evalProg.diderot:203.19-20] 
                          Var: vv @ [evalProg.diderot:203.24-26] 
                        BinOp: > @ [evalProg.diderot:203.31-39] 
                          Var: verb @ [evalProg.diderot:203.31-35] 
                          Lit: 1 @ [evalProg.diderot:203.38-39] 
                      Block @ [evalProg.diderot:203.41-206.8] 
                        [
                          Print @ [evalProg.diderot:204.9-51] 
                            [
                              Var: ID @ [evalProg.diderot:204.15-17] 
                              Lit: "(i#" @ [evalProg.diderot:204.19-24] 
                              Var: iter @ [evalProg.diderot:204.26-30] 
                              Lit: " @ " @ [evalProg.diderot:204.32-37] 
                              Var: pos @ [evalProg.diderot:204.39-42] 
                              Lit: "): " @ [evalProg.diderot:204.44-49] 
                            ]
                          Print @ [evalProg.diderot:205.9-200] 
                            [
                              Lit: "!inside=" @ [evalProg.diderot:205.15-25] 
                              Apply @ [evalProg.diderot:205.27-42] 
                                Var: insideTest @ [evalProg.diderot:205.27-37] 
                                [
                                  Var: pos @ [evalProg.diderot:205.38-41] 
                                ]
                              Lit: " || fStrength=" @ [evalProg.diderot:205.44-60] 
                              Apply @ [evalProg.diderot:205.62-76] 
                                Var: fStrength @ [evalProg.diderot:205.62-71] 
                                [
                                  Var: pos @ [evalProg.diderot:205.72-75] 
                                ]
                              Lit: " <= fStrTh=" @ [evalProg.diderot:205.78-91] 
                              Var: fStrTh @ [evalProg.diderot:205.93-99] 
                              Lit: " || fMask(pos)=" @ [evalProg.diderot:205.101-118] 
                              Apply @ [evalProg.diderot:205.120-130] 
                                Var: fMask @ [evalProg.diderot:205.120-125] 
                                [
                                  Var: pos @ [evalProg.diderot:205.126-129] 
                                ]
                              Lit: " < fMaskTh=" @ [evalProg.diderot:205.132-145] 
                              Var: fMaskTh @ [evalProg.diderot:205.147-154] 
                              Lit: " || fTest(pos)=" @ [evalProg.diderot:205.156-173] 
                              Apply @ [evalProg.diderot:205.175-185] 
                                Var: fTest @ [evalProg.diderot:205.175-180] 
                                [
                                  Var: pos @ [evalProg.diderot:205.181-184] 
                                ]
                              Lit: " ==>DIE\n" @ [evalProg.diderot:205.187-198] 
                            ]
                        ]
                    Die @ [evalProg.diderot:207.7-208.0] 
                  ]
              IfThen @ [evalProg.diderot:209.5-212.5] 
                AndAlso @ [evalProg.diderot:209.9-38] 
                  BinOp: > @ [evalProg.diderot:209.9-21] 
                    Var: travMax @ [evalProg.diderot:209.9-16] 
                    Lit: 0 @ [evalProg.diderot:209.19-20] 
                  BinOp: > @ [evalProg.diderot:209.24-38] 
                    Var: trav @ [evalProg.diderot:209.24-28] 
                    Var: travMax @ [evalProg.diderot:209.31-38] 
                Die @ [evalProg.diderot:210.7-211.0] 
              IfThenElse @ [evalProg.diderot:212.5-379.6] 
                UnaryOp: ! @ [evalProg.diderot:212.9-15] 
                  Var: found @ [evalProg.diderot:212.10-15] 
                Block @ [evalProg.diderot:212.17-235.6] 
                  [
                    IfThen @ [evalProg.diderot:213.7-220.7] 
                      AndAlso @ [evalProg.diderot:213.11-37] 
                        BinOp: > @ [evalProg.diderot:213.11-22] 
                          Var: nfsMax @ [evalProg.diderot:213.11-17] 
                          Lit: 0 @ [evalProg.diderot:213.20-21] 
                        BinOp: > @ [evalProg.diderot:213.25-37] 
                          Var: nfs @ [evalProg.diderot:213.25-28] 
                          Var: nfsMax @ [evalProg.diderot:213.31-37] 
                      Block @ [evalProg.diderot:213.39-220.0] 
                        [
                          IfThen @ [evalProg.diderot:214.9-218.9] 
                            OrElse @ [evalProg.diderot:214.13-41] 
                              AndAlso @ [evalProg.diderot:214.14-28] 
                                BinOp: > @ [evalProg.diderot:214.14-23] 
                                  Var: verb @ [evalProg.diderot:214.14-18] 
                                  Lit: 0 @ [evalProg.diderot:214.21-22] 
                                Var: vv @ [evalProg.diderot:214.26-28] 
                              BinOp: > @ [evalProg.diderot:214.33-41] 
                                Var: verb @ [evalProg.diderot:214.33-37] 
                                Lit: 1 @ [evalProg.diderot:214.40-41] 
                            Block @ [evalProg.diderot:214.43-217.10] 
                              [
                                Print @ [evalProg.diderot:215.11-53] 
                                  [
                                    Var: ID @ [evalProg.diderot:215.17-19] 
                                    Lit: "(i#" @ [evalProg.diderot:215.21-26] 
                                    Var: iter @ [evalProg.diderot:215.28-32] 
                                    Lit: " @ " @ [evalProg.diderot:215.34-39] 
                                    Var: pos @ [evalProg.diderot:215.41-44] 
                                    Lit: "): " @ [evalProg.diderot:215.46-51] 
                                  ]
                                Print @ [evalProg.diderot:216.11-107] 
                                  [
                                    Lit: "nfs=" @ [evalProg.diderot:216.17-23] 
                                    Var: nfs @ [evalProg.diderot:216.25-28] 
                                    Lit: " > nfsMax=" @ [evalProg.diderot:216.30-42] 
                                    Var: nfsMax @ [evalProg.diderot:216.44-50] 
                                    Lit: " || trav=" @ [evalProg.diderot:216.52-63] 
                                    Var: trav @ [evalProg.diderot:216.65-69] 
                                    Lit: " > travMax=" @ [evalProg.diderot:216.71-84] 
                                    Var: travMax @ [evalProg.diderot:216.86-93] 
                                    Lit: " =>DIE\n" @ [evalProg.diderot:216.95-105] 
                                  ]
                              ]
                          Die @ [evalProg.diderot:218.9-219.0] 
                        ]
                    Assign: step= @ [evalProg.diderot:220.7-29] 
                      BinOp: * @ [evalProg.diderot:220.14-28] 
                        Var: sfs @ [evalProg.diderot:220.14-17] 
                        Apply @ [evalProg.diderot:220.18-28] 
                          Var: fStep @ [evalProg.diderot:220.18-23] 
                          [
                            Var: pos @ [evalProg.diderot:220.24-27] 
                          ]
                    Assign: pos+= @ [evalProg.diderot:221.7-222.0] 
                      Var: step @ [evalProg.diderot:221.14-18] 
                    Assign: mvmt= @ [evalProg.diderot:222.7-223.0] 
                      Apply @ [evalProg.diderot:222.14-43] 
                        Var: lerp @ [evalProg.diderot:222.14-18] 
                        [
                          BinOp: / @ [evalProg.diderot:222.19-30] 
                            UnaryOp: |()| @ [evalProg.diderot:222.19-25] 
                              Var: step @ [evalProg.diderot:222.20-24] 
                            Var: tipd @ [evalProg.diderot:222.26-30] 
                          Var: mvmt @ [evalProg.diderot:222.32-36] 
                          Var: hist @ [evalProg.diderot:222.38-42] 
                        ]
                    IfThenElse @ [evalProg.diderot:223.7-230.8] 
                      BinOp: > @ [evalProg.diderot:223.11-23] 
                        Var: mvmt @ [evalProg.diderot:223.11-15] 
                        Var: fsEps @ [evalProg.diderot:223.18-23] 
                      Block @ [evalProg.diderot:223.25-226.8] 
                        [
                          Assign: trav+= @ [evalProg.diderot:224.9-225.0] 
                            BinOp: / @ [evalProg.diderot:224.17-28] 
                              UnaryOp: |()| @ [evalProg.diderot:224.17-23] 
                                Var: step @ [evalProg.diderot:224.18-22] 
                              Var: tipd @ [evalProg.diderot:224.24-28] 
                          Assign: nfs+= @ [evalProg.diderot:225.9-226.0] 
                            Lit: 1 @ [evalProg.diderot:225.16-17] 
                        ]
                      Block @ [evalProg.diderot:226.14-230.8] 
                        [
                          Assign: found= @ [evalProg.diderot:227.9-228.0] 
                            Lit: true @ [evalProg.diderot:227.17-21] 
                          Assign: mvmt= @ [evalProg.diderot:228.9-229.0] 
                            Lit: 1 @ [evalProg.diderot:228.16-17] 
                          Assign: trav= @ [evalProg.diderot:229.9-230.0] 
                            Lit: 0 @ [evalProg.diderot:229.16-17] 
                        ]
                    IfThen @ [evalProg.diderot:231.7-235.5] 
                      OrElse @ [evalProg.diderot:231.11-39] 
                        AndAlso @ [evalProg.diderot:231.12-26] 
                          BinOp: > @ [evalProg.diderot:231.12-21] 
                            Var: verb @ [evalProg.diderot:231.12-16] 
                            Lit: 0 @ [evalProg.diderot:231.19-20] 
                          Var: vv @ [evalProg.diderot:231.24-26] 
                        BinOp: > @ [evalProg.diderot:231.31-39] 
                          Var: verb @ [evalProg.diderot:231.31-35] 
                          Lit: 1 @ [evalProg.diderot:231.38-39] 
                      Block @ [evalProg.diderot:231.41-234.8] 
                        [
                          Print @ [evalProg.diderot:232.9-51] 
                            [
                              Var: ID @ [evalProg.diderot:232.15-17] 
                              Lit: "(i#" @ [evalProg.diderot:232.19-24] 
                              Var: iter @ [evalProg.diderot:232.26-30] 
                              Lit: " @ " @ [evalProg.diderot:232.32-37] 
                              Var: pos @ [evalProg.diderot:232.39-42] 
                              Lit: "): " @ [evalProg.diderot:232.44-49] 
                            ]
                          Print @ [evalProg.diderot:233.9-74] 
                            [
                              Lit: "step=" @ [evalProg.diderot:233.15-22] 
                              Var: step @ [evalProg.diderot:233.24-28] 
                              Lit: "; mvmt=" @ [evalProg.diderot:233.30-39] 
                              Var: mvmt @ [evalProg.diderot:233.41-45] 
                              Lit: " => found=" @ [evalProg.diderot:233.47-59] 
                              Var: found @ [evalProg.diderot:233.61-66] 
                              Lit: "\n" @ [evalProg.diderot:233.68-72] 
                            ]
                        ]
                  ]
                Block @ [evalProg.diderot:235.12-379.6] 
                  [
                    IfThen @ [evalProg.diderot:237.7-42] 
                      BinOp: == @ [evalProg.diderot:237.11-20] 
                        Lit: 0 @ [evalProg.diderot:237.11-12] 
                        Var: fDim @ [evalProg.diderot:237.16-20] 
                      Stabilize @ [evalProg.diderot:237.24-34] 
                    Assign: step= @ [evalProg.diderot:237.42-64] 
                      BinOp: * @ [evalProg.diderot:237.49-63] 
                        Var: sfs @ [evalProg.diderot:237.49-52] 
                        Apply @ [evalProg.diderot:237.53-63] 
                          Var: fStep @ [evalProg.diderot:237.53-58] 
                          [
                            Var: pos @ [evalProg.diderot:237.59-62] 
                          ]
                    Assign: pos+= @ [evalProg.diderot:237.65-77] 
                      Var: step @ [evalProg.diderot:237.72-76] 
                    Assign: trav+= @ [evalProg.diderot:237.78-238.0] 
                      BinOp: / @ [evalProg.diderot:237.86-97] 
                        UnaryOp: |()| @ [evalProg.diderot:237.86-92] 
                          Var: step @ [evalProg.diderot:237.87-91] 
                        Var: tipd @ [evalProg.diderot:237.93-97] 
                    Decl @ [evalProg.diderot:235.12-379.6] 
                      Decl: oldE= @ [evalProg.diderot:238.7-21] 
                        Lit: 0 @ [evalProg.diderot:238.19-20] 
                    Decl @ [evalProg.diderot:235.12-379.6] 
                      Decl: force= @ [evalProg.diderot:239.7-28] 
                        Cons @ [evalProg.diderot:239.20-27] 
                          [
                            Lit: 0 @ [evalProg.diderot:239.21-22] 
                            Lit: 0 @ [evalProg.diderot:239.23-24] 
                            Lit: 0 @ [evalProg.diderot:239.25-26] 
                          ]
                    Decl @ [evalProg.diderot:235.12-379.6] 
                      Decl: nn= @ [evalProg.diderot:240.7-18] 
                        Lit: 0 @ [evalProg.diderot:240.16-17] 
                    Foreach @ [evalProg.diderot:241.7-253.0] 
                      Id: point @ [evalProg.diderot:241.16-22] 
                      Iterator: P @ [evalProg.diderot:241.22-38] 
                        Apply @ [evalProg.diderot:241.27-38] 
                          Var: sphere @ [evalProg.diderot:241.27-33] 
                          [
                            Var: rad @ [evalProg.diderot:241.34-37] 
                          ]
                      Block @ [evalProg.diderot:241.40-253.0] 
                        [
                          Decl @ [evalProg.diderot:241.40-253.0] 
                            Decl: off= @ [evalProg.diderot:242.9-243.0] 
                              BinOp: - @ [evalProg.diderot:242.20-31] 
                                Select @ [evalProg.diderot:242.20-25] 
                                  Var: P @ [evalProg.diderot:242.20-21] 
                                  pos
                                Var: pos @ [evalProg.diderot:242.28-31] 
                          IfThen @ [evalProg.diderot:243.9-249.9] 
                            AndAlso @ [evalProg.diderot:243.13-45] 
                              BinOp: < @ [evalProg.diderot:243.13-32] 
                                BinOp: / @ [evalProg.diderot:243.13-24] 
                                  UnaryOp: |()| @ [evalProg.diderot:243.13-18] 
                                    Var: off @ [evalProg.diderot:243.14-17] 
                                  Var: tipd @ [evalProg.diderot:243.19-23] 
                                Var: fsEps @ [evalProg.diderot:243.26-31] 
                              BinOp: <= @ [evalProg.diderot:243.35-45] 
                                Var: ID @ [evalProg.diderot:243.35-37] 
                                Select @ [evalProg.diderot:243.41-45] 
                                  Var: P @ [evalProg.diderot:243.41-42] 
                                  ID
                            Block @ [evalProg.diderot:243.47-249.0] 
                              [
                                IfThen @ [evalProg.diderot:246.11-247.11] 
                                  AndAlso @ [evalProg.diderot:246.15-29] 
                                    BinOp: > @ [evalProg.diderot:246.15-24] 
                                      Var: verb @ [evalProg.diderot:246.15-19] 
                                      Lit: 0 @ [evalProg.diderot:246.22-23] 
                                    Var: vv @ [evalProg.diderot:246.27-29] 
                                  Print @ [evalProg.diderot:246.31-99] 
                                    [
                                      Lit: " (" @ [evalProg.diderot:246.37-41] 
                                      Var: ID @ [evalProg.diderot:246.43-45] 
                                      Lit: " F) on top of " @ [evalProg.diderot:246.47-63] 
                                      Select @ [evalProg.diderot:246.65-69] 
                                        Var: P @ [evalProg.diderot:246.65-66] 
                                        ID
                                      Lit: "; I have lower ID; bye\n" @ [evalProg.diderot:246.71-97] 
                                    ]
                                Die @ [evalProg.diderot:247.11-248.0] 
                              ]
                          Assign: oldE+= @ [evalProg.diderot:249.9-250.0] 
                            Apply @ [evalProg.diderot:249.17-25] 
                              Var: enr @ [evalProg.diderot:249.17-20] 
                              [
                                Var: off @ [evalProg.diderot:249.21-24] 
                              ]
                          Assign: force+= @ [evalProg.diderot:250.9-251.0] 
                            Apply @ [evalProg.diderot:250.18-26] 
                              Var: frc @ [evalProg.diderot:250.18-21] 
                              [
                                Var: off @ [evalProg.diderot:250.22-25] 
                              ]
                          Assign: nn+= @ [evalProg.diderot:251.9-252.0] 
                            Lit: 1 @ [evalProg.diderot:251.15-16] 
                        ]
                    IfThen @ [evalProg.diderot:253.7-281.7] 
                      BinOp: == @ [evalProg.diderot:253.11-18] 
                        Lit: 0 @ [evalProg.diderot:253.11-12] 
                        Var: nn @ [evalProg.diderot:253.16-18] 
                      Block @ [evalProg.diderot:253.20-279.8] 
                        [
                          IfThen @ [evalProg.diderot:255.9-258.9] 
                            UnaryOp: ! @ [evalProg.diderot:255.13-46] 
                              AndAlso @ [evalProg.diderot:255.16-45] 
                                BinOp: > @ [evalProg.diderot:255.16-29] 
                                  Apply @ [evalProg.diderot:255.16-24] 
                                    Var: pcIter @ [evalProg.diderot:255.16-22] 
                                    [ ]
                                  Lit: 0 @ [evalProg.diderot:255.27-28] 
                                BinOp: < @ [evalProg.diderot:255.32-45] 
                                  Var: born @ [evalProg.diderot:255.32-36] 
                                  Var: nnmax @ [evalProg.diderot:255.39-44] 
                            Continue @ [evalProg.diderot:255.50-59] 
                          Decl @ [evalProg.diderot:253.20-279.8] 
                            Decl: noff0= @ [evalProg.diderot:258.9-259.0] 
                              BinOp: • @ [evalProg.diderot:258.22-45] 
                                Apply @ [evalProg.diderot:258.22-32] 
                                  Var: fPerp @ [evalProg.diderot:258.22-27] 
                                  [
                                    Var: pos @ [evalProg.diderot:258.28-31] 
                                  ]
                                Cons @ [evalProg.diderot:258.35-45] 
                                  [
                                    Var: tipd @ [evalProg.diderot:258.36-40] 
                                    Lit: 0 @ [evalProg.diderot:258.41-42] 
                                    Lit: 0 @ [evalProg.diderot:258.43-44] 
                                  ]
                          Decl @ [evalProg.diderot:253.20-279.8] 
                            Decl: noff1= @ [evalProg.diderot:259.9-260.0] 
                              BinOp: • @ [evalProg.diderot:259.22-45] 
                                Apply @ [evalProg.diderot:259.22-32] 
                                  Var: fPerp @ [evalProg.diderot:259.22-27] 
                                  [
                                    Var: pos @ [evalProg.diderot:259.28-31] 
                                  ]
                                Cons @ [evalProg.diderot:259.35-45] 
                                  [
                                    Lit: 0 @ [evalProg.diderot:259.36-37] 
                                    Var: tipd @ [evalProg.diderot:259.38-42] 
                                    Lit: 0 @ [evalProg.diderot:259.43-44] 
                                  ]
                          Decl @ [evalProg.diderot:253.20-279.8] 
                            Decl: noff2= @ [evalProg.diderot:260.9-261.0] 
                              BinOp: • @ [evalProg.diderot:260.22-45] 
                                Apply @ [evalProg.diderot:260.22-32] 
                                  Var: fPerp @ [evalProg.diderot:260.22-27] 
                                  [
                                    Var: pos @ [evalProg.diderot:260.28-31] 
                                  ]
                                Cons @ [evalProg.diderot:260.35-45] 
                                  [
                                    Lit: 0 @ [evalProg.diderot:260.36-37] 
                                    Lit: 0 @ [evalProg.diderot:260.38-39] 
                                    Var: tipd @ [evalProg.diderot:260.40-44] 
                                  ]
                          Decl @ [evalProg.diderot:253.20-279.8] 
                            Decl: noff= @ [evalProg.diderot:261.9-262.0] 
                              Var: noff0 @ [evalProg.diderot:261.21-26] 
                          Assign: noff= @ [evalProg.diderot:262.9-263.0] 
                            Cond @ [evalProg.diderot:262.16-51] 
                              Var: noff @ [evalProg.diderot:262.16-20] 
                              BinOp: > @ [evalProg.diderot:262.24-41] 
                                UnaryOp: |()| @ [evalProg.diderot:262.24-30] 
                                  Var: noff @ [evalProg.diderot:262.25-29] 
                                UnaryOp: |()| @ [evalProg.diderot:262.33-40] 
                                  Var: noff1 @ [evalProg.diderot:262.34-39] 
                              Var: noff1 @ [evalProg.diderot:262.46-51] 
                          Assign: noff= @ [evalProg.diderot:263.9-264.0] 
                            Cond @ [evalProg.diderot:263.16-51] 
                              Var: noff @ [evalProg.diderot:263.16-20] 
                              BinOp: > @ [evalProg.diderot:263.24-41] 
                                UnaryOp: |()| @ [evalProg.diderot:263.24-30] 
                                  Var: noff @ [evalProg.diderot:263.25-29] 
                                UnaryOp: |()| @ [evalProg.diderot:263.33-40] 
                                  Var: noff2 @ [evalProg.diderot:263.34-39] 
                              Var: noff2 @ [evalProg.diderot:263.46-51] 
                          Decl @ [evalProg.diderot:253.20-279.8] 
                            Decl: npos= @ [evalProg.diderot:265.9-266.0] 
                              BinOp: + @ [evalProg.diderot:265.21-47] 
                                BinOp: * @ [evalProg.diderot:265.21-42] 
                                  Var: tipd @ [evalProg.diderot:265.21-25] 
                                  Apply @ [evalProg.diderot:265.26-41] 
                                    Var: normalize @ [evalProg.diderot:265.26-35] 
                                    [
                                      Var: noff @ [evalProg.diderot:265.36-40] 
                                    ]
                                Var: pos @ [evalProg.diderot:265.44-47] 
                          Assign: npos+= @ [evalProg.diderot:266.9-267.0] 
                            BinOp: * @ [evalProg.diderot:266.17-32] 
                              Var: sfs @ [evalProg.diderot:266.17-20] 
                              Apply @ [evalProg.diderot:266.21-32] 
                                Var: fStep @ [evalProg.diderot:266.21-26] 
                                [
                                  Var: npos @ [evalProg.diderot:266.27-31] 
                                ]
                          IfThen @ [evalProg.diderot:267.9-271.9] 
                            OrElse @ [evalProg.diderot:267.13-41] 
                              AndAlso @ [evalProg.diderot:267.14-28] 
                                BinOp: > @ [evalProg.diderot:267.14-23] 
                                  Var: verb @ [evalProg.diderot:267.14-18] 
                                  Lit: 0 @ [evalProg.diderot:267.21-22] 
                                Var: vv @ [evalProg.diderot:267.26-28] 
                              BinOp: > @ [evalProg.diderot:267.33-41] 
                                Var: verb @ [evalProg.diderot:267.33-37] 
                                Lit: 1 @ [evalProg.diderot:267.40-41] 
                            Block @ [evalProg.diderot:267.43-270.10] 
                              [
                                Print @ [evalProg.diderot:268.11-53] 
                                  [
                                    Var: ID @ [evalProg.diderot:268.17-19] 
                                    Lit: "(i#" @ [evalProg.diderot:268.21-26] 
                                    Var: iter @ [evalProg.diderot:268.28-32] 
                                    Lit: " @ " @ [evalProg.diderot:268.34-39] 
                                    Var: pos @ [evalProg.diderot:268.41-44] 
                                    Lit: "): " @ [evalProg.diderot:268.46-51] 
                                  ]
                                Print @ [evalProg.diderot:269.11-71] 
                                  [
                                    Lit: " 0==nn =>NEW(" @ [evalProg.diderot:269.17-32] 
                                    Var: npos @ [evalProg.diderot:269.34-38] 
                                    Lit: ") w/ ID=" @ [evalProg.diderot:269.40-50] 
                                    Apply @ [evalProg.diderot:269.52-63] 
                                      Var: genID @ [evalProg.diderot:269.52-57] 
                                      [
                                        Var: npos @ [evalProg.diderot:269.58-62] 
                                      ]
                                    Lit: "\n" @ [evalProg.diderot:269.65-69] 
                                  ]
                              ]
                          IfThen @ [evalProg.diderot:271.9-274.9] 
                            Apply @ [evalProg.diderot:271.13-25] 
                              Var: posTest @ [evalProg.diderot:271.13-20] 
                              [
                                Var: pos @ [evalProg.diderot:271.21-24] 
                              ]
                            Block @ [evalProg.diderot:271.27-274.0] 
                              [
                                New: point @ [evalProg.diderot:272.11-31] 
                                  [
                                    Var: npos @ [evalProg.diderot:272.21-25] 
                                    Var: hh @ [evalProg.diderot:272.27-29] 
                                  ]
                                Assign: born+= @ [evalProg.diderot:272.32-273.0] 
                                  Lit: 1 @ [evalProg.diderot:272.40-41] 
                              ]
                          IfThen @ [evalProg.diderot:274.9-278.9] 
                            OrElse @ [evalProg.diderot:274.13-41] 
                              AndAlso @ [evalProg.diderot:274.14-28] 
                                BinOp: > @ [evalProg.diderot:274.14-23] 
                                  Var: verb @ [evalProg.diderot:274.14-18] 
                                  Lit: 0 @ [evalProg.diderot:274.21-22] 
                                Var: vv @ [evalProg.diderot:274.26-28] 
                              BinOp: > @ [evalProg.diderot:274.33-41] 
                                Var: verb @ [evalProg.diderot:274.33-37] 
                                Lit: 1 @ [evalProg.diderot:274.40-41] 
                            Block @ [evalProg.diderot:274.43-277.10] 
                              [
                                Print @ [evalProg.diderot:275.11-53] 
                                  [
                                    Var: ID @ [evalProg.diderot:275.17-19] 
                                    Lit: "(i#" @ [evalProg.diderot:275.21-26] 
                                    Var: iter @ [evalProg.diderot:275.28-32] 
                                    Lit: " @ " @ [evalProg.diderot:275.34-39] 
                                    Var: pos @ [evalProg.diderot:275.41-44] 
                                    Lit: "): " @ [evalProg.diderot:275.46-51] 
                                  ]
                                Print @ [evalProg.diderot:276.11-59] 
                                  [
                                    Lit: "nn=0; after birthing mvmt=" @ [evalProg.diderot:276.17-45] 
                                    Var: mvmt @ [evalProg.diderot:276.47-51] 
                                    Lit: "\n" @ [evalProg.diderot:276.53-57] 
                                  ]
                              ]
                          Continue @ [evalProg.diderot:278.9-279.0] 
                        ]
                    Decl @ [evalProg.diderot:235.12-379.6] 
                      Decl: es= @ [evalProg.diderot:281.7-39] 
                        BinOp: • @ [evalProg.diderot:281.17-38] 
                          BinOp: * @ [evalProg.diderot:281.17-30] 
                            Var: hh @ [evalProg.diderot:281.17-19] 
                            Apply @ [evalProg.diderot:281.20-30] 
                              Var: fPerp @ [evalProg.diderot:281.20-25] 
                              [
                                Var: pos @ [evalProg.diderot:281.26-29] 
                              ]
                          Var: force @ [evalProg.diderot:281.33-38] 
                    IfThen @ [evalProg.diderot:282.7-286.7] 
                      BinOp: > @ [evalProg.diderot:282.11-22] 
                        UnaryOp: |()| @ [evalProg.diderot:282.11-15] 
                          Var: es @ [evalProg.diderot:282.12-14] 
                        Var: tipd @ [evalProg.diderot:282.18-22] 
                      Block @ [evalProg.diderot:282.24-285.8] 
                        [
                          Assign: hh*= @ [evalProg.diderot:283.9-25] 
                            BinOp: / @ [evalProg.diderot:283.15-24] 
                              Var: tipd @ [evalProg.diderot:283.15-19] 
                              UnaryOp: |()| @ [evalProg.diderot:283.20-24] 
                                Var: es @ [evalProg.diderot:283.21-23] 
                          Assign: es*= @ [evalProg.diderot:284.9-285.0] 
                            BinOp: / @ [evalProg.diderot:284.15-24] 
                              Var: tipd @ [evalProg.diderot:284.15-19] 
                              UnaryOp: |()| @ [evalProg.diderot:284.20-24] 
                                Var: es @ [evalProg.diderot:284.21-23] 
                        ]
                    Decl @ [evalProg.diderot:235.12-379.6] 
                      Decl: fs= @ [evalProg.diderot:286.7-35] 
                        BinOp: * @ [evalProg.diderot:286.17-34] 
                          Var: sfs @ [evalProg.diderot:286.17-20] 
                          Apply @ [evalProg.diderot:286.21-34] 
                            Var: fStep @ [evalProg.diderot:286.21-26] 
                            [
                              BinOp: + @ [evalProg.diderot:286.27-33] 
                                Var: pos @ [evalProg.diderot:286.27-30] 
                                Var: es @ [evalProg.diderot:286.31-33] 
                            ]
                    IfThen @ [evalProg.diderot:288.7-298.7] 
                      BinOp: > @ [evalProg.diderot:288.11-41] 
                        BinOp: / @ [evalProg.diderot:288.11-36] 
                          UnaryOp: |()| @ [evalProg.diderot:288.11-15] 
                            Var: fs @ [evalProg.diderot:288.12-14] 
                          BinOp: + @ [evalProg.diderot:288.17-34] 
                            BinOp: * @ [evalProg.diderot:288.17-28] 
                              Var: fsEps @ [evalProg.diderot:288.17-22] 
                              Var: tipd @ [evalProg.diderot:288.23-27] 
                            UnaryOp: |()| @ [evalProg.diderot:288.30-34] 
                              Var: es @ [evalProg.diderot:288.31-33] 
                        Lit: 0.5e0 @ [evalProg.diderot:288.38-41] 
                      Block @ [evalProg.diderot:288.43-298.0] 
                        [
                          Assign: hh*= @ [evalProg.diderot:289.9-19] 
                            Lit: 0.5e0 @ [evalProg.diderot:289.15-18] 
                          IfThen @ [evalProg.diderot:290.9-296.9] 
                            OrElse @ [evalProg.diderot:290.13-41] 
                              AndAlso @ [evalProg.diderot:290.14-28] 
                                BinOp: > @ [evalProg.diderot:290.14-23] 
                                  Var: verb @ [evalProg.diderot:290.14-18] 
                                  Lit: 0 @ [evalProg.diderot:290.21-22] 
                                Var: vv @ [evalProg.diderot:290.26-28] 
                              BinOp: > @ [evalProg.diderot:290.33-41] 
                                Var: verb @ [evalProg.diderot:290.33-37] 
                                Lit: 1 @ [evalProg.diderot:290.40-41] 
                            Block @ [evalProg.diderot:290.43-295.10] 
                              [
                                Print @ [evalProg.diderot:291.11-53] 
                                  [
                                    Var: ID @ [evalProg.diderot:291.17-19] 
                                    Lit: "(i#" @ [evalProg.diderot:291.21-26] 
                                    Var: iter @ [evalProg.diderot:291.28-32] 
                                    Lit: " @ " @ [evalProg.diderot:291.34-39] 
                                    Var: pos @ [evalProg.diderot:291.41-44] 
                                    Lit: "): " @ [evalProg.diderot:291.46-51] 
                                  ]
                                Print @ [evalProg.diderot:292.11-115] 
                                  [
                                    Lit: "nn=" @ [evalProg.diderot:292.17-22] 
                                    Var: nn @ [evalProg.diderot:292.24-26] 
                                    Lit: "; |fs|/|es|=" @ [evalProg.diderot:292.28-42] 
                                    BinOp: / @ [evalProg.diderot:292.44-53] 
                                      UnaryOp: |()| @ [evalProg.diderot:292.44-48] 
                                        Var: fs @ [evalProg.diderot:292.45-47] 
                                      UnaryOp: |()| @ [evalProg.diderot:292.49-53] 
                                        Var: es @ [evalProg.diderot:292.50-52] 
                                    Lit: " > 0.5; trying again with hh=" @ [evalProg.diderot:292.55-86] 
                                    Var: hh @ [evalProg.diderot:292.88-90] 
                                    Lit: "; mvmt=" @ [evalProg.diderot:292.92-101] 
                                    Var: mvmt @ [evalProg.diderot:292.103-107] 
                                    Lit: "\n" @ [evalProg.diderot:292.109-113] 
                                  ]
                                Print @ [evalProg.diderot:293.11-42] 
                                  [
                                    Lit: "        fs=" @ [evalProg.diderot:293.17-30] 
                                    Var: fs @ [evalProg.diderot:293.32-34] 
                                    Lit: "\n" @ [evalProg.diderot:293.36-40] 
                                  ]
                                Print @ [evalProg.diderot:294.11-42] 
                                  [
                                    Lit: "        es=" @ [evalProg.diderot:294.17-30] 
                                    Var: es @ [evalProg.diderot:294.32-34] 
                                    Lit: "\n" @ [evalProg.diderot:294.36-40] 
                                  ]
                              ]
                          Continue @ [evalProg.diderot:296.9-297.0] 
                        ]
                    Decl @ [evalProg.diderot:235.12-379.6] 
                      Decl: oldpos= @ [evalProg.diderot:298.7-299.0] 
                        Var: pos @ [evalProg.diderot:298.21-24] 
                    Assign: pos+= @ [evalProg.diderot:299.7-22] 
                      BinOp: + @ [evalProg.diderot:299.14-21] 
                        Var: fs @ [evalProg.diderot:299.14-16] 
                        Var: es @ [evalProg.diderot:299.19-21] 
                    Decl @ [evalProg.diderot:235.12-379.6] 
                      Decl: newE= @ [evalProg.diderot:300.7-301.0] 
                        Lit: 0 @ [evalProg.diderot:300.19-20] 
                    Assign: closest= @ [evalProg.diderot:301.7-302.0] 
                      Var: rad @ [evalProg.diderot:301.17-20] 
                    Decl @ [evalProg.diderot:235.12-379.6] 
                      Decl: mno= @ [evalProg.diderot:304.7-305.0] 
                        Cons @ [evalProg.diderot:304.18-25] 
                          [
                            Lit: 0 @ [evalProg.diderot:304.19-20] 
                            Lit: 0 @ [evalProg.diderot:304.21-22] 
                            Lit: 0 @ [evalProg.diderot:304.23-24] 
                          ]
                    Assign: nn= @ [evalProg.diderot:305.7-306.0] 
                      Lit: 0 @ [evalProg.diderot:305.12-13] 
                    Foreach @ [evalProg.diderot:306.7-313.0] 
                      Id: point @ [evalProg.diderot:306.16-22] 
                      Iterator: P @ [evalProg.diderot:306.22-38] 
                        Apply @ [evalProg.diderot:306.27-38] 
                          Var: sphere @ [evalProg.diderot:306.27-33] 
                          [
                            Var: rad @ [evalProg.diderot:306.34-37] 
                          ]
                      Block @ [evalProg.diderot:306.40-313.0] 
                        [
                          Decl @ [evalProg.diderot:306.40-313.0] 
                            Decl: off= @ [evalProg.diderot:307.9-308.0] 
                              BinOp: - @ [evalProg.diderot:307.20-31] 
                                Select @ [evalProg.diderot:307.20-25] 
                                  Var: P @ [evalProg.diderot:307.20-21] 
                                  pos
                                Var: pos @ [evalProg.diderot:307.28-31] 
                          Assign: newE+= @ [evalProg.diderot:308.9-309.0] 
                            Apply @ [evalProg.diderot:308.17-25] 
                              Var: enr @ [evalProg.diderot:308.17-20] 
                              [
                                Var: off @ [evalProg.diderot:308.21-24] 
                              ]
                          Assign: closest= @ [evalProg.diderot:309.9-310.0] 
                            Apply @ [evalProg.diderot:309.19-38] 
                              Var: min @ [evalProg.diderot:309.19-22] 
                              [
                                Var: closest @ [evalProg.diderot:309.23-30] 
                                UnaryOp: |()| @ [evalProg.diderot:309.32-37] 
                                  Var: off @ [evalProg.diderot:309.33-36] 
                              ]
                          Assign: mno+= @ [evalProg.diderot:310.9-311.0] 
                            Var: off @ [evalProg.diderot:310.16-19] 
                          Assign: nn+= @ [evalProg.diderot:311.9-312.0] 
                            Lit: 1 @ [evalProg.diderot:311.15-16] 
                        ]
                    Assign: mno/= @ [evalProg.diderot:313.7-17] 
                      Var: nn @ [evalProg.diderot:313.14-16] 
                    IfThen @ [evalProg.diderot:314.7-319.7] 
                      OrElse @ [evalProg.diderot:314.11-39] 
                        AndAlso @ [evalProg.diderot:314.12-26] 
                          BinOp: > @ [evalProg.diderot:314.12-21] 
                            Var: verb @ [evalProg.diderot:314.12-16] 
                            Lit: 0 @ [evalProg.diderot:314.19-20] 
                          Var: vv @ [evalProg.diderot:314.24-26] 
                        BinOp: > @ [evalProg.diderot:314.31-39] 
                          Var: verb @ [evalProg.diderot:314.31-35] 
                          Lit: 1 @ [evalProg.diderot:314.38-39] 
                      Block @ [evalProg.diderot:314.41-317.8] 
                        [
                          Print @ [evalProg.diderot:315.9-51] 
                            [
                              Var: ID @ [evalProg.diderot:315.15-17] 
                              Lit: "(i#" @ [evalProg.diderot:315.19-24] 
                              Var: iter @ [evalProg.diderot:315.26-30] 
                              Lit: " @ " @ [evalProg.diderot:315.32-37] 
                              Var: pos @ [evalProg.diderot:315.39-42] 
                              Lit: "): " @ [evalProg.diderot:315.44-49] 
                            ]
                          Print @ [evalProg.diderot:316.9-65] 
                            [
                              Lit: "nn=" @ [evalProg.diderot:316.15-20] 
                              Var: nn @ [evalProg.diderot:316.22-24] 
                              Lit: "; oldE=" @ [evalProg.diderot:316.26-35] 
                              Var: oldE @ [evalProg.diderot:316.37-41] 
                              Lit: " newE=" @ [evalProg.diderot:316.43-51] 
                              Var: newE @ [evalProg.diderot:316.53-57] 
                              Lit: "\n" @ [evalProg.diderot:316.59-63] 
                            ]
                        ]
                    IfThen @ [evalProg.diderot:319.7-340.7] 
                      BinOp: > @ [evalProg.diderot:319.11-58] 
                        BinOp: - @ [evalProg.diderot:319.11-23] 
                          Var: newE @ [evalProg.diderot:319.11-15] 
                          Var: oldE @ [evalProg.diderot:319.18-22] 
                        BinOp: • @ [evalProg.diderot:319.25-58] 
                          BinOp: * @ [evalProg.diderot:319.25-47] 
                            Var: gdeTest @ [evalProg.diderot:319.25-32] 
                            BinOp: - @ [evalProg.diderot:319.34-46] 
                              Var: pos @ [evalProg.diderot:319.34-37] 
                              Var: oldpos @ [evalProg.diderot:319.40-46] 
                          UnaryOp: unary - @ [evalProg.diderot:319.51-57] 
                            Var: force @ [evalProg.diderot:319.52-57] 
                      Block @ [evalProg.diderot:319.60-340.0] 
                        [
                          Assign: hh*= @ [evalProg.diderot:321.9-23] 
                            Var: gdeBack @ [evalProg.diderot:321.15-22] 
                          IfThen @ [evalProg.diderot:322.9-327.9] 
                            BinOp: == @ [evalProg.diderot:322.13-20] 
                              Lit: 0 @ [evalProg.diderot:322.13-14] 
                              Var: hh @ [evalProg.diderot:322.18-20] 
                            Block @ [evalProg.diderot:322.22-327.0] 
                              [
                                Print @ [evalProg.diderot:323.11-53] 
                                  [
                                    Var: ID @ [evalProg.diderot:323.17-19] 
                                    Lit: "(i#" @ [evalProg.diderot:323.21-26] 
                                    Var: iter @ [evalProg.diderot:323.28-32] 
                                    Lit: " @ " @ [evalProg.diderot:323.34-39] 
                                    Var: pos @ [evalProg.diderot:323.41-44] 
                                    Lit: "): " @ [evalProg.diderot:323.46-51] 
                                  ]
                                Print @ [evalProg.diderot:324.11-54] 
                                  [
                                    Lit: "backtracked all the way to hh=0\n" @ [evalProg.diderot:324.17-52] 
                                  ]
                                Die @ [evalProg.diderot:325.11-15] 
                              ]
                          IfThen @ [evalProg.diderot:327.9-337.9] 
                            OrElse @ [evalProg.diderot:327.13-41] 
                              AndAlso @ [evalProg.diderot:327.14-28] 
                                BinOp: > @ [evalProg.diderot:327.14-23] 
                                  Var: verb @ [evalProg.diderot:327.14-18] 
                                  Lit: 0 @ [evalProg.diderot:327.21-22] 
                                Var: vv @ [evalProg.diderot:327.26-28] 
                              BinOp: > @ [evalProg.diderot:327.33-41] 
                                Var: verb @ [evalProg.diderot:327.33-37] 
                                Lit: 1 @ [evalProg.diderot:327.40-41] 
                            Block @ [evalProg.diderot:327.43-336.10] 
                              [
                                Print @ [evalProg.diderot:328.11-53] 
                                  [
                                    Var: ID @ [evalProg.diderot:328.17-19] 
                                    Lit: "(i#" @ [evalProg.diderot:328.21-26] 
                                    Var: iter @ [evalProg.diderot:328.28-32] 
                                    Lit: " @ " @ [evalProg.diderot:328.34-39] 
                                    Var: pos @ [evalProg.diderot:328.41-44] 
                                    Lit: "): " @ [evalProg.diderot:328.46-51] 
                                  ]
                                Print @ [evalProg.diderot:329.11-111] 
                                  [
                                    Lit: "nn=" @ [evalProg.diderot:329.17-22] 
                                    Var: nn @ [evalProg.diderot:329.24-26] 
                                    Lit: "; oldE=" @ [evalProg.diderot:329.28-37] 
                                    Var: oldE @ [evalProg.diderot:329.39-43] 
                                    Lit: " newE=" @ [evalProg.diderot:329.45-53] 
                                    Var: newE @ [evalProg.diderot:329.55-59] 
                                    Lit: "; backtracking; hh=" @ [evalProg.diderot:329.61-82] 
                                    Var: hh @ [evalProg.diderot:329.84-86] 
                                    Lit: "; mvmt=" @ [evalProg.diderot:329.88-97] 
                                    Var: mvmt @ [evalProg.diderot:329.99-103] 
                                    Lit: "\n" @ [evalProg.diderot:329.105-109] 
                                  ]
                                Print @ [evalProg.diderot:330.11-40] 
                                  [
                                    Lit: "      fs=" @ [evalProg.diderot:330.17-28] 
                                    Var: fs @ [evalProg.diderot:330.30-32] 
                                    Lit: "\n" @ [evalProg.diderot:330.34-38] 
                                  ]
                                Print @ [evalProg.diderot:331.11-40] 
                                  [
                                    Lit: "      es=" @ [evalProg.diderot:331.17-28] 
                                    Var: es @ [evalProg.diderot:331.30-32] 
                                    Lit: "\n" @ [evalProg.diderot:331.34-38] 
                                  ]
                                Print @ [evalProg.diderot:332.11-58] 
                                  [
                                    Lit: "      newE - oldE=" @ [evalProg.diderot:332.17-37] 
                                    BinOp: - @ [evalProg.diderot:332.39-50] 
                                      Var: newE @ [evalProg.diderot:332.39-43] 
                                      Var: oldE @ [evalProg.diderot:332.46-50] 
                                    Lit: "\n" @ [evalProg.diderot:332.52-56] 
                                  ]
                                Print @ [evalProg.diderot:333.11-46] 
                                  [
                                    Lit: "      force=" @ [evalProg.diderot:333.17-31] 
                                    Var: force @ [evalProg.diderot:333.33-38] 
                                    Lit: "\n" @ [evalProg.diderot:333.40-44] 
                                  ]
                                Print @ [evalProg.diderot:334.11-52] 
                                  [
                                    Lit: "      dpos=" @ [evalProg.diderot:334.17-30] 
                                    BinOp: - @ [evalProg.diderot:334.32-44] 
                                      Var: pos @ [evalProg.diderot:334.32-35] 
                                      Var: oldpos @ [evalProg.diderot:334.38-44] 
                                    Lit: "\n" @ [evalProg.diderot:334.46-50] 
                                  ]
                                Print @ [evalProg.diderot:335.11-92] 
                                  [
                                    Lit: "      0.5*(pos - oldpos).(-force)=" @ [evalProg.diderot:335.17-53] 
                                    BinOp: • @ [evalProg.diderot:335.55-84] 
                                      BinOp: * @ [evalProg.diderot:335.55-73] 
                                        Lit: 0.5e0 @ [evalProg.diderot:335.55-58] 
                                        BinOp: - @ [evalProg.diderot:335.60-72] 
                                          Var: pos @ [evalProg.diderot:335.60-63] 
                                          Var: oldpos @ [evalProg.diderot:335.66-72] 
                                      UnaryOp: unary - @ [evalProg.diderot:335.77-83] 
                                        Var: force @ [evalProg.diderot:335.78-83] 
                                    Lit: "\n" @ [evalProg.diderot:335.86-90] 
                                  ]
                              ]
                          Assign: pos= @ [evalProg.diderot:337.9-338.0] 
                            Var: oldpos @ [evalProg.diderot:337.15-21] 
                          Continue @ [evalProg.diderot:338.9-339.0] 
                        ]
                    Assign: hh*= @ [evalProg.diderot:340.7-22] 
                      Var: gdeOppor @ [evalProg.diderot:340.13-21] 
                    Assign: step+= @ [evalProg.diderot:341.7-23] 
                      BinOp: + @ [evalProg.diderot:341.15-22] 
                        Var: fs @ [evalProg.diderot:341.15-17] 
                        Var: es @ [evalProg.diderot:341.20-22] 
                    Assign: trav+= @ [evalProg.diderot:342.7-343.0] 
                      BinOp: / @ [evalProg.diderot:342.15-26] 
                        UnaryOp: |()| @ [evalProg.diderot:342.15-21] 
                          Var: step @ [evalProg.diderot:342.16-20] 
                        Var: tipd @ [evalProg.diderot:342.22-26] 
                    Assign: mvmt= @ [evalProg.diderot:343.7-344.0] 
                      Apply @ [evalProg.diderot:343.14-43] 
                        Var: lerp @ [evalProg.diderot:343.14-18] 
                        [
                          BinOp: / @ [evalProg.diderot:343.19-30] 
                            UnaryOp: |()| @ [evalProg.diderot:343.19-25] 
                              Var: step @ [evalProg.diderot:343.20-24] 
                            Var: tipd @ [evalProg.diderot:343.26-30] 
                          Var: mvmt @ [evalProg.diderot:343.32-36] 
                          Var: hist @ [evalProg.diderot:343.38-42] 
                        ]
                    IfThen @ [evalProg.diderot:344.7-379.5] 
                      AndAlso @ [evalProg.diderot:344.11-49] 
                        BinOp: < @ [evalProg.diderot:344.11-33] 
                          BinOp: / @ [evalProg.diderot:344.11-23] 
                            UnaryOp: |()| @ [evalProg.diderot:344.11-17] 
                              Var: step @ [evalProg.diderot:344.12-16] 
                            Var: tipd @ [evalProg.diderot:344.18-22] 
                          Var: pcmvEps @ [evalProg.diderot:344.25-32] 
                        BinOp: != @ [evalProg.diderot:344.36-49] 
                          Apply @ [evalProg.diderot:344.36-44] 
                            Var: pcIter @ [evalProg.diderot:344.36-42] 
                            [ ]
                          Lit: 0 @ [evalProg.diderot:344.48-49] 
                      IfThenElse @ [evalProg.diderot:346.9-378.7] 
                        AndAlso @ [evalProg.diderot:346.13-349.26] 
                          BinOp: > @ [evalProg.diderot:346.13-347.13] 
                            Apply @ [evalProg.diderot:346.13-21] 
                              Var: pcIter @ [evalProg.diderot:346.13-19] 
                              [ ]
                            Lit: 0 @ [evalProg.diderot:346.22-23] 
                          AndAlso @ [evalProg.diderot:347.13-349.26] 
                            BinOp: < @ [evalProg.diderot:347.16-348.13] 
                              Var: newE @ [evalProg.diderot:347.16-20] 
                              Lit: 0 @ [evalProg.diderot:347.21-22] 
                            AndAlso @ [evalProg.diderot:348.13-349.26] 
                              BinOp: < @ [evalProg.diderot:348.16-349.13] 
                                Var: nn @ [evalProg.diderot:348.16-18] 
                                Var: nnmin @ [evalProg.diderot:348.19-24] 
                              BinOp: < @ [evalProg.diderot:349.16-26] 
                                Var: born @ [evalProg.diderot:349.16-20] 
                                Var: nnmax @ [evalProg.diderot:349.21-26] 
                        Block @ [evalProg.diderot:349.28-367.10] 
                          [
                            Decl @ [evalProg.diderot:349.28-367.10] 
                              Decl: npos= @ [evalProg.diderot:350.11-49] 
                                BinOp: - @ [evalProg.diderot:350.23-48] 
                                  Var: pos @ [evalProg.diderot:350.23-26] 
                                  BinOp: * @ [evalProg.diderot:350.29-48] 
                                    Var: tipd @ [evalProg.diderot:350.29-33] 
                                    Apply @ [evalProg.diderot:350.34-48] 
                                      Var: normalize @ [evalProg.diderot:350.34-43] 
                                      [
                                        Var: mno @ [evalProg.diderot:350.44-47] 
                                      ]
                            Assign: npos+= @ [evalProg.diderot:351.11-35] 
                              BinOp: * @ [evalProg.diderot:351.19-34] 
                                Var: sfs @ [evalProg.diderot:351.19-22] 
                                Apply @ [evalProg.diderot:351.23-34] 
                                  Var: fStep @ [evalProg.diderot:351.23-28] 
                                  [
                                    Var: npos @ [evalProg.diderot:351.29-33] 
                                  ]
                            Assign: npos+= @ [evalProg.diderot:351.36-352.0] 
                              BinOp: * @ [evalProg.diderot:351.44-59] 
                                Var: sfs @ [evalProg.diderot:351.44-47] 
                                Apply @ [evalProg.diderot:351.48-59] 
                                  Var: fStep @ [evalProg.diderot:351.48-53] 
                                  [
                                    Var: npos @ [evalProg.diderot:351.54-58] 
                                  ]
                            Decl @ [evalProg.diderot:349.28-367.10] 
                              Decl: birth= @ [evalProg.diderot:352.11-353.0] 
                                Lit: true @ [evalProg.diderot:352.24-28] 
                            IfThen @ [evalProg.diderot:353.11-364.11] 
                              AndAlso @ [evalProg.diderot:353.15-35] 
                                BinOp: == @ [evalProg.diderot:353.15-25] 
                                  Var: fDim @ [evalProg.diderot:353.15-19] 
                                  Lit: 2 @ [evalProg.diderot:353.23-24] 
                                BinOp: >= @ [evalProg.diderot:353.28-35] 
                                  Var: nn @ [evalProg.diderot:353.28-30] 
                                  Lit: 4 @ [evalProg.diderot:353.34-35] 
                              Block @ [evalProg.diderot:353.37-364.0] 
                                [
                                  Foreach @ [evalProg.diderot:354.13-357.0] 
                                    Id: point @ [evalProg.diderot:354.22-28] 
                                    Iterator: P @ [evalProg.diderot:354.28-56] 
                                      Apply @ [evalProg.diderot:354.33-56] 
                                        Var: sphere @ [evalProg.diderot:354.33-39] 
                                        [
                                          Var: npos @ [evalProg.diderot:354.40-44] 
                                          BinOp: * @ [evalProg.diderot:354.46-55] 
                                            Var: tipd @ [evalProg.diderot:354.46-50] 
                                            Var: mabd @ [evalProg.diderot:354.51-55] 
                                        ]
                                    Assign: birth= @ [evalProg.diderot:355.15-29] 
                                      Lit: false @ [evalProg.diderot:355.23-28] 
                                  IfThen @ [evalProg.diderot:357.13-363.11] 
                                    Var: birth @ [evalProg.diderot:357.17-22] 
                                    Assign: birth= @ [evalProg.diderot:361.15-61] 
                                      BinOp: < @ [evalProg.diderot:361.23-60] 
                                        Apply @ [evalProg.diderot:361.23-33] 
                                          Var: v3rnd @ [evalProg.diderot:361.23-28] 
                                          [
                                            Var: pos @ [evalProg.diderot:361.29-32] 
                                          ]
                                        BinOp: / @ [evalProg.diderot:361.36-60] 
                                          BinOp: - @ [evalProg.diderot:361.37-47] 
                                            Var: nnmin @ [evalProg.diderot:361.37-42] 
                                            Var: nn @ [evalProg.diderot:361.45-47] 
                                          Real @ [evalProg.diderot:361.49-60] 
                                            Var: nnmin @ [evalProg.diderot:361.54-59] 
                                ]
                            IfThen @ [evalProg.diderot:364.11-367.9] 
                              AndAlso @ [evalProg.diderot:364.15-37] 
                                Var: birth @ [evalProg.diderot:364.15-20] 
                                Apply @ [evalProg.diderot:364.24-37] 
                                  Var: posTest @ [evalProg.diderot:364.24-31] 
                                  [
                                    Var: npos @ [evalProg.diderot:364.32-36] 
                                  ]
                              Block @ [evalProg.diderot:364.39-367.0] 
                                [
                                  New: point @ [evalProg.diderot:365.13-33] 
                                    [
                                      Var: npos @ [evalProg.diderot:365.23-27] 
                                      Var: hh @ [evalProg.diderot:365.29-31] 
                                    ]
                                  Assign: born+= @ [evalProg.diderot:365.34-366.0] 
                                    Lit: 1 @ [evalProg.diderot:365.42-43] 
                                ]
                          ]
                        IfThen @ [evalProg.diderot:367.16-378.7] 
                          AndAlso @ [evalProg.diderot:367.20-58] 
                            BinOp: < @ [evalProg.diderot:367.20-33] 
                              Apply @ [evalProg.diderot:367.20-28] 
                                Var: pcIter @ [evalProg.diderot:367.20-26] 
                                [ ]
                              Lit: 0 @ [evalProg.diderot:367.31-32] 
                            AndAlso @ [evalProg.diderot:367.33-58] 
                              BinOp: > @ [evalProg.diderot:367.36-45] 
                                Var: newE @ [evalProg.diderot:367.36-40] 
                                Lit: 0 @ [evalProg.diderot:367.43-44] 
                              BinOp: > @ [evalProg.diderot:367.48-58] 
                                Var: nn @ [evalProg.diderot:367.48-50] 
                                Var: nnmax @ [evalProg.diderot:367.53-58] 
                          IfThen @ [evalProg.diderot:372.11-377.9] 
                            BinOp: < @ [evalProg.diderot:372.15-49] 
                              Apply @ [evalProg.diderot:372.15-25] 
                                Var: v3rnd @ [evalProg.diderot:372.15-20] 
                                [
                                  Var: pos @ [evalProg.diderot:372.21-24] 
                                ]
                              BinOp: / @ [evalProg.diderot:372.28-49] 
                                BinOp: - @ [evalProg.diderot:372.29-39] 
                                  Var: nn @ [evalProg.diderot:372.29-31] 
                                  Var: nnmax @ [evalProg.diderot:372.34-39] 
                                Real @ [evalProg.diderot:372.41-49] 
                                  Var: nn @ [evalProg.diderot:372.46-48] 
                            Block @ [evalProg.diderot:372.51-376.0] 
                              [
                                IfThen @ [evalProg.diderot:373.13-374.13] 
                                  AndAlso @ [evalProg.diderot:373.17-31] 
                                    BinOp: > @ [evalProg.diderot:373.17-26] 
                                      Var: verb @ [evalProg.diderot:373.17-21] 
                                      Lit: 0 @ [evalProg.diderot:373.24-25] 
                                    Var: vv @ [evalProg.diderot:373.29-31] 
                                  Print @ [evalProg.diderot:373.33-121] 
                                    [
                                      Lit: "  (" @ [evalProg.diderot:373.39-44] 
                                      Var: ID @ [evalProg.diderot:373.46-48] 
                                      Lit: " F); v3rnd=" @ [evalProg.diderot:373.50-63] 
                                      Apply @ [evalProg.diderot:373.65-75] 
                                        Var: v3rnd @ [evalProg.diderot:373.65-70] 
                                        [
                                          Var: pos @ [evalProg.diderot:373.71-74] 
                                        ]
                                      Lit: " < " @ [evalProg.diderot:373.77-82] 
                                      BinOp: / @ [evalProg.diderot:373.84-105] 
                                        BinOp: - @ [evalProg.diderot:373.85-95] 
                                          Var: nn @ [evalProg.diderot:373.85-87] 
                                          Var: nnmax @ [evalProg.diderot:373.90-95] 
                                        Real @ [evalProg.diderot:373.97-105] 
                                          Var: nn @ [evalProg.diderot:373.102-104] 
                                      Lit: " => die \n" @ [evalProg.diderot:373.107-119] 
                                    ]
                                Die @ [evalProg.diderot:374.13-375.0] 
                              ]
                  ]
              Assign: first= @ [evalProg.diderot:380.5-381.0] 
                Lit: false @ [evalProg.diderot:380.14-19] 
            ]
      ]
    Collection @ [evalProg.diderot:424.1-425.0] 
      Comprehension @ [evalProg.diderot:424.19-69] 
        Apply @ [evalProg.diderot:424.21-39] 
          Var: point @ [evalProg.diderot:424.21-26] 
          [
            Subscript @ [evalProg.diderot:424.27-35] 
              Var: ipos @ [evalProg.diderot:424.27-31] 
              [
                Var: ii @ [evalProg.diderot:424.32-34] 
              ]
            Lit: 1 @ [evalProg.diderot:424.37-38] 
          ]
        [
          Iterator: ii @ [evalProg.diderot:424.42-68] 
            Range @ [evalProg.diderot:424.48-68] 
              Lit: 0 @ [evalProg.diderot:424.48-49] 
              BinOp: - @ [evalProg.diderot:424.53-68] 
                Apply @ [evalProg.diderot:424.53-65] 
                  Var: length @ [evalProg.diderot:424.53-59] 
                  [
                    Var: ipos @ [evalProg.diderot:424.60-64] 
                  ]
                Lit: 1 @ [evalProg.diderot:424.66-67] 
        ]
    Block @ [evalProg.diderot:383.8-424.0] 
      [
        Decl @ [evalProg.diderot:383.8-424.0] 
          Decl: pop= @ [evalProg.diderot:384.3-385.0] 
            Apply @ [evalProg.diderot:384.13-24] 
              Var: numActive @ [evalProg.diderot:384.13-22] 
              [ ]
        Decl @ [evalProg.diderot:383.8-424.0] 
          Decl: pc= @ [evalProg.diderot:385.3-386.0] 
            Cond @ [evalProg.diderot:385.12-38] 
              Lit: 1 @ [evalProg.diderot:385.12-13] 
              BinOp: != @ [evalProg.diderot:385.17-32] 
                Var: pop @ [evalProg.diderot:385.17-20] 
                Var: popLast @ [evalProg.diderot:385.24-31] 
              Lit: 0 @ [evalProg.diderot:385.37-38] 
        Assign: rpc= @ [evalProg.diderot:386.3-387.0] 
          Apply @ [evalProg.diderot:386.9-30] 
            Var: lerp @ [evalProg.diderot:386.9-13] 
            [
              Var: pc @ [evalProg.diderot:386.14-16] 
              Var: rpc @ [evalProg.diderot:386.18-21] 
              Var: pchist @ [evalProg.diderot:386.23-29] 
            ]
        Decl @ [evalProg.diderot:383.8-424.0] 
          Decl: allfound= @ [evalProg.diderot:387.3-388.0] 
            Apply @ [evalProg.diderot:387.19-50] 
              Var: all @ [evalProg.diderot:387.19-22] 
              [
                SeqComp @ [evalProg.diderot:387.19-50] 
                  Comprehension @ [evalProg.diderot:387.19-50] 
                    Select @ [evalProg.diderot:387.25-32] 
                      Var: P @ [evalProg.diderot:387.25-26] 
                      found
                    [
                      Iterator: P @ [evalProg.diderot:387.35-49] 
                        Select @ [evalProg.diderot:387.40-49] 
                          Var: point @ [evalProg.diderot:387.40-45] 
                          all
                    ]
              ]
        Decl @ [evalProg.diderot:383.8-424.0] 
          Decl: percfound= @ [evalProg.diderot:388.3-390.0] 
            BinOp: * @ [evalProg.diderot:389.5-58] 
              Lit: 100 @ [evalProg.diderot:389.5-8] 
              Apply @ [evalProg.diderot:389.10-58] 
                Var: mean @ [evalProg.diderot:389.10-14] 
                [
                  SeqComp @ [evalProg.diderot:389.10-58] 
                    Comprehension @ [evalProg.diderot:389.10-58] 
                      Cond @ [evalProg.diderot:389.17-41] 
                        Lit: 0.1e1 @ [evalProg.diderot:389.17-20] 
                        Select @ [evalProg.diderot:389.24-31] 
                          Var: P @ [evalProg.diderot:389.24-25] 
                          found
                        Lit: 0.e0 @ [evalProg.diderot:389.37-40] 
                      [
                        Iterator: P @ [evalProg.diderot:389.43-57] 
                          Select @ [evalProg.diderot:389.48-57] 
                            Var: point @ [evalProg.diderot:389.48-53] 
                            all
                      ]
                ]
        Decl @ [evalProg.diderot:383.8-424.0] 
          Decl: meancl= @ [evalProg.diderot:390.3-391.0] 
            Apply @ [evalProg.diderot:390.17-52] 
              Var: mean @ [evalProg.diderot:390.17-21] 
              [
                SeqComp @ [evalProg.diderot:390.17-52] 
                  Comprehension @ [evalProg.diderot:390.17-52] 
                    Select @ [evalProg.diderot:390.24-33] 
                      Var: P @ [evalProg.diderot:390.24-25] 
                      closest
                    [
                      Iterator: P @ [evalProg.diderot:390.36-51] 
                        Select @ [evalProg.diderot:390.41-50] 
                          Var: point @ [evalProg.diderot:390.41-46] 
                          all
                    ]
              ]
        Decl @ [evalProg.diderot:383.8-424.0] 
          Decl: varicl= @ [evalProg.diderot:391.3-392.0] 
            Apply @ [evalProg.diderot:391.17-65] 
              Var: mean @ [evalProg.diderot:391.17-21] 
              [
                SeqComp @ [evalProg.diderot:391.17-65] 
                  Comprehension @ [evalProg.diderot:391.17-65] 
                    BinOp: ^ @ [evalProg.diderot:391.24-47] 
                      BinOp: - @ [evalProg.diderot:391.25-43] 
                        Select @ [evalProg.diderot:391.25-34] 
                          Var: P @ [evalProg.diderot:391.25-26] 
                          closest
                        Var: meancl @ [evalProg.diderot:391.37-43] 
                      Lit: 2 @ [evalProg.diderot:391.45-46] 
                    [
                      Iterator: P @ [evalProg.diderot:391.49-64] 
                        Select @ [evalProg.diderot:391.54-63] 
                          Var: point @ [evalProg.diderot:391.54-59] 
                          all
                    ]
              ]
        Decl @ [evalProg.diderot:383.8-424.0] 
          Decl: covcl= @ [evalProg.diderot:392.3-393.0] 
            BinOp: / @ [evalProg.diderot:392.16-37] 
              Apply @ [evalProg.diderot:392.16-28] 
                Var: sqrt @ [evalProg.diderot:392.16-20] 
                [
                  Var: varicl @ [evalProg.diderot:392.21-27] 
                ]
              Var: meancl @ [evalProg.diderot:392.31-37] 
        Decl @ [evalProg.diderot:383.8-424.0] 
          Decl: maxmvmt= @ [evalProg.diderot:393.3-394.0] 
            Apply @ [evalProg.diderot:393.18-49] 
              Var: max @ [evalProg.diderot:393.18-21] 
              [
                SeqComp @ [evalProg.diderot:393.18-49] 
                  Comprehension @ [evalProg.diderot:393.18-49] 
                    Select @ [evalProg.diderot:393.24-30] 
                      Var: P @ [evalProg.diderot:393.24-25] 
                      mvmt
                    [
                      Iterator: P @ [evalProg.diderot:393.33-48] 
                        Select @ [evalProg.diderot:393.38-47] 
                          Var: point @ [evalProg.diderot:393.38-43] 
                          all
                    ]
              ]
        Print @ [evalProg.diderot:394.3-403.0] 
          [
            Lit: "======= finished iter " @ [evalProg.diderot:394.9-33] 
            Var: iter @ [evalProg.diderot:394.35-39] 
            Lit: " w/ " @ [evalProg.diderot:394.41-47] 
            Var: pop @ [evalProg.diderot:394.49-52] 
            Lit: ")" @ [evalProg.diderot:394.54-57] 
            Lit: "; %found=" @ [evalProg.diderot:395.9-20] 
            Var: percfound @ [evalProg.diderot:395.22-31] 
            Lit: "; mean(hh)=" @ [evalProg.diderot:396.9-22] 
            Apply @ [evalProg.diderot:396.24-53] 
              Var: mean @ [evalProg.diderot:396.24-28] 
              [
                SeqComp @ [evalProg.diderot:396.24-53] 
                  Comprehension @ [evalProg.diderot:396.24-53] 
                    Select @ [evalProg.diderot:396.31-35] 
                      Var: P @ [evalProg.diderot:396.31-32] 
                      hh
                    [
                      Iterator: P @ [evalProg.diderot:396.38-52] 
                        Select @ [evalProg.diderot:396.43-52] 
                          Var: point @ [evalProg.diderot:396.43-48] 
                          all
                    ]
              ]
            Lit: "; mean(cl)=" @ [evalProg.diderot:397.9-22] 
            Var: meancl @ [evalProg.diderot:397.24-30] 
            Lit: "; COV(cl)=" @ [evalProg.diderot:398.9-21] 
            Var: covcl @ [evalProg.diderot:398.23-28] 
            Lit: "; max(mvmt)=" @ [evalProg.diderot:399.9-23] 
            Var: maxmvmt @ [evalProg.diderot:399.25-32] 
            Lit: "; pc=" @ [evalProg.diderot:400.9-16] 
            Var: pc @ [evalProg.diderot:400.18-20] 
            Lit: "; rpc=" @ [evalProg.diderot:401.9-17] 
            Var: rpc @ [evalProg.diderot:401.19-22] 
            Lit: "\n" @ [evalProg.diderot:402.9-13] 
          ]
        IfThenElse @ [evalProg.diderot:403.3-421.0] 
          AndAlso @ [evalProg.diderot:403.7-406.22] 
            Var: allfound @ [evalProg.diderot:403.7-15] 
            AndAlso @ [evalProg.diderot:404.7-406.22] 
              BinOp: < @ [evalProg.diderot:404.10-405.7] 
                Var: covcl @ [evalProg.diderot:404.10-15] 
                Var: geoEps @ [evalProg.diderot:404.18-24] 
              AndAlso @ [evalProg.diderot:405.7-406.22] 
                BinOp: < @ [evalProg.diderot:405.10-406.7] 
                  Var: maxmvmt @ [evalProg.diderot:405.10-17] 
                  Var: mvmtEps @ [evalProg.diderot:405.20-27] 
                BinOp: < @ [evalProg.diderot:406.10-22] 
                  Var: rpc @ [evalProg.diderot:406.10-13] 
                  Var: rpcEps @ [evalProg.diderot:406.16-22] 
          Block @ [evalProg.diderot:406.24-414.0] 
            [
              Print @ [evalProg.diderot:407.5-412.0] 
                [
                  Lit: "======= Stabilizing " @ [evalProg.diderot:407.11-33] 
                  Apply @ [evalProg.diderot:407.35-46] 
                    Var: numActive @ [evalProg.diderot:407.35-44] 
                    [ ]
                  Lit: " (iter " @ [evalProg.diderot:407.48-57] 
                  Var: iter @ [evalProg.diderot:407.59-63] 
                  Lit: ")" @ [evalProg.diderot:407.65-68] 
                  Lit: "; COV(cl)=" @ [evalProg.diderot:408.11-23] 
                  Var: covcl @ [evalProg.diderot:408.25-30] 
                  Lit: " < " @ [evalProg.diderot:408.32-37] 
                  Var: geoEps @ [evalProg.diderot:408.39-45] 
                  Lit: "; max(mvmt)=" @ [evalProg.diderot:409.11-25] 
                  Var: maxmvmt @ [evalProg.diderot:409.27-34] 
                  Lit: " < " @ [evalProg.diderot:409.36-41] 
                  Var: mvmtEps @ [evalProg.diderot:409.43-50] 
                  Lit: "; rpc=" @ [evalProg.diderot:410.11-19] 
                  Var: rpc @ [evalProg.diderot:410.21-24] 
                  Lit: " < " @ [evalProg.diderot:410.26-31] 
                  Var: rpcEps @ [evalProg.diderot:410.33-39] 
                  Lit: "\n" @ [evalProg.diderot:411.11-15] 
                ]
              Stabilize @ [evalProg.diderot:412.5-413.0] 
            ]
          Print @ [evalProg.diderot:415.9-420.0] 
            [
              Lit: "======= Stabilizing " @ [evalProg.diderot:415.15-37] 
              Apply @ [evalProg.diderot:415.39-50] 
                Var: numActive @ [evalProg.diderot:415.39-48] 
                [ ]
              Lit: " (iter " @ [evalProg.diderot:415.52-61] 
              Var: iter @ [evalProg.diderot:415.63-67] 
              Lit: ")" @ [evalProg.diderot:415.69-72] 
              Lit: "; COV(cl)=" @ [evalProg.diderot:416.11-23] 
              Var: covcl @ [evalProg.diderot:416.25-30] 
              Lit: " > " @ [evalProg.diderot:416.32-37] 
              Var: geoEps @ [evalProg.diderot:416.39-45] 
              Lit: "; max(mvmt)=" @ [evalProg.diderot:417.11-25] 
              Var: maxmvmt @ [evalProg.diderot:417.27-34] 
              Lit: " > " @ [evalProg.diderot:417.36-41] 
              Var: mvmtEps @ [evalProg.diderot:417.43-50] 
              Lit: "; rpc=" @ [evalProg.diderot:418.11-19] 
              Var: rpc @ [evalProg.diderot:418.21-24] 
              Lit: " > " @ [evalProg.diderot:418.26-31] 
              Var: rpcEps @ [evalProg.diderot:418.33-39] 
              Lit: "\n" @ [evalProg.diderot:419.11-15] 
            ]
        Assign: iter+= @ [evalProg.diderot:421.3-422.0] 
          Lit: 1 @ [evalProg.diderot:421.11-12] 
        Assign: popLast= @ [evalProg.diderot:422.3-423.0] 
          Var: pop @ [evalProg.diderot:422.13-16] 
      ]
/* end program */
/* AST: After typechecking */
properties: StabilizeAll,GlobalReduce,StrandSets,GlobalUpdate,NewStrands,StrandCommunication,StrandsMayDie,HasInputs,HasGlobals,HasConsts,ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
const int dim = 3;
input FemType: Mesh with type var:NONE meshData = loadFem(Mesh);
input FemType: Space with type var:mesh_t space = loadFem(Space);
input FemType: FemFunc with type var:fns_t data = loadFem(FemFunc);
input ("Feature strength threshold") real fStrTh;
input ("feature mask threshold") real fMaskTh = 0.e0;
input ("Bias in feature strength computing") real fBias = 0.e0;
input ("Target inter-particle distance") real tipd = 0.1e1;
input ("Min allowed birth distance (> 0.7351)") real mabd = 0.75e0;
input ("Max allowed travel to or on feature") real travMax = 0.1e2;
input ("Max allowed # feature steps ") int nfsMax = 20;
input ("Scaling in sufficient decrease test") real gdeTest = 0.5e0;
input ("How to scale stepsize for backtrack") real gdeBack = 0.5e0;
input ("Opportunistic stepsize increase") real gdeOppor = 0.12e1;
input ("Conv. thresh. on feature step size") real fsEps;
input ("Conv. thresh. on system geometry") real geoEps = 0.1e0;
input ("Conv. thresh. on point movement") real mvmtEps = 0.1e-1;
input ("Conv. thresh. on recent pop. changes") real rpcEps = 0.1e-1;
input ("Motion limit before PC") real pcmvEps = 0.3e0;
input ("Which isosurface to sample") real isoval = 0.e0;
input ("Verbosity level") int verb = 0;
input ("Scaling (<=1 for stability) on fStep") real sfs = 0.5e0;
input ("How history matters for convergence") real hist = 0.5e0;
input ("periodicity of population control (PC)") int pcp = 5;
input ("Initial point positions") vec3[] ipos;
input int fDim = 2;
function bool != (FemType: MeshCell with type var:mesh_t cell1, FemType: MeshCell with type var:mesh_t cell1)
{
  return != (extractFemItem(cell1, int, CellIndex(Mesh)), extractFemItem(cell1, int, CellIndex(Mesh)));
  }
function bool == (FemType: MeshCell with type var:mesh_t cell1, FemType: MeshCell with type var:mesh_t cell1)
{
  return == (extractFemItem(cell1, int, CellIndex(Mesh)), extractFemItem(cell1, int, CellIndex(Mesh)));
  }
function FemType: MeshPos with type var:mesh_t findPos (FemType: Mesh with type var:mesh_t mesh, vec3 pos)
{
  xn = [0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0, 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0, 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0];
  newtonInt = 0;
  cellInt = extractFemItem(mesh, int, StartCell(Mesh));
  numCell = - (extractFemItem(mesh, int, NumCell(Mesh)), 1);
  yayCells = extractFemItem(mesh, pos : vec3, int[], NearbyCell(File=spat.in)(Mesh));
  foreach (int cellItter in yayCells) {
    xn = [0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0, 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0, 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0];
    cellInt = cellItter;
    A = @<#; %3; $[3,3]> (inv<#; %3> (∇⊗<#; %3; $[]; %3> (femField(mesh,cellInt,field(3)[3], Transform, ))), [0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0, 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0, 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0]);
    foreach (int newtonItter in $range (0, 16)) {
      delta = @<#; %3; $[3]> (•<#; %3; $[3,3]; $[3]; $[3]> (A, -<#; %3; $[3]> (femField(mesh,cellInt,field(3)[3], Transform, ), pos)), xn);
      xn = -<$[3]> (xn, delta);
      if >= (* (0.1e-7, 0.1e-7), •<$[3]; $[3]; $[]> (delta, delta)) {
        if $and (> (+<$[]> (0.1e1, 0.1e-7), •<$[3]; $[3]; $[]> ([0.1e1, 0.1e1, 0.1e1], xn)), $and (> (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], xn)[0], -0.e0), $and (> (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], xn)[1], -0.e0), > (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], xn)[2], -0.e0)))) {
          return extractFemItemN(AllBuild(MeshPos),FemType: Mesh with type var:NONE,int,vec3,vec3 (mesh, cellInt, xn, pos)):FemType: MeshPos with type var:mesh_t;
          }
        }
      }
    }
  return extractFemItemN(InvalidBuild(MeshPos),FemType: Mesh with type var:NONE (mesh)):FemType: MeshPos with type var:mesh_t;
  }
function FemType: RefCell with type var:mesh_t refcell (FemType: Mesh with type var:NONE arg0)
{
  return extractFemItem(arg0, FemType: RefCell with type var:mesh_t, RefCell(Mesh));
  }
function FemType: MeshCell with type var:mesh_t[] cells (FemType: Mesh with type var:NONE arg0)
{
  return extractFemItem(arg0, FemType: MeshCell with type var:mesh_t[], Cells(Mesh));
  }
function FemType: MeshCell with type var:mesh_t[] cells (FemType: Mesh with type var:NONE arg0)
{
  return {loadFem(MeshCell) | int i in $range (0, extractFemItem(arg0, int, NumCell(Mesh)))};
  }
function int numCell (FemType: Mesh with type var:NONE arg0)
{
  return extractFemItem(arg0, int, NumCell(Mesh));
  }
function tensor[3,3,3,3] mesh_t_transform_3 (vec3 pos, int cell, FemType: Mesh with type var:NONE mesh)
{
  return @<#; %3; $[3,3,3,3]> (∇⊗<#; %3; $[3,3]; %3> (∇⊗<#; %3; $[3]; %3> (∇⊗<#; %3; $[]; %3> (femField(mesh,cell,field(3)[3], Transform, )))), pos);
  }
function tensor[3,3,3] mesh_t_transform_2 (vec3 pos, int cell, FemType: Mesh with type var:NONE mesh)
{
  return @<#; %3; $[3,3,3]> (∇⊗<#; %3; $[3]; %3> (∇⊗<#; %3; $[]; %3> (femField(mesh,cell,field(3)[3], Transform, ))), pos);
  }
function mat3 mesh_t_transform_1 (vec3 pos, int cell, FemType: Mesh with type var:NONE mesh)
{
  return @<#; %3; $[3,3]> (∇⊗<#; %3; $[]; %3> (femField(mesh,cell,field(3)[3], Transform, )), pos);
  }
function vec3 mesh_t_transform_0 (vec3 pos, int cell, FemType: Mesh with type var:NONE mesh)
{
  return @<#; %3; $[3]> (femField(mesh,cell,field(3)[3], Transform, ), pos);
  }
function FemType: MeshPos with type var:mesh_t _mesh_t_newtonInverse (vec3 pos, int cellInt, FemType: Mesh with type var:NONE mesh)
{
  xn = [0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0, 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0, 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0];
  A = @<#; %3; $[3,3]> (inv<#; %3> (∇⊗<#; %3; $[]; %3> (femField(mesh,cellInt,field(3)[3], Transform, ))), [0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0, 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0, 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0]);
  foreach (int itter in $range (0, 16)) {
    delta = @<#; %3; $[3]> (•<#; %3; $[3,3]; $[3]; $[3]> (A, -<#; %3; $[3]> (femField(mesh,cellInt,field(3)[3], Transform, ), pos)), xn);
    xn = -<$[3]> (xn, delta);
    if >= (* (0.1e-7, 0.1e-7), •<$[3]; $[3]; $[]> (delta, delta)) {
      if $and (> (+<$[]> (0.1e1, 0.1e-7), •<$[3]; $[3]; $[]> ([0.1e1, 0.1e1, 0.1e1], xn)), $and (> (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], xn)[0], -0.e0), $and (> (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], xn)[1], -0.e0), > (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], xn)[2], -0.e0)))) {
        return extractFemItemN(AllBuild(MeshPos),FemType: Mesh with type var:NONE,int,vec3,vec3 (mesh, cellInt, xn, pos)):FemType: MeshPos with type var:mesh_t;
        }
      else {
        return extractFemItemN(InvalidBuild(MeshPos),FemType: Mesh with type var:NONE (mesh)):FemType: MeshPos with type var:mesh_t;
        }
      }
    }
  return extractFemItemN(InvalidBuild(MeshPos),FemType: Mesh with type var:NONE (mesh)):FemType: MeshPos with type var:mesh_t;
  }
function FemType: MeshPos with type var:mesh_t _mesh_pos_mesh_t_build_world_pos (FemType: MeshPos with type var:mesh_t pos)
{
  if extractFemItem(pos, bool, WorldTest(MeshPos)) {
    return extractFemItemN(NewWorld(MeshPos),FemType: MeshPos with type var:mesh_t,vec3 (pos, mesh_t_transform_0 (extractFemItem(pos, vec3, RefPos(MeshPos)), extractFemItem(pos, int, CellIndex(MeshPos)), extractFem(Mesh,pos )))):FemType: MeshPos with type var:mesh_t;
    }
  else {
    return pos;
    }
  }
function vec3 worldPos (FemType: MeshPos with type var:mesh_t pos)
{
  return mesh_t_transform_0 (extractFemItem(pos, vec3, RefPos(MeshPos)), extractFemItem(pos, int, CellIndex(MeshPos)), extractFem(Mesh,pos ));
  }
function FemType: MeshPos with type var:mesh_t $exitPos (FemType: Mesh with type var:NONE mesh, int cellId, vec3 refPos, vec3 dPos, real[2] time)
{
  if != (-1, $sub<int; %2> (nextCell4 ($r2i (time[1]), cellId, mesh), 0)) {
    {
      }
    return extractFemItemN(RefBuild(Mesh),FemType: Mesh with type var:NONE,int,vec3,int (mesh, $sub<int; %2> (nextCell4 ($r2i (time[1]), cellId, mesh), 0), [•<$[4,4]; $[4]; $[4]> ($sub<mat4; %4> ($sub<mat4[4]; %4> ({{[[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.971445146547e-16, 0.e0, 0.e0, 0.1e1]], [[0.57735026919e0, 0.57735026919e0, 0.57735026919e0, -0.57735026919e0], [-0.333333333333e0, 0.666666666667e0, -0.333333333333e0, 0.333333333333e0], [-0.333333333333e0, -0.333333333333e0, 0.666666666667e0, 0.333333333333e0], [0.971445146547e-16, 0.e0, 0.e0, 0.1e1]], [[-0.333333333333e0, 0.666666666667e0, -0.333333333333e0, 0.333333333333e0], [-0.57735026919e0, -0.57735026919e0, -0.57735026919e0, 0.57735026919e0], [-0.333333333333e0, -0.333333333333e0, 0.666666666667e0, 0.333333333333e0], [0.971445146547e-16, 0.e0, 0.e0, 0.1e1]], [[-0.333333333333e0, 0.666666666667e0, -0.333333333333e0, 0.333333333333e0], [-0.333333333333e0, -0.333333333333e0, 0.666666666667e0, 0.333333333333e0], [0.57735026919e0, 0.57735026919e0, 0.57735026919e0, -0.57735026919e0], [0.971445146547e-16, 0.e0, 0.e0, 0.1e1]]}, {[[0.57735026919e0, -0.1e1, -0.1e1, 0.1e1], [0.57735026919e0, 0.1e1, 0.e0, 0.e0], [0.57735026919e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.e0, 0.1e1, 0.e0, 0.e0], [-0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]]}, {[[-0.1e1, -0.57735026919e0, -0.1e1, 0.1e1], [0.1e1, -0.57735026919e0, 0.e0, 0.e0], [0.e0, -0.57735026919e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.e0, -0.1e1, 0.e0, 0.e0], [0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, -0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]]}, {[[-0.1e1, -0.1e1, 0.57735026919e0, 0.1e1], [0.1e1, 0.e0, 0.57735026919e0, 0.e0], [0.e0, 0.1e1, 0.57735026919e0, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.e0, 0.e0, 0.1e1, 0.e0], [0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.e0, -0.1e1, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]]}}, $r2i (time[1])), $sub<int; %2> (nextCell4 ($r2i (time[1]), cellId, mesh), 1)), [+<$[3]> (*<$[3]> (time[0], dPos), refPos)[0], +<$[3]> (*<$[3]> (time[0], dPos), refPos)[1], +<$[3]> (*<$[3]> (time[0], dPos), refPos)[2], 0.1e1])[0], •<$[4,4]; $[4]; $[4]> ($sub<mat4; %4> ($sub<mat4[4]; %4> ({{[[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.971445146547e-16, 0.e0, 0.e0, 0.1e1]], [[0.57735026919e0, 0.57735026919e0, 0.57735026919e0, -0.57735026919e0], [-0.333333333333e0, 0.666666666667e0, -0.333333333333e0, 0.333333333333e0], [-0.333333333333e0, -0.333333333333e0, 0.666666666667e0, 0.333333333333e0], [0.971445146547e-16, 0.e0, 0.e0, 0.1e1]], [[-0.333333333333e0, 0.666666666667e0, -0.333333333333e0, 0.333333333333e0], [-0.57735026919e0, -0.57735026919e0, -0.57735026919e0, 0.57735026919e0], [-0.333333333333e0, -0.333333333333e0, 0.666666666667e0, 0.333333333333e0], [0.971445146547e-16, 0.e0, 0.e0, 0.1e1]], [[-0.333333333333e0, 0.666666666667e0, -0.333333333333e0, 0.333333333333e0], [-0.333333333333e0, -0.333333333333e0, 0.666666666667e0, 0.333333333333e0], [0.57735026919e0, 0.57735026919e0, 0.57735026919e0, -0.57735026919e0], [0.971445146547e-16, 0.e0, 0.e0, 0.1e1]]}, {[[0.57735026919e0, -0.1e1, -0.1e1, 0.1e1], [0.57735026919e0, 0.1e1, 0.e0, 0.e0], [0.57735026919e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.e0, 0.1e1, 0.e0, 0.e0], [-0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]]}, {[[-0.1e1, -0.57735026919e0, -0.1e1, 0.1e1], [0.1e1, -0.57735026919e0, 0.e0, 0.e0], [0.e0, -0.57735026919e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.e0, -0.1e1, 0.e0, 0.e0], [0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, -0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]]}, {[[-0.1e1, -0.1e1, 0.57735026919e0, 0.1e1], [0.1e1, 0.e0, 0.57735026919e0, 0.e0], [0.e0, 0.1e1, 0.57735026919e0, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.e0, 0.e0, 0.1e1, 0.e0], [0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.e0, -0.1e1, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]]}}, $r2i (time[1])), $sub<int; %2> (nextCell4 ($r2i (time[1]), cellId, mesh), 1)), [+<$[3]> (*<$[3]> (time[0], dPos), refPos)[0], +<$[3]> (*<$[3]> (time[0], dPos), refPos)[1], +<$[3]> (*<$[3]> (time[0], dPos), refPos)[2], 0.1e1])[1], •<$[4,4]; $[4]; $[4]> ($sub<mat4; %4> ($sub<mat4[4]; %4> ({{[[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.971445146547e-16, 0.e0, 0.e0, 0.1e1]], [[0.57735026919e0, 0.57735026919e0, 0.57735026919e0, -0.57735026919e0], [-0.333333333333e0, 0.666666666667e0, -0.333333333333e0, 0.333333333333e0], [-0.333333333333e0, -0.333333333333e0, 0.666666666667e0, 0.333333333333e0], [0.971445146547e-16, 0.e0, 0.e0, 0.1e1]], [[-0.333333333333e0, 0.666666666667e0, -0.333333333333e0, 0.333333333333e0], [-0.57735026919e0, -0.57735026919e0, -0.57735026919e0, 0.57735026919e0], [-0.333333333333e0, -0.333333333333e0, 0.666666666667e0, 0.333333333333e0], [0.971445146547e-16, 0.e0, 0.e0, 0.1e1]], [[-0.333333333333e0, 0.666666666667e0, -0.333333333333e0, 0.333333333333e0], [-0.333333333333e0, -0.333333333333e0, 0.666666666667e0, 0.333333333333e0], [0.57735026919e0, 0.57735026919e0, 0.57735026919e0, -0.57735026919e0], [0.971445146547e-16, 0.e0, 0.e0, 0.1e1]]}, {[[0.57735026919e0, -0.1e1, -0.1e1, 0.1e1], [0.57735026919e0, 0.1e1, 0.e0, 0.e0], [0.57735026919e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.e0, 0.1e1, 0.e0, 0.e0], [-0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]]}, {[[-0.1e1, -0.57735026919e0, -0.1e1, 0.1e1], [0.1e1, -0.57735026919e0, 0.e0, 0.e0], [0.e0, -0.57735026919e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.e0, -0.1e1, 0.e0, 0.e0], [0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, -0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]]}, {[[-0.1e1, -0.1e1, 0.57735026919e0, 0.1e1], [0.1e1, 0.e0, 0.57735026919e0, 0.e0], [0.e0, 0.1e1, 0.57735026919e0, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.e0, 0.e0, 0.1e1, 0.e0], [0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.e0, -0.1e1, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]]}}, $r2i (time[1])), $sub<int; %2> (nextCell4 ($r2i (time[1]), cellId, mesh), 1)), [+<$[3]> (*<$[3]> (time[0], dPos), refPos)[0], +<$[3]> (*<$[3]> (time[0], dPos), refPos)[1], +<$[3]> (*<$[3]> (time[0], dPos), refPos)[2], 0.1e1])[2]], $sub<int; %2> (nextCell4 ($r2i (time[1]), cellId, mesh), 1))):FemType: MeshPos with type var:mesh_t;
    }
  else {
    return extractFemItemN(InvalidBuildBoundary(MeshPos),FemType: Mesh with type var:NONE,vec3 (mesh, +<$[3]> (*<$[3]> (time[0], dPos), refPos))):FemType: MeshPos with type var:mesh_t;
    }
  }
function int[2] nextCell4 (int faceIdx, int cell, FemType: Mesh with type var:NONE mesh)
{
  {
    if == (faceIdx, -1) {
      return {-1, -1};
      }
    else {
      return extractFemItemN(CellFaceCell(Mesh),FemType: Mesh with type var:NONE,int (mesh, + (* (cell, 8), * (faceIdx, 2)))):int[2];
      }
    }
  }
function vec2 _enter (vec3 refPos, vec3 dPos)
{
  real time = +inf;
  int face = -1;
  real faceTime = -inf;
  if $and (>= (/ (-<$[]> (0.57735026919e0, •<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], refPos)), •<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], dPos)), -0.1e-7), $and (> (time, / (-<$[]> (0.57735026919e0, •<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], refPos)), •<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], dPos))), >= (|()|<$[]> (•<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], dPos)), 0.1e-7)))
    if $and (> (+<$[]> (0.1e1, 0.1e-7), •<$[3]; $[3]; $[]> ([0.1e1, 0.1e1, 0.1e1], +<$[3]> (refPos, *<$[3]> (dPos, / (-<$[]> (0.57735026919e0, •<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], refPos)), •<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], dPos)))))), $and (> (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], +<$[3]> (refPos, *<$[3]> (dPos, / (-<$[]> (0.57735026919e0, •<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], refPos)), •<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], dPos)))))[0], -0.e0), $and (> (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], +<$[3]> (refPos, *<$[3]> (dPos, / (-<$[]> (0.57735026919e0, •<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], refPos)), •<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], dPos)))))[1], -0.e0), > (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], +<$[3]> (refPos, *<$[3]> (dPos, / (-<$[]> (0.57735026919e0, •<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], refPos)), •<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], dPos)))))[2], -0.e0)))) {
      time = / (-<$[]> (0.57735026919e0, •<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], refPos)), •<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], dPos));
      face = 0;
      }
    if $and (>= (/ (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], dPos)), -0.1e-7), $and (> (time, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], dPos))), >= (|()|<$[]> (•<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], dPos)), 0.1e-7)))
    if $and (> (+<$[]> (0.1e1, 0.1e-7), •<$[3]; $[3]; $[]> ([0.1e1, 0.1e1, 0.1e1], +<$[3]> (refPos, *<$[3]> (dPos, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], dPos)))))), $and (> (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], +<$[3]> (refPos, *<$[3]> (dPos, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], dPos)))))[0], -0.e0), $and (> (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], +<$[3]> (refPos, *<$[3]> (dPos, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], dPos)))))[1], -0.e0), > (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], +<$[3]> (refPos, *<$[3]> (dPos, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], dPos)))))[2], -0.e0)))) {
      time = / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], dPos));
      face = 1;
      }
    if $and (>= (/ (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], dPos)), -0.1e-7), $and (> (time, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], dPos))), >= (|()|<$[]> (•<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], dPos)), 0.1e-7)))
    if $and (> (+<$[]> (0.1e1, 0.1e-7), •<$[3]; $[3]; $[]> ([0.1e1, 0.1e1, 0.1e1], +<$[3]> (refPos, *<$[3]> (dPos, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], dPos)))))), $and (> (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], +<$[3]> (refPos, *<$[3]> (dPos, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], dPos)))))[0], -0.e0), $and (> (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], +<$[3]> (refPos, *<$[3]> (dPos, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], dPos)))))[1], -0.e0), > (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], +<$[3]> (refPos, *<$[3]> (dPos, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], dPos)))))[2], -0.e0)))) {
      time = / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], dPos));
      face = 2;
      }
    if $and (>= (/ (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], refPos)), •<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], dPos)), -0.1e-7), $and (> (time, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], refPos)), •<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], dPos))), >= (|()|<$[]> (•<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], dPos)), 0.1e-7)))
    if $and (> (+<$[]> (0.1e1, 0.1e-7), •<$[3]; $[3]; $[]> ([0.1e1, 0.1e1, 0.1e1], +<$[3]> (refPos, *<$[3]> (dPos, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], refPos)), •<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], dPos)))))), $and (> (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], +<$[3]> (refPos, *<$[3]> (dPos, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], refPos)), •<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], dPos)))))[0], -0.e0), $and (> (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], +<$[3]> (refPos, *<$[3]> (dPos, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], refPos)), •<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], dPos)))))[1], -0.e0), > (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], +<$[3]> (refPos, *<$[3]> (dPos, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], refPos)), •<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], dPos)))))[2], -0.e0)))) {
      time = / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], refPos)), •<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], dPos));
      face = 3;
      }
    if $and (!= (face, -1), $and (> (+<$[]> (0.1e1, 0.1e-7), •<$[3]; $[3]; $[]> ([0.1e1, 0.1e1, 0.1e1], +<$[3]> (refPos, *<$[3]> (dPos, max (time, 0.e0))))), $and (> (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], +<$[3]> (refPos, *<$[3]> (dPos, max (time, 0.e0))))[0], -0.e0), $and (> (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], +<$[3]> (refPos, *<$[3]> (dPos, max (time, 0.e0))))[1], -0.e0), > (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], +<$[3]> (refPos, *<$[3]> (dPos, max (time, 0.e0))))[2], -0.e0))))) {
    return [max (time, 0.e0), (real)face];
    }
  else {
    return [(real)-1, (real)-1];
    }
  }
function vec2 _exit (vec3 refPos, vec3 dPos, int i)
{
  real time = +inf;
  int face = -1;
  real faceTime = -inf;
  if $and (>= (/ (-<$[]> (0.57735026919e0, •<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], refPos)), •<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], dPos)), -0.1e-7), $and (> (time, / (-<$[]> (0.57735026919e0, •<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], refPos)), •<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], dPos))), >= (|()|<$[]> (•<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], dPos)), 0.1e-7)))
    if != (i, 0) {
      time = / (-<$[]> (0.57735026919e0, •<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], refPos)), •<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], dPos));
      face = 0;
      }
    else {
      faceTime = / (-<$[]> (0.57735026919e0, •<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], refPos)), •<$[3]; $[3]; $[]> ([0.57735026919e0, 0.57735026919e0, 0.57735026919e0], dPos));
      }
    if $and (>= (/ (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], dPos)), -0.1e-7), $and (> (time, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], dPos))), >= (|()|<$[]> (•<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], dPos)), 0.1e-7)))
    if != (i, 1) {
      time = / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], dPos));
      face = 1;
      }
    else {
      faceTime = / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([-0.1e1, 0.e0, 0.e0], dPos));
      }
    if $and (>= (/ (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], dPos)), -0.1e-7), $and (> (time, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], dPos))), >= (|()|<$[]> (•<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], dPos)), 0.1e-7)))
    if != (i, 2) {
      time = / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], dPos));
      face = 2;
      }
    else {
      faceTime = / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([0.e0, -0.1e1, 0.e0], dPos));
      }
    if $and (>= (/ (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], refPos)), •<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], dPos)), -0.1e-7), $and (> (time, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], refPos)), •<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], dPos))), >= (|()|<$[]> (•<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], dPos)), 0.1e-7)))
    if != (i, 3) {
      time = / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], refPos)), •<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], dPos));
      face = 3;
      }
    else {
      faceTime = / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], refPos)), •<$[3]; $[3]; $[]> ([0.e0, 0.e0, -0.1e1], dPos));
      }
    if $and (!= (face, -1), $and (> (+<$[]> (0.1e1, 0.1e-7), •<$[3]; $[3]; $[]> ([0.1e1, 0.1e1, 0.1e1], +<$[3]> (refPos, *<$[3]> (dPos, max (time, 0.e0))))), $and (> (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], +<$[3]> (refPos, *<$[3]> (dPos, max (time, 0.e0))))[0], -0.e0), $and (> (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], +<$[3]> (refPos, *<$[3]> (dPos, max (time, 0.e0))))[1], -0.e0), > (+<$[3]> ([0.1e-7, 0.1e-7, 0.1e-7], +<$[3]> (refPos, *<$[3]> (dPos, max (time, 0.e0))))[2], -0.e0))))) {
    return [max (time, 0.e0), (real)face];
    }
  else {
    if == (-inf, faceTime) {
      return [(real)-1, (real)-1];
      }
    else {
      return [max (faceTime, 0.e0), (real)i];
      }
    }
  }
function FemType: Mesh with type var:mesh_t domain (FemType: Space with type var:mesh_t arg0)
{
  return extractFem(Mesh,arg0 );
  }
function FemType: Space with type var:mesh_t space (FemType: FemFunc with type var:fns_t arg0)
{
  return extractFem(Space,arg0 );
  }
function FemType: FuncCell with type var:func_t funcCell (FemType: FemFunc with type var:fns_t arg0, FemType: MeshCell with type var:mesh_t arg1)
{
  return loadFem(FuncCell);
  }
field(3)[] F = ∘<#; %3; $[]; %3; $[3]> (femField(data,extractFem(Mesh,extractFem(Space,data ) ),field(3)[], refField, findPos), femField(extractFem(Mesh,extractFem(Space,data ) ),extractFem(Mesh,extractFem(Space,data ) ),field(3)[3], InvTransform, findPos));
FemType: RefCell with type var:mesh_t simplex = refcell (meshData);
function bool insideTest (vec3 x)
{
  vec3 mid = -<$[3]> (x, [0.e0, 0.e0, 0.e0]);
  bool z = (> (|()|<$[]> (mid[0]), 0.1e0) && (> (|()|<$[]> (mid[1]), 0.1e0) && > (|()|<$[]> (mid[2]), 0.1e0)));
  return (< (|()|<$[3]> (mid), 0.4e1) && > (|()|<$[3]> (mid), 0.3e1));
  return (<= (|()|<$[]> (mid[0]), 0.5e1) && (<= (|()|<$[]> (mid[1]), 0.5e1) && <= (|()|<$[]> (mid[2]), 0.5e1)));
  }
function vec3 grad (vec3 s)
{
  real x = s[0];
  real y = s[1];
  real z = s[2];
  vec3 g = [* (* (* ((real)2, x), ^ (z, 2)), cos (+<$[]> (+<$[]> (^ (x, 2), ^ (y, 2)), ^ (z, 2)))), * (* (* ((real)2, y), ^ (z, 2)), cos (+<$[]> (+<$[]> (^ (x, 2), ^ (y, 2)), ^ (z, 2)))), +<$[]> (* (* ((real)2, ^ (z, 3)), cos (+<$[]> (+<$[]> (^ (x, 2), ^ (y, 2)), ^ (z, 2)))), * (* ((real)2, z), sin (+<$[]> (+<$[]> (^ (x, 2), ^ (y, 2)), ^ (z, 2)))))];
  return g;
  }
function mat3 hess (vec3 s)
{
  real x = s[0];
  real y = s[1];
  real z = s[2];
  mat3 hess = [[+<$[]> (* (* (* ((real)(unary - (4)), ^ (x, 2)), ^ (z, 2)), sin (+<$[]> (+<$[]> (^ (x, 2), ^ (y, 2)), ^ (z, 2)))), * (* ((real)2, ^ (z, 2)), cos (+<$[]> (+<$[]> (^ (x, 2), ^ (y, 2)), ^ (z, 2))))), * (* (* (* ((real)(unary - (4)), x), y), ^ (z, 2)), sin (+<$[]> (+<$[]> (^ (x, 2), ^ (y, 2)), ^ (z, 2)))), +<$[]> (* (* (* ((real)(unary - (4)), x), ^ (z, 3)), sin (+<$[]> (+<$[]> (^ (x, 2), ^ (y, 2)), ^ (z, 2)))), * (* (* ((real)4, x), z), cos (+<$[]> (+<$[]> (^ (x, 2), ^ (y, 2)), ^ (z, 2)))))], [* (* (* (* ((real)(unary - (4)), x), y), ^ (z, 2)), sin (+<$[]> (+<$[]> (^ (x, 2), ^ (y, 2)), ^ (z, 2)))), +<$[]> (* (* (* ((real)(unary - (4)), ^ (y, 2)), ^ (z, 2)), sin (+<$[]> (+<$[]> (^ (x, 2), ^ (y, 2)), ^ (z, 2)))), * (* ((real)2, ^ (z, 2)), cos (+<$[]> (+<$[]> (^ (x, 2), ^ (y, 2)), ^ (z, 2))))), +<$[]> (* (* (* ((real)(unary - (4)), y), ^ (z, 3)), sin (+<$[]> (+<$[]> (^ (x, 2), ^ (y, 2)), ^ (z, 2)))), * (* (* ((real)4, y), z), cos (+<$[]> (+<$[]> (^ (x, 2), ^ (y, 2)), ^ (z, 2)))))], [+<$[]> (* (* (* ((real)(unary - (4)), x), ^ (z, 3)), sin (+<$[]> (+<$[]> (^ (x, 2), ^ (y, 2)), ^ (z, 2)))), * (* (* ((real)4, x), z), cos (+<$[]> (+<$[]> (^ (x, 2), ^ (y, 2)), ^ (z, 2))))), +<$[]> (* (* (* ((real)(unary - (4)), y), ^ (z, 3)), sin (+<$[]> (+<$[]> (^ (x, 2), ^ (y, 2)), ^ (z, 2)))), * (* (* ((real)4, y), z), cos (+<$[]> (+<$[]> (^ (x, 2), ^ (y, 2)), ^ (z, 2))))), +<$[]> (+<$[]> (* (* ((real)(unary - (4)), ^ (z, 4)), sin (+<$[]> (+<$[]> (^ (x, 2), ^ (y, 2)), ^ (z, 2)))), * (* ((real)10, ^ (z, 2)), cos (+<$[]> (+<$[]> (^ (x, 2), ^ (y, 2)), ^ (z, 2))))), * ((real)2, sin (+<$[]> (+<$[]> (^ (x, 2), ^ (y, 2)), ^ (z, 2)))))]];
  return hess;
  }
function vec3 fStep (vec3 s)
{
  vec3 g = grad (s);
  mat3 H = hess (s);
  vec3[3] E = evecs (H);
  real[3] L = evals (H);
  vec3 up = •<$[3,3]; $[3]; $[3]> (⊗<$[3]; $[3]; $[3,3]> (*<$[3]> (unary -<$[]> (/ ((real)1, $sub<real; %3> (L, 2))), $sub<vec3; %3> (E, 2)), $sub<vec3; %3> (E, 2)), g);
  if (! (== (up[0], up[0])) || (! (== (up[1], up[1])) || ! (== (up[2], up[2]))))
    return [+inf, +inf, +inf];
    return up;
  }
function bool posNanCheck (vec3 up)
{
  return (! (== (up[0], up[0])) || (! (== (up[1], up[1])) || ! (== (up[2], up[2]))));
  }
function mat3 fPerp (vec3 s)
{
  vec3 g = grad (s);
  mat3 H = hess (s);
  vec3 E2 = $sub<vec3; %3> (evecs (H), 2);
  mat3 m = -<$[3,3]> ($id<%3> (), ⊗<$[3]; $[3]; $[3,3]> (E2, E2));
  real t = :<$[3,3]; $[3,3]; $[]> (m, m);
  if ! (== (t, t))
    return $zero<$[3,3]> ();
    return m;
  }
function real fStrength (vec3 s)
{
  vec3 g = grad (s);
  mat3 H = hess (s);
  real str = / (unary -<$[]> ($sub<real; %3> (evals (H), 2)), +<$[]> (fBias, |()|<$[3]> (g)));
  return str;
  }
function real fMask (vec3 x)
{
  return 0.e0;
  }
function bool fTest (vec3 x)
{
  return true;
  }
function bool posTest (vec3 x)
{
  return (insideTest (x) && (> (fStrength (x), fStrTh) && (>= (fMask (x), fMaskTh) && fTest (x))));
  }
int nnmin = (6 if == (2, fDim) else (2 if == (1, fDim) else 0));
int nnmax = (8 if == (2, fDim) else (3 if == (1, fDim) else 0));
function real phi (real r)
{
  real s = -<$[]> (r, / (0.2e1, (real)3));
  return (+<$[]> ((real)1, * (r, +<$[]> (unary -<$[]> (0.5646e1), * (r, +<$[]> (0.119835e2, * (r, +<$[]> (unary -<$[]> (0.113535e2), * (0.40550625e1, r)))))))) if < (r, / (0.2e1, (real)3)) else (+<$[]> (unary -<$[]> (0.1e-2), * (* (+<$[]> (0.9e-1, * (+<$[]> (unary -<$[]> (0.54e0), * (-<$[]> (0.1215e1, * (0.972e0, s)), s)), s)), s), s)) if < (r, (real)1) else (real)0));
  }
function real phi' (real r)
{
  real t = -<$[]> (* ((real)3, r), (real)2);
  return (+<$[]> (unary -<$[]> (0.5646e1), * (r, +<$[]> (0.23967e2, * (r, +<$[]> (unary -<$[]> (0.340605e2), * (0.1622025e2, r)))))) if < (r, / (0.2e1, (real)3)) else (* (* (0.1234567901e-1, t), +<$[]> (0.486e1, * (t, +<$[]> (unary -<$[]> (0.1458e2), * (t, -<$[]> (0.1458e2, * (0.486e1, t))))))) if < (r, (real)1) else 0.e0));
  }
real phiWellRad = / ((real)2, 0.3e1);
real rad = / (tipd, phiWellRad);
function real enr (vec3 x)
{
  return phi (/ (|()|<$[3]> (x), rad));
  }
function vec3 frc (vec3 x)
{
  return /<$[3]> (*<$[3]> (* (phi' (/ (|()|<$[3]> (x), rad)), / ((real)1, rad)), x), |()|<$[3]> (x));
  }
real pchist = ^ (hist, / (0.1e1, (real)(* (2, pcp))));
int iter = 0;
real rpc = 0.1e1;
int popLast = unary - (1);
function real urnd (real x)
{
  if == (x, (real)0)
    return 0.e0;
    real l2 = log2 (|()|<$[]> (x));
  real frxp = ^ ((real)2, -<$[]> (-<$[]> (l2, floor (l2)), (real)1));
  return fmod (* (+<$[]> (^ ((real)2, 20), (real)(* (2, iter))), frxp), (real)1);
  }
function real v3rnd (vec3 v)
{
  return fmod (+<$[]> (+<$[]> (urnd (v[0]), urnd (v[1])), urnd (v[2])), (real)1);
  }
function real genID (vec3 v)
{
  return floor (* ((real)1000000, v3rnd (v)));
  }
function int pcIter ()
{
  if (> (pcp, 0) && (> (iter, 0) && == (0, % (iter, pcp)))) {
    return - (* (% (/ (iter, pcp), 2), 2), 1);
    }
  else {
    return 0;
    }
  }
strand point (vec3 p0, real hh0) in 3D
{
  output vec3 pos = p0;
  real ID = genID (p0);
  real hh = hh0;
  vec3 step = [0.e0, 0.e0, 0.e0];
  bool found = false;
  int nfs = 0;
  real trav = 0.e0;
  real mvmt = 0.1e1;
  real closest = rad;
  int born = 0;
  bool first = true;
  update {
    bool vv = false;
    if (first && ((> (verb, 0) && vv) || > (verb, 1))) {
      print (ID, "(i#", iter, " @ ", pos, "): ");
      print (" HELLO!\n");
      }
    if ! (posTest (pos)) {
      if ((> (verb, 0) && vv) || > (verb, 1)) {
        print (ID, "(i#", iter, " @ ", pos, "): ");
        print ("!inside=", insideTest (pos), " || fStrength=", fStrength (pos), " <= fStrTh=", fStrTh, " || fMask(pos)=", fMask (pos), " < fMaskTh=", fMaskTh, " || fTest(pos)=", fTest (pos), " ==>DIE\n");
        }
      die;
      }
    if (> (travMax, (real)0) && > (trav, travMax))
      die;
      if ! (found) {
      if (> (nfsMax, 0) && > (nfs, nfsMax)) {
        if ((> (verb, 0) && vv) || > (verb, 1)) {
          print (ID, "(i#", iter, " @ ", pos, "): ");
          print ("nfs=", nfs, " > nfsMax=", nfsMax, " || trav=", trav, " > travMax=", travMax, " =>DIE\n");
          }
        die;
        }
      step = *<$[3]> (sfs, fStep (pos));
      pos = +<$[3]> (pos, step);
      mvmt = lerp<$[]> (/ (|()|<$[3]> (step), tipd), mvmt, hist);
      if > (mvmt, fsEps) {
        trav = +<$[]> (trav, / (|()|<$[3]> (step), tipd));
        nfs = + (nfs, 1);
        }
      else {
        found = true;
        mvmt = 0.1e1;
        trav = 0.e0;
        }
      if ((> (verb, 0) && vv) || > (verb, 1)) {
        print (ID, "(i#", iter, " @ ", pos, "): ");
        print ("step=", step, "; mvmt=", mvmt, " => found=", found, "\n");
        }
      }
    else {
      if == (0, fDim)
        stabilize;
        step = *<$[3]> (sfs, fStep (pos));
      pos = +<$[3]> (pos, step);
      trav = +<$[]> (trav, / (|()|<$[3]> (step), tipd));
      real oldE = 0.e0;
      vec3 force = [0.e0, 0.e0, 0.e0];
      int nn = 0;
      foreach (point P in sphere<point> (rad)) {
        vec3 off = -<$[3]> (P.pos, pos);
        if (< (/ (|()|<$[3]> (off), tipd), fsEps) && <= (ID, P.ID)) {
          if (> (verb, 0) && vv)
            print (" (", ID, " F) on top of ", P.ID, "; I have lower ID; bye\n");
            die;
          }
        oldE = +<$[]> (oldE, enr (off));
        force = +<$[3]> (force, frc (off));
        nn = + (nn, 1);
        }
      if == (0, nn) {
        if ! ((> (pcIter (), 0) && < (born, nnmax)))
          continue;
          vec3 noff0 = •<$[3,3]; $[3]; $[3]> (fPerp (pos), [tipd, 0.e0, 0.e0]);
        vec3 noff1 = •<$[3,3]; $[3]; $[3]> (fPerp (pos), [0.e0, tipd, 0.e0]);
        vec3 noff2 = •<$[3,3]; $[3]; $[3]> (fPerp (pos), [0.e0, 0.e0, tipd]);
        vec3 noff = noff0;
        noff = (noff if > (|()|<$[3]> (noff), |()|<$[3]> (noff1)) else noff1);
        noff = (noff if > (|()|<$[3]> (noff), |()|<$[3]> (noff2)) else noff2);
        vec3 npos = +<$[3]> (*<$[3]> (tipd, normalize<$[3]> (noff)), pos);
        npos = +<$[3]> (npos, *<$[3]> (sfs, fStep (npos)));
        if ((> (verb, 0) && vv) || > (verb, 1)) {
          print (ID, "(i#", iter, " @ ", pos, "): ");
          print (" 0==nn =>NEW(", npos, ") w/ ID=", genID (npos), "\n");
          }
        if posTest (pos) {
          new point (npos, hh);
          born = + (born, 1);
          }
        if ((> (verb, 0) && vv) || > (verb, 1)) {
          print (ID, "(i#", iter, " @ ", pos, "): ");
          print ("nn=0; after birthing mvmt=", mvmt, "\n");
          }
        continue;
        }
      vec3 es = •<$[3,3]; $[3]; $[3]> (*<$[3,3]> (hh, fPerp (pos)), force);
      if > (|()|<$[3]> (es), tipd) {
        hh = * (hh, / (tipd, |()|<$[3]> (es)));
        es = *<$[3]> (es, / (tipd, |()|<$[3]> (es)));
        }
      vec3 fs = *<$[3]> (sfs, fStep (+<$[3]> (pos, es)));
      if > (/ (|()|<$[3]> (fs), +<$[]> (* (fsEps, tipd), |()|<$[3]> (es))), 0.5e0) {
        hh = * (hh, 0.5e0);
        if ((> (verb, 0) && vv) || > (verb, 1)) {
          print (ID, "(i#", iter, " @ ", pos, "): ");
          print ("nn=", nn, "; |fs|/|es|=", / (|()|<$[3]> (fs), |()|<$[3]> (es)), " > 0.5; trying again with hh=", hh, "; mvmt=", mvmt, "\n");
          print ("        fs=", fs, "\n");
          print ("        es=", es, "\n");
          }
        continue;
        }
      vec3 oldpos = pos;
      pos = +<$[3]> (pos, +<$[3]> (fs, es));
      real newE = 0.e0;
      closest = rad;
      vec3 mno = [0.e0, 0.e0, 0.e0];
      nn = 0;
      foreach (point P in sphere<point> (rad)) {
        vec3 off = -<$[3]> (P.pos, pos);
        newE = +<$[]> (newE, enr (off));
        closest = min (closest, |()|<$[3]> (off));
        mno = +<$[3]> (mno, off);
        nn = + (nn, 1);
        }
      mno = /<$[3]> (mno, (real)nn);
      if ((> (verb, 0) && vv) || > (verb, 1)) {
        print (ID, "(i#", iter, " @ ", pos, "): ");
        print ("nn=", nn, "; oldE=", oldE, " newE=", newE, "\n");
        }
      if > (-<$[]> (newE, oldE), •<$[3]; $[3]; $[]> (*<$[3]> (gdeTest, -<$[3]> (pos, oldpos)), unary -<$[3]> (force))) {
        hh = * (hh, gdeBack);
        if == ((real)0, hh) {
          print (ID, "(i#", iter, " @ ", pos, "): ");
          print ("backtracked all the way to hh=0\n");
          die;
          }
        if ((> (verb, 0) && vv) || > (verb, 1)) {
          print (ID, "(i#", iter, " @ ", pos, "): ");
          print ("nn=", nn, "; oldE=", oldE, " newE=", newE, "; backtracking; hh=", hh, "; mvmt=", mvmt, "\n");
          print ("      fs=", fs, "\n");
          print ("      es=", es, "\n");
          print ("      newE - oldE=", -<$[]> (newE, oldE), "\n");
          print ("      force=", force, "\n");
          print ("      dpos=", -<$[3]> (pos, oldpos), "\n");
          print ("      0.5*(pos - oldpos).(-force)=", •<$[3]; $[3]; $[]> (*<$[3]> (0.5e0, -<$[3]> (pos, oldpos)), unary -<$[3]> (force)), "\n");
          }
        pos = oldpos;
        continue;
        }
      hh = * (hh, gdeOppor);
      step = +<$[3]> (step, +<$[3]> (fs, es));
      trav = +<$[]> (trav, / (|()|<$[3]> (step), tipd));
      mvmt = lerp<$[]> (/ (|()|<$[3]> (step), tipd), mvmt, hist);
      if (< (/ (|()|<$[3]> (step), tipd), pcmvEps) && != (pcIter (), 0))
        if (> (pcIter (), 0) && (< (newE, (real)0) && (< (nn, nnmin) && < (born, nnmax)))) {
          vec3 npos = -<$[3]> (pos, *<$[3]> (tipd, normalize<$[3]> (mno)));
          npos = +<$[3]> (npos, *<$[3]> (sfs, fStep (npos)));
          npos = +<$[3]> (npos, *<$[3]> (sfs, fStep (npos)));
          bool birth = true;
          if (== (fDim, 2) && >= (nn, 4)) {
            foreach (point P in sphere<point> (npos, * (tipd, mabd))) {
              birth = false;
              }
            if birth
              birth = < (v3rnd (pos), / ((real)(- (nnmin, nn)), $i2r (nnmin)));
              }
          if (birth && posTest (npos)) {
            new point (npos, hh);
            born = + (born, 1);
            }
          }
        else {
          if (< (pcIter (), 0) && (> (newE, (real)0) && > (nn, nnmax)))
            if < (v3rnd (pos), / ((real)(- (nn, nnmax)), $i2r (nn))) {
              if (> (verb, 0) && vv)
                print ("  (", ID, " F); v3rnd=", v3rnd (pos), " < ", / ((real)(- (nn, nnmax)), $i2r (nn)), " => die \n");
                die;
              }
            }
        }
    first = false;
    }
  
}
collection {
    foreach (int ii in $range (0, - (length<vec3> (ipos), 1))) {
      new point ($dynsub<vec3> (ipos, ii), 0.1e1);
      }
    }
  
update {
  int pop = numActive ();
  int pc = (1 if != (pop, popLast) else 0);
  rpc = lerp<$[]> ((real)pc, rpc, pchist);
  bool allfound = all ({|P.found | point P in all|});
  real percfound = * ((real)100, mean ({|(0.1e1 if P.found else 0.e0) | point P in all|}));
  real meancl = mean ({|P.closest | point P in all|});
  real varicl = mean ({|^ (-<$[]> (P.closest, meancl), 2) | point P in all|});
  real covcl = / (sqrt (varicl), meancl);
  real maxmvmt = max ({|P.mvmt | point P in all|});
  print ("======= finished iter ", iter, " w/ ", pop, ")", "; %found=", percfound, "; mean(hh)=", mean ({|P.hh | point P in all|}), "; mean(cl)=", meancl, "; COV(cl)=", covcl, "; max(mvmt)=", maxmvmt, "; pc=", pc, "; rpc=", rpc, "\n");
  if (allfound && (< (covcl, geoEps) && (< (maxmvmt, mvmtEps) && < (rpc, rpcEps)))) {
    print ("======= Stabilizing ", numActive (), " (iter ", iter, ")", "; COV(cl)=", covcl, " < ", geoEps, "; max(mvmt)=", maxmvmt, " < ", mvmtEps, "; rpc=", rpc, " < ", rpcEps, "\n");
    stabilize_all;}
  else {
    print ("======= Stabilizing ", numActive (), " (iter ", iter, ")", "; COV(cl)=", covcl, " > ", geoEps, "; max(mvmt)=", maxmvmt, " > ", mvmtEps, "; rpc=", rpc, " > ", rpcEps, "\n");
    }
  iter = + (iter, 1);
  popLast = pop;
  }
/* Program end */
/* Simplified Program (after after simplify) start */
properties: GlobalInit,StabilizeAll,GlobalReduce,StrandSets,GlobalUpdate,NewStrands,StrandCommunication,StrandsMayDie,HasInputs,HasGlobals,ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
input FemData:Mesh meshData07BA;
input FemData:Space 0space07C6_intermedateGlobal07C7;
input FemData:FemFunc 0data07C8_intermedateGlobal07C9;
input real fStrTh07CA("Feature strength threshold");
input real fMaskTh07CB("feature mask threshold") = <default>;
input real fBias07CC("Bias in feature strength computing") = <default>;
input real tipd07CD("Target inter-particle distance") = <default>;
input real mabd07CE("Min allowed birth distance (> 0.7351)") = <default>;
input real travMax07CF("Max allowed travel to or on feature") = <default>;
input int nfsMax07D0("Max allowed # feature steps ") = <default>;
input real gdeTest07D1("Scaling in sufficient decrease test") = <default>;
input real gdeBack07D2("How to scale stepsize for backtrack") = <default>;
input real gdeOppor07D3("Opportunistic stepsize increase") = <default>;
input real fsEps07D4("Conv. thresh. on feature step size");
input real geoEps07D5("Conv. thresh. on system geometry") = <default>;
input real mvmtEps07D6("Conv. thresh. on point movement") = <default>;
input real rpcEps07D7("Conv. thresh. on recent pop. changes") = <default>;
input real pcmvEps07D8("Motion limit before PC") = <default>;
input real isoval07D9("Which isosurface to sample") = <default>;
input int verb07DA("Verbosity level") = <default>;
input real sfs07DB("Scaling (<=1 for stability) on fStep") = <default>;
input real hist07DC("How history matters for convergence") = <default>;
input int pcp07DD("periodicity of population control (PC)") = <default>;
input vec3[] ipos07DE("Initial point positions");
input int fDim07DF = <default>;
constants {
  fMaskTh07CB = 0.e0;
  fBias07CC = 0.e0;
  tipd07CD = 0.1e1;
  mabd07CE = 0.75e0;
  travMax07CF = 0.1e2;
  nfsMax07D0 = 20;
  gdeTest07D1 = 0.5e0;
  gdeBack07D2 = 0.5e0;
  gdeOppor07D3 = 0.12e1;
  geoEps07D5 = 0.1e0;
  mvmtEps07D6 = 0.1e-1;
  rpcEps07D7 = 0.1e-1;
  pcmvEps07D8 = 0.3e0;
  isoval07D9 = 0.e0;
  verb07DA = 0;
  sfs07DB = 0.5e0;
  hist07DC = 0.5e0;
  pcp07DD = 5;
  fDim07DF = 2;
}
global Femdata: MeshCell[] 0cell_meshData07BB;
global Femdata: Space space07C6;
global Femdata: FemFunc data07C8;
global field(3)[] F1114;
global Femdata: RefCell simplex1115;
global int nnmin12ED;
global int nnmax12F4;
global real phiWellRad1341;
global real rad1342;
global real pchist1358;
global int iter1359;
global real rpc135A;
global int popLast135B;
function bool#0 !=07E0 (Femdata: MeshCell cell107E1, Femdata: MeshCell cell107E2)
{
  int _t07E3 = extractFemItem(CellIndex(Mesh), int, cell107E1);
  int _t07E4 = extractFemItem(CellIndex(Mesh), int, cell107E2);
  bool _t07E5 = prim !=0086 (_t07E3, _t07E4);
  return _t07E5;
}
function bool#0 ==07E6 (Femdata: MeshCell cell107E1, Femdata: MeshCell cell107E2)
{
  int _t07E7 = extractFemItem(CellIndex(Mesh), int, cell107E1);
  int _t07E8 = extractFemItem(CellIndex(Mesh), int, cell107E2);
  bool _t07E9 = prim ==0082 (_t07E7, _t07E8);
  return _t07E9;
}
function Femdata: MeshPos#2 findPos07EA (Femdata: Mesh mesh07EB, vec3 pos07EC)
{
  real _t07ED = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t07EE = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t07EF = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  xn07F0 = [_t07ED, _t07EE, _t07EF];
  newtonInt07F1 = 0;
  cellInt07F2 = extractFemItem(StartCell(Mesh), int, mesh07EB);
  int _t07F3 = extractFemItem(NumCell(Mesh), int, mesh07EB);
  int _t07F4 = 1;
  numCell07F5 = prim -0024 (_t07F3, _t07F4);
  yayCells07F6 = extractFemItem2(NearbyCell(File=spat.in)(Mesh), vec3, mesh07EB, pos07EC : vec3);
  foreach cellItter07FA in yayCells07F6 {
    real _t07F7 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    real _t07F8 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    real _t07F9 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    xn07F0 = [_t07F7, _t07F8, _t07F9];
    cellInt07F2 = cellItter07FA;
    field(3)[3] _t07FB = femField(mesh07EB,cellInt07F2,field(3)[3],Transform,);
    field(3)[3,3] _t07FC = prim ∇⊗00AD<#∞; %3; $[]; %3> (_t07FB);
    field(3)[3,3] _t07FD = prim inv015E<#∞; %3> (_t07FC);
    real _t07FE = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    real _t07FF = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    real _t0800 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    vec3 _t0801 = [_t07FE, _t07FF, _t0800];
    A0802 = prim @00A5<#∞; %3; $[3,3]> (_t07FD, _t0801);
    int _t0803 = 0;
    int _t0804 = 16;
    int[] _t0805 = prim $range01C3 (_t0803, _t0804);
    foreach newtonItter0834 in _t0805 {
      field(3)[3] _t0806 = femField(mesh07EB,cellInt07F2,field(3)[3],Transform,);
      field(3)[3] _t0807 = prim -002E<#∞; %3; $[3]> (_t0806, pos07EC);
      field(3)[3] _t0808 = prim •00D4<#∞; %3; $[3,3]; $[3]; $[3]> (A0802, _t0807);
      delta0809 = prim @00A5<#∞; %3; $[3]> (_t0808, xn07F0);
      xn07F0 = prim -0026<$[3]> (xn07F0, delta0809);
      real _t080A = 0.1e-7;
      real _t080B = 0.1e-7;
      real _t080C = prim *0034 (_t080A, _t080B);
      real _t080D = prim •00CE<$[3]; $[3]; $[]> (delta0809, delta0809);
      bool _t080E = prim >=007E (_t080C, _t080D);
      if _t080E {
        real _t080F = 0.1e1;
        real _t0810 = 0.1e-7;
        real _t0811 = prim +0017<$[]> (_t080F, _t0810);
        real _t0812 = 0.1e1;
        real _t0813 = 0.1e1;
        real _t0814 = 0.1e1;
        vec3 _t0815 = [_t0812, _t0813, _t0814];
        real _t0816 = prim •00CE<$[3]; $[3]; $[]> (_t0815, xn07F0);
        bool _t0817 = prim >0080 (_t0811, _t0816);
        real _t0818 = 0.1e-7;
        real _t0819 = 0.1e-7;
        real _t081A = 0.1e-7;
        vec3 _t081B = [_t0818, _t0819, _t081A];
        vec3 _t081C = prim +0017<$[3]> (_t081B, xn07F0);
        real _t081D = _t081C[0];
        real _t081E = -0.e0;
        bool _t081F = prim >0080 (_t081D, _t081E);
        real _t0820 = 0.1e-7;
        real _t0821 = 0.1e-7;
        real _t0822 = 0.1e-7;
        vec3 _t0823 = [_t0820, _t0821, _t0822];
        vec3 _t0824 = prim +0017<$[3]> (_t0823, xn07F0);
        real _t0825 = _t0824[1];
        real _t0826 = -0.e0;
        bool _t0827 = prim >0080 (_t0825, _t0826);
        real _t0828 = 0.1e-7;
        real _t0829 = 0.1e-7;
        real _t082A = 0.1e-7;
        vec3 _t082B = [_t0828, _t0829, _t082A];
        vec3 _t082C = prim +0017<$[3]> (_t082B, xn07F0);
        real _t082D = _t082C[2];
        real _t082E = -0.e0;
        bool _t082F = prim >0080 (_t082D, _t082E);
        bool _t0830 = prim $and01C4 (_t0827, _t082F);
        bool _t0831 = prim $and01C4 (_t081F, _t0830);
        bool _t0832 = prim $and01C4 (_t0817, _t0831);
        if _t0832 {
          Femdata: MeshPos _t0833 = extractFemItemN((mesh07EB, cellInt07F2, xn07F0, pos07EC),AllBuild(MeshPos),);
          return _t0833;
        }
      }
    }
  }
  Femdata: MeshPos _t0835 = extractFemItemN((mesh07EB),InvalidBuild(MeshPos),);
  return _t0835;
}
function Femdata: RefCell#1 refcell0836 (Femdata: Mesh arg00837)
{
  Femdata: RefCell _t0838 = extractFemItem(RefCell(Mesh), Femdata: RefCell, arg00837);
  return _t0838;
}
function Femdata: MeshCell[]#0 cells0839 (Femdata: Mesh arg0083A)
{
  Femdata: MeshCell[] _t083B = extractFemItem(Cells(Mesh), Femdata: MeshCell[], arg0083A);
  return _t083B;
}
function Femdata: MeshCell[]#0 cells083C (Femdata: Mesh arg0083A)
{
  int _t083D = 0;
  int _t083E = extractFemItem(NumCell(Mesh), int, arg0083A);
  int[] _t083F = prim $range01C3 (_t083D, _t083E);
  Femdata: MeshCell[] accum0842 = {};
  foreach i0840 in _t083F {
    Femdata: MeshCell _t0841 = loadFem(MeshCell, arg0083A, i0840);
    accum0842 = prim @0010<Femdata: MeshCell> (accum0842, _t0841);
  }
  return accum0842;
}
function int#0 numCell0843 (Femdata: Mesh arg00837)
{
  int _t0844 = extractFemItem(NumCell(Mesh), int, arg00837);
  return _t0844;
}
function tensor[3,3,3,3]#0 mesh_t_transform_30845 (vec3 pos0846, int cell0847, Femdata: Mesh mesh0848)
{
  field(3)[3] _t0849 = femField(mesh0848,cell0847,field(3)[3],Transform,);
  field(3)[3,3] _t084A = prim ∇⊗00AD<#∞; %3; $[]; %3> (_t0849);
  field(3)[3,3,3] _t084B = prim ∇⊗00AD<#∞; %3; $[3]; %3> (_t084A);
  field(3)[3,3,3,3] _t084C = prim ∇⊗00AD<#∞; %3; $[3,3]; %3> (_t084B);
  tensor[3,3,3,3] _t084D = prim @00A5<#∞; %3; $[3,3,3,3]> (_t084C, pos0846);
  return _t084D;
}
function tensor[3,3,3]#0 mesh_t_transform_2084E (vec3 pos0846, int cell0847, Femdata: Mesh mesh0848)
{
  field(3)[3] _t084F = femField(mesh0848,cell0847,field(3)[3],Transform,);
  field(3)[3,3] _t0850 = prim ∇⊗00AD<#∞; %3; $[]; %3> (_t084F);
  field(3)[3,3,3] _t0851 = prim ∇⊗00AD<#∞; %3; $[3]; %3> (_t0850);
  tensor[3,3,3] _t0852 = prim @00A5<#∞; %3; $[3,3,3]> (_t0851, pos0846);
  return _t0852;
}
function tensor[3,3]#0 mesh_t_transform_10853 (vec3 pos0846, int cell0847, Femdata: Mesh mesh0848)
{
  field(3)[3] _t0854 = femField(mesh0848,cell0847,field(3)[3],Transform,);
  field(3)[3,3] _t0855 = prim ∇⊗00AD<#∞; %3; $[]; %3> (_t0854);
  tensor[3,3] _t0856 = prim @00A5<#∞; %3; $[3,3]> (_t0855, pos0846);
  return _t0856;
}
function vec3#2 mesh_t_transform_00857 (vec3 pos0846, int cell0847, Femdata: Mesh mesh0848)
{
  field(3)[3] _t0858 = femField(mesh0848,cell0847,field(3)[3],Transform,);
  vec3 _t0859 = prim @00A5<#∞; %3; $[3]> (_t0858, pos0846);
  return _t0859;
}
function Femdata: MeshPos#0 _mesh_t_newtonInverse085A (vec3 pos085B, int cellInt085C, Femdata: Mesh mesh085D)
{
  real _t085E = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t085F = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t0860 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  xn0861 = [_t085E, _t085F, _t0860];
  field(3)[3] _t0862 = femField(mesh085D,cellInt085C,field(3)[3],Transform,);
  field(3)[3,3] _t0863 = prim ∇⊗00AD<#∞; %3; $[]; %3> (_t0862);
  field(3)[3,3] _t0864 = prim inv015E<#∞; %3> (_t0863);
  real _t0865 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t0866 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t0867 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  vec3 _t0868 = [_t0865, _t0866, _t0867];
  A0869 = prim @00A5<#∞; %3; $[3,3]> (_t0864, _t0868);
  int _t086A = 0;
  int _t086B = 16;
  int[] _t086C = prim $range01C3 (_t086A, _t086B);
  foreach itter089C in _t086C {
    field(3)[3] _t086D = femField(mesh085D,cellInt085C,field(3)[3],Transform,);
    field(3)[3] _t086E = prim -002E<#∞; %3; $[3]> (_t086D, pos085B);
    field(3)[3] _t086F = prim •00D4<#∞; %3; $[3,3]; $[3]; $[3]> (A0869, _t086E);
    delta0870 = prim @00A5<#∞; %3; $[3]> (_t086F, xn0861);
    xn0861 = prim -0026<$[3]> (xn0861, delta0870);
    real _t0871 = 0.1e-7;
    real _t0872 = 0.1e-7;
    real _t0873 = prim *0034 (_t0871, _t0872);
    real _t0874 = prim •00CE<$[3]; $[3]; $[]> (delta0870, delta0870);
    bool _t0875 = prim >=007E (_t0873, _t0874);
    if _t0875 {
      real _t0876 = 0.1e1;
      real _t0877 = 0.1e-7;
      real _t0878 = prim +0017<$[]> (_t0876, _t0877);
      real _t0879 = 0.1e1;
      real _t087A = 0.1e1;
      real _t087B = 0.1e1;
      vec3 _t087C = [_t0879, _t087A, _t087B];
      real _t087D = prim •00CE<$[3]; $[3]; $[]> (_t087C, xn0861);
      bool _t087E = prim >0080 (_t0878, _t087D);
      real _t087F = 0.1e-7;
      real _t0880 = 0.1e-7;
      real _t0881 = 0.1e-7;
      vec3 _t0882 = [_t087F, _t0880, _t0881];
      vec3 _t0883 = prim +0017<$[3]> (_t0882, xn0861);
      real _t0884 = _t0883[0];
      real _t0885 = -0.e0;
      bool _t0886 = prim >0080 (_t0884, _t0885);
      real _t0887 = 0.1e-7;
      real _t0888 = 0.1e-7;
      real _t0889 = 0.1e-7;
      vec3 _t088A = [_t0887, _t0888, _t0889];
      vec3 _t088B = prim +0017<$[3]> (_t088A, xn0861);
      real _t088C = _t088B[1];
      real _t088D = -0.e0;
      bool _t088E = prim >0080 (_t088C, _t088D);
      real _t088F = 0.1e-7;
      real _t0890 = 0.1e-7;
      real _t0891 = 0.1e-7;
      vec3 _t0892 = [_t088F, _t0890, _t0891];
      vec3 _t0893 = prim +0017<$[3]> (_t0892, xn0861);
      real _t0894 = _t0893[2];
      real _t0895 = -0.e0;
      bool _t0896 = prim >0080 (_t0894, _t0895);
      bool _t0897 = prim $and01C4 (_t088E, _t0896);
      bool _t0898 = prim $and01C4 (_t0886, _t0897);
      bool _t0899 = prim $and01C4 (_t087E, _t0898);
      if _t0899 {
        Femdata: MeshPos _t089A = extractFemItemN((mesh085D, cellInt085C, xn0861, pos085B),AllBuild(MeshPos),);
        return _t089A;
      } else {
        Femdata: MeshPos _t089B = extractFemItemN((mesh085D),InvalidBuild(MeshPos),);
        return _t089B;
      }
    }
  }
  Femdata: MeshPos _t089D = extractFemItemN((mesh085D),InvalidBuild(MeshPos),);
  return _t089D;
}
function Femdata: MeshPos#0 _mesh_pos_mesh_t_build_world_pos089E (Femdata: MeshPos pos089F)
{
  bool _t08A0 = extractFemItem(WorldTest(MeshPos), bool, pos089F);
  if _t08A0 {
    vec3 _t08A1 = extractFemItem(RefPos(MeshPos), vec3, pos089F);
    int _t08A2 = extractFemItem(CellIndex(MeshPos), int, pos089F);
    Femdata: Mesh _t08A3 = extractFem(pos089F, Mesh);
    vec3 _t08A4 = func mesh_t_transform_00857 (_t08A1, _t08A2, _t08A3);
    Femdata: MeshPos _t08A5 = extractFemItemN((pos089F, _t08A4),NewWorld(MeshPos),);
    return _t08A5;
  } else {
    return pos089F;
  }
}
function vec3#0 worldPos08A6 (Femdata: MeshPos pos089F)
{
  vec3 _t08A7 = extractFemItem(RefPos(MeshPos), vec3, pos089F);
  int _t08A8 = extractFemItem(CellIndex(MeshPos), int, pos089F);
  Femdata: Mesh _t08A9 = extractFem(pos089F, Mesh);
  vec3 _t08AA = func mesh_t_transform_00857 (_t08A7, _t08A8, _t08A9);
  return _t08AA;
}
function Femdata: MeshPos#0 $exitPos08AB (Femdata: Mesh mesh08AC, int cellId08AD, vec3 refPos08AE, vec3 dPos08AF, real[2] time08B0)
{
  int _t08B1 = -1;
  real _t08B2 = time08B0[1];
  int _t08B3 = prim $r2i01B7 (_t08B2);
  int[2] _t08B5 = func nextCell408B4 (_t08B3, cellId08AD, mesh08AC);
  int _t08B6 = 0;
  int _t08B7 = prim $sub01C0<int; %2> (_t08B5, _t08B6);
  bool _t08B8 = prim !=0086 (_t08B1, _t08B7);
  if _t08B8 {
    real _t08B9 = time08B0[1];
    int _t08BA = prim $r2i01B7 (_t08B9);
    int[2] _t08BB = func nextCell408B4 (_t08BA, cellId08AD, mesh08AC);
    int _t08BC = 0;
    int _t08BD = prim $sub01C0<int; %2> (_t08BB, _t08BC);
    real _t08BE = 0.1e1;
    real _t08BF = 0.e0;
    real _t08C0 = 0.e0;
    real _t08C1 = 0.e0;
    vec4 _t08C2 = [_t08BE, _t08BF, _t08C0, _t08C1];
    real _t08C3 = 0.e0;
    real _t08C4 = 0.1e1;
    real _t08C5 = 0.e0;
    real _t08C6 = 0.e0;
    vec4 _t08C7 = [_t08C3, _t08C4, _t08C5, _t08C6];
    real _t08C8 = 0.e0;
    real _t08C9 = 0.e0;
    real _t08CA = 0.1e1;
    real _t08CB = 0.e0;
    vec4 _t08CC = [_t08C8, _t08C9, _t08CA, _t08CB];
    real _t08CD = 0.971445146547e-16;
    real _t08CE = 0.e0;
    real _t08CF = 0.e0;
    real _t08D0 = 0.1e1;
    vec4 _t08D1 = [_t08CD, _t08CE, _t08CF, _t08D0];
    tensor[4,4] _t08D2 = [_t08C2, _t08C7, _t08CC, _t08D1];
    real _t08D3 = 0.57735026919e0;
    real _t08D4 = 0.57735026919e0;
    real _t08D5 = 0.57735026919e0;
    real _t08D6 = -0.57735026919e0;
    vec4 _t08D7 = [_t08D3, _t08D4, _t08D5, _t08D6];
    real _t08D8 = -0.333333333333e0;
    real _t08D9 = 0.666666666667e0;
    real _t08DA = -0.333333333333e0;
    real _t08DB = 0.333333333333e0;
    vec4 _t08DC = [_t08D8, _t08D9, _t08DA, _t08DB];
    real _t08DD = -0.333333333333e0;
    real _t08DE = -0.333333333333e0;
    real _t08DF = 0.666666666667e0;
    real _t08E0 = 0.333333333333e0;
    vec4 _t08E1 = [_t08DD, _t08DE, _t08DF, _t08E0];
    real _t08E2 = 0.971445146547e-16;
    real _t08E3 = 0.e0;
    real _t08E4 = 0.e0;
    real _t08E5 = 0.1e1;
    vec4 _t08E6 = [_t08E2, _t08E3, _t08E4, _t08E5];
    tensor[4,4] _t08E7 = [_t08D7, _t08DC, _t08E1, _t08E6];
    real _t08E8 = -0.333333333333e0;
    real _t08E9 = 0.666666666667e0;
    real _t08EA = -0.333333333333e0;
    real _t08EB = 0.333333333333e0;
    vec4 _t08EC = [_t08E8, _t08E9, _t08EA, _t08EB];
    real _t08ED = -0.57735026919e0;
    real _t08EE = -0.57735026919e0;
    real _t08EF = -0.57735026919e0;
    real _t08F0 = 0.57735026919e0;
    vec4 _t08F1 = [_t08ED, _t08EE, _t08EF, _t08F0];
    real _t08F2 = -0.333333333333e0;
    real _t08F3 = -0.333333333333e0;
    real _t08F4 = 0.666666666667e0;
    real _t08F5 = 0.333333333333e0;
    vec4 _t08F6 = [_t08F2, _t08F3, _t08F4, _t08F5];
    real _t08F7 = 0.971445146547e-16;
    real _t08F8 = 0.e0;
    real _t08F9 = 0.e0;
    real _t08FA = 0.1e1;
    vec4 _t08FB = [_t08F7, _t08F8, _t08F9, _t08FA];
    tensor[4,4] _t08FC = [_t08EC, _t08F1, _t08F6, _t08FB];
    real _t08FD = -0.333333333333e0;
    real _t08FE = 0.666666666667e0;
    real _t08FF = -0.333333333333e0;
    real _t0900 = 0.333333333333e0;
    vec4 _t0901 = [_t08FD, _t08FE, _t08FF, _t0900];
    real _t0902 = -0.333333333333e0;
    real _t0903 = -0.333333333333e0;
    real _t0904 = 0.666666666667e0;
    real _t0905 = 0.333333333333e0;
    vec4 _t0906 = [_t0902, _t0903, _t0904, _t0905];
    real _t0907 = 0.57735026919e0;
    real _t0908 = 0.57735026919e0;
    real _t0909 = 0.57735026919e0;
    real _t090A = -0.57735026919e0;
    vec4 _t090B = [_t0907, _t0908, _t0909, _t090A];
    real _t090C = 0.971445146547e-16;
    real _t090D = 0.e0;
    real _t090E = 0.e0;
    real _t090F = 0.1e1;
    vec4 _t0910 = [_t090C, _t090D, _t090E, _t090F];
    tensor[4,4] _t0911 = [_t0901, _t0906, _t090B, _t0910];
    tensor[4,4][4] _t0912 = {_t08D2, _t08E7, _t08FC, _t0911};
    real _t0913 = 0.57735026919e0;
    real _t0914 = -0.1e1;
    real _t0915 = -0.1e1;
    real _t0916 = 0.1e1;
    vec4 _t0917 = [_t0913, _t0914, _t0915, _t0916];
    real _t0918 = 0.57735026919e0;
    real _t0919 = 0.1e1;
    real _t091A = 0.e0;
    real _t091B = 0.e0;
    vec4 _t091C = [_t0918, _t0919, _t091A, _t091B];
    real _t091D = 0.57735026919e0;
    real _t091E = 0.e0;
    real _t091F = 0.1e1;
    real _t0920 = 0.e0;
    vec4 _t0921 = [_t091D, _t091E, _t091F, _t0920];
    real _t0922 = 0.e0;
    real _t0923 = 0.e0;
    real _t0924 = 0.e0;
    real _t0925 = 0.1e1;
    vec4 _t0926 = [_t0922, _t0923, _t0924, _t0925];
    tensor[4,4] _t0927 = [_t0917, _t091C, _t0921, _t0926];
    real _t0928 = 0.1e1;
    real _t0929 = 0.e0;
    real _t092A = 0.e0;
    real _t092B = 0.e0;
    vec4 _t092C = [_t0928, _t0929, _t092A, _t092B];
    real _t092D = 0.e0;
    real _t092E = 0.1e1;
    real _t092F = 0.e0;
    real _t0930 = 0.e0;
    vec4 _t0931 = [_t092D, _t092E, _t092F, _t0930];
    real _t0932 = 0.e0;
    real _t0933 = 0.e0;
    real _t0934 = 0.1e1;
    real _t0935 = 0.e0;
    vec4 _t0936 = [_t0932, _t0933, _t0934, _t0935];
    real _t0937 = 0.e0;
    real _t0938 = 0.e0;
    real _t0939 = 0.e0;
    real _t093A = 0.1e1;
    vec4 _t093B = [_t0937, _t0938, _t0939, _t093A];
    tensor[4,4] _t093C = [_t092C, _t0931, _t0936, _t093B];
    real _t093D = 0.e0;
    real _t093E = 0.1e1;
    real _t093F = 0.e0;
    real _t0940 = 0.e0;
    vec4 _t0941 = [_t093D, _t093E, _t093F, _t0940];
    real _t0942 = -0.1e1;
    real _t0943 = 0.e0;
    real _t0944 = 0.e0;
    real _t0945 = 0.e0;
    vec4 _t0946 = [_t0942, _t0943, _t0944, _t0945];
    real _t0947 = 0.e0;
    real _t0948 = 0.e0;
    real _t0949 = 0.1e1;
    real _t094A = 0.e0;
    vec4 _t094B = [_t0947, _t0948, _t0949, _t094A];
    real _t094C = 0.e0;
    real _t094D = 0.e0;
    real _t094E = 0.e0;
    real _t094F = 0.1e1;
    vec4 _t0950 = [_t094C, _t094D, _t094E, _t094F];
    tensor[4,4] _t0951 = [_t0941, _t0946, _t094B, _t0950];
    real _t0952 = 0.e0;
    real _t0953 = 0.1e1;
    real _t0954 = 0.e0;
    real _t0955 = 0.e0;
    vec4 _t0956 = [_t0952, _t0953, _t0954, _t0955];
    real _t0957 = 0.e0;
    real _t0958 = 0.e0;
    real _t0959 = 0.1e1;
    real _t095A = 0.e0;
    vec4 _t095B = [_t0957, _t0958, _t0959, _t095A];
    real _t095C = 0.1e1;
    real _t095D = 0.e0;
    real _t095E = 0.e0;
    real _t095F = 0.e0;
    vec4 _t0960 = [_t095C, _t095D, _t095E, _t095F];
    real _t0961 = 0.e0;
    real _t0962 = 0.e0;
    real _t0963 = 0.e0;
    real _t0964 = 0.1e1;
    vec4 _t0965 = [_t0961, _t0962, _t0963, _t0964];
    tensor[4,4] _t0966 = [_t0956, _t095B, _t0960, _t0965];
    tensor[4,4][4] _t0967 = {_t0927, _t093C, _t0951, _t0966};
    real _t0968 = -0.1e1;
    real _t0969 = -0.57735026919e0;
    real _t096A = -0.1e1;
    real _t096B = 0.1e1;
    vec4 _t096C = [_t0968, _t0969, _t096A, _t096B];
    real _t096D = 0.1e1;
    real _t096E = -0.57735026919e0;
    real _t096F = 0.e0;
    real _t0970 = 0.e0;
    vec4 _t0971 = [_t096D, _t096E, _t096F, _t0970];
    real _t0972 = 0.e0;
    real _t0973 = -0.57735026919e0;
    real _t0974 = 0.1e1;
    real _t0975 = 0.e0;
    vec4 _t0976 = [_t0972, _t0973, _t0974, _t0975];
    real _t0977 = 0.e0;
    real _t0978 = 0.e0;
    real _t0979 = 0.e0;
    real _t097A = 0.1e1;
    vec4 _t097B = [_t0977, _t0978, _t0979, _t097A];
    tensor[4,4] _t097C = [_t096C, _t0971, _t0976, _t097B];
    real _t097D = 0.e0;
    real _t097E = -0.1e1;
    real _t097F = 0.e0;
    real _t0980 = 0.e0;
    vec4 _t0981 = [_t097D, _t097E, _t097F, _t0980];
    real _t0982 = 0.1e1;
    real _t0983 = 0.e0;
    real _t0984 = 0.e0;
    real _t0985 = 0.e0;
    vec4 _t0986 = [_t0982, _t0983, _t0984, _t0985];
    real _t0987 = 0.e0;
    real _t0988 = 0.e0;
    real _t0989 = 0.1e1;
    real _t098A = 0.e0;
    vec4 _t098B = [_t0987, _t0988, _t0989, _t098A];
    real _t098C = 0.e0;
    real _t098D = 0.e0;
    real _t098E = 0.e0;
    real _t098F = 0.1e1;
    vec4 _t0990 = [_t098C, _t098D, _t098E, _t098F];
    tensor[4,4] _t0991 = [_t0981, _t0986, _t098B, _t0990];
    real _t0992 = 0.1e1;
    real _t0993 = 0.e0;
    real _t0994 = 0.e0;
    real _t0995 = 0.e0;
    vec4 _t0996 = [_t0992, _t0993, _t0994, _t0995];
    real _t0997 = 0.e0;
    real _t0998 = 0.1e1;
    real _t0999 = 0.e0;
    real _t099A = 0.e0;
    vec4 _t099B = [_t0997, _t0998, _t0999, _t099A];
    real _t099C = 0.e0;
    real _t099D = 0.e0;
    real _t099E = 0.1e1;
    real _t099F = 0.e0;
    vec4 _t09A0 = [_t099C, _t099D, _t099E, _t099F];
    real _t09A1 = 0.e0;
    real _t09A2 = 0.e0;
    real _t09A3 = 0.e0;
    real _t09A4 = 0.1e1;
    vec4 _t09A5 = [_t09A1, _t09A2, _t09A3, _t09A4];
    tensor[4,4] _t09A6 = [_t0996, _t099B, _t09A0, _t09A5];
    real _t09A7 = 0.1e1;
    real _t09A8 = 0.e0;
    real _t09A9 = 0.e0;
    real _t09AA = 0.e0;
    vec4 _t09AB = [_t09A7, _t09A8, _t09A9, _t09AA];
    real _t09AC = 0.e0;
    real _t09AD = 0.e0;
    real _t09AE = 0.1e1;
    real _t09AF = 0.e0;
    vec4 _t09B0 = [_t09AC, _t09AD, _t09AE, _t09AF];
    real _t09B1 = 0.e0;
    real _t09B2 = -0.1e1;
    real _t09B3 = 0.e0;
    real _t09B4 = 0.e0;
    vec4 _t09B5 = [_t09B1, _t09B2, _t09B3, _t09B4];
    real _t09B6 = 0.e0;
    real _t09B7 = 0.e0;
    real _t09B8 = 0.e0;
    real _t09B9 = 0.1e1;
    vec4 _t09BA = [_t09B6, _t09B7, _t09B8, _t09B9];
    tensor[4,4] _t09BB = [_t09AB, _t09B0, _t09B5, _t09BA];
    tensor[4,4][4] _t09BC = {_t097C, _t0991, _t09A6, _t09BB};
    real _t09BD = -0.1e1;
    real _t09BE = -0.1e1;
    real _t09BF = 0.57735026919e0;
    real _t09C0 = 0.1e1;
    vec4 _t09C1 = [_t09BD, _t09BE, _t09BF, _t09C0];
    real _t09C2 = 0.1e1;
    real _t09C3 = 0.e0;
    real _t09C4 = 0.57735026919e0;
    real _t09C5 = 0.e0;
    vec4 _t09C6 = [_t09C2, _t09C3, _t09C4, _t09C5];
    real _t09C7 = 0.e0;
    real _t09C8 = 0.1e1;
    real _t09C9 = 0.57735026919e0;
    real _t09CA = 0.e0;
    vec4 _t09CB = [_t09C7, _t09C8, _t09C9, _t09CA];
    real _t09CC = 0.e0;
    real _t09CD = 0.e0;
    real _t09CE = 0.e0;
    real _t09CF = 0.1e1;
    vec4 _t09D0 = [_t09CC, _t09CD, _t09CE, _t09CF];
    tensor[4,4] _t09D1 = [_t09C1, _t09C6, _t09CB, _t09D0];
    real _t09D2 = 0.e0;
    real _t09D3 = 0.e0;
    real _t09D4 = 0.1e1;
    real _t09D5 = 0.e0;
    vec4 _t09D6 = [_t09D2, _t09D3, _t09D4, _t09D5];
    real _t09D7 = 0.1e1;
    real _t09D8 = 0.e0;
    real _t09D9 = 0.e0;
    real _t09DA = 0.e0;
    vec4 _t09DB = [_t09D7, _t09D8, _t09D9, _t09DA];
    real _t09DC = 0.e0;
    real _t09DD = 0.1e1;
    real _t09DE = 0.e0;
    real _t09DF = 0.e0;
    vec4 _t09E0 = [_t09DC, _t09DD, _t09DE, _t09DF];
    real _t09E1 = 0.e0;
    real _t09E2 = 0.e0;
    real _t09E3 = 0.e0;
    real _t09E4 = 0.1e1;
    vec4 _t09E5 = [_t09E1, _t09E2, _t09E3, _t09E4];
    tensor[4,4] _t09E6 = [_t09D6, _t09DB, _t09E0, _t09E5];
    real _t09E7 = 0.1e1;
    real _t09E8 = 0.e0;
    real _t09E9 = 0.e0;
    real _t09EA = 0.e0;
    vec4 _t09EB = [_t09E7, _t09E8, _t09E9, _t09EA];
    real _t09EC = 0.e0;
    real _t09ED = 0.e0;
    real _t09EE = -0.1e1;
    real _t09EF = 0.e0;
    vec4 _t09F0 = [_t09EC, _t09ED, _t09EE, _t09EF];
    real _t09F1 = 0.e0;
    real _t09F2 = 0.1e1;
    real _t09F3 = 0.e0;
    real _t09F4 = 0.e0;
    vec4 _t09F5 = [_t09F1, _t09F2, _t09F3, _t09F4];
    real _t09F6 = 0.e0;
    real _t09F7 = 0.e0;
    real _t09F8 = 0.e0;
    real _t09F9 = 0.1e1;
    vec4 _t09FA = [_t09F6, _t09F7, _t09F8, _t09F9];
    tensor[4,4] _t09FB = [_t09EB, _t09F0, _t09F5, _t09FA];
    real _t09FC = 0.1e1;
    real _t09FD = 0.e0;
    real _t09FE = 0.e0;
    real _t09FF = 0.e0;
    vec4 _t0A00 = [_t09FC, _t09FD, _t09FE, _t09FF];
    real _t0A01 = 0.e0;
    real _t0A02 = 0.1e1;
    real _t0A03 = 0.e0;
    real _t0A04 = 0.e0;
    vec4 _t0A05 = [_t0A01, _t0A02, _t0A03, _t0A04];
    real _t0A06 = 0.e0;
    real _t0A07 = 0.e0;
    real _t0A08 = 0.1e1;
    real _t0A09 = 0.e0;
    vec4 _t0A0A = [_t0A06, _t0A07, _t0A08, _t0A09];
    real _t0A0B = 0.e0;
    real _t0A0C = 0.e0;
    real _t0A0D = 0.e0;
    real _t0A0E = 0.1e1;
    vec4 _t0A0F = [_t0A0B, _t0A0C, _t0A0D, _t0A0E];
    tensor[4,4] _t0A10 = [_t0A00, _t0A05, _t0A0A, _t0A0F];
    tensor[4,4][4] _t0A11 = {_t09D1, _t09E6, _t09FB, _t0A10};
    tensor[4,4][4][4] _t0A12 = {_t0912, _t0967, _t09BC, _t0A11};
    real _t0A13 = time08B0[1];
    int _t0A14 = prim $r2i01B7 (_t0A13);
    tensor[4,4][4] _t0A15 = prim $sub01C0<tensor[4,4][4]; %4> (_t0A12, _t0A14);
    real _t0A16 = time08B0[1];
    int _t0A17 = prim $r2i01B7 (_t0A16);
    int[2] _t0A18 = func nextCell408B4 (_t0A17, cellId08AD, mesh08AC);
    int _t0A19 = 1;
    int _t0A1A = prim $sub01C0<int; %2> (_t0A18, _t0A19);
    tensor[4,4] _t0A1B = prim $sub01C0<tensor[4,4]; %4> (_t0A15, _t0A1A);
    real _t0A1C = time08B0[0];
    vec3 _t0A1D = prim *0036<$[3]> (_t0A1C, dPos08AF);
    vec3 _t0A1E = prim +0017<$[3]> (_t0A1D, refPos08AE);
    real _t0A1F = _t0A1E[0];
    real _t0A20 = time08B0[0];
    vec3 _t0A21 = prim *0036<$[3]> (_t0A20, dPos08AF);
    vec3 _t0A22 = prim +0017<$[3]> (_t0A21, refPos08AE);
    real _t0A23 = _t0A22[1];
    real _t0A24 = time08B0[0];
    vec3 _t0A25 = prim *0036<$[3]> (_t0A24, dPos08AF);
    vec3 _t0A26 = prim +0017<$[3]> (_t0A25, refPos08AE);
    real _t0A27 = _t0A26[2];
    real _t0A28 = 0.1e1;
    vec4 _t0A29 = [_t0A1F, _t0A23, _t0A27, _t0A28];
    vec4 _t0A2A = prim •00CE<$[4,4]; $[4]; $[4]> (_t0A1B, _t0A29);
    real _t0A2B = _t0A2A[0];
    real _t0A2C = 0.1e1;
    real _t0A2D = 0.e0;
    real _t0A2E = 0.e0;
    real _t0A2F = 0.e0;
    vec4 _t0A30 = [_t0A2C, _t0A2D, _t0A2E, _t0A2F];
    real _t0A31 = 0.e0;
    real _t0A32 = 0.1e1;
    real _t0A33 = 0.e0;
    real _t0A34 = 0.e0;
    vec4 _t0A35 = [_t0A31, _t0A32, _t0A33, _t0A34];
    real _t0A36 = 0.e0;
    real _t0A37 = 0.e0;
    real _t0A38 = 0.1e1;
    real _t0A39 = 0.e0;
    vec4 _t0A3A = [_t0A36, _t0A37, _t0A38, _t0A39];
    real _t0A3B = 0.971445146547e-16;
    real _t0A3C = 0.e0;
    real _t0A3D = 0.e0;
    real _t0A3E = 0.1e1;
    vec4 _t0A3F = [_t0A3B, _t0A3C, _t0A3D, _t0A3E];
    tensor[4,4] _t0A40 = [_t0A30, _t0A35, _t0A3A, _t0A3F];
    real _t0A41 = 0.57735026919e0;
    real _t0A42 = 0.57735026919e0;
    real _t0A43 = 0.57735026919e0;
    real _t0A44 = -0.57735026919e0;
    vec4 _t0A45 = [_t0A41, _t0A42, _t0A43, _t0A44];
    real _t0A46 = -0.333333333333e0;
    real _t0A47 = 0.666666666667e0;
    real _t0A48 = -0.333333333333e0;
    real _t0A49 = 0.333333333333e0;
    vec4 _t0A4A = [_t0A46, _t0A47, _t0A48, _t0A49];
    real _t0A4B = -0.333333333333e0;
    real _t0A4C = -0.333333333333e0;
    real _t0A4D = 0.666666666667e0;
    real _t0A4E = 0.333333333333e0;
    vec4 _t0A4F = [_t0A4B, _t0A4C, _t0A4D, _t0A4E];
    real _t0A50 = 0.971445146547e-16;
    real _t0A51 = 0.e0;
    real _t0A52 = 0.e0;
    real _t0A53 = 0.1e1;
    vec4 _t0A54 = [_t0A50, _t0A51, _t0A52, _t0A53];
    tensor[4,4] _t0A55 = [_t0A45, _t0A4A, _t0A4F, _t0A54];
    real _t0A56 = -0.333333333333e0;
    real _t0A57 = 0.666666666667e0;
    real _t0A58 = -0.333333333333e0;
    real _t0A59 = 0.333333333333e0;
    vec4 _t0A5A = [_t0A56, _t0A57, _t0A58, _t0A59];
    real _t0A5B = -0.57735026919e0;
    real _t0A5C = -0.57735026919e0;
    real _t0A5D = -0.57735026919e0;
    real _t0A5E = 0.57735026919e0;
    vec4 _t0A5F = [_t0A5B, _t0A5C, _t0A5D, _t0A5E];
    real _t0A60 = -0.333333333333e0;
    real _t0A61 = -0.333333333333e0;
    real _t0A62 = 0.666666666667e0;
    real _t0A63 = 0.333333333333e0;
    vec4 _t0A64 = [_t0A60, _t0A61, _t0A62, _t0A63];
    real _t0A65 = 0.971445146547e-16;
    real _t0A66 = 0.e0;
    real _t0A67 = 0.e0;
    real _t0A68 = 0.1e1;
    vec4 _t0A69 = [_t0A65, _t0A66, _t0A67, _t0A68];
    tensor[4,4] _t0A6A = [_t0A5A, _t0A5F, _t0A64, _t0A69];
    real _t0A6B = -0.333333333333e0;
    real _t0A6C = 0.666666666667e0;
    real _t0A6D = -0.333333333333e0;
    real _t0A6E = 0.333333333333e0;
    vec4 _t0A6F = [_t0A6B, _t0A6C, _t0A6D, _t0A6E];
    real _t0A70 = -0.333333333333e0;
    real _t0A71 = -0.333333333333e0;
    real _t0A72 = 0.666666666667e0;
    real _t0A73 = 0.333333333333e0;
    vec4 _t0A74 = [_t0A70, _t0A71, _t0A72, _t0A73];
    real _t0A75 = 0.57735026919e0;
    real _t0A76 = 0.57735026919e0;
    real _t0A77 = 0.57735026919e0;
    real _t0A78 = -0.57735026919e0;
    vec4 _t0A79 = [_t0A75, _t0A76, _t0A77, _t0A78];
    real _t0A7A = 0.971445146547e-16;
    real _t0A7B = 0.e0;
    real _t0A7C = 0.e0;
    real _t0A7D = 0.1e1;
    vec4 _t0A7E = [_t0A7A, _t0A7B, _t0A7C, _t0A7D];
    tensor[4,4] _t0A7F = [_t0A6F, _t0A74, _t0A79, _t0A7E];
    tensor[4,4][4] _t0A80 = {_t0A40, _t0A55, _t0A6A, _t0A7F};
    real _t0A81 = 0.57735026919e0;
    real _t0A82 = -0.1e1;
    real _t0A83 = -0.1e1;
    real _t0A84 = 0.1e1;
    vec4 _t0A85 = [_t0A81, _t0A82, _t0A83, _t0A84];
    real _t0A86 = 0.57735026919e0;
    real _t0A87 = 0.1e1;
    real _t0A88 = 0.e0;
    real _t0A89 = 0.e0;
    vec4 _t0A8A = [_t0A86, _t0A87, _t0A88, _t0A89];
    real _t0A8B = 0.57735026919e0;
    real _t0A8C = 0.e0;
    real _t0A8D = 0.1e1;
    real _t0A8E = 0.e0;
    vec4 _t0A8F = [_t0A8B, _t0A8C, _t0A8D, _t0A8E];
    real _t0A90 = 0.e0;
    real _t0A91 = 0.e0;
    real _t0A92 = 0.e0;
    real _t0A93 = 0.1e1;
    vec4 _t0A94 = [_t0A90, _t0A91, _t0A92, _t0A93];
    tensor[4,4] _t0A95 = [_t0A85, _t0A8A, _t0A8F, _t0A94];
    real _t0A96 = 0.1e1;
    real _t0A97 = 0.e0;
    real _t0A98 = 0.e0;
    real _t0A99 = 0.e0;
    vec4 _t0A9A = [_t0A96, _t0A97, _t0A98, _t0A99];
    real _t0A9B = 0.e0;
    real _t0A9C = 0.1e1;
    real _t0A9D = 0.e0;
    real _t0A9E = 0.e0;
    vec4 _t0A9F = [_t0A9B, _t0A9C, _t0A9D, _t0A9E];
    real _t0AA0 = 0.e0;
    real _t0AA1 = 0.e0;
    real _t0AA2 = 0.1e1;
    real _t0AA3 = 0.e0;
    vec4 _t0AA4 = [_t0AA0, _t0AA1, _t0AA2, _t0AA3];
    real _t0AA5 = 0.e0;
    real _t0AA6 = 0.e0;
    real _t0AA7 = 0.e0;
    real _t0AA8 = 0.1e1;
    vec4 _t0AA9 = [_t0AA5, _t0AA6, _t0AA7, _t0AA8];
    tensor[4,4] _t0AAA = [_t0A9A, _t0A9F, _t0AA4, _t0AA9];
    real _t0AAB = 0.e0;
    real _t0AAC = 0.1e1;
    real _t0AAD = 0.e0;
    real _t0AAE = 0.e0;
    vec4 _t0AAF = [_t0AAB, _t0AAC, _t0AAD, _t0AAE];
    real _t0AB0 = -0.1e1;
    real _t0AB1 = 0.e0;
    real _t0AB2 = 0.e0;
    real _t0AB3 = 0.e0;
    vec4 _t0AB4 = [_t0AB0, _t0AB1, _t0AB2, _t0AB3];
    real _t0AB5 = 0.e0;
    real _t0AB6 = 0.e0;
    real _t0AB7 = 0.1e1;
    real _t0AB8 = 0.e0;
    vec4 _t0AB9 = [_t0AB5, _t0AB6, _t0AB7, _t0AB8];
    real _t0ABA = 0.e0;
    real _t0ABB = 0.e0;
    real _t0ABC = 0.e0;
    real _t0ABD = 0.1e1;
    vec4 _t0ABE = [_t0ABA, _t0ABB, _t0ABC, _t0ABD];
    tensor[4,4] _t0ABF = [_t0AAF, _t0AB4, _t0AB9, _t0ABE];
    real _t0AC0 = 0.e0;
    real _t0AC1 = 0.1e1;
    real _t0AC2 = 0.e0;
    real _t0AC3 = 0.e0;
    vec4 _t0AC4 = [_t0AC0, _t0AC1, _t0AC2, _t0AC3];
    real _t0AC5 = 0.e0;
    real _t0AC6 = 0.e0;
    real _t0AC7 = 0.1e1;
    real _t0AC8 = 0.e0;
    vec4 _t0AC9 = [_t0AC5, _t0AC6, _t0AC7, _t0AC8];
    real _t0ACA = 0.1e1;
    real _t0ACB = 0.e0;
    real _t0ACC = 0.e0;
    real _t0ACD = 0.e0;
    vec4 _t0ACE = [_t0ACA, _t0ACB, _t0ACC, _t0ACD];
    real _t0ACF = 0.e0;
    real _t0AD0 = 0.e0;
    real _t0AD1 = 0.e0;
    real _t0AD2 = 0.1e1;
    vec4 _t0AD3 = [_t0ACF, _t0AD0, _t0AD1, _t0AD2];
    tensor[4,4] _t0AD4 = [_t0AC4, _t0AC9, _t0ACE, _t0AD3];
    tensor[4,4][4] _t0AD5 = {_t0A95, _t0AAA, _t0ABF, _t0AD4};
    real _t0AD6 = -0.1e1;
    real _t0AD7 = -0.57735026919e0;
    real _t0AD8 = -0.1e1;
    real _t0AD9 = 0.1e1;
    vec4 _t0ADA = [_t0AD6, _t0AD7, _t0AD8, _t0AD9];
    real _t0ADB = 0.1e1;
    real _t0ADC = -0.57735026919e0;
    real _t0ADD = 0.e0;
    real _t0ADE = 0.e0;
    vec4 _t0ADF = [_t0ADB, _t0ADC, _t0ADD, _t0ADE];
    real _t0AE0 = 0.e0;
    real _t0AE1 = -0.57735026919e0;
    real _t0AE2 = 0.1e1;
    real _t0AE3 = 0.e0;
    vec4 _t0AE4 = [_t0AE0, _t0AE1, _t0AE2, _t0AE3];
    real _t0AE5 = 0.e0;
    real _t0AE6 = 0.e0;
    real _t0AE7 = 0.e0;
    real _t0AE8 = 0.1e1;
    vec4 _t0AE9 = [_t0AE5, _t0AE6, _t0AE7, _t0AE8];
    tensor[4,4] _t0AEA = [_t0ADA, _t0ADF, _t0AE4, _t0AE9];
    real _t0AEB = 0.e0;
    real _t0AEC = -0.1e1;
    real _t0AED = 0.e0;
    real _t0AEE = 0.e0;
    vec4 _t0AEF = [_t0AEB, _t0AEC, _t0AED, _t0AEE];
    real _t0AF0 = 0.1e1;
    real _t0AF1 = 0.e0;
    real _t0AF2 = 0.e0;
    real _t0AF3 = 0.e0;
    vec4 _t0AF4 = [_t0AF0, _t0AF1, _t0AF2, _t0AF3];
    real _t0AF5 = 0.e0;
    real _t0AF6 = 0.e0;
    real _t0AF7 = 0.1e1;
    real _t0AF8 = 0.e0;
    vec4 _t0AF9 = [_t0AF5, _t0AF6, _t0AF7, _t0AF8];
    real _t0AFA = 0.e0;
    real _t0AFB = 0.e0;
    real _t0AFC = 0.e0;
    real _t0AFD = 0.1e1;
    vec4 _t0AFE = [_t0AFA, _t0AFB, _t0AFC, _t0AFD];
    tensor[4,4] _t0AFF = [_t0AEF, _t0AF4, _t0AF9, _t0AFE];
    real _t0B00 = 0.1e1;
    real _t0B01 = 0.e0;
    real _t0B02 = 0.e0;
    real _t0B03 = 0.e0;
    vec4 _t0B04 = [_t0B00, _t0B01, _t0B02, _t0B03];
    real _t0B05 = 0.e0;
    real _t0B06 = 0.1e1;
    real _t0B07 = 0.e0;
    real _t0B08 = 0.e0;
    vec4 _t0B09 = [_t0B05, _t0B06, _t0B07, _t0B08];
    real _t0B0A = 0.e0;
    real _t0B0B = 0.e0;
    real _t0B0C = 0.1e1;
    real _t0B0D = 0.e0;
    vec4 _t0B0E = [_t0B0A, _t0B0B, _t0B0C, _t0B0D];
    real _t0B0F = 0.e0;
    real _t0B10 = 0.e0;
    real _t0B11 = 0.e0;
    real _t0B12 = 0.1e1;
    vec4 _t0B13 = [_t0B0F, _t0B10, _t0B11, _t0B12];
    tensor[4,4] _t0B14 = [_t0B04, _t0B09, _t0B0E, _t0B13];
    real _t0B15 = 0.1e1;
    real _t0B16 = 0.e0;
    real _t0B17 = 0.e0;
    real _t0B18 = 0.e0;
    vec4 _t0B19 = [_t0B15, _t0B16, _t0B17, _t0B18];
    real _t0B1A = 0.e0;
    real _t0B1B = 0.e0;
    real _t0B1C = 0.1e1;
    real _t0B1D = 0.e0;
    vec4 _t0B1E = [_t0B1A, _t0B1B, _t0B1C, _t0B1D];
    real _t0B1F = 0.e0;
    real _t0B20 = -0.1e1;
    real _t0B21 = 0.e0;
    real _t0B22 = 0.e0;
    vec4 _t0B23 = [_t0B1F, _t0B20, _t0B21, _t0B22];
    real _t0B24 = 0.e0;
    real _t0B25 = 0.e0;
    real _t0B26 = 0.e0;
    real _t0B27 = 0.1e1;
    vec4 _t0B28 = [_t0B24, _t0B25, _t0B26, _t0B27];
    tensor[4,4] _t0B29 = [_t0B19, _t0B1E, _t0B23, _t0B28];
    tensor[4,4][4] _t0B2A = {_t0AEA, _t0AFF, _t0B14, _t0B29};
    real _t0B2B = -0.1e1;
    real _t0B2C = -0.1e1;
    real _t0B2D = 0.57735026919e0;
    real _t0B2E = 0.1e1;
    vec4 _t0B2F = [_t0B2B, _t0B2C, _t0B2D, _t0B2E];
    real _t0B30 = 0.1e1;
    real _t0B31 = 0.e0;
    real _t0B32 = 0.57735026919e0;
    real _t0B33 = 0.e0;
    vec4 _t0B34 = [_t0B30, _t0B31, _t0B32, _t0B33];
    real _t0B35 = 0.e0;
    real _t0B36 = 0.1e1;
    real _t0B37 = 0.57735026919e0;
    real _t0B38 = 0.e0;
    vec4 _t0B39 = [_t0B35, _t0B36, _t0B37, _t0B38];
    real _t0B3A = 0.e0;
    real _t0B3B = 0.e0;
    real _t0B3C = 0.e0;
    real _t0B3D = 0.1e1;
    vec4 _t0B3E = [_t0B3A, _t0B3B, _t0B3C, _t0B3D];
    tensor[4,4] _t0B3F = [_t0B2F, _t0B34, _t0B39, _t0B3E];
    real _t0B40 = 0.e0;
    real _t0B41 = 0.e0;
    real _t0B42 = 0.1e1;
    real _t0B43 = 0.e0;
    vec4 _t0B44 = [_t0B40, _t0B41, _t0B42, _t0B43];
    real _t0B45 = 0.1e1;
    real _t0B46 = 0.e0;
    real _t0B47 = 0.e0;
    real _t0B48 = 0.e0;
    vec4 _t0B49 = [_t0B45, _t0B46, _t0B47, _t0B48];
    real _t0B4A = 0.e0;
    real _t0B4B = 0.1e1;
    real _t0B4C = 0.e0;
    real _t0B4D = 0.e0;
    vec4 _t0B4E = [_t0B4A, _t0B4B, _t0B4C, _t0B4D];
    real _t0B4F = 0.e0;
    real _t0B50 = 0.e0;
    real _t0B51 = 0.e0;
    real _t0B52 = 0.1e1;
    vec4 _t0B53 = [_t0B4F, _t0B50, _t0B51, _t0B52];
    tensor[4,4] _t0B54 = [_t0B44, _t0B49, _t0B4E, _t0B53];
    real _t0B55 = 0.1e1;
    real _t0B56 = 0.e0;
    real _t0B57 = 0.e0;
    real _t0B58 = 0.e0;
    vec4 _t0B59 = [_t0B55, _t0B56, _t0B57, _t0B58];
    real _t0B5A = 0.e0;
    real _t0B5B = 0.e0;
    real _t0B5C = -0.1e1;
    real _t0B5D = 0.e0;
    vec4 _t0B5E = [_t0B5A, _t0B5B, _t0B5C, _t0B5D];
    real _t0B5F = 0.e0;
    real _t0B60 = 0.1e1;
    real _t0B61 = 0.e0;
    real _t0B62 = 0.e0;
    vec4 _t0B63 = [_t0B5F, _t0B60, _t0B61, _t0B62];
    real _t0B64 = 0.e0;
    real _t0B65 = 0.e0;
    real _t0B66 = 0.e0;
    real _t0B67 = 0.1e1;
    vec4 _t0B68 = [_t0B64, _t0B65, _t0B66, _t0B67];
    tensor[4,4] _t0B69 = [_t0B59, _t0B5E, _t0B63, _t0B68];
    real _t0B6A = 0.1e1;
    real _t0B6B = 0.e0;
    real _t0B6C = 0.e0;
    real _t0B6D = 0.e0;
    vec4 _t0B6E = [_t0B6A, _t0B6B, _t0B6C, _t0B6D];
    real _t0B6F = 0.e0;
    real _t0B70 = 0.1e1;
    real _t0B71 = 0.e0;
    real _t0B72 = 0.e0;
    vec4 _t0B73 = [_t0B6F, _t0B70, _t0B71, _t0B72];
    real _t0B74 = 0.e0;
    real _t0B75 = 0.e0;
    real _t0B76 = 0.1e1;
    real _t0B77 = 0.e0;
    vec4 _t0B78 = [_t0B74, _t0B75, _t0B76, _t0B77];
    real _t0B79 = 0.e0;
    real _t0B7A = 0.e0;
    real _t0B7B = 0.e0;
    real _t0B7C = 0.1e1;
    vec4 _t0B7D = [_t0B79, _t0B7A, _t0B7B, _t0B7C];
    tensor[4,4] _t0B7E = [_t0B6E, _t0B73, _t0B78, _t0B7D];
    tensor[4,4][4] _t0B7F = {_t0B3F, _t0B54, _t0B69, _t0B7E};
    tensor[4,4][4][4] _t0B80 = {_t0A80, _t0AD5, _t0B2A, _t0B7F};
    real _t0B81 = time08B0[1];
    int _t0B82 = prim $r2i01B7 (_t0B81);
    tensor[4,4][4] _t0B83 = prim $sub01C0<tensor[4,4][4]; %4> (_t0B80, _t0B82);
    real _t0B84 = time08B0[1];
    int _t0B85 = prim $r2i01B7 (_t0B84);
    int[2] _t0B86 = func nextCell408B4 (_t0B85, cellId08AD, mesh08AC);
    int _t0B87 = 1;
    int _t0B88 = prim $sub01C0<int; %2> (_t0B86, _t0B87);
    tensor[4,4] _t0B89 = prim $sub01C0<tensor[4,4]; %4> (_t0B83, _t0B88);
    real _t0B8A = time08B0[0];
    vec3 _t0B8B = prim *0036<$[3]> (_t0B8A, dPos08AF);
    vec3 _t0B8C = prim +0017<$[3]> (_t0B8B, refPos08AE);
    real _t0B8D = _t0B8C[0];
    real _t0B8E = time08B0[0];
    vec3 _t0B8F = prim *0036<$[3]> (_t0B8E, dPos08AF);
    vec3 _t0B90 = prim +0017<$[3]> (_t0B8F, refPos08AE);
    real _t0B91 = _t0B90[1];
    real _t0B92 = time08B0[0];
    vec3 _t0B93 = prim *0036<$[3]> (_t0B92, dPos08AF);
    vec3 _t0B94 = prim +0017<$[3]> (_t0B93, refPos08AE);
    real _t0B95 = _t0B94[2];
    real _t0B96 = 0.1e1;
    vec4 _t0B97 = [_t0B8D, _t0B91, _t0B95, _t0B96];
    vec4 _t0B98 = prim •00CE<$[4,4]; $[4]; $[4]> (_t0B89, _t0B97);
    real _t0B99 = _t0B98[1];
    real _t0B9A = 0.1e1;
    real _t0B9B = 0.e0;
    real _t0B9C = 0.e0;
    real _t0B9D = 0.e0;
    vec4 _t0B9E = [_t0B9A, _t0B9B, _t0B9C, _t0B9D];
    real _t0B9F = 0.e0;
    real _t0BA0 = 0.1e1;
    real _t0BA1 = 0.e0;
    real _t0BA2 = 0.e0;
    vec4 _t0BA3 = [_t0B9F, _t0BA0, _t0BA1, _t0BA2];
    real _t0BA4 = 0.e0;
    real _t0BA5 = 0.e0;
    real _t0BA6 = 0.1e1;
    real _t0BA7 = 0.e0;
    vec4 _t0BA8 = [_t0BA4, _t0BA5, _t0BA6, _t0BA7];
    real _t0BA9 = 0.971445146547e-16;
    real _t0BAA = 0.e0;
    real _t0BAB = 0.e0;
    real _t0BAC = 0.1e1;
    vec4 _t0BAD = [_t0BA9, _t0BAA, _t0BAB, _t0BAC];
    tensor[4,4] _t0BAE = [_t0B9E, _t0BA3, _t0BA8, _t0BAD];
    real _t0BAF = 0.57735026919e0;
    real _t0BB0 = 0.57735026919e0;
    real _t0BB1 = 0.57735026919e0;
    real _t0BB2 = -0.57735026919e0;
    vec4 _t0BB3 = [_t0BAF, _t0BB0, _t0BB1, _t0BB2];
    real _t0BB4 = -0.333333333333e0;
    real _t0BB5 = 0.666666666667e0;
    real _t0BB6 = -0.333333333333e0;
    real _t0BB7 = 0.333333333333e0;
    vec4 _t0BB8 = [_t0BB4, _t0BB5, _t0BB6, _t0BB7];
    real _t0BB9 = -0.333333333333e0;
    real _t0BBA = -0.333333333333e0;
    real _t0BBB = 0.666666666667e0;
    real _t0BBC = 0.333333333333e0;
    vec4 _t0BBD = [_t0BB9, _t0BBA, _t0BBB, _t0BBC];
    real _t0BBE = 0.971445146547e-16;
    real _t0BBF = 0.e0;
    real _t0BC0 = 0.e0;
    real _t0BC1 = 0.1e1;
    vec4 _t0BC2 = [_t0BBE, _t0BBF, _t0BC0, _t0BC1];
    tensor[4,4] _t0BC3 = [_t0BB3, _t0BB8, _t0BBD, _t0BC2];
    real _t0BC4 = -0.333333333333e0;
    real _t0BC5 = 0.666666666667e0;
    real _t0BC6 = -0.333333333333e0;
    real _t0BC7 = 0.333333333333e0;
    vec4 _t0BC8 = [_t0BC4, _t0BC5, _t0BC6, _t0BC7];
    real _t0BC9 = -0.57735026919e0;
    real _t0BCA = -0.57735026919e0;
    real _t0BCB = -0.57735026919e0;
    real _t0BCC = 0.57735026919e0;
    vec4 _t0BCD = [_t0BC9, _t0BCA, _t0BCB, _t0BCC];
    real _t0BCE = -0.333333333333e0;
    real _t0BCF = -0.333333333333e0;
    real _t0BD0 = 0.666666666667e0;
    real _t0BD1 = 0.333333333333e0;
    vec4 _t0BD2 = [_t0BCE, _t0BCF, _t0BD0, _t0BD1];
    real _t0BD3 = 0.971445146547e-16;
    real _t0BD4 = 0.e0;
    real _t0BD5 = 0.e0;
    real _t0BD6 = 0.1e1;
    vec4 _t0BD7 = [_t0BD3, _t0BD4, _t0BD5, _t0BD6];
    tensor[4,4] _t0BD8 = [_t0BC8, _t0BCD, _t0BD2, _t0BD7];
    real _t0BD9 = -0.333333333333e0;
    real _t0BDA = 0.666666666667e0;
    real _t0BDB = -0.333333333333e0;
    real _t0BDC = 0.333333333333e0;
    vec4 _t0BDD = [_t0BD9, _t0BDA, _t0BDB, _t0BDC];
    real _t0BDE = -0.333333333333e0;
    real _t0BDF = -0.333333333333e0;
    real _t0BE0 = 0.666666666667e0;
    real _t0BE1 = 0.333333333333e0;
    vec4 _t0BE2 = [_t0BDE, _t0BDF, _t0BE0, _t0BE1];
    real _t0BE3 = 0.57735026919e0;
    real _t0BE4 = 0.57735026919e0;
    real _t0BE5 = 0.57735026919e0;
    real _t0BE6 = -0.57735026919e0;
    vec4 _t0BE7 = [_t0BE3, _t0BE4, _t0BE5, _t0BE6];
    real _t0BE8 = 0.971445146547e-16;
    real _t0BE9 = 0.e0;
    real _t0BEA = 0.e0;
    real _t0BEB = 0.1e1;
    vec4 _t0BEC = [_t0BE8, _t0BE9, _t0BEA, _t0BEB];
    tensor[4,4] _t0BED = [_t0BDD, _t0BE2, _t0BE7, _t0BEC];
    tensor[4,4][4] _t0BEE = {_t0BAE, _t0BC3, _t0BD8, _t0BED};
    real _t0BEF = 0.57735026919e0;
    real _t0BF0 = -0.1e1;
    real _t0BF1 = -0.1e1;
    real _t0BF2 = 0.1e1;
    vec4 _t0BF3 = [_t0BEF, _t0BF0, _t0BF1, _t0BF2];
    real _t0BF4 = 0.57735026919e0;
    real _t0BF5 = 0.1e1;
    real _t0BF6 = 0.e0;
    real _t0BF7 = 0.e0;
    vec4 _t0BF8 = [_t0BF4, _t0BF5, _t0BF6, _t0BF7];
    real _t0BF9 = 0.57735026919e0;
    real _t0BFA = 0.e0;
    real _t0BFB = 0.1e1;
    real _t0BFC = 0.e0;
    vec4 _t0BFD = [_t0BF9, _t0BFA, _t0BFB, _t0BFC];
    real _t0BFE = 0.e0;
    real _t0BFF = 0.e0;
    real _t0C00 = 0.e0;
    real _t0C01 = 0.1e1;
    vec4 _t0C02 = [_t0BFE, _t0BFF, _t0C00, _t0C01];
    tensor[4,4] _t0C03 = [_t0BF3, _t0BF8, _t0BFD, _t0C02];
    real _t0C04 = 0.1e1;
    real _t0C05 = 0.e0;
    real _t0C06 = 0.e0;
    real _t0C07 = 0.e0;
    vec4 _t0C08 = [_t0C04, _t0C05, _t0C06, _t0C07];
    real _t0C09 = 0.e0;
    real _t0C0A = 0.1e1;
    real _t0C0B = 0.e0;
    real _t0C0C = 0.e0;
    vec4 _t0C0D = [_t0C09, _t0C0A, _t0C0B, _t0C0C];
    real _t0C0E = 0.e0;
    real _t0C0F = 0.e0;
    real _t0C10 = 0.1e1;
    real _t0C11 = 0.e0;
    vec4 _t0C12 = [_t0C0E, _t0C0F, _t0C10, _t0C11];
    real _t0C13 = 0.e0;
    real _t0C14 = 0.e0;
    real _t0C15 = 0.e0;
    real _t0C16 = 0.1e1;
    vec4 _t0C17 = [_t0C13, _t0C14, _t0C15, _t0C16];
    tensor[4,4] _t0C18 = [_t0C08, _t0C0D, _t0C12, _t0C17];
    real _t0C19 = 0.e0;
    real _t0C1A = 0.1e1;
    real _t0C1B = 0.e0;
    real _t0C1C = 0.e0;
    vec4 _t0C1D = [_t0C19, _t0C1A, _t0C1B, _t0C1C];
    real _t0C1E = -0.1e1;
    real _t0C1F = 0.e0;
    real _t0C20 = 0.e0;
    real _t0C21 = 0.e0;
    vec4 _t0C22 = [_t0C1E, _t0C1F, _t0C20, _t0C21];
    real _t0C23 = 0.e0;
    real _t0C24 = 0.e0;
    real _t0C25 = 0.1e1;
    real _t0C26 = 0.e0;
    vec4 _t0C27 = [_t0C23, _t0C24, _t0C25, _t0C26];
    real _t0C28 = 0.e0;
    real _t0C29 = 0.e0;
    real _t0C2A = 0.e0;
    real _t0C2B = 0.1e1;
    vec4 _t0C2C = [_t0C28, _t0C29, _t0C2A, _t0C2B];
    tensor[4,4] _t0C2D = [_t0C1D, _t0C22, _t0C27, _t0C2C];
    real _t0C2E = 0.e0;
    real _t0C2F = 0.1e1;
    real _t0C30 = 0.e0;
    real _t0C31 = 0.e0;
    vec4 _t0C32 = [_t0C2E, _t0C2F, _t0C30, _t0C31];
    real _t0C33 = 0.e0;
    real _t0C34 = 0.e0;
    real _t0C35 = 0.1e1;
    real _t0C36 = 0.e0;
    vec4 _t0C37 = [_t0C33, _t0C34, _t0C35, _t0C36];
    real _t0C38 = 0.1e1;
    real _t0C39 = 0.e0;
    real _t0C3A = 0.e0;
    real _t0C3B = 0.e0;
    vec4 _t0C3C = [_t0C38, _t0C39, _t0C3A, _t0C3B];
    real _t0C3D = 0.e0;
    real _t0C3E = 0.e0;
    real _t0C3F = 0.e0;
    real _t0C40 = 0.1e1;
    vec4 _t0C41 = [_t0C3D, _t0C3E, _t0C3F, _t0C40];
    tensor[4,4] _t0C42 = [_t0C32, _t0C37, _t0C3C, _t0C41];
    tensor[4,4][4] _t0C43 = {_t0C03, _t0C18, _t0C2D, _t0C42};
    real _t0C44 = -0.1e1;
    real _t0C45 = -0.57735026919e0;
    real _t0C46 = -0.1e1;
    real _t0C47 = 0.1e1;
    vec4 _t0C48 = [_t0C44, _t0C45, _t0C46, _t0C47];
    real _t0C49 = 0.1e1;
    real _t0C4A = -0.57735026919e0;
    real _t0C4B = 0.e0;
    real _t0C4C = 0.e0;
    vec4 _t0C4D = [_t0C49, _t0C4A, _t0C4B, _t0C4C];
    real _t0C4E = 0.e0;
    real _t0C4F = -0.57735026919e0;
    real _t0C50 = 0.1e1;
    real _t0C51 = 0.e0;
    vec4 _t0C52 = [_t0C4E, _t0C4F, _t0C50, _t0C51];
    real _t0C53 = 0.e0;
    real _t0C54 = 0.e0;
    real _t0C55 = 0.e0;
    real _t0C56 = 0.1e1;
    vec4 _t0C57 = [_t0C53, _t0C54, _t0C55, _t0C56];
    tensor[4,4] _t0C58 = [_t0C48, _t0C4D, _t0C52, _t0C57];
    real _t0C59 = 0.e0;
    real _t0C5A = -0.1e1;
    real _t0C5B = 0.e0;
    real _t0C5C = 0.e0;
    vec4 _t0C5D = [_t0C59, _t0C5A, _t0C5B, _t0C5C];
    real _t0C5E = 0.1e1;
    real _t0C5F = 0.e0;
    real _t0C60 = 0.e0;
    real _t0C61 = 0.e0;
    vec4 _t0C62 = [_t0C5E, _t0C5F, _t0C60, _t0C61];
    real _t0C63 = 0.e0;
    real _t0C64 = 0.e0;
    real _t0C65 = 0.1e1;
    real _t0C66 = 0.e0;
    vec4 _t0C67 = [_t0C63, _t0C64, _t0C65, _t0C66];
    real _t0C68 = 0.e0;
    real _t0C69 = 0.e0;
    real _t0C6A = 0.e0;
    real _t0C6B = 0.1e1;
    vec4 _t0C6C = [_t0C68, _t0C69, _t0C6A, _t0C6B];
    tensor[4,4] _t0C6D = [_t0C5D, _t0C62, _t0C67, _t0C6C];
    real _t0C6E = 0.1e1;
    real _t0C6F = 0.e0;
    real _t0C70 = 0.e0;
    real _t0C71 = 0.e0;
    vec4 _t0C72 = [_t0C6E, _t0C6F, _t0C70, _t0C71];
    real _t0C73 = 0.e0;
    real _t0C74 = 0.1e1;
    real _t0C75 = 0.e0;
    real _t0C76 = 0.e0;
    vec4 _t0C77 = [_t0C73, _t0C74, _t0C75, _t0C76];
    real _t0C78 = 0.e0;
    real _t0C79 = 0.e0;
    real _t0C7A = 0.1e1;
    real _t0C7B = 0.e0;
    vec4 _t0C7C = [_t0C78, _t0C79, _t0C7A, _t0C7B];
    real _t0C7D = 0.e0;
    real _t0C7E = 0.e0;
    real _t0C7F = 0.e0;
    real _t0C80 = 0.1e1;
    vec4 _t0C81 = [_t0C7D, _t0C7E, _t0C7F, _t0C80];
    tensor[4,4] _t0C82 = [_t0C72, _t0C77, _t0C7C, _t0C81];
    real _t0C83 = 0.1e1;
    real _t0C84 = 0.e0;
    real _t0C85 = 0.e0;
    real _t0C86 = 0.e0;
    vec4 _t0C87 = [_t0C83, _t0C84, _t0C85, _t0C86];
    real _t0C88 = 0.e0;
    real _t0C89 = 0.e0;
    real _t0C8A = 0.1e1;
    real _t0C8B = 0.e0;
    vec4 _t0C8C = [_t0C88, _t0C89, _t0C8A, _t0C8B];
    real _t0C8D = 0.e0;
    real _t0C8E = -0.1e1;
    real _t0C8F = 0.e0;
    real _t0C90 = 0.e0;
    vec4 _t0C91 = [_t0C8D, _t0C8E, _t0C8F, _t0C90];
    real _t0C92 = 0.e0;
    real _t0C93 = 0.e0;
    real _t0C94 = 0.e0;
    real _t0C95 = 0.1e1;
    vec4 _t0C96 = [_t0C92, _t0C93, _t0C94, _t0C95];
    tensor[4,4] _t0C97 = [_t0C87, _t0C8C, _t0C91, _t0C96];
    tensor[4,4][4] _t0C98 = {_t0C58, _t0C6D, _t0C82, _t0C97};
    real _t0C99 = -0.1e1;
    real _t0C9A = -0.1e1;
    real _t0C9B = 0.57735026919e0;
    real _t0C9C = 0.1e1;
    vec4 _t0C9D = [_t0C99, _t0C9A, _t0C9B, _t0C9C];
    real _t0C9E = 0.1e1;
    real _t0C9F = 0.e0;
    real _t0CA0 = 0.57735026919e0;
    real _t0CA1 = 0.e0;
    vec4 _t0CA2 = [_t0C9E, _t0C9F, _t0CA0, _t0CA1];
    real _t0CA3 = 0.e0;
    real _t0CA4 = 0.1e1;
    real _t0CA5 = 0.57735026919e0;
    real _t0CA6 = 0.e0;
    vec4 _t0CA7 = [_t0CA3, _t0CA4, _t0CA5, _t0CA6];
    real _t0CA8 = 0.e0;
    real _t0CA9 = 0.e0;
    real _t0CAA = 0.e0;
    real _t0CAB = 0.1e1;
    vec4 _t0CAC = [_t0CA8, _t0CA9, _t0CAA, _t0CAB];
    tensor[4,4] _t0CAD = [_t0C9D, _t0CA2, _t0CA7, _t0CAC];
    real _t0CAE = 0.e0;
    real _t0CAF = 0.e0;
    real _t0CB0 = 0.1e1;
    real _t0CB1 = 0.e0;
    vec4 _t0CB2 = [_t0CAE, _t0CAF, _t0CB0, _t0CB1];
    real _t0CB3 = 0.1e1;
    real _t0CB4 = 0.e0;
    real _t0CB5 = 0.e0;
    real _t0CB6 = 0.e0;
    vec4 _t0CB7 = [_t0CB3, _t0CB4, _t0CB5, _t0CB6];
    real _t0CB8 = 0.e0;
    real _t0CB9 = 0.1e1;
    real _t0CBA = 0.e0;
    real _t0CBB = 0.e0;
    vec4 _t0CBC = [_t0CB8, _t0CB9, _t0CBA, _t0CBB];
    real _t0CBD = 0.e0;
    real _t0CBE = 0.e0;
    real _t0CBF = 0.e0;
    real _t0CC0 = 0.1e1;
    vec4 _t0CC1 = [_t0CBD, _t0CBE, _t0CBF, _t0CC0];
    tensor[4,4] _t0CC2 = [_t0CB2, _t0CB7, _t0CBC, _t0CC1];
    real _t0CC3 = 0.1e1;
    real _t0CC4 = 0.e0;
    real _t0CC5 = 0.e0;
    real _t0CC6 = 0.e0;
    vec4 _t0CC7 = [_t0CC3, _t0CC4, _t0CC5, _t0CC6];
    real _t0CC8 = 0.e0;
    real _t0CC9 = 0.e0;
    real _t0CCA = -0.1e1;
    real _t0CCB = 0.e0;
    vec4 _t0CCC = [_t0CC8, _t0CC9, _t0CCA, _t0CCB];
    real _t0CCD = 0.e0;
    real _t0CCE = 0.1e1;
    real _t0CCF = 0.e0;
    real _t0CD0 = 0.e0;
    vec4 _t0CD1 = [_t0CCD, _t0CCE, _t0CCF, _t0CD0];
    real _t0CD2 = 0.e0;
    real _t0CD3 = 0.e0;
    real _t0CD4 = 0.e0;
    real _t0CD5 = 0.1e1;
    vec4 _t0CD6 = [_t0CD2, _t0CD3, _t0CD4, _t0CD5];
    tensor[4,4] _t0CD7 = [_t0CC7, _t0CCC, _t0CD1, _t0CD6];
    real _t0CD8 = 0.1e1;
    real _t0CD9 = 0.e0;
    real _t0CDA = 0.e0;
    real _t0CDB = 0.e0;
    vec4 _t0CDC = [_t0CD8, _t0CD9, _t0CDA, _t0CDB];
    real _t0CDD = 0.e0;
    real _t0CDE = 0.1e1;
    real _t0CDF = 0.e0;
    real _t0CE0 = 0.e0;
    vec4 _t0CE1 = [_t0CDD, _t0CDE, _t0CDF, _t0CE0];
    real _t0CE2 = 0.e0;
    real _t0CE3 = 0.e0;
    real _t0CE4 = 0.1e1;
    real _t0CE5 = 0.e0;
    vec4 _t0CE6 = [_t0CE2, _t0CE3, _t0CE4, _t0CE5];
    real _t0CE7 = 0.e0;
    real _t0CE8 = 0.e0;
    real _t0CE9 = 0.e0;
    real _t0CEA = 0.1e1;
    vec4 _t0CEB = [_t0CE7, _t0CE8, _t0CE9, _t0CEA];
    tensor[4,4] _t0CEC = [_t0CDC, _t0CE1, _t0CE6, _t0CEB];
    tensor[4,4][4] _t0CED = {_t0CAD, _t0CC2, _t0CD7, _t0CEC};
    tensor[4,4][4][4] _t0CEE = {_t0BEE, _t0C43, _t0C98, _t0CED};
    real _t0CEF = time08B0[1];
    int _t0CF0 = prim $r2i01B7 (_t0CEF);
    tensor[4,4][4] _t0CF1 = prim $sub01C0<tensor[4,4][4]; %4> (_t0CEE, _t0CF0);
    real _t0CF2 = time08B0[1];
    int _t0CF3 = prim $r2i01B7 (_t0CF2);
    int[2] _t0CF4 = func nextCell408B4 (_t0CF3, cellId08AD, mesh08AC);
    int _t0CF5 = 1;
    int _t0CF6 = prim $sub01C0<int; %2> (_t0CF4, _t0CF5);
    tensor[4,4] _t0CF7 = prim $sub01C0<tensor[4,4]; %4> (_t0CF1, _t0CF6);
    real _t0CF8 = time08B0[0];
    vec3 _t0CF9 = prim *0036<$[3]> (_t0CF8, dPos08AF);
    vec3 _t0CFA = prim +0017<$[3]> (_t0CF9, refPos08AE);
    real _t0CFB = _t0CFA[0];
    real _t0CFC = time08B0[0];
    vec3 _t0CFD = prim *0036<$[3]> (_t0CFC, dPos08AF);
    vec3 _t0CFE = prim +0017<$[3]> (_t0CFD, refPos08AE);
    real _t0CFF = _t0CFE[1];
    real _t0D00 = time08B0[0];
    vec3 _t0D01 = prim *0036<$[3]> (_t0D00, dPos08AF);
    vec3 _t0D02 = prim +0017<$[3]> (_t0D01, refPos08AE);
    real _t0D03 = _t0D02[2];
    real _t0D04 = 0.1e1;
    vec4 _t0D05 = [_t0CFB, _t0CFF, _t0D03, _t0D04];
    vec4 _t0D06 = prim •00CE<$[4,4]; $[4]; $[4]> (_t0CF7, _t0D05);
    real _t0D07 = _t0D06[2];
    vec3 _t0D08 = [_t0A2B, _t0B99, _t0D07];
    real _t0D09 = time08B0[1];
    int _t0D0A = prim $r2i01B7 (_t0D09);
    int[2] _t0D0B = func nextCell408B4 (_t0D0A, cellId08AD, mesh08AC);
    int _t0D0C = 1;
    int _t0D0D = prim $sub01C0<int; %2> (_t0D0B, _t0D0C);
    Femdata: MeshPos _t0D0E = extractFemItemN((mesh08AC, _t08BD, _t0D08, _t0D0D),RefBuild(Mesh),);
    return _t0D0E;
  } else {
    real _t0D0F = time08B0[0];
    vec3 _t0D10 = prim *0036<$[3]> (_t0D0F, dPos08AF);
    vec3 _t0D11 = prim +0017<$[3]> (_t0D10, refPos08AE);
    Femdata: MeshPos _t0D12 = extractFemItemN((mesh08AC, _t0D11),InvalidBuildBoundary(MeshPos),);
    return _t0D12;
  }
}
function int[2]#6 nextCell408B4 (int faceIdx0D13, int cell0D14, Femdata: Mesh mesh0D15)
{
  int _t0D16 = -1;
  bool _t0D17 = prim ==0082 (faceIdx0D13, _t0D16);
  if _t0D17 {
    int _t0D18 = -1;
    int _t0D19 = -1;
    int[2] _t0D1A = {_t0D18, _t0D19};
    return _t0D1A;
  } else {
    int _t0D1B = 8;
    int _t0D1C = prim *0033 (cell0D14, _t0D1B);
    int _t0D1D = 2;
    int _t0D1E = prim *0033 (faceIdx0D13, _t0D1D);
    int _t0D1F = prim +0015 (_t0D1C, _t0D1E);
    int[2] _t0D20 = extractFemItemN((mesh0D15, _t0D1F),CellFaceCell(Mesh),);
    return _t0D20;
  }
}
function vec2#0 _enter0D21 (vec3 refPos0D22, vec3 dPos0D23)
{
  real time0D24 = +inf;
  int face0D25 = -1;
  real faceTime0D26 = -inf;
  real _t0D27 = 0.57735026919e0;
  real _t0D28 = 0.57735026919e0;
  real _t0D29 = 0.57735026919e0;
  real _t0D2A = 0.57735026919e0;
  vec3 _t0D2B = [_t0D28, _t0D29, _t0D2A];
  real _t0D2C = prim •00CE<$[3]; $[3]; $[]> (_t0D2B, refPos0D22);
  real _t0D2D = prim -0026<$[]> (_t0D27, _t0D2C);
  real _t0D2E = 0.57735026919e0;
  real _t0D2F = 0.57735026919e0;
  real _t0D30 = 0.57735026919e0;
  vec3 _t0D31 = [_t0D2E, _t0D2F, _t0D30];
  real _t0D32 = prim •00CE<$[3]; $[3]; $[]> (_t0D31, dPos0D23);
  real _t0D33 = prim /0055 (_t0D2D, _t0D32);
  real _t0D34 = -0.1e-7;
  bool _t0D35 = prim >=007E (_t0D33, _t0D34);
  real _t0D36 = 0.57735026919e0;
  real _t0D37 = 0.57735026919e0;
  real _t0D38 = 0.57735026919e0;
  real _t0D39 = 0.57735026919e0;
  vec3 _t0D3A = [_t0D37, _t0D38, _t0D39];
  real _t0D3B = prim •00CE<$[3]; $[3]; $[]> (_t0D3A, refPos0D22);
  real _t0D3C = prim -0026<$[]> (_t0D36, _t0D3B);
  real _t0D3D = 0.57735026919e0;
  real _t0D3E = 0.57735026919e0;
  real _t0D3F = 0.57735026919e0;
  vec3 _t0D40 = [_t0D3D, _t0D3E, _t0D3F];
  real _t0D41 = prim •00CE<$[3]; $[3]; $[]> (_t0D40, dPos0D23);
  real _t0D42 = prim /0055 (_t0D3C, _t0D41);
  bool _t0D43 = prim >0080 (time0D24, _t0D42);
  real _t0D44 = 0.57735026919e0;
  real _t0D45 = 0.57735026919e0;
  real _t0D46 = 0.57735026919e0;
  vec3 _t0D47 = [_t0D44, _t0D45, _t0D46];
  real _t0D48 = prim •00CE<$[3]; $[3]; $[]> (_t0D47, dPos0D23);
  real _t0D49 = prim |()|00B5<$[]> (_t0D48);
  real _t0D4A = 0.1e-7;
  bool _t0D4B = prim >=007E (_t0D49, _t0D4A);
  bool _t0D4C = prim $and01C4 (_t0D43, _t0D4B);
  bool _t0D4D = prim $and01C4 (_t0D35, _t0D4C);
  if _t0D4D {
    real _t0D4E = 0.1e1;
    real _t0D4F = 0.1e-7;
    real _t0D50 = prim +0017<$[]> (_t0D4E, _t0D4F);
    real _t0D51 = 0.1e1;
    real _t0D52 = 0.1e1;
    real _t0D53 = 0.1e1;
    vec3 _t0D54 = [_t0D51, _t0D52, _t0D53];
    real _t0D55 = 0.57735026919e0;
    real _t0D56 = 0.57735026919e0;
    real _t0D57 = 0.57735026919e0;
    real _t0D58 = 0.57735026919e0;
    vec3 _t0D59 = [_t0D56, _t0D57, _t0D58];
    real _t0D5A = prim •00CE<$[3]; $[3]; $[]> (_t0D59, refPos0D22);
    real _t0D5B = prim -0026<$[]> (_t0D55, _t0D5A);
    real _t0D5C = 0.57735026919e0;
    real _t0D5D = 0.57735026919e0;
    real _t0D5E = 0.57735026919e0;
    vec3 _t0D5F = [_t0D5C, _t0D5D, _t0D5E];
    real _t0D60 = prim •00CE<$[3]; $[3]; $[]> (_t0D5F, dPos0D23);
    real _t0D61 = prim /0055 (_t0D5B, _t0D60);
    vec3 _t0D62 = prim *0038<$[3]> (dPos0D23, _t0D61);
    vec3 _t0D63 = prim +0017<$[3]> (refPos0D22, _t0D62);
    real _t0D64 = prim •00CE<$[3]; $[3]; $[]> (_t0D54, _t0D63);
    bool _t0D65 = prim >0080 (_t0D50, _t0D64);
    real _t0D66 = 0.1e-7;
    real _t0D67 = 0.1e-7;
    real _t0D68 = 0.1e-7;
    vec3 _t0D69 = [_t0D66, _t0D67, _t0D68];
    real _t0D6A = 0.57735026919e0;
    real _t0D6B = 0.57735026919e0;
    real _t0D6C = 0.57735026919e0;
    real _t0D6D = 0.57735026919e0;
    vec3 _t0D6E = [_t0D6B, _t0D6C, _t0D6D];
    real _t0D6F = prim •00CE<$[3]; $[3]; $[]> (_t0D6E, refPos0D22);
    real _t0D70 = prim -0026<$[]> (_t0D6A, _t0D6F);
    real _t0D71 = 0.57735026919e0;
    real _t0D72 = 0.57735026919e0;
    real _t0D73 = 0.57735026919e0;
    vec3 _t0D74 = [_t0D71, _t0D72, _t0D73];
    real _t0D75 = prim •00CE<$[3]; $[3]; $[]> (_t0D74, dPos0D23);
    real _t0D76 = prim /0055 (_t0D70, _t0D75);
    vec3 _t0D77 = prim *0038<$[3]> (dPos0D23, _t0D76);
    vec3 _t0D78 = prim +0017<$[3]> (refPos0D22, _t0D77);
    vec3 _t0D79 = prim +0017<$[3]> (_t0D69, _t0D78);
    real _t0D7A = _t0D79[0];
    real _t0D7B = -0.e0;
    bool _t0D7C = prim >0080 (_t0D7A, _t0D7B);
    real _t0D7D = 0.1e-7;
    real _t0D7E = 0.1e-7;
    real _t0D7F = 0.1e-7;
    vec3 _t0D80 = [_t0D7D, _t0D7E, _t0D7F];
    real _t0D81 = 0.57735026919e0;
    real _t0D82 = 0.57735026919e0;
    real _t0D83 = 0.57735026919e0;
    real _t0D84 = 0.57735026919e0;
    vec3 _t0D85 = [_t0D82, _t0D83, _t0D84];
    real _t0D86 = prim •00CE<$[3]; $[3]; $[]> (_t0D85, refPos0D22);
    real _t0D87 = prim -0026<$[]> (_t0D81, _t0D86);
    real _t0D88 = 0.57735026919e0;
    real _t0D89 = 0.57735026919e0;
    real _t0D8A = 0.57735026919e0;
    vec3 _t0D8B = [_t0D88, _t0D89, _t0D8A];
    real _t0D8C = prim •00CE<$[3]; $[3]; $[]> (_t0D8B, dPos0D23);
    real _t0D8D = prim /0055 (_t0D87, _t0D8C);
    vec3 _t0D8E = prim *0038<$[3]> (dPos0D23, _t0D8D);
    vec3 _t0D8F = prim +0017<$[3]> (refPos0D22, _t0D8E);
    vec3 _t0D90 = prim +0017<$[3]> (_t0D80, _t0D8F);
    real _t0D91 = _t0D90[1];
    real _t0D92 = -0.e0;
    bool _t0D93 = prim >0080 (_t0D91, _t0D92);
    real _t0D94 = 0.1e-7;
    real _t0D95 = 0.1e-7;
    real _t0D96 = 0.1e-7;
    vec3 _t0D97 = [_t0D94, _t0D95, _t0D96];
    real _t0D98 = 0.57735026919e0;
    real _t0D99 = 0.57735026919e0;
    real _t0D9A = 0.57735026919e0;
    real _t0D9B = 0.57735026919e0;
    vec3 _t0D9C = [_t0D99, _t0D9A, _t0D9B];
    real _t0D9D = prim •00CE<$[3]; $[3]; $[]> (_t0D9C, refPos0D22);
    real _t0D9E = prim -0026<$[]> (_t0D98, _t0D9D);
    real _t0D9F = 0.57735026919e0;
    real _t0DA0 = 0.57735026919e0;
    real _t0DA1 = 0.57735026919e0;
    vec3 _t0DA2 = [_t0D9F, _t0DA0, _t0DA1];
    real _t0DA3 = prim •00CE<$[3]; $[3]; $[]> (_t0DA2, dPos0D23);
    real _t0DA4 = prim /0055 (_t0D9E, _t0DA3);
    vec3 _t0DA5 = prim *0038<$[3]> (dPos0D23, _t0DA4);
    vec3 _t0DA6 = prim +0017<$[3]> (refPos0D22, _t0DA5);
    vec3 _t0DA7 = prim +0017<$[3]> (_t0D97, _t0DA6);
    real _t0DA8 = _t0DA7[2];
    real _t0DA9 = -0.e0;
    bool _t0DAA = prim >0080 (_t0DA8, _t0DA9);
    bool _t0DAB = prim $and01C4 (_t0D93, _t0DAA);
    bool _t0DAC = prim $and01C4 (_t0D7C, _t0DAB);
    bool _t0DAD = prim $and01C4 (_t0D65, _t0DAC);
    if _t0DAD {
      real _t0DAE = 0.57735026919e0;
      real _t0DAF = 0.57735026919e0;
      real _t0DB0 = 0.57735026919e0;
      real _t0DB1 = 0.57735026919e0;
      vec3 _t0DB2 = [_t0DAF, _t0DB0, _t0DB1];
      real _t0DB3 = prim •00CE<$[3]; $[3]; $[]> (_t0DB2, refPos0D22);
      real _t0DB4 = prim -0026<$[]> (_t0DAE, _t0DB3);
      real _t0DB5 = 0.57735026919e0;
      real _t0DB6 = 0.57735026919e0;
      real _t0DB7 = 0.57735026919e0;
      vec3 _t0DB8 = [_t0DB5, _t0DB6, _t0DB7];
      real _t0DB9 = prim •00CE<$[3]; $[3]; $[]> (_t0DB8, dPos0D23);
      time0D24 = prim /0055 (_t0DB4, _t0DB9);
      face0D25 = 0;
    }
  }
  real _t0DBA = 0.e0;
  real _t0DBB = -0.1e1;
  real _t0DBC = 0.e0;
  real _t0DBD = 0.e0;
  vec3 _t0DBE = [_t0DBB, _t0DBC, _t0DBD];
  real _t0DBF = prim •00CE<$[3]; $[3]; $[]> (_t0DBE, refPos0D22);
  real _t0DC0 = prim -0026<$[]> (_t0DBA, _t0DBF);
  real _t0DC1 = -0.1e1;
  real _t0DC2 = 0.e0;
  real _t0DC3 = 0.e0;
  vec3 _t0DC4 = [_t0DC1, _t0DC2, _t0DC3];
  real _t0DC5 = prim •00CE<$[3]; $[3]; $[]> (_t0DC4, dPos0D23);
  real _t0DC6 = prim /0055 (_t0DC0, _t0DC5);
  real _t0DC7 = -0.1e-7;
  bool _t0DC8 = prim >=007E (_t0DC6, _t0DC7);
  real _t0DC9 = 0.e0;
  real _t0DCA = -0.1e1;
  real _t0DCB = 0.e0;
  real _t0DCC = 0.e0;
  vec3 _t0DCD = [_t0DCA, _t0DCB, _t0DCC];
  real _t0DCE = prim •00CE<$[3]; $[3]; $[]> (_t0DCD, refPos0D22);
  real _t0DCF = prim -0026<$[]> (_t0DC9, _t0DCE);
  real _t0DD0 = -0.1e1;
  real _t0DD1 = 0.e0;
  real _t0DD2 = 0.e0;
  vec3 _t0DD3 = [_t0DD0, _t0DD1, _t0DD2];
  real _t0DD4 = prim •00CE<$[3]; $[3]; $[]> (_t0DD3, dPos0D23);
  real _t0DD5 = prim /0055 (_t0DCF, _t0DD4);
  bool _t0DD6 = prim >0080 (time0D24, _t0DD5);
  real _t0DD7 = -0.1e1;
  real _t0DD8 = 0.e0;
  real _t0DD9 = 0.e0;
  vec3 _t0DDA = [_t0DD7, _t0DD8, _t0DD9];
  real _t0DDB = prim •00CE<$[3]; $[3]; $[]> (_t0DDA, dPos0D23);
  real _t0DDC = prim |()|00B5<$[]> (_t0DDB);
  real _t0DDD = 0.1e-7;
  bool _t0DDE = prim >=007E (_t0DDC, _t0DDD);
  bool _t0DDF = prim $and01C4 (_t0DD6, _t0DDE);
  bool _t0DE0 = prim $and01C4 (_t0DC8, _t0DDF);
  if _t0DE0 {
    real _t0DE1 = 0.1e1;
    real _t0DE2 = 0.1e-7;
    real _t0DE3 = prim +0017<$[]> (_t0DE1, _t0DE2);
    real _t0DE4 = 0.1e1;
    real _t0DE5 = 0.1e1;
    real _t0DE6 = 0.1e1;
    vec3 _t0DE7 = [_t0DE4, _t0DE5, _t0DE6];
    real _t0DE8 = 0.e0;
    real _t0DE9 = -0.1e1;
    real _t0DEA = 0.e0;
    real _t0DEB = 0.e0;
    vec3 _t0DEC = [_t0DE9, _t0DEA, _t0DEB];
    real _t0DED = prim •00CE<$[3]; $[3]; $[]> (_t0DEC, refPos0D22);
    real _t0DEE = prim -0026<$[]> (_t0DE8, _t0DED);
    real _t0DEF = -0.1e1;
    real _t0DF0 = 0.e0;
    real _t0DF1 = 0.e0;
    vec3 _t0DF2 = [_t0DEF, _t0DF0, _t0DF1];
    real _t0DF3 = prim •00CE<$[3]; $[3]; $[]> (_t0DF2, dPos0D23);
    real _t0DF4 = prim /0055 (_t0DEE, _t0DF3);
    vec3 _t0DF5 = prim *0038<$[3]> (dPos0D23, _t0DF4);
    vec3 _t0DF6 = prim +0017<$[3]> (refPos0D22, _t0DF5);
    real _t0DF7 = prim •00CE<$[3]; $[3]; $[]> (_t0DE7, _t0DF6);
    bool _t0DF8 = prim >0080 (_t0DE3, _t0DF7);
    real _t0DF9 = 0.1e-7;
    real _t0DFA = 0.1e-7;
    real _t0DFB = 0.1e-7;
    vec3 _t0DFC = [_t0DF9, _t0DFA, _t0DFB];
    real _t0DFD = 0.e0;
    real _t0DFE = -0.1e1;
    real _t0DFF = 0.e0;
    real _t0E00 = 0.e0;
    vec3 _t0E01 = [_t0DFE, _t0DFF, _t0E00];
    real _t0E02 = prim •00CE<$[3]; $[3]; $[]> (_t0E01, refPos0D22);
    real _t0E03 = prim -0026<$[]> (_t0DFD, _t0E02);
    real _t0E04 = -0.1e1;
    real _t0E05 = 0.e0;
    real _t0E06 = 0.e0;
    vec3 _t0E07 = [_t0E04, _t0E05, _t0E06];
    real _t0E08 = prim •00CE<$[3]; $[3]; $[]> (_t0E07, dPos0D23);
    real _t0E09 = prim /0055 (_t0E03, _t0E08);
    vec3 _t0E0A = prim *0038<$[3]> (dPos0D23, _t0E09);
    vec3 _t0E0B = prim +0017<$[3]> (refPos0D22, _t0E0A);
    vec3 _t0E0C = prim +0017<$[3]> (_t0DFC, _t0E0B);
    real _t0E0D = _t0E0C[0];
    real _t0E0E = -0.e0;
    bool _t0E0F = prim >0080 (_t0E0D, _t0E0E);
    real _t0E10 = 0.1e-7;
    real _t0E11 = 0.1e-7;
    real _t0E12 = 0.1e-7;
    vec3 _t0E13 = [_t0E10, _t0E11, _t0E12];
    real _t0E14 = 0.e0;
    real _t0E15 = -0.1e1;
    real _t0E16 = 0.e0;
    real _t0E17 = 0.e0;
    vec3 _t0E18 = [_t0E15, _t0E16, _t0E17];
    real _t0E19 = prim •00CE<$[3]; $[3]; $[]> (_t0E18, refPos0D22);
    real _t0E1A = prim -0026<$[]> (_t0E14, _t0E19);
    real _t0E1B = -0.1e1;
    real _t0E1C = 0.e0;
    real _t0E1D = 0.e0;
    vec3 _t0E1E = [_t0E1B, _t0E1C, _t0E1D];
    real _t0E1F = prim •00CE<$[3]; $[3]; $[]> (_t0E1E, dPos0D23);
    real _t0E20 = prim /0055 (_t0E1A, _t0E1F);
    vec3 _t0E21 = prim *0038<$[3]> (dPos0D23, _t0E20);
    vec3 _t0E22 = prim +0017<$[3]> (refPos0D22, _t0E21);
    vec3 _t0E23 = prim +0017<$[3]> (_t0E13, _t0E22);
    real _t0E24 = _t0E23[1];
    real _t0E25 = -0.e0;
    bool _t0E26 = prim >0080 (_t0E24, _t0E25);
    real _t0E27 = 0.1e-7;
    real _t0E28 = 0.1e-7;
    real _t0E29 = 0.1e-7;
    vec3 _t0E2A = [_t0E27, _t0E28, _t0E29];
    real _t0E2B = 0.e0;
    real _t0E2C = -0.1e1;
    real _t0E2D = 0.e0;
    real _t0E2E = 0.e0;
    vec3 _t0E2F = [_t0E2C, _t0E2D, _t0E2E];
    real _t0E30 = prim •00CE<$[3]; $[3]; $[]> (_t0E2F, refPos0D22);
    real _t0E31 = prim -0026<$[]> (_t0E2B, _t0E30);
    real _t0E32 = -0.1e1;
    real _t0E33 = 0.e0;
    real _t0E34 = 0.e0;
    vec3 _t0E35 = [_t0E32, _t0E33, _t0E34];
    real _t0E36 = prim •00CE<$[3]; $[3]; $[]> (_t0E35, dPos0D23);
    real _t0E37 = prim /0055 (_t0E31, _t0E36);
    vec3 _t0E38 = prim *0038<$[3]> (dPos0D23, _t0E37);
    vec3 _t0E39 = prim +0017<$[3]> (refPos0D22, _t0E38);
    vec3 _t0E3A = prim +0017<$[3]> (_t0E2A, _t0E39);
    real _t0E3B = _t0E3A[2];
    real _t0E3C = -0.e0;
    bool _t0E3D = prim >0080 (_t0E3B, _t0E3C);
    bool _t0E3E = prim $and01C4 (_t0E26, _t0E3D);
    bool _t0E3F = prim $and01C4 (_t0E0F, _t0E3E);
    bool _t0E40 = prim $and01C4 (_t0DF8, _t0E3F);
    if _t0E40 {
      real _t0E41 = 0.e0;
      real _t0E42 = -0.1e1;
      real _t0E43 = 0.e0;
      real _t0E44 = 0.e0;
      vec3 _t0E45 = [_t0E42, _t0E43, _t0E44];
      real _t0E46 = prim •00CE<$[3]; $[3]; $[]> (_t0E45, refPos0D22);
      real _t0E47 = prim -0026<$[]> (_t0E41, _t0E46);
      real _t0E48 = -0.1e1;
      real _t0E49 = 0.e0;
      real _t0E4A = 0.e0;
      vec3 _t0E4B = [_t0E48, _t0E49, _t0E4A];
      real _t0E4C = prim •00CE<$[3]; $[3]; $[]> (_t0E4B, dPos0D23);
      time0D24 = prim /0055 (_t0E47, _t0E4C);
      face0D25 = 1;
    }
  }
  real _t0E4D = 0.e0;
  real _t0E4E = 0.e0;
  real _t0E4F = -0.1e1;
  real _t0E50 = 0.e0;
  vec3 _t0E51 = [_t0E4E, _t0E4F, _t0E50];
  real _t0E52 = prim •00CE<$[3]; $[3]; $[]> (_t0E51, refPos0D22);
  real _t0E53 = prim -0026<$[]> (_t0E4D, _t0E52);
  real _t0E54 = 0.e0;
  real _t0E55 = -0.1e1;
  real _t0E56 = 0.e0;
  vec3 _t0E57 = [_t0E54, _t0E55, _t0E56];
  real _t0E58 = prim •00CE<$[3]; $[3]; $[]> (_t0E57, dPos0D23);
  real _t0E59 = prim /0055 (_t0E53, _t0E58);
  real _t0E5A = -0.1e-7;
  bool _t0E5B = prim >=007E (_t0E59, _t0E5A);
  real _t0E5C = 0.e0;
  real _t0E5D = 0.e0;
  real _t0E5E = -0.1e1;
  real _t0E5F = 0.e0;
  vec3 _t0E60 = [_t0E5D, _t0E5E, _t0E5F];
  real _t0E61 = prim •00CE<$[3]; $[3]; $[]> (_t0E60, refPos0D22);
  real _t0E62 = prim -0026<$[]> (_t0E5C, _t0E61);
  real _t0E63 = 0.e0;
  real _t0E64 = -0.1e1;
  real _t0E65 = 0.e0;
  vec3 _t0E66 = [_t0E63, _t0E64, _t0E65];
  real _t0E67 = prim •00CE<$[3]; $[3]; $[]> (_t0E66, dPos0D23);
  real _t0E68 = prim /0055 (_t0E62, _t0E67);
  bool _t0E69 = prim >0080 (time0D24, _t0E68);
  real _t0E6A = 0.e0;
  real _t0E6B = -0.1e1;
  real _t0E6C = 0.e0;
  vec3 _t0E6D = [_t0E6A, _t0E6B, _t0E6C];
  real _t0E6E = prim •00CE<$[3]; $[3]; $[]> (_t0E6D, dPos0D23);
  real _t0E6F = prim |()|00B5<$[]> (_t0E6E);
  real _t0E70 = 0.1e-7;
  bool _t0E71 = prim >=007E (_t0E6F, _t0E70);
  bool _t0E72 = prim $and01C4 (_t0E69, _t0E71);
  bool _t0E73 = prim $and01C4 (_t0E5B, _t0E72);
  if _t0E73 {
    real _t0E74 = 0.1e1;
    real _t0E75 = 0.1e-7;
    real _t0E76 = prim +0017<$[]> (_t0E74, _t0E75);
    real _t0E77 = 0.1e1;
    real _t0E78 = 0.1e1;
    real _t0E79 = 0.1e1;
    vec3 _t0E7A = [_t0E77, _t0E78, _t0E79];
    real _t0E7B = 0.e0;
    real _t0E7C = 0.e0;
    real _t0E7D = -0.1e1;
    real _t0E7E = 0.e0;
    vec3 _t0E7F = [_t0E7C, _t0E7D, _t0E7E];
    real _t0E80 = prim •00CE<$[3]; $[3]; $[]> (_t0E7F, refPos0D22);
    real _t0E81 = prim -0026<$[]> (_t0E7B, _t0E80);
    real _t0E82 = 0.e0;
    real _t0E83 = -0.1e1;
    real _t0E84 = 0.e0;
    vec3 _t0E85 = [_t0E82, _t0E83, _t0E84];
    real _t0E86 = prim •00CE<$[3]; $[3]; $[]> (_t0E85, dPos0D23);
    real _t0E87 = prim /0055 (_t0E81, _t0E86);
    vec3 _t0E88 = prim *0038<$[3]> (dPos0D23, _t0E87);
    vec3 _t0E89 = prim +0017<$[3]> (refPos0D22, _t0E88);
    real _t0E8A = prim •00CE<$[3]; $[3]; $[]> (_t0E7A, _t0E89);
    bool _t0E8B = prim >0080 (_t0E76, _t0E8A);
    real _t0E8C = 0.1e-7;
    real _t0E8D = 0.1e-7;
    real _t0E8E = 0.1e-7;
    vec3 _t0E8F = [_t0E8C, _t0E8D, _t0E8E];
    real _t0E90 = 0.e0;
    real _t0E91 = 0.e0;
    real _t0E92 = -0.1e1;
    real _t0E93 = 0.e0;
    vec3 _t0E94 = [_t0E91, _t0E92, _t0E93];
    real _t0E95 = prim •00CE<$[3]; $[3]; $[]> (_t0E94, refPos0D22);
    real _t0E96 = prim -0026<$[]> (_t0E90, _t0E95);
    real _t0E97 = 0.e0;
    real _t0E98 = -0.1e1;
    real _t0E99 = 0.e0;
    vec3 _t0E9A = [_t0E97, _t0E98, _t0E99];
    real _t0E9B = prim •00CE<$[3]; $[3]; $[]> (_t0E9A, dPos0D23);
    real _t0E9C = prim /0055 (_t0E96, _t0E9B);
    vec3 _t0E9D = prim *0038<$[3]> (dPos0D23, _t0E9C);
    vec3 _t0E9E = prim +0017<$[3]> (refPos0D22, _t0E9D);
    vec3 _t0E9F = prim +0017<$[3]> (_t0E8F, _t0E9E);
    real _t0EA0 = _t0E9F[0];
    real _t0EA1 = -0.e0;
    bool _t0EA2 = prim >0080 (_t0EA0, _t0EA1);
    real _t0EA3 = 0.1e-7;
    real _t0EA4 = 0.1e-7;
    real _t0EA5 = 0.1e-7;
    vec3 _t0EA6 = [_t0EA3, _t0EA4, _t0EA5];
    real _t0EA7 = 0.e0;
    real _t0EA8 = 0.e0;
    real _t0EA9 = -0.1e1;
    real _t0EAA = 0.e0;
    vec3 _t0EAB = [_t0EA8, _t0EA9, _t0EAA];
    real _t0EAC = prim •00CE<$[3]; $[3]; $[]> (_t0EAB, refPos0D22);
    real _t0EAD = prim -0026<$[]> (_t0EA7, _t0EAC);
    real _t0EAE = 0.e0;
    real _t0EAF = -0.1e1;
    real _t0EB0 = 0.e0;
    vec3 _t0EB1 = [_t0EAE, _t0EAF, _t0EB0];
    real _t0EB2 = prim •00CE<$[3]; $[3]; $[]> (_t0EB1, dPos0D23);
    real _t0EB3 = prim /0055 (_t0EAD, _t0EB2);
    vec3 _t0EB4 = prim *0038<$[3]> (dPos0D23, _t0EB3);
    vec3 _t0EB5 = prim +0017<$[3]> (refPos0D22, _t0EB4);
    vec3 _t0EB6 = prim +0017<$[3]> (_t0EA6, _t0EB5);
    real _t0EB7 = _t0EB6[1];
    real _t0EB8 = -0.e0;
    bool _t0EB9 = prim >0080 (_t0EB7, _t0EB8);
    real _t0EBA = 0.1e-7;
    real _t0EBB = 0.1e-7;
    real _t0EBC = 0.1e-7;
    vec3 _t0EBD = [_t0EBA, _t0EBB, _t0EBC];
    real _t0EBE = 0.e0;
    real _t0EBF = 0.e0;
    real _t0EC0 = -0.1e1;
    real _t0EC1 = 0.e0;
    vec3 _t0EC2 = [_t0EBF, _t0EC0, _t0EC1];
    real _t0EC3 = prim •00CE<$[3]; $[3]; $[]> (_t0EC2, refPos0D22);
    real _t0EC4 = prim -0026<$[]> (_t0EBE, _t0EC3);
    real _t0EC5 = 0.e0;
    real _t0EC6 = -0.1e1;
    real _t0EC7 = 0.e0;
    vec3 _t0EC8 = [_t0EC5, _t0EC6, _t0EC7];
    real _t0EC9 = prim •00CE<$[3]; $[3]; $[]> (_t0EC8, dPos0D23);
    real _t0ECA = prim /0055 (_t0EC4, _t0EC9);
    vec3 _t0ECB = prim *0038<$[3]> (dPos0D23, _t0ECA);
    vec3 _t0ECC = prim +0017<$[3]> (refPos0D22, _t0ECB);
    vec3 _t0ECD = prim +0017<$[3]> (_t0EBD, _t0ECC);
    real _t0ECE = _t0ECD[2];
    real _t0ECF = -0.e0;
    bool _t0ED0 = prim >0080 (_t0ECE, _t0ECF);
    bool _t0ED1 = prim $and01C4 (_t0EB9, _t0ED0);
    bool _t0ED2 = prim $and01C4 (_t0EA2, _t0ED1);
    bool _t0ED3 = prim $and01C4 (_t0E8B, _t0ED2);
    if _t0ED3 {
      real _t0ED4 = 0.e0;
      real _t0ED5 = 0.e0;
      real _t0ED6 = -0.1e1;
      real _t0ED7 = 0.e0;
      vec3 _t0ED8 = [_t0ED5, _t0ED6, _t0ED7];
      real _t0ED9 = prim •00CE<$[3]; $[3]; $[]> (_t0ED8, refPos0D22);
      real _t0EDA = prim -0026<$[]> (_t0ED4, _t0ED9);
      real _t0EDB = 0.e0;
      real _t0EDC = -0.1e1;
      real _t0EDD = 0.e0;
      vec3 _t0EDE = [_t0EDB, _t0EDC, _t0EDD];
      real _t0EDF = prim •00CE<$[3]; $[3]; $[]> (_t0EDE, dPos0D23);
      time0D24 = prim /0055 (_t0EDA, _t0EDF);
      face0D25 = 2;
    }
  }
  real _t0EE0 = 0.e0;
  real _t0EE1 = 0.e0;
  real _t0EE2 = 0.e0;
  real _t0EE3 = -0.1e1;
  vec3 _t0EE4 = [_t0EE1, _t0EE2, _t0EE3];
  real _t0EE5 = prim •00CE<$[3]; $[3]; $[]> (_t0EE4, refPos0D22);
  real _t0EE6 = prim -0026<$[]> (_t0EE0, _t0EE5);
  real _t0EE7 = 0.e0;
  real _t0EE8 = 0.e0;
  real _t0EE9 = -0.1e1;
  vec3 _t0EEA = [_t0EE7, _t0EE8, _t0EE9];
  real _t0EEB = prim •00CE<$[3]; $[3]; $[]> (_t0EEA, dPos0D23);
  real _t0EEC = prim /0055 (_t0EE6, _t0EEB);
  real _t0EED = -0.1e-7;
  bool _t0EEE = prim >=007E (_t0EEC, _t0EED);
  real _t0EEF = 0.e0;
  real _t0EF0 = 0.e0;
  real _t0EF1 = 0.e0;
  real _t0EF2 = -0.1e1;
  vec3 _t0EF3 = [_t0EF0, _t0EF1, _t0EF2];
  real _t0EF4 = prim •00CE<$[3]; $[3]; $[]> (_t0EF3, refPos0D22);
  real _t0EF5 = prim -0026<$[]> (_t0EEF, _t0EF4);
  real _t0EF6 = 0.e0;
  real _t0EF7 = 0.e0;
  real _t0EF8 = -0.1e1;
  vec3 _t0EF9 = [_t0EF6, _t0EF7, _t0EF8];
  real _t0EFA = prim •00CE<$[3]; $[3]; $[]> (_t0EF9, dPos0D23);
  real _t0EFB = prim /0055 (_t0EF5, _t0EFA);
  bool _t0EFC = prim >0080 (time0D24, _t0EFB);
  real _t0EFD = 0.e0;
  real _t0EFE = 0.e0;
  real _t0EFF = -0.1e1;
  vec3 _t0F00 = [_t0EFD, _t0EFE, _t0EFF];
  real _t0F01 = prim •00CE<$[3]; $[3]; $[]> (_t0F00, dPos0D23);
  real _t0F02 = prim |()|00B5<$[]> (_t0F01);
  real _t0F03 = 0.1e-7;
  bool _t0F04 = prim >=007E (_t0F02, _t0F03);
  bool _t0F05 = prim $and01C4 (_t0EFC, _t0F04);
  bool _t0F06 = prim $and01C4 (_t0EEE, _t0F05);
  if _t0F06 {
    real _t0F07 = 0.1e1;
    real _t0F08 = 0.1e-7;
    real _t0F09 = prim +0017<$[]> (_t0F07, _t0F08);
    real _t0F0A = 0.1e1;
    real _t0F0B = 0.1e1;
    real _t0F0C = 0.1e1;
    vec3 _t0F0D = [_t0F0A, _t0F0B, _t0F0C];
    real _t0F0E = 0.e0;
    real _t0F0F = 0.e0;
    real _t0F10 = 0.e0;
    real _t0F11 = -0.1e1;
    vec3 _t0F12 = [_t0F0F, _t0F10, _t0F11];
    real _t0F13 = prim •00CE<$[3]; $[3]; $[]> (_t0F12, refPos0D22);
    real _t0F14 = prim -0026<$[]> (_t0F0E, _t0F13);
    real _t0F15 = 0.e0;
    real _t0F16 = 0.e0;
    real _t0F17 = -0.1e1;
    vec3 _t0F18 = [_t0F15, _t0F16, _t0F17];
    real _t0F19 = prim •00CE<$[3]; $[3]; $[]> (_t0F18, dPos0D23);
    real _t0F1A = prim /0055 (_t0F14, _t0F19);
    vec3 _t0F1B = prim *0038<$[3]> (dPos0D23, _t0F1A);
    vec3 _t0F1C = prim +0017<$[3]> (refPos0D22, _t0F1B);
    real _t0F1D = prim •00CE<$[3]; $[3]; $[]> (_t0F0D, _t0F1C);
    bool _t0F1E = prim >0080 (_t0F09, _t0F1D);
    real _t0F1F = 0.1e-7;
    real _t0F20 = 0.1e-7;
    real _t0F21 = 0.1e-7;
    vec3 _t0F22 = [_t0F1F, _t0F20, _t0F21];
    real _t0F23 = 0.e0;
    real _t0F24 = 0.e0;
    real _t0F25 = 0.e0;
    real _t0F26 = -0.1e1;
    vec3 _t0F27 = [_t0F24, _t0F25, _t0F26];
    real _t0F28 = prim •00CE<$[3]; $[3]; $[]> (_t0F27, refPos0D22);
    real _t0F29 = prim -0026<$[]> (_t0F23, _t0F28);
    real _t0F2A = 0.e0;
    real _t0F2B = 0.e0;
    real _t0F2C = -0.1e1;
    vec3 _t0F2D = [_t0F2A, _t0F2B, _t0F2C];
    real _t0F2E = prim •00CE<$[3]; $[3]; $[]> (_t0F2D, dPos0D23);
    real _t0F2F = prim /0055 (_t0F29, _t0F2E);
    vec3 _t0F30 = prim *0038<$[3]> (dPos0D23, _t0F2F);
    vec3 _t0F31 = prim +0017<$[3]> (refPos0D22, _t0F30);
    vec3 _t0F32 = prim +0017<$[3]> (_t0F22, _t0F31);
    real _t0F33 = _t0F32[0];
    real _t0F34 = -0.e0;
    bool _t0F35 = prim >0080 (_t0F33, _t0F34);
    real _t0F36 = 0.1e-7;
    real _t0F37 = 0.1e-7;
    real _t0F38 = 0.1e-7;
    vec3 _t0F39 = [_t0F36, _t0F37, _t0F38];
    real _t0F3A = 0.e0;
    real _t0F3B = 0.e0;
    real _t0F3C = 0.e0;
    real _t0F3D = -0.1e1;
    vec3 _t0F3E = [_t0F3B, _t0F3C, _t0F3D];
    real _t0F3F = prim •00CE<$[3]; $[3]; $[]> (_t0F3E, refPos0D22);
    real _t0F40 = prim -0026<$[]> (_t0F3A, _t0F3F);
    real _t0F41 = 0.e0;
    real _t0F42 = 0.e0;
    real _t0F43 = -0.1e1;
    vec3 _t0F44 = [_t0F41, _t0F42, _t0F43];
    real _t0F45 = prim •00CE<$[3]; $[3]; $[]> (_t0F44, dPos0D23);
    real _t0F46 = prim /0055 (_t0F40, _t0F45);
    vec3 _t0F47 = prim *0038<$[3]> (dPos0D23, _t0F46);
    vec3 _t0F48 = prim +0017<$[3]> (refPos0D22, _t0F47);
    vec3 _t0F49 = prim +0017<$[3]> (_t0F39, _t0F48);
    real _t0F4A = _t0F49[1];
    real _t0F4B = -0.e0;
    bool _t0F4C = prim >0080 (_t0F4A, _t0F4B);
    real _t0F4D = 0.1e-7;
    real _t0F4E = 0.1e-7;
    real _t0F4F = 0.1e-7;
    vec3 _t0F50 = [_t0F4D, _t0F4E, _t0F4F];
    real _t0F51 = 0.e0;
    real _t0F52 = 0.e0;
    real _t0F53 = 0.e0;
    real _t0F54 = -0.1e1;
    vec3 _t0F55 = [_t0F52, _t0F53, _t0F54];
    real _t0F56 = prim •00CE<$[3]; $[3]; $[]> (_t0F55, refPos0D22);
    real _t0F57 = prim -0026<$[]> (_t0F51, _t0F56);
    real _t0F58 = 0.e0;
    real _t0F59 = 0.e0;
    real _t0F5A = -0.1e1;
    vec3 _t0F5B = [_t0F58, _t0F59, _t0F5A];
    real _t0F5C = prim •00CE<$[3]; $[3]; $[]> (_t0F5B, dPos0D23);
    real _t0F5D = prim /0055 (_t0F57, _t0F5C);
    vec3 _t0F5E = prim *0038<$[3]> (dPos0D23, _t0F5D);
    vec3 _t0F5F = prim +0017<$[3]> (refPos0D22, _t0F5E);
    vec3 _t0F60 = prim +0017<$[3]> (_t0F50, _t0F5F);
    real _t0F61 = _t0F60[2];
    real _t0F62 = -0.e0;
    bool _t0F63 = prim >0080 (_t0F61, _t0F62);
    bool _t0F64 = prim $and01C4 (_t0F4C, _t0F63);
    bool _t0F65 = prim $and01C4 (_t0F35, _t0F64);
    bool _t0F66 = prim $and01C4 (_t0F1E, _t0F65);
    if _t0F66 {
      real _t0F67 = 0.e0;
      real _t0F68 = 0.e0;
      real _t0F69 = 0.e0;
      real _t0F6A = -0.1e1;
      vec3 _t0F6B = [_t0F68, _t0F69, _t0F6A];
      real _t0F6C = prim •00CE<$[3]; $[3]; $[]> (_t0F6B, refPos0D22);
      real _t0F6D = prim -0026<$[]> (_t0F67, _t0F6C);
      real _t0F6E = 0.e0;
      real _t0F6F = 0.e0;
      real _t0F70 = -0.1e1;
      vec3 _t0F71 = [_t0F6E, _t0F6F, _t0F70];
      real _t0F72 = prim •00CE<$[3]; $[3]; $[]> (_t0F71, dPos0D23);
      time0D24 = prim /0055 (_t0F6D, _t0F72);
      face0D25 = 3;
    }
  }
  int _t0F73 = -1;
  bool _t0F74 = prim !=0086 (face0D25, _t0F73);
  real _t0F75 = 0.1e1;
  real _t0F76 = 0.1e-7;
  real _t0F77 = prim +0017<$[]> (_t0F75, _t0F76);
  real _t0F78 = 0.1e1;
  real _t0F79 = 0.1e1;
  real _t0F7A = 0.1e1;
  vec3 _t0F7B = [_t0F78, _t0F79, _t0F7A];
  real _t0F7C = 0.e0;
  real _t0F7D = prim max0125 (time0D24, _t0F7C);
  vec3 _t0F7E = prim *0038<$[3]> (dPos0D23, _t0F7D);
  vec3 _t0F7F = prim +0017<$[3]> (refPos0D22, _t0F7E);
  real _t0F80 = prim •00CE<$[3]; $[3]; $[]> (_t0F7B, _t0F7F);
  bool _t0F81 = prim >0080 (_t0F77, _t0F80);
  real _t0F82 = 0.1e-7;
  real _t0F83 = 0.1e-7;
  real _t0F84 = 0.1e-7;
  vec3 _t0F85 = [_t0F82, _t0F83, _t0F84];
  real _t0F86 = 0.e0;
  real _t0F87 = prim max0125 (time0D24, _t0F86);
  vec3 _t0F88 = prim *0038<$[3]> (dPos0D23, _t0F87);
  vec3 _t0F89 = prim +0017<$[3]> (refPos0D22, _t0F88);
  vec3 _t0F8A = prim +0017<$[3]> (_t0F85, _t0F89);
  real _t0F8B = _t0F8A[0];
  real _t0F8C = -0.e0;
  bool _t0F8D = prim >0080 (_t0F8B, _t0F8C);
  real _t0F8E = 0.1e-7;
  real _t0F8F = 0.1e-7;
  real _t0F90 = 0.1e-7;
  vec3 _t0F91 = [_t0F8E, _t0F8F, _t0F90];
  real _t0F92 = 0.e0;
  real _t0F93 = prim max0125 (time0D24, _t0F92);
  vec3 _t0F94 = prim *0038<$[3]> (dPos0D23, _t0F93);
  vec3 _t0F95 = prim +0017<$[3]> (refPos0D22, _t0F94);
  vec3 _t0F96 = prim +0017<$[3]> (_t0F91, _t0F95);
  real _t0F97 = _t0F96[1];
  real _t0F98 = -0.e0;
  bool _t0F99 = prim >0080 (_t0F97, _t0F98);
  real _t0F9A = 0.1e-7;
  real _t0F9B = 0.1e-7;
  real _t0F9C = 0.1e-7;
  vec3 _t0F9D = [_t0F9A, _t0F9B, _t0F9C];
  real _t0F9E = 0.e0;
  real _t0F9F = prim max0125 (time0D24, _t0F9E);
  vec3 _t0FA0 = prim *0038<$[3]> (dPos0D23, _t0F9F);
  vec3 _t0FA1 = prim +0017<$[3]> (refPos0D22, _t0FA0);
  vec3 _t0FA2 = prim +0017<$[3]> (_t0F9D, _t0FA1);
  real _t0FA3 = _t0FA2[2];
  real _t0FA4 = -0.e0;
  bool _t0FA5 = prim >0080 (_t0FA3, _t0FA4);
  bool _t0FA6 = prim $and01C4 (_t0F99, _t0FA5);
  bool _t0FA7 = prim $and01C4 (_t0F8D, _t0FA6);
  bool _t0FA8 = prim $and01C4 (_t0F81, _t0FA7);
  bool _t0FA9 = prim $and01C4 (_t0F74, _t0FA8);
  if _t0FA9 {
    real _t0FAA = 0.e0;
    real _t0FAB = prim max0125 (time0D24, _t0FAA);
    real _t0FAC = (real)face0D25;
    vec2 _t0FAD = [_t0FAB, _t0FAC];
    return _t0FAD;
  } else {
    real _t0FAE = -0.1e1;
    real _t0FAF = -0.1e1;
    vec2 _t0FB0 = [_t0FAE, _t0FAF];
    return _t0FB0;
  }
}
function vec2#0 _exit0FB1 (vec3 refPos0D22, vec3 dPos0D23, int i0FB2)
{
  real time0FB3 = +inf;
  int face0FB4 = -1;
  real faceTime0FB5 = -inf;
  real _t0FB6 = 0.57735026919e0;
  real _t0FB7 = 0.57735026919e0;
  real _t0FB8 = 0.57735026919e0;
  real _t0FB9 = 0.57735026919e0;
  vec3 _t0FBA = [_t0FB7, _t0FB8, _t0FB9];
  real _t0FBB = prim •00CE<$[3]; $[3]; $[]> (_t0FBA, refPos0D22);
  real _t0FBC = prim -0026<$[]> (_t0FB6, _t0FBB);
  real _t0FBD = 0.57735026919e0;
  real _t0FBE = 0.57735026919e0;
  real _t0FBF = 0.57735026919e0;
  vec3 _t0FC0 = [_t0FBD, _t0FBE, _t0FBF];
  real _t0FC1 = prim •00CE<$[3]; $[3]; $[]> (_t0FC0, dPos0D23);
  real _t0FC2 = prim /0055 (_t0FBC, _t0FC1);
  real _t0FC3 = -0.1e-7;
  bool _t0FC4 = prim >=007E (_t0FC2, _t0FC3);
  real _t0FC5 = 0.57735026919e0;
  real _t0FC6 = 0.57735026919e0;
  real _t0FC7 = 0.57735026919e0;
  real _t0FC8 = 0.57735026919e0;
  vec3 _t0FC9 = [_t0FC6, _t0FC7, _t0FC8];
  real _t0FCA = prim •00CE<$[3]; $[3]; $[]> (_t0FC9, refPos0D22);
  real _t0FCB = prim -0026<$[]> (_t0FC5, _t0FCA);
  real _t0FCC = 0.57735026919e0;
  real _t0FCD = 0.57735026919e0;
  real _t0FCE = 0.57735026919e0;
  vec3 _t0FCF = [_t0FCC, _t0FCD, _t0FCE];
  real _t0FD0 = prim •00CE<$[3]; $[3]; $[]> (_t0FCF, dPos0D23);
  real _t0FD1 = prim /0055 (_t0FCB, _t0FD0);
  bool _t0FD2 = prim >0080 (time0FB3, _t0FD1);
  real _t0FD3 = 0.57735026919e0;
  real _t0FD4 = 0.57735026919e0;
  real _t0FD5 = 0.57735026919e0;
  vec3 _t0FD6 = [_t0FD3, _t0FD4, _t0FD5];
  real _t0FD7 = prim •00CE<$[3]; $[3]; $[]> (_t0FD6, dPos0D23);
  real _t0FD8 = prim |()|00B5<$[]> (_t0FD7);
  real _t0FD9 = 0.1e-7;
  bool _t0FDA = prim >=007E (_t0FD8, _t0FD9);
  bool _t0FDB = prim $and01C4 (_t0FD2, _t0FDA);
  bool _t0FDC = prim $and01C4 (_t0FC4, _t0FDB);
  if _t0FDC {
    int _t0FDD = 0;
    bool _t0FDE = prim !=0086 (i0FB2, _t0FDD);
    if _t0FDE {
      real _t0FDF = 0.57735026919e0;
      real _t0FE0 = 0.57735026919e0;
      real _t0FE1 = 0.57735026919e0;
      real _t0FE2 = 0.57735026919e0;
      vec3 _t0FE3 = [_t0FE0, _t0FE1, _t0FE2];
      real _t0FE4 = prim •00CE<$[3]; $[3]; $[]> (_t0FE3, refPos0D22);
      real _t0FE5 = prim -0026<$[]> (_t0FDF, _t0FE4);
      real _t0FE6 = 0.57735026919e0;
      real _t0FE7 = 0.57735026919e0;
      real _t0FE8 = 0.57735026919e0;
      vec3 _t0FE9 = [_t0FE6, _t0FE7, _t0FE8];
      real _t0FEA = prim •00CE<$[3]; $[3]; $[]> (_t0FE9, dPos0D23);
      time0FB3 = prim /0055 (_t0FE5, _t0FEA);
      face0FB4 = 0;
    } else {
      real _t0FEB = 0.57735026919e0;
      real _t0FEC = 0.57735026919e0;
      real _t0FED = 0.57735026919e0;
      real _t0FEE = 0.57735026919e0;
      vec3 _t0FEF = [_t0FEC, _t0FED, _t0FEE];
      real _t0FF0 = prim •00CE<$[3]; $[3]; $[]> (_t0FEF, refPos0D22);
      real _t0FF1 = prim -0026<$[]> (_t0FEB, _t0FF0);
      real _t0FF2 = 0.57735026919e0;
      real _t0FF3 = 0.57735026919e0;
      real _t0FF4 = 0.57735026919e0;
      vec3 _t0FF5 = [_t0FF2, _t0FF3, _t0FF4];
      real _t0FF6 = prim •00CE<$[3]; $[3]; $[]> (_t0FF5, dPos0D23);
      faceTime0FB5 = prim /0055 (_t0FF1, _t0FF6);
    }
  }
  real _t0FF7 = 0.e0;
  real _t0FF8 = -0.1e1;
  real _t0FF9 = 0.e0;
  real _t0FFA = 0.e0;
  vec3 _t0FFB = [_t0FF8, _t0FF9, _t0FFA];
  real _t0FFC = prim •00CE<$[3]; $[3]; $[]> (_t0FFB, refPos0D22);
  real _t0FFD = prim -0026<$[]> (_t0FF7, _t0FFC);
  real _t0FFE = -0.1e1;
  real _t0FFF = 0.e0;
  real _t1000 = 0.e0;
  vec3 _t1001 = [_t0FFE, _t0FFF, _t1000];
  real _t1002 = prim •00CE<$[3]; $[3]; $[]> (_t1001, dPos0D23);
  real _t1003 = prim /0055 (_t0FFD, _t1002);
  real _t1004 = -0.1e-7;
  bool _t1005 = prim >=007E (_t1003, _t1004);
  real _t1006 = 0.e0;
  real _t1007 = -0.1e1;
  real _t1008 = 0.e0;
  real _t1009 = 0.e0;
  vec3 _t100A = [_t1007, _t1008, _t1009];
  real _t100B = prim •00CE<$[3]; $[3]; $[]> (_t100A, refPos0D22);
  real _t100C = prim -0026<$[]> (_t1006, _t100B);
  real _t100D = -0.1e1;
  real _t100E = 0.e0;
  real _t100F = 0.e0;
  vec3 _t1010 = [_t100D, _t100E, _t100F];
  real _t1011 = prim •00CE<$[3]; $[3]; $[]> (_t1010, dPos0D23);
  real _t1012 = prim /0055 (_t100C, _t1011);
  bool _t1013 = prim >0080 (time0FB3, _t1012);
  real _t1014 = -0.1e1;
  real _t1015 = 0.e0;
  real _t1016 = 0.e0;
  vec3 _t1017 = [_t1014, _t1015, _t1016];
  real _t1018 = prim •00CE<$[3]; $[3]; $[]> (_t1017, dPos0D23);
  real _t1019 = prim |()|00B5<$[]> (_t1018);
  real _t101A = 0.1e-7;
  bool _t101B = prim >=007E (_t1019, _t101A);
  bool _t101C = prim $and01C4 (_t1013, _t101B);
  bool _t101D = prim $and01C4 (_t1005, _t101C);
  if _t101D {
    int _t101E = 1;
    bool _t101F = prim !=0086 (i0FB2, _t101E);
    if _t101F {
      real _t1020 = 0.e0;
      real _t1021 = -0.1e1;
      real _t1022 = 0.e0;
      real _t1023 = 0.e0;
      vec3 _t1024 = [_t1021, _t1022, _t1023];
      real _t1025 = prim •00CE<$[3]; $[3]; $[]> (_t1024, refPos0D22);
      real _t1026 = prim -0026<$[]> (_t1020, _t1025);
      real _t1027 = -0.1e1;
      real _t1028 = 0.e0;
      real _t1029 = 0.e0;
      vec3 _t102A = [_t1027, _t1028, _t1029];
      real _t102B = prim •00CE<$[3]; $[3]; $[]> (_t102A, dPos0D23);
      time0FB3 = prim /0055 (_t1026, _t102B);
      face0FB4 = 1;
    } else {
      real _t102C = 0.e0;
      real _t102D = -0.1e1;
      real _t102E = 0.e0;
      real _t102F = 0.e0;
      vec3 _t1030 = [_t102D, _t102E, _t102F];
      real _t1031 = prim •00CE<$[3]; $[3]; $[]> (_t1030, refPos0D22);
      real _t1032 = prim -0026<$[]> (_t102C, _t1031);
      real _t1033 = -0.1e1;
      real _t1034 = 0.e0;
      real _t1035 = 0.e0;
      vec3 _t1036 = [_t1033, _t1034, _t1035];
      real _t1037 = prim •00CE<$[3]; $[3]; $[]> (_t1036, dPos0D23);
      faceTime0FB5 = prim /0055 (_t1032, _t1037);
    }
  }
  real _t1038 = 0.e0;
  real _t1039 = 0.e0;
  real _t103A = -0.1e1;
  real _t103B = 0.e0;
  vec3 _t103C = [_t1039, _t103A, _t103B];
  real _t103D = prim •00CE<$[3]; $[3]; $[]> (_t103C, refPos0D22);
  real _t103E = prim -0026<$[]> (_t1038, _t103D);
  real _t103F = 0.e0;
  real _t1040 = -0.1e1;
  real _t1041 = 0.e0;
  vec3 _t1042 = [_t103F, _t1040, _t1041];
  real _t1043 = prim •00CE<$[3]; $[3]; $[]> (_t1042, dPos0D23);
  real _t1044 = prim /0055 (_t103E, _t1043);
  real _t1045 = -0.1e-7;
  bool _t1046 = prim >=007E (_t1044, _t1045);
  real _t1047 = 0.e0;
  real _t1048 = 0.e0;
  real _t1049 = -0.1e1;
  real _t104A = 0.e0;
  vec3 _t104B = [_t1048, _t1049, _t104A];
  real _t104C = prim •00CE<$[3]; $[3]; $[]> (_t104B, refPos0D22);
  real _t104D = prim -0026<$[]> (_t1047, _t104C);
  real _t104E = 0.e0;
  real _t104F = -0.1e1;
  real _t1050 = 0.e0;
  vec3 _t1051 = [_t104E, _t104F, _t1050];
  real _t1052 = prim •00CE<$[3]; $[3]; $[]> (_t1051, dPos0D23);
  real _t1053 = prim /0055 (_t104D, _t1052);
  bool _t1054 = prim >0080 (time0FB3, _t1053);
  real _t1055 = 0.e0;
  real _t1056 = -0.1e1;
  real _t1057 = 0.e0;
  vec3 _t1058 = [_t1055, _t1056, _t1057];
  real _t1059 = prim •00CE<$[3]; $[3]; $[]> (_t1058, dPos0D23);
  real _t105A = prim |()|00B5<$[]> (_t1059);
  real _t105B = 0.1e-7;
  bool _t105C = prim >=007E (_t105A, _t105B);
  bool _t105D = prim $and01C4 (_t1054, _t105C);
  bool _t105E = prim $and01C4 (_t1046, _t105D);
  if _t105E {
    int _t105F = 2;
    bool _t1060 = prim !=0086 (i0FB2, _t105F);
    if _t1060 {
      real _t1061 = 0.e0;
      real _t1062 = 0.e0;
      real _t1063 = -0.1e1;
      real _t1064 = 0.e0;
      vec3 _t1065 = [_t1062, _t1063, _t1064];
      real _t1066 = prim •00CE<$[3]; $[3]; $[]> (_t1065, refPos0D22);
      real _t1067 = prim -0026<$[]> (_t1061, _t1066);
      real _t1068 = 0.e0;
      real _t1069 = -0.1e1;
      real _t106A = 0.e0;
      vec3 _t106B = [_t1068, _t1069, _t106A];
      real _t106C = prim •00CE<$[3]; $[3]; $[]> (_t106B, dPos0D23);
      time0FB3 = prim /0055 (_t1067, _t106C);
      face0FB4 = 2;
    } else {
      real _t106D = 0.e0;
      real _t106E = 0.e0;
      real _t106F = -0.1e1;
      real _t1070 = 0.e0;
      vec3 _t1071 = [_t106E, _t106F, _t1070];
      real _t1072 = prim •00CE<$[3]; $[3]; $[]> (_t1071, refPos0D22);
      real _t1073 = prim -0026<$[]> (_t106D, _t1072);
      real _t1074 = 0.e0;
      real _t1075 = -0.1e1;
      real _t1076 = 0.e0;
      vec3 _t1077 = [_t1074, _t1075, _t1076];
      real _t1078 = prim •00CE<$[3]; $[3]; $[]> (_t1077, dPos0D23);
      faceTime0FB5 = prim /0055 (_t1073, _t1078);
    }
  }
  real _t1079 = 0.e0;
  real _t107A = 0.e0;
  real _t107B = 0.e0;
  real _t107C = -0.1e1;
  vec3 _t107D = [_t107A, _t107B, _t107C];
  real _t107E = prim •00CE<$[3]; $[3]; $[]> (_t107D, refPos0D22);
  real _t107F = prim -0026<$[]> (_t1079, _t107E);
  real _t1080 = 0.e0;
  real _t1081 = 0.e0;
  real _t1082 = -0.1e1;
  vec3 _t1083 = [_t1080, _t1081, _t1082];
  real _t1084 = prim •00CE<$[3]; $[3]; $[]> (_t1083, dPos0D23);
  real _t1085 = prim /0055 (_t107F, _t1084);
  real _t1086 = -0.1e-7;
  bool _t1087 = prim >=007E (_t1085, _t1086);
  real _t1088 = 0.e0;
  real _t1089 = 0.e0;
  real _t108A = 0.e0;
  real _t108B = -0.1e1;
  vec3 _t108C = [_t1089, _t108A, _t108B];
  real _t108D = prim •00CE<$[3]; $[3]; $[]> (_t108C, refPos0D22);
  real _t108E = prim -0026<$[]> (_t1088, _t108D);
  real _t108F = 0.e0;
  real _t1090 = 0.e0;
  real _t1091 = -0.1e1;
  vec3 _t1092 = [_t108F, _t1090, _t1091];
  real _t1093 = prim •00CE<$[3]; $[3]; $[]> (_t1092, dPos0D23);
  real _t1094 = prim /0055 (_t108E, _t1093);
  bool _t1095 = prim >0080 (time0FB3, _t1094);
  real _t1096 = 0.e0;
  real _t1097 = 0.e0;
  real _t1098 = -0.1e1;
  vec3 _t1099 = [_t1096, _t1097, _t1098];
  real _t109A = prim •00CE<$[3]; $[3]; $[]> (_t1099, dPos0D23);
  real _t109B = prim |()|00B5<$[]> (_t109A);
  real _t109C = 0.1e-7;
  bool _t109D = prim >=007E (_t109B, _t109C);
  bool _t109E = prim $and01C4 (_t1095, _t109D);
  bool _t109F = prim $and01C4 (_t1087, _t109E);
  if _t109F {
    int _t10A0 = 3;
    bool _t10A1 = prim !=0086 (i0FB2, _t10A0);
    if _t10A1 {
      real _t10A2 = 0.e0;
      real _t10A3 = 0.e0;
      real _t10A4 = 0.e0;
      real _t10A5 = -0.1e1;
      vec3 _t10A6 = [_t10A3, _t10A4, _t10A5];
      real _t10A7 = prim •00CE<$[3]; $[3]; $[]> (_t10A6, refPos0D22);
      real _t10A8 = prim -0026<$[]> (_t10A2, _t10A7);
      real _t10A9 = 0.e0;
      real _t10AA = 0.e0;
      real _t10AB = -0.1e1;
      vec3 _t10AC = [_t10A9, _t10AA, _t10AB];
      real _t10AD = prim •00CE<$[3]; $[3]; $[]> (_t10AC, dPos0D23);
      time0FB3 = prim /0055 (_t10A8, _t10AD);
      face0FB4 = 3;
    } else {
      real _t10AE = 0.e0;
      real _t10AF = 0.e0;
      real _t10B0 = 0.e0;
      real _t10B1 = -0.1e1;
      vec3 _t10B2 = [_t10AF, _t10B0, _t10B1];
      real _t10B3 = prim •00CE<$[3]; $[3]; $[]> (_t10B2, refPos0D22);
      real _t10B4 = prim -0026<$[]> (_t10AE, _t10B3);
      real _t10B5 = 0.e0;
      real _t10B6 = 0.e0;
      real _t10B7 = -0.1e1;
      vec3 _t10B8 = [_t10B5, _t10B6, _t10B7];
      real _t10B9 = prim •00CE<$[3]; $[3]; $[]> (_t10B8, dPos0D23);
      faceTime0FB5 = prim /0055 (_t10B4, _t10B9);
    }
  }
  int _t10BA = -1;
  bool _t10BB = prim !=0086 (face0FB4, _t10BA);
  real _t10BC = 0.1e1;
  real _t10BD = 0.1e-7;
  real _t10BE = prim +0017<$[]> (_t10BC, _t10BD);
  real _t10BF = 0.1e1;
  real _t10C0 = 0.1e1;
  real _t10C1 = 0.1e1;
  vec3 _t10C2 = [_t10BF, _t10C0, _t10C1];
  real _t10C3 = 0.e0;
  real _t10C4 = prim max0125 (time0FB3, _t10C3);
  vec3 _t10C5 = prim *0038<$[3]> (dPos0D23, _t10C4);
  vec3 _t10C6 = prim +0017<$[3]> (refPos0D22, _t10C5);
  real _t10C7 = prim •00CE<$[3]; $[3]; $[]> (_t10C2, _t10C6);
  bool _t10C8 = prim >0080 (_t10BE, _t10C7);
  real _t10C9 = 0.1e-7;
  real _t10CA = 0.1e-7;
  real _t10CB = 0.1e-7;
  vec3 _t10CC = [_t10C9, _t10CA, _t10CB];
  real _t10CD = 0.e0;
  real _t10CE = prim max0125 (time0FB3, _t10CD);
  vec3 _t10CF = prim *0038<$[3]> (dPos0D23, _t10CE);
  vec3 _t10D0 = prim +0017<$[3]> (refPos0D22, _t10CF);
  vec3 _t10D1 = prim +0017<$[3]> (_t10CC, _t10D0);
  real _t10D2 = _t10D1[0];
  real _t10D3 = -0.e0;
  bool _t10D4 = prim >0080 (_t10D2, _t10D3);
  real _t10D5 = 0.1e-7;
  real _t10D6 = 0.1e-7;
  real _t10D7 = 0.1e-7;
  vec3 _t10D8 = [_t10D5, _t10D6, _t10D7];
  real _t10D9 = 0.e0;
  real _t10DA = prim max0125 (time0FB3, _t10D9);
  vec3 _t10DB = prim *0038<$[3]> (dPos0D23, _t10DA);
  vec3 _t10DC = prim +0017<$[3]> (refPos0D22, _t10DB);
  vec3 _t10DD = prim +0017<$[3]> (_t10D8, _t10DC);
  real _t10DE = _t10DD[1];
  real _t10DF = -0.e0;
  bool _t10E0 = prim >0080 (_t10DE, _t10DF);
  real _t10E1 = 0.1e-7;
  real _t10E2 = 0.1e-7;
  real _t10E3 = 0.1e-7;
  vec3 _t10E4 = [_t10E1, _t10E2, _t10E3];
  real _t10E5 = 0.e0;
  real _t10E6 = prim max0125 (time0FB3, _t10E5);
  vec3 _t10E7 = prim *0038<$[3]> (dPos0D23, _t10E6);
  vec3 _t10E8 = prim +0017<$[3]> (refPos0D22, _t10E7);
  vec3 _t10E9 = prim +0017<$[3]> (_t10E4, _t10E8);
  real _t10EA = _t10E9[2];
  real _t10EB = -0.e0;
  bool _t10EC = prim >0080 (_t10EA, _t10EB);
  bool _t10ED = prim $and01C4 (_t10E0, _t10EC);
  bool _t10EE = prim $and01C4 (_t10D4, _t10ED);
  bool _t10EF = prim $and01C4 (_t10C8, _t10EE);
  bool _t10F0 = prim $and01C4 (_t10BB, _t10EF);
  if _t10F0 {
    real _t10F1 = 0.e0;
    real _t10F2 = prim max0125 (time0FB3, _t10F1);
    real _t10F3 = (real)face0FB4;
    vec2 _t10F4 = [_t10F2, _t10F3];
    return _t10F4;
  } else {
    real _t10F5 = -inf;
    bool _t10F6 = prim ==0084 (_t10F5, faceTime0FB5);
    if _t10F6 {
      real _t10F7 = -0.1e1;
      real _t10F8 = -0.1e1;
      vec2 _t10F9 = [_t10F7, _t10F8];
      return _t10F9;
    } else {
      real _t10FA = 0.e0;
      real _t10FB = prim max0125 (faceTime0FB5, _t10FA);
      real _t10FC = (real)i0FB2;
      vec2 _t10FD = [_t10FB, _t10FC];
      return _t10FD;
    }
  }
}
function Femdata: Mesh#0 domain10FE (Femdata: Space arg010FF)
{
  Femdata: Mesh _t1100 = extractFem(arg010FF, Mesh);
  return _t1100;
}
function Femdata: Space#0 space1101 (Femdata: FemFunc arg01102)
{
  Femdata: Space _t1103 = extractFem(arg01102, Space);
  return _t1103;
}
function Femdata: FuncCell#0 funcCell1104 (Femdata: FemFunc arg01105, Femdata: MeshCell arg11106)
{
  int _t1107 = extractFemItem(CellIndex(MeshCell), int, arg11106);
  Femdata: FuncCell _t1108 = loadFem(FuncCell, arg01105, _t1107);
  return _t1108;
}
function bool#2 insideTest1116 (vec3 x1117)
{
  real _t1118 = 0.e0;
  real _t1119 = 0.e0;
  real _t111A = 0.e0;
  vec3 _t111B = [_t1118, _t1119, _t111A];
  vec3 mid111C = prim -0026<$[3]> (x1117, _t111B);
  bool _t111D;
  real _t111E = mid111C[0];
  real _t111F = prim |()|00B5<$[]> (_t111E);
  real _t1120 = 0.1e0;
  bool _t1121 = prim >0080 (_t111F, _t1120);
  if _t1121 {
    bool _t1122;
    real _t1123 = mid111C[1];
    real _t1124 = prim |()|00B5<$[]> (_t1123);
    real _t1125 = 0.1e0;
    bool _t1126 = prim >0080 (_t1124, _t1125);
    if _t1126 {
      real _t1127 = mid111C[2];
      real _t1128 = prim |()|00B5<$[]> (_t1127);
      real _t1129 = 0.1e0;
      _t1122 = prim >0080 (_t1128, _t1129);
    } else {
      _t1122 = false;
    }
    _t111D = _t1122;
  } else {
    _t111D = false;
  }
  bool z112A = _t111D;
  bool _t112B;
  real _t112C = prim |()|00B5<$[3]> (mid111C);
  real _t112D = 0.4e1;
  bool _t112E = prim <007A (_t112C, _t112D);
  if _t112E {
    real _t112F = prim |()|00B5<$[3]> (mid111C);
    real _t1130 = 0.3e1;
    _t112B = prim >0080 (_t112F, _t1130);
  } else {
    _t112B = false;
  }
  return _t112B;
}
function vec3#3 grad113E (vec3 s113F)
{
  real x1140 = s113F[0];
  real y1141 = s113F[1];
  real z1142 = s113F[2];
  real _t1143 = 0.2e1;
  real _t1144 = prim *0034 (_t1143, x1140);
  int _t1145 = 2;
  real _t1146 = prim ^0068 (z1142, _t1145);
  real _t1147 = prim *0034 (_t1144, _t1146);
  int _t1148 = 2;
  real _t1149 = prim ^0068 (x1140, _t1148);
  int _t114A = 2;
  real _t114B = prim ^0068 (y1141, _t114A);
  real _t114C = prim +0017<$[]> (_t1149, _t114B);
  int _t114D = 2;
  real _t114E = prim ^0068 (z1142, _t114D);
  real _t114F = prim +0017<$[]> (_t114C, _t114E);
  real _t1150 = prim cos0169 (_t114F);
  real _t1151 = prim *0034 (_t1147, _t1150);
  real _t1152 = 0.2e1;
  real _t1153 = prim *0034 (_t1152, y1141);
  int _t1154 = 2;
  real _t1155 = prim ^0068 (z1142, _t1154);
  real _t1156 = prim *0034 (_t1153, _t1155);
  int _t1157 = 2;
  real _t1158 = prim ^0068 (x1140, _t1157);
  int _t1159 = 2;
  real _t115A = prim ^0068 (y1141, _t1159);
  real _t115B = prim +0017<$[]> (_t1158, _t115A);
  int _t115C = 2;
  real _t115D = prim ^0068 (z1142, _t115C);
  real _t115E = prim +0017<$[]> (_t115B, _t115D);
  real _t115F = prim cos0169 (_t115E);
  real _t1160 = prim *0034 (_t1156, _t115F);
  real _t1161 = 0.2e1;
  int _t1162 = 3;
  real _t1163 = prim ^0068 (z1142, _t1162);
  real _t1164 = prim *0034 (_t1161, _t1163);
  int _t1165 = 2;
  real _t1166 = prim ^0068 (x1140, _t1165);
  int _t1167 = 2;
  real _t1168 = prim ^0068 (y1141, _t1167);
  real _t1169 = prim +0017<$[]> (_t1166, _t1168);
  int _t116A = 2;
  real _t116B = prim ^0068 (z1142, _t116A);
  real _t116C = prim +0017<$[]> (_t1169, _t116B);
  real _t116D = prim cos0169 (_t116C);
  real _t116E = prim *0034 (_t1164, _t116D);
  real _t116F = 0.2e1;
  real _t1170 = prim *0034 (_t116F, z1142);
  int _t1171 = 2;
  real _t1172 = prim ^0068 (x1140, _t1171);
  int _t1173 = 2;
  real _t1174 = prim ^0068 (y1141, _t1173);
  real _t1175 = prim +0017<$[]> (_t1172, _t1174);
  int _t1176 = 2;
  real _t1177 = prim ^0068 (z1142, _t1176);
  real _t1178 = prim +0017<$[]> (_t1175, _t1177);
  real _t1179 = prim sin0171 (_t1178);
  real _t117A = prim *0034 (_t1170, _t1179);
  real _t117B = prim +0017<$[]> (_t116E, _t117A);
  vec3 g117C = [_t1151, _t1160, _t117B];
  return g117C;
}
function tensor[3,3]#3 hess117D (vec3 s117E)
{
  real x117F = s117E[0];
  real y1180 = s117E[1];
  real z1181 = s117E[2];
  int _t1182 = -4;
  real _t1183 = (real)_t1182;
  int _t1184 = 2;
  real _t1185 = prim ^0068 (x117F, _t1184);
  real _t1186 = prim *0034 (_t1183, _t1185);
  int _t1187 = 2;
  real _t1188 = prim ^0068 (z1181, _t1187);
  real _t1189 = prim *0034 (_t1186, _t1188);
  int _t118A = 2;
  real _t118B = prim ^0068 (x117F, _t118A);
  int _t118C = 2;
  real _t118D = prim ^0068 (y1180, _t118C);
  real _t118E = prim +0017<$[]> (_t118B, _t118D);
  int _t118F = 2;
  real _t1190 = prim ^0068 (z1181, _t118F);
  real _t1191 = prim +0017<$[]> (_t118E, _t1190);
  real _t1192 = prim sin0171 (_t1191);
  real _t1193 = prim *0034 (_t1189, _t1192);
  real _t1194 = 0.2e1;
  int _t1195 = 2;
  real _t1196 = prim ^0068 (z1181, _t1195);
  real _t1197 = prim *0034 (_t1194, _t1196);
  int _t1198 = 2;
  real _t1199 = prim ^0068 (x117F, _t1198);
  int _t119A = 2;
  real _t119B = prim ^0068 (y1180, _t119A);
  real _t119C = prim +0017<$[]> (_t1199, _t119B);
  int _t119D = 2;
  real _t119E = prim ^0068 (z1181, _t119D);
  real _t119F = prim +0017<$[]> (_t119C, _t119E);
  real _t11A0 = prim cos0169 (_t119F);
  real _t11A1 = prim *0034 (_t1197, _t11A0);
  real _t11A2 = prim +0017<$[]> (_t1193, _t11A1);
  int _t11A3 = -4;
  real _t11A4 = (real)_t11A3;
  real _t11A5 = prim *0034 (_t11A4, x117F);
  real _t11A6 = prim *0034 (_t11A5, y1180);
  int _t11A7 = 2;
  real _t11A8 = prim ^0068 (z1181, _t11A7);
  real _t11A9 = prim *0034 (_t11A6, _t11A8);
  int _t11AA = 2;
  real _t11AB = prim ^0068 (x117F, _t11AA);
  int _t11AC = 2;
  real _t11AD = prim ^0068 (y1180, _t11AC);
  real _t11AE = prim +0017<$[]> (_t11AB, _t11AD);
  int _t11AF = 2;
  real _t11B0 = prim ^0068 (z1181, _t11AF);
  real _t11B1 = prim +0017<$[]> (_t11AE, _t11B0);
  real _t11B2 = prim sin0171 (_t11B1);
  real _t11B3 = prim *0034 (_t11A9, _t11B2);
  int _t11B4 = -4;
  real _t11B5 = (real)_t11B4;
  real _t11B6 = prim *0034 (_t11B5, x117F);
  int _t11B7 = 3;
  real _t11B8 = prim ^0068 (z1181, _t11B7);
  real _t11B9 = prim *0034 (_t11B6, _t11B8);
  int _t11BA = 2;
  real _t11BB = prim ^0068 (x117F, _t11BA);
  int _t11BC = 2;
  real _t11BD = prim ^0068 (y1180, _t11BC);
  real _t11BE = prim +0017<$[]> (_t11BB, _t11BD);
  int _t11BF = 2;
  real _t11C0 = prim ^0068 (z1181, _t11BF);
  real _t11C1 = prim +0017<$[]> (_t11BE, _t11C0);
  real _t11C2 = prim sin0171 (_t11C1);
  real _t11C3 = prim *0034 (_t11B9, _t11C2);
  real _t11C4 = 0.4e1;
  real _t11C5 = prim *0034 (_t11C4, x117F);
  real _t11C6 = prim *0034 (_t11C5, z1181);
  int _t11C7 = 2;
  real _t11C8 = prim ^0068 (x117F, _t11C7);
  int _t11C9 = 2;
  real _t11CA = prim ^0068 (y1180, _t11C9);
  real _t11CB = prim +0017<$[]> (_t11C8, _t11CA);
  int _t11CC = 2;
  real _t11CD = prim ^0068 (z1181, _t11CC);
  real _t11CE = prim +0017<$[]> (_t11CB, _t11CD);
  real _t11CF = prim cos0169 (_t11CE);
  real _t11D0 = prim *0034 (_t11C6, _t11CF);
  real _t11D1 = prim +0017<$[]> (_t11C3, _t11D0);
  vec3 _t11D2 = [_t11A2, _t11B3, _t11D1];
  int _t11D3 = -4;
  real _t11D4 = (real)_t11D3;
  real _t11D5 = prim *0034 (_t11D4, x117F);
  real _t11D6 = prim *0034 (_t11D5, y1180);
  int _t11D7 = 2;
  real _t11D8 = prim ^0068 (z1181, _t11D7);
  real _t11D9 = prim *0034 (_t11D6, _t11D8);
  int _t11DA = 2;
  real _t11DB = prim ^0068 (x117F, _t11DA);
  int _t11DC = 2;
  real _t11DD = prim ^0068 (y1180, _t11DC);
  real _t11DE = prim +0017<$[]> (_t11DB, _t11DD);
  int _t11DF = 2;
  real _t11E0 = prim ^0068 (z1181, _t11DF);
  real _t11E1 = prim +0017<$[]> (_t11DE, _t11E0);
  real _t11E2 = prim sin0171 (_t11E1);
  real _t11E3 = prim *0034 (_t11D9, _t11E2);
  int _t11E4 = -4;
  real _t11E5 = (real)_t11E4;
  int _t11E6 = 2;
  real _t11E7 = prim ^0068 (y1180, _t11E6);
  real _t11E8 = prim *0034 (_t11E5, _t11E7);
  int _t11E9 = 2;
  real _t11EA = prim ^0068 (z1181, _t11E9);
  real _t11EB = prim *0034 (_t11E8, _t11EA);
  int _t11EC = 2;
  real _t11ED = prim ^0068 (x117F, _t11EC);
  int _t11EE = 2;
  real _t11EF = prim ^0068 (y1180, _t11EE);
  real _t11F0 = prim +0017<$[]> (_t11ED, _t11EF);
  int _t11F1 = 2;
  real _t11F2 = prim ^0068 (z1181, _t11F1);
  real _t11F3 = prim +0017<$[]> (_t11F0, _t11F2);
  real _t11F4 = prim sin0171 (_t11F3);
  real _t11F5 = prim *0034 (_t11EB, _t11F4);
  real _t11F6 = 0.2e1;
  int _t11F7 = 2;
  real _t11F8 = prim ^0068 (z1181, _t11F7);
  real _t11F9 = prim *0034 (_t11F6, _t11F8);
  int _t11FA = 2;
  real _t11FB = prim ^0068 (x117F, _t11FA);
  int _t11FC = 2;
  real _t11FD = prim ^0068 (y1180, _t11FC);
  real _t11FE = prim +0017<$[]> (_t11FB, _t11FD);
  int _t11FF = 2;
  real _t1200 = prim ^0068 (z1181, _t11FF);
  real _t1201 = prim +0017<$[]> (_t11FE, _t1200);
  real _t1202 = prim cos0169 (_t1201);
  real _t1203 = prim *0034 (_t11F9, _t1202);
  real _t1204 = prim +0017<$[]> (_t11F5, _t1203);
  int _t1205 = -4;
  real _t1206 = (real)_t1205;
  real _t1207 = prim *0034 (_t1206, y1180);
  int _t1208 = 3;
  real _t1209 = prim ^0068 (z1181, _t1208);
  real _t120A = prim *0034 (_t1207, _t1209);
  int _t120B = 2;
  real _t120C = prim ^0068 (x117F, _t120B);
  int _t120D = 2;
  real _t120E = prim ^0068 (y1180, _t120D);
  real _t120F = prim +0017<$[]> (_t120C, _t120E);
  int _t1210 = 2;
  real _t1211 = prim ^0068 (z1181, _t1210);
  real _t1212 = prim +0017<$[]> (_t120F, _t1211);
  real _t1213 = prim sin0171 (_t1212);
  real _t1214 = prim *0034 (_t120A, _t1213);
  real _t1215 = 0.4e1;
  real _t1216 = prim *0034 (_t1215, y1180);
  real _t1217 = prim *0034 (_t1216, z1181);
  int _t1218 = 2;
  real _t1219 = prim ^0068 (x117F, _t1218);
  int _t121A = 2;
  real _t121B = prim ^0068 (y1180, _t121A);
  real _t121C = prim +0017<$[]> (_t1219, _t121B);
  int _t121D = 2;
  real _t121E = prim ^0068 (z1181, _t121D);
  real _t121F = prim +0017<$[]> (_t121C, _t121E);
  real _t1220 = prim cos0169 (_t121F);
  real _t1221 = prim *0034 (_t1217, _t1220);
  real _t1222 = prim +0017<$[]> (_t1214, _t1221);
  vec3 _t1223 = [_t11E3, _t1204, _t1222];
  int _t1224 = -4;
  real _t1225 = (real)_t1224;
  real _t1226 = prim *0034 (_t1225, x117F);
  int _t1227 = 3;
  real _t1228 = prim ^0068 (z1181, _t1227);
  real _t1229 = prim *0034 (_t1226, _t1228);
  int _t122A = 2;
  real _t122B = prim ^0068 (x117F, _t122A);
  int _t122C = 2;
  real _t122D = prim ^0068 (y1180, _t122C);
  real _t122E = prim +0017<$[]> (_t122B, _t122D);
  int _t122F = 2;
  real _t1230 = prim ^0068 (z1181, _t122F);
  real _t1231 = prim +0017<$[]> (_t122E, _t1230);
  real _t1232 = prim sin0171 (_t1231);
  real _t1233 = prim *0034 (_t1229, _t1232);
  real _t1234 = 0.4e1;
  real _t1235 = prim *0034 (_t1234, x117F);
  real _t1236 = prim *0034 (_t1235, z1181);
  int _t1237 = 2;
  real _t1238 = prim ^0068 (x117F, _t1237);
  int _t1239 = 2;
  real _t123A = prim ^0068 (y1180, _t1239);
  real _t123B = prim +0017<$[]> (_t1238, _t123A);
  int _t123C = 2;
  real _t123D = prim ^0068 (z1181, _t123C);
  real _t123E = prim +0017<$[]> (_t123B, _t123D);
  real _t123F = prim cos0169 (_t123E);
  real _t1240 = prim *0034 (_t1236, _t123F);
  real _t1241 = prim +0017<$[]> (_t1233, _t1240);
  int _t1242 = -4;
  real _t1243 = (real)_t1242;
  real _t1244 = prim *0034 (_t1243, y1180);
  int _t1245 = 3;
  real _t1246 = prim ^0068 (z1181, _t1245);
  real _t1247 = prim *0034 (_t1244, _t1246);
  int _t1248 = 2;
  real _t1249 = prim ^0068 (x117F, _t1248);
  int _t124A = 2;
  real _t124B = prim ^0068 (y1180, _t124A);
  real _t124C = prim +0017<$[]> (_t1249, _t124B);
  int _t124D = 2;
  real _t124E = prim ^0068 (z1181, _t124D);
  real _t124F = prim +0017<$[]> (_t124C, _t124E);
  real _t1250 = prim sin0171 (_t124F);
  real _t1251 = prim *0034 (_t1247, _t1250);
  real _t1252 = 0.4e1;
  real _t1253 = prim *0034 (_t1252, y1180);
  real _t1254 = prim *0034 (_t1253, z1181);
  int _t1255 = 2;
  real _t1256 = prim ^0068 (x117F, _t1255);
  int _t1257 = 2;
  real _t1258 = prim ^0068 (y1180, _t1257);
  real _t1259 = prim +0017<$[]> (_t1256, _t1258);
  int _t125A = 2;
  real _t125B = prim ^0068 (z1181, _t125A);
  real _t125C = prim +0017<$[]> (_t1259, _t125B);
  real _t125D = prim cos0169 (_t125C);
  real _t125E = prim *0034 (_t1254, _t125D);
  real _t125F = prim +0017<$[]> (_t1251, _t125E);
  int _t1260 = -4;
  real _t1261 = (real)_t1260;
  int _t1262 = 4;
  real _t1263 = prim ^0068 (z1181, _t1262);
  real _t1264 = prim *0034 (_t1261, _t1263);
  int _t1265 = 2;
  real _t1266 = prim ^0068 (x117F, _t1265);
  int _t1267 = 2;
  real _t1268 = prim ^0068 (y1180, _t1267);
  real _t1269 = prim +0017<$[]> (_t1266, _t1268);
  int _t126A = 2;
  real _t126B = prim ^0068 (z1181, _t126A);
  real _t126C = prim +0017<$[]> (_t1269, _t126B);
  real _t126D = prim sin0171 (_t126C);
  real _t126E = prim *0034 (_t1264, _t126D);
  real _t126F = 0.1e2;
  int _t1270 = 2;
  real _t1271 = prim ^0068 (z1181, _t1270);
  real _t1272 = prim *0034 (_t126F, _t1271);
  int _t1273 = 2;
  real _t1274 = prim ^0068 (x117F, _t1273);
  int _t1275 = 2;
  real _t1276 = prim ^0068 (y1180, _t1275);
  real _t1277 = prim +0017<$[]> (_t1274, _t1276);
  int _t1278 = 2;
  real _t1279 = prim ^0068 (z1181, _t1278);
  real _t127A = prim +0017<$[]> (_t1277, _t1279);
  real _t127B = prim cos0169 (_t127A);
  real _t127C = prim *0034 (_t1272, _t127B);
  real _t127D = prim +0017<$[]> (_t126E, _t127C);
  real _t127E = 0.2e1;
  int _t127F = 2;
  real _t1280 = prim ^0068 (x117F, _t127F);
  int _t1281 = 2;
  real _t1282 = prim ^0068 (y1180, _t1281);
  real _t1283 = prim +0017<$[]> (_t1280, _t1282);
  int _t1284 = 2;
  real _t1285 = prim ^0068 (z1181, _t1284);
  real _t1286 = prim +0017<$[]> (_t1283, _t1285);
  real _t1287 = prim sin0171 (_t1286);
  real _t1288 = prim *0034 (_t127E, _t1287);
  real _t1289 = prim +0017<$[]> (_t127D, _t1288);
  vec3 _t128A = [_t1241, _t125F, _t1289];
  tensor[3,3] hess128B = [_t11D2, _t1223, _t128A];
  return hess128B;
}
function vec3#6 fStep128C (vec3 s128D)
{
  vec3 g128E = func grad113E (s128D);
  tensor[3,3] H128F = func hess117D (s128D);
  vec3[3] E1290 = prim evecs00A0 (H128F);
  real[3] L1291 = prim evals009F (H128F);
  real _t1292 = 0.1e1;
  int _t1293 = 2;
  real _t1294 = prim $sub01C0<real; %3> (L1291, _t1293);
  real _t1295 = prim /0055 (_t1292, _t1294);
  real _t1296 = prim unary -008B<$[]> (_t1295);
  int _t1297 = 2;
  vec3 _t1298 = prim $sub01C0<vec3; %3> (E1290, _t1297);
  vec3 _t1299 = prim *0036<$[3]> (_t1296, _t1298);
  int _t129A = 2;
  vec3 _t129B = prim $sub01C0<vec3; %3> (E1290, _t129A);
  tensor[3,3] _t129C = prim ⊗00E5<$[3]; $[3]; $[3,3]> (_t1299, _t129B);
  vec3 up129D = prim •00CE<$[3,3]; $[3]; $[3]> (_t129C, g128E);
  bool _t129E;
  real _t129F = up129D[0];
  real _t12A0 = up129D[0];
  bool _t12A1 = prim ==0084 (_t129F, _t12A0);
  bool _t12A2 = prim !00BC (_t12A1);
  if _t12A2 {
    _t129E = true;
  } else {
    bool _t12A3;
    real _t12A4 = up129D[1];
    real _t12A5 = up129D[1];
    bool _t12A6 = prim ==0084 (_t12A4, _t12A5);
    bool _t12A7 = prim !00BC (_t12A6);
    if _t12A7 {
      _t12A3 = true;
    } else {
      real _t12A8 = up129D[2];
      real _t12A9 = up129D[2];
      bool _t12AA = prim ==0084 (_t12A8, _t12A9);
      _t12A3 = prim !00BC (_t12AA);
    }
    _t129E = _t12A3;
  }
  if _t129E {
    real _t12AB = +inf;
    real _t12AC = +inf;
    real _t12AD = +inf;
    vec3 _t12AE = [_t12AB, _t12AC, _t12AD];
    return _t12AE;
  }
  return up129D;
}
function bool#0 posNanCheck12AF (vec3 up12B0)
{
  bool _t12B1;
  real _t12B2 = up12B0[0];
  real _t12B3 = up12B0[0];
  bool _t12B4 = prim ==0084 (_t12B2, _t12B3);
  bool _t12B5 = prim !00BC (_t12B4);
  if _t12B5 {
    _t12B1 = true;
  } else {
    bool _t12B6;
    real _t12B7 = up12B0[1];
    real _t12B8 = up12B0[1];
    bool _t12B9 = prim ==0084 (_t12B7, _t12B8);
    bool _t12BA = prim !00BC (_t12B9);
    if _t12BA {
      _t12B6 = true;
    } else {
      real _t12BB = up12B0[2];
      real _t12BC = up12B0[2];
      bool _t12BD = prim ==0084 (_t12BB, _t12BC);
      _t12B6 = prim !00BC (_t12BD);
    }
    _t12B1 = _t12B6;
  }
  return _t12B1;
}
function tensor[3,3]#4 fPerp12BE (vec3 s12BF)
{
  vec3 g12C0 = func grad113E (s12BF);
  tensor[3,3] H12C1 = func hess117D (s12BF);
  vec3[3] _t12C2 = prim evecs00A0 (H12C1);
  int _t12C3 = 2;
  vec3 E212C4 = prim $sub01C0<vec3; %3> (_t12C2, _t12C3);
  tensor[3,3] _t12C5 = prim $id01B9<%3> ();
  tensor[3,3] _t12C6 = prim ⊗00E5<$[3]; $[3]; $[3,3]> (E212C4, E212C4);
  tensor[3,3] m12C7 = prim -0026<$[3,3]> (_t12C5, _t12C6);
  real t12C8 = prim :00FC<$[3,3]; $[3,3]; $[]> (m12C7, m12C7);
  bool _t12C9 = prim ==0084 (t12C8, t12C8);
  bool _t12CA = prim !00BC (_t12C9);
  if _t12CA {
    tensor[3,3] _t12CB = prim $zero01BB<$[3,3]> ();
    return _t12CB;
  }
  return m12C7;
}
function real#2 fStrength12CC (vec3 s12CD)
{
  vec3 g12CE = func grad113E (s12CD);
  tensor[3,3] H12CF = func hess117D (s12CD);
  real[3] _t12D0 = prim evals009F (H12CF);
  int _t12D1 = 2;
  real _t12D2 = prim $sub01C0<real; %3> (_t12D0, _t12D1);
  real _t12D3 = prim unary -008B<$[]> (_t12D2);
  real _t12D4 = prim |()|00B5<$[3]> (g12CE);
  real _t12D5 = prim +0017<$[]> (fBias07CC, _t12D4);
  real str12D6 = prim /0055 (_t12D3, _t12D5);
  return str12D6;
}
function real#2 fMask12D7 (vec3 x12D8)
{
  real _t12D9 = 0.e0;
  return _t12D9;
}
function bool#2 fTest12DA (vec3 x12DB)
{
  bool _t12DC = true;
  return _t12DC;
}
function bool#3 posTest12DD (vec3 x12DE)
{
  bool _t12DF;
  bool _t12E0 = func insideTest1116 (x12DE);
  if _t12E0 {
    bool _t12E1;
    real _t12E2 = func fStrength12CC (x12DE);
    bool _t12E3 = prim >0080 (_t12E2, fStrTh07CA);
    if _t12E3 {
      bool _t12E4;
      real _t12E5 = func fMask12D7 (x12DE);
      bool _t12E6 = prim >=007E (_t12E5, fMaskTh07CB);
      if _t12E6 {
        _t12E4 = func fTest12DA (x12DE);
      } else {
        _t12E4 = false;
      }
      _t12E1 = _t12E4;
    } else {
      _t12E1 = false;
    }
    _t12DF = _t12E1;
  } else {
    _t12DF = false;
  }
  return _t12DF;
}
function real#1 phi12F5 (real r12F6)
{
  real _t12F7 = 0.2e1;
  real _t12F8 = 0.3e1;
  real _t12F9 = prim /0055 (_t12F7, _t12F8);
  real s12FA = prim -0026<$[]> (r12F6, _t12F9);
  real _t12FB;
  real _t12FC = 0.2e1;
  real _t12FD = 0.3e1;
  real _t12FE = prim /0055 (_t12FC, _t12FD);
  bool _t12FF = prim <007A (r12F6, _t12FE);
  if _t12FF {
    real _t1300 = 0.1e1;
    real _t1301 = -0.5646e1;
    real _t1302 = 0.119835e2;
    real _t1303 = -0.113535e2;
    real _t1304 = 0.40550625e1;
    real _t1305 = prim *0034 (_t1304, r12F6);
    real _t1306 = prim +0017<$[]> (_t1303, _t1305);
    real _t1307 = prim *0034 (r12F6, _t1306);
    real _t1308 = prim +0017<$[]> (_t1302, _t1307);
    real _t1309 = prim *0034 (r12F6, _t1308);
    real _t130A = prim +0017<$[]> (_t1301, _t1309);
    real _t130B = prim *0034 (r12F6, _t130A);
    _t12FB = prim +0017<$[]> (_t1300, _t130B);
  } else {
    real _t130C;
    real _t130D = 0.1e1;
    bool _t130E = prim <007A (r12F6, _t130D);
    if _t130E {
      real _t130F = -0.1e-2;
      real _t1310 = 0.9e-1;
      real _t1311 = -0.54e0;
      real _t1312 = 0.1215e1;
      real _t1313 = 0.972e0;
      real _t1314 = prim *0034 (_t1313, s12FA);
      real _t1315 = prim -0026<$[]> (_t1312, _t1314);
      real _t1316 = prim *0034 (_t1315, s12FA);
      real _t1317 = prim +0017<$[]> (_t1311, _t1316);
      real _t1318 = prim *0034 (_t1317, s12FA);
      real _t1319 = prim +0017<$[]> (_t1310, _t1318);
      real _t131A = prim *0034 (_t1319, s12FA);
      real _t131B = prim *0034 (_t131A, s12FA);
      _t130C = prim +0017<$[]> (_t130F, _t131B);
    } else {
      _t130C = 0.e0;
    }
    _t12FB = _t130C;
  }
  return _t12FB;
}
function real#1 phi'131C (real r131D)
{
  real _t131E = 0.3e1;
  real _t131F = prim *0034 (_t131E, r131D);
  real _t1320 = 0.2e1;
  real t1321 = prim -0026<$[]> (_t131F, _t1320);
  real _t1322;
  real _t1323 = 0.2e1;
  real _t1324 = 0.3e1;
  real _t1325 = prim /0055 (_t1323, _t1324);
  bool _t1326 = prim <007A (r131D, _t1325);
  if _t1326 {
    real _t1327 = -0.5646e1;
    real _t1328 = 0.23967e2;
    real _t1329 = -0.340605e2;
    real _t132A = 0.1622025e2;
    real _t132B = prim *0034 (_t132A, r131D);
    real _t132C = prim +0017<$[]> (_t1329, _t132B);
    real _t132D = prim *0034 (r131D, _t132C);
    real _t132E = prim +0017<$[]> (_t1328, _t132D);
    real _t132F = prim *0034 (r131D, _t132E);
    _t1322 = prim +0017<$[]> (_t1327, _t132F);
  } else {
    real _t1330;
    real _t1331 = 0.1e1;
    bool _t1332 = prim <007A (r131D, _t1331);
    if _t1332 {
      real _t1333 = 0.1234567901e-1;
      real _t1334 = prim *0034 (_t1333, t1321);
      real _t1335 = 0.486e1;
      real _t1336 = -0.1458e2;
      real _t1337 = 0.1458e2;
      real _t1338 = 0.486e1;
      real _t1339 = prim *0034 (_t1338, t1321);
      real _t133A = prim -0026<$[]> (_t1337, _t1339);
      real _t133B = prim *0034 (t1321, _t133A);
      real _t133C = prim +0017<$[]> (_t1336, _t133B);
      real _t133D = prim *0034 (t1321, _t133C);
      real _t133E = prim +0017<$[]> (_t1335, _t133D);
      _t1330 = prim *0034 (_t1334, _t133E);
    } else {
      _t1330 = 0.e0;
    }
    _t1322 = _t1330;
  }
  return _t1322;
}
function real#2 enr1343 (vec3 x1344)
{
  real _t1345 = prim |()|00B5<$[3]> (x1344);
  real _t1346 = prim /0055 (_t1345, rad1342);
  real _t1347 = func phi12F5 (_t1346);
  return _t1347;
}
function vec3#1 frc1348 (vec3 x1349)
{
  real _t134A = prim |()|00B5<$[3]> (x1349);
  real _t134B = prim /0055 (_t134A, rad1342);
  real _t134C = func phi'131C (_t134B);
  real _t134D = 0.1e1;
  real _t134E = prim /0055 (_t134D, rad1342);
  real _t134F = prim *0034 (_t134C, _t134E);
  vec3 _t1350 = prim *0036<$[3]> (_t134F, x1349);
  real _t1351 = prim |()|00B5<$[3]> (x1349);
  vec3 _t1352 = prim /0057<$[3]> (_t1350, _t1351);
  return _t1352;
}
function real#3 urnd135C (real x135D)
{
  real _t135E = 0.e0;
  bool _t135F = prim ==0084 (x135D, _t135E);
  if _t135F {
    real _t1360 = 0.e0;
    return _t1360;
  }
  real _t1361 = prim |()|00B5<$[]> (x135D);
  real l21362 = prim log2018D (_t1361);
  real _t1363 = 0.2e1;
  real _t1364 = prim floor0189 (l21362);
  real _t1365 = prim -0026<$[]> (l21362, _t1364);
  real _t1366 = 0.1e1;
  real _t1367 = prim -0026<$[]> (_t1365, _t1366);
  real frxp1368 = prim ^0069 (_t1363, _t1367);
  real _t1369 = 0.2e1;
  int _t136A = 20;
  real _t136B = prim ^0068 (_t1369, _t136A);
  int _t136C = 2;
  int _t136D = prim *0033 (_t136C, iter1359);
  real _t136E = (real)_t136D;
  real _t136F = prim +0017<$[]> (_t136B, _t136E);
  real _t1370 = prim *0034 (_t136F, frxp1368);
  real _t1371 = 0.1e1;
  real _t1372 = prim fmod018A (_t1370, _t1371);
  return _t1372;
}
function real#4 v3rnd1373 (vec3 v1374)
{
  real _t1375 = v1374[0];
  real _t1376 = func urnd135C (_t1375);
  real _t1377 = v1374[1];
  real _t1378 = func urnd135C (_t1377);
  real _t1379 = prim +0017<$[]> (_t1376, _t1378);
  real _t137A = v1374[2];
  real _t137B = func urnd135C (_t137A);
  real _t137C = prim +0017<$[]> (_t1379, _t137B);
  real _t137D = 0.1e1;
  real _t137E = prim fmod018A (_t137C, _t137D);
  return _t137E;
}
function real#2 genID137F (vec3 v1380)
{
  real _t1381 = 0.1e7;
  real _t1382 = func v3rnd1373 (v1380);
  real _t1383 = prim *0034 (_t1381, _t1382);
  real _t1384 = prim floor0189 (_t1383);
  return _t1384;
}
function int#4 pcIter1385 ()
{
  bool _t1386;
  int _t1387 = 0;
  bool _t1388 = prim >007F (pcp07DD, _t1387);
  if _t1388 {
    bool _t1389;
    int _t138A = 0;
    bool _t138B = prim >007F (iter1359, _t138A);
    if _t138B {
      int _t138C = 0;
      int _t138D = prim %00A1 (iter1359, pcp07DD);
      _t1389 = prim ==0082 (_t138C, _t138D);
    } else {
      _t1389 = false;
    }
    _t1386 = _t1389;
  } else {
    _t1386 = false;
  }
  if _t1386 {
    int _t138E = prim /0054 (iter1359, pcp07DD);
    int _t138F = 2;
    int _t1390 = prim %00A1 (_t138E, _t138F);
    int _t1391 = 2;
    int _t1392 = prim *0033 (_t1390, _t1391);
    int _t1393 = 1;
    int _t1394 = prim -0024 (_t1392, _t1393);
    return _t1394;
  } else {
    int _t1395 = 0;
    return _t1395;
  }
}
globalInit {
  int _t07BE = 0;
  int _t07BC = 1;
  int _t07C0 = extractFemItem(NumCell(Mesh), int, meshData07BA);
  int _t07BF = prim -0024 (_t07C0, _t07BC);
  int[] _t07C3 = prim $range01C3 (_t07BE, _t07BF);
  Femdata: MeshCell[] _t07C4 = {};
  foreach _t07C2 in _t07C3 {
    Femdata: MeshCell _t07C5 = loadFem(MeshCell, meshData07BA, _t07C2);
    _t07C4 = prim @0010<Femdata: MeshCell> (_t07C4, _t07C5);
  }
  0cell_meshData07BB = _t07C4;
  space07C6 = loadFem(Space, 0space07C6_intermedateGlobal07C7, meshData07BA);
  data07C8 = loadFem(FemFunc, 0data07C8_intermedateGlobal07C9, space07C6);
  Femdata: Space _t1109 = extractFem(data07C8, Space);
  Femdata: Space _t110A = extractFem(data07C8, Space);
  Femdata: Mesh _t110B = extractFem(_t110A, Mesh);
  field(3)[] _t110C = femField(data07C8,_t110B,field(3)[],refField,findPos07EA );
  Femdata: Space _t110D = extractFem(data07C8, Space);
  Femdata: Mesh _t110E = extractFem(_t110D, Mesh);
  Femdata: Space _t110F = extractFem(data07C8, Space);
  Femdata: Mesh _t1110 = extractFem(_t110F, Mesh);
  Femdata: Space _t1111 = extractFem(data07C8, Space);
  Femdata: Mesh _t1112 = extractFem(_t1111, Mesh);
  field(3)[3] _t1113 = femField(_t110E,_t1112,field(3)[3],InvTransform,findPos07EA );
  F1114 = prim ∘0164<#∞; %3; $[]; %3; $[3]> (_t110C, _t1113);
  simplex1115 = func refcell0836 (meshData07BA);
  int _t12E7;
  int _t12E8 = 2;
  bool _t12E9 = prim ==0082 (_t12E8, fDim07DF);
  if _t12E9 {
    _t12E7 = 6;
  } else {
    int _t12EA;
    int _t12EB = 1;
    bool _t12EC = prim ==0082 (_t12EB, fDim07DF);
    if _t12EC {
      _t12EA = 2;
    } else {
      _t12EA = 0;
    }
    _t12E7 = _t12EA;
  }
  nnmin12ED = _t12E7;
  int _t12EE;
  int _t12EF = 2;
  bool _t12F0 = prim ==0082 (_t12EF, fDim07DF);
  if _t12F0 {
    _t12EE = 8;
  } else {
    int _t12F1;
    int _t12F2 = 1;
    bool _t12F3 = prim ==0082 (_t12F2, fDim07DF);
    if _t12F3 {
      _t12F1 = 3;
    } else {
      _t12F1 = 0;
    }
    _t12EE = _t12F1;
  }
  nnmax12F4 = _t12EE;
  real _t133F = 0.2e1;
  real _t1340 = 0.3e1;
  phiWellRad1341 = prim /0055 (_t133F, _t1340);
  rad1342 = prim /0055 (tipd07CD, phiWellRad1341);
  real _t1353 = 0.1e1;
  int _t1354 = 2;
  int _t1355 = prim *0033 (_t1354, pcp07DD);
  real _t1356 = (real)_t1355;
  real _t1357 = prim /0055 (_t1353, _t1356);
  pchist1358 = prim ^0069 (hist07DC, _t1357);
  iter1359 = 0;
  rpc135A = 0.1e1;
  popLast135B = -1;
}
strand point (vec3 p01396, real hh01397) in 3D {
  output vec3 pos1398;
  output vec3 _pos1399;
  real ID139A;
  real hh139B;
  vec3 step139C;
  bool found13A0;
  int nfs13A1;
  real trav13A2;
  real mvmt13A3;
  real closest13A4;
  int born13A5;
  bool first13A6;
  {
    pos1398 = p01396;
    _pos1399 = pos1398;
    ID139A = func genID137F (p01396);
    hh139B = hh01397;
    real _t139D = 0.e0;
    real _t139E = 0.e0;
    real _t139F = 0.e0;
    step139C = [_t139D, _t139E, _t139F];
    found13A0 = false;
    nfs13A1 = 0;
    trav13A2 = 0.e0;
    mvmt13A3 = 0.1e1;
    closest13A4 = rad1342;
    born13A5 = 0;
    first13A6 = true;
  }
  update
  {
    bool vv13A7 = false;
    if first13A6 {
      bool _t13A8;
      bool _t13A9;
      int _t13AA = 0;
      bool _t13AB = prim >007F (verb07DA, _t13AA);
      if _t13AB {
        _t13A9 = vv13A7;
      } else {
        _t13A9 = false;
      }
      if _t13A9 {
        _t13A8 = true;
      } else {
        int _t13AC = 1;
        _t13A8 = prim >007F (verb07DA, _t13AC);
      }
      if _t13A8 {
        string _t13AD = "(i#";
        string _t13AE = " @ ";
        string _t13AF = "): ";
        print (ID139A, _t13AD, iter1359, _t13AE, pos1398, _t13AF);
        string _t13B0 = " HELLO!\n";
        print (_t13B0);
      }
    }
    bool _t13B1 = func posTest12DD (pos1398);
    bool _t13B2 = prim !00BC (_t13B1);
    if _t13B2 {
      bool _t13B3;
      bool _t13B4;
      int _t13B5 = 0;
      bool _t13B6 = prim >007F (verb07DA, _t13B5);
      if _t13B6 {
        _t13B4 = vv13A7;
      } else {
        _t13B4 = false;
      }
      if _t13B4 {
        _t13B3 = true;
      } else {
        int _t13B7 = 1;
        _t13B3 = prim >007F (verb07DA, _t13B7);
      }
      if _t13B3 {
        string _t13B8 = "(i#";
        string _t13B9 = " @ ";
        string _t13BA = "): ";
        print (ID139A, _t13B8, iter1359, _t13B9, pos1398, _t13BA);
        string _t13BB = "!inside=";
        bool _t13BC = func insideTest1116 (pos1398);
        string _t13BD = " || fStrength=";
        real _t13BE = func fStrength12CC (pos1398);
        string _t13BF = " <= fStrTh=";
        string _t13C0 = " || fMask(pos)=";
        real _t13C1 = func fMask12D7 (pos1398);
        string _t13C2 = " < fMaskTh=";
        string _t13C3 = " || fTest(pos)=";
        bool _t13C4 = func fTest12DA (pos1398);
        string _t13C5 = " ==>DIE\n";
        print (_t13BB, _t13BC, _t13BD, _t13BE, _t13BF, fStrTh07CA, _t13C0, _t13C1, _t13C2, fMaskTh07CB, _t13C3, _t13C4, _t13C5);
      }
      die;
    }
    real _t13C6 = 0.e0;
    bool _t13C7 = prim >0080 (travMax07CF, _t13C6);
    if _t13C7 {
      bool _t13C8 = prim >0080 (trav13A2, travMax07CF);
      if _t13C8 {
        die;
      }
    }
    bool _t13C9 = prim !00BC (found13A0);
    if _t13C9 {
      int _t13CA = 0;
      bool _t13CB = prim >007F (nfsMax07D0, _t13CA);
      if _t13CB {
        bool _t13CC = prim >007F (nfs13A1, nfsMax07D0);
        if _t13CC {
          bool _t13CD;
          bool _t13CE;
          int _t13CF = 0;
          bool _t13D0 = prim >007F (verb07DA, _t13CF);
          if _t13D0 {
            _t13CE = vv13A7;
          } else {
            _t13CE = false;
          }
          if _t13CE {
            _t13CD = true;
          } else {
            int _t13D1 = 1;
            _t13CD = prim >007F (verb07DA, _t13D1);
          }
          if _t13CD {
            string _t13D2 = "(i#";
            string _t13D3 = " @ ";
            string _t13D4 = "): ";
            print (ID139A, _t13D2, iter1359, _t13D3, pos1398, _t13D4);
            string _t13D5 = "nfs=";
            string _t13D6 = " > nfsMax=";
            string _t13D7 = " || trav=";
            string _t13D8 = " > travMax=";
            string _t13D9 = " =>DIE\n";
            print (_t13D5, nfs13A1, _t13D6, nfsMax07D0, _t13D7, trav13A2, _t13D8, travMax07CF, _t13D9);
          }
          die;
        }
      }
      vec3 _t13DA = func fStep128C (pos1398);
      step139C = prim *0036<$[3]> (sfs07DB, _t13DA);
      pos1398 = prim +0017<$[3]> (pos1398, step139C);
      _pos1399 = pos1398;
      real _t13DB = prim |()|00B5<$[3]> (step139C);
      real _t13DC = prim /0055 (_t13DB, tipd07CD);
      mvmt13A3 = prim lerp0096<$[]> (_t13DC, mvmt13A3, hist07DC);
      bool _t13DD = prim >0080 (mvmt13A3, fsEps07D4);
      if _t13DD {
        real _t13DE = prim |()|00B5<$[3]> (step139C);
        real _t13DF = prim /0055 (_t13DE, tipd07CD);
        trav13A2 = prim +0017<$[]> (trav13A2, _t13DF);
        int _t13E0 = 1;
        nfs13A1 = prim +0015 (nfs13A1, _t13E0);
      } else {
        found13A0 = true;
        mvmt13A3 = 0.1e1;
        trav13A2 = 0.e0;
      }
      bool _t13E1;
      bool _t13E2;
      int _t13E3 = 0;
      bool _t13E4 = prim >007F (verb07DA, _t13E3);
      if _t13E4 {
        _t13E2 = vv13A7;
      } else {
        _t13E2 = false;
      }
      if _t13E2 {
        _t13E1 = true;
      } else {
        int _t13E5 = 1;
        _t13E1 = prim >007F (verb07DA, _t13E5);
      }
      if _t13E1 {
        string _t13E6 = "(i#";
        string _t13E7 = " @ ";
        string _t13E8 = "): ";
        print (ID139A, _t13E6, iter1359, _t13E7, pos1398, _t13E8);
        string _t13E9 = "step=";
        string _t13EA = "; mvmt=";
        string _t13EB = " => found=";
        string _t13EC = "\n";
        print (_t13E9, step139C, _t13EA, mvmt13A3, _t13EB, found13A0, _t13EC);
      }
    } else {
      int _t13ED = 0;
      bool _t13EE = prim ==0082 (_t13ED, fDim07DF);
      if _t13EE {
        stabilize;
      }
      vec3 _t13EF = func fStep128C (pos1398);
      step139C = prim *0036<$[3]> (sfs07DB, _t13EF);
      pos1398 = prim +0017<$[3]> (pos1398, step139C);
      _pos1399 = pos1398;
      real _t13F0 = prim |()|00B5<$[3]> (step139C);
      real _t13F1 = prim /0055 (_t13F0, tipd07CD);
      trav13A2 = prim +0017<$[]> (trav13A2, _t13F1);
      real oldE13F2 = 0.e0;
      real _t13F3 = 0.e0;
      real _t13F4 = 0.e0;
      real _t13F5 = 0.e0;
      vec3 force13F6 = [_t13F3, _t13F4, _t13F5];
      int nn13F7 = 0;
      point[] _t13F8 = prim sphere0198<point> (_pos1399, rad1342);
      foreach P13F9 in _t13F8 {
        vec3 _t13FA = P13F9.pos1398;
        vec3 off13FB = prim -0026<$[3]> (_t13FA, pos1398);
        real _t13FC = prim |()|00B5<$[3]> (off13FB);
        real _t13FD = prim /0055 (_t13FC, tipd07CD);
        bool _t13FE = prim <007A (_t13FD, fsEps07D4);
        if _t13FE {
          real _t13FF = P13F9.ID139A;
          bool _t1400 = prim <=007C (ID139A, _t13FF);
          if _t1400 {
            int _t1401 = 0;
            bool _t1402 = prim >007F (verb07DA, _t1401);
            if _t1402 {
              if vv13A7 {
                string _t1403 = " (";
                string _t1404 = " F) on top of ";
                real _t1405 = P13F9.ID139A;
                string _t1406 = "; I have lower ID; bye\n";
                print (_t1403, ID139A, _t1404, _t1405, _t1406);
              }
            }
            die;
          }
        }
        real _t1407 = func enr1343 (off13FB);
        oldE13F2 = prim +0017<$[]> (oldE13F2, _t1407);
        vec3 _t1408 = func frc1348 (off13FB);
        force13F6 = prim +0017<$[3]> (force13F6, _t1408);
        int _t1409 = 1;
        nn13F7 = prim +0015 (nn13F7, _t1409);
      }
      int _t140A = 0;
      bool _t140B = prim ==0082 (_t140A, nn13F7);
      if _t140B {
        bool _t140C;
        int _t140D = func pcIter1385 ();
        int _t140E = 0;
        bool _t140F = prim >007F (_t140D, _t140E);
        if _t140F {
          _t140C = prim <0079 (born13A5, nnmax12F4);
        } else {
          _t140C = false;
        }
        bool _t1410 = prim !00BC (_t140C);
        if _t1410 {
          continue;
        }
        tensor[3,3] _t1411 = func fPerp12BE (pos1398);
        real _t1412 = 0.e0;
        real _t1413 = 0.e0;
        vec3 _t1414 = [tipd07CD, _t1412, _t1413];
        vec3 noff01415 = prim •00CE<$[3,3]; $[3]; $[3]> (_t1411, _t1414);
        tensor[3,3] _t1416 = func fPerp12BE (pos1398);
        real _t1417 = 0.e0;
        real _t1418 = 0.e0;
        vec3 _t1419 = [_t1417, tipd07CD, _t1418];
        vec3 noff1141A = prim •00CE<$[3,3]; $[3]; $[3]> (_t1416, _t1419);
        tensor[3,3] _t141B = func fPerp12BE (pos1398);
        real _t141C = 0.e0;
        real _t141D = 0.e0;
        vec3 _t141E = [_t141C, _t141D, tipd07CD];
        vec3 noff2141F = prim •00CE<$[3,3]; $[3]; $[3]> (_t141B, _t141E);
        vec3 noff1420 = noff01415;
        vec3 _t1421;
        real _t1422 = prim |()|00B5<$[3]> (noff1420);
        real _t1423 = prim |()|00B5<$[3]> (noff1141A);
        bool _t1424 = prim >0080 (_t1422, _t1423);
        if _t1424 {
          _t1421 = noff1420;
        } else {
          _t1421 = noff1141A;
        }
        noff1420 = _t1421;
        vec3 _t1425;
        real _t1426 = prim |()|00B5<$[3]> (noff1420);
        real _t1427 = prim |()|00B5<$[3]> (noff2141F);
        bool _t1428 = prim >0080 (_t1426, _t1427);
        if _t1428 {
          _t1425 = noff1420;
        } else {
          _t1425 = noff2141F;
        }
        noff1420 = _t1425;
        vec3 _t1429 = prim normalize0137<$[3]> (noff1420);
        vec3 _t142A = prim *0036<$[3]> (tipd07CD, _t1429);
        vec3 npos142B = prim +0017<$[3]> (_t142A, pos1398);
        vec3 _t142C = func fStep128C (npos142B);
        vec3 _t142D = prim *0036<$[3]> (sfs07DB, _t142C);
        npos142B = prim +0017<$[3]> (npos142B, _t142D);
        bool _t142E;
        bool _t142F;
        int _t1430 = 0;
        bool _t1431 = prim >007F (verb07DA, _t1430);
        if _t1431 {
          _t142F = vv13A7;
        } else {
          _t142F = false;
        }
        if _t142F {
          _t142E = true;
        } else {
          int _t1432 = 1;
          _t142E = prim >007F (verb07DA, _t1432);
        }
        if _t142E {
          string _t1433 = "(i#";
          string _t1434 = " @ ";
          string _t1435 = "): ";
          print (ID139A, _t1433, iter1359, _t1434, pos1398, _t1435);
          string _t1436 = " 0==nn =>NEW(";
          string _t1437 = ") w/ ID=";
          real _t1438 = func genID137F (npos142B);
          string _t1439 = "\n";
          print (_t1436, npos142B, _t1437, _t1438, _t1439);
        }
        bool _t143A = func posTest12DD (pos1398);
        if _t143A {
          new point (npos142B, hh139B);
          int _t143B = 1;
          born13A5 = prim +0015 (born13A5, _t143B);
        }
        bool _t143C;
        bool _t143D;
        int _t143E = 0;
        bool _t143F = prim >007F (verb07DA, _t143E);
        if _t143F {
          _t143D = vv13A7;
        } else {
          _t143D = false;
        }
        if _t143D {
          _t143C = true;
        } else {
          int _t1440 = 1;
          _t143C = prim >007F (verb07DA, _t1440);
        }
        if _t143C {
          string _t1441 = "(i#";
          string _t1442 = " @ ";
          string _t1443 = "): ";
          print (ID139A, _t1441, iter1359, _t1442, pos1398, _t1443);
          string _t1444 = "nn=0; after birthing mvmt=";
          string _t1445 = "\n";
          print (_t1444, mvmt13A3, _t1445);
        }
        continue;
      }
      tensor[3,3] _t1446 = func fPerp12BE (pos1398);
      tensor[3,3] _t1447 = prim *0036<$[3,3]> (hh139B, _t1446);
      vec3 es1448 = prim •00CE<$[3,3]; $[3]; $[3]> (_t1447, force13F6);
      real _t1449 = prim |()|00B5<$[3]> (es1448);
      bool _t144A = prim >0080 (_t1449, tipd07CD);
      if _t144A {
        real _t144B = prim |()|00B5<$[3]> (es1448);
        real _t144C = prim /0055 (tipd07CD, _t144B);
        hh139B = prim *0034 (hh139B, _t144C);
        real _t144D = prim |()|00B5<$[3]> (es1448);
        real _t144E = prim /0055 (tipd07CD, _t144D);
        es1448 = prim *0038<$[3]> (es1448, _t144E);
      }
      vec3 _t144F = prim +0017<$[3]> (pos1398, es1448);
      vec3 _t1450 = func fStep128C (_t144F);
      vec3 fs1451 = prim *0036<$[3]> (sfs07DB, _t1450);
      real _t1452 = prim |()|00B5<$[3]> (fs1451);
      real _t1453 = prim *0034 (fsEps07D4, tipd07CD);
      real _t1454 = prim |()|00B5<$[3]> (es1448);
      real _t1455 = prim +0017<$[]> (_t1453, _t1454);
      real _t1456 = prim /0055 (_t1452, _t1455);
      real _t1457 = 0.5e0;
      bool _t1458 = prim >0080 (_t1456, _t1457);
      if _t1458 {
        real _t1459 = 0.5e0;
        hh139B = prim *0034 (hh139B, _t1459);
        bool _t145A;
        bool _t145B;
        int _t145C = 0;
        bool _t145D = prim >007F (verb07DA, _t145C);
        if _t145D {
          _t145B = vv13A7;
        } else {
          _t145B = false;
        }
        if _t145B {
          _t145A = true;
        } else {
          int _t145E = 1;
          _t145A = prim >007F (verb07DA, _t145E);
        }
        if _t145A {
          string _t145F = "(i#";
          string _t1460 = " @ ";
          string _t1461 = "): ";
          print (ID139A, _t145F, iter1359, _t1460, pos1398, _t1461);
          string _t1462 = "nn=";
          string _t1463 = "; |fs|/|es|=";
          real _t1464 = prim |()|00B5<$[3]> (fs1451);
          real _t1465 = prim |()|00B5<$[3]> (es1448);
          real _t1466 = prim /0055 (_t1464, _t1465);
          string _t1467 = " > 0.5; trying again with hh=";
          string _t1468 = "; mvmt=";
          string _t1469 = "\n";
          print (_t1462, nn13F7, _t1463, _t1466, _t1467, hh139B, _t1468, mvmt13A3, _t1469);
          string _t146A = "        fs=";
          string _t146B = "\n";
          print (_t146A, fs1451, _t146B);
          string _t146C = "        es=";
          string _t146D = "\n";
          print (_t146C, es1448, _t146D);
        }
        continue;
      }
      vec3 oldpos146E = pos1398;
      vec3 _t146F = prim +0017<$[3]> (fs1451, es1448);
      pos1398 = prim +0017<$[3]> (pos1398, _t146F);
      _pos1399 = pos1398;
      real newE1470 = 0.e0;
      closest13A4 = rad1342;
      real _t1471 = 0.e0;
      real _t1472 = 0.e0;
      real _t1473 = 0.e0;
      vec3 mno1474 = [_t1471, _t1472, _t1473];
      nn13F7 = 0;
      point[] _t1475 = prim sphere0198<point> (_pos1399, rad1342);
      foreach P1476 in _t1475 {
        vec3 _t1477 = P1476.pos1398;
        vec3 off1478 = prim -0026<$[3]> (_t1477, pos1398);
        real _t1479 = func enr1343 (off1478);
        newE1470 = prim +0017<$[]> (newE1470, _t1479);
        real _t147A = prim |()|00B5<$[3]> (off1478);
        closest13A4 = prim min0127 (closest13A4, _t147A);
        mno1474 = prim +0017<$[3]> (mno1474, off1478);
        int _t147B = 1;
        nn13F7 = prim +0015 (nn13F7, _t147B);
      }
      real _t147C = (real)nn13F7;
      mno1474 = prim /0057<$[3]> (mno1474, _t147C);
      bool _t147D;
      bool _t147E;
      int _t147F = 0;
      bool _t1480 = prim >007F (verb07DA, _t147F);
      if _t1480 {
        _t147E = vv13A7;
      } else {
        _t147E = false;
      }
      if _t147E {
        _t147D = true;
      } else {
        int _t1481 = 1;
        _t147D = prim >007F (verb07DA, _t1481);
      }
      if _t147D {
        string _t1482 = "(i#";
        string _t1483 = " @ ";
        string _t1484 = "): ";
        print (ID139A, _t1482, iter1359, _t1483, pos1398, _t1484);
        string _t1485 = "nn=";
        string _t1486 = "; oldE=";
        string _t1487 = " newE=";
        string _t1488 = "\n";
        print (_t1485, nn13F7, _t1486, oldE13F2, _t1487, newE1470, _t1488);
      }
      real _t1489 = prim -0026<$[]> (newE1470, oldE13F2);
      vec3 _t148A = prim -0026<$[3]> (pos1398, oldpos146E);
      vec3 _t148B = prim *0036<$[3]> (gdeTest07D1, _t148A);
      vec3 _t148C = prim unary -008B<$[3]> (force13F6);
      real _t148D = prim •00CE<$[3]; $[3]; $[]> (_t148B, _t148C);
      bool _t148E = prim >0080 (_t1489, _t148D);
      if _t148E {
        hh139B = prim *0034 (hh139B, gdeBack07D2);
        real _t148F = 0.e0;
        bool _t1490 = prim ==0084 (_t148F, hh139B);
        if _t1490 {
          string _t1491 = "(i#";
          string _t1492 = " @ ";
          string _t1493 = "): ";
          print (ID139A, _t1491, iter1359, _t1492, pos1398, _t1493);
          string _t1494 = "backtracked all the way to hh=0\n";
          print (_t1494);
          die;
        }
        bool _t1495;
        bool _t1496;
        int _t1497 = 0;
        bool _t1498 = prim >007F (verb07DA, _t1497);
        if _t1498 {
          _t1496 = vv13A7;
        } else {
          _t1496 = false;
        }
        if _t1496 {
          _t1495 = true;
        } else {
          int _t1499 = 1;
          _t1495 = prim >007F (verb07DA, _t1499);
        }
        if _t1495 {
          string _t149A = "(i#";
          string _t149B = " @ ";
          string _t149C = "): ";
          print (ID139A, _t149A, iter1359, _t149B, pos1398, _t149C);
          string _t149D = "nn=";
          string _t149E = "; oldE=";
          string _t149F = " newE=";
          string _t14A0 = "; backtracking; hh=";
          string _t14A1 = "; mvmt=";
          string _t14A2 = "\n";
          print (_t149D, nn13F7, _t149E, oldE13F2, _t149F, newE1470, _t14A0, hh139B, _t14A1, mvmt13A3, _t14A2);
          string _t14A3 = "      fs=";
          string _t14A4 = "\n";
          print (_t14A3, fs1451, _t14A4);
          string _t14A5 = "      es=";
          string _t14A6 = "\n";
          print (_t14A5, es1448, _t14A6);
          string _t14A7 = "      newE - oldE=";
          real _t14A8 = prim -0026<$[]> (newE1470, oldE13F2);
          string _t14A9 = "\n";
          print (_t14A7, _t14A8, _t14A9);
          string _t14AA = "      force=";
          string _t14AB = "\n";
          print (_t14AA, force13F6, _t14AB);
          string _t14AC = "      dpos=";
          vec3 _t14AD = prim -0026<$[3]> (pos1398, oldpos146E);
          string _t14AE = "\n";
          print (_t14AC, _t14AD, _t14AE);
          string _t14AF = "      0.5*(pos - oldpos).(-force)=";
          real _t14B0 = 0.5e0;
          vec3 _t14B1 = prim -0026<$[3]> (pos1398, oldpos146E);
          vec3 _t14B2 = prim *0036<$[3]> (_t14B0, _t14B1);
          vec3 _t14B3 = prim unary -008B<$[3]> (force13F6);
          real _t14B4 = prim •00CE<$[3]; $[3]; $[]> (_t14B2, _t14B3);
          string _t14B5 = "\n";
          print (_t14AF, _t14B4, _t14B5);
        }
        pos1398 = oldpos146E;
        _pos1399 = pos1398;
        continue;
      }
      hh139B = prim *0034 (hh139B, gdeOppor07D3);
      vec3 _t14B6 = prim +0017<$[3]> (fs1451, es1448);
      step139C = prim +0017<$[3]> (step139C, _t14B6);
      real _t14B7 = prim |()|00B5<$[3]> (step139C);
      real _t14B8 = prim /0055 (_t14B7, tipd07CD);
      trav13A2 = prim +0017<$[]> (trav13A2, _t14B8);
      real _t14B9 = prim |()|00B5<$[3]> (step139C);
      real _t14BA = prim /0055 (_t14B9, tipd07CD);
      mvmt13A3 = prim lerp0096<$[]> (_t14BA, mvmt13A3, hist07DC);
      real _t14BB = prim |()|00B5<$[3]> (step139C);
      real _t14BC = prim /0055 (_t14BB, tipd07CD);
      bool _t14BD = prim <007A (_t14BC, pcmvEps07D8);
      if _t14BD {
        int _t14BE = func pcIter1385 ();
        int _t14BF = 0;
        bool _t14C0 = prim !=0086 (_t14BE, _t14BF);
        if _t14C0 {
          bool _t14C1;
          int _t14C2 = func pcIter1385 ();
          int _t14C3 = 0;
          bool _t14C4 = prim >007F (_t14C2, _t14C3);
          if _t14C4 {
            bool _t14C5;
            real _t14C6 = 0.e0;
            bool _t14C7 = prim <007A (newE1470, _t14C6);
            if _t14C7 {
              bool _t14C8;
              bool _t14C9 = prim <0079 (nn13F7, nnmin12ED);
              if _t14C9 {
                _t14C8 = prim <0079 (born13A5, nnmax12F4);
              } else {
                _t14C8 = false;
              }
              _t14C5 = _t14C8;
            } else {
              _t14C5 = false;
            }
            _t14C1 = _t14C5;
          } else {
            _t14C1 = false;
          }
          if _t14C1 {
            vec3 _t14CA = prim normalize0137<$[3]> (mno1474);
            vec3 _t14CB = prim *0036<$[3]> (tipd07CD, _t14CA);
            vec3 npos14CC = prim -0026<$[3]> (pos1398, _t14CB);
            vec3 _t14CD = func fStep128C (npos14CC);
            vec3 _t14CE = prim *0036<$[3]> (sfs07DB, _t14CD);
            npos14CC = prim +0017<$[3]> (npos14CC, _t14CE);
            vec3 _t14CF = func fStep128C (npos14CC);
            vec3 _t14D0 = prim *0036<$[3]> (sfs07DB, _t14CF);
            npos14CC = prim +0017<$[3]> (npos14CC, _t14D0);
            bool birth14D1 = true;
            int _t14D2 = 2;
            bool _t14D3 = prim ==0082 (fDim07DF, _t14D2);
            if _t14D3 {
              int _t14D4 = 4;
              bool _t14D5 = prim >=007D (nn13F7, _t14D4);
              if _t14D5 {
                real _t14D6 = prim *0034 (tipd07CD, mabd07CE);
                point[] _t14D7 = prim sphere0198<point> (npos14CC, _t14D6);
                foreach P14D8 in _t14D7 {
                  birth14D1 = false;
                }
                if birth14D1 {
                  real _t14D9 = func v3rnd1373 (pos1398);
                  int _t14DA = prim -0024 (nnmin12ED, nn13F7);
                  real _t14DB = (real)_t14DA;
                  real _t14DC = prim $i2r01B6 (nnmin12ED);
                  real _t14DD = prim /0055 (_t14DB, _t14DC);
                  birth14D1 = prim <007A (_t14D9, _t14DD);
                }
              }
            }
            if birth14D1 {
              bool _t14DE = func posTest12DD (npos14CC);
              if _t14DE {
                new point (npos14CC, hh139B);
                int _t14DF = 1;
                born13A5 = prim +0015 (born13A5, _t14DF);
              }
            }
          } else {
            int _t14E0 = func pcIter1385 ();
            int _t14E1 = 0;
            bool _t14E2 = prim <0079 (_t14E0, _t14E1);
            if _t14E2 {
              real _t14E3 = 0.e0;
              bool _t14E4 = prim >0080 (newE1470, _t14E3);
              if _t14E4 {
                bool _t14E5 = prim >007F (nn13F7, nnmax12F4);
                if _t14E5 {
                  real _t14E6 = func v3rnd1373 (pos1398);
                  int _t14E7 = prim -0024 (nn13F7, nnmax12F4);
                  real _t14E8 = (real)_t14E7;
                  real _t14E9 = prim $i2r01B6 (nn13F7);
                  real _t14EA = prim /0055 (_t14E8, _t14E9);
                  bool _t14EB = prim <007A (_t14E6, _t14EA);
                  if _t14EB {
                    int _t14EC = 0;
                    bool _t14ED = prim >007F (verb07DA, _t14EC);
                    if _t14ED {
                      if vv13A7 {
                        string _t14EE = "  (";
                        string _t14EF = " F); v3rnd=";
                        real _t14F0 = func v3rnd1373 (pos1398);
                        string _t14F1 = " < ";
                        int _t14F2 = prim -0024 (nn13F7, nnmax12F4);
                        real _t14F3 = (real)_t14F2;
                        real _t14F4 = prim $i2r01B6 (nn13F7);
                        real _t14F5 = prim /0055 (_t14F3, _t14F4);
                        string _t14F6 = " => die \n";
                        print (_t14EE, ID139A, _t14EF, _t14F0, _t14F1, _t14F5, _t14F6);
                      }
                    }
                    die;
                  }
                }
              }
            }
          }
        }
      }
    }
    first13A6 = false;
  }
}
collection {
  int _t14F7 = 0;
  int _t14F8 = prim length0123<vec3> (ipos07DE);
  int _t14F9 = 1;
  int _t14FA = prim -0024 (_t14F8, _t14F9);
  int[] _t14FB = prim $range01C3 (_t14F7, _t14FA);
  foreach ii14FC in _t14FB {
    vec3 _t14FD = prim $dynsub01C2<vec3> (ipos07DE, ii14FC);
    real _t14FE = 0.1e1;
    new point (_t14FD, _t14FE);
  }
}
update {
  int pop14FF = prim numActive01A2 ();
  int _t1500;
  bool _t1501 = prim !=0086 (pop14FF, popLast135B);
  if _t1501 {
    _t1500 = 1;
  } else {
    _t1500 = 0;
  }
  int pc1502 = _t1500;
  real _t1503 = (real)pc1502;
  rpc135A = prim lerp0096<$[]> (_t1503, rpc135A, pchist1358);
  bool res1504= all { (P1507) => {
      bool _t1508 = P1507.found13A0;
      return _t1508;
    } (P1505, P1505)
  | P1505 in all };
  bool allfound150A = res1504;
  real _t150B = 0.1e3;
  real res150C= sum<real> { (P1510) => {
      real _t1511;
      bool _t1512 = P1510.found13A0;
      if _t1512 {
        _t1511 = 0.1e1;
      } else {
        _t1511 = 0.e0;
      }
      return _t1511;
    } (P150D, P150D)
  | P150D in all };
  int num1514 = prim numStrands01A4 ();
  real rNum1515 = (real)num1514;
  real mean1516 = prim /0055 (res150C, rNum1515);
  real percfound1517 = prim *0034 (_t150B, mean1516);
  real res1518= sum<real> { (P151B) => {
      real _t151C = P151B.closest13A4;
      return _t151C;
    } (P1519, P1519)
  | P1519 in all };
  int num151E = prim numStrands01A4 ();
  real rNum151F = (real)num151E;
  real mean1520 = prim /0055 (res1518, rNum151F);
  real meancl1521 = mean1520;
  real res1522= sum<real> { (P1528, meancl152A) => {
      real _t1529 = P1528.closest13A4;
      real _t152B = prim -0026<$[]> (_t1529, meancl152A);
      int _t152C = 2;
      real _t152D = prim ^0068 (_t152B, _t152C);
      return _t152D;
    } (P1523, P1523, meancl1521)
  | P1523 in all };
  int num152F = prim numStrands01A4 ();
  real rNum1530 = (real)num152F;
  real mean1531 = prim /0055 (res1522, rNum1530);
  real varicl1532 = mean1531;
  real _t1533 = prim sqrt0165 (varicl1532);
  real covcl1534 = prim /0055 (_t1533, meancl1521);
  real res1535= max<real> { (P1538) => {
      real _t1539 = P1538.mvmt13A3;
      return _t1539;
    } (P1536, P1536)
  | P1536 in all };
  real maxmvmt153B = res1535;
  string _t153C = "======= finished iter ";
  string _t153D = " w/ ";
  string _t153E = ")";
  string _t153F = "; %found=";
  string _t1540 = "; mean(hh)=";
  real res1541= sum<real> { (P1544) => {
      real _t1545 = P1544.hh139B;
      return _t1545;
    } (P1542, P1542)
  | P1542 in all };
  int num1547 = prim numStrands01A4 ();
  real rNum1548 = (real)num1547;
  real mean1549 = prim /0055 (res1541, rNum1548);
  string _t154A = "; mean(cl)=";
  string _t154B = "; COV(cl)=";
  string _t154C = "; max(mvmt)=";
  string _t154D = "; pc=";
  string _t154E = "; rpc=";
  string _t154F = "\n";
  print (_t153C, iter1359, _t153D, pop14FF, _t153E, _t153F, percfound1517, _t1540, mean1549, _t154A, meancl1521, _t154B, covcl1534, _t154C, maxmvmt153B, _t154D, pc1502, _t154E, rpc135A, _t154F);
  bool _t1550;
  if allfound150A {
    bool _t1551;
    bool _t1552 = prim <007A (covcl1534, geoEps07D5);
    if _t1552 {
      bool _t1553;
      bool _t1554 = prim <007A (maxmvmt153B, mvmtEps07D6);
      if _t1554 {
        _t1553 = prim <007A (rpc135A, rpcEps07D7);
      } else {
        _t1553 = false;
      }
      _t1551 = _t1553;
    } else {
      _t1551 = false;
    }
    _t1550 = _t1551;
  } else {
    _t1550 = false;
  }
  if _t1550 {
    string _t1555 = "======= Stabilizing ";
    int _t1556 = prim numActive01A2 ();
    string _t1557 = " (iter ";
    string _t1558 = ")";
    string _t1559 = "; COV(cl)=";
    string _t155A = " < ";
    string _t155B = "; max(mvmt)=";
    string _t155C = " < ";
    string _t155D = "; rpc=";
    string _t155E = " < ";
    string _t155F = "\n";
    print (_t1555, _t1556, _t1557, iter1359, _t1558, _t1559, covcl1534, _t155A, geoEps07D5, _t155B, maxmvmt153B, _t155C, mvmtEps07D6, _t155D, rpc135A, _t155E, rpcEps07D7, _t155F);
    stabilize_all;
  } else {
    string _t1560 = "======= Stabilizing ";
    int _t1561 = prim numActive01A2 ();
    string _t1562 = " (iter ";
    string _t1563 = ")";
    string _t1564 = "; COV(cl)=";
    string _t1565 = " > ";
    string _t1566 = "; max(mvmt)=";
    string _t1567 = " > ";
    string _t1568 = "; rpc=";
    string _t1569 = " > ";
    string _t156A = "\n";
    print (_t1560, _t1561, _t1562, iter1359, _t1563, _t1564, covcl1534, _t1565, geoEps07D5, _t1566, maxmvmt153B, _t1567, mvmtEps07D6, _t1568, rpc135A, _t1569, rpcEps07D7, _t156A);
  }
  int _t156B = 1;
  iter1359 = prim +0015 (iter1359, _t156B);
  popLast135B = pop14FF;
}
/* Program end */
/* Simplified Program (after after contraction (1)) start */
properties: GlobalInit,StabilizeAll,GlobalReduce,StrandSets,GlobalUpdate,NewStrands,StrandCommunication,StrandsMayDie,HasInputs,HasGlobals,ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
input FemData:Mesh meshData07BA;
input FemData:Space 0space07C6_intermedateGlobal07C7;
input FemData:FemFunc 0data07C8_intermedateGlobal07C9;
input real fStrTh07CA("Feature strength threshold");
input real fMaskTh07CB("feature mask threshold") = <default>;
input real fBias07CC("Bias in feature strength computing") = <default>;
input real tipd07CD("Target inter-particle distance") = <default>;
input real mabd07CE("Min allowed birth distance (> 0.7351)") = <default>;
input real travMax07CF("Max allowed travel to or on feature") = <default>;
input int nfsMax07D0("Max allowed # feature steps ") = <default>;
input real gdeTest07D1("Scaling in sufficient decrease test") = <default>;
input real gdeBack07D2("How to scale stepsize for backtrack") = <default>;
input real gdeOppor07D3("Opportunistic stepsize increase") = <default>;
input real fsEps07D4("Conv. thresh. on feature step size");
input real geoEps07D5("Conv. thresh. on system geometry") = <default>;
input real mvmtEps07D6("Conv. thresh. on point movement") = <default>;
input real rpcEps07D7("Conv. thresh. on recent pop. changes") = <default>;
input real pcmvEps07D8("Motion limit before PC") = <default>;
input real isoval07D9("Which isosurface to sample") = <default>;
input int verb07DA("Verbosity level") = <default>;
input real sfs07DB("Scaling (<=1 for stability) on fStep") = <default>;
input real hist07DC("How history matters for convergence") = <default>;
input int pcp07DD("periodicity of population control (PC)") = <default>;
input vec3[] ipos07DE("Initial point positions");
input int fDim07DF = <default>;
constants {
  fMaskTh07CB = 0.e0;
  fBias07CC = 0.e0;
  tipd07CD = 0.1e1;
  mabd07CE = 0.75e0;
  travMax07CF = 0.1e2;
  nfsMax07D0 = 20;
  gdeTest07D1 = 0.5e0;
  gdeBack07D2 = 0.5e0;
  gdeOppor07D3 = 0.12e1;
  geoEps07D5 = 0.1e0;
  mvmtEps07D6 = 0.1e-1;
  rpcEps07D7 = 0.1e-1;
  pcmvEps07D8 = 0.3e0;
  isoval07D9 = 0.e0;
  verb07DA = 0;
  sfs07DB = 0.5e0;
  hist07DC = 0.5e0;
  pcp07DD = 5;
  fDim07DF = 2;
}
global int nnmin12ED;
global int nnmax12F4;
global real phiWellRad1341;
global real rad1342;
global real pchist1358;
global int iter1359;
global real rpc135A;
global int popLast135B;
function bool#0 !=07E0 (Femdata: MeshCell cell107E1, Femdata: MeshCell cell107E2)
{
  int _t07E3 = extractFemItem(CellIndex(Mesh), int, cell107E1);
  int _t07E4 = extractFemItem(CellIndex(Mesh), int, cell107E2);
  bool _t07E5 = prim !=0086 (_t07E3, _t07E4);
  return _t07E5;
}
function bool#0 ==07E6 (Femdata: MeshCell cell107E1, Femdata: MeshCell cell107E2)
{
  int _t07E7 = extractFemItem(CellIndex(Mesh), int, cell107E1);
  int _t07E8 = extractFemItem(CellIndex(Mesh), int, cell107E2);
  bool _t07E9 = prim ==0082 (_t07E7, _t07E8);
  return _t07E9;
}
function Femdata: MeshPos#0 findPos07EA (Femdata: Mesh mesh07EB, vec3 pos07EC)
{
  real _t07ED = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t07EE = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t07EF = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  xn07F0 = [_t07ED, _t07EE, _t07EF];
  newtonInt07F1 = 0;
  cellInt07F2 = extractFemItem(StartCell(Mesh), int, mesh07EB);
  int _t07F3 = extractFemItem(NumCell(Mesh), int, mesh07EB);
  int _t07F4 = 1;
  numCell07F5 = prim -0024 (_t07F3, _t07F4);
  yayCells07F6 = extractFemItem2(NearbyCell(File=spat.in)(Mesh), vec3, mesh07EB, pos07EC : vec3);
  foreach cellItter07FA in yayCells07F6 {
    real _t07F7 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    real _t07F8 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    real _t07F9 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    xn07F0 = [_t07F7, _t07F8, _t07F9];
    cellInt07F2 = cellItter07FA;
    field(3)[3] _t07FB = femField(mesh07EB,cellInt07F2,field(3)[3],Transform,);
    field(3)[3,3] _t07FC = prim ∇⊗00AD<#∞; %3; $[]; %3> (_t07FB);
    field(3)[3,3] _t07FD = prim inv015E<#∞; %3> (_t07FC);
    real _t07FE = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    real _t07FF = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    real _t0800 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    vec3 _t0801 = [_t07FE, _t07FF, _t0800];
    A0802 = prim @00A5<#∞; %3; $[3,3]> (_t07FD, _t0801);
    int _t0803 = 0;
    int _t0804 = 16;
    int[] _t0805 = prim $range01C3 (_t0803, _t0804);
    foreach newtonItter0834 in _t0805 {
      field(3)[3] _t0806 = femField(mesh07EB,cellInt07F2,field(3)[3],Transform,);
      field(3)[3] _t0807 = prim -002E<#∞; %3; $[3]> (_t0806, pos07EC);
      field(3)[3] _t0808 = prim •00D4<#∞; %3; $[3,3]; $[3]; $[3]> (A0802, _t0807);
      delta0809 = prim @00A5<#∞; %3; $[3]> (_t0808, xn07F0);
      xn07F0 = prim -0026<$[3]> (xn07F0, delta0809);
      real _t080A = 0.1e-7;
      real _t080B = 0.1e-7;
      real _t080C = prim *0034 (_t080A, _t080B);
      real _t080D = prim •00CE<$[3]; $[3]; $[]> (delta0809, delta0809);
      bool _t080E = prim >=007E (_t080C, _t080D);
      if _t080E {
        real _t080F = 0.1e1;
        real _t0810 = 0.1e-7;
        real _t0811 = prim +0017<$[]> (_t080F, _t0810);
        real _t0812 = 0.1e1;
        real _t0813 = 0.1e1;
        real _t0814 = 0.1e1;
        vec3 _t0815 = [_t0812, _t0813, _t0814];
        real _t0816 = prim •00CE<$[3]; $[3]; $[]> (_t0815, xn07F0);
        bool _t0817 = prim >0080 (_t0811, _t0816);
        real _t0818 = 0.1e-7;
        real _t0819 = 0.1e-7;
        real _t081A = 0.1e-7;
        vec3 _t081B = [_t0818, _t0819, _t081A];
        vec3 _t081C = prim +0017<$[3]> (_t081B, xn07F0);
        real _t081D = _t081C[0];
        real _t081E = -0.e0;
        bool _t081F = prim >0080 (_t081D, _t081E);
        real _t0820 = 0.1e-7;
        real _t0821 = 0.1e-7;
        real _t0822 = 0.1e-7;
        vec3 _t0823 = [_t0820, _t0821, _t0822];
        vec3 _t0824 = prim +0017<$[3]> (_t0823, xn07F0);
        real _t0825 = _t0824[1];
        real _t0826 = -0.e0;
        bool _t0827 = prim >0080 (_t0825, _t0826);
        real _t0828 = 0.1e-7;
        real _t0829 = 0.1e-7;
        real _t082A = 0.1e-7;
        vec3 _t082B = [_t0828, _t0829, _t082A];
        vec3 _t082C = prim +0017<$[3]> (_t082B, xn07F0);
        real _t082D = _t082C[2];
        real _t082E = -0.e0;
        bool _t082F = prim >0080 (_t082D, _t082E);
        bool _t0830 = prim $and01C4 (_t0827, _t082F);
        bool _t0831 = prim $and01C4 (_t081F, _t0830);
        bool _t0832 = prim $and01C4 (_t0817, _t0831);
        if _t0832 {
          Femdata: MeshPos _t0833 = extractFemItemN((mesh07EB, cellInt07F2, xn07F0, pos07EC),AllBuild(MeshPos),);
          return _t0833;
        }
      }
    }
  }
  Femdata: MeshPos _t0835 = extractFemItemN((mesh07EB),InvalidBuild(MeshPos),);
  return _t0835;
}
function Femdata: RefCell#1 refcell0836 (Femdata: Mesh arg00837)
{
  Femdata: RefCell _t0838 = extractFemItem(RefCell(Mesh), Femdata: RefCell, arg00837);
  return _t0838;
}
function Femdata: MeshCell[]#0 cells0839 (Femdata: Mesh arg0083A)
{
  Femdata: MeshCell[] _t083B = extractFemItem(Cells(Mesh), Femdata: MeshCell[], arg0083A);
  return _t083B;
}
function Femdata: MeshCell[]#0 cells083C (Femdata: Mesh arg0083A)
{
  int _t083D = 0;
  int _t083E = extractFemItem(NumCell(Mesh), int, arg0083A);
  int[] _t083F = prim $range01C3 (_t083D, _t083E);
  Femdata: MeshCell[] accum0842 = {};
  foreach i0840 in _t083F {
    Femdata: MeshCell _t0841 = loadFem(MeshCell, arg0083A, i0840);
    accum0842 = prim @0010<Femdata: MeshCell> (accum0842, _t0841);
  }
  return accum0842;
}
function int#0 numCell0843 (Femdata: Mesh arg00837)
{
  int _t0844 = extractFemItem(NumCell(Mesh), int, arg00837);
  return _t0844;
}
function tensor[3,3,3,3]#0 mesh_t_transform_30845 (vec3 pos0846, int cell0847, Femdata: Mesh mesh0848)
{
  field(3)[3] _t0849 = femField(mesh0848,cell0847,field(3)[3],Transform,);
  field(3)[3,3] _t084A = prim ∇⊗00AD<#∞; %3; $[]; %3> (_t0849);
  field(3)[3,3,3] _t084B = prim ∇⊗00AD<#∞; %3; $[3]; %3> (_t084A);
  field(3)[3,3,3,3] _t084C = prim ∇⊗00AD<#∞; %3; $[3,3]; %3> (_t084B);
  tensor[3,3,3,3] _t084D = prim @00A5<#∞; %3; $[3,3,3,3]> (_t084C, pos0846);
  return _t084D;
}
function tensor[3,3,3]#0 mesh_t_transform_2084E (vec3 pos0846, int cell0847, Femdata: Mesh mesh0848)
{
  field(3)[3] _t084F = femField(mesh0848,cell0847,field(3)[3],Transform,);
  field(3)[3,3] _t0850 = prim ∇⊗00AD<#∞; %3; $[]; %3> (_t084F);
  field(3)[3,3,3] _t0851 = prim ∇⊗00AD<#∞; %3; $[3]; %3> (_t0850);
  tensor[3,3,3] _t0852 = prim @00A5<#∞; %3; $[3,3,3]> (_t0851, pos0846);
  return _t0852;
}
function tensor[3,3]#0 mesh_t_transform_10853 (vec3 pos0846, int cell0847, Femdata: Mesh mesh0848)
{
  field(3)[3] _t0854 = femField(mesh0848,cell0847,field(3)[3],Transform,);
  field(3)[3,3] _t0855 = prim ∇⊗00AD<#∞; %3; $[]; %3> (_t0854);
  tensor[3,3] _t0856 = prim @00A5<#∞; %3; $[3,3]> (_t0855, pos0846);
  return _t0856;
}
function vec3#2 mesh_t_transform_00857 (vec3 pos0846, int cell0847, Femdata: Mesh mesh0848)
{
  field(3)[3] _t0858 = femField(mesh0848,cell0847,field(3)[3],Transform,);
  vec3 _t0859 = prim @00A5<#∞; %3; $[3]> (_t0858, pos0846);
  return _t0859;
}
function Femdata: MeshPos#0 _mesh_t_newtonInverse085A (vec3 pos085B, int cellInt085C, Femdata: Mesh mesh085D)
{
  real _t085E = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t085F = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t0860 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  xn0861 = [_t085E, _t085F, _t0860];
  field(3)[3] _t0862 = femField(mesh085D,cellInt085C,field(3)[3],Transform,);
  field(3)[3,3] _t0863 = prim ∇⊗00AD<#∞; %3; $[]; %3> (_t0862);
  field(3)[3,3] _t0864 = prim inv015E<#∞; %3> (_t0863);
  real _t0865 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t0866 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t0867 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  vec3 _t0868 = [_t0865, _t0866, _t0867];
  A0869 = prim @00A5<#∞; %3; $[3,3]> (_t0864, _t0868);
  int _t086A = 0;
  int _t086B = 16;
  int[] _t086C = prim $range01C3 (_t086A, _t086B);
  foreach itter089C in _t086C {
    field(3)[3] _t086D = femField(mesh085D,cellInt085C,field(3)[3],Transform,);
    field(3)[3] _t086E = prim -002E<#∞; %3; $[3]> (_t086D, pos085B);
    field(3)[3] _t086F = prim •00D4<#∞; %3; $[3,3]; $[3]; $[3]> (A0869, _t086E);
    delta0870 = prim @00A5<#∞; %3; $[3]> (_t086F, xn0861);
    xn0861 = prim -0026<$[3]> (xn0861, delta0870);
    real _t0871 = 0.1e-7;
    real _t0872 = 0.1e-7;
    real _t0873 = prim *0034 (_t0871, _t0872);
    real _t0874 = prim •00CE<$[3]; $[3]; $[]> (delta0870, delta0870);
    bool _t0875 = prim >=007E (_t0873, _t0874);
    if _t0875 {
      real _t0876 = 0.1e1;
      real _t0877 = 0.1e-7;
      real _t0878 = prim +0017<$[]> (_t0876, _t0877);
      real _t0879 = 0.1e1;
      real _t087A = 0.1e1;
      real _t087B = 0.1e1;
      vec3 _t087C = [_t0879, _t087A, _t087B];
      real _t087D = prim •00CE<$[3]; $[3]; $[]> (_t087C, xn0861);
      bool _t087E = prim >0080 (_t0878, _t087D);
      real _t087F = 0.1e-7;
      real _t0880 = 0.1e-7;
      real _t0881 = 0.1e-7;
      vec3 _t0882 = [_t087F, _t0880, _t0881];
      vec3 _t0883 = prim +0017<$[3]> (_t0882, xn0861);
      real _t0884 = _t0883[0];
      real _t0885 = -0.e0;
      bool _t0886 = prim >0080 (_t0884, _t0885);
      real _t0887 = 0.1e-7;
      real _t0888 = 0.1e-7;
      real _t0889 = 0.1e-7;
      vec3 _t088A = [_t0887, _t0888, _t0889];
      vec3 _t088B = prim +0017<$[3]> (_t088A, xn0861);
      real _t088C = _t088B[1];
      real _t088D = -0.e0;
      bool _t088E = prim >0080 (_t088C, _t088D);
      real _t088F = 0.1e-7;
      real _t0890 = 0.1e-7;
      real _t0891 = 0.1e-7;
      vec3 _t0892 = [_t088F, _t0890, _t0891];
      vec3 _t0893 = prim +0017<$[3]> (_t0892, xn0861);
      real _t0894 = _t0893[2];
      real _t0895 = -0.e0;
      bool _t0896 = prim >0080 (_t0894, _t0895);
      bool _t0897 = prim $and01C4 (_t088E, _t0896);
      bool _t0898 = prim $and01C4 (_t0886, _t0897);
      bool _t0899 = prim $and01C4 (_t087E, _t0898);
      if _t0899 {
        Femdata: MeshPos _t089A = extractFemItemN((mesh085D, cellInt085C, xn0861, pos085B),AllBuild(MeshPos),);
        return _t089A;
      } else {
        Femdata: MeshPos _t089B = extractFemItemN((mesh085D),InvalidBuild(MeshPos),);
        return _t089B;
      }
    }
  }
  Femdata: MeshPos _t089D = extractFemItemN((mesh085D),InvalidBuild(MeshPos),);
  return _t089D;
}
function Femdata: MeshPos#0 _mesh_pos_mesh_t_build_world_pos089E (Femdata: MeshPos pos089F)
{
  bool _t08A0 = extractFemItem(WorldTest(MeshPos), bool, pos089F);
  if _t08A0 {
    vec3 _t08A1 = extractFemItem(RefPos(MeshPos), vec3, pos089F);
    int _t08A2 = extractFemItem(CellIndex(MeshPos), int, pos089F);
    Femdata: Mesh _t08A3 = extractFem(pos089F, Mesh);
    vec3 _t08A4 = func mesh_t_transform_00857 (_t08A1, _t08A2, _t08A3);
    Femdata: MeshPos _t08A5 = extractFemItemN((pos089F, _t08A4),NewWorld(MeshPos),);
    return _t08A5;
  } else {
    return pos089F;
  }
}
function vec3#0 worldPos08A6 (Femdata: MeshPos pos089F)
{
  vec3 _t08A7 = extractFemItem(RefPos(MeshPos), vec3, pos089F);
  int _t08A8 = extractFemItem(CellIndex(MeshPos), int, pos089F);
  Femdata: Mesh _t08A9 = extractFem(pos089F, Mesh);
  vec3 _t08AA = func mesh_t_transform_00857 (_t08A7, _t08A8, _t08A9);
  return _t08AA;
}
function Femdata: MeshPos#0 $exitPos08AB (Femdata: Mesh mesh08AC, int cellId08AD, vec3 refPos08AE, vec3 dPos08AF, real[2] time08B0)
{
  int _t08B1 = -1;
  real _t08B2 = time08B0[1];
  int _t08B3 = prim $r2i01B7 (_t08B2);
  int[2] _t08B5 = func nextCell408B4 (_t08B3, cellId08AD, mesh08AC);
  int _t08B6 = 0;
  int _t08B7 = prim $sub01C0<int; %2> (_t08B5, _t08B6);
  bool _t08B8 = prim !=0086 (_t08B1, _t08B7);
  if _t08B8 {
    real _t08B9 = time08B0[1];
    int _t08BA = prim $r2i01B7 (_t08B9);
    int[2] _t08BB = func nextCell408B4 (_t08BA, cellId08AD, mesh08AC);
    int _t08BC = 0;
    int _t08BD = prim $sub01C0<int; %2> (_t08BB, _t08BC);
    real _t08BE = 0.1e1;
    real _t08BF = 0.e0;
    real _t08C0 = 0.e0;
    real _t08C1 = 0.e0;
    vec4 _t08C2 = [_t08BE, _t08BF, _t08C0, _t08C1];
    real _t08C3 = 0.e0;
    real _t08C4 = 0.1e1;
    real _t08C5 = 0.e0;
    real _t08C6 = 0.e0;
    vec4 _t08C7 = [_t08C3, _t08C4, _t08C5, _t08C6];
    real _t08C8 = 0.e0;
    real _t08C9 = 0.e0;
    real _t08CA = 0.1e1;
    real _t08CB = 0.e0;
    vec4 _t08CC = [_t08C8, _t08C9, _t08CA, _t08CB];
    real _t08CD = 0.971445146547e-16;
    real _t08CE = 0.e0;
    real _t08CF = 0.e0;
    real _t08D0 = 0.1e1;
    vec4 _t08D1 = [_t08CD, _t08CE, _t08CF, _t08D0];
    tensor[4,4] _t08D2 = [_t08C2, _t08C7, _t08CC, _t08D1];
    real _t08D3 = 0.57735026919e0;
    real _t08D4 = 0.57735026919e0;
    real _t08D5 = 0.57735026919e0;
    real _t08D6 = -0.57735026919e0;
    vec4 _t08D7 = [_t08D3, _t08D4, _t08D5, _t08D6];
    real _t08D8 = -0.333333333333e0;
    real _t08D9 = 0.666666666667e0;
    real _t08DA = -0.333333333333e0;
    real _t08DB = 0.333333333333e0;
    vec4 _t08DC = [_t08D8, _t08D9, _t08DA, _t08DB];
    real _t08DD = -0.333333333333e0;
    real _t08DE = -0.333333333333e0;
    real _t08DF = 0.666666666667e0;
    real _t08E0 = 0.333333333333e0;
    vec4 _t08E1 = [_t08DD, _t08DE, _t08DF, _t08E0];
    real _t08E2 = 0.971445146547e-16;
    real _t08E3 = 0.e0;
    real _t08E4 = 0.e0;
    real _t08E5 = 0.1e1;
    vec4 _t08E6 = [_t08E2, _t08E3, _t08E4, _t08E5];
    tensor[4,4] _t08E7 = [_t08D7, _t08DC, _t08E1, _t08E6];
    real _t08E8 = -0.333333333333e0;
    real _t08E9 = 0.666666666667e0;
    real _t08EA = -0.333333333333e0;
    real _t08EB = 0.333333333333e0;
    vec4 _t08EC = [_t08E8, _t08E9, _t08EA, _t08EB];
    real _t08ED = -0.57735026919e0;
    real _t08EE = -0.57735026919e0;
    real _t08EF = -0.57735026919e0;
    real _t08F0 = 0.57735026919e0;
    vec4 _t08F1 = [_t08ED, _t08EE, _t08EF, _t08F0];
    real _t08F2 = -0.333333333333e0;
    real _t08F3 = -0.333333333333e0;
    real _t08F4 = 0.666666666667e0;
    real _t08F5 = 0.333333333333e0;
    vec4 _t08F6 = [_t08F2, _t08F3, _t08F4, _t08F5];
    real _t08F7 = 0.971445146547e-16;
    real _t08F8 = 0.e0;
    real _t08F9 = 0.e0;
    real _t08FA = 0.1e1;
    vec4 _t08FB = [_t08F7, _t08F8, _t08F9, _t08FA];
    tensor[4,4] _t08FC = [_t08EC, _t08F1, _t08F6, _t08FB];
    real _t08FD = -0.333333333333e0;
    real _t08FE = 0.666666666667e0;
    real _t08FF = -0.333333333333e0;
    real _t0900 = 0.333333333333e0;
    vec4 _t0901 = [_t08FD, _t08FE, _t08FF, _t0900];
    real _t0902 = -0.333333333333e0;
    real _t0903 = -0.333333333333e0;
    real _t0904 = 0.666666666667e0;
    real _t0905 = 0.333333333333e0;
    vec4 _t0906 = [_t0902, _t0903, _t0904, _t0905];
    real _t0907 = 0.57735026919e0;
    real _t0908 = 0.57735026919e0;
    real _t0909 = 0.57735026919e0;
    real _t090A = -0.57735026919e0;
    vec4 _t090B = [_t0907, _t0908, _t0909, _t090A];
    real _t090C = 0.971445146547e-16;
    real _t090D = 0.e0;
    real _t090E = 0.e0;
    real _t090F = 0.1e1;
    vec4 _t0910 = [_t090C, _t090D, _t090E, _t090F];
    tensor[4,4] _t0911 = [_t0901, _t0906, _t090B, _t0910];
    tensor[4,4][4] _t0912 = {_t08D2, _t08E7, _t08FC, _t0911};
    real _t0913 = 0.57735026919e0;
    real _t0914 = -0.1e1;
    real _t0915 = -0.1e1;
    real _t0916 = 0.1e1;
    vec4 _t0917 = [_t0913, _t0914, _t0915, _t0916];
    real _t0918 = 0.57735026919e0;
    real _t0919 = 0.1e1;
    real _t091A = 0.e0;
    real _t091B = 0.e0;
    vec4 _t091C = [_t0918, _t0919, _t091A, _t091B];
    real _t091D = 0.57735026919e0;
    real _t091E = 0.e0;
    real _t091F = 0.1e1;
    real _t0920 = 0.e0;
    vec4 _t0921 = [_t091D, _t091E, _t091F, _t0920];
    real _t0922 = 0.e0;
    real _t0923 = 0.e0;
    real _t0924 = 0.e0;
    real _t0925 = 0.1e1;
    vec4 _t0926 = [_t0922, _t0923, _t0924, _t0925];
    tensor[4,4] _t0927 = [_t0917, _t091C, _t0921, _t0926];
    real _t0928 = 0.1e1;
    real _t0929 = 0.e0;
    real _t092A = 0.e0;
    real _t092B = 0.e0;
    vec4 _t092C = [_t0928, _t0929, _t092A, _t092B];
    real _t092D = 0.e0;
    real _t092E = 0.1e1;
    real _t092F = 0.e0;
    real _t0930 = 0.e0;
    vec4 _t0931 = [_t092D, _t092E, _t092F, _t0930];
    real _t0932 = 0.e0;
    real _t0933 = 0.e0;
    real _t0934 = 0.1e1;
    real _t0935 = 0.e0;
    vec4 _t0936 = [_t0932, _t0933, _t0934, _t0935];
    real _t0937 = 0.e0;
    real _t0938 = 0.e0;
    real _t0939 = 0.e0;
    real _t093A = 0.1e1;
    vec4 _t093B = [_t0937, _t0938, _t0939, _t093A];
    tensor[4,4] _t093C = [_t092C, _t0931, _t0936, _t093B];
    real _t093D = 0.e0;
    real _t093E = 0.1e1;
    real _t093F = 0.e0;
    real _t0940 = 0.e0;
    vec4 _t0941 = [_t093D, _t093E, _t093F, _t0940];
    real _t0942 = -0.1e1;
    real _t0943 = 0.e0;
    real _t0944 = 0.e0;
    real _t0945 = 0.e0;
    vec4 _t0946 = [_t0942, _t0943, _t0944, _t0945];
    real _t0947 = 0.e0;
    real _t0948 = 0.e0;
    real _t0949 = 0.1e1;
    real _t094A = 0.e0;
    vec4 _t094B = [_t0947, _t0948, _t0949, _t094A];
    real _t094C = 0.e0;
    real _t094D = 0.e0;
    real _t094E = 0.e0;
    real _t094F = 0.1e1;
    vec4 _t0950 = [_t094C, _t094D, _t094E, _t094F];
    tensor[4,4] _t0951 = [_t0941, _t0946, _t094B, _t0950];
    real _t0952 = 0.e0;
    real _t0953 = 0.1e1;
    real _t0954 = 0.e0;
    real _t0955 = 0.e0;
    vec4 _t0956 = [_t0952, _t0953, _t0954, _t0955];
    real _t0957 = 0.e0;
    real _t0958 = 0.e0;
    real _t0959 = 0.1e1;
    real _t095A = 0.e0;
    vec4 _t095B = [_t0957, _t0958, _t0959, _t095A];
    real _t095C = 0.1e1;
    real _t095D = 0.e0;
    real _t095E = 0.e0;
    real _t095F = 0.e0;
    vec4 _t0960 = [_t095C, _t095D, _t095E, _t095F];
    real _t0961 = 0.e0;
    real _t0962 = 0.e0;
    real _t0963 = 0.e0;
    real _t0964 = 0.1e1;
    vec4 _t0965 = [_t0961, _t0962, _t0963, _t0964];
    tensor[4,4] _t0966 = [_t0956, _t095B, _t0960, _t0965];
    tensor[4,4][4] _t0967 = {_t0927, _t093C, _t0951, _t0966};
    real _t0968 = -0.1e1;
    real _t0969 = -0.57735026919e0;
    real _t096A = -0.1e1;
    real _t096B = 0.1e1;
    vec4 _t096C = [_t0968, _t0969, _t096A, _t096B];
    real _t096D = 0.1e1;
    real _t096E = -0.57735026919e0;
    real _t096F = 0.e0;
    real _t0970 = 0.e0;
    vec4 _t0971 = [_t096D, _t096E, _t096F, _t0970];
    real _t0972 = 0.e0;
    real _t0973 = -0.57735026919e0;
    real _t0974 = 0.1e1;
    real _t0975 = 0.e0;
    vec4 _t0976 = [_t0972, _t0973, _t0974, _t0975];
    real _t0977 = 0.e0;
    real _t0978 = 0.e0;
    real _t0979 = 0.e0;
    real _t097A = 0.1e1;
    vec4 _t097B = [_t0977, _t0978, _t0979, _t097A];
    tensor[4,4] _t097C = [_t096C, _t0971, _t0976, _t097B];
    real _t097D = 0.e0;
    real _t097E = -0.1e1;
    real _t097F = 0.e0;
    real _t0980 = 0.e0;
    vec4 _t0981 = [_t097D, _t097E, _t097F, _t0980];
    real _t0982 = 0.1e1;
    real _t0983 = 0.e0;
    real _t0984 = 0.e0;
    real _t0985 = 0.e0;
    vec4 _t0986 = [_t0982, _t0983, _t0984, _t0985];
    real _t0987 = 0.e0;
    real _t0988 = 0.e0;
    real _t0989 = 0.1e1;
    real _t098A = 0.e0;
    vec4 _t098B = [_t0987, _t0988, _t0989, _t098A];
    real _t098C = 0.e0;
    real _t098D = 0.e0;
    real _t098E = 0.e0;
    real _t098F = 0.1e1;
    vec4 _t0990 = [_t098C, _t098D, _t098E, _t098F];
    tensor[4,4] _t0991 = [_t0981, _t0986, _t098B, _t0990];
    real _t0992 = 0.1e1;
    real _t0993 = 0.e0;
    real _t0994 = 0.e0;
    real _t0995 = 0.e0;
    vec4 _t0996 = [_t0992, _t0993, _t0994, _t0995];
    real _t0997 = 0.e0;
    real _t0998 = 0.1e1;
    real _t0999 = 0.e0;
    real _t099A = 0.e0;
    vec4 _t099B = [_t0997, _t0998, _t0999, _t099A];
    real _t099C = 0.e0;
    real _t099D = 0.e0;
    real _t099E = 0.1e1;
    real _t099F = 0.e0;
    vec4 _t09A0 = [_t099C, _t099D, _t099E, _t099F];
    real _t09A1 = 0.e0;
    real _t09A2 = 0.e0;
    real _t09A3 = 0.e0;
    real _t09A4 = 0.1e1;
    vec4 _t09A5 = [_t09A1, _t09A2, _t09A3, _t09A4];
    tensor[4,4] _t09A6 = [_t0996, _t099B, _t09A0, _t09A5];
    real _t09A7 = 0.1e1;
    real _t09A8 = 0.e0;
    real _t09A9 = 0.e0;
    real _t09AA = 0.e0;
    vec4 _t09AB = [_t09A7, _t09A8, _t09A9, _t09AA];
    real _t09AC = 0.e0;
    real _t09AD = 0.e0;
    real _t09AE = 0.1e1;
    real _t09AF = 0.e0;
    vec4 _t09B0 = [_t09AC, _t09AD, _t09AE, _t09AF];
    real _t09B1 = 0.e0;
    real _t09B2 = -0.1e1;
    real _t09B3 = 0.e0;
    real _t09B4 = 0.e0;
    vec4 _t09B5 = [_t09B1, _t09B2, _t09B3, _t09B4];
    real _t09B6 = 0.e0;
    real _t09B7 = 0.e0;
    real _t09B8 = 0.e0;
    real _t09B9 = 0.1e1;
    vec4 _t09BA = [_t09B6, _t09B7, _t09B8, _t09B9];
    tensor[4,4] _t09BB = [_t09AB, _t09B0, _t09B5, _t09BA];
    tensor[4,4][4] _t09BC = {_t097C, _t0991, _t09A6, _t09BB};
    real _t09BD = -0.1e1;
    real _t09BE = -0.1e1;
    real _t09BF = 0.57735026919e0;
    real _t09C0 = 0.1e1;
    vec4 _t09C1 = [_t09BD, _t09BE, _t09BF, _t09C0];
    real _t09C2 = 0.1e1;
    real _t09C3 = 0.e0;
    real _t09C4 = 0.57735026919e0;
    real _t09C5 = 0.e0;
    vec4 _t09C6 = [_t09C2, _t09C3, _t09C4, _t09C5];
    real _t09C7 = 0.e0;
    real _t09C8 = 0.1e1;
    real _t09C9 = 0.57735026919e0;
    real _t09CA = 0.e0;
    vec4 _t09CB = [_t09C7, _t09C8, _t09C9, _t09CA];
    real _t09CC = 0.e0;
    real _t09CD = 0.e0;
    real _t09CE = 0.e0;
    real _t09CF = 0.1e1;
    vec4 _t09D0 = [_t09CC, _t09CD, _t09CE, _t09CF];
    tensor[4,4] _t09D1 = [_t09C1, _t09C6, _t09CB, _t09D0];
    real _t09D2 = 0.e0;
    real _t09D3 = 0.e0;
    real _t09D4 = 0.1e1;
    real _t09D5 = 0.e0;
    vec4 _t09D6 = [_t09D2, _t09D3, _t09D4, _t09D5];
    real _t09D7 = 0.1e1;
    real _t09D8 = 0.e0;
    real _t09D9 = 0.e0;
    real _t09DA = 0.e0;
    vec4 _t09DB = [_t09D7, _t09D8, _t09D9, _t09DA];
    real _t09DC = 0.e0;
    real _t09DD = 0.1e1;
    real _t09DE = 0.e0;
    real _t09DF = 0.e0;
    vec4 _t09E0 = [_t09DC, _t09DD, _t09DE, _t09DF];
    real _t09E1 = 0.e0;
    real _t09E2 = 0.e0;
    real _t09E3 = 0.e0;
    real _t09E4 = 0.1e1;
    vec4 _t09E5 = [_t09E1, _t09E2, _t09E3, _t09E4];
    tensor[4,4] _t09E6 = [_t09D6, _t09DB, _t09E0, _t09E5];
    real _t09E7 = 0.1e1;
    real _t09E8 = 0.e0;
    real _t09E9 = 0.e0;
    real _t09EA = 0.e0;
    vec4 _t09EB = [_t09E7, _t09E8, _t09E9, _t09EA];
    real _t09EC = 0.e0;
    real _t09ED = 0.e0;
    real _t09EE = -0.1e1;
    real _t09EF = 0.e0;
    vec4 _t09F0 = [_t09EC, _t09ED, _t09EE, _t09EF];
    real _t09F1 = 0.e0;
    real _t09F2 = 0.1e1;
    real _t09F3 = 0.e0;
    real _t09F4 = 0.e0;
    vec4 _t09F5 = [_t09F1, _t09F2, _t09F3, _t09F4];
    real _t09F6 = 0.e0;
    real _t09F7 = 0.e0;
    real _t09F8 = 0.e0;
    real _t09F9 = 0.1e1;
    vec4 _t09FA = [_t09F6, _t09F7, _t09F8, _t09F9];
    tensor[4,4] _t09FB = [_t09EB, _t09F0, _t09F5, _t09FA];
    real _t09FC = 0.1e1;
    real _t09FD = 0.e0;
    real _t09FE = 0.e0;
    real _t09FF = 0.e0;
    vec4 _t0A00 = [_t09FC, _t09FD, _t09FE, _t09FF];
    real _t0A01 = 0.e0;
    real _t0A02 = 0.1e1;
    real _t0A03 = 0.e0;
    real _t0A04 = 0.e0;
    vec4 _t0A05 = [_t0A01, _t0A02, _t0A03, _t0A04];
    real _t0A06 = 0.e0;
    real _t0A07 = 0.e0;
    real _t0A08 = 0.1e1;
    real _t0A09 = 0.e0;
    vec4 _t0A0A = [_t0A06, _t0A07, _t0A08, _t0A09];
    real _t0A0B = 0.e0;
    real _t0A0C = 0.e0;
    real _t0A0D = 0.e0;
    real _t0A0E = 0.1e1;
    vec4 _t0A0F = [_t0A0B, _t0A0C, _t0A0D, _t0A0E];
    tensor[4,4] _t0A10 = [_t0A00, _t0A05, _t0A0A, _t0A0F];
    tensor[4,4][4] _t0A11 = {_t09D1, _t09E6, _t09FB, _t0A10};
    tensor[4,4][4][4] _t0A12 = {_t0912, _t0967, _t09BC, _t0A11};
    real _t0A13 = time08B0[1];
    int _t0A14 = prim $r2i01B7 (_t0A13);
    tensor[4,4][4] _t0A15 = prim $sub01C0<tensor[4,4][4]; %4> (_t0A12, _t0A14);
    real _t0A16 = time08B0[1];
    int _t0A17 = prim $r2i01B7 (_t0A16);
    int[2] _t0A18 = func nextCell408B4 (_t0A17, cellId08AD, mesh08AC);
    int _t0A19 = 1;
    int _t0A1A = prim $sub01C0<int; %2> (_t0A18, _t0A19);
    tensor[4,4] _t0A1B = prim $sub01C0<tensor[4,4]; %4> (_t0A15, _t0A1A);
    real _t0A1C = time08B0[0];
    vec3 _t0A1D = prim *0036<$[3]> (_t0A1C, dPos08AF);
    vec3 _t0A1E = prim +0017<$[3]> (_t0A1D, refPos08AE);
    real _t0A1F = _t0A1E[0];
    real _t0A20 = time08B0[0];
    vec3 _t0A21 = prim *0036<$[3]> (_t0A20, dPos08AF);
    vec3 _t0A22 = prim +0017<$[3]> (_t0A21, refPos08AE);
    real _t0A23 = _t0A22[1];
    real _t0A24 = time08B0[0];
    vec3 _t0A25 = prim *0036<$[3]> (_t0A24, dPos08AF);
    vec3 _t0A26 = prim +0017<$[3]> (_t0A25, refPos08AE);
    real _t0A27 = _t0A26[2];
    real _t0A28 = 0.1e1;
    vec4 _t0A29 = [_t0A1F, _t0A23, _t0A27, _t0A28];
    vec4 _t0A2A = prim •00CE<$[4,4]; $[4]; $[4]> (_t0A1B, _t0A29);
    real _t0A2B = _t0A2A[0];
    real _t0A2C = 0.1e1;
    real _t0A2D = 0.e0;
    real _t0A2E = 0.e0;
    real _t0A2F = 0.e0;
    vec4 _t0A30 = [_t0A2C, _t0A2D, _t0A2E, _t0A2F];
    real _t0A31 = 0.e0;
    real _t0A32 = 0.1e1;
    real _t0A33 = 0.e0;
    real _t0A34 = 0.e0;
    vec4 _t0A35 = [_t0A31, _t0A32, _t0A33, _t0A34];
    real _t0A36 = 0.e0;
    real _t0A37 = 0.e0;
    real _t0A38 = 0.1e1;
    real _t0A39 = 0.e0;
    vec4 _t0A3A = [_t0A36, _t0A37, _t0A38, _t0A39];
    real _t0A3B = 0.971445146547e-16;
    real _t0A3C = 0.e0;
    real _t0A3D = 0.e0;
    real _t0A3E = 0.1e1;
    vec4 _t0A3F = [_t0A3B, _t0A3C, _t0A3D, _t0A3E];
    tensor[4,4] _t0A40 = [_t0A30, _t0A35, _t0A3A, _t0A3F];
    real _t0A41 = 0.57735026919e0;
    real _t0A42 = 0.57735026919e0;
    real _t0A43 = 0.57735026919e0;
    real _t0A44 = -0.57735026919e0;
    vec4 _t0A45 = [_t0A41, _t0A42, _t0A43, _t0A44];
    real _t0A46 = -0.333333333333e0;
    real _t0A47 = 0.666666666667e0;
    real _t0A48 = -0.333333333333e0;
    real _t0A49 = 0.333333333333e0;
    vec4 _t0A4A = [_t0A46, _t0A47, _t0A48, _t0A49];
    real _t0A4B = -0.333333333333e0;
    real _t0A4C = -0.333333333333e0;
    real _t0A4D = 0.666666666667e0;
    real _t0A4E = 0.333333333333e0;
    vec4 _t0A4F = [_t0A4B, _t0A4C, _t0A4D, _t0A4E];
    real _t0A50 = 0.971445146547e-16;
    real _t0A51 = 0.e0;
    real _t0A52 = 0.e0;
    real _t0A53 = 0.1e1;
    vec4 _t0A54 = [_t0A50, _t0A51, _t0A52, _t0A53];
    tensor[4,4] _t0A55 = [_t0A45, _t0A4A, _t0A4F, _t0A54];
    real _t0A56 = -0.333333333333e0;
    real _t0A57 = 0.666666666667e0;
    real _t0A58 = -0.333333333333e0;
    real _t0A59 = 0.333333333333e0;
    vec4 _t0A5A = [_t0A56, _t0A57, _t0A58, _t0A59];
    real _t0A5B = -0.57735026919e0;
    real _t0A5C = -0.57735026919e0;
    real _t0A5D = -0.57735026919e0;
    real _t0A5E = 0.57735026919e0;
    vec4 _t0A5F = [_t0A5B, _t0A5C, _t0A5D, _t0A5E];
    real _t0A60 = -0.333333333333e0;
    real _t0A61 = -0.333333333333e0;
    real _t0A62 = 0.666666666667e0;
    real _t0A63 = 0.333333333333e0;
    vec4 _t0A64 = [_t0A60, _t0A61, _t0A62, _t0A63];
    real _t0A65 = 0.971445146547e-16;
    real _t0A66 = 0.e0;
    real _t0A67 = 0.e0;
    real _t0A68 = 0.1e1;
    vec4 _t0A69 = [_t0A65, _t0A66, _t0A67, _t0A68];
    tensor[4,4] _t0A6A = [_t0A5A, _t0A5F, _t0A64, _t0A69];
    real _t0A6B = -0.333333333333e0;
    real _t0A6C = 0.666666666667e0;
    real _t0A6D = -0.333333333333e0;
    real _t0A6E = 0.333333333333e0;
    vec4 _t0A6F = [_t0A6B, _t0A6C, _t0A6D, _t0A6E];
    real _t0A70 = -0.333333333333e0;
    real _t0A71 = -0.333333333333e0;
    real _t0A72 = 0.666666666667e0;
    real _t0A73 = 0.333333333333e0;
    vec4 _t0A74 = [_t0A70, _t0A71, _t0A72, _t0A73];
    real _t0A75 = 0.57735026919e0;
    real _t0A76 = 0.57735026919e0;
    real _t0A77 = 0.57735026919e0;
    real _t0A78 = -0.57735026919e0;
    vec4 _t0A79 = [_t0A75, _t0A76, _t0A77, _t0A78];
    real _t0A7A = 0.971445146547e-16;
    real _t0A7B = 0.e0;
    real _t0A7C = 0.e0;
    real _t0A7D = 0.1e1;
    vec4 _t0A7E = [_t0A7A, _t0A7B, _t0A7C, _t0A7D];
    tensor[4,4] _t0A7F = [_t0A6F, _t0A74, _t0A79, _t0A7E];
    tensor[4,4][4] _t0A80 = {_t0A40, _t0A55, _t0A6A, _t0A7F};
    real _t0A81 = 0.57735026919e0;
    real _t0A82 = -0.1e1;
    real _t0A83 = -0.1e1;
    real _t0A84 = 0.1e1;
    vec4 _t0A85 = [_t0A81, _t0A82, _t0A83, _t0A84];
    real _t0A86 = 0.57735026919e0;
    real _t0A87 = 0.1e1;
    real _t0A88 = 0.e0;
    real _t0A89 = 0.e0;
    vec4 _t0A8A = [_t0A86, _t0A87, _t0A88, _t0A89];
    real _t0A8B = 0.57735026919e0;
    real _t0A8C = 0.e0;
    real _t0A8D = 0.1e1;
    real _t0A8E = 0.e0;
    vec4 _t0A8F = [_t0A8B, _t0A8C, _t0A8D, _t0A8E];
    real _t0A90 = 0.e0;
    real _t0A91 = 0.e0;
    real _t0A92 = 0.e0;
    real _t0A93 = 0.1e1;
    vec4 _t0A94 = [_t0A90, _t0A91, _t0A92, _t0A93];
    tensor[4,4] _t0A95 = [_t0A85, _t0A8A, _t0A8F, _t0A94];
    real _t0A96 = 0.1e1;
    real _t0A97 = 0.e0;
    real _t0A98 = 0.e0;
    real _t0A99 = 0.e0;
    vec4 _t0A9A = [_t0A96, _t0A97, _t0A98, _t0A99];
    real _t0A9B = 0.e0;
    real _t0A9C = 0.1e1;
    real _t0A9D = 0.e0;
    real _t0A9E = 0.e0;
    vec4 _t0A9F = [_t0A9B, _t0A9C, _t0A9D, _t0A9E];
    real _t0AA0 = 0.e0;
    real _t0AA1 = 0.e0;
    real _t0AA2 = 0.1e1;
    real _t0AA3 = 0.e0;
    vec4 _t0AA4 = [_t0AA0, _t0AA1, _t0AA2, _t0AA3];
    real _t0AA5 = 0.e0;
    real _t0AA6 = 0.e0;
    real _t0AA7 = 0.e0;
    real _t0AA8 = 0.1e1;
    vec4 _t0AA9 = [_t0AA5, _t0AA6, _t0AA7, _t0AA8];
    tensor[4,4] _t0AAA = [_t0A9A, _t0A9F, _t0AA4, _t0AA9];
    real _t0AAB = 0.e0;
    real _t0AAC = 0.1e1;
    real _t0AAD = 0.e0;
    real _t0AAE = 0.e0;
    vec4 _t0AAF = [_t0AAB, _t0AAC, _t0AAD, _t0AAE];
    real _t0AB0 = -0.1e1;
    real _t0AB1 = 0.e0;
    real _t0AB2 = 0.e0;
    real _t0AB3 = 0.e0;
    vec4 _t0AB4 = [_t0AB0, _t0AB1, _t0AB2, _t0AB3];
    real _t0AB5 = 0.e0;
    real _t0AB6 = 0.e0;
    real _t0AB7 = 0.1e1;
    real _t0AB8 = 0.e0;
    vec4 _t0AB9 = [_t0AB5, _t0AB6, _t0AB7, _t0AB8];
    real _t0ABA = 0.e0;
    real _t0ABB = 0.e0;
    real _t0ABC = 0.e0;
    real _t0ABD = 0.1e1;
    vec4 _t0ABE = [_t0ABA, _t0ABB, _t0ABC, _t0ABD];
    tensor[4,4] _t0ABF = [_t0AAF, _t0AB4, _t0AB9, _t0ABE];
    real _t0AC0 = 0.e0;
    real _t0AC1 = 0.1e1;
    real _t0AC2 = 0.e0;
    real _t0AC3 = 0.e0;
    vec4 _t0AC4 = [_t0AC0, _t0AC1, _t0AC2, _t0AC3];
    real _t0AC5 = 0.e0;
    real _t0AC6 = 0.e0;
    real _t0AC7 = 0.1e1;
    real _t0AC8 = 0.e0;
    vec4 _t0AC9 = [_t0AC5, _t0AC6, _t0AC7, _t0AC8];
    real _t0ACA = 0.1e1;
    real _t0ACB = 0.e0;
    real _t0ACC = 0.e0;
    real _t0ACD = 0.e0;
    vec4 _t0ACE = [_t0ACA, _t0ACB, _t0ACC, _t0ACD];
    real _t0ACF = 0.e0;
    real _t0AD0 = 0.e0;
    real _t0AD1 = 0.e0;
    real _t0AD2 = 0.1e1;
    vec4 _t0AD3 = [_t0ACF, _t0AD0, _t0AD1, _t0AD2];
    tensor[4,4] _t0AD4 = [_t0AC4, _t0AC9, _t0ACE, _t0AD3];
    tensor[4,4][4] _t0AD5 = {_t0A95, _t0AAA, _t0ABF, _t0AD4};
    real _t0AD6 = -0.1e1;
    real _t0AD7 = -0.57735026919e0;
    real _t0AD8 = -0.1e1;
    real _t0AD9 = 0.1e1;
    vec4 _t0ADA = [_t0AD6, _t0AD7, _t0AD8, _t0AD9];
    real _t0ADB = 0.1e1;
    real _t0ADC = -0.57735026919e0;
    real _t0ADD = 0.e0;
    real _t0ADE = 0.e0;
    vec4 _t0ADF = [_t0ADB, _t0ADC, _t0ADD, _t0ADE];
    real _t0AE0 = 0.e0;
    real _t0AE1 = -0.57735026919e0;
    real _t0AE2 = 0.1e1;
    real _t0AE3 = 0.e0;
    vec4 _t0AE4 = [_t0AE0, _t0AE1, _t0AE2, _t0AE3];
    real _t0AE5 = 0.e0;
    real _t0AE6 = 0.e0;
    real _t0AE7 = 0.e0;
    real _t0AE8 = 0.1e1;
    vec4 _t0AE9 = [_t0AE5, _t0AE6, _t0AE7, _t0AE8];
    tensor[4,4] _t0AEA = [_t0ADA, _t0ADF, _t0AE4, _t0AE9];
    real _t0AEB = 0.e0;
    real _t0AEC = -0.1e1;
    real _t0AED = 0.e0;
    real _t0AEE = 0.e0;
    vec4 _t0AEF = [_t0AEB, _t0AEC, _t0AED, _t0AEE];
    real _t0AF0 = 0.1e1;
    real _t0AF1 = 0.e0;
    real _t0AF2 = 0.e0;
    real _t0AF3 = 0.e0;
    vec4 _t0AF4 = [_t0AF0, _t0AF1, _t0AF2, _t0AF3];
    real _t0AF5 = 0.e0;
    real _t0AF6 = 0.e0;
    real _t0AF7 = 0.1e1;
    real _t0AF8 = 0.e0;
    vec4 _t0AF9 = [_t0AF5, _t0AF6, _t0AF7, _t0AF8];
    real _t0AFA = 0.e0;
    real _t0AFB = 0.e0;
    real _t0AFC = 0.e0;
    real _t0AFD = 0.1e1;
    vec4 _t0AFE = [_t0AFA, _t0AFB, _t0AFC, _t0AFD];
    tensor[4,4] _t0AFF = [_t0AEF, _t0AF4, _t0AF9, _t0AFE];
    real _t0B00 = 0.1e1;
    real _t0B01 = 0.e0;
    real _t0B02 = 0.e0;
    real _t0B03 = 0.e0;
    vec4 _t0B04 = [_t0B00, _t0B01, _t0B02, _t0B03];
    real _t0B05 = 0.e0;
    real _t0B06 = 0.1e1;
    real _t0B07 = 0.e0;
    real _t0B08 = 0.e0;
    vec4 _t0B09 = [_t0B05, _t0B06, _t0B07, _t0B08];
    real _t0B0A = 0.e0;
    real _t0B0B = 0.e0;
    real _t0B0C = 0.1e1;
    real _t0B0D = 0.e0;
    vec4 _t0B0E = [_t0B0A, _t0B0B, _t0B0C, _t0B0D];
    real _t0B0F = 0.e0;
    real _t0B10 = 0.e0;
    real _t0B11 = 0.e0;
    real _t0B12 = 0.1e1;
    vec4 _t0B13 = [_t0B0F, _t0B10, _t0B11, _t0B12];
    tensor[4,4] _t0B14 = [_t0B04, _t0B09, _t0B0E, _t0B13];
    real _t0B15 = 0.1e1;
    real _t0B16 = 0.e0;
    real _t0B17 = 0.e0;
    real _t0B18 = 0.e0;
    vec4 _t0B19 = [_t0B15, _t0B16, _t0B17, _t0B18];
    real _t0B1A = 0.e0;
    real _t0B1B = 0.e0;
    real _t0B1C = 0.1e1;
    real _t0B1D = 0.e0;
    vec4 _t0B1E = [_t0B1A, _t0B1B, _t0B1C, _t0B1D];
    real _t0B1F = 0.e0;
    real _t0B20 = -0.1e1;
    real _t0B21 = 0.e0;
    real _t0B22 = 0.e0;
    vec4 _t0B23 = [_t0B1F, _t0B20, _t0B21, _t0B22];
    real _t0B24 = 0.e0;
    real _t0B25 = 0.e0;
    real _t0B26 = 0.e0;
    real _t0B27 = 0.1e1;
    vec4 _t0B28 = [_t0B24, _t0B25, _t0B26, _t0B27];
    tensor[4,4] _t0B29 = [_t0B19, _t0B1E, _t0B23, _t0B28];
    tensor[4,4][4] _t0B2A = {_t0AEA, _t0AFF, _t0B14, _t0B29};
    real _t0B2B = -0.1e1;
    real _t0B2C = -0.1e1;
    real _t0B2D = 0.57735026919e0;
    real _t0B2E = 0.1e1;
    vec4 _t0B2F = [_t0B2B, _t0B2C, _t0B2D, _t0B2E];
    real _t0B30 = 0.1e1;
    real _t0B31 = 0.e0;
    real _t0B32 = 0.57735026919e0;
    real _t0B33 = 0.e0;
    vec4 _t0B34 = [_t0B30, _t0B31, _t0B32, _t0B33];
    real _t0B35 = 0.e0;
    real _t0B36 = 0.1e1;
    real _t0B37 = 0.57735026919e0;
    real _t0B38 = 0.e0;
    vec4 _t0B39 = [_t0B35, _t0B36, _t0B37, _t0B38];
    real _t0B3A = 0.e0;
    real _t0B3B = 0.e0;
    real _t0B3C = 0.e0;
    real _t0B3D = 0.1e1;
    vec4 _t0B3E = [_t0B3A, _t0B3B, _t0B3C, _t0B3D];
    tensor[4,4] _t0B3F = [_t0B2F, _t0B34, _t0B39, _t0B3E];
    real _t0B40 = 0.e0;
    real _t0B41 = 0.e0;
    real _t0B42 = 0.1e1;
    real _t0B43 = 0.e0;
    vec4 _t0B44 = [_t0B40, _t0B41, _t0B42, _t0B43];
    real _t0B45 = 0.1e1;
    real _t0B46 = 0.e0;
    real _t0B47 = 0.e0;
    real _t0B48 = 0.e0;
    vec4 _t0B49 = [_t0B45, _t0B46, _t0B47, _t0B48];
    real _t0B4A = 0.e0;
    real _t0B4B = 0.1e1;
    real _t0B4C = 0.e0;
    real _t0B4D = 0.e0;
    vec4 _t0B4E = [_t0B4A, _t0B4B, _t0B4C, _t0B4D];
    real _t0B4F = 0.e0;
    real _t0B50 = 0.e0;
    real _t0B51 = 0.e0;
    real _t0B52 = 0.1e1;
    vec4 _t0B53 = [_t0B4F, _t0B50, _t0B51, _t0B52];
    tensor[4,4] _t0B54 = [_t0B44, _t0B49, _t0B4E, _t0B53];
    real _t0B55 = 0.1e1;
    real _t0B56 = 0.e0;
    real _t0B57 = 0.e0;
    real _t0B58 = 0.e0;
    vec4 _t0B59 = [_t0B55, _t0B56, _t0B57, _t0B58];
    real _t0B5A = 0.e0;
    real _t0B5B = 0.e0;
    real _t0B5C = -0.1e1;
    real _t0B5D = 0.e0;
    vec4 _t0B5E = [_t0B5A, _t0B5B, _t0B5C, _t0B5D];
    real _t0B5F = 0.e0;
    real _t0B60 = 0.1e1;
    real _t0B61 = 0.e0;
    real _t0B62 = 0.e0;
    vec4 _t0B63 = [_t0B5F, _t0B60, _t0B61, _t0B62];
    real _t0B64 = 0.e0;
    real _t0B65 = 0.e0;
    real _t0B66 = 0.e0;
    real _t0B67 = 0.1e1;
    vec4 _t0B68 = [_t0B64, _t0B65, _t0B66, _t0B67];
    tensor[4,4] _t0B69 = [_t0B59, _t0B5E, _t0B63, _t0B68];
    real _t0B6A = 0.1e1;
    real _t0B6B = 0.e0;
    real _t0B6C = 0.e0;
    real _t0B6D = 0.e0;
    vec4 _t0B6E = [_t0B6A, _t0B6B, _t0B6C, _t0B6D];
    real _t0B6F = 0.e0;
    real _t0B70 = 0.1e1;
    real _t0B71 = 0.e0;
    real _t0B72 = 0.e0;
    vec4 _t0B73 = [_t0B6F, _t0B70, _t0B71, _t0B72];
    real _t0B74 = 0.e0;
    real _t0B75 = 0.e0;
    real _t0B76 = 0.1e1;
    real _t0B77 = 0.e0;
    vec4 _t0B78 = [_t0B74, _t0B75, _t0B76, _t0B77];
    real _t0B79 = 0.e0;
    real _t0B7A = 0.e0;
    real _t0B7B = 0.e0;
    real _t0B7C = 0.1e1;
    vec4 _t0B7D = [_t0B79, _t0B7A, _t0B7B, _t0B7C];
    tensor[4,4] _t0B7E = [_t0B6E, _t0B73, _t0B78, _t0B7D];
    tensor[4,4][4] _t0B7F = {_t0B3F, _t0B54, _t0B69, _t0B7E};
    tensor[4,4][4][4] _t0B80 = {_t0A80, _t0AD5, _t0B2A, _t0B7F};
    real _t0B81 = time08B0[1];
    int _t0B82 = prim $r2i01B7 (_t0B81);
    tensor[4,4][4] _t0B83 = prim $sub01C0<tensor[4,4][4]; %4> (_t0B80, _t0B82);
    real _t0B84 = time08B0[1];
    int _t0B85 = prim $r2i01B7 (_t0B84);
    int[2] _t0B86 = func nextCell408B4 (_t0B85, cellId08AD, mesh08AC);
    int _t0B87 = 1;
    int _t0B88 = prim $sub01C0<int; %2> (_t0B86, _t0B87);
    tensor[4,4] _t0B89 = prim $sub01C0<tensor[4,4]; %4> (_t0B83, _t0B88);
    real _t0B8A = time08B0[0];
    vec3 _t0B8B = prim *0036<$[3]> (_t0B8A, dPos08AF);
    vec3 _t0B8C = prim +0017<$[3]> (_t0B8B, refPos08AE);
    real _t0B8D = _t0B8C[0];
    real _t0B8E = time08B0[0];
    vec3 _t0B8F = prim *0036<$[3]> (_t0B8E, dPos08AF);
    vec3 _t0B90 = prim +0017<$[3]> (_t0B8F, refPos08AE);
    real _t0B91 = _t0B90[1];
    real _t0B92 = time08B0[0];
    vec3 _t0B93 = prim *0036<$[3]> (_t0B92, dPos08AF);
    vec3 _t0B94 = prim +0017<$[3]> (_t0B93, refPos08AE);
    real _t0B95 = _t0B94[2];
    real _t0B96 = 0.1e1;
    vec4 _t0B97 = [_t0B8D, _t0B91, _t0B95, _t0B96];
    vec4 _t0B98 = prim •00CE<$[4,4]; $[4]; $[4]> (_t0B89, _t0B97);
    real _t0B99 = _t0B98[1];
    real _t0B9A = 0.1e1;
    real _t0B9B = 0.e0;
    real _t0B9C = 0.e0;
    real _t0B9D = 0.e0;
    vec4 _t0B9E = [_t0B9A, _t0B9B, _t0B9C, _t0B9D];
    real _t0B9F = 0.e0;
    real _t0BA0 = 0.1e1;
    real _t0BA1 = 0.e0;
    real _t0BA2 = 0.e0;
    vec4 _t0BA3 = [_t0B9F, _t0BA0, _t0BA1, _t0BA2];
    real _t0BA4 = 0.e0;
    real _t0BA5 = 0.e0;
    real _t0BA6 = 0.1e1;
    real _t0BA7 = 0.e0;
    vec4 _t0BA8 = [_t0BA4, _t0BA5, _t0BA6, _t0BA7];
    real _t0BA9 = 0.971445146547e-16;
    real _t0BAA = 0.e0;
    real _t0BAB = 0.e0;
    real _t0BAC = 0.1e1;
    vec4 _t0BAD = [_t0BA9, _t0BAA, _t0BAB, _t0BAC];
    tensor[4,4] _t0BAE = [_t0B9E, _t0BA3, _t0BA8, _t0BAD];
    real _t0BAF = 0.57735026919e0;
    real _t0BB0 = 0.57735026919e0;
    real _t0BB1 = 0.57735026919e0;
    real _t0BB2 = -0.57735026919e0;
    vec4 _t0BB3 = [_t0BAF, _t0BB0, _t0BB1, _t0BB2];
    real _t0BB4 = -0.333333333333e0;
    real _t0BB5 = 0.666666666667e0;
    real _t0BB6 = -0.333333333333e0;
    real _t0BB7 = 0.333333333333e0;
    vec4 _t0BB8 = [_t0BB4, _t0BB5, _t0BB6, _t0BB7];
    real _t0BB9 = -0.333333333333e0;
    real _t0BBA = -0.333333333333e0;
    real _t0BBB = 0.666666666667e0;
    real _t0BBC = 0.333333333333e0;
    vec4 _t0BBD = [_t0BB9, _t0BBA, _t0BBB, _t0BBC];
    real _t0BBE = 0.971445146547e-16;
    real _t0BBF = 0.e0;
    real _t0BC0 = 0.e0;
    real _t0BC1 = 0.1e1;
    vec4 _t0BC2 = [_t0BBE, _t0BBF, _t0BC0, _t0BC1];
    tensor[4,4] _t0BC3 = [_t0BB3, _t0BB8, _t0BBD, _t0BC2];
    real _t0BC4 = -0.333333333333e0;
    real _t0BC5 = 0.666666666667e0;
    real _t0BC6 = -0.333333333333e0;
    real _t0BC7 = 0.333333333333e0;
    vec4 _t0BC8 = [_t0BC4, _t0BC5, _t0BC6, _t0BC7];
    real _t0BC9 = -0.57735026919e0;
    real _t0BCA = -0.57735026919e0;
    real _t0BCB = -0.57735026919e0;
    real _t0BCC = 0.57735026919e0;
    vec4 _t0BCD = [_t0BC9, _t0BCA, _t0BCB, _t0BCC];
    real _t0BCE = -0.333333333333e0;
    real _t0BCF = -0.333333333333e0;
    real _t0BD0 = 0.666666666667e0;
    real _t0BD1 = 0.333333333333e0;
    vec4 _t0BD2 = [_t0BCE, _t0BCF, _t0BD0, _t0BD1];
    real _t0BD3 = 0.971445146547e-16;
    real _t0BD4 = 0.e0;
    real _t0BD5 = 0.e0;
    real _t0BD6 = 0.1e1;
    vec4 _t0BD7 = [_t0BD3, _t0BD4, _t0BD5, _t0BD6];
    tensor[4,4] _t0BD8 = [_t0BC8, _t0BCD, _t0BD2, _t0BD7];
    real _t0BD9 = -0.333333333333e0;
    real _t0BDA = 0.666666666667e0;
    real _t0BDB = -0.333333333333e0;
    real _t0BDC = 0.333333333333e0;
    vec4 _t0BDD = [_t0BD9, _t0BDA, _t0BDB, _t0BDC];
    real _t0BDE = -0.333333333333e0;
    real _t0BDF = -0.333333333333e0;
    real _t0BE0 = 0.666666666667e0;
    real _t0BE1 = 0.333333333333e0;
    vec4 _t0BE2 = [_t0BDE, _t0BDF, _t0BE0, _t0BE1];
    real _t0BE3 = 0.57735026919e0;
    real _t0BE4 = 0.57735026919e0;
    real _t0BE5 = 0.57735026919e0;
    real _t0BE6 = -0.57735026919e0;
    vec4 _t0BE7 = [_t0BE3, _t0BE4, _t0BE5, _t0BE6];
    real _t0BE8 = 0.971445146547e-16;
    real _t0BE9 = 0.e0;
    real _t0BEA = 0.e0;
    real _t0BEB = 0.1e1;
    vec4 _t0BEC = [_t0BE8, _t0BE9, _t0BEA, _t0BEB];
    tensor[4,4] _t0BED = [_t0BDD, _t0BE2, _t0BE7, _t0BEC];
    tensor[4,4][4] _t0BEE = {_t0BAE, _t0BC3, _t0BD8, _t0BED};
    real _t0BEF = 0.57735026919e0;
    real _t0BF0 = -0.1e1;
    real _t0BF1 = -0.1e1;
    real _t0BF2 = 0.1e1;
    vec4 _t0BF3 = [_t0BEF, _t0BF0, _t0BF1, _t0BF2];
    real _t0BF4 = 0.57735026919e0;
    real _t0BF5 = 0.1e1;
    real _t0BF6 = 0.e0;
    real _t0BF7 = 0.e0;
    vec4 _t0BF8 = [_t0BF4, _t0BF5, _t0BF6, _t0BF7];
    real _t0BF9 = 0.57735026919e0;
    real _t0BFA = 0.e0;
    real _t0BFB = 0.1e1;
    real _t0BFC = 0.e0;
    vec4 _t0BFD = [_t0BF9, _t0BFA, _t0BFB, _t0BFC];
    real _t0BFE = 0.e0;
    real _t0BFF = 0.e0;
    real _t0C00 = 0.e0;
    real _t0C01 = 0.1e1;
    vec4 _t0C02 = [_t0BFE, _t0BFF, _t0C00, _t0C01];
    tensor[4,4] _t0C03 = [_t0BF3, _t0BF8, _t0BFD, _t0C02];
    real _t0C04 = 0.1e1;
    real _t0C05 = 0.e0;
    real _t0C06 = 0.e0;
    real _t0C07 = 0.e0;
    vec4 _t0C08 = [_t0C04, _t0C05, _t0C06, _t0C07];
    real _t0C09 = 0.e0;
    real _t0C0A = 0.1e1;
    real _t0C0B = 0.e0;
    real _t0C0C = 0.e0;
    vec4 _t0C0D = [_t0C09, _t0C0A, _t0C0B, _t0C0C];
    real _t0C0E = 0.e0;
    real _t0C0F = 0.e0;
    real _t0C10 = 0.1e1;
    real _t0C11 = 0.e0;
    vec4 _t0C12 = [_t0C0E, _t0C0F, _t0C10, _t0C11];
    real _t0C13 = 0.e0;
    real _t0C14 = 0.e0;
    real _t0C15 = 0.e0;
    real _t0C16 = 0.1e1;
    vec4 _t0C17 = [_t0C13, _t0C14, _t0C15, _t0C16];
    tensor[4,4] _t0C18 = [_t0C08, _t0C0D, _t0C12, _t0C17];
    real _t0C19 = 0.e0;
    real _t0C1A = 0.1e1;
    real _t0C1B = 0.e0;
    real _t0C1C = 0.e0;
    vec4 _t0C1D = [_t0C19, _t0C1A, _t0C1B, _t0C1C];
    real _t0C1E = -0.1e1;
    real _t0C1F = 0.e0;
    real _t0C20 = 0.e0;
    real _t0C21 = 0.e0;
    vec4 _t0C22 = [_t0C1E, _t0C1F, _t0C20, _t0C21];
    real _t0C23 = 0.e0;
    real _t0C24 = 0.e0;
    real _t0C25 = 0.1e1;
    real _t0C26 = 0.e0;
    vec4 _t0C27 = [_t0C23, _t0C24, _t0C25, _t0C26];
    real _t0C28 = 0.e0;
    real _t0C29 = 0.e0;
    real _t0C2A = 0.e0;
    real _t0C2B = 0.1e1;
    vec4 _t0C2C = [_t0C28, _t0C29, _t0C2A, _t0C2B];
    tensor[4,4] _t0C2D = [_t0C1D, _t0C22, _t0C27, _t0C2C];
    real _t0C2E = 0.e0;
    real _t0C2F = 0.1e1;
    real _t0C30 = 0.e0;
    real _t0C31 = 0.e0;
    vec4 _t0C32 = [_t0C2E, _t0C2F, _t0C30, _t0C31];
    real _t0C33 = 0.e0;
    real _t0C34 = 0.e0;
    real _t0C35 = 0.1e1;
    real _t0C36 = 0.e0;
    vec4 _t0C37 = [_t0C33, _t0C34, _t0C35, _t0C36];
    real _t0C38 = 0.1e1;
    real _t0C39 = 0.e0;
    real _t0C3A = 0.e0;
    real _t0C3B = 0.e0;
    vec4 _t0C3C = [_t0C38, _t0C39, _t0C3A, _t0C3B];
    real _t0C3D = 0.e0;
    real _t0C3E = 0.e0;
    real _t0C3F = 0.e0;
    real _t0C40 = 0.1e1;
    vec4 _t0C41 = [_t0C3D, _t0C3E, _t0C3F, _t0C40];
    tensor[4,4] _t0C42 = [_t0C32, _t0C37, _t0C3C, _t0C41];
    tensor[4,4][4] _t0C43 = {_t0C03, _t0C18, _t0C2D, _t0C42};
    real _t0C44 = -0.1e1;
    real _t0C45 = -0.57735026919e0;
    real _t0C46 = -0.1e1;
    real _t0C47 = 0.1e1;
    vec4 _t0C48 = [_t0C44, _t0C45, _t0C46, _t0C47];
    real _t0C49 = 0.1e1;
    real _t0C4A = -0.57735026919e0;
    real _t0C4B = 0.e0;
    real _t0C4C = 0.e0;
    vec4 _t0C4D = [_t0C49, _t0C4A, _t0C4B, _t0C4C];
    real _t0C4E = 0.e0;
    real _t0C4F = -0.57735026919e0;
    real _t0C50 = 0.1e1;
    real _t0C51 = 0.e0;
    vec4 _t0C52 = [_t0C4E, _t0C4F, _t0C50, _t0C51];
    real _t0C53 = 0.e0;
    real _t0C54 = 0.e0;
    real _t0C55 = 0.e0;
    real _t0C56 = 0.1e1;
    vec4 _t0C57 = [_t0C53, _t0C54, _t0C55, _t0C56];
    tensor[4,4] _t0C58 = [_t0C48, _t0C4D, _t0C52, _t0C57];
    real _t0C59 = 0.e0;
    real _t0C5A = -0.1e1;
    real _t0C5B = 0.e0;
    real _t0C5C = 0.e0;
    vec4 _t0C5D = [_t0C59, _t0C5A, _t0C5B, _t0C5C];
    real _t0C5E = 0.1e1;
    real _t0C5F = 0.e0;
    real _t0C60 = 0.e0;
    real _t0C61 = 0.e0;
    vec4 _t0C62 = [_t0C5E, _t0C5F, _t0C60, _t0C61];
    real _t0C63 = 0.e0;
    real _t0C64 = 0.e0;
    real _t0C65 = 0.1e1;
    real _t0C66 = 0.e0;
    vec4 _t0C67 = [_t0C63, _t0C64, _t0C65, _t0C66];
    real _t0C68 = 0.e0;
    real _t0C69 = 0.e0;
    real _t0C6A = 0.e0;
    real _t0C6B = 0.1e1;
    vec4 _t0C6C = [_t0C68, _t0C69, _t0C6A, _t0C6B];
    tensor[4,4] _t0C6D = [_t0C5D, _t0C62, _t0C67, _t0C6C];
    real _t0C6E = 0.1e1;
    real _t0C6F = 0.e0;
    real _t0C70 = 0.e0;
    real _t0C71 = 0.e0;
    vec4 _t0C72 = [_t0C6E, _t0C6F, _t0C70, _t0C71];
    real _t0C73 = 0.e0;
    real _t0C74 = 0.1e1;
    real _t0C75 = 0.e0;
    real _t0C76 = 0.e0;
    vec4 _t0C77 = [_t0C73, _t0C74, _t0C75, _t0C76];
    real _t0C78 = 0.e0;
    real _t0C79 = 0.e0;
    real _t0C7A = 0.1e1;
    real _t0C7B = 0.e0;
    vec4 _t0C7C = [_t0C78, _t0C79, _t0C7A, _t0C7B];
    real _t0C7D = 0.e0;
    real _t0C7E = 0.e0;
    real _t0C7F = 0.e0;
    real _t0C80 = 0.1e1;
    vec4 _t0C81 = [_t0C7D, _t0C7E, _t0C7F, _t0C80];
    tensor[4,4] _t0C82 = [_t0C72, _t0C77, _t0C7C, _t0C81];
    real _t0C83 = 0.1e1;
    real _t0C84 = 0.e0;
    real _t0C85 = 0.e0;
    real _t0C86 = 0.e0;
    vec4 _t0C87 = [_t0C83, _t0C84, _t0C85, _t0C86];
    real _t0C88 = 0.e0;
    real _t0C89 = 0.e0;
    real _t0C8A = 0.1e1;
    real _t0C8B = 0.e0;
    vec4 _t0C8C = [_t0C88, _t0C89, _t0C8A, _t0C8B];
    real _t0C8D = 0.e0;
    real _t0C8E = -0.1e1;
    real _t0C8F = 0.e0;
    real _t0C90 = 0.e0;
    vec4 _t0C91 = [_t0C8D, _t0C8E, _t0C8F, _t0C90];
    real _t0C92 = 0.e0;
    real _t0C93 = 0.e0;
    real _t0C94 = 0.e0;
    real _t0C95 = 0.1e1;
    vec4 _t0C96 = [_t0C92, _t0C93, _t0C94, _t0C95];
    tensor[4,4] _t0C97 = [_t0C87, _t0C8C, _t0C91, _t0C96];
    tensor[4,4][4] _t0C98 = {_t0C58, _t0C6D, _t0C82, _t0C97};
    real _t0C99 = -0.1e1;
    real _t0C9A = -0.1e1;
    real _t0C9B = 0.57735026919e0;
    real _t0C9C = 0.1e1;
    vec4 _t0C9D = [_t0C99, _t0C9A, _t0C9B, _t0C9C];
    real _t0C9E = 0.1e1;
    real _t0C9F = 0.e0;
    real _t0CA0 = 0.57735026919e0;
    real _t0CA1 = 0.e0;
    vec4 _t0CA2 = [_t0C9E, _t0C9F, _t0CA0, _t0CA1];
    real _t0CA3 = 0.e0;
    real _t0CA4 = 0.1e1;
    real _t0CA5 = 0.57735026919e0;
    real _t0CA6 = 0.e0;
    vec4 _t0CA7 = [_t0CA3, _t0CA4, _t0CA5, _t0CA6];
    real _t0CA8 = 0.e0;
    real _t0CA9 = 0.e0;
    real _t0CAA = 0.e0;
    real _t0CAB = 0.1e1;
    vec4 _t0CAC = [_t0CA8, _t0CA9, _t0CAA, _t0CAB];
    tensor[4,4] _t0CAD = [_t0C9D, _t0CA2, _t0CA7, _t0CAC];
    real _t0CAE = 0.e0;
    real _t0CAF = 0.e0;
    real _t0CB0 = 0.1e1;
    real _t0CB1 = 0.e0;
    vec4 _t0CB2 = [_t0CAE, _t0CAF, _t0CB0, _t0CB1];
    real _t0CB3 = 0.1e1;
    real _t0CB4 = 0.e0;
    real _t0CB5 = 0.e0;
    real _t0CB6 = 0.e0;
    vec4 _t0CB7 = [_t0CB3, _t0CB4, _t0CB5, _t0CB6];
    real _t0CB8 = 0.e0;
    real _t0CB9 = 0.1e1;
    real _t0CBA = 0.e0;
    real _t0CBB = 0.e0;
    vec4 _t0CBC = [_t0CB8, _t0CB9, _t0CBA, _t0CBB];
    real _t0CBD = 0.e0;
    real _t0CBE = 0.e0;
    real _t0CBF = 0.e0;
    real _t0CC0 = 0.1e1;
    vec4 _t0CC1 = [_t0CBD, _t0CBE, _t0CBF, _t0CC0];
    tensor[4,4] _t0CC2 = [_t0CB2, _t0CB7, _t0CBC, _t0CC1];
    real _t0CC3 = 0.1e1;
    real _t0CC4 = 0.e0;
    real _t0CC5 = 0.e0;
    real _t0CC6 = 0.e0;
    vec4 _t0CC7 = [_t0CC3, _t0CC4, _t0CC5, _t0CC6];
    real _t0CC8 = 0.e0;
    real _t0CC9 = 0.e0;
    real _t0CCA = -0.1e1;
    real _t0CCB = 0.e0;
    vec4 _t0CCC = [_t0CC8, _t0CC9, _t0CCA, _t0CCB];
    real _t0CCD = 0.e0;
    real _t0CCE = 0.1e1;
    real _t0CCF = 0.e0;
    real _t0CD0 = 0.e0;
    vec4 _t0CD1 = [_t0CCD, _t0CCE, _t0CCF, _t0CD0];
    real _t0CD2 = 0.e0;
    real _t0CD3 = 0.e0;
    real _t0CD4 = 0.e0;
    real _t0CD5 = 0.1e1;
    vec4 _t0CD6 = [_t0CD2, _t0CD3, _t0CD4, _t0CD5];
    tensor[4,4] _t0CD7 = [_t0CC7, _t0CCC, _t0CD1, _t0CD6];
    real _t0CD8 = 0.1e1;
    real _t0CD9 = 0.e0;
    real _t0CDA = 0.e0;
    real _t0CDB = 0.e0;
    vec4 _t0CDC = [_t0CD8, _t0CD9, _t0CDA, _t0CDB];
    real _t0CDD = 0.e0;
    real _t0CDE = 0.1e1;
    real _t0CDF = 0.e0;
    real _t0CE0 = 0.e0;
    vec4 _t0CE1 = [_t0CDD, _t0CDE, _t0CDF, _t0CE0];
    real _t0CE2 = 0.e0;
    real _t0CE3 = 0.e0;
    real _t0CE4 = 0.1e1;
    real _t0CE5 = 0.e0;
    vec4 _t0CE6 = [_t0CE2, _t0CE3, _t0CE4, _t0CE5];
    real _t0CE7 = 0.e0;
    real _t0CE8 = 0.e0;
    real _t0CE9 = 0.e0;
    real _t0CEA = 0.1e1;
    vec4 _t0CEB = [_t0CE7, _t0CE8, _t0CE9, _t0CEA];
    tensor[4,4] _t0CEC = [_t0CDC, _t0CE1, _t0CE6, _t0CEB];
    tensor[4,4][4] _t0CED = {_t0CAD, _t0CC2, _t0CD7, _t0CEC};
    tensor[4,4][4][4] _t0CEE = {_t0BEE, _t0C43, _t0C98, _t0CED};
    real _t0CEF = time08B0[1];
    int _t0CF0 = prim $r2i01B7 (_t0CEF);
    tensor[4,4][4] _t0CF1 = prim $sub01C0<tensor[4,4][4]; %4> (_t0CEE, _t0CF0);
    real _t0CF2 = time08B0[1];
    int _t0CF3 = prim $r2i01B7 (_t0CF2);
    int[2] _t0CF4 = func nextCell408B4 (_t0CF3, cellId08AD, mesh08AC);
    int _t0CF5 = 1;
    int _t0CF6 = prim $sub01C0<int; %2> (_t0CF4, _t0CF5);
    tensor[4,4] _t0CF7 = prim $sub01C0<tensor[4,4]; %4> (_t0CF1, _t0CF6);
    real _t0CF8 = time08B0[0];
    vec3 _t0CF9 = prim *0036<$[3]> (_t0CF8, dPos08AF);
    vec3 _t0CFA = prim +0017<$[3]> (_t0CF9, refPos08AE);
    real _t0CFB = _t0CFA[0];
    real _t0CFC = time08B0[0];
    vec3 _t0CFD = prim *0036<$[3]> (_t0CFC, dPos08AF);
    vec3 _t0CFE = prim +0017<$[3]> (_t0CFD, refPos08AE);
    real _t0CFF = _t0CFE[1];
    real _t0D00 = time08B0[0];
    vec3 _t0D01 = prim *0036<$[3]> (_t0D00, dPos08AF);
    vec3 _t0D02 = prim +0017<$[3]> (_t0D01, refPos08AE);
    real _t0D03 = _t0D02[2];
    real _t0D04 = 0.1e1;
    vec4 _t0D05 = [_t0CFB, _t0CFF, _t0D03, _t0D04];
    vec4 _t0D06 = prim •00CE<$[4,4]; $[4]; $[4]> (_t0CF7, _t0D05);
    real _t0D07 = _t0D06[2];
    vec3 _t0D08 = [_t0A2B, _t0B99, _t0D07];
    real _t0D09 = time08B0[1];
    int _t0D0A = prim $r2i01B7 (_t0D09);
    int[2] _t0D0B = func nextCell408B4 (_t0D0A, cellId08AD, mesh08AC);
    int _t0D0C = 1;
    int _t0D0D = prim $sub01C0<int; %2> (_t0D0B, _t0D0C);
    Femdata: MeshPos _t0D0E = extractFemItemN((mesh08AC, _t08BD, _t0D08, _t0D0D),RefBuild(Mesh),);
    return _t0D0E;
  } else {
    real _t0D0F = time08B0[0];
    vec3 _t0D10 = prim *0036<$[3]> (_t0D0F, dPos08AF);
    vec3 _t0D11 = prim +0017<$[3]> (_t0D10, refPos08AE);
    Femdata: MeshPos _t0D12 = extractFemItemN((mesh08AC, _t0D11),InvalidBuildBoundary(MeshPos),);
    return _t0D12;
  }
}
function int[2]#6 nextCell408B4 (int faceIdx0D13, int cell0D14, Femdata: Mesh mesh0D15)
{
  int _t0D16 = -1;
  bool _t0D17 = prim ==0082 (faceIdx0D13, _t0D16);
  if _t0D17 {
    int _t0D18 = -1;
    int _t0D19 = -1;
    int[2] _t0D1A = {_t0D18, _t0D19};
    return _t0D1A;
  } else {
    int _t0D1B = 8;
    int _t0D1C = prim *0033 (cell0D14, _t0D1B);
    int _t0D1D = 2;
    int _t0D1E = prim *0033 (faceIdx0D13, _t0D1D);
    int _t0D1F = prim +0015 (_t0D1C, _t0D1E);
    int[2] _t0D20 = extractFemItemN((mesh0D15, _t0D1F),CellFaceCell(Mesh),);
    return _t0D20;
  }
}
function vec2#0 _enter0D21 (vec3 refPos0D22, vec3 dPos0D23)
{
  real time0D24 = +inf;
  int face0D25 = -1;
  real faceTime0D26 = -inf;
  real _t0D27 = 0.57735026919e0;
  real _t0D28 = 0.57735026919e0;
  real _t0D29 = 0.57735026919e0;
  real _t0D2A = 0.57735026919e0;
  vec3 _t0D2B = [_t0D28, _t0D29, _t0D2A];
  real _t0D2C = prim •00CE<$[3]; $[3]; $[]> (_t0D2B, refPos0D22);
  real _t0D2D = prim -0026<$[]> (_t0D27, _t0D2C);
  real _t0D2E = 0.57735026919e0;
  real _t0D2F = 0.57735026919e0;
  real _t0D30 = 0.57735026919e0;
  vec3 _t0D31 = [_t0D2E, _t0D2F, _t0D30];
  real _t0D32 = prim •00CE<$[3]; $[3]; $[]> (_t0D31, dPos0D23);
  real _t0D33 = prim /0055 (_t0D2D, _t0D32);
  real _t0D34 = -0.1e-7;
  bool _t0D35 = prim >=007E (_t0D33, _t0D34);
  real _t0D36 = 0.57735026919e0;
  real _t0D37 = 0.57735026919e0;
  real _t0D38 = 0.57735026919e0;
  real _t0D39 = 0.57735026919e0;
  vec3 _t0D3A = [_t0D37, _t0D38, _t0D39];
  real _t0D3B = prim •00CE<$[3]; $[3]; $[]> (_t0D3A, refPos0D22);
  real _t0D3C = prim -0026<$[]> (_t0D36, _t0D3B);
  real _t0D3D = 0.57735026919e0;
  real _t0D3E = 0.57735026919e0;
  real _t0D3F = 0.57735026919e0;
  vec3 _t0D40 = [_t0D3D, _t0D3E, _t0D3F];
  real _t0D41 = prim •00CE<$[3]; $[3]; $[]> (_t0D40, dPos0D23);
  real _t0D42 = prim /0055 (_t0D3C, _t0D41);
  bool _t0D43 = prim >0080 (time0D24, _t0D42);
  real _t0D44 = 0.57735026919e0;
  real _t0D45 = 0.57735026919e0;
  real _t0D46 = 0.57735026919e0;
  vec3 _t0D47 = [_t0D44, _t0D45, _t0D46];
  real _t0D48 = prim •00CE<$[3]; $[3]; $[]> (_t0D47, dPos0D23);
  real _t0D49 = prim |()|00B5<$[]> (_t0D48);
  real _t0D4A = 0.1e-7;
  bool _t0D4B = prim >=007E (_t0D49, _t0D4A);
  bool _t0D4C = prim $and01C4 (_t0D43, _t0D4B);
  bool _t0D4D = prim $and01C4 (_t0D35, _t0D4C);
  if _t0D4D {
    real _t0D4E = 0.1e1;
    real _t0D4F = 0.1e-7;
    real _t0D50 = prim +0017<$[]> (_t0D4E, _t0D4F);
    real _t0D51 = 0.1e1;
    real _t0D52 = 0.1e1;
    real _t0D53 = 0.1e1;
    vec3 _t0D54 = [_t0D51, _t0D52, _t0D53];
    real _t0D55 = 0.57735026919e0;
    real _t0D56 = 0.57735026919e0;
    real _t0D57 = 0.57735026919e0;
    real _t0D58 = 0.57735026919e0;
    vec3 _t0D59 = [_t0D56, _t0D57, _t0D58];
    real _t0D5A = prim •00CE<$[3]; $[3]; $[]> (_t0D59, refPos0D22);
    real _t0D5B = prim -0026<$[]> (_t0D55, _t0D5A);
    real _t0D5C = 0.57735026919e0;
    real _t0D5D = 0.57735026919e0;
    real _t0D5E = 0.57735026919e0;
    vec3 _t0D5F = [_t0D5C, _t0D5D, _t0D5E];
    real _t0D60 = prim •00CE<$[3]; $[3]; $[]> (_t0D5F, dPos0D23);
    real _t0D61 = prim /0055 (_t0D5B, _t0D60);
    vec3 _t0D62 = prim *0038<$[3]> (dPos0D23, _t0D61);
    vec3 _t0D63 = prim +0017<$[3]> (refPos0D22, _t0D62);
    real _t0D64 = prim •00CE<$[3]; $[3]; $[]> (_t0D54, _t0D63);
    bool _t0D65 = prim >0080 (_t0D50, _t0D64);
    real _t0D66 = 0.1e-7;
    real _t0D67 = 0.1e-7;
    real _t0D68 = 0.1e-7;
    vec3 _t0D69 = [_t0D66, _t0D67, _t0D68];
    real _t0D6A = 0.57735026919e0;
    real _t0D6B = 0.57735026919e0;
    real _t0D6C = 0.57735026919e0;
    real _t0D6D = 0.57735026919e0;
    vec3 _t0D6E = [_t0D6B, _t0D6C, _t0D6D];
    real _t0D6F = prim •00CE<$[3]; $[3]; $[]> (_t0D6E, refPos0D22);
    real _t0D70 = prim -0026<$[]> (_t0D6A, _t0D6F);
    real _t0D71 = 0.57735026919e0;
    real _t0D72 = 0.57735026919e0;
    real _t0D73 = 0.57735026919e0;
    vec3 _t0D74 = [_t0D71, _t0D72, _t0D73];
    real _t0D75 = prim •00CE<$[3]; $[3]; $[]> (_t0D74, dPos0D23);
    real _t0D76 = prim /0055 (_t0D70, _t0D75);
    vec3 _t0D77 = prim *0038<$[3]> (dPos0D23, _t0D76);
    vec3 _t0D78 = prim +0017<$[3]> (refPos0D22, _t0D77);
    vec3 _t0D79 = prim +0017<$[3]> (_t0D69, _t0D78);
    real _t0D7A = _t0D79[0];
    real _t0D7B = -0.e0;
    bool _t0D7C = prim >0080 (_t0D7A, _t0D7B);
    real _t0D7D = 0.1e-7;
    real _t0D7E = 0.1e-7;
    real _t0D7F = 0.1e-7;
    vec3 _t0D80 = [_t0D7D, _t0D7E, _t0D7F];
    real _t0D81 = 0.57735026919e0;
    real _t0D82 = 0.57735026919e0;
    real _t0D83 = 0.57735026919e0;
    real _t0D84 = 0.57735026919e0;
    vec3 _t0D85 = [_t0D82, _t0D83, _t0D84];
    real _t0D86 = prim •00CE<$[3]; $[3]; $[]> (_t0D85, refPos0D22);
    real _t0D87 = prim -0026<$[]> (_t0D81, _t0D86);
    real _t0D88 = 0.57735026919e0;
    real _t0D89 = 0.57735026919e0;
    real _t0D8A = 0.57735026919e0;
    vec3 _t0D8B = [_t0D88, _t0D89, _t0D8A];
    real _t0D8C = prim •00CE<$[3]; $[3]; $[]> (_t0D8B, dPos0D23);
    real _t0D8D = prim /0055 (_t0D87, _t0D8C);
    vec3 _t0D8E = prim *0038<$[3]> (dPos0D23, _t0D8D);
    vec3 _t0D8F = prim +0017<$[3]> (refPos0D22, _t0D8E);
    vec3 _t0D90 = prim +0017<$[3]> (_t0D80, _t0D8F);
    real _t0D91 = _t0D90[1];
    real _t0D92 = -0.e0;
    bool _t0D93 = prim >0080 (_t0D91, _t0D92);
    real _t0D94 = 0.1e-7;
    real _t0D95 = 0.1e-7;
    real _t0D96 = 0.1e-7;
    vec3 _t0D97 = [_t0D94, _t0D95, _t0D96];
    real _t0D98 = 0.57735026919e0;
    real _t0D99 = 0.57735026919e0;
    real _t0D9A = 0.57735026919e0;
    real _t0D9B = 0.57735026919e0;
    vec3 _t0D9C = [_t0D99, _t0D9A, _t0D9B];
    real _t0D9D = prim •00CE<$[3]; $[3]; $[]> (_t0D9C, refPos0D22);
    real _t0D9E = prim -0026<$[]> (_t0D98, _t0D9D);
    real _t0D9F = 0.57735026919e0;
    real _t0DA0 = 0.57735026919e0;
    real _t0DA1 = 0.57735026919e0;
    vec3 _t0DA2 = [_t0D9F, _t0DA0, _t0DA1];
    real _t0DA3 = prim •00CE<$[3]; $[3]; $[]> (_t0DA2, dPos0D23);
    real _t0DA4 = prim /0055 (_t0D9E, _t0DA3);
    vec3 _t0DA5 = prim *0038<$[3]> (dPos0D23, _t0DA4);
    vec3 _t0DA6 = prim +0017<$[3]> (refPos0D22, _t0DA5);
    vec3 _t0DA7 = prim +0017<$[3]> (_t0D97, _t0DA6);
    real _t0DA8 = _t0DA7[2];
    real _t0DA9 = -0.e0;
    bool _t0DAA = prim >0080 (_t0DA8, _t0DA9);
    bool _t0DAB = prim $and01C4 (_t0D93, _t0DAA);
    bool _t0DAC = prim $and01C4 (_t0D7C, _t0DAB);
    bool _t0DAD = prim $and01C4 (_t0D65, _t0DAC);
    if _t0DAD {
      real _t0DAE = 0.57735026919e0;
      real _t0DAF = 0.57735026919e0;
      real _t0DB0 = 0.57735026919e0;
      real _t0DB1 = 0.57735026919e0;
      vec3 _t0DB2 = [_t0DAF, _t0DB0, _t0DB1];
      real _t0DB3 = prim •00CE<$[3]; $[3]; $[]> (_t0DB2, refPos0D22);
      real _t0DB4 = prim -0026<$[]> (_t0DAE, _t0DB3);
      real _t0DB5 = 0.57735026919e0;
      real _t0DB6 = 0.57735026919e0;
      real _t0DB7 = 0.57735026919e0;
      vec3 _t0DB8 = [_t0DB5, _t0DB6, _t0DB7];
      real _t0DB9 = prim •00CE<$[3]; $[3]; $[]> (_t0DB8, dPos0D23);
      time0D24 = prim /0055 (_t0DB4, _t0DB9);
      face0D25 = 0;
    }
  }
  real _t0DBA = 0.e0;
  real _t0DBB = -0.1e1;
  real _t0DBC = 0.e0;
  real _t0DBD = 0.e0;
  vec3 _t0DBE = [_t0DBB, _t0DBC, _t0DBD];
  real _t0DBF = prim •00CE<$[3]; $[3]; $[]> (_t0DBE, refPos0D22);
  real _t0DC0 = prim -0026<$[]> (_t0DBA, _t0DBF);
  real _t0DC1 = -0.1e1;
  real _t0DC2 = 0.e0;
  real _t0DC3 = 0.e0;
  vec3 _t0DC4 = [_t0DC1, _t0DC2, _t0DC3];
  real _t0DC5 = prim •00CE<$[3]; $[3]; $[]> (_t0DC4, dPos0D23);
  real _t0DC6 = prim /0055 (_t0DC0, _t0DC5);
  real _t0DC7 = -0.1e-7;
  bool _t0DC8 = prim >=007E (_t0DC6, _t0DC7);
  real _t0DC9 = 0.e0;
  real _t0DCA = -0.1e1;
  real _t0DCB = 0.e0;
  real _t0DCC = 0.e0;
  vec3 _t0DCD = [_t0DCA, _t0DCB, _t0DCC];
  real _t0DCE = prim •00CE<$[3]; $[3]; $[]> (_t0DCD, refPos0D22);
  real _t0DCF = prim -0026<$[]> (_t0DC9, _t0DCE);
  real _t0DD0 = -0.1e1;
  real _t0DD1 = 0.e0;
  real _t0DD2 = 0.e0;
  vec3 _t0DD3 = [_t0DD0, _t0DD1, _t0DD2];
  real _t0DD4 = prim •00CE<$[3]; $[3]; $[]> (_t0DD3, dPos0D23);
  real _t0DD5 = prim /0055 (_t0DCF, _t0DD4);
  bool _t0DD6 = prim >0080 (time0D24, _t0DD5);
  real _t0DD7 = -0.1e1;
  real _t0DD8 = 0.e0;
  real _t0DD9 = 0.e0;
  vec3 _t0DDA = [_t0DD7, _t0DD8, _t0DD9];
  real _t0DDB = prim •00CE<$[3]; $[3]; $[]> (_t0DDA, dPos0D23);
  real _t0DDC = prim |()|00B5<$[]> (_t0DDB);
  real _t0DDD = 0.1e-7;
  bool _t0DDE = prim >=007E (_t0DDC, _t0DDD);
  bool _t0DDF = prim $and01C4 (_t0DD6, _t0DDE);
  bool _t0DE0 = prim $and01C4 (_t0DC8, _t0DDF);
  if _t0DE0 {
    real _t0DE1 = 0.1e1;
    real _t0DE2 = 0.1e-7;
    real _t0DE3 = prim +0017<$[]> (_t0DE1, _t0DE2);
    real _t0DE4 = 0.1e1;
    real _t0DE5 = 0.1e1;
    real _t0DE6 = 0.1e1;
    vec3 _t0DE7 = [_t0DE4, _t0DE5, _t0DE6];
    real _t0DE8 = 0.e0;
    real _t0DE9 = -0.1e1;
    real _t0DEA = 0.e0;
    real _t0DEB = 0.e0;
    vec3 _t0DEC = [_t0DE9, _t0DEA, _t0DEB];
    real _t0DED = prim •00CE<$[3]; $[3]; $[]> (_t0DEC, refPos0D22);
    real _t0DEE = prim -0026<$[]> (_t0DE8, _t0DED);
    real _t0DEF = -0.1e1;
    real _t0DF0 = 0.e0;
    real _t0DF1 = 0.e0;
    vec3 _t0DF2 = [_t0DEF, _t0DF0, _t0DF1];
    real _t0DF3 = prim •00CE<$[3]; $[3]; $[]> (_t0DF2, dPos0D23);
    real _t0DF4 = prim /0055 (_t0DEE, _t0DF3);
    vec3 _t0DF5 = prim *0038<$[3]> (dPos0D23, _t0DF4);
    vec3 _t0DF6 = prim +0017<$[3]> (refPos0D22, _t0DF5);
    real _t0DF7 = prim •00CE<$[3]; $[3]; $[]> (_t0DE7, _t0DF6);
    bool _t0DF8 = prim >0080 (_t0DE3, _t0DF7);
    real _t0DF9 = 0.1e-7;
    real _t0DFA = 0.1e-7;
    real _t0DFB = 0.1e-7;
    vec3 _t0DFC = [_t0DF9, _t0DFA, _t0DFB];
    real _t0DFD = 0.e0;
    real _t0DFE = -0.1e1;
    real _t0DFF = 0.e0;
    real _t0E00 = 0.e0;
    vec3 _t0E01 = [_t0DFE, _t0DFF, _t0E00];
    real _t0E02 = prim •00CE<$[3]; $[3]; $[]> (_t0E01, refPos0D22);
    real _t0E03 = prim -0026<$[]> (_t0DFD, _t0E02);
    real _t0E04 = -0.1e1;
    real _t0E05 = 0.e0;
    real _t0E06 = 0.e0;
    vec3 _t0E07 = [_t0E04, _t0E05, _t0E06];
    real _t0E08 = prim •00CE<$[3]; $[3]; $[]> (_t0E07, dPos0D23);
    real _t0E09 = prim /0055 (_t0E03, _t0E08);
    vec3 _t0E0A = prim *0038<$[3]> (dPos0D23, _t0E09);
    vec3 _t0E0B = prim +0017<$[3]> (refPos0D22, _t0E0A);
    vec3 _t0E0C = prim +0017<$[3]> (_t0DFC, _t0E0B);
    real _t0E0D = _t0E0C[0];
    real _t0E0E = -0.e0;
    bool _t0E0F = prim >0080 (_t0E0D, _t0E0E);
    real _t0E10 = 0.1e-7;
    real _t0E11 = 0.1e-7;
    real _t0E12 = 0.1e-7;
    vec3 _t0E13 = [_t0E10, _t0E11, _t0E12];
    real _t0E14 = 0.e0;
    real _t0E15 = -0.1e1;
    real _t0E16 = 0.e0;
    real _t0E17 = 0.e0;
    vec3 _t0E18 = [_t0E15, _t0E16, _t0E17];
    real _t0E19 = prim •00CE<$[3]; $[3]; $[]> (_t0E18, refPos0D22);
    real _t0E1A = prim -0026<$[]> (_t0E14, _t0E19);
    real _t0E1B = -0.1e1;
    real _t0E1C = 0.e0;
    real _t0E1D = 0.e0;
    vec3 _t0E1E = [_t0E1B, _t0E1C, _t0E1D];
    real _t0E1F = prim •00CE<$[3]; $[3]; $[]> (_t0E1E, dPos0D23);
    real _t0E20 = prim /0055 (_t0E1A, _t0E1F);
    vec3 _t0E21 = prim *0038<$[3]> (dPos0D23, _t0E20);
    vec3 _t0E22 = prim +0017<$[3]> (refPos0D22, _t0E21);
    vec3 _t0E23 = prim +0017<$[3]> (_t0E13, _t0E22);
    real _t0E24 = _t0E23[1];
    real _t0E25 = -0.e0;
    bool _t0E26 = prim >0080 (_t0E24, _t0E25);
    real _t0E27 = 0.1e-7;
    real _t0E28 = 0.1e-7;
    real _t0E29 = 0.1e-7;
    vec3 _t0E2A = [_t0E27, _t0E28, _t0E29];
    real _t0E2B = 0.e0;
    real _t0E2C = -0.1e1;
    real _t0E2D = 0.e0;
    real _t0E2E = 0.e0;
    vec3 _t0E2F = [_t0E2C, _t0E2D, _t0E2E];
    real _t0E30 = prim •00CE<$[3]; $[3]; $[]> (_t0E2F, refPos0D22);
    real _t0E31 = prim -0026<$[]> (_t0E2B, _t0E30);
    real _t0E32 = -0.1e1;
    real _t0E33 = 0.e0;
    real _t0E34 = 0.e0;
    vec3 _t0E35 = [_t0E32, _t0E33, _t0E34];
    real _t0E36 = prim •00CE<$[3]; $[3]; $[]> (_t0E35, dPos0D23);
    real _t0E37 = prim /0055 (_t0E31, _t0E36);
    vec3 _t0E38 = prim *0038<$[3]> (dPos0D23, _t0E37);
    vec3 _t0E39 = prim +0017<$[3]> (refPos0D22, _t0E38);
    vec3 _t0E3A = prim +0017<$[3]> (_t0E2A, _t0E39);
    real _t0E3B = _t0E3A[2];
    real _t0E3C = -0.e0;
    bool _t0E3D = prim >0080 (_t0E3B, _t0E3C);
    bool _t0E3E = prim $and01C4 (_t0E26, _t0E3D);
    bool _t0E3F = prim $and01C4 (_t0E0F, _t0E3E);
    bool _t0E40 = prim $and01C4 (_t0DF8, _t0E3F);
    if _t0E40 {
      real _t0E41 = 0.e0;
      real _t0E42 = -0.1e1;
      real _t0E43 = 0.e0;
      real _t0E44 = 0.e0;
      vec3 _t0E45 = [_t0E42, _t0E43, _t0E44];
      real _t0E46 = prim •00CE<$[3]; $[3]; $[]> (_t0E45, refPos0D22);
      real _t0E47 = prim -0026<$[]> (_t0E41, _t0E46);
      real _t0E48 = -0.1e1;
      real _t0E49 = 0.e0;
      real _t0E4A = 0.e0;
      vec3 _t0E4B = [_t0E48, _t0E49, _t0E4A];
      real _t0E4C = prim •00CE<$[3]; $[3]; $[]> (_t0E4B, dPos0D23);
      time0D24 = prim /0055 (_t0E47, _t0E4C);
      face0D25 = 1;
    }
  }
  real _t0E4D = 0.e0;
  real _t0E4E = 0.e0;
  real _t0E4F = -0.1e1;
  real _t0E50 = 0.e0;
  vec3 _t0E51 = [_t0E4E, _t0E4F, _t0E50];
  real _t0E52 = prim •00CE<$[3]; $[3]; $[]> (_t0E51, refPos0D22);
  real _t0E53 = prim -0026<$[]> (_t0E4D, _t0E52);
  real _t0E54 = 0.e0;
  real _t0E55 = -0.1e1;
  real _t0E56 = 0.e0;
  vec3 _t0E57 = [_t0E54, _t0E55, _t0E56];
  real _t0E58 = prim •00CE<$[3]; $[3]; $[]> (_t0E57, dPos0D23);
  real _t0E59 = prim /0055 (_t0E53, _t0E58);
  real _t0E5A = -0.1e-7;
  bool _t0E5B = prim >=007E (_t0E59, _t0E5A);
  real _t0E5C = 0.e0;
  real _t0E5D = 0.e0;
  real _t0E5E = -0.1e1;
  real _t0E5F = 0.e0;
  vec3 _t0E60 = [_t0E5D, _t0E5E, _t0E5F];
  real _t0E61 = prim •00CE<$[3]; $[3]; $[]> (_t0E60, refPos0D22);
  real _t0E62 = prim -0026<$[]> (_t0E5C, _t0E61);
  real _t0E63 = 0.e0;
  real _t0E64 = -0.1e1;
  real _t0E65 = 0.e0;
  vec3 _t0E66 = [_t0E63, _t0E64, _t0E65];
  real _t0E67 = prim •00CE<$[3]; $[3]; $[]> (_t0E66, dPos0D23);
  real _t0E68 = prim /0055 (_t0E62, _t0E67);
  bool _t0E69 = prim >0080 (time0D24, _t0E68);
  real _t0E6A = 0.e0;
  real _t0E6B = -0.1e1;
  real _t0E6C = 0.e0;
  vec3 _t0E6D = [_t0E6A, _t0E6B, _t0E6C];
  real _t0E6E = prim •00CE<$[3]; $[3]; $[]> (_t0E6D, dPos0D23);
  real _t0E6F = prim |()|00B5<$[]> (_t0E6E);
  real _t0E70 = 0.1e-7;
  bool _t0E71 = prim >=007E (_t0E6F, _t0E70);
  bool _t0E72 = prim $and01C4 (_t0E69, _t0E71);
  bool _t0E73 = prim $and01C4 (_t0E5B, _t0E72);
  if _t0E73 {
    real _t0E74 = 0.1e1;
    real _t0E75 = 0.1e-7;
    real _t0E76 = prim +0017<$[]> (_t0E74, _t0E75);
    real _t0E77 = 0.1e1;
    real _t0E78 = 0.1e1;
    real _t0E79 = 0.1e1;
    vec3 _t0E7A = [_t0E77, _t0E78, _t0E79];
    real _t0E7B = 0.e0;
    real _t0E7C = 0.e0;
    real _t0E7D = -0.1e1;
    real _t0E7E = 0.e0;
    vec3 _t0E7F = [_t0E7C, _t0E7D, _t0E7E];
    real _t0E80 = prim •00CE<$[3]; $[3]; $[]> (_t0E7F, refPos0D22);
    real _t0E81 = prim -0026<$[]> (_t0E7B, _t0E80);
    real _t0E82 = 0.e0;
    real _t0E83 = -0.1e1;
    real _t0E84 = 0.e0;
    vec3 _t0E85 = [_t0E82, _t0E83, _t0E84];
    real _t0E86 = prim •00CE<$[3]; $[3]; $[]> (_t0E85, dPos0D23);
    real _t0E87 = prim /0055 (_t0E81, _t0E86);
    vec3 _t0E88 = prim *0038<$[3]> (dPos0D23, _t0E87);
    vec3 _t0E89 = prim +0017<$[3]> (refPos0D22, _t0E88);
    real _t0E8A = prim •00CE<$[3]; $[3]; $[]> (_t0E7A, _t0E89);
    bool _t0E8B = prim >0080 (_t0E76, _t0E8A);
    real _t0E8C = 0.1e-7;
    real _t0E8D = 0.1e-7;
    real _t0E8E = 0.1e-7;
    vec3 _t0E8F = [_t0E8C, _t0E8D, _t0E8E];
    real _t0E90 = 0.e0;
    real _t0E91 = 0.e0;
    real _t0E92 = -0.1e1;
    real _t0E93 = 0.e0;
    vec3 _t0E94 = [_t0E91, _t0E92, _t0E93];
    real _t0E95 = prim •00CE<$[3]; $[3]; $[]> (_t0E94, refPos0D22);
    real _t0E96 = prim -0026<$[]> (_t0E90, _t0E95);
    real _t0E97 = 0.e0;
    real _t0E98 = -0.1e1;
    real _t0E99 = 0.e0;
    vec3 _t0E9A = [_t0E97, _t0E98, _t0E99];
    real _t0E9B = prim •00CE<$[3]; $[3]; $[]> (_t0E9A, dPos0D23);
    real _t0E9C = prim /0055 (_t0E96, _t0E9B);
    vec3 _t0E9D = prim *0038<$[3]> (dPos0D23, _t0E9C);
    vec3 _t0E9E = prim +0017<$[3]> (refPos0D22, _t0E9D);
    vec3 _t0E9F = prim +0017<$[3]> (_t0E8F, _t0E9E);
    real _t0EA0 = _t0E9F[0];
    real _t0EA1 = -0.e0;
    bool _t0EA2 = prim >0080 (_t0EA0, _t0EA1);
    real _t0EA3 = 0.1e-7;
    real _t0EA4 = 0.1e-7;
    real _t0EA5 = 0.1e-7;
    vec3 _t0EA6 = [_t0EA3, _t0EA4, _t0EA5];
    real _t0EA7 = 0.e0;
    real _t0EA8 = 0.e0;
    real _t0EA9 = -0.1e1;
    real _t0EAA = 0.e0;
    vec3 _t0EAB = [_t0EA8, _t0EA9, _t0EAA];
    real _t0EAC = prim •00CE<$[3]; $[3]; $[]> (_t0EAB, refPos0D22);
    real _t0EAD = prim -0026<$[]> (_t0EA7, _t0EAC);
    real _t0EAE = 0.e0;
    real _t0EAF = -0.1e1;
    real _t0EB0 = 0.e0;
    vec3 _t0EB1 = [_t0EAE, _t0EAF, _t0EB0];
    real _t0EB2 = prim •00CE<$[3]; $[3]; $[]> (_t0EB1, dPos0D23);
    real _t0EB3 = prim /0055 (_t0EAD, _t0EB2);
    vec3 _t0EB4 = prim *0038<$[3]> (dPos0D23, _t0EB3);
    vec3 _t0EB5 = prim +0017<$[3]> (refPos0D22, _t0EB4);
    vec3 _t0EB6 = prim +0017<$[3]> (_t0EA6, _t0EB5);
    real _t0EB7 = _t0EB6[1];
    real _t0EB8 = -0.e0;
    bool _t0EB9 = prim >0080 (_t0EB7, _t0EB8);
    real _t0EBA = 0.1e-7;
    real _t0EBB = 0.1e-7;
    real _t0EBC = 0.1e-7;
    vec3 _t0EBD = [_t0EBA, _t0EBB, _t0EBC];
    real _t0EBE = 0.e0;
    real _t0EBF = 0.e0;
    real _t0EC0 = -0.1e1;
    real _t0EC1 = 0.e0;
    vec3 _t0EC2 = [_t0EBF, _t0EC0, _t0EC1];
    real _t0EC3 = prim •00CE<$[3]; $[3]; $[]> (_t0EC2, refPos0D22);
    real _t0EC4 = prim -0026<$[]> (_t0EBE, _t0EC3);
    real _t0EC5 = 0.e0;
    real _t0EC6 = -0.1e1;
    real _t0EC7 = 0.e0;
    vec3 _t0EC8 = [_t0EC5, _t0EC6, _t0EC7];
    real _t0EC9 = prim •00CE<$[3]; $[3]; $[]> (_t0EC8, dPos0D23);
    real _t0ECA = prim /0055 (_t0EC4, _t0EC9);
    vec3 _t0ECB = prim *0038<$[3]> (dPos0D23, _t0ECA);
    vec3 _t0ECC = prim +0017<$[3]> (refPos0D22, _t0ECB);
    vec3 _t0ECD = prim +0017<$[3]> (_t0EBD, _t0ECC);
    real _t0ECE = _t0ECD[2];
    real _t0ECF = -0.e0;
    bool _t0ED0 = prim >0080 (_t0ECE, _t0ECF);
    bool _t0ED1 = prim $and01C4 (_t0EB9, _t0ED0);
    bool _t0ED2 = prim $and01C4 (_t0EA2, _t0ED1);
    bool _t0ED3 = prim $and01C4 (_t0E8B, _t0ED2);
    if _t0ED3 {
      real _t0ED4 = 0.e0;
      real _t0ED5 = 0.e0;
      real _t0ED6 = -0.1e1;
      real _t0ED7 = 0.e0;
      vec3 _t0ED8 = [_t0ED5, _t0ED6, _t0ED7];
      real _t0ED9 = prim •00CE<$[3]; $[3]; $[]> (_t0ED8, refPos0D22);
      real _t0EDA = prim -0026<$[]> (_t0ED4, _t0ED9);
      real _t0EDB = 0.e0;
      real _t0EDC = -0.1e1;
      real _t0EDD = 0.e0;
      vec3 _t0EDE = [_t0EDB, _t0EDC, _t0EDD];
      real _t0EDF = prim •00CE<$[3]; $[3]; $[]> (_t0EDE, dPos0D23);
      time0D24 = prim /0055 (_t0EDA, _t0EDF);
      face0D25 = 2;
    }
  }
  real _t0EE0 = 0.e0;
  real _t0EE1 = 0.e0;
  real _t0EE2 = 0.e0;
  real _t0EE3 = -0.1e1;
  vec3 _t0EE4 = [_t0EE1, _t0EE2, _t0EE3];
  real _t0EE5 = prim •00CE<$[3]; $[3]; $[]> (_t0EE4, refPos0D22);
  real _t0EE6 = prim -0026<$[]> (_t0EE0, _t0EE5);
  real _t0EE7 = 0.e0;
  real _t0EE8 = 0.e0;
  real _t0EE9 = -0.1e1;
  vec3 _t0EEA = [_t0EE7, _t0EE8, _t0EE9];
  real _t0EEB = prim •00CE<$[3]; $[3]; $[]> (_t0EEA, dPos0D23);
  real _t0EEC = prim /0055 (_t0EE6, _t0EEB);
  real _t0EED = -0.1e-7;
  bool _t0EEE = prim >=007E (_t0EEC, _t0EED);
  real _t0EEF = 0.e0;
  real _t0EF0 = 0.e0;
  real _t0EF1 = 0.e0;
  real _t0EF2 = -0.1e1;
  vec3 _t0EF3 = [_t0EF0, _t0EF1, _t0EF2];
  real _t0EF4 = prim •00CE<$[3]; $[3]; $[]> (_t0EF3, refPos0D22);
  real _t0EF5 = prim -0026<$[]> (_t0EEF, _t0EF4);
  real _t0EF6 = 0.e0;
  real _t0EF7 = 0.e0;
  real _t0EF8 = -0.1e1;
  vec3 _t0EF9 = [_t0EF6, _t0EF7, _t0EF8];
  real _t0EFA = prim •00CE<$[3]; $[3]; $[]> (_t0EF9, dPos0D23);
  real _t0EFB = prim /0055 (_t0EF5, _t0EFA);
  bool _t0EFC = prim >0080 (time0D24, _t0EFB);
  real _t0EFD = 0.e0;
  real _t0EFE = 0.e0;
  real _t0EFF = -0.1e1;
  vec3 _t0F00 = [_t0EFD, _t0EFE, _t0EFF];
  real _t0F01 = prim •00CE<$[3]; $[3]; $[]> (_t0F00, dPos0D23);
  real _t0F02 = prim |()|00B5<$[]> (_t0F01);
  real _t0F03 = 0.1e-7;
  bool _t0F04 = prim >=007E (_t0F02, _t0F03);
  bool _t0F05 = prim $and01C4 (_t0EFC, _t0F04);
  bool _t0F06 = prim $and01C4 (_t0EEE, _t0F05);
  if _t0F06 {
    real _t0F07 = 0.1e1;
    real _t0F08 = 0.1e-7;
    real _t0F09 = prim +0017<$[]> (_t0F07, _t0F08);
    real _t0F0A = 0.1e1;
    real _t0F0B = 0.1e1;
    real _t0F0C = 0.1e1;
    vec3 _t0F0D = [_t0F0A, _t0F0B, _t0F0C];
    real _t0F0E = 0.e0;
    real _t0F0F = 0.e0;
    real _t0F10 = 0.e0;
    real _t0F11 = -0.1e1;
    vec3 _t0F12 = [_t0F0F, _t0F10, _t0F11];
    real _t0F13 = prim •00CE<$[3]; $[3]; $[]> (_t0F12, refPos0D22);
    real _t0F14 = prim -0026<$[]> (_t0F0E, _t0F13);
    real _t0F15 = 0.e0;
    real _t0F16 = 0.e0;
    real _t0F17 = -0.1e1;
    vec3 _t0F18 = [_t0F15, _t0F16, _t0F17];
    real _t0F19 = prim •00CE<$[3]; $[3]; $[]> (_t0F18, dPos0D23);
    real _t0F1A = prim /0055 (_t0F14, _t0F19);
    vec3 _t0F1B = prim *0038<$[3]> (dPos0D23, _t0F1A);
    vec3 _t0F1C = prim +0017<$[3]> (refPos0D22, _t0F1B);
    real _t0F1D = prim •00CE<$[3]; $[3]; $[]> (_t0F0D, _t0F1C);
    bool _t0F1E = prim >0080 (_t0F09, _t0F1D);
    real _t0F1F = 0.1e-7;
    real _t0F20 = 0.1e-7;
    real _t0F21 = 0.1e-7;
    vec3 _t0F22 = [_t0F1F, _t0F20, _t0F21];
    real _t0F23 = 0.e0;
    real _t0F24 = 0.e0;
    real _t0F25 = 0.e0;
    real _t0F26 = -0.1e1;
    vec3 _t0F27 = [_t0F24, _t0F25, _t0F26];
    real _t0F28 = prim •00CE<$[3]; $[3]; $[]> (_t0F27, refPos0D22);
    real _t0F29 = prim -0026<$[]> (_t0F23, _t0F28);
    real _t0F2A = 0.e0;
    real _t0F2B = 0.e0;
    real _t0F2C = -0.1e1;
    vec3 _t0F2D = [_t0F2A, _t0F2B, _t0F2C];
    real _t0F2E = prim •00CE<$[3]; $[3]; $[]> (_t0F2D, dPos0D23);
    real _t0F2F = prim /0055 (_t0F29, _t0F2E);
    vec3 _t0F30 = prim *0038<$[3]> (dPos0D23, _t0F2F);
    vec3 _t0F31 = prim +0017<$[3]> (refPos0D22, _t0F30);
    vec3 _t0F32 = prim +0017<$[3]> (_t0F22, _t0F31);
    real _t0F33 = _t0F32[0];
    real _t0F34 = -0.e0;
    bool _t0F35 = prim >0080 (_t0F33, _t0F34);
    real _t0F36 = 0.1e-7;
    real _t0F37 = 0.1e-7;
    real _t0F38 = 0.1e-7;
    vec3 _t0F39 = [_t0F36, _t0F37, _t0F38];
    real _t0F3A = 0.e0;
    real _t0F3B = 0.e0;
    real _t0F3C = 0.e0;
    real _t0F3D = -0.1e1;
    vec3 _t0F3E = [_t0F3B, _t0F3C, _t0F3D];
    real _t0F3F = prim •00CE<$[3]; $[3]; $[]> (_t0F3E, refPos0D22);
    real _t0F40 = prim -0026<$[]> (_t0F3A, _t0F3F);
    real _t0F41 = 0.e0;
    real _t0F42 = 0.e0;
    real _t0F43 = -0.1e1;
    vec3 _t0F44 = [_t0F41, _t0F42, _t0F43];
    real _t0F45 = prim •00CE<$[3]; $[3]; $[]> (_t0F44, dPos0D23);
    real _t0F46 = prim /0055 (_t0F40, _t0F45);
    vec3 _t0F47 = prim *0038<$[3]> (dPos0D23, _t0F46);
    vec3 _t0F48 = prim +0017<$[3]> (refPos0D22, _t0F47);
    vec3 _t0F49 = prim +0017<$[3]> (_t0F39, _t0F48);
    real _t0F4A = _t0F49[1];
    real _t0F4B = -0.e0;
    bool _t0F4C = prim >0080 (_t0F4A, _t0F4B);
    real _t0F4D = 0.1e-7;
    real _t0F4E = 0.1e-7;
    real _t0F4F = 0.1e-7;
    vec3 _t0F50 = [_t0F4D, _t0F4E, _t0F4F];
    real _t0F51 = 0.e0;
    real _t0F52 = 0.e0;
    real _t0F53 = 0.e0;
    real _t0F54 = -0.1e1;
    vec3 _t0F55 = [_t0F52, _t0F53, _t0F54];
    real _t0F56 = prim •00CE<$[3]; $[3]; $[]> (_t0F55, refPos0D22);
    real _t0F57 = prim -0026<$[]> (_t0F51, _t0F56);
    real _t0F58 = 0.e0;
    real _t0F59 = 0.e0;
    real _t0F5A = -0.1e1;
    vec3 _t0F5B = [_t0F58, _t0F59, _t0F5A];
    real _t0F5C = prim •00CE<$[3]; $[3]; $[]> (_t0F5B, dPos0D23);
    real _t0F5D = prim /0055 (_t0F57, _t0F5C);
    vec3 _t0F5E = prim *0038<$[3]> (dPos0D23, _t0F5D);
    vec3 _t0F5F = prim +0017<$[3]> (refPos0D22, _t0F5E);
    vec3 _t0F60 = prim +0017<$[3]> (_t0F50, _t0F5F);
    real _t0F61 = _t0F60[2];
    real _t0F62 = -0.e0;
    bool _t0F63 = prim >0080 (_t0F61, _t0F62);
    bool _t0F64 = prim $and01C4 (_t0F4C, _t0F63);
    bool _t0F65 = prim $and01C4 (_t0F35, _t0F64);
    bool _t0F66 = prim $and01C4 (_t0F1E, _t0F65);
    if _t0F66 {
      real _t0F67 = 0.e0;
      real _t0F68 = 0.e0;
      real _t0F69 = 0.e0;
      real _t0F6A = -0.1e1;
      vec3 _t0F6B = [_t0F68, _t0F69, _t0F6A];
      real _t0F6C = prim •00CE<$[3]; $[3]; $[]> (_t0F6B, refPos0D22);
      real _t0F6D = prim -0026<$[]> (_t0F67, _t0F6C);
      real _t0F6E = 0.e0;
      real _t0F6F = 0.e0;
      real _t0F70 = -0.1e1;
      vec3 _t0F71 = [_t0F6E, _t0F6F, _t0F70];
      real _t0F72 = prim •00CE<$[3]; $[3]; $[]> (_t0F71, dPos0D23);
      time0D24 = prim /0055 (_t0F6D, _t0F72);
      face0D25 = 3;
    }
  }
  int _t0F73 = -1;
  bool _t0F74 = prim !=0086 (face0D25, _t0F73);
  real _t0F75 = 0.1e1;
  real _t0F76 = 0.1e-7;
  real _t0F77 = prim +0017<$[]> (_t0F75, _t0F76);
  real _t0F78 = 0.1e1;
  real _t0F79 = 0.1e1;
  real _t0F7A = 0.1e1;
  vec3 _t0F7B = [_t0F78, _t0F79, _t0F7A];
  real _t0F7C = 0.e0;
  real _t0F7D = prim max0125 (time0D24, _t0F7C);
  vec3 _t0F7E = prim *0038<$[3]> (dPos0D23, _t0F7D);
  vec3 _t0F7F = prim +0017<$[3]> (refPos0D22, _t0F7E);
  real _t0F80 = prim •00CE<$[3]; $[3]; $[]> (_t0F7B, _t0F7F);
  bool _t0F81 = prim >0080 (_t0F77, _t0F80);
  real _t0F82 = 0.1e-7;
  real _t0F83 = 0.1e-7;
  real _t0F84 = 0.1e-7;
  vec3 _t0F85 = [_t0F82, _t0F83, _t0F84];
  real _t0F86 = 0.e0;
  real _t0F87 = prim max0125 (time0D24, _t0F86);
  vec3 _t0F88 = prim *0038<$[3]> (dPos0D23, _t0F87);
  vec3 _t0F89 = prim +0017<$[3]> (refPos0D22, _t0F88);
  vec3 _t0F8A = prim +0017<$[3]> (_t0F85, _t0F89);
  real _t0F8B = _t0F8A[0];
  real _t0F8C = -0.e0;
  bool _t0F8D = prim >0080 (_t0F8B, _t0F8C);
  real _t0F8E = 0.1e-7;
  real _t0F8F = 0.1e-7;
  real _t0F90 = 0.1e-7;
  vec3 _t0F91 = [_t0F8E, _t0F8F, _t0F90];
  real _t0F92 = 0.e0;
  real _t0F93 = prim max0125 (time0D24, _t0F92);
  vec3 _t0F94 = prim *0038<$[3]> (dPos0D23, _t0F93);
  vec3 _t0F95 = prim +0017<$[3]> (refPos0D22, _t0F94);
  vec3 _t0F96 = prim +0017<$[3]> (_t0F91, _t0F95);
  real _t0F97 = _t0F96[1];
  real _t0F98 = -0.e0;
  bool _t0F99 = prim >0080 (_t0F97, _t0F98);
  real _t0F9A = 0.1e-7;
  real _t0F9B = 0.1e-7;
  real _t0F9C = 0.1e-7;
  vec3 _t0F9D = [_t0F9A, _t0F9B, _t0F9C];
  real _t0F9E = 0.e0;
  real _t0F9F = prim max0125 (time0D24, _t0F9E);
  vec3 _t0FA0 = prim *0038<$[3]> (dPos0D23, _t0F9F);
  vec3 _t0FA1 = prim +0017<$[3]> (refPos0D22, _t0FA0);
  vec3 _t0FA2 = prim +0017<$[3]> (_t0F9D, _t0FA1);
  real _t0FA3 = _t0FA2[2];
  real _t0FA4 = -0.e0;
  bool _t0FA5 = prim >0080 (_t0FA3, _t0FA4);
  bool _t0FA6 = prim $and01C4 (_t0F99, _t0FA5);
  bool _t0FA7 = prim $and01C4 (_t0F8D, _t0FA6);
  bool _t0FA8 = prim $and01C4 (_t0F81, _t0FA7);
  bool _t0FA9 = prim $and01C4 (_t0F74, _t0FA8);
  if _t0FA9 {
    real _t0FAA = 0.e0;
    real _t0FAB = prim max0125 (time0D24, _t0FAA);
    real _t0FAC = (real)face0D25;
    vec2 _t0FAD = [_t0FAB, _t0FAC];
    return _t0FAD;
  } else {
    real _t0FAE = -0.1e1;
    real _t0FAF = -0.1e1;
    vec2 _t0FB0 = [_t0FAE, _t0FAF];
    return _t0FB0;
  }
}
function vec2#0 _exit0FB1 (vec3 refPos0D22, vec3 dPos0D23, int i0FB2)
{
  real time0FB3 = +inf;
  int face0FB4 = -1;
  real faceTime0FB5 = -inf;
  real _t0FB6 = 0.57735026919e0;
  real _t0FB7 = 0.57735026919e0;
  real _t0FB8 = 0.57735026919e0;
  real _t0FB9 = 0.57735026919e0;
  vec3 _t0FBA = [_t0FB7, _t0FB8, _t0FB9];
  real _t0FBB = prim •00CE<$[3]; $[3]; $[]> (_t0FBA, refPos0D22);
  real _t0FBC = prim -0026<$[]> (_t0FB6, _t0FBB);
  real _t0FBD = 0.57735026919e0;
  real _t0FBE = 0.57735026919e0;
  real _t0FBF = 0.57735026919e0;
  vec3 _t0FC0 = [_t0FBD, _t0FBE, _t0FBF];
  real _t0FC1 = prim •00CE<$[3]; $[3]; $[]> (_t0FC0, dPos0D23);
  real _t0FC2 = prim /0055 (_t0FBC, _t0FC1);
  real _t0FC3 = -0.1e-7;
  bool _t0FC4 = prim >=007E (_t0FC2, _t0FC3);
  real _t0FC5 = 0.57735026919e0;
  real _t0FC6 = 0.57735026919e0;
  real _t0FC7 = 0.57735026919e0;
  real _t0FC8 = 0.57735026919e0;
  vec3 _t0FC9 = [_t0FC6, _t0FC7, _t0FC8];
  real _t0FCA = prim •00CE<$[3]; $[3]; $[]> (_t0FC9, refPos0D22);
  real _t0FCB = prim -0026<$[]> (_t0FC5, _t0FCA);
  real _t0FCC = 0.57735026919e0;
  real _t0FCD = 0.57735026919e0;
  real _t0FCE = 0.57735026919e0;
  vec3 _t0FCF = [_t0FCC, _t0FCD, _t0FCE];
  real _t0FD0 = prim •00CE<$[3]; $[3]; $[]> (_t0FCF, dPos0D23);
  real _t0FD1 = prim /0055 (_t0FCB, _t0FD0);
  bool _t0FD2 = prim >0080 (time0FB3, _t0FD1);
  real _t0FD3 = 0.57735026919e0;
  real _t0FD4 = 0.57735026919e0;
  real _t0FD5 = 0.57735026919e0;
  vec3 _t0FD6 = [_t0FD3, _t0FD4, _t0FD5];
  real _t0FD7 = prim •00CE<$[3]; $[3]; $[]> (_t0FD6, dPos0D23);
  real _t0FD8 = prim |()|00B5<$[]> (_t0FD7);
  real _t0FD9 = 0.1e-7;
  bool _t0FDA = prim >=007E (_t0FD8, _t0FD9);
  bool _t0FDB = prim $and01C4 (_t0FD2, _t0FDA);
  bool _t0FDC = prim $and01C4 (_t0FC4, _t0FDB);
  if _t0FDC {
    int _t0FDD = 0;
    bool _t0FDE = prim !=0086 (i0FB2, _t0FDD);
    if _t0FDE {
      real _t0FDF = 0.57735026919e0;
      real _t0FE0 = 0.57735026919e0;
      real _t0FE1 = 0.57735026919e0;
      real _t0FE2 = 0.57735026919e0;
      vec3 _t0FE3 = [_t0FE0, _t0FE1, _t0FE2];
      real _t0FE4 = prim •00CE<$[3]; $[3]; $[]> (_t0FE3, refPos0D22);
      real _t0FE5 = prim -0026<$[]> (_t0FDF, _t0FE4);
      real _t0FE6 = 0.57735026919e0;
      real _t0FE7 = 0.57735026919e0;
      real _t0FE8 = 0.57735026919e0;
      vec3 _t0FE9 = [_t0FE6, _t0FE7, _t0FE8];
      real _t0FEA = prim •00CE<$[3]; $[3]; $[]> (_t0FE9, dPos0D23);
      time0FB3 = prim /0055 (_t0FE5, _t0FEA);
      face0FB4 = 0;
    } else {
      real _t0FEB = 0.57735026919e0;
      real _t0FEC = 0.57735026919e0;
      real _t0FED = 0.57735026919e0;
      real _t0FEE = 0.57735026919e0;
      vec3 _t0FEF = [_t0FEC, _t0FED, _t0FEE];
      real _t0FF0 = prim •00CE<$[3]; $[3]; $[]> (_t0FEF, refPos0D22);
      real _t0FF1 = prim -0026<$[]> (_t0FEB, _t0FF0);
      real _t0FF2 = 0.57735026919e0;
      real _t0FF3 = 0.57735026919e0;
      real _t0FF4 = 0.57735026919e0;
      vec3 _t0FF5 = [_t0FF2, _t0FF3, _t0FF4];
      real _t0FF6 = prim •00CE<$[3]; $[3]; $[]> (_t0FF5, dPos0D23);
      faceTime0FB5 = prim /0055 (_t0FF1, _t0FF6);
    }
  }
  real _t0FF7 = 0.e0;
  real _t0FF8 = -0.1e1;
  real _t0FF9 = 0.e0;
  real _t0FFA = 0.e0;
  vec3 _t0FFB = [_t0FF8, _t0FF9, _t0FFA];
  real _t0FFC = prim •00CE<$[3]; $[3]; $[]> (_t0FFB, refPos0D22);
  real _t0FFD = prim -0026<$[]> (_t0FF7, _t0FFC);
  real _t0FFE = -0.1e1;
  real _t0FFF = 0.e0;
  real _t1000 = 0.e0;
  vec3 _t1001 = [_t0FFE, _t0FFF, _t1000];
  real _t1002 = prim •00CE<$[3]; $[3]; $[]> (_t1001, dPos0D23);
  real _t1003 = prim /0055 (_t0FFD, _t1002);
  real _t1004 = -0.1e-7;
  bool _t1005 = prim >=007E (_t1003, _t1004);
  real _t1006 = 0.e0;
  real _t1007 = -0.1e1;
  real _t1008 = 0.e0;
  real _t1009 = 0.e0;
  vec3 _t100A = [_t1007, _t1008, _t1009];
  real _t100B = prim •00CE<$[3]; $[3]; $[]> (_t100A, refPos0D22);
  real _t100C = prim -0026<$[]> (_t1006, _t100B);
  real _t100D = -0.1e1;
  real _t100E = 0.e0;
  real _t100F = 0.e0;
  vec3 _t1010 = [_t100D, _t100E, _t100F];
  real _t1011 = prim •00CE<$[3]; $[3]; $[]> (_t1010, dPos0D23);
  real _t1012 = prim /0055 (_t100C, _t1011);
  bool _t1013 = prim >0080 (time0FB3, _t1012);
  real _t1014 = -0.1e1;
  real _t1015 = 0.e0;
  real _t1016 = 0.e0;
  vec3 _t1017 = [_t1014, _t1015, _t1016];
  real _t1018 = prim •00CE<$[3]; $[3]; $[]> (_t1017, dPos0D23);
  real _t1019 = prim |()|00B5<$[]> (_t1018);
  real _t101A = 0.1e-7;
  bool _t101B = prim >=007E (_t1019, _t101A);
  bool _t101C = prim $and01C4 (_t1013, _t101B);
  bool _t101D = prim $and01C4 (_t1005, _t101C);
  if _t101D {
    int _t101E = 1;
    bool _t101F = prim !=0086 (i0FB2, _t101E);
    if _t101F {
      real _t1020 = 0.e0;
      real _t1021 = -0.1e1;
      real _t1022 = 0.e0;
      real _t1023 = 0.e0;
      vec3 _t1024 = [_t1021, _t1022, _t1023];
      real _t1025 = prim •00CE<$[3]; $[3]; $[]> (_t1024, refPos0D22);
      real _t1026 = prim -0026<$[]> (_t1020, _t1025);
      real _t1027 = -0.1e1;
      real _t1028 = 0.e0;
      real _t1029 = 0.e0;
      vec3 _t102A = [_t1027, _t1028, _t1029];
      real _t102B = prim •00CE<$[3]; $[3]; $[]> (_t102A, dPos0D23);
      time0FB3 = prim /0055 (_t1026, _t102B);
      face0FB4 = 1;
    } else {
      real _t102C = 0.e0;
      real _t102D = -0.1e1;
      real _t102E = 0.e0;
      real _t102F = 0.e0;
      vec3 _t1030 = [_t102D, _t102E, _t102F];
      real _t1031 = prim •00CE<$[3]; $[3]; $[]> (_t1030, refPos0D22);
      real _t1032 = prim -0026<$[]> (_t102C, _t1031);
      real _t1033 = -0.1e1;
      real _t1034 = 0.e0;
      real _t1035 = 0.e0;
      vec3 _t1036 = [_t1033, _t1034, _t1035];
      real _t1037 = prim •00CE<$[3]; $[3]; $[]> (_t1036, dPos0D23);
      faceTime0FB5 = prim /0055 (_t1032, _t1037);
    }
  }
  real _t1038 = 0.e0;
  real _t1039 = 0.e0;
  real _t103A = -0.1e1;
  real _t103B = 0.e0;
  vec3 _t103C = [_t1039, _t103A, _t103B];
  real _t103D = prim •00CE<$[3]; $[3]; $[]> (_t103C, refPos0D22);
  real _t103E = prim -0026<$[]> (_t1038, _t103D);
  real _t103F = 0.e0;
  real _t1040 = -0.1e1;
  real _t1041 = 0.e0;
  vec3 _t1042 = [_t103F, _t1040, _t1041];
  real _t1043 = prim •00CE<$[3]; $[3]; $[]> (_t1042, dPos0D23);
  real _t1044 = prim /0055 (_t103E, _t1043);
  real _t1045 = -0.1e-7;
  bool _t1046 = prim >=007E (_t1044, _t1045);
  real _t1047 = 0.e0;
  real _t1048 = 0.e0;
  real _t1049 = -0.1e1;
  real _t104A = 0.e0;
  vec3 _t104B = [_t1048, _t1049, _t104A];
  real _t104C = prim •00CE<$[3]; $[3]; $[]> (_t104B, refPos0D22);
  real _t104D = prim -0026<$[]> (_t1047, _t104C);
  real _t104E = 0.e0;
  real _t104F = -0.1e1;
  real _t1050 = 0.e0;
  vec3 _t1051 = [_t104E, _t104F, _t1050];
  real _t1052 = prim •00CE<$[3]; $[3]; $[]> (_t1051, dPos0D23);
  real _t1053 = prim /0055 (_t104D, _t1052);
  bool _t1054 = prim >0080 (time0FB3, _t1053);
  real _t1055 = 0.e0;
  real _t1056 = -0.1e1;
  real _t1057 = 0.e0;
  vec3 _t1058 = [_t1055, _t1056, _t1057];
  real _t1059 = prim •00CE<$[3]; $[3]; $[]> (_t1058, dPos0D23);
  real _t105A = prim |()|00B5<$[]> (_t1059);
  real _t105B = 0.1e-7;
  bool _t105C = prim >=007E (_t105A, _t105B);
  bool _t105D = prim $and01C4 (_t1054, _t105C);
  bool _t105E = prim $and01C4 (_t1046, _t105D);
  if _t105E {
    int _t105F = 2;
    bool _t1060 = prim !=0086 (i0FB2, _t105F);
    if _t1060 {
      real _t1061 = 0.e0;
      real _t1062 = 0.e0;
      real _t1063 = -0.1e1;
      real _t1064 = 0.e0;
      vec3 _t1065 = [_t1062, _t1063, _t1064];
      real _t1066 = prim •00CE<$[3]; $[3]; $[]> (_t1065, refPos0D22);
      real _t1067 = prim -0026<$[]> (_t1061, _t1066);
      real _t1068 = 0.e0;
      real _t1069 = -0.1e1;
      real _t106A = 0.e0;
      vec3 _t106B = [_t1068, _t1069, _t106A];
      real _t106C = prim •00CE<$[3]; $[3]; $[]> (_t106B, dPos0D23);
      time0FB3 = prim /0055 (_t1067, _t106C);
      face0FB4 = 2;
    } else {
      real _t106D = 0.e0;
      real _t106E = 0.e0;
      real _t106F = -0.1e1;
      real _t1070 = 0.e0;
      vec3 _t1071 = [_t106E, _t106F, _t1070];
      real _t1072 = prim •00CE<$[3]; $[3]; $[]> (_t1071, refPos0D22);
      real _t1073 = prim -0026<$[]> (_t106D, _t1072);
      real _t1074 = 0.e0;
      real _t1075 = -0.1e1;
      real _t1076 = 0.e0;
      vec3 _t1077 = [_t1074, _t1075, _t1076];
      real _t1078 = prim •00CE<$[3]; $[3]; $[]> (_t1077, dPos0D23);
      faceTime0FB5 = prim /0055 (_t1073, _t1078);
    }
  }
  real _t1079 = 0.e0;
  real _t107A = 0.e0;
  real _t107B = 0.e0;
  real _t107C = -0.1e1;
  vec3 _t107D = [_t107A, _t107B, _t107C];
  real _t107E = prim •00CE<$[3]; $[3]; $[]> (_t107D, refPos0D22);
  real _t107F = prim -0026<$[]> (_t1079, _t107E);
  real _t1080 = 0.e0;
  real _t1081 = 0.e0;
  real _t1082 = -0.1e1;
  vec3 _t1083 = [_t1080, _t1081, _t1082];
  real _t1084 = prim •00CE<$[3]; $[3]; $[]> (_t1083, dPos0D23);
  real _t1085 = prim /0055 (_t107F, _t1084);
  real _t1086 = -0.1e-7;
  bool _t1087 = prim >=007E (_t1085, _t1086);
  real _t1088 = 0.e0;
  real _t1089 = 0.e0;
  real _t108A = 0.e0;
  real _t108B = -0.1e1;
  vec3 _t108C = [_t1089, _t108A, _t108B];
  real _t108D = prim •00CE<$[3]; $[3]; $[]> (_t108C, refPos0D22);
  real _t108E = prim -0026<$[]> (_t1088, _t108D);
  real _t108F = 0.e0;
  real _t1090 = 0.e0;
  real _t1091 = -0.1e1;
  vec3 _t1092 = [_t108F, _t1090, _t1091];
  real _t1093 = prim •00CE<$[3]; $[3]; $[]> (_t1092, dPos0D23);
  real _t1094 = prim /0055 (_t108E, _t1093);
  bool _t1095 = prim >0080 (time0FB3, _t1094);
  real _t1096 = 0.e0;
  real _t1097 = 0.e0;
  real _t1098 = -0.1e1;
  vec3 _t1099 = [_t1096, _t1097, _t1098];
  real _t109A = prim •00CE<$[3]; $[3]; $[]> (_t1099, dPos0D23);
  real _t109B = prim |()|00B5<$[]> (_t109A);
  real _t109C = 0.1e-7;
  bool _t109D = prim >=007E (_t109B, _t109C);
  bool _t109E = prim $and01C4 (_t1095, _t109D);
  bool _t109F = prim $and01C4 (_t1087, _t109E);
  if _t109F {
    int _t10A0 = 3;
    bool _t10A1 = prim !=0086 (i0FB2, _t10A0);
    if _t10A1 {
      real _t10A2 = 0.e0;
      real _t10A3 = 0.e0;
      real _t10A4 = 0.e0;
      real _t10A5 = -0.1e1;
      vec3 _t10A6 = [_t10A3, _t10A4, _t10A5];
      real _t10A7 = prim •00CE<$[3]; $[3]; $[]> (_t10A6, refPos0D22);
      real _t10A8 = prim -0026<$[]> (_t10A2, _t10A7);
      real _t10A9 = 0.e0;
      real _t10AA = 0.e0;
      real _t10AB = -0.1e1;
      vec3 _t10AC = [_t10A9, _t10AA, _t10AB];
      real _t10AD = prim •00CE<$[3]; $[3]; $[]> (_t10AC, dPos0D23);
      time0FB3 = prim /0055 (_t10A8, _t10AD);
      face0FB4 = 3;
    } else {
      real _t10AE = 0.e0;
      real _t10AF = 0.e0;
      real _t10B0 = 0.e0;
      real _t10B1 = -0.1e1;
      vec3 _t10B2 = [_t10AF, _t10B0, _t10B1];
      real _t10B3 = prim •00CE<$[3]; $[3]; $[]> (_t10B2, refPos0D22);
      real _t10B4 = prim -0026<$[]> (_t10AE, _t10B3);
      real _t10B5 = 0.e0;
      real _t10B6 = 0.e0;
      real _t10B7 = -0.1e1;
      vec3 _t10B8 = [_t10B5, _t10B6, _t10B7];
      real _t10B9 = prim •00CE<$[3]; $[3]; $[]> (_t10B8, dPos0D23);
      faceTime0FB5 = prim /0055 (_t10B4, _t10B9);
    }
  }
  int _t10BA = -1;
  bool _t10BB = prim !=0086 (face0FB4, _t10BA);
  real _t10BC = 0.1e1;
  real _t10BD = 0.1e-7;
  real _t10BE = prim +0017<$[]> (_t10BC, _t10BD);
  real _t10BF = 0.1e1;
  real _t10C0 = 0.1e1;
  real _t10C1 = 0.1e1;
  vec3 _t10C2 = [_t10BF, _t10C0, _t10C1];
  real _t10C3 = 0.e0;
  real _t10C4 = prim max0125 (time0FB3, _t10C3);
  vec3 _t10C5 = prim *0038<$[3]> (dPos0D23, _t10C4);
  vec3 _t10C6 = prim +0017<$[3]> (refPos0D22, _t10C5);
  real _t10C7 = prim •00CE<$[3]; $[3]; $[]> (_t10C2, _t10C6);
  bool _t10C8 = prim >0080 (_t10BE, _t10C7);
  real _t10C9 = 0.1e-7;
  real _t10CA = 0.1e-7;
  real _t10CB = 0.1e-7;
  vec3 _t10CC = [_t10C9, _t10CA, _t10CB];
  real _t10CD = 0.e0;
  real _t10CE = prim max0125 (time0FB3, _t10CD);
  vec3 _t10CF = prim *0038<$[3]> (dPos0D23, _t10CE);
  vec3 _t10D0 = prim +0017<$[3]> (refPos0D22, _t10CF);
  vec3 _t10D1 = prim +0017<$[3]> (_t10CC, _t10D0);
  real _t10D2 = _t10D1[0];
  real _t10D3 = -0.e0;
  bool _t10D4 = prim >0080 (_t10D2, _t10D3);
  real _t10D5 = 0.1e-7;
  real _t10D6 = 0.1e-7;
  real _t10D7 = 0.1e-7;
  vec3 _t10D8 = [_t10D5, _t10D6, _t10D7];
  real _t10D9 = 0.e0;
  real _t10DA = prim max0125 (time0FB3, _t10D9);
  vec3 _t10DB = prim *0038<$[3]> (dPos0D23, _t10DA);
  vec3 _t10DC = prim +0017<$[3]> (refPos0D22, _t10DB);
  vec3 _t10DD = prim +0017<$[3]> (_t10D8, _t10DC);
  real _t10DE = _t10DD[1];
  real _t10DF = -0.e0;
  bool _t10E0 = prim >0080 (_t10DE, _t10DF);
  real _t10E1 = 0.1e-7;
  real _t10E2 = 0.1e-7;
  real _t10E3 = 0.1e-7;
  vec3 _t10E4 = [_t10E1, _t10E2, _t10E3];
  real _t10E5 = 0.e0;
  real _t10E6 = prim max0125 (time0FB3, _t10E5);
  vec3 _t10E7 = prim *0038<$[3]> (dPos0D23, _t10E6);
  vec3 _t10E8 = prim +0017<$[3]> (refPos0D22, _t10E7);
  vec3 _t10E9 = prim +0017<$[3]> (_t10E4, _t10E8);
  real _t10EA = _t10E9[2];
  real _t10EB = -0.e0;
  bool _t10EC = prim >0080 (_t10EA, _t10EB);
  bool _t10ED = prim $and01C4 (_t10E0, _t10EC);
  bool _t10EE = prim $and01C4 (_t10D4, _t10ED);
  bool _t10EF = prim $and01C4 (_t10C8, _t10EE);
  bool _t10F0 = prim $and01C4 (_t10BB, _t10EF);
  if _t10F0 {
    real _t10F1 = 0.e0;
    real _t10F2 = prim max0125 (time0FB3, _t10F1);
    real _t10F3 = (real)face0FB4;
    vec2 _t10F4 = [_t10F2, _t10F3];
    return _t10F4;
  } else {
    real _t10F5 = -inf;
    bool _t10F6 = prim ==0084 (_t10F5, faceTime0FB5);
    if _t10F6 {
      real _t10F7 = -0.1e1;
      real _t10F8 = -0.1e1;
      vec2 _t10F9 = [_t10F7, _t10F8];
      return _t10F9;
    } else {
      real _t10FA = 0.e0;
      real _t10FB = prim max0125 (faceTime0FB5, _t10FA);
      real _t10FC = (real)i0FB2;
      vec2 _t10FD = [_t10FB, _t10FC];
      return _t10FD;
    }
  }
}
function Femdata: Mesh#0 domain10FE (Femdata: Space arg010FF)
{
  Femdata: Mesh _t1100 = extractFem(arg010FF, Mesh);
  return _t1100;
}
function Femdata: Space#0 space1101 (Femdata: FemFunc arg01102)
{
  Femdata: Space _t1103 = extractFem(arg01102, Space);
  return _t1103;
}
function Femdata: FuncCell#0 funcCell1104 (Femdata: FemFunc arg01105, Femdata: MeshCell arg11106)
{
  int _t1107 = extractFemItem(CellIndex(MeshCell), int, arg11106);
  Femdata: FuncCell _t1108 = loadFem(FuncCell, arg01105, _t1107);
  return _t1108;
}
function bool#2 insideTest1116 (vec3 x1117)
{
  real _t1118 = 0.e0;
  real _t1119 = 0.e0;
  real _t111A = 0.e0;
  vec3 _t111B = [_t1118, _t1119, _t111A];
  vec3 mid111C = prim -0026<$[3]> (x1117, _t111B);
  bool _t111D;
  real _t111E = mid111C[0];
  real _t111F = prim |()|00B5<$[]> (_t111E);
  real _t1120 = 0.1e0;
  bool _t1121 = prim >0080 (_t111F, _t1120);
  if _t1121 {
    bool _t1122;
    real _t1123 = mid111C[1];
    real _t1124 = prim |()|00B5<$[]> (_t1123);
    real _t1125 = 0.1e0;
    bool _t1126 = prim >0080 (_t1124, _t1125);
    if _t1126 {
      real _t1127 = mid111C[2];
      real _t1128 = prim |()|00B5<$[]> (_t1127);
      real _t1129 = 0.1e0;
      _t1122 = prim >0080 (_t1128, _t1129);
    } else {
      _t1122 = false;
    }
    _t111D = _t1122;
  } else {
    _t111D = false;
  }
  bool z112A = _t111D;
  bool _t112B;
  real _t112C = prim |()|00B5<$[3]> (mid111C);
  real _t112D = 0.4e1;
  bool _t112E = prim <007A (_t112C, _t112D);
  if _t112E {
    real _t112F = prim |()|00B5<$[3]> (mid111C);
    real _t1130 = 0.3e1;
    _t112B = prim >0080 (_t112F, _t1130);
  } else {
    _t112B = false;
  }
  return _t112B;
}
function vec3#3 grad113E (vec3 s113F)
{
  real x1140 = s113F[0];
  real y1141 = s113F[1];
  real z1142 = s113F[2];
  real _t1143 = 0.2e1;
  real _t1144 = prim *0034 (_t1143, x1140);
  int _t1145 = 2;
  real _t1146 = prim ^0068 (z1142, _t1145);
  real _t1147 = prim *0034 (_t1144, _t1146);
  int _t1148 = 2;
  real _t1149 = prim ^0068 (x1140, _t1148);
  int _t114A = 2;
  real _t114B = prim ^0068 (y1141, _t114A);
  real _t114C = prim +0017<$[]> (_t1149, _t114B);
  int _t114D = 2;
  real _t114E = prim ^0068 (z1142, _t114D);
  real _t114F = prim +0017<$[]> (_t114C, _t114E);
  real _t1150 = prim cos0169 (_t114F);
  real _t1151 = prim *0034 (_t1147, _t1150);
  real _t1152 = 0.2e1;
  real _t1153 = prim *0034 (_t1152, y1141);
  int _t1154 = 2;
  real _t1155 = prim ^0068 (z1142, _t1154);
  real _t1156 = prim *0034 (_t1153, _t1155);
  int _t1157 = 2;
  real _t1158 = prim ^0068 (x1140, _t1157);
  int _t1159 = 2;
  real _t115A = prim ^0068 (y1141, _t1159);
  real _t115B = prim +0017<$[]> (_t1158, _t115A);
  int _t115C = 2;
  real _t115D = prim ^0068 (z1142, _t115C);
  real _t115E = prim +0017<$[]> (_t115B, _t115D);
  real _t115F = prim cos0169 (_t115E);
  real _t1160 = prim *0034 (_t1156, _t115F);
  real _t1161 = 0.2e1;
  int _t1162 = 3;
  real _t1163 = prim ^0068 (z1142, _t1162);
  real _t1164 = prim *0034 (_t1161, _t1163);
  int _t1165 = 2;
  real _t1166 = prim ^0068 (x1140, _t1165);
  int _t1167 = 2;
  real _t1168 = prim ^0068 (y1141, _t1167);
  real _t1169 = prim +0017<$[]> (_t1166, _t1168);
  int _t116A = 2;
  real _t116B = prim ^0068 (z1142, _t116A);
  real _t116C = prim +0017<$[]> (_t1169, _t116B);
  real _t116D = prim cos0169 (_t116C);
  real _t116E = prim *0034 (_t1164, _t116D);
  real _t116F = 0.2e1;
  real _t1170 = prim *0034 (_t116F, z1142);
  int _t1171 = 2;
  real _t1172 = prim ^0068 (x1140, _t1171);
  int _t1173 = 2;
  real _t1174 = prim ^0068 (y1141, _t1173);
  real _t1175 = prim +0017<$[]> (_t1172, _t1174);
  int _t1176 = 2;
  real _t1177 = prim ^0068 (z1142, _t1176);
  real _t1178 = prim +0017<$[]> (_t1175, _t1177);
  real _t1179 = prim sin0171 (_t1178);
  real _t117A = prim *0034 (_t1170, _t1179);
  real _t117B = prim +0017<$[]> (_t116E, _t117A);
  vec3 g117C = [_t1151, _t1160, _t117B];
  return g117C;
}
function tensor[3,3]#3 hess117D (vec3 s117E)
{
  real x117F = s117E[0];
  real y1180 = s117E[1];
  real z1181 = s117E[2];
  int _t1182 = -4;
  real _t1183 = (real)_t1182;
  int _t1184 = 2;
  real _t1185 = prim ^0068 (x117F, _t1184);
  real _t1186 = prim *0034 (_t1183, _t1185);
  int _t1187 = 2;
  real _t1188 = prim ^0068 (z1181, _t1187);
  real _t1189 = prim *0034 (_t1186, _t1188);
  int _t118A = 2;
  real _t118B = prim ^0068 (x117F, _t118A);
  int _t118C = 2;
  real _t118D = prim ^0068 (y1180, _t118C);
  real _t118E = prim +0017<$[]> (_t118B, _t118D);
  int _t118F = 2;
  real _t1190 = prim ^0068 (z1181, _t118F);
  real _t1191 = prim +0017<$[]> (_t118E, _t1190);
  real _t1192 = prim sin0171 (_t1191);
  real _t1193 = prim *0034 (_t1189, _t1192);
  real _t1194 = 0.2e1;
  int _t1195 = 2;
  real _t1196 = prim ^0068 (z1181, _t1195);
  real _t1197 = prim *0034 (_t1194, _t1196);
  int _t1198 = 2;
  real _t1199 = prim ^0068 (x117F, _t1198);
  int _t119A = 2;
  real _t119B = prim ^0068 (y1180, _t119A);
  real _t119C = prim +0017<$[]> (_t1199, _t119B);
  int _t119D = 2;
  real _t119E = prim ^0068 (z1181, _t119D);
  real _t119F = prim +0017<$[]> (_t119C, _t119E);
  real _t11A0 = prim cos0169 (_t119F);
  real _t11A1 = prim *0034 (_t1197, _t11A0);
  real _t11A2 = prim +0017<$[]> (_t1193, _t11A1);
  int _t11A3 = -4;
  real _t11A4 = (real)_t11A3;
  real _t11A5 = prim *0034 (_t11A4, x117F);
  real _t11A6 = prim *0034 (_t11A5, y1180);
  int _t11A7 = 2;
  real _t11A8 = prim ^0068 (z1181, _t11A7);
  real _t11A9 = prim *0034 (_t11A6, _t11A8);
  int _t11AA = 2;
  real _t11AB = prim ^0068 (x117F, _t11AA);
  int _t11AC = 2;
  real _t11AD = prim ^0068 (y1180, _t11AC);
  real _t11AE = prim +0017<$[]> (_t11AB, _t11AD);
  int _t11AF = 2;
  real _t11B0 = prim ^0068 (z1181, _t11AF);
  real _t11B1 = prim +0017<$[]> (_t11AE, _t11B0);
  real _t11B2 = prim sin0171 (_t11B1);
  real _t11B3 = prim *0034 (_t11A9, _t11B2);
  int _t11B4 = -4;
  real _t11B5 = (real)_t11B4;
  real _t11B6 = prim *0034 (_t11B5, x117F);
  int _t11B7 = 3;
  real _t11B8 = prim ^0068 (z1181, _t11B7);
  real _t11B9 = prim *0034 (_t11B6, _t11B8);
  int _t11BA = 2;
  real _t11BB = prim ^0068 (x117F, _t11BA);
  int _t11BC = 2;
  real _t11BD = prim ^0068 (y1180, _t11BC);
  real _t11BE = prim +0017<$[]> (_t11BB, _t11BD);
  int _t11BF = 2;
  real _t11C0 = prim ^0068 (z1181, _t11BF);
  real _t11C1 = prim +0017<$[]> (_t11BE, _t11C0);
  real _t11C2 = prim sin0171 (_t11C1);
  real _t11C3 = prim *0034 (_t11B9, _t11C2);
  real _t11C4 = 0.4e1;
  real _t11C5 = prim *0034 (_t11C4, x117F);
  real _t11C6 = prim *0034 (_t11C5, z1181);
  int _t11C7 = 2;
  real _t11C8 = prim ^0068 (x117F, _t11C7);
  int _t11C9 = 2;
  real _t11CA = prim ^0068 (y1180, _t11C9);
  real _t11CB = prim +0017<$[]> (_t11C8, _t11CA);
  int _t11CC = 2;
  real _t11CD = prim ^0068 (z1181, _t11CC);
  real _t11CE = prim +0017<$[]> (_t11CB, _t11CD);
  real _t11CF = prim cos0169 (_t11CE);
  real _t11D0 = prim *0034 (_t11C6, _t11CF);
  real _t11D1 = prim +0017<$[]> (_t11C3, _t11D0);
  vec3 _t11D2 = [_t11A2, _t11B3, _t11D1];
  int _t11D3 = -4;
  real _t11D4 = (real)_t11D3;
  real _t11D5 = prim *0034 (_t11D4, x117F);
  real _t11D6 = prim *0034 (_t11D5, y1180);
  int _t11D7 = 2;
  real _t11D8 = prim ^0068 (z1181, _t11D7);
  real _t11D9 = prim *0034 (_t11D6, _t11D8);
  int _t11DA = 2;
  real _t11DB = prim ^0068 (x117F, _t11DA);
  int _t11DC = 2;
  real _t11DD = prim ^0068 (y1180, _t11DC);
  real _t11DE = prim +0017<$[]> (_t11DB, _t11DD);
  int _t11DF = 2;
  real _t11E0 = prim ^0068 (z1181, _t11DF);
  real _t11E1 = prim +0017<$[]> (_t11DE, _t11E0);
  real _t11E2 = prim sin0171 (_t11E1);
  real _t11E3 = prim *0034 (_t11D9, _t11E2);
  int _t11E4 = -4;
  real _t11E5 = (real)_t11E4;
  int _t11E6 = 2;
  real _t11E7 = prim ^0068 (y1180, _t11E6);
  real _t11E8 = prim *0034 (_t11E5, _t11E7);
  int _t11E9 = 2;
  real _t11EA = prim ^0068 (z1181, _t11E9);
  real _t11EB = prim *0034 (_t11E8, _t11EA);
  int _t11EC = 2;
  real _t11ED = prim ^0068 (x117F, _t11EC);
  int _t11EE = 2;
  real _t11EF = prim ^0068 (y1180, _t11EE);
  real _t11F0 = prim +0017<$[]> (_t11ED, _t11EF);
  int _t11F1 = 2;
  real _t11F2 = prim ^0068 (z1181, _t11F1);
  real _t11F3 = prim +0017<$[]> (_t11F0, _t11F2);
  real _t11F4 = prim sin0171 (_t11F3);
  real _t11F5 = prim *0034 (_t11EB, _t11F4);
  real _t11F6 = 0.2e1;
  int _t11F7 = 2;
  real _t11F8 = prim ^0068 (z1181, _t11F7);
  real _t11F9 = prim *0034 (_t11F6, _t11F8);
  int _t11FA = 2;
  real _t11FB = prim ^0068 (x117F, _t11FA);
  int _t11FC = 2;
  real _t11FD = prim ^0068 (y1180, _t11FC);
  real _t11FE = prim +0017<$[]> (_t11FB, _t11FD);
  int _t11FF = 2;
  real _t1200 = prim ^0068 (z1181, _t11FF);
  real _t1201 = prim +0017<$[]> (_t11FE, _t1200);
  real _t1202 = prim cos0169 (_t1201);
  real _t1203 = prim *0034 (_t11F9, _t1202);
  real _t1204 = prim +0017<$[]> (_t11F5, _t1203);
  int _t1205 = -4;
  real _t1206 = (real)_t1205;
  real _t1207 = prim *0034 (_t1206, y1180);
  int _t1208 = 3;
  real _t1209 = prim ^0068 (z1181, _t1208);
  real _t120A = prim *0034 (_t1207, _t1209);
  int _t120B = 2;
  real _t120C = prim ^0068 (x117F, _t120B);
  int _t120D = 2;
  real _t120E = prim ^0068 (y1180, _t120D);
  real _t120F = prim +0017<$[]> (_t120C, _t120E);
  int _t1210 = 2;
  real _t1211 = prim ^0068 (z1181, _t1210);
  real _t1212 = prim +0017<$[]> (_t120F, _t1211);
  real _t1213 = prim sin0171 (_t1212);
  real _t1214 = prim *0034 (_t120A, _t1213);
  real _t1215 = 0.4e1;
  real _t1216 = prim *0034 (_t1215, y1180);
  real _t1217 = prim *0034 (_t1216, z1181);
  int _t1218 = 2;
  real _t1219 = prim ^0068 (x117F, _t1218);
  int _t121A = 2;
  real _t121B = prim ^0068 (y1180, _t121A);
  real _t121C = prim +0017<$[]> (_t1219, _t121B);
  int _t121D = 2;
  real _t121E = prim ^0068 (z1181, _t121D);
  real _t121F = prim +0017<$[]> (_t121C, _t121E);
  real _t1220 = prim cos0169 (_t121F);
  real _t1221 = prim *0034 (_t1217, _t1220);
  real _t1222 = prim +0017<$[]> (_t1214, _t1221);
  vec3 _t1223 = [_t11E3, _t1204, _t1222];
  int _t1224 = -4;
  real _t1225 = (real)_t1224;
  real _t1226 = prim *0034 (_t1225, x117F);
  int _t1227 = 3;
  real _t1228 = prim ^0068 (z1181, _t1227);
  real _t1229 = prim *0034 (_t1226, _t1228);
  int _t122A = 2;
  real _t122B = prim ^0068 (x117F, _t122A);
  int _t122C = 2;
  real _t122D = prim ^0068 (y1180, _t122C);
  real _t122E = prim +0017<$[]> (_t122B, _t122D);
  int _t122F = 2;
  real _t1230 = prim ^0068 (z1181, _t122F);
  real _t1231 = prim +0017<$[]> (_t122E, _t1230);
  real _t1232 = prim sin0171 (_t1231);
  real _t1233 = prim *0034 (_t1229, _t1232);
  real _t1234 = 0.4e1;
  real _t1235 = prim *0034 (_t1234, x117F);
  real _t1236 = prim *0034 (_t1235, z1181);
  int _t1237 = 2;
  real _t1238 = prim ^0068 (x117F, _t1237);
  int _t1239 = 2;
  real _t123A = prim ^0068 (y1180, _t1239);
  real _t123B = prim +0017<$[]> (_t1238, _t123A);
  int _t123C = 2;
  real _t123D = prim ^0068 (z1181, _t123C);
  real _t123E = prim +0017<$[]> (_t123B, _t123D);
  real _t123F = prim cos0169 (_t123E);
  real _t1240 = prim *0034 (_t1236, _t123F);
  real _t1241 = prim +0017<$[]> (_t1233, _t1240);
  int _t1242 = -4;
  real _t1243 = (real)_t1242;
  real _t1244 = prim *0034 (_t1243, y1180);
  int _t1245 = 3;
  real _t1246 = prim ^0068 (z1181, _t1245);
  real _t1247 = prim *0034 (_t1244, _t1246);
  int _t1248 = 2;
  real _t1249 = prim ^0068 (x117F, _t1248);
  int _t124A = 2;
  real _t124B = prim ^0068 (y1180, _t124A);
  real _t124C = prim +0017<$[]> (_t1249, _t124B);
  int _t124D = 2;
  real _t124E = prim ^0068 (z1181, _t124D);
  real _t124F = prim +0017<$[]> (_t124C, _t124E);
  real _t1250 = prim sin0171 (_t124F);
  real _t1251 = prim *0034 (_t1247, _t1250);
  real _t1252 = 0.4e1;
  real _t1253 = prim *0034 (_t1252, y1180);
  real _t1254 = prim *0034 (_t1253, z1181);
  int _t1255 = 2;
  real _t1256 = prim ^0068 (x117F, _t1255);
  int _t1257 = 2;
  real _t1258 = prim ^0068 (y1180, _t1257);
  real _t1259 = prim +0017<$[]> (_t1256, _t1258);
  int _t125A = 2;
  real _t125B = prim ^0068 (z1181, _t125A);
  real _t125C = prim +0017<$[]> (_t1259, _t125B);
  real _t125D = prim cos0169 (_t125C);
  real _t125E = prim *0034 (_t1254, _t125D);
  real _t125F = prim +0017<$[]> (_t1251, _t125E);
  int _t1260 = -4;
  real _t1261 = (real)_t1260;
  int _t1262 = 4;
  real _t1263 = prim ^0068 (z1181, _t1262);
  real _t1264 = prim *0034 (_t1261, _t1263);
  int _t1265 = 2;
  real _t1266 = prim ^0068 (x117F, _t1265);
  int _t1267 = 2;
  real _t1268 = prim ^0068 (y1180, _t1267);
  real _t1269 = prim +0017<$[]> (_t1266, _t1268);
  int _t126A = 2;
  real _t126B = prim ^0068 (z1181, _t126A);
  real _t126C = prim +0017<$[]> (_t1269, _t126B);
  real _t126D = prim sin0171 (_t126C);
  real _t126E = prim *0034 (_t1264, _t126D);
  real _t126F = 0.1e2;
  int _t1270 = 2;
  real _t1271 = prim ^0068 (z1181, _t1270);
  real _t1272 = prim *0034 (_t126F, _t1271);
  int _t1273 = 2;
  real _t1274 = prim ^0068 (x117F, _t1273);
  int _t1275 = 2;
  real _t1276 = prim ^0068 (y1180, _t1275);
  real _t1277 = prim +0017<$[]> (_t1274, _t1276);
  int _t1278 = 2;
  real _t1279 = prim ^0068 (z1181, _t1278);
  real _t127A = prim +0017<$[]> (_t1277, _t1279);
  real _t127B = prim cos0169 (_t127A);
  real _t127C = prim *0034 (_t1272, _t127B);
  real _t127D = prim +0017<$[]> (_t126E, _t127C);
  real _t127E = 0.2e1;
  int _t127F = 2;
  real _t1280 = prim ^0068 (x117F, _t127F);
  int _t1281 = 2;
  real _t1282 = prim ^0068 (y1180, _t1281);
  real _t1283 = prim +0017<$[]> (_t1280, _t1282);
  int _t1284 = 2;
  real _t1285 = prim ^0068 (z1181, _t1284);
  real _t1286 = prim +0017<$[]> (_t1283, _t1285);
  real _t1287 = prim sin0171 (_t1286);
  real _t1288 = prim *0034 (_t127E, _t1287);
  real _t1289 = prim +0017<$[]> (_t127D, _t1288);
  vec3 _t128A = [_t1241, _t125F, _t1289];
  tensor[3,3] hess128B = [_t11D2, _t1223, _t128A];
  return hess128B;
}
function vec3#6 fStep128C (vec3 s128D)
{
  vec3 g128E = func grad113E (s128D);
  tensor[3,3] H128F = func hess117D (s128D);
  vec3[3] E1290 = prim evecs00A0 (H128F);
  real[3] L1291 = prim evals009F (H128F);
  real _t1292 = 0.1e1;
  int _t1293 = 2;
  real _t1294 = prim $sub01C0<real; %3> (L1291, _t1293);
  real _t1295 = prim /0055 (_t1292, _t1294);
  real _t1296 = prim unary -008B<$[]> (_t1295);
  int _t1297 = 2;
  vec3 _t1298 = prim $sub01C0<vec3; %3> (E1290, _t1297);
  vec3 _t1299 = prim *0036<$[3]> (_t1296, _t1298);
  int _t129A = 2;
  vec3 _t129B = prim $sub01C0<vec3; %3> (E1290, _t129A);
  tensor[3,3] _t129C = prim ⊗00E5<$[3]; $[3]; $[3,3]> (_t1299, _t129B);
  vec3 up129D = prim •00CE<$[3,3]; $[3]; $[3]> (_t129C, g128E);
  bool _t129E;
  real _t129F = up129D[0];
  real _t12A0 = up129D[0];
  bool _t12A1 = prim ==0084 (_t129F, _t12A0);
  bool _t12A2 = prim !00BC (_t12A1);
  if _t12A2 {
    _t129E = true;
  } else {
    bool _t12A3;
    real _t12A4 = up129D[1];
    real _t12A5 = up129D[1];
    bool _t12A6 = prim ==0084 (_t12A4, _t12A5);
    bool _t12A7 = prim !00BC (_t12A6);
    if _t12A7 {
      _t12A3 = true;
    } else {
      real _t12A8 = up129D[2];
      real _t12A9 = up129D[2];
      bool _t12AA = prim ==0084 (_t12A8, _t12A9);
      _t12A3 = prim !00BC (_t12AA);
    }
    _t129E = _t12A3;
  }
  if _t129E {
    real _t12AB = +inf;
    real _t12AC = +inf;
    real _t12AD = +inf;
    vec3 _t12AE = [_t12AB, _t12AC, _t12AD];
    return _t12AE;
  }
  return up129D;
}
function bool#0 posNanCheck12AF (vec3 up12B0)
{
  bool _t12B1;
  real _t12B2 = up12B0[0];
  real _t12B3 = up12B0[0];
  bool _t12B4 = prim ==0084 (_t12B2, _t12B3);
  bool _t12B5 = prim !00BC (_t12B4);
  if _t12B5 {
    _t12B1 = true;
  } else {
    bool _t12B6;
    real _t12B7 = up12B0[1];
    real _t12B8 = up12B0[1];
    bool _t12B9 = prim ==0084 (_t12B7, _t12B8);
    bool _t12BA = prim !00BC (_t12B9);
    if _t12BA {
      _t12B6 = true;
    } else {
      real _t12BB = up12B0[2];
      real _t12BC = up12B0[2];
      bool _t12BD = prim ==0084 (_t12BB, _t12BC);
      _t12B6 = prim !00BC (_t12BD);
    }
    _t12B1 = _t12B6;
  }
  return _t12B1;
}
function tensor[3,3]#4 fPerp12BE (vec3 s12BF)
{
  vec3 g12C0 = func grad113E (s12BF);
  tensor[3,3] H12C1 = func hess117D (s12BF);
  vec3[3] _t12C2 = prim evecs00A0 (H12C1);
  int _t12C3 = 2;
  vec3 E212C4 = prim $sub01C0<vec3; %3> (_t12C2, _t12C3);
  tensor[3,3] _t12C5 = prim $id01B9<%3> ();
  tensor[3,3] _t12C6 = prim ⊗00E5<$[3]; $[3]; $[3,3]> (E212C4, E212C4);
  tensor[3,3] m12C7 = prim -0026<$[3,3]> (_t12C5, _t12C6);
  real t12C8 = prim :00FC<$[3,3]; $[3,3]; $[]> (m12C7, m12C7);
  bool _t12C9 = prim ==0084 (t12C8, t12C8);
  bool _t12CA = prim !00BC (_t12C9);
  if _t12CA {
    tensor[3,3] _t12CB = prim $zero01BB<$[3,3]> ();
    return _t12CB;
  }
  return m12C7;
}
function real#2 fStrength12CC (vec3 s12CD)
{
  vec3 g12CE = func grad113E (s12CD);
  tensor[3,3] H12CF = func hess117D (s12CD);
  real[3] _t12D0 = prim evals009F (H12CF);
  int _t12D1 = 2;
  real _t12D2 = prim $sub01C0<real; %3> (_t12D0, _t12D1);
  real _t12D3 = prim unary -008B<$[]> (_t12D2);
  real _t12D4 = prim |()|00B5<$[3]> (g12CE);
  real _t12D5 = prim +0017<$[]> (fBias07CC, _t12D4);
  real str12D6 = prim /0055 (_t12D3, _t12D5);
  return str12D6;
}
function real#2 fMask12D7 (vec3 x12D8)
{
  real _t12D9 = 0.e0;
  return _t12D9;
}
function bool#2 fTest12DA (vec3 x12DB)
{
  bool _t12DC = true;
  return _t12DC;
}
function bool#3 posTest12DD (vec3 x12DE)
{
  bool _t12DF;
  bool _t12E0 = func insideTest1116 (x12DE);
  if _t12E0 {
    bool _t12E1;
    real _t12E2 = func fStrength12CC (x12DE);
    bool _t12E3 = prim >0080 (_t12E2, fStrTh07CA);
    if _t12E3 {
      bool _t12E4;
      real _t12E5 = func fMask12D7 (x12DE);
      bool _t12E6 = prim >=007E (_t12E5, fMaskTh07CB);
      if _t12E6 {
        _t12E4 = func fTest12DA (x12DE);
      } else {
        _t12E4 = false;
      }
      _t12E1 = _t12E4;
    } else {
      _t12E1 = false;
    }
    _t12DF = _t12E1;
  } else {
    _t12DF = false;
  }
  return _t12DF;
}
function real#1 phi12F5 (real r12F6)
{
  real _t12F7 = 0.2e1;
  real _t12F8 = 0.3e1;
  real _t12F9 = prim /0055 (_t12F7, _t12F8);
  real s12FA = prim -0026<$[]> (r12F6, _t12F9);
  real _t12FB;
  real _t12FC = 0.2e1;
  real _t12FD = 0.3e1;
  real _t12FE = prim /0055 (_t12FC, _t12FD);
  bool _t12FF = prim <007A (r12F6, _t12FE);
  if _t12FF {
    real _t1300 = 0.1e1;
    real _t1301 = -0.5646e1;
    real _t1302 = 0.119835e2;
    real _t1303 = -0.113535e2;
    real _t1304 = 0.40550625e1;
    real _t1305 = prim *0034 (_t1304, r12F6);
    real _t1306 = prim +0017<$[]> (_t1303, _t1305);
    real _t1307 = prim *0034 (r12F6, _t1306);
    real _t1308 = prim +0017<$[]> (_t1302, _t1307);
    real _t1309 = prim *0034 (r12F6, _t1308);
    real _t130A = prim +0017<$[]> (_t1301, _t1309);
    real _t130B = prim *0034 (r12F6, _t130A);
    _t12FB = prim +0017<$[]> (_t1300, _t130B);
  } else {
    real _t130C;
    real _t130D = 0.1e1;
    bool _t130E = prim <007A (r12F6, _t130D);
    if _t130E {
      real _t130F = -0.1e-2;
      real _t1310 = 0.9e-1;
      real _t1311 = -0.54e0;
      real _t1312 = 0.1215e1;
      real _t1313 = 0.972e0;
      real _t1314 = prim *0034 (_t1313, s12FA);
      real _t1315 = prim -0026<$[]> (_t1312, _t1314);
      real _t1316 = prim *0034 (_t1315, s12FA);
      real _t1317 = prim +0017<$[]> (_t1311, _t1316);
      real _t1318 = prim *0034 (_t1317, s12FA);
      real _t1319 = prim +0017<$[]> (_t1310, _t1318);
      real _t131A = prim *0034 (_t1319, s12FA);
      real _t131B = prim *0034 (_t131A, s12FA);
      _t130C = prim +0017<$[]> (_t130F, _t131B);
    } else {
      _t130C = 0.e0;
    }
    _t12FB = _t130C;
  }
  return _t12FB;
}
function real#1 phi'131C (real r131D)
{
  real _t131E = 0.3e1;
  real _t131F = prim *0034 (_t131E, r131D);
  real _t1320 = 0.2e1;
  real t1321 = prim -0026<$[]> (_t131F, _t1320);
  real _t1322;
  real _t1323 = 0.2e1;
  real _t1324 = 0.3e1;
  real _t1325 = prim /0055 (_t1323, _t1324);
  bool _t1326 = prim <007A (r131D, _t1325);
  if _t1326 {
    real _t1327 = -0.5646e1;
    real _t1328 = 0.23967e2;
    real _t1329 = -0.340605e2;
    real _t132A = 0.1622025e2;
    real _t132B = prim *0034 (_t132A, r131D);
    real _t132C = prim +0017<$[]> (_t1329, _t132B);
    real _t132D = prim *0034 (r131D, _t132C);
    real _t132E = prim +0017<$[]> (_t1328, _t132D);
    real _t132F = prim *0034 (r131D, _t132E);
    _t1322 = prim +0017<$[]> (_t1327, _t132F);
  } else {
    real _t1330;
    real _t1331 = 0.1e1;
    bool _t1332 = prim <007A (r131D, _t1331);
    if _t1332 {
      real _t1333 = 0.1234567901e-1;
      real _t1334 = prim *0034 (_t1333, t1321);
      real _t1335 = 0.486e1;
      real _t1336 = -0.1458e2;
      real _t1337 = 0.1458e2;
      real _t1338 = 0.486e1;
      real _t1339 = prim *0034 (_t1338, t1321);
      real _t133A = prim -0026<$[]> (_t1337, _t1339);
      real _t133B = prim *0034 (t1321, _t133A);
      real _t133C = prim +0017<$[]> (_t1336, _t133B);
      real _t133D = prim *0034 (t1321, _t133C);
      real _t133E = prim +0017<$[]> (_t1335, _t133D);
      _t1330 = prim *0034 (_t1334, _t133E);
    } else {
      _t1330 = 0.e0;
    }
    _t1322 = _t1330;
  }
  return _t1322;
}
function real#2 enr1343 (vec3 x1344)
{
  real _t1345 = prim |()|00B5<$[3]> (x1344);
  real _t1346 = prim /0055 (_t1345, rad1342);
  real _t1347 = func phi12F5 (_t1346);
  return _t1347;
}
function vec3#1 frc1348 (vec3 x1349)
{
  real _t134A = prim |()|00B5<$[3]> (x1349);
  real _t134B = prim /0055 (_t134A, rad1342);
  real _t134C = func phi'131C (_t134B);
  real _t134D = 0.1e1;
  real _t134E = prim /0055 (_t134D, rad1342);
  real _t134F = prim *0034 (_t134C, _t134E);
  vec3 _t1350 = prim *0036<$[3]> (_t134F, x1349);
  real _t1351 = prim |()|00B5<$[3]> (x1349);
  vec3 _t1352 = prim /0057<$[3]> (_t1350, _t1351);
  return _t1352;
}
function real#3 urnd135C (real x135D)
{
  real _t135E = 0.e0;
  bool _t135F = prim ==0084 (x135D, _t135E);
  if _t135F {
    real _t1360 = 0.e0;
    return _t1360;
  }
  real _t1361 = prim |()|00B5<$[]> (x135D);
  real l21362 = prim log2018D (_t1361);
  real _t1363 = 0.2e1;
  real _t1364 = prim floor0189 (l21362);
  real _t1365 = prim -0026<$[]> (l21362, _t1364);
  real _t1366 = 0.1e1;
  real _t1367 = prim -0026<$[]> (_t1365, _t1366);
  real frxp1368 = prim ^0069 (_t1363, _t1367);
  real _t1369 = 0.2e1;
  int _t136A = 20;
  real _t136B = prim ^0068 (_t1369, _t136A);
  int _t136C = 2;
  int _t136D = prim *0033 (_t136C, iter1359);
  real _t136E = (real)_t136D;
  real _t136F = prim +0017<$[]> (_t136B, _t136E);
  real _t1370 = prim *0034 (_t136F, frxp1368);
  real _t1371 = 0.1e1;
  real _t1372 = prim fmod018A (_t1370, _t1371);
  return _t1372;
}
function real#3 v3rnd1373 (vec3 v1374)
{
  real _t1375 = v1374[0];
  real _t1376 = func urnd135C (_t1375);
  real _t1377 = v1374[1];
  real _t1378 = func urnd135C (_t1377);
  real _t1379 = prim +0017<$[]> (_t1376, _t1378);
  real _t137A = v1374[2];
  real _t137B = func urnd135C (_t137A);
  real _t137C = prim +0017<$[]> (_t1379, _t137B);
  real _t137D = 0.1e1;
  real _t137E = prim fmod018A (_t137C, _t137D);
  return _t137E;
}
function real#2 genID137F (vec3 v1380)
{
  real _t1381 = 0.1e7;
  real _t1382 = func v3rnd1373 (v1380);
  real _t1383 = prim *0034 (_t1381, _t1382);
  real _t1384 = prim floor0189 (_t1383);
  return _t1384;
}
function int#4 pcIter1385 ()
{
  bool _t1386;
  int _t1387 = 0;
  bool _t1388 = prim >007F (pcp07DD, _t1387);
  if _t1388 {
    bool _t1389;
    int _t138A = 0;
    bool _t138B = prim >007F (iter1359, _t138A);
    if _t138B {
      int _t138C = 0;
      int _t138D = prim %00A1 (iter1359, pcp07DD);
      _t1389 = prim ==0082 (_t138C, _t138D);
    } else {
      _t1389 = false;
    }
    _t1386 = _t1389;
  } else {
    _t1386 = false;
  }
  if _t1386 {
    int _t138E = prim /0054 (iter1359, pcp07DD);
    int _t138F = 2;
    int _t1390 = prim %00A1 (_t138E, _t138F);
    int _t1391 = 2;
    int _t1392 = prim *0033 (_t1390, _t1391);
    int _t1393 = 1;
    int _t1394 = prim -0024 (_t1392, _t1393);
    return _t1394;
  } else {
    int _t1395 = 0;
    return _t1395;
  }
}
globalInit {
  int _t07BE = 0;
  int _t07BC = 1;
  int _t07C0 = extractFemItem(NumCell(Mesh), int, meshData07BA);
  int _t07BF = prim -0024 (_t07C0, _t07BC);
  int[] _t07C3 = prim $range01C3 (_t07BE, _t07BF);
  Femdata: MeshCell[] _t07C4 = {};
  foreach _t07C2 in _t07C3 {
    Femdata: MeshCell _t07C5 = loadFem(MeshCell, meshData07BA, _t07C2);
    _t07C4 = prim @0010<Femdata: MeshCell> (_t07C4, _t07C5);
  }
  simplex1115 = func refcell0836 (meshData07BA);
  int _t12E7;
  int _t12E8 = 2;
  bool _t12E9 = prim ==0082 (_t12E8, fDim07DF);
  if _t12E9 {
    _t12E7 = 6;
  } else {
    int _t12EA;
    int _t12EB = 1;
    bool _t12EC = prim ==0082 (_t12EB, fDim07DF);
    if _t12EC {
      _t12EA = 2;
    } else {
      _t12EA = 0;
    }
    _t12E7 = _t12EA;
  }
  nnmin12ED = _t12E7;
  int _t12EE;
  int _t12EF = 2;
  bool _t12F0 = prim ==0082 (_t12EF, fDim07DF);
  if _t12F0 {
    _t12EE = 8;
  } else {
    int _t12F1;
    int _t12F2 = 1;
    bool _t12F3 = prim ==0082 (_t12F2, fDim07DF);
    if _t12F3 {
      _t12F1 = 3;
    } else {
      _t12F1 = 0;
    }
    _t12EE = _t12F1;
  }
  nnmax12F4 = _t12EE;
  real _t133F = 0.2e1;
  real _t1340 = 0.3e1;
  phiWellRad1341 = prim /0055 (_t133F, _t1340);
  rad1342 = prim /0055 (tipd07CD, phiWellRad1341);
  real _t1353 = 0.1e1;
  int _t1354 = 2;
  int _t1355 = prim *0033 (_t1354, pcp07DD);
  real _t1356 = (real)_t1355;
  real _t1357 = prim /0055 (_t1353, _t1356);
  pchist1358 = prim ^0069 (hist07DC, _t1357);
  iter1359 = 0;
  rpc135A = 0.1e1;
  popLast135B = -1;
}
strand point (vec3 p01396, real hh01397) in 3D {
  output vec3 pos1398;
  output vec3 _pos1399;
  real ID139A;
  real hh139B;
  vec3 step139C;
  bool found13A0;
  int nfs13A1;
  real trav13A2;
  real mvmt13A3;
  real closest13A4;
  int born13A5;
  bool first13A6;
  {
    pos1398 = p01396;
    _pos1399 = pos1398;
    ID139A = func genID137F (p01396);
    hh139B = hh01397;
    real _t139D = 0.e0;
    real _t139E = 0.e0;
    real _t139F = 0.e0;
    step139C = [_t139D, _t139E, _t139F];
    found13A0 = false;
    nfs13A1 = 0;
    trav13A2 = 0.e0;
    mvmt13A3 = 0.1e1;
    closest13A4 = rad1342;
    born13A5 = 0;
    first13A6 = true;
  }
  update
  {
    bool vv13A7 = false;
    if first13A6 {
      bool _t13A8;
      bool _t13A9;
      int _t13AA = 0;
      bool _t13AB = prim >007F (verb07DA, _t13AA);
      if _t13AB {
        _t13A9 = vv13A7;
      } else {
        _t13A9 = false;
      }
      if _t13A9 {
        _t13A8 = true;
      } else {
        int _t13AC = 1;
        _t13A8 = prim >007F (verb07DA, _t13AC);
      }
      if _t13A8 {
        string _t13AD = "(i#";
        string _t13AE = " @ ";
        string _t13AF = "): ";
        print (ID139A, _t13AD, iter1359, _t13AE, pos1398, _t13AF);
        string _t13B0 = " HELLO!\n";
        print (_t13B0);
      }
    }
    bool _t13B1 = func posTest12DD (pos1398);
    bool _t13B2 = prim !00BC (_t13B1);
    if _t13B2 {
      bool _t13B3;
      bool _t13B4;
      int _t13B5 = 0;
      bool _t13B6 = prim >007F (verb07DA, _t13B5);
      if _t13B6 {
        _t13B4 = vv13A7;
      } else {
        _t13B4 = false;
      }
      if _t13B4 {
        _t13B3 = true;
      } else {
        int _t13B7 = 1;
        _t13B3 = prim >007F (verb07DA, _t13B7);
      }
      if _t13B3 {
        string _t13B8 = "(i#";
        string _t13B9 = " @ ";
        string _t13BA = "): ";
        print (ID139A, _t13B8, iter1359, _t13B9, pos1398, _t13BA);
        string _t13BB = "!inside=";
        bool _t13BC = func insideTest1116 (pos1398);
        string _t13BD = " || fStrength=";
        real _t13BE = func fStrength12CC (pos1398);
        string _t13BF = " <= fStrTh=";
        string _t13C0 = " || fMask(pos)=";
        real _t13C1 = func fMask12D7 (pos1398);
        string _t13C2 = " < fMaskTh=";
        string _t13C3 = " || fTest(pos)=";
        bool _t13C4 = func fTest12DA (pos1398);
        string _t13C5 = " ==>DIE\n";
        print (_t13BB, _t13BC, _t13BD, _t13BE, _t13BF, fStrTh07CA, _t13C0, _t13C1, _t13C2, fMaskTh07CB, _t13C3, _t13C4, _t13C5);
      }
      die;
    }
    real _t13C6 = 0.e0;
    bool _t13C7 = prim >0080 (travMax07CF, _t13C6);
    if _t13C7 {
      bool _t13C8 = prim >0080 (trav13A2, travMax07CF);
      if _t13C8 {
        die;
      }
    }
    bool _t13C9 = prim !00BC (found13A0);
    if _t13C9 {
      int _t13CA = 0;
      bool _t13CB = prim >007F (nfsMax07D0, _t13CA);
      if _t13CB {
        bool _t13CC = prim >007F (nfs13A1, nfsMax07D0);
        if _t13CC {
          bool _t13CD;
          bool _t13CE;
          int _t13CF = 0;
          bool _t13D0 = prim >007F (verb07DA, _t13CF);
          if _t13D0 {
            _t13CE = vv13A7;
          } else {
            _t13CE = false;
          }
          if _t13CE {
            _t13CD = true;
          } else {
            int _t13D1 = 1;
            _t13CD = prim >007F (verb07DA, _t13D1);
          }
          if _t13CD {
            string _t13D2 = "(i#";
            string _t13D3 = " @ ";
            string _t13D4 = "): ";
            print (ID139A, _t13D2, iter1359, _t13D3, pos1398, _t13D4);
            string _t13D5 = "nfs=";
            string _t13D6 = " > nfsMax=";
            string _t13D7 = " || trav=";
            string _t13D8 = " > travMax=";
            string _t13D9 = " =>DIE\n";
            print (_t13D5, nfs13A1, _t13D6, nfsMax07D0, _t13D7, trav13A2, _t13D8, travMax07CF, _t13D9);
          }
          die;
        }
      }
      vec3 _t13DA = func fStep128C (pos1398);
      step139C = prim *0036<$[3]> (sfs07DB, _t13DA);
      pos1398 = prim +0017<$[3]> (pos1398, step139C);
      _pos1399 = pos1398;
      real _t13DB = prim |()|00B5<$[3]> (step139C);
      real _t13DC = prim /0055 (_t13DB, tipd07CD);
      mvmt13A3 = prim lerp0096<$[]> (_t13DC, mvmt13A3, hist07DC);
      bool _t13DD = prim >0080 (mvmt13A3, fsEps07D4);
      if _t13DD {
        real _t13DE = prim |()|00B5<$[3]> (step139C);
        real _t13DF = prim /0055 (_t13DE, tipd07CD);
        trav13A2 = prim +0017<$[]> (trav13A2, _t13DF);
        int _t13E0 = 1;
        nfs13A1 = prim +0015 (nfs13A1, _t13E0);
      } else {
        found13A0 = true;
        mvmt13A3 = 0.1e1;
        trav13A2 = 0.e0;
      }
      bool _t13E1;
      bool _t13E2;
      int _t13E3 = 0;
      bool _t13E4 = prim >007F (verb07DA, _t13E3);
      if _t13E4 {
        _t13E2 = vv13A7;
      } else {
        _t13E2 = false;
      }
      if _t13E2 {
        _t13E1 = true;
      } else {
        int _t13E5 = 1;
        _t13E1 = prim >007F (verb07DA, _t13E5);
      }
      if _t13E1 {
        string _t13E6 = "(i#";
        string _t13E7 = " @ ";
        string _t13E8 = "): ";
        print (ID139A, _t13E6, iter1359, _t13E7, pos1398, _t13E8);
        string _t13E9 = "step=";
        string _t13EA = "; mvmt=";
        string _t13EB = " => found=";
        string _t13EC = "\n";
        print (_t13E9, step139C, _t13EA, mvmt13A3, _t13EB, found13A0, _t13EC);
      }
    } else {
      int _t13ED = 0;
      bool _t13EE = prim ==0082 (_t13ED, fDim07DF);
      if _t13EE {
        stabilize;
      }
      vec3 _t13EF = func fStep128C (pos1398);
      step139C = prim *0036<$[3]> (sfs07DB, _t13EF);
      pos1398 = prim +0017<$[3]> (pos1398, step139C);
      _pos1399 = pos1398;
      real _t13F0 = prim |()|00B5<$[3]> (step139C);
      real _t13F1 = prim /0055 (_t13F0, tipd07CD);
      trav13A2 = prim +0017<$[]> (trav13A2, _t13F1);
      real oldE13F2 = 0.e0;
      real _t13F3 = 0.e0;
      real _t13F4 = 0.e0;
      real _t13F5 = 0.e0;
      vec3 force13F6 = [_t13F3, _t13F4, _t13F5];
      int nn13F7 = 0;
      point[] _t13F8 = prim sphere0198<point> (_pos1399, rad1342);
      foreach P13F9 in _t13F8 {
        vec3 _t13FA = P13F9.pos1398;
        vec3 off13FB = prim -0026<$[3]> (_t13FA, pos1398);
        real _t13FC = prim |()|00B5<$[3]> (off13FB);
        real _t13FD = prim /0055 (_t13FC, tipd07CD);
        bool _t13FE = prim <007A (_t13FD, fsEps07D4);
        if _t13FE {
          real _t13FF = P13F9.ID139A;
          bool _t1400 = prim <=007C (ID139A, _t13FF);
          if _t1400 {
            die;
          }
        }
        real _t1407 = func enr1343 (off13FB);
        oldE13F2 = prim +0017<$[]> (oldE13F2, _t1407);
        vec3 _t1408 = func frc1348 (off13FB);
        force13F6 = prim +0017<$[3]> (force13F6, _t1408);
        int _t1409 = 1;
        nn13F7 = prim +0015 (nn13F7, _t1409);
      }
      int _t140A = 0;
      bool _t140B = prim ==0082 (_t140A, nn13F7);
      if _t140B {
        bool _t140C;
        int _t140D = func pcIter1385 ();
        int _t140E = 0;
        bool _t140F = prim >007F (_t140D, _t140E);
        if _t140F {
          _t140C = prim <0079 (born13A5, nnmax12F4);
        } else {
          _t140C = false;
        }
        bool _t1410 = prim !00BC (_t140C);
        if _t1410 {
          continue;
        }
        tensor[3,3] _t1411 = func fPerp12BE (pos1398);
        real _t1412 = 0.e0;
        real _t1413 = 0.e0;
        vec3 _t1414 = [tipd07CD, _t1412, _t1413];
        vec3 noff01415 = prim •00CE<$[3,3]; $[3]; $[3]> (_t1411, _t1414);
        tensor[3,3] _t1416 = func fPerp12BE (pos1398);
        real _t1417 = 0.e0;
        real _t1418 = 0.e0;
        vec3 _t1419 = [_t1417, tipd07CD, _t1418];
        vec3 noff1141A = prim •00CE<$[3,3]; $[3]; $[3]> (_t1416, _t1419);
        tensor[3,3] _t141B = func fPerp12BE (pos1398);
        real _t141C = 0.e0;
        real _t141D = 0.e0;
        vec3 _t141E = [_t141C, _t141D, tipd07CD];
        vec3 noff2141F = prim •00CE<$[3,3]; $[3]; $[3]> (_t141B, _t141E);
        vec3 noff1420 = noff01415;
        vec3 _t1421;
        real _t1422 = prim |()|00B5<$[3]> (noff1420);
        real _t1423 = prim |()|00B5<$[3]> (noff1141A);
        bool _t1424 = prim >0080 (_t1422, _t1423);
        if _t1424 {
          _t1421 = noff1420;
        } else {
          _t1421 = noff1141A;
        }
        noff1420 = _t1421;
        vec3 _t1425;
        real _t1426 = prim |()|00B5<$[3]> (noff1420);
        real _t1427 = prim |()|00B5<$[3]> (noff2141F);
        bool _t1428 = prim >0080 (_t1426, _t1427);
        if _t1428 {
          _t1425 = noff1420;
        } else {
          _t1425 = noff2141F;
        }
        noff1420 = _t1425;
        vec3 _t1429 = prim normalize0137<$[3]> (noff1420);
        vec3 _t142A = prim *0036<$[3]> (tipd07CD, _t1429);
        vec3 npos142B = prim +0017<$[3]> (_t142A, pos1398);
        vec3 _t142C = func fStep128C (npos142B);
        vec3 _t142D = prim *0036<$[3]> (sfs07DB, _t142C);
        npos142B = prim +0017<$[3]> (npos142B, _t142D);
        bool _t142E;
        bool _t142F;
        int _t1430 = 0;
        bool _t1431 = prim >007F (verb07DA, _t1430);
        if _t1431 {
          _t142F = vv13A7;
        } else {
          _t142F = false;
        }
        if _t142F {
          _t142E = true;
        } else {
          int _t1432 = 1;
          _t142E = prim >007F (verb07DA, _t1432);
        }
        if _t142E {
          string _t1433 = "(i#";
          string _t1434 = " @ ";
          string _t1435 = "): ";
          print (ID139A, _t1433, iter1359, _t1434, pos1398, _t1435);
          string _t1436 = " 0==nn =>NEW(";
          string _t1437 = ") w/ ID=";
          real _t1438 = func genID137F (npos142B);
          string _t1439 = "\n";
          print (_t1436, npos142B, _t1437, _t1438, _t1439);
        }
        bool _t143A = func posTest12DD (pos1398);
        if _t143A {
          new point (npos142B, hh139B);
          int _t143B = 1;
          born13A5 = prim +0015 (born13A5, _t143B);
        }
        bool _t143C;
        bool _t143D;
        int _t143E = 0;
        bool _t143F = prim >007F (verb07DA, _t143E);
        if _t143F {
          _t143D = vv13A7;
        } else {
          _t143D = false;
        }
        if _t143D {
          _t143C = true;
        } else {
          int _t1440 = 1;
          _t143C = prim >007F (verb07DA, _t1440);
        }
        if _t143C {
          string _t1441 = "(i#";
          string _t1442 = " @ ";
          string _t1443 = "): ";
          print (ID139A, _t1441, iter1359, _t1442, pos1398, _t1443);
          string _t1444 = "nn=0; after birthing mvmt=";
          string _t1445 = "\n";
          print (_t1444, mvmt13A3, _t1445);
        }
        continue;
      }
      tensor[3,3] _t1446 = func fPerp12BE (pos1398);
      tensor[3,3] _t1447 = prim *0036<$[3,3]> (hh139B, _t1446);
      vec3 es1448 = prim •00CE<$[3,3]; $[3]; $[3]> (_t1447, force13F6);
      real _t1449 = prim |()|00B5<$[3]> (es1448);
      bool _t144A = prim >0080 (_t1449, tipd07CD);
      if _t144A {
        real _t144B = prim |()|00B5<$[3]> (es1448);
        real _t144C = prim /0055 (tipd07CD, _t144B);
        hh139B = prim *0034 (hh139B, _t144C);
        real _t144D = prim |()|00B5<$[3]> (es1448);
        real _t144E = prim /0055 (tipd07CD, _t144D);
        es1448 = prim *0038<$[3]> (es1448, _t144E);
      }
      vec3 _t144F = prim +0017<$[3]> (pos1398, es1448);
      vec3 _t1450 = func fStep128C (_t144F);
      vec3 fs1451 = prim *0036<$[3]> (sfs07DB, _t1450);
      real _t1452 = prim |()|00B5<$[3]> (fs1451);
      real _t1453 = prim *0034 (fsEps07D4, tipd07CD);
      real _t1454 = prim |()|00B5<$[3]> (es1448);
      real _t1455 = prim +0017<$[]> (_t1453, _t1454);
      real _t1456 = prim /0055 (_t1452, _t1455);
      real _t1457 = 0.5e0;
      bool _t1458 = prim >0080 (_t1456, _t1457);
      if _t1458 {
        real _t1459 = 0.5e0;
        hh139B = prim *0034 (hh139B, _t1459);
        bool _t145A;
        bool _t145B;
        int _t145C = 0;
        bool _t145D = prim >007F (verb07DA, _t145C);
        if _t145D {
          _t145B = vv13A7;
        } else {
          _t145B = false;
        }
        if _t145B {
          _t145A = true;
        } else {
          int _t145E = 1;
          _t145A = prim >007F (verb07DA, _t145E);
        }
        if _t145A {
          string _t145F = "(i#";
          string _t1460 = " @ ";
          string _t1461 = "): ";
          print (ID139A, _t145F, iter1359, _t1460, pos1398, _t1461);
          string _t1462 = "nn=";
          string _t1463 = "; |fs|/|es|=";
          real _t1464 = prim |()|00B5<$[3]> (fs1451);
          real _t1465 = prim |()|00B5<$[3]> (es1448);
          real _t1466 = prim /0055 (_t1464, _t1465);
          string _t1467 = " > 0.5; trying again with hh=";
          string _t1468 = "; mvmt=";
          string _t1469 = "\n";
          print (_t1462, nn13F7, _t1463, _t1466, _t1467, hh139B, _t1468, mvmt13A3, _t1469);
          string _t146A = "        fs=";
          string _t146B = "\n";
          print (_t146A, fs1451, _t146B);
          string _t146C = "        es=";
          string _t146D = "\n";
          print (_t146C, es1448, _t146D);
        }
        continue;
      }
      vec3 oldpos146E = pos1398;
      vec3 _t146F = prim +0017<$[3]> (fs1451, es1448);
      pos1398 = prim +0017<$[3]> (pos1398, _t146F);
      _pos1399 = pos1398;
      real newE1470 = 0.e0;
      closest13A4 = rad1342;
      real _t1471 = 0.e0;
      real _t1472 = 0.e0;
      real _t1473 = 0.e0;
      vec3 mno1474 = [_t1471, _t1472, _t1473];
      nn13F7 = 0;
      point[] _t1475 = prim sphere0198<point> (_pos1399, rad1342);
      foreach P1476 in _t1475 {
        vec3 _t1477 = P1476.pos1398;
        vec3 off1478 = prim -0026<$[3]> (_t1477, pos1398);
        real _t1479 = func enr1343 (off1478);
        newE1470 = prim +0017<$[]> (newE1470, _t1479);
        real _t147A = prim |()|00B5<$[3]> (off1478);
        closest13A4 = prim min0127 (closest13A4, _t147A);
        mno1474 = prim +0017<$[3]> (mno1474, off1478);
        int _t147B = 1;
        nn13F7 = prim +0015 (nn13F7, _t147B);
      }
      real _t147C = (real)nn13F7;
      mno1474 = prim /0057<$[3]> (mno1474, _t147C);
      bool _t147D;
      bool _t147E;
      int _t147F = 0;
      bool _t1480 = prim >007F (verb07DA, _t147F);
      if _t1480 {
        _t147E = vv13A7;
      } else {
        _t147E = false;
      }
      if _t147E {
        _t147D = true;
      } else {
        int _t1481 = 1;
        _t147D = prim >007F (verb07DA, _t1481);
      }
      if _t147D {
        string _t1482 = "(i#";
        string _t1483 = " @ ";
        string _t1484 = "): ";
        print (ID139A, _t1482, iter1359, _t1483, pos1398, _t1484);
        string _t1485 = "nn=";
        string _t1486 = "; oldE=";
        string _t1487 = " newE=";
        string _t1488 = "\n";
        print (_t1485, nn13F7, _t1486, oldE13F2, _t1487, newE1470, _t1488);
      }
      real _t1489 = prim -0026<$[]> (newE1470, oldE13F2);
      vec3 _t148A = prim -0026<$[3]> (pos1398, oldpos146E);
      vec3 _t148B = prim *0036<$[3]> (gdeTest07D1, _t148A);
      vec3 _t148C = prim unary -008B<$[3]> (force13F6);
      real _t148D = prim •00CE<$[3]; $[3]; $[]> (_t148B, _t148C);
      bool _t148E = prim >0080 (_t1489, _t148D);
      if _t148E {
        hh139B = prim *0034 (hh139B, gdeBack07D2);
        real _t148F = 0.e0;
        bool _t1490 = prim ==0084 (_t148F, hh139B);
        if _t1490 {
          string _t1491 = "(i#";
          string _t1492 = " @ ";
          string _t1493 = "): ";
          print (ID139A, _t1491, iter1359, _t1492, pos1398, _t1493);
          string _t1494 = "backtracked all the way to hh=0\n";
          print (_t1494);
          die;
        }
        bool _t1495;
        bool _t1496;
        int _t1497 = 0;
        bool _t1498 = prim >007F (verb07DA, _t1497);
        if _t1498 {
          _t1496 = vv13A7;
        } else {
          _t1496 = false;
        }
        if _t1496 {
          _t1495 = true;
        } else {
          int _t1499 = 1;
          _t1495 = prim >007F (verb07DA, _t1499);
        }
        if _t1495 {
          string _t149A = "(i#";
          string _t149B = " @ ";
          string _t149C = "): ";
          print (ID139A, _t149A, iter1359, _t149B, pos1398, _t149C);
          string _t149D = "nn=";
          string _t149E = "; oldE=";
          string _t149F = " newE=";
          string _t14A0 = "; backtracking; hh=";
          string _t14A1 = "; mvmt=";
          string _t14A2 = "\n";
          print (_t149D, nn13F7, _t149E, oldE13F2, _t149F, newE1470, _t14A0, hh139B, _t14A1, mvmt13A3, _t14A2);
          string _t14A3 = "      fs=";
          string _t14A4 = "\n";
          print (_t14A3, fs1451, _t14A4);
          string _t14A5 = "      es=";
          string _t14A6 = "\n";
          print (_t14A5, es1448, _t14A6);
          string _t14A7 = "      newE - oldE=";
          real _t14A8 = prim -0026<$[]> (newE1470, oldE13F2);
          string _t14A9 = "\n";
          print (_t14A7, _t14A8, _t14A9);
          string _t14AA = "      force=";
          string _t14AB = "\n";
          print (_t14AA, force13F6, _t14AB);
          string _t14AC = "      dpos=";
          vec3 _t14AD = prim -0026<$[3]> (pos1398, oldpos146E);
          string _t14AE = "\n";
          print (_t14AC, _t14AD, _t14AE);
          string _t14AF = "      0.5*(pos - oldpos).(-force)=";
          real _t14B0 = 0.5e0;
          vec3 _t14B1 = prim -0026<$[3]> (pos1398, oldpos146E);
          vec3 _t14B2 = prim *0036<$[3]> (_t14B0, _t14B1);
          vec3 _t14B3 = prim unary -008B<$[3]> (force13F6);
          real _t14B4 = prim •00CE<$[3]; $[3]; $[]> (_t14B2, _t14B3);
          string _t14B5 = "\n";
          print (_t14AF, _t14B4, _t14B5);
        }
        pos1398 = oldpos146E;
        _pos1399 = pos1398;
        continue;
      }
      hh139B = prim *0034 (hh139B, gdeOppor07D3);
      vec3 _t14B6 = prim +0017<$[3]> (fs1451, es1448);
      step139C = prim +0017<$[3]> (step139C, _t14B6);
      real _t14B7 = prim |()|00B5<$[3]> (step139C);
      real _t14B8 = prim /0055 (_t14B7, tipd07CD);
      trav13A2 = prim +0017<$[]> (trav13A2, _t14B8);
      real _t14B9 = prim |()|00B5<$[3]> (step139C);
      real _t14BA = prim /0055 (_t14B9, tipd07CD);
      mvmt13A3 = prim lerp0096<$[]> (_t14BA, mvmt13A3, hist07DC);
      real _t14BB = prim |()|00B5<$[3]> (step139C);
      real _t14BC = prim /0055 (_t14BB, tipd07CD);
      bool _t14BD = prim <007A (_t14BC, pcmvEps07D8);
      if _t14BD {
        int _t14BE = func pcIter1385 ();
        int _t14BF = 0;
        bool _t14C0 = prim !=0086 (_t14BE, _t14BF);
        if _t14C0 {
          bool _t14C1;
          int _t14C2 = func pcIter1385 ();
          int _t14C3 = 0;
          bool _t14C4 = prim >007F (_t14C2, _t14C3);
          if _t14C4 {
            bool _t14C5;
            real _t14C6 = 0.e0;
            bool _t14C7 = prim <007A (newE1470, _t14C6);
            if _t14C7 {
              bool _t14C8;
              bool _t14C9 = prim <0079 (nn13F7, nnmin12ED);
              if _t14C9 {
                _t14C8 = prim <0079 (born13A5, nnmax12F4);
              } else {
                _t14C8 = false;
              }
              _t14C5 = _t14C8;
            } else {
              _t14C5 = false;
            }
            _t14C1 = _t14C5;
          } else {
            _t14C1 = false;
          }
          if _t14C1 {
            vec3 _t14CA = prim normalize0137<$[3]> (mno1474);
            vec3 _t14CB = prim *0036<$[3]> (tipd07CD, _t14CA);
            vec3 npos14CC = prim -0026<$[3]> (pos1398, _t14CB);
            vec3 _t14CD = func fStep128C (npos14CC);
            vec3 _t14CE = prim *0036<$[3]> (sfs07DB, _t14CD);
            npos14CC = prim +0017<$[3]> (npos14CC, _t14CE);
            vec3 _t14CF = func fStep128C (npos14CC);
            vec3 _t14D0 = prim *0036<$[3]> (sfs07DB, _t14CF);
            npos14CC = prim +0017<$[3]> (npos14CC, _t14D0);
            bool birth14D1 = true;
            int _t14D2 = 2;
            bool _t14D3 = prim ==0082 (fDim07DF, _t14D2);
            if _t14D3 {
              int _t14D4 = 4;
              bool _t14D5 = prim >=007D (nn13F7, _t14D4);
              if _t14D5 {
                real _t14D6 = prim *0034 (tipd07CD, mabd07CE);
                point[] _t14D7 = prim sphere0198<point> (npos14CC, _t14D6);
                foreach P14D8 in _t14D7 {
                  birth14D1 = false;
                }
                if birth14D1 {
                  real _t14D9 = func v3rnd1373 (pos1398);
                  int _t14DA = prim -0024 (nnmin12ED, nn13F7);
                  real _t14DB = (real)_t14DA;
                  real _t14DC = prim $i2r01B6 (nnmin12ED);
                  real _t14DD = prim /0055 (_t14DB, _t14DC);
                  birth14D1 = prim <007A (_t14D9, _t14DD);
                }
              }
            }
            if birth14D1 {
              bool _t14DE = func posTest12DD (npos14CC);
              if _t14DE {
                new point (npos14CC, hh139B);
                int _t14DF = 1;
                born13A5 = prim +0015 (born13A5, _t14DF);
              }
            }
          } else {
            int _t14E0 = func pcIter1385 ();
            int _t14E1 = 0;
            bool _t14E2 = prim <0079 (_t14E0, _t14E1);
            if _t14E2 {
              real _t14E3 = 0.e0;
              bool _t14E4 = prim >0080 (newE1470, _t14E3);
              if _t14E4 {
                bool _t14E5 = prim >007F (nn13F7, nnmax12F4);
                if _t14E5 {
                  real _t14E6 = func v3rnd1373 (pos1398);
                  int _t14E7 = prim -0024 (nn13F7, nnmax12F4);
                  real _t14E8 = (real)_t14E7;
                  real _t14E9 = prim $i2r01B6 (nn13F7);
                  real _t14EA = prim /0055 (_t14E8, _t14E9);
                  bool _t14EB = prim <007A (_t14E6, _t14EA);
                  if _t14EB {
                    die;
                  }
                }
              }
            }
          }
        }
      }
    }
    first13A6 = false;
  }
}
collection {
  int _t14F7 = 0;
  int _t14F8 = prim length0123<vec3> (ipos07DE);
  int _t14F9 = 1;
  int _t14FA = prim -0024 (_t14F8, _t14F9);
  int[] _t14FB = prim $range01C3 (_t14F7, _t14FA);
  foreach ii14FC in _t14FB {
    vec3 _t14FD = prim $dynsub01C2<vec3> (ipos07DE, ii14FC);
    real _t14FE = 0.1e1;
    new point (_t14FD, _t14FE);
  }
}
update {
  int pop14FF = prim numActive01A2 ();
  int _t1500;
  bool _t1501 = prim !=0086 (pop14FF, popLast135B);
  if _t1501 {
    _t1500 = 1;
  } else {
    _t1500 = 0;
  }
  int pc1502 = _t1500;
  real _t1503 = (real)pc1502;
  rpc135A = prim lerp0096<$[]> (_t1503, rpc135A, pchist1358);
  bool res1504= all { (P1507) => {
      bool _t1508 = P1507.found13A0;
      return _t1508;
    } (P1505, P1505)
  | P1505 in all };
  bool allfound150A = res1504;
  real _t150B = 0.1e3;
  real res150C= sum<real> { (P1510) => {
      real _t1511;
      bool _t1512 = P1510.found13A0;
      if _t1512 {
        _t1511 = 0.1e1;
      } else {
        _t1511 = 0.e0;
      }
      return _t1511;
    } (P150D, P150D)
  | P150D in all };
  int num1514 = prim numStrands01A4 ();
  real rNum1515 = (real)num1514;
  real mean1516 = prim /0055 (res150C, rNum1515);
  real percfound1517 = prim *0034 (_t150B, mean1516);
  real res1518= sum<real> { (P151B) => {
      real _t151C = P151B.closest13A4;
      return _t151C;
    } (P1519, P1519)
  | P1519 in all };
  int num151E = prim numStrands01A4 ();
  real rNum151F = (real)num151E;
  real mean1520 = prim /0055 (res1518, rNum151F);
  real meancl1521 = mean1520;
  real res1522= sum<real> { (P1528, meancl152A) => {
      real _t1529 = P1528.closest13A4;
      real _t152B = prim -0026<$[]> (_t1529, meancl152A);
      int _t152C = 2;
      real _t152D = prim ^0068 (_t152B, _t152C);
      return _t152D;
    } (P1523, P1523, meancl1521)
  | P1523 in all };
  int num152F = prim numStrands01A4 ();
  real rNum1530 = (real)num152F;
  real mean1531 = prim /0055 (res1522, rNum1530);
  real varicl1532 = mean1531;
  real _t1533 = prim sqrt0165 (varicl1532);
  real covcl1534 = prim /0055 (_t1533, meancl1521);
  real res1535= max<real> { (P1538) => {
      real _t1539 = P1538.mvmt13A3;
      return _t1539;
    } (P1536, P1536)
  | P1536 in all };
  real maxmvmt153B = res1535;
  string _t153C = "======= finished iter ";
  string _t153D = " w/ ";
  string _t153E = ")";
  string _t153F = "; %found=";
  string _t1540 = "; mean(hh)=";
  real res1541= sum<real> { (P1544) => {
      real _t1545 = P1544.hh139B;
      return _t1545;
    } (P1542, P1542)
  | P1542 in all };
  int num1547 = prim numStrands01A4 ();
  real rNum1548 = (real)num1547;
  real mean1549 = prim /0055 (res1541, rNum1548);
  string _t154A = "; mean(cl)=";
  string _t154B = "; COV(cl)=";
  string _t154C = "; max(mvmt)=";
  string _t154D = "; pc=";
  string _t154E = "; rpc=";
  string _t154F = "\n";
  print (_t153C, iter1359, _t153D, pop14FF, _t153E, _t153F, percfound1517, _t1540, mean1549, _t154A, meancl1521, _t154B, covcl1534, _t154C, maxmvmt153B, _t154D, pc1502, _t154E, rpc135A, _t154F);
  bool _t1550;
  if allfound150A {
    bool _t1551;
    bool _t1552 = prim <007A (covcl1534, geoEps07D5);
    if _t1552 {
      bool _t1553;
      bool _t1554 = prim <007A (maxmvmt153B, mvmtEps07D6);
      if _t1554 {
        _t1553 = prim <007A (rpc135A, rpcEps07D7);
      } else {
        _t1553 = false;
      }
      _t1551 = _t1553;
    } else {
      _t1551 = false;
    }
    _t1550 = _t1551;
  } else {
    _t1550 = false;
  }
  if _t1550 {
    string _t1555 = "======= Stabilizing ";
    int _t1556 = prim numActive01A2 ();
    string _t1557 = " (iter ";
    string _t1558 = ")";
    string _t1559 = "; COV(cl)=";
    string _t155A = " < ";
    string _t155B = "; max(mvmt)=";
    string _t155C = " < ";
    string _t155D = "; rpc=";
    string _t155E = " < ";
    string _t155F = "\n";
    print (_t1555, _t1556, _t1557, iter1359, _t1558, _t1559, covcl1534, _t155A, geoEps07D5, _t155B, maxmvmt153B, _t155C, mvmtEps07D6, _t155D, rpc135A, _t155E, rpcEps07D7, _t155F);
    stabilize_all;
  } else {
    string _t1560 = "======= Stabilizing ";
    int _t1561 = prim numActive01A2 ();
    string _t1562 = " (iter ";
    string _t1563 = ")";
    string _t1564 = "; COV(cl)=";
    string _t1565 = " > ";
    string _t1566 = "; max(mvmt)=";
    string _t1567 = " > ";
    string _t1568 = "; rpc=";
    string _t1569 = " > ";
    string _t156A = "\n";
    print (_t1560, _t1561, _t1562, iter1359, _t1563, _t1564, covcl1534, _t1565, geoEps07D5, _t1566, maxmvmt153B, _t1567, mvmtEps07D6, _t1568, rpc135A, _t1569, rpcEps07D7, _t156A);
  }
  int _t156B = 1;
  iter1359 = prim +0015 (iter1359, _t156B);
  popLast135B = pop14FF;
}
/* Program end */
/* Simplified Program (after after map-reduce-fusion) start */
properties: GlobalInit,StabilizeAll,GlobalReduce,StrandSets,GlobalUpdate,NewStrands,StrandCommunication,StrandsMayDie,HasInputs,HasGlobals,ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
input FemData:Mesh meshData07BA;
input FemData:Space 0space07C6_intermedateGlobal07C7;
input FemData:FemFunc 0data07C8_intermedateGlobal07C9;
input real fStrTh07CA("Feature strength threshold");
input real fMaskTh07CB("feature mask threshold") = <default>;
input real fBias07CC("Bias in feature strength computing") = <default>;
input real tipd07CD("Target inter-particle distance") = <default>;
input real mabd07CE("Min allowed birth distance (> 0.7351)") = <default>;
input real travMax07CF("Max allowed travel to or on feature") = <default>;
input int nfsMax07D0("Max allowed # feature steps ") = <default>;
input real gdeTest07D1("Scaling in sufficient decrease test") = <default>;
input real gdeBack07D2("How to scale stepsize for backtrack") = <default>;
input real gdeOppor07D3("Opportunistic stepsize increase") = <default>;
input real fsEps07D4("Conv. thresh. on feature step size");
input real geoEps07D5("Conv. thresh. on system geometry") = <default>;
input real mvmtEps07D6("Conv. thresh. on point movement") = <default>;
input real rpcEps07D7("Conv. thresh. on recent pop. changes") = <default>;
input real pcmvEps07D8("Motion limit before PC") = <default>;
input real isoval07D9("Which isosurface to sample") = <default>;
input int verb07DA("Verbosity level") = <default>;
input real sfs07DB("Scaling (<=1 for stability) on fStep") = <default>;
input real hist07DC("How history matters for convergence") = <default>;
input int pcp07DD("periodicity of population control (PC)") = <default>;
input vec3[] ipos07DE("Initial point positions");
input int fDim07DF = <default>;
constants {
  fMaskTh07CB = 0.e0;
  fBias07CC = 0.e0;
  tipd07CD = 0.1e1;
  mabd07CE = 0.75e0;
  travMax07CF = 0.1e2;
  nfsMax07D0 = 20;
  gdeTest07D1 = 0.5e0;
  gdeBack07D2 = 0.5e0;
  gdeOppor07D3 = 0.12e1;
  geoEps07D5 = 0.1e0;
  mvmtEps07D6 = 0.1e-1;
  rpcEps07D7 = 0.1e-1;
  pcmvEps07D8 = 0.3e0;
  isoval07D9 = 0.e0;
  verb07DA = 0;
  sfs07DB = 0.5e0;
  hist07DC = 0.5e0;
  pcp07DD = 5;
  fDim07DF = 2;
}
global int nnmin12ED;
global int nnmax12F4;
global real phiWellRad1341;
global real rad1342;
global real pchist1358;
global int iter1359;
global real rpc135A;
global int popLast135B;
function bool#0 !=07E0 (Femdata: MeshCell cell107E1, Femdata: MeshCell cell107E2)
{
  int _t07E3 = extractFemItem(CellIndex(Mesh), int, cell107E1);
  int _t07E4 = extractFemItem(CellIndex(Mesh), int, cell107E2);
  bool _t07E5 = prim !=0086 (_t07E3, _t07E4);
  return _t07E5;
}
function bool#0 ==07E6 (Femdata: MeshCell cell107E1, Femdata: MeshCell cell107E2)
{
  int _t07E7 = extractFemItem(CellIndex(Mesh), int, cell107E1);
  int _t07E8 = extractFemItem(CellIndex(Mesh), int, cell107E2);
  bool _t07E9 = prim ==0082 (_t07E7, _t07E8);
  return _t07E9;
}
function Femdata: MeshPos#0 findPos07EA (Femdata: Mesh mesh07EB, vec3 pos07EC)
{
  real _t07ED = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t07EE = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t07EF = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  xn07F0 = [_t07ED, _t07EE, _t07EF];
  newtonInt07F1 = 0;
  cellInt07F2 = extractFemItem(StartCell(Mesh), int, mesh07EB);
  int _t07F3 = extractFemItem(NumCell(Mesh), int, mesh07EB);
  int _t07F4 = 1;
  numCell07F5 = prim -0024 (_t07F3, _t07F4);
  yayCells07F6 = extractFemItem2(NearbyCell(File=spat.in)(Mesh), vec3, mesh07EB, pos07EC : vec3);
  foreach cellItter07FA in yayCells07F6 {
    real _t07F7 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    real _t07F8 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    real _t07F9 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    xn07F0 = [_t07F7, _t07F8, _t07F9];
    cellInt07F2 = cellItter07FA;
    field(3)[3] _t07FB = femField(mesh07EB,cellInt07F2,field(3)[3],Transform,);
    field(3)[3,3] _t07FC = prim ∇⊗00AD<#∞; %3; $[]; %3> (_t07FB);
    field(3)[3,3] _t07FD = prim inv015E<#∞; %3> (_t07FC);
    real _t07FE = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    real _t07FF = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    real _t0800 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    vec3 _t0801 = [_t07FE, _t07FF, _t0800];
    A0802 = prim @00A5<#∞; %3; $[3,3]> (_t07FD, _t0801);
    int _t0803 = 0;
    int _t0804 = 16;
    int[] _t0805 = prim $range01C3 (_t0803, _t0804);
    foreach newtonItter0834 in _t0805 {
      field(3)[3] _t0806 = femField(mesh07EB,cellInt07F2,field(3)[3],Transform,);
      field(3)[3] _t0807 = prim -002E<#∞; %3; $[3]> (_t0806, pos07EC);
      field(3)[3] _t0808 = prim •00D4<#∞; %3; $[3,3]; $[3]; $[3]> (A0802, _t0807);
      delta0809 = prim @00A5<#∞; %3; $[3]> (_t0808, xn07F0);
      xn07F0 = prim -0026<$[3]> (xn07F0, delta0809);
      real _t080A = 0.1e-7;
      real _t080B = 0.1e-7;
      real _t080C = prim *0034 (_t080A, _t080B);
      real _t080D = prim •00CE<$[3]; $[3]; $[]> (delta0809, delta0809);
      bool _t080E = prim >=007E (_t080C, _t080D);
      if _t080E {
        real _t080F = 0.1e1;
        real _t0810 = 0.1e-7;
        real _t0811 = prim +0017<$[]> (_t080F, _t0810);
        real _t0812 = 0.1e1;
        real _t0813 = 0.1e1;
        real _t0814 = 0.1e1;
        vec3 _t0815 = [_t0812, _t0813, _t0814];
        real _t0816 = prim •00CE<$[3]; $[3]; $[]> (_t0815, xn07F0);
        bool _t0817 = prim >0080 (_t0811, _t0816);
        real _t0818 = 0.1e-7;
        real _t0819 = 0.1e-7;
        real _t081A = 0.1e-7;
        vec3 _t081B = [_t0818, _t0819, _t081A];
        vec3 _t081C = prim +0017<$[3]> (_t081B, xn07F0);
        real _t081D = _t081C[0];
        real _t081E = -0.e0;
        bool _t081F = prim >0080 (_t081D, _t081E);
        real _t0820 = 0.1e-7;
        real _t0821 = 0.1e-7;
        real _t0822 = 0.1e-7;
        vec3 _t0823 = [_t0820, _t0821, _t0822];
        vec3 _t0824 = prim +0017<$[3]> (_t0823, xn07F0);
        real _t0825 = _t0824[1];
        real _t0826 = -0.e0;
        bool _t0827 = prim >0080 (_t0825, _t0826);
        real _t0828 = 0.1e-7;
        real _t0829 = 0.1e-7;
        real _t082A = 0.1e-7;
        vec3 _t082B = [_t0828, _t0829, _t082A];
        vec3 _t082C = prim +0017<$[3]> (_t082B, xn07F0);
        real _t082D = _t082C[2];
        real _t082E = -0.e0;
        bool _t082F = prim >0080 (_t082D, _t082E);
        bool _t0830 = prim $and01C4 (_t0827, _t082F);
        bool _t0831 = prim $and01C4 (_t081F, _t0830);
        bool _t0832 = prim $and01C4 (_t0817, _t0831);
        if _t0832 {
          Femdata: MeshPos _t0833 = extractFemItemN((mesh07EB, cellInt07F2, xn07F0, pos07EC),AllBuild(MeshPos),);
          return _t0833;
        }
      }
    }
  }
  Femdata: MeshPos _t0835 = extractFemItemN((mesh07EB),InvalidBuild(MeshPos),);
  return _t0835;
}
function Femdata: RefCell#1 refcell0836 (Femdata: Mesh arg00837)
{
  Femdata: RefCell _t0838 = extractFemItem(RefCell(Mesh), Femdata: RefCell, arg00837);
  return _t0838;
}
function Femdata: MeshCell[]#0 cells0839 (Femdata: Mesh arg0083A)
{
  Femdata: MeshCell[] _t083B = extractFemItem(Cells(Mesh), Femdata: MeshCell[], arg0083A);
  return _t083B;
}
function Femdata: MeshCell[]#0 cells083C (Femdata: Mesh arg0083A)
{
  int _t083D = 0;
  int _t083E = extractFemItem(NumCell(Mesh), int, arg0083A);
  int[] _t083F = prim $range01C3 (_t083D, _t083E);
  Femdata: MeshCell[] accum0842 = {};
  foreach i0840 in _t083F {
    Femdata: MeshCell _t0841 = loadFem(MeshCell, arg0083A, i0840);
    accum0842 = prim @0010<Femdata: MeshCell> (accum0842, _t0841);
  }
  return accum0842;
}
function int#0 numCell0843 (Femdata: Mesh arg00837)
{
  int _t0844 = extractFemItem(NumCell(Mesh), int, arg00837);
  return _t0844;
}
function tensor[3,3,3,3]#0 mesh_t_transform_30845 (vec3 pos0846, int cell0847, Femdata: Mesh mesh0848)
{
  field(3)[3] _t0849 = femField(mesh0848,cell0847,field(3)[3],Transform,);
  field(3)[3,3] _t084A = prim ∇⊗00AD<#∞; %3; $[]; %3> (_t0849);
  field(3)[3,3,3] _t084B = prim ∇⊗00AD<#∞; %3; $[3]; %3> (_t084A);
  field(3)[3,3,3,3] _t084C = prim ∇⊗00AD<#∞; %3; $[3,3]; %3> (_t084B);
  tensor[3,3,3,3] _t084D = prim @00A5<#∞; %3; $[3,3,3,3]> (_t084C, pos0846);
  return _t084D;
}
function tensor[3,3,3]#0 mesh_t_transform_2084E (vec3 pos0846, int cell0847, Femdata: Mesh mesh0848)
{
  field(3)[3] _t084F = femField(mesh0848,cell0847,field(3)[3],Transform,);
  field(3)[3,3] _t0850 = prim ∇⊗00AD<#∞; %3; $[]; %3> (_t084F);
  field(3)[3,3,3] _t0851 = prim ∇⊗00AD<#∞; %3; $[3]; %3> (_t0850);
  tensor[3,3,3] _t0852 = prim @00A5<#∞; %3; $[3,3,3]> (_t0851, pos0846);
  return _t0852;
}
function tensor[3,3]#0 mesh_t_transform_10853 (vec3 pos0846, int cell0847, Femdata: Mesh mesh0848)
{
  field(3)[3] _t0854 = femField(mesh0848,cell0847,field(3)[3],Transform,);
  field(3)[3,3] _t0855 = prim ∇⊗00AD<#∞; %3; $[]; %3> (_t0854);
  tensor[3,3] _t0856 = prim @00A5<#∞; %3; $[3,3]> (_t0855, pos0846);
  return _t0856;
}
function vec3#2 mesh_t_transform_00857 (vec3 pos0846, int cell0847, Femdata: Mesh mesh0848)
{
  field(3)[3] _t0858 = femField(mesh0848,cell0847,field(3)[3],Transform,);
  vec3 _t0859 = prim @00A5<#∞; %3; $[3]> (_t0858, pos0846);
  return _t0859;
}
function Femdata: MeshPos#0 _mesh_t_newtonInverse085A (vec3 pos085B, int cellInt085C, Femdata: Mesh mesh085D)
{
  real _t085E = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t085F = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t0860 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  xn0861 = [_t085E, _t085F, _t0860];
  field(3)[3] _t0862 = femField(mesh085D,cellInt085C,field(3)[3],Transform,);
  field(3)[3,3] _t0863 = prim ∇⊗00AD<#∞; %3; $[]; %3> (_t0862);
  field(3)[3,3] _t0864 = prim inv015E<#∞; %3> (_t0863);
  real _t0865 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t0866 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t0867 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  vec3 _t0868 = [_t0865, _t0866, _t0867];
  A0869 = prim @00A5<#∞; %3; $[3,3]> (_t0864, _t0868);
  int _t086A = 0;
  int _t086B = 16;
  int[] _t086C = prim $range01C3 (_t086A, _t086B);
  foreach itter089C in _t086C {
    field(3)[3] _t086D = femField(mesh085D,cellInt085C,field(3)[3],Transform,);
    field(3)[3] _t086E = prim -002E<#∞; %3; $[3]> (_t086D, pos085B);
    field(3)[3] _t086F = prim •00D4<#∞; %3; $[3,3]; $[3]; $[3]> (A0869, _t086E);
    delta0870 = prim @00A5<#∞; %3; $[3]> (_t086F, xn0861);
    xn0861 = prim -0026<$[3]> (xn0861, delta0870);
    real _t0871 = 0.1e-7;
    real _t0872 = 0.1e-7;
    real _t0873 = prim *0034 (_t0871, _t0872);
    real _t0874 = prim •00CE<$[3]; $[3]; $[]> (delta0870, delta0870);
    bool _t0875 = prim >=007E (_t0873, _t0874);
    if _t0875 {
      real _t0876 = 0.1e1;
      real _t0877 = 0.1e-7;
      real _t0878 = prim +0017<$[]> (_t0876, _t0877);
      real _t0879 = 0.1e1;
      real _t087A = 0.1e1;
      real _t087B = 0.1e1;
      vec3 _t087C = [_t0879, _t087A, _t087B];
      real _t087D = prim •00CE<$[3]; $[3]; $[]> (_t087C, xn0861);
      bool _t087E = prim >0080 (_t0878, _t087D);
      real _t087F = 0.1e-7;
      real _t0880 = 0.1e-7;
      real _t0881 = 0.1e-7;
      vec3 _t0882 = [_t087F, _t0880, _t0881];
      vec3 _t0883 = prim +0017<$[3]> (_t0882, xn0861);
      real _t0884 = _t0883[0];
      real _t0885 = -0.e0;
      bool _t0886 = prim >0080 (_t0884, _t0885);
      real _t0887 = 0.1e-7;
      real _t0888 = 0.1e-7;
      real _t0889 = 0.1e-7;
      vec3 _t088A = [_t0887, _t0888, _t0889];
      vec3 _t088B = prim +0017<$[3]> (_t088A, xn0861);
      real _t088C = _t088B[1];
      real _t088D = -0.e0;
      bool _t088E = prim >0080 (_t088C, _t088D);
      real _t088F = 0.1e-7;
      real _t0890 = 0.1e-7;
      real _t0891 = 0.1e-7;
      vec3 _t0892 = [_t088F, _t0890, _t0891];
      vec3 _t0893 = prim +0017<$[3]> (_t0892, xn0861);
      real _t0894 = _t0893[2];
      real _t0895 = -0.e0;
      bool _t0896 = prim >0080 (_t0894, _t0895);
      bool _t0897 = prim $and01C4 (_t088E, _t0896);
      bool _t0898 = prim $and01C4 (_t0886, _t0897);
      bool _t0899 = prim $and01C4 (_t087E, _t0898);
      if _t0899 {
        Femdata: MeshPos _t089A = extractFemItemN((mesh085D, cellInt085C, xn0861, pos085B),AllBuild(MeshPos),);
        return _t089A;
      } else {
        Femdata: MeshPos _t089B = extractFemItemN((mesh085D),InvalidBuild(MeshPos),);
        return _t089B;
      }
    }
  }
  Femdata: MeshPos _t089D = extractFemItemN((mesh085D),InvalidBuild(MeshPos),);
  return _t089D;
}
function Femdata: MeshPos#0 _mesh_pos_mesh_t_build_world_pos089E (Femdata: MeshPos pos089F)
{
  bool _t08A0 = extractFemItem(WorldTest(MeshPos), bool, pos089F);
  if _t08A0 {
    vec3 _t08A1 = extractFemItem(RefPos(MeshPos), vec3, pos089F);
    int _t08A2 = extractFemItem(CellIndex(MeshPos), int, pos089F);
    Femdata: Mesh _t08A3 = extractFem(pos089F, Mesh);
    vec3 _t08A4 = func mesh_t_transform_00857 (_t08A1, _t08A2, _t08A3);
    Femdata: MeshPos _t08A5 = extractFemItemN((pos089F, _t08A4),NewWorld(MeshPos),);
    return _t08A5;
  } else {
    return pos089F;
  }
}
function vec3#0 worldPos08A6 (Femdata: MeshPos pos089F)
{
  vec3 _t08A7 = extractFemItem(RefPos(MeshPos), vec3, pos089F);
  int _t08A8 = extractFemItem(CellIndex(MeshPos), int, pos089F);
  Femdata: Mesh _t08A9 = extractFem(pos089F, Mesh);
  vec3 _t08AA = func mesh_t_transform_00857 (_t08A7, _t08A8, _t08A9);
  return _t08AA;
}
function Femdata: MeshPos#0 $exitPos08AB (Femdata: Mesh mesh08AC, int cellId08AD, vec3 refPos08AE, vec3 dPos08AF, real[2] time08B0)
{
  int _t08B1 = -1;
  real _t08B2 = time08B0[1];
  int _t08B3 = prim $r2i01B7 (_t08B2);
  int[2] _t08B5 = func nextCell408B4 (_t08B3, cellId08AD, mesh08AC);
  int _t08B6 = 0;
  int _t08B7 = prim $sub01C0<int; %2> (_t08B5, _t08B6);
  bool _t08B8 = prim !=0086 (_t08B1, _t08B7);
  if _t08B8 {
    real _t08B9 = time08B0[1];
    int _t08BA = prim $r2i01B7 (_t08B9);
    int[2] _t08BB = func nextCell408B4 (_t08BA, cellId08AD, mesh08AC);
    int _t08BC = 0;
    int _t08BD = prim $sub01C0<int; %2> (_t08BB, _t08BC);
    real _t08BE = 0.1e1;
    real _t08BF = 0.e0;
    real _t08C0 = 0.e0;
    real _t08C1 = 0.e0;
    vec4 _t08C2 = [_t08BE, _t08BF, _t08C0, _t08C1];
    real _t08C3 = 0.e0;
    real _t08C4 = 0.1e1;
    real _t08C5 = 0.e0;
    real _t08C6 = 0.e0;
    vec4 _t08C7 = [_t08C3, _t08C4, _t08C5, _t08C6];
    real _t08C8 = 0.e0;
    real _t08C9 = 0.e0;
    real _t08CA = 0.1e1;
    real _t08CB = 0.e0;
    vec4 _t08CC = [_t08C8, _t08C9, _t08CA, _t08CB];
    real _t08CD = 0.971445146547e-16;
    real _t08CE = 0.e0;
    real _t08CF = 0.e0;
    real _t08D0 = 0.1e1;
    vec4 _t08D1 = [_t08CD, _t08CE, _t08CF, _t08D0];
    tensor[4,4] _t08D2 = [_t08C2, _t08C7, _t08CC, _t08D1];
    real _t08D3 = 0.57735026919e0;
    real _t08D4 = 0.57735026919e0;
    real _t08D5 = 0.57735026919e0;
    real _t08D6 = -0.57735026919e0;
    vec4 _t08D7 = [_t08D3, _t08D4, _t08D5, _t08D6];
    real _t08D8 = -0.333333333333e0;
    real _t08D9 = 0.666666666667e0;
    real _t08DA = -0.333333333333e0;
    real _t08DB = 0.333333333333e0;
    vec4 _t08DC = [_t08D8, _t08D9, _t08DA, _t08DB];
    real _t08DD = -0.333333333333e0;
    real _t08DE = -0.333333333333e0;
    real _t08DF = 0.666666666667e0;
    real _t08E0 = 0.333333333333e0;
    vec4 _t08E1 = [_t08DD, _t08DE, _t08DF, _t08E0];
    real _t08E2 = 0.971445146547e-16;
    real _t08E3 = 0.e0;
    real _t08E4 = 0.e0;
    real _t08E5 = 0.1e1;
    vec4 _t08E6 = [_t08E2, _t08E3, _t08E4, _t08E5];
    tensor[4,4] _t08E7 = [_t08D7, _t08DC, _t08E1, _t08E6];
    real _t08E8 = -0.333333333333e0;
    real _t08E9 = 0.666666666667e0;
    real _t08EA = -0.333333333333e0;
    real _t08EB = 0.333333333333e0;
    vec4 _t08EC = [_t08E8, _t08E9, _t08EA, _t08EB];
    real _t08ED = -0.57735026919e0;
    real _t08EE = -0.57735026919e0;
    real _t08EF = -0.57735026919e0;
    real _t08F0 = 0.57735026919e0;
    vec4 _t08F1 = [_t08ED, _t08EE, _t08EF, _t08F0];
    real _t08F2 = -0.333333333333e0;
    real _t08F3 = -0.333333333333e0;
    real _t08F4 = 0.666666666667e0;
    real _t08F5 = 0.333333333333e0;
    vec4 _t08F6 = [_t08F2, _t08F3, _t08F4, _t08F5];
    real _t08F7 = 0.971445146547e-16;
    real _t08F8 = 0.e0;
    real _t08F9 = 0.e0;
    real _t08FA = 0.1e1;
    vec4 _t08FB = [_t08F7, _t08F8, _t08F9, _t08FA];
    tensor[4,4] _t08FC = [_t08EC, _t08F1, _t08F6, _t08FB];
    real _t08FD = -0.333333333333e0;
    real _t08FE = 0.666666666667e0;
    real _t08FF = -0.333333333333e0;
    real _t0900 = 0.333333333333e0;
    vec4 _t0901 = [_t08FD, _t08FE, _t08FF, _t0900];
    real _t0902 = -0.333333333333e0;
    real _t0903 = -0.333333333333e0;
    real _t0904 = 0.666666666667e0;
    real _t0905 = 0.333333333333e0;
    vec4 _t0906 = [_t0902, _t0903, _t0904, _t0905];
    real _t0907 = 0.57735026919e0;
    real _t0908 = 0.57735026919e0;
    real _t0909 = 0.57735026919e0;
    real _t090A = -0.57735026919e0;
    vec4 _t090B = [_t0907, _t0908, _t0909, _t090A];
    real _t090C = 0.971445146547e-16;
    real _t090D = 0.e0;
    real _t090E = 0.e0;
    real _t090F = 0.1e1;
    vec4 _t0910 = [_t090C, _t090D, _t090E, _t090F];
    tensor[4,4] _t0911 = [_t0901, _t0906, _t090B, _t0910];
    tensor[4,4][4] _t0912 = {_t08D2, _t08E7, _t08FC, _t0911};
    real _t0913 = 0.57735026919e0;
    real _t0914 = -0.1e1;
    real _t0915 = -0.1e1;
    real _t0916 = 0.1e1;
    vec4 _t0917 = [_t0913, _t0914, _t0915, _t0916];
    real _t0918 = 0.57735026919e0;
    real _t0919 = 0.1e1;
    real _t091A = 0.e0;
    real _t091B = 0.e0;
    vec4 _t091C = [_t0918, _t0919, _t091A, _t091B];
    real _t091D = 0.57735026919e0;
    real _t091E = 0.e0;
    real _t091F = 0.1e1;
    real _t0920 = 0.e0;
    vec4 _t0921 = [_t091D, _t091E, _t091F, _t0920];
    real _t0922 = 0.e0;
    real _t0923 = 0.e0;
    real _t0924 = 0.e0;
    real _t0925 = 0.1e1;
    vec4 _t0926 = [_t0922, _t0923, _t0924, _t0925];
    tensor[4,4] _t0927 = [_t0917, _t091C, _t0921, _t0926];
    real _t0928 = 0.1e1;
    real _t0929 = 0.e0;
    real _t092A = 0.e0;
    real _t092B = 0.e0;
    vec4 _t092C = [_t0928, _t0929, _t092A, _t092B];
    real _t092D = 0.e0;
    real _t092E = 0.1e1;
    real _t092F = 0.e0;
    real _t0930 = 0.e0;
    vec4 _t0931 = [_t092D, _t092E, _t092F, _t0930];
    real _t0932 = 0.e0;
    real _t0933 = 0.e0;
    real _t0934 = 0.1e1;
    real _t0935 = 0.e0;
    vec4 _t0936 = [_t0932, _t0933, _t0934, _t0935];
    real _t0937 = 0.e0;
    real _t0938 = 0.e0;
    real _t0939 = 0.e0;
    real _t093A = 0.1e1;
    vec4 _t093B = [_t0937, _t0938, _t0939, _t093A];
    tensor[4,4] _t093C = [_t092C, _t0931, _t0936, _t093B];
    real _t093D = 0.e0;
    real _t093E = 0.1e1;
    real _t093F = 0.e0;
    real _t0940 = 0.e0;
    vec4 _t0941 = [_t093D, _t093E, _t093F, _t0940];
    real _t0942 = -0.1e1;
    real _t0943 = 0.e0;
    real _t0944 = 0.e0;
    real _t0945 = 0.e0;
    vec4 _t0946 = [_t0942, _t0943, _t0944, _t0945];
    real _t0947 = 0.e0;
    real _t0948 = 0.e0;
    real _t0949 = 0.1e1;
    real _t094A = 0.e0;
    vec4 _t094B = [_t0947, _t0948, _t0949, _t094A];
    real _t094C = 0.e0;
    real _t094D = 0.e0;
    real _t094E = 0.e0;
    real _t094F = 0.1e1;
    vec4 _t0950 = [_t094C, _t094D, _t094E, _t094F];
    tensor[4,4] _t0951 = [_t0941, _t0946, _t094B, _t0950];
    real _t0952 = 0.e0;
    real _t0953 = 0.1e1;
    real _t0954 = 0.e0;
    real _t0955 = 0.e0;
    vec4 _t0956 = [_t0952, _t0953, _t0954, _t0955];
    real _t0957 = 0.e0;
    real _t0958 = 0.e0;
    real _t0959 = 0.1e1;
    real _t095A = 0.e0;
    vec4 _t095B = [_t0957, _t0958, _t0959, _t095A];
    real _t095C = 0.1e1;
    real _t095D = 0.e0;
    real _t095E = 0.e0;
    real _t095F = 0.e0;
    vec4 _t0960 = [_t095C, _t095D, _t095E, _t095F];
    real _t0961 = 0.e0;
    real _t0962 = 0.e0;
    real _t0963 = 0.e0;
    real _t0964 = 0.1e1;
    vec4 _t0965 = [_t0961, _t0962, _t0963, _t0964];
    tensor[4,4] _t0966 = [_t0956, _t095B, _t0960, _t0965];
    tensor[4,4][4] _t0967 = {_t0927, _t093C, _t0951, _t0966};
    real _t0968 = -0.1e1;
    real _t0969 = -0.57735026919e0;
    real _t096A = -0.1e1;
    real _t096B = 0.1e1;
    vec4 _t096C = [_t0968, _t0969, _t096A, _t096B];
    real _t096D = 0.1e1;
    real _t096E = -0.57735026919e0;
    real _t096F = 0.e0;
    real _t0970 = 0.e0;
    vec4 _t0971 = [_t096D, _t096E, _t096F, _t0970];
    real _t0972 = 0.e0;
    real _t0973 = -0.57735026919e0;
    real _t0974 = 0.1e1;
    real _t0975 = 0.e0;
    vec4 _t0976 = [_t0972, _t0973, _t0974, _t0975];
    real _t0977 = 0.e0;
    real _t0978 = 0.e0;
    real _t0979 = 0.e0;
    real _t097A = 0.1e1;
    vec4 _t097B = [_t0977, _t0978, _t0979, _t097A];
    tensor[4,4] _t097C = [_t096C, _t0971, _t0976, _t097B];
    real _t097D = 0.e0;
    real _t097E = -0.1e1;
    real _t097F = 0.e0;
    real _t0980 = 0.e0;
    vec4 _t0981 = [_t097D, _t097E, _t097F, _t0980];
    real _t0982 = 0.1e1;
    real _t0983 = 0.e0;
    real _t0984 = 0.e0;
    real _t0985 = 0.e0;
    vec4 _t0986 = [_t0982, _t0983, _t0984, _t0985];
    real _t0987 = 0.e0;
    real _t0988 = 0.e0;
    real _t0989 = 0.1e1;
    real _t098A = 0.e0;
    vec4 _t098B = [_t0987, _t0988, _t0989, _t098A];
    real _t098C = 0.e0;
    real _t098D = 0.e0;
    real _t098E = 0.e0;
    real _t098F = 0.1e1;
    vec4 _t0990 = [_t098C, _t098D, _t098E, _t098F];
    tensor[4,4] _t0991 = [_t0981, _t0986, _t098B, _t0990];
    real _t0992 = 0.1e1;
    real _t0993 = 0.e0;
    real _t0994 = 0.e0;
    real _t0995 = 0.e0;
    vec4 _t0996 = [_t0992, _t0993, _t0994, _t0995];
    real _t0997 = 0.e0;
    real _t0998 = 0.1e1;
    real _t0999 = 0.e0;
    real _t099A = 0.e0;
    vec4 _t099B = [_t0997, _t0998, _t0999, _t099A];
    real _t099C = 0.e0;
    real _t099D = 0.e0;
    real _t099E = 0.1e1;
    real _t099F = 0.e0;
    vec4 _t09A0 = [_t099C, _t099D, _t099E, _t099F];
    real _t09A1 = 0.e0;
    real _t09A2 = 0.e0;
    real _t09A3 = 0.e0;
    real _t09A4 = 0.1e1;
    vec4 _t09A5 = [_t09A1, _t09A2, _t09A3, _t09A4];
    tensor[4,4] _t09A6 = [_t0996, _t099B, _t09A0, _t09A5];
    real _t09A7 = 0.1e1;
    real _t09A8 = 0.e0;
    real _t09A9 = 0.e0;
    real _t09AA = 0.e0;
    vec4 _t09AB = [_t09A7, _t09A8, _t09A9, _t09AA];
    real _t09AC = 0.e0;
    real _t09AD = 0.e0;
    real _t09AE = 0.1e1;
    real _t09AF = 0.e0;
    vec4 _t09B0 = [_t09AC, _t09AD, _t09AE, _t09AF];
    real _t09B1 = 0.e0;
    real _t09B2 = -0.1e1;
    real _t09B3 = 0.e0;
    real _t09B4 = 0.e0;
    vec4 _t09B5 = [_t09B1, _t09B2, _t09B3, _t09B4];
    real _t09B6 = 0.e0;
    real _t09B7 = 0.e0;
    real _t09B8 = 0.e0;
    real _t09B9 = 0.1e1;
    vec4 _t09BA = [_t09B6, _t09B7, _t09B8, _t09B9];
    tensor[4,4] _t09BB = [_t09AB, _t09B0, _t09B5, _t09BA];
    tensor[4,4][4] _t09BC = {_t097C, _t0991, _t09A6, _t09BB};
    real _t09BD = -0.1e1;
    real _t09BE = -0.1e1;
    real _t09BF = 0.57735026919e0;
    real _t09C0 = 0.1e1;
    vec4 _t09C1 = [_t09BD, _t09BE, _t09BF, _t09C0];
    real _t09C2 = 0.1e1;
    real _t09C3 = 0.e0;
    real _t09C4 = 0.57735026919e0;
    real _t09C5 = 0.e0;
    vec4 _t09C6 = [_t09C2, _t09C3, _t09C4, _t09C5];
    real _t09C7 = 0.e0;
    real _t09C8 = 0.1e1;
    real _t09C9 = 0.57735026919e0;
    real _t09CA = 0.e0;
    vec4 _t09CB = [_t09C7, _t09C8, _t09C9, _t09CA];
    real _t09CC = 0.e0;
    real _t09CD = 0.e0;
    real _t09CE = 0.e0;
    real _t09CF = 0.1e1;
    vec4 _t09D0 = [_t09CC, _t09CD, _t09CE, _t09CF];
    tensor[4,4] _t09D1 = [_t09C1, _t09C6, _t09CB, _t09D0];
    real _t09D2 = 0.e0;
    real _t09D3 = 0.e0;
    real _t09D4 = 0.1e1;
    real _t09D5 = 0.e0;
    vec4 _t09D6 = [_t09D2, _t09D3, _t09D4, _t09D5];
    real _t09D7 = 0.1e1;
    real _t09D8 = 0.e0;
    real _t09D9 = 0.e0;
    real _t09DA = 0.e0;
    vec4 _t09DB = [_t09D7, _t09D8, _t09D9, _t09DA];
    real _t09DC = 0.e0;
    real _t09DD = 0.1e1;
    real _t09DE = 0.e0;
    real _t09DF = 0.e0;
    vec4 _t09E0 = [_t09DC, _t09DD, _t09DE, _t09DF];
    real _t09E1 = 0.e0;
    real _t09E2 = 0.e0;
    real _t09E3 = 0.e0;
    real _t09E4 = 0.1e1;
    vec4 _t09E5 = [_t09E1, _t09E2, _t09E3, _t09E4];
    tensor[4,4] _t09E6 = [_t09D6, _t09DB, _t09E0, _t09E5];
    real _t09E7 = 0.1e1;
    real _t09E8 = 0.e0;
    real _t09E9 = 0.e0;
    real _t09EA = 0.e0;
    vec4 _t09EB = [_t09E7, _t09E8, _t09E9, _t09EA];
    real _t09EC = 0.e0;
    real _t09ED = 0.e0;
    real _t09EE = -0.1e1;
    real _t09EF = 0.e0;
    vec4 _t09F0 = [_t09EC, _t09ED, _t09EE, _t09EF];
    real _t09F1 = 0.e0;
    real _t09F2 = 0.1e1;
    real _t09F3 = 0.e0;
    real _t09F4 = 0.e0;
    vec4 _t09F5 = [_t09F1, _t09F2, _t09F3, _t09F4];
    real _t09F6 = 0.e0;
    real _t09F7 = 0.e0;
    real _t09F8 = 0.e0;
    real _t09F9 = 0.1e1;
    vec4 _t09FA = [_t09F6, _t09F7, _t09F8, _t09F9];
    tensor[4,4] _t09FB = [_t09EB, _t09F0, _t09F5, _t09FA];
    real _t09FC = 0.1e1;
    real _t09FD = 0.e0;
    real _t09FE = 0.e0;
    real _t09FF = 0.e0;
    vec4 _t0A00 = [_t09FC, _t09FD, _t09FE, _t09FF];
    real _t0A01 = 0.e0;
    real _t0A02 = 0.1e1;
    real _t0A03 = 0.e0;
    real _t0A04 = 0.e0;
    vec4 _t0A05 = [_t0A01, _t0A02, _t0A03, _t0A04];
    real _t0A06 = 0.e0;
    real _t0A07 = 0.e0;
    real _t0A08 = 0.1e1;
    real _t0A09 = 0.e0;
    vec4 _t0A0A = [_t0A06, _t0A07, _t0A08, _t0A09];
    real _t0A0B = 0.e0;
    real _t0A0C = 0.e0;
    real _t0A0D = 0.e0;
    real _t0A0E = 0.1e1;
    vec4 _t0A0F = [_t0A0B, _t0A0C, _t0A0D, _t0A0E];
    tensor[4,4] _t0A10 = [_t0A00, _t0A05, _t0A0A, _t0A0F];
    tensor[4,4][4] _t0A11 = {_t09D1, _t09E6, _t09FB, _t0A10};
    tensor[4,4][4][4] _t0A12 = {_t0912, _t0967, _t09BC, _t0A11};
    real _t0A13 = time08B0[1];
    int _t0A14 = prim $r2i01B7 (_t0A13);
    tensor[4,4][4] _t0A15 = prim $sub01C0<tensor[4,4][4]; %4> (_t0A12, _t0A14);
    real _t0A16 = time08B0[1];
    int _t0A17 = prim $r2i01B7 (_t0A16);
    int[2] _t0A18 = func nextCell408B4 (_t0A17, cellId08AD, mesh08AC);
    int _t0A19 = 1;
    int _t0A1A = prim $sub01C0<int; %2> (_t0A18, _t0A19);
    tensor[4,4] _t0A1B = prim $sub01C0<tensor[4,4]; %4> (_t0A15, _t0A1A);
    real _t0A1C = time08B0[0];
    vec3 _t0A1D = prim *0036<$[3]> (_t0A1C, dPos08AF);
    vec3 _t0A1E = prim +0017<$[3]> (_t0A1D, refPos08AE);
    real _t0A1F = _t0A1E[0];
    real _t0A20 = time08B0[0];
    vec3 _t0A21 = prim *0036<$[3]> (_t0A20, dPos08AF);
    vec3 _t0A22 = prim +0017<$[3]> (_t0A21, refPos08AE);
    real _t0A23 = _t0A22[1];
    real _t0A24 = time08B0[0];
    vec3 _t0A25 = prim *0036<$[3]> (_t0A24, dPos08AF);
    vec3 _t0A26 = prim +0017<$[3]> (_t0A25, refPos08AE);
    real _t0A27 = _t0A26[2];
    real _t0A28 = 0.1e1;
    vec4 _t0A29 = [_t0A1F, _t0A23, _t0A27, _t0A28];
    vec4 _t0A2A = prim •00CE<$[4,4]; $[4]; $[4]> (_t0A1B, _t0A29);
    real _t0A2B = _t0A2A[0];
    real _t0A2C = 0.1e1;
    real _t0A2D = 0.e0;
    real _t0A2E = 0.e0;
    real _t0A2F = 0.e0;
    vec4 _t0A30 = [_t0A2C, _t0A2D, _t0A2E, _t0A2F];
    real _t0A31 = 0.e0;
    real _t0A32 = 0.1e1;
    real _t0A33 = 0.e0;
    real _t0A34 = 0.e0;
    vec4 _t0A35 = [_t0A31, _t0A32, _t0A33, _t0A34];
    real _t0A36 = 0.e0;
    real _t0A37 = 0.e0;
    real _t0A38 = 0.1e1;
    real _t0A39 = 0.e0;
    vec4 _t0A3A = [_t0A36, _t0A37, _t0A38, _t0A39];
    real _t0A3B = 0.971445146547e-16;
    real _t0A3C = 0.e0;
    real _t0A3D = 0.e0;
    real _t0A3E = 0.1e1;
    vec4 _t0A3F = [_t0A3B, _t0A3C, _t0A3D, _t0A3E];
    tensor[4,4] _t0A40 = [_t0A30, _t0A35, _t0A3A, _t0A3F];
    real _t0A41 = 0.57735026919e0;
    real _t0A42 = 0.57735026919e0;
    real _t0A43 = 0.57735026919e0;
    real _t0A44 = -0.57735026919e0;
    vec4 _t0A45 = [_t0A41, _t0A42, _t0A43, _t0A44];
    real _t0A46 = -0.333333333333e0;
    real _t0A47 = 0.666666666667e0;
    real _t0A48 = -0.333333333333e0;
    real _t0A49 = 0.333333333333e0;
    vec4 _t0A4A = [_t0A46, _t0A47, _t0A48, _t0A49];
    real _t0A4B = -0.333333333333e0;
    real _t0A4C = -0.333333333333e0;
    real _t0A4D = 0.666666666667e0;
    real _t0A4E = 0.333333333333e0;
    vec4 _t0A4F = [_t0A4B, _t0A4C, _t0A4D, _t0A4E];
    real _t0A50 = 0.971445146547e-16;
    real _t0A51 = 0.e0;
    real _t0A52 = 0.e0;
    real _t0A53 = 0.1e1;
    vec4 _t0A54 = [_t0A50, _t0A51, _t0A52, _t0A53];
    tensor[4,4] _t0A55 = [_t0A45, _t0A4A, _t0A4F, _t0A54];
    real _t0A56 = -0.333333333333e0;
    real _t0A57 = 0.666666666667e0;
    real _t0A58 = -0.333333333333e0;
    real _t0A59 = 0.333333333333e0;
    vec4 _t0A5A = [_t0A56, _t0A57, _t0A58, _t0A59];
    real _t0A5B = -0.57735026919e0;
    real _t0A5C = -0.57735026919e0;
    real _t0A5D = -0.57735026919e0;
    real _t0A5E = 0.57735026919e0;
    vec4 _t0A5F = [_t0A5B, _t0A5C, _t0A5D, _t0A5E];
    real _t0A60 = -0.333333333333e0;
    real _t0A61 = -0.333333333333e0;
    real _t0A62 = 0.666666666667e0;
    real _t0A63 = 0.333333333333e0;
    vec4 _t0A64 = [_t0A60, _t0A61, _t0A62, _t0A63];
    real _t0A65 = 0.971445146547e-16;
    real _t0A66 = 0.e0;
    real _t0A67 = 0.e0;
    real _t0A68 = 0.1e1;
    vec4 _t0A69 = [_t0A65, _t0A66, _t0A67, _t0A68];
    tensor[4,4] _t0A6A = [_t0A5A, _t0A5F, _t0A64, _t0A69];
    real _t0A6B = -0.333333333333e0;
    real _t0A6C = 0.666666666667e0;
    real _t0A6D = -0.333333333333e0;
    real _t0A6E = 0.333333333333e0;
    vec4 _t0A6F = [_t0A6B, _t0A6C, _t0A6D, _t0A6E];
    real _t0A70 = -0.333333333333e0;
    real _t0A71 = -0.333333333333e0;
    real _t0A72 = 0.666666666667e0;
    real _t0A73 = 0.333333333333e0;
    vec4 _t0A74 = [_t0A70, _t0A71, _t0A72, _t0A73];
    real _t0A75 = 0.57735026919e0;
    real _t0A76 = 0.57735026919e0;
    real _t0A77 = 0.57735026919e0;
    real _t0A78 = -0.57735026919e0;
    vec4 _t0A79 = [_t0A75, _t0A76, _t0A77, _t0A78];
    real _t0A7A = 0.971445146547e-16;
    real _t0A7B = 0.e0;
    real _t0A7C = 0.e0;
    real _t0A7D = 0.1e1;
    vec4 _t0A7E = [_t0A7A, _t0A7B, _t0A7C, _t0A7D];
    tensor[4,4] _t0A7F = [_t0A6F, _t0A74, _t0A79, _t0A7E];
    tensor[4,4][4] _t0A80 = {_t0A40, _t0A55, _t0A6A, _t0A7F};
    real _t0A81 = 0.57735026919e0;
    real _t0A82 = -0.1e1;
    real _t0A83 = -0.1e1;
    real _t0A84 = 0.1e1;
    vec4 _t0A85 = [_t0A81, _t0A82, _t0A83, _t0A84];
    real _t0A86 = 0.57735026919e0;
    real _t0A87 = 0.1e1;
    real _t0A88 = 0.e0;
    real _t0A89 = 0.e0;
    vec4 _t0A8A = [_t0A86, _t0A87, _t0A88, _t0A89];
    real _t0A8B = 0.57735026919e0;
    real _t0A8C = 0.e0;
    real _t0A8D = 0.1e1;
    real _t0A8E = 0.e0;
    vec4 _t0A8F = [_t0A8B, _t0A8C, _t0A8D, _t0A8E];
    real _t0A90 = 0.e0;
    real _t0A91 = 0.e0;
    real _t0A92 = 0.e0;
    real _t0A93 = 0.1e1;
    vec4 _t0A94 = [_t0A90, _t0A91, _t0A92, _t0A93];
    tensor[4,4] _t0A95 = [_t0A85, _t0A8A, _t0A8F, _t0A94];
    real _t0A96 = 0.1e1;
    real _t0A97 = 0.e0;
    real _t0A98 = 0.e0;
    real _t0A99 = 0.e0;
    vec4 _t0A9A = [_t0A96, _t0A97, _t0A98, _t0A99];
    real _t0A9B = 0.e0;
    real _t0A9C = 0.1e1;
    real _t0A9D = 0.e0;
    real _t0A9E = 0.e0;
    vec4 _t0A9F = [_t0A9B, _t0A9C, _t0A9D, _t0A9E];
    real _t0AA0 = 0.e0;
    real _t0AA1 = 0.e0;
    real _t0AA2 = 0.1e1;
    real _t0AA3 = 0.e0;
    vec4 _t0AA4 = [_t0AA0, _t0AA1, _t0AA2, _t0AA3];
    real _t0AA5 = 0.e0;
    real _t0AA6 = 0.e0;
    real _t0AA7 = 0.e0;
    real _t0AA8 = 0.1e1;
    vec4 _t0AA9 = [_t0AA5, _t0AA6, _t0AA7, _t0AA8];
    tensor[4,4] _t0AAA = [_t0A9A, _t0A9F, _t0AA4, _t0AA9];
    real _t0AAB = 0.e0;
    real _t0AAC = 0.1e1;
    real _t0AAD = 0.e0;
    real _t0AAE = 0.e0;
    vec4 _t0AAF = [_t0AAB, _t0AAC, _t0AAD, _t0AAE];
    real _t0AB0 = -0.1e1;
    real _t0AB1 = 0.e0;
    real _t0AB2 = 0.e0;
    real _t0AB3 = 0.e0;
    vec4 _t0AB4 = [_t0AB0, _t0AB1, _t0AB2, _t0AB3];
    real _t0AB5 = 0.e0;
    real _t0AB6 = 0.e0;
    real _t0AB7 = 0.1e1;
    real _t0AB8 = 0.e0;
    vec4 _t0AB9 = [_t0AB5, _t0AB6, _t0AB7, _t0AB8];
    real _t0ABA = 0.e0;
    real _t0ABB = 0.e0;
    real _t0ABC = 0.e0;
    real _t0ABD = 0.1e1;
    vec4 _t0ABE = [_t0ABA, _t0ABB, _t0ABC, _t0ABD];
    tensor[4,4] _t0ABF = [_t0AAF, _t0AB4, _t0AB9, _t0ABE];
    real _t0AC0 = 0.e0;
    real _t0AC1 = 0.1e1;
    real _t0AC2 = 0.e0;
    real _t0AC3 = 0.e0;
    vec4 _t0AC4 = [_t0AC0, _t0AC1, _t0AC2, _t0AC3];
    real _t0AC5 = 0.e0;
    real _t0AC6 = 0.e0;
    real _t0AC7 = 0.1e1;
    real _t0AC8 = 0.e0;
    vec4 _t0AC9 = [_t0AC5, _t0AC6, _t0AC7, _t0AC8];
    real _t0ACA = 0.1e1;
    real _t0ACB = 0.e0;
    real _t0ACC = 0.e0;
    real _t0ACD = 0.e0;
    vec4 _t0ACE = [_t0ACA, _t0ACB, _t0ACC, _t0ACD];
    real _t0ACF = 0.e0;
    real _t0AD0 = 0.e0;
    real _t0AD1 = 0.e0;
    real _t0AD2 = 0.1e1;
    vec4 _t0AD3 = [_t0ACF, _t0AD0, _t0AD1, _t0AD2];
    tensor[4,4] _t0AD4 = [_t0AC4, _t0AC9, _t0ACE, _t0AD3];
    tensor[4,4][4] _t0AD5 = {_t0A95, _t0AAA, _t0ABF, _t0AD4};
    real _t0AD6 = -0.1e1;
    real _t0AD7 = -0.57735026919e0;
    real _t0AD8 = -0.1e1;
    real _t0AD9 = 0.1e1;
    vec4 _t0ADA = [_t0AD6, _t0AD7, _t0AD8, _t0AD9];
    real _t0ADB = 0.1e1;
    real _t0ADC = -0.57735026919e0;
    real _t0ADD = 0.e0;
    real _t0ADE = 0.e0;
    vec4 _t0ADF = [_t0ADB, _t0ADC, _t0ADD, _t0ADE];
    real _t0AE0 = 0.e0;
    real _t0AE1 = -0.57735026919e0;
    real _t0AE2 = 0.1e1;
    real _t0AE3 = 0.e0;
    vec4 _t0AE4 = [_t0AE0, _t0AE1, _t0AE2, _t0AE3];
    real _t0AE5 = 0.e0;
    real _t0AE6 = 0.e0;
    real _t0AE7 = 0.e0;
    real _t0AE8 = 0.1e1;
    vec4 _t0AE9 = [_t0AE5, _t0AE6, _t0AE7, _t0AE8];
    tensor[4,4] _t0AEA = [_t0ADA, _t0ADF, _t0AE4, _t0AE9];
    real _t0AEB = 0.e0;
    real _t0AEC = -0.1e1;
    real _t0AED = 0.e0;
    real _t0AEE = 0.e0;
    vec4 _t0AEF = [_t0AEB, _t0AEC, _t0AED, _t0AEE];
    real _t0AF0 = 0.1e1;
    real _t0AF1 = 0.e0;
    real _t0AF2 = 0.e0;
    real _t0AF3 = 0.e0;
    vec4 _t0AF4 = [_t0AF0, _t0AF1, _t0AF2, _t0AF3];
    real _t0AF5 = 0.e0;
    real _t0AF6 = 0.e0;
    real _t0AF7 = 0.1e1;
    real _t0AF8 = 0.e0;
    vec4 _t0AF9 = [_t0AF5, _t0AF6, _t0AF7, _t0AF8];
    real _t0AFA = 0.e0;
    real _t0AFB = 0.e0;
    real _t0AFC = 0.e0;
    real _t0AFD = 0.1e1;
    vec4 _t0AFE = [_t0AFA, _t0AFB, _t0AFC, _t0AFD];
    tensor[4,4] _t0AFF = [_t0AEF, _t0AF4, _t0AF9, _t0AFE];
    real _t0B00 = 0.1e1;
    real _t0B01 = 0.e0;
    real _t0B02 = 0.e0;
    real _t0B03 = 0.e0;
    vec4 _t0B04 = [_t0B00, _t0B01, _t0B02, _t0B03];
    real _t0B05 = 0.e0;
    real _t0B06 = 0.1e1;
    real _t0B07 = 0.e0;
    real _t0B08 = 0.e0;
    vec4 _t0B09 = [_t0B05, _t0B06, _t0B07, _t0B08];
    real _t0B0A = 0.e0;
    real _t0B0B = 0.e0;
    real _t0B0C = 0.1e1;
    real _t0B0D = 0.e0;
    vec4 _t0B0E = [_t0B0A, _t0B0B, _t0B0C, _t0B0D];
    real _t0B0F = 0.e0;
    real _t0B10 = 0.e0;
    real _t0B11 = 0.e0;
    real _t0B12 = 0.1e1;
    vec4 _t0B13 = [_t0B0F, _t0B10, _t0B11, _t0B12];
    tensor[4,4] _t0B14 = [_t0B04, _t0B09, _t0B0E, _t0B13];
    real _t0B15 = 0.1e1;
    real _t0B16 = 0.e0;
    real _t0B17 = 0.e0;
    real _t0B18 = 0.e0;
    vec4 _t0B19 = [_t0B15, _t0B16, _t0B17, _t0B18];
    real _t0B1A = 0.e0;
    real _t0B1B = 0.e0;
    real _t0B1C = 0.1e1;
    real _t0B1D = 0.e0;
    vec4 _t0B1E = [_t0B1A, _t0B1B, _t0B1C, _t0B1D];
    real _t0B1F = 0.e0;
    real _t0B20 = -0.1e1;
    real _t0B21 = 0.e0;
    real _t0B22 = 0.e0;
    vec4 _t0B23 = [_t0B1F, _t0B20, _t0B21, _t0B22];
    real _t0B24 = 0.e0;
    real _t0B25 = 0.e0;
    real _t0B26 = 0.e0;
    real _t0B27 = 0.1e1;
    vec4 _t0B28 = [_t0B24, _t0B25, _t0B26, _t0B27];
    tensor[4,4] _t0B29 = [_t0B19, _t0B1E, _t0B23, _t0B28];
    tensor[4,4][4] _t0B2A = {_t0AEA, _t0AFF, _t0B14, _t0B29};
    real _t0B2B = -0.1e1;
    real _t0B2C = -0.1e1;
    real _t0B2D = 0.57735026919e0;
    real _t0B2E = 0.1e1;
    vec4 _t0B2F = [_t0B2B, _t0B2C, _t0B2D, _t0B2E];
    real _t0B30 = 0.1e1;
    real _t0B31 = 0.e0;
    real _t0B32 = 0.57735026919e0;
    real _t0B33 = 0.e0;
    vec4 _t0B34 = [_t0B30, _t0B31, _t0B32, _t0B33];
    real _t0B35 = 0.e0;
    real _t0B36 = 0.1e1;
    real _t0B37 = 0.57735026919e0;
    real _t0B38 = 0.e0;
    vec4 _t0B39 = [_t0B35, _t0B36, _t0B37, _t0B38];
    real _t0B3A = 0.e0;
    real _t0B3B = 0.e0;
    real _t0B3C = 0.e0;
    real _t0B3D = 0.1e1;
    vec4 _t0B3E = [_t0B3A, _t0B3B, _t0B3C, _t0B3D];
    tensor[4,4] _t0B3F = [_t0B2F, _t0B34, _t0B39, _t0B3E];
    real _t0B40 = 0.e0;
    real _t0B41 = 0.e0;
    real _t0B42 = 0.1e1;
    real _t0B43 = 0.e0;
    vec4 _t0B44 = [_t0B40, _t0B41, _t0B42, _t0B43];
    real _t0B45 = 0.1e1;
    real _t0B46 = 0.e0;
    real _t0B47 = 0.e0;
    real _t0B48 = 0.e0;
    vec4 _t0B49 = [_t0B45, _t0B46, _t0B47, _t0B48];
    real _t0B4A = 0.e0;
    real _t0B4B = 0.1e1;
    real _t0B4C = 0.e0;
    real _t0B4D = 0.e0;
    vec4 _t0B4E = [_t0B4A, _t0B4B, _t0B4C, _t0B4D];
    real _t0B4F = 0.e0;
    real _t0B50 = 0.e0;
    real _t0B51 = 0.e0;
    real _t0B52 = 0.1e1;
    vec4 _t0B53 = [_t0B4F, _t0B50, _t0B51, _t0B52];
    tensor[4,4] _t0B54 = [_t0B44, _t0B49, _t0B4E, _t0B53];
    real _t0B55 = 0.1e1;
    real _t0B56 = 0.e0;
    real _t0B57 = 0.e0;
    real _t0B58 = 0.e0;
    vec4 _t0B59 = [_t0B55, _t0B56, _t0B57, _t0B58];
    real _t0B5A = 0.e0;
    real _t0B5B = 0.e0;
    real _t0B5C = -0.1e1;
    real _t0B5D = 0.e0;
    vec4 _t0B5E = [_t0B5A, _t0B5B, _t0B5C, _t0B5D];
    real _t0B5F = 0.e0;
    real _t0B60 = 0.1e1;
    real _t0B61 = 0.e0;
    real _t0B62 = 0.e0;
    vec4 _t0B63 = [_t0B5F, _t0B60, _t0B61, _t0B62];
    real _t0B64 = 0.e0;
    real _t0B65 = 0.e0;
    real _t0B66 = 0.e0;
    real _t0B67 = 0.1e1;
    vec4 _t0B68 = [_t0B64, _t0B65, _t0B66, _t0B67];
    tensor[4,4] _t0B69 = [_t0B59, _t0B5E, _t0B63, _t0B68];
    real _t0B6A = 0.1e1;
    real _t0B6B = 0.e0;
    real _t0B6C = 0.e0;
    real _t0B6D = 0.e0;
    vec4 _t0B6E = [_t0B6A, _t0B6B, _t0B6C, _t0B6D];
    real _t0B6F = 0.e0;
    real _t0B70 = 0.1e1;
    real _t0B71 = 0.e0;
    real _t0B72 = 0.e0;
    vec4 _t0B73 = [_t0B6F, _t0B70, _t0B71, _t0B72];
    real _t0B74 = 0.e0;
    real _t0B75 = 0.e0;
    real _t0B76 = 0.1e1;
    real _t0B77 = 0.e0;
    vec4 _t0B78 = [_t0B74, _t0B75, _t0B76, _t0B77];
    real _t0B79 = 0.e0;
    real _t0B7A = 0.e0;
    real _t0B7B = 0.e0;
    real _t0B7C = 0.1e1;
    vec4 _t0B7D = [_t0B79, _t0B7A, _t0B7B, _t0B7C];
    tensor[4,4] _t0B7E = [_t0B6E, _t0B73, _t0B78, _t0B7D];
    tensor[4,4][4] _t0B7F = {_t0B3F, _t0B54, _t0B69, _t0B7E};
    tensor[4,4][4][4] _t0B80 = {_t0A80, _t0AD5, _t0B2A, _t0B7F};
    real _t0B81 = time08B0[1];
    int _t0B82 = prim $r2i01B7 (_t0B81);
    tensor[4,4][4] _t0B83 = prim $sub01C0<tensor[4,4][4]; %4> (_t0B80, _t0B82);
    real _t0B84 = time08B0[1];
    int _t0B85 = prim $r2i01B7 (_t0B84);
    int[2] _t0B86 = func nextCell408B4 (_t0B85, cellId08AD, mesh08AC);
    int _t0B87 = 1;
    int _t0B88 = prim $sub01C0<int; %2> (_t0B86, _t0B87);
    tensor[4,4] _t0B89 = prim $sub01C0<tensor[4,4]; %4> (_t0B83, _t0B88);
    real _t0B8A = time08B0[0];
    vec3 _t0B8B = prim *0036<$[3]> (_t0B8A, dPos08AF);
    vec3 _t0B8C = prim +0017<$[3]> (_t0B8B, refPos08AE);
    real _t0B8D = _t0B8C[0];
    real _t0B8E = time08B0[0];
    vec3 _t0B8F = prim *0036<$[3]> (_t0B8E, dPos08AF);
    vec3 _t0B90 = prim +0017<$[3]> (_t0B8F, refPos08AE);
    real _t0B91 = _t0B90[1];
    real _t0B92 = time08B0[0];
    vec3 _t0B93 = prim *0036<$[3]> (_t0B92, dPos08AF);
    vec3 _t0B94 = prim +0017<$[3]> (_t0B93, refPos08AE);
    real _t0B95 = _t0B94[2];
    real _t0B96 = 0.1e1;
    vec4 _t0B97 = [_t0B8D, _t0B91, _t0B95, _t0B96];
    vec4 _t0B98 = prim •00CE<$[4,4]; $[4]; $[4]> (_t0B89, _t0B97);
    real _t0B99 = _t0B98[1];
    real _t0B9A = 0.1e1;
    real _t0B9B = 0.e0;
    real _t0B9C = 0.e0;
    real _t0B9D = 0.e0;
    vec4 _t0B9E = [_t0B9A, _t0B9B, _t0B9C, _t0B9D];
    real _t0B9F = 0.e0;
    real _t0BA0 = 0.1e1;
    real _t0BA1 = 0.e0;
    real _t0BA2 = 0.e0;
    vec4 _t0BA3 = [_t0B9F, _t0BA0, _t0BA1, _t0BA2];
    real _t0BA4 = 0.e0;
    real _t0BA5 = 0.e0;
    real _t0BA6 = 0.1e1;
    real _t0BA7 = 0.e0;
    vec4 _t0BA8 = [_t0BA4, _t0BA5, _t0BA6, _t0BA7];
    real _t0BA9 = 0.971445146547e-16;
    real _t0BAA = 0.e0;
    real _t0BAB = 0.e0;
    real _t0BAC = 0.1e1;
    vec4 _t0BAD = [_t0BA9, _t0BAA, _t0BAB, _t0BAC];
    tensor[4,4] _t0BAE = [_t0B9E, _t0BA3, _t0BA8, _t0BAD];
    real _t0BAF = 0.57735026919e0;
    real _t0BB0 = 0.57735026919e0;
    real _t0BB1 = 0.57735026919e0;
    real _t0BB2 = -0.57735026919e0;
    vec4 _t0BB3 = [_t0BAF, _t0BB0, _t0BB1, _t0BB2];
    real _t0BB4 = -0.333333333333e0;
    real _t0BB5 = 0.666666666667e0;
    real _t0BB6 = -0.333333333333e0;
    real _t0BB7 = 0.333333333333e0;
    vec4 _t0BB8 = [_t0BB4, _t0BB5, _t0BB6, _t0BB7];
    real _t0BB9 = -0.333333333333e0;
    real _t0BBA = -0.333333333333e0;
    real _t0BBB = 0.666666666667e0;
    real _t0BBC = 0.333333333333e0;
    vec4 _t0BBD = [_t0BB9, _t0BBA, _t0BBB, _t0BBC];
    real _t0BBE = 0.971445146547e-16;
    real _t0BBF = 0.e0;
    real _t0BC0 = 0.e0;
    real _t0BC1 = 0.1e1;
    vec4 _t0BC2 = [_t0BBE, _t0BBF, _t0BC0, _t0BC1];
    tensor[4,4] _t0BC3 = [_t0BB3, _t0BB8, _t0BBD, _t0BC2];
    real _t0BC4 = -0.333333333333e0;
    real _t0BC5 = 0.666666666667e0;
    real _t0BC6 = -0.333333333333e0;
    real _t0BC7 = 0.333333333333e0;
    vec4 _t0BC8 = [_t0BC4, _t0BC5, _t0BC6, _t0BC7];
    real _t0BC9 = -0.57735026919e0;
    real _t0BCA = -0.57735026919e0;
    real _t0BCB = -0.57735026919e0;
    real _t0BCC = 0.57735026919e0;
    vec4 _t0BCD = [_t0BC9, _t0BCA, _t0BCB, _t0BCC];
    real _t0BCE = -0.333333333333e0;
    real _t0BCF = -0.333333333333e0;
    real _t0BD0 = 0.666666666667e0;
    real _t0BD1 = 0.333333333333e0;
    vec4 _t0BD2 = [_t0BCE, _t0BCF, _t0BD0, _t0BD1];
    real _t0BD3 = 0.971445146547e-16;
    real _t0BD4 = 0.e0;
    real _t0BD5 = 0.e0;
    real _t0BD6 = 0.1e1;
    vec4 _t0BD7 = [_t0BD3, _t0BD4, _t0BD5, _t0BD6];
    tensor[4,4] _t0BD8 = [_t0BC8, _t0BCD, _t0BD2, _t0BD7];
    real _t0BD9 = -0.333333333333e0;
    real _t0BDA = 0.666666666667e0;
    real _t0BDB = -0.333333333333e0;
    real _t0BDC = 0.333333333333e0;
    vec4 _t0BDD = [_t0BD9, _t0BDA, _t0BDB, _t0BDC];
    real _t0BDE = -0.333333333333e0;
    real _t0BDF = -0.333333333333e0;
    real _t0BE0 = 0.666666666667e0;
    real _t0BE1 = 0.333333333333e0;
    vec4 _t0BE2 = [_t0BDE, _t0BDF, _t0BE0, _t0BE1];
    real _t0BE3 = 0.57735026919e0;
    real _t0BE4 = 0.57735026919e0;
    real _t0BE5 = 0.57735026919e0;
    real _t0BE6 = -0.57735026919e0;
    vec4 _t0BE7 = [_t0BE3, _t0BE4, _t0BE5, _t0BE6];
    real _t0BE8 = 0.971445146547e-16;
    real _t0BE9 = 0.e0;
    real _t0BEA = 0.e0;
    real _t0BEB = 0.1e1;
    vec4 _t0BEC = [_t0BE8, _t0BE9, _t0BEA, _t0BEB];
    tensor[4,4] _t0BED = [_t0BDD, _t0BE2, _t0BE7, _t0BEC];
    tensor[4,4][4] _t0BEE = {_t0BAE, _t0BC3, _t0BD8, _t0BED};
    real _t0BEF = 0.57735026919e0;
    real _t0BF0 = -0.1e1;
    real _t0BF1 = -0.1e1;
    real _t0BF2 = 0.1e1;
    vec4 _t0BF3 = [_t0BEF, _t0BF0, _t0BF1, _t0BF2];
    real _t0BF4 = 0.57735026919e0;
    real _t0BF5 = 0.1e1;
    real _t0BF6 = 0.e0;
    real _t0BF7 = 0.e0;
    vec4 _t0BF8 = [_t0BF4, _t0BF5, _t0BF6, _t0BF7];
    real _t0BF9 = 0.57735026919e0;
    real _t0BFA = 0.e0;
    real _t0BFB = 0.1e1;
    real _t0BFC = 0.e0;
    vec4 _t0BFD = [_t0BF9, _t0BFA, _t0BFB, _t0BFC];
    real _t0BFE = 0.e0;
    real _t0BFF = 0.e0;
    real _t0C00 = 0.e0;
    real _t0C01 = 0.1e1;
    vec4 _t0C02 = [_t0BFE, _t0BFF, _t0C00, _t0C01];
    tensor[4,4] _t0C03 = [_t0BF3, _t0BF8, _t0BFD, _t0C02];
    real _t0C04 = 0.1e1;
    real _t0C05 = 0.e0;
    real _t0C06 = 0.e0;
    real _t0C07 = 0.e0;
    vec4 _t0C08 = [_t0C04, _t0C05, _t0C06, _t0C07];
    real _t0C09 = 0.e0;
    real _t0C0A = 0.1e1;
    real _t0C0B = 0.e0;
    real _t0C0C = 0.e0;
    vec4 _t0C0D = [_t0C09, _t0C0A, _t0C0B, _t0C0C];
    real _t0C0E = 0.e0;
    real _t0C0F = 0.e0;
    real _t0C10 = 0.1e1;
    real _t0C11 = 0.e0;
    vec4 _t0C12 = [_t0C0E, _t0C0F, _t0C10, _t0C11];
    real _t0C13 = 0.e0;
    real _t0C14 = 0.e0;
    real _t0C15 = 0.e0;
    real _t0C16 = 0.1e1;
    vec4 _t0C17 = [_t0C13, _t0C14, _t0C15, _t0C16];
    tensor[4,4] _t0C18 = [_t0C08, _t0C0D, _t0C12, _t0C17];
    real _t0C19 = 0.e0;
    real _t0C1A = 0.1e1;
    real _t0C1B = 0.e0;
    real _t0C1C = 0.e0;
    vec4 _t0C1D = [_t0C19, _t0C1A, _t0C1B, _t0C1C];
    real _t0C1E = -0.1e1;
    real _t0C1F = 0.e0;
    real _t0C20 = 0.e0;
    real _t0C21 = 0.e0;
    vec4 _t0C22 = [_t0C1E, _t0C1F, _t0C20, _t0C21];
    real _t0C23 = 0.e0;
    real _t0C24 = 0.e0;
    real _t0C25 = 0.1e1;
    real _t0C26 = 0.e0;
    vec4 _t0C27 = [_t0C23, _t0C24, _t0C25, _t0C26];
    real _t0C28 = 0.e0;
    real _t0C29 = 0.e0;
    real _t0C2A = 0.e0;
    real _t0C2B = 0.1e1;
    vec4 _t0C2C = [_t0C28, _t0C29, _t0C2A, _t0C2B];
    tensor[4,4] _t0C2D = [_t0C1D, _t0C22, _t0C27, _t0C2C];
    real _t0C2E = 0.e0;
    real _t0C2F = 0.1e1;
    real _t0C30 = 0.e0;
    real _t0C31 = 0.e0;
    vec4 _t0C32 = [_t0C2E, _t0C2F, _t0C30, _t0C31];
    real _t0C33 = 0.e0;
    real _t0C34 = 0.e0;
    real _t0C35 = 0.1e1;
    real _t0C36 = 0.e0;
    vec4 _t0C37 = [_t0C33, _t0C34, _t0C35, _t0C36];
    real _t0C38 = 0.1e1;
    real _t0C39 = 0.e0;
    real _t0C3A = 0.e0;
    real _t0C3B = 0.e0;
    vec4 _t0C3C = [_t0C38, _t0C39, _t0C3A, _t0C3B];
    real _t0C3D = 0.e0;
    real _t0C3E = 0.e0;
    real _t0C3F = 0.e0;
    real _t0C40 = 0.1e1;
    vec4 _t0C41 = [_t0C3D, _t0C3E, _t0C3F, _t0C40];
    tensor[4,4] _t0C42 = [_t0C32, _t0C37, _t0C3C, _t0C41];
    tensor[4,4][4] _t0C43 = {_t0C03, _t0C18, _t0C2D, _t0C42};
    real _t0C44 = -0.1e1;
    real _t0C45 = -0.57735026919e0;
    real _t0C46 = -0.1e1;
    real _t0C47 = 0.1e1;
    vec4 _t0C48 = [_t0C44, _t0C45, _t0C46, _t0C47];
    real _t0C49 = 0.1e1;
    real _t0C4A = -0.57735026919e0;
    real _t0C4B = 0.e0;
    real _t0C4C = 0.e0;
    vec4 _t0C4D = [_t0C49, _t0C4A, _t0C4B, _t0C4C];
    real _t0C4E = 0.e0;
    real _t0C4F = -0.57735026919e0;
    real _t0C50 = 0.1e1;
    real _t0C51 = 0.e0;
    vec4 _t0C52 = [_t0C4E, _t0C4F, _t0C50, _t0C51];
    real _t0C53 = 0.e0;
    real _t0C54 = 0.e0;
    real _t0C55 = 0.e0;
    real _t0C56 = 0.1e1;
    vec4 _t0C57 = [_t0C53, _t0C54, _t0C55, _t0C56];
    tensor[4,4] _t0C58 = [_t0C48, _t0C4D, _t0C52, _t0C57];
    real _t0C59 = 0.e0;
    real _t0C5A = -0.1e1;
    real _t0C5B = 0.e0;
    real _t0C5C = 0.e0;
    vec4 _t0C5D = [_t0C59, _t0C5A, _t0C5B, _t0C5C];
    real _t0C5E = 0.1e1;
    real _t0C5F = 0.e0;
    real _t0C60 = 0.e0;
    real _t0C61 = 0.e0;
    vec4 _t0C62 = [_t0C5E, _t0C5F, _t0C60, _t0C61];
    real _t0C63 = 0.e0;
    real _t0C64 = 0.e0;
    real _t0C65 = 0.1e1;
    real _t0C66 = 0.e0;
    vec4 _t0C67 = [_t0C63, _t0C64, _t0C65, _t0C66];
    real _t0C68 = 0.e0;
    real _t0C69 = 0.e0;
    real _t0C6A = 0.e0;
    real _t0C6B = 0.1e1;
    vec4 _t0C6C = [_t0C68, _t0C69, _t0C6A, _t0C6B];
    tensor[4,4] _t0C6D = [_t0C5D, _t0C62, _t0C67, _t0C6C];
    real _t0C6E = 0.1e1;
    real _t0C6F = 0.e0;
    real _t0C70 = 0.e0;
    real _t0C71 = 0.e0;
    vec4 _t0C72 = [_t0C6E, _t0C6F, _t0C70, _t0C71];
    real _t0C73 = 0.e0;
    real _t0C74 = 0.1e1;
    real _t0C75 = 0.e0;
    real _t0C76 = 0.e0;
    vec4 _t0C77 = [_t0C73, _t0C74, _t0C75, _t0C76];
    real _t0C78 = 0.e0;
    real _t0C79 = 0.e0;
    real _t0C7A = 0.1e1;
    real _t0C7B = 0.e0;
    vec4 _t0C7C = [_t0C78, _t0C79, _t0C7A, _t0C7B];
    real _t0C7D = 0.e0;
    real _t0C7E = 0.e0;
    real _t0C7F = 0.e0;
    real _t0C80 = 0.1e1;
    vec4 _t0C81 = [_t0C7D, _t0C7E, _t0C7F, _t0C80];
    tensor[4,4] _t0C82 = [_t0C72, _t0C77, _t0C7C, _t0C81];
    real _t0C83 = 0.1e1;
    real _t0C84 = 0.e0;
    real _t0C85 = 0.e0;
    real _t0C86 = 0.e0;
    vec4 _t0C87 = [_t0C83, _t0C84, _t0C85, _t0C86];
    real _t0C88 = 0.e0;
    real _t0C89 = 0.e0;
    real _t0C8A = 0.1e1;
    real _t0C8B = 0.e0;
    vec4 _t0C8C = [_t0C88, _t0C89, _t0C8A, _t0C8B];
    real _t0C8D = 0.e0;
    real _t0C8E = -0.1e1;
    real _t0C8F = 0.e0;
    real _t0C90 = 0.e0;
    vec4 _t0C91 = [_t0C8D, _t0C8E, _t0C8F, _t0C90];
    real _t0C92 = 0.e0;
    real _t0C93 = 0.e0;
    real _t0C94 = 0.e0;
    real _t0C95 = 0.1e1;
    vec4 _t0C96 = [_t0C92, _t0C93, _t0C94, _t0C95];
    tensor[4,4] _t0C97 = [_t0C87, _t0C8C, _t0C91, _t0C96];
    tensor[4,4][4] _t0C98 = {_t0C58, _t0C6D, _t0C82, _t0C97};
    real _t0C99 = -0.1e1;
    real _t0C9A = -0.1e1;
    real _t0C9B = 0.57735026919e0;
    real _t0C9C = 0.1e1;
    vec4 _t0C9D = [_t0C99, _t0C9A, _t0C9B, _t0C9C];
    real _t0C9E = 0.1e1;
    real _t0C9F = 0.e0;
    real _t0CA0 = 0.57735026919e0;
    real _t0CA1 = 0.e0;
    vec4 _t0CA2 = [_t0C9E, _t0C9F, _t0CA0, _t0CA1];
    real _t0CA3 = 0.e0;
    real _t0CA4 = 0.1e1;
    real _t0CA5 = 0.57735026919e0;
    real _t0CA6 = 0.e0;
    vec4 _t0CA7 = [_t0CA3, _t0CA4, _t0CA5, _t0CA6];
    real _t0CA8 = 0.e0;
    real _t0CA9 = 0.e0;
    real _t0CAA = 0.e0;
    real _t0CAB = 0.1e1;
    vec4 _t0CAC = [_t0CA8, _t0CA9, _t0CAA, _t0CAB];
    tensor[4,4] _t0CAD = [_t0C9D, _t0CA2, _t0CA7, _t0CAC];
    real _t0CAE = 0.e0;
    real _t0CAF = 0.e0;
    real _t0CB0 = 0.1e1;
    real _t0CB1 = 0.e0;
    vec4 _t0CB2 = [_t0CAE, _t0CAF, _t0CB0, _t0CB1];
    real _t0CB3 = 0.1e1;
    real _t0CB4 = 0.e0;
    real _t0CB5 = 0.e0;
    real _t0CB6 = 0.e0;
    vec4 _t0CB7 = [_t0CB3, _t0CB4, _t0CB5, _t0CB6];
    real _t0CB8 = 0.e0;
    real _t0CB9 = 0.1e1;
    real _t0CBA = 0.e0;
    real _t0CBB = 0.e0;
    vec4 _t0CBC = [_t0CB8, _t0CB9, _t0CBA, _t0CBB];
    real _t0CBD = 0.e0;
    real _t0CBE = 0.e0;
    real _t0CBF = 0.e0;
    real _t0CC0 = 0.1e1;
    vec4 _t0CC1 = [_t0CBD, _t0CBE, _t0CBF, _t0CC0];
    tensor[4,4] _t0CC2 = [_t0CB2, _t0CB7, _t0CBC, _t0CC1];
    real _t0CC3 = 0.1e1;
    real _t0CC4 = 0.e0;
    real _t0CC5 = 0.e0;
    real _t0CC6 = 0.e0;
    vec4 _t0CC7 = [_t0CC3, _t0CC4, _t0CC5, _t0CC6];
    real _t0CC8 = 0.e0;
    real _t0CC9 = 0.e0;
    real _t0CCA = -0.1e1;
    real _t0CCB = 0.e0;
    vec4 _t0CCC = [_t0CC8, _t0CC9, _t0CCA, _t0CCB];
    real _t0CCD = 0.e0;
    real _t0CCE = 0.1e1;
    real _t0CCF = 0.e0;
    real _t0CD0 = 0.e0;
    vec4 _t0CD1 = [_t0CCD, _t0CCE, _t0CCF, _t0CD0];
    real _t0CD2 = 0.e0;
    real _t0CD3 = 0.e0;
    real _t0CD4 = 0.e0;
    real _t0CD5 = 0.1e1;
    vec4 _t0CD6 = [_t0CD2, _t0CD3, _t0CD4, _t0CD5];
    tensor[4,4] _t0CD7 = [_t0CC7, _t0CCC, _t0CD1, _t0CD6];
    real _t0CD8 = 0.1e1;
    real _t0CD9 = 0.e0;
    real _t0CDA = 0.e0;
    real _t0CDB = 0.e0;
    vec4 _t0CDC = [_t0CD8, _t0CD9, _t0CDA, _t0CDB];
    real _t0CDD = 0.e0;
    real _t0CDE = 0.1e1;
    real _t0CDF = 0.e0;
    real _t0CE0 = 0.e0;
    vec4 _t0CE1 = [_t0CDD, _t0CDE, _t0CDF, _t0CE0];
    real _t0CE2 = 0.e0;
    real _t0CE3 = 0.e0;
    real _t0CE4 = 0.1e1;
    real _t0CE5 = 0.e0;
    vec4 _t0CE6 = [_t0CE2, _t0CE3, _t0CE4, _t0CE5];
    real _t0CE7 = 0.e0;
    real _t0CE8 = 0.e0;
    real _t0CE9 = 0.e0;
    real _t0CEA = 0.1e1;
    vec4 _t0CEB = [_t0CE7, _t0CE8, _t0CE9, _t0CEA];
    tensor[4,4] _t0CEC = [_t0CDC, _t0CE1, _t0CE6, _t0CEB];
    tensor[4,4][4] _t0CED = {_t0CAD, _t0CC2, _t0CD7, _t0CEC};
    tensor[4,4][4][4] _t0CEE = {_t0BEE, _t0C43, _t0C98, _t0CED};
    real _t0CEF = time08B0[1];
    int _t0CF0 = prim $r2i01B7 (_t0CEF);
    tensor[4,4][4] _t0CF1 = prim $sub01C0<tensor[4,4][4]; %4> (_t0CEE, _t0CF0);
    real _t0CF2 = time08B0[1];
    int _t0CF3 = prim $r2i01B7 (_t0CF2);
    int[2] _t0CF4 = func nextCell408B4 (_t0CF3, cellId08AD, mesh08AC);
    int _t0CF5 = 1;
    int _t0CF6 = prim $sub01C0<int; %2> (_t0CF4, _t0CF5);
    tensor[4,4] _t0CF7 = prim $sub01C0<tensor[4,4]; %4> (_t0CF1, _t0CF6);
    real _t0CF8 = time08B0[0];
    vec3 _t0CF9 = prim *0036<$[3]> (_t0CF8, dPos08AF);
    vec3 _t0CFA = prim +0017<$[3]> (_t0CF9, refPos08AE);
    real _t0CFB = _t0CFA[0];
    real _t0CFC = time08B0[0];
    vec3 _t0CFD = prim *0036<$[3]> (_t0CFC, dPos08AF);
    vec3 _t0CFE = prim +0017<$[3]> (_t0CFD, refPos08AE);
    real _t0CFF = _t0CFE[1];
    real _t0D00 = time08B0[0];
    vec3 _t0D01 = prim *0036<$[3]> (_t0D00, dPos08AF);
    vec3 _t0D02 = prim +0017<$[3]> (_t0D01, refPos08AE);
    real _t0D03 = _t0D02[2];
    real _t0D04 = 0.1e1;
    vec4 _t0D05 = [_t0CFB, _t0CFF, _t0D03, _t0D04];
    vec4 _t0D06 = prim •00CE<$[4,4]; $[4]; $[4]> (_t0CF7, _t0D05);
    real _t0D07 = _t0D06[2];
    vec3 _t0D08 = [_t0A2B, _t0B99, _t0D07];
    real _t0D09 = time08B0[1];
    int _t0D0A = prim $r2i01B7 (_t0D09);
    int[2] _t0D0B = func nextCell408B4 (_t0D0A, cellId08AD, mesh08AC);
    int _t0D0C = 1;
    int _t0D0D = prim $sub01C0<int; %2> (_t0D0B, _t0D0C);
    Femdata: MeshPos _t0D0E = extractFemItemN((mesh08AC, _t08BD, _t0D08, _t0D0D),RefBuild(Mesh),);
    return _t0D0E;
  } else {
    real _t0D0F = time08B0[0];
    vec3 _t0D10 = prim *0036<$[3]> (_t0D0F, dPos08AF);
    vec3 _t0D11 = prim +0017<$[3]> (_t0D10, refPos08AE);
    Femdata: MeshPos _t0D12 = extractFemItemN((mesh08AC, _t0D11),InvalidBuildBoundary(MeshPos),);
    return _t0D12;
  }
}
function int[2]#6 nextCell408B4 (int faceIdx0D13, int cell0D14, Femdata: Mesh mesh0D15)
{
  int _t0D16 = -1;
  bool _t0D17 = prim ==0082 (faceIdx0D13, _t0D16);
  if _t0D17 {
    int _t0D18 = -1;
    int _t0D19 = -1;
    int[2] _t0D1A = {_t0D18, _t0D19};
    return _t0D1A;
  } else {
    int _t0D1B = 8;
    int _t0D1C = prim *0033 (cell0D14, _t0D1B);
    int _t0D1D = 2;
    int _t0D1E = prim *0033 (faceIdx0D13, _t0D1D);
    int _t0D1F = prim +0015 (_t0D1C, _t0D1E);
    int[2] _t0D20 = extractFemItemN((mesh0D15, _t0D1F),CellFaceCell(Mesh),);
    return _t0D20;
  }
}
function vec2#0 _enter0D21 (vec3 refPos0D22, vec3 dPos0D23)
{
  real time0D24 = +inf;
  int face0D25 = -1;
  real faceTime0D26 = -inf;
  real _t0D27 = 0.57735026919e0;
  real _t0D28 = 0.57735026919e0;
  real _t0D29 = 0.57735026919e0;
  real _t0D2A = 0.57735026919e0;
  vec3 _t0D2B = [_t0D28, _t0D29, _t0D2A];
  real _t0D2C = prim •00CE<$[3]; $[3]; $[]> (_t0D2B, refPos0D22);
  real _t0D2D = prim -0026<$[]> (_t0D27, _t0D2C);
  real _t0D2E = 0.57735026919e0;
  real _t0D2F = 0.57735026919e0;
  real _t0D30 = 0.57735026919e0;
  vec3 _t0D31 = [_t0D2E, _t0D2F, _t0D30];
  real _t0D32 = prim •00CE<$[3]; $[3]; $[]> (_t0D31, dPos0D23);
  real _t0D33 = prim /0055 (_t0D2D, _t0D32);
  real _t0D34 = -0.1e-7;
  bool _t0D35 = prim >=007E (_t0D33, _t0D34);
  real _t0D36 = 0.57735026919e0;
  real _t0D37 = 0.57735026919e0;
  real _t0D38 = 0.57735026919e0;
  real _t0D39 = 0.57735026919e0;
  vec3 _t0D3A = [_t0D37, _t0D38, _t0D39];
  real _t0D3B = prim •00CE<$[3]; $[3]; $[]> (_t0D3A, refPos0D22);
  real _t0D3C = prim -0026<$[]> (_t0D36, _t0D3B);
  real _t0D3D = 0.57735026919e0;
  real _t0D3E = 0.57735026919e0;
  real _t0D3F = 0.57735026919e0;
  vec3 _t0D40 = [_t0D3D, _t0D3E, _t0D3F];
  real _t0D41 = prim •00CE<$[3]; $[3]; $[]> (_t0D40, dPos0D23);
  real _t0D42 = prim /0055 (_t0D3C, _t0D41);
  bool _t0D43 = prim >0080 (time0D24, _t0D42);
  real _t0D44 = 0.57735026919e0;
  real _t0D45 = 0.57735026919e0;
  real _t0D46 = 0.57735026919e0;
  vec3 _t0D47 = [_t0D44, _t0D45, _t0D46];
  real _t0D48 = prim •00CE<$[3]; $[3]; $[]> (_t0D47, dPos0D23);
  real _t0D49 = prim |()|00B5<$[]> (_t0D48);
  real _t0D4A = 0.1e-7;
  bool _t0D4B = prim >=007E (_t0D49, _t0D4A);
  bool _t0D4C = prim $and01C4 (_t0D43, _t0D4B);
  bool _t0D4D = prim $and01C4 (_t0D35, _t0D4C);
  if _t0D4D {
    real _t0D4E = 0.1e1;
    real _t0D4F = 0.1e-7;
    real _t0D50 = prim +0017<$[]> (_t0D4E, _t0D4F);
    real _t0D51 = 0.1e1;
    real _t0D52 = 0.1e1;
    real _t0D53 = 0.1e1;
    vec3 _t0D54 = [_t0D51, _t0D52, _t0D53];
    real _t0D55 = 0.57735026919e0;
    real _t0D56 = 0.57735026919e0;
    real _t0D57 = 0.57735026919e0;
    real _t0D58 = 0.57735026919e0;
    vec3 _t0D59 = [_t0D56, _t0D57, _t0D58];
    real _t0D5A = prim •00CE<$[3]; $[3]; $[]> (_t0D59, refPos0D22);
    real _t0D5B = prim -0026<$[]> (_t0D55, _t0D5A);
    real _t0D5C = 0.57735026919e0;
    real _t0D5D = 0.57735026919e0;
    real _t0D5E = 0.57735026919e0;
    vec3 _t0D5F = [_t0D5C, _t0D5D, _t0D5E];
    real _t0D60 = prim •00CE<$[3]; $[3]; $[]> (_t0D5F, dPos0D23);
    real _t0D61 = prim /0055 (_t0D5B, _t0D60);
    vec3 _t0D62 = prim *0038<$[3]> (dPos0D23, _t0D61);
    vec3 _t0D63 = prim +0017<$[3]> (refPos0D22, _t0D62);
    real _t0D64 = prim •00CE<$[3]; $[3]; $[]> (_t0D54, _t0D63);
    bool _t0D65 = prim >0080 (_t0D50, _t0D64);
    real _t0D66 = 0.1e-7;
    real _t0D67 = 0.1e-7;
    real _t0D68 = 0.1e-7;
    vec3 _t0D69 = [_t0D66, _t0D67, _t0D68];
    real _t0D6A = 0.57735026919e0;
    real _t0D6B = 0.57735026919e0;
    real _t0D6C = 0.57735026919e0;
    real _t0D6D = 0.57735026919e0;
    vec3 _t0D6E = [_t0D6B, _t0D6C, _t0D6D];
    real _t0D6F = prim •00CE<$[3]; $[3]; $[]> (_t0D6E, refPos0D22);
    real _t0D70 = prim -0026<$[]> (_t0D6A, _t0D6F);
    real _t0D71 = 0.57735026919e0;
    real _t0D72 = 0.57735026919e0;
    real _t0D73 = 0.57735026919e0;
    vec3 _t0D74 = [_t0D71, _t0D72, _t0D73];
    real _t0D75 = prim •00CE<$[3]; $[3]; $[]> (_t0D74, dPos0D23);
    real _t0D76 = prim /0055 (_t0D70, _t0D75);
    vec3 _t0D77 = prim *0038<$[3]> (dPos0D23, _t0D76);
    vec3 _t0D78 = prim +0017<$[3]> (refPos0D22, _t0D77);
    vec3 _t0D79 = prim +0017<$[3]> (_t0D69, _t0D78);
    real _t0D7A = _t0D79[0];
    real _t0D7B = -0.e0;
    bool _t0D7C = prim >0080 (_t0D7A, _t0D7B);
    real _t0D7D = 0.1e-7;
    real _t0D7E = 0.1e-7;
    real _t0D7F = 0.1e-7;
    vec3 _t0D80 = [_t0D7D, _t0D7E, _t0D7F];
    real _t0D81 = 0.57735026919e0;
    real _t0D82 = 0.57735026919e0;
    real _t0D83 = 0.57735026919e0;
    real _t0D84 = 0.57735026919e0;
    vec3 _t0D85 = [_t0D82, _t0D83, _t0D84];
    real _t0D86 = prim •00CE<$[3]; $[3]; $[]> (_t0D85, refPos0D22);
    real _t0D87 = prim -0026<$[]> (_t0D81, _t0D86);
    real _t0D88 = 0.57735026919e0;
    real _t0D89 = 0.57735026919e0;
    real _t0D8A = 0.57735026919e0;
    vec3 _t0D8B = [_t0D88, _t0D89, _t0D8A];
    real _t0D8C = prim •00CE<$[3]; $[3]; $[]> (_t0D8B, dPos0D23);
    real _t0D8D = prim /0055 (_t0D87, _t0D8C);
    vec3 _t0D8E = prim *0038<$[3]> (dPos0D23, _t0D8D);
    vec3 _t0D8F = prim +0017<$[3]> (refPos0D22, _t0D8E);
    vec3 _t0D90 = prim +0017<$[3]> (_t0D80, _t0D8F);
    real _t0D91 = _t0D90[1];
    real _t0D92 = -0.e0;
    bool _t0D93 = prim >0080 (_t0D91, _t0D92);
    real _t0D94 = 0.1e-7;
    real _t0D95 = 0.1e-7;
    real _t0D96 = 0.1e-7;
    vec3 _t0D97 = [_t0D94, _t0D95, _t0D96];
    real _t0D98 = 0.57735026919e0;
    real _t0D99 = 0.57735026919e0;
    real _t0D9A = 0.57735026919e0;
    real _t0D9B = 0.57735026919e0;
    vec3 _t0D9C = [_t0D99, _t0D9A, _t0D9B];
    real _t0D9D = prim •00CE<$[3]; $[3]; $[]> (_t0D9C, refPos0D22);
    real _t0D9E = prim -0026<$[]> (_t0D98, _t0D9D);
    real _t0D9F = 0.57735026919e0;
    real _t0DA0 = 0.57735026919e0;
    real _t0DA1 = 0.57735026919e0;
    vec3 _t0DA2 = [_t0D9F, _t0DA0, _t0DA1];
    real _t0DA3 = prim •00CE<$[3]; $[3]; $[]> (_t0DA2, dPos0D23);
    real _t0DA4 = prim /0055 (_t0D9E, _t0DA3);
    vec3 _t0DA5 = prim *0038<$[3]> (dPos0D23, _t0DA4);
    vec3 _t0DA6 = prim +0017<$[3]> (refPos0D22, _t0DA5);
    vec3 _t0DA7 = prim +0017<$[3]> (_t0D97, _t0DA6);
    real _t0DA8 = _t0DA7[2];
    real _t0DA9 = -0.e0;
    bool _t0DAA = prim >0080 (_t0DA8, _t0DA9);
    bool _t0DAB = prim $and01C4 (_t0D93, _t0DAA);
    bool _t0DAC = prim $and01C4 (_t0D7C, _t0DAB);
    bool _t0DAD = prim $and01C4 (_t0D65, _t0DAC);
    if _t0DAD {
      real _t0DAE = 0.57735026919e0;
      real _t0DAF = 0.57735026919e0;
      real _t0DB0 = 0.57735026919e0;
      real _t0DB1 = 0.57735026919e0;
      vec3 _t0DB2 = [_t0DAF, _t0DB0, _t0DB1];
      real _t0DB3 = prim •00CE<$[3]; $[3]; $[]> (_t0DB2, refPos0D22);
      real _t0DB4 = prim -0026<$[]> (_t0DAE, _t0DB3);
      real _t0DB5 = 0.57735026919e0;
      real _t0DB6 = 0.57735026919e0;
      real _t0DB7 = 0.57735026919e0;
      vec3 _t0DB8 = [_t0DB5, _t0DB6, _t0DB7];
      real _t0DB9 = prim •00CE<$[3]; $[3]; $[]> (_t0DB8, dPos0D23);
      time0D24 = prim /0055 (_t0DB4, _t0DB9);
      face0D25 = 0;
    }
  }
  real _t0DBA = 0.e0;
  real _t0DBB = -0.1e1;
  real _t0DBC = 0.e0;
  real _t0DBD = 0.e0;
  vec3 _t0DBE = [_t0DBB, _t0DBC, _t0DBD];
  real _t0DBF = prim •00CE<$[3]; $[3]; $[]> (_t0DBE, refPos0D22);
  real _t0DC0 = prim -0026<$[]> (_t0DBA, _t0DBF);
  real _t0DC1 = -0.1e1;
  real _t0DC2 = 0.e0;
  real _t0DC3 = 0.e0;
  vec3 _t0DC4 = [_t0DC1, _t0DC2, _t0DC3];
  real _t0DC5 = prim •00CE<$[3]; $[3]; $[]> (_t0DC4, dPos0D23);
  real _t0DC6 = prim /0055 (_t0DC0, _t0DC5);
  real _t0DC7 = -0.1e-7;
  bool _t0DC8 = prim >=007E (_t0DC6, _t0DC7);
  real _t0DC9 = 0.e0;
  real _t0DCA = -0.1e1;
  real _t0DCB = 0.e0;
  real _t0DCC = 0.e0;
  vec3 _t0DCD = [_t0DCA, _t0DCB, _t0DCC];
  real _t0DCE = prim •00CE<$[3]; $[3]; $[]> (_t0DCD, refPos0D22);
  real _t0DCF = prim -0026<$[]> (_t0DC9, _t0DCE);
  real _t0DD0 = -0.1e1;
  real _t0DD1 = 0.e0;
  real _t0DD2 = 0.e0;
  vec3 _t0DD3 = [_t0DD0, _t0DD1, _t0DD2];
  real _t0DD4 = prim •00CE<$[3]; $[3]; $[]> (_t0DD3, dPos0D23);
  real _t0DD5 = prim /0055 (_t0DCF, _t0DD4);
  bool _t0DD6 = prim >0080 (time0D24, _t0DD5);
  real _t0DD7 = -0.1e1;
  real _t0DD8 = 0.e0;
  real _t0DD9 = 0.e0;
  vec3 _t0DDA = [_t0DD7, _t0DD8, _t0DD9];
  real _t0DDB = prim •00CE<$[3]; $[3]; $[]> (_t0DDA, dPos0D23);
  real _t0DDC = prim |()|00B5<$[]> (_t0DDB);
  real _t0DDD = 0.1e-7;
  bool _t0DDE = prim >=007E (_t0DDC, _t0DDD);
  bool _t0DDF = prim $and01C4 (_t0DD6, _t0DDE);
  bool _t0DE0 = prim $and01C4 (_t0DC8, _t0DDF);
  if _t0DE0 {
    real _t0DE1 = 0.1e1;
    real _t0DE2 = 0.1e-7;
    real _t0DE3 = prim +0017<$[]> (_t0DE1, _t0DE2);
    real _t0DE4 = 0.1e1;
    real _t0DE5 = 0.1e1;
    real _t0DE6 = 0.1e1;
    vec3 _t0DE7 = [_t0DE4, _t0DE5, _t0DE6];
    real _t0DE8 = 0.e0;
    real _t0DE9 = -0.1e1;
    real _t0DEA = 0.e0;
    real _t0DEB = 0.e0;
    vec3 _t0DEC = [_t0DE9, _t0DEA, _t0DEB];
    real _t0DED = prim •00CE<$[3]; $[3]; $[]> (_t0DEC, refPos0D22);
    real _t0DEE = prim -0026<$[]> (_t0DE8, _t0DED);
    real _t0DEF = -0.1e1;
    real _t0DF0 = 0.e0;
    real _t0DF1 = 0.e0;
    vec3 _t0DF2 = [_t0DEF, _t0DF0, _t0DF1];
    real _t0DF3 = prim •00CE<$[3]; $[3]; $[]> (_t0DF2, dPos0D23);
    real _t0DF4 = prim /0055 (_t0DEE, _t0DF3);
    vec3 _t0DF5 = prim *0038<$[3]> (dPos0D23, _t0DF4);
    vec3 _t0DF6 = prim +0017<$[3]> (refPos0D22, _t0DF5);
    real _t0DF7 = prim •00CE<$[3]; $[3]; $[]> (_t0DE7, _t0DF6);
    bool _t0DF8 = prim >0080 (_t0DE3, _t0DF7);
    real _t0DF9 = 0.1e-7;
    real _t0DFA = 0.1e-7;
    real _t0DFB = 0.1e-7;
    vec3 _t0DFC = [_t0DF9, _t0DFA, _t0DFB];
    real _t0DFD = 0.e0;
    real _t0DFE = -0.1e1;
    real _t0DFF = 0.e0;
    real _t0E00 = 0.e0;
    vec3 _t0E01 = [_t0DFE, _t0DFF, _t0E00];
    real _t0E02 = prim •00CE<$[3]; $[3]; $[]> (_t0E01, refPos0D22);
    real _t0E03 = prim -0026<$[]> (_t0DFD, _t0E02);
    real _t0E04 = -0.1e1;
    real _t0E05 = 0.e0;
    real _t0E06 = 0.e0;
    vec3 _t0E07 = [_t0E04, _t0E05, _t0E06];
    real _t0E08 = prim •00CE<$[3]; $[3]; $[]> (_t0E07, dPos0D23);
    real _t0E09 = prim /0055 (_t0E03, _t0E08);
    vec3 _t0E0A = prim *0038<$[3]> (dPos0D23, _t0E09);
    vec3 _t0E0B = prim +0017<$[3]> (refPos0D22, _t0E0A);
    vec3 _t0E0C = prim +0017<$[3]> (_t0DFC, _t0E0B);
    real _t0E0D = _t0E0C[0];
    real _t0E0E = -0.e0;
    bool _t0E0F = prim >0080 (_t0E0D, _t0E0E);
    real _t0E10 = 0.1e-7;
    real _t0E11 = 0.1e-7;
    real _t0E12 = 0.1e-7;
    vec3 _t0E13 = [_t0E10, _t0E11, _t0E12];
    real _t0E14 = 0.e0;
    real _t0E15 = -0.1e1;
    real _t0E16 = 0.e0;
    real _t0E17 = 0.e0;
    vec3 _t0E18 = [_t0E15, _t0E16, _t0E17];
    real _t0E19 = prim •00CE<$[3]; $[3]; $[]> (_t0E18, refPos0D22);
    real _t0E1A = prim -0026<$[]> (_t0E14, _t0E19);
    real _t0E1B = -0.1e1;
    real _t0E1C = 0.e0;
    real _t0E1D = 0.e0;
    vec3 _t0E1E = [_t0E1B, _t0E1C, _t0E1D];
    real _t0E1F = prim •00CE<$[3]; $[3]; $[]> (_t0E1E, dPos0D23);
    real _t0E20 = prim /0055 (_t0E1A, _t0E1F);
    vec3 _t0E21 = prim *0038<$[3]> (dPos0D23, _t0E20);
    vec3 _t0E22 = prim +0017<$[3]> (refPos0D22, _t0E21);
    vec3 _t0E23 = prim +0017<$[3]> (_t0E13, _t0E22);
    real _t0E24 = _t0E23[1];
    real _t0E25 = -0.e0;
    bool _t0E26 = prim >0080 (_t0E24, _t0E25);
    real _t0E27 = 0.1e-7;
    real _t0E28 = 0.1e-7;
    real _t0E29 = 0.1e-7;
    vec3 _t0E2A = [_t0E27, _t0E28, _t0E29];
    real _t0E2B = 0.e0;
    real _t0E2C = -0.1e1;
    real _t0E2D = 0.e0;
    real _t0E2E = 0.e0;
    vec3 _t0E2F = [_t0E2C, _t0E2D, _t0E2E];
    real _t0E30 = prim •00CE<$[3]; $[3]; $[]> (_t0E2F, refPos0D22);
    real _t0E31 = prim -0026<$[]> (_t0E2B, _t0E30);
    real _t0E32 = -0.1e1;
    real _t0E33 = 0.e0;
    real _t0E34 = 0.e0;
    vec3 _t0E35 = [_t0E32, _t0E33, _t0E34];
    real _t0E36 = prim •00CE<$[3]; $[3]; $[]> (_t0E35, dPos0D23);
    real _t0E37 = prim /0055 (_t0E31, _t0E36);
    vec3 _t0E38 = prim *0038<$[3]> (dPos0D23, _t0E37);
    vec3 _t0E39 = prim +0017<$[3]> (refPos0D22, _t0E38);
    vec3 _t0E3A = prim +0017<$[3]> (_t0E2A, _t0E39);
    real _t0E3B = _t0E3A[2];
    real _t0E3C = -0.e0;
    bool _t0E3D = prim >0080 (_t0E3B, _t0E3C);
    bool _t0E3E = prim $and01C4 (_t0E26, _t0E3D);
    bool _t0E3F = prim $and01C4 (_t0E0F, _t0E3E);
    bool _t0E40 = prim $and01C4 (_t0DF8, _t0E3F);
    if _t0E40 {
      real _t0E41 = 0.e0;
      real _t0E42 = -0.1e1;
      real _t0E43 = 0.e0;
      real _t0E44 = 0.e0;
      vec3 _t0E45 = [_t0E42, _t0E43, _t0E44];
      real _t0E46 = prim •00CE<$[3]; $[3]; $[]> (_t0E45, refPos0D22);
      real _t0E47 = prim -0026<$[]> (_t0E41, _t0E46);
      real _t0E48 = -0.1e1;
      real _t0E49 = 0.e0;
      real _t0E4A = 0.e0;
      vec3 _t0E4B = [_t0E48, _t0E49, _t0E4A];
      real _t0E4C = prim •00CE<$[3]; $[3]; $[]> (_t0E4B, dPos0D23);
      time0D24 = prim /0055 (_t0E47, _t0E4C);
      face0D25 = 1;
    }
  }
  real _t0E4D = 0.e0;
  real _t0E4E = 0.e0;
  real _t0E4F = -0.1e1;
  real _t0E50 = 0.e0;
  vec3 _t0E51 = [_t0E4E, _t0E4F, _t0E50];
  real _t0E52 = prim •00CE<$[3]; $[3]; $[]> (_t0E51, refPos0D22);
  real _t0E53 = prim -0026<$[]> (_t0E4D, _t0E52);
  real _t0E54 = 0.e0;
  real _t0E55 = -0.1e1;
  real _t0E56 = 0.e0;
  vec3 _t0E57 = [_t0E54, _t0E55, _t0E56];
  real _t0E58 = prim •00CE<$[3]; $[3]; $[]> (_t0E57, dPos0D23);
  real _t0E59 = prim /0055 (_t0E53, _t0E58);
  real _t0E5A = -0.1e-7;
  bool _t0E5B = prim >=007E (_t0E59, _t0E5A);
  real _t0E5C = 0.e0;
  real _t0E5D = 0.e0;
  real _t0E5E = -0.1e1;
  real _t0E5F = 0.e0;
  vec3 _t0E60 = [_t0E5D, _t0E5E, _t0E5F];
  real _t0E61 = prim •00CE<$[3]; $[3]; $[]> (_t0E60, refPos0D22);
  real _t0E62 = prim -0026<$[]> (_t0E5C, _t0E61);
  real _t0E63 = 0.e0;
  real _t0E64 = -0.1e1;
  real _t0E65 = 0.e0;
  vec3 _t0E66 = [_t0E63, _t0E64, _t0E65];
  real _t0E67 = prim •00CE<$[3]; $[3]; $[]> (_t0E66, dPos0D23);
  real _t0E68 = prim /0055 (_t0E62, _t0E67);
  bool _t0E69 = prim >0080 (time0D24, _t0E68);
  real _t0E6A = 0.e0;
  real _t0E6B = -0.1e1;
  real _t0E6C = 0.e0;
  vec3 _t0E6D = [_t0E6A, _t0E6B, _t0E6C];
  real _t0E6E = prim •00CE<$[3]; $[3]; $[]> (_t0E6D, dPos0D23);
  real _t0E6F = prim |()|00B5<$[]> (_t0E6E);
  real _t0E70 = 0.1e-7;
  bool _t0E71 = prim >=007E (_t0E6F, _t0E70);
  bool _t0E72 = prim $and01C4 (_t0E69, _t0E71);
  bool _t0E73 = prim $and01C4 (_t0E5B, _t0E72);
  if _t0E73 {
    real _t0E74 = 0.1e1;
    real _t0E75 = 0.1e-7;
    real _t0E76 = prim +0017<$[]> (_t0E74, _t0E75);
    real _t0E77 = 0.1e1;
    real _t0E78 = 0.1e1;
    real _t0E79 = 0.1e1;
    vec3 _t0E7A = [_t0E77, _t0E78, _t0E79];
    real _t0E7B = 0.e0;
    real _t0E7C = 0.e0;
    real _t0E7D = -0.1e1;
    real _t0E7E = 0.e0;
    vec3 _t0E7F = [_t0E7C, _t0E7D, _t0E7E];
    real _t0E80 = prim •00CE<$[3]; $[3]; $[]> (_t0E7F, refPos0D22);
    real _t0E81 = prim -0026<$[]> (_t0E7B, _t0E80);
    real _t0E82 = 0.e0;
    real _t0E83 = -0.1e1;
    real _t0E84 = 0.e0;
    vec3 _t0E85 = [_t0E82, _t0E83, _t0E84];
    real _t0E86 = prim •00CE<$[3]; $[3]; $[]> (_t0E85, dPos0D23);
    real _t0E87 = prim /0055 (_t0E81, _t0E86);
    vec3 _t0E88 = prim *0038<$[3]> (dPos0D23, _t0E87);
    vec3 _t0E89 = prim +0017<$[3]> (refPos0D22, _t0E88);
    real _t0E8A = prim •00CE<$[3]; $[3]; $[]> (_t0E7A, _t0E89);
    bool _t0E8B = prim >0080 (_t0E76, _t0E8A);
    real _t0E8C = 0.1e-7;
    real _t0E8D = 0.1e-7;
    real _t0E8E = 0.1e-7;
    vec3 _t0E8F = [_t0E8C, _t0E8D, _t0E8E];
    real _t0E90 = 0.e0;
    real _t0E91 = 0.e0;
    real _t0E92 = -0.1e1;
    real _t0E93 = 0.e0;
    vec3 _t0E94 = [_t0E91, _t0E92, _t0E93];
    real _t0E95 = prim •00CE<$[3]; $[3]; $[]> (_t0E94, refPos0D22);
    real _t0E96 = prim -0026<$[]> (_t0E90, _t0E95);
    real _t0E97 = 0.e0;
    real _t0E98 = -0.1e1;
    real _t0E99 = 0.e0;
    vec3 _t0E9A = [_t0E97, _t0E98, _t0E99];
    real _t0E9B = prim •00CE<$[3]; $[3]; $[]> (_t0E9A, dPos0D23);
    real _t0E9C = prim /0055 (_t0E96, _t0E9B);
    vec3 _t0E9D = prim *0038<$[3]> (dPos0D23, _t0E9C);
    vec3 _t0E9E = prim +0017<$[3]> (refPos0D22, _t0E9D);
    vec3 _t0E9F = prim +0017<$[3]> (_t0E8F, _t0E9E);
    real _t0EA0 = _t0E9F[0];
    real _t0EA1 = -0.e0;
    bool _t0EA2 = prim >0080 (_t0EA0, _t0EA1);
    real _t0EA3 = 0.1e-7;
    real _t0EA4 = 0.1e-7;
    real _t0EA5 = 0.1e-7;
    vec3 _t0EA6 = [_t0EA3, _t0EA4, _t0EA5];
    real _t0EA7 = 0.e0;
    real _t0EA8 = 0.e0;
    real _t0EA9 = -0.1e1;
    real _t0EAA = 0.e0;
    vec3 _t0EAB = [_t0EA8, _t0EA9, _t0EAA];
    real _t0EAC = prim •00CE<$[3]; $[3]; $[]> (_t0EAB, refPos0D22);
    real _t0EAD = prim -0026<$[]> (_t0EA7, _t0EAC);
    real _t0EAE = 0.e0;
    real _t0EAF = -0.1e1;
    real _t0EB0 = 0.e0;
    vec3 _t0EB1 = [_t0EAE, _t0EAF, _t0EB0];
    real _t0EB2 = prim •00CE<$[3]; $[3]; $[]> (_t0EB1, dPos0D23);
    real _t0EB3 = prim /0055 (_t0EAD, _t0EB2);
    vec3 _t0EB4 = prim *0038<$[3]> (dPos0D23, _t0EB3);
    vec3 _t0EB5 = prim +0017<$[3]> (refPos0D22, _t0EB4);
    vec3 _t0EB6 = prim +0017<$[3]> (_t0EA6, _t0EB5);
    real _t0EB7 = _t0EB6[1];
    real _t0EB8 = -0.e0;
    bool _t0EB9 = prim >0080 (_t0EB7, _t0EB8);
    real _t0EBA = 0.1e-7;
    real _t0EBB = 0.1e-7;
    real _t0EBC = 0.1e-7;
    vec3 _t0EBD = [_t0EBA, _t0EBB, _t0EBC];
    real _t0EBE = 0.e0;
    real _t0EBF = 0.e0;
    real _t0EC0 = -0.1e1;
    real _t0EC1 = 0.e0;
    vec3 _t0EC2 = [_t0EBF, _t0EC0, _t0EC1];
    real _t0EC3 = prim •00CE<$[3]; $[3]; $[]> (_t0EC2, refPos0D22);
    real _t0EC4 = prim -0026<$[]> (_t0EBE, _t0EC3);
    real _t0EC5 = 0.e0;
    real _t0EC6 = -0.1e1;
    real _t0EC7 = 0.e0;
    vec3 _t0EC8 = [_t0EC5, _t0EC6, _t0EC7];
    real _t0EC9 = prim •00CE<$[3]; $[3]; $[]> (_t0EC8, dPos0D23);
    real _t0ECA = prim /0055 (_t0EC4, _t0EC9);
    vec3 _t0ECB = prim *0038<$[3]> (dPos0D23, _t0ECA);
    vec3 _t0ECC = prim +0017<$[3]> (refPos0D22, _t0ECB);
    vec3 _t0ECD = prim +0017<$[3]> (_t0EBD, _t0ECC);
    real _t0ECE = _t0ECD[2];
    real _t0ECF = -0.e0;
    bool _t0ED0 = prim >0080 (_t0ECE, _t0ECF);
    bool _t0ED1 = prim $and01C4 (_t0EB9, _t0ED0);
    bool _t0ED2 = prim $and01C4 (_t0EA2, _t0ED1);
    bool _t0ED3 = prim $and01C4 (_t0E8B, _t0ED2);
    if _t0ED3 {
      real _t0ED4 = 0.e0;
      real _t0ED5 = 0.e0;
      real _t0ED6 = -0.1e1;
      real _t0ED7 = 0.e0;
      vec3 _t0ED8 = [_t0ED5, _t0ED6, _t0ED7];
      real _t0ED9 = prim •00CE<$[3]; $[3]; $[]> (_t0ED8, refPos0D22);
      real _t0EDA = prim -0026<$[]> (_t0ED4, _t0ED9);
      real _t0EDB = 0.e0;
      real _t0EDC = -0.1e1;
      real _t0EDD = 0.e0;
      vec3 _t0EDE = [_t0EDB, _t0EDC, _t0EDD];
      real _t0EDF = prim •00CE<$[3]; $[3]; $[]> (_t0EDE, dPos0D23);
      time0D24 = prim /0055 (_t0EDA, _t0EDF);
      face0D25 = 2;
    }
  }
  real _t0EE0 = 0.e0;
  real _t0EE1 = 0.e0;
  real _t0EE2 = 0.e0;
  real _t0EE3 = -0.1e1;
  vec3 _t0EE4 = [_t0EE1, _t0EE2, _t0EE3];
  real _t0EE5 = prim •00CE<$[3]; $[3]; $[]> (_t0EE4, refPos0D22);
  real _t0EE6 = prim -0026<$[]> (_t0EE0, _t0EE5);
  real _t0EE7 = 0.e0;
  real _t0EE8 = 0.e0;
  real _t0EE9 = -0.1e1;
  vec3 _t0EEA = [_t0EE7, _t0EE8, _t0EE9];
  real _t0EEB = prim •00CE<$[3]; $[3]; $[]> (_t0EEA, dPos0D23);
  real _t0EEC = prim /0055 (_t0EE6, _t0EEB);
  real _t0EED = -0.1e-7;
  bool _t0EEE = prim >=007E (_t0EEC, _t0EED);
  real _t0EEF = 0.e0;
  real _t0EF0 = 0.e0;
  real _t0EF1 = 0.e0;
  real _t0EF2 = -0.1e1;
  vec3 _t0EF3 = [_t0EF0, _t0EF1, _t0EF2];
  real _t0EF4 = prim •00CE<$[3]; $[3]; $[]> (_t0EF3, refPos0D22);
  real _t0EF5 = prim -0026<$[]> (_t0EEF, _t0EF4);
  real _t0EF6 = 0.e0;
  real _t0EF7 = 0.e0;
  real _t0EF8 = -0.1e1;
  vec3 _t0EF9 = [_t0EF6, _t0EF7, _t0EF8];
  real _t0EFA = prim •00CE<$[3]; $[3]; $[]> (_t0EF9, dPos0D23);
  real _t0EFB = prim /0055 (_t0EF5, _t0EFA);
  bool _t0EFC = prim >0080 (time0D24, _t0EFB);
  real _t0EFD = 0.e0;
  real _t0EFE = 0.e0;
  real _t0EFF = -0.1e1;
  vec3 _t0F00 = [_t0EFD, _t0EFE, _t0EFF];
  real _t0F01 = prim •00CE<$[3]; $[3]; $[]> (_t0F00, dPos0D23);
  real _t0F02 = prim |()|00B5<$[]> (_t0F01);
  real _t0F03 = 0.1e-7;
  bool _t0F04 = prim >=007E (_t0F02, _t0F03);
  bool _t0F05 = prim $and01C4 (_t0EFC, _t0F04);
  bool _t0F06 = prim $and01C4 (_t0EEE, _t0F05);
  if _t0F06 {
    real _t0F07 = 0.1e1;
    real _t0F08 = 0.1e-7;
    real _t0F09 = prim +0017<$[]> (_t0F07, _t0F08);
    real _t0F0A = 0.1e1;
    real _t0F0B = 0.1e1;
    real _t0F0C = 0.1e1;
    vec3 _t0F0D = [_t0F0A, _t0F0B, _t0F0C];
    real _t0F0E = 0.e0;
    real _t0F0F = 0.e0;
    real _t0F10 = 0.e0;
    real _t0F11 = -0.1e1;
    vec3 _t0F12 = [_t0F0F, _t0F10, _t0F11];
    real _t0F13 = prim •00CE<$[3]; $[3]; $[]> (_t0F12, refPos0D22);
    real _t0F14 = prim -0026<$[]> (_t0F0E, _t0F13);
    real _t0F15 = 0.e0;
    real _t0F16 = 0.e0;
    real _t0F17 = -0.1e1;
    vec3 _t0F18 = [_t0F15, _t0F16, _t0F17];
    real _t0F19 = prim •00CE<$[3]; $[3]; $[]> (_t0F18, dPos0D23);
    real _t0F1A = prim /0055 (_t0F14, _t0F19);
    vec3 _t0F1B = prim *0038<$[3]> (dPos0D23, _t0F1A);
    vec3 _t0F1C = prim +0017<$[3]> (refPos0D22, _t0F1B);
    real _t0F1D = prim •00CE<$[3]; $[3]; $[]> (_t0F0D, _t0F1C);
    bool _t0F1E = prim >0080 (_t0F09, _t0F1D);
    real _t0F1F = 0.1e-7;
    real _t0F20 = 0.1e-7;
    real _t0F21 = 0.1e-7;
    vec3 _t0F22 = [_t0F1F, _t0F20, _t0F21];
    real _t0F23 = 0.e0;
    real _t0F24 = 0.e0;
    real _t0F25 = 0.e0;
    real _t0F26 = -0.1e1;
    vec3 _t0F27 = [_t0F24, _t0F25, _t0F26];
    real _t0F28 = prim •00CE<$[3]; $[3]; $[]> (_t0F27, refPos0D22);
    real _t0F29 = prim -0026<$[]> (_t0F23, _t0F28);
    real _t0F2A = 0.e0;
    real _t0F2B = 0.e0;
    real _t0F2C = -0.1e1;
    vec3 _t0F2D = [_t0F2A, _t0F2B, _t0F2C];
    real _t0F2E = prim •00CE<$[3]; $[3]; $[]> (_t0F2D, dPos0D23);
    real _t0F2F = prim /0055 (_t0F29, _t0F2E);
    vec3 _t0F30 = prim *0038<$[3]> (dPos0D23, _t0F2F);
    vec3 _t0F31 = prim +0017<$[3]> (refPos0D22, _t0F30);
    vec3 _t0F32 = prim +0017<$[3]> (_t0F22, _t0F31);
    real _t0F33 = _t0F32[0];
    real _t0F34 = -0.e0;
    bool _t0F35 = prim >0080 (_t0F33, _t0F34);
    real _t0F36 = 0.1e-7;
    real _t0F37 = 0.1e-7;
    real _t0F38 = 0.1e-7;
    vec3 _t0F39 = [_t0F36, _t0F37, _t0F38];
    real _t0F3A = 0.e0;
    real _t0F3B = 0.e0;
    real _t0F3C = 0.e0;
    real _t0F3D = -0.1e1;
    vec3 _t0F3E = [_t0F3B, _t0F3C, _t0F3D];
    real _t0F3F = prim •00CE<$[3]; $[3]; $[]> (_t0F3E, refPos0D22);
    real _t0F40 = prim -0026<$[]> (_t0F3A, _t0F3F);
    real _t0F41 = 0.e0;
    real _t0F42 = 0.e0;
    real _t0F43 = -0.1e1;
    vec3 _t0F44 = [_t0F41, _t0F42, _t0F43];
    real _t0F45 = prim •00CE<$[3]; $[3]; $[]> (_t0F44, dPos0D23);
    real _t0F46 = prim /0055 (_t0F40, _t0F45);
    vec3 _t0F47 = prim *0038<$[3]> (dPos0D23, _t0F46);
    vec3 _t0F48 = prim +0017<$[3]> (refPos0D22, _t0F47);
    vec3 _t0F49 = prim +0017<$[3]> (_t0F39, _t0F48);
    real _t0F4A = _t0F49[1];
    real _t0F4B = -0.e0;
    bool _t0F4C = prim >0080 (_t0F4A, _t0F4B);
    real _t0F4D = 0.1e-7;
    real _t0F4E = 0.1e-7;
    real _t0F4F = 0.1e-7;
    vec3 _t0F50 = [_t0F4D, _t0F4E, _t0F4F];
    real _t0F51 = 0.e0;
    real _t0F52 = 0.e0;
    real _t0F53 = 0.e0;
    real _t0F54 = -0.1e1;
    vec3 _t0F55 = [_t0F52, _t0F53, _t0F54];
    real _t0F56 = prim •00CE<$[3]; $[3]; $[]> (_t0F55, refPos0D22);
    real _t0F57 = prim -0026<$[]> (_t0F51, _t0F56);
    real _t0F58 = 0.e0;
    real _t0F59 = 0.e0;
    real _t0F5A = -0.1e1;
    vec3 _t0F5B = [_t0F58, _t0F59, _t0F5A];
    real _t0F5C = prim •00CE<$[3]; $[3]; $[]> (_t0F5B, dPos0D23);
    real _t0F5D = prim /0055 (_t0F57, _t0F5C);
    vec3 _t0F5E = prim *0038<$[3]> (dPos0D23, _t0F5D);
    vec3 _t0F5F = prim +0017<$[3]> (refPos0D22, _t0F5E);
    vec3 _t0F60 = prim +0017<$[3]> (_t0F50, _t0F5F);
    real _t0F61 = _t0F60[2];
    real _t0F62 = -0.e0;
    bool _t0F63 = prim >0080 (_t0F61, _t0F62);
    bool _t0F64 = prim $and01C4 (_t0F4C, _t0F63);
    bool _t0F65 = prim $and01C4 (_t0F35, _t0F64);
    bool _t0F66 = prim $and01C4 (_t0F1E, _t0F65);
    if _t0F66 {
      real _t0F67 = 0.e0;
      real _t0F68 = 0.e0;
      real _t0F69 = 0.e0;
      real _t0F6A = -0.1e1;
      vec3 _t0F6B = [_t0F68, _t0F69, _t0F6A];
      real _t0F6C = prim •00CE<$[3]; $[3]; $[]> (_t0F6B, refPos0D22);
      real _t0F6D = prim -0026<$[]> (_t0F67, _t0F6C);
      real _t0F6E = 0.e0;
      real _t0F6F = 0.e0;
      real _t0F70 = -0.1e1;
      vec3 _t0F71 = [_t0F6E, _t0F6F, _t0F70];
      real _t0F72 = prim •00CE<$[3]; $[3]; $[]> (_t0F71, dPos0D23);
      time0D24 = prim /0055 (_t0F6D, _t0F72);
      face0D25 = 3;
    }
  }
  int _t0F73 = -1;
  bool _t0F74 = prim !=0086 (face0D25, _t0F73);
  real _t0F75 = 0.1e1;
  real _t0F76 = 0.1e-7;
  real _t0F77 = prim +0017<$[]> (_t0F75, _t0F76);
  real _t0F78 = 0.1e1;
  real _t0F79 = 0.1e1;
  real _t0F7A = 0.1e1;
  vec3 _t0F7B = [_t0F78, _t0F79, _t0F7A];
  real _t0F7C = 0.e0;
  real _t0F7D = prim max0125 (time0D24, _t0F7C);
  vec3 _t0F7E = prim *0038<$[3]> (dPos0D23, _t0F7D);
  vec3 _t0F7F = prim +0017<$[3]> (refPos0D22, _t0F7E);
  real _t0F80 = prim •00CE<$[3]; $[3]; $[]> (_t0F7B, _t0F7F);
  bool _t0F81 = prim >0080 (_t0F77, _t0F80);
  real _t0F82 = 0.1e-7;
  real _t0F83 = 0.1e-7;
  real _t0F84 = 0.1e-7;
  vec3 _t0F85 = [_t0F82, _t0F83, _t0F84];
  real _t0F86 = 0.e0;
  real _t0F87 = prim max0125 (time0D24, _t0F86);
  vec3 _t0F88 = prim *0038<$[3]> (dPos0D23, _t0F87);
  vec3 _t0F89 = prim +0017<$[3]> (refPos0D22, _t0F88);
  vec3 _t0F8A = prim +0017<$[3]> (_t0F85, _t0F89);
  real _t0F8B = _t0F8A[0];
  real _t0F8C = -0.e0;
  bool _t0F8D = prim >0080 (_t0F8B, _t0F8C);
  real _t0F8E = 0.1e-7;
  real _t0F8F = 0.1e-7;
  real _t0F90 = 0.1e-7;
  vec3 _t0F91 = [_t0F8E, _t0F8F, _t0F90];
  real _t0F92 = 0.e0;
  real _t0F93 = prim max0125 (time0D24, _t0F92);
  vec3 _t0F94 = prim *0038<$[3]> (dPos0D23, _t0F93);
  vec3 _t0F95 = prim +0017<$[3]> (refPos0D22, _t0F94);
  vec3 _t0F96 = prim +0017<$[3]> (_t0F91, _t0F95);
  real _t0F97 = _t0F96[1];
  real _t0F98 = -0.e0;
  bool _t0F99 = prim >0080 (_t0F97, _t0F98);
  real _t0F9A = 0.1e-7;
  real _t0F9B = 0.1e-7;
  real _t0F9C = 0.1e-7;
  vec3 _t0F9D = [_t0F9A, _t0F9B, _t0F9C];
  real _t0F9E = 0.e0;
  real _t0F9F = prim max0125 (time0D24, _t0F9E);
  vec3 _t0FA0 = prim *0038<$[3]> (dPos0D23, _t0F9F);
  vec3 _t0FA1 = prim +0017<$[3]> (refPos0D22, _t0FA0);
  vec3 _t0FA2 = prim +0017<$[3]> (_t0F9D, _t0FA1);
  real _t0FA3 = _t0FA2[2];
  real _t0FA4 = -0.e0;
  bool _t0FA5 = prim >0080 (_t0FA3, _t0FA4);
  bool _t0FA6 = prim $and01C4 (_t0F99, _t0FA5);
  bool _t0FA7 = prim $and01C4 (_t0F8D, _t0FA6);
  bool _t0FA8 = prim $and01C4 (_t0F81, _t0FA7);
  bool _t0FA9 = prim $and01C4 (_t0F74, _t0FA8);
  if _t0FA9 {
    real _t0FAA = 0.e0;
    real _t0FAB = prim max0125 (time0D24, _t0FAA);
    real _t0FAC = (real)face0D25;
    vec2 _t0FAD = [_t0FAB, _t0FAC];
    return _t0FAD;
  } else {
    real _t0FAE = -0.1e1;
    real _t0FAF = -0.1e1;
    vec2 _t0FB0 = [_t0FAE, _t0FAF];
    return _t0FB0;
  }
}
function vec2#0 _exit0FB1 (vec3 refPos0D22, vec3 dPos0D23, int i0FB2)
{
  real time0FB3 = +inf;
  int face0FB4 = -1;
  real faceTime0FB5 = -inf;
  real _t0FB6 = 0.57735026919e0;
  real _t0FB7 = 0.57735026919e0;
  real _t0FB8 = 0.57735026919e0;
  real _t0FB9 = 0.57735026919e0;
  vec3 _t0FBA = [_t0FB7, _t0FB8, _t0FB9];
  real _t0FBB = prim •00CE<$[3]; $[3]; $[]> (_t0FBA, refPos0D22);
  real _t0FBC = prim -0026<$[]> (_t0FB6, _t0FBB);
  real _t0FBD = 0.57735026919e0;
  real _t0FBE = 0.57735026919e0;
  real _t0FBF = 0.57735026919e0;
  vec3 _t0FC0 = [_t0FBD, _t0FBE, _t0FBF];
  real _t0FC1 = prim •00CE<$[3]; $[3]; $[]> (_t0FC0, dPos0D23);
  real _t0FC2 = prim /0055 (_t0FBC, _t0FC1);
  real _t0FC3 = -0.1e-7;
  bool _t0FC4 = prim >=007E (_t0FC2, _t0FC3);
  real _t0FC5 = 0.57735026919e0;
  real _t0FC6 = 0.57735026919e0;
  real _t0FC7 = 0.57735026919e0;
  real _t0FC8 = 0.57735026919e0;
  vec3 _t0FC9 = [_t0FC6, _t0FC7, _t0FC8];
  real _t0FCA = prim •00CE<$[3]; $[3]; $[]> (_t0FC9, refPos0D22);
  real _t0FCB = prim -0026<$[]> (_t0FC5, _t0FCA);
  real _t0FCC = 0.57735026919e0;
  real _t0FCD = 0.57735026919e0;
  real _t0FCE = 0.57735026919e0;
  vec3 _t0FCF = [_t0FCC, _t0FCD, _t0FCE];
  real _t0FD0 = prim •00CE<$[3]; $[3]; $[]> (_t0FCF, dPos0D23);
  real _t0FD1 = prim /0055 (_t0FCB, _t0FD0);
  bool _t0FD2 = prim >0080 (time0FB3, _t0FD1);
  real _t0FD3 = 0.57735026919e0;
  real _t0FD4 = 0.57735026919e0;
  real _t0FD5 = 0.57735026919e0;
  vec3 _t0FD6 = [_t0FD3, _t0FD4, _t0FD5];
  real _t0FD7 = prim •00CE<$[3]; $[3]; $[]> (_t0FD6, dPos0D23);
  real _t0FD8 = prim |()|00B5<$[]> (_t0FD7);
  real _t0FD9 = 0.1e-7;
  bool _t0FDA = prim >=007E (_t0FD8, _t0FD9);
  bool _t0FDB = prim $and01C4 (_t0FD2, _t0FDA);
  bool _t0FDC = prim $and01C4 (_t0FC4, _t0FDB);
  if _t0FDC {
    int _t0FDD = 0;
    bool _t0FDE = prim !=0086 (i0FB2, _t0FDD);
    if _t0FDE {
      real _t0FDF = 0.57735026919e0;
      real _t0FE0 = 0.57735026919e0;
      real _t0FE1 = 0.57735026919e0;
      real _t0FE2 = 0.57735026919e0;
      vec3 _t0FE3 = [_t0FE0, _t0FE1, _t0FE2];
      real _t0FE4 = prim •00CE<$[3]; $[3]; $[]> (_t0FE3, refPos0D22);
      real _t0FE5 = prim -0026<$[]> (_t0FDF, _t0FE4);
      real _t0FE6 = 0.57735026919e0;
      real _t0FE7 = 0.57735026919e0;
      real _t0FE8 = 0.57735026919e0;
      vec3 _t0FE9 = [_t0FE6, _t0FE7, _t0FE8];
      real _t0FEA = prim •00CE<$[3]; $[3]; $[]> (_t0FE9, dPos0D23);
      time0FB3 = prim /0055 (_t0FE5, _t0FEA);
      face0FB4 = 0;
    } else {
      real _t0FEB = 0.57735026919e0;
      real _t0FEC = 0.57735026919e0;
      real _t0FED = 0.57735026919e0;
      real _t0FEE = 0.57735026919e0;
      vec3 _t0FEF = [_t0FEC, _t0FED, _t0FEE];
      real _t0FF0 = prim •00CE<$[3]; $[3]; $[]> (_t0FEF, refPos0D22);
      real _t0FF1 = prim -0026<$[]> (_t0FEB, _t0FF0);
      real _t0FF2 = 0.57735026919e0;
      real _t0FF3 = 0.57735026919e0;
      real _t0FF4 = 0.57735026919e0;
      vec3 _t0FF5 = [_t0FF2, _t0FF3, _t0FF4];
      real _t0FF6 = prim •00CE<$[3]; $[3]; $[]> (_t0FF5, dPos0D23);
      faceTime0FB5 = prim /0055 (_t0FF1, _t0FF6);
    }
  }
  real _t0FF7 = 0.e0;
  real _t0FF8 = -0.1e1;
  real _t0FF9 = 0.e0;
  real _t0FFA = 0.e0;
  vec3 _t0FFB = [_t0FF8, _t0FF9, _t0FFA];
  real _t0FFC = prim •00CE<$[3]; $[3]; $[]> (_t0FFB, refPos0D22);
  real _t0FFD = prim -0026<$[]> (_t0FF7, _t0FFC);
  real _t0FFE = -0.1e1;
  real _t0FFF = 0.e0;
  real _t1000 = 0.e0;
  vec3 _t1001 = [_t0FFE, _t0FFF, _t1000];
  real _t1002 = prim •00CE<$[3]; $[3]; $[]> (_t1001, dPos0D23);
  real _t1003 = prim /0055 (_t0FFD, _t1002);
  real _t1004 = -0.1e-7;
  bool _t1005 = prim >=007E (_t1003, _t1004);
  real _t1006 = 0.e0;
  real _t1007 = -0.1e1;
  real _t1008 = 0.e0;
  real _t1009 = 0.e0;
  vec3 _t100A = [_t1007, _t1008, _t1009];
  real _t100B = prim •00CE<$[3]; $[3]; $[]> (_t100A, refPos0D22);
  real _t100C = prim -0026<$[]> (_t1006, _t100B);
  real _t100D = -0.1e1;
  real _t100E = 0.e0;
  real _t100F = 0.e0;
  vec3 _t1010 = [_t100D, _t100E, _t100F];
  real _t1011 = prim •00CE<$[3]; $[3]; $[]> (_t1010, dPos0D23);
  real _t1012 = prim /0055 (_t100C, _t1011);
  bool _t1013 = prim >0080 (time0FB3, _t1012);
  real _t1014 = -0.1e1;
  real _t1015 = 0.e0;
  real _t1016 = 0.e0;
  vec3 _t1017 = [_t1014, _t1015, _t1016];
  real _t1018 = prim •00CE<$[3]; $[3]; $[]> (_t1017, dPos0D23);
  real _t1019 = prim |()|00B5<$[]> (_t1018);
  real _t101A = 0.1e-7;
  bool _t101B = prim >=007E (_t1019, _t101A);
  bool _t101C = prim $and01C4 (_t1013, _t101B);
  bool _t101D = prim $and01C4 (_t1005, _t101C);
  if _t101D {
    int _t101E = 1;
    bool _t101F = prim !=0086 (i0FB2, _t101E);
    if _t101F {
      real _t1020 = 0.e0;
      real _t1021 = -0.1e1;
      real _t1022 = 0.e0;
      real _t1023 = 0.e0;
      vec3 _t1024 = [_t1021, _t1022, _t1023];
      real _t1025 = prim •00CE<$[3]; $[3]; $[]> (_t1024, refPos0D22);
      real _t1026 = prim -0026<$[]> (_t1020, _t1025);
      real _t1027 = -0.1e1;
      real _t1028 = 0.e0;
      real _t1029 = 0.e0;
      vec3 _t102A = [_t1027, _t1028, _t1029];
      real _t102B = prim •00CE<$[3]; $[3]; $[]> (_t102A, dPos0D23);
      time0FB3 = prim /0055 (_t1026, _t102B);
      face0FB4 = 1;
    } else {
      real _t102C = 0.e0;
      real _t102D = -0.1e1;
      real _t102E = 0.e0;
      real _t102F = 0.e0;
      vec3 _t1030 = [_t102D, _t102E, _t102F];
      real _t1031 = prim •00CE<$[3]; $[3]; $[]> (_t1030, refPos0D22);
      real _t1032 = prim -0026<$[]> (_t102C, _t1031);
      real _t1033 = -0.1e1;
      real _t1034 = 0.e0;
      real _t1035 = 0.e0;
      vec3 _t1036 = [_t1033, _t1034, _t1035];
      real _t1037 = prim •00CE<$[3]; $[3]; $[]> (_t1036, dPos0D23);
      faceTime0FB5 = prim /0055 (_t1032, _t1037);
    }
  }
  real _t1038 = 0.e0;
  real _t1039 = 0.e0;
  real _t103A = -0.1e1;
  real _t103B = 0.e0;
  vec3 _t103C = [_t1039, _t103A, _t103B];
  real _t103D = prim •00CE<$[3]; $[3]; $[]> (_t103C, refPos0D22);
  real _t103E = prim -0026<$[]> (_t1038, _t103D);
  real _t103F = 0.e0;
  real _t1040 = -0.1e1;
  real _t1041 = 0.e0;
  vec3 _t1042 = [_t103F, _t1040, _t1041];
  real _t1043 = prim •00CE<$[3]; $[3]; $[]> (_t1042, dPos0D23);
  real _t1044 = prim /0055 (_t103E, _t1043);
  real _t1045 = -0.1e-7;
  bool _t1046 = prim >=007E (_t1044, _t1045);
  real _t1047 = 0.e0;
  real _t1048 = 0.e0;
  real _t1049 = -0.1e1;
  real _t104A = 0.e0;
  vec3 _t104B = [_t1048, _t1049, _t104A];
  real _t104C = prim •00CE<$[3]; $[3]; $[]> (_t104B, refPos0D22);
  real _t104D = prim -0026<$[]> (_t1047, _t104C);
  real _t104E = 0.e0;
  real _t104F = -0.1e1;
  real _t1050 = 0.e0;
  vec3 _t1051 = [_t104E, _t104F, _t1050];
  real _t1052 = prim •00CE<$[3]; $[3]; $[]> (_t1051, dPos0D23);
  real _t1053 = prim /0055 (_t104D, _t1052);
  bool _t1054 = prim >0080 (time0FB3, _t1053);
  real _t1055 = 0.e0;
  real _t1056 = -0.1e1;
  real _t1057 = 0.e0;
  vec3 _t1058 = [_t1055, _t1056, _t1057];
  real _t1059 = prim •00CE<$[3]; $[3]; $[]> (_t1058, dPos0D23);
  real _t105A = prim |()|00B5<$[]> (_t1059);
  real _t105B = 0.1e-7;
  bool _t105C = prim >=007E (_t105A, _t105B);
  bool _t105D = prim $and01C4 (_t1054, _t105C);
  bool _t105E = prim $and01C4 (_t1046, _t105D);
  if _t105E {
    int _t105F = 2;
    bool _t1060 = prim !=0086 (i0FB2, _t105F);
    if _t1060 {
      real _t1061 = 0.e0;
      real _t1062 = 0.e0;
      real _t1063 = -0.1e1;
      real _t1064 = 0.e0;
      vec3 _t1065 = [_t1062, _t1063, _t1064];
      real _t1066 = prim •00CE<$[3]; $[3]; $[]> (_t1065, refPos0D22);
      real _t1067 = prim -0026<$[]> (_t1061, _t1066);
      real _t1068 = 0.e0;
      real _t1069 = -0.1e1;
      real _t106A = 0.e0;
      vec3 _t106B = [_t1068, _t1069, _t106A];
      real _t106C = prim •00CE<$[3]; $[3]; $[]> (_t106B, dPos0D23);
      time0FB3 = prim /0055 (_t1067, _t106C);
      face0FB4 = 2;
    } else {
      real _t106D = 0.e0;
      real _t106E = 0.e0;
      real _t106F = -0.1e1;
      real _t1070 = 0.e0;
      vec3 _t1071 = [_t106E, _t106F, _t1070];
      real _t1072 = prim •00CE<$[3]; $[3]; $[]> (_t1071, refPos0D22);
      real _t1073 = prim -0026<$[]> (_t106D, _t1072);
      real _t1074 = 0.e0;
      real _t1075 = -0.1e1;
      real _t1076 = 0.e0;
      vec3 _t1077 = [_t1074, _t1075, _t1076];
      real _t1078 = prim •00CE<$[3]; $[3]; $[]> (_t1077, dPos0D23);
      faceTime0FB5 = prim /0055 (_t1073, _t1078);
    }
  }
  real _t1079 = 0.e0;
  real _t107A = 0.e0;
  real _t107B = 0.e0;
  real _t107C = -0.1e1;
  vec3 _t107D = [_t107A, _t107B, _t107C];
  real _t107E = prim •00CE<$[3]; $[3]; $[]> (_t107D, refPos0D22);
  real _t107F = prim -0026<$[]> (_t1079, _t107E);
  real _t1080 = 0.e0;
  real _t1081 = 0.e0;
  real _t1082 = -0.1e1;
  vec3 _t1083 = [_t1080, _t1081, _t1082];
  real _t1084 = prim •00CE<$[3]; $[3]; $[]> (_t1083, dPos0D23);
  real _t1085 = prim /0055 (_t107F, _t1084);
  real _t1086 = -0.1e-7;
  bool _t1087 = prim >=007E (_t1085, _t1086);
  real _t1088 = 0.e0;
  real _t1089 = 0.e0;
  real _t108A = 0.e0;
  real _t108B = -0.1e1;
  vec3 _t108C = [_t1089, _t108A, _t108B];
  real _t108D = prim •00CE<$[3]; $[3]; $[]> (_t108C, refPos0D22);
  real _t108E = prim -0026<$[]> (_t1088, _t108D);
  real _t108F = 0.e0;
  real _t1090 = 0.e0;
  real _t1091 = -0.1e1;
  vec3 _t1092 = [_t108F, _t1090, _t1091];
  real _t1093 = prim •00CE<$[3]; $[3]; $[]> (_t1092, dPos0D23);
  real _t1094 = prim /0055 (_t108E, _t1093);
  bool _t1095 = prim >0080 (time0FB3, _t1094);
  real _t1096 = 0.e0;
  real _t1097 = 0.e0;
  real _t1098 = -0.1e1;
  vec3 _t1099 = [_t1096, _t1097, _t1098];
  real _t109A = prim •00CE<$[3]; $[3]; $[]> (_t1099, dPos0D23);
  real _t109B = prim |()|00B5<$[]> (_t109A);
  real _t109C = 0.1e-7;
  bool _t109D = prim >=007E (_t109B, _t109C);
  bool _t109E = prim $and01C4 (_t1095, _t109D);
  bool _t109F = prim $and01C4 (_t1087, _t109E);
  if _t109F {
    int _t10A0 = 3;
    bool _t10A1 = prim !=0086 (i0FB2, _t10A0);
    if _t10A1 {
      real _t10A2 = 0.e0;
      real _t10A3 = 0.e0;
      real _t10A4 = 0.e0;
      real _t10A5 = -0.1e1;
      vec3 _t10A6 = [_t10A3, _t10A4, _t10A5];
      real _t10A7 = prim •00CE<$[3]; $[3]; $[]> (_t10A6, refPos0D22);
      real _t10A8 = prim -0026<$[]> (_t10A2, _t10A7);
      real _t10A9 = 0.e0;
      real _t10AA = 0.e0;
      real _t10AB = -0.1e1;
      vec3 _t10AC = [_t10A9, _t10AA, _t10AB];
      real _t10AD = prim •00CE<$[3]; $[3]; $[]> (_t10AC, dPos0D23);
      time0FB3 = prim /0055 (_t10A8, _t10AD);
      face0FB4 = 3;
    } else {
      real _t10AE = 0.e0;
      real _t10AF = 0.e0;
      real _t10B0 = 0.e0;
      real _t10B1 = -0.1e1;
      vec3 _t10B2 = [_t10AF, _t10B0, _t10B1];
      real _t10B3 = prim •00CE<$[3]; $[3]; $[]> (_t10B2, refPos0D22);
      real _t10B4 = prim -0026<$[]> (_t10AE, _t10B3);
      real _t10B5 = 0.e0;
      real _t10B6 = 0.e0;
      real _t10B7 = -0.1e1;
      vec3 _t10B8 = [_t10B5, _t10B6, _t10B7];
      real _t10B9 = prim •00CE<$[3]; $[3]; $[]> (_t10B8, dPos0D23);
      faceTime0FB5 = prim /0055 (_t10B4, _t10B9);
    }
  }
  int _t10BA = -1;
  bool _t10BB = prim !=0086 (face0FB4, _t10BA);
  real _t10BC = 0.1e1;
  real _t10BD = 0.1e-7;
  real _t10BE = prim +0017<$[]> (_t10BC, _t10BD);
  real _t10BF = 0.1e1;
  real _t10C0 = 0.1e1;
  real _t10C1 = 0.1e1;
  vec3 _t10C2 = [_t10BF, _t10C0, _t10C1];
  real _t10C3 = 0.e0;
  real _t10C4 = prim max0125 (time0FB3, _t10C3);
  vec3 _t10C5 = prim *0038<$[3]> (dPos0D23, _t10C4);
  vec3 _t10C6 = prim +0017<$[3]> (refPos0D22, _t10C5);
  real _t10C7 = prim •00CE<$[3]; $[3]; $[]> (_t10C2, _t10C6);
  bool _t10C8 = prim >0080 (_t10BE, _t10C7);
  real _t10C9 = 0.1e-7;
  real _t10CA = 0.1e-7;
  real _t10CB = 0.1e-7;
  vec3 _t10CC = [_t10C9, _t10CA, _t10CB];
  real _t10CD = 0.e0;
  real _t10CE = prim max0125 (time0FB3, _t10CD);
  vec3 _t10CF = prim *0038<$[3]> (dPos0D23, _t10CE);
  vec3 _t10D0 = prim +0017<$[3]> (refPos0D22, _t10CF);
  vec3 _t10D1 = prim +0017<$[3]> (_t10CC, _t10D0);
  real _t10D2 = _t10D1[0];
  real _t10D3 = -0.e0;
  bool _t10D4 = prim >0080 (_t10D2, _t10D3);
  real _t10D5 = 0.1e-7;
  real _t10D6 = 0.1e-7;
  real _t10D7 = 0.1e-7;
  vec3 _t10D8 = [_t10D5, _t10D6, _t10D7];
  real _t10D9 = 0.e0;
  real _t10DA = prim max0125 (time0FB3, _t10D9);
  vec3 _t10DB = prim *0038<$[3]> (dPos0D23, _t10DA);
  vec3 _t10DC = prim +0017<$[3]> (refPos0D22, _t10DB);
  vec3 _t10DD = prim +0017<$[3]> (_t10D8, _t10DC);
  real _t10DE = _t10DD[1];
  real _t10DF = -0.e0;
  bool _t10E0 = prim >0080 (_t10DE, _t10DF);
  real _t10E1 = 0.1e-7;
  real _t10E2 = 0.1e-7;
  real _t10E3 = 0.1e-7;
  vec3 _t10E4 = [_t10E1, _t10E2, _t10E3];
  real _t10E5 = 0.e0;
  real _t10E6 = prim max0125 (time0FB3, _t10E5);
  vec3 _t10E7 = prim *0038<$[3]> (dPos0D23, _t10E6);
  vec3 _t10E8 = prim +0017<$[3]> (refPos0D22, _t10E7);
  vec3 _t10E9 = prim +0017<$[3]> (_t10E4, _t10E8);
  real _t10EA = _t10E9[2];
  real _t10EB = -0.e0;
  bool _t10EC = prim >0080 (_t10EA, _t10EB);
  bool _t10ED = prim $and01C4 (_t10E0, _t10EC);
  bool _t10EE = prim $and01C4 (_t10D4, _t10ED);
  bool _t10EF = prim $and01C4 (_t10C8, _t10EE);
  bool _t10F0 = prim $and01C4 (_t10BB, _t10EF);
  if _t10F0 {
    real _t10F1 = 0.e0;
    real _t10F2 = prim max0125 (time0FB3, _t10F1);
    real _t10F3 = (real)face0FB4;
    vec2 _t10F4 = [_t10F2, _t10F3];
    return _t10F4;
  } else {
    real _t10F5 = -inf;
    bool _t10F6 = prim ==0084 (_t10F5, faceTime0FB5);
    if _t10F6 {
      real _t10F7 = -0.1e1;
      real _t10F8 = -0.1e1;
      vec2 _t10F9 = [_t10F7, _t10F8];
      return _t10F9;
    } else {
      real _t10FA = 0.e0;
      real _t10FB = prim max0125 (faceTime0FB5, _t10FA);
      real _t10FC = (real)i0FB2;
      vec2 _t10FD = [_t10FB, _t10FC];
      return _t10FD;
    }
  }
}
function Femdata: Mesh#0 domain10FE (Femdata: Space arg010FF)
{
  Femdata: Mesh _t1100 = extractFem(arg010FF, Mesh);
  return _t1100;
}
function Femdata: Space#0 space1101 (Femdata: FemFunc arg01102)
{
  Femdata: Space _t1103 = extractFem(arg01102, Space);
  return _t1103;
}
function Femdata: FuncCell#0 funcCell1104 (Femdata: FemFunc arg01105, Femdata: MeshCell arg11106)
{
  int _t1107 = extractFemItem(CellIndex(MeshCell), int, arg11106);
  Femdata: FuncCell _t1108 = loadFem(FuncCell, arg01105, _t1107);
  return _t1108;
}
function bool#2 insideTest1116 (vec3 x1117)
{
  real _t1118 = 0.e0;
  real _t1119 = 0.e0;
  real _t111A = 0.e0;
  vec3 _t111B = [_t1118, _t1119, _t111A];
  vec3 mid111C = prim -0026<$[3]> (x1117, _t111B);
  bool _t111D;
  real _t111E = mid111C[0];
  real _t111F = prim |()|00B5<$[]> (_t111E);
  real _t1120 = 0.1e0;
  bool _t1121 = prim >0080 (_t111F, _t1120);
  if _t1121 {
    bool _t1122;
    real _t1123 = mid111C[1];
    real _t1124 = prim |()|00B5<$[]> (_t1123);
    real _t1125 = 0.1e0;
    bool _t1126 = prim >0080 (_t1124, _t1125);
    if _t1126 {
      real _t1127 = mid111C[2];
      real _t1128 = prim |()|00B5<$[]> (_t1127);
      real _t1129 = 0.1e0;
      _t1122 = prim >0080 (_t1128, _t1129);
    } else {
      _t1122 = false;
    }
    _t111D = _t1122;
  } else {
    _t111D = false;
  }
  bool z112A = _t111D;
  bool _t112B;
  real _t112C = prim |()|00B5<$[3]> (mid111C);
  real _t112D = 0.4e1;
  bool _t112E = prim <007A (_t112C, _t112D);
  if _t112E {
    real _t112F = prim |()|00B5<$[3]> (mid111C);
    real _t1130 = 0.3e1;
    _t112B = prim >0080 (_t112F, _t1130);
  } else {
    _t112B = false;
  }
  return _t112B;
}
function vec3#3 grad113E (vec3 s113F)
{
  real x1140 = s113F[0];
  real y1141 = s113F[1];
  real z1142 = s113F[2];
  real _t1143 = 0.2e1;
  real _t1144 = prim *0034 (_t1143, x1140);
  int _t1145 = 2;
  real _t1146 = prim ^0068 (z1142, _t1145);
  real _t1147 = prim *0034 (_t1144, _t1146);
  int _t1148 = 2;
  real _t1149 = prim ^0068 (x1140, _t1148);
  int _t114A = 2;
  real _t114B = prim ^0068 (y1141, _t114A);
  real _t114C = prim +0017<$[]> (_t1149, _t114B);
  int _t114D = 2;
  real _t114E = prim ^0068 (z1142, _t114D);
  real _t114F = prim +0017<$[]> (_t114C, _t114E);
  real _t1150 = prim cos0169 (_t114F);
  real _t1151 = prim *0034 (_t1147, _t1150);
  real _t1152 = 0.2e1;
  real _t1153 = prim *0034 (_t1152, y1141);
  int _t1154 = 2;
  real _t1155 = prim ^0068 (z1142, _t1154);
  real _t1156 = prim *0034 (_t1153, _t1155);
  int _t1157 = 2;
  real _t1158 = prim ^0068 (x1140, _t1157);
  int _t1159 = 2;
  real _t115A = prim ^0068 (y1141, _t1159);
  real _t115B = prim +0017<$[]> (_t1158, _t115A);
  int _t115C = 2;
  real _t115D = prim ^0068 (z1142, _t115C);
  real _t115E = prim +0017<$[]> (_t115B, _t115D);
  real _t115F = prim cos0169 (_t115E);
  real _t1160 = prim *0034 (_t1156, _t115F);
  real _t1161 = 0.2e1;
  int _t1162 = 3;
  real _t1163 = prim ^0068 (z1142, _t1162);
  real _t1164 = prim *0034 (_t1161, _t1163);
  int _t1165 = 2;
  real _t1166 = prim ^0068 (x1140, _t1165);
  int _t1167 = 2;
  real _t1168 = prim ^0068 (y1141, _t1167);
  real _t1169 = prim +0017<$[]> (_t1166, _t1168);
  int _t116A = 2;
  real _t116B = prim ^0068 (z1142, _t116A);
  real _t116C = prim +0017<$[]> (_t1169, _t116B);
  real _t116D = prim cos0169 (_t116C);
  real _t116E = prim *0034 (_t1164, _t116D);
  real _t116F = 0.2e1;
  real _t1170 = prim *0034 (_t116F, z1142);
  int _t1171 = 2;
  real _t1172 = prim ^0068 (x1140, _t1171);
  int _t1173 = 2;
  real _t1174 = prim ^0068 (y1141, _t1173);
  real _t1175 = prim +0017<$[]> (_t1172, _t1174);
  int _t1176 = 2;
  real _t1177 = prim ^0068 (z1142, _t1176);
  real _t1178 = prim +0017<$[]> (_t1175, _t1177);
  real _t1179 = prim sin0171 (_t1178);
  real _t117A = prim *0034 (_t1170, _t1179);
  real _t117B = prim +0017<$[]> (_t116E, _t117A);
  vec3 g117C = [_t1151, _t1160, _t117B];
  return g117C;
}
function tensor[3,3]#3 hess117D (vec3 s117E)
{
  real x117F = s117E[0];
  real y1180 = s117E[1];
  real z1181 = s117E[2];
  int _t1182 = -4;
  real _t1183 = (real)_t1182;
  int _t1184 = 2;
  real _t1185 = prim ^0068 (x117F, _t1184);
  real _t1186 = prim *0034 (_t1183, _t1185);
  int _t1187 = 2;
  real _t1188 = prim ^0068 (z1181, _t1187);
  real _t1189 = prim *0034 (_t1186, _t1188);
  int _t118A = 2;
  real _t118B = prim ^0068 (x117F, _t118A);
  int _t118C = 2;
  real _t118D = prim ^0068 (y1180, _t118C);
  real _t118E = prim +0017<$[]> (_t118B, _t118D);
  int _t118F = 2;
  real _t1190 = prim ^0068 (z1181, _t118F);
  real _t1191 = prim +0017<$[]> (_t118E, _t1190);
  real _t1192 = prim sin0171 (_t1191);
  real _t1193 = prim *0034 (_t1189, _t1192);
  real _t1194 = 0.2e1;
  int _t1195 = 2;
  real _t1196 = prim ^0068 (z1181, _t1195);
  real _t1197 = prim *0034 (_t1194, _t1196);
  int _t1198 = 2;
  real _t1199 = prim ^0068 (x117F, _t1198);
  int _t119A = 2;
  real _t119B = prim ^0068 (y1180, _t119A);
  real _t119C = prim +0017<$[]> (_t1199, _t119B);
  int _t119D = 2;
  real _t119E = prim ^0068 (z1181, _t119D);
  real _t119F = prim +0017<$[]> (_t119C, _t119E);
  real _t11A0 = prim cos0169 (_t119F);
  real _t11A1 = prim *0034 (_t1197, _t11A0);
  real _t11A2 = prim +0017<$[]> (_t1193, _t11A1);
  int _t11A3 = -4;
  real _t11A4 = (real)_t11A3;
  real _t11A5 = prim *0034 (_t11A4, x117F);
  real _t11A6 = prim *0034 (_t11A5, y1180);
  int _t11A7 = 2;
  real _t11A8 = prim ^0068 (z1181, _t11A7);
  real _t11A9 = prim *0034 (_t11A6, _t11A8);
  int _t11AA = 2;
  real _t11AB = prim ^0068 (x117F, _t11AA);
  int _t11AC = 2;
  real _t11AD = prim ^0068 (y1180, _t11AC);
  real _t11AE = prim +0017<$[]> (_t11AB, _t11AD);
  int _t11AF = 2;
  real _t11B0 = prim ^0068 (z1181, _t11AF);
  real _t11B1 = prim +0017<$[]> (_t11AE, _t11B0);
  real _t11B2 = prim sin0171 (_t11B1);
  real _t11B3 = prim *0034 (_t11A9, _t11B2);
  int _t11B4 = -4;
  real _t11B5 = (real)_t11B4;
  real _t11B6 = prim *0034 (_t11B5, x117F);
  int _t11B7 = 3;
  real _t11B8 = prim ^0068 (z1181, _t11B7);
  real _t11B9 = prim *0034 (_t11B6, _t11B8);
  int _t11BA = 2;
  real _t11BB = prim ^0068 (x117F, _t11BA);
  int _t11BC = 2;
  real _t11BD = prim ^0068 (y1180, _t11BC);
  real _t11BE = prim +0017<$[]> (_t11BB, _t11BD);
  int _t11BF = 2;
  real _t11C0 = prim ^0068 (z1181, _t11BF);
  real _t11C1 = prim +0017<$[]> (_t11BE, _t11C0);
  real _t11C2 = prim sin0171 (_t11C1);
  real _t11C3 = prim *0034 (_t11B9, _t11C2);
  real _t11C4 = 0.4e1;
  real _t11C5 = prim *0034 (_t11C4, x117F);
  real _t11C6 = prim *0034 (_t11C5, z1181);
  int _t11C7 = 2;
  real _t11C8 = prim ^0068 (x117F, _t11C7);
  int _t11C9 = 2;
  real _t11CA = prim ^0068 (y1180, _t11C9);
  real _t11CB = prim +0017<$[]> (_t11C8, _t11CA);
  int _t11CC = 2;
  real _t11CD = prim ^0068 (z1181, _t11CC);
  real _t11CE = prim +0017<$[]> (_t11CB, _t11CD);
  real _t11CF = prim cos0169 (_t11CE);
  real _t11D0 = prim *0034 (_t11C6, _t11CF);
  real _t11D1 = prim +0017<$[]> (_t11C3, _t11D0);
  vec3 _t11D2 = [_t11A2, _t11B3, _t11D1];
  int _t11D3 = -4;
  real _t11D4 = (real)_t11D3;
  real _t11D5 = prim *0034 (_t11D4, x117F);
  real _t11D6 = prim *0034 (_t11D5, y1180);
  int _t11D7 = 2;
  real _t11D8 = prim ^0068 (z1181, _t11D7);
  real _t11D9 = prim *0034 (_t11D6, _t11D8);
  int _t11DA = 2;
  real _t11DB = prim ^0068 (x117F, _t11DA);
  int _t11DC = 2;
  real _t11DD = prim ^0068 (y1180, _t11DC);
  real _t11DE = prim +0017<$[]> (_t11DB, _t11DD);
  int _t11DF = 2;
  real _t11E0 = prim ^0068 (z1181, _t11DF);
  real _t11E1 = prim +0017<$[]> (_t11DE, _t11E0);
  real _t11E2 = prim sin0171 (_t11E1);
  real _t11E3 = prim *0034 (_t11D9, _t11E2);
  int _t11E4 = -4;
  real _t11E5 = (real)_t11E4;
  int _t11E6 = 2;
  real _t11E7 = prim ^0068 (y1180, _t11E6);
  real _t11E8 = prim *0034 (_t11E5, _t11E7);
  int _t11E9 = 2;
  real _t11EA = prim ^0068 (z1181, _t11E9);
  real _t11EB = prim *0034 (_t11E8, _t11EA);
  int _t11EC = 2;
  real _t11ED = prim ^0068 (x117F, _t11EC);
  int _t11EE = 2;
  real _t11EF = prim ^0068 (y1180, _t11EE);
  real _t11F0 = prim +0017<$[]> (_t11ED, _t11EF);
  int _t11F1 = 2;
  real _t11F2 = prim ^0068 (z1181, _t11F1);
  real _t11F3 = prim +0017<$[]> (_t11F0, _t11F2);
  real _t11F4 = prim sin0171 (_t11F3);
  real _t11F5 = prim *0034 (_t11EB, _t11F4);
  real _t11F6 = 0.2e1;
  int _t11F7 = 2;
  real _t11F8 = prim ^0068 (z1181, _t11F7);
  real _t11F9 = prim *0034 (_t11F6, _t11F8);
  int _t11FA = 2;
  real _t11FB = prim ^0068 (x117F, _t11FA);
  int _t11FC = 2;
  real _t11FD = prim ^0068 (y1180, _t11FC);
  real _t11FE = prim +0017<$[]> (_t11FB, _t11FD);
  int _t11FF = 2;
  real _t1200 = prim ^0068 (z1181, _t11FF);
  real _t1201 = prim +0017<$[]> (_t11FE, _t1200);
  real _t1202 = prim cos0169 (_t1201);
  real _t1203 = prim *0034 (_t11F9, _t1202);
  real _t1204 = prim +0017<$[]> (_t11F5, _t1203);
  int _t1205 = -4;
  real _t1206 = (real)_t1205;
  real _t1207 = prim *0034 (_t1206, y1180);
  int _t1208 = 3;
  real _t1209 = prim ^0068 (z1181, _t1208);
  real _t120A = prim *0034 (_t1207, _t1209);
  int _t120B = 2;
  real _t120C = prim ^0068 (x117F, _t120B);
  int _t120D = 2;
  real _t120E = prim ^0068 (y1180, _t120D);
  real _t120F = prim +0017<$[]> (_t120C, _t120E);
  int _t1210 = 2;
  real _t1211 = prim ^0068 (z1181, _t1210);
  real _t1212 = prim +0017<$[]> (_t120F, _t1211);
  real _t1213 = prim sin0171 (_t1212);
  real _t1214 = prim *0034 (_t120A, _t1213);
  real _t1215 = 0.4e1;
  real _t1216 = prim *0034 (_t1215, y1180);
  real _t1217 = prim *0034 (_t1216, z1181);
  int _t1218 = 2;
  real _t1219 = prim ^0068 (x117F, _t1218);
  int _t121A = 2;
  real _t121B = prim ^0068 (y1180, _t121A);
  real _t121C = prim +0017<$[]> (_t1219, _t121B);
  int _t121D = 2;
  real _t121E = prim ^0068 (z1181, _t121D);
  real _t121F = prim +0017<$[]> (_t121C, _t121E);
  real _t1220 = prim cos0169 (_t121F);
  real _t1221 = prim *0034 (_t1217, _t1220);
  real _t1222 = prim +0017<$[]> (_t1214, _t1221);
  vec3 _t1223 = [_t11E3, _t1204, _t1222];
  int _t1224 = -4;
  real _t1225 = (real)_t1224;
  real _t1226 = prim *0034 (_t1225, x117F);
  int _t1227 = 3;
  real _t1228 = prim ^0068 (z1181, _t1227);
  real _t1229 = prim *0034 (_t1226, _t1228);
  int _t122A = 2;
  real _t122B = prim ^0068 (x117F, _t122A);
  int _t122C = 2;
  real _t122D = prim ^0068 (y1180, _t122C);
  real _t122E = prim +0017<$[]> (_t122B, _t122D);
  int _t122F = 2;
  real _t1230 = prim ^0068 (z1181, _t122F);
  real _t1231 = prim +0017<$[]> (_t122E, _t1230);
  real _t1232 = prim sin0171 (_t1231);
  real _t1233 = prim *0034 (_t1229, _t1232);
  real _t1234 = 0.4e1;
  real _t1235 = prim *0034 (_t1234, x117F);
  real _t1236 = prim *0034 (_t1235, z1181);
  int _t1237 = 2;
  real _t1238 = prim ^0068 (x117F, _t1237);
  int _t1239 = 2;
  real _t123A = prim ^0068 (y1180, _t1239);
  real _t123B = prim +0017<$[]> (_t1238, _t123A);
  int _t123C = 2;
  real _t123D = prim ^0068 (z1181, _t123C);
  real _t123E = prim +0017<$[]> (_t123B, _t123D);
  real _t123F = prim cos0169 (_t123E);
  real _t1240 = prim *0034 (_t1236, _t123F);
  real _t1241 = prim +0017<$[]> (_t1233, _t1240);
  int _t1242 = -4;
  real _t1243 = (real)_t1242;
  real _t1244 = prim *0034 (_t1243, y1180);
  int _t1245 = 3;
  real _t1246 = prim ^0068 (z1181, _t1245);
  real _t1247 = prim *0034 (_t1244, _t1246);
  int _t1248 = 2;
  real _t1249 = prim ^0068 (x117F, _t1248);
  int _t124A = 2;
  real _t124B = prim ^0068 (y1180, _t124A);
  real _t124C = prim +0017<$[]> (_t1249, _t124B);
  int _t124D = 2;
  real _t124E = prim ^0068 (z1181, _t124D);
  real _t124F = prim +0017<$[]> (_t124C, _t124E);
  real _t1250 = prim sin0171 (_t124F);
  real _t1251 = prim *0034 (_t1247, _t1250);
  real _t1252 = 0.4e1;
  real _t1253 = prim *0034 (_t1252, y1180);
  real _t1254 = prim *0034 (_t1253, z1181);
  int _t1255 = 2;
  real _t1256 = prim ^0068 (x117F, _t1255);
  int _t1257 = 2;
  real _t1258 = prim ^0068 (y1180, _t1257);
  real _t1259 = prim +0017<$[]> (_t1256, _t1258);
  int _t125A = 2;
  real _t125B = prim ^0068 (z1181, _t125A);
  real _t125C = prim +0017<$[]> (_t1259, _t125B);
  real _t125D = prim cos0169 (_t125C);
  real _t125E = prim *0034 (_t1254, _t125D);
  real _t125F = prim +0017<$[]> (_t1251, _t125E);
  int _t1260 = -4;
  real _t1261 = (real)_t1260;
  int _t1262 = 4;
  real _t1263 = prim ^0068 (z1181, _t1262);
  real _t1264 = prim *0034 (_t1261, _t1263);
  int _t1265 = 2;
  real _t1266 = prim ^0068 (x117F, _t1265);
  int _t1267 = 2;
  real _t1268 = prim ^0068 (y1180, _t1267);
  real _t1269 = prim +0017<$[]> (_t1266, _t1268);
  int _t126A = 2;
  real _t126B = prim ^0068 (z1181, _t126A);
  real _t126C = prim +0017<$[]> (_t1269, _t126B);
  real _t126D = prim sin0171 (_t126C);
  real _t126E = prim *0034 (_t1264, _t126D);
  real _t126F = 0.1e2;
  int _t1270 = 2;
  real _t1271 = prim ^0068 (z1181, _t1270);
  real _t1272 = prim *0034 (_t126F, _t1271);
  int _t1273 = 2;
  real _t1274 = prim ^0068 (x117F, _t1273);
  int _t1275 = 2;
  real _t1276 = prim ^0068 (y1180, _t1275);
  real _t1277 = prim +0017<$[]> (_t1274, _t1276);
  int _t1278 = 2;
  real _t1279 = prim ^0068 (z1181, _t1278);
  real _t127A = prim +0017<$[]> (_t1277, _t1279);
  real _t127B = prim cos0169 (_t127A);
  real _t127C = prim *0034 (_t1272, _t127B);
  real _t127D = prim +0017<$[]> (_t126E, _t127C);
  real _t127E = 0.2e1;
  int _t127F = 2;
  real _t1280 = prim ^0068 (x117F, _t127F);
  int _t1281 = 2;
  real _t1282 = prim ^0068 (y1180, _t1281);
  real _t1283 = prim +0017<$[]> (_t1280, _t1282);
  int _t1284 = 2;
  real _t1285 = prim ^0068 (z1181, _t1284);
  real _t1286 = prim +0017<$[]> (_t1283, _t1285);
  real _t1287 = prim sin0171 (_t1286);
  real _t1288 = prim *0034 (_t127E, _t1287);
  real _t1289 = prim +0017<$[]> (_t127D, _t1288);
  vec3 _t128A = [_t1241, _t125F, _t1289];
  tensor[3,3] hess128B = [_t11D2, _t1223, _t128A];
  return hess128B;
}
function vec3#6 fStep128C (vec3 s128D)
{
  vec3 g128E = func grad113E (s128D);
  tensor[3,3] H128F = func hess117D (s128D);
  vec3[3] E1290 = prim evecs00A0 (H128F);
  real[3] L1291 = prim evals009F (H128F);
  real _t1292 = 0.1e1;
  int _t1293 = 2;
  real _t1294 = prim $sub01C0<real; %3> (L1291, _t1293);
  real _t1295 = prim /0055 (_t1292, _t1294);
  real _t1296 = prim unary -008B<$[]> (_t1295);
  int _t1297 = 2;
  vec3 _t1298 = prim $sub01C0<vec3; %3> (E1290, _t1297);
  vec3 _t1299 = prim *0036<$[3]> (_t1296, _t1298);
  int _t129A = 2;
  vec3 _t129B = prim $sub01C0<vec3; %3> (E1290, _t129A);
  tensor[3,3] _t129C = prim ⊗00E5<$[3]; $[3]; $[3,3]> (_t1299, _t129B);
  vec3 up129D = prim •00CE<$[3,3]; $[3]; $[3]> (_t129C, g128E);
  bool _t129E;
  real _t129F = up129D[0];
  real _t12A0 = up129D[0];
  bool _t12A1 = prim ==0084 (_t129F, _t12A0);
  bool _t12A2 = prim !00BC (_t12A1);
  if _t12A2 {
    _t129E = true;
  } else {
    bool _t12A3;
    real _t12A4 = up129D[1];
    real _t12A5 = up129D[1];
    bool _t12A6 = prim ==0084 (_t12A4, _t12A5);
    bool _t12A7 = prim !00BC (_t12A6);
    if _t12A7 {
      _t12A3 = true;
    } else {
      real _t12A8 = up129D[2];
      real _t12A9 = up129D[2];
      bool _t12AA = prim ==0084 (_t12A8, _t12A9);
      _t12A3 = prim !00BC (_t12AA);
    }
    _t129E = _t12A3;
  }
  if _t129E {
    real _t12AB = +inf;
    real _t12AC = +inf;
    real _t12AD = +inf;
    vec3 _t12AE = [_t12AB, _t12AC, _t12AD];
    return _t12AE;
  }
  return up129D;
}
function bool#0 posNanCheck12AF (vec3 up12B0)
{
  bool _t12B1;
  real _t12B2 = up12B0[0];
  real _t12B3 = up12B0[0];
  bool _t12B4 = prim ==0084 (_t12B2, _t12B3);
  bool _t12B5 = prim !00BC (_t12B4);
  if _t12B5 {
    _t12B1 = true;
  } else {
    bool _t12B6;
    real _t12B7 = up12B0[1];
    real _t12B8 = up12B0[1];
    bool _t12B9 = prim ==0084 (_t12B7, _t12B8);
    bool _t12BA = prim !00BC (_t12B9);
    if _t12BA {
      _t12B6 = true;
    } else {
      real _t12BB = up12B0[2];
      real _t12BC = up12B0[2];
      bool _t12BD = prim ==0084 (_t12BB, _t12BC);
      _t12B6 = prim !00BC (_t12BD);
    }
    _t12B1 = _t12B6;
  }
  return _t12B1;
}
function tensor[3,3]#4 fPerp12BE (vec3 s12BF)
{
  vec3 g12C0 = func grad113E (s12BF);
  tensor[3,3] H12C1 = func hess117D (s12BF);
  vec3[3] _t12C2 = prim evecs00A0 (H12C1);
  int _t12C3 = 2;
  vec3 E212C4 = prim $sub01C0<vec3; %3> (_t12C2, _t12C3);
  tensor[3,3] _t12C5 = prim $id01B9<%3> ();
  tensor[3,3] _t12C6 = prim ⊗00E5<$[3]; $[3]; $[3,3]> (E212C4, E212C4);
  tensor[3,3] m12C7 = prim -0026<$[3,3]> (_t12C5, _t12C6);
  real t12C8 = prim :00FC<$[3,3]; $[3,3]; $[]> (m12C7, m12C7);
  bool _t12C9 = prim ==0084 (t12C8, t12C8);
  bool _t12CA = prim !00BC (_t12C9);
  if _t12CA {
    tensor[3,3] _t12CB = prim $zero01BB<$[3,3]> ();
    return _t12CB;
  }
  return m12C7;
}
function real#2 fStrength12CC (vec3 s12CD)
{
  vec3 g12CE = func grad113E (s12CD);
  tensor[3,3] H12CF = func hess117D (s12CD);
  real[3] _t12D0 = prim evals009F (H12CF);
  int _t12D1 = 2;
  real _t12D2 = prim $sub01C0<real; %3> (_t12D0, _t12D1);
  real _t12D3 = prim unary -008B<$[]> (_t12D2);
  real _t12D4 = prim |()|00B5<$[3]> (g12CE);
  real _t12D5 = prim +0017<$[]> (fBias07CC, _t12D4);
  real str12D6 = prim /0055 (_t12D3, _t12D5);
  return str12D6;
}
function real#2 fMask12D7 (vec3 x12D8)
{
  real _t12D9 = 0.e0;
  return _t12D9;
}
function bool#2 fTest12DA (vec3 x12DB)
{
  bool _t12DC = true;
  return _t12DC;
}
function bool#3 posTest12DD (vec3 x12DE)
{
  bool _t12DF;
  bool _t12E0 = func insideTest1116 (x12DE);
  if _t12E0 {
    bool _t12E1;
    real _t12E2 = func fStrength12CC (x12DE);
    bool _t12E3 = prim >0080 (_t12E2, fStrTh07CA);
    if _t12E3 {
      bool _t12E4;
      real _t12E5 = func fMask12D7 (x12DE);
      bool _t12E6 = prim >=007E (_t12E5, fMaskTh07CB);
      if _t12E6 {
        _t12E4 = func fTest12DA (x12DE);
      } else {
        _t12E4 = false;
      }
      _t12E1 = _t12E4;
    } else {
      _t12E1 = false;
    }
    _t12DF = _t12E1;
  } else {
    _t12DF = false;
  }
  return _t12DF;
}
function real#1 phi12F5 (real r12F6)
{
  real _t12F7 = 0.2e1;
  real _t12F8 = 0.3e1;
  real _t12F9 = prim /0055 (_t12F7, _t12F8);
  real s12FA = prim -0026<$[]> (r12F6, _t12F9);
  real _t12FB;
  real _t12FC = 0.2e1;
  real _t12FD = 0.3e1;
  real _t12FE = prim /0055 (_t12FC, _t12FD);
  bool _t12FF = prim <007A (r12F6, _t12FE);
  if _t12FF {
    real _t1300 = 0.1e1;
    real _t1301 = -0.5646e1;
    real _t1302 = 0.119835e2;
    real _t1303 = -0.113535e2;
    real _t1304 = 0.40550625e1;
    real _t1305 = prim *0034 (_t1304, r12F6);
    real _t1306 = prim +0017<$[]> (_t1303, _t1305);
    real _t1307 = prim *0034 (r12F6, _t1306);
    real _t1308 = prim +0017<$[]> (_t1302, _t1307);
    real _t1309 = prim *0034 (r12F6, _t1308);
    real _t130A = prim +0017<$[]> (_t1301, _t1309);
    real _t130B = prim *0034 (r12F6, _t130A);
    _t12FB = prim +0017<$[]> (_t1300, _t130B);
  } else {
    real _t130C;
    real _t130D = 0.1e1;
    bool _t130E = prim <007A (r12F6, _t130D);
    if _t130E {
      real _t130F = -0.1e-2;
      real _t1310 = 0.9e-1;
      real _t1311 = -0.54e0;
      real _t1312 = 0.1215e1;
      real _t1313 = 0.972e0;
      real _t1314 = prim *0034 (_t1313, s12FA);
      real _t1315 = prim -0026<$[]> (_t1312, _t1314);
      real _t1316 = prim *0034 (_t1315, s12FA);
      real _t1317 = prim +0017<$[]> (_t1311, _t1316);
      real _t1318 = prim *0034 (_t1317, s12FA);
      real _t1319 = prim +0017<$[]> (_t1310, _t1318);
      real _t131A = prim *0034 (_t1319, s12FA);
      real _t131B = prim *0034 (_t131A, s12FA);
      _t130C = prim +0017<$[]> (_t130F, _t131B);
    } else {
      _t130C = 0.e0;
    }
    _t12FB = _t130C;
  }
  return _t12FB;
}
function real#1 phi'131C (real r131D)
{
  real _t131E = 0.3e1;
  real _t131F = prim *0034 (_t131E, r131D);
  real _t1320 = 0.2e1;
  real t1321 = prim -0026<$[]> (_t131F, _t1320);
  real _t1322;
  real _t1323 = 0.2e1;
  real _t1324 = 0.3e1;
  real _t1325 = prim /0055 (_t1323, _t1324);
  bool _t1326 = prim <007A (r131D, _t1325);
  if _t1326 {
    real _t1327 = -0.5646e1;
    real _t1328 = 0.23967e2;
    real _t1329 = -0.340605e2;
    real _t132A = 0.1622025e2;
    real _t132B = prim *0034 (_t132A, r131D);
    real _t132C = prim +0017<$[]> (_t1329, _t132B);
    real _t132D = prim *0034 (r131D, _t132C);
    real _t132E = prim +0017<$[]> (_t1328, _t132D);
    real _t132F = prim *0034 (r131D, _t132E);
    _t1322 = prim +0017<$[]> (_t1327, _t132F);
  } else {
    real _t1330;
    real _t1331 = 0.1e1;
    bool _t1332 = prim <007A (r131D, _t1331);
    if _t1332 {
      real _t1333 = 0.1234567901e-1;
      real _t1334 = prim *0034 (_t1333, t1321);
      real _t1335 = 0.486e1;
      real _t1336 = -0.1458e2;
      real _t1337 = 0.1458e2;
      real _t1338 = 0.486e1;
      real _t1339 = prim *0034 (_t1338, t1321);
      real _t133A = prim -0026<$[]> (_t1337, _t1339);
      real _t133B = prim *0034 (t1321, _t133A);
      real _t133C = prim +0017<$[]> (_t1336, _t133B);
      real _t133D = prim *0034 (t1321, _t133C);
      real _t133E = prim +0017<$[]> (_t1335, _t133D);
      _t1330 = prim *0034 (_t1334, _t133E);
    } else {
      _t1330 = 0.e0;
    }
    _t1322 = _t1330;
  }
  return _t1322;
}
function real#2 enr1343 (vec3 x1344)
{
  real _t1345 = prim |()|00B5<$[3]> (x1344);
  real _t1346 = prim /0055 (_t1345, rad1342);
  real _t1347 = func phi12F5 (_t1346);
  return _t1347;
}
function vec3#1 frc1348 (vec3 x1349)
{
  real _t134A = prim |()|00B5<$[3]> (x1349);
  real _t134B = prim /0055 (_t134A, rad1342);
  real _t134C = func phi'131C (_t134B);
  real _t134D = 0.1e1;
  real _t134E = prim /0055 (_t134D, rad1342);
  real _t134F = prim *0034 (_t134C, _t134E);
  vec3 _t1350 = prim *0036<$[3]> (_t134F, x1349);
  real _t1351 = prim |()|00B5<$[3]> (x1349);
  vec3 _t1352 = prim /0057<$[3]> (_t1350, _t1351);
  return _t1352;
}
function real#3 urnd135C (real x135D)
{
  real _t135E = 0.e0;
  bool _t135F = prim ==0084 (x135D, _t135E);
  if _t135F {
    real _t1360 = 0.e0;
    return _t1360;
  }
  real _t1361 = prim |()|00B5<$[]> (x135D);
  real l21362 = prim log2018D (_t1361);
  real _t1363 = 0.2e1;
  real _t1364 = prim floor0189 (l21362);
  real _t1365 = prim -0026<$[]> (l21362, _t1364);
  real _t1366 = 0.1e1;
  real _t1367 = prim -0026<$[]> (_t1365, _t1366);
  real frxp1368 = prim ^0069 (_t1363, _t1367);
  real _t1369 = 0.2e1;
  int _t136A = 20;
  real _t136B = prim ^0068 (_t1369, _t136A);
  int _t136C = 2;
  int _t136D = prim *0033 (_t136C, iter1359);
  real _t136E = (real)_t136D;
  real _t136F = prim +0017<$[]> (_t136B, _t136E);
  real _t1370 = prim *0034 (_t136F, frxp1368);
  real _t1371 = 0.1e1;
  real _t1372 = prim fmod018A (_t1370, _t1371);
  return _t1372;
}
function real#3 v3rnd1373 (vec3 v1374)
{
  real _t1375 = v1374[0];
  real _t1376 = func urnd135C (_t1375);
  real _t1377 = v1374[1];
  real _t1378 = func urnd135C (_t1377);
  real _t1379 = prim +0017<$[]> (_t1376, _t1378);
  real _t137A = v1374[2];
  real _t137B = func urnd135C (_t137A);
  real _t137C = prim +0017<$[]> (_t1379, _t137B);
  real _t137D = 0.1e1;
  real _t137E = prim fmod018A (_t137C, _t137D);
  return _t137E;
}
function real#2 genID137F (vec3 v1380)
{
  real _t1381 = 0.1e7;
  real _t1382 = func v3rnd1373 (v1380);
  real _t1383 = prim *0034 (_t1381, _t1382);
  real _t1384 = prim floor0189 (_t1383);
  return _t1384;
}
function int#4 pcIter1385 ()
{
  bool _t1386;
  int _t1387 = 0;
  bool _t1388 = prim >007F (pcp07DD, _t1387);
  if _t1388 {
    bool _t1389;
    int _t138A = 0;
    bool _t138B = prim >007F (iter1359, _t138A);
    if _t138B {
      int _t138C = 0;
      int _t138D = prim %00A1 (iter1359, pcp07DD);
      _t1389 = prim ==0082 (_t138C, _t138D);
    } else {
      _t1389 = false;
    }
    _t1386 = _t1389;
  } else {
    _t1386 = false;
  }
  if _t1386 {
    int _t138E = prim /0054 (iter1359, pcp07DD);
    int _t138F = 2;
    int _t1390 = prim %00A1 (_t138E, _t138F);
    int _t1391 = 2;
    int _t1392 = prim *0033 (_t1390, _t1391);
    int _t1393 = 1;
    int _t1394 = prim -0024 (_t1392, _t1393);
    return _t1394;
  } else {
    int _t1395 = 0;
    return _t1395;
  }
}
globalInit {
  int _t07BE = 0;
  int _t07BC = 1;
  int _t07C0 = extractFemItem(NumCell(Mesh), int, meshData07BA);
  int _t07BF = prim -0024 (_t07C0, _t07BC);
  int[] _t07C3 = prim $range01C3 (_t07BE, _t07BF);
  Femdata: MeshCell[] _t07C4 = {};
  foreach _t07C2 in _t07C3 {
    Femdata: MeshCell _t07C5 = loadFem(MeshCell, meshData07BA, _t07C2);
    _t07C4 = prim @0010<Femdata: MeshCell> (_t07C4, _t07C5);
  }
  simplex1115 = func refcell0836 (meshData07BA);
  int _t12E7;
  int _t12E8 = 2;
  bool _t12E9 = prim ==0082 (_t12E8, fDim07DF);
  if _t12E9 {
    _t12E7 = 6;
  } else {
    int _t12EA;
    int _t12EB = 1;
    bool _t12EC = prim ==0082 (_t12EB, fDim07DF);
    if _t12EC {
      _t12EA = 2;
    } else {
      _t12EA = 0;
    }
    _t12E7 = _t12EA;
  }
  nnmin12ED = _t12E7;
  int _t12EE;
  int _t12EF = 2;
  bool _t12F0 = prim ==0082 (_t12EF, fDim07DF);
  if _t12F0 {
    _t12EE = 8;
  } else {
    int _t12F1;
    int _t12F2 = 1;
    bool _t12F3 = prim ==0082 (_t12F2, fDim07DF);
    if _t12F3 {
      _t12F1 = 3;
    } else {
      _t12F1 = 0;
    }
    _t12EE = _t12F1;
  }
  nnmax12F4 = _t12EE;
  real _t133F = 0.2e1;
  real _t1340 = 0.3e1;
  phiWellRad1341 = prim /0055 (_t133F, _t1340);
  rad1342 = prim /0055 (tipd07CD, phiWellRad1341);
  real _t1353 = 0.1e1;
  int _t1354 = 2;
  int _t1355 = prim *0033 (_t1354, pcp07DD);
  real _t1356 = (real)_t1355;
  real _t1357 = prim /0055 (_t1353, _t1356);
  pchist1358 = prim ^0069 (hist07DC, _t1357);
  iter1359 = 0;
  rpc135A = 0.1e1;
  popLast135B = -1;
}
strand point (vec3 p01396, real hh01397) in 3D {
  output vec3 pos1398;
  output vec3 _pos1399;
  real ID139A;
  real hh139B;
  vec3 step139C;
  bool found13A0;
  int nfs13A1;
  real trav13A2;
  real mvmt13A3;
  real closest13A4;
  int born13A5;
  bool first13A6;
  {
    pos1398 = p01396;
    _pos1399 = pos1398;
    ID139A = func genID137F (p01396);
    hh139B = hh01397;
    real _t139D = 0.e0;
    real _t139E = 0.e0;
    real _t139F = 0.e0;
    step139C = [_t139D, _t139E, _t139F];
    found13A0 = false;
    nfs13A1 = 0;
    trav13A2 = 0.e0;
    mvmt13A3 = 0.1e1;
    closest13A4 = rad1342;
    born13A5 = 0;
    first13A6 = true;
  }
  update
  {
    bool vv13A7 = false;
    if first13A6 {
      bool _t13A8;
      bool _t13A9;
      int _t13AA = 0;
      bool _t13AB = prim >007F (verb07DA, _t13AA);
      if _t13AB {
        _t13A9 = vv13A7;
      } else {
        _t13A9 = false;
      }
      if _t13A9 {
        _t13A8 = true;
      } else {
        int _t13AC = 1;
        _t13A8 = prim >007F (verb07DA, _t13AC);
      }
      if _t13A8 {
        string _t13AD = "(i#";
        string _t13AE = " @ ";
        string _t13AF = "): ";
        print (ID139A, _t13AD, iter1359, _t13AE, pos1398, _t13AF);
        string _t13B0 = " HELLO!\n";
        print (_t13B0);
      }
    }
    bool _t13B1 = func posTest12DD (pos1398);
    bool _t13B2 = prim !00BC (_t13B1);
    if _t13B2 {
      bool _t13B3;
      bool _t13B4;
      int _t13B5 = 0;
      bool _t13B6 = prim >007F (verb07DA, _t13B5);
      if _t13B6 {
        _t13B4 = vv13A7;
      } else {
        _t13B4 = false;
      }
      if _t13B4 {
        _t13B3 = true;
      } else {
        int _t13B7 = 1;
        _t13B3 = prim >007F (verb07DA, _t13B7);
      }
      if _t13B3 {
        string _t13B8 = "(i#";
        string _t13B9 = " @ ";
        string _t13BA = "): ";
        print (ID139A, _t13B8, iter1359, _t13B9, pos1398, _t13BA);
        string _t13BB = "!inside=";
        bool _t13BC = func insideTest1116 (pos1398);
        string _t13BD = " || fStrength=";
        real _t13BE = func fStrength12CC (pos1398);
        string _t13BF = " <= fStrTh=";
        string _t13C0 = " || fMask(pos)=";
        real _t13C1 = func fMask12D7 (pos1398);
        string _t13C2 = " < fMaskTh=";
        string _t13C3 = " || fTest(pos)=";
        bool _t13C4 = func fTest12DA (pos1398);
        string _t13C5 = " ==>DIE\n";
        print (_t13BB, _t13BC, _t13BD, _t13BE, _t13BF, fStrTh07CA, _t13C0, _t13C1, _t13C2, fMaskTh07CB, _t13C3, _t13C4, _t13C5);
      }
      die;
    }
    real _t13C6 = 0.e0;
    bool _t13C7 = prim >0080 (travMax07CF, _t13C6);
    if _t13C7 {
      bool _t13C8 = prim >0080 (trav13A2, travMax07CF);
      if _t13C8 {
        die;
      }
    }
    bool _t13C9 = prim !00BC (found13A0);
    if _t13C9 {
      int _t13CA = 0;
      bool _t13CB = prim >007F (nfsMax07D0, _t13CA);
      if _t13CB {
        bool _t13CC = prim >007F (nfs13A1, nfsMax07D0);
        if _t13CC {
          bool _t13CD;
          bool _t13CE;
          int _t13CF = 0;
          bool _t13D0 = prim >007F (verb07DA, _t13CF);
          if _t13D0 {
            _t13CE = vv13A7;
          } else {
            _t13CE = false;
          }
          if _t13CE {
            _t13CD = true;
          } else {
            int _t13D1 = 1;
            _t13CD = prim >007F (verb07DA, _t13D1);
          }
          if _t13CD {
            string _t13D2 = "(i#";
            string _t13D3 = " @ ";
            string _t13D4 = "): ";
            print (ID139A, _t13D2, iter1359, _t13D3, pos1398, _t13D4);
            string _t13D5 = "nfs=";
            string _t13D6 = " > nfsMax=";
            string _t13D7 = " || trav=";
            string _t13D8 = " > travMax=";
            string _t13D9 = " =>DIE\n";
            print (_t13D5, nfs13A1, _t13D6, nfsMax07D0, _t13D7, trav13A2, _t13D8, travMax07CF, _t13D9);
          }
          die;
        }
      }
      vec3 _t13DA = func fStep128C (pos1398);
      step139C = prim *0036<$[3]> (sfs07DB, _t13DA);
      pos1398 = prim +0017<$[3]> (pos1398, step139C);
      _pos1399 = pos1398;
      real _t13DB = prim |()|00B5<$[3]> (step139C);
      real _t13DC = prim /0055 (_t13DB, tipd07CD);
      mvmt13A3 = prim lerp0096<$[]> (_t13DC, mvmt13A3, hist07DC);
      bool _t13DD = prim >0080 (mvmt13A3, fsEps07D4);
      if _t13DD {
        real _t13DE = prim |()|00B5<$[3]> (step139C);
        real _t13DF = prim /0055 (_t13DE, tipd07CD);
        trav13A2 = prim +0017<$[]> (trav13A2, _t13DF);
        int _t13E0 = 1;
        nfs13A1 = prim +0015 (nfs13A1, _t13E0);
      } else {
        found13A0 = true;
        mvmt13A3 = 0.1e1;
        trav13A2 = 0.e0;
      }
      bool _t13E1;
      bool _t13E2;
      int _t13E3 = 0;
      bool _t13E4 = prim >007F (verb07DA, _t13E3);
      if _t13E4 {
        _t13E2 = vv13A7;
      } else {
        _t13E2 = false;
      }
      if _t13E2 {
        _t13E1 = true;
      } else {
        int _t13E5 = 1;
        _t13E1 = prim >007F (verb07DA, _t13E5);
      }
      if _t13E1 {
        string _t13E6 = "(i#";
        string _t13E7 = " @ ";
        string _t13E8 = "): ";
        print (ID139A, _t13E6, iter1359, _t13E7, pos1398, _t13E8);
        string _t13E9 = "step=";
        string _t13EA = "; mvmt=";
        string _t13EB = " => found=";
        string _t13EC = "\n";
        print (_t13E9, step139C, _t13EA, mvmt13A3, _t13EB, found13A0, _t13EC);
      }
    } else {
      int _t13ED = 0;
      bool _t13EE = prim ==0082 (_t13ED, fDim07DF);
      if _t13EE {
        stabilize;
      }
      vec3 _t13EF = func fStep128C (pos1398);
      step139C = prim *0036<$[3]> (sfs07DB, _t13EF);
      pos1398 = prim +0017<$[3]> (pos1398, step139C);
      _pos1399 = pos1398;
      real _t13F0 = prim |()|00B5<$[3]> (step139C);
      real _t13F1 = prim /0055 (_t13F0, tipd07CD);
      trav13A2 = prim +0017<$[]> (trav13A2, _t13F1);
      real oldE13F2 = 0.e0;
      real _t13F3 = 0.e0;
      real _t13F4 = 0.e0;
      real _t13F5 = 0.e0;
      vec3 force13F6 = [_t13F3, _t13F4, _t13F5];
      int nn13F7 = 0;
      point[] _t13F8 = prim sphere0198<point> (_pos1399, rad1342);
      foreach P13F9 in _t13F8 {
        vec3 _t13FA = P13F9.pos1398;
        vec3 off13FB = prim -0026<$[3]> (_t13FA, pos1398);
        real _t13FC = prim |()|00B5<$[3]> (off13FB);
        real _t13FD = prim /0055 (_t13FC, tipd07CD);
        bool _t13FE = prim <007A (_t13FD, fsEps07D4);
        if _t13FE {
          real _t13FF = P13F9.ID139A;
          bool _t1400 = prim <=007C (ID139A, _t13FF);
          if _t1400 {
            die;
          }
        }
        real _t1407 = func enr1343 (off13FB);
        oldE13F2 = prim +0017<$[]> (oldE13F2, _t1407);
        vec3 _t1408 = func frc1348 (off13FB);
        force13F6 = prim +0017<$[3]> (force13F6, _t1408);
        int _t1409 = 1;
        nn13F7 = prim +0015 (nn13F7, _t1409);
      }
      int _t140A = 0;
      bool _t140B = prim ==0082 (_t140A, nn13F7);
      if _t140B {
        bool _t140C;
        int _t140D = func pcIter1385 ();
        int _t140E = 0;
        bool _t140F = prim >007F (_t140D, _t140E);
        if _t140F {
          _t140C = prim <0079 (born13A5, nnmax12F4);
        } else {
          _t140C = false;
        }
        bool _t1410 = prim !00BC (_t140C);
        if _t1410 {
          continue;
        }
        tensor[3,3] _t1411 = func fPerp12BE (pos1398);
        real _t1412 = 0.e0;
        real _t1413 = 0.e0;
        vec3 _t1414 = [tipd07CD, _t1412, _t1413];
        vec3 noff01415 = prim •00CE<$[3,3]; $[3]; $[3]> (_t1411, _t1414);
        tensor[3,3] _t1416 = func fPerp12BE (pos1398);
        real _t1417 = 0.e0;
        real _t1418 = 0.e0;
        vec3 _t1419 = [_t1417, tipd07CD, _t1418];
        vec3 noff1141A = prim •00CE<$[3,3]; $[3]; $[3]> (_t1416, _t1419);
        tensor[3,3] _t141B = func fPerp12BE (pos1398);
        real _t141C = 0.e0;
        real _t141D = 0.e0;
        vec3 _t141E = [_t141C, _t141D, tipd07CD];
        vec3 noff2141F = prim •00CE<$[3,3]; $[3]; $[3]> (_t141B, _t141E);
        vec3 noff1420 = noff01415;
        vec3 _t1421;
        real _t1422 = prim |()|00B5<$[3]> (noff1420);
        real _t1423 = prim |()|00B5<$[3]> (noff1141A);
        bool _t1424 = prim >0080 (_t1422, _t1423);
        if _t1424 {
          _t1421 = noff1420;
        } else {
          _t1421 = noff1141A;
        }
        noff1420 = _t1421;
        vec3 _t1425;
        real _t1426 = prim |()|00B5<$[3]> (noff1420);
        real _t1427 = prim |()|00B5<$[3]> (noff2141F);
        bool _t1428 = prim >0080 (_t1426, _t1427);
        if _t1428 {
          _t1425 = noff1420;
        } else {
          _t1425 = noff2141F;
        }
        noff1420 = _t1425;
        vec3 _t1429 = prim normalize0137<$[3]> (noff1420);
        vec3 _t142A = prim *0036<$[3]> (tipd07CD, _t1429);
        vec3 npos142B = prim +0017<$[3]> (_t142A, pos1398);
        vec3 _t142C = func fStep128C (npos142B);
        vec3 _t142D = prim *0036<$[3]> (sfs07DB, _t142C);
        npos142B = prim +0017<$[3]> (npos142B, _t142D);
        bool _t142E;
        bool _t142F;
        int _t1430 = 0;
        bool _t1431 = prim >007F (verb07DA, _t1430);
        if _t1431 {
          _t142F = vv13A7;
        } else {
          _t142F = false;
        }
        if _t142F {
          _t142E = true;
        } else {
          int _t1432 = 1;
          _t142E = prim >007F (verb07DA, _t1432);
        }
        if _t142E {
          string _t1433 = "(i#";
          string _t1434 = " @ ";
          string _t1435 = "): ";
          print (ID139A, _t1433, iter1359, _t1434, pos1398, _t1435);
          string _t1436 = " 0==nn =>NEW(";
          string _t1437 = ") w/ ID=";
          real _t1438 = func genID137F (npos142B);
          string _t1439 = "\n";
          print (_t1436, npos142B, _t1437, _t1438, _t1439);
        }
        bool _t143A = func posTest12DD (pos1398);
        if _t143A {
          new point (npos142B, hh139B);
          int _t143B = 1;
          born13A5 = prim +0015 (born13A5, _t143B);
        }
        bool _t143C;
        bool _t143D;
        int _t143E = 0;
        bool _t143F = prim >007F (verb07DA, _t143E);
        if _t143F {
          _t143D = vv13A7;
        } else {
          _t143D = false;
        }
        if _t143D {
          _t143C = true;
        } else {
          int _t1440 = 1;
          _t143C = prim >007F (verb07DA, _t1440);
        }
        if _t143C {
          string _t1441 = "(i#";
          string _t1442 = " @ ";
          string _t1443 = "): ";
          print (ID139A, _t1441, iter1359, _t1442, pos1398, _t1443);
          string _t1444 = "nn=0; after birthing mvmt=";
          string _t1445 = "\n";
          print (_t1444, mvmt13A3, _t1445);
        }
        continue;
      }
      tensor[3,3] _t1446 = func fPerp12BE (pos1398);
      tensor[3,3] _t1447 = prim *0036<$[3,3]> (hh139B, _t1446);
      vec3 es1448 = prim •00CE<$[3,3]; $[3]; $[3]> (_t1447, force13F6);
      real _t1449 = prim |()|00B5<$[3]> (es1448);
      bool _t144A = prim >0080 (_t1449, tipd07CD);
      if _t144A {
        real _t144B = prim |()|00B5<$[3]> (es1448);
        real _t144C = prim /0055 (tipd07CD, _t144B);
        hh139B = prim *0034 (hh139B, _t144C);
        real _t144D = prim |()|00B5<$[3]> (es1448);
        real _t144E = prim /0055 (tipd07CD, _t144D);
        es1448 = prim *0038<$[3]> (es1448, _t144E);
      }
      vec3 _t144F = prim +0017<$[3]> (pos1398, es1448);
      vec3 _t1450 = func fStep128C (_t144F);
      vec3 fs1451 = prim *0036<$[3]> (sfs07DB, _t1450);
      real _t1452 = prim |()|00B5<$[3]> (fs1451);
      real _t1453 = prim *0034 (fsEps07D4, tipd07CD);
      real _t1454 = prim |()|00B5<$[3]> (es1448);
      real _t1455 = prim +0017<$[]> (_t1453, _t1454);
      real _t1456 = prim /0055 (_t1452, _t1455);
      real _t1457 = 0.5e0;
      bool _t1458 = prim >0080 (_t1456, _t1457);
      if _t1458 {
        real _t1459 = 0.5e0;
        hh139B = prim *0034 (hh139B, _t1459);
        bool _t145A;
        bool _t145B;
        int _t145C = 0;
        bool _t145D = prim >007F (verb07DA, _t145C);
        if _t145D {
          _t145B = vv13A7;
        } else {
          _t145B = false;
        }
        if _t145B {
          _t145A = true;
        } else {
          int _t145E = 1;
          _t145A = prim >007F (verb07DA, _t145E);
        }
        if _t145A {
          string _t145F = "(i#";
          string _t1460 = " @ ";
          string _t1461 = "): ";
          print (ID139A, _t145F, iter1359, _t1460, pos1398, _t1461);
          string _t1462 = "nn=";
          string _t1463 = "; |fs|/|es|=";
          real _t1464 = prim |()|00B5<$[3]> (fs1451);
          real _t1465 = prim |()|00B5<$[3]> (es1448);
          real _t1466 = prim /0055 (_t1464, _t1465);
          string _t1467 = " > 0.5; trying again with hh=";
          string _t1468 = "; mvmt=";
          string _t1469 = "\n";
          print (_t1462, nn13F7, _t1463, _t1466, _t1467, hh139B, _t1468, mvmt13A3, _t1469);
          string _t146A = "        fs=";
          string _t146B = "\n";
          print (_t146A, fs1451, _t146B);
          string _t146C = "        es=";
          string _t146D = "\n";
          print (_t146C, es1448, _t146D);
        }
        continue;
      }
      vec3 oldpos146E = pos1398;
      vec3 _t146F = prim +0017<$[3]> (fs1451, es1448);
      pos1398 = prim +0017<$[3]> (pos1398, _t146F);
      _pos1399 = pos1398;
      real newE1470 = 0.e0;
      closest13A4 = rad1342;
      real _t1471 = 0.e0;
      real _t1472 = 0.e0;
      real _t1473 = 0.e0;
      vec3 mno1474 = [_t1471, _t1472, _t1473];
      nn13F7 = 0;
      point[] _t1475 = prim sphere0198<point> (_pos1399, rad1342);
      foreach P1476 in _t1475 {
        vec3 _t1477 = P1476.pos1398;
        vec3 off1478 = prim -0026<$[3]> (_t1477, pos1398);
        real _t1479 = func enr1343 (off1478);
        newE1470 = prim +0017<$[]> (newE1470, _t1479);
        real _t147A = prim |()|00B5<$[3]> (off1478);
        closest13A4 = prim min0127 (closest13A4, _t147A);
        mno1474 = prim +0017<$[3]> (mno1474, off1478);
        int _t147B = 1;
        nn13F7 = prim +0015 (nn13F7, _t147B);
      }
      real _t147C = (real)nn13F7;
      mno1474 = prim /0057<$[3]> (mno1474, _t147C);
      bool _t147D;
      bool _t147E;
      int _t147F = 0;
      bool _t1480 = prim >007F (verb07DA, _t147F);
      if _t1480 {
        _t147E = vv13A7;
      } else {
        _t147E = false;
      }
      if _t147E {
        _t147D = true;
      } else {
        int _t1481 = 1;
        _t147D = prim >007F (verb07DA, _t1481);
      }
      if _t147D {
        string _t1482 = "(i#";
        string _t1483 = " @ ";
        string _t1484 = "): ";
        print (ID139A, _t1482, iter1359, _t1483, pos1398, _t1484);
        string _t1485 = "nn=";
        string _t1486 = "; oldE=";
        string _t1487 = " newE=";
        string _t1488 = "\n";
        print (_t1485, nn13F7, _t1486, oldE13F2, _t1487, newE1470, _t1488);
      }
      real _t1489 = prim -0026<$[]> (newE1470, oldE13F2);
      vec3 _t148A = prim -0026<$[3]> (pos1398, oldpos146E);
      vec3 _t148B = prim *0036<$[3]> (gdeTest07D1, _t148A);
      vec3 _t148C = prim unary -008B<$[3]> (force13F6);
      real _t148D = prim •00CE<$[3]; $[3]; $[]> (_t148B, _t148C);
      bool _t148E = prim >0080 (_t1489, _t148D);
      if _t148E {
        hh139B = prim *0034 (hh139B, gdeBack07D2);
        real _t148F = 0.e0;
        bool _t1490 = prim ==0084 (_t148F, hh139B);
        if _t1490 {
          string _t1491 = "(i#";
          string _t1492 = " @ ";
          string _t1493 = "): ";
          print (ID139A, _t1491, iter1359, _t1492, pos1398, _t1493);
          string _t1494 = "backtracked all the way to hh=0\n";
          print (_t1494);
          die;
        }
        bool _t1495;
        bool _t1496;
        int _t1497 = 0;
        bool _t1498 = prim >007F (verb07DA, _t1497);
        if _t1498 {
          _t1496 = vv13A7;
        } else {
          _t1496 = false;
        }
        if _t1496 {
          _t1495 = true;
        } else {
          int _t1499 = 1;
          _t1495 = prim >007F (verb07DA, _t1499);
        }
        if _t1495 {
          string _t149A = "(i#";
          string _t149B = " @ ";
          string _t149C = "): ";
          print (ID139A, _t149A, iter1359, _t149B, pos1398, _t149C);
          string _t149D = "nn=";
          string _t149E = "; oldE=";
          string _t149F = " newE=";
          string _t14A0 = "; backtracking; hh=";
          string _t14A1 = "; mvmt=";
          string _t14A2 = "\n";
          print (_t149D, nn13F7, _t149E, oldE13F2, _t149F, newE1470, _t14A0, hh139B, _t14A1, mvmt13A3, _t14A2);
          string _t14A3 = "      fs=";
          string _t14A4 = "\n";
          print (_t14A3, fs1451, _t14A4);
          string _t14A5 = "      es=";
          string _t14A6 = "\n";
          print (_t14A5, es1448, _t14A6);
          string _t14A7 = "      newE - oldE=";
          real _t14A8 = prim -0026<$[]> (newE1470, oldE13F2);
          string _t14A9 = "\n";
          print (_t14A7, _t14A8, _t14A9);
          string _t14AA = "      force=";
          string _t14AB = "\n";
          print (_t14AA, force13F6, _t14AB);
          string _t14AC = "      dpos=";
          vec3 _t14AD = prim -0026<$[3]> (pos1398, oldpos146E);
          string _t14AE = "\n";
          print (_t14AC, _t14AD, _t14AE);
          string _t14AF = "      0.5*(pos - oldpos).(-force)=";
          real _t14B0 = 0.5e0;
          vec3 _t14B1 = prim -0026<$[3]> (pos1398, oldpos146E);
          vec3 _t14B2 = prim *0036<$[3]> (_t14B0, _t14B1);
          vec3 _t14B3 = prim unary -008B<$[3]> (force13F6);
          real _t14B4 = prim •00CE<$[3]; $[3]; $[]> (_t14B2, _t14B3);
          string _t14B5 = "\n";
          print (_t14AF, _t14B4, _t14B5);
        }
        pos1398 = oldpos146E;
        _pos1399 = pos1398;
        continue;
      }
      hh139B = prim *0034 (hh139B, gdeOppor07D3);
      vec3 _t14B6 = prim +0017<$[3]> (fs1451, es1448);
      step139C = prim +0017<$[3]> (step139C, _t14B6);
      real _t14B7 = prim |()|00B5<$[3]> (step139C);
      real _t14B8 = prim /0055 (_t14B7, tipd07CD);
      trav13A2 = prim +0017<$[]> (trav13A2, _t14B8);
      real _t14B9 = prim |()|00B5<$[3]> (step139C);
      real _t14BA = prim /0055 (_t14B9, tipd07CD);
      mvmt13A3 = prim lerp0096<$[]> (_t14BA, mvmt13A3, hist07DC);
      real _t14BB = prim |()|00B5<$[3]> (step139C);
      real _t14BC = prim /0055 (_t14BB, tipd07CD);
      bool _t14BD = prim <007A (_t14BC, pcmvEps07D8);
      if _t14BD {
        int _t14BE = func pcIter1385 ();
        int _t14BF = 0;
        bool _t14C0 = prim !=0086 (_t14BE, _t14BF);
        if _t14C0 {
          bool _t14C1;
          int _t14C2 = func pcIter1385 ();
          int _t14C3 = 0;
          bool _t14C4 = prim >007F (_t14C2, _t14C3);
          if _t14C4 {
            bool _t14C5;
            real _t14C6 = 0.e0;
            bool _t14C7 = prim <007A (newE1470, _t14C6);
            if _t14C7 {
              bool _t14C8;
              bool _t14C9 = prim <0079 (nn13F7, nnmin12ED);
              if _t14C9 {
                _t14C8 = prim <0079 (born13A5, nnmax12F4);
              } else {
                _t14C8 = false;
              }
              _t14C5 = _t14C8;
            } else {
              _t14C5 = false;
            }
            _t14C1 = _t14C5;
          } else {
            _t14C1 = false;
          }
          if _t14C1 {
            vec3 _t14CA = prim normalize0137<$[3]> (mno1474);
            vec3 _t14CB = prim *0036<$[3]> (tipd07CD, _t14CA);
            vec3 npos14CC = prim -0026<$[3]> (pos1398, _t14CB);
            vec3 _t14CD = func fStep128C (npos14CC);
            vec3 _t14CE = prim *0036<$[3]> (sfs07DB, _t14CD);
            npos14CC = prim +0017<$[3]> (npos14CC, _t14CE);
            vec3 _t14CF = func fStep128C (npos14CC);
            vec3 _t14D0 = prim *0036<$[3]> (sfs07DB, _t14CF);
            npos14CC = prim +0017<$[3]> (npos14CC, _t14D0);
            bool birth14D1 = true;
            int _t14D2 = 2;
            bool _t14D3 = prim ==0082 (fDim07DF, _t14D2);
            if _t14D3 {
              int _t14D4 = 4;
              bool _t14D5 = prim >=007D (nn13F7, _t14D4);
              if _t14D5 {
                real _t14D6 = prim *0034 (tipd07CD, mabd07CE);
                point[] _t14D7 = prim sphere0198<point> (npos14CC, _t14D6);
                foreach P14D8 in _t14D7 {
                  birth14D1 = false;
                }
                if birth14D1 {
                  real _t14D9 = func v3rnd1373 (pos1398);
                  int _t14DA = prim -0024 (nnmin12ED, nn13F7);
                  real _t14DB = (real)_t14DA;
                  real _t14DC = prim $i2r01B6 (nnmin12ED);
                  real _t14DD = prim /0055 (_t14DB, _t14DC);
                  birth14D1 = prim <007A (_t14D9, _t14DD);
                }
              }
            }
            if birth14D1 {
              bool _t14DE = func posTest12DD (npos14CC);
              if _t14DE {
                new point (npos14CC, hh139B);
                int _t14DF = 1;
                born13A5 = prim +0015 (born13A5, _t14DF);
              }
            }
          } else {
            int _t14E0 = func pcIter1385 ();
            int _t14E1 = 0;
            bool _t14E2 = prim <0079 (_t14E0, _t14E1);
            if _t14E2 {
              real _t14E3 = 0.e0;
              bool _t14E4 = prim >0080 (newE1470, _t14E3);
              if _t14E4 {
                bool _t14E5 = prim >007F (nn13F7, nnmax12F4);
                if _t14E5 {
                  real _t14E6 = func v3rnd1373 (pos1398);
                  int _t14E7 = prim -0024 (nn13F7, nnmax12F4);
                  real _t14E8 = (real)_t14E7;
                  real _t14E9 = prim $i2r01B6 (nn13F7);
                  real _t14EA = prim /0055 (_t14E8, _t14E9);
                  bool _t14EB = prim <007A (_t14E6, _t14EA);
                  if _t14EB {
                    die;
                  }
                }
              }
            }
          }
        }
      }
    }
    first13A6 = false;
  }
}
collection {
  int _t14F7 = 0;
  int _t14F8 = prim length0123<vec3> (ipos07DE);
  int _t14F9 = 1;
  int _t14FA = prim -0024 (_t14F8, _t14F9);
  int[] _t14FB = prim $range01C3 (_t14F7, _t14FA);
  foreach ii14FC in _t14FB {
    vec3 _t14FD = prim $dynsub01C2<vec3> (ipos07DE, ii14FC);
    real _t14FE = 0.1e1;
    new point (_t14FD, _t14FE);
  }
}
update {
  int pop14FF = prim numActive01A2 ();
  int _t1500;
  bool _t1501 = prim !=0086 (pop14FF, popLast135B);
  if _t1501 {
    _t1500 = 1;
  } else {
    _t1500 = 0;
  }
  int pc1502 = _t1500;
  real _t1503 = (real)pc1502;
  rpc135A = prim lerp0096<$[]> (_t1503, rpc135A, pchist1358);
  bool res1504= all { (P1507) => {
      bool _t1508 = P1507.found13A0;
      return _t1508;
    } (P1505, P1505)
  | P1505 in all };
  bool allfound150A = res1504;
  real _t150B = 0.1e3;
  real res150C= sum<real> { (P1510) => {
      real _t1511;
      bool _t1512 = P1510.found13A0;
      if _t1512 {
        _t1511 = 0.1e1;
      } else {
        _t1511 = 0.e0;
      }
      return _t1511;
    } (P150D, P150D)
  | P150D in all };
  int num1514 = prim numStrands01A4 ();
  real rNum1515 = (real)num1514;
  real mean1516 = prim /0055 (res150C, rNum1515);
  real percfound1517 = prim *0034 (_t150B, mean1516);
  real res1518= sum<real> { (P151B) => {
      real _t151C = P151B.closest13A4;
      return _t151C;
    } (P1519, P1519)
  | P1519 in all };
  int num151E = prim numStrands01A4 ();
  real rNum151F = (real)num151E;
  real mean1520 = prim /0055 (res1518, rNum151F);
  real meancl1521 = mean1520;
  real res1522= sum<real> { (P1528, meancl152A) => {
      real _t1529 = P1528.closest13A4;
      real _t152B = prim -0026<$[]> (_t1529, meancl152A);
      int _t152C = 2;
      real _t152D = prim ^0068 (_t152B, _t152C);
      return _t152D;
    } (P1523, P1523, meancl1521)
  | P1523 in all };
  int num152F = prim numStrands01A4 ();
  real rNum1530 = (real)num152F;
  real mean1531 = prim /0055 (res1522, rNum1530);
  real varicl1532 = mean1531;
  real _t1533 = prim sqrt0165 (varicl1532);
  real covcl1534 = prim /0055 (_t1533, meancl1521);
  real res1535= max<real> { (P1538) => {
      real _t1539 = P1538.mvmt13A3;
      return _t1539;
    } (P1536, P1536)
  | P1536 in all };
  real maxmvmt153B = res1535;
  string _t153C = "======= finished iter ";
  string _t153D = " w/ ";
  string _t153E = ")";
  string _t153F = "; %found=";
  string _t1540 = "; mean(hh)=";
  real res1541= sum<real> { (P1544) => {
      real _t1545 = P1544.hh139B;
      return _t1545;
    } (P1542, P1542)
  | P1542 in all };
  int num1547 = prim numStrands01A4 ();
  real rNum1548 = (real)num1547;
  real mean1549 = prim /0055 (res1541, rNum1548);
  string _t154A = "; mean(cl)=";
  string _t154B = "; COV(cl)=";
  string _t154C = "; max(mvmt)=";
  string _t154D = "; pc=";
  string _t154E = "; rpc=";
  string _t154F = "\n";
  print (_t153C, iter1359, _t153D, pop14FF, _t153E, _t153F, percfound1517, _t1540, mean1549, _t154A, meancl1521, _t154B, covcl1534, _t154C, maxmvmt153B, _t154D, pc1502, _t154E, rpc135A, _t154F);
  bool _t1550;
  if allfound150A {
    bool _t1551;
    bool _t1552 = prim <007A (covcl1534, geoEps07D5);
    if _t1552 {
      bool _t1553;
      bool _t1554 = prim <007A (maxmvmt153B, mvmtEps07D6);
      if _t1554 {
        _t1553 = prim <007A (rpc135A, rpcEps07D7);
      } else {
        _t1553 = false;
      }
      _t1551 = _t1553;
    } else {
      _t1551 = false;
    }
    _t1550 = _t1551;
  } else {
    _t1550 = false;
  }
  if _t1550 {
    string _t1555 = "======= Stabilizing ";
    int _t1556 = prim numActive01A2 ();
    string _t1557 = " (iter ";
    string _t1558 = ")";
    string _t1559 = "; COV(cl)=";
    string _t155A = " < ";
    string _t155B = "; max(mvmt)=";
    string _t155C = " < ";
    string _t155D = "; rpc=";
    string _t155E = " < ";
    string _t155F = "\n";
    print (_t1555, _t1556, _t1557, iter1359, _t1558, _t1559, covcl1534, _t155A, geoEps07D5, _t155B, maxmvmt153B, _t155C, mvmtEps07D6, _t155D, rpc135A, _t155E, rpcEps07D7, _t155F);
    stabilize_all;
  } else {
    string _t1560 = "======= Stabilizing ";
    int _t1561 = prim numActive01A2 ();
    string _t1562 = " (iter ";
    string _t1563 = ")";
    string _t1564 = "; COV(cl)=";
    string _t1565 = " > ";
    string _t1566 = "; max(mvmt)=";
    string _t1567 = " > ";
    string _t1568 = "; rpc=";
    string _t1569 = " > ";
    string _t156A = "\n";
    print (_t1560, _t1561, _t1562, iter1359, _t1563, _t1564, covcl1534, _t1565, geoEps07D5, _t1566, maxmvmt153B, _t1567, mvmtEps07D6, _t1568, rpc135A, _t1569, rpcEps07D7, _t156A);
  }
  int _t156B = 1;
  iter1359 = prim +0015 (iter1359, _t156B);
  popLast135B = pop14FF;
}
/* Program end */
/* Simplified Program (after after inlining) start */
properties: GlobalInit,StabilizeAll,GlobalReduce,StrandSets,GlobalUpdate,NewStrands,StrandCommunication,StrandsMayDie,HasInputs,HasGlobals,ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
input FemData:Mesh meshData07BA;
input FemData:Space 0space07C6_intermedateGlobal07C7;
input FemData:FemFunc 0data07C8_intermedateGlobal07C9;
input real fStrTh07CA("Feature strength threshold");
input real fMaskTh07CB("feature mask threshold") = <default>;
input real fBias07CC("Bias in feature strength computing") = <default>;
input real tipd07CD("Target inter-particle distance") = <default>;
input real mabd07CE("Min allowed birth distance (> 0.7351)") = <default>;
input real travMax07CF("Max allowed travel to or on feature") = <default>;
input int nfsMax07D0("Max allowed # feature steps ") = <default>;
input real gdeTest07D1("Scaling in sufficient decrease test") = <default>;
input real gdeBack07D2("How to scale stepsize for backtrack") = <default>;
input real gdeOppor07D3("Opportunistic stepsize increase") = <default>;
input real fsEps07D4("Conv. thresh. on feature step size");
input real geoEps07D5("Conv. thresh. on system geometry") = <default>;
input real mvmtEps07D6("Conv. thresh. on point movement") = <default>;
input real rpcEps07D7("Conv. thresh. on recent pop. changes") = <default>;
input real pcmvEps07D8("Motion limit before PC") = <default>;
input real isoval07D9("Which isosurface to sample") = <default>;
input int verb07DA("Verbosity level") = <default>;
input real sfs07DB("Scaling (<=1 for stability) on fStep") = <default>;
input real hist07DC("How history matters for convergence") = <default>;
input int pcp07DD("periodicity of population control (PC)") = <default>;
input vec3[] ipos07DE("Initial point positions");
input int fDim07DF = <default>;
constants {
  fMaskTh07CB = 0.e0;
  fBias07CC = 0.e0;
  tipd07CD = 0.1e1;
  mabd07CE = 0.75e0;
  travMax07CF = 0.1e2;
  nfsMax07D0 = 20;
  gdeTest07D1 = 0.5e0;
  gdeBack07D2 = 0.5e0;
  gdeOppor07D3 = 0.12e1;
  geoEps07D5 = 0.1e0;
  mvmtEps07D6 = 0.1e-1;
  rpcEps07D7 = 0.1e-1;
  pcmvEps07D8 = 0.3e0;
  isoval07D9 = 0.e0;
  verb07DA = 0;
  sfs07DB = 0.5e0;
  hist07DC = 0.5e0;
  pcp07DD = 5;
  fDim07DF = 2;
}
global int nnmin12ED;
global int nnmax12F4;
global real phiWellRad1341;
global real rad1342;
global real pchist1358;
global int iter1359;
global real rpc135A;
global int popLast135B;
function int[2]#6 nextCell408B4 (int faceIdx0D13, int cell0D14, Femdata: Mesh mesh0D15)
{
  int _t0D16 = -1;
  bool _t0D17 = prim ==0082 (faceIdx0D13, _t0D16);
  if _t0D17 {
    int _t0D18 = -1;
    int _t0D19 = -1;
    int[2] _t0D1A = {_t0D18, _t0D19};
    return _t0D1A;
  } else {
    int _t0D1B = 8;
    int _t0D1C = prim *0033 (cell0D14, _t0D1B);
    int _t0D1D = 2;
    int _t0D1E = prim *0033 (faceIdx0D13, _t0D1D);
    int _t0D1F = prim +0015 (_t0D1C, _t0D1E);
    int[2] _t0D20 = extractFemItemN((mesh0D15, _t0D1F),CellFaceCell(Mesh),);
    return _t0D20;
  }
}
function vec3#6 fStep128C (vec3 s128D)
{
  vec3 g128E;
  real x167D = s128D[0];
  real y167E = s128D[1];
  real z167F = s128D[2];
  real _t1680 = 0.2e1;
  real _t1681 = prim *0034 (_t1680, x167D);
  int _t1682 = 2;
  real _t1683 = prim ^0068 (z167F, _t1682);
  real _t1684 = prim *0034 (_t1681, _t1683);
  int _t1685 = 2;
  real _t1686 = prim ^0068 (x167D, _t1685);
  int _t1687 = 2;
  real _t1688 = prim ^0068 (y167E, _t1687);
  real _t1689 = prim +0017<$[]> (_t1686, _t1688);
  int _t168A = 2;
  real _t168B = prim ^0068 (z167F, _t168A);
  real _t168C = prim +0017<$[]> (_t1689, _t168B);
  real _t168D = prim cos0169 (_t168C);
  real _t168E = prim *0034 (_t1684, _t168D);
  real _t168F = 0.2e1;
  real _t1690 = prim *0034 (_t168F, y167E);
  int _t1691 = 2;
  real _t1692 = prim ^0068 (z167F, _t1691);
  real _t1693 = prim *0034 (_t1690, _t1692);
  int _t1694 = 2;
  real _t1695 = prim ^0068 (x167D, _t1694);
  int _t1696 = 2;
  real _t1697 = prim ^0068 (y167E, _t1696);
  real _t1698 = prim +0017<$[]> (_t1695, _t1697);
  int _t1699 = 2;
  real _t169A = prim ^0068 (z167F, _t1699);
  real _t169B = prim +0017<$[]> (_t1698, _t169A);
  real _t169C = prim cos0169 (_t169B);
  real _t169D = prim *0034 (_t1693, _t169C);
  real _t169E = 0.2e1;
  int _t169F = 3;
  real _t16A0 = prim ^0068 (z167F, _t169F);
  real _t16A1 = prim *0034 (_t169E, _t16A0);
  int _t16A2 = 2;
  real _t16A3 = prim ^0068 (x167D, _t16A2);
  int _t16A4 = 2;
  real _t16A5 = prim ^0068 (y167E, _t16A4);
  real _t16A6 = prim +0017<$[]> (_t16A3, _t16A5);
  int _t16A7 = 2;
  real _t16A8 = prim ^0068 (z167F, _t16A7);
  real _t16A9 = prim +0017<$[]> (_t16A6, _t16A8);
  real _t16AA = prim cos0169 (_t16A9);
  real _t16AB = prim *0034 (_t16A1, _t16AA);
  real _t16AC = 0.2e1;
  real _t16AD = prim *0034 (_t16AC, z167F);
  int _t16AE = 2;
  real _t16AF = prim ^0068 (x167D, _t16AE);
  int _t16B0 = 2;
  real _t16B1 = prim ^0068 (y167E, _t16B0);
  real _t16B2 = prim +0017<$[]> (_t16AF, _t16B1);
  int _t16B3 = 2;
  real _t16B4 = prim ^0068 (z167F, _t16B3);
  real _t16B5 = prim +0017<$[]> (_t16B2, _t16B4);
  real _t16B6 = prim sin0171 (_t16B5);
  real _t16B7 = prim *0034 (_t16AD, _t16B6);
  real _t16B8 = prim +0017<$[]> (_t16AB, _t16B7);
  vec3 g16B9 = [_t168E, _t169D, _t16B8];
  g128E = g16B9;
  tensor[3,3] H128F;
  real x1570 = s128D[0];
  real y1571 = s128D[1];
  real z1572 = s128D[2];
  int _t1573 = -4;
  real _t1574 = (real)_t1573;
  int _t1575 = 2;
  real _t1576 = prim ^0068 (x1570, _t1575);
  real _t1577 = prim *0034 (_t1574, _t1576);
  int _t1578 = 2;
  real _t1579 = prim ^0068 (z1572, _t1578);
  real _t157A = prim *0034 (_t1577, _t1579);
  int _t157B = 2;
  real _t157C = prim ^0068 (x1570, _t157B);
  int _t157D = 2;
  real _t157E = prim ^0068 (y1571, _t157D);
  real _t157F = prim +0017<$[]> (_t157C, _t157E);
  int _t1580 = 2;
  real _t1581 = prim ^0068 (z1572, _t1580);
  real _t1582 = prim +0017<$[]> (_t157F, _t1581);
  real _t1583 = prim sin0171 (_t1582);
  real _t1584 = prim *0034 (_t157A, _t1583);
  real _t1585 = 0.2e1;
  int _t1586 = 2;
  real _t1587 = prim ^0068 (z1572, _t1586);
  real _t1588 = prim *0034 (_t1585, _t1587);
  int _t1589 = 2;
  real _t158A = prim ^0068 (x1570, _t1589);
  int _t158B = 2;
  real _t158C = prim ^0068 (y1571, _t158B);
  real _t158D = prim +0017<$[]> (_t158A, _t158C);
  int _t158E = 2;
  real _t158F = prim ^0068 (z1572, _t158E);
  real _t1590 = prim +0017<$[]> (_t158D, _t158F);
  real _t1591 = prim cos0169 (_t1590);
  real _t1592 = prim *0034 (_t1588, _t1591);
  real _t1593 = prim +0017<$[]> (_t1584, _t1592);
  int _t1594 = -4;
  real _t1595 = (real)_t1594;
  real _t1596 = prim *0034 (_t1595, x1570);
  real _t1597 = prim *0034 (_t1596, y1571);
  int _t1598 = 2;
  real _t1599 = prim ^0068 (z1572, _t1598);
  real _t159A = prim *0034 (_t1597, _t1599);
  int _t159B = 2;
  real _t159C = prim ^0068 (x1570, _t159B);
  int _t159D = 2;
  real _t159E = prim ^0068 (y1571, _t159D);
  real _t159F = prim +0017<$[]> (_t159C, _t159E);
  int _t15A0 = 2;
  real _t15A1 = prim ^0068 (z1572, _t15A0);
  real _t15A2 = prim +0017<$[]> (_t159F, _t15A1);
  real _t15A3 = prim sin0171 (_t15A2);
  real _t15A4 = prim *0034 (_t159A, _t15A3);
  int _t15A5 = -4;
  real _t15A6 = (real)_t15A5;
  real _t15A7 = prim *0034 (_t15A6, x1570);
  int _t15A8 = 3;
  real _t15A9 = prim ^0068 (z1572, _t15A8);
  real _t15AA = prim *0034 (_t15A7, _t15A9);
  int _t15AB = 2;
  real _t15AC = prim ^0068 (x1570, _t15AB);
  int _t15AD = 2;
  real _t15AE = prim ^0068 (y1571, _t15AD);
  real _t15AF = prim +0017<$[]> (_t15AC, _t15AE);
  int _t15B0 = 2;
  real _t15B1 = prim ^0068 (z1572, _t15B0);
  real _t15B2 = prim +0017<$[]> (_t15AF, _t15B1);
  real _t15B3 = prim sin0171 (_t15B2);
  real _t15B4 = prim *0034 (_t15AA, _t15B3);
  real _t15B5 = 0.4e1;
  real _t15B6 = prim *0034 (_t15B5, x1570);
  real _t15B7 = prim *0034 (_t15B6, z1572);
  int _t15B8 = 2;
  real _t15B9 = prim ^0068 (x1570, _t15B8);
  int _t15BA = 2;
  real _t15BB = prim ^0068 (y1571, _t15BA);
  real _t15BC = prim +0017<$[]> (_t15B9, _t15BB);
  int _t15BD = 2;
  real _t15BE = prim ^0068 (z1572, _t15BD);
  real _t15BF = prim +0017<$[]> (_t15BC, _t15BE);
  real _t15C0 = prim cos0169 (_t15BF);
  real _t15C1 = prim *0034 (_t15B7, _t15C0);
  real _t15C2 = prim +0017<$[]> (_t15B4, _t15C1);
  vec3 _t15C3 = [_t1593, _t15A4, _t15C2];
  int _t15C4 = -4;
  real _t15C5 = (real)_t15C4;
  real _t15C6 = prim *0034 (_t15C5, x1570);
  real _t15C7 = prim *0034 (_t15C6, y1571);
  int _t15C8 = 2;
  real _t15C9 = prim ^0068 (z1572, _t15C8);
  real _t15CA = prim *0034 (_t15C7, _t15C9);
  int _t15CB = 2;
  real _t15CC = prim ^0068 (x1570, _t15CB);
  int _t15CD = 2;
  real _t15CE = prim ^0068 (y1571, _t15CD);
  real _t15CF = prim +0017<$[]> (_t15CC, _t15CE);
  int _t15D0 = 2;
  real _t15D1 = prim ^0068 (z1572, _t15D0);
  real _t15D2 = prim +0017<$[]> (_t15CF, _t15D1);
  real _t15D3 = prim sin0171 (_t15D2);
  real _t15D4 = prim *0034 (_t15CA, _t15D3);
  int _t15D5 = -4;
  real _t15D6 = (real)_t15D5;
  int _t15D7 = 2;
  real _t15D8 = prim ^0068 (y1571, _t15D7);
  real _t15D9 = prim *0034 (_t15D6, _t15D8);
  int _t15DA = 2;
  real _t15DB = prim ^0068 (z1572, _t15DA);
  real _t15DC = prim *0034 (_t15D9, _t15DB);
  int _t15DD = 2;
  real _t15DE = prim ^0068 (x1570, _t15DD);
  int _t15DF = 2;
  real _t15E0 = prim ^0068 (y1571, _t15DF);
  real _t15E1 = prim +0017<$[]> (_t15DE, _t15E0);
  int _t15E2 = 2;
  real _t15E3 = prim ^0068 (z1572, _t15E2);
  real _t15E4 = prim +0017<$[]> (_t15E1, _t15E3);
  real _t15E5 = prim sin0171 (_t15E4);
  real _t15E6 = prim *0034 (_t15DC, _t15E5);
  real _t15E7 = 0.2e1;
  int _t15E8 = 2;
  real _t15E9 = prim ^0068 (z1572, _t15E8);
  real _t15EA = prim *0034 (_t15E7, _t15E9);
  int _t15EB = 2;
  real _t15EC = prim ^0068 (x1570, _t15EB);
  int _t15ED = 2;
  real _t15EE = prim ^0068 (y1571, _t15ED);
  real _t15EF = prim +0017<$[]> (_t15EC, _t15EE);
  int _t15F0 = 2;
  real _t15F1 = prim ^0068 (z1572, _t15F0);
  real _t15F2 = prim +0017<$[]> (_t15EF, _t15F1);
  real _t15F3 = prim cos0169 (_t15F2);
  real _t15F4 = prim *0034 (_t15EA, _t15F3);
  real _t15F5 = prim +0017<$[]> (_t15E6, _t15F4);
  int _t15F6 = -4;
  real _t15F7 = (real)_t15F6;
  real _t15F8 = prim *0034 (_t15F7, y1571);
  int _t15F9 = 3;
  real _t15FA = prim ^0068 (z1572, _t15F9);
  real _t15FB = prim *0034 (_t15F8, _t15FA);
  int _t15FC = 2;
  real _t15FD = prim ^0068 (x1570, _t15FC);
  int _t15FE = 2;
  real _t15FF = prim ^0068 (y1571, _t15FE);
  real _t1600 = prim +0017<$[]> (_t15FD, _t15FF);
  int _t1601 = 2;
  real _t1602 = prim ^0068 (z1572, _t1601);
  real _t1603 = prim +0017<$[]> (_t1600, _t1602);
  real _t1604 = prim sin0171 (_t1603);
  real _t1605 = prim *0034 (_t15FB, _t1604);
  real _t1606 = 0.4e1;
  real _t1607 = prim *0034 (_t1606, y1571);
  real _t1608 = prim *0034 (_t1607, z1572);
  int _t1609 = 2;
  real _t160A = prim ^0068 (x1570, _t1609);
  int _t160B = 2;
  real _t160C = prim ^0068 (y1571, _t160B);
  real _t160D = prim +0017<$[]> (_t160A, _t160C);
  int _t160E = 2;
  real _t160F = prim ^0068 (z1572, _t160E);
  real _t1610 = prim +0017<$[]> (_t160D, _t160F);
  real _t1611 = prim cos0169 (_t1610);
  real _t1612 = prim *0034 (_t1608, _t1611);
  real _t1613 = prim +0017<$[]> (_t1605, _t1612);
  vec3 _t1614 = [_t15D4, _t15F5, _t1613];
  int _t1615 = -4;
  real _t1616 = (real)_t1615;
  real _t1617 = prim *0034 (_t1616, x1570);
  int _t1618 = 3;
  real _t1619 = prim ^0068 (z1572, _t1618);
  real _t161A = prim *0034 (_t1617, _t1619);
  int _t161B = 2;
  real _t161C = prim ^0068 (x1570, _t161B);
  int _t161D = 2;
  real _t161E = prim ^0068 (y1571, _t161D);
  real _t161F = prim +0017<$[]> (_t161C, _t161E);
  int _t1620 = 2;
  real _t1621 = prim ^0068 (z1572, _t1620);
  real _t1622 = prim +0017<$[]> (_t161F, _t1621);
  real _t1623 = prim sin0171 (_t1622);
  real _t1624 = prim *0034 (_t161A, _t1623);
  real _t1625 = 0.4e1;
  real _t1626 = prim *0034 (_t1625, x1570);
  real _t1627 = prim *0034 (_t1626, z1572);
  int _t1628 = 2;
  real _t1629 = prim ^0068 (x1570, _t1628);
  int _t162A = 2;
  real _t162B = prim ^0068 (y1571, _t162A);
  real _t162C = prim +0017<$[]> (_t1629, _t162B);
  int _t162D = 2;
  real _t162E = prim ^0068 (z1572, _t162D);
  real _t162F = prim +0017<$[]> (_t162C, _t162E);
  real _t1630 = prim cos0169 (_t162F);
  real _t1631 = prim *0034 (_t1627, _t1630);
  real _t1632 = prim +0017<$[]> (_t1624, _t1631);
  int _t1633 = -4;
  real _t1634 = (real)_t1633;
  real _t1635 = prim *0034 (_t1634, y1571);
  int _t1636 = 3;
  real _t1637 = prim ^0068 (z1572, _t1636);
  real _t1638 = prim *0034 (_t1635, _t1637);
  int _t1639 = 2;
  real _t163A = prim ^0068 (x1570, _t1639);
  int _t163B = 2;
  real _t163C = prim ^0068 (y1571, _t163B);
  real _t163D = prim +0017<$[]> (_t163A, _t163C);
  int _t163E = 2;
  real _t163F = prim ^0068 (z1572, _t163E);
  real _t1640 = prim +0017<$[]> (_t163D, _t163F);
  real _t1641 = prim sin0171 (_t1640);
  real _t1642 = prim *0034 (_t1638, _t1641);
  real _t1643 = 0.4e1;
  real _t1644 = prim *0034 (_t1643, y1571);
  real _t1645 = prim *0034 (_t1644, z1572);
  int _t1646 = 2;
  real _t1647 = prim ^0068 (x1570, _t1646);
  int _t1648 = 2;
  real _t1649 = prim ^0068 (y1571, _t1648);
  real _t164A = prim +0017<$[]> (_t1647, _t1649);
  int _t164B = 2;
  real _t164C = prim ^0068 (z1572, _t164B);
  real _t164D = prim +0017<$[]> (_t164A, _t164C);
  real _t164E = prim cos0169 (_t164D);
  real _t164F = prim *0034 (_t1645, _t164E);
  real _t1650 = prim +0017<$[]> (_t1642, _t164F);
  int _t1651 = -4;
  real _t1652 = (real)_t1651;
  int _t1653 = 4;
  real _t1654 = prim ^0068 (z1572, _t1653);
  real _t1655 = prim *0034 (_t1652, _t1654);
  int _t1656 = 2;
  real _t1657 = prim ^0068 (x1570, _t1656);
  int _t1658 = 2;
  real _t1659 = prim ^0068 (y1571, _t1658);
  real _t165A = prim +0017<$[]> (_t1657, _t1659);
  int _t165B = 2;
  real _t165C = prim ^0068 (z1572, _t165B);
  real _t165D = prim +0017<$[]> (_t165A, _t165C);
  real _t165E = prim sin0171 (_t165D);
  real _t165F = prim *0034 (_t1655, _t165E);
  real _t1660 = 0.1e2;
  int _t1661 = 2;
  real _t1662 = prim ^0068 (z1572, _t1661);
  real _t1663 = prim *0034 (_t1660, _t1662);
  int _t1664 = 2;
  real _t1665 = prim ^0068 (x1570, _t1664);
  int _t1666 = 2;
  real _t1667 = prim ^0068 (y1571, _t1666);
  real _t1668 = prim +0017<$[]> (_t1665, _t1667);
  int _t1669 = 2;
  real _t166A = prim ^0068 (z1572, _t1669);
  real _t166B = prim +0017<$[]> (_t1668, _t166A);
  real _t166C = prim cos0169 (_t166B);
  real _t166D = prim *0034 (_t1663, _t166C);
  real _t166E = prim +0017<$[]> (_t165F, _t166D);
  real _t166F = 0.2e1;
  int _t1670 = 2;
  real _t1671 = prim ^0068 (x1570, _t1670);
  int _t1672 = 2;
  real _t1673 = prim ^0068 (y1571, _t1672);
  real _t1674 = prim +0017<$[]> (_t1671, _t1673);
  int _t1675 = 2;
  real _t1676 = prim ^0068 (z1572, _t1675);
  real _t1677 = prim +0017<$[]> (_t1674, _t1676);
  real _t1678 = prim sin0171 (_t1677);
  real _t1679 = prim *0034 (_t166F, _t1678);
  real _t167A = prim +0017<$[]> (_t166E, _t1679);
  vec3 _t167B = [_t1632, _t1650, _t167A];
  tensor[3,3] hess167C = [_t15C3, _t1614, _t167B];
  H128F = hess167C;
  vec3[3] E1290 = prim evecs00A0 (H128F);
  real[3] L1291 = prim evals009F (H128F);
  real _t1292 = 0.1e1;
  int _t1293 = 2;
  real _t1294 = prim $sub01C0<real; %3> (L1291, _t1293);
  real _t1295 = prim /0055 (_t1292, _t1294);
  real _t1296 = prim unary -008B<$[]> (_t1295);
  int _t1297 = 2;
  vec3 _t1298 = prim $sub01C0<vec3; %3> (E1290, _t1297);
  vec3 _t1299 = prim *0036<$[3]> (_t1296, _t1298);
  int _t129A = 2;
  vec3 _t129B = prim $sub01C0<vec3; %3> (E1290, _t129A);
  tensor[3,3] _t129C = prim ⊗00E5<$[3]; $[3]; $[3,3]> (_t1299, _t129B);
  vec3 up129D = prim •00CE<$[3,3]; $[3]; $[3]> (_t129C, g128E);
  bool _t129E;
  real _t129F = up129D[0];
  real _t12A0 = up129D[0];
  bool _t12A1 = prim ==0084 (_t129F, _t12A0);
  bool _t12A2 = prim !00BC (_t12A1);
  if _t12A2 {
    _t129E = true;
  } else {
    bool _t12A3;
    real _t12A4 = up129D[1];
    real _t12A5 = up129D[1];
    bool _t12A6 = prim ==0084 (_t12A4, _t12A5);
    bool _t12A7 = prim !00BC (_t12A6);
    if _t12A7 {
      _t12A3 = true;
    } else {
      real _t12A8 = up129D[2];
      real _t12A9 = up129D[2];
      bool _t12AA = prim ==0084 (_t12A8, _t12A9);
      _t12A3 = prim !00BC (_t12AA);
    }
    _t129E = _t12A3;
  }
  if _t129E {
    real _t12AB = +inf;
    real _t12AC = +inf;
    real _t12AD = +inf;
    vec3 _t12AE = [_t12AB, _t12AC, _t12AD];
    return _t12AE;
  }
  return up129D;
}
function tensor[3,3]#4 fPerp12BE (vec3 s12BF)
{
  vec3 g12C0;
  real x17C7 = s12BF[0];
  real y17C8 = s12BF[1];
  real z17C9 = s12BF[2];
  real _t17CA = 0.2e1;
  real _t17CB = prim *0034 (_t17CA, x17C7);
  int _t17CC = 2;
  real _t17CD = prim ^0068 (z17C9, _t17CC);
  real _t17CE = prim *0034 (_t17CB, _t17CD);
  int _t17CF = 2;
  real _t17D0 = prim ^0068 (x17C7, _t17CF);
  int _t17D1 = 2;
  real _t17D2 = prim ^0068 (y17C8, _t17D1);
  real _t17D3 = prim +0017<$[]> (_t17D0, _t17D2);
  int _t17D4 = 2;
  real _t17D5 = prim ^0068 (z17C9, _t17D4);
  real _t17D6 = prim +0017<$[]> (_t17D3, _t17D5);
  real _t17D7 = prim cos0169 (_t17D6);
  real _t17D8 = prim *0034 (_t17CE, _t17D7);
  real _t17D9 = 0.2e1;
  real _t17DA = prim *0034 (_t17D9, y17C8);
  int _t17DB = 2;
  real _t17DC = prim ^0068 (z17C9, _t17DB);
  real _t17DD = prim *0034 (_t17DA, _t17DC);
  int _t17DE = 2;
  real _t17DF = prim ^0068 (x17C7, _t17DE);
  int _t17E0 = 2;
  real _t17E1 = prim ^0068 (y17C8, _t17E0);
  real _t17E2 = prim +0017<$[]> (_t17DF, _t17E1);
  int _t17E3 = 2;
  real _t17E4 = prim ^0068 (z17C9, _t17E3);
  real _t17E5 = prim +0017<$[]> (_t17E2, _t17E4);
  real _t17E6 = prim cos0169 (_t17E5);
  real _t17E7 = prim *0034 (_t17DD, _t17E6);
  real _t17E8 = 0.2e1;
  int _t17E9 = 3;
  real _t17EA = prim ^0068 (z17C9, _t17E9);
  real _t17EB = prim *0034 (_t17E8, _t17EA);
  int _t17EC = 2;
  real _t17ED = prim ^0068 (x17C7, _t17EC);
  int _t17EE = 2;
  real _t17EF = prim ^0068 (y17C8, _t17EE);
  real _t17F0 = prim +0017<$[]> (_t17ED, _t17EF);
  int _t17F1 = 2;
  real _t17F2 = prim ^0068 (z17C9, _t17F1);
  real _t17F3 = prim +0017<$[]> (_t17F0, _t17F2);
  real _t17F4 = prim cos0169 (_t17F3);
  real _t17F5 = prim *0034 (_t17EB, _t17F4);
  real _t17F6 = 0.2e1;
  real _t17F7 = prim *0034 (_t17F6, z17C9);
  int _t17F8 = 2;
  real _t17F9 = prim ^0068 (x17C7, _t17F8);
  int _t17FA = 2;
  real _t17FB = prim ^0068 (y17C8, _t17FA);
  real _t17FC = prim +0017<$[]> (_t17F9, _t17FB);
  int _t17FD = 2;
  real _t17FE = prim ^0068 (z17C9, _t17FD);
  real _t17FF = prim +0017<$[]> (_t17FC, _t17FE);
  real _t1800 = prim sin0171 (_t17FF);
  real _t1801 = prim *0034 (_t17F7, _t1800);
  real _t1802 = prim +0017<$[]> (_t17F5, _t1801);
  vec3 g1803 = [_t17D8, _t17E7, _t1802];
  g12C0 = g1803;
  tensor[3,3] H12C1;
  real x16BA = s12BF[0];
  real y16BB = s12BF[1];
  real z16BC = s12BF[2];
  int _t16BD = -4;
  real _t16BE = (real)_t16BD;
  int _t16BF = 2;
  real _t16C0 = prim ^0068 (x16BA, _t16BF);
  real _t16C1 = prim *0034 (_t16BE, _t16C0);
  int _t16C2 = 2;
  real _t16C3 = prim ^0068 (z16BC, _t16C2);
  real _t16C4 = prim *0034 (_t16C1, _t16C3);
  int _t16C5 = 2;
  real _t16C6 = prim ^0068 (x16BA, _t16C5);
  int _t16C7 = 2;
  real _t16C8 = prim ^0068 (y16BB, _t16C7);
  real _t16C9 = prim +0017<$[]> (_t16C6, _t16C8);
  int _t16CA = 2;
  real _t16CB = prim ^0068 (z16BC, _t16CA);
  real _t16CC = prim +0017<$[]> (_t16C9, _t16CB);
  real _t16CD = prim sin0171 (_t16CC);
  real _t16CE = prim *0034 (_t16C4, _t16CD);
  real _t16CF = 0.2e1;
  int _t16D0 = 2;
  real _t16D1 = prim ^0068 (z16BC, _t16D0);
  real _t16D2 = prim *0034 (_t16CF, _t16D1);
  int _t16D3 = 2;
  real _t16D4 = prim ^0068 (x16BA, _t16D3);
  int _t16D5 = 2;
  real _t16D6 = prim ^0068 (y16BB, _t16D5);
  real _t16D7 = prim +0017<$[]> (_t16D4, _t16D6);
  int _t16D8 = 2;
  real _t16D9 = prim ^0068 (z16BC, _t16D8);
  real _t16DA = prim +0017<$[]> (_t16D7, _t16D9);
  real _t16DB = prim cos0169 (_t16DA);
  real _t16DC = prim *0034 (_t16D2, _t16DB);
  real _t16DD = prim +0017<$[]> (_t16CE, _t16DC);
  int _t16DE = -4;
  real _t16DF = (real)_t16DE;
  real _t16E0 = prim *0034 (_t16DF, x16BA);
  real _t16E1 = prim *0034 (_t16E0, y16BB);
  int _t16E2 = 2;
  real _t16E3 = prim ^0068 (z16BC, _t16E2);
  real _t16E4 = prim *0034 (_t16E1, _t16E3);
  int _t16E5 = 2;
  real _t16E6 = prim ^0068 (x16BA, _t16E5);
  int _t16E7 = 2;
  real _t16E8 = prim ^0068 (y16BB, _t16E7);
  real _t16E9 = prim +0017<$[]> (_t16E6, _t16E8);
  int _t16EA = 2;
  real _t16EB = prim ^0068 (z16BC, _t16EA);
  real _t16EC = prim +0017<$[]> (_t16E9, _t16EB);
  real _t16ED = prim sin0171 (_t16EC);
  real _t16EE = prim *0034 (_t16E4, _t16ED);
  int _t16EF = -4;
  real _t16F0 = (real)_t16EF;
  real _t16F1 = prim *0034 (_t16F0, x16BA);
  int _t16F2 = 3;
  real _t16F3 = prim ^0068 (z16BC, _t16F2);
  real _t16F4 = prim *0034 (_t16F1, _t16F3);
  int _t16F5 = 2;
  real _t16F6 = prim ^0068 (x16BA, _t16F5);
  int _t16F7 = 2;
  real _t16F8 = prim ^0068 (y16BB, _t16F7);
  real _t16F9 = prim +0017<$[]> (_t16F6, _t16F8);
  int _t16FA = 2;
  real _t16FB = prim ^0068 (z16BC, _t16FA);
  real _t16FC = prim +0017<$[]> (_t16F9, _t16FB);
  real _t16FD = prim sin0171 (_t16FC);
  real _t16FE = prim *0034 (_t16F4, _t16FD);
  real _t16FF = 0.4e1;
  real _t1700 = prim *0034 (_t16FF, x16BA);
  real _t1701 = prim *0034 (_t1700, z16BC);
  int _t1702 = 2;
  real _t1703 = prim ^0068 (x16BA, _t1702);
  int _t1704 = 2;
  real _t1705 = prim ^0068 (y16BB, _t1704);
  real _t1706 = prim +0017<$[]> (_t1703, _t1705);
  int _t1707 = 2;
  real _t1708 = prim ^0068 (z16BC, _t1707);
  real _t1709 = prim +0017<$[]> (_t1706, _t1708);
  real _t170A = prim cos0169 (_t1709);
  real _t170B = prim *0034 (_t1701, _t170A);
  real _t170C = prim +0017<$[]> (_t16FE, _t170B);
  vec3 _t170D = [_t16DD, _t16EE, _t170C];
  int _t170E = -4;
  real _t170F = (real)_t170E;
  real _t1710 = prim *0034 (_t170F, x16BA);
  real _t1711 = prim *0034 (_t1710, y16BB);
  int _t1712 = 2;
  real _t1713 = prim ^0068 (z16BC, _t1712);
  real _t1714 = prim *0034 (_t1711, _t1713);
  int _t1715 = 2;
  real _t1716 = prim ^0068 (x16BA, _t1715);
  int _t1717 = 2;
  real _t1718 = prim ^0068 (y16BB, _t1717);
  real _t1719 = prim +0017<$[]> (_t1716, _t1718);
  int _t171A = 2;
  real _t171B = prim ^0068 (z16BC, _t171A);
  real _t171C = prim +0017<$[]> (_t1719, _t171B);
  real _t171D = prim sin0171 (_t171C);
  real _t171E = prim *0034 (_t1714, _t171D);
  int _t171F = -4;
  real _t1720 = (real)_t171F;
  int _t1721 = 2;
  real _t1722 = prim ^0068 (y16BB, _t1721);
  real _t1723 = prim *0034 (_t1720, _t1722);
  int _t1724 = 2;
  real _t1725 = prim ^0068 (z16BC, _t1724);
  real _t1726 = prim *0034 (_t1723, _t1725);
  int _t1727 = 2;
  real _t1728 = prim ^0068 (x16BA, _t1727);
  int _t1729 = 2;
  real _t172A = prim ^0068 (y16BB, _t1729);
  real _t172B = prim +0017<$[]> (_t1728, _t172A);
  int _t172C = 2;
  real _t172D = prim ^0068 (z16BC, _t172C);
  real _t172E = prim +0017<$[]> (_t172B, _t172D);
  real _t172F = prim sin0171 (_t172E);
  real _t1730 = prim *0034 (_t1726, _t172F);
  real _t1731 = 0.2e1;
  int _t1732 = 2;
  real _t1733 = prim ^0068 (z16BC, _t1732);
  real _t1734 = prim *0034 (_t1731, _t1733);
  int _t1735 = 2;
  real _t1736 = prim ^0068 (x16BA, _t1735);
  int _t1737 = 2;
  real _t1738 = prim ^0068 (y16BB, _t1737);
  real _t1739 = prim +0017<$[]> (_t1736, _t1738);
  int _t173A = 2;
  real _t173B = prim ^0068 (z16BC, _t173A);
  real _t173C = prim +0017<$[]> (_t1739, _t173B);
  real _t173D = prim cos0169 (_t173C);
  real _t173E = prim *0034 (_t1734, _t173D);
  real _t173F = prim +0017<$[]> (_t1730, _t173E);
  int _t1740 = -4;
  real _t1741 = (real)_t1740;
  real _t1742 = prim *0034 (_t1741, y16BB);
  int _t1743 = 3;
  real _t1744 = prim ^0068 (z16BC, _t1743);
  real _t1745 = prim *0034 (_t1742, _t1744);
  int _t1746 = 2;
  real _t1747 = prim ^0068 (x16BA, _t1746);
  int _t1748 = 2;
  real _t1749 = prim ^0068 (y16BB, _t1748);
  real _t174A = prim +0017<$[]> (_t1747, _t1749);
  int _t174B = 2;
  real _t174C = prim ^0068 (z16BC, _t174B);
  real _t174D = prim +0017<$[]> (_t174A, _t174C);
  real _t174E = prim sin0171 (_t174D);
  real _t174F = prim *0034 (_t1745, _t174E);
  real _t1750 = 0.4e1;
  real _t1751 = prim *0034 (_t1750, y16BB);
  real _t1752 = prim *0034 (_t1751, z16BC);
  int _t1753 = 2;
  real _t1754 = prim ^0068 (x16BA, _t1753);
  int _t1755 = 2;
  real _t1756 = prim ^0068 (y16BB, _t1755);
  real _t1757 = prim +0017<$[]> (_t1754, _t1756);
  int _t1758 = 2;
  real _t1759 = prim ^0068 (z16BC, _t1758);
  real _t175A = prim +0017<$[]> (_t1757, _t1759);
  real _t175B = prim cos0169 (_t175A);
  real _t175C = prim *0034 (_t1752, _t175B);
  real _t175D = prim +0017<$[]> (_t174F, _t175C);
  vec3 _t175E = [_t171E, _t173F, _t175D];
  int _t175F = -4;
  real _t1760 = (real)_t175F;
  real _t1761 = prim *0034 (_t1760, x16BA);
  int _t1762 = 3;
  real _t1763 = prim ^0068 (z16BC, _t1762);
  real _t1764 = prim *0034 (_t1761, _t1763);
  int _t1765 = 2;
  real _t1766 = prim ^0068 (x16BA, _t1765);
  int _t1767 = 2;
  real _t1768 = prim ^0068 (y16BB, _t1767);
  real _t1769 = prim +0017<$[]> (_t1766, _t1768);
  int _t176A = 2;
  real _t176B = prim ^0068 (z16BC, _t176A);
  real _t176C = prim +0017<$[]> (_t1769, _t176B);
  real _t176D = prim sin0171 (_t176C);
  real _t176E = prim *0034 (_t1764, _t176D);
  real _t176F = 0.4e1;
  real _t1770 = prim *0034 (_t176F, x16BA);
  real _t1771 = prim *0034 (_t1770, z16BC);
  int _t1772 = 2;
  real _t1773 = prim ^0068 (x16BA, _t1772);
  int _t1774 = 2;
  real _t1775 = prim ^0068 (y16BB, _t1774);
  real _t1776 = prim +0017<$[]> (_t1773, _t1775);
  int _t1777 = 2;
  real _t1778 = prim ^0068 (z16BC, _t1777);
  real _t1779 = prim +0017<$[]> (_t1776, _t1778);
  real _t177A = prim cos0169 (_t1779);
  real _t177B = prim *0034 (_t1771, _t177A);
  real _t177C = prim +0017<$[]> (_t176E, _t177B);
  int _t177D = -4;
  real _t177E = (real)_t177D;
  real _t177F = prim *0034 (_t177E, y16BB);
  int _t1780 = 3;
  real _t1781 = prim ^0068 (z16BC, _t1780);
  real _t1782 = prim *0034 (_t177F, _t1781);
  int _t1783 = 2;
  real _t1784 = prim ^0068 (x16BA, _t1783);
  int _t1785 = 2;
  real _t1786 = prim ^0068 (y16BB, _t1785);
  real _t1787 = prim +0017<$[]> (_t1784, _t1786);
  int _t1788 = 2;
  real _t1789 = prim ^0068 (z16BC, _t1788);
  real _t178A = prim +0017<$[]> (_t1787, _t1789);
  real _t178B = prim sin0171 (_t178A);
  real _t178C = prim *0034 (_t1782, _t178B);
  real _t178D = 0.4e1;
  real _t178E = prim *0034 (_t178D, y16BB);
  real _t178F = prim *0034 (_t178E, z16BC);
  int _t1790 = 2;
  real _t1791 = prim ^0068 (x16BA, _t1790);
  int _t1792 = 2;
  real _t1793 = prim ^0068 (y16BB, _t1792);
  real _t1794 = prim +0017<$[]> (_t1791, _t1793);
  int _t1795 = 2;
  real _t1796 = prim ^0068 (z16BC, _t1795);
  real _t1797 = prim +0017<$[]> (_t1794, _t1796);
  real _t1798 = prim cos0169 (_t1797);
  real _t1799 = prim *0034 (_t178F, _t1798);
  real _t179A = prim +0017<$[]> (_t178C, _t1799);
  int _t179B = -4;
  real _t179C = (real)_t179B;
  int _t179D = 4;
  real _t179E = prim ^0068 (z16BC, _t179D);
  real _t179F = prim *0034 (_t179C, _t179E);
  int _t17A0 = 2;
  real _t17A1 = prim ^0068 (x16BA, _t17A0);
  int _t17A2 = 2;
  real _t17A3 = prim ^0068 (y16BB, _t17A2);
  real _t17A4 = prim +0017<$[]> (_t17A1, _t17A3);
  int _t17A5 = 2;
  real _t17A6 = prim ^0068 (z16BC, _t17A5);
  real _t17A7 = prim +0017<$[]> (_t17A4, _t17A6);
  real _t17A8 = prim sin0171 (_t17A7);
  real _t17A9 = prim *0034 (_t179F, _t17A8);
  real _t17AA = 0.1e2;
  int _t17AB = 2;
  real _t17AC = prim ^0068 (z16BC, _t17AB);
  real _t17AD = prim *0034 (_t17AA, _t17AC);
  int _t17AE = 2;
  real _t17AF = prim ^0068 (x16BA, _t17AE);
  int _t17B0 = 2;
  real _t17B1 = prim ^0068 (y16BB, _t17B0);
  real _t17B2 = prim +0017<$[]> (_t17AF, _t17B1);
  int _t17B3 = 2;
  real _t17B4 = prim ^0068 (z16BC, _t17B3);
  real _t17B5 = prim +0017<$[]> (_t17B2, _t17B4);
  real _t17B6 = prim cos0169 (_t17B5);
  real _t17B7 = prim *0034 (_t17AD, _t17B6);
  real _t17B8 = prim +0017<$[]> (_t17A9, _t17B7);
  real _t17B9 = 0.2e1;
  int _t17BA = 2;
  real _t17BB = prim ^0068 (x16BA, _t17BA);
  int _t17BC = 2;
  real _t17BD = prim ^0068 (y16BB, _t17BC);
  real _t17BE = prim +0017<$[]> (_t17BB, _t17BD);
  int _t17BF = 2;
  real _t17C0 = prim ^0068 (z16BC, _t17BF);
  real _t17C1 = prim +0017<$[]> (_t17BE, _t17C0);
  real _t17C2 = prim sin0171 (_t17C1);
  real _t17C3 = prim *0034 (_t17B9, _t17C2);
  real _t17C4 = prim +0017<$[]> (_t17B8, _t17C3);
  vec3 _t17C5 = [_t177C, _t179A, _t17C4];
  tensor[3,3] hess17C6 = [_t170D, _t175E, _t17C5];
  H12C1 = hess17C6;
  vec3[3] _t12C2 = prim evecs00A0 (H12C1);
  int _t12C3 = 2;
  vec3 E212C4 = prim $sub01C0<vec3; %3> (_t12C2, _t12C3);
  tensor[3,3] _t12C5 = prim $id01B9<%3> ();
  tensor[3,3] _t12C6 = prim ⊗00E5<$[3]; $[3]; $[3,3]> (E212C4, E212C4);
  tensor[3,3] m12C7 = prim -0026<$[3,3]> (_t12C5, _t12C6);
  real t12C8 = prim :00FC<$[3,3]; $[3,3]; $[]> (m12C7, m12C7);
  bool _t12C9 = prim ==0084 (t12C8, t12C8);
  bool _t12CA = prim !00BC (_t12C9);
  if _t12CA {
    tensor[3,3] _t12CB = prim $zero01BB<$[3,3]> ();
    return _t12CB;
  }
  return m12C7;
}
function real#12 urnd135C (real x135D)
{
  real _t135E = 0.e0;
  bool _t135F = prim ==0084 (x135D, _t135E);
  if _t135F {
    real _t1360 = 0.e0;
    return _t1360;
  }
  real _t1361 = prim |()|00B5<$[]> (x135D);
  real l21362 = prim log2018D (_t1361);
  real _t1363 = 0.2e1;
  real _t1364 = prim floor0189 (l21362);
  real _t1365 = prim -0026<$[]> (l21362, _t1364);
  real _t1366 = 0.1e1;
  real _t1367 = prim -0026<$[]> (_t1365, _t1366);
  real frxp1368 = prim ^0069 (_t1363, _t1367);
  real _t1369 = 0.2e1;
  int _t136A = 20;
  real _t136B = prim ^0068 (_t1369, _t136A);
  int _t136C = 2;
  int _t136D = prim *0033 (_t136C, iter1359);
  real _t136E = (real)_t136D;
  real _t136F = prim +0017<$[]> (_t136B, _t136E);
  real _t1370 = prim *0034 (_t136F, frxp1368);
  real _t1371 = 0.1e1;
  real _t1372 = prim fmod018A (_t1370, _t1371);
  return _t1372;
}
globalInit {
  int _t07BE = 0;
  int _t07BC = 1;
  int _t07C0 = extractFemItem(NumCell(Mesh), int, meshData07BA);
  int _t07BF = prim -0024 (_t07C0, _t07BC);
  int[] _t07C3 = prim $range01C3 (_t07BE, _t07BF);
  Femdata: MeshCell[] _t07C4 = {};
  foreach _t07C2 in _t07C3 {
    Femdata: MeshCell _t07C5 = loadFem(MeshCell, meshData07BA, _t07C2);
    _t07C4 = prim @0010<Femdata: MeshCell> (_t07C4, _t07C5);
  }
  Femdata: RefCell simplex1B0C;
  Femdata: RefCell _t1B0D = extractFemItem(RefCell(Mesh), Femdata: RefCell, meshData07BA);
  simplex1B0C = _t1B0D;
  simplex1115 = simplex1B0C;
  int _t12E7;
  int _t12E8 = 2;
  bool _t12E9 = prim ==0082 (_t12E8, fDim07DF);
  if _t12E9 {
    _t12E7 = 6;
  } else {
    int _t12EA;
    int _t12EB = 1;
    bool _t12EC = prim ==0082 (_t12EB, fDim07DF);
    if _t12EC {
      _t12EA = 2;
    } else {
      _t12EA = 0;
    }
    _t12E7 = _t12EA;
  }
  nnmin12ED = _t12E7;
  int _t12EE;
  int _t12EF = 2;
  bool _t12F0 = prim ==0082 (_t12EF, fDim07DF);
  if _t12F0 {
    _t12EE = 8;
  } else {
    int _t12F1;
    int _t12F2 = 1;
    bool _t12F3 = prim ==0082 (_t12F2, fDim07DF);
    if _t12F3 {
      _t12F1 = 3;
    } else {
      _t12F1 = 0;
    }
    _t12EE = _t12F1;
  }
  nnmax12F4 = _t12EE;
  real _t133F = 0.2e1;
  real _t1340 = 0.3e1;
  phiWellRad1341 = prim /0055 (_t133F, _t1340);
  rad1342 = prim /0055 (tipd07CD, phiWellRad1341);
  real _t1353 = 0.1e1;
  int _t1354 = 2;
  int _t1355 = prim *0033 (_t1354, pcp07DD);
  real _t1356 = (real)_t1355;
  real _t1357 = prim /0055 (_t1353, _t1356);
  pchist1358 = prim ^0069 (hist07DC, _t1357);
  iter1359 = 0;
  rpc135A = 0.1e1;
  popLast135B = -1;
}
strand point (vec3 p01396, real hh01397) in 3D {
  output vec3 pos1398;
  output vec3 _pos1399;
  real ID139A;
  real hh139B;
  vec3 step139C;
  bool found13A0;
  int nfs13A1;
  real trav13A2;
  real mvmt13A3;
  real closest13A4;
  int born13A5;
  bool first13A6;
  {
    pos1398 = p01396;
    _pos1399 = pos1398;
    real ID1B0E;
    real _t1B0F = 0.1e7;
    real _t1B10;
    real _t1B11 = p01396[0];
    real _t1B12 = func urnd135C (_t1B11);
    real _t1B13 = p01396[1];
    real _t1B14 = func urnd135C (_t1B13);
    real _t1B15 = prim +0017<$[]> (_t1B12, _t1B14);
    real _t1B16 = p01396[2];
    real _t1B17 = func urnd135C (_t1B16);
    real _t1B18 = prim +0017<$[]> (_t1B15, _t1B17);
    real _t1B19 = 0.1e1;
    real _t1B1A = prim fmod018A (_t1B18, _t1B19);
    _t1B10 = _t1B1A;
    real _t1B1B = prim *0034 (_t1B0F, _t1B10);
    real _t1B1C = prim floor0189 (_t1B1B);
    ID1B0E = _t1B1C;
    ID139A = ID1B0E;
    hh139B = hh01397;
    real _t139D = 0.e0;
    real _t139E = 0.e0;
    real _t139F = 0.e0;
    step139C = [_t139D, _t139E, _t139F];
    found13A0 = false;
    nfs13A1 = 0;
    trav13A2 = 0.e0;
    mvmt13A3 = 0.1e1;
    closest13A4 = rad1342;
    born13A5 = 0;
    first13A6 = true;
  }
  update
  {
    bool vv13A7 = false;
    if first13A6 {
      bool _t13A8;
      bool _t13A9;
      int _t13AA = 0;
      bool _t13AB = prim >007F (verb07DA, _t13AA);
      if _t13AB {
        _t13A9 = vv13A7;
      } else {
        _t13A9 = false;
      }
      if _t13A9 {
        _t13A8 = true;
      } else {
        int _t13AC = 1;
        _t13A8 = prim >007F (verb07DA, _t13AC);
      }
      if _t13A8 {
        string _t13AD = "(i#";
        string _t13AE = " @ ";
        string _t13AF = "): ";
        print (ID139A, _t13AD, iter1359, _t13AE, pos1398, _t13AF);
        string _t13B0 = " HELLO!\n";
        print (_t13B0);
      }
    }
    bool _t13B1;
    bool _t2053;
    bool _t2054;
    real _t2055 = 0.e0;
    real _t2056 = 0.e0;
    real _t2057 = 0.e0;
    vec3 _t2058 = [_t2055, _t2056, _t2057];
    vec3 mid2059 = prim -0026<$[3]> (pos1398, _t2058);
    bool _t205A;
    real _t205B = mid2059[0];
    real _t205C = prim |()|00B5<$[]> (_t205B);
    real _t205D = 0.1e0;
    bool _t205E = prim >0080 (_t205C, _t205D);
    if _t205E {
      bool _t205F;
      real _t2060 = mid2059[1];
      real _t2061 = prim |()|00B5<$[]> (_t2060);
      real _t2062 = 0.1e0;
      bool _t2063 = prim >0080 (_t2061, _t2062);
      if _t2063 {
        real _t2064 = mid2059[2];
        real _t2065 = prim |()|00B5<$[]> (_t2064);
        real _t2066 = 0.1e0;
        _t205F = prim >0080 (_t2065, _t2066);
      } else {
        _t205F = false;
      }
      _t205A = _t205F;
    } else {
      _t205A = false;
    }
    bool z2067 = _t205A;
    bool _t2068;
    real _t2069 = prim |()|00B5<$[3]> (mid2059);
    real _t206A = 0.4e1;
    bool _t206B = prim <007A (_t2069, _t206A);
    if _t206B {
      real _t206C = prim |()|00B5<$[3]> (mid2059);
      real _t206D = 0.3e1;
      _t2068 = prim >0080 (_t206C, _t206D);
    } else {
      _t2068 = false;
    }
    _t2054 = _t2068;
    if _t2054 {
      bool _t206E;
      real _t206F;
      vec3 g2070;
      real x2071 = pos1398[0];
      real y2072 = pos1398[1];
      real z2073 = pos1398[2];
      real _t2074 = 0.2e1;
      real _t2075 = prim *0034 (_t2074, x2071);
      int _t2076 = 2;
      real _t2077 = prim ^0068 (z2073, _t2076);
      real _t2078 = prim *0034 (_t2075, _t2077);
      int _t2079 = 2;
      real _t207A = prim ^0068 (x2071, _t2079);
      int _t207B = 2;
      real _t207C = prim ^0068 (y2072, _t207B);
      real _t207D = prim +0017<$[]> (_t207A, _t207C);
      int _t207E = 2;
      real _t207F = prim ^0068 (z2073, _t207E);
      real _t2080 = prim +0017<$[]> (_t207D, _t207F);
      real _t2081 = prim cos0169 (_t2080);
      real _t2082 = prim *0034 (_t2078, _t2081);
      real _t2083 = 0.2e1;
      real _t2084 = prim *0034 (_t2083, y2072);
      int _t2085 = 2;
      real _t2086 = prim ^0068 (z2073, _t2085);
      real _t2087 = prim *0034 (_t2084, _t2086);
      int _t2088 = 2;
      real _t2089 = prim ^0068 (x2071, _t2088);
      int _t208A = 2;
      real _t208B = prim ^0068 (y2072, _t208A);
      real _t208C = prim +0017<$[]> (_t2089, _t208B);
      int _t208D = 2;
      real _t208E = prim ^0068 (z2073, _t208D);
      real _t208F = prim +0017<$[]> (_t208C, _t208E);
      real _t2090 = prim cos0169 (_t208F);
      real _t2091 = prim *0034 (_t2087, _t2090);
      real _t2092 = 0.2e1;
      int _t2093 = 3;
      real _t2094 = prim ^0068 (z2073, _t2093);
      real _t2095 = prim *0034 (_t2092, _t2094);
      int _t2096 = 2;
      real _t2097 = prim ^0068 (x2071, _t2096);
      int _t2098 = 2;
      real _t2099 = prim ^0068 (y2072, _t2098);
      real _t209A = prim +0017<$[]> (_t2097, _t2099);
      int _t209B = 2;
      real _t209C = prim ^0068 (z2073, _t209B);
      real _t209D = prim +0017<$[]> (_t209A, _t209C);
      real _t209E = prim cos0169 (_t209D);
      real _t209F = prim *0034 (_t2095, _t209E);
      real _t20A0 = 0.2e1;
      real _t20A1 = prim *0034 (_t20A0, z2073);
      int _t20A2 = 2;
      real _t20A3 = prim ^0068 (x2071, _t20A2);
      int _t20A4 = 2;
      real _t20A5 = prim ^0068 (y2072, _t20A4);
      real _t20A6 = prim +0017<$[]> (_t20A3, _t20A5);
      int _t20A7 = 2;
      real _t20A8 = prim ^0068 (z2073, _t20A7);
      real _t20A9 = prim +0017<$[]> (_t20A6, _t20A8);
      real _t20AA = prim sin0171 (_t20A9);
      real _t20AB = prim *0034 (_t20A1, _t20AA);
      real _t20AC = prim +0017<$[]> (_t209F, _t20AB);
      vec3 g20AD = [_t2082, _t2091, _t20AC];
      g2070 = g20AD;
      tensor[3,3] H20AE;
      real x20AF = pos1398[0];
      real y20B0 = pos1398[1];
      real z20B1 = pos1398[2];
      int _t20B2 = -4;
      real _t20B3 = (real)_t20B2;
      int _t20B4 = 2;
      real _t20B5 = prim ^0068 (x20AF, _t20B4);
      real _t20B6 = prim *0034 (_t20B3, _t20B5);
      int _t20B7 = 2;
      real _t20B8 = prim ^0068 (z20B1, _t20B7);
      real _t20B9 = prim *0034 (_t20B6, _t20B8);
      int _t20BA = 2;
      real _t20BB = prim ^0068 (x20AF, _t20BA);
      int _t20BC = 2;
      real _t20BD = prim ^0068 (y20B0, _t20BC);
      real _t20BE = prim +0017<$[]> (_t20BB, _t20BD);
      int _t20BF = 2;
      real _t20C0 = prim ^0068 (z20B1, _t20BF);
      real _t20C1 = prim +0017<$[]> (_t20BE, _t20C0);
      real _t20C2 = prim sin0171 (_t20C1);
      real _t20C3 = prim *0034 (_t20B9, _t20C2);
      real _t20C4 = 0.2e1;
      int _t20C5 = 2;
      real _t20C6 = prim ^0068 (z20B1, _t20C5);
      real _t20C7 = prim *0034 (_t20C4, _t20C6);
      int _t20C8 = 2;
      real _t20C9 = prim ^0068 (x20AF, _t20C8);
      int _t20CA = 2;
      real _t20CB = prim ^0068 (y20B0, _t20CA);
      real _t20CC = prim +0017<$[]> (_t20C9, _t20CB);
      int _t20CD = 2;
      real _t20CE = prim ^0068 (z20B1, _t20CD);
      real _t20CF = prim +0017<$[]> (_t20CC, _t20CE);
      real _t20D0 = prim cos0169 (_t20CF);
      real _t20D1 = prim *0034 (_t20C7, _t20D0);
      real _t20D2 = prim +0017<$[]> (_t20C3, _t20D1);
      int _t20D3 = -4;
      real _t20D4 = (real)_t20D3;
      real _t20D5 = prim *0034 (_t20D4, x20AF);
      real _t20D6 = prim *0034 (_t20D5, y20B0);
      int _t20D7 = 2;
      real _t20D8 = prim ^0068 (z20B1, _t20D7);
      real _t20D9 = prim *0034 (_t20D6, _t20D8);
      int _t20DA = 2;
      real _t20DB = prim ^0068 (x20AF, _t20DA);
      int _t20DC = 2;
      real _t20DD = prim ^0068 (y20B0, _t20DC);
      real _t20DE = prim +0017<$[]> (_t20DB, _t20DD);
      int _t20DF = 2;
      real _t20E0 = prim ^0068 (z20B1, _t20DF);
      real _t20E1 = prim +0017<$[]> (_t20DE, _t20E0);
      real _t20E2 = prim sin0171 (_t20E1);
      real _t20E3 = prim *0034 (_t20D9, _t20E2);
      int _t20E4 = -4;
      real _t20E5 = (real)_t20E4;
      real _t20E6 = prim *0034 (_t20E5, x20AF);
      int _t20E7 = 3;
      real _t20E8 = prim ^0068 (z20B1, _t20E7);
      real _t20E9 = prim *0034 (_t20E6, _t20E8);
      int _t20EA = 2;
      real _t20EB = prim ^0068 (x20AF, _t20EA);
      int _t20EC = 2;
      real _t20ED = prim ^0068 (y20B0, _t20EC);
      real _t20EE = prim +0017<$[]> (_t20EB, _t20ED);
      int _t20EF = 2;
      real _t20F0 = prim ^0068 (z20B1, _t20EF);
      real _t20F1 = prim +0017<$[]> (_t20EE, _t20F0);
      real _t20F2 = prim sin0171 (_t20F1);
      real _t20F3 = prim *0034 (_t20E9, _t20F2);
      real _t20F4 = 0.4e1;
      real _t20F5 = prim *0034 (_t20F4, x20AF);
      real _t20F6 = prim *0034 (_t20F5, z20B1);
      int _t20F7 = 2;
      real _t20F8 = prim ^0068 (x20AF, _t20F7);
      int _t20F9 = 2;
      real _t20FA = prim ^0068 (y20B0, _t20F9);
      real _t20FB = prim +0017<$[]> (_t20F8, _t20FA);
      int _t20FC = 2;
      real _t20FD = prim ^0068 (z20B1, _t20FC);
      real _t20FE = prim +0017<$[]> (_t20FB, _t20FD);
      real _t20FF = prim cos0169 (_t20FE);
      real _t2100 = prim *0034 (_t20F6, _t20FF);
      real _t2101 = prim +0017<$[]> (_t20F3, _t2100);
      vec3 _t2102 = [_t20D2, _t20E3, _t2101];
      int _t2103 = -4;
      real _t2104 = (real)_t2103;
      real _t2105 = prim *0034 (_t2104, x20AF);
      real _t2106 = prim *0034 (_t2105, y20B0);
      int _t2107 = 2;
      real _t2108 = prim ^0068 (z20B1, _t2107);
      real _t2109 = prim *0034 (_t2106, _t2108);
      int _t210A = 2;
      real _t210B = prim ^0068 (x20AF, _t210A);
      int _t210C = 2;
      real _t210D = prim ^0068 (y20B0, _t210C);
      real _t210E = prim +0017<$[]> (_t210B, _t210D);
      int _t210F = 2;
      real _t2110 = prim ^0068 (z20B1, _t210F);
      real _t2111 = prim +0017<$[]> (_t210E, _t2110);
      real _t2112 = prim sin0171 (_t2111);
      real _t2113 = prim *0034 (_t2109, _t2112);
      int _t2114 = -4;
      real _t2115 = (real)_t2114;
      int _t2116 = 2;
      real _t2117 = prim ^0068 (y20B0, _t2116);
      real _t2118 = prim *0034 (_t2115, _t2117);
      int _t2119 = 2;
      real _t211A = prim ^0068 (z20B1, _t2119);
      real _t211B = prim *0034 (_t2118, _t211A);
      int _t211C = 2;
      real _t211D = prim ^0068 (x20AF, _t211C);
      int _t211E = 2;
      real _t211F = prim ^0068 (y20B0, _t211E);
      real _t2120 = prim +0017<$[]> (_t211D, _t211F);
      int _t2121 = 2;
      real _t2122 = prim ^0068 (z20B1, _t2121);
      real _t2123 = prim +0017<$[]> (_t2120, _t2122);
      real _t2124 = prim sin0171 (_t2123);
      real _t2125 = prim *0034 (_t211B, _t2124);
      real _t2126 = 0.2e1;
      int _t2127 = 2;
      real _t2128 = prim ^0068 (z20B1, _t2127);
      real _t2129 = prim *0034 (_t2126, _t2128);
      int _t212A = 2;
      real _t212B = prim ^0068 (x20AF, _t212A);
      int _t212C = 2;
      real _t212D = prim ^0068 (y20B0, _t212C);
      real _t212E = prim +0017<$[]> (_t212B, _t212D);
      int _t212F = 2;
      real _t2130 = prim ^0068 (z20B1, _t212F);
      real _t2131 = prim +0017<$[]> (_t212E, _t2130);
      real _t2132 = prim cos0169 (_t2131);
      real _t2133 = prim *0034 (_t2129, _t2132);
      real _t2134 = prim +0017<$[]> (_t2125, _t2133);
      int _t2135 = -4;
      real _t2136 = (real)_t2135;
      real _t2137 = prim *0034 (_t2136, y20B0);
      int _t2138 = 3;
      real _t2139 = prim ^0068 (z20B1, _t2138);
      real _t213A = prim *0034 (_t2137, _t2139);
      int _t213B = 2;
      real _t213C = prim ^0068 (x20AF, _t213B);
      int _t213D = 2;
      real _t213E = prim ^0068 (y20B0, _t213D);
      real _t213F = prim +0017<$[]> (_t213C, _t213E);
      int _t2140 = 2;
      real _t2141 = prim ^0068 (z20B1, _t2140);
      real _t2142 = prim +0017<$[]> (_t213F, _t2141);
      real _t2143 = prim sin0171 (_t2142);
      real _t2144 = prim *0034 (_t213A, _t2143);
      real _t2145 = 0.4e1;
      real _t2146 = prim *0034 (_t2145, y20B0);
      real _t2147 = prim *0034 (_t2146, z20B1);
      int _t2148 = 2;
      real _t2149 = prim ^0068 (x20AF, _t2148);
      int _t214A = 2;
      real _t214B = prim ^0068 (y20B0, _t214A);
      real _t214C = prim +0017<$[]> (_t2149, _t214B);
      int _t214D = 2;
      real _t214E = prim ^0068 (z20B1, _t214D);
      real _t214F = prim +0017<$[]> (_t214C, _t214E);
      real _t2150 = prim cos0169 (_t214F);
      real _t2151 = prim *0034 (_t2147, _t2150);
      real _t2152 = prim +0017<$[]> (_t2144, _t2151);
      vec3 _t2153 = [_t2113, _t2134, _t2152];
      int _t2154 = -4;
      real _t2155 = (real)_t2154;
      real _t2156 = prim *0034 (_t2155, x20AF);
      int _t2157 = 3;
      real _t2158 = prim ^0068 (z20B1, _t2157);
      real _t2159 = prim *0034 (_t2156, _t2158);
      int _t215A = 2;
      real _t215B = prim ^0068 (x20AF, _t215A);
      int _t215C = 2;
      real _t215D = prim ^0068 (y20B0, _t215C);
      real _t215E = prim +0017<$[]> (_t215B, _t215D);
      int _t215F = 2;
      real _t2160 = prim ^0068 (z20B1, _t215F);
      real _t2161 = prim +0017<$[]> (_t215E, _t2160);
      real _t2162 = prim sin0171 (_t2161);
      real _t2163 = prim *0034 (_t2159, _t2162);
      real _t2164 = 0.4e1;
      real _t2165 = prim *0034 (_t2164, x20AF);
      real _t2166 = prim *0034 (_t2165, z20B1);
      int _t2167 = 2;
      real _t2168 = prim ^0068 (x20AF, _t2167);
      int _t2169 = 2;
      real _t216A = prim ^0068 (y20B0, _t2169);
      real _t216B = prim +0017<$[]> (_t2168, _t216A);
      int _t216C = 2;
      real _t216D = prim ^0068 (z20B1, _t216C);
      real _t216E = prim +0017<$[]> (_t216B, _t216D);
      real _t216F = prim cos0169 (_t216E);
      real _t2170 = prim *0034 (_t2166, _t216F);
      real _t2171 = prim +0017<$[]> (_t2163, _t2170);
      int _t2172 = -4;
      real _t2173 = (real)_t2172;
      real _t2174 = prim *0034 (_t2173, y20B0);
      int _t2175 = 3;
      real _t2176 = prim ^0068 (z20B1, _t2175);
      real _t2177 = prim *0034 (_t2174, _t2176);
      int _t2178 = 2;
      real _t2179 = prim ^0068 (x20AF, _t2178);
      int _t217A = 2;
      real _t217B = prim ^0068 (y20B0, _t217A);
      real _t217C = prim +0017<$[]> (_t2179, _t217B);
      int _t217D = 2;
      real _t217E = prim ^0068 (z20B1, _t217D);
      real _t217F = prim +0017<$[]> (_t217C, _t217E);
      real _t2180 = prim sin0171 (_t217F);
      real _t2181 = prim *0034 (_t2177, _t2180);
      real _t2182 = 0.4e1;
      real _t2183 = prim *0034 (_t2182, y20B0);
      real _t2184 = prim *0034 (_t2183, z20B1);
      int _t2185 = 2;
      real _t2186 = prim ^0068 (x20AF, _t2185);
      int _t2187 = 2;
      real _t2188 = prim ^0068 (y20B0, _t2187);
      real _t2189 = prim +0017<$[]> (_t2186, _t2188);
      int _t218A = 2;
      real _t218B = prim ^0068 (z20B1, _t218A);
      real _t218C = prim +0017<$[]> (_t2189, _t218B);
      real _t218D = prim cos0169 (_t218C);
      real _t218E = prim *0034 (_t2184, _t218D);
      real _t218F = prim +0017<$[]> (_t2181, _t218E);
      int _t2190 = -4;
      real _t2191 = (real)_t2190;
      int _t2192 = 4;
      real _t2193 = prim ^0068 (z20B1, _t2192);
      real _t2194 = prim *0034 (_t2191, _t2193);
      int _t2195 = 2;
      real _t2196 = prim ^0068 (x20AF, _t2195);
      int _t2197 = 2;
      real _t2198 = prim ^0068 (y20B0, _t2197);
      real _t2199 = prim +0017<$[]> (_t2196, _t2198);
      int _t219A = 2;
      real _t219B = prim ^0068 (z20B1, _t219A);
      real _t219C = prim +0017<$[]> (_t2199, _t219B);
      real _t219D = prim sin0171 (_t219C);
      real _t219E = prim *0034 (_t2194, _t219D);
      real _t219F = 0.1e2;
      int _t21A0 = 2;
      real _t21A1 = prim ^0068 (z20B1, _t21A0);
      real _t21A2 = prim *0034 (_t219F, _t21A1);
      int _t21A3 = 2;
      real _t21A4 = prim ^0068 (x20AF, _t21A3);
      int _t21A5 = 2;
      real _t21A6 = prim ^0068 (y20B0, _t21A5);
      real _t21A7 = prim +0017<$[]> (_t21A4, _t21A6);
      int _t21A8 = 2;
      real _t21A9 = prim ^0068 (z20B1, _t21A8);
      real _t21AA = prim +0017<$[]> (_t21A7, _t21A9);
      real _t21AB = prim cos0169 (_t21AA);
      real _t21AC = prim *0034 (_t21A2, _t21AB);
      real _t21AD = prim +0017<$[]> (_t219E, _t21AC);
      real _t21AE = 0.2e1;
      int _t21AF = 2;
      real _t21B0 = prim ^0068 (x20AF, _t21AF);
      int _t21B1 = 2;
      real _t21B2 = prim ^0068 (y20B0, _t21B1);
      real _t21B3 = prim +0017<$[]> (_t21B0, _t21B2);
      int _t21B4 = 2;
      real _t21B5 = prim ^0068 (z20B1, _t21B4);
      real _t21B6 = prim +0017<$[]> (_t21B3, _t21B5);
      real _t21B7 = prim sin0171 (_t21B6);
      real _t21B8 = prim *0034 (_t21AE, _t21B7);
      real _t21B9 = prim +0017<$[]> (_t21AD, _t21B8);
      vec3 _t21BA = [_t2171, _t218F, _t21B9];
      tensor[3,3] hess21BB = [_t2102, _t2153, _t21BA];
      H20AE = hess21BB;
      real[3] _t21BC = prim evals009F (H20AE);
      int _t21BD = 2;
      real _t21BE = prim $sub01C0<real; %3> (_t21BC, _t21BD);
      real _t21BF = prim unary -008B<$[]> (_t21BE);
      real _t21C0 = prim |()|00B5<$[3]> (g2070);
      real _t21C1 = prim +0017<$[]> (fBias07CC, _t21C0);
      real str21C2 = prim /0055 (_t21BF, _t21C1);
      _t206F = str21C2;
      bool _t21C3 = prim >0080 (_t206F, fStrTh07CA);
      if _t21C3 {
        bool _t21C4;
        real _t21C5;
        real _t21C6 = 0.e0;
        _t21C5 = _t21C6;
        bool _t21C7 = prim >=007E (_t21C5, fMaskTh07CB);
        if _t21C7 {
          bool _t21C8 = true;
          _t21C4 = _t21C8;
        } else {
          _t21C4 = false;
        }
        _t206E = _t21C4;
      } else {
        _t206E = false;
      }
      _t2053 = _t206E;
    } else {
      _t2053 = false;
    }
    _t13B1 = _t2053;
    bool _t13B2 = prim !00BC (_t13B1);
    if _t13B2 {
      bool _t13B3;
      bool _t13B4;
      int _t13B5 = 0;
      bool _t13B6 = prim >007F (verb07DA, _t13B5);
      if _t13B6 {
        _t13B4 = vv13A7;
      } else {
        _t13B4 = false;
      }
      if _t13B4 {
        _t13B3 = true;
      } else {
        int _t13B7 = 1;
        _t13B3 = prim >007F (verb07DA, _t13B7);
      }
      if _t13B3 {
        string _t13B8 = "(i#";
        string _t13B9 = " @ ";
        string _t13BA = "): ";
        print (ID139A, _t13B8, iter1359, _t13B9, pos1398, _t13BA);
        string _t13BB = "!inside=";
        bool _t13BC;
        real _t203A = 0.e0;
        real _t203B = 0.e0;
        real _t203C = 0.e0;
        vec3 _t203D = [_t203A, _t203B, _t203C];
        vec3 mid203E = prim -0026<$[3]> (pos1398, _t203D);
        bool _t203F;
        real _t2040 = mid203E[0];
        real _t2041 = prim |()|00B5<$[]> (_t2040);
        real _t2042 = 0.1e0;
        bool _t2043 = prim >0080 (_t2041, _t2042);
        if _t2043 {
          bool _t2044;
          real _t2045 = mid203E[1];
          real _t2046 = prim |()|00B5<$[]> (_t2045);
          real _t2047 = 0.1e0;
          bool _t2048 = prim >0080 (_t2046, _t2047);
          if _t2048 {
            real _t2049 = mid203E[2];
            real _t204A = prim |()|00B5<$[]> (_t2049);
            real _t204B = 0.1e0;
            _t2044 = prim >0080 (_t204A, _t204B);
          } else {
            _t2044 = false;
          }
          _t203F = _t2044;
        } else {
          _t203F = false;
        }
        bool z204C = _t203F;
        bool _t204D;
        real _t204E = prim |()|00B5<$[3]> (mid203E);
        real _t204F = 0.4e1;
        bool _t2050 = prim <007A (_t204E, _t204F);
        if _t2050 {
          real _t2051 = prim |()|00B5<$[3]> (mid203E);
          real _t2052 = 0.3e1;
          _t204D = prim >0080 (_t2051, _t2052);
        } else {
          _t204D = false;
        }
        _t13BC = _t204D;
        string _t13BD = " || fStrength=";
        real _t13BE;
        vec3 g1EE7;
        real x1EE8 = pos1398[0];
        real y1EE9 = pos1398[1];
        real z1EEA = pos1398[2];
        real _t1EEB = 0.2e1;
        real _t1EEC = prim *0034 (_t1EEB, x1EE8);
        int _t1EED = 2;
        real _t1EEE = prim ^0068 (z1EEA, _t1EED);
        real _t1EEF = prim *0034 (_t1EEC, _t1EEE);
        int _t1EF0 = 2;
        real _t1EF1 = prim ^0068 (x1EE8, _t1EF0);
        int _t1EF2 = 2;
        real _t1EF3 = prim ^0068 (y1EE9, _t1EF2);
        real _t1EF4 = prim +0017<$[]> (_t1EF1, _t1EF3);
        int _t1EF5 = 2;
        real _t1EF6 = prim ^0068 (z1EEA, _t1EF5);
        real _t1EF7 = prim +0017<$[]> (_t1EF4, _t1EF6);
        real _t1EF8 = prim cos0169 (_t1EF7);
        real _t1EF9 = prim *0034 (_t1EEF, _t1EF8);
        real _t1EFA = 0.2e1;
        real _t1EFB = prim *0034 (_t1EFA, y1EE9);
        int _t1EFC = 2;
        real _t1EFD = prim ^0068 (z1EEA, _t1EFC);
        real _t1EFE = prim *0034 (_t1EFB, _t1EFD);
        int _t1EFF = 2;
        real _t1F00 = prim ^0068 (x1EE8, _t1EFF);
        int _t1F01 = 2;
        real _t1F02 = prim ^0068 (y1EE9, _t1F01);
        real _t1F03 = prim +0017<$[]> (_t1F00, _t1F02);
        int _t1F04 = 2;
        real _t1F05 = prim ^0068 (z1EEA, _t1F04);
        real _t1F06 = prim +0017<$[]> (_t1F03, _t1F05);
        real _t1F07 = prim cos0169 (_t1F06);
        real _t1F08 = prim *0034 (_t1EFE, _t1F07);
        real _t1F09 = 0.2e1;
        int _t1F0A = 3;
        real _t1F0B = prim ^0068 (z1EEA, _t1F0A);
        real _t1F0C = prim *0034 (_t1F09, _t1F0B);
        int _t1F0D = 2;
        real _t1F0E = prim ^0068 (x1EE8, _t1F0D);
        int _t1F0F = 2;
        real _t1F10 = prim ^0068 (y1EE9, _t1F0F);
        real _t1F11 = prim +0017<$[]> (_t1F0E, _t1F10);
        int _t1F12 = 2;
        real _t1F13 = prim ^0068 (z1EEA, _t1F12);
        real _t1F14 = prim +0017<$[]> (_t1F11, _t1F13);
        real _t1F15 = prim cos0169 (_t1F14);
        real _t1F16 = prim *0034 (_t1F0C, _t1F15);
        real _t1F17 = 0.2e1;
        real _t1F18 = prim *0034 (_t1F17, z1EEA);
        int _t1F19 = 2;
        real _t1F1A = prim ^0068 (x1EE8, _t1F19);
        int _t1F1B = 2;
        real _t1F1C = prim ^0068 (y1EE9, _t1F1B);
        real _t1F1D = prim +0017<$[]> (_t1F1A, _t1F1C);
        int _t1F1E = 2;
        real _t1F1F = prim ^0068 (z1EEA, _t1F1E);
        real _t1F20 = prim +0017<$[]> (_t1F1D, _t1F1F);
        real _t1F21 = prim sin0171 (_t1F20);
        real _t1F22 = prim *0034 (_t1F18, _t1F21);
        real _t1F23 = prim +0017<$[]> (_t1F16, _t1F22);
        vec3 g1F24 = [_t1EF9, _t1F08, _t1F23];
        g1EE7 = g1F24;
        tensor[3,3] H1F25;
        real x1F26 = pos1398[0];
        real y1F27 = pos1398[1];
        real z1F28 = pos1398[2];
        int _t1F29 = -4;
        real _t1F2A = (real)_t1F29;
        int _t1F2B = 2;
        real _t1F2C = prim ^0068 (x1F26, _t1F2B);
        real _t1F2D = prim *0034 (_t1F2A, _t1F2C);
        int _t1F2E = 2;
        real _t1F2F = prim ^0068 (z1F28, _t1F2E);
        real _t1F30 = prim *0034 (_t1F2D, _t1F2F);
        int _t1F31 = 2;
        real _t1F32 = prim ^0068 (x1F26, _t1F31);
        int _t1F33 = 2;
        real _t1F34 = prim ^0068 (y1F27, _t1F33);
        real _t1F35 = prim +0017<$[]> (_t1F32, _t1F34);
        int _t1F36 = 2;
        real _t1F37 = prim ^0068 (z1F28, _t1F36);
        real _t1F38 = prim +0017<$[]> (_t1F35, _t1F37);
        real _t1F39 = prim sin0171 (_t1F38);
        real _t1F3A = prim *0034 (_t1F30, _t1F39);
        real _t1F3B = 0.2e1;
        int _t1F3C = 2;
        real _t1F3D = prim ^0068 (z1F28, _t1F3C);
        real _t1F3E = prim *0034 (_t1F3B, _t1F3D);
        int _t1F3F = 2;
        real _t1F40 = prim ^0068 (x1F26, _t1F3F);
        int _t1F41 = 2;
        real _t1F42 = prim ^0068 (y1F27, _t1F41);
        real _t1F43 = prim +0017<$[]> (_t1F40, _t1F42);
        int _t1F44 = 2;
        real _t1F45 = prim ^0068 (z1F28, _t1F44);
        real _t1F46 = prim +0017<$[]> (_t1F43, _t1F45);
        real _t1F47 = prim cos0169 (_t1F46);
        real _t1F48 = prim *0034 (_t1F3E, _t1F47);
        real _t1F49 = prim +0017<$[]> (_t1F3A, _t1F48);
        int _t1F4A = -4;
        real _t1F4B = (real)_t1F4A;
        real _t1F4C = prim *0034 (_t1F4B, x1F26);
        real _t1F4D = prim *0034 (_t1F4C, y1F27);
        int _t1F4E = 2;
        real _t1F4F = prim ^0068 (z1F28, _t1F4E);
        real _t1F50 = prim *0034 (_t1F4D, _t1F4F);
        int _t1F51 = 2;
        real _t1F52 = prim ^0068 (x1F26, _t1F51);
        int _t1F53 = 2;
        real _t1F54 = prim ^0068 (y1F27, _t1F53);
        real _t1F55 = prim +0017<$[]> (_t1F52, _t1F54);
        int _t1F56 = 2;
        real _t1F57 = prim ^0068 (z1F28, _t1F56);
        real _t1F58 = prim +0017<$[]> (_t1F55, _t1F57);
        real _t1F59 = prim sin0171 (_t1F58);
        real _t1F5A = prim *0034 (_t1F50, _t1F59);
        int _t1F5B = -4;
        real _t1F5C = (real)_t1F5B;
        real _t1F5D = prim *0034 (_t1F5C, x1F26);
        int _t1F5E = 3;
        real _t1F5F = prim ^0068 (z1F28, _t1F5E);
        real _t1F60 = prim *0034 (_t1F5D, _t1F5F);
        int _t1F61 = 2;
        real _t1F62 = prim ^0068 (x1F26, _t1F61);
        int _t1F63 = 2;
        real _t1F64 = prim ^0068 (y1F27, _t1F63);
        real _t1F65 = prim +0017<$[]> (_t1F62, _t1F64);
        int _t1F66 = 2;
        real _t1F67 = prim ^0068 (z1F28, _t1F66);
        real _t1F68 = prim +0017<$[]> (_t1F65, _t1F67);
        real _t1F69 = prim sin0171 (_t1F68);
        real _t1F6A = prim *0034 (_t1F60, _t1F69);
        real _t1F6B = 0.4e1;
        real _t1F6C = prim *0034 (_t1F6B, x1F26);
        real _t1F6D = prim *0034 (_t1F6C, z1F28);
        int _t1F6E = 2;
        real _t1F6F = prim ^0068 (x1F26, _t1F6E);
        int _t1F70 = 2;
        real _t1F71 = prim ^0068 (y1F27, _t1F70);
        real _t1F72 = prim +0017<$[]> (_t1F6F, _t1F71);
        int _t1F73 = 2;
        real _t1F74 = prim ^0068 (z1F28, _t1F73);
        real _t1F75 = prim +0017<$[]> (_t1F72, _t1F74);
        real _t1F76 = prim cos0169 (_t1F75);
        real _t1F77 = prim *0034 (_t1F6D, _t1F76);
        real _t1F78 = prim +0017<$[]> (_t1F6A, _t1F77);
        vec3 _t1F79 = [_t1F49, _t1F5A, _t1F78];
        int _t1F7A = -4;
        real _t1F7B = (real)_t1F7A;
        real _t1F7C = prim *0034 (_t1F7B, x1F26);
        real _t1F7D = prim *0034 (_t1F7C, y1F27);
        int _t1F7E = 2;
        real _t1F7F = prim ^0068 (z1F28, _t1F7E);
        real _t1F80 = prim *0034 (_t1F7D, _t1F7F);
        int _t1F81 = 2;
        real _t1F82 = prim ^0068 (x1F26, _t1F81);
        int _t1F83 = 2;
        real _t1F84 = prim ^0068 (y1F27, _t1F83);
        real _t1F85 = prim +0017<$[]> (_t1F82, _t1F84);
        int _t1F86 = 2;
        real _t1F87 = prim ^0068 (z1F28, _t1F86);
        real _t1F88 = prim +0017<$[]> (_t1F85, _t1F87);
        real _t1F89 = prim sin0171 (_t1F88);
        real _t1F8A = prim *0034 (_t1F80, _t1F89);
        int _t1F8B = -4;
        real _t1F8C = (real)_t1F8B;
        int _t1F8D = 2;
        real _t1F8E = prim ^0068 (y1F27, _t1F8D);
        real _t1F8F = prim *0034 (_t1F8C, _t1F8E);
        int _t1F90 = 2;
        real _t1F91 = prim ^0068 (z1F28, _t1F90);
        real _t1F92 = prim *0034 (_t1F8F, _t1F91);
        int _t1F93 = 2;
        real _t1F94 = prim ^0068 (x1F26, _t1F93);
        int _t1F95 = 2;
        real _t1F96 = prim ^0068 (y1F27, _t1F95);
        real _t1F97 = prim +0017<$[]> (_t1F94, _t1F96);
        int _t1F98 = 2;
        real _t1F99 = prim ^0068 (z1F28, _t1F98);
        real _t1F9A = prim +0017<$[]> (_t1F97, _t1F99);
        real _t1F9B = prim sin0171 (_t1F9A);
        real _t1F9C = prim *0034 (_t1F92, _t1F9B);
        real _t1F9D = 0.2e1;
        int _t1F9E = 2;
        real _t1F9F = prim ^0068 (z1F28, _t1F9E);
        real _t1FA0 = prim *0034 (_t1F9D, _t1F9F);
        int _t1FA1 = 2;
        real _t1FA2 = prim ^0068 (x1F26, _t1FA1);
        int _t1FA3 = 2;
        real _t1FA4 = prim ^0068 (y1F27, _t1FA3);
        real _t1FA5 = prim +0017<$[]> (_t1FA2, _t1FA4);
        int _t1FA6 = 2;
        real _t1FA7 = prim ^0068 (z1F28, _t1FA6);
        real _t1FA8 = prim +0017<$[]> (_t1FA5, _t1FA7);
        real _t1FA9 = prim cos0169 (_t1FA8);
        real _t1FAA = prim *0034 (_t1FA0, _t1FA9);
        real _t1FAB = prim +0017<$[]> (_t1F9C, _t1FAA);
        int _t1FAC = -4;
        real _t1FAD = (real)_t1FAC;
        real _t1FAE = prim *0034 (_t1FAD, y1F27);
        int _t1FAF = 3;
        real _t1FB0 = prim ^0068 (z1F28, _t1FAF);
        real _t1FB1 = prim *0034 (_t1FAE, _t1FB0);
        int _t1FB2 = 2;
        real _t1FB3 = prim ^0068 (x1F26, _t1FB2);
        int _t1FB4 = 2;
        real _t1FB5 = prim ^0068 (y1F27, _t1FB4);
        real _t1FB6 = prim +0017<$[]> (_t1FB3, _t1FB5);
        int _t1FB7 = 2;
        real _t1FB8 = prim ^0068 (z1F28, _t1FB7);
        real _t1FB9 = prim +0017<$[]> (_t1FB6, _t1FB8);
        real _t1FBA = prim sin0171 (_t1FB9);
        real _t1FBB = prim *0034 (_t1FB1, _t1FBA);
        real _t1FBC = 0.4e1;
        real _t1FBD = prim *0034 (_t1FBC, y1F27);
        real _t1FBE = prim *0034 (_t1FBD, z1F28);
        int _t1FBF = 2;
        real _t1FC0 = prim ^0068 (x1F26, _t1FBF);
        int _t1FC1 = 2;
        real _t1FC2 = prim ^0068 (y1F27, _t1FC1);
        real _t1FC3 = prim +0017<$[]> (_t1FC0, _t1FC2);
        int _t1FC4 = 2;
        real _t1FC5 = prim ^0068 (z1F28, _t1FC4);
        real _t1FC6 = prim +0017<$[]> (_t1FC3, _t1FC5);
        real _t1FC7 = prim cos0169 (_t1FC6);
        real _t1FC8 = prim *0034 (_t1FBE, _t1FC7);
        real _t1FC9 = prim +0017<$[]> (_t1FBB, _t1FC8);
        vec3 _t1FCA = [_t1F8A, _t1FAB, _t1FC9];
        int _t1FCB = -4;
        real _t1FCC = (real)_t1FCB;
        real _t1FCD = prim *0034 (_t1FCC, x1F26);
        int _t1FCE = 3;
        real _t1FCF = prim ^0068 (z1F28, _t1FCE);
        real _t1FD0 = prim *0034 (_t1FCD, _t1FCF);
        int _t1FD1 = 2;
        real _t1FD2 = prim ^0068 (x1F26, _t1FD1);
        int _t1FD3 = 2;
        real _t1FD4 = prim ^0068 (y1F27, _t1FD3);
        real _t1FD5 = prim +0017<$[]> (_t1FD2, _t1FD4);
        int _t1FD6 = 2;
        real _t1FD7 = prim ^0068 (z1F28, _t1FD6);
        real _t1FD8 = prim +0017<$[]> (_t1FD5, _t1FD7);
        real _t1FD9 = prim sin0171 (_t1FD8);
        real _t1FDA = prim *0034 (_t1FD0, _t1FD9);
        real _t1FDB = 0.4e1;
        real _t1FDC = prim *0034 (_t1FDB, x1F26);
        real _t1FDD = prim *0034 (_t1FDC, z1F28);
        int _t1FDE = 2;
        real _t1FDF = prim ^0068 (x1F26, _t1FDE);
        int _t1FE0 = 2;
        real _t1FE1 = prim ^0068 (y1F27, _t1FE0);
        real _t1FE2 = prim +0017<$[]> (_t1FDF, _t1FE1);
        int _t1FE3 = 2;
        real _t1FE4 = prim ^0068 (z1F28, _t1FE3);
        real _t1FE5 = prim +0017<$[]> (_t1FE2, _t1FE4);
        real _t1FE6 = prim cos0169 (_t1FE5);
        real _t1FE7 = prim *0034 (_t1FDD, _t1FE6);
        real _t1FE8 = prim +0017<$[]> (_t1FDA, _t1FE7);
        int _t1FE9 = -4;
        real _t1FEA = (real)_t1FE9;
        real _t1FEB = prim *0034 (_t1FEA, y1F27);
        int _t1FEC = 3;
        real _t1FED = prim ^0068 (z1F28, _t1FEC);
        real _t1FEE = prim *0034 (_t1FEB, _t1FED);
        int _t1FEF = 2;
        real _t1FF0 = prim ^0068 (x1F26, _t1FEF);
        int _t1FF1 = 2;
        real _t1FF2 = prim ^0068 (y1F27, _t1FF1);
        real _t1FF3 = prim +0017<$[]> (_t1FF0, _t1FF2);
        int _t1FF4 = 2;
        real _t1FF5 = prim ^0068 (z1F28, _t1FF4);
        real _t1FF6 = prim +0017<$[]> (_t1FF3, _t1FF5);
        real _t1FF7 = prim sin0171 (_t1FF6);
        real _t1FF8 = prim *0034 (_t1FEE, _t1FF7);
        real _t1FF9 = 0.4e1;
        real _t1FFA = prim *0034 (_t1FF9, y1F27);
        real _t1FFB = prim *0034 (_t1FFA, z1F28);
        int _t1FFC = 2;
        real _t1FFD = prim ^0068 (x1F26, _t1FFC);
        int _t1FFE = 2;
        real _t1FFF = prim ^0068 (y1F27, _t1FFE);
        real _t2000 = prim +0017<$[]> (_t1FFD, _t1FFF);
        int _t2001 = 2;
        real _t2002 = prim ^0068 (z1F28, _t2001);
        real _t2003 = prim +0017<$[]> (_t2000, _t2002);
        real _t2004 = prim cos0169 (_t2003);
        real _t2005 = prim *0034 (_t1FFB, _t2004);
        real _t2006 = prim +0017<$[]> (_t1FF8, _t2005);
        int _t2007 = -4;
        real _t2008 = (real)_t2007;
        int _t2009 = 4;
        real _t200A = prim ^0068 (z1F28, _t2009);
        real _t200B = prim *0034 (_t2008, _t200A);
        int _t200C = 2;
        real _t200D = prim ^0068 (x1F26, _t200C);
        int _t200E = 2;
        real _t200F = prim ^0068 (y1F27, _t200E);
        real _t2010 = prim +0017<$[]> (_t200D, _t200F);
        int _t2011 = 2;
        real _t2012 = prim ^0068 (z1F28, _t2011);
        real _t2013 = prim +0017<$[]> (_t2010, _t2012);
        real _t2014 = prim sin0171 (_t2013);
        real _t2015 = prim *0034 (_t200B, _t2014);
        real _t2016 = 0.1e2;
        int _t2017 = 2;
        real _t2018 = prim ^0068 (z1F28, _t2017);
        real _t2019 = prim *0034 (_t2016, _t2018);
        int _t201A = 2;
        real _t201B = prim ^0068 (x1F26, _t201A);
        int _t201C = 2;
        real _t201D = prim ^0068 (y1F27, _t201C);
        real _t201E = prim +0017<$[]> (_t201B, _t201D);
        int _t201F = 2;
        real _t2020 = prim ^0068 (z1F28, _t201F);
        real _t2021 = prim +0017<$[]> (_t201E, _t2020);
        real _t2022 = prim cos0169 (_t2021);
        real _t2023 = prim *0034 (_t2019, _t2022);
        real _t2024 = prim +0017<$[]> (_t2015, _t2023);
        real _t2025 = 0.2e1;
        int _t2026 = 2;
        real _t2027 = prim ^0068 (x1F26, _t2026);
        int _t2028 = 2;
        real _t2029 = prim ^0068 (y1F27, _t2028);
        real _t202A = prim +0017<$[]> (_t2027, _t2029);
        int _t202B = 2;
        real _t202C = prim ^0068 (z1F28, _t202B);
        real _t202D = prim +0017<$[]> (_t202A, _t202C);
        real _t202E = prim sin0171 (_t202D);
        real _t202F = prim *0034 (_t2025, _t202E);
        real _t2030 = prim +0017<$[]> (_t2024, _t202F);
        vec3 _t2031 = [_t1FE8, _t2006, _t2030];
        tensor[3,3] hess2032 = [_t1F79, _t1FCA, _t2031];
        H1F25 = hess2032;
        real[3] _t2033 = prim evals009F (H1F25);
        int _t2034 = 2;
        real _t2035 = prim $sub01C0<real; %3> (_t2033, _t2034);
        real _t2036 = prim unary -008B<$[]> (_t2035);
        real _t2037 = prim |()|00B5<$[3]> (g1EE7);
        real _t2038 = prim +0017<$[]> (fBias07CC, _t2037);
        real str2039 = prim /0055 (_t2036, _t2038);
        _t13BE = str2039;
        string _t13BF = " <= fStrTh=";
        string _t13C0 = " || fMask(pos)=";
        real _t13C1;
        real _t1EE6 = 0.e0;
        _t13C1 = _t1EE6;
        string _t13C2 = " < fMaskTh=";
        string _t13C3 = " || fTest(pos)=";
        bool _t13C4;
        bool _t1EE5 = true;
        _t13C4 = _t1EE5;
        string _t13C5 = " ==>DIE\n";
        print (_t13BB, _t13BC, _t13BD, _t13BE, _t13BF, fStrTh07CA, _t13C0, _t13C1, _t13C2, fMaskTh07CB, _t13C3, _t13C4, _t13C5);
      }
      die;
    }
    real _t13C6 = 0.e0;
    bool _t13C7 = prim >0080 (travMax07CF, _t13C6);
    if _t13C7 {
      bool _t13C8 = prim >0080 (trav13A2, travMax07CF);
      if _t13C8 {
        die;
      }
    }
    bool _t13C9 = prim !00BC (found13A0);
    if _t13C9 {
      int _t13CA = 0;
      bool _t13CB = prim >007F (nfsMax07D0, _t13CA);
      if _t13CB {
        bool _t13CC = prim >007F (nfs13A1, nfsMax07D0);
        if _t13CC {
          bool _t13CD;
          bool _t13CE;
          int _t13CF = 0;
          bool _t13D0 = prim >007F (verb07DA, _t13CF);
          if _t13D0 {
            _t13CE = vv13A7;
          } else {
            _t13CE = false;
          }
          if _t13CE {
            _t13CD = true;
          } else {
            int _t13D1 = 1;
            _t13CD = prim >007F (verb07DA, _t13D1);
          }
          if _t13CD {
            string _t13D2 = "(i#";
            string _t13D3 = " @ ";
            string _t13D4 = "): ";
            print (ID139A, _t13D2, iter1359, _t13D3, pos1398, _t13D4);
            string _t13D5 = "nfs=";
            string _t13D6 = " > nfsMax=";
            string _t13D7 = " || trav=";
            string _t13D8 = " > travMax=";
            string _t13D9 = " =>DIE\n";
            print (_t13D5, nfs13A1, _t13D6, nfsMax07D0, _t13D7, trav13A2, _t13D8, travMax07CF, _t13D9);
          }
          die;
        }
      }
      vec3 _t13DA = func fStep128C (pos1398);
      step139C = prim *0036<$[3]> (sfs07DB, _t13DA);
      pos1398 = prim +0017<$[3]> (pos1398, step139C);
      _pos1399 = pos1398;
      real _t13DB = prim |()|00B5<$[3]> (step139C);
      real _t13DC = prim /0055 (_t13DB, tipd07CD);
      mvmt13A3 = prim lerp0096<$[]> (_t13DC, mvmt13A3, hist07DC);
      bool _t13DD = prim >0080 (mvmt13A3, fsEps07D4);
      if _t13DD {
        real _t13DE = prim |()|00B5<$[3]> (step139C);
        real _t13DF = prim /0055 (_t13DE, tipd07CD);
        trav13A2 = prim +0017<$[]> (trav13A2, _t13DF);
        int _t13E0 = 1;
        nfs13A1 = prim +0015 (nfs13A1, _t13E0);
      } else {
        found13A0 = true;
        mvmt13A3 = 0.1e1;
        trav13A2 = 0.e0;
      }
      bool _t13E1;
      bool _t13E2;
      int _t13E3 = 0;
      bool _t13E4 = prim >007F (verb07DA, _t13E3);
      if _t13E4 {
        _t13E2 = vv13A7;
      } else {
        _t13E2 = false;
      }
      if _t13E2 {
        _t13E1 = true;
      } else {
        int _t13E5 = 1;
        _t13E1 = prim >007F (verb07DA, _t13E5);
      }
      if _t13E1 {
        string _t13E6 = "(i#";
        string _t13E7 = " @ ";
        string _t13E8 = "): ";
        print (ID139A, _t13E6, iter1359, _t13E7, pos1398, _t13E8);
        string _t13E9 = "step=";
        string _t13EA = "; mvmt=";
        string _t13EB = " => found=";
        string _t13EC = "\n";
        print (_t13E9, step139C, _t13EA, mvmt13A3, _t13EB, found13A0, _t13EC);
      }
    } else {
      int _t13ED = 0;
      bool _t13EE = prim ==0082 (_t13ED, fDim07DF);
      if _t13EE {
        stabilize;
      }
      vec3 _t13EF = func fStep128C (pos1398);
      step139C = prim *0036<$[3]> (sfs07DB, _t13EF);
      pos1398 = prim +0017<$[3]> (pos1398, step139C);
      _pos1399 = pos1398;
      real _t13F0 = prim |()|00B5<$[3]> (step139C);
      real _t13F1 = prim /0055 (_t13F0, tipd07CD);
      trav13A2 = prim +0017<$[]> (trav13A2, _t13F1);
      real oldE13F2 = 0.e0;
      real _t13F3 = 0.e0;
      real _t13F4 = 0.e0;
      real _t13F5 = 0.e0;
      vec3 force13F6 = [_t13F3, _t13F4, _t13F5];
      int nn13F7 = 0;
      point[] _t13F8 = prim sphere0198<point> (_pos1399, rad1342);
      foreach P13F9 in _t13F8 {
        vec3 _t13FA = P13F9.pos1398;
        vec3 off13FB = prim -0026<$[3]> (_t13FA, pos1398);
        real _t13FC = prim |()|00B5<$[3]> (off13FB);
        real _t13FD = prim /0055 (_t13FC, tipd07CD);
        bool _t13FE = prim <007A (_t13FD, fsEps07D4);
        if _t13FE {
          real _t13FF = P13F9.ID139A;
          bool _t1400 = prim <=007C (ID139A, _t13FF);
          if _t1400 {
            die;
          }
        }
        real _t1407;
        real _t1EBD = prim |()|00B5<$[3]> (off13FB);
        real _t1EBE = prim /0055 (_t1EBD, rad1342);
        real _t1EBF;
        real _t1EC0 = 0.2e1;
        real _t1EC1 = 0.3e1;
        real _t1EC2 = prim /0055 (_t1EC0, _t1EC1);
        real s1EC3 = prim -0026<$[]> (_t1EBE, _t1EC2);
        real _t1EC4;
        real _t1EC5 = 0.2e1;
        real _t1EC6 = 0.3e1;
        real _t1EC7 = prim /0055 (_t1EC5, _t1EC6);
        bool _t1EC8 = prim <007A (_t1EBE, _t1EC7);
        if _t1EC8 {
          real _t1EC9 = 0.1e1;
          real _t1ECA = -0.5646e1;
          real _t1ECB = 0.119835e2;
          real _t1ECC = -0.113535e2;
          real _t1ECD = 0.40550625e1;
          real _t1ECE = prim *0034 (_t1ECD, _t1EBE);
          real _t1ECF = prim +0017<$[]> (_t1ECC, _t1ECE);
          real _t1ED0 = prim *0034 (_t1EBE, _t1ECF);
          real _t1ED1 = prim +0017<$[]> (_t1ECB, _t1ED0);
          real _t1ED2 = prim *0034 (_t1EBE, _t1ED1);
          real _t1ED3 = prim +0017<$[]> (_t1ECA, _t1ED2);
          real _t1ED4 = prim *0034 (_t1EBE, _t1ED3);
          _t1EC4 = prim +0017<$[]> (_t1EC9, _t1ED4);
        } else {
          real _t1ED5;
          real _t1ED6 = 0.1e1;
          bool _t1ED7 = prim <007A (_t1EBE, _t1ED6);
          if _t1ED7 {
            real _t1ED8 = -0.1e-2;
            real _t1ED9 = 0.9e-1;
            real _t1EDA = -0.54e0;
            real _t1EDB = 0.1215e1;
            real _t1EDC = 0.972e0;
            real _t1EDD = prim *0034 (_t1EDC, s1EC3);
            real _t1EDE = prim -0026<$[]> (_t1EDB, _t1EDD);
            real _t1EDF = prim *0034 (_t1EDE, s1EC3);
            real _t1EE0 = prim +0017<$[]> (_t1EDA, _t1EDF);
            real _t1EE1 = prim *0034 (_t1EE0, s1EC3);
            real _t1EE2 = prim +0017<$[]> (_t1ED9, _t1EE1);
            real _t1EE3 = prim *0034 (_t1EE2, s1EC3);
            real _t1EE4 = prim *0034 (_t1EE3, s1EC3);
            _t1ED5 = prim +0017<$[]> (_t1ED8, _t1EE4);
          } else {
            _t1ED5 = 0.e0;
          }
          _t1EC4 = _t1ED5;
        }
        _t1EBF = _t1EC4;
        _t1407 = _t1EBF;
        oldE13F2 = prim +0017<$[]> (oldE13F2, _t1407);
        vec3 _t1408;
        real _t1E93 = prim |()|00B5<$[3]> (off13FB);
        real _t1E94 = prim /0055 (_t1E93, rad1342);
        real _t1E95;
        real _t1E96 = 0.3e1;
        real _t1E97 = prim *0034 (_t1E96, _t1E94);
        real _t1E98 = 0.2e1;
        real t1E99 = prim -0026<$[]> (_t1E97, _t1E98);
        real _t1E9A;
        real _t1E9B = 0.2e1;
        real _t1E9C = 0.3e1;
        real _t1E9D = prim /0055 (_t1E9B, _t1E9C);
        bool _t1E9E = prim <007A (_t1E94, _t1E9D);
        if _t1E9E {
          real _t1E9F = -0.5646e1;
          real _t1EA0 = 0.23967e2;
          real _t1EA1 = -0.340605e2;
          real _t1EA2 = 0.1622025e2;
          real _t1EA3 = prim *0034 (_t1EA2, _t1E94);
          real _t1EA4 = prim +0017<$[]> (_t1EA1, _t1EA3);
          real _t1EA5 = prim *0034 (_t1E94, _t1EA4);
          real _t1EA6 = prim +0017<$[]> (_t1EA0, _t1EA5);
          real _t1EA7 = prim *0034 (_t1E94, _t1EA6);
          _t1E9A = prim +0017<$[]> (_t1E9F, _t1EA7);
        } else {
          real _t1EA8;
          real _t1EA9 = 0.1e1;
          bool _t1EAA = prim <007A (_t1E94, _t1EA9);
          if _t1EAA {
            real _t1EAB = 0.1234567901e-1;
            real _t1EAC = prim *0034 (_t1EAB, t1E99);
            real _t1EAD = 0.486e1;
            real _t1EAE = -0.1458e2;
            real _t1EAF = 0.1458e2;
            real _t1EB0 = 0.486e1;
            real _t1EB1 = prim *0034 (_t1EB0, t1E99);
            real _t1EB2 = prim -0026<$[]> (_t1EAF, _t1EB1);
            real _t1EB3 = prim *0034 (t1E99, _t1EB2);
            real _t1EB4 = prim +0017<$[]> (_t1EAE, _t1EB3);
            real _t1EB5 = prim *0034 (t1E99, _t1EB4);
            real _t1EB6 = prim +0017<$[]> (_t1EAD, _t1EB5);
            _t1EA8 = prim *0034 (_t1EAC, _t1EB6);
          } else {
            _t1EA8 = 0.e0;
          }
          _t1E9A = _t1EA8;
        }
        _t1E95 = _t1E9A;
        real _t1EB7 = 0.1e1;
        real _t1EB8 = prim /0055 (_t1EB7, rad1342);
        real _t1EB9 = prim *0034 (_t1E95, _t1EB8);
        vec3 _t1EBA = prim *0036<$[3]> (_t1EB9, off13FB);
        real _t1EBB = prim |()|00B5<$[3]> (off13FB);
        vec3 _t1EBC = prim /0057<$[3]> (_t1EBA, _t1EBB);
        _t1408 = _t1EBC;
        force13F6 = prim +0017<$[3]> (force13F6, _t1408);
        int _t1409 = 1;
        nn13F7 = prim +0015 (nn13F7, _t1409);
      }
      int _t140A = 0;
      bool _t140B = prim ==0082 (_t140A, nn13F7);
      if _t140B {
        bool _t140C;
        int _t140D;
        bool _t1E83;
        int _t1E84 = 0;
        bool _t1E85 = prim >007F (pcp07DD, _t1E84);
        if _t1E85 {
          bool _t1E86;
          int _t1E87 = 0;
          bool _t1E88 = prim >007F (iter1359, _t1E87);
          if _t1E88 {
            int _t1E89 = 0;
            int _t1E8A = prim %00A1 (iter1359, pcp07DD);
            _t1E86 = prim ==0082 (_t1E89, _t1E8A);
          } else {
            _t1E86 = false;
          }
          _t1E83 = _t1E86;
        } else {
          _t1E83 = false;
        }
        if _t1E83 {
          int _t1E8B = prim /0054 (iter1359, pcp07DD);
          int _t1E8C = 2;
          int _t1E8D = prim %00A1 (_t1E8B, _t1E8C);
          int _t1E8E = 2;
          int _t1E8F = prim *0033 (_t1E8D, _t1E8E);
          int _t1E90 = 1;
          int _t1E91 = prim -0024 (_t1E8F, _t1E90);
          _t140D = _t1E91;
        } else {
          int _t1E92 = 0;
          _t140D = _t1E92;
        }
        int _t140E = 0;
        bool _t140F = prim >007F (_t140D, _t140E);
        if _t140F {
          _t140C = prim <0079 (born13A5, nnmax12F4);
        } else {
          _t140C = false;
        }
        bool _t1410 = prim !00BC (_t140C);
        if _t1410 {
          continue;
        }
        tensor[3,3] _t1411 = func fPerp12BE (pos1398);
        real _t1412 = 0.e0;
        real _t1413 = 0.e0;
        vec3 _t1414 = [tipd07CD, _t1412, _t1413];
        vec3 noff01415 = prim •00CE<$[3,3]; $[3]; $[3]> (_t1411, _t1414);
        tensor[3,3] _t1416 = func fPerp12BE (pos1398);
        real _t1417 = 0.e0;
        real _t1418 = 0.e0;
        vec3 _t1419 = [_t1417, tipd07CD, _t1418];
        vec3 noff1141A = prim •00CE<$[3,3]; $[3]; $[3]> (_t1416, _t1419);
        tensor[3,3] _t141B = func fPerp12BE (pos1398);
        real _t141C = 0.e0;
        real _t141D = 0.e0;
        vec3 _t141E = [_t141C, _t141D, tipd07CD];
        vec3 noff2141F = prim •00CE<$[3,3]; $[3]; $[3]> (_t141B, _t141E);
        vec3 noff1420 = noff01415;
        vec3 _t1421;
        real _t1422 = prim |()|00B5<$[3]> (noff1420);
        real _t1423 = prim |()|00B5<$[3]> (noff1141A);
        bool _t1424 = prim >0080 (_t1422, _t1423);
        if _t1424 {
          _t1421 = noff1420;
        } else {
          _t1421 = noff1141A;
        }
        noff1420 = _t1421;
        vec3 _t1425;
        real _t1426 = prim |()|00B5<$[3]> (noff1420);
        real _t1427 = prim |()|00B5<$[3]> (noff2141F);
        bool _t1428 = prim >0080 (_t1426, _t1427);
        if _t1428 {
          _t1425 = noff1420;
        } else {
          _t1425 = noff2141F;
        }
        noff1420 = _t1425;
        vec3 _t1429 = prim normalize0137<$[3]> (noff1420);
        vec3 _t142A = prim *0036<$[3]> (tipd07CD, _t1429);
        vec3 npos142B = prim +0017<$[3]> (_t142A, pos1398);
        vec3 _t142C = func fStep128C (npos142B);
        vec3 _t142D = prim *0036<$[3]> (sfs07DB, _t142C);
        npos142B = prim +0017<$[3]> (npos142B, _t142D);
        bool _t142E;
        bool _t142F;
        int _t1430 = 0;
        bool _t1431 = prim >007F (verb07DA, _t1430);
        if _t1431 {
          _t142F = vv13A7;
        } else {
          _t142F = false;
        }
        if _t142F {
          _t142E = true;
        } else {
          int _t1432 = 1;
          _t142E = prim >007F (verb07DA, _t1432);
        }
        if _t142E {
          string _t1433 = "(i#";
          string _t1434 = " @ ";
          string _t1435 = "): ";
          print (ID139A, _t1433, iter1359, _t1434, pos1398, _t1435);
          string _t1436 = " 0==nn =>NEW(";
          string _t1437 = ") w/ ID=";
          real _t1438;
          real _t1E75 = 0.1e7;
          real _t1E76;
          real _t1E77 = npos142B[0];
          real _t1E78 = func urnd135C (_t1E77);
          real _t1E79 = npos142B[1];
          real _t1E7A = func urnd135C (_t1E79);
          real _t1E7B = prim +0017<$[]> (_t1E78, _t1E7A);
          real _t1E7C = npos142B[2];
          real _t1E7D = func urnd135C (_t1E7C);
          real _t1E7E = prim +0017<$[]> (_t1E7B, _t1E7D);
          real _t1E7F = 0.1e1;
          real _t1E80 = prim fmod018A (_t1E7E, _t1E7F);
          _t1E76 = _t1E80;
          real _t1E81 = prim *0034 (_t1E75, _t1E76);
          real _t1E82 = prim floor0189 (_t1E81);
          _t1438 = _t1E82;
          string _t1439 = "\n";
          print (_t1436, npos142B, _t1437, _t1438, _t1439);
        }
        bool _t143A;
        bool _t1CFF;
        bool _t1D00;
        real _t1D01 = 0.e0;
        real _t1D02 = 0.e0;
        real _t1D03 = 0.e0;
        vec3 _t1D04 = [_t1D01, _t1D02, _t1D03];
        vec3 mid1D05 = prim -0026<$[3]> (pos1398, _t1D04);
        bool _t1D06;
        real _t1D07 = mid1D05[0];
        real _t1D08 = prim |()|00B5<$[]> (_t1D07);
        real _t1D09 = 0.1e0;
        bool _t1D0A = prim >0080 (_t1D08, _t1D09);
        if _t1D0A {
          bool _t1D0B;
          real _t1D0C = mid1D05[1];
          real _t1D0D = prim |()|00B5<$[]> (_t1D0C);
          real _t1D0E = 0.1e0;
          bool _t1D0F = prim >0080 (_t1D0D, _t1D0E);
          if _t1D0F {
            real _t1D10 = mid1D05[2];
            real _t1D11 = prim |()|00B5<$[]> (_t1D10);
            real _t1D12 = 0.1e0;
            _t1D0B = prim >0080 (_t1D11, _t1D12);
          } else {
            _t1D0B = false;
          }
          _t1D06 = _t1D0B;
        } else {
          _t1D06 = false;
        }
        bool z1D13 = _t1D06;
        bool _t1D14;
        real _t1D15 = prim |()|00B5<$[3]> (mid1D05);
        real _t1D16 = 0.4e1;
        bool _t1D17 = prim <007A (_t1D15, _t1D16);
        if _t1D17 {
          real _t1D18 = prim |()|00B5<$[3]> (mid1D05);
          real _t1D19 = 0.3e1;
          _t1D14 = prim >0080 (_t1D18, _t1D19);
        } else {
          _t1D14 = false;
        }
        _t1D00 = _t1D14;
        if _t1D00 {
          bool _t1D1A;
          real _t1D1B;
          vec3 g1D1C;
          real x1D1D = pos1398[0];
          real y1D1E = pos1398[1];
          real z1D1F = pos1398[2];
          real _t1D20 = 0.2e1;
          real _t1D21 = prim *0034 (_t1D20, x1D1D);
          int _t1D22 = 2;
          real _t1D23 = prim ^0068 (z1D1F, _t1D22);
          real _t1D24 = prim *0034 (_t1D21, _t1D23);
          int _t1D25 = 2;
          real _t1D26 = prim ^0068 (x1D1D, _t1D25);
          int _t1D27 = 2;
          real _t1D28 = prim ^0068 (y1D1E, _t1D27);
          real _t1D29 = prim +0017<$[]> (_t1D26, _t1D28);
          int _t1D2A = 2;
          real _t1D2B = prim ^0068 (z1D1F, _t1D2A);
          real _t1D2C = prim +0017<$[]> (_t1D29, _t1D2B);
          real _t1D2D = prim cos0169 (_t1D2C);
          real _t1D2E = prim *0034 (_t1D24, _t1D2D);
          real _t1D2F = 0.2e1;
          real _t1D30 = prim *0034 (_t1D2F, y1D1E);
          int _t1D31 = 2;
          real _t1D32 = prim ^0068 (z1D1F, _t1D31);
          real _t1D33 = prim *0034 (_t1D30, _t1D32);
          int _t1D34 = 2;
          real _t1D35 = prim ^0068 (x1D1D, _t1D34);
          int _t1D36 = 2;
          real _t1D37 = prim ^0068 (y1D1E, _t1D36);
          real _t1D38 = prim +0017<$[]> (_t1D35, _t1D37);
          int _t1D39 = 2;
          real _t1D3A = prim ^0068 (z1D1F, _t1D39);
          real _t1D3B = prim +0017<$[]> (_t1D38, _t1D3A);
          real _t1D3C = prim cos0169 (_t1D3B);
          real _t1D3D = prim *0034 (_t1D33, _t1D3C);
          real _t1D3E = 0.2e1;
          int _t1D3F = 3;
          real _t1D40 = prim ^0068 (z1D1F, _t1D3F);
          real _t1D41 = prim *0034 (_t1D3E, _t1D40);
          int _t1D42 = 2;
          real _t1D43 = prim ^0068 (x1D1D, _t1D42);
          int _t1D44 = 2;
          real _t1D45 = prim ^0068 (y1D1E, _t1D44);
          real _t1D46 = prim +0017<$[]> (_t1D43, _t1D45);
          int _t1D47 = 2;
          real _t1D48 = prim ^0068 (z1D1F, _t1D47);
          real _t1D49 = prim +0017<$[]> (_t1D46, _t1D48);
          real _t1D4A = prim cos0169 (_t1D49);
          real _t1D4B = prim *0034 (_t1D41, _t1D4A);
          real _t1D4C = 0.2e1;
          real _t1D4D = prim *0034 (_t1D4C, z1D1F);
          int _t1D4E = 2;
          real _t1D4F = prim ^0068 (x1D1D, _t1D4E);
          int _t1D50 = 2;
          real _t1D51 = prim ^0068 (y1D1E, _t1D50);
          real _t1D52 = prim +0017<$[]> (_t1D4F, _t1D51);
          int _t1D53 = 2;
          real _t1D54 = prim ^0068 (z1D1F, _t1D53);
          real _t1D55 = prim +0017<$[]> (_t1D52, _t1D54);
          real _t1D56 = prim sin0171 (_t1D55);
          real _t1D57 = prim *0034 (_t1D4D, _t1D56);
          real _t1D58 = prim +0017<$[]> (_t1D4B, _t1D57);
          vec3 g1D59 = [_t1D2E, _t1D3D, _t1D58];
          g1D1C = g1D59;
          tensor[3,3] H1D5A;
          real x1D5B = pos1398[0];
          real y1D5C = pos1398[1];
          real z1D5D = pos1398[2];
          int _t1D5E = -4;
          real _t1D5F = (real)_t1D5E;
          int _t1D60 = 2;
          real _t1D61 = prim ^0068 (x1D5B, _t1D60);
          real _t1D62 = prim *0034 (_t1D5F, _t1D61);
          int _t1D63 = 2;
          real _t1D64 = prim ^0068 (z1D5D, _t1D63);
          real _t1D65 = prim *0034 (_t1D62, _t1D64);
          int _t1D66 = 2;
          real _t1D67 = prim ^0068 (x1D5B, _t1D66);
          int _t1D68 = 2;
          real _t1D69 = prim ^0068 (y1D5C, _t1D68);
          real _t1D6A = prim +0017<$[]> (_t1D67, _t1D69);
          int _t1D6B = 2;
          real _t1D6C = prim ^0068 (z1D5D, _t1D6B);
          real _t1D6D = prim +0017<$[]> (_t1D6A, _t1D6C);
          real _t1D6E = prim sin0171 (_t1D6D);
          real _t1D6F = prim *0034 (_t1D65, _t1D6E);
          real _t1D70 = 0.2e1;
          int _t1D71 = 2;
          real _t1D72 = prim ^0068 (z1D5D, _t1D71);
          real _t1D73 = prim *0034 (_t1D70, _t1D72);
          int _t1D74 = 2;
          real _t1D75 = prim ^0068 (x1D5B, _t1D74);
          int _t1D76 = 2;
          real _t1D77 = prim ^0068 (y1D5C, _t1D76);
          real _t1D78 = prim +0017<$[]> (_t1D75, _t1D77);
          int _t1D79 = 2;
          real _t1D7A = prim ^0068 (z1D5D, _t1D79);
          real _t1D7B = prim +0017<$[]> (_t1D78, _t1D7A);
          real _t1D7C = prim cos0169 (_t1D7B);
          real _t1D7D = prim *0034 (_t1D73, _t1D7C);
          real _t1D7E = prim +0017<$[]> (_t1D6F, _t1D7D);
          int _t1D7F = -4;
          real _t1D80 = (real)_t1D7F;
          real _t1D81 = prim *0034 (_t1D80, x1D5B);
          real _t1D82 = prim *0034 (_t1D81, y1D5C);
          int _t1D83 = 2;
          real _t1D84 = prim ^0068 (z1D5D, _t1D83);
          real _t1D85 = prim *0034 (_t1D82, _t1D84);
          int _t1D86 = 2;
          real _t1D87 = prim ^0068 (x1D5B, _t1D86);
          int _t1D88 = 2;
          real _t1D89 = prim ^0068 (y1D5C, _t1D88);
          real _t1D8A = prim +0017<$[]> (_t1D87, _t1D89);
          int _t1D8B = 2;
          real _t1D8C = prim ^0068 (z1D5D, _t1D8B);
          real _t1D8D = prim +0017<$[]> (_t1D8A, _t1D8C);
          real _t1D8E = prim sin0171 (_t1D8D);
          real _t1D8F = prim *0034 (_t1D85, _t1D8E);
          int _t1D90 = -4;
          real _t1D91 = (real)_t1D90;
          real _t1D92 = prim *0034 (_t1D91, x1D5B);
          int _t1D93 = 3;
          real _t1D94 = prim ^0068 (z1D5D, _t1D93);
          real _t1D95 = prim *0034 (_t1D92, _t1D94);
          int _t1D96 = 2;
          real _t1D97 = prim ^0068 (x1D5B, _t1D96);
          int _t1D98 = 2;
          real _t1D99 = prim ^0068 (y1D5C, _t1D98);
          real _t1D9A = prim +0017<$[]> (_t1D97, _t1D99);
          int _t1D9B = 2;
          real _t1D9C = prim ^0068 (z1D5D, _t1D9B);
          real _t1D9D = prim +0017<$[]> (_t1D9A, _t1D9C);
          real _t1D9E = prim sin0171 (_t1D9D);
          real _t1D9F = prim *0034 (_t1D95, _t1D9E);
          real _t1DA0 = 0.4e1;
          real _t1DA1 = prim *0034 (_t1DA0, x1D5B);
          real _t1DA2 = prim *0034 (_t1DA1, z1D5D);
          int _t1DA3 = 2;
          real _t1DA4 = prim ^0068 (x1D5B, _t1DA3);
          int _t1DA5 = 2;
          real _t1DA6 = prim ^0068 (y1D5C, _t1DA5);
          real _t1DA7 = prim +0017<$[]> (_t1DA4, _t1DA6);
          int _t1DA8 = 2;
          real _t1DA9 = prim ^0068 (z1D5D, _t1DA8);
          real _t1DAA = prim +0017<$[]> (_t1DA7, _t1DA9);
          real _t1DAB = prim cos0169 (_t1DAA);
          real _t1DAC = prim *0034 (_t1DA2, _t1DAB);
          real _t1DAD = prim +0017<$[]> (_t1D9F, _t1DAC);
          vec3 _t1DAE = [_t1D7E, _t1D8F, _t1DAD];
          int _t1DAF = -4;
          real _t1DB0 = (real)_t1DAF;
          real _t1DB1 = prim *0034 (_t1DB0, x1D5B);
          real _t1DB2 = prim *0034 (_t1DB1, y1D5C);
          int _t1DB3 = 2;
          real _t1DB4 = prim ^0068 (z1D5D, _t1DB3);
          real _t1DB5 = prim *0034 (_t1DB2, _t1DB4);
          int _t1DB6 = 2;
          real _t1DB7 = prim ^0068 (x1D5B, _t1DB6);
          int _t1DB8 = 2;
          real _t1DB9 = prim ^0068 (y1D5C, _t1DB8);
          real _t1DBA = prim +0017<$[]> (_t1DB7, _t1DB9);
          int _t1DBB = 2;
          real _t1DBC = prim ^0068 (z1D5D, _t1DBB);
          real _t1DBD = prim +0017<$[]> (_t1DBA, _t1DBC);
          real _t1DBE = prim sin0171 (_t1DBD);
          real _t1DBF = prim *0034 (_t1DB5, _t1DBE);
          int _t1DC0 = -4;
          real _t1DC1 = (real)_t1DC0;
          int _t1DC2 = 2;
          real _t1DC3 = prim ^0068 (y1D5C, _t1DC2);
          real _t1DC4 = prim *0034 (_t1DC1, _t1DC3);
          int _t1DC5 = 2;
          real _t1DC6 = prim ^0068 (z1D5D, _t1DC5);
          real _t1DC7 = prim *0034 (_t1DC4, _t1DC6);
          int _t1DC8 = 2;
          real _t1DC9 = prim ^0068 (x1D5B, _t1DC8);
          int _t1DCA = 2;
          real _t1DCB = prim ^0068 (y1D5C, _t1DCA);
          real _t1DCC = prim +0017<$[]> (_t1DC9, _t1DCB);
          int _t1DCD = 2;
          real _t1DCE = prim ^0068 (z1D5D, _t1DCD);
          real _t1DCF = prim +0017<$[]> (_t1DCC, _t1DCE);
          real _t1DD0 = prim sin0171 (_t1DCF);
          real _t1DD1 = prim *0034 (_t1DC7, _t1DD0);
          real _t1DD2 = 0.2e1;
          int _t1DD3 = 2;
          real _t1DD4 = prim ^0068 (z1D5D, _t1DD3);
          real _t1DD5 = prim *0034 (_t1DD2, _t1DD4);
          int _t1DD6 = 2;
          real _t1DD7 = prim ^0068 (x1D5B, _t1DD6);
          int _t1DD8 = 2;
          real _t1DD9 = prim ^0068 (y1D5C, _t1DD8);
          real _t1DDA = prim +0017<$[]> (_t1DD7, _t1DD9);
          int _t1DDB = 2;
          real _t1DDC = prim ^0068 (z1D5D, _t1DDB);
          real _t1DDD = prim +0017<$[]> (_t1DDA, _t1DDC);
          real _t1DDE = prim cos0169 (_t1DDD);
          real _t1DDF = prim *0034 (_t1DD5, _t1DDE);
          real _t1DE0 = prim +0017<$[]> (_t1DD1, _t1DDF);
          int _t1DE1 = -4;
          real _t1DE2 = (real)_t1DE1;
          real _t1DE3 = prim *0034 (_t1DE2, y1D5C);
          int _t1DE4 = 3;
          real _t1DE5 = prim ^0068 (z1D5D, _t1DE4);
          real _t1DE6 = prim *0034 (_t1DE3, _t1DE5);
          int _t1DE7 = 2;
          real _t1DE8 = prim ^0068 (x1D5B, _t1DE7);
          int _t1DE9 = 2;
          real _t1DEA = prim ^0068 (y1D5C, _t1DE9);
          real _t1DEB = prim +0017<$[]> (_t1DE8, _t1DEA);
          int _t1DEC = 2;
          real _t1DED = prim ^0068 (z1D5D, _t1DEC);
          real _t1DEE = prim +0017<$[]> (_t1DEB, _t1DED);
          real _t1DEF = prim sin0171 (_t1DEE);
          real _t1DF0 = prim *0034 (_t1DE6, _t1DEF);
          real _t1DF1 = 0.4e1;
          real _t1DF2 = prim *0034 (_t1DF1, y1D5C);
          real _t1DF3 = prim *0034 (_t1DF2, z1D5D);
          int _t1DF4 = 2;
          real _t1DF5 = prim ^0068 (x1D5B, _t1DF4);
          int _t1DF6 = 2;
          real _t1DF7 = prim ^0068 (y1D5C, _t1DF6);
          real _t1DF8 = prim +0017<$[]> (_t1DF5, _t1DF7);
          int _t1DF9 = 2;
          real _t1DFA = prim ^0068 (z1D5D, _t1DF9);
          real _t1DFB = prim +0017<$[]> (_t1DF8, _t1DFA);
          real _t1DFC = prim cos0169 (_t1DFB);
          real _t1DFD = prim *0034 (_t1DF3, _t1DFC);
          real _t1DFE = prim +0017<$[]> (_t1DF0, _t1DFD);
          vec3 _t1DFF = [_t1DBF, _t1DE0, _t1DFE];
          int _t1E00 = -4;
          real _t1E01 = (real)_t1E00;
          real _t1E02 = prim *0034 (_t1E01, x1D5B);
          int _t1E03 = 3;
          real _t1E04 = prim ^0068 (z1D5D, _t1E03);
          real _t1E05 = prim *0034 (_t1E02, _t1E04);
          int _t1E06 = 2;
          real _t1E07 = prim ^0068 (x1D5B, _t1E06);
          int _t1E08 = 2;
          real _t1E09 = prim ^0068 (y1D5C, _t1E08);
          real _t1E0A = prim +0017<$[]> (_t1E07, _t1E09);
          int _t1E0B = 2;
          real _t1E0C = prim ^0068 (z1D5D, _t1E0B);
          real _t1E0D = prim +0017<$[]> (_t1E0A, _t1E0C);
          real _t1E0E = prim sin0171 (_t1E0D);
          real _t1E0F = prim *0034 (_t1E05, _t1E0E);
          real _t1E10 = 0.4e1;
          real _t1E11 = prim *0034 (_t1E10, x1D5B);
          real _t1E12 = prim *0034 (_t1E11, z1D5D);
          int _t1E13 = 2;
          real _t1E14 = prim ^0068 (x1D5B, _t1E13);
          int _t1E15 = 2;
          real _t1E16 = prim ^0068 (y1D5C, _t1E15);
          real _t1E17 = prim +0017<$[]> (_t1E14, _t1E16);
          int _t1E18 = 2;
          real _t1E19 = prim ^0068 (z1D5D, _t1E18);
          real _t1E1A = prim +0017<$[]> (_t1E17, _t1E19);
          real _t1E1B = prim cos0169 (_t1E1A);
          real _t1E1C = prim *0034 (_t1E12, _t1E1B);
          real _t1E1D = prim +0017<$[]> (_t1E0F, _t1E1C);
          int _t1E1E = -4;
          real _t1E1F = (real)_t1E1E;
          real _t1E20 = prim *0034 (_t1E1F, y1D5C);
          int _t1E21 = 3;
          real _t1E22 = prim ^0068 (z1D5D, _t1E21);
          real _t1E23 = prim *0034 (_t1E20, _t1E22);
          int _t1E24 = 2;
          real _t1E25 = prim ^0068 (x1D5B, _t1E24);
          int _t1E26 = 2;
          real _t1E27 = prim ^0068 (y1D5C, _t1E26);
          real _t1E28 = prim +0017<$[]> (_t1E25, _t1E27);
          int _t1E29 = 2;
          real _t1E2A = prim ^0068 (z1D5D, _t1E29);
          real _t1E2B = prim +0017<$[]> (_t1E28, _t1E2A);
          real _t1E2C = prim sin0171 (_t1E2B);
          real _t1E2D = prim *0034 (_t1E23, _t1E2C);
          real _t1E2E = 0.4e1;
          real _t1E2F = prim *0034 (_t1E2E, y1D5C);
          real _t1E30 = prim *0034 (_t1E2F, z1D5D);
          int _t1E31 = 2;
          real _t1E32 = prim ^0068 (x1D5B, _t1E31);
          int _t1E33 = 2;
          real _t1E34 = prim ^0068 (y1D5C, _t1E33);
          real _t1E35 = prim +0017<$[]> (_t1E32, _t1E34);
          int _t1E36 = 2;
          real _t1E37 = prim ^0068 (z1D5D, _t1E36);
          real _t1E38 = prim +0017<$[]> (_t1E35, _t1E37);
          real _t1E39 = prim cos0169 (_t1E38);
          real _t1E3A = prim *0034 (_t1E30, _t1E39);
          real _t1E3B = prim +0017<$[]> (_t1E2D, _t1E3A);
          int _t1E3C = -4;
          real _t1E3D = (real)_t1E3C;
          int _t1E3E = 4;
          real _t1E3F = prim ^0068 (z1D5D, _t1E3E);
          real _t1E40 = prim *0034 (_t1E3D, _t1E3F);
          int _t1E41 = 2;
          real _t1E42 = prim ^0068 (x1D5B, _t1E41);
          int _t1E43 = 2;
          real _t1E44 = prim ^0068 (y1D5C, _t1E43);
          real _t1E45 = prim +0017<$[]> (_t1E42, _t1E44);
          int _t1E46 = 2;
          real _t1E47 = prim ^0068 (z1D5D, _t1E46);
          real _t1E48 = prim +0017<$[]> (_t1E45, _t1E47);
          real _t1E49 = prim sin0171 (_t1E48);
          real _t1E4A = prim *0034 (_t1E40, _t1E49);
          real _t1E4B = 0.1e2;
          int _t1E4C = 2;
          real _t1E4D = prim ^0068 (z1D5D, _t1E4C);
          real _t1E4E = prim *0034 (_t1E4B, _t1E4D);
          int _t1E4F = 2;
          real _t1E50 = prim ^0068 (x1D5B, _t1E4F);
          int _t1E51 = 2;
          real _t1E52 = prim ^0068 (y1D5C, _t1E51);
          real _t1E53 = prim +0017<$[]> (_t1E50, _t1E52);
          int _t1E54 = 2;
          real _t1E55 = prim ^0068 (z1D5D, _t1E54);
          real _t1E56 = prim +0017<$[]> (_t1E53, _t1E55);
          real _t1E57 = prim cos0169 (_t1E56);
          real _t1E58 = prim *0034 (_t1E4E, _t1E57);
          real _t1E59 = prim +0017<$[]> (_t1E4A, _t1E58);
          real _t1E5A = 0.2e1;
          int _t1E5B = 2;
          real _t1E5C = prim ^0068 (x1D5B, _t1E5B);
          int _t1E5D = 2;
          real _t1E5E = prim ^0068 (y1D5C, _t1E5D);
          real _t1E5F = prim +0017<$[]> (_t1E5C, _t1E5E);
          int _t1E60 = 2;
          real _t1E61 = prim ^0068 (z1D5D, _t1E60);
          real _t1E62 = prim +0017<$[]> (_t1E5F, _t1E61);
          real _t1E63 = prim sin0171 (_t1E62);
          real _t1E64 = prim *0034 (_t1E5A, _t1E63);
          real _t1E65 = prim +0017<$[]> (_t1E59, _t1E64);
          vec3 _t1E66 = [_t1E1D, _t1E3B, _t1E65];
          tensor[3,3] hess1E67 = [_t1DAE, _t1DFF, _t1E66];
          H1D5A = hess1E67;
          real[3] _t1E68 = prim evals009F (H1D5A);
          int _t1E69 = 2;
          real _t1E6A = prim $sub01C0<real; %3> (_t1E68, _t1E69);
          real _t1E6B = prim unary -008B<$[]> (_t1E6A);
          real _t1E6C = prim |()|00B5<$[3]> (g1D1C);
          real _t1E6D = prim +0017<$[]> (fBias07CC, _t1E6C);
          real str1E6E = prim /0055 (_t1E6B, _t1E6D);
          _t1D1B = str1E6E;
          bool _t1E6F = prim >0080 (_t1D1B, fStrTh07CA);
          if _t1E6F {
            bool _t1E70;
            real _t1E71;
            real _t1E72 = 0.e0;
            _t1E71 = _t1E72;
            bool _t1E73 = prim >=007E (_t1E71, fMaskTh07CB);
            if _t1E73 {
              bool _t1E74 = true;
              _t1E70 = _t1E74;
            } else {
              _t1E70 = false;
            }
            _t1D1A = _t1E70;
          } else {
            _t1D1A = false;
          }
          _t1CFF = _t1D1A;
        } else {
          _t1CFF = false;
        }
        _t143A = _t1CFF;
        if _t143A {
          new point (npos142B, hh139B);
          int _t143B = 1;
          born13A5 = prim +0015 (born13A5, _t143B);
        }
        bool _t143C;
        bool _t143D;
        int _t143E = 0;
        bool _t143F = prim >007F (verb07DA, _t143E);
        if _t143F {
          _t143D = vv13A7;
        } else {
          _t143D = false;
        }
        if _t143D {
          _t143C = true;
        } else {
          int _t1440 = 1;
          _t143C = prim >007F (verb07DA, _t1440);
        }
        if _t143C {
          string _t1441 = "(i#";
          string _t1442 = " @ ";
          string _t1443 = "): ";
          print (ID139A, _t1441, iter1359, _t1442, pos1398, _t1443);
          string _t1444 = "nn=0; after birthing mvmt=";
          string _t1445 = "\n";
          print (_t1444, mvmt13A3, _t1445);
        }
        continue;
      }
      tensor[3,3] _t1446 = func fPerp12BE (pos1398);
      tensor[3,3] _t1447 = prim *0036<$[3,3]> (hh139B, _t1446);
      vec3 es1448 = prim •00CE<$[3,3]; $[3]; $[3]> (_t1447, force13F6);
      real _t1449 = prim |()|00B5<$[3]> (es1448);
      bool _t144A = prim >0080 (_t1449, tipd07CD);
      if _t144A {
        real _t144B = prim |()|00B5<$[3]> (es1448);
        real _t144C = prim /0055 (tipd07CD, _t144B);
        hh139B = prim *0034 (hh139B, _t144C);
        real _t144D = prim |()|00B5<$[3]> (es1448);
        real _t144E = prim /0055 (tipd07CD, _t144D);
        es1448 = prim *0038<$[3]> (es1448, _t144E);
      }
      vec3 _t144F = prim +0017<$[3]> (pos1398, es1448);
      vec3 _t1450 = func fStep128C (_t144F);
      vec3 fs1451 = prim *0036<$[3]> (sfs07DB, _t1450);
      real _t1452 = prim |()|00B5<$[3]> (fs1451);
      real _t1453 = prim *0034 (fsEps07D4, tipd07CD);
      real _t1454 = prim |()|00B5<$[3]> (es1448);
      real _t1455 = prim +0017<$[]> (_t1453, _t1454);
      real _t1456 = prim /0055 (_t1452, _t1455);
      real _t1457 = 0.5e0;
      bool _t1458 = prim >0080 (_t1456, _t1457);
      if _t1458 {
        real _t1459 = 0.5e0;
        hh139B = prim *0034 (hh139B, _t1459);
        bool _t145A;
        bool _t145B;
        int _t145C = 0;
        bool _t145D = prim >007F (verb07DA, _t145C);
        if _t145D {
          _t145B = vv13A7;
        } else {
          _t145B = false;
        }
        if _t145B {
          _t145A = true;
        } else {
          int _t145E = 1;
          _t145A = prim >007F (verb07DA, _t145E);
        }
        if _t145A {
          string _t145F = "(i#";
          string _t1460 = " @ ";
          string _t1461 = "): ";
          print (ID139A, _t145F, iter1359, _t1460, pos1398, _t1461);
          string _t1462 = "nn=";
          string _t1463 = "; |fs|/|es|=";
          real _t1464 = prim |()|00B5<$[3]> (fs1451);
          real _t1465 = prim |()|00B5<$[3]> (es1448);
          real _t1466 = prim /0055 (_t1464, _t1465);
          string _t1467 = " > 0.5; trying again with hh=";
          string _t1468 = "; mvmt=";
          string _t1469 = "\n";
          print (_t1462, nn13F7, _t1463, _t1466, _t1467, hh139B, _t1468, mvmt13A3, _t1469);
          string _t146A = "        fs=";
          string _t146B = "\n";
          print (_t146A, fs1451, _t146B);
          string _t146C = "        es=";
          string _t146D = "\n";
          print (_t146C, es1448, _t146D);
        }
        continue;
      }
      vec3 oldpos146E = pos1398;
      vec3 _t146F = prim +0017<$[3]> (fs1451, es1448);
      pos1398 = prim +0017<$[3]> (pos1398, _t146F);
      _pos1399 = pos1398;
      real newE1470 = 0.e0;
      closest13A4 = rad1342;
      real _t1471 = 0.e0;
      real _t1472 = 0.e0;
      real _t1473 = 0.e0;
      vec3 mno1474 = [_t1471, _t1472, _t1473];
      nn13F7 = 0;
      point[] _t1475 = prim sphere0198<point> (_pos1399, rad1342);
      foreach P1476 in _t1475 {
        vec3 _t1477 = P1476.pos1398;
        vec3 off1478 = prim -0026<$[3]> (_t1477, pos1398);
        real _t1479;
        real _t1CD7 = prim |()|00B5<$[3]> (off1478);
        real _t1CD8 = prim /0055 (_t1CD7, rad1342);
        real _t1CD9;
        real _t1CDA = 0.2e1;
        real _t1CDB = 0.3e1;
        real _t1CDC = prim /0055 (_t1CDA, _t1CDB);
        real s1CDD = prim -0026<$[]> (_t1CD8, _t1CDC);
        real _t1CDE;
        real _t1CDF = 0.2e1;
        real _t1CE0 = 0.3e1;
        real _t1CE1 = prim /0055 (_t1CDF, _t1CE0);
        bool _t1CE2 = prim <007A (_t1CD8, _t1CE1);
        if _t1CE2 {
          real _t1CE3 = 0.1e1;
          real _t1CE4 = -0.5646e1;
          real _t1CE5 = 0.119835e2;
          real _t1CE6 = -0.113535e2;
          real _t1CE7 = 0.40550625e1;
          real _t1CE8 = prim *0034 (_t1CE7, _t1CD8);
          real _t1CE9 = prim +0017<$[]> (_t1CE6, _t1CE8);
          real _t1CEA = prim *0034 (_t1CD8, _t1CE9);
          real _t1CEB = prim +0017<$[]> (_t1CE5, _t1CEA);
          real _t1CEC = prim *0034 (_t1CD8, _t1CEB);
          real _t1CED = prim +0017<$[]> (_t1CE4, _t1CEC);
          real _t1CEE = prim *0034 (_t1CD8, _t1CED);
          _t1CDE = prim +0017<$[]> (_t1CE3, _t1CEE);
        } else {
          real _t1CEF;
          real _t1CF0 = 0.1e1;
          bool _t1CF1 = prim <007A (_t1CD8, _t1CF0);
          if _t1CF1 {
            real _t1CF2 = -0.1e-2;
            real _t1CF3 = 0.9e-1;
            real _t1CF4 = -0.54e0;
            real _t1CF5 = 0.1215e1;
            real _t1CF6 = 0.972e0;
            real _t1CF7 = prim *0034 (_t1CF6, s1CDD);
            real _t1CF8 = prim -0026<$[]> (_t1CF5, _t1CF7);
            real _t1CF9 = prim *0034 (_t1CF8, s1CDD);
            real _t1CFA = prim +0017<$[]> (_t1CF4, _t1CF9);
            real _t1CFB = prim *0034 (_t1CFA, s1CDD);
            real _t1CFC = prim +0017<$[]> (_t1CF3, _t1CFB);
            real _t1CFD = prim *0034 (_t1CFC, s1CDD);
            real _t1CFE = prim *0034 (_t1CFD, s1CDD);
            _t1CEF = prim +0017<$[]> (_t1CF2, _t1CFE);
          } else {
            _t1CEF = 0.e0;
          }
          _t1CDE = _t1CEF;
        }
        _t1CD9 = _t1CDE;
        _t1479 = _t1CD9;
        newE1470 = prim +0017<$[]> (newE1470, _t1479);
        real _t147A = prim |()|00B5<$[3]> (off1478);
        closest13A4 = prim min0127 (closest13A4, _t147A);
        mno1474 = prim +0017<$[3]> (mno1474, off1478);
        int _t147B = 1;
        nn13F7 = prim +0015 (nn13F7, _t147B);
      }
      real _t147C = (real)nn13F7;
      mno1474 = prim /0057<$[3]> (mno1474, _t147C);
      bool _t147D;
      bool _t147E;
      int _t147F = 0;
      bool _t1480 = prim >007F (verb07DA, _t147F);
      if _t1480 {
        _t147E = vv13A7;
      } else {
        _t147E = false;
      }
      if _t147E {
        _t147D = true;
      } else {
        int _t1481 = 1;
        _t147D = prim >007F (verb07DA, _t1481);
      }
      if _t147D {
        string _t1482 = "(i#";
        string _t1483 = " @ ";
        string _t1484 = "): ";
        print (ID139A, _t1482, iter1359, _t1483, pos1398, _t1484);
        string _t1485 = "nn=";
        string _t1486 = "; oldE=";
        string _t1487 = " newE=";
        string _t1488 = "\n";
        print (_t1485, nn13F7, _t1486, oldE13F2, _t1487, newE1470, _t1488);
      }
      real _t1489 = prim -0026<$[]> (newE1470, oldE13F2);
      vec3 _t148A = prim -0026<$[3]> (pos1398, oldpos146E);
      vec3 _t148B = prim *0036<$[3]> (gdeTest07D1, _t148A);
      vec3 _t148C = prim unary -008B<$[3]> (force13F6);
      real _t148D = prim •00CE<$[3]; $[3]; $[]> (_t148B, _t148C);
      bool _t148E = prim >0080 (_t1489, _t148D);
      if _t148E {
        hh139B = prim *0034 (hh139B, gdeBack07D2);
        real _t148F = 0.e0;
        bool _t1490 = prim ==0084 (_t148F, hh139B);
        if _t1490 {
          string _t1491 = "(i#";
          string _t1492 = " @ ";
          string _t1493 = "): ";
          print (ID139A, _t1491, iter1359, _t1492, pos1398, _t1493);
          string _t1494 = "backtracked all the way to hh=0\n";
          print (_t1494);
          die;
        }
        bool _t1495;
        bool _t1496;
        int _t1497 = 0;
        bool _t1498 = prim >007F (verb07DA, _t1497);
        if _t1498 {
          _t1496 = vv13A7;
        } else {
          _t1496 = false;
        }
        if _t1496 {
          _t1495 = true;
        } else {
          int _t1499 = 1;
          _t1495 = prim >007F (verb07DA, _t1499);
        }
        if _t1495 {
          string _t149A = "(i#";
          string _t149B = " @ ";
          string _t149C = "): ";
          print (ID139A, _t149A, iter1359, _t149B, pos1398, _t149C);
          string _t149D = "nn=";
          string _t149E = "; oldE=";
          string _t149F = " newE=";
          string _t14A0 = "; backtracking; hh=";
          string _t14A1 = "; mvmt=";
          string _t14A2 = "\n";
          print (_t149D, nn13F7, _t149E, oldE13F2, _t149F, newE1470, _t14A0, hh139B, _t14A1, mvmt13A3, _t14A2);
          string _t14A3 = "      fs=";
          string _t14A4 = "\n";
          print (_t14A3, fs1451, _t14A4);
          string _t14A5 = "      es=";
          string _t14A6 = "\n";
          print (_t14A5, es1448, _t14A6);
          string _t14A7 = "      newE - oldE=";
          real _t14A8 = prim -0026<$[]> (newE1470, oldE13F2);
          string _t14A9 = "\n";
          print (_t14A7, _t14A8, _t14A9);
          string _t14AA = "      force=";
          string _t14AB = "\n";
          print (_t14AA, force13F6, _t14AB);
          string _t14AC = "      dpos=";
          vec3 _t14AD = prim -0026<$[3]> (pos1398, oldpos146E);
          string _t14AE = "\n";
          print (_t14AC, _t14AD, _t14AE);
          string _t14AF = "      0.5*(pos - oldpos).(-force)=";
          real _t14B0 = 0.5e0;
          vec3 _t14B1 = prim -0026<$[3]> (pos1398, oldpos146E);
          vec3 _t14B2 = prim *0036<$[3]> (_t14B0, _t14B1);
          vec3 _t14B3 = prim unary -008B<$[3]> (force13F6);
          real _t14B4 = prim •00CE<$[3]; $[3]; $[]> (_t14B2, _t14B3);
          string _t14B5 = "\n";
          print (_t14AF, _t14B4, _t14B5);
        }
        pos1398 = oldpos146E;
        _pos1399 = pos1398;
        continue;
      }
      hh139B = prim *0034 (hh139B, gdeOppor07D3);
      vec3 _t14B6 = prim +0017<$[3]> (fs1451, es1448);
      step139C = prim +0017<$[3]> (step139C, _t14B6);
      real _t14B7 = prim |()|00B5<$[3]> (step139C);
      real _t14B8 = prim /0055 (_t14B7, tipd07CD);
      trav13A2 = prim +0017<$[]> (trav13A2, _t14B8);
      real _t14B9 = prim |()|00B5<$[3]> (step139C);
      real _t14BA = prim /0055 (_t14B9, tipd07CD);
      mvmt13A3 = prim lerp0096<$[]> (_t14BA, mvmt13A3, hist07DC);
      real _t14BB = prim |()|00B5<$[3]> (step139C);
      real _t14BC = prim /0055 (_t14BB, tipd07CD);
      bool _t14BD = prim <007A (_t14BC, pcmvEps07D8);
      if _t14BD {
        int _t14BE;
        bool _t1CC7;
        int _t1CC8 = 0;
        bool _t1CC9 = prim >007F (pcp07DD, _t1CC8);
        if _t1CC9 {
          bool _t1CCA;
          int _t1CCB = 0;
          bool _t1CCC = prim >007F (iter1359, _t1CCB);
          if _t1CCC {
            int _t1CCD = 0;
            int _t1CCE = prim %00A1 (iter1359, pcp07DD);
            _t1CCA = prim ==0082 (_t1CCD, _t1CCE);
          } else {
            _t1CCA = false;
          }
          _t1CC7 = _t1CCA;
        } else {
          _t1CC7 = false;
        }
        if _t1CC7 {
          int _t1CCF = prim /0054 (iter1359, pcp07DD);
          int _t1CD0 = 2;
          int _t1CD1 = prim %00A1 (_t1CCF, _t1CD0);
          int _t1CD2 = 2;
          int _t1CD3 = prim *0033 (_t1CD1, _t1CD2);
          int _t1CD4 = 1;
          int _t1CD5 = prim -0024 (_t1CD3, _t1CD4);
          _t14BE = _t1CD5;
        } else {
          int _t1CD6 = 0;
          _t14BE = _t1CD6;
        }
        int _t14BF = 0;
        bool _t14C0 = prim !=0086 (_t14BE, _t14BF);
        if _t14C0 {
          bool _t14C1;
          int _t14C2;
          bool _t1CB7;
          int _t1CB8 = 0;
          bool _t1CB9 = prim >007F (pcp07DD, _t1CB8);
          if _t1CB9 {
            bool _t1CBA;
            int _t1CBB = 0;
            bool _t1CBC = prim >007F (iter1359, _t1CBB);
            if _t1CBC {
              int _t1CBD = 0;
              int _t1CBE = prim %00A1 (iter1359, pcp07DD);
              _t1CBA = prim ==0082 (_t1CBD, _t1CBE);
            } else {
              _t1CBA = false;
            }
            _t1CB7 = _t1CBA;
          } else {
            _t1CB7 = false;
          }
          if _t1CB7 {
            int _t1CBF = prim /0054 (iter1359, pcp07DD);
            int _t1CC0 = 2;
            int _t1CC1 = prim %00A1 (_t1CBF, _t1CC0);
            int _t1CC2 = 2;
            int _t1CC3 = prim *0033 (_t1CC1, _t1CC2);
            int _t1CC4 = 1;
            int _t1CC5 = prim -0024 (_t1CC3, _t1CC4);
            _t14C2 = _t1CC5;
          } else {
            int _t1CC6 = 0;
            _t14C2 = _t1CC6;
          }
          int _t14C3 = 0;
          bool _t14C4 = prim >007F (_t14C2, _t14C3);
          if _t14C4 {
            bool _t14C5;
            real _t14C6 = 0.e0;
            bool _t14C7 = prim <007A (newE1470, _t14C6);
            if _t14C7 {
              bool _t14C8;
              bool _t14C9 = prim <0079 (nn13F7, nnmin12ED);
              if _t14C9 {
                _t14C8 = prim <0079 (born13A5, nnmax12F4);
              } else {
                _t14C8 = false;
              }
              _t14C5 = _t14C8;
            } else {
              _t14C5 = false;
            }
            _t14C1 = _t14C5;
          } else {
            _t14C1 = false;
          }
          if _t14C1 {
            vec3 _t14CA = prim normalize0137<$[3]> (mno1474);
            vec3 _t14CB = prim *0036<$[3]> (tipd07CD, _t14CA);
            vec3 npos14CC = prim -0026<$[3]> (pos1398, _t14CB);
            vec3 _t14CD = func fStep128C (npos14CC);
            vec3 _t14CE = prim *0036<$[3]> (sfs07DB, _t14CD);
            npos14CC = prim +0017<$[3]> (npos14CC, _t14CE);
            vec3 _t14CF = func fStep128C (npos14CC);
            vec3 _t14D0 = prim *0036<$[3]> (sfs07DB, _t14CF);
            npos14CC = prim +0017<$[3]> (npos14CC, _t14D0);
            bool birth14D1 = true;
            int _t14D2 = 2;
            bool _t14D3 = prim ==0082 (fDim07DF, _t14D2);
            if _t14D3 {
              int _t14D4 = 4;
              bool _t14D5 = prim >=007D (nn13F7, _t14D4);
              if _t14D5 {
                real _t14D6 = prim *0034 (tipd07CD, mabd07CE);
                point[] _t14D7 = prim sphere0198<point> (npos14CC, _t14D6);
                foreach P14D8 in _t14D7 {
                  birth14D1 = false;
                }
                if birth14D1 {
                  real _t14D9;
                  real _t1C93 = pos1398[0];
                  real _t1C94 = func urnd135C (_t1C93);
                  real _t1C95 = pos1398[1];
                  real _t1C96 = func urnd135C (_t1C95);
                  real _t1C97 = prim +0017<$[]> (_t1C94, _t1C96);
                  real _t1C98 = pos1398[2];
                  real _t1C99 = func urnd135C (_t1C98);
                  real _t1C9A = prim +0017<$[]> (_t1C97, _t1C99);
                  real _t1C9B = 0.1e1;
                  real _t1C9C = prim fmod018A (_t1C9A, _t1C9B);
                  _t14D9 = _t1C9C;
                  int _t14DA = prim -0024 (nnmin12ED, nn13F7);
                  real _t14DB = (real)_t14DA;
                  real _t14DC = prim $i2r01B6 (nnmin12ED);
                  real _t14DD = prim /0055 (_t14DB, _t14DC);
                  birth14D1 = prim <007A (_t14D9, _t14DD);
                }
              }
            }
            if birth14D1 {
              bool _t14DE;
              bool _t1B1D;
              bool _t1B1E;
              real _t1B1F = 0.e0;
              real _t1B20 = 0.e0;
              real _t1B21 = 0.e0;
              vec3 _t1B22 = [_t1B1F, _t1B20, _t1B21];
              vec3 mid1B23 = prim -0026<$[3]> (npos14CC, _t1B22);
              bool _t1B24;
              real _t1B25 = mid1B23[0];
              real _t1B26 = prim |()|00B5<$[]> (_t1B25);
              real _t1B27 = 0.1e0;
              bool _t1B28 = prim >0080 (_t1B26, _t1B27);
              if _t1B28 {
                bool _t1B29;
                real _t1B2A = mid1B23[1];
                real _t1B2B = prim |()|00B5<$[]> (_t1B2A);
                real _t1B2C = 0.1e0;
                bool _t1B2D = prim >0080 (_t1B2B, _t1B2C);
                if _t1B2D {
                  real _t1B2E = mid1B23[2];
                  real _t1B2F = prim |()|00B5<$[]> (_t1B2E);
                  real _t1B30 = 0.1e0;
                  _t1B29 = prim >0080 (_t1B2F, _t1B30);
                } else {
                  _t1B29 = false;
                }
                _t1B24 = _t1B29;
              } else {
                _t1B24 = false;
              }
              bool z1B31 = _t1B24;
              bool _t1B32;
              real _t1B33 = prim |()|00B5<$[3]> (mid1B23);
              real _t1B34 = 0.4e1;
              bool _t1B35 = prim <007A (_t1B33, _t1B34);
              if _t1B35 {
                real _t1B36 = prim |()|00B5<$[3]> (mid1B23);
                real _t1B37 = 0.3e1;
                _t1B32 = prim >0080 (_t1B36, _t1B37);
              } else {
                _t1B32 = false;
              }
              _t1B1E = _t1B32;
              if _t1B1E {
                bool _t1B38;
                real _t1B39;
                vec3 g1B3A;
                real x1B3B = npos14CC[0];
                real y1B3C = npos14CC[1];
                real z1B3D = npos14CC[2];
                real _t1B3E = 0.2e1;
                real _t1B3F = prim *0034 (_t1B3E, x1B3B);
                int _t1B40 = 2;
                real _t1B41 = prim ^0068 (z1B3D, _t1B40);
                real _t1B42 = prim *0034 (_t1B3F, _t1B41);
                int _t1B43 = 2;
                real _t1B44 = prim ^0068 (x1B3B, _t1B43);
                int _t1B45 = 2;
                real _t1B46 = prim ^0068 (y1B3C, _t1B45);
                real _t1B47 = prim +0017<$[]> (_t1B44, _t1B46);
                int _t1B48 = 2;
                real _t1B49 = prim ^0068 (z1B3D, _t1B48);
                real _t1B4A = prim +0017<$[]> (_t1B47, _t1B49);
                real _t1B4B = prim cos0169 (_t1B4A);
                real _t1B4C = prim *0034 (_t1B42, _t1B4B);
                real _t1B4D = 0.2e1;
                real _t1B4E = prim *0034 (_t1B4D, y1B3C);
                int _t1B4F = 2;
                real _t1B50 = prim ^0068 (z1B3D, _t1B4F);
                real _t1B51 = prim *0034 (_t1B4E, _t1B50);
                int _t1B52 = 2;
                real _t1B53 = prim ^0068 (x1B3B, _t1B52);
                int _t1B54 = 2;
                real _t1B55 = prim ^0068 (y1B3C, _t1B54);
                real _t1B56 = prim +0017<$[]> (_t1B53, _t1B55);
                int _t1B57 = 2;
                real _t1B58 = prim ^0068 (z1B3D, _t1B57);
                real _t1B59 = prim +0017<$[]> (_t1B56, _t1B58);
                real _t1B5A = prim cos0169 (_t1B59);
                real _t1B5B = prim *0034 (_t1B51, _t1B5A);
                real _t1B5C = 0.2e1;
                int _t1B5D = 3;
                real _t1B5E = prim ^0068 (z1B3D, _t1B5D);
                real _t1B5F = prim *0034 (_t1B5C, _t1B5E);
                int _t1B60 = 2;
                real _t1B61 = prim ^0068 (x1B3B, _t1B60);
                int _t1B62 = 2;
                real _t1B63 = prim ^0068 (y1B3C, _t1B62);
                real _t1B64 = prim +0017<$[]> (_t1B61, _t1B63);
                int _t1B65 = 2;
                real _t1B66 = prim ^0068 (z1B3D, _t1B65);
                real _t1B67 = prim +0017<$[]> (_t1B64, _t1B66);
                real _t1B68 = prim cos0169 (_t1B67);
                real _t1B69 = prim *0034 (_t1B5F, _t1B68);
                real _t1B6A = 0.2e1;
                real _t1B6B = prim *0034 (_t1B6A, z1B3D);
                int _t1B6C = 2;
                real _t1B6D = prim ^0068 (x1B3B, _t1B6C);
                int _t1B6E = 2;
                real _t1B6F = prim ^0068 (y1B3C, _t1B6E);
                real _t1B70 = prim +0017<$[]> (_t1B6D, _t1B6F);
                int _t1B71 = 2;
                real _t1B72 = prim ^0068 (z1B3D, _t1B71);
                real _t1B73 = prim +0017<$[]> (_t1B70, _t1B72);
                real _t1B74 = prim sin0171 (_t1B73);
                real _t1B75 = prim *0034 (_t1B6B, _t1B74);
                real _t1B76 = prim +0017<$[]> (_t1B69, _t1B75);
                vec3 g1B77 = [_t1B4C, _t1B5B, _t1B76];
                g1B3A = g1B77;
                tensor[3,3] H1B78;
                real x1B79 = npos14CC[0];
                real y1B7A = npos14CC[1];
                real z1B7B = npos14CC[2];
                int _t1B7C = -4;
                real _t1B7D = (real)_t1B7C;
                int _t1B7E = 2;
                real _t1B7F = prim ^0068 (x1B79, _t1B7E);
                real _t1B80 = prim *0034 (_t1B7D, _t1B7F);
                int _t1B81 = 2;
                real _t1B82 = prim ^0068 (z1B7B, _t1B81);
                real _t1B83 = prim *0034 (_t1B80, _t1B82);
                int _t1B84 = 2;
                real _t1B85 = prim ^0068 (x1B79, _t1B84);
                int _t1B86 = 2;
                real _t1B87 = prim ^0068 (y1B7A, _t1B86);
                real _t1B88 = prim +0017<$[]> (_t1B85, _t1B87);
                int _t1B89 = 2;
                real _t1B8A = prim ^0068 (z1B7B, _t1B89);
                real _t1B8B = prim +0017<$[]> (_t1B88, _t1B8A);
                real _t1B8C = prim sin0171 (_t1B8B);
                real _t1B8D = prim *0034 (_t1B83, _t1B8C);
                real _t1B8E = 0.2e1;
                int _t1B8F = 2;
                real _t1B90 = prim ^0068 (z1B7B, _t1B8F);
                real _t1B91 = prim *0034 (_t1B8E, _t1B90);
                int _t1B92 = 2;
                real _t1B93 = prim ^0068 (x1B79, _t1B92);
                int _t1B94 = 2;
                real _t1B95 = prim ^0068 (y1B7A, _t1B94);
                real _t1B96 = prim +0017<$[]> (_t1B93, _t1B95);
                int _t1B97 = 2;
                real _t1B98 = prim ^0068 (z1B7B, _t1B97);
                real _t1B99 = prim +0017<$[]> (_t1B96, _t1B98);
                real _t1B9A = prim cos0169 (_t1B99);
                real _t1B9B = prim *0034 (_t1B91, _t1B9A);
                real _t1B9C = prim +0017<$[]> (_t1B8D, _t1B9B);
                int _t1B9D = -4;
                real _t1B9E = (real)_t1B9D;
                real _t1B9F = prim *0034 (_t1B9E, x1B79);
                real _t1BA0 = prim *0034 (_t1B9F, y1B7A);
                int _t1BA1 = 2;
                real _t1BA2 = prim ^0068 (z1B7B, _t1BA1);
                real _t1BA3 = prim *0034 (_t1BA0, _t1BA2);
                int _t1BA4 = 2;
                real _t1BA5 = prim ^0068 (x1B79, _t1BA4);
                int _t1BA6 = 2;
                real _t1BA7 = prim ^0068 (y1B7A, _t1BA6);
                real _t1BA8 = prim +0017<$[]> (_t1BA5, _t1BA7);
                int _t1BA9 = 2;
                real _t1BAA = prim ^0068 (z1B7B, _t1BA9);
                real _t1BAB = prim +0017<$[]> (_t1BA8, _t1BAA);
                real _t1BAC = prim sin0171 (_t1BAB);
                real _t1BAD = prim *0034 (_t1BA3, _t1BAC);
                int _t1BAE = -4;
                real _t1BAF = (real)_t1BAE;
                real _t1BB0 = prim *0034 (_t1BAF, x1B79);
                int _t1BB1 = 3;
                real _t1BB2 = prim ^0068 (z1B7B, _t1BB1);
                real _t1BB3 = prim *0034 (_t1BB0, _t1BB2);
                int _t1BB4 = 2;
                real _t1BB5 = prim ^0068 (x1B79, _t1BB4);
                int _t1BB6 = 2;
                real _t1BB7 = prim ^0068 (y1B7A, _t1BB6);
                real _t1BB8 = prim +0017<$[]> (_t1BB5, _t1BB7);
                int _t1BB9 = 2;
                real _t1BBA = prim ^0068 (z1B7B, _t1BB9);
                real _t1BBB = prim +0017<$[]> (_t1BB8, _t1BBA);
                real _t1BBC = prim sin0171 (_t1BBB);
                real _t1BBD = prim *0034 (_t1BB3, _t1BBC);
                real _t1BBE = 0.4e1;
                real _t1BBF = prim *0034 (_t1BBE, x1B79);
                real _t1BC0 = prim *0034 (_t1BBF, z1B7B);
                int _t1BC1 = 2;
                real _t1BC2 = prim ^0068 (x1B79, _t1BC1);
                int _t1BC3 = 2;
                real _t1BC4 = prim ^0068 (y1B7A, _t1BC3);
                real _t1BC5 = prim +0017<$[]> (_t1BC2, _t1BC4);
                int _t1BC6 = 2;
                real _t1BC7 = prim ^0068 (z1B7B, _t1BC6);
                real _t1BC8 = prim +0017<$[]> (_t1BC5, _t1BC7);
                real _t1BC9 = prim cos0169 (_t1BC8);
                real _t1BCA = prim *0034 (_t1BC0, _t1BC9);
                real _t1BCB = prim +0017<$[]> (_t1BBD, _t1BCA);
                vec3 _t1BCC = [_t1B9C, _t1BAD, _t1BCB];
                int _t1BCD = -4;
                real _t1BCE = (real)_t1BCD;
                real _t1BCF = prim *0034 (_t1BCE, x1B79);
                real _t1BD0 = prim *0034 (_t1BCF, y1B7A);
                int _t1BD1 = 2;
                real _t1BD2 = prim ^0068 (z1B7B, _t1BD1);
                real _t1BD3 = prim *0034 (_t1BD0, _t1BD2);
                int _t1BD4 = 2;
                real _t1BD5 = prim ^0068 (x1B79, _t1BD4);
                int _t1BD6 = 2;
                real _t1BD7 = prim ^0068 (y1B7A, _t1BD6);
                real _t1BD8 = prim +0017<$[]> (_t1BD5, _t1BD7);
                int _t1BD9 = 2;
                real _t1BDA = prim ^0068 (z1B7B, _t1BD9);
                real _t1BDB = prim +0017<$[]> (_t1BD8, _t1BDA);
                real _t1BDC = prim sin0171 (_t1BDB);
                real _t1BDD = prim *0034 (_t1BD3, _t1BDC);
                int _t1BDE = -4;
                real _t1BDF = (real)_t1BDE;
                int _t1BE0 = 2;
                real _t1BE1 = prim ^0068 (y1B7A, _t1BE0);
                real _t1BE2 = prim *0034 (_t1BDF, _t1BE1);
                int _t1BE3 = 2;
                real _t1BE4 = prim ^0068 (z1B7B, _t1BE3);
                real _t1BE5 = prim *0034 (_t1BE2, _t1BE4);
                int _t1BE6 = 2;
                real _t1BE7 = prim ^0068 (x1B79, _t1BE6);
                int _t1BE8 = 2;
                real _t1BE9 = prim ^0068 (y1B7A, _t1BE8);
                real _t1BEA = prim +0017<$[]> (_t1BE7, _t1BE9);
                int _t1BEB = 2;
                real _t1BEC = prim ^0068 (z1B7B, _t1BEB);
                real _t1BED = prim +0017<$[]> (_t1BEA, _t1BEC);
                real _t1BEE = prim sin0171 (_t1BED);
                real _t1BEF = prim *0034 (_t1BE5, _t1BEE);
                real _t1BF0 = 0.2e1;
                int _t1BF1 = 2;
                real _t1BF2 = prim ^0068 (z1B7B, _t1BF1);
                real _t1BF3 = prim *0034 (_t1BF0, _t1BF2);
                int _t1BF4 = 2;
                real _t1BF5 = prim ^0068 (x1B79, _t1BF4);
                int _t1BF6 = 2;
                real _t1BF7 = prim ^0068 (y1B7A, _t1BF6);
                real _t1BF8 = prim +0017<$[]> (_t1BF5, _t1BF7);
                int _t1BF9 = 2;
                real _t1BFA = prim ^0068 (z1B7B, _t1BF9);
                real _t1BFB = prim +0017<$[]> (_t1BF8, _t1BFA);
                real _t1BFC = prim cos0169 (_t1BFB);
                real _t1BFD = prim *0034 (_t1BF3, _t1BFC);
                real _t1BFE = prim +0017<$[]> (_t1BEF, _t1BFD);
                int _t1BFF = -4;
                real _t1C00 = (real)_t1BFF;
                real _t1C01 = prim *0034 (_t1C00, y1B7A);
                int _t1C02 = 3;
                real _t1C03 = prim ^0068 (z1B7B, _t1C02);
                real _t1C04 = prim *0034 (_t1C01, _t1C03);
                int _t1C05 = 2;
                real _t1C06 = prim ^0068 (x1B79, _t1C05);
                int _t1C07 = 2;
                real _t1C08 = prim ^0068 (y1B7A, _t1C07);
                real _t1C09 = prim +0017<$[]> (_t1C06, _t1C08);
                int _t1C0A = 2;
                real _t1C0B = prim ^0068 (z1B7B, _t1C0A);
                real _t1C0C = prim +0017<$[]> (_t1C09, _t1C0B);
                real _t1C0D = prim sin0171 (_t1C0C);
                real _t1C0E = prim *0034 (_t1C04, _t1C0D);
                real _t1C0F = 0.4e1;
                real _t1C10 = prim *0034 (_t1C0F, y1B7A);
                real _t1C11 = prim *0034 (_t1C10, z1B7B);
                int _t1C12 = 2;
                real _t1C13 = prim ^0068 (x1B79, _t1C12);
                int _t1C14 = 2;
                real _t1C15 = prim ^0068 (y1B7A, _t1C14);
                real _t1C16 = prim +0017<$[]> (_t1C13, _t1C15);
                int _t1C17 = 2;
                real _t1C18 = prim ^0068 (z1B7B, _t1C17);
                real _t1C19 = prim +0017<$[]> (_t1C16, _t1C18);
                real _t1C1A = prim cos0169 (_t1C19);
                real _t1C1B = prim *0034 (_t1C11, _t1C1A);
                real _t1C1C = prim +0017<$[]> (_t1C0E, _t1C1B);
                vec3 _t1C1D = [_t1BDD, _t1BFE, _t1C1C];
                int _t1C1E = -4;
                real _t1C1F = (real)_t1C1E;
                real _t1C20 = prim *0034 (_t1C1F, x1B79);
                int _t1C21 = 3;
                real _t1C22 = prim ^0068 (z1B7B, _t1C21);
                real _t1C23 = prim *0034 (_t1C20, _t1C22);
                int _t1C24 = 2;
                real _t1C25 = prim ^0068 (x1B79, _t1C24);
                int _t1C26 = 2;
                real _t1C27 = prim ^0068 (y1B7A, _t1C26);
                real _t1C28 = prim +0017<$[]> (_t1C25, _t1C27);
                int _t1C29 = 2;
                real _t1C2A = prim ^0068 (z1B7B, _t1C29);
                real _t1C2B = prim +0017<$[]> (_t1C28, _t1C2A);
                real _t1C2C = prim sin0171 (_t1C2B);
                real _t1C2D = prim *0034 (_t1C23, _t1C2C);
                real _t1C2E = 0.4e1;
                real _t1C2F = prim *0034 (_t1C2E, x1B79);
                real _t1C30 = prim *0034 (_t1C2F, z1B7B);
                int _t1C31 = 2;
                real _t1C32 = prim ^0068 (x1B79, _t1C31);
                int _t1C33 = 2;
                real _t1C34 = prim ^0068 (y1B7A, _t1C33);
                real _t1C35 = prim +0017<$[]> (_t1C32, _t1C34);
                int _t1C36 = 2;
                real _t1C37 = prim ^0068 (z1B7B, _t1C36);
                real _t1C38 = prim +0017<$[]> (_t1C35, _t1C37);
                real _t1C39 = prim cos0169 (_t1C38);
                real _t1C3A = prim *0034 (_t1C30, _t1C39);
                real _t1C3B = prim +0017<$[]> (_t1C2D, _t1C3A);
                int _t1C3C = -4;
                real _t1C3D = (real)_t1C3C;
                real _t1C3E = prim *0034 (_t1C3D, y1B7A);
                int _t1C3F = 3;
                real _t1C40 = prim ^0068 (z1B7B, _t1C3F);
                real _t1C41 = prim *0034 (_t1C3E, _t1C40);
                int _t1C42 = 2;
                real _t1C43 = prim ^0068 (x1B79, _t1C42);
                int _t1C44 = 2;
                real _t1C45 = prim ^0068 (y1B7A, _t1C44);
                real _t1C46 = prim +0017<$[]> (_t1C43, _t1C45);
                int _t1C47 = 2;
                real _t1C48 = prim ^0068 (z1B7B, _t1C47);
                real _t1C49 = prim +0017<$[]> (_t1C46, _t1C48);
                real _t1C4A = prim sin0171 (_t1C49);
                real _t1C4B = prim *0034 (_t1C41, _t1C4A);
                real _t1C4C = 0.4e1;
                real _t1C4D = prim *0034 (_t1C4C, y1B7A);
                real _t1C4E = prim *0034 (_t1C4D, z1B7B);
                int _t1C4F = 2;
                real _t1C50 = prim ^0068 (x1B79, _t1C4F);
                int _t1C51 = 2;
                real _t1C52 = prim ^0068 (y1B7A, _t1C51);
                real _t1C53 = prim +0017<$[]> (_t1C50, _t1C52);
                int _t1C54 = 2;
                real _t1C55 = prim ^0068 (z1B7B, _t1C54);
                real _t1C56 = prim +0017<$[]> (_t1C53, _t1C55);
                real _t1C57 = prim cos0169 (_t1C56);
                real _t1C58 = prim *0034 (_t1C4E, _t1C57);
                real _t1C59 = prim +0017<$[]> (_t1C4B, _t1C58);
                int _t1C5A = -4;
                real _t1C5B = (real)_t1C5A;
                int _t1C5C = 4;
                real _t1C5D = prim ^0068 (z1B7B, _t1C5C);
                real _t1C5E = prim *0034 (_t1C5B, _t1C5D);
                int _t1C5F = 2;
                real _t1C60 = prim ^0068 (x1B79, _t1C5F);
                int _t1C61 = 2;
                real _t1C62 = prim ^0068 (y1B7A, _t1C61);
                real _t1C63 = prim +0017<$[]> (_t1C60, _t1C62);
                int _t1C64 = 2;
                real _t1C65 = prim ^0068 (z1B7B, _t1C64);
                real _t1C66 = prim +0017<$[]> (_t1C63, _t1C65);
                real _t1C67 = prim sin0171 (_t1C66);
                real _t1C68 = prim *0034 (_t1C5E, _t1C67);
                real _t1C69 = 0.1e2;
                int _t1C6A = 2;
                real _t1C6B = prim ^0068 (z1B7B, _t1C6A);
                real _t1C6C = prim *0034 (_t1C69, _t1C6B);
                int _t1C6D = 2;
                real _t1C6E = prim ^0068 (x1B79, _t1C6D);
                int _t1C6F = 2;
                real _t1C70 = prim ^0068 (y1B7A, _t1C6F);
                real _t1C71 = prim +0017<$[]> (_t1C6E, _t1C70);
                int _t1C72 = 2;
                real _t1C73 = prim ^0068 (z1B7B, _t1C72);
                real _t1C74 = prim +0017<$[]> (_t1C71, _t1C73);
                real _t1C75 = prim cos0169 (_t1C74);
                real _t1C76 = prim *0034 (_t1C6C, _t1C75);
                real _t1C77 = prim +0017<$[]> (_t1C68, _t1C76);
                real _t1C78 = 0.2e1;
                int _t1C79 = 2;
                real _t1C7A = prim ^0068 (x1B79, _t1C79);
                int _t1C7B = 2;
                real _t1C7C = prim ^0068 (y1B7A, _t1C7B);
                real _t1C7D = prim +0017<$[]> (_t1C7A, _t1C7C);
                int _t1C7E = 2;
                real _t1C7F = prim ^0068 (z1B7B, _t1C7E);
                real _t1C80 = prim +0017<$[]> (_t1C7D, _t1C7F);
                real _t1C81 = prim sin0171 (_t1C80);
                real _t1C82 = prim *0034 (_t1C78, _t1C81);
                real _t1C83 = prim +0017<$[]> (_t1C77, _t1C82);
                vec3 _t1C84 = [_t1C3B, _t1C59, _t1C83];
                tensor[3,3] hess1C85 = [_t1BCC, _t1C1D, _t1C84];
                H1B78 = hess1C85;
                real[3] _t1C86 = prim evals009F (H1B78);
                int _t1C87 = 2;
                real _t1C88 = prim $sub01C0<real; %3> (_t1C86, _t1C87);
                real _t1C89 = prim unary -008B<$[]> (_t1C88);
                real _t1C8A = prim |()|00B5<$[3]> (g1B3A);
                real _t1C8B = prim +0017<$[]> (fBias07CC, _t1C8A);
                real str1C8C = prim /0055 (_t1C89, _t1C8B);
                _t1B39 = str1C8C;
                bool _t1C8D = prim >0080 (_t1B39, fStrTh07CA);
                if _t1C8D {
                  bool _t1C8E;
                  real _t1C8F;
                  real _t1C90 = 0.e0;
                  _t1C8F = _t1C90;
                  bool _t1C91 = prim >=007E (_t1C8F, fMaskTh07CB);
                  if _t1C91 {
                    bool _t1C92 = true;
                    _t1C8E = _t1C92;
                  } else {
                    _t1C8E = false;
                  }
                  _t1B38 = _t1C8E;
                } else {
                  _t1B38 = false;
                }
                _t1B1D = _t1B38;
              } else {
                _t1B1D = false;
              }
              _t14DE = _t1B1D;
              if _t14DE {
                new point (npos14CC, hh139B);
                int _t14DF = 1;
                born13A5 = prim +0015 (born13A5, _t14DF);
              }
            }
          } else {
            int _t14E0;
            bool _t1CA7;
            int _t1CA8 = 0;
            bool _t1CA9 = prim >007F (pcp07DD, _t1CA8);
            if _t1CA9 {
              bool _t1CAA;
              int _t1CAB = 0;
              bool _t1CAC = prim >007F (iter1359, _t1CAB);
              if _t1CAC {
                int _t1CAD = 0;
                int _t1CAE = prim %00A1 (iter1359, pcp07DD);
                _t1CAA = prim ==0082 (_t1CAD, _t1CAE);
              } else {
                _t1CAA = false;
              }
              _t1CA7 = _t1CAA;
            } else {
              _t1CA7 = false;
            }
            if _t1CA7 {
              int _t1CAF = prim /0054 (iter1359, pcp07DD);
              int _t1CB0 = 2;
              int _t1CB1 = prim %00A1 (_t1CAF, _t1CB0);
              int _t1CB2 = 2;
              int _t1CB3 = prim *0033 (_t1CB1, _t1CB2);
              int _t1CB4 = 1;
              int _t1CB5 = prim -0024 (_t1CB3, _t1CB4);
              _t14E0 = _t1CB5;
            } else {
              int _t1CB6 = 0;
              _t14E0 = _t1CB6;
            }
            int _t14E1 = 0;
            bool _t14E2 = prim <0079 (_t14E0, _t14E1);
            if _t14E2 {
              real _t14E3 = 0.e0;
              bool _t14E4 = prim >0080 (newE1470, _t14E3);
              if _t14E4 {
                bool _t14E5 = prim >007F (nn13F7, nnmax12F4);
                if _t14E5 {
                  real _t14E6;
                  real _t1C9D = pos1398[0];
                  real _t1C9E = func urnd135C (_t1C9D);
                  real _t1C9F = pos1398[1];
                  real _t1CA0 = func urnd135C (_t1C9F);
                  real _t1CA1 = prim +0017<$[]> (_t1C9E, _t1CA0);
                  real _t1CA2 = pos1398[2];
                  real _t1CA3 = func urnd135C (_t1CA2);
                  real _t1CA4 = prim +0017<$[]> (_t1CA1, _t1CA3);
                  real _t1CA5 = 0.1e1;
                  real _t1CA6 = prim fmod018A (_t1CA4, _t1CA5);
                  _t14E6 = _t1CA6;
                  int _t14E7 = prim -0024 (nn13F7, nnmax12F4);
                  real _t14E8 = (real)_t14E7;
                  real _t14E9 = prim $i2r01B6 (nn13F7);
                  real _t14EA = prim /0055 (_t14E8, _t14E9);
                  bool _t14EB = prim <007A (_t14E6, _t14EA);
                  if _t14EB {
                    die;
                  }
                }
              }
            }
          }
        }
      }
    }
    first13A6 = false;
  }
}
collection {
  int _t14F7 = 0;
  int _t14F8 = prim length0123<vec3> (ipos07DE);
  int _t14F9 = 1;
  int _t14FA = prim -0024 (_t14F8, _t14F9);
  int[] _t14FB = prim $range01C3 (_t14F7, _t14FA);
  foreach ii14FC in _t14FB {
    vec3 _t14FD = prim $dynsub01C2<vec3> (ipos07DE, ii14FC);
    real _t14FE = 0.1e1;
    new point (_t14FD, _t14FE);
  }
}
update {
  int pop14FF = prim numActive01A2 ();
  int _t1500;
  bool _t1501 = prim !=0086 (pop14FF, popLast135B);
  if _t1501 {
    _t1500 = 1;
  } else {
    _t1500 = 0;
  }
  int pc1502 = _t1500;
  real _t1503 = (real)pc1502;
  rpc135A = prim lerp0096<$[]> (_t1503, rpc135A, pchist1358);
  bool res1504= all { (P1507) => {
      bool _t1508 = P1507.found13A0;
      return _t1508;
    } (P1505, P1505)
  | P1505 in all };
  bool allfound150A = res1504;
  real _t150B = 0.1e3;
  real res150C= sum<real> { (P1510) => {
      real _t1511;
      bool _t1512 = P1510.found13A0;
      if _t1512 {
        _t1511 = 0.1e1;
      } else {
        _t1511 = 0.e0;
      }
      return _t1511;
    } (P150D, P150D)
  | P150D in all };
  int num1514 = prim numStrands01A4 ();
  real rNum1515 = (real)num1514;
  real mean1516 = prim /0055 (res150C, rNum1515);
  real percfound1517 = prim *0034 (_t150B, mean1516);
  real res1518= sum<real> { (P151B) => {
      real _t151C = P151B.closest13A4;
      return _t151C;
    } (P1519, P1519)
  | P1519 in all };
  int num151E = prim numStrands01A4 ();
  real rNum151F = (real)num151E;
  real mean1520 = prim /0055 (res1518, rNum151F);
  real meancl1521 = mean1520;
  real res1522= sum<real> { (P1528, meancl152A) => {
      real _t1529 = P1528.closest13A4;
      real _t152B = prim -0026<$[]> (_t1529, meancl152A);
      int _t152C = 2;
      real _t152D = prim ^0068 (_t152B, _t152C);
      return _t152D;
    } (P1523, P1523, meancl1521)
  | P1523 in all };
  int num152F = prim numStrands01A4 ();
  real rNum1530 = (real)num152F;
  real mean1531 = prim /0055 (res1522, rNum1530);
  real varicl1532 = mean1531;
  real _t1533 = prim sqrt0165 (varicl1532);
  real covcl1534 = prim /0055 (_t1533, meancl1521);
  real res1535= max<real> { (P1538) => {
      real _t1539 = P1538.mvmt13A3;
      return _t1539;
    } (P1536, P1536)
  | P1536 in all };
  real maxmvmt153B = res1535;
  string _t153C = "======= finished iter ";
  string _t153D = " w/ ";
  string _t153E = ")";
  string _t153F = "; %found=";
  string _t1540 = "; mean(hh)=";
  real res1541= sum<real> { (P1544) => {
      real _t1545 = P1544.hh139B;
      return _t1545;
    } (P1542, P1542)
  | P1542 in all };
  int num1547 = prim numStrands01A4 ();
  real rNum1548 = (real)num1547;
  real mean1549 = prim /0055 (res1541, rNum1548);
  string _t154A = "; mean(cl)=";
  string _t154B = "; COV(cl)=";
  string _t154C = "; max(mvmt)=";
  string _t154D = "; pc=";
  string _t154E = "; rpc=";
  string _t154F = "\n";
  print (_t153C, iter1359, _t153D, pop14FF, _t153E, _t153F, percfound1517, _t1540, mean1549, _t154A, meancl1521, _t154B, covcl1534, _t154C, maxmvmt153B, _t154D, pc1502, _t154E, rpc135A, _t154F);
  bool _t1550;
  if allfound150A {
    bool _t1551;
    bool _t1552 = prim <007A (covcl1534, geoEps07D5);
    if _t1552 {
      bool _t1553;
      bool _t1554 = prim <007A (maxmvmt153B, mvmtEps07D6);
      if _t1554 {
        _t1553 = prim <007A (rpc135A, rpcEps07D7);
      } else {
        _t1553 = false;
      }
      _t1551 = _t1553;
    } else {
      _t1551 = false;
    }
    _t1550 = _t1551;
  } else {
    _t1550 = false;
  }
  if _t1550 {
    string _t1555 = "======= Stabilizing ";
    int _t1556 = prim numActive01A2 ();
    string _t1557 = " (iter ";
    string _t1558 = ")";
    string _t1559 = "; COV(cl)=";
    string _t155A = " < ";
    string _t155B = "; max(mvmt)=";
    string _t155C = " < ";
    string _t155D = "; rpc=";
    string _t155E = " < ";
    string _t155F = "\n";
    print (_t1555, _t1556, _t1557, iter1359, _t1558, _t1559, covcl1534, _t155A, geoEps07D5, _t155B, maxmvmt153B, _t155C, mvmtEps07D6, _t155D, rpc135A, _t155E, rpcEps07D7, _t155F);
    stabilize_all;
  } else {
    string _t1560 = "======= Stabilizing ";
    int _t1561 = prim numActive01A2 ();
    string _t1562 = " (iter ";
    string _t1563 = ")";
    string _t1564 = "; COV(cl)=";
    string _t1565 = " > ";
    string _t1566 = "; max(mvmt)=";
    string _t1567 = " > ";
    string _t1568 = "; rpc=";
    string _t1569 = " > ";
    string _t156A = "\n";
    print (_t1560, _t1561, _t1562, iter1359, _t1563, _t1564, covcl1534, _t1565, geoEps07D5, _t1566, maxmvmt153B, _t1567, mvmtEps07D6, _t1568, rpc135A, _t1569, rpcEps07D7, _t156A);
  }
  int _t156B = 1;
  iter1359 = prim +0015 (iter1359, _t156B);
  popLast135B = pop14FF;
}
/* Program end */
/* Simplified Program (after after contraction (2)) start */
properties: GlobalInit,StabilizeAll,GlobalReduce,StrandSets,GlobalUpdate,NewStrands,StrandCommunication,StrandsMayDie,HasInputs,HasGlobals,ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
input FemData:Mesh meshData07BA;
input FemData:Space 0space07C6_intermedateGlobal07C7;
input FemData:FemFunc 0data07C8_intermedateGlobal07C9;
input real fStrTh07CA("Feature strength threshold");
input real fMaskTh07CB("feature mask threshold") = <default>;
input real fBias07CC("Bias in feature strength computing") = <default>;
input real tipd07CD("Target inter-particle distance") = <default>;
input real mabd07CE("Min allowed birth distance (> 0.7351)") = <default>;
input real travMax07CF("Max allowed travel to or on feature") = <default>;
input int nfsMax07D0("Max allowed # feature steps ") = <default>;
input real gdeTest07D1("Scaling in sufficient decrease test") = <default>;
input real gdeBack07D2("How to scale stepsize for backtrack") = <default>;
input real gdeOppor07D3("Opportunistic stepsize increase") = <default>;
input real fsEps07D4("Conv. thresh. on feature step size");
input real geoEps07D5("Conv. thresh. on system geometry") = <default>;
input real mvmtEps07D6("Conv. thresh. on point movement") = <default>;
input real rpcEps07D7("Conv. thresh. on recent pop. changes") = <default>;
input real pcmvEps07D8("Motion limit before PC") = <default>;
input real isoval07D9("Which isosurface to sample") = <default>;
input int verb07DA("Verbosity level") = <default>;
input real sfs07DB("Scaling (<=1 for stability) on fStep") = <default>;
input real hist07DC("How history matters for convergence") = <default>;
input int pcp07DD("periodicity of population control (PC)") = <default>;
input vec3[] ipos07DE("Initial point positions");
input int fDim07DF = <default>;
constants {
  fMaskTh07CB = 0.e0;
  fBias07CC = 0.e0;
  tipd07CD = 0.1e1;
  mabd07CE = 0.75e0;
  travMax07CF = 0.1e2;
  nfsMax07D0 = 20;
  gdeTest07D1 = 0.5e0;
  gdeBack07D2 = 0.5e0;
  gdeOppor07D3 = 0.12e1;
  geoEps07D5 = 0.1e0;
  mvmtEps07D6 = 0.1e-1;
  rpcEps07D7 = 0.1e-1;
  pcmvEps07D8 = 0.3e0;
  isoval07D9 = 0.e0;
  verb07DA = 0;
  sfs07DB = 0.5e0;
  hist07DC = 0.5e0;
  pcp07DD = 5;
  fDim07DF = 2;
}
global int nnmin12ED;
global int nnmax12F4;
global real phiWellRad1341;
global real rad1342;
global real pchist1358;
global int iter1359;
global real rpc135A;
global int popLast135B;
function int[2]#6 nextCell408B4 (int faceIdx0D13, int cell0D14, Femdata: Mesh mesh0D15)
{
  int _t0D16 = -1;
  bool _t0D17 = prim ==0082 (faceIdx0D13, _t0D16);
  if _t0D17 {
    int _t0D18 = -1;
    int _t0D19 = -1;
    int[2] _t0D1A = {_t0D18, _t0D19};
    return _t0D1A;
  } else {
    int _t0D1B = 8;
    int _t0D1C = prim *0033 (cell0D14, _t0D1B);
    int _t0D1D = 2;
    int _t0D1E = prim *0033 (faceIdx0D13, _t0D1D);
    int _t0D1F = prim +0015 (_t0D1C, _t0D1E);
    int[2] _t0D20 = extractFemItemN((mesh0D15, _t0D1F),CellFaceCell(Mesh),);
    return _t0D20;
  }
}
function vec3#6 fStep128C (vec3 s128D)
{
  vec3 g128E;
  real x167D = s128D[0];
  real y167E = s128D[1];
  real z167F = s128D[2];
  real _t1680 = 0.2e1;
  real _t1681 = prim *0034 (_t1680, x167D);
  int _t1682 = 2;
  real _t1683 = prim ^0068 (z167F, _t1682);
  real _t1684 = prim *0034 (_t1681, _t1683);
  int _t1685 = 2;
  real _t1686 = prim ^0068 (x167D, _t1685);
  int _t1687 = 2;
  real _t1688 = prim ^0068 (y167E, _t1687);
  real _t1689 = prim +0017<$[]> (_t1686, _t1688);
  int _t168A = 2;
  real _t168B = prim ^0068 (z167F, _t168A);
  real _t168C = prim +0017<$[]> (_t1689, _t168B);
  real _t168D = prim cos0169 (_t168C);
  real _t168E = prim *0034 (_t1684, _t168D);
  real _t168F = 0.2e1;
  real _t1690 = prim *0034 (_t168F, y167E);
  int _t1691 = 2;
  real _t1692 = prim ^0068 (z167F, _t1691);
  real _t1693 = prim *0034 (_t1690, _t1692);
  int _t1694 = 2;
  real _t1695 = prim ^0068 (x167D, _t1694);
  int _t1696 = 2;
  real _t1697 = prim ^0068 (y167E, _t1696);
  real _t1698 = prim +0017<$[]> (_t1695, _t1697);
  int _t1699 = 2;
  real _t169A = prim ^0068 (z167F, _t1699);
  real _t169B = prim +0017<$[]> (_t1698, _t169A);
  real _t169C = prim cos0169 (_t169B);
  real _t169D = prim *0034 (_t1693, _t169C);
  real _t169E = 0.2e1;
  int _t169F = 3;
  real _t16A0 = prim ^0068 (z167F, _t169F);
  real _t16A1 = prim *0034 (_t169E, _t16A0);
  int _t16A2 = 2;
  real _t16A3 = prim ^0068 (x167D, _t16A2);
  int _t16A4 = 2;
  real _t16A5 = prim ^0068 (y167E, _t16A4);
  real _t16A6 = prim +0017<$[]> (_t16A3, _t16A5);
  int _t16A7 = 2;
  real _t16A8 = prim ^0068 (z167F, _t16A7);
  real _t16A9 = prim +0017<$[]> (_t16A6, _t16A8);
  real _t16AA = prim cos0169 (_t16A9);
  real _t16AB = prim *0034 (_t16A1, _t16AA);
  real _t16AC = 0.2e1;
  real _t16AD = prim *0034 (_t16AC, z167F);
  int _t16AE = 2;
  real _t16AF = prim ^0068 (x167D, _t16AE);
  int _t16B0 = 2;
  real _t16B1 = prim ^0068 (y167E, _t16B0);
  real _t16B2 = prim +0017<$[]> (_t16AF, _t16B1);
  int _t16B3 = 2;
  real _t16B4 = prim ^0068 (z167F, _t16B3);
  real _t16B5 = prim +0017<$[]> (_t16B2, _t16B4);
  real _t16B6 = prim sin0171 (_t16B5);
  real _t16B7 = prim *0034 (_t16AD, _t16B6);
  real _t16B8 = prim +0017<$[]> (_t16AB, _t16B7);
  vec3 g16B9 = [_t168E, _t169D, _t16B8];
  g128E = g16B9;
  tensor[3,3] H128F;
  real x1570 = s128D[0];
  real y1571 = s128D[1];
  real z1572 = s128D[2];
  int _t1573 = -4;
  real _t1574 = (real)_t1573;
  int _t1575 = 2;
  real _t1576 = prim ^0068 (x1570, _t1575);
  real _t1577 = prim *0034 (_t1574, _t1576);
  int _t1578 = 2;
  real _t1579 = prim ^0068 (z1572, _t1578);
  real _t157A = prim *0034 (_t1577, _t1579);
  int _t157B = 2;
  real _t157C = prim ^0068 (x1570, _t157B);
  int _t157D = 2;
  real _t157E = prim ^0068 (y1571, _t157D);
  real _t157F = prim +0017<$[]> (_t157C, _t157E);
  int _t1580 = 2;
  real _t1581 = prim ^0068 (z1572, _t1580);
  real _t1582 = prim +0017<$[]> (_t157F, _t1581);
  real _t1583 = prim sin0171 (_t1582);
  real _t1584 = prim *0034 (_t157A, _t1583);
  real _t1585 = 0.2e1;
  int _t1586 = 2;
  real _t1587 = prim ^0068 (z1572, _t1586);
  real _t1588 = prim *0034 (_t1585, _t1587);
  int _t1589 = 2;
  real _t158A = prim ^0068 (x1570, _t1589);
  int _t158B = 2;
  real _t158C = prim ^0068 (y1571, _t158B);
  real _t158D = prim +0017<$[]> (_t158A, _t158C);
  int _t158E = 2;
  real _t158F = prim ^0068 (z1572, _t158E);
  real _t1590 = prim +0017<$[]> (_t158D, _t158F);
  real _t1591 = prim cos0169 (_t1590);
  real _t1592 = prim *0034 (_t1588, _t1591);
  real _t1593 = prim +0017<$[]> (_t1584, _t1592);
  int _t1594 = -4;
  real _t1595 = (real)_t1594;
  real _t1596 = prim *0034 (_t1595, x1570);
  real _t1597 = prim *0034 (_t1596, y1571);
  int _t1598 = 2;
  real _t1599 = prim ^0068 (z1572, _t1598);
  real _t159A = prim *0034 (_t1597, _t1599);
  int _t159B = 2;
  real _t159C = prim ^0068 (x1570, _t159B);
  int _t159D = 2;
  real _t159E = prim ^0068 (y1571, _t159D);
  real _t159F = prim +0017<$[]> (_t159C, _t159E);
  int _t15A0 = 2;
  real _t15A1 = prim ^0068 (z1572, _t15A0);
  real _t15A2 = prim +0017<$[]> (_t159F, _t15A1);
  real _t15A3 = prim sin0171 (_t15A2);
  real _t15A4 = prim *0034 (_t159A, _t15A3);
  int _t15A5 = -4;
  real _t15A6 = (real)_t15A5;
  real _t15A7 = prim *0034 (_t15A6, x1570);
  int _t15A8 = 3;
  real _t15A9 = prim ^0068 (z1572, _t15A8);
  real _t15AA = prim *0034 (_t15A7, _t15A9);
  int _t15AB = 2;
  real _t15AC = prim ^0068 (x1570, _t15AB);
  int _t15AD = 2;
  real _t15AE = prim ^0068 (y1571, _t15AD);
  real _t15AF = prim +0017<$[]> (_t15AC, _t15AE);
  int _t15B0 = 2;
  real _t15B1 = prim ^0068 (z1572, _t15B0);
  real _t15B2 = prim +0017<$[]> (_t15AF, _t15B1);
  real _t15B3 = prim sin0171 (_t15B2);
  real _t15B4 = prim *0034 (_t15AA, _t15B3);
  real _t15B5 = 0.4e1;
  real _t15B6 = prim *0034 (_t15B5, x1570);
  real _t15B7 = prim *0034 (_t15B6, z1572);
  int _t15B8 = 2;
  real _t15B9 = prim ^0068 (x1570, _t15B8);
  int _t15BA = 2;
  real _t15BB = prim ^0068 (y1571, _t15BA);
  real _t15BC = prim +0017<$[]> (_t15B9, _t15BB);
  int _t15BD = 2;
  real _t15BE = prim ^0068 (z1572, _t15BD);
  real _t15BF = prim +0017<$[]> (_t15BC, _t15BE);
  real _t15C0 = prim cos0169 (_t15BF);
  real _t15C1 = prim *0034 (_t15B7, _t15C0);
  real _t15C2 = prim +0017<$[]> (_t15B4, _t15C1);
  vec3 _t15C3 = [_t1593, _t15A4, _t15C2];
  int _t15C4 = -4;
  real _t15C5 = (real)_t15C4;
  real _t15C6 = prim *0034 (_t15C5, x1570);
  real _t15C7 = prim *0034 (_t15C6, y1571);
  int _t15C8 = 2;
  real _t15C9 = prim ^0068 (z1572, _t15C8);
  real _t15CA = prim *0034 (_t15C7, _t15C9);
  int _t15CB = 2;
  real _t15CC = prim ^0068 (x1570, _t15CB);
  int _t15CD = 2;
  real _t15CE = prim ^0068 (y1571, _t15CD);
  real _t15CF = prim +0017<$[]> (_t15CC, _t15CE);
  int _t15D0 = 2;
  real _t15D1 = prim ^0068 (z1572, _t15D0);
  real _t15D2 = prim +0017<$[]> (_t15CF, _t15D1);
  real _t15D3 = prim sin0171 (_t15D2);
  real _t15D4 = prim *0034 (_t15CA, _t15D3);
  int _t15D5 = -4;
  real _t15D6 = (real)_t15D5;
  int _t15D7 = 2;
  real _t15D8 = prim ^0068 (y1571, _t15D7);
  real _t15D9 = prim *0034 (_t15D6, _t15D8);
  int _t15DA = 2;
  real _t15DB = prim ^0068 (z1572, _t15DA);
  real _t15DC = prim *0034 (_t15D9, _t15DB);
  int _t15DD = 2;
  real _t15DE = prim ^0068 (x1570, _t15DD);
  int _t15DF = 2;
  real _t15E0 = prim ^0068 (y1571, _t15DF);
  real _t15E1 = prim +0017<$[]> (_t15DE, _t15E0);
  int _t15E2 = 2;
  real _t15E3 = prim ^0068 (z1572, _t15E2);
  real _t15E4 = prim +0017<$[]> (_t15E1, _t15E3);
  real _t15E5 = prim sin0171 (_t15E4);
  real _t15E6 = prim *0034 (_t15DC, _t15E5);
  real _t15E7 = 0.2e1;
  int _t15E8 = 2;
  real _t15E9 = prim ^0068 (z1572, _t15E8);
  real _t15EA = prim *0034 (_t15E7, _t15E9);
  int _t15EB = 2;
  real _t15EC = prim ^0068 (x1570, _t15EB);
  int _t15ED = 2;
  real _t15EE = prim ^0068 (y1571, _t15ED);
  real _t15EF = prim +0017<$[]> (_t15EC, _t15EE);
  int _t15F0 = 2;
  real _t15F1 = prim ^0068 (z1572, _t15F0);
  real _t15F2 = prim +0017<$[]> (_t15EF, _t15F1);
  real _t15F3 = prim cos0169 (_t15F2);
  real _t15F4 = prim *0034 (_t15EA, _t15F3);
  real _t15F5 = prim +0017<$[]> (_t15E6, _t15F4);
  int _t15F6 = -4;
  real _t15F7 = (real)_t15F6;
  real _t15F8 = prim *0034 (_t15F7, y1571);
  int _t15F9 = 3;
  real _t15FA = prim ^0068 (z1572, _t15F9);
  real _t15FB = prim *0034 (_t15F8, _t15FA);
  int _t15FC = 2;
  real _t15FD = prim ^0068 (x1570, _t15FC);
  int _t15FE = 2;
  real _t15FF = prim ^0068 (y1571, _t15FE);
  real _t1600 = prim +0017<$[]> (_t15FD, _t15FF);
  int _t1601 = 2;
  real _t1602 = prim ^0068 (z1572, _t1601);
  real _t1603 = prim +0017<$[]> (_t1600, _t1602);
  real _t1604 = prim sin0171 (_t1603);
  real _t1605 = prim *0034 (_t15FB, _t1604);
  real _t1606 = 0.4e1;
  real _t1607 = prim *0034 (_t1606, y1571);
  real _t1608 = prim *0034 (_t1607, z1572);
  int _t1609 = 2;
  real _t160A = prim ^0068 (x1570, _t1609);
  int _t160B = 2;
  real _t160C = prim ^0068 (y1571, _t160B);
  real _t160D = prim +0017<$[]> (_t160A, _t160C);
  int _t160E = 2;
  real _t160F = prim ^0068 (z1572, _t160E);
  real _t1610 = prim +0017<$[]> (_t160D, _t160F);
  real _t1611 = prim cos0169 (_t1610);
  real _t1612 = prim *0034 (_t1608, _t1611);
  real _t1613 = prim +0017<$[]> (_t1605, _t1612);
  vec3 _t1614 = [_t15D4, _t15F5, _t1613];
  int _t1615 = -4;
  real _t1616 = (real)_t1615;
  real _t1617 = prim *0034 (_t1616, x1570);
  int _t1618 = 3;
  real _t1619 = prim ^0068 (z1572, _t1618);
  real _t161A = prim *0034 (_t1617, _t1619);
  int _t161B = 2;
  real _t161C = prim ^0068 (x1570, _t161B);
  int _t161D = 2;
  real _t161E = prim ^0068 (y1571, _t161D);
  real _t161F = prim +0017<$[]> (_t161C, _t161E);
  int _t1620 = 2;
  real _t1621 = prim ^0068 (z1572, _t1620);
  real _t1622 = prim +0017<$[]> (_t161F, _t1621);
  real _t1623 = prim sin0171 (_t1622);
  real _t1624 = prim *0034 (_t161A, _t1623);
  real _t1625 = 0.4e1;
  real _t1626 = prim *0034 (_t1625, x1570);
  real _t1627 = prim *0034 (_t1626, z1572);
  int _t1628 = 2;
  real _t1629 = prim ^0068 (x1570, _t1628);
  int _t162A = 2;
  real _t162B = prim ^0068 (y1571, _t162A);
  real _t162C = prim +0017<$[]> (_t1629, _t162B);
  int _t162D = 2;
  real _t162E = prim ^0068 (z1572, _t162D);
  real _t162F = prim +0017<$[]> (_t162C, _t162E);
  real _t1630 = prim cos0169 (_t162F);
  real _t1631 = prim *0034 (_t1627, _t1630);
  real _t1632 = prim +0017<$[]> (_t1624, _t1631);
  int _t1633 = -4;
  real _t1634 = (real)_t1633;
  real _t1635 = prim *0034 (_t1634, y1571);
  int _t1636 = 3;
  real _t1637 = prim ^0068 (z1572, _t1636);
  real _t1638 = prim *0034 (_t1635, _t1637);
  int _t1639 = 2;
  real _t163A = prim ^0068 (x1570, _t1639);
  int _t163B = 2;
  real _t163C = prim ^0068 (y1571, _t163B);
  real _t163D = prim +0017<$[]> (_t163A, _t163C);
  int _t163E = 2;
  real _t163F = prim ^0068 (z1572, _t163E);
  real _t1640 = prim +0017<$[]> (_t163D, _t163F);
  real _t1641 = prim sin0171 (_t1640);
  real _t1642 = prim *0034 (_t1638, _t1641);
  real _t1643 = 0.4e1;
  real _t1644 = prim *0034 (_t1643, y1571);
  real _t1645 = prim *0034 (_t1644, z1572);
  int _t1646 = 2;
  real _t1647 = prim ^0068 (x1570, _t1646);
  int _t1648 = 2;
  real _t1649 = prim ^0068 (y1571, _t1648);
  real _t164A = prim +0017<$[]> (_t1647, _t1649);
  int _t164B = 2;
  real _t164C = prim ^0068 (z1572, _t164B);
  real _t164D = prim +0017<$[]> (_t164A, _t164C);
  real _t164E = prim cos0169 (_t164D);
  real _t164F = prim *0034 (_t1645, _t164E);
  real _t1650 = prim +0017<$[]> (_t1642, _t164F);
  int _t1651 = -4;
  real _t1652 = (real)_t1651;
  int _t1653 = 4;
  real _t1654 = prim ^0068 (z1572, _t1653);
  real _t1655 = prim *0034 (_t1652, _t1654);
  int _t1656 = 2;
  real _t1657 = prim ^0068 (x1570, _t1656);
  int _t1658 = 2;
  real _t1659 = prim ^0068 (y1571, _t1658);
  real _t165A = prim +0017<$[]> (_t1657, _t1659);
  int _t165B = 2;
  real _t165C = prim ^0068 (z1572, _t165B);
  real _t165D = prim +0017<$[]> (_t165A, _t165C);
  real _t165E = prim sin0171 (_t165D);
  real _t165F = prim *0034 (_t1655, _t165E);
  real _t1660 = 0.1e2;
  int _t1661 = 2;
  real _t1662 = prim ^0068 (z1572, _t1661);
  real _t1663 = prim *0034 (_t1660, _t1662);
  int _t1664 = 2;
  real _t1665 = prim ^0068 (x1570, _t1664);
  int _t1666 = 2;
  real _t1667 = prim ^0068 (y1571, _t1666);
  real _t1668 = prim +0017<$[]> (_t1665, _t1667);
  int _t1669 = 2;
  real _t166A = prim ^0068 (z1572, _t1669);
  real _t166B = prim +0017<$[]> (_t1668, _t166A);
  real _t166C = prim cos0169 (_t166B);
  real _t166D = prim *0034 (_t1663, _t166C);
  real _t166E = prim +0017<$[]> (_t165F, _t166D);
  real _t166F = 0.2e1;
  int _t1670 = 2;
  real _t1671 = prim ^0068 (x1570, _t1670);
  int _t1672 = 2;
  real _t1673 = prim ^0068 (y1571, _t1672);
  real _t1674 = prim +0017<$[]> (_t1671, _t1673);
  int _t1675 = 2;
  real _t1676 = prim ^0068 (z1572, _t1675);
  real _t1677 = prim +0017<$[]> (_t1674, _t1676);
  real _t1678 = prim sin0171 (_t1677);
  real _t1679 = prim *0034 (_t166F, _t1678);
  real _t167A = prim +0017<$[]> (_t166E, _t1679);
  vec3 _t167B = [_t1632, _t1650, _t167A];
  tensor[3,3] hess167C = [_t15C3, _t1614, _t167B];
  H128F = hess167C;
  vec3[3] E1290 = prim evecs00A0 (H128F);
  real[3] L1291 = prim evals009F (H128F);
  real _t1292 = 0.1e1;
  int _t1293 = 2;
  real _t1294 = prim $sub01C0<real; %3> (L1291, _t1293);
  real _t1295 = prim /0055 (_t1292, _t1294);
  real _t1296 = prim unary -008B<$[]> (_t1295);
  int _t1297 = 2;
  vec3 _t1298 = prim $sub01C0<vec3; %3> (E1290, _t1297);
  vec3 _t1299 = prim *0036<$[3]> (_t1296, _t1298);
  int _t129A = 2;
  vec3 _t129B = prim $sub01C0<vec3; %3> (E1290, _t129A);
  tensor[3,3] _t129C = prim ⊗00E5<$[3]; $[3]; $[3,3]> (_t1299, _t129B);
  vec3 up129D = prim •00CE<$[3,3]; $[3]; $[3]> (_t129C, g128E);
  bool _t129E;
  real _t129F = up129D[0];
  real _t12A0 = up129D[0];
  bool _t12A1 = prim ==0084 (_t129F, _t12A0);
  bool _t12A2 = prim !00BC (_t12A1);
  if _t12A2 {
    _t129E = true;
  } else {
    bool _t12A3;
    real _t12A4 = up129D[1];
    real _t12A5 = up129D[1];
    bool _t12A6 = prim ==0084 (_t12A4, _t12A5);
    bool _t12A7 = prim !00BC (_t12A6);
    if _t12A7 {
      _t12A3 = true;
    } else {
      real _t12A8 = up129D[2];
      real _t12A9 = up129D[2];
      bool _t12AA = prim ==0084 (_t12A8, _t12A9);
      _t12A3 = prim !00BC (_t12AA);
    }
    _t129E = _t12A3;
  }
  if _t129E {
    real _t12AB = +inf;
    real _t12AC = +inf;
    real _t12AD = +inf;
    vec3 _t12AE = [_t12AB, _t12AC, _t12AD];
    return _t12AE;
  }
  return up129D;
}
function tensor[3,3]#4 fPerp12BE (vec3 s12BF)
{
  vec3 g12C0;
  real x17C7 = s12BF[0];
  real y17C8 = s12BF[1];
  real z17C9 = s12BF[2];
  real _t17CA = 0.2e1;
  real _t17CB = prim *0034 (_t17CA, x17C7);
  int _t17CC = 2;
  real _t17CD = prim ^0068 (z17C9, _t17CC);
  real _t17CE = prim *0034 (_t17CB, _t17CD);
  int _t17CF = 2;
  real _t17D0 = prim ^0068 (x17C7, _t17CF);
  int _t17D1 = 2;
  real _t17D2 = prim ^0068 (y17C8, _t17D1);
  real _t17D3 = prim +0017<$[]> (_t17D0, _t17D2);
  int _t17D4 = 2;
  real _t17D5 = prim ^0068 (z17C9, _t17D4);
  real _t17D6 = prim +0017<$[]> (_t17D3, _t17D5);
  real _t17D7 = prim cos0169 (_t17D6);
  real _t17D8 = prim *0034 (_t17CE, _t17D7);
  real _t17D9 = 0.2e1;
  real _t17DA = prim *0034 (_t17D9, y17C8);
  int _t17DB = 2;
  real _t17DC = prim ^0068 (z17C9, _t17DB);
  real _t17DD = prim *0034 (_t17DA, _t17DC);
  int _t17DE = 2;
  real _t17DF = prim ^0068 (x17C7, _t17DE);
  int _t17E0 = 2;
  real _t17E1 = prim ^0068 (y17C8, _t17E0);
  real _t17E2 = prim +0017<$[]> (_t17DF, _t17E1);
  int _t17E3 = 2;
  real _t17E4 = prim ^0068 (z17C9, _t17E3);
  real _t17E5 = prim +0017<$[]> (_t17E2, _t17E4);
  real _t17E6 = prim cos0169 (_t17E5);
  real _t17E7 = prim *0034 (_t17DD, _t17E6);
  real _t17E8 = 0.2e1;
  int _t17E9 = 3;
  real _t17EA = prim ^0068 (z17C9, _t17E9);
  real _t17EB = prim *0034 (_t17E8, _t17EA);
  int _t17EC = 2;
  real _t17ED = prim ^0068 (x17C7, _t17EC);
  int _t17EE = 2;
  real _t17EF = prim ^0068 (y17C8, _t17EE);
  real _t17F0 = prim +0017<$[]> (_t17ED, _t17EF);
  int _t17F1 = 2;
  real _t17F2 = prim ^0068 (z17C9, _t17F1);
  real _t17F3 = prim +0017<$[]> (_t17F0, _t17F2);
  real _t17F4 = prim cos0169 (_t17F3);
  real _t17F5 = prim *0034 (_t17EB, _t17F4);
  real _t17F6 = 0.2e1;
  real _t17F7 = prim *0034 (_t17F6, z17C9);
  int _t17F8 = 2;
  real _t17F9 = prim ^0068 (x17C7, _t17F8);
  int _t17FA = 2;
  real _t17FB = prim ^0068 (y17C8, _t17FA);
  real _t17FC = prim +0017<$[]> (_t17F9, _t17FB);
  int _t17FD = 2;
  real _t17FE = prim ^0068 (z17C9, _t17FD);
  real _t17FF = prim +0017<$[]> (_t17FC, _t17FE);
  real _t1800 = prim sin0171 (_t17FF);
  real _t1801 = prim *0034 (_t17F7, _t1800);
  real _t1802 = prim +0017<$[]> (_t17F5, _t1801);
  vec3 g1803 = [_t17D8, _t17E7, _t1802];
  g12C0 = g1803;
  tensor[3,3] H12C1;
  real x16BA = s12BF[0];
  real y16BB = s12BF[1];
  real z16BC = s12BF[2];
  int _t16BD = -4;
  real _t16BE = (real)_t16BD;
  int _t16BF = 2;
  real _t16C0 = prim ^0068 (x16BA, _t16BF);
  real _t16C1 = prim *0034 (_t16BE, _t16C0);
  int _t16C2 = 2;
  real _t16C3 = prim ^0068 (z16BC, _t16C2);
  real _t16C4 = prim *0034 (_t16C1, _t16C3);
  int _t16C5 = 2;
  real _t16C6 = prim ^0068 (x16BA, _t16C5);
  int _t16C7 = 2;
  real _t16C8 = prim ^0068 (y16BB, _t16C7);
  real _t16C9 = prim +0017<$[]> (_t16C6, _t16C8);
  int _t16CA = 2;
  real _t16CB = prim ^0068 (z16BC, _t16CA);
  real _t16CC = prim +0017<$[]> (_t16C9, _t16CB);
  real _t16CD = prim sin0171 (_t16CC);
  real _t16CE = prim *0034 (_t16C4, _t16CD);
  real _t16CF = 0.2e1;
  int _t16D0 = 2;
  real _t16D1 = prim ^0068 (z16BC, _t16D0);
  real _t16D2 = prim *0034 (_t16CF, _t16D1);
  int _t16D3 = 2;
  real _t16D4 = prim ^0068 (x16BA, _t16D3);
  int _t16D5 = 2;
  real _t16D6 = prim ^0068 (y16BB, _t16D5);
  real _t16D7 = prim +0017<$[]> (_t16D4, _t16D6);
  int _t16D8 = 2;
  real _t16D9 = prim ^0068 (z16BC, _t16D8);
  real _t16DA = prim +0017<$[]> (_t16D7, _t16D9);
  real _t16DB = prim cos0169 (_t16DA);
  real _t16DC = prim *0034 (_t16D2, _t16DB);
  real _t16DD = prim +0017<$[]> (_t16CE, _t16DC);
  int _t16DE = -4;
  real _t16DF = (real)_t16DE;
  real _t16E0 = prim *0034 (_t16DF, x16BA);
  real _t16E1 = prim *0034 (_t16E0, y16BB);
  int _t16E2 = 2;
  real _t16E3 = prim ^0068 (z16BC, _t16E2);
  real _t16E4 = prim *0034 (_t16E1, _t16E3);
  int _t16E5 = 2;
  real _t16E6 = prim ^0068 (x16BA, _t16E5);
  int _t16E7 = 2;
  real _t16E8 = prim ^0068 (y16BB, _t16E7);
  real _t16E9 = prim +0017<$[]> (_t16E6, _t16E8);
  int _t16EA = 2;
  real _t16EB = prim ^0068 (z16BC, _t16EA);
  real _t16EC = prim +0017<$[]> (_t16E9, _t16EB);
  real _t16ED = prim sin0171 (_t16EC);
  real _t16EE = prim *0034 (_t16E4, _t16ED);
  int _t16EF = -4;
  real _t16F0 = (real)_t16EF;
  real _t16F1 = prim *0034 (_t16F0, x16BA);
  int _t16F2 = 3;
  real _t16F3 = prim ^0068 (z16BC, _t16F2);
  real _t16F4 = prim *0034 (_t16F1, _t16F3);
  int _t16F5 = 2;
  real _t16F6 = prim ^0068 (x16BA, _t16F5);
  int _t16F7 = 2;
  real _t16F8 = prim ^0068 (y16BB, _t16F7);
  real _t16F9 = prim +0017<$[]> (_t16F6, _t16F8);
  int _t16FA = 2;
  real _t16FB = prim ^0068 (z16BC, _t16FA);
  real _t16FC = prim +0017<$[]> (_t16F9, _t16FB);
  real _t16FD = prim sin0171 (_t16FC);
  real _t16FE = prim *0034 (_t16F4, _t16FD);
  real _t16FF = 0.4e1;
  real _t1700 = prim *0034 (_t16FF, x16BA);
  real _t1701 = prim *0034 (_t1700, z16BC);
  int _t1702 = 2;
  real _t1703 = prim ^0068 (x16BA, _t1702);
  int _t1704 = 2;
  real _t1705 = prim ^0068 (y16BB, _t1704);
  real _t1706 = prim +0017<$[]> (_t1703, _t1705);
  int _t1707 = 2;
  real _t1708 = prim ^0068 (z16BC, _t1707);
  real _t1709 = prim +0017<$[]> (_t1706, _t1708);
  real _t170A = prim cos0169 (_t1709);
  real _t170B = prim *0034 (_t1701, _t170A);
  real _t170C = prim +0017<$[]> (_t16FE, _t170B);
  vec3 _t170D = [_t16DD, _t16EE, _t170C];
  int _t170E = -4;
  real _t170F = (real)_t170E;
  real _t1710 = prim *0034 (_t170F, x16BA);
  real _t1711 = prim *0034 (_t1710, y16BB);
  int _t1712 = 2;
  real _t1713 = prim ^0068 (z16BC, _t1712);
  real _t1714 = prim *0034 (_t1711, _t1713);
  int _t1715 = 2;
  real _t1716 = prim ^0068 (x16BA, _t1715);
  int _t1717 = 2;
  real _t1718 = prim ^0068 (y16BB, _t1717);
  real _t1719 = prim +0017<$[]> (_t1716, _t1718);
  int _t171A = 2;
  real _t171B = prim ^0068 (z16BC, _t171A);
  real _t171C = prim +0017<$[]> (_t1719, _t171B);
  real _t171D = prim sin0171 (_t171C);
  real _t171E = prim *0034 (_t1714, _t171D);
  int _t171F = -4;
  real _t1720 = (real)_t171F;
  int _t1721 = 2;
  real _t1722 = prim ^0068 (y16BB, _t1721);
  real _t1723 = prim *0034 (_t1720, _t1722);
  int _t1724 = 2;
  real _t1725 = prim ^0068 (z16BC, _t1724);
  real _t1726 = prim *0034 (_t1723, _t1725);
  int _t1727 = 2;
  real _t1728 = prim ^0068 (x16BA, _t1727);
  int _t1729 = 2;
  real _t172A = prim ^0068 (y16BB, _t1729);
  real _t172B = prim +0017<$[]> (_t1728, _t172A);
  int _t172C = 2;
  real _t172D = prim ^0068 (z16BC, _t172C);
  real _t172E = prim +0017<$[]> (_t172B, _t172D);
  real _t172F = prim sin0171 (_t172E);
  real _t1730 = prim *0034 (_t1726, _t172F);
  real _t1731 = 0.2e1;
  int _t1732 = 2;
  real _t1733 = prim ^0068 (z16BC, _t1732);
  real _t1734 = prim *0034 (_t1731, _t1733);
  int _t1735 = 2;
  real _t1736 = prim ^0068 (x16BA, _t1735);
  int _t1737 = 2;
  real _t1738 = prim ^0068 (y16BB, _t1737);
  real _t1739 = prim +0017<$[]> (_t1736, _t1738);
  int _t173A = 2;
  real _t173B = prim ^0068 (z16BC, _t173A);
  real _t173C = prim +0017<$[]> (_t1739, _t173B);
  real _t173D = prim cos0169 (_t173C);
  real _t173E = prim *0034 (_t1734, _t173D);
  real _t173F = prim +0017<$[]> (_t1730, _t173E);
  int _t1740 = -4;
  real _t1741 = (real)_t1740;
  real _t1742 = prim *0034 (_t1741, y16BB);
  int _t1743 = 3;
  real _t1744 = prim ^0068 (z16BC, _t1743);
  real _t1745 = prim *0034 (_t1742, _t1744);
  int _t1746 = 2;
  real _t1747 = prim ^0068 (x16BA, _t1746);
  int _t1748 = 2;
  real _t1749 = prim ^0068 (y16BB, _t1748);
  real _t174A = prim +0017<$[]> (_t1747, _t1749);
  int _t174B = 2;
  real _t174C = prim ^0068 (z16BC, _t174B);
  real _t174D = prim +0017<$[]> (_t174A, _t174C);
  real _t174E = prim sin0171 (_t174D);
  real _t174F = prim *0034 (_t1745, _t174E);
  real _t1750 = 0.4e1;
  real _t1751 = prim *0034 (_t1750, y16BB);
  real _t1752 = prim *0034 (_t1751, z16BC);
  int _t1753 = 2;
  real _t1754 = prim ^0068 (x16BA, _t1753);
  int _t1755 = 2;
  real _t1756 = prim ^0068 (y16BB, _t1755);
  real _t1757 = prim +0017<$[]> (_t1754, _t1756);
  int _t1758 = 2;
  real _t1759 = prim ^0068 (z16BC, _t1758);
  real _t175A = prim +0017<$[]> (_t1757, _t1759);
  real _t175B = prim cos0169 (_t175A);
  real _t175C = prim *0034 (_t1752, _t175B);
  real _t175D = prim +0017<$[]> (_t174F, _t175C);
  vec3 _t175E = [_t171E, _t173F, _t175D];
  int _t175F = -4;
  real _t1760 = (real)_t175F;
  real _t1761 = prim *0034 (_t1760, x16BA);
  int _t1762 = 3;
  real _t1763 = prim ^0068 (z16BC, _t1762);
  real _t1764 = prim *0034 (_t1761, _t1763);
  int _t1765 = 2;
  real _t1766 = prim ^0068 (x16BA, _t1765);
  int _t1767 = 2;
  real _t1768 = prim ^0068 (y16BB, _t1767);
  real _t1769 = prim +0017<$[]> (_t1766, _t1768);
  int _t176A = 2;
  real _t176B = prim ^0068 (z16BC, _t176A);
  real _t176C = prim +0017<$[]> (_t1769, _t176B);
  real _t176D = prim sin0171 (_t176C);
  real _t176E = prim *0034 (_t1764, _t176D);
  real _t176F = 0.4e1;
  real _t1770 = prim *0034 (_t176F, x16BA);
  real _t1771 = prim *0034 (_t1770, z16BC);
  int _t1772 = 2;
  real _t1773 = prim ^0068 (x16BA, _t1772);
  int _t1774 = 2;
  real _t1775 = prim ^0068 (y16BB, _t1774);
  real _t1776 = prim +0017<$[]> (_t1773, _t1775);
  int _t1777 = 2;
  real _t1778 = prim ^0068 (z16BC, _t1777);
  real _t1779 = prim +0017<$[]> (_t1776, _t1778);
  real _t177A = prim cos0169 (_t1779);
  real _t177B = prim *0034 (_t1771, _t177A);
  real _t177C = prim +0017<$[]> (_t176E, _t177B);
  int _t177D = -4;
  real _t177E = (real)_t177D;
  real _t177F = prim *0034 (_t177E, y16BB);
  int _t1780 = 3;
  real _t1781 = prim ^0068 (z16BC, _t1780);
  real _t1782 = prim *0034 (_t177F, _t1781);
  int _t1783 = 2;
  real _t1784 = prim ^0068 (x16BA, _t1783);
  int _t1785 = 2;
  real _t1786 = prim ^0068 (y16BB, _t1785);
  real _t1787 = prim +0017<$[]> (_t1784, _t1786);
  int _t1788 = 2;
  real _t1789 = prim ^0068 (z16BC, _t1788);
  real _t178A = prim +0017<$[]> (_t1787, _t1789);
  real _t178B = prim sin0171 (_t178A);
  real _t178C = prim *0034 (_t1782, _t178B);
  real _t178D = 0.4e1;
  real _t178E = prim *0034 (_t178D, y16BB);
  real _t178F = prim *0034 (_t178E, z16BC);
  int _t1790 = 2;
  real _t1791 = prim ^0068 (x16BA, _t1790);
  int _t1792 = 2;
  real _t1793 = prim ^0068 (y16BB, _t1792);
  real _t1794 = prim +0017<$[]> (_t1791, _t1793);
  int _t1795 = 2;
  real _t1796 = prim ^0068 (z16BC, _t1795);
  real _t1797 = prim +0017<$[]> (_t1794, _t1796);
  real _t1798 = prim cos0169 (_t1797);
  real _t1799 = prim *0034 (_t178F, _t1798);
  real _t179A = prim +0017<$[]> (_t178C, _t1799);
  int _t179B = -4;
  real _t179C = (real)_t179B;
  int _t179D = 4;
  real _t179E = prim ^0068 (z16BC, _t179D);
  real _t179F = prim *0034 (_t179C, _t179E);
  int _t17A0 = 2;
  real _t17A1 = prim ^0068 (x16BA, _t17A0);
  int _t17A2 = 2;
  real _t17A3 = prim ^0068 (y16BB, _t17A2);
  real _t17A4 = prim +0017<$[]> (_t17A1, _t17A3);
  int _t17A5 = 2;
  real _t17A6 = prim ^0068 (z16BC, _t17A5);
  real _t17A7 = prim +0017<$[]> (_t17A4, _t17A6);
  real _t17A8 = prim sin0171 (_t17A7);
  real _t17A9 = prim *0034 (_t179F, _t17A8);
  real _t17AA = 0.1e2;
  int _t17AB = 2;
  real _t17AC = prim ^0068 (z16BC, _t17AB);
  real _t17AD = prim *0034 (_t17AA, _t17AC);
  int _t17AE = 2;
  real _t17AF = prim ^0068 (x16BA, _t17AE);
  int _t17B0 = 2;
  real _t17B1 = prim ^0068 (y16BB, _t17B0);
  real _t17B2 = prim +0017<$[]> (_t17AF, _t17B1);
  int _t17B3 = 2;
  real _t17B4 = prim ^0068 (z16BC, _t17B3);
  real _t17B5 = prim +0017<$[]> (_t17B2, _t17B4);
  real _t17B6 = prim cos0169 (_t17B5);
  real _t17B7 = prim *0034 (_t17AD, _t17B6);
  real _t17B8 = prim +0017<$[]> (_t17A9, _t17B7);
  real _t17B9 = 0.2e1;
  int _t17BA = 2;
  real _t17BB = prim ^0068 (x16BA, _t17BA);
  int _t17BC = 2;
  real _t17BD = prim ^0068 (y16BB, _t17BC);
  real _t17BE = prim +0017<$[]> (_t17BB, _t17BD);
  int _t17BF = 2;
  real _t17C0 = prim ^0068 (z16BC, _t17BF);
  real _t17C1 = prim +0017<$[]> (_t17BE, _t17C0);
  real _t17C2 = prim sin0171 (_t17C1);
  real _t17C3 = prim *0034 (_t17B9, _t17C2);
  real _t17C4 = prim +0017<$[]> (_t17B8, _t17C3);
  vec3 _t17C5 = [_t177C, _t179A, _t17C4];
  tensor[3,3] hess17C6 = [_t170D, _t175E, _t17C5];
  H12C1 = hess17C6;
  vec3[3] _t12C2 = prim evecs00A0 (H12C1);
  int _t12C3 = 2;
  vec3 E212C4 = prim $sub01C0<vec3; %3> (_t12C2, _t12C3);
  tensor[3,3] _t12C5 = prim $id01B9<%3> ();
  tensor[3,3] _t12C6 = prim ⊗00E5<$[3]; $[3]; $[3,3]> (E212C4, E212C4);
  tensor[3,3] m12C7 = prim -0026<$[3,3]> (_t12C5, _t12C6);
  real t12C8 = prim :00FC<$[3,3]; $[3,3]; $[]> (m12C7, m12C7);
  bool _t12C9 = prim ==0084 (t12C8, t12C8);
  bool _t12CA = prim !00BC (_t12C9);
  if _t12CA {
    tensor[3,3] _t12CB = prim $zero01BB<$[3,3]> ();
    return _t12CB;
  }
  return m12C7;
}
function real#12 urnd135C (real x135D)
{
  real _t135E = 0.e0;
  bool _t135F = prim ==0084 (x135D, _t135E);
  if _t135F {
    real _t1360 = 0.e0;
    return _t1360;
  }
  real _t1361 = prim |()|00B5<$[]> (x135D);
  real l21362 = prim log2018D (_t1361);
  real _t1363 = 0.2e1;
  real _t1364 = prim floor0189 (l21362);
  real _t1365 = prim -0026<$[]> (l21362, _t1364);
  real _t1366 = 0.1e1;
  real _t1367 = prim -0026<$[]> (_t1365, _t1366);
  real frxp1368 = prim ^0069 (_t1363, _t1367);
  real _t1369 = 0.2e1;
  int _t136A = 20;
  real _t136B = prim ^0068 (_t1369, _t136A);
  int _t136C = 2;
  int _t136D = prim *0033 (_t136C, iter1359);
  real _t136E = (real)_t136D;
  real _t136F = prim +0017<$[]> (_t136B, _t136E);
  real _t1370 = prim *0034 (_t136F, frxp1368);
  real _t1371 = 0.1e1;
  real _t1372 = prim fmod018A (_t1370, _t1371);
  return _t1372;
}
globalInit {
  int _t07BE = 0;
  int _t07BC = 1;
  int _t07C0 = extractFemItem(NumCell(Mesh), int, meshData07BA);
  int _t07BF = prim -0024 (_t07C0, _t07BC);
  int[] _t07C3 = prim $range01C3 (_t07BE, _t07BF);
  Femdata: MeshCell[] _t07C4 = {};
  foreach _t07C2 in _t07C3 {
    Femdata: MeshCell _t07C5 = loadFem(MeshCell, meshData07BA, _t07C2);
    _t07C4 = prim @0010<Femdata: MeshCell> (_t07C4, _t07C5);
  }
  int _t12E7;
  int _t12E8 = 2;
  bool _t12E9 = prim ==0082 (_t12E8, fDim07DF);
  if _t12E9 {
    _t12E7 = 6;
  } else {
    int _t12EA;
    int _t12EB = 1;
    bool _t12EC = prim ==0082 (_t12EB, fDim07DF);
    if _t12EC {
      _t12EA = 2;
    } else {
      _t12EA = 0;
    }
    _t12E7 = _t12EA;
  }
  nnmin12ED = _t12E7;
  int _t12EE;
  int _t12EF = 2;
  bool _t12F0 = prim ==0082 (_t12EF, fDim07DF);
  if _t12F0 {
    _t12EE = 8;
  } else {
    int _t12F1;
    int _t12F2 = 1;
    bool _t12F3 = prim ==0082 (_t12F2, fDim07DF);
    if _t12F3 {
      _t12F1 = 3;
    } else {
      _t12F1 = 0;
    }
    _t12EE = _t12F1;
  }
  nnmax12F4 = _t12EE;
  real _t133F = 0.2e1;
  real _t1340 = 0.3e1;
  phiWellRad1341 = prim /0055 (_t133F, _t1340);
  rad1342 = prim /0055 (tipd07CD, phiWellRad1341);
  real _t1353 = 0.1e1;
  int _t1354 = 2;
  int _t1355 = prim *0033 (_t1354, pcp07DD);
  real _t1356 = (real)_t1355;
  real _t1357 = prim /0055 (_t1353, _t1356);
  pchist1358 = prim ^0069 (hist07DC, _t1357);
  iter1359 = 0;
  rpc135A = 0.1e1;
  popLast135B = -1;
}
strand point (vec3 p01396, real hh01397) in 3D {
  output vec3 pos1398;
  output vec3 _pos1399;
  real ID139A;
  real hh139B;
  vec3 step139C;
  bool found13A0;
  int nfs13A1;
  real trav13A2;
  real mvmt13A3;
  real closest13A4;
  int born13A5;
  bool first13A6;
  {
    pos1398 = p01396;
    _pos1399 = pos1398;
    real ID1B0E;
    real _t1B0F = 0.1e7;
    real _t1B10;
    real _t1B11 = p01396[0];
    real _t1B12 = func urnd135C (_t1B11);
    real _t1B13 = p01396[1];
    real _t1B14 = func urnd135C (_t1B13);
    real _t1B15 = prim +0017<$[]> (_t1B12, _t1B14);
    real _t1B16 = p01396[2];
    real _t1B17 = func urnd135C (_t1B16);
    real _t1B18 = prim +0017<$[]> (_t1B15, _t1B17);
    real _t1B19 = 0.1e1;
    real _t1B1A = prim fmod018A (_t1B18, _t1B19);
    _t1B10 = _t1B1A;
    real _t1B1B = prim *0034 (_t1B0F, _t1B10);
    real _t1B1C = prim floor0189 (_t1B1B);
    ID1B0E = _t1B1C;
    ID139A = ID1B0E;
    hh139B = hh01397;
    real _t139D = 0.e0;
    real _t139E = 0.e0;
    real _t139F = 0.e0;
    step139C = [_t139D, _t139E, _t139F];
    found13A0 = false;
    nfs13A1 = 0;
    trav13A2 = 0.e0;
    mvmt13A3 = 0.1e1;
    closest13A4 = rad1342;
    born13A5 = 0;
    first13A6 = true;
  }
  update
  {
    bool vv13A7 = false;
    if first13A6 {
      bool _t13A8;
      bool _t13A9;
      int _t13AA = 0;
      bool _t13AB = prim >007F (verb07DA, _t13AA);
      if _t13AB {
        _t13A9 = vv13A7;
      } else {
        _t13A9 = false;
      }
      if _t13A9 {
        _t13A8 = true;
      } else {
        int _t13AC = 1;
        _t13A8 = prim >007F (verb07DA, _t13AC);
      }
      if _t13A8 {
        string _t13AD = "(i#";
        string _t13AE = " @ ";
        string _t13AF = "): ";
        print (ID139A, _t13AD, iter1359, _t13AE, pos1398, _t13AF);
        string _t13B0 = " HELLO!\n";
        print (_t13B0);
      }
    }
    bool _t13B1;
    bool _t2053;
    bool _t2054;
    real _t2055 = 0.e0;
    real _t2056 = 0.e0;
    real _t2057 = 0.e0;
    vec3 _t2058 = [_t2055, _t2056, _t2057];
    vec3 mid2059 = prim -0026<$[3]> (pos1398, _t2058);
    bool _t2068;
    real _t2069 = prim |()|00B5<$[3]> (mid2059);
    real _t206A = 0.4e1;
    bool _t206B = prim <007A (_t2069, _t206A);
    if _t206B {
      real _t206C = prim |()|00B5<$[3]> (mid2059);
      real _t206D = 0.3e1;
      _t2068 = prim >0080 (_t206C, _t206D);
    } else {
      _t2068 = false;
    }
    _t2054 = _t2068;
    if _t2054 {
      bool _t206E;
      real _t206F;
      vec3 g2070;
      real x2071 = pos1398[0];
      real y2072 = pos1398[1];
      real z2073 = pos1398[2];
      real _t2074 = 0.2e1;
      real _t2075 = prim *0034 (_t2074, x2071);
      int _t2076 = 2;
      real _t2077 = prim ^0068 (z2073, _t2076);
      real _t2078 = prim *0034 (_t2075, _t2077);
      int _t2079 = 2;
      real _t207A = prim ^0068 (x2071, _t2079);
      int _t207B = 2;
      real _t207C = prim ^0068 (y2072, _t207B);
      real _t207D = prim +0017<$[]> (_t207A, _t207C);
      int _t207E = 2;
      real _t207F = prim ^0068 (z2073, _t207E);
      real _t2080 = prim +0017<$[]> (_t207D, _t207F);
      real _t2081 = prim cos0169 (_t2080);
      real _t2082 = prim *0034 (_t2078, _t2081);
      real _t2083 = 0.2e1;
      real _t2084 = prim *0034 (_t2083, y2072);
      int _t2085 = 2;
      real _t2086 = prim ^0068 (z2073, _t2085);
      real _t2087 = prim *0034 (_t2084, _t2086);
      int _t2088 = 2;
      real _t2089 = prim ^0068 (x2071, _t2088);
      int _t208A = 2;
      real _t208B = prim ^0068 (y2072, _t208A);
      real _t208C = prim +0017<$[]> (_t2089, _t208B);
      int _t208D = 2;
      real _t208E = prim ^0068 (z2073, _t208D);
      real _t208F = prim +0017<$[]> (_t208C, _t208E);
      real _t2090 = prim cos0169 (_t208F);
      real _t2091 = prim *0034 (_t2087, _t2090);
      real _t2092 = 0.2e1;
      int _t2093 = 3;
      real _t2094 = prim ^0068 (z2073, _t2093);
      real _t2095 = prim *0034 (_t2092, _t2094);
      int _t2096 = 2;
      real _t2097 = prim ^0068 (x2071, _t2096);
      int _t2098 = 2;
      real _t2099 = prim ^0068 (y2072, _t2098);
      real _t209A = prim +0017<$[]> (_t2097, _t2099);
      int _t209B = 2;
      real _t209C = prim ^0068 (z2073, _t209B);
      real _t209D = prim +0017<$[]> (_t209A, _t209C);
      real _t209E = prim cos0169 (_t209D);
      real _t209F = prim *0034 (_t2095, _t209E);
      real _t20A0 = 0.2e1;
      real _t20A1 = prim *0034 (_t20A0, z2073);
      int _t20A2 = 2;
      real _t20A3 = prim ^0068 (x2071, _t20A2);
      int _t20A4 = 2;
      real _t20A5 = prim ^0068 (y2072, _t20A4);
      real _t20A6 = prim +0017<$[]> (_t20A3, _t20A5);
      int _t20A7 = 2;
      real _t20A8 = prim ^0068 (z2073, _t20A7);
      real _t20A9 = prim +0017<$[]> (_t20A6, _t20A8);
      real _t20AA = prim sin0171 (_t20A9);
      real _t20AB = prim *0034 (_t20A1, _t20AA);
      real _t20AC = prim +0017<$[]> (_t209F, _t20AB);
      vec3 g20AD = [_t2082, _t2091, _t20AC];
      g2070 = g20AD;
      tensor[3,3] H20AE;
      real x20AF = pos1398[0];
      real y20B0 = pos1398[1];
      real z20B1 = pos1398[2];
      int _t20B2 = -4;
      real _t20B3 = (real)_t20B2;
      int _t20B4 = 2;
      real _t20B5 = prim ^0068 (x20AF, _t20B4);
      real _t20B6 = prim *0034 (_t20B3, _t20B5);
      int _t20B7 = 2;
      real _t20B8 = prim ^0068 (z20B1, _t20B7);
      real _t20B9 = prim *0034 (_t20B6, _t20B8);
      int _t20BA = 2;
      real _t20BB = prim ^0068 (x20AF, _t20BA);
      int _t20BC = 2;
      real _t20BD = prim ^0068 (y20B0, _t20BC);
      real _t20BE = prim +0017<$[]> (_t20BB, _t20BD);
      int _t20BF = 2;
      real _t20C0 = prim ^0068 (z20B1, _t20BF);
      real _t20C1 = prim +0017<$[]> (_t20BE, _t20C0);
      real _t20C2 = prim sin0171 (_t20C1);
      real _t20C3 = prim *0034 (_t20B9, _t20C2);
      real _t20C4 = 0.2e1;
      int _t20C5 = 2;
      real _t20C6 = prim ^0068 (z20B1, _t20C5);
      real _t20C7 = prim *0034 (_t20C4, _t20C6);
      int _t20C8 = 2;
      real _t20C9 = prim ^0068 (x20AF, _t20C8);
      int _t20CA = 2;
      real _t20CB = prim ^0068 (y20B0, _t20CA);
      real _t20CC = prim +0017<$[]> (_t20C9, _t20CB);
      int _t20CD = 2;
      real _t20CE = prim ^0068 (z20B1, _t20CD);
      real _t20CF = prim +0017<$[]> (_t20CC, _t20CE);
      real _t20D0 = prim cos0169 (_t20CF);
      real _t20D1 = prim *0034 (_t20C7, _t20D0);
      real _t20D2 = prim +0017<$[]> (_t20C3, _t20D1);
      int _t20D3 = -4;
      real _t20D4 = (real)_t20D3;
      real _t20D5 = prim *0034 (_t20D4, x20AF);
      real _t20D6 = prim *0034 (_t20D5, y20B0);
      int _t20D7 = 2;
      real _t20D8 = prim ^0068 (z20B1, _t20D7);
      real _t20D9 = prim *0034 (_t20D6, _t20D8);
      int _t20DA = 2;
      real _t20DB = prim ^0068 (x20AF, _t20DA);
      int _t20DC = 2;
      real _t20DD = prim ^0068 (y20B0, _t20DC);
      real _t20DE = prim +0017<$[]> (_t20DB, _t20DD);
      int _t20DF = 2;
      real _t20E0 = prim ^0068 (z20B1, _t20DF);
      real _t20E1 = prim +0017<$[]> (_t20DE, _t20E0);
      real _t20E2 = prim sin0171 (_t20E1);
      real _t20E3 = prim *0034 (_t20D9, _t20E2);
      int _t20E4 = -4;
      real _t20E5 = (real)_t20E4;
      real _t20E6 = prim *0034 (_t20E5, x20AF);
      int _t20E7 = 3;
      real _t20E8 = prim ^0068 (z20B1, _t20E7);
      real _t20E9 = prim *0034 (_t20E6, _t20E8);
      int _t20EA = 2;
      real _t20EB = prim ^0068 (x20AF, _t20EA);
      int _t20EC = 2;
      real _t20ED = prim ^0068 (y20B0, _t20EC);
      real _t20EE = prim +0017<$[]> (_t20EB, _t20ED);
      int _t20EF = 2;
      real _t20F0 = prim ^0068 (z20B1, _t20EF);
      real _t20F1 = prim +0017<$[]> (_t20EE, _t20F0);
      real _t20F2 = prim sin0171 (_t20F1);
      real _t20F3 = prim *0034 (_t20E9, _t20F2);
      real _t20F4 = 0.4e1;
      real _t20F5 = prim *0034 (_t20F4, x20AF);
      real _t20F6 = prim *0034 (_t20F5, z20B1);
      int _t20F7 = 2;
      real _t20F8 = prim ^0068 (x20AF, _t20F7);
      int _t20F9 = 2;
      real _t20FA = prim ^0068 (y20B0, _t20F9);
      real _t20FB = prim +0017<$[]> (_t20F8, _t20FA);
      int _t20FC = 2;
      real _t20FD = prim ^0068 (z20B1, _t20FC);
      real _t20FE = prim +0017<$[]> (_t20FB, _t20FD);
      real _t20FF = prim cos0169 (_t20FE);
      real _t2100 = prim *0034 (_t20F6, _t20FF);
      real _t2101 = prim +0017<$[]> (_t20F3, _t2100);
      vec3 _t2102 = [_t20D2, _t20E3, _t2101];
      int _t2103 = -4;
      real _t2104 = (real)_t2103;
      real _t2105 = prim *0034 (_t2104, x20AF);
      real _t2106 = prim *0034 (_t2105, y20B0);
      int _t2107 = 2;
      real _t2108 = prim ^0068 (z20B1, _t2107);
      real _t2109 = prim *0034 (_t2106, _t2108);
      int _t210A = 2;
      real _t210B = prim ^0068 (x20AF, _t210A);
      int _t210C = 2;
      real _t210D = prim ^0068 (y20B0, _t210C);
      real _t210E = prim +0017<$[]> (_t210B, _t210D);
      int _t210F = 2;
      real _t2110 = prim ^0068 (z20B1, _t210F);
      real _t2111 = prim +0017<$[]> (_t210E, _t2110);
      real _t2112 = prim sin0171 (_t2111);
      real _t2113 = prim *0034 (_t2109, _t2112);
      int _t2114 = -4;
      real _t2115 = (real)_t2114;
      int _t2116 = 2;
      real _t2117 = prim ^0068 (y20B0, _t2116);
      real _t2118 = prim *0034 (_t2115, _t2117);
      int _t2119 = 2;
      real _t211A = prim ^0068 (z20B1, _t2119);
      real _t211B = prim *0034 (_t2118, _t211A);
      int _t211C = 2;
      real _t211D = prim ^0068 (x20AF, _t211C);
      int _t211E = 2;
      real _t211F = prim ^0068 (y20B0, _t211E);
      real _t2120 = prim +0017<$[]> (_t211D, _t211F);
      int _t2121 = 2;
      real _t2122 = prim ^0068 (z20B1, _t2121);
      real _t2123 = prim +0017<$[]> (_t2120, _t2122);
      real _t2124 = prim sin0171 (_t2123);
      real _t2125 = prim *0034 (_t211B, _t2124);
      real _t2126 = 0.2e1;
      int _t2127 = 2;
      real _t2128 = prim ^0068 (z20B1, _t2127);
      real _t2129 = prim *0034 (_t2126, _t2128);
      int _t212A = 2;
      real _t212B = prim ^0068 (x20AF, _t212A);
      int _t212C = 2;
      real _t212D = prim ^0068 (y20B0, _t212C);
      real _t212E = prim +0017<$[]> (_t212B, _t212D);
      int _t212F = 2;
      real _t2130 = prim ^0068 (z20B1, _t212F);
      real _t2131 = prim +0017<$[]> (_t212E, _t2130);
      real _t2132 = prim cos0169 (_t2131);
      real _t2133 = prim *0034 (_t2129, _t2132);
      real _t2134 = prim +0017<$[]> (_t2125, _t2133);
      int _t2135 = -4;
      real _t2136 = (real)_t2135;
      real _t2137 = prim *0034 (_t2136, y20B0);
      int _t2138 = 3;
      real _t2139 = prim ^0068 (z20B1, _t2138);
      real _t213A = prim *0034 (_t2137, _t2139);
      int _t213B = 2;
      real _t213C = prim ^0068 (x20AF, _t213B);
      int _t213D = 2;
      real _t213E = prim ^0068 (y20B0, _t213D);
      real _t213F = prim +0017<$[]> (_t213C, _t213E);
      int _t2140 = 2;
      real _t2141 = prim ^0068 (z20B1, _t2140);
      real _t2142 = prim +0017<$[]> (_t213F, _t2141);
      real _t2143 = prim sin0171 (_t2142);
      real _t2144 = prim *0034 (_t213A, _t2143);
      real _t2145 = 0.4e1;
      real _t2146 = prim *0034 (_t2145, y20B0);
      real _t2147 = prim *0034 (_t2146, z20B1);
      int _t2148 = 2;
      real _t2149 = prim ^0068 (x20AF, _t2148);
      int _t214A = 2;
      real _t214B = prim ^0068 (y20B0, _t214A);
      real _t214C = prim +0017<$[]> (_t2149, _t214B);
      int _t214D = 2;
      real _t214E = prim ^0068 (z20B1, _t214D);
      real _t214F = prim +0017<$[]> (_t214C, _t214E);
      real _t2150 = prim cos0169 (_t214F);
      real _t2151 = prim *0034 (_t2147, _t2150);
      real _t2152 = prim +0017<$[]> (_t2144, _t2151);
      vec3 _t2153 = [_t2113, _t2134, _t2152];
      int _t2154 = -4;
      real _t2155 = (real)_t2154;
      real _t2156 = prim *0034 (_t2155, x20AF);
      int _t2157 = 3;
      real _t2158 = prim ^0068 (z20B1, _t2157);
      real _t2159 = prim *0034 (_t2156, _t2158);
      int _t215A = 2;
      real _t215B = prim ^0068 (x20AF, _t215A);
      int _t215C = 2;
      real _t215D = prim ^0068 (y20B0, _t215C);
      real _t215E = prim +0017<$[]> (_t215B, _t215D);
      int _t215F = 2;
      real _t2160 = prim ^0068 (z20B1, _t215F);
      real _t2161 = prim +0017<$[]> (_t215E, _t2160);
      real _t2162 = prim sin0171 (_t2161);
      real _t2163 = prim *0034 (_t2159, _t2162);
      real _t2164 = 0.4e1;
      real _t2165 = prim *0034 (_t2164, x20AF);
      real _t2166 = prim *0034 (_t2165, z20B1);
      int _t2167 = 2;
      real _t2168 = prim ^0068 (x20AF, _t2167);
      int _t2169 = 2;
      real _t216A = prim ^0068 (y20B0, _t2169);
      real _t216B = prim +0017<$[]> (_t2168, _t216A);
      int _t216C = 2;
      real _t216D = prim ^0068 (z20B1, _t216C);
      real _t216E = prim +0017<$[]> (_t216B, _t216D);
      real _t216F = prim cos0169 (_t216E);
      real _t2170 = prim *0034 (_t2166, _t216F);
      real _t2171 = prim +0017<$[]> (_t2163, _t2170);
      int _t2172 = -4;
      real _t2173 = (real)_t2172;
      real _t2174 = prim *0034 (_t2173, y20B0);
      int _t2175 = 3;
      real _t2176 = prim ^0068 (z20B1, _t2175);
      real _t2177 = prim *0034 (_t2174, _t2176);
      int _t2178 = 2;
      real _t2179 = prim ^0068 (x20AF, _t2178);
      int _t217A = 2;
      real _t217B = prim ^0068 (y20B0, _t217A);
      real _t217C = prim +0017<$[]> (_t2179, _t217B);
      int _t217D = 2;
      real _t217E = prim ^0068 (z20B1, _t217D);
      real _t217F = prim +0017<$[]> (_t217C, _t217E);
      real _t2180 = prim sin0171 (_t217F);
      real _t2181 = prim *0034 (_t2177, _t2180);
      real _t2182 = 0.4e1;
      real _t2183 = prim *0034 (_t2182, y20B0);
      real _t2184 = prim *0034 (_t2183, z20B1);
      int _t2185 = 2;
      real _t2186 = prim ^0068 (x20AF, _t2185);
      int _t2187 = 2;
      real _t2188 = prim ^0068 (y20B0, _t2187);
      real _t2189 = prim +0017<$[]> (_t2186, _t2188);
      int _t218A = 2;
      real _t218B = prim ^0068 (z20B1, _t218A);
      real _t218C = prim +0017<$[]> (_t2189, _t218B);
      real _t218D = prim cos0169 (_t218C);
      real _t218E = prim *0034 (_t2184, _t218D);
      real _t218F = prim +0017<$[]> (_t2181, _t218E);
      int _t2190 = -4;
      real _t2191 = (real)_t2190;
      int _t2192 = 4;
      real _t2193 = prim ^0068 (z20B1, _t2192);
      real _t2194 = prim *0034 (_t2191, _t2193);
      int _t2195 = 2;
      real _t2196 = prim ^0068 (x20AF, _t2195);
      int _t2197 = 2;
      real _t2198 = prim ^0068 (y20B0, _t2197);
      real _t2199 = prim +0017<$[]> (_t2196, _t2198);
      int _t219A = 2;
      real _t219B = prim ^0068 (z20B1, _t219A);
      real _t219C = prim +0017<$[]> (_t2199, _t219B);
      real _t219D = prim sin0171 (_t219C);
      real _t219E = prim *0034 (_t2194, _t219D);
      real _t219F = 0.1e2;
      int _t21A0 = 2;
      real _t21A1 = prim ^0068 (z20B1, _t21A0);
      real _t21A2 = prim *0034 (_t219F, _t21A1);
      int _t21A3 = 2;
      real _t21A4 = prim ^0068 (x20AF, _t21A3);
      int _t21A5 = 2;
      real _t21A6 = prim ^0068 (y20B0, _t21A5);
      real _t21A7 = prim +0017<$[]> (_t21A4, _t21A6);
      int _t21A8 = 2;
      real _t21A9 = prim ^0068 (z20B1, _t21A8);
      real _t21AA = prim +0017<$[]> (_t21A7, _t21A9);
      real _t21AB = prim cos0169 (_t21AA);
      real _t21AC = prim *0034 (_t21A2, _t21AB);
      real _t21AD = prim +0017<$[]> (_t219E, _t21AC);
      real _t21AE = 0.2e1;
      int _t21AF = 2;
      real _t21B0 = prim ^0068 (x20AF, _t21AF);
      int _t21B1 = 2;
      real _t21B2 = prim ^0068 (y20B0, _t21B1);
      real _t21B3 = prim +0017<$[]> (_t21B0, _t21B2);
      int _t21B4 = 2;
      real _t21B5 = prim ^0068 (z20B1, _t21B4);
      real _t21B6 = prim +0017<$[]> (_t21B3, _t21B5);
      real _t21B7 = prim sin0171 (_t21B6);
      real _t21B8 = prim *0034 (_t21AE, _t21B7);
      real _t21B9 = prim +0017<$[]> (_t21AD, _t21B8);
      vec3 _t21BA = [_t2171, _t218F, _t21B9];
      tensor[3,3] hess21BB = [_t2102, _t2153, _t21BA];
      H20AE = hess21BB;
      real[3] _t21BC = prim evals009F (H20AE);
      int _t21BD = 2;
      real _t21BE = prim $sub01C0<real; %3> (_t21BC, _t21BD);
      real _t21BF = prim unary -008B<$[]> (_t21BE);
      real _t21C0 = prim |()|00B5<$[3]> (g2070);
      real _t21C1 = prim +0017<$[]> (fBias07CC, _t21C0);
      real str21C2 = prim /0055 (_t21BF, _t21C1);
      _t206F = str21C2;
      bool _t21C3 = prim >0080 (_t206F, fStrTh07CA);
      if _t21C3 {
        bool _t21C4;
        real _t21C5;
        real _t21C6 = 0.e0;
        _t21C5 = _t21C6;
        bool _t21C7 = prim >=007E (_t21C5, fMaskTh07CB);
        if _t21C7 {
          bool _t21C8 = true;
          _t21C4 = _t21C8;
        } else {
          _t21C4 = false;
        }
        _t206E = _t21C4;
      } else {
        _t206E = false;
      }
      _t2053 = _t206E;
    } else {
      _t2053 = false;
    }
    _t13B1 = _t2053;
    bool _t13B2 = prim !00BC (_t13B1);
    if _t13B2 {
      bool _t13B3;
      bool _t13B4;
      int _t13B5 = 0;
      bool _t13B6 = prim >007F (verb07DA, _t13B5);
      if _t13B6 {
        _t13B4 = vv13A7;
      } else {
        _t13B4 = false;
      }
      if _t13B4 {
        _t13B3 = true;
      } else {
        int _t13B7 = 1;
        _t13B3 = prim >007F (verb07DA, _t13B7);
      }
      if _t13B3 {
        string _t13B8 = "(i#";
        string _t13B9 = " @ ";
        string _t13BA = "): ";
        print (ID139A, _t13B8, iter1359, _t13B9, pos1398, _t13BA);
        string _t13BB = "!inside=";
        bool _t13BC;
        real _t203A = 0.e0;
        real _t203B = 0.e0;
        real _t203C = 0.e0;
        vec3 _t203D = [_t203A, _t203B, _t203C];
        vec3 mid203E = prim -0026<$[3]> (pos1398, _t203D);
        bool _t204D;
        real _t204E = prim |()|00B5<$[3]> (mid203E);
        real _t204F = 0.4e1;
        bool _t2050 = prim <007A (_t204E, _t204F);
        if _t2050 {
          real _t2051 = prim |()|00B5<$[3]> (mid203E);
          real _t2052 = 0.3e1;
          _t204D = prim >0080 (_t2051, _t2052);
        } else {
          _t204D = false;
        }
        _t13BC = _t204D;
        string _t13BD = " || fStrength=";
        real _t13BE;
        vec3 g1EE7;
        real x1EE8 = pos1398[0];
        real y1EE9 = pos1398[1];
        real z1EEA = pos1398[2];
        real _t1EEB = 0.2e1;
        real _t1EEC = prim *0034 (_t1EEB, x1EE8);
        int _t1EED = 2;
        real _t1EEE = prim ^0068 (z1EEA, _t1EED);
        real _t1EEF = prim *0034 (_t1EEC, _t1EEE);
        int _t1EF0 = 2;
        real _t1EF1 = prim ^0068 (x1EE8, _t1EF0);
        int _t1EF2 = 2;
        real _t1EF3 = prim ^0068 (y1EE9, _t1EF2);
        real _t1EF4 = prim +0017<$[]> (_t1EF1, _t1EF3);
        int _t1EF5 = 2;
        real _t1EF6 = prim ^0068 (z1EEA, _t1EF5);
        real _t1EF7 = prim +0017<$[]> (_t1EF4, _t1EF6);
        real _t1EF8 = prim cos0169 (_t1EF7);
        real _t1EF9 = prim *0034 (_t1EEF, _t1EF8);
        real _t1EFA = 0.2e1;
        real _t1EFB = prim *0034 (_t1EFA, y1EE9);
        int _t1EFC = 2;
        real _t1EFD = prim ^0068 (z1EEA, _t1EFC);
        real _t1EFE = prim *0034 (_t1EFB, _t1EFD);
        int _t1EFF = 2;
        real _t1F00 = prim ^0068 (x1EE8, _t1EFF);
        int _t1F01 = 2;
        real _t1F02 = prim ^0068 (y1EE9, _t1F01);
        real _t1F03 = prim +0017<$[]> (_t1F00, _t1F02);
        int _t1F04 = 2;
        real _t1F05 = prim ^0068 (z1EEA, _t1F04);
        real _t1F06 = prim +0017<$[]> (_t1F03, _t1F05);
        real _t1F07 = prim cos0169 (_t1F06);
        real _t1F08 = prim *0034 (_t1EFE, _t1F07);
        real _t1F09 = 0.2e1;
        int _t1F0A = 3;
        real _t1F0B = prim ^0068 (z1EEA, _t1F0A);
        real _t1F0C = prim *0034 (_t1F09, _t1F0B);
        int _t1F0D = 2;
        real _t1F0E = prim ^0068 (x1EE8, _t1F0D);
        int _t1F0F = 2;
        real _t1F10 = prim ^0068 (y1EE9, _t1F0F);
        real _t1F11 = prim +0017<$[]> (_t1F0E, _t1F10);
        int _t1F12 = 2;
        real _t1F13 = prim ^0068 (z1EEA, _t1F12);
        real _t1F14 = prim +0017<$[]> (_t1F11, _t1F13);
        real _t1F15 = prim cos0169 (_t1F14);
        real _t1F16 = prim *0034 (_t1F0C, _t1F15);
        real _t1F17 = 0.2e1;
        real _t1F18 = prim *0034 (_t1F17, z1EEA);
        int _t1F19 = 2;
        real _t1F1A = prim ^0068 (x1EE8, _t1F19);
        int _t1F1B = 2;
        real _t1F1C = prim ^0068 (y1EE9, _t1F1B);
        real _t1F1D = prim +0017<$[]> (_t1F1A, _t1F1C);
        int _t1F1E = 2;
        real _t1F1F = prim ^0068 (z1EEA, _t1F1E);
        real _t1F20 = prim +0017<$[]> (_t1F1D, _t1F1F);
        real _t1F21 = prim sin0171 (_t1F20);
        real _t1F22 = prim *0034 (_t1F18, _t1F21);
        real _t1F23 = prim +0017<$[]> (_t1F16, _t1F22);
        vec3 g1F24 = [_t1EF9, _t1F08, _t1F23];
        g1EE7 = g1F24;
        tensor[3,3] H1F25;
        real x1F26 = pos1398[0];
        real y1F27 = pos1398[1];
        real z1F28 = pos1398[2];
        int _t1F29 = -4;
        real _t1F2A = (real)_t1F29;
        int _t1F2B = 2;
        real _t1F2C = prim ^0068 (x1F26, _t1F2B);
        real _t1F2D = prim *0034 (_t1F2A, _t1F2C);
        int _t1F2E = 2;
        real _t1F2F = prim ^0068 (z1F28, _t1F2E);
        real _t1F30 = prim *0034 (_t1F2D, _t1F2F);
        int _t1F31 = 2;
        real _t1F32 = prim ^0068 (x1F26, _t1F31);
        int _t1F33 = 2;
        real _t1F34 = prim ^0068 (y1F27, _t1F33);
        real _t1F35 = prim +0017<$[]> (_t1F32, _t1F34);
        int _t1F36 = 2;
        real _t1F37 = prim ^0068 (z1F28, _t1F36);
        real _t1F38 = prim +0017<$[]> (_t1F35, _t1F37);
        real _t1F39 = prim sin0171 (_t1F38);
        real _t1F3A = prim *0034 (_t1F30, _t1F39);
        real _t1F3B = 0.2e1;
        int _t1F3C = 2;
        real _t1F3D = prim ^0068 (z1F28, _t1F3C);
        real _t1F3E = prim *0034 (_t1F3B, _t1F3D);
        int _t1F3F = 2;
        real _t1F40 = prim ^0068 (x1F26, _t1F3F);
        int _t1F41 = 2;
        real _t1F42 = prim ^0068 (y1F27, _t1F41);
        real _t1F43 = prim +0017<$[]> (_t1F40, _t1F42);
        int _t1F44 = 2;
        real _t1F45 = prim ^0068 (z1F28, _t1F44);
        real _t1F46 = prim +0017<$[]> (_t1F43, _t1F45);
        real _t1F47 = prim cos0169 (_t1F46);
        real _t1F48 = prim *0034 (_t1F3E, _t1F47);
        real _t1F49 = prim +0017<$[]> (_t1F3A, _t1F48);
        int _t1F4A = -4;
        real _t1F4B = (real)_t1F4A;
        real _t1F4C = prim *0034 (_t1F4B, x1F26);
        real _t1F4D = prim *0034 (_t1F4C, y1F27);
        int _t1F4E = 2;
        real _t1F4F = prim ^0068 (z1F28, _t1F4E);
        real _t1F50 = prim *0034 (_t1F4D, _t1F4F);
        int _t1F51 = 2;
        real _t1F52 = prim ^0068 (x1F26, _t1F51);
        int _t1F53 = 2;
        real _t1F54 = prim ^0068 (y1F27, _t1F53);
        real _t1F55 = prim +0017<$[]> (_t1F52, _t1F54);
        int _t1F56 = 2;
        real _t1F57 = prim ^0068 (z1F28, _t1F56);
        real _t1F58 = prim +0017<$[]> (_t1F55, _t1F57);
        real _t1F59 = prim sin0171 (_t1F58);
        real _t1F5A = prim *0034 (_t1F50, _t1F59);
        int _t1F5B = -4;
        real _t1F5C = (real)_t1F5B;
        real _t1F5D = prim *0034 (_t1F5C, x1F26);
        int _t1F5E = 3;
        real _t1F5F = prim ^0068 (z1F28, _t1F5E);
        real _t1F60 = prim *0034 (_t1F5D, _t1F5F);
        int _t1F61 = 2;
        real _t1F62 = prim ^0068 (x1F26, _t1F61);
        int _t1F63 = 2;
        real _t1F64 = prim ^0068 (y1F27, _t1F63);
        real _t1F65 = prim +0017<$[]> (_t1F62, _t1F64);
        int _t1F66 = 2;
        real _t1F67 = prim ^0068 (z1F28, _t1F66);
        real _t1F68 = prim +0017<$[]> (_t1F65, _t1F67);
        real _t1F69 = prim sin0171 (_t1F68);
        real _t1F6A = prim *0034 (_t1F60, _t1F69);
        real _t1F6B = 0.4e1;
        real _t1F6C = prim *0034 (_t1F6B, x1F26);
        real _t1F6D = prim *0034 (_t1F6C, z1F28);
        int _t1F6E = 2;
        real _t1F6F = prim ^0068 (x1F26, _t1F6E);
        int _t1F70 = 2;
        real _t1F71 = prim ^0068 (y1F27, _t1F70);
        real _t1F72 = prim +0017<$[]> (_t1F6F, _t1F71);
        int _t1F73 = 2;
        real _t1F74 = prim ^0068 (z1F28, _t1F73);
        real _t1F75 = prim +0017<$[]> (_t1F72, _t1F74);
        real _t1F76 = prim cos0169 (_t1F75);
        real _t1F77 = prim *0034 (_t1F6D, _t1F76);
        real _t1F78 = prim +0017<$[]> (_t1F6A, _t1F77);
        vec3 _t1F79 = [_t1F49, _t1F5A, _t1F78];
        int _t1F7A = -4;
        real _t1F7B = (real)_t1F7A;
        real _t1F7C = prim *0034 (_t1F7B, x1F26);
        real _t1F7D = prim *0034 (_t1F7C, y1F27);
        int _t1F7E = 2;
        real _t1F7F = prim ^0068 (z1F28, _t1F7E);
        real _t1F80 = prim *0034 (_t1F7D, _t1F7F);
        int _t1F81 = 2;
        real _t1F82 = prim ^0068 (x1F26, _t1F81);
        int _t1F83 = 2;
        real _t1F84 = prim ^0068 (y1F27, _t1F83);
        real _t1F85 = prim +0017<$[]> (_t1F82, _t1F84);
        int _t1F86 = 2;
        real _t1F87 = prim ^0068 (z1F28, _t1F86);
        real _t1F88 = prim +0017<$[]> (_t1F85, _t1F87);
        real _t1F89 = prim sin0171 (_t1F88);
        real _t1F8A = prim *0034 (_t1F80, _t1F89);
        int _t1F8B = -4;
        real _t1F8C = (real)_t1F8B;
        int _t1F8D = 2;
        real _t1F8E = prim ^0068 (y1F27, _t1F8D);
        real _t1F8F = prim *0034 (_t1F8C, _t1F8E);
        int _t1F90 = 2;
        real _t1F91 = prim ^0068 (z1F28, _t1F90);
        real _t1F92 = prim *0034 (_t1F8F, _t1F91);
        int _t1F93 = 2;
        real _t1F94 = prim ^0068 (x1F26, _t1F93);
        int _t1F95 = 2;
        real _t1F96 = prim ^0068 (y1F27, _t1F95);
        real _t1F97 = prim +0017<$[]> (_t1F94, _t1F96);
        int _t1F98 = 2;
        real _t1F99 = prim ^0068 (z1F28, _t1F98);
        real _t1F9A = prim +0017<$[]> (_t1F97, _t1F99);
        real _t1F9B = prim sin0171 (_t1F9A);
        real _t1F9C = prim *0034 (_t1F92, _t1F9B);
        real _t1F9D = 0.2e1;
        int _t1F9E = 2;
        real _t1F9F = prim ^0068 (z1F28, _t1F9E);
        real _t1FA0 = prim *0034 (_t1F9D, _t1F9F);
        int _t1FA1 = 2;
        real _t1FA2 = prim ^0068 (x1F26, _t1FA1);
        int _t1FA3 = 2;
        real _t1FA4 = prim ^0068 (y1F27, _t1FA3);
        real _t1FA5 = prim +0017<$[]> (_t1FA2, _t1FA4);
        int _t1FA6 = 2;
        real _t1FA7 = prim ^0068 (z1F28, _t1FA6);
        real _t1FA8 = prim +0017<$[]> (_t1FA5, _t1FA7);
        real _t1FA9 = prim cos0169 (_t1FA8);
        real _t1FAA = prim *0034 (_t1FA0, _t1FA9);
        real _t1FAB = prim +0017<$[]> (_t1F9C, _t1FAA);
        int _t1FAC = -4;
        real _t1FAD = (real)_t1FAC;
        real _t1FAE = prim *0034 (_t1FAD, y1F27);
        int _t1FAF = 3;
        real _t1FB0 = prim ^0068 (z1F28, _t1FAF);
        real _t1FB1 = prim *0034 (_t1FAE, _t1FB0);
        int _t1FB2 = 2;
        real _t1FB3 = prim ^0068 (x1F26, _t1FB2);
        int _t1FB4 = 2;
        real _t1FB5 = prim ^0068 (y1F27, _t1FB4);
        real _t1FB6 = prim +0017<$[]> (_t1FB3, _t1FB5);
        int _t1FB7 = 2;
        real _t1FB8 = prim ^0068 (z1F28, _t1FB7);
        real _t1FB9 = prim +0017<$[]> (_t1FB6, _t1FB8);
        real _t1FBA = prim sin0171 (_t1FB9);
        real _t1FBB = prim *0034 (_t1FB1, _t1FBA);
        real _t1FBC = 0.4e1;
        real _t1FBD = prim *0034 (_t1FBC, y1F27);
        real _t1FBE = prim *0034 (_t1FBD, z1F28);
        int _t1FBF = 2;
        real _t1FC0 = prim ^0068 (x1F26, _t1FBF);
        int _t1FC1 = 2;
        real _t1FC2 = prim ^0068 (y1F27, _t1FC1);
        real _t1FC3 = prim +0017<$[]> (_t1FC0, _t1FC2);
        int _t1FC4 = 2;
        real _t1FC5 = prim ^0068 (z1F28, _t1FC4);
        real _t1FC6 = prim +0017<$[]> (_t1FC3, _t1FC5);
        real _t1FC7 = prim cos0169 (_t1FC6);
        real _t1FC8 = prim *0034 (_t1FBE, _t1FC7);
        real _t1FC9 = prim +0017<$[]> (_t1FBB, _t1FC8);
        vec3 _t1FCA = [_t1F8A, _t1FAB, _t1FC9];
        int _t1FCB = -4;
        real _t1FCC = (real)_t1FCB;
        real _t1FCD = prim *0034 (_t1FCC, x1F26);
        int _t1FCE = 3;
        real _t1FCF = prim ^0068 (z1F28, _t1FCE);
        real _t1FD0 = prim *0034 (_t1FCD, _t1FCF);
        int _t1FD1 = 2;
        real _t1FD2 = prim ^0068 (x1F26, _t1FD1);
        int _t1FD3 = 2;
        real _t1FD4 = prim ^0068 (y1F27, _t1FD3);
        real _t1FD5 = prim +0017<$[]> (_t1FD2, _t1FD4);
        int _t1FD6 = 2;
        real _t1FD7 = prim ^0068 (z1F28, _t1FD6);
        real _t1FD8 = prim +0017<$[]> (_t1FD5, _t1FD7);
        real _t1FD9 = prim sin0171 (_t1FD8);
        real _t1FDA = prim *0034 (_t1FD0, _t1FD9);
        real _t1FDB = 0.4e1;
        real _t1FDC = prim *0034 (_t1FDB, x1F26);
        real _t1FDD = prim *0034 (_t1FDC, z1F28);
        int _t1FDE = 2;
        real _t1FDF = prim ^0068 (x1F26, _t1FDE);
        int _t1FE0 = 2;
        real _t1FE1 = prim ^0068 (y1F27, _t1FE0);
        real _t1FE2 = prim +0017<$[]> (_t1FDF, _t1FE1);
        int _t1FE3 = 2;
        real _t1FE4 = prim ^0068 (z1F28, _t1FE3);
        real _t1FE5 = prim +0017<$[]> (_t1FE2, _t1FE4);
        real _t1FE6 = prim cos0169 (_t1FE5);
        real _t1FE7 = prim *0034 (_t1FDD, _t1FE6);
        real _t1FE8 = prim +0017<$[]> (_t1FDA, _t1FE7);
        int _t1FE9 = -4;
        real _t1FEA = (real)_t1FE9;
        real _t1FEB = prim *0034 (_t1FEA, y1F27);
        int _t1FEC = 3;
        real _t1FED = prim ^0068 (z1F28, _t1FEC);
        real _t1FEE = prim *0034 (_t1FEB, _t1FED);
        int _t1FEF = 2;
        real _t1FF0 = prim ^0068 (x1F26, _t1FEF);
        int _t1FF1 = 2;
        real _t1FF2 = prim ^0068 (y1F27, _t1FF1);
        real _t1FF3 = prim +0017<$[]> (_t1FF0, _t1FF2);
        int _t1FF4 = 2;
        real _t1FF5 = prim ^0068 (z1F28, _t1FF4);
        real _t1FF6 = prim +0017<$[]> (_t1FF3, _t1FF5);
        real _t1FF7 = prim sin0171 (_t1FF6);
        real _t1FF8 = prim *0034 (_t1FEE, _t1FF7);
        real _t1FF9 = 0.4e1;
        real _t1FFA = prim *0034 (_t1FF9, y1F27);
        real _t1FFB = prim *0034 (_t1FFA, z1F28);
        int _t1FFC = 2;
        real _t1FFD = prim ^0068 (x1F26, _t1FFC);
        int _t1FFE = 2;
        real _t1FFF = prim ^0068 (y1F27, _t1FFE);
        real _t2000 = prim +0017<$[]> (_t1FFD, _t1FFF);
        int _t2001 = 2;
        real _t2002 = prim ^0068 (z1F28, _t2001);
        real _t2003 = prim +0017<$[]> (_t2000, _t2002);
        real _t2004 = prim cos0169 (_t2003);
        real _t2005 = prim *0034 (_t1FFB, _t2004);
        real _t2006 = prim +0017<$[]> (_t1FF8, _t2005);
        int _t2007 = -4;
        real _t2008 = (real)_t2007;
        int _t2009 = 4;
        real _t200A = prim ^0068 (z1F28, _t2009);
        real _t200B = prim *0034 (_t2008, _t200A);
        int _t200C = 2;
        real _t200D = prim ^0068 (x1F26, _t200C);
        int _t200E = 2;
        real _t200F = prim ^0068 (y1F27, _t200E);
        real _t2010 = prim +0017<$[]> (_t200D, _t200F);
        int _t2011 = 2;
        real _t2012 = prim ^0068 (z1F28, _t2011);
        real _t2013 = prim +0017<$[]> (_t2010, _t2012);
        real _t2014 = prim sin0171 (_t2013);
        real _t2015 = prim *0034 (_t200B, _t2014);
        real _t2016 = 0.1e2;
        int _t2017 = 2;
        real _t2018 = prim ^0068 (z1F28, _t2017);
        real _t2019 = prim *0034 (_t2016, _t2018);
        int _t201A = 2;
        real _t201B = prim ^0068 (x1F26, _t201A);
        int _t201C = 2;
        real _t201D = prim ^0068 (y1F27, _t201C);
        real _t201E = prim +0017<$[]> (_t201B, _t201D);
        int _t201F = 2;
        real _t2020 = prim ^0068 (z1F28, _t201F);
        real _t2021 = prim +0017<$[]> (_t201E, _t2020);
        real _t2022 = prim cos0169 (_t2021);
        real _t2023 = prim *0034 (_t2019, _t2022);
        real _t2024 = prim +0017<$[]> (_t2015, _t2023);
        real _t2025 = 0.2e1;
        int _t2026 = 2;
        real _t2027 = prim ^0068 (x1F26, _t2026);
        int _t2028 = 2;
        real _t2029 = prim ^0068 (y1F27, _t2028);
        real _t202A = prim +0017<$[]> (_t2027, _t2029);
        int _t202B = 2;
        real _t202C = prim ^0068 (z1F28, _t202B);
        real _t202D = prim +0017<$[]> (_t202A, _t202C);
        real _t202E = prim sin0171 (_t202D);
        real _t202F = prim *0034 (_t2025, _t202E);
        real _t2030 = prim +0017<$[]> (_t2024, _t202F);
        vec3 _t2031 = [_t1FE8, _t2006, _t2030];
        tensor[3,3] hess2032 = [_t1F79, _t1FCA, _t2031];
        H1F25 = hess2032;
        real[3] _t2033 = prim evals009F (H1F25);
        int _t2034 = 2;
        real _t2035 = prim $sub01C0<real; %3> (_t2033, _t2034);
        real _t2036 = prim unary -008B<$[]> (_t2035);
        real _t2037 = prim |()|00B5<$[3]> (g1EE7);
        real _t2038 = prim +0017<$[]> (fBias07CC, _t2037);
        real str2039 = prim /0055 (_t2036, _t2038);
        _t13BE = str2039;
        string _t13BF = " <= fStrTh=";
        string _t13C0 = " || fMask(pos)=";
        real _t13C1;
        real _t1EE6 = 0.e0;
        _t13C1 = _t1EE6;
        string _t13C2 = " < fMaskTh=";
        string _t13C3 = " || fTest(pos)=";
        bool _t13C4;
        bool _t1EE5 = true;
        _t13C4 = _t1EE5;
        string _t13C5 = " ==>DIE\n";
        print (_t13BB, _t13BC, _t13BD, _t13BE, _t13BF, fStrTh07CA, _t13C0, _t13C1, _t13C2, fMaskTh07CB, _t13C3, _t13C4, _t13C5);
      }
      die;
    }
    real _t13C6 = 0.e0;
    bool _t13C7 = prim >0080 (travMax07CF, _t13C6);
    if _t13C7 {
      bool _t13C8 = prim >0080 (trav13A2, travMax07CF);
      if _t13C8 {
        die;
      }
    }
    bool _t13C9 = prim !00BC (found13A0);
    if _t13C9 {
      int _t13CA = 0;
      bool _t13CB = prim >007F (nfsMax07D0, _t13CA);
      if _t13CB {
        bool _t13CC = prim >007F (nfs13A1, nfsMax07D0);
        if _t13CC {
          bool _t13CD;
          bool _t13CE;
          int _t13CF = 0;
          bool _t13D0 = prim >007F (verb07DA, _t13CF);
          if _t13D0 {
            _t13CE = vv13A7;
          } else {
            _t13CE = false;
          }
          if _t13CE {
            _t13CD = true;
          } else {
            int _t13D1 = 1;
            _t13CD = prim >007F (verb07DA, _t13D1);
          }
          if _t13CD {
            string _t13D2 = "(i#";
            string _t13D3 = " @ ";
            string _t13D4 = "): ";
            print (ID139A, _t13D2, iter1359, _t13D3, pos1398, _t13D4);
            string _t13D5 = "nfs=";
            string _t13D6 = " > nfsMax=";
            string _t13D7 = " || trav=";
            string _t13D8 = " > travMax=";
            string _t13D9 = " =>DIE\n";
            print (_t13D5, nfs13A1, _t13D6, nfsMax07D0, _t13D7, trav13A2, _t13D8, travMax07CF, _t13D9);
          }
          die;
        }
      }
      vec3 _t13DA = func fStep128C (pos1398);
      step139C = prim *0036<$[3]> (sfs07DB, _t13DA);
      pos1398 = prim +0017<$[3]> (pos1398, step139C);
      _pos1399 = pos1398;
      real _t13DB = prim |()|00B5<$[3]> (step139C);
      real _t13DC = prim /0055 (_t13DB, tipd07CD);
      mvmt13A3 = prim lerp0096<$[]> (_t13DC, mvmt13A3, hist07DC);
      bool _t13DD = prim >0080 (mvmt13A3, fsEps07D4);
      if _t13DD {
        real _t13DE = prim |()|00B5<$[3]> (step139C);
        real _t13DF = prim /0055 (_t13DE, tipd07CD);
        trav13A2 = prim +0017<$[]> (trav13A2, _t13DF);
        int _t13E0 = 1;
        nfs13A1 = prim +0015 (nfs13A1, _t13E0);
      } else {
        found13A0 = true;
        mvmt13A3 = 0.1e1;
        trav13A2 = 0.e0;
      }
      bool _t13E1;
      bool _t13E2;
      int _t13E3 = 0;
      bool _t13E4 = prim >007F (verb07DA, _t13E3);
      if _t13E4 {
        _t13E2 = vv13A7;
      } else {
        _t13E2 = false;
      }
      if _t13E2 {
        _t13E1 = true;
      } else {
        int _t13E5 = 1;
        _t13E1 = prim >007F (verb07DA, _t13E5);
      }
      if _t13E1 {
        string _t13E6 = "(i#";
        string _t13E7 = " @ ";
        string _t13E8 = "): ";
        print (ID139A, _t13E6, iter1359, _t13E7, pos1398, _t13E8);
        string _t13E9 = "step=";
        string _t13EA = "; mvmt=";
        string _t13EB = " => found=";
        string _t13EC = "\n";
        print (_t13E9, step139C, _t13EA, mvmt13A3, _t13EB, found13A0, _t13EC);
      }
    } else {
      int _t13ED = 0;
      bool _t13EE = prim ==0082 (_t13ED, fDim07DF);
      if _t13EE {
        stabilize;
      }
      vec3 _t13EF = func fStep128C (pos1398);
      step139C = prim *0036<$[3]> (sfs07DB, _t13EF);
      pos1398 = prim +0017<$[3]> (pos1398, step139C);
      _pos1399 = pos1398;
      real _t13F0 = prim |()|00B5<$[3]> (step139C);
      real _t13F1 = prim /0055 (_t13F0, tipd07CD);
      trav13A2 = prim +0017<$[]> (trav13A2, _t13F1);
      real oldE13F2 = 0.e0;
      real _t13F3 = 0.e0;
      real _t13F4 = 0.e0;
      real _t13F5 = 0.e0;
      vec3 force13F6 = [_t13F3, _t13F4, _t13F5];
      int nn13F7 = 0;
      point[] _t13F8 = prim sphere0198<point> (_pos1399, rad1342);
      foreach P13F9 in _t13F8 {
        vec3 _t13FA = P13F9.pos1398;
        vec3 off13FB = prim -0026<$[3]> (_t13FA, pos1398);
        real _t13FC = prim |()|00B5<$[3]> (off13FB);
        real _t13FD = prim /0055 (_t13FC, tipd07CD);
        bool _t13FE = prim <007A (_t13FD, fsEps07D4);
        if _t13FE {
          real _t13FF = P13F9.ID139A;
          bool _t1400 = prim <=007C (ID139A, _t13FF);
          if _t1400 {
            die;
          }
        }
        real _t1407;
        real _t1EBD = prim |()|00B5<$[3]> (off13FB);
        real _t1EBE = prim /0055 (_t1EBD, rad1342);
        real _t1EBF;
        real _t1EC0 = 0.2e1;
        real _t1EC1 = 0.3e1;
        real _t1EC2 = prim /0055 (_t1EC0, _t1EC1);
        real s1EC3 = prim -0026<$[]> (_t1EBE, _t1EC2);
        real _t1EC4;
        real _t1EC5 = 0.2e1;
        real _t1EC6 = 0.3e1;
        real _t1EC7 = prim /0055 (_t1EC5, _t1EC6);
        bool _t1EC8 = prim <007A (_t1EBE, _t1EC7);
        if _t1EC8 {
          real _t1EC9 = 0.1e1;
          real _t1ECA = -0.5646e1;
          real _t1ECB = 0.119835e2;
          real _t1ECC = -0.113535e2;
          real _t1ECD = 0.40550625e1;
          real _t1ECE = prim *0034 (_t1ECD, _t1EBE);
          real _t1ECF = prim +0017<$[]> (_t1ECC, _t1ECE);
          real _t1ED0 = prim *0034 (_t1EBE, _t1ECF);
          real _t1ED1 = prim +0017<$[]> (_t1ECB, _t1ED0);
          real _t1ED2 = prim *0034 (_t1EBE, _t1ED1);
          real _t1ED3 = prim +0017<$[]> (_t1ECA, _t1ED2);
          real _t1ED4 = prim *0034 (_t1EBE, _t1ED3);
          _t1EC4 = prim +0017<$[]> (_t1EC9, _t1ED4);
        } else {
          real _t1ED5;
          real _t1ED6 = 0.1e1;
          bool _t1ED7 = prim <007A (_t1EBE, _t1ED6);
          if _t1ED7 {
            real _t1ED8 = -0.1e-2;
            real _t1ED9 = 0.9e-1;
            real _t1EDA = -0.54e0;
            real _t1EDB = 0.1215e1;
            real _t1EDC = 0.972e0;
            real _t1EDD = prim *0034 (_t1EDC, s1EC3);
            real _t1EDE = prim -0026<$[]> (_t1EDB, _t1EDD);
            real _t1EDF = prim *0034 (_t1EDE, s1EC3);
            real _t1EE0 = prim +0017<$[]> (_t1EDA, _t1EDF);
            real _t1EE1 = prim *0034 (_t1EE0, s1EC3);
            real _t1EE2 = prim +0017<$[]> (_t1ED9, _t1EE1);
            real _t1EE3 = prim *0034 (_t1EE2, s1EC3);
            real _t1EE4 = prim *0034 (_t1EE3, s1EC3);
            _t1ED5 = prim +0017<$[]> (_t1ED8, _t1EE4);
          } else {
            _t1ED5 = 0.e0;
          }
          _t1EC4 = _t1ED5;
        }
        _t1EBF = _t1EC4;
        _t1407 = _t1EBF;
        oldE13F2 = prim +0017<$[]> (oldE13F2, _t1407);
        vec3 _t1408;
        real _t1E93 = prim |()|00B5<$[3]> (off13FB);
        real _t1E94 = prim /0055 (_t1E93, rad1342);
        real _t1E95;
        real _t1E96 = 0.3e1;
        real _t1E97 = prim *0034 (_t1E96, _t1E94);
        real _t1E98 = 0.2e1;
        real t1E99 = prim -0026<$[]> (_t1E97, _t1E98);
        real _t1E9A;
        real _t1E9B = 0.2e1;
        real _t1E9C = 0.3e1;
        real _t1E9D = prim /0055 (_t1E9B, _t1E9C);
        bool _t1E9E = prim <007A (_t1E94, _t1E9D);
        if _t1E9E {
          real _t1E9F = -0.5646e1;
          real _t1EA0 = 0.23967e2;
          real _t1EA1 = -0.340605e2;
          real _t1EA2 = 0.1622025e2;
          real _t1EA3 = prim *0034 (_t1EA2, _t1E94);
          real _t1EA4 = prim +0017<$[]> (_t1EA1, _t1EA3);
          real _t1EA5 = prim *0034 (_t1E94, _t1EA4);
          real _t1EA6 = prim +0017<$[]> (_t1EA0, _t1EA5);
          real _t1EA7 = prim *0034 (_t1E94, _t1EA6);
          _t1E9A = prim +0017<$[]> (_t1E9F, _t1EA7);
        } else {
          real _t1EA8;
          real _t1EA9 = 0.1e1;
          bool _t1EAA = prim <007A (_t1E94, _t1EA9);
          if _t1EAA {
            real _t1EAB = 0.1234567901e-1;
            real _t1EAC = prim *0034 (_t1EAB, t1E99);
            real _t1EAD = 0.486e1;
            real _t1EAE = -0.1458e2;
            real _t1EAF = 0.1458e2;
            real _t1EB0 = 0.486e1;
            real _t1EB1 = prim *0034 (_t1EB0, t1E99);
            real _t1EB2 = prim -0026<$[]> (_t1EAF, _t1EB1);
            real _t1EB3 = prim *0034 (t1E99, _t1EB2);
            real _t1EB4 = prim +0017<$[]> (_t1EAE, _t1EB3);
            real _t1EB5 = prim *0034 (t1E99, _t1EB4);
            real _t1EB6 = prim +0017<$[]> (_t1EAD, _t1EB5);
            _t1EA8 = prim *0034 (_t1EAC, _t1EB6);
          } else {
            _t1EA8 = 0.e0;
          }
          _t1E9A = _t1EA8;
        }
        _t1E95 = _t1E9A;
        real _t1EB7 = 0.1e1;
        real _t1EB8 = prim /0055 (_t1EB7, rad1342);
        real _t1EB9 = prim *0034 (_t1E95, _t1EB8);
        vec3 _t1EBA = prim *0036<$[3]> (_t1EB9, off13FB);
        real _t1EBB = prim |()|00B5<$[3]> (off13FB);
        vec3 _t1EBC = prim /0057<$[3]> (_t1EBA, _t1EBB);
        _t1408 = _t1EBC;
        force13F6 = prim +0017<$[3]> (force13F6, _t1408);
        int _t1409 = 1;
        nn13F7 = prim +0015 (nn13F7, _t1409);
      }
      int _t140A = 0;
      bool _t140B = prim ==0082 (_t140A, nn13F7);
      if _t140B {
        bool _t140C;
        int _t140D;
        bool _t1E83;
        int _t1E84 = 0;
        bool _t1E85 = prim >007F (pcp07DD, _t1E84);
        if _t1E85 {
          bool _t1E86;
          int _t1E87 = 0;
          bool _t1E88 = prim >007F (iter1359, _t1E87);
          if _t1E88 {
            int _t1E89 = 0;
            int _t1E8A = prim %00A1 (iter1359, pcp07DD);
            _t1E86 = prim ==0082 (_t1E89, _t1E8A);
          } else {
            _t1E86 = false;
          }
          _t1E83 = _t1E86;
        } else {
          _t1E83 = false;
        }
        if _t1E83 {
          int _t1E8B = prim /0054 (iter1359, pcp07DD);
          int _t1E8C = 2;
          int _t1E8D = prim %00A1 (_t1E8B, _t1E8C);
          int _t1E8E = 2;
          int _t1E8F = prim *0033 (_t1E8D, _t1E8E);
          int _t1E90 = 1;
          int _t1E91 = prim -0024 (_t1E8F, _t1E90);
          _t140D = _t1E91;
        } else {
          int _t1E92 = 0;
          _t140D = _t1E92;
        }
        int _t140E = 0;
        bool _t140F = prim >007F (_t140D, _t140E);
        if _t140F {
          _t140C = prim <0079 (born13A5, nnmax12F4);
        } else {
          _t140C = false;
        }
        bool _t1410 = prim !00BC (_t140C);
        if _t1410 {
          continue;
        }
        tensor[3,3] _t1411 = func fPerp12BE (pos1398);
        real _t1412 = 0.e0;
        real _t1413 = 0.e0;
        vec3 _t1414 = [tipd07CD, _t1412, _t1413];
        vec3 noff01415 = prim •00CE<$[3,3]; $[3]; $[3]> (_t1411, _t1414);
        tensor[3,3] _t1416 = func fPerp12BE (pos1398);
        real _t1417 = 0.e0;
        real _t1418 = 0.e0;
        vec3 _t1419 = [_t1417, tipd07CD, _t1418];
        vec3 noff1141A = prim •00CE<$[3,3]; $[3]; $[3]> (_t1416, _t1419);
        tensor[3,3] _t141B = func fPerp12BE (pos1398);
        real _t141C = 0.e0;
        real _t141D = 0.e0;
        vec3 _t141E = [_t141C, _t141D, tipd07CD];
        vec3 noff2141F = prim •00CE<$[3,3]; $[3]; $[3]> (_t141B, _t141E);
        vec3 noff1420 = noff01415;
        vec3 _t1421;
        real _t1422 = prim |()|00B5<$[3]> (noff1420);
        real _t1423 = prim |()|00B5<$[3]> (noff1141A);
        bool _t1424 = prim >0080 (_t1422, _t1423);
        if _t1424 {
          _t1421 = noff1420;
        } else {
          _t1421 = noff1141A;
        }
        noff1420 = _t1421;
        vec3 _t1425;
        real _t1426 = prim |()|00B5<$[3]> (noff1420);
        real _t1427 = prim |()|00B5<$[3]> (noff2141F);
        bool _t1428 = prim >0080 (_t1426, _t1427);
        if _t1428 {
          _t1425 = noff1420;
        } else {
          _t1425 = noff2141F;
        }
        noff1420 = _t1425;
        vec3 _t1429 = prim normalize0137<$[3]> (noff1420);
        vec3 _t142A = prim *0036<$[3]> (tipd07CD, _t1429);
        vec3 npos142B = prim +0017<$[3]> (_t142A, pos1398);
        vec3 _t142C = func fStep128C (npos142B);
        vec3 _t142D = prim *0036<$[3]> (sfs07DB, _t142C);
        npos142B = prim +0017<$[3]> (npos142B, _t142D);
        bool _t142E;
        bool _t142F;
        int _t1430 = 0;
        bool _t1431 = prim >007F (verb07DA, _t1430);
        if _t1431 {
          _t142F = vv13A7;
        } else {
          _t142F = false;
        }
        if _t142F {
          _t142E = true;
        } else {
          int _t1432 = 1;
          _t142E = prim >007F (verb07DA, _t1432);
        }
        if _t142E {
          string _t1433 = "(i#";
          string _t1434 = " @ ";
          string _t1435 = "): ";
          print (ID139A, _t1433, iter1359, _t1434, pos1398, _t1435);
          string _t1436 = " 0==nn =>NEW(";
          string _t1437 = ") w/ ID=";
          real _t1438;
          real _t1E75 = 0.1e7;
          real _t1E76;
          real _t1E77 = npos142B[0];
          real _t1E78 = func urnd135C (_t1E77);
          real _t1E79 = npos142B[1];
          real _t1E7A = func urnd135C (_t1E79);
          real _t1E7B = prim +0017<$[]> (_t1E78, _t1E7A);
          real _t1E7C = npos142B[2];
          real _t1E7D = func urnd135C (_t1E7C);
          real _t1E7E = prim +0017<$[]> (_t1E7B, _t1E7D);
          real _t1E7F = 0.1e1;
          real _t1E80 = prim fmod018A (_t1E7E, _t1E7F);
          _t1E76 = _t1E80;
          real _t1E81 = prim *0034 (_t1E75, _t1E76);
          real _t1E82 = prim floor0189 (_t1E81);
          _t1438 = _t1E82;
          string _t1439 = "\n";
          print (_t1436, npos142B, _t1437, _t1438, _t1439);
        }
        bool _t143A;
        bool _t1CFF;
        bool _t1D00;
        real _t1D01 = 0.e0;
        real _t1D02 = 0.e0;
        real _t1D03 = 0.e0;
        vec3 _t1D04 = [_t1D01, _t1D02, _t1D03];
        vec3 mid1D05 = prim -0026<$[3]> (pos1398, _t1D04);
        bool _t1D14;
        real _t1D15 = prim |()|00B5<$[3]> (mid1D05);
        real _t1D16 = 0.4e1;
        bool _t1D17 = prim <007A (_t1D15, _t1D16);
        if _t1D17 {
          real _t1D18 = prim |()|00B5<$[3]> (mid1D05);
          real _t1D19 = 0.3e1;
          _t1D14 = prim >0080 (_t1D18, _t1D19);
        } else {
          _t1D14 = false;
        }
        _t1D00 = _t1D14;
        if _t1D00 {
          bool _t1D1A;
          real _t1D1B;
          vec3 g1D1C;
          real x1D1D = pos1398[0];
          real y1D1E = pos1398[1];
          real z1D1F = pos1398[2];
          real _t1D20 = 0.2e1;
          real _t1D21 = prim *0034 (_t1D20, x1D1D);
          int _t1D22 = 2;
          real _t1D23 = prim ^0068 (z1D1F, _t1D22);
          real _t1D24 = prim *0034 (_t1D21, _t1D23);
          int _t1D25 = 2;
          real _t1D26 = prim ^0068 (x1D1D, _t1D25);
          int _t1D27 = 2;
          real _t1D28 = prim ^0068 (y1D1E, _t1D27);
          real _t1D29 = prim +0017<$[]> (_t1D26, _t1D28);
          int _t1D2A = 2;
          real _t1D2B = prim ^0068 (z1D1F, _t1D2A);
          real _t1D2C = prim +0017<$[]> (_t1D29, _t1D2B);
          real _t1D2D = prim cos0169 (_t1D2C);
          real _t1D2E = prim *0034 (_t1D24, _t1D2D);
          real _t1D2F = 0.2e1;
          real _t1D30 = prim *0034 (_t1D2F, y1D1E);
          int _t1D31 = 2;
          real _t1D32 = prim ^0068 (z1D1F, _t1D31);
          real _t1D33 = prim *0034 (_t1D30, _t1D32);
          int _t1D34 = 2;
          real _t1D35 = prim ^0068 (x1D1D, _t1D34);
          int _t1D36 = 2;
          real _t1D37 = prim ^0068 (y1D1E, _t1D36);
          real _t1D38 = prim +0017<$[]> (_t1D35, _t1D37);
          int _t1D39 = 2;
          real _t1D3A = prim ^0068 (z1D1F, _t1D39);
          real _t1D3B = prim +0017<$[]> (_t1D38, _t1D3A);
          real _t1D3C = prim cos0169 (_t1D3B);
          real _t1D3D = prim *0034 (_t1D33, _t1D3C);
          real _t1D3E = 0.2e1;
          int _t1D3F = 3;
          real _t1D40 = prim ^0068 (z1D1F, _t1D3F);
          real _t1D41 = prim *0034 (_t1D3E, _t1D40);
          int _t1D42 = 2;
          real _t1D43 = prim ^0068 (x1D1D, _t1D42);
          int _t1D44 = 2;
          real _t1D45 = prim ^0068 (y1D1E, _t1D44);
          real _t1D46 = prim +0017<$[]> (_t1D43, _t1D45);
          int _t1D47 = 2;
          real _t1D48 = prim ^0068 (z1D1F, _t1D47);
          real _t1D49 = prim +0017<$[]> (_t1D46, _t1D48);
          real _t1D4A = prim cos0169 (_t1D49);
          real _t1D4B = prim *0034 (_t1D41, _t1D4A);
          real _t1D4C = 0.2e1;
          real _t1D4D = prim *0034 (_t1D4C, z1D1F);
          int _t1D4E = 2;
          real _t1D4F = prim ^0068 (x1D1D, _t1D4E);
          int _t1D50 = 2;
          real _t1D51 = prim ^0068 (y1D1E, _t1D50);
          real _t1D52 = prim +0017<$[]> (_t1D4F, _t1D51);
          int _t1D53 = 2;
          real _t1D54 = prim ^0068 (z1D1F, _t1D53);
          real _t1D55 = prim +0017<$[]> (_t1D52, _t1D54);
          real _t1D56 = prim sin0171 (_t1D55);
          real _t1D57 = prim *0034 (_t1D4D, _t1D56);
          real _t1D58 = prim +0017<$[]> (_t1D4B, _t1D57);
          vec3 g1D59 = [_t1D2E, _t1D3D, _t1D58];
          g1D1C = g1D59;
          tensor[3,3] H1D5A;
          real x1D5B = pos1398[0];
          real y1D5C = pos1398[1];
          real z1D5D = pos1398[2];
          int _t1D5E = -4;
          real _t1D5F = (real)_t1D5E;
          int _t1D60 = 2;
          real _t1D61 = prim ^0068 (x1D5B, _t1D60);
          real _t1D62 = prim *0034 (_t1D5F, _t1D61);
          int _t1D63 = 2;
          real _t1D64 = prim ^0068 (z1D5D, _t1D63);
          real _t1D65 = prim *0034 (_t1D62, _t1D64);
          int _t1D66 = 2;
          real _t1D67 = prim ^0068 (x1D5B, _t1D66);
          int _t1D68 = 2;
          real _t1D69 = prim ^0068 (y1D5C, _t1D68);
          real _t1D6A = prim +0017<$[]> (_t1D67, _t1D69);
          int _t1D6B = 2;
          real _t1D6C = prim ^0068 (z1D5D, _t1D6B);
          real _t1D6D = prim +0017<$[]> (_t1D6A, _t1D6C);
          real _t1D6E = prim sin0171 (_t1D6D);
          real _t1D6F = prim *0034 (_t1D65, _t1D6E);
          real _t1D70 = 0.2e1;
          int _t1D71 = 2;
          real _t1D72 = prim ^0068 (z1D5D, _t1D71);
          real _t1D73 = prim *0034 (_t1D70, _t1D72);
          int _t1D74 = 2;
          real _t1D75 = prim ^0068 (x1D5B, _t1D74);
          int _t1D76 = 2;
          real _t1D77 = prim ^0068 (y1D5C, _t1D76);
          real _t1D78 = prim +0017<$[]> (_t1D75, _t1D77);
          int _t1D79 = 2;
          real _t1D7A = prim ^0068 (z1D5D, _t1D79);
          real _t1D7B = prim +0017<$[]> (_t1D78, _t1D7A);
          real _t1D7C = prim cos0169 (_t1D7B);
          real _t1D7D = prim *0034 (_t1D73, _t1D7C);
          real _t1D7E = prim +0017<$[]> (_t1D6F, _t1D7D);
          int _t1D7F = -4;
          real _t1D80 = (real)_t1D7F;
          real _t1D81 = prim *0034 (_t1D80, x1D5B);
          real _t1D82 = prim *0034 (_t1D81, y1D5C);
          int _t1D83 = 2;
          real _t1D84 = prim ^0068 (z1D5D, _t1D83);
          real _t1D85 = prim *0034 (_t1D82, _t1D84);
          int _t1D86 = 2;
          real _t1D87 = prim ^0068 (x1D5B, _t1D86);
          int _t1D88 = 2;
          real _t1D89 = prim ^0068 (y1D5C, _t1D88);
          real _t1D8A = prim +0017<$[]> (_t1D87, _t1D89);
          int _t1D8B = 2;
          real _t1D8C = prim ^0068 (z1D5D, _t1D8B);
          real _t1D8D = prim +0017<$[]> (_t1D8A, _t1D8C);
          real _t1D8E = prim sin0171 (_t1D8D);
          real _t1D8F = prim *0034 (_t1D85, _t1D8E);
          int _t1D90 = -4;
          real _t1D91 = (real)_t1D90;
          real _t1D92 = prim *0034 (_t1D91, x1D5B);
          int _t1D93 = 3;
          real _t1D94 = prim ^0068 (z1D5D, _t1D93);
          real _t1D95 = prim *0034 (_t1D92, _t1D94);
          int _t1D96 = 2;
          real _t1D97 = prim ^0068 (x1D5B, _t1D96);
          int _t1D98 = 2;
          real _t1D99 = prim ^0068 (y1D5C, _t1D98);
          real _t1D9A = prim +0017<$[]> (_t1D97, _t1D99);
          int _t1D9B = 2;
          real _t1D9C = prim ^0068 (z1D5D, _t1D9B);
          real _t1D9D = prim +0017<$[]> (_t1D9A, _t1D9C);
          real _t1D9E = prim sin0171 (_t1D9D);
          real _t1D9F = prim *0034 (_t1D95, _t1D9E);
          real _t1DA0 = 0.4e1;
          real _t1DA1 = prim *0034 (_t1DA0, x1D5B);
          real _t1DA2 = prim *0034 (_t1DA1, z1D5D);
          int _t1DA3 = 2;
          real _t1DA4 = prim ^0068 (x1D5B, _t1DA3);
          int _t1DA5 = 2;
          real _t1DA6 = prim ^0068 (y1D5C, _t1DA5);
          real _t1DA7 = prim +0017<$[]> (_t1DA4, _t1DA6);
          int _t1DA8 = 2;
          real _t1DA9 = prim ^0068 (z1D5D, _t1DA8);
          real _t1DAA = prim +0017<$[]> (_t1DA7, _t1DA9);
          real _t1DAB = prim cos0169 (_t1DAA);
          real _t1DAC = prim *0034 (_t1DA2, _t1DAB);
          real _t1DAD = prim +0017<$[]> (_t1D9F, _t1DAC);
          vec3 _t1DAE = [_t1D7E, _t1D8F, _t1DAD];
          int _t1DAF = -4;
          real _t1DB0 = (real)_t1DAF;
          real _t1DB1 = prim *0034 (_t1DB0, x1D5B);
          real _t1DB2 = prim *0034 (_t1DB1, y1D5C);
          int _t1DB3 = 2;
          real _t1DB4 = prim ^0068 (z1D5D, _t1DB3);
          real _t1DB5 = prim *0034 (_t1DB2, _t1DB4);
          int _t1DB6 = 2;
          real _t1DB7 = prim ^0068 (x1D5B, _t1DB6);
          int _t1DB8 = 2;
          real _t1DB9 = prim ^0068 (y1D5C, _t1DB8);
          real _t1DBA = prim +0017<$[]> (_t1DB7, _t1DB9);
          int _t1DBB = 2;
          real _t1DBC = prim ^0068 (z1D5D, _t1DBB);
          real _t1DBD = prim +0017<$[]> (_t1DBA, _t1DBC);
          real _t1DBE = prim sin0171 (_t1DBD);
          real _t1DBF = prim *0034 (_t1DB5, _t1DBE);
          int _t1DC0 = -4;
          real _t1DC1 = (real)_t1DC0;
          int _t1DC2 = 2;
          real _t1DC3 = prim ^0068 (y1D5C, _t1DC2);
          real _t1DC4 = prim *0034 (_t1DC1, _t1DC3);
          int _t1DC5 = 2;
          real _t1DC6 = prim ^0068 (z1D5D, _t1DC5);
          real _t1DC7 = prim *0034 (_t1DC4, _t1DC6);
          int _t1DC8 = 2;
          real _t1DC9 = prim ^0068 (x1D5B, _t1DC8);
          int _t1DCA = 2;
          real _t1DCB = prim ^0068 (y1D5C, _t1DCA);
          real _t1DCC = prim +0017<$[]> (_t1DC9, _t1DCB);
          int _t1DCD = 2;
          real _t1DCE = prim ^0068 (z1D5D, _t1DCD);
          real _t1DCF = prim +0017<$[]> (_t1DCC, _t1DCE);
          real _t1DD0 = prim sin0171 (_t1DCF);
          real _t1DD1 = prim *0034 (_t1DC7, _t1DD0);
          real _t1DD2 = 0.2e1;
          int _t1DD3 = 2;
          real _t1DD4 = prim ^0068 (z1D5D, _t1DD3);
          real _t1DD5 = prim *0034 (_t1DD2, _t1DD4);
          int _t1DD6 = 2;
          real _t1DD7 = prim ^0068 (x1D5B, _t1DD6);
          int _t1DD8 = 2;
          real _t1DD9 = prim ^0068 (y1D5C, _t1DD8);
          real _t1DDA = prim +0017<$[]> (_t1DD7, _t1DD9);
          int _t1DDB = 2;
          real _t1DDC = prim ^0068 (z1D5D, _t1DDB);
          real _t1DDD = prim +0017<$[]> (_t1DDA, _t1DDC);
          real _t1DDE = prim cos0169 (_t1DDD);
          real _t1DDF = prim *0034 (_t1DD5, _t1DDE);
          real _t1DE0 = prim +0017<$[]> (_t1DD1, _t1DDF);
          int _t1DE1 = -4;
          real _t1DE2 = (real)_t1DE1;
          real _t1DE3 = prim *0034 (_t1DE2, y1D5C);
          int _t1DE4 = 3;
          real _t1DE5 = prim ^0068 (z1D5D, _t1DE4);
          real _t1DE6 = prim *0034 (_t1DE3, _t1DE5);
          int _t1DE7 = 2;
          real _t1DE8 = prim ^0068 (x1D5B, _t1DE7);
          int _t1DE9 = 2;
          real _t1DEA = prim ^0068 (y1D5C, _t1DE9);
          real _t1DEB = prim +0017<$[]> (_t1DE8, _t1DEA);
          int _t1DEC = 2;
          real _t1DED = prim ^0068 (z1D5D, _t1DEC);
          real _t1DEE = prim +0017<$[]> (_t1DEB, _t1DED);
          real _t1DEF = prim sin0171 (_t1DEE);
          real _t1DF0 = prim *0034 (_t1DE6, _t1DEF);
          real _t1DF1 = 0.4e1;
          real _t1DF2 = prim *0034 (_t1DF1, y1D5C);
          real _t1DF3 = prim *0034 (_t1DF2, z1D5D);
          int _t1DF4 = 2;
          real _t1DF5 = prim ^0068 (x1D5B, _t1DF4);
          int _t1DF6 = 2;
          real _t1DF7 = prim ^0068 (y1D5C, _t1DF6);
          real _t1DF8 = prim +0017<$[]> (_t1DF5, _t1DF7);
          int _t1DF9 = 2;
          real _t1DFA = prim ^0068 (z1D5D, _t1DF9);
          real _t1DFB = prim +0017<$[]> (_t1DF8, _t1DFA);
          real _t1DFC = prim cos0169 (_t1DFB);
          real _t1DFD = prim *0034 (_t1DF3, _t1DFC);
          real _t1DFE = prim +0017<$[]> (_t1DF0, _t1DFD);
          vec3 _t1DFF = [_t1DBF, _t1DE0, _t1DFE];
          int _t1E00 = -4;
          real _t1E01 = (real)_t1E00;
          real _t1E02 = prim *0034 (_t1E01, x1D5B);
          int _t1E03 = 3;
          real _t1E04 = prim ^0068 (z1D5D, _t1E03);
          real _t1E05 = prim *0034 (_t1E02, _t1E04);
          int _t1E06 = 2;
          real _t1E07 = prim ^0068 (x1D5B, _t1E06);
          int _t1E08 = 2;
          real _t1E09 = prim ^0068 (y1D5C, _t1E08);
          real _t1E0A = prim +0017<$[]> (_t1E07, _t1E09);
          int _t1E0B = 2;
          real _t1E0C = prim ^0068 (z1D5D, _t1E0B);
          real _t1E0D = prim +0017<$[]> (_t1E0A, _t1E0C);
          real _t1E0E = prim sin0171 (_t1E0D);
          real _t1E0F = prim *0034 (_t1E05, _t1E0E);
          real _t1E10 = 0.4e1;
          real _t1E11 = prim *0034 (_t1E10, x1D5B);
          real _t1E12 = prim *0034 (_t1E11, z1D5D);
          int _t1E13 = 2;
          real _t1E14 = prim ^0068 (x1D5B, _t1E13);
          int _t1E15 = 2;
          real _t1E16 = prim ^0068 (y1D5C, _t1E15);
          real _t1E17 = prim +0017<$[]> (_t1E14, _t1E16);
          int _t1E18 = 2;
          real _t1E19 = prim ^0068 (z1D5D, _t1E18);
          real _t1E1A = prim +0017<$[]> (_t1E17, _t1E19);
          real _t1E1B = prim cos0169 (_t1E1A);
          real _t1E1C = prim *0034 (_t1E12, _t1E1B);
          real _t1E1D = prim +0017<$[]> (_t1E0F, _t1E1C);
          int _t1E1E = -4;
          real _t1E1F = (real)_t1E1E;
          real _t1E20 = prim *0034 (_t1E1F, y1D5C);
          int _t1E21 = 3;
          real _t1E22 = prim ^0068 (z1D5D, _t1E21);
          real _t1E23 = prim *0034 (_t1E20, _t1E22);
          int _t1E24 = 2;
          real _t1E25 = prim ^0068 (x1D5B, _t1E24);
          int _t1E26 = 2;
          real _t1E27 = prim ^0068 (y1D5C, _t1E26);
          real _t1E28 = prim +0017<$[]> (_t1E25, _t1E27);
          int _t1E29 = 2;
          real _t1E2A = prim ^0068 (z1D5D, _t1E29);
          real _t1E2B = prim +0017<$[]> (_t1E28, _t1E2A);
          real _t1E2C = prim sin0171 (_t1E2B);
          real _t1E2D = prim *0034 (_t1E23, _t1E2C);
          real _t1E2E = 0.4e1;
          real _t1E2F = prim *0034 (_t1E2E, y1D5C);
          real _t1E30 = prim *0034 (_t1E2F, z1D5D);
          int _t1E31 = 2;
          real _t1E32 = prim ^0068 (x1D5B, _t1E31);
          int _t1E33 = 2;
          real _t1E34 = prim ^0068 (y1D5C, _t1E33);
          real _t1E35 = prim +0017<$[]> (_t1E32, _t1E34);
          int _t1E36 = 2;
          real _t1E37 = prim ^0068 (z1D5D, _t1E36);
          real _t1E38 = prim +0017<$[]> (_t1E35, _t1E37);
          real _t1E39 = prim cos0169 (_t1E38);
          real _t1E3A = prim *0034 (_t1E30, _t1E39);
          real _t1E3B = prim +0017<$[]> (_t1E2D, _t1E3A);
          int _t1E3C = -4;
          real _t1E3D = (real)_t1E3C;
          int _t1E3E = 4;
          real _t1E3F = prim ^0068 (z1D5D, _t1E3E);
          real _t1E40 = prim *0034 (_t1E3D, _t1E3F);
          int _t1E41 = 2;
          real _t1E42 = prim ^0068 (x1D5B, _t1E41);
          int _t1E43 = 2;
          real _t1E44 = prim ^0068 (y1D5C, _t1E43);
          real _t1E45 = prim +0017<$[]> (_t1E42, _t1E44);
          int _t1E46 = 2;
          real _t1E47 = prim ^0068 (z1D5D, _t1E46);
          real _t1E48 = prim +0017<$[]> (_t1E45, _t1E47);
          real _t1E49 = prim sin0171 (_t1E48);
          real _t1E4A = prim *0034 (_t1E40, _t1E49);
          real _t1E4B = 0.1e2;
          int _t1E4C = 2;
          real _t1E4D = prim ^0068 (z1D5D, _t1E4C);
          real _t1E4E = prim *0034 (_t1E4B, _t1E4D);
          int _t1E4F = 2;
          real _t1E50 = prim ^0068 (x1D5B, _t1E4F);
          int _t1E51 = 2;
          real _t1E52 = prim ^0068 (y1D5C, _t1E51);
          real _t1E53 = prim +0017<$[]> (_t1E50, _t1E52);
          int _t1E54 = 2;
          real _t1E55 = prim ^0068 (z1D5D, _t1E54);
          real _t1E56 = prim +0017<$[]> (_t1E53, _t1E55);
          real _t1E57 = prim cos0169 (_t1E56);
          real _t1E58 = prim *0034 (_t1E4E, _t1E57);
          real _t1E59 = prim +0017<$[]> (_t1E4A, _t1E58);
          real _t1E5A = 0.2e1;
          int _t1E5B = 2;
          real _t1E5C = prim ^0068 (x1D5B, _t1E5B);
          int _t1E5D = 2;
          real _t1E5E = prim ^0068 (y1D5C, _t1E5D);
          real _t1E5F = prim +0017<$[]> (_t1E5C, _t1E5E);
          int _t1E60 = 2;
          real _t1E61 = prim ^0068 (z1D5D, _t1E60);
          real _t1E62 = prim +0017<$[]> (_t1E5F, _t1E61);
          real _t1E63 = prim sin0171 (_t1E62);
          real _t1E64 = prim *0034 (_t1E5A, _t1E63);
          real _t1E65 = prim +0017<$[]> (_t1E59, _t1E64);
          vec3 _t1E66 = [_t1E1D, _t1E3B, _t1E65];
          tensor[3,3] hess1E67 = [_t1DAE, _t1DFF, _t1E66];
          H1D5A = hess1E67;
          real[3] _t1E68 = prim evals009F (H1D5A);
          int _t1E69 = 2;
          real _t1E6A = prim $sub01C0<real; %3> (_t1E68, _t1E69);
          real _t1E6B = prim unary -008B<$[]> (_t1E6A);
          real _t1E6C = prim |()|00B5<$[3]> (g1D1C);
          real _t1E6D = prim +0017<$[]> (fBias07CC, _t1E6C);
          real str1E6E = prim /0055 (_t1E6B, _t1E6D);
          _t1D1B = str1E6E;
          bool _t1E6F = prim >0080 (_t1D1B, fStrTh07CA);
          if _t1E6F {
            bool _t1E70;
            real _t1E71;
            real _t1E72 = 0.e0;
            _t1E71 = _t1E72;
            bool _t1E73 = prim >=007E (_t1E71, fMaskTh07CB);
            if _t1E73 {
              bool _t1E74 = true;
              _t1E70 = _t1E74;
            } else {
              _t1E70 = false;
            }
            _t1D1A = _t1E70;
          } else {
            _t1D1A = false;
          }
          _t1CFF = _t1D1A;
        } else {
          _t1CFF = false;
        }
        _t143A = _t1CFF;
        if _t143A {
          new point (npos142B, hh139B);
          int _t143B = 1;
          born13A5 = prim +0015 (born13A5, _t143B);
        }
        bool _t143C;
        bool _t143D;
        int _t143E = 0;
        bool _t143F = prim >007F (verb07DA, _t143E);
        if _t143F {
          _t143D = vv13A7;
        } else {
          _t143D = false;
        }
        if _t143D {
          _t143C = true;
        } else {
          int _t1440 = 1;
          _t143C = prim >007F (verb07DA, _t1440);
        }
        if _t143C {
          string _t1441 = "(i#";
          string _t1442 = " @ ";
          string _t1443 = "): ";
          print (ID139A, _t1441, iter1359, _t1442, pos1398, _t1443);
          string _t1444 = "nn=0; after birthing mvmt=";
          string _t1445 = "\n";
          print (_t1444, mvmt13A3, _t1445);
        }
        continue;
      }
      tensor[3,3] _t1446 = func fPerp12BE (pos1398);
      tensor[3,3] _t1447 = prim *0036<$[3,3]> (hh139B, _t1446);
      vec3 es1448 = prim •00CE<$[3,3]; $[3]; $[3]> (_t1447, force13F6);
      real _t1449 = prim |()|00B5<$[3]> (es1448);
      bool _t144A = prim >0080 (_t1449, tipd07CD);
      if _t144A {
        real _t144B = prim |()|00B5<$[3]> (es1448);
        real _t144C = prim /0055 (tipd07CD, _t144B);
        hh139B = prim *0034 (hh139B, _t144C);
        real _t144D = prim |()|00B5<$[3]> (es1448);
        real _t144E = prim /0055 (tipd07CD, _t144D);
        es1448 = prim *0038<$[3]> (es1448, _t144E);
      }
      vec3 _t144F = prim +0017<$[3]> (pos1398, es1448);
      vec3 _t1450 = func fStep128C (_t144F);
      vec3 fs1451 = prim *0036<$[3]> (sfs07DB, _t1450);
      real _t1452 = prim |()|00B5<$[3]> (fs1451);
      real _t1453 = prim *0034 (fsEps07D4, tipd07CD);
      real _t1454 = prim |()|00B5<$[3]> (es1448);
      real _t1455 = prim +0017<$[]> (_t1453, _t1454);
      real _t1456 = prim /0055 (_t1452, _t1455);
      real _t1457 = 0.5e0;
      bool _t1458 = prim >0080 (_t1456, _t1457);
      if _t1458 {
        real _t1459 = 0.5e0;
        hh139B = prim *0034 (hh139B, _t1459);
        bool _t145A;
        bool _t145B;
        int _t145C = 0;
        bool _t145D = prim >007F (verb07DA, _t145C);
        if _t145D {
          _t145B = vv13A7;
        } else {
          _t145B = false;
        }
        if _t145B {
          _t145A = true;
        } else {
          int _t145E = 1;
          _t145A = prim >007F (verb07DA, _t145E);
        }
        if _t145A {
          string _t145F = "(i#";
          string _t1460 = " @ ";
          string _t1461 = "): ";
          print (ID139A, _t145F, iter1359, _t1460, pos1398, _t1461);
          string _t1462 = "nn=";
          string _t1463 = "; |fs|/|es|=";
          real _t1464 = prim |()|00B5<$[3]> (fs1451);
          real _t1465 = prim |()|00B5<$[3]> (es1448);
          real _t1466 = prim /0055 (_t1464, _t1465);
          string _t1467 = " > 0.5; trying again with hh=";
          string _t1468 = "; mvmt=";
          string _t1469 = "\n";
          print (_t1462, nn13F7, _t1463, _t1466, _t1467, hh139B, _t1468, mvmt13A3, _t1469);
          string _t146A = "        fs=";
          string _t146B = "\n";
          print (_t146A, fs1451, _t146B);
          string _t146C = "        es=";
          string _t146D = "\n";
          print (_t146C, es1448, _t146D);
        }
        continue;
      }
      vec3 oldpos146E = pos1398;
      vec3 _t146F = prim +0017<$[3]> (fs1451, es1448);
      pos1398 = prim +0017<$[3]> (pos1398, _t146F);
      _pos1399 = pos1398;
      real newE1470 = 0.e0;
      closest13A4 = rad1342;
      real _t1471 = 0.e0;
      real _t1472 = 0.e0;
      real _t1473 = 0.e0;
      vec3 mno1474 = [_t1471, _t1472, _t1473];
      nn13F7 = 0;
      point[] _t1475 = prim sphere0198<point> (_pos1399, rad1342);
      foreach P1476 in _t1475 {
        vec3 _t1477 = P1476.pos1398;
        vec3 off1478 = prim -0026<$[3]> (_t1477, pos1398);
        real _t1479;
        real _t1CD7 = prim |()|00B5<$[3]> (off1478);
        real _t1CD8 = prim /0055 (_t1CD7, rad1342);
        real _t1CD9;
        real _t1CDA = 0.2e1;
        real _t1CDB = 0.3e1;
        real _t1CDC = prim /0055 (_t1CDA, _t1CDB);
        real s1CDD = prim -0026<$[]> (_t1CD8, _t1CDC);
        real _t1CDE;
        real _t1CDF = 0.2e1;
        real _t1CE0 = 0.3e1;
        real _t1CE1 = prim /0055 (_t1CDF, _t1CE0);
        bool _t1CE2 = prim <007A (_t1CD8, _t1CE1);
        if _t1CE2 {
          real _t1CE3 = 0.1e1;
          real _t1CE4 = -0.5646e1;
          real _t1CE5 = 0.119835e2;
          real _t1CE6 = -0.113535e2;
          real _t1CE7 = 0.40550625e1;
          real _t1CE8 = prim *0034 (_t1CE7, _t1CD8);
          real _t1CE9 = prim +0017<$[]> (_t1CE6, _t1CE8);
          real _t1CEA = prim *0034 (_t1CD8, _t1CE9);
          real _t1CEB = prim +0017<$[]> (_t1CE5, _t1CEA);
          real _t1CEC = prim *0034 (_t1CD8, _t1CEB);
          real _t1CED = prim +0017<$[]> (_t1CE4, _t1CEC);
          real _t1CEE = prim *0034 (_t1CD8, _t1CED);
          _t1CDE = prim +0017<$[]> (_t1CE3, _t1CEE);
        } else {
          real _t1CEF;
          real _t1CF0 = 0.1e1;
          bool _t1CF1 = prim <007A (_t1CD8, _t1CF0);
          if _t1CF1 {
            real _t1CF2 = -0.1e-2;
            real _t1CF3 = 0.9e-1;
            real _t1CF4 = -0.54e0;
            real _t1CF5 = 0.1215e1;
            real _t1CF6 = 0.972e0;
            real _t1CF7 = prim *0034 (_t1CF6, s1CDD);
            real _t1CF8 = prim -0026<$[]> (_t1CF5, _t1CF7);
            real _t1CF9 = prim *0034 (_t1CF8, s1CDD);
            real _t1CFA = prim +0017<$[]> (_t1CF4, _t1CF9);
            real _t1CFB = prim *0034 (_t1CFA, s1CDD);
            real _t1CFC = prim +0017<$[]> (_t1CF3, _t1CFB);
            real _t1CFD = prim *0034 (_t1CFC, s1CDD);
            real _t1CFE = prim *0034 (_t1CFD, s1CDD);
            _t1CEF = prim +0017<$[]> (_t1CF2, _t1CFE);
          } else {
            _t1CEF = 0.e0;
          }
          _t1CDE = _t1CEF;
        }
        _t1CD9 = _t1CDE;
        _t1479 = _t1CD9;
        newE1470 = prim +0017<$[]> (newE1470, _t1479);
        real _t147A = prim |()|00B5<$[3]> (off1478);
        closest13A4 = prim min0127 (closest13A4, _t147A);
        mno1474 = prim +0017<$[3]> (mno1474, off1478);
        int _t147B = 1;
        nn13F7 = prim +0015 (nn13F7, _t147B);
      }
      real _t147C = (real)nn13F7;
      mno1474 = prim /0057<$[3]> (mno1474, _t147C);
      bool _t147D;
      bool _t147E;
      int _t147F = 0;
      bool _t1480 = prim >007F (verb07DA, _t147F);
      if _t1480 {
        _t147E = vv13A7;
      } else {
        _t147E = false;
      }
      if _t147E {
        _t147D = true;
      } else {
        int _t1481 = 1;
        _t147D = prim >007F (verb07DA, _t1481);
      }
      if _t147D {
        string _t1482 = "(i#";
        string _t1483 = " @ ";
        string _t1484 = "): ";
        print (ID139A, _t1482, iter1359, _t1483, pos1398, _t1484);
        string _t1485 = "nn=";
        string _t1486 = "; oldE=";
        string _t1487 = " newE=";
        string _t1488 = "\n";
        print (_t1485, nn13F7, _t1486, oldE13F2, _t1487, newE1470, _t1488);
      }
      real _t1489 = prim -0026<$[]> (newE1470, oldE13F2);
      vec3 _t148A = prim -0026<$[3]> (pos1398, oldpos146E);
      vec3 _t148B = prim *0036<$[3]> (gdeTest07D1, _t148A);
      vec3 _t148C = prim unary -008B<$[3]> (force13F6);
      real _t148D = prim •00CE<$[3]; $[3]; $[]> (_t148B, _t148C);
      bool _t148E = prim >0080 (_t1489, _t148D);
      if _t148E {
        hh139B = prim *0034 (hh139B, gdeBack07D2);
        real _t148F = 0.e0;
        bool _t1490 = prim ==0084 (_t148F, hh139B);
        if _t1490 {
          string _t1491 = "(i#";
          string _t1492 = " @ ";
          string _t1493 = "): ";
          print (ID139A, _t1491, iter1359, _t1492, pos1398, _t1493);
          string _t1494 = "backtracked all the way to hh=0\n";
          print (_t1494);
          die;
        }
        bool _t1495;
        bool _t1496;
        int _t1497 = 0;
        bool _t1498 = prim >007F (verb07DA, _t1497);
        if _t1498 {
          _t1496 = vv13A7;
        } else {
          _t1496 = false;
        }
        if _t1496 {
          _t1495 = true;
        } else {
          int _t1499 = 1;
          _t1495 = prim >007F (verb07DA, _t1499);
        }
        if _t1495 {
          string _t149A = "(i#";
          string _t149B = " @ ";
          string _t149C = "): ";
          print (ID139A, _t149A, iter1359, _t149B, pos1398, _t149C);
          string _t149D = "nn=";
          string _t149E = "; oldE=";
          string _t149F = " newE=";
          string _t14A0 = "; backtracking; hh=";
          string _t14A1 = "; mvmt=";
          string _t14A2 = "\n";
          print (_t149D, nn13F7, _t149E, oldE13F2, _t149F, newE1470, _t14A0, hh139B, _t14A1, mvmt13A3, _t14A2);
          string _t14A3 = "      fs=";
          string _t14A4 = "\n";
          print (_t14A3, fs1451, _t14A4);
          string _t14A5 = "      es=";
          string _t14A6 = "\n";
          print (_t14A5, es1448, _t14A6);
          string _t14A7 = "      newE - oldE=";
          real _t14A8 = prim -0026<$[]> (newE1470, oldE13F2);
          string _t14A9 = "\n";
          print (_t14A7, _t14A8, _t14A9);
          string _t14AA = "      force=";
          string _t14AB = "\n";
          print (_t14AA, force13F6, _t14AB);
          string _t14AC = "      dpos=";
          vec3 _t14AD = prim -0026<$[3]> (pos1398, oldpos146E);
          string _t14AE = "\n";
          print (_t14AC, _t14AD, _t14AE);
          string _t14AF = "      0.5*(pos - oldpos).(-force)=";
          real _t14B0 = 0.5e0;
          vec3 _t14B1 = prim -0026<$[3]> (pos1398, oldpos146E);
          vec3 _t14B2 = prim *0036<$[3]> (_t14B0, _t14B1);
          vec3 _t14B3 = prim unary -008B<$[3]> (force13F6);
          real _t14B4 = prim •00CE<$[3]; $[3]; $[]> (_t14B2, _t14B3);
          string _t14B5 = "\n";
          print (_t14AF, _t14B4, _t14B5);
        }
        pos1398 = oldpos146E;
        _pos1399 = pos1398;
        continue;
      }
      hh139B = prim *0034 (hh139B, gdeOppor07D3);
      vec3 _t14B6 = prim +0017<$[3]> (fs1451, es1448);
      step139C = prim +0017<$[3]> (step139C, _t14B6);
      real _t14B7 = prim |()|00B5<$[3]> (step139C);
      real _t14B8 = prim /0055 (_t14B7, tipd07CD);
      trav13A2 = prim +0017<$[]> (trav13A2, _t14B8);
      real _t14B9 = prim |()|00B5<$[3]> (step139C);
      real _t14BA = prim /0055 (_t14B9, tipd07CD);
      mvmt13A3 = prim lerp0096<$[]> (_t14BA, mvmt13A3, hist07DC);
      real _t14BB = prim |()|00B5<$[3]> (step139C);
      real _t14BC = prim /0055 (_t14BB, tipd07CD);
      bool _t14BD = prim <007A (_t14BC, pcmvEps07D8);
      if _t14BD {
        int _t14BE;
        bool _t1CC7;
        int _t1CC8 = 0;
        bool _t1CC9 = prim >007F (pcp07DD, _t1CC8);
        if _t1CC9 {
          bool _t1CCA;
          int _t1CCB = 0;
          bool _t1CCC = prim >007F (iter1359, _t1CCB);
          if _t1CCC {
            int _t1CCD = 0;
            int _t1CCE = prim %00A1 (iter1359, pcp07DD);
            _t1CCA = prim ==0082 (_t1CCD, _t1CCE);
          } else {
            _t1CCA = false;
          }
          _t1CC7 = _t1CCA;
        } else {
          _t1CC7 = false;
        }
        if _t1CC7 {
          int _t1CCF = prim /0054 (iter1359, pcp07DD);
          int _t1CD0 = 2;
          int _t1CD1 = prim %00A1 (_t1CCF, _t1CD0);
          int _t1CD2 = 2;
          int _t1CD3 = prim *0033 (_t1CD1, _t1CD2);
          int _t1CD4 = 1;
          int _t1CD5 = prim -0024 (_t1CD3, _t1CD4);
          _t14BE = _t1CD5;
        } else {
          int _t1CD6 = 0;
          _t14BE = _t1CD6;
        }
        int _t14BF = 0;
        bool _t14C0 = prim !=0086 (_t14BE, _t14BF);
        if _t14C0 {
          bool _t14C1;
          int _t14C2;
          bool _t1CB7;
          int _t1CB8 = 0;
          bool _t1CB9 = prim >007F (pcp07DD, _t1CB8);
          if _t1CB9 {
            bool _t1CBA;
            int _t1CBB = 0;
            bool _t1CBC = prim >007F (iter1359, _t1CBB);
            if _t1CBC {
              int _t1CBD = 0;
              int _t1CBE = prim %00A1 (iter1359, pcp07DD);
              _t1CBA = prim ==0082 (_t1CBD, _t1CBE);
            } else {
              _t1CBA = false;
            }
            _t1CB7 = _t1CBA;
          } else {
            _t1CB7 = false;
          }
          if _t1CB7 {
            int _t1CBF = prim /0054 (iter1359, pcp07DD);
            int _t1CC0 = 2;
            int _t1CC1 = prim %00A1 (_t1CBF, _t1CC0);
            int _t1CC2 = 2;
            int _t1CC3 = prim *0033 (_t1CC1, _t1CC2);
            int _t1CC4 = 1;
            int _t1CC5 = prim -0024 (_t1CC3, _t1CC4);
            _t14C2 = _t1CC5;
          } else {
            int _t1CC6 = 0;
            _t14C2 = _t1CC6;
          }
          int _t14C3 = 0;
          bool _t14C4 = prim >007F (_t14C2, _t14C3);
          if _t14C4 {
            bool _t14C5;
            real _t14C6 = 0.e0;
            bool _t14C7 = prim <007A (newE1470, _t14C6);
            if _t14C7 {
              bool _t14C8;
              bool _t14C9 = prim <0079 (nn13F7, nnmin12ED);
              if _t14C9 {
                _t14C8 = prim <0079 (born13A5, nnmax12F4);
              } else {
                _t14C8 = false;
              }
              _t14C5 = _t14C8;
            } else {
              _t14C5 = false;
            }
            _t14C1 = _t14C5;
          } else {
            _t14C1 = false;
          }
          if _t14C1 {
            vec3 _t14CA = prim normalize0137<$[3]> (mno1474);
            vec3 _t14CB = prim *0036<$[3]> (tipd07CD, _t14CA);
            vec3 npos14CC = prim -0026<$[3]> (pos1398, _t14CB);
            vec3 _t14CD = func fStep128C (npos14CC);
            vec3 _t14CE = prim *0036<$[3]> (sfs07DB, _t14CD);
            npos14CC = prim +0017<$[3]> (npos14CC, _t14CE);
            vec3 _t14CF = func fStep128C (npos14CC);
            vec3 _t14D0 = prim *0036<$[3]> (sfs07DB, _t14CF);
            npos14CC = prim +0017<$[3]> (npos14CC, _t14D0);
            bool birth14D1 = true;
            int _t14D2 = 2;
            bool _t14D3 = prim ==0082 (fDim07DF, _t14D2);
            if _t14D3 {
              int _t14D4 = 4;
              bool _t14D5 = prim >=007D (nn13F7, _t14D4);
              if _t14D5 {
                real _t14D6 = prim *0034 (tipd07CD, mabd07CE);
                point[] _t14D7 = prim sphere0198<point> (npos14CC, _t14D6);
                foreach P14D8 in _t14D7 {
                  birth14D1 = false;
                }
                if birth14D1 {
                  real _t14D9;
                  real _t1C93 = pos1398[0];
                  real _t1C94 = func urnd135C (_t1C93);
                  real _t1C95 = pos1398[1];
                  real _t1C96 = func urnd135C (_t1C95);
                  real _t1C97 = prim +0017<$[]> (_t1C94, _t1C96);
                  real _t1C98 = pos1398[2];
                  real _t1C99 = func urnd135C (_t1C98);
                  real _t1C9A = prim +0017<$[]> (_t1C97, _t1C99);
                  real _t1C9B = 0.1e1;
                  real _t1C9C = prim fmod018A (_t1C9A, _t1C9B);
                  _t14D9 = _t1C9C;
                  int _t14DA = prim -0024 (nnmin12ED, nn13F7);
                  real _t14DB = (real)_t14DA;
                  real _t14DC = prim $i2r01B6 (nnmin12ED);
                  real _t14DD = prim /0055 (_t14DB, _t14DC);
                  birth14D1 = prim <007A (_t14D9, _t14DD);
                }
              }
            }
            if birth14D1 {
              bool _t14DE;
              bool _t1B1D;
              bool _t1B1E;
              real _t1B1F = 0.e0;
              real _t1B20 = 0.e0;
              real _t1B21 = 0.e0;
              vec3 _t1B22 = [_t1B1F, _t1B20, _t1B21];
              vec3 mid1B23 = prim -0026<$[3]> (npos14CC, _t1B22);
              bool _t1B32;
              real _t1B33 = prim |()|00B5<$[3]> (mid1B23);
              real _t1B34 = 0.4e1;
              bool _t1B35 = prim <007A (_t1B33, _t1B34);
              if _t1B35 {
                real _t1B36 = prim |()|00B5<$[3]> (mid1B23);
                real _t1B37 = 0.3e1;
                _t1B32 = prim >0080 (_t1B36, _t1B37);
              } else {
                _t1B32 = false;
              }
              _t1B1E = _t1B32;
              if _t1B1E {
                bool _t1B38;
                real _t1B39;
                vec3 g1B3A;
                real x1B3B = npos14CC[0];
                real y1B3C = npos14CC[1];
                real z1B3D = npos14CC[2];
                real _t1B3E = 0.2e1;
                real _t1B3F = prim *0034 (_t1B3E, x1B3B);
                int _t1B40 = 2;
                real _t1B41 = prim ^0068 (z1B3D, _t1B40);
                real _t1B42 = prim *0034 (_t1B3F, _t1B41);
                int _t1B43 = 2;
                real _t1B44 = prim ^0068 (x1B3B, _t1B43);
                int _t1B45 = 2;
                real _t1B46 = prim ^0068 (y1B3C, _t1B45);
                real _t1B47 = prim +0017<$[]> (_t1B44, _t1B46);
                int _t1B48 = 2;
                real _t1B49 = prim ^0068 (z1B3D, _t1B48);
                real _t1B4A = prim +0017<$[]> (_t1B47, _t1B49);
                real _t1B4B = prim cos0169 (_t1B4A);
                real _t1B4C = prim *0034 (_t1B42, _t1B4B);
                real _t1B4D = 0.2e1;
                real _t1B4E = prim *0034 (_t1B4D, y1B3C);
                int _t1B4F = 2;
                real _t1B50 = prim ^0068 (z1B3D, _t1B4F);
                real _t1B51 = prim *0034 (_t1B4E, _t1B50);
                int _t1B52 = 2;
                real _t1B53 = prim ^0068 (x1B3B, _t1B52);
                int _t1B54 = 2;
                real _t1B55 = prim ^0068 (y1B3C, _t1B54);
                real _t1B56 = prim +0017<$[]> (_t1B53, _t1B55);
                int _t1B57 = 2;
                real _t1B58 = prim ^0068 (z1B3D, _t1B57);
                real _t1B59 = prim +0017<$[]> (_t1B56, _t1B58);
                real _t1B5A = prim cos0169 (_t1B59);
                real _t1B5B = prim *0034 (_t1B51, _t1B5A);
                real _t1B5C = 0.2e1;
                int _t1B5D = 3;
                real _t1B5E = prim ^0068 (z1B3D, _t1B5D);
                real _t1B5F = prim *0034 (_t1B5C, _t1B5E);
                int _t1B60 = 2;
                real _t1B61 = prim ^0068 (x1B3B, _t1B60);
                int _t1B62 = 2;
                real _t1B63 = prim ^0068 (y1B3C, _t1B62);
                real _t1B64 = prim +0017<$[]> (_t1B61, _t1B63);
                int _t1B65 = 2;
                real _t1B66 = prim ^0068 (z1B3D, _t1B65);
                real _t1B67 = prim +0017<$[]> (_t1B64, _t1B66);
                real _t1B68 = prim cos0169 (_t1B67);
                real _t1B69 = prim *0034 (_t1B5F, _t1B68);
                real _t1B6A = 0.2e1;
                real _t1B6B = prim *0034 (_t1B6A, z1B3D);
                int _t1B6C = 2;
                real _t1B6D = prim ^0068 (x1B3B, _t1B6C);
                int _t1B6E = 2;
                real _t1B6F = prim ^0068 (y1B3C, _t1B6E);
                real _t1B70 = prim +0017<$[]> (_t1B6D, _t1B6F);
                int _t1B71 = 2;
                real _t1B72 = prim ^0068 (z1B3D, _t1B71);
                real _t1B73 = prim +0017<$[]> (_t1B70, _t1B72);
                real _t1B74 = prim sin0171 (_t1B73);
                real _t1B75 = prim *0034 (_t1B6B, _t1B74);
                real _t1B76 = prim +0017<$[]> (_t1B69, _t1B75);
                vec3 g1B77 = [_t1B4C, _t1B5B, _t1B76];
                g1B3A = g1B77;
                tensor[3,3] H1B78;
                real x1B79 = npos14CC[0];
                real y1B7A = npos14CC[1];
                real z1B7B = npos14CC[2];
                int _t1B7C = -4;
                real _t1B7D = (real)_t1B7C;
                int _t1B7E = 2;
                real _t1B7F = prim ^0068 (x1B79, _t1B7E);
                real _t1B80 = prim *0034 (_t1B7D, _t1B7F);
                int _t1B81 = 2;
                real _t1B82 = prim ^0068 (z1B7B, _t1B81);
                real _t1B83 = prim *0034 (_t1B80, _t1B82);
                int _t1B84 = 2;
                real _t1B85 = prim ^0068 (x1B79, _t1B84);
                int _t1B86 = 2;
                real _t1B87 = prim ^0068 (y1B7A, _t1B86);
                real _t1B88 = prim +0017<$[]> (_t1B85, _t1B87);
                int _t1B89 = 2;
                real _t1B8A = prim ^0068 (z1B7B, _t1B89);
                real _t1B8B = prim +0017<$[]> (_t1B88, _t1B8A);
                real _t1B8C = prim sin0171 (_t1B8B);
                real _t1B8D = prim *0034 (_t1B83, _t1B8C);
                real _t1B8E = 0.2e1;
                int _t1B8F = 2;
                real _t1B90 = prim ^0068 (z1B7B, _t1B8F);
                real _t1B91 = prim *0034 (_t1B8E, _t1B90);
                int _t1B92 = 2;
                real _t1B93 = prim ^0068 (x1B79, _t1B92);
                int _t1B94 = 2;
                real _t1B95 = prim ^0068 (y1B7A, _t1B94);
                real _t1B96 = prim +0017<$[]> (_t1B93, _t1B95);
                int _t1B97 = 2;
                real _t1B98 = prim ^0068 (z1B7B, _t1B97);
                real _t1B99 = prim +0017<$[]> (_t1B96, _t1B98);
                real _t1B9A = prim cos0169 (_t1B99);
                real _t1B9B = prim *0034 (_t1B91, _t1B9A);
                real _t1B9C = prim +0017<$[]> (_t1B8D, _t1B9B);
                int _t1B9D = -4;
                real _t1B9E = (real)_t1B9D;
                real _t1B9F = prim *0034 (_t1B9E, x1B79);
                real _t1BA0 = prim *0034 (_t1B9F, y1B7A);
                int _t1BA1 = 2;
                real _t1BA2 = prim ^0068 (z1B7B, _t1BA1);
                real _t1BA3 = prim *0034 (_t1BA0, _t1BA2);
                int _t1BA4 = 2;
                real _t1BA5 = prim ^0068 (x1B79, _t1BA4);
                int _t1BA6 = 2;
                real _t1BA7 = prim ^0068 (y1B7A, _t1BA6);
                real _t1BA8 = prim +0017<$[]> (_t1BA5, _t1BA7);
                int _t1BA9 = 2;
                real _t1BAA = prim ^0068 (z1B7B, _t1BA9);
                real _t1BAB = prim +0017<$[]> (_t1BA8, _t1BAA);
                real _t1BAC = prim sin0171 (_t1BAB);
                real _t1BAD = prim *0034 (_t1BA3, _t1BAC);
                int _t1BAE = -4;
                real _t1BAF = (real)_t1BAE;
                real _t1BB0 = prim *0034 (_t1BAF, x1B79);
                int _t1BB1 = 3;
                real _t1BB2 = prim ^0068 (z1B7B, _t1BB1);
                real _t1BB3 = prim *0034 (_t1BB0, _t1BB2);
                int _t1BB4 = 2;
                real _t1BB5 = prim ^0068 (x1B79, _t1BB4);
                int _t1BB6 = 2;
                real _t1BB7 = prim ^0068 (y1B7A, _t1BB6);
                real _t1BB8 = prim +0017<$[]> (_t1BB5, _t1BB7);
                int _t1BB9 = 2;
                real _t1BBA = prim ^0068 (z1B7B, _t1BB9);
                real _t1BBB = prim +0017<$[]> (_t1BB8, _t1BBA);
                real _t1BBC = prim sin0171 (_t1BBB);
                real _t1BBD = prim *0034 (_t1BB3, _t1BBC);
                real _t1BBE = 0.4e1;
                real _t1BBF = prim *0034 (_t1BBE, x1B79);
                real _t1BC0 = prim *0034 (_t1BBF, z1B7B);
                int _t1BC1 = 2;
                real _t1BC2 = prim ^0068 (x1B79, _t1BC1);
                int _t1BC3 = 2;
                real _t1BC4 = prim ^0068 (y1B7A, _t1BC3);
                real _t1BC5 = prim +0017<$[]> (_t1BC2, _t1BC4);
                int _t1BC6 = 2;
                real _t1BC7 = prim ^0068 (z1B7B, _t1BC6);
                real _t1BC8 = prim +0017<$[]> (_t1BC5, _t1BC7);
                real _t1BC9 = prim cos0169 (_t1BC8);
                real _t1BCA = prim *0034 (_t1BC0, _t1BC9);
                real _t1BCB = prim +0017<$[]> (_t1BBD, _t1BCA);
                vec3 _t1BCC = [_t1B9C, _t1BAD, _t1BCB];
                int _t1BCD = -4;
                real _t1BCE = (real)_t1BCD;
                real _t1BCF = prim *0034 (_t1BCE, x1B79);
                real _t1BD0 = prim *0034 (_t1BCF, y1B7A);
                int _t1BD1 = 2;
                real _t1BD2 = prim ^0068 (z1B7B, _t1BD1);
                real _t1BD3 = prim *0034 (_t1BD0, _t1BD2);
                int _t1BD4 = 2;
                real _t1BD5 = prim ^0068 (x1B79, _t1BD4);
                int _t1BD6 = 2;
                real _t1BD7 = prim ^0068 (y1B7A, _t1BD6);
                real _t1BD8 = prim +0017<$[]> (_t1BD5, _t1BD7);
                int _t1BD9 = 2;
                real _t1BDA = prim ^0068 (z1B7B, _t1BD9);
                real _t1BDB = prim +0017<$[]> (_t1BD8, _t1BDA);
                real _t1BDC = prim sin0171 (_t1BDB);
                real _t1BDD = prim *0034 (_t1BD3, _t1BDC);
                int _t1BDE = -4;
                real _t1BDF = (real)_t1BDE;
                int _t1BE0 = 2;
                real _t1BE1 = prim ^0068 (y1B7A, _t1BE0);
                real _t1BE2 = prim *0034 (_t1BDF, _t1BE1);
                int _t1BE3 = 2;
                real _t1BE4 = prim ^0068 (z1B7B, _t1BE3);
                real _t1BE5 = prim *0034 (_t1BE2, _t1BE4);
                int _t1BE6 = 2;
                real _t1BE7 = prim ^0068 (x1B79, _t1BE6);
                int _t1BE8 = 2;
                real _t1BE9 = prim ^0068 (y1B7A, _t1BE8);
                real _t1BEA = prim +0017<$[]> (_t1BE7, _t1BE9);
                int _t1BEB = 2;
                real _t1BEC = prim ^0068 (z1B7B, _t1BEB);
                real _t1BED = prim +0017<$[]> (_t1BEA, _t1BEC);
                real _t1BEE = prim sin0171 (_t1BED);
                real _t1BEF = prim *0034 (_t1BE5, _t1BEE);
                real _t1BF0 = 0.2e1;
                int _t1BF1 = 2;
                real _t1BF2 = prim ^0068 (z1B7B, _t1BF1);
                real _t1BF3 = prim *0034 (_t1BF0, _t1BF2);
                int _t1BF4 = 2;
                real _t1BF5 = prim ^0068 (x1B79, _t1BF4);
                int _t1BF6 = 2;
                real _t1BF7 = prim ^0068 (y1B7A, _t1BF6);
                real _t1BF8 = prim +0017<$[]> (_t1BF5, _t1BF7);
                int _t1BF9 = 2;
                real _t1BFA = prim ^0068 (z1B7B, _t1BF9);
                real _t1BFB = prim +0017<$[]> (_t1BF8, _t1BFA);
                real _t1BFC = prim cos0169 (_t1BFB);
                real _t1BFD = prim *0034 (_t1BF3, _t1BFC);
                real _t1BFE = prim +0017<$[]> (_t1BEF, _t1BFD);
                int _t1BFF = -4;
                real _t1C00 = (real)_t1BFF;
                real _t1C01 = prim *0034 (_t1C00, y1B7A);
                int _t1C02 = 3;
                real _t1C03 = prim ^0068 (z1B7B, _t1C02);
                real _t1C04 = prim *0034 (_t1C01, _t1C03);
                int _t1C05 = 2;
                real _t1C06 = prim ^0068 (x1B79, _t1C05);
                int _t1C07 = 2;
                real _t1C08 = prim ^0068 (y1B7A, _t1C07);
                real _t1C09 = prim +0017<$[]> (_t1C06, _t1C08);
                int _t1C0A = 2;
                real _t1C0B = prim ^0068 (z1B7B, _t1C0A);
                real _t1C0C = prim +0017<$[]> (_t1C09, _t1C0B);
                real _t1C0D = prim sin0171 (_t1C0C);
                real _t1C0E = prim *0034 (_t1C04, _t1C0D);
                real _t1C0F = 0.4e1;
                real _t1C10 = prim *0034 (_t1C0F, y1B7A);
                real _t1C11 = prim *0034 (_t1C10, z1B7B);
                int _t1C12 = 2;
                real _t1C13 = prim ^0068 (x1B79, _t1C12);
                int _t1C14 = 2;
                real _t1C15 = prim ^0068 (y1B7A, _t1C14);
                real _t1C16 = prim +0017<$[]> (_t1C13, _t1C15);
                int _t1C17 = 2;
                real _t1C18 = prim ^0068 (z1B7B, _t1C17);
                real _t1C19 = prim +0017<$[]> (_t1C16, _t1C18);
                real _t1C1A = prim cos0169 (_t1C19);
                real _t1C1B = prim *0034 (_t1C11, _t1C1A);
                real _t1C1C = prim +0017<$[]> (_t1C0E, _t1C1B);
                vec3 _t1C1D = [_t1BDD, _t1BFE, _t1C1C];
                int _t1C1E = -4;
                real _t1C1F = (real)_t1C1E;
                real _t1C20 = prim *0034 (_t1C1F, x1B79);
                int _t1C21 = 3;
                real _t1C22 = prim ^0068 (z1B7B, _t1C21);
                real _t1C23 = prim *0034 (_t1C20, _t1C22);
                int _t1C24 = 2;
                real _t1C25 = prim ^0068 (x1B79, _t1C24);
                int _t1C26 = 2;
                real _t1C27 = prim ^0068 (y1B7A, _t1C26);
                real _t1C28 = prim +0017<$[]> (_t1C25, _t1C27);
                int _t1C29 = 2;
                real _t1C2A = prim ^0068 (z1B7B, _t1C29);
                real _t1C2B = prim +0017<$[]> (_t1C28, _t1C2A);
                real _t1C2C = prim sin0171 (_t1C2B);
                real _t1C2D = prim *0034 (_t1C23, _t1C2C);
                real _t1C2E = 0.4e1;
                real _t1C2F = prim *0034 (_t1C2E, x1B79);
                real _t1C30 = prim *0034 (_t1C2F, z1B7B);
                int _t1C31 = 2;
                real _t1C32 = prim ^0068 (x1B79, _t1C31);
                int _t1C33 = 2;
                real _t1C34 = prim ^0068 (y1B7A, _t1C33);
                real _t1C35 = prim +0017<$[]> (_t1C32, _t1C34);
                int _t1C36 = 2;
                real _t1C37 = prim ^0068 (z1B7B, _t1C36);
                real _t1C38 = prim +0017<$[]> (_t1C35, _t1C37);
                real _t1C39 = prim cos0169 (_t1C38);
                real _t1C3A = prim *0034 (_t1C30, _t1C39);
                real _t1C3B = prim +0017<$[]> (_t1C2D, _t1C3A);
                int _t1C3C = -4;
                real _t1C3D = (real)_t1C3C;
                real _t1C3E = prim *0034 (_t1C3D, y1B7A);
                int _t1C3F = 3;
                real _t1C40 = prim ^0068 (z1B7B, _t1C3F);
                real _t1C41 = prim *0034 (_t1C3E, _t1C40);
                int _t1C42 = 2;
                real _t1C43 = prim ^0068 (x1B79, _t1C42);
                int _t1C44 = 2;
                real _t1C45 = prim ^0068 (y1B7A, _t1C44);
                real _t1C46 = prim +0017<$[]> (_t1C43, _t1C45);
                int _t1C47 = 2;
                real _t1C48 = prim ^0068 (z1B7B, _t1C47);
                real _t1C49 = prim +0017<$[]> (_t1C46, _t1C48);
                real _t1C4A = prim sin0171 (_t1C49);
                real _t1C4B = prim *0034 (_t1C41, _t1C4A);
                real _t1C4C = 0.4e1;
                real _t1C4D = prim *0034 (_t1C4C, y1B7A);
                real _t1C4E = prim *0034 (_t1C4D, z1B7B);
                int _t1C4F = 2;
                real _t1C50 = prim ^0068 (x1B79, _t1C4F);
                int _t1C51 = 2;
                real _t1C52 = prim ^0068 (y1B7A, _t1C51);
                real _t1C53 = prim +0017<$[]> (_t1C50, _t1C52);
                int _t1C54 = 2;
                real _t1C55 = prim ^0068 (z1B7B, _t1C54);
                real _t1C56 = prim +0017<$[]> (_t1C53, _t1C55);
                real _t1C57 = prim cos0169 (_t1C56);
                real _t1C58 = prim *0034 (_t1C4E, _t1C57);
                real _t1C59 = prim +0017<$[]> (_t1C4B, _t1C58);
                int _t1C5A = -4;
                real _t1C5B = (real)_t1C5A;
                int _t1C5C = 4;
                real _t1C5D = prim ^0068 (z1B7B, _t1C5C);
                real _t1C5E = prim *0034 (_t1C5B, _t1C5D);
                int _t1C5F = 2;
                real _t1C60 = prim ^0068 (x1B79, _t1C5F);
                int _t1C61 = 2;
                real _t1C62 = prim ^0068 (y1B7A, _t1C61);
                real _t1C63 = prim +0017<$[]> (_t1C60, _t1C62);
                int _t1C64 = 2;
                real _t1C65 = prim ^0068 (z1B7B, _t1C64);
                real _t1C66 = prim +0017<$[]> (_t1C63, _t1C65);
                real _t1C67 = prim sin0171 (_t1C66);
                real _t1C68 = prim *0034 (_t1C5E, _t1C67);
                real _t1C69 = 0.1e2;
                int _t1C6A = 2;
                real _t1C6B = prim ^0068 (z1B7B, _t1C6A);
                real _t1C6C = prim *0034 (_t1C69, _t1C6B);
                int _t1C6D = 2;
                real _t1C6E = prim ^0068 (x1B79, _t1C6D);
                int _t1C6F = 2;
                real _t1C70 = prim ^0068 (y1B7A, _t1C6F);
                real _t1C71 = prim +0017<$[]> (_t1C6E, _t1C70);
                int _t1C72 = 2;
                real _t1C73 = prim ^0068 (z1B7B, _t1C72);
                real _t1C74 = prim +0017<$[]> (_t1C71, _t1C73);
                real _t1C75 = prim cos0169 (_t1C74);
                real _t1C76 = prim *0034 (_t1C6C, _t1C75);
                real _t1C77 = prim +0017<$[]> (_t1C68, _t1C76);
                real _t1C78 = 0.2e1;
                int _t1C79 = 2;
                real _t1C7A = prim ^0068 (x1B79, _t1C79);
                int _t1C7B = 2;
                real _t1C7C = prim ^0068 (y1B7A, _t1C7B);
                real _t1C7D = prim +0017<$[]> (_t1C7A, _t1C7C);
                int _t1C7E = 2;
                real _t1C7F = prim ^0068 (z1B7B, _t1C7E);
                real _t1C80 = prim +0017<$[]> (_t1C7D, _t1C7F);
                real _t1C81 = prim sin0171 (_t1C80);
                real _t1C82 = prim *0034 (_t1C78, _t1C81);
                real _t1C83 = prim +0017<$[]> (_t1C77, _t1C82);
                vec3 _t1C84 = [_t1C3B, _t1C59, _t1C83];
                tensor[3,3] hess1C85 = [_t1BCC, _t1C1D, _t1C84];
                H1B78 = hess1C85;
                real[3] _t1C86 = prim evals009F (H1B78);
                int _t1C87 = 2;
                real _t1C88 = prim $sub01C0<real; %3> (_t1C86, _t1C87);
                real _t1C89 = prim unary -008B<$[]> (_t1C88);
                real _t1C8A = prim |()|00B5<$[3]> (g1B3A);
                real _t1C8B = prim +0017<$[]> (fBias07CC, _t1C8A);
                real str1C8C = prim /0055 (_t1C89, _t1C8B);
                _t1B39 = str1C8C;
                bool _t1C8D = prim >0080 (_t1B39, fStrTh07CA);
                if _t1C8D {
                  bool _t1C8E;
                  real _t1C8F;
                  real _t1C90 = 0.e0;
                  _t1C8F = _t1C90;
                  bool _t1C91 = prim >=007E (_t1C8F, fMaskTh07CB);
                  if _t1C91 {
                    bool _t1C92 = true;
                    _t1C8E = _t1C92;
                  } else {
                    _t1C8E = false;
                  }
                  _t1B38 = _t1C8E;
                } else {
                  _t1B38 = false;
                }
                _t1B1D = _t1B38;
              } else {
                _t1B1D = false;
              }
              _t14DE = _t1B1D;
              if _t14DE {
                new point (npos14CC, hh139B);
                int _t14DF = 1;
                born13A5 = prim +0015 (born13A5, _t14DF);
              }
            }
          } else {
            int _t14E0;
            bool _t1CA7;
            int _t1CA8 = 0;
            bool _t1CA9 = prim >007F (pcp07DD, _t1CA8);
            if _t1CA9 {
              bool _t1CAA;
              int _t1CAB = 0;
              bool _t1CAC = prim >007F (iter1359, _t1CAB);
              if _t1CAC {
                int _t1CAD = 0;
                int _t1CAE = prim %00A1 (iter1359, pcp07DD);
                _t1CAA = prim ==0082 (_t1CAD, _t1CAE);
              } else {
                _t1CAA = false;
              }
              _t1CA7 = _t1CAA;
            } else {
              _t1CA7 = false;
            }
            if _t1CA7 {
              int _t1CAF = prim /0054 (iter1359, pcp07DD);
              int _t1CB0 = 2;
              int _t1CB1 = prim %00A1 (_t1CAF, _t1CB0);
              int _t1CB2 = 2;
              int _t1CB3 = prim *0033 (_t1CB1, _t1CB2);
              int _t1CB4 = 1;
              int _t1CB5 = prim -0024 (_t1CB3, _t1CB4);
              _t14E0 = _t1CB5;
            } else {
              int _t1CB6 = 0;
              _t14E0 = _t1CB6;
            }
            int _t14E1 = 0;
            bool _t14E2 = prim <0079 (_t14E0, _t14E1);
            if _t14E2 {
              real _t14E3 = 0.e0;
              bool _t14E4 = prim >0080 (newE1470, _t14E3);
              if _t14E4 {
                bool _t14E5 = prim >007F (nn13F7, nnmax12F4);
                if _t14E5 {
                  real _t14E6;
                  real _t1C9D = pos1398[0];
                  real _t1C9E = func urnd135C (_t1C9D);
                  real _t1C9F = pos1398[1];
                  real _t1CA0 = func urnd135C (_t1C9F);
                  real _t1CA1 = prim +0017<$[]> (_t1C9E, _t1CA0);
                  real _t1CA2 = pos1398[2];
                  real _t1CA3 = func urnd135C (_t1CA2);
                  real _t1CA4 = prim +0017<$[]> (_t1CA1, _t1CA3);
                  real _t1CA5 = 0.1e1;
                  real _t1CA6 = prim fmod018A (_t1CA4, _t1CA5);
                  _t14E6 = _t1CA6;
                  int _t14E7 = prim -0024 (nn13F7, nnmax12F4);
                  real _t14E8 = (real)_t14E7;
                  real _t14E9 = prim $i2r01B6 (nn13F7);
                  real _t14EA = prim /0055 (_t14E8, _t14E9);
                  bool _t14EB = prim <007A (_t14E6, _t14EA);
                  if _t14EB {
                    die;
                  }
                }
              }
            }
          }
        }
      }
    }
    first13A6 = false;
  }
}
collection {
  int _t14F7 = 0;
  int _t14F8 = prim length0123<vec3> (ipos07DE);
  int _t14F9 = 1;
  int _t14FA = prim -0024 (_t14F8, _t14F9);
  int[] _t14FB = prim $range01C3 (_t14F7, _t14FA);
  foreach ii14FC in _t14FB {
    vec3 _t14FD = prim $dynsub01C2<vec3> (ipos07DE, ii14FC);
    real _t14FE = 0.1e1;
    new point (_t14FD, _t14FE);
  }
}
update {
  int pop14FF = prim numActive01A2 ();
  int _t1500;
  bool _t1501 = prim !=0086 (pop14FF, popLast135B);
  if _t1501 {
    _t1500 = 1;
  } else {
    _t1500 = 0;
  }
  int pc1502 = _t1500;
  real _t1503 = (real)pc1502;
  rpc135A = prim lerp0096<$[]> (_t1503, rpc135A, pchist1358);
  bool res1504= all { (P1507) => {
      bool _t1508 = P1507.found13A0;
      return _t1508;
    } (P1505, P1505)
  | P1505 in all };
  bool allfound150A = res1504;
  real _t150B = 0.1e3;
  real res150C= sum<real> { (P1510) => {
      real _t1511;
      bool _t1512 = P1510.found13A0;
      if _t1512 {
        _t1511 = 0.1e1;
      } else {
        _t1511 = 0.e0;
      }
      return _t1511;
    } (P150D, P150D)
  | P150D in all };
  int num1514 = prim numStrands01A4 ();
  real rNum1515 = (real)num1514;
  real mean1516 = prim /0055 (res150C, rNum1515);
  real percfound1517 = prim *0034 (_t150B, mean1516);
  real res1518= sum<real> { (P151B) => {
      real _t151C = P151B.closest13A4;
      return _t151C;
    } (P1519, P1519)
  | P1519 in all };
  int num151E = prim numStrands01A4 ();
  real rNum151F = (real)num151E;
  real mean1520 = prim /0055 (res1518, rNum151F);
  real meancl1521 = mean1520;
  real res1522= sum<real> { (P1528, meancl152A) => {
      real _t1529 = P1528.closest13A4;
      real _t152B = prim -0026<$[]> (_t1529, meancl152A);
      int _t152C = 2;
      real _t152D = prim ^0068 (_t152B, _t152C);
      return _t152D;
    } (P1523, P1523, meancl1521)
  | P1523 in all };
  int num152F = prim numStrands01A4 ();
  real rNum1530 = (real)num152F;
  real mean1531 = prim /0055 (res1522, rNum1530);
  real varicl1532 = mean1531;
  real _t1533 = prim sqrt0165 (varicl1532);
  real covcl1534 = prim /0055 (_t1533, meancl1521);
  real res1535= max<real> { (P1538) => {
      real _t1539 = P1538.mvmt13A3;
      return _t1539;
    } (P1536, P1536)
  | P1536 in all };
  real maxmvmt153B = res1535;
  string _t153C = "======= finished iter ";
  string _t153D = " w/ ";
  string _t153E = ")";
  string _t153F = "; %found=";
  string _t1540 = "; mean(hh)=";
  real res1541= sum<real> { (P1544) => {
      real _t1545 = P1544.hh139B;
      return _t1545;
    } (P1542, P1542)
  | P1542 in all };
  int num1547 = prim numStrands01A4 ();
  real rNum1548 = (real)num1547;
  real mean1549 = prim /0055 (res1541, rNum1548);
  string _t154A = "; mean(cl)=";
  string _t154B = "; COV(cl)=";
  string _t154C = "; max(mvmt)=";
  string _t154D = "; pc=";
  string _t154E = "; rpc=";
  string _t154F = "\n";
  print (_t153C, iter1359, _t153D, pop14FF, _t153E, _t153F, percfound1517, _t1540, mean1549, _t154A, meancl1521, _t154B, covcl1534, _t154C, maxmvmt153B, _t154D, pc1502, _t154E, rpc135A, _t154F);
  bool _t1550;
  if allfound150A {
    bool _t1551;
    bool _t1552 = prim <007A (covcl1534, geoEps07D5);
    if _t1552 {
      bool _t1553;
      bool _t1554 = prim <007A (maxmvmt153B, mvmtEps07D6);
      if _t1554 {
        _t1553 = prim <007A (rpc135A, rpcEps07D7);
      } else {
        _t1553 = false;
      }
      _t1551 = _t1553;
    } else {
      _t1551 = false;
    }
    _t1550 = _t1551;
  } else {
    _t1550 = false;
  }
  if _t1550 {
    string _t1555 = "======= Stabilizing ";
    int _t1556 = prim numActive01A2 ();
    string _t1557 = " (iter ";
    string _t1558 = ")";
    string _t1559 = "; COV(cl)=";
    string _t155A = " < ";
    string _t155B = "; max(mvmt)=";
    string _t155C = " < ";
    string _t155D = "; rpc=";
    string _t155E = " < ";
    string _t155F = "\n";
    print (_t1555, _t1556, _t1557, iter1359, _t1558, _t1559, covcl1534, _t155A, geoEps07D5, _t155B, maxmvmt153B, _t155C, mvmtEps07D6, _t155D, rpc135A, _t155E, rpcEps07D7, _t155F);
    stabilize_all;
  } else {
    string _t1560 = "======= Stabilizing ";
    int _t1561 = prim numActive01A2 ();
    string _t1562 = " (iter ";
    string _t1563 = ")";
    string _t1564 = "; COV(cl)=";
    string _t1565 = " > ";
    string _t1566 = "; max(mvmt)=";
    string _t1567 = " > ";
    string _t1568 = "; rpc=";
    string _t1569 = " > ";
    string _t156A = "\n";
    print (_t1560, _t1561, _t1562, iter1359, _t1563, _t1564, covcl1534, _t1565, geoEps07D5, _t1566, maxmvmt153B, _t1567, mvmtEps07D6, _t1568, rpc135A, _t1569, rpcEps07D7, _t156A);
  }
  int _t156B = 1;
  iter1359 = prim +0015 (iter1359, _t156B);
  popLast135B = pop14FF;
}
/* Program end */
/* Simplified Program (after after simplify fields) start */
properties: GlobalInit,StabilizeAll,GlobalReduce,StrandSets,GlobalUpdate,NewStrands,StrandCommunication,StrandsMayDie,HasInputs,HasGlobals,ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
input FemData:Mesh meshData07BA;
input FemData:Space 0space07C6_intermedateGlobal07C7;
input FemData:FemFunc 0data07C8_intermedateGlobal07C9;
input real fStrTh07CA("Feature strength threshold");
input real fMaskTh07CB("feature mask threshold") = <default>;
input real fBias07CC("Bias in feature strength computing") = <default>;
input real tipd07CD("Target inter-particle distance") = <default>;
input real mabd07CE("Min allowed birth distance (> 0.7351)") = <default>;
input real travMax07CF("Max allowed travel to or on feature") = <default>;
input int nfsMax07D0("Max allowed # feature steps ") = <default>;
input real gdeTest07D1("Scaling in sufficient decrease test") = <default>;
input real gdeBack07D2("How to scale stepsize for backtrack") = <default>;
input real gdeOppor07D3("Opportunistic stepsize increase") = <default>;
input real fsEps07D4("Conv. thresh. on feature step size");
input real geoEps07D5("Conv. thresh. on system geometry") = <default>;
input real mvmtEps07D6("Conv. thresh. on point movement") = <default>;
input real rpcEps07D7("Conv. thresh. on recent pop. changes") = <default>;
input real pcmvEps07D8("Motion limit before PC") = <default>;
input real isoval07D9("Which isosurface to sample") = <default>;
input int verb07DA("Verbosity level") = <default>;
input real sfs07DB("Scaling (<=1 for stability) on fStep") = <default>;
input real hist07DC("How history matters for convergence") = <default>;
input int pcp07DD("periodicity of population control (PC)") = <default>;
input vec3[] ipos07DE("Initial point positions");
input int fDim07DF = <default>;
constants {
  fMaskTh07CB = 0.e0;
  fBias07CC = 0.e0;
  tipd07CD = 0.1e1;
  mabd07CE = 0.75e0;
  travMax07CF = 0.1e2;
  nfsMax07D0 = 20;
  gdeTest07D1 = 0.5e0;
  gdeBack07D2 = 0.5e0;
  gdeOppor07D3 = 0.12e1;
  geoEps07D5 = 0.1e0;
  mvmtEps07D6 = 0.1e-1;
  rpcEps07D7 = 0.1e-1;
  pcmvEps07D8 = 0.3e0;
  isoval07D9 = 0.e0;
  verb07DA = 0;
  sfs07DB = 0.5e0;
  hist07DC = 0.5e0;
  pcp07DD = 5;
  fDim07DF = 2;
}
global int nnmin12ED;
global int nnmax12F4;
global real phiWellRad1341;
global real rad1342;
global real pchist1358;
global int iter1359;
global real rpc135A;
global int popLast135B;
function int[2]#6 nextCell408B4 (int faceIdx0D13, int cell0D14, Femdata: Mesh mesh0D15)
{
  int _t0D16 = -1;
  bool _t0D17 = prim ==0082 (faceIdx0D13, _t0D16);
  if _t0D17 {
    int _t0D18 = -1;
    int _t0D19 = -1;
    int[2] _t0D1A = {_t0D18, _t0D19};
    return _t0D1A;
  } else {
    int _t0D1B = 8;
    int _t0D1C = prim *0033 (cell0D14, _t0D1B);
    int _t0D1D = 2;
    int _t0D1E = prim *0033 (faceIdx0D13, _t0D1D);
    int _t0D1F = prim +0015 (_t0D1C, _t0D1E);
    int[2] _t0D20 = extractFemItemN((mesh0D15, _t0D1F),CellFaceCell(Mesh),);
    return _t0D20;
  }
}
function vec3#6 fStep128C (vec3 s128D)
{
  vec3 g128E;
  real x167D = s128D[0];
  real y167E = s128D[1];
  real z167F = s128D[2];
  real _t1680 = 0.2e1;
  real _t1681 = prim *0034 (_t1680, x167D);
  int _t1682 = 2;
  real _t1683 = prim ^0068 (z167F, _t1682);
  real _t1684 = prim *0034 (_t1681, _t1683);
  int _t1685 = 2;
  real _t1686 = prim ^0068 (x167D, _t1685);
  int _t1687 = 2;
  real _t1688 = prim ^0068 (y167E, _t1687);
  real _t1689 = prim +0017<$[]> (_t1686, _t1688);
  int _t168A = 2;
  real _t168B = prim ^0068 (z167F, _t168A);
  real _t168C = prim +0017<$[]> (_t1689, _t168B);
  real _t168D = prim cos0169 (_t168C);
  real _t168E = prim *0034 (_t1684, _t168D);
  real _t168F = 0.2e1;
  real _t1690 = prim *0034 (_t168F, y167E);
  int _t1691 = 2;
  real _t1692 = prim ^0068 (z167F, _t1691);
  real _t1693 = prim *0034 (_t1690, _t1692);
  int _t1694 = 2;
  real _t1695 = prim ^0068 (x167D, _t1694);
  int _t1696 = 2;
  real _t1697 = prim ^0068 (y167E, _t1696);
  real _t1698 = prim +0017<$[]> (_t1695, _t1697);
  int _t1699 = 2;
  real _t169A = prim ^0068 (z167F, _t1699);
  real _t169B = prim +0017<$[]> (_t1698, _t169A);
  real _t169C = prim cos0169 (_t169B);
  real _t169D = prim *0034 (_t1693, _t169C);
  real _t169E = 0.2e1;
  int _t169F = 3;
  real _t16A0 = prim ^0068 (z167F, _t169F);
  real _t16A1 = prim *0034 (_t169E, _t16A0);
  int _t16A2 = 2;
  real _t16A3 = prim ^0068 (x167D, _t16A2);
  int _t16A4 = 2;
  real _t16A5 = prim ^0068 (y167E, _t16A4);
  real _t16A6 = prim +0017<$[]> (_t16A3, _t16A5);
  int _t16A7 = 2;
  real _t16A8 = prim ^0068 (z167F, _t16A7);
  real _t16A9 = prim +0017<$[]> (_t16A6, _t16A8);
  real _t16AA = prim cos0169 (_t16A9);
  real _t16AB = prim *0034 (_t16A1, _t16AA);
  real _t16AC = 0.2e1;
  real _t16AD = prim *0034 (_t16AC, z167F);
  int _t16AE = 2;
  real _t16AF = prim ^0068 (x167D, _t16AE);
  int _t16B0 = 2;
  real _t16B1 = prim ^0068 (y167E, _t16B0);
  real _t16B2 = prim +0017<$[]> (_t16AF, _t16B1);
  int _t16B3 = 2;
  real _t16B4 = prim ^0068 (z167F, _t16B3);
  real _t16B5 = prim +0017<$[]> (_t16B2, _t16B4);
  real _t16B6 = prim sin0171 (_t16B5);
  real _t16B7 = prim *0034 (_t16AD, _t16B6);
  real _t16B8 = prim +0017<$[]> (_t16AB, _t16B7);
  vec3 g16B9 = [_t168E, _t169D, _t16B8];
  g128E = g16B9;
  tensor[3,3] H128F;
  real x1570 = s128D[0];
  real y1571 = s128D[1];
  real z1572 = s128D[2];
  int _t1573 = -4;
  real _t1574 = (real)_t1573;
  int _t1575 = 2;
  real _t1576 = prim ^0068 (x1570, _t1575);
  real _t1577 = prim *0034 (_t1574, _t1576);
  int _t1578 = 2;
  real _t1579 = prim ^0068 (z1572, _t1578);
  real _t157A = prim *0034 (_t1577, _t1579);
  int _t157B = 2;
  real _t157C = prim ^0068 (x1570, _t157B);
  int _t157D = 2;
  real _t157E = prim ^0068 (y1571, _t157D);
  real _t157F = prim +0017<$[]> (_t157C, _t157E);
  int _t1580 = 2;
  real _t1581 = prim ^0068 (z1572, _t1580);
  real _t1582 = prim +0017<$[]> (_t157F, _t1581);
  real _t1583 = prim sin0171 (_t1582);
  real _t1584 = prim *0034 (_t157A, _t1583);
  real _t1585 = 0.2e1;
  int _t1586 = 2;
  real _t1587 = prim ^0068 (z1572, _t1586);
  real _t1588 = prim *0034 (_t1585, _t1587);
  int _t1589 = 2;
  real _t158A = prim ^0068 (x1570, _t1589);
  int _t158B = 2;
  real _t158C = prim ^0068 (y1571, _t158B);
  real _t158D = prim +0017<$[]> (_t158A, _t158C);
  int _t158E = 2;
  real _t158F = prim ^0068 (z1572, _t158E);
  real _t1590 = prim +0017<$[]> (_t158D, _t158F);
  real _t1591 = prim cos0169 (_t1590);
  real _t1592 = prim *0034 (_t1588, _t1591);
  real _t1593 = prim +0017<$[]> (_t1584, _t1592);
  int _t1594 = -4;
  real _t1595 = (real)_t1594;
  real _t1596 = prim *0034 (_t1595, x1570);
  real _t1597 = prim *0034 (_t1596, y1571);
  int _t1598 = 2;
  real _t1599 = prim ^0068 (z1572, _t1598);
  real _t159A = prim *0034 (_t1597, _t1599);
  int _t159B = 2;
  real _t159C = prim ^0068 (x1570, _t159B);
  int _t159D = 2;
  real _t159E = prim ^0068 (y1571, _t159D);
  real _t159F = prim +0017<$[]> (_t159C, _t159E);
  int _t15A0 = 2;
  real _t15A1 = prim ^0068 (z1572, _t15A0);
  real _t15A2 = prim +0017<$[]> (_t159F, _t15A1);
  real _t15A3 = prim sin0171 (_t15A2);
  real _t15A4 = prim *0034 (_t159A, _t15A3);
  int _t15A5 = -4;
  real _t15A6 = (real)_t15A5;
  real _t15A7 = prim *0034 (_t15A6, x1570);
  int _t15A8 = 3;
  real _t15A9 = prim ^0068 (z1572, _t15A8);
  real _t15AA = prim *0034 (_t15A7, _t15A9);
  int _t15AB = 2;
  real _t15AC = prim ^0068 (x1570, _t15AB);
  int _t15AD = 2;
  real _t15AE = prim ^0068 (y1571, _t15AD);
  real _t15AF = prim +0017<$[]> (_t15AC, _t15AE);
  int _t15B0 = 2;
  real _t15B1 = prim ^0068 (z1572, _t15B0);
  real _t15B2 = prim +0017<$[]> (_t15AF, _t15B1);
  real _t15B3 = prim sin0171 (_t15B2);
  real _t15B4 = prim *0034 (_t15AA, _t15B3);
  real _t15B5 = 0.4e1;
  real _t15B6 = prim *0034 (_t15B5, x1570);
  real _t15B7 = prim *0034 (_t15B6, z1572);
  int _t15B8 = 2;
  real _t15B9 = prim ^0068 (x1570, _t15B8);
  int _t15BA = 2;
  real _t15BB = prim ^0068 (y1571, _t15BA);
  real _t15BC = prim +0017<$[]> (_t15B9, _t15BB);
  int _t15BD = 2;
  real _t15BE = prim ^0068 (z1572, _t15BD);
  real _t15BF = prim +0017<$[]> (_t15BC, _t15BE);
  real _t15C0 = prim cos0169 (_t15BF);
  real _t15C1 = prim *0034 (_t15B7, _t15C0);
  real _t15C2 = prim +0017<$[]> (_t15B4, _t15C1);
  vec3 _t15C3 = [_t1593, _t15A4, _t15C2];
  int _t15C4 = -4;
  real _t15C5 = (real)_t15C4;
  real _t15C6 = prim *0034 (_t15C5, x1570);
  real _t15C7 = prim *0034 (_t15C6, y1571);
  int _t15C8 = 2;
  real _t15C9 = prim ^0068 (z1572, _t15C8);
  real _t15CA = prim *0034 (_t15C7, _t15C9);
  int _t15CB = 2;
  real _t15CC = prim ^0068 (x1570, _t15CB);
  int _t15CD = 2;
  real _t15CE = prim ^0068 (y1571, _t15CD);
  real _t15CF = prim +0017<$[]> (_t15CC, _t15CE);
  int _t15D0 = 2;
  real _t15D1 = prim ^0068 (z1572, _t15D0);
  real _t15D2 = prim +0017<$[]> (_t15CF, _t15D1);
  real _t15D3 = prim sin0171 (_t15D2);
  real _t15D4 = prim *0034 (_t15CA, _t15D3);
  int _t15D5 = -4;
  real _t15D6 = (real)_t15D5;
  int _t15D7 = 2;
  real _t15D8 = prim ^0068 (y1571, _t15D7);
  real _t15D9 = prim *0034 (_t15D6, _t15D8);
  int _t15DA = 2;
  real _t15DB = prim ^0068 (z1572, _t15DA);
  real _t15DC = prim *0034 (_t15D9, _t15DB);
  int _t15DD = 2;
  real _t15DE = prim ^0068 (x1570, _t15DD);
  int _t15DF = 2;
  real _t15E0 = prim ^0068 (y1571, _t15DF);
  real _t15E1 = prim +0017<$[]> (_t15DE, _t15E0);
  int _t15E2 = 2;
  real _t15E3 = prim ^0068 (z1572, _t15E2);
  real _t15E4 = prim +0017<$[]> (_t15E1, _t15E3);
  real _t15E5 = prim sin0171 (_t15E4);
  real _t15E6 = prim *0034 (_t15DC, _t15E5);
  real _t15E7 = 0.2e1;
  int _t15E8 = 2;
  real _t15E9 = prim ^0068 (z1572, _t15E8);
  real _t15EA = prim *0034 (_t15E7, _t15E9);
  int _t15EB = 2;
  real _t15EC = prim ^0068 (x1570, _t15EB);
  int _t15ED = 2;
  real _t15EE = prim ^0068 (y1571, _t15ED);
  real _t15EF = prim +0017<$[]> (_t15EC, _t15EE);
  int _t15F0 = 2;
  real _t15F1 = prim ^0068 (z1572, _t15F0);
  real _t15F2 = prim +0017<$[]> (_t15EF, _t15F1);
  real _t15F3 = prim cos0169 (_t15F2);
  real _t15F4 = prim *0034 (_t15EA, _t15F3);
  real _t15F5 = prim +0017<$[]> (_t15E6, _t15F4);
  int _t15F6 = -4;
  real _t15F7 = (real)_t15F6;
  real _t15F8 = prim *0034 (_t15F7, y1571);
  int _t15F9 = 3;
  real _t15FA = prim ^0068 (z1572, _t15F9);
  real _t15FB = prim *0034 (_t15F8, _t15FA);
  int _t15FC = 2;
  real _t15FD = prim ^0068 (x1570, _t15FC);
  int _t15FE = 2;
  real _t15FF = prim ^0068 (y1571, _t15FE);
  real _t1600 = prim +0017<$[]> (_t15FD, _t15FF);
  int _t1601 = 2;
  real _t1602 = prim ^0068 (z1572, _t1601);
  real _t1603 = prim +0017<$[]> (_t1600, _t1602);
  real _t1604 = prim sin0171 (_t1603);
  real _t1605 = prim *0034 (_t15FB, _t1604);
  real _t1606 = 0.4e1;
  real _t1607 = prim *0034 (_t1606, y1571);
  real _t1608 = prim *0034 (_t1607, z1572);
  int _t1609 = 2;
  real _t160A = prim ^0068 (x1570, _t1609);
  int _t160B = 2;
  real _t160C = prim ^0068 (y1571, _t160B);
  real _t160D = prim +0017<$[]> (_t160A, _t160C);
  int _t160E = 2;
  real _t160F = prim ^0068 (z1572, _t160E);
  real _t1610 = prim +0017<$[]> (_t160D, _t160F);
  real _t1611 = prim cos0169 (_t1610);
  real _t1612 = prim *0034 (_t1608, _t1611);
  real _t1613 = prim +0017<$[]> (_t1605, _t1612);
  vec3 _t1614 = [_t15D4, _t15F5, _t1613];
  int _t1615 = -4;
  real _t1616 = (real)_t1615;
  real _t1617 = prim *0034 (_t1616, x1570);
  int _t1618 = 3;
  real _t1619 = prim ^0068 (z1572, _t1618);
  real _t161A = prim *0034 (_t1617, _t1619);
  int _t161B = 2;
  real _t161C = prim ^0068 (x1570, _t161B);
  int _t161D = 2;
  real _t161E = prim ^0068 (y1571, _t161D);
  real _t161F = prim +0017<$[]> (_t161C, _t161E);
  int _t1620 = 2;
  real _t1621 = prim ^0068 (z1572, _t1620);
  real _t1622 = prim +0017<$[]> (_t161F, _t1621);
  real _t1623 = prim sin0171 (_t1622);
  real _t1624 = prim *0034 (_t161A, _t1623);
  real _t1625 = 0.4e1;
  real _t1626 = prim *0034 (_t1625, x1570);
  real _t1627 = prim *0034 (_t1626, z1572);
  int _t1628 = 2;
  real _t1629 = prim ^0068 (x1570, _t1628);
  int _t162A = 2;
  real _t162B = prim ^0068 (y1571, _t162A);
  real _t162C = prim +0017<$[]> (_t1629, _t162B);
  int _t162D = 2;
  real _t162E = prim ^0068 (z1572, _t162D);
  real _t162F = prim +0017<$[]> (_t162C, _t162E);
  real _t1630 = prim cos0169 (_t162F);
  real _t1631 = prim *0034 (_t1627, _t1630);
  real _t1632 = prim +0017<$[]> (_t1624, _t1631);
  int _t1633 = -4;
  real _t1634 = (real)_t1633;
  real _t1635 = prim *0034 (_t1634, y1571);
  int _t1636 = 3;
  real _t1637 = prim ^0068 (z1572, _t1636);
  real _t1638 = prim *0034 (_t1635, _t1637);
  int _t1639 = 2;
  real _t163A = prim ^0068 (x1570, _t1639);
  int _t163B = 2;
  real _t163C = prim ^0068 (y1571, _t163B);
  real _t163D = prim +0017<$[]> (_t163A, _t163C);
  int _t163E = 2;
  real _t163F = prim ^0068 (z1572, _t163E);
  real _t1640 = prim +0017<$[]> (_t163D, _t163F);
  real _t1641 = prim sin0171 (_t1640);
  real _t1642 = prim *0034 (_t1638, _t1641);
  real _t1643 = 0.4e1;
  real _t1644 = prim *0034 (_t1643, y1571);
  real _t1645 = prim *0034 (_t1644, z1572);
  int _t1646 = 2;
  real _t1647 = prim ^0068 (x1570, _t1646);
  int _t1648 = 2;
  real _t1649 = prim ^0068 (y1571, _t1648);
  real _t164A = prim +0017<$[]> (_t1647, _t1649);
  int _t164B = 2;
  real _t164C = prim ^0068 (z1572, _t164B);
  real _t164D = prim +0017<$[]> (_t164A, _t164C);
  real _t164E = prim cos0169 (_t164D);
  real _t164F = prim *0034 (_t1645, _t164E);
  real _t1650 = prim +0017<$[]> (_t1642, _t164F);
  int _t1651 = -4;
  real _t1652 = (real)_t1651;
  int _t1653 = 4;
  real _t1654 = prim ^0068 (z1572, _t1653);
  real _t1655 = prim *0034 (_t1652, _t1654);
  int _t1656 = 2;
  real _t1657 = prim ^0068 (x1570, _t1656);
  int _t1658 = 2;
  real _t1659 = prim ^0068 (y1571, _t1658);
  real _t165A = prim +0017<$[]> (_t1657, _t1659);
  int _t165B = 2;
  real _t165C = prim ^0068 (z1572, _t165B);
  real _t165D = prim +0017<$[]> (_t165A, _t165C);
  real _t165E = prim sin0171 (_t165D);
  real _t165F = prim *0034 (_t1655, _t165E);
  real _t1660 = 0.1e2;
  int _t1661 = 2;
  real _t1662 = prim ^0068 (z1572, _t1661);
  real _t1663 = prim *0034 (_t1660, _t1662);
  int _t1664 = 2;
  real _t1665 = prim ^0068 (x1570, _t1664);
  int _t1666 = 2;
  real _t1667 = prim ^0068 (y1571, _t1666);
  real _t1668 = prim +0017<$[]> (_t1665, _t1667);
  int _t1669 = 2;
  real _t166A = prim ^0068 (z1572, _t1669);
  real _t166B = prim +0017<$[]> (_t1668, _t166A);
  real _t166C = prim cos0169 (_t166B);
  real _t166D = prim *0034 (_t1663, _t166C);
  real _t166E = prim +0017<$[]> (_t165F, _t166D);
  real _t166F = 0.2e1;
  int _t1670 = 2;
  real _t1671 = prim ^0068 (x1570, _t1670);
  int _t1672 = 2;
  real _t1673 = prim ^0068 (y1571, _t1672);
  real _t1674 = prim +0017<$[]> (_t1671, _t1673);
  int _t1675 = 2;
  real _t1676 = prim ^0068 (z1572, _t1675);
  real _t1677 = prim +0017<$[]> (_t1674, _t1676);
  real _t1678 = prim sin0171 (_t1677);
  real _t1679 = prim *0034 (_t166F, _t1678);
  real _t167A = prim +0017<$[]> (_t166E, _t1679);
  vec3 _t167B = [_t1632, _t1650, _t167A];
  tensor[3,3] hess167C = [_t15C3, _t1614, _t167B];
  H128F = hess167C;
  vec3[3] E1290 = prim evecs00A0 (H128F);
  real[3] L1291 = prim evals009F (H128F);
  real _t1292 = 0.1e1;
  int _t1293 = 2;
  real _t1294 = prim $sub01C0<real; %3> (L1291, _t1293);
  real _t1295 = prim /0055 (_t1292, _t1294);
  real _t1296 = prim unary -008B<$[]> (_t1295);
  int _t1297 = 2;
  vec3 _t1298 = prim $sub01C0<vec3; %3> (E1290, _t1297);
  vec3 _t1299 = prim *0036<$[3]> (_t1296, _t1298);
  int _t129A = 2;
  vec3 _t129B = prim $sub01C0<vec3; %3> (E1290, _t129A);
  tensor[3,3] _t129C = prim ⊗00E5<$[3]; $[3]; $[3,3]> (_t1299, _t129B);
  vec3 up129D = prim •00CE<$[3,3]; $[3]; $[3]> (_t129C, g128E);
  bool _t129E;
  real _t129F = up129D[0];
  real _t12A0 = up129D[0];
  bool _t12A1 = prim ==0084 (_t129F, _t12A0);
  bool _t12A2 = prim !00BC (_t12A1);
  if _t12A2 {
    _t129E = true;
  } else {
    bool _t12A3;
    real _t12A4 = up129D[1];
    real _t12A5 = up129D[1];
    bool _t12A6 = prim ==0084 (_t12A4, _t12A5);
    bool _t12A7 = prim !00BC (_t12A6);
    if _t12A7 {
      _t12A3 = true;
    } else {
      real _t12A8 = up129D[2];
      real _t12A9 = up129D[2];
      bool _t12AA = prim ==0084 (_t12A8, _t12A9);
      _t12A3 = prim !00BC (_t12AA);
    }
    _t129E = _t12A3;
  }
  if _t129E {
    real _t12AB = +inf;
    real _t12AC = +inf;
    real _t12AD = +inf;
    vec3 _t12AE = [_t12AB, _t12AC, _t12AD];
    return _t12AE;
  }
  return up129D;
}
function tensor[3,3]#4 fPerp12BE (vec3 s12BF)
{
  vec3 g12C0;
  real x17C7 = s12BF[0];
  real y17C8 = s12BF[1];
  real z17C9 = s12BF[2];
  real _t17CA = 0.2e1;
  real _t17CB = prim *0034 (_t17CA, x17C7);
  int _t17CC = 2;
  real _t17CD = prim ^0068 (z17C9, _t17CC);
  real _t17CE = prim *0034 (_t17CB, _t17CD);
  int _t17CF = 2;
  real _t17D0 = prim ^0068 (x17C7, _t17CF);
  int _t17D1 = 2;
  real _t17D2 = prim ^0068 (y17C8, _t17D1);
  real _t17D3 = prim +0017<$[]> (_t17D0, _t17D2);
  int _t17D4 = 2;
  real _t17D5 = prim ^0068 (z17C9, _t17D4);
  real _t17D6 = prim +0017<$[]> (_t17D3, _t17D5);
  real _t17D7 = prim cos0169 (_t17D6);
  real _t17D8 = prim *0034 (_t17CE, _t17D7);
  real _t17D9 = 0.2e1;
  real _t17DA = prim *0034 (_t17D9, y17C8);
  int _t17DB = 2;
  real _t17DC = prim ^0068 (z17C9, _t17DB);
  real _t17DD = prim *0034 (_t17DA, _t17DC);
  int _t17DE = 2;
  real _t17DF = prim ^0068 (x17C7, _t17DE);
  int _t17E0 = 2;
  real _t17E1 = prim ^0068 (y17C8, _t17E0);
  real _t17E2 = prim +0017<$[]> (_t17DF, _t17E1);
  int _t17E3 = 2;
  real _t17E4 = prim ^0068 (z17C9, _t17E3);
  real _t17E5 = prim +0017<$[]> (_t17E2, _t17E4);
  real _t17E6 = prim cos0169 (_t17E5);
  real _t17E7 = prim *0034 (_t17DD, _t17E6);
  real _t17E8 = 0.2e1;
  int _t17E9 = 3;
  real _t17EA = prim ^0068 (z17C9, _t17E9);
  real _t17EB = prim *0034 (_t17E8, _t17EA);
  int _t17EC = 2;
  real _t17ED = prim ^0068 (x17C7, _t17EC);
  int _t17EE = 2;
  real _t17EF = prim ^0068 (y17C8, _t17EE);
  real _t17F0 = prim +0017<$[]> (_t17ED, _t17EF);
  int _t17F1 = 2;
  real _t17F2 = prim ^0068 (z17C9, _t17F1);
  real _t17F3 = prim +0017<$[]> (_t17F0, _t17F2);
  real _t17F4 = prim cos0169 (_t17F3);
  real _t17F5 = prim *0034 (_t17EB, _t17F4);
  real _t17F6 = 0.2e1;
  real _t17F7 = prim *0034 (_t17F6, z17C9);
  int _t17F8 = 2;
  real _t17F9 = prim ^0068 (x17C7, _t17F8);
  int _t17FA = 2;
  real _t17FB = prim ^0068 (y17C8, _t17FA);
  real _t17FC = prim +0017<$[]> (_t17F9, _t17FB);
  int _t17FD = 2;
  real _t17FE = prim ^0068 (z17C9, _t17FD);
  real _t17FF = prim +0017<$[]> (_t17FC, _t17FE);
  real _t1800 = prim sin0171 (_t17FF);
  real _t1801 = prim *0034 (_t17F7, _t1800);
  real _t1802 = prim +0017<$[]> (_t17F5, _t1801);
  vec3 g1803 = [_t17D8, _t17E7, _t1802];
  g12C0 = g1803;
  tensor[3,3] H12C1;
  real x16BA = s12BF[0];
  real y16BB = s12BF[1];
  real z16BC = s12BF[2];
  int _t16BD = -4;
  real _t16BE = (real)_t16BD;
  int _t16BF = 2;
  real _t16C0 = prim ^0068 (x16BA, _t16BF);
  real _t16C1 = prim *0034 (_t16BE, _t16C0);
  int _t16C2 = 2;
  real _t16C3 = prim ^0068 (z16BC, _t16C2);
  real _t16C4 = prim *0034 (_t16C1, _t16C3);
  int _t16C5 = 2;
  real _t16C6 = prim ^0068 (x16BA, _t16C5);
  int _t16C7 = 2;
  real _t16C8 = prim ^0068 (y16BB, _t16C7);
  real _t16C9 = prim +0017<$[]> (_t16C6, _t16C8);
  int _t16CA = 2;
  real _t16CB = prim ^0068 (z16BC, _t16CA);
  real _t16CC = prim +0017<$[]> (_t16C9, _t16CB);
  real _t16CD = prim sin0171 (_t16CC);
  real _t16CE = prim *0034 (_t16C4, _t16CD);
  real _t16CF = 0.2e1;
  int _t16D0 = 2;
  real _t16D1 = prim ^0068 (z16BC, _t16D0);
  real _t16D2 = prim *0034 (_t16CF, _t16D1);
  int _t16D3 = 2;
  real _t16D4 = prim ^0068 (x16BA, _t16D3);
  int _t16D5 = 2;
  real _t16D6 = prim ^0068 (y16BB, _t16D5);
  real _t16D7 = prim +0017<$[]> (_t16D4, _t16D6);
  int _t16D8 = 2;
  real _t16D9 = prim ^0068 (z16BC, _t16D8);
  real _t16DA = prim +0017<$[]> (_t16D7, _t16D9);
  real _t16DB = prim cos0169 (_t16DA);
  real _t16DC = prim *0034 (_t16D2, _t16DB);
  real _t16DD = prim +0017<$[]> (_t16CE, _t16DC);
  int _t16DE = -4;
  real _t16DF = (real)_t16DE;
  real _t16E0 = prim *0034 (_t16DF, x16BA);
  real _t16E1 = prim *0034 (_t16E0, y16BB);
  int _t16E2 = 2;
  real _t16E3 = prim ^0068 (z16BC, _t16E2);
  real _t16E4 = prim *0034 (_t16E1, _t16E3);
  int _t16E5 = 2;
  real _t16E6 = prim ^0068 (x16BA, _t16E5);
  int _t16E7 = 2;
  real _t16E8 = prim ^0068 (y16BB, _t16E7);
  real _t16E9 = prim +0017<$[]> (_t16E6, _t16E8);
  int _t16EA = 2;
  real _t16EB = prim ^0068 (z16BC, _t16EA);
  real _t16EC = prim +0017<$[]> (_t16E9, _t16EB);
  real _t16ED = prim sin0171 (_t16EC);
  real _t16EE = prim *0034 (_t16E4, _t16ED);
  int _t16EF = -4;
  real _t16F0 = (real)_t16EF;
  real _t16F1 = prim *0034 (_t16F0, x16BA);
  int _t16F2 = 3;
  real _t16F3 = prim ^0068 (z16BC, _t16F2);
  real _t16F4 = prim *0034 (_t16F1, _t16F3);
  int _t16F5 = 2;
  real _t16F6 = prim ^0068 (x16BA, _t16F5);
  int _t16F7 = 2;
  real _t16F8 = prim ^0068 (y16BB, _t16F7);
  real _t16F9 = prim +0017<$[]> (_t16F6, _t16F8);
  int _t16FA = 2;
  real _t16FB = prim ^0068 (z16BC, _t16FA);
  real _t16FC = prim +0017<$[]> (_t16F9, _t16FB);
  real _t16FD = prim sin0171 (_t16FC);
  real _t16FE = prim *0034 (_t16F4, _t16FD);
  real _t16FF = 0.4e1;
  real _t1700 = prim *0034 (_t16FF, x16BA);
  real _t1701 = prim *0034 (_t1700, z16BC);
  int _t1702 = 2;
  real _t1703 = prim ^0068 (x16BA, _t1702);
  int _t1704 = 2;
  real _t1705 = prim ^0068 (y16BB, _t1704);
  real _t1706 = prim +0017<$[]> (_t1703, _t1705);
  int _t1707 = 2;
  real _t1708 = prim ^0068 (z16BC, _t1707);
  real _t1709 = prim +0017<$[]> (_t1706, _t1708);
  real _t170A = prim cos0169 (_t1709);
  real _t170B = prim *0034 (_t1701, _t170A);
  real _t170C = prim +0017<$[]> (_t16FE, _t170B);
  vec3 _t170D = [_t16DD, _t16EE, _t170C];
  int _t170E = -4;
  real _t170F = (real)_t170E;
  real _t1710 = prim *0034 (_t170F, x16BA);
  real _t1711 = prim *0034 (_t1710, y16BB);
  int _t1712 = 2;
  real _t1713 = prim ^0068 (z16BC, _t1712);
  real _t1714 = prim *0034 (_t1711, _t1713);
  int _t1715 = 2;
  real _t1716 = prim ^0068 (x16BA, _t1715);
  int _t1717 = 2;
  real _t1718 = prim ^0068 (y16BB, _t1717);
  real _t1719 = prim +0017<$[]> (_t1716, _t1718);
  int _t171A = 2;
  real _t171B = prim ^0068 (z16BC, _t171A);
  real _t171C = prim +0017<$[]> (_t1719, _t171B);
  real _t171D = prim sin0171 (_t171C);
  real _t171E = prim *0034 (_t1714, _t171D);
  int _t171F = -4;
  real _t1720 = (real)_t171F;
  int _t1721 = 2;
  real _t1722 = prim ^0068 (y16BB, _t1721);
  real _t1723 = prim *0034 (_t1720, _t1722);
  int _t1724 = 2;
  real _t1725 = prim ^0068 (z16BC, _t1724);
  real _t1726 = prim *0034 (_t1723, _t1725);
  int _t1727 = 2;
  real _t1728 = prim ^0068 (x16BA, _t1727);
  int _t1729 = 2;
  real _t172A = prim ^0068 (y16BB, _t1729);
  real _t172B = prim +0017<$[]> (_t1728, _t172A);
  int _t172C = 2;
  real _t172D = prim ^0068 (z16BC, _t172C);
  real _t172E = prim +0017<$[]> (_t172B, _t172D);
  real _t172F = prim sin0171 (_t172E);
  real _t1730 = prim *0034 (_t1726, _t172F);
  real _t1731 = 0.2e1;
  int _t1732 = 2;
  real _t1733 = prim ^0068 (z16BC, _t1732);
  real _t1734 = prim *0034 (_t1731, _t1733);
  int _t1735 = 2;
  real _t1736 = prim ^0068 (x16BA, _t1735);
  int _t1737 = 2;
  real _t1738 = prim ^0068 (y16BB, _t1737);
  real _t1739 = prim +0017<$[]> (_t1736, _t1738);
  int _t173A = 2;
  real _t173B = prim ^0068 (z16BC, _t173A);
  real _t173C = prim +0017<$[]> (_t1739, _t173B);
  real _t173D = prim cos0169 (_t173C);
  real _t173E = prim *0034 (_t1734, _t173D);
  real _t173F = prim +0017<$[]> (_t1730, _t173E);
  int _t1740 = -4;
  real _t1741 = (real)_t1740;
  real _t1742 = prim *0034 (_t1741, y16BB);
  int _t1743 = 3;
  real _t1744 = prim ^0068 (z16BC, _t1743);
  real _t1745 = prim *0034 (_t1742, _t1744);
  int _t1746 = 2;
  real _t1747 = prim ^0068 (x16BA, _t1746);
  int _t1748 = 2;
  real _t1749 = prim ^0068 (y16BB, _t1748);
  real _t174A = prim +0017<$[]> (_t1747, _t1749);
  int _t174B = 2;
  real _t174C = prim ^0068 (z16BC, _t174B);
  real _t174D = prim +0017<$[]> (_t174A, _t174C);
  real _t174E = prim sin0171 (_t174D);
  real _t174F = prim *0034 (_t1745, _t174E);
  real _t1750 = 0.4e1;
  real _t1751 = prim *0034 (_t1750, y16BB);
  real _t1752 = prim *0034 (_t1751, z16BC);
  int _t1753 = 2;
  real _t1754 = prim ^0068 (x16BA, _t1753);
  int _t1755 = 2;
  real _t1756 = prim ^0068 (y16BB, _t1755);
  real _t1757 = prim +0017<$[]> (_t1754, _t1756);
  int _t1758 = 2;
  real _t1759 = prim ^0068 (z16BC, _t1758);
  real _t175A = prim +0017<$[]> (_t1757, _t1759);
  real _t175B = prim cos0169 (_t175A);
  real _t175C = prim *0034 (_t1752, _t175B);
  real _t175D = prim +0017<$[]> (_t174F, _t175C);
  vec3 _t175E = [_t171E, _t173F, _t175D];
  int _t175F = -4;
  real _t1760 = (real)_t175F;
  real _t1761 = prim *0034 (_t1760, x16BA);
  int _t1762 = 3;
  real _t1763 = prim ^0068 (z16BC, _t1762);
  real _t1764 = prim *0034 (_t1761, _t1763);
  int _t1765 = 2;
  real _t1766 = prim ^0068 (x16BA, _t1765);
  int _t1767 = 2;
  real _t1768 = prim ^0068 (y16BB, _t1767);
  real _t1769 = prim +0017<$[]> (_t1766, _t1768);
  int _t176A = 2;
  real _t176B = prim ^0068 (z16BC, _t176A);
  real _t176C = prim +0017<$[]> (_t1769, _t176B);
  real _t176D = prim sin0171 (_t176C);
  real _t176E = prim *0034 (_t1764, _t176D);
  real _t176F = 0.4e1;
  real _t1770 = prim *0034 (_t176F, x16BA);
  real _t1771 = prim *0034 (_t1770, z16BC);
  int _t1772 = 2;
  real _t1773 = prim ^0068 (x16BA, _t1772);
  int _t1774 = 2;
  real _t1775 = prim ^0068 (y16BB, _t1774);
  real _t1776 = prim +0017<$[]> (_t1773, _t1775);
  int _t1777 = 2;
  real _t1778 = prim ^0068 (z16BC, _t1777);
  real _t1779 = prim +0017<$[]> (_t1776, _t1778);
  real _t177A = prim cos0169 (_t1779);
  real _t177B = prim *0034 (_t1771, _t177A);
  real _t177C = prim +0017<$[]> (_t176E, _t177B);
  int _t177D = -4;
  real _t177E = (real)_t177D;
  real _t177F = prim *0034 (_t177E, y16BB);
  int _t1780 = 3;
  real _t1781 = prim ^0068 (z16BC, _t1780);
  real _t1782 = prim *0034 (_t177F, _t1781);
  int _t1783 = 2;
  real _t1784 = prim ^0068 (x16BA, _t1783);
  int _t1785 = 2;
  real _t1786 = prim ^0068 (y16BB, _t1785);
  real _t1787 = prim +0017<$[]> (_t1784, _t1786);
  int _t1788 = 2;
  real _t1789 = prim ^0068 (z16BC, _t1788);
  real _t178A = prim +0017<$[]> (_t1787, _t1789);
  real _t178B = prim sin0171 (_t178A);
  real _t178C = prim *0034 (_t1782, _t178B);
  real _t178D = 0.4e1;
  real _t178E = prim *0034 (_t178D, y16BB);
  real _t178F = prim *0034 (_t178E, z16BC);
  int _t1790 = 2;
  real _t1791 = prim ^0068 (x16BA, _t1790);
  int _t1792 = 2;
  real _t1793 = prim ^0068 (y16BB, _t1792);
  real _t1794 = prim +0017<$[]> (_t1791, _t1793);
  int _t1795 = 2;
  real _t1796 = prim ^0068 (z16BC, _t1795);
  real _t1797 = prim +0017<$[]> (_t1794, _t1796);
  real _t1798 = prim cos0169 (_t1797);
  real _t1799 = prim *0034 (_t178F, _t1798);
  real _t179A = prim +0017<$[]> (_t178C, _t1799);
  int _t179B = -4;
  real _t179C = (real)_t179B;
  int _t179D = 4;
  real _t179E = prim ^0068 (z16BC, _t179D);
  real _t179F = prim *0034 (_t179C, _t179E);
  int _t17A0 = 2;
  real _t17A1 = prim ^0068 (x16BA, _t17A0);
  int _t17A2 = 2;
  real _t17A3 = prim ^0068 (y16BB, _t17A2);
  real _t17A4 = prim +0017<$[]> (_t17A1, _t17A3);
  int _t17A5 = 2;
  real _t17A6 = prim ^0068 (z16BC, _t17A5);
  real _t17A7 = prim +0017<$[]> (_t17A4, _t17A6);
  real _t17A8 = prim sin0171 (_t17A7);
  real _t17A9 = prim *0034 (_t179F, _t17A8);
  real _t17AA = 0.1e2;
  int _t17AB = 2;
  real _t17AC = prim ^0068 (z16BC, _t17AB);
  real _t17AD = prim *0034 (_t17AA, _t17AC);
  int _t17AE = 2;
  real _t17AF = prim ^0068 (x16BA, _t17AE);
  int _t17B0 = 2;
  real _t17B1 = prim ^0068 (y16BB, _t17B0);
  real _t17B2 = prim +0017<$[]> (_t17AF, _t17B1);
  int _t17B3 = 2;
  real _t17B4 = prim ^0068 (z16BC, _t17B3);
  real _t17B5 = prim +0017<$[]> (_t17B2, _t17B4);
  real _t17B6 = prim cos0169 (_t17B5);
  real _t17B7 = prim *0034 (_t17AD, _t17B6);
  real _t17B8 = prim +0017<$[]> (_t17A9, _t17B7);
  real _t17B9 = 0.2e1;
  int _t17BA = 2;
  real _t17BB = prim ^0068 (x16BA, _t17BA);
  int _t17BC = 2;
  real _t17BD = prim ^0068 (y16BB, _t17BC);
  real _t17BE = prim +0017<$[]> (_t17BB, _t17BD);
  int _t17BF = 2;
  real _t17C0 = prim ^0068 (z16BC, _t17BF);
  real _t17C1 = prim +0017<$[]> (_t17BE, _t17C0);
  real _t17C2 = prim sin0171 (_t17C1);
  real _t17C3 = prim *0034 (_t17B9, _t17C2);
  real _t17C4 = prim +0017<$[]> (_t17B8, _t17C3);
  vec3 _t17C5 = [_t177C, _t179A, _t17C4];
  tensor[3,3] hess17C6 = [_t170D, _t175E, _t17C5];
  H12C1 = hess17C6;
  vec3[3] _t12C2 = prim evecs00A0 (H12C1);
  int _t12C3 = 2;
  vec3 E212C4 = prim $sub01C0<vec3; %3> (_t12C2, _t12C3);
  tensor[3,3] _t12C5 = prim $id01B9<%3> ();
  tensor[3,3] _t12C6 = prim ⊗00E5<$[3]; $[3]; $[3,3]> (E212C4, E212C4);
  tensor[3,3] m12C7 = prim -0026<$[3,3]> (_t12C5, _t12C6);
  real t12C8 = prim :00FC<$[3,3]; $[3,3]; $[]> (m12C7, m12C7);
  bool _t12C9 = prim ==0084 (t12C8, t12C8);
  bool _t12CA = prim !00BC (_t12C9);
  if _t12CA {
    tensor[3,3] _t12CB = prim $zero01BB<$[3,3]> ();
    return _t12CB;
  }
  return m12C7;
}
function real#12 urnd135C (real x135D)
{
  real _t135E = 0.e0;
  bool _t135F = prim ==0084 (x135D, _t135E);
  if _t135F {
    real _t1360 = 0.e0;
    return _t1360;
  }
  real _t1361 = prim |()|00B5<$[]> (x135D);
  real l21362 = prim log2018D (_t1361);
  real _t1363 = 0.2e1;
  real _t1364 = prim floor0189 (l21362);
  real _t1365 = prim -0026<$[]> (l21362, _t1364);
  real _t1366 = 0.1e1;
  real _t1367 = prim -0026<$[]> (_t1365, _t1366);
  real frxp1368 = prim ^0069 (_t1363, _t1367);
  real _t1369 = 0.2e1;
  int _t136A = 20;
  real _t136B = prim ^0068 (_t1369, _t136A);
  int _t136C = 2;
  int _t136D = prim *0033 (_t136C, iter1359);
  real _t136E = (real)_t136D;
  real _t136F = prim +0017<$[]> (_t136B, _t136E);
  real _t1370 = prim *0034 (_t136F, frxp1368);
  real _t1371 = 0.1e1;
  real _t1372 = prim fmod018A (_t1370, _t1371);
  return _t1372;
}
globalInit {
  int _t07BE = 0;
  int _t07BC = 1;
  int _t07C0 = extractFemItem(NumCell(Mesh), int, meshData07BA);
  int _t07BF = prim -0024 (_t07C0, _t07BC);
  int[] _t07C3 = prim $range01C3 (_t07BE, _t07BF);
  Femdata: MeshCell[] _t07C4 = {};
  foreach _t07C2 in _t07C3 {
    Femdata: MeshCell _t07C5 = loadFem(MeshCell, meshData07BA, _t07C2);
    _t07C4 = prim @0010<Femdata: MeshCell> (_t07C4, _t07C5);
  }
  int _t12E7;
  int _t12E8 = 2;
  bool _t12E9 = prim ==0082 (_t12E8, fDim07DF);
  if _t12E9 {
    _t12E7 = 6;
  } else {
    int _t12EA;
    int _t12EB = 1;
    bool _t12EC = prim ==0082 (_t12EB, fDim07DF);
    if _t12EC {
      _t12EA = 2;
    } else {
      _t12EA = 0;
    }
    _t12E7 = _t12EA;
  }
  nnmin12ED = _t12E7;
  int _t12EE;
  int _t12EF = 2;
  bool _t12F0 = prim ==0082 (_t12EF, fDim07DF);
  if _t12F0 {
    _t12EE = 8;
  } else {
    int _t12F1;
    int _t12F2 = 1;
    bool _t12F3 = prim ==0082 (_t12F2, fDim07DF);
    if _t12F3 {
      _t12F1 = 3;
    } else {
      _t12F1 = 0;
    }
    _t12EE = _t12F1;
  }
  nnmax12F4 = _t12EE;
  real _t133F = 0.2e1;
  real _t1340 = 0.3e1;
  phiWellRad1341 = prim /0055 (_t133F, _t1340);
  rad1342 = prim /0055 (tipd07CD, phiWellRad1341);
  real _t1353 = 0.1e1;
  int _t1354 = 2;
  int _t1355 = prim *0033 (_t1354, pcp07DD);
  real _t1356 = (real)_t1355;
  real _t1357 = prim /0055 (_t1353, _t1356);
  pchist1358 = prim ^0069 (hist07DC, _t1357);
  iter1359 = 0;
  rpc135A = 0.1e1;
  popLast135B = -1;
}
strand point (vec3 p01396, real hh01397) in 3D {
  output vec3 pos1398;
  output vec3 _pos1399;
  real ID139A;
  real hh139B;
  vec3 step139C;
  bool found13A0;
  int nfs13A1;
  real trav13A2;
  real mvmt13A3;
  real closest13A4;
  int born13A5;
  bool first13A6;
  {
    pos1398 = p01396;
    _pos1399 = pos1398;
    real ID1B0E;
    real _t1B0F = 0.1e7;
    real _t1B10;
    real _t1B11 = p01396[0];
    real _t1B12 = func urnd135C (_t1B11);
    real _t1B13 = p01396[1];
    real _t1B14 = func urnd135C (_t1B13);
    real _t1B15 = prim +0017<$[]> (_t1B12, _t1B14);
    real _t1B16 = p01396[2];
    real _t1B17 = func urnd135C (_t1B16);
    real _t1B18 = prim +0017<$[]> (_t1B15, _t1B17);
    real _t1B19 = 0.1e1;
    real _t1B1A = prim fmod018A (_t1B18, _t1B19);
    _t1B10 = _t1B1A;
    real _t1B1B = prim *0034 (_t1B0F, _t1B10);
    real _t1B1C = prim floor0189 (_t1B1B);
    ID1B0E = _t1B1C;
    ID139A = ID1B0E;
    hh139B = hh01397;
    real _t139D = 0.e0;
    real _t139E = 0.e0;
    real _t139F = 0.e0;
    step139C = [_t139D, _t139E, _t139F];
    found13A0 = false;
    nfs13A1 = 0;
    trav13A2 = 0.e0;
    mvmt13A3 = 0.1e1;
    closest13A4 = rad1342;
    born13A5 = 0;
    first13A6 = true;
  }
  update
  {
    bool vv13A7 = false;
    if first13A6 {
      bool _t13A8;
      bool _t13A9;
      int _t13AA = 0;
      bool _t13AB = prim >007F (verb07DA, _t13AA);
      if _t13AB {
        _t13A9 = vv13A7;
      } else {
        _t13A9 = false;
      }
      if _t13A9 {
        _t13A8 = true;
      } else {
        int _t13AC = 1;
        _t13A8 = prim >007F (verb07DA, _t13AC);
      }
      if _t13A8 {
        string _t13AD = "(i#";
        string _t13AE = " @ ";
        string _t13AF = "): ";
        print (ID139A, _t13AD, iter1359, _t13AE, pos1398, _t13AF);
        string _t13B0 = " HELLO!\n";
        print (_t13B0);
      }
    }
    bool _t13B1;
    bool _t2053;
    bool _t2054;
    real _t2055 = 0.e0;
    real _t2056 = 0.e0;
    real _t2057 = 0.e0;
    vec3 _t2058 = [_t2055, _t2056, _t2057];
    vec3 mid2059 = prim -0026<$[3]> (pos1398, _t2058);
    bool _t2068;
    real _t2069 = prim |()|00B5<$[3]> (mid2059);
    real _t206A = 0.4e1;
    bool _t206B = prim <007A (_t2069, _t206A);
    if _t206B {
      real _t206C = prim |()|00B5<$[3]> (mid2059);
      real _t206D = 0.3e1;
      _t2068 = prim >0080 (_t206C, _t206D);
    } else {
      _t2068 = false;
    }
    _t2054 = _t2068;
    if _t2054 {
      bool _t206E;
      real _t206F;
      vec3 g2070;
      real x2071 = pos1398[0];
      real y2072 = pos1398[1];
      real z2073 = pos1398[2];
      real _t2074 = 0.2e1;
      real _t2075 = prim *0034 (_t2074, x2071);
      int _t2076 = 2;
      real _t2077 = prim ^0068 (z2073, _t2076);
      real _t2078 = prim *0034 (_t2075, _t2077);
      int _t2079 = 2;
      real _t207A = prim ^0068 (x2071, _t2079);
      int _t207B = 2;
      real _t207C = prim ^0068 (y2072, _t207B);
      real _t207D = prim +0017<$[]> (_t207A, _t207C);
      int _t207E = 2;
      real _t207F = prim ^0068 (z2073, _t207E);
      real _t2080 = prim +0017<$[]> (_t207D, _t207F);
      real _t2081 = prim cos0169 (_t2080);
      real _t2082 = prim *0034 (_t2078, _t2081);
      real _t2083 = 0.2e1;
      real _t2084 = prim *0034 (_t2083, y2072);
      int _t2085 = 2;
      real _t2086 = prim ^0068 (z2073, _t2085);
      real _t2087 = prim *0034 (_t2084, _t2086);
      int _t2088 = 2;
      real _t2089 = prim ^0068 (x2071, _t2088);
      int _t208A = 2;
      real _t208B = prim ^0068 (y2072, _t208A);
      real _t208C = prim +0017<$[]> (_t2089, _t208B);
      int _t208D = 2;
      real _t208E = prim ^0068 (z2073, _t208D);
      real _t208F = prim +0017<$[]> (_t208C, _t208E);
      real _t2090 = prim cos0169 (_t208F);
      real _t2091 = prim *0034 (_t2087, _t2090);
      real _t2092 = 0.2e1;
      int _t2093 = 3;
      real _t2094 = prim ^0068 (z2073, _t2093);
      real _t2095 = prim *0034 (_t2092, _t2094);
      int _t2096 = 2;
      real _t2097 = prim ^0068 (x2071, _t2096);
      int _t2098 = 2;
      real _t2099 = prim ^0068 (y2072, _t2098);
      real _t209A = prim +0017<$[]> (_t2097, _t2099);
      int _t209B = 2;
      real _t209C = prim ^0068 (z2073, _t209B);
      real _t209D = prim +0017<$[]> (_t209A, _t209C);
      real _t209E = prim cos0169 (_t209D);
      real _t209F = prim *0034 (_t2095, _t209E);
      real _t20A0 = 0.2e1;
      real _t20A1 = prim *0034 (_t20A0, z2073);
      int _t20A2 = 2;
      real _t20A3 = prim ^0068 (x2071, _t20A2);
      int _t20A4 = 2;
      real _t20A5 = prim ^0068 (y2072, _t20A4);
      real _t20A6 = prim +0017<$[]> (_t20A3, _t20A5);
      int _t20A7 = 2;
      real _t20A8 = prim ^0068 (z2073, _t20A7);
      real _t20A9 = prim +0017<$[]> (_t20A6, _t20A8);
      real _t20AA = prim sin0171 (_t20A9);
      real _t20AB = prim *0034 (_t20A1, _t20AA);
      real _t20AC = prim +0017<$[]> (_t209F, _t20AB);
      vec3 g20AD = [_t2082, _t2091, _t20AC];
      g2070 = g20AD;
      tensor[3,3] H20AE;
      real x20AF = pos1398[0];
      real y20B0 = pos1398[1];
      real z20B1 = pos1398[2];
      int _t20B2 = -4;
      real _t20B3 = (real)_t20B2;
      int _t20B4 = 2;
      real _t20B5 = prim ^0068 (x20AF, _t20B4);
      real _t20B6 = prim *0034 (_t20B3, _t20B5);
      int _t20B7 = 2;
      real _t20B8 = prim ^0068 (z20B1, _t20B7);
      real _t20B9 = prim *0034 (_t20B6, _t20B8);
      int _t20BA = 2;
      real _t20BB = prim ^0068 (x20AF, _t20BA);
      int _t20BC = 2;
      real _t20BD = prim ^0068 (y20B0, _t20BC);
      real _t20BE = prim +0017<$[]> (_t20BB, _t20BD);
      int _t20BF = 2;
      real _t20C0 = prim ^0068 (z20B1, _t20BF);
      real _t20C1 = prim +0017<$[]> (_t20BE, _t20C0);
      real _t20C2 = prim sin0171 (_t20C1);
      real _t20C3 = prim *0034 (_t20B9, _t20C2);
      real _t20C4 = 0.2e1;
      int _t20C5 = 2;
      real _t20C6 = prim ^0068 (z20B1, _t20C5);
      real _t20C7 = prim *0034 (_t20C4, _t20C6);
      int _t20C8 = 2;
      real _t20C9 = prim ^0068 (x20AF, _t20C8);
      int _t20CA = 2;
      real _t20CB = prim ^0068 (y20B0, _t20CA);
      real _t20CC = prim +0017<$[]> (_t20C9, _t20CB);
      int _t20CD = 2;
      real _t20CE = prim ^0068 (z20B1, _t20CD);
      real _t20CF = prim +0017<$[]> (_t20CC, _t20CE);
      real _t20D0 = prim cos0169 (_t20CF);
      real _t20D1 = prim *0034 (_t20C7, _t20D0);
      real _t20D2 = prim +0017<$[]> (_t20C3, _t20D1);
      int _t20D3 = -4;
      real _t20D4 = (real)_t20D3;
      real _t20D5 = prim *0034 (_t20D4, x20AF);
      real _t20D6 = prim *0034 (_t20D5, y20B0);
      int _t20D7 = 2;
      real _t20D8 = prim ^0068 (z20B1, _t20D7);
      real _t20D9 = prim *0034 (_t20D6, _t20D8);
      int _t20DA = 2;
      real _t20DB = prim ^0068 (x20AF, _t20DA);
      int _t20DC = 2;
      real _t20DD = prim ^0068 (y20B0, _t20DC);
      real _t20DE = prim +0017<$[]> (_t20DB, _t20DD);
      int _t20DF = 2;
      real _t20E0 = prim ^0068 (z20B1, _t20DF);
      real _t20E1 = prim +0017<$[]> (_t20DE, _t20E0);
      real _t20E2 = prim sin0171 (_t20E1);
      real _t20E3 = prim *0034 (_t20D9, _t20E2);
      int _t20E4 = -4;
      real _t20E5 = (real)_t20E4;
      real _t20E6 = prim *0034 (_t20E5, x20AF);
      int _t20E7 = 3;
      real _t20E8 = prim ^0068 (z20B1, _t20E7);
      real _t20E9 = prim *0034 (_t20E6, _t20E8);
      int _t20EA = 2;
      real _t20EB = prim ^0068 (x20AF, _t20EA);
      int _t20EC = 2;
      real _t20ED = prim ^0068 (y20B0, _t20EC);
      real _t20EE = prim +0017<$[]> (_t20EB, _t20ED);
      int _t20EF = 2;
      real _t20F0 = prim ^0068 (z20B1, _t20EF);
      real _t20F1 = prim +0017<$[]> (_t20EE, _t20F0);
      real _t20F2 = prim sin0171 (_t20F1);
      real _t20F3 = prim *0034 (_t20E9, _t20F2);
      real _t20F4 = 0.4e1;
      real _t20F5 = prim *0034 (_t20F4, x20AF);
      real _t20F6 = prim *0034 (_t20F5, z20B1);
      int _t20F7 = 2;
      real _t20F8 = prim ^0068 (x20AF, _t20F7);
      int _t20F9 = 2;
      real _t20FA = prim ^0068 (y20B0, _t20F9);
      real _t20FB = prim +0017<$[]> (_t20F8, _t20FA);
      int _t20FC = 2;
      real _t20FD = prim ^0068 (z20B1, _t20FC);
      real _t20FE = prim +0017<$[]> (_t20FB, _t20FD);
      real _t20FF = prim cos0169 (_t20FE);
      real _t2100 = prim *0034 (_t20F6, _t20FF);
      real _t2101 = prim +0017<$[]> (_t20F3, _t2100);
      vec3 _t2102 = [_t20D2, _t20E3, _t2101];
      int _t2103 = -4;
      real _t2104 = (real)_t2103;
      real _t2105 = prim *0034 (_t2104, x20AF);
      real _t2106 = prim *0034 (_t2105, y20B0);
      int _t2107 = 2;
      real _t2108 = prim ^0068 (z20B1, _t2107);
      real _t2109 = prim *0034 (_t2106, _t2108);
      int _t210A = 2;
      real _t210B = prim ^0068 (x20AF, _t210A);
      int _t210C = 2;
      real _t210D = prim ^0068 (y20B0, _t210C);
      real _t210E = prim +0017<$[]> (_t210B, _t210D);
      int _t210F = 2;
      real _t2110 = prim ^0068 (z20B1, _t210F);
      real _t2111 = prim +0017<$[]> (_t210E, _t2110);
      real _t2112 = prim sin0171 (_t2111);
      real _t2113 = prim *0034 (_t2109, _t2112);
      int _t2114 = -4;
      real _t2115 = (real)_t2114;
      int _t2116 = 2;
      real _t2117 = prim ^0068 (y20B0, _t2116);
      real _t2118 = prim *0034 (_t2115, _t2117);
      int _t2119 = 2;
      real _t211A = prim ^0068 (z20B1, _t2119);
      real _t211B = prim *0034 (_t2118, _t211A);
      int _t211C = 2;
      real _t211D = prim ^0068 (x20AF, _t211C);
      int _t211E = 2;
      real _t211F = prim ^0068 (y20B0, _t211E);
      real _t2120 = prim +0017<$[]> (_t211D, _t211F);
      int _t2121 = 2;
      real _t2122 = prim ^0068 (z20B1, _t2121);
      real _t2123 = prim +0017<$[]> (_t2120, _t2122);
      real _t2124 = prim sin0171 (_t2123);
      real _t2125 = prim *0034 (_t211B, _t2124);
      real _t2126 = 0.2e1;
      int _t2127 = 2;
      real _t2128 = prim ^0068 (z20B1, _t2127);
      real _t2129 = prim *0034 (_t2126, _t2128);
      int _t212A = 2;
      real _t212B = prim ^0068 (x20AF, _t212A);
      int _t212C = 2;
      real _t212D = prim ^0068 (y20B0, _t212C);
      real _t212E = prim +0017<$[]> (_t212B, _t212D);
      int _t212F = 2;
      real _t2130 = prim ^0068 (z20B1, _t212F);
      real _t2131 = prim +0017<$[]> (_t212E, _t2130);
      real _t2132 = prim cos0169 (_t2131);
      real _t2133 = prim *0034 (_t2129, _t2132);
      real _t2134 = prim +0017<$[]> (_t2125, _t2133);
      int _t2135 = -4;
      real _t2136 = (real)_t2135;
      real _t2137 = prim *0034 (_t2136, y20B0);
      int _t2138 = 3;
      real _t2139 = prim ^0068 (z20B1, _t2138);
      real _t213A = prim *0034 (_t2137, _t2139);
      int _t213B = 2;
      real _t213C = prim ^0068 (x20AF, _t213B);
      int _t213D = 2;
      real _t213E = prim ^0068 (y20B0, _t213D);
      real _t213F = prim +0017<$[]> (_t213C, _t213E);
      int _t2140 = 2;
      real _t2141 = prim ^0068 (z20B1, _t2140);
      real _t2142 = prim +0017<$[]> (_t213F, _t2141);
      real _t2143 = prim sin0171 (_t2142);
      real _t2144 = prim *0034 (_t213A, _t2143);
      real _t2145 = 0.4e1;
      real _t2146 = prim *0034 (_t2145, y20B0);
      real _t2147 = prim *0034 (_t2146, z20B1);
      int _t2148 = 2;
      real _t2149 = prim ^0068 (x20AF, _t2148);
      int _t214A = 2;
      real _t214B = prim ^0068 (y20B0, _t214A);
      real _t214C = prim +0017<$[]> (_t2149, _t214B);
      int _t214D = 2;
      real _t214E = prim ^0068 (z20B1, _t214D);
      real _t214F = prim +0017<$[]> (_t214C, _t214E);
      real _t2150 = prim cos0169 (_t214F);
      real _t2151 = prim *0034 (_t2147, _t2150);
      real _t2152 = prim +0017<$[]> (_t2144, _t2151);
      vec3 _t2153 = [_t2113, _t2134, _t2152];
      int _t2154 = -4;
      real _t2155 = (real)_t2154;
      real _t2156 = prim *0034 (_t2155, x20AF);
      int _t2157 = 3;
      real _t2158 = prim ^0068 (z20B1, _t2157);
      real _t2159 = prim *0034 (_t2156, _t2158);
      int _t215A = 2;
      real _t215B = prim ^0068 (x20AF, _t215A);
      int _t215C = 2;
      real _t215D = prim ^0068 (y20B0, _t215C);
      real _t215E = prim +0017<$[]> (_t215B, _t215D);
      int _t215F = 2;
      real _t2160 = prim ^0068 (z20B1, _t215F);
      real _t2161 = prim +0017<$[]> (_t215E, _t2160);
      real _t2162 = prim sin0171 (_t2161);
      real _t2163 = prim *0034 (_t2159, _t2162);
      real _t2164 = 0.4e1;
      real _t2165 = prim *0034 (_t2164, x20AF);
      real _t2166 = prim *0034 (_t2165, z20B1);
      int _t2167 = 2;
      real _t2168 = prim ^0068 (x20AF, _t2167);
      int _t2169 = 2;
      real _t216A = prim ^0068 (y20B0, _t2169);
      real _t216B = prim +0017<$[]> (_t2168, _t216A);
      int _t216C = 2;
      real _t216D = prim ^0068 (z20B1, _t216C);
      real _t216E = prim +0017<$[]> (_t216B, _t216D);
      real _t216F = prim cos0169 (_t216E);
      real _t2170 = prim *0034 (_t2166, _t216F);
      real _t2171 = prim +0017<$[]> (_t2163, _t2170);
      int _t2172 = -4;
      real _t2173 = (real)_t2172;
      real _t2174 = prim *0034 (_t2173, y20B0);
      int _t2175 = 3;
      real _t2176 = prim ^0068 (z20B1, _t2175);
      real _t2177 = prim *0034 (_t2174, _t2176);
      int _t2178 = 2;
      real _t2179 = prim ^0068 (x20AF, _t2178);
      int _t217A = 2;
      real _t217B = prim ^0068 (y20B0, _t217A);
      real _t217C = prim +0017<$[]> (_t2179, _t217B);
      int _t217D = 2;
      real _t217E = prim ^0068 (z20B1, _t217D);
      real _t217F = prim +0017<$[]> (_t217C, _t217E);
      real _t2180 = prim sin0171 (_t217F);
      real _t2181 = prim *0034 (_t2177, _t2180);
      real _t2182 = 0.4e1;
      real _t2183 = prim *0034 (_t2182, y20B0);
      real _t2184 = prim *0034 (_t2183, z20B1);
      int _t2185 = 2;
      real _t2186 = prim ^0068 (x20AF, _t2185);
      int _t2187 = 2;
      real _t2188 = prim ^0068 (y20B0, _t2187);
      real _t2189 = prim +0017<$[]> (_t2186, _t2188);
      int _t218A = 2;
      real _t218B = prim ^0068 (z20B1, _t218A);
      real _t218C = prim +0017<$[]> (_t2189, _t218B);
      real _t218D = prim cos0169 (_t218C);
      real _t218E = prim *0034 (_t2184, _t218D);
      real _t218F = prim +0017<$[]> (_t2181, _t218E);
      int _t2190 = -4;
      real _t2191 = (real)_t2190;
      int _t2192 = 4;
      real _t2193 = prim ^0068 (z20B1, _t2192);
      real _t2194 = prim *0034 (_t2191, _t2193);
      int _t2195 = 2;
      real _t2196 = prim ^0068 (x20AF, _t2195);
      int _t2197 = 2;
      real _t2198 = prim ^0068 (y20B0, _t2197);
      real _t2199 = prim +0017<$[]> (_t2196, _t2198);
      int _t219A = 2;
      real _t219B = prim ^0068 (z20B1, _t219A);
      real _t219C = prim +0017<$[]> (_t2199, _t219B);
      real _t219D = prim sin0171 (_t219C);
      real _t219E = prim *0034 (_t2194, _t219D);
      real _t219F = 0.1e2;
      int _t21A0 = 2;
      real _t21A1 = prim ^0068 (z20B1, _t21A0);
      real _t21A2 = prim *0034 (_t219F, _t21A1);
      int _t21A3 = 2;
      real _t21A4 = prim ^0068 (x20AF, _t21A3);
      int _t21A5 = 2;
      real _t21A6 = prim ^0068 (y20B0, _t21A5);
      real _t21A7 = prim +0017<$[]> (_t21A4, _t21A6);
      int _t21A8 = 2;
      real _t21A9 = prim ^0068 (z20B1, _t21A8);
      real _t21AA = prim +0017<$[]> (_t21A7, _t21A9);
      real _t21AB = prim cos0169 (_t21AA);
      real _t21AC = prim *0034 (_t21A2, _t21AB);
      real _t21AD = prim +0017<$[]> (_t219E, _t21AC);
      real _t21AE = 0.2e1;
      int _t21AF = 2;
      real _t21B0 = prim ^0068 (x20AF, _t21AF);
      int _t21B1 = 2;
      real _t21B2 = prim ^0068 (y20B0, _t21B1);
      real _t21B3 = prim +0017<$[]> (_t21B0, _t21B2);
      int _t21B4 = 2;
      real _t21B5 = prim ^0068 (z20B1, _t21B4);
      real _t21B6 = prim +0017<$[]> (_t21B3, _t21B5);
      real _t21B7 = prim sin0171 (_t21B6);
      real _t21B8 = prim *0034 (_t21AE, _t21B7);
      real _t21B9 = prim +0017<$[]> (_t21AD, _t21B8);
      vec3 _t21BA = [_t2171, _t218F, _t21B9];
      tensor[3,3] hess21BB = [_t2102, _t2153, _t21BA];
      H20AE = hess21BB;
      real[3] _t21BC = prim evals009F (H20AE);
      int _t21BD = 2;
      real _t21BE = prim $sub01C0<real; %3> (_t21BC, _t21BD);
      real _t21BF = prim unary -008B<$[]> (_t21BE);
      real _t21C0 = prim |()|00B5<$[3]> (g2070);
      real _t21C1 = prim +0017<$[]> (fBias07CC, _t21C0);
      real str21C2 = prim /0055 (_t21BF, _t21C1);
      _t206F = str21C2;
      bool _t21C3 = prim >0080 (_t206F, fStrTh07CA);
      if _t21C3 {
        bool _t21C4;
        real _t21C5;
        real _t21C6 = 0.e0;
        _t21C5 = _t21C6;
        bool _t21C7 = prim >=007E (_t21C5, fMaskTh07CB);
        if _t21C7 {
          bool _t21C8 = true;
          _t21C4 = _t21C8;
        } else {
          _t21C4 = false;
        }
        _t206E = _t21C4;
      } else {
        _t206E = false;
      }
      _t2053 = _t206E;
    } else {
      _t2053 = false;
    }
    _t13B1 = _t2053;
    bool _t13B2 = prim !00BC (_t13B1);
    if _t13B2 {
      bool _t13B3;
      bool _t13B4;
      int _t13B5 = 0;
      bool _t13B6 = prim >007F (verb07DA, _t13B5);
      if _t13B6 {
        _t13B4 = vv13A7;
      } else {
        _t13B4 = false;
      }
      if _t13B4 {
        _t13B3 = true;
      } else {
        int _t13B7 = 1;
        _t13B3 = prim >007F (verb07DA, _t13B7);
      }
      if _t13B3 {
        string _t13B8 = "(i#";
        string _t13B9 = " @ ";
        string _t13BA = "): ";
        print (ID139A, _t13B8, iter1359, _t13B9, pos1398, _t13BA);
        string _t13BB = "!inside=";
        bool _t13BC;
        real _t203A = 0.e0;
        real _t203B = 0.e0;
        real _t203C = 0.e0;
        vec3 _t203D = [_t203A, _t203B, _t203C];
        vec3 mid203E = prim -0026<$[3]> (pos1398, _t203D);
        bool _t204D;
        real _t204E = prim |()|00B5<$[3]> (mid203E);
        real _t204F = 0.4e1;
        bool _t2050 = prim <007A (_t204E, _t204F);
        if _t2050 {
          real _t2051 = prim |()|00B5<$[3]> (mid203E);
          real _t2052 = 0.3e1;
          _t204D = prim >0080 (_t2051, _t2052);
        } else {
          _t204D = false;
        }
        _t13BC = _t204D;
        string _t13BD = " || fStrength=";
        real _t13BE;
        vec3 g1EE7;
        real x1EE8 = pos1398[0];
        real y1EE9 = pos1398[1];
        real z1EEA = pos1398[2];
        real _t1EEB = 0.2e1;
        real _t1EEC = prim *0034 (_t1EEB, x1EE8);
        int _t1EED = 2;
        real _t1EEE = prim ^0068 (z1EEA, _t1EED);
        real _t1EEF = prim *0034 (_t1EEC, _t1EEE);
        int _t1EF0 = 2;
        real _t1EF1 = prim ^0068 (x1EE8, _t1EF0);
        int _t1EF2 = 2;
        real _t1EF3 = prim ^0068 (y1EE9, _t1EF2);
        real _t1EF4 = prim +0017<$[]> (_t1EF1, _t1EF3);
        int _t1EF5 = 2;
        real _t1EF6 = prim ^0068 (z1EEA, _t1EF5);
        real _t1EF7 = prim +0017<$[]> (_t1EF4, _t1EF6);
        real _t1EF8 = prim cos0169 (_t1EF7);
        real _t1EF9 = prim *0034 (_t1EEF, _t1EF8);
        real _t1EFA = 0.2e1;
        real _t1EFB = prim *0034 (_t1EFA, y1EE9);
        int _t1EFC = 2;
        real _t1EFD = prim ^0068 (z1EEA, _t1EFC);
        real _t1EFE = prim *0034 (_t1EFB, _t1EFD);
        int _t1EFF = 2;
        real _t1F00 = prim ^0068 (x1EE8, _t1EFF);
        int _t1F01 = 2;
        real _t1F02 = prim ^0068 (y1EE9, _t1F01);
        real _t1F03 = prim +0017<$[]> (_t1F00, _t1F02);
        int _t1F04 = 2;
        real _t1F05 = prim ^0068 (z1EEA, _t1F04);
        real _t1F06 = prim +0017<$[]> (_t1F03, _t1F05);
        real _t1F07 = prim cos0169 (_t1F06);
        real _t1F08 = prim *0034 (_t1EFE, _t1F07);
        real _t1F09 = 0.2e1;
        int _t1F0A = 3;
        real _t1F0B = prim ^0068 (z1EEA, _t1F0A);
        real _t1F0C = prim *0034 (_t1F09, _t1F0B);
        int _t1F0D = 2;
        real _t1F0E = prim ^0068 (x1EE8, _t1F0D);
        int _t1F0F = 2;
        real _t1F10 = prim ^0068 (y1EE9, _t1F0F);
        real _t1F11 = prim +0017<$[]> (_t1F0E, _t1F10);
        int _t1F12 = 2;
        real _t1F13 = prim ^0068 (z1EEA, _t1F12);
        real _t1F14 = prim +0017<$[]> (_t1F11, _t1F13);
        real _t1F15 = prim cos0169 (_t1F14);
        real _t1F16 = prim *0034 (_t1F0C, _t1F15);
        real _t1F17 = 0.2e1;
        real _t1F18 = prim *0034 (_t1F17, z1EEA);
        int _t1F19 = 2;
        real _t1F1A = prim ^0068 (x1EE8, _t1F19);
        int _t1F1B = 2;
        real _t1F1C = prim ^0068 (y1EE9, _t1F1B);
        real _t1F1D = prim +0017<$[]> (_t1F1A, _t1F1C);
        int _t1F1E = 2;
        real _t1F1F = prim ^0068 (z1EEA, _t1F1E);
        real _t1F20 = prim +0017<$[]> (_t1F1D, _t1F1F);
        real _t1F21 = prim sin0171 (_t1F20);
        real _t1F22 = prim *0034 (_t1F18, _t1F21);
        real _t1F23 = prim +0017<$[]> (_t1F16, _t1F22);
        vec3 g1F24 = [_t1EF9, _t1F08, _t1F23];
        g1EE7 = g1F24;
        tensor[3,3] H1F25;
        real x1F26 = pos1398[0];
        real y1F27 = pos1398[1];
        real z1F28 = pos1398[2];
        int _t1F29 = -4;
        real _t1F2A = (real)_t1F29;
        int _t1F2B = 2;
        real _t1F2C = prim ^0068 (x1F26, _t1F2B);
        real _t1F2D = prim *0034 (_t1F2A, _t1F2C);
        int _t1F2E = 2;
        real _t1F2F = prim ^0068 (z1F28, _t1F2E);
        real _t1F30 = prim *0034 (_t1F2D, _t1F2F);
        int _t1F31 = 2;
        real _t1F32 = prim ^0068 (x1F26, _t1F31);
        int _t1F33 = 2;
        real _t1F34 = prim ^0068 (y1F27, _t1F33);
        real _t1F35 = prim +0017<$[]> (_t1F32, _t1F34);
        int _t1F36 = 2;
        real _t1F37 = prim ^0068 (z1F28, _t1F36);
        real _t1F38 = prim +0017<$[]> (_t1F35, _t1F37);
        real _t1F39 = prim sin0171 (_t1F38);
        real _t1F3A = prim *0034 (_t1F30, _t1F39);
        real _t1F3B = 0.2e1;
        int _t1F3C = 2;
        real _t1F3D = prim ^0068 (z1F28, _t1F3C);
        real _t1F3E = prim *0034 (_t1F3B, _t1F3D);
        int _t1F3F = 2;
        real _t1F40 = prim ^0068 (x1F26, _t1F3F);
        int _t1F41 = 2;
        real _t1F42 = prim ^0068 (y1F27, _t1F41);
        real _t1F43 = prim +0017<$[]> (_t1F40, _t1F42);
        int _t1F44 = 2;
        real _t1F45 = prim ^0068 (z1F28, _t1F44);
        real _t1F46 = prim +0017<$[]> (_t1F43, _t1F45);
        real _t1F47 = prim cos0169 (_t1F46);
        real _t1F48 = prim *0034 (_t1F3E, _t1F47);
        real _t1F49 = prim +0017<$[]> (_t1F3A, _t1F48);
        int _t1F4A = -4;
        real _t1F4B = (real)_t1F4A;
        real _t1F4C = prim *0034 (_t1F4B, x1F26);
        real _t1F4D = prim *0034 (_t1F4C, y1F27);
        int _t1F4E = 2;
        real _t1F4F = prim ^0068 (z1F28, _t1F4E);
        real _t1F50 = prim *0034 (_t1F4D, _t1F4F);
        int _t1F51 = 2;
        real _t1F52 = prim ^0068 (x1F26, _t1F51);
        int _t1F53 = 2;
        real _t1F54 = prim ^0068 (y1F27, _t1F53);
        real _t1F55 = prim +0017<$[]> (_t1F52, _t1F54);
        int _t1F56 = 2;
        real _t1F57 = prim ^0068 (z1F28, _t1F56);
        real _t1F58 = prim +0017<$[]> (_t1F55, _t1F57);
        real _t1F59 = prim sin0171 (_t1F58);
        real _t1F5A = prim *0034 (_t1F50, _t1F59);
        int _t1F5B = -4;
        real _t1F5C = (real)_t1F5B;
        real _t1F5D = prim *0034 (_t1F5C, x1F26);
        int _t1F5E = 3;
        real _t1F5F = prim ^0068 (z1F28, _t1F5E);
        real _t1F60 = prim *0034 (_t1F5D, _t1F5F);
        int _t1F61 = 2;
        real _t1F62 = prim ^0068 (x1F26, _t1F61);
        int _t1F63 = 2;
        real _t1F64 = prim ^0068 (y1F27, _t1F63);
        real _t1F65 = prim +0017<$[]> (_t1F62, _t1F64);
        int _t1F66 = 2;
        real _t1F67 = prim ^0068 (z1F28, _t1F66);
        real _t1F68 = prim +0017<$[]> (_t1F65, _t1F67);
        real _t1F69 = prim sin0171 (_t1F68);
        real _t1F6A = prim *0034 (_t1F60, _t1F69);
        real _t1F6B = 0.4e1;
        real _t1F6C = prim *0034 (_t1F6B, x1F26);
        real _t1F6D = prim *0034 (_t1F6C, z1F28);
        int _t1F6E = 2;
        real _t1F6F = prim ^0068 (x1F26, _t1F6E);
        int _t1F70 = 2;
        real _t1F71 = prim ^0068 (y1F27, _t1F70);
        real _t1F72 = prim +0017<$[]> (_t1F6F, _t1F71);
        int _t1F73 = 2;
        real _t1F74 = prim ^0068 (z1F28, _t1F73);
        real _t1F75 = prim +0017<$[]> (_t1F72, _t1F74);
        real _t1F76 = prim cos0169 (_t1F75);
        real _t1F77 = prim *0034 (_t1F6D, _t1F76);
        real _t1F78 = prim +0017<$[]> (_t1F6A, _t1F77);
        vec3 _t1F79 = [_t1F49, _t1F5A, _t1F78];
        int _t1F7A = -4;
        real _t1F7B = (real)_t1F7A;
        real _t1F7C = prim *0034 (_t1F7B, x1F26);
        real _t1F7D = prim *0034 (_t1F7C, y1F27);
        int _t1F7E = 2;
        real _t1F7F = prim ^0068 (z1F28, _t1F7E);
        real _t1F80 = prim *0034 (_t1F7D, _t1F7F);
        int _t1F81 = 2;
        real _t1F82 = prim ^0068 (x1F26, _t1F81);
        int _t1F83 = 2;
        real _t1F84 = prim ^0068 (y1F27, _t1F83);
        real _t1F85 = prim +0017<$[]> (_t1F82, _t1F84);
        int _t1F86 = 2;
        real _t1F87 = prim ^0068 (z1F28, _t1F86);
        real _t1F88 = prim +0017<$[]> (_t1F85, _t1F87);
        real _t1F89 = prim sin0171 (_t1F88);
        real _t1F8A = prim *0034 (_t1F80, _t1F89);
        int _t1F8B = -4;
        real _t1F8C = (real)_t1F8B;
        int _t1F8D = 2;
        real _t1F8E = prim ^0068 (y1F27, _t1F8D);
        real _t1F8F = prim *0034 (_t1F8C, _t1F8E);
        int _t1F90 = 2;
        real _t1F91 = prim ^0068 (z1F28, _t1F90);
        real _t1F92 = prim *0034 (_t1F8F, _t1F91);
        int _t1F93 = 2;
        real _t1F94 = prim ^0068 (x1F26, _t1F93);
        int _t1F95 = 2;
        real _t1F96 = prim ^0068 (y1F27, _t1F95);
        real _t1F97 = prim +0017<$[]> (_t1F94, _t1F96);
        int _t1F98 = 2;
        real _t1F99 = prim ^0068 (z1F28, _t1F98);
        real _t1F9A = prim +0017<$[]> (_t1F97, _t1F99);
        real _t1F9B = prim sin0171 (_t1F9A);
        real _t1F9C = prim *0034 (_t1F92, _t1F9B);
        real _t1F9D = 0.2e1;
        int _t1F9E = 2;
        real _t1F9F = prim ^0068 (z1F28, _t1F9E);
        real _t1FA0 = prim *0034 (_t1F9D, _t1F9F);
        int _t1FA1 = 2;
        real _t1FA2 = prim ^0068 (x1F26, _t1FA1);
        int _t1FA3 = 2;
        real _t1FA4 = prim ^0068 (y1F27, _t1FA3);
        real _t1FA5 = prim +0017<$[]> (_t1FA2, _t1FA4);
        int _t1FA6 = 2;
        real _t1FA7 = prim ^0068 (z1F28, _t1FA6);
        real _t1FA8 = prim +0017<$[]> (_t1FA5, _t1FA7);
        real _t1FA9 = prim cos0169 (_t1FA8);
        real _t1FAA = prim *0034 (_t1FA0, _t1FA9);
        real _t1FAB = prim +0017<$[]> (_t1F9C, _t1FAA);
        int _t1FAC = -4;
        real _t1FAD = (real)_t1FAC;
        real _t1FAE = prim *0034 (_t1FAD, y1F27);
        int _t1FAF = 3;
        real _t1FB0 = prim ^0068 (z1F28, _t1FAF);
        real _t1FB1 = prim *0034 (_t1FAE, _t1FB0);
        int _t1FB2 = 2;
        real _t1FB3 = prim ^0068 (x1F26, _t1FB2);
        int _t1FB4 = 2;
        real _t1FB5 = prim ^0068 (y1F27, _t1FB4);
        real _t1FB6 = prim +0017<$[]> (_t1FB3, _t1FB5);
        int _t1FB7 = 2;
        real _t1FB8 = prim ^0068 (z1F28, _t1FB7);
        real _t1FB9 = prim +0017<$[]> (_t1FB6, _t1FB8);
        real _t1FBA = prim sin0171 (_t1FB9);
        real _t1FBB = prim *0034 (_t1FB1, _t1FBA);
        real _t1FBC = 0.4e1;
        real _t1FBD = prim *0034 (_t1FBC, y1F27);
        real _t1FBE = prim *0034 (_t1FBD, z1F28);
        int _t1FBF = 2;
        real _t1FC0 = prim ^0068 (x1F26, _t1FBF);
        int _t1FC1 = 2;
        real _t1FC2 = prim ^0068 (y1F27, _t1FC1);
        real _t1FC3 = prim +0017<$[]> (_t1FC0, _t1FC2);
        int _t1FC4 = 2;
        real _t1FC5 = prim ^0068 (z1F28, _t1FC4);
        real _t1FC6 = prim +0017<$[]> (_t1FC3, _t1FC5);
        real _t1FC7 = prim cos0169 (_t1FC6);
        real _t1FC8 = prim *0034 (_t1FBE, _t1FC7);
        real _t1FC9 = prim +0017<$[]> (_t1FBB, _t1FC8);
        vec3 _t1FCA = [_t1F8A, _t1FAB, _t1FC9];
        int _t1FCB = -4;
        real _t1FCC = (real)_t1FCB;
        real _t1FCD = prim *0034 (_t1FCC, x1F26);
        int _t1FCE = 3;
        real _t1FCF = prim ^0068 (z1F28, _t1FCE);
        real _t1FD0 = prim *0034 (_t1FCD, _t1FCF);
        int _t1FD1 = 2;
        real _t1FD2 = prim ^0068 (x1F26, _t1FD1);
        int _t1FD3 = 2;
        real _t1FD4 = prim ^0068 (y1F27, _t1FD3);
        real _t1FD5 = prim +0017<$[]> (_t1FD2, _t1FD4);
        int _t1FD6 = 2;
        real _t1FD7 = prim ^0068 (z1F28, _t1FD6);
        real _t1FD8 = prim +0017<$[]> (_t1FD5, _t1FD7);
        real _t1FD9 = prim sin0171 (_t1FD8);
        real _t1FDA = prim *0034 (_t1FD0, _t1FD9);
        real _t1FDB = 0.4e1;
        real _t1FDC = prim *0034 (_t1FDB, x1F26);
        real _t1FDD = prim *0034 (_t1FDC, z1F28);
        int _t1FDE = 2;
        real _t1FDF = prim ^0068 (x1F26, _t1FDE);
        int _t1FE0 = 2;
        real _t1FE1 = prim ^0068 (y1F27, _t1FE0);
        real _t1FE2 = prim +0017<$[]> (_t1FDF, _t1FE1);
        int _t1FE3 = 2;
        real _t1FE4 = prim ^0068 (z1F28, _t1FE3);
        real _t1FE5 = prim +0017<$[]> (_t1FE2, _t1FE4);
        real _t1FE6 = prim cos0169 (_t1FE5);
        real _t1FE7 = prim *0034 (_t1FDD, _t1FE6);
        real _t1FE8 = prim +0017<$[]> (_t1FDA, _t1FE7);
        int _t1FE9 = -4;
        real _t1FEA = (real)_t1FE9;
        real _t1FEB = prim *0034 (_t1FEA, y1F27);
        int _t1FEC = 3;
        real _t1FED = prim ^0068 (z1F28, _t1FEC);
        real _t1FEE = prim *0034 (_t1FEB, _t1FED);
        int _t1FEF = 2;
        real _t1FF0 = prim ^0068 (x1F26, _t1FEF);
        int _t1FF1 = 2;
        real _t1FF2 = prim ^0068 (y1F27, _t1FF1);
        real _t1FF3 = prim +0017<$[]> (_t1FF0, _t1FF2);
        int _t1FF4 = 2;
        real _t1FF5 = prim ^0068 (z1F28, _t1FF4);
        real _t1FF6 = prim +0017<$[]> (_t1FF3, _t1FF5);
        real _t1FF7 = prim sin0171 (_t1FF6);
        real _t1FF8 = prim *0034 (_t1FEE, _t1FF7);
        real _t1FF9 = 0.4e1;
        real _t1FFA = prim *0034 (_t1FF9, y1F27);
        real _t1FFB = prim *0034 (_t1FFA, z1F28);
        int _t1FFC = 2;
        real _t1FFD = prim ^0068 (x1F26, _t1FFC);
        int _t1FFE = 2;
        real _t1FFF = prim ^0068 (y1F27, _t1FFE);
        real _t2000 = prim +0017<$[]> (_t1FFD, _t1FFF);
        int _t2001 = 2;
        real _t2002 = prim ^0068 (z1F28, _t2001);
        real _t2003 = prim +0017<$[]> (_t2000, _t2002);
        real _t2004 = prim cos0169 (_t2003);
        real _t2005 = prim *0034 (_t1FFB, _t2004);
        real _t2006 = prim +0017<$[]> (_t1FF8, _t2005);
        int _t2007 = -4;
        real _t2008 = (real)_t2007;
        int _t2009 = 4;
        real _t200A = prim ^0068 (z1F28, _t2009);
        real _t200B = prim *0034 (_t2008, _t200A);
        int _t200C = 2;
        real _t200D = prim ^0068 (x1F26, _t200C);
        int _t200E = 2;
        real _t200F = prim ^0068 (y1F27, _t200E);
        real _t2010 = prim +0017<$[]> (_t200D, _t200F);
        int _t2011 = 2;
        real _t2012 = prim ^0068 (z1F28, _t2011);
        real _t2013 = prim +0017<$[]> (_t2010, _t2012);
        real _t2014 = prim sin0171 (_t2013);
        real _t2015 = prim *0034 (_t200B, _t2014);
        real _t2016 = 0.1e2;
        int _t2017 = 2;
        real _t2018 = prim ^0068 (z1F28, _t2017);
        real _t2019 = prim *0034 (_t2016, _t2018);
        int _t201A = 2;
        real _t201B = prim ^0068 (x1F26, _t201A);
        int _t201C = 2;
        real _t201D = prim ^0068 (y1F27, _t201C);
        real _t201E = prim +0017<$[]> (_t201B, _t201D);
        int _t201F = 2;
        real _t2020 = prim ^0068 (z1F28, _t201F);
        real _t2021 = prim +0017<$[]> (_t201E, _t2020);
        real _t2022 = prim cos0169 (_t2021);
        real _t2023 = prim *0034 (_t2019, _t2022);
        real _t2024 = prim +0017<$[]> (_t2015, _t2023);
        real _t2025 = 0.2e1;
        int _t2026 = 2;
        real _t2027 = prim ^0068 (x1F26, _t2026);
        int _t2028 = 2;
        real _t2029 = prim ^0068 (y1F27, _t2028);
        real _t202A = prim +0017<$[]> (_t2027, _t2029);
        int _t202B = 2;
        real _t202C = prim ^0068 (z1F28, _t202B);
        real _t202D = prim +0017<$[]> (_t202A, _t202C);
        real _t202E = prim sin0171 (_t202D);
        real _t202F = prim *0034 (_t2025, _t202E);
        real _t2030 = prim +0017<$[]> (_t2024, _t202F);
        vec3 _t2031 = [_t1FE8, _t2006, _t2030];
        tensor[3,3] hess2032 = [_t1F79, _t1FCA, _t2031];
        H1F25 = hess2032;
        real[3] _t2033 = prim evals009F (H1F25);
        int _t2034 = 2;
        real _t2035 = prim $sub01C0<real; %3> (_t2033, _t2034);
        real _t2036 = prim unary -008B<$[]> (_t2035);
        real _t2037 = prim |()|00B5<$[3]> (g1EE7);
        real _t2038 = prim +0017<$[]> (fBias07CC, _t2037);
        real str2039 = prim /0055 (_t2036, _t2038);
        _t13BE = str2039;
        string _t13BF = " <= fStrTh=";
        string _t13C0 = " || fMask(pos)=";
        real _t13C1;
        real _t1EE6 = 0.e0;
        _t13C1 = _t1EE6;
        string _t13C2 = " < fMaskTh=";
        string _t13C3 = " || fTest(pos)=";
        bool _t13C4;
        bool _t1EE5 = true;
        _t13C4 = _t1EE5;
        string _t13C5 = " ==>DIE\n";
        print (_t13BB, _t13BC, _t13BD, _t13BE, _t13BF, fStrTh07CA, _t13C0, _t13C1, _t13C2, fMaskTh07CB, _t13C3, _t13C4, _t13C5);
      }
      die;
    }
    real _t13C6 = 0.e0;
    bool _t13C7 = prim >0080 (travMax07CF, _t13C6);
    if _t13C7 {
      bool _t13C8 = prim >0080 (trav13A2, travMax07CF);
      if _t13C8 {
        die;
      }
    }
    bool _t13C9 = prim !00BC (found13A0);
    if _t13C9 {
      int _t13CA = 0;
      bool _t13CB = prim >007F (nfsMax07D0, _t13CA);
      if _t13CB {
        bool _t13CC = prim >007F (nfs13A1, nfsMax07D0);
        if _t13CC {
          bool _t13CD;
          bool _t13CE;
          int _t13CF = 0;
          bool _t13D0 = prim >007F (verb07DA, _t13CF);
          if _t13D0 {
            _t13CE = vv13A7;
          } else {
            _t13CE = false;
          }
          if _t13CE {
            _t13CD = true;
          } else {
            int _t13D1 = 1;
            _t13CD = prim >007F (verb07DA, _t13D1);
          }
          if _t13CD {
            string _t13D2 = "(i#";
            string _t13D3 = " @ ";
            string _t13D4 = "): ";
            print (ID139A, _t13D2, iter1359, _t13D3, pos1398, _t13D4);
            string _t13D5 = "nfs=";
            string _t13D6 = " > nfsMax=";
            string _t13D7 = " || trav=";
            string _t13D8 = " > travMax=";
            string _t13D9 = " =>DIE\n";
            print (_t13D5, nfs13A1, _t13D6, nfsMax07D0, _t13D7, trav13A2, _t13D8, travMax07CF, _t13D9);
          }
          die;
        }
      }
      vec3 _t13DA = func fStep128C (pos1398);
      step139C = prim *0036<$[3]> (sfs07DB, _t13DA);
      pos1398 = prim +0017<$[3]> (pos1398, step139C);
      _pos1399 = pos1398;
      real _t13DB = prim |()|00B5<$[3]> (step139C);
      real _t13DC = prim /0055 (_t13DB, tipd07CD);
      mvmt13A3 = prim lerp0096<$[]> (_t13DC, mvmt13A3, hist07DC);
      bool _t13DD = prim >0080 (mvmt13A3, fsEps07D4);
      if _t13DD {
        real _t13DE = prim |()|00B5<$[3]> (step139C);
        real _t13DF = prim /0055 (_t13DE, tipd07CD);
        trav13A2 = prim +0017<$[]> (trav13A2, _t13DF);
        int _t13E0 = 1;
        nfs13A1 = prim +0015 (nfs13A1, _t13E0);
      } else {
        found13A0 = true;
        mvmt13A3 = 0.1e1;
        trav13A2 = 0.e0;
      }
      bool _t13E1;
      bool _t13E2;
      int _t13E3 = 0;
      bool _t13E4 = prim >007F (verb07DA, _t13E3);
      if _t13E4 {
        _t13E2 = vv13A7;
      } else {
        _t13E2 = false;
      }
      if _t13E2 {
        _t13E1 = true;
      } else {
        int _t13E5 = 1;
        _t13E1 = prim >007F (verb07DA, _t13E5);
      }
      if _t13E1 {
        string _t13E6 = "(i#";
        string _t13E7 = " @ ";
        string _t13E8 = "): ";
        print (ID139A, _t13E6, iter1359, _t13E7, pos1398, _t13E8);
        string _t13E9 = "step=";
        string _t13EA = "; mvmt=";
        string _t13EB = " => found=";
        string _t13EC = "\n";
        print (_t13E9, step139C, _t13EA, mvmt13A3, _t13EB, found13A0, _t13EC);
      }
    } else {
      int _t13ED = 0;
      bool _t13EE = prim ==0082 (_t13ED, fDim07DF);
      if _t13EE {
        stabilize;
      }
      vec3 _t13EF = func fStep128C (pos1398);
      step139C = prim *0036<$[3]> (sfs07DB, _t13EF);
      pos1398 = prim +0017<$[3]> (pos1398, step139C);
      _pos1399 = pos1398;
      real _t13F0 = prim |()|00B5<$[3]> (step139C);
      real _t13F1 = prim /0055 (_t13F0, tipd07CD);
      trav13A2 = prim +0017<$[]> (trav13A2, _t13F1);
      real oldE13F2 = 0.e0;
      real _t13F3 = 0.e0;
      real _t13F4 = 0.e0;
      real _t13F5 = 0.e0;
      vec3 force13F6 = [_t13F3, _t13F4, _t13F5];
      int nn13F7 = 0;
      point[] _t13F8 = prim sphere0198<point> (_pos1399, rad1342);
      foreach P13F9 in _t13F8 {
        vec3 _t13FA = P13F9.pos1398;
        vec3 off13FB = prim -0026<$[3]> (_t13FA, pos1398);
        real _t13FC = prim |()|00B5<$[3]> (off13FB);
        real _t13FD = prim /0055 (_t13FC, tipd07CD);
        bool _t13FE = prim <007A (_t13FD, fsEps07D4);
        if _t13FE {
          real _t13FF = P13F9.ID139A;
          bool _t1400 = prim <=007C (ID139A, _t13FF);
          if _t1400 {
            die;
          }
        }
        real _t1407;
        real _t1EBD = prim |()|00B5<$[3]> (off13FB);
        real _t1EBE = prim /0055 (_t1EBD, rad1342);
        real _t1EBF;
        real _t1EC0 = 0.2e1;
        real _t1EC1 = 0.3e1;
        real _t1EC2 = prim /0055 (_t1EC0, _t1EC1);
        real s1EC3 = prim -0026<$[]> (_t1EBE, _t1EC2);
        real _t1EC4;
        real _t1EC5 = 0.2e1;
        real _t1EC6 = 0.3e1;
        real _t1EC7 = prim /0055 (_t1EC5, _t1EC6);
        bool _t1EC8 = prim <007A (_t1EBE, _t1EC7);
        if _t1EC8 {
          real _t1EC9 = 0.1e1;
          real _t1ECA = -0.5646e1;
          real _t1ECB = 0.119835e2;
          real _t1ECC = -0.113535e2;
          real _t1ECD = 0.40550625e1;
          real _t1ECE = prim *0034 (_t1ECD, _t1EBE);
          real _t1ECF = prim +0017<$[]> (_t1ECC, _t1ECE);
          real _t1ED0 = prim *0034 (_t1EBE, _t1ECF);
          real _t1ED1 = prim +0017<$[]> (_t1ECB, _t1ED0);
          real _t1ED2 = prim *0034 (_t1EBE, _t1ED1);
          real _t1ED3 = prim +0017<$[]> (_t1ECA, _t1ED2);
          real _t1ED4 = prim *0034 (_t1EBE, _t1ED3);
          _t1EC4 = prim +0017<$[]> (_t1EC9, _t1ED4);
        } else {
          real _t1ED5;
          real _t1ED6 = 0.1e1;
          bool _t1ED7 = prim <007A (_t1EBE, _t1ED6);
          if _t1ED7 {
            real _t1ED8 = -0.1e-2;
            real _t1ED9 = 0.9e-1;
            real _t1EDA = -0.54e0;
            real _t1EDB = 0.1215e1;
            real _t1EDC = 0.972e0;
            real _t1EDD = prim *0034 (_t1EDC, s1EC3);
            real _t1EDE = prim -0026<$[]> (_t1EDB, _t1EDD);
            real _t1EDF = prim *0034 (_t1EDE, s1EC3);
            real _t1EE0 = prim +0017<$[]> (_t1EDA, _t1EDF);
            real _t1EE1 = prim *0034 (_t1EE0, s1EC3);
            real _t1EE2 = prim +0017<$[]> (_t1ED9, _t1EE1);
            real _t1EE3 = prim *0034 (_t1EE2, s1EC3);
            real _t1EE4 = prim *0034 (_t1EE3, s1EC3);
            _t1ED5 = prim +0017<$[]> (_t1ED8, _t1EE4);
          } else {
            _t1ED5 = 0.e0;
          }
          _t1EC4 = _t1ED5;
        }
        _t1EBF = _t1EC4;
        _t1407 = _t1EBF;
        oldE13F2 = prim +0017<$[]> (oldE13F2, _t1407);
        vec3 _t1408;
        real _t1E93 = prim |()|00B5<$[3]> (off13FB);
        real _t1E94 = prim /0055 (_t1E93, rad1342);
        real _t1E95;
        real _t1E96 = 0.3e1;
        real _t1E97 = prim *0034 (_t1E96, _t1E94);
        real _t1E98 = 0.2e1;
        real t1E99 = prim -0026<$[]> (_t1E97, _t1E98);
        real _t1E9A;
        real _t1E9B = 0.2e1;
        real _t1E9C = 0.3e1;
        real _t1E9D = prim /0055 (_t1E9B, _t1E9C);
        bool _t1E9E = prim <007A (_t1E94, _t1E9D);
        if _t1E9E {
          real _t1E9F = -0.5646e1;
          real _t1EA0 = 0.23967e2;
          real _t1EA1 = -0.340605e2;
          real _t1EA2 = 0.1622025e2;
          real _t1EA3 = prim *0034 (_t1EA2, _t1E94);
          real _t1EA4 = prim +0017<$[]> (_t1EA1, _t1EA3);
          real _t1EA5 = prim *0034 (_t1E94, _t1EA4);
          real _t1EA6 = prim +0017<$[]> (_t1EA0, _t1EA5);
          real _t1EA7 = prim *0034 (_t1E94, _t1EA6);
          _t1E9A = prim +0017<$[]> (_t1E9F, _t1EA7);
        } else {
          real _t1EA8;
          real _t1EA9 = 0.1e1;
          bool _t1EAA = prim <007A (_t1E94, _t1EA9);
          if _t1EAA {
            real _t1EAB = 0.1234567901e-1;
            real _t1EAC = prim *0034 (_t1EAB, t1E99);
            real _t1EAD = 0.486e1;
            real _t1EAE = -0.1458e2;
            real _t1EAF = 0.1458e2;
            real _t1EB0 = 0.486e1;
            real _t1EB1 = prim *0034 (_t1EB0, t1E99);
            real _t1EB2 = prim -0026<$[]> (_t1EAF, _t1EB1);
            real _t1EB3 = prim *0034 (t1E99, _t1EB2);
            real _t1EB4 = prim +0017<$[]> (_t1EAE, _t1EB3);
            real _t1EB5 = prim *0034 (t1E99, _t1EB4);
            real _t1EB6 = prim +0017<$[]> (_t1EAD, _t1EB5);
            _t1EA8 = prim *0034 (_t1EAC, _t1EB6);
          } else {
            _t1EA8 = 0.e0;
          }
          _t1E9A = _t1EA8;
        }
        _t1E95 = _t1E9A;
        real _t1EB7 = 0.1e1;
        real _t1EB8 = prim /0055 (_t1EB7, rad1342);
        real _t1EB9 = prim *0034 (_t1E95, _t1EB8);
        vec3 _t1EBA = prim *0036<$[3]> (_t1EB9, off13FB);
        real _t1EBB = prim |()|00B5<$[3]> (off13FB);
        vec3 _t1EBC = prim /0057<$[3]> (_t1EBA, _t1EBB);
        _t1408 = _t1EBC;
        force13F6 = prim +0017<$[3]> (force13F6, _t1408);
        int _t1409 = 1;
        nn13F7 = prim +0015 (nn13F7, _t1409);
      }
      int _t140A = 0;
      bool _t140B = prim ==0082 (_t140A, nn13F7);
      if _t140B {
        bool _t140C;
        int _t140D;
        bool _t1E83;
        int _t1E84 = 0;
        bool _t1E85 = prim >007F (pcp07DD, _t1E84);
        if _t1E85 {
          bool _t1E86;
          int _t1E87 = 0;
          bool _t1E88 = prim >007F (iter1359, _t1E87);
          if _t1E88 {
            int _t1E89 = 0;
            int _t1E8A = prim %00A1 (iter1359, pcp07DD);
            _t1E86 = prim ==0082 (_t1E89, _t1E8A);
          } else {
            _t1E86 = false;
          }
          _t1E83 = _t1E86;
        } else {
          _t1E83 = false;
        }
        if _t1E83 {
          int _t1E8B = prim /0054 (iter1359, pcp07DD);
          int _t1E8C = 2;
          int _t1E8D = prim %00A1 (_t1E8B, _t1E8C);
          int _t1E8E = 2;
          int _t1E8F = prim *0033 (_t1E8D, _t1E8E);
          int _t1E90 = 1;
          int _t1E91 = prim -0024 (_t1E8F, _t1E90);
          _t140D = _t1E91;
        } else {
          int _t1E92 = 0;
          _t140D = _t1E92;
        }
        int _t140E = 0;
        bool _t140F = prim >007F (_t140D, _t140E);
        if _t140F {
          _t140C = prim <0079 (born13A5, nnmax12F4);
        } else {
          _t140C = false;
        }
        bool _t1410 = prim !00BC (_t140C);
        if _t1410 {
          continue;
        }
        tensor[3,3] _t1411 = func fPerp12BE (pos1398);
        real _t1412 = 0.e0;
        real _t1413 = 0.e0;
        vec3 _t1414 = [tipd07CD, _t1412, _t1413];
        vec3 noff01415 = prim •00CE<$[3,3]; $[3]; $[3]> (_t1411, _t1414);
        tensor[3,3] _t1416 = func fPerp12BE (pos1398);
        real _t1417 = 0.e0;
        real _t1418 = 0.e0;
        vec3 _t1419 = [_t1417, tipd07CD, _t1418];
        vec3 noff1141A = prim •00CE<$[3,3]; $[3]; $[3]> (_t1416, _t1419);
        tensor[3,3] _t141B = func fPerp12BE (pos1398);
        real _t141C = 0.e0;
        real _t141D = 0.e0;
        vec3 _t141E = [_t141C, _t141D, tipd07CD];
        vec3 noff2141F = prim •00CE<$[3,3]; $[3]; $[3]> (_t141B, _t141E);
        vec3 noff1420 = noff01415;
        vec3 _t1421;
        real _t1422 = prim |()|00B5<$[3]> (noff1420);
        real _t1423 = prim |()|00B5<$[3]> (noff1141A);
        bool _t1424 = prim >0080 (_t1422, _t1423);
        if _t1424 {
          _t1421 = noff1420;
        } else {
          _t1421 = noff1141A;
        }
        noff1420 = _t1421;
        vec3 _t1425;
        real _t1426 = prim |()|00B5<$[3]> (noff1420);
        real _t1427 = prim |()|00B5<$[3]> (noff2141F);
        bool _t1428 = prim >0080 (_t1426, _t1427);
        if _t1428 {
          _t1425 = noff1420;
        } else {
          _t1425 = noff2141F;
        }
        noff1420 = _t1425;
        vec3 _t1429 = prim normalize0137<$[3]> (noff1420);
        vec3 _t142A = prim *0036<$[3]> (tipd07CD, _t1429);
        vec3 npos142B = prim +0017<$[3]> (_t142A, pos1398);
        vec3 _t142C = func fStep128C (npos142B);
        vec3 _t142D = prim *0036<$[3]> (sfs07DB, _t142C);
        npos142B = prim +0017<$[3]> (npos142B, _t142D);
        bool _t142E;
        bool _t142F;
        int _t1430 = 0;
        bool _t1431 = prim >007F (verb07DA, _t1430);
        if _t1431 {
          _t142F = vv13A7;
        } else {
          _t142F = false;
        }
        if _t142F {
          _t142E = true;
        } else {
          int _t1432 = 1;
          _t142E = prim >007F (verb07DA, _t1432);
        }
        if _t142E {
          string _t1433 = "(i#";
          string _t1434 = " @ ";
          string _t1435 = "): ";
          print (ID139A, _t1433, iter1359, _t1434, pos1398, _t1435);
          string _t1436 = " 0==nn =>NEW(";
          string _t1437 = ") w/ ID=";
          real _t1438;
          real _t1E75 = 0.1e7;
          real _t1E76;
          real _t1E77 = npos142B[0];
          real _t1E78 = func urnd135C (_t1E77);
          real _t1E79 = npos142B[1];
          real _t1E7A = func urnd135C (_t1E79);
          real _t1E7B = prim +0017<$[]> (_t1E78, _t1E7A);
          real _t1E7C = npos142B[2];
          real _t1E7D = func urnd135C (_t1E7C);
          real _t1E7E = prim +0017<$[]> (_t1E7B, _t1E7D);
          real _t1E7F = 0.1e1;
          real _t1E80 = prim fmod018A (_t1E7E, _t1E7F);
          _t1E76 = _t1E80;
          real _t1E81 = prim *0034 (_t1E75, _t1E76);
          real _t1E82 = prim floor0189 (_t1E81);
          _t1438 = _t1E82;
          string _t1439 = "\n";
          print (_t1436, npos142B, _t1437, _t1438, _t1439);
        }
        bool _t143A;
        bool _t1CFF;
        bool _t1D00;
        real _t1D01 = 0.e0;
        real _t1D02 = 0.e0;
        real _t1D03 = 0.e0;
        vec3 _t1D04 = [_t1D01, _t1D02, _t1D03];
        vec3 mid1D05 = prim -0026<$[3]> (pos1398, _t1D04);
        bool _t1D14;
        real _t1D15 = prim |()|00B5<$[3]> (mid1D05);
        real _t1D16 = 0.4e1;
        bool _t1D17 = prim <007A (_t1D15, _t1D16);
        if _t1D17 {
          real _t1D18 = prim |()|00B5<$[3]> (mid1D05);
          real _t1D19 = 0.3e1;
          _t1D14 = prim >0080 (_t1D18, _t1D19);
        } else {
          _t1D14 = false;
        }
        _t1D00 = _t1D14;
        if _t1D00 {
          bool _t1D1A;
          real _t1D1B;
          vec3 g1D1C;
          real x1D1D = pos1398[0];
          real y1D1E = pos1398[1];
          real z1D1F = pos1398[2];
          real _t1D20 = 0.2e1;
          real _t1D21 = prim *0034 (_t1D20, x1D1D);
          int _t1D22 = 2;
          real _t1D23 = prim ^0068 (z1D1F, _t1D22);
          real _t1D24 = prim *0034 (_t1D21, _t1D23);
          int _t1D25 = 2;
          real _t1D26 = prim ^0068 (x1D1D, _t1D25);
          int _t1D27 = 2;
          real _t1D28 = prim ^0068 (y1D1E, _t1D27);
          real _t1D29 = prim +0017<$[]> (_t1D26, _t1D28);
          int _t1D2A = 2;
          real _t1D2B = prim ^0068 (z1D1F, _t1D2A);
          real _t1D2C = prim +0017<$[]> (_t1D29, _t1D2B);
          real _t1D2D = prim cos0169 (_t1D2C);
          real _t1D2E = prim *0034 (_t1D24, _t1D2D);
          real _t1D2F = 0.2e1;
          real _t1D30 = prim *0034 (_t1D2F, y1D1E);
          int _t1D31 = 2;
          real _t1D32 = prim ^0068 (z1D1F, _t1D31);
          real _t1D33 = prim *0034 (_t1D30, _t1D32);
          int _t1D34 = 2;
          real _t1D35 = prim ^0068 (x1D1D, _t1D34);
          int _t1D36 = 2;
          real _t1D37 = prim ^0068 (y1D1E, _t1D36);
          real _t1D38 = prim +0017<$[]> (_t1D35, _t1D37);
          int _t1D39 = 2;
          real _t1D3A = prim ^0068 (z1D1F, _t1D39);
          real _t1D3B = prim +0017<$[]> (_t1D38, _t1D3A);
          real _t1D3C = prim cos0169 (_t1D3B);
          real _t1D3D = prim *0034 (_t1D33, _t1D3C);
          real _t1D3E = 0.2e1;
          int _t1D3F = 3;
          real _t1D40 = prim ^0068 (z1D1F, _t1D3F);
          real _t1D41 = prim *0034 (_t1D3E, _t1D40);
          int _t1D42 = 2;
          real _t1D43 = prim ^0068 (x1D1D, _t1D42);
          int _t1D44 = 2;
          real _t1D45 = prim ^0068 (y1D1E, _t1D44);
          real _t1D46 = prim +0017<$[]> (_t1D43, _t1D45);
          int _t1D47 = 2;
          real _t1D48 = prim ^0068 (z1D1F, _t1D47);
          real _t1D49 = prim +0017<$[]> (_t1D46, _t1D48);
          real _t1D4A = prim cos0169 (_t1D49);
          real _t1D4B = prim *0034 (_t1D41, _t1D4A);
          real _t1D4C = 0.2e1;
          real _t1D4D = prim *0034 (_t1D4C, z1D1F);
          int _t1D4E = 2;
          real _t1D4F = prim ^0068 (x1D1D, _t1D4E);
          int _t1D50 = 2;
          real _t1D51 = prim ^0068 (y1D1E, _t1D50);
          real _t1D52 = prim +0017<$[]> (_t1D4F, _t1D51);
          int _t1D53 = 2;
          real _t1D54 = prim ^0068 (z1D1F, _t1D53);
          real _t1D55 = prim +0017<$[]> (_t1D52, _t1D54);
          real _t1D56 = prim sin0171 (_t1D55);
          real _t1D57 = prim *0034 (_t1D4D, _t1D56);
          real _t1D58 = prim +0017<$[]> (_t1D4B, _t1D57);
          vec3 g1D59 = [_t1D2E, _t1D3D, _t1D58];
          g1D1C = g1D59;
          tensor[3,3] H1D5A;
          real x1D5B = pos1398[0];
          real y1D5C = pos1398[1];
          real z1D5D = pos1398[2];
          int _t1D5E = -4;
          real _t1D5F = (real)_t1D5E;
          int _t1D60 = 2;
          real _t1D61 = prim ^0068 (x1D5B, _t1D60);
          real _t1D62 = prim *0034 (_t1D5F, _t1D61);
          int _t1D63 = 2;
          real _t1D64 = prim ^0068 (z1D5D, _t1D63);
          real _t1D65 = prim *0034 (_t1D62, _t1D64);
          int _t1D66 = 2;
          real _t1D67 = prim ^0068 (x1D5B, _t1D66);
          int _t1D68 = 2;
          real _t1D69 = prim ^0068 (y1D5C, _t1D68);
          real _t1D6A = prim +0017<$[]> (_t1D67, _t1D69);
          int _t1D6B = 2;
          real _t1D6C = prim ^0068 (z1D5D, _t1D6B);
          real _t1D6D = prim +0017<$[]> (_t1D6A, _t1D6C);
          real _t1D6E = prim sin0171 (_t1D6D);
          real _t1D6F = prim *0034 (_t1D65, _t1D6E);
          real _t1D70 = 0.2e1;
          int _t1D71 = 2;
          real _t1D72 = prim ^0068 (z1D5D, _t1D71);
          real _t1D73 = prim *0034 (_t1D70, _t1D72);
          int _t1D74 = 2;
          real _t1D75 = prim ^0068 (x1D5B, _t1D74);
          int _t1D76 = 2;
          real _t1D77 = prim ^0068 (y1D5C, _t1D76);
          real _t1D78 = prim +0017<$[]> (_t1D75, _t1D77);
          int _t1D79 = 2;
          real _t1D7A = prim ^0068 (z1D5D, _t1D79);
          real _t1D7B = prim +0017<$[]> (_t1D78, _t1D7A);
          real _t1D7C = prim cos0169 (_t1D7B);
          real _t1D7D = prim *0034 (_t1D73, _t1D7C);
          real _t1D7E = prim +0017<$[]> (_t1D6F, _t1D7D);
          int _t1D7F = -4;
          real _t1D80 = (real)_t1D7F;
          real _t1D81 = prim *0034 (_t1D80, x1D5B);
          real _t1D82 = prim *0034 (_t1D81, y1D5C);
          int _t1D83 = 2;
          real _t1D84 = prim ^0068 (z1D5D, _t1D83);
          real _t1D85 = prim *0034 (_t1D82, _t1D84);
          int _t1D86 = 2;
          real _t1D87 = prim ^0068 (x1D5B, _t1D86);
          int _t1D88 = 2;
          real _t1D89 = prim ^0068 (y1D5C, _t1D88);
          real _t1D8A = prim +0017<$[]> (_t1D87, _t1D89);
          int _t1D8B = 2;
          real _t1D8C = prim ^0068 (z1D5D, _t1D8B);
          real _t1D8D = prim +0017<$[]> (_t1D8A, _t1D8C);
          real _t1D8E = prim sin0171 (_t1D8D);
          real _t1D8F = prim *0034 (_t1D85, _t1D8E);
          int _t1D90 = -4;
          real _t1D91 = (real)_t1D90;
          real _t1D92 = prim *0034 (_t1D91, x1D5B);
          int _t1D93 = 3;
          real _t1D94 = prim ^0068 (z1D5D, _t1D93);
          real _t1D95 = prim *0034 (_t1D92, _t1D94);
          int _t1D96 = 2;
          real _t1D97 = prim ^0068 (x1D5B, _t1D96);
          int _t1D98 = 2;
          real _t1D99 = prim ^0068 (y1D5C, _t1D98);
          real _t1D9A = prim +0017<$[]> (_t1D97, _t1D99);
          int _t1D9B = 2;
          real _t1D9C = prim ^0068 (z1D5D, _t1D9B);
          real _t1D9D = prim +0017<$[]> (_t1D9A, _t1D9C);
          real _t1D9E = prim sin0171 (_t1D9D);
          real _t1D9F = prim *0034 (_t1D95, _t1D9E);
          real _t1DA0 = 0.4e1;
          real _t1DA1 = prim *0034 (_t1DA0, x1D5B);
          real _t1DA2 = prim *0034 (_t1DA1, z1D5D);
          int _t1DA3 = 2;
          real _t1DA4 = prim ^0068 (x1D5B, _t1DA3);
          int _t1DA5 = 2;
          real _t1DA6 = prim ^0068 (y1D5C, _t1DA5);
          real _t1DA7 = prim +0017<$[]> (_t1DA4, _t1DA6);
          int _t1DA8 = 2;
          real _t1DA9 = prim ^0068 (z1D5D, _t1DA8);
          real _t1DAA = prim +0017<$[]> (_t1DA7, _t1DA9);
          real _t1DAB = prim cos0169 (_t1DAA);
          real _t1DAC = prim *0034 (_t1DA2, _t1DAB);
          real _t1DAD = prim +0017<$[]> (_t1D9F, _t1DAC);
          vec3 _t1DAE = [_t1D7E, _t1D8F, _t1DAD];
          int _t1DAF = -4;
          real _t1DB0 = (real)_t1DAF;
          real _t1DB1 = prim *0034 (_t1DB0, x1D5B);
          real _t1DB2 = prim *0034 (_t1DB1, y1D5C);
          int _t1DB3 = 2;
          real _t1DB4 = prim ^0068 (z1D5D, _t1DB3);
          real _t1DB5 = prim *0034 (_t1DB2, _t1DB4);
          int _t1DB6 = 2;
          real _t1DB7 = prim ^0068 (x1D5B, _t1DB6);
          int _t1DB8 = 2;
          real _t1DB9 = prim ^0068 (y1D5C, _t1DB8);
          real _t1DBA = prim +0017<$[]> (_t1DB7, _t1DB9);
          int _t1DBB = 2;
          real _t1DBC = prim ^0068 (z1D5D, _t1DBB);
          real _t1DBD = prim +0017<$[]> (_t1DBA, _t1DBC);
          real _t1DBE = prim sin0171 (_t1DBD);
          real _t1DBF = prim *0034 (_t1DB5, _t1DBE);
          int _t1DC0 = -4;
          real _t1DC1 = (real)_t1DC0;
          int _t1DC2 = 2;
          real _t1DC3 = prim ^0068 (y1D5C, _t1DC2);
          real _t1DC4 = prim *0034 (_t1DC1, _t1DC3);
          int _t1DC5 = 2;
          real _t1DC6 = prim ^0068 (z1D5D, _t1DC5);
          real _t1DC7 = prim *0034 (_t1DC4, _t1DC6);
          int _t1DC8 = 2;
          real _t1DC9 = prim ^0068 (x1D5B, _t1DC8);
          int _t1DCA = 2;
          real _t1DCB = prim ^0068 (y1D5C, _t1DCA);
          real _t1DCC = prim +0017<$[]> (_t1DC9, _t1DCB);
          int _t1DCD = 2;
          real _t1DCE = prim ^0068 (z1D5D, _t1DCD);
          real _t1DCF = prim +0017<$[]> (_t1DCC, _t1DCE);
          real _t1DD0 = prim sin0171 (_t1DCF);
          real _t1DD1 = prim *0034 (_t1DC7, _t1DD0);
          real _t1DD2 = 0.2e1;
          int _t1DD3 = 2;
          real _t1DD4 = prim ^0068 (z1D5D, _t1DD3);
          real _t1DD5 = prim *0034 (_t1DD2, _t1DD4);
          int _t1DD6 = 2;
          real _t1DD7 = prim ^0068 (x1D5B, _t1DD6);
          int _t1DD8 = 2;
          real _t1DD9 = prim ^0068 (y1D5C, _t1DD8);
          real _t1DDA = prim +0017<$[]> (_t1DD7, _t1DD9);
          int _t1DDB = 2;
          real _t1DDC = prim ^0068 (z1D5D, _t1DDB);
          real _t1DDD = prim +0017<$[]> (_t1DDA, _t1DDC);
          real _t1DDE = prim cos0169 (_t1DDD);
          real _t1DDF = prim *0034 (_t1DD5, _t1DDE);
          real _t1DE0 = prim +0017<$[]> (_t1DD1, _t1DDF);
          int _t1DE1 = -4;
          real _t1DE2 = (real)_t1DE1;
          real _t1DE3 = prim *0034 (_t1DE2, y1D5C);
          int _t1DE4 = 3;
          real _t1DE5 = prim ^0068 (z1D5D, _t1DE4);
          real _t1DE6 = prim *0034 (_t1DE3, _t1DE5);
          int _t1DE7 = 2;
          real _t1DE8 = prim ^0068 (x1D5B, _t1DE7);
          int _t1DE9 = 2;
          real _t1DEA = prim ^0068 (y1D5C, _t1DE9);
          real _t1DEB = prim +0017<$[]> (_t1DE8, _t1DEA);
          int _t1DEC = 2;
          real _t1DED = prim ^0068 (z1D5D, _t1DEC);
          real _t1DEE = prim +0017<$[]> (_t1DEB, _t1DED);
          real _t1DEF = prim sin0171 (_t1DEE);
          real _t1DF0 = prim *0034 (_t1DE6, _t1DEF);
          real _t1DF1 = 0.4e1;
          real _t1DF2 = prim *0034 (_t1DF1, y1D5C);
          real _t1DF3 = prim *0034 (_t1DF2, z1D5D);
          int _t1DF4 = 2;
          real _t1DF5 = prim ^0068 (x1D5B, _t1DF4);
          int _t1DF6 = 2;
          real _t1DF7 = prim ^0068 (y1D5C, _t1DF6);
          real _t1DF8 = prim +0017<$[]> (_t1DF5, _t1DF7);
          int _t1DF9 = 2;
          real _t1DFA = prim ^0068 (z1D5D, _t1DF9);
          real _t1DFB = prim +0017<$[]> (_t1DF8, _t1DFA);
          real _t1DFC = prim cos0169 (_t1DFB);
          real _t1DFD = prim *0034 (_t1DF3, _t1DFC);
          real _t1DFE = prim +0017<$[]> (_t1DF0, _t1DFD);
          vec3 _t1DFF = [_t1DBF, _t1DE0, _t1DFE];
          int _t1E00 = -4;
          real _t1E01 = (real)_t1E00;
          real _t1E02 = prim *0034 (_t1E01, x1D5B);
          int _t1E03 = 3;
          real _t1E04 = prim ^0068 (z1D5D, _t1E03);
          real _t1E05 = prim *0034 (_t1E02, _t1E04);
          int _t1E06 = 2;
          real _t1E07 = prim ^0068 (x1D5B, _t1E06);
          int _t1E08 = 2;
          real _t1E09 = prim ^0068 (y1D5C, _t1E08);
          real _t1E0A = prim +0017<$[]> (_t1E07, _t1E09);
          int _t1E0B = 2;
          real _t1E0C = prim ^0068 (z1D5D, _t1E0B);
          real _t1E0D = prim +0017<$[]> (_t1E0A, _t1E0C);
          real _t1E0E = prim sin0171 (_t1E0D);
          real _t1E0F = prim *0034 (_t1E05, _t1E0E);
          real _t1E10 = 0.4e1;
          real _t1E11 = prim *0034 (_t1E10, x1D5B);
          real _t1E12 = prim *0034 (_t1E11, z1D5D);
          int _t1E13 = 2;
          real _t1E14 = prim ^0068 (x1D5B, _t1E13);
          int _t1E15 = 2;
          real _t1E16 = prim ^0068 (y1D5C, _t1E15);
          real _t1E17 = prim +0017<$[]> (_t1E14, _t1E16);
          int _t1E18 = 2;
          real _t1E19 = prim ^0068 (z1D5D, _t1E18);
          real _t1E1A = prim +0017<$[]> (_t1E17, _t1E19);
          real _t1E1B = prim cos0169 (_t1E1A);
          real _t1E1C = prim *0034 (_t1E12, _t1E1B);
          real _t1E1D = prim +0017<$[]> (_t1E0F, _t1E1C);
          int _t1E1E = -4;
          real _t1E1F = (real)_t1E1E;
          real _t1E20 = prim *0034 (_t1E1F, y1D5C);
          int _t1E21 = 3;
          real _t1E22 = prim ^0068 (z1D5D, _t1E21);
          real _t1E23 = prim *0034 (_t1E20, _t1E22);
          int _t1E24 = 2;
          real _t1E25 = prim ^0068 (x1D5B, _t1E24);
          int _t1E26 = 2;
          real _t1E27 = prim ^0068 (y1D5C, _t1E26);
          real _t1E28 = prim +0017<$[]> (_t1E25, _t1E27);
          int _t1E29 = 2;
          real _t1E2A = prim ^0068 (z1D5D, _t1E29);
          real _t1E2B = prim +0017<$[]> (_t1E28, _t1E2A);
          real _t1E2C = prim sin0171 (_t1E2B);
          real _t1E2D = prim *0034 (_t1E23, _t1E2C);
          real _t1E2E = 0.4e1;
          real _t1E2F = prim *0034 (_t1E2E, y1D5C);
          real _t1E30 = prim *0034 (_t1E2F, z1D5D);
          int _t1E31 = 2;
          real _t1E32 = prim ^0068 (x1D5B, _t1E31);
          int _t1E33 = 2;
          real _t1E34 = prim ^0068 (y1D5C, _t1E33);
          real _t1E35 = prim +0017<$[]> (_t1E32, _t1E34);
          int _t1E36 = 2;
          real _t1E37 = prim ^0068 (z1D5D, _t1E36);
          real _t1E38 = prim +0017<$[]> (_t1E35, _t1E37);
          real _t1E39 = prim cos0169 (_t1E38);
          real _t1E3A = prim *0034 (_t1E30, _t1E39);
          real _t1E3B = prim +0017<$[]> (_t1E2D, _t1E3A);
          int _t1E3C = -4;
          real _t1E3D = (real)_t1E3C;
          int _t1E3E = 4;
          real _t1E3F = prim ^0068 (z1D5D, _t1E3E);
          real _t1E40 = prim *0034 (_t1E3D, _t1E3F);
          int _t1E41 = 2;
          real _t1E42 = prim ^0068 (x1D5B, _t1E41);
          int _t1E43 = 2;
          real _t1E44 = prim ^0068 (y1D5C, _t1E43);
          real _t1E45 = prim +0017<$[]> (_t1E42, _t1E44);
          int _t1E46 = 2;
          real _t1E47 = prim ^0068 (z1D5D, _t1E46);
          real _t1E48 = prim +0017<$[]> (_t1E45, _t1E47);
          real _t1E49 = prim sin0171 (_t1E48);
          real _t1E4A = prim *0034 (_t1E40, _t1E49);
          real _t1E4B = 0.1e2;
          int _t1E4C = 2;
          real _t1E4D = prim ^0068 (z1D5D, _t1E4C);
          real _t1E4E = prim *0034 (_t1E4B, _t1E4D);
          int _t1E4F = 2;
          real _t1E50 = prim ^0068 (x1D5B, _t1E4F);
          int _t1E51 = 2;
          real _t1E52 = prim ^0068 (y1D5C, _t1E51);
          real _t1E53 = prim +0017<$[]> (_t1E50, _t1E52);
          int _t1E54 = 2;
          real _t1E55 = prim ^0068 (z1D5D, _t1E54);
          real _t1E56 = prim +0017<$[]> (_t1E53, _t1E55);
          real _t1E57 = prim cos0169 (_t1E56);
          real _t1E58 = prim *0034 (_t1E4E, _t1E57);
          real _t1E59 = prim +0017<$[]> (_t1E4A, _t1E58);
          real _t1E5A = 0.2e1;
          int _t1E5B = 2;
          real _t1E5C = prim ^0068 (x1D5B, _t1E5B);
          int _t1E5D = 2;
          real _t1E5E = prim ^0068 (y1D5C, _t1E5D);
          real _t1E5F = prim +0017<$[]> (_t1E5C, _t1E5E);
          int _t1E60 = 2;
          real _t1E61 = prim ^0068 (z1D5D, _t1E60);
          real _t1E62 = prim +0017<$[]> (_t1E5F, _t1E61);
          real _t1E63 = prim sin0171 (_t1E62);
          real _t1E64 = prim *0034 (_t1E5A, _t1E63);
          real _t1E65 = prim +0017<$[]> (_t1E59, _t1E64);
          vec3 _t1E66 = [_t1E1D, _t1E3B, _t1E65];
          tensor[3,3] hess1E67 = [_t1DAE, _t1DFF, _t1E66];
          H1D5A = hess1E67;
          real[3] _t1E68 = prim evals009F (H1D5A);
          int _t1E69 = 2;
          real _t1E6A = prim $sub01C0<real; %3> (_t1E68, _t1E69);
          real _t1E6B = prim unary -008B<$[]> (_t1E6A);
          real _t1E6C = prim |()|00B5<$[3]> (g1D1C);
          real _t1E6D = prim +0017<$[]> (fBias07CC, _t1E6C);
          real str1E6E = prim /0055 (_t1E6B, _t1E6D);
          _t1D1B = str1E6E;
          bool _t1E6F = prim >0080 (_t1D1B, fStrTh07CA);
          if _t1E6F {
            bool _t1E70;
            real _t1E71;
            real _t1E72 = 0.e0;
            _t1E71 = _t1E72;
            bool _t1E73 = prim >=007E (_t1E71, fMaskTh07CB);
            if _t1E73 {
              bool _t1E74 = true;
              _t1E70 = _t1E74;
            } else {
              _t1E70 = false;
            }
            _t1D1A = _t1E70;
          } else {
            _t1D1A = false;
          }
          _t1CFF = _t1D1A;
        } else {
          _t1CFF = false;
        }
        _t143A = _t1CFF;
        if _t143A {
          new point (npos142B, hh139B);
          int _t143B = 1;
          born13A5 = prim +0015 (born13A5, _t143B);
        }
        bool _t143C;
        bool _t143D;
        int _t143E = 0;
        bool _t143F = prim >007F (verb07DA, _t143E);
        if _t143F {
          _t143D = vv13A7;
        } else {
          _t143D = false;
        }
        if _t143D {
          _t143C = true;
        } else {
          int _t1440 = 1;
          _t143C = prim >007F (verb07DA, _t1440);
        }
        if _t143C {
          string _t1441 = "(i#";
          string _t1442 = " @ ";
          string _t1443 = "): ";
          print (ID139A, _t1441, iter1359, _t1442, pos1398, _t1443);
          string _t1444 = "nn=0; after birthing mvmt=";
          string _t1445 = "\n";
          print (_t1444, mvmt13A3, _t1445);
        }
        continue;
      }
      tensor[3,3] _t1446 = func fPerp12BE (pos1398);
      tensor[3,3] _t1447 = prim *0036<$[3,3]> (hh139B, _t1446);
      vec3 es1448 = prim •00CE<$[3,3]; $[3]; $[3]> (_t1447, force13F6);
      real _t1449 = prim |()|00B5<$[3]> (es1448);
      bool _t144A = prim >0080 (_t1449, tipd07CD);
      if _t144A {
        real _t144B = prim |()|00B5<$[3]> (es1448);
        real _t144C = prim /0055 (tipd07CD, _t144B);
        hh139B = prim *0034 (hh139B, _t144C);
        real _t144D = prim |()|00B5<$[3]> (es1448);
        real _t144E = prim /0055 (tipd07CD, _t144D);
        es1448 = prim *0038<$[3]> (es1448, _t144E);
      }
      vec3 _t144F = prim +0017<$[3]> (pos1398, es1448);
      vec3 _t1450 = func fStep128C (_t144F);
      vec3 fs1451 = prim *0036<$[3]> (sfs07DB, _t1450);
      real _t1452 = prim |()|00B5<$[3]> (fs1451);
      real _t1453 = prim *0034 (fsEps07D4, tipd07CD);
      real _t1454 = prim |()|00B5<$[3]> (es1448);
      real _t1455 = prim +0017<$[]> (_t1453, _t1454);
      real _t1456 = prim /0055 (_t1452, _t1455);
      real _t1457 = 0.5e0;
      bool _t1458 = prim >0080 (_t1456, _t1457);
      if _t1458 {
        real _t1459 = 0.5e0;
        hh139B = prim *0034 (hh139B, _t1459);
        bool _t145A;
        bool _t145B;
        int _t145C = 0;
        bool _t145D = prim >007F (verb07DA, _t145C);
        if _t145D {
          _t145B = vv13A7;
        } else {
          _t145B = false;
        }
        if _t145B {
          _t145A = true;
        } else {
          int _t145E = 1;
          _t145A = prim >007F (verb07DA, _t145E);
        }
        if _t145A {
          string _t145F = "(i#";
          string _t1460 = " @ ";
          string _t1461 = "): ";
          print (ID139A, _t145F, iter1359, _t1460, pos1398, _t1461);
          string _t1462 = "nn=";
          string _t1463 = "; |fs|/|es|=";
          real _t1464 = prim |()|00B5<$[3]> (fs1451);
          real _t1465 = prim |()|00B5<$[3]> (es1448);
          real _t1466 = prim /0055 (_t1464, _t1465);
          string _t1467 = " > 0.5; trying again with hh=";
          string _t1468 = "; mvmt=";
          string _t1469 = "\n";
          print (_t1462, nn13F7, _t1463, _t1466, _t1467, hh139B, _t1468, mvmt13A3, _t1469);
          string _t146A = "        fs=";
          string _t146B = "\n";
          print (_t146A, fs1451, _t146B);
          string _t146C = "        es=";
          string _t146D = "\n";
          print (_t146C, es1448, _t146D);
        }
        continue;
      }
      vec3 oldpos146E = pos1398;
      vec3 _t146F = prim +0017<$[3]> (fs1451, es1448);
      pos1398 = prim +0017<$[3]> (pos1398, _t146F);
      _pos1399 = pos1398;
      real newE1470 = 0.e0;
      closest13A4 = rad1342;
      real _t1471 = 0.e0;
      real _t1472 = 0.e0;
      real _t1473 = 0.e0;
      vec3 mno1474 = [_t1471, _t1472, _t1473];
      nn13F7 = 0;
      point[] _t1475 = prim sphere0198<point> (_pos1399, rad1342);
      foreach P1476 in _t1475 {
        vec3 _t1477 = P1476.pos1398;
        vec3 off1478 = prim -0026<$[3]> (_t1477, pos1398);
        real _t1479;
        real _t1CD7 = prim |()|00B5<$[3]> (off1478);
        real _t1CD8 = prim /0055 (_t1CD7, rad1342);
        real _t1CD9;
        real _t1CDA = 0.2e1;
        real _t1CDB = 0.3e1;
        real _t1CDC = prim /0055 (_t1CDA, _t1CDB);
        real s1CDD = prim -0026<$[]> (_t1CD8, _t1CDC);
        real _t1CDE;
        real _t1CDF = 0.2e1;
        real _t1CE0 = 0.3e1;
        real _t1CE1 = prim /0055 (_t1CDF, _t1CE0);
        bool _t1CE2 = prim <007A (_t1CD8, _t1CE1);
        if _t1CE2 {
          real _t1CE3 = 0.1e1;
          real _t1CE4 = -0.5646e1;
          real _t1CE5 = 0.119835e2;
          real _t1CE6 = -0.113535e2;
          real _t1CE7 = 0.40550625e1;
          real _t1CE8 = prim *0034 (_t1CE7, _t1CD8);
          real _t1CE9 = prim +0017<$[]> (_t1CE6, _t1CE8);
          real _t1CEA = prim *0034 (_t1CD8, _t1CE9);
          real _t1CEB = prim +0017<$[]> (_t1CE5, _t1CEA);
          real _t1CEC = prim *0034 (_t1CD8, _t1CEB);
          real _t1CED = prim +0017<$[]> (_t1CE4, _t1CEC);
          real _t1CEE = prim *0034 (_t1CD8, _t1CED);
          _t1CDE = prim +0017<$[]> (_t1CE3, _t1CEE);
        } else {
          real _t1CEF;
          real _t1CF0 = 0.1e1;
          bool _t1CF1 = prim <007A (_t1CD8, _t1CF0);
          if _t1CF1 {
            real _t1CF2 = -0.1e-2;
            real _t1CF3 = 0.9e-1;
            real _t1CF4 = -0.54e0;
            real _t1CF5 = 0.1215e1;
            real _t1CF6 = 0.972e0;
            real _t1CF7 = prim *0034 (_t1CF6, s1CDD);
            real _t1CF8 = prim -0026<$[]> (_t1CF5, _t1CF7);
            real _t1CF9 = prim *0034 (_t1CF8, s1CDD);
            real _t1CFA = prim +0017<$[]> (_t1CF4, _t1CF9);
            real _t1CFB = prim *0034 (_t1CFA, s1CDD);
            real _t1CFC = prim +0017<$[]> (_t1CF3, _t1CFB);
            real _t1CFD = prim *0034 (_t1CFC, s1CDD);
            real _t1CFE = prim *0034 (_t1CFD, s1CDD);
            _t1CEF = prim +0017<$[]> (_t1CF2, _t1CFE);
          } else {
            _t1CEF = 0.e0;
          }
          _t1CDE = _t1CEF;
        }
        _t1CD9 = _t1CDE;
        _t1479 = _t1CD9;
        newE1470 = prim +0017<$[]> (newE1470, _t1479);
        real _t147A = prim |()|00B5<$[3]> (off1478);
        closest13A4 = prim min0127 (closest13A4, _t147A);
        mno1474 = prim +0017<$[3]> (mno1474, off1478);
        int _t147B = 1;
        nn13F7 = prim +0015 (nn13F7, _t147B);
      }
      real _t147C = (real)nn13F7;
      mno1474 = prim /0057<$[3]> (mno1474, _t147C);
      bool _t147D;
      bool _t147E;
      int _t147F = 0;
      bool _t1480 = prim >007F (verb07DA, _t147F);
      if _t1480 {
        _t147E = vv13A7;
      } else {
        _t147E = false;
      }
      if _t147E {
        _t147D = true;
      } else {
        int _t1481 = 1;
        _t147D = prim >007F (verb07DA, _t1481);
      }
      if _t147D {
        string _t1482 = "(i#";
        string _t1483 = " @ ";
        string _t1484 = "): ";
        print (ID139A, _t1482, iter1359, _t1483, pos1398, _t1484);
        string _t1485 = "nn=";
        string _t1486 = "; oldE=";
        string _t1487 = " newE=";
        string _t1488 = "\n";
        print (_t1485, nn13F7, _t1486, oldE13F2, _t1487, newE1470, _t1488);
      }
      real _t1489 = prim -0026<$[]> (newE1470, oldE13F2);
      vec3 _t148A = prim -0026<$[3]> (pos1398, oldpos146E);
      vec3 _t148B = prim *0036<$[3]> (gdeTest07D1, _t148A);
      vec3 _t148C = prim unary -008B<$[3]> (force13F6);
      real _t148D = prim •00CE<$[3]; $[3]; $[]> (_t148B, _t148C);
      bool _t148E = prim >0080 (_t1489, _t148D);
      if _t148E {
        hh139B = prim *0034 (hh139B, gdeBack07D2);
        real _t148F = 0.e0;
        bool _t1490 = prim ==0084 (_t148F, hh139B);
        if _t1490 {
          string _t1491 = "(i#";
          string _t1492 = " @ ";
          string _t1493 = "): ";
          print (ID139A, _t1491, iter1359, _t1492, pos1398, _t1493);
          string _t1494 = "backtracked all the way to hh=0\n";
          print (_t1494);
          die;
        }
        bool _t1495;
        bool _t1496;
        int _t1497 = 0;
        bool _t1498 = prim >007F (verb07DA, _t1497);
        if _t1498 {
          _t1496 = vv13A7;
        } else {
          _t1496 = false;
        }
        if _t1496 {
          _t1495 = true;
        } else {
          int _t1499 = 1;
          _t1495 = prim >007F (verb07DA, _t1499);
        }
        if _t1495 {
          string _t149A = "(i#";
          string _t149B = " @ ";
          string _t149C = "): ";
          print (ID139A, _t149A, iter1359, _t149B, pos1398, _t149C);
          string _t149D = "nn=";
          string _t149E = "; oldE=";
          string _t149F = " newE=";
          string _t14A0 = "; backtracking; hh=";
          string _t14A1 = "; mvmt=";
          string _t14A2 = "\n";
          print (_t149D, nn13F7, _t149E, oldE13F2, _t149F, newE1470, _t14A0, hh139B, _t14A1, mvmt13A3, _t14A2);
          string _t14A3 = "      fs=";
          string _t14A4 = "\n";
          print (_t14A3, fs1451, _t14A4);
          string _t14A5 = "      es=";
          string _t14A6 = "\n";
          print (_t14A5, es1448, _t14A6);
          string _t14A7 = "      newE - oldE=";
          real _t14A8 = prim -0026<$[]> (newE1470, oldE13F2);
          string _t14A9 = "\n";
          print (_t14A7, _t14A8, _t14A9);
          string _t14AA = "      force=";
          string _t14AB = "\n";
          print (_t14AA, force13F6, _t14AB);
          string _t14AC = "      dpos=";
          vec3 _t14AD = prim -0026<$[3]> (pos1398, oldpos146E);
          string _t14AE = "\n";
          print (_t14AC, _t14AD, _t14AE);
          string _t14AF = "      0.5*(pos - oldpos).(-force)=";
          real _t14B0 = 0.5e0;
          vec3 _t14B1 = prim -0026<$[3]> (pos1398, oldpos146E);
          vec3 _t14B2 = prim *0036<$[3]> (_t14B0, _t14B1);
          vec3 _t14B3 = prim unary -008B<$[3]> (force13F6);
          real _t14B4 = prim •00CE<$[3]; $[3]; $[]> (_t14B2, _t14B3);
          string _t14B5 = "\n";
          print (_t14AF, _t14B4, _t14B5);
        }
        pos1398 = oldpos146E;
        _pos1399 = pos1398;
        continue;
      }
      hh139B = prim *0034 (hh139B, gdeOppor07D3);
      vec3 _t14B6 = prim +0017<$[3]> (fs1451, es1448);
      step139C = prim +0017<$[3]> (step139C, _t14B6);
      real _t14B7 = prim |()|00B5<$[3]> (step139C);
      real _t14B8 = prim /0055 (_t14B7, tipd07CD);
      trav13A2 = prim +0017<$[]> (trav13A2, _t14B8);
      real _t14B9 = prim |()|00B5<$[3]> (step139C);
      real _t14BA = prim /0055 (_t14B9, tipd07CD);
      mvmt13A3 = prim lerp0096<$[]> (_t14BA, mvmt13A3, hist07DC);
      real _t14BB = prim |()|00B5<$[3]> (step139C);
      real _t14BC = prim /0055 (_t14BB, tipd07CD);
      bool _t14BD = prim <007A (_t14BC, pcmvEps07D8);
      if _t14BD {
        int _t14BE;
        bool _t1CC7;
        int _t1CC8 = 0;
        bool _t1CC9 = prim >007F (pcp07DD, _t1CC8);
        if _t1CC9 {
          bool _t1CCA;
          int _t1CCB = 0;
          bool _t1CCC = prim >007F (iter1359, _t1CCB);
          if _t1CCC {
            int _t1CCD = 0;
            int _t1CCE = prim %00A1 (iter1359, pcp07DD);
            _t1CCA = prim ==0082 (_t1CCD, _t1CCE);
          } else {
            _t1CCA = false;
          }
          _t1CC7 = _t1CCA;
        } else {
          _t1CC7 = false;
        }
        if _t1CC7 {
          int _t1CCF = prim /0054 (iter1359, pcp07DD);
          int _t1CD0 = 2;
          int _t1CD1 = prim %00A1 (_t1CCF, _t1CD0);
          int _t1CD2 = 2;
          int _t1CD3 = prim *0033 (_t1CD1, _t1CD2);
          int _t1CD4 = 1;
          int _t1CD5 = prim -0024 (_t1CD3, _t1CD4);
          _t14BE = _t1CD5;
        } else {
          int _t1CD6 = 0;
          _t14BE = _t1CD6;
        }
        int _t14BF = 0;
        bool _t14C0 = prim !=0086 (_t14BE, _t14BF);
        if _t14C0 {
          bool _t14C1;
          int _t14C2;
          bool _t1CB7;
          int _t1CB8 = 0;
          bool _t1CB9 = prim >007F (pcp07DD, _t1CB8);
          if _t1CB9 {
            bool _t1CBA;
            int _t1CBB = 0;
            bool _t1CBC = prim >007F (iter1359, _t1CBB);
            if _t1CBC {
              int _t1CBD = 0;
              int _t1CBE = prim %00A1 (iter1359, pcp07DD);
              _t1CBA = prim ==0082 (_t1CBD, _t1CBE);
            } else {
              _t1CBA = false;
            }
            _t1CB7 = _t1CBA;
          } else {
            _t1CB7 = false;
          }
          if _t1CB7 {
            int _t1CBF = prim /0054 (iter1359, pcp07DD);
            int _t1CC0 = 2;
            int _t1CC1 = prim %00A1 (_t1CBF, _t1CC0);
            int _t1CC2 = 2;
            int _t1CC3 = prim *0033 (_t1CC1, _t1CC2);
            int _t1CC4 = 1;
            int _t1CC5 = prim -0024 (_t1CC3, _t1CC4);
            _t14C2 = _t1CC5;
          } else {
            int _t1CC6 = 0;
            _t14C2 = _t1CC6;
          }
          int _t14C3 = 0;
          bool _t14C4 = prim >007F (_t14C2, _t14C3);
          if _t14C4 {
            bool _t14C5;
            real _t14C6 = 0.e0;
            bool _t14C7 = prim <007A (newE1470, _t14C6);
            if _t14C7 {
              bool _t14C8;
              bool _t14C9 = prim <0079 (nn13F7, nnmin12ED);
              if _t14C9 {
                _t14C8 = prim <0079 (born13A5, nnmax12F4);
              } else {
                _t14C8 = false;
              }
              _t14C5 = _t14C8;
            } else {
              _t14C5 = false;
            }
            _t14C1 = _t14C5;
          } else {
            _t14C1 = false;
          }
          if _t14C1 {
            vec3 _t14CA = prim normalize0137<$[3]> (mno1474);
            vec3 _t14CB = prim *0036<$[3]> (tipd07CD, _t14CA);
            vec3 npos14CC = prim -0026<$[3]> (pos1398, _t14CB);
            vec3 _t14CD = func fStep128C (npos14CC);
            vec3 _t14CE = prim *0036<$[3]> (sfs07DB, _t14CD);
            npos14CC = prim +0017<$[3]> (npos14CC, _t14CE);
            vec3 _t14CF = func fStep128C (npos14CC);
            vec3 _t14D0 = prim *0036<$[3]> (sfs07DB, _t14CF);
            npos14CC = prim +0017<$[3]> (npos14CC, _t14D0);
            bool birth14D1 = true;
            int _t14D2 = 2;
            bool _t14D3 = prim ==0082 (fDim07DF, _t14D2);
            if _t14D3 {
              int _t14D4 = 4;
              bool _t14D5 = prim >=007D (nn13F7, _t14D4);
              if _t14D5 {
                real _t14D6 = prim *0034 (tipd07CD, mabd07CE);
                point[] _t14D7 = prim sphere0198<point> (npos14CC, _t14D6);
                foreach P14D8 in _t14D7 {
                  birth14D1 = false;
                }
                if birth14D1 {
                  real _t14D9;
                  real _t1C93 = pos1398[0];
                  real _t1C94 = func urnd135C (_t1C93);
                  real _t1C95 = pos1398[1];
                  real _t1C96 = func urnd135C (_t1C95);
                  real _t1C97 = prim +0017<$[]> (_t1C94, _t1C96);
                  real _t1C98 = pos1398[2];
                  real _t1C99 = func urnd135C (_t1C98);
                  real _t1C9A = prim +0017<$[]> (_t1C97, _t1C99);
                  real _t1C9B = 0.1e1;
                  real _t1C9C = prim fmod018A (_t1C9A, _t1C9B);
                  _t14D9 = _t1C9C;
                  int _t14DA = prim -0024 (nnmin12ED, nn13F7);
                  real _t14DB = (real)_t14DA;
                  real _t14DC = prim $i2r01B6 (nnmin12ED);
                  real _t14DD = prim /0055 (_t14DB, _t14DC);
                  birth14D1 = prim <007A (_t14D9, _t14DD);
                }
              }
            }
            if birth14D1 {
              bool _t14DE;
              bool _t1B1D;
              bool _t1B1E;
              real _t1B1F = 0.e0;
              real _t1B20 = 0.e0;
              real _t1B21 = 0.e0;
              vec3 _t1B22 = [_t1B1F, _t1B20, _t1B21];
              vec3 mid1B23 = prim -0026<$[3]> (npos14CC, _t1B22);
              bool _t1B32;
              real _t1B33 = prim |()|00B5<$[3]> (mid1B23);
              real _t1B34 = 0.4e1;
              bool _t1B35 = prim <007A (_t1B33, _t1B34);
              if _t1B35 {
                real _t1B36 = prim |()|00B5<$[3]> (mid1B23);
                real _t1B37 = 0.3e1;
                _t1B32 = prim >0080 (_t1B36, _t1B37);
              } else {
                _t1B32 = false;
              }
              _t1B1E = _t1B32;
              if _t1B1E {
                bool _t1B38;
                real _t1B39;
                vec3 g1B3A;
                real x1B3B = npos14CC[0];
                real y1B3C = npos14CC[1];
                real z1B3D = npos14CC[2];
                real _t1B3E = 0.2e1;
                real _t1B3F = prim *0034 (_t1B3E, x1B3B);
                int _t1B40 = 2;
                real _t1B41 = prim ^0068 (z1B3D, _t1B40);
                real _t1B42 = prim *0034 (_t1B3F, _t1B41);
                int _t1B43 = 2;
                real _t1B44 = prim ^0068 (x1B3B, _t1B43);
                int _t1B45 = 2;
                real _t1B46 = prim ^0068 (y1B3C, _t1B45);
                real _t1B47 = prim +0017<$[]> (_t1B44, _t1B46);
                int _t1B48 = 2;
                real _t1B49 = prim ^0068 (z1B3D, _t1B48);
                real _t1B4A = prim +0017<$[]> (_t1B47, _t1B49);
                real _t1B4B = prim cos0169 (_t1B4A);
                real _t1B4C = prim *0034 (_t1B42, _t1B4B);
                real _t1B4D = 0.2e1;
                real _t1B4E = prim *0034 (_t1B4D, y1B3C);
                int _t1B4F = 2;
                real _t1B50 = prim ^0068 (z1B3D, _t1B4F);
                real _t1B51 = prim *0034 (_t1B4E, _t1B50);
                int _t1B52 = 2;
                real _t1B53 = prim ^0068 (x1B3B, _t1B52);
                int _t1B54 = 2;
                real _t1B55 = prim ^0068 (y1B3C, _t1B54);
                real _t1B56 = prim +0017<$[]> (_t1B53, _t1B55);
                int _t1B57 = 2;
                real _t1B58 = prim ^0068 (z1B3D, _t1B57);
                real _t1B59 = prim +0017<$[]> (_t1B56, _t1B58);
                real _t1B5A = prim cos0169 (_t1B59);
                real _t1B5B = prim *0034 (_t1B51, _t1B5A);
                real _t1B5C = 0.2e1;
                int _t1B5D = 3;
                real _t1B5E = prim ^0068 (z1B3D, _t1B5D);
                real _t1B5F = prim *0034 (_t1B5C, _t1B5E);
                int _t1B60 = 2;
                real _t1B61 = prim ^0068 (x1B3B, _t1B60);
                int _t1B62 = 2;
                real _t1B63 = prim ^0068 (y1B3C, _t1B62);
                real _t1B64 = prim +0017<$[]> (_t1B61, _t1B63);
                int _t1B65 = 2;
                real _t1B66 = prim ^0068 (z1B3D, _t1B65);
                real _t1B67 = prim +0017<$[]> (_t1B64, _t1B66);
                real _t1B68 = prim cos0169 (_t1B67);
                real _t1B69 = prim *0034 (_t1B5F, _t1B68);
                real _t1B6A = 0.2e1;
                real _t1B6B = prim *0034 (_t1B6A, z1B3D);
                int _t1B6C = 2;
                real _t1B6D = prim ^0068 (x1B3B, _t1B6C);
                int _t1B6E = 2;
                real _t1B6F = prim ^0068 (y1B3C, _t1B6E);
                real _t1B70 = prim +0017<$[]> (_t1B6D, _t1B6F);
                int _t1B71 = 2;
                real _t1B72 = prim ^0068 (z1B3D, _t1B71);
                real _t1B73 = prim +0017<$[]> (_t1B70, _t1B72);
                real _t1B74 = prim sin0171 (_t1B73);
                real _t1B75 = prim *0034 (_t1B6B, _t1B74);
                real _t1B76 = prim +0017<$[]> (_t1B69, _t1B75);
                vec3 g1B77 = [_t1B4C, _t1B5B, _t1B76];
                g1B3A = g1B77;
                tensor[3,3] H1B78;
                real x1B79 = npos14CC[0];
                real y1B7A = npos14CC[1];
                real z1B7B = npos14CC[2];
                int _t1B7C = -4;
                real _t1B7D = (real)_t1B7C;
                int _t1B7E = 2;
                real _t1B7F = prim ^0068 (x1B79, _t1B7E);
                real _t1B80 = prim *0034 (_t1B7D, _t1B7F);
                int _t1B81 = 2;
                real _t1B82 = prim ^0068 (z1B7B, _t1B81);
                real _t1B83 = prim *0034 (_t1B80, _t1B82);
                int _t1B84 = 2;
                real _t1B85 = prim ^0068 (x1B79, _t1B84);
                int _t1B86 = 2;
                real _t1B87 = prim ^0068 (y1B7A, _t1B86);
                real _t1B88 = prim +0017<$[]> (_t1B85, _t1B87);
                int _t1B89 = 2;
                real _t1B8A = prim ^0068 (z1B7B, _t1B89);
                real _t1B8B = prim +0017<$[]> (_t1B88, _t1B8A);
                real _t1B8C = prim sin0171 (_t1B8B);
                real _t1B8D = prim *0034 (_t1B83, _t1B8C);
                real _t1B8E = 0.2e1;
                int _t1B8F = 2;
                real _t1B90 = prim ^0068 (z1B7B, _t1B8F);
                real _t1B91 = prim *0034 (_t1B8E, _t1B90);
                int _t1B92 = 2;
                real _t1B93 = prim ^0068 (x1B79, _t1B92);
                int _t1B94 = 2;
                real _t1B95 = prim ^0068 (y1B7A, _t1B94);
                real _t1B96 = prim +0017<$[]> (_t1B93, _t1B95);
                int _t1B97 = 2;
                real _t1B98 = prim ^0068 (z1B7B, _t1B97);
                real _t1B99 = prim +0017<$[]> (_t1B96, _t1B98);
                real _t1B9A = prim cos0169 (_t1B99);
                real _t1B9B = prim *0034 (_t1B91, _t1B9A);
                real _t1B9C = prim +0017<$[]> (_t1B8D, _t1B9B);
                int _t1B9D = -4;
                real _t1B9E = (real)_t1B9D;
                real _t1B9F = prim *0034 (_t1B9E, x1B79);
                real _t1BA0 = prim *0034 (_t1B9F, y1B7A);
                int _t1BA1 = 2;
                real _t1BA2 = prim ^0068 (z1B7B, _t1BA1);
                real _t1BA3 = prim *0034 (_t1BA0, _t1BA2);
                int _t1BA4 = 2;
                real _t1BA5 = prim ^0068 (x1B79, _t1BA4);
                int _t1BA6 = 2;
                real _t1BA7 = prim ^0068 (y1B7A, _t1BA6);
                real _t1BA8 = prim +0017<$[]> (_t1BA5, _t1BA7);
                int _t1BA9 = 2;
                real _t1BAA = prim ^0068 (z1B7B, _t1BA9);
                real _t1BAB = prim +0017<$[]> (_t1BA8, _t1BAA);
                real _t1BAC = prim sin0171 (_t1BAB);
                real _t1BAD = prim *0034 (_t1BA3, _t1BAC);
                int _t1BAE = -4;
                real _t1BAF = (real)_t1BAE;
                real _t1BB0 = prim *0034 (_t1BAF, x1B79);
                int _t1BB1 = 3;
                real _t1BB2 = prim ^0068 (z1B7B, _t1BB1);
                real _t1BB3 = prim *0034 (_t1BB0, _t1BB2);
                int _t1BB4 = 2;
                real _t1BB5 = prim ^0068 (x1B79, _t1BB4);
                int _t1BB6 = 2;
                real _t1BB7 = prim ^0068 (y1B7A, _t1BB6);
                real _t1BB8 = prim +0017<$[]> (_t1BB5, _t1BB7);
                int _t1BB9 = 2;
                real _t1BBA = prim ^0068 (z1B7B, _t1BB9);
                real _t1BBB = prim +0017<$[]> (_t1BB8, _t1BBA);
                real _t1BBC = prim sin0171 (_t1BBB);
                real _t1BBD = prim *0034 (_t1BB3, _t1BBC);
                real _t1BBE = 0.4e1;
                real _t1BBF = prim *0034 (_t1BBE, x1B79);
                real _t1BC0 = prim *0034 (_t1BBF, z1B7B);
                int _t1BC1 = 2;
                real _t1BC2 = prim ^0068 (x1B79, _t1BC1);
                int _t1BC3 = 2;
                real _t1BC4 = prim ^0068 (y1B7A, _t1BC3);
                real _t1BC5 = prim +0017<$[]> (_t1BC2, _t1BC4);
                int _t1BC6 = 2;
                real _t1BC7 = prim ^0068 (z1B7B, _t1BC6);
                real _t1BC8 = prim +0017<$[]> (_t1BC5, _t1BC7);
                real _t1BC9 = prim cos0169 (_t1BC8);
                real _t1BCA = prim *0034 (_t1BC0, _t1BC9);
                real _t1BCB = prim +0017<$[]> (_t1BBD, _t1BCA);
                vec3 _t1BCC = [_t1B9C, _t1BAD, _t1BCB];
                int _t1BCD = -4;
                real _t1BCE = (real)_t1BCD;
                real _t1BCF = prim *0034 (_t1BCE, x1B79);
                real _t1BD0 = prim *0034 (_t1BCF, y1B7A);
                int _t1BD1 = 2;
                real _t1BD2 = prim ^0068 (z1B7B, _t1BD1);
                real _t1BD3 = prim *0034 (_t1BD0, _t1BD2);
                int _t1BD4 = 2;
                real _t1BD5 = prim ^0068 (x1B79, _t1BD4);
                int _t1BD6 = 2;
                real _t1BD7 = prim ^0068 (y1B7A, _t1BD6);
                real _t1BD8 = prim +0017<$[]> (_t1BD5, _t1BD7);
                int _t1BD9 = 2;
                real _t1BDA = prim ^0068 (z1B7B, _t1BD9);
                real _t1BDB = prim +0017<$[]> (_t1BD8, _t1BDA);
                real _t1BDC = prim sin0171 (_t1BDB);
                real _t1BDD = prim *0034 (_t1BD3, _t1BDC);
                int _t1BDE = -4;
                real _t1BDF = (real)_t1BDE;
                int _t1BE0 = 2;
                real _t1BE1 = prim ^0068 (y1B7A, _t1BE0);
                real _t1BE2 = prim *0034 (_t1BDF, _t1BE1);
                int _t1BE3 = 2;
                real _t1BE4 = prim ^0068 (z1B7B, _t1BE3);
                real _t1BE5 = prim *0034 (_t1BE2, _t1BE4);
                int _t1BE6 = 2;
                real _t1BE7 = prim ^0068 (x1B79, _t1BE6);
                int _t1BE8 = 2;
                real _t1BE9 = prim ^0068 (y1B7A, _t1BE8);
                real _t1BEA = prim +0017<$[]> (_t1BE7, _t1BE9);
                int _t1BEB = 2;
                real _t1BEC = prim ^0068 (z1B7B, _t1BEB);
                real _t1BED = prim +0017<$[]> (_t1BEA, _t1BEC);
                real _t1BEE = prim sin0171 (_t1BED);
                real _t1BEF = prim *0034 (_t1BE5, _t1BEE);
                real _t1BF0 = 0.2e1;
                int _t1BF1 = 2;
                real _t1BF2 = prim ^0068 (z1B7B, _t1BF1);
                real _t1BF3 = prim *0034 (_t1BF0, _t1BF2);
                int _t1BF4 = 2;
                real _t1BF5 = prim ^0068 (x1B79, _t1BF4);
                int _t1BF6 = 2;
                real _t1BF7 = prim ^0068 (y1B7A, _t1BF6);
                real _t1BF8 = prim +0017<$[]> (_t1BF5, _t1BF7);
                int _t1BF9 = 2;
                real _t1BFA = prim ^0068 (z1B7B, _t1BF9);
                real _t1BFB = prim +0017<$[]> (_t1BF8, _t1BFA);
                real _t1BFC = prim cos0169 (_t1BFB);
                real _t1BFD = prim *0034 (_t1BF3, _t1BFC);
                real _t1BFE = prim +0017<$[]> (_t1BEF, _t1BFD);
                int _t1BFF = -4;
                real _t1C00 = (real)_t1BFF;
                real _t1C01 = prim *0034 (_t1C00, y1B7A);
                int _t1C02 = 3;
                real _t1C03 = prim ^0068 (z1B7B, _t1C02);
                real _t1C04 = prim *0034 (_t1C01, _t1C03);
                int _t1C05 = 2;
                real _t1C06 = prim ^0068 (x1B79, _t1C05);
                int _t1C07 = 2;
                real _t1C08 = prim ^0068 (y1B7A, _t1C07);
                real _t1C09 = prim +0017<$[]> (_t1C06, _t1C08);
                int _t1C0A = 2;
                real _t1C0B = prim ^0068 (z1B7B, _t1C0A);
                real _t1C0C = prim +0017<$[]> (_t1C09, _t1C0B);
                real _t1C0D = prim sin0171 (_t1C0C);
                real _t1C0E = prim *0034 (_t1C04, _t1C0D);
                real _t1C0F = 0.4e1;
                real _t1C10 = prim *0034 (_t1C0F, y1B7A);
                real _t1C11 = prim *0034 (_t1C10, z1B7B);
                int _t1C12 = 2;
                real _t1C13 = prim ^0068 (x1B79, _t1C12);
                int _t1C14 = 2;
                real _t1C15 = prim ^0068 (y1B7A, _t1C14);
                real _t1C16 = prim +0017<$[]> (_t1C13, _t1C15);
                int _t1C17 = 2;
                real _t1C18 = prim ^0068 (z1B7B, _t1C17);
                real _t1C19 = prim +0017<$[]> (_t1C16, _t1C18);
                real _t1C1A = prim cos0169 (_t1C19);
                real _t1C1B = prim *0034 (_t1C11, _t1C1A);
                real _t1C1C = prim +0017<$[]> (_t1C0E, _t1C1B);
                vec3 _t1C1D = [_t1BDD, _t1BFE, _t1C1C];
                int _t1C1E = -4;
                real _t1C1F = (real)_t1C1E;
                real _t1C20 = prim *0034 (_t1C1F, x1B79);
                int _t1C21 = 3;
                real _t1C22 = prim ^0068 (z1B7B, _t1C21);
                real _t1C23 = prim *0034 (_t1C20, _t1C22);
                int _t1C24 = 2;
                real _t1C25 = prim ^0068 (x1B79, _t1C24);
                int _t1C26 = 2;
                real _t1C27 = prim ^0068 (y1B7A, _t1C26);
                real _t1C28 = prim +0017<$[]> (_t1C25, _t1C27);
                int _t1C29 = 2;
                real _t1C2A = prim ^0068 (z1B7B, _t1C29);
                real _t1C2B = prim +0017<$[]> (_t1C28, _t1C2A);
                real _t1C2C = prim sin0171 (_t1C2B);
                real _t1C2D = prim *0034 (_t1C23, _t1C2C);
                real _t1C2E = 0.4e1;
                real _t1C2F = prim *0034 (_t1C2E, x1B79);
                real _t1C30 = prim *0034 (_t1C2F, z1B7B);
                int _t1C31 = 2;
                real _t1C32 = prim ^0068 (x1B79, _t1C31);
                int _t1C33 = 2;
                real _t1C34 = prim ^0068 (y1B7A, _t1C33);
                real _t1C35 = prim +0017<$[]> (_t1C32, _t1C34);
                int _t1C36 = 2;
                real _t1C37 = prim ^0068 (z1B7B, _t1C36);
                real _t1C38 = prim +0017<$[]> (_t1C35, _t1C37);
                real _t1C39 = prim cos0169 (_t1C38);
                real _t1C3A = prim *0034 (_t1C30, _t1C39);
                real _t1C3B = prim +0017<$[]> (_t1C2D, _t1C3A);
                int _t1C3C = -4;
                real _t1C3D = (real)_t1C3C;
                real _t1C3E = prim *0034 (_t1C3D, y1B7A);
                int _t1C3F = 3;
                real _t1C40 = prim ^0068 (z1B7B, _t1C3F);
                real _t1C41 = prim *0034 (_t1C3E, _t1C40);
                int _t1C42 = 2;
                real _t1C43 = prim ^0068 (x1B79, _t1C42);
                int _t1C44 = 2;
                real _t1C45 = prim ^0068 (y1B7A, _t1C44);
                real _t1C46 = prim +0017<$[]> (_t1C43, _t1C45);
                int _t1C47 = 2;
                real _t1C48 = prim ^0068 (z1B7B, _t1C47);
                real _t1C49 = prim +0017<$[]> (_t1C46, _t1C48);
                real _t1C4A = prim sin0171 (_t1C49);
                real _t1C4B = prim *0034 (_t1C41, _t1C4A);
                real _t1C4C = 0.4e1;
                real _t1C4D = prim *0034 (_t1C4C, y1B7A);
                real _t1C4E = prim *0034 (_t1C4D, z1B7B);
                int _t1C4F = 2;
                real _t1C50 = prim ^0068 (x1B79, _t1C4F);
                int _t1C51 = 2;
                real _t1C52 = prim ^0068 (y1B7A, _t1C51);
                real _t1C53 = prim +0017<$[]> (_t1C50, _t1C52);
                int _t1C54 = 2;
                real _t1C55 = prim ^0068 (z1B7B, _t1C54);
                real _t1C56 = prim +0017<$[]> (_t1C53, _t1C55);
                real _t1C57 = prim cos0169 (_t1C56);
                real _t1C58 = prim *0034 (_t1C4E, _t1C57);
                real _t1C59 = prim +0017<$[]> (_t1C4B, _t1C58);
                int _t1C5A = -4;
                real _t1C5B = (real)_t1C5A;
                int _t1C5C = 4;
                real _t1C5D = prim ^0068 (z1B7B, _t1C5C);
                real _t1C5E = prim *0034 (_t1C5B, _t1C5D);
                int _t1C5F = 2;
                real _t1C60 = prim ^0068 (x1B79, _t1C5F);
                int _t1C61 = 2;
                real _t1C62 = prim ^0068 (y1B7A, _t1C61);
                real _t1C63 = prim +0017<$[]> (_t1C60, _t1C62);
                int _t1C64 = 2;
                real _t1C65 = prim ^0068 (z1B7B, _t1C64);
                real _t1C66 = prim +0017<$[]> (_t1C63, _t1C65);
                real _t1C67 = prim sin0171 (_t1C66);
                real _t1C68 = prim *0034 (_t1C5E, _t1C67);
                real _t1C69 = 0.1e2;
                int _t1C6A = 2;
                real _t1C6B = prim ^0068 (z1B7B, _t1C6A);
                real _t1C6C = prim *0034 (_t1C69, _t1C6B);
                int _t1C6D = 2;
                real _t1C6E = prim ^0068 (x1B79, _t1C6D);
                int _t1C6F = 2;
                real _t1C70 = prim ^0068 (y1B7A, _t1C6F);
                real _t1C71 = prim +0017<$[]> (_t1C6E, _t1C70);
                int _t1C72 = 2;
                real _t1C73 = prim ^0068 (z1B7B, _t1C72);
                real _t1C74 = prim +0017<$[]> (_t1C71, _t1C73);
                real _t1C75 = prim cos0169 (_t1C74);
                real _t1C76 = prim *0034 (_t1C6C, _t1C75);
                real _t1C77 = prim +0017<$[]> (_t1C68, _t1C76);
                real _t1C78 = 0.2e1;
                int _t1C79 = 2;
                real _t1C7A = prim ^0068 (x1B79, _t1C79);
                int _t1C7B = 2;
                real _t1C7C = prim ^0068 (y1B7A, _t1C7B);
                real _t1C7D = prim +0017<$[]> (_t1C7A, _t1C7C);
                int _t1C7E = 2;
                real _t1C7F = prim ^0068 (z1B7B, _t1C7E);
                real _t1C80 = prim +0017<$[]> (_t1C7D, _t1C7F);
                real _t1C81 = prim sin0171 (_t1C80);
                real _t1C82 = prim *0034 (_t1C78, _t1C81);
                real _t1C83 = prim +0017<$[]> (_t1C77, _t1C82);
                vec3 _t1C84 = [_t1C3B, _t1C59, _t1C83];
                tensor[3,3] hess1C85 = [_t1BCC, _t1C1D, _t1C84];
                H1B78 = hess1C85;
                real[3] _t1C86 = prim evals009F (H1B78);
                int _t1C87 = 2;
                real _t1C88 = prim $sub01C0<real; %3> (_t1C86, _t1C87);
                real _t1C89 = prim unary -008B<$[]> (_t1C88);
                real _t1C8A = prim |()|00B5<$[3]> (g1B3A);
                real _t1C8B = prim +0017<$[]> (fBias07CC, _t1C8A);
                real str1C8C = prim /0055 (_t1C89, _t1C8B);
                _t1B39 = str1C8C;
                bool _t1C8D = prim >0080 (_t1B39, fStrTh07CA);
                if _t1C8D {
                  bool _t1C8E;
                  real _t1C8F;
                  real _t1C90 = 0.e0;
                  _t1C8F = _t1C90;
                  bool _t1C91 = prim >=007E (_t1C8F, fMaskTh07CB);
                  if _t1C91 {
                    bool _t1C92 = true;
                    _t1C8E = _t1C92;
                  } else {
                    _t1C8E = false;
                  }
                  _t1B38 = _t1C8E;
                } else {
                  _t1B38 = false;
                }
                _t1B1D = _t1B38;
              } else {
                _t1B1D = false;
              }
              _t14DE = _t1B1D;
              if _t14DE {
                new point (npos14CC, hh139B);
                int _t14DF = 1;
                born13A5 = prim +0015 (born13A5, _t14DF);
              }
            }
          } else {
            int _t14E0;
            bool _t1CA7;
            int _t1CA8 = 0;
            bool _t1CA9 = prim >007F (pcp07DD, _t1CA8);
            if _t1CA9 {
              bool _t1CAA;
              int _t1CAB = 0;
              bool _t1CAC = prim >007F (iter1359, _t1CAB);
              if _t1CAC {
                int _t1CAD = 0;
                int _t1CAE = prim %00A1 (iter1359, pcp07DD);
                _t1CAA = prim ==0082 (_t1CAD, _t1CAE);
              } else {
                _t1CAA = false;
              }
              _t1CA7 = _t1CAA;
            } else {
              _t1CA7 = false;
            }
            if _t1CA7 {
              int _t1CAF = prim /0054 (iter1359, pcp07DD);
              int _t1CB0 = 2;
              int _t1CB1 = prim %00A1 (_t1CAF, _t1CB0);
              int _t1CB2 = 2;
              int _t1CB3 = prim *0033 (_t1CB1, _t1CB2);
              int _t1CB4 = 1;
              int _t1CB5 = prim -0024 (_t1CB3, _t1CB4);
              _t14E0 = _t1CB5;
            } else {
              int _t1CB6 = 0;
              _t14E0 = _t1CB6;
            }
            int _t14E1 = 0;
            bool _t14E2 = prim <0079 (_t14E0, _t14E1);
            if _t14E2 {
              real _t14E3 = 0.e0;
              bool _t14E4 = prim >0080 (newE1470, _t14E3);
              if _t14E4 {
                bool _t14E5 = prim >007F (nn13F7, nnmax12F4);
                if _t14E5 {
                  real _t14E6;
                  real _t1C9D = pos1398[0];
                  real _t1C9E = func urnd135C (_t1C9D);
                  real _t1C9F = pos1398[1];
                  real _t1CA0 = func urnd135C (_t1C9F);
                  real _t1CA1 = prim +0017<$[]> (_t1C9E, _t1CA0);
                  real _t1CA2 = pos1398[2];
                  real _t1CA3 = func urnd135C (_t1CA2);
                  real _t1CA4 = prim +0017<$[]> (_t1CA1, _t1CA3);
                  real _t1CA5 = 0.1e1;
                  real _t1CA6 = prim fmod018A (_t1CA4, _t1CA5);
                  _t14E6 = _t1CA6;
                  int _t14E7 = prim -0024 (nn13F7, nnmax12F4);
                  real _t14E8 = (real)_t14E7;
                  real _t14E9 = prim $i2r01B6 (nn13F7);
                  real _t14EA = prim /0055 (_t14E8, _t14E9);
                  bool _t14EB = prim <007A (_t14E6, _t14EA);
                  if _t14EB {
                    die;
                  }
                }
              }
            }
          }
        }
      }
    }
    first13A6 = false;
  }
}
collection {
  int _t14F7 = 0;
  int _t14F8 = prim length0123<vec3> (ipos07DE);
  int _t14F9 = 1;
  int _t14FA = prim -0024 (_t14F8, _t14F9);
  int[] _t14FB = prim $range01C3 (_t14F7, _t14FA);
  foreach ii14FC in _t14FB {
    vec3 _t14FD = prim $dynsub01C2<vec3> (ipos07DE, ii14FC);
    real _t14FE = 0.1e1;
    new point (_t14FD, _t14FE);
  }
}
update {
  int pop14FF = prim numActive01A2 ();
  int _t1500;
  bool _t1501 = prim !=0086 (pop14FF, popLast135B);
  if _t1501 {
    _t1500 = 1;
  } else {
    _t1500 = 0;
  }
  int pc1502 = _t1500;
  real _t1503 = (real)pc1502;
  rpc135A = prim lerp0096<$[]> (_t1503, rpc135A, pchist1358);
  bool res1504= all { (P1507) => {
      bool _t1508 = P1507.found13A0;
      return _t1508;
    } (P1505, P1505)
  | P1505 in all };
  bool allfound150A = res1504;
  real _t150B = 0.1e3;
  real res150C= sum<real> { (P1510) => {
      real _t1511;
      bool _t1512 = P1510.found13A0;
      if _t1512 {
        _t1511 = 0.1e1;
      } else {
        _t1511 = 0.e0;
      }
      return _t1511;
    } (P150D, P150D)
  | P150D in all };
  int num1514 = prim numStrands01A4 ();
  real rNum1515 = (real)num1514;
  real mean1516 = prim /0055 (res150C, rNum1515);
  real percfound1517 = prim *0034 (_t150B, mean1516);
  real res1518= sum<real> { (P151B) => {
      real _t151C = P151B.closest13A4;
      return _t151C;
    } (P1519, P1519)
  | P1519 in all };
  int num151E = prim numStrands01A4 ();
  real rNum151F = (real)num151E;
  real mean1520 = prim /0055 (res1518, rNum151F);
  real meancl1521 = mean1520;
  real res1522= sum<real> { (P1528, meancl152A) => {
      real _t1529 = P1528.closest13A4;
      real _t152B = prim -0026<$[]> (_t1529, meancl152A);
      int _t152C = 2;
      real _t152D = prim ^0068 (_t152B, _t152C);
      return _t152D;
    } (P1523, P1523, meancl1521)
  | P1523 in all };
  int num152F = prim numStrands01A4 ();
  real rNum1530 = (real)num152F;
  real mean1531 = prim /0055 (res1522, rNum1530);
  real varicl1532 = mean1531;
  real _t1533 = prim sqrt0165 (varicl1532);
  real covcl1534 = prim /0055 (_t1533, meancl1521);
  real res1535= max<real> { (P1538) => {
      real _t1539 = P1538.mvmt13A3;
      return _t1539;
    } (P1536, P1536)
  | P1536 in all };
  real maxmvmt153B = res1535;
  string _t153C = "======= finished iter ";
  string _t153D = " w/ ";
  string _t153E = ")";
  string _t153F = "; %found=";
  string _t1540 = "; mean(hh)=";
  real res1541= sum<real> { (P1544) => {
      real _t1545 = P1544.hh139B;
      return _t1545;
    } (P1542, P1542)
  | P1542 in all };
  int num1547 = prim numStrands01A4 ();
  real rNum1548 = (real)num1547;
  real mean1549 = prim /0055 (res1541, rNum1548);
  string _t154A = "; mean(cl)=";
  string _t154B = "; COV(cl)=";
  string _t154C = "; max(mvmt)=";
  string _t154D = "; pc=";
  string _t154E = "; rpc=";
  string _t154F = "\n";
  print (_t153C, iter1359, _t153D, pop14FF, _t153E, _t153F, percfound1517, _t1540, mean1549, _t154A, meancl1521, _t154B, covcl1534, _t154C, maxmvmt153B, _t154D, pc1502, _t154E, rpc135A, _t154F);
  bool _t1550;
  if allfound150A {
    bool _t1551;
    bool _t1552 = prim <007A (covcl1534, geoEps07D5);
    if _t1552 {
      bool _t1553;
      bool _t1554 = prim <007A (maxmvmt153B, mvmtEps07D6);
      if _t1554 {
        _t1553 = prim <007A (rpc135A, rpcEps07D7);
      } else {
        _t1553 = false;
      }
      _t1551 = _t1553;
    } else {
      _t1551 = false;
    }
    _t1550 = _t1551;
  } else {
    _t1550 = false;
  }
  if _t1550 {
    string _t1555 = "======= Stabilizing ";
    int _t1556 = prim numActive01A2 ();
    string _t1557 = " (iter ";
    string _t1558 = ")";
    string _t1559 = "; COV(cl)=";
    string _t155A = " < ";
    string _t155B = "; max(mvmt)=";
    string _t155C = " < ";
    string _t155D = "; rpc=";
    string _t155E = " < ";
    string _t155F = "\n";
    print (_t1555, _t1556, _t1557, iter1359, _t1558, _t1559, covcl1534, _t155A, geoEps07D5, _t155B, maxmvmt153B, _t155C, mvmtEps07D6, _t155D, rpc135A, _t155E, rpcEps07D7, _t155F);
    stabilize_all;
  } else {
    string _t1560 = "======= Stabilizing ";
    int _t1561 = prim numActive01A2 ();
    string _t1562 = " (iter ";
    string _t1563 = ")";
    string _t1564 = "; COV(cl)=";
    string _t1565 = " > ";
    string _t1566 = "; max(mvmt)=";
    string _t1567 = " > ";
    string _t1568 = "; rpc=";
    string _t1569 = " > ";
    string _t156A = "\n";
    print (_t1560, _t1561, _t1562, iter1359, _t1563, _t1564, covcl1534, _t1565, geoEps07D5, _t1566, maxmvmt153B, _t1567, mvmtEps07D6, _t1568, rpc135A, _t1569, rpcEps07D7, _t156A);
  }
  int _t156B = 1;
  iter1359 = prim +0015 (iter1359, _t156B);
  popLast135B = pop14FF;
}
/* Program end */
/* Simplified Program (after after simplify variables) start */
properties: GlobalInit,StabilizeAll,GlobalReduce,StrandSets,GlobalUpdate,NewStrands,StrandCommunication,StrandsMayDie,HasInputs,HasGlobals,ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
input FemData:Mesh meshData07BA;
input FemData:Space 0space07C6_intermedateGlobal07C7;
input FemData:FemFunc 0data07C8_intermedateGlobal07C9;
input real fStrTh07CA("Feature strength threshold");
input real fMaskTh07CB("feature mask threshold") = <default>;
input real fBias07CC("Bias in feature strength computing") = <default>;
input real tipd07CD("Target inter-particle distance") = <default>;
input real mabd07CE("Min allowed birth distance (> 0.7351)") = <default>;
input real travMax07CF("Max allowed travel to or on feature") = <default>;
input int nfsMax07D0("Max allowed # feature steps ") = <default>;
input real gdeTest07D1("Scaling in sufficient decrease test") = <default>;
input real gdeBack07D2("How to scale stepsize for backtrack") = <default>;
input real gdeOppor07D3("Opportunistic stepsize increase") = <default>;
input real fsEps07D4("Conv. thresh. on feature step size");
input real geoEps07D5("Conv. thresh. on system geometry") = <default>;
input real mvmtEps07D6("Conv. thresh. on point movement") = <default>;
input real rpcEps07D7("Conv. thresh. on recent pop. changes") = <default>;
input real pcmvEps07D8("Motion limit before PC") = <default>;
input real isoval07D9("Which isosurface to sample") = <default>;
input int verb07DA("Verbosity level") = <default>;
input real sfs07DB("Scaling (<=1 for stability) on fStep") = <default>;
input real hist07DC("How history matters for convergence") = <default>;
input int pcp07DD("periodicity of population control (PC)") = <default>;
input vec3[] ipos07DE("Initial point positions");
input int fDim07DF = <default>;
constants {
  fMaskTh07CB = 0.e0;
  fBias07CC = 0.e0;
  tipd07CD = 0.1e1;
  mabd07CE = 0.75e0;
  travMax07CF = 0.1e2;
  nfsMax07D0 = 20;
  gdeTest07D1 = 0.5e0;
  gdeBack07D2 = 0.5e0;
  gdeOppor07D3 = 0.12e1;
  geoEps07D5 = 0.1e0;
  mvmtEps07D6 = 0.1e-1;
  rpcEps07D7 = 0.1e-1;
  pcmvEps07D8 = 0.3e0;
  isoval07D9 = 0.e0;
  verb07DA = 0;
  sfs07DB = 0.5e0;
  hist07DC = 0.5e0;
  pcp07DD = 5;
  fDim07DF = 2;
}
global int nnmin12ED;
global int nnmax12F4;
global real phiWellRad1341;
global real rad1342;
global real pchist1358;
global int iter1359;
global real rpc135A;
global int popLast135B;
function int[2]#6 nextCell408B4 (int faceIdx0D13, int cell0D14, Femdata: Mesh mesh0D15)
{
  int _t0D16 = -1;
  bool _t0D17 = prim ==0082 (faceIdx0D13, _t0D16);
  if _t0D17 {
    int _t0D18 = -1;
    int _t0D19 = -1;
    int[2] _t0D1A = {_t0D18, _t0D19};
    return _t0D1A;
  } else {
    int _t0D1B = 8;
    int _t0D1C = prim *0033 (cell0D14, _t0D1B);
    int _t0D1D = 2;
    int _t0D1E = prim *0033 (faceIdx0D13, _t0D1D);
    int _t0D1F = prim +0015 (_t0D1C, _t0D1E);
    int[2] _t0D20 = extractFemItemN((mesh0D15, _t0D1F),CellFaceCell(Mesh),);
    return _t0D20;
  }
}
function vec3#6 fStep128C (vec3 s128D)
{
  vec3 g128E;
  real x167D = s128D[0];
  real y167E = s128D[1];
  real z167F = s128D[2];
  real _t1680 = 0.2e1;
  real _t1681 = prim *0034 (_t1680, x167D);
  int _t1682 = 2;
  real _t1683 = prim ^0068 (z167F, _t1682);
  real _t1684 = prim *0034 (_t1681, _t1683);
  int _t1685 = 2;
  real _t1686 = prim ^0068 (x167D, _t1685);
  int _t1687 = 2;
  real _t1688 = prim ^0068 (y167E, _t1687);
  real _t1689 = prim +0017<$[]> (_t1686, _t1688);
  int _t168A = 2;
  real _t168B = prim ^0068 (z167F, _t168A);
  real _t168C = prim +0017<$[]> (_t1689, _t168B);
  real _t168D = prim cos0169 (_t168C);
  real _t168E = prim *0034 (_t1684, _t168D);
  real _t168F = 0.2e1;
  real _t1690 = prim *0034 (_t168F, y167E);
  int _t1691 = 2;
  real _t1692 = prim ^0068 (z167F, _t1691);
  real _t1693 = prim *0034 (_t1690, _t1692);
  int _t1694 = 2;
  real _t1695 = prim ^0068 (x167D, _t1694);
  int _t1696 = 2;
  real _t1697 = prim ^0068 (y167E, _t1696);
  real _t1698 = prim +0017<$[]> (_t1695, _t1697);
  int _t1699 = 2;
  real _t169A = prim ^0068 (z167F, _t1699);
  real _t169B = prim +0017<$[]> (_t1698, _t169A);
  real _t169C = prim cos0169 (_t169B);
  real _t169D = prim *0034 (_t1693, _t169C);
  real _t169E = 0.2e1;
  int _t169F = 3;
  real _t16A0 = prim ^0068 (z167F, _t169F);
  real _t16A1 = prim *0034 (_t169E, _t16A0);
  int _t16A2 = 2;
  real _t16A3 = prim ^0068 (x167D, _t16A2);
  int _t16A4 = 2;
  real _t16A5 = prim ^0068 (y167E, _t16A4);
  real _t16A6 = prim +0017<$[]> (_t16A3, _t16A5);
  int _t16A7 = 2;
  real _t16A8 = prim ^0068 (z167F, _t16A7);
  real _t16A9 = prim +0017<$[]> (_t16A6, _t16A8);
  real _t16AA = prim cos0169 (_t16A9);
  real _t16AB = prim *0034 (_t16A1, _t16AA);
  real _t16AC = 0.2e1;
  real _t16AD = prim *0034 (_t16AC, z167F);
  int _t16AE = 2;
  real _t16AF = prim ^0068 (x167D, _t16AE);
  int _t16B0 = 2;
  real _t16B1 = prim ^0068 (y167E, _t16B0);
  real _t16B2 = prim +0017<$[]> (_t16AF, _t16B1);
  int _t16B3 = 2;
  real _t16B4 = prim ^0068 (z167F, _t16B3);
  real _t16B5 = prim +0017<$[]> (_t16B2, _t16B4);
  real _t16B6 = prim sin0171 (_t16B5);
  real _t16B7 = prim *0034 (_t16AD, _t16B6);
  real _t16B8 = prim +0017<$[]> (_t16AB, _t16B7);
  vec3 g16B9 = [_t168E, _t169D, _t16B8];
  g128E = g16B9;
  tensor[3,3] H128F;
  real x1570 = s128D[0];
  real y1571 = s128D[1];
  real z1572 = s128D[2];
  int _t1573 = -4;
  real _t1574 = (real)_t1573;
  int _t1575 = 2;
  real _t1576 = prim ^0068 (x1570, _t1575);
  real _t1577 = prim *0034 (_t1574, _t1576);
  int _t1578 = 2;
  real _t1579 = prim ^0068 (z1572, _t1578);
  real _t157A = prim *0034 (_t1577, _t1579);
  int _t157B = 2;
  real _t157C = prim ^0068 (x1570, _t157B);
  int _t157D = 2;
  real _t157E = prim ^0068 (y1571, _t157D);
  real _t157F = prim +0017<$[]> (_t157C, _t157E);
  int _t1580 = 2;
  real _t1581 = prim ^0068 (z1572, _t1580);
  real _t1582 = prim +0017<$[]> (_t157F, _t1581);
  real _t1583 = prim sin0171 (_t1582);
  real _t1584 = prim *0034 (_t157A, _t1583);
  real _t1585 = 0.2e1;
  int _t1586 = 2;
  real _t1587 = prim ^0068 (z1572, _t1586);
  real _t1588 = prim *0034 (_t1585, _t1587);
  int _t1589 = 2;
  real _t158A = prim ^0068 (x1570, _t1589);
  int _t158B = 2;
  real _t158C = prim ^0068 (y1571, _t158B);
  real _t158D = prim +0017<$[]> (_t158A, _t158C);
  int _t158E = 2;
  real _t158F = prim ^0068 (z1572, _t158E);
  real _t1590 = prim +0017<$[]> (_t158D, _t158F);
  real _t1591 = prim cos0169 (_t1590);
  real _t1592 = prim *0034 (_t1588, _t1591);
  real _t1593 = prim +0017<$[]> (_t1584, _t1592);
  int _t1594 = -4;
  real _t1595 = (real)_t1594;
  real _t1596 = prim *0034 (_t1595, x1570);
  real _t1597 = prim *0034 (_t1596, y1571);
  int _t1598 = 2;
  real _t1599 = prim ^0068 (z1572, _t1598);
  real _t159A = prim *0034 (_t1597, _t1599);
  int _t159B = 2;
  real _t159C = prim ^0068 (x1570, _t159B);
  int _t159D = 2;
  real _t159E = prim ^0068 (y1571, _t159D);
  real _t159F = prim +0017<$[]> (_t159C, _t159E);
  int _t15A0 = 2;
  real _t15A1 = prim ^0068 (z1572, _t15A0);
  real _t15A2 = prim +0017<$[]> (_t159F, _t15A1);
  real _t15A3 = prim sin0171 (_t15A2);
  real _t15A4 = prim *0034 (_t159A, _t15A3);
  int _t15A5 = -4;
  real _t15A6 = (real)_t15A5;
  real _t15A7 = prim *0034 (_t15A6, x1570);
  int _t15A8 = 3;
  real _t15A9 = prim ^0068 (z1572, _t15A8);
  real _t15AA = prim *0034 (_t15A7, _t15A9);
  int _t15AB = 2;
  real _t15AC = prim ^0068 (x1570, _t15AB);
  int _t15AD = 2;
  real _t15AE = prim ^0068 (y1571, _t15AD);
  real _t15AF = prim +0017<$[]> (_t15AC, _t15AE);
  int _t15B0 = 2;
  real _t15B1 = prim ^0068 (z1572, _t15B0);
  real _t15B2 = prim +0017<$[]> (_t15AF, _t15B1);
  real _t15B3 = prim sin0171 (_t15B2);
  real _t15B4 = prim *0034 (_t15AA, _t15B3);
  real _t15B5 = 0.4e1;
  real _t15B6 = prim *0034 (_t15B5, x1570);
  real _t15B7 = prim *0034 (_t15B6, z1572);
  int _t15B8 = 2;
  real _t15B9 = prim ^0068 (x1570, _t15B8);
  int _t15BA = 2;
  real _t15BB = prim ^0068 (y1571, _t15BA);
  real _t15BC = prim +0017<$[]> (_t15B9, _t15BB);
  int _t15BD = 2;
  real _t15BE = prim ^0068 (z1572, _t15BD);
  real _t15BF = prim +0017<$[]> (_t15BC, _t15BE);
  real _t15C0 = prim cos0169 (_t15BF);
  real _t15C1 = prim *0034 (_t15B7, _t15C0);
  real _t15C2 = prim +0017<$[]> (_t15B4, _t15C1);
  vec3 _t15C3 = [_t1593, _t15A4, _t15C2];
  int _t15C4 = -4;
  real _t15C5 = (real)_t15C4;
  real _t15C6 = prim *0034 (_t15C5, x1570);
  real _t15C7 = prim *0034 (_t15C6, y1571);
  int _t15C8 = 2;
  real _t15C9 = prim ^0068 (z1572, _t15C8);
  real _t15CA = prim *0034 (_t15C7, _t15C9);
  int _t15CB = 2;
  real _t15CC = prim ^0068 (x1570, _t15CB);
  int _t15CD = 2;
  real _t15CE = prim ^0068 (y1571, _t15CD);
  real _t15CF = prim +0017<$[]> (_t15CC, _t15CE);
  int _t15D0 = 2;
  real _t15D1 = prim ^0068 (z1572, _t15D0);
  real _t15D2 = prim +0017<$[]> (_t15CF, _t15D1);
  real _t15D3 = prim sin0171 (_t15D2);
  real _t15D4 = prim *0034 (_t15CA, _t15D3);
  int _t15D5 = -4;
  real _t15D6 = (real)_t15D5;
  int _t15D7 = 2;
  real _t15D8 = prim ^0068 (y1571, _t15D7);
  real _t15D9 = prim *0034 (_t15D6, _t15D8);
  int _t15DA = 2;
  real _t15DB = prim ^0068 (z1572, _t15DA);
  real _t15DC = prim *0034 (_t15D9, _t15DB);
  int _t15DD = 2;
  real _t15DE = prim ^0068 (x1570, _t15DD);
  int _t15DF = 2;
  real _t15E0 = prim ^0068 (y1571, _t15DF);
  real _t15E1 = prim +0017<$[]> (_t15DE, _t15E0);
  int _t15E2 = 2;
  real _t15E3 = prim ^0068 (z1572, _t15E2);
  real _t15E4 = prim +0017<$[]> (_t15E1, _t15E3);
  real _t15E5 = prim sin0171 (_t15E4);
  real _t15E6 = prim *0034 (_t15DC, _t15E5);
  real _t15E7 = 0.2e1;
  int _t15E8 = 2;
  real _t15E9 = prim ^0068 (z1572, _t15E8);
  real _t15EA = prim *0034 (_t15E7, _t15E9);
  int _t15EB = 2;
  real _t15EC = prim ^0068 (x1570, _t15EB);
  int _t15ED = 2;
  real _t15EE = prim ^0068 (y1571, _t15ED);
  real _t15EF = prim +0017<$[]> (_t15EC, _t15EE);
  int _t15F0 = 2;
  real _t15F1 = prim ^0068 (z1572, _t15F0);
  real _t15F2 = prim +0017<$[]> (_t15EF, _t15F1);
  real _t15F3 = prim cos0169 (_t15F2);
  real _t15F4 = prim *0034 (_t15EA, _t15F3);
  real _t15F5 = prim +0017<$[]> (_t15E6, _t15F4);
  int _t15F6 = -4;
  real _t15F7 = (real)_t15F6;
  real _t15F8 = prim *0034 (_t15F7, y1571);
  int _t15F9 = 3;
  real _t15FA = prim ^0068 (z1572, _t15F9);
  real _t15FB = prim *0034 (_t15F8, _t15FA);
  int _t15FC = 2;
  real _t15FD = prim ^0068 (x1570, _t15FC);
  int _t15FE = 2;
  real _t15FF = prim ^0068 (y1571, _t15FE);
  real _t1600 = prim +0017<$[]> (_t15FD, _t15FF);
  int _t1601 = 2;
  real _t1602 = prim ^0068 (z1572, _t1601);
  real _t1603 = prim +0017<$[]> (_t1600, _t1602);
  real _t1604 = prim sin0171 (_t1603);
  real _t1605 = prim *0034 (_t15FB, _t1604);
  real _t1606 = 0.4e1;
  real _t1607 = prim *0034 (_t1606, y1571);
  real _t1608 = prim *0034 (_t1607, z1572);
  int _t1609 = 2;
  real _t160A = prim ^0068 (x1570, _t1609);
  int _t160B = 2;
  real _t160C = prim ^0068 (y1571, _t160B);
  real _t160D = prim +0017<$[]> (_t160A, _t160C);
  int _t160E = 2;
  real _t160F = prim ^0068 (z1572, _t160E);
  real _t1610 = prim +0017<$[]> (_t160D, _t160F);
  real _t1611 = prim cos0169 (_t1610);
  real _t1612 = prim *0034 (_t1608, _t1611);
  real _t1613 = prim +0017<$[]> (_t1605, _t1612);
  vec3 _t1614 = [_t15D4, _t15F5, _t1613];
  int _t1615 = -4;
  real _t1616 = (real)_t1615;
  real _t1617 = prim *0034 (_t1616, x1570);
  int _t1618 = 3;
  real _t1619 = prim ^0068 (z1572, _t1618);
  real _t161A = prim *0034 (_t1617, _t1619);
  int _t161B = 2;
  real _t161C = prim ^0068 (x1570, _t161B);
  int _t161D = 2;
  real _t161E = prim ^0068 (y1571, _t161D);
  real _t161F = prim +0017<$[]> (_t161C, _t161E);
  int _t1620 = 2;
  real _t1621 = prim ^0068 (z1572, _t1620);
  real _t1622 = prim +0017<$[]> (_t161F, _t1621);
  real _t1623 = prim sin0171 (_t1622);
  real _t1624 = prim *0034 (_t161A, _t1623);
  real _t1625 = 0.4e1;
  real _t1626 = prim *0034 (_t1625, x1570);
  real _t1627 = prim *0034 (_t1626, z1572);
  int _t1628 = 2;
  real _t1629 = prim ^0068 (x1570, _t1628);
  int _t162A = 2;
  real _t162B = prim ^0068 (y1571, _t162A);
  real _t162C = prim +0017<$[]> (_t1629, _t162B);
  int _t162D = 2;
  real _t162E = prim ^0068 (z1572, _t162D);
  real _t162F = prim +0017<$[]> (_t162C, _t162E);
  real _t1630 = prim cos0169 (_t162F);
  real _t1631 = prim *0034 (_t1627, _t1630);
  real _t1632 = prim +0017<$[]> (_t1624, _t1631);
  int _t1633 = -4;
  real _t1634 = (real)_t1633;
  real _t1635 = prim *0034 (_t1634, y1571);
  int _t1636 = 3;
  real _t1637 = prim ^0068 (z1572, _t1636);
  real _t1638 = prim *0034 (_t1635, _t1637);
  int _t1639 = 2;
  real _t163A = prim ^0068 (x1570, _t1639);
  int _t163B = 2;
  real _t163C = prim ^0068 (y1571, _t163B);
  real _t163D = prim +0017<$[]> (_t163A, _t163C);
  int _t163E = 2;
  real _t163F = prim ^0068 (z1572, _t163E);
  real _t1640 = prim +0017<$[]> (_t163D, _t163F);
  real _t1641 = prim sin0171 (_t1640);
  real _t1642 = prim *0034 (_t1638, _t1641);
  real _t1643 = 0.4e1;
  real _t1644 = prim *0034 (_t1643, y1571);
  real _t1645 = prim *0034 (_t1644, z1572);
  int _t1646 = 2;
  real _t1647 = prim ^0068 (x1570, _t1646);
  int _t1648 = 2;
  real _t1649 = prim ^0068 (y1571, _t1648);
  real _t164A = prim +0017<$[]> (_t1647, _t1649);
  int _t164B = 2;
  real _t164C = prim ^0068 (z1572, _t164B);
  real _t164D = prim +0017<$[]> (_t164A, _t164C);
  real _t164E = prim cos0169 (_t164D);
  real _t164F = prim *0034 (_t1645, _t164E);
  real _t1650 = prim +0017<$[]> (_t1642, _t164F);
  int _t1651 = -4;
  real _t1652 = (real)_t1651;
  int _t1653 = 4;
  real _t1654 = prim ^0068 (z1572, _t1653);
  real _t1655 = prim *0034 (_t1652, _t1654);
  int _t1656 = 2;
  real _t1657 = prim ^0068 (x1570, _t1656);
  int _t1658 = 2;
  real _t1659 = prim ^0068 (y1571, _t1658);
  real _t165A = prim +0017<$[]> (_t1657, _t1659);
  int _t165B = 2;
  real _t165C = prim ^0068 (z1572, _t165B);
  real _t165D = prim +0017<$[]> (_t165A, _t165C);
  real _t165E = prim sin0171 (_t165D);
  real _t165F = prim *0034 (_t1655, _t165E);
  real _t1660 = 0.1e2;
  int _t1661 = 2;
  real _t1662 = prim ^0068 (z1572, _t1661);
  real _t1663 = prim *0034 (_t1660, _t1662);
  int _t1664 = 2;
  real _t1665 = prim ^0068 (x1570, _t1664);
  int _t1666 = 2;
  real _t1667 = prim ^0068 (y1571, _t1666);
  real _t1668 = prim +0017<$[]> (_t1665, _t1667);
  int _t1669 = 2;
  real _t166A = prim ^0068 (z1572, _t1669);
  real _t166B = prim +0017<$[]> (_t1668, _t166A);
  real _t166C = prim cos0169 (_t166B);
  real _t166D = prim *0034 (_t1663, _t166C);
  real _t166E = prim +0017<$[]> (_t165F, _t166D);
  real _t166F = 0.2e1;
  int _t1670 = 2;
  real _t1671 = prim ^0068 (x1570, _t1670);
  int _t1672 = 2;
  real _t1673 = prim ^0068 (y1571, _t1672);
  real _t1674 = prim +0017<$[]> (_t1671, _t1673);
  int _t1675 = 2;
  real _t1676 = prim ^0068 (z1572, _t1675);
  real _t1677 = prim +0017<$[]> (_t1674, _t1676);
  real _t1678 = prim sin0171 (_t1677);
  real _t1679 = prim *0034 (_t166F, _t1678);
  real _t167A = prim +0017<$[]> (_t166E, _t1679);
  vec3 _t167B = [_t1632, _t1650, _t167A];
  tensor[3,3] hess167C = [_t15C3, _t1614, _t167B];
  H128F = hess167C;
  vec3[3] E1290 = prim evecs00A0 (H128F);
  real[3] L1291 = prim evals009F (H128F);
  real _t1292 = 0.1e1;
  int _t1293 = 2;
  real _t1294 = prim $sub01C0<real; %3> (L1291, _t1293);
  real _t1295 = prim /0055 (_t1292, _t1294);
  real _t1296 = prim unary -008B<$[]> (_t1295);
  int _t1297 = 2;
  vec3 _t1298 = prim $sub01C0<vec3; %3> (E1290, _t1297);
  vec3 _t1299 = prim *0036<$[3]> (_t1296, _t1298);
  int _t129A = 2;
  vec3 _t129B = prim $sub01C0<vec3; %3> (E1290, _t129A);
  tensor[3,3] _t129C = prim ⊗00E5<$[3]; $[3]; $[3,3]> (_t1299, _t129B);
  vec3 up129D = prim •00CE<$[3,3]; $[3]; $[3]> (_t129C, g128E);
  bool _t129E;
  real _t129F = up129D[0];
  real _t12A0 = up129D[0];
  bool _t12A1 = prim ==0084 (_t129F, _t12A0);
  bool _t12A2 = prim !00BC (_t12A1);
  if _t12A2 {
    _t129E = true;
  } else {
    bool _t12A3;
    real _t12A4 = up129D[1];
    real _t12A5 = up129D[1];
    bool _t12A6 = prim ==0084 (_t12A4, _t12A5);
    bool _t12A7 = prim !00BC (_t12A6);
    if _t12A7 {
      _t12A3 = true;
    } else {
      real _t12A8 = up129D[2];
      real _t12A9 = up129D[2];
      bool _t12AA = prim ==0084 (_t12A8, _t12A9);
      _t12A3 = prim !00BC (_t12AA);
    }
    _t129E = _t12A3;
  }
  if _t129E {
    real _t12AB = +inf;
    real _t12AC = +inf;
    real _t12AD = +inf;
    vec3 _t12AE = [_t12AB, _t12AC, _t12AD];
    return _t12AE;
  }
  return up129D;
}
function tensor[3,3]#4 fPerp12BE (vec3 s12BF)
{
  vec3 g12C0;
  real x17C7 = s12BF[0];
  real y17C8 = s12BF[1];
  real z17C9 = s12BF[2];
  real _t17CA = 0.2e1;
  real _t17CB = prim *0034 (_t17CA, x17C7);
  int _t17CC = 2;
  real _t17CD = prim ^0068 (z17C9, _t17CC);
  real _t17CE = prim *0034 (_t17CB, _t17CD);
  int _t17CF = 2;
  real _t17D0 = prim ^0068 (x17C7, _t17CF);
  int _t17D1 = 2;
  real _t17D2 = prim ^0068 (y17C8, _t17D1);
  real _t17D3 = prim +0017<$[]> (_t17D0, _t17D2);
  int _t17D4 = 2;
  real _t17D5 = prim ^0068 (z17C9, _t17D4);
  real _t17D6 = prim +0017<$[]> (_t17D3, _t17D5);
  real _t17D7 = prim cos0169 (_t17D6);
  real _t17D8 = prim *0034 (_t17CE, _t17D7);
  real _t17D9 = 0.2e1;
  real _t17DA = prim *0034 (_t17D9, y17C8);
  int _t17DB = 2;
  real _t17DC = prim ^0068 (z17C9, _t17DB);
  real _t17DD = prim *0034 (_t17DA, _t17DC);
  int _t17DE = 2;
  real _t17DF = prim ^0068 (x17C7, _t17DE);
  int _t17E0 = 2;
  real _t17E1 = prim ^0068 (y17C8, _t17E0);
  real _t17E2 = prim +0017<$[]> (_t17DF, _t17E1);
  int _t17E3 = 2;
  real _t17E4 = prim ^0068 (z17C9, _t17E3);
  real _t17E5 = prim +0017<$[]> (_t17E2, _t17E4);
  real _t17E6 = prim cos0169 (_t17E5);
  real _t17E7 = prim *0034 (_t17DD, _t17E6);
  real _t17E8 = 0.2e1;
  int _t17E9 = 3;
  real _t17EA = prim ^0068 (z17C9, _t17E9);
  real _t17EB = prim *0034 (_t17E8, _t17EA);
  int _t17EC = 2;
  real _t17ED = prim ^0068 (x17C7, _t17EC);
  int _t17EE = 2;
  real _t17EF = prim ^0068 (y17C8, _t17EE);
  real _t17F0 = prim +0017<$[]> (_t17ED, _t17EF);
  int _t17F1 = 2;
  real _t17F2 = prim ^0068 (z17C9, _t17F1);
  real _t17F3 = prim +0017<$[]> (_t17F0, _t17F2);
  real _t17F4 = prim cos0169 (_t17F3);
  real _t17F5 = prim *0034 (_t17EB, _t17F4);
  real _t17F6 = 0.2e1;
  real _t17F7 = prim *0034 (_t17F6, z17C9);
  int _t17F8 = 2;
  real _t17F9 = prim ^0068 (x17C7, _t17F8);
  int _t17FA = 2;
  real _t17FB = prim ^0068 (y17C8, _t17FA);
  real _t17FC = prim +0017<$[]> (_t17F9, _t17FB);
  int _t17FD = 2;
  real _t17FE = prim ^0068 (z17C9, _t17FD);
  real _t17FF = prim +0017<$[]> (_t17FC, _t17FE);
  real _t1800 = prim sin0171 (_t17FF);
  real _t1801 = prim *0034 (_t17F7, _t1800);
  real _t1802 = prim +0017<$[]> (_t17F5, _t1801);
  vec3 g1803 = [_t17D8, _t17E7, _t1802];
  g12C0 = g1803;
  tensor[3,3] H12C1;
  real x16BA = s12BF[0];
  real y16BB = s12BF[1];
  real z16BC = s12BF[2];
  int _t16BD = -4;
  real _t16BE = (real)_t16BD;
  int _t16BF = 2;
  real _t16C0 = prim ^0068 (x16BA, _t16BF);
  real _t16C1 = prim *0034 (_t16BE, _t16C0);
  int _t16C2 = 2;
  real _t16C3 = prim ^0068 (z16BC, _t16C2);
  real _t16C4 = prim *0034 (_t16C1, _t16C3);
  int _t16C5 = 2;
  real _t16C6 = prim ^0068 (x16BA, _t16C5);
  int _t16C7 = 2;
  real _t16C8 = prim ^0068 (y16BB, _t16C7);
  real _t16C9 = prim +0017<$[]> (_t16C6, _t16C8);
  int _t16CA = 2;
  real _t16CB = prim ^0068 (z16BC, _t16CA);
  real _t16CC = prim +0017<$[]> (_t16C9, _t16CB);
  real _t16CD = prim sin0171 (_t16CC);
  real _t16CE = prim *0034 (_t16C4, _t16CD);
  real _t16CF = 0.2e1;
  int _t16D0 = 2;
  real _t16D1 = prim ^0068 (z16BC, _t16D0);
  real _t16D2 = prim *0034 (_t16CF, _t16D1);
  int _t16D3 = 2;
  real _t16D4 = prim ^0068 (x16BA, _t16D3);
  int _t16D5 = 2;
  real _t16D6 = prim ^0068 (y16BB, _t16D5);
  real _t16D7 = prim +0017<$[]> (_t16D4, _t16D6);
  int _t16D8 = 2;
  real _t16D9 = prim ^0068 (z16BC, _t16D8);
  real _t16DA = prim +0017<$[]> (_t16D7, _t16D9);
  real _t16DB = prim cos0169 (_t16DA);
  real _t16DC = prim *0034 (_t16D2, _t16DB);
  real _t16DD = prim +0017<$[]> (_t16CE, _t16DC);
  int _t16DE = -4;
  real _t16DF = (real)_t16DE;
  real _t16E0 = prim *0034 (_t16DF, x16BA);
  real _t16E1 = prim *0034 (_t16E0, y16BB);
  int _t16E2 = 2;
  real _t16E3 = prim ^0068 (z16BC, _t16E2);
  real _t16E4 = prim *0034 (_t16E1, _t16E3);
  int _t16E5 = 2;
  real _t16E6 = prim ^0068 (x16BA, _t16E5);
  int _t16E7 = 2;
  real _t16E8 = prim ^0068 (y16BB, _t16E7);
  real _t16E9 = prim +0017<$[]> (_t16E6, _t16E8);
  int _t16EA = 2;
  real _t16EB = prim ^0068 (z16BC, _t16EA);
  real _t16EC = prim +0017<$[]> (_t16E9, _t16EB);
  real _t16ED = prim sin0171 (_t16EC);
  real _t16EE = prim *0034 (_t16E4, _t16ED);
  int _t16EF = -4;
  real _t16F0 = (real)_t16EF;
  real _t16F1 = prim *0034 (_t16F0, x16BA);
  int _t16F2 = 3;
  real _t16F3 = prim ^0068 (z16BC, _t16F2);
  real _t16F4 = prim *0034 (_t16F1, _t16F3);
  int _t16F5 = 2;
  real _t16F6 = prim ^0068 (x16BA, _t16F5);
  int _t16F7 = 2;
  real _t16F8 = prim ^0068 (y16BB, _t16F7);
  real _t16F9 = prim +0017<$[]> (_t16F6, _t16F8);
  int _t16FA = 2;
  real _t16FB = prim ^0068 (z16BC, _t16FA);
  real _t16FC = prim +0017<$[]> (_t16F9, _t16FB);
  real _t16FD = prim sin0171 (_t16FC);
  real _t16FE = prim *0034 (_t16F4, _t16FD);
  real _t16FF = 0.4e1;
  real _t1700 = prim *0034 (_t16FF, x16BA);
  real _t1701 = prim *0034 (_t1700, z16BC);
  int _t1702 = 2;
  real _t1703 = prim ^0068 (x16BA, _t1702);
  int _t1704 = 2;
  real _t1705 = prim ^0068 (y16BB, _t1704);
  real _t1706 = prim +0017<$[]> (_t1703, _t1705);
  int _t1707 = 2;
  real _t1708 = prim ^0068 (z16BC, _t1707);
  real _t1709 = prim +0017<$[]> (_t1706, _t1708);
  real _t170A = prim cos0169 (_t1709);
  real _t170B = prim *0034 (_t1701, _t170A);
  real _t170C = prim +0017<$[]> (_t16FE, _t170B);
  vec3 _t170D = [_t16DD, _t16EE, _t170C];
  int _t170E = -4;
  real _t170F = (real)_t170E;
  real _t1710 = prim *0034 (_t170F, x16BA);
  real _t1711 = prim *0034 (_t1710, y16BB);
  int _t1712 = 2;
  real _t1713 = prim ^0068 (z16BC, _t1712);
  real _t1714 = prim *0034 (_t1711, _t1713);
  int _t1715 = 2;
  real _t1716 = prim ^0068 (x16BA, _t1715);
  int _t1717 = 2;
  real _t1718 = prim ^0068 (y16BB, _t1717);
  real _t1719 = prim +0017<$[]> (_t1716, _t1718);
  int _t171A = 2;
  real _t171B = prim ^0068 (z16BC, _t171A);
  real _t171C = prim +0017<$[]> (_t1719, _t171B);
  real _t171D = prim sin0171 (_t171C);
  real _t171E = prim *0034 (_t1714, _t171D);
  int _t171F = -4;
  real _t1720 = (real)_t171F;
  int _t1721 = 2;
  real _t1722 = prim ^0068 (y16BB, _t1721);
  real _t1723 = prim *0034 (_t1720, _t1722);
  int _t1724 = 2;
  real _t1725 = prim ^0068 (z16BC, _t1724);
  real _t1726 = prim *0034 (_t1723, _t1725);
  int _t1727 = 2;
  real _t1728 = prim ^0068 (x16BA, _t1727);
  int _t1729 = 2;
  real _t172A = prim ^0068 (y16BB, _t1729);
  real _t172B = prim +0017<$[]> (_t1728, _t172A);
  int _t172C = 2;
  real _t172D = prim ^0068 (z16BC, _t172C);
  real _t172E = prim +0017<$[]> (_t172B, _t172D);
  real _t172F = prim sin0171 (_t172E);
  real _t1730 = prim *0034 (_t1726, _t172F);
  real _t1731 = 0.2e1;
  int _t1732 = 2;
  real _t1733 = prim ^0068 (z16BC, _t1732);
  real _t1734 = prim *0034 (_t1731, _t1733);
  int _t1735 = 2;
  real _t1736 = prim ^0068 (x16BA, _t1735);
  int _t1737 = 2;
  real _t1738 = prim ^0068 (y16BB, _t1737);
  real _t1739 = prim +0017<$[]> (_t1736, _t1738);
  int _t173A = 2;
  real _t173B = prim ^0068 (z16BC, _t173A);
  real _t173C = prim +0017<$[]> (_t1739, _t173B);
  real _t173D = prim cos0169 (_t173C);
  real _t173E = prim *0034 (_t1734, _t173D);
  real _t173F = prim +0017<$[]> (_t1730, _t173E);
  int _t1740 = -4;
  real _t1741 = (real)_t1740;
  real _t1742 = prim *0034 (_t1741, y16BB);
  int _t1743 = 3;
  real _t1744 = prim ^0068 (z16BC, _t1743);
  real _t1745 = prim *0034 (_t1742, _t1744);
  int _t1746 = 2;
  real _t1747 = prim ^0068 (x16BA, _t1746);
  int _t1748 = 2;
  real _t1749 = prim ^0068 (y16BB, _t1748);
  real _t174A = prim +0017<$[]> (_t1747, _t1749);
  int _t174B = 2;
  real _t174C = prim ^0068 (z16BC, _t174B);
  real _t174D = prim +0017<$[]> (_t174A, _t174C);
  real _t174E = prim sin0171 (_t174D);
  real _t174F = prim *0034 (_t1745, _t174E);
  real _t1750 = 0.4e1;
  real _t1751 = prim *0034 (_t1750, y16BB);
  real _t1752 = prim *0034 (_t1751, z16BC);
  int _t1753 = 2;
  real _t1754 = prim ^0068 (x16BA, _t1753);
  int _t1755 = 2;
  real _t1756 = prim ^0068 (y16BB, _t1755);
  real _t1757 = prim +0017<$[]> (_t1754, _t1756);
  int _t1758 = 2;
  real _t1759 = prim ^0068 (z16BC, _t1758);
  real _t175A = prim +0017<$[]> (_t1757, _t1759);
  real _t175B = prim cos0169 (_t175A);
  real _t175C = prim *0034 (_t1752, _t175B);
  real _t175D = prim +0017<$[]> (_t174F, _t175C);
  vec3 _t175E = [_t171E, _t173F, _t175D];
  int _t175F = -4;
  real _t1760 = (real)_t175F;
  real _t1761 = prim *0034 (_t1760, x16BA);
  int _t1762 = 3;
  real _t1763 = prim ^0068 (z16BC, _t1762);
  real _t1764 = prim *0034 (_t1761, _t1763);
  int _t1765 = 2;
  real _t1766 = prim ^0068 (x16BA, _t1765);
  int _t1767 = 2;
  real _t1768 = prim ^0068 (y16BB, _t1767);
  real _t1769 = prim +0017<$[]> (_t1766, _t1768);
  int _t176A = 2;
  real _t176B = prim ^0068 (z16BC, _t176A);
  real _t176C = prim +0017<$[]> (_t1769, _t176B);
  real _t176D = prim sin0171 (_t176C);
  real _t176E = prim *0034 (_t1764, _t176D);
  real _t176F = 0.4e1;
  real _t1770 = prim *0034 (_t176F, x16BA);
  real _t1771 = prim *0034 (_t1770, z16BC);
  int _t1772 = 2;
  real _t1773 = prim ^0068 (x16BA, _t1772);
  int _t1774 = 2;
  real _t1775 = prim ^0068 (y16BB, _t1774);
  real _t1776 = prim +0017<$[]> (_t1773, _t1775);
  int _t1777 = 2;
  real _t1778 = prim ^0068 (z16BC, _t1777);
  real _t1779 = prim +0017<$[]> (_t1776, _t1778);
  real _t177A = prim cos0169 (_t1779);
  real _t177B = prim *0034 (_t1771, _t177A);
  real _t177C = prim +0017<$[]> (_t176E, _t177B);
  int _t177D = -4;
  real _t177E = (real)_t177D;
  real _t177F = prim *0034 (_t177E, y16BB);
  int _t1780 = 3;
  real _t1781 = prim ^0068 (z16BC, _t1780);
  real _t1782 = prim *0034 (_t177F, _t1781);
  int _t1783 = 2;
  real _t1784 = prim ^0068 (x16BA, _t1783);
  int _t1785 = 2;
  real _t1786 = prim ^0068 (y16BB, _t1785);
  real _t1787 = prim +0017<$[]> (_t1784, _t1786);
  int _t1788 = 2;
  real _t1789 = prim ^0068 (z16BC, _t1788);
  real _t178A = prim +0017<$[]> (_t1787, _t1789);
  real _t178B = prim sin0171 (_t178A);
  real _t178C = prim *0034 (_t1782, _t178B);
  real _t178D = 0.4e1;
  real _t178E = prim *0034 (_t178D, y16BB);
  real _t178F = prim *0034 (_t178E, z16BC);
  int _t1790 = 2;
  real _t1791 = prim ^0068 (x16BA, _t1790);
  int _t1792 = 2;
  real _t1793 = prim ^0068 (y16BB, _t1792);
  real _t1794 = prim +0017<$[]> (_t1791, _t1793);
  int _t1795 = 2;
  real _t1796 = prim ^0068 (z16BC, _t1795);
  real _t1797 = prim +0017<$[]> (_t1794, _t1796);
  real _t1798 = prim cos0169 (_t1797);
  real _t1799 = prim *0034 (_t178F, _t1798);
  real _t179A = prim +0017<$[]> (_t178C, _t1799);
  int _t179B = -4;
  real _t179C = (real)_t179B;
  int _t179D = 4;
  real _t179E = prim ^0068 (z16BC, _t179D);
  real _t179F = prim *0034 (_t179C, _t179E);
  int _t17A0 = 2;
  real _t17A1 = prim ^0068 (x16BA, _t17A0);
  int _t17A2 = 2;
  real _t17A3 = prim ^0068 (y16BB, _t17A2);
  real _t17A4 = prim +0017<$[]> (_t17A1, _t17A3);
  int _t17A5 = 2;
  real _t17A6 = prim ^0068 (z16BC, _t17A5);
  real _t17A7 = prim +0017<$[]> (_t17A4, _t17A6);
  real _t17A8 = prim sin0171 (_t17A7);
  real _t17A9 = prim *0034 (_t179F, _t17A8);
  real _t17AA = 0.1e2;
  int _t17AB = 2;
  real _t17AC = prim ^0068 (z16BC, _t17AB);
  real _t17AD = prim *0034 (_t17AA, _t17AC);
  int _t17AE = 2;
  real _t17AF = prim ^0068 (x16BA, _t17AE);
  int _t17B0 = 2;
  real _t17B1 = prim ^0068 (y16BB, _t17B0);
  real _t17B2 = prim +0017<$[]> (_t17AF, _t17B1);
  int _t17B3 = 2;
  real _t17B4 = prim ^0068 (z16BC, _t17B3);
  real _t17B5 = prim +0017<$[]> (_t17B2, _t17B4);
  real _t17B6 = prim cos0169 (_t17B5);
  real _t17B7 = prim *0034 (_t17AD, _t17B6);
  real _t17B8 = prim +0017<$[]> (_t17A9, _t17B7);
  real _t17B9 = 0.2e1;
  int _t17BA = 2;
  real _t17BB = prim ^0068 (x16BA, _t17BA);
  int _t17BC = 2;
  real _t17BD = prim ^0068 (y16BB, _t17BC);
  real _t17BE = prim +0017<$[]> (_t17BB, _t17BD);
  int _t17BF = 2;
  real _t17C0 = prim ^0068 (z16BC, _t17BF);
  real _t17C1 = prim +0017<$[]> (_t17BE, _t17C0);
  real _t17C2 = prim sin0171 (_t17C1);
  real _t17C3 = prim *0034 (_t17B9, _t17C2);
  real _t17C4 = prim +0017<$[]> (_t17B8, _t17C3);
  vec3 _t17C5 = [_t177C, _t179A, _t17C4];
  tensor[3,3] hess17C6 = [_t170D, _t175E, _t17C5];
  H12C1 = hess17C6;
  vec3[3] _t12C2 = prim evecs00A0 (H12C1);
  int _t12C3 = 2;
  vec3 E212C4 = prim $sub01C0<vec3; %3> (_t12C2, _t12C3);
  tensor[3,3] _t12C5 = prim $id01B9<%3> ();
  tensor[3,3] _t12C6 = prim ⊗00E5<$[3]; $[3]; $[3,3]> (E212C4, E212C4);
  tensor[3,3] m12C7 = prim -0026<$[3,3]> (_t12C5, _t12C6);
  real t12C8 = prim :00FC<$[3,3]; $[3,3]; $[]> (m12C7, m12C7);
  bool _t12C9 = prim ==0084 (t12C8, t12C8);
  bool _t12CA = prim !00BC (_t12C9);
  if _t12CA {
    tensor[3,3] _t12CB = prim $zero01BB<$[3,3]> ();
    return _t12CB;
  }
  return m12C7;
}
function real#12 urnd135C (real x135D)
{
  real _t135E = 0.e0;
  bool _t135F = prim ==0084 (x135D, _t135E);
  if _t135F {
    real _t1360 = 0.e0;
    return _t1360;
  }
  real _t1361 = prim |()|00B5<$[]> (x135D);
  real l21362 = prim log2018D (_t1361);
  real _t1363 = 0.2e1;
  real _t1364 = prim floor0189 (l21362);
  real _t1365 = prim -0026<$[]> (l21362, _t1364);
  real _t1366 = 0.1e1;
  real _t1367 = prim -0026<$[]> (_t1365, _t1366);
  real frxp1368 = prim ^0069 (_t1363, _t1367);
  real _t1369 = 0.2e1;
  int _t136A = 20;
  real _t136B = prim ^0068 (_t1369, _t136A);
  int _t136C = 2;
  int _t136D = prim *0033 (_t136C, iter1359);
  real _t136E = (real)_t136D;
  real _t136F = prim +0017<$[]> (_t136B, _t136E);
  real _t1370 = prim *0034 (_t136F, frxp1368);
  real _t1371 = 0.1e1;
  real _t1372 = prim fmod018A (_t1370, _t1371);
  return _t1372;
}
globalInit {
  int _t07BE = 0;
  int _t07BC = 1;
  int _t07C0 = extractFemItem(NumCell(Mesh), int, meshData07BA);
  int _t07BF = prim -0024 (_t07C0, _t07BC);
  int[] _t07C3 = prim $range01C3 (_t07BE, _t07BF);
  Femdata: MeshCell[] _t07C4 = {};
  foreach _t07C2 in _t07C3 {
    Femdata: MeshCell _t07C5 = loadFem(MeshCell, meshData07BA, _t07C2);
    _t07C4 = prim @0010<Femdata: MeshCell> (_t07C4, _t07C5);
  }
  int _t12E7;
  int _t12E8 = 2;
  bool _t12E9 = prim ==0082 (_t12E8, fDim07DF);
  if _t12E9 {
    _t12E7 = 6;
  } else {
    int _t12EA;
    int _t12EB = 1;
    bool _t12EC = prim ==0082 (_t12EB, fDim07DF);
    if _t12EC {
      _t12EA = 2;
    } else {
      _t12EA = 0;
    }
    _t12E7 = _t12EA;
  }
  nnmin12ED = _t12E7;
  int _t12EE;
  int _t12EF = 2;
  bool _t12F0 = prim ==0082 (_t12EF, fDim07DF);
  if _t12F0 {
    _t12EE = 8;
  } else {
    int _t12F1;
    int _t12F2 = 1;
    bool _t12F3 = prim ==0082 (_t12F2, fDim07DF);
    if _t12F3 {
      _t12F1 = 3;
    } else {
      _t12F1 = 0;
    }
    _t12EE = _t12F1;
  }
  nnmax12F4 = _t12EE;
  real _t133F = 0.2e1;
  real _t1340 = 0.3e1;
  phiWellRad1341 = prim /0055 (_t133F, _t1340);
  rad1342 = prim /0055 (tipd07CD, phiWellRad1341);
  real _t1353 = 0.1e1;
  int _t1354 = 2;
  int _t1355 = prim *0033 (_t1354, pcp07DD);
  real _t1356 = (real)_t1355;
  real _t1357 = prim /0055 (_t1353, _t1356);
  pchist1358 = prim ^0069 (hist07DC, _t1357);
  iter1359 = 0;
  rpc135A = 0.1e1;
  popLast135B = -1;
}
strand point (vec3 p01396, real hh01397) in 3D {
  output vec3 pos1398;
  output vec3 _pos1399;
  real ID139A;
  real hh139B;
  vec3 step139C;
  bool found13A0;
  int nfs13A1;
  real trav13A2;
  real mvmt13A3;
  real closest13A4;
  int born13A5;
  bool first13A6;
  {
    pos1398 = p01396;
    _pos1399 = pos1398;
    real ID1B0E;
    real _t1B0F = 0.1e7;
    real _t1B10;
    real _t1B11 = p01396[0];
    real _t1B12 = func urnd135C (_t1B11);
    real _t1B13 = p01396[1];
    real _t1B14 = func urnd135C (_t1B13);
    real _t1B15 = prim +0017<$[]> (_t1B12, _t1B14);
    real _t1B16 = p01396[2];
    real _t1B17 = func urnd135C (_t1B16);
    real _t1B18 = prim +0017<$[]> (_t1B15, _t1B17);
    real _t1B19 = 0.1e1;
    real _t1B1A = prim fmod018A (_t1B18, _t1B19);
    _t1B10 = _t1B1A;
    real _t1B1B = prim *0034 (_t1B0F, _t1B10);
    real _t1B1C = prim floor0189 (_t1B1B);
    ID1B0E = _t1B1C;
    ID139A = ID1B0E;
    hh139B = hh01397;
    real _t139D = 0.e0;
    real _t139E = 0.e0;
    real _t139F = 0.e0;
    step139C = [_t139D, _t139E, _t139F];
    found13A0 = false;
    nfs13A1 = 0;
    trav13A2 = 0.e0;
    mvmt13A3 = 0.1e1;
    closest13A4 = rad1342;
    born13A5 = 0;
    first13A6 = true;
  }
  update
  {
    bool vv13A7 = false;
    if first13A6 {
      bool _t13A8;
      bool _t13A9;
      int _t13AA = 0;
      bool _t13AB = prim >007F (verb07DA, _t13AA);
      if _t13AB {
        _t13A9 = vv13A7;
      } else {
        _t13A9 = false;
      }
      if _t13A9 {
        _t13A8 = true;
      } else {
        int _t13AC = 1;
        _t13A8 = prim >007F (verb07DA, _t13AC);
      }
      if _t13A8 {
        string _t13AD = "(i#";
        string _t13AE = " @ ";
        string _t13AF = "): ";
        print (ID139A, _t13AD, iter1359, _t13AE, pos1398, _t13AF);
        string _t13B0 = " HELLO!\n";
        print (_t13B0);
      }
    }
    bool _t13B1;
    bool _t2053;
    bool _t2054;
    real _t2055 = 0.e0;
    real _t2056 = 0.e0;
    real _t2057 = 0.e0;
    vec3 _t2058 = [_t2055, _t2056, _t2057];
    vec3 mid2059 = prim -0026<$[3]> (pos1398, _t2058);
    bool _t2068;
    real _t2069 = prim |()|00B5<$[3]> (mid2059);
    real _t206A = 0.4e1;
    bool _t206B = prim <007A (_t2069, _t206A);
    if _t206B {
      real _t206C = prim |()|00B5<$[3]> (mid2059);
      real _t206D = 0.3e1;
      _t2068 = prim >0080 (_t206C, _t206D);
    } else {
      _t2068 = false;
    }
    _t2054 = _t2068;
    if _t2054 {
      bool _t206E;
      real _t206F;
      vec3 g2070;
      real x2071 = pos1398[0];
      real y2072 = pos1398[1];
      real z2073 = pos1398[2];
      real _t2074 = 0.2e1;
      real _t2075 = prim *0034 (_t2074, x2071);
      int _t2076 = 2;
      real _t2077 = prim ^0068 (z2073, _t2076);
      real _t2078 = prim *0034 (_t2075, _t2077);
      int _t2079 = 2;
      real _t207A = prim ^0068 (x2071, _t2079);
      int _t207B = 2;
      real _t207C = prim ^0068 (y2072, _t207B);
      real _t207D = prim +0017<$[]> (_t207A, _t207C);
      int _t207E = 2;
      real _t207F = prim ^0068 (z2073, _t207E);
      real _t2080 = prim +0017<$[]> (_t207D, _t207F);
      real _t2081 = prim cos0169 (_t2080);
      real _t2082 = prim *0034 (_t2078, _t2081);
      real _t2083 = 0.2e1;
      real _t2084 = prim *0034 (_t2083, y2072);
      int _t2085 = 2;
      real _t2086 = prim ^0068 (z2073, _t2085);
      real _t2087 = prim *0034 (_t2084, _t2086);
      int _t2088 = 2;
      real _t2089 = prim ^0068 (x2071, _t2088);
      int _t208A = 2;
      real _t208B = prim ^0068 (y2072, _t208A);
      real _t208C = prim +0017<$[]> (_t2089, _t208B);
      int _t208D = 2;
      real _t208E = prim ^0068 (z2073, _t208D);
      real _t208F = prim +0017<$[]> (_t208C, _t208E);
      real _t2090 = prim cos0169 (_t208F);
      real _t2091 = prim *0034 (_t2087, _t2090);
      real _t2092 = 0.2e1;
      int _t2093 = 3;
      real _t2094 = prim ^0068 (z2073, _t2093);
      real _t2095 = prim *0034 (_t2092, _t2094);
      int _t2096 = 2;
      real _t2097 = prim ^0068 (x2071, _t2096);
      int _t2098 = 2;
      real _t2099 = prim ^0068 (y2072, _t2098);
      real _t209A = prim +0017<$[]> (_t2097, _t2099);
      int _t209B = 2;
      real _t209C = prim ^0068 (z2073, _t209B);
      real _t209D = prim +0017<$[]> (_t209A, _t209C);
      real _t209E = prim cos0169 (_t209D);
      real _t209F = prim *0034 (_t2095, _t209E);
      real _t20A0 = 0.2e1;
      real _t20A1 = prim *0034 (_t20A0, z2073);
      int _t20A2 = 2;
      real _t20A3 = prim ^0068 (x2071, _t20A2);
      int _t20A4 = 2;
      real _t20A5 = prim ^0068 (y2072, _t20A4);
      real _t20A6 = prim +0017<$[]> (_t20A3, _t20A5);
      int _t20A7 = 2;
      real _t20A8 = prim ^0068 (z2073, _t20A7);
      real _t20A9 = prim +0017<$[]> (_t20A6, _t20A8);
      real _t20AA = prim sin0171 (_t20A9);
      real _t20AB = prim *0034 (_t20A1, _t20AA);
      real _t20AC = prim +0017<$[]> (_t209F, _t20AB);
      vec3 g20AD = [_t2082, _t2091, _t20AC];
      g2070 = g20AD;
      tensor[3,3] H20AE;
      real x20AF = pos1398[0];
      real y20B0 = pos1398[1];
      real z20B1 = pos1398[2];
      int _t20B2 = -4;
      real _t20B3 = (real)_t20B2;
      int _t20B4 = 2;
      real _t20B5 = prim ^0068 (x20AF, _t20B4);
      real _t20B6 = prim *0034 (_t20B3, _t20B5);
      int _t20B7 = 2;
      real _t20B8 = prim ^0068 (z20B1, _t20B7);
      real _t20B9 = prim *0034 (_t20B6, _t20B8);
      int _t20BA = 2;
      real _t20BB = prim ^0068 (x20AF, _t20BA);
      int _t20BC = 2;
      real _t20BD = prim ^0068 (y20B0, _t20BC);
      real _t20BE = prim +0017<$[]> (_t20BB, _t20BD);
      int _t20BF = 2;
      real _t20C0 = prim ^0068 (z20B1, _t20BF);
      real _t20C1 = prim +0017<$[]> (_t20BE, _t20C0);
      real _t20C2 = prim sin0171 (_t20C1);
      real _t20C3 = prim *0034 (_t20B9, _t20C2);
      real _t20C4 = 0.2e1;
      int _t20C5 = 2;
      real _t20C6 = prim ^0068 (z20B1, _t20C5);
      real _t20C7 = prim *0034 (_t20C4, _t20C6);
      int _t20C8 = 2;
      real _t20C9 = prim ^0068 (x20AF, _t20C8);
      int _t20CA = 2;
      real _t20CB = prim ^0068 (y20B0, _t20CA);
      real _t20CC = prim +0017<$[]> (_t20C9, _t20CB);
      int _t20CD = 2;
      real _t20CE = prim ^0068 (z20B1, _t20CD);
      real _t20CF = prim +0017<$[]> (_t20CC, _t20CE);
      real _t20D0 = prim cos0169 (_t20CF);
      real _t20D1 = prim *0034 (_t20C7, _t20D0);
      real _t20D2 = prim +0017<$[]> (_t20C3, _t20D1);
      int _t20D3 = -4;
      real _t20D4 = (real)_t20D3;
      real _t20D5 = prim *0034 (_t20D4, x20AF);
      real _t20D6 = prim *0034 (_t20D5, y20B0);
      int _t20D7 = 2;
      real _t20D8 = prim ^0068 (z20B1, _t20D7);
      real _t20D9 = prim *0034 (_t20D6, _t20D8);
      int _t20DA = 2;
      real _t20DB = prim ^0068 (x20AF, _t20DA);
      int _t20DC = 2;
      real _t20DD = prim ^0068 (y20B0, _t20DC);
      real _t20DE = prim +0017<$[]> (_t20DB, _t20DD);
      int _t20DF = 2;
      real _t20E0 = prim ^0068 (z20B1, _t20DF);
      real _t20E1 = prim +0017<$[]> (_t20DE, _t20E0);
      real _t20E2 = prim sin0171 (_t20E1);
      real _t20E3 = prim *0034 (_t20D9, _t20E2);
      int _t20E4 = -4;
      real _t20E5 = (real)_t20E4;
      real _t20E6 = prim *0034 (_t20E5, x20AF);
      int _t20E7 = 3;
      real _t20E8 = prim ^0068 (z20B1, _t20E7);
      real _t20E9 = prim *0034 (_t20E6, _t20E8);
      int _t20EA = 2;
      real _t20EB = prim ^0068 (x20AF, _t20EA);
      int _t20EC = 2;
      real _t20ED = prim ^0068 (y20B0, _t20EC);
      real _t20EE = prim +0017<$[]> (_t20EB, _t20ED);
      int _t20EF = 2;
      real _t20F0 = prim ^0068 (z20B1, _t20EF);
      real _t20F1 = prim +0017<$[]> (_t20EE, _t20F0);
      real _t20F2 = prim sin0171 (_t20F1);
      real _t20F3 = prim *0034 (_t20E9, _t20F2);
      real _t20F4 = 0.4e1;
      real _t20F5 = prim *0034 (_t20F4, x20AF);
      real _t20F6 = prim *0034 (_t20F5, z20B1);
      int _t20F7 = 2;
      real _t20F8 = prim ^0068 (x20AF, _t20F7);
      int _t20F9 = 2;
      real _t20FA = prim ^0068 (y20B0, _t20F9);
      real _t20FB = prim +0017<$[]> (_t20F8, _t20FA);
      int _t20FC = 2;
      real _t20FD = prim ^0068 (z20B1, _t20FC);
      real _t20FE = prim +0017<$[]> (_t20FB, _t20FD);
      real _t20FF = prim cos0169 (_t20FE);
      real _t2100 = prim *0034 (_t20F6, _t20FF);
      real _t2101 = prim +0017<$[]> (_t20F3, _t2100);
      vec3 _t2102 = [_t20D2, _t20E3, _t2101];
      int _t2103 = -4;
      real _t2104 = (real)_t2103;
      real _t2105 = prim *0034 (_t2104, x20AF);
      real _t2106 = prim *0034 (_t2105, y20B0);
      int _t2107 = 2;
      real _t2108 = prim ^0068 (z20B1, _t2107);
      real _t2109 = prim *0034 (_t2106, _t2108);
      int _t210A = 2;
      real _t210B = prim ^0068 (x20AF, _t210A);
      int _t210C = 2;
      real _t210D = prim ^0068 (y20B0, _t210C);
      real _t210E = prim +0017<$[]> (_t210B, _t210D);
      int _t210F = 2;
      real _t2110 = prim ^0068 (z20B1, _t210F);
      real _t2111 = prim +0017<$[]> (_t210E, _t2110);
      real _t2112 = prim sin0171 (_t2111);
      real _t2113 = prim *0034 (_t2109, _t2112);
      int _t2114 = -4;
      real _t2115 = (real)_t2114;
      int _t2116 = 2;
      real _t2117 = prim ^0068 (y20B0, _t2116);
      real _t2118 = prim *0034 (_t2115, _t2117);
      int _t2119 = 2;
      real _t211A = prim ^0068 (z20B1, _t2119);
      real _t211B = prim *0034 (_t2118, _t211A);
      int _t211C = 2;
      real _t211D = prim ^0068 (x20AF, _t211C);
      int _t211E = 2;
      real _t211F = prim ^0068 (y20B0, _t211E);
      real _t2120 = prim +0017<$[]> (_t211D, _t211F);
      int _t2121 = 2;
      real _t2122 = prim ^0068 (z20B1, _t2121);
      real _t2123 = prim +0017<$[]> (_t2120, _t2122);
      real _t2124 = prim sin0171 (_t2123);
      real _t2125 = prim *0034 (_t211B, _t2124);
      real _t2126 = 0.2e1;
      int _t2127 = 2;
      real _t2128 = prim ^0068 (z20B1, _t2127);
      real _t2129 = prim *0034 (_t2126, _t2128);
      int _t212A = 2;
      real _t212B = prim ^0068 (x20AF, _t212A);
      int _t212C = 2;
      real _t212D = prim ^0068 (y20B0, _t212C);
      real _t212E = prim +0017<$[]> (_t212B, _t212D);
      int _t212F = 2;
      real _t2130 = prim ^0068 (z20B1, _t212F);
      real _t2131 = prim +0017<$[]> (_t212E, _t2130);
      real _t2132 = prim cos0169 (_t2131);
      real _t2133 = prim *0034 (_t2129, _t2132);
      real _t2134 = prim +0017<$[]> (_t2125, _t2133);
      int _t2135 = -4;
      real _t2136 = (real)_t2135;
      real _t2137 = prim *0034 (_t2136, y20B0);
      int _t2138 = 3;
      real _t2139 = prim ^0068 (z20B1, _t2138);
      real _t213A = prim *0034 (_t2137, _t2139);
      int _t213B = 2;
      real _t213C = prim ^0068 (x20AF, _t213B);
      int _t213D = 2;
      real _t213E = prim ^0068 (y20B0, _t213D);
      real _t213F = prim +0017<$[]> (_t213C, _t213E);
      int _t2140 = 2;
      real _t2141 = prim ^0068 (z20B1, _t2140);
      real _t2142 = prim +0017<$[]> (_t213F, _t2141);
      real _t2143 = prim sin0171 (_t2142);
      real _t2144 = prim *0034 (_t213A, _t2143);
      real _t2145 = 0.4e1;
      real _t2146 = prim *0034 (_t2145, y20B0);
      real _t2147 = prim *0034 (_t2146, z20B1);
      int _t2148 = 2;
      real _t2149 = prim ^0068 (x20AF, _t2148);
      int _t214A = 2;
      real _t214B = prim ^0068 (y20B0, _t214A);
      real _t214C = prim +0017<$[]> (_t2149, _t214B);
      int _t214D = 2;
      real _t214E = prim ^0068 (z20B1, _t214D);
      real _t214F = prim +0017<$[]> (_t214C, _t214E);
      real _t2150 = prim cos0169 (_t214F);
      real _t2151 = prim *0034 (_t2147, _t2150);
      real _t2152 = prim +0017<$[]> (_t2144, _t2151);
      vec3 _t2153 = [_t2113, _t2134, _t2152];
      int _t2154 = -4;
      real _t2155 = (real)_t2154;
      real _t2156 = prim *0034 (_t2155, x20AF);
      int _t2157 = 3;
      real _t2158 = prim ^0068 (z20B1, _t2157);
      real _t2159 = prim *0034 (_t2156, _t2158);
      int _t215A = 2;
      real _t215B = prim ^0068 (x20AF, _t215A);
      int _t215C = 2;
      real _t215D = prim ^0068 (y20B0, _t215C);
      real _t215E = prim +0017<$[]> (_t215B, _t215D);
      int _t215F = 2;
      real _t2160 = prim ^0068 (z20B1, _t215F);
      real _t2161 = prim +0017<$[]> (_t215E, _t2160);
      real _t2162 = prim sin0171 (_t2161);
      real _t2163 = prim *0034 (_t2159, _t2162);
      real _t2164 = 0.4e1;
      real _t2165 = prim *0034 (_t2164, x20AF);
      real _t2166 = prim *0034 (_t2165, z20B1);
      int _t2167 = 2;
      real _t2168 = prim ^0068 (x20AF, _t2167);
      int _t2169 = 2;
      real _t216A = prim ^0068 (y20B0, _t2169);
      real _t216B = prim +0017<$[]> (_t2168, _t216A);
      int _t216C = 2;
      real _t216D = prim ^0068 (z20B1, _t216C);
      real _t216E = prim +0017<$[]> (_t216B, _t216D);
      real _t216F = prim cos0169 (_t216E);
      real _t2170 = prim *0034 (_t2166, _t216F);
      real _t2171 = prim +0017<$[]> (_t2163, _t2170);
      int _t2172 = -4;
      real _t2173 = (real)_t2172;
      real _t2174 = prim *0034 (_t2173, y20B0);
      int _t2175 = 3;
      real _t2176 = prim ^0068 (z20B1, _t2175);
      real _t2177 = prim *0034 (_t2174, _t2176);
      int _t2178 = 2;
      real _t2179 = prim ^0068 (x20AF, _t2178);
      int _t217A = 2;
      real _t217B = prim ^0068 (y20B0, _t217A);
      real _t217C = prim +0017<$[]> (_t2179, _t217B);
      int _t217D = 2;
      real _t217E = prim ^0068 (z20B1, _t217D);
      real _t217F = prim +0017<$[]> (_t217C, _t217E);
      real _t2180 = prim sin0171 (_t217F);
      real _t2181 = prim *0034 (_t2177, _t2180);
      real _t2182 = 0.4e1;
      real _t2183 = prim *0034 (_t2182, y20B0);
      real _t2184 = prim *0034 (_t2183, z20B1);
      int _t2185 = 2;
      real _t2186 = prim ^0068 (x20AF, _t2185);
      int _t2187 = 2;
      real _t2188 = prim ^0068 (y20B0, _t2187);
      real _t2189 = prim +0017<$[]> (_t2186, _t2188);
      int _t218A = 2;
      real _t218B = prim ^0068 (z20B1, _t218A);
      real _t218C = prim +0017<$[]> (_t2189, _t218B);
      real _t218D = prim cos0169 (_t218C);
      real _t218E = prim *0034 (_t2184, _t218D);
      real _t218F = prim +0017<$[]> (_t2181, _t218E);
      int _t2190 = -4;
      real _t2191 = (real)_t2190;
      int _t2192 = 4;
      real _t2193 = prim ^0068 (z20B1, _t2192);
      real _t2194 = prim *0034 (_t2191, _t2193);
      int _t2195 = 2;
      real _t2196 = prim ^0068 (x20AF, _t2195);
      int _t2197 = 2;
      real _t2198 = prim ^0068 (y20B0, _t2197);
      real _t2199 = prim +0017<$[]> (_t2196, _t2198);
      int _t219A = 2;
      real _t219B = prim ^0068 (z20B1, _t219A);
      real _t219C = prim +0017<$[]> (_t2199, _t219B);
      real _t219D = prim sin0171 (_t219C);
      real _t219E = prim *0034 (_t2194, _t219D);
      real _t219F = 0.1e2;
      int _t21A0 = 2;
      real _t21A1 = prim ^0068 (z20B1, _t21A0);
      real _t21A2 = prim *0034 (_t219F, _t21A1);
      int _t21A3 = 2;
      real _t21A4 = prim ^0068 (x20AF, _t21A3);
      int _t21A5 = 2;
      real _t21A6 = prim ^0068 (y20B0, _t21A5);
      real _t21A7 = prim +0017<$[]> (_t21A4, _t21A6);
      int _t21A8 = 2;
      real _t21A9 = prim ^0068 (z20B1, _t21A8);
      real _t21AA = prim +0017<$[]> (_t21A7, _t21A9);
      real _t21AB = prim cos0169 (_t21AA);
      real _t21AC = prim *0034 (_t21A2, _t21AB);
      real _t21AD = prim +0017<$[]> (_t219E, _t21AC);
      real _t21AE = 0.2e1;
      int _t21AF = 2;
      real _t21B0 = prim ^0068 (x20AF, _t21AF);
      int _t21B1 = 2;
      real _t21B2 = prim ^0068 (y20B0, _t21B1);
      real _t21B3 = prim +0017<$[]> (_t21B0, _t21B2);
      int _t21B4 = 2;
      real _t21B5 = prim ^0068 (z20B1, _t21B4);
      real _t21B6 = prim +0017<$[]> (_t21B3, _t21B5);
      real _t21B7 = prim sin0171 (_t21B6);
      real _t21B8 = prim *0034 (_t21AE, _t21B7);
      real _t21B9 = prim +0017<$[]> (_t21AD, _t21B8);
      vec3 _t21BA = [_t2171, _t218F, _t21B9];
      tensor[3,3] hess21BB = [_t2102, _t2153, _t21BA];
      H20AE = hess21BB;
      real[3] _t21BC = prim evals009F (H20AE);
      int _t21BD = 2;
      real _t21BE = prim $sub01C0<real; %3> (_t21BC, _t21BD);
      real _t21BF = prim unary -008B<$[]> (_t21BE);
      real _t21C0 = prim |()|00B5<$[3]> (g2070);
      real _t21C1 = prim +0017<$[]> (fBias07CC, _t21C0);
      real str21C2 = prim /0055 (_t21BF, _t21C1);
      _t206F = str21C2;
      bool _t21C3 = prim >0080 (_t206F, fStrTh07CA);
      if _t21C3 {
        bool _t21C4;
        real _t21C5;
        real _t21C6 = 0.e0;
        _t21C5 = _t21C6;
        bool _t21C7 = prim >=007E (_t21C5, fMaskTh07CB);
        if _t21C7 {
          bool _t21C8 = true;
          _t21C4 = _t21C8;
        } else {
          _t21C4 = false;
        }
        _t206E = _t21C4;
      } else {
        _t206E = false;
      }
      _t2053 = _t206E;
    } else {
      _t2053 = false;
    }
    _t13B1 = _t2053;
    bool _t13B2 = prim !00BC (_t13B1);
    if _t13B2 {
      bool _t13B3;
      bool _t13B4;
      int _t13B5 = 0;
      bool _t13B6 = prim >007F (verb07DA, _t13B5);
      if _t13B6 {
        _t13B4 = vv13A7;
      } else {
        _t13B4 = false;
      }
      if _t13B4 {
        _t13B3 = true;
      } else {
        int _t13B7 = 1;
        _t13B3 = prim >007F (verb07DA, _t13B7);
      }
      if _t13B3 {
        string _t13B8 = "(i#";
        string _t13B9 = " @ ";
        string _t13BA = "): ";
        print (ID139A, _t13B8, iter1359, _t13B9, pos1398, _t13BA);
        string _t13BB = "!inside=";
        bool _t13BC;
        real _t203A = 0.e0;
        real _t203B = 0.e0;
        real _t203C = 0.e0;
        vec3 _t203D = [_t203A, _t203B, _t203C];
        vec3 mid203E = prim -0026<$[3]> (pos1398, _t203D);
        bool _t204D;
        real _t204E = prim |()|00B5<$[3]> (mid203E);
        real _t204F = 0.4e1;
        bool _t2050 = prim <007A (_t204E, _t204F);
        if _t2050 {
          real _t2051 = prim |()|00B5<$[3]> (mid203E);
          real _t2052 = 0.3e1;
          _t204D = prim >0080 (_t2051, _t2052);
        } else {
          _t204D = false;
        }
        _t13BC = _t204D;
        string _t13BD = " || fStrength=";
        real _t13BE;
        vec3 g1EE7;
        real x1EE8 = pos1398[0];
        real y1EE9 = pos1398[1];
        real z1EEA = pos1398[2];
        real _t1EEB = 0.2e1;
        real _t1EEC = prim *0034 (_t1EEB, x1EE8);
        int _t1EED = 2;
        real _t1EEE = prim ^0068 (z1EEA, _t1EED);
        real _t1EEF = prim *0034 (_t1EEC, _t1EEE);
        int _t1EF0 = 2;
        real _t1EF1 = prim ^0068 (x1EE8, _t1EF0);
        int _t1EF2 = 2;
        real _t1EF3 = prim ^0068 (y1EE9, _t1EF2);
        real _t1EF4 = prim +0017<$[]> (_t1EF1, _t1EF3);
        int _t1EF5 = 2;
        real _t1EF6 = prim ^0068 (z1EEA, _t1EF5);
        real _t1EF7 = prim +0017<$[]> (_t1EF4, _t1EF6);
        real _t1EF8 = prim cos0169 (_t1EF7);
        real _t1EF9 = prim *0034 (_t1EEF, _t1EF8);
        real _t1EFA = 0.2e1;
        real _t1EFB = prim *0034 (_t1EFA, y1EE9);
        int _t1EFC = 2;
        real _t1EFD = prim ^0068 (z1EEA, _t1EFC);
        real _t1EFE = prim *0034 (_t1EFB, _t1EFD);
        int _t1EFF = 2;
        real _t1F00 = prim ^0068 (x1EE8, _t1EFF);
        int _t1F01 = 2;
        real _t1F02 = prim ^0068 (y1EE9, _t1F01);
        real _t1F03 = prim +0017<$[]> (_t1F00, _t1F02);
        int _t1F04 = 2;
        real _t1F05 = prim ^0068 (z1EEA, _t1F04);
        real _t1F06 = prim +0017<$[]> (_t1F03, _t1F05);
        real _t1F07 = prim cos0169 (_t1F06);
        real _t1F08 = prim *0034 (_t1EFE, _t1F07);
        real _t1F09 = 0.2e1;
        int _t1F0A = 3;
        real _t1F0B = prim ^0068 (z1EEA, _t1F0A);
        real _t1F0C = prim *0034 (_t1F09, _t1F0B);
        int _t1F0D = 2;
        real _t1F0E = prim ^0068 (x1EE8, _t1F0D);
        int _t1F0F = 2;
        real _t1F10 = prim ^0068 (y1EE9, _t1F0F);
        real _t1F11 = prim +0017<$[]> (_t1F0E, _t1F10);
        int _t1F12 = 2;
        real _t1F13 = prim ^0068 (z1EEA, _t1F12);
        real _t1F14 = prim +0017<$[]> (_t1F11, _t1F13);
        real _t1F15 = prim cos0169 (_t1F14);
        real _t1F16 = prim *0034 (_t1F0C, _t1F15);
        real _t1F17 = 0.2e1;
        real _t1F18 = prim *0034 (_t1F17, z1EEA);
        int _t1F19 = 2;
        real _t1F1A = prim ^0068 (x1EE8, _t1F19);
        int _t1F1B = 2;
        real _t1F1C = prim ^0068 (y1EE9, _t1F1B);
        real _t1F1D = prim +0017<$[]> (_t1F1A, _t1F1C);
        int _t1F1E = 2;
        real _t1F1F = prim ^0068 (z1EEA, _t1F1E);
        real _t1F20 = prim +0017<$[]> (_t1F1D, _t1F1F);
        real _t1F21 = prim sin0171 (_t1F20);
        real _t1F22 = prim *0034 (_t1F18, _t1F21);
        real _t1F23 = prim +0017<$[]> (_t1F16, _t1F22);
        vec3 g1F24 = [_t1EF9, _t1F08, _t1F23];
        g1EE7 = g1F24;
        tensor[3,3] H1F25;
        real x1F26 = pos1398[0];
        real y1F27 = pos1398[1];
        real z1F28 = pos1398[2];
        int _t1F29 = -4;
        real _t1F2A = (real)_t1F29;
        int _t1F2B = 2;
        real _t1F2C = prim ^0068 (x1F26, _t1F2B);
        real _t1F2D = prim *0034 (_t1F2A, _t1F2C);
        int _t1F2E = 2;
        real _t1F2F = prim ^0068 (z1F28, _t1F2E);
        real _t1F30 = prim *0034 (_t1F2D, _t1F2F);
        int _t1F31 = 2;
        real _t1F32 = prim ^0068 (x1F26, _t1F31);
        int _t1F33 = 2;
        real _t1F34 = prim ^0068 (y1F27, _t1F33);
        real _t1F35 = prim +0017<$[]> (_t1F32, _t1F34);
        int _t1F36 = 2;
        real _t1F37 = prim ^0068 (z1F28, _t1F36);
        real _t1F38 = prim +0017<$[]> (_t1F35, _t1F37);
        real _t1F39 = prim sin0171 (_t1F38);
        real _t1F3A = prim *0034 (_t1F30, _t1F39);
        real _t1F3B = 0.2e1;
        int _t1F3C = 2;
        real _t1F3D = prim ^0068 (z1F28, _t1F3C);
        real _t1F3E = prim *0034 (_t1F3B, _t1F3D);
        int _t1F3F = 2;
        real _t1F40 = prim ^0068 (x1F26, _t1F3F);
        int _t1F41 = 2;
        real _t1F42 = prim ^0068 (y1F27, _t1F41);
        real _t1F43 = prim +0017<$[]> (_t1F40, _t1F42);
        int _t1F44 = 2;
        real _t1F45 = prim ^0068 (z1F28, _t1F44);
        real _t1F46 = prim +0017<$[]> (_t1F43, _t1F45);
        real _t1F47 = prim cos0169 (_t1F46);
        real _t1F48 = prim *0034 (_t1F3E, _t1F47);
        real _t1F49 = prim +0017<$[]> (_t1F3A, _t1F48);
        int _t1F4A = -4;
        real _t1F4B = (real)_t1F4A;
        real _t1F4C = prim *0034 (_t1F4B, x1F26);
        real _t1F4D = prim *0034 (_t1F4C, y1F27);
        int _t1F4E = 2;
        real _t1F4F = prim ^0068 (z1F28, _t1F4E);
        real _t1F50 = prim *0034 (_t1F4D, _t1F4F);
        int _t1F51 = 2;
        real _t1F52 = prim ^0068 (x1F26, _t1F51);
        int _t1F53 = 2;
        real _t1F54 = prim ^0068 (y1F27, _t1F53);
        real _t1F55 = prim +0017<$[]> (_t1F52, _t1F54);
        int _t1F56 = 2;
        real _t1F57 = prim ^0068 (z1F28, _t1F56);
        real _t1F58 = prim +0017<$[]> (_t1F55, _t1F57);
        real _t1F59 = prim sin0171 (_t1F58);
        real _t1F5A = prim *0034 (_t1F50, _t1F59);
        int _t1F5B = -4;
        real _t1F5C = (real)_t1F5B;
        real _t1F5D = prim *0034 (_t1F5C, x1F26);
        int _t1F5E = 3;
        real _t1F5F = prim ^0068 (z1F28, _t1F5E);
        real _t1F60 = prim *0034 (_t1F5D, _t1F5F);
        int _t1F61 = 2;
        real _t1F62 = prim ^0068 (x1F26, _t1F61);
        int _t1F63 = 2;
        real _t1F64 = prim ^0068 (y1F27, _t1F63);
        real _t1F65 = prim +0017<$[]> (_t1F62, _t1F64);
        int _t1F66 = 2;
        real _t1F67 = prim ^0068 (z1F28, _t1F66);
        real _t1F68 = prim +0017<$[]> (_t1F65, _t1F67);
        real _t1F69 = prim sin0171 (_t1F68);
        real _t1F6A = prim *0034 (_t1F60, _t1F69);
        real _t1F6B = 0.4e1;
        real _t1F6C = prim *0034 (_t1F6B, x1F26);
        real _t1F6D = prim *0034 (_t1F6C, z1F28);
        int _t1F6E = 2;
        real _t1F6F = prim ^0068 (x1F26, _t1F6E);
        int _t1F70 = 2;
        real _t1F71 = prim ^0068 (y1F27, _t1F70);
        real _t1F72 = prim +0017<$[]> (_t1F6F, _t1F71);
        int _t1F73 = 2;
        real _t1F74 = prim ^0068 (z1F28, _t1F73);
        real _t1F75 = prim +0017<$[]> (_t1F72, _t1F74);
        real _t1F76 = prim cos0169 (_t1F75);
        real _t1F77 = prim *0034 (_t1F6D, _t1F76);
        real _t1F78 = prim +0017<$[]> (_t1F6A, _t1F77);
        vec3 _t1F79 = [_t1F49, _t1F5A, _t1F78];
        int _t1F7A = -4;
        real _t1F7B = (real)_t1F7A;
        real _t1F7C = prim *0034 (_t1F7B, x1F26);
        real _t1F7D = prim *0034 (_t1F7C, y1F27);
        int _t1F7E = 2;
        real _t1F7F = prim ^0068 (z1F28, _t1F7E);
        real _t1F80 = prim *0034 (_t1F7D, _t1F7F);
        int _t1F81 = 2;
        real _t1F82 = prim ^0068 (x1F26, _t1F81);
        int _t1F83 = 2;
        real _t1F84 = prim ^0068 (y1F27, _t1F83);
        real _t1F85 = prim +0017<$[]> (_t1F82, _t1F84);
        int _t1F86 = 2;
        real _t1F87 = prim ^0068 (z1F28, _t1F86);
        real _t1F88 = prim +0017<$[]> (_t1F85, _t1F87);
        real _t1F89 = prim sin0171 (_t1F88);
        real _t1F8A = prim *0034 (_t1F80, _t1F89);
        int _t1F8B = -4;
        real _t1F8C = (real)_t1F8B;
        int _t1F8D = 2;
        real _t1F8E = prim ^0068 (y1F27, _t1F8D);
        real _t1F8F = prim *0034 (_t1F8C, _t1F8E);
        int _t1F90 = 2;
        real _t1F91 = prim ^0068 (z1F28, _t1F90);
        real _t1F92 = prim *0034 (_t1F8F, _t1F91);
        int _t1F93 = 2;
        real _t1F94 = prim ^0068 (x1F26, _t1F93);
        int _t1F95 = 2;
        real _t1F96 = prim ^0068 (y1F27, _t1F95);
        real _t1F97 = prim +0017<$[]> (_t1F94, _t1F96);
        int _t1F98 = 2;
        real _t1F99 = prim ^0068 (z1F28, _t1F98);
        real _t1F9A = prim +0017<$[]> (_t1F97, _t1F99);
        real _t1F9B = prim sin0171 (_t1F9A);
        real _t1F9C = prim *0034 (_t1F92, _t1F9B);
        real _t1F9D = 0.2e1;
        int _t1F9E = 2;
        real _t1F9F = prim ^0068 (z1F28, _t1F9E);
        real _t1FA0 = prim *0034 (_t1F9D, _t1F9F);
        int _t1FA1 = 2;
        real _t1FA2 = prim ^0068 (x1F26, _t1FA1);
        int _t1FA3 = 2;
        real _t1FA4 = prim ^0068 (y1F27, _t1FA3);
        real _t1FA5 = prim +0017<$[]> (_t1FA2, _t1FA4);
        int _t1FA6 = 2;
        real _t1FA7 = prim ^0068 (z1F28, _t1FA6);
        real _t1FA8 = prim +0017<$[]> (_t1FA5, _t1FA7);
        real _t1FA9 = prim cos0169 (_t1FA8);
        real _t1FAA = prim *0034 (_t1FA0, _t1FA9);
        real _t1FAB = prim +0017<$[]> (_t1F9C, _t1FAA);
        int _t1FAC = -4;
        real _t1FAD = (real)_t1FAC;
        real _t1FAE = prim *0034 (_t1FAD, y1F27);
        int _t1FAF = 3;
        real _t1FB0 = prim ^0068 (z1F28, _t1FAF);
        real _t1FB1 = prim *0034 (_t1FAE, _t1FB0);
        int _t1FB2 = 2;
        real _t1FB3 = prim ^0068 (x1F26, _t1FB2);
        int _t1FB4 = 2;
        real _t1FB5 = prim ^0068 (y1F27, _t1FB4);
        real _t1FB6 = prim +0017<$[]> (_t1FB3, _t1FB5);
        int _t1FB7 = 2;
        real _t1FB8 = prim ^0068 (z1F28, _t1FB7);
        real _t1FB9 = prim +0017<$[]> (_t1FB6, _t1FB8);
        real _t1FBA = prim sin0171 (_t1FB9);
        real _t1FBB = prim *0034 (_t1FB1, _t1FBA);
        real _t1FBC = 0.4e1;
        real _t1FBD = prim *0034 (_t1FBC, y1F27);
        real _t1FBE = prim *0034 (_t1FBD, z1F28);
        int _t1FBF = 2;
        real _t1FC0 = prim ^0068 (x1F26, _t1FBF);
        int _t1FC1 = 2;
        real _t1FC2 = prim ^0068 (y1F27, _t1FC1);
        real _t1FC3 = prim +0017<$[]> (_t1FC0, _t1FC2);
        int _t1FC4 = 2;
        real _t1FC5 = prim ^0068 (z1F28, _t1FC4);
        real _t1FC6 = prim +0017<$[]> (_t1FC3, _t1FC5);
        real _t1FC7 = prim cos0169 (_t1FC6);
        real _t1FC8 = prim *0034 (_t1FBE, _t1FC7);
        real _t1FC9 = prim +0017<$[]> (_t1FBB, _t1FC8);
        vec3 _t1FCA = [_t1F8A, _t1FAB, _t1FC9];
        int _t1FCB = -4;
        real _t1FCC = (real)_t1FCB;
        real _t1FCD = prim *0034 (_t1FCC, x1F26);
        int _t1FCE = 3;
        real _t1FCF = prim ^0068 (z1F28, _t1FCE);
        real _t1FD0 = prim *0034 (_t1FCD, _t1FCF);
        int _t1FD1 = 2;
        real _t1FD2 = prim ^0068 (x1F26, _t1FD1);
        int _t1FD3 = 2;
        real _t1FD4 = prim ^0068 (y1F27, _t1FD3);
        real _t1FD5 = prim +0017<$[]> (_t1FD2, _t1FD4);
        int _t1FD6 = 2;
        real _t1FD7 = prim ^0068 (z1F28, _t1FD6);
        real _t1FD8 = prim +0017<$[]> (_t1FD5, _t1FD7);
        real _t1FD9 = prim sin0171 (_t1FD8);
        real _t1FDA = prim *0034 (_t1FD0, _t1FD9);
        real _t1FDB = 0.4e1;
        real _t1FDC = prim *0034 (_t1FDB, x1F26);
        real _t1FDD = prim *0034 (_t1FDC, z1F28);
        int _t1FDE = 2;
        real _t1FDF = prim ^0068 (x1F26, _t1FDE);
        int _t1FE0 = 2;
        real _t1FE1 = prim ^0068 (y1F27, _t1FE0);
        real _t1FE2 = prim +0017<$[]> (_t1FDF, _t1FE1);
        int _t1FE3 = 2;
        real _t1FE4 = prim ^0068 (z1F28, _t1FE3);
        real _t1FE5 = prim +0017<$[]> (_t1FE2, _t1FE4);
        real _t1FE6 = prim cos0169 (_t1FE5);
        real _t1FE7 = prim *0034 (_t1FDD, _t1FE6);
        real _t1FE8 = prim +0017<$[]> (_t1FDA, _t1FE7);
        int _t1FE9 = -4;
        real _t1FEA = (real)_t1FE9;
        real _t1FEB = prim *0034 (_t1FEA, y1F27);
        int _t1FEC = 3;
        real _t1FED = prim ^0068 (z1F28, _t1FEC);
        real _t1FEE = prim *0034 (_t1FEB, _t1FED);
        int _t1FEF = 2;
        real _t1FF0 = prim ^0068 (x1F26, _t1FEF);
        int _t1FF1 = 2;
        real _t1FF2 = prim ^0068 (y1F27, _t1FF1);
        real _t1FF3 = prim +0017<$[]> (_t1FF0, _t1FF2);
        int _t1FF4 = 2;
        real _t1FF5 = prim ^0068 (z1F28, _t1FF4);
        real _t1FF6 = prim +0017<$[]> (_t1FF3, _t1FF5);
        real _t1FF7 = prim sin0171 (_t1FF6);
        real _t1FF8 = prim *0034 (_t1FEE, _t1FF7);
        real _t1FF9 = 0.4e1;
        real _t1FFA = prim *0034 (_t1FF9, y1F27);
        real _t1FFB = prim *0034 (_t1FFA, z1F28);
        int _t1FFC = 2;
        real _t1FFD = prim ^0068 (x1F26, _t1FFC);
        int _t1FFE = 2;
        real _t1FFF = prim ^0068 (y1F27, _t1FFE);
        real _t2000 = prim +0017<$[]> (_t1FFD, _t1FFF);
        int _t2001 = 2;
        real _t2002 = prim ^0068 (z1F28, _t2001);
        real _t2003 = prim +0017<$[]> (_t2000, _t2002);
        real _t2004 = prim cos0169 (_t2003);
        real _t2005 = prim *0034 (_t1FFB, _t2004);
        real _t2006 = prim +0017<$[]> (_t1FF8, _t2005);
        int _t2007 = -4;
        real _t2008 = (real)_t2007;
        int _t2009 = 4;
        real _t200A = prim ^0068 (z1F28, _t2009);
        real _t200B = prim *0034 (_t2008, _t200A);
        int _t200C = 2;
        real _t200D = prim ^0068 (x1F26, _t200C);
        int _t200E = 2;
        real _t200F = prim ^0068 (y1F27, _t200E);
        real _t2010 = prim +0017<$[]> (_t200D, _t200F);
        int _t2011 = 2;
        real _t2012 = prim ^0068 (z1F28, _t2011);
        real _t2013 = prim +0017<$[]> (_t2010, _t2012);
        real _t2014 = prim sin0171 (_t2013);
        real _t2015 = prim *0034 (_t200B, _t2014);
        real _t2016 = 0.1e2;
        int _t2017 = 2;
        real _t2018 = prim ^0068 (z1F28, _t2017);
        real _t2019 = prim *0034 (_t2016, _t2018);
        int _t201A = 2;
        real _t201B = prim ^0068 (x1F26, _t201A);
        int _t201C = 2;
        real _t201D = prim ^0068 (y1F27, _t201C);
        real _t201E = prim +0017<$[]> (_t201B, _t201D);
        int _t201F = 2;
        real _t2020 = prim ^0068 (z1F28, _t201F);
        real _t2021 = prim +0017<$[]> (_t201E, _t2020);
        real _t2022 = prim cos0169 (_t2021);
        real _t2023 = prim *0034 (_t2019, _t2022);
        real _t2024 = prim +0017<$[]> (_t2015, _t2023);
        real _t2025 = 0.2e1;
        int _t2026 = 2;
        real _t2027 = prim ^0068 (x1F26, _t2026);
        int _t2028 = 2;
        real _t2029 = prim ^0068 (y1F27, _t2028);
        real _t202A = prim +0017<$[]> (_t2027, _t2029);
        int _t202B = 2;
        real _t202C = prim ^0068 (z1F28, _t202B);
        real _t202D = prim +0017<$[]> (_t202A, _t202C);
        real _t202E = prim sin0171 (_t202D);
        real _t202F = prim *0034 (_t2025, _t202E);
        real _t2030 = prim +0017<$[]> (_t2024, _t202F);
        vec3 _t2031 = [_t1FE8, _t2006, _t2030];
        tensor[3,3] hess2032 = [_t1F79, _t1FCA, _t2031];
        H1F25 = hess2032;
        real[3] _t2033 = prim evals009F (H1F25);
        int _t2034 = 2;
        real _t2035 = prim $sub01C0<real; %3> (_t2033, _t2034);
        real _t2036 = prim unary -008B<$[]> (_t2035);
        real _t2037 = prim |()|00B5<$[3]> (g1EE7);
        real _t2038 = prim +0017<$[]> (fBias07CC, _t2037);
        real str2039 = prim /0055 (_t2036, _t2038);
        _t13BE = str2039;
        string _t13BF = " <= fStrTh=";
        string _t13C0 = " || fMask(pos)=";
        real _t13C1;
        real _t1EE6 = 0.e0;
        _t13C1 = _t1EE6;
        string _t13C2 = " < fMaskTh=";
        string _t13C3 = " || fTest(pos)=";
        bool _t13C4;
        bool _t1EE5 = true;
        _t13C4 = _t1EE5;
        string _t13C5 = " ==>DIE\n";
        print (_t13BB, _t13BC, _t13BD, _t13BE, _t13BF, fStrTh07CA, _t13C0, _t13C1, _t13C2, fMaskTh07CB, _t13C3, _t13C4, _t13C5);
      }
      die;
    }
    real _t13C6 = 0.e0;
    bool _t13C7 = prim >0080 (travMax07CF, _t13C6);
    if _t13C7 {
      bool _t13C8 = prim >0080 (trav13A2, travMax07CF);
      if _t13C8 {
        die;
      }
    }
    bool _t13C9 = prim !00BC (found13A0);
    if _t13C9 {
      int _t13CA = 0;
      bool _t13CB = prim >007F (nfsMax07D0, _t13CA);
      if _t13CB {
        bool _t13CC = prim >007F (nfs13A1, nfsMax07D0);
        if _t13CC {
          bool _t13CD;
          bool _t13CE;
          int _t13CF = 0;
          bool _t13D0 = prim >007F (verb07DA, _t13CF);
          if _t13D0 {
            _t13CE = vv13A7;
          } else {
            _t13CE = false;
          }
          if _t13CE {
            _t13CD = true;
          } else {
            int _t13D1 = 1;
            _t13CD = prim >007F (verb07DA, _t13D1);
          }
          if _t13CD {
            string _t13D2 = "(i#";
            string _t13D3 = " @ ";
            string _t13D4 = "): ";
            print (ID139A, _t13D2, iter1359, _t13D3, pos1398, _t13D4);
            string _t13D5 = "nfs=";
            string _t13D6 = " > nfsMax=";
            string _t13D7 = " || trav=";
            string _t13D8 = " > travMax=";
            string _t13D9 = " =>DIE\n";
            print (_t13D5, nfs13A1, _t13D6, nfsMax07D0, _t13D7, trav13A2, _t13D8, travMax07CF, _t13D9);
          }
          die;
        }
      }
      vec3 _t13DA = func fStep128C (pos1398);
      step139C = prim *0036<$[3]> (sfs07DB, _t13DA);
      pos1398 = prim +0017<$[3]> (pos1398, step139C);
      _pos1399 = pos1398;
      real _t13DB = prim |()|00B5<$[3]> (step139C);
      real _t13DC = prim /0055 (_t13DB, tipd07CD);
      mvmt13A3 = prim lerp0096<$[]> (_t13DC, mvmt13A3, hist07DC);
      bool _t13DD = prim >0080 (mvmt13A3, fsEps07D4);
      if _t13DD {
        real _t13DE = prim |()|00B5<$[3]> (step139C);
        real _t13DF = prim /0055 (_t13DE, tipd07CD);
        trav13A2 = prim +0017<$[]> (trav13A2, _t13DF);
        int _t13E0 = 1;
        nfs13A1 = prim +0015 (nfs13A1, _t13E0);
      } else {
        found13A0 = true;
        mvmt13A3 = 0.1e1;
        trav13A2 = 0.e0;
      }
      bool _t13E1;
      bool _t13E2;
      int _t13E3 = 0;
      bool _t13E4 = prim >007F (verb07DA, _t13E3);
      if _t13E4 {
        _t13E2 = vv13A7;
      } else {
        _t13E2 = false;
      }
      if _t13E2 {
        _t13E1 = true;
      } else {
        int _t13E5 = 1;
        _t13E1 = prim >007F (verb07DA, _t13E5);
      }
      if _t13E1 {
        string _t13E6 = "(i#";
        string _t13E7 = " @ ";
        string _t13E8 = "): ";
        print (ID139A, _t13E6, iter1359, _t13E7, pos1398, _t13E8);
        string _t13E9 = "step=";
        string _t13EA = "; mvmt=";
        string _t13EB = " => found=";
        string _t13EC = "\n";
        print (_t13E9, step139C, _t13EA, mvmt13A3, _t13EB, found13A0, _t13EC);
      }
    } else {
      int _t13ED = 0;
      bool _t13EE = prim ==0082 (_t13ED, fDim07DF);
      if _t13EE {
        stabilize;
      }
      vec3 _t13EF = func fStep128C (pos1398);
      step139C = prim *0036<$[3]> (sfs07DB, _t13EF);
      pos1398 = prim +0017<$[3]> (pos1398, step139C);
      _pos1399 = pos1398;
      real _t13F0 = prim |()|00B5<$[3]> (step139C);
      real _t13F1 = prim /0055 (_t13F0, tipd07CD);
      trav13A2 = prim +0017<$[]> (trav13A2, _t13F1);
      real oldE13F2 = 0.e0;
      real _t13F3 = 0.e0;
      real _t13F4 = 0.e0;
      real _t13F5 = 0.e0;
      vec3 force13F6 = [_t13F3, _t13F4, _t13F5];
      int nn13F7 = 0;
      point[] _t13F8 = prim sphere0198<point> (_pos1399, rad1342);
      foreach P13F9 in _t13F8 {
        vec3 _t13FA = P13F9.pos1398;
        vec3 off13FB = prim -0026<$[3]> (_t13FA, pos1398);
        real _t13FC = prim |()|00B5<$[3]> (off13FB);
        real _t13FD = prim /0055 (_t13FC, tipd07CD);
        bool _t13FE = prim <007A (_t13FD, fsEps07D4);
        if _t13FE {
          real _t13FF = P13F9.ID139A;
          bool _t1400 = prim <=007C (ID139A, _t13FF);
          if _t1400 {
            die;
          }
        }
        real _t1407;
        real _t1EBD = prim |()|00B5<$[3]> (off13FB);
        real _t1EBE = prim /0055 (_t1EBD, rad1342);
        real _t1EBF;
        real _t1EC0 = 0.2e1;
        real _t1EC1 = 0.3e1;
        real _t1EC2 = prim /0055 (_t1EC0, _t1EC1);
        real s1EC3 = prim -0026<$[]> (_t1EBE, _t1EC2);
        real _t1EC4;
        real _t1EC5 = 0.2e1;
        real _t1EC6 = 0.3e1;
        real _t1EC7 = prim /0055 (_t1EC5, _t1EC6);
        bool _t1EC8 = prim <007A (_t1EBE, _t1EC7);
        if _t1EC8 {
          real _t1EC9 = 0.1e1;
          real _t1ECA = -0.5646e1;
          real _t1ECB = 0.119835e2;
          real _t1ECC = -0.113535e2;
          real _t1ECD = 0.40550625e1;
          real _t1ECE = prim *0034 (_t1ECD, _t1EBE);
          real _t1ECF = prim +0017<$[]> (_t1ECC, _t1ECE);
          real _t1ED0 = prim *0034 (_t1EBE, _t1ECF);
          real _t1ED1 = prim +0017<$[]> (_t1ECB, _t1ED0);
          real _t1ED2 = prim *0034 (_t1EBE, _t1ED1);
          real _t1ED3 = prim +0017<$[]> (_t1ECA, _t1ED2);
          real _t1ED4 = prim *0034 (_t1EBE, _t1ED3);
          _t1EC4 = prim +0017<$[]> (_t1EC9, _t1ED4);
        } else {
          real _t1ED5;
          real _t1ED6 = 0.1e1;
          bool _t1ED7 = prim <007A (_t1EBE, _t1ED6);
          if _t1ED7 {
            real _t1ED8 = -0.1e-2;
            real _t1ED9 = 0.9e-1;
            real _t1EDA = -0.54e0;
            real _t1EDB = 0.1215e1;
            real _t1EDC = 0.972e0;
            real _t1EDD = prim *0034 (_t1EDC, s1EC3);
            real _t1EDE = prim -0026<$[]> (_t1EDB, _t1EDD);
            real _t1EDF = prim *0034 (_t1EDE, s1EC3);
            real _t1EE0 = prim +0017<$[]> (_t1EDA, _t1EDF);
            real _t1EE1 = prim *0034 (_t1EE0, s1EC3);
            real _t1EE2 = prim +0017<$[]> (_t1ED9, _t1EE1);
            real _t1EE3 = prim *0034 (_t1EE2, s1EC3);
            real _t1EE4 = prim *0034 (_t1EE3, s1EC3);
            _t1ED5 = prim +0017<$[]> (_t1ED8, _t1EE4);
          } else {
            _t1ED5 = 0.e0;
          }
          _t1EC4 = _t1ED5;
        }
        _t1EBF = _t1EC4;
        _t1407 = _t1EBF;
        oldE13F2 = prim +0017<$[]> (oldE13F2, _t1407);
        vec3 _t1408;
        real _t1E93 = prim |()|00B5<$[3]> (off13FB);
        real _t1E94 = prim /0055 (_t1E93, rad1342);
        real _t1E95;
        real _t1E96 = 0.3e1;
        real _t1E97 = prim *0034 (_t1E96, _t1E94);
        real _t1E98 = 0.2e1;
        real t1E99 = prim -0026<$[]> (_t1E97, _t1E98);
        real _t1E9A;
        real _t1E9B = 0.2e1;
        real _t1E9C = 0.3e1;
        real _t1E9D = prim /0055 (_t1E9B, _t1E9C);
        bool _t1E9E = prim <007A (_t1E94, _t1E9D);
        if _t1E9E {
          real _t1E9F = -0.5646e1;
          real _t1EA0 = 0.23967e2;
          real _t1EA1 = -0.340605e2;
          real _t1EA2 = 0.1622025e2;
          real _t1EA3 = prim *0034 (_t1EA2, _t1E94);
          real _t1EA4 = prim +0017<$[]> (_t1EA1, _t1EA3);
          real _t1EA5 = prim *0034 (_t1E94, _t1EA4);
          real _t1EA6 = prim +0017<$[]> (_t1EA0, _t1EA5);
          real _t1EA7 = prim *0034 (_t1E94, _t1EA6);
          _t1E9A = prim +0017<$[]> (_t1E9F, _t1EA7);
        } else {
          real _t1EA8;
          real _t1EA9 = 0.1e1;
          bool _t1EAA = prim <007A (_t1E94, _t1EA9);
          if _t1EAA {
            real _t1EAB = 0.1234567901e-1;
            real _t1EAC = prim *0034 (_t1EAB, t1E99);
            real _t1EAD = 0.486e1;
            real _t1EAE = -0.1458e2;
            real _t1EAF = 0.1458e2;
            real _t1EB0 = 0.486e1;
            real _t1EB1 = prim *0034 (_t1EB0, t1E99);
            real _t1EB2 = prim -0026<$[]> (_t1EAF, _t1EB1);
            real _t1EB3 = prim *0034 (t1E99, _t1EB2);
            real _t1EB4 = prim +0017<$[]> (_t1EAE, _t1EB3);
            real _t1EB5 = prim *0034 (t1E99, _t1EB4);
            real _t1EB6 = prim +0017<$[]> (_t1EAD, _t1EB5);
            _t1EA8 = prim *0034 (_t1EAC, _t1EB6);
          } else {
            _t1EA8 = 0.e0;
          }
          _t1E9A = _t1EA8;
        }
        _t1E95 = _t1E9A;
        real _t1EB7 = 0.1e1;
        real _t1EB8 = prim /0055 (_t1EB7, rad1342);
        real _t1EB9 = prim *0034 (_t1E95, _t1EB8);
        vec3 _t1EBA = prim *0036<$[3]> (_t1EB9, off13FB);
        real _t1EBB = prim |()|00B5<$[3]> (off13FB);
        vec3 _t1EBC = prim /0057<$[3]> (_t1EBA, _t1EBB);
        _t1408 = _t1EBC;
        force13F6 = prim +0017<$[3]> (force13F6, _t1408);
        int _t1409 = 1;
        nn13F7 = prim +0015 (nn13F7, _t1409);
      }
      int _t140A = 0;
      bool _t140B = prim ==0082 (_t140A, nn13F7);
      if _t140B {
        bool _t140C;
        int _t140D;
        bool _t1E83;
        int _t1E84 = 0;
        bool _t1E85 = prim >007F (pcp07DD, _t1E84);
        if _t1E85 {
          bool _t1E86;
          int _t1E87 = 0;
          bool _t1E88 = prim >007F (iter1359, _t1E87);
          if _t1E88 {
            int _t1E89 = 0;
            int _t1E8A = prim %00A1 (iter1359, pcp07DD);
            _t1E86 = prim ==0082 (_t1E89, _t1E8A);
          } else {
            _t1E86 = false;
          }
          _t1E83 = _t1E86;
        } else {
          _t1E83 = false;
        }
        if _t1E83 {
          int _t1E8B = prim /0054 (iter1359, pcp07DD);
          int _t1E8C = 2;
          int _t1E8D = prim %00A1 (_t1E8B, _t1E8C);
          int _t1E8E = 2;
          int _t1E8F = prim *0033 (_t1E8D, _t1E8E);
          int _t1E90 = 1;
          int _t1E91 = prim -0024 (_t1E8F, _t1E90);
          _t140D = _t1E91;
        } else {
          int _t1E92 = 0;
          _t140D = _t1E92;
        }
        int _t140E = 0;
        bool _t140F = prim >007F (_t140D, _t140E);
        if _t140F {
          _t140C = prim <0079 (born13A5, nnmax12F4);
        } else {
          _t140C = false;
        }
        bool _t1410 = prim !00BC (_t140C);
        if _t1410 {
          continue;
        }
        tensor[3,3] _t1411 = func fPerp12BE (pos1398);
        real _t1412 = 0.e0;
        real _t1413 = 0.e0;
        vec3 _t1414 = [tipd07CD, _t1412, _t1413];
        vec3 noff01415 = prim •00CE<$[3,3]; $[3]; $[3]> (_t1411, _t1414);
        tensor[3,3] _t1416 = func fPerp12BE (pos1398);
        real _t1417 = 0.e0;
        real _t1418 = 0.e0;
        vec3 _t1419 = [_t1417, tipd07CD, _t1418];
        vec3 noff1141A = prim •00CE<$[3,3]; $[3]; $[3]> (_t1416, _t1419);
        tensor[3,3] _t141B = func fPerp12BE (pos1398);
        real _t141C = 0.e0;
        real _t141D = 0.e0;
        vec3 _t141E = [_t141C, _t141D, tipd07CD];
        vec3 noff2141F = prim •00CE<$[3,3]; $[3]; $[3]> (_t141B, _t141E);
        vec3 noff1420 = noff01415;
        vec3 _t1421;
        real _t1422 = prim |()|00B5<$[3]> (noff1420);
        real _t1423 = prim |()|00B5<$[3]> (noff1141A);
        bool _t1424 = prim >0080 (_t1422, _t1423);
        if _t1424 {
          _t1421 = noff1420;
        } else {
          _t1421 = noff1141A;
        }
        noff1420 = _t1421;
        vec3 _t1425;
        real _t1426 = prim |()|00B5<$[3]> (noff1420);
        real _t1427 = prim |()|00B5<$[3]> (noff2141F);
        bool _t1428 = prim >0080 (_t1426, _t1427);
        if _t1428 {
          _t1425 = noff1420;
        } else {
          _t1425 = noff2141F;
        }
        noff1420 = _t1425;
        vec3 _t1429 = prim normalize0137<$[3]> (noff1420);
        vec3 _t142A = prim *0036<$[3]> (tipd07CD, _t1429);
        vec3 npos142B = prim +0017<$[3]> (_t142A, pos1398);
        vec3 _t142C = func fStep128C (npos142B);
        vec3 _t142D = prim *0036<$[3]> (sfs07DB, _t142C);
        npos142B = prim +0017<$[3]> (npos142B, _t142D);
        bool _t142E;
        bool _t142F;
        int _t1430 = 0;
        bool _t1431 = prim >007F (verb07DA, _t1430);
        if _t1431 {
          _t142F = vv13A7;
        } else {
          _t142F = false;
        }
        if _t142F {
          _t142E = true;
        } else {
          int _t1432 = 1;
          _t142E = prim >007F (verb07DA, _t1432);
        }
        if _t142E {
          string _t1433 = "(i#";
          string _t1434 = " @ ";
          string _t1435 = "): ";
          print (ID139A, _t1433, iter1359, _t1434, pos1398, _t1435);
          string _t1436 = " 0==nn =>NEW(";
          string _t1437 = ") w/ ID=";
          real _t1438;
          real _t1E75 = 0.1e7;
          real _t1E76;
          real _t1E77 = npos142B[0];
          real _t1E78 = func urnd135C (_t1E77);
          real _t1E79 = npos142B[1];
          real _t1E7A = func urnd135C (_t1E79);
          real _t1E7B = prim +0017<$[]> (_t1E78, _t1E7A);
          real _t1E7C = npos142B[2];
          real _t1E7D = func urnd135C (_t1E7C);
          real _t1E7E = prim +0017<$[]> (_t1E7B, _t1E7D);
          real _t1E7F = 0.1e1;
          real _t1E80 = prim fmod018A (_t1E7E, _t1E7F);
          _t1E76 = _t1E80;
          real _t1E81 = prim *0034 (_t1E75, _t1E76);
          real _t1E82 = prim floor0189 (_t1E81);
          _t1438 = _t1E82;
          string _t1439 = "\n";
          print (_t1436, npos142B, _t1437, _t1438, _t1439);
        }
        bool _t143A;
        bool _t1CFF;
        bool _t1D00;
        real _t1D01 = 0.e0;
        real _t1D02 = 0.e0;
        real _t1D03 = 0.e0;
        vec3 _t1D04 = [_t1D01, _t1D02, _t1D03];
        vec3 mid1D05 = prim -0026<$[3]> (pos1398, _t1D04);
        bool _t1D14;
        real _t1D15 = prim |()|00B5<$[3]> (mid1D05);
        real _t1D16 = 0.4e1;
        bool _t1D17 = prim <007A (_t1D15, _t1D16);
        if _t1D17 {
          real _t1D18 = prim |()|00B5<$[3]> (mid1D05);
          real _t1D19 = 0.3e1;
          _t1D14 = prim >0080 (_t1D18, _t1D19);
        } else {
          _t1D14 = false;
        }
        _t1D00 = _t1D14;
        if _t1D00 {
          bool _t1D1A;
          real _t1D1B;
          vec3 g1D1C;
          real x1D1D = pos1398[0];
          real y1D1E = pos1398[1];
          real z1D1F = pos1398[2];
          real _t1D20 = 0.2e1;
          real _t1D21 = prim *0034 (_t1D20, x1D1D);
          int _t1D22 = 2;
          real _t1D23 = prim ^0068 (z1D1F, _t1D22);
          real _t1D24 = prim *0034 (_t1D21, _t1D23);
          int _t1D25 = 2;
          real _t1D26 = prim ^0068 (x1D1D, _t1D25);
          int _t1D27 = 2;
          real _t1D28 = prim ^0068 (y1D1E, _t1D27);
          real _t1D29 = prim +0017<$[]> (_t1D26, _t1D28);
          int _t1D2A = 2;
          real _t1D2B = prim ^0068 (z1D1F, _t1D2A);
          real _t1D2C = prim +0017<$[]> (_t1D29, _t1D2B);
          real _t1D2D = prim cos0169 (_t1D2C);
          real _t1D2E = prim *0034 (_t1D24, _t1D2D);
          real _t1D2F = 0.2e1;
          real _t1D30 = prim *0034 (_t1D2F, y1D1E);
          int _t1D31 = 2;
          real _t1D32 = prim ^0068 (z1D1F, _t1D31);
          real _t1D33 = prim *0034 (_t1D30, _t1D32);
          int _t1D34 = 2;
          real _t1D35 = prim ^0068 (x1D1D, _t1D34);
          int _t1D36 = 2;
          real _t1D37 = prim ^0068 (y1D1E, _t1D36);
          real _t1D38 = prim +0017<$[]> (_t1D35, _t1D37);
          int _t1D39 = 2;
          real _t1D3A = prim ^0068 (z1D1F, _t1D39);
          real _t1D3B = prim +0017<$[]> (_t1D38, _t1D3A);
          real _t1D3C = prim cos0169 (_t1D3B);
          real _t1D3D = prim *0034 (_t1D33, _t1D3C);
          real _t1D3E = 0.2e1;
          int _t1D3F = 3;
          real _t1D40 = prim ^0068 (z1D1F, _t1D3F);
          real _t1D41 = prim *0034 (_t1D3E, _t1D40);
          int _t1D42 = 2;
          real _t1D43 = prim ^0068 (x1D1D, _t1D42);
          int _t1D44 = 2;
          real _t1D45 = prim ^0068 (y1D1E, _t1D44);
          real _t1D46 = prim +0017<$[]> (_t1D43, _t1D45);
          int _t1D47 = 2;
          real _t1D48 = prim ^0068 (z1D1F, _t1D47);
          real _t1D49 = prim +0017<$[]> (_t1D46, _t1D48);
          real _t1D4A = prim cos0169 (_t1D49);
          real _t1D4B = prim *0034 (_t1D41, _t1D4A);
          real _t1D4C = 0.2e1;
          real _t1D4D = prim *0034 (_t1D4C, z1D1F);
          int _t1D4E = 2;
          real _t1D4F = prim ^0068 (x1D1D, _t1D4E);
          int _t1D50 = 2;
          real _t1D51 = prim ^0068 (y1D1E, _t1D50);
          real _t1D52 = prim +0017<$[]> (_t1D4F, _t1D51);
          int _t1D53 = 2;
          real _t1D54 = prim ^0068 (z1D1F, _t1D53);
          real _t1D55 = prim +0017<$[]> (_t1D52, _t1D54);
          real _t1D56 = prim sin0171 (_t1D55);
          real _t1D57 = prim *0034 (_t1D4D, _t1D56);
          real _t1D58 = prim +0017<$[]> (_t1D4B, _t1D57);
          vec3 g1D59 = [_t1D2E, _t1D3D, _t1D58];
          g1D1C = g1D59;
          tensor[3,3] H1D5A;
          real x1D5B = pos1398[0];
          real y1D5C = pos1398[1];
          real z1D5D = pos1398[2];
          int _t1D5E = -4;
          real _t1D5F = (real)_t1D5E;
          int _t1D60 = 2;
          real _t1D61 = prim ^0068 (x1D5B, _t1D60);
          real _t1D62 = prim *0034 (_t1D5F, _t1D61);
          int _t1D63 = 2;
          real _t1D64 = prim ^0068 (z1D5D, _t1D63);
          real _t1D65 = prim *0034 (_t1D62, _t1D64);
          int _t1D66 = 2;
          real _t1D67 = prim ^0068 (x1D5B, _t1D66);
          int _t1D68 = 2;
          real _t1D69 = prim ^0068 (y1D5C, _t1D68);
          real _t1D6A = prim +0017<$[]> (_t1D67, _t1D69);
          int _t1D6B = 2;
          real _t1D6C = prim ^0068 (z1D5D, _t1D6B);
          real _t1D6D = prim +0017<$[]> (_t1D6A, _t1D6C);
          real _t1D6E = prim sin0171 (_t1D6D);
          real _t1D6F = prim *0034 (_t1D65, _t1D6E);
          real _t1D70 = 0.2e1;
          int _t1D71 = 2;
          real _t1D72 = prim ^0068 (z1D5D, _t1D71);
          real _t1D73 = prim *0034 (_t1D70, _t1D72);
          int _t1D74 = 2;
          real _t1D75 = prim ^0068 (x1D5B, _t1D74);
          int _t1D76 = 2;
          real _t1D77 = prim ^0068 (y1D5C, _t1D76);
          real _t1D78 = prim +0017<$[]> (_t1D75, _t1D77);
          int _t1D79 = 2;
          real _t1D7A = prim ^0068 (z1D5D, _t1D79);
          real _t1D7B = prim +0017<$[]> (_t1D78, _t1D7A);
          real _t1D7C = prim cos0169 (_t1D7B);
          real _t1D7D = prim *0034 (_t1D73, _t1D7C);
          real _t1D7E = prim +0017<$[]> (_t1D6F, _t1D7D);
          int _t1D7F = -4;
          real _t1D80 = (real)_t1D7F;
          real _t1D81 = prim *0034 (_t1D80, x1D5B);
          real _t1D82 = prim *0034 (_t1D81, y1D5C);
          int _t1D83 = 2;
          real _t1D84 = prim ^0068 (z1D5D, _t1D83);
          real _t1D85 = prim *0034 (_t1D82, _t1D84);
          int _t1D86 = 2;
          real _t1D87 = prim ^0068 (x1D5B, _t1D86);
          int _t1D88 = 2;
          real _t1D89 = prim ^0068 (y1D5C, _t1D88);
          real _t1D8A = prim +0017<$[]> (_t1D87, _t1D89);
          int _t1D8B = 2;
          real _t1D8C = prim ^0068 (z1D5D, _t1D8B);
          real _t1D8D = prim +0017<$[]> (_t1D8A, _t1D8C);
          real _t1D8E = prim sin0171 (_t1D8D);
          real _t1D8F = prim *0034 (_t1D85, _t1D8E);
          int _t1D90 = -4;
          real _t1D91 = (real)_t1D90;
          real _t1D92 = prim *0034 (_t1D91, x1D5B);
          int _t1D93 = 3;
          real _t1D94 = prim ^0068 (z1D5D, _t1D93);
          real _t1D95 = prim *0034 (_t1D92, _t1D94);
          int _t1D96 = 2;
          real _t1D97 = prim ^0068 (x1D5B, _t1D96);
          int _t1D98 = 2;
          real _t1D99 = prim ^0068 (y1D5C, _t1D98);
          real _t1D9A = prim +0017<$[]> (_t1D97, _t1D99);
          int _t1D9B = 2;
          real _t1D9C = prim ^0068 (z1D5D, _t1D9B);
          real _t1D9D = prim +0017<$[]> (_t1D9A, _t1D9C);
          real _t1D9E = prim sin0171 (_t1D9D);
          real _t1D9F = prim *0034 (_t1D95, _t1D9E);
          real _t1DA0 = 0.4e1;
          real _t1DA1 = prim *0034 (_t1DA0, x1D5B);
          real _t1DA2 = prim *0034 (_t1DA1, z1D5D);
          int _t1DA3 = 2;
          real _t1DA4 = prim ^0068 (x1D5B, _t1DA3);
          int _t1DA5 = 2;
          real _t1DA6 = prim ^0068 (y1D5C, _t1DA5);
          real _t1DA7 = prim +0017<$[]> (_t1DA4, _t1DA6);
          int _t1DA8 = 2;
          real _t1DA9 = prim ^0068 (z1D5D, _t1DA8);
          real _t1DAA = prim +0017<$[]> (_t1DA7, _t1DA9);
          real _t1DAB = prim cos0169 (_t1DAA);
          real _t1DAC = prim *0034 (_t1DA2, _t1DAB);
          real _t1DAD = prim +0017<$[]> (_t1D9F, _t1DAC);
          vec3 _t1DAE = [_t1D7E, _t1D8F, _t1DAD];
          int _t1DAF = -4;
          real _t1DB0 = (real)_t1DAF;
          real _t1DB1 = prim *0034 (_t1DB0, x1D5B);
          real _t1DB2 = prim *0034 (_t1DB1, y1D5C);
          int _t1DB3 = 2;
          real _t1DB4 = prim ^0068 (z1D5D, _t1DB3);
          real _t1DB5 = prim *0034 (_t1DB2, _t1DB4);
          int _t1DB6 = 2;
          real _t1DB7 = prim ^0068 (x1D5B, _t1DB6);
          int _t1DB8 = 2;
          real _t1DB9 = prim ^0068 (y1D5C, _t1DB8);
          real _t1DBA = prim +0017<$[]> (_t1DB7, _t1DB9);
          int _t1DBB = 2;
          real _t1DBC = prim ^0068 (z1D5D, _t1DBB);
          real _t1DBD = prim +0017<$[]> (_t1DBA, _t1DBC);
          real _t1DBE = prim sin0171 (_t1DBD);
          real _t1DBF = prim *0034 (_t1DB5, _t1DBE);
          int _t1DC0 = -4;
          real _t1DC1 = (real)_t1DC0;
          int _t1DC2 = 2;
          real _t1DC3 = prim ^0068 (y1D5C, _t1DC2);
          real _t1DC4 = prim *0034 (_t1DC1, _t1DC3);
          int _t1DC5 = 2;
          real _t1DC6 = prim ^0068 (z1D5D, _t1DC5);
          real _t1DC7 = prim *0034 (_t1DC4, _t1DC6);
          int _t1DC8 = 2;
          real _t1DC9 = prim ^0068 (x1D5B, _t1DC8);
          int _t1DCA = 2;
          real _t1DCB = prim ^0068 (y1D5C, _t1DCA);
          real _t1DCC = prim +0017<$[]> (_t1DC9, _t1DCB);
          int _t1DCD = 2;
          real _t1DCE = prim ^0068 (z1D5D, _t1DCD);
          real _t1DCF = prim +0017<$[]> (_t1DCC, _t1DCE);
          real _t1DD0 = prim sin0171 (_t1DCF);
          real _t1DD1 = prim *0034 (_t1DC7, _t1DD0);
          real _t1DD2 = 0.2e1;
          int _t1DD3 = 2;
          real _t1DD4 = prim ^0068 (z1D5D, _t1DD3);
          real _t1DD5 = prim *0034 (_t1DD2, _t1DD4);
          int _t1DD6 = 2;
          real _t1DD7 = prim ^0068 (x1D5B, _t1DD6);
          int _t1DD8 = 2;
          real _t1DD9 = prim ^0068 (y1D5C, _t1DD8);
          real _t1DDA = prim +0017<$[]> (_t1DD7, _t1DD9);
          int _t1DDB = 2;
          real _t1DDC = prim ^0068 (z1D5D, _t1DDB);
          real _t1DDD = prim +0017<$[]> (_t1DDA, _t1DDC);
          real _t1DDE = prim cos0169 (_t1DDD);
          real _t1DDF = prim *0034 (_t1DD5, _t1DDE);
          real _t1DE0 = prim +0017<$[]> (_t1DD1, _t1DDF);
          int _t1DE1 = -4;
          real _t1DE2 = (real)_t1DE1;
          real _t1DE3 = prim *0034 (_t1DE2, y1D5C);
          int _t1DE4 = 3;
          real _t1DE5 = prim ^0068 (z1D5D, _t1DE4);
          real _t1DE6 = prim *0034 (_t1DE3, _t1DE5);
          int _t1DE7 = 2;
          real _t1DE8 = prim ^0068 (x1D5B, _t1DE7);
          int _t1DE9 = 2;
          real _t1DEA = prim ^0068 (y1D5C, _t1DE9);
          real _t1DEB = prim +0017<$[]> (_t1DE8, _t1DEA);
          int _t1DEC = 2;
          real _t1DED = prim ^0068 (z1D5D, _t1DEC);
          real _t1DEE = prim +0017<$[]> (_t1DEB, _t1DED);
          real _t1DEF = prim sin0171 (_t1DEE);
          real _t1DF0 = prim *0034 (_t1DE6, _t1DEF);
          real _t1DF1 = 0.4e1;
          real _t1DF2 = prim *0034 (_t1DF1, y1D5C);
          real _t1DF3 = prim *0034 (_t1DF2, z1D5D);
          int _t1DF4 = 2;
          real _t1DF5 = prim ^0068 (x1D5B, _t1DF4);
          int _t1DF6 = 2;
          real _t1DF7 = prim ^0068 (y1D5C, _t1DF6);
          real _t1DF8 = prim +0017<$[]> (_t1DF5, _t1DF7);
          int _t1DF9 = 2;
          real _t1DFA = prim ^0068 (z1D5D, _t1DF9);
          real _t1DFB = prim +0017<$[]> (_t1DF8, _t1DFA);
          real _t1DFC = prim cos0169 (_t1DFB);
          real _t1DFD = prim *0034 (_t1DF3, _t1DFC);
          real _t1DFE = prim +0017<$[]> (_t1DF0, _t1DFD);
          vec3 _t1DFF = [_t1DBF, _t1DE0, _t1DFE];
          int _t1E00 = -4;
          real _t1E01 = (real)_t1E00;
          real _t1E02 = prim *0034 (_t1E01, x1D5B);
          int _t1E03 = 3;
          real _t1E04 = prim ^0068 (z1D5D, _t1E03);
          real _t1E05 = prim *0034 (_t1E02, _t1E04);
          int _t1E06 = 2;
          real _t1E07 = prim ^0068 (x1D5B, _t1E06);
          int _t1E08 = 2;
          real _t1E09 = prim ^0068 (y1D5C, _t1E08);
          real _t1E0A = prim +0017<$[]> (_t1E07, _t1E09);
          int _t1E0B = 2;
          real _t1E0C = prim ^0068 (z1D5D, _t1E0B);
          real _t1E0D = prim +0017<$[]> (_t1E0A, _t1E0C);
          real _t1E0E = prim sin0171 (_t1E0D);
          real _t1E0F = prim *0034 (_t1E05, _t1E0E);
          real _t1E10 = 0.4e1;
          real _t1E11 = prim *0034 (_t1E10, x1D5B);
          real _t1E12 = prim *0034 (_t1E11, z1D5D);
          int _t1E13 = 2;
          real _t1E14 = prim ^0068 (x1D5B, _t1E13);
          int _t1E15 = 2;
          real _t1E16 = prim ^0068 (y1D5C, _t1E15);
          real _t1E17 = prim +0017<$[]> (_t1E14, _t1E16);
          int _t1E18 = 2;
          real _t1E19 = prim ^0068 (z1D5D, _t1E18);
          real _t1E1A = prim +0017<$[]> (_t1E17, _t1E19);
          real _t1E1B = prim cos0169 (_t1E1A);
          real _t1E1C = prim *0034 (_t1E12, _t1E1B);
          real _t1E1D = prim +0017<$[]> (_t1E0F, _t1E1C);
          int _t1E1E = -4;
          real _t1E1F = (real)_t1E1E;
          real _t1E20 = prim *0034 (_t1E1F, y1D5C);
          int _t1E21 = 3;
          real _t1E22 = prim ^0068 (z1D5D, _t1E21);
          real _t1E23 = prim *0034 (_t1E20, _t1E22);
          int _t1E24 = 2;
          real _t1E25 = prim ^0068 (x1D5B, _t1E24);
          int _t1E26 = 2;
          real _t1E27 = prim ^0068 (y1D5C, _t1E26);
          real _t1E28 = prim +0017<$[]> (_t1E25, _t1E27);
          int _t1E29 = 2;
          real _t1E2A = prim ^0068 (z1D5D, _t1E29);
          real _t1E2B = prim +0017<$[]> (_t1E28, _t1E2A);
          real _t1E2C = prim sin0171 (_t1E2B);
          real _t1E2D = prim *0034 (_t1E23, _t1E2C);
          real _t1E2E = 0.4e1;
          real _t1E2F = prim *0034 (_t1E2E, y1D5C);
          real _t1E30 = prim *0034 (_t1E2F, z1D5D);
          int _t1E31 = 2;
          real _t1E32 = prim ^0068 (x1D5B, _t1E31);
          int _t1E33 = 2;
          real _t1E34 = prim ^0068 (y1D5C, _t1E33);
          real _t1E35 = prim +0017<$[]> (_t1E32, _t1E34);
          int _t1E36 = 2;
          real _t1E37 = prim ^0068 (z1D5D, _t1E36);
          real _t1E38 = prim +0017<$[]> (_t1E35, _t1E37);
          real _t1E39 = prim cos0169 (_t1E38);
          real _t1E3A = prim *0034 (_t1E30, _t1E39);
          real _t1E3B = prim +0017<$[]> (_t1E2D, _t1E3A);
          int _t1E3C = -4;
          real _t1E3D = (real)_t1E3C;
          int _t1E3E = 4;
          real _t1E3F = prim ^0068 (z1D5D, _t1E3E);
          real _t1E40 = prim *0034 (_t1E3D, _t1E3F);
          int _t1E41 = 2;
          real _t1E42 = prim ^0068 (x1D5B, _t1E41);
          int _t1E43 = 2;
          real _t1E44 = prim ^0068 (y1D5C, _t1E43);
          real _t1E45 = prim +0017<$[]> (_t1E42, _t1E44);
          int _t1E46 = 2;
          real _t1E47 = prim ^0068 (z1D5D, _t1E46);
          real _t1E48 = prim +0017<$[]> (_t1E45, _t1E47);
          real _t1E49 = prim sin0171 (_t1E48);
          real _t1E4A = prim *0034 (_t1E40, _t1E49);
          real _t1E4B = 0.1e2;
          int _t1E4C = 2;
          real _t1E4D = prim ^0068 (z1D5D, _t1E4C);
          real _t1E4E = prim *0034 (_t1E4B, _t1E4D);
          int _t1E4F = 2;
          real _t1E50 = prim ^0068 (x1D5B, _t1E4F);
          int _t1E51 = 2;
          real _t1E52 = prim ^0068 (y1D5C, _t1E51);
          real _t1E53 = prim +0017<$[]> (_t1E50, _t1E52);
          int _t1E54 = 2;
          real _t1E55 = prim ^0068 (z1D5D, _t1E54);
          real _t1E56 = prim +0017<$[]> (_t1E53, _t1E55);
          real _t1E57 = prim cos0169 (_t1E56);
          real _t1E58 = prim *0034 (_t1E4E, _t1E57);
          real _t1E59 = prim +0017<$[]> (_t1E4A, _t1E58);
          real _t1E5A = 0.2e1;
          int _t1E5B = 2;
          real _t1E5C = prim ^0068 (x1D5B, _t1E5B);
          int _t1E5D = 2;
          real _t1E5E = prim ^0068 (y1D5C, _t1E5D);
          real _t1E5F = prim +0017<$[]> (_t1E5C, _t1E5E);
          int _t1E60 = 2;
          real _t1E61 = prim ^0068 (z1D5D, _t1E60);
          real _t1E62 = prim +0017<$[]> (_t1E5F, _t1E61);
          real _t1E63 = prim sin0171 (_t1E62);
          real _t1E64 = prim *0034 (_t1E5A, _t1E63);
          real _t1E65 = prim +0017<$[]> (_t1E59, _t1E64);
          vec3 _t1E66 = [_t1E1D, _t1E3B, _t1E65];
          tensor[3,3] hess1E67 = [_t1DAE, _t1DFF, _t1E66];
          H1D5A = hess1E67;
          real[3] _t1E68 = prim evals009F (H1D5A);
          int _t1E69 = 2;
          real _t1E6A = prim $sub01C0<real; %3> (_t1E68, _t1E69);
          real _t1E6B = prim unary -008B<$[]> (_t1E6A);
          real _t1E6C = prim |()|00B5<$[3]> (g1D1C);
          real _t1E6D = prim +0017<$[]> (fBias07CC, _t1E6C);
          real str1E6E = prim /0055 (_t1E6B, _t1E6D);
          _t1D1B = str1E6E;
          bool _t1E6F = prim >0080 (_t1D1B, fStrTh07CA);
          if _t1E6F {
            bool _t1E70;
            real _t1E71;
            real _t1E72 = 0.e0;
            _t1E71 = _t1E72;
            bool _t1E73 = prim >=007E (_t1E71, fMaskTh07CB);
            if _t1E73 {
              bool _t1E74 = true;
              _t1E70 = _t1E74;
            } else {
              _t1E70 = false;
            }
            _t1D1A = _t1E70;
          } else {
            _t1D1A = false;
          }
          _t1CFF = _t1D1A;
        } else {
          _t1CFF = false;
        }
        _t143A = _t1CFF;
        if _t143A {
          new point (npos142B, hh139B);
          int _t143B = 1;
          born13A5 = prim +0015 (born13A5, _t143B);
        }
        bool _t143C;
        bool _t143D;
        int _t143E = 0;
        bool _t143F = prim >007F (verb07DA, _t143E);
        if _t143F {
          _t143D = vv13A7;
        } else {
          _t143D = false;
        }
        if _t143D {
          _t143C = true;
        } else {
          int _t1440 = 1;
          _t143C = prim >007F (verb07DA, _t1440);
        }
        if _t143C {
          string _t1441 = "(i#";
          string _t1442 = " @ ";
          string _t1443 = "): ";
          print (ID139A, _t1441, iter1359, _t1442, pos1398, _t1443);
          string _t1444 = "nn=0; after birthing mvmt=";
          string _t1445 = "\n";
          print (_t1444, mvmt13A3, _t1445);
        }
        continue;
      }
      tensor[3,3] _t1446 = func fPerp12BE (pos1398);
      tensor[3,3] _t1447 = prim *0036<$[3,3]> (hh139B, _t1446);
      vec3 es1448 = prim •00CE<$[3,3]; $[3]; $[3]> (_t1447, force13F6);
      real _t1449 = prim |()|00B5<$[3]> (es1448);
      bool _t144A = prim >0080 (_t1449, tipd07CD);
      if _t144A {
        real _t144B = prim |()|00B5<$[3]> (es1448);
        real _t144C = prim /0055 (tipd07CD, _t144B);
        hh139B = prim *0034 (hh139B, _t144C);
        real _t144D = prim |()|00B5<$[3]> (es1448);
        real _t144E = prim /0055 (tipd07CD, _t144D);
        es1448 = prim *0038<$[3]> (es1448, _t144E);
      }
      vec3 _t144F = prim +0017<$[3]> (pos1398, es1448);
      vec3 _t1450 = func fStep128C (_t144F);
      vec3 fs1451 = prim *0036<$[3]> (sfs07DB, _t1450);
      real _t1452 = prim |()|00B5<$[3]> (fs1451);
      real _t1453 = prim *0034 (fsEps07D4, tipd07CD);
      real _t1454 = prim |()|00B5<$[3]> (es1448);
      real _t1455 = prim +0017<$[]> (_t1453, _t1454);
      real _t1456 = prim /0055 (_t1452, _t1455);
      real _t1457 = 0.5e0;
      bool _t1458 = prim >0080 (_t1456, _t1457);
      if _t1458 {
        real _t1459 = 0.5e0;
        hh139B = prim *0034 (hh139B, _t1459);
        bool _t145A;
        bool _t145B;
        int _t145C = 0;
        bool _t145D = prim >007F (verb07DA, _t145C);
        if _t145D {
          _t145B = vv13A7;
        } else {
          _t145B = false;
        }
        if _t145B {
          _t145A = true;
        } else {
          int _t145E = 1;
          _t145A = prim >007F (verb07DA, _t145E);
        }
        if _t145A {
          string _t145F = "(i#";
          string _t1460 = " @ ";
          string _t1461 = "): ";
          print (ID139A, _t145F, iter1359, _t1460, pos1398, _t1461);
          string _t1462 = "nn=";
          string _t1463 = "; |fs|/|es|=";
          real _t1464 = prim |()|00B5<$[3]> (fs1451);
          real _t1465 = prim |()|00B5<$[3]> (es1448);
          real _t1466 = prim /0055 (_t1464, _t1465);
          string _t1467 = " > 0.5; trying again with hh=";
          string _t1468 = "; mvmt=";
          string _t1469 = "\n";
          print (_t1462, nn13F7, _t1463, _t1466, _t1467, hh139B, _t1468, mvmt13A3, _t1469);
          string _t146A = "        fs=";
          string _t146B = "\n";
          print (_t146A, fs1451, _t146B);
          string _t146C = "        es=";
          string _t146D = "\n";
          print (_t146C, es1448, _t146D);
        }
        continue;
      }
      vec3 oldpos146E = pos1398;
      vec3 _t146F = prim +0017<$[3]> (fs1451, es1448);
      pos1398 = prim +0017<$[3]> (pos1398, _t146F);
      _pos1399 = pos1398;
      real newE1470 = 0.e0;
      closest13A4 = rad1342;
      real _t1471 = 0.e0;
      real _t1472 = 0.e0;
      real _t1473 = 0.e0;
      vec3 mno1474 = [_t1471, _t1472, _t1473];
      nn13F7 = 0;
      point[] _t1475 = prim sphere0198<point> (_pos1399, rad1342);
      foreach P1476 in _t1475 {
        vec3 _t1477 = P1476.pos1398;
        vec3 off1478 = prim -0026<$[3]> (_t1477, pos1398);
        real _t1479;
        real _t1CD7 = prim |()|00B5<$[3]> (off1478);
        real _t1CD8 = prim /0055 (_t1CD7, rad1342);
        real _t1CD9;
        real _t1CDA = 0.2e1;
        real _t1CDB = 0.3e1;
        real _t1CDC = prim /0055 (_t1CDA, _t1CDB);
        real s1CDD = prim -0026<$[]> (_t1CD8, _t1CDC);
        real _t1CDE;
        real _t1CDF = 0.2e1;
        real _t1CE0 = 0.3e1;
        real _t1CE1 = prim /0055 (_t1CDF, _t1CE0);
        bool _t1CE2 = prim <007A (_t1CD8, _t1CE1);
        if _t1CE2 {
          real _t1CE3 = 0.1e1;
          real _t1CE4 = -0.5646e1;
          real _t1CE5 = 0.119835e2;
          real _t1CE6 = -0.113535e2;
          real _t1CE7 = 0.40550625e1;
          real _t1CE8 = prim *0034 (_t1CE7, _t1CD8);
          real _t1CE9 = prim +0017<$[]> (_t1CE6, _t1CE8);
          real _t1CEA = prim *0034 (_t1CD8, _t1CE9);
          real _t1CEB = prim +0017<$[]> (_t1CE5, _t1CEA);
          real _t1CEC = prim *0034 (_t1CD8, _t1CEB);
          real _t1CED = prim +0017<$[]> (_t1CE4, _t1CEC);
          real _t1CEE = prim *0034 (_t1CD8, _t1CED);
          _t1CDE = prim +0017<$[]> (_t1CE3, _t1CEE);
        } else {
          real _t1CEF;
          real _t1CF0 = 0.1e1;
          bool _t1CF1 = prim <007A (_t1CD8, _t1CF0);
          if _t1CF1 {
            real _t1CF2 = -0.1e-2;
            real _t1CF3 = 0.9e-1;
            real _t1CF4 = -0.54e0;
            real _t1CF5 = 0.1215e1;
            real _t1CF6 = 0.972e0;
            real _t1CF7 = prim *0034 (_t1CF6, s1CDD);
            real _t1CF8 = prim -0026<$[]> (_t1CF5, _t1CF7);
            real _t1CF9 = prim *0034 (_t1CF8, s1CDD);
            real _t1CFA = prim +0017<$[]> (_t1CF4, _t1CF9);
            real _t1CFB = prim *0034 (_t1CFA, s1CDD);
            real _t1CFC = prim +0017<$[]> (_t1CF3, _t1CFB);
            real _t1CFD = prim *0034 (_t1CFC, s1CDD);
            real _t1CFE = prim *0034 (_t1CFD, s1CDD);
            _t1CEF = prim +0017<$[]> (_t1CF2, _t1CFE);
          } else {
            _t1CEF = 0.e0;
          }
          _t1CDE = _t1CEF;
        }
        _t1CD9 = _t1CDE;
        _t1479 = _t1CD9;
        newE1470 = prim +0017<$[]> (newE1470, _t1479);
        real _t147A = prim |()|00B5<$[3]> (off1478);
        closest13A4 = prim min0127 (closest13A4, _t147A);
        mno1474 = prim +0017<$[3]> (mno1474, off1478);
        int _t147B = 1;
        nn13F7 = prim +0015 (nn13F7, _t147B);
      }
      real _t147C = (real)nn13F7;
      mno1474 = prim /0057<$[3]> (mno1474, _t147C);
      bool _t147D;
      bool _t147E;
      int _t147F = 0;
      bool _t1480 = prim >007F (verb07DA, _t147F);
      if _t1480 {
        _t147E = vv13A7;
      } else {
        _t147E = false;
      }
      if _t147E {
        _t147D = true;
      } else {
        int _t1481 = 1;
        _t147D = prim >007F (verb07DA, _t1481);
      }
      if _t147D {
        string _t1482 = "(i#";
        string _t1483 = " @ ";
        string _t1484 = "): ";
        print (ID139A, _t1482, iter1359, _t1483, pos1398, _t1484);
        string _t1485 = "nn=";
        string _t1486 = "; oldE=";
        string _t1487 = " newE=";
        string _t1488 = "\n";
        print (_t1485, nn13F7, _t1486, oldE13F2, _t1487, newE1470, _t1488);
      }
      real _t1489 = prim -0026<$[]> (newE1470, oldE13F2);
      vec3 _t148A = prim -0026<$[3]> (pos1398, oldpos146E);
      vec3 _t148B = prim *0036<$[3]> (gdeTest07D1, _t148A);
      vec3 _t148C = prim unary -008B<$[3]> (force13F6);
      real _t148D = prim •00CE<$[3]; $[3]; $[]> (_t148B, _t148C);
      bool _t148E = prim >0080 (_t1489, _t148D);
      if _t148E {
        hh139B = prim *0034 (hh139B, gdeBack07D2);
        real _t148F = 0.e0;
        bool _t1490 = prim ==0084 (_t148F, hh139B);
        if _t1490 {
          string _t1491 = "(i#";
          string _t1492 = " @ ";
          string _t1493 = "): ";
          print (ID139A, _t1491, iter1359, _t1492, pos1398, _t1493);
          string _t1494 = "backtracked all the way to hh=0\n";
          print (_t1494);
          die;
        }
        bool _t1495;
        bool _t1496;
        int _t1497 = 0;
        bool _t1498 = prim >007F (verb07DA, _t1497);
        if _t1498 {
          _t1496 = vv13A7;
        } else {
          _t1496 = false;
        }
        if _t1496 {
          _t1495 = true;
        } else {
          int _t1499 = 1;
          _t1495 = prim >007F (verb07DA, _t1499);
        }
        if _t1495 {
          string _t149A = "(i#";
          string _t149B = " @ ";
          string _t149C = "): ";
          print (ID139A, _t149A, iter1359, _t149B, pos1398, _t149C);
          string _t149D = "nn=";
          string _t149E = "; oldE=";
          string _t149F = " newE=";
          string _t14A0 = "; backtracking; hh=";
          string _t14A1 = "; mvmt=";
          string _t14A2 = "\n";
          print (_t149D, nn13F7, _t149E, oldE13F2, _t149F, newE1470, _t14A0, hh139B, _t14A1, mvmt13A3, _t14A2);
          string _t14A3 = "      fs=";
          string _t14A4 = "\n";
          print (_t14A3, fs1451, _t14A4);
          string _t14A5 = "      es=";
          string _t14A6 = "\n";
          print (_t14A5, es1448, _t14A6);
          string _t14A7 = "      newE - oldE=";
          real _t14A8 = prim -0026<$[]> (newE1470, oldE13F2);
          string _t14A9 = "\n";
          print (_t14A7, _t14A8, _t14A9);
          string _t14AA = "      force=";
          string _t14AB = "\n";
          print (_t14AA, force13F6, _t14AB);
          string _t14AC = "      dpos=";
          vec3 _t14AD = prim -0026<$[3]> (pos1398, oldpos146E);
          string _t14AE = "\n";
          print (_t14AC, _t14AD, _t14AE);
          string _t14AF = "      0.5*(pos - oldpos).(-force)=";
          real _t14B0 = 0.5e0;
          vec3 _t14B1 = prim -0026<$[3]> (pos1398, oldpos146E);
          vec3 _t14B2 = prim *0036<$[3]> (_t14B0, _t14B1);
          vec3 _t14B3 = prim unary -008B<$[3]> (force13F6);
          real _t14B4 = prim •00CE<$[3]; $[3]; $[]> (_t14B2, _t14B3);
          string _t14B5 = "\n";
          print (_t14AF, _t14B4, _t14B5);
        }
        pos1398 = oldpos146E;
        _pos1399 = pos1398;
        continue;
      }
      hh139B = prim *0034 (hh139B, gdeOppor07D3);
      vec3 _t14B6 = prim +0017<$[3]> (fs1451, es1448);
      step139C = prim +0017<$[3]> (step139C, _t14B6);
      real _t14B7 = prim |()|00B5<$[3]> (step139C);
      real _t14B8 = prim /0055 (_t14B7, tipd07CD);
      trav13A2 = prim +0017<$[]> (trav13A2, _t14B8);
      real _t14B9 = prim |()|00B5<$[3]> (step139C);
      real _t14BA = prim /0055 (_t14B9, tipd07CD);
      mvmt13A3 = prim lerp0096<$[]> (_t14BA, mvmt13A3, hist07DC);
      real _t14BB = prim |()|00B5<$[3]> (step139C);
      real _t14BC = prim /0055 (_t14BB, tipd07CD);
      bool _t14BD = prim <007A (_t14BC, pcmvEps07D8);
      if _t14BD {
        int _t14BE;
        bool _t1CC7;
        int _t1CC8 = 0;
        bool _t1CC9 = prim >007F (pcp07DD, _t1CC8);
        if _t1CC9 {
          bool _t1CCA;
          int _t1CCB = 0;
          bool _t1CCC = prim >007F (iter1359, _t1CCB);
          if _t1CCC {
            int _t1CCD = 0;
            int _t1CCE = prim %00A1 (iter1359, pcp07DD);
            _t1CCA = prim ==0082 (_t1CCD, _t1CCE);
          } else {
            _t1CCA = false;
          }
          _t1CC7 = _t1CCA;
        } else {
          _t1CC7 = false;
        }
        if _t1CC7 {
          int _t1CCF = prim /0054 (iter1359, pcp07DD);
          int _t1CD0 = 2;
          int _t1CD1 = prim %00A1 (_t1CCF, _t1CD0);
          int _t1CD2 = 2;
          int _t1CD3 = prim *0033 (_t1CD1, _t1CD2);
          int _t1CD4 = 1;
          int _t1CD5 = prim -0024 (_t1CD3, _t1CD4);
          _t14BE = _t1CD5;
        } else {
          int _t1CD6 = 0;
          _t14BE = _t1CD6;
        }
        int _t14BF = 0;
        bool _t14C0 = prim !=0086 (_t14BE, _t14BF);
        if _t14C0 {
          bool _t14C1;
          int _t14C2;
          bool _t1CB7;
          int _t1CB8 = 0;
          bool _t1CB9 = prim >007F (pcp07DD, _t1CB8);
          if _t1CB9 {
            bool _t1CBA;
            int _t1CBB = 0;
            bool _t1CBC = prim >007F (iter1359, _t1CBB);
            if _t1CBC {
              int _t1CBD = 0;
              int _t1CBE = prim %00A1 (iter1359, pcp07DD);
              _t1CBA = prim ==0082 (_t1CBD, _t1CBE);
            } else {
              _t1CBA = false;
            }
            _t1CB7 = _t1CBA;
          } else {
            _t1CB7 = false;
          }
          if _t1CB7 {
            int _t1CBF = prim /0054 (iter1359, pcp07DD);
            int _t1CC0 = 2;
            int _t1CC1 = prim %00A1 (_t1CBF, _t1CC0);
            int _t1CC2 = 2;
            int _t1CC3 = prim *0033 (_t1CC1, _t1CC2);
            int _t1CC4 = 1;
            int _t1CC5 = prim -0024 (_t1CC3, _t1CC4);
            _t14C2 = _t1CC5;
          } else {
            int _t1CC6 = 0;
            _t14C2 = _t1CC6;
          }
          int _t14C3 = 0;
          bool _t14C4 = prim >007F (_t14C2, _t14C3);
          if _t14C4 {
            bool _t14C5;
            real _t14C6 = 0.e0;
            bool _t14C7 = prim <007A (newE1470, _t14C6);
            if _t14C7 {
              bool _t14C8;
              bool _t14C9 = prim <0079 (nn13F7, nnmin12ED);
              if _t14C9 {
                _t14C8 = prim <0079 (born13A5, nnmax12F4);
              } else {
                _t14C8 = false;
              }
              _t14C5 = _t14C8;
            } else {
              _t14C5 = false;
            }
            _t14C1 = _t14C5;
          } else {
            _t14C1 = false;
          }
          if _t14C1 {
            vec3 _t14CA = prim normalize0137<$[3]> (mno1474);
            vec3 _t14CB = prim *0036<$[3]> (tipd07CD, _t14CA);
            vec3 npos14CC = prim -0026<$[3]> (pos1398, _t14CB);
            vec3 _t14CD = func fStep128C (npos14CC);
            vec3 _t14CE = prim *0036<$[3]> (sfs07DB, _t14CD);
            npos14CC = prim +0017<$[3]> (npos14CC, _t14CE);
            vec3 _t14CF = func fStep128C (npos14CC);
            vec3 _t14D0 = prim *0036<$[3]> (sfs07DB, _t14CF);
            npos14CC = prim +0017<$[3]> (npos14CC, _t14D0);
            bool birth14D1 = true;
            int _t14D2 = 2;
            bool _t14D3 = prim ==0082 (fDim07DF, _t14D2);
            if _t14D3 {
              int _t14D4 = 4;
              bool _t14D5 = prim >=007D (nn13F7, _t14D4);
              if _t14D5 {
                real _t14D6 = prim *0034 (tipd07CD, mabd07CE);
                point[] _t14D7 = prim sphere0198<point> (npos14CC, _t14D6);
                foreach P14D8 in _t14D7 {
                  birth14D1 = false;
                }
                if birth14D1 {
                  real _t14D9;
                  real _t1C93 = pos1398[0];
                  real _t1C94 = func urnd135C (_t1C93);
                  real _t1C95 = pos1398[1];
                  real _t1C96 = func urnd135C (_t1C95);
                  real _t1C97 = prim +0017<$[]> (_t1C94, _t1C96);
                  real _t1C98 = pos1398[2];
                  real _t1C99 = func urnd135C (_t1C98);
                  real _t1C9A = prim +0017<$[]> (_t1C97, _t1C99);
                  real _t1C9B = 0.1e1;
                  real _t1C9C = prim fmod018A (_t1C9A, _t1C9B);
                  _t14D9 = _t1C9C;
                  int _t14DA = prim -0024 (nnmin12ED, nn13F7);
                  real _t14DB = (real)_t14DA;
                  real _t14DC = prim $i2r01B6 (nnmin12ED);
                  real _t14DD = prim /0055 (_t14DB, _t14DC);
                  birth14D1 = prim <007A (_t14D9, _t14DD);
                }
              }
            }
            if birth14D1 {
              bool _t14DE;
              bool _t1B1D;
              bool _t1B1E;
              real _t1B1F = 0.e0;
              real _t1B20 = 0.e0;
              real _t1B21 = 0.e0;
              vec3 _t1B22 = [_t1B1F, _t1B20, _t1B21];
              vec3 mid1B23 = prim -0026<$[3]> (npos14CC, _t1B22);
              bool _t1B32;
              real _t1B33 = prim |()|00B5<$[3]> (mid1B23);
              real _t1B34 = 0.4e1;
              bool _t1B35 = prim <007A (_t1B33, _t1B34);
              if _t1B35 {
                real _t1B36 = prim |()|00B5<$[3]> (mid1B23);
                real _t1B37 = 0.3e1;
                _t1B32 = prim >0080 (_t1B36, _t1B37);
              } else {
                _t1B32 = false;
              }
              _t1B1E = _t1B32;
              if _t1B1E {
                bool _t1B38;
                real _t1B39;
                vec3 g1B3A;
                real x1B3B = npos14CC[0];
                real y1B3C = npos14CC[1];
                real z1B3D = npos14CC[2];
                real _t1B3E = 0.2e1;
                real _t1B3F = prim *0034 (_t1B3E, x1B3B);
                int _t1B40 = 2;
                real _t1B41 = prim ^0068 (z1B3D, _t1B40);
                real _t1B42 = prim *0034 (_t1B3F, _t1B41);
                int _t1B43 = 2;
                real _t1B44 = prim ^0068 (x1B3B, _t1B43);
                int _t1B45 = 2;
                real _t1B46 = prim ^0068 (y1B3C, _t1B45);
                real _t1B47 = prim +0017<$[]> (_t1B44, _t1B46);
                int _t1B48 = 2;
                real _t1B49 = prim ^0068 (z1B3D, _t1B48);
                real _t1B4A = prim +0017<$[]> (_t1B47, _t1B49);
                real _t1B4B = prim cos0169 (_t1B4A);
                real _t1B4C = prim *0034 (_t1B42, _t1B4B);
                real _t1B4D = 0.2e1;
                real _t1B4E = prim *0034 (_t1B4D, y1B3C);
                int _t1B4F = 2;
                real _t1B50 = prim ^0068 (z1B3D, _t1B4F);
                real _t1B51 = prim *0034 (_t1B4E, _t1B50);
                int _t1B52 = 2;
                real _t1B53 = prim ^0068 (x1B3B, _t1B52);
                int _t1B54 = 2;
                real _t1B55 = prim ^0068 (y1B3C, _t1B54);
                real _t1B56 = prim +0017<$[]> (_t1B53, _t1B55);
                int _t1B57 = 2;
                real _t1B58 = prim ^0068 (z1B3D, _t1B57);
                real _t1B59 = prim +0017<$[]> (_t1B56, _t1B58);
                real _t1B5A = prim cos0169 (_t1B59);
                real _t1B5B = prim *0034 (_t1B51, _t1B5A);
                real _t1B5C = 0.2e1;
                int _t1B5D = 3;
                real _t1B5E = prim ^0068 (z1B3D, _t1B5D);
                real _t1B5F = prim *0034 (_t1B5C, _t1B5E);
                int _t1B60 = 2;
                real _t1B61 = prim ^0068 (x1B3B, _t1B60);
                int _t1B62 = 2;
                real _t1B63 = prim ^0068 (y1B3C, _t1B62);
                real _t1B64 = prim +0017<$[]> (_t1B61, _t1B63);
                int _t1B65 = 2;
                real _t1B66 = prim ^0068 (z1B3D, _t1B65);
                real _t1B67 = prim +0017<$[]> (_t1B64, _t1B66);
                real _t1B68 = prim cos0169 (_t1B67);
                real _t1B69 = prim *0034 (_t1B5F, _t1B68);
                real _t1B6A = 0.2e1;
                real _t1B6B = prim *0034 (_t1B6A, z1B3D);
                int _t1B6C = 2;
                real _t1B6D = prim ^0068 (x1B3B, _t1B6C);
                int _t1B6E = 2;
                real _t1B6F = prim ^0068 (y1B3C, _t1B6E);
                real _t1B70 = prim +0017<$[]> (_t1B6D, _t1B6F);
                int _t1B71 = 2;
                real _t1B72 = prim ^0068 (z1B3D, _t1B71);
                real _t1B73 = prim +0017<$[]> (_t1B70, _t1B72);
                real _t1B74 = prim sin0171 (_t1B73);
                real _t1B75 = prim *0034 (_t1B6B, _t1B74);
                real _t1B76 = prim +0017<$[]> (_t1B69, _t1B75);
                vec3 g1B77 = [_t1B4C, _t1B5B, _t1B76];
                g1B3A = g1B77;
                tensor[3,3] H1B78;
                real x1B79 = npos14CC[0];
                real y1B7A = npos14CC[1];
                real z1B7B = npos14CC[2];
                int _t1B7C = -4;
                real _t1B7D = (real)_t1B7C;
                int _t1B7E = 2;
                real _t1B7F = prim ^0068 (x1B79, _t1B7E);
                real _t1B80 = prim *0034 (_t1B7D, _t1B7F);
                int _t1B81 = 2;
                real _t1B82 = prim ^0068 (z1B7B, _t1B81);
                real _t1B83 = prim *0034 (_t1B80, _t1B82);
                int _t1B84 = 2;
                real _t1B85 = prim ^0068 (x1B79, _t1B84);
                int _t1B86 = 2;
                real _t1B87 = prim ^0068 (y1B7A, _t1B86);
                real _t1B88 = prim +0017<$[]> (_t1B85, _t1B87);
                int _t1B89 = 2;
                real _t1B8A = prim ^0068 (z1B7B, _t1B89);
                real _t1B8B = prim +0017<$[]> (_t1B88, _t1B8A);
                real _t1B8C = prim sin0171 (_t1B8B);
                real _t1B8D = prim *0034 (_t1B83, _t1B8C);
                real _t1B8E = 0.2e1;
                int _t1B8F = 2;
                real _t1B90 = prim ^0068 (z1B7B, _t1B8F);
                real _t1B91 = prim *0034 (_t1B8E, _t1B90);
                int _t1B92 = 2;
                real _t1B93 = prim ^0068 (x1B79, _t1B92);
                int _t1B94 = 2;
                real _t1B95 = prim ^0068 (y1B7A, _t1B94);
                real _t1B96 = prim +0017<$[]> (_t1B93, _t1B95);
                int _t1B97 = 2;
                real _t1B98 = prim ^0068 (z1B7B, _t1B97);
                real _t1B99 = prim +0017<$[]> (_t1B96, _t1B98);
                real _t1B9A = prim cos0169 (_t1B99);
                real _t1B9B = prim *0034 (_t1B91, _t1B9A);
                real _t1B9C = prim +0017<$[]> (_t1B8D, _t1B9B);
                int _t1B9D = -4;
                real _t1B9E = (real)_t1B9D;
                real _t1B9F = prim *0034 (_t1B9E, x1B79);
                real _t1BA0 = prim *0034 (_t1B9F, y1B7A);
                int _t1BA1 = 2;
                real _t1BA2 = prim ^0068 (z1B7B, _t1BA1);
                real _t1BA3 = prim *0034 (_t1BA0, _t1BA2);
                int _t1BA4 = 2;
                real _t1BA5 = prim ^0068 (x1B79, _t1BA4);
                int _t1BA6 = 2;
                real _t1BA7 = prim ^0068 (y1B7A, _t1BA6);
                real _t1BA8 = prim +0017<$[]> (_t1BA5, _t1BA7);
                int _t1BA9 = 2;
                real _t1BAA = prim ^0068 (z1B7B, _t1BA9);
                real _t1BAB = prim +0017<$[]> (_t1BA8, _t1BAA);
                real _t1BAC = prim sin0171 (_t1BAB);
                real _t1BAD = prim *0034 (_t1BA3, _t1BAC);
                int _t1BAE = -4;
                real _t1BAF = (real)_t1BAE;
                real _t1BB0 = prim *0034 (_t1BAF, x1B79);
                int _t1BB1 = 3;
                real _t1BB2 = prim ^0068 (z1B7B, _t1BB1);
                real _t1BB3 = prim *0034 (_t1BB0, _t1BB2);
                int _t1BB4 = 2;
                real _t1BB5 = prim ^0068 (x1B79, _t1BB4);
                int _t1BB6 = 2;
                real _t1BB7 = prim ^0068 (y1B7A, _t1BB6);
                real _t1BB8 = prim +0017<$[]> (_t1BB5, _t1BB7);
                int _t1BB9 = 2;
                real _t1BBA = prim ^0068 (z1B7B, _t1BB9);
                real _t1BBB = prim +0017<$[]> (_t1BB8, _t1BBA);
                real _t1BBC = prim sin0171 (_t1BBB);
                real _t1BBD = prim *0034 (_t1BB3, _t1BBC);
                real _t1BBE = 0.4e1;
                real _t1BBF = prim *0034 (_t1BBE, x1B79);
                real _t1BC0 = prim *0034 (_t1BBF, z1B7B);
                int _t1BC1 = 2;
                real _t1BC2 = prim ^0068 (x1B79, _t1BC1);
                int _t1BC3 = 2;
                real _t1BC4 = prim ^0068 (y1B7A, _t1BC3);
                real _t1BC5 = prim +0017<$[]> (_t1BC2, _t1BC4);
                int _t1BC6 = 2;
                real _t1BC7 = prim ^0068 (z1B7B, _t1BC6);
                real _t1BC8 = prim +0017<$[]> (_t1BC5, _t1BC7);
                real _t1BC9 = prim cos0169 (_t1BC8);
                real _t1BCA = prim *0034 (_t1BC0, _t1BC9);
                real _t1BCB = prim +0017<$[]> (_t1BBD, _t1BCA);
                vec3 _t1BCC = [_t1B9C, _t1BAD, _t1BCB];
                int _t1BCD = -4;
                real _t1BCE = (real)_t1BCD;
                real _t1BCF = prim *0034 (_t1BCE, x1B79);
                real _t1BD0 = prim *0034 (_t1BCF, y1B7A);
                int _t1BD1 = 2;
                real _t1BD2 = prim ^0068 (z1B7B, _t1BD1);
                real _t1BD3 = prim *0034 (_t1BD0, _t1BD2);
                int _t1BD4 = 2;
                real _t1BD5 = prim ^0068 (x1B79, _t1BD4);
                int _t1BD6 = 2;
                real _t1BD7 = prim ^0068 (y1B7A, _t1BD6);
                real _t1BD8 = prim +0017<$[]> (_t1BD5, _t1BD7);
                int _t1BD9 = 2;
                real _t1BDA = prim ^0068 (z1B7B, _t1BD9);
                real _t1BDB = prim +0017<$[]> (_t1BD8, _t1BDA);
                real _t1BDC = prim sin0171 (_t1BDB);
                real _t1BDD = prim *0034 (_t1BD3, _t1BDC);
                int _t1BDE = -4;
                real _t1BDF = (real)_t1BDE;
                int _t1BE0 = 2;
                real _t1BE1 = prim ^0068 (y1B7A, _t1BE0);
                real _t1BE2 = prim *0034 (_t1BDF, _t1BE1);
                int _t1BE3 = 2;
                real _t1BE4 = prim ^0068 (z1B7B, _t1BE3);
                real _t1BE5 = prim *0034 (_t1BE2, _t1BE4);
                int _t1BE6 = 2;
                real _t1BE7 = prim ^0068 (x1B79, _t1BE6);
                int _t1BE8 = 2;
                real _t1BE9 = prim ^0068 (y1B7A, _t1BE8);
                real _t1BEA = prim +0017<$[]> (_t1BE7, _t1BE9);
                int _t1BEB = 2;
                real _t1BEC = prim ^0068 (z1B7B, _t1BEB);
                real _t1BED = prim +0017<$[]> (_t1BEA, _t1BEC);
                real _t1BEE = prim sin0171 (_t1BED);
                real _t1BEF = prim *0034 (_t1BE5, _t1BEE);
                real _t1BF0 = 0.2e1;
                int _t1BF1 = 2;
                real _t1BF2 = prim ^0068 (z1B7B, _t1BF1);
                real _t1BF3 = prim *0034 (_t1BF0, _t1BF2);
                int _t1BF4 = 2;
                real _t1BF5 = prim ^0068 (x1B79, _t1BF4);
                int _t1BF6 = 2;
                real _t1BF7 = prim ^0068 (y1B7A, _t1BF6);
                real _t1BF8 = prim +0017<$[]> (_t1BF5, _t1BF7);
                int _t1BF9 = 2;
                real _t1BFA = prim ^0068 (z1B7B, _t1BF9);
                real _t1BFB = prim +0017<$[]> (_t1BF8, _t1BFA);
                real _t1BFC = prim cos0169 (_t1BFB);
                real _t1BFD = prim *0034 (_t1BF3, _t1BFC);
                real _t1BFE = prim +0017<$[]> (_t1BEF, _t1BFD);
                int _t1BFF = -4;
                real _t1C00 = (real)_t1BFF;
                real _t1C01 = prim *0034 (_t1C00, y1B7A);
                int _t1C02 = 3;
                real _t1C03 = prim ^0068 (z1B7B, _t1C02);
                real _t1C04 = prim *0034 (_t1C01, _t1C03);
                int _t1C05 = 2;
                real _t1C06 = prim ^0068 (x1B79, _t1C05);
                int _t1C07 = 2;
                real _t1C08 = prim ^0068 (y1B7A, _t1C07);
                real _t1C09 = prim +0017<$[]> (_t1C06, _t1C08);
                int _t1C0A = 2;
                real _t1C0B = prim ^0068 (z1B7B, _t1C0A);
                real _t1C0C = prim +0017<$[]> (_t1C09, _t1C0B);
                real _t1C0D = prim sin0171 (_t1C0C);
                real _t1C0E = prim *0034 (_t1C04, _t1C0D);
                real _t1C0F = 0.4e1;
                real _t1C10 = prim *0034 (_t1C0F, y1B7A);
                real _t1C11 = prim *0034 (_t1C10, z1B7B);
                int _t1C12 = 2;
                real _t1C13 = prim ^0068 (x1B79, _t1C12);
                int _t1C14 = 2;
                real _t1C15 = prim ^0068 (y1B7A, _t1C14);
                real _t1C16 = prim +0017<$[]> (_t1C13, _t1C15);
                int _t1C17 = 2;
                real _t1C18 = prim ^0068 (z1B7B, _t1C17);
                real _t1C19 = prim +0017<$[]> (_t1C16, _t1C18);
                real _t1C1A = prim cos0169 (_t1C19);
                real _t1C1B = prim *0034 (_t1C11, _t1C1A);
                real _t1C1C = prim +0017<$[]> (_t1C0E, _t1C1B);
                vec3 _t1C1D = [_t1BDD, _t1BFE, _t1C1C];
                int _t1C1E = -4;
                real _t1C1F = (real)_t1C1E;
                real _t1C20 = prim *0034 (_t1C1F, x1B79);
                int _t1C21 = 3;
                real _t1C22 = prim ^0068 (z1B7B, _t1C21);
                real _t1C23 = prim *0034 (_t1C20, _t1C22);
                int _t1C24 = 2;
                real _t1C25 = prim ^0068 (x1B79, _t1C24);
                int _t1C26 = 2;
                real _t1C27 = prim ^0068 (y1B7A, _t1C26);
                real _t1C28 = prim +0017<$[]> (_t1C25, _t1C27);
                int _t1C29 = 2;
                real _t1C2A = prim ^0068 (z1B7B, _t1C29);
                real _t1C2B = prim +0017<$[]> (_t1C28, _t1C2A);
                real _t1C2C = prim sin0171 (_t1C2B);
                real _t1C2D = prim *0034 (_t1C23, _t1C2C);
                real _t1C2E = 0.4e1;
                real _t1C2F = prim *0034 (_t1C2E, x1B79);
                real _t1C30 = prim *0034 (_t1C2F, z1B7B);
                int _t1C31 = 2;
                real _t1C32 = prim ^0068 (x1B79, _t1C31);
                int _t1C33 = 2;
                real _t1C34 = prim ^0068 (y1B7A, _t1C33);
                real _t1C35 = prim +0017<$[]> (_t1C32, _t1C34);
                int _t1C36 = 2;
                real _t1C37 = prim ^0068 (z1B7B, _t1C36);
                real _t1C38 = prim +0017<$[]> (_t1C35, _t1C37);
                real _t1C39 = prim cos0169 (_t1C38);
                real _t1C3A = prim *0034 (_t1C30, _t1C39);
                real _t1C3B = prim +0017<$[]> (_t1C2D, _t1C3A);
                int _t1C3C = -4;
                real _t1C3D = (real)_t1C3C;
                real _t1C3E = prim *0034 (_t1C3D, y1B7A);
                int _t1C3F = 3;
                real _t1C40 = prim ^0068 (z1B7B, _t1C3F);
                real _t1C41 = prim *0034 (_t1C3E, _t1C40);
                int _t1C42 = 2;
                real _t1C43 = prim ^0068 (x1B79, _t1C42);
                int _t1C44 = 2;
                real _t1C45 = prim ^0068 (y1B7A, _t1C44);
                real _t1C46 = prim +0017<$[]> (_t1C43, _t1C45);
                int _t1C47 = 2;
                real _t1C48 = prim ^0068 (z1B7B, _t1C47);
                real _t1C49 = prim +0017<$[]> (_t1C46, _t1C48);
                real _t1C4A = prim sin0171 (_t1C49);
                real _t1C4B = prim *0034 (_t1C41, _t1C4A);
                real _t1C4C = 0.4e1;
                real _t1C4D = prim *0034 (_t1C4C, y1B7A);
                real _t1C4E = prim *0034 (_t1C4D, z1B7B);
                int _t1C4F = 2;
                real _t1C50 = prim ^0068 (x1B79, _t1C4F);
                int _t1C51 = 2;
                real _t1C52 = prim ^0068 (y1B7A, _t1C51);
                real _t1C53 = prim +0017<$[]> (_t1C50, _t1C52);
                int _t1C54 = 2;
                real _t1C55 = prim ^0068 (z1B7B, _t1C54);
                real _t1C56 = prim +0017<$[]> (_t1C53, _t1C55);
                real _t1C57 = prim cos0169 (_t1C56);
                real _t1C58 = prim *0034 (_t1C4E, _t1C57);
                real _t1C59 = prim +0017<$[]> (_t1C4B, _t1C58);
                int _t1C5A = -4;
                real _t1C5B = (real)_t1C5A;
                int _t1C5C = 4;
                real _t1C5D = prim ^0068 (z1B7B, _t1C5C);
                real _t1C5E = prim *0034 (_t1C5B, _t1C5D);
                int _t1C5F = 2;
                real _t1C60 = prim ^0068 (x1B79, _t1C5F);
                int _t1C61 = 2;
                real _t1C62 = prim ^0068 (y1B7A, _t1C61);
                real _t1C63 = prim +0017<$[]> (_t1C60, _t1C62);
                int _t1C64 = 2;
                real _t1C65 = prim ^0068 (z1B7B, _t1C64);
                real _t1C66 = prim +0017<$[]> (_t1C63, _t1C65);
                real _t1C67 = prim sin0171 (_t1C66);
                real _t1C68 = prim *0034 (_t1C5E, _t1C67);
                real _t1C69 = 0.1e2;
                int _t1C6A = 2;
                real _t1C6B = prim ^0068 (z1B7B, _t1C6A);
                real _t1C6C = prim *0034 (_t1C69, _t1C6B);
                int _t1C6D = 2;
                real _t1C6E = prim ^0068 (x1B79, _t1C6D);
                int _t1C6F = 2;
                real _t1C70 = prim ^0068 (y1B7A, _t1C6F);
                real _t1C71 = prim +0017<$[]> (_t1C6E, _t1C70);
                int _t1C72 = 2;
                real _t1C73 = prim ^0068 (z1B7B, _t1C72);
                real _t1C74 = prim +0017<$[]> (_t1C71, _t1C73);
                real _t1C75 = prim cos0169 (_t1C74);
                real _t1C76 = prim *0034 (_t1C6C, _t1C75);
                real _t1C77 = prim +0017<$[]> (_t1C68, _t1C76);
                real _t1C78 = 0.2e1;
                int _t1C79 = 2;
                real _t1C7A = prim ^0068 (x1B79, _t1C79);
                int _t1C7B = 2;
                real _t1C7C = prim ^0068 (y1B7A, _t1C7B);
                real _t1C7D = prim +0017<$[]> (_t1C7A, _t1C7C);
                int _t1C7E = 2;
                real _t1C7F = prim ^0068 (z1B7B, _t1C7E);
                real _t1C80 = prim +0017<$[]> (_t1C7D, _t1C7F);
                real _t1C81 = prim sin0171 (_t1C80);
                real _t1C82 = prim *0034 (_t1C78, _t1C81);
                real _t1C83 = prim +0017<$[]> (_t1C77, _t1C82);
                vec3 _t1C84 = [_t1C3B, _t1C59, _t1C83];
                tensor[3,3] hess1C85 = [_t1BCC, _t1C1D, _t1C84];
                H1B78 = hess1C85;
                real[3] _t1C86 = prim evals009F (H1B78);
                int _t1C87 = 2;
                real _t1C88 = prim $sub01C0<real; %3> (_t1C86, _t1C87);
                real _t1C89 = prim unary -008B<$[]> (_t1C88);
                real _t1C8A = prim |()|00B5<$[3]> (g1B3A);
                real _t1C8B = prim +0017<$[]> (fBias07CC, _t1C8A);
                real str1C8C = prim /0055 (_t1C89, _t1C8B);
                _t1B39 = str1C8C;
                bool _t1C8D = prim >0080 (_t1B39, fStrTh07CA);
                if _t1C8D {
                  bool _t1C8E;
                  real _t1C8F;
                  real _t1C90 = 0.e0;
                  _t1C8F = _t1C90;
                  bool _t1C91 = prim >=007E (_t1C8F, fMaskTh07CB);
                  if _t1C91 {
                    bool _t1C92 = true;
                    _t1C8E = _t1C92;
                  } else {
                    _t1C8E = false;
                  }
                  _t1B38 = _t1C8E;
                } else {
                  _t1B38 = false;
                }
                _t1B1D = _t1B38;
              } else {
                _t1B1D = false;
              }
              _t14DE = _t1B1D;
              if _t14DE {
                new point (npos14CC, hh139B);
                int _t14DF = 1;
                born13A5 = prim +0015 (born13A5, _t14DF);
              }
            }
          } else {
            int _t14E0;
            bool _t1CA7;
            int _t1CA8 = 0;
            bool _t1CA9 = prim >007F (pcp07DD, _t1CA8);
            if _t1CA9 {
              bool _t1CAA;
              int _t1CAB = 0;
              bool _t1CAC = prim >007F (iter1359, _t1CAB);
              if _t1CAC {
                int _t1CAD = 0;
                int _t1CAE = prim %00A1 (iter1359, pcp07DD);
                _t1CAA = prim ==0082 (_t1CAD, _t1CAE);
              } else {
                _t1CAA = false;
              }
              _t1CA7 = _t1CAA;
            } else {
              _t1CA7 = false;
            }
            if _t1CA7 {
              int _t1CAF = prim /0054 (iter1359, pcp07DD);
              int _t1CB0 = 2;
              int _t1CB1 = prim %00A1 (_t1CAF, _t1CB0);
              int _t1CB2 = 2;
              int _t1CB3 = prim *0033 (_t1CB1, _t1CB2);
              int _t1CB4 = 1;
              int _t1CB5 = prim -0024 (_t1CB3, _t1CB4);
              _t14E0 = _t1CB5;
            } else {
              int _t1CB6 = 0;
              _t14E0 = _t1CB6;
            }
            int _t14E1 = 0;
            bool _t14E2 = prim <0079 (_t14E0, _t14E1);
            if _t14E2 {
              real _t14E3 = 0.e0;
              bool _t14E4 = prim >0080 (newE1470, _t14E3);
              if _t14E4 {
                bool _t14E5 = prim >007F (nn13F7, nnmax12F4);
                if _t14E5 {
                  real _t14E6;
                  real _t1C9D = pos1398[0];
                  real _t1C9E = func urnd135C (_t1C9D);
                  real _t1C9F = pos1398[1];
                  real _t1CA0 = func urnd135C (_t1C9F);
                  real _t1CA1 = prim +0017<$[]> (_t1C9E, _t1CA0);
                  real _t1CA2 = pos1398[2];
                  real _t1CA3 = func urnd135C (_t1CA2);
                  real _t1CA4 = prim +0017<$[]> (_t1CA1, _t1CA3);
                  real _t1CA5 = 0.1e1;
                  real _t1CA6 = prim fmod018A (_t1CA4, _t1CA5);
                  _t14E6 = _t1CA6;
                  int _t14E7 = prim -0024 (nn13F7, nnmax12F4);
                  real _t14E8 = (real)_t14E7;
                  real _t14E9 = prim $i2r01B6 (nn13F7);
                  real _t14EA = prim /0055 (_t14E8, _t14E9);
                  bool _t14EB = prim <007A (_t14E6, _t14EA);
                  if _t14EB {
                    die;
                  }
                }
              }
            }
          }
        }
      }
    }
    first13A6 = false;
  }
}
collection {
  int _t14F7 = 0;
  int _t14F8 = prim length0123<vec3> (ipos07DE);
  int _t14F9 = 1;
  int _t14FA = prim -0024 (_t14F8, _t14F9);
  int[] _t14FB = prim $range01C3 (_t14F7, _t14FA);
  foreach ii14FC in _t14FB {
    vec3 _t14FD = prim $dynsub01C2<vec3> (ipos07DE, ii14FC);
    real _t14FE = 0.1e1;
    new point (_t14FD, _t14FE);
  }
}
update {
  int pop14FF = prim numActive01A2 ();
  int _t1500;
  bool _t1501 = prim !=0086 (pop14FF, popLast135B);
  if _t1501 {
    _t1500 = 1;
  } else {
    _t1500 = 0;
  }
  int pc1502 = _t1500;
  real _t1503 = (real)pc1502;
  rpc135A = prim lerp0096<$[]> (_t1503, rpc135A, pchist1358);
  bool res1504= all { (P1507) => {
      bool _t1508 = P1507.found13A0;
      return _t1508;
    } (P1505, P1505)
  | P1505 in all };
  bool allfound150A = res1504;
  real _t150B = 0.1e3;
  real res150C= sum<real> { (P1510) => {
      real _t1511;
      bool _t1512 = P1510.found13A0;
      if _t1512 {
        _t1511 = 0.1e1;
      } else {
        _t1511 = 0.e0;
      }
      return _t1511;
    } (P150D, P150D)
  | P150D in all };
  int num1514 = prim numStrands01A4 ();
  real rNum1515 = (real)num1514;
  real mean1516 = prim /0055 (res150C, rNum1515);
  real percfound1517 = prim *0034 (_t150B, mean1516);
  real res1518= sum<real> { (P151B) => {
      real _t151C = P151B.closest13A4;
      return _t151C;
    } (P1519, P1519)
  | P1519 in all };
  int num151E = prim numStrands01A4 ();
  real rNum151F = (real)num151E;
  real mean1520 = prim /0055 (res1518, rNum151F);
  real meancl1521 = mean1520;
  real res1522= sum<real> { (P1528, meancl152A) => {
      real _t1529 = P1528.closest13A4;
      real _t152B = prim -0026<$[]> (_t1529, meancl152A);
      int _t152C = 2;
      real _t152D = prim ^0068 (_t152B, _t152C);
      return _t152D;
    } (P1523, P1523, meancl1521)
  | P1523 in all };
  int num152F = prim numStrands01A4 ();
  real rNum1530 = (real)num152F;
  real mean1531 = prim /0055 (res1522, rNum1530);
  real varicl1532 = mean1531;
  real _t1533 = prim sqrt0165 (varicl1532);
  real covcl1534 = prim /0055 (_t1533, meancl1521);
  real res1535= max<real> { (P1538) => {
      real _t1539 = P1538.mvmt13A3;
      return _t1539;
    } (P1536, P1536)
  | P1536 in all };
  real maxmvmt153B = res1535;
  string _t153C = "======= finished iter ";
  string _t153D = " w/ ";
  string _t153E = ")";
  string _t153F = "; %found=";
  string _t1540 = "; mean(hh)=";
  real res1541= sum<real> { (P1544) => {
      real _t1545 = P1544.hh139B;
      return _t1545;
    } (P1542, P1542)
  | P1542 in all };
  int num1547 = prim numStrands01A4 ();
  real rNum1548 = (real)num1547;
  real mean1549 = prim /0055 (res1541, rNum1548);
  string _t154A = "; mean(cl)=";
  string _t154B = "; COV(cl)=";
  string _t154C = "; max(mvmt)=";
  string _t154D = "; pc=";
  string _t154E = "; rpc=";
  string _t154F = "\n";
  print (_t153C, iter1359, _t153D, pop14FF, _t153E, _t153F, percfound1517, _t1540, mean1549, _t154A, meancl1521, _t154B, covcl1534, _t154C, maxmvmt153B, _t154D, pc1502, _t154E, rpc135A, _t154F);
  bool _t1550;
  if allfound150A {
    bool _t1551;
    bool _t1552 = prim <007A (covcl1534, geoEps07D5);
    if _t1552 {
      bool _t1553;
      bool _t1554 = prim <007A (maxmvmt153B, mvmtEps07D6);
      if _t1554 {
        _t1553 = prim <007A (rpc135A, rpcEps07D7);
      } else {
        _t1553 = false;
      }
      _t1551 = _t1553;
    } else {
      _t1551 = false;
    }
    _t1550 = _t1551;
  } else {
    _t1550 = false;
  }
  if _t1550 {
    string _t1555 = "======= Stabilizing ";
    int _t1556 = prim numActive01A2 ();
    string _t1557 = " (iter ";
    string _t1558 = ")";
    string _t1559 = "; COV(cl)=";
    string _t155A = " < ";
    string _t155B = "; max(mvmt)=";
    string _t155C = " < ";
    string _t155D = "; rpc=";
    string _t155E = " < ";
    string _t155F = "\n";
    print (_t1555, _t1556, _t1557, iter1359, _t1558, _t1559, covcl1534, _t155A, geoEps07D5, _t155B, maxmvmt153B, _t155C, mvmtEps07D6, _t155D, rpc135A, _t155E, rpcEps07D7, _t155F);
    stabilize_all;
  } else {
    string _t1560 = "======= Stabilizing ";
    int _t1561 = prim numActive01A2 ();
    string _t1562 = " (iter ";
    string _t1563 = ")";
    string _t1564 = "; COV(cl)=";
    string _t1565 = " > ";
    string _t1566 = "; max(mvmt)=";
    string _t1567 = " > ";
    string _t1568 = "; rpc=";
    string _t1569 = " > ";
    string _t156A = "\n";
    print (_t1560, _t1561, _t1562, iter1359, _t1563, _t1564, covcl1534, _t1565, geoEps07D5, _t1566, maxmvmt153B, _t1567, mvmtEps07D6, _t1568, rpc135A, _t1569, rpcEps07D7, _t156A);
  }
  int _t156B = 1;
  iter1359 = prim +0015 (iter1359, _t156B);
  popLast135B = pop14FF;
}
/* Program end */
/* Simplified Program (after after simplify fem vars) start */
properties: GlobalInit,StabilizeAll,GlobalReduce,StrandSets,GlobalUpdate,NewStrands,StrandCommunication,StrandsMayDie,HasInputs,HasGlobals,ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
input FemData:Mesh meshData07BA;
input FemData:Space 0space07C6_intermedateGlobal07C7;
input FemData:FemFunc 0data07C8_intermedateGlobal07C9;
input real fStrTh07CA("Feature strength threshold");
input real fMaskTh07CB("feature mask threshold") = <default>;
input real fBias07CC("Bias in feature strength computing") = <default>;
input real tipd07CD("Target inter-particle distance") = <default>;
input real mabd07CE("Min allowed birth distance (> 0.7351)") = <default>;
input real travMax07CF("Max allowed travel to or on feature") = <default>;
input int nfsMax07D0("Max allowed # feature steps ") = <default>;
input real gdeTest07D1("Scaling in sufficient decrease test") = <default>;
input real gdeBack07D2("How to scale stepsize for backtrack") = <default>;
input real gdeOppor07D3("Opportunistic stepsize increase") = <default>;
input real fsEps07D4("Conv. thresh. on feature step size");
input real geoEps07D5("Conv. thresh. on system geometry") = <default>;
input real mvmtEps07D6("Conv. thresh. on point movement") = <default>;
input real rpcEps07D7("Conv. thresh. on recent pop. changes") = <default>;
input real pcmvEps07D8("Motion limit before PC") = <default>;
input real isoval07D9("Which isosurface to sample") = <default>;
input int verb07DA("Verbosity level") = <default>;
input real sfs07DB("Scaling (<=1 for stability) on fStep") = <default>;
input real hist07DC("How history matters for convergence") = <default>;
input int pcp07DD("periodicity of population control (PC)") = <default>;
input vec3[] ipos07DE("Initial point positions");
input int fDim07DF = <default>;
constants {
  fMaskTh07CB = 0.e0;
  fBias07CC = 0.e0;
  tipd07CD = 0.1e1;
  mabd07CE = 0.75e0;
  travMax07CF = 0.1e2;
  nfsMax07D0 = 20;
  gdeTest07D1 = 0.5e0;
  gdeBack07D2 = 0.5e0;
  gdeOppor07D3 = 0.12e1;
  geoEps07D5 = 0.1e0;
  mvmtEps07D6 = 0.1e-1;
  rpcEps07D7 = 0.1e-1;
  pcmvEps07D8 = 0.3e0;
  isoval07D9 = 0.e0;
  verb07DA = 0;
  sfs07DB = 0.5e0;
  hist07DC = 0.5e0;
  pcp07DD = 5;
  fDim07DF = 2;
}
global int nnmin12ED;
global int nnmax12F4;
global real phiWellRad1341;
global real rad1342;
global real pchist1358;
global int iter1359;
global real rpc135A;
global int popLast135B;
function int[2]#6 nextCell408B4 (int faceIdx0D13, int cell0D14, Femdata: Mesh mesh0D15)
{
  int _t0D16 = -1;
  bool _t0D17 = prim ==0082 (faceIdx0D13, _t0D16);
  if _t0D17 {
    int _t0D18 = -1;
    int _t0D19 = -1;
    int[2] _t0D1A = {_t0D18, _t0D19};
    return _t0D1A;
  } else {
    int _t0D1B = 8;
    int _t0D1C = prim *0033 (cell0D14, _t0D1B);
    int _t0D1D = 2;
    int _t0D1E = prim *0033 (faceIdx0D13, _t0D1D);
    int _t0D1F = prim +0015 (_t0D1C, _t0D1E);
    int[2] _t0D20 = extractFemItemN((mesh0D15, _t0D1F),CellFaceCell(Mesh),);
    return _t0D20;
  }
}
function vec3#6 fStep128C (vec3 s128D)
{
  vec3 g128E;
  real x167D = s128D[0];
  real y167E = s128D[1];
  real z167F = s128D[2];
  real _t1680 = 0.2e1;
  real _t1681 = prim *0034 (_t1680, x167D);
  int _t1682 = 2;
  real _t1683 = prim ^0068 (z167F, _t1682);
  real _t1684 = prim *0034 (_t1681, _t1683);
  int _t1685 = 2;
  real _t1686 = prim ^0068 (x167D, _t1685);
  int _t1687 = 2;
  real _t1688 = prim ^0068 (y167E, _t1687);
  real _t1689 = prim +0017<$[]> (_t1686, _t1688);
  int _t168A = 2;
  real _t168B = prim ^0068 (z167F, _t168A);
  real _t168C = prim +0017<$[]> (_t1689, _t168B);
  real _t168D = prim cos0169 (_t168C);
  real _t168E = prim *0034 (_t1684, _t168D);
  real _t168F = 0.2e1;
  real _t1690 = prim *0034 (_t168F, y167E);
  int _t1691 = 2;
  real _t1692 = prim ^0068 (z167F, _t1691);
  real _t1693 = prim *0034 (_t1690, _t1692);
  int _t1694 = 2;
  real _t1695 = prim ^0068 (x167D, _t1694);
  int _t1696 = 2;
  real _t1697 = prim ^0068 (y167E, _t1696);
  real _t1698 = prim +0017<$[]> (_t1695, _t1697);
  int _t1699 = 2;
  real _t169A = prim ^0068 (z167F, _t1699);
  real _t169B = prim +0017<$[]> (_t1698, _t169A);
  real _t169C = prim cos0169 (_t169B);
  real _t169D = prim *0034 (_t1693, _t169C);
  real _t169E = 0.2e1;
  int _t169F = 3;
  real _t16A0 = prim ^0068 (z167F, _t169F);
  real _t16A1 = prim *0034 (_t169E, _t16A0);
  int _t16A2 = 2;
  real _t16A3 = prim ^0068 (x167D, _t16A2);
  int _t16A4 = 2;
  real _t16A5 = prim ^0068 (y167E, _t16A4);
  real _t16A6 = prim +0017<$[]> (_t16A3, _t16A5);
  int _t16A7 = 2;
  real _t16A8 = prim ^0068 (z167F, _t16A7);
  real _t16A9 = prim +0017<$[]> (_t16A6, _t16A8);
  real _t16AA = prim cos0169 (_t16A9);
  real _t16AB = prim *0034 (_t16A1, _t16AA);
  real _t16AC = 0.2e1;
  real _t16AD = prim *0034 (_t16AC, z167F);
  int _t16AE = 2;
  real _t16AF = prim ^0068 (x167D, _t16AE);
  int _t16B0 = 2;
  real _t16B1 = prim ^0068 (y167E, _t16B0);
  real _t16B2 = prim +0017<$[]> (_t16AF, _t16B1);
  int _t16B3 = 2;
  real _t16B4 = prim ^0068 (z167F, _t16B3);
  real _t16B5 = prim +0017<$[]> (_t16B2, _t16B4);
  real _t16B6 = prim sin0171 (_t16B5);
  real _t16B7 = prim *0034 (_t16AD, _t16B6);
  real _t16B8 = prim +0017<$[]> (_t16AB, _t16B7);
  vec3 g16B9 = [_t168E, _t169D, _t16B8];
  g128E = g16B9;
  tensor[3,3] H128F;
  real x1570 = s128D[0];
  real y1571 = s128D[1];
  real z1572 = s128D[2];
  int _t1573 = -4;
  real _t1574 = (real)_t1573;
  int _t1575 = 2;
  real _t1576 = prim ^0068 (x1570, _t1575);
  real _t1577 = prim *0034 (_t1574, _t1576);
  int _t1578 = 2;
  real _t1579 = prim ^0068 (z1572, _t1578);
  real _t157A = prim *0034 (_t1577, _t1579);
  int _t157B = 2;
  real _t157C = prim ^0068 (x1570, _t157B);
  int _t157D = 2;
  real _t157E = prim ^0068 (y1571, _t157D);
  real _t157F = prim +0017<$[]> (_t157C, _t157E);
  int _t1580 = 2;
  real _t1581 = prim ^0068 (z1572, _t1580);
  real _t1582 = prim +0017<$[]> (_t157F, _t1581);
  real _t1583 = prim sin0171 (_t1582);
  real _t1584 = prim *0034 (_t157A, _t1583);
  real _t1585 = 0.2e1;
  int _t1586 = 2;
  real _t1587 = prim ^0068 (z1572, _t1586);
  real _t1588 = prim *0034 (_t1585, _t1587);
  int _t1589 = 2;
  real _t158A = prim ^0068 (x1570, _t1589);
  int _t158B = 2;
  real _t158C = prim ^0068 (y1571, _t158B);
  real _t158D = prim +0017<$[]> (_t158A, _t158C);
  int _t158E = 2;
  real _t158F = prim ^0068 (z1572, _t158E);
  real _t1590 = prim +0017<$[]> (_t158D, _t158F);
  real _t1591 = prim cos0169 (_t1590);
  real _t1592 = prim *0034 (_t1588, _t1591);
  real _t1593 = prim +0017<$[]> (_t1584, _t1592);
  int _t1594 = -4;
  real _t1595 = (real)_t1594;
  real _t1596 = prim *0034 (_t1595, x1570);
  real _t1597 = prim *0034 (_t1596, y1571);
  int _t1598 = 2;
  real _t1599 = prim ^0068 (z1572, _t1598);
  real _t159A = prim *0034 (_t1597, _t1599);
  int _t159B = 2;
  real _t159C = prim ^0068 (x1570, _t159B);
  int _t159D = 2;
  real _t159E = prim ^0068 (y1571, _t159D);
  real _t159F = prim +0017<$[]> (_t159C, _t159E);
  int _t15A0 = 2;
  real _t15A1 = prim ^0068 (z1572, _t15A0);
  real _t15A2 = prim +0017<$[]> (_t159F, _t15A1);
  real _t15A3 = prim sin0171 (_t15A2);
  real _t15A4 = prim *0034 (_t159A, _t15A3);
  int _t15A5 = -4;
  real _t15A6 = (real)_t15A5;
  real _t15A7 = prim *0034 (_t15A6, x1570);
  int _t15A8 = 3;
  real _t15A9 = prim ^0068 (z1572, _t15A8);
  real _t15AA = prim *0034 (_t15A7, _t15A9);
  int _t15AB = 2;
  real _t15AC = prim ^0068 (x1570, _t15AB);
  int _t15AD = 2;
  real _t15AE = prim ^0068 (y1571, _t15AD);
  real _t15AF = prim +0017<$[]> (_t15AC, _t15AE);
  int _t15B0 = 2;
  real _t15B1 = prim ^0068 (z1572, _t15B0);
  real _t15B2 = prim +0017<$[]> (_t15AF, _t15B1);
  real _t15B3 = prim sin0171 (_t15B2);
  real _t15B4 = prim *0034 (_t15AA, _t15B3);
  real _t15B5 = 0.4e1;
  real _t15B6 = prim *0034 (_t15B5, x1570);
  real _t15B7 = prim *0034 (_t15B6, z1572);
  int _t15B8 = 2;
  real _t15B9 = prim ^0068 (x1570, _t15B8);
  int _t15BA = 2;
  real _t15BB = prim ^0068 (y1571, _t15BA);
  real _t15BC = prim +0017<$[]> (_t15B9, _t15BB);
  int _t15BD = 2;
  real _t15BE = prim ^0068 (z1572, _t15BD);
  real _t15BF = prim +0017<$[]> (_t15BC, _t15BE);
  real _t15C0 = prim cos0169 (_t15BF);
  real _t15C1 = prim *0034 (_t15B7, _t15C0);
  real _t15C2 = prim +0017<$[]> (_t15B4, _t15C1);
  vec3 _t15C3 = [_t1593, _t15A4, _t15C2];
  int _t15C4 = -4;
  real _t15C5 = (real)_t15C4;
  real _t15C6 = prim *0034 (_t15C5, x1570);
  real _t15C7 = prim *0034 (_t15C6, y1571);
  int _t15C8 = 2;
  real _t15C9 = prim ^0068 (z1572, _t15C8);
  real _t15CA = prim *0034 (_t15C7, _t15C9);
  int _t15CB = 2;
  real _t15CC = prim ^0068 (x1570, _t15CB);
  int _t15CD = 2;
  real _t15CE = prim ^0068 (y1571, _t15CD);
  real _t15CF = prim +0017<$[]> (_t15CC, _t15CE);
  int _t15D0 = 2;
  real _t15D1 = prim ^0068 (z1572, _t15D0);
  real _t15D2 = prim +0017<$[]> (_t15CF, _t15D1);
  real _t15D3 = prim sin0171 (_t15D2);
  real _t15D4 = prim *0034 (_t15CA, _t15D3);
  int _t15D5 = -4;
  real _t15D6 = (real)_t15D5;
  int _t15D7 = 2;
  real _t15D8 = prim ^0068 (y1571, _t15D7);
  real _t15D9 = prim *0034 (_t15D6, _t15D8);
  int _t15DA = 2;
  real _t15DB = prim ^0068 (z1572, _t15DA);
  real _t15DC = prim *0034 (_t15D9, _t15DB);
  int _t15DD = 2;
  real _t15DE = prim ^0068 (x1570, _t15DD);
  int _t15DF = 2;
  real _t15E0 = prim ^0068 (y1571, _t15DF);
  real _t15E1 = prim +0017<$[]> (_t15DE, _t15E0);
  int _t15E2 = 2;
  real _t15E3 = prim ^0068 (z1572, _t15E2);
  real _t15E4 = prim +0017<$[]> (_t15E1, _t15E3);
  real _t15E5 = prim sin0171 (_t15E4);
  real _t15E6 = prim *0034 (_t15DC, _t15E5);
  real _t15E7 = 0.2e1;
  int _t15E8 = 2;
  real _t15E9 = prim ^0068 (z1572, _t15E8);
  real _t15EA = prim *0034 (_t15E7, _t15E9);
  int _t15EB = 2;
  real _t15EC = prim ^0068 (x1570, _t15EB);
  int _t15ED = 2;
  real _t15EE = prim ^0068 (y1571, _t15ED);
  real _t15EF = prim +0017<$[]> (_t15EC, _t15EE);
  int _t15F0 = 2;
  real _t15F1 = prim ^0068 (z1572, _t15F0);
  real _t15F2 = prim +0017<$[]> (_t15EF, _t15F1);
  real _t15F3 = prim cos0169 (_t15F2);
  real _t15F4 = prim *0034 (_t15EA, _t15F3);
  real _t15F5 = prim +0017<$[]> (_t15E6, _t15F4);
  int _t15F6 = -4;
  real _t15F7 = (real)_t15F6;
  real _t15F8 = prim *0034 (_t15F7, y1571);
  int _t15F9 = 3;
  real _t15FA = prim ^0068 (z1572, _t15F9);
  real _t15FB = prim *0034 (_t15F8, _t15FA);
  int _t15FC = 2;
  real _t15FD = prim ^0068 (x1570, _t15FC);
  int _t15FE = 2;
  real _t15FF = prim ^0068 (y1571, _t15FE);
  real _t1600 = prim +0017<$[]> (_t15FD, _t15FF);
  int _t1601 = 2;
  real _t1602 = prim ^0068 (z1572, _t1601);
  real _t1603 = prim +0017<$[]> (_t1600, _t1602);
  real _t1604 = prim sin0171 (_t1603);
  real _t1605 = prim *0034 (_t15FB, _t1604);
  real _t1606 = 0.4e1;
  real _t1607 = prim *0034 (_t1606, y1571);
  real _t1608 = prim *0034 (_t1607, z1572);
  int _t1609 = 2;
  real _t160A = prim ^0068 (x1570, _t1609);
  int _t160B = 2;
  real _t160C = prim ^0068 (y1571, _t160B);
  real _t160D = prim +0017<$[]> (_t160A, _t160C);
  int _t160E = 2;
  real _t160F = prim ^0068 (z1572, _t160E);
  real _t1610 = prim +0017<$[]> (_t160D, _t160F);
  real _t1611 = prim cos0169 (_t1610);
  real _t1612 = prim *0034 (_t1608, _t1611);
  real _t1613 = prim +0017<$[]> (_t1605, _t1612);
  vec3 _t1614 = [_t15D4, _t15F5, _t1613];
  int _t1615 = -4;
  real _t1616 = (real)_t1615;
  real _t1617 = prim *0034 (_t1616, x1570);
  int _t1618 = 3;
  real _t1619 = prim ^0068 (z1572, _t1618);
  real _t161A = prim *0034 (_t1617, _t1619);
  int _t161B = 2;
  real _t161C = prim ^0068 (x1570, _t161B);
  int _t161D = 2;
  real _t161E = prim ^0068 (y1571, _t161D);
  real _t161F = prim +0017<$[]> (_t161C, _t161E);
  int _t1620 = 2;
  real _t1621 = prim ^0068 (z1572, _t1620);
  real _t1622 = prim +0017<$[]> (_t161F, _t1621);
  real _t1623 = prim sin0171 (_t1622);
  real _t1624 = prim *0034 (_t161A, _t1623);
  real _t1625 = 0.4e1;
  real _t1626 = prim *0034 (_t1625, x1570);
  real _t1627 = prim *0034 (_t1626, z1572);
  int _t1628 = 2;
  real _t1629 = prim ^0068 (x1570, _t1628);
  int _t162A = 2;
  real _t162B = prim ^0068 (y1571, _t162A);
  real _t162C = prim +0017<$[]> (_t1629, _t162B);
  int _t162D = 2;
  real _t162E = prim ^0068 (z1572, _t162D);
  real _t162F = prim +0017<$[]> (_t162C, _t162E);
  real _t1630 = prim cos0169 (_t162F);
  real _t1631 = prim *0034 (_t1627, _t1630);
  real _t1632 = prim +0017<$[]> (_t1624, _t1631);
  int _t1633 = -4;
  real _t1634 = (real)_t1633;
  real _t1635 = prim *0034 (_t1634, y1571);
  int _t1636 = 3;
  real _t1637 = prim ^0068 (z1572, _t1636);
  real _t1638 = prim *0034 (_t1635, _t1637);
  int _t1639 = 2;
  real _t163A = prim ^0068 (x1570, _t1639);
  int _t163B = 2;
  real _t163C = prim ^0068 (y1571, _t163B);
  real _t163D = prim +0017<$[]> (_t163A, _t163C);
  int _t163E = 2;
  real _t163F = prim ^0068 (z1572, _t163E);
  real _t1640 = prim +0017<$[]> (_t163D, _t163F);
  real _t1641 = prim sin0171 (_t1640);
  real _t1642 = prim *0034 (_t1638, _t1641);
  real _t1643 = 0.4e1;
  real _t1644 = prim *0034 (_t1643, y1571);
  real _t1645 = prim *0034 (_t1644, z1572);
  int _t1646 = 2;
  real _t1647 = prim ^0068 (x1570, _t1646);
  int _t1648 = 2;
  real _t1649 = prim ^0068 (y1571, _t1648);
  real _t164A = prim +0017<$[]> (_t1647, _t1649);
  int _t164B = 2;
  real _t164C = prim ^0068 (z1572, _t164B);
  real _t164D = prim +0017<$[]> (_t164A, _t164C);
  real _t164E = prim cos0169 (_t164D);
  real _t164F = prim *0034 (_t1645, _t164E);
  real _t1650 = prim +0017<$[]> (_t1642, _t164F);
  int _t1651 = -4;
  real _t1652 = (real)_t1651;
  int _t1653 = 4;
  real _t1654 = prim ^0068 (z1572, _t1653);
  real _t1655 = prim *0034 (_t1652, _t1654);
  int _t1656 = 2;
  real _t1657 = prim ^0068 (x1570, _t1656);
  int _t1658 = 2;
  real _t1659 = prim ^0068 (y1571, _t1658);
  real _t165A = prim +0017<$[]> (_t1657, _t1659);
  int _t165B = 2;
  real _t165C = prim ^0068 (z1572, _t165B);
  real _t165D = prim +0017<$[]> (_t165A, _t165C);
  real _t165E = prim sin0171 (_t165D);
  real _t165F = prim *0034 (_t1655, _t165E);
  real _t1660 = 0.1e2;
  int _t1661 = 2;
  real _t1662 = prim ^0068 (z1572, _t1661);
  real _t1663 = prim *0034 (_t1660, _t1662);
  int _t1664 = 2;
  real _t1665 = prim ^0068 (x1570, _t1664);
  int _t1666 = 2;
  real _t1667 = prim ^0068 (y1571, _t1666);
  real _t1668 = prim +0017<$[]> (_t1665, _t1667);
  int _t1669 = 2;
  real _t166A = prim ^0068 (z1572, _t1669);
  real _t166B = prim +0017<$[]> (_t1668, _t166A);
  real _t166C = prim cos0169 (_t166B);
  real _t166D = prim *0034 (_t1663, _t166C);
  real _t166E = prim +0017<$[]> (_t165F, _t166D);
  real _t166F = 0.2e1;
  int _t1670 = 2;
  real _t1671 = prim ^0068 (x1570, _t1670);
  int _t1672 = 2;
  real _t1673 = prim ^0068 (y1571, _t1672);
  real _t1674 = prim +0017<$[]> (_t1671, _t1673);
  int _t1675 = 2;
  real _t1676 = prim ^0068 (z1572, _t1675);
  real _t1677 = prim +0017<$[]> (_t1674, _t1676);
  real _t1678 = prim sin0171 (_t1677);
  real _t1679 = prim *0034 (_t166F, _t1678);
  real _t167A = prim +0017<$[]> (_t166E, _t1679);
  vec3 _t167B = [_t1632, _t1650, _t167A];
  tensor[3,3] hess167C = [_t15C3, _t1614, _t167B];
  H128F = hess167C;
  vec3[3] E1290 = prim evecs00A0 (H128F);
  real[3] L1291 = prim evals009F (H128F);
  real _t1292 = 0.1e1;
  int _t1293 = 2;
  real _t1294 = prim $sub01C0<real; %3> (L1291, _t1293);
  real _t1295 = prim /0055 (_t1292, _t1294);
  real _t1296 = prim unary -008B<$[]> (_t1295);
  int _t1297 = 2;
  vec3 _t1298 = prim $sub01C0<vec3; %3> (E1290, _t1297);
  vec3 _t1299 = prim *0036<$[3]> (_t1296, _t1298);
  int _t129A = 2;
  vec3 _t129B = prim $sub01C0<vec3; %3> (E1290, _t129A);
  tensor[3,3] _t129C = prim ⊗00E5<$[3]; $[3]; $[3,3]> (_t1299, _t129B);
  vec3 up129D = prim •00CE<$[3,3]; $[3]; $[3]> (_t129C, g128E);
  bool _t129E;
  real _t129F = up129D[0];
  real _t12A0 = up129D[0];
  bool _t12A1 = prim ==0084 (_t129F, _t12A0);
  bool _t12A2 = prim !00BC (_t12A1);
  if _t12A2 {
    _t129E = true;
  } else {
    bool _t12A3;
    real _t12A4 = up129D[1];
    real _t12A5 = up129D[1];
    bool _t12A6 = prim ==0084 (_t12A4, _t12A5);
    bool _t12A7 = prim !00BC (_t12A6);
    if _t12A7 {
      _t12A3 = true;
    } else {
      real _t12A8 = up129D[2];
      real _t12A9 = up129D[2];
      bool _t12AA = prim ==0084 (_t12A8, _t12A9);
      _t12A3 = prim !00BC (_t12AA);
    }
    _t129E = _t12A3;
  }
  if _t129E {
    real _t12AB = +inf;
    real _t12AC = +inf;
    real _t12AD = +inf;
    vec3 _t12AE = [_t12AB, _t12AC, _t12AD];
    return _t12AE;
  }
  return up129D;
}
function tensor[3,3]#4 fPerp12BE (vec3 s12BF)
{
  vec3 g12C0;
  real x17C7 = s12BF[0];
  real y17C8 = s12BF[1];
  real z17C9 = s12BF[2];
  real _t17CA = 0.2e1;
  real _t17CB = prim *0034 (_t17CA, x17C7);
  int _t17CC = 2;
  real _t17CD = prim ^0068 (z17C9, _t17CC);
  real _t17CE = prim *0034 (_t17CB, _t17CD);
  int _t17CF = 2;
  real _t17D0 = prim ^0068 (x17C7, _t17CF);
  int _t17D1 = 2;
  real _t17D2 = prim ^0068 (y17C8, _t17D1);
  real _t17D3 = prim +0017<$[]> (_t17D0, _t17D2);
  int _t17D4 = 2;
  real _t17D5 = prim ^0068 (z17C9, _t17D4);
  real _t17D6 = prim +0017<$[]> (_t17D3, _t17D5);
  real _t17D7 = prim cos0169 (_t17D6);
  real _t17D8 = prim *0034 (_t17CE, _t17D7);
  real _t17D9 = 0.2e1;
  real _t17DA = prim *0034 (_t17D9, y17C8);
  int _t17DB = 2;
  real _t17DC = prim ^0068 (z17C9, _t17DB);
  real _t17DD = prim *0034 (_t17DA, _t17DC);
  int _t17DE = 2;
  real _t17DF = prim ^0068 (x17C7, _t17DE);
  int _t17E0 = 2;
  real _t17E1 = prim ^0068 (y17C8, _t17E0);
  real _t17E2 = prim +0017<$[]> (_t17DF, _t17E1);
  int _t17E3 = 2;
  real _t17E4 = prim ^0068 (z17C9, _t17E3);
  real _t17E5 = prim +0017<$[]> (_t17E2, _t17E4);
  real _t17E6 = prim cos0169 (_t17E5);
  real _t17E7 = prim *0034 (_t17DD, _t17E6);
  real _t17E8 = 0.2e1;
  int _t17E9 = 3;
  real _t17EA = prim ^0068 (z17C9, _t17E9);
  real _t17EB = prim *0034 (_t17E8, _t17EA);
  int _t17EC = 2;
  real _t17ED = prim ^0068 (x17C7, _t17EC);
  int _t17EE = 2;
  real _t17EF = prim ^0068 (y17C8, _t17EE);
  real _t17F0 = prim +0017<$[]> (_t17ED, _t17EF);
  int _t17F1 = 2;
  real _t17F2 = prim ^0068 (z17C9, _t17F1);
  real _t17F3 = prim +0017<$[]> (_t17F0, _t17F2);
  real _t17F4 = prim cos0169 (_t17F3);
  real _t17F5 = prim *0034 (_t17EB, _t17F4);
  real _t17F6 = 0.2e1;
  real _t17F7 = prim *0034 (_t17F6, z17C9);
  int _t17F8 = 2;
  real _t17F9 = prim ^0068 (x17C7, _t17F8);
  int _t17FA = 2;
  real _t17FB = prim ^0068 (y17C8, _t17FA);
  real _t17FC = prim +0017<$[]> (_t17F9, _t17FB);
  int _t17FD = 2;
  real _t17FE = prim ^0068 (z17C9, _t17FD);
  real _t17FF = prim +0017<$[]> (_t17FC, _t17FE);
  real _t1800 = prim sin0171 (_t17FF);
  real _t1801 = prim *0034 (_t17F7, _t1800);
  real _t1802 = prim +0017<$[]> (_t17F5, _t1801);
  vec3 g1803 = [_t17D8, _t17E7, _t1802];
  g12C0 = g1803;
  tensor[3,3] H12C1;
  real x16BA = s12BF[0];
  real y16BB = s12BF[1];
  real z16BC = s12BF[2];
  int _t16BD = -4;
  real _t16BE = (real)_t16BD;
  int _t16BF = 2;
  real _t16C0 = prim ^0068 (x16BA, _t16BF);
  real _t16C1 = prim *0034 (_t16BE, _t16C0);
  int _t16C2 = 2;
  real _t16C3 = prim ^0068 (z16BC, _t16C2);
  real _t16C4 = prim *0034 (_t16C1, _t16C3);
  int _t16C5 = 2;
  real _t16C6 = prim ^0068 (x16BA, _t16C5);
  int _t16C7 = 2;
  real _t16C8 = prim ^0068 (y16BB, _t16C7);
  real _t16C9 = prim +0017<$[]> (_t16C6, _t16C8);
  int _t16CA = 2;
  real _t16CB = prim ^0068 (z16BC, _t16CA);
  real _t16CC = prim +0017<$[]> (_t16C9, _t16CB);
  real _t16CD = prim sin0171 (_t16CC);
  real _t16CE = prim *0034 (_t16C4, _t16CD);
  real _t16CF = 0.2e1;
  int _t16D0 = 2;
  real _t16D1 = prim ^0068 (z16BC, _t16D0);
  real _t16D2 = prim *0034 (_t16CF, _t16D1);
  int _t16D3 = 2;
  real _t16D4 = prim ^0068 (x16BA, _t16D3);
  int _t16D5 = 2;
  real _t16D6 = prim ^0068 (y16BB, _t16D5);
  real _t16D7 = prim +0017<$[]> (_t16D4, _t16D6);
  int _t16D8 = 2;
  real _t16D9 = prim ^0068 (z16BC, _t16D8);
  real _t16DA = prim +0017<$[]> (_t16D7, _t16D9);
  real _t16DB = prim cos0169 (_t16DA);
  real _t16DC = prim *0034 (_t16D2, _t16DB);
  real _t16DD = prim +0017<$[]> (_t16CE, _t16DC);
  int _t16DE = -4;
  real _t16DF = (real)_t16DE;
  real _t16E0 = prim *0034 (_t16DF, x16BA);
  real _t16E1 = prim *0034 (_t16E0, y16BB);
  int _t16E2 = 2;
  real _t16E3 = prim ^0068 (z16BC, _t16E2);
  real _t16E4 = prim *0034 (_t16E1, _t16E3);
  int _t16E5 = 2;
  real _t16E6 = prim ^0068 (x16BA, _t16E5);
  int _t16E7 = 2;
  real _t16E8 = prim ^0068 (y16BB, _t16E7);
  real _t16E9 = prim +0017<$[]> (_t16E6, _t16E8);
  int _t16EA = 2;
  real _t16EB = prim ^0068 (z16BC, _t16EA);
  real _t16EC = prim +0017<$[]> (_t16E9, _t16EB);
  real _t16ED = prim sin0171 (_t16EC);
  real _t16EE = prim *0034 (_t16E4, _t16ED);
  int _t16EF = -4;
  real _t16F0 = (real)_t16EF;
  real _t16F1 = prim *0034 (_t16F0, x16BA);
  int _t16F2 = 3;
  real _t16F3 = prim ^0068 (z16BC, _t16F2);
  real _t16F4 = prim *0034 (_t16F1, _t16F3);
  int _t16F5 = 2;
  real _t16F6 = prim ^0068 (x16BA, _t16F5);
  int _t16F7 = 2;
  real _t16F8 = prim ^0068 (y16BB, _t16F7);
  real _t16F9 = prim +0017<$[]> (_t16F6, _t16F8);
  int _t16FA = 2;
  real _t16FB = prim ^0068 (z16BC, _t16FA);
  real _t16FC = prim +0017<$[]> (_t16F9, _t16FB);
  real _t16FD = prim sin0171 (_t16FC);
  real _t16FE = prim *0034 (_t16F4, _t16FD);
  real _t16FF = 0.4e1;
  real _t1700 = prim *0034 (_t16FF, x16BA);
  real _t1701 = prim *0034 (_t1700, z16BC);
  int _t1702 = 2;
  real _t1703 = prim ^0068 (x16BA, _t1702);
  int _t1704 = 2;
  real _t1705 = prim ^0068 (y16BB, _t1704);
  real _t1706 = prim +0017<$[]> (_t1703, _t1705);
  int _t1707 = 2;
  real _t1708 = prim ^0068 (z16BC, _t1707);
  real _t1709 = prim +0017<$[]> (_t1706, _t1708);
  real _t170A = prim cos0169 (_t1709);
  real _t170B = prim *0034 (_t1701, _t170A);
  real _t170C = prim +0017<$[]> (_t16FE, _t170B);
  vec3 _t170D = [_t16DD, _t16EE, _t170C];
  int _t170E = -4;
  real _t170F = (real)_t170E;
  real _t1710 = prim *0034 (_t170F, x16BA);
  real _t1711 = prim *0034 (_t1710, y16BB);
  int _t1712 = 2;
  real _t1713 = prim ^0068 (z16BC, _t1712);
  real _t1714 = prim *0034 (_t1711, _t1713);
  int _t1715 = 2;
  real _t1716 = prim ^0068 (x16BA, _t1715);
  int _t1717 = 2;
  real _t1718 = prim ^0068 (y16BB, _t1717);
  real _t1719 = prim +0017<$[]> (_t1716, _t1718);
  int _t171A = 2;
  real _t171B = prim ^0068 (z16BC, _t171A);
  real _t171C = prim +0017<$[]> (_t1719, _t171B);
  real _t171D = prim sin0171 (_t171C);
  real _t171E = prim *0034 (_t1714, _t171D);
  int _t171F = -4;
  real _t1720 = (real)_t171F;
  int _t1721 = 2;
  real _t1722 = prim ^0068 (y16BB, _t1721);
  real _t1723 = prim *0034 (_t1720, _t1722);
  int _t1724 = 2;
  real _t1725 = prim ^0068 (z16BC, _t1724);
  real _t1726 = prim *0034 (_t1723, _t1725);
  int _t1727 = 2;
  real _t1728 = prim ^0068 (x16BA, _t1727);
  int _t1729 = 2;
  real _t172A = prim ^0068 (y16BB, _t1729);
  real _t172B = prim +0017<$[]> (_t1728, _t172A);
  int _t172C = 2;
  real _t172D = prim ^0068 (z16BC, _t172C);
  real _t172E = prim +0017<$[]> (_t172B, _t172D);
  real _t172F = prim sin0171 (_t172E);
  real _t1730 = prim *0034 (_t1726, _t172F);
  real _t1731 = 0.2e1;
  int _t1732 = 2;
  real _t1733 = prim ^0068 (z16BC, _t1732);
  real _t1734 = prim *0034 (_t1731, _t1733);
  int _t1735 = 2;
  real _t1736 = prim ^0068 (x16BA, _t1735);
  int _t1737 = 2;
  real _t1738 = prim ^0068 (y16BB, _t1737);
  real _t1739 = prim +0017<$[]> (_t1736, _t1738);
  int _t173A = 2;
  real _t173B = prim ^0068 (z16BC, _t173A);
  real _t173C = prim +0017<$[]> (_t1739, _t173B);
  real _t173D = prim cos0169 (_t173C);
  real _t173E = prim *0034 (_t1734, _t173D);
  real _t173F = prim +0017<$[]> (_t1730, _t173E);
  int _t1740 = -4;
  real _t1741 = (real)_t1740;
  real _t1742 = prim *0034 (_t1741, y16BB);
  int _t1743 = 3;
  real _t1744 = prim ^0068 (z16BC, _t1743);
  real _t1745 = prim *0034 (_t1742, _t1744);
  int _t1746 = 2;
  real _t1747 = prim ^0068 (x16BA, _t1746);
  int _t1748 = 2;
  real _t1749 = prim ^0068 (y16BB, _t1748);
  real _t174A = prim +0017<$[]> (_t1747, _t1749);
  int _t174B = 2;
  real _t174C = prim ^0068 (z16BC, _t174B);
  real _t174D = prim +0017<$[]> (_t174A, _t174C);
  real _t174E = prim sin0171 (_t174D);
  real _t174F = prim *0034 (_t1745, _t174E);
  real _t1750 = 0.4e1;
  real _t1751 = prim *0034 (_t1750, y16BB);
  real _t1752 = prim *0034 (_t1751, z16BC);
  int _t1753 = 2;
  real _t1754 = prim ^0068 (x16BA, _t1753);
  int _t1755 = 2;
  real _t1756 = prim ^0068 (y16BB, _t1755);
  real _t1757 = prim +0017<$[]> (_t1754, _t1756);
  int _t1758 = 2;
  real _t1759 = prim ^0068 (z16BC, _t1758);
  real _t175A = prim +0017<$[]> (_t1757, _t1759);
  real _t175B = prim cos0169 (_t175A);
  real _t175C = prim *0034 (_t1752, _t175B);
  real _t175D = prim +0017<$[]> (_t174F, _t175C);
  vec3 _t175E = [_t171E, _t173F, _t175D];
  int _t175F = -4;
  real _t1760 = (real)_t175F;
  real _t1761 = prim *0034 (_t1760, x16BA);
  int _t1762 = 3;
  real _t1763 = prim ^0068 (z16BC, _t1762);
  real _t1764 = prim *0034 (_t1761, _t1763);
  int _t1765 = 2;
  real _t1766 = prim ^0068 (x16BA, _t1765);
  int _t1767 = 2;
  real _t1768 = prim ^0068 (y16BB, _t1767);
  real _t1769 = prim +0017<$[]> (_t1766, _t1768);
  int _t176A = 2;
  real _t176B = prim ^0068 (z16BC, _t176A);
  real _t176C = prim +0017<$[]> (_t1769, _t176B);
  real _t176D = prim sin0171 (_t176C);
  real _t176E = prim *0034 (_t1764, _t176D);
  real _t176F = 0.4e1;
  real _t1770 = prim *0034 (_t176F, x16BA);
  real _t1771 = prim *0034 (_t1770, z16BC);
  int _t1772 = 2;
  real _t1773 = prim ^0068 (x16BA, _t1772);
  int _t1774 = 2;
  real _t1775 = prim ^0068 (y16BB, _t1774);
  real _t1776 = prim +0017<$[]> (_t1773, _t1775);
  int _t1777 = 2;
  real _t1778 = prim ^0068 (z16BC, _t1777);
  real _t1779 = prim +0017<$[]> (_t1776, _t1778);
  real _t177A = prim cos0169 (_t1779);
  real _t177B = prim *0034 (_t1771, _t177A);
  real _t177C = prim +0017<$[]> (_t176E, _t177B);
  int _t177D = -4;
  real _t177E = (real)_t177D;
  real _t177F = prim *0034 (_t177E, y16BB);
  int _t1780 = 3;
  real _t1781 = prim ^0068 (z16BC, _t1780);
  real _t1782 = prim *0034 (_t177F, _t1781);
  int _t1783 = 2;
  real _t1784 = prim ^0068 (x16BA, _t1783);
  int _t1785 = 2;
  real _t1786 = prim ^0068 (y16BB, _t1785);
  real _t1787 = prim +0017<$[]> (_t1784, _t1786);
  int _t1788 = 2;
  real _t1789 = prim ^0068 (z16BC, _t1788);
  real _t178A = prim +0017<$[]> (_t1787, _t1789);
  real _t178B = prim sin0171 (_t178A);
  real _t178C = prim *0034 (_t1782, _t178B);
  real _t178D = 0.4e1;
  real _t178E = prim *0034 (_t178D, y16BB);
  real _t178F = prim *0034 (_t178E, z16BC);
  int _t1790 = 2;
  real _t1791 = prim ^0068 (x16BA, _t1790);
  int _t1792 = 2;
  real _t1793 = prim ^0068 (y16BB, _t1792);
  real _t1794 = prim +0017<$[]> (_t1791, _t1793);
  int _t1795 = 2;
  real _t1796 = prim ^0068 (z16BC, _t1795);
  real _t1797 = prim +0017<$[]> (_t1794, _t1796);
  real _t1798 = prim cos0169 (_t1797);
  real _t1799 = prim *0034 (_t178F, _t1798);
  real _t179A = prim +0017<$[]> (_t178C, _t1799);
  int _t179B = -4;
  real _t179C = (real)_t179B;
  int _t179D = 4;
  real _t179E = prim ^0068 (z16BC, _t179D);
  real _t179F = prim *0034 (_t179C, _t179E);
  int _t17A0 = 2;
  real _t17A1 = prim ^0068 (x16BA, _t17A0);
  int _t17A2 = 2;
  real _t17A3 = prim ^0068 (y16BB, _t17A2);
  real _t17A4 = prim +0017<$[]> (_t17A1, _t17A3);
  int _t17A5 = 2;
  real _t17A6 = prim ^0068 (z16BC, _t17A5);
  real _t17A7 = prim +0017<$[]> (_t17A4, _t17A6);
  real _t17A8 = prim sin0171 (_t17A7);
  real _t17A9 = prim *0034 (_t179F, _t17A8);
  real _t17AA = 0.1e2;
  int _t17AB = 2;
  real _t17AC = prim ^0068 (z16BC, _t17AB);
  real _t17AD = prim *0034 (_t17AA, _t17AC);
  int _t17AE = 2;
  real _t17AF = prim ^0068 (x16BA, _t17AE);
  int _t17B0 = 2;
  real _t17B1 = prim ^0068 (y16BB, _t17B0);
  real _t17B2 = prim +0017<$[]> (_t17AF, _t17B1);
  int _t17B3 = 2;
  real _t17B4 = prim ^0068 (z16BC, _t17B3);
  real _t17B5 = prim +0017<$[]> (_t17B2, _t17B4);
  real _t17B6 = prim cos0169 (_t17B5);
  real _t17B7 = prim *0034 (_t17AD, _t17B6);
  real _t17B8 = prim +0017<$[]> (_t17A9, _t17B7);
  real _t17B9 = 0.2e1;
  int _t17BA = 2;
  real _t17BB = prim ^0068 (x16BA, _t17BA);
  int _t17BC = 2;
  real _t17BD = prim ^0068 (y16BB, _t17BC);
  real _t17BE = prim +0017<$[]> (_t17BB, _t17BD);
  int _t17BF = 2;
  real _t17C0 = prim ^0068 (z16BC, _t17BF);
  real _t17C1 = prim +0017<$[]> (_t17BE, _t17C0);
  real _t17C2 = prim sin0171 (_t17C1);
  real _t17C3 = prim *0034 (_t17B9, _t17C2);
  real _t17C4 = prim +0017<$[]> (_t17B8, _t17C3);
  vec3 _t17C5 = [_t177C, _t179A, _t17C4];
  tensor[3,3] hess17C6 = [_t170D, _t175E, _t17C5];
  H12C1 = hess17C6;
  vec3[3] _t12C2 = prim evecs00A0 (H12C1);
  int _t12C3 = 2;
  vec3 E212C4 = prim $sub01C0<vec3; %3> (_t12C2, _t12C3);
  tensor[3,3] _t12C5 = prim $id01B9<%3> ();
  tensor[3,3] _t12C6 = prim ⊗00E5<$[3]; $[3]; $[3,3]> (E212C4, E212C4);
  tensor[3,3] m12C7 = prim -0026<$[3,3]> (_t12C5, _t12C6);
  real t12C8 = prim :00FC<$[3,3]; $[3,3]; $[]> (m12C7, m12C7);
  bool _t12C9 = prim ==0084 (t12C8, t12C8);
  bool _t12CA = prim !00BC (_t12C9);
  if _t12CA {
    tensor[3,3] _t12CB = prim $zero01BB<$[3,3]> ();
    return _t12CB;
  }
  return m12C7;
}
function real#12 urnd135C (real x135D)
{
  real _t135E = 0.e0;
  bool _t135F = prim ==0084 (x135D, _t135E);
  if _t135F {
    real _t1360 = 0.e0;
    return _t1360;
  }
  real _t1361 = prim |()|00B5<$[]> (x135D);
  real l21362 = prim log2018D (_t1361);
  real _t1363 = 0.2e1;
  real _t1364 = prim floor0189 (l21362);
  real _t1365 = prim -0026<$[]> (l21362, _t1364);
  real _t1366 = 0.1e1;
  real _t1367 = prim -0026<$[]> (_t1365, _t1366);
  real frxp1368 = prim ^0069 (_t1363, _t1367);
  real _t1369 = 0.2e1;
  int _t136A = 20;
  real _t136B = prim ^0068 (_t1369, _t136A);
  int _t136C = 2;
  int _t136D = prim *0033 (_t136C, iter1359);
  real _t136E = (real)_t136D;
  real _t136F = prim +0017<$[]> (_t136B, _t136E);
  real _t1370 = prim *0034 (_t136F, frxp1368);
  real _t1371 = 0.1e1;
  real _t1372 = prim fmod018A (_t1370, _t1371);
  return _t1372;
}
globalInit {
  int _t07BE = 0;
  int _t07BC = 1;
  int _t07C0 = extractFemItem(NumCell(Mesh), int, meshData07BA);
  int _t07BF = prim -0024 (_t07C0, _t07BC);
  int[] _t07C3 = prim $range01C3 (_t07BE, _t07BF);
  Femdata: MeshCell[] _t07C4 = {};
  foreach _t07C2 in _t07C3 {
    Femdata: MeshCell _t07C5 = loadFem(MeshCell, meshData07BA, _t07C2);
    _t07C4 = prim @0010<Femdata: MeshCell> (_t07C4, _t07C5);
  }
  int _t12E7;
  int _t12E8 = 2;
  bool _t12E9 = prim ==0082 (_t12E8, fDim07DF);
  if _t12E9 {
    _t12E7 = 6;
  } else {
    int _t12EA;
    int _t12EB = 1;
    bool _t12EC = prim ==0082 (_t12EB, fDim07DF);
    if _t12EC {
      _t12EA = 2;
    } else {
      _t12EA = 0;
    }
    _t12E7 = _t12EA;
  }
  nnmin12ED = _t12E7;
  int _t12EE;
  int _t12EF = 2;
  bool _t12F0 = prim ==0082 (_t12EF, fDim07DF);
  if _t12F0 {
    _t12EE = 8;
  } else {
    int _t12F1;
    int _t12F2 = 1;
    bool _t12F3 = prim ==0082 (_t12F2, fDim07DF);
    if _t12F3 {
      _t12F1 = 3;
    } else {
      _t12F1 = 0;
    }
    _t12EE = _t12F1;
  }
  nnmax12F4 = _t12EE;
  real _t133F = 0.2e1;
  real _t1340 = 0.3e1;
  phiWellRad1341 = prim /0055 (_t133F, _t1340);
  rad1342 = prim /0055 (tipd07CD, phiWellRad1341);
  real _t1353 = 0.1e1;
  int _t1354 = 2;
  int _t1355 = prim *0033 (_t1354, pcp07DD);
  real _t1356 = (real)_t1355;
  real _t1357 = prim /0055 (_t1353, _t1356);
  pchist1358 = prim ^0069 (hist07DC, _t1357);
  iter1359 = 0;
  rpc135A = 0.1e1;
  popLast135B = -1;
}
strand point (vec3 p01396, real hh01397) in 3D {
  output vec3 pos1398;
  output vec3 _pos1399;
  real ID139A;
  real hh139B;
  vec3 step139C;
  bool found13A0;
  int nfs13A1;
  real trav13A2;
  real mvmt13A3;
  real closest13A4;
  int born13A5;
  bool first13A6;
  {
    pos1398 = p01396;
    _pos1399 = pos1398;
    real ID1B0E;
    real _t1B0F = 0.1e7;
    real _t1B10;
    real _t1B11 = p01396[0];
    real _t1B12 = func urnd135C (_t1B11);
    real _t1B13 = p01396[1];
    real _t1B14 = func urnd135C (_t1B13);
    real _t1B15 = prim +0017<$[]> (_t1B12, _t1B14);
    real _t1B16 = p01396[2];
    real _t1B17 = func urnd135C (_t1B16);
    real _t1B18 = prim +0017<$[]> (_t1B15, _t1B17);
    real _t1B19 = 0.1e1;
    real _t1B1A = prim fmod018A (_t1B18, _t1B19);
    _t1B10 = _t1B1A;
    real _t1B1B = prim *0034 (_t1B0F, _t1B10);
    real _t1B1C = prim floor0189 (_t1B1B);
    ID1B0E = _t1B1C;
    ID139A = ID1B0E;
    hh139B = hh01397;
    real _t139D = 0.e0;
    real _t139E = 0.e0;
    real _t139F = 0.e0;
    step139C = [_t139D, _t139E, _t139F];
    found13A0 = false;
    nfs13A1 = 0;
    trav13A2 = 0.e0;
    mvmt13A3 = 0.1e1;
    closest13A4 = rad1342;
    born13A5 = 0;
    first13A6 = true;
  }
  update
  {
    bool vv13A7 = false;
    if first13A6 {
      bool _t13A8;
      bool _t13A9;
      int _t13AA = 0;
      bool _t13AB = prim >007F (verb07DA, _t13AA);
      if _t13AB {
        _t13A9 = vv13A7;
      } else {
        _t13A9 = false;
      }
      if _t13A9 {
        _t13A8 = true;
      } else {
        int _t13AC = 1;
        _t13A8 = prim >007F (verb07DA, _t13AC);
      }
      if _t13A8 {
        string _t13AD = "(i#";
        string _t13AE = " @ ";
        string _t13AF = "): ";
        print (ID139A, _t13AD, iter1359, _t13AE, pos1398, _t13AF);
        string _t13B0 = " HELLO!\n";
        print (_t13B0);
      }
    }
    bool _t13B1;
    bool _t2053;
    bool _t2054;
    real _t2055 = 0.e0;
    real _t2056 = 0.e0;
    real _t2057 = 0.e0;
    vec3 _t2058 = [_t2055, _t2056, _t2057];
    vec3 mid2059 = prim -0026<$[3]> (pos1398, _t2058);
    bool _t2068;
    real _t2069 = prim |()|00B5<$[3]> (mid2059);
    real _t206A = 0.4e1;
    bool _t206B = prim <007A (_t2069, _t206A);
    if _t206B {
      real _t206C = prim |()|00B5<$[3]> (mid2059);
      real _t206D = 0.3e1;
      _t2068 = prim >0080 (_t206C, _t206D);
    } else {
      _t2068 = false;
    }
    _t2054 = _t2068;
    if _t2054 {
      bool _t206E;
      real _t206F;
      vec3 g2070;
      real x2071 = pos1398[0];
      real y2072 = pos1398[1];
      real z2073 = pos1398[2];
      real _t2074 = 0.2e1;
      real _t2075 = prim *0034 (_t2074, x2071);
      int _t2076 = 2;
      real _t2077 = prim ^0068 (z2073, _t2076);
      real _t2078 = prim *0034 (_t2075, _t2077);
      int _t2079 = 2;
      real _t207A = prim ^0068 (x2071, _t2079);
      int _t207B = 2;
      real _t207C = prim ^0068 (y2072, _t207B);
      real _t207D = prim +0017<$[]> (_t207A, _t207C);
      int _t207E = 2;
      real _t207F = prim ^0068 (z2073, _t207E);
      real _t2080 = prim +0017<$[]> (_t207D, _t207F);
      real _t2081 = prim cos0169 (_t2080);
      real _t2082 = prim *0034 (_t2078, _t2081);
      real _t2083 = 0.2e1;
      real _t2084 = prim *0034 (_t2083, y2072);
      int _t2085 = 2;
      real _t2086 = prim ^0068 (z2073, _t2085);
      real _t2087 = prim *0034 (_t2084, _t2086);
      int _t2088 = 2;
      real _t2089 = prim ^0068 (x2071, _t2088);
      int _t208A = 2;
      real _t208B = prim ^0068 (y2072, _t208A);
      real _t208C = prim +0017<$[]> (_t2089, _t208B);
      int _t208D = 2;
      real _t208E = prim ^0068 (z2073, _t208D);
      real _t208F = prim +0017<$[]> (_t208C, _t208E);
      real _t2090 = prim cos0169 (_t208F);
      real _t2091 = prim *0034 (_t2087, _t2090);
      real _t2092 = 0.2e1;
      int _t2093 = 3;
      real _t2094 = prim ^0068 (z2073, _t2093);
      real _t2095 = prim *0034 (_t2092, _t2094);
      int _t2096 = 2;
      real _t2097 = prim ^0068 (x2071, _t2096);
      int _t2098 = 2;
      real _t2099 = prim ^0068 (y2072, _t2098);
      real _t209A = prim +0017<$[]> (_t2097, _t2099);
      int _t209B = 2;
      real _t209C = prim ^0068 (z2073, _t209B);
      real _t209D = prim +0017<$[]> (_t209A, _t209C);
      real _t209E = prim cos0169 (_t209D);
      real _t209F = prim *0034 (_t2095, _t209E);
      real _t20A0 = 0.2e1;
      real _t20A1 = prim *0034 (_t20A0, z2073);
      int _t20A2 = 2;
      real _t20A3 = prim ^0068 (x2071, _t20A2);
      int _t20A4 = 2;
      real _t20A5 = prim ^0068 (y2072, _t20A4);
      real _t20A6 = prim +0017<$[]> (_t20A3, _t20A5);
      int _t20A7 = 2;
      real _t20A8 = prim ^0068 (z2073, _t20A7);
      real _t20A9 = prim +0017<$[]> (_t20A6, _t20A8);
      real _t20AA = prim sin0171 (_t20A9);
      real _t20AB = prim *0034 (_t20A1, _t20AA);
      real _t20AC = prim +0017<$[]> (_t209F, _t20AB);
      vec3 g20AD = [_t2082, _t2091, _t20AC];
      g2070 = g20AD;
      tensor[3,3] H20AE;
      real x20AF = pos1398[0];
      real y20B0 = pos1398[1];
      real z20B1 = pos1398[2];
      int _t20B2 = -4;
      real _t20B3 = (real)_t20B2;
      int _t20B4 = 2;
      real _t20B5 = prim ^0068 (x20AF, _t20B4);
      real _t20B6 = prim *0034 (_t20B3, _t20B5);
      int _t20B7 = 2;
      real _t20B8 = prim ^0068 (z20B1, _t20B7);
      real _t20B9 = prim *0034 (_t20B6, _t20B8);
      int _t20BA = 2;
      real _t20BB = prim ^0068 (x20AF, _t20BA);
      int _t20BC = 2;
      real _t20BD = prim ^0068 (y20B0, _t20BC);
      real _t20BE = prim +0017<$[]> (_t20BB, _t20BD);
      int _t20BF = 2;
      real _t20C0 = prim ^0068 (z20B1, _t20BF);
      real _t20C1 = prim +0017<$[]> (_t20BE, _t20C0);
      real _t20C2 = prim sin0171 (_t20C1);
      real _t20C3 = prim *0034 (_t20B9, _t20C2);
      real _t20C4 = 0.2e1;
      int _t20C5 = 2;
      real _t20C6 = prim ^0068 (z20B1, _t20C5);
      real _t20C7 = prim *0034 (_t20C4, _t20C6);
      int _t20C8 = 2;
      real _t20C9 = prim ^0068 (x20AF, _t20C8);
      int _t20CA = 2;
      real _t20CB = prim ^0068 (y20B0, _t20CA);
      real _t20CC = prim +0017<$[]> (_t20C9, _t20CB);
      int _t20CD = 2;
      real _t20CE = prim ^0068 (z20B1, _t20CD);
      real _t20CF = prim +0017<$[]> (_t20CC, _t20CE);
      real _t20D0 = prim cos0169 (_t20CF);
      real _t20D1 = prim *0034 (_t20C7, _t20D0);
      real _t20D2 = prim +0017<$[]> (_t20C3, _t20D1);
      int _t20D3 = -4;
      real _t20D4 = (real)_t20D3;
      real _t20D5 = prim *0034 (_t20D4, x20AF);
      real _t20D6 = prim *0034 (_t20D5, y20B0);
      int _t20D7 = 2;
      real _t20D8 = prim ^0068 (z20B1, _t20D7);
      real _t20D9 = prim *0034 (_t20D6, _t20D8);
      int _t20DA = 2;
      real _t20DB = prim ^0068 (x20AF, _t20DA);
      int _t20DC = 2;
      real _t20DD = prim ^0068 (y20B0, _t20DC);
      real _t20DE = prim +0017<$[]> (_t20DB, _t20DD);
      int _t20DF = 2;
      real _t20E0 = prim ^0068 (z20B1, _t20DF);
      real _t20E1 = prim +0017<$[]> (_t20DE, _t20E0);
      real _t20E2 = prim sin0171 (_t20E1);
      real _t20E3 = prim *0034 (_t20D9, _t20E2);
      int _t20E4 = -4;
      real _t20E5 = (real)_t20E4;
      real _t20E6 = prim *0034 (_t20E5, x20AF);
      int _t20E7 = 3;
      real _t20E8 = prim ^0068 (z20B1, _t20E7);
      real _t20E9 = prim *0034 (_t20E6, _t20E8);
      int _t20EA = 2;
      real _t20EB = prim ^0068 (x20AF, _t20EA);
      int _t20EC = 2;
      real _t20ED = prim ^0068 (y20B0, _t20EC);
      real _t20EE = prim +0017<$[]> (_t20EB, _t20ED);
      int _t20EF = 2;
      real _t20F0 = prim ^0068 (z20B1, _t20EF);
      real _t20F1 = prim +0017<$[]> (_t20EE, _t20F0);
      real _t20F2 = prim sin0171 (_t20F1);
      real _t20F3 = prim *0034 (_t20E9, _t20F2);
      real _t20F4 = 0.4e1;
      real _t20F5 = prim *0034 (_t20F4, x20AF);
      real _t20F6 = prim *0034 (_t20F5, z20B1);
      int _t20F7 = 2;
      real _t20F8 = prim ^0068 (x20AF, _t20F7);
      int _t20F9 = 2;
      real _t20FA = prim ^0068 (y20B0, _t20F9);
      real _t20FB = prim +0017<$[]> (_t20F8, _t20FA);
      int _t20FC = 2;
      real _t20FD = prim ^0068 (z20B1, _t20FC);
      real _t20FE = prim +0017<$[]> (_t20FB, _t20FD);
      real _t20FF = prim cos0169 (_t20FE);
      real _t2100 = prim *0034 (_t20F6, _t20FF);
      real _t2101 = prim +0017<$[]> (_t20F3, _t2100);
      vec3 _t2102 = [_t20D2, _t20E3, _t2101];
      int _t2103 = -4;
      real _t2104 = (real)_t2103;
      real _t2105 = prim *0034 (_t2104, x20AF);
      real _t2106 = prim *0034 (_t2105, y20B0);
      int _t2107 = 2;
      real _t2108 = prim ^0068 (z20B1, _t2107);
      real _t2109 = prim *0034 (_t2106, _t2108);
      int _t210A = 2;
      real _t210B = prim ^0068 (x20AF, _t210A);
      int _t210C = 2;
      real _t210D = prim ^0068 (y20B0, _t210C);
      real _t210E = prim +0017<$[]> (_t210B, _t210D);
      int _t210F = 2;
      real _t2110 = prim ^0068 (z20B1, _t210F);
      real _t2111 = prim +0017<$[]> (_t210E, _t2110);
      real _t2112 = prim sin0171 (_t2111);
      real _t2113 = prim *0034 (_t2109, _t2112);
      int _t2114 = -4;
      real _t2115 = (real)_t2114;
      int _t2116 = 2;
      real _t2117 = prim ^0068 (y20B0, _t2116);
      real _t2118 = prim *0034 (_t2115, _t2117);
      int _t2119 = 2;
      real _t211A = prim ^0068 (z20B1, _t2119);
      real _t211B = prim *0034 (_t2118, _t211A);
      int _t211C = 2;
      real _t211D = prim ^0068 (x20AF, _t211C);
      int _t211E = 2;
      real _t211F = prim ^0068 (y20B0, _t211E);
      real _t2120 = prim +0017<$[]> (_t211D, _t211F);
      int _t2121 = 2;
      real _t2122 = prim ^0068 (z20B1, _t2121);
      real _t2123 = prim +0017<$[]> (_t2120, _t2122);
      real _t2124 = prim sin0171 (_t2123);
      real _t2125 = prim *0034 (_t211B, _t2124);
      real _t2126 = 0.2e1;
      int _t2127 = 2;
      real _t2128 = prim ^0068 (z20B1, _t2127);
      real _t2129 = prim *0034 (_t2126, _t2128);
      int _t212A = 2;
      real _t212B = prim ^0068 (x20AF, _t212A);
      int _t212C = 2;
      real _t212D = prim ^0068 (y20B0, _t212C);
      real _t212E = prim +0017<$[]> (_t212B, _t212D);
      int _t212F = 2;
      real _t2130 = prim ^0068 (z20B1, _t212F);
      real _t2131 = prim +0017<$[]> (_t212E, _t2130);
      real _t2132 = prim cos0169 (_t2131);
      real _t2133 = prim *0034 (_t2129, _t2132);
      real _t2134 = prim +0017<$[]> (_t2125, _t2133);
      int _t2135 = -4;
      real _t2136 = (real)_t2135;
      real _t2137 = prim *0034 (_t2136, y20B0);
      int _t2138 = 3;
      real _t2139 = prim ^0068 (z20B1, _t2138);
      real _t213A = prim *0034 (_t2137, _t2139);
      int _t213B = 2;
      real _t213C = prim ^0068 (x20AF, _t213B);
      int _t213D = 2;
      real _t213E = prim ^0068 (y20B0, _t213D);
      real _t213F = prim +0017<$[]> (_t213C, _t213E);
      int _t2140 = 2;
      real _t2141 = prim ^0068 (z20B1, _t2140);
      real _t2142 = prim +0017<$[]> (_t213F, _t2141);
      real _t2143 = prim sin0171 (_t2142);
      real _t2144 = prim *0034 (_t213A, _t2143);
      real _t2145 = 0.4e1;
      real _t2146 = prim *0034 (_t2145, y20B0);
      real _t2147 = prim *0034 (_t2146, z20B1);
      int _t2148 = 2;
      real _t2149 = prim ^0068 (x20AF, _t2148);
      int _t214A = 2;
      real _t214B = prim ^0068 (y20B0, _t214A);
      real _t214C = prim +0017<$[]> (_t2149, _t214B);
      int _t214D = 2;
      real _t214E = prim ^0068 (z20B1, _t214D);
      real _t214F = prim +0017<$[]> (_t214C, _t214E);
      real _t2150 = prim cos0169 (_t214F);
      real _t2151 = prim *0034 (_t2147, _t2150);
      real _t2152 = prim +0017<$[]> (_t2144, _t2151);
      vec3 _t2153 = [_t2113, _t2134, _t2152];
      int _t2154 = -4;
      real _t2155 = (real)_t2154;
      real _t2156 = prim *0034 (_t2155, x20AF);
      int _t2157 = 3;
      real _t2158 = prim ^0068 (z20B1, _t2157);
      real _t2159 = prim *0034 (_t2156, _t2158);
      int _t215A = 2;
      real _t215B = prim ^0068 (x20AF, _t215A);
      int _t215C = 2;
      real _t215D = prim ^0068 (y20B0, _t215C);
      real _t215E = prim +0017<$[]> (_t215B, _t215D);
      int _t215F = 2;
      real _t2160 = prim ^0068 (z20B1, _t215F);
      real _t2161 = prim +0017<$[]> (_t215E, _t2160);
      real _t2162 = prim sin0171 (_t2161);
      real _t2163 = prim *0034 (_t2159, _t2162);
      real _t2164 = 0.4e1;
      real _t2165 = prim *0034 (_t2164, x20AF);
      real _t2166 = prim *0034 (_t2165, z20B1);
      int _t2167 = 2;
      real _t2168 = prim ^0068 (x20AF, _t2167);
      int _t2169 = 2;
      real _t216A = prim ^0068 (y20B0, _t2169);
      real _t216B = prim +0017<$[]> (_t2168, _t216A);
      int _t216C = 2;
      real _t216D = prim ^0068 (z20B1, _t216C);
      real _t216E = prim +0017<$[]> (_t216B, _t216D);
      real _t216F = prim cos0169 (_t216E);
      real _t2170 = prim *0034 (_t2166, _t216F);
      real _t2171 = prim +0017<$[]> (_t2163, _t2170);
      int _t2172 = -4;
      real _t2173 = (real)_t2172;
      real _t2174 = prim *0034 (_t2173, y20B0);
      int _t2175 = 3;
      real _t2176 = prim ^0068 (z20B1, _t2175);
      real _t2177 = prim *0034 (_t2174, _t2176);
      int _t2178 = 2;
      real _t2179 = prim ^0068 (x20AF, _t2178);
      int _t217A = 2;
      real _t217B = prim ^0068 (y20B0, _t217A);
      real _t217C = prim +0017<$[]> (_t2179, _t217B);
      int _t217D = 2;
      real _t217E = prim ^0068 (z20B1, _t217D);
      real _t217F = prim +0017<$[]> (_t217C, _t217E);
      real _t2180 = prim sin0171 (_t217F);
      real _t2181 = prim *0034 (_t2177, _t2180);
      real _t2182 = 0.4e1;
      real _t2183 = prim *0034 (_t2182, y20B0);
      real _t2184 = prim *0034 (_t2183, z20B1);
      int _t2185 = 2;
      real _t2186 = prim ^0068 (x20AF, _t2185);
      int _t2187 = 2;
      real _t2188 = prim ^0068 (y20B0, _t2187);
      real _t2189 = prim +0017<$[]> (_t2186, _t2188);
      int _t218A = 2;
      real _t218B = prim ^0068 (z20B1, _t218A);
      real _t218C = prim +0017<$[]> (_t2189, _t218B);
      real _t218D = prim cos0169 (_t218C);
      real _t218E = prim *0034 (_t2184, _t218D);
      real _t218F = prim +0017<$[]> (_t2181, _t218E);
      int _t2190 = -4;
      real _t2191 = (real)_t2190;
      int _t2192 = 4;
      real _t2193 = prim ^0068 (z20B1, _t2192);
      real _t2194 = prim *0034 (_t2191, _t2193);
      int _t2195 = 2;
      real _t2196 = prim ^0068 (x20AF, _t2195);
      int _t2197 = 2;
      real _t2198 = prim ^0068 (y20B0, _t2197);
      real _t2199 = prim +0017<$[]> (_t2196, _t2198);
      int _t219A = 2;
      real _t219B = prim ^0068 (z20B1, _t219A);
      real _t219C = prim +0017<$[]> (_t2199, _t219B);
      real _t219D = prim sin0171 (_t219C);
      real _t219E = prim *0034 (_t2194, _t219D);
      real _t219F = 0.1e2;
      int _t21A0 = 2;
      real _t21A1 = prim ^0068 (z20B1, _t21A0);
      real _t21A2 = prim *0034 (_t219F, _t21A1);
      int _t21A3 = 2;
      real _t21A4 = prim ^0068 (x20AF, _t21A3);
      int _t21A5 = 2;
      real _t21A6 = prim ^0068 (y20B0, _t21A5);
      real _t21A7 = prim +0017<$[]> (_t21A4, _t21A6);
      int _t21A8 = 2;
      real _t21A9 = prim ^0068 (z20B1, _t21A8);
      real _t21AA = prim +0017<$[]> (_t21A7, _t21A9);
      real _t21AB = prim cos0169 (_t21AA);
      real _t21AC = prim *0034 (_t21A2, _t21AB);
      real _t21AD = prim +0017<$[]> (_t219E, _t21AC);
      real _t21AE = 0.2e1;
      int _t21AF = 2;
      real _t21B0 = prim ^0068 (x20AF, _t21AF);
      int _t21B1 = 2;
      real _t21B2 = prim ^0068 (y20B0, _t21B1);
      real _t21B3 = prim +0017<$[]> (_t21B0, _t21B2);
      int _t21B4 = 2;
      real _t21B5 = prim ^0068 (z20B1, _t21B4);
      real _t21B6 = prim +0017<$[]> (_t21B3, _t21B5);
      real _t21B7 = prim sin0171 (_t21B6);
      real _t21B8 = prim *0034 (_t21AE, _t21B7);
      real _t21B9 = prim +0017<$[]> (_t21AD, _t21B8);
      vec3 _t21BA = [_t2171, _t218F, _t21B9];
      tensor[3,3] hess21BB = [_t2102, _t2153, _t21BA];
      H20AE = hess21BB;
      real[3] _t21BC = prim evals009F (H20AE);
      int _t21BD = 2;
      real _t21BE = prim $sub01C0<real; %3> (_t21BC, _t21BD);
      real _t21BF = prim unary -008B<$[]> (_t21BE);
      real _t21C0 = prim |()|00B5<$[3]> (g2070);
      real _t21C1 = prim +0017<$[]> (fBias07CC, _t21C0);
      real str21C2 = prim /0055 (_t21BF, _t21C1);
      _t206F = str21C2;
      bool _t21C3 = prim >0080 (_t206F, fStrTh07CA);
      if _t21C3 {
        bool _t21C4;
        real _t21C5;
        real _t21C6 = 0.e0;
        _t21C5 = _t21C6;
        bool _t21C7 = prim >=007E (_t21C5, fMaskTh07CB);
        if _t21C7 {
          bool _t21C8 = true;
          _t21C4 = _t21C8;
        } else {
          _t21C4 = false;
        }
        _t206E = _t21C4;
      } else {
        _t206E = false;
      }
      _t2053 = _t206E;
    } else {
      _t2053 = false;
    }
    _t13B1 = _t2053;
    bool _t13B2 = prim !00BC (_t13B1);
    if _t13B2 {
      bool _t13B3;
      bool _t13B4;
      int _t13B5 = 0;
      bool _t13B6 = prim >007F (verb07DA, _t13B5);
      if _t13B6 {
        _t13B4 = vv13A7;
      } else {
        _t13B4 = false;
      }
      if _t13B4 {
        _t13B3 = true;
      } else {
        int _t13B7 = 1;
        _t13B3 = prim >007F (verb07DA, _t13B7);
      }
      if _t13B3 {
        string _t13B8 = "(i#";
        string _t13B9 = " @ ";
        string _t13BA = "): ";
        print (ID139A, _t13B8, iter1359, _t13B9, pos1398, _t13BA);
        string _t13BB = "!inside=";
        bool _t13BC;
        real _t203A = 0.e0;
        real _t203B = 0.e0;
        real _t203C = 0.e0;
        vec3 _t203D = [_t203A, _t203B, _t203C];
        vec3 mid203E = prim -0026<$[3]> (pos1398, _t203D);
        bool _t204D;
        real _t204E = prim |()|00B5<$[3]> (mid203E);
        real _t204F = 0.4e1;
        bool _t2050 = prim <007A (_t204E, _t204F);
        if _t2050 {
          real _t2051 = prim |()|00B5<$[3]> (mid203E);
          real _t2052 = 0.3e1;
          _t204D = prim >0080 (_t2051, _t2052);
        } else {
          _t204D = false;
        }
        _t13BC = _t204D;
        string _t13BD = " || fStrength=";
        real _t13BE;
        vec3 g1EE7;
        real x1EE8 = pos1398[0];
        real y1EE9 = pos1398[1];
        real z1EEA = pos1398[2];
        real _t1EEB = 0.2e1;
        real _t1EEC = prim *0034 (_t1EEB, x1EE8);
        int _t1EED = 2;
        real _t1EEE = prim ^0068 (z1EEA, _t1EED);
        real _t1EEF = prim *0034 (_t1EEC, _t1EEE);
        int _t1EF0 = 2;
        real _t1EF1 = prim ^0068 (x1EE8, _t1EF0);
        int _t1EF2 = 2;
        real _t1EF3 = prim ^0068 (y1EE9, _t1EF2);
        real _t1EF4 = prim +0017<$[]> (_t1EF1, _t1EF3);
        int _t1EF5 = 2;
        real _t1EF6 = prim ^0068 (z1EEA, _t1EF5);
        real _t1EF7 = prim +0017<$[]> (_t1EF4, _t1EF6);
        real _t1EF8 = prim cos0169 (_t1EF7);
        real _t1EF9 = prim *0034 (_t1EEF, _t1EF8);
        real _t1EFA = 0.2e1;
        real _t1EFB = prim *0034 (_t1EFA, y1EE9);
        int _t1EFC = 2;
        real _t1EFD = prim ^0068 (z1EEA, _t1EFC);
        real _t1EFE = prim *0034 (_t1EFB, _t1EFD);
        int _t1EFF = 2;
        real _t1F00 = prim ^0068 (x1EE8, _t1EFF);
        int _t1F01 = 2;
        real _t1F02 = prim ^0068 (y1EE9, _t1F01);
        real _t1F03 = prim +0017<$[]> (_t1F00, _t1F02);
        int _t1F04 = 2;
        real _t1F05 = prim ^0068 (z1EEA, _t1F04);
        real _t1F06 = prim +0017<$[]> (_t1F03, _t1F05);
        real _t1F07 = prim cos0169 (_t1F06);
        real _t1F08 = prim *0034 (_t1EFE, _t1F07);
        real _t1F09 = 0.2e1;
        int _t1F0A = 3;
        real _t1F0B = prim ^0068 (z1EEA, _t1F0A);
        real _t1F0C = prim *0034 (_t1F09, _t1F0B);
        int _t1F0D = 2;
        real _t1F0E = prim ^0068 (x1EE8, _t1F0D);
        int _t1F0F = 2;
        real _t1F10 = prim ^0068 (y1EE9, _t1F0F);
        real _t1F11 = prim +0017<$[]> (_t1F0E, _t1F10);
        int _t1F12 = 2;
        real _t1F13 = prim ^0068 (z1EEA, _t1F12);
        real _t1F14 = prim +0017<$[]> (_t1F11, _t1F13);
        real _t1F15 = prim cos0169 (_t1F14);
        real _t1F16 = prim *0034 (_t1F0C, _t1F15);
        real _t1F17 = 0.2e1;
        real _t1F18 = prim *0034 (_t1F17, z1EEA);
        int _t1F19 = 2;
        real _t1F1A = prim ^0068 (x1EE8, _t1F19);
        int _t1F1B = 2;
        real _t1F1C = prim ^0068 (y1EE9, _t1F1B);
        real _t1F1D = prim +0017<$[]> (_t1F1A, _t1F1C);
        int _t1F1E = 2;
        real _t1F1F = prim ^0068 (z1EEA, _t1F1E);
        real _t1F20 = prim +0017<$[]> (_t1F1D, _t1F1F);
        real _t1F21 = prim sin0171 (_t1F20);
        real _t1F22 = prim *0034 (_t1F18, _t1F21);
        real _t1F23 = prim +0017<$[]> (_t1F16, _t1F22);
        vec3 g1F24 = [_t1EF9, _t1F08, _t1F23];
        g1EE7 = g1F24;
        tensor[3,3] H1F25;
        real x1F26 = pos1398[0];
        real y1F27 = pos1398[1];
        real z1F28 = pos1398[2];
        int _t1F29 = -4;
        real _t1F2A = (real)_t1F29;
        int _t1F2B = 2;
        real _t1F2C = prim ^0068 (x1F26, _t1F2B);
        real _t1F2D = prim *0034 (_t1F2A, _t1F2C);
        int _t1F2E = 2;
        real _t1F2F = prim ^0068 (z1F28, _t1F2E);
        real _t1F30 = prim *0034 (_t1F2D, _t1F2F);
        int _t1F31 = 2;
        real _t1F32 = prim ^0068 (x1F26, _t1F31);
        int _t1F33 = 2;
        real _t1F34 = prim ^0068 (y1F27, _t1F33);
        real _t1F35 = prim +0017<$[]> (_t1F32, _t1F34);
        int _t1F36 = 2;
        real _t1F37 = prim ^0068 (z1F28, _t1F36);
        real _t1F38 = prim +0017<$[]> (_t1F35, _t1F37);
        real _t1F39 = prim sin0171 (_t1F38);
        real _t1F3A = prim *0034 (_t1F30, _t1F39);
        real _t1F3B = 0.2e1;
        int _t1F3C = 2;
        real _t1F3D = prim ^0068 (z1F28, _t1F3C);
        real _t1F3E = prim *0034 (_t1F3B, _t1F3D);
        int _t1F3F = 2;
        real _t1F40 = prim ^0068 (x1F26, _t1F3F);
        int _t1F41 = 2;
        real _t1F42 = prim ^0068 (y1F27, _t1F41);
        real _t1F43 = prim +0017<$[]> (_t1F40, _t1F42);
        int _t1F44 = 2;
        real _t1F45 = prim ^0068 (z1F28, _t1F44);
        real _t1F46 = prim +0017<$[]> (_t1F43, _t1F45);
        real _t1F47 = prim cos0169 (_t1F46);
        real _t1F48 = prim *0034 (_t1F3E, _t1F47);
        real _t1F49 = prim +0017<$[]> (_t1F3A, _t1F48);
        int _t1F4A = -4;
        real _t1F4B = (real)_t1F4A;
        real _t1F4C = prim *0034 (_t1F4B, x1F26);
        real _t1F4D = prim *0034 (_t1F4C, y1F27);
        int _t1F4E = 2;
        real _t1F4F = prim ^0068 (z1F28, _t1F4E);
        real _t1F50 = prim *0034 (_t1F4D, _t1F4F);
        int _t1F51 = 2;
        real _t1F52 = prim ^0068 (x1F26, _t1F51);
        int _t1F53 = 2;
        real _t1F54 = prim ^0068 (y1F27, _t1F53);
        real _t1F55 = prim +0017<$[]> (_t1F52, _t1F54);
        int _t1F56 = 2;
        real _t1F57 = prim ^0068 (z1F28, _t1F56);
        real _t1F58 = prim +0017<$[]> (_t1F55, _t1F57);
        real _t1F59 = prim sin0171 (_t1F58);
        real _t1F5A = prim *0034 (_t1F50, _t1F59);
        int _t1F5B = -4;
        real _t1F5C = (real)_t1F5B;
        real _t1F5D = prim *0034 (_t1F5C, x1F26);
        int _t1F5E = 3;
        real _t1F5F = prim ^0068 (z1F28, _t1F5E);
        real _t1F60 = prim *0034 (_t1F5D, _t1F5F);
        int _t1F61 = 2;
        real _t1F62 = prim ^0068 (x1F26, _t1F61);
        int _t1F63 = 2;
        real _t1F64 = prim ^0068 (y1F27, _t1F63);
        real _t1F65 = prim +0017<$[]> (_t1F62, _t1F64);
        int _t1F66 = 2;
        real _t1F67 = prim ^0068 (z1F28, _t1F66);
        real _t1F68 = prim +0017<$[]> (_t1F65, _t1F67);
        real _t1F69 = prim sin0171 (_t1F68);
        real _t1F6A = prim *0034 (_t1F60, _t1F69);
        real _t1F6B = 0.4e1;
        real _t1F6C = prim *0034 (_t1F6B, x1F26);
        real _t1F6D = prim *0034 (_t1F6C, z1F28);
        int _t1F6E = 2;
        real _t1F6F = prim ^0068 (x1F26, _t1F6E);
        int _t1F70 = 2;
        real _t1F71 = prim ^0068 (y1F27, _t1F70);
        real _t1F72 = prim +0017<$[]> (_t1F6F, _t1F71);
        int _t1F73 = 2;
        real _t1F74 = prim ^0068 (z1F28, _t1F73);
        real _t1F75 = prim +0017<$[]> (_t1F72, _t1F74);
        real _t1F76 = prim cos0169 (_t1F75);
        real _t1F77 = prim *0034 (_t1F6D, _t1F76);
        real _t1F78 = prim +0017<$[]> (_t1F6A, _t1F77);
        vec3 _t1F79 = [_t1F49, _t1F5A, _t1F78];
        int _t1F7A = -4;
        real _t1F7B = (real)_t1F7A;
        real _t1F7C = prim *0034 (_t1F7B, x1F26);
        real _t1F7D = prim *0034 (_t1F7C, y1F27);
        int _t1F7E = 2;
        real _t1F7F = prim ^0068 (z1F28, _t1F7E);
        real _t1F80 = prim *0034 (_t1F7D, _t1F7F);
        int _t1F81 = 2;
        real _t1F82 = prim ^0068 (x1F26, _t1F81);
        int _t1F83 = 2;
        real _t1F84 = prim ^0068 (y1F27, _t1F83);
        real _t1F85 = prim +0017<$[]> (_t1F82, _t1F84);
        int _t1F86 = 2;
        real _t1F87 = prim ^0068 (z1F28, _t1F86);
        real _t1F88 = prim +0017<$[]> (_t1F85, _t1F87);
        real _t1F89 = prim sin0171 (_t1F88);
        real _t1F8A = prim *0034 (_t1F80, _t1F89);
        int _t1F8B = -4;
        real _t1F8C = (real)_t1F8B;
        int _t1F8D = 2;
        real _t1F8E = prim ^0068 (y1F27, _t1F8D);
        real _t1F8F = prim *0034 (_t1F8C, _t1F8E);
        int _t1F90 = 2;
        real _t1F91 = prim ^0068 (z1F28, _t1F90);
        real _t1F92 = prim *0034 (_t1F8F, _t1F91);
        int _t1F93 = 2;
        real _t1F94 = prim ^0068 (x1F26, _t1F93);
        int _t1F95 = 2;
        real _t1F96 = prim ^0068 (y1F27, _t1F95);
        real _t1F97 = prim +0017<$[]> (_t1F94, _t1F96);
        int _t1F98 = 2;
        real _t1F99 = prim ^0068 (z1F28, _t1F98);
        real _t1F9A = prim +0017<$[]> (_t1F97, _t1F99);
        real _t1F9B = prim sin0171 (_t1F9A);
        real _t1F9C = prim *0034 (_t1F92, _t1F9B);
        real _t1F9D = 0.2e1;
        int _t1F9E = 2;
        real _t1F9F = prim ^0068 (z1F28, _t1F9E);
        real _t1FA0 = prim *0034 (_t1F9D, _t1F9F);
        int _t1FA1 = 2;
        real _t1FA2 = prim ^0068 (x1F26, _t1FA1);
        int _t1FA3 = 2;
        real _t1FA4 = prim ^0068 (y1F27, _t1FA3);
        real _t1FA5 = prim +0017<$[]> (_t1FA2, _t1FA4);
        int _t1FA6 = 2;
        real _t1FA7 = prim ^0068 (z1F28, _t1FA6);
        real _t1FA8 = prim +0017<$[]> (_t1FA5, _t1FA7);
        real _t1FA9 = prim cos0169 (_t1FA8);
        real _t1FAA = prim *0034 (_t1FA0, _t1FA9);
        real _t1FAB = prim +0017<$[]> (_t1F9C, _t1FAA);
        int _t1FAC = -4;
        real _t1FAD = (real)_t1FAC;
        real _t1FAE = prim *0034 (_t1FAD, y1F27);
        int _t1FAF = 3;
        real _t1FB0 = prim ^0068 (z1F28, _t1FAF);
        real _t1FB1 = prim *0034 (_t1FAE, _t1FB0);
        int _t1FB2 = 2;
        real _t1FB3 = prim ^0068 (x1F26, _t1FB2);
        int _t1FB4 = 2;
        real _t1FB5 = prim ^0068 (y1F27, _t1FB4);
        real _t1FB6 = prim +0017<$[]> (_t1FB3, _t1FB5);
        int _t1FB7 = 2;
        real _t1FB8 = prim ^0068 (z1F28, _t1FB7);
        real _t1FB9 = prim +0017<$[]> (_t1FB6, _t1FB8);
        real _t1FBA = prim sin0171 (_t1FB9);
        real _t1FBB = prim *0034 (_t1FB1, _t1FBA);
        real _t1FBC = 0.4e1;
        real _t1FBD = prim *0034 (_t1FBC, y1F27);
        real _t1FBE = prim *0034 (_t1FBD, z1F28);
        int _t1FBF = 2;
        real _t1FC0 = prim ^0068 (x1F26, _t1FBF);
        int _t1FC1 = 2;
        real _t1FC2 = prim ^0068 (y1F27, _t1FC1);
        real _t1FC3 = prim +0017<$[]> (_t1FC0, _t1FC2);
        int _t1FC4 = 2;
        real _t1FC5 = prim ^0068 (z1F28, _t1FC4);
        real _t1FC6 = prim +0017<$[]> (_t1FC3, _t1FC5);
        real _t1FC7 = prim cos0169 (_t1FC6);
        real _t1FC8 = prim *0034 (_t1FBE, _t1FC7);
        real _t1FC9 = prim +0017<$[]> (_t1FBB, _t1FC8);
        vec3 _t1FCA = [_t1F8A, _t1FAB, _t1FC9];
        int _t1FCB = -4;
        real _t1FCC = (real)_t1FCB;
        real _t1FCD = prim *0034 (_t1FCC, x1F26);
        int _t1FCE = 3;
        real _t1FCF = prim ^0068 (z1F28, _t1FCE);
        real _t1FD0 = prim *0034 (_t1FCD, _t1FCF);
        int _t1FD1 = 2;
        real _t1FD2 = prim ^0068 (x1F26, _t1FD1);
        int _t1FD3 = 2;
        real _t1FD4 = prim ^0068 (y1F27, _t1FD3);
        real _t1FD5 = prim +0017<$[]> (_t1FD2, _t1FD4);
        int _t1FD6 = 2;
        real _t1FD7 = prim ^0068 (z1F28, _t1FD6);
        real _t1FD8 = prim +0017<$[]> (_t1FD5, _t1FD7);
        real _t1FD9 = prim sin0171 (_t1FD8);
        real _t1FDA = prim *0034 (_t1FD0, _t1FD9);
        real _t1FDB = 0.4e1;
        real _t1FDC = prim *0034 (_t1FDB, x1F26);
        real _t1FDD = prim *0034 (_t1FDC, z1F28);
        int _t1FDE = 2;
        real _t1FDF = prim ^0068 (x1F26, _t1FDE);
        int _t1FE0 = 2;
        real _t1FE1 = prim ^0068 (y1F27, _t1FE0);
        real _t1FE2 = prim +0017<$[]> (_t1FDF, _t1FE1);
        int _t1FE3 = 2;
        real _t1FE4 = prim ^0068 (z1F28, _t1FE3);
        real _t1FE5 = prim +0017<$[]> (_t1FE2, _t1FE4);
        real _t1FE6 = prim cos0169 (_t1FE5);
        real _t1FE7 = prim *0034 (_t1FDD, _t1FE6);
        real _t1FE8 = prim +0017<$[]> (_t1FDA, _t1FE7);
        int _t1FE9 = -4;
        real _t1FEA = (real)_t1FE9;
        real _t1FEB = prim *0034 (_t1FEA, y1F27);
        int _t1FEC = 3;
        real _t1FED = prim ^0068 (z1F28, _t1FEC);
        real _t1FEE = prim *0034 (_t1FEB, _t1FED);
        int _t1FEF = 2;
        real _t1FF0 = prim ^0068 (x1F26, _t1FEF);
        int _t1FF1 = 2;
        real _t1FF2 = prim ^0068 (y1F27, _t1FF1);
        real _t1FF3 = prim +0017<$[]> (_t1FF0, _t1FF2);
        int _t1FF4 = 2;
        real _t1FF5 = prim ^0068 (z1F28, _t1FF4);
        real _t1FF6 = prim +0017<$[]> (_t1FF3, _t1FF5);
        real _t1FF7 = prim sin0171 (_t1FF6);
        real _t1FF8 = prim *0034 (_t1FEE, _t1FF7);
        real _t1FF9 = 0.4e1;
        real _t1FFA = prim *0034 (_t1FF9, y1F27);
        real _t1FFB = prim *0034 (_t1FFA, z1F28);
        int _t1FFC = 2;
        real _t1FFD = prim ^0068 (x1F26, _t1FFC);
        int _t1FFE = 2;
        real _t1FFF = prim ^0068 (y1F27, _t1FFE);
        real _t2000 = prim +0017<$[]> (_t1FFD, _t1FFF);
        int _t2001 = 2;
        real _t2002 = prim ^0068 (z1F28, _t2001);
        real _t2003 = prim +0017<$[]> (_t2000, _t2002);
        real _t2004 = prim cos0169 (_t2003);
        real _t2005 = prim *0034 (_t1FFB, _t2004);
        real _t2006 = prim +0017<$[]> (_t1FF8, _t2005);
        int _t2007 = -4;
        real _t2008 = (real)_t2007;
        int _t2009 = 4;
        real _t200A = prim ^0068 (z1F28, _t2009);
        real _t200B = prim *0034 (_t2008, _t200A);
        int _t200C = 2;
        real _t200D = prim ^0068 (x1F26, _t200C);
        int _t200E = 2;
        real _t200F = prim ^0068 (y1F27, _t200E);
        real _t2010 = prim +0017<$[]> (_t200D, _t200F);
        int _t2011 = 2;
        real _t2012 = prim ^0068 (z1F28, _t2011);
        real _t2013 = prim +0017<$[]> (_t2010, _t2012);
        real _t2014 = prim sin0171 (_t2013);
        real _t2015 = prim *0034 (_t200B, _t2014);
        real _t2016 = 0.1e2;
        int _t2017 = 2;
        real _t2018 = prim ^0068 (z1F28, _t2017);
        real _t2019 = prim *0034 (_t2016, _t2018);
        int _t201A = 2;
        real _t201B = prim ^0068 (x1F26, _t201A);
        int _t201C = 2;
        real _t201D = prim ^0068 (y1F27, _t201C);
        real _t201E = prim +0017<$[]> (_t201B, _t201D);
        int _t201F = 2;
        real _t2020 = prim ^0068 (z1F28, _t201F);
        real _t2021 = prim +0017<$[]> (_t201E, _t2020);
        real _t2022 = prim cos0169 (_t2021);
        real _t2023 = prim *0034 (_t2019, _t2022);
        real _t2024 = prim +0017<$[]> (_t2015, _t2023);
        real _t2025 = 0.2e1;
        int _t2026 = 2;
        real _t2027 = prim ^0068 (x1F26, _t2026);
        int _t2028 = 2;
        real _t2029 = prim ^0068 (y1F27, _t2028);
        real _t202A = prim +0017<$[]> (_t2027, _t2029);
        int _t202B = 2;
        real _t202C = prim ^0068 (z1F28, _t202B);
        real _t202D = prim +0017<$[]> (_t202A, _t202C);
        real _t202E = prim sin0171 (_t202D);
        real _t202F = prim *0034 (_t2025, _t202E);
        real _t2030 = prim +0017<$[]> (_t2024, _t202F);
        vec3 _t2031 = [_t1FE8, _t2006, _t2030];
        tensor[3,3] hess2032 = [_t1F79, _t1FCA, _t2031];
        H1F25 = hess2032;
        real[3] _t2033 = prim evals009F (H1F25);
        int _t2034 = 2;
        real _t2035 = prim $sub01C0<real; %3> (_t2033, _t2034);
        real _t2036 = prim unary -008B<$[]> (_t2035);
        real _t2037 = prim |()|00B5<$[3]> (g1EE7);
        real _t2038 = prim +0017<$[]> (fBias07CC, _t2037);
        real str2039 = prim /0055 (_t2036, _t2038);
        _t13BE = str2039;
        string _t13BF = " <= fStrTh=";
        string _t13C0 = " || fMask(pos)=";
        real _t13C1;
        real _t1EE6 = 0.e0;
        _t13C1 = _t1EE6;
        string _t13C2 = " < fMaskTh=";
        string _t13C3 = " || fTest(pos)=";
        bool _t13C4;
        bool _t1EE5 = true;
        _t13C4 = _t1EE5;
        string _t13C5 = " ==>DIE\n";
        print (_t13BB, _t13BC, _t13BD, _t13BE, _t13BF, fStrTh07CA, _t13C0, _t13C1, _t13C2, fMaskTh07CB, _t13C3, _t13C4, _t13C5);
      }
      die;
    }
    real _t13C6 = 0.e0;
    bool _t13C7 = prim >0080 (travMax07CF, _t13C6);
    if _t13C7 {
      bool _t13C8 = prim >0080 (trav13A2, travMax07CF);
      if _t13C8 {
        die;
      }
    }
    bool _t13C9 = prim !00BC (found13A0);
    if _t13C9 {
      int _t13CA = 0;
      bool _t13CB = prim >007F (nfsMax07D0, _t13CA);
      if _t13CB {
        bool _t13CC = prim >007F (nfs13A1, nfsMax07D0);
        if _t13CC {
          bool _t13CD;
          bool _t13CE;
          int _t13CF = 0;
          bool _t13D0 = prim >007F (verb07DA, _t13CF);
          if _t13D0 {
            _t13CE = vv13A7;
          } else {
            _t13CE = false;
          }
          if _t13CE {
            _t13CD = true;
          } else {
            int _t13D1 = 1;
            _t13CD = prim >007F (verb07DA, _t13D1);
          }
          if _t13CD {
            string _t13D2 = "(i#";
            string _t13D3 = " @ ";
            string _t13D4 = "): ";
            print (ID139A, _t13D2, iter1359, _t13D3, pos1398, _t13D4);
            string _t13D5 = "nfs=";
            string _t13D6 = " > nfsMax=";
            string _t13D7 = " || trav=";
            string _t13D8 = " > travMax=";
            string _t13D9 = " =>DIE\n";
            print (_t13D5, nfs13A1, _t13D6, nfsMax07D0, _t13D7, trav13A2, _t13D8, travMax07CF, _t13D9);
          }
          die;
        }
      }
      vec3 _t13DA = func fStep128C (pos1398);
      step139C = prim *0036<$[3]> (sfs07DB, _t13DA);
      pos1398 = prim +0017<$[3]> (pos1398, step139C);
      _pos1399 = pos1398;
      real _t13DB = prim |()|00B5<$[3]> (step139C);
      real _t13DC = prim /0055 (_t13DB, tipd07CD);
      mvmt13A3 = prim lerp0096<$[]> (_t13DC, mvmt13A3, hist07DC);
      bool _t13DD = prim >0080 (mvmt13A3, fsEps07D4);
      if _t13DD {
        real _t13DE = prim |()|00B5<$[3]> (step139C);
        real _t13DF = prim /0055 (_t13DE, tipd07CD);
        trav13A2 = prim +0017<$[]> (trav13A2, _t13DF);
        int _t13E0 = 1;
        nfs13A1 = prim +0015 (nfs13A1, _t13E0);
      } else {
        found13A0 = true;
        mvmt13A3 = 0.1e1;
        trav13A2 = 0.e0;
      }
      bool _t13E1;
      bool _t13E2;
      int _t13E3 = 0;
      bool _t13E4 = prim >007F (verb07DA, _t13E3);
      if _t13E4 {
        _t13E2 = vv13A7;
      } else {
        _t13E2 = false;
      }
      if _t13E2 {
        _t13E1 = true;
      } else {
        int _t13E5 = 1;
        _t13E1 = prim >007F (verb07DA, _t13E5);
      }
      if _t13E1 {
        string _t13E6 = "(i#";
        string _t13E7 = " @ ";
        string _t13E8 = "): ";
        print (ID139A, _t13E6, iter1359, _t13E7, pos1398, _t13E8);
        string _t13E9 = "step=";
        string _t13EA = "; mvmt=";
        string _t13EB = " => found=";
        string _t13EC = "\n";
        print (_t13E9, step139C, _t13EA, mvmt13A3, _t13EB, found13A0, _t13EC);
      }
    } else {
      int _t13ED = 0;
      bool _t13EE = prim ==0082 (_t13ED, fDim07DF);
      if _t13EE {
        stabilize;
      }
      vec3 _t13EF = func fStep128C (pos1398);
      step139C = prim *0036<$[3]> (sfs07DB, _t13EF);
      pos1398 = prim +0017<$[3]> (pos1398, step139C);
      _pos1399 = pos1398;
      real _t13F0 = prim |()|00B5<$[3]> (step139C);
      real _t13F1 = prim /0055 (_t13F0, tipd07CD);
      trav13A2 = prim +0017<$[]> (trav13A2, _t13F1);
      real oldE13F2 = 0.e0;
      real _t13F3 = 0.e0;
      real _t13F4 = 0.e0;
      real _t13F5 = 0.e0;
      vec3 force13F6 = [_t13F3, _t13F4, _t13F5];
      int nn13F7 = 0;
      point[] _t13F8 = prim sphere0198<point> (_pos1399, rad1342);
      foreach P13F9 in _t13F8 {
        vec3 _t13FA = P13F9.pos1398;
        vec3 off13FB = prim -0026<$[3]> (_t13FA, pos1398);
        real _t13FC = prim |()|00B5<$[3]> (off13FB);
        real _t13FD = prim /0055 (_t13FC, tipd07CD);
        bool _t13FE = prim <007A (_t13FD, fsEps07D4);
        if _t13FE {
          real _t13FF = P13F9.ID139A;
          bool _t1400 = prim <=007C (ID139A, _t13FF);
          if _t1400 {
            die;
          }
        }
        real _t1407;
        real _t1EBD = prim |()|00B5<$[3]> (off13FB);
        real _t1EBE = prim /0055 (_t1EBD, rad1342);
        real _t1EBF;
        real _t1EC0 = 0.2e1;
        real _t1EC1 = 0.3e1;
        real _t1EC2 = prim /0055 (_t1EC0, _t1EC1);
        real s1EC3 = prim -0026<$[]> (_t1EBE, _t1EC2);
        real _t1EC4;
        real _t1EC5 = 0.2e1;
        real _t1EC6 = 0.3e1;
        real _t1EC7 = prim /0055 (_t1EC5, _t1EC6);
        bool _t1EC8 = prim <007A (_t1EBE, _t1EC7);
        if _t1EC8 {
          real _t1EC9 = 0.1e1;
          real _t1ECA = -0.5646e1;
          real _t1ECB = 0.119835e2;
          real _t1ECC = -0.113535e2;
          real _t1ECD = 0.40550625e1;
          real _t1ECE = prim *0034 (_t1ECD, _t1EBE);
          real _t1ECF = prim +0017<$[]> (_t1ECC, _t1ECE);
          real _t1ED0 = prim *0034 (_t1EBE, _t1ECF);
          real _t1ED1 = prim +0017<$[]> (_t1ECB, _t1ED0);
          real _t1ED2 = prim *0034 (_t1EBE, _t1ED1);
          real _t1ED3 = prim +0017<$[]> (_t1ECA, _t1ED2);
          real _t1ED4 = prim *0034 (_t1EBE, _t1ED3);
          _t1EC4 = prim +0017<$[]> (_t1EC9, _t1ED4);
        } else {
          real _t1ED5;
          real _t1ED6 = 0.1e1;
          bool _t1ED7 = prim <007A (_t1EBE, _t1ED6);
          if _t1ED7 {
            real _t1ED8 = -0.1e-2;
            real _t1ED9 = 0.9e-1;
            real _t1EDA = -0.54e0;
            real _t1EDB = 0.1215e1;
            real _t1EDC = 0.972e0;
            real _t1EDD = prim *0034 (_t1EDC, s1EC3);
            real _t1EDE = prim -0026<$[]> (_t1EDB, _t1EDD);
            real _t1EDF = prim *0034 (_t1EDE, s1EC3);
            real _t1EE0 = prim +0017<$[]> (_t1EDA, _t1EDF);
            real _t1EE1 = prim *0034 (_t1EE0, s1EC3);
            real _t1EE2 = prim +0017<$[]> (_t1ED9, _t1EE1);
            real _t1EE3 = prim *0034 (_t1EE2, s1EC3);
            real _t1EE4 = prim *0034 (_t1EE3, s1EC3);
            _t1ED5 = prim +0017<$[]> (_t1ED8, _t1EE4);
          } else {
            _t1ED5 = 0.e0;
          }
          _t1EC4 = _t1ED5;
        }
        _t1EBF = _t1EC4;
        _t1407 = _t1EBF;
        oldE13F2 = prim +0017<$[]> (oldE13F2, _t1407);
        vec3 _t1408;
        real _t1E93 = prim |()|00B5<$[3]> (off13FB);
        real _t1E94 = prim /0055 (_t1E93, rad1342);
        real _t1E95;
        real _t1E96 = 0.3e1;
        real _t1E97 = prim *0034 (_t1E96, _t1E94);
        real _t1E98 = 0.2e1;
        real t1E99 = prim -0026<$[]> (_t1E97, _t1E98);
        real _t1E9A;
        real _t1E9B = 0.2e1;
        real _t1E9C = 0.3e1;
        real _t1E9D = prim /0055 (_t1E9B, _t1E9C);
        bool _t1E9E = prim <007A (_t1E94, _t1E9D);
        if _t1E9E {
          real _t1E9F = -0.5646e1;
          real _t1EA0 = 0.23967e2;
          real _t1EA1 = -0.340605e2;
          real _t1EA2 = 0.1622025e2;
          real _t1EA3 = prim *0034 (_t1EA2, _t1E94);
          real _t1EA4 = prim +0017<$[]> (_t1EA1, _t1EA3);
          real _t1EA5 = prim *0034 (_t1E94, _t1EA4);
          real _t1EA6 = prim +0017<$[]> (_t1EA0, _t1EA5);
          real _t1EA7 = prim *0034 (_t1E94, _t1EA6);
          _t1E9A = prim +0017<$[]> (_t1E9F, _t1EA7);
        } else {
          real _t1EA8;
          real _t1EA9 = 0.1e1;
          bool _t1EAA = prim <007A (_t1E94, _t1EA9);
          if _t1EAA {
            real _t1EAB = 0.1234567901e-1;
            real _t1EAC = prim *0034 (_t1EAB, t1E99);
            real _t1EAD = 0.486e1;
            real _t1EAE = -0.1458e2;
            real _t1EAF = 0.1458e2;
            real _t1EB0 = 0.486e1;
            real _t1EB1 = prim *0034 (_t1EB0, t1E99);
            real _t1EB2 = prim -0026<$[]> (_t1EAF, _t1EB1);
            real _t1EB3 = prim *0034 (t1E99, _t1EB2);
            real _t1EB4 = prim +0017<$[]> (_t1EAE, _t1EB3);
            real _t1EB5 = prim *0034 (t1E99, _t1EB4);
            real _t1EB6 = prim +0017<$[]> (_t1EAD, _t1EB5);
            _t1EA8 = prim *0034 (_t1EAC, _t1EB6);
          } else {
            _t1EA8 = 0.e0;
          }
          _t1E9A = _t1EA8;
        }
        _t1E95 = _t1E9A;
        real _t1EB7 = 0.1e1;
        real _t1EB8 = prim /0055 (_t1EB7, rad1342);
        real _t1EB9 = prim *0034 (_t1E95, _t1EB8);
        vec3 _t1EBA = prim *0036<$[3]> (_t1EB9, off13FB);
        real _t1EBB = prim |()|00B5<$[3]> (off13FB);
        vec3 _t1EBC = prim /0057<$[3]> (_t1EBA, _t1EBB);
        _t1408 = _t1EBC;
        force13F6 = prim +0017<$[3]> (force13F6, _t1408);
        int _t1409 = 1;
        nn13F7 = prim +0015 (nn13F7, _t1409);
      }
      int _t140A = 0;
      bool _t140B = prim ==0082 (_t140A, nn13F7);
      if _t140B {
        bool _t140C;
        int _t140D;
        bool _t1E83;
        int _t1E84 = 0;
        bool _t1E85 = prim >007F (pcp07DD, _t1E84);
        if _t1E85 {
          bool _t1E86;
          int _t1E87 = 0;
          bool _t1E88 = prim >007F (iter1359, _t1E87);
          if _t1E88 {
            int _t1E89 = 0;
            int _t1E8A = prim %00A1 (iter1359, pcp07DD);
            _t1E86 = prim ==0082 (_t1E89, _t1E8A);
          } else {
            _t1E86 = false;
          }
          _t1E83 = _t1E86;
        } else {
          _t1E83 = false;
        }
        if _t1E83 {
          int _t1E8B = prim /0054 (iter1359, pcp07DD);
          int _t1E8C = 2;
          int _t1E8D = prim %00A1 (_t1E8B, _t1E8C);
          int _t1E8E = 2;
          int _t1E8F = prim *0033 (_t1E8D, _t1E8E);
          int _t1E90 = 1;
          int _t1E91 = prim -0024 (_t1E8F, _t1E90);
          _t140D = _t1E91;
        } else {
          int _t1E92 = 0;
          _t140D = _t1E92;
        }
        int _t140E = 0;
        bool _t140F = prim >007F (_t140D, _t140E);
        if _t140F {
          _t140C = prim <0079 (born13A5, nnmax12F4);
        } else {
          _t140C = false;
        }
        bool _t1410 = prim !00BC (_t140C);
        if _t1410 {
          continue;
        }
        tensor[3,3] _t1411 = func fPerp12BE (pos1398);
        real _t1412 = 0.e0;
        real _t1413 = 0.e0;
        vec3 _t1414 = [tipd07CD, _t1412, _t1413];
        vec3 noff01415 = prim •00CE<$[3,3]; $[3]; $[3]> (_t1411, _t1414);
        tensor[3,3] _t1416 = func fPerp12BE (pos1398);
        real _t1417 = 0.e0;
        real _t1418 = 0.e0;
        vec3 _t1419 = [_t1417, tipd07CD, _t1418];
        vec3 noff1141A = prim •00CE<$[3,3]; $[3]; $[3]> (_t1416, _t1419);
        tensor[3,3] _t141B = func fPerp12BE (pos1398);
        real _t141C = 0.e0;
        real _t141D = 0.e0;
        vec3 _t141E = [_t141C, _t141D, tipd07CD];
        vec3 noff2141F = prim •00CE<$[3,3]; $[3]; $[3]> (_t141B, _t141E);
        vec3 noff1420 = noff01415;
        vec3 _t1421;
        real _t1422 = prim |()|00B5<$[3]> (noff1420);
        real _t1423 = prim |()|00B5<$[3]> (noff1141A);
        bool _t1424 = prim >0080 (_t1422, _t1423);
        if _t1424 {
          _t1421 = noff1420;
        } else {
          _t1421 = noff1141A;
        }
        noff1420 = _t1421;
        vec3 _t1425;
        real _t1426 = prim |()|00B5<$[3]> (noff1420);
        real _t1427 = prim |()|00B5<$[3]> (noff2141F);
        bool _t1428 = prim >0080 (_t1426, _t1427);
        if _t1428 {
          _t1425 = noff1420;
        } else {
          _t1425 = noff2141F;
        }
        noff1420 = _t1425;
        vec3 _t1429 = prim normalize0137<$[3]> (noff1420);
        vec3 _t142A = prim *0036<$[3]> (tipd07CD, _t1429);
        vec3 npos142B = prim +0017<$[3]> (_t142A, pos1398);
        vec3 _t142C = func fStep128C (npos142B);
        vec3 _t142D = prim *0036<$[3]> (sfs07DB, _t142C);
        npos142B = prim +0017<$[3]> (npos142B, _t142D);
        bool _t142E;
        bool _t142F;
        int _t1430 = 0;
        bool _t1431 = prim >007F (verb07DA, _t1430);
        if _t1431 {
          _t142F = vv13A7;
        } else {
          _t142F = false;
        }
        if _t142F {
          _t142E = true;
        } else {
          int _t1432 = 1;
          _t142E = prim >007F (verb07DA, _t1432);
        }
        if _t142E {
          string _t1433 = "(i#";
          string _t1434 = " @ ";
          string _t1435 = "): ";
          print (ID139A, _t1433, iter1359, _t1434, pos1398, _t1435);
          string _t1436 = " 0==nn =>NEW(";
          string _t1437 = ") w/ ID=";
          real _t1438;
          real _t1E75 = 0.1e7;
          real _t1E76;
          real _t1E77 = npos142B[0];
          real _t1E78 = func urnd135C (_t1E77);
          real _t1E79 = npos142B[1];
          real _t1E7A = func urnd135C (_t1E79);
          real _t1E7B = prim +0017<$[]> (_t1E78, _t1E7A);
          real _t1E7C = npos142B[2];
          real _t1E7D = func urnd135C (_t1E7C);
          real _t1E7E = prim +0017<$[]> (_t1E7B, _t1E7D);
          real _t1E7F = 0.1e1;
          real _t1E80 = prim fmod018A (_t1E7E, _t1E7F);
          _t1E76 = _t1E80;
          real _t1E81 = prim *0034 (_t1E75, _t1E76);
          real _t1E82 = prim floor0189 (_t1E81);
          _t1438 = _t1E82;
          string _t1439 = "\n";
          print (_t1436, npos142B, _t1437, _t1438, _t1439);
        }
        bool _t143A;
        bool _t1CFF;
        bool _t1D00;
        real _t1D01 = 0.e0;
        real _t1D02 = 0.e0;
        real _t1D03 = 0.e0;
        vec3 _t1D04 = [_t1D01, _t1D02, _t1D03];
        vec3 mid1D05 = prim -0026<$[3]> (pos1398, _t1D04);
        bool _t1D14;
        real _t1D15 = prim |()|00B5<$[3]> (mid1D05);
        real _t1D16 = 0.4e1;
        bool _t1D17 = prim <007A (_t1D15, _t1D16);
        if _t1D17 {
          real _t1D18 = prim |()|00B5<$[3]> (mid1D05);
          real _t1D19 = 0.3e1;
          _t1D14 = prim >0080 (_t1D18, _t1D19);
        } else {
          _t1D14 = false;
        }
        _t1D00 = _t1D14;
        if _t1D00 {
          bool _t1D1A;
          real _t1D1B;
          vec3 g1D1C;
          real x1D1D = pos1398[0];
          real y1D1E = pos1398[1];
          real z1D1F = pos1398[2];
          real _t1D20 = 0.2e1;
          real _t1D21 = prim *0034 (_t1D20, x1D1D);
          int _t1D22 = 2;
          real _t1D23 = prim ^0068 (z1D1F, _t1D22);
          real _t1D24 = prim *0034 (_t1D21, _t1D23);
          int _t1D25 = 2;
          real _t1D26 = prim ^0068 (x1D1D, _t1D25);
          int _t1D27 = 2;
          real _t1D28 = prim ^0068 (y1D1E, _t1D27);
          real _t1D29 = prim +0017<$[]> (_t1D26, _t1D28);
          int _t1D2A = 2;
          real _t1D2B = prim ^0068 (z1D1F, _t1D2A);
          real _t1D2C = prim +0017<$[]> (_t1D29, _t1D2B);
          real _t1D2D = prim cos0169 (_t1D2C);
          real _t1D2E = prim *0034 (_t1D24, _t1D2D);
          real _t1D2F = 0.2e1;
          real _t1D30 = prim *0034 (_t1D2F, y1D1E);
          int _t1D31 = 2;
          real _t1D32 = prim ^0068 (z1D1F, _t1D31);
          real _t1D33 = prim *0034 (_t1D30, _t1D32);
          int _t1D34 = 2;
          real _t1D35 = prim ^0068 (x1D1D, _t1D34);
          int _t1D36 = 2;
          real _t1D37 = prim ^0068 (y1D1E, _t1D36);
          real _t1D38 = prim +0017<$[]> (_t1D35, _t1D37);
          int _t1D39 = 2;
          real _t1D3A = prim ^0068 (z1D1F, _t1D39);
          real _t1D3B = prim +0017<$[]> (_t1D38, _t1D3A);
          real _t1D3C = prim cos0169 (_t1D3B);
          real _t1D3D = prim *0034 (_t1D33, _t1D3C);
          real _t1D3E = 0.2e1;
          int _t1D3F = 3;
          real _t1D40 = prim ^0068 (z1D1F, _t1D3F);
          real _t1D41 = prim *0034 (_t1D3E, _t1D40);
          int _t1D42 = 2;
          real _t1D43 = prim ^0068 (x1D1D, _t1D42);
          int _t1D44 = 2;
          real _t1D45 = prim ^0068 (y1D1E, _t1D44);
          real _t1D46 = prim +0017<$[]> (_t1D43, _t1D45);
          int _t1D47 = 2;
          real _t1D48 = prim ^0068 (z1D1F, _t1D47);
          real _t1D49 = prim +0017<$[]> (_t1D46, _t1D48);
          real _t1D4A = prim cos0169 (_t1D49);
          real _t1D4B = prim *0034 (_t1D41, _t1D4A);
          real _t1D4C = 0.2e1;
          real _t1D4D = prim *0034 (_t1D4C, z1D1F);
          int _t1D4E = 2;
          real _t1D4F = prim ^0068 (x1D1D, _t1D4E);
          int _t1D50 = 2;
          real _t1D51 = prim ^0068 (y1D1E, _t1D50);
          real _t1D52 = prim +0017<$[]> (_t1D4F, _t1D51);
          int _t1D53 = 2;
          real _t1D54 = prim ^0068 (z1D1F, _t1D53);
          real _t1D55 = prim +0017<$[]> (_t1D52, _t1D54);
          real _t1D56 = prim sin0171 (_t1D55);
          real _t1D57 = prim *0034 (_t1D4D, _t1D56);
          real _t1D58 = prim +0017<$[]> (_t1D4B, _t1D57);
          vec3 g1D59 = [_t1D2E, _t1D3D, _t1D58];
          g1D1C = g1D59;
          tensor[3,3] H1D5A;
          real x1D5B = pos1398[0];
          real y1D5C = pos1398[1];
          real z1D5D = pos1398[2];
          int _t1D5E = -4;
          real _t1D5F = (real)_t1D5E;
          int _t1D60 = 2;
          real _t1D61 = prim ^0068 (x1D5B, _t1D60);
          real _t1D62 = prim *0034 (_t1D5F, _t1D61);
          int _t1D63 = 2;
          real _t1D64 = prim ^0068 (z1D5D, _t1D63);
          real _t1D65 = prim *0034 (_t1D62, _t1D64);
          int _t1D66 = 2;
          real _t1D67 = prim ^0068 (x1D5B, _t1D66);
          int _t1D68 = 2;
          real _t1D69 = prim ^0068 (y1D5C, _t1D68);
          real _t1D6A = prim +0017<$[]> (_t1D67, _t1D69);
          int _t1D6B = 2;
          real _t1D6C = prim ^0068 (z1D5D, _t1D6B);
          real _t1D6D = prim +0017<$[]> (_t1D6A, _t1D6C);
          real _t1D6E = prim sin0171 (_t1D6D);
          real _t1D6F = prim *0034 (_t1D65, _t1D6E);
          real _t1D70 = 0.2e1;
          int _t1D71 = 2;
          real _t1D72 = prim ^0068 (z1D5D, _t1D71);
          real _t1D73 = prim *0034 (_t1D70, _t1D72);
          int _t1D74 = 2;
          real _t1D75 = prim ^0068 (x1D5B, _t1D74);
          int _t1D76 = 2;
          real _t1D77 = prim ^0068 (y1D5C, _t1D76);
          real _t1D78 = prim +0017<$[]> (_t1D75, _t1D77);
          int _t1D79 = 2;
          real _t1D7A = prim ^0068 (z1D5D, _t1D79);
          real _t1D7B = prim +0017<$[]> (_t1D78, _t1D7A);
          real _t1D7C = prim cos0169 (_t1D7B);
          real _t1D7D = prim *0034 (_t1D73, _t1D7C);
          real _t1D7E = prim +0017<$[]> (_t1D6F, _t1D7D);
          int _t1D7F = -4;
          real _t1D80 = (real)_t1D7F;
          real _t1D81 = prim *0034 (_t1D80, x1D5B);
          real _t1D82 = prim *0034 (_t1D81, y1D5C);
          int _t1D83 = 2;
          real _t1D84 = prim ^0068 (z1D5D, _t1D83);
          real _t1D85 = prim *0034 (_t1D82, _t1D84);
          int _t1D86 = 2;
          real _t1D87 = prim ^0068 (x1D5B, _t1D86);
          int _t1D88 = 2;
          real _t1D89 = prim ^0068 (y1D5C, _t1D88);
          real _t1D8A = prim +0017<$[]> (_t1D87, _t1D89);
          int _t1D8B = 2;
          real _t1D8C = prim ^0068 (z1D5D, _t1D8B);
          real _t1D8D = prim +0017<$[]> (_t1D8A, _t1D8C);
          real _t1D8E = prim sin0171 (_t1D8D);
          real _t1D8F = prim *0034 (_t1D85, _t1D8E);
          int _t1D90 = -4;
          real _t1D91 = (real)_t1D90;
          real _t1D92 = prim *0034 (_t1D91, x1D5B);
          int _t1D93 = 3;
          real _t1D94 = prim ^0068 (z1D5D, _t1D93);
          real _t1D95 = prim *0034 (_t1D92, _t1D94);
          int _t1D96 = 2;
          real _t1D97 = prim ^0068 (x1D5B, _t1D96);
          int _t1D98 = 2;
          real _t1D99 = prim ^0068 (y1D5C, _t1D98);
          real _t1D9A = prim +0017<$[]> (_t1D97, _t1D99);
          int _t1D9B = 2;
          real _t1D9C = prim ^0068 (z1D5D, _t1D9B);
          real _t1D9D = prim +0017<$[]> (_t1D9A, _t1D9C);
          real _t1D9E = prim sin0171 (_t1D9D);
          real _t1D9F = prim *0034 (_t1D95, _t1D9E);
          real _t1DA0 = 0.4e1;
          real _t1DA1 = prim *0034 (_t1DA0, x1D5B);
          real _t1DA2 = prim *0034 (_t1DA1, z1D5D);
          int _t1DA3 = 2;
          real _t1DA4 = prim ^0068 (x1D5B, _t1DA3);
          int _t1DA5 = 2;
          real _t1DA6 = prim ^0068 (y1D5C, _t1DA5);
          real _t1DA7 = prim +0017<$[]> (_t1DA4, _t1DA6);
          int _t1DA8 = 2;
          real _t1DA9 = prim ^0068 (z1D5D, _t1DA8);
          real _t1DAA = prim +0017<$[]> (_t1DA7, _t1DA9);
          real _t1DAB = prim cos0169 (_t1DAA);
          real _t1DAC = prim *0034 (_t1DA2, _t1DAB);
          real _t1DAD = prim +0017<$[]> (_t1D9F, _t1DAC);
          vec3 _t1DAE = [_t1D7E, _t1D8F, _t1DAD];
          int _t1DAF = -4;
          real _t1DB0 = (real)_t1DAF;
          real _t1DB1 = prim *0034 (_t1DB0, x1D5B);
          real _t1DB2 = prim *0034 (_t1DB1, y1D5C);
          int _t1DB3 = 2;
          real _t1DB4 = prim ^0068 (z1D5D, _t1DB3);
          real _t1DB5 = prim *0034 (_t1DB2, _t1DB4);
          int _t1DB6 = 2;
          real _t1DB7 = prim ^0068 (x1D5B, _t1DB6);
          int _t1DB8 = 2;
          real _t1DB9 = prim ^0068 (y1D5C, _t1DB8);
          real _t1DBA = prim +0017<$[]> (_t1DB7, _t1DB9);
          int _t1DBB = 2;
          real _t1DBC = prim ^0068 (z1D5D, _t1DBB);
          real _t1DBD = prim +0017<$[]> (_t1DBA, _t1DBC);
          real _t1DBE = prim sin0171 (_t1DBD);
          real _t1DBF = prim *0034 (_t1DB5, _t1DBE);
          int _t1DC0 = -4;
          real _t1DC1 = (real)_t1DC0;
          int _t1DC2 = 2;
          real _t1DC3 = prim ^0068 (y1D5C, _t1DC2);
          real _t1DC4 = prim *0034 (_t1DC1, _t1DC3);
          int _t1DC5 = 2;
          real _t1DC6 = prim ^0068 (z1D5D, _t1DC5);
          real _t1DC7 = prim *0034 (_t1DC4, _t1DC6);
          int _t1DC8 = 2;
          real _t1DC9 = prim ^0068 (x1D5B, _t1DC8);
          int _t1DCA = 2;
          real _t1DCB = prim ^0068 (y1D5C, _t1DCA);
          real _t1DCC = prim +0017<$[]> (_t1DC9, _t1DCB);
          int _t1DCD = 2;
          real _t1DCE = prim ^0068 (z1D5D, _t1DCD);
          real _t1DCF = prim +0017<$[]> (_t1DCC, _t1DCE);
          real _t1DD0 = prim sin0171 (_t1DCF);
          real _t1DD1 = prim *0034 (_t1DC7, _t1DD0);
          real _t1DD2 = 0.2e1;
          int _t1DD3 = 2;
          real _t1DD4 = prim ^0068 (z1D5D, _t1DD3);
          real _t1DD5 = prim *0034 (_t1DD2, _t1DD4);
          int _t1DD6 = 2;
          real _t1DD7 = prim ^0068 (x1D5B, _t1DD6);
          int _t1DD8 = 2;
          real _t1DD9 = prim ^0068 (y1D5C, _t1DD8);
          real _t1DDA = prim +0017<$[]> (_t1DD7, _t1DD9);
          int _t1DDB = 2;
          real _t1DDC = prim ^0068 (z1D5D, _t1DDB);
          real _t1DDD = prim +0017<$[]> (_t1DDA, _t1DDC);
          real _t1DDE = prim cos0169 (_t1DDD);
          real _t1DDF = prim *0034 (_t1DD5, _t1DDE);
          real _t1DE0 = prim +0017<$[]> (_t1DD1, _t1DDF);
          int _t1DE1 = -4;
          real _t1DE2 = (real)_t1DE1;
          real _t1DE3 = prim *0034 (_t1DE2, y1D5C);
          int _t1DE4 = 3;
          real _t1DE5 = prim ^0068 (z1D5D, _t1DE4);
          real _t1DE6 = prim *0034 (_t1DE3, _t1DE5);
          int _t1DE7 = 2;
          real _t1DE8 = prim ^0068 (x1D5B, _t1DE7);
          int _t1DE9 = 2;
          real _t1DEA = prim ^0068 (y1D5C, _t1DE9);
          real _t1DEB = prim +0017<$[]> (_t1DE8, _t1DEA);
          int _t1DEC = 2;
          real _t1DED = prim ^0068 (z1D5D, _t1DEC);
          real _t1DEE = prim +0017<$[]> (_t1DEB, _t1DED);
          real _t1DEF = prim sin0171 (_t1DEE);
          real _t1DF0 = prim *0034 (_t1DE6, _t1DEF);
          real _t1DF1 = 0.4e1;
          real _t1DF2 = prim *0034 (_t1DF1, y1D5C);
          real _t1DF3 = prim *0034 (_t1DF2, z1D5D);
          int _t1DF4 = 2;
          real _t1DF5 = prim ^0068 (x1D5B, _t1DF4);
          int _t1DF6 = 2;
          real _t1DF7 = prim ^0068 (y1D5C, _t1DF6);
          real _t1DF8 = prim +0017<$[]> (_t1DF5, _t1DF7);
          int _t1DF9 = 2;
          real _t1DFA = prim ^0068 (z1D5D, _t1DF9);
          real _t1DFB = prim +0017<$[]> (_t1DF8, _t1DFA);
          real _t1DFC = prim cos0169 (_t1DFB);
          real _t1DFD = prim *0034 (_t1DF3, _t1DFC);
          real _t1DFE = prim +0017<$[]> (_t1DF0, _t1DFD);
          vec3 _t1DFF = [_t1DBF, _t1DE0, _t1DFE];
          int _t1E00 = -4;
          real _t1E01 = (real)_t1E00;
          real _t1E02 = prim *0034 (_t1E01, x1D5B);
          int _t1E03 = 3;
          real _t1E04 = prim ^0068 (z1D5D, _t1E03);
          real _t1E05 = prim *0034 (_t1E02, _t1E04);
          int _t1E06 = 2;
          real _t1E07 = prim ^0068 (x1D5B, _t1E06);
          int _t1E08 = 2;
          real _t1E09 = prim ^0068 (y1D5C, _t1E08);
          real _t1E0A = prim +0017<$[]> (_t1E07, _t1E09);
          int _t1E0B = 2;
          real _t1E0C = prim ^0068 (z1D5D, _t1E0B);
          real _t1E0D = prim +0017<$[]> (_t1E0A, _t1E0C);
          real _t1E0E = prim sin0171 (_t1E0D);
          real _t1E0F = prim *0034 (_t1E05, _t1E0E);
          real _t1E10 = 0.4e1;
          real _t1E11 = prim *0034 (_t1E10, x1D5B);
          real _t1E12 = prim *0034 (_t1E11, z1D5D);
          int _t1E13 = 2;
          real _t1E14 = prim ^0068 (x1D5B, _t1E13);
          int _t1E15 = 2;
          real _t1E16 = prim ^0068 (y1D5C, _t1E15);
          real _t1E17 = prim +0017<$[]> (_t1E14, _t1E16);
          int _t1E18 = 2;
          real _t1E19 = prim ^0068 (z1D5D, _t1E18);
          real _t1E1A = prim +0017<$[]> (_t1E17, _t1E19);
          real _t1E1B = prim cos0169 (_t1E1A);
          real _t1E1C = prim *0034 (_t1E12, _t1E1B);
          real _t1E1D = prim +0017<$[]> (_t1E0F, _t1E1C);
          int _t1E1E = -4;
          real _t1E1F = (real)_t1E1E;
          real _t1E20 = prim *0034 (_t1E1F, y1D5C);
          int _t1E21 = 3;
          real _t1E22 = prim ^0068 (z1D5D, _t1E21);
          real _t1E23 = prim *0034 (_t1E20, _t1E22);
          int _t1E24 = 2;
          real _t1E25 = prim ^0068 (x1D5B, _t1E24);
          int _t1E26 = 2;
          real _t1E27 = prim ^0068 (y1D5C, _t1E26);
          real _t1E28 = prim +0017<$[]> (_t1E25, _t1E27);
          int _t1E29 = 2;
          real _t1E2A = prim ^0068 (z1D5D, _t1E29);
          real _t1E2B = prim +0017<$[]> (_t1E28, _t1E2A);
          real _t1E2C = prim sin0171 (_t1E2B);
          real _t1E2D = prim *0034 (_t1E23, _t1E2C);
          real _t1E2E = 0.4e1;
          real _t1E2F = prim *0034 (_t1E2E, y1D5C);
          real _t1E30 = prim *0034 (_t1E2F, z1D5D);
          int _t1E31 = 2;
          real _t1E32 = prim ^0068 (x1D5B, _t1E31);
          int _t1E33 = 2;
          real _t1E34 = prim ^0068 (y1D5C, _t1E33);
          real _t1E35 = prim +0017<$[]> (_t1E32, _t1E34);
          int _t1E36 = 2;
          real _t1E37 = prim ^0068 (z1D5D, _t1E36);
          real _t1E38 = prim +0017<$[]> (_t1E35, _t1E37);
          real _t1E39 = prim cos0169 (_t1E38);
          real _t1E3A = prim *0034 (_t1E30, _t1E39);
          real _t1E3B = prim +0017<$[]> (_t1E2D, _t1E3A);
          int _t1E3C = -4;
          real _t1E3D = (real)_t1E3C;
          int _t1E3E = 4;
          real _t1E3F = prim ^0068 (z1D5D, _t1E3E);
          real _t1E40 = prim *0034 (_t1E3D, _t1E3F);
          int _t1E41 = 2;
          real _t1E42 = prim ^0068 (x1D5B, _t1E41);
          int _t1E43 = 2;
          real _t1E44 = prim ^0068 (y1D5C, _t1E43);
          real _t1E45 = prim +0017<$[]> (_t1E42, _t1E44);
          int _t1E46 = 2;
          real _t1E47 = prim ^0068 (z1D5D, _t1E46);
          real _t1E48 = prim +0017<$[]> (_t1E45, _t1E47);
          real _t1E49 = prim sin0171 (_t1E48);
          real _t1E4A = prim *0034 (_t1E40, _t1E49);
          real _t1E4B = 0.1e2;
          int _t1E4C = 2;
          real _t1E4D = prim ^0068 (z1D5D, _t1E4C);
          real _t1E4E = prim *0034 (_t1E4B, _t1E4D);
          int _t1E4F = 2;
          real _t1E50 = prim ^0068 (x1D5B, _t1E4F);
          int _t1E51 = 2;
          real _t1E52 = prim ^0068 (y1D5C, _t1E51);
          real _t1E53 = prim +0017<$[]> (_t1E50, _t1E52);
          int _t1E54 = 2;
          real _t1E55 = prim ^0068 (z1D5D, _t1E54);
          real _t1E56 = prim +0017<$[]> (_t1E53, _t1E55);
          real _t1E57 = prim cos0169 (_t1E56);
          real _t1E58 = prim *0034 (_t1E4E, _t1E57);
          real _t1E59 = prim +0017<$[]> (_t1E4A, _t1E58);
          real _t1E5A = 0.2e1;
          int _t1E5B = 2;
          real _t1E5C = prim ^0068 (x1D5B, _t1E5B);
          int _t1E5D = 2;
          real _t1E5E = prim ^0068 (y1D5C, _t1E5D);
          real _t1E5F = prim +0017<$[]> (_t1E5C, _t1E5E);
          int _t1E60 = 2;
          real _t1E61 = prim ^0068 (z1D5D, _t1E60);
          real _t1E62 = prim +0017<$[]> (_t1E5F, _t1E61);
          real _t1E63 = prim sin0171 (_t1E62);
          real _t1E64 = prim *0034 (_t1E5A, _t1E63);
          real _t1E65 = prim +0017<$[]> (_t1E59, _t1E64);
          vec3 _t1E66 = [_t1E1D, _t1E3B, _t1E65];
          tensor[3,3] hess1E67 = [_t1DAE, _t1DFF, _t1E66];
          H1D5A = hess1E67;
          real[3] _t1E68 = prim evals009F (H1D5A);
          int _t1E69 = 2;
          real _t1E6A = prim $sub01C0<real; %3> (_t1E68, _t1E69);
          real _t1E6B = prim unary -008B<$[]> (_t1E6A);
          real _t1E6C = prim |()|00B5<$[3]> (g1D1C);
          real _t1E6D = prim +0017<$[]> (fBias07CC, _t1E6C);
          real str1E6E = prim /0055 (_t1E6B, _t1E6D);
          _t1D1B = str1E6E;
          bool _t1E6F = prim >0080 (_t1D1B, fStrTh07CA);
          if _t1E6F {
            bool _t1E70;
            real _t1E71;
            real _t1E72 = 0.e0;
            _t1E71 = _t1E72;
            bool _t1E73 = prim >=007E (_t1E71, fMaskTh07CB);
            if _t1E73 {
              bool _t1E74 = true;
              _t1E70 = _t1E74;
            } else {
              _t1E70 = false;
            }
            _t1D1A = _t1E70;
          } else {
            _t1D1A = false;
          }
          _t1CFF = _t1D1A;
        } else {
          _t1CFF = false;
        }
        _t143A = _t1CFF;
        if _t143A {
          new point (npos142B, hh139B);
          int _t143B = 1;
          born13A5 = prim +0015 (born13A5, _t143B);
        }
        bool _t143C;
        bool _t143D;
        int _t143E = 0;
        bool _t143F = prim >007F (verb07DA, _t143E);
        if _t143F {
          _t143D = vv13A7;
        } else {
          _t143D = false;
        }
        if _t143D {
          _t143C = true;
        } else {
          int _t1440 = 1;
          _t143C = prim >007F (verb07DA, _t1440);
        }
        if _t143C {
          string _t1441 = "(i#";
          string _t1442 = " @ ";
          string _t1443 = "): ";
          print (ID139A, _t1441, iter1359, _t1442, pos1398, _t1443);
          string _t1444 = "nn=0; after birthing mvmt=";
          string _t1445 = "\n";
          print (_t1444, mvmt13A3, _t1445);
        }
        continue;
      }
      tensor[3,3] _t1446 = func fPerp12BE (pos1398);
      tensor[3,3] _t1447 = prim *0036<$[3,3]> (hh139B, _t1446);
      vec3 es1448 = prim •00CE<$[3,3]; $[3]; $[3]> (_t1447, force13F6);
      real _t1449 = prim |()|00B5<$[3]> (es1448);
      bool _t144A = prim >0080 (_t1449, tipd07CD);
      if _t144A {
        real _t144B = prim |()|00B5<$[3]> (es1448);
        real _t144C = prim /0055 (tipd07CD, _t144B);
        hh139B = prim *0034 (hh139B, _t144C);
        real _t144D = prim |()|00B5<$[3]> (es1448);
        real _t144E = prim /0055 (tipd07CD, _t144D);
        es1448 = prim *0038<$[3]> (es1448, _t144E);
      }
      vec3 _t144F = prim +0017<$[3]> (pos1398, es1448);
      vec3 _t1450 = func fStep128C (_t144F);
      vec3 fs1451 = prim *0036<$[3]> (sfs07DB, _t1450);
      real _t1452 = prim |()|00B5<$[3]> (fs1451);
      real _t1453 = prim *0034 (fsEps07D4, tipd07CD);
      real _t1454 = prim |()|00B5<$[3]> (es1448);
      real _t1455 = prim +0017<$[]> (_t1453, _t1454);
      real _t1456 = prim /0055 (_t1452, _t1455);
      real _t1457 = 0.5e0;
      bool _t1458 = prim >0080 (_t1456, _t1457);
      if _t1458 {
        real _t1459 = 0.5e0;
        hh139B = prim *0034 (hh139B, _t1459);
        bool _t145A;
        bool _t145B;
        int _t145C = 0;
        bool _t145D = prim >007F (verb07DA, _t145C);
        if _t145D {
          _t145B = vv13A7;
        } else {
          _t145B = false;
        }
        if _t145B {
          _t145A = true;
        } else {
          int _t145E = 1;
          _t145A = prim >007F (verb07DA, _t145E);
        }
        if _t145A {
          string _t145F = "(i#";
          string _t1460 = " @ ";
          string _t1461 = "): ";
          print (ID139A, _t145F, iter1359, _t1460, pos1398, _t1461);
          string _t1462 = "nn=";
          string _t1463 = "; |fs|/|es|=";
          real _t1464 = prim |()|00B5<$[3]> (fs1451);
          real _t1465 = prim |()|00B5<$[3]> (es1448);
          real _t1466 = prim /0055 (_t1464, _t1465);
          string _t1467 = " > 0.5; trying again with hh=";
          string _t1468 = "; mvmt=";
          string _t1469 = "\n";
          print (_t1462, nn13F7, _t1463, _t1466, _t1467, hh139B, _t1468, mvmt13A3, _t1469);
          string _t146A = "        fs=";
          string _t146B = "\n";
          print (_t146A, fs1451, _t146B);
          string _t146C = "        es=";
          string _t146D = "\n";
          print (_t146C, es1448, _t146D);
        }
        continue;
      }
      vec3 oldpos146E = pos1398;
      vec3 _t146F = prim +0017<$[3]> (fs1451, es1448);
      pos1398 = prim +0017<$[3]> (pos1398, _t146F);
      _pos1399 = pos1398;
      real newE1470 = 0.e0;
      closest13A4 = rad1342;
      real _t1471 = 0.e0;
      real _t1472 = 0.e0;
      real _t1473 = 0.e0;
      vec3 mno1474 = [_t1471, _t1472, _t1473];
      nn13F7 = 0;
      point[] _t1475 = prim sphere0198<point> (_pos1399, rad1342);
      foreach P1476 in _t1475 {
        vec3 _t1477 = P1476.pos1398;
        vec3 off1478 = prim -0026<$[3]> (_t1477, pos1398);
        real _t1479;
        real _t1CD7 = prim |()|00B5<$[3]> (off1478);
        real _t1CD8 = prim /0055 (_t1CD7, rad1342);
        real _t1CD9;
        real _t1CDA = 0.2e1;
        real _t1CDB = 0.3e1;
        real _t1CDC = prim /0055 (_t1CDA, _t1CDB);
        real s1CDD = prim -0026<$[]> (_t1CD8, _t1CDC);
        real _t1CDE;
        real _t1CDF = 0.2e1;
        real _t1CE0 = 0.3e1;
        real _t1CE1 = prim /0055 (_t1CDF, _t1CE0);
        bool _t1CE2 = prim <007A (_t1CD8, _t1CE1);
        if _t1CE2 {
          real _t1CE3 = 0.1e1;
          real _t1CE4 = -0.5646e1;
          real _t1CE5 = 0.119835e2;
          real _t1CE6 = -0.113535e2;
          real _t1CE7 = 0.40550625e1;
          real _t1CE8 = prim *0034 (_t1CE7, _t1CD8);
          real _t1CE9 = prim +0017<$[]> (_t1CE6, _t1CE8);
          real _t1CEA = prim *0034 (_t1CD8, _t1CE9);
          real _t1CEB = prim +0017<$[]> (_t1CE5, _t1CEA);
          real _t1CEC = prim *0034 (_t1CD8, _t1CEB);
          real _t1CED = prim +0017<$[]> (_t1CE4, _t1CEC);
          real _t1CEE = prim *0034 (_t1CD8, _t1CED);
          _t1CDE = prim +0017<$[]> (_t1CE3, _t1CEE);
        } else {
          real _t1CEF;
          real _t1CF0 = 0.1e1;
          bool _t1CF1 = prim <007A (_t1CD8, _t1CF0);
          if _t1CF1 {
            real _t1CF2 = -0.1e-2;
            real _t1CF3 = 0.9e-1;
            real _t1CF4 = -0.54e0;
            real _t1CF5 = 0.1215e1;
            real _t1CF6 = 0.972e0;
            real _t1CF7 = prim *0034 (_t1CF6, s1CDD);
            real _t1CF8 = prim -0026<$[]> (_t1CF5, _t1CF7);
            real _t1CF9 = prim *0034 (_t1CF8, s1CDD);
            real _t1CFA = prim +0017<$[]> (_t1CF4, _t1CF9);
            real _t1CFB = prim *0034 (_t1CFA, s1CDD);
            real _t1CFC = prim +0017<$[]> (_t1CF3, _t1CFB);
            real _t1CFD = prim *0034 (_t1CFC, s1CDD);
            real _t1CFE = prim *0034 (_t1CFD, s1CDD);
            _t1CEF = prim +0017<$[]> (_t1CF2, _t1CFE);
          } else {
            _t1CEF = 0.e0;
          }
          _t1CDE = _t1CEF;
        }
        _t1CD9 = _t1CDE;
        _t1479 = _t1CD9;
        newE1470 = prim +0017<$[]> (newE1470, _t1479);
        real _t147A = prim |()|00B5<$[3]> (off1478);
        closest13A4 = prim min0127 (closest13A4, _t147A);
        mno1474 = prim +0017<$[3]> (mno1474, off1478);
        int _t147B = 1;
        nn13F7 = prim +0015 (nn13F7, _t147B);
      }
      real _t147C = (real)nn13F7;
      mno1474 = prim /0057<$[3]> (mno1474, _t147C);
      bool _t147D;
      bool _t147E;
      int _t147F = 0;
      bool _t1480 = prim >007F (verb07DA, _t147F);
      if _t1480 {
        _t147E = vv13A7;
      } else {
        _t147E = false;
      }
      if _t147E {
        _t147D = true;
      } else {
        int _t1481 = 1;
        _t147D = prim >007F (verb07DA, _t1481);
      }
      if _t147D {
        string _t1482 = "(i#";
        string _t1483 = " @ ";
        string _t1484 = "): ";
        print (ID139A, _t1482, iter1359, _t1483, pos1398, _t1484);
        string _t1485 = "nn=";
        string _t1486 = "; oldE=";
        string _t1487 = " newE=";
        string _t1488 = "\n";
        print (_t1485, nn13F7, _t1486, oldE13F2, _t1487, newE1470, _t1488);
      }
      real _t1489 = prim -0026<$[]> (newE1470, oldE13F2);
      vec3 _t148A = prim -0026<$[3]> (pos1398, oldpos146E);
      vec3 _t148B = prim *0036<$[3]> (gdeTest07D1, _t148A);
      vec3 _t148C = prim unary -008B<$[3]> (force13F6);
      real _t148D = prim •00CE<$[3]; $[3]; $[]> (_t148B, _t148C);
      bool _t148E = prim >0080 (_t1489, _t148D);
      if _t148E {
        hh139B = prim *0034 (hh139B, gdeBack07D2);
        real _t148F = 0.e0;
        bool _t1490 = prim ==0084 (_t148F, hh139B);
        if _t1490 {
          string _t1491 = "(i#";
          string _t1492 = " @ ";
          string _t1493 = "): ";
          print (ID139A, _t1491, iter1359, _t1492, pos1398, _t1493);
          string _t1494 = "backtracked all the way to hh=0\n";
          print (_t1494);
          die;
        }
        bool _t1495;
        bool _t1496;
        int _t1497 = 0;
        bool _t1498 = prim >007F (verb07DA, _t1497);
        if _t1498 {
          _t1496 = vv13A7;
        } else {
          _t1496 = false;
        }
        if _t1496 {
          _t1495 = true;
        } else {
          int _t1499 = 1;
          _t1495 = prim >007F (verb07DA, _t1499);
        }
        if _t1495 {
          string _t149A = "(i#";
          string _t149B = " @ ";
          string _t149C = "): ";
          print (ID139A, _t149A, iter1359, _t149B, pos1398, _t149C);
          string _t149D = "nn=";
          string _t149E = "; oldE=";
          string _t149F = " newE=";
          string _t14A0 = "; backtracking; hh=";
          string _t14A1 = "; mvmt=";
          string _t14A2 = "\n";
          print (_t149D, nn13F7, _t149E, oldE13F2, _t149F, newE1470, _t14A0, hh139B, _t14A1, mvmt13A3, _t14A2);
          string _t14A3 = "      fs=";
          string _t14A4 = "\n";
          print (_t14A3, fs1451, _t14A4);
          string _t14A5 = "      es=";
          string _t14A6 = "\n";
          print (_t14A5, es1448, _t14A6);
          string _t14A7 = "      newE - oldE=";
          real _t14A8 = prim -0026<$[]> (newE1470, oldE13F2);
          string _t14A9 = "\n";
          print (_t14A7, _t14A8, _t14A9);
          string _t14AA = "      force=";
          string _t14AB = "\n";
          print (_t14AA, force13F6, _t14AB);
          string _t14AC = "      dpos=";
          vec3 _t14AD = prim -0026<$[3]> (pos1398, oldpos146E);
          string _t14AE = "\n";
          print (_t14AC, _t14AD, _t14AE);
          string _t14AF = "      0.5*(pos - oldpos).(-force)=";
          real _t14B0 = 0.5e0;
          vec3 _t14B1 = prim -0026<$[3]> (pos1398, oldpos146E);
          vec3 _t14B2 = prim *0036<$[3]> (_t14B0, _t14B1);
          vec3 _t14B3 = prim unary -008B<$[3]> (force13F6);
          real _t14B4 = prim •00CE<$[3]; $[3]; $[]> (_t14B2, _t14B3);
          string _t14B5 = "\n";
          print (_t14AF, _t14B4, _t14B5);
        }
        pos1398 = oldpos146E;
        _pos1399 = pos1398;
        continue;
      }
      hh139B = prim *0034 (hh139B, gdeOppor07D3);
      vec3 _t14B6 = prim +0017<$[3]> (fs1451, es1448);
      step139C = prim +0017<$[3]> (step139C, _t14B6);
      real _t14B7 = prim |()|00B5<$[3]> (step139C);
      real _t14B8 = prim /0055 (_t14B7, tipd07CD);
      trav13A2 = prim +0017<$[]> (trav13A2, _t14B8);
      real _t14B9 = prim |()|00B5<$[3]> (step139C);
      real _t14BA = prim /0055 (_t14B9, tipd07CD);
      mvmt13A3 = prim lerp0096<$[]> (_t14BA, mvmt13A3, hist07DC);
      real _t14BB = prim |()|00B5<$[3]> (step139C);
      real _t14BC = prim /0055 (_t14BB, tipd07CD);
      bool _t14BD = prim <007A (_t14BC, pcmvEps07D8);
      if _t14BD {
        int _t14BE;
        bool _t1CC7;
        int _t1CC8 = 0;
        bool _t1CC9 = prim >007F (pcp07DD, _t1CC8);
        if _t1CC9 {
          bool _t1CCA;
          int _t1CCB = 0;
          bool _t1CCC = prim >007F (iter1359, _t1CCB);
          if _t1CCC {
            int _t1CCD = 0;
            int _t1CCE = prim %00A1 (iter1359, pcp07DD);
            _t1CCA = prim ==0082 (_t1CCD, _t1CCE);
          } else {
            _t1CCA = false;
          }
          _t1CC7 = _t1CCA;
        } else {
          _t1CC7 = false;
        }
        if _t1CC7 {
          int _t1CCF = prim /0054 (iter1359, pcp07DD);
          int _t1CD0 = 2;
          int _t1CD1 = prim %00A1 (_t1CCF, _t1CD0);
          int _t1CD2 = 2;
          int _t1CD3 = prim *0033 (_t1CD1, _t1CD2);
          int _t1CD4 = 1;
          int _t1CD5 = prim -0024 (_t1CD3, _t1CD4);
          _t14BE = _t1CD5;
        } else {
          int _t1CD6 = 0;
          _t14BE = _t1CD6;
        }
        int _t14BF = 0;
        bool _t14C0 = prim !=0086 (_t14BE, _t14BF);
        if _t14C0 {
          bool _t14C1;
          int _t14C2;
          bool _t1CB7;
          int _t1CB8 = 0;
          bool _t1CB9 = prim >007F (pcp07DD, _t1CB8);
          if _t1CB9 {
            bool _t1CBA;
            int _t1CBB = 0;
            bool _t1CBC = prim >007F (iter1359, _t1CBB);
            if _t1CBC {
              int _t1CBD = 0;
              int _t1CBE = prim %00A1 (iter1359, pcp07DD);
              _t1CBA = prim ==0082 (_t1CBD, _t1CBE);
            } else {
              _t1CBA = false;
            }
            _t1CB7 = _t1CBA;
          } else {
            _t1CB7 = false;
          }
          if _t1CB7 {
            int _t1CBF = prim /0054 (iter1359, pcp07DD);
            int _t1CC0 = 2;
            int _t1CC1 = prim %00A1 (_t1CBF, _t1CC0);
            int _t1CC2 = 2;
            int _t1CC3 = prim *0033 (_t1CC1, _t1CC2);
            int _t1CC4 = 1;
            int _t1CC5 = prim -0024 (_t1CC3, _t1CC4);
            _t14C2 = _t1CC5;
          } else {
            int _t1CC6 = 0;
            _t14C2 = _t1CC6;
          }
          int _t14C3 = 0;
          bool _t14C4 = prim >007F (_t14C2, _t14C3);
          if _t14C4 {
            bool _t14C5;
            real _t14C6 = 0.e0;
            bool _t14C7 = prim <007A (newE1470, _t14C6);
            if _t14C7 {
              bool _t14C8;
              bool _t14C9 = prim <0079 (nn13F7, nnmin12ED);
              if _t14C9 {
                _t14C8 = prim <0079 (born13A5, nnmax12F4);
              } else {
                _t14C8 = false;
              }
              _t14C5 = _t14C8;
            } else {
              _t14C5 = false;
            }
            _t14C1 = _t14C5;
          } else {
            _t14C1 = false;
          }
          if _t14C1 {
            vec3 _t14CA = prim normalize0137<$[3]> (mno1474);
            vec3 _t14CB = prim *0036<$[3]> (tipd07CD, _t14CA);
            vec3 npos14CC = prim -0026<$[3]> (pos1398, _t14CB);
            vec3 _t14CD = func fStep128C (npos14CC);
            vec3 _t14CE = prim *0036<$[3]> (sfs07DB, _t14CD);
            npos14CC = prim +0017<$[3]> (npos14CC, _t14CE);
            vec3 _t14CF = func fStep128C (npos14CC);
            vec3 _t14D0 = prim *0036<$[3]> (sfs07DB, _t14CF);
            npos14CC = prim +0017<$[3]> (npos14CC, _t14D0);
            bool birth14D1 = true;
            int _t14D2 = 2;
            bool _t14D3 = prim ==0082 (fDim07DF, _t14D2);
            if _t14D3 {
              int _t14D4 = 4;
              bool _t14D5 = prim >=007D (nn13F7, _t14D4);
              if _t14D5 {
                real _t14D6 = prim *0034 (tipd07CD, mabd07CE);
                point[] _t14D7 = prim sphere0198<point> (npos14CC, _t14D6);
                foreach P14D8 in _t14D7 {
                  birth14D1 = false;
                }
                if birth14D1 {
                  real _t14D9;
                  real _t1C93 = pos1398[0];
                  real _t1C94 = func urnd135C (_t1C93);
                  real _t1C95 = pos1398[1];
                  real _t1C96 = func urnd135C (_t1C95);
                  real _t1C97 = prim +0017<$[]> (_t1C94, _t1C96);
                  real _t1C98 = pos1398[2];
                  real _t1C99 = func urnd135C (_t1C98);
                  real _t1C9A = prim +0017<$[]> (_t1C97, _t1C99);
                  real _t1C9B = 0.1e1;
                  real _t1C9C = prim fmod018A (_t1C9A, _t1C9B);
                  _t14D9 = _t1C9C;
                  int _t14DA = prim -0024 (nnmin12ED, nn13F7);
                  real _t14DB = (real)_t14DA;
                  real _t14DC = prim $i2r01B6 (nnmin12ED);
                  real _t14DD = prim /0055 (_t14DB, _t14DC);
                  birth14D1 = prim <007A (_t14D9, _t14DD);
                }
              }
            }
            if birth14D1 {
              bool _t14DE;
              bool _t1B1D;
              bool _t1B1E;
              real _t1B1F = 0.e0;
              real _t1B20 = 0.e0;
              real _t1B21 = 0.e0;
              vec3 _t1B22 = [_t1B1F, _t1B20, _t1B21];
              vec3 mid1B23 = prim -0026<$[3]> (npos14CC, _t1B22);
              bool _t1B32;
              real _t1B33 = prim |()|00B5<$[3]> (mid1B23);
              real _t1B34 = 0.4e1;
              bool _t1B35 = prim <007A (_t1B33, _t1B34);
              if _t1B35 {
                real _t1B36 = prim |()|00B5<$[3]> (mid1B23);
                real _t1B37 = 0.3e1;
                _t1B32 = prim >0080 (_t1B36, _t1B37);
              } else {
                _t1B32 = false;
              }
              _t1B1E = _t1B32;
              if _t1B1E {
                bool _t1B38;
                real _t1B39;
                vec3 g1B3A;
                real x1B3B = npos14CC[0];
                real y1B3C = npos14CC[1];
                real z1B3D = npos14CC[2];
                real _t1B3E = 0.2e1;
                real _t1B3F = prim *0034 (_t1B3E, x1B3B);
                int _t1B40 = 2;
                real _t1B41 = prim ^0068 (z1B3D, _t1B40);
                real _t1B42 = prim *0034 (_t1B3F, _t1B41);
                int _t1B43 = 2;
                real _t1B44 = prim ^0068 (x1B3B, _t1B43);
                int _t1B45 = 2;
                real _t1B46 = prim ^0068 (y1B3C, _t1B45);
                real _t1B47 = prim +0017<$[]> (_t1B44, _t1B46);
                int _t1B48 = 2;
                real _t1B49 = prim ^0068 (z1B3D, _t1B48);
                real _t1B4A = prim +0017<$[]> (_t1B47, _t1B49);
                real _t1B4B = prim cos0169 (_t1B4A);
                real _t1B4C = prim *0034 (_t1B42, _t1B4B);
                real _t1B4D = 0.2e1;
                real _t1B4E = prim *0034 (_t1B4D, y1B3C);
                int _t1B4F = 2;
                real _t1B50 = prim ^0068 (z1B3D, _t1B4F);
                real _t1B51 = prim *0034 (_t1B4E, _t1B50);
                int _t1B52 = 2;
                real _t1B53 = prim ^0068 (x1B3B, _t1B52);
                int _t1B54 = 2;
                real _t1B55 = prim ^0068 (y1B3C, _t1B54);
                real _t1B56 = prim +0017<$[]> (_t1B53, _t1B55);
                int _t1B57 = 2;
                real _t1B58 = prim ^0068 (z1B3D, _t1B57);
                real _t1B59 = prim +0017<$[]> (_t1B56, _t1B58);
                real _t1B5A = prim cos0169 (_t1B59);
                real _t1B5B = prim *0034 (_t1B51, _t1B5A);
                real _t1B5C = 0.2e1;
                int _t1B5D = 3;
                real _t1B5E = prim ^0068 (z1B3D, _t1B5D);
                real _t1B5F = prim *0034 (_t1B5C, _t1B5E);
                int _t1B60 = 2;
                real _t1B61 = prim ^0068 (x1B3B, _t1B60);
                int _t1B62 = 2;
                real _t1B63 = prim ^0068 (y1B3C, _t1B62);
                real _t1B64 = prim +0017<$[]> (_t1B61, _t1B63);
                int _t1B65 = 2;
                real _t1B66 = prim ^0068 (z1B3D, _t1B65);
                real _t1B67 = prim +0017<$[]> (_t1B64, _t1B66);
                real _t1B68 = prim cos0169 (_t1B67);
                real _t1B69 = prim *0034 (_t1B5F, _t1B68);
                real _t1B6A = 0.2e1;
                real _t1B6B = prim *0034 (_t1B6A, z1B3D);
                int _t1B6C = 2;
                real _t1B6D = prim ^0068 (x1B3B, _t1B6C);
                int _t1B6E = 2;
                real _t1B6F = prim ^0068 (y1B3C, _t1B6E);
                real _t1B70 = prim +0017<$[]> (_t1B6D, _t1B6F);
                int _t1B71 = 2;
                real _t1B72 = prim ^0068 (z1B3D, _t1B71);
                real _t1B73 = prim +0017<$[]> (_t1B70, _t1B72);
                real _t1B74 = prim sin0171 (_t1B73);
                real _t1B75 = prim *0034 (_t1B6B, _t1B74);
                real _t1B76 = prim +0017<$[]> (_t1B69, _t1B75);
                vec3 g1B77 = [_t1B4C, _t1B5B, _t1B76];
                g1B3A = g1B77;
                tensor[3,3] H1B78;
                real x1B79 = npos14CC[0];
                real y1B7A = npos14CC[1];
                real z1B7B = npos14CC[2];
                int _t1B7C = -4;
                real _t1B7D = (real)_t1B7C;
                int _t1B7E = 2;
                real _t1B7F = prim ^0068 (x1B79, _t1B7E);
                real _t1B80 = prim *0034 (_t1B7D, _t1B7F);
                int _t1B81 = 2;
                real _t1B82 = prim ^0068 (z1B7B, _t1B81);
                real _t1B83 = prim *0034 (_t1B80, _t1B82);
                int _t1B84 = 2;
                real _t1B85 = prim ^0068 (x1B79, _t1B84);
                int _t1B86 = 2;
                real _t1B87 = prim ^0068 (y1B7A, _t1B86);
                real _t1B88 = prim +0017<$[]> (_t1B85, _t1B87);
                int _t1B89 = 2;
                real _t1B8A = prim ^0068 (z1B7B, _t1B89);
                real _t1B8B = prim +0017<$[]> (_t1B88, _t1B8A);
                real _t1B8C = prim sin0171 (_t1B8B);
                real _t1B8D = prim *0034 (_t1B83, _t1B8C);
                real _t1B8E = 0.2e1;
                int _t1B8F = 2;
                real _t1B90 = prim ^0068 (z1B7B, _t1B8F);
                real _t1B91 = prim *0034 (_t1B8E, _t1B90);
                int _t1B92 = 2;
                real _t1B93 = prim ^0068 (x1B79, _t1B92);
                int _t1B94 = 2;
                real _t1B95 = prim ^0068 (y1B7A, _t1B94);
                real _t1B96 = prim +0017<$[]> (_t1B93, _t1B95);
                int _t1B97 = 2;
                real _t1B98 = prim ^0068 (z1B7B, _t1B97);
                real _t1B99 = prim +0017<$[]> (_t1B96, _t1B98);
                real _t1B9A = prim cos0169 (_t1B99);
                real _t1B9B = prim *0034 (_t1B91, _t1B9A);
                real _t1B9C = prim +0017<$[]> (_t1B8D, _t1B9B);
                int _t1B9D = -4;
                real _t1B9E = (real)_t1B9D;
                real _t1B9F = prim *0034 (_t1B9E, x1B79);
                real _t1BA0 = prim *0034 (_t1B9F, y1B7A);
                int _t1BA1 = 2;
                real _t1BA2 = prim ^0068 (z1B7B, _t1BA1);
                real _t1BA3 = prim *0034 (_t1BA0, _t1BA2);
                int _t1BA4 = 2;
                real _t1BA5 = prim ^0068 (x1B79, _t1BA4);
                int _t1BA6 = 2;
                real _t1BA7 = prim ^0068 (y1B7A, _t1BA6);
                real _t1BA8 = prim +0017<$[]> (_t1BA5, _t1BA7);
                int _t1BA9 = 2;
                real _t1BAA = prim ^0068 (z1B7B, _t1BA9);
                real _t1BAB = prim +0017<$[]> (_t1BA8, _t1BAA);
                real _t1BAC = prim sin0171 (_t1BAB);
                real _t1BAD = prim *0034 (_t1BA3, _t1BAC);
                int _t1BAE = -4;
                real _t1BAF = (real)_t1BAE;
                real _t1BB0 = prim *0034 (_t1BAF, x1B79);
                int _t1BB1 = 3;
                real _t1BB2 = prim ^0068 (z1B7B, _t1BB1);
                real _t1BB3 = prim *0034 (_t1BB0, _t1BB2);
                int _t1BB4 = 2;
                real _t1BB5 = prim ^0068 (x1B79, _t1BB4);
                int _t1BB6 = 2;
                real _t1BB7 = prim ^0068 (y1B7A, _t1BB6);
                real _t1BB8 = prim +0017<$[]> (_t1BB5, _t1BB7);
                int _t1BB9 = 2;
                real _t1BBA = prim ^0068 (z1B7B, _t1BB9);
                real _t1BBB = prim +0017<$[]> (_t1BB8, _t1BBA);
                real _t1BBC = prim sin0171 (_t1BBB);
                real _t1BBD = prim *0034 (_t1BB3, _t1BBC);
                real _t1BBE = 0.4e1;
                real _t1BBF = prim *0034 (_t1BBE, x1B79);
                real _t1BC0 = prim *0034 (_t1BBF, z1B7B);
                int _t1BC1 = 2;
                real _t1BC2 = prim ^0068 (x1B79, _t1BC1);
                int _t1BC3 = 2;
                real _t1BC4 = prim ^0068 (y1B7A, _t1BC3);
                real _t1BC5 = prim +0017<$[]> (_t1BC2, _t1BC4);
                int _t1BC6 = 2;
                real _t1BC7 = prim ^0068 (z1B7B, _t1BC6);
                real _t1BC8 = prim +0017<$[]> (_t1BC5, _t1BC7);
                real _t1BC9 = prim cos0169 (_t1BC8);
                real _t1BCA = prim *0034 (_t1BC0, _t1BC9);
                real _t1BCB = prim +0017<$[]> (_t1BBD, _t1BCA);
                vec3 _t1BCC = [_t1B9C, _t1BAD, _t1BCB];
                int _t1BCD = -4;
                real _t1BCE = (real)_t1BCD;
                real _t1BCF = prim *0034 (_t1BCE, x1B79);
                real _t1BD0 = prim *0034 (_t1BCF, y1B7A);
                int _t1BD1 = 2;
                real _t1BD2 = prim ^0068 (z1B7B, _t1BD1);
                real _t1BD3 = prim *0034 (_t1BD0, _t1BD2);
                int _t1BD4 = 2;
                real _t1BD5 = prim ^0068 (x1B79, _t1BD4);
                int _t1BD6 = 2;
                real _t1BD7 = prim ^0068 (y1B7A, _t1BD6);
                real _t1BD8 = prim +0017<$[]> (_t1BD5, _t1BD7);
                int _t1BD9 = 2;
                real _t1BDA = prim ^0068 (z1B7B, _t1BD9);
                real _t1BDB = prim +0017<$[]> (_t1BD8, _t1BDA);
                real _t1BDC = prim sin0171 (_t1BDB);
                real _t1BDD = prim *0034 (_t1BD3, _t1BDC);
                int _t1BDE = -4;
                real _t1BDF = (real)_t1BDE;
                int _t1BE0 = 2;
                real _t1BE1 = prim ^0068 (y1B7A, _t1BE0);
                real _t1BE2 = prim *0034 (_t1BDF, _t1BE1);
                int _t1BE3 = 2;
                real _t1BE4 = prim ^0068 (z1B7B, _t1BE3);
                real _t1BE5 = prim *0034 (_t1BE2, _t1BE4);
                int _t1BE6 = 2;
                real _t1BE7 = prim ^0068 (x1B79, _t1BE6);
                int _t1BE8 = 2;
                real _t1BE9 = prim ^0068 (y1B7A, _t1BE8);
                real _t1BEA = prim +0017<$[]> (_t1BE7, _t1BE9);
                int _t1BEB = 2;
                real _t1BEC = prim ^0068 (z1B7B, _t1BEB);
                real _t1BED = prim +0017<$[]> (_t1BEA, _t1BEC);
                real _t1BEE = prim sin0171 (_t1BED);
                real _t1BEF = prim *0034 (_t1BE5, _t1BEE);
                real _t1BF0 = 0.2e1;
                int _t1BF1 = 2;
                real _t1BF2 = prim ^0068 (z1B7B, _t1BF1);
                real _t1BF3 = prim *0034 (_t1BF0, _t1BF2);
                int _t1BF4 = 2;
                real _t1BF5 = prim ^0068 (x1B79, _t1BF4);
                int _t1BF6 = 2;
                real _t1BF7 = prim ^0068 (y1B7A, _t1BF6);
                real _t1BF8 = prim +0017<$[]> (_t1BF5, _t1BF7);
                int _t1BF9 = 2;
                real _t1BFA = prim ^0068 (z1B7B, _t1BF9);
                real _t1BFB = prim +0017<$[]> (_t1BF8, _t1BFA);
                real _t1BFC = prim cos0169 (_t1BFB);
                real _t1BFD = prim *0034 (_t1BF3, _t1BFC);
                real _t1BFE = prim +0017<$[]> (_t1BEF, _t1BFD);
                int _t1BFF = -4;
                real _t1C00 = (real)_t1BFF;
                real _t1C01 = prim *0034 (_t1C00, y1B7A);
                int _t1C02 = 3;
                real _t1C03 = prim ^0068 (z1B7B, _t1C02);
                real _t1C04 = prim *0034 (_t1C01, _t1C03);
                int _t1C05 = 2;
                real _t1C06 = prim ^0068 (x1B79, _t1C05);
                int _t1C07 = 2;
                real _t1C08 = prim ^0068 (y1B7A, _t1C07);
                real _t1C09 = prim +0017<$[]> (_t1C06, _t1C08);
                int _t1C0A = 2;
                real _t1C0B = prim ^0068 (z1B7B, _t1C0A);
                real _t1C0C = prim +0017<$[]> (_t1C09, _t1C0B);
                real _t1C0D = prim sin0171 (_t1C0C);
                real _t1C0E = prim *0034 (_t1C04, _t1C0D);
                real _t1C0F = 0.4e1;
                real _t1C10 = prim *0034 (_t1C0F, y1B7A);
                real _t1C11 = prim *0034 (_t1C10, z1B7B);
                int _t1C12 = 2;
                real _t1C13 = prim ^0068 (x1B79, _t1C12);
                int _t1C14 = 2;
                real _t1C15 = prim ^0068 (y1B7A, _t1C14);
                real _t1C16 = prim +0017<$[]> (_t1C13, _t1C15);
                int _t1C17 = 2;
                real _t1C18 = prim ^0068 (z1B7B, _t1C17);
                real _t1C19 = prim +0017<$[]> (_t1C16, _t1C18);
                real _t1C1A = prim cos0169 (_t1C19);
                real _t1C1B = prim *0034 (_t1C11, _t1C1A);
                real _t1C1C = prim +0017<$[]> (_t1C0E, _t1C1B);
                vec3 _t1C1D = [_t1BDD, _t1BFE, _t1C1C];
                int _t1C1E = -4;
                real _t1C1F = (real)_t1C1E;
                real _t1C20 = prim *0034 (_t1C1F, x1B79);
                int _t1C21 = 3;
                real _t1C22 = prim ^0068 (z1B7B, _t1C21);
                real _t1C23 = prim *0034 (_t1C20, _t1C22);
                int _t1C24 = 2;
                real _t1C25 = prim ^0068 (x1B79, _t1C24);
                int _t1C26 = 2;
                real _t1C27 = prim ^0068 (y1B7A, _t1C26);
                real _t1C28 = prim +0017<$[]> (_t1C25, _t1C27);
                int _t1C29 = 2;
                real _t1C2A = prim ^0068 (z1B7B, _t1C29);
                real _t1C2B = prim +0017<$[]> (_t1C28, _t1C2A);
                real _t1C2C = prim sin0171 (_t1C2B);
                real _t1C2D = prim *0034 (_t1C23, _t1C2C);
                real _t1C2E = 0.4e1;
                real _t1C2F = prim *0034 (_t1C2E, x1B79);
                real _t1C30 = prim *0034 (_t1C2F, z1B7B);
                int _t1C31 = 2;
                real _t1C32 = prim ^0068 (x1B79, _t1C31);
                int _t1C33 = 2;
                real _t1C34 = prim ^0068 (y1B7A, _t1C33);
                real _t1C35 = prim +0017<$[]> (_t1C32, _t1C34);
                int _t1C36 = 2;
                real _t1C37 = prim ^0068 (z1B7B, _t1C36);
                real _t1C38 = prim +0017<$[]> (_t1C35, _t1C37);
                real _t1C39 = prim cos0169 (_t1C38);
                real _t1C3A = prim *0034 (_t1C30, _t1C39);
                real _t1C3B = prim +0017<$[]> (_t1C2D, _t1C3A);
                int _t1C3C = -4;
                real _t1C3D = (real)_t1C3C;
                real _t1C3E = prim *0034 (_t1C3D, y1B7A);
                int _t1C3F = 3;
                real _t1C40 = prim ^0068 (z1B7B, _t1C3F);
                real _t1C41 = prim *0034 (_t1C3E, _t1C40);
                int _t1C42 = 2;
                real _t1C43 = prim ^0068 (x1B79, _t1C42);
                int _t1C44 = 2;
                real _t1C45 = prim ^0068 (y1B7A, _t1C44);
                real _t1C46 = prim +0017<$[]> (_t1C43, _t1C45);
                int _t1C47 = 2;
                real _t1C48 = prim ^0068 (z1B7B, _t1C47);
                real _t1C49 = prim +0017<$[]> (_t1C46, _t1C48);
                real _t1C4A = prim sin0171 (_t1C49);
                real _t1C4B = prim *0034 (_t1C41, _t1C4A);
                real _t1C4C = 0.4e1;
                real _t1C4D = prim *0034 (_t1C4C, y1B7A);
                real _t1C4E = prim *0034 (_t1C4D, z1B7B);
                int _t1C4F = 2;
                real _t1C50 = prim ^0068 (x1B79, _t1C4F);
                int _t1C51 = 2;
                real _t1C52 = prim ^0068 (y1B7A, _t1C51);
                real _t1C53 = prim +0017<$[]> (_t1C50, _t1C52);
                int _t1C54 = 2;
                real _t1C55 = prim ^0068 (z1B7B, _t1C54);
                real _t1C56 = prim +0017<$[]> (_t1C53, _t1C55);
                real _t1C57 = prim cos0169 (_t1C56);
                real _t1C58 = prim *0034 (_t1C4E, _t1C57);
                real _t1C59 = prim +0017<$[]> (_t1C4B, _t1C58);
                int _t1C5A = -4;
                real _t1C5B = (real)_t1C5A;
                int _t1C5C = 4;
                real _t1C5D = prim ^0068 (z1B7B, _t1C5C);
                real _t1C5E = prim *0034 (_t1C5B, _t1C5D);
                int _t1C5F = 2;
                real _t1C60 = prim ^0068 (x1B79, _t1C5F);
                int _t1C61 = 2;
                real _t1C62 = prim ^0068 (y1B7A, _t1C61);
                real _t1C63 = prim +0017<$[]> (_t1C60, _t1C62);
                int _t1C64 = 2;
                real _t1C65 = prim ^0068 (z1B7B, _t1C64);
                real _t1C66 = prim +0017<$[]> (_t1C63, _t1C65);
                real _t1C67 = prim sin0171 (_t1C66);
                real _t1C68 = prim *0034 (_t1C5E, _t1C67);
                real _t1C69 = 0.1e2;
                int _t1C6A = 2;
                real _t1C6B = prim ^0068 (z1B7B, _t1C6A);
                real _t1C6C = prim *0034 (_t1C69, _t1C6B);
                int _t1C6D = 2;
                real _t1C6E = prim ^0068 (x1B79, _t1C6D);
                int _t1C6F = 2;
                real _t1C70 = prim ^0068 (y1B7A, _t1C6F);
                real _t1C71 = prim +0017<$[]> (_t1C6E, _t1C70);
                int _t1C72 = 2;
                real _t1C73 = prim ^0068 (z1B7B, _t1C72);
                real _t1C74 = prim +0017<$[]> (_t1C71, _t1C73);
                real _t1C75 = prim cos0169 (_t1C74);
                real _t1C76 = prim *0034 (_t1C6C, _t1C75);
                real _t1C77 = prim +0017<$[]> (_t1C68, _t1C76);
                real _t1C78 = 0.2e1;
                int _t1C79 = 2;
                real _t1C7A = prim ^0068 (x1B79, _t1C79);
                int _t1C7B = 2;
                real _t1C7C = prim ^0068 (y1B7A, _t1C7B);
                real _t1C7D = prim +0017<$[]> (_t1C7A, _t1C7C);
                int _t1C7E = 2;
                real _t1C7F = prim ^0068 (z1B7B, _t1C7E);
                real _t1C80 = prim +0017<$[]> (_t1C7D, _t1C7F);
                real _t1C81 = prim sin0171 (_t1C80);
                real _t1C82 = prim *0034 (_t1C78, _t1C81);
                real _t1C83 = prim +0017<$[]> (_t1C77, _t1C82);
                vec3 _t1C84 = [_t1C3B, _t1C59, _t1C83];
                tensor[3,3] hess1C85 = [_t1BCC, _t1C1D, _t1C84];
                H1B78 = hess1C85;
                real[3] _t1C86 = prim evals009F (H1B78);
                int _t1C87 = 2;
                real _t1C88 = prim $sub01C0<real; %3> (_t1C86, _t1C87);
                real _t1C89 = prim unary -008B<$[]> (_t1C88);
                real _t1C8A = prim |()|00B5<$[3]> (g1B3A);
                real _t1C8B = prim +0017<$[]> (fBias07CC, _t1C8A);
                real str1C8C = prim /0055 (_t1C89, _t1C8B);
                _t1B39 = str1C8C;
                bool _t1C8D = prim >0080 (_t1B39, fStrTh07CA);
                if _t1C8D {
                  bool _t1C8E;
                  real _t1C8F;
                  real _t1C90 = 0.e0;
                  _t1C8F = _t1C90;
                  bool _t1C91 = prim >=007E (_t1C8F, fMaskTh07CB);
                  if _t1C91 {
                    bool _t1C92 = true;
                    _t1C8E = _t1C92;
                  } else {
                    _t1C8E = false;
                  }
                  _t1B38 = _t1C8E;
                } else {
                  _t1B38 = false;
                }
                _t1B1D = _t1B38;
              } else {
                _t1B1D = false;
              }
              _t14DE = _t1B1D;
              if _t14DE {
                new point (npos14CC, hh139B);
                int _t14DF = 1;
                born13A5 = prim +0015 (born13A5, _t14DF);
              }
            }
          } else {
            int _t14E0;
            bool _t1CA7;
            int _t1CA8 = 0;
            bool _t1CA9 = prim >007F (pcp07DD, _t1CA8);
            if _t1CA9 {
              bool _t1CAA;
              int _t1CAB = 0;
              bool _t1CAC = prim >007F (iter1359, _t1CAB);
              if _t1CAC {
                int _t1CAD = 0;
                int _t1CAE = prim %00A1 (iter1359, pcp07DD);
                _t1CAA = prim ==0082 (_t1CAD, _t1CAE);
              } else {
                _t1CAA = false;
              }
              _t1CA7 = _t1CAA;
            } else {
              _t1CA7 = false;
            }
            if _t1CA7 {
              int _t1CAF = prim /0054 (iter1359, pcp07DD);
              int _t1CB0 = 2;
              int _t1CB1 = prim %00A1 (_t1CAF, _t1CB0);
              int _t1CB2 = 2;
              int _t1CB3 = prim *0033 (_t1CB1, _t1CB2);
              int _t1CB4 = 1;
              int _t1CB5 = prim -0024 (_t1CB3, _t1CB4);
              _t14E0 = _t1CB5;
            } else {
              int _t1CB6 = 0;
              _t14E0 = _t1CB6;
            }
            int _t14E1 = 0;
            bool _t14E2 = prim <0079 (_t14E0, _t14E1);
            if _t14E2 {
              real _t14E3 = 0.e0;
              bool _t14E4 = prim >0080 (newE1470, _t14E3);
              if _t14E4 {
                bool _t14E5 = prim >007F (nn13F7, nnmax12F4);
                if _t14E5 {
                  real _t14E6;
                  real _t1C9D = pos1398[0];
                  real _t1C9E = func urnd135C (_t1C9D);
                  real _t1C9F = pos1398[1];
                  real _t1CA0 = func urnd135C (_t1C9F);
                  real _t1CA1 = prim +0017<$[]> (_t1C9E, _t1CA0);
                  real _t1CA2 = pos1398[2];
                  real _t1CA3 = func urnd135C (_t1CA2);
                  real _t1CA4 = prim +0017<$[]> (_t1CA1, _t1CA3);
                  real _t1CA5 = 0.1e1;
                  real _t1CA6 = prim fmod018A (_t1CA4, _t1CA5);
                  _t14E6 = _t1CA6;
                  int _t14E7 = prim -0024 (nn13F7, nnmax12F4);
                  real _t14E8 = (real)_t14E7;
                  real _t14E9 = prim $i2r01B6 (nn13F7);
                  real _t14EA = prim /0055 (_t14E8, _t14E9);
                  bool _t14EB = prim <007A (_t14E6, _t14EA);
                  if _t14EB {
                    die;
                  }
                }
              }
            }
          }
        }
      }
    }
    first13A6 = false;
  }
}
collection {
  int _t14F7 = 0;
  int _t14F8 = prim length0123<vec3> (ipos07DE);
  int _t14F9 = 1;
  int _t14FA = prim -0024 (_t14F8, _t14F9);
  int[] _t14FB = prim $range01C3 (_t14F7, _t14FA);
  foreach ii14FC in _t14FB {
    vec3 _t14FD = prim $dynsub01C2<vec3> (ipos07DE, ii14FC);
    real _t14FE = 0.1e1;
    new point (_t14FD, _t14FE);
  }
}
update {
  int pop14FF = prim numActive01A2 ();
  int _t1500;
  bool _t1501 = prim !=0086 (pop14FF, popLast135B);
  if _t1501 {
    _t1500 = 1;
  } else {
    _t1500 = 0;
  }
  int pc1502 = _t1500;
  real _t1503 = (real)pc1502;
  rpc135A = prim lerp0096<$[]> (_t1503, rpc135A, pchist1358);
  bool res1504= all { (P1507) => {
      bool _t1508 = P1507.found13A0;
      return _t1508;
    } (P1505, P1505)
  | P1505 in all };
  bool allfound150A = res1504;
  real _t150B = 0.1e3;
  real res150C= sum<real> { (P1510) => {
      real _t1511;
      bool _t1512 = P1510.found13A0;
      if _t1512 {
        _t1511 = 0.1e1;
      } else {
        _t1511 = 0.e0;
      }
      return _t1511;
    } (P150D, P150D)
  | P150D in all };
  int num1514 = prim numStrands01A4 ();
  real rNum1515 = (real)num1514;
  real mean1516 = prim /0055 (res150C, rNum1515);
  real percfound1517 = prim *0034 (_t150B, mean1516);
  real res1518= sum<real> { (P151B) => {
      real _t151C = P151B.closest13A4;
      return _t151C;
    } (P1519, P1519)
  | P1519 in all };
  int num151E = prim numStrands01A4 ();
  real rNum151F = (real)num151E;
  real mean1520 = prim /0055 (res1518, rNum151F);
  real meancl1521 = mean1520;
  real res1522= sum<real> { (P1528, meancl152A) => {
      real _t1529 = P1528.closest13A4;
      real _t152B = prim -0026<$[]> (_t1529, meancl152A);
      int _t152C = 2;
      real _t152D = prim ^0068 (_t152B, _t152C);
      return _t152D;
    } (P1523, P1523, meancl1521)
  | P1523 in all };
  int num152F = prim numStrands01A4 ();
  real rNum1530 = (real)num152F;
  real mean1531 = prim /0055 (res1522, rNum1530);
  real varicl1532 = mean1531;
  real _t1533 = prim sqrt0165 (varicl1532);
  real covcl1534 = prim /0055 (_t1533, meancl1521);
  real res1535= max<real> { (P1538) => {
      real _t1539 = P1538.mvmt13A3;
      return _t1539;
    } (P1536, P1536)
  | P1536 in all };
  real maxmvmt153B = res1535;
  string _t153C = "======= finished iter ";
  string _t153D = " w/ ";
  string _t153E = ")";
  string _t153F = "; %found=";
  string _t1540 = "; mean(hh)=";
  real res1541= sum<real> { (P1544) => {
      real _t1545 = P1544.hh139B;
      return _t1545;
    } (P1542, P1542)
  | P1542 in all };
  int num1547 = prim numStrands01A4 ();
  real rNum1548 = (real)num1547;
  real mean1549 = prim /0055 (res1541, rNum1548);
  string _t154A = "; mean(cl)=";
  string _t154B = "; COV(cl)=";
  string _t154C = "; max(mvmt)=";
  string _t154D = "; pc=";
  string _t154E = "; rpc=";
  string _t154F = "\n";
  print (_t153C, iter1359, _t153D, pop14FF, _t153E, _t153F, percfound1517, _t1540, mean1549, _t154A, meancl1521, _t154B, covcl1534, _t154C, maxmvmt153B, _t154D, pc1502, _t154E, rpc135A, _t154F);
  bool _t1550;
  if allfound150A {
    bool _t1551;
    bool _t1552 = prim <007A (covcl1534, geoEps07D5);
    if _t1552 {
      bool _t1553;
      bool _t1554 = prim <007A (maxmvmt153B, mvmtEps07D6);
      if _t1554 {
        _t1553 = prim <007A (rpc135A, rpcEps07D7);
      } else {
        _t1553 = false;
      }
      _t1551 = _t1553;
    } else {
      _t1551 = false;
    }
    _t1550 = _t1551;
  } else {
    _t1550 = false;
  }
  if _t1550 {
    string _t1555 = "======= Stabilizing ";
    int _t1556 = prim numActive01A2 ();
    string _t1557 = " (iter ";
    string _t1558 = ")";
    string _t1559 = "; COV(cl)=";
    string _t155A = " < ";
    string _t155B = "; max(mvmt)=";
    string _t155C = " < ";
    string _t155D = "; rpc=";
    string _t155E = " < ";
    string _t155F = "\n";
    print (_t1555, _t1556, _t1557, iter1359, _t1558, _t1559, covcl1534, _t155A, geoEps07D5, _t155B, maxmvmt153B, _t155C, mvmtEps07D6, _t155D, rpc135A, _t155E, rpcEps07D7, _t155F);
    stabilize_all;
  } else {
    string _t1560 = "======= Stabilizing ";
    int _t1561 = prim numActive01A2 ();
    string _t1562 = " (iter ";
    string _t1563 = ")";
    string _t1564 = "; COV(cl)=";
    string _t1565 = " > ";
    string _t1566 = "; max(mvmt)=";
    string _t1567 = " > ";
    string _t1568 = "; rpc=";
    string _t1569 = " > ";
    string _t156A = "\n";
    print (_t1560, _t1561, _t1562, iter1359, _t1563, _t1564, covcl1534, _t1565, geoEps07D5, _t1566, maxmvmt153B, _t1567, mvmtEps07D6, _t1568, rpc135A, _t1569, rpcEps07D7, _t156A);
  }
  int _t156B = 1;
  iter1359 = prim +0015 (iter1359, _t156B);
  popLast135B = pop14FF;
}
/* Program end */
##### high-ir: after simple-to-high translation ####
## properties
  GlobalInit StabilizeAll GlobalReduce StrandSets GlobalUpdate NewStrands StrandCommunication StrandsMayDie HasInputs HasGlobals ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
## globals
  input meshData21C9 (meshData) = <no-default>
  input 0space07C6_intermedateGlobal21CA (space) = <no-default>
  input 0data07C8_intermedateGlobal21CB (data) = <no-default>
  input fStrTh21CC (fStrTh) = <no-default>
  input fMaskTh21CD (fMaskTh) = <default>
  input fBias21CE (fBias) = <default>
  input tipd21CF (tipd) = <default>
  input mabd21D0 (mabd) = <default>
  input travMax21D1 (travMax) = <default>
  input nfsMax21D2 (nfsMax) = <default>
  input gdeTest21D3 (gdeTest) = <default>
  input gdeBack21D4 (gdeBack) = <default>
  input gdeOppor21D5 (gdeOppor) = <default>
  input fsEps21D6 (fsEps) = <no-default>
  input geoEps21D7 (geoEps) = <default>
  input mvmtEps21D8 (mvmtEps) = <default>
  input rpcEps21D9 (rpcEps) = <default>
  input pcmvEps21DA (pcmvEps) = <default>
  input isoval21DB (isoval) = <default>
  input verb21DC (verb) = <default>
  input sfs21DD (sfs) = <default>
  input hist21DE (hist) = <default>
  input pcp21DF (pcp) = <default>
  input ipos21E0 (ipos) = <no-default>
  input fDim21E1 (fDim) = <default>
  global int nnmin221D
  global int nnmax221E
  global real phiWellRad221F
  global real rad2220
  global real pchist2221
  varying global int iter2222
  varying global real rpc2223
  varying global int popLast2224
## functions
  function real mean2851 (point P284B#1) {
    ENTRY2850:  preds = []
      real _t284C#1 = P284B.hh;
      return _t284C
}
  function real max284A (point P2844#1) {
    ENTRY2849:  preds = []
      real _t2845#1 = P2844.mvmt;
      return _t2845
}
  function real mean2843 (point P2837#1, real meancl2838#1) {
    ENTRY2842:  preds = []
      real _t2839#1 = P2837.closest;
      real _t283B#1 = λ(T0[],T1[])<(T0) - (T1)> (_t2839,meancl2838);
      int _t283D#0 = 2;
      real _t283F#1 = λ(T0[])<(T0)^2> (_t283B);
      return _t283F
}
  function real mean2836 (point P2830#1) {
    ENTRY2835:  preds = []
      real _t2831#1 = P2830.closest;
      return _t2831
}
  function real mean282F (point P2822#1) {
    ENTRY282E:  preds = []
      bool _t2824#1 = P2822.found;
      if _t2824 then goto ASSIGN2829 else goto ASSIGN282B
    ASSIGN2829:  preds = [COND282C]
      real _t2827#1 = 0.1e1;
      goto JOIN2826
    JOIN2826:  preds = [ASSIGN2829,ASSIGN282B]
      real _t2828#1 = phi(_t2827,_t282A)
      return _t2828
    ASSIGN282B:  preds = [COND282C]
      real _t282A#1 = 0.e0;
      goto JOIN2826
}
  function bool all2821 (point P281B#1) {
    ENTRY2820:  preds = []
      bool _t281C#1 = P281B.found;
      return _t281C
}
  function int[2] nextCell42244 (int faceIdx2225#2, int cell2226#1, femData:Mesh mesh2227#1) {
    ENTRY2243:  preds = []
      int _t2228#1 = -1;
      bool _t222A#1 = EQ<int>(faceIdx2225,_t2228);
      if _t222A then goto ASSIGN222E else goto ASSIGN2235
    ASSIGN222E:  preds = [COND2241]
      int _t222D#1 = -1;
      int _t222F#1 = -1;
      int[2] _t2231#1 = <int[2]>{_t222D,_t222F};
      return _t2231
      goto JOIN222C
    JOIN222C:  preds = [*RETURN(_t2231)2233,*RETURN(_t223E)2240]
      unreachable
    ASSIGN2235:  preds = [COND2241]
      int _t2234#1 = 8;
      int _t2236#1 = IMul(cell2226,_t2234);
      int _t2238#1 = 2;
      int _t223A#1 = IMul(faceIdx2225,_t2238);
      int _t223C#1 = IAdd(_t2236,_t223A);
      int[2] _t223E#1 = ExtractFemItemN<[femData:Mesh,int],int[2],CellFaceCell(Mesh),0000,"",[],int>(mesh2227,_t223C);
      return _t223E
      goto JOIN222C
}
  function tensor[3] fStep2531 (tensor[3] s2245#6) {
    ENTRY2530:  preds = []
      real x2247#5 = TensorIndex<tensor[3],[0]>(s2245);
      real y2249#5 = TensorIndex<tensor[3],[1]>(s2245);
      real z224B#8 = TensorIndex<tensor[3],[2]>(s2245);
      real _t224D#1 = 0.2e1;
      real _t224F#1 = λ(T0[],T1[])<(T0 * T1)> (_t224D,x2247);
      int _t2251#0 = 2;
      real _t2253#1 = λ(T0[])<(T0)^2> (z224B);
      real _t2255#1 = λ(T0[],T1[])<(T0 * T1)> (_t224F,_t2253);
      int _t2257#0 = 2;
      real _t2259#1 = λ(T0[])<(T0)^2> (x2247);
      int _t225B#0 = 2;
      real _t225D#1 = λ(T0[])<(T0)^2> (y2249);
      real _t225F#1 = λ(T0[],T1[])<(T0 + T1)> (_t2259,_t225D);
      int _t2261#0 = 2;
      real _t2263#1 = λ(T0[])<(T0)^2> (z224B);
      real _t2265#1 = λ(T0[],T1[])<(T0 + T1)> (_t225F,_t2263);
      real _t2267#1 = λ(T0[])<Cosine(T0)> (_t2265);
      real _t2269#1 = λ(T0[],T1[])<(T0 * T1)> (_t2255,_t2267);
      real _t226B#1 = 0.2e1;
      real _t226D#1 = λ(T0[],T1[])<(T0 * T1)> (_t226B,y2249);
      int _t226F#0 = 2;
      real _t2271#1 = λ(T0[])<(T0)^2> (z224B);
      real _t2273#1 = λ(T0[],T1[])<(T0 * T1)> (_t226D,_t2271);
      int _t2275#0 = 2;
      real _t2277#1 = λ(T0[])<(T0)^2> (x2247);
      int _t2279#0 = 2;
      real _t227B#1 = λ(T0[])<(T0)^2> (y2249);
      real _t227D#1 = λ(T0[],T1[])<(T0 + T1)> (_t2277,_t227B);
      int _t227F#0 = 2;
      real _t2281#1 = λ(T0[])<(T0)^2> (z224B);
      real _t2283#1 = λ(T0[],T1[])<(T0 + T1)> (_t227D,_t2281);
      real _t2285#1 = λ(T0[])<Cosine(T0)> (_t2283);
      real _t2287#1 = λ(T0[],T1[])<(T0 * T1)> (_t2273,_t2285);
      real _t2289#1 = 0.2e1;
      int _t228B#0 = 3;
      real _t228D#1 = λ(T0[])<(T0)^3> (z224B);
      real _t228F#1 = λ(T0[],T1[])<(T0 * T1)> (_t2289,_t228D);
      int _t2291#0 = 2;
      real _t2293#1 = λ(T0[])<(T0)^2> (x2247);
      int _t2295#0 = 2;
      real _t2297#1 = λ(T0[])<(T0)^2> (y2249);
      real _t2299#1 = λ(T0[],T1[])<(T0 + T1)> (_t2293,_t2297);
      int _t229B#0 = 2;
      real _t229D#1 = λ(T0[])<(T0)^2> (z224B);
      real _t229F#1 = λ(T0[],T1[])<(T0 + T1)> (_t2299,_t229D);
      real _t22A1#1 = λ(T0[])<Cosine(T0)> (_t229F);
      real _t22A3#1 = λ(T0[],T1[])<(T0 * T1)> (_t228F,_t22A1);
      real _t22A5#1 = 0.2e1;
      real _t22A7#1 = λ(T0[],T1[])<(T0 * T1)> (_t22A5,z224B);
      int _t22A9#0 = 2;
      real _t22AB#1 = λ(T0[])<(T0)^2> (x2247);
      int _t22AD#0 = 2;
      real _t22AF#1 = λ(T0[])<(T0)^2> (y2249);
      real _t22B1#1 = λ(T0[],T1[])<(T0 + T1)> (_t22AB,_t22AF);
      int _t22B3#0 = 2;
      real _t22B5#1 = λ(T0[])<(T0)^2> (z224B);
      real _t22B7#1 = λ(T0[],T1[])<(T0 + T1)> (_t22B1,_t22B5);
      real _t22B9#1 = λ(T0[])<Sine(T0)> (_t22B7);
      real _t22BB#1 = λ(T0[],T1[])<(T0 * T1)> (_t22A7,_t22B9);
      real _t22BD#1 = λ(T0[],T1[])<(T0 + T1)> (_t22A3,_t22BB);
      tensor[3] g22BF#1 = <tensor[3]>[_t2269,_t2287,_t22BD];
      tensor[3] g22C1#1 = g22BF;
      real x22C4#24 = TensorIndex<tensor[3],[0]>(s2245);
      real y22C6#24 = TensorIndex<tensor[3],[1]>(s2245);
      real z22C8#33 = TensorIndex<tensor[3],[2]>(s2245);
      int _t22CA#1 = -4;
      real _t22CC#1 = IntToReal(_t22CA);
      int _t22CE#0 = 2;
      real _t22D0#1 = λ(T0[])<(T0)^2> (x22C4);
      real _t22D2#1 = λ(T0[],T1[])<(T0 * T1)> (_t22CC,_t22D0);
      int _t22D4#0 = 2;
      real _t22D6#1 = λ(T0[])<(T0)^2> (z22C8);
      real _t22D8#1 = λ(T0[],T1[])<(T0 * T1)> (_t22D2,_t22D6);
      int _t22DA#0 = 2;
      real _t22DC#1 = λ(T0[])<(T0)^2> (x22C4);
      int _t22DE#0 = 2;
      real _t22E0#1 = λ(T0[])<(T0)^2> (y22C6);
      real _t22E2#1 = λ(T0[],T1[])<(T0 + T1)> (_t22DC,_t22E0);
      int _t22E4#0 = 2;
      real _t22E6#1 = λ(T0[])<(T0)^2> (z22C8);
      real _t22E8#1 = λ(T0[],T1[])<(T0 + T1)> (_t22E2,_t22E6);
      real _t22EA#1 = λ(T0[])<Sine(T0)> (_t22E8);
      real _t22EC#1 = λ(T0[],T1[])<(T0 * T1)> (_t22D8,_t22EA);
      real _t22EE#1 = 0.2e1;
      int _t22F0#0 = 2;
      real _t22F2#1 = λ(T0[])<(T0)^2> (z22C8);
      real _t22F4#1 = λ(T0[],T1[])<(T0 * T1)> (_t22EE,_t22F2);
      int _t22F6#0 = 2;
      real _t22F8#1 = λ(T0[])<(T0)^2> (x22C4);
      int _t22FA#0 = 2;
      real _t22FC#1 = λ(T0[])<(T0)^2> (y22C6);
      real _t22FE#1 = λ(T0[],T1[])<(T0 + T1)> (_t22F8,_t22FC);
      int _t2300#0 = 2;
      real _t2302#1 = λ(T0[])<(T0)^2> (z22C8);
      real _t2304#1 = λ(T0[],T1[])<(T0 + T1)> (_t22FE,_t2302);
      real _t2306#1 = λ(T0[])<Cosine(T0)> (_t2304);
      real _t2308#1 = λ(T0[],T1[])<(T0 * T1)> (_t22F4,_t2306);
      real _t230A#1 = λ(T0[],T1[])<(T0 + T1)> (_t22EC,_t2308);
      int _t230C#1 = -4;
      real _t230E#1 = IntToReal(_t230C);
      real _t2310#1 = λ(T0[],T1[])<(T0 * T1)> (_t230E,x22C4);
      real _t2312#1 = λ(T0[],T1[])<(T0 * T1)> (_t2310,y22C6);
      int _t2314#0 = 2;
      real _t2316#1 = λ(T0[])<(T0)^2> (z22C8);
      real _t2318#1 = λ(T0[],T1[])<(T0 * T1)> (_t2312,_t2316);
      int _t231A#0 = 2;
      real _t231C#1 = λ(T0[])<(T0)^2> (x22C4);
      int _t231E#0 = 2;
      real _t2320#1 = λ(T0[])<(T0)^2> (y22C6);
      real _t2322#1 = λ(T0[],T1[])<(T0 + T1)> (_t231C,_t2320);
      int _t2324#0 = 2;
      real _t2326#1 = λ(T0[])<(T0)^2> (z22C8);
      real _t2328#1 = λ(T0[],T1[])<(T0 + T1)> (_t2322,_t2326);
      real _t232A#1 = λ(T0[])<Sine(T0)> (_t2328);
      real _t232C#1 = λ(T0[],T1[])<(T0 * T1)> (_t2318,_t232A);
      int _t232E#1 = -4;
      real _t2330#1 = IntToReal(_t232E);
      real _t2332#1 = λ(T0[],T1[])<(T0 * T1)> (_t2330,x22C4);
      int _t2334#0 = 3;
      real _t2336#1 = λ(T0[])<(T0)^3> (z22C8);
      real _t2338#1 = λ(T0[],T1[])<(T0 * T1)> (_t2332,_t2336);
      int _t233A#0 = 2;
      real _t233C#1 = λ(T0[])<(T0)^2> (x22C4);
      int _t233E#0 = 2;
      real _t2340#1 = λ(T0[])<(T0)^2> (y22C6);
      real _t2342#1 = λ(T0[],T1[])<(T0 + T1)> (_t233C,_t2340);
      int _t2344#0 = 2;
      real _t2346#1 = λ(T0[])<(T0)^2> (z22C8);
      real _t2348#1 = λ(T0[],T1[])<(T0 + T1)> (_t2342,_t2346);
      real _t234A#1 = λ(T0[])<Sine(T0)> (_t2348);
      real _t234C#1 = λ(T0[],T1[])<(T0 * T1)> (_t2338,_t234A);
      real _t234E#1 = 0.4e1;
      real _t2350#1 = λ(T0[],T1[])<(T0 * T1)> (_t234E,x22C4);
      real _t2352#1 = λ(T0[],T1[])<(T0 * T1)> (_t2350,z22C8);
      int _t2354#0 = 2;
      real _t2356#1 = λ(T0[])<(T0)^2> (x22C4);
      int _t2358#0 = 2;
      real _t235A#1 = λ(T0[])<(T0)^2> (y22C6);
      real _t235C#1 = λ(T0[],T1[])<(T0 + T1)> (_t2356,_t235A);
      int _t235E#0 = 2;
      real _t2360#1 = λ(T0[])<(T0)^2> (z22C8);
      real _t2362#1 = λ(T0[],T1[])<(T0 + T1)> (_t235C,_t2360);
      real _t2364#1 = λ(T0[])<Cosine(T0)> (_t2362);
      real _t2366#1 = λ(T0[],T1[])<(T0 * T1)> (_t2352,_t2364);
      real _t2368#1 = λ(T0[],T1[])<(T0 + T1)> (_t234C,_t2366);
      tensor[3] _t236A#1 = <tensor[3]>[_t230A,_t232C,_t2368];
      int _t236C#1 = -4;
      real _t236E#1 = IntToReal(_t236C);
      real _t2370#1 = λ(T0[],T1[])<(T0 * T1)> (_t236E,x22C4);
      real _t2372#1 = λ(T0[],T1[])<(T0 * T1)> (_t2370,y22C6);
      int _t2374#0 = 2;
      real _t2376#1 = λ(T0[])<(T0)^2> (z22C8);
      real _t2378#1 = λ(T0[],T1[])<(T0 * T1)> (_t2372,_t2376);
      int _t237A#0 = 2;
      real _t237C#1 = λ(T0[])<(T0)^2> (x22C4);
      int _t237E#0 = 2;
      real _t2380#1 = λ(T0[])<(T0)^2> (y22C6);
      real _t2382#1 = λ(T0[],T1[])<(T0 + T1)> (_t237C,_t2380);
      int _t2384#0 = 2;
      real _t2386#1 = λ(T0[])<(T0)^2> (z22C8);
      real _t2388#1 = λ(T0[],T1[])<(T0 + T1)> (_t2382,_t2386);
      real _t238A#1 = λ(T0[])<Sine(T0)> (_t2388);
      real _t238C#1 = λ(T0[],T1[])<(T0 * T1)> (_t2378,_t238A);
      int _t238E#1 = -4;
      real _t2390#1 = IntToReal(_t238E);
      int _t2392#0 = 2;
      real _t2394#1 = λ(T0[])<(T0)^2> (y22C6);
      real _t2396#1 = λ(T0[],T1[])<(T0 * T1)> (_t2390,_t2394);
      int _t2398#0 = 2;
      real _t239A#1 = λ(T0[])<(T0)^2> (z22C8);
      real _t239C#1 = λ(T0[],T1[])<(T0 * T1)> (_t2396,_t239A);
      int _t239E#0 = 2;
      real _t23A0#1 = λ(T0[])<(T0)^2> (x22C4);
      int _t23A2#0 = 2;
      real _t23A4#1 = λ(T0[])<(T0)^2> (y22C6);
      real _t23A6#1 = λ(T0[],T1[])<(T0 + T1)> (_t23A0,_t23A4);
      int _t23A8#0 = 2;
      real _t23AA#1 = λ(T0[])<(T0)^2> (z22C8);
      real _t23AC#1 = λ(T0[],T1[])<(T0 + T1)> (_t23A6,_t23AA);
      real _t23AE#1 = λ(T0[])<Sine(T0)> (_t23AC);
      real _t23B0#1 = λ(T0[],T1[])<(T0 * T1)> (_t239C,_t23AE);
      real _t23B2#1 = 0.2e1;
      int _t23B4#0 = 2;
      real _t23B6#1 = λ(T0[])<(T0)^2> (z22C8);
      real _t23B8#1 = λ(T0[],T1[])<(T0 * T1)> (_t23B2,_t23B6);
      int _t23BA#0 = 2;
      real _t23BC#1 = λ(T0[])<(T0)^2> (x22C4);
      int _t23BE#0 = 2;
      real _t23C0#1 = λ(T0[])<(T0)^2> (y22C6);
      real _t23C2#1 = λ(T0[],T1[])<(T0 + T1)> (_t23BC,_t23C0);
      int _t23C4#0 = 2;
      real _t23C6#1 = λ(T0[])<(T0)^2> (z22C8);
      real _t23C8#1 = λ(T0[],T1[])<(T0 + T1)> (_t23C2,_t23C6);
      real _t23CA#1 = λ(T0[])<Cosine(T0)> (_t23C8);
      real _t23CC#1 = λ(T0[],T1[])<(T0 * T1)> (_t23B8,_t23CA);
      real _t23CE#1 = λ(T0[],T1[])<(T0 + T1)> (_t23B0,_t23CC);
      int _t23D0#1 = -4;
      real _t23D2#1 = IntToReal(_t23D0);
      real _t23D4#1 = λ(T0[],T1[])<(T0 * T1)> (_t23D2,y22C6);
      int _t23D6#0 = 3;
      real _t23D8#1 = λ(T0[])<(T0)^3> (z22C8);
      real _t23DA#1 = λ(T0[],T1[])<(T0 * T1)> (_t23D4,_t23D8);
      int _t23DC#0 = 2;
      real _t23DE#1 = λ(T0[])<(T0)^2> (x22C4);
      int _t23E0#0 = 2;
      real _t23E2#1 = λ(T0[])<(T0)^2> (y22C6);
      real _t23E4#1 = λ(T0[],T1[])<(T0 + T1)> (_t23DE,_t23E2);
      int _t23E6#0 = 2;
      real _t23E8#1 = λ(T0[])<(T0)^2> (z22C8);
      real _t23EA#1 = λ(T0[],T1[])<(T0 + T1)> (_t23E4,_t23E8);
      real _t23EC#1 = λ(T0[])<Sine(T0)> (_t23EA);
      real _t23EE#1 = λ(T0[],T1[])<(T0 * T1)> (_t23DA,_t23EC);
      real _t23F0#1 = 0.4e1;
      real _t23F2#1 = λ(T0[],T1[])<(T0 * T1)> (_t23F0,y22C6);
      real _t23F4#1 = λ(T0[],T1[])<(T0 * T1)> (_t23F2,z22C8);
      int _t23F6#0 = 2;
      real _t23F8#1 = λ(T0[])<(T0)^2> (x22C4);
      int _t23FA#0 = 2;
      real _t23FC#1 = λ(T0[])<(T0)^2> (y22C6);
      real _t23FE#1 = λ(T0[],T1[])<(T0 + T1)> (_t23F8,_t23FC);
      int _t2400#0 = 2;
      real _t2402#1 = λ(T0[])<(T0)^2> (z22C8);
      real _t2404#1 = λ(T0[],T1[])<(T0 + T1)> (_t23FE,_t2402);
      real _t2406#1 = λ(T0[])<Cosine(T0)> (_t2404);
      real _t2408#1 = λ(T0[],T1[])<(T0 * T1)> (_t23F4,_t2406);
      real _t240A#1 = λ(T0[],T1[])<(T0 + T1)> (_t23EE,_t2408);
      tensor[3] _t240C#1 = <tensor[3]>[_t238C,_t23CE,_t240A];
      int _t240E#1 = -4;
      real _t2410#1 = IntToReal(_t240E);
      real _t2412#1 = λ(T0[],T1[])<(T0 * T1)> (_t2410,x22C4);
      int _t2414#0 = 3;
      real _t2416#1 = λ(T0[])<(T0)^3> (z22C8);
      real _t2418#1 = λ(T0[],T1[])<(T0 * T1)> (_t2412,_t2416);
      int _t241A#0 = 2;
      real _t241C#1 = λ(T0[])<(T0)^2> (x22C4);
      int _t241E#0 = 2;
      real _t2420#1 = λ(T0[])<(T0)^2> (y22C6);
      real _t2422#1 = λ(T0[],T1[])<(T0 + T1)> (_t241C,_t2420);
      int _t2424#0 = 2;
      real _t2426#1 = λ(T0[])<(T0)^2> (z22C8);
      real _t2428#1 = λ(T0[],T1[])<(T0 + T1)> (_t2422,_t2426);
      real _t242A#1 = λ(T0[])<Sine(T0)> (_t2428);
      real _t242C#1 = λ(T0[],T1[])<(T0 * T1)> (_t2418,_t242A);
      real _t242E#1 = 0.4e1;
      real _t2430#1 = λ(T0[],T1[])<(T0 * T1)> (_t242E,x22C4);
      real _t2432#1 = λ(T0[],T1[])<(T0 * T1)> (_t2430,z22C8);
      int _t2434#0 = 2;
      real _t2436#1 = λ(T0[])<(T0)^2> (x22C4);
      int _t2438#0 = 2;
      real _t243A#1 = λ(T0[])<(T0)^2> (y22C6);
      real _t243C#1 = λ(T0[],T1[])<(T0 + T1)> (_t2436,_t243A);
      int _t243E#0 = 2;
      real _t2440#1 = λ(T0[])<(T0)^2> (z22C8);
      real _t2442#1 = λ(T0[],T1[])<(T0 + T1)> (_t243C,_t2440);
      real _t2444#1 = λ(T0[])<Cosine(T0)> (_t2442);
      real _t2446#1 = λ(T0[],T1[])<(T0 * T1)> (_t2432,_t2444);
      real _t2448#1 = λ(T0[],T1[])<(T0 + T1)> (_t242C,_t2446);
      int _t244A#1 = -4;
      real _t244C#1 = IntToReal(_t244A);
      real _t244E#1 = λ(T0[],T1[])<(T0 * T1)> (_t244C,y22C6);
      int _t2450#0 = 3;
      real _t2452#1 = λ(T0[])<(T0)^3> (z22C8);
      real _t2454#1 = λ(T0[],T1[])<(T0 * T1)> (_t244E,_t2452);
      int _t2456#0 = 2;
      real _t2458#1 = λ(T0[])<(T0)^2> (x22C4);
      int _t245A#0 = 2;
      real _t245C#1 = λ(T0[])<(T0)^2> (y22C6);
      real _t245E#1 = λ(T0[],T1[])<(T0 + T1)> (_t2458,_t245C);
      int _t2460#0 = 2;
      real _t2462#1 = λ(T0[])<(T0)^2> (z22C8);
      real _t2464#1 = λ(T0[],T1[])<(T0 + T1)> (_t245E,_t2462);
      real _t2466#1 = λ(T0[])<Sine(T0)> (_t2464);
      real _t2468#1 = λ(T0[],T1[])<(T0 * T1)> (_t2454,_t2466);
      real _t246A#1 = 0.4e1;
      real _t246C#1 = λ(T0[],T1[])<(T0 * T1)> (_t246A,y22C6);
      real _t246E#1 = λ(T0[],T1[])<(T0 * T1)> (_t246C,z22C8);
      int _t2470#0 = 2;
      real _t2472#1 = λ(T0[])<(T0)^2> (x22C4);
      int _t2474#0 = 2;
      real _t2476#1 = λ(T0[])<(T0)^2> (y22C6);
      real _t2478#1 = λ(T0[],T1[])<(T0 + T1)> (_t2472,_t2476);
      int _t247A#0 = 2;
      real _t247C#1 = λ(T0[])<(T0)^2> (z22C8);
      real _t247E#1 = λ(T0[],T1[])<(T0 + T1)> (_t2478,_t247C);
      real _t2480#1 = λ(T0[])<Cosine(T0)> (_t247E);
      real _t2482#1 = λ(T0[],T1[])<(T0 * T1)> (_t246E,_t2480);
      real _t2484#1 = λ(T0[],T1[])<(T0 + T1)> (_t2468,_t2482);
      int _t2486#1 = -4;
      real _t2488#1 = IntToReal(_t2486);
      int _t248A#0 = 4;
      real _t248C#1 = λ(T0[])<(T0)^4> (z22C8);
      real _t248E#1 = λ(T0[],T1[])<(T0 * T1)> (_t2488,_t248C);
      int _t2490#0 = 2;
      real _t2492#1 = λ(T0[])<(T0)^2> (x22C4);
      int _t2494#0 = 2;
      real _t2496#1 = λ(T0[])<(T0)^2> (y22C6);
      real _t2498#1 = λ(T0[],T1[])<(T0 + T1)> (_t2492,_t2496);
      int _t249A#0 = 2;
      real _t249C#1 = λ(T0[])<(T0)^2> (z22C8);
      real _t249E#1 = λ(T0[],T1[])<(T0 + T1)> (_t2498,_t249C);
      real _t24A0#1 = λ(T0[])<Sine(T0)> (_t249E);
      real _t24A2#1 = λ(T0[],T1[])<(T0 * T1)> (_t248E,_t24A0);
      real _t24A4#1 = 0.1e2;
      int _t24A6#0 = 2;
      real _t24A8#1 = λ(T0[])<(T0)^2> (z22C8);
      real _t24AA#1 = λ(T0[],T1[])<(T0 * T1)> (_t24A4,_t24A8);
      int _t24AC#0 = 2;
      real _t24AE#1 = λ(T0[])<(T0)^2> (x22C4);
      int _t24B0#0 = 2;
      real _t24B2#1 = λ(T0[])<(T0)^2> (y22C6);
      real _t24B4#1 = λ(T0[],T1[])<(T0 + T1)> (_t24AE,_t24B2);
      int _t24B6#0 = 2;
      real _t24B8#1 = λ(T0[])<(T0)^2> (z22C8);
      real _t24BA#1 = λ(T0[],T1[])<(T0 + T1)> (_t24B4,_t24B8);
      real _t24BC#1 = λ(T0[])<Cosine(T0)> (_t24BA);
      real _t24BE#1 = λ(T0[],T1[])<(T0 * T1)> (_t24AA,_t24BC);
      real _t24C0#1 = λ(T0[],T1[])<(T0 + T1)> (_t24A2,_t24BE);
      real _t24C2#1 = 0.2e1;
      int _t24C4#0 = 2;
      real _t24C6#1 = λ(T0[])<(T0)^2> (x22C4);
      int _t24C8#0 = 2;
      real _t24CA#1 = λ(T0[])<(T0)^2> (y22C6);
      real _t24CC#1 = λ(T0[],T1[])<(T0 + T1)> (_t24C6,_t24CA);
      int _t24CE#0 = 2;
      real _t24D0#1 = λ(T0[])<(T0)^2> (z22C8);
      real _t24D2#1 = λ(T0[],T1[])<(T0 + T1)> (_t24CC,_t24D0);
      real _t24D4#1 = λ(T0[])<Sine(T0)> (_t24D2);
      real _t24D6#1 = λ(T0[],T1[])<(T0 * T1)> (_t24C2,_t24D4);
      real _t24D8#1 = λ(T0[],T1[])<(T0 + T1)> (_t24C0,_t24D6);
      tensor[3] _t24DA#1 = <tensor[3]>[_t2448,_t2484,_t24D8];
      tensor[3,3] hess24DC#1 = <tensor[3,3]>[_t236A,_t240C,_t24DA];
      tensor[3,3] H24DE#2 = hess24DC;
      (real[3] evals24E1#0,tensor[3][3] E24E0#2) = Eigen3x3(H24DE);
      (real[3] L24E3#1,tensor[3][3] evecs24E4#0) = Eigen3x3(H24DE);
      real _t24E6#1 = 0.1e1;
      int _t24E8#1 = 2;
      real _t24EA#1 = Subscript<real[3]>(L24E3,_t24E8);
      real _t24EC#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t24E6,_t24EA);
      real _t24EE#1 = λ(T0[])<Neg(T0)> (_t24EC);
      int _t24F0#1 = 2;
      tensor[3] _t24F2#1 = Subscript<tensor[3][3]>(E24E0,_t24F0);
      tensor[3] _t24F4#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (_t24EE,_t24F2);
      int _t24F6#1 = 2;
      tensor[3] _t24F8#1 = Subscript<tensor[3][3]>(E24E0,_t24F6);
      tensor[3,3] _t24FA#1 = λ(T0[3],T1[3])<(T0_{i0} * T1_{i1})>_{3 3} (_t24F4,_t24F8);
      tensor[3] up24FC#7 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (_t24FA,g22C1);
      real _t24FF#1 = TensorIndex<tensor[3],[0]>(up24FC);
      real _t2501#1 = TensorIndex<tensor[3],[0]>(up24FC);
      bool _t2503#1 = EQ<real>(_t24FF,_t2501);
      bool _t2505#1 = BNot(_t2503);
      if _t2505 then goto ASSIGN250A else goto ASSIGN250D
    ASSIGN250A:  preds = [COND2523]
      bool _t2508#1 = true;
      goto JOIN2507
    JOIN2507:  preds = [ASSIGN250A,ASSIGN2522]
      bool _t2509#1 = phi(_t2508,_t2521)
      if _t2509 then goto ASSIGN2526 else goto JOIN2524
    ASSIGN2526:  preds = [COND252E]
      real _t2525#1 = +inf;
      real _t2527#1 = +inf;
      real _t2529#1 = +inf;
      tensor[3] _t252B#1 = <tensor[3]>[_t2525,_t2527,_t2529];
      return _t252B
      goto JOIN2524
    JOIN2524:  preds = [*RETURN(_t252B)252D,COND252E]
      return up24FC
    ASSIGN250D:  preds = [COND2523]
      real _t250C#1 = TensorIndex<tensor[3],[1]>(up24FC);
      real _t250E#1 = TensorIndex<tensor[3],[1]>(up24FC);
      bool _t2510#1 = EQ<real>(_t250C,_t250E);
      bool _t2512#1 = BNot(_t2510);
      if _t2512 then goto ASSIGN2517 else goto ASSIGN2519
    ASSIGN2517:  preds = [COND2520]
      bool _t2515#1 = true;
      goto JOIN2514
    JOIN2514:  preds = [ASSIGN2517,ASSIGN251F]
      bool _t2516#1 = phi(_t2515,_t251E)
      bool _t2521#1 = _t2516;
      goto JOIN2507
    ASSIGN2519:  preds = [COND2520]
      real _t2518#1 = TensorIndex<tensor[3],[2]>(up24FC);
      real _t251A#1 = TensorIndex<tensor[3],[2]>(up24FC);
      bool _t251C#1 = EQ<real>(_t2518,_t251A);
      bool _t251E#1 = BNot(_t251C);
      goto JOIN2514
}
  function tensor[3,3] fPerp27E7 (tensor[3] s2532#6) {
    ENTRY27E6:  preds = []
      real x2534#5 = TensorIndex<tensor[3],[0]>(s2532);
      real y2536#5 = TensorIndex<tensor[3],[1]>(s2532);
      real z2538#8 = TensorIndex<tensor[3],[2]>(s2532);
      real _t253A#1 = 0.2e1;
      real _t253C#1 = λ(T0[],T1[])<(T0 * T1)> (_t253A,x2534);
      int _t253E#0 = 2;
      real _t2540#1 = λ(T0[])<(T0)^2> (z2538);
      real _t2542#1 = λ(T0[],T1[])<(T0 * T1)> (_t253C,_t2540);
      int _t2544#0 = 2;
      real _t2546#1 = λ(T0[])<(T0)^2> (x2534);
      int _t2548#0 = 2;
      real _t254A#1 = λ(T0[])<(T0)^2> (y2536);
      real _t254C#1 = λ(T0[],T1[])<(T0 + T1)> (_t2546,_t254A);
      int _t254E#0 = 2;
      real _t2550#1 = λ(T0[])<(T0)^2> (z2538);
      real _t2552#1 = λ(T0[],T1[])<(T0 + T1)> (_t254C,_t2550);
      real _t2554#1 = λ(T0[])<Cosine(T0)> (_t2552);
      real _t2556#1 = λ(T0[],T1[])<(T0 * T1)> (_t2542,_t2554);
      real _t2558#1 = 0.2e1;
      real _t255A#1 = λ(T0[],T1[])<(T0 * T1)> (_t2558,y2536);
      int _t255C#0 = 2;
      real _t255E#1 = λ(T0[])<(T0)^2> (z2538);
      real _t2560#1 = λ(T0[],T1[])<(T0 * T1)> (_t255A,_t255E);
      int _t2562#0 = 2;
      real _t2564#1 = λ(T0[])<(T0)^2> (x2534);
      int _t2566#0 = 2;
      real _t2568#1 = λ(T0[])<(T0)^2> (y2536);
      real _t256A#1 = λ(T0[],T1[])<(T0 + T1)> (_t2564,_t2568);
      int _t256C#0 = 2;
      real _t256E#1 = λ(T0[])<(T0)^2> (z2538);
      real _t2570#1 = λ(T0[],T1[])<(T0 + T1)> (_t256A,_t256E);
      real _t2572#1 = λ(T0[])<Cosine(T0)> (_t2570);
      real _t2574#1 = λ(T0[],T1[])<(T0 * T1)> (_t2560,_t2572);
      real _t2576#1 = 0.2e1;
      int _t2578#0 = 3;
      real _t257A#1 = λ(T0[])<(T0)^3> (z2538);
      real _t257C#1 = λ(T0[],T1[])<(T0 * T1)> (_t2576,_t257A);
      int _t257E#0 = 2;
      real _t2580#1 = λ(T0[])<(T0)^2> (x2534);
      int _t2582#0 = 2;
      real _t2584#1 = λ(T0[])<(T0)^2> (y2536);
      real _t2586#1 = λ(T0[],T1[])<(T0 + T1)> (_t2580,_t2584);
      int _t2588#0 = 2;
      real _t258A#1 = λ(T0[])<(T0)^2> (z2538);
      real _t258C#1 = λ(T0[],T1[])<(T0 + T1)> (_t2586,_t258A);
      real _t258E#1 = λ(T0[])<Cosine(T0)> (_t258C);
      real _t2590#1 = λ(T0[],T1[])<(T0 * T1)> (_t257C,_t258E);
      real _t2592#1 = 0.2e1;
      real _t2594#1 = λ(T0[],T1[])<(T0 * T1)> (_t2592,z2538);
      int _t2596#0 = 2;
      real _t2598#1 = λ(T0[])<(T0)^2> (x2534);
      int _t259A#0 = 2;
      real _t259C#1 = λ(T0[])<(T0)^2> (y2536);
      real _t259E#1 = λ(T0[],T1[])<(T0 + T1)> (_t2598,_t259C);
      int _t25A0#0 = 2;
      real _t25A2#1 = λ(T0[])<(T0)^2> (z2538);
      real _t25A4#1 = λ(T0[],T1[])<(T0 + T1)> (_t259E,_t25A2);
      real _t25A6#1 = λ(T0[])<Sine(T0)> (_t25A4);
      real _t25A8#1 = λ(T0[],T1[])<(T0 * T1)> (_t2594,_t25A6);
      real _t25AA#1 = λ(T0[],T1[])<(T0 + T1)> (_t2590,_t25A8);
      tensor[3] g25AC#1 = <tensor[3]>[_t2556,_t2574,_t25AA];
      tensor[3] g25AE#0 = g25AC;
      real x25B1#24 = TensorIndex<tensor[3],[0]>(s2532);
      real y25B3#24 = TensorIndex<tensor[3],[1]>(s2532);
      real z25B5#33 = TensorIndex<tensor[3],[2]>(s2532);
      int _t25B7#1 = -4;
      real _t25B9#1 = IntToReal(_t25B7);
      int _t25BB#0 = 2;
      real _t25BD#1 = λ(T0[])<(T0)^2> (x25B1);
      real _t25BF#1 = λ(T0[],T1[])<(T0 * T1)> (_t25B9,_t25BD);
      int _t25C1#0 = 2;
      real _t25C3#1 = λ(T0[])<(T0)^2> (z25B5);
      real _t25C5#1 = λ(T0[],T1[])<(T0 * T1)> (_t25BF,_t25C3);
      int _t25C7#0 = 2;
      real _t25C9#1 = λ(T0[])<(T0)^2> (x25B1);
      int _t25CB#0 = 2;
      real _t25CD#1 = λ(T0[])<(T0)^2> (y25B3);
      real _t25CF#1 = λ(T0[],T1[])<(T0 + T1)> (_t25C9,_t25CD);
      int _t25D1#0 = 2;
      real _t25D3#1 = λ(T0[])<(T0)^2> (z25B5);
      real _t25D5#1 = λ(T0[],T1[])<(T0 + T1)> (_t25CF,_t25D3);
      real _t25D7#1 = λ(T0[])<Sine(T0)> (_t25D5);
      real _t25D9#1 = λ(T0[],T1[])<(T0 * T1)> (_t25C5,_t25D7);
      real _t25DB#1 = 0.2e1;
      int _t25DD#0 = 2;
      real _t25DF#1 = λ(T0[])<(T0)^2> (z25B5);
      real _t25E1#1 = λ(T0[],T1[])<(T0 * T1)> (_t25DB,_t25DF);
      int _t25E3#0 = 2;
      real _t25E5#1 = λ(T0[])<(T0)^2> (x25B1);
      int _t25E7#0 = 2;
      real _t25E9#1 = λ(T0[])<(T0)^2> (y25B3);
      real _t25EB#1 = λ(T0[],T1[])<(T0 + T1)> (_t25E5,_t25E9);
      int _t25ED#0 = 2;
      real _t25EF#1 = λ(T0[])<(T0)^2> (z25B5);
      real _t25F1#1 = λ(T0[],T1[])<(T0 + T1)> (_t25EB,_t25EF);
      real _t25F3#1 = λ(T0[])<Cosine(T0)> (_t25F1);
      real _t25F5#1 = λ(T0[],T1[])<(T0 * T1)> (_t25E1,_t25F3);
      real _t25F7#1 = λ(T0[],T1[])<(T0 + T1)> (_t25D9,_t25F5);
      int _t25F9#1 = -4;
      real _t25FB#1 = IntToReal(_t25F9);
      real _t25FD#1 = λ(T0[],T1[])<(T0 * T1)> (_t25FB,x25B1);
      real _t25FF#1 = λ(T0[],T1[])<(T0 * T1)> (_t25FD,y25B3);
      int _t2601#0 = 2;
      real _t2603#1 = λ(T0[])<(T0)^2> (z25B5);
      real _t2605#1 = λ(T0[],T1[])<(T0 * T1)> (_t25FF,_t2603);
      int _t2607#0 = 2;
      real _t2609#1 = λ(T0[])<(T0)^2> (x25B1);
      int _t260B#0 = 2;
      real _t260D#1 = λ(T0[])<(T0)^2> (y25B3);
      real _t260F#1 = λ(T0[],T1[])<(T0 + T1)> (_t2609,_t260D);
      int _t2611#0 = 2;
      real _t2613#1 = λ(T0[])<(T0)^2> (z25B5);
      real _t2615#1 = λ(T0[],T1[])<(T0 + T1)> (_t260F,_t2613);
      real _t2617#1 = λ(T0[])<Sine(T0)> (_t2615);
      real _t2619#1 = λ(T0[],T1[])<(T0 * T1)> (_t2605,_t2617);
      int _t261B#1 = -4;
      real _t261D#1 = IntToReal(_t261B);
      real _t261F#1 = λ(T0[],T1[])<(T0 * T1)> (_t261D,x25B1);
      int _t2621#0 = 3;
      real _t2623#1 = λ(T0[])<(T0)^3> (z25B5);
      real _t2625#1 = λ(T0[],T1[])<(T0 * T1)> (_t261F,_t2623);
      int _t2627#0 = 2;
      real _t2629#1 = λ(T0[])<(T0)^2> (x25B1);
      int _t262B#0 = 2;
      real _t262D#1 = λ(T0[])<(T0)^2> (y25B3);
      real _t262F#1 = λ(T0[],T1[])<(T0 + T1)> (_t2629,_t262D);
      int _t2631#0 = 2;
      real _t2633#1 = λ(T0[])<(T0)^2> (z25B5);
      real _t2635#1 = λ(T0[],T1[])<(T0 + T1)> (_t262F,_t2633);
      real _t2637#1 = λ(T0[])<Sine(T0)> (_t2635);
      real _t2639#1 = λ(T0[],T1[])<(T0 * T1)> (_t2625,_t2637);
      real _t263B#1 = 0.4e1;
      real _t263D#1 = λ(T0[],T1[])<(T0 * T1)> (_t263B,x25B1);
      real _t263F#1 = λ(T0[],T1[])<(T0 * T1)> (_t263D,z25B5);
      int _t2641#0 = 2;
      real _t2643#1 = λ(T0[])<(T0)^2> (x25B1);
      int _t2645#0 = 2;
      real _t2647#1 = λ(T0[])<(T0)^2> (y25B3);
      real _t2649#1 = λ(T0[],T1[])<(T0 + T1)> (_t2643,_t2647);
      int _t264B#0 = 2;
      real _t264D#1 = λ(T0[])<(T0)^2> (z25B5);
      real _t264F#1 = λ(T0[],T1[])<(T0 + T1)> (_t2649,_t264D);
      real _t2651#1 = λ(T0[])<Cosine(T0)> (_t264F);
      real _t2653#1 = λ(T0[],T1[])<(T0 * T1)> (_t263F,_t2651);
      real _t2655#1 = λ(T0[],T1[])<(T0 + T1)> (_t2639,_t2653);
      tensor[3] _t2657#1 = <tensor[3]>[_t25F7,_t2619,_t2655];
      int _t2659#1 = -4;
      real _t265B#1 = IntToReal(_t2659);
      real _t265D#1 = λ(T0[],T1[])<(T0 * T1)> (_t265B,x25B1);
      real _t265F#1 = λ(T0[],T1[])<(T0 * T1)> (_t265D,y25B3);
      int _t2661#0 = 2;
      real _t2663#1 = λ(T0[])<(T0)^2> (z25B5);
      real _t2665#1 = λ(T0[],T1[])<(T0 * T1)> (_t265F,_t2663);
      int _t2667#0 = 2;
      real _t2669#1 = λ(T0[])<(T0)^2> (x25B1);
      int _t266B#0 = 2;
      real _t266D#1 = λ(T0[])<(T0)^2> (y25B3);
      real _t266F#1 = λ(T0[],T1[])<(T0 + T1)> (_t2669,_t266D);
      int _t2671#0 = 2;
      real _t2673#1 = λ(T0[])<(T0)^2> (z25B5);
      real _t2675#1 = λ(T0[],T1[])<(T0 + T1)> (_t266F,_t2673);
      real _t2677#1 = λ(T0[])<Sine(T0)> (_t2675);
      real _t2679#1 = λ(T0[],T1[])<(T0 * T1)> (_t2665,_t2677);
      int _t267B#1 = -4;
      real _t267D#1 = IntToReal(_t267B);
      int _t267F#0 = 2;
      real _t2681#1 = λ(T0[])<(T0)^2> (y25B3);
      real _t2683#1 = λ(T0[],T1[])<(T0 * T1)> (_t267D,_t2681);
      int _t2685#0 = 2;
      real _t2687#1 = λ(T0[])<(T0)^2> (z25B5);
      real _t2689#1 = λ(T0[],T1[])<(T0 * T1)> (_t2683,_t2687);
      int _t268B#0 = 2;
      real _t268D#1 = λ(T0[])<(T0)^2> (x25B1);
      int _t268F#0 = 2;
      real _t2691#1 = λ(T0[])<(T0)^2> (y25B3);
      real _t2693#1 = λ(T0[],T1[])<(T0 + T1)> (_t268D,_t2691);
      int _t2695#0 = 2;
      real _t2697#1 = λ(T0[])<(T0)^2> (z25B5);
      real _t2699#1 = λ(T0[],T1[])<(T0 + T1)> (_t2693,_t2697);
      real _t269B#1 = λ(T0[])<Sine(T0)> (_t2699);
      real _t269D#1 = λ(T0[],T1[])<(T0 * T1)> (_t2689,_t269B);
      real _t269F#1 = 0.2e1;
      int _t26A1#0 = 2;
      real _t26A3#1 = λ(T0[])<(T0)^2> (z25B5);
      real _t26A5#1 = λ(T0[],T1[])<(T0 * T1)> (_t269F,_t26A3);
      int _t26A7#0 = 2;
      real _t26A9#1 = λ(T0[])<(T0)^2> (x25B1);
      int _t26AB#0 = 2;
      real _t26AD#1 = λ(T0[])<(T0)^2> (y25B3);
      real _t26AF#1 = λ(T0[],T1[])<(T0 + T1)> (_t26A9,_t26AD);
      int _t26B1#0 = 2;
      real _t26B3#1 = λ(T0[])<(T0)^2> (z25B5);
      real _t26B5#1 = λ(T0[],T1[])<(T0 + T1)> (_t26AF,_t26B3);
      real _t26B7#1 = λ(T0[])<Cosine(T0)> (_t26B5);
      real _t26B9#1 = λ(T0[],T1[])<(T0 * T1)> (_t26A5,_t26B7);
      real _t26BB#1 = λ(T0[],T1[])<(T0 + T1)> (_t269D,_t26B9);
      int _t26BD#1 = -4;
      real _t26BF#1 = IntToReal(_t26BD);
      real _t26C1#1 = λ(T0[],T1[])<(T0 * T1)> (_t26BF,y25B3);
      int _t26C3#0 = 3;
      real _t26C5#1 = λ(T0[])<(T0)^3> (z25B5);
      real _t26C7#1 = λ(T0[],T1[])<(T0 * T1)> (_t26C1,_t26C5);
      int _t26C9#0 = 2;
      real _t26CB#1 = λ(T0[])<(T0)^2> (x25B1);
      int _t26CD#0 = 2;
      real _t26CF#1 = λ(T0[])<(T0)^2> (y25B3);
      real _t26D1#1 = λ(T0[],T1[])<(T0 + T1)> (_t26CB,_t26CF);
      int _t26D3#0 = 2;
      real _t26D5#1 = λ(T0[])<(T0)^2> (z25B5);
      real _t26D7#1 = λ(T0[],T1[])<(T0 + T1)> (_t26D1,_t26D5);
      real _t26D9#1 = λ(T0[])<Sine(T0)> (_t26D7);
      real _t26DB#1 = λ(T0[],T1[])<(T0 * T1)> (_t26C7,_t26D9);
      real _t26DD#1 = 0.4e1;
      real _t26DF#1 = λ(T0[],T1[])<(T0 * T1)> (_t26DD,y25B3);
      real _t26E1#1 = λ(T0[],T1[])<(T0 * T1)> (_t26DF,z25B5);
      int _t26E3#0 = 2;
      real _t26E5#1 = λ(T0[])<(T0)^2> (x25B1);
      int _t26E7#0 = 2;
      real _t26E9#1 = λ(T0[])<(T0)^2> (y25B3);
      real _t26EB#1 = λ(T0[],T1[])<(T0 + T1)> (_t26E5,_t26E9);
      int _t26ED#0 = 2;
      real _t26EF#1 = λ(T0[])<(T0)^2> (z25B5);
      real _t26F1#1 = λ(T0[],T1[])<(T0 + T1)> (_t26EB,_t26EF);
      real _t26F3#1 = λ(T0[])<Cosine(T0)> (_t26F1);
      real _t26F5#1 = λ(T0[],T1[])<(T0 * T1)> (_t26E1,_t26F3);
      real _t26F7#1 = λ(T0[],T1[])<(T0 + T1)> (_t26DB,_t26F5);
      tensor[3] _t26F9#1 = <tensor[3]>[_t2679,_t26BB,_t26F7];
      int _t26FB#1 = -4;
      real _t26FD#1 = IntToReal(_t26FB);
      real _t26FF#1 = λ(T0[],T1[])<(T0 * T1)> (_t26FD,x25B1);
      int _t2701#0 = 3;
      real _t2703#1 = λ(T0[])<(T0)^3> (z25B5);
      real _t2705#1 = λ(T0[],T1[])<(T0 * T1)> (_t26FF,_t2703);
      int _t2707#0 = 2;
      real _t2709#1 = λ(T0[])<(T0)^2> (x25B1);
      int _t270B#0 = 2;
      real _t270D#1 = λ(T0[])<(T0)^2> (y25B3);
      real _t270F#1 = λ(T0[],T1[])<(T0 + T1)> (_t2709,_t270D);
      int _t2711#0 = 2;
      real _t2713#1 = λ(T0[])<(T0)^2> (z25B5);
      real _t2715#1 = λ(T0[],T1[])<(T0 + T1)> (_t270F,_t2713);
      real _t2717#1 = λ(T0[])<Sine(T0)> (_t2715);
      real _t2719#1 = λ(T0[],T1[])<(T0 * T1)> (_t2705,_t2717);
      real _t271B#1 = 0.4e1;
      real _t271D#1 = λ(T0[],T1[])<(T0 * T1)> (_t271B,x25B1);
      real _t271F#1 = λ(T0[],T1[])<(T0 * T1)> (_t271D,z25B5);
      int _t2721#0 = 2;
      real _t2723#1 = λ(T0[])<(T0)^2> (x25B1);
      int _t2725#0 = 2;
      real _t2727#1 = λ(T0[])<(T0)^2> (y25B3);
      real _t2729#1 = λ(T0[],T1[])<(T0 + T1)> (_t2723,_t2727);
      int _t272B#0 = 2;
      real _t272D#1 = λ(T0[])<(T0)^2> (z25B5);
      real _t272F#1 = λ(T0[],T1[])<(T0 + T1)> (_t2729,_t272D);
      real _t2731#1 = λ(T0[])<Cosine(T0)> (_t272F);
      real _t2733#1 = λ(T0[],T1[])<(T0 * T1)> (_t271F,_t2731);
      real _t2735#1 = λ(T0[],T1[])<(T0 + T1)> (_t2719,_t2733);
      int _t2737#1 = -4;
      real _t2739#1 = IntToReal(_t2737);
      real _t273B#1 = λ(T0[],T1[])<(T0 * T1)> (_t2739,y25B3);
      int _t273D#0 = 3;
      real _t273F#1 = λ(T0[])<(T0)^3> (z25B5);
      real _t2741#1 = λ(T0[],T1[])<(T0 * T1)> (_t273B,_t273F);
      int _t2743#0 = 2;
      real _t2745#1 = λ(T0[])<(T0)^2> (x25B1);
      int _t2747#0 = 2;
      real _t2749#1 = λ(T0[])<(T0)^2> (y25B3);
      real _t274B#1 = λ(T0[],T1[])<(T0 + T1)> (_t2745,_t2749);
      int _t274D#0 = 2;
      real _t274F#1 = λ(T0[])<(T0)^2> (z25B5);
      real _t2751#1 = λ(T0[],T1[])<(T0 + T1)> (_t274B,_t274F);
      real _t2753#1 = λ(T0[])<Sine(T0)> (_t2751);
      real _t2755#1 = λ(T0[],T1[])<(T0 * T1)> (_t2741,_t2753);
      real _t2757#1 = 0.4e1;
      real _t2759#1 = λ(T0[],T1[])<(T0 * T1)> (_t2757,y25B3);
      real _t275B#1 = λ(T0[],T1[])<(T0 * T1)> (_t2759,z25B5);
      int _t275D#0 = 2;
      real _t275F#1 = λ(T0[])<(T0)^2> (x25B1);
      int _t2761#0 = 2;
      real _t2763#1 = λ(T0[])<(T0)^2> (y25B3);
      real _t2765#1 = λ(T0[],T1[])<(T0 + T1)> (_t275F,_t2763);
      int _t2767#0 = 2;
      real _t2769#1 = λ(T0[])<(T0)^2> (z25B5);
      real _t276B#1 = λ(T0[],T1[])<(T0 + T1)> (_t2765,_t2769);
      real _t276D#1 = λ(T0[])<Cosine(T0)> (_t276B);
      real _t276F#1 = λ(T0[],T1[])<(T0 * T1)> (_t275B,_t276D);
      real _t2771#1 = λ(T0[],T1[])<(T0 + T1)> (_t2755,_t276F);
      int _t2773#1 = -4;
      real _t2775#1 = IntToReal(_t2773);
      int _t2777#0 = 4;
      real _t2779#1 = λ(T0[])<(T0)^4> (z25B5);
      real _t277B#1 = λ(T0[],T1[])<(T0 * T1)> (_t2775,_t2779);
      int _t277D#0 = 2;
      real _t277F#1 = λ(T0[])<(T0)^2> (x25B1);
      int _t2781#0 = 2;
      real _t2783#1 = λ(T0[])<(T0)^2> (y25B3);
      real _t2785#1 = λ(T0[],T1[])<(T0 + T1)> (_t277F,_t2783);
      int _t2787#0 = 2;
      real _t2789#1 = λ(T0[])<(T0)^2> (z25B5);
      real _t278B#1 = λ(T0[],T1[])<(T0 + T1)> (_t2785,_t2789);
      real _t278D#1 = λ(T0[])<Sine(T0)> (_t278B);
      real _t278F#1 = λ(T0[],T1[])<(T0 * T1)> (_t277B,_t278D);
      real _t2791#1 = 0.1e2;
      int _t2793#0 = 2;
      real _t2795#1 = λ(T0[])<(T0)^2> (z25B5);
      real _t2797#1 = λ(T0[],T1[])<(T0 * T1)> (_t2791,_t2795);
      int _t2799#0 = 2;
      real _t279B#1 = λ(T0[])<(T0)^2> (x25B1);
      int _t279D#0 = 2;
      real _t279F#1 = λ(T0[])<(T0)^2> (y25B3);
      real _t27A1#1 = λ(T0[],T1[])<(T0 + T1)> (_t279B,_t279F);
      int _t27A3#0 = 2;
      real _t27A5#1 = λ(T0[])<(T0)^2> (z25B5);
      real _t27A7#1 = λ(T0[],T1[])<(T0 + T1)> (_t27A1,_t27A5);
      real _t27A9#1 = λ(T0[])<Cosine(T0)> (_t27A7);
      real _t27AB#1 = λ(T0[],T1[])<(T0 * T1)> (_t2797,_t27A9);
      real _t27AD#1 = λ(T0[],T1[])<(T0 + T1)> (_t278F,_t27AB);
      real _t27AF#1 = 0.2e1;
      int _t27B1#0 = 2;
      real _t27B3#1 = λ(T0[])<(T0)^2> (x25B1);
      int _t27B5#0 = 2;
      real _t27B7#1 = λ(T0[])<(T0)^2> (y25B3);
      real _t27B9#1 = λ(T0[],T1[])<(T0 + T1)> (_t27B3,_t27B7);
      int _t27BB#0 = 2;
      real _t27BD#1 = λ(T0[])<(T0)^2> (z25B5);
      real _t27BF#1 = λ(T0[],T1[])<(T0 + T1)> (_t27B9,_t27BD);
      real _t27C1#1 = λ(T0[])<Sine(T0)> (_t27BF);
      real _t27C3#1 = λ(T0[],T1[])<(T0 * T1)> (_t27AF,_t27C1);
      real _t27C5#1 = λ(T0[],T1[])<(T0 + T1)> (_t27AD,_t27C3);
      tensor[3] _t27C7#1 = <tensor[3]>[_t2735,_t2771,_t27C5];
      tensor[3,3] hess27C9#1 = <tensor[3,3]>[_t2657,_t26F9,_t27C7];
      tensor[3,3] H27CB#1 = hess27C9;
      (real[3] evals27CE#0,tensor[3][3] _t27CD#1) = Eigen3x3(H27CB);
      int _t27D0#1 = 2;
      tensor[3] E227D2#2 = Subscript<tensor[3][3]>(_t27CD,_t27D0);
      tensor[3,3] _t27D4#1 = λ()<δ_{i0,i1}>_{3 3} ();
      tensor[3,3] _t27D6#1 = λ(T0[3],T1[3])<(T0_{i0} * T1_{i1})>_{3 3} (E227D2,E227D2);
      tensor[3,3] m27D8#3 = λ(T0[3 3],T1[3 3])<(T0_{i0,i1}) - (T1_{i0,i1})>_{3 3} (_t27D4,_t27D6);
      real t27DA#2 = λ(T0[3 3],T1[3 3])<Σ(i0=0..2)(i1=0..2)<((T0_{i0,i1} * T1_{i0,i1}))>(i0=0..2)(i1=0..2)> (m27D8,m27D8);
      bool _t27DC#1 = EQ<real>(t27DA,t27DA);
      bool _t27DE#1 = BNot(_t27DC);
      if _t27DE then goto ASSIGN27E2 else goto JOIN27E0
    ASSIGN27E2:  preds = [COND27E4]
      tensor[3,3] _t27E1#1 = λ()<Z_{i0,i1}>_{3 3} ();
      return _t27E1
      goto JOIN27E0
    JOIN27E0:  preds = [*RETURN(_t27E1)27E3,COND27E4]
      return m27D8
}
  function real urnd281A (real x27E8#2) {
    ENTRY2819:  preds = []
      int iter27E9#1 = globals.iter2222;
      real _t27EB#1 = 0.e0;
      bool _t27ED#1 = EQ<real>(x27E8,_t27EB);
      if _t27ED then goto ASSIGN27F1 else goto JOIN27EF
    ASSIGN27F1:  preds = [COND27F3]
      real _t27F0#1 = 0.e0;
      return _t27F0
      goto JOIN27EF
    JOIN27EF:  preds = [*RETURN(_t27F0)27F2,COND27F3]
      real _t27F4#1 = λ(T0[])<Abs(T0)> (x27E8);
      real l227F6#2 = MathFn<log2>(_t27F4);
      real _t27F8#1 = 0.2e1;
      real _t27FA#1 = MathFn<floor>(l227F6);
      real _t27FC#1 = λ(T0[],T1[])<(T0) - (T1)> (l227F6,_t27FA);
      real _t27FE#1 = 0.1e1;
      real _t2800#1 = λ(T0[],T1[])<(T0) - (T1)> (_t27FC,_t27FE);
      real frxp2802#1 = MathFn<pow>(_t27F8,_t2800);
      real _t2804#1 = 0.2e1;
      int _t2806#0 = 20;
      real _t2808#1 = λ(T0[])<(T0)^20> (_t2804);
      int _t280A#1 = 2;
      int _t280C#1 = IMul(_t280A,iter27E9);
      real _t280E#1 = IntToReal(_t280C);
      real _t2810#1 = λ(T0[],T1[])<(T0 + T1)> (_t2808,_t280E);
      real _t2812#1 = λ(T0[],T1[])<(T0 * T1)> (_t2810,frxp2802);
      real _t2814#1 = 0.1e1;
      real _t2816#1 = MathFn<fmod>(_t2812,_t2814);
      return _t2816
}
## input initialization
  ENTRY221B:  preds = []
    real fMaskTh21E2#1 = 0.e0;
    globals.fMaskTh21CD = fMaskTh21E2;
    real fBias21E5#1 = 0.e0;
    globals.fBias21CE = fBias21E5;
    real tipd21E8#1 = 0.1e1;
    globals.tipd21CF = tipd21E8;
    real mabd21EB#1 = 0.75e0;
    globals.mabd21D0 = mabd21EB;
    real travMax21EE#1 = 0.1e2;
    globals.travMax21D1 = travMax21EE;
    int nfsMax21F1#1 = 20;
    globals.nfsMax21D2 = nfsMax21F1;
    real gdeTest21F4#1 = 0.5e0;
    globals.gdeTest21D3 = gdeTest21F4;
    real gdeBack21F7#1 = 0.5e0;
    globals.gdeBack21D4 = gdeBack21F7;
    real gdeOppor21FA#1 = 0.12e1;
    globals.gdeOppor21D5 = gdeOppor21FA;
    real geoEps21FD#1 = 0.1e0;
    globals.geoEps21D7 = geoEps21FD;
    real mvmtEps2200#1 = 0.1e-1;
    globals.mvmtEps21D8 = mvmtEps2200;
    real rpcEps2203#1 = 0.1e-1;
    globals.rpcEps21D9 = rpcEps2203;
    real pcmvEps2206#1 = 0.3e0;
    globals.pcmvEps21DA = pcmvEps2206;
    real isoval2209#1 = 0.e0;
    globals.isoval21DB = isoval2209;
    int verb220C#1 = 0;
    globals.verb21DC = verb220C;
    real sfs220F#1 = 0.5e0;
    globals.sfs21DD = sfs220F;
    real hist2212#1 = 0.5e0;
    globals.hist21DE = hist2212;
    int pcp2215#1 = 5;
    globals.pcp21DF = pcp2215;
    int fDim2218#1 = 2;
    globals.fDim21E1 = fDim2218;
    return
## global-variable initialization
  ENTRY28C6:  preds = []
    femData:Mesh meshData2856#2 = globals.meshData21C9;
    real tipd2855#1 = globals.tipd21CF;
    real hist2854#1 = globals.hist21DE;
    int pcp2853#1 = globals.pcp21DF;
    int fDim2852#4 = globals.fDim21E1;
    int _t285C#1 = 0;
    int _t285E#1 = 1;
    int _t2860#1 = ExtractFemItem<int,NumCell(Mesh)>(meshData2856);
    int _t2862#1 = ISub(_t2860,_t285E);
    int[] _t2864#1 = Range(_t285C,_t2862);
    femData:MeshCell[] _t2866#1 = <femData:MeshCell[]>{};
  FOREACH286A:  preds = [ASSIGN2867,NEXT286F]
    foreach (_t2868 in _t2864) on exit goto ASSIGN2872
      femData:MeshCell[] _t2869#1 = phi(_t2866,_t286D)
    femData:MeshCell _t286B#1 = LoadFem<femData:MeshCell>(meshData2856,_t2868);
    femData:MeshCell[] _t286D#1 = Append<femData:MeshCell>(_t2869,_t286B);
    goto FOREACH286A
  ASSIGN2872:  preds = [FOREACH286A]
    int _t2871#1 = 2;
    bool _t2873#1 = EQ<int>(_t2871,fDim2852);
    if _t2873 then goto ASSIGN2878 else goto ASSIGN287B
  ASSIGN2878:  preds = [COND2887]
    int _t2876#1 = 6;
    goto JOIN2875
  JOIN2875:  preds = [ASSIGN2878,ASSIGN2886]
    int _t2877#1 = phi(_t2876,_t2885)
    int nnmin2888#1 = _t2877;
    globals.nnmin221D = nnmin2888;
    int _t288C#1 = 2;
    bool _t288E#1 = EQ<int>(_t288C,fDim2852);
    if _t288E then goto ASSIGN2893 else goto ASSIGN2896
  ASSIGN2893:  preds = [COND28A2]
    int _t2891#1 = 8;
    goto JOIN2890
  JOIN2890:  preds = [ASSIGN2893,ASSIGN28A1]
    int _t2892#1 = phi(_t2891,_t28A0)
    int nnmax28A3#1 = _t2892;
    globals.nnmax221E = nnmax28A3;
    real _t28A6#1 = 0.2e1;
    real _t28A8#1 = 0.3e1;
    real phiWellRad28AA#2 = λ(T0[],T1[])<(T0) / ( T1)> (_t28A6,_t28A8);
    globals.phiWellRad221F = phiWellRad28AA;
    real rad28AD#1 = λ(T0[],T1[])<(T0) / ( T1)> (tipd2855,phiWellRad28AA);
    globals.rad2220 = rad28AD;
    real _t28B0#1 = 0.1e1;
    int _t28B2#1 = 2;
    int _t28B4#1 = IMul(_t28B2,pcp2853);
    real _t28B6#1 = IntToReal(_t28B4);
    real _t28B8#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t28B0,_t28B6);
    real pchist28BA#1 = MathFn<pow>(hist2854,_t28B8);
    globals.pchist2221 = pchist28BA;
    int iter28BD#1 = 0;
    globals.iter2222 = iter28BD;
    real rpc28C0#1 = 0.1e1;
    globals.rpc2223 = rpc28C0;
    int popLast28C3#1 = -1;
    globals.popLast2224 = popLast28C3;
    return
  ASSIGN2896:  preds = [COND28A2]
    int _t2895#1 = 1;
    bool _t2897#1 = EQ<int>(_t2895,fDim2852);
    if _t2897 then goto ASSIGN289C else goto ASSIGN289E
  ASSIGN289C:  preds = [COND289F]
    int _t289A#1 = 3;
    goto JOIN2899
  JOIN2899:  preds = [ASSIGN289C,ASSIGN289E]
    int _t289B#1 = phi(_t289A,_t289D)
    int _t28A0#1 = _t289B;
    goto JOIN2890
  ASSIGN289E:  preds = [COND289F]
    int _t289D#1 = 0;
    goto JOIN2899
  ASSIGN287B:  preds = [COND2887]
    int _t287A#1 = 1;
    bool _t287C#1 = EQ<int>(_t287A,fDim2852);
    if _t287C then goto ASSIGN2881 else goto ASSIGN2883
  ASSIGN2881:  preds = [COND2884]
    int _t287F#1 = 2;
    goto JOIN287E
  JOIN287E:  preds = [ASSIGN2881,ASSIGN2883]
    int _t2880#1 = phi(_t287F,_t2882)
    int _t2885#1 = _t2880;
    goto JOIN2875
  ASSIGN2883:  preds = [COND2884]
    int _t2882#1 = 0;
    goto JOIN287E
## strand
  strand point (tensor[3] p028DE#4, real hh028DF#1) in 3D
    state:
      output tensor[3] pos;
      output tensor[3] _pos;
      real ID;
      real hh;
      tensor[3] step;
      bool found;
      int nfs;
      real trav;
      real mvmt;
      real closest;
      int born;
      bool first;
    state init
      ENTRY2934:  preds = []
        real rad28E8#1 = globals.rad2220;
        tensor[3] pos28F6#2 = p028DE;
        tensor[3] _pos28F8#1 = pos28F6;
        real _t28FB#1 = 0.1e7;
        real _t28FE#1 = TensorIndex<tensor[3],[0]>(p028DE);
        real _t2900#1 = urnd281A (_t28FE);
        real _t2902#1 = TensorIndex<tensor[3],[1]>(p028DE);
        real _t2904#1 = urnd281A (_t2902);
        real _t2906#1 = λ(T0[],T1[])<(T0 + T1)> (_t2900,_t2904);
        real _t2908#1 = TensorIndex<tensor[3],[2]>(p028DE);
        real _t290A#1 = urnd281A (_t2908);
        real _t290C#1 = λ(T0[],T1[])<(T0 + T1)> (_t2906,_t290A);
        real _t290E#1 = 0.1e1;
        real _t2910#1 = MathFn<fmod>(_t290C,_t290E);
        real _t2912#1 = _t2910;
        real _t2914#1 = λ(T0[],T1[])<(T0 * T1)> (_t28FB,_t2912);
        real _t2916#1 = MathFn<floor>(_t2914);
        real ID2918#1 = _t2916;
        real ID291A#1 = ID2918;
        real hh291C#1 = hh028DF;
        real _t291E#1 = 0.e0;
        real _t2920#1 = 0.e0;
        real _t2922#1 = 0.e0;
        tensor[3] step2924#1 = <tensor[3]>[_t291E,_t2920,_t2922];
        bool found2926#1 = false;
        int nfs2928#1 = 0;
        real trav292A#1 = 0.e0;
        real mvmt292C#1 = 0.1e1;
        real closest292E#1 = rad28E8;
        int born2930#1 = 0;
        bool first2932#1 = true;
        self.pos = pos28F6;
        self._pos = _pos28F8;
        self.ID = ID291A;
        self.hh = hh291C;
        self.step = step2924;
        self.found = found2926;
        self.nfs = nfs2928;
        self.trav = trav292A;
        self.mvmt = mvmt292C;
        self.closest = closest292E;
        self.born = born2930;
        self.first = first2932;
        return
    end state init
    method update
        ENTRY3B8B:  preds = []
          real fStrTh2956#4 = globals.fStrTh21CC;
          real fMaskTh2955#4 = globals.fMaskTh21CD;
          real fBias2954#4 = globals.fBias21CE;
          real tipd2953#17 = globals.tipd21CF;
          real mabd2952#1 = globals.mabd21D0;
          real travMax2951#3 = globals.travMax21D1;
          int nfsMax2950#3 = globals.nfsMax21D2;
          real gdeTest294F#1 = globals.gdeTest21D3;
          real gdeBack294E#1 = globals.gdeBack21D4;
          real gdeOppor294D#1 = globals.gdeOppor21D5;
          real fsEps294C#3 = globals.fsEps21D6;
          real pcmvEps294B#1 = globals.pcmvEps21DA;
          int verb294A#18 = globals.verb21DC;
          real sfs2949#6 = globals.sfs21DD;
          real hist2948#2 = globals.hist21DE;
          int pcp2947#12 = globals.pcp21DF;
          int fDim2946#2 = globals.fDim21E1;
          int nnmin2945#3 = globals.nnmin221D;
          int nnmax2944#4 = globals.nnmax221E;
          real rad2943#7 = globals.rad2220;
          int iter2942#22 = globals.iter2222;
          tensor[3] pos296C#22 = self.pos;
          tensor[3] _pos296D#1 = self._pos;
          real ID296E#11 = self.ID;
          real hh296F#8 = self.hh;
          tensor[3] step2970#1 = self.step;
          bool found2971#8 = self.found;
          int nfs2972#10 = self.nfs;
          real trav2973#5 = self.trav;
          real mvmt2974#10 = self.mvmt;
          real closest2975#5 = self.closest;
          int born2976#7 = self.born;
          bool first2977#6 = self.first;
          bool vv2984#9 = false;
          if first2977 then goto ASSIGN298A else goto JOIN2986
        ASSIGN298A:  preds = [COND29A9]
          int _t2989#1 = 0;
          bool _t298B#1 = GT<int>(verb294A,_t2989);
          if _t298B then goto ASSIGN2990 else goto ASSIGN2992
        ASSIGN2990:  preds = [COND2993]
          bool _t298E#1 = vv2984;
          goto JOIN298D
        JOIN298D:  preds = [ASSIGN2990,ASSIGN2992]
          bool _t298F#1 = phi(_t298E,_t2991)
          if _t298F then goto ASSIGN2997 else goto ASSIGN2999
        ASSIGN2997:  preds = [COND299C]
          bool _t2995#1 = true;
          goto JOIN2994
        JOIN2994:  preds = [ASSIGN2997,ASSIGN299B]
          bool _t2996#1 = phi(_t2995,_t299A)
          if _t2996 then goto ASSIGN299F else goto JOIN299D
        ASSIGN299F:  preds = [COND29A8]
          string _t299E#1 = "(i#";
          string _t29A0#1 = " @ ";
          string _t29A2#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID296E,_t299E,iter2942,_t29A0,pos296C,_t29A2);
          string _t29A5#1 = " HELLO!\n";
          Print<[string]>(_t29A5);
          goto JOIN299D
        JOIN299D:  preds = [MASSIGN29A7,COND29A8]
          goto JOIN2986
        JOIN2986:  preds = [JOIN299D,COND29A9]
          real _t29AD#1 = 0.e0;
          real _t29AF#1 = 0.e0;
          real _t29B1#1 = 0.e0;
          tensor[3] _t29B3#1 = <tensor[3]>[_t29AD,_t29AF,_t29B1];
          tensor[3] mid29B5#2 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (pos296C,_t29B3);
          real _t29B8#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (mid29B5);
          real _t29BA#1 = 0.4e1;
          bool _t29BC#1 = LT<real>(_t29B8,_t29BA);
          if _t29BC then goto ASSIGN29C0 else goto ASSIGN29C7
        ASSIGN29C0:  preds = [COND29C8]
          real _t29BF#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (mid29B5);
          real _t29C1#1 = 0.3e1;
          bool _t29C3#1 = GT<real>(_t29BF,_t29C1);
          goto JOIN29BE
        JOIN29BE:  preds = [ASSIGN29C5,ASSIGN29C7]
          bool _t29C4#1 = phi(_t29C3,_t29C6)
          bool _t29C9#1 = _t29C4;
          if _t29C9 then goto ASSIGN29D0 else goto ASSIGN2C97
        ASSIGN29D0:  preds = [COND2C98]
          real x29CF#5 = TensorIndex<tensor[3],[0]>(pos296C);
          real y29D1#5 = TensorIndex<tensor[3],[1]>(pos296C);
          real z29D3#8 = TensorIndex<tensor[3],[2]>(pos296C);
          real _t29D5#1 = 0.2e1;
          real _t29D7#1 = λ(T0[],T1[])<(T0 * T1)> (_t29D5,x29CF);
          int _t29D9#0 = 2;
          real _t29DB#1 = λ(T0[])<(T0)^2> (z29D3);
          real _t29DD#1 = λ(T0[],T1[])<(T0 * T1)> (_t29D7,_t29DB);
          int _t29DF#0 = 2;
          real _t29E1#1 = λ(T0[])<(T0)^2> (x29CF);
          int _t29E3#0 = 2;
          real _t29E5#1 = λ(T0[])<(T0)^2> (y29D1);
          real _t29E7#1 = λ(T0[],T1[])<(T0 + T1)> (_t29E1,_t29E5);
          int _t29E9#0 = 2;
          real _t29EB#1 = λ(T0[])<(T0)^2> (z29D3);
          real _t29ED#1 = λ(T0[],T1[])<(T0 + T1)> (_t29E7,_t29EB);
          real _t29EF#1 = λ(T0[])<Cosine(T0)> (_t29ED);
          real _t29F1#1 = λ(T0[],T1[])<(T0 * T1)> (_t29DD,_t29EF);
          real _t29F3#1 = 0.2e1;
          real _t29F5#1 = λ(T0[],T1[])<(T0 * T1)> (_t29F3,y29D1);
          int _t29F7#0 = 2;
          real _t29F9#1 = λ(T0[])<(T0)^2> (z29D3);
          real _t29FB#1 = λ(T0[],T1[])<(T0 * T1)> (_t29F5,_t29F9);
          int _t29FD#0 = 2;
          real _t29FF#1 = λ(T0[])<(T0)^2> (x29CF);
          int _t2A01#0 = 2;
          real _t2A03#1 = λ(T0[])<(T0)^2> (y29D1);
          real _t2A05#1 = λ(T0[],T1[])<(T0 + T1)> (_t29FF,_t2A03);
          int _t2A07#0 = 2;
          real _t2A09#1 = λ(T0[])<(T0)^2> (z29D3);
          real _t2A0B#1 = λ(T0[],T1[])<(T0 + T1)> (_t2A05,_t2A09);
          real _t2A0D#1 = λ(T0[])<Cosine(T0)> (_t2A0B);
          real _t2A0F#1 = λ(T0[],T1[])<(T0 * T1)> (_t29FB,_t2A0D);
          real _t2A11#1 = 0.2e1;
          int _t2A13#0 = 3;
          real _t2A15#1 = λ(T0[])<(T0)^3> (z29D3);
          real _t2A17#1 = λ(T0[],T1[])<(T0 * T1)> (_t2A11,_t2A15);
          int _t2A19#0 = 2;
          real _t2A1B#1 = λ(T0[])<(T0)^2> (x29CF);
          int _t2A1D#0 = 2;
          real _t2A1F#1 = λ(T0[])<(T0)^2> (y29D1);
          real _t2A21#1 = λ(T0[],T1[])<(T0 + T1)> (_t2A1B,_t2A1F);
          int _t2A23#0 = 2;
          real _t2A25#1 = λ(T0[])<(T0)^2> (z29D3);
          real _t2A27#1 = λ(T0[],T1[])<(T0 + T1)> (_t2A21,_t2A25);
          real _t2A29#1 = λ(T0[])<Cosine(T0)> (_t2A27);
          real _t2A2B#1 = λ(T0[],T1[])<(T0 * T1)> (_t2A17,_t2A29);
          real _t2A2D#1 = 0.2e1;
          real _t2A2F#1 = λ(T0[],T1[])<(T0 * T1)> (_t2A2D,z29D3);
          int _t2A31#0 = 2;
          real _t2A33#1 = λ(T0[])<(T0)^2> (x29CF);
          int _t2A35#0 = 2;
          real _t2A37#1 = λ(T0[])<(T0)^2> (y29D1);
          real _t2A39#1 = λ(T0[],T1[])<(T0 + T1)> (_t2A33,_t2A37);
          int _t2A3B#0 = 2;
          real _t2A3D#1 = λ(T0[])<(T0)^2> (z29D3);
          real _t2A3F#1 = λ(T0[],T1[])<(T0 + T1)> (_t2A39,_t2A3D);
          real _t2A41#1 = λ(T0[])<Sine(T0)> (_t2A3F);
          real _t2A43#1 = λ(T0[],T1[])<(T0 * T1)> (_t2A2F,_t2A41);
          real _t2A45#1 = λ(T0[],T1[])<(T0 + T1)> (_t2A2B,_t2A43);
          tensor[3] g2A47#1 = <tensor[3]>[_t29F1,_t2A0F,_t2A45];
          tensor[3] g2A49#1 = g2A47;
          real x2A4C#24 = TensorIndex<tensor[3],[0]>(pos296C);
          real y2A4E#24 = TensorIndex<tensor[3],[1]>(pos296C);
          real z2A50#33 = TensorIndex<tensor[3],[2]>(pos296C);
          int _t2A52#1 = -4;
          real _t2A54#1 = IntToReal(_t2A52);
          int _t2A56#0 = 2;
          real _t2A58#1 = λ(T0[])<(T0)^2> (x2A4C);
          real _t2A5A#1 = λ(T0[],T1[])<(T0 * T1)> (_t2A54,_t2A58);
          int _t2A5C#0 = 2;
          real _t2A5E#1 = λ(T0[])<(T0)^2> (z2A50);
          real _t2A60#1 = λ(T0[],T1[])<(T0 * T1)> (_t2A5A,_t2A5E);
          int _t2A62#0 = 2;
          real _t2A64#1 = λ(T0[])<(T0)^2> (x2A4C);
          int _t2A66#0 = 2;
          real _t2A68#1 = λ(T0[])<(T0)^2> (y2A4E);
          real _t2A6A#1 = λ(T0[],T1[])<(T0 + T1)> (_t2A64,_t2A68);
          int _t2A6C#0 = 2;
          real _t2A6E#1 = λ(T0[])<(T0)^2> (z2A50);
          real _t2A70#1 = λ(T0[],T1[])<(T0 + T1)> (_t2A6A,_t2A6E);
          real _t2A72#1 = λ(T0[])<Sine(T0)> (_t2A70);
          real _t2A74#1 = λ(T0[],T1[])<(T0 * T1)> (_t2A60,_t2A72);
          real _t2A76#1 = 0.2e1;
          int _t2A78#0 = 2;
          real _t2A7A#1 = λ(T0[])<(T0)^2> (z2A50);
          real _t2A7C#1 = λ(T0[],T1[])<(T0 * T1)> (_t2A76,_t2A7A);
          int _t2A7E#0 = 2;
          real _t2A80#1 = λ(T0[])<(T0)^2> (x2A4C);
          int _t2A82#0 = 2;
          real _t2A84#1 = λ(T0[])<(T0)^2> (y2A4E);
          real _t2A86#1 = λ(T0[],T1[])<(T0 + T1)> (_t2A80,_t2A84);
          int _t2A88#0 = 2;
          real _t2A8A#1 = λ(T0[])<(T0)^2> (z2A50);
          real _t2A8C#1 = λ(T0[],T1[])<(T0 + T1)> (_t2A86,_t2A8A);
          real _t2A8E#1 = λ(T0[])<Cosine(T0)> (_t2A8C);
          real _t2A90#1 = λ(T0[],T1[])<(T0 * T1)> (_t2A7C,_t2A8E);
          real _t2A92#1 = λ(T0[],T1[])<(T0 + T1)> (_t2A74,_t2A90);
          int _t2A94#1 = -4;
          real _t2A96#1 = IntToReal(_t2A94);
          real _t2A98#1 = λ(T0[],T1[])<(T0 * T1)> (_t2A96,x2A4C);
          real _t2A9A#1 = λ(T0[],T1[])<(T0 * T1)> (_t2A98,y2A4E);
          int _t2A9C#0 = 2;
          real _t2A9E#1 = λ(T0[])<(T0)^2> (z2A50);
          real _t2AA0#1 = λ(T0[],T1[])<(T0 * T1)> (_t2A9A,_t2A9E);
          int _t2AA2#0 = 2;
          real _t2AA4#1 = λ(T0[])<(T0)^2> (x2A4C);
          int _t2AA6#0 = 2;
          real _t2AA8#1 = λ(T0[])<(T0)^2> (y2A4E);
          real _t2AAA#1 = λ(T0[],T1[])<(T0 + T1)> (_t2AA4,_t2AA8);
          int _t2AAC#0 = 2;
          real _t2AAE#1 = λ(T0[])<(T0)^2> (z2A50);
          real _t2AB0#1 = λ(T0[],T1[])<(T0 + T1)> (_t2AAA,_t2AAE);
          real _t2AB2#1 = λ(T0[])<Sine(T0)> (_t2AB0);
          real _t2AB4#1 = λ(T0[],T1[])<(T0 * T1)> (_t2AA0,_t2AB2);
          int _t2AB6#1 = -4;
          real _t2AB8#1 = IntToReal(_t2AB6);
          real _t2ABA#1 = λ(T0[],T1[])<(T0 * T1)> (_t2AB8,x2A4C);
          int _t2ABC#0 = 3;
          real _t2ABE#1 = λ(T0[])<(T0)^3> (z2A50);
          real _t2AC0#1 = λ(T0[],T1[])<(T0 * T1)> (_t2ABA,_t2ABE);
          int _t2AC2#0 = 2;
          real _t2AC4#1 = λ(T0[])<(T0)^2> (x2A4C);
          int _t2AC6#0 = 2;
          real _t2AC8#1 = λ(T0[])<(T0)^2> (y2A4E);
          real _t2ACA#1 = λ(T0[],T1[])<(T0 + T1)> (_t2AC4,_t2AC8);
          int _t2ACC#0 = 2;
          real _t2ACE#1 = λ(T0[])<(T0)^2> (z2A50);
          real _t2AD0#1 = λ(T0[],T1[])<(T0 + T1)> (_t2ACA,_t2ACE);
          real _t2AD2#1 = λ(T0[])<Sine(T0)> (_t2AD0);
          real _t2AD4#1 = λ(T0[],T1[])<(T0 * T1)> (_t2AC0,_t2AD2);
          real _t2AD6#1 = 0.4e1;
          real _t2AD8#1 = λ(T0[],T1[])<(T0 * T1)> (_t2AD6,x2A4C);
          real _t2ADA#1 = λ(T0[],T1[])<(T0 * T1)> (_t2AD8,z2A50);
          int _t2ADC#0 = 2;
          real _t2ADE#1 = λ(T0[])<(T0)^2> (x2A4C);
          int _t2AE0#0 = 2;
          real _t2AE2#1 = λ(T0[])<(T0)^2> (y2A4E);
          real _t2AE4#1 = λ(T0[],T1[])<(T0 + T1)> (_t2ADE,_t2AE2);
          int _t2AE6#0 = 2;
          real _t2AE8#1 = λ(T0[])<(T0)^2> (z2A50);
          real _t2AEA#1 = λ(T0[],T1[])<(T0 + T1)> (_t2AE4,_t2AE8);
          real _t2AEC#1 = λ(T0[])<Cosine(T0)> (_t2AEA);
          real _t2AEE#1 = λ(T0[],T1[])<(T0 * T1)> (_t2ADA,_t2AEC);
          real _t2AF0#1 = λ(T0[],T1[])<(T0 + T1)> (_t2AD4,_t2AEE);
          tensor[3] _t2AF2#1 = <tensor[3]>[_t2A92,_t2AB4,_t2AF0];
          int _t2AF4#1 = -4;
          real _t2AF6#1 = IntToReal(_t2AF4);
          real _t2AF8#1 = λ(T0[],T1[])<(T0 * T1)> (_t2AF6,x2A4C);
          real _t2AFA#1 = λ(T0[],T1[])<(T0 * T1)> (_t2AF8,y2A4E);
          int _t2AFC#0 = 2;
          real _t2AFE#1 = λ(T0[])<(T0)^2> (z2A50);
          real _t2B00#1 = λ(T0[],T1[])<(T0 * T1)> (_t2AFA,_t2AFE);
          int _t2B02#0 = 2;
          real _t2B04#1 = λ(T0[])<(T0)^2> (x2A4C);
          int _t2B06#0 = 2;
          real _t2B08#1 = λ(T0[])<(T0)^2> (y2A4E);
          real _t2B0A#1 = λ(T0[],T1[])<(T0 + T1)> (_t2B04,_t2B08);
          int _t2B0C#0 = 2;
          real _t2B0E#1 = λ(T0[])<(T0)^2> (z2A50);
          real _t2B10#1 = λ(T0[],T1[])<(T0 + T1)> (_t2B0A,_t2B0E);
          real _t2B12#1 = λ(T0[])<Sine(T0)> (_t2B10);
          real _t2B14#1 = λ(T0[],T1[])<(T0 * T1)> (_t2B00,_t2B12);
          int _t2B16#1 = -4;
          real _t2B18#1 = IntToReal(_t2B16);
          int _t2B1A#0 = 2;
          real _t2B1C#1 = λ(T0[])<(T0)^2> (y2A4E);
          real _t2B1E#1 = λ(T0[],T1[])<(T0 * T1)> (_t2B18,_t2B1C);
          int _t2B20#0 = 2;
          real _t2B22#1 = λ(T0[])<(T0)^2> (z2A50);
          real _t2B24#1 = λ(T0[],T1[])<(T0 * T1)> (_t2B1E,_t2B22);
          int _t2B26#0 = 2;
          real _t2B28#1 = λ(T0[])<(T0)^2> (x2A4C);
          int _t2B2A#0 = 2;
          real _t2B2C#1 = λ(T0[])<(T0)^2> (y2A4E);
          real _t2B2E#1 = λ(T0[],T1[])<(T0 + T1)> (_t2B28,_t2B2C);
          int _t2B30#0 = 2;
          real _t2B32#1 = λ(T0[])<(T0)^2> (z2A50);
          real _t2B34#1 = λ(T0[],T1[])<(T0 + T1)> (_t2B2E,_t2B32);
          real _t2B36#1 = λ(T0[])<Sine(T0)> (_t2B34);
          real _t2B38#1 = λ(T0[],T1[])<(T0 * T1)> (_t2B24,_t2B36);
          real _t2B3A#1 = 0.2e1;
          int _t2B3C#0 = 2;
          real _t2B3E#1 = λ(T0[])<(T0)^2> (z2A50);
          real _t2B40#1 = λ(T0[],T1[])<(T0 * T1)> (_t2B3A,_t2B3E);
          int _t2B42#0 = 2;
          real _t2B44#1 = λ(T0[])<(T0)^2> (x2A4C);
          int _t2B46#0 = 2;
          real _t2B48#1 = λ(T0[])<(T0)^2> (y2A4E);
          real _t2B4A#1 = λ(T0[],T1[])<(T0 + T1)> (_t2B44,_t2B48);
          int _t2B4C#0 = 2;
          real _t2B4E#1 = λ(T0[])<(T0)^2> (z2A50);
          real _t2B50#1 = λ(T0[],T1[])<(T0 + T1)> (_t2B4A,_t2B4E);
          real _t2B52#1 = λ(T0[])<Cosine(T0)> (_t2B50);
          real _t2B54#1 = λ(T0[],T1[])<(T0 * T1)> (_t2B40,_t2B52);
          real _t2B56#1 = λ(T0[],T1[])<(T0 + T1)> (_t2B38,_t2B54);
          int _t2B58#1 = -4;
          real _t2B5A#1 = IntToReal(_t2B58);
          real _t2B5C#1 = λ(T0[],T1[])<(T0 * T1)> (_t2B5A,y2A4E);
          int _t2B5E#0 = 3;
          real _t2B60#1 = λ(T0[])<(T0)^3> (z2A50);
          real _t2B62#1 = λ(T0[],T1[])<(T0 * T1)> (_t2B5C,_t2B60);
          int _t2B64#0 = 2;
          real _t2B66#1 = λ(T0[])<(T0)^2> (x2A4C);
          int _t2B68#0 = 2;
          real _t2B6A#1 = λ(T0[])<(T0)^2> (y2A4E);
          real _t2B6C#1 = λ(T0[],T1[])<(T0 + T1)> (_t2B66,_t2B6A);
          int _t2B6E#0 = 2;
          real _t2B70#1 = λ(T0[])<(T0)^2> (z2A50);
          real _t2B72#1 = λ(T0[],T1[])<(T0 + T1)> (_t2B6C,_t2B70);
          real _t2B74#1 = λ(T0[])<Sine(T0)> (_t2B72);
          real _t2B76#1 = λ(T0[],T1[])<(T0 * T1)> (_t2B62,_t2B74);
          real _t2B78#1 = 0.4e1;
          real _t2B7A#1 = λ(T0[],T1[])<(T0 * T1)> (_t2B78,y2A4E);
          real _t2B7C#1 = λ(T0[],T1[])<(T0 * T1)> (_t2B7A,z2A50);
          int _t2B7E#0 = 2;
          real _t2B80#1 = λ(T0[])<(T0)^2> (x2A4C);
          int _t2B82#0 = 2;
          real _t2B84#1 = λ(T0[])<(T0)^2> (y2A4E);
          real _t2B86#1 = λ(T0[],T1[])<(T0 + T1)> (_t2B80,_t2B84);
          int _t2B88#0 = 2;
          real _t2B8A#1 = λ(T0[])<(T0)^2> (z2A50);
          real _t2B8C#1 = λ(T0[],T1[])<(T0 + T1)> (_t2B86,_t2B8A);
          real _t2B8E#1 = λ(T0[])<Cosine(T0)> (_t2B8C);
          real _t2B90#1 = λ(T0[],T1[])<(T0 * T1)> (_t2B7C,_t2B8E);
          real _t2B92#1 = λ(T0[],T1[])<(T0 + T1)> (_t2B76,_t2B90);
          tensor[3] _t2B94#1 = <tensor[3]>[_t2B14,_t2B56,_t2B92];
          int _t2B96#1 = -4;
          real _t2B98#1 = IntToReal(_t2B96);
          real _t2B9A#1 = λ(T0[],T1[])<(T0 * T1)> (_t2B98,x2A4C);
          int _t2B9C#0 = 3;
          real _t2B9E#1 = λ(T0[])<(T0)^3> (z2A50);
          real _t2BA0#1 = λ(T0[],T1[])<(T0 * T1)> (_t2B9A,_t2B9E);
          int _t2BA2#0 = 2;
          real _t2BA4#1 = λ(T0[])<(T0)^2> (x2A4C);
          int _t2BA6#0 = 2;
          real _t2BA8#1 = λ(T0[])<(T0)^2> (y2A4E);
          real _t2BAA#1 = λ(T0[],T1[])<(T0 + T1)> (_t2BA4,_t2BA8);
          int _t2BAC#0 = 2;
          real _t2BAE#1 = λ(T0[])<(T0)^2> (z2A50);
          real _t2BB0#1 = λ(T0[],T1[])<(T0 + T1)> (_t2BAA,_t2BAE);
          real _t2BB2#1 = λ(T0[])<Sine(T0)> (_t2BB0);
          real _t2BB4#1 = λ(T0[],T1[])<(T0 * T1)> (_t2BA0,_t2BB2);
          real _t2BB6#1 = 0.4e1;
          real _t2BB8#1 = λ(T0[],T1[])<(T0 * T1)> (_t2BB6,x2A4C);
          real _t2BBA#1 = λ(T0[],T1[])<(T0 * T1)> (_t2BB8,z2A50);
          int _t2BBC#0 = 2;
          real _t2BBE#1 = λ(T0[])<(T0)^2> (x2A4C);
          int _t2BC0#0 = 2;
          real _t2BC2#1 = λ(T0[])<(T0)^2> (y2A4E);
          real _t2BC4#1 = λ(T0[],T1[])<(T0 + T1)> (_t2BBE,_t2BC2);
          int _t2BC6#0 = 2;
          real _t2BC8#1 = λ(T0[])<(T0)^2> (z2A50);
          real _t2BCA#1 = λ(T0[],T1[])<(T0 + T1)> (_t2BC4,_t2BC8);
          real _t2BCC#1 = λ(T0[])<Cosine(T0)> (_t2BCA);
          real _t2BCE#1 = λ(T0[],T1[])<(T0 * T1)> (_t2BBA,_t2BCC);
          real _t2BD0#1 = λ(T0[],T1[])<(T0 + T1)> (_t2BB4,_t2BCE);
          int _t2BD2#1 = -4;
          real _t2BD4#1 = IntToReal(_t2BD2);
          real _t2BD6#1 = λ(T0[],T1[])<(T0 * T1)> (_t2BD4,y2A4E);
          int _t2BD8#0 = 3;
          real _t2BDA#1 = λ(T0[])<(T0)^3> (z2A50);
          real _t2BDC#1 = λ(T0[],T1[])<(T0 * T1)> (_t2BD6,_t2BDA);
          int _t2BDE#0 = 2;
          real _t2BE0#1 = λ(T0[])<(T0)^2> (x2A4C);
          int _t2BE2#0 = 2;
          real _t2BE4#1 = λ(T0[])<(T0)^2> (y2A4E);
          real _t2BE6#1 = λ(T0[],T1[])<(T0 + T1)> (_t2BE0,_t2BE4);
          int _t2BE8#0 = 2;
          real _t2BEA#1 = λ(T0[])<(T0)^2> (z2A50);
          real _t2BEC#1 = λ(T0[],T1[])<(T0 + T1)> (_t2BE6,_t2BEA);
          real _t2BEE#1 = λ(T0[])<Sine(T0)> (_t2BEC);
          real _t2BF0#1 = λ(T0[],T1[])<(T0 * T1)> (_t2BDC,_t2BEE);
          real _t2BF2#1 = 0.4e1;
          real _t2BF4#1 = λ(T0[],T1[])<(T0 * T1)> (_t2BF2,y2A4E);
          real _t2BF6#1 = λ(T0[],T1[])<(T0 * T1)> (_t2BF4,z2A50);
          int _t2BF8#0 = 2;
          real _t2BFA#1 = λ(T0[])<(T0)^2> (x2A4C);
          int _t2BFC#0 = 2;
          real _t2BFE#1 = λ(T0[])<(T0)^2> (y2A4E);
          real _t2C00#1 = λ(T0[],T1[])<(T0 + T1)> (_t2BFA,_t2BFE);
          int _t2C02#0 = 2;
          real _t2C04#1 = λ(T0[])<(T0)^2> (z2A50);
          real _t2C06#1 = λ(T0[],T1[])<(T0 + T1)> (_t2C00,_t2C04);
          real _t2C08#1 = λ(T0[])<Cosine(T0)> (_t2C06);
          real _t2C0A#1 = λ(T0[],T1[])<(T0 * T1)> (_t2BF6,_t2C08);
          real _t2C0C#1 = λ(T0[],T1[])<(T0 + T1)> (_t2BF0,_t2C0A);
          int _t2C0E#1 = -4;
          real _t2C10#1 = IntToReal(_t2C0E);
          int _t2C12#0 = 4;
          real _t2C14#1 = λ(T0[])<(T0)^4> (z2A50);
          real _t2C16#1 = λ(T0[],T1[])<(T0 * T1)> (_t2C10,_t2C14);
          int _t2C18#0 = 2;
          real _t2C1A#1 = λ(T0[])<(T0)^2> (x2A4C);
          int _t2C1C#0 = 2;
          real _t2C1E#1 = λ(T0[])<(T0)^2> (y2A4E);
          real _t2C20#1 = λ(T0[],T1[])<(T0 + T1)> (_t2C1A,_t2C1E);
          int _t2C22#0 = 2;
          real _t2C24#1 = λ(T0[])<(T0)^2> (z2A50);
          real _t2C26#1 = λ(T0[],T1[])<(T0 + T1)> (_t2C20,_t2C24);
          real _t2C28#1 = λ(T0[])<Sine(T0)> (_t2C26);
          real _t2C2A#1 = λ(T0[],T1[])<(T0 * T1)> (_t2C16,_t2C28);
          real _t2C2C#1 = 0.1e2;
          int _t2C2E#0 = 2;
          real _t2C30#1 = λ(T0[])<(T0)^2> (z2A50);
          real _t2C32#1 = λ(T0[],T1[])<(T0 * T1)> (_t2C2C,_t2C30);
          int _t2C34#0 = 2;
          real _t2C36#1 = λ(T0[])<(T0)^2> (x2A4C);
          int _t2C38#0 = 2;
          real _t2C3A#1 = λ(T0[])<(T0)^2> (y2A4E);
          real _t2C3C#1 = λ(T0[],T1[])<(T0 + T1)> (_t2C36,_t2C3A);
          int _t2C3E#0 = 2;
          real _t2C40#1 = λ(T0[])<(T0)^2> (z2A50);
          real _t2C42#1 = λ(T0[],T1[])<(T0 + T1)> (_t2C3C,_t2C40);
          real _t2C44#1 = λ(T0[])<Cosine(T0)> (_t2C42);
          real _t2C46#1 = λ(T0[],T1[])<(T0 * T1)> (_t2C32,_t2C44);
          real _t2C48#1 = λ(T0[],T1[])<(T0 + T1)> (_t2C2A,_t2C46);
          real _t2C4A#1 = 0.2e1;
          int _t2C4C#0 = 2;
          real _t2C4E#1 = λ(T0[])<(T0)^2> (x2A4C);
          int _t2C50#0 = 2;
          real _t2C52#1 = λ(T0[])<(T0)^2> (y2A4E);
          real _t2C54#1 = λ(T0[],T1[])<(T0 + T1)> (_t2C4E,_t2C52);
          int _t2C56#0 = 2;
          real _t2C58#1 = λ(T0[])<(T0)^2> (z2A50);
          real _t2C5A#1 = λ(T0[],T1[])<(T0 + T1)> (_t2C54,_t2C58);
          real _t2C5C#1 = λ(T0[])<Sine(T0)> (_t2C5A);
          real _t2C5E#1 = λ(T0[],T1[])<(T0 * T1)> (_t2C4A,_t2C5C);
          real _t2C60#1 = λ(T0[],T1[])<(T0 + T1)> (_t2C48,_t2C5E);
          tensor[3] _t2C62#1 = <tensor[3]>[_t2BD0,_t2C0C,_t2C60];
          tensor[3,3] hess2C64#1 = <tensor[3,3]>[_t2AF2,_t2B94,_t2C62];
          tensor[3,3] H2C66#1 = hess2C64;
          (real[3] _t2C68#1,tensor[3][3] evecs2C69#0) = Eigen3x3(H2C66);
          int _t2C6B#1 = 2;
          real _t2C6D#1 = Subscript<real[3]>(_t2C68,_t2C6B);
          real _t2C6F#1 = λ(T0[])<Neg(T0)> (_t2C6D);
          real _t2C71#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (g2A49);
          real _t2C73#1 = λ(T0[],T1[])<(T0 + T1)> (fBias2954,_t2C71);
          real str2C75#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t2C6F,_t2C73);
          real _t2C77#1 = str2C75;
          bool _t2C79#1 = GT<real>(_t2C77,fStrTh2956);
          if _t2C79 then goto ASSIGN2C7F else goto ASSIGN2C91
        ASSIGN2C7F:  preds = [COND2C92]
          real _t2C7E#1 = 0.e0;
          real _t2C80#1 = _t2C7E;
          bool _t2C82#1 = GTE<real>(_t2C80,fMaskTh2955);
          if _t2C82 then goto ASSIGN2C86 else goto ASSIGN2C8B
        ASSIGN2C86:  preds = [COND2C8C]
          bool _t2C85#1 = true;
          bool _t2C87#1 = _t2C85;
          goto JOIN2C84
        JOIN2C84:  preds = [ASSIGN2C89,ASSIGN2C8B]
          bool _t2C88#1 = phi(_t2C87,_t2C8A)
          bool _t2C8D#1 = _t2C88;
          goto JOIN2C7B
        JOIN2C7B:  preds = [ASSIGN2C8F,ASSIGN2C91]
          bool _t2C8E#1 = phi(_t2C8D,_t2C90)
          bool _t2C93#1 = _t2C8E;
          goto JOIN29CB
        JOIN29CB:  preds = [ASSIGN2C95,ASSIGN2C97]
          bool _t2C94#1 = phi(_t2C93,_t2C96)
          bool _t2C99#1 = _t2C94;
          bool _t2C9B#1 = BNot(_t2C99);
          if _t2C9B then goto ASSIGN2CA1 else goto JOIN2C9D
        ASSIGN2CA1:  preds = [COND2FA2]
          int _t2CA0#1 = 0;
          bool _t2CA2#1 = GT<int>(verb294A,_t2CA0);
          if _t2CA2 then goto ASSIGN2CA7 else goto ASSIGN2CA9
        ASSIGN2CA7:  preds = [COND2CAA]
          bool _t2CA5#1 = vv2984;
          goto JOIN2CA4
        JOIN2CA4:  preds = [ASSIGN2CA7,ASSIGN2CA9]
          bool _t2CA6#1 = phi(_t2CA5,_t2CA8)
          if _t2CA6 then goto ASSIGN2CAE else goto ASSIGN2CB0
        ASSIGN2CAE:  preds = [COND2CB3]
          bool _t2CAC#1 = true;
          goto JOIN2CAB
        JOIN2CAB:  preds = [ASSIGN2CAE,ASSIGN2CB2]
          bool _t2CAD#1 = phi(_t2CAC,_t2CB1)
          if _t2CAD then goto ASSIGN2CB6 else goto JOIN2CB4
        ASSIGN2CB6:  preds = [COND2FA0]
          string _t2CB5#1 = "(i#";
          string _t2CB7#1 = " @ ";
          string _t2CB9#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID296E,_t2CB5,iter2942,_t2CB7,pos296C,_t2CB9);
          string _t2CBC#1 = "!inside=";
          real _t2CBF#1 = 0.e0;
          real _t2CC1#1 = 0.e0;
          real _t2CC3#1 = 0.e0;
          tensor[3] _t2CC5#1 = <tensor[3]>[_t2CBF,_t2CC1,_t2CC3];
          tensor[3] mid2CC7#2 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (pos296C,_t2CC5);
          real _t2CCA#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (mid2CC7);
          real _t2CCC#1 = 0.4e1;
          bool _t2CCE#1 = LT<real>(_t2CCA,_t2CCC);
          if _t2CCE then goto ASSIGN2CD2 else goto ASSIGN2CD9
        ASSIGN2CD2:  preds = [COND2CDA]
          real _t2CD1#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (mid2CC7);
          real _t2CD3#1 = 0.3e1;
          bool _t2CD5#1 = GT<real>(_t2CD1,_t2CD3);
          goto JOIN2CD0
        JOIN2CD0:  preds = [ASSIGN2CD7,ASSIGN2CD9]
          bool _t2CD6#1 = phi(_t2CD5,_t2CD8)
          bool _t2CDB#1 = _t2CD6;
          string _t2CDD#1 = " || fStrength=";
          real x2CE1#5 = TensorIndex<tensor[3],[0]>(pos296C);
          real y2CE3#5 = TensorIndex<tensor[3],[1]>(pos296C);
          real z2CE5#8 = TensorIndex<tensor[3],[2]>(pos296C);
          real _t2CE7#1 = 0.2e1;
          real _t2CE9#1 = λ(T0[],T1[])<(T0 * T1)> (_t2CE7,x2CE1);
          int _t2CEB#0 = 2;
          real _t2CED#1 = λ(T0[])<(T0)^2> (z2CE5);
          real _t2CEF#1 = λ(T0[],T1[])<(T0 * T1)> (_t2CE9,_t2CED);
          int _t2CF1#0 = 2;
          real _t2CF3#1 = λ(T0[])<(T0)^2> (x2CE1);
          int _t2CF5#0 = 2;
          real _t2CF7#1 = λ(T0[])<(T0)^2> (y2CE3);
          real _t2CF9#1 = λ(T0[],T1[])<(T0 + T1)> (_t2CF3,_t2CF7);
          int _t2CFB#0 = 2;
          real _t2CFD#1 = λ(T0[])<(T0)^2> (z2CE5);
          real _t2CFF#1 = λ(T0[],T1[])<(T0 + T1)> (_t2CF9,_t2CFD);
          real _t2D01#1 = λ(T0[])<Cosine(T0)> (_t2CFF);
          real _t2D03#1 = λ(T0[],T1[])<(T0 * T1)> (_t2CEF,_t2D01);
          real _t2D05#1 = 0.2e1;
          real _t2D07#1 = λ(T0[],T1[])<(T0 * T1)> (_t2D05,y2CE3);
          int _t2D09#0 = 2;
          real _t2D0B#1 = λ(T0[])<(T0)^2> (z2CE5);
          real _t2D0D#1 = λ(T0[],T1[])<(T0 * T1)> (_t2D07,_t2D0B);
          int _t2D0F#0 = 2;
          real _t2D11#1 = λ(T0[])<(T0)^2> (x2CE1);
          int _t2D13#0 = 2;
          real _t2D15#1 = λ(T0[])<(T0)^2> (y2CE3);
          real _t2D17#1 = λ(T0[],T1[])<(T0 + T1)> (_t2D11,_t2D15);
          int _t2D19#0 = 2;
          real _t2D1B#1 = λ(T0[])<(T0)^2> (z2CE5);
          real _t2D1D#1 = λ(T0[],T1[])<(T0 + T1)> (_t2D17,_t2D1B);
          real _t2D1F#1 = λ(T0[])<Cosine(T0)> (_t2D1D);
          real _t2D21#1 = λ(T0[],T1[])<(T0 * T1)> (_t2D0D,_t2D1F);
          real _t2D23#1 = 0.2e1;
          int _t2D25#0 = 3;
          real _t2D27#1 = λ(T0[])<(T0)^3> (z2CE5);
          real _t2D29#1 = λ(T0[],T1[])<(T0 * T1)> (_t2D23,_t2D27);
          int _t2D2B#0 = 2;
          real _t2D2D#1 = λ(T0[])<(T0)^2> (x2CE1);
          int _t2D2F#0 = 2;
          real _t2D31#1 = λ(T0[])<(T0)^2> (y2CE3);
          real _t2D33#1 = λ(T0[],T1[])<(T0 + T1)> (_t2D2D,_t2D31);
          int _t2D35#0 = 2;
          real _t2D37#1 = λ(T0[])<(T0)^2> (z2CE5);
          real _t2D39#1 = λ(T0[],T1[])<(T0 + T1)> (_t2D33,_t2D37);
          real _t2D3B#1 = λ(T0[])<Cosine(T0)> (_t2D39);
          real _t2D3D#1 = λ(T0[],T1[])<(T0 * T1)> (_t2D29,_t2D3B);
          real _t2D3F#1 = 0.2e1;
          real _t2D41#1 = λ(T0[],T1[])<(T0 * T1)> (_t2D3F,z2CE5);
          int _t2D43#0 = 2;
          real _t2D45#1 = λ(T0[])<(T0)^2> (x2CE1);
          int _t2D47#0 = 2;
          real _t2D49#1 = λ(T0[])<(T0)^2> (y2CE3);
          real _t2D4B#1 = λ(T0[],T1[])<(T0 + T1)> (_t2D45,_t2D49);
          int _t2D4D#0 = 2;
          real _t2D4F#1 = λ(T0[])<(T0)^2> (z2CE5);
          real _t2D51#1 = λ(T0[],T1[])<(T0 + T1)> (_t2D4B,_t2D4F);
          real _t2D53#1 = λ(T0[])<Sine(T0)> (_t2D51);
          real _t2D55#1 = λ(T0[],T1[])<(T0 * T1)> (_t2D41,_t2D53);
          real _t2D57#1 = λ(T0[],T1[])<(T0 + T1)> (_t2D3D,_t2D55);
          tensor[3] g2D59#1 = <tensor[3]>[_t2D03,_t2D21,_t2D57];
          tensor[3] g2D5B#1 = g2D59;
          real x2D5E#24 = TensorIndex<tensor[3],[0]>(pos296C);
          real y2D60#24 = TensorIndex<tensor[3],[1]>(pos296C);
          real z2D62#33 = TensorIndex<tensor[3],[2]>(pos296C);
          int _t2D64#1 = -4;
          real _t2D66#1 = IntToReal(_t2D64);
          int _t2D68#0 = 2;
          real _t2D6A#1 = λ(T0[])<(T0)^2> (x2D5E);
          real _t2D6C#1 = λ(T0[],T1[])<(T0 * T1)> (_t2D66,_t2D6A);
          int _t2D6E#0 = 2;
          real _t2D70#1 = λ(T0[])<(T0)^2> (z2D62);
          real _t2D72#1 = λ(T0[],T1[])<(T0 * T1)> (_t2D6C,_t2D70);
          int _t2D74#0 = 2;
          real _t2D76#1 = λ(T0[])<(T0)^2> (x2D5E);
          int _t2D78#0 = 2;
          real _t2D7A#1 = λ(T0[])<(T0)^2> (y2D60);
          real _t2D7C#1 = λ(T0[],T1[])<(T0 + T1)> (_t2D76,_t2D7A);
          int _t2D7E#0 = 2;
          real _t2D80#1 = λ(T0[])<(T0)^2> (z2D62);
          real _t2D82#1 = λ(T0[],T1[])<(T0 + T1)> (_t2D7C,_t2D80);
          real _t2D84#1 = λ(T0[])<Sine(T0)> (_t2D82);
          real _t2D86#1 = λ(T0[],T1[])<(T0 * T1)> (_t2D72,_t2D84);
          real _t2D88#1 = 0.2e1;
          int _t2D8A#0 = 2;
          real _t2D8C#1 = λ(T0[])<(T0)^2> (z2D62);
          real _t2D8E#1 = λ(T0[],T1[])<(T0 * T1)> (_t2D88,_t2D8C);
          int _t2D90#0 = 2;
          real _t2D92#1 = λ(T0[])<(T0)^2> (x2D5E);
          int _t2D94#0 = 2;
          real _t2D96#1 = λ(T0[])<(T0)^2> (y2D60);
          real _t2D98#1 = λ(T0[],T1[])<(T0 + T1)> (_t2D92,_t2D96);
          int _t2D9A#0 = 2;
          real _t2D9C#1 = λ(T0[])<(T0)^2> (z2D62);
          real _t2D9E#1 = λ(T0[],T1[])<(T0 + T1)> (_t2D98,_t2D9C);
          real _t2DA0#1 = λ(T0[])<Cosine(T0)> (_t2D9E);
          real _t2DA2#1 = λ(T0[],T1[])<(T0 * T1)> (_t2D8E,_t2DA0);
          real _t2DA4#1 = λ(T0[],T1[])<(T0 + T1)> (_t2D86,_t2DA2);
          int _t2DA6#1 = -4;
          real _t2DA8#1 = IntToReal(_t2DA6);
          real _t2DAA#1 = λ(T0[],T1[])<(T0 * T1)> (_t2DA8,x2D5E);
          real _t2DAC#1 = λ(T0[],T1[])<(T0 * T1)> (_t2DAA,y2D60);
          int _t2DAE#0 = 2;
          real _t2DB0#1 = λ(T0[])<(T0)^2> (z2D62);
          real _t2DB2#1 = λ(T0[],T1[])<(T0 * T1)> (_t2DAC,_t2DB0);
          int _t2DB4#0 = 2;
          real _t2DB6#1 = λ(T0[])<(T0)^2> (x2D5E);
          int _t2DB8#0 = 2;
          real _t2DBA#1 = λ(T0[])<(T0)^2> (y2D60);
          real _t2DBC#1 = λ(T0[],T1[])<(T0 + T1)> (_t2DB6,_t2DBA);
          int _t2DBE#0 = 2;
          real _t2DC0#1 = λ(T0[])<(T0)^2> (z2D62);
          real _t2DC2#1 = λ(T0[],T1[])<(T0 + T1)> (_t2DBC,_t2DC0);
          real _t2DC4#1 = λ(T0[])<Sine(T0)> (_t2DC2);
          real _t2DC6#1 = λ(T0[],T1[])<(T0 * T1)> (_t2DB2,_t2DC4);
          int _t2DC8#1 = -4;
          real _t2DCA#1 = IntToReal(_t2DC8);
          real _t2DCC#1 = λ(T0[],T1[])<(T0 * T1)> (_t2DCA,x2D5E);
          int _t2DCE#0 = 3;
          real _t2DD0#1 = λ(T0[])<(T0)^3> (z2D62);
          real _t2DD2#1 = λ(T0[],T1[])<(T0 * T1)> (_t2DCC,_t2DD0);
          int _t2DD4#0 = 2;
          real _t2DD6#1 = λ(T0[])<(T0)^2> (x2D5E);
          int _t2DD8#0 = 2;
          real _t2DDA#1 = λ(T0[])<(T0)^2> (y2D60);
          real _t2DDC#1 = λ(T0[],T1[])<(T0 + T1)> (_t2DD6,_t2DDA);
          int _t2DDE#0 = 2;
          real _t2DE0#1 = λ(T0[])<(T0)^2> (z2D62);
          real _t2DE2#1 = λ(T0[],T1[])<(T0 + T1)> (_t2DDC,_t2DE0);
          real _t2DE4#1 = λ(T0[])<Sine(T0)> (_t2DE2);
          real _t2DE6#1 = λ(T0[],T1[])<(T0 * T1)> (_t2DD2,_t2DE4);
          real _t2DE8#1 = 0.4e1;
          real _t2DEA#1 = λ(T0[],T1[])<(T0 * T1)> (_t2DE8,x2D5E);
          real _t2DEC#1 = λ(T0[],T1[])<(T0 * T1)> (_t2DEA,z2D62);
          int _t2DEE#0 = 2;
          real _t2DF0#1 = λ(T0[])<(T0)^2> (x2D5E);
          int _t2DF2#0 = 2;
          real _t2DF4#1 = λ(T0[])<(T0)^2> (y2D60);
          real _t2DF6#1 = λ(T0[],T1[])<(T0 + T1)> (_t2DF0,_t2DF4);
          int _t2DF8#0 = 2;
          real _t2DFA#1 = λ(T0[])<(T0)^2> (z2D62);
          real _t2DFC#1 = λ(T0[],T1[])<(T0 + T1)> (_t2DF6,_t2DFA);
          real _t2DFE#1 = λ(T0[])<Cosine(T0)> (_t2DFC);
          real _t2E00#1 = λ(T0[],T1[])<(T0 * T1)> (_t2DEC,_t2DFE);
          real _t2E02#1 = λ(T0[],T1[])<(T0 + T1)> (_t2DE6,_t2E00);
          tensor[3] _t2E04#1 = <tensor[3]>[_t2DA4,_t2DC6,_t2E02];
          int _t2E06#1 = -4;
          real _t2E08#1 = IntToReal(_t2E06);
          real _t2E0A#1 = λ(T0[],T1[])<(T0 * T1)> (_t2E08,x2D5E);
          real _t2E0C#1 = λ(T0[],T1[])<(T0 * T1)> (_t2E0A,y2D60);
          int _t2E0E#0 = 2;
          real _t2E10#1 = λ(T0[])<(T0)^2> (z2D62);
          real _t2E12#1 = λ(T0[],T1[])<(T0 * T1)> (_t2E0C,_t2E10);
          int _t2E14#0 = 2;
          real _t2E16#1 = λ(T0[])<(T0)^2> (x2D5E);
          int _t2E18#0 = 2;
          real _t2E1A#1 = λ(T0[])<(T0)^2> (y2D60);
          real _t2E1C#1 = λ(T0[],T1[])<(T0 + T1)> (_t2E16,_t2E1A);
          int _t2E1E#0 = 2;
          real _t2E20#1 = λ(T0[])<(T0)^2> (z2D62);
          real _t2E22#1 = λ(T0[],T1[])<(T0 + T1)> (_t2E1C,_t2E20);
          real _t2E24#1 = λ(T0[])<Sine(T0)> (_t2E22);
          real _t2E26#1 = λ(T0[],T1[])<(T0 * T1)> (_t2E12,_t2E24);
          int _t2E28#1 = -4;
          real _t2E2A#1 = IntToReal(_t2E28);
          int _t2E2C#0 = 2;
          real _t2E2E#1 = λ(T0[])<(T0)^2> (y2D60);
          real _t2E30#1 = λ(T0[],T1[])<(T0 * T1)> (_t2E2A,_t2E2E);
          int _t2E32#0 = 2;
          real _t2E34#1 = λ(T0[])<(T0)^2> (z2D62);
          real _t2E36#1 = λ(T0[],T1[])<(T0 * T1)> (_t2E30,_t2E34);
          int _t2E38#0 = 2;
          real _t2E3A#1 = λ(T0[])<(T0)^2> (x2D5E);
          int _t2E3C#0 = 2;
          real _t2E3E#1 = λ(T0[])<(T0)^2> (y2D60);
          real _t2E40#1 = λ(T0[],T1[])<(T0 + T1)> (_t2E3A,_t2E3E);
          int _t2E42#0 = 2;
          real _t2E44#1 = λ(T0[])<(T0)^2> (z2D62);
          real _t2E46#1 = λ(T0[],T1[])<(T0 + T1)> (_t2E40,_t2E44);
          real _t2E48#1 = λ(T0[])<Sine(T0)> (_t2E46);
          real _t2E4A#1 = λ(T0[],T1[])<(T0 * T1)> (_t2E36,_t2E48);
          real _t2E4C#1 = 0.2e1;
          int _t2E4E#0 = 2;
          real _t2E50#1 = λ(T0[])<(T0)^2> (z2D62);
          real _t2E52#1 = λ(T0[],T1[])<(T0 * T1)> (_t2E4C,_t2E50);
          int _t2E54#0 = 2;
          real _t2E56#1 = λ(T0[])<(T0)^2> (x2D5E);
          int _t2E58#0 = 2;
          real _t2E5A#1 = λ(T0[])<(T0)^2> (y2D60);
          real _t2E5C#1 = λ(T0[],T1[])<(T0 + T1)> (_t2E56,_t2E5A);
          int _t2E5E#0 = 2;
          real _t2E60#1 = λ(T0[])<(T0)^2> (z2D62);
          real _t2E62#1 = λ(T0[],T1[])<(T0 + T1)> (_t2E5C,_t2E60);
          real _t2E64#1 = λ(T0[])<Cosine(T0)> (_t2E62);
          real _t2E66#1 = λ(T0[],T1[])<(T0 * T1)> (_t2E52,_t2E64);
          real _t2E68#1 = λ(T0[],T1[])<(T0 + T1)> (_t2E4A,_t2E66);
          int _t2E6A#1 = -4;
          real _t2E6C#1 = IntToReal(_t2E6A);
          real _t2E6E#1 = λ(T0[],T1[])<(T0 * T1)> (_t2E6C,y2D60);
          int _t2E70#0 = 3;
          real _t2E72#1 = λ(T0[])<(T0)^3> (z2D62);
          real _t2E74#1 = λ(T0[],T1[])<(T0 * T1)> (_t2E6E,_t2E72);
          int _t2E76#0 = 2;
          real _t2E78#1 = λ(T0[])<(T0)^2> (x2D5E);
          int _t2E7A#0 = 2;
          real _t2E7C#1 = λ(T0[])<(T0)^2> (y2D60);
          real _t2E7E#1 = λ(T0[],T1[])<(T0 + T1)> (_t2E78,_t2E7C);
          int _t2E80#0 = 2;
          real _t2E82#1 = λ(T0[])<(T0)^2> (z2D62);
          real _t2E84#1 = λ(T0[],T1[])<(T0 + T1)> (_t2E7E,_t2E82);
          real _t2E86#1 = λ(T0[])<Sine(T0)> (_t2E84);
          real _t2E88#1 = λ(T0[],T1[])<(T0 * T1)> (_t2E74,_t2E86);
          real _t2E8A#1 = 0.4e1;
          real _t2E8C#1 = λ(T0[],T1[])<(T0 * T1)> (_t2E8A,y2D60);
          real _t2E8E#1 = λ(T0[],T1[])<(T0 * T1)> (_t2E8C,z2D62);
          int _t2E90#0 = 2;
          real _t2E92#1 = λ(T0[])<(T0)^2> (x2D5E);
          int _t2E94#0 = 2;
          real _t2E96#1 = λ(T0[])<(T0)^2> (y2D60);
          real _t2E98#1 = λ(T0[],T1[])<(T0 + T1)> (_t2E92,_t2E96);
          int _t2E9A#0 = 2;
          real _t2E9C#1 = λ(T0[])<(T0)^2> (z2D62);
          real _t2E9E#1 = λ(T0[],T1[])<(T0 + T1)> (_t2E98,_t2E9C);
          real _t2EA0#1 = λ(T0[])<Cosine(T0)> (_t2E9E);
          real _t2EA2#1 = λ(T0[],T1[])<(T0 * T1)> (_t2E8E,_t2EA0);
          real _t2EA4#1 = λ(T0[],T1[])<(T0 + T1)> (_t2E88,_t2EA2);
          tensor[3] _t2EA6#1 = <tensor[3]>[_t2E26,_t2E68,_t2EA4];
          int _t2EA8#1 = -4;
          real _t2EAA#1 = IntToReal(_t2EA8);
          real _t2EAC#1 = λ(T0[],T1[])<(T0 * T1)> (_t2EAA,x2D5E);
          int _t2EAE#0 = 3;
          real _t2EB0#1 = λ(T0[])<(T0)^3> (z2D62);
          real _t2EB2#1 = λ(T0[],T1[])<(T0 * T1)> (_t2EAC,_t2EB0);
          int _t2EB4#0 = 2;
          real _t2EB6#1 = λ(T0[])<(T0)^2> (x2D5E);
          int _t2EB8#0 = 2;
          real _t2EBA#1 = λ(T0[])<(T0)^2> (y2D60);
          real _t2EBC#1 = λ(T0[],T1[])<(T0 + T1)> (_t2EB6,_t2EBA);
          int _t2EBE#0 = 2;
          real _t2EC0#1 = λ(T0[])<(T0)^2> (z2D62);
          real _t2EC2#1 = λ(T0[],T1[])<(T0 + T1)> (_t2EBC,_t2EC0);
          real _t2EC4#1 = λ(T0[])<Sine(T0)> (_t2EC2);
          real _t2EC6#1 = λ(T0[],T1[])<(T0 * T1)> (_t2EB2,_t2EC4);
          real _t2EC8#1 = 0.4e1;
          real _t2ECA#1 = λ(T0[],T1[])<(T0 * T1)> (_t2EC8,x2D5E);
          real _t2ECC#1 = λ(T0[],T1[])<(T0 * T1)> (_t2ECA,z2D62);
          int _t2ECE#0 = 2;
          real _t2ED0#1 = λ(T0[])<(T0)^2> (x2D5E);
          int _t2ED2#0 = 2;
          real _t2ED4#1 = λ(T0[])<(T0)^2> (y2D60);
          real _t2ED6#1 = λ(T0[],T1[])<(T0 + T1)> (_t2ED0,_t2ED4);
          int _t2ED8#0 = 2;
          real _t2EDA#1 = λ(T0[])<(T0)^2> (z2D62);
          real _t2EDC#1 = λ(T0[],T1[])<(T0 + T1)> (_t2ED6,_t2EDA);
          real _t2EDE#1 = λ(T0[])<Cosine(T0)> (_t2EDC);
          real _t2EE0#1 = λ(T0[],T1[])<(T0 * T1)> (_t2ECC,_t2EDE);
          real _t2EE2#1 = λ(T0[],T1[])<(T0 + T1)> (_t2EC6,_t2EE0);
          int _t2EE4#1 = -4;
          real _t2EE6#1 = IntToReal(_t2EE4);
          real _t2EE8#1 = λ(T0[],T1[])<(T0 * T1)> (_t2EE6,y2D60);
          int _t2EEA#0 = 3;
          real _t2EEC#1 = λ(T0[])<(T0)^3> (z2D62);
          real _t2EEE#1 = λ(T0[],T1[])<(T0 * T1)> (_t2EE8,_t2EEC);
          int _t2EF0#0 = 2;
          real _t2EF2#1 = λ(T0[])<(T0)^2> (x2D5E);
          int _t2EF4#0 = 2;
          real _t2EF6#1 = λ(T0[])<(T0)^2> (y2D60);
          real _t2EF8#1 = λ(T0[],T1[])<(T0 + T1)> (_t2EF2,_t2EF6);
          int _t2EFA#0 = 2;
          real _t2EFC#1 = λ(T0[])<(T0)^2> (z2D62);
          real _t2EFE#1 = λ(T0[],T1[])<(T0 + T1)> (_t2EF8,_t2EFC);
          real _t2F00#1 = λ(T0[])<Sine(T0)> (_t2EFE);
          real _t2F02#1 = λ(T0[],T1[])<(T0 * T1)> (_t2EEE,_t2F00);
          real _t2F04#1 = 0.4e1;
          real _t2F06#1 = λ(T0[],T1[])<(T0 * T1)> (_t2F04,y2D60);
          real _t2F08#1 = λ(T0[],T1[])<(T0 * T1)> (_t2F06,z2D62);
          int _t2F0A#0 = 2;
          real _t2F0C#1 = λ(T0[])<(T0)^2> (x2D5E);
          int _t2F0E#0 = 2;
          real _t2F10#1 = λ(T0[])<(T0)^2> (y2D60);
          real _t2F12#1 = λ(T0[],T1[])<(T0 + T1)> (_t2F0C,_t2F10);
          int _t2F14#0 = 2;
          real _t2F16#1 = λ(T0[])<(T0)^2> (z2D62);
          real _t2F18#1 = λ(T0[],T1[])<(T0 + T1)> (_t2F12,_t2F16);
          real _t2F1A#1 = λ(T0[])<Cosine(T0)> (_t2F18);
          real _t2F1C#1 = λ(T0[],T1[])<(T0 * T1)> (_t2F08,_t2F1A);
          real _t2F1E#1 = λ(T0[],T1[])<(T0 + T1)> (_t2F02,_t2F1C);
          int _t2F20#1 = -4;
          real _t2F22#1 = IntToReal(_t2F20);
          int _t2F24#0 = 4;
          real _t2F26#1 = λ(T0[])<(T0)^4> (z2D62);
          real _t2F28#1 = λ(T0[],T1[])<(T0 * T1)> (_t2F22,_t2F26);
          int _t2F2A#0 = 2;
          real _t2F2C#1 = λ(T0[])<(T0)^2> (x2D5E);
          int _t2F2E#0 = 2;
          real _t2F30#1 = λ(T0[])<(T0)^2> (y2D60);
          real _t2F32#1 = λ(T0[],T1[])<(T0 + T1)> (_t2F2C,_t2F30);
          int _t2F34#0 = 2;
          real _t2F36#1 = λ(T0[])<(T0)^2> (z2D62);
          real _t2F38#1 = λ(T0[],T1[])<(T0 + T1)> (_t2F32,_t2F36);
          real _t2F3A#1 = λ(T0[])<Sine(T0)> (_t2F38);
          real _t2F3C#1 = λ(T0[],T1[])<(T0 * T1)> (_t2F28,_t2F3A);
          real _t2F3E#1 = 0.1e2;
          int _t2F40#0 = 2;
          real _t2F42#1 = λ(T0[])<(T0)^2> (z2D62);
          real _t2F44#1 = λ(T0[],T1[])<(T0 * T1)> (_t2F3E,_t2F42);
          int _t2F46#0 = 2;
          real _t2F48#1 = λ(T0[])<(T0)^2> (x2D5E);
          int _t2F4A#0 = 2;
          real _t2F4C#1 = λ(T0[])<(T0)^2> (y2D60);
          real _t2F4E#1 = λ(T0[],T1[])<(T0 + T1)> (_t2F48,_t2F4C);
          int _t2F50#0 = 2;
          real _t2F52#1 = λ(T0[])<(T0)^2> (z2D62);
          real _t2F54#1 = λ(T0[],T1[])<(T0 + T1)> (_t2F4E,_t2F52);
          real _t2F56#1 = λ(T0[])<Cosine(T0)> (_t2F54);
          real _t2F58#1 = λ(T0[],T1[])<(T0 * T1)> (_t2F44,_t2F56);
          real _t2F5A#1 = λ(T0[],T1[])<(T0 + T1)> (_t2F3C,_t2F58);
          real _t2F5C#1 = 0.2e1;
          int _t2F5E#0 = 2;
          real _t2F60#1 = λ(T0[])<(T0)^2> (x2D5E);
          int _t2F62#0 = 2;
          real _t2F64#1 = λ(T0[])<(T0)^2> (y2D60);
          real _t2F66#1 = λ(T0[],T1[])<(T0 + T1)> (_t2F60,_t2F64);
          int _t2F68#0 = 2;
          real _t2F6A#1 = λ(T0[])<(T0)^2> (z2D62);
          real _t2F6C#1 = λ(T0[],T1[])<(T0 + T1)> (_t2F66,_t2F6A);
          real _t2F6E#1 = λ(T0[])<Sine(T0)> (_t2F6C);
          real _t2F70#1 = λ(T0[],T1[])<(T0 * T1)> (_t2F5C,_t2F6E);
          real _t2F72#1 = λ(T0[],T1[])<(T0 + T1)> (_t2F5A,_t2F70);
          tensor[3] _t2F74#1 = <tensor[3]>[_t2EE2,_t2F1E,_t2F72];
          tensor[3,3] hess2F76#1 = <tensor[3,3]>[_t2E04,_t2EA6,_t2F74];
          tensor[3,3] H2F78#1 = hess2F76;
          (real[3] _t2F7A#1,tensor[3][3] evecs2F7B#0) = Eigen3x3(H2F78);
          int _t2F7D#1 = 2;
          real _t2F7F#1 = Subscript<real[3]>(_t2F7A,_t2F7D);
          real _t2F81#1 = λ(T0[])<Neg(T0)> (_t2F7F);
          real _t2F83#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (g2D5B);
          real _t2F85#1 = λ(T0[],T1[])<(T0 + T1)> (fBias2954,_t2F83);
          real str2F87#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t2F81,_t2F85);
          real _t2F89#1 = str2F87;
          string _t2F8B#1 = " <= fStrTh=";
          string _t2F8D#1 = " || fMask(pos)=";
          real _t2F90#1 = 0.e0;
          real _t2F92#1 = _t2F90;
          string _t2F94#1 = " < fMaskTh=";
          string _t2F96#1 = " || fTest(pos)=";
          bool _t2F99#1 = true;
          bool _t2F9B#1 = _t2F99;
          string _t2F9D#1 = " ==>DIE\n";
          Print<[string,bool,string,real,string,real,string,real,string,real,string,bool,string]>(_t2CBC,_t2CDB,_t2CDD,_t2F89,_t2F8B,fStrTh2956,_t2F8D,_t2F92,_t2F94,fMaskTh2955,_t2F96,_t2F9B,_t2F9D);
          goto JOIN2CB4
        JOIN2CB4:  preds = [MASSIGN2F9F,COND2FA0]
          die
          goto JOIN2C9D
        JOIN2C9D:  preds = [*DIE2FA1,COND2FA2]
          real _t2FA3#1 = 0.e0;
          bool _t2FA5#1 = GT<real>(travMax2951,_t2FA3);
          if _t2FA5 then goto ASSIGN2FA9 else goto JOIN2FA7
        ASSIGN2FA9:  preds = [COND2FAD]
          bool _t2FA8#1 = GT<real>(trav2973,travMax2951);
          if _t2FA8 then goto DIE2FAB else goto JOIN2FAA
        DIE2FAB:  preds = [COND2FAC]
          die
          goto JOIN2FAA
        JOIN2FAA:  preds = [*DIE2FAB,COND2FAC]
          goto JOIN2FA7
        JOIN2FA7:  preds = [JOIN2FAA,COND2FAD]
          bool _t2FAE#1 = BNot(found2971);
          if _t2FAE then goto ASSIGN2FB2 else goto ASSIGN303C
        ASSIGN2FB2:  preds = [COND3B88]
          int _t2FB1#1 = 0;
          bool _t2FB3#1 = GT<int>(nfsMax2950,_t2FB1);
          if _t2FB3 then goto ASSIGN2FB7 else goto JOIN2FB5
        ASSIGN2FB7:  preds = [COND2FE5]
          bool _t2FB6#1 = GT<int>(nfs2972,nfsMax2950);
          if _t2FB6 then goto ASSIGN2FBC else goto JOIN2FB8
        ASSIGN2FBC:  preds = [COND2FE4]
          int _t2FBB#1 = 0;
          bool _t2FBD#1 = GT<int>(verb294A,_t2FBB);
          if _t2FBD then goto ASSIGN2FC2 else goto ASSIGN2FC4
        ASSIGN2FC2:  preds = [COND2FC5]
          bool _t2FC0#1 = vv2984;
          goto JOIN2FBF
        JOIN2FBF:  preds = [ASSIGN2FC2,ASSIGN2FC4]
          bool _t2FC1#1 = phi(_t2FC0,_t2FC3)
          if _t2FC1 then goto ASSIGN2FC9 else goto ASSIGN2FCB
        ASSIGN2FC9:  preds = [COND2FCE]
          bool _t2FC7#1 = true;
          goto JOIN2FC6
        JOIN2FC6:  preds = [ASSIGN2FC9,ASSIGN2FCD]
          bool _t2FC8#1 = phi(_t2FC7,_t2FCC)
          if _t2FC8 then goto ASSIGN2FD1 else goto JOIN2FCF
        ASSIGN2FD1:  preds = [COND2FE2]
          string _t2FD0#1 = "(i#";
          string _t2FD2#1 = " @ ";
          string _t2FD4#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID296E,_t2FD0,iter2942,_t2FD2,pos296C,_t2FD4);
          string _t2FD7#1 = "nfs=";
          string _t2FD9#1 = " > nfsMax=";
          string _t2FDB#1 = " || trav=";
          string _t2FDD#1 = " > travMax=";
          string _t2FDF#1 = " =>DIE\n";
          Print<[string,int,string,int,string,real,string,real,string]>(_t2FD7,nfs2972,_t2FD9,nfsMax2950,_t2FDB,trav2973,_t2FDD,travMax2951,_t2FDF);
          goto JOIN2FCF
        JOIN2FCF:  preds = [MASSIGN2FE1,COND2FE2]
          die
          goto JOIN2FB8
        JOIN2FB8:  preds = [*DIE2FE3,COND2FE4]
          goto JOIN2FB5
        JOIN2FB5:  preds = [JOIN2FB8,COND2FE5]
          tensor[3] _t2FE6#1 = fStep2531 (pos296C);
          tensor[3] step2FE8#5 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs2949,_t2FE6);
          tensor[3] pos2FEB#3 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos296C,step2FE8);
          tensor[3] _pos2FEE#1 = pos2FEB;
          real _t2FF1#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (step2FE8);
          real _t2FF3#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t2FF1,tipd2953);
          real mvmt2FF5#2 = λ(T0[],T1[],T2[])<(T0 + (T2 * (T1) - (T0)))> (_t2FF3,mvmt2974,hist2948);
          bool _t2FF8#1 = GT<real>(mvmt2FF5,fsEps294C);
          if _t2FF8 then goto ASSIGN2FFC else goto ASSIGN3009
        ASSIGN2FFC:  preds = [COND300F]
          real _t2FFB#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (step2FE8);
          real _t2FFD#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t2FFB,tipd2953);
          real trav2FFF#1 = λ(T0[],T1[])<(T0 + T1)> (trav2973,_t2FFD);
          int _t3002#1 = 1;
          int nfs3004#1 = IAdd(nfs2972,_t3002);
          goto JOIN2FFA
        JOIN2FFA:  preds = [ASSIGN3006,ASSIGN300E]
          real mvmt300B#2 = phi(mvmt2FF5,mvmt300A)
          real trav3000#1 = phi(trav2FFF,trav300D)
          int nfs3005#1 = phi(nfs3004,nfs2972)
          bool found3008#2 = phi(found2971,found3007)
          int _t3015#1 = 0;
          bool _t3017#1 = GT<int>(verb294A,_t3015);
          if _t3017 then goto ASSIGN301C else goto ASSIGN301E
        ASSIGN301C:  preds = [COND301F]
          bool _t301A#1 = vv2984;
          goto JOIN3019
        JOIN3019:  preds = [ASSIGN301C,ASSIGN301E]
          bool _t301B#1 = phi(_t301A,_t301D)
          if _t301B then goto ASSIGN3023 else goto ASSIGN3025
        ASSIGN3023:  preds = [COND3028]
          bool _t3021#1 = true;
          goto JOIN3020
        JOIN3020:  preds = [ASSIGN3023,ASSIGN3027]
          bool _t3022#1 = phi(_t3021,_t3026)
          if _t3022 then goto ASSIGN302B else goto JOIN3029
        ASSIGN302B:  preds = [COND303A]
          string _t302A#1 = "(i#";
          string _t302C#1 = " @ ";
          string _t302E#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID296E,_t302A,iter2942,_t302C,pos2FEB,_t302E);
          string _t3031#1 = "step=";
          string _t3033#1 = "; mvmt=";
          string _t3035#1 = " => found=";
          string _t3037#1 = "\n";
          Print<[string,tensor[3],string,real,string,bool,string]>(_t3031,step2FE8,_t3033,mvmt300B,_t3035,found3008,_t3037);
          goto JOIN3029
        JOIN3029:  preds = [MASSIGN3039,COND303A]
          goto JOIN2FB0
        JOIN2FB0:  preds = [JOIN3029,JOIN373D]
          int born3560#1 = phi(born2976,born3B86)
          real closest35E8#1 = phi(closest2975,closest35F7)
          real mvmt2FF6#1 = phi(mvmt300B,mvmt3735)
          real trav3012#1 = phi(trav3000,trav372F)
          int nfs3011#1 = phi(nfs3005,nfs2972)
          bool found3010#1 = phi(found3008,found2971)
          tensor[3] step2FE9#1 = phi(step2FE8,step3729)
          real hh357B#1 = phi(hh296F,hh3725)
          tensor[3] _pos2FEF#1 = phi(_pos2FEE,_pos3716)
          tensor[3] pos2FEC#1 = phi(pos2FEB,pos3713)
          bool first3B89#1 = false;
          self.pos = pos2FEC;
          self._pos = _pos2FEF;
          self.hh = hh357B;
          self.step = step2FE9;
          self.found = found3010;
          self.nfs = nfs3011;
          self.trav = trav3012;
          self.mvmt = mvmt2FF6;
          self.closest = closest35E8;
          self.born = born3560;
          self.first = first3B89;
          active
        ASSIGN3025:  preds = [COND3028]
          int _t3024#1 = 1;
          bool _t3026#1 = GT<int>(verb294A,_t3024);
          goto JOIN3020
        ASSIGN301E:  preds = [COND301F]
          bool _t301D#1 = false;
          goto JOIN3019
        ASSIGN3009:  preds = [COND300F]
          bool found3007#1 = true;
          real mvmt300A#1 = 0.1e1;
          real trav300D#1 = 0.e0;
          goto JOIN2FFA
        ASSIGN2FCB:  preds = [COND2FCE]
          int _t2FCA#1 = 1;
          bool _t2FCC#1 = GT<int>(verb294A,_t2FCA);
          goto JOIN2FC6
        ASSIGN2FC4:  preds = [COND2FC5]
          bool _t2FC3#1 = false;
          goto JOIN2FBF
        ASSIGN303C:  preds = [COND3B88]
          int _t303B#1 = 0;
          bool _t303D#1 = EQ<int>(_t303B,fDim2946);
          if _t303D then goto SAVE3041 else goto JOIN303F
        SAVE3041:  preds = [COND304C]
          self.pos = pos296C;
          self._pos = _pos296D;
          self.hh = hh296F;
          self.step = step2970;
          self.found = found2971;
          self.nfs = nfs2972;
          self.trav = trav2973;
          self.mvmt = mvmt2974;
          self.closest = closest2975;
          self.born = born2976;
          self.first = first2977;
          stabilize
          goto JOIN303F
        JOIN303F:  preds = [*STABILIZE3040,COND304C]
          tensor[3] _t304D#1 = fStep2531 (pos296C);
          tensor[3] step304F#7 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs2949,_t304D);
          tensor[3] pos3051#23 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos296C,step304F);
          tensor[3] _pos3053#4 = pos3051;
          real _t3055#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (step304F);
          real _t3057#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t3055,tipd2953);
          real trav3059#5 = λ(T0[],T1[])<(T0 + T1)> (trav2973,_t3057);
          real oldE305B#1 = 0.e0;
          real _t305D#1 = 0.e0;
          real _t305F#1 = 0.e0;
          real _t3061#1 = 0.e0;
          tensor[3] force3063#1 = <tensor[3]>[_t305D,_t305F,_t3061];
          int nn3065#1 = 0;
          point[] _t3067#1 = SphereQuery<3,point>(_pos3053,rad2943);
        FOREACH306D:  preds = [ASSIGN3068,NEXT314D]
          foreach (P3069 in _t3067) on exit goto ASSIGN314F
            int nn306C#3 = phi(nn3065,nn314B)
            tensor[3] force306B#5 = phi(force3063,force3147)
            real oldE306A#5 = phi(oldE305B,oldE30E1)
          tensor[3] _t306E#1 = P3069.pos;
          tensor[3] off3070#5 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (_t306E,pos3051);
          real _t3072#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (off3070);
          real _t3074#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t3072,tipd2953);
          bool _t3076#1 = LT<real>(_t3074,fsEps294C);
          if _t3076 then goto ASSIGN307A else goto JOIN3078
        ASSIGN307A:  preds = [COND3080]
          real _t3079#1 = P3069.ID;
          bool _t307B#1 = LTE<real>(ID296E,_t3079);
          if _t307B then goto DIE307E else goto JOIN307D
        DIE307E:  preds = [COND307F]
          die
          goto JOIN307D
        JOIN307D:  preds = [*DIE307E,COND307F]
          goto JOIN3078
        JOIN3078:  preds = [JOIN307D,COND3080]
          real _t3082#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (off3070);
          real _t3084#7 = λ(T0[],T1[])<(T0) / ( T1)> (_t3082,rad2943);
          real _t3087#1 = 0.2e1;
          real _t3089#1 = 0.3e1;
          real _t308B#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t3087,_t3089);
          real s308D#5 = λ(T0[],T1[])<(T0) - (T1)> (_t3084,_t308B);
          real _t3090#1 = 0.2e1;
          real _t3092#1 = 0.3e1;
          real _t3094#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t3090,_t3092);
          bool _t3096#1 = LT<real>(_t3084,_t3094);
          if _t3096 then goto ASSIGN309A else goto ASSIGN30B6
        ASSIGN309A:  preds = [COND30DC]
          real _t3099#1 = 0.1e1;
          real _t309B#1 = -0.5646e1;
          real _t309D#1 = 0.119835e2;
          real _t309F#1 = -0.113535e2;
          real _t30A1#1 = 0.40550625e1;
          real _t30A3#1 = λ(T0[],T1[])<(T0 * T1)> (_t30A1,_t3084);
          real _t30A5#1 = λ(T0[],T1[])<(T0 + T1)> (_t309F,_t30A3);
          real _t30A7#1 = λ(T0[],T1[])<(T0 * T1)> (_t3084,_t30A5);
          real _t30A9#1 = λ(T0[],T1[])<(T0 + T1)> (_t309D,_t30A7);
          real _t30AB#1 = λ(T0[],T1[])<(T0 * T1)> (_t3084,_t30A9);
          real _t30AD#1 = λ(T0[],T1[])<(T0 + T1)> (_t309B,_t30AB);
          real _t30AF#1 = λ(T0[],T1[])<(T0 * T1)> (_t3084,_t30AD);
          real _t30B1#1 = λ(T0[],T1[])<(T0 + T1)> (_t3099,_t30AF);
          goto JOIN3098
        JOIN3098:  preds = [ASSIGN30B3,ASSIGN30DB]
          real _t30B2#1 = phi(_t30B1,_t30DA)
          real _t30DD#1 = _t30B2;
          real _t30DF#1 = _t30DD;
          real oldE30E1#1 = λ(T0[],T1[])<(T0 + T1)> (oldE306A,_t30DF);
          real _t30E4#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (off3070);
          real _t30E6#6 = λ(T0[],T1[])<(T0) / ( T1)> (_t30E4,rad2943);
          real _t30E9#1 = 0.3e1;
          real _t30EB#1 = λ(T0[],T1[])<(T0 * T1)> (_t30E9,_t30E6);
          real _t30ED#1 = 0.2e1;
          real t30EF#4 = λ(T0[],T1[])<(T0) - (T1)> (_t30EB,_t30ED);
          real _t30F2#1 = 0.2e1;
          real _t30F4#1 = 0.3e1;
          real _t30F6#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t30F2,_t30F4);
          bool _t30F8#1 = LT<real>(_t30E6,_t30F6);
          if _t30F8 then goto ASSIGN30FC else goto ASSIGN3112
        ASSIGN30FC:  preds = [COND3136]
          real _t30FB#1 = -0.5646e1;
          real _t30FD#1 = 0.23967e2;
          real _t30FF#1 = -0.340605e2;
          real _t3101#1 = 0.1622025e2;
          real _t3103#1 = λ(T0[],T1[])<(T0 * T1)> (_t3101,_t30E6);
          real _t3105#1 = λ(T0[],T1[])<(T0 + T1)> (_t30FF,_t3103);
          real _t3107#1 = λ(T0[],T1[])<(T0 * T1)> (_t30E6,_t3105);
          real _t3109#1 = λ(T0[],T1[])<(T0 + T1)> (_t30FD,_t3107);
          real _t310B#1 = λ(T0[],T1[])<(T0 * T1)> (_t30E6,_t3109);
          real _t310D#1 = λ(T0[],T1[])<(T0 + T1)> (_t30FB,_t310B);
          goto JOIN30FA
        JOIN30FA:  preds = [ASSIGN310F,ASSIGN3135]
          real _t310E#1 = phi(_t310D,_t3134)
          real _t3137#1 = _t310E;
          real _t3139#1 = 0.1e1;
          real _t313B#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t3139,rad2943);
          real _t313D#1 = λ(T0[],T1[])<(T0 * T1)> (_t3137,_t313B);
          tensor[3] _t313F#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (_t313D,off3070);
          real _t3141#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (off3070);
          tensor[3] _t3143#1 = λ(T0[3],T1[])<(T0_{i0}) / ( T1)>_{3} (_t313F,_t3141);
          tensor[3] _t3145#1 = _t3143;
          tensor[3] force3147#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (force306B,_t3145);
          int _t3149#1 = 1;
          int nn314B#1 = IAdd(nn306C,_t3149);
          goto FOREACH306D
        ASSIGN3112:  preds = [COND3136]
          real _t3111#1 = 0.1e1;
          bool _t3113#1 = LT<real>(_t30E6,_t3111);
          if _t3113 then goto ASSIGN3117 else goto ASSIGN3132
        ASSIGN3117:  preds = [COND3133]
          real _t3116#1 = 0.1234567901e-1;
          real _t3118#1 = λ(T0[],T1[])<(T0 * T1)> (_t3116,t30EF);
          real _t311A#1 = 0.486e1;
          real _t311C#1 = -0.1458e2;
          real _t311E#1 = 0.1458e2;
          real _t3120#1 = 0.486e1;
          real _t3122#1 = λ(T0[],T1[])<(T0 * T1)> (_t3120,t30EF);
          real _t3124#1 = λ(T0[],T1[])<(T0) - (T1)> (_t311E,_t3122);
          real _t3126#1 = λ(T0[],T1[])<(T0 * T1)> (t30EF,_t3124);
          real _t3128#1 = λ(T0[],T1[])<(T0 + T1)> (_t311C,_t3126);
          real _t312A#1 = λ(T0[],T1[])<(T0 * T1)> (t30EF,_t3128);
          real _t312C#1 = λ(T0[],T1[])<(T0 + T1)> (_t311A,_t312A);
          real _t312E#1 = λ(T0[],T1[])<(T0 * T1)> (_t3118,_t312C);
          goto JOIN3115
        JOIN3115:  preds = [ASSIGN3130,ASSIGN3132]
          real _t312F#1 = phi(_t312E,_t3131)
          real _t3134#1 = _t312F;
          goto JOIN30FA
        ASSIGN3132:  preds = [COND3133]
          real _t3131#1 = 0.e0;
          goto JOIN3115
        ASSIGN30B6:  preds = [COND30DC]
          real _t30B5#1 = 0.1e1;
          bool _t30B7#1 = LT<real>(_t3084,_t30B5);
          if _t30B7 then goto ASSIGN30BB else goto ASSIGN30D8
        ASSIGN30BB:  preds = [COND30D9]
          real _t30BA#1 = -0.1e-2;
          real _t30BC#1 = 0.9e-1;
          real _t30BE#1 = -0.54e0;
          real _t30C0#1 = 0.1215e1;
          real _t30C2#1 = 0.972e0;
          real _t30C4#1 = λ(T0[],T1[])<(T0 * T1)> (_t30C2,s308D);
          real _t30C6#1 = λ(T0[],T1[])<(T0) - (T1)> (_t30C0,_t30C4);
          real _t30C8#1 = λ(T0[],T1[])<(T0 * T1)> (_t30C6,s308D);
          real _t30CA#1 = λ(T0[],T1[])<(T0 + T1)> (_t30BE,_t30C8);
          real _t30CC#1 = λ(T0[],T1[])<(T0 * T1)> (_t30CA,s308D);
          real _t30CE#1 = λ(T0[],T1[])<(T0 + T1)> (_t30BC,_t30CC);
          real _t30D0#1 = λ(T0[],T1[])<(T0 * T1)> (_t30CE,s308D);
          real _t30D2#1 = λ(T0[],T1[])<(T0 * T1)> (_t30D0,s308D);
          real _t30D4#1 = λ(T0[],T1[])<(T0 + T1)> (_t30BA,_t30D2);
          goto JOIN30B9
        JOIN30B9:  preds = [ASSIGN30D6,ASSIGN30D8]
          real _t30D5#1 = phi(_t30D4,_t30D7)
          real _t30DA#1 = _t30D5;
          goto JOIN3098
        ASSIGN30D8:  preds = [COND30D9]
          real _t30D7#1 = 0.e0;
          goto JOIN30B9
        ASSIGN314F:  preds = [FOREACH306D]
          int _t314E#1 = 0;
          bool _t3150#1 = EQ<int>(_t314E,nn306C);
          if _t3150 then goto ASSIGN3157 else goto JOIN3152
        ASSIGN3157:  preds = [COND355F]
          int _t3156#1 = 0;
          bool _t3158#1 = GT<int>(pcp2947,_t3156);
          if _t3158 then goto ASSIGN315D else goto ASSIGN316F
        ASSIGN315D:  preds = [COND3170]
          int _t315C#1 = 0;
          bool _t315E#1 = GT<int>(iter2942,_t315C);
          if _t315E then goto ASSIGN3162 else goto ASSIGN3169
        ASSIGN3162:  preds = [COND316A]
          int _t3161#1 = 0;
          int _t3163#1 = IMod(iter2942,pcp2947);
          bool _t3165#1 = EQ<int>(_t3161,_t3163);
          goto JOIN3160
        JOIN3160:  preds = [ASSIGN3167,ASSIGN3169]
          bool _t3166#1 = phi(_t3165,_t3168)
          bool _t316B#1 = _t3166;
          goto JOIN315A
        JOIN315A:  preds = [ASSIGN316D,ASSIGN316F]
          bool _t316C#1 = phi(_t316B,_t316E)
          if _t316C then goto ASSIGN3173 else goto ASSIGN3184
        ASSIGN3173:  preds = [COND3187]
          int _t3172#1 = IDiv(iter2942,pcp2947);
          int _t3174#1 = 2;
          int _t3176#1 = IMod(_t3172,_t3174);
          int _t3178#1 = 2;
          int _t317A#1 = IMul(_t3176,_t3178);
          int _t317C#1 = 1;
          int _t317E#1 = ISub(_t317A,_t317C);
          int _t3180#1 = _t317E;
          goto JOIN3171
        JOIN3171:  preds = [ASSIGN3182,ASSIGN3186]
          int _t3181#1 = phi(_t3180,_t3185)
          int _t3188#1 = 0;
          bool _t318A#1 = GT<int>(_t3181,_t3188);
          if _t318A then goto ASSIGN318F else goto ASSIGN3191
        ASSIGN318F:  preds = [COND3192]
          bool _t318D#1 = LT<int>(born2976,nnmax2944);
          goto JOIN318C
        JOIN318C:  preds = [ASSIGN318F,ASSIGN3191]
          bool _t318E#1 = phi(_t318D,_t3190)
          bool _t3193#1 = BNot(_t318E);
          if _t3193 then goto SAVE3197 else goto JOIN3195
        SAVE3197:  preds = [COND31A2]
          self.pos = pos3051;
          self._pos = _pos3053;
          self.hh = hh296F;
          self.step = step304F;
          self.found = found2971;
          self.nfs = nfs2972;
          self.trav = trav3059;
          self.mvmt = mvmt2974;
          self.closest = closest2975;
          self.born = born2976;
          self.first = first2977;
          active
          goto JOIN3195
        JOIN3195:  preds = [*ACTIVE3196,COND31A2]
          tensor[3,3] _t31A3#1 = fPerp27E7 (pos3051);
          real _t31A5#1 = 0.e0;
          real _t31A7#1 = 0.e0;
          tensor[3] _t31A9#1 = <tensor[3]>[tipd2953,_t31A5,_t31A7];
          tensor[3] noff031AB#1 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (_t31A3,_t31A9);
          tensor[3,3] _t31AD#1 = fPerp27E7 (pos3051);
          real _t31AF#1 = 0.e0;
          real _t31B1#1 = 0.e0;
          tensor[3] _t31B3#1 = <tensor[3]>[_t31AF,tipd2953,_t31B1];
          tensor[3] noff131B5#2 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (_t31AD,_t31B3);
          tensor[3,3] _t31B7#1 = fPerp27E7 (pos3051);
          real _t31B9#1 = 0.e0;
          real _t31BB#1 = 0.e0;
          tensor[3] _t31BD#1 = <tensor[3]>[_t31B9,_t31BB,tipd2953];
          tensor[3] noff231BF#2 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (_t31B7,_t31BD);
          tensor[3] noff31C1#2 = noff031AB;
          real _t31C4#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (noff31C1);
          real _t31C6#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (noff131B5);
          bool _t31C8#1 = GT<real>(_t31C4,_t31C6);
          if _t31C8 then goto ASSIGN31CD else goto ASSIGN31CF
        ASSIGN31CD:  preds = [COND31D0]
          tensor[3] _t31CB#1 = noff31C1;
          goto JOIN31CA
        JOIN31CA:  preds = [ASSIGN31CD,ASSIGN31CF]
          tensor[3] _t31CC#1 = phi(_t31CB,_t31CE)
          tensor[3] noff31D1#2 = _t31CC;
          real _t31D4#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (noff31D1);
          real _t31D6#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (noff231BF);
          bool _t31D8#1 = GT<real>(_t31D4,_t31D6);
          if _t31D8 then goto ASSIGN31DD else goto ASSIGN31DF
        ASSIGN31DD:  preds = [COND31E0]
          tensor[3] _t31DB#1 = noff31D1;
          goto JOIN31DA
        JOIN31DA:  preds = [ASSIGN31DD,ASSIGN31DF]
          tensor[3] _t31DC#1 = phi(_t31DB,_t31DE)
          tensor[3] noff31E1#2 = _t31DC;
          tensor[3] _t31E3#1 = λ(T0[3],T1[3])<(T0_{i0} * (1) / ( Sqrt(Σ(i1=0..2)<((T1_{i1} * T1_{i1}))>(i1=0..2))))>_{3} (noff31E1,noff31E1);
          tensor[3] _t31E5#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (tipd2953,_t31E3);
          tensor[3] npos31E7#2 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (_t31E5,pos3051);
          tensor[3] _t31E9#1 = fStep2531 (npos31E7);
          tensor[3] _t31EB#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs2949,_t31E9);
          tensor[3] npos31ED#5 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (npos31E7,_t31EB);
          int _t31F1#1 = 0;
          bool _t31F3#1 = GT<int>(verb294A,_t31F1);
          if _t31F3 then goto ASSIGN31F8 else goto ASSIGN31FA
        ASSIGN31F8:  preds = [COND31FB]
          bool _t31F6#1 = vv2984;
          goto JOIN31F5
        JOIN31F5:  preds = [ASSIGN31F8,ASSIGN31FA]
          bool _t31F7#1 = phi(_t31F6,_t31F9)
          if _t31F7 then goto ASSIGN31FF else goto ASSIGN3201
        ASSIGN31FF:  preds = [COND3204]
          bool _t31FD#1 = true;
          goto JOIN31FC
        JOIN31FC:  preds = [ASSIGN31FF,ASSIGN3203]
          bool _t31FE#1 = phi(_t31FD,_t3202)
          if _t31FE then goto ASSIGN3207 else goto JOIN3205
        ASSIGN3207:  preds = [COND3234]
          string _t3206#1 = "(i#";
          string _t3208#1 = " @ ";
          string _t320A#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID296E,_t3206,iter2942,_t3208,pos3051,_t320A);
          string _t320D#1 = " 0==nn =>NEW(";
          string _t320F#1 = ") w/ ID=";
          real _t3212#1 = 0.1e7;
          real _t3215#1 = TensorIndex<tensor[3],[0]>(npos31ED);
          real _t3217#1 = urnd281A (_t3215);
          real _t3219#1 = TensorIndex<tensor[3],[1]>(npos31ED);
          real _t321B#1 = urnd281A (_t3219);
          real _t321D#1 = λ(T0[],T1[])<(T0 + T1)> (_t3217,_t321B);
          real _t321F#1 = TensorIndex<tensor[3],[2]>(npos31ED);
          real _t3221#1 = urnd281A (_t321F);
          real _t3223#1 = λ(T0[],T1[])<(T0 + T1)> (_t321D,_t3221);
          real _t3225#1 = 0.1e1;
          real _t3227#1 = MathFn<fmod>(_t3223,_t3225);
          real _t3229#1 = _t3227;
          real _t322B#1 = λ(T0[],T1[])<(T0 * T1)> (_t3212,_t3229);
          real _t322D#1 = MathFn<floor>(_t322B);
          real _t322F#1 = _t322D;
          string _t3231#1 = "\n";
          Print<[string,tensor[3],string,real,string]>(_t320D,npos31ED,_t320F,_t322F,_t3231);
          goto JOIN3205
        JOIN3205:  preds = [MASSIGN3233,COND3234]
          real _t3238#1 = 0.e0;
          real _t323A#1 = 0.e0;
          real _t323C#1 = 0.e0;
          tensor[3] _t323E#1 = <tensor[3]>[_t3238,_t323A,_t323C];
          tensor[3] mid3240#2 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (pos3051,_t323E);
          real _t3243#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (mid3240);
          real _t3245#1 = 0.4e1;
          bool _t3247#1 = LT<real>(_t3243,_t3245);
          if _t3247 then goto ASSIGN324B else goto ASSIGN3252
        ASSIGN324B:  preds = [COND3253]
          real _t324A#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (mid3240);
          real _t324C#1 = 0.3e1;
          bool _t324E#1 = GT<real>(_t324A,_t324C);
          goto JOIN3249
        JOIN3249:  preds = [ASSIGN3250,ASSIGN3252]
          bool _t324F#1 = phi(_t324E,_t3251)
          bool _t3254#1 = _t324F;
          if _t3254 then goto ASSIGN325B else goto ASSIGN3522
        ASSIGN325B:  preds = [COND3523]
          real x325A#5 = TensorIndex<tensor[3],[0]>(pos3051);
          real y325C#5 = TensorIndex<tensor[3],[1]>(pos3051);
          real z325E#8 = TensorIndex<tensor[3],[2]>(pos3051);
          real _t3260#1 = 0.2e1;
          real _t3262#1 = λ(T0[],T1[])<(T0 * T1)> (_t3260,x325A);
          int _t3264#0 = 2;
          real _t3266#1 = λ(T0[])<(T0)^2> (z325E);
          real _t3268#1 = λ(T0[],T1[])<(T0 * T1)> (_t3262,_t3266);
          int _t326A#0 = 2;
          real _t326C#1 = λ(T0[])<(T0)^2> (x325A);
          int _t326E#0 = 2;
          real _t3270#1 = λ(T0[])<(T0)^2> (y325C);
          real _t3272#1 = λ(T0[],T1[])<(T0 + T1)> (_t326C,_t3270);
          int _t3274#0 = 2;
          real _t3276#1 = λ(T0[])<(T0)^2> (z325E);
          real _t3278#1 = λ(T0[],T1[])<(T0 + T1)> (_t3272,_t3276);
          real _t327A#1 = λ(T0[])<Cosine(T0)> (_t3278);
          real _t327C#1 = λ(T0[],T1[])<(T0 * T1)> (_t3268,_t327A);
          real _t327E#1 = 0.2e1;
          real _t3280#1 = λ(T0[],T1[])<(T0 * T1)> (_t327E,y325C);
          int _t3282#0 = 2;
          real _t3284#1 = λ(T0[])<(T0)^2> (z325E);
          real _t3286#1 = λ(T0[],T1[])<(T0 * T1)> (_t3280,_t3284);
          int _t3288#0 = 2;
          real _t328A#1 = λ(T0[])<(T0)^2> (x325A);
          int _t328C#0 = 2;
          real _t328E#1 = λ(T0[])<(T0)^2> (y325C);
          real _t3290#1 = λ(T0[],T1[])<(T0 + T1)> (_t328A,_t328E);
          int _t3292#0 = 2;
          real _t3294#1 = λ(T0[])<(T0)^2> (z325E);
          real _t3296#1 = λ(T0[],T1[])<(T0 + T1)> (_t3290,_t3294);
          real _t3298#1 = λ(T0[])<Cosine(T0)> (_t3296);
          real _t329A#1 = λ(T0[],T1[])<(T0 * T1)> (_t3286,_t3298);
          real _t329C#1 = 0.2e1;
          int _t329E#0 = 3;
          real _t32A0#1 = λ(T0[])<(T0)^3> (z325E);
          real _t32A2#1 = λ(T0[],T1[])<(T0 * T1)> (_t329C,_t32A0);
          int _t32A4#0 = 2;
          real _t32A6#1 = λ(T0[])<(T0)^2> (x325A);
          int _t32A8#0 = 2;
          real _t32AA#1 = λ(T0[])<(T0)^2> (y325C);
          real _t32AC#1 = λ(T0[],T1[])<(T0 + T1)> (_t32A6,_t32AA);
          int _t32AE#0 = 2;
          real _t32B0#1 = λ(T0[])<(T0)^2> (z325E);
          real _t32B2#1 = λ(T0[],T1[])<(T0 + T1)> (_t32AC,_t32B0);
          real _t32B4#1 = λ(T0[])<Cosine(T0)> (_t32B2);
          real _t32B6#1 = λ(T0[],T1[])<(T0 * T1)> (_t32A2,_t32B4);
          real _t32B8#1 = 0.2e1;
          real _t32BA#1 = λ(T0[],T1[])<(T0 * T1)> (_t32B8,z325E);
          int _t32BC#0 = 2;
          real _t32BE#1 = λ(T0[])<(T0)^2> (x325A);
          int _t32C0#0 = 2;
          real _t32C2#1 = λ(T0[])<(T0)^2> (y325C);
          real _t32C4#1 = λ(T0[],T1[])<(T0 + T1)> (_t32BE,_t32C2);
          int _t32C6#0 = 2;
          real _t32C8#1 = λ(T0[])<(T0)^2> (z325E);
          real _t32CA#1 = λ(T0[],T1[])<(T0 + T1)> (_t32C4,_t32C8);
          real _t32CC#1 = λ(T0[])<Sine(T0)> (_t32CA);
          real _t32CE#1 = λ(T0[],T1[])<(T0 * T1)> (_t32BA,_t32CC);
          real _t32D0#1 = λ(T0[],T1[])<(T0 + T1)> (_t32B6,_t32CE);
          tensor[3] g32D2#1 = <tensor[3]>[_t327C,_t329A,_t32D0];
          tensor[3] g32D4#1 = g32D2;
          real x32D7#24 = TensorIndex<tensor[3],[0]>(pos3051);
          real y32D9#24 = TensorIndex<tensor[3],[1]>(pos3051);
          real z32DB#33 = TensorIndex<tensor[3],[2]>(pos3051);
          int _t32DD#1 = -4;
          real _t32DF#1 = IntToReal(_t32DD);
          int _t32E1#0 = 2;
          real _t32E3#1 = λ(T0[])<(T0)^2> (x32D7);
          real _t32E5#1 = λ(T0[],T1[])<(T0 * T1)> (_t32DF,_t32E3);
          int _t32E7#0 = 2;
          real _t32E9#1 = λ(T0[])<(T0)^2> (z32DB);
          real _t32EB#1 = λ(T0[],T1[])<(T0 * T1)> (_t32E5,_t32E9);
          int _t32ED#0 = 2;
          real _t32EF#1 = λ(T0[])<(T0)^2> (x32D7);
          int _t32F1#0 = 2;
          real _t32F3#1 = λ(T0[])<(T0)^2> (y32D9);
          real _t32F5#1 = λ(T0[],T1[])<(T0 + T1)> (_t32EF,_t32F3);
          int _t32F7#0 = 2;
          real _t32F9#1 = λ(T0[])<(T0)^2> (z32DB);
          real _t32FB#1 = λ(T0[],T1[])<(T0 + T1)> (_t32F5,_t32F9);
          real _t32FD#1 = λ(T0[])<Sine(T0)> (_t32FB);
          real _t32FF#1 = λ(T0[],T1[])<(T0 * T1)> (_t32EB,_t32FD);
          real _t3301#1 = 0.2e1;
          int _t3303#0 = 2;
          real _t3305#1 = λ(T0[])<(T0)^2> (z32DB);
          real _t3307#1 = λ(T0[],T1[])<(T0 * T1)> (_t3301,_t3305);
          int _t3309#0 = 2;
          real _t330B#1 = λ(T0[])<(T0)^2> (x32D7);
          int _t330D#0 = 2;
          real _t330F#1 = λ(T0[])<(T0)^2> (y32D9);
          real _t3311#1 = λ(T0[],T1[])<(T0 + T1)> (_t330B,_t330F);
          int _t3313#0 = 2;
          real _t3315#1 = λ(T0[])<(T0)^2> (z32DB);
          real _t3317#1 = λ(T0[],T1[])<(T0 + T1)> (_t3311,_t3315);
          real _t3319#1 = λ(T0[])<Cosine(T0)> (_t3317);
          real _t331B#1 = λ(T0[],T1[])<(T0 * T1)> (_t3307,_t3319);
          real _t331D#1 = λ(T0[],T1[])<(T0 + T1)> (_t32FF,_t331B);
          int _t331F#1 = -4;
          real _t3321#1 = IntToReal(_t331F);
          real _t3323#1 = λ(T0[],T1[])<(T0 * T1)> (_t3321,x32D7);
          real _t3325#1 = λ(T0[],T1[])<(T0 * T1)> (_t3323,y32D9);
          int _t3327#0 = 2;
          real _t3329#1 = λ(T0[])<(T0)^2> (z32DB);
          real _t332B#1 = λ(T0[],T1[])<(T0 * T1)> (_t3325,_t3329);
          int _t332D#0 = 2;
          real _t332F#1 = λ(T0[])<(T0)^2> (x32D7);
          int _t3331#0 = 2;
          real _t3333#1 = λ(T0[])<(T0)^2> (y32D9);
          real _t3335#1 = λ(T0[],T1[])<(T0 + T1)> (_t332F,_t3333);
          int _t3337#0 = 2;
          real _t3339#1 = λ(T0[])<(T0)^2> (z32DB);
          real _t333B#1 = λ(T0[],T1[])<(T0 + T1)> (_t3335,_t3339);
          real _t333D#1 = λ(T0[])<Sine(T0)> (_t333B);
          real _t333F#1 = λ(T0[],T1[])<(T0 * T1)> (_t332B,_t333D);
          int _t3341#1 = -4;
          real _t3343#1 = IntToReal(_t3341);
          real _t3345#1 = λ(T0[],T1[])<(T0 * T1)> (_t3343,x32D7);
          int _t3347#0 = 3;
          real _t3349#1 = λ(T0[])<(T0)^3> (z32DB);
          real _t334B#1 = λ(T0[],T1[])<(T0 * T1)> (_t3345,_t3349);
          int _t334D#0 = 2;
          real _t334F#1 = λ(T0[])<(T0)^2> (x32D7);
          int _t3351#0 = 2;
          real _t3353#1 = λ(T0[])<(T0)^2> (y32D9);
          real _t3355#1 = λ(T0[],T1[])<(T0 + T1)> (_t334F,_t3353);
          int _t3357#0 = 2;
          real _t3359#1 = λ(T0[])<(T0)^2> (z32DB);
          real _t335B#1 = λ(T0[],T1[])<(T0 + T1)> (_t3355,_t3359);
          real _t335D#1 = λ(T0[])<Sine(T0)> (_t335B);
          real _t335F#1 = λ(T0[],T1[])<(T0 * T1)> (_t334B,_t335D);
          real _t3361#1 = 0.4e1;
          real _t3363#1 = λ(T0[],T1[])<(T0 * T1)> (_t3361,x32D7);
          real _t3365#1 = λ(T0[],T1[])<(T0 * T1)> (_t3363,z32DB);
          int _t3367#0 = 2;
          real _t3369#1 = λ(T0[])<(T0)^2> (x32D7);
          int _t336B#0 = 2;
          real _t336D#1 = λ(T0[])<(T0)^2> (y32D9);
          real _t336F#1 = λ(T0[],T1[])<(T0 + T1)> (_t3369,_t336D);
          int _t3371#0 = 2;
          real _t3373#1 = λ(T0[])<(T0)^2> (z32DB);
          real _t3375#1 = λ(T0[],T1[])<(T0 + T1)> (_t336F,_t3373);
          real _t3377#1 = λ(T0[])<Cosine(T0)> (_t3375);
          real _t3379#1 = λ(T0[],T1[])<(T0 * T1)> (_t3365,_t3377);
          real _t337B#1 = λ(T0[],T1[])<(T0 + T1)> (_t335F,_t3379);
          tensor[3] _t337D#1 = <tensor[3]>[_t331D,_t333F,_t337B];
          int _t337F#1 = -4;
          real _t3381#1 = IntToReal(_t337F);
          real _t3383#1 = λ(T0[],T1[])<(T0 * T1)> (_t3381,x32D7);
          real _t3385#1 = λ(T0[],T1[])<(T0 * T1)> (_t3383,y32D9);
          int _t3387#0 = 2;
          real _t3389#1 = λ(T0[])<(T0)^2> (z32DB);
          real _t338B#1 = λ(T0[],T1[])<(T0 * T1)> (_t3385,_t3389);
          int _t338D#0 = 2;
          real _t338F#1 = λ(T0[])<(T0)^2> (x32D7);
          int _t3391#0 = 2;
          real _t3393#1 = λ(T0[])<(T0)^2> (y32D9);
          real _t3395#1 = λ(T0[],T1[])<(T0 + T1)> (_t338F,_t3393);
          int _t3397#0 = 2;
          real _t3399#1 = λ(T0[])<(T0)^2> (z32DB);
          real _t339B#1 = λ(T0[],T1[])<(T0 + T1)> (_t3395,_t3399);
          real _t339D#1 = λ(T0[])<Sine(T0)> (_t339B);
          real _t339F#1 = λ(T0[],T1[])<(T0 * T1)> (_t338B,_t339D);
          int _t33A1#1 = -4;
          real _t33A3#1 = IntToReal(_t33A1);
          int _t33A5#0 = 2;
          real _t33A7#1 = λ(T0[])<(T0)^2> (y32D9);
          real _t33A9#1 = λ(T0[],T1[])<(T0 * T1)> (_t33A3,_t33A7);
          int _t33AB#0 = 2;
          real _t33AD#1 = λ(T0[])<(T0)^2> (z32DB);
          real _t33AF#1 = λ(T0[],T1[])<(T0 * T1)> (_t33A9,_t33AD);
          int _t33B1#0 = 2;
          real _t33B3#1 = λ(T0[])<(T0)^2> (x32D7);
          int _t33B5#0 = 2;
          real _t33B7#1 = λ(T0[])<(T0)^2> (y32D9);
          real _t33B9#1 = λ(T0[],T1[])<(T0 + T1)> (_t33B3,_t33B7);
          int _t33BB#0 = 2;
          real _t33BD#1 = λ(T0[])<(T0)^2> (z32DB);
          real _t33BF#1 = λ(T0[],T1[])<(T0 + T1)> (_t33B9,_t33BD);
          real _t33C1#1 = λ(T0[])<Sine(T0)> (_t33BF);
          real _t33C3#1 = λ(T0[],T1[])<(T0 * T1)> (_t33AF,_t33C1);
          real _t33C5#1 = 0.2e1;
          int _t33C7#0 = 2;
          real _t33C9#1 = λ(T0[])<(T0)^2> (z32DB);
          real _t33CB#1 = λ(T0[],T1[])<(T0 * T1)> (_t33C5,_t33C9);
          int _t33CD#0 = 2;
          real _t33CF#1 = λ(T0[])<(T0)^2> (x32D7);
          int _t33D1#0 = 2;
          real _t33D3#1 = λ(T0[])<(T0)^2> (y32D9);
          real _t33D5#1 = λ(T0[],T1[])<(T0 + T1)> (_t33CF,_t33D3);
          int _t33D7#0 = 2;
          real _t33D9#1 = λ(T0[])<(T0)^2> (z32DB);
          real _t33DB#1 = λ(T0[],T1[])<(T0 + T1)> (_t33D5,_t33D9);
          real _t33DD#1 = λ(T0[])<Cosine(T0)> (_t33DB);
          real _t33DF#1 = λ(T0[],T1[])<(T0 * T1)> (_t33CB,_t33DD);
          real _t33E1#1 = λ(T0[],T1[])<(T0 + T1)> (_t33C3,_t33DF);
          int _t33E3#1 = -4;
          real _t33E5#1 = IntToReal(_t33E3);
          real _t33E7#1 = λ(T0[],T1[])<(T0 * T1)> (_t33E5,y32D9);
          int _t33E9#0 = 3;
          real _t33EB#1 = λ(T0[])<(T0)^3> (z32DB);
          real _t33ED#1 = λ(T0[],T1[])<(T0 * T1)> (_t33E7,_t33EB);
          int _t33EF#0 = 2;
          real _t33F1#1 = λ(T0[])<(T0)^2> (x32D7);
          int _t33F3#0 = 2;
          real _t33F5#1 = λ(T0[])<(T0)^2> (y32D9);
          real _t33F7#1 = λ(T0[],T1[])<(T0 + T1)> (_t33F1,_t33F5);
          int _t33F9#0 = 2;
          real _t33FB#1 = λ(T0[])<(T0)^2> (z32DB);
          real _t33FD#1 = λ(T0[],T1[])<(T0 + T1)> (_t33F7,_t33FB);
          real _t33FF#1 = λ(T0[])<Sine(T0)> (_t33FD);
          real _t3401#1 = λ(T0[],T1[])<(T0 * T1)> (_t33ED,_t33FF);
          real _t3403#1 = 0.4e1;
          real _t3405#1 = λ(T0[],T1[])<(T0 * T1)> (_t3403,y32D9);
          real _t3407#1 = λ(T0[],T1[])<(T0 * T1)> (_t3405,z32DB);
          int _t3409#0 = 2;
          real _t340B#1 = λ(T0[])<(T0)^2> (x32D7);
          int _t340D#0 = 2;
          real _t340F#1 = λ(T0[])<(T0)^2> (y32D9);
          real _t3411#1 = λ(T0[],T1[])<(T0 + T1)> (_t340B,_t340F);
          int _t3413#0 = 2;
          real _t3415#1 = λ(T0[])<(T0)^2> (z32DB);
          real _t3417#1 = λ(T0[],T1[])<(T0 + T1)> (_t3411,_t3415);
          real _t3419#1 = λ(T0[])<Cosine(T0)> (_t3417);
          real _t341B#1 = λ(T0[],T1[])<(T0 * T1)> (_t3407,_t3419);
          real _t341D#1 = λ(T0[],T1[])<(T0 + T1)> (_t3401,_t341B);
          tensor[3] _t341F#1 = <tensor[3]>[_t339F,_t33E1,_t341D];
          int _t3421#1 = -4;
          real _t3423#1 = IntToReal(_t3421);
          real _t3425#1 = λ(T0[],T1[])<(T0 * T1)> (_t3423,x32D7);
          int _t3427#0 = 3;
          real _t3429#1 = λ(T0[])<(T0)^3> (z32DB);
          real _t342B#1 = λ(T0[],T1[])<(T0 * T1)> (_t3425,_t3429);
          int _t342D#0 = 2;
          real _t342F#1 = λ(T0[])<(T0)^2> (x32D7);
          int _t3431#0 = 2;
          real _t3433#1 = λ(T0[])<(T0)^2> (y32D9);
          real _t3435#1 = λ(T0[],T1[])<(T0 + T1)> (_t342F,_t3433);
          int _t3437#0 = 2;
          real _t3439#1 = λ(T0[])<(T0)^2> (z32DB);
          real _t343B#1 = λ(T0[],T1[])<(T0 + T1)> (_t3435,_t3439);
          real _t343D#1 = λ(T0[])<Sine(T0)> (_t343B);
          real _t343F#1 = λ(T0[],T1[])<(T0 * T1)> (_t342B,_t343D);
          real _t3441#1 = 0.4e1;
          real _t3443#1 = λ(T0[],T1[])<(T0 * T1)> (_t3441,x32D7);
          real _t3445#1 = λ(T0[],T1[])<(T0 * T1)> (_t3443,z32DB);
          int _t3447#0 = 2;
          real _t3449#1 = λ(T0[])<(T0)^2> (x32D7);
          int _t344B#0 = 2;
          real _t344D#1 = λ(T0[])<(T0)^2> (y32D9);
          real _t344F#1 = λ(T0[],T1[])<(T0 + T1)> (_t3449,_t344D);
          int _t3451#0 = 2;
          real _t3453#1 = λ(T0[])<(T0)^2> (z32DB);
          real _t3455#1 = λ(T0[],T1[])<(T0 + T1)> (_t344F,_t3453);
          real _t3457#1 = λ(T0[])<Cosine(T0)> (_t3455);
          real _t3459#1 = λ(T0[],T1[])<(T0 * T1)> (_t3445,_t3457);
          real _t345B#1 = λ(T0[],T1[])<(T0 + T1)> (_t343F,_t3459);
          int _t345D#1 = -4;
          real _t345F#1 = IntToReal(_t345D);
          real _t3461#1 = λ(T0[],T1[])<(T0 * T1)> (_t345F,y32D9);
          int _t3463#0 = 3;
          real _t3465#1 = λ(T0[])<(T0)^3> (z32DB);
          real _t3467#1 = λ(T0[],T1[])<(T0 * T1)> (_t3461,_t3465);
          int _t3469#0 = 2;
          real _t346B#1 = λ(T0[])<(T0)^2> (x32D7);
          int _t346D#0 = 2;
          real _t346F#1 = λ(T0[])<(T0)^2> (y32D9);
          real _t3471#1 = λ(T0[],T1[])<(T0 + T1)> (_t346B,_t346F);
          int _t3473#0 = 2;
          real _t3475#1 = λ(T0[])<(T0)^2> (z32DB);
          real _t3477#1 = λ(T0[],T1[])<(T0 + T1)> (_t3471,_t3475);
          real _t3479#1 = λ(T0[])<Sine(T0)> (_t3477);
          real _t347B#1 = λ(T0[],T1[])<(T0 * T1)> (_t3467,_t3479);
          real _t347D#1 = 0.4e1;
          real _t347F#1 = λ(T0[],T1[])<(T0 * T1)> (_t347D,y32D9);
          real _t3481#1 = λ(T0[],T1[])<(T0 * T1)> (_t347F,z32DB);
          int _t3483#0 = 2;
          real _t3485#1 = λ(T0[])<(T0)^2> (x32D7);
          int _t3487#0 = 2;
          real _t3489#1 = λ(T0[])<(T0)^2> (y32D9);
          real _t348B#1 = λ(T0[],T1[])<(T0 + T1)> (_t3485,_t3489);
          int _t348D#0 = 2;
          real _t348F#1 = λ(T0[])<(T0)^2> (z32DB);
          real _t3491#1 = λ(T0[],T1[])<(T0 + T1)> (_t348B,_t348F);
          real _t3493#1 = λ(T0[])<Cosine(T0)> (_t3491);
          real _t3495#1 = λ(T0[],T1[])<(T0 * T1)> (_t3481,_t3493);
          real _t3497#1 = λ(T0[],T1[])<(T0 + T1)> (_t347B,_t3495);
          int _t3499#1 = -4;
          real _t349B#1 = IntToReal(_t3499);
          int _t349D#0 = 4;
          real _t349F#1 = λ(T0[])<(T0)^4> (z32DB);
          real _t34A1#1 = λ(T0[],T1[])<(T0 * T1)> (_t349B,_t349F);
          int _t34A3#0 = 2;
          real _t34A5#1 = λ(T0[])<(T0)^2> (x32D7);
          int _t34A7#0 = 2;
          real _t34A9#1 = λ(T0[])<(T0)^2> (y32D9);
          real _t34AB#1 = λ(T0[],T1[])<(T0 + T1)> (_t34A5,_t34A9);
          int _t34AD#0 = 2;
          real _t34AF#1 = λ(T0[])<(T0)^2> (z32DB);
          real _t34B1#1 = λ(T0[],T1[])<(T0 + T1)> (_t34AB,_t34AF);
          real _t34B3#1 = λ(T0[])<Sine(T0)> (_t34B1);
          real _t34B5#1 = λ(T0[],T1[])<(T0 * T1)> (_t34A1,_t34B3);
          real _t34B7#1 = 0.1e2;
          int _t34B9#0 = 2;
          real _t34BB#1 = λ(T0[])<(T0)^2> (z32DB);
          real _t34BD#1 = λ(T0[],T1[])<(T0 * T1)> (_t34B7,_t34BB);
          int _t34BF#0 = 2;
          real _t34C1#1 = λ(T0[])<(T0)^2> (x32D7);
          int _t34C3#0 = 2;
          real _t34C5#1 = λ(T0[])<(T0)^2> (y32D9);
          real _t34C7#1 = λ(T0[],T1[])<(T0 + T1)> (_t34C1,_t34C5);
          int _t34C9#0 = 2;
          real _t34CB#1 = λ(T0[])<(T0)^2> (z32DB);
          real _t34CD#1 = λ(T0[],T1[])<(T0 + T1)> (_t34C7,_t34CB);
          real _t34CF#1 = λ(T0[])<Cosine(T0)> (_t34CD);
          real _t34D1#1 = λ(T0[],T1[])<(T0 * T1)> (_t34BD,_t34CF);
          real _t34D3#1 = λ(T0[],T1[])<(T0 + T1)> (_t34B5,_t34D1);
          real _t34D5#1 = 0.2e1;
          int _t34D7#0 = 2;
          real _t34D9#1 = λ(T0[])<(T0)^2> (x32D7);
          int _t34DB#0 = 2;
          real _t34DD#1 = λ(T0[])<(T0)^2> (y32D9);
          real _t34DF#1 = λ(T0[],T1[])<(T0 + T1)> (_t34D9,_t34DD);
          int _t34E1#0 = 2;
          real _t34E3#1 = λ(T0[])<(T0)^2> (z32DB);
          real _t34E5#1 = λ(T0[],T1[])<(T0 + T1)> (_t34DF,_t34E3);
          real _t34E7#1 = λ(T0[])<Sine(T0)> (_t34E5);
          real _t34E9#1 = λ(T0[],T1[])<(T0 * T1)> (_t34D5,_t34E7);
          real _t34EB#1 = λ(T0[],T1[])<(T0 + T1)> (_t34D3,_t34E9);
          tensor[3] _t34ED#1 = <tensor[3]>[_t345B,_t3497,_t34EB];
          tensor[3,3] hess34EF#1 = <tensor[3,3]>[_t337D,_t341F,_t34ED];
          tensor[3,3] H34F1#1 = hess34EF;
          (real[3] _t34F3#1,tensor[3][3] evecs34F4#0) = Eigen3x3(H34F1);
          int _t34F6#1 = 2;
          real _t34F8#1 = Subscript<real[3]>(_t34F3,_t34F6);
          real _t34FA#1 = λ(T0[])<Neg(T0)> (_t34F8);
          real _t34FC#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (g32D4);
          real _t34FE#1 = λ(T0[],T1[])<(T0 + T1)> (fBias2954,_t34FC);
          real str3500#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t34FA,_t34FE);
          real _t3502#1 = str3500;
          bool _t3504#1 = GT<real>(_t3502,fStrTh2956);
          if _t3504 then goto ASSIGN350A else goto ASSIGN351C
        ASSIGN350A:  preds = [COND351D]
          real _t3509#1 = 0.e0;
          real _t350B#1 = _t3509;
          bool _t350D#1 = GTE<real>(_t350B,fMaskTh2955);
          if _t350D then goto ASSIGN3511 else goto ASSIGN3516
        ASSIGN3511:  preds = [COND3517]
          bool _t3510#1 = true;
          bool _t3512#1 = _t3510;
          goto JOIN350F
        JOIN350F:  preds = [ASSIGN3514,ASSIGN3516]
          bool _t3513#1 = phi(_t3512,_t3515)
          bool _t3518#1 = _t3513;
          goto JOIN3506
        JOIN3506:  preds = [ASSIGN351A,ASSIGN351C]
          bool _t3519#1 = phi(_t3518,_t351B)
          bool _t351E#1 = _t3519;
          goto JOIN3256
        JOIN3256:  preds = [ASSIGN3520,ASSIGN3522]
          bool _t351F#1 = phi(_t351E,_t3521)
          bool _t3524#1 = _t351F;
          if _t3524 then goto NEW3527 else goto JOIN3526
        NEW3527:  preds = [COND352D]
          new point(npos31ED,hh296F);
          int _t3528#1 = 1;
          int born352A#1 = IAdd(born2976,_t3528);
          goto JOIN3526
        JOIN3526:  preds = [ASSIGN352C,COND352D]
          int born352B#1 = phi(born352A,born2976)
          int _t3531#1 = 0;
          bool _t3533#1 = GT<int>(verb294A,_t3531);
          if _t3533 then goto ASSIGN3538 else goto ASSIGN353A
        ASSIGN3538:  preds = [COND353B]
          bool _t3536#1 = vv2984;
          goto JOIN3535
        JOIN3535:  preds = [ASSIGN3538,ASSIGN353A]
          bool _t3537#1 = phi(_t3536,_t3539)
          if _t3537 then goto ASSIGN353F else goto ASSIGN3541
        ASSIGN353F:  preds = [COND3544]
          bool _t353D#1 = true;
          goto JOIN353C
        JOIN353C:  preds = [ASSIGN353F,ASSIGN3543]
          bool _t353E#1 = phi(_t353D,_t3542)
          if _t353E then goto ASSIGN3547 else goto JOIN3545
        ASSIGN3547:  preds = [COND3552]
          string _t3546#1 = "(i#";
          string _t3548#1 = " @ ";
          string _t354A#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID296E,_t3546,iter2942,_t3548,pos3051,_t354A);
          string _t354D#1 = "nn=0; after birthing mvmt=";
          string _t354F#1 = "\n";
          Print<[string,real,string]>(_t354D,mvmt2974,_t354F);
          goto JOIN3545
        JOIN3545:  preds = [MASSIGN3551,COND3552]
          self.pos = pos3051;
          self._pos = _pos3053;
          self.hh = hh296F;
          self.step = step304F;
          self.found = found2971;
          self.nfs = nfs2972;
          self.trav = trav3059;
          self.mvmt = mvmt2974;
          self.closest = closest2975;
          self.born = born352B;
          self.first = first2977;
          active
          goto JOIN3152
        JOIN3152:  preds = [*ACTIVE3553,COND355F]
          int born352E#9 = phi(born2976)
          tensor[3,3] _t3561#1 = fPerp27E7 (pos3051);
          tensor[3,3] _t3563#1 = λ(T0[],T1[3 3])<(T0 * T1_{i0,i1})>_{3 3} (hh296F,_t3561);
          tensor[3] es3565#5 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (_t3563,force306B);
          real _t3567#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (es3565);
          bool _t3569#1 = GT<real>(_t3567,tipd2953);
          if _t3569 then goto ASSIGN356D else goto JOIN356B
        ASSIGN356D:  preds = [COND357A]
          real _t356C#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (es3565);
          real _t356E#1 = λ(T0[],T1[])<(T0) / ( T1)> (tipd2953,_t356C);
          real hh3570#1 = λ(T0[],T1[])<(T0 * T1)> (hh296F,_t356E);
          real _t3573#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (es3565);
          real _t3575#1 = λ(T0[],T1[])<(T0) / ( T1)> (tipd2953,_t3573);
          tensor[3] es3577#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (_t3575,es3565);
          goto JOIN356B
        JOIN356B:  preds = [ASSIGN3579,COND357A]
          tensor[3] es3578#7 = phi(es3577,es3565)
          real hh3571#2 = phi(hh3570,hh296F)
          tensor[3] _t357C#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos3051,es3578);
          tensor[3] _t357E#1 = fStep2531 (_t357C);
          tensor[3] fs3580#6 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs2949,_t357E);
          real _t3582#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (fs3580);
          real _t3584#1 = λ(T0[],T1[])<(T0 * T1)> (fsEps294C,tipd2953);
          real _t3586#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (es3578);
          real _t3588#1 = λ(T0[],T1[])<(T0 + T1)> (_t3584,_t3586);
          real _t358A#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t3582,_t3588);
          real _t358C#1 = 0.5e0;
          bool _t358E#1 = GT<real>(_t358A,_t358C);
          if _t358E then goto ASSIGN3592 else goto JOIN3590
        ASSIGN3592:  preds = [COND35DC]
          real _t3591#1 = 0.5e0;
          real hh3593#2 = λ(T0[],T1[])<(T0 * T1)> (hh3571,_t3591);
          int _t3598#1 = 0;
          bool _t359A#1 = GT<int>(verb294A,_t3598);
          if _t359A then goto ASSIGN359F else goto ASSIGN35A1
        ASSIGN359F:  preds = [COND35A2]
          bool _t359D#1 = vv2984;
          goto JOIN359C
        JOIN359C:  preds = [ASSIGN359F,ASSIGN35A1]
          bool _t359E#1 = phi(_t359D,_t35A0)
          if _t359E then goto ASSIGN35A6 else goto ASSIGN35A8
        ASSIGN35A6:  preds = [COND35AB]
          bool _t35A4#1 = true;
          goto JOIN35A3
        JOIN35A3:  preds = [ASSIGN35A6,ASSIGN35AA]
          bool _t35A5#1 = phi(_t35A4,_t35A9)
          if _t35A5 then goto ASSIGN35AE else goto JOIN35AC
        ASSIGN35AE:  preds = [COND35CF]
          string _t35AD#1 = "(i#";
          string _t35AF#1 = " @ ";
          string _t35B1#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID296E,_t35AD,iter2942,_t35AF,pos3051,_t35B1);
          string _t35B4#1 = "nn=";
          string _t35B6#1 = "; |fs|/|es|=";
          real _t35B8#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (fs3580);
          real _t35BA#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (es3578);
          real _t35BC#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t35B8,_t35BA);
          string _t35BE#1 = " > 0.5; trying again with hh=";
          string _t35C0#1 = "; mvmt=";
          string _t35C2#1 = "\n";
          Print<[string,int,string,real,string,real,string,real,string]>(_t35B4,nn306C,_t35B6,_t35BC,_t35BE,hh3593,_t35C0,mvmt2974,_t35C2);
          string _t35C5#1 = "        fs=";
          string _t35C7#1 = "\n";
          Print<[string,tensor[3],string]>(_t35C5,fs3580,_t35C7);
          string _t35CA#1 = "        es=";
          string _t35CC#1 = "\n";
          Print<[string,tensor[3],string]>(_t35CA,es3578,_t35CC);
          goto JOIN35AC
        JOIN35AC:  preds = [MASSIGN35CE,COND35CF]
          self.pos = pos3051;
          self._pos = _pos3053;
          self.hh = hh3593;
          self.step = step304F;
          self.found = found2971;
          self.nfs = nfs2972;
          self.trav = trav3059;
          self.mvmt = mvmt2974;
          self.closest = closest2975;
          self.born = born352E;
          self.first = first2977;
          active
          goto JOIN3590
        JOIN3590:  preds = [*ACTIVE35D0,COND35DC]
          real hh3594#2 = phi(hh3571)
          tensor[3] oldpos35DD#4 = pos3051;
          tensor[3] _t35DF#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (fs3580,es3578);
          tensor[3] pos35E1#9 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos3051,_t35DF);
          tensor[3] _pos35E3#2 = pos35E1;
          real newE35E5#1 = 0.e0;
          real closest35E7#1 = rad2943;
          real _t35EA#1 = 0.e0;
          real _t35EC#1 = 0.e0;
          real _t35EE#1 = 0.e0;
          tensor[3] mno35F0#1 = <tensor[3]>[_t35EA,_t35EC,_t35EE];
          int nn35F2#1 = 0;
          point[] _t35F4#1 = SphereQuery<3,point>(_pos35E3,rad2943);
        FOREACH35FB:  preds = [ASSIGN35F5,NEXT366C]
          foreach (P35F6 in _t35F4) on exit goto ASSIGN366E
            tensor[3] mno35FA#2 = phi(mno35F0,mno3666)
            real newE35F9#7 = phi(newE35E5,newE3660)
            int nn35F8#10 = phi(nn35F2,nn366A)
            real closest35F7#3 = phi(closest35E7,closest3664)
          tensor[3] _t35FC#1 = P35F6.pos;
          tensor[3] off35FE#3 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (_t35FC,pos35E1);
          real _t3601#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (off35FE);
          real _t3603#7 = λ(T0[],T1[])<(T0) / ( T1)> (_t3601,rad2943);
          real _t3606#1 = 0.2e1;
          real _t3608#1 = 0.3e1;
          real _t360A#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t3606,_t3608);
          real s360C#5 = λ(T0[],T1[])<(T0) - (T1)> (_t3603,_t360A);
          real _t360F#1 = 0.2e1;
          real _t3611#1 = 0.3e1;
          real _t3613#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t360F,_t3611);
          bool _t3615#1 = LT<real>(_t3603,_t3613);
          if _t3615 then goto ASSIGN3619 else goto ASSIGN3635
        ASSIGN3619:  preds = [COND365B]
          real _t3618#1 = 0.1e1;
          real _t361A#1 = -0.5646e1;
          real _t361C#1 = 0.119835e2;
          real _t361E#1 = -0.113535e2;
          real _t3620#1 = 0.40550625e1;
          real _t3622#1 = λ(T0[],T1[])<(T0 * T1)> (_t3620,_t3603);
          real _t3624#1 = λ(T0[],T1[])<(T0 + T1)> (_t361E,_t3622);
          real _t3626#1 = λ(T0[],T1[])<(T0 * T1)> (_t3603,_t3624);
          real _t3628#1 = λ(T0[],T1[])<(T0 + T1)> (_t361C,_t3626);
          real _t362A#1 = λ(T0[],T1[])<(T0 * T1)> (_t3603,_t3628);
          real _t362C#1 = λ(T0[],T1[])<(T0 + T1)> (_t361A,_t362A);
          real _t362E#1 = λ(T0[],T1[])<(T0 * T1)> (_t3603,_t362C);
          real _t3630#1 = λ(T0[],T1[])<(T0 + T1)> (_t3618,_t362E);
          goto JOIN3617
        JOIN3617:  preds = [ASSIGN3632,ASSIGN365A]
          real _t3631#1 = phi(_t3630,_t3659)
          real _t365C#1 = _t3631;
          real _t365E#1 = _t365C;
          real newE3660#1 = λ(T0[],T1[])<(T0 + T1)> (newE35F9,_t365E);
          real _t3662#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (off35FE);
          real closest3664#1 = Min<real>(closest35F7,_t3662);
          tensor[3] mno3666#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (mno35FA,off35FE);
          int _t3668#1 = 1;
          int nn366A#1 = IAdd(nn35F8,_t3668);
          goto FOREACH35FB
        ASSIGN3635:  preds = [COND365B]
          real _t3634#1 = 0.1e1;
          bool _t3636#1 = LT<real>(_t3603,_t3634);
          if _t3636 then goto ASSIGN363A else goto ASSIGN3657
        ASSIGN363A:  preds = [COND3658]
          real _t3639#1 = -0.1e-2;
          real _t363B#1 = 0.9e-1;
          real _t363D#1 = -0.54e0;
          real _t363F#1 = 0.1215e1;
          real _t3641#1 = 0.972e0;
          real _t3643#1 = λ(T0[],T1[])<(T0 * T1)> (_t3641,s360C);
          real _t3645#1 = λ(T0[],T1[])<(T0) - (T1)> (_t363F,_t3643);
          real _t3647#1 = λ(T0[],T1[])<(T0 * T1)> (_t3645,s360C);
          real _t3649#1 = λ(T0[],T1[])<(T0 + T1)> (_t363D,_t3647);
          real _t364B#1 = λ(T0[],T1[])<(T0 * T1)> (_t3649,s360C);
          real _t364D#1 = λ(T0[],T1[])<(T0 + T1)> (_t363B,_t364B);
          real _t364F#1 = λ(T0[],T1[])<(T0 * T1)> (_t364D,s360C);
          real _t3651#1 = λ(T0[],T1[])<(T0 * T1)> (_t364F,s360C);
          real _t3653#1 = λ(T0[],T1[])<(T0 + T1)> (_t3639,_t3651);
          goto JOIN3638
        JOIN3638:  preds = [ASSIGN3655,ASSIGN3657]
          real _t3654#1 = phi(_t3653,_t3656)
          real _t3659#1 = _t3654;
          goto JOIN3617
        ASSIGN3657:  preds = [COND3658]
          real _t3656#1 = 0.e0;
          goto JOIN3638
        ASSIGN366E:  preds = [FOREACH35FB]
          real _t366D#1 = IntToReal(nn35F8);
          tensor[3] mno366F#2 = λ(T0[3],T1[])<(T0_{i0}) / ( T1)>_{3} (mno35FA,_t366D);
          int _t3673#1 = 0;
          bool _t3675#1 = GT<int>(verb294A,_t3673);
          if _t3675 then goto ASSIGN367A else goto ASSIGN367C
        ASSIGN367A:  preds = [COND367D]
          bool _t3678#1 = vv2984;
          goto JOIN3677
        JOIN3677:  preds = [ASSIGN367A,ASSIGN367C]
          bool _t3679#1 = phi(_t3678,_t367B)
          if _t3679 then goto ASSIGN3681 else goto ASSIGN3683
        ASSIGN3681:  preds = [COND3686]
          bool _t367F#1 = true;
          goto JOIN367E
        JOIN367E:  preds = [ASSIGN3681,ASSIGN3685]
          bool _t3680#1 = phi(_t367F,_t3684)
          if _t3680 then goto ASSIGN3689 else goto JOIN3687
        ASSIGN3689:  preds = [COND3698]
          string _t3688#1 = "(i#";
          string _t368A#1 = " @ ";
          string _t368C#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID296E,_t3688,iter2942,_t368A,pos35E1,_t368C);
          string _t368F#1 = "nn=";
          string _t3691#1 = "; oldE=";
          string _t3693#1 = " newE=";
          string _t3695#1 = "\n";
          Print<[string,int,string,real,string,real,string]>(_t368F,nn35F8,_t3691,oldE306A,_t3693,newE35F9,_t3695);
          goto JOIN3687
        JOIN3687:  preds = [MASSIGN3697,COND3698]
          real _t3699#1 = λ(T0[],T1[])<(T0) - (T1)> (newE35F9,oldE306A);
          tensor[3] _t369B#1 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (pos35E1,oldpos35DD);
          tensor[3] _t369D#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (gdeTest294F,_t369B);
          tensor[3] _t369F#1 = λ(T0[3])<Neg(T0_{i0})>_{3} (force306B);
          real _t36A1#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (_t369D,_t369F);
          bool _t36A3#1 = GT<real>(_t3699,_t36A1);
          if _t36A3 then goto ASSIGN36A8 else goto JOIN36A5
        ASSIGN36A8:  preds = [COND3724]
          real hh36A6#3 = λ(T0[],T1[])<(T0 * T1)> (hh3594,gdeBack294E);
          real _t36A9#1 = 0.e0;
          bool _t36AB#1 = EQ<real>(_t36A9,hh36A6);
          if _t36AB then goto ASSIGN36AF else goto JOIN36AD
        ASSIGN36AF:  preds = [COND36B9]
          string _t36AE#1 = "(i#";
          string _t36B0#1 = " @ ";
          string _t36B2#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID296E,_t36AE,iter2942,_t36B0,pos35E1,_t36B2);
          string _t36B5#1 = "backtracked all the way to hh=0\n";
          Print<[string]>(_t36B5);
          die
          goto JOIN36AD
        JOIN36AD:  preds = [*DIE36B8,COND36B9]
          int _t36BC#1 = 0;
          bool _t36BE#1 = GT<int>(verb294A,_t36BC);
          if _t36BE then goto ASSIGN36C3 else goto ASSIGN36C5
        ASSIGN36C3:  preds = [COND36C6]
          bool _t36C1#1 = vv2984;
          goto JOIN36C0
        JOIN36C0:  preds = [ASSIGN36C3,ASSIGN36C5]
          bool _t36C2#1 = phi(_t36C1,_t36C4)
          if _t36C2 then goto ASSIGN36CA else goto ASSIGN36CC
        ASSIGN36CA:  preds = [COND36CF]
          bool _t36C8#1 = true;
          goto JOIN36C7
        JOIN36C7:  preds = [ASSIGN36CA,ASSIGN36CE]
          bool _t36C9#1 = phi(_t36C8,_t36CD)
          if _t36C9 then goto ASSIGN36D2 else goto JOIN36D0
        ASSIGN36D2:  preds = [COND3711]
          string _t36D1#1 = "(i#";
          string _t36D3#1 = " @ ";
          string _t36D5#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID296E,_t36D1,iter2942,_t36D3,pos35E1,_t36D5);
          string _t36D8#1 = "nn=";
          string _t36DA#1 = "; oldE=";
          string _t36DC#1 = " newE=";
          string _t36DE#1 = "; backtracking; hh=";
          string _t36E0#1 = "; mvmt=";
          string _t36E2#1 = "\n";
          Print<[string,int,string,real,string,real,string,real,string,real,string]>(_t36D8,nn35F8,_t36DA,oldE306A,_t36DC,newE35F9,_t36DE,hh36A6,_t36E0,mvmt2974,_t36E2);
          string _t36E5#1 = "      fs=";
          string _t36E7#1 = "\n";
          Print<[string,tensor[3],string]>(_t36E5,fs3580,_t36E7);
          string _t36EA#1 = "      es=";
          string _t36EC#1 = "\n";
          Print<[string,tensor[3],string]>(_t36EA,es3578,_t36EC);
          string _t36EF#1 = "      newE - oldE=";
          real _t36F1#1 = λ(T0[],T1[])<(T0) - (T1)> (newE35F9,oldE306A);
          string _t36F3#1 = "\n";
          Print<[string,real,string]>(_t36EF,_t36F1,_t36F3);
          string _t36F6#1 = "      force=";
          string _t36F8#1 = "\n";
          Print<[string,tensor[3],string]>(_t36F6,force306B,_t36F8);
          string _t36FB#1 = "      dpos=";
          tensor[3] _t36FD#1 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (pos35E1,oldpos35DD);
          string _t36FF#1 = "\n";
          Print<[string,tensor[3],string]>(_t36FB,_t36FD,_t36FF);
          string _t3702#1 = "      0.5*(pos - oldpos).(-force)=";
          real _t3704#1 = 0.5e0;
          tensor[3] _t3706#1 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (pos35E1,oldpos35DD);
          tensor[3] _t3708#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (_t3704,_t3706);
          tensor[3] _t370A#1 = λ(T0[3])<Neg(T0_{i0})>_{3} (force306B);
          real _t370C#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (_t3708,_t370A);
          string _t370E#1 = "\n";
          Print<[string,real,string]>(_t3702,_t370C,_t370E);
          goto JOIN36D0
        JOIN36D0:  preds = [MASSIGN3710,COND3711]
          tensor[3] pos3712#2 = oldpos35DD;
          tensor[3] _pos3715#1 = pos3712;
          self.pos = pos3712;
          self._pos = _pos3715;
          self.hh = hh36A6;
          self.step = step304F;
          self.found = found2971;
          self.nfs = nfs2972;
          self.trav = trav3059;
          self.mvmt = mvmt2974;
          self.closest = closest35F7;
          self.born = born352E;
          self.first = first2977;
          active
          goto JOIN36A5
        JOIN36A5:  preds = [*ACTIVE3718,COND3724]
          real hh36A7#1 = phi(hh3594)
          tensor[3] _pos3716#1 = phi(_pos35E3)
          tensor[3] pos3713#8 = phi(pos35E1)
          real hh3725#2 = λ(T0[],T1[])<(T0 * T1)> (hh36A7,gdeOppor294D);
          tensor[3] _t3727#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (fs3580,es3578);
          tensor[3] step3729#4 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (step304F,_t3727);
          real _t372B#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (step3729);
          real _t372D#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t372B,tipd2953);
          real trav372F#1 = λ(T0[],T1[])<(T0 + T1)> (trav3059,_t372D);
          real _t3731#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (step3729);
          real _t3733#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t3731,tipd2953);
          real mvmt3735#1 = λ(T0[],T1[],T2[])<(T0 + (T2 * (T1) - (T0)))> (_t3733,mvmt2974,hist2948);
          real _t3737#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (step3729);
          real _t3739#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t3737,tipd2953);
          bool _t373B#1 = LT<real>(_t3739,pcmvEps294B);
          if _t373B then goto ASSIGN3741 else goto JOIN373D
        ASSIGN3741:  preds = [COND3B87]
          int _t3740#1 = 0;
          bool _t3742#1 = GT<int>(pcp2947,_t3740);
          if _t3742 then goto ASSIGN3747 else goto ASSIGN3759
        ASSIGN3747:  preds = [COND375A]
          int _t3746#1 = 0;
          bool _t3748#1 = GT<int>(iter2942,_t3746);
          if _t3748 then goto ASSIGN374C else goto ASSIGN3753
        ASSIGN374C:  preds = [COND3754]
          int _t374B#1 = 0;
          int _t374D#1 = IMod(iter2942,pcp2947);
          bool _t374F#1 = EQ<int>(_t374B,_t374D);
          goto JOIN374A
        JOIN374A:  preds = [ASSIGN3751,ASSIGN3753]
          bool _t3750#1 = phi(_t374F,_t3752)
          bool _t3755#1 = _t3750;
          goto JOIN3744
        JOIN3744:  preds = [ASSIGN3757,ASSIGN3759]
          bool _t3756#1 = phi(_t3755,_t3758)
          if _t3756 then goto ASSIGN375D else goto ASSIGN376E
        ASSIGN375D:  preds = [COND3771]
          int _t375C#1 = IDiv(iter2942,pcp2947);
          int _t375E#1 = 2;
          int _t3760#1 = IMod(_t375C,_t375E);
          int _t3762#1 = 2;
          int _t3764#1 = IMul(_t3760,_t3762);
          int _t3766#1 = 1;
          int _t3768#1 = ISub(_t3764,_t3766);
          int _t376A#1 = _t3768;
          goto JOIN375B
        JOIN375B:  preds = [ASSIGN376C,ASSIGN3770]
          int _t376B#1 = phi(_t376A,_t376F)
          int _t3772#1 = 0;
          bool _t3774#1 = NEQ<int>(_t376B,_t3772);
          if _t3774 then goto ASSIGN377B else goto JOIN3776
        ASSIGN377B:  preds = [COND3B85]
          int _t377A#1 = 0;
          bool _t377C#1 = GT<int>(pcp2947,_t377A);
          if _t377C then goto ASSIGN3781 else goto ASSIGN3793
        ASSIGN3781:  preds = [COND3794]
          int _t3780#1 = 0;
          bool _t3782#1 = GT<int>(iter2942,_t3780);
          if _t3782 then goto ASSIGN3786 else goto ASSIGN378D
        ASSIGN3786:  preds = [COND378E]
          int _t3785#1 = 0;
          int _t3787#1 = IMod(iter2942,pcp2947);
          bool _t3789#1 = EQ<int>(_t3785,_t3787);
          goto JOIN3784
        JOIN3784:  preds = [ASSIGN378B,ASSIGN378D]
          bool _t378A#1 = phi(_t3789,_t378C)
          bool _t378F#1 = _t378A;
          goto JOIN377E
        JOIN377E:  preds = [ASSIGN3791,ASSIGN3793]
          bool _t3790#1 = phi(_t378F,_t3792)
          if _t3790 then goto ASSIGN3797 else goto ASSIGN37A8
        ASSIGN3797:  preds = [COND37AB]
          int _t3796#1 = IDiv(iter2942,pcp2947);
          int _t3798#1 = 2;
          int _t379A#1 = IMod(_t3796,_t3798);
          int _t379C#1 = 2;
          int _t379E#1 = IMul(_t379A,_t379C);
          int _t37A0#1 = 1;
          int _t37A2#1 = ISub(_t379E,_t37A0);
          int _t37A4#1 = _t37A2;
          goto JOIN3795
        JOIN3795:  preds = [ASSIGN37A6,ASSIGN37AA]
          int _t37A5#1 = phi(_t37A4,_t37A9)
          int _t37AC#1 = 0;
          bool _t37AE#1 = GT<int>(_t37A5,_t37AC);
          if _t37AE then goto ASSIGN37B3 else goto ASSIGN37CB
        ASSIGN37B3:  preds = [COND37CC]
          real _t37B2#1 = 0.e0;
          bool _t37B4#1 = LT<real>(newE35F9,_t37B2);
          if _t37B4 then goto ASSIGN37B9 else goto ASSIGN37C5
        ASSIGN37B9:  preds = [COND37C6]
          bool _t37B8#1 = LT<int>(nn35F8,nnmin2945);
          if _t37B8 then goto ASSIGN37BD else goto ASSIGN37BF
        ASSIGN37BD:  preds = [COND37C0]
          bool _t37BB#1 = LT<int>(born352E,nnmax2944);
          goto JOIN37BA
        JOIN37BA:  preds = [ASSIGN37BD,ASSIGN37BF]
          bool _t37BC#1 = phi(_t37BB,_t37BE)
          bool _t37C1#1 = _t37BC;
          goto JOIN37B6
        JOIN37B6:  preds = [ASSIGN37C3,ASSIGN37C5]
          bool _t37C2#1 = phi(_t37C1,_t37C4)
          bool _t37C7#1 = _t37C2;
          goto JOIN37B0
        JOIN37B0:  preds = [ASSIGN37C9,ASSIGN37CB]
          bool _t37C8#1 = phi(_t37C7,_t37CA)
          if _t37C8 then goto ASSIGN37CF else goto ASSIGN3B1E
        ASSIGN37CF:  preds = [COND3B83]
          tensor[3] _t37CE#1 = λ(T0[3],T1[3])<(T0_{i0} * (1) / ( Sqrt(Σ(i1=0..2)<((T1_{i1} * T1_{i1}))>(i1=0..2))))>_{3} (mno366F,mno366F);
          tensor[3] _t37D0#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (tipd2953,_t37CE);
          tensor[3] npos37D2#2 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (pos3713,_t37D0);
          tensor[3] _t37D4#1 = fStep2531 (npos37D2);
          tensor[3] _t37D6#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs2949,_t37D4);
          tensor[3] npos37D8#2 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (npos37D2,_t37D6);
          tensor[3] _t37DA#1 = fStep2531 (npos37D8);
          tensor[3] _t37DC#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs2949,_t37DA);
          tensor[3] npos37DE#9 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (npos37D8,_t37DC);
          bool birth37E0#3 = true;
          int _t37E2#1 = 2;
          bool _t37E4#1 = EQ<int>(fDim2946,_t37E2);
          if _t37E4 then goto ASSIGN37E8 else goto JOIN37E6
        ASSIGN37E8:  preds = [COND381D]
          int _t37E7#1 = 4;
          bool _t37E9#1 = GTE<int>(nn35F8,_t37E7);
          if _t37E9 then goto ASSIGN37ED else goto JOIN37EB
        ASSIGN37ED:  preds = [COND381B]
          real _t37EC#1 = λ(T0[],T1[])<(T0 * T1)> (tipd2953,mabd2952);
          point[] _t37EE#1 = SphereQuery<3,point>(npos37DE,_t37EC);
        FOREACH37F1:  preds = [ASSIGN37EF,NEXT37F5]
          foreach (P37F0 in _t37EE) on exit goto COND381A
            bool birth37F3#2 = phi(birth37E0,birth37F2)
          bool birth37F2#1 = false;
          goto FOREACH37F1
        COND381A:  preds = [FOREACH37F1]
          if birth37F3 then goto ASSIGN37FA else goto JOIN37F7
        ASSIGN37FA:  preds = [COND381A]
          real _t37F9#1 = TensorIndex<tensor[3],[0]>(pos3713);
          real _t37FB#1 = urnd281A (_t37F9);
          real _t37FD#1 = TensorIndex<tensor[3],[1]>(pos3713);
          real _t37FF#1 = urnd281A (_t37FD);
          real _t3801#1 = λ(T0[],T1[])<(T0 + T1)> (_t37FB,_t37FF);
          real _t3803#1 = TensorIndex<tensor[3],[2]>(pos3713);
          real _t3805#1 = urnd281A (_t3803);
          real _t3807#1 = λ(T0[],T1[])<(T0 + T1)> (_t3801,_t3805);
          real _t3809#1 = 0.1e1;
          real _t380B#1 = MathFn<fmod>(_t3807,_t3809);
          real _t380D#1 = _t380B;
          int _t380F#1 = ISub(nnmin2945,nn35F8);
          real _t3811#1 = IntToReal(_t380F);
          real _t3813#1 = IntToReal(nnmin2945);
          real _t3815#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t3811,_t3813);
          bool birth3817#1 = LT<real>(_t380D,_t3815);
          goto JOIN37F7
        JOIN37F7:  preds = [ASSIGN3819,COND381A]
          bool birth3818#1 = phi(birth3817,birth37F3)
          goto JOIN37EB
        JOIN37EB:  preds = [JOIN37F7,COND381B]
          bool birth37F6#1 = phi(birth3818,birth37E0)
          goto JOIN37E6
        JOIN37E6:  preds = [JOIN37EB,COND381D]
          bool birth381C#1 = phi(birth37F6,birth37E0)
          if birth381C then goto ASSIGN3823 else goto JOIN381E
        ASSIGN3823:  preds = [COND3B19]
          real _t3822#1 = 0.e0;
          real _t3824#1 = 0.e0;
          real _t3826#1 = 0.e0;
          tensor[3] _t3828#1 = <tensor[3]>[_t3822,_t3824,_t3826];
          tensor[3] mid382A#2 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (npos37DE,_t3828);
          real _t382D#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (mid382A);
          real _t382F#1 = 0.4e1;
          bool _t3831#1 = LT<real>(_t382D,_t382F);
          if _t3831 then goto ASSIGN3835 else goto ASSIGN383C
        ASSIGN3835:  preds = [COND383D]
          real _t3834#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (mid382A);
          real _t3836#1 = 0.3e1;
          bool _t3838#1 = GT<real>(_t3834,_t3836);
          goto JOIN3833
        JOIN3833:  preds = [ASSIGN383A,ASSIGN383C]
          bool _t3839#1 = phi(_t3838,_t383B)
          bool _t383E#1 = _t3839;
          if _t383E then goto ASSIGN3845 else goto ASSIGN3B0C
        ASSIGN3845:  preds = [COND3B0D]
          real x3844#5 = TensorIndex<tensor[3],[0]>(npos37DE);
          real y3846#5 = TensorIndex<tensor[3],[1]>(npos37DE);
          real z3848#8 = TensorIndex<tensor[3],[2]>(npos37DE);
          real _t384A#1 = 0.2e1;
          real _t384C#1 = λ(T0[],T1[])<(T0 * T1)> (_t384A,x3844);
          int _t384E#0 = 2;
          real _t3850#1 = λ(T0[])<(T0)^2> (z3848);
          real _t3852#1 = λ(T0[],T1[])<(T0 * T1)> (_t384C,_t3850);
          int _t3854#0 = 2;
          real _t3856#1 = λ(T0[])<(T0)^2> (x3844);
          int _t3858#0 = 2;
          real _t385A#1 = λ(T0[])<(T0)^2> (y3846);
          real _t385C#1 = λ(T0[],T1[])<(T0 + T1)> (_t3856,_t385A);
          int _t385E#0 = 2;
          real _t3860#1 = λ(T0[])<(T0)^2> (z3848);
          real _t3862#1 = λ(T0[],T1[])<(T0 + T1)> (_t385C,_t3860);
          real _t3864#1 = λ(T0[])<Cosine(T0)> (_t3862);
          real _t3866#1 = λ(T0[],T1[])<(T0 * T1)> (_t3852,_t3864);
          real _t3868#1 = 0.2e1;
          real _t386A#1 = λ(T0[],T1[])<(T0 * T1)> (_t3868,y3846);
          int _t386C#0 = 2;
          real _t386E#1 = λ(T0[])<(T0)^2> (z3848);
          real _t3870#1 = λ(T0[],T1[])<(T0 * T1)> (_t386A,_t386E);
          int _t3872#0 = 2;
          real _t3874#1 = λ(T0[])<(T0)^2> (x3844);
          int _t3876#0 = 2;
          real _t3878#1 = λ(T0[])<(T0)^2> (y3846);
          real _t387A#1 = λ(T0[],T1[])<(T0 + T1)> (_t3874,_t3878);
          int _t387C#0 = 2;
          real _t387E#1 = λ(T0[])<(T0)^2> (z3848);
          real _t3880#1 = λ(T0[],T1[])<(T0 + T1)> (_t387A,_t387E);
          real _t3882#1 = λ(T0[])<Cosine(T0)> (_t3880);
          real _t3884#1 = λ(T0[],T1[])<(T0 * T1)> (_t3870,_t3882);
          real _t3886#1 = 0.2e1;
          int _t3888#0 = 3;
          real _t388A#1 = λ(T0[])<(T0)^3> (z3848);
          real _t388C#1 = λ(T0[],T1[])<(T0 * T1)> (_t3886,_t388A);
          int _t388E#0 = 2;
          real _t3890#1 = λ(T0[])<(T0)^2> (x3844);
          int _t3892#0 = 2;
          real _t3894#1 = λ(T0[])<(T0)^2> (y3846);
          real _t3896#1 = λ(T0[],T1[])<(T0 + T1)> (_t3890,_t3894);
          int _t3898#0 = 2;
          real _t389A#1 = λ(T0[])<(T0)^2> (z3848);
          real _t389C#1 = λ(T0[],T1[])<(T0 + T1)> (_t3896,_t389A);
          real _t389E#1 = λ(T0[])<Cosine(T0)> (_t389C);
          real _t38A0#1 = λ(T0[],T1[])<(T0 * T1)> (_t388C,_t389E);
          real _t38A2#1 = 0.2e1;
          real _t38A4#1 = λ(T0[],T1[])<(T0 * T1)> (_t38A2,z3848);
          int _t38A6#0 = 2;
          real _t38A8#1 = λ(T0[])<(T0)^2> (x3844);
          int _t38AA#0 = 2;
          real _t38AC#1 = λ(T0[])<(T0)^2> (y3846);
          real _t38AE#1 = λ(T0[],T1[])<(T0 + T1)> (_t38A8,_t38AC);
          int _t38B0#0 = 2;
          real _t38B2#1 = λ(T0[])<(T0)^2> (z3848);
          real _t38B4#1 = λ(T0[],T1[])<(T0 + T1)> (_t38AE,_t38B2);
          real _t38B6#1 = λ(T0[])<Sine(T0)> (_t38B4);
          real _t38B8#1 = λ(T0[],T1[])<(T0 * T1)> (_t38A4,_t38B6);
          real _t38BA#1 = λ(T0[],T1[])<(T0 + T1)> (_t38A0,_t38B8);
          tensor[3] g38BC#1 = <tensor[3]>[_t3866,_t3884,_t38BA];
          tensor[3] g38BE#1 = g38BC;
          real x38C1#24 = TensorIndex<tensor[3],[0]>(npos37DE);
          real y38C3#24 = TensorIndex<tensor[3],[1]>(npos37DE);
          real z38C5#33 = TensorIndex<tensor[3],[2]>(npos37DE);
          int _t38C7#1 = -4;
          real _t38C9#1 = IntToReal(_t38C7);
          int _t38CB#0 = 2;
          real _t38CD#1 = λ(T0[])<(T0)^2> (x38C1);
          real _t38CF#1 = λ(T0[],T1[])<(T0 * T1)> (_t38C9,_t38CD);
          int _t38D1#0 = 2;
          real _t38D3#1 = λ(T0[])<(T0)^2> (z38C5);
          real _t38D5#1 = λ(T0[],T1[])<(T0 * T1)> (_t38CF,_t38D3);
          int _t38D7#0 = 2;
          real _t38D9#1 = λ(T0[])<(T0)^2> (x38C1);
          int _t38DB#0 = 2;
          real _t38DD#1 = λ(T0[])<(T0)^2> (y38C3);
          real _t38DF#1 = λ(T0[],T1[])<(T0 + T1)> (_t38D9,_t38DD);
          int _t38E1#0 = 2;
          real _t38E3#1 = λ(T0[])<(T0)^2> (z38C5);
          real _t38E5#1 = λ(T0[],T1[])<(T0 + T1)> (_t38DF,_t38E3);
          real _t38E7#1 = λ(T0[])<Sine(T0)> (_t38E5);
          real _t38E9#1 = λ(T0[],T1[])<(T0 * T1)> (_t38D5,_t38E7);
          real _t38EB#1 = 0.2e1;
          int _t38ED#0 = 2;
          real _t38EF#1 = λ(T0[])<(T0)^2> (z38C5);
          real _t38F1#1 = λ(T0[],T1[])<(T0 * T1)> (_t38EB,_t38EF);
          int _t38F3#0 = 2;
          real _t38F5#1 = λ(T0[])<(T0)^2> (x38C1);
          int _t38F7#0 = 2;
          real _t38F9#1 = λ(T0[])<(T0)^2> (y38C3);
          real _t38FB#1 = λ(T0[],T1[])<(T0 + T1)> (_t38F5,_t38F9);
          int _t38FD#0 = 2;
          real _t38FF#1 = λ(T0[])<(T0)^2> (z38C5);
          real _t3901#1 = λ(T0[],T1[])<(T0 + T1)> (_t38FB,_t38FF);
          real _t3903#1 = λ(T0[])<Cosine(T0)> (_t3901);
          real _t3905#1 = λ(T0[],T1[])<(T0 * T1)> (_t38F1,_t3903);
          real _t3907#1 = λ(T0[],T1[])<(T0 + T1)> (_t38E9,_t3905);
          int _t3909#1 = -4;
          real _t390B#1 = IntToReal(_t3909);
          real _t390D#1 = λ(T0[],T1[])<(T0 * T1)> (_t390B,x38C1);
          real _t390F#1 = λ(T0[],T1[])<(T0 * T1)> (_t390D,y38C3);
          int _t3911#0 = 2;
          real _t3913#1 = λ(T0[])<(T0)^2> (z38C5);
          real _t3915#1 = λ(T0[],T1[])<(T0 * T1)> (_t390F,_t3913);
          int _t3917#0 = 2;
          real _t3919#1 = λ(T0[])<(T0)^2> (x38C1);
          int _t391B#0 = 2;
          real _t391D#1 = λ(T0[])<(T0)^2> (y38C3);
          real _t391F#1 = λ(T0[],T1[])<(T0 + T1)> (_t3919,_t391D);
          int _t3921#0 = 2;
          real _t3923#1 = λ(T0[])<(T0)^2> (z38C5);
          real _t3925#1 = λ(T0[],T1[])<(T0 + T1)> (_t391F,_t3923);
          real _t3927#1 = λ(T0[])<Sine(T0)> (_t3925);
          real _t3929#1 = λ(T0[],T1[])<(T0 * T1)> (_t3915,_t3927);
          int _t392B#1 = -4;
          real _t392D#1 = IntToReal(_t392B);
          real _t392F#1 = λ(T0[],T1[])<(T0 * T1)> (_t392D,x38C1);
          int _t3931#0 = 3;
          real _t3933#1 = λ(T0[])<(T0)^3> (z38C5);
          real _t3935#1 = λ(T0[],T1[])<(T0 * T1)> (_t392F,_t3933);
          int _t3937#0 = 2;
          real _t3939#1 = λ(T0[])<(T0)^2> (x38C1);
          int _t393B#0 = 2;
          real _t393D#1 = λ(T0[])<(T0)^2> (y38C3);
          real _t393F#1 = λ(T0[],T1[])<(T0 + T1)> (_t3939,_t393D);
          int _t3941#0 = 2;
          real _t3943#1 = λ(T0[])<(T0)^2> (z38C5);
          real _t3945#1 = λ(T0[],T1[])<(T0 + T1)> (_t393F,_t3943);
          real _t3947#1 = λ(T0[])<Sine(T0)> (_t3945);
          real _t3949#1 = λ(T0[],T1[])<(T0 * T1)> (_t3935,_t3947);
          real _t394B#1 = 0.4e1;
          real _t394D#1 = λ(T0[],T1[])<(T0 * T1)> (_t394B,x38C1);
          real _t394F#1 = λ(T0[],T1[])<(T0 * T1)> (_t394D,z38C5);
          int _t3951#0 = 2;
          real _t3953#1 = λ(T0[])<(T0)^2> (x38C1);
          int _t3955#0 = 2;
          real _t3957#1 = λ(T0[])<(T0)^2> (y38C3);
          real _t3959#1 = λ(T0[],T1[])<(T0 + T1)> (_t3953,_t3957);
          int _t395B#0 = 2;
          real _t395D#1 = λ(T0[])<(T0)^2> (z38C5);
          real _t395F#1 = λ(T0[],T1[])<(T0 + T1)> (_t3959,_t395D);
          real _t3961#1 = λ(T0[])<Cosine(T0)> (_t395F);
          real _t3963#1 = λ(T0[],T1[])<(T0 * T1)> (_t394F,_t3961);
          real _t3965#1 = λ(T0[],T1[])<(T0 + T1)> (_t3949,_t3963);
          tensor[3] _t3967#1 = <tensor[3]>[_t3907,_t3929,_t3965];
          int _t3969#1 = -4;
          real _t396B#1 = IntToReal(_t3969);
          real _t396D#1 = λ(T0[],T1[])<(T0 * T1)> (_t396B,x38C1);
          real _t396F#1 = λ(T0[],T1[])<(T0 * T1)> (_t396D,y38C3);
          int _t3971#0 = 2;
          real _t3973#1 = λ(T0[])<(T0)^2> (z38C5);
          real _t3975#1 = λ(T0[],T1[])<(T0 * T1)> (_t396F,_t3973);
          int _t3977#0 = 2;
          real _t3979#1 = λ(T0[])<(T0)^2> (x38C1);
          int _t397B#0 = 2;
          real _t397D#1 = λ(T0[])<(T0)^2> (y38C3);
          real _t397F#1 = λ(T0[],T1[])<(T0 + T1)> (_t3979,_t397D);
          int _t3981#0 = 2;
          real _t3983#1 = λ(T0[])<(T0)^2> (z38C5);
          real _t3985#1 = λ(T0[],T1[])<(T0 + T1)> (_t397F,_t3983);
          real _t3987#1 = λ(T0[])<Sine(T0)> (_t3985);
          real _t3989#1 = λ(T0[],T1[])<(T0 * T1)> (_t3975,_t3987);
          int _t398B#1 = -4;
          real _t398D#1 = IntToReal(_t398B);
          int _t398F#0 = 2;
          real _t3991#1 = λ(T0[])<(T0)^2> (y38C3);
          real _t3993#1 = λ(T0[],T1[])<(T0 * T1)> (_t398D,_t3991);
          int _t3995#0 = 2;
          real _t3997#1 = λ(T0[])<(T0)^2> (z38C5);
          real _t3999#1 = λ(T0[],T1[])<(T0 * T1)> (_t3993,_t3997);
          int _t399B#0 = 2;
          real _t399D#1 = λ(T0[])<(T0)^2> (x38C1);
          int _t399F#0 = 2;
          real _t39A1#1 = λ(T0[])<(T0)^2> (y38C3);
          real _t39A3#1 = λ(T0[],T1[])<(T0 + T1)> (_t399D,_t39A1);
          int _t39A5#0 = 2;
          real _t39A7#1 = λ(T0[])<(T0)^2> (z38C5);
          real _t39A9#1 = λ(T0[],T1[])<(T0 + T1)> (_t39A3,_t39A7);
          real _t39AB#1 = λ(T0[])<Sine(T0)> (_t39A9);
          real _t39AD#1 = λ(T0[],T1[])<(T0 * T1)> (_t3999,_t39AB);
          real _t39AF#1 = 0.2e1;
          int _t39B1#0 = 2;
          real _t39B3#1 = λ(T0[])<(T0)^2> (z38C5);
          real _t39B5#1 = λ(T0[],T1[])<(T0 * T1)> (_t39AF,_t39B3);
          int _t39B7#0 = 2;
          real _t39B9#1 = λ(T0[])<(T0)^2> (x38C1);
          int _t39BB#0 = 2;
          real _t39BD#1 = λ(T0[])<(T0)^2> (y38C3);
          real _t39BF#1 = λ(T0[],T1[])<(T0 + T1)> (_t39B9,_t39BD);
          int _t39C1#0 = 2;
          real _t39C3#1 = λ(T0[])<(T0)^2> (z38C5);
          real _t39C5#1 = λ(T0[],T1[])<(T0 + T1)> (_t39BF,_t39C3);
          real _t39C7#1 = λ(T0[])<Cosine(T0)> (_t39C5);
          real _t39C9#1 = λ(T0[],T1[])<(T0 * T1)> (_t39B5,_t39C7);
          real _t39CB#1 = λ(T0[],T1[])<(T0 + T1)> (_t39AD,_t39C9);
          int _t39CD#1 = -4;
          real _t39CF#1 = IntToReal(_t39CD);
          real _t39D1#1 = λ(T0[],T1[])<(T0 * T1)> (_t39CF,y38C3);
          int _t39D3#0 = 3;
          real _t39D5#1 = λ(T0[])<(T0)^3> (z38C5);
          real _t39D7#1 = λ(T0[],T1[])<(T0 * T1)> (_t39D1,_t39D5);
          int _t39D9#0 = 2;
          real _t39DB#1 = λ(T0[])<(T0)^2> (x38C1);
          int _t39DD#0 = 2;
          real _t39DF#1 = λ(T0[])<(T0)^2> (y38C3);
          real _t39E1#1 = λ(T0[],T1[])<(T0 + T1)> (_t39DB,_t39DF);
          int _t39E3#0 = 2;
          real _t39E5#1 = λ(T0[])<(T0)^2> (z38C5);
          real _t39E7#1 = λ(T0[],T1[])<(T0 + T1)> (_t39E1,_t39E5);
          real _t39E9#1 = λ(T0[])<Sine(T0)> (_t39E7);
          real _t39EB#1 = λ(T0[],T1[])<(T0 * T1)> (_t39D7,_t39E9);
          real _t39ED#1 = 0.4e1;
          real _t39EF#1 = λ(T0[],T1[])<(T0 * T1)> (_t39ED,y38C3);
          real _t39F1#1 = λ(T0[],T1[])<(T0 * T1)> (_t39EF,z38C5);
          int _t39F3#0 = 2;
          real _t39F5#1 = λ(T0[])<(T0)^2> (x38C1);
          int _t39F7#0 = 2;
          real _t39F9#1 = λ(T0[])<(T0)^2> (y38C3);
          real _t39FB#1 = λ(T0[],T1[])<(T0 + T1)> (_t39F5,_t39F9);
          int _t39FD#0 = 2;
          real _t39FF#1 = λ(T0[])<(T0)^2> (z38C5);
          real _t3A01#1 = λ(T0[],T1[])<(T0 + T1)> (_t39FB,_t39FF);
          real _t3A03#1 = λ(T0[])<Cosine(T0)> (_t3A01);
          real _t3A05#1 = λ(T0[],T1[])<(T0 * T1)> (_t39F1,_t3A03);
          real _t3A07#1 = λ(T0[],T1[])<(T0 + T1)> (_t39EB,_t3A05);
          tensor[3] _t3A09#1 = <tensor[3]>[_t3989,_t39CB,_t3A07];
          int _t3A0B#1 = -4;
          real _t3A0D#1 = IntToReal(_t3A0B);
          real _t3A0F#1 = λ(T0[],T1[])<(T0 * T1)> (_t3A0D,x38C1);
          int _t3A11#0 = 3;
          real _t3A13#1 = λ(T0[])<(T0)^3> (z38C5);
          real _t3A15#1 = λ(T0[],T1[])<(T0 * T1)> (_t3A0F,_t3A13);
          int _t3A17#0 = 2;
          real _t3A19#1 = λ(T0[])<(T0)^2> (x38C1);
          int _t3A1B#0 = 2;
          real _t3A1D#1 = λ(T0[])<(T0)^2> (y38C3);
          real _t3A1F#1 = λ(T0[],T1[])<(T0 + T1)> (_t3A19,_t3A1D);
          int _t3A21#0 = 2;
          real _t3A23#1 = λ(T0[])<(T0)^2> (z38C5);
          real _t3A25#1 = λ(T0[],T1[])<(T0 + T1)> (_t3A1F,_t3A23);
          real _t3A27#1 = λ(T0[])<Sine(T0)> (_t3A25);
          real _t3A29#1 = λ(T0[],T1[])<(T0 * T1)> (_t3A15,_t3A27);
          real _t3A2B#1 = 0.4e1;
          real _t3A2D#1 = λ(T0[],T1[])<(T0 * T1)> (_t3A2B,x38C1);
          real _t3A2F#1 = λ(T0[],T1[])<(T0 * T1)> (_t3A2D,z38C5);
          int _t3A31#0 = 2;
          real _t3A33#1 = λ(T0[])<(T0)^2> (x38C1);
          int _t3A35#0 = 2;
          real _t3A37#1 = λ(T0[])<(T0)^2> (y38C3);
          real _t3A39#1 = λ(T0[],T1[])<(T0 + T1)> (_t3A33,_t3A37);
          int _t3A3B#0 = 2;
          real _t3A3D#1 = λ(T0[])<(T0)^2> (z38C5);
          real _t3A3F#1 = λ(T0[],T1[])<(T0 + T1)> (_t3A39,_t3A3D);
          real _t3A41#1 = λ(T0[])<Cosine(T0)> (_t3A3F);
          real _t3A43#1 = λ(T0[],T1[])<(T0 * T1)> (_t3A2F,_t3A41);
          real _t3A45#1 = λ(T0[],T1[])<(T0 + T1)> (_t3A29,_t3A43);
          int _t3A47#1 = -4;
          real _t3A49#1 = IntToReal(_t3A47);
          real _t3A4B#1 = λ(T0[],T1[])<(T0 * T1)> (_t3A49,y38C3);
          int _t3A4D#0 = 3;
          real _t3A4F#1 = λ(T0[])<(T0)^3> (z38C5);
          real _t3A51#1 = λ(T0[],T1[])<(T0 * T1)> (_t3A4B,_t3A4F);
          int _t3A53#0 = 2;
          real _t3A55#1 = λ(T0[])<(T0)^2> (x38C1);
          int _t3A57#0 = 2;
          real _t3A59#1 = λ(T0[])<(T0)^2> (y38C3);
          real _t3A5B#1 = λ(T0[],T1[])<(T0 + T1)> (_t3A55,_t3A59);
          int _t3A5D#0 = 2;
          real _t3A5F#1 = λ(T0[])<(T0)^2> (z38C5);
          real _t3A61#1 = λ(T0[],T1[])<(T0 + T1)> (_t3A5B,_t3A5F);
          real _t3A63#1 = λ(T0[])<Sine(T0)> (_t3A61);
          real _t3A65#1 = λ(T0[],T1[])<(T0 * T1)> (_t3A51,_t3A63);
          real _t3A67#1 = 0.4e1;
          real _t3A69#1 = λ(T0[],T1[])<(T0 * T1)> (_t3A67,y38C3);
          real _t3A6B#1 = λ(T0[],T1[])<(T0 * T1)> (_t3A69,z38C5);
          int _t3A6D#0 = 2;
          real _t3A6F#1 = λ(T0[])<(T0)^2> (x38C1);
          int _t3A71#0 = 2;
          real _t3A73#1 = λ(T0[])<(T0)^2> (y38C3);
          real _t3A75#1 = λ(T0[],T1[])<(T0 + T1)> (_t3A6F,_t3A73);
          int _t3A77#0 = 2;
          real _t3A79#1 = λ(T0[])<(T0)^2> (z38C5);
          real _t3A7B#1 = λ(T0[],T1[])<(T0 + T1)> (_t3A75,_t3A79);
          real _t3A7D#1 = λ(T0[])<Cosine(T0)> (_t3A7B);
          real _t3A7F#1 = λ(T0[],T1[])<(T0 * T1)> (_t3A6B,_t3A7D);
          real _t3A81#1 = λ(T0[],T1[])<(T0 + T1)> (_t3A65,_t3A7F);
          int _t3A83#1 = -4;
          real _t3A85#1 = IntToReal(_t3A83);
          int _t3A87#0 = 4;
          real _t3A89#1 = λ(T0[])<(T0)^4> (z38C5);
          real _t3A8B#1 = λ(T0[],T1[])<(T0 * T1)> (_t3A85,_t3A89);
          int _t3A8D#0 = 2;
          real _t3A8F#1 = λ(T0[])<(T0)^2> (x38C1);
          int _t3A91#0 = 2;
          real _t3A93#1 = λ(T0[])<(T0)^2> (y38C3);
          real _t3A95#1 = λ(T0[],T1[])<(T0 + T1)> (_t3A8F,_t3A93);
          int _t3A97#0 = 2;
          real _t3A99#1 = λ(T0[])<(T0)^2> (z38C5);
          real _t3A9B#1 = λ(T0[],T1[])<(T0 + T1)> (_t3A95,_t3A99);
          real _t3A9D#1 = λ(T0[])<Sine(T0)> (_t3A9B);
          real _t3A9F#1 = λ(T0[],T1[])<(T0 * T1)> (_t3A8B,_t3A9D);
          real _t3AA1#1 = 0.1e2;
          int _t3AA3#0 = 2;
          real _t3AA5#1 = λ(T0[])<(T0)^2> (z38C5);
          real _t3AA7#1 = λ(T0[],T1[])<(T0 * T1)> (_t3AA1,_t3AA5);
          int _t3AA9#0 = 2;
          real _t3AAB#1 = λ(T0[])<(T0)^2> (x38C1);
          int _t3AAD#0 = 2;
          real _t3AAF#1 = λ(T0[])<(T0)^2> (y38C3);
          real _t3AB1#1 = λ(T0[],T1[])<(T0 + T1)> (_t3AAB,_t3AAF);
          int _t3AB3#0 = 2;
          real _t3AB5#1 = λ(T0[])<(T0)^2> (z38C5);
          real _t3AB7#1 = λ(T0[],T1[])<(T0 + T1)> (_t3AB1,_t3AB5);
          real _t3AB9#1 = λ(T0[])<Cosine(T0)> (_t3AB7);
          real _t3ABB#1 = λ(T0[],T1[])<(T0 * T1)> (_t3AA7,_t3AB9);
          real _t3ABD#1 = λ(T0[],T1[])<(T0 + T1)> (_t3A9F,_t3ABB);
          real _t3ABF#1 = 0.2e1;
          int _t3AC1#0 = 2;
          real _t3AC3#1 = λ(T0[])<(T0)^2> (x38C1);
          int _t3AC5#0 = 2;
          real _t3AC7#1 = λ(T0[])<(T0)^2> (y38C3);
          real _t3AC9#1 = λ(T0[],T1[])<(T0 + T1)> (_t3AC3,_t3AC7);
          int _t3ACB#0 = 2;
          real _t3ACD#1 = λ(T0[])<(T0)^2> (z38C5);
          real _t3ACF#1 = λ(T0[],T1[])<(T0 + T1)> (_t3AC9,_t3ACD);
          real _t3AD1#1 = λ(T0[])<Sine(T0)> (_t3ACF);
          real _t3AD3#1 = λ(T0[],T1[])<(T0 * T1)> (_t3ABF,_t3AD1);
          real _t3AD5#1 = λ(T0[],T1[])<(T0 + T1)> (_t3ABD,_t3AD3);
          tensor[3] _t3AD7#1 = <tensor[3]>[_t3A45,_t3A81,_t3AD5];
          tensor[3,3] hess3AD9#1 = <tensor[3,3]>[_t3967,_t3A09,_t3AD7];
          tensor[3,3] H3ADB#1 = hess3AD9;
          (real[3] _t3ADD#1,tensor[3][3] evecs3ADE#0) = Eigen3x3(H3ADB);
          int _t3AE0#1 = 2;
          real _t3AE2#1 = Subscript<real[3]>(_t3ADD,_t3AE0);
          real _t3AE4#1 = λ(T0[])<Neg(T0)> (_t3AE2);
          real _t3AE6#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (g38BE);
          real _t3AE8#1 = λ(T0[],T1[])<(T0 + T1)> (fBias2954,_t3AE6);
          real str3AEA#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t3AE4,_t3AE8);
          real _t3AEC#1 = str3AEA;
          bool _t3AEE#1 = GT<real>(_t3AEC,fStrTh2956);
          if _t3AEE then goto ASSIGN3AF4 else goto ASSIGN3B06
        ASSIGN3AF4:  preds = [COND3B07]
          real _t3AF3#1 = 0.e0;
          real _t3AF5#1 = _t3AF3;
          bool _t3AF7#1 = GTE<real>(_t3AF5,fMaskTh2955);
          if _t3AF7 then goto ASSIGN3AFB else goto ASSIGN3B00
        ASSIGN3AFB:  preds = [COND3B01]
          bool _t3AFA#1 = true;
          bool _t3AFC#1 = _t3AFA;
          goto JOIN3AF9
        JOIN3AF9:  preds = [ASSIGN3AFE,ASSIGN3B00]
          bool _t3AFD#1 = phi(_t3AFC,_t3AFF)
          bool _t3B02#1 = _t3AFD;
          goto JOIN3AF0
        JOIN3AF0:  preds = [ASSIGN3B04,ASSIGN3B06]
          bool _t3B03#1 = phi(_t3B02,_t3B05)
          bool _t3B08#1 = _t3B03;
          goto JOIN3840
        JOIN3840:  preds = [ASSIGN3B0A,ASSIGN3B0C]
          bool _t3B09#1 = phi(_t3B08,_t3B0B)
          bool _t3B0E#1 = _t3B09;
          if _t3B0E then goto NEW3B11 else goto JOIN3B10
        NEW3B11:  preds = [COND3B17]
          new point(npos37DE,hh3725);
          int _t3B12#1 = 1;
          int born3B14#1 = IAdd(born352E,_t3B12);
          goto JOIN3B10
        JOIN3B10:  preds = [ASSIGN3B16,COND3B17]
          int born3B15#1 = phi(born3B14,born352E)
          goto JOIN381E
        JOIN381E:  preds = [JOIN3B10,COND3B19]
          int born3B18#1 = phi(born3B15,born352E)
          goto JOIN37CD
        JOIN37CD:  preds = [JOIN381E,JOIN3B53]
          int born3B1A#1 = phi(born3B18,born352E)
          goto JOIN3776
        JOIN3776:  preds = [JOIN37CD,COND3B85]
          int born3B84#1 = phi(born3B1A,born352E)
          goto JOIN373D
        JOIN373D:  preds = [JOIN3776,COND3B87]
          int born3B86#1 = phi(born3B84,born352E)
          goto JOIN2FB0
        ASSIGN3B00:  preds = [COND3B01]
          bool _t3AFF#1 = false;
          goto JOIN3AF9
        ASSIGN3B06:  preds = [COND3B07]
          bool _t3B05#1 = false;
          goto JOIN3AF0
        ASSIGN3B0C:  preds = [COND3B0D]
          bool _t3B0B#1 = false;
          goto JOIN3840
        ASSIGN383C:  preds = [COND383D]
          bool _t383B#1 = false;
          goto JOIN3833
        ASSIGN3B1E:  preds = [COND3B83]
          int _t3B1D#1 = 0;
          bool _t3B1F#1 = GT<int>(pcp2947,_t3B1D);
          if _t3B1F then goto ASSIGN3B24 else goto ASSIGN3B36
        ASSIGN3B24:  preds = [COND3B37]
          int _t3B23#1 = 0;
          bool _t3B25#1 = GT<int>(iter2942,_t3B23);
          if _t3B25 then goto ASSIGN3B29 else goto ASSIGN3B30
        ASSIGN3B29:  preds = [COND3B31]
          int _t3B28#1 = 0;
          int _t3B2A#1 = IMod(iter2942,pcp2947);
          bool _t3B2C#1 = EQ<int>(_t3B28,_t3B2A);
          goto JOIN3B27
        JOIN3B27:  preds = [ASSIGN3B2E,ASSIGN3B30]
          bool _t3B2D#1 = phi(_t3B2C,_t3B2F)
          bool _t3B32#1 = _t3B2D;
          goto JOIN3B21
        JOIN3B21:  preds = [ASSIGN3B34,ASSIGN3B36]
          bool _t3B33#1 = phi(_t3B32,_t3B35)
          if _t3B33 then goto ASSIGN3B3A else goto ASSIGN3B4B
        ASSIGN3B3A:  preds = [COND3B4E]
          int _t3B39#1 = IDiv(iter2942,pcp2947);
          int _t3B3B#1 = 2;
          int _t3B3D#1 = IMod(_t3B39,_t3B3B);
          int _t3B3F#1 = 2;
          int _t3B41#1 = IMul(_t3B3D,_t3B3F);
          int _t3B43#1 = 1;
          int _t3B45#1 = ISub(_t3B41,_t3B43);
          int _t3B47#1 = _t3B45;
          goto JOIN3B38
        JOIN3B38:  preds = [ASSIGN3B49,ASSIGN3B4D]
          int _t3B48#1 = phi(_t3B47,_t3B4C)
          int _t3B4F#1 = 0;
          bool _t3B51#1 = LT<int>(_t3B48,_t3B4F);
          if _t3B51 then goto ASSIGN3B55 else goto JOIN3B53
        ASSIGN3B55:  preds = [COND3B82]
          real _t3B54#1 = 0.e0;
          bool _t3B56#1 = GT<real>(newE35F9,_t3B54);
          if _t3B56 then goto ASSIGN3B5A else goto JOIN3B58
        ASSIGN3B5A:  preds = [COND3B81]
          bool _t3B59#1 = GT<int>(nn35F8,nnmax2944);
          if _t3B59 then goto ASSIGN3B5E else goto JOIN3B5B
        ASSIGN3B5E:  preds = [COND3B80]
          real _t3B5D#1 = TensorIndex<tensor[3],[0]>(pos3713);
          real _t3B5F#1 = urnd281A (_t3B5D);
          real _t3B61#1 = TensorIndex<tensor[3],[1]>(pos3713);
          real _t3B63#1 = urnd281A (_t3B61);
          real _t3B65#1 = λ(T0[],T1[])<(T0 + T1)> (_t3B5F,_t3B63);
          real _t3B67#1 = TensorIndex<tensor[3],[2]>(pos3713);
          real _t3B69#1 = urnd281A (_t3B67);
          real _t3B6B#1 = λ(T0[],T1[])<(T0 + T1)> (_t3B65,_t3B69);
          real _t3B6D#1 = 0.1e1;
          real _t3B6F#1 = MathFn<fmod>(_t3B6B,_t3B6D);
          real _t3B71#1 = _t3B6F;
          int _t3B73#1 = ISub(nn35F8,nnmax2944);
          real _t3B75#1 = IntToReal(_t3B73);
          real _t3B77#1 = IntToReal(nn35F8);
          real _t3B79#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t3B75,_t3B77);
          bool _t3B7B#1 = LT<real>(_t3B71,_t3B79);
          if _t3B7B then goto DIE3B7E else goto JOIN3B7D
        DIE3B7E:  preds = [COND3B7F]
          die
          goto JOIN3B7D
        JOIN3B7D:  preds = [*DIE3B7E,COND3B7F]
          goto JOIN3B5B
        JOIN3B5B:  preds = [JOIN3B7D,COND3B80]
          goto JOIN3B58
        JOIN3B58:  preds = [JOIN3B5B,COND3B81]
          goto JOIN3B53
        JOIN3B53:  preds = [JOIN3B58,COND3B82]
          goto JOIN37CD
        ASSIGN3B4B:  preds = [COND3B4E]
          int _t3B4A#1 = 0;
          int _t3B4C#1 = _t3B4A;
          goto JOIN3B38
        ASSIGN3B30:  preds = [COND3B31]
          bool _t3B2F#1 = false;
          goto JOIN3B27
        ASSIGN3B36:  preds = [COND3B37]
          bool _t3B35#1 = false;
          goto JOIN3B21
        ASSIGN37BF:  preds = [COND37C0]
          bool _t37BE#1 = false;
          goto JOIN37BA
        ASSIGN37C5:  preds = [COND37C6]
          bool _t37C4#1 = false;
          goto JOIN37B6
        ASSIGN37CB:  preds = [COND37CC]
          bool _t37CA#1 = false;
          goto JOIN37B0
        ASSIGN37A8:  preds = [COND37AB]
          int _t37A7#1 = 0;
          int _t37A9#1 = _t37A7;
          goto JOIN3795
        ASSIGN378D:  preds = [COND378E]
          bool _t378C#1 = false;
          goto JOIN3784
        ASSIGN3793:  preds = [COND3794]
          bool _t3792#1 = false;
          goto JOIN377E
        ASSIGN376E:  preds = [COND3771]
          int _t376D#1 = 0;
          int _t376F#1 = _t376D;
          goto JOIN375B
        ASSIGN3753:  preds = [COND3754]
          bool _t3752#1 = false;
          goto JOIN374A
        ASSIGN3759:  preds = [COND375A]
          bool _t3758#1 = false;
          goto JOIN3744
        ASSIGN36CC:  preds = [COND36CF]
          int _t36CB#1 = 1;
          bool _t36CD#1 = GT<int>(verb294A,_t36CB);
          goto JOIN36C7
        ASSIGN36C5:  preds = [COND36C6]
          bool _t36C4#1 = false;
          goto JOIN36C0
        ASSIGN3683:  preds = [COND3686]
          int _t3682#1 = 1;
          bool _t3684#1 = GT<int>(verb294A,_t3682);
          goto JOIN367E
        ASSIGN367C:  preds = [COND367D]
          bool _t367B#1 = false;
          goto JOIN3677
        ASSIGN35A8:  preds = [COND35AB]
          int _t35A7#1 = 1;
          bool _t35A9#1 = GT<int>(verb294A,_t35A7);
          goto JOIN35A3
        ASSIGN35A1:  preds = [COND35A2]
          bool _t35A0#1 = false;
          goto JOIN359C
        ASSIGN3541:  preds = [COND3544]
          int _t3540#1 = 1;
          bool _t3542#1 = GT<int>(verb294A,_t3540);
          goto JOIN353C
        ASSIGN353A:  preds = [COND353B]
          bool _t3539#1 = false;
          goto JOIN3535
        ASSIGN3516:  preds = [COND3517]
          bool _t3515#1 = false;
          goto JOIN350F
        ASSIGN351C:  preds = [COND351D]
          bool _t351B#1 = false;
          goto JOIN3506
        ASSIGN3522:  preds = [COND3523]
          bool _t3521#1 = false;
          goto JOIN3256
        ASSIGN3252:  preds = [COND3253]
          bool _t3251#1 = false;
          goto JOIN3249
        ASSIGN3201:  preds = [COND3204]
          int _t3200#1 = 1;
          bool _t3202#1 = GT<int>(verb294A,_t3200);
          goto JOIN31FC
        ASSIGN31FA:  preds = [COND31FB]
          bool _t31F9#1 = false;
          goto JOIN31F5
        ASSIGN31DF:  preds = [COND31E0]
          tensor[3] _t31DE#1 = noff231BF;
          goto JOIN31DA
        ASSIGN31CF:  preds = [COND31D0]
          tensor[3] _t31CE#1 = noff131B5;
          goto JOIN31CA
        ASSIGN3191:  preds = [COND3192]
          bool _t3190#1 = false;
          goto JOIN318C
        ASSIGN3184:  preds = [COND3187]
          int _t3183#1 = 0;
          int _t3185#1 = _t3183;
          goto JOIN3171
        ASSIGN3169:  preds = [COND316A]
          bool _t3168#1 = false;
          goto JOIN3160
        ASSIGN316F:  preds = [COND3170]
          bool _t316E#1 = false;
          goto JOIN315A
        ASSIGN2CD9:  preds = [COND2CDA]
          bool _t2CD8#1 = false;
          goto JOIN2CD0
        ASSIGN2CB0:  preds = [COND2CB3]
          int _t2CAF#1 = 1;
          bool _t2CB1#1 = GT<int>(verb294A,_t2CAF);
          goto JOIN2CAB
        ASSIGN2CA9:  preds = [COND2CAA]
          bool _t2CA8#1 = false;
          goto JOIN2CA4
        ASSIGN2C8B:  preds = [COND2C8C]
          bool _t2C8A#1 = false;
          goto JOIN2C84
        ASSIGN2C91:  preds = [COND2C92]
          bool _t2C90#1 = false;
          goto JOIN2C7B
        ASSIGN2C97:  preds = [COND2C98]
          bool _t2C96#1 = false;
          goto JOIN29CB
        ASSIGN29C7:  preds = [COND29C8]
          bool _t29C6#1 = false;
          goto JOIN29BE
        ASSIGN2999:  preds = [COND299C]
          int _t2998#1 = 1;
          bool _t299A#1 = GT<int>(verb294A,_t2998);
          goto JOIN2994
        ASSIGN2992:  preds = [COND2993]
          bool _t2991#1 = false;
          goto JOIN298D
    end update
  end point
## initial strand creation
  COLLECTION
    ENTRY28DC:  preds = []
      tensor[3][] ipos28C8#2 = globals.ipos21E0;
      int _t28CA#1 = 0;
      int _t28CC#1 = Length<tensor[3]>(ipos28C8);
      int _t28CE#1 = 1;
      int _t28D0#1 = ISub(_t28CC,_t28CE);
      int[] _t28D2#1 = Range(_t28CA,_t28D0);
    FOREACH28D5:  preds = [ASSIGN28D3,NEXT28DB]
      foreach (ii28D4 in _t28D2) on exit goto RETURN28DD
      tensor[3] _t28D6#1 = Subscript<tensor[3][]>(ipos28C8,ii28D4);
      real _t28D8#1 = 0.1e1;
      new point(_t28D6,_t28D8);
      goto FOREACH28D5
    RETURN28DD:  preds = [FOREACH28D5]
      return
## global update
  ENTRY3C65:  preds = []
    real geoEps3B9E#3 = globals.geoEps21D7;
    real mvmtEps3B9D#3 = globals.mvmtEps21D8;
    real rpcEps3B9C#3 = globals.rpcEps21D9;
    real pchist3B9B#1 = globals.pchist2221;
    int iter3B9A#4 = globals.iter2222;
    real rpc3B99#1 = globals.rpc2223;
    int popLast3B98#1 = globals.popLast2224;
    int pop3BA6#3 = NumStrands<active>;
    bool _t3BA9#1 = NEQ<int>(pop3BA6,popLast3B98);
    if _t3BA9 then goto ASSIGN3BAE else goto ASSIGN3BB0
  ASSIGN3BAE:  preds = [COND3BB1]
    int _t3BAC#1 = 1;
    goto JOIN3BAB
  JOIN3BAB:  preds = [ASSIGN3BAE,ASSIGN3BB0]
    int _t3BAD#1 = phi(_t3BAC,_t3BAF)
    int pc3BB2#2 = _t3BAD;
    real _t3BB4#1 = IntToReal(pc3BB2);
    real rpc3BB6#5 = λ(T0[],T1[],T2[])<(T0 + (T2 * (T1) - (T0)))> (_t3BB4,rpc3B99,pchist3B9B);
    globals.rpc2223 = rpc3BB6;
    point[] P3BB9#1 = Strands<point,all>;
    (bool res3BBA#1) = all(MAP all2821 (P3BB9));
    bool allfound3BBD#1 = res3BBA;
    real _t3BBF#1 = 0.1e3;
    point[] P3BC1#1 = Strands<point,all>;
    (real res3BC2#1) = sum<real>(MAP mean282F (P3BC1));
    int num3BC5#1 = NumStrands<all>;
    real rNum3BC7#1 = IntToReal(num3BC5);
    real mean3BC9#1 = λ(T0[],T1[])<(T0) / ( T1)> (res3BC2,rNum3BC7);
    real percfound3BCB#1 = λ(T0[],T1[])<(T0 * T1)> (_t3BBF,mean3BC9);
    point[] P3BCD#1 = Strands<point,all>;
    (real res3BCE#1) = sum<real>(MAP mean2836 (P3BCD));
    int num3BD1#1 = NumStrands<all>;
    real rNum3BD3#1 = IntToReal(num3BD1);
    real mean3BD5#1 = λ(T0[],T1[])<(T0) / ( T1)> (res3BCE,rNum3BD3);
    real meancl3BD7#3 = mean3BD5;
    point[] P3BD9#1 = Strands<point,all>;
    (real res3BDA#1) = sum<real>(MAP mean2843 (P3BD9,meancl3BD7));
    int num3BDD#1 = NumStrands<all>;
    real rNum3BDF#1 = IntToReal(num3BDD);
    real mean3BE1#1 = λ(T0[],T1[])<(T0) / ( T1)> (res3BDA,rNum3BDF);
    real varicl3BE3#1 = mean3BE1;
    real _t3BE5#1 = λ(T0[])<Sqrt(T0)> (varicl3BE3);
    real covcl3BE7#4 = λ(T0[],T1[])<(T0) / ( T1)> (_t3BE5,meancl3BD7);
    point[] P3BE9#1 = Strands<point,all>;
    (real res3BEA#1) = max<real>(MAP max284A (P3BE9));
    real maxmvmt3BED#4 = res3BEA;
    string _t3BEF#1 = "======= finished iter ";
    string _t3BF1#1 = " w/ ";
    string _t3BF3#1 = ")";
    string _t3BF5#1 = "; %found=";
    string _t3BF7#1 = "; mean(hh)=";
    point[] P3BF9#1 = Strands<point,all>;
    (real res3BFA#1) = sum<real>(MAP mean2851 (P3BF9));
    int num3BFD#1 = NumStrands<all>;
    real rNum3BFF#1 = IntToReal(num3BFD);
    real mean3C01#1 = λ(T0[],T1[])<(T0) / ( T1)> (res3BFA,rNum3BFF);
    string _t3C03#1 = "; mean(cl)=";
    string _t3C05#1 = "; COV(cl)=";
    string _t3C07#1 = "; max(mvmt)=";
    string _t3C09#1 = "; pc=";
    string _t3C0B#1 = "; rpc=";
    string _t3C0D#1 = "\n";
    Print<[string,int,string,int,string,string,real,string,real,string,real,string,real,string,real,string,int,string,real,string]>(_t3BEF,iter3B9A,_t3BF1,pop3BA6,_t3BF3,_t3BF5,percfound3BCB,_t3BF7,mean3C01,_t3C03,meancl3BD7,_t3C05,covcl3BE7,_t3C07,maxmvmt3BED,_t3C09,pc3BB2,_t3C0B,rpc3BB6,_t3C0D);
    if allfound3BBD then goto ASSIGN3C14 else goto ASSIGN3C2A
  ASSIGN3C14:  preds = [COND3C2B]
    bool _t3C13#1 = LT<real>(covcl3BE7,geoEps3B9E);
    if _t3C13 then goto ASSIGN3C18 else goto ASSIGN3C24
  ASSIGN3C18:  preds = [COND3C25]
    bool _t3C17#1 = LT<real>(maxmvmt3BED,mvmtEps3B9D);
    if _t3C17 then goto ASSIGN3C1C else goto ASSIGN3C1E
  ASSIGN3C1C:  preds = [COND3C1F]
    bool _t3C1A#1 = LT<real>(rpc3BB6,rpcEps3B9C);
    goto JOIN3C19
  JOIN3C19:  preds = [ASSIGN3C1C,ASSIGN3C1E]
    bool _t3C1B#1 = phi(_t3C1A,_t3C1D)
    bool _t3C20#1 = _t3C1B;
    goto JOIN3C15
  JOIN3C15:  preds = [ASSIGN3C22,ASSIGN3C24]
    bool _t3C21#1 = phi(_t3C20,_t3C23)
    bool _t3C26#1 = _t3C21;
    goto JOIN3C11
  JOIN3C11:  preds = [ASSIGN3C28,ASSIGN3C2A]
    bool _t3C27#1 = phi(_t3C26,_t3C29)
    if _t3C27 then goto ASSIGN3C2E else goto ASSIGN3C46
  ASSIGN3C2E:  preds = [COND3C5C]
    string _t3C2D#1 = "======= Stabilizing ";
    int _t3C2F#1 = NumStrands<active>;
    string _t3C31#1 = " (iter ";
    string _t3C33#1 = ")";
    string _t3C35#1 = "; COV(cl)=";
    string _t3C37#1 = " < ";
    string _t3C39#1 = "; max(mvmt)=";
    string _t3C3B#1 = " < ";
    string _t3C3D#1 = "; rpc=";
    string _t3C3F#1 = " < ";
    string _t3C41#1 = "\n";
    Print<[string,int,string,int,string,string,real,string,real,string,real,string,real,string,real,string,real,string]>(_t3C2D,_t3C2F,_t3C31,iter3B9A,_t3C33,_t3C35,covcl3BE7,_t3C37,geoEps3B9E,_t3C39,maxmvmt3BED,_t3C3B,mvmtEps3B9D,_t3C3D,rpc3BB6,_t3C3F,rpcEps3B9C,_t3C41);
    StabilizeAll;
    goto JOIN3C2C
  JOIN3C2C:  preds = [MASSIGN3C44,MASSIGN3C5B]
    int _t3C5D#1 = 1;
    int iter3C5F#1 = IAdd(iter3B9A,_t3C5D);
    globals.iter2222 = iter3C5F;
    int popLast3C62#1 = pop3BA6;
    globals.popLast2224 = popLast3C62;
    continue
  ASSIGN3C46:  preds = [COND3C5C]
    string _t3C45#1 = "======= Stabilizing ";
    int _t3C47#1 = NumStrands<active>;
    string _t3C49#1 = " (iter ";
    string _t3C4B#1 = ")";
    string _t3C4D#1 = "; COV(cl)=";
    string _t3C4F#1 = " > ";
    string _t3C51#1 = "; max(mvmt)=";
    string _t3C53#1 = " > ";
    string _t3C55#1 = "; rpc=";
    string _t3C57#1 = " > ";
    string _t3C59#1 = "\n";
    Print<[string,int,string,int,string,string,real,string,real,string,real,string,real,string,real,string,real,string]>(_t3C45,_t3C47,_t3C49,iter3B9A,_t3C4B,_t3C4D,covcl3BE7,_t3C4F,geoEps3B9E,_t3C51,maxmvmt3BED,_t3C53,mvmtEps3B9D,_t3C55,rpc3BB6,_t3C57,rpcEps3B9C,_t3C59);
    goto JOIN3C2C
  ASSIGN3C1E:  preds = [COND3C1F]
    bool _t3C1D#1 = false;
    goto JOIN3C19
  ASSIGN3C24:  preds = [COND3C25]
    bool _t3C23#1 = false;
    goto JOIN3C15
  ASSIGN3C2A:  preds = [COND3C2B]
    bool _t3C29#1 = false;
    goto JOIN3C11
  ASSIGN3BB0:  preds = [COND3BB1]
    int _t3BAF#1 = 0;
    goto JOIN3BAB
#### end program ####
##### high-ir: after value numbering ####
## properties
  GlobalInit StabilizeAll GlobalReduce StrandSets GlobalUpdate NewStrands StrandCommunication StrandsMayDie HasInputs HasGlobals ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
## globals
  input meshData21C9 (meshData) = <no-default>
  input 0space07C6_intermedateGlobal21CA (space) = <no-default>
  input 0data07C8_intermedateGlobal21CB (data) = <no-default>
  input fStrTh21CC (fStrTh) = <no-default>
  input fMaskTh21CD (fMaskTh) = <default>
  input fBias21CE (fBias) = <default>
  input tipd21CF (tipd) = <default>
  input mabd21D0 (mabd) = <default>
  input travMax21D1 (travMax) = <default>
  input nfsMax21D2 (nfsMax) = <default>
  input gdeTest21D3 (gdeTest) = <default>
  input gdeBack21D4 (gdeBack) = <default>
  input gdeOppor21D5 (gdeOppor) = <default>
  input fsEps21D6 (fsEps) = <no-default>
  input geoEps21D7 (geoEps) = <default>
  input mvmtEps21D8 (mvmtEps) = <default>
  input rpcEps21D9 (rpcEps) = <default>
  input pcmvEps21DA (pcmvEps) = <default>
  input isoval21DB (isoval) = <default>
  input verb21DC (verb) = <default>
  input sfs21DD (sfs) = <default>
  input hist21DE (hist) = <default>
  input pcp21DF (pcp) = <default>
  input ipos21E0 (ipos) = <no-default>
  input fDim21E1 (fDim) = <default>
  global int nnmin221D
  global int nnmax221E
  global real phiWellRad221F
  global real rad2220
  global real pchist2221
  varying global int iter2222
  varying global real rpc2223
  varying global int popLast2224
## functions
  function real mean2851 (point P284B#1) {
    ENTRY2850:  preds = []
      real _t284C#1 = P284B.hh;
      return _t284C
}
  function real max284A (point P2844#1) {
    ENTRY2849:  preds = []
      real _t2845#1 = P2844.mvmt;
      return _t2845
}
  function real mean2843 (point P2837#1, real meancl2838#1) {
    ENTRY2842:  preds = []
      real _t2839#1 = P2837.closest;
      real _t283B#1 = λ(T0[],T1[])<(T0) - (T1)> (_t2839,meancl2838);
      int _t283D#0 = 2;
      real _t283F#1 = λ(T0[])<(T0)^2> (_t283B);
      return _t283F
}
  function real mean2836 (point P2830#1) {
    ENTRY2835:  preds = []
      real _t2831#1 = P2830.closest;
      return _t2831
}
  function real mean282F (point P2822#1) {
    ENTRY282E:  preds = []
      bool _t2824#1 = P2822.found;
      if _t2824 then goto ASSIGN2829 else goto ASSIGN282B
    ASSIGN2829:  preds = [COND282C]
      real _t2827#1 = 0.1e1;
      goto JOIN2826
    JOIN2826:  preds = [ASSIGN2829,ASSIGN282B]
      real _t2828#1 = phi(_t2827,_t282A)
      return _t2828
    ASSIGN282B:  preds = [COND282C]
      real _t282A#1 = 0.e0;
      goto JOIN2826
}
  function bool all2821 (point P281B#1) {
    ENTRY2820:  preds = []
      bool _t281C#1 = P281B.found;
      return _t281C
}
  function int[2] nextCell42244 (int faceIdx2225#2, int cell2226#1, femData:Mesh mesh2227#1) {
    ENTRY2243:  preds = []
      int _t2228#3 = -1;
      bool _t222A#1 = EQ<int>(faceIdx2225,_t2228);
      if _t222A then goto ASSIGN3C6D else goto ASSIGN2235
    ASSIGN3C6D:  preds = [COND2241]
      int[2] _t2231#1 = <int[2]>{_t2228,_t2228};
      return _t2231
      goto JOIN222C
    JOIN222C:  preds = [*RETURN(_t2231)2233,*RETURN(_t223E)2240]
      unreachable
    ASSIGN2235:  preds = [COND2241]
      int _t2234#1 = 8;
      int _t2236#1 = IMul(cell2226,_t2234);
      int _t2238#1 = 2;
      int _t223A#1 = IMul(faceIdx2225,_t2238);
      int _t223C#1 = IAdd(_t2236,_t223A);
      int[2] _t223E#1 = ExtractFemItemN<[femData:Mesh,int],int[2],CellFaceCell(Mesh),0000,"",[],int>(mesh2227,_t223C);
      return _t223E
      goto JOIN222C
}
  function tensor[3] fStep2531 (tensor[3] s2245#3) {
    ENTRY2530:  preds = []
      real x2247#4 = TensorIndex<tensor[3],[0]>(s2245);
      real y2249#5 = TensorIndex<tensor[3],[1]>(s2245);
      real z224B#6 = TensorIndex<tensor[3],[2]>(s2245);
      real _t224D#6 = 0.2e1;
      real _t224F#1 = λ(T0[],T1[])<(T0 * T1)> (_t224D,x2247);
      int _t2251#2 = 2;
      real _t2253#8 = λ(T0[])<(T0)^2> (z224B);
      real _t2255#1 = λ(T0[],T1[])<(T0 * T1)> (_t224F,_t2253);
      real _t2259#2 = λ(T0[])<(T0)^2> (x2247);
      real _t225D#2 = λ(T0[])<(T0)^2> (y2249);
      real _t225F#1 = λ(T0[],T1[])<(T0 + T1)> (_t2259,_t225D);
      real _t2265#2 = λ(T0[],T1[])<(T0 + T1)> (_t225F,_t2253);
      real _t2267#7 = λ(T0[])<Cosine(T0)> (_t2265);
      real _t2269#1 = λ(T0[],T1[])<(T0 * T1)> (_t2255,_t2267);
      real _t226D#1 = λ(T0[],T1[])<(T0 * T1)> (_t224D,y2249);
      real _t2273#1 = λ(T0[],T1[])<(T0 * T1)> (_t226D,_t2253);
      real _t2287#1 = λ(T0[],T1[])<(T0 * T1)> (_t2273,_t2267);
      int _t228B#0 = 3;
      real _t228D#3 = λ(T0[])<(T0)^3> (z224B);
      real _t228F#1 = λ(T0[],T1[])<(T0 * T1)> (_t224D,_t228D);
      real _t22A3#1 = λ(T0[],T1[])<(T0 * T1)> (_t228F,_t2267);
      real _t22A7#1 = λ(T0[],T1[])<(T0 * T1)> (_t224D,z224B);
      real _t22B9#8 = λ(T0[])<Sine(T0)> (_t2265);
      real _t22BB#1 = λ(T0[],T1[])<(T0 * T1)> (_t22A7,_t22B9);
      real _t22BD#1 = λ(T0[],T1[])<(T0 + T1)> (_t22A3,_t22BB);
      tensor[3] g22BF#1 = <tensor[3]>[_t2269,_t2287,_t22BD];
      int _t22CA#1 = -4;
      real _t22CC#5 = IntToReal(_t22CA);
      real _t22D2#1 = λ(T0[],T1[])<(T0 * T1)> (_t22CC,_t2259);
      real _t22D8#1 = λ(T0[],T1[])<(T0 * T1)> (_t22D2,_t2253);
      real _t22EC#1 = λ(T0[],T1[])<(T0 * T1)> (_t22D8,_t22B9);
      real _t22F4#1 = λ(T0[],T1[])<(T0 * T1)> (_t224D,_t2253);
      real _t2308#2 = λ(T0[],T1[])<(T0 * T1)> (_t22F4,_t2267);
      real _t230A#1 = λ(T0[],T1[])<(T0 + T1)> (_t22EC,_t2308);
      real _t2310#2 = λ(T0[],T1[])<(T0 * T1)> (_t22CC,x2247);
      real _t2312#1 = λ(T0[],T1[])<(T0 * T1)> (_t2310,y2249);
      real _t2318#1 = λ(T0[],T1[])<(T0 * T1)> (_t2312,_t2253);
      real _t232C#2 = λ(T0[],T1[])<(T0 * T1)> (_t2318,_t22B9);
      real _t2338#1 = λ(T0[],T1[])<(T0 * T1)> (_t2310,_t228D);
      real _t234C#1 = λ(T0[],T1[])<(T0 * T1)> (_t2338,_t22B9);
      real _t234E#2 = 0.4e1;
      real _t2350#1 = λ(T0[],T1[])<(T0 * T1)> (_t234E,x2247);
      real _t2352#1 = λ(T0[],T1[])<(T0 * T1)> (_t2350,z224B);
      real _t2366#1 = λ(T0[],T1[])<(T0 * T1)> (_t2352,_t2267);
      real _t2368#2 = λ(T0[],T1[])<(T0 + T1)> (_t234C,_t2366);
      tensor[3] _t236A#1 = <tensor[3]>[_t230A,_t232C,_t2368];
      real _t2396#1 = λ(T0[],T1[])<(T0 * T1)> (_t22CC,_t225D);
      real _t239C#1 = λ(T0[],T1[])<(T0 * T1)> (_t2396,_t2253);
      real _t23B0#1 = λ(T0[],T1[])<(T0 * T1)> (_t239C,_t22B9);
      real _t23CE#1 = λ(T0[],T1[])<(T0 + T1)> (_t23B0,_t2308);
      real _t23D4#1 = λ(T0[],T1[])<(T0 * T1)> (_t22CC,y2249);
      real _t23DA#1 = λ(T0[],T1[])<(T0 * T1)> (_t23D4,_t228D);
      real _t23EE#1 = λ(T0[],T1[])<(T0 * T1)> (_t23DA,_t22B9);
      real _t23F2#1 = λ(T0[],T1[])<(T0 * T1)> (_t234E,y2249);
      real _t23F4#1 = λ(T0[],T1[])<(T0 * T1)> (_t23F2,z224B);
      real _t2408#1 = λ(T0[],T1[])<(T0 * T1)> (_t23F4,_t2267);
      real _t240A#2 = λ(T0[],T1[])<(T0 + T1)> (_t23EE,_t2408);
      tensor[3] _t240C#1 = <tensor[3]>[_t232C,_t23CE,_t240A];
      int _t248A#0 = 4;
      real _t248C#1 = λ(T0[])<(T0)^4> (z224B);
      real _t248E#1 = λ(T0[],T1[])<(T0 * T1)> (_t22CC,_t248C);
      real _t24A2#1 = λ(T0[],T1[])<(T0 * T1)> (_t248E,_t22B9);
      real _t24A4#1 = 0.1e2;
      real _t24AA#1 = λ(T0[],T1[])<(T0 * T1)> (_t24A4,_t2253);
      real _t24BE#1 = λ(T0[],T1[])<(T0 * T1)> (_t24AA,_t2267);
      real _t24C0#1 = λ(T0[],T1[])<(T0 + T1)> (_t24A2,_t24BE);
      real _t24D6#1 = λ(T0[],T1[])<(T0 * T1)> (_t224D,_t22B9);
      real _t24D8#1 = λ(T0[],T1[])<(T0 + T1)> (_t24C0,_t24D6);
      tensor[3] _t24DA#1 = <tensor[3]>[_t2368,_t240A,_t24D8];
      tensor[3,3] hess24DC#1 = <tensor[3,3]>[_t236A,_t240C,_t24DA];
      (real[3] evals24E1#1,tensor[3][3] E24E0#1) = Eigen3x3(hess24DC);
      real _t24E6#1 = 0.1e1;
      real _t24EA#1 = Subscript<real[3]>(evals24E1,_t2251);
      real _t24EC#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t24E6,_t24EA);
      real _t24EE#1 = λ(T0[])<Neg(T0)> (_t24EC);
      tensor[3] _t24F2#2 = Subscript<tensor[3][3]>(E24E0,_t2251);
      tensor[3] _t24F4#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (_t24EE,_t24F2);
      tensor[3,3] _t24FA#1 = λ(T0[3],T1[3])<(T0_{i0} * T1_{i1})>_{3 3} (_t24F4,_t24F2);
      tensor[3] up24FC#4 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (_t24FA,g22BF);
      real _t24FF#2 = TensorIndex<tensor[3],[0]>(up24FC);
      bool _t2503#1 = EQ<real>(_t24FF,_t24FF);
      bool _t2505#1 = BNot(_t2503);
      if _t2505 then goto ASSIGN250A else goto ASSIGN250D
    ASSIGN250A:  preds = [COND2523]
      bool _t2508#1 = true;
      goto JOIN2507
    JOIN2507:  preds = [ASSIGN250A,JOIN2514]
      bool _t2509#1 = phi(_t2508,_t2516)
      if _t2509 then goto ASSIGN2526 else goto JOIN2524
    ASSIGN2526:  preds = [COND252E]
      real _t2525#3 = +inf;
      tensor[3] _t252B#1 = <tensor[3]>[_t2525,_t2525,_t2525];
      return _t252B
      goto JOIN2524
    JOIN2524:  preds = [*RETURN(_t252B)252D,COND252E]
      return up24FC
    ASSIGN250D:  preds = [COND2523]
      real _t250C#2 = TensorIndex<tensor[3],[1]>(up24FC);
      bool _t2510#1 = EQ<real>(_t250C,_t250C);
      bool _t2512#1 = BNot(_t2510);
      if _t2512 then goto ASSIGN2517 else goto ASSIGN2519
    ASSIGN2517:  preds = [COND2520]
      bool _t2515#1 = true;
      goto JOIN2514
    JOIN2514:  preds = [ASSIGN2517,ASSIGN251F]
      bool _t2516#1 = phi(_t2515,_t251E)
      goto JOIN2507
    ASSIGN2519:  preds = [COND2520]
      real _t2518#2 = TensorIndex<tensor[3],[2]>(up24FC);
      bool _t251C#1 = EQ<real>(_t2518,_t2518);
      bool _t251E#1 = BNot(_t251C);
      goto JOIN2514
}
  function tensor[3,3] fPerp27E7 (tensor[3] s2532#3) {
    ENTRY27E6:  preds = []
      real x2534#4 = TensorIndex<tensor[3],[0]>(s2532);
      real y2536#5 = TensorIndex<tensor[3],[1]>(s2532);
      real z2538#6 = TensorIndex<tensor[3],[2]>(s2532);
      real _t253A#6 = 0.2e1;
      real _t253C#1 = λ(T0[],T1[])<(T0 * T1)> (_t253A,x2534);
      int _t253E#1 = 2;
      real _t2540#8 = λ(T0[])<(T0)^2> (z2538);
      real _t2542#1 = λ(T0[],T1[])<(T0 * T1)> (_t253C,_t2540);
      real _t2546#2 = λ(T0[])<(T0)^2> (x2534);
      real _t254A#2 = λ(T0[])<(T0)^2> (y2536);
      real _t254C#1 = λ(T0[],T1[])<(T0 + T1)> (_t2546,_t254A);
      real _t2552#2 = λ(T0[],T1[])<(T0 + T1)> (_t254C,_t2540);
      real _t2554#7 = λ(T0[])<Cosine(T0)> (_t2552);
      real _t2556#1 = λ(T0[],T1[])<(T0 * T1)> (_t2542,_t2554);
      real _t255A#1 = λ(T0[],T1[])<(T0 * T1)> (_t253A,y2536);
      real _t2560#1 = λ(T0[],T1[])<(T0 * T1)> (_t255A,_t2540);
      real _t2574#1 = λ(T0[],T1[])<(T0 * T1)> (_t2560,_t2554);
      int _t2578#0 = 3;
      real _t257A#3 = λ(T0[])<(T0)^3> (z2538);
      real _t257C#1 = λ(T0[],T1[])<(T0 * T1)> (_t253A,_t257A);
      real _t2590#1 = λ(T0[],T1[])<(T0 * T1)> (_t257C,_t2554);
      real _t2594#1 = λ(T0[],T1[])<(T0 * T1)> (_t253A,z2538);
      real _t25A6#8 = λ(T0[])<Sine(T0)> (_t2552);
      real _t25A8#1 = λ(T0[],T1[])<(T0 * T1)> (_t2594,_t25A6);
      real _t25AA#1 = λ(T0[],T1[])<(T0 + T1)> (_t2590,_t25A8);
      tensor[3] g25AC#0 = <tensor[3]>[_t2556,_t2574,_t25AA];
      int _t25B7#1 = -4;
      real _t25B9#5 = IntToReal(_t25B7);
      real _t25BF#1 = λ(T0[],T1[])<(T0 * T1)> (_t25B9,_t2546);
      real _t25C5#1 = λ(T0[],T1[])<(T0 * T1)> (_t25BF,_t2540);
      real _t25D9#1 = λ(T0[],T1[])<(T0 * T1)> (_t25C5,_t25A6);
      real _t25E1#1 = λ(T0[],T1[])<(T0 * T1)> (_t253A,_t2540);
      real _t25F5#2 = λ(T0[],T1[])<(T0 * T1)> (_t25E1,_t2554);
      real _t25F7#1 = λ(T0[],T1[])<(T0 + T1)> (_t25D9,_t25F5);
      real _t25FD#2 = λ(T0[],T1[])<(T0 * T1)> (_t25B9,x2534);
      real _t25FF#1 = λ(T0[],T1[])<(T0 * T1)> (_t25FD,y2536);
      real _t2605#1 = λ(T0[],T1[])<(T0 * T1)> (_t25FF,_t2540);
      real _t2619#2 = λ(T0[],T1[])<(T0 * T1)> (_t2605,_t25A6);
      real _t2625#1 = λ(T0[],T1[])<(T0 * T1)> (_t25FD,_t257A);
      real _t2639#1 = λ(T0[],T1[])<(T0 * T1)> (_t2625,_t25A6);
      real _t263B#2 = 0.4e1;
      real _t263D#1 = λ(T0[],T1[])<(T0 * T1)> (_t263B,x2534);
      real _t263F#1 = λ(T0[],T1[])<(T0 * T1)> (_t263D,z2538);
      real _t2653#1 = λ(T0[],T1[])<(T0 * T1)> (_t263F,_t2554);
      real _t2655#2 = λ(T0[],T1[])<(T0 + T1)> (_t2639,_t2653);
      tensor[3] _t2657#1 = <tensor[3]>[_t25F7,_t2619,_t2655];
      real _t2683#1 = λ(T0[],T1[])<(T0 * T1)> (_t25B9,_t254A);
      real _t2689#1 = λ(T0[],T1[])<(T0 * T1)> (_t2683,_t2540);
      real _t269D#1 = λ(T0[],T1[])<(T0 * T1)> (_t2689,_t25A6);
      real _t26BB#1 = λ(T0[],T1[])<(T0 + T1)> (_t269D,_t25F5);
      real _t26C1#1 = λ(T0[],T1[])<(T0 * T1)> (_t25B9,y2536);
      real _t26C7#1 = λ(T0[],T1[])<(T0 * T1)> (_t26C1,_t257A);
      real _t26DB#1 = λ(T0[],T1[])<(T0 * T1)> (_t26C7,_t25A6);
      real _t26DF#1 = λ(T0[],T1[])<(T0 * T1)> (_t263B,y2536);
      real _t26E1#1 = λ(T0[],T1[])<(T0 * T1)> (_t26DF,z2538);
      real _t26F5#1 = λ(T0[],T1[])<(T0 * T1)> (_t26E1,_t2554);
      real _t26F7#2 = λ(T0[],T1[])<(T0 + T1)> (_t26DB,_t26F5);
      tensor[3] _t26F9#1 = <tensor[3]>[_t2619,_t26BB,_t26F7];
      int _t2777#0 = 4;
      real _t2779#1 = λ(T0[])<(T0)^4> (z2538);
      real _t277B#1 = λ(T0[],T1[])<(T0 * T1)> (_t25B9,_t2779);
      real _t278F#1 = λ(T0[],T1[])<(T0 * T1)> (_t277B,_t25A6);
      real _t2791#1 = 0.1e2;
      real _t2797#1 = λ(T0[],T1[])<(T0 * T1)> (_t2791,_t2540);
      real _t27AB#1 = λ(T0[],T1[])<(T0 * T1)> (_t2797,_t2554);
      real _t27AD#1 = λ(T0[],T1[])<(T0 + T1)> (_t278F,_t27AB);
      real _t27C3#1 = λ(T0[],T1[])<(T0 * T1)> (_t253A,_t25A6);
      real _t27C5#1 = λ(T0[],T1[])<(T0 + T1)> (_t27AD,_t27C3);
      tensor[3] _t27C7#1 = <tensor[3]>[_t2655,_t26F7,_t27C5];
      tensor[3,3] hess27C9#1 = <tensor[3,3]>[_t2657,_t26F9,_t27C7];
      (real[3] evals27CE#0,tensor[3][3] _t27CD#1) = Eigen3x3(hess27C9);
      tensor[3] E227D2#2 = Subscript<tensor[3][3]>(_t27CD,_t253E);
      tensor[3,3] _t27D4#1 = λ()<δ_{i0,i1}>_{3 3} ();
      tensor[3,3] _t27D6#1 = λ(T0[3],T1[3])<(T0_{i0} * T1_{i1})>_{3 3} (E227D2,E227D2);
      tensor[3,3] m27D8#3 = λ(T0[3 3],T1[3 3])<(T0_{i0,i1}) - (T1_{i0,i1})>_{3 3} (_t27D4,_t27D6);
      real t27DA#2 = λ(T0[3 3],T1[3 3])<Σ(i0=0..2)(i1=0..2)<((T0_{i0,i1} * T1_{i0,i1}))>(i0=0..2)(i1=0..2)> (m27D8,m27D8);
      bool _t27DC#1 = EQ<real>(t27DA,t27DA);
      bool _t27DE#1 = BNot(_t27DC);
      if _t27DE then goto ASSIGN27E2 else goto JOIN27E0
    ASSIGN27E2:  preds = [COND27E4]
      tensor[3,3] _t27E1#1 = λ()<Z_{i0,i1}>_{3 3} ();
      return _t27E1
      goto JOIN27E0
    JOIN27E0:  preds = [*RETURN(_t27E1)27E3,COND27E4]
      return m27D8
}
  function real urnd281A (real x27E8#2) {
    ENTRY2819:  preds = []
      int iter27E9#1 = globals.iter2222;
      real _t27EB#2 = 0.e0;
      bool _t27ED#1 = EQ<real>(x27E8,_t27EB);
      if _t27ED then goto RETURN(_t27EB)3CC9 else goto JOIN27EF
    RETURN(_t27EB)3CC9:  preds = [COND27F3]
      return _t27EB
      goto JOIN27EF
    JOIN27EF:  preds = [*RETURN(_t27EB)3CC9,COND27F3]
      real _t27F4#1 = λ(T0[])<Abs(T0)> (x27E8);
      real l227F6#2 = MathFn<log2>(_t27F4);
      real _t27F8#2 = 0.2e1;
      real _t27FA#1 = MathFn<floor>(l227F6);
      real _t27FC#1 = λ(T0[],T1[])<(T0) - (T1)> (l227F6,_t27FA);
      real _t27FE#2 = 0.1e1;
      real _t2800#1 = λ(T0[],T1[])<(T0) - (T1)> (_t27FC,_t27FE);
      real frxp2802#1 = MathFn<pow>(_t27F8,_t2800);
      int _t2806#0 = 20;
      real _t2808#1 = λ(T0[])<(T0)^20> (_t27F8);
      int _t280A#1 = 2;
      int _t280C#1 = IMul(_t280A,iter27E9);
      real _t280E#1 = IntToReal(_t280C);
      real _t2810#1 = λ(T0[],T1[])<(T0 + T1)> (_t2808,_t280E);
      real _t2812#1 = λ(T0[],T1[])<(T0 * T1)> (_t2810,frxp2802);
      real _t2816#1 = MathFn<fmod>(_t2812,_t27FE);
      return _t2816
}
## input initialization
  ENTRY221B:  preds = []
    real fMaskTh21E2#3 = 0.e0;
    globals.fMaskTh21CD = fMaskTh21E2;
    globals.fBias21CE = fMaskTh21E2;
    real tipd21E8#1 = 0.1e1;
    globals.tipd21CF = tipd21E8;
    real mabd21EB#1 = 0.75e0;
    globals.mabd21D0 = mabd21EB;
    real travMax21EE#1 = 0.1e2;
    globals.travMax21D1 = travMax21EE;
    int nfsMax21F1#1 = 20;
    globals.nfsMax21D2 = nfsMax21F1;
    real gdeTest21F4#4 = 0.5e0;
    globals.gdeTest21D3 = gdeTest21F4;
    globals.gdeBack21D4 = gdeTest21F4;
    real gdeOppor21FA#1 = 0.12e1;
    globals.gdeOppor21D5 = gdeOppor21FA;
    real geoEps21FD#1 = 0.1e0;
    globals.geoEps21D7 = geoEps21FD;
    real mvmtEps2200#2 = 0.1e-1;
    globals.mvmtEps21D8 = mvmtEps2200;
    globals.rpcEps21D9 = mvmtEps2200;
    real pcmvEps2206#1 = 0.3e0;
    globals.pcmvEps21DA = pcmvEps2206;
    globals.isoval21DB = fMaskTh21E2;
    int verb220C#1 = 0;
    globals.verb21DC = verb220C;
    globals.sfs21DD = gdeTest21F4;
    globals.hist21DE = gdeTest21F4;
    int pcp2215#1 = 5;
    globals.pcp21DF = pcp2215;
    int fDim2218#1 = 2;
    globals.fDim21E1 = fDim2218;
    return
## global-variable initialization
  ENTRY28C6:  preds = []
    femData:Mesh meshData2856#2 = globals.meshData21C9;
    real tipd2855#1 = globals.tipd21CF;
    real hist2854#1 = globals.hist21DE;
    int pcp2853#1 = globals.pcp21DF;
    int fDim2852#3 = globals.fDim21E1;
    int _t285C#4 = 0;
    int _t285E#3 = 1;
    int _t2860#1 = ExtractFemItem<int,NumCell(Mesh)>(meshData2856);
    int _t2862#1 = ISub(_t2860,_t285E);
    int[] _t2864#1 = Range(_t285C,_t2862);
    femData:MeshCell[] _t2866#1 = <femData:MeshCell[]>{};
  FOREACH286A:  preds = [ASSIGN2867,NEXT286F]
    foreach (_t2868 in _t2864) on exit goto ASSIGN2872
      femData:MeshCell[] _t2869#1 = phi(_t2866,_t286D)
    femData:MeshCell _t286B#1 = LoadFem<femData:MeshCell>(meshData2856,_t2868);
    femData:MeshCell[] _t286D#1 = Append<femData:MeshCell>(_t2869,_t286B);
    goto FOREACH286A
  ASSIGN2872:  preds = [FOREACH286A]
    int _t2871#3 = 2;
    bool _t2873#2 = EQ<int>(_t2871,fDim2852);
    if _t2873 then goto ASSIGN2878 else goto ASSIGN3CCC
  ASSIGN2878:  preds = [COND2887]
    int _t2876#1 = 6;
    goto JOIN2875
  JOIN2875:  preds = [ASSIGN2878,JOIN287E]
    int _t2877#1 = phi(_t2876,_t2880)
    globals.nnmin221D = _t2877;
    if _t2873 then goto ASSIGN2893 else goto ASSIGN3CCE
  ASSIGN2893:  preds = [COND28A2]
    int _t2891#1 = 8;
    goto JOIN2890
  JOIN2890:  preds = [ASSIGN2893,JOIN2899]
    int _t2892#1 = phi(_t2891,_t289B)
    globals.nnmax221E = _t2892;
    real _t28A6#1 = 0.2e1;
    real _t28A8#1 = 0.3e1;
    real phiWellRad28AA#2 = λ(T0[],T1[])<(T0) / ( T1)> (_t28A6,_t28A8);
    globals.phiWellRad221F = phiWellRad28AA;
    real rad28AD#1 = λ(T0[],T1[])<(T0) / ( T1)> (tipd2855,phiWellRad28AA);
    globals.rad2220 = rad28AD;
    real _t28B0#2 = 0.1e1;
    int _t28B4#1 = IMul(_t2871,pcp2853);
    real _t28B6#1 = IntToReal(_t28B4);
    real _t28B8#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t28B0,_t28B6);
    real pchist28BA#1 = MathFn<pow>(hist2854,_t28B8);
    globals.pchist2221 = pchist28BA;
    globals.iter2222 = _t285C;
    globals.rpc2223 = _t28B0;
    int popLast28C3#1 = -1;
    globals.popLast2224 = popLast28C3;
    return
  ASSIGN3CCE:  preds = [COND28A2]
    bool _t2897#1 = EQ<int>(_t285E,fDim2852);
    if _t2897 then goto ASSIGN289C else goto JOIN2899
  ASSIGN289C:  preds = [COND289F]
    int _t289A#1 = 3;
    goto JOIN2899
  JOIN2899:  preds = [ASSIGN289C,COND289F]
    int _t289B#1 = phi(_t289A,_t285C)
    goto JOIN2890
  ASSIGN3CCC:  preds = [COND2887]
    bool _t287C#1 = EQ<int>(_t285E,fDim2852);
    if _t287C then goto JOIN287E else goto JOIN287E
  JOIN287E:  preds = [COND2884,COND2884]
    int _t2880#1 = phi(_t2871,_t285C)
    goto JOIN2875
## strand
  strand point (tensor[3] p028DE#5, real hh028DF#1) in 3D
    state:
      output tensor[3] pos;
      output tensor[3] _pos;
      real ID;
      real hh;
      tensor[3] step;
      bool found;
      int nfs;
      real trav;
      real mvmt;
      real closest;
      int born;
      bool first;
    state init
      ENTRY2934:  preds = []
        real rad28E8#1 = globals.rad2220;
        real _t28FB#1 = 0.1e7;
        real _t28FE#1 = TensorIndex<tensor[3],[0]>(p028DE);
        real _t2900#1 = urnd281A (_t28FE);
        real _t2902#1 = TensorIndex<tensor[3],[1]>(p028DE);
        real _t2904#1 = urnd281A (_t2902);
        real _t2906#1 = λ(T0[],T1[])<(T0 + T1)> (_t2900,_t2904);
        real _t2908#1 = TensorIndex<tensor[3],[2]>(p028DE);
        real _t290A#1 = urnd281A (_t2908);
        real _t290C#1 = λ(T0[],T1[])<(T0 + T1)> (_t2906,_t290A);
        real _t290E#2 = 0.1e1;
        real _t2910#1 = MathFn<fmod>(_t290C,_t290E);
        real _t2914#1 = λ(T0[],T1[])<(T0 * T1)> (_t28FB,_t2910);
        real _t2916#1 = MathFn<floor>(_t2914);
        real _t291E#4 = 0.e0;
        tensor[3] step2924#1 = <tensor[3]>[_t291E,_t291E,_t291E];
        bool found2926#1 = false;
        int nfs2928#2 = 0;
        bool first2932#1 = true;
        self.pos = p028DE;
        self._pos = p028DE;
        self.ID = _t2916;
        self.hh = hh028DF;
        self.step = step2924;
        self.found = found2926;
        self.nfs = nfs2928;
        self.trav = _t291E;
        self.mvmt = _t290E;
        self.closest = rad28E8;
        self.born = nfs2928;
        self.first = first2932;
        return
    end state init
    method update
        ENTRY3B8B:  preds = []
          real fStrTh2956#4 = globals.fStrTh21CC;
          real fMaskTh2955#4 = globals.fMaskTh21CD;
          real fBias2954#4 = globals.fBias21CE;
          real tipd2953#13 = globals.tipd21CF;
          real mabd2952#1 = globals.mabd21D0;
          real travMax2951#3 = globals.travMax21D1;
          int nfsMax2950#3 = globals.nfsMax21D2;
          real gdeTest294F#1 = globals.gdeTest21D3;
          real gdeBack294E#1 = globals.gdeBack21D4;
          real gdeOppor294D#1 = globals.gdeOppor21D5;
          real fsEps294C#3 = globals.fsEps21D6;
          real pcmvEps294B#1 = globals.pcmvEps21DA;
          int verb294A#16 = globals.verb21DC;
          real sfs2949#6 = globals.sfs21DD;
          real hist2948#2 = globals.hist21DE;
          int pcp2947#10 = globals.pcp21DF;
          int fDim2946#2 = globals.fDim21E1;
          int nnmin2945#3 = globals.nnmin221D;
          int nnmax2944#4 = globals.nnmax221E;
          real rad2943#6 = globals.rad2220;
          int iter2942#22 = globals.iter2222;
          tensor[3] pos296C#15 = self.pos;
          tensor[3] _pos296D#0 = self._pos;
          real ID296E#11 = self.ID;
          real hh296F#5 = self.hh;
          tensor[3] step2970#0 = self.step;
          bool found2971#3 = self.found;
          int nfs2972#5 = self.nfs;
          real trav2973#4 = self.trav;
          real mvmt2974#5 = self.mvmt;
          real closest2975#1 = self.closest;
          int born2976#5 = self.born;
          bool first2977#1 = self.first;
          bool vv2984#45 = false;
          if first2977 then goto ASSIGN298A else goto JOIN2986
        ASSIGN298A:  preds = [COND29A9]
          int _t2989#1 = 0;
          bool _t298B#1 = GT<int>(verb294A,_t2989);
          if _t298B then goto JOIN298D else goto JOIN298D
        JOIN298D:  preds = [COND2993,COND2993]
          bool _t298F#1 = phi(vv2984,vv2984)
          if _t298F then goto ASSIGN2997 else goto ASSIGN2999
        ASSIGN2997:  preds = [COND299C]
          bool _t2995#1 = true;
          goto JOIN2994
        JOIN2994:  preds = [ASSIGN2997,ASSIGN299B]
          bool _t2996#1 = phi(_t2995,_t299A)
          if _t2996 then goto ASSIGN299F else goto JOIN299D
        ASSIGN299F:  preds = [COND29A8]
          string _t299E#1 = "(i#";
          string _t29A0#1 = " @ ";
          string _t29A2#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID296E,_t299E,iter2942,_t29A0,pos296C,_t29A2);
          string _t29A5#1 = " HELLO!\n";
          Print<[string]>(_t29A5);
          goto JOIN299D
        JOIN299D:  preds = [MASSIGN29A7,COND29A8]
          goto JOIN2986
        JOIN2986:  preds = [JOIN299D,COND29A9]
          real _t29AD#23 = 0.e0;
          tensor[3] _t29B3#5 = <tensor[3]>[_t29AD,_t29AD,_t29AD];
          tensor[3] mid29B5#1 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (pos296C,_t29B3);
          real _t29B8#3 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (mid29B5);
          real _t29BA#11 = 0.4e1;
          bool _t29BC#2 = LT<real>(_t29B8,_t29BA);
          if _t29BC then goto ASSIGN29C2 else goto JOIN29BE
        ASSIGN29C2:  preds = [COND29C8]
          real _t29C1#1 = 0.3e1;
          bool _t29C3#1 = GT<real>(_t29B8,_t29C1);
          goto JOIN29BE
        JOIN29BE:  preds = [ASSIGN3CDE,COND29C8]
          bool _t29C4#1 = phi(_t29C3,vv2984)
          if _t29C4 then goto ASSIGN29D0 else goto JOIN29CB
        ASSIGN29D0:  preds = [COND2C98]
          real x29CF#4 = TensorIndex<tensor[3],[0]>(pos296C);
          real y29D1#5 = TensorIndex<tensor[3],[1]>(pos296C);
          real z29D3#6 = TensorIndex<tensor[3],[2]>(pos296C);
          real _t29D5#6 = 0.2e1;
          real _t29D7#1 = λ(T0[],T1[])<(T0 * T1)> (_t29D5,x29CF);
          int _t29D9#1 = 2;
          real _t29DB#8 = λ(T0[])<(T0)^2> (z29D3);
          real _t29DD#1 = λ(T0[],T1[])<(T0 * T1)> (_t29D7,_t29DB);
          real _t29E1#2 = λ(T0[])<(T0)^2> (x29CF);
          real _t29E5#2 = λ(T0[])<(T0)^2> (y29D1);
          real _t29E7#1 = λ(T0[],T1[])<(T0 + T1)> (_t29E1,_t29E5);
          real _t29ED#2 = λ(T0[],T1[])<(T0 + T1)> (_t29E7,_t29DB);
          real _t29EF#7 = λ(T0[])<Cosine(T0)> (_t29ED);
          real _t29F1#1 = λ(T0[],T1[])<(T0 * T1)> (_t29DD,_t29EF);
          real _t29F5#1 = λ(T0[],T1[])<(T0 * T1)> (_t29D5,y29D1);
          real _t29FB#1 = λ(T0[],T1[])<(T0 * T1)> (_t29F5,_t29DB);
          real _t2A0F#1 = λ(T0[],T1[])<(T0 * T1)> (_t29FB,_t29EF);
          int _t2A13#0 = 3;
          real _t2A15#3 = λ(T0[])<(T0)^3> (z29D3);
          real _t2A17#1 = λ(T0[],T1[])<(T0 * T1)> (_t29D5,_t2A15);
          real _t2A2B#1 = λ(T0[],T1[])<(T0 * T1)> (_t2A17,_t29EF);
          real _t2A2F#1 = λ(T0[],T1[])<(T0 * T1)> (_t29D5,z29D3);
          real _t2A41#8 = λ(T0[])<Sine(T0)> (_t29ED);
          real _t2A43#1 = λ(T0[],T1[])<(T0 * T1)> (_t2A2F,_t2A41);
          real _t2A45#1 = λ(T0[],T1[])<(T0 + T1)> (_t2A2B,_t2A43);
          tensor[3] g2A47#1 = <tensor[3]>[_t29F1,_t2A0F,_t2A45];
          int _t2A52#1 = -4;
          real _t2A54#5 = IntToReal(_t2A52);
          real _t2A5A#1 = λ(T0[],T1[])<(T0 * T1)> (_t2A54,_t29E1);
          real _t2A60#1 = λ(T0[],T1[])<(T0 * T1)> (_t2A5A,_t29DB);
          real _t2A74#1 = λ(T0[],T1[])<(T0 * T1)> (_t2A60,_t2A41);
          real _t2A7C#1 = λ(T0[],T1[])<(T0 * T1)> (_t29D5,_t29DB);
          real _t2A90#2 = λ(T0[],T1[])<(T0 * T1)> (_t2A7C,_t29EF);
          real _t2A92#1 = λ(T0[],T1[])<(T0 + T1)> (_t2A74,_t2A90);
          real _t2A98#2 = λ(T0[],T1[])<(T0 * T1)> (_t2A54,x29CF);
          real _t2A9A#1 = λ(T0[],T1[])<(T0 * T1)> (_t2A98,y29D1);
          real _t2AA0#1 = λ(T0[],T1[])<(T0 * T1)> (_t2A9A,_t29DB);
          real _t2AB4#2 = λ(T0[],T1[])<(T0 * T1)> (_t2AA0,_t2A41);
          real _t2AC0#1 = λ(T0[],T1[])<(T0 * T1)> (_t2A98,_t2A15);
          real _t2AD4#1 = λ(T0[],T1[])<(T0 * T1)> (_t2AC0,_t2A41);
          real _t2AD8#1 = λ(T0[],T1[])<(T0 * T1)> (_t29BA,x29CF);
          real _t2ADA#1 = λ(T0[],T1[])<(T0 * T1)> (_t2AD8,z29D3);
          real _t2AEE#1 = λ(T0[],T1[])<(T0 * T1)> (_t2ADA,_t29EF);
          real _t2AF0#2 = λ(T0[],T1[])<(T0 + T1)> (_t2AD4,_t2AEE);
          tensor[3] _t2AF2#1 = <tensor[3]>[_t2A92,_t2AB4,_t2AF0];
          real _t2B1E#1 = λ(T0[],T1[])<(T0 * T1)> (_t2A54,_t29E5);
          real _t2B24#1 = λ(T0[],T1[])<(T0 * T1)> (_t2B1E,_t29DB);
          real _t2B38#1 = λ(T0[],T1[])<(T0 * T1)> (_t2B24,_t2A41);
          real _t2B56#1 = λ(T0[],T1[])<(T0 + T1)> (_t2B38,_t2A90);
          real _t2B5C#1 = λ(T0[],T1[])<(T0 * T1)> (_t2A54,y29D1);
          real _t2B62#1 = λ(T0[],T1[])<(T0 * T1)> (_t2B5C,_t2A15);
          real _t2B76#1 = λ(T0[],T1[])<(T0 * T1)> (_t2B62,_t2A41);
          real _t2B7A#1 = λ(T0[],T1[])<(T0 * T1)> (_t29BA,y29D1);
          real _t2B7C#1 = λ(T0[],T1[])<(T0 * T1)> (_t2B7A,z29D3);
          real _t2B90#1 = λ(T0[],T1[])<(T0 * T1)> (_t2B7C,_t29EF);
          real _t2B92#2 = λ(T0[],T1[])<(T0 + T1)> (_t2B76,_t2B90);
          tensor[3] _t2B94#1 = <tensor[3]>[_t2AB4,_t2B56,_t2B92];
          int _t2C12#0 = 4;
          real _t2C14#1 = λ(T0[])<(T0)^4> (z29D3);
          real _t2C16#1 = λ(T0[],T1[])<(T0 * T1)> (_t2A54,_t2C14);
          real _t2C2A#1 = λ(T0[],T1[])<(T0 * T1)> (_t2C16,_t2A41);
          real _t2C2C#1 = 0.1e2;
          real _t2C32#1 = λ(T0[],T1[])<(T0 * T1)> (_t2C2C,_t29DB);
          real _t2C46#1 = λ(T0[],T1[])<(T0 * T1)> (_t2C32,_t29EF);
          real _t2C48#1 = λ(T0[],T1[])<(T0 + T1)> (_t2C2A,_t2C46);
          real _t2C5E#1 = λ(T0[],T1[])<(T0 * T1)> (_t29D5,_t2A41);
          real _t2C60#1 = λ(T0[],T1[])<(T0 + T1)> (_t2C48,_t2C5E);
          tensor[3] _t2C62#1 = <tensor[3]>[_t2AF0,_t2B92,_t2C60];
          tensor[3,3] hess2C64#1 = <tensor[3,3]>[_t2AF2,_t2B94,_t2C62];
          (real[3] _t2C68#1,tensor[3][3] evecs2C69#0) = Eigen3x3(hess2C64);
          real _t2C6D#1 = Subscript<real[3]>(_t2C68,_t29D9);
          real _t2C6F#1 = λ(T0[])<Neg(T0)> (_t2C6D);
          real _t2C71#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (g2A47);
          real _t2C73#1 = λ(T0[],T1[])<(T0 + T1)> (fBias2954,_t2C71);
          real str2C75#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t2C6F,_t2C73);
          bool _t2C79#1 = GT<real>(str2C75,fStrTh2956);
          if _t2C79 then goto ASSIGN3D0B else goto JOIN2C7B
        ASSIGN3D0B:  preds = [COND2C92]
          bool _t2C82#1 = GTE<real>(_t29AD,fMaskTh2955);
          if _t2C82 then goto ASSIGN2C86 else goto JOIN2C84
        ASSIGN2C86:  preds = [COND2C8C]
          bool _t2C85#1 = true;
          goto JOIN2C84
        JOIN2C84:  preds = [ASSIGN2C86,COND2C8C]
          bool _t2C88#1 = phi(_t2C85,vv2984)
          goto JOIN2C7B
        JOIN2C7B:  preds = [JOIN2C84,COND2C92]
          bool _t2C8E#1 = phi(_t2C88,vv2984)
          goto JOIN29CB
        JOIN29CB:  preds = [JOIN2C7B,COND2C98]
          bool _t2C94#1 = phi(_t2C8E,vv2984)
          bool _t2C9B#1 = BNot(_t2C94);
          if _t2C9B then goto ASSIGN2CA1 else goto JOIN2C9D
        ASSIGN2CA1:  preds = [COND2FA2]
          int _t2CA0#1 = 0;
          bool _t2CA2#1 = GT<int>(verb294A,_t2CA0);
          if _t2CA2 then goto JOIN2CA4 else goto JOIN2CA4
        JOIN2CA4:  preds = [COND2CAA,COND2CAA]
          bool _t2CA6#1 = phi(vv2984,vv2984)
          if _t2CA6 then goto ASSIGN2CAE else goto ASSIGN2CB0
        ASSIGN2CAE:  preds = [COND2CB3]
          bool _t2CAC#1 = true;
          goto JOIN2CAB
        JOIN2CAB:  preds = [ASSIGN2CAE,ASSIGN2CB2]
          bool _t2CAD#1 = phi(_t2CAC,_t2CB1)
          if _t2CAD then goto ASSIGN2CB6 else goto JOIN2CB4
        ASSIGN2CB6:  preds = [COND2FA0]
          string _t2CB5#1 = "(i#";
          string _t2CB7#1 = " @ ";
          string _t2CB9#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID296E,_t2CB5,iter2942,_t2CB7,pos296C,_t2CB9);
          string _t2CBC#1 = "!inside=";
          if _t29BC then goto ASSIGN2CD4 else goto JOIN2CD0
        ASSIGN2CD4:  preds = [COND2CDA]
          real _t2CD3#1 = 0.3e1;
          bool _t2CD5#1 = GT<real>(_t29B8,_t2CD3);
          goto JOIN2CD0
        JOIN2CD0:  preds = [ASSIGN3D0D,COND2CDA]
          bool _t2CD6#1 = phi(_t2CD5,vv2984)
          string _t2CDD#1 = " || fStrength=";
          real x2CE1#4 = TensorIndex<tensor[3],[0]>(pos296C);
          real y2CE3#5 = TensorIndex<tensor[3],[1]>(pos296C);
          real z2CE5#6 = TensorIndex<tensor[3],[2]>(pos296C);
          real _t2CE7#6 = 0.2e1;
          real _t2CE9#1 = λ(T0[],T1[])<(T0 * T1)> (_t2CE7,x2CE1);
          int _t2CEB#1 = 2;
          real _t2CED#8 = λ(T0[])<(T0)^2> (z2CE5);
          real _t2CEF#1 = λ(T0[],T1[])<(T0 * T1)> (_t2CE9,_t2CED);
          real _t2CF3#2 = λ(T0[])<(T0)^2> (x2CE1);
          real _t2CF7#2 = λ(T0[])<(T0)^2> (y2CE3);
          real _t2CF9#1 = λ(T0[],T1[])<(T0 + T1)> (_t2CF3,_t2CF7);
          real _t2CFF#2 = λ(T0[],T1[])<(T0 + T1)> (_t2CF9,_t2CED);
          real _t2D01#7 = λ(T0[])<Cosine(T0)> (_t2CFF);
          real _t2D03#1 = λ(T0[],T1[])<(T0 * T1)> (_t2CEF,_t2D01);
          real _t2D07#1 = λ(T0[],T1[])<(T0 * T1)> (_t2CE7,y2CE3);
          real _t2D0D#1 = λ(T0[],T1[])<(T0 * T1)> (_t2D07,_t2CED);
          real _t2D21#1 = λ(T0[],T1[])<(T0 * T1)> (_t2D0D,_t2D01);
          int _t2D25#0 = 3;
          real _t2D27#3 = λ(T0[])<(T0)^3> (z2CE5);
          real _t2D29#1 = λ(T0[],T1[])<(T0 * T1)> (_t2CE7,_t2D27);
          real _t2D3D#1 = λ(T0[],T1[])<(T0 * T1)> (_t2D29,_t2D01);
          real _t2D41#1 = λ(T0[],T1[])<(T0 * T1)> (_t2CE7,z2CE5);
          real _t2D53#8 = λ(T0[])<Sine(T0)> (_t2CFF);
          real _t2D55#1 = λ(T0[],T1[])<(T0 * T1)> (_t2D41,_t2D53);
          real _t2D57#1 = λ(T0[],T1[])<(T0 + T1)> (_t2D3D,_t2D55);
          tensor[3] g2D59#1 = <tensor[3]>[_t2D03,_t2D21,_t2D57];
          int _t2D64#1 = -4;
          real _t2D66#5 = IntToReal(_t2D64);
          real _t2D6C#1 = λ(T0[],T1[])<(T0 * T1)> (_t2D66,_t2CF3);
          real _t2D72#1 = λ(T0[],T1[])<(T0 * T1)> (_t2D6C,_t2CED);
          real _t2D86#1 = λ(T0[],T1[])<(T0 * T1)> (_t2D72,_t2D53);
          real _t2D8E#1 = λ(T0[],T1[])<(T0 * T1)> (_t2CE7,_t2CED);
          real _t2DA2#2 = λ(T0[],T1[])<(T0 * T1)> (_t2D8E,_t2D01);
          real _t2DA4#1 = λ(T0[],T1[])<(T0 + T1)> (_t2D86,_t2DA2);
          real _t2DAA#2 = λ(T0[],T1[])<(T0 * T1)> (_t2D66,x2CE1);
          real _t2DAC#1 = λ(T0[],T1[])<(T0 * T1)> (_t2DAA,y2CE3);
          real _t2DB2#1 = λ(T0[],T1[])<(T0 * T1)> (_t2DAC,_t2CED);
          real _t2DC6#2 = λ(T0[],T1[])<(T0 * T1)> (_t2DB2,_t2D53);
          real _t2DD2#1 = λ(T0[],T1[])<(T0 * T1)> (_t2DAA,_t2D27);
          real _t2DE6#1 = λ(T0[],T1[])<(T0 * T1)> (_t2DD2,_t2D53);
          real _t2DEA#1 = λ(T0[],T1[])<(T0 * T1)> (_t29BA,x2CE1);
          real _t2DEC#1 = λ(T0[],T1[])<(T0 * T1)> (_t2DEA,z2CE5);
          real _t2E00#1 = λ(T0[],T1[])<(T0 * T1)> (_t2DEC,_t2D01);
          real _t2E02#2 = λ(T0[],T1[])<(T0 + T1)> (_t2DE6,_t2E00);
          tensor[3] _t2E04#1 = <tensor[3]>[_t2DA4,_t2DC6,_t2E02];
          real _t2E30#1 = λ(T0[],T1[])<(T0 * T1)> (_t2D66,_t2CF7);
          real _t2E36#1 = λ(T0[],T1[])<(T0 * T1)> (_t2E30,_t2CED);
          real _t2E4A#1 = λ(T0[],T1[])<(T0 * T1)> (_t2E36,_t2D53);
          real _t2E68#1 = λ(T0[],T1[])<(T0 + T1)> (_t2E4A,_t2DA2);
          real _t2E6E#1 = λ(T0[],T1[])<(T0 * T1)> (_t2D66,y2CE3);
          real _t2E74#1 = λ(T0[],T1[])<(T0 * T1)> (_t2E6E,_t2D27);
          real _t2E88#1 = λ(T0[],T1[])<(T0 * T1)> (_t2E74,_t2D53);
          real _t2E8C#1 = λ(T0[],T1[])<(T0 * T1)> (_t29BA,y2CE3);
          real _t2E8E#1 = λ(T0[],T1[])<(T0 * T1)> (_t2E8C,z2CE5);
          real _t2EA2#1 = λ(T0[],T1[])<(T0 * T1)> (_t2E8E,_t2D01);
          real _t2EA4#2 = λ(T0[],T1[])<(T0 + T1)> (_t2E88,_t2EA2);
          tensor[3] _t2EA6#1 = <tensor[3]>[_t2DC6,_t2E68,_t2EA4];
          int _t2F24#0 = 4;
          real _t2F26#1 = λ(T0[])<(T0)^4> (z2CE5);
          real _t2F28#1 = λ(T0[],T1[])<(T0 * T1)> (_t2D66,_t2F26);
          real _t2F3C#1 = λ(T0[],T1[])<(T0 * T1)> (_t2F28,_t2D53);
          real _t2F3E#1 = 0.1e2;
          real _t2F44#1 = λ(T0[],T1[])<(T0 * T1)> (_t2F3E,_t2CED);
          real _t2F58#1 = λ(T0[],T1[])<(T0 * T1)> (_t2F44,_t2D01);
          real _t2F5A#1 = λ(T0[],T1[])<(T0 + T1)> (_t2F3C,_t2F58);
          real _t2F70#1 = λ(T0[],T1[])<(T0 * T1)> (_t2CE7,_t2D53);
          real _t2F72#1 = λ(T0[],T1[])<(T0 + T1)> (_t2F5A,_t2F70);
          tensor[3] _t2F74#1 = <tensor[3]>[_t2E02,_t2EA4,_t2F72];
          tensor[3,3] hess2F76#1 = <tensor[3,3]>[_t2E04,_t2EA6,_t2F74];
          (real[3] _t2F7A#1,tensor[3][3] evecs2F7B#0) = Eigen3x3(hess2F76);
          real _t2F7F#1 = Subscript<real[3]>(_t2F7A,_t2CEB);
          real _t2F81#1 = λ(T0[])<Neg(T0)> (_t2F7F);
          real _t2F83#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (g2D59);
          real _t2F85#1 = λ(T0[],T1[])<(T0 + T1)> (fBias2954,_t2F83);
          real str2F87#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t2F81,_t2F85);
          string _t2F8B#1 = " <= fStrTh=";
          string _t2F8D#1 = " || fMask(pos)=";
          string _t2F94#1 = " < fMaskTh=";
          string _t2F96#1 = " || fTest(pos)=";
          bool _t2F99#1 = true;
          string _t2F9D#1 = " ==>DIE\n";
          Print<[string,bool,string,real,string,real,string,real,string,real,string,bool,string]>(_t2CBC,_t2CD6,_t2CDD,str2F87,_t2F8B,fStrTh2956,_t2F8D,_t29AD,_t2F94,fMaskTh2955,_t2F96,_t2F99,_t2F9D);
          goto JOIN2CB4
        JOIN2CB4:  preds = [MASSIGN3D39,COND2FA0]
          die
          goto JOIN2C9D
        JOIN2C9D:  preds = [*DIE2FA1,COND2FA2]
          bool _t2FA5#1 = GT<real>(travMax2951,_t29AD);
          if _t2FA5 then goto ASSIGN2FA9 else goto JOIN2FA7
        ASSIGN2FA9:  preds = [COND2FAD]
          bool _t2FA8#1 = GT<real>(trav2973,travMax2951);
          if _t2FA8 then goto DIE2FAB else goto JOIN2FAA
        DIE2FAB:  preds = [COND2FAC]
          die
          goto JOIN2FAA
        JOIN2FAA:  preds = [*DIE2FAB,COND2FAC]
          goto JOIN2FA7
        JOIN2FA7:  preds = [JOIN2FAA,COND2FAD]
          bool _t2FAE#1 = BNot(found2971);
          if _t2FAE then goto ASSIGN2FB2 else goto ASSIGN303C
        ASSIGN2FB2:  preds = [COND3B88]
          int _t2FB1#3 = 0;
          bool _t2FB3#1 = GT<int>(nfsMax2950,_t2FB1);
          if _t2FB3 then goto ASSIGN2FB7 else goto JOIN2FB5
        ASSIGN2FB7:  preds = [COND2FE5]
          bool _t2FB6#1 = GT<int>(nfs2972,nfsMax2950);
          if _t2FB6 then goto ASSIGN3DEA else goto JOIN2FB8
        ASSIGN3DEA:  preds = [COND2FE4]
          bool _t2FBD#1 = GT<int>(verb294A,_t2FB1);
          if _t2FBD then goto JOIN2FBF else goto JOIN2FBF
        JOIN2FBF:  preds = [COND2FC5,COND2FC5]
          bool _t2FC1#1 = phi(vv2984,vv2984)
          if _t2FC1 then goto ASSIGN2FC9 else goto ASSIGN2FCB
        ASSIGN2FC9:  preds = [COND2FCE]
          bool _t2FC7#1 = true;
          goto JOIN2FC6
        JOIN2FC6:  preds = [ASSIGN2FC9,ASSIGN2FCD]
          bool _t2FC8#1 = phi(_t2FC7,_t2FCC)
          if _t2FC8 then goto ASSIGN2FD1 else goto JOIN2FCF
        ASSIGN2FD1:  preds = [COND2FE2]
          string _t2FD0#1 = "(i#";
          string _t2FD2#1 = " @ ";
          string _t2FD4#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID296E,_t2FD0,iter2942,_t2FD2,pos296C,_t2FD4);
          string _t2FD7#1 = "nfs=";
          string _t2FD9#1 = " > nfsMax=";
          string _t2FDB#1 = " || trav=";
          string _t2FDD#1 = " > travMax=";
          string _t2FDF#1 = " =>DIE\n";
          Print<[string,int,string,int,string,real,string,real,string]>(_t2FD7,nfs2972,_t2FD9,nfsMax2950,_t2FDB,trav2973,_t2FDD,travMax2951,_t2FDF);
          goto JOIN2FCF
        JOIN2FCF:  preds = [MASSIGN2FE1,COND2FE2]
          die
          goto JOIN2FB8
        JOIN2FB8:  preds = [*DIE2FE3,COND2FE4]
          goto JOIN2FB5
        JOIN2FB5:  preds = [JOIN2FB8,COND2FE5]
          tensor[3] _t2FE6#1 = fStep2531 (pos296C);
          tensor[3] step2FE8#4 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs2949,_t2FE6);
          tensor[3] pos2FEB#2 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos296C,step2FE8);
          real _t2FF1#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (step2FE8);
          real _t2FF3#2 = λ(T0[],T1[])<(T0) / ( T1)> (_t2FF1,tipd2953);
          real mvmt2FF5#2 = λ(T0[],T1[],T2[])<(T0 + (T2 * (T1) - (T0)))> (_t2FF3,mvmt2974,hist2948);
          bool _t2FF8#1 = GT<real>(mvmt2FF5,fsEps294C);
          if _t2FF8 then goto ASSIGN3DEB else goto ASSIGN3009
        ASSIGN3DEB:  preds = [COND300F]
          real trav2FFF#1 = λ(T0[],T1[])<(T0 + T1)> (trav2973,_t2FF3);
          int _t3002#1 = 1;
          int nfs3004#1 = IAdd(nfs2972,_t3002);
          goto JOIN2FFA
        JOIN2FFA:  preds = [ASSIGN3006,ASSIGN300C]
          real mvmt300B#2 = phi(mvmt2FF5,mvmt300A)
          real trav3000#1 = phi(trav2FFF,_t29AD)
          int nfs3005#1 = phi(nfs3004,nfs2972)
          bool found3008#2 = phi(found2971,found3007)
          bool _t3017#1 = GT<int>(verb294A,_t2FB1);
          if _t3017 then goto JOIN3019 else goto JOIN3019
        JOIN3019:  preds = [COND301F,COND301F]
          bool _t301B#1 = phi(vv2984,vv2984)
          if _t301B then goto ASSIGN3023 else goto ASSIGN3025
        ASSIGN3023:  preds = [COND3028]
          bool _t3021#1 = true;
          goto JOIN3020
        JOIN3020:  preds = [ASSIGN3023,ASSIGN3027]
          bool _t3022#1 = phi(_t3021,_t3026)
          if _t3022 then goto ASSIGN302B else goto JOIN3029
        ASSIGN302B:  preds = [COND303A]
          string _t302A#1 = "(i#";
          string _t302C#1 = " @ ";
          string _t302E#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID296E,_t302A,iter2942,_t302C,pos2FEB,_t302E);
          string _t3031#1 = "step=";
          string _t3033#1 = "; mvmt=";
          string _t3035#1 = " => found=";
          string _t3037#1 = "\n";
          Print<[string,tensor[3],string,real,string,bool,string]>(_t3031,step2FE8,_t3033,mvmt300B,_t3035,found3008,_t3037);
          goto JOIN3029
        JOIN3029:  preds = [MASSIGN3039,COND303A]
          goto JOIN2FB0
        JOIN2FB0:  preds = [JOIN3029,JOIN373D]
          int born3560#1 = phi(born2976,born3B86)
          real closest35E8#1 = phi(closest2975,closest35F7)
          real mvmt2FF6#1 = phi(mvmt300B,mvmt3735)
          real trav3012#1 = phi(trav3000,trav372F)
          int nfs3011#1 = phi(nfs3005,nfs2972)
          bool found3010#1 = phi(found3008,found2971)
          tensor[3] step2FE9#1 = phi(step2FE8,step3729)
          real hh357B#1 = phi(hh296F,hh3725)
          tensor[3] pos2FEC#2 = phi(pos2FEB,pos3713)
          self.pos = pos2FEC;
          self._pos = pos2FEC;
          self.hh = hh357B;
          self.step = step2FE9;
          self.found = found3010;
          self.nfs = nfs3011;
          self.trav = trav3012;
          self.mvmt = mvmt2FF6;
          self.closest = closest35E8;
          self.born = born3560;
          self.first = vv2984;
          active
        ASSIGN3025:  preds = [COND3028]
          int _t3024#1 = 1;
          bool _t3026#1 = GT<int>(verb294A,_t3024);
          goto JOIN3020
        ASSIGN3009:  preds = [COND300F]
          bool found3007#1 = true;
          real mvmt300A#1 = 0.1e1;
          goto JOIN2FFA
        ASSIGN2FCB:  preds = [COND2FCE]
          int _t2FCA#1 = 1;
          bool _t2FCC#1 = GT<int>(verb294A,_t2FCA);
          goto JOIN2FC6
        ASSIGN303C:  preds = [COND3B88]
          int _t303B#25 = 0;
          bool _t303D#1 = EQ<int>(_t303B,fDim2946);
          if _t303D then goto SAVE3041 else goto JOIN303F
        SAVE3041:  preds = [COND304C]
          self.pos = pos296C;
          stabilize
          goto JOIN303F
        JOIN303F:  preds = [*STABILIZE3040,COND304C]
          tensor[3] _t304D#1 = fStep2531 (pos296C);
          tensor[3] step304F#7 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs2949,_t304D);
          tensor[3] pos3051#23 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos296C,step304F);
          real _t3055#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (step304F);
          real _t3057#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t3055,tipd2953);
          real trav3059#5 = λ(T0[],T1[])<(T0 + T1)> (trav2973,_t3057);
          point[] _t3067#1 = SphereQuery<3,point>(pos3051,rad2943);
        FOREACH306D:  preds = [ASSIGN3D3B,NEXT314D]
          foreach (P3069 in _t3067) on exit goto ASSIGN3D3C
            int nn306C#3 = phi(_t303B,nn314B)
            tensor[3] force306B#4 = phi(_t29B3,force3147)
            real oldE306A#4 = phi(_t29AD,oldE30E1)
          tensor[3] _t306E#1 = P3069.pos;
          tensor[3] off3070#2 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (_t306E,pos3051);
          real _t3072#3 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (off3070);
          real _t3074#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t3072,tipd2953);
          bool _t3076#1 = LT<real>(_t3074,fsEps294C);
          if _t3076 then goto ASSIGN307A else goto JOIN3078
        ASSIGN307A:  preds = [COND3080]
          real _t3079#1 = P3069.ID;
          bool _t307B#1 = LTE<real>(ID296E,_t3079);
          if _t307B then goto DIE307E else goto JOIN307D
        DIE307E:  preds = [COND307F]
          die
          goto JOIN307D
        JOIN307D:  preds = [*DIE307E,COND307F]
          goto JOIN3078
        JOIN3078:  preds = [JOIN307D,COND3080]
          real _t3084#12 = λ(T0[],T1[])<(T0) / ( T1)> (_t3072,rad2943);
          real _t3087#2 = 0.2e1;
          real _t3089#2 = 0.3e1;
          real _t308B#2 = λ(T0[],T1[])<(T0) / ( T1)> (_t3087,_t3089);
          real s308D#5 = λ(T0[],T1[])<(T0) - (T1)> (_t3084,_t308B);
          bool _t3096#2 = LT<real>(_t3084,_t308B);
          if _t3096 then goto ASSIGN309A else goto ASSIGN30B6
        ASSIGN309A:  preds = [COND30DC]
          real _t3099#1 = 0.1e1;
          real _t309B#1 = -0.5646e1;
          real _t309D#1 = 0.119835e2;
          real _t309F#1 = -0.113535e2;
          real _t30A1#1 = 0.40550625e1;
          real _t30A3#1 = λ(T0[],T1[])<(T0 * T1)> (_t30A1,_t3084);
          real _t30A5#1 = λ(T0[],T1[])<(T0 + T1)> (_t309F,_t30A3);
          real _t30A7#1 = λ(T0[],T1[])<(T0 * T1)> (_t3084,_t30A5);
          real _t30A9#1 = λ(T0[],T1[])<(T0 + T1)> (_t309D,_t30A7);
          real _t30AB#1 = λ(T0[],T1[])<(T0 * T1)> (_t3084,_t30A9);
          real _t30AD#1 = λ(T0[],T1[])<(T0 + T1)> (_t309B,_t30AB);
          real _t30AF#1 = λ(T0[],T1[])<(T0 * T1)> (_t3084,_t30AD);
          real _t30B1#1 = λ(T0[],T1[])<(T0 + T1)> (_t3099,_t30AF);
          goto JOIN3098
        JOIN3098:  preds = [ASSIGN30B3,JOIN30B9]
          real _t30B2#1 = phi(_t30B1,_t30D5)
          real oldE30E1#1 = λ(T0[],T1[])<(T0 + T1)> (oldE306A,_t30B2);
          real _t30EB#1 = λ(T0[],T1[])<(T0 * T1)> (_t3089,_t3084);
          real t30EF#4 = λ(T0[],T1[])<(T0) - (T1)> (_t30EB,_t3087);
          if _t3096 then goto ASSIGN30FC else goto ASSIGN3112
        ASSIGN30FC:  preds = [COND3136]
          real _t30FB#1 = -0.5646e1;
          real _t30FD#1 = 0.23967e2;
          real _t30FF#1 = -0.340605e2;
          real _t3101#1 = 0.1622025e2;
          real _t3103#1 = λ(T0[],T1[])<(T0 * T1)> (_t3101,_t3084);
          real _t3105#1 = λ(T0[],T1[])<(T0 + T1)> (_t30FF,_t3103);
          real _t3107#1 = λ(T0[],T1[])<(T0 * T1)> (_t3084,_t3105);
          real _t3109#1 = λ(T0[],T1[])<(T0 + T1)> (_t30FD,_t3107);
          real _t310B#1 = λ(T0[],T1[])<(T0 * T1)> (_t3084,_t3109);
          real _t310D#1 = λ(T0[],T1[])<(T0 + T1)> (_t30FB,_t310B);
          goto JOIN30FA
        JOIN30FA:  preds = [ASSIGN310F,JOIN3115]
          real _t310E#1 = phi(_t310D,_t312F)
          real _t3139#1 = 0.1e1;
          real _t313B#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t3139,rad2943);
          real _t313D#1 = λ(T0[],T1[])<(T0 * T1)> (_t310E,_t313B);
          tensor[3] _t313F#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (_t313D,off3070);
          tensor[3] _t3143#1 = λ(T0[3],T1[])<(T0_{i0}) / ( T1)>_{3} (_t313F,_t3072);
          tensor[3] force3147#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (force306B,_t3143);
          int _t3149#1 = 1;
          int nn314B#1 = IAdd(nn306C,_t3149);
          goto FOREACH306D
        ASSIGN3112:  preds = [COND3136]
          real _t3111#1 = 0.1e1;
          bool _t3113#1 = LT<real>(_t3084,_t3111);
          if _t3113 then goto ASSIGN3117 else goto JOIN3115
        ASSIGN3117:  preds = [COND3133]
          real _t3116#1 = 0.1234567901e-1;
          real _t3118#1 = λ(T0[],T1[])<(T0 * T1)> (_t3116,t30EF);
          real _t311A#2 = 0.486e1;
          real _t311C#1 = -0.1458e2;
          real _t311E#1 = 0.1458e2;
          real _t3122#1 = λ(T0[],T1[])<(T0 * T1)> (_t311A,t30EF);
          real _t3124#1 = λ(T0[],T1[])<(T0) - (T1)> (_t311E,_t3122);
          real _t3126#1 = λ(T0[],T1[])<(T0 * T1)> (t30EF,_t3124);
          real _t3128#1 = λ(T0[],T1[])<(T0 + T1)> (_t311C,_t3126);
          real _t312A#1 = λ(T0[],T1[])<(T0 * T1)> (t30EF,_t3128);
          real _t312C#1 = λ(T0[],T1[])<(T0 + T1)> (_t311A,_t312A);
          real _t312E#1 = λ(T0[],T1[])<(T0 * T1)> (_t3118,_t312C);
          goto JOIN3115
        JOIN3115:  preds = [ASSIGN3130,COND3133]
          real _t312F#1 = phi(_t312E,_t29AD)
          goto JOIN30FA
        ASSIGN30B6:  preds = [COND30DC]
          real _t30B5#1 = 0.1e1;
          bool _t30B7#1 = LT<real>(_t3084,_t30B5);
          if _t30B7 then goto ASSIGN30BB else goto JOIN30B9
        ASSIGN30BB:  preds = [COND30D9]
          real _t30BA#1 = -0.1e-2;
          real _t30BC#1 = 0.9e-1;
          real _t30BE#1 = -0.54e0;
          real _t30C0#1 = 0.1215e1;
          real _t30C2#1 = 0.972e0;
          real _t30C4#1 = λ(T0[],T1[])<(T0 * T1)> (_t30C2,s308D);
          real _t30C6#1 = λ(T0[],T1[])<(T0) - (T1)> (_t30C0,_t30C4);
          real _t30C8#1 = λ(T0[],T1[])<(T0 * T1)> (_t30C6,s308D);
          real _t30CA#1 = λ(T0[],T1[])<(T0 + T1)> (_t30BE,_t30C8);
          real _t30CC#1 = λ(T0[],T1[])<(T0 * T1)> (_t30CA,s308D);
          real _t30CE#1 = λ(T0[],T1[])<(T0 + T1)> (_t30BC,_t30CC);
          real _t30D0#1 = λ(T0[],T1[])<(T0 * T1)> (_t30CE,s308D);
          real _t30D2#1 = λ(T0[],T1[])<(T0 * T1)> (_t30D0,s308D);
          real _t30D4#1 = λ(T0[],T1[])<(T0 + T1)> (_t30BA,_t30D2);
          goto JOIN30B9
        JOIN30B9:  preds = [ASSIGN30D6,COND30D9]
          real _t30D5#1 = phi(_t30D4,_t29AD)
          goto JOIN3098
        ASSIGN3D3C:  preds = [FOREACH306D]
          bool _t3150#1 = EQ<int>(_t303B,nn306C);
          if _t3150 then goto ASSIGN3D3D else goto JOIN3152
        ASSIGN3D3D:  preds = [COND355F]
          bool _t3158#1 = GT<int>(pcp2947,_t303B);
          if _t3158 then goto ASSIGN3D3E else goto JOIN315A
        ASSIGN3D3E:  preds = [COND3170]
          bool _t315E#1 = GT<int>(iter2942,_t303B);
          if _t315E then goto ASSIGN3164 else goto JOIN3160
        ASSIGN3164:  preds = [COND316A]
          int _t3163#1 = IMod(iter2942,pcp2947);
          bool _t3165#1 = EQ<int>(_t303B,_t3163);
          goto JOIN3160
        JOIN3160:  preds = [ASSIGN3D3F,COND316A]
          bool _t3166#1 = phi(_t3165,vv2984)
          goto JOIN315A
        JOIN315A:  preds = [JOIN3160,COND3170]
          bool _t316C#1 = phi(_t3166,vv2984)
          if _t316C then goto ASSIGN3173 else goto JOIN3171
        ASSIGN3173:  preds = [COND3187]
          int _t3172#1 = IDiv(iter2942,pcp2947);
          int _t3174#2 = 2;
          int _t3176#1 = IMod(_t3172,_t3174);
          int _t317A#1 = IMul(_t3176,_t3174);
          int _t317C#1 = 1;
          int _t317E#1 = ISub(_t317A,_t317C);
          goto JOIN3171
        JOIN3171:  preds = [ASSIGN317F,COND3187]
          int _t3181#1 = phi(_t317E,_t303B)
          bool _t318A#1 = GT<int>(_t3181,_t303B);
          if _t318A then goto ASSIGN318F else goto JOIN318C
        ASSIGN318F:  preds = [COND3192]
          bool _t318D#1 = LT<int>(born2976,nnmax2944);
          goto JOIN318C
        JOIN318C:  preds = [ASSIGN318F,COND3192]
          bool _t318E#1 = phi(_t318D,vv2984)
          bool _t3193#1 = BNot(_t318E);
          if _t3193 then goto SAVE3197 else goto JOIN3195
        SAVE3197:  preds = [COND31A2]
          self.pos = pos3051;
          self._pos = pos3051;
          self.step = step304F;
          self.trav = trav3059;
          active
          goto JOIN3195
        JOIN3195:  preds = [*ACTIVE3196,COND31A2]
          tensor[3,3] _t31A3#3 = fPerp27E7 (pos3051);
          tensor[3] _t31A9#1 = <tensor[3]>[tipd2953,_t29AD,_t29AD];
          tensor[3] noff031AB#2 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (_t31A3,_t31A9);
          tensor[3] _t31B3#1 = <tensor[3]>[_t29AD,tipd2953,_t29AD];
          tensor[3] noff131B5#2 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (_t31A3,_t31B3);
          tensor[3] _t31BD#1 = <tensor[3]>[_t29AD,_t29AD,tipd2953];
          tensor[3] noff231BF#2 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (_t31A3,_t31BD);
          real _t31C4#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (noff031AB);
          real _t31C6#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (noff131B5);
          bool _t31C8#1 = GT<real>(_t31C4,_t31C6);
          if _t31C8 then goto JOIN31CA else goto JOIN31CA
        JOIN31CA:  preds = [COND31D0,COND31D0]
          tensor[3] _t31CC#2 = phi(noff031AB,noff131B5)
          real _t31D4#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (_t31CC);
          real _t31D6#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (noff231BF);
          bool _t31D8#1 = GT<real>(_t31D4,_t31D6);
          if _t31D8 then goto JOIN31DA else goto JOIN31DA
        JOIN31DA:  preds = [COND31E0,COND31E0]
          tensor[3] _t31DC#2 = phi(_t31CC,noff231BF)
          tensor[3] _t31E3#1 = λ(T0[3],T1[3])<(T0_{i0} * (1) / ( Sqrt(Σ(i1=0..2)<((T1_{i1} * T1_{i1}))>(i1=0..2))))>_{3} (_t31DC,_t31DC);
          tensor[3] _t31E5#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (tipd2953,_t31E3);
          tensor[3] npos31E7#2 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (_t31E5,pos3051);
          tensor[3] _t31E9#1 = fStep2531 (npos31E7);
          tensor[3] _t31EB#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs2949,_t31E9);
          tensor[3] npos31ED#5 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (npos31E7,_t31EB);
          bool _t31F3#2 = GT<int>(verb294A,_t303B);
          if _t31F3 then goto JOIN31F5 else goto JOIN31F5
        JOIN31F5:  preds = [COND31FB,COND31FB]
          bool _t31F7#1 = phi(vv2984,vv2984)
          if _t31F7 then goto ASSIGN31FF else goto ASSIGN3201
        ASSIGN31FF:  preds = [COND3204]
          bool _t31FD#1 = true;
          goto JOIN31FC
        JOIN31FC:  preds = [ASSIGN31FF,ASSIGN3203]
          bool _t31FE#1 = phi(_t31FD,_t3202)
          if _t31FE then goto ASSIGN3207 else goto JOIN3205
        ASSIGN3207:  preds = [COND3234]
          string _t3206#1 = "(i#";
          string _t3208#1 = " @ ";
          string _t320A#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID296E,_t3206,iter2942,_t3208,pos3051,_t320A);
          string _t320D#1 = " 0==nn =>NEW(";
          string _t320F#1 = ") w/ ID=";
          real _t3212#1 = 0.1e7;
          real _t3215#1 = TensorIndex<tensor[3],[0]>(npos31ED);
          real _t3217#1 = urnd281A (_t3215);
          real _t3219#1 = TensorIndex<tensor[3],[1]>(npos31ED);
          real _t321B#1 = urnd281A (_t3219);
          real _t321D#1 = λ(T0[],T1[])<(T0 + T1)> (_t3217,_t321B);
          real _t321F#1 = TensorIndex<tensor[3],[2]>(npos31ED);
          real _t3221#1 = urnd281A (_t321F);
          real _t3223#1 = λ(T0[],T1[])<(T0 + T1)> (_t321D,_t3221);
          real _t3225#1 = 0.1e1;
          real _t3227#1 = MathFn<fmod>(_t3223,_t3225);
          real _t322B#1 = λ(T0[],T1[])<(T0 * T1)> (_t3212,_t3227);
          real _t322D#1 = MathFn<floor>(_t322B);
          string _t3231#1 = "\n";
          Print<[string,tensor[3],string,real,string]>(_t320D,npos31ED,_t320F,_t322D,_t3231);
          goto JOIN3205
        JOIN3205:  preds = [MASSIGN3D4D,COND3234]
          tensor[3] mid3240#1 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (pos3051,_t29B3);
          real _t3243#2 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (mid3240);
          bool _t3247#1 = LT<real>(_t3243,_t29BA);
          if _t3247 then goto ASSIGN324D else goto JOIN3249
        ASSIGN324D:  preds = [COND3253]
          real _t324C#1 = 0.3e1;
          bool _t324E#1 = GT<real>(_t3243,_t324C);
          goto JOIN3249
        JOIN3249:  preds = [ASSIGN3D50,COND3253]
          bool _t324F#1 = phi(_t324E,vv2984)
          if _t324F then goto ASSIGN325B else goto JOIN3256
        ASSIGN325B:  preds = [COND3523]
          real x325A#4 = TensorIndex<tensor[3],[0]>(pos3051);
          real y325C#5 = TensorIndex<tensor[3],[1]>(pos3051);
          real z325E#6 = TensorIndex<tensor[3],[2]>(pos3051);
          real _t3260#6 = 0.2e1;
          real _t3262#1 = λ(T0[],T1[])<(T0 * T1)> (_t3260,x325A);
          int _t3264#1 = 2;
          real _t3266#8 = λ(T0[])<(T0)^2> (z325E);
          real _t3268#1 = λ(T0[],T1[])<(T0 * T1)> (_t3262,_t3266);
          real _t326C#2 = λ(T0[])<(T0)^2> (x325A);
          real _t3270#2 = λ(T0[])<(T0)^2> (y325C);
          real _t3272#1 = λ(T0[],T1[])<(T0 + T1)> (_t326C,_t3270);
          real _t3278#2 = λ(T0[],T1[])<(T0 + T1)> (_t3272,_t3266);
          real _t327A#7 = λ(T0[])<Cosine(T0)> (_t3278);
          real _t327C#1 = λ(T0[],T1[])<(T0 * T1)> (_t3268,_t327A);
          real _t3280#1 = λ(T0[],T1[])<(T0 * T1)> (_t3260,y325C);
          real _t3286#1 = λ(T0[],T1[])<(T0 * T1)> (_t3280,_t3266);
          real _t329A#1 = λ(T0[],T1[])<(T0 * T1)> (_t3286,_t327A);
          int _t329E#0 = 3;
          real _t32A0#3 = λ(T0[])<(T0)^3> (z325E);
          real _t32A2#1 = λ(T0[],T1[])<(T0 * T1)> (_t3260,_t32A0);
          real _t32B6#1 = λ(T0[],T1[])<(T0 * T1)> (_t32A2,_t327A);
          real _t32BA#1 = λ(T0[],T1[])<(T0 * T1)> (_t3260,z325E);
          real _t32CC#8 = λ(T0[])<Sine(T0)> (_t3278);
          real _t32CE#1 = λ(T0[],T1[])<(T0 * T1)> (_t32BA,_t32CC);
          real _t32D0#1 = λ(T0[],T1[])<(T0 + T1)> (_t32B6,_t32CE);
          tensor[3] g32D2#1 = <tensor[3]>[_t327C,_t329A,_t32D0];
          int _t32DD#1 = -4;
          real _t32DF#5 = IntToReal(_t32DD);
          real _t32E5#1 = λ(T0[],T1[])<(T0 * T1)> (_t32DF,_t326C);
          real _t32EB#1 = λ(T0[],T1[])<(T0 * T1)> (_t32E5,_t3266);
          real _t32FF#1 = λ(T0[],T1[])<(T0 * T1)> (_t32EB,_t32CC);
          real _t3307#1 = λ(T0[],T1[])<(T0 * T1)> (_t3260,_t3266);
          real _t331B#2 = λ(T0[],T1[])<(T0 * T1)> (_t3307,_t327A);
          real _t331D#1 = λ(T0[],T1[])<(T0 + T1)> (_t32FF,_t331B);
          real _t3323#2 = λ(T0[],T1[])<(T0 * T1)> (_t32DF,x325A);
          real _t3325#1 = λ(T0[],T1[])<(T0 * T1)> (_t3323,y325C);
          real _t332B#1 = λ(T0[],T1[])<(T0 * T1)> (_t3325,_t3266);
          real _t333F#2 = λ(T0[],T1[])<(T0 * T1)> (_t332B,_t32CC);
          real _t334B#1 = λ(T0[],T1[])<(T0 * T1)> (_t3323,_t32A0);
          real _t335F#1 = λ(T0[],T1[])<(T0 * T1)> (_t334B,_t32CC);
          real _t3363#1 = λ(T0[],T1[])<(T0 * T1)> (_t29BA,x325A);
          real _t3365#1 = λ(T0[],T1[])<(T0 * T1)> (_t3363,z325E);
          real _t3379#1 = λ(T0[],T1[])<(T0 * T1)> (_t3365,_t327A);
          real _t337B#2 = λ(T0[],T1[])<(T0 + T1)> (_t335F,_t3379);
          tensor[3] _t337D#1 = <tensor[3]>[_t331D,_t333F,_t337B];
          real _t33A9#1 = λ(T0[],T1[])<(T0 * T1)> (_t32DF,_t3270);
          real _t33AF#1 = λ(T0[],T1[])<(T0 * T1)> (_t33A9,_t3266);
          real _t33C3#1 = λ(T0[],T1[])<(T0 * T1)> (_t33AF,_t32CC);
          real _t33E1#1 = λ(T0[],T1[])<(T0 + T1)> (_t33C3,_t331B);
          real _t33E7#1 = λ(T0[],T1[])<(T0 * T1)> (_t32DF,y325C);
          real _t33ED#1 = λ(T0[],T1[])<(T0 * T1)> (_t33E7,_t32A0);
          real _t3401#1 = λ(T0[],T1[])<(T0 * T1)> (_t33ED,_t32CC);
          real _t3405#1 = λ(T0[],T1[])<(T0 * T1)> (_t29BA,y325C);
          real _t3407#1 = λ(T0[],T1[])<(T0 * T1)> (_t3405,z325E);
          real _t341B#1 = λ(T0[],T1[])<(T0 * T1)> (_t3407,_t327A);
          real _t341D#2 = λ(T0[],T1[])<(T0 + T1)> (_t3401,_t341B);
          tensor[3] _t341F#1 = <tensor[3]>[_t333F,_t33E1,_t341D];
          int _t349D#0 = 4;
          real _t349F#1 = λ(T0[])<(T0)^4> (z325E);
          real _t34A1#1 = λ(T0[],T1[])<(T0 * T1)> (_t32DF,_t349F);
          real _t34B5#1 = λ(T0[],T1[])<(T0 * T1)> (_t34A1,_t32CC);
          real _t34B7#1 = 0.1e2;
          real _t34BD#1 = λ(T0[],T1[])<(T0 * T1)> (_t34B7,_t3266);
          real _t34D1#1 = λ(T0[],T1[])<(T0 * T1)> (_t34BD,_t327A);
          real _t34D3#1 = λ(T0[],T1[])<(T0 + T1)> (_t34B5,_t34D1);
          real _t34E9#1 = λ(T0[],T1[])<(T0 * T1)> (_t3260,_t32CC);
          real _t34EB#1 = λ(T0[],T1[])<(T0 + T1)> (_t34D3,_t34E9);
          tensor[3] _t34ED#1 = <tensor[3]>[_t337B,_t341D,_t34EB];
          tensor[3,3] hess34EF#1 = <tensor[3,3]>[_t337D,_t341F,_t34ED];
          (real[3] _t34F3#1,tensor[3][3] evecs34F4#0) = Eigen3x3(hess34EF);
          real _t34F8#1 = Subscript<real[3]>(_t34F3,_t3264);
          real _t34FA#1 = λ(T0[])<Neg(T0)> (_t34F8);
          real _t34FC#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (g32D2);
          real _t34FE#1 = λ(T0[],T1[])<(T0 + T1)> (fBias2954,_t34FC);
          real str3500#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t34FA,_t34FE);
          bool _t3504#1 = GT<real>(str3500,fStrTh2956);
          if _t3504 then goto ASSIGN3D7D else goto JOIN3506
        ASSIGN3D7D:  preds = [COND351D]
          bool _t350D#1 = GTE<real>(_t29AD,fMaskTh2955);
          if _t350D then goto ASSIGN3511 else goto JOIN350F
        ASSIGN3511:  preds = [COND3517]
          bool _t3510#1 = true;
          goto JOIN350F
        JOIN350F:  preds = [ASSIGN3511,COND3517]
          bool _t3513#1 = phi(_t3510,vv2984)
          goto JOIN3506
        JOIN3506:  preds = [JOIN350F,COND351D]
          bool _t3519#1 = phi(_t3513,vv2984)
          goto JOIN3256
        JOIN3256:  preds = [JOIN3506,COND3523]
          bool _t351F#1 = phi(_t3519,vv2984)
          if _t351F then goto NEW3527 else goto JOIN3526
        NEW3527:  preds = [COND352D]
          new point(npos31ED,hh296F);
          int _t3528#1 = 1;
          int born352A#1 = IAdd(born2976,_t3528);
          goto JOIN3526
        JOIN3526:  preds = [ASSIGN352C,COND352D]
          int born352B#1 = phi(born352A,born2976)
          if _t31F3 then goto JOIN3535 else goto JOIN3535
        JOIN3535:  preds = [COND353B,COND353B]
          bool _t3537#1 = phi(vv2984,vv2984)
          if _t3537 then goto ASSIGN353F else goto ASSIGN3541
        ASSIGN353F:  preds = [COND3544]
          bool _t353D#1 = true;
          goto JOIN353C
        JOIN353C:  preds = [ASSIGN353F,ASSIGN3543]
          bool _t353E#1 = phi(_t353D,_t3542)
          if _t353E then goto ASSIGN3547 else goto JOIN3545
        ASSIGN3547:  preds = [COND3552]
          string _t3546#1 = "(i#";
          string _t3548#1 = " @ ";
          string _t354A#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID296E,_t3546,iter2942,_t3548,pos3051,_t354A);
          string _t354D#1 = "nn=0; after birthing mvmt=";
          string _t354F#1 = "\n";
          Print<[string,real,string]>(_t354D,mvmt2974,_t354F);
          goto JOIN3545
        JOIN3545:  preds = [MASSIGN3551,COND3552]
          self.pos = pos3051;
          self._pos = pos3051;
          self.step = step304F;
          self.trav = trav3059;
          self.born = born352B;
          active
          goto JOIN3152
        JOIN3152:  preds = [*ACTIVE3553,COND355F]
          int born352E#9 = phi(born2976)
          tensor[3,3] _t3561#1 = fPerp27E7 (pos3051);
          tensor[3,3] _t3563#1 = λ(T0[],T1[3 3])<(T0 * T1_{i0,i1})>_{3 3} (hh296F,_t3561);
          tensor[3] es3565#3 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (_t3563,force306B);
          real _t3567#2 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (es3565);
          bool _t3569#1 = GT<real>(_t3567,tipd2953);
          if _t3569 then goto ASSIGN3D7F else goto JOIN356B
        ASSIGN3D7F:  preds = [COND357A]
          real _t356E#2 = λ(T0[],T1[])<(T0) / ( T1)> (tipd2953,_t3567);
          real hh3570#1 = λ(T0[],T1[])<(T0 * T1)> (hh296F,_t356E);
          tensor[3] es3577#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (_t356E,es3565);
          goto JOIN356B
        JOIN356B:  preds = [ASSIGN3D80,COND357A]
          tensor[3] es3578#5 = phi(es3577,es3565)
          real hh3571#2 = phi(hh3570,hh296F)
          tensor[3] _t357C#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos3051,es3578);
          tensor[3] _t357E#1 = fStep2531 (_t357C);
          tensor[3] fs3580#4 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs2949,_t357E);
          real _t3582#2 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (fs3580);
          real _t3584#1 = λ(T0[],T1[])<(T0 * T1)> (fsEps294C,tipd2953);
          real _t3586#2 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (es3578);
          real _t3588#1 = λ(T0[],T1[])<(T0 + T1)> (_t3584,_t3586);
          real _t358A#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t3582,_t3588);
          real _t358C#3 = 0.5e0;
          bool _t358E#1 = GT<real>(_t358A,_t358C);
          if _t358E then goto ASSIGN3D81 else goto JOIN3590
        ASSIGN3D81:  preds = [COND35DC]
          real hh3593#2 = λ(T0[],T1[])<(T0 * T1)> (hh3571,_t358C);
          bool _t359A#1 = GT<int>(verb294A,_t303B);
          if _t359A then goto JOIN359C else goto JOIN359C
        JOIN359C:  preds = [COND35A2,COND35A2]
          bool _t359E#1 = phi(vv2984,vv2984)
          if _t359E then goto ASSIGN35A6 else goto ASSIGN35A8
        ASSIGN35A6:  preds = [COND35AB]
          bool _t35A4#1 = true;
          goto JOIN35A3
        JOIN35A3:  preds = [ASSIGN35A6,ASSIGN35AA]
          bool _t35A5#1 = phi(_t35A4,_t35A9)
          if _t35A5 then goto ASSIGN35AE else goto JOIN35AC
        ASSIGN35AE:  preds = [COND35CF]
          string _t35AD#1 = "(i#";
          string _t35AF#1 = " @ ";
          string _t35B1#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID296E,_t35AD,iter2942,_t35AF,pos3051,_t35B1);
          string _t35B4#1 = "nn=";
          string _t35B6#1 = "; |fs|/|es|=";
          real _t35BC#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t3582,_t3586);
          string _t35BE#1 = " > 0.5; trying again with hh=";
          string _t35C0#1 = "; mvmt=";
          string _t35C2#3 = "\n";
          Print<[string,int,string,real,string,real,string,real,string]>(_t35B4,nn306C,_t35B6,_t35BC,_t35BE,hh3593,_t35C0,mvmt2974,_t35C2);
          string _t35C5#1 = "        fs=";
          Print<[string,tensor[3],string]>(_t35C5,fs3580,_t35C2);
          string _t35CA#1 = "        es=";
          Print<[string,tensor[3],string]>(_t35CA,es3578,_t35C2);
          goto JOIN35AC
        JOIN35AC:  preds = [MASSIGN3D85,COND35CF]
          self.pos = pos3051;
          self._pos = pos3051;
          self.hh = hh3593;
          self.step = step304F;
          self.trav = trav3059;
          self.born = born352E;
          active
          goto JOIN3590
        JOIN3590:  preds = [*ACTIVE35D0,COND35DC]
          real hh3594#2 = phi(hh3571)
          tensor[3] _t35DF#2 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (fs3580,es3578);
          tensor[3] pos35E1#7 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos3051,_t35DF);
          point[] _t35F4#1 = SphereQuery<3,point>(pos35E1,rad2943);
        FOREACH35FB:  preds = [ASSIGN3D87,NEXT366C]
          foreach (P35F6 in _t35F4) on exit goto ASSIGN366E
            tensor[3] mno35FA#2 = phi(_t29B3,mno3666)
            real newE35F9#6 = phi(_t29AD,newE3660)
            int nn35F8#9 = phi(_t303B,nn366A)
            real closest35F7#3 = phi(rad2943,closest3664)
          tensor[3] _t35FC#1 = P35F6.pos;
          tensor[3] off35FE#2 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (_t35FC,pos35E1);
          real _t3601#2 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (off35FE);
          real _t3603#7 = λ(T0[],T1[])<(T0) / ( T1)> (_t3601,rad2943);
          real _t3606#1 = 0.2e1;
          real _t3608#1 = 0.3e1;
          real _t360A#2 = λ(T0[],T1[])<(T0) / ( T1)> (_t3606,_t3608);
          real s360C#5 = λ(T0[],T1[])<(T0) - (T1)> (_t3603,_t360A);
          bool _t3615#1 = LT<real>(_t3603,_t360A);
          if _t3615 then goto ASSIGN3619 else goto ASSIGN3635
        ASSIGN3619:  preds = [COND365B]
          real _t3618#1 = 0.1e1;
          real _t361A#1 = -0.5646e1;
          real _t361C#1 = 0.119835e2;
          real _t361E#1 = -0.113535e2;
          real _t3620#1 = 0.40550625e1;
          real _t3622#1 = λ(T0[],T1[])<(T0 * T1)> (_t3620,_t3603);
          real _t3624#1 = λ(T0[],T1[])<(T0 + T1)> (_t361E,_t3622);
          real _t3626#1 = λ(T0[],T1[])<(T0 * T1)> (_t3603,_t3624);
          real _t3628#1 = λ(T0[],T1[])<(T0 + T1)> (_t361C,_t3626);
          real _t362A#1 = λ(T0[],T1[])<(T0 * T1)> (_t3603,_t3628);
          real _t362C#1 = λ(T0[],T1[])<(T0 + T1)> (_t361A,_t362A);
          real _t362E#1 = λ(T0[],T1[])<(T0 * T1)> (_t3603,_t362C);
          real _t3630#1 = λ(T0[],T1[])<(T0 + T1)> (_t3618,_t362E);
          goto JOIN3617
        JOIN3617:  preds = [ASSIGN3632,JOIN3638]
          real _t3631#1 = phi(_t3630,_t3654)
          real newE3660#1 = λ(T0[],T1[])<(T0 + T1)> (newE35F9,_t3631);
          real closest3664#1 = Min<real>(closest35F7,_t3601);
          tensor[3] mno3666#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (mno35FA,off35FE);
          int _t3668#1 = 1;
          int nn366A#1 = IAdd(nn35F8,_t3668);
          goto FOREACH35FB
        ASSIGN3635:  preds = [COND365B]
          real _t3634#1 = 0.1e1;
          bool _t3636#1 = LT<real>(_t3603,_t3634);
          if _t3636 then goto ASSIGN363A else goto JOIN3638
        ASSIGN363A:  preds = [COND3658]
          real _t3639#1 = -0.1e-2;
          real _t363B#1 = 0.9e-1;
          real _t363D#1 = -0.54e0;
          real _t363F#1 = 0.1215e1;
          real _t3641#1 = 0.972e0;
          real _t3643#1 = λ(T0[],T1[])<(T0 * T1)> (_t3641,s360C);
          real _t3645#1 = λ(T0[],T1[])<(T0) - (T1)> (_t363F,_t3643);
          real _t3647#1 = λ(T0[],T1[])<(T0 * T1)> (_t3645,s360C);
          real _t3649#1 = λ(T0[],T1[])<(T0 + T1)> (_t363D,_t3647);
          real _t364B#1 = λ(T0[],T1[])<(T0 * T1)> (_t3649,s360C);
          real _t364D#1 = λ(T0[],T1[])<(T0 + T1)> (_t363B,_t364B);
          real _t364F#1 = λ(T0[],T1[])<(T0 * T1)> (_t364D,s360C);
          real _t3651#1 = λ(T0[],T1[])<(T0 * T1)> (_t364F,s360C);
          real _t3653#1 = λ(T0[],T1[])<(T0 + T1)> (_t3639,_t3651);
          goto JOIN3638
        JOIN3638:  preds = [ASSIGN3655,COND3658]
          real _t3654#1 = phi(_t3653,_t29AD)
          goto JOIN3617
        ASSIGN366E:  preds = [FOREACH35FB]
          real _t366D#2 = IntToReal(nn35F8);
          tensor[3] mno366F#2 = λ(T0[3],T1[])<(T0_{i0}) / ( T1)>_{3} (mno35FA,_t366D);
          bool _t3675#2 = GT<int>(verb294A,_t303B);
          if _t3675 then goto JOIN3677 else goto JOIN3677
        JOIN3677:  preds = [COND367D,COND367D]
          bool _t3679#1 = phi(vv2984,vv2984)
          if _t3679 then goto ASSIGN3681 else goto ASSIGN3683
        ASSIGN3681:  preds = [COND3686]
          bool _t367F#1 = true;
          goto JOIN367E
        JOIN367E:  preds = [ASSIGN3681,ASSIGN3685]
          bool _t3680#1 = phi(_t367F,_t3684)
          if _t3680 then goto ASSIGN3689 else goto JOIN3687
        ASSIGN3689:  preds = [COND3698]
          string _t3688#1 = "(i#";
          string _t368A#1 = " @ ";
          string _t368C#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID296E,_t3688,iter2942,_t368A,pos35E1,_t368C);
          string _t368F#1 = "nn=";
          string _t3691#1 = "; oldE=";
          string _t3693#1 = " newE=";
          string _t3695#1 = "\n";
          Print<[string,int,string,real,string,real,string]>(_t368F,nn35F8,_t3691,oldE306A,_t3693,newE35F9,_t3695);
          goto JOIN3687
        JOIN3687:  preds = [MASSIGN3697,COND3698]
          real _t3699#2 = λ(T0[],T1[])<(T0) - (T1)> (newE35F9,oldE306A);
          tensor[3] _t369B#3 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (pos35E1,pos3051);
          tensor[3] _t369D#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (gdeTest294F,_t369B);
          tensor[3] _t369F#2 = λ(T0[3])<Neg(T0_{i0})>_{3} (force306B);
          real _t36A1#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (_t369D,_t369F);
          bool _t36A3#1 = GT<real>(_t3699,_t36A1);
          if _t36A3 then goto ASSIGN36A8 else goto JOIN36A5
        ASSIGN36A8:  preds = [COND3724]
          real hh36A6#3 = λ(T0[],T1[])<(T0 * T1)> (hh3594,gdeBack294E);
          bool _t36AB#1 = EQ<real>(_t29AD,hh36A6);
          if _t36AB then goto ASSIGN36AF else goto JOIN36AD
        ASSIGN36AF:  preds = [COND36B9]
          string _t36AE#1 = "(i#";
          string _t36B0#1 = " @ ";
          string _t36B2#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID296E,_t36AE,iter2942,_t36B0,pos35E1,_t36B2);
          string _t36B5#1 = "backtracked all the way to hh=0\n";
          Print<[string]>(_t36B5);
          die
          goto JOIN36AD
        JOIN36AD:  preds = [*DIE36B8,COND36B9]
          if _t3675 then goto JOIN36C0 else goto JOIN36C0
        JOIN36C0:  preds = [COND36C6,COND36C6]
          bool _t36C2#1 = phi(vv2984,vv2984)
          if _t36C2 then goto ASSIGN36CA else goto ASSIGN36CC
        ASSIGN36CA:  preds = [COND36CF]
          bool _t36C8#1 = true;
          goto JOIN36C7
        JOIN36C7:  preds = [ASSIGN36CA,ASSIGN36CE]
          bool _t36C9#1 = phi(_t36C8,_t36CD)
          if _t36C9 then goto ASSIGN36D2 else goto JOIN36D0
        ASSIGN36D2:  preds = [COND3711]
          string _t36D1#1 = "(i#";
          string _t36D3#1 = " @ ";
          string _t36D5#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID296E,_t36D1,iter2942,_t36D3,pos35E1,_t36D5);
          string _t36D8#1 = "nn=";
          string _t36DA#1 = "; oldE=";
          string _t36DC#1 = " newE=";
          string _t36DE#1 = "; backtracking; hh=";
          string _t36E0#1 = "; mvmt=";
          string _t36E2#7 = "\n";
          Print<[string,int,string,real,string,real,string,real,string,real,string]>(_t36D8,nn35F8,_t36DA,oldE306A,_t36DC,newE35F9,_t36DE,hh36A6,_t36E0,mvmt2974,_t36E2);
          string _t36E5#1 = "      fs=";
          Print<[string,tensor[3],string]>(_t36E5,fs3580,_t36E2);
          string _t36EA#1 = "      es=";
          Print<[string,tensor[3],string]>(_t36EA,es3578,_t36E2);
          string _t36EF#1 = "      newE - oldE=";
          Print<[string,real,string]>(_t36EF,_t3699,_t36E2);
          string _t36F6#1 = "      force=";
          Print<[string,tensor[3],string]>(_t36F6,force306B,_t36E2);
          string _t36FB#1 = "      dpos=";
          Print<[string,tensor[3],string]>(_t36FB,_t369B,_t36E2);
          string _t3702#1 = "      0.5*(pos - oldpos).(-force)=";
          tensor[3] _t3708#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (_t358C,_t369B);
          real _t370C#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (_t3708,_t369F);
          Print<[string,real,string]>(_t3702,_t370C,_t36E2);
          goto JOIN36D0
        JOIN36D0:  preds = [MASSIGN3D92,COND3711]
          self.pos = pos3051;
          self._pos = pos3051;
          self.hh = hh36A6;
          self.step = step304F;
          self.trav = trav3059;
          self.closest = closest35F7;
          self.born = born352E;
          active
          goto JOIN36A5
        JOIN36A5:  preds = [*ACTIVE3718,COND3724]
          real hh36A7#1 = phi(hh3594)
          tensor[3] pos3713#8 = phi(pos35E1)
          real hh3725#2 = λ(T0[],T1[])<(T0 * T1)> (hh36A7,gdeOppor294D);
          tensor[3] step3729#2 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (step304F,_t35DF);
          real _t372B#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (step3729);
          real _t372D#3 = λ(T0[],T1[])<(T0) / ( T1)> (_t372B,tipd2953);
          real trav372F#1 = λ(T0[],T1[])<(T0 + T1)> (trav3059,_t372D);
          real mvmt3735#1 = λ(T0[],T1[],T2[])<(T0 + (T2 * (T1) - (T0)))> (_t372D,mvmt2974,hist2948);
          bool _t373B#1 = LT<real>(_t372D,pcmvEps294B);
          if _t373B then goto ASSIGN3D98 else goto JOIN373D
        ASSIGN3D98:  preds = [COND3B87]
          bool _t3742#3 = GT<int>(pcp2947,_t303B);
          if _t3742 then goto ASSIGN3D99 else goto JOIN3744
        ASSIGN3D99:  preds = [COND375A]
          bool _t3748#1 = GT<int>(iter2942,_t303B);
          if _t3748 then goto ASSIGN374E else goto JOIN374A
        ASSIGN374E:  preds = [COND3754]
          int _t374D#1 = IMod(iter2942,pcp2947);
          bool _t374F#1 = EQ<int>(_t303B,_t374D);
          goto JOIN374A
        JOIN374A:  preds = [ASSIGN3D9A,COND3754]
          bool _t3750#1 = phi(_t374F,vv2984)
          goto JOIN3744
        JOIN3744:  preds = [JOIN374A,COND375A]
          bool _t3756#1 = phi(_t3750,vv2984)
          if _t3756 then goto ASSIGN375D else goto JOIN375B
        ASSIGN375D:  preds = [COND3771]
          int _t375C#1 = IDiv(iter2942,pcp2947);
          int _t375E#2 = 2;
          int _t3760#1 = IMod(_t375C,_t375E);
          int _t3764#1 = IMul(_t3760,_t375E);
          int _t3766#1 = 1;
          int _t3768#1 = ISub(_t3764,_t3766);
          goto JOIN375B
        JOIN375B:  preds = [ASSIGN3769,COND3771]
          int _t376B#1 = phi(_t3768,_t303B)
          bool _t3774#1 = NEQ<int>(_t376B,_t303B);
          if _t3774 then goto COND3794 else goto JOIN3776
        COND3794:  preds = [COND3B85]
          if _t3742 then goto ASSIGN3D9D else goto JOIN377E
        ASSIGN3D9D:  preds = [COND3794]
          bool _t3782#1 = GT<int>(iter2942,_t303B);
          if _t3782 then goto ASSIGN3788 else goto JOIN3784
        ASSIGN3788:  preds = [COND378E]
          int _t3787#1 = IMod(iter2942,pcp2947);
          bool _t3789#1 = EQ<int>(_t303B,_t3787);
          goto JOIN3784
        JOIN3784:  preds = [ASSIGN3D9E,COND378E]
          bool _t378A#1 = phi(_t3789,vv2984)
          goto JOIN377E
        JOIN377E:  preds = [JOIN3784,COND3794]
          bool _t3790#1 = phi(_t378A,vv2984)
          if _t3790 then goto ASSIGN3797 else goto JOIN3795
        ASSIGN3797:  preds = [COND37AB]
          int _t3796#1 = IDiv(iter2942,pcp2947);
          int _t3798#2 = 2;
          int _t379A#1 = IMod(_t3796,_t3798);
          int _t379E#1 = IMul(_t379A,_t3798);
          int _t37A0#1 = 1;
          int _t37A2#1 = ISub(_t379E,_t37A0);
          goto JOIN3795
        JOIN3795:  preds = [ASSIGN37A3,COND37AB]
          int _t37A5#1 = phi(_t37A2,_t303B)
          bool _t37AE#1 = GT<int>(_t37A5,_t303B);
          if _t37AE then goto ASSIGN3DA1 else goto JOIN37B0
        ASSIGN3DA1:  preds = [COND37CC]
          bool _t37B4#1 = LT<real>(newE35F9,_t29AD);
          if _t37B4 then goto ASSIGN37B9 else goto JOIN37B6
        ASSIGN37B9:  preds = [COND37C6]
          bool _t37B8#1 = LT<int>(nn35F8,nnmin2945);
          if _t37B8 then goto ASSIGN37BD else goto JOIN37BA
        ASSIGN37BD:  preds = [COND37C0]
          bool _t37BB#1 = LT<int>(born352E,nnmax2944);
          goto JOIN37BA
        JOIN37BA:  preds = [ASSIGN37BD,COND37C0]
          bool _t37BC#1 = phi(_t37BB,vv2984)
          goto JOIN37B6
        JOIN37B6:  preds = [JOIN37BA,COND37C6]
          bool _t37C2#1 = phi(_t37BC,vv2984)
          goto JOIN37B0
        JOIN37B0:  preds = [JOIN37B6,COND37CC]
          bool _t37C8#1 = phi(_t37C2,vv2984)
          if _t37C8 then goto ASSIGN37CF else goto COND3B37
        ASSIGN37CF:  preds = [COND3B83]
          tensor[3] _t37CE#1 = λ(T0[3],T1[3])<(T0_{i0} * (1) / ( Sqrt(Σ(i1=0..2)<((T1_{i1} * T1_{i1}))>(i1=0..2))))>_{3} (mno366F,mno366F);
          tensor[3] _t37D0#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (tipd2953,_t37CE);
          tensor[3] npos37D2#2 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (pos3713,_t37D0);
          tensor[3] _t37D4#1 = fStep2531 (npos37D2);
          tensor[3] _t37D6#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs2949,_t37D4);
          tensor[3] npos37D8#2 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (npos37D2,_t37D6);
          tensor[3] _t37DA#1 = fStep2531 (npos37D8);
          tensor[3] _t37DC#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs2949,_t37DA);
          tensor[3] npos37DE#6 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (npos37D8,_t37DC);
          bool birth37E0#4 = true;
          int _t37E2#2 = 2;
          bool _t37E4#1 = EQ<int>(fDim2946,_t37E2);
          if _t37E4 then goto ASSIGN37E8 else goto JOIN37E6
        ASSIGN37E8:  preds = [COND381D]
          int _t37E7#1 = 4;
          bool _t37E9#1 = GTE<int>(nn35F8,_t37E7);
          if _t37E9 then goto ASSIGN37ED else goto JOIN37EB
        ASSIGN37ED:  preds = [COND381B]
          real _t37EC#1 = λ(T0[],T1[])<(T0 * T1)> (tipd2953,mabd2952);
          point[] _t37EE#1 = SphereQuery<3,point>(npos37DE,_t37EC);
        FOREACH37F1:  preds = [ASSIGN37EF,NEXT37F5]
          foreach (P37F0 in _t37EE) on exit goto COND381A
            bool birth37F3#2 = phi(birth37E0,vv2984)
          goto FOREACH37F1
        COND381A:  preds = [FOREACH37F1]
          if birth37F3 then goto ASSIGN37FA else goto JOIN37F7
        ASSIGN37FA:  preds = [COND381A]
          real _t37F9#1 = TensorIndex<tensor[3],[0]>(pos3713);
          real _t37FB#1 = urnd281A (_t37F9);
          real _t37FD#1 = TensorIndex<tensor[3],[1]>(pos3713);
          real _t37FF#1 = urnd281A (_t37FD);
          real _t3801#1 = λ(T0[],T1[])<(T0 + T1)> (_t37FB,_t37FF);
          real _t3803#1 = TensorIndex<tensor[3],[2]>(pos3713);
          real _t3805#1 = urnd281A (_t3803);
          real _t3807#1 = λ(T0[],T1[])<(T0 + T1)> (_t3801,_t3805);
          real _t3809#1 = 0.1e1;
          real _t380B#1 = MathFn<fmod>(_t3807,_t3809);
          int _t380F#1 = ISub(nnmin2945,nn35F8);
          real _t3811#1 = IntToReal(_t380F);
          real _t3813#1 = IntToReal(nnmin2945);
          real _t3815#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t3811,_t3813);
          bool birth3817#1 = LT<real>(_t380B,_t3815);
          goto JOIN37F7
        JOIN37F7:  preds = [ASSIGN3DA9,COND381A]
          bool birth3818#1 = phi(birth3817,birth37F3)
          goto JOIN37EB
        JOIN37EB:  preds = [JOIN37F7,COND381B]
          bool birth37F6#1 = phi(birth3818,birth37E0)
          goto JOIN37E6
        JOIN37E6:  preds = [JOIN37EB,COND381D]
          bool birth381C#1 = phi(birth37F6,birth37E0)
          if birth381C then goto ASSIGN3DAA else goto JOIN381E
        ASSIGN3DAA:  preds = [COND3B19]
          tensor[3] mid382A#1 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (npos37DE,_t29B3);
          real _t382D#2 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (mid382A);
          bool _t3831#1 = LT<real>(_t382D,_t29BA);
          if _t3831 then goto ASSIGN3837 else goto JOIN3833
        ASSIGN3837:  preds = [COND383D]
          real _t3836#1 = 0.3e1;
          bool _t3838#1 = GT<real>(_t382D,_t3836);
          goto JOIN3833
        JOIN3833:  preds = [ASSIGN3DAC,COND383D]
          bool _t3839#1 = phi(_t3838,vv2984)
          if _t3839 then goto ASSIGN3845 else goto JOIN3840
        ASSIGN3845:  preds = [COND3B0D]
          real x3844#4 = TensorIndex<tensor[3],[0]>(npos37DE);
          real y3846#5 = TensorIndex<tensor[3],[1]>(npos37DE);
          real z3848#6 = TensorIndex<tensor[3],[2]>(npos37DE);
          real _t384A#6 = 0.2e1;
          real _t384C#1 = λ(T0[],T1[])<(T0 * T1)> (_t384A,x3844);
          real _t3850#8 = λ(T0[])<(T0)^2> (z3848);
          real _t3852#1 = λ(T0[],T1[])<(T0 * T1)> (_t384C,_t3850);
          real _t3856#2 = λ(T0[])<(T0)^2> (x3844);
          real _t385A#2 = λ(T0[])<(T0)^2> (y3846);
          real _t385C#1 = λ(T0[],T1[])<(T0 + T1)> (_t3856,_t385A);
          real _t3862#2 = λ(T0[],T1[])<(T0 + T1)> (_t385C,_t3850);
          real _t3864#7 = λ(T0[])<Cosine(T0)> (_t3862);
          real _t3866#1 = λ(T0[],T1[])<(T0 * T1)> (_t3852,_t3864);
          real _t386A#1 = λ(T0[],T1[])<(T0 * T1)> (_t384A,y3846);
          real _t3870#1 = λ(T0[],T1[])<(T0 * T1)> (_t386A,_t3850);
          real _t3884#1 = λ(T0[],T1[])<(T0 * T1)> (_t3870,_t3864);
          int _t3888#0 = 3;
          real _t388A#3 = λ(T0[])<(T0)^3> (z3848);
          real _t388C#1 = λ(T0[],T1[])<(T0 * T1)> (_t384A,_t388A);
          real _t38A0#1 = λ(T0[],T1[])<(T0 * T1)> (_t388C,_t3864);
          real _t38A4#1 = λ(T0[],T1[])<(T0 * T1)> (_t384A,z3848);
          real _t38B6#8 = λ(T0[])<Sine(T0)> (_t3862);
          real _t38B8#1 = λ(T0[],T1[])<(T0 * T1)> (_t38A4,_t38B6);
          real _t38BA#1 = λ(T0[],T1[])<(T0 + T1)> (_t38A0,_t38B8);
          tensor[3] g38BC#1 = <tensor[3]>[_t3866,_t3884,_t38BA];
          int _t38C7#1 = -4;
          real _t38C9#5 = IntToReal(_t38C7);
          real _t38CF#1 = λ(T0[],T1[])<(T0 * T1)> (_t38C9,_t3856);
          real _t38D5#1 = λ(T0[],T1[])<(T0 * T1)> (_t38CF,_t3850);
          real _t38E9#1 = λ(T0[],T1[])<(T0 * T1)> (_t38D5,_t38B6);
          real _t38F1#1 = λ(T0[],T1[])<(T0 * T1)> (_t384A,_t3850);
          real _t3905#2 = λ(T0[],T1[])<(T0 * T1)> (_t38F1,_t3864);
          real _t3907#1 = λ(T0[],T1[])<(T0 + T1)> (_t38E9,_t3905);
          real _t390D#2 = λ(T0[],T1[])<(T0 * T1)> (_t38C9,x3844);
          real _t390F#1 = λ(T0[],T1[])<(T0 * T1)> (_t390D,y3846);
          real _t3915#1 = λ(T0[],T1[])<(T0 * T1)> (_t390F,_t3850);
          real _t3929#2 = λ(T0[],T1[])<(T0 * T1)> (_t3915,_t38B6);
          real _t3935#1 = λ(T0[],T1[])<(T0 * T1)> (_t390D,_t388A);
          real _t3949#1 = λ(T0[],T1[])<(T0 * T1)> (_t3935,_t38B6);
          real _t394D#1 = λ(T0[],T1[])<(T0 * T1)> (_t29BA,x3844);
          real _t394F#1 = λ(T0[],T1[])<(T0 * T1)> (_t394D,z3848);
          real _t3963#1 = λ(T0[],T1[])<(T0 * T1)> (_t394F,_t3864);
          real _t3965#2 = λ(T0[],T1[])<(T0 + T1)> (_t3949,_t3963);
          tensor[3] _t3967#1 = <tensor[3]>[_t3907,_t3929,_t3965];
          real _t3993#1 = λ(T0[],T1[])<(T0 * T1)> (_t38C9,_t385A);
          real _t3999#1 = λ(T0[],T1[])<(T0 * T1)> (_t3993,_t3850);
          real _t39AD#1 = λ(T0[],T1[])<(T0 * T1)> (_t3999,_t38B6);
          real _t39CB#1 = λ(T0[],T1[])<(T0 + T1)> (_t39AD,_t3905);
          real _t39D1#1 = λ(T0[],T1[])<(T0 * T1)> (_t38C9,y3846);
          real _t39D7#1 = λ(T0[],T1[])<(T0 * T1)> (_t39D1,_t388A);
          real _t39EB#1 = λ(T0[],T1[])<(T0 * T1)> (_t39D7,_t38B6);
          real _t39EF#1 = λ(T0[],T1[])<(T0 * T1)> (_t29BA,y3846);
          real _t39F1#1 = λ(T0[],T1[])<(T0 * T1)> (_t39EF,z3848);
          real _t3A05#1 = λ(T0[],T1[])<(T0 * T1)> (_t39F1,_t3864);
          real _t3A07#2 = λ(T0[],T1[])<(T0 + T1)> (_t39EB,_t3A05);
          tensor[3] _t3A09#1 = <tensor[3]>[_t3929,_t39CB,_t3A07];
          int _t3A87#0 = 4;
          real _t3A89#1 = λ(T0[])<(T0)^4> (z3848);
          real _t3A8B#1 = λ(T0[],T1[])<(T0 * T1)> (_t38C9,_t3A89);
          real _t3A9F#1 = λ(T0[],T1[])<(T0 * T1)> (_t3A8B,_t38B6);
          real _t3AA1#1 = 0.1e2;
          real _t3AA7#1 = λ(T0[],T1[])<(T0 * T1)> (_t3AA1,_t3850);
          real _t3ABB#1 = λ(T0[],T1[])<(T0 * T1)> (_t3AA7,_t3864);
          real _t3ABD#1 = λ(T0[],T1[])<(T0 + T1)> (_t3A9F,_t3ABB);
          real _t3AD3#1 = λ(T0[],T1[])<(T0 * T1)> (_t384A,_t38B6);
          real _t3AD5#1 = λ(T0[],T1[])<(T0 + T1)> (_t3ABD,_t3AD3);
          tensor[3] _t3AD7#1 = <tensor[3]>[_t3965,_t3A07,_t3AD5];
          tensor[3,3] hess3AD9#1 = <tensor[3,3]>[_t3967,_t3A09,_t3AD7];
          (real[3] _t3ADD#1,tensor[3][3] evecs3ADE#0) = Eigen3x3(hess3AD9);
          real _t3AE2#1 = Subscript<real[3]>(_t3ADD,_t37E2);
          real _t3AE4#1 = λ(T0[])<Neg(T0)> (_t3AE2);
          real _t3AE6#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (g38BC);
          real _t3AE8#1 = λ(T0[],T1[])<(T0 + T1)> (fBias2954,_t3AE6);
          real str3AEA#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t3AE4,_t3AE8);
          bool _t3AEE#1 = GT<real>(str3AEA,fStrTh2956);
          if _t3AEE then goto ASSIGN3DD9 else goto JOIN3AF0
        ASSIGN3DD9:  preds = [COND3B07]
          bool _t3AF7#1 = GTE<real>(_t29AD,fMaskTh2955);
          if _t3AF7 then goto JOIN3AF9 else goto JOIN3AF9
        JOIN3AF9:  preds = [COND3B01,COND3B01]
          bool _t3AFD#1 = phi(birth37E0,vv2984)
          goto JOIN3AF0
        JOIN3AF0:  preds = [JOIN3AF9,COND3B07]
          bool _t3B03#1 = phi(_t3AFD,vv2984)
          goto JOIN3840
        JOIN3840:  preds = [JOIN3AF0,COND3B0D]
          bool _t3B09#1 = phi(_t3B03,vv2984)
          if _t3B09 then goto NEW3B11 else goto JOIN3B10
        NEW3B11:  preds = [COND3B17]
          new point(npos37DE,hh3725);
          int _t3B12#1 = 1;
          int born3B14#1 = IAdd(born352E,_t3B12);
          goto JOIN3B10
        JOIN3B10:  preds = [ASSIGN3B16,COND3B17]
          int born3B15#1 = phi(born3B14,born352E)
          goto JOIN381E
        JOIN381E:  preds = [JOIN3B10,COND3B19]
          int born3B18#1 = phi(born3B15,born352E)
          goto JOIN37CD
        JOIN37CD:  preds = [JOIN381E,JOIN3B53]
          int born3B1A#1 = phi(born3B18,born352E)
          goto JOIN3776
        JOIN3776:  preds = [JOIN37CD,COND3B85]
          int born3B84#1 = phi(born3B1A,born352E)
          goto JOIN373D
        JOIN373D:  preds = [JOIN3776,COND3B87]
          int born3B86#1 = phi(born3B84,born352E)
          goto JOIN2FB0
        COND3B37:  preds = [COND3B83]
          if _t3742 then goto ASSIGN3DA2 else goto JOIN3B21
        ASSIGN3DA2:  preds = [COND3B37]
          bool _t3B25#1 = GT<int>(iter2942,_t303B);
          if _t3B25 then goto ASSIGN3B2B else goto JOIN3B27
        ASSIGN3B2B:  preds = [COND3B31]
          int _t3B2A#1 = IMod(iter2942,pcp2947);
          bool _t3B2C#1 = EQ<int>(_t303B,_t3B2A);
          goto JOIN3B27
        JOIN3B27:  preds = [ASSIGN3DA3,COND3B31]
          bool _t3B2D#1 = phi(_t3B2C,vv2984)
          goto JOIN3B21
        JOIN3B21:  preds = [JOIN3B27,COND3B37]
          bool _t3B33#1 = phi(_t3B2D,vv2984)
          if _t3B33 then goto ASSIGN3B3A else goto JOIN3B38
        ASSIGN3B3A:  preds = [COND3B4E]
          int _t3B39#1 = IDiv(iter2942,pcp2947);
          int _t3B3B#2 = 2;
          int _t3B3D#1 = IMod(_t3B39,_t3B3B);
          int _t3B41#1 = IMul(_t3B3D,_t3B3B);
          int _t3B43#1 = 1;
          int _t3B45#1 = ISub(_t3B41,_t3B43);
          goto JOIN3B38
        JOIN3B38:  preds = [ASSIGN3B46,COND3B4E]
          int _t3B48#1 = phi(_t3B45,_t303B)
          bool _t3B51#1 = LT<int>(_t3B48,_t303B);
          if _t3B51 then goto ASSIGN3DA6 else goto JOIN3B53
        ASSIGN3DA6:  preds = [COND3B82]
          bool _t3B56#1 = GT<real>(newE35F9,_t29AD);
          if _t3B56 then goto ASSIGN3B5A else goto JOIN3B58
        ASSIGN3B5A:  preds = [COND3B81]
          bool _t3B59#1 = GT<int>(nn35F8,nnmax2944);
          if _t3B59 then goto ASSIGN3B5E else goto JOIN3B5B
        ASSIGN3B5E:  preds = [COND3B80]
          real _t3B5D#1 = TensorIndex<tensor[3],[0]>(pos3713);
          real _t3B5F#1 = urnd281A (_t3B5D);
          real _t3B61#1 = TensorIndex<tensor[3],[1]>(pos3713);
          real _t3B63#1 = urnd281A (_t3B61);
          real _t3B65#1 = λ(T0[],T1[])<(T0 + T1)> (_t3B5F,_t3B63);
          real _t3B67#1 = TensorIndex<tensor[3],[2]>(pos3713);
          real _t3B69#1 = urnd281A (_t3B67);
          real _t3B6B#1 = λ(T0[],T1[])<(T0 + T1)> (_t3B65,_t3B69);
          real _t3B6D#1 = 0.1e1;
          real _t3B6F#1 = MathFn<fmod>(_t3B6B,_t3B6D);
          int _t3B73#1 = ISub(nn35F8,nnmax2944);
          real _t3B75#1 = IntToReal(_t3B73);
          real _t3B79#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t3B75,_t366D);
          bool _t3B7B#1 = LT<real>(_t3B6F,_t3B79);
          if _t3B7B then goto DIE3B7E else goto JOIN3B7D
        DIE3B7E:  preds = [COND3B7F]
          die
          goto JOIN3B7D
        JOIN3B7D:  preds = [*DIE3B7E,COND3B7F]
          goto JOIN3B5B
        JOIN3B5B:  preds = [JOIN3B7D,COND3B80]
          goto JOIN3B58
        JOIN3B58:  preds = [JOIN3B5B,COND3B81]
          goto JOIN3B53
        JOIN3B53:  preds = [JOIN3B58,COND3B82]
          goto JOIN37CD
        ASSIGN36CC:  preds = [COND36CF]
          int _t36CB#1 = 1;
          bool _t36CD#1 = GT<int>(verb294A,_t36CB);
          goto JOIN36C7
        ASSIGN3683:  preds = [COND3686]
          int _t3682#1 = 1;
          bool _t3684#1 = GT<int>(verb294A,_t3682);
          goto JOIN367E
        ASSIGN35A8:  preds = [COND35AB]
          int _t35A7#1 = 1;
          bool _t35A9#1 = GT<int>(verb294A,_t35A7);
          goto JOIN35A3
        ASSIGN3541:  preds = [COND3544]
          int _t3540#1 = 1;
          bool _t3542#1 = GT<int>(verb294A,_t3540);
          goto JOIN353C
        ASSIGN3201:  preds = [COND3204]
          int _t3200#1 = 1;
          bool _t3202#1 = GT<int>(verb294A,_t3200);
          goto JOIN31FC
        ASSIGN2CB0:  preds = [COND2CB3]
          int _t2CAF#1 = 1;
          bool _t2CB1#1 = GT<int>(verb294A,_t2CAF);
          goto JOIN2CAB
        ASSIGN2999:  preds = [COND299C]
          int _t2998#1 = 1;
          bool _t299A#1 = GT<int>(verb294A,_t2998);
          goto JOIN2994
    end update
  end point
## initial strand creation
  COLLECTION
    ENTRY28DC:  preds = []
      tensor[3][] ipos28C8#2 = globals.ipos21E0;
      int _t28CA#1 = 0;
      int _t28CC#1 = Length<tensor[3]>(ipos28C8);
      int _t28CE#1 = 1;
      int _t28D0#1 = ISub(_t28CC,_t28CE);
      int[] _t28D2#1 = Range(_t28CA,_t28D0);
    FOREACH28D5:  preds = [ASSIGN28D3,NEXT28DB]
      foreach (ii28D4 in _t28D2) on exit goto RETURN28DD
      tensor[3] _t28D6#1 = Subscript<tensor[3][]>(ipos28C8,ii28D4);
      real _t28D8#1 = 0.1e1;
      new point(_t28D6,_t28D8);
      goto FOREACH28D5
    RETURN28DD:  preds = [FOREACH28D5]
      return
## global update
  ENTRY3C65:  preds = []
    real geoEps3B9E#3 = globals.geoEps21D7;
    real mvmtEps3B9D#3 = globals.mvmtEps21D8;
    real rpcEps3B9C#3 = globals.rpcEps21D9;
    real pchist3B9B#1 = globals.pchist2221;
    int iter3B9A#4 = globals.iter2222;
    real rpc3B99#1 = globals.rpc2223;
    int popLast3B98#1 = globals.popLast2224;
    int pop3BA6#5 = NumStrands<active>;
    bool _t3BA9#1 = NEQ<int>(pop3BA6,popLast3B98);
    if _t3BA9 then goto ASSIGN3BAE else goto ASSIGN3BB0
  ASSIGN3BAE:  preds = [COND3BB1]
    int _t3BAC#1 = 1;
    goto JOIN3BAB
  JOIN3BAB:  preds = [ASSIGN3BAE,ASSIGN3BB0]
    int _t3BAD#2 = phi(_t3BAC,_t3BAF)
    real _t3BB4#1 = IntToReal(_t3BAD);
    real rpc3BB6#5 = λ(T0[],T1[],T2[])<(T0 + (T2 * (T1) - (T0)))> (_t3BB4,rpc3B99,pchist3B9B);
    globals.rpc2223 = rpc3BB6;
    point[] P3BB9#6 = Strands<point,all>;
    (bool res3BBA#1) = all(MAP all2821 (P3BB9));
    real _t3BBF#1 = 0.1e3;
    (real res3BC2#1) = sum<real>(MAP mean282F (P3BB9));
    int num3BC5#1 = NumStrands<all>;
    real rNum3BC7#4 = IntToReal(num3BC5);
    real mean3BC9#1 = λ(T0[],T1[])<(T0) / ( T1)> (res3BC2,rNum3BC7);
    real percfound3BCB#1 = λ(T0[],T1[])<(T0 * T1)> (_t3BBF,mean3BC9);
    (real res3BCE#1) = sum<real>(MAP mean2836 (P3BB9));
    real mean3BD5#3 = λ(T0[],T1[])<(T0) / ( T1)> (res3BCE,rNum3BC7);
    (real res3BDA#1) = sum<real>(MAP mean2843 (P3BB9,mean3BD5));
    real mean3BE1#1 = λ(T0[],T1[])<(T0) / ( T1)> (res3BDA,rNum3BC7);
    real _t3BE5#1 = λ(T0[])<Sqrt(T0)> (mean3BE1);
    real covcl3BE7#4 = λ(T0[],T1[])<(T0) / ( T1)> (_t3BE5,mean3BD5);
    (real res3BEA#4) = max<real>(MAP max284A (P3BB9));
    string _t3BEF#1 = "======= finished iter ";
    string _t3BF1#1 = " w/ ";
    string _t3BF3#3 = ")";
    string _t3BF5#1 = "; %found=";
    string _t3BF7#1 = "; mean(hh)=";
    (real res3BFA#1) = sum<real>(MAP mean2851 (P3BB9));
    real mean3C01#1 = λ(T0[],T1[])<(T0) / ( T1)> (res3BFA,rNum3BC7);
    string _t3C03#1 = "; mean(cl)=";
    string _t3C05#3 = "; COV(cl)=";
    string _t3C07#3 = "; max(mvmt)=";
    string _t3C09#1 = "; pc=";
    string _t3C0B#3 = "; rpc=";
    string _t3C0D#3 = "\n";
    Print<[string,int,string,int,string,string,real,string,real,string,real,string,real,string,real,string,int,string,real,string]>(_t3BEF,iter3B9A,_t3BF1,pop3BA6,_t3BF3,_t3BF5,percfound3BCB,_t3BF7,mean3C01,_t3C03,mean3BD5,_t3C05,covcl3BE7,_t3C07,res3BEA,_t3C09,_t3BAD,_t3C0B,rpc3BB6,_t3C0D);
    if res3BBA then goto ASSIGN3C14 else goto ASSIGN3C2A
  ASSIGN3C14:  preds = [COND3C2B]
    bool _t3C13#1 = LT<real>(covcl3BE7,geoEps3B9E);
    if _t3C13 then goto ASSIGN3DFB else goto ASSIGN3C24
  ASSIGN3DFB:  preds = [COND3C25]
    bool _t3C17#1 = LT<real>(res3BEA,mvmtEps3B9D);
    if _t3C17 then goto ASSIGN3C1C else goto ASSIGN3C1E
  ASSIGN3C1C:  preds = [COND3C1F]
    bool _t3C1A#1 = LT<real>(rpc3BB6,rpcEps3B9C);
    goto JOIN3C19
  JOIN3C19:  preds = [ASSIGN3C1C,ASSIGN3C1E]
    bool _t3C1B#1 = phi(_t3C1A,_t3C1D)
    goto JOIN3C15
  JOIN3C15:  preds = [JOIN3C19,ASSIGN3C24]
    bool _t3C21#1 = phi(_t3C1B,_t3C23)
    goto JOIN3C11
  JOIN3C11:  preds = [JOIN3C15,ASSIGN3C2A]
    bool _t3C27#1 = phi(_t3C21,_t3C29)
    if _t3C27 then goto ASSIGN3C2E else goto ASSIGN3C46
  ASSIGN3C2E:  preds = [COND3C5C]
    string _t3C2D#1 = "======= Stabilizing ";
    string _t3C31#1 = " (iter ";
    string _t3C37#3 = " < ";
    Print<[string,int,string,int,string,string,real,string,real,string,real,string,real,string,real,string,real,string]>(_t3C2D,pop3BA6,_t3C31,iter3B9A,_t3BF3,_t3C05,covcl3BE7,_t3C37,geoEps3B9E,_t3C07,res3BEA,_t3C37,mvmtEps3B9D,_t3C0B,rpc3BB6,_t3C37,rpcEps3B9C,_t3C0D);
    StabilizeAll;
    goto JOIN3C2C
  JOIN3C2C:  preds = [MASSIGN3C44,MASSIGN3DFC]
    int _t3C5D#1 = 1;
    int iter3C5F#1 = IAdd(iter3B9A,_t3C5D);
    globals.iter2222 = iter3C5F;
    globals.popLast2224 = pop3BA6;
    continue
  ASSIGN3C46:  preds = [COND3C5C]
    string _t3C45#1 = "======= Stabilizing ";
    string _t3C49#1 = " (iter ";
    string _t3C4F#3 = " > ";
    Print<[string,int,string,int,string,string,real,string,real,string,real,string,real,string,real,string,real,string]>(_t3C45,pop3BA6,_t3C49,iter3B9A,_t3BF3,_t3C05,covcl3BE7,_t3C4F,geoEps3B9E,_t3C07,res3BEA,_t3C4F,mvmtEps3B9D,_t3C0B,rpc3BB6,_t3C4F,rpcEps3B9C,_t3C0D);
    goto JOIN3C2C
  ASSIGN3C1E:  preds = [COND3C1F]
    bool _t3C1D#1 = false;
    goto JOIN3C19
  ASSIGN3C24:  preds = [COND3C25]
    bool _t3C23#1 = false;
    goto JOIN3C15
  ASSIGN3C2A:  preds = [COND3C2B]
    bool _t3C29#1 = false;
    goto JOIN3C11
  ASSIGN3BB0:  preds = [COND3BB1]
    int _t3BAF#1 = 0;
    goto JOIN3BAB
#### end program ####
##### high-ir: after normalization rewriting ####
## properties
  GlobalInit StabilizeAll GlobalReduce StrandSets GlobalUpdate NewStrands StrandCommunication StrandsMayDie HasInputs HasGlobals ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
## globals
  input meshData21C9 (meshData) = <no-default>
  input 0space07C6_intermedateGlobal21CA (space) = <no-default>
  input 0data07C8_intermedateGlobal21CB (data) = <no-default>
  input fStrTh21CC (fStrTh) = <no-default>
  input fMaskTh21CD (fMaskTh) = <default>
  input fBias21CE (fBias) = <default>
  input tipd21CF (tipd) = <default>
  input mabd21D0 (mabd) = <default>
  input travMax21D1 (travMax) = <default>
  input nfsMax21D2 (nfsMax) = <default>
  input gdeTest21D3 (gdeTest) = <default>
  input gdeBack21D4 (gdeBack) = <default>
  input gdeOppor21D5 (gdeOppor) = <default>
  input fsEps21D6 (fsEps) = <no-default>
  input geoEps21D7 (geoEps) = <default>
  input mvmtEps21D8 (mvmtEps) = <default>
  input rpcEps21D9 (rpcEps) = <default>
  input pcmvEps21DA (pcmvEps) = <default>
  input isoval21DB (isoval) = <default>
  input verb21DC (verb) = <default>
  input sfs21DD (sfs) = <default>
  input hist21DE (hist) = <default>
  input pcp21DF (pcp) = <default>
  input ipos21E0 (ipos) = <no-default>
  input fDim21E1 (fDim) = <default>
  global int nnmin221D
  global int nnmax221E
  global real rad2220
  global real pchist2221
  varying global int iter2222
  varying global real rpc2223
  varying global int popLast2224
## functions
  function real mean2851 (point P284B#1) {
    ENTRY2850:  preds = []
      real _t284C#1 = P284B.hh;
      return _t284C
}
  function real max284A (point P2844#1) {
    ENTRY2849:  preds = []
      real _t2845#1 = P2844.mvmt;
      return _t2845
}
  function real mean2843 (point P2837#1, real meancl2838#1) {
    ENTRY2842:  preds = []
      real _t2839#1 = P2837.closest;
      real _t283F#1 = λ(T0[],T1[])<((T0) - (T1))^2> (_t2839,meancl2838);
      return _t283F
}
  function real mean2836 (point P2830#1) {
    ENTRY2835:  preds = []
      real _t2831#1 = P2830.closest;
      return _t2831
}
  function real mean282F (point P2822#1) {
    ENTRY282E:  preds = []
      bool _t2824#1 = P2822.found;
      if _t2824 then goto ASSIGN2829 else goto ASSIGN282B
    ASSIGN2829:  preds = [COND282C]
      real _t2827#1 = 0.1e1;
      goto JOIN2826
    JOIN2826:  preds = [ASSIGN2829,ASSIGN282B]
      real _t2828#1 = phi(_t2827,_t282A)
      return _t2828
    ASSIGN282B:  preds = [COND282C]
      real _t282A#1 = 0.e0;
      goto JOIN2826
}
  function bool all2821 (point P281B#1) {
    ENTRY2820:  preds = []
      bool _t281C#1 = P281B.found;
      return _t281C
}
  function int[2] nextCell42244 (int faceIdx2225#2, int cell2226#1, femData:Mesh mesh2227#1) {
    ENTRY2243:  preds = []
      int _t2228#3 = -1;
      bool _t222A#1 = EQ<int>(faceIdx2225,_t2228);
      if _t222A then goto ASSIGN3C6D else goto ASSIGN2235
    ASSIGN3C6D:  preds = [COND2241]
      int[2] _t2231#1 = <int[2]>{_t2228,_t2228};
      return _t2231
      goto JOIN222C
    JOIN222C:  preds = [*RETURN(_t2231)2233,*RETURN(_t223E)2240]
      unreachable
    ASSIGN2235:  preds = [COND2241]
      int _t2234#1 = 8;
      int _t2236#1 = IMul(cell2226,_t2234);
      int _t2238#1 = 2;
      int _t223A#1 = IMul(faceIdx2225,_t2238);
      int _t223C#1 = IAdd(_t2236,_t223A);
      int[2] _t223E#1 = ExtractFemItemN<[femData:Mesh,int],int[2],CellFaceCell(Mesh),0000,"",[],int>(mesh2227,_t223C);
      return _t223E
      goto JOIN222C
}
  function tensor[3] fStep2531 (tensor[3] s2245#3) {
    ENTRY2530:  preds = []
      real x2247#21 = TensorIndex<tensor[3],[0]>(s2245);
      real y2249#21 = TensorIndex<tensor[3],[1]>(s2245);
      real z224B#31 = TensorIndex<tensor[3],[2]>(s2245);
      real _t224D#7 = 0.2e1;
      int _t2251#2 = 2;
      real _t2269#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[])<(T0 * T1 * (T2)^2 * Cosine(((T1)^2 + (T4)^2 + (T2)^2)))> (_t224D,x2247,z224B,x2247,y2249,z224B);
      real _t2287#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[])<(T0 * T1 * (T2)^2 * Cosine(((T3)^2 + (T1)^2 + (T2)^2)))> (_t224D,y2249,z224B,x2247,y2249,z224B);
      real _t22BD#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[])<((T0 * (T1)^3 * Cosine(((T2)^2 + (T3)^2 + (T1)^2))) + (T0 * T1 * Sine(((T2)^2 + (T3)^2 + (T1)^2))))> (_t224D,z224B,x2247,y2249,z224B,_t224D,z224B,x2247,y2249,z224B);
      tensor[3] g22BF#1 = <tensor[3]>[_t2269,_t2287,_t22BD];
      int _t22CA#1 = -4;
      real _t22CC#6 = IntToReal(_t22CA);
      real _t230A#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[],T10[])<((T0 * (T1)^2 * (T2)^2 * Sine(((T1)^2 + (T4)^2 + (T2)^2))) + (T6 * (T2)^2 * Cosine(((T1)^2 + (T4)^2 + (T2)^2))))> (_t22CC,x2247,z224B,x2247,y2249,z224B,_t224D,z224B,x2247,y2249,z224B);
      real _t232C#2 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[])<(T0 * T1 * T2 * (T3)^2 * Sine(((T1)^2 + (T2)^2 + (T3)^2)))> (_t22CC,x2247,y2249,z224B,x2247,y2249,z224B);
      real _t234E#2 = 0.4e1;
      real _t2368#2 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[],T10[],T11[])<((T0 * T1 * (T2)^3 * Sine(((T1)^2 + (T4)^2 + (T2)^2))) + (T6 * T1 * T2 * Cosine(((T1)^2 + (T4)^2 + (T2)^2))))> (_t22CC,x2247,z224B,x2247,y2249,z224B,_t234E,x2247,z224B,x2247,y2249,z224B);
      tensor[3] _t236A#1 = <tensor[3]>[_t230A,_t232C,_t2368];
      real _t23CE#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[],T10[])<((T0 * (T1)^2 * (T2)^2 * Sine(((T3)^2 + (T1)^2 + (T2)^2))) + (T6 * (T2)^2 * Cosine(((T3)^2 + (T1)^2 + (T2)^2))))> (_t22CC,y2249,z224B,x2247,y2249,z224B,_t224D,z224B,x2247,y2249,z224B);
      real _t240A#2 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[],T10[],T11[])<((T0 * T1 * (T2)^3 * Sine(((T3)^2 + (T1)^2 + (T2)^2))) + (T6 * T1 * T2 * Cosine(((T3)^2 + (T1)^2 + (T2)^2))))> (_t22CC,y2249,z224B,x2247,y2249,z224B,_t234E,y2249,z224B,x2247,y2249,z224B);
      tensor[3] _t240C#1 = <tensor[3]>[_t232C,_t23CE,_t240A];
      real _t24A4#1 = 0.1e2;
      real _t24D8#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[],T10[],T11[],T12[],T13[])<((T0 * (T1)^4 * Sine(((T2)^2 + (T3)^2 + (T1)^2))) + (T5 * (T1)^2 * Cosine(((T2)^2 + (T3)^2 + (T1)^2))) + (T10 * Sine(((T2)^2 + (T3)^2 + (T1)^2))))> (_t22CC,z224B,x2247,y2249,z224B,_t24A4,z224B,x2247,y2249,z224B,_t224D,x2247,y2249,z224B);
      tensor[3] _t24DA#1 = <tensor[3]>[_t2368,_t240A,_t24D8];
      tensor[3,3] hess24DC#1 = <tensor[3,3]>[_t236A,_t240C,_t24DA];
      (real[3] evals24E1#1,tensor[3][3] E24E0#1) = Eigen3x3(hess24DC);
      real _t24E6#1 = 0.1e1;
      real _t24EA#1 = Subscript<real[3]>(evals24E1,_t2251);
      tensor[3] _t24F2#2 = Subscript<tensor[3][3]>(E24E0,_t2251);
      tensor[3] up24FC#4 = λ(T0[],T1[],T2[3],T3[3],T4[3])<Σ(i1=0..2)<((Neg((T0) / ( T1)) * T2_{i0} * T2_{i1} * T4_{i1}))>(i1=0..2)>_{3} (_t24E6,_t24EA,_t24F2,_t24F2,g22BF);
      real _t24FF#2 = TensorIndex<tensor[3],[0]>(up24FC);
      bool _t2503#1 = EQ<real>(_t24FF,_t24FF);
      bool _t2505#1 = BNot(_t2503);
      if _t2505 then goto ASSIGN250A else goto ASSIGN250D
    ASSIGN250A:  preds = [COND2523]
      bool _t2508#1 = true;
      goto JOIN2507
    JOIN2507:  preds = [ASSIGN250A,JOIN2514]
      bool _t2509#1 = phi(_t2508,_t2516)
      if _t2509 then goto ASSIGN2526 else goto JOIN2524
    ASSIGN2526:  preds = [COND252E]
      real _t2525#3 = +inf;
      tensor[3] _t252B#1 = <tensor[3]>[_t2525,_t2525,_t2525];
      return _t252B
      goto JOIN2524
    JOIN2524:  preds = [*RETURN(_t252B)252D,COND252E]
      return up24FC
    ASSIGN250D:  preds = [COND2523]
      real _t250C#2 = TensorIndex<tensor[3],[1]>(up24FC);
      bool _t2510#1 = EQ<real>(_t250C,_t250C);
      bool _t2512#1 = BNot(_t2510);
      if _t2512 then goto ASSIGN2517 else goto ASSIGN2519
    ASSIGN2517:  preds = [COND2520]
      bool _t2515#1 = true;
      goto JOIN2514
    JOIN2514:  preds = [ASSIGN2517,ASSIGN251F]
      bool _t2516#1 = phi(_t2515,_t251E)
      goto JOIN2507
    ASSIGN2519:  preds = [COND2520]
      real _t2518#2 = TensorIndex<tensor[3],[2]>(up24FC);
      bool _t251C#1 = EQ<real>(_t2518,_t2518);
      bool _t251E#1 = BNot(_t251C);
      goto JOIN2514
}
  function tensor[3,3] fPerp27E7 (tensor[3] s2532#3) {
    ENTRY27E6:  preds = []
      real x2534#16 = TensorIndex<tensor[3],[0]>(s2532);
      real y2536#16 = TensorIndex<tensor[3],[1]>(s2532);
      real z2538#23 = TensorIndex<tensor[3],[2]>(s2532);
      real _t253A#3 = 0.2e1;
      int _t253E#1 = 2;
      int _t25B7#1 = -4;
      real _t25B9#6 = IntToReal(_t25B7);
      real _t25F7#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[],T10[])<((T0 * (T1)^2 * (T2)^2 * Sine(((T1)^2 + (T4)^2 + (T2)^2))) + (T6 * (T2)^2 * Cosine(((T1)^2 + (T4)^2 + (T2)^2))))> (_t25B9,x2534,z2538,x2534,y2536,z2538,_t253A,z2538,x2534,y2536,z2538);
      real _t2619#2 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[])<(T0 * T1 * T2 * (T3)^2 * Sine(((T1)^2 + (T2)^2 + (T3)^2)))> (_t25B9,x2534,y2536,z2538,x2534,y2536,z2538);
      real _t263B#2 = 0.4e1;
      real _t2655#2 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[],T10[],T11[])<((T0 * T1 * (T2)^3 * Sine(((T1)^2 + (T4)^2 + (T2)^2))) + (T6 * T1 * T2 * Cosine(((T1)^2 + (T4)^2 + (T2)^2))))> (_t25B9,x2534,z2538,x2534,y2536,z2538,_t263B,x2534,z2538,x2534,y2536,z2538);
      tensor[3] _t2657#1 = <tensor[3]>[_t25F7,_t2619,_t2655];
      real _t26BB#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[],T10[])<((T0 * (T1)^2 * (T2)^2 * Sine(((T3)^2 + (T1)^2 + (T2)^2))) + (T6 * (T2)^2 * Cosine(((T3)^2 + (T1)^2 + (T2)^2))))> (_t25B9,y2536,z2538,x2534,y2536,z2538,_t253A,z2538,x2534,y2536,z2538);
      real _t26F7#2 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[],T10[],T11[])<((T0 * T1 * (T2)^3 * Sine(((T3)^2 + (T1)^2 + (T2)^2))) + (T6 * T1 * T2 * Cosine(((T3)^2 + (T1)^2 + (T2)^2))))> (_t25B9,y2536,z2538,x2534,y2536,z2538,_t263B,y2536,z2538,x2534,y2536,z2538);
      tensor[3] _t26F9#1 = <tensor[3]>[_t2619,_t26BB,_t26F7];
      real _t2791#1 = 0.1e2;
      real _t27C5#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[],T10[],T11[],T12[],T13[])<((T0 * (T1)^4 * Sine(((T2)^2 + (T3)^2 + (T1)^2))) + (T5 * (T1)^2 * Cosine(((T2)^2 + (T3)^2 + (T1)^2))) + (T10 * Sine(((T2)^2 + (T3)^2 + (T1)^2))))> (_t25B9,z2538,x2534,y2536,z2538,_t2791,z2538,x2534,y2536,z2538,_t253A,x2534,y2536,z2538);
      tensor[3] _t27C7#1 = <tensor[3]>[_t2655,_t26F7,_t27C5];
      tensor[3,3] hess27C9#1 = <tensor[3,3]>[_t2657,_t26F9,_t27C7];
      (real[3] evals27CE#0,tensor[3][3] _t27CD#1) = Eigen3x3(hess27C9);
      tensor[3] E227D2#6 = Subscript<tensor[3][3]>(_t27CD,_t253E);
      tensor[3,3] m27D8#1 = λ(T0[3],T1[3])<(δ_{i0,i1}) - ((T0_{i0} * T0_{i1}))>_{3 3} (E227D2,E227D2);
      real t27DA#2 = λ(T0[3],T1[3],T2[3],T3[3])<Σ(i0=0..2)(i1=0..2)<(((δ_{i0,i1}) - ((T0_{i0} * T0_{i1})) * (δ_{i0,i1}) - ((T0_{i0} * T0_{i1}))))>(i0=0..2)(i1=0..2)> (E227D2,E227D2,E227D2,E227D2);
      bool _t27DC#1 = EQ<real>(t27DA,t27DA);
      bool _t27DE#1 = BNot(_t27DC);
      if _t27DE then goto ASSIGN27E2 else goto JOIN27E0
    ASSIGN27E2:  preds = [COND27E4]
      tensor[3,3] _t27E1#1 = λ()<Z_{i0,i1}>_{3 3} ();
      return _t27E1
      goto JOIN27E0
    JOIN27E0:  preds = [*RETURN(_t27E1)27E3,COND27E4]
      return m27D8
}
  function real urnd281A (real x27E8#2) {
    ENTRY2819:  preds = []
      int iter27E9#1 = globals.iter2222;
      real _t27EB#2 = 0.e0;
      bool _t27ED#1 = EQ<real>(x27E8,_t27EB);
      if _t27ED then goto RETURN(_t27EB)3CC9 else goto JOIN27EF
    RETURN(_t27EB)3CC9:  preds = [COND27F3]
      return _t27EB
      goto JOIN27EF
    JOIN27EF:  preds = [*RETURN(_t27EB)3CC9,COND27F3]
      real _t27F4#1 = λ(T0[])<Abs(T0)> (x27E8);
      real l227F6#2 = MathFn<log2>(_t27F4);
      real _t27F8#2 = 0.2e1;
      real _t27FA#1 = MathFn<floor>(l227F6);
      real _t27FE#2 = 0.1e1;
      real _t2800#1 = λ(T0[],T1[],T2[])<((T0) - (T1)) - (T2)> (l227F6,_t27FA,_t27FE);
      real frxp2802#1 = MathFn<pow>(_t27F8,_t2800);
      int _t280A#1 = 2;
      int _t280C#1 = IMul(_t280A,iter27E9);
      real _t280E#1 = IntToReal(_t280C);
      real _t2812#1 = λ(T0[],T1[],T2[])<(T2 * ((T0)^20 + T1))> (_t27F8,_t280E,frxp2802);
      real _t2816#1 = MathFn<fmod>(_t2812,_t27FE);
      return _t2816
}
## input initialization
  ENTRY221B:  preds = []
    real fMaskTh21E2#3 = 0.e0;
    globals.fMaskTh21CD = fMaskTh21E2;
    globals.fBias21CE = fMaskTh21E2;
    real tipd21E8#1 = 0.1e1;
    globals.tipd21CF = tipd21E8;
    real mabd21EB#1 = 0.75e0;
    globals.mabd21D0 = mabd21EB;
    real travMax21EE#1 = 0.1e2;
    globals.travMax21D1 = travMax21EE;
    int nfsMax21F1#1 = 20;
    globals.nfsMax21D2 = nfsMax21F1;
    real gdeTest21F4#4 = 0.5e0;
    globals.gdeTest21D3 = gdeTest21F4;
    globals.gdeBack21D4 = gdeTest21F4;
    real gdeOppor21FA#1 = 0.12e1;
    globals.gdeOppor21D5 = gdeOppor21FA;
    real geoEps21FD#1 = 0.1e0;
    globals.geoEps21D7 = geoEps21FD;
    real mvmtEps2200#2 = 0.1e-1;
    globals.mvmtEps21D8 = mvmtEps2200;
    globals.rpcEps21D9 = mvmtEps2200;
    real pcmvEps2206#1 = 0.3e0;
    globals.pcmvEps21DA = pcmvEps2206;
    globals.isoval21DB = fMaskTh21E2;
    int verb220C#1 = 0;
    globals.verb21DC = verb220C;
    globals.sfs21DD = gdeTest21F4;
    globals.hist21DE = gdeTest21F4;
    int pcp2215#1 = 5;
    globals.pcp21DF = pcp2215;
    int fDim2218#1 = 2;
    globals.fDim21E1 = fDim2218;
    return
## global-variable initialization
  ENTRY28C6:  preds = []
    femData:Mesh meshData2856#2 = globals.meshData21C9;
    real tipd2855#1 = globals.tipd21CF;
    real hist2854#1 = globals.hist21DE;
    int pcp2853#1 = globals.pcp21DF;
    int fDim2852#3 = globals.fDim21E1;
    int _t285C#4 = 0;
    int _t285E#3 = 1;
    int _t2860#1 = ExtractFemItem<int,NumCell(Mesh)>(meshData2856);
    int _t2862#1 = ISub(_t2860,_t285E);
    int[] _t2864#1 = Range(_t285C,_t2862);
    femData:MeshCell[] _t2866#1 = <femData:MeshCell[]>{};
  FOREACH286A:  preds = [ASSIGN2867,NEXT286F]
    foreach (_t2868 in _t2864) on exit goto ASSIGN2872
      femData:MeshCell[] _t2869#1 = phi(_t2866,_t286D)
    femData:MeshCell _t286B#1 = LoadFem<femData:MeshCell>(meshData2856,_t2868);
    femData:MeshCell[] _t286D#1 = Append<femData:MeshCell>(_t2869,_t286B);
    goto FOREACH286A
  ASSIGN2872:  preds = [FOREACH286A]
    int _t2871#3 = 2;
    bool _t2873#2 = EQ<int>(_t2871,fDim2852);
    if _t2873 then goto ASSIGN2878 else goto ASSIGN3CCC
  ASSIGN2878:  preds = [COND2887]
    int _t2876#1 = 6;
    goto JOIN2875
  JOIN2875:  preds = [ASSIGN2878,JOIN287E]
    int _t2877#1 = phi(_t2876,_t2880)
    globals.nnmin221D = _t2877;
    if _t2873 then goto ASSIGN2893 else goto ASSIGN3CCE
  ASSIGN2893:  preds = [COND28A2]
    int _t2891#1 = 8;
    goto JOIN2890
  JOIN2890:  preds = [ASSIGN2893,JOIN2899]
    int _t2892#1 = phi(_t2891,_t289B)
    globals.nnmax221E = _t2892;
    real _t28A6#1 = 0.2e1;
    real _t28A8#1 = 0.3e1;
    real rad28AD#1 = λ(T0[],T1[],T2[])<((T0 * T2)) / ( T1)> (tipd2855,_t28A6,_t28A8);
    globals.rad2220 = rad28AD;
    real _t28B0#2 = 0.1e1;
    int _t28B4#1 = IMul(_t2871,pcp2853);
    real _t28B6#1 = IntToReal(_t28B4);
    real _t28B8#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t28B0,_t28B6);
    real pchist28BA#1 = MathFn<pow>(hist2854,_t28B8);
    globals.pchist2221 = pchist28BA;
    globals.iter2222 = _t285C;
    globals.rpc2223 = _t28B0;
    int popLast28C3#1 = -1;
    globals.popLast2224 = popLast28C3;
    return
  ASSIGN3CCE:  preds = [COND28A2]
    bool _t2897#1 = EQ<int>(_t285E,fDim2852);
    if _t2897 then goto ASSIGN289C else goto JOIN2899
  ASSIGN289C:  preds = [COND289F]
    int _t289A#1 = 3;
    goto JOIN2899
  JOIN2899:  preds = [ASSIGN289C,COND289F]
    int _t289B#1 = phi(_t289A,_t285C)
    goto JOIN2890
  ASSIGN3CCC:  preds = [COND2887]
    bool _t287C#1 = EQ<int>(_t285E,fDim2852);
    if _t287C then goto JOIN287E else goto JOIN287E
  JOIN287E:  preds = [COND2884,COND2884]
    int _t2880#1 = phi(_t2871,_t285C)
    goto JOIN2875
## strand
  strand point (tensor[3] p028DE#5, real hh028DF#1) in 3D
    state:
      output tensor[3] pos;
      output tensor[3] _pos;
      real ID;
      real hh;
      tensor[3] step;
      bool found;
      int nfs;
      real trav;
      real mvmt;
      real closest;
      int born;
      bool first;
    state init
      ENTRY2934:  preds = []
        real rad28E8#1 = globals.rad2220;
        real _t28FB#1 = 0.1e7;
        real _t28FE#1 = TensorIndex<tensor[3],[0]>(p028DE);
        real _t2900#1 = urnd281A (_t28FE);
        real _t2902#1 = TensorIndex<tensor[3],[1]>(p028DE);
        real _t2904#1 = urnd281A (_t2902);
        real _t2908#1 = TensorIndex<tensor[3],[2]>(p028DE);
        real _t290A#1 = urnd281A (_t2908);
        real _t290C#1 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (_t2900,_t2904,_t290A);
        real _t290E#2 = 0.1e1;
        real _t2910#1 = MathFn<fmod>(_t290C,_t290E);
        real _t2914#1 = λ(T0[],T1[])<(T0 * T1)> (_t28FB,_t2910);
        real _t2916#1 = MathFn<floor>(_t2914);
        real _t291E#4 = 0.e0;
        tensor[3] step2924#1 = <tensor[3]>[_t291E,_t291E,_t291E];
        bool found2926#1 = false;
        int nfs2928#2 = 0;
        bool first2932#1 = true;
        self.pos = p028DE;
        self._pos = p028DE;
        self.ID = _t2916;
        self.hh = hh028DF;
        self.step = step2924;
        self.found = found2926;
        self.nfs = nfs2928;
        self.trav = _t291E;
        self.mvmt = _t290E;
        self.closest = rad28E8;
        self.born = nfs2928;
        self.first = first2932;
        return
    end state init
    method update
        ENTRY3B8B:  preds = []
          real fStrTh2956#4 = globals.fStrTh21CC;
          real fMaskTh2955#4 = globals.fMaskTh21CD;
          real fBias2954#4 = globals.fBias21CE;
          real tipd2953#22 = globals.tipd21CF;
          real mabd2952#1 = globals.mabd21D0;
          real travMax2951#3 = globals.travMax21D1;
          int nfsMax2950#3 = globals.nfsMax21D2;
          real gdeTest294F#1 = globals.gdeTest21D3;
          real gdeBack294E#1 = globals.gdeBack21D4;
          real gdeOppor294D#1 = globals.gdeOppor21D5;
          real fsEps294C#3 = globals.fsEps21D6;
          real pcmvEps294B#1 = globals.pcmvEps21DA;
          int verb294A#16 = globals.verb21DC;
          real sfs2949#84 = globals.sfs21DD;
          real hist2948#2 = globals.hist21DE;
          int pcp2947#10 = globals.pcp21DF;
          int fDim2946#2 = globals.fDim21E1;
          int nnmin2945#3 = globals.nnmin221D;
          int nnmax2944#4 = globals.nnmax221E;
          real rad2943#31 = globals.rad2220;
          int iter2942#22 = globals.iter2222;
          tensor[3] pos296C#58 = self.pos;
          real ID296E#11 = self.ID;
          real hh296F#9 = self.hh;
          bool found2971#3 = self.found;
          int nfs2972#5 = self.nfs;
          real trav2973#5 = self.trav;
          real mvmt2974#5 = self.mvmt;
          real closest2975#1 = self.closest;
          int born2976#5 = self.born;
          bool first2977#1 = self.first;
          bool vv2984#45 = false;
          if first2977 then goto ASSIGN298A else goto JOIN2986
        ASSIGN298A:  preds = [COND29A9]
          int _t2989#1 = 0;
          bool _t298B#1 = GT<int>(verb294A,_t2989);
          if _t298B then goto JOIN298D else goto JOIN298D
        JOIN298D:  preds = [COND2993,COND2993]
          bool _t298F#1 = phi(vv2984,vv2984)
          if _t298F then goto ASSIGN2997 else goto ASSIGN2999
        ASSIGN2997:  preds = [COND299C]
          bool _t2995#1 = true;
          goto JOIN2994
        JOIN2994:  preds = [ASSIGN2997,ASSIGN299B]
          bool _t2996#1 = phi(_t2995,_t299A)
          if _t2996 then goto ASSIGN299F else goto JOIN299D
        ASSIGN299F:  preds = [COND29A8]
          string _t299E#1 = "(i#";
          string _t29A0#1 = " @ ";
          string _t29A2#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID296E,_t299E,iter2942,_t29A0,pos296C,_t29A2);
          string _t29A5#1 = " HELLO!\n";
          Print<[string]>(_t29A5);
          goto JOIN299D
        JOIN299D:  preds = [MASSIGN29A7,COND29A8]
          goto JOIN2986
        JOIN2986:  preds = [JOIN299D,COND29A9]
          real _t29AD#23 = 0.e0;
          tensor[3] _t29B3#5 = <tensor[3]>[_t29AD,_t29AD,_t29AD];
          real _t29B8#3 = λ(T0[3],T1[3])<Sqrt(Σ(i0=0..2)<(((T0_{i0}) - (T1_{i0}) * (T0_{i0}) - (T1_{i0})))>(i0=0..2))> (pos296C,_t29B3);
          real _t29BA#11 = 0.4e1;
          bool _t29BC#2 = LT<real>(_t29B8,_t29BA);
          if _t29BC then goto ASSIGN29C2 else goto JOIN29BE
        ASSIGN29C2:  preds = [COND29C8]
          real _t29C1#1 = 0.3e1;
          bool _t29C3#1 = GT<real>(_t29B8,_t29C1);
          goto JOIN29BE
        JOIN29BE:  preds = [ASSIGN3CDE,COND29C8]
          bool _t29C4#1 = phi(_t29C3,vv2984)
          if _t29C4 then goto ASSIGN29D0 else goto JOIN29CB
        ASSIGN29D0:  preds = [COND2C98]
          real x29CF#21 = TensorIndex<tensor[3],[0]>(pos296C);
          real y29D1#21 = TensorIndex<tensor[3],[1]>(pos296C);
          real z29D3#31 = TensorIndex<tensor[3],[2]>(pos296C);
          real _t29D5#7 = 0.2e1;
          int _t29D9#1 = 2;
          real _t29F1#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[])<(T0 * T1 * (T2)^2 * Cosine(((T1)^2 + (T4)^2 + (T2)^2)))> (_t29D5,x29CF,z29D3,x29CF,y29D1,z29D3);
          real _t2A0F#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[])<(T0 * T1 * (T2)^2 * Cosine(((T3)^2 + (T1)^2 + (T2)^2)))> (_t29D5,y29D1,z29D3,x29CF,y29D1,z29D3);
          real _t2A45#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[])<((T0 * (T1)^3 * Cosine(((T2)^2 + (T3)^2 + (T1)^2))) + (T0 * T1 * Sine(((T2)^2 + (T3)^2 + (T1)^2))))> (_t29D5,z29D3,x29CF,y29D1,z29D3,_t29D5,z29D3,x29CF,y29D1,z29D3);
          tensor[3] g2A47#1 = <tensor[3]>[_t29F1,_t2A0F,_t2A45];
          int _t2A52#1 = -4;
          real _t2A54#6 = IntToReal(_t2A52);
          real _t2A92#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[],T10[])<((T0 * (T1)^2 * (T2)^2 * Sine(((T1)^2 + (T4)^2 + (T2)^2))) + (T6 * (T2)^2 * Cosine(((T1)^2 + (T4)^2 + (T2)^2))))> (_t2A54,x29CF,z29D3,x29CF,y29D1,z29D3,_t29D5,z29D3,x29CF,y29D1,z29D3);
          real _t2AB4#2 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[])<(T0 * T1 * T2 * (T3)^2 * Sine(((T1)^2 + (T2)^2 + (T3)^2)))> (_t2A54,x29CF,y29D1,z29D3,x29CF,y29D1,z29D3);
          real _t2AF0#2 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[],T10[],T11[])<((T0 * T1 * (T2)^3 * Sine(((T1)^2 + (T4)^2 + (T2)^2))) + (T6 * T1 * T2 * Cosine(((T1)^2 + (T4)^2 + (T2)^2))))> (_t2A54,x29CF,z29D3,x29CF,y29D1,z29D3,_t29BA,x29CF,z29D3,x29CF,y29D1,z29D3);
          tensor[3] _t2AF2#1 = <tensor[3]>[_t2A92,_t2AB4,_t2AF0];
          real _t2B56#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[],T10[])<((T0 * (T1)^2 * (T2)^2 * Sine(((T3)^2 + (T1)^2 + (T2)^2))) + (T6 * (T2)^2 * Cosine(((T3)^2 + (T1)^2 + (T2)^2))))> (_t2A54,y29D1,z29D3,x29CF,y29D1,z29D3,_t29D5,z29D3,x29CF,y29D1,z29D3);
          real _t2B92#2 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[],T10[],T11[])<((T0 * T1 * (T2)^3 * Sine(((T3)^2 + (T1)^2 + (T2)^2))) + (T6 * T1 * T2 * Cosine(((T3)^2 + (T1)^2 + (T2)^2))))> (_t2A54,y29D1,z29D3,x29CF,y29D1,z29D3,_t29BA,y29D1,z29D3,x29CF,y29D1,z29D3);
          tensor[3] _t2B94#1 = <tensor[3]>[_t2AB4,_t2B56,_t2B92];
          real _t2C2C#1 = 0.1e2;
          real _t2C60#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[],T10[],T11[],T12[],T13[])<((T0 * (T1)^4 * Sine(((T2)^2 + (T3)^2 + (T1)^2))) + (T5 * (T1)^2 * Cosine(((T2)^2 + (T3)^2 + (T1)^2))) + (T10 * Sine(((T2)^2 + (T3)^2 + (T1)^2))))> (_t2A54,z29D3,x29CF,y29D1,z29D3,_t2C2C,z29D3,x29CF,y29D1,z29D3,_t29D5,x29CF,y29D1,z29D3);
          tensor[3] _t2C62#1 = <tensor[3]>[_t2AF0,_t2B92,_t2C60];
          tensor[3,3] hess2C64#1 = <tensor[3,3]>[_t2AF2,_t2B94,_t2C62];
          (real[3] _t2C68#1,tensor[3][3] evecs2C69#0) = Eigen3x3(hess2C64);
          real _t2C6D#1 = Subscript<real[3]>(_t2C68,_t29D9);
          real str2C75#1 = λ(T0[],T1[],T2[3])<(Neg(T0)) / ( (T1 + Sqrt(Σ(i0=0..2)<((T2_{i0} * T2_{i0}))>(i0=0..2))))> (_t2C6D,fBias2954,g2A47);
          bool _t2C79#1 = GT<real>(str2C75,fStrTh2956);
          if _t2C79 then goto ASSIGN3D0B else goto JOIN2C7B
        ASSIGN3D0B:  preds = [COND2C92]
          bool _t2C82#1 = GTE<real>(_t29AD,fMaskTh2955);
          if _t2C82 then goto ASSIGN2C86 else goto JOIN2C84
        ASSIGN2C86:  preds = [COND2C8C]
          bool _t2C85#1 = true;
          goto JOIN2C84
        JOIN2C84:  preds = [ASSIGN2C86,COND2C8C]
          bool _t2C88#1 = phi(_t2C85,vv2984)
          goto JOIN2C7B
        JOIN2C7B:  preds = [JOIN2C84,COND2C92]
          bool _t2C8E#1 = phi(_t2C88,vv2984)
          goto JOIN29CB
        JOIN29CB:  preds = [JOIN2C7B,COND2C98]
          bool _t2C94#1 = phi(_t2C8E,vv2984)
          bool _t2C9B#1 = BNot(_t2C94);
          if _t2C9B then goto ASSIGN2CA1 else goto JOIN2C9D
        ASSIGN2CA1:  preds = [COND2FA2]
          int _t2CA0#1 = 0;
          bool _t2CA2#1 = GT<int>(verb294A,_t2CA0);
          if _t2CA2 then goto JOIN2CA4 else goto JOIN2CA4
        JOIN2CA4:  preds = [COND2CAA,COND2CAA]
          bool _t2CA6#1 = phi(vv2984,vv2984)
          if _t2CA6 then goto ASSIGN2CAE else goto ASSIGN2CB0
        ASSIGN2CAE:  preds = [COND2CB3]
          bool _t2CAC#1 = true;
          goto JOIN2CAB
        JOIN2CAB:  preds = [ASSIGN2CAE,ASSIGN2CB2]
          bool _t2CAD#1 = phi(_t2CAC,_t2CB1)
          if _t2CAD then goto ASSIGN2CB6 else goto JOIN2CB4
        ASSIGN2CB6:  preds = [COND2FA0]
          string _t2CB5#1 = "(i#";
          string _t2CB7#1 = " @ ";
          string _t2CB9#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID296E,_t2CB5,iter2942,_t2CB7,pos296C,_t2CB9);
          string _t2CBC#1 = "!inside=";
          if _t29BC then goto ASSIGN2CD4 else goto JOIN2CD0
        ASSIGN2CD4:  preds = [COND2CDA]
          real _t2CD3#1 = 0.3e1;
          bool _t2CD5#1 = GT<real>(_t29B8,_t2CD3);
          goto JOIN2CD0
        JOIN2CD0:  preds = [ASSIGN3D0D,COND2CDA]
          bool _t2CD6#1 = phi(_t2CD5,vv2984)
          string _t2CDD#1 = " || fStrength=";
          real x2CE1#21 = TensorIndex<tensor[3],[0]>(pos296C);
          real y2CE3#21 = TensorIndex<tensor[3],[1]>(pos296C);
          real z2CE5#31 = TensorIndex<tensor[3],[2]>(pos296C);
          real _t2CE7#7 = 0.2e1;
          int _t2CEB#1 = 2;
          real _t2D03#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[])<(T0 * T1 * (T2)^2 * Cosine(((T1)^2 + (T4)^2 + (T2)^2)))> (_t2CE7,x2CE1,z2CE5,x2CE1,y2CE3,z2CE5);
          real _t2D21#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[])<(T0 * T1 * (T2)^2 * Cosine(((T3)^2 + (T1)^2 + (T2)^2)))> (_t2CE7,y2CE3,z2CE5,x2CE1,y2CE3,z2CE5);
          real _t2D57#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[])<((T0 * (T1)^3 * Cosine(((T2)^2 + (T3)^2 + (T1)^2))) + (T0 * T1 * Sine(((T2)^2 + (T3)^2 + (T1)^2))))> (_t2CE7,z2CE5,x2CE1,y2CE3,z2CE5,_t2CE7,z2CE5,x2CE1,y2CE3,z2CE5);
          tensor[3] g2D59#1 = <tensor[3]>[_t2D03,_t2D21,_t2D57];
          int _t2D64#1 = -4;
          real _t2D66#6 = IntToReal(_t2D64);
          real _t2DA4#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[],T10[])<((T0 * (T1)^2 * (T2)^2 * Sine(((T1)^2 + (T4)^2 + (T2)^2))) + (T6 * (T2)^2 * Cosine(((T1)^2 + (T4)^2 + (T2)^2))))> (_t2D66,x2CE1,z2CE5,x2CE1,y2CE3,z2CE5,_t2CE7,z2CE5,x2CE1,y2CE3,z2CE5);
          real _t2DC6#2 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[])<(T0 * T1 * T2 * (T3)^2 * Sine(((T1)^2 + (T2)^2 + (T3)^2)))> (_t2D66,x2CE1,y2CE3,z2CE5,x2CE1,y2CE3,z2CE5);
          real _t2E02#2 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[],T10[],T11[])<((T0 * T1 * (T2)^3 * Sine(((T1)^2 + (T4)^2 + (T2)^2))) + (T6 * T1 * T2 * Cosine(((T1)^2 + (T4)^2 + (T2)^2))))> (_t2D66,x2CE1,z2CE5,x2CE1,y2CE3,z2CE5,_t29BA,x2CE1,z2CE5,x2CE1,y2CE3,z2CE5);
          tensor[3] _t2E04#1 = <tensor[3]>[_t2DA4,_t2DC6,_t2E02];
          real _t2E68#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[],T10[])<((T0 * (T1)^2 * (T2)^2 * Sine(((T3)^2 + (T1)^2 + (T2)^2))) + (T6 * (T2)^2 * Cosine(((T3)^2 + (T1)^2 + (T2)^2))))> (_t2D66,y2CE3,z2CE5,x2CE1,y2CE3,z2CE5,_t2CE7,z2CE5,x2CE1,y2CE3,z2CE5);
          real _t2EA4#2 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[],T10[],T11[])<((T0 * T1 * (T2)^3 * Sine(((T3)^2 + (T1)^2 + (T2)^2))) + (T6 * T1 * T2 * Cosine(((T3)^2 + (T1)^2 + (T2)^2))))> (_t2D66,y2CE3,z2CE5,x2CE1,y2CE3,z2CE5,_t29BA,y2CE3,z2CE5,x2CE1,y2CE3,z2CE5);
          tensor[3] _t2EA6#1 = <tensor[3]>[_t2DC6,_t2E68,_t2EA4];
          real _t2F3E#1 = 0.1e2;
          real _t2F72#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[],T10[],T11[],T12[],T13[])<((T0 * (T1)^4 * Sine(((T2)^2 + (T3)^2 + (T1)^2))) + (T5 * (T1)^2 * Cosine(((T2)^2 + (T3)^2 + (T1)^2))) + (T10 * Sine(((T2)^2 + (T3)^2 + (T1)^2))))> (_t2D66,z2CE5,x2CE1,y2CE3,z2CE5,_t2F3E,z2CE5,x2CE1,y2CE3,z2CE5,_t2CE7,x2CE1,y2CE3,z2CE5);
          tensor[3] _t2F74#1 = <tensor[3]>[_t2E02,_t2EA4,_t2F72];
          tensor[3,3] hess2F76#1 = <tensor[3,3]>[_t2E04,_t2EA6,_t2F74];
          (real[3] _t2F7A#1,tensor[3][3] evecs2F7B#0) = Eigen3x3(hess2F76);
          real _t2F7F#1 = Subscript<real[3]>(_t2F7A,_t2CEB);
          real str2F87#1 = λ(T0[],T1[],T2[3])<(Neg(T0)) / ( (T1 + Sqrt(Σ(i0=0..2)<((T2_{i0} * T2_{i0}))>(i0=0..2))))> (_t2F7F,fBias2954,g2D59);
          string _t2F8B#1 = " <= fStrTh=";
          string _t2F8D#1 = " || fMask(pos)=";
          string _t2F94#1 = " < fMaskTh=";
          string _t2F96#1 = " || fTest(pos)=";
          bool _t2F99#1 = true;
          string _t2F9D#1 = " ==>DIE\n";
          Print<[string,bool,string,real,string,real,string,real,string,real,string,bool,string]>(_t2CBC,_t2CD6,_t2CDD,str2F87,_t2F8B,fStrTh2956,_t2F8D,_t29AD,_t2F94,fMaskTh2955,_t2F96,_t2F99,_t2F9D);
          goto JOIN2CB4
        JOIN2CB4:  preds = [MASSIGN3D39,COND2FA0]
          die
          goto JOIN2C9D
        JOIN2C9D:  preds = [*DIE2FA1,COND2FA2]
          bool _t2FA5#1 = GT<real>(travMax2951,_t29AD);
          if _t2FA5 then goto ASSIGN2FA9 else goto JOIN2FA7
        ASSIGN2FA9:  preds = [COND2FAD]
          bool _t2FA8#1 = GT<real>(trav2973,travMax2951);
          if _t2FA8 then goto DIE2FAB else goto JOIN2FAA
        DIE2FAB:  preds = [COND2FAC]
          die
          goto JOIN2FAA
        JOIN2FAA:  preds = [*DIE2FAB,COND2FAC]
          goto JOIN2FA7
        JOIN2FA7:  preds = [JOIN2FAA,COND2FAD]
          bool _t2FAE#1 = BNot(found2971);
          if _t2FAE then goto ASSIGN2FB2 else goto ASSIGN303C
        ASSIGN2FB2:  preds = [COND3B88]
          int _t2FB1#3 = 0;
          bool _t2FB3#1 = GT<int>(nfsMax2950,_t2FB1);
          if _t2FB3 then goto ASSIGN2FB7 else goto JOIN2FB5
        ASSIGN2FB7:  preds = [COND2FE5]
          bool _t2FB6#1 = GT<int>(nfs2972,nfsMax2950);
          if _t2FB6 then goto ASSIGN3DEA else goto JOIN2FB8
        ASSIGN3DEA:  preds = [COND2FE4]
          bool _t2FBD#1 = GT<int>(verb294A,_t2FB1);
          if _t2FBD then goto JOIN2FBF else goto JOIN2FBF
        JOIN2FBF:  preds = [COND2FC5,COND2FC5]
          bool _t2FC1#1 = phi(vv2984,vv2984)
          if _t2FC1 then goto ASSIGN2FC9 else goto ASSIGN2FCB
        ASSIGN2FC9:  preds = [COND2FCE]
          bool _t2FC7#1 = true;
          goto JOIN2FC6
        JOIN2FC6:  preds = [ASSIGN2FC9,ASSIGN2FCD]
          bool _t2FC8#1 = phi(_t2FC7,_t2FCC)
          if _t2FC8 then goto ASSIGN2FD1 else goto JOIN2FCF
        ASSIGN2FD1:  preds = [COND2FE2]
          string _t2FD0#1 = "(i#";
          string _t2FD2#1 = " @ ";
          string _t2FD4#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID296E,_t2FD0,iter2942,_t2FD2,pos296C,_t2FD4);
          string _t2FD7#1 = "nfs=";
          string _t2FD9#1 = " > nfsMax=";
          string _t2FDB#1 = " || trav=";
          string _t2FDD#1 = " > travMax=";
          string _t2FDF#1 = " =>DIE\n";
          Print<[string,int,string,int,string,real,string,real,string]>(_t2FD7,nfs2972,_t2FD9,nfsMax2950,_t2FDB,trav2973,_t2FDD,travMax2951,_t2FDF);
          goto JOIN2FCF
        JOIN2FCF:  preds = [MASSIGN2FE1,COND2FE2]
          die
          goto JOIN2FB8
        JOIN2FB8:  preds = [*DIE2FE3,COND2FE4]
          goto JOIN2FB5
        JOIN2FB5:  preds = [JOIN2FB8,COND2FE5]
          tensor[3] _t2FE6#4 = fStep2531 (pos296C);
          tensor[3] step2FE8#2 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs2949,_t2FE6);
          tensor[3] pos2FEB#2 = λ(T0[3],T1[],T2[3])<(T0_{i0} + (T1 * T2_{i0}))>_{3} (pos296C,sfs2949,_t2FE6);
          real mvmt2FF5#2 = λ(T0[],T1[3],T2[],T3[],T4[])<((Sqrt((T0 * T0 * Σ(i0=0..2)<((T1_{i0} * T1_{i0}))>(i0=0..2)))) / ( T2) + (T4 * (T3) - ((Sqrt((T0 * T0 * Σ(i0=0..2)<((T1_{i0} * T1_{i0}))>(i0=0..2)))) / ( T2))))> (sfs2949,_t2FE6,tipd2953,mvmt2974,hist2948);
          bool _t2FF8#1 = GT<real>(mvmt2FF5,fsEps294C);
          if _t2FF8 then goto ASSIGN3EBC else goto ASSIGN3009
        ASSIGN3EBC:  preds = [COND300F]
          real trav2FFF#1 = λ(T0[],T1[],T2[3],T3[])<(T0 + (Sqrt((T1 * T1 * Σ(i0=0..2)<((T2_{i0} * T2_{i0}))>(i0=0..2)))) / ( T3))> (trav2973,sfs2949,_t2FE6,tipd2953);
          int _t3002#1 = 1;
          int nfs3004#1 = IAdd(nfs2972,_t3002);
          goto JOIN2FFA
        JOIN2FFA:  preds = [ASSIGN3006,ASSIGN300C]
          real mvmt300B#2 = phi(mvmt2FF5,mvmt300A)
          real trav3000#1 = phi(trav2FFF,_t29AD)
          int nfs3005#1 = phi(nfs3004,nfs2972)
          bool found3008#2 = phi(found2971,found3007)
          bool _t3017#1 = GT<int>(verb294A,_t2FB1);
          if _t3017 then goto JOIN3019 else goto JOIN3019
        JOIN3019:  preds = [COND301F,COND301F]
          bool _t301B#1 = phi(vv2984,vv2984)
          if _t301B then goto ASSIGN3023 else goto ASSIGN3025
        ASSIGN3023:  preds = [COND3028]
          bool _t3021#1 = true;
          goto JOIN3020
        JOIN3020:  preds = [ASSIGN3023,ASSIGN3027]
          bool _t3022#1 = phi(_t3021,_t3026)
          if _t3022 then goto ASSIGN302B else goto JOIN3029
        ASSIGN302B:  preds = [COND303A]
          string _t302A#1 = "(i#";
          string _t302C#1 = " @ ";
          string _t302E#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID296E,_t302A,iter2942,_t302C,pos2FEB,_t302E);
          string _t3031#1 = "step=";
          string _t3033#1 = "; mvmt=";
          string _t3035#1 = " => found=";
          string _t3037#1 = "\n";
          Print<[string,tensor[3],string,real,string,bool,string]>(_t3031,step2FE8,_t3033,mvmt300B,_t3035,found3008,_t3037);
          goto JOIN3029
        JOIN3029:  preds = [MASSIGN3039,COND303A]
          goto JOIN2FB0
        JOIN2FB0:  preds = [JOIN3029,JOIN373D]
          int born3560#1 = phi(born2976,born3B86)
          real closest35E8#1 = phi(closest2975,closest35F7)
          real mvmt2FF6#1 = phi(mvmt300B,mvmt3735)
          real trav3012#1 = phi(trav3000,trav372F)
          int nfs3011#1 = phi(nfs3005,nfs2972)
          bool found3010#1 = phi(found3008,found2971)
          tensor[3] step2FE9#1 = phi(step2FE8,step3729)
          real hh357B#1 = phi(hh296F,hh3725)
          tensor[3] pos2FEC#2 = phi(pos2FEB,pos3713)
          self.pos = pos2FEC;
          self._pos = pos2FEC;
          self.hh = hh357B;
          self.step = step2FE9;
          self.found = found3010;
          self.nfs = nfs3011;
          self.trav = trav3012;
          self.mvmt = mvmt2FF6;
          self.closest = closest35E8;
          self.born = born3560;
          self.first = vv2984;
          active
        ASSIGN3025:  preds = [COND3028]
          int _t3024#1 = 1;
          bool _t3026#1 = GT<int>(verb294A,_t3024);
          goto JOIN3020
        ASSIGN3009:  preds = [COND300F]
          bool found3007#1 = true;
          real mvmt300A#1 = 0.1e1;
          goto JOIN2FFA
        ASSIGN2FCB:  preds = [COND2FCE]
          int _t2FCA#1 = 1;
          bool _t2FCC#1 = GT<int>(verb294A,_t2FCA);
          goto JOIN2FC6
        ASSIGN303C:  preds = [COND3B88]
          int _t303B#25 = 0;
          bool _t303D#1 = EQ<int>(_t303B,fDim2946);
          if _t303D then goto SAVE3041 else goto JOIN303F
        SAVE3041:  preds = [COND304C]
          self.pos = pos296C;
          stabilize
          goto JOIN303F
        JOIN303F:  preds = [*STABILIZE3040,COND304C]
          tensor[3] _t304D#51 = fStep2531 (pos296C);
          tensor[3] step304F#4 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs2949,_t304D);
          tensor[3] pos3051#17 = λ(T0[3],T1[],T2[3])<(T0_{i0} + (T1 * T2_{i0}))>_{3} (pos296C,sfs2949,_t304D);
          real trav3059#4 = λ(T0[],T1[],T2[3],T3[])<(T0 + (Sqrt((T1 * T1 * Σ(i0=0..2)<((T2_{i0} * T2_{i0}))>(i0=0..2)))) / ( T3))> (trav2973,sfs2949,_t304D,tipd2953);
          point[] _t3067#1 = SphereQuery<3,point>(pos3051,rad2943);
        FOREACH306D:  preds = [ASSIGN3D3B,NEXT314D]
          foreach (P3069 in _t3067) on exit goto ASSIGN3D3C
            int nn306C#3 = phi(_t303B,nn314B)
            tensor[3] force306B#9 = phi(_t29B3,force3147)
            real oldE306A#4 = phi(_t29AD,oldE30E1)
          tensor[3] _t306E#20 = P3069.pos;
          real _t3074#1 = λ(T0[3],T1[3],T2[],T3[3],T4[])<(Sqrt(Σ(i0=0..2)<(((T0_{i0}) - ((T1_{i0} + (T2 * T3_{i0}))) * (T0_{i0}) - ((T1_{i0} + (T2 * T3_{i0})))))>(i0=0..2))) / ( T4)> (_t306E,pos296C,sfs2949,_t304D,tipd2953);
          bool _t3076#1 = LT<real>(_t3074,fsEps294C);
          if _t3076 then goto ASSIGN307A else goto JOIN3078
        ASSIGN307A:  preds = [COND3080]
          real _t3079#1 = P3069.ID;
          bool _t307B#1 = LTE<real>(ID296E,_t3079);
          if _t307B then goto DIE307E else goto JOIN307D
        DIE307E:  preds = [COND307F]
          die
          goto JOIN307D
        JOIN307D:  preds = [*DIE307E,COND307F]
          goto JOIN3078
        JOIN3078:  preds = [JOIN307D,COND3080]
          real _t3084#3 = λ(T0[3],T1[3],T2[],T3[3],T4[])<(Sqrt(Σ(i0=0..2)<(((T0_{i0}) - ((T1_{i0} + (T2 * T3_{i0}))) * (T0_{i0}) - ((T1_{i0} + (T2 * T3_{i0})))))>(i0=0..2))) / ( T4)> (_t306E,pos296C,sfs2949,_t304D,rad2943);
          real _t3087#10 = 0.2e1;
          real _t3089#10 = 0.3e1;
          real _t308B#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t3087,_t3089);
          bool _t3096#2 = LT<real>(_t3084,_t308B);
          if _t3096 then goto ASSIGN309A else goto ASSIGN30B6
        ASSIGN309A:  preds = [COND30DC]
          real _t3099#1 = 0.1e1;
          real _t309B#1 = -0.5646e1;
          real _t309D#1 = 0.119835e2;
          real _t309F#1 = -0.113535e2;
          real _t30A1#1 = 0.40550625e1;
          real _t30B1#1 = λ(T0[],T1[3],T2[3],T3[],T4[3],T5[],T6[],T7[3],T8[3],T9[],T10[3],T11[],T12[],T13[3],T14[3],T15[],T16[3],T17[],T18[],T19[],T20[3],T21[3],T22[],T23[3],T24[])<(T0 + ((Sqrt(Σ(i0=0..2)<(((T1_{i0}) - ((T2_{i0} + (T3 * T4_{i0}))) * (T1_{i0}) - ((T2_{i0} + (T3 * T4_{i0})))))>(i0=0..2))) / ( T5) * (T6 + ((Sqrt(Σ(i0=0..2)<(((T1_{i0}) - ((T2_{i0} + (T3 * T4_{i0}))) * (T1_{i0}) - ((T2_{i0} + (T3 * T4_{i0})))))>(i0=0..2))) / ( T5) * (T12 + ((Sqrt(Σ(i0=0..2)<(((T1_{i0}) - ((T2_{i0} + (T3 * T4_{i0}))) * (T1_{i0}) - ((T2_{i0} + (T3 * T4_{i0})))))>(i0=0..2))) / ( T5) * (T18 + (T19 * (Sqrt(Σ(i0=0..2)<(((T1_{i0}) - ((T2_{i0} + (T3 * T4_{i0}))) * (T1_{i0}) - ((T2_{i0} + (T3 * T4_{i0})))))>(i0=0..2))) / ( T5)))))))))> (_t3099,_t306E,pos296C,sfs2949,_t304D,rad2943,_t309B,_t306E,pos296C,sfs2949,_t304D,rad2943,_t309D,_t306E,pos296C,sfs2949,_t304D,rad2943,_t309F,_t30A1,_t306E,pos296C,sfs2949,_t304D,rad2943);
          goto JOIN3098
        JOIN3098:  preds = [ASSIGN3ECD,JOIN30B9]
          real _t30B2#1 = phi(_t30B1,_t30D5)
          real oldE30E1#1 = λ(T0[],T1[])<(T0 + T1)> (oldE306A,_t30B2);
          if _t3096 then goto ASSIGN30FC else goto ASSIGN3112
        ASSIGN30FC:  preds = [COND3136]
          real _t30FB#1 = -0.5646e1;
          real _t30FD#1 = 0.23967e2;
          real _t30FF#1 = -0.340605e2;
          real _t3101#1 = 0.1622025e2;
          real _t310D#1 = λ(T0[],T1[3],T2[3],T3[],T4[3],T5[],T6[],T7[3],T8[3],T9[],T10[3],T11[],T12[],T13[],T14[3],T15[3],T16[],T17[3],T18[])<(T0 + ((Sqrt(Σ(i0=0..2)<(((T1_{i0}) - ((T2_{i0} + (T3 * T4_{i0}))) * (T1_{i0}) - ((T2_{i0} + (T3 * T4_{i0})))))>(i0=0..2))) / ( T5) * (T6 + ((Sqrt(Σ(i0=0..2)<(((T1_{i0}) - ((T2_{i0} + (T3 * T4_{i0}))) * (T1_{i0}) - ((T2_{i0} + (T3 * T4_{i0})))))>(i0=0..2))) / ( T5) * (T12 + (T13 * (Sqrt(Σ(i0=0..2)<(((T1_{i0}) - ((T2_{i0} + (T3 * T4_{i0}))) * (T1_{i0}) - ((T2_{i0} + (T3 * T4_{i0})))))>(i0=0..2))) / ( T5)))))))> (_t30FB,_t306E,pos296C,sfs2949,_t304D,rad2943,_t30FD,_t306E,pos296C,sfs2949,_t304D,rad2943,_t30FF,_t3101,_t306E,pos296C,sfs2949,_t304D,rad2943);
          goto JOIN30FA
        JOIN30FA:  preds = [ASSIGN3ED5,JOIN3115]
          real _t310E#1 = phi(_t310D,_t312F)
          real _t3139#1 = 0.1e1;
          tensor[3] force3147#1 = λ(T0[3],T1[],T2[],T3[],T4[3],T5[3],T6[],T7[3],T8[3],T9[3],T10[],T11[3])<(T0_{i0} + ((T1 * (T2) / ( T3) * (T4_{i0}) - ((T5_{i0} + (T6 * T7_{i0}))))) / ( Sqrt(Σ(i2=0..2)<(((T4_{i2}) - ((T5_{i2} + (T6 * T7_{i2}))) * (T4_{i2}) - ((T5_{i2} + (T6 * T7_{i2})))))>(i2=0..2))))>_{3} (force306B,_t310E,_t3139,rad2943,_t306E,pos296C,sfs2949,_t304D,_t306E,pos296C,sfs2949,_t304D);
          int _t3149#1 = 1;
          int nn314B#1 = IAdd(nn306C,_t3149);
          goto FOREACH306D
        ASSIGN3112:  preds = [COND3136]
          real _t3111#1 = 0.1e1;
          bool _t3113#1 = LT<real>(_t3084,_t3111);
          if _t3113 then goto ASSIGN3117 else goto JOIN3115
        ASSIGN3117:  preds = [COND3133]
          real _t3116#1 = 0.1234567901e-1;
          real _t311A#2 = 0.486e1;
          real _t311C#1 = -0.1458e2;
          real _t311E#1 = 0.1458e2;
          real _t312E#1 = λ(T0[],T1[],T2[3],T3[3],T4[],T5[3],T6[],T7[],T8[],T9[],T10[3],T11[3],T12[],T13[3],T14[],T15[],T16[],T17[],T18[3],T19[3],T20[],T21[3],T22[],T23[],T24[],T25[],T26[],T27[3],T28[3],T29[],T30[3],T31[],T32[])<(T0 * ((T1 * (Sqrt(Σ(i0=0..2)<(((T2_{i0}) - ((T3_{i0} + (T4 * T5_{i0}))) * (T2_{i0}) - ((T3_{i0} + (T4 * T5_{i0})))))>(i0=0..2))) / ( T6))) - (T7) * (T8 + (((T1 * (Sqrt(Σ(i0=0..2)<(((T2_{i0}) - ((T3_{i0} + (T4 * T5_{i0}))) * (T2_{i0}) - ((T3_{i0} + (T4 * T5_{i0})))))>(i0=0..2))) / ( T6))) - (T7) * (T16 + (((T1 * (Sqrt(Σ(i0=0..2)<(((T2_{i0}) - ((T3_{i0} + (T4 * T5_{i0}))) * (T2_{i0}) - ((T3_{i0} + (T4 * T5_{i0})))))>(i0=0..2))) / ( T6))) - (T7) * (T24) - ((T8 * ((T1 * (Sqrt(Σ(i0=0..2)<(((T2_{i0}) - ((T3_{i0} + (T4 * T5_{i0}))) * (T2_{i0}) - ((T3_{i0} + (T4 * T5_{i0})))))>(i0=0..2))) / ( T6))) - (T7))))))))> (_t3116,_t3089,_t306E,pos296C,sfs2949,_t304D,rad2943,_t3087,_t311A,_t3089,_t306E,pos296C,sfs2949,_t304D,rad2943,_t3087,_t311C,_t3089,_t306E,pos296C,sfs2949,_t304D,rad2943,_t3087,_t311E,_t311A,_t3089,_t306E,pos296C,sfs2949,_t304D,rad2943,_t3087);
          goto JOIN3115
        JOIN3115:  preds = [ASSIGN3EE1,COND3133]
          real _t312F#1 = phi(_t312E,_t29AD)
          goto JOIN30FA
        ASSIGN30B6:  preds = [COND30DC]
          real _t30B5#1 = 0.1e1;
          bool _t30B7#1 = LT<real>(_t3084,_t30B5);
          if _t30B7 then goto ASSIGN30BB else goto JOIN30B9
        ASSIGN30BB:  preds = [COND30D9]
          real _t30BA#1 = -0.1e-2;
          real _t30BC#1 = 0.9e-1;
          real _t30BE#1 = -0.54e0;
          real _t30C0#1 = 0.1215e1;
          real _t30C2#1 = 0.972e0;
          real _t30D4#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[3],T6[3],T7[],T8[3],T9[],T10[],T11[],T12[3],T13[3],T14[],T15[3],T16[],T17[],T18[],T19[3],T20[3],T21[],T22[3],T23[],T24[],T25[],T26[3],T27[3],T28[],T29[3],T30[],T31[],T32[],T33[3],T34[3],T35[],T36[3],T37[],T38[],T39[])<(T0 + ((T1 + ((T2 + ((T3) - ((T4 * ((Sqrt(Σ(i0=0..2)<(((T5_{i0}) - ((T6_{i0} + (T7 * T8_{i0}))) * (T5_{i0}) - ((T6_{i0} + (T7 * T8_{i0})))))>(i0=0..2))) / ( T9)) - ((T10) / ( T11)))) * ((Sqrt(Σ(i0=0..2)<(((T5_{i0}) - ((T6_{i0} + (T7 * T8_{i0}))) * (T5_{i0}) - ((T6_{i0} + (T7 * T8_{i0})))))>(i0=0..2))) / ( T9)) - ((T10) / ( T11)))) * ((Sqrt(Σ(i0=0..2)<(((T5_{i0}) - ((T6_{i0} + (T7 * T8_{i0}))) * (T5_{i0}) - ((T6_{i0} + (T7 * T8_{i0})))))>(i0=0..2))) / ( T9)) - ((T10) / ( T11)))) * ((Sqrt(Σ(i0=0..2)<(((T5_{i0}) - ((T6_{i0} + (T7 * T8_{i0}))) * (T5_{i0}) - ((T6_{i0} + (T7 * T8_{i0})))))>(i0=0..2))) / ( T9)) - ((T10) / ( T11)) * ((Sqrt(Σ(i0=0..2)<(((T5_{i0}) - ((T6_{i0} + (T7 * T8_{i0}))) * (T5_{i0}) - ((T6_{i0} + (T7 * T8_{i0})))))>(i0=0..2))) / ( T9)) - ((T10) / ( T11))))> (_t30BA,_t30BC,_t30BE,_t30C0,_t30C2,_t306E,pos296C,sfs2949,_t304D,rad2943,_t3087,_t3089,_t306E,pos296C,sfs2949,_t304D,rad2943,_t3087,_t3089,_t306E,pos296C,sfs2949,_t304D,rad2943,_t3087,_t3089,_t306E,pos296C,sfs2949,_t304D,rad2943,_t3087,_t3089,_t306E,pos296C,sfs2949,_t304D,rad2943,_t3087,_t3089);
          goto JOIN30B9
        JOIN30B9:  preds = [ASSIGN3EEA,COND30D9]
          real _t30D5#1 = phi(_t30D4,_t29AD)
          goto JOIN3098
        ASSIGN3D3C:  preds = [FOREACH306D]
          bool _t3150#1 = EQ<int>(_t303B,nn306C);
          if _t3150 then goto ASSIGN3D3D else goto JOIN3152
        ASSIGN3D3D:  preds = [COND355F]
          bool _t3158#1 = GT<int>(pcp2947,_t303B);
          if _t3158 then goto ASSIGN3D3E else goto JOIN315A
        ASSIGN3D3E:  preds = [COND3170]
          bool _t315E#1 = GT<int>(iter2942,_t303B);
          if _t315E then goto ASSIGN3164 else goto JOIN3160
        ASSIGN3164:  preds = [COND316A]
          int _t3163#1 = IMod(iter2942,pcp2947);
          bool _t3165#1 = EQ<int>(_t303B,_t3163);
          goto JOIN3160
        JOIN3160:  preds = [ASSIGN3D3F,COND316A]
          bool _t3166#1 = phi(_t3165,vv2984)
          goto JOIN315A
        JOIN315A:  preds = [JOIN3160,COND3170]
          bool _t316C#1 = phi(_t3166,vv2984)
          if _t316C then goto ASSIGN3173 else goto JOIN3171
        ASSIGN3173:  preds = [COND3187]
          int _t3172#1 = IDiv(iter2942,pcp2947);
          int _t3174#2 = 2;
          int _t3176#1 = IMod(_t3172,_t3174);
          int _t317A#1 = IMul(_t3176,_t3174);
          int _t317C#1 = 1;
          int _t317E#1 = ISub(_t317A,_t317C);
          goto JOIN3171
        JOIN3171:  preds = [ASSIGN317F,COND3187]
          int _t3181#1 = phi(_t317E,_t303B)
          bool _t318A#1 = GT<int>(_t3181,_t303B);
          if _t318A then goto ASSIGN318F else goto JOIN318C
        ASSIGN318F:  preds = [COND3192]
          bool _t318D#1 = LT<int>(born2976,nnmax2944);
          goto JOIN318C
        JOIN318C:  preds = [ASSIGN318F,COND3192]
          bool _t318E#1 = phi(_t318D,vv2984)
          bool _t3193#1 = BNot(_t318E);
          if _t3193 then goto SAVE3197 else goto JOIN3195
        SAVE3197:  preds = [COND31A2]
          self.pos = pos3051;
          self._pos = pos3051;
          self.step = step304F;
          self.trav = trav3059;
          active
          goto JOIN3195
        JOIN3195:  preds = [*ACTIVE3196,COND31A2]
          tensor[3,3] _t31A3#6 = fPerp27E7 (pos3051);
          tensor[3] _t31A9#2 = <tensor[3]>[tipd2953,_t29AD,_t29AD];
          tensor[3] noff031AB#1 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (_t31A3,_t31A9);
          tensor[3] _t31B3#2 = <tensor[3]>[_t29AD,tipd2953,_t29AD];
          tensor[3] noff131B5#1 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (_t31A3,_t31B3);
          tensor[3] _t31BD#2 = <tensor[3]>[_t29AD,_t29AD,tipd2953];
          tensor[3] noff231BF#1 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (_t31A3,_t31BD);
          real _t31C4#1 = λ(T0[3 3],T1[3])<Sqrt(Σ(i0=0..2)<((Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2) * Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)))>(i0=0..2))> (_t31A3,_t31A9);
          real _t31C6#1 = λ(T0[3 3],T1[3])<Sqrt(Σ(i0=0..2)<((Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2) * Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)))>(i0=0..2))> (_t31A3,_t31B3);
          bool _t31C8#1 = GT<real>(_t31C4,_t31C6);
          if _t31C8 then goto JOIN31CA else goto JOIN31CA
        JOIN31CA:  preds = [COND31D0,COND31D0]
          tensor[3] _t31CC#2 = phi(noff031AB,noff131B5)
          real _t31D4#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (_t31CC);
          real _t31D6#1 = λ(T0[3 3],T1[3])<Sqrt(Σ(i0=0..2)<((Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2) * Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)))>(i0=0..2))> (_t31A3,_t31BD);
          bool _t31D8#1 = GT<real>(_t31D4,_t31D6);
          if _t31D8 then goto JOIN31DA else goto JOIN31DA
        JOIN31DA:  preds = [COND31E0,COND31E0]
          tensor[3] _t31DC#4 = phi(_t31CC,noff231BF)
          tensor[3] npos31E7#1 = λ(T0[],T1[3],T2[3],T3[3],T4[],T5[3])<((T0 * T1_{i0} * (1) / ( Sqrt(Σ(i3=0..2)<((T1_{i3} * T1_{i3}))>(i3=0..2)))) + T3_{i0} + (T4 * T5_{i0}))>_{3} (tipd2953,_t31DC,_t31DC,pos296C,sfs2949,_t304D);
          tensor[3] _t31E9#1 = fStep2531 (npos31E7);
          tensor[3] npos31ED#5 = λ(T0[],T1[3],T2[3],T3[3],T4[],T5[3],T6[],T7[3])<((T0 * T1_{i0} * (1) / ( Sqrt(Σ(i4=0..2)<((T1_{i4} * T1_{i4}))>(i4=0..2)))) + T3_{i0} + (T4 * T5_{i0}) + (T4 * T7_{i0}))>_{3} (tipd2953,_t31DC,_t31DC,pos296C,sfs2949,_t304D,sfs2949,_t31E9);
          bool _t31F3#2 = GT<int>(verb294A,_t303B);
          if _t31F3 then goto JOIN31F5 else goto JOIN31F5
        JOIN31F5:  preds = [COND31FB,COND31FB]
          bool _t31F7#1 = phi(vv2984,vv2984)
          if _t31F7 then goto ASSIGN31FF else goto ASSIGN3201
        ASSIGN31FF:  preds = [COND3204]
          bool _t31FD#1 = true;
          goto JOIN31FC
        JOIN31FC:  preds = [ASSIGN31FF,ASSIGN3203]
          bool _t31FE#1 = phi(_t31FD,_t3202)
          if _t31FE then goto ASSIGN3207 else goto JOIN3205
        ASSIGN3207:  preds = [COND3234]
          string _t3206#1 = "(i#";
          string _t3208#1 = " @ ";
          string _t320A#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID296E,_t3206,iter2942,_t3208,pos3051,_t320A);
          string _t320D#1 = " 0==nn =>NEW(";
          string _t320F#1 = ") w/ ID=";
          real _t3212#1 = 0.1e7;
          real _t3215#1 = TensorIndex<tensor[3],[0]>(npos31ED);
          real _t3217#1 = urnd281A (_t3215);
          real _t3219#1 = TensorIndex<tensor[3],[1]>(npos31ED);
          real _t321B#1 = urnd281A (_t3219);
          real _t321F#1 = TensorIndex<tensor[3],[2]>(npos31ED);
          real _t3221#1 = urnd281A (_t321F);
          real _t3223#1 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (_t3217,_t321B,_t3221);
          real _t3225#1 = 0.1e1;
          real _t3227#1 = MathFn<fmod>(_t3223,_t3225);
          real _t322B#1 = λ(T0[],T1[])<(T0 * T1)> (_t3212,_t3227);
          real _t322D#1 = MathFn<floor>(_t322B);
          string _t3231#1 = "\n";
          Print<[string,tensor[3],string,real,string]>(_t320D,npos31ED,_t320F,_t322D,_t3231);
          goto JOIN3205
        JOIN3205:  preds = [MASSIGN3D4D,COND3234]
          real _t3243#2 = λ(T0[3],T1[],T2[3],T3[3])<Sqrt(Σ(i0=0..2)<((((T0_{i0} + (T1 * T2_{i0}))) - (T3_{i0}) * ((T0_{i0} + (T1 * T2_{i0}))) - (T3_{i0})))>(i0=0..2))> (pos296C,sfs2949,_t304D,_t29B3);
          bool _t3247#1 = LT<real>(_t3243,_t29BA);
          if _t3247 then goto ASSIGN324D else goto JOIN3249
        ASSIGN324D:  preds = [COND3253]
          real _t324C#1 = 0.3e1;
          bool _t324E#1 = GT<real>(_t3243,_t324C);
          goto JOIN3249
        JOIN3249:  preds = [ASSIGN3D50,COND3253]
          bool _t324F#1 = phi(_t324E,vv2984)
          if _t324F then goto ASSIGN325B else goto JOIN3256
        ASSIGN325B:  preds = [COND3523]
          real x325A#21 = TensorIndex<tensor[3],[0]>(pos3051);
          real y325C#21 = TensorIndex<tensor[3],[1]>(pos3051);
          real z325E#31 = TensorIndex<tensor[3],[2]>(pos3051);
          real _t3260#7 = 0.2e1;
          int _t3264#1 = 2;
          real _t327C#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[])<(T0 * T1 * (T2)^2 * Cosine(((T1)^2 + (T4)^2 + (T2)^2)))> (_t3260,x325A,z325E,x325A,y325C,z325E);
          real _t329A#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[])<(T0 * T1 * (T2)^2 * Cosine(((T3)^2 + (T1)^2 + (T2)^2)))> (_t3260,y325C,z325E,x325A,y325C,z325E);
          real _t32D0#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[])<((T0 * (T1)^3 * Cosine(((T2)^2 + (T3)^2 + (T1)^2))) + (T0 * T1 * Sine(((T2)^2 + (T3)^2 + (T1)^2))))> (_t3260,z325E,x325A,y325C,z325E,_t3260,z325E,x325A,y325C,z325E);
          tensor[3] g32D2#1 = <tensor[3]>[_t327C,_t329A,_t32D0];
          int _t32DD#1 = -4;
          real _t32DF#6 = IntToReal(_t32DD);
          real _t331D#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[],T10[])<((T0 * (T1)^2 * (T2)^2 * Sine(((T1)^2 + (T4)^2 + (T2)^2))) + (T6 * (T2)^2 * Cosine(((T1)^2 + (T4)^2 + (T2)^2))))> (_t32DF,x325A,z325E,x325A,y325C,z325E,_t3260,z325E,x325A,y325C,z325E);
          real _t333F#2 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[])<(T0 * T1 * T2 * (T3)^2 * Sine(((T1)^2 + (T2)^2 + (T3)^2)))> (_t32DF,x325A,y325C,z325E,x325A,y325C,z325E);
          real _t337B#2 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[],T10[],T11[])<((T0 * T1 * (T2)^3 * Sine(((T1)^2 + (T4)^2 + (T2)^2))) + (T6 * T1 * T2 * Cosine(((T1)^2 + (T4)^2 + (T2)^2))))> (_t32DF,x325A,z325E,x325A,y325C,z325E,_t29BA,x325A,z325E,x325A,y325C,z325E);
          tensor[3] _t337D#1 = <tensor[3]>[_t331D,_t333F,_t337B];
          real _t33E1#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[],T10[])<((T0 * (T1)^2 * (T2)^2 * Sine(((T3)^2 + (T1)^2 + (T2)^2))) + (T6 * (T2)^2 * Cosine(((T3)^2 + (T1)^2 + (T2)^2))))> (_t32DF,y325C,z325E,x325A,y325C,z325E,_t3260,z325E,x325A,y325C,z325E);
          real _t341D#2 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[],T10[],T11[])<((T0 * T1 * (T2)^3 * Sine(((T3)^2 + (T1)^2 + (T2)^2))) + (T6 * T1 * T2 * Cosine(((T3)^2 + (T1)^2 + (T2)^2))))> (_t32DF,y325C,z325E,x325A,y325C,z325E,_t29BA,y325C,z325E,x325A,y325C,z325E);
          tensor[3] _t341F#1 = <tensor[3]>[_t333F,_t33E1,_t341D];
          real _t34B7#1 = 0.1e2;
          real _t34EB#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[],T10[],T11[],T12[],T13[])<((T0 * (T1)^4 * Sine(((T2)^2 + (T3)^2 + (T1)^2))) + (T5 * (T1)^2 * Cosine(((T2)^2 + (T3)^2 + (T1)^2))) + (T10 * Sine(((T2)^2 + (T3)^2 + (T1)^2))))> (_t32DF,z325E,x325A,y325C,z325E,_t34B7,z325E,x325A,y325C,z325E,_t3260,x325A,y325C,z325E);
          tensor[3] _t34ED#1 = <tensor[3]>[_t337B,_t341D,_t34EB];
          tensor[3,3] hess34EF#1 = <tensor[3,3]>[_t337D,_t341F,_t34ED];
          (real[3] _t34F3#1,tensor[3][3] evecs34F4#0) = Eigen3x3(hess34EF);
          real _t34F8#1 = Subscript<real[3]>(_t34F3,_t3264);
          real str3500#1 = λ(T0[],T1[],T2[3])<(Neg(T0)) / ( (T1 + Sqrt(Σ(i0=0..2)<((T2_{i0} * T2_{i0}))>(i0=0..2))))> (_t34F8,fBias2954,g32D2);
          bool _t3504#1 = GT<real>(str3500,fStrTh2956);
          if _t3504 then goto ASSIGN3D7D else goto JOIN3506
        ASSIGN3D7D:  preds = [COND351D]
          bool _t350D#1 = GTE<real>(_t29AD,fMaskTh2955);
          if _t350D then goto ASSIGN3511 else goto JOIN350F
        ASSIGN3511:  preds = [COND3517]
          bool _t3510#1 = true;
          goto JOIN350F
        JOIN350F:  preds = [ASSIGN3511,COND3517]
          bool _t3513#1 = phi(_t3510,vv2984)
          goto JOIN3506
        JOIN3506:  preds = [JOIN350F,COND351D]
          bool _t3519#1 = phi(_t3513,vv2984)
          goto JOIN3256
        JOIN3256:  preds = [JOIN3506,COND3523]
          bool _t351F#1 = phi(_t3519,vv2984)
          if _t351F then goto NEW3527 else goto JOIN3526
        NEW3527:  preds = [COND352D]
          new point(npos31ED,hh296F);
          int _t3528#1 = 1;
          int born352A#1 = IAdd(born2976,_t3528);
          goto JOIN3526
        JOIN3526:  preds = [ASSIGN352C,COND352D]
          int born352B#1 = phi(born352A,born2976)
          if _t31F3 then goto JOIN3535 else goto JOIN3535
        JOIN3535:  preds = [COND353B,COND353B]
          bool _t3537#1 = phi(vv2984,vv2984)
          if _t3537 then goto ASSIGN353F else goto ASSIGN3541
        ASSIGN353F:  preds = [COND3544]
          bool _t353D#1 = true;
          goto JOIN353C
        JOIN353C:  preds = [ASSIGN353F,ASSIGN3543]
          bool _t353E#1 = phi(_t353D,_t3542)
          if _t353E then goto ASSIGN3547 else goto JOIN3545
        ASSIGN3547:  preds = [COND3552]
          string _t3546#1 = "(i#";
          string _t3548#1 = " @ ";
          string _t354A#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID296E,_t3546,iter2942,_t3548,pos3051,_t354A);
          string _t354D#1 = "nn=0; after birthing mvmt=";
          string _t354F#1 = "\n";
          Print<[string,real,string]>(_t354D,mvmt2974,_t354F);
          goto JOIN3545
        JOIN3545:  preds = [MASSIGN3551,COND3552]
          self.pos = pos3051;
          self._pos = pos3051;
          self.step = step304F;
          self.trav = trav3059;
          self.born = born352B;
          active
          goto JOIN3152
        JOIN3152:  preds = [*ACTIVE3553,COND355F]
          int born352E#9 = phi(born2976)
          tensor[3,3] _t3561#5 = fPerp27E7 (pos3051);
          tensor[3] es3565#1 = λ(T0[],T1[3 3],T2[3])<(T0 * Σ(i1=0..2)<((T1_{i0,i1} * T2_{i1}))>(i1=0..2))>_{3} (hh296F,_t3561,force306B);
          real _t3567#1 = λ(T0[],T1[3 3],T2[3])<Sqrt((T0 * T0 * Σ(i0=0..2)<((Σ(i1=0..2)<((T1_{i0,i1} * T2_{i1}))>(i1=0..2) * Σ(i1=0..2)<((T1_{i0,i1} * T2_{i1}))>(i1=0..2)))>(i0=0..2)))> (hh296F,_t3561,force306B);
          bool _t3569#1 = GT<real>(_t3567,tipd2953);
          if _t3569 then goto ASSIGN3F23 else goto JOIN356B
        ASSIGN3F23:  preds = [COND357A]
          real hh3570#1 = λ(T0[],T1[],T2[],T3[3 3],T4[3])<(T0 * (T1) / ( Sqrt((T0 * T0 * Σ(i0=0..2)<((Σ(i1=0..2)<((T3_{i0,i1} * T4_{i1}))>(i1=0..2) * Σ(i1=0..2)<((T3_{i0,i1} * T4_{i1}))>(i1=0..2)))>(i0=0..2)))))> (hh296F,tipd2953,hh296F,_t3561,force306B);
          tensor[3] es3577#1 = λ(T0[],T1[],T2[3 3],T3[3],T4[],T5[3 3],T6[3])<(T1 * (T0) / ( Sqrt((T1 * T1 * Σ(i1=0..2)<((Σ(i2=0..2)<((T2_{i1,i2} * T3_{i2}))>(i2=0..2) * Σ(i2=0..2)<((T2_{i1,i2} * T3_{i2}))>(i2=0..2)))>(i1=0..2)))) * Σ(i3=0..2)<((T2_{i0,i3} * T3_{i3}))>(i3=0..2))>_{3} (tipd2953,hh296F,_t3561,force306B,hh296F,_t3561,force306B);
          goto JOIN356B
        JOIN356B:  preds = [ASSIGN3F24,COND357A]
          tensor[3] es3578#25 = phi(es3577,es3565)
          real hh3571#2 = phi(hh3570,hh296F)
          tensor[3] _t357C#1 = λ(T0[3],T1[],T2[3],T3[3])<(T0_{i0} + (T1 * T2_{i0}) + T3_{i0})>_{3} (pos296C,sfs2949,_t304D,es3578);
          tensor[3] _t357E#23 = fStep2531 (_t357C);
          tensor[3] fs3580#2 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs2949,_t357E);
          real _t358A#1 = λ(T0[],T1[3],T2[],T3[],T4[3])<(Sqrt((T0 * T0 * Σ(i0=0..2)<((T1_{i0} * T1_{i0}))>(i0=0..2)))) / ( ((T2 * T3) + Sqrt(Σ(i0=0..2)<((T4_{i0} * T4_{i0}))>(i0=0..2))))> (sfs2949,_t357E,fsEps294C,tipd2953,es3578);
          real _t358C#3 = 0.5e0;
          bool _t358E#1 = GT<real>(_t358A,_t358C);
          if _t358E then goto ASSIGN3D81 else goto JOIN3590
        ASSIGN3D81:  preds = [COND35DC]
          real hh3593#2 = λ(T0[],T1[])<(T0 * T1)> (hh3571,_t358C);
          bool _t359A#1 = GT<int>(verb294A,_t303B);
          if _t359A then goto JOIN359C else goto JOIN359C
        JOIN359C:  preds = [COND35A2,COND35A2]
          bool _t359E#1 = phi(vv2984,vv2984)
          if _t359E then goto ASSIGN35A6 else goto ASSIGN35A8
        ASSIGN35A6:  preds = [COND35AB]
          bool _t35A4#1 = true;
          goto JOIN35A3
        JOIN35A3:  preds = [ASSIGN35A6,ASSIGN35AA]
          bool _t35A5#1 = phi(_t35A4,_t35A9)
          if _t35A5 then goto ASSIGN35AE else goto JOIN35AC
        ASSIGN35AE:  preds = [COND35CF]
          string _t35AD#1 = "(i#";
          string _t35AF#1 = " @ ";
          string _t35B1#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID296E,_t35AD,iter2942,_t35AF,pos3051,_t35B1);
          string _t35B4#1 = "nn=";
          string _t35B6#1 = "; |fs|/|es|=";
          real _t35BC#1 = λ(T0[],T1[3],T2[3])<(Sqrt((T0 * T0 * Σ(i0=0..2)<((T1_{i0} * T1_{i0}))>(i0=0..2)))) / ( Sqrt(Σ(i0=0..2)<((T2_{i0} * T2_{i0}))>(i0=0..2)))> (sfs2949,_t357E,es3578);
          string _t35BE#1 = " > 0.5; trying again with hh=";
          string _t35C0#1 = "; mvmt=";
          string _t35C2#3 = "\n";
          Print<[string,int,string,real,string,real,string,real,string]>(_t35B4,nn306C,_t35B6,_t35BC,_t35BE,hh3593,_t35C0,mvmt2974,_t35C2);
          string _t35C5#1 = "        fs=";
          Print<[string,tensor[3],string]>(_t35C5,fs3580,_t35C2);
          string _t35CA#1 = "        es=";
          Print<[string,tensor[3],string]>(_t35CA,es3578,_t35C2);
          goto JOIN35AC
        JOIN35AC:  preds = [MASSIGN3D85,COND35CF]
          self.pos = pos3051;
          self._pos = pos3051;
          self.hh = hh3593;
          self.step = step304F;
          self.trav = trav3059;
          self.born = born352E;
          active
          goto JOIN3590
        JOIN3590:  preds = [*ACTIVE35D0,COND35DC]
          real hh3594#2 = phi(hh3571)
          tensor[3] pos35E1#5 = λ(T0[3],T1[],T2[3],T3[],T4[3],T5[3])<(T0_{i0} + (T1 * T2_{i0}) + (T1 * T4_{i0}) + T5_{i0})>_{3} (pos296C,sfs2949,_t304D,sfs2949,_t357E,es3578);
          point[] _t35F4#1 = SphereQuery<3,point>(pos35E1,rad2943);
        FOREACH35FB:  preds = [ASSIGN3D87,NEXT366C]
          foreach (P35F6 in _t35F4) on exit goto ASSIGN366E
            tensor[3] mno35FA#9 = phi(_t29B3,mno3666)
            real newE35F9#6 = phi(_t29AD,newE3660)
            int nn35F8#9 = phi(_t303B,nn366A)
            real closest35F7#3 = phi(rad2943,closest3664)
          tensor[3] _t35FC#12 = P35F6.pos;
          real _t3601#1 = λ(T0[3],T1[3],T2[],T3[3],T4[],T5[3],T6[3])<Sqrt(Σ(i0=0..2)<(((T0_{i0}) - ((T1_{i0} + (T2 * T3_{i0}) + (T2 * T5_{i0}) + T6_{i0})) * (T0_{i0}) - ((T1_{i0} + (T2 * T3_{i0}) + (T2 * T5_{i0}) + T6_{i0}))))>(i0=0..2))> (_t35FC,pos296C,sfs2949,_t304D,sfs2949,_t357E,es3578);
          real _t3603#2 = λ(T0[3],T1[3],T2[],T3[3],T4[],T5[3],T6[3],T7[])<(Sqrt(Σ(i0=0..2)<(((T0_{i0}) - ((T1_{i0} + (T2 * T3_{i0}) + (T2 * T5_{i0}) + T6_{i0})) * (T0_{i0}) - ((T1_{i0} + (T2 * T3_{i0}) + (T2 * T5_{i0}) + T6_{i0}))))>(i0=0..2))) / ( T7)> (_t35FC,pos296C,sfs2949,_t304D,sfs2949,_t357E,es3578,rad2943);
          real _t3606#6 = 0.2e1;
          real _t3608#6 = 0.3e1;
          real _t360A#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t3606,_t3608);
          bool _t3615#1 = LT<real>(_t3603,_t360A);
          if _t3615 then goto ASSIGN3619 else goto ASSIGN3635
        ASSIGN3619:  preds = [COND365B]
          real _t3618#1 = 0.1e1;
          real _t361A#1 = -0.5646e1;
          real _t361C#1 = 0.119835e2;
          real _t361E#1 = -0.113535e2;
          real _t3620#1 = 0.40550625e1;
          real _t3630#1 = λ(T0[],T1[3],T2[3],T3[],T4[3],T5[],T6[3],T7[3],T8[],T9[],T10[3],T11[3],T12[],T13[3],T14[],T15[3],T16[3],T17[],T18[],T19[3],T20[3],T21[],T22[3],T23[],T24[3],T25[3],T26[],T27[],T28[],T29[3],T30[3],T31[],T32[3],T33[],T34[3],T35[3],T36[])<(T0 + ((Sqrt(Σ(i0=0..2)<(((T1_{i0}) - ((T2_{i0} + (T3 * T4_{i0}) + (T3 * T6_{i0}) + T7_{i0})) * (T1_{i0}) - ((T2_{i0} + (T3 * T4_{i0}) + (T3 * T6_{i0}) + T7_{i0}))))>(i0=0..2))) / ( T8) * (T9 + ((Sqrt(Σ(i0=0..2)<(((T1_{i0}) - ((T2_{i0} + (T3 * T4_{i0}) + (T3 * T6_{i0}) + T7_{i0})) * (T1_{i0}) - ((T2_{i0} + (T3 * T4_{i0}) + (T3 * T6_{i0}) + T7_{i0}))))>(i0=0..2))) / ( T8) * (T18 + ((Sqrt(Σ(i0=0..2)<(((T1_{i0}) - ((T2_{i0} + (T3 * T4_{i0}) + (T3 * T6_{i0}) + T7_{i0})) * (T1_{i0}) - ((T2_{i0} + (T3 * T4_{i0}) + (T3 * T6_{i0}) + T7_{i0}))))>(i0=0..2))) / ( T8) * (T27 + (T28 * (Sqrt(Σ(i0=0..2)<(((T1_{i0}) - ((T2_{i0} + (T3 * T4_{i0}) + (T3 * T6_{i0}) + T7_{i0})) * (T1_{i0}) - ((T2_{i0} + (T3 * T4_{i0}) + (T3 * T6_{i0}) + T7_{i0}))))>(i0=0..2))) / ( T8)))))))))> (_t3618,_t35FC,pos296C,sfs2949,_t304D,sfs2949,_t357E,es3578,rad2943,_t361A,_t35FC,pos296C,sfs2949,_t304D,sfs2949,_t357E,es3578,rad2943,_t361C,_t35FC,pos296C,sfs2949,_t304D,sfs2949,_t357E,es3578,rad2943,_t361E,_t3620,_t35FC,pos296C,sfs2949,_t304D,sfs2949,_t357E,es3578,rad2943);
          goto JOIN3617
        JOIN3617:  preds = [ASSIGN3F37,JOIN3638]
          real _t3631#1 = phi(_t3630,_t3654)
          real newE3660#1 = λ(T0[],T1[])<(T0 + T1)> (newE35F9,_t3631);
          real closest3664#1 = Min<real>(closest35F7,_t3601);
          tensor[3] mno3666#1 = λ(T0[3],T1[3],T2[3],T3[],T4[3],T5[],T6[3],T7[3])<(T0_{i0} + (T1_{i0}) - ((T2_{i0} + (T3 * T4_{i0}) + (T3 * T6_{i0}) + T7_{i0})))>_{3} (mno35FA,_t35FC,pos296C,sfs2949,_t304D,sfs2949,_t357E,es3578);
          int _t3668#1 = 1;
          int nn366A#1 = IAdd(nn35F8,_t3668);
          goto FOREACH35FB
        ASSIGN3635:  preds = [COND365B]
          real _t3634#1 = 0.1e1;
          bool _t3636#1 = LT<real>(_t3603,_t3634);
          if _t3636 then goto ASSIGN363A else goto JOIN3638
        ASSIGN363A:  preds = [COND3658]
          real _t3639#1 = -0.1e-2;
          real _t363B#1 = 0.9e-1;
          real _t363D#1 = -0.54e0;
          real _t363F#1 = 0.1215e1;
          real _t3641#1 = 0.972e0;
          real _t3653#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[3],T6[3],T7[],T8[3],T9[],T10[3],T11[3],T12[],T13[],T14[],T15[3],T16[3],T17[],T18[3],T19[],T20[3],T21[3],T22[],T23[],T24[],T25[3],T26[3],T27[],T28[3],T29[],T30[3],T31[3],T32[],T33[],T34[],T35[3],T36[3],T37[],T38[3],T39[],T40[3],T41[3],T42[],T43[],T44[],T45[3],T46[3],T47[],T48[3],T49[],T50[3],T51[3],T52[],T53[],T54[])<(T0 + ((T1 + ((T2 + ((T3) - ((T4 * ((Sqrt(Σ(i0=0..2)<(((T5_{i0}) - ((T6_{i0} + (T7 * T8_{i0}) + (T7 * T10_{i0}) + T11_{i0})) * (T5_{i0}) - ((T6_{i0} + (T7 * T8_{i0}) + (T7 * T10_{i0}) + T11_{i0}))))>(i0=0..2))) / ( T12)) - ((T13) / ( T14)))) * ((Sqrt(Σ(i0=0..2)<(((T5_{i0}) - ((T6_{i0} + (T7 * T8_{i0}) + (T7 * T10_{i0}) + T11_{i0})) * (T5_{i0}) - ((T6_{i0} + (T7 * T8_{i0}) + (T7 * T10_{i0}) + T11_{i0}))))>(i0=0..2))) / ( T12)) - ((T13) / ( T14)))) * ((Sqrt(Σ(i0=0..2)<(((T5_{i0}) - ((T6_{i0} + (T7 * T8_{i0}) + (T7 * T10_{i0}) + T11_{i0})) * (T5_{i0}) - ((T6_{i0} + (T7 * T8_{i0}) + (T7 * T10_{i0}) + T11_{i0}))))>(i0=0..2))) / ( T12)) - ((T13) / ( T14)))) * ((Sqrt(Σ(i0=0..2)<(((T5_{i0}) - ((T6_{i0} + (T7 * T8_{i0}) + (T7 * T10_{i0}) + T11_{i0})) * (T5_{i0}) - ((T6_{i0} + (T7 * T8_{i0}) + (T7 * T10_{i0}) + T11_{i0}))))>(i0=0..2))) / ( T12)) - ((T13) / ( T14)) * ((Sqrt(Σ(i0=0..2)<(((T5_{i0}) - ((T6_{i0} + (T7 * T8_{i0}) + (T7 * T10_{i0}) + T11_{i0})) * (T5_{i0}) - ((T6_{i0} + (T7 * T8_{i0}) + (T7 * T10_{i0}) + T11_{i0}))))>(i0=0..2))) / ( T12)) - ((T13) / ( T14))))> (_t3639,_t363B,_t363D,_t363F,_t3641,_t35FC,pos296C,sfs2949,_t304D,sfs2949,_t357E,es3578,rad2943,_t3606,_t3608,_t35FC,pos296C,sfs2949,_t304D,sfs2949,_t357E,es3578,rad2943,_t3606,_t3608,_t35FC,pos296C,sfs2949,_t304D,sfs2949,_t357E,es3578,rad2943,_t3606,_t3608,_t35FC,pos296C,sfs2949,_t304D,sfs2949,_t357E,es3578,rad2943,_t3606,_t3608,_t35FC,pos296C,sfs2949,_t304D,sfs2949,_t357E,es3578,rad2943,_t3606,_t3608);
          goto JOIN3638
        JOIN3638:  preds = [ASSIGN3F41,COND3658]
          real _t3654#1 = phi(_t3653,_t29AD)
          goto JOIN3617
        ASSIGN366E:  preds = [FOREACH35FB]
          real _t366D#9 = IntToReal(nn35F8);
          bool _t3675#2 = GT<int>(verb294A,_t303B);
          if _t3675 then goto JOIN3677 else goto JOIN3677
        JOIN3677:  preds = [COND367D,COND367D]
          bool _t3679#1 = phi(vv2984,vv2984)
          if _t3679 then goto ASSIGN3681 else goto ASSIGN3683
        ASSIGN3681:  preds = [COND3686]
          bool _t367F#1 = true;
          goto JOIN367E
        JOIN367E:  preds = [ASSIGN3681,ASSIGN3685]
          bool _t3680#1 = phi(_t367F,_t3684)
          if _t3680 then goto ASSIGN3689 else goto JOIN3687
        ASSIGN3689:  preds = [COND3698]
          string _t3688#1 = "(i#";
          string _t368A#1 = " @ ";
          string _t368C#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID296E,_t3688,iter2942,_t368A,pos35E1,_t368C);
          string _t368F#1 = "nn=";
          string _t3691#1 = "; oldE=";
          string _t3693#1 = " newE=";
          string _t3695#1 = "\n";
          Print<[string,int,string,real,string,real,string]>(_t368F,nn35F8,_t3691,oldE306A,_t3693,newE35F9,_t3695);
          goto JOIN3687
        JOIN3687:  preds = [MASSIGN3697,COND3698]
          real _t3699#2 = λ(T0[],T1[])<(T0) - (T1)> (newE35F9,oldE306A);
          tensor[3] _t369B#1 = λ(T0[3],T1[],T2[3],T3[],T4[3],T5[3],T6[3],T7[],T8[3])<((T0_{i0} + (T1 * T2_{i0}) + (T1 * T4_{i0}) + T5_{i0})) - ((T0_{i0} + (T1 * T2_{i0})))>_{3} (pos296C,sfs2949,_t304D,sfs2949,_t357E,es3578,pos296C,sfs2949,_t304D);
          real _t36A1#1 = λ(T0[],T1[3],T2[],T3[3],T4[],T5[3],T6[3],T7[3],T8[],T9[3],T10[3])<(T0 * Σ(i0=0..2)<((((T1_{i0} + (T2 * T3_{i0}) + (T2 * T5_{i0}) + T6_{i0})) - ((T1_{i0} + (T2 * T3_{i0}))) * Neg(T10_{i0})))>(i0=0..2))> (gdeTest294F,pos296C,sfs2949,_t304D,sfs2949,_t357E,es3578,pos296C,sfs2949,_t304D,force306B);
          bool _t36A3#1 = GT<real>(_t3699,_t36A1);
          if _t36A3 then goto ASSIGN36A8 else goto JOIN36A5
        ASSIGN36A8:  preds = [COND3724]
          real hh36A6#3 = λ(T0[],T1[])<(T0 * T1)> (hh3594,gdeBack294E);
          bool _t36AB#1 = EQ<real>(_t29AD,hh36A6);
          if _t36AB then goto ASSIGN36AF else goto JOIN36AD
        ASSIGN36AF:  preds = [COND36B9]
          string _t36AE#1 = "(i#";
          string _t36B0#1 = " @ ";
          string _t36B2#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID296E,_t36AE,iter2942,_t36B0,pos35E1,_t36B2);
          string _t36B5#1 = "backtracked all the way to hh=0\n";
          Print<[string]>(_t36B5);
          die
          goto JOIN36AD
        JOIN36AD:  preds = [*DIE36B8,COND36B9]
          if _t3675 then goto JOIN36C0 else goto JOIN36C0
        JOIN36C0:  preds = [COND36C6,COND36C6]
          bool _t36C2#1 = phi(vv2984,vv2984)
          if _t36C2 then goto ASSIGN36CA else goto ASSIGN36CC
        ASSIGN36CA:  preds = [COND36CF]
          bool _t36C8#1 = true;
          goto JOIN36C7
        JOIN36C7:  preds = [ASSIGN36CA,ASSIGN36CE]
          bool _t36C9#1 = phi(_t36C8,_t36CD)
          if _t36C9 then goto ASSIGN36D2 else goto JOIN36D0
        ASSIGN36D2:  preds = [COND3711]
          string _t36D1#1 = "(i#";
          string _t36D3#1 = " @ ";
          string _t36D5#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID296E,_t36D1,iter2942,_t36D3,pos35E1,_t36D5);
          string _t36D8#1 = "nn=";
          string _t36DA#1 = "; oldE=";
          string _t36DC#1 = " newE=";
          string _t36DE#1 = "; backtracking; hh=";
          string _t36E0#1 = "; mvmt=";
          string _t36E2#7 = "\n";
          Print<[string,int,string,real,string,real,string,real,string,real,string]>(_t36D8,nn35F8,_t36DA,oldE306A,_t36DC,newE35F9,_t36DE,hh36A6,_t36E0,mvmt2974,_t36E2);
          string _t36E5#1 = "      fs=";
          Print<[string,tensor[3],string]>(_t36E5,fs3580,_t36E2);
          string _t36EA#1 = "      es=";
          Print<[string,tensor[3],string]>(_t36EA,es3578,_t36E2);
          string _t36EF#1 = "      newE - oldE=";
          Print<[string,real,string]>(_t36EF,_t3699,_t36E2);
          string _t36F6#1 = "      force=";
          Print<[string,tensor[3],string]>(_t36F6,force306B,_t36E2);
          string _t36FB#1 = "      dpos=";
          Print<[string,tensor[3],string]>(_t36FB,_t369B,_t36E2);
          string _t3702#1 = "      0.5*(pos - oldpos).(-force)=";
          real _t370C#1 = λ(T0[],T1[3],T2[],T3[3],T4[],T5[3],T6[3],T7[3],T8[],T9[3],T10[3])<(T0 * Σ(i0=0..2)<((((T1_{i0} + (T2 * T3_{i0}) + (T2 * T5_{i0}) + T6_{i0})) - ((T1_{i0} + (T2 * T3_{i0}))) * Neg(T10_{i0})))>(i0=0..2))> (_t358C,pos296C,sfs2949,_t304D,sfs2949,_t357E,es3578,pos296C,sfs2949,_t304D,force306B);
          Print<[string,real,string]>(_t3702,_t370C,_t36E2);
          goto JOIN36D0
        JOIN36D0:  preds = [MASSIGN3D92,COND3711]
          self.pos = pos3051;
          self._pos = pos3051;
          self.hh = hh36A6;
          self.step = step304F;
          self.trav = trav3059;
          self.closest = closest35F7;
          self.born = born352E;
          active
          goto JOIN36A5
        JOIN36A5:  preds = [*ACTIVE3718,COND3724]
          real hh36A7#1 = phi(hh3594)
          tensor[3] pos3713#11 = phi(pos35E1)
          real hh3725#2 = λ(T0[],T1[])<(T0 * T1)> (hh36A7,gdeOppor294D);
          tensor[3] step3729#1 = λ(T0[],T1[3],T2[],T3[3],T4[3])<((T0 * T1_{i0}) + (T0 * T3_{i0}) + T4_{i0})>_{3} (sfs2949,_t304D,sfs2949,_t357E,es3578);
          real _t372D#1 = λ(T0[],T1[3],T2[],T3[3],T4[3],T5[])<(Sqrt(Σ(i0=0..2)<((((T0 * T1_{i0}) + (T0 * T3_{i0}) + T4_{i0}) * ((T0 * T1_{i0}) + (T0 * T3_{i0}) + T4_{i0})))>(i0=0..2))) / ( T5)> (sfs2949,_t304D,sfs2949,_t357E,es3578,tipd2953);
          real trav372F#1 = λ(T0[],T1[],T2[3],T3[],T4[],T5[3],T6[],T7[3],T8[3],T9[])<(T0 + (Sqrt((T1 * T1 * Σ(i0=0..2)<((T2_{i0} * T2_{i0}))>(i0=0..2)))) / ( T3) + (Sqrt(Σ(i0=0..2)<((((T1 * T2_{i0}) + (T1 * T7_{i0}) + T8_{i0}) * ((T1 * T2_{i0}) + (T1 * T7_{i0}) + T8_{i0})))>(i0=0..2))) / ( T3))> (trav2973,sfs2949,_t304D,tipd2953,sfs2949,_t304D,sfs2949,_t357E,es3578,tipd2953);
          real mvmt3735#1 = λ(T0[],T1[3],T2[],T3[3],T4[3],T5[],T6[],T7[])<((Sqrt(Σ(i0=0..2)<((((T0 * T1_{i0}) + (T0 * T3_{i0}) + T4_{i0}) * ((T0 * T1_{i0}) + (T0 * T3_{i0}) + T4_{i0})))>(i0=0..2))) / ( T5) + (T7 * (T6) - ((Sqrt(Σ(i0=0..2)<((((T0 * T1_{i0}) + (T0 * T3_{i0}) + T4_{i0}) * ((T0 * T1_{i0}) + (T0 * T3_{i0}) + T4_{i0})))>(i0=0..2))) / ( T5))))> (sfs2949,_t304D,sfs2949,_t357E,es3578,tipd2953,mvmt2974,hist2948);
          bool _t373B#1 = LT<real>(_t372D,pcmvEps294B);
          if _t373B then goto ASSIGN3D98 else goto JOIN373D
        ASSIGN3D98:  preds = [COND3B87]
          bool _t3742#3 = GT<int>(pcp2947,_t303B);
          if _t3742 then goto ASSIGN3D99 else goto JOIN3744
        ASSIGN3D99:  preds = [COND375A]
          bool _t3748#1 = GT<int>(iter2942,_t303B);
          if _t3748 then goto ASSIGN374E else goto JOIN374A
        ASSIGN374E:  preds = [COND3754]
          int _t374D#1 = IMod(iter2942,pcp2947);
          bool _t374F#1 = EQ<int>(_t303B,_t374D);
          goto JOIN374A
        JOIN374A:  preds = [ASSIGN3D9A,COND3754]
          bool _t3750#1 = phi(_t374F,vv2984)
          goto JOIN3744
        JOIN3744:  preds = [JOIN374A,COND375A]
          bool _t3756#1 = phi(_t3750,vv2984)
          if _t3756 then goto ASSIGN375D else goto JOIN375B
        ASSIGN375D:  preds = [COND3771]
          int _t375C#1 = IDiv(iter2942,pcp2947);
          int _t375E#2 = 2;
          int _t3760#1 = IMod(_t375C,_t375E);
          int _t3764#1 = IMul(_t3760,_t375E);
          int _t3766#1 = 1;
          int _t3768#1 = ISub(_t3764,_t3766);
          goto JOIN375B
        JOIN375B:  preds = [ASSIGN3769,COND3771]
          int _t376B#1 = phi(_t3768,_t303B)
          bool _t3774#1 = NEQ<int>(_t376B,_t303B);
          if _t3774 then goto COND3794 else goto JOIN3776
        COND3794:  preds = [COND3B85]
          if _t3742 then goto ASSIGN3D9D else goto JOIN377E
        ASSIGN3D9D:  preds = [COND3794]
          bool _t3782#1 = GT<int>(iter2942,_t303B);
          if _t3782 then goto ASSIGN3788 else goto JOIN3784
        ASSIGN3788:  preds = [COND378E]
          int _t3787#1 = IMod(iter2942,pcp2947);
          bool _t3789#1 = EQ<int>(_t303B,_t3787);
          goto JOIN3784
        JOIN3784:  preds = [ASSIGN3D9E,COND378E]
          bool _t378A#1 = phi(_t3789,vv2984)
          goto JOIN377E
        JOIN377E:  preds = [JOIN3784,COND3794]
          bool _t3790#1 = phi(_t378A,vv2984)
          if _t3790 then goto ASSIGN3797 else goto JOIN3795
        ASSIGN3797:  preds = [COND37AB]
          int _t3796#1 = IDiv(iter2942,pcp2947);
          int _t3798#2 = 2;
          int _t379A#1 = IMod(_t3796,_t3798);
          int _t379E#1 = IMul(_t379A,_t3798);
          int _t37A0#1 = 1;
          int _t37A2#1 = ISub(_t379E,_t37A0);
          goto JOIN3795
        JOIN3795:  preds = [ASSIGN37A3,COND37AB]
          int _t37A5#1 = phi(_t37A2,_t303B)
          bool _t37AE#1 = GT<int>(_t37A5,_t303B);
          if _t37AE then goto ASSIGN3DA1 else goto JOIN37B0
        ASSIGN3DA1:  preds = [COND37CC]
          bool _t37B4#1 = LT<real>(newE35F9,_t29AD);
          if _t37B4 then goto ASSIGN37B9 else goto JOIN37B6
        ASSIGN37B9:  preds = [COND37C6]
          bool _t37B8#1 = LT<int>(nn35F8,nnmin2945);
          if _t37B8 then goto ASSIGN37BD else goto JOIN37BA
        ASSIGN37BD:  preds = [COND37C0]
          bool _t37BB#1 = LT<int>(born352E,nnmax2944);
          goto JOIN37BA
        JOIN37BA:  preds = [ASSIGN37BD,COND37C0]
          bool _t37BC#1 = phi(_t37BB,vv2984)
          goto JOIN37B6
        JOIN37B6:  preds = [JOIN37BA,COND37C6]
          bool _t37C2#1 = phi(_t37BC,vv2984)
          goto JOIN37B0
        JOIN37B0:  preds = [JOIN37B6,COND37CC]
          bool _t37C8#1 = phi(_t37C2,vv2984)
          if _t37C8 then goto ASSIGN3F4E else goto COND3B37
        ASSIGN3F4E:  preds = [COND3B83]
          tensor[3] npos37D2#1 = λ(T0[3],T1[],T2[3],T3[],T4[3],T5[])<(T0_{i0}) - ((T1 * (T2_{i0}) / ( T3) * (1) / ( Sqrt(Σ(i3=0..2)<(((T2_{i3}) / ( T3) * (T2_{i3}) / ( T3)))>(i3=0..2)))))>_{3} (pos3713,tipd2953,mno35FA,_t366D,mno35FA,_t366D);
          tensor[3] _t37D4#3 = fStep2531 (npos37D2);
          tensor[3] npos37D8#1 = λ(T0[3],T1[],T2[3],T3[],T4[3],T5[],T6[],T7[3])<((T0_{i0}) - ((T1 * (T2_{i0}) / ( T3) * (1) / ( Sqrt(Σ(i4=0..2)<(((T2_{i4}) / ( T3) * (T2_{i4}) / ( T3)))>(i4=0..2))))) + (T6 * T7_{i0}))>_{3} (pos3713,tipd2953,mno35FA,_t366D,mno35FA,_t366D,sfs2949,_t37D4);
          tensor[3] _t37DA#2 = fStep2531 (npos37D8);
          tensor[3] npos37DE#5 = λ(T0[3],T1[],T2[3],T3[],T4[3],T5[],T6[],T7[3],T8[],T9[3])<((T0_{i0}) - ((T1 * (T2_{i0}) / ( T3) * (1) / ( Sqrt(Σ(i5=0..2)<(((T2_{i5}) / ( T3) * (T2_{i5}) / ( T3)))>(i5=0..2))))) + (T6 * T7_{i0}) + (T6 * T9_{i0}))>_{3} (pos3713,tipd2953,mno35FA,_t366D,mno35FA,_t366D,sfs2949,_t37D4,sfs2949,_t37DA);
          bool birth37E0#4 = true;
          int _t37E2#2 = 2;
          bool _t37E4#1 = EQ<int>(fDim2946,_t37E2);
          if _t37E4 then goto ASSIGN37E8 else goto JOIN37E6
        ASSIGN37E8:  preds = [COND381D]
          int _t37E7#1 = 4;
          bool _t37E9#1 = GTE<int>(nn35F8,_t37E7);
          if _t37E9 then goto ASSIGN37ED else goto JOIN37EB
        ASSIGN37ED:  preds = [COND381B]
          real _t37EC#1 = λ(T0[],T1[])<(T0 * T1)> (tipd2953,mabd2952);
          point[] _t37EE#1 = SphereQuery<3,point>(npos37DE,_t37EC);
        FOREACH37F1:  preds = [ASSIGN37EF,NEXT37F5]
          foreach (P37F0 in _t37EE) on exit goto COND381A
            bool birth37F3#2 = phi(birth37E0,vv2984)
          goto FOREACH37F1
        COND381A:  preds = [FOREACH37F1]
          if birth37F3 then goto ASSIGN37FA else goto JOIN37F7
        ASSIGN37FA:  preds = [COND381A]
          real _t37F9#1 = TensorIndex<tensor[3],[0]>(pos3713);
          real _t37FB#1 = urnd281A (_t37F9);
          real _t37FD#1 = TensorIndex<tensor[3],[1]>(pos3713);
          real _t37FF#1 = urnd281A (_t37FD);
          real _t3803#1 = TensorIndex<tensor[3],[2]>(pos3713);
          real _t3805#1 = urnd281A (_t3803);
          real _t3807#1 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (_t37FB,_t37FF,_t3805);
          real _t3809#1 = 0.1e1;
          real _t380B#1 = MathFn<fmod>(_t3807,_t3809);
          int _t380F#1 = ISub(nnmin2945,nn35F8);
          real _t3811#1 = IntToReal(_t380F);
          real _t3813#1 = IntToReal(nnmin2945);
          real _t3815#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t3811,_t3813);
          bool birth3817#1 = LT<real>(_t380B,_t3815);
          goto JOIN37F7
        JOIN37F7:  preds = [ASSIGN3DA9,COND381A]
          bool birth3818#1 = phi(birth3817,birth37F3)
          goto JOIN37EB
        JOIN37EB:  preds = [JOIN37F7,COND381B]
          bool birth37F6#1 = phi(birth3818,birth37E0)
          goto JOIN37E6
        JOIN37E6:  preds = [JOIN37EB,COND381D]
          bool birth381C#1 = phi(birth37F6,birth37E0)
          if birth381C then goto ASSIGN3F53 else goto JOIN381E
        ASSIGN3F53:  preds = [COND3B19]
          real _t382D#2 = λ(T0[3],T1[],T2[3],T3[],T4[3],T5[],T6[],T7[3],T8[],T9[3],T10[3])<Sqrt(Σ(i0=0..2)<(((((T0_{i0}) - ((T1 * (T2_{i0}) / ( T3) * (1) / ( Sqrt(Σ(i6=0..2)<(((T2_{i6}) / ( T3) * (T2_{i6}) / ( T3)))>(i6=0..2))))) + (T6 * T7_{i0}) + (T6 * T9_{i0}))) - (T10_{i0}) * (((T0_{i0}) - ((T1 * (T2_{i0}) / ( T3) * (1) / ( Sqrt(Σ(i6=0..2)<(((T2_{i6}) / ( T3) * (T2_{i6}) / ( T3)))>(i6=0..2))))) + (T6 * T7_{i0}) + (T6 * T9_{i0}))) - (T10_{i0})))>(i0=0..2))> (pos3713,tipd2953,mno35FA,_t366D,mno35FA,_t366D,sfs2949,_t37D4,sfs2949,_t37DA,_t29B3);
          bool _t3831#1 = LT<real>(_t382D,_t29BA);
          if _t3831 then goto ASSIGN3837 else goto JOIN3833
        ASSIGN3837:  preds = [COND383D]
          real _t3836#1 = 0.3e1;
          bool _t3838#1 = GT<real>(_t382D,_t3836);
          goto JOIN3833
        JOIN3833:  preds = [ASSIGN3DAC,COND383D]
          bool _t3839#1 = phi(_t3838,vv2984)
          if _t3839 then goto ASSIGN3845 else goto JOIN3840
        ASSIGN3845:  preds = [COND3B0D]
          real x3844#21 = TensorIndex<tensor[3],[0]>(npos37DE);
          real y3846#21 = TensorIndex<tensor[3],[1]>(npos37DE);
          real z3848#31 = TensorIndex<tensor[3],[2]>(npos37DE);
          real _t384A#7 = 0.2e1;
          real _t3866#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[])<(T0 * T1 * (T2)^2 * Cosine(((T1)^2 + (T4)^2 + (T2)^2)))> (_t384A,x3844,z3848,x3844,y3846,z3848);
          real _t3884#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[])<(T0 * T1 * (T2)^2 * Cosine(((T3)^2 + (T1)^2 + (T2)^2)))> (_t384A,y3846,z3848,x3844,y3846,z3848);
          real _t38BA#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[])<((T0 * (T1)^3 * Cosine(((T2)^2 + (T3)^2 + (T1)^2))) + (T0 * T1 * Sine(((T2)^2 + (T3)^2 + (T1)^2))))> (_t384A,z3848,x3844,y3846,z3848,_t384A,z3848,x3844,y3846,z3848);
          tensor[3] g38BC#1 = <tensor[3]>[_t3866,_t3884,_t38BA];
          int _t38C7#1 = -4;
          real _t38C9#6 = IntToReal(_t38C7);
          real _t3907#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[],T10[])<((T0 * (T1)^2 * (T2)^2 * Sine(((T1)^2 + (T4)^2 + (T2)^2))) + (T6 * (T2)^2 * Cosine(((T1)^2 + (T4)^2 + (T2)^2))))> (_t38C9,x3844,z3848,x3844,y3846,z3848,_t384A,z3848,x3844,y3846,z3848);
          real _t3929#2 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[])<(T0 * T1 * T2 * (T3)^2 * Sine(((T1)^2 + (T2)^2 + (T3)^2)))> (_t38C9,x3844,y3846,z3848,x3844,y3846,z3848);
          real _t3965#2 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[],T10[],T11[])<((T0 * T1 * (T2)^3 * Sine(((T1)^2 + (T4)^2 + (T2)^2))) + (T6 * T1 * T2 * Cosine(((T1)^2 + (T4)^2 + (T2)^2))))> (_t38C9,x3844,z3848,x3844,y3846,z3848,_t29BA,x3844,z3848,x3844,y3846,z3848);
          tensor[3] _t3967#1 = <tensor[3]>[_t3907,_t3929,_t3965];
          real _t39CB#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[],T10[])<((T0 * (T1)^2 * (T2)^2 * Sine(((T3)^2 + (T1)^2 + (T2)^2))) + (T6 * (T2)^2 * Cosine(((T3)^2 + (T1)^2 + (T2)^2))))> (_t38C9,y3846,z3848,x3844,y3846,z3848,_t384A,z3848,x3844,y3846,z3848);
          real _t3A07#2 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[],T10[],T11[])<((T0 * T1 * (T2)^3 * Sine(((T3)^2 + (T1)^2 + (T2)^2))) + (T6 * T1 * T2 * Cosine(((T3)^2 + (T1)^2 + (T2)^2))))> (_t38C9,y3846,z3848,x3844,y3846,z3848,_t29BA,y3846,z3848,x3844,y3846,z3848);
          tensor[3] _t3A09#1 = <tensor[3]>[_t3929,_t39CB,_t3A07];
          real _t3AA1#1 = 0.1e2;
          real _t3AD5#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[],T10[],T11[],T12[],T13[])<((T0 * (T1)^4 * Sine(((T2)^2 + (T3)^2 + (T1)^2))) + (T5 * (T1)^2 * Cosine(((T2)^2 + (T3)^2 + (T1)^2))) + (T10 * Sine(((T2)^2 + (T3)^2 + (T1)^2))))> (_t38C9,z3848,x3844,y3846,z3848,_t3AA1,z3848,x3844,y3846,z3848,_t384A,x3844,y3846,z3848);
          tensor[3] _t3AD7#1 = <tensor[3]>[_t3965,_t3A07,_t3AD5];
          tensor[3,3] hess3AD9#1 = <tensor[3,3]>[_t3967,_t3A09,_t3AD7];
          (real[3] _t3ADD#1,tensor[3][3] evecs3ADE#0) = Eigen3x3(hess3AD9);
          real _t3AE2#1 = Subscript<real[3]>(_t3ADD,_t37E2);
          real str3AEA#1 = λ(T0[],T1[],T2[3])<(Neg(T0)) / ( (T1 + Sqrt(Σ(i0=0..2)<((T2_{i0} * T2_{i0}))>(i0=0..2))))> (_t3AE2,fBias2954,g38BC);
          bool _t3AEE#1 = GT<real>(str3AEA,fStrTh2956);
          if _t3AEE then goto ASSIGN3DD9 else goto JOIN3AF0
        ASSIGN3DD9:  preds = [COND3B07]
          bool _t3AF7#1 = GTE<real>(_t29AD,fMaskTh2955);
          if _t3AF7 then goto JOIN3AF9 else goto JOIN3AF9
        JOIN3AF9:  preds = [COND3B01,COND3B01]
          bool _t3AFD#1 = phi(birth37E0,vv2984)
          goto JOIN3AF0
        JOIN3AF0:  preds = [JOIN3AF9,COND3B07]
          bool _t3B03#1 = phi(_t3AFD,vv2984)
          goto JOIN3840
        JOIN3840:  preds = [JOIN3AF0,COND3B0D]
          bool _t3B09#1 = phi(_t3B03,vv2984)
          if _t3B09 then goto NEW3B11 else goto JOIN3B10
        NEW3B11:  preds = [COND3B17]
          new point(npos37DE,hh3725);
          int _t3B12#1 = 1;
          int born3B14#1 = IAdd(born352E,_t3B12);
          goto JOIN3B10
        JOIN3B10:  preds = [ASSIGN3B16,COND3B17]
          int born3B15#1 = phi(born3B14,born352E)
          goto JOIN381E
        JOIN381E:  preds = [JOIN3B10,COND3B19]
          int born3B18#1 = phi(born3B15,born352E)
          goto JOIN37CD
        JOIN37CD:  preds = [JOIN381E,JOIN3B53]
          int born3B1A#1 = phi(born3B18,born352E)
          goto JOIN3776
        JOIN3776:  preds = [JOIN37CD,COND3B85]
          int born3B84#1 = phi(born3B1A,born352E)
          goto JOIN373D
        JOIN373D:  preds = [JOIN3776,COND3B87]
          int born3B86#1 = phi(born3B84,born352E)
          goto JOIN2FB0
        COND3B37:  preds = [COND3B83]
          if _t3742 then goto ASSIGN3DA2 else goto JOIN3B21
        ASSIGN3DA2:  preds = [COND3B37]
          bool _t3B25#1 = GT<int>(iter2942,_t303B);
          if _t3B25 then goto ASSIGN3B2B else goto JOIN3B27
        ASSIGN3B2B:  preds = [COND3B31]
          int _t3B2A#1 = IMod(iter2942,pcp2947);
          bool _t3B2C#1 = EQ<int>(_t303B,_t3B2A);
          goto JOIN3B27
        JOIN3B27:  preds = [ASSIGN3DA3,COND3B31]
          bool _t3B2D#1 = phi(_t3B2C,vv2984)
          goto JOIN3B21
        JOIN3B21:  preds = [JOIN3B27,COND3B37]
          bool _t3B33#1 = phi(_t3B2D,vv2984)
          if _t3B33 then goto ASSIGN3B3A else goto JOIN3B38
        ASSIGN3B3A:  preds = [COND3B4E]
          int _t3B39#1 = IDiv(iter2942,pcp2947);
          int _t3B3B#2 = 2;
          int _t3B3D#1 = IMod(_t3B39,_t3B3B);
          int _t3B41#1 = IMul(_t3B3D,_t3B3B);
          int _t3B43#1 = 1;
          int _t3B45#1 = ISub(_t3B41,_t3B43);
          goto JOIN3B38
        JOIN3B38:  preds = [ASSIGN3B46,COND3B4E]
          int _t3B48#1 = phi(_t3B45,_t303B)
          bool _t3B51#1 = LT<int>(_t3B48,_t303B);
          if _t3B51 then goto ASSIGN3DA6 else goto JOIN3B53
        ASSIGN3DA6:  preds = [COND3B82]
          bool _t3B56#1 = GT<real>(newE35F9,_t29AD);
          if _t3B56 then goto ASSIGN3B5A else goto JOIN3B58
        ASSIGN3B5A:  preds = [COND3B81]
          bool _t3B59#1 = GT<int>(nn35F8,nnmax2944);
          if _t3B59 then goto ASSIGN3B5E else goto JOIN3B5B
        ASSIGN3B5E:  preds = [COND3B80]
          real _t3B5D#1 = TensorIndex<tensor[3],[0]>(pos3713);
          real _t3B5F#1 = urnd281A (_t3B5D);
          real _t3B61#1 = TensorIndex<tensor[3],[1]>(pos3713);
          real _t3B63#1 = urnd281A (_t3B61);
          real _t3B67#1 = TensorIndex<tensor[3],[2]>(pos3713);
          real _t3B69#1 = urnd281A (_t3B67);
          real _t3B6B#1 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (_t3B5F,_t3B63,_t3B69);
          real _t3B6D#1 = 0.1e1;
          real _t3B6F#1 = MathFn<fmod>(_t3B6B,_t3B6D);
          int _t3B73#1 = ISub(nn35F8,nnmax2944);
          real _t3B75#1 = IntToReal(_t3B73);
          real _t3B79#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t3B75,_t366D);
          bool _t3B7B#1 = LT<real>(_t3B6F,_t3B79);
          if _t3B7B then goto DIE3B7E else goto JOIN3B7D
        DIE3B7E:  preds = [COND3B7F]
          die
          goto JOIN3B7D
        JOIN3B7D:  preds = [*DIE3B7E,COND3B7F]
          goto JOIN3B5B
        JOIN3B5B:  preds = [JOIN3B7D,COND3B80]
          goto JOIN3B58
        JOIN3B58:  preds = [JOIN3B5B,COND3B81]
          goto JOIN3B53
        JOIN3B53:  preds = [JOIN3B58,COND3B82]
          goto JOIN37CD
        ASSIGN36CC:  preds = [COND36CF]
          int _t36CB#1 = 1;
          bool _t36CD#1 = GT<int>(verb294A,_t36CB);
          goto JOIN36C7
        ASSIGN3683:  preds = [COND3686]
          int _t3682#1 = 1;
          bool _t3684#1 = GT<int>(verb294A,_t3682);
          goto JOIN367E
        ASSIGN35A8:  preds = [COND35AB]
          int _t35A7#1 = 1;
          bool _t35A9#1 = GT<int>(verb294A,_t35A7);
          goto JOIN35A3
        ASSIGN3541:  preds = [COND3544]
          int _t3540#1 = 1;
          bool _t3542#1 = GT<int>(verb294A,_t3540);
          goto JOIN353C
        ASSIGN3201:  preds = [COND3204]
          int _t3200#1 = 1;
          bool _t3202#1 = GT<int>(verb294A,_t3200);
          goto JOIN31FC
        ASSIGN2CB0:  preds = [COND2CB3]
          int _t2CAF#1 = 1;
          bool _t2CB1#1 = GT<int>(verb294A,_t2CAF);
          goto JOIN2CAB
        ASSIGN2999:  preds = [COND299C]
          int _t2998#1 = 1;
          bool _t299A#1 = GT<int>(verb294A,_t2998);
          goto JOIN2994
    end update
  end point
## initial strand creation
  COLLECTION
    ENTRY28DC:  preds = []
      tensor[3][] ipos28C8#2 = globals.ipos21E0;
      int _t28CA#1 = 0;
      int _t28CC#1 = Length<tensor[3]>(ipos28C8);
      int _t28CE#1 = 1;
      int _t28D0#1 = ISub(_t28CC,_t28CE);
      int[] _t28D2#1 = Range(_t28CA,_t28D0);
    FOREACH28D5:  preds = [ASSIGN28D3,NEXT28DB]
      foreach (ii28D4 in _t28D2) on exit goto RETURN28DD
      tensor[3] _t28D6#1 = Subscript<tensor[3][]>(ipos28C8,ii28D4);
      real _t28D8#1 = 0.1e1;
      new point(_t28D6,_t28D8);
      goto FOREACH28D5
    RETURN28DD:  preds = [FOREACH28D5]
      return
## global update
  ENTRY3C65:  preds = []
    real geoEps3B9E#3 = globals.geoEps21D7;
    real mvmtEps3B9D#3 = globals.mvmtEps21D8;
    real rpcEps3B9C#3 = globals.rpcEps21D9;
    real pchist3B9B#1 = globals.pchist2221;
    int iter3B9A#4 = globals.iter2222;
    real rpc3B99#1 = globals.rpc2223;
    int popLast3B98#1 = globals.popLast2224;
    int pop3BA6#5 = NumStrands<active>;
    bool _t3BA9#1 = NEQ<int>(pop3BA6,popLast3B98);
    if _t3BA9 then goto ASSIGN3BAE else goto ASSIGN3BB0
  ASSIGN3BAE:  preds = [COND3BB1]
    int _t3BAC#1 = 1;
    goto JOIN3BAB
  JOIN3BAB:  preds = [ASSIGN3BAE,ASSIGN3BB0]
    int _t3BAD#2 = phi(_t3BAC,_t3BAF)
    real _t3BB4#1 = IntToReal(_t3BAD);
    real rpc3BB6#5 = λ(T0[],T1[],T2[])<(T0 + (T2 * (T1) - (T0)))> (_t3BB4,rpc3B99,pchist3B9B);
    globals.rpc2223 = rpc3BB6;
    point[] P3BB9#6 = Strands<point,all>;
    (bool res3BBA#1) = all(MAP all2821 (P3BB9));
    real _t3BBF#1 = 0.1e3;
    (real res3BC2#1) = sum<real>(MAP mean282F (P3BB9));
    int num3BC5#1 = NumStrands<all>;
    real rNum3BC7#5 = IntToReal(num3BC5);
    real percfound3BCB#1 = λ(T0[],T1[],T2[])<(T0 * (T1) / ( T2))> (_t3BBF,res3BC2,rNum3BC7);
    (real res3BCE#2) = sum<real>(MAP mean2836 (P3BB9));
    real mean3BD5#2 = λ(T0[],T1[])<(T0) / ( T1)> (res3BCE,rNum3BC7);
    (real res3BDA#1) = sum<real>(MAP mean2843 (P3BB9,mean3BD5));
    real covcl3BE7#4 = λ(T0[],T1[],T2[],T3[])<((Sqrt((T0) / ( T1)) * T1)) / ( T2)> (res3BDA,rNum3BC7,res3BCE,rNum3BC7);
    (real res3BEA#4) = max<real>(MAP max284A (P3BB9));
    string _t3BEF#1 = "======= finished iter ";
    string _t3BF1#1 = " w/ ";
    string _t3BF3#3 = ")";
    string _t3BF5#1 = "; %found=";
    string _t3BF7#1 = "; mean(hh)=";
    (real res3BFA#1) = sum<real>(MAP mean2851 (P3BB9));
    real mean3C01#1 = λ(T0[],T1[])<(T0) / ( T1)> (res3BFA,rNum3BC7);
    string _t3C03#1 = "; mean(cl)=";
    string _t3C05#3 = "; COV(cl)=";
    string _t3C07#3 = "; max(mvmt)=";
    string _t3C09#1 = "; pc=";
    string _t3C0B#3 = "; rpc=";
    string _t3C0D#3 = "\n";
    Print<[string,int,string,int,string,string,real,string,real,string,real,string,real,string,real,string,int,string,real,string]>(_t3BEF,iter3B9A,_t3BF1,pop3BA6,_t3BF3,_t3BF5,percfound3BCB,_t3BF7,mean3C01,_t3C03,mean3BD5,_t3C05,covcl3BE7,_t3C07,res3BEA,_t3C09,_t3BAD,_t3C0B,rpc3BB6,_t3C0D);
    if res3BBA then goto ASSIGN3C14 else goto ASSIGN3C2A
  ASSIGN3C14:  preds = [COND3C2B]
    bool _t3C13#1 = LT<real>(covcl3BE7,geoEps3B9E);
    if _t3C13 then goto ASSIGN3DFB else goto ASSIGN3C24
  ASSIGN3DFB:  preds = [COND3C25]
    bool _t3C17#1 = LT<real>(res3BEA,mvmtEps3B9D);
    if _t3C17 then goto ASSIGN3C1C else goto ASSIGN3C1E
  ASSIGN3C1C:  preds = [COND3C1F]
    bool _t3C1A#1 = LT<real>(rpc3BB6,rpcEps3B9C);
    goto JOIN3C19
  JOIN3C19:  preds = [ASSIGN3C1C,ASSIGN3C1E]
    bool _t3C1B#1 = phi(_t3C1A,_t3C1D)
    goto JOIN3C15
  JOIN3C15:  preds = [JOIN3C19,ASSIGN3C24]
    bool _t3C21#1 = phi(_t3C1B,_t3C23)
    goto JOIN3C11
  JOIN3C11:  preds = [JOIN3C15,ASSIGN3C2A]
    bool _t3C27#1 = phi(_t3C21,_t3C29)
    if _t3C27 then goto ASSIGN3C2E else goto ASSIGN3C46
  ASSIGN3C2E:  preds = [COND3C5C]
    string _t3C2D#1 = "======= Stabilizing ";
    string _t3C31#1 = " (iter ";
    string _t3C37#3 = " < ";
    Print<[string,int,string,int,string,string,real,string,real,string,real,string,real,string,real,string,real,string]>(_t3C2D,pop3BA6,_t3C31,iter3B9A,_t3BF3,_t3C05,covcl3BE7,_t3C37,geoEps3B9E,_t3C07,res3BEA,_t3C37,mvmtEps3B9D,_t3C0B,rpc3BB6,_t3C37,rpcEps3B9C,_t3C0D);
    StabilizeAll;
    goto JOIN3C2C
  JOIN3C2C:  preds = [MASSIGN3C44,MASSIGN3DFC]
    int _t3C5D#1 = 1;
    int iter3C5F#1 = IAdd(iter3B9A,_t3C5D);
    globals.iter2222 = iter3C5F;
    globals.popLast2224 = pop3BA6;
    continue
  ASSIGN3C46:  preds = [COND3C5C]
    string _t3C45#1 = "======= Stabilizing ";
    string _t3C49#1 = " (iter ";
    string _t3C4F#3 = " > ";
    Print<[string,int,string,int,string,string,real,string,real,string,real,string,real,string,real,string,real,string]>(_t3C45,pop3BA6,_t3C49,iter3B9A,_t3BF3,_t3C05,covcl3BE7,_t3C4F,geoEps3B9E,_t3C07,res3BEA,_t3C4F,mvmtEps3B9D,_t3C0B,rpc3BB6,_t3C4F,rpcEps3B9C,_t3C0D);
    goto JOIN3C2C
  ASSIGN3C1E:  preds = [COND3C1F]
    bool _t3C1D#1 = false;
    goto JOIN3C19
  ASSIGN3C24:  preds = [COND3C25]
    bool _t3C23#1 = false;
    goto JOIN3C15
  ASSIGN3C2A:  preds = [COND3C2B]
    bool _t3C29#1 = false;
    goto JOIN3C11
  ASSIGN3BB0:  preds = [COND3BB1]
    int _t3BAF#1 = 0;
    goto JOIN3BAB
#### end program ####
##### high-ir: after normalization promotion ####
## properties
  GlobalInit StabilizeAll GlobalReduce StrandSets GlobalUpdate NewStrands StrandCommunication StrandsMayDie HasInputs HasGlobals ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
## globals
  input meshData21C9 (meshData) = <no-default>
  input 0space07C6_intermedateGlobal21CA (space) = <no-default>
  input 0data07C8_intermedateGlobal21CB (data) = <no-default>
  input fStrTh21CC (fStrTh) = <no-default>
  input fMaskTh21CD (fMaskTh) = <default>
  input fBias21CE (fBias) = <default>
  input tipd21CF (tipd) = <default>
  input mabd21D0 (mabd) = <default>
  input travMax21D1 (travMax) = <default>
  input nfsMax21D2 (nfsMax) = <default>
  input gdeTest21D3 (gdeTest) = <default>
  input gdeBack21D4 (gdeBack) = <default>
  input gdeOppor21D5 (gdeOppor) = <default>
  input fsEps21D6 (fsEps) = <no-default>
  input geoEps21D7 (geoEps) = <default>
  input mvmtEps21D8 (mvmtEps) = <default>
  input rpcEps21D9 (rpcEps) = <default>
  input pcmvEps21DA (pcmvEps) = <default>
  input isoval21DB (isoval) = <default>
  input verb21DC (verb) = <default>
  input sfs21DD (sfs) = <default>
  input hist21DE (hist) = <default>
  input pcp21DF (pcp) = <default>
  input ipos21E0 (ipos) = <no-default>
  input fDim21E1 (fDim) = <default>
  global int nnmin221D
  global int nnmax221E
  global real rad2220
  global real pchist2221
  varying global int iter2222
  varying global real rpc2223
  varying global int popLast2224
## functions
  function real mean2851 (point P284B#1) {
    ENTRY2850:  preds = []
      real _t284C#1 = P284B.hh;
      return _t284C
}
  function real max284A (point P2844#1) {
    ENTRY2849:  preds = []
      real _t2845#1 = P2844.mvmt;
      return _t2845
}
  function real mean2843 (point P2837#1, real meancl2838#1) {
    ENTRY2842:  preds = []
      real _t2839#1 = P2837.closest;
      real _t283F#1 = λ(T0[],T1[])<((T0) - (T1))^2> (_t2839,meancl2838);
      return _t283F
}
  function real mean2836 (point P2830#1) {
    ENTRY2835:  preds = []
      real _t2831#1 = P2830.closest;
      return _t2831
}
  function real mean282F (point P2822#1) {
    ENTRY282E:  preds = []
      bool _t2824#1 = P2822.found;
      if _t2824 then goto ASSIGN2829 else goto ASSIGN282B
    ASSIGN2829:  preds = [COND282C]
      real _t2827#1 = 0.1e1;
      goto JOIN2826
    JOIN2826:  preds = [ASSIGN2829,ASSIGN282B]
      real _t2828#1 = phi(_t2827,_t282A)
      return _t2828
    ASSIGN282B:  preds = [COND282C]
      real _t282A#1 = 0.e0;
      goto JOIN2826
}
  function bool all2821 (point P281B#1) {
    ENTRY2820:  preds = []
      bool _t281C#1 = P281B.found;
      return _t281C
}
  function int[2] nextCell42244 (int faceIdx2225#2, int cell2226#1, femData:Mesh mesh2227#1) {
    ENTRY2243:  preds = []
      int _t2228#3 = -1;
      bool _t222A#1 = EQ<int>(faceIdx2225,_t2228);
      if _t222A then goto ASSIGN3C6D else goto ASSIGN2235
    ASSIGN3C6D:  preds = [COND2241]
      int[2] _t2231#1 = <int[2]>{_t2228,_t2228};
      return _t2231
      goto JOIN222C
    JOIN222C:  preds = [*RETURN(_t2231)2233,*RETURN(_t223E)2240]
      unreachable
    ASSIGN2235:  preds = [COND2241]
      int _t2234#1 = 8;
      int _t2236#1 = IMul(cell2226,_t2234);
      int _t2238#1 = 2;
      int _t223A#1 = IMul(faceIdx2225,_t2238);
      int _t223C#1 = IAdd(_t2236,_t223A);
      int[2] _t223E#1 = ExtractFemItemN<[femData:Mesh,int],int[2],CellFaceCell(Mesh),0000,"",[],int>(mesh2227,_t223C);
      return _t223E
      goto JOIN222C
}
  function tensor[3] fStep2531 (tensor[3] s2245#3) {
    ENTRY2530:  preds = []
      real x2247#21 = TensorIndex<tensor[3],[0]>(s2245);
      real y2249#21 = TensorIndex<tensor[3],[1]>(s2245);
      real z224B#31 = TensorIndex<tensor[3],[2]>(s2245);
      real _t224D#7 = 0.2e1;
      int _t2251#2 = 2;
      real _t2269#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[])<(T0 * T1 * (T2)^2 * Cosine(((T1)^2 + (T4)^2 + (T2)^2)))> (_t224D,x2247,z224B,x2247,y2249,z224B);
      real _t2287#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[])<(T0 * T1 * (T2)^2 * Cosine(((T3)^2 + (T1)^2 + (T2)^2)))> (_t224D,y2249,z224B,x2247,y2249,z224B);
      real _t22BD#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[])<((T0 * (T1)^3 * Cosine(((T2)^2 + (T3)^2 + (T1)^2))) + (T0 * T1 * Sine(((T2)^2 + (T3)^2 + (T1)^2))))> (_t224D,z224B,x2247,y2249,z224B,_t224D,z224B,x2247,y2249,z224B);
      tensor[3] g22BF#1 = <tensor[3]>[_t2269,_t2287,_t22BD];
      int _t22CA#1 = -4;
      real _t22CC#6 = IntToReal(_t22CA);
      real _t230A#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[],T10[])<((T0 * (T1)^2 * (T2)^2 * Sine(((T1)^2 + (T4)^2 + (T2)^2))) + (T6 * (T2)^2 * Cosine(((T1)^2 + (T4)^2 + (T2)^2))))> (_t22CC,x2247,z224B,x2247,y2249,z224B,_t224D,z224B,x2247,y2249,z224B);
      real _t232C#2 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[])<(T0 * T1 * T2 * (T3)^2 * Sine(((T1)^2 + (T2)^2 + (T3)^2)))> (_t22CC,x2247,y2249,z224B,x2247,y2249,z224B);
      real _t234E#2 = 0.4e1;
      real _t2368#2 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[],T10[],T11[])<((T0 * T1 * (T2)^3 * Sine(((T1)^2 + (T4)^2 + (T2)^2))) + (T6 * T1 * T2 * Cosine(((T1)^2 + (T4)^2 + (T2)^2))))> (_t22CC,x2247,z224B,x2247,y2249,z224B,_t234E,x2247,z224B,x2247,y2249,z224B);
      tensor[3] _t236A#1 = <tensor[3]>[_t230A,_t232C,_t2368];
      real _t23CE#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[],T10[])<((T0 * (T1)^2 * (T2)^2 * Sine(((T3)^2 + (T1)^2 + (T2)^2))) + (T6 * (T2)^2 * Cosine(((T3)^2 + (T1)^2 + (T2)^2))))> (_t22CC,y2249,z224B,x2247,y2249,z224B,_t224D,z224B,x2247,y2249,z224B);
      real _t240A#2 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[],T10[],T11[])<((T0 * T1 * (T2)^3 * Sine(((T3)^2 + (T1)^2 + (T2)^2))) + (T6 * T1 * T2 * Cosine(((T3)^2 + (T1)^2 + (T2)^2))))> (_t22CC,y2249,z224B,x2247,y2249,z224B,_t234E,y2249,z224B,x2247,y2249,z224B);
      tensor[3] _t240C#1 = <tensor[3]>[_t232C,_t23CE,_t240A];
      real _t24A4#1 = 0.1e2;
      real _t24D8#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[],T10[],T11[],T12[],T13[])<((T0 * (T1)^4 * Sine(((T2)^2 + (T3)^2 + (T1)^2))) + (T5 * (T1)^2 * Cosine(((T2)^2 + (T3)^2 + (T1)^2))) + (T10 * Sine(((T2)^2 + (T3)^2 + (T1)^2))))> (_t22CC,z224B,x2247,y2249,z224B,_t24A4,z224B,x2247,y2249,z224B,_t224D,x2247,y2249,z224B);
      tensor[3] _t24DA#1 = <tensor[3]>[_t2368,_t240A,_t24D8];
      tensor[3,3] hess24DC#1 = <tensor[3,3]>[_t236A,_t240C,_t24DA];
      (real[3] evals24E1#1,tensor[3][3] E24E0#1) = Eigen3x3(hess24DC);
      real _t24E6#1 = 0.1e1;
      real _t24EA#1 = Subscript<real[3]>(evals24E1,_t2251);
      tensor[3] _t24F2#2 = Subscript<tensor[3][3]>(E24E0,_t2251);
      tensor[3] up24FC#4 = λ(T0[],T1[],T2[3],T3[3],T4[3])<Σ(i1=0..2)<((Neg((T0) / ( T1)) * T2_{i0} * T2_{i1} * T4_{i1}))>(i1=0..2)>_{3} (_t24E6,_t24EA,_t24F2,_t24F2,g22BF);
      real _t24FF#2 = TensorIndex<tensor[3],[0]>(up24FC);
      bool _t2503#1 = EQ<real>(_t24FF,_t24FF);
      bool _t2505#1 = BNot(_t2503);
      if _t2505 then goto ASSIGN250A else goto ASSIGN250D
    ASSIGN250A:  preds = [COND2523]
      bool _t2508#1 = true;
      goto JOIN2507
    JOIN2507:  preds = [ASSIGN250A,JOIN2514]
      bool _t2509#1 = phi(_t2508,_t2516)
      if _t2509 then goto ASSIGN2526 else goto JOIN2524
    ASSIGN2526:  preds = [COND252E]
      real _t2525#3 = +inf;
      tensor[3] _t252B#1 = <tensor[3]>[_t2525,_t2525,_t2525];
      return _t252B
      goto JOIN2524
    JOIN2524:  preds = [*RETURN(_t252B)252D,COND252E]
      return up24FC
    ASSIGN250D:  preds = [COND2523]
      real _t250C#2 = TensorIndex<tensor[3],[1]>(up24FC);
      bool _t2510#1 = EQ<real>(_t250C,_t250C);
      bool _t2512#1 = BNot(_t2510);
      if _t2512 then goto ASSIGN2517 else goto ASSIGN2519
    ASSIGN2517:  preds = [COND2520]
      bool _t2515#1 = true;
      goto JOIN2514
    JOIN2514:  preds = [ASSIGN2517,ASSIGN251F]
      bool _t2516#1 = phi(_t2515,_t251E)
      goto JOIN2507
    ASSIGN2519:  preds = [COND2520]
      real _t2518#2 = TensorIndex<tensor[3],[2]>(up24FC);
      bool _t251C#1 = EQ<real>(_t2518,_t2518);
      bool _t251E#1 = BNot(_t251C);
      goto JOIN2514
}
  function tensor[3,3] fPerp27E7 (tensor[3] s2532#3) {
    ENTRY27E6:  preds = []
      real x2534#16 = TensorIndex<tensor[3],[0]>(s2532);
      real y2536#16 = TensorIndex<tensor[3],[1]>(s2532);
      real z2538#23 = TensorIndex<tensor[3],[2]>(s2532);
      real _t253A#3 = 0.2e1;
      int _t253E#1 = 2;
      int _t25B7#1 = -4;
      real _t25B9#6 = IntToReal(_t25B7);
      real _t25F7#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[],T10[])<((T0 * (T1)^2 * (T2)^2 * Sine(((T1)^2 + (T4)^2 + (T2)^2))) + (T6 * (T2)^2 * Cosine(((T1)^2 + (T4)^2 + (T2)^2))))> (_t25B9,x2534,z2538,x2534,y2536,z2538,_t253A,z2538,x2534,y2536,z2538);
      real _t2619#2 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[])<(T0 * T1 * T2 * (T3)^2 * Sine(((T1)^2 + (T2)^2 + (T3)^2)))> (_t25B9,x2534,y2536,z2538,x2534,y2536,z2538);
      real _t263B#2 = 0.4e1;
      real _t2655#2 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[],T10[],T11[])<((T0 * T1 * (T2)^3 * Sine(((T1)^2 + (T4)^2 + (T2)^2))) + (T6 * T1 * T2 * Cosine(((T1)^2 + (T4)^2 + (T2)^2))))> (_t25B9,x2534,z2538,x2534,y2536,z2538,_t263B,x2534,z2538,x2534,y2536,z2538);
      tensor[3] _t2657#1 = <tensor[3]>[_t25F7,_t2619,_t2655];
      real _t26BB#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[],T10[])<((T0 * (T1)^2 * (T2)^2 * Sine(((T3)^2 + (T1)^2 + (T2)^2))) + (T6 * (T2)^2 * Cosine(((T3)^2 + (T1)^2 + (T2)^2))))> (_t25B9,y2536,z2538,x2534,y2536,z2538,_t253A,z2538,x2534,y2536,z2538);
      real _t26F7#2 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[],T10[],T11[])<((T0 * T1 * (T2)^3 * Sine(((T3)^2 + (T1)^2 + (T2)^2))) + (T6 * T1 * T2 * Cosine(((T3)^2 + (T1)^2 + (T2)^2))))> (_t25B9,y2536,z2538,x2534,y2536,z2538,_t263B,y2536,z2538,x2534,y2536,z2538);
      tensor[3] _t26F9#1 = <tensor[3]>[_t2619,_t26BB,_t26F7];
      real _t2791#1 = 0.1e2;
      real _t27C5#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[],T10[],T11[],T12[],T13[])<((T0 * (T1)^4 * Sine(((T2)^2 + (T3)^2 + (T1)^2))) + (T5 * (T1)^2 * Cosine(((T2)^2 + (T3)^2 + (T1)^2))) + (T10 * Sine(((T2)^2 + (T3)^2 + (T1)^2))))> (_t25B9,z2538,x2534,y2536,z2538,_t2791,z2538,x2534,y2536,z2538,_t253A,x2534,y2536,z2538);
      tensor[3] _t27C7#1 = <tensor[3]>[_t2655,_t26F7,_t27C5];
      tensor[3,3] hess27C9#1 = <tensor[3,3]>[_t2657,_t26F9,_t27C7];
      (real[3] evals27CE#0,tensor[3][3] _t27CD#1) = Eigen3x3(hess27C9);
      tensor[3] E227D2#6 = Subscript<tensor[3][3]>(_t27CD,_t253E);
      tensor[3,3] m27D8#1 = λ(T0[3],T1[3])<(δ_{i0,i1}) - ((T0_{i0} * T0_{i1}))>_{3 3} (E227D2,E227D2);
      real t27DA#2 = λ(T0[3],T1[3],T2[3],T3[3])<Σ(i0=0..2)(i1=0..2)<(((δ_{i0,i1}) - ((T0_{i0} * T0_{i1})) * (δ_{i0,i1}) - ((T0_{i0} * T0_{i1}))))>(i0=0..2)(i1=0..2)> (E227D2,E227D2,E227D2,E227D2);
      bool _t27DC#1 = EQ<real>(t27DA,t27DA);
      bool _t27DE#1 = BNot(_t27DC);
      if _t27DE then goto ASSIGN27E2 else goto JOIN27E0
    ASSIGN27E2:  preds = [COND27E4]
      tensor[3,3] _t27E1#1 = λ()<Z_{i0,i1}>_{3 3} ();
      return _t27E1
      goto JOIN27E0
    JOIN27E0:  preds = [*RETURN(_t27E1)27E3,COND27E4]
      return m27D8
}
  function real urnd281A (real x27E8#2) {
    ENTRY2819:  preds = []
      int iter27E9#1 = globals.iter2222;
      real _t27EB#2 = 0.e0;
      bool _t27ED#1 = EQ<real>(x27E8,_t27EB);
      if _t27ED then goto RETURN(_t27EB)3CC9 else goto JOIN27EF
    RETURN(_t27EB)3CC9:  preds = [COND27F3]
      return _t27EB
      goto JOIN27EF
    JOIN27EF:  preds = [*RETURN(_t27EB)3CC9,COND27F3]
      real _t27F4#1 = λ(T0[])<Abs(T0)> (x27E8);
      real l227F6#2 = MathFn<log2>(_t27F4);
      real _t27F8#2 = 0.2e1;
      real _t27FA#1 = MathFn<floor>(l227F6);
      real _t27FE#2 = 0.1e1;
      real _t2800#1 = λ(T0[],T1[],T2[])<((T0) - (T1)) - (T2)> (l227F6,_t27FA,_t27FE);
      real frxp2802#1 = MathFn<pow>(_t27F8,_t2800);
      int _t280A#1 = 2;
      int _t280C#1 = IMul(_t280A,iter27E9);
      real _t280E#1 = IntToReal(_t280C);
      real _t2812#1 = λ(T0[],T1[],T2[])<(T2 * ((T0)^20 + T1))> (_t27F8,_t280E,frxp2802);
      real _t2816#1 = MathFn<fmod>(_t2812,_t27FE);
      return _t2816
}
## input initialization
  ENTRY221B:  preds = []
    real fMaskTh21E2#3 = 0.e0;
    globals.fMaskTh21CD = fMaskTh21E2;
    globals.fBias21CE = fMaskTh21E2;
    real tipd21E8#1 = 0.1e1;
    globals.tipd21CF = tipd21E8;
    real mabd21EB#1 = 0.75e0;
    globals.mabd21D0 = mabd21EB;
    real travMax21EE#1 = 0.1e2;
    globals.travMax21D1 = travMax21EE;
    int nfsMax21F1#1 = 20;
    globals.nfsMax21D2 = nfsMax21F1;
    real gdeTest21F4#4 = 0.5e0;
    globals.gdeTest21D3 = gdeTest21F4;
    globals.gdeBack21D4 = gdeTest21F4;
    real gdeOppor21FA#1 = 0.12e1;
    globals.gdeOppor21D5 = gdeOppor21FA;
    real geoEps21FD#1 = 0.1e0;
    globals.geoEps21D7 = geoEps21FD;
    real mvmtEps2200#2 = 0.1e-1;
    globals.mvmtEps21D8 = mvmtEps2200;
    globals.rpcEps21D9 = mvmtEps2200;
    real pcmvEps2206#1 = 0.3e0;
    globals.pcmvEps21DA = pcmvEps2206;
    globals.isoval21DB = fMaskTh21E2;
    int verb220C#1 = 0;
    globals.verb21DC = verb220C;
    globals.sfs21DD = gdeTest21F4;
    globals.hist21DE = gdeTest21F4;
    int pcp2215#1 = 5;
    globals.pcp21DF = pcp2215;
    int fDim2218#1 = 2;
    globals.fDim21E1 = fDim2218;
    return
## global-variable initialization
  ENTRY28C6:  preds = []
    femData:Mesh meshData2856#2 = globals.meshData21C9;
    real tipd2855#1 = globals.tipd21CF;
    real hist2854#1 = globals.hist21DE;
    int pcp2853#1 = globals.pcp21DF;
    int fDim2852#3 = globals.fDim21E1;
    int _t285C#4 = 0;
    int _t285E#3 = 1;
    int _t2860#1 = ExtractFemItem<int,NumCell(Mesh)>(meshData2856);
    int _t2862#1 = ISub(_t2860,_t285E);
    int[] _t2864#1 = Range(_t285C,_t2862);
    femData:MeshCell[] _t2866#1 = <femData:MeshCell[]>{};
  FOREACH286A:  preds = [ASSIGN2867,NEXT286F]
    foreach (_t2868 in _t2864) on exit goto ASSIGN2872
      femData:MeshCell[] _t2869#1 = phi(_t2866,_t286D)
    femData:MeshCell _t286B#1 = LoadFem<femData:MeshCell>(meshData2856,_t2868);
    femData:MeshCell[] _t286D#1 = Append<femData:MeshCell>(_t2869,_t286B);
    goto FOREACH286A
  ASSIGN2872:  preds = [FOREACH286A]
    int _t2871#3 = 2;
    bool _t2873#2 = EQ<int>(_t2871,fDim2852);
    if _t2873 then goto ASSIGN2878 else goto ASSIGN3CCC
  ASSIGN2878:  preds = [COND2887]
    int _t2876#1 = 6;
    goto JOIN2875
  JOIN2875:  preds = [ASSIGN2878,JOIN287E]
    int _t2877#1 = phi(_t2876,_t2880)
    globals.nnmin221D = _t2877;
    if _t2873 then goto ASSIGN2893 else goto ASSIGN3CCE
  ASSIGN2893:  preds = [COND28A2]
    int _t2891#1 = 8;
    goto JOIN2890
  JOIN2890:  preds = [ASSIGN2893,JOIN2899]
    int _t2892#1 = phi(_t2891,_t289B)
    globals.nnmax221E = _t2892;
    real _t28A6#1 = 0.2e1;
    real _t28A8#1 = 0.3e1;
    real rad28AD#1 = λ(T0[],T1[],T2[])<((T0 * T2)) / ( T1)> (tipd2855,_t28A6,_t28A8);
    globals.rad2220 = rad28AD;
    real _t28B0#2 = 0.1e1;
    int _t28B4#1 = IMul(_t2871,pcp2853);
    real _t28B6#1 = IntToReal(_t28B4);
    real _t28B8#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t28B0,_t28B6);
    real pchist28BA#1 = MathFn<pow>(hist2854,_t28B8);
    globals.pchist2221 = pchist28BA;
    globals.iter2222 = _t285C;
    globals.rpc2223 = _t28B0;
    int popLast28C3#1 = -1;
    globals.popLast2224 = popLast28C3;
    return
  ASSIGN3CCE:  preds = [COND28A2]
    bool _t2897#1 = EQ<int>(_t285E,fDim2852);
    if _t2897 then goto ASSIGN289C else goto JOIN2899
  ASSIGN289C:  preds = [COND289F]
    int _t289A#1 = 3;
    goto JOIN2899
  JOIN2899:  preds = [ASSIGN289C,COND289F]
    int _t289B#1 = phi(_t289A,_t285C)
    goto JOIN2890
  ASSIGN3CCC:  preds = [COND2887]
    bool _t287C#1 = EQ<int>(_t285E,fDim2852);
    if _t287C then goto JOIN287E else goto JOIN287E
  JOIN287E:  preds = [COND2884,COND2884]
    int _t2880#1 = phi(_t2871,_t285C)
    goto JOIN2875
## strand
  strand point (tensor[3] p028DE#5, real hh028DF#1) in 3D
    state:
      output tensor[3] pos;
      output tensor[3] _pos;
      real ID;
      real hh;
      tensor[3] step;
      bool found;
      int nfs;
      real trav;
      real mvmt;
      real closest;
      int born;
      bool first;
    state init
      ENTRY2934:  preds = []
        real rad28E8#1 = globals.rad2220;
        real _t28FB#1 = 0.1e7;
        real _t28FE#1 = TensorIndex<tensor[3],[0]>(p028DE);
        real _t2900#1 = urnd281A (_t28FE);
        real _t2902#1 = TensorIndex<tensor[3],[1]>(p028DE);
        real _t2904#1 = urnd281A (_t2902);
        real _t2908#1 = TensorIndex<tensor[3],[2]>(p028DE);
        real _t290A#1 = urnd281A (_t2908);
        real _t290C#1 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (_t2900,_t2904,_t290A);
        real _t290E#2 = 0.1e1;
        real _t2910#1 = MathFn<fmod>(_t290C,_t290E);
        real _t2914#1 = λ(T0[],T1[])<(T0 * T1)> (_t28FB,_t2910);
        real _t2916#1 = MathFn<floor>(_t2914);
        real _t291E#4 = 0.e0;
        tensor[3] step2924#1 = <tensor[3]>[_t291E,_t291E,_t291E];
        bool found2926#1 = false;
        int nfs2928#2 = 0;
        bool first2932#1 = true;
        self.pos = p028DE;
        self._pos = p028DE;
        self.ID = _t2916;
        self.hh = hh028DF;
        self.step = step2924;
        self.found = found2926;
        self.nfs = nfs2928;
        self.trav = _t291E;
        self.mvmt = _t290E;
        self.closest = rad28E8;
        self.born = nfs2928;
        self.first = first2932;
        return
    end state init
    method update
        ENTRY3B8B:  preds = []
          real fStrTh2956#4 = globals.fStrTh21CC;
          real fMaskTh2955#4 = globals.fMaskTh21CD;
          real fBias2954#4 = globals.fBias21CE;
          real tipd2953#22 = globals.tipd21CF;
          real mabd2952#1 = globals.mabd21D0;
          real travMax2951#3 = globals.travMax21D1;
          int nfsMax2950#3 = globals.nfsMax21D2;
          real gdeTest294F#1 = globals.gdeTest21D3;
          real gdeBack294E#1 = globals.gdeBack21D4;
          real gdeOppor294D#1 = globals.gdeOppor21D5;
          real fsEps294C#3 = globals.fsEps21D6;
          real pcmvEps294B#1 = globals.pcmvEps21DA;
          int verb294A#16 = globals.verb21DC;
          real sfs2949#84 = globals.sfs21DD;
          real hist2948#2 = globals.hist21DE;
          int pcp2947#10 = globals.pcp21DF;
          int fDim2946#2 = globals.fDim21E1;
          int nnmin2945#3 = globals.nnmin221D;
          int nnmax2944#4 = globals.nnmax221E;
          real rad2943#31 = globals.rad2220;
          int iter2942#22 = globals.iter2222;
          tensor[3] pos296C#58 = self.pos;
          real ID296E#11 = self.ID;
          real hh296F#9 = self.hh;
          bool found2971#3 = self.found;
          int nfs2972#5 = self.nfs;
          real trav2973#5 = self.trav;
          real mvmt2974#5 = self.mvmt;
          real closest2975#1 = self.closest;
          int born2976#5 = self.born;
          bool first2977#1 = self.first;
          bool vv2984#45 = false;
          if first2977 then goto ASSIGN298A else goto JOIN2986
        ASSIGN298A:  preds = [COND29A9]
          int _t2989#1 = 0;
          bool _t298B#1 = GT<int>(verb294A,_t2989);
          if _t298B then goto JOIN298D else goto JOIN298D
        JOIN298D:  preds = [COND2993,COND2993]
          bool _t298F#1 = phi(vv2984,vv2984)
          if _t298F then goto ASSIGN2997 else goto ASSIGN2999
        ASSIGN2997:  preds = [COND299C]
          bool _t2995#1 = true;
          goto JOIN2994
        JOIN2994:  preds = [ASSIGN2997,ASSIGN299B]
          bool _t2996#1 = phi(_t2995,_t299A)
          if _t2996 then goto ASSIGN299F else goto JOIN299D
        ASSIGN299F:  preds = [COND29A8]
          string _t299E#1 = "(i#";
          string _t29A0#1 = " @ ";
          string _t29A2#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID296E,_t299E,iter2942,_t29A0,pos296C,_t29A2);
          string _t29A5#1 = " HELLO!\n";
          Print<[string]>(_t29A5);
          goto JOIN299D
        JOIN299D:  preds = [MASSIGN29A7,COND29A8]
          goto JOIN2986
        JOIN2986:  preds = [JOIN299D,COND29A9]
          real _t29AD#23 = 0.e0;
          tensor[3] _t29B3#5 = <tensor[3]>[_t29AD,_t29AD,_t29AD];
          real _t29B8#3 = λ(T0[3],T1[3])<Sqrt(Σ(i0=0..2)<(((T0_{i0}) - (T1_{i0}) * (T0_{i0}) - (T1_{i0})))>(i0=0..2))> (pos296C,_t29B3);
          real _t29BA#11 = 0.4e1;
          bool _t29BC#2 = LT<real>(_t29B8,_t29BA);
          if _t29BC then goto ASSIGN29C2 else goto JOIN29BE
        ASSIGN29C2:  preds = [COND29C8]
          real _t29C1#1 = 0.3e1;
          bool _t29C3#1 = GT<real>(_t29B8,_t29C1);
          goto JOIN29BE
        JOIN29BE:  preds = [ASSIGN3CDE,COND29C8]
          bool _t29C4#1 = phi(_t29C3,vv2984)
          if _t29C4 then goto ASSIGN29D0 else goto JOIN29CB
        ASSIGN29D0:  preds = [COND2C98]
          real x29CF#21 = TensorIndex<tensor[3],[0]>(pos296C);
          real y29D1#21 = TensorIndex<tensor[3],[1]>(pos296C);
          real z29D3#31 = TensorIndex<tensor[3],[2]>(pos296C);
          real _t29D5#7 = 0.2e1;
          int _t29D9#1 = 2;
          real _t29F1#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[])<(T0 * T1 * (T2)^2 * Cosine(((T1)^2 + (T4)^2 + (T2)^2)))> (_t29D5,x29CF,z29D3,x29CF,y29D1,z29D3);
          real _t2A0F#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[])<(T0 * T1 * (T2)^2 * Cosine(((T3)^2 + (T1)^2 + (T2)^2)))> (_t29D5,y29D1,z29D3,x29CF,y29D1,z29D3);
          real _t2A45#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[])<((T0 * (T1)^3 * Cosine(((T2)^2 + (T3)^2 + (T1)^2))) + (T0 * T1 * Sine(((T2)^2 + (T3)^2 + (T1)^2))))> (_t29D5,z29D3,x29CF,y29D1,z29D3,_t29D5,z29D3,x29CF,y29D1,z29D3);
          tensor[3] g2A47#1 = <tensor[3]>[_t29F1,_t2A0F,_t2A45];
          int _t2A52#1 = -4;
          real _t2A54#6 = IntToReal(_t2A52);
          real _t2A92#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[],T10[])<((T0 * (T1)^2 * (T2)^2 * Sine(((T1)^2 + (T4)^2 + (T2)^2))) + (T6 * (T2)^2 * Cosine(((T1)^2 + (T4)^2 + (T2)^2))))> (_t2A54,x29CF,z29D3,x29CF,y29D1,z29D3,_t29D5,z29D3,x29CF,y29D1,z29D3);
          real _t2AB4#2 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[])<(T0 * T1 * T2 * (T3)^2 * Sine(((T1)^2 + (T2)^2 + (T3)^2)))> (_t2A54,x29CF,y29D1,z29D3,x29CF,y29D1,z29D3);
          real _t2AF0#2 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[],T10[],T11[])<((T0 * T1 * (T2)^3 * Sine(((T1)^2 + (T4)^2 + (T2)^2))) + (T6 * T1 * T2 * Cosine(((T1)^2 + (T4)^2 + (T2)^2))))> (_t2A54,x29CF,z29D3,x29CF,y29D1,z29D3,_t29BA,x29CF,z29D3,x29CF,y29D1,z29D3);
          tensor[3] _t2AF2#1 = <tensor[3]>[_t2A92,_t2AB4,_t2AF0];
          real _t2B56#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[],T10[])<((T0 * (T1)^2 * (T2)^2 * Sine(((T3)^2 + (T1)^2 + (T2)^2))) + (T6 * (T2)^2 * Cosine(((T3)^2 + (T1)^2 + (T2)^2))))> (_t2A54,y29D1,z29D3,x29CF,y29D1,z29D3,_t29D5,z29D3,x29CF,y29D1,z29D3);
          real _t2B92#2 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[],T10[],T11[])<((T0 * T1 * (T2)^3 * Sine(((T3)^2 + (T1)^2 + (T2)^2))) + (T6 * T1 * T2 * Cosine(((T3)^2 + (T1)^2 + (T2)^2))))> (_t2A54,y29D1,z29D3,x29CF,y29D1,z29D3,_t29BA,y29D1,z29D3,x29CF,y29D1,z29D3);
          tensor[3] _t2B94#1 = <tensor[3]>[_t2AB4,_t2B56,_t2B92];
          real _t2C2C#1 = 0.1e2;
          real _t2C60#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[],T10[],T11[],T12[],T13[])<((T0 * (T1)^4 * Sine(((T2)^2 + (T3)^2 + (T1)^2))) + (T5 * (T1)^2 * Cosine(((T2)^2 + (T3)^2 + (T1)^2))) + (T10 * Sine(((T2)^2 + (T3)^2 + (T1)^2))))> (_t2A54,z29D3,x29CF,y29D1,z29D3,_t2C2C,z29D3,x29CF,y29D1,z29D3,_t29D5,x29CF,y29D1,z29D3);
          tensor[3] _t2C62#1 = <tensor[3]>[_t2AF0,_t2B92,_t2C60];
          tensor[3,3] hess2C64#1 = <tensor[3,3]>[_t2AF2,_t2B94,_t2C62];
          (real[3] _t2C68#1,tensor[3][3] evecs2C69#0) = Eigen3x3(hess2C64);
          real _t2C6D#1 = Subscript<real[3]>(_t2C68,_t29D9);
          real str2C75#1 = λ(T0[],T1[],T2[3])<(Neg(T0)) / ( (T1 + Sqrt(Σ(i0=0..2)<((T2_{i0} * T2_{i0}))>(i0=0..2))))> (_t2C6D,fBias2954,g2A47);
          bool _t2C79#1 = GT<real>(str2C75,fStrTh2956);
          if _t2C79 then goto ASSIGN3D0B else goto JOIN2C7B
        ASSIGN3D0B:  preds = [COND2C92]
          bool _t2C82#1 = GTE<real>(_t29AD,fMaskTh2955);
          if _t2C82 then goto ASSIGN2C86 else goto JOIN2C84
        ASSIGN2C86:  preds = [COND2C8C]
          bool _t2C85#1 = true;
          goto JOIN2C84
        JOIN2C84:  preds = [ASSIGN2C86,COND2C8C]
          bool _t2C88#1 = phi(_t2C85,vv2984)
          goto JOIN2C7B
        JOIN2C7B:  preds = [JOIN2C84,COND2C92]
          bool _t2C8E#1 = phi(_t2C88,vv2984)
          goto JOIN29CB
        JOIN29CB:  preds = [JOIN2C7B,COND2C98]
          bool _t2C94#1 = phi(_t2C8E,vv2984)
          bool _t2C9B#1 = BNot(_t2C94);
          if _t2C9B then goto ASSIGN2CA1 else goto JOIN2C9D
        ASSIGN2CA1:  preds = [COND2FA2]
          int _t2CA0#1 = 0;
          bool _t2CA2#1 = GT<int>(verb294A,_t2CA0);
          if _t2CA2 then goto JOIN2CA4 else goto JOIN2CA4
        JOIN2CA4:  preds = [COND2CAA,COND2CAA]
          bool _t2CA6#1 = phi(vv2984,vv2984)
          if _t2CA6 then goto ASSIGN2CAE else goto ASSIGN2CB0
        ASSIGN2CAE:  preds = [COND2CB3]
          bool _t2CAC#1 = true;
          goto JOIN2CAB
        JOIN2CAB:  preds = [ASSIGN2CAE,ASSIGN2CB2]
          bool _t2CAD#1 = phi(_t2CAC,_t2CB1)
          if _t2CAD then goto ASSIGN2CB6 else goto JOIN2CB4
        ASSIGN2CB6:  preds = [COND2FA0]
          string _t2CB5#1 = "(i#";
          string _t2CB7#1 = " @ ";
          string _t2CB9#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID296E,_t2CB5,iter2942,_t2CB7,pos296C,_t2CB9);
          string _t2CBC#1 = "!inside=";
          if _t29BC then goto ASSIGN2CD4 else goto JOIN2CD0
        ASSIGN2CD4:  preds = [COND2CDA]
          real _t2CD3#1 = 0.3e1;
          bool _t2CD5#1 = GT<real>(_t29B8,_t2CD3);
          goto JOIN2CD0
        JOIN2CD0:  preds = [ASSIGN3D0D,COND2CDA]
          bool _t2CD6#1 = phi(_t2CD5,vv2984)
          string _t2CDD#1 = " || fStrength=";
          real x2CE1#21 = TensorIndex<tensor[3],[0]>(pos296C);
          real y2CE3#21 = TensorIndex<tensor[3],[1]>(pos296C);
          real z2CE5#31 = TensorIndex<tensor[3],[2]>(pos296C);
          real _t2CE7#7 = 0.2e1;
          int _t2CEB#1 = 2;
          real _t2D03#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[])<(T0 * T1 * (T2)^2 * Cosine(((T1)^2 + (T4)^2 + (T2)^2)))> (_t2CE7,x2CE1,z2CE5,x2CE1,y2CE3,z2CE5);
          real _t2D21#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[])<(T0 * T1 * (T2)^2 * Cosine(((T3)^2 + (T1)^2 + (T2)^2)))> (_t2CE7,y2CE3,z2CE5,x2CE1,y2CE3,z2CE5);
          real _t2D57#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[])<((T0 * (T1)^3 * Cosine(((T2)^2 + (T3)^2 + (T1)^2))) + (T0 * T1 * Sine(((T2)^2 + (T3)^2 + (T1)^2))))> (_t2CE7,z2CE5,x2CE1,y2CE3,z2CE5,_t2CE7,z2CE5,x2CE1,y2CE3,z2CE5);
          tensor[3] g2D59#1 = <tensor[3]>[_t2D03,_t2D21,_t2D57];
          int _t2D64#1 = -4;
          real _t2D66#6 = IntToReal(_t2D64);
          real _t2DA4#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[],T10[])<((T0 * (T1)^2 * (T2)^2 * Sine(((T1)^2 + (T4)^2 + (T2)^2))) + (T6 * (T2)^2 * Cosine(((T1)^2 + (T4)^2 + (T2)^2))))> (_t2D66,x2CE1,z2CE5,x2CE1,y2CE3,z2CE5,_t2CE7,z2CE5,x2CE1,y2CE3,z2CE5);
          real _t2DC6#2 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[])<(T0 * T1 * T2 * (T3)^2 * Sine(((T1)^2 + (T2)^2 + (T3)^2)))> (_t2D66,x2CE1,y2CE3,z2CE5,x2CE1,y2CE3,z2CE5);
          real _t2E02#2 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[],T10[],T11[])<((T0 * T1 * (T2)^3 * Sine(((T1)^2 + (T4)^2 + (T2)^2))) + (T6 * T1 * T2 * Cosine(((T1)^2 + (T4)^2 + (T2)^2))))> (_t2D66,x2CE1,z2CE5,x2CE1,y2CE3,z2CE5,_t29BA,x2CE1,z2CE5,x2CE1,y2CE3,z2CE5);
          tensor[3] _t2E04#1 = <tensor[3]>[_t2DA4,_t2DC6,_t2E02];
          real _t2E68#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[],T10[])<((T0 * (T1)^2 * (T2)^2 * Sine(((T3)^2 + (T1)^2 + (T2)^2))) + (T6 * (T2)^2 * Cosine(((T3)^2 + (T1)^2 + (T2)^2))))> (_t2D66,y2CE3,z2CE5,x2CE1,y2CE3,z2CE5,_t2CE7,z2CE5,x2CE1,y2CE3,z2CE5);
          real _t2EA4#2 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[],T10[],T11[])<((T0 * T1 * (T2)^3 * Sine(((T3)^2 + (T1)^2 + (T2)^2))) + (T6 * T1 * T2 * Cosine(((T3)^2 + (T1)^2 + (T2)^2))))> (_t2D66,y2CE3,z2CE5,x2CE1,y2CE3,z2CE5,_t29BA,y2CE3,z2CE5,x2CE1,y2CE3,z2CE5);
          tensor[3] _t2EA6#1 = <tensor[3]>[_t2DC6,_t2E68,_t2EA4];
          real _t2F3E#1 = 0.1e2;
          real _t2F72#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[],T10[],T11[],T12[],T13[])<((T0 * (T1)^4 * Sine(((T2)^2 + (T3)^2 + (T1)^2))) + (T5 * (T1)^2 * Cosine(((T2)^2 + (T3)^2 + (T1)^2))) + (T10 * Sine(((T2)^2 + (T3)^2 + (T1)^2))))> (_t2D66,z2CE5,x2CE1,y2CE3,z2CE5,_t2F3E,z2CE5,x2CE1,y2CE3,z2CE5,_t2CE7,x2CE1,y2CE3,z2CE5);
          tensor[3] _t2F74#1 = <tensor[3]>[_t2E02,_t2EA4,_t2F72];
          tensor[3,3] hess2F76#1 = <tensor[3,3]>[_t2E04,_t2EA6,_t2F74];
          (real[3] _t2F7A#1,tensor[3][3] evecs2F7B#0) = Eigen3x3(hess2F76);
          real _t2F7F#1 = Subscript<real[3]>(_t2F7A,_t2CEB);
          real str2F87#1 = λ(T0[],T1[],T2[3])<(Neg(T0)) / ( (T1 + Sqrt(Σ(i0=0..2)<((T2_{i0} * T2_{i0}))>(i0=0..2))))> (_t2F7F,fBias2954,g2D59);
          string _t2F8B#1 = " <= fStrTh=";
          string _t2F8D#1 = " || fMask(pos)=";
          string _t2F94#1 = " < fMaskTh=";
          string _t2F96#1 = " || fTest(pos)=";
          bool _t2F99#1 = true;
          string _t2F9D#1 = " ==>DIE\n";
          Print<[string,bool,string,real,string,real,string,real,string,real,string,bool,string]>(_t2CBC,_t2CD6,_t2CDD,str2F87,_t2F8B,fStrTh2956,_t2F8D,_t29AD,_t2F94,fMaskTh2955,_t2F96,_t2F99,_t2F9D);
          goto JOIN2CB4
        JOIN2CB4:  preds = [MASSIGN3D39,COND2FA0]
          die
          goto JOIN2C9D
        JOIN2C9D:  preds = [*DIE2FA1,COND2FA2]
          bool _t2FA5#1 = GT<real>(travMax2951,_t29AD);
          if _t2FA5 then goto ASSIGN2FA9 else goto JOIN2FA7
        ASSIGN2FA9:  preds = [COND2FAD]
          bool _t2FA8#1 = GT<real>(trav2973,travMax2951);
          if _t2FA8 then goto DIE2FAB else goto JOIN2FAA
        DIE2FAB:  preds = [COND2FAC]
          die
          goto JOIN2FAA
        JOIN2FAA:  preds = [*DIE2FAB,COND2FAC]
          goto JOIN2FA7
        JOIN2FA7:  preds = [JOIN2FAA,COND2FAD]
          bool _t2FAE#1 = BNot(found2971);
          if _t2FAE then goto ASSIGN2FB2 else goto ASSIGN303C
        ASSIGN2FB2:  preds = [COND3B88]
          int _t2FB1#3 = 0;
          bool _t2FB3#1 = GT<int>(nfsMax2950,_t2FB1);
          if _t2FB3 then goto ASSIGN2FB7 else goto JOIN2FB5
        ASSIGN2FB7:  preds = [COND2FE5]
          bool _t2FB6#1 = GT<int>(nfs2972,nfsMax2950);
          if _t2FB6 then goto ASSIGN3DEA else goto JOIN2FB8
        ASSIGN3DEA:  preds = [COND2FE4]
          bool _t2FBD#1 = GT<int>(verb294A,_t2FB1);
          if _t2FBD then goto JOIN2FBF else goto JOIN2FBF
        JOIN2FBF:  preds = [COND2FC5,COND2FC5]
          bool _t2FC1#1 = phi(vv2984,vv2984)
          if _t2FC1 then goto ASSIGN2FC9 else goto ASSIGN2FCB
        ASSIGN2FC9:  preds = [COND2FCE]
          bool _t2FC7#1 = true;
          goto JOIN2FC6
        JOIN2FC6:  preds = [ASSIGN2FC9,ASSIGN2FCD]
          bool _t2FC8#1 = phi(_t2FC7,_t2FCC)
          if _t2FC8 then goto ASSIGN2FD1 else goto JOIN2FCF
        ASSIGN2FD1:  preds = [COND2FE2]
          string _t2FD0#1 = "(i#";
          string _t2FD2#1 = " @ ";
          string _t2FD4#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID296E,_t2FD0,iter2942,_t2FD2,pos296C,_t2FD4);
          string _t2FD7#1 = "nfs=";
          string _t2FD9#1 = " > nfsMax=";
          string _t2FDB#1 = " || trav=";
          string _t2FDD#1 = " > travMax=";
          string _t2FDF#1 = " =>DIE\n";
          Print<[string,int,string,int,string,real,string,real,string]>(_t2FD7,nfs2972,_t2FD9,nfsMax2950,_t2FDB,trav2973,_t2FDD,travMax2951,_t2FDF);
          goto JOIN2FCF
        JOIN2FCF:  preds = [MASSIGN2FE1,COND2FE2]
          die
          goto JOIN2FB8
        JOIN2FB8:  preds = [*DIE2FE3,COND2FE4]
          goto JOIN2FB5
        JOIN2FB5:  preds = [JOIN2FB8,COND2FE5]
          tensor[3] _t2FE6#4 = fStep2531 (pos296C);
          tensor[3] step2FE8#2 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs2949,_t2FE6);
          tensor[3] pos2FEB#2 = λ(T0[3],T1[],T2[3])<(T0_{i0} + (T1 * T2_{i0}))>_{3} (pos296C,sfs2949,_t2FE6);
          real mvmt2FF5#2 = λ(T0[],T1[3],T2[],T3[],T4[])<((Sqrt((T0 * T0 * Σ(i0=0..2)<((T1_{i0} * T1_{i0}))>(i0=0..2)))) / ( T2) + (T4 * (T3) - ((Sqrt((T0 * T0 * Σ(i0=0..2)<((T1_{i0} * T1_{i0}))>(i0=0..2)))) / ( T2))))> (sfs2949,_t2FE6,tipd2953,mvmt2974,hist2948);
          bool _t2FF8#1 = GT<real>(mvmt2FF5,fsEps294C);
          if _t2FF8 then goto ASSIGN3EBC else goto ASSIGN3009
        ASSIGN3EBC:  preds = [COND300F]
          real trav2FFF#1 = λ(T0[],T1[],T2[3],T3[])<(T0 + (Sqrt((T1 * T1 * Σ(i0=0..2)<((T2_{i0} * T2_{i0}))>(i0=0..2)))) / ( T3))> (trav2973,sfs2949,_t2FE6,tipd2953);
          int _t3002#1 = 1;
          int nfs3004#1 = IAdd(nfs2972,_t3002);
          goto JOIN2FFA
        JOIN2FFA:  preds = [ASSIGN3006,ASSIGN300C]
          real mvmt300B#2 = phi(mvmt2FF5,mvmt300A)
          real trav3000#1 = phi(trav2FFF,_t29AD)
          int nfs3005#1 = phi(nfs3004,nfs2972)
          bool found3008#2 = phi(found2971,found3007)
          bool _t3017#1 = GT<int>(verb294A,_t2FB1);
          if _t3017 then goto JOIN3019 else goto JOIN3019
        JOIN3019:  preds = [COND301F,COND301F]
          bool _t301B#1 = phi(vv2984,vv2984)
          if _t301B then goto ASSIGN3023 else goto ASSIGN3025
        ASSIGN3023:  preds = [COND3028]
          bool _t3021#1 = true;
          goto JOIN3020
        JOIN3020:  preds = [ASSIGN3023,ASSIGN3027]
          bool _t3022#1 = phi(_t3021,_t3026)
          if _t3022 then goto ASSIGN302B else goto JOIN3029
        ASSIGN302B:  preds = [COND303A]
          string _t302A#1 = "(i#";
          string _t302C#1 = " @ ";
          string _t302E#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID296E,_t302A,iter2942,_t302C,pos2FEB,_t302E);
          string _t3031#1 = "step=";
          string _t3033#1 = "; mvmt=";
          string _t3035#1 = " => found=";
          string _t3037#1 = "\n";
          Print<[string,tensor[3],string,real,string,bool,string]>(_t3031,step2FE8,_t3033,mvmt300B,_t3035,found3008,_t3037);
          goto JOIN3029
        JOIN3029:  preds = [MASSIGN3039,COND303A]
          goto JOIN2FB0
        JOIN2FB0:  preds = [JOIN3029,JOIN373D]
          int born3560#1 = phi(born2976,born3B86)
          real closest35E8#1 = phi(closest2975,closest35F7)
          real mvmt2FF6#1 = phi(mvmt300B,mvmt3735)
          real trav3012#1 = phi(trav3000,trav372F)
          int nfs3011#1 = phi(nfs3005,nfs2972)
          bool found3010#1 = phi(found3008,found2971)
          tensor[3] step2FE9#1 = phi(step2FE8,step3729)
          real hh357B#1 = phi(hh296F,hh3725)
          tensor[3] pos2FEC#2 = phi(pos2FEB,pos3713)
          self.pos = pos2FEC;
          self._pos = pos2FEC;
          self.hh = hh357B;
          self.step = step2FE9;
          self.found = found3010;
          self.nfs = nfs3011;
          self.trav = trav3012;
          self.mvmt = mvmt2FF6;
          self.closest = closest35E8;
          self.born = born3560;
          self.first = vv2984;
          active
        ASSIGN3025:  preds = [COND3028]
          int _t3024#1 = 1;
          bool _t3026#1 = GT<int>(verb294A,_t3024);
          goto JOIN3020
        ASSIGN3009:  preds = [COND300F]
          bool found3007#1 = true;
          real mvmt300A#1 = 0.1e1;
          goto JOIN2FFA
        ASSIGN2FCB:  preds = [COND2FCE]
          int _t2FCA#1 = 1;
          bool _t2FCC#1 = GT<int>(verb294A,_t2FCA);
          goto JOIN2FC6
        ASSIGN303C:  preds = [COND3B88]
          int _t303B#25 = 0;
          bool _t303D#1 = EQ<int>(_t303B,fDim2946);
          if _t303D then goto SAVE3041 else goto JOIN303F
        SAVE3041:  preds = [COND304C]
          self.pos = pos296C;
          stabilize
          goto JOIN303F
        JOIN303F:  preds = [*STABILIZE3040,COND304C]
          tensor[3] _t304D#51 = fStep2531 (pos296C);
          tensor[3] step304F#4 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs2949,_t304D);
          tensor[3] pos3051#17 = λ(T0[3],T1[],T2[3])<(T0_{i0} + (T1 * T2_{i0}))>_{3} (pos296C,sfs2949,_t304D);
          real trav3059#4 = λ(T0[],T1[],T2[3],T3[])<(T0 + (Sqrt((T1 * T1 * Σ(i0=0..2)<((T2_{i0} * T2_{i0}))>(i0=0..2)))) / ( T3))> (trav2973,sfs2949,_t304D,tipd2953);
          point[] _t3067#1 = SphereQuery<3,point>(pos3051,rad2943);
        FOREACH306D:  preds = [ASSIGN3D3B,NEXT314D]
          foreach (P3069 in _t3067) on exit goto ASSIGN3D3C
            int nn306C#3 = phi(_t303B,nn314B)
            tensor[3] force306B#9 = phi(_t29B3,force3147)
            real oldE306A#4 = phi(_t29AD,oldE30E1)
          tensor[3] _t306E#20 = P3069.pos;
          real _t3074#1 = λ(T0[3],T1[3],T2[],T3[3],T4[])<(Sqrt(Σ(i0=0..2)<(((T0_{i0}) - ((T1_{i0} + (T2 * T3_{i0}))) * (T0_{i0}) - ((T1_{i0} + (T2 * T3_{i0})))))>(i0=0..2))) / ( T4)> (_t306E,pos296C,sfs2949,_t304D,tipd2953);
          bool _t3076#1 = LT<real>(_t3074,fsEps294C);
          if _t3076 then goto ASSIGN307A else goto JOIN3078
        ASSIGN307A:  preds = [COND3080]
          real _t3079#1 = P3069.ID;
          bool _t307B#1 = LTE<real>(ID296E,_t3079);
          if _t307B then goto DIE307E else goto JOIN307D
        DIE307E:  preds = [COND307F]
          die
          goto JOIN307D
        JOIN307D:  preds = [*DIE307E,COND307F]
          goto JOIN3078
        JOIN3078:  preds = [JOIN307D,COND3080]
          real _t3084#3 = λ(T0[3],T1[3],T2[],T3[3],T4[])<(Sqrt(Σ(i0=0..2)<(((T0_{i0}) - ((T1_{i0} + (T2 * T3_{i0}))) * (T0_{i0}) - ((T1_{i0} + (T2 * T3_{i0})))))>(i0=0..2))) / ( T4)> (_t306E,pos296C,sfs2949,_t304D,rad2943);
          real _t3087#10 = 0.2e1;
          real _t3089#10 = 0.3e1;
          real _t308B#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t3087,_t3089);
          bool _t3096#2 = LT<real>(_t3084,_t308B);
          if _t3096 then goto ASSIGN309A else goto ASSIGN30B6
        ASSIGN309A:  preds = [COND30DC]
          real _t3099#1 = 0.1e1;
          real _t309B#1 = -0.5646e1;
          real _t309D#1 = 0.119835e2;
          real _t309F#1 = -0.113535e2;
          real _t30A1#1 = 0.40550625e1;
          real _t30B1#1 = λ(T0[],T1[3],T2[3],T3[],T4[3],T5[],T6[],T7[3],T8[3],T9[],T10[3],T11[],T12[],T13[3],T14[3],T15[],T16[3],T17[],T18[],T19[],T20[3],T21[3],T22[],T23[3],T24[])<(T0 + ((Sqrt(Σ(i0=0..2)<(((T1_{i0}) - ((T2_{i0} + (T3 * T4_{i0}))) * (T1_{i0}) - ((T2_{i0} + (T3 * T4_{i0})))))>(i0=0..2))) / ( T5) * (T6 + ((Sqrt(Σ(i0=0..2)<(((T1_{i0}) - ((T2_{i0} + (T3 * T4_{i0}))) * (T1_{i0}) - ((T2_{i0} + (T3 * T4_{i0})))))>(i0=0..2))) / ( T5) * (T12 + ((Sqrt(Σ(i0=0..2)<(((T1_{i0}) - ((T2_{i0} + (T3 * T4_{i0}))) * (T1_{i0}) - ((T2_{i0} + (T3 * T4_{i0})))))>(i0=0..2))) / ( T5) * (T18 + (T19 * (Sqrt(Σ(i0=0..2)<(((T1_{i0}) - ((T2_{i0} + (T3 * T4_{i0}))) * (T1_{i0}) - ((T2_{i0} + (T3 * T4_{i0})))))>(i0=0..2))) / ( T5)))))))))> (_t3099,_t306E,pos296C,sfs2949,_t304D,rad2943,_t309B,_t306E,pos296C,sfs2949,_t304D,rad2943,_t309D,_t306E,pos296C,sfs2949,_t304D,rad2943,_t309F,_t30A1,_t306E,pos296C,sfs2949,_t304D,rad2943);
          goto JOIN3098
        JOIN3098:  preds = [ASSIGN3ECD,JOIN30B9]
          real _t30B2#1 = phi(_t30B1,_t30D5)
          real oldE30E1#1 = λ(T0[],T1[])<(T0 + T1)> (oldE306A,_t30B2);
          if _t3096 then goto ASSIGN30FC else goto ASSIGN3112
        ASSIGN30FC:  preds = [COND3136]
          real _t30FB#1 = -0.5646e1;
          real _t30FD#1 = 0.23967e2;
          real _t30FF#1 = -0.340605e2;
          real _t3101#1 = 0.1622025e2;
          real _t310D#1 = λ(T0[],T1[3],T2[3],T3[],T4[3],T5[],T6[],T7[3],T8[3],T9[],T10[3],T11[],T12[],T13[],T14[3],T15[3],T16[],T17[3],T18[])<(T0 + ((Sqrt(Σ(i0=0..2)<(((T1_{i0}) - ((T2_{i0} + (T3 * T4_{i0}))) * (T1_{i0}) - ((T2_{i0} + (T3 * T4_{i0})))))>(i0=0..2))) / ( T5) * (T6 + ((Sqrt(Σ(i0=0..2)<(((T1_{i0}) - ((T2_{i0} + (T3 * T4_{i0}))) * (T1_{i0}) - ((T2_{i0} + (T3 * T4_{i0})))))>(i0=0..2))) / ( T5) * (T12 + (T13 * (Sqrt(Σ(i0=0..2)<(((T1_{i0}) - ((T2_{i0} + (T3 * T4_{i0}))) * (T1_{i0}) - ((T2_{i0} + (T3 * T4_{i0})))))>(i0=0..2))) / ( T5)))))))> (_t30FB,_t306E,pos296C,sfs2949,_t304D,rad2943,_t30FD,_t306E,pos296C,sfs2949,_t304D,rad2943,_t30FF,_t3101,_t306E,pos296C,sfs2949,_t304D,rad2943);
          goto JOIN30FA
        JOIN30FA:  preds = [ASSIGN3ED5,JOIN3115]
          real _t310E#1 = phi(_t310D,_t312F)
          real _t3139#1 = 0.1e1;
          tensor[3] force3147#1 = λ(T0[3],T1[],T2[],T3[],T4[3],T5[3],T6[],T7[3],T8[3],T9[3],T10[],T11[3])<(T0_{i0} + ((T1 * (T2) / ( T3) * (T4_{i0}) - ((T5_{i0} + (T6 * T7_{i0}))))) / ( Sqrt(Σ(i2=0..2)<(((T4_{i2}) - ((T5_{i2} + (T6 * T7_{i2}))) * (T4_{i2}) - ((T5_{i2} + (T6 * T7_{i2})))))>(i2=0..2))))>_{3} (force306B,_t310E,_t3139,rad2943,_t306E,pos296C,sfs2949,_t304D,_t306E,pos296C,sfs2949,_t304D);
          int _t3149#1 = 1;
          int nn314B#1 = IAdd(nn306C,_t3149);
          goto FOREACH306D
        ASSIGN3112:  preds = [COND3136]
          real _t3111#1 = 0.1e1;
          bool _t3113#1 = LT<real>(_t3084,_t3111);
          if _t3113 then goto ASSIGN3117 else goto JOIN3115
        ASSIGN3117:  preds = [COND3133]
          real _t3116#1 = 0.1234567901e-1;
          real _t311A#2 = 0.486e1;
          real _t311C#1 = -0.1458e2;
          real _t311E#1 = 0.1458e2;
          real _t312E#1 = λ(T0[],T1[],T2[3],T3[3],T4[],T5[3],T6[],T7[],T8[],T9[],T10[3],T11[3],T12[],T13[3],T14[],T15[],T16[],T17[],T18[3],T19[3],T20[],T21[3],T22[],T23[],T24[],T25[],T26[],T27[3],T28[3],T29[],T30[3],T31[],T32[])<(T0 * ((T1 * (Sqrt(Σ(i0=0..2)<(((T2_{i0}) - ((T3_{i0} + (T4 * T5_{i0}))) * (T2_{i0}) - ((T3_{i0} + (T4 * T5_{i0})))))>(i0=0..2))) / ( T6))) - (T7) * (T8 + (((T1 * (Sqrt(Σ(i0=0..2)<(((T2_{i0}) - ((T3_{i0} + (T4 * T5_{i0}))) * (T2_{i0}) - ((T3_{i0} + (T4 * T5_{i0})))))>(i0=0..2))) / ( T6))) - (T7) * (T16 + (((T1 * (Sqrt(Σ(i0=0..2)<(((T2_{i0}) - ((T3_{i0} + (T4 * T5_{i0}))) * (T2_{i0}) - ((T3_{i0} + (T4 * T5_{i0})))))>(i0=0..2))) / ( T6))) - (T7) * (T24) - ((T8 * ((T1 * (Sqrt(Σ(i0=0..2)<(((T2_{i0}) - ((T3_{i0} + (T4 * T5_{i0}))) * (T2_{i0}) - ((T3_{i0} + (T4 * T5_{i0})))))>(i0=0..2))) / ( T6))) - (T7))))))))> (_t3116,_t3089,_t306E,pos296C,sfs2949,_t304D,rad2943,_t3087,_t311A,_t3089,_t306E,pos296C,sfs2949,_t304D,rad2943,_t3087,_t311C,_t3089,_t306E,pos296C,sfs2949,_t304D,rad2943,_t3087,_t311E,_t311A,_t3089,_t306E,pos296C,sfs2949,_t304D,rad2943,_t3087);
          goto JOIN3115
        JOIN3115:  preds = [ASSIGN3EE1,COND3133]
          real _t312F#1 = phi(_t312E,_t29AD)
          goto JOIN30FA
        ASSIGN30B6:  preds = [COND30DC]
          real _t30B5#1 = 0.1e1;
          bool _t30B7#1 = LT<real>(_t3084,_t30B5);
          if _t30B7 then goto ASSIGN30BB else goto JOIN30B9
        ASSIGN30BB:  preds = [COND30D9]
          real _t30BA#1 = -0.1e-2;
          real _t30BC#1 = 0.9e-1;
          real _t30BE#1 = -0.54e0;
          real _t30C0#1 = 0.1215e1;
          real _t30C2#1 = 0.972e0;
          real _t30D4#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[3],T6[3],T7[],T8[3],T9[],T10[],T11[],T12[3],T13[3],T14[],T15[3],T16[],T17[],T18[],T19[3],T20[3],T21[],T22[3],T23[],T24[],T25[],T26[3],T27[3],T28[],T29[3],T30[],T31[],T32[],T33[3],T34[3],T35[],T36[3],T37[],T38[],T39[])<(T0 + ((T1 + ((T2 + ((T3) - ((T4 * ((Sqrt(Σ(i0=0..2)<(((T5_{i0}) - ((T6_{i0} + (T7 * T8_{i0}))) * (T5_{i0}) - ((T6_{i0} + (T7 * T8_{i0})))))>(i0=0..2))) / ( T9)) - ((T10) / ( T11)))) * ((Sqrt(Σ(i0=0..2)<(((T5_{i0}) - ((T6_{i0} + (T7 * T8_{i0}))) * (T5_{i0}) - ((T6_{i0} + (T7 * T8_{i0})))))>(i0=0..2))) / ( T9)) - ((T10) / ( T11)))) * ((Sqrt(Σ(i0=0..2)<(((T5_{i0}) - ((T6_{i0} + (T7 * T8_{i0}))) * (T5_{i0}) - ((T6_{i0} + (T7 * T8_{i0})))))>(i0=0..2))) / ( T9)) - ((T10) / ( T11)))) * ((Sqrt(Σ(i0=0..2)<(((T5_{i0}) - ((T6_{i0} + (T7 * T8_{i0}))) * (T5_{i0}) - ((T6_{i0} + (T7 * T8_{i0})))))>(i0=0..2))) / ( T9)) - ((T10) / ( T11)) * ((Sqrt(Σ(i0=0..2)<(((T5_{i0}) - ((T6_{i0} + (T7 * T8_{i0}))) * (T5_{i0}) - ((T6_{i0} + (T7 * T8_{i0})))))>(i0=0..2))) / ( T9)) - ((T10) / ( T11))))> (_t30BA,_t30BC,_t30BE,_t30C0,_t30C2,_t306E,pos296C,sfs2949,_t304D,rad2943,_t3087,_t3089,_t306E,pos296C,sfs2949,_t304D,rad2943,_t3087,_t3089,_t306E,pos296C,sfs2949,_t304D,rad2943,_t3087,_t3089,_t306E,pos296C,sfs2949,_t304D,rad2943,_t3087,_t3089,_t306E,pos296C,sfs2949,_t304D,rad2943,_t3087,_t3089);
          goto JOIN30B9
        JOIN30B9:  preds = [ASSIGN3EEA,COND30D9]
          real _t30D5#1 = phi(_t30D4,_t29AD)
          goto JOIN3098
        ASSIGN3D3C:  preds = [FOREACH306D]
          bool _t3150#1 = EQ<int>(_t303B,nn306C);
          if _t3150 then goto ASSIGN3D3D else goto JOIN3152
        ASSIGN3D3D:  preds = [COND355F]
          bool _t3158#1 = GT<int>(pcp2947,_t303B);
          if _t3158 then goto ASSIGN3D3E else goto JOIN315A
        ASSIGN3D3E:  preds = [COND3170]
          bool _t315E#1 = GT<int>(iter2942,_t303B);
          if _t315E then goto ASSIGN3164 else goto JOIN3160
        ASSIGN3164:  preds = [COND316A]
          int _t3163#1 = IMod(iter2942,pcp2947);
          bool _t3165#1 = EQ<int>(_t303B,_t3163);
          goto JOIN3160
        JOIN3160:  preds = [ASSIGN3D3F,COND316A]
          bool _t3166#1 = phi(_t3165,vv2984)
          goto JOIN315A
        JOIN315A:  preds = [JOIN3160,COND3170]
          bool _t316C#1 = phi(_t3166,vv2984)
          if _t316C then goto ASSIGN3173 else goto JOIN3171
        ASSIGN3173:  preds = [COND3187]
          int _t3172#1 = IDiv(iter2942,pcp2947);
          int _t3174#2 = 2;
          int _t3176#1 = IMod(_t3172,_t3174);
          int _t317A#1 = IMul(_t3176,_t3174);
          int _t317C#1 = 1;
          int _t317E#1 = ISub(_t317A,_t317C);
          goto JOIN3171
        JOIN3171:  preds = [ASSIGN317F,COND3187]
          int _t3181#1 = phi(_t317E,_t303B)
          bool _t318A#1 = GT<int>(_t3181,_t303B);
          if _t318A then goto ASSIGN318F else goto JOIN318C
        ASSIGN318F:  preds = [COND3192]
          bool _t318D#1 = LT<int>(born2976,nnmax2944);
          goto JOIN318C
        JOIN318C:  preds = [ASSIGN318F,COND3192]
          bool _t318E#1 = phi(_t318D,vv2984)
          bool _t3193#1 = BNot(_t318E);
          if _t3193 then goto SAVE3197 else goto JOIN3195
        SAVE3197:  preds = [COND31A2]
          self.pos = pos3051;
          self._pos = pos3051;
          self.step = step304F;
          self.trav = trav3059;
          active
          goto JOIN3195
        JOIN3195:  preds = [*ACTIVE3196,COND31A2]
          tensor[3,3] _t31A3#6 = fPerp27E7 (pos3051);
          tensor[3] _t31A9#2 = <tensor[3]>[tipd2953,_t29AD,_t29AD];
          tensor[3] noff031AB#1 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (_t31A3,_t31A9);
          tensor[3] _t31B3#2 = <tensor[3]>[_t29AD,tipd2953,_t29AD];
          tensor[3] noff131B5#1 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (_t31A3,_t31B3);
          tensor[3] _t31BD#2 = <tensor[3]>[_t29AD,_t29AD,tipd2953];
          tensor[3] noff231BF#1 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (_t31A3,_t31BD);
          real _t31C4#1 = λ(T0[3 3],T1[3])<Sqrt(Σ(i0=0..2)<((Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2) * Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)))>(i0=0..2))> (_t31A3,_t31A9);
          real _t31C6#1 = λ(T0[3 3],T1[3])<Sqrt(Σ(i0=0..2)<((Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2) * Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)))>(i0=0..2))> (_t31A3,_t31B3);
          bool _t31C8#1 = GT<real>(_t31C4,_t31C6);
          if _t31C8 then goto JOIN31CA else goto JOIN31CA
        JOIN31CA:  preds = [COND31D0,COND31D0]
          tensor[3] _t31CC#2 = phi(noff031AB,noff131B5)
          real _t31D4#1 = λ(T0[3])<Sqrt(Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2))> (_t31CC);
          real _t31D6#1 = λ(T0[3 3],T1[3])<Sqrt(Σ(i0=0..2)<((Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2) * Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)))>(i0=0..2))> (_t31A3,_t31BD);
          bool _t31D8#1 = GT<real>(_t31D4,_t31D6);
          if _t31D8 then goto JOIN31DA else goto JOIN31DA
        JOIN31DA:  preds = [COND31E0,COND31E0]
          tensor[3] _t31DC#4 = phi(_t31CC,noff231BF)
          tensor[3] npos31E7#1 = λ(T0[],T1[3],T2[3],T3[3],T4[],T5[3])<((T0 * T1_{i0} * (1) / ( Sqrt(Σ(i3=0..2)<((T1_{i3} * T1_{i3}))>(i3=0..2)))) + T3_{i0} + (T4 * T5_{i0}))>_{3} (tipd2953,_t31DC,_t31DC,pos296C,sfs2949,_t304D);
          tensor[3] _t31E9#1 = fStep2531 (npos31E7);
          tensor[3] npos31ED#5 = λ(T0[],T1[3],T2[3],T3[3],T4[],T5[3],T6[],T7[3])<((T0 * T1_{i0} * (1) / ( Sqrt(Σ(i4=0..2)<((T1_{i4} * T1_{i4}))>(i4=0..2)))) + T3_{i0} + (T4 * T5_{i0}) + (T4 * T7_{i0}))>_{3} (tipd2953,_t31DC,_t31DC,pos296C,sfs2949,_t304D,sfs2949,_t31E9);
          bool _t31F3#2 = GT<int>(verb294A,_t303B);
          if _t31F3 then goto JOIN31F5 else goto JOIN31F5
        JOIN31F5:  preds = [COND31FB,COND31FB]
          bool _t31F7#1 = phi(vv2984,vv2984)
          if _t31F7 then goto ASSIGN31FF else goto ASSIGN3201
        ASSIGN31FF:  preds = [COND3204]
          bool _t31FD#1 = true;
          goto JOIN31FC
        JOIN31FC:  preds = [ASSIGN31FF,ASSIGN3203]
          bool _t31FE#1 = phi(_t31FD,_t3202)
          if _t31FE then goto ASSIGN3207 else goto JOIN3205
        ASSIGN3207:  preds = [COND3234]
          string _t3206#1 = "(i#";
          string _t3208#1 = " @ ";
          string _t320A#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID296E,_t3206,iter2942,_t3208,pos3051,_t320A);
          string _t320D#1 = " 0==nn =>NEW(";
          string _t320F#1 = ") w/ ID=";
          real _t3212#1 = 0.1e7;
          real _t3215#1 = TensorIndex<tensor[3],[0]>(npos31ED);
          real _t3217#1 = urnd281A (_t3215);
          real _t3219#1 = TensorIndex<tensor[3],[1]>(npos31ED);
          real _t321B#1 = urnd281A (_t3219);
          real _t321F#1 = TensorIndex<tensor[3],[2]>(npos31ED);
          real _t3221#1 = urnd281A (_t321F);
          real _t3223#1 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (_t3217,_t321B,_t3221);
          real _t3225#1 = 0.1e1;
          real _t3227#1 = MathFn<fmod>(_t3223,_t3225);
          real _t322B#1 = λ(T0[],T1[])<(T0 * T1)> (_t3212,_t3227);
          real _t322D#1 = MathFn<floor>(_t322B);
          string _t3231#1 = "\n";
          Print<[string,tensor[3],string,real,string]>(_t320D,npos31ED,_t320F,_t322D,_t3231);
          goto JOIN3205
        JOIN3205:  preds = [MASSIGN3D4D,COND3234]
          real _t3243#2 = λ(T0[3],T1[],T2[3],T3[3])<Sqrt(Σ(i0=0..2)<((((T0_{i0} + (T1 * T2_{i0}))) - (T3_{i0}) * ((T0_{i0} + (T1 * T2_{i0}))) - (T3_{i0})))>(i0=0..2))> (pos296C,sfs2949,_t304D,_t29B3);
          bool _t3247#1 = LT<real>(_t3243,_t29BA);
          if _t3247 then goto ASSIGN324D else goto JOIN3249
        ASSIGN324D:  preds = [COND3253]
          real _t324C#1 = 0.3e1;
          bool _t324E#1 = GT<real>(_t3243,_t324C);
          goto JOIN3249
        JOIN3249:  preds = [ASSIGN3D50,COND3253]
          bool _t324F#1 = phi(_t324E,vv2984)
          if _t324F then goto ASSIGN325B else goto JOIN3256
        ASSIGN325B:  preds = [COND3523]
          real x325A#21 = TensorIndex<tensor[3],[0]>(pos3051);
          real y325C#21 = TensorIndex<tensor[3],[1]>(pos3051);
          real z325E#31 = TensorIndex<tensor[3],[2]>(pos3051);
          real _t3260#7 = 0.2e1;
          int _t3264#1 = 2;
          real _t327C#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[])<(T0 * T1 * (T2)^2 * Cosine(((T1)^2 + (T4)^2 + (T2)^2)))> (_t3260,x325A,z325E,x325A,y325C,z325E);
          real _t329A#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[])<(T0 * T1 * (T2)^2 * Cosine(((T3)^2 + (T1)^2 + (T2)^2)))> (_t3260,y325C,z325E,x325A,y325C,z325E);
          real _t32D0#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[])<((T0 * (T1)^3 * Cosine(((T2)^2 + (T3)^2 + (T1)^2))) + (T0 * T1 * Sine(((T2)^2 + (T3)^2 + (T1)^2))))> (_t3260,z325E,x325A,y325C,z325E,_t3260,z325E,x325A,y325C,z325E);
          tensor[3] g32D2#1 = <tensor[3]>[_t327C,_t329A,_t32D0];
          int _t32DD#1 = -4;
          real _t32DF#6 = IntToReal(_t32DD);
          real _t331D#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[],T10[])<((T0 * (T1)^2 * (T2)^2 * Sine(((T1)^2 + (T4)^2 + (T2)^2))) + (T6 * (T2)^2 * Cosine(((T1)^2 + (T4)^2 + (T2)^2))))> (_t32DF,x325A,z325E,x325A,y325C,z325E,_t3260,z325E,x325A,y325C,z325E);
          real _t333F#2 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[])<(T0 * T1 * T2 * (T3)^2 * Sine(((T1)^2 + (T2)^2 + (T3)^2)))> (_t32DF,x325A,y325C,z325E,x325A,y325C,z325E);
          real _t337B#2 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[],T10[],T11[])<((T0 * T1 * (T2)^3 * Sine(((T1)^2 + (T4)^2 + (T2)^2))) + (T6 * T1 * T2 * Cosine(((T1)^2 + (T4)^2 + (T2)^2))))> (_t32DF,x325A,z325E,x325A,y325C,z325E,_t29BA,x325A,z325E,x325A,y325C,z325E);
          tensor[3] _t337D#1 = <tensor[3]>[_t331D,_t333F,_t337B];
          real _t33E1#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[],T10[])<((T0 * (T1)^2 * (T2)^2 * Sine(((T3)^2 + (T1)^2 + (T2)^2))) + (T6 * (T2)^2 * Cosine(((T3)^2 + (T1)^2 + (T2)^2))))> (_t32DF,y325C,z325E,x325A,y325C,z325E,_t3260,z325E,x325A,y325C,z325E);
          real _t341D#2 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[],T10[],T11[])<((T0 * T1 * (T2)^3 * Sine(((T3)^2 + (T1)^2 + (T2)^2))) + (T6 * T1 * T2 * Cosine(((T3)^2 + (T1)^2 + (T2)^2))))> (_t32DF,y325C,z325E,x325A,y325C,z325E,_t29BA,y325C,z325E,x325A,y325C,z325E);
          tensor[3] _t341F#1 = <tensor[3]>[_t333F,_t33E1,_t341D];
          real _t34B7#1 = 0.1e2;
          real _t34EB#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[],T10[],T11[],T12[],T13[])<((T0 * (T1)^4 * Sine(((T2)^2 + (T3)^2 + (T1)^2))) + (T5 * (T1)^2 * Cosine(((T2)^2 + (T3)^2 + (T1)^2))) + (T10 * Sine(((T2)^2 + (T3)^2 + (T1)^2))))> (_t32DF,z325E,x325A,y325C,z325E,_t34B7,z325E,x325A,y325C,z325E,_t3260,x325A,y325C,z325E);
          tensor[3] _t34ED#1 = <tensor[3]>[_t337B,_t341D,_t34EB];
          tensor[3,3] hess34EF#1 = <tensor[3,3]>[_t337D,_t341F,_t34ED];
          (real[3] _t34F3#1,tensor[3][3] evecs34F4#0) = Eigen3x3(hess34EF);
          real _t34F8#1 = Subscript<real[3]>(_t34F3,_t3264);
          real str3500#1 = λ(T0[],T1[],T2[3])<(Neg(T0)) / ( (T1 + Sqrt(Σ(i0=0..2)<((T2_{i0} * T2_{i0}))>(i0=0..2))))> (_t34F8,fBias2954,g32D2);
          bool _t3504#1 = GT<real>(str3500,fStrTh2956);
          if _t3504 then goto ASSIGN3D7D else goto JOIN3506
        ASSIGN3D7D:  preds = [COND351D]
          bool _t350D#1 = GTE<real>(_t29AD,fMaskTh2955);
          if _t350D then goto ASSIGN3511 else goto JOIN350F
        ASSIGN3511:  preds = [COND3517]
          bool _t3510#1 = true;
          goto JOIN350F
        JOIN350F:  preds = [ASSIGN3511,COND3517]
          bool _t3513#1 = phi(_t3510,vv2984)
          goto JOIN3506
        JOIN3506:  preds = [JOIN350F,COND351D]
          bool _t3519#1 = phi(_t3513,vv2984)
          goto JOIN3256
        JOIN3256:  preds = [JOIN3506,COND3523]
          bool _t351F#1 = phi(_t3519,vv2984)
          if _t351F then goto NEW3527 else goto JOIN3526
        NEW3527:  preds = [COND352D]
          new point(npos31ED,hh296F);
          int _t3528#1 = 1;
          int born352A#1 = IAdd(born2976,_t3528);
          goto JOIN3526
        JOIN3526:  preds = [ASSIGN352C,COND352D]
          int born352B#1 = phi(born352A,born2976)
          if _t31F3 then goto JOIN3535 else goto JOIN3535
        JOIN3535:  preds = [COND353B,COND353B]
          bool _t3537#1 = phi(vv2984,vv2984)
          if _t3537 then goto ASSIGN353F else goto ASSIGN3541
        ASSIGN353F:  preds = [COND3544]
          bool _t353D#1 = true;
          goto JOIN353C
        JOIN353C:  preds = [ASSIGN353F,ASSIGN3543]
          bool _t353E#1 = phi(_t353D,_t3542)
          if _t353E then goto ASSIGN3547 else goto JOIN3545
        ASSIGN3547:  preds = [COND3552]
          string _t3546#1 = "(i#";
          string _t3548#1 = " @ ";
          string _t354A#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID296E,_t3546,iter2942,_t3548,pos3051,_t354A);
          string _t354D#1 = "nn=0; after birthing mvmt=";
          string _t354F#1 = "\n";
          Print<[string,real,string]>(_t354D,mvmt2974,_t354F);
          goto JOIN3545
        JOIN3545:  preds = [MASSIGN3551,COND3552]
          self.pos = pos3051;
          self._pos = pos3051;
          self.step = step304F;
          self.trav = trav3059;
          self.born = born352B;
          active
          goto JOIN3152
        JOIN3152:  preds = [*ACTIVE3553,COND355F]
          int born352E#9 = phi(born2976)
          tensor[3,3] _t3561#5 = fPerp27E7 (pos3051);
          tensor[3] es3565#1 = λ(T0[],T1[3 3],T2[3])<(T0 * Σ(i1=0..2)<((T1_{i0,i1} * T2_{i1}))>(i1=0..2))>_{3} (hh296F,_t3561,force306B);
          real _t3567#1 = λ(T0[],T1[3 3],T2[3])<Sqrt((T0 * T0 * Σ(i0=0..2)<((Σ(i1=0..2)<((T1_{i0,i1} * T2_{i1}))>(i1=0..2) * Σ(i1=0..2)<((T1_{i0,i1} * T2_{i1}))>(i1=0..2)))>(i0=0..2)))> (hh296F,_t3561,force306B);
          bool _t3569#1 = GT<real>(_t3567,tipd2953);
          if _t3569 then goto ASSIGN3F23 else goto JOIN356B
        ASSIGN3F23:  preds = [COND357A]
          real hh3570#1 = λ(T0[],T1[],T2[],T3[3 3],T4[3])<(T0 * (T1) / ( Sqrt((T0 * T0 * Σ(i0=0..2)<((Σ(i1=0..2)<((T3_{i0,i1} * T4_{i1}))>(i1=0..2) * Σ(i1=0..2)<((T3_{i0,i1} * T4_{i1}))>(i1=0..2)))>(i0=0..2)))))> (hh296F,tipd2953,hh296F,_t3561,force306B);
          tensor[3] es3577#1 = λ(T0[],T1[],T2[3 3],T3[3],T4[],T5[3 3],T6[3])<(T1 * (T0) / ( Sqrt((T1 * T1 * Σ(i1=0..2)<((Σ(i2=0..2)<((T2_{i1,i2} * T3_{i2}))>(i2=0..2) * Σ(i2=0..2)<((T2_{i1,i2} * T3_{i2}))>(i2=0..2)))>(i1=0..2)))) * Σ(i3=0..2)<((T2_{i0,i3} * T3_{i3}))>(i3=0..2))>_{3} (tipd2953,hh296F,_t3561,force306B,hh296F,_t3561,force306B);
          goto JOIN356B
        JOIN356B:  preds = [ASSIGN3F24,COND357A]
          tensor[3] es3578#25 = phi(es3577,es3565)
          real hh3571#2 = phi(hh3570,hh296F)
          tensor[3] _t357C#1 = λ(T0[3],T1[],T2[3],T3[3])<(T0_{i0} + (T1 * T2_{i0}) + T3_{i0})>_{3} (pos296C,sfs2949,_t304D,es3578);
          tensor[3] _t357E#23 = fStep2531 (_t357C);
          tensor[3] fs3580#2 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs2949,_t357E);
          real _t358A#1 = λ(T0[],T1[3],T2[],T3[],T4[3])<(Sqrt((T0 * T0 * Σ(i0=0..2)<((T1_{i0} * T1_{i0}))>(i0=0..2)))) / ( ((T2 * T3) + Sqrt(Σ(i0=0..2)<((T4_{i0} * T4_{i0}))>(i0=0..2))))> (sfs2949,_t357E,fsEps294C,tipd2953,es3578);
          real _t358C#3 = 0.5e0;
          bool _t358E#1 = GT<real>(_t358A,_t358C);
          if _t358E then goto ASSIGN3D81 else goto JOIN3590
        ASSIGN3D81:  preds = [COND35DC]
          real hh3593#2 = λ(T0[],T1[])<(T0 * T1)> (hh3571,_t358C);
          bool _t359A#1 = GT<int>(verb294A,_t303B);
          if _t359A then goto JOIN359C else goto JOIN359C
        JOIN359C:  preds = [COND35A2,COND35A2]
          bool _t359E#1 = phi(vv2984,vv2984)
          if _t359E then goto ASSIGN35A6 else goto ASSIGN35A8
        ASSIGN35A6:  preds = [COND35AB]
          bool _t35A4#1 = true;
          goto JOIN35A3
        JOIN35A3:  preds = [ASSIGN35A6,ASSIGN35AA]
          bool _t35A5#1 = phi(_t35A4,_t35A9)
          if _t35A5 then goto ASSIGN35AE else goto JOIN35AC
        ASSIGN35AE:  preds = [COND35CF]
          string _t35AD#1 = "(i#";
          string _t35AF#1 = " @ ";
          string _t35B1#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID296E,_t35AD,iter2942,_t35AF,pos3051,_t35B1);
          string _t35B4#1 = "nn=";
          string _t35B6#1 = "; |fs|/|es|=";
          real _t35BC#1 = λ(T0[],T1[3],T2[3])<(Sqrt((T0 * T0 * Σ(i0=0..2)<((T1_{i0} * T1_{i0}))>(i0=0..2)))) / ( Sqrt(Σ(i0=0..2)<((T2_{i0} * T2_{i0}))>(i0=0..2)))> (sfs2949,_t357E,es3578);
          string _t35BE#1 = " > 0.5; trying again with hh=";
          string _t35C0#1 = "; mvmt=";
          string _t35C2#3 = "\n";
          Print<[string,int,string,real,string,real,string,real,string]>(_t35B4,nn306C,_t35B6,_t35BC,_t35BE,hh3593,_t35C0,mvmt2974,_t35C2);
          string _t35C5#1 = "        fs=";
          Print<[string,tensor[3],string]>(_t35C5,fs3580,_t35C2);
          string _t35CA#1 = "        es=";
          Print<[string,tensor[3],string]>(_t35CA,es3578,_t35C2);
          goto JOIN35AC
        JOIN35AC:  preds = [MASSIGN3D85,COND35CF]
          self.pos = pos3051;
          self._pos = pos3051;
          self.hh = hh3593;
          self.step = step304F;
          self.trav = trav3059;
          self.born = born352E;
          active
          goto JOIN3590
        JOIN3590:  preds = [*ACTIVE35D0,COND35DC]
          real hh3594#2 = phi(hh3571)
          tensor[3] pos35E1#5 = λ(T0[3],T1[],T2[3],T3[],T4[3],T5[3])<(T0_{i0} + (T1 * T2_{i0}) + (T1 * T4_{i0}) + T5_{i0})>_{3} (pos296C,sfs2949,_t304D,sfs2949,_t357E,es3578);
          point[] _t35F4#1 = SphereQuery<3,point>(pos35E1,rad2943);
        FOREACH35FB:  preds = [ASSIGN3D87,NEXT366C]
          foreach (P35F6 in _t35F4) on exit goto ASSIGN366E
            tensor[3] mno35FA#9 = phi(_t29B3,mno3666)
            real newE35F9#6 = phi(_t29AD,newE3660)
            int nn35F8#9 = phi(_t303B,nn366A)
            real closest35F7#3 = phi(rad2943,closest3664)
          tensor[3] _t35FC#12 = P35F6.pos;
          real _t3601#1 = λ(T0[3],T1[3],T2[],T3[3],T4[],T5[3],T6[3])<Sqrt(Σ(i0=0..2)<(((T0_{i0}) - ((T1_{i0} + (T2 * T3_{i0}) + (T2 * T5_{i0}) + T6_{i0})) * (T0_{i0}) - ((T1_{i0} + (T2 * T3_{i0}) + (T2 * T5_{i0}) + T6_{i0}))))>(i0=0..2))> (_t35FC,pos296C,sfs2949,_t304D,sfs2949,_t357E,es3578);
          real _t3603#2 = λ(T0[3],T1[3],T2[],T3[3],T4[],T5[3],T6[3],T7[])<(Sqrt(Σ(i0=0..2)<(((T0_{i0}) - ((T1_{i0} + (T2 * T3_{i0}) + (T2 * T5_{i0}) + T6_{i0})) * (T0_{i0}) - ((T1_{i0} + (T2 * T3_{i0}) + (T2 * T5_{i0}) + T6_{i0}))))>(i0=0..2))) / ( T7)> (_t35FC,pos296C,sfs2949,_t304D,sfs2949,_t357E,es3578,rad2943);
          real _t3606#6 = 0.2e1;
          real _t3608#6 = 0.3e1;
          real _t360A#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t3606,_t3608);
          bool _t3615#1 = LT<real>(_t3603,_t360A);
          if _t3615 then goto ASSIGN3619 else goto ASSIGN3635
        ASSIGN3619:  preds = [COND365B]
          real _t3618#1 = 0.1e1;
          real _t361A#1 = -0.5646e1;
          real _t361C#1 = 0.119835e2;
          real _t361E#1 = -0.113535e2;
          real _t3620#1 = 0.40550625e1;
          real _t3630#1 = λ(T0[],T1[3],T2[3],T3[],T4[3],T5[],T6[3],T7[3],T8[],T9[],T10[3],T11[3],T12[],T13[3],T14[],T15[3],T16[3],T17[],T18[],T19[3],T20[3],T21[],T22[3],T23[],T24[3],T25[3],T26[],T27[],T28[],T29[3],T30[3],T31[],T32[3],T33[],T34[3],T35[3],T36[])<(T0 + ((Sqrt(Σ(i0=0..2)<(((T1_{i0}) - ((T2_{i0} + (T3 * T4_{i0}) + (T3 * T6_{i0}) + T7_{i0})) * (T1_{i0}) - ((T2_{i0} + (T3 * T4_{i0}) + (T3 * T6_{i0}) + T7_{i0}))))>(i0=0..2))) / ( T8) * (T9 + ((Sqrt(Σ(i0=0..2)<(((T1_{i0}) - ((T2_{i0} + (T3 * T4_{i0}) + (T3 * T6_{i0}) + T7_{i0})) * (T1_{i0}) - ((T2_{i0} + (T3 * T4_{i0}) + (T3 * T6_{i0}) + T7_{i0}))))>(i0=0..2))) / ( T8) * (T18 + ((Sqrt(Σ(i0=0..2)<(((T1_{i0}) - ((T2_{i0} + (T3 * T4_{i0}) + (T3 * T6_{i0}) + T7_{i0})) * (T1_{i0}) - ((T2_{i0} + (T3 * T4_{i0}) + (T3 * T6_{i0}) + T7_{i0}))))>(i0=0..2))) / ( T8) * (T27 + (T28 * (Sqrt(Σ(i0=0..2)<(((T1_{i0}) - ((T2_{i0} + (T3 * T4_{i0}) + (T3 * T6_{i0}) + T7_{i0})) * (T1_{i0}) - ((T2_{i0} + (T3 * T4_{i0}) + (T3 * T6_{i0}) + T7_{i0}))))>(i0=0..2))) / ( T8)))))))))> (_t3618,_t35FC,pos296C,sfs2949,_t304D,sfs2949,_t357E,es3578,rad2943,_t361A,_t35FC,pos296C,sfs2949,_t304D,sfs2949,_t357E,es3578,rad2943,_t361C,_t35FC,pos296C,sfs2949,_t304D,sfs2949,_t357E,es3578,rad2943,_t361E,_t3620,_t35FC,pos296C,sfs2949,_t304D,sfs2949,_t357E,es3578,rad2943);
          goto JOIN3617
        JOIN3617:  preds = [ASSIGN3F37,JOIN3638]
          real _t3631#1 = phi(_t3630,_t3654)
          real newE3660#1 = λ(T0[],T1[])<(T0 + T1)> (newE35F9,_t3631);
          real closest3664#1 = Min<real>(closest35F7,_t3601);
          tensor[3] mno3666#1 = λ(T0[3],T1[3],T2[3],T3[],T4[3],T5[],T6[3],T7[3])<(T0_{i0} + (T1_{i0}) - ((T2_{i0} + (T3 * T4_{i0}) + (T3 * T6_{i0}) + T7_{i0})))>_{3} (mno35FA,_t35FC,pos296C,sfs2949,_t304D,sfs2949,_t357E,es3578);
          int _t3668#1 = 1;
          int nn366A#1 = IAdd(nn35F8,_t3668);
          goto FOREACH35FB
        ASSIGN3635:  preds = [COND365B]
          real _t3634#1 = 0.1e1;
          bool _t3636#1 = LT<real>(_t3603,_t3634);
          if _t3636 then goto ASSIGN363A else goto JOIN3638
        ASSIGN363A:  preds = [COND3658]
          real _t3639#1 = -0.1e-2;
          real _t363B#1 = 0.9e-1;
          real _t363D#1 = -0.54e0;
          real _t363F#1 = 0.1215e1;
          real _t3641#1 = 0.972e0;
          real _t3653#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[3],T6[3],T7[],T8[3],T9[],T10[3],T11[3],T12[],T13[],T14[],T15[3],T16[3],T17[],T18[3],T19[],T20[3],T21[3],T22[],T23[],T24[],T25[3],T26[3],T27[],T28[3],T29[],T30[3],T31[3],T32[],T33[],T34[],T35[3],T36[3],T37[],T38[3],T39[],T40[3],T41[3],T42[],T43[],T44[],T45[3],T46[3],T47[],T48[3],T49[],T50[3],T51[3],T52[],T53[],T54[])<(T0 + ((T1 + ((T2 + ((T3) - ((T4 * ((Sqrt(Σ(i0=0..2)<(((T5_{i0}) - ((T6_{i0} + (T7 * T8_{i0}) + (T7 * T10_{i0}) + T11_{i0})) * (T5_{i0}) - ((T6_{i0} + (T7 * T8_{i0}) + (T7 * T10_{i0}) + T11_{i0}))))>(i0=0..2))) / ( T12)) - ((T13) / ( T14)))) * ((Sqrt(Σ(i0=0..2)<(((T5_{i0}) - ((T6_{i0} + (T7 * T8_{i0}) + (T7 * T10_{i0}) + T11_{i0})) * (T5_{i0}) - ((T6_{i0} + (T7 * T8_{i0}) + (T7 * T10_{i0}) + T11_{i0}))))>(i0=0..2))) / ( T12)) - ((T13) / ( T14)))) * ((Sqrt(Σ(i0=0..2)<(((T5_{i0}) - ((T6_{i0} + (T7 * T8_{i0}) + (T7 * T10_{i0}) + T11_{i0})) * (T5_{i0}) - ((T6_{i0} + (T7 * T8_{i0}) + (T7 * T10_{i0}) + T11_{i0}))))>(i0=0..2))) / ( T12)) - ((T13) / ( T14)))) * ((Sqrt(Σ(i0=0..2)<(((T5_{i0}) - ((T6_{i0} + (T7 * T8_{i0}) + (T7 * T10_{i0}) + T11_{i0})) * (T5_{i0}) - ((T6_{i0} + (T7 * T8_{i0}) + (T7 * T10_{i0}) + T11_{i0}))))>(i0=0..2))) / ( T12)) - ((T13) / ( T14)) * ((Sqrt(Σ(i0=0..2)<(((T5_{i0}) - ((T6_{i0} + (T7 * T8_{i0}) + (T7 * T10_{i0}) + T11_{i0})) * (T5_{i0}) - ((T6_{i0} + (T7 * T8_{i0}) + (T7 * T10_{i0}) + T11_{i0}))))>(i0=0..2))) / ( T12)) - ((T13) / ( T14))))> (_t3639,_t363B,_t363D,_t363F,_t3641,_t35FC,pos296C,sfs2949,_t304D,sfs2949,_t357E,es3578,rad2943,_t3606,_t3608,_t35FC,pos296C,sfs2949,_t304D,sfs2949,_t357E,es3578,rad2943,_t3606,_t3608,_t35FC,pos296C,sfs2949,_t304D,sfs2949,_t357E,es3578,rad2943,_t3606,_t3608,_t35FC,pos296C,sfs2949,_t304D,sfs2949,_t357E,es3578,rad2943,_t3606,_t3608,_t35FC,pos296C,sfs2949,_t304D,sfs2949,_t357E,es3578,rad2943,_t3606,_t3608);
          goto JOIN3638
        JOIN3638:  preds = [ASSIGN3F41,COND3658]
          real _t3654#1 = phi(_t3653,_t29AD)
          goto JOIN3617
        ASSIGN366E:  preds = [FOREACH35FB]
          real _t366D#9 = IntToReal(nn35F8);
          bool _t3675#2 = GT<int>(verb294A,_t303B);
          if _t3675 then goto JOIN3677 else goto JOIN3677
        JOIN3677:  preds = [COND367D,COND367D]
          bool _t3679#1 = phi(vv2984,vv2984)
          if _t3679 then goto ASSIGN3681 else goto ASSIGN3683
        ASSIGN3681:  preds = [COND3686]
          bool _t367F#1 = true;
          goto JOIN367E
        JOIN367E:  preds = [ASSIGN3681,ASSIGN3685]
          bool _t3680#1 = phi(_t367F,_t3684)
          if _t3680 then goto ASSIGN3689 else goto JOIN3687
        ASSIGN3689:  preds = [COND3698]
          string _t3688#1 = "(i#";
          string _t368A#1 = " @ ";
          string _t368C#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID296E,_t3688,iter2942,_t368A,pos35E1,_t368C);
          string _t368F#1 = "nn=";
          string _t3691#1 = "; oldE=";
          string _t3693#1 = " newE=";
          string _t3695#1 = "\n";
          Print<[string,int,string,real,string,real,string]>(_t368F,nn35F8,_t3691,oldE306A,_t3693,newE35F9,_t3695);
          goto JOIN3687
        JOIN3687:  preds = [MASSIGN3697,COND3698]
          real _t3699#2 = λ(T0[],T1[])<(T0) - (T1)> (newE35F9,oldE306A);
          tensor[3] _t369B#1 = λ(T0[3],T1[],T2[3],T3[],T4[3],T5[3],T6[3],T7[],T8[3])<((T0_{i0} + (T1 * T2_{i0}) + (T1 * T4_{i0}) + T5_{i0})) - ((T0_{i0} + (T1 * T2_{i0})))>_{3} (pos296C,sfs2949,_t304D,sfs2949,_t357E,es3578,pos296C,sfs2949,_t304D);
          real _t36A1#1 = λ(T0[],T1[3],T2[],T3[3],T4[],T5[3],T6[3],T7[3],T8[],T9[3],T10[3])<(T0 * Σ(i0=0..2)<((((T1_{i0} + (T2 * T3_{i0}) + (T2 * T5_{i0}) + T6_{i0})) - ((T1_{i0} + (T2 * T3_{i0}))) * Neg(T10_{i0})))>(i0=0..2))> (gdeTest294F,pos296C,sfs2949,_t304D,sfs2949,_t357E,es3578,pos296C,sfs2949,_t304D,force306B);
          bool _t36A3#1 = GT<real>(_t3699,_t36A1);
          if _t36A3 then goto ASSIGN36A8 else goto JOIN36A5
        ASSIGN36A8:  preds = [COND3724]
          real hh36A6#3 = λ(T0[],T1[])<(T0 * T1)> (hh3594,gdeBack294E);
          bool _t36AB#1 = EQ<real>(_t29AD,hh36A6);
          if _t36AB then goto ASSIGN36AF else goto JOIN36AD
        ASSIGN36AF:  preds = [COND36B9]
          string _t36AE#1 = "(i#";
          string _t36B0#1 = " @ ";
          string _t36B2#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID296E,_t36AE,iter2942,_t36B0,pos35E1,_t36B2);
          string _t36B5#1 = "backtracked all the way to hh=0\n";
          Print<[string]>(_t36B5);
          die
          goto JOIN36AD
        JOIN36AD:  preds = [*DIE36B8,COND36B9]
          if _t3675 then goto JOIN36C0 else goto JOIN36C0
        JOIN36C0:  preds = [COND36C6,COND36C6]
          bool _t36C2#1 = phi(vv2984,vv2984)
          if _t36C2 then goto ASSIGN36CA else goto ASSIGN36CC
        ASSIGN36CA:  preds = [COND36CF]
          bool _t36C8#1 = true;
          goto JOIN36C7
        JOIN36C7:  preds = [ASSIGN36CA,ASSIGN36CE]
          bool _t36C9#1 = phi(_t36C8,_t36CD)
          if _t36C9 then goto ASSIGN36D2 else goto JOIN36D0
        ASSIGN36D2:  preds = [COND3711]
          string _t36D1#1 = "(i#";
          string _t36D3#1 = " @ ";
          string _t36D5#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID296E,_t36D1,iter2942,_t36D3,pos35E1,_t36D5);
          string _t36D8#1 = "nn=";
          string _t36DA#1 = "; oldE=";
          string _t36DC#1 = " newE=";
          string _t36DE#1 = "; backtracking; hh=";
          string _t36E0#1 = "; mvmt=";
          string _t36E2#7 = "\n";
          Print<[string,int,string,real,string,real,string,real,string,real,string]>(_t36D8,nn35F8,_t36DA,oldE306A,_t36DC,newE35F9,_t36DE,hh36A6,_t36E0,mvmt2974,_t36E2);
          string _t36E5#1 = "      fs=";
          Print<[string,tensor[3],string]>(_t36E5,fs3580,_t36E2);
          string _t36EA#1 = "      es=";
          Print<[string,tensor[3],string]>(_t36EA,es3578,_t36E2);
          string _t36EF#1 = "      newE - oldE=";
          Print<[string,real,string]>(_t36EF,_t3699,_t36E2);
          string _t36F6#1 = "      force=";
          Print<[string,tensor[3],string]>(_t36F6,force306B,_t36E2);
          string _t36FB#1 = "      dpos=";
          Print<[string,tensor[3],string]>(_t36FB,_t369B,_t36E2);
          string _t3702#1 = "      0.5*(pos - oldpos).(-force)=";
          real _t370C#1 = λ(T0[],T1[3],T2[],T3[3],T4[],T5[3],T6[3],T7[3],T8[],T9[3],T10[3])<(T0 * Σ(i0=0..2)<((((T1_{i0} + (T2 * T3_{i0}) + (T2 * T5_{i0}) + T6_{i0})) - ((T1_{i0} + (T2 * T3_{i0}))) * Neg(T10_{i0})))>(i0=0..2))> (_t358C,pos296C,sfs2949,_t304D,sfs2949,_t357E,es3578,pos296C,sfs2949,_t304D,force306B);
          Print<[string,real,string]>(_t3702,_t370C,_t36E2);
          goto JOIN36D0
        JOIN36D0:  preds = [MASSIGN3D92,COND3711]
          self.pos = pos3051;
          self._pos = pos3051;
          self.hh = hh36A6;
          self.step = step304F;
          self.trav = trav3059;
          self.closest = closest35F7;
          self.born = born352E;
          active
          goto JOIN36A5
        JOIN36A5:  preds = [*ACTIVE3718,COND3724]
          real hh36A7#1 = phi(hh3594)
          tensor[3] pos3713#11 = phi(pos35E1)
          real hh3725#2 = λ(T0[],T1[])<(T0 * T1)> (hh36A7,gdeOppor294D);
          tensor[3] step3729#1 = λ(T0[],T1[3],T2[],T3[3],T4[3])<((T0 * T1_{i0}) + (T0 * T3_{i0}) + T4_{i0})>_{3} (sfs2949,_t304D,sfs2949,_t357E,es3578);
          real _t372D#1 = λ(T0[],T1[3],T2[],T3[3],T4[3],T5[])<(Sqrt(Σ(i0=0..2)<((((T0 * T1_{i0}) + (T0 * T3_{i0}) + T4_{i0}) * ((T0 * T1_{i0}) + (T0 * T3_{i0}) + T4_{i0})))>(i0=0..2))) / ( T5)> (sfs2949,_t304D,sfs2949,_t357E,es3578,tipd2953);
          real trav372F#1 = λ(T0[],T1[],T2[3],T3[],T4[],T5[3],T6[],T7[3],T8[3],T9[])<(T0 + (Sqrt((T1 * T1 * Σ(i0=0..2)<((T2_{i0} * T2_{i0}))>(i0=0..2)))) / ( T3) + (Sqrt(Σ(i0=0..2)<((((T1 * T2_{i0}) + (T1 * T7_{i0}) + T8_{i0}) * ((T1 * T2_{i0}) + (T1 * T7_{i0}) + T8_{i0})))>(i0=0..2))) / ( T3))> (trav2973,sfs2949,_t304D,tipd2953,sfs2949,_t304D,sfs2949,_t357E,es3578,tipd2953);
          real mvmt3735#1 = λ(T0[],T1[3],T2[],T3[3],T4[3],T5[],T6[],T7[])<((Sqrt(Σ(i0=0..2)<((((T0 * T1_{i0}) + (T0 * T3_{i0}) + T4_{i0}) * ((T0 * T1_{i0}) + (T0 * T3_{i0}) + T4_{i0})))>(i0=0..2))) / ( T5) + (T7 * (T6) - ((Sqrt(Σ(i0=0..2)<((((T0 * T1_{i0}) + (T0 * T3_{i0}) + T4_{i0}) * ((T0 * T1_{i0}) + (T0 * T3_{i0}) + T4_{i0})))>(i0=0..2))) / ( T5))))> (sfs2949,_t304D,sfs2949,_t357E,es3578,tipd2953,mvmt2974,hist2948);
          bool _t373B#1 = LT<real>(_t372D,pcmvEps294B);
          if _t373B then goto ASSIGN3D98 else goto JOIN373D
        ASSIGN3D98:  preds = [COND3B87]
          bool _t3742#3 = GT<int>(pcp2947,_t303B);
          if _t3742 then goto ASSIGN3D99 else goto JOIN3744
        ASSIGN3D99:  preds = [COND375A]
          bool _t3748#1 = GT<int>(iter2942,_t303B);
          if _t3748 then goto ASSIGN374E else goto JOIN374A
        ASSIGN374E:  preds = [COND3754]
          int _t374D#1 = IMod(iter2942,pcp2947);
          bool _t374F#1 = EQ<int>(_t303B,_t374D);
          goto JOIN374A
        JOIN374A:  preds = [ASSIGN3D9A,COND3754]
          bool _t3750#1 = phi(_t374F,vv2984)
          goto JOIN3744
        JOIN3744:  preds = [JOIN374A,COND375A]
          bool _t3756#1 = phi(_t3750,vv2984)
          if _t3756 then goto ASSIGN375D else goto JOIN375B
        ASSIGN375D:  preds = [COND3771]
          int _t375C#1 = IDiv(iter2942,pcp2947);
          int _t375E#2 = 2;
          int _t3760#1 = IMod(_t375C,_t375E);
          int _t3764#1 = IMul(_t3760,_t375E);
          int _t3766#1 = 1;
          int _t3768#1 = ISub(_t3764,_t3766);
          goto JOIN375B
        JOIN375B:  preds = [ASSIGN3769,COND3771]
          int _t376B#1 = phi(_t3768,_t303B)
          bool _t3774#1 = NEQ<int>(_t376B,_t303B);
          if _t3774 then goto COND3794 else goto JOIN3776
        COND3794:  preds = [COND3B85]
          if _t3742 then goto ASSIGN3D9D else goto JOIN377E
        ASSIGN3D9D:  preds = [COND3794]
          bool _t3782#1 = GT<int>(iter2942,_t303B);
          if _t3782 then goto ASSIGN3788 else goto JOIN3784
        ASSIGN3788:  preds = [COND378E]
          int _t3787#1 = IMod(iter2942,pcp2947);
          bool _t3789#1 = EQ<int>(_t303B,_t3787);
          goto JOIN3784
        JOIN3784:  preds = [ASSIGN3D9E,COND378E]
          bool _t378A#1 = phi(_t3789,vv2984)
          goto JOIN377E
        JOIN377E:  preds = [JOIN3784,COND3794]
          bool _t3790#1 = phi(_t378A,vv2984)
          if _t3790 then goto ASSIGN3797 else goto JOIN3795
        ASSIGN3797:  preds = [COND37AB]
          int _t3796#1 = IDiv(iter2942,pcp2947);
          int _t3798#2 = 2;
          int _t379A#1 = IMod(_t3796,_t3798);
          int _t379E#1 = IMul(_t379A,_t3798);
          int _t37A0#1 = 1;
          int _t37A2#1 = ISub(_t379E,_t37A0);
          goto JOIN3795
        JOIN3795:  preds = [ASSIGN37A3,COND37AB]
          int _t37A5#1 = phi(_t37A2,_t303B)
          bool _t37AE#1 = GT<int>(_t37A5,_t303B);
          if _t37AE then goto ASSIGN3DA1 else goto JOIN37B0
        ASSIGN3DA1:  preds = [COND37CC]
          bool _t37B4#1 = LT<real>(newE35F9,_t29AD);
          if _t37B4 then goto ASSIGN37B9 else goto JOIN37B6
        ASSIGN37B9:  preds = [COND37C6]
          bool _t37B8#1 = LT<int>(nn35F8,nnmin2945);
          if _t37B8 then goto ASSIGN37BD else goto JOIN37BA
        ASSIGN37BD:  preds = [COND37C0]
          bool _t37BB#1 = LT<int>(born352E,nnmax2944);
          goto JOIN37BA
        JOIN37BA:  preds = [ASSIGN37BD,COND37C0]
          bool _t37BC#1 = phi(_t37BB,vv2984)
          goto JOIN37B6
        JOIN37B6:  preds = [JOIN37BA,COND37C6]
          bool _t37C2#1 = phi(_t37BC,vv2984)
          goto JOIN37B0
        JOIN37B0:  preds = [JOIN37B6,COND37CC]
          bool _t37C8#1 = phi(_t37C2,vv2984)
          if _t37C8 then goto ASSIGN3F4E else goto COND3B37
        ASSIGN3F4E:  preds = [COND3B83]
          tensor[3] npos37D2#1 = λ(T0[3],T1[],T2[3],T3[],T4[3],T5[])<(T0_{i0}) - ((T1 * (T2_{i0}) / ( T3) * (1) / ( Sqrt(Σ(i3=0..2)<(((T2_{i3}) / ( T3) * (T2_{i3}) / ( T3)))>(i3=0..2)))))>_{3} (pos3713,tipd2953,mno35FA,_t366D,mno35FA,_t366D);
          tensor[3] _t37D4#3 = fStep2531 (npos37D2);
          tensor[3] npos37D8#1 = λ(T0[3],T1[],T2[3],T3[],T4[3],T5[],T6[],T7[3])<((T0_{i0}) - ((T1 * (T2_{i0}) / ( T3) * (1) / ( Sqrt(Σ(i4=0..2)<(((T2_{i4}) / ( T3) * (T2_{i4}) / ( T3)))>(i4=0..2))))) + (T6 * T7_{i0}))>_{3} (pos3713,tipd2953,mno35FA,_t366D,mno35FA,_t366D,sfs2949,_t37D4);
          tensor[3] _t37DA#2 = fStep2531 (npos37D8);
          tensor[3] npos37DE#5 = λ(T0[3],T1[],T2[3],T3[],T4[3],T5[],T6[],T7[3],T8[],T9[3])<((T0_{i0}) - ((T1 * (T2_{i0}) / ( T3) * (1) / ( Sqrt(Σ(i5=0..2)<(((T2_{i5}) / ( T3) * (T2_{i5}) / ( T3)))>(i5=0..2))))) + (T6 * T7_{i0}) + (T6 * T9_{i0}))>_{3} (pos3713,tipd2953,mno35FA,_t366D,mno35FA,_t366D,sfs2949,_t37D4,sfs2949,_t37DA);
          bool birth37E0#4 = true;
          int _t37E2#2 = 2;
          bool _t37E4#1 = EQ<int>(fDim2946,_t37E2);
          if _t37E4 then goto ASSIGN37E8 else goto JOIN37E6
        ASSIGN37E8:  preds = [COND381D]
          int _t37E7#1 = 4;
          bool _t37E9#1 = GTE<int>(nn35F8,_t37E7);
          if _t37E9 then goto ASSIGN37ED else goto JOIN37EB
        ASSIGN37ED:  preds = [COND381B]
          real _t37EC#1 = λ(T0[],T1[])<(T0 * T1)> (tipd2953,mabd2952);
          point[] _t37EE#1 = SphereQuery<3,point>(npos37DE,_t37EC);
        FOREACH37F1:  preds = [ASSIGN37EF,NEXT37F5]
          foreach (P37F0 in _t37EE) on exit goto COND381A
            bool birth37F3#2 = phi(birth37E0,vv2984)
          goto FOREACH37F1
        COND381A:  preds = [FOREACH37F1]
          if birth37F3 then goto ASSIGN37FA else goto JOIN37F7
        ASSIGN37FA:  preds = [COND381A]
          real _t37F9#1 = TensorIndex<tensor[3],[0]>(pos3713);
          real _t37FB#1 = urnd281A (_t37F9);
          real _t37FD#1 = TensorIndex<tensor[3],[1]>(pos3713);
          real _t37FF#1 = urnd281A (_t37FD);
          real _t3803#1 = TensorIndex<tensor[3],[2]>(pos3713);
          real _t3805#1 = urnd281A (_t3803);
          real _t3807#1 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (_t37FB,_t37FF,_t3805);
          real _t3809#1 = 0.1e1;
          real _t380B#1 = MathFn<fmod>(_t3807,_t3809);
          int _t380F#1 = ISub(nnmin2945,nn35F8);
          real _t3811#1 = IntToReal(_t380F);
          real _t3813#1 = IntToReal(nnmin2945);
          real _t3815#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t3811,_t3813);
          bool birth3817#1 = LT<real>(_t380B,_t3815);
          goto JOIN37F7
        JOIN37F7:  preds = [ASSIGN3DA9,COND381A]
          bool birth3818#1 = phi(birth3817,birth37F3)
          goto JOIN37EB
        JOIN37EB:  preds = [JOIN37F7,COND381B]
          bool birth37F6#1 = phi(birth3818,birth37E0)
          goto JOIN37E6
        JOIN37E6:  preds = [JOIN37EB,COND381D]
          bool birth381C#1 = phi(birth37F6,birth37E0)
          if birth381C then goto ASSIGN3F53 else goto JOIN381E
        ASSIGN3F53:  preds = [COND3B19]
          real _t382D#2 = λ(T0[3],T1[],T2[3],T3[],T4[3],T5[],T6[],T7[3],T8[],T9[3],T10[3])<Sqrt(Σ(i0=0..2)<(((((T0_{i0}) - ((T1 * (T2_{i0}) / ( T3) * (1) / ( Sqrt(Σ(i6=0..2)<(((T2_{i6}) / ( T3) * (T2_{i6}) / ( T3)))>(i6=0..2))))) + (T6 * T7_{i0}) + (T6 * T9_{i0}))) - (T10_{i0}) * (((T0_{i0}) - ((T1 * (T2_{i0}) / ( T3) * (1) / ( Sqrt(Σ(i6=0..2)<(((T2_{i6}) / ( T3) * (T2_{i6}) / ( T3)))>(i6=0..2))))) + (T6 * T7_{i0}) + (T6 * T9_{i0}))) - (T10_{i0})))>(i0=0..2))> (pos3713,tipd2953,mno35FA,_t366D,mno35FA,_t366D,sfs2949,_t37D4,sfs2949,_t37DA,_t29B3);
          bool _t3831#1 = LT<real>(_t382D,_t29BA);
          if _t3831 then goto ASSIGN3837 else goto JOIN3833
        ASSIGN3837:  preds = [COND383D]
          real _t3836#1 = 0.3e1;
          bool _t3838#1 = GT<real>(_t382D,_t3836);
          goto JOIN3833
        JOIN3833:  preds = [ASSIGN3DAC,COND383D]
          bool _t3839#1 = phi(_t3838,vv2984)
          if _t3839 then goto ASSIGN3845 else goto JOIN3840
        ASSIGN3845:  preds = [COND3B0D]
          real x3844#21 = TensorIndex<tensor[3],[0]>(npos37DE);
          real y3846#21 = TensorIndex<tensor[3],[1]>(npos37DE);
          real z3848#31 = TensorIndex<tensor[3],[2]>(npos37DE);
          real _t384A#7 = 0.2e1;
          real _t3866#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[])<(T0 * T1 * (T2)^2 * Cosine(((T1)^2 + (T4)^2 + (T2)^2)))> (_t384A,x3844,z3848,x3844,y3846,z3848);
          real _t3884#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[])<(T0 * T1 * (T2)^2 * Cosine(((T3)^2 + (T1)^2 + (T2)^2)))> (_t384A,y3846,z3848,x3844,y3846,z3848);
          real _t38BA#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[])<((T0 * (T1)^3 * Cosine(((T2)^2 + (T3)^2 + (T1)^2))) + (T0 * T1 * Sine(((T2)^2 + (T3)^2 + (T1)^2))))> (_t384A,z3848,x3844,y3846,z3848,_t384A,z3848,x3844,y3846,z3848);
          tensor[3] g38BC#1 = <tensor[3]>[_t3866,_t3884,_t38BA];
          int _t38C7#1 = -4;
          real _t38C9#6 = IntToReal(_t38C7);
          real _t3907#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[],T10[])<((T0 * (T1)^2 * (T2)^2 * Sine(((T1)^2 + (T4)^2 + (T2)^2))) + (T6 * (T2)^2 * Cosine(((T1)^2 + (T4)^2 + (T2)^2))))> (_t38C9,x3844,z3848,x3844,y3846,z3848,_t384A,z3848,x3844,y3846,z3848);
          real _t3929#2 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[])<(T0 * T1 * T2 * (T3)^2 * Sine(((T1)^2 + (T2)^2 + (T3)^2)))> (_t38C9,x3844,y3846,z3848,x3844,y3846,z3848);
          real _t3965#2 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[],T10[],T11[])<((T0 * T1 * (T2)^3 * Sine(((T1)^2 + (T4)^2 + (T2)^2))) + (T6 * T1 * T2 * Cosine(((T1)^2 + (T4)^2 + (T2)^2))))> (_t38C9,x3844,z3848,x3844,y3846,z3848,_t29BA,x3844,z3848,x3844,y3846,z3848);
          tensor[3] _t3967#1 = <tensor[3]>[_t3907,_t3929,_t3965];
          real _t39CB#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[],T10[])<((T0 * (T1)^2 * (T2)^2 * Sine(((T3)^2 + (T1)^2 + (T2)^2))) + (T6 * (T2)^2 * Cosine(((T3)^2 + (T1)^2 + (T2)^2))))> (_t38C9,y3846,z3848,x3844,y3846,z3848,_t384A,z3848,x3844,y3846,z3848);
          real _t3A07#2 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[],T10[],T11[])<((T0 * T1 * (T2)^3 * Sine(((T3)^2 + (T1)^2 + (T2)^2))) + (T6 * T1 * T2 * Cosine(((T3)^2 + (T1)^2 + (T2)^2))))> (_t38C9,y3846,z3848,x3844,y3846,z3848,_t29BA,y3846,z3848,x3844,y3846,z3848);
          tensor[3] _t3A09#1 = <tensor[3]>[_t3929,_t39CB,_t3A07];
          real _t3AA1#1 = 0.1e2;
          real _t3AD5#1 = λ(T0[],T1[],T2[],T3[],T4[],T5[],T6[],T7[],T8[],T9[],T10[],T11[],T12[],T13[])<((T0 * (T1)^4 * Sine(((T2)^2 + (T3)^2 + (T1)^2))) + (T5 * (T1)^2 * Cosine(((T2)^2 + (T3)^2 + (T1)^2))) + (T10 * Sine(((T2)^2 + (T3)^2 + (T1)^2))))> (_t38C9,z3848,x3844,y3846,z3848,_t3AA1,z3848,x3844,y3846,z3848,_t384A,x3844,y3846,z3848);
          tensor[3] _t3AD7#1 = <tensor[3]>[_t3965,_t3A07,_t3AD5];
          tensor[3,3] hess3AD9#1 = <tensor[3,3]>[_t3967,_t3A09,_t3AD7];
          (real[3] _t3ADD#1,tensor[3][3] evecs3ADE#0) = Eigen3x3(hess3AD9);
          real _t3AE2#1 = Subscript<real[3]>(_t3ADD,_t37E2);
          real str3AEA#1 = λ(T0[],T1[],T2[3])<(Neg(T0)) / ( (T1 + Sqrt(Σ(i0=0..2)<((T2_{i0} * T2_{i0}))>(i0=0..2))))> (_t3AE2,fBias2954,g38BC);
          bool _t3AEE#1 = GT<real>(str3AEA,fStrTh2956);
          if _t3AEE then goto ASSIGN3DD9 else goto JOIN3AF0
        ASSIGN3DD9:  preds = [COND3B07]
          bool _t3AF7#1 = GTE<real>(_t29AD,fMaskTh2955);
          if _t3AF7 then goto JOIN3AF9 else goto JOIN3AF9
        JOIN3AF9:  preds = [COND3B01,COND3B01]
          bool _t3AFD#1 = phi(birth37E0,vv2984)
          goto JOIN3AF0
        JOIN3AF0:  preds = [JOIN3AF9,COND3B07]
          bool _t3B03#1 = phi(_t3AFD,vv2984)
          goto JOIN3840
        JOIN3840:  preds = [JOIN3AF0,COND3B0D]
          bool _t3B09#1 = phi(_t3B03,vv2984)
          if _t3B09 then goto NEW3B11 else goto JOIN3B10
        NEW3B11:  preds = [COND3B17]
          new point(npos37DE,hh3725);
          int _t3B12#1 = 1;
          int born3B14#1 = IAdd(born352E,_t3B12);
          goto JOIN3B10
        JOIN3B10:  preds = [ASSIGN3B16,COND3B17]
          int born3B15#1 = phi(born3B14,born352E)
          goto JOIN381E
        JOIN381E:  preds = [JOIN3B10,COND3B19]
          int born3B18#1 = phi(born3B15,born352E)
          goto JOIN37CD
        JOIN37CD:  preds = [JOIN381E,JOIN3B53]
          int born3B1A#1 = phi(born3B18,born352E)
          goto JOIN3776
        JOIN3776:  preds = [JOIN37CD,COND3B85]
          int born3B84#1 = phi(born3B1A,born352E)
          goto JOIN373D
        JOIN373D:  preds = [JOIN3776,COND3B87]
          int born3B86#1 = phi(born3B84,born352E)
          goto JOIN2FB0
        COND3B37:  preds = [COND3B83]
          if _t3742 then goto ASSIGN3DA2 else goto JOIN3B21
        ASSIGN3DA2:  preds = [COND3B37]
          bool _t3B25#1 = GT<int>(iter2942,_t303B);
          if _t3B25 then goto ASSIGN3B2B else goto JOIN3B27
        ASSIGN3B2B:  preds = [COND3B31]
          int _t3B2A#1 = IMod(iter2942,pcp2947);
          bool _t3B2C#1 = EQ<int>(_t303B,_t3B2A);
          goto JOIN3B27
        JOIN3B27:  preds = [ASSIGN3DA3,COND3B31]
          bool _t3B2D#1 = phi(_t3B2C,vv2984)
          goto JOIN3B21
        JOIN3B21:  preds = [JOIN3B27,COND3B37]
          bool _t3B33#1 = phi(_t3B2D,vv2984)
          if _t3B33 then goto ASSIGN3B3A else goto JOIN3B38
        ASSIGN3B3A:  preds = [COND3B4E]
          int _t3B39#1 = IDiv(iter2942,pcp2947);
          int _t3B3B#2 = 2;
          int _t3B3D#1 = IMod(_t3B39,_t3B3B);
          int _t3B41#1 = IMul(_t3B3D,_t3B3B);
          int _t3B43#1 = 1;
          int _t3B45#1 = ISub(_t3B41,_t3B43);
          goto JOIN3B38
        JOIN3B38:  preds = [ASSIGN3B46,COND3B4E]
          int _t3B48#1 = phi(_t3B45,_t303B)
          bool _t3B51#1 = LT<int>(_t3B48,_t303B);
          if _t3B51 then goto ASSIGN3DA6 else goto JOIN3B53
        ASSIGN3DA6:  preds = [COND3B82]
          bool _t3B56#1 = GT<real>(newE35F9,_t29AD);
          if _t3B56 then goto ASSIGN3B5A else goto JOIN3B58
        ASSIGN3B5A:  preds = [COND3B81]
          bool _t3B59#1 = GT<int>(nn35F8,nnmax2944);
          if _t3B59 then goto ASSIGN3B5E else goto JOIN3B5B
        ASSIGN3B5E:  preds = [COND3B80]
          real _t3B5D#1 = TensorIndex<tensor[3],[0]>(pos3713);
          real _t3B5F#1 = urnd281A (_t3B5D);
          real _t3B61#1 = TensorIndex<tensor[3],[1]>(pos3713);
          real _t3B63#1 = urnd281A (_t3B61);
          real _t3B67#1 = TensorIndex<tensor[3],[2]>(pos3713);
          real _t3B69#1 = urnd281A (_t3B67);
          real _t3B6B#1 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (_t3B5F,_t3B63,_t3B69);
          real _t3B6D#1 = 0.1e1;
          real _t3B6F#1 = MathFn<fmod>(_t3B6B,_t3B6D);
          int _t3B73#1 = ISub(nn35F8,nnmax2944);
          real _t3B75#1 = IntToReal(_t3B73);
          real _t3B79#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t3B75,_t366D);
          bool _t3B7B#1 = LT<real>(_t3B6F,_t3B79);
          if _t3B7B then goto DIE3B7E else goto JOIN3B7D
        DIE3B7E:  preds = [COND3B7F]
          die
          goto JOIN3B7D
        JOIN3B7D:  preds = [*DIE3B7E,COND3B7F]
          goto JOIN3B5B
        JOIN3B5B:  preds = [JOIN3B7D,COND3B80]
          goto JOIN3B58
        JOIN3B58:  preds = [JOIN3B5B,COND3B81]
          goto JOIN3B53
        JOIN3B53:  preds = [JOIN3B58,COND3B82]
          goto JOIN37CD
        ASSIGN36CC:  preds = [COND36CF]
          int _t36CB#1 = 1;
          bool _t36CD#1 = GT<int>(verb294A,_t36CB);
          goto JOIN36C7
        ASSIGN3683:  preds = [COND3686]
          int _t3682#1 = 1;
          bool _t3684#1 = GT<int>(verb294A,_t3682);
          goto JOIN367E
        ASSIGN35A8:  preds = [COND35AB]
          int _t35A7#1 = 1;
          bool _t35A9#1 = GT<int>(verb294A,_t35A7);
          goto JOIN35A3
        ASSIGN3541:  preds = [COND3544]
          int _t3540#1 = 1;
          bool _t3542#1 = GT<int>(verb294A,_t3540);
          goto JOIN353C
        ASSIGN3201:  preds = [COND3204]
          int _t3200#1 = 1;
          bool _t3202#1 = GT<int>(verb294A,_t3200);
          goto JOIN31FC
        ASSIGN2CB0:  preds = [COND2CB3]
          int _t2CAF#1 = 1;
          bool _t2CB1#1 = GT<int>(verb294A,_t2CAF);
          goto JOIN2CAB
        ASSIGN2999:  preds = [COND299C]
          int _t2998#1 = 1;
          bool _t299A#1 = GT<int>(verb294A,_t2998);
          goto JOIN2994
    end update
  end point
## initial strand creation
  COLLECTION
    ENTRY28DC:  preds = []
      tensor[3][] ipos28C8#2 = globals.ipos21E0;
      int _t28CA#1 = 0;
      int _t28CC#1 = Length<tensor[3]>(ipos28C8);
      int _t28CE#1 = 1;
      int _t28D0#1 = ISub(_t28CC,_t28CE);
      int[] _t28D2#1 = Range(_t28CA,_t28D0);
    FOREACH28D5:  preds = [ASSIGN28D3,NEXT28DB]
      foreach (ii28D4 in _t28D2) on exit goto RETURN28DD
      tensor[3] _t28D6#1 = Subscript<tensor[3][]>(ipos28C8,ii28D4);
      real _t28D8#1 = 0.1e1;
      new point(_t28D6,_t28D8);
      goto FOREACH28D5
    RETURN28DD:  preds = [FOREACH28D5]
      return
## global update
  ENTRY3C65:  preds = []
    real geoEps3B9E#3 = globals.geoEps21D7;
    real mvmtEps3B9D#3 = globals.mvmtEps21D8;
    real rpcEps3B9C#3 = globals.rpcEps21D9;
    real pchist3B9B#1 = globals.pchist2221;
    int iter3B9A#4 = globals.iter2222;
    real rpc3B99#1 = globals.rpc2223;
    int popLast3B98#1 = globals.popLast2224;
    int pop3BA6#5 = NumStrands<active>;
    bool _t3BA9#1 = NEQ<int>(pop3BA6,popLast3B98);
    if _t3BA9 then goto ASSIGN3BAE else goto ASSIGN3BB0
  ASSIGN3BAE:  preds = [COND3BB1]
    int _t3BAC#1 = 1;
    goto JOIN3BAB
  JOIN3BAB:  preds = [ASSIGN3BAE,ASSIGN3BB0]
    int _t3BAD#2 = phi(_t3BAC,_t3BAF)
    real _t3BB4#1 = IntToReal(_t3BAD);
    real rpc3BB6#5 = λ(T0[],T1[],T2[])<(T0 + (T2 * (T1) - (T0)))> (_t3BB4,rpc3B99,pchist3B9B);
    globals.rpc2223 = rpc3BB6;
    point[] P3BB9#6 = Strands<point,all>;
    (bool res3BBA#1) = all(MAP all2821 (P3BB9));
    real _t3BBF#1 = 0.1e3;
    (real res3BC2#1) = sum<real>(MAP mean282F (P3BB9));
    int num3BC5#1 = NumStrands<all>;
    real rNum3BC7#5 = IntToReal(num3BC5);
    real percfound3BCB#1 = λ(T0[],T1[],T2[])<(T0 * (T1) / ( T2))> (_t3BBF,res3BC2,rNum3BC7);
    (real res3BCE#2) = sum<real>(MAP mean2836 (P3BB9));
    real mean3BD5#2 = λ(T0[],T1[])<(T0) / ( T1)> (res3BCE,rNum3BC7);
    (real res3BDA#1) = sum<real>(MAP mean2843 (P3BB9,mean3BD5));
    real covcl3BE7#4 = λ(T0[],T1[],T2[],T3[])<((Sqrt((T0) / ( T1)) * T1)) / ( T2)> (res3BDA,rNum3BC7,res3BCE,rNum3BC7);
    (real res3BEA#4) = max<real>(MAP max284A (P3BB9));
    string _t3BEF#1 = "======= finished iter ";
    string _t3BF1#1 = " w/ ";
    string _t3BF3#3 = ")";
    string _t3BF5#1 = "; %found=";
    string _t3BF7#1 = "; mean(hh)=";
    (real res3BFA#1) = sum<real>(MAP mean2851 (P3BB9));
    real mean3C01#1 = λ(T0[],T1[])<(T0) / ( T1)> (res3BFA,rNum3BC7);
    string _t3C03#1 = "; mean(cl)=";
    string _t3C05#3 = "; COV(cl)=";
    string _t3C07#3 = "; max(mvmt)=";
    string _t3C09#1 = "; pc=";
    string _t3C0B#3 = "; rpc=";
    string _t3C0D#3 = "\n";
    Print<[string,int,string,int,string,string,real,string,real,string,real,string,real,string,real,string,int,string,real,string]>(_t3BEF,iter3B9A,_t3BF1,pop3BA6,_t3BF3,_t3BF5,percfound3BCB,_t3BF7,mean3C01,_t3C03,mean3BD5,_t3C05,covcl3BE7,_t3C07,res3BEA,_t3C09,_t3BAD,_t3C0B,rpc3BB6,_t3C0D);
    if res3BBA then goto ASSIGN3C14 else goto ASSIGN3C2A
  ASSIGN3C14:  preds = [COND3C2B]
    bool _t3C13#1 = LT<real>(covcl3BE7,geoEps3B9E);
    if _t3C13 then goto ASSIGN3DFB else goto ASSIGN3C24
  ASSIGN3DFB:  preds = [COND3C25]
    bool _t3C17#1 = LT<real>(res3BEA,mvmtEps3B9D);
    if _t3C17 then goto ASSIGN3C1C else goto ASSIGN3C1E
  ASSIGN3C1C:  preds = [COND3C1F]
    bool _t3C1A#1 = LT<real>(rpc3BB6,rpcEps3B9C);
    goto JOIN3C19
  JOIN3C19:  preds = [ASSIGN3C1C,ASSIGN3C1E]
    bool _t3C1B#1 = phi(_t3C1A,_t3C1D)
    goto JOIN3C15
  JOIN3C15:  preds = [JOIN3C19,ASSIGN3C24]
    bool _t3C21#1 = phi(_t3C1B,_t3C23)
    goto JOIN3C11
  JOIN3C11:  preds = [JOIN3C15,ASSIGN3C2A]
    bool _t3C27#1 = phi(_t3C21,_t3C29)
    if _t3C27 then goto ASSIGN3C2E else goto ASSIGN3C46
  ASSIGN3C2E:  preds = [COND3C5C]
    string _t3C2D#1 = "======= Stabilizing ";
    string _t3C31#1 = " (iter ";
    string _t3C37#3 = " < ";
    Print<[string,int,string,int,string,string,real,string,real,string,real,string,real,string,real,string,real,string]>(_t3C2D,pop3BA6,_t3C31,iter3B9A,_t3BF3,_t3C05,covcl3BE7,_t3C37,geoEps3B9E,_t3C07,res3BEA,_t3C37,mvmtEps3B9D,_t3C0B,rpc3BB6,_t3C37,rpcEps3B9C,_t3C0D);
    StabilizeAll;
    goto JOIN3C2C
  JOIN3C2C:  preds = [MASSIGN3C44,MASSIGN3DFC]
    int _t3C5D#1 = 1;
    int iter3C5F#1 = IAdd(iter3B9A,_t3C5D);
    globals.iter2222 = iter3C5F;
    globals.popLast2224 = pop3BA6;
    continue
  ASSIGN3C46:  preds = [COND3C5C]
    string _t3C45#1 = "======= Stabilizing ";
    string _t3C49#1 = " (iter ";
    string _t3C4F#3 = " > ";
    Print<[string,int,string,int,string,string,real,string,real,string,real,string,real,string,real,string,real,string]>(_t3C45,pop3BA6,_t3C49,iter3B9A,_t3BF3,_t3C05,covcl3BE7,_t3C4F,geoEps3B9E,_t3C07,res3BEA,_t3C4F,mvmtEps3B9D,_t3C0B,rpc3BB6,_t3C4F,rpcEps3B9C,_t3C0D);
    goto JOIN3C2C
  ASSIGN3C1E:  preds = [COND3C1F]
    bool _t3C1D#1 = false;
    goto JOIN3C19
  ASSIGN3C24:  preds = [COND3C25]
    bool _t3C23#1 = false;
    goto JOIN3C15
  ASSIGN3C2A:  preds = [COND3C2B]
    bool _t3C29#1 = false;
    goto JOIN3C11
  ASSIGN3BB0:  preds = [COND3BB1]
    int _t3BAF#1 = 0;
    goto JOIN3BAB
#### end program ####
##### mid-ir: after high-to-mid translation ####
## properties
  GlobalInit StabilizeAll GlobalReduce StrandSets GlobalUpdate NewStrands StrandCommunication StrandsMayDie HasInputs HasGlobals ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
## globals
  input meshData3F84 (meshData) = <no-default>
  input 0space07C6_intermedateGlobal3F85 (space) = <no-default>
  input 0data07C8_intermedateGlobal3F86 (data) = <no-default>
  input fStrTh3F87 (fStrTh) = <no-default>
  input fMaskTh3F88 (fMaskTh) = <default>
  input fBias3F89 (fBias) = <default>
  input tipd3F8A (tipd) = <default>
  input mabd3F8B (mabd) = <default>
  input travMax3F8C (travMax) = <default>
  input nfsMax3F8D (nfsMax) = <default>
  input gdeTest3F8E (gdeTest) = <default>
  input gdeBack3F8F (gdeBack) = <default>
  input gdeOppor3F90 (gdeOppor) = <default>
  input fsEps3F91 (fsEps) = <no-default>
  input geoEps3F92 (geoEps) = <default>
  input mvmtEps3F93 (mvmtEps) = <default>
  input rpcEps3F94 (rpcEps) = <default>
  input pcmvEps3F95 (pcmvEps) = <default>
  input isoval3F96 (isoval) = <default>
  input verb3F97 (verb) = <default>
  input sfs3F98 (sfs) = <default>
  input hist3F99 (hist) = <default>
  input pcp3F9A (pcp) = <default>
  input ipos3F9B (ipos) = <no-default>
  input fDim3F9C (fDim) = <default>
  global int nnmin3F9D
  global int nnmax3F9E
  global real rad3F9F
  global real pchist3FA0
  varying global int iter3FA1
  varying global real rpc3FA2
  varying global int popLast3FA3
## functions
  function real urnd403D (real x403E#2) {
    ENTRY403F:  preds = []
      int iter4040#1 = globals.iter3FA1;
      real _t4042#2 = 0.e0;
      bool _t4044#1 = EQ<real>(x403E,_t4042);
      if _t4044 then goto RETURN(_t4042)4047 else goto JOIN4048
    RETURN(_t4042)4047:  preds = [COND4046]
      return _t4042
      goto JOIN4048
    JOIN4048:  preds = [*RETURN(_t4042)4047,COND4046]
      real _t4049#1 = λ(T0[])<Abs(T0)> (x403E);
      real l2404B#2 = MathFn<log2>(_t4049);
      real _t404D#2 = 0.2e1;
      real _t404F#1 = MathFn<floor>(l2404B);
      real _t4051#2 = 0.1e1;
      real op1_e3_l_34054#1 = λ(T0[],T1[])<(T0) - (T1)> (l2404B,_t404F);
      real _t4053#1 = λ(T0[],T1[])<(T1) - (T0)> (_t4051,op1_e3_l_34054);
      real frxp4057#1 = MathFn<pow>(_t404D,_t4053);
      int _t4059#1 = 2;
      int _t405B#1 = IMul(_t4059,iter4040);
      real _t405D#1 = IntToReal(_t405B);
      real op1_e3_l_34060#1 = λ(T0[])<(T0)^20> (_t404D);
      real op1_e3_l_44061#1 = λ(T0[],T1[])<(T1 + T0)> (_t405D,op1_e3_l_34060);
      real _t405F#1 = λ(T0[],T1[])<(T0 * T1)> (frxp4057,op1_e3_l_44061);
      real _t4065#1 = MathFn<fmod>(_t405F,_t4051);
      return _t4065
}
  function tensor[3] fStep4302 (tensor[3] s4303#3) {
    ENTRY4304:  preds = []
      real x4305#13 = TensorIndex<tensor[3],[0]>(s4303);
      real y4307#13 = TensorIndex<tensor[3],[1]>(s4303);
      real z4309#16 = TensorIndex<tensor[3],[2]>(s4303);
      real _t430B#7 = 0.2e1;
      int _t430D#2 = 2;
      real op1_e3_l_64310#1 = λ(T0[])<(T0)^2> (x4305);
      real op1_e3_l_74311#1 = λ(T0[])<(T0)^2> (y4307);
      real op1_e3_l_84312#2 = λ(T0[])<(T0)^2> (z4309);
      real op1_e3_l_94313#1 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_64310,op1_e3_l_74311,op1_e3_l_84312);
      real op1_e3_l_114314#1 = λ(T0[])<Cosine(T0)> (op1_e3_l_94313);
      real _t430F#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t430B,x4305,op1_e3_l_84312,op1_e3_l_114314);
      real op1_e3_l_6431C#1 = λ(T0[])<(T0)^2> (x4305);
      real op1_e3_l_7431D#1 = λ(T0[])<(T0)^2> (y4307);
      real op1_e3_l_8431E#2 = λ(T0[])<(T0)^2> (z4309);
      real op1_e3_l_9431F#1 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_6431C,op1_e3_l_7431D,op1_e3_l_8431E);
      real op1_e3_l_114320#1 = λ(T0[])<Cosine(T0)> (op1_e3_l_9431F);
      real _t431B#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t430B,y4307,op1_e3_l_8431E,op1_e3_l_114320);
      real op1_e3_l_104328#1 = λ(T0[])<(T0)^2> (x4305);
      real op1_e3_l_114329#1 = λ(T0[])<(T0)^2> (y4307);
      real op1_e3_l_12432A#1 = λ(T0[])<(T0)^2> (z4309);
      real op1_e3_l_13432B#2 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_104328,op1_e3_l_114329,op1_e3_l_12432A);
      real op1_e3_l_14432C#1 = λ(T0[])<(T0)^3> (z4309);
      real op1_e3_l_15432D#1 = λ(T0[])<Cosine(T0)> (op1_e3_l_13432B);
      real op1_e3_l_20432E#1 = λ(T0[])<Sine(T0)> (op1_e3_l_13432B);
      real op1_e3_l_21432F#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t430B,op1_e3_l_14432C,op1_e3_l_15432D);
      real op1_e3_l_224330#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t430B,z4309,op1_e3_l_20432E);
      real _t4327#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_21432F,op1_e3_l_224330);
      tensor[3] g433B#1 = <tensor[3]>[_t430F,_t431B,_t4327];
      int _t433D#1 = -4;
      real _t433F#6 = IntToReal(_t433D);
      real op1_e3_l_114342#2 = λ(T0[])<(T0)^2> (x4305);
      real op1_e3_l_124343#1 = λ(T0[])<(T0)^2> (y4307);
      real op1_e3_l_134344#3 = λ(T0[])<(T0)^2> (z4309);
      real op1_e3_l_144345#2 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_114342,op1_e3_l_124343,op1_e3_l_134344);
      real op1_e3_l_174346#1 = λ(T0[])<Sine(T0)> (op1_e3_l_144345);
      real op1_e3_l_234347#1 = λ(T0[])<Cosine(T0)> (op1_e3_l_144345);
      real op1_e3_l_244348#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t433F,op1_e3_l_114342,op1_e3_l_134344,op1_e3_l_174346);
      real op1_e3_l_254349#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t430B,op1_e3_l_134344,op1_e3_l_234347);
      real _t4341#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_244348,op1_e3_l_254349);
      real op1_e3_l_74354#1 = λ(T0[])<(T0)^2> (x4305);
      real op1_e3_l_84355#1 = λ(T0[])<(T0)^2> (y4307);
      real op1_e3_l_94356#2 = λ(T0[])<(T0)^2> (z4309);
      real op1_e3_l_104357#1 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_74354,op1_e3_l_84355,op1_e3_l_94356);
      real op1_e3_l_124358#1 = λ(T0[])<Sine(T0)> (op1_e3_l_104357);
      real _t4353#2 = λ(T0[],T1[],T2[],T3[],T4[])<(T0 * T1 * T2 * T3 * T4)> (_t433F,x4305,y4307,op1_e3_l_94356,op1_e3_l_124358);
      real _t435F#2 = 0.4e1;
      real op1_e3_l_124362#1 = λ(T0[])<(T0)^2> (x4305);
      real op1_e3_l_134363#1 = λ(T0[])<(T0)^2> (y4307);
      real op1_e3_l_144364#1 = λ(T0[])<(T0)^2> (z4309);
      real op1_e3_l_154365#2 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_124362,op1_e3_l_134363,op1_e3_l_144364);
      real op1_e3_l_164366#1 = λ(T0[])<(T0)^3> (z4309);
      real op1_e3_l_174367#1 = λ(T0[])<Sine(T0)> (op1_e3_l_154365);
      real op1_e3_l_224368#1 = λ(T0[])<Cosine(T0)> (op1_e3_l_154365);
      real op1_e3_l_234369#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t433F,x4305,op1_e3_l_164366,op1_e3_l_174367);
      real op1_e3_l_24436A#1 = λ(T0[],T1[],T2[],T3[])<(T2 * T0 * T1 * T3)> (x4305,z4309,_t435F,op1_e3_l_224368);
      real _t4361#2 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_234369,op1_e3_l_24436A);
      tensor[3] _t4375#1 = <tensor[3]>[_t4341,_t4353,_t4361];
      real op1_e3_l_114378#1 = λ(T0[])<(T0)^2> (x4305);
      real op1_e3_l_124379#2 = λ(T0[])<(T0)^2> (y4307);
      real op1_e3_l_13437A#3 = λ(T0[])<(T0)^2> (z4309);
      real op1_e3_l_14437B#2 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_114378,op1_e3_l_124379,op1_e3_l_13437A);
      real op1_e3_l_17437C#1 = λ(T0[])<Sine(T0)> (op1_e3_l_14437B);
      real op1_e3_l_23437D#1 = λ(T0[])<Cosine(T0)> (op1_e3_l_14437B);
      real op1_e3_l_24437E#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t433F,op1_e3_l_124379,op1_e3_l_13437A,op1_e3_l_17437C);
      real op1_e3_l_25437F#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t430B,op1_e3_l_13437A,op1_e3_l_23437D);
      real _t4377#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_24437E,op1_e3_l_25437F);
      real op1_e3_l_12438A#1 = λ(T0[])<(T0)^2> (x4305);
      real op1_e3_l_13438B#1 = λ(T0[])<(T0)^2> (y4307);
      real op1_e3_l_14438C#1 = λ(T0[])<(T0)^2> (z4309);
      real op1_e3_l_15438D#2 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_12438A,op1_e3_l_13438B,op1_e3_l_14438C);
      real op1_e3_l_16438E#1 = λ(T0[])<(T0)^3> (z4309);
      real op1_e3_l_17438F#1 = λ(T0[])<Sine(T0)> (op1_e3_l_15438D);
      real op1_e3_l_224390#1 = λ(T0[])<Cosine(T0)> (op1_e3_l_15438D);
      real op1_e3_l_234391#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t433F,y4307,op1_e3_l_16438E,op1_e3_l_17438F);
      real op1_e3_l_244392#1 = λ(T0[],T1[],T2[],T3[])<(T2 * T0 * T1 * T3)> (y4307,z4309,_t435F,op1_e3_l_224390);
      real _t4389#2 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_234391,op1_e3_l_244392);
      tensor[3] _t439D#1 = <tensor[3]>[_t4353,_t4377,_t4389];
      real _t439F#1 = 0.1e2;
      real op1_e3_l_1443A2#1 = λ(T0[])<(T0)^2> (x4305);
      real op1_e3_l_1543A3#1 = λ(T0[])<(T0)^2> (y4307);
      real op1_e3_l_1643A4#2 = λ(T0[])<(T0)^2> (z4309);
      real op1_e3_l_1743A5#2 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_1443A2,op1_e3_l_1543A3,op1_e3_l_1643A4);
      real op1_e3_l_1843A6#1 = λ(T0[])<(T0)^4> (z4309);
      real op1_e3_l_1943A7#2 = λ(T0[])<Sine(T0)> (op1_e3_l_1743A5);
      real op1_e3_l_2543A8#1 = λ(T0[])<Cosine(T0)> (op1_e3_l_1743A5);
      real op1_e3_l_3143A9#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t433F,op1_e3_l_1843A6,op1_e3_l_1943A7);
      real op1_e3_l_3243AA#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t439F,op1_e3_l_1643A4,op1_e3_l_2543A8);
      real op1_e3_l_3343AB#1 = λ(T0[],T1[])<(T0 * T1)> (_t430B,op1_e3_l_1943A7);
      real _t43A1#1 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_3143A9,op1_e3_l_3243AA,op1_e3_l_3343AB);
      tensor[3] _t43B7#1 = <tensor[3]>[_t4361,_t4389,_t43A1];
      tensor[3,3] hess43B9#1 = <tensor[3,3]>[_t4375,_t439D,_t43B7];
      (real[3] evals43BB#1,tensor[3][3] E43BC#1) = EigenVecs3x3(hess43B9);
      real _t43BE#1 = 0.1e1;
      real _t43C0#1 = Subscript<real[3]>(evals43BB,_t430D);
      tensor[3] _t43C2#2 = Subscript<tensor[3][3]>(E43BC,_t430D);
      real op1_e3_l_543C5#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t43BE,_t43C0);
      real op1_e3_l_643C6#1 = λ(T0[])<Neg(T0)> (op1_e3_l_543C5);
      real op1_e3_l_743C7#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (_t43C2,g433B);
      tensor[3] up43C4#4 = λ(T0[3],T1[],T2[])<(T1 * T0_{i0} * T2)>_{3} (_t43C2,op1_e3_l_643C6,op1_e3_l_743C7);
      real _t43CC#2 = TensorIndex<tensor[3],[0]>(up43C4);
      bool _t43CE#1 = EQ<real>(_t43CC,_t43CC);
      bool _t43D0#1 = BNot(_t43CE);
      if _t43D0 then goto ASSIGN43D4 else goto ASSIGN43E1
    ASSIGN43D4:  preds = [COND43D2]
      bool _t43D3#1 = true;
      goto JOIN43D7
    JOIN43D7:  preds = [ASSIGN43D4,JOIN43EA]
      bool _t43D5#1 = phi(_t43D3,_t43D6)
      if _t43D5 then goto ASSIGN43DA else goto JOIN43DE
    ASSIGN43DA:  preds = [COND43D8]
      real _t43D9#3 = +inf;
      tensor[3] _t43DB#1 = <tensor[3]>[_t43D9,_t43D9,_t43D9];
      return _t43DB
      goto JOIN43DE
    JOIN43DE:  preds = [*RETURN(_t43DB)43DD,COND43D8]
      return up43C4
    ASSIGN43E1:  preds = [COND43D2]
      real _t43E0#2 = TensorIndex<tensor[3],[1]>(up43C4);
      bool _t43E2#1 = EQ<real>(_t43E0,_t43E0);
      bool _t43E4#1 = BNot(_t43E2);
      if _t43E4 then goto ASSIGN43E8 else goto ASSIGN43EC
    ASSIGN43E8:  preds = [COND43E6]
      bool _t43E7#1 = true;
      goto JOIN43EA
    JOIN43EA:  preds = [ASSIGN43E8,ASSIGN43EF]
      bool _t43D6#1 = phi(_t43E7,_t43E9)
      goto JOIN43D7
    ASSIGN43EC:  preds = [COND43E6]
      real _t43EB#2 = TensorIndex<tensor[3],[2]>(up43C4);
      bool _t43ED#1 = EQ<real>(_t43EB,_t43EB);
      bool _t43E9#1 = BNot(_t43ED);
      goto JOIN43EA
}
  function tensor[3,3] fPerp45A3 (tensor[3] s45A4#3) {
    ENTRY45A5:  preds = []
      real x45A6#9 = TensorIndex<tensor[3],[0]>(s45A4);
      real y45A8#9 = TensorIndex<tensor[3],[1]>(s45A4);
      real z45AA#11 = TensorIndex<tensor[3],[2]>(s45A4);
      real _t45AC#3 = 0.2e1;
      int _t45AE#1 = 2;
      int _t45B0#1 = -4;
      real _t45B2#6 = IntToReal(_t45B0);
      real op1_e3_l_1145B5#2 = λ(T0[])<(T0)^2> (x45A6);
      real op1_e3_l_1245B6#1 = λ(T0[])<(T0)^2> (y45A8);
      real op1_e3_l_1345B7#3 = λ(T0[])<(T0)^2> (z45AA);
      real op1_e3_l_1445B8#2 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_1145B5,op1_e3_l_1245B6,op1_e3_l_1345B7);
      real op1_e3_l_1745B9#1 = λ(T0[])<Sine(T0)> (op1_e3_l_1445B8);
      real op1_e3_l_2345BA#1 = λ(T0[])<Cosine(T0)> (op1_e3_l_1445B8);
      real op1_e3_l_2445BB#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t45B2,op1_e3_l_1145B5,op1_e3_l_1345B7,op1_e3_l_1745B9);
      real op1_e3_l_2545BC#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t45AC,op1_e3_l_1345B7,op1_e3_l_2345BA);
      real _t45B4#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_2445BB,op1_e3_l_2545BC);
      real op1_e3_l_745C7#1 = λ(T0[])<(T0)^2> (x45A6);
      real op1_e3_l_845C8#1 = λ(T0[])<(T0)^2> (y45A8);
      real op1_e3_l_945C9#2 = λ(T0[])<(T0)^2> (z45AA);
      real op1_e3_l_1045CA#1 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_745C7,op1_e3_l_845C8,op1_e3_l_945C9);
      real op1_e3_l_1245CB#1 = λ(T0[])<Sine(T0)> (op1_e3_l_1045CA);
      real _t45C6#2 = λ(T0[],T1[],T2[],T3[],T4[])<(T0 * T1 * T2 * T3 * T4)> (_t45B2,x45A6,y45A8,op1_e3_l_945C9,op1_e3_l_1245CB);
      real _t45D2#2 = 0.4e1;
      real op1_e3_l_1245D5#1 = λ(T0[])<(T0)^2> (x45A6);
      real op1_e3_l_1345D6#1 = λ(T0[])<(T0)^2> (y45A8);
      real op1_e3_l_1445D7#1 = λ(T0[])<(T0)^2> (z45AA);
      real op1_e3_l_1545D8#2 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_1245D5,op1_e3_l_1345D6,op1_e3_l_1445D7);
      real op1_e3_l_1645D9#1 = λ(T0[])<(T0)^3> (z45AA);
      real op1_e3_l_1745DA#1 = λ(T0[])<Sine(T0)> (op1_e3_l_1545D8);
      real op1_e3_l_2245DB#1 = λ(T0[])<Cosine(T0)> (op1_e3_l_1545D8);
      real op1_e3_l_2345DC#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t45B2,x45A6,op1_e3_l_1645D9,op1_e3_l_1745DA);
      real op1_e3_l_2445DD#1 = λ(T0[],T1[],T2[],T3[])<(T2 * T0 * T1 * T3)> (x45A6,z45AA,_t45D2,op1_e3_l_2245DB);
      real _t45D4#2 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_2345DC,op1_e3_l_2445DD);
      tensor[3] _t45E8#1 = <tensor[3]>[_t45B4,_t45C6,_t45D4];
      real op1_e3_l_1145EB#1 = λ(T0[])<(T0)^2> (x45A6);
      real op1_e3_l_1245EC#2 = λ(T0[])<(T0)^2> (y45A8);
      real op1_e3_l_1345ED#3 = λ(T0[])<(T0)^2> (z45AA);
      real op1_e3_l_1445EE#2 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_1145EB,op1_e3_l_1245EC,op1_e3_l_1345ED);
      real op1_e3_l_1745EF#1 = λ(T0[])<Sine(T0)> (op1_e3_l_1445EE);
      real op1_e3_l_2345F0#1 = λ(T0[])<Cosine(T0)> (op1_e3_l_1445EE);
      real op1_e3_l_2445F1#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t45B2,op1_e3_l_1245EC,op1_e3_l_1345ED,op1_e3_l_1745EF);
      real op1_e3_l_2545F2#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t45AC,op1_e3_l_1345ED,op1_e3_l_2345F0);
      real _t45EA#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_2445F1,op1_e3_l_2545F2);
      real op1_e3_l_1245FD#1 = λ(T0[])<(T0)^2> (x45A6);
      real op1_e3_l_1345FE#1 = λ(T0[])<(T0)^2> (y45A8);
      real op1_e3_l_1445FF#1 = λ(T0[])<(T0)^2> (z45AA);
      real op1_e3_l_154600#2 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_1245FD,op1_e3_l_1345FE,op1_e3_l_1445FF);
      real op1_e3_l_164601#1 = λ(T0[])<(T0)^3> (z45AA);
      real op1_e3_l_174602#1 = λ(T0[])<Sine(T0)> (op1_e3_l_154600);
      real op1_e3_l_224603#1 = λ(T0[])<Cosine(T0)> (op1_e3_l_154600);
      real op1_e3_l_234604#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t45B2,y45A8,op1_e3_l_164601,op1_e3_l_174602);
      real op1_e3_l_244605#1 = λ(T0[],T1[],T2[],T3[])<(T2 * T0 * T1 * T3)> (y45A8,z45AA,_t45D2,op1_e3_l_224603);
      real _t45FC#2 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_234604,op1_e3_l_244605);
      tensor[3] _t4610#1 = <tensor[3]>[_t45C6,_t45EA,_t45FC];
      real _t4612#1 = 0.1e2;
      real op1_e3_l_144615#1 = λ(T0[])<(T0)^2> (x45A6);
      real op1_e3_l_154616#1 = λ(T0[])<(T0)^2> (y45A8);
      real op1_e3_l_164617#2 = λ(T0[])<(T0)^2> (z45AA);
      real op1_e3_l_174618#2 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_144615,op1_e3_l_154616,op1_e3_l_164617);
      real op1_e3_l_184619#1 = λ(T0[])<(T0)^4> (z45AA);
      real op1_e3_l_19461A#2 = λ(T0[])<Sine(T0)> (op1_e3_l_174618);
      real op1_e3_l_25461B#1 = λ(T0[])<Cosine(T0)> (op1_e3_l_174618);
      real op1_e3_l_31461C#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t45B2,op1_e3_l_184619,op1_e3_l_19461A);
      real op1_e3_l_32461D#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t4612,op1_e3_l_164617,op1_e3_l_25461B);
      real op1_e3_l_33461E#1 = λ(T0[],T1[])<(T0 * T1)> (_t45AC,op1_e3_l_19461A);
      real _t4614#1 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_31461C,op1_e3_l_32461D,op1_e3_l_33461E);
      tensor[3] _t462A#1 = <tensor[3]>[_t45D4,_t45FC,_t4614];
      tensor[3,3] hess462C#1 = <tensor[3,3]>[_t45E8,_t4610,_t462A];
      (real[3] evals462E#0,tensor[3][3] _t462F#1) = EigenVecs3x3(hess462C);
      tensor[3] E24631#2 = Subscript<tensor[3][3]>(_t462F,_t45AE);
      tensor[3,3] op1_e3_l_24634#1 = λ(T0[3])<(T0_{i0} * T0_{i1})>_{3 3} (E24631);
      tensor[3,3] m4633#1 = λ(T0[3 3])<(δ_{i0,i1}) - (T0_{i0,i1})>_{3 3} (op1_e3_l_24634);
      tensor[3,3] op1_e3_l_44638#1 = λ(T0[3])<(T0_{i0} * T0_{i1})>_{3 3} (E24631);
      tensor[3,3] op1_e3_l_64639#2 = λ(T0[3 3])<(δ_{i0,i1}) - (T0_{i0,i1})>_{3 3} (op1_e3_l_44638);
      real t4637#2 = λ(T0[3 3],T1[3 3])<Σ(i0=0..2)(i1=0..2)<((T0_{i0,i1} * T1_{i0,i1}))>(i0=0..2)(i1=0..2)> (op1_e3_l_64639,op1_e3_l_64639);
      bool _t463D#1 = EQ<real>(t4637,t4637);
      bool _t463F#1 = BNot(_t463D);
      if _t463F then goto ASSIGN4643 else goto JOIN4645
    ASSIGN4643:  preds = [COND4641]
      tensor[3,3] _t4642#1 = λ()<Z_{i0,i1}>_{3 3} ();
      return _t4642
      goto JOIN4645
    JOIN4645:  preds = [*RETURN(_t4642)4644,COND4641]
      return m4633
}
  function bool all4C14 (point P4C15#1) {
    ENTRY4C16:  preds = []
      bool _t4C17#1 = P4C15.found;
      return _t4C17
}
  function real mean4C1E (point P4C1F#1) {
    ENTRY4C20:  preds = []
      bool _t4C21#1 = P4C1F.found;
      if _t4C21 then goto ASSIGN4C25 else goto ASSIGN4C2A
    ASSIGN4C25:  preds = [COND4C23]
      real _t4C24#1 = 0.1e1;
      goto JOIN4C28
    JOIN4C28:  preds = [ASSIGN4C25,ASSIGN4C2A]
      real _t4C26#1 = phi(_t4C24,_t4C27)
      return _t4C26
    ASSIGN4C2A:  preds = [COND4C23]
      real _t4C27#1 = 0.e0;
      goto JOIN4C28
}
  function real mean4C35 (point P4C36#1) {
    ENTRY4C37:  preds = []
      real _t4C38#1 = P4C36.closest;
      return _t4C38
}
  function real mean4C3F (point P4C40#1, real meancl4C41#1) {
    ENTRY4C42:  preds = []
      real _t4C43#1 = P4C40.closest;
      real op1_e3_l_24C46#1 = λ(T0[],T1[])<(T0) - (T1)> (_t4C43,meancl4C41);
      real _t4C45#1 = λ(T0[])<(T0)^2> (op1_e3_l_24C46);
      return _t4C45
}
  function real max4C54 (point P4C55#1) {
    ENTRY4C56:  preds = []
      real _t4C57#1 = P4C55.mvmt;
      return _t4C57
}
  function real mean4C66 (point P4C67#1) {
    ENTRY4C68:  preds = []
      real _t4C69#1 = P4C67.hh;
      return _t4C69
}
## input initialization
  ENTRY3FA4:  preds = []
    real fMaskTh3FA5#3 = 0.e0;
    globals.fMaskTh3F88 = fMaskTh3FA5;
    globals.fBias3F89 = fMaskTh3FA5;
    real tipd3FA9#1 = 0.1e1;
    globals.tipd3F8A = tipd3FA9;
    real mabd3FAC#1 = 0.75e0;
    globals.mabd3F8B = mabd3FAC;
    real travMax3FAF#1 = 0.1e2;
    globals.travMax3F8C = travMax3FAF;
    int nfsMax3FB2#1 = 20;
    globals.nfsMax3F8D = nfsMax3FB2;
    real gdeTest3FB5#4 = 0.5e0;
    globals.gdeTest3F8E = gdeTest3FB5;
    globals.gdeBack3F8F = gdeTest3FB5;
    real gdeOppor3FB9#1 = 0.12e1;
    globals.gdeOppor3F90 = gdeOppor3FB9;
    real geoEps3FBC#1 = 0.1e0;
    globals.geoEps3F92 = geoEps3FBC;
    real mvmtEps3FBF#2 = 0.1e-1;
    globals.mvmtEps3F93 = mvmtEps3FBF;
    globals.rpcEps3F94 = mvmtEps3FBF;
    real pcmvEps3FC3#1 = 0.3e0;
    globals.pcmvEps3F95 = pcmvEps3FC3;
    globals.isoval3F96 = fMaskTh3FA5;
    int verb3FC7#1 = 0;
    globals.verb3F97 = verb3FC7;
    globals.sfs3F98 = gdeTest3FB5;
    globals.hist3F99 = gdeTest3FB5;
    int pcp3FCC#1 = 5;
    globals.pcp3F9A = pcp3FCC;
    int fDim3FCF#1 = 2;
    globals.fDim3F9C = fDim3FCF;
    return
## global-variable initialization
  ENTRY3FD3:  preds = []
    femData:Mesh meshData3FD4#2 = globals.meshData3F84;
    real tipd3FD6#1 = globals.tipd3F8A;
    real hist3FD8#1 = globals.hist3F99;
    int pcp3FDA#1 = globals.pcp3F9A;
    int fDim3FDC#3 = globals.fDim3F9C;
    int _t3FDE#4 = 0;
    int _t3FE0#3 = 1;
    int _t3FE2#1 = ExtractFemItem<int,NumCell(Mesh)>(meshData3FD4);
    int _t3FE4#1 = ISub(_t3FE2,_t3FE0);
    int[] _t3FE6#1 = Range(_t3FDE,_t3FE4);
    femData:MeshCell[] _t3FE8#1 = <femData:MeshCell[]>{};
  FOREACH3FEB:  preds = [ASSIGN3FE9,NEXT3FF1]
    foreach (_t3FEA in _t3FE6) on exit goto ASSIGN3FF3
      femData:MeshCell[] _t3FEF#1 = phi(_t3FE8,_t3FEE)
    femData:MeshCell _t3FEC#1 = LoadFem<femData:MeshCell>(meshData3FD4,_t3FEA);
    femData:MeshCell[] _t3FEE#1 = Append<femData:MeshCell>(_t3FEF,_t3FEC);
    goto FOREACH3FEB
  ASSIGN3FF3:  preds = [FOREACH3FEB]
    int _t3FF2#3 = 2;
    bool _t3FF4#2 = EQ<int>(_t3FF2,fDim3FDC);
    if _t3FF4 then goto ASSIGN3FF8 else goto ASSIGN4025
  ASSIGN3FF8:  preds = [COND3FF6]
    int _t3FF7#1 = 6;
    goto JOIN3FFB
  JOIN3FFB:  preds = [ASSIGN3FF8,JOIN4027]
    int _t3FF9#1 = phi(_t3FF7,_t3FFA)
    globals.nnmin3F9D = _t3FF9;
    if _t3FF4 then goto ASSIGN3FFF else goto ASSIGN401F
  ASSIGN3FFF:  preds = [COND3FFD]
    int _t3FFE#1 = 8;
    goto JOIN4002
  JOIN4002:  preds = [ASSIGN3FFF,JOIN4023]
    int _t4000#1 = phi(_t3FFE,_t4001)
    globals.nnmax3F9E = _t4000;
    real _t4004#1 = 0.2e1;
    real _t4006#1 = 0.3e1;
    real op1_e3_l_34009#1 = λ(T0[],T1[])<(T0 * T1)> (tipd3FD6,_t4006);
    real rad4008#1 = λ(T0[],T1[])<(T1) / ( T0)> (_t4004,op1_e3_l_34009);
    globals.rad3F9F = rad4008;
    real _t400D#2 = 0.1e1;
    int _t400F#1 = IMul(_t3FF2,pcp3FDA);
    real _t4011#1 = IntToReal(_t400F);
    real _t4013#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t400D,_t4011);
    real pchist4015#1 = MathFn<pow>(hist3FD8,_t4013);
    globals.pchist3FA0 = pchist4015;
    globals.iter3FA1 = _t3FDE;
    globals.rpc3FA2 = _t400D;
    int popLast401A#1 = -1;
    globals.popLast3FA3 = popLast401A;
    return
  ASSIGN401F:  preds = [COND3FFD]
    bool _t401E#1 = EQ<int>(_t3FE0,fDim3FDC);
    if _t401E then goto ASSIGN4022 else goto JOIN4023
  ASSIGN4022:  preds = [COND4020]
    int _t4021#1 = 3;
    goto JOIN4023
  JOIN4023:  preds = [ASSIGN4022,COND4020]
    int _t4001#1 = phi(_t4021,_t3FDE)
    goto JOIN4002
  ASSIGN4025:  preds = [COND3FF6]
    bool _t4024#1 = EQ<int>(_t3FE0,fDim3FDC);
    if _t4024 then goto JOIN4027 else goto JOIN4027
  JOIN4027:  preds = [COND4026,COND4026]
    int _t3FFA#1 = phi(_t3FF2,_t3FDE)
    goto JOIN3FFB
## strand
  strand point (tensor[3] p04028#5, real hh04029#1) in 3D
    state:
      output tensor[3] pos;
      output tensor[3] _pos;
      real ID;
      real hh;
      tensor[3] step;
      bool found;
      int nfs;
      real trav;
      real mvmt;
      real closest;
      int born;
      bool first;
    state init
      ENTRY4036:  preds = []
        real rad4037#1 = globals.rad3F9F;
        real _t4039#1 = 0.1e7;
        real _t403B#1 = TensorIndex<tensor[3],[0]>(p04028);
        real _t4068#1 = urnd403D (_t403B);
        real _t406A#1 = TensorIndex<tensor[3],[1]>(p04028);
        real _t406C#1 = urnd403D (_t406A);
        real _t406E#1 = TensorIndex<tensor[3],[2]>(p04028);
        real _t4070#1 = urnd403D (_t406E);
        real _t4072#1 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (_t4068,_t406C,_t4070);
        real _t4074#2 = 0.1e1;
        real _t4076#1 = MathFn<fmod>(_t4072,_t4074);
        real _t4078#1 = λ(T0[],T1[])<(T0 * T1)> (_t4039,_t4076);
        real _t407A#1 = MathFn<floor>(_t4078);
        real _t407C#4 = 0.e0;
        tensor[3] step407E#1 = <tensor[3]>[_t407C,_t407C,_t407C];
        bool found4080#1 = false;
        int nfs4082#2 = 0;
        bool first4084#1 = true;
        self.pos = p04028;
        self._pos = p04028;
        self.ID = _t407A;
        self.hh = hh04029;
        self.step = step407E;
        self.found = found4080;
        self.nfs = nfs4082;
        self.trav = _t407C;
        self.mvmt = _t4074;
        self.closest = rad4037;
        self.born = nfs4082;
        self.first = first4084;
        return
    end state init
    method update
        ENTRY4093:  preds = []
          real fStrTh4094#4 = globals.fStrTh3F87;
          real fMaskTh4096#4 = globals.fMaskTh3F88;
          real fBias4098#4 = globals.fBias3F89;
          real tipd409A#22 = globals.tipd3F8A;
          real mabd409C#1 = globals.mabd3F8B;
          real travMax409E#3 = globals.travMax3F8C;
          int nfsMax40A0#3 = globals.nfsMax3F8D;
          real gdeTest40A2#1 = globals.gdeTest3F8E;
          real gdeBack40A4#1 = globals.gdeBack3F8F;
          real gdeOppor40A6#1 = globals.gdeOppor3F90;
          real fsEps40A8#3 = globals.fsEps3F91;
          real pcmvEps40AA#1 = globals.pcmvEps3F95;
          int verb40AC#16 = globals.verb3F97;
          real sfs40AE#54 = globals.sfs3F98;
          real hist40B0#2 = globals.hist3F99;
          int pcp40B2#10 = globals.pcp3F9A;
          int fDim40B4#2 = globals.fDim3F9C;
          int nnmin40B6#3 = globals.nnmin3F9D;
          int nnmax40B8#4 = globals.nnmax3F9E;
          real rad40BA#12 = globals.rad3F9F;
          int iter40BC#22 = globals.iter3FA1;
          tensor[3] pos40BE#38 = self.pos;
          real ID40C0#11 = self.ID;
          real hh40C2#9 = self.hh;
          bool found40C4#3 = self.found;
          int nfs40C6#5 = self.nfs;
          real trav40C8#5 = self.trav;
          real mvmt40CA#5 = self.mvmt;
          real closest40CC#1 = self.closest;
          int born40CE#5 = self.born;
          bool first40D0#1 = self.first;
          bool vv40D2#45 = false;
          if first40D0 then goto ASSIGN40D6 else goto JOIN40EE
        ASSIGN40D6:  preds = [COND40D4]
          int _t40D5#1 = 0;
          bool _t40D7#1 = GT<int>(verb40AC,_t40D5);
          if _t40D7 then goto JOIN40DB else goto JOIN40DB
        JOIN40DB:  preds = [COND40D9,COND40D9]
          bool _t40DA#1 = phi(vv40D2,vv40D2)
          if _t40DA then goto ASSIGN40DE else goto ASSIGN4BD8
        ASSIGN40DE:  preds = [COND40DC]
          bool _t40DD#1 = true;
          goto JOIN40E1
        JOIN40E1:  preds = [ASSIGN40DE,ASSIGN4BD9]
          bool _t40DF#1 = phi(_t40DD,_t40E0)
          if _t40DF then goto ASSIGN40E4 else goto JOIN40ED
        ASSIGN40E4:  preds = [COND40E2]
          string _t40E3#1 = "(i#";
          string _t40E5#1 = " @ ";
          string _t40E7#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID40C0,_t40E3,iter40BC,_t40E5,pos40BE,_t40E7);
          string _t40EA#1 = " HELLO!\n";
          Print<[string]>(_t40EA);
          goto JOIN40ED
        JOIN40ED:  preds = [MASSIGN40EC,COND40E2]
          goto JOIN40EE
        JOIN40EE:  preds = [JOIN40ED,COND40D4]
          real _t40EF#23 = 0.e0;
          tensor[3] _t40F1#5 = <tensor[3]>[_t40EF,_t40EF,_t40EF];
          tensor[3] op1_e3_l_240F4#2 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (pos40BE,_t40F1);
          real op1_e3_l_440F5#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_240F4,op1_e3_l_240F4);
          real _t40F3#3 = λ(T0[])<Sqrt(T0)> (op1_e3_l_440F5);
          real _t40F9#11 = 0.4e1;
          bool _t40FB#2 = LT<real>(_t40F3,_t40F9);
          if _t40FB then goto ASSIGN40FF else goto JOIN4103
        ASSIGN40FF:  preds = [COND40FD]
          real _t40FE#1 = 0.3e1;
          bool _t4100#1 = GT<real>(_t40F3,_t40FE);
          goto JOIN4103
        JOIN4103:  preds = [ASSIGN4101,COND40FD]
          bool _t4102#1 = phi(_t4100,vv40D2)
          if _t4102 then goto ASSIGN4106 else goto JOIN41D5
        ASSIGN4106:  preds = [COND4104]
          real x4105#13 = TensorIndex<tensor[3],[0]>(pos40BE);
          real y4107#13 = TensorIndex<tensor[3],[1]>(pos40BE);
          real z4109#16 = TensorIndex<tensor[3],[2]>(pos40BE);
          real _t410B#7 = 0.2e1;
          int _t410D#1 = 2;
          real op1_e3_l_64110#1 = λ(T0[])<(T0)^2> (x4105);
          real op1_e3_l_74111#1 = λ(T0[])<(T0)^2> (y4107);
          real op1_e3_l_84112#2 = λ(T0[])<(T0)^2> (z4109);
          real op1_e3_l_94113#1 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_64110,op1_e3_l_74111,op1_e3_l_84112);
          real op1_e3_l_114114#1 = λ(T0[])<Cosine(T0)> (op1_e3_l_94113);
          real _t410F#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t410B,x4105,op1_e3_l_84112,op1_e3_l_114114);
          real op1_e3_l_6411C#1 = λ(T0[])<(T0)^2> (x4105);
          real op1_e3_l_7411D#1 = λ(T0[])<(T0)^2> (y4107);
          real op1_e3_l_8411E#2 = λ(T0[])<(T0)^2> (z4109);
          real op1_e3_l_9411F#1 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_6411C,op1_e3_l_7411D,op1_e3_l_8411E);
          real op1_e3_l_114120#1 = λ(T0[])<Cosine(T0)> (op1_e3_l_9411F);
          real _t411B#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t410B,y4107,op1_e3_l_8411E,op1_e3_l_114120);
          real op1_e3_l_104128#1 = λ(T0[])<(T0)^2> (x4105);
          real op1_e3_l_114129#1 = λ(T0[])<(T0)^2> (y4107);
          real op1_e3_l_12412A#1 = λ(T0[])<(T0)^2> (z4109);
          real op1_e3_l_13412B#2 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_104128,op1_e3_l_114129,op1_e3_l_12412A);
          real op1_e3_l_14412C#1 = λ(T0[])<(T0)^3> (z4109);
          real op1_e3_l_15412D#1 = λ(T0[])<Cosine(T0)> (op1_e3_l_13412B);
          real op1_e3_l_20412E#1 = λ(T0[])<Sine(T0)> (op1_e3_l_13412B);
          real op1_e3_l_21412F#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t410B,op1_e3_l_14412C,op1_e3_l_15412D);
          real op1_e3_l_224130#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t410B,z4109,op1_e3_l_20412E);
          real _t4127#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_21412F,op1_e3_l_224130);
          tensor[3] g413B#1 = <tensor[3]>[_t410F,_t411B,_t4127];
          int _t413D#1 = -4;
          real _t413F#6 = IntToReal(_t413D);
          real op1_e3_l_114142#2 = λ(T0[])<(T0)^2> (x4105);
          real op1_e3_l_124143#1 = λ(T0[])<(T0)^2> (y4107);
          real op1_e3_l_134144#3 = λ(T0[])<(T0)^2> (z4109);
          real op1_e3_l_144145#2 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_114142,op1_e3_l_124143,op1_e3_l_134144);
          real op1_e3_l_174146#1 = λ(T0[])<Sine(T0)> (op1_e3_l_144145);
          real op1_e3_l_234147#1 = λ(T0[])<Cosine(T0)> (op1_e3_l_144145);
          real op1_e3_l_244148#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t413F,op1_e3_l_114142,op1_e3_l_134144,op1_e3_l_174146);
          real op1_e3_l_254149#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t410B,op1_e3_l_134144,op1_e3_l_234147);
          real _t4141#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_244148,op1_e3_l_254149);
          real op1_e3_l_74154#1 = λ(T0[])<(T0)^2> (x4105);
          real op1_e3_l_84155#1 = λ(T0[])<(T0)^2> (y4107);
          real op1_e3_l_94156#2 = λ(T0[])<(T0)^2> (z4109);
          real op1_e3_l_104157#1 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_74154,op1_e3_l_84155,op1_e3_l_94156);
          real op1_e3_l_124158#1 = λ(T0[])<Sine(T0)> (op1_e3_l_104157);
          real _t4153#2 = λ(T0[],T1[],T2[],T3[],T4[])<(T0 * T1 * T2 * T3 * T4)> (_t413F,x4105,y4107,op1_e3_l_94156,op1_e3_l_124158);
          real op1_e3_l_124160#1 = λ(T0[])<(T0)^2> (x4105);
          real op1_e3_l_134161#1 = λ(T0[])<(T0)^2> (y4107);
          real op1_e3_l_144162#1 = λ(T0[])<(T0)^2> (z4109);
          real op1_e3_l_154163#2 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_124160,op1_e3_l_134161,op1_e3_l_144162);
          real op1_e3_l_164164#1 = λ(T0[])<(T0)^3> (z4109);
          real op1_e3_l_174165#1 = λ(T0[])<Sine(T0)> (op1_e3_l_154163);
          real op1_e3_l_224166#1 = λ(T0[])<Cosine(T0)> (op1_e3_l_154163);
          real op1_e3_l_234167#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t413F,x4105,op1_e3_l_164164,op1_e3_l_174165);
          real op1_e3_l_244168#1 = λ(T0[],T1[],T2[],T3[])<(T2 * T0 * T1 * T3)> (x4105,z4109,_t40F9,op1_e3_l_224166);
          real _t415F#2 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_234167,op1_e3_l_244168);
          tensor[3] _t4173#1 = <tensor[3]>[_t4141,_t4153,_t415F];
          real op1_e3_l_114176#1 = λ(T0[])<(T0)^2> (x4105);
          real op1_e3_l_124177#2 = λ(T0[])<(T0)^2> (y4107);
          real op1_e3_l_134178#3 = λ(T0[])<(T0)^2> (z4109);
          real op1_e3_l_144179#2 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_114176,op1_e3_l_124177,op1_e3_l_134178);
          real op1_e3_l_17417A#1 = λ(T0[])<Sine(T0)> (op1_e3_l_144179);
          real op1_e3_l_23417B#1 = λ(T0[])<Cosine(T0)> (op1_e3_l_144179);
          real op1_e3_l_24417C#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t413F,op1_e3_l_124177,op1_e3_l_134178,op1_e3_l_17417A);
          real op1_e3_l_25417D#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t410B,op1_e3_l_134178,op1_e3_l_23417B);
          real _t4175#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_24417C,op1_e3_l_25417D);
          real op1_e3_l_124188#1 = λ(T0[])<(T0)^2> (x4105);
          real op1_e3_l_134189#1 = λ(T0[])<(T0)^2> (y4107);
          real op1_e3_l_14418A#1 = λ(T0[])<(T0)^2> (z4109);
          real op1_e3_l_15418B#2 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_124188,op1_e3_l_134189,op1_e3_l_14418A);
          real op1_e3_l_16418C#1 = λ(T0[])<(T0)^3> (z4109);
          real op1_e3_l_17418D#1 = λ(T0[])<Sine(T0)> (op1_e3_l_15418B);
          real op1_e3_l_22418E#1 = λ(T0[])<Cosine(T0)> (op1_e3_l_15418B);
          real op1_e3_l_23418F#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t413F,y4107,op1_e3_l_16418C,op1_e3_l_17418D);
          real op1_e3_l_244190#1 = λ(T0[],T1[],T2[],T3[])<(T2 * T0 * T1 * T3)> (y4107,z4109,_t40F9,op1_e3_l_22418E);
          real _t4187#2 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_23418F,op1_e3_l_244190);
          tensor[3] _t419B#1 = <tensor[3]>[_t4153,_t4175,_t4187];
          real _t419D#1 = 0.1e2;
          real op1_e3_l_1441A0#1 = λ(T0[])<(T0)^2> (x4105);
          real op1_e3_l_1541A1#1 = λ(T0[])<(T0)^2> (y4107);
          real op1_e3_l_1641A2#2 = λ(T0[])<(T0)^2> (z4109);
          real op1_e3_l_1741A3#2 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_1441A0,op1_e3_l_1541A1,op1_e3_l_1641A2);
          real op1_e3_l_1841A4#1 = λ(T0[])<(T0)^4> (z4109);
          real op1_e3_l_1941A5#2 = λ(T0[])<Sine(T0)> (op1_e3_l_1741A3);
          real op1_e3_l_2541A6#1 = λ(T0[])<Cosine(T0)> (op1_e3_l_1741A3);
          real op1_e3_l_3141A7#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t413F,op1_e3_l_1841A4,op1_e3_l_1941A5);
          real op1_e3_l_3241A8#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t419D,op1_e3_l_1641A2,op1_e3_l_2541A6);
          real op1_e3_l_3341A9#1 = λ(T0[],T1[])<(T0 * T1)> (_t410B,op1_e3_l_1941A5);
          real _t419F#1 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_3141A7,op1_e3_l_3241A8,op1_e3_l_3341A9);
          tensor[3] _t41B5#1 = <tensor[3]>[_t415F,_t4187,_t419F];
          tensor[3,3] hess41B7#1 = <tensor[3,3]>[_t4173,_t419B,_t41B5];
          (real[3] _t41B9#1,tensor[3][3] evecs41BA#0) = EigenVecs3x3(hess41B7);
          real _t41BC#1 = Subscript<real[3]>(_t41B9,_t410D);
          real op1_e3_l_341BF#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (g413B);
          real op1_e3_l_441C0#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_341BF);
          real op1_e3_l_541C1#1 = λ(T0[])<Neg(T0)> (_t41BC);
          real op1_e3_l_641C2#1 = λ(T0[],T1[])<(T0 + T1)> (fBias4098,op1_e3_l_441C0);
          real str41BE#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_541C1,op1_e3_l_641C2);
          bool _t41C8#1 = GT<real>(str41BE,fStrTh4094);
          if _t41C8 then goto ASSIGN41CC else goto JOIN41D3
        ASSIGN41CC:  preds = [COND41CA]
          bool _t41CB#1 = GTE<real>(_t40EF,fMaskTh4096);
          if _t41CB then goto ASSIGN41CF else goto JOIN41D1
        ASSIGN41CF:  preds = [COND41CD]
          bool _t41CE#1 = true;
          goto JOIN41D1
        JOIN41D1:  preds = [ASSIGN41CF,COND41CD]
          bool _t41D0#1 = phi(_t41CE,vv40D2)
          goto JOIN41D3
        JOIN41D3:  preds = [JOIN41D1,COND41CA]
          bool _t41D2#1 = phi(_t41D0,vv40D2)
          goto JOIN41D5
        JOIN41D5:  preds = [JOIN41D3,COND4104]
          bool _t41D4#1 = phi(_t41D2,vv40D2)
          bool _t41D6#1 = BNot(_t41D4);
          if _t41D6 then goto ASSIGN41DA else goto JOIN42CB
        ASSIGN41DA:  preds = [COND41D8]
          int _t41D9#1 = 0;
          bool _t41DB#1 = GT<int>(verb40AC,_t41D9);
          if _t41DB then goto JOIN41DF else goto JOIN41DF
        JOIN41DF:  preds = [COND41DD,COND41DD]
          bool _t41DE#1 = phi(vv40D2,vv40D2)
          if _t41DE then goto ASSIGN41E2 else goto ASSIGN4BD5
        ASSIGN41E2:  preds = [COND41E0]
          bool _t41E1#1 = true;
          goto JOIN41E5
        JOIN41E5:  preds = [ASSIGN41E2,ASSIGN4BD6]
          bool _t41E3#1 = phi(_t41E1,_t41E4)
          if _t41E3 then goto ASSIGN41E8 else goto JOIN42C9
        ASSIGN41E8:  preds = [COND41E6]
          string _t41E7#1 = "(i#";
          string _t41E9#1 = " @ ";
          string _t41EB#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID40C0,_t41E7,iter40BC,_t41E9,pos40BE,_t41EB);
          string _t41EE#1 = "!inside=";
          if _t40FB then goto ASSIGN41F2 else goto JOIN41F6
        ASSIGN41F2:  preds = [COND41F0]
          real _t41F1#1 = 0.3e1;
          bool _t41F3#1 = GT<real>(_t40F3,_t41F1);
          goto JOIN41F6
        JOIN41F6:  preds = [ASSIGN41F4,COND41F0]
          bool _t41F5#1 = phi(_t41F3,vv40D2)
          string _t41F7#1 = " || fStrength=";
          real x41F9#13 = TensorIndex<tensor[3],[0]>(pos40BE);
          real y41FB#13 = TensorIndex<tensor[3],[1]>(pos40BE);
          real z41FD#16 = TensorIndex<tensor[3],[2]>(pos40BE);
          real _t41FF#7 = 0.2e1;
          int _t4201#1 = 2;
          real op1_e3_l_64204#1 = λ(T0[])<(T0)^2> (x41F9);
          real op1_e3_l_74205#1 = λ(T0[])<(T0)^2> (y41FB);
          real op1_e3_l_84206#2 = λ(T0[])<(T0)^2> (z41FD);
          real op1_e3_l_94207#1 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_64204,op1_e3_l_74205,op1_e3_l_84206);
          real op1_e3_l_114208#1 = λ(T0[])<Cosine(T0)> (op1_e3_l_94207);
          real _t4203#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t41FF,x41F9,op1_e3_l_84206,op1_e3_l_114208);
          real op1_e3_l_64210#1 = λ(T0[])<(T0)^2> (x41F9);
          real op1_e3_l_74211#1 = λ(T0[])<(T0)^2> (y41FB);
          real op1_e3_l_84212#2 = λ(T0[])<(T0)^2> (z41FD);
          real op1_e3_l_94213#1 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_64210,op1_e3_l_74211,op1_e3_l_84212);
          real op1_e3_l_114214#1 = λ(T0[])<Cosine(T0)> (op1_e3_l_94213);
          real _t420F#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t41FF,y41FB,op1_e3_l_84212,op1_e3_l_114214);
          real op1_e3_l_10421C#1 = λ(T0[])<(T0)^2> (x41F9);
          real op1_e3_l_11421D#1 = λ(T0[])<(T0)^2> (y41FB);
          real op1_e3_l_12421E#1 = λ(T0[])<(T0)^2> (z41FD);
          real op1_e3_l_13421F#2 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_10421C,op1_e3_l_11421D,op1_e3_l_12421E);
          real op1_e3_l_144220#1 = λ(T0[])<(T0)^3> (z41FD);
          real op1_e3_l_154221#1 = λ(T0[])<Cosine(T0)> (op1_e3_l_13421F);
          real op1_e3_l_204222#1 = λ(T0[])<Sine(T0)> (op1_e3_l_13421F);
          real op1_e3_l_214223#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t41FF,op1_e3_l_144220,op1_e3_l_154221);
          real op1_e3_l_224224#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t41FF,z41FD,op1_e3_l_204222);
          real _t421B#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_214223,op1_e3_l_224224);
          tensor[3] g422F#1 = <tensor[3]>[_t4203,_t420F,_t421B];
          int _t4231#1 = -4;
          real _t4233#6 = IntToReal(_t4231);
          real op1_e3_l_114236#2 = λ(T0[])<(T0)^2> (x41F9);
          real op1_e3_l_124237#1 = λ(T0[])<(T0)^2> (y41FB);
          real op1_e3_l_134238#3 = λ(T0[])<(T0)^2> (z41FD);
          real op1_e3_l_144239#2 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_114236,op1_e3_l_124237,op1_e3_l_134238);
          real op1_e3_l_17423A#1 = λ(T0[])<Sine(T0)> (op1_e3_l_144239);
          real op1_e3_l_23423B#1 = λ(T0[])<Cosine(T0)> (op1_e3_l_144239);
          real op1_e3_l_24423C#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t4233,op1_e3_l_114236,op1_e3_l_134238,op1_e3_l_17423A);
          real op1_e3_l_25423D#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t41FF,op1_e3_l_134238,op1_e3_l_23423B);
          real _t4235#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_24423C,op1_e3_l_25423D);
          real op1_e3_l_74248#1 = λ(T0[])<(T0)^2> (x41F9);
          real op1_e3_l_84249#1 = λ(T0[])<(T0)^2> (y41FB);
          real op1_e3_l_9424A#2 = λ(T0[])<(T0)^2> (z41FD);
          real op1_e3_l_10424B#1 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_74248,op1_e3_l_84249,op1_e3_l_9424A);
          real op1_e3_l_12424C#1 = λ(T0[])<Sine(T0)> (op1_e3_l_10424B);
          real _t4247#2 = λ(T0[],T1[],T2[],T3[],T4[])<(T0 * T1 * T2 * T3 * T4)> (_t4233,x41F9,y41FB,op1_e3_l_9424A,op1_e3_l_12424C);
          real op1_e3_l_124254#1 = λ(T0[])<(T0)^2> (x41F9);
          real op1_e3_l_134255#1 = λ(T0[])<(T0)^2> (y41FB);
          real op1_e3_l_144256#1 = λ(T0[])<(T0)^2> (z41FD);
          real op1_e3_l_154257#2 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_124254,op1_e3_l_134255,op1_e3_l_144256);
          real op1_e3_l_164258#1 = λ(T0[])<(T0)^3> (z41FD);
          real op1_e3_l_174259#1 = λ(T0[])<Sine(T0)> (op1_e3_l_154257);
          real op1_e3_l_22425A#1 = λ(T0[])<Cosine(T0)> (op1_e3_l_154257);
          real op1_e3_l_23425B#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t4233,x41F9,op1_e3_l_164258,op1_e3_l_174259);
          real op1_e3_l_24425C#1 = λ(T0[],T1[],T2[],T3[])<(T2 * T0 * T1 * T3)> (x41F9,z41FD,_t40F9,op1_e3_l_22425A);
          real _t4253#2 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_23425B,op1_e3_l_24425C);
          tensor[3] _t4267#1 = <tensor[3]>[_t4235,_t4247,_t4253];
          real op1_e3_l_11426A#1 = λ(T0[])<(T0)^2> (x41F9);
          real op1_e3_l_12426B#2 = λ(T0[])<(T0)^2> (y41FB);
          real op1_e3_l_13426C#3 = λ(T0[])<(T0)^2> (z41FD);
          real op1_e3_l_14426D#2 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_11426A,op1_e3_l_12426B,op1_e3_l_13426C);
          real op1_e3_l_17426E#1 = λ(T0[])<Sine(T0)> (op1_e3_l_14426D);
          real op1_e3_l_23426F#1 = λ(T0[])<Cosine(T0)> (op1_e3_l_14426D);
          real op1_e3_l_244270#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t4233,op1_e3_l_12426B,op1_e3_l_13426C,op1_e3_l_17426E);
          real op1_e3_l_254271#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t41FF,op1_e3_l_13426C,op1_e3_l_23426F);
          real _t4269#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_244270,op1_e3_l_254271);
          real op1_e3_l_12427C#1 = λ(T0[])<(T0)^2> (x41F9);
          real op1_e3_l_13427D#1 = λ(T0[])<(T0)^2> (y41FB);
          real op1_e3_l_14427E#1 = λ(T0[])<(T0)^2> (z41FD);
          real op1_e3_l_15427F#2 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_12427C,op1_e3_l_13427D,op1_e3_l_14427E);
          real op1_e3_l_164280#1 = λ(T0[])<(T0)^3> (z41FD);
          real op1_e3_l_174281#1 = λ(T0[])<Sine(T0)> (op1_e3_l_15427F);
          real op1_e3_l_224282#1 = λ(T0[])<Cosine(T0)> (op1_e3_l_15427F);
          real op1_e3_l_234283#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t4233,y41FB,op1_e3_l_164280,op1_e3_l_174281);
          real op1_e3_l_244284#1 = λ(T0[],T1[],T2[],T3[])<(T2 * T0 * T1 * T3)> (y41FB,z41FD,_t40F9,op1_e3_l_224282);
          real _t427B#2 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_234283,op1_e3_l_244284);
          tensor[3] _t428F#1 = <tensor[3]>[_t4247,_t4269,_t427B];
          real _t4291#1 = 0.1e2;
          real op1_e3_l_144294#1 = λ(T0[])<(T0)^2> (x41F9);
          real op1_e3_l_154295#1 = λ(T0[])<(T0)^2> (y41FB);
          real op1_e3_l_164296#2 = λ(T0[])<(T0)^2> (z41FD);
          real op1_e3_l_174297#2 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_144294,op1_e3_l_154295,op1_e3_l_164296);
          real op1_e3_l_184298#1 = λ(T0[])<(T0)^4> (z41FD);
          real op1_e3_l_194299#2 = λ(T0[])<Sine(T0)> (op1_e3_l_174297);
          real op1_e3_l_25429A#1 = λ(T0[])<Cosine(T0)> (op1_e3_l_174297);
          real op1_e3_l_31429B#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t4233,op1_e3_l_184298,op1_e3_l_194299);
          real op1_e3_l_32429C#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t4291,op1_e3_l_164296,op1_e3_l_25429A);
          real op1_e3_l_33429D#1 = λ(T0[],T1[])<(T0 * T1)> (_t41FF,op1_e3_l_194299);
          real _t4293#1 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_31429B,op1_e3_l_32429C,op1_e3_l_33429D);
          tensor[3] _t42A9#1 = <tensor[3]>[_t4253,_t427B,_t4293];
          tensor[3,3] hess42AB#1 = <tensor[3,3]>[_t4267,_t428F,_t42A9];
          (real[3] _t42AD#1,tensor[3][3] evecs42AE#0) = EigenVecs3x3(hess42AB);
          real _t42B0#1 = Subscript<real[3]>(_t42AD,_t4201);
          real op1_e3_l_342B3#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (g422F);
          real op1_e3_l_442B4#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_342B3);
          real op1_e3_l_542B5#1 = λ(T0[])<Neg(T0)> (_t42B0);
          real op1_e3_l_642B6#1 = λ(T0[],T1[])<(T0 + T1)> (fBias4098,op1_e3_l_442B4);
          real str42B2#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_542B5,op1_e3_l_642B6);
          string _t42BC#1 = " <= fStrTh=";
          string _t42BE#1 = " || fMask(pos)=";
          string _t42C0#1 = " < fMaskTh=";
          string _t42C2#1 = " || fTest(pos)=";
          bool _t42C4#1 = true;
          string _t42C6#1 = " ==>DIE\n";
          Print<[string,bool,string,real,string,real,string,real,string,real,string,bool,string]>(_t41EE,_t41F5,_t41F7,str42B2,_t42BC,fStrTh4094,_t42BE,_t40EF,_t42C0,fMaskTh4096,_t42C2,_t42C4,_t42C6);
          goto JOIN42C9
        JOIN42C9:  preds = [MASSIGN42C8,COND41E6]
          die
          goto JOIN42CB
        JOIN42CB:  preds = [*DIE42CA,COND41D8]
          bool _t42CC#1 = GT<real>(travMax409E,_t40EF);
          if _t42CC then goto ASSIGN42D0 else goto JOIN42D4
        ASSIGN42D0:  preds = [COND42CE]
          bool _t42CF#1 = GT<real>(trav40C8,travMax409E);
          if _t42CF then goto DIE42D2 else goto JOIN42D3
        DIE42D2:  preds = [COND42D1]
          die
          goto JOIN42D3
        JOIN42D3:  preds = [*DIE42D2,COND42D1]
          goto JOIN42D4
        JOIN42D4:  preds = [JOIN42D3,COND42CE]
          bool _t42D5#1 = BNot(found40C4);
          if _t42D5 then goto ASSIGN42D9 else goto ASSIGN4461
        ASSIGN42D9:  preds = [COND42D7]
          int _t42D8#3 = 0;
          bool _t42DA#1 = GT<int>(nfsMax40A0,_t42D8);
          if _t42DA then goto ASSIGN42DE else goto JOIN4301
        ASSIGN42DE:  preds = [COND42DC]
          bool _t42DD#1 = GT<int>(nfs40C6,nfsMax40A0);
          if _t42DD then goto ASSIGN42E1 else goto JOIN4300
        ASSIGN42E1:  preds = [COND42DF]
          bool _t42E0#1 = GT<int>(verb40AC,_t42D8);
          if _t42E0 then goto JOIN42E4 else goto JOIN42E4
        JOIN42E4:  preds = [COND42E2,COND42E2]
          bool _t42E3#1 = phi(vv40D2,vv40D2)
          if _t42E3 then goto ASSIGN42E7 else goto ASSIGN445E
        ASSIGN42E7:  preds = [COND42E5]
          bool _t42E6#1 = true;
          goto JOIN42EA
        JOIN42EA:  preds = [ASSIGN42E7,ASSIGN445F]
          bool _t42E8#1 = phi(_t42E6,_t42E9)
          if _t42E8 then goto ASSIGN42ED else goto JOIN42FE
        ASSIGN42ED:  preds = [COND42EB]
          string _t42EC#1 = "(i#";
          string _t42EE#1 = " @ ";
          string _t42F0#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID40C0,_t42EC,iter40BC,_t42EE,pos40BE,_t42F0);
          string _t42F3#1 = "nfs=";
          string _t42F5#1 = " > nfsMax=";
          string _t42F7#1 = " || trav=";
          string _t42F9#1 = " > travMax=";
          string _t42FB#1 = " =>DIE\n";
          Print<[string,int,string,int,string,real,string,real,string]>(_t42F3,nfs40C6,_t42F5,nfsMax40A0,_t42F7,trav40C8,_t42F9,travMax409E,_t42FB);
          goto JOIN42FE
        JOIN42FE:  preds = [MASSIGN42FD,COND42EB]
          die
          goto JOIN4300
        JOIN4300:  preds = [*DIE42FF,COND42DF]
          goto JOIN4301
        JOIN4301:  preds = [JOIN4300,COND42DC]
          tensor[3] _t43F0#4 = fStep4302 (pos40BE);
          tensor[3] step43F2#2 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs40AE,_t43F0);
          tensor[3] op1_e3_l_343F5#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs40AE,_t43F0);
          tensor[3] pos43F4#2 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos40BE,op1_e3_l_343F5);
          real op1_e3_l_543F9#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (_t43F0);
          real op1_e3_l_643FA#1 = λ(T0[],T1[])<(T0 * T0 * T1)> (sfs40AE,op1_e3_l_543F9);
          real op1_e3_l_743FB#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_643FA);
          real op1_e3_l_1143FC#2 = λ(T0[],T1[])<(T1) / ( T0)> (tipd409A,op1_e3_l_743FB);
          real op1_e3_l_1243FD#1 = λ(T0[],T1[])<(T0) - (T1)> (mvmt40CA,op1_e3_l_1143FC);
          real op1_e3_l_1443FE#1 = λ(T0[],T1[])<(T0 * T1)> (hist40B0,op1_e3_l_1243FD);
          real mvmt43F8#2 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_1143FC,op1_e3_l_1443FE);
          bool _t4406#1 = GT<real>(mvmt43F8,fsEps40A8);
          if _t4406 then goto ASSIGN440E else goto ASSIGN445B
        ASSIGN440E:  preds = [COND4408]
          real op1_e3_l_4440A#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (_t43F0);
          real op1_e3_l_5440B#1 = λ(T0[],T1[])<(T0 * T0 * T1)> (sfs40AE,op1_e3_l_4440A);
          real op1_e3_l_6440C#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_5440B);
          real op1_e3_l_7440D#1 = λ(T0[],T1[])<(T1) / ( T0)> (tipd409A,op1_e3_l_6440C);
          real trav4409#1 = λ(T0[],T1[])<(T0 + T1)> (trav40C8,op1_e3_l_7440D);
          int _t4413#1 = 1;
          int nfs4415#1 = IAdd(nfs40C6,_t4413);
          goto JOIN441D
        JOIN441D:  preds = [ASSIGN4416,ASSIGN445C]
          real mvmt4417#2 = phi(mvmt43F8,mvmt4418)
          real trav4419#1 = phi(trav4409,_t40EF)
          int nfs441A#1 = phi(nfs4415,nfs40C6)
          bool found441B#2 = phi(found40C4,found441C)
          bool _t441E#1 = GT<int>(verb40AC,_t42D8);
          if _t441E then goto JOIN4422 else goto JOIN4422
        JOIN4422:  preds = [COND4420,COND4420]
          bool _t4421#1 = phi(vv40D2,vv40D2)
          if _t4421 then goto ASSIGN4425 else goto ASSIGN4459
        ASSIGN4425:  preds = [COND4423]
          bool _t4424#1 = true;
          goto JOIN4428
        JOIN4428:  preds = [ASSIGN4425,ASSIGN445A]
          bool _t4426#1 = phi(_t4424,_t4427)
          if _t4426 then goto ASSIGN442B else goto JOIN443A
        ASSIGN442B:  preds = [COND4429]
          string _t442A#1 = "(i#";
          string _t442C#1 = " @ ";
          string _t442E#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID40C0,_t442A,iter40BC,_t442C,pos43F4,_t442E);
          string _t4431#1 = "step=";
          string _t4433#1 = "; mvmt=";
          string _t4435#1 = " => found=";
          string _t4437#1 = "\n";
          Print<[string,tensor[3],string,real,string,bool,string]>(_t4431,step43F2,_t4433,mvmt4417,_t4435,found441B,_t4437);
          goto JOIN443A
        JOIN443A:  preds = [MASSIGN4439,COND4429]
          goto JOIN444B
        JOIN444B:  preds = [JOIN443A,JOIN4B80]
          int born443B#1 = phi(born40CE,born443C)
          real closest443D#1 = phi(closest40CC,closest443E)
          real mvmt443F#1 = phi(mvmt4417,mvmt4440)
          real trav4441#1 = phi(trav4419,trav4442)
          int nfs4443#1 = phi(nfs441A,nfs40C6)
          bool found4444#1 = phi(found441B,found40C4)
          tensor[3] step4445#1 = phi(step43F2,step4446)
          real hh4447#1 = phi(hh40C2,hh4448)
          tensor[3] pos4449#2 = phi(pos43F4,pos444A)
          self.pos = pos4449;
          self._pos = pos4449;
          self.hh = hh4447;
          self.step = step4445;
          self.found = found4444;
          self.nfs = nfs4443;
          self.trav = trav4441;
          self.mvmt = mvmt443F;
          self.closest = closest443D;
          self.born = born443B;
          self.first = vv40D2;
          active
        ASSIGN4459:  preds = [COND4423]
          int _t4458#1 = 1;
          bool _t4427#1 = GT<int>(verb40AC,_t4458);
          goto JOIN4428
        ASSIGN445B:  preds = [COND4408]
          bool found441C#1 = true;
          real mvmt4418#1 = 0.1e1;
          goto JOIN441D
        ASSIGN445E:  preds = [COND42E5]
          int _t445D#1 = 1;
          bool _t42E9#1 = GT<int>(verb40AC,_t445D);
          goto JOIN42EA
        ASSIGN4461:  preds = [COND42D7]
          int _t4460#25 = 0;
          bool _t4462#1 = EQ<int>(_t4460,fDim40B4);
          if _t4462 then goto SAVE4465 else goto JOIN4467
        SAVE4465:  preds = [COND4464]
          self.pos = pos40BE;
          stabilize
          goto JOIN4467
        JOIN4467:  preds = [*STABILIZE4466,COND4464]
          tensor[3] _t4468#28 = fStep4302 (pos40BE);
          tensor[3] step446A#4 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs40AE,_t4468);
          tensor[3] op1_e3_l_3446D#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs40AE,_t4468);
          tensor[3] pos446C#17 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos40BE,op1_e3_l_3446D);
          real op1_e3_l_44471#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (_t4468);
          real op1_e3_l_54472#1 = λ(T0[],T1[])<(T0 * T0 * T1)> (sfs40AE,op1_e3_l_44471);
          real op1_e3_l_64473#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_54472);
          real op1_e3_l_74474#1 = λ(T0[],T1[])<(T1) / ( T0)> (tipd409A,op1_e3_l_64473);
          real trav4470#4 = λ(T0[],T1[])<(T0 + T1)> (trav40C8,op1_e3_l_74474);
          point[] _t447A#1 = SphereQuery<3,point>(pos446C,rad40BA);
        FOREACH447D:  preds = [ASSIGN447B,NEXT4516]
          foreach (P447C in _t447A) on exit goto ASSIGN4574
            int nn4514#3 = phi(_t4460,nn4513)
            tensor[3] force44FF#8 = phi(_t40F1,force44FE)
            real oldE44D6#4 = phi(_t40EF,oldE44D5)
          tensor[3] _t447E#7 = P447C.pos;
          tensor[3] op1_e3_l_54481#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs40AE,_t4468);
          tensor[3] op1_e3_l_64482#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos40BE,op1_e3_l_54481);
          tensor[3] op1_e3_l_94483#2 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (_t447E,op1_e3_l_64482);
          real op1_e3_l_114484#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_94483,op1_e3_l_94483);
          real op1_e3_l_124485#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_114484);
          real _t4480#1 = λ(T0[],T1[])<(T1) / ( T0)> (tipd409A,op1_e3_l_124485);
          bool _t448C#1 = LT<real>(_t4480,fsEps40A8);
          if _t448C then goto ASSIGN4490 else goto JOIN4496
        ASSIGN4490:  preds = [COND448E]
          real _t448F#1 = P447C.ID;
          bool _t4491#1 = LTE<real>(ID40C0,_t448F);
          if _t4491 then goto DIE4494 else goto JOIN4495
        DIE4494:  preds = [COND4493]
          die
          goto JOIN4495
        JOIN4495:  preds = [*DIE4494,COND4493]
          goto JOIN4496
        JOIN4496:  preds = [JOIN4495,COND448E]
          tensor[3] op1_e3_l_54498#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs40AE,_t4468);
          tensor[3] op1_e3_l_64499#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos40BE,op1_e3_l_54498);
          tensor[3] op1_e3_l_9449A#2 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (_t447E,op1_e3_l_64499);
          real op1_e3_l_11449B#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_9449A,op1_e3_l_9449A);
          real op1_e3_l_12449C#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_11449B);
          real _t4497#3 = λ(T0[],T1[])<(T1) / ( T0)> (rad40BA,op1_e3_l_12449C);
          real _t44A3#3 = 0.2e1;
          real _t44A5#3 = 0.3e1;
          real _t44A7#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t44A3,_t44A5);
          bool _t44A9#2 = LT<real>(_t4497,_t44A7);
          if _t44A9 then goto ASSIGN44AD else goto ASSIGN4544
        ASSIGN44AD:  preds = [COND44AB]
          real _t44AC#1 = 0.1e1;
          real _t44AE#1 = -0.5646e1;
          real _t44B0#1 = 0.119835e2;
          real _t44B2#1 = -0.113535e2;
          real _t44B4#1 = 0.40550625e1;
          tensor[3] op1_e3_l_2544B7#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs40AE,_t4468);
          tensor[3] op1_e3_l_2644B8#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos40BE,op1_e3_l_2544B7);
          tensor[3] op1_e3_l_2944B9#2 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (_t447E,op1_e3_l_2644B8);
          real op1_e3_l_3144BA#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_2944B9,op1_e3_l_2944B9);
          real op1_e3_l_3244BB#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_3144BA);
          real op1_e3_l_5744BC#4 = λ(T0[],T1[])<(T1) / ( T0)> (rad40BA,op1_e3_l_3244BB);
          real op1_e3_l_5844BD#1 = λ(T0[],T1[])<(T0 * T1)> (_t44B4,op1_e3_l_5744BC);
          real op1_e3_l_6044BE#1 = λ(T0[],T1[])<(T0 + T1)> (_t44B2,op1_e3_l_5844BD);
          real op1_e3_l_6144BF#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_5744BC,op1_e3_l_6044BE);
          real op1_e3_l_6344C0#1 = λ(T0[],T1[])<(T0 + T1)> (_t44B0,op1_e3_l_6144BF);
          real op1_e3_l_6444C1#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_5744BC,op1_e3_l_6344C0);
          real op1_e3_l_6644C2#1 = λ(T0[],T1[])<(T0 + T1)> (_t44AE,op1_e3_l_6444C1);
          real op1_e3_l_6744C3#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_5744BC,op1_e3_l_6644C2);
          real _t44B6#1 = λ(T0[],T1[])<(T0 + T1)> (_t44AC,op1_e3_l_6744C3);
          goto JOIN44D4
        JOIN44D4:  preds = [ASSIGN44D1,JOIN4572]
          real _t44D2#1 = phi(_t44B6,_t44D3)
          real oldE44D5#1 = λ(T0[],T1[])<(T0 + T1)> (oldE44D6,_t44D2);
          if _t44A9 then goto ASSIGN44DA else goto ASSIGN4518
        ASSIGN44DA:  preds = [COND44D8]
          real _t44D9#1 = -0.5646e1;
          real _t44DB#1 = 0.23967e2;
          real _t44DD#1 = -0.340605e2;
          real _t44DF#1 = 0.1622025e2;
          tensor[3] op1_e3_l_1944E2#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs40AE,_t4468);
          tensor[3] op1_e3_l_2044E3#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos40BE,op1_e3_l_1944E2);
          tensor[3] op1_e3_l_2344E4#2 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (_t447E,op1_e3_l_2044E3);
          real op1_e3_l_2544E5#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_2344E4,op1_e3_l_2344E4);
          real op1_e3_l_2644E6#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_2544E5);
          real op1_e3_l_4344E7#3 = λ(T0[],T1[])<(T1) / ( T0)> (rad40BA,op1_e3_l_2644E6);
          real op1_e3_l_4444E8#1 = λ(T0[],T1[])<(T0 * T1)> (_t44DF,op1_e3_l_4344E7);
          real op1_e3_l_4644E9#1 = λ(T0[],T1[])<(T0 + T1)> (_t44DD,op1_e3_l_4444E8);
          real op1_e3_l_4744EA#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_4344E7,op1_e3_l_4644E9);
          real op1_e3_l_4944EB#1 = λ(T0[],T1[])<(T0 + T1)> (_t44DB,op1_e3_l_4744EA);
          real op1_e3_l_5044EC#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_4344E7,op1_e3_l_4944EB);
          real _t44E1#1 = λ(T0[],T1[])<(T0 + T1)> (_t44D9,op1_e3_l_5044EC);
          goto JOIN44FB
        JOIN44FB:  preds = [ASSIGN44F8,JOIN4542]
          real _t44F9#1 = phi(_t44E1,_t44FA)
          real _t44FC#1 = 0.1e1;
          tensor[3] op1_e3_l_124500#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs40AE,_t4468);
          tensor[3] op1_e3_l_134501#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos40BE,op1_e3_l_124500);
          real op1_e3_l_144502#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t44FC,rad40BA);
          tensor[3] op1_e3_l_154503#3 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (_t447E,op1_e3_l_134501);
          real op1_e3_l_224504#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_154503,op1_e3_l_154503);
          tensor[3] op1_e3_l_234505#1 = λ(T0[],T1[],T2[3])<(T0 * T1 * T2_{i0})>_{3} (_t44F9,op1_e3_l_144502,op1_e3_l_154503);
          real op1_e3_l_244506#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_224504);
          tensor[3] op1_e3_l_254507#1 = λ(T0[3],T1[])<(T0_{i0}) / ( T1)>_{3} (op1_e3_l_234505,op1_e3_l_244506);
          tensor[3] force44FE#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (force44FF,op1_e3_l_254507);
          int _t4511#1 = 1;
          int nn4513#1 = IAdd(nn4514,_t4511);
          goto FOREACH447D
        ASSIGN4518:  preds = [COND44D8]
          real _t4517#1 = 0.1e1;
          bool _t4519#1 = LT<real>(_t4497,_t4517);
          if _t4519 then goto ASSIGN451D else goto JOIN4542
        ASSIGN451D:  preds = [COND451B]
          real _t451C#1 = 0.1234567901e-1;
          real _t451E#2 = 0.486e1;
          real _t4520#1 = -0.1458e2;
          real _t4522#1 = 0.1458e2;
          tensor[3] op1_e3_l_334525#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs40AE,_t4468);
          tensor[3] op1_e3_l_344526#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos40BE,op1_e3_l_334525);
          tensor[3] op1_e3_l_374527#2 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (_t447E,op1_e3_l_344526);
          real op1_e3_l_394528#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_374527,op1_e3_l_374527);
          real op1_e3_l_404529#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_394528);
          real op1_e3_l_41452A#1 = λ(T0[],T1[])<(T1) / ( T0)> (rad40BA,op1_e3_l_404529);
          real op1_e3_l_42452B#1 = λ(T0[],T1[])<(T0 * T1)> (_t44A5,op1_e3_l_41452A);
          real op1_e3_l_73452C#4 = λ(T0[],T1[])<(T1) - (T0)> (_t44A3,op1_e3_l_42452B);
          real op1_e3_l_74452D#1 = λ(T0[],T1[])<(T0 * T1)> (_t451E,op1_e3_l_73452C);
          real op1_e3_l_76452E#1 = λ(T0[],T1[])<(T0) - (T1)> (_t4522,op1_e3_l_74452D);
          real op1_e3_l_77452F#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_73452C,op1_e3_l_76452E);
          real op1_e3_l_794530#1 = λ(T0[],T1[])<(T0 + T1)> (_t4520,op1_e3_l_77452F);
          real op1_e3_l_804531#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_73452C,op1_e3_l_794530);
          real op1_e3_l_824532#1 = λ(T0[],T1[])<(T0 + T1)> (_t451E,op1_e3_l_804531);
          real _t4524#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t451C,op1_e3_l_73452C,op1_e3_l_824532);
          goto JOIN4542
        JOIN4542:  preds = [ASSIGN4541,COND451B]
          real _t44FA#1 = phi(_t4524,_t40EF)
          goto JOIN44FB
        ASSIGN4544:  preds = [COND44AB]
          real _t4543#1 = 0.1e1;
          bool _t4545#1 = LT<real>(_t4497,_t4543);
          if _t4545 then goto ASSIGN4549 else goto JOIN4572
        ASSIGN4549:  preds = [COND4547]
          real _t4548#1 = -0.1e-2;
          real _t454A#1 = 0.9e-1;
          real _t454C#1 = -0.54e0;
          real _t454E#1 = 0.1215e1;
          real _t4550#1 = 0.972e0;
          tensor[3] op1_e3_l_404553#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs40AE,_t4468);
          tensor[3] op1_e3_l_414554#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos40BE,op1_e3_l_404553);
          tensor[3] op1_e3_l_444555#2 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (_t447E,op1_e3_l_414554);
          real op1_e3_l_464556#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_444555,op1_e3_l_444555);
          real op1_e3_l_474557#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_464556);
          real op1_e3_l_484558#1 = λ(T0[],T1[])<(T1) / ( T0)> (rad40BA,op1_e3_l_474557);
          real op1_e3_l_494559#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t44A3,_t44A5);
          real op1_e3_l_50455A#5 = λ(T0[],T1[])<(T0) - (T1)> (op1_e3_l_484558,op1_e3_l_494559);
          real op1_e3_l_51455B#1 = λ(T0[],T1[])<(T0 * T1)> (_t4550,op1_e3_l_50455A);
          real op1_e3_l_62455C#1 = λ(T0[],T1[])<(T0) - (T1)> (_t454E,op1_e3_l_51455B);
          real op1_e3_l_64455D#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_62455C,op1_e3_l_50455A);
          real op1_e3_l_75455E#1 = λ(T0[],T1[])<(T0 + T1)> (_t454C,op1_e3_l_64455D);
          real op1_e3_l_77455F#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_75455E,op1_e3_l_50455A);
          real op1_e3_l_984560#1 = λ(T0[],T1[])<(T0 + T1)> (_t454A,op1_e3_l_77455F);
          real op1_e3_l_1014561#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (op1_e3_l_984560,op1_e3_l_50455A,op1_e3_l_50455A);
          real _t4552#1 = λ(T0[],T1[])<(T0 + T1)> (_t4548,op1_e3_l_1014561);
          goto JOIN4572
        JOIN4572:  preds = [ASSIGN4571,COND4547]
          real _t44D3#1 = phi(_t4552,_t40EF)
          goto JOIN44D4
        ASSIGN4574:  preds = [FOREACH447D]
          bool _t4573#1 = EQ<int>(_t4460,nn4514);
          if _t4573 then goto ASSIGN4577 else goto JOIN47CF
        ASSIGN4577:  preds = [COND4575]
          bool _t4576#1 = GT<int>(pcp40B2,_t4460);
          if _t4576 then goto ASSIGN457A else goto JOIN4583
        ASSIGN457A:  preds = [COND4578]
          bool _t4579#1 = GT<int>(iter40BC,_t4460);
          if _t4579 then goto ASSIGN457D else goto JOIN4581
        ASSIGN457D:  preds = [COND457B]
          int _t457C#1 = IMod(iter40BC,pcp40B2);
          bool _t457E#1 = EQ<int>(_t4460,_t457C);
          goto JOIN4581
        JOIN4581:  preds = [ASSIGN457F,COND457B]
          bool _t4580#1 = phi(_t457E,vv40D2)
          goto JOIN4583
        JOIN4583:  preds = [JOIN4581,COND4578]
          bool _t4582#1 = phi(_t4580,vv40D2)
          if _t4582 then goto ASSIGN4586 else goto JOIN4592
        ASSIGN4586:  preds = [COND4584]
          int _t4585#1 = IDiv(iter40BC,pcp40B2);
          int _t4587#2 = 2;
          int _t4589#1 = IMod(_t4585,_t4587);
          int _t458B#1 = IMul(_t4589,_t4587);
          int _t458D#1 = 1;
          int _t458F#1 = ISub(_t458B,_t458D);
          goto JOIN4592
        JOIN4592:  preds = [ASSIGN4590,COND4584]
          int _t4591#1 = phi(_t458F,_t4460)
          bool _t4593#1 = GT<int>(_t4591,_t4460);
          if _t4593 then goto ASSIGN4597 else goto JOIN4599
        ASSIGN4597:  preds = [COND4595]
          bool _t4596#1 = LT<int>(born40CE,nnmax40B8);
          goto JOIN4599
        JOIN4599:  preds = [ASSIGN4597,COND4595]
          bool _t4598#1 = phi(_t4596,vv40D2)
          bool _t459A#1 = BNot(_t4598);
          if _t459A then goto SAVE459D else goto JOIN45A2
        SAVE459D:  preds = [COND459C]
          self.pos = pos446C;
          self._pos = pos446C;
          self.step = step446A;
          self.trav = trav4470;
          active
          goto JOIN45A2
        JOIN45A2:  preds = [*ACTIVE45A1,COND459C]
          tensor[3,3] _t4647#6 = fPerp45A3 (pos446C);
          tensor[3] _t4649#2 = <tensor[3]>[tipd409A,_t40EF,_t40EF];
          tensor[3] noff0464B#1 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (_t4647,_t4649);
          tensor[3] _t464D#2 = <tensor[3]>[_t40EF,tipd409A,_t40EF];
          tensor[3] noff1464F#1 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (_t4647,_t464D);
          tensor[3] _t4651#2 = <tensor[3]>[_t40EF,_t40EF,tipd409A];
          tensor[3] noff24653#1 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (_t4647,_t4651);
          tensor[3] op1_e3_l_24656#2 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (_t4647,_t4649);
          real op1_e3_l_44657#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_24656,op1_e3_l_24656);
          real _t4655#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_44657);
          tensor[3] op1_e3_l_2465C#2 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (_t4647,_t464D);
          real op1_e3_l_4465D#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_2465C,op1_e3_l_2465C);
          real _t465B#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_4465D);
          bool _t4661#1 = GT<real>(_t4655,_t465B);
          if _t4661 then goto JOIN4665 else goto JOIN4665
        JOIN4665:  preds = [COND4663,COND4663]
          tensor[3] _t4664#2 = phi(noff0464B,noff1464F)
          real op1_e3_l_14667#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (_t4664);
          real _t4666#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_14667);
          tensor[3] op1_e3_l_2466B#2 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (_t4647,_t4651);
          real op1_e3_l_4466C#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_2466B,op1_e3_l_2466B);
          real _t466A#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_4466C);
          bool _t4670#1 = GT<real>(_t4666,_t466A);
          if _t4670 then goto JOIN4674 else goto JOIN4674
        JOIN4674:  preds = [COND4672,COND4672]
          tensor[3] _t4673#4 = phi(_t4664,noff24653)
          real op1_e3_l_64676#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (_t4673);
          real op1_e3_l_74677#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_64676);
          real op1_e3_l_84678#1 = λ(T0[])<(1) / ( T0)> (op1_e3_l_74677);
          tensor[3] op1_e3_l_94679#1 = λ(T0[],T1[3],T2[])<(T0 * T1_{i0} * T2)>_{3} (tipd409A,_t4673,op1_e3_l_84678);
          tensor[3] op1_e3_l_10467A#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs40AE,_t4468);
          tensor[3] npos4675#1 = λ(T0[3],T1[3],T2[3])<(T1_{i0} + T0_{i0} + T2_{i0})>_{3} (pos40BE,op1_e3_l_94679,op1_e3_l_10467A);
          tensor[3] _t4681#1 = fStep4302 (npos4675);
          real op1_e3_l_84684#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (_t4673);
          real op1_e3_l_94685#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_84684);
          real op1_e3_l_104686#1 = λ(T0[])<(1) / ( T0)> (op1_e3_l_94685);
          tensor[3] op1_e3_l_114687#1 = λ(T0[],T1[3],T2[])<(T0 * T1_{i0} * T2)>_{3} (tipd409A,_t4673,op1_e3_l_104686);
          tensor[3] op1_e3_l_124688#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs40AE,_t4468);
          tensor[3] op1_e3_l_134689#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs40AE,_t4681);
          tensor[3] npos4683#5 = λ(T0[3],T1[3],T2[3],T3[3])<(T1_{i0} + T0_{i0} + T2_{i0} + T3_{i0})>_{3} (pos40BE,op1_e3_l_114687,op1_e3_l_124688,op1_e3_l_134689);
          bool _t4691#2 = GT<int>(verb40AC,_t4460);
          if _t4691 then goto JOIN4695 else goto JOIN4695
        JOIN4695:  preds = [COND4693,COND4693]
          bool _t4694#1 = phi(vv40D2,vv40D2)
          if _t4694 then goto ASSIGN4698 else goto ASSIGN4BD2
        ASSIGN4698:  preds = [COND4696]
          bool _t4697#1 = true;
          goto JOIN469B
        JOIN469B:  preds = [ASSIGN4698,ASSIGN4BD3]
          bool _t4699#1 = phi(_t4697,_t469A)
          if _t4699 then goto ASSIGN469E else goto JOIN46C3
        ASSIGN469E:  preds = [COND469C]
          string _t469D#1 = "(i#";
          string _t469F#1 = " @ ";
          string _t46A1#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID40C0,_t469D,iter40BC,_t469F,pos446C,_t46A1);
          string _t46A4#1 = " 0==nn =>NEW(";
          string _t46A6#1 = ") w/ ID=";
          real _t46A8#1 = 0.1e7;
          real _t46AA#1 = TensorIndex<tensor[3],[0]>(npos4683);
          real _t46AC#1 = urnd403D (_t46AA);
          real _t46AE#1 = TensorIndex<tensor[3],[1]>(npos4683);
          real _t46B0#1 = urnd403D (_t46AE);
          real _t46B2#1 = TensorIndex<tensor[3],[2]>(npos4683);
          real _t46B4#1 = urnd403D (_t46B2);
          real _t46B6#1 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (_t46AC,_t46B0,_t46B4);
          real _t46B8#1 = 0.1e1;
          real _t46BA#1 = MathFn<fmod>(_t46B6,_t46B8);
          real _t46BC#1 = λ(T0[],T1[])<(T0 * T1)> (_t46A8,_t46BA);
          real _t46BE#1 = MathFn<floor>(_t46BC);
          string _t46C0#1 = "\n";
          Print<[string,tensor[3],string,real,string]>(_t46A4,npos4683,_t46A6,_t46BE,_t46C0);
          goto JOIN46C3
        JOIN46C3:  preds = [MASSIGN46C2,COND469C]
          tensor[3] op1_e3_l_446C5#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs40AE,_t4468);
          tensor[3] op1_e3_l_546C6#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos40BE,op1_e3_l_446C5);
          tensor[3] op1_e3_l_846C7#2 = λ(T0[3],T1[3])<(T1_{i0}) - (T0_{i0})>_{3} (_t40F1,op1_e3_l_546C6);
          real op1_e3_l_1046C8#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_846C7,op1_e3_l_846C7);
          real _t46C4#2 = λ(T0[])<Sqrt(T0)> (op1_e3_l_1046C8);
          bool _t46CE#1 = LT<real>(_t46C4,_t40F9);
          if _t46CE then goto ASSIGN46D2 else goto JOIN46D6
        ASSIGN46D2:  preds = [COND46D0]
          real _t46D1#1 = 0.3e1;
          bool _t46D3#1 = GT<real>(_t46C4,_t46D1);
          goto JOIN46D6
        JOIN46D6:  preds = [ASSIGN46D4,COND46D0]
          bool _t46D5#1 = phi(_t46D3,vv40D2)
          if _t46D5 then goto ASSIGN46D9 else goto JOIN47A8
        ASSIGN46D9:  preds = [COND46D7]
          real x46D8#13 = TensorIndex<tensor[3],[0]>(pos446C);
          real y46DA#13 = TensorIndex<tensor[3],[1]>(pos446C);
          real z46DC#16 = TensorIndex<tensor[3],[2]>(pos446C);
          real _t46DE#7 = 0.2e1;
          int _t46E0#1 = 2;
          real op1_e3_l_646E3#1 = λ(T0[])<(T0)^2> (x46D8);
          real op1_e3_l_746E4#1 = λ(T0[])<(T0)^2> (y46DA);
          real op1_e3_l_846E5#2 = λ(T0[])<(T0)^2> (z46DC);
          real op1_e3_l_946E6#1 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_646E3,op1_e3_l_746E4,op1_e3_l_846E5);
          real op1_e3_l_1146E7#1 = λ(T0[])<Cosine(T0)> (op1_e3_l_946E6);
          real _t46E2#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t46DE,x46D8,op1_e3_l_846E5,op1_e3_l_1146E7);
          real op1_e3_l_646EF#1 = λ(T0[])<(T0)^2> (x46D8);
          real op1_e3_l_746F0#1 = λ(T0[])<(T0)^2> (y46DA);
          real op1_e3_l_846F1#2 = λ(T0[])<(T0)^2> (z46DC);
          real op1_e3_l_946F2#1 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_646EF,op1_e3_l_746F0,op1_e3_l_846F1);
          real op1_e3_l_1146F3#1 = λ(T0[])<Cosine(T0)> (op1_e3_l_946F2);
          real _t46EE#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t46DE,y46DA,op1_e3_l_846F1,op1_e3_l_1146F3);
          real op1_e3_l_1046FB#1 = λ(T0[])<(T0)^2> (x46D8);
          real op1_e3_l_1146FC#1 = λ(T0[])<(T0)^2> (y46DA);
          real op1_e3_l_1246FD#1 = λ(T0[])<(T0)^2> (z46DC);
          real op1_e3_l_1346FE#2 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_1046FB,op1_e3_l_1146FC,op1_e3_l_1246FD);
          real op1_e3_l_1446FF#1 = λ(T0[])<(T0)^3> (z46DC);
          real op1_e3_l_154700#1 = λ(T0[])<Cosine(T0)> (op1_e3_l_1346FE);
          real op1_e3_l_204701#1 = λ(T0[])<Sine(T0)> (op1_e3_l_1346FE);
          real op1_e3_l_214702#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t46DE,op1_e3_l_1446FF,op1_e3_l_154700);
          real op1_e3_l_224703#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t46DE,z46DC,op1_e3_l_204701);
          real _t46FA#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_214702,op1_e3_l_224703);
          tensor[3] g470E#1 = <tensor[3]>[_t46E2,_t46EE,_t46FA];
          int _t4710#1 = -4;
          real _t4712#6 = IntToReal(_t4710);
          real op1_e3_l_114715#2 = λ(T0[])<(T0)^2> (x46D8);
          real op1_e3_l_124716#1 = λ(T0[])<(T0)^2> (y46DA);
          real op1_e3_l_134717#3 = λ(T0[])<(T0)^2> (z46DC);
          real op1_e3_l_144718#2 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_114715,op1_e3_l_124716,op1_e3_l_134717);
          real op1_e3_l_174719#1 = λ(T0[])<Sine(T0)> (op1_e3_l_144718);
          real op1_e3_l_23471A#1 = λ(T0[])<Cosine(T0)> (op1_e3_l_144718);
          real op1_e3_l_24471B#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t4712,op1_e3_l_114715,op1_e3_l_134717,op1_e3_l_174719);
          real op1_e3_l_25471C#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t46DE,op1_e3_l_134717,op1_e3_l_23471A);
          real _t4714#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_24471B,op1_e3_l_25471C);
          real op1_e3_l_74727#1 = λ(T0[])<(T0)^2> (x46D8);
          real op1_e3_l_84728#1 = λ(T0[])<(T0)^2> (y46DA);
          real op1_e3_l_94729#2 = λ(T0[])<(T0)^2> (z46DC);
          real op1_e3_l_10472A#1 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_74727,op1_e3_l_84728,op1_e3_l_94729);
          real op1_e3_l_12472B#1 = λ(T0[])<Sine(T0)> (op1_e3_l_10472A);
          real _t4726#2 = λ(T0[],T1[],T2[],T3[],T4[])<(T0 * T1 * T2 * T3 * T4)> (_t4712,x46D8,y46DA,op1_e3_l_94729,op1_e3_l_12472B);
          real op1_e3_l_124733#1 = λ(T0[])<(T0)^2> (x46D8);
          real op1_e3_l_134734#1 = λ(T0[])<(T0)^2> (y46DA);
          real op1_e3_l_144735#1 = λ(T0[])<(T0)^2> (z46DC);
          real op1_e3_l_154736#2 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_124733,op1_e3_l_134734,op1_e3_l_144735);
          real op1_e3_l_164737#1 = λ(T0[])<(T0)^3> (z46DC);
          real op1_e3_l_174738#1 = λ(T0[])<Sine(T0)> (op1_e3_l_154736);
          real op1_e3_l_224739#1 = λ(T0[])<Cosine(T0)> (op1_e3_l_154736);
          real op1_e3_l_23473A#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t4712,x46D8,op1_e3_l_164737,op1_e3_l_174738);
          real op1_e3_l_24473B#1 = λ(T0[],T1[],T2[],T3[])<(T2 * T0 * T1 * T3)> (x46D8,z46DC,_t40F9,op1_e3_l_224739);
          real _t4732#2 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_23473A,op1_e3_l_24473B);
          tensor[3] _t4746#1 = <tensor[3]>[_t4714,_t4726,_t4732];
          real op1_e3_l_114749#1 = λ(T0[])<(T0)^2> (x46D8);
          real op1_e3_l_12474A#2 = λ(T0[])<(T0)^2> (y46DA);
          real op1_e3_l_13474B#3 = λ(T0[])<(T0)^2> (z46DC);
          real op1_e3_l_14474C#2 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_114749,op1_e3_l_12474A,op1_e3_l_13474B);
          real op1_e3_l_17474D#1 = λ(T0[])<Sine(T0)> (op1_e3_l_14474C);
          real op1_e3_l_23474E#1 = λ(T0[])<Cosine(T0)> (op1_e3_l_14474C);
          real op1_e3_l_24474F#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t4712,op1_e3_l_12474A,op1_e3_l_13474B,op1_e3_l_17474D);
          real op1_e3_l_254750#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t46DE,op1_e3_l_13474B,op1_e3_l_23474E);
          real _t4748#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_24474F,op1_e3_l_254750);
          real op1_e3_l_12475B#1 = λ(T0[])<(T0)^2> (x46D8);
          real op1_e3_l_13475C#1 = λ(T0[])<(T0)^2> (y46DA);
          real op1_e3_l_14475D#1 = λ(T0[])<(T0)^2> (z46DC);
          real op1_e3_l_15475E#2 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_12475B,op1_e3_l_13475C,op1_e3_l_14475D);
          real op1_e3_l_16475F#1 = λ(T0[])<(T0)^3> (z46DC);
          real op1_e3_l_174760#1 = λ(T0[])<Sine(T0)> (op1_e3_l_15475E);
          real op1_e3_l_224761#1 = λ(T0[])<Cosine(T0)> (op1_e3_l_15475E);
          real op1_e3_l_234762#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t4712,y46DA,op1_e3_l_16475F,op1_e3_l_174760);
          real op1_e3_l_244763#1 = λ(T0[],T1[],T2[],T3[])<(T2 * T0 * T1 * T3)> (y46DA,z46DC,_t40F9,op1_e3_l_224761);
          real _t475A#2 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_234762,op1_e3_l_244763);
          tensor[3] _t476E#1 = <tensor[3]>[_t4726,_t4748,_t475A];
          real _t4770#1 = 0.1e2;
          real op1_e3_l_144773#1 = λ(T0[])<(T0)^2> (x46D8);
          real op1_e3_l_154774#1 = λ(T0[])<(T0)^2> (y46DA);
          real op1_e3_l_164775#2 = λ(T0[])<(T0)^2> (z46DC);
          real op1_e3_l_174776#2 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_144773,op1_e3_l_154774,op1_e3_l_164775);
          real op1_e3_l_184777#1 = λ(T0[])<(T0)^4> (z46DC);
          real op1_e3_l_194778#2 = λ(T0[])<Sine(T0)> (op1_e3_l_174776);
          real op1_e3_l_254779#1 = λ(T0[])<Cosine(T0)> (op1_e3_l_174776);
          real op1_e3_l_31477A#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t4712,op1_e3_l_184777,op1_e3_l_194778);
          real op1_e3_l_32477B#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t4770,op1_e3_l_164775,op1_e3_l_254779);
          real op1_e3_l_33477C#1 = λ(T0[],T1[])<(T0 * T1)> (_t46DE,op1_e3_l_194778);
          real _t4772#1 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_31477A,op1_e3_l_32477B,op1_e3_l_33477C);
          tensor[3] _t4788#1 = <tensor[3]>[_t4732,_t475A,_t4772];
          tensor[3,3] hess478A#1 = <tensor[3,3]>[_t4746,_t476E,_t4788];
          (real[3] _t478C#1,tensor[3][3] evecs478D#0) = EigenVecs3x3(hess478A);
          real _t478F#1 = Subscript<real[3]>(_t478C,_t46E0);
          real op1_e3_l_34792#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (g470E);
          real op1_e3_l_44793#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_34792);
          real op1_e3_l_54794#1 = λ(T0[])<Neg(T0)> (_t478F);
          real op1_e3_l_64795#1 = λ(T0[],T1[])<(T0 + T1)> (fBias4098,op1_e3_l_44793);
          real str4791#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_54794,op1_e3_l_64795);
          bool _t479B#1 = GT<real>(str4791,fStrTh4094);
          if _t479B then goto ASSIGN479F else goto JOIN47A6
        ASSIGN479F:  preds = [COND479D]
          bool _t479E#1 = GTE<real>(_t40EF,fMaskTh4096);
          if _t479E then goto ASSIGN47A2 else goto JOIN47A4
        ASSIGN47A2:  preds = [COND47A0]
          bool _t47A1#1 = true;
          goto JOIN47A4
        JOIN47A4:  preds = [ASSIGN47A2,COND47A0]
          bool _t47A3#1 = phi(_t47A1,vv40D2)
          goto JOIN47A6
        JOIN47A6:  preds = [JOIN47A4,COND479D]
          bool _t47A5#1 = phi(_t47A3,vv40D2)
          goto JOIN47A8
        JOIN47A8:  preds = [JOIN47A6,COND46D7]
          bool _t47A7#1 = phi(_t47A5,vv40D2)
          if _t47A7 then goto NEW47AA else goto JOIN47B0
        NEW47AA:  preds = [COND47A9]
          new point(npos4683,hh40C2);
          int _t47AB#1 = 1;
          int born47AD#1 = IAdd(born40CE,_t47AB);
          goto JOIN47B0
        JOIN47B0:  preds = [ASSIGN47AE,COND47A9]
          int born47AF#1 = phi(born47AD,born40CE)
          if _t4691 then goto JOIN47B3 else goto JOIN47B3
        JOIN47B3:  preds = [COND47B1,COND47B1]
          bool _t47B2#1 = phi(vv40D2,vv40D2)
          if _t47B2 then goto ASSIGN47B6 else goto ASSIGN4BCF
        ASSIGN47B6:  preds = [COND47B4]
          bool _t47B5#1 = true;
          goto JOIN47B9
        JOIN47B9:  preds = [ASSIGN47B6,ASSIGN4BD0]
          bool _t47B7#1 = phi(_t47B5,_t47B8)
          if _t47B7 then goto ASSIGN47BC else goto JOIN47C7
        ASSIGN47BC:  preds = [COND47BA]
          string _t47BB#1 = "(i#";
          string _t47BD#1 = " @ ";
          string _t47BF#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID40C0,_t47BB,iter40BC,_t47BD,pos446C,_t47BF);
          string _t47C2#1 = "nn=0; after birthing mvmt=";
          string _t47C4#1 = "\n";
          Print<[string,real,string]>(_t47C2,mvmt40CA,_t47C4);
          goto JOIN47C7
        JOIN47C7:  preds = [MASSIGN47C6,COND47BA]
          self.pos = pos446C;
          self._pos = pos446C;
          self.step = step446A;
          self.trav = trav4470;
          self.born = born47AF;
          active
          goto JOIN47CF
        JOIN47CF:  preds = [*ACTIVE47CD,COND4575]
          int born47CE#9 = phi(born40CE)
          tensor[3,3] _t47D0#4 = fPerp45A3 (pos446C);
          tensor[3] op1_e3_l_347D3#1 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (_t47D0,force44FF);
          tensor[3] es47D2#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (hh40C2,op1_e3_l_347D3);
          tensor[3] op1_e3_l_347D7#2 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (_t47D0,force44FF);
          real op1_e3_l_547D8#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_347D7,op1_e3_l_347D7);
          real op1_e3_l_647D9#1 = λ(T0[],T1[])<(T0 * T0 * T1)> (hh40C2,op1_e3_l_547D8);
          real _t47D6#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_647D9);
          bool _t47DE#1 = GT<real>(_t47D6,tipd409A);
          if _t47DE then goto ASSIGN47E7 else goto JOIN47FB
        ASSIGN47E7:  preds = [COND47E0]
          tensor[3] op1_e3_l_547E2#2 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (_t47D0,force44FF);
          real op1_e3_l_747E3#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_547E2,op1_e3_l_547E2);
          real op1_e3_l_847E4#1 = λ(T0[],T1[])<(T0 * T0 * T1)> (hh40C2,op1_e3_l_747E3);
          real op1_e3_l_947E5#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_847E4);
          real op1_e3_l_1047E6#1 = λ(T0[],T1[])<(T0) / ( T1)> (tipd409A,op1_e3_l_947E5);
          real hh47E1#1 = λ(T0[],T1[])<(T0 * T1)> (hh40C2,op1_e3_l_1047E6);
          tensor[3] op1_e3_l_747EE#3 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (_t47D0,force44FF);
          real op1_e3_l_947EF#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_747EE,op1_e3_l_747EE);
          real op1_e3_l_1047F0#1 = λ(T0[],T1[])<(T0 * T0 * T1)> (hh40C2,op1_e3_l_947EF);
          real op1_e3_l_1147F1#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_1047F0);
          real op1_e3_l_1247F2#1 = λ(T0[],T1[])<(T0) / ( T1)> (tipd409A,op1_e3_l_1147F1);
          tensor[3] es47ED#1 = λ(T0[],T1[],T2[3])<(T0 * T1 * T2_{i0})>_{3} (hh40C2,op1_e3_l_1247F2,op1_e3_l_747EE);
          goto JOIN47FB
        JOIN47FB:  preds = [ASSIGN47F8,COND47E0]
          tensor[3] es47F9#18 = phi(es47ED,es47D2)
          real hh47FA#2 = phi(hh47E1,hh40C2)
          tensor[3] op1_e3_l_447FD#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs40AE,_t4468);
          tensor[3] _t47FC#1 = λ(T0[3],T1[3],T2[3])<(T0_{i0} + T2_{i0} + T1_{i0})>_{3} (pos40BE,es47F9,op1_e3_l_447FD);
          tensor[3] _t4800#16 = fStep4302 (_t47FC);
          tensor[3] fs4802#2 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs40AE,_t4800);
          real op1_e3_l_54805#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (_t4800);
          real op1_e3_l_64806#1 = λ(T0[],T1[])<(T0 * T0 * T1)> (sfs40AE,op1_e3_l_54805);
          real op1_e3_l_74807#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (es47F9);
          real op1_e3_l_84808#1 = λ(T0[],T1[])<(T0 * T1)> (fsEps40A8,tipd409A);
          real op1_e3_l_94809#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_74807);
          real op1_e3_l_10480A#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_64806);
          real op1_e3_l_11480B#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_84808,op1_e3_l_94809);
          real _t4804#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_10480A,op1_e3_l_11480B);
          real _t4814#3 = 0.5e0;
          bool _t4816#1 = GT<real>(_t4804,_t4814);
          if _t4816 then goto ASSIGN481A else goto JOIN4854
        ASSIGN481A:  preds = [COND4818]
          real hh4819#2 = λ(T0[],T1[])<(T0 * T1)> (hh47FA,_t4814);
          bool _t481B#1 = GT<int>(verb40AC,_t4460);
          if _t481B then goto JOIN481F else goto JOIN481F
        JOIN481F:  preds = [COND481D,COND481D]
          bool _t481E#1 = phi(vv40D2,vv40D2)
          if _t481E then goto ASSIGN4822 else goto ASSIGN4BCC
        ASSIGN4822:  preds = [COND4820]
          bool _t4821#1 = true;
          goto JOIN4825
        JOIN4825:  preds = [ASSIGN4822,ASSIGN4BCD]
          bool _t4823#1 = phi(_t4821,_t4824)
          if _t4823 then goto ASSIGN4828 else goto JOIN484B
        ASSIGN4828:  preds = [COND4826]
          string _t4827#1 = "(i#";
          string _t4829#1 = " @ ";
          string _t482B#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID40C0,_t4827,iter40BC,_t4829,pos446C,_t482B);
          string _t482E#1 = "nn=";
          string _t4830#1 = "; |fs|/|es|=";
          real op1_e3_l_34833#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (_t4800);
          real op1_e3_l_44834#1 = λ(T0[],T1[])<(T0 * T0 * T1)> (sfs40AE,op1_e3_l_34833);
          real op1_e3_l_54835#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (es47F9);
          real op1_e3_l_64836#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_44834);
          real op1_e3_l_74837#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_54835);
          real _t4832#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_64836,op1_e3_l_74837);
          string _t483E#1 = " > 0.5; trying again with hh=";
          string _t4840#1 = "; mvmt=";
          string _t4842#3 = "\n";
          Print<[string,int,string,real,string,real,string,real,string]>(_t482E,nn4514,_t4830,_t4832,_t483E,hh4819,_t4840,mvmt40CA,_t4842);
          string _t4845#1 = "        fs=";
          Print<[string,tensor[3],string]>(_t4845,fs4802,_t4842);
          string _t4848#1 = "        es=";
          Print<[string,tensor[3],string]>(_t4848,es47F9,_t4842);
          goto JOIN484B
        JOIN484B:  preds = [MASSIGN484A,COND4826]
          self.pos = pos446C;
          self._pos = pos446C;
          self.hh = hh4819;
          self.step = step446A;
          self.trav = trav4470;
          self.born = born47CE;
          active
          goto JOIN4854
        JOIN4854:  preds = [*ACTIVE4852,COND4818]
          real hh4853#2 = phi(hh47FA)
          tensor[3] op1_e3_l_64856#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs40AE,_t4468);
          tensor[3] op1_e3_l_74857#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs40AE,_t4800);
          tensor[3] pos4855#5 = λ(T0[3],T1[3],T2[3],T3[3])<(T0_{i0} + T2_{i0} + T3_{i0} + T1_{i0})>_{3} (pos40BE,es47F9,op1_e3_l_64856,op1_e3_l_74857);
          point[] _t485B#1 = SphereQuery<3,point>(pos4855,rad40BA);
        FOREACH485E:  preds = [ASSIGN485C,NEXT48C4]
          foreach (P485D in _t485B) on exit goto ASSIGN48F8
            tensor[3] mno48B5#5 = phi(_t40F1,mno48B4)
            real newE48B0#6 = phi(_t40EF,newE48AF)
            int nn48C2#9 = phi(_t4460,nn48C1)
            real closest443E#3 = phi(rad40BA,closest48B2)
          tensor[3] _t485F#5 = P485D.pos;
          tensor[3] op1_e3_l_74862#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs40AE,_t4468);
          tensor[3] op1_e3_l_84863#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs40AE,_t4800);
          tensor[3] op1_e3_l_94864#1 = λ(T0[3],T1[3],T2[3],T3[3])<(T0_{i0} + T2_{i0} + T3_{i0} + T1_{i0})>_{3} (pos40BE,es47F9,op1_e3_l_74862,op1_e3_l_84863);
          tensor[3] op1_e3_l_134865#2 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (_t485F,op1_e3_l_94864);
          real op1_e3_l_154866#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_134865,op1_e3_l_134865);
          real _t4861#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_154866);
          tensor[3] op1_e3_l_8486E#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs40AE,_t4468);
          tensor[3] op1_e3_l_9486F#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs40AE,_t4800);
          tensor[3] op1_e3_l_104870#1 = λ(T0[3],T1[3],T2[3],T3[3])<(T0_{i0} + T2_{i0} + T3_{i0} + T1_{i0})>_{3} (pos40BE,es47F9,op1_e3_l_8486E,op1_e3_l_9486F);
          tensor[3] op1_e3_l_144871#2 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (_t485F,op1_e3_l_104870);
          real op1_e3_l_164872#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_144871,op1_e3_l_144871);
          real op1_e3_l_174873#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_164872);
          real _t486D#2 = λ(T0[],T1[])<(T1) / ( T0)> (rad40BA,op1_e3_l_174873);
          real _t487B#2 = 0.2e1;
          real _t487D#2 = 0.3e1;
          real _t487F#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t487B,_t487D);
          bool _t4881#1 = LT<real>(_t486D,_t487F);
          if _t4881 then goto ASSIGN4885 else goto ASSIGN48C6
        ASSIGN4885:  preds = [COND4883]
          real _t4884#1 = 0.1e1;
          real _t4886#1 = -0.5646e1;
          real _t4888#1 = 0.119835e2;
          real _t488A#1 = -0.113535e2;
          real _t488C#1 = 0.40550625e1;
          tensor[3] op1_e3_l_37488F#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs40AE,_t4468);
          tensor[3] op1_e3_l_384890#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs40AE,_t4800);
          tensor[3] op1_e3_l_394891#1 = λ(T0[3],T1[3],T2[3],T3[3])<(T0_{i0} + T2_{i0} + T3_{i0} + T1_{i0})>_{3} (pos40BE,es47F9,op1_e3_l_37488F,op1_e3_l_384890);
          tensor[3] op1_e3_l_434892#2 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (_t485F,op1_e3_l_394891);
          real op1_e3_l_454893#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_434892,op1_e3_l_434892);
          real op1_e3_l_464894#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_454893);
          real op1_e3_l_774895#4 = λ(T0[],T1[])<(T1) / ( T0)> (rad40BA,op1_e3_l_464894);
          real op1_e3_l_784896#1 = λ(T0[],T1[])<(T0 * T1)> (_t488C,op1_e3_l_774895);
          real op1_e3_l_804897#1 = λ(T0[],T1[])<(T0 + T1)> (_t488A,op1_e3_l_784896);
          real op1_e3_l_814898#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_774895,op1_e3_l_804897);
          real op1_e3_l_834899#1 = λ(T0[],T1[])<(T0 + T1)> (_t4888,op1_e3_l_814898);
          real op1_e3_l_84489A#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_774895,op1_e3_l_834899);
          real op1_e3_l_86489B#1 = λ(T0[],T1[])<(T0 + T1)> (_t4886,op1_e3_l_84489A);
          real op1_e3_l_87489C#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_774895,op1_e3_l_86489B);
          real _t488E#1 = λ(T0[],T1[])<(T0 + T1)> (_t4884,op1_e3_l_87489C);
          goto JOIN48AE
        JOIN48AE:  preds = [ASSIGN48AB,JOIN48F6]
          real _t48AC#1 = phi(_t488E,_t48AD)
          real newE48AF#1 = λ(T0[],T1[])<(T0 + T1)> (newE48B0,_t48AC);
          real closest48B2#1 = Min<real>(closest443E,_t4861);
          tensor[3] op1_e3_l_848B6#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs40AE,_t4468);
          tensor[3] op1_e3_l_948B7#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs40AE,_t4800);
          tensor[3] op1_e3_l_1048B8#1 = λ(T0[3],T1[3],T2[3],T3[3])<(T0_{i0} + T2_{i0} + T3_{i0} + T1_{i0})>_{3} (pos40BE,es47F9,op1_e3_l_848B6,op1_e3_l_948B7);
          tensor[3] op1_e3_l_1148B9#1 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (_t485F,op1_e3_l_1048B8);
          tensor[3] mno48B4#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (mno48B5,op1_e3_l_1148B9);
          int _t48BF#1 = 1;
          int nn48C1#1 = IAdd(nn48C2,_t48BF);
          goto FOREACH485E
        ASSIGN48C6:  preds = [COND4883]
          real _t48C5#1 = 0.1e1;
          bool _t48C7#1 = LT<real>(_t486D,_t48C5);
          if _t48C7 then goto ASSIGN48CB else goto JOIN48F6
        ASSIGN48CB:  preds = [COND48C9]
          real _t48CA#1 = -0.1e-2;
          real _t48CC#1 = 0.9e-1;
          real _t48CE#1 = -0.54e0;
          real _t48D0#1 = 0.1215e1;
          real _t48D2#1 = 0.972e0;
          tensor[3] op1_e3_l_5548D5#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs40AE,_t4468);
          tensor[3] op1_e3_l_5648D6#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs40AE,_t4800);
          tensor[3] op1_e3_l_5748D7#1 = λ(T0[3],T1[3],T2[3],T3[3])<(T0_{i0} + T2_{i0} + T3_{i0} + T1_{i0})>_{3} (pos40BE,es47F9,op1_e3_l_5548D5,op1_e3_l_5648D6);
          tensor[3] op1_e3_l_6148D8#2 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (_t485F,op1_e3_l_5748D7);
          real op1_e3_l_6348D9#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_6148D8,op1_e3_l_6148D8);
          real op1_e3_l_6448DA#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_6348D9);
          real op1_e3_l_6548DB#1 = λ(T0[],T1[])<(T1) / ( T0)> (rad40BA,op1_e3_l_6448DA);
          real op1_e3_l_6648DC#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t487B,_t487D);
          real op1_e3_l_6748DD#5 = λ(T0[],T1[])<(T0) - (T1)> (op1_e3_l_6548DB,op1_e3_l_6648DC);
          real op1_e3_l_6848DE#1 = λ(T0[],T1[])<(T0 * T1)> (_t48D2,op1_e3_l_6748DD);
          real op1_e3_l_8148DF#1 = λ(T0[],T1[])<(T0) - (T1)> (_t48D0,op1_e3_l_6848DE);
          real op1_e3_l_8348E0#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_8148DF,op1_e3_l_6748DD);
          real op1_e3_l_9648E1#1 = λ(T0[],T1[])<(T0 + T1)> (_t48CE,op1_e3_l_8348E0);
          real op1_e3_l_9848E2#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_9648E1,op1_e3_l_6748DD);
          real op1_e3_l_12348E3#1 = λ(T0[],T1[])<(T0 + T1)> (_t48CC,op1_e3_l_9848E2);
          real op1_e3_l_12648E4#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (op1_e3_l_12348E3,op1_e3_l_6748DD,op1_e3_l_6748DD);
          real _t48D4#1 = λ(T0[],T1[])<(T0 + T1)> (_t48CA,op1_e3_l_12648E4);
          goto JOIN48F6
        JOIN48F6:  preds = [ASSIGN48F5,COND48C9]
          real _t48AD#1 = phi(_t48D4,_t40EF)
          goto JOIN48AE
        ASSIGN48F8:  preds = [FOREACH485E]
          real _t48F7#5 = IntToReal(nn48C2);
          bool _t48F9#2 = GT<int>(verb40AC,_t4460);
          if _t48F9 then goto JOIN48FD else goto JOIN48FD
        JOIN48FD:  preds = [COND48FB,COND48FB]
          bool _t48FC#1 = phi(vv40D2,vv40D2)
          if _t48FC then goto ASSIGN4900 else goto ASSIGN4BC9
        ASSIGN4900:  preds = [COND48FE]
          bool _t48FF#1 = true;
          goto JOIN4903
        JOIN4903:  preds = [ASSIGN4900,ASSIGN4BCA]
          bool _t4901#1 = phi(_t48FF,_t4902)
          if _t4901 then goto ASSIGN4906 else goto JOIN4915
        ASSIGN4906:  preds = [COND4904]
          string _t4905#1 = "(i#";
          string _t4907#1 = " @ ";
          string _t4909#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID40C0,_t4905,iter40BC,_t4907,pos4855,_t4909);
          string _t490C#1 = "nn=";
          string _t490E#1 = "; oldE=";
          string _t4910#1 = " newE=";
          string _t4912#1 = "\n";
          Print<[string,int,string,real,string,real,string]>(_t490C,nn48C2,_t490E,oldE44D6,_t4910,newE48B0,_t4912);
          goto JOIN4915
        JOIN4915:  preds = [MASSIGN4914,COND4904]
          real _t4916#2 = λ(T0[],T1[])<(T0) - (T1)> (newE48B0,oldE44D6);
          tensor[3] op1_e3_l_94919#2 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs40AE,_t4468);
          tensor[3] op1_e3_l_10491A#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs40AE,_t4800);
          tensor[3] op1_e3_l_12491B#1 = λ(T0[3],T1[3],T2[3],T3[3])<(T0_{i0} + T2_{i0} + T3_{i0} + T1_{i0})>_{3} (pos40BE,es47F9,op1_e3_l_94919,op1_e3_l_10491A);
          tensor[3] op1_e3_l_13491C#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos40BE,op1_e3_l_94919);
          tensor[3] _t4918#1 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (op1_e3_l_12491B,op1_e3_l_13491C);
          tensor[3] op1_e3_l_114923#2 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs40AE,_t4468);
          tensor[3] op1_e3_l_124924#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs40AE,_t4800);
          tensor[3] op1_e3_l_144925#1 = λ(T0[3],T1[3],T2[3],T3[3])<(T0_{i0} + T2_{i0} + T3_{i0} + T1_{i0})>_{3} (pos40BE,es47F9,op1_e3_l_114923,op1_e3_l_124924);
          tensor[3] op1_e3_l_154926#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos40BE,op1_e3_l_114923);
          tensor[3] op1_e3_l_164927#1 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (op1_e3_l_144925,op1_e3_l_154926);
          tensor[3] op1_e3_l_174928#1 = λ(T0[3])<Neg(T0_{i0})>_{3} (force44FF);
          real op1_e3_l_184929#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_164927,op1_e3_l_174928);
          real _t4922#1 = λ(T0[],T1[])<(T0 * T1)> (gdeTest40A2,op1_e3_l_184929);
          bool _t4932#1 = GT<real>(_t4916,_t4922);
          if _t4932 then goto ASSIGN4936 else goto JOIN4990
        ASSIGN4936:  preds = [COND4934]
          real hh4935#3 = λ(T0[],T1[])<(T0 * T1)> (hh4853,gdeBack40A4);
          bool _t4937#1 = EQ<real>(_t40EF,hh4935);
          if _t4937 then goto ASSIGN493B else goto JOIN4945
        ASSIGN493B:  preds = [COND4939]
          string _t493A#1 = "(i#";
          string _t493C#1 = " @ ";
          string _t493E#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID40C0,_t493A,iter40BC,_t493C,pos4855,_t493E);
          string _t4941#1 = "backtracked all the way to hh=0\n";
          Print<[string]>(_t4941);
          die
          goto JOIN4945
        JOIN4945:  preds = [*DIE4944,COND4939]
          if _t48F9 then goto JOIN4948 else goto JOIN4948
        JOIN4948:  preds = [COND4946,COND4946]
          bool _t4947#1 = phi(vv40D2,vv40D2)
          if _t4947 then goto ASSIGN494B else goto ASSIGN4BC6
        ASSIGN494B:  preds = [COND4949]
          bool _t494A#1 = true;
          goto JOIN494E
        JOIN494E:  preds = [ASSIGN494B,ASSIGN4BC7]
          bool _t494C#1 = phi(_t494A,_t494D)
          if _t494C then goto ASSIGN4951 else goto JOIN4986
        ASSIGN4951:  preds = [COND494F]
          string _t4950#1 = "(i#";
          string _t4952#1 = " @ ";
          string _t4954#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID40C0,_t4950,iter40BC,_t4952,pos4855,_t4954);
          string _t4957#1 = "nn=";
          string _t4959#1 = "; oldE=";
          string _t495B#1 = " newE=";
          string _t495D#1 = "; backtracking; hh=";
          string _t495F#1 = "; mvmt=";
          string _t4961#7 = "\n";
          Print<[string,int,string,real,string,real,string,real,string,real,string]>(_t4957,nn48C2,_t4959,oldE44D6,_t495B,newE48B0,_t495D,hh4935,_t495F,mvmt40CA,_t4961);
          string _t4964#1 = "      fs=";
          Print<[string,tensor[3],string]>(_t4964,fs4802,_t4961);
          string _t4967#1 = "      es=";
          Print<[string,tensor[3],string]>(_t4967,es47F9,_t4961);
          string _t496A#1 = "      newE - oldE=";
          Print<[string,real,string]>(_t496A,_t4916,_t4961);
          string _t496D#1 = "      force=";
          Print<[string,tensor[3],string]>(_t496D,force44FF,_t4961);
          string _t4970#1 = "      dpos=";
          Print<[string,tensor[3],string]>(_t4970,_t4918,_t4961);
          string _t4973#1 = "      0.5*(pos - oldpos).(-force)=";
          tensor[3] op1_e3_l_114976#2 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs40AE,_t4468);
          tensor[3] op1_e3_l_124977#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs40AE,_t4800);
          tensor[3] op1_e3_l_144978#1 = λ(T0[3],T1[3],T2[3],T3[3])<(T0_{i0} + T2_{i0} + T3_{i0} + T1_{i0})>_{3} (pos40BE,es47F9,op1_e3_l_114976,op1_e3_l_124977);
          tensor[3] op1_e3_l_154979#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos40BE,op1_e3_l_114976);
          tensor[3] op1_e3_l_16497A#1 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (op1_e3_l_144978,op1_e3_l_154979);
          tensor[3] op1_e3_l_17497B#1 = λ(T0[3])<Neg(T0_{i0})>_{3} (force44FF);
          real op1_e3_l_18497C#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_16497A,op1_e3_l_17497B);
          real _t4975#1 = λ(T0[],T1[])<(T0 * T1)> (_t4814,op1_e3_l_18497C);
          Print<[string,real,string]>(_t4973,_t4975,_t4961);
          goto JOIN4986
        JOIN4986:  preds = [MASSIGN4985,COND494F]
          self.pos = pos446C;
          self._pos = pos446C;
          self.hh = hh4935;
          self.step = step446A;
          self.trav = trav4470;
          self.closest = closest443E;
          self.born = born47CE;
          active
          goto JOIN4990
        JOIN4990:  preds = [*ACTIVE498E,COND4934]
          real hh498F#1 = phi(hh4853)
          tensor[3] pos444A#11 = phi(pos4855)
          real hh4448#2 = λ(T0[],T1[])<(T0 * T1)> (hh498F,gdeOppor40A6);
          tensor[3] op1_e3_l_54992#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs40AE,_t4468);
          tensor[3] op1_e3_l_64993#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs40AE,_t4800);
          tensor[3] step4446#1 = λ(T0[3],T1[3],T2[3])<(T1_{i0} + T2_{i0} + T0_{i0})>_{3} (es47F9,op1_e3_l_54992,op1_e3_l_64993);
          tensor[3] op1_e3_l_64998#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs40AE,_t4468);
          tensor[3] op1_e3_l_74999#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs40AE,_t4800);
          tensor[3] op1_e3_l_10499A#2 = λ(T0[3],T1[3],T2[3])<(T1_{i0} + T2_{i0} + T0_{i0})>_{3} (es47F9,op1_e3_l_64998,op1_e3_l_74999);
          real op1_e3_l_12499B#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_10499A,op1_e3_l_10499A);
          real op1_e3_l_13499C#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_12499B);
          real _t4997#1 = λ(T0[],T1[])<(T1) / ( T0)> (tipd409A,op1_e3_l_13499C);
          real op1_e3_l_1049A3#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (_t4468);
          real op1_e3_l_1149A4#1 = λ(T0[],T1[])<(T0 * T0 * T1)> (sfs40AE,op1_e3_l_1049A3);
          real op1_e3_l_1249A5#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_1149A4);
          tensor[3] op1_e3_l_1349A6#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs40AE,_t4468);
          tensor[3] op1_e3_l_1449A7#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs40AE,_t4800);
          tensor[3] op1_e3_l_1749A8#2 = λ(T0[3],T1[3],T2[3])<(T1_{i0} + T2_{i0} + T0_{i0})>_{3} (es47F9,op1_e3_l_1349A6,op1_e3_l_1449A7);
          real op1_e3_l_1949A9#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_1749A8,op1_e3_l_1749A8);
          real op1_e3_l_2049AA#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_1949A9);
          real op1_e3_l_2149AB#1 = λ(T0[],T1[])<(T1) / ( T0)> (tipd409A,op1_e3_l_1249A5);
          real op1_e3_l_2249AC#1 = λ(T0[],T1[])<(T1) / ( T0)> (tipd409A,op1_e3_l_2049AA);
          real trav4442#1 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (trav40C8,op1_e3_l_2149AB,op1_e3_l_2249AC);
          tensor[3] op1_e3_l_849B8#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs40AE,_t4468);
          tensor[3] op1_e3_l_949B9#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs40AE,_t4800);
          tensor[3] op1_e3_l_1249BA#2 = λ(T0[3],T1[3],T2[3])<(T1_{i0} + T2_{i0} + T0_{i0})>_{3} (es47F9,op1_e3_l_849B8,op1_e3_l_949B9);
          real op1_e3_l_1449BB#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_1249BA,op1_e3_l_1249BA);
          real op1_e3_l_1549BC#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_1449BB);
          real op1_e3_l_2449BD#2 = λ(T0[],T1[])<(T1) / ( T0)> (tipd409A,op1_e3_l_1549BC);
          real op1_e3_l_2549BE#1 = λ(T0[],T1[])<(T0) - (T1)> (mvmt40CA,op1_e3_l_2449BD);
          real op1_e3_l_2749BF#1 = λ(T0[],T1[])<(T0 * T1)> (hist40B0,op1_e3_l_2549BE);
          real mvmt4440#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_2449BD,op1_e3_l_2749BF);
          bool _t49C9#1 = LT<real>(_t4997,pcmvEps40AA);
          if _t49C9 then goto ASSIGN49CD else goto JOIN4B80
        ASSIGN49CD:  preds = [COND49CB]
          bool _t49CC#3 = GT<int>(pcp40B2,_t4460);
          if _t49CC then goto ASSIGN49D0 else goto JOIN49D9
        ASSIGN49D0:  preds = [COND49CE]
          bool _t49CF#1 = GT<int>(iter40BC,_t4460);
          if _t49CF then goto ASSIGN49D3 else goto JOIN49D7
        ASSIGN49D3:  preds = [COND49D1]
          int _t49D2#1 = IMod(iter40BC,pcp40B2);
          bool _t49D4#1 = EQ<int>(_t4460,_t49D2);
          goto JOIN49D7
        JOIN49D7:  preds = [ASSIGN49D5,COND49D1]
          bool _t49D6#1 = phi(_t49D4,vv40D2)
          goto JOIN49D9
        JOIN49D9:  preds = [JOIN49D7,COND49CE]
          bool _t49D8#1 = phi(_t49D6,vv40D2)
          if _t49D8 then goto ASSIGN49DC else goto JOIN49E8
        ASSIGN49DC:  preds = [COND49DA]
          int _t49DB#1 = IDiv(iter40BC,pcp40B2);
          int _t49DD#2 = 2;
          int _t49DF#1 = IMod(_t49DB,_t49DD);
          int _t49E1#1 = IMul(_t49DF,_t49DD);
          int _t49E3#1 = 1;
          int _t49E5#1 = ISub(_t49E1,_t49E3);
          goto JOIN49E8
        JOIN49E8:  preds = [ASSIGN49E6,COND49DA]
          int _t49E7#1 = phi(_t49E5,_t4460)
          bool _t49E9#1 = NEQ<int>(_t49E7,_t4460);
          if _t49E9 then goto COND49EC else goto JOIN4B7F
        COND49EC:  preds = [COND49EB]
          if _t49CC then goto ASSIGN49EE else goto JOIN49F7
        ASSIGN49EE:  preds = [COND49EC]
          bool _t49ED#1 = GT<int>(iter40BC,_t4460);
          if _t49ED then goto ASSIGN49F1 else goto JOIN49F5
        ASSIGN49F1:  preds = [COND49EF]
          int _t49F0#1 = IMod(iter40BC,pcp40B2);
          bool _t49F2#1 = EQ<int>(_t4460,_t49F0);
          goto JOIN49F5
        JOIN49F5:  preds = [ASSIGN49F3,COND49EF]
          bool _t49F4#1 = phi(_t49F2,vv40D2)
          goto JOIN49F7
        JOIN49F7:  preds = [JOIN49F5,COND49EC]
          bool _t49F6#1 = phi(_t49F4,vv40D2)
          if _t49F6 then goto ASSIGN49FA else goto JOIN4A06
        ASSIGN49FA:  preds = [COND49F8]
          int _t49F9#1 = IDiv(iter40BC,pcp40B2);
          int _t49FB#2 = 2;
          int _t49FD#1 = IMod(_t49F9,_t49FB);
          int _t49FF#1 = IMul(_t49FD,_t49FB);
          int _t4A01#1 = 1;
          int _t4A03#1 = ISub(_t49FF,_t4A01);
          goto JOIN4A06
        JOIN4A06:  preds = [ASSIGN4A04,COND49F8]
          int _t4A05#1 = phi(_t4A03,_t4460)
          bool _t4A07#1 = GT<int>(_t4A05,_t4460);
          if _t4A07 then goto ASSIGN4A0B else goto JOIN4A17
        ASSIGN4A0B:  preds = [COND4A09]
          bool _t4A0A#1 = LT<real>(newE48B0,_t40EF);
          if _t4A0A then goto ASSIGN4A0E else goto JOIN4A15
        ASSIGN4A0E:  preds = [COND4A0C]
          bool _t4A0D#1 = LT<int>(nn48C2,nnmin40B6);
          if _t4A0D then goto ASSIGN4A11 else goto JOIN4A13
        ASSIGN4A11:  preds = [COND4A0F]
          bool _t4A10#1 = LT<int>(born47CE,nnmax40B8);
          goto JOIN4A13
        JOIN4A13:  preds = [ASSIGN4A11,COND4A0F]
          bool _t4A12#1 = phi(_t4A10,vv40D2)
          goto JOIN4A15
        JOIN4A15:  preds = [JOIN4A13,COND4A0C]
          bool _t4A14#1 = phi(_t4A12,vv40D2)
          goto JOIN4A17
        JOIN4A17:  preds = [JOIN4A15,COND4A09]
          bool _t4A16#1 = phi(_t4A14,vv40D2)
          if _t4A16 then goto ASSIGN4A1F else goto COND4B81
        ASSIGN4A1F:  preds = [COND4A18]
          tensor[3] op1_e3_l_64A1A#3 = λ(T0[3],T1[])<(T0_{i0}) / ( T1)>_{3} (mno48B5,_t48F7);
          real op1_e3_l_84A1B#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_64A1A,op1_e3_l_64A1A);
          real op1_e3_l_94A1C#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_84A1B);
          real op1_e3_l_114A1D#1 = λ(T0[])<(1) / ( T0)> (op1_e3_l_94A1C);
          tensor[3] op1_e3_l_124A1E#1 = λ(T0[],T1[3],T2[])<(T0 * T1_{i0} * T2)>_{3} (tipd409A,op1_e3_l_64A1A,op1_e3_l_114A1D);
          tensor[3] npos4A19#1 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (pos444A,op1_e3_l_124A1E);
          tensor[3] _t4A25#3 = fStep4302 (npos4A19);
          tensor[3] op1_e3_l_84A28#3 = λ(T0[3],T1[])<(T0_{i0}) / ( T1)>_{3} (mno48B5,_t48F7);
          real op1_e3_l_104A29#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_84A28,op1_e3_l_84A28);
          real op1_e3_l_114A2A#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_104A29);
          real op1_e3_l_134A2B#1 = λ(T0[])<(1) / ( T0)> (op1_e3_l_114A2A);
          tensor[3] op1_e3_l_144A2C#1 = λ(T0[],T1[3],T2[])<(T0 * T1_{i0} * T2)>_{3} (tipd409A,op1_e3_l_84A28,op1_e3_l_134A2B);
          tensor[3] op1_e3_l_154A2D#1 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (pos444A,op1_e3_l_144A2C);
          tensor[3] op1_e3_l_164A2E#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs40AE,_t4A25);
          tensor[3] npos4A27#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (op1_e3_l_154A2D,op1_e3_l_164A2E);
          tensor[3] _t4A37#2 = fStep4302 (npos4A27);
          tensor[3] op1_e3_l_104A3A#3 = λ(T0[3],T1[])<(T0_{i0}) / ( T1)>_{3} (mno48B5,_t48F7);
          real op1_e3_l_124A3B#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_104A3A,op1_e3_l_104A3A);
          real op1_e3_l_134A3C#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_124A3B);
          real op1_e3_l_154A3D#1 = λ(T0[])<(1) / ( T0)> (op1_e3_l_134A3C);
          tensor[3] op1_e3_l_164A3E#1 = λ(T0[],T1[3],T2[])<(T0 * T1_{i0} * T2)>_{3} (tipd409A,op1_e3_l_104A3A,op1_e3_l_154A3D);
          tensor[3] op1_e3_l_174A3F#1 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (pos444A,op1_e3_l_164A3E);
          tensor[3] op1_e3_l_184A40#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs40AE,_t4A25);
          tensor[3] op1_e3_l_194A41#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs40AE,_t4A37);
          tensor[3] npos4A39#5 = λ(T0[3],T1[3],T2[3])<(T0_{i0} + T1_{i0} + T2_{i0})>_{3} (op1_e3_l_174A3F,op1_e3_l_184A40,op1_e3_l_194A41);
          bool birth4A4B#4 = true;
          int _t4A4D#2 = 2;
          bool _t4A4F#1 = EQ<int>(fDim40B4,_t4A4D);
          if _t4A4F then goto ASSIGN4A53 else goto JOIN4A81
        ASSIGN4A53:  preds = [COND4A51]
          int _t4A52#1 = 4;
          bool _t4A54#1 = GTE<int>(nn48C2,_t4A52);
          if _t4A54 then goto ASSIGN4A58 else goto JOIN4A7F
        ASSIGN4A58:  preds = [COND4A56]
          real _t4A57#1 = λ(T0[],T1[])<(T0 * T1)> (tipd409A,mabd409C);
          point[] _t4A59#1 = SphereQuery<3,point>(npos4A39,_t4A57);
        FOREACH4A5C:  preds = [ASSIGN4A5A,NEXT4A5D]
          foreach (P4A5B in _t4A59) on exit goto COND4A5F
            bool birth4A5E#2 = phi(birth4A4B,vv40D2)
          goto FOREACH4A5C
        COND4A5F:  preds = [FOREACH4A5C]
          if birth4A5E then goto ASSIGN4A61 else goto JOIN4A7D
        ASSIGN4A61:  preds = [COND4A5F]
          real _t4A60#1 = TensorIndex<tensor[3],[0]>(pos444A);
          real _t4A62#1 = urnd403D (_t4A60);
          real _t4A64#1 = TensorIndex<tensor[3],[1]>(pos444A);
          real _t4A66#1 = urnd403D (_t4A64);
          real _t4A68#1 = TensorIndex<tensor[3],[2]>(pos444A);
          real _t4A6A#1 = urnd403D (_t4A68);
          real _t4A6C#1 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (_t4A62,_t4A66,_t4A6A);
          real _t4A6E#1 = 0.1e1;
          real _t4A70#1 = MathFn<fmod>(_t4A6C,_t4A6E);
          int _t4A72#1 = ISub(nnmin40B6,nn48C2);
          real _t4A74#1 = IntToReal(_t4A72);
          real _t4A76#1 = IntToReal(nnmin40B6);
          real _t4A78#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t4A74,_t4A76);
          bool birth4A7A#1 = LT<real>(_t4A70,_t4A78);
          goto JOIN4A7D
        JOIN4A7D:  preds = [ASSIGN4A7B,COND4A5F]
          bool birth4A7C#1 = phi(birth4A7A,birth4A5E)
          goto JOIN4A7F
        JOIN4A7F:  preds = [JOIN4A7D,COND4A56]
          bool birth4A7E#1 = phi(birth4A7C,birth4A4B)
          goto JOIN4A81
        JOIN4A81:  preds = [JOIN4A7F,COND4A51]
          bool birth4A80#1 = phi(birth4A7E,birth4A4B)
          if birth4A80 then goto ASSIGN4A8F else goto JOIN4B7B
        ASSIGN4A8F:  preds = [COND4A82]
          tensor[3] op1_e3_l_114A84#3 = λ(T0[3],T1[])<(T0_{i0}) / ( T1)>_{3} (mno48B5,_t48F7);
          real op1_e3_l_134A85#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_114A84,op1_e3_l_114A84);
          real op1_e3_l_144A86#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_134A85);
          real op1_e3_l_164A87#1 = λ(T0[])<(1) / ( T0)> (op1_e3_l_144A86);
          tensor[3] op1_e3_l_174A88#1 = λ(T0[],T1[3],T2[])<(T0 * T1_{i0} * T2)>_{3} (tipd409A,op1_e3_l_114A84,op1_e3_l_164A87);
          tensor[3] op1_e3_l_184A89#1 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (pos444A,op1_e3_l_174A88);
          tensor[3] op1_e3_l_194A8A#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs40AE,_t4A25);
          tensor[3] op1_e3_l_204A8B#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs40AE,_t4A37);
          tensor[3] op1_e3_l_214A8C#1 = λ(T0[3],T1[3],T2[3])<(T0_{i0} + T1_{i0} + T2_{i0})>_{3} (op1_e3_l_184A89,op1_e3_l_194A8A,op1_e3_l_204A8B);
          tensor[3] op1_e3_l_334A8D#2 = λ(T0[3],T1[3])<(T1_{i0}) - (T0_{i0})>_{3} (_t40F1,op1_e3_l_214A8C);
          real op1_e3_l_354A8E#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_334A8D,op1_e3_l_334A8D);
          real _t4A83#2 = λ(T0[])<Sqrt(T0)> (op1_e3_l_354A8E);
          bool _t4A9B#1 = LT<real>(_t4A83,_t40F9);
          if _t4A9B then goto ASSIGN4A9F else goto JOIN4AA3
        ASSIGN4A9F:  preds = [COND4A9D]
          real _t4A9E#1 = 0.3e1;
          bool _t4AA0#1 = GT<real>(_t4A83,_t4A9E);
          goto JOIN4AA3
        JOIN4AA3:  preds = [ASSIGN4AA1,COND4A9D]
          bool _t4AA2#1 = phi(_t4AA0,vv40D2)
          if _t4AA2 then goto ASSIGN4AA6 else goto JOIN4B71
        ASSIGN4AA6:  preds = [COND4AA4]
          real x4AA5#13 = TensorIndex<tensor[3],[0]>(npos4A39);
          real y4AA7#13 = TensorIndex<tensor[3],[1]>(npos4A39);
          real z4AA9#16 = TensorIndex<tensor[3],[2]>(npos4A39);
          real _t4AAB#7 = 0.2e1;
          real op1_e3_l_64AAE#1 = λ(T0[])<(T0)^2> (x4AA5);
          real op1_e3_l_74AAF#1 = λ(T0[])<(T0)^2> (y4AA7);
          real op1_e3_l_84AB0#2 = λ(T0[])<(T0)^2> (z4AA9);
          real op1_e3_l_94AB1#1 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_64AAE,op1_e3_l_74AAF,op1_e3_l_84AB0);
          real op1_e3_l_114AB2#1 = λ(T0[])<Cosine(T0)> (op1_e3_l_94AB1);
          real _t4AAD#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t4AAB,x4AA5,op1_e3_l_84AB0,op1_e3_l_114AB2);
          real op1_e3_l_64ABA#1 = λ(T0[])<(T0)^2> (x4AA5);
          real op1_e3_l_74ABB#1 = λ(T0[])<(T0)^2> (y4AA7);
          real op1_e3_l_84ABC#2 = λ(T0[])<(T0)^2> (z4AA9);
          real op1_e3_l_94ABD#1 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_64ABA,op1_e3_l_74ABB,op1_e3_l_84ABC);
          real op1_e3_l_114ABE#1 = λ(T0[])<Cosine(T0)> (op1_e3_l_94ABD);
          real _t4AB9#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t4AAB,y4AA7,op1_e3_l_84ABC,op1_e3_l_114ABE);
          real op1_e3_l_104AC6#1 = λ(T0[])<(T0)^2> (x4AA5);
          real op1_e3_l_114AC7#1 = λ(T0[])<(T0)^2> (y4AA7);
          real op1_e3_l_124AC8#1 = λ(T0[])<(T0)^2> (z4AA9);
          real op1_e3_l_134AC9#2 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_104AC6,op1_e3_l_114AC7,op1_e3_l_124AC8);
          real op1_e3_l_144ACA#1 = λ(T0[])<(T0)^3> (z4AA9);
          real op1_e3_l_154ACB#1 = λ(T0[])<Cosine(T0)> (op1_e3_l_134AC9);
          real op1_e3_l_204ACC#1 = λ(T0[])<Sine(T0)> (op1_e3_l_134AC9);
          real op1_e3_l_214ACD#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t4AAB,op1_e3_l_144ACA,op1_e3_l_154ACB);
          real op1_e3_l_224ACE#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t4AAB,z4AA9,op1_e3_l_204ACC);
          real _t4AC5#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_214ACD,op1_e3_l_224ACE);
          tensor[3] g4AD9#1 = <tensor[3]>[_t4AAD,_t4AB9,_t4AC5];
          int _t4ADB#1 = -4;
          real _t4ADD#6 = IntToReal(_t4ADB);
          real op1_e3_l_114AE0#2 = λ(T0[])<(T0)^2> (x4AA5);
          real op1_e3_l_124AE1#1 = λ(T0[])<(T0)^2> (y4AA7);
          real op1_e3_l_134AE2#3 = λ(T0[])<(T0)^2> (z4AA9);
          real op1_e3_l_144AE3#2 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_114AE0,op1_e3_l_124AE1,op1_e3_l_134AE2);
          real op1_e3_l_174AE4#1 = λ(T0[])<Sine(T0)> (op1_e3_l_144AE3);
          real op1_e3_l_234AE5#1 = λ(T0[])<Cosine(T0)> (op1_e3_l_144AE3);
          real op1_e3_l_244AE6#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t4ADD,op1_e3_l_114AE0,op1_e3_l_134AE2,op1_e3_l_174AE4);
          real op1_e3_l_254AE7#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t4AAB,op1_e3_l_134AE2,op1_e3_l_234AE5);
          real _t4ADF#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_244AE6,op1_e3_l_254AE7);
          real op1_e3_l_74AF2#1 = λ(T0[])<(T0)^2> (x4AA5);
          real op1_e3_l_84AF3#1 = λ(T0[])<(T0)^2> (y4AA7);
          real op1_e3_l_94AF4#2 = λ(T0[])<(T0)^2> (z4AA9);
          real op1_e3_l_104AF5#1 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_74AF2,op1_e3_l_84AF3,op1_e3_l_94AF4);
          real op1_e3_l_124AF6#1 = λ(T0[])<Sine(T0)> (op1_e3_l_104AF5);
          real _t4AF1#2 = λ(T0[],T1[],T2[],T3[],T4[])<(T0 * T1 * T2 * T3 * T4)> (_t4ADD,x4AA5,y4AA7,op1_e3_l_94AF4,op1_e3_l_124AF6);
          real op1_e3_l_124AFE#1 = λ(T0[])<(T0)^2> (x4AA5);
          real op1_e3_l_134AFF#1 = λ(T0[])<(T0)^2> (y4AA7);
          real op1_e3_l_144B00#1 = λ(T0[])<(T0)^2> (z4AA9);
          real op1_e3_l_154B01#2 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_124AFE,op1_e3_l_134AFF,op1_e3_l_144B00);
          real op1_e3_l_164B02#1 = λ(T0[])<(T0)^3> (z4AA9);
          real op1_e3_l_174B03#1 = λ(T0[])<Sine(T0)> (op1_e3_l_154B01);
          real op1_e3_l_224B04#1 = λ(T0[])<Cosine(T0)> (op1_e3_l_154B01);
          real op1_e3_l_234B05#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t4ADD,x4AA5,op1_e3_l_164B02,op1_e3_l_174B03);
          real op1_e3_l_244B06#1 = λ(T0[],T1[],T2[],T3[])<(T2 * T0 * T1 * T3)> (x4AA5,z4AA9,_t40F9,op1_e3_l_224B04);
          real _t4AFD#2 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_234B05,op1_e3_l_244B06);
          tensor[3] _t4B11#1 = <tensor[3]>[_t4ADF,_t4AF1,_t4AFD];
          real op1_e3_l_114B14#1 = λ(T0[])<(T0)^2> (x4AA5);
          real op1_e3_l_124B15#2 = λ(T0[])<(T0)^2> (y4AA7);
          real op1_e3_l_134B16#3 = λ(T0[])<(T0)^2> (z4AA9);
          real op1_e3_l_144B17#2 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_114B14,op1_e3_l_124B15,op1_e3_l_134B16);
          real op1_e3_l_174B18#1 = λ(T0[])<Sine(T0)> (op1_e3_l_144B17);
          real op1_e3_l_234B19#1 = λ(T0[])<Cosine(T0)> (op1_e3_l_144B17);
          real op1_e3_l_244B1A#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t4ADD,op1_e3_l_124B15,op1_e3_l_134B16,op1_e3_l_174B18);
          real op1_e3_l_254B1B#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t4AAB,op1_e3_l_134B16,op1_e3_l_234B19);
          real _t4B13#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_244B1A,op1_e3_l_254B1B);
          real op1_e3_l_124B26#1 = λ(T0[])<(T0)^2> (x4AA5);
          real op1_e3_l_134B27#1 = λ(T0[])<(T0)^2> (y4AA7);
          real op1_e3_l_144B28#1 = λ(T0[])<(T0)^2> (z4AA9);
          real op1_e3_l_154B29#2 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_124B26,op1_e3_l_134B27,op1_e3_l_144B28);
          real op1_e3_l_164B2A#1 = λ(T0[])<(T0)^3> (z4AA9);
          real op1_e3_l_174B2B#1 = λ(T0[])<Sine(T0)> (op1_e3_l_154B29);
          real op1_e3_l_224B2C#1 = λ(T0[])<Cosine(T0)> (op1_e3_l_154B29);
          real op1_e3_l_234B2D#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t4ADD,y4AA7,op1_e3_l_164B2A,op1_e3_l_174B2B);
          real op1_e3_l_244B2E#1 = λ(T0[],T1[],T2[],T3[])<(T2 * T0 * T1 * T3)> (y4AA7,z4AA9,_t40F9,op1_e3_l_224B2C);
          real _t4B25#2 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_234B2D,op1_e3_l_244B2E);
          tensor[3] _t4B39#1 = <tensor[3]>[_t4AF1,_t4B13,_t4B25];
          real _t4B3B#1 = 0.1e2;
          real op1_e3_l_144B3E#1 = λ(T0[])<(T0)^2> (x4AA5);
          real op1_e3_l_154B3F#1 = λ(T0[])<(T0)^2> (y4AA7);
          real op1_e3_l_164B40#2 = λ(T0[])<(T0)^2> (z4AA9);
          real op1_e3_l_174B41#2 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_144B3E,op1_e3_l_154B3F,op1_e3_l_164B40);
          real op1_e3_l_184B42#1 = λ(T0[])<(T0)^4> (z4AA9);
          real op1_e3_l_194B43#2 = λ(T0[])<Sine(T0)> (op1_e3_l_174B41);
          real op1_e3_l_254B44#1 = λ(T0[])<Cosine(T0)> (op1_e3_l_174B41);
          real op1_e3_l_314B45#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t4ADD,op1_e3_l_184B42,op1_e3_l_194B43);
          real op1_e3_l_324B46#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t4B3B,op1_e3_l_164B40,op1_e3_l_254B44);
          real op1_e3_l_334B47#1 = λ(T0[],T1[])<(T0 * T1)> (_t4AAB,op1_e3_l_194B43);
          real _t4B3D#1 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_314B45,op1_e3_l_324B46,op1_e3_l_334B47);
          tensor[3] _t4B53#1 = <tensor[3]>[_t4AFD,_t4B25,_t4B3D];
          tensor[3,3] hess4B55#1 = <tensor[3,3]>[_t4B11,_t4B39,_t4B53];
          (real[3] _t4B57#1,tensor[3][3] evecs4B58#0) = EigenVecs3x3(hess4B55);
          real _t4B5A#1 = Subscript<real[3]>(_t4B57,_t4A4D);
          real op1_e3_l_34B5D#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (g4AD9);
          real op1_e3_l_44B5E#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_34B5D);
          real op1_e3_l_54B5F#1 = λ(T0[])<Neg(T0)> (_t4B5A);
          real op1_e3_l_64B60#1 = λ(T0[],T1[])<(T0 + T1)> (fBias4098,op1_e3_l_44B5E);
          real str4B5C#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_54B5F,op1_e3_l_64B60);
          bool _t4B66#1 = GT<real>(str4B5C,fStrTh4094);
          if _t4B66 then goto ASSIGN4B6A else goto JOIN4B6F
        ASSIGN4B6A:  preds = [COND4B68]
          bool _t4B69#1 = GTE<real>(_t40EF,fMaskTh4096);
          if _t4B69 then goto JOIN4B6D else goto JOIN4B6D
        JOIN4B6D:  preds = [COND4B6B,COND4B6B]
          bool _t4B6C#1 = phi(birth4A4B,vv40D2)
          goto JOIN4B6F
        JOIN4B6F:  preds = [JOIN4B6D,COND4B68]
          bool _t4B6E#1 = phi(_t4B6C,vv40D2)
          goto JOIN4B71
        JOIN4B71:  preds = [JOIN4B6F,COND4AA4]
          bool _t4B70#1 = phi(_t4B6E,vv40D2)
          if _t4B70 then goto NEW4B73 else goto JOIN4B79
        NEW4B73:  preds = [COND4B72]
          new point(npos4A39,hh4448);
          int _t4B74#1 = 1;
          int born4B76#1 = IAdd(born47CE,_t4B74);
          goto JOIN4B79
        JOIN4B79:  preds = [ASSIGN4B77,COND4B72]
          int born4B78#1 = phi(born4B76,born47CE)
          goto JOIN4B7B
        JOIN4B7B:  preds = [JOIN4B79,COND4A82]
          int born4B7A#1 = phi(born4B78,born47CE)
          goto JOIN4B7D
        JOIN4B7D:  preds = [JOIN4B7B,JOIN4BC4]
          int born4B7C#1 = phi(born4B7A,born47CE)
          goto JOIN4B7F
        JOIN4B7F:  preds = [JOIN4B7D,COND49EB]
          int born4B7E#1 = phi(born4B7C,born47CE)
          goto JOIN4B80
        JOIN4B80:  preds = [JOIN4B7F,COND49CB]
          int born443C#1 = phi(born4B7E,born47CE)
          goto JOIN444B
        COND4B81:  preds = [COND4A18]
          if _t49CC then goto ASSIGN4B83 else goto JOIN4B8C
        ASSIGN4B83:  preds = [COND4B81]
          bool _t4B82#1 = GT<int>(iter40BC,_t4460);
          if _t4B82 then goto ASSIGN4B86 else goto JOIN4B8A
        ASSIGN4B86:  preds = [COND4B84]
          int _t4B85#1 = IMod(iter40BC,pcp40B2);
          bool _t4B87#1 = EQ<int>(_t4460,_t4B85);
          goto JOIN4B8A
        JOIN4B8A:  preds = [ASSIGN4B88,COND4B84]
          bool _t4B89#1 = phi(_t4B87,vv40D2)
          goto JOIN4B8C
        JOIN4B8C:  preds = [JOIN4B8A,COND4B81]
          bool _t4B8B#1 = phi(_t4B89,vv40D2)
          if _t4B8B then goto ASSIGN4B8F else goto JOIN4B9B
        ASSIGN4B8F:  preds = [COND4B8D]
          int _t4B8E#1 = IDiv(iter40BC,pcp40B2);
          int _t4B90#2 = 2;
          int _t4B92#1 = IMod(_t4B8E,_t4B90);
          int _t4B94#1 = IMul(_t4B92,_t4B90);
          int _t4B96#1 = 1;
          int _t4B98#1 = ISub(_t4B94,_t4B96);
          goto JOIN4B9B
        JOIN4B9B:  preds = [ASSIGN4B99,COND4B8D]
          int _t4B9A#1 = phi(_t4B98,_t4460)
          bool _t4B9C#1 = LT<int>(_t4B9A,_t4460);
          if _t4B9C then goto ASSIGN4BA0 else goto JOIN4BC4
        ASSIGN4BA0:  preds = [COND4B9E]
          bool _t4B9F#1 = GT<real>(newE48B0,_t40EF);
          if _t4B9F then goto ASSIGN4BA3 else goto JOIN4BC3
        ASSIGN4BA3:  preds = [COND4BA1]
          bool _t4BA2#1 = GT<int>(nn48C2,nnmax40B8);
          if _t4BA2 then goto ASSIGN4BA6 else goto JOIN4BC2
        ASSIGN4BA6:  preds = [COND4BA4]
          real _t4BA5#1 = TensorIndex<tensor[3],[0]>(pos444A);
          real _t4BA7#1 = urnd403D (_t4BA5);
          real _t4BA9#1 = TensorIndex<tensor[3],[1]>(pos444A);
          real _t4BAB#1 = urnd403D (_t4BA9);
          real _t4BAD#1 = TensorIndex<tensor[3],[2]>(pos444A);
          real _t4BAF#1 = urnd403D (_t4BAD);
          real _t4BB1#1 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (_t4BA7,_t4BAB,_t4BAF);
          real _t4BB3#1 = 0.1e1;
          real _t4BB5#1 = MathFn<fmod>(_t4BB1,_t4BB3);
          int _t4BB7#1 = ISub(nn48C2,nnmax40B8);
          real _t4BB9#1 = IntToReal(_t4BB7);
          real _t4BBB#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t4BB9,_t48F7);
          bool _t4BBD#1 = LT<real>(_t4BB5,_t4BBB);
          if _t4BBD then goto DIE4BC0 else goto JOIN4BC1
        DIE4BC0:  preds = [COND4BBF]
          die
          goto JOIN4BC1
        JOIN4BC1:  preds = [*DIE4BC0,COND4BBF]
          goto JOIN4BC2
        JOIN4BC2:  preds = [JOIN4BC1,COND4BA4]
          goto JOIN4BC3
        JOIN4BC3:  preds = [JOIN4BC2,COND4BA1]
          goto JOIN4BC4
        JOIN4BC4:  preds = [JOIN4BC3,COND4B9E]
          goto JOIN4B7D
        ASSIGN4BC6:  preds = [COND4949]
          int _t4BC5#1 = 1;
          bool _t494D#1 = GT<int>(verb40AC,_t4BC5);
          goto JOIN494E
        ASSIGN4BC9:  preds = [COND48FE]
          int _t4BC8#1 = 1;
          bool _t4902#1 = GT<int>(verb40AC,_t4BC8);
          goto JOIN4903
        ASSIGN4BCC:  preds = [COND4820]
          int _t4BCB#1 = 1;
          bool _t4824#1 = GT<int>(verb40AC,_t4BCB);
          goto JOIN4825
        ASSIGN4BCF:  preds = [COND47B4]
          int _t4BCE#1 = 1;
          bool _t47B8#1 = GT<int>(verb40AC,_t4BCE);
          goto JOIN47B9
        ASSIGN4BD2:  preds = [COND4696]
          int _t4BD1#1 = 1;
          bool _t469A#1 = GT<int>(verb40AC,_t4BD1);
          goto JOIN469B
        ASSIGN4BD5:  preds = [COND41E0]
          int _t4BD4#1 = 1;
          bool _t41E4#1 = GT<int>(verb40AC,_t4BD4);
          goto JOIN41E5
        ASSIGN4BD8:  preds = [COND40DC]
          int _t4BD7#1 = 1;
          bool _t40E0#1 = GT<int>(verb40AC,_t4BD7);
          goto JOIN40E1
    end update
  end point
## initial strand creation
  COLLECTION
    ENTRY4BDA:  preds = []
      tensor[3][] ipos4BDB#2 = globals.ipos3F9B;
      int _t4BDD#1 = 0;
      int _t4BDF#1 = Length<tensor[3]>(ipos4BDB);
      int _t4BE1#1 = 1;
      int _t4BE3#1 = ISub(_t4BDF,_t4BE1);
      int[] _t4BE5#1 = Range(_t4BDD,_t4BE3);
    FOREACH4BE8:  preds = [ASSIGN4BE6,NEXT4BEE]
      foreach (ii4BE7 in _t4BE5) on exit goto RETURN4BEF
      tensor[3] _t4BE9#1 = Subscript<tensor[3][]>(ipos4BDB,ii4BE7);
      real _t4BEB#1 = 0.1e1;
      new point(_t4BE9,_t4BEB);
      goto FOREACH4BE8
    RETURN4BEF:  preds = [FOREACH4BE8]
      return
## global update
  ENTRY4BF0:  preds = []
    real geoEps4BF1#3 = globals.geoEps3F92;
    real mvmtEps4BF3#3 = globals.mvmtEps3F93;
    real rpcEps4BF5#3 = globals.rpcEps3F94;
    real pchist4BF7#1 = globals.pchist3FA0;
    int iter4BF9#4 = globals.iter3FA1;
    real rpc4BFB#1 = globals.rpc3FA2;
    int popLast4BFD#1 = globals.popLast3FA3;
    int pop4BFF#5 = NumStrands<active>;
    bool _t4C01#1 = NEQ<int>(pop4BFF,popLast4BFD);
    if _t4C01 then goto ASSIGN4C05 else goto ASSIGN4CAA
  ASSIGN4C05:  preds = [COND4C03]
    int _t4C04#1 = 1;
    goto JOIN4C08
  JOIN4C08:  preds = [ASSIGN4C05,ASSIGN4CAA]
    int _t4C06#2 = phi(_t4C04,_t4C07)
    real _t4C09#2 = IntToReal(_t4C06);
    real op1_e3_l_34C0C#1 = λ(T0[],T1[])<(T1) - (T0)> (_t4C09,rpc4BFB);
    real op1_e3_l_44C0D#1 = λ(T0[],T1[])<(T0 * T1)> (pchist4BF7,op1_e3_l_34C0C);
    real rpc4C0B#5 = λ(T0[],T1[])<(T0 + T1)> (_t4C09,op1_e3_l_44C0D);
    globals.rpc3FA2 = rpc4C0B;
    point[] P4C12#6 = Strands<point,all>;
    (bool res4C1A#1) = all(MAP all4C14 (P4C12));
    real _t4C1C#1 = 0.1e3;
    (real res4C2B#1) = sum<real>(MAP mean4C1E (P4C12));
    int num4C2D#1 = NumStrands<all>;
    real rNum4C2F#5 = IntToReal(num4C2D);
    real op1_e3_l_34C32#1 = λ(T0[],T1[])<(T0) / ( T1)> (res4C2B,rNum4C2F);
    real percfound4C31#1 = λ(T0[],T1[])<(T0 * T1)> (_t4C1C,op1_e3_l_34C32);
    (real res4C3B#2) = sum<real>(MAP mean4C35 (P4C12));
    real mean4C3D#2 = λ(T0[],T1[])<(T0) / ( T1)> (res4C3B,rNum4C2F);
    (real res4C4A#1) = sum<real>(MAP mean4C3F (P4C12,mean4C3D));
    real op1_e3_l_44C4D#1 = λ(T0[],T1[])<(T0) / ( T1)> (res4C4A,rNum4C2F);
    real op1_e3_l_54C4E#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_44C4D);
    real op1_e3_l_64C4F#1 = λ(T0[],T1[])<(T1 * T0)> (rNum4C2F,op1_e3_l_54C4E);
    real covcl4C4C#4 = λ(T0[],T1[])<(T1) / ( T0)> (res4C3B,op1_e3_l_64C4F);
    (real res4C5A#4) = max<real>(MAP max4C54 (P4C12));
    string _t4C5C#1 = "======= finished iter ";
    string _t4C5E#1 = " w/ ";
    string _t4C60#3 = ")";
    string _t4C62#1 = "; %found=";
    string _t4C64#1 = "; mean(hh)=";
    (real res4C6C#1) = sum<real>(MAP mean4C66 (P4C12));
    real mean4C6E#1 = λ(T0[],T1[])<(T0) / ( T1)> (res4C6C,rNum4C2F);
    string _t4C70#1 = "; mean(cl)=";
    string _t4C72#3 = "; COV(cl)=";
    string _t4C74#3 = "; max(mvmt)=";
    string _t4C76#1 = "; pc=";
    string _t4C78#3 = "; rpc=";
    string _t4C7A#3 = "\n";
    Print<[string,int,string,int,string,string,real,string,real,string,real,string,real,string,real,string,int,string,real,string]>(_t4C5C,iter4BF9,_t4C5E,pop4BFF,_t4C60,_t4C62,percfound4C31,_t4C64,mean4C6E,_t4C70,mean4C3D,_t4C72,covcl4C4C,_t4C74,res4C5A,_t4C76,_t4C06,_t4C78,rpc4C0B,_t4C7A);
    if res4C1A then goto ASSIGN4C7F else goto ASSIGN4CA9
  ASSIGN4C7F:  preds = [COND4C7D]
    bool _t4C7E#1 = LT<real>(covcl4C4C,geoEps4BF1);
    if _t4C7E then goto ASSIGN4C82 else goto ASSIGN4CA8
  ASSIGN4C82:  preds = [COND4C80]
    bool _t4C81#1 = LT<real>(res4C5A,mvmtEps4BF3);
    if _t4C81 then goto ASSIGN4C85 else goto ASSIGN4CA7
  ASSIGN4C85:  preds = [COND4C83]
    bool _t4C84#1 = LT<real>(rpc4C0B,rpcEps4BF5);
    goto JOIN4C88
  JOIN4C88:  preds = [ASSIGN4C85,ASSIGN4CA7]
    bool _t4C86#1 = phi(_t4C84,_t4C87)
    goto JOIN4C8B
  JOIN4C8B:  preds = [JOIN4C88,ASSIGN4CA8]
    bool _t4C89#1 = phi(_t4C86,_t4C8A)
    goto JOIN4C8E
  JOIN4C8E:  preds = [JOIN4C8B,ASSIGN4CA9]
    bool _t4C8C#1 = phi(_t4C89,_t4C8D)
    if _t4C8C then goto ASSIGN4C91 else goto ASSIGN4CA1
  ASSIGN4C91:  preds = [COND4C8F]
    string _t4C90#1 = "======= Stabilizing ";
    string _t4C92#1 = " (iter ";
    string _t4C94#3 = " < ";
    Print<[string,int,string,int,string,string,real,string,real,string,real,string,real,string,real,string,real,string]>(_t4C90,pop4BFF,_t4C92,iter4BF9,_t4C60,_t4C72,covcl4C4C,_t4C94,geoEps4BF1,_t4C74,res4C5A,_t4C94,mvmtEps4BF3,_t4C78,rpc4C0B,_t4C94,rpcEps4BF5,_t4C7A);
    StabilizeAll;
    goto JOIN4C98
  JOIN4C98:  preds = [MASSIGN4C97,MASSIGN4CA6]
    int _t4C99#1 = 1;
    int iter4C9B#1 = IAdd(iter4BF9,_t4C99);
    globals.iter3FA1 = iter4C9B;
    globals.popLast3FA3 = pop4BFF;
    continue
  ASSIGN4CA1:  preds = [COND4C8F]
    string _t4CA0#1 = "======= Stabilizing ";
    string _t4CA2#1 = " (iter ";
    string _t4CA4#3 = " > ";
    Print<[string,int,string,int,string,string,real,string,real,string,real,string,real,string,real,string,real,string]>(_t4CA0,pop4BFF,_t4CA2,iter4BF9,_t4C60,_t4C72,covcl4C4C,_t4CA4,geoEps4BF1,_t4C74,res4C5A,_t4CA4,mvmtEps4BF3,_t4C78,rpc4C0B,_t4CA4,rpcEps4BF5,_t4C7A);
    goto JOIN4C98
  ASSIGN4CA7:  preds = [COND4C83]
    bool _t4C87#1 = false;
    goto JOIN4C88
  ASSIGN4CA8:  preds = [COND4C80]
    bool _t4C8A#1 = false;
    goto JOIN4C8B
  ASSIGN4CA9:  preds = [COND4C7D]
    bool _t4C8D#1 = false;
    goto JOIN4C8E
  ASSIGN4CAA:  preds = [COND4C03]
    int _t4C07#1 = 0;
    goto JOIN4C08
#### end program ####
##### mid-ir: after value numbering ####
## properties
  GlobalInit StabilizeAll GlobalReduce StrandSets GlobalUpdate NewStrands StrandCommunication StrandsMayDie HasInputs HasGlobals ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
## globals
  input meshData3F84 (meshData) = <no-default>
  input 0space07C6_intermedateGlobal3F85 (space) = <no-default>
  input 0data07C8_intermedateGlobal3F86 (data) = <no-default>
  input fStrTh3F87 (fStrTh) = <no-default>
  input fMaskTh3F88 (fMaskTh) = <default>
  input fBias3F89 (fBias) = <default>
  input tipd3F8A (tipd) = <default>
  input mabd3F8B (mabd) = <default>
  input travMax3F8C (travMax) = <default>
  input nfsMax3F8D (nfsMax) = <default>
  input gdeTest3F8E (gdeTest) = <default>
  input gdeBack3F8F (gdeBack) = <default>
  input gdeOppor3F90 (gdeOppor) = <default>
  input fsEps3F91 (fsEps) = <no-default>
  input geoEps3F92 (geoEps) = <default>
  input mvmtEps3F93 (mvmtEps) = <default>
  input rpcEps3F94 (rpcEps) = <default>
  input pcmvEps3F95 (pcmvEps) = <default>
  input isoval3F96 (isoval) = <default>
  input verb3F97 (verb) = <default>
  input sfs3F98 (sfs) = <default>
  input hist3F99 (hist) = <default>
  input pcp3F9A (pcp) = <default>
  input ipos3F9B (ipos) = <no-default>
  input fDim3F9C (fDim) = <default>
  global int nnmin3F9D
  global int nnmax3F9E
  global real rad3F9F
  global real pchist3FA0
  varying global int iter3FA1
  varying global real rpc3FA2
  varying global int popLast3FA3
## functions
  function real urnd403D (real x403E#2) {
    ENTRY403F:  preds = []
      int iter4040#1 = globals.iter3FA1;
      real _t4042#2 = 0.e0;
      bool _t4044#1 = EQ<real>(x403E,_t4042);
      if _t4044 then goto RETURN(_t4042)4047 else goto JOIN4048
    RETURN(_t4042)4047:  preds = [COND4046]
      return _t4042
      goto JOIN4048
    JOIN4048:  preds = [*RETURN(_t4042)4047,COND4046]
      real _t4049#1 = λ(T0[])<Abs(T0)> (x403E);
      real l2404B#2 = MathFn<log2>(_t4049);
      real _t404D#2 = 0.2e1;
      real _t404F#1 = MathFn<floor>(l2404B);
      real _t4051#2 = 0.1e1;
      real op1_e3_l_34054#1 = λ(T0[],T1[])<(T0) - (T1)> (l2404B,_t404F);
      real _t4053#1 = λ(T0[],T1[])<(T1) - (T0)> (_t4051,op1_e3_l_34054);
      real frxp4057#1 = MathFn<pow>(_t404D,_t4053);
      int _t4059#1 = 2;
      int _t405B#1 = IMul(_t4059,iter4040);
      real _t405D#1 = IntToReal(_t405B);
      real op1_e3_l_34060#1 = λ(T0[])<(T0)^20> (_t404D);
      real op1_e3_l_44061#1 = λ(T0[],T1[])<(T1 + T0)> (_t405D,op1_e3_l_34060);
      real _t405F#1 = λ(T0[],T1[])<(T0 * T1)> (frxp4057,op1_e3_l_44061);
      real _t4065#1 = MathFn<fmod>(_t405F,_t4051);
      return _t4065
}
  function tensor[3] fStep4302 (tensor[3] s4303#3) {
    ENTRY4304:  preds = []
      real x4305#5 = TensorIndex<tensor[3],[0]>(s4303);
      real y4307#5 = TensorIndex<tensor[3],[1]>(s4303);
      real z4309#6 = TensorIndex<tensor[3],[2]>(s4303);
      real _t430B#6 = 0.2e1;
      int _t430D#2 = 2;
      real op1_e3_l_64310#2 = λ(T0[])<(T0)^2> (x4305);
      real op1_e3_l_74311#2 = λ(T0[])<(T0)^2> (y4307);
      real op1_e3_l_84312#8 = λ(T0[])<(T0)^2> (z4309);
      real op1_e3_l_94313#2 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_64310,op1_e3_l_74311,op1_e3_l_84312);
      real op1_e3_l_114314#7 = λ(T0[])<Cosine(T0)> (op1_e3_l_94313);
      real _t430F#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t430B,x4305,op1_e3_l_84312,op1_e3_l_114314);
      real _t431B#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t430B,y4307,op1_e3_l_84312,op1_e3_l_114314);
      real op1_e3_l_14432C#3 = λ(T0[])<(T0)^3> (z4309);
      real op1_e3_l_20432E#8 = λ(T0[])<Sine(T0)> (op1_e3_l_94313);
      real op1_e3_l_21432F#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t430B,op1_e3_l_14432C,op1_e3_l_114314);
      real op1_e3_l_224330#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t430B,z4309,op1_e3_l_20432E);
      real _t4327#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_21432F,op1_e3_l_224330);
      tensor[3] g433B#1 = <tensor[3]>[_t430F,_t431B,_t4327];
      int _t433D#1 = -4;
      real _t433F#6 = IntToReal(_t433D);
      real op1_e3_l_244348#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t433F,op1_e3_l_64310,op1_e3_l_84312,op1_e3_l_20432E);
      real op1_e3_l_254349#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t430B,op1_e3_l_84312,op1_e3_l_114314);
      real _t4341#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_244348,op1_e3_l_254349);
      real _t4353#2 = λ(T0[],T1[],T2[],T3[],T4[])<(T0 * T1 * T2 * T3 * T4)> (_t433F,x4305,y4307,op1_e3_l_84312,op1_e3_l_20432E);
      real _t435F#2 = 0.4e1;
      real op1_e3_l_234369#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t433F,x4305,op1_e3_l_14432C,op1_e3_l_20432E);
      real op1_e3_l_24436A#1 = λ(T0[],T1[],T2[],T3[])<(T2 * T0 * T1 * T3)> (x4305,z4309,_t435F,op1_e3_l_114314);
      real _t4361#2 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_234369,op1_e3_l_24436A);
      tensor[3] _t4375#1 = <tensor[3]>[_t4341,_t4353,_t4361];
      real op1_e3_l_24437E#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t433F,op1_e3_l_74311,op1_e3_l_84312,op1_e3_l_20432E);
      real _t4377#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_24437E,op1_e3_l_254349);
      real op1_e3_l_234391#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t433F,y4307,op1_e3_l_14432C,op1_e3_l_20432E);
      real op1_e3_l_244392#1 = λ(T0[],T1[],T2[],T3[])<(T2 * T0 * T1 * T3)> (y4307,z4309,_t435F,op1_e3_l_114314);
      real _t4389#2 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_234391,op1_e3_l_244392);
      tensor[3] _t439D#1 = <tensor[3]>[_t4353,_t4377,_t4389];
      real _t439F#1 = 0.1e2;
      real op1_e3_l_1843A6#1 = λ(T0[])<(T0)^4> (z4309);
      real op1_e3_l_3143A9#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t433F,op1_e3_l_1843A6,op1_e3_l_20432E);
      real op1_e3_l_3243AA#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t439F,op1_e3_l_84312,op1_e3_l_114314);
      real op1_e3_l_3343AB#1 = λ(T0[],T1[])<(T0 * T1)> (_t430B,op1_e3_l_20432E);
      real _t43A1#1 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_3143A9,op1_e3_l_3243AA,op1_e3_l_3343AB);
      tensor[3] _t43B7#1 = <tensor[3]>[_t4361,_t4389,_t43A1];
      tensor[3,3] hess43B9#1 = <tensor[3,3]>[_t4375,_t439D,_t43B7];
      (real[3] evals43BB#1,tensor[3][3] E43BC#1) = EigenVecs3x3(hess43B9);
      real _t43BE#1 = 0.1e1;
      real _t43C0#1 = Subscript<real[3]>(evals43BB,_t430D);
      tensor[3] _t43C2#2 = Subscript<tensor[3][3]>(E43BC,_t430D);
      real op1_e3_l_543C5#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t43BE,_t43C0);
      real op1_e3_l_643C6#1 = λ(T0[])<Neg(T0)> (op1_e3_l_543C5);
      real op1_e3_l_743C7#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (_t43C2,g433B);
      tensor[3] up43C4#4 = λ(T0[3],T1[],T2[])<(T1 * T0_{i0} * T2)>_{3} (_t43C2,op1_e3_l_643C6,op1_e3_l_743C7);
      real _t43CC#2 = TensorIndex<tensor[3],[0]>(up43C4);
      bool _t43CE#1 = EQ<real>(_t43CC,_t43CC);
      bool _t43D0#1 = BNot(_t43CE);
      if _t43D0 then goto ASSIGN43D4 else goto ASSIGN43E1
    ASSIGN43D4:  preds = [COND43D2]
      bool _t43D3#1 = true;
      goto JOIN43D7
    JOIN43D7:  preds = [ASSIGN43D4,JOIN43EA]
      bool _t43D5#1 = phi(_t43D3,_t43D6)
      if _t43D5 then goto ASSIGN43DA else goto JOIN43DE
    ASSIGN43DA:  preds = [COND43D8]
      real _t43D9#3 = +inf;
      tensor[3] _t43DB#1 = <tensor[3]>[_t43D9,_t43D9,_t43D9];
      return _t43DB
      goto JOIN43DE
    JOIN43DE:  preds = [*RETURN(_t43DB)43DD,COND43D8]
      return up43C4
    ASSIGN43E1:  preds = [COND43D2]
      real _t43E0#2 = TensorIndex<tensor[3],[1]>(up43C4);
      bool _t43E2#1 = EQ<real>(_t43E0,_t43E0);
      bool _t43E4#1 = BNot(_t43E2);
      if _t43E4 then goto ASSIGN43E8 else goto ASSIGN43EC
    ASSIGN43E8:  preds = [COND43E6]
      bool _t43E7#1 = true;
      goto JOIN43EA
    JOIN43EA:  preds = [ASSIGN43E8,ASSIGN43EF]
      bool _t43D6#1 = phi(_t43E7,_t43E9)
      goto JOIN43D7
    ASSIGN43EC:  preds = [COND43E6]
      real _t43EB#2 = TensorIndex<tensor[3],[2]>(up43C4);
      bool _t43ED#1 = EQ<real>(_t43EB,_t43EB);
      bool _t43E9#1 = BNot(_t43ED);
      goto JOIN43EA
}
  function tensor[3,3] fPerp45A3 (tensor[3] s45A4#3) {
    ENTRY45A5:  preds = []
      real x45A6#4 = TensorIndex<tensor[3],[0]>(s45A4);
      real y45A8#4 = TensorIndex<tensor[3],[1]>(s45A4);
      real z45AA#5 = TensorIndex<tensor[3],[2]>(s45A4);
      real _t45AC#2 = 0.2e1;
      int _t45AE#1 = 2;
      int _t45B0#1 = -4;
      real _t45B2#6 = IntToReal(_t45B0);
      real op1_e3_l_1145B5#2 = λ(T0[])<(T0)^2> (x45A6);
      real op1_e3_l_1245B6#2 = λ(T0[])<(T0)^2> (y45A8);
      real op1_e3_l_1345B7#6 = λ(T0[])<(T0)^2> (z45AA);
      real op1_e3_l_1445B8#2 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_1145B5,op1_e3_l_1245B6,op1_e3_l_1345B7);
      real op1_e3_l_1745B9#7 = λ(T0[])<Sine(T0)> (op1_e3_l_1445B8);
      real op1_e3_l_2345BA#4 = λ(T0[])<Cosine(T0)> (op1_e3_l_1445B8);
      real op1_e3_l_2445BB#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t45B2,op1_e3_l_1145B5,op1_e3_l_1345B7,op1_e3_l_1745B9);
      real op1_e3_l_2545BC#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t45AC,op1_e3_l_1345B7,op1_e3_l_2345BA);
      real _t45B4#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_2445BB,op1_e3_l_2545BC);
      real _t45C6#2 = λ(T0[],T1[],T2[],T3[],T4[])<(T0 * T1 * T2 * T3 * T4)> (_t45B2,x45A6,y45A8,op1_e3_l_1345B7,op1_e3_l_1745B9);
      real _t45D2#2 = 0.4e1;
      real op1_e3_l_1645D9#2 = λ(T0[])<(T0)^3> (z45AA);
      real op1_e3_l_2345DC#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t45B2,x45A6,op1_e3_l_1645D9,op1_e3_l_1745B9);
      real op1_e3_l_2445DD#1 = λ(T0[],T1[],T2[],T3[])<(T2 * T0 * T1 * T3)> (x45A6,z45AA,_t45D2,op1_e3_l_2345BA);
      real _t45D4#2 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_2345DC,op1_e3_l_2445DD);
      tensor[3] _t45E8#1 = <tensor[3]>[_t45B4,_t45C6,_t45D4];
      real op1_e3_l_2445F1#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t45B2,op1_e3_l_1245B6,op1_e3_l_1345B7,op1_e3_l_1745B9);
      real _t45EA#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_2445F1,op1_e3_l_2545BC);
      real op1_e3_l_234604#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t45B2,y45A8,op1_e3_l_1645D9,op1_e3_l_1745B9);
      real op1_e3_l_244605#1 = λ(T0[],T1[],T2[],T3[])<(T2 * T0 * T1 * T3)> (y45A8,z45AA,_t45D2,op1_e3_l_2345BA);
      real _t45FC#2 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_234604,op1_e3_l_244605);
      tensor[3] _t4610#1 = <tensor[3]>[_t45C6,_t45EA,_t45FC];
      real _t4612#1 = 0.1e2;
      real op1_e3_l_184619#1 = λ(T0[])<(T0)^4> (z45AA);
      real op1_e3_l_31461C#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t45B2,op1_e3_l_184619,op1_e3_l_1745B9);
      real op1_e3_l_32461D#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t4612,op1_e3_l_1345B7,op1_e3_l_2345BA);
      real op1_e3_l_33461E#1 = λ(T0[],T1[])<(T0 * T1)> (_t45AC,op1_e3_l_1745B9);
      real _t4614#1 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_31461C,op1_e3_l_32461D,op1_e3_l_33461E);
      tensor[3] _t462A#1 = <tensor[3]>[_t45D4,_t45FC,_t4614];
      tensor[3,3] hess462C#1 = <tensor[3,3]>[_t45E8,_t4610,_t462A];
      (real[3] evals462E#0,tensor[3][3] _t462F#1) = EigenVecs3x3(hess462C);
      tensor[3] E24631#1 = Subscript<tensor[3][3]>(_t462F,_t45AE);
      tensor[3,3] op1_e3_l_24634#1 = λ(T0[3])<(T0_{i0} * T0_{i1})>_{3 3} (E24631);
      tensor[3,3] m4633#3 = λ(T0[3 3])<(δ_{i0,i1}) - (T0_{i0,i1})>_{3 3} (op1_e3_l_24634);
      real t4637#2 = λ(T0[3 3],T1[3 3])<Σ(i0=0..2)(i1=0..2)<((T0_{i0,i1} * T1_{i0,i1}))>(i0=0..2)(i1=0..2)> (m4633,m4633);
      bool _t463D#1 = EQ<real>(t4637,t4637);
      bool _t463F#1 = BNot(_t463D);
      if _t463F then goto ASSIGN4643 else goto JOIN4645
    ASSIGN4643:  preds = [COND4641]
      tensor[3,3] _t4642#1 = λ()<Z_{i0,i1}>_{3 3} ();
      return _t4642
      goto JOIN4645
    JOIN4645:  preds = [*RETURN(_t4642)4644,COND4641]
      return m4633
}
  function bool all4C14 (point P4C15#1) {
    ENTRY4C16:  preds = []
      bool _t4C17#1 = P4C15.found;
      return _t4C17
}
  function real mean4C1E (point P4C1F#1) {
    ENTRY4C20:  preds = []
      bool _t4C21#1 = P4C1F.found;
      if _t4C21 then goto ASSIGN4C25 else goto ASSIGN4C2A
    ASSIGN4C25:  preds = [COND4C23]
      real _t4C24#1 = 0.1e1;
      goto JOIN4C28
    JOIN4C28:  preds = [ASSIGN4C25,ASSIGN4C2A]
      real _t4C26#1 = phi(_t4C24,_t4C27)
      return _t4C26
    ASSIGN4C2A:  preds = [COND4C23]
      real _t4C27#1 = 0.e0;
      goto JOIN4C28
}
  function real mean4C35 (point P4C36#1) {
    ENTRY4C37:  preds = []
      real _t4C38#1 = P4C36.closest;
      return _t4C38
}
  function real mean4C3F (point P4C40#1, real meancl4C41#1) {
    ENTRY4C42:  preds = []
      real _t4C43#1 = P4C40.closest;
      real op1_e3_l_24C46#1 = λ(T0[],T1[])<(T0) - (T1)> (_t4C43,meancl4C41);
      real _t4C45#1 = λ(T0[])<(T0)^2> (op1_e3_l_24C46);
      return _t4C45
}
  function real max4C54 (point P4C55#1) {
    ENTRY4C56:  preds = []
      real _t4C57#1 = P4C55.mvmt;
      return _t4C57
}
  function real mean4C66 (point P4C67#1) {
    ENTRY4C68:  preds = []
      real _t4C69#1 = P4C67.hh;
      return _t4C69
}
## input initialization
  ENTRY3FA4:  preds = []
    real fMaskTh3FA5#3 = 0.e0;
    globals.fMaskTh3F88 = fMaskTh3FA5;
    globals.fBias3F89 = fMaskTh3FA5;
    real tipd3FA9#1 = 0.1e1;
    globals.tipd3F8A = tipd3FA9;
    real mabd3FAC#1 = 0.75e0;
    globals.mabd3F8B = mabd3FAC;
    real travMax3FAF#1 = 0.1e2;
    globals.travMax3F8C = travMax3FAF;
    int nfsMax3FB2#1 = 20;
    globals.nfsMax3F8D = nfsMax3FB2;
    real gdeTest3FB5#4 = 0.5e0;
    globals.gdeTest3F8E = gdeTest3FB5;
    globals.gdeBack3F8F = gdeTest3FB5;
    real gdeOppor3FB9#1 = 0.12e1;
    globals.gdeOppor3F90 = gdeOppor3FB9;
    real geoEps3FBC#1 = 0.1e0;
    globals.geoEps3F92 = geoEps3FBC;
    real mvmtEps3FBF#2 = 0.1e-1;
    globals.mvmtEps3F93 = mvmtEps3FBF;
    globals.rpcEps3F94 = mvmtEps3FBF;
    real pcmvEps3FC3#1 = 0.3e0;
    globals.pcmvEps3F95 = pcmvEps3FC3;
    globals.isoval3F96 = fMaskTh3FA5;
    int verb3FC7#1 = 0;
    globals.verb3F97 = verb3FC7;
    globals.sfs3F98 = gdeTest3FB5;
    globals.hist3F99 = gdeTest3FB5;
    int pcp3FCC#1 = 5;
    globals.pcp3F9A = pcp3FCC;
    int fDim3FCF#1 = 2;
    globals.fDim3F9C = fDim3FCF;
    return
## global-variable initialization
  ENTRY3FD3:  preds = []
    femData:Mesh meshData3FD4#2 = globals.meshData3F84;
    real tipd3FD6#1 = globals.tipd3F8A;
    real hist3FD8#1 = globals.hist3F99;
    int pcp3FDA#1 = globals.pcp3F9A;
    int fDim3FDC#3 = globals.fDim3F9C;
    int _t3FDE#4 = 0;
    int _t3FE0#3 = 1;
    int _t3FE2#1 = ExtractFemItem<int,NumCell(Mesh)>(meshData3FD4);
    int _t3FE4#1 = ISub(_t3FE2,_t3FE0);
    int[] _t3FE6#1 = Range(_t3FDE,_t3FE4);
    femData:MeshCell[] _t3FE8#1 = <femData:MeshCell[]>{};
  FOREACH3FEB:  preds = [ASSIGN3FE9,NEXT3FF1]
    foreach (_t3FEA in _t3FE6) on exit goto ASSIGN3FF3
      femData:MeshCell[] _t3FEF#1 = phi(_t3FE8,_t3FEE)
    femData:MeshCell _t3FEC#1 = LoadFem<femData:MeshCell>(meshData3FD4,_t3FEA);
    femData:MeshCell[] _t3FEE#1 = Append<femData:MeshCell>(_t3FEF,_t3FEC);
    goto FOREACH3FEB
  ASSIGN3FF3:  preds = [FOREACH3FEB]
    int _t3FF2#3 = 2;
    bool _t3FF4#2 = EQ<int>(_t3FF2,fDim3FDC);
    if _t3FF4 then goto ASSIGN3FF8 else goto ASSIGN4025
  ASSIGN3FF8:  preds = [COND3FF6]
    int _t3FF7#1 = 6;
    goto JOIN3FFB
  JOIN3FFB:  preds = [ASSIGN3FF8,JOIN4027]
    int _t3FF9#1 = phi(_t3FF7,_t3FFA)
    globals.nnmin3F9D = _t3FF9;
    if _t3FF4 then goto ASSIGN3FFF else goto ASSIGN401F
  ASSIGN3FFF:  preds = [COND3FFD]
    int _t3FFE#1 = 8;
    goto JOIN4002
  JOIN4002:  preds = [ASSIGN3FFF,JOIN4023]
    int _t4000#1 = phi(_t3FFE,_t4001)
    globals.nnmax3F9E = _t4000;
    real _t4004#1 = 0.2e1;
    real _t4006#1 = 0.3e1;
    real op1_e3_l_34009#1 = λ(T0[],T1[])<(T0 * T1)> (tipd3FD6,_t4006);
    real rad4008#1 = λ(T0[],T1[])<(T1) / ( T0)> (_t4004,op1_e3_l_34009);
    globals.rad3F9F = rad4008;
    real _t400D#2 = 0.1e1;
    int _t400F#1 = IMul(_t3FF2,pcp3FDA);
    real _t4011#1 = IntToReal(_t400F);
    real _t4013#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t400D,_t4011);
    real pchist4015#1 = MathFn<pow>(hist3FD8,_t4013);
    globals.pchist3FA0 = pchist4015;
    globals.iter3FA1 = _t3FDE;
    globals.rpc3FA2 = _t400D;
    int popLast401A#1 = -1;
    globals.popLast3FA3 = popLast401A;
    return
  ASSIGN401F:  preds = [COND3FFD]
    bool _t401E#1 = EQ<int>(_t3FE0,fDim3FDC);
    if _t401E then goto ASSIGN4022 else goto JOIN4023
  ASSIGN4022:  preds = [COND4020]
    int _t4021#1 = 3;
    goto JOIN4023
  JOIN4023:  preds = [ASSIGN4022,COND4020]
    int _t4001#1 = phi(_t4021,_t3FDE)
    goto JOIN4002
  ASSIGN4025:  preds = [COND3FF6]
    bool _t4024#1 = EQ<int>(_t3FE0,fDim3FDC);
    if _t4024 then goto JOIN4027 else goto JOIN4027
  JOIN4027:  preds = [COND4026,COND4026]
    int _t3FFA#1 = phi(_t3FF2,_t3FDE)
    goto JOIN3FFB
## strand
  strand point (tensor[3] p04028#5, real hh04029#1) in 3D
    state:
      output tensor[3] pos;
      output tensor[3] _pos;
      real ID;
      real hh;
      tensor[3] step;
      bool found;
      int nfs;
      real trav;
      real mvmt;
      real closest;
      int born;
      bool first;
    state init
      ENTRY4036:  preds = []
        real rad4037#1 = globals.rad3F9F;
        real _t4039#1 = 0.1e7;
        real _t403B#1 = TensorIndex<tensor[3],[0]>(p04028);
        real _t4068#1 = urnd403D (_t403B);
        real _t406A#1 = TensorIndex<tensor[3],[1]>(p04028);
        real _t406C#1 = urnd403D (_t406A);
        real _t406E#1 = TensorIndex<tensor[3],[2]>(p04028);
        real _t4070#1 = urnd403D (_t406E);
        real _t4072#1 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (_t4068,_t406C,_t4070);
        real _t4074#2 = 0.1e1;
        real _t4076#1 = MathFn<fmod>(_t4072,_t4074);
        real _t4078#1 = λ(T0[],T1[])<(T0 * T1)> (_t4039,_t4076);
        real _t407A#1 = MathFn<floor>(_t4078);
        real _t407C#4 = 0.e0;
        tensor[3] step407E#1 = <tensor[3]>[_t407C,_t407C,_t407C];
        bool found4080#1 = false;
        int nfs4082#2 = 0;
        bool first4084#1 = true;
        self.pos = p04028;
        self._pos = p04028;
        self.ID = _t407A;
        self.hh = hh04029;
        self.step = step407E;
        self.found = found4080;
        self.nfs = nfs4082;
        self.trav = _t407C;
        self.mvmt = _t4074;
        self.closest = rad4037;
        self.born = nfs4082;
        self.first = first4084;
        return
    end state init
    method update
        ENTRY4093:  preds = []
          real fStrTh4094#4 = globals.fStrTh3F87;
          real fMaskTh4096#4 = globals.fMaskTh3F88;
          real fBias4098#4 = globals.fBias3F89;
          real tipd409A#13 = globals.tipd3F8A;
          real mabd409C#1 = globals.mabd3F8B;
          real travMax409E#3 = globals.travMax3F8C;
          int nfsMax40A0#3 = globals.nfsMax3F8D;
          real gdeTest40A2#1 = globals.gdeTest3F8E;
          real gdeBack40A4#1 = globals.gdeBack3F8F;
          real gdeOppor40A6#1 = globals.gdeOppor3F90;
          real fsEps40A8#3 = globals.fsEps3F91;
          real pcmvEps40AA#1 = globals.pcmvEps3F95;
          int verb40AC#16 = globals.verb3F97;
          real sfs40AE#9 = globals.sfs3F98;
          real hist40B0#2 = globals.hist3F99;
          int pcp40B2#10 = globals.pcp3F9A;
          int fDim40B4#2 = globals.fDim3F9C;
          int nnmin40B6#3 = globals.nnmin3F9D;
          int nnmax40B8#4 = globals.nnmax3F9E;
          real rad40BA#6 = globals.rad3F9F;
          int iter40BC#22 = globals.iter3FA1;
          tensor[3] pos40BE#19 = self.pos;
          real ID40C0#11 = self.ID;
          real hh40C2#7 = self.hh;
          bool found40C4#3 = self.found;
          int nfs40C6#5 = self.nfs;
          real trav40C8#5 = self.trav;
          real mvmt40CA#5 = self.mvmt;
          real closest40CC#1 = self.closest;
          int born40CE#5 = self.born;
          bool first40D0#1 = self.first;
          bool vv40D2#45 = false;
          if first40D0 then goto ASSIGN40D6 else goto JOIN40EE
        ASSIGN40D6:  preds = [COND40D4]
          int _t40D5#1 = 0;
          bool _t40D7#1 = GT<int>(verb40AC,_t40D5);
          if _t40D7 then goto JOIN40DB else goto JOIN40DB
        JOIN40DB:  preds = [COND40D9,COND40D9]
          bool _t40DA#1 = phi(vv40D2,vv40D2)
          if _t40DA then goto ASSIGN40DE else goto ASSIGN4BD8
        ASSIGN40DE:  preds = [COND40DC]
          bool _t40DD#1 = true;
          goto JOIN40E1
        JOIN40E1:  preds = [ASSIGN40DE,ASSIGN4BD9]
          bool _t40DF#1 = phi(_t40DD,_t40E0)
          if _t40DF then goto ASSIGN40E4 else goto JOIN40ED
        ASSIGN40E4:  preds = [COND40E2]
          string _t40E3#1 = "(i#";
          string _t40E5#1 = " @ ";
          string _t40E7#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID40C0,_t40E3,iter40BC,_t40E5,pos40BE,_t40E7);
          string _t40EA#1 = " HELLO!\n";
          Print<[string]>(_t40EA);
          goto JOIN40ED
        JOIN40ED:  preds = [MASSIGN40EC,COND40E2]
          goto JOIN40EE
        JOIN40EE:  preds = [JOIN40ED,COND40D4]
          real _t40EF#23 = 0.e0;
          tensor[3] _t40F1#5 = <tensor[3]>[_t40EF,_t40EF,_t40EF];
          tensor[3] op1_e3_l_240F4#2 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (pos40BE,_t40F1);
          real op1_e3_l_440F5#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_240F4,op1_e3_l_240F4);
          real _t40F3#3 = λ(T0[])<Sqrt(T0)> (op1_e3_l_440F5);
          real _t40F9#11 = 0.4e1;
          bool _t40FB#2 = LT<real>(_t40F3,_t40F9);
          if _t40FB then goto ASSIGN40FF else goto JOIN4103
        ASSIGN40FF:  preds = [COND40FD]
          real _t40FE#1 = 0.3e1;
          bool _t4100#1 = GT<real>(_t40F3,_t40FE);
          goto JOIN4103
        JOIN4103:  preds = [ASSIGN4101,COND40FD]
          bool _t4102#1 = phi(_t4100,vv40D2)
          if _t4102 then goto ASSIGN4106 else goto JOIN41D5
        ASSIGN4106:  preds = [COND4104]
          real x4105#5 = TensorIndex<tensor[3],[0]>(pos40BE);
          real y4107#5 = TensorIndex<tensor[3],[1]>(pos40BE);
          real z4109#6 = TensorIndex<tensor[3],[2]>(pos40BE);
          real _t410B#6 = 0.2e1;
          int _t410D#1 = 2;
          real op1_e3_l_64110#2 = λ(T0[])<(T0)^2> (x4105);
          real op1_e3_l_74111#2 = λ(T0[])<(T0)^2> (y4107);
          real op1_e3_l_84112#8 = λ(T0[])<(T0)^2> (z4109);
          real op1_e3_l_94113#2 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_64110,op1_e3_l_74111,op1_e3_l_84112);
          real op1_e3_l_114114#7 = λ(T0[])<Cosine(T0)> (op1_e3_l_94113);
          real _t410F#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t410B,x4105,op1_e3_l_84112,op1_e3_l_114114);
          real _t411B#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t410B,y4107,op1_e3_l_84112,op1_e3_l_114114);
          real op1_e3_l_14412C#3 = λ(T0[])<(T0)^3> (z4109);
          real op1_e3_l_20412E#8 = λ(T0[])<Sine(T0)> (op1_e3_l_94113);
          real op1_e3_l_21412F#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t410B,op1_e3_l_14412C,op1_e3_l_114114);
          real op1_e3_l_224130#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t410B,z4109,op1_e3_l_20412E);
          real _t4127#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_21412F,op1_e3_l_224130);
          tensor[3] g413B#1 = <tensor[3]>[_t410F,_t411B,_t4127];
          int _t413D#1 = -4;
          real _t413F#6 = IntToReal(_t413D);
          real op1_e3_l_244148#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t413F,op1_e3_l_64110,op1_e3_l_84112,op1_e3_l_20412E);
          real op1_e3_l_254149#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t410B,op1_e3_l_84112,op1_e3_l_114114);
          real _t4141#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_244148,op1_e3_l_254149);
          real _t4153#2 = λ(T0[],T1[],T2[],T3[],T4[])<(T0 * T1 * T2 * T3 * T4)> (_t413F,x4105,y4107,op1_e3_l_84112,op1_e3_l_20412E);
          real op1_e3_l_234167#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t413F,x4105,op1_e3_l_14412C,op1_e3_l_20412E);
          real op1_e3_l_244168#1 = λ(T0[],T1[],T2[],T3[])<(T2 * T0 * T1 * T3)> (x4105,z4109,_t40F9,op1_e3_l_114114);
          real _t415F#2 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_234167,op1_e3_l_244168);
          tensor[3] _t4173#1 = <tensor[3]>[_t4141,_t4153,_t415F];
          real op1_e3_l_24417C#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t413F,op1_e3_l_74111,op1_e3_l_84112,op1_e3_l_20412E);
          real _t4175#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_24417C,op1_e3_l_254149);
          real op1_e3_l_23418F#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t413F,y4107,op1_e3_l_14412C,op1_e3_l_20412E);
          real op1_e3_l_244190#1 = λ(T0[],T1[],T2[],T3[])<(T2 * T0 * T1 * T3)> (y4107,z4109,_t40F9,op1_e3_l_114114);
          real _t4187#2 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_23418F,op1_e3_l_244190);
          tensor[3] _t419B#1 = <tensor[3]>[_t4153,_t4175,_t4187];
          real _t419D#1 = 0.1e2;
          real op1_e3_l_1841A4#1 = λ(T0[])<(T0)^4> (z4109);
          real op1_e3_l_3141A7#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t413F,op1_e3_l_1841A4,op1_e3_l_20412E);
          real op1_e3_l_3241A8#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t419D,op1_e3_l_84112,op1_e3_l_114114);
          real op1_e3_l_3341A9#1 = λ(T0[],T1[])<(T0 * T1)> (_t410B,op1_e3_l_20412E);
          real _t419F#1 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_3141A7,op1_e3_l_3241A8,op1_e3_l_3341A9);
          tensor[3] _t41B5#1 = <tensor[3]>[_t415F,_t4187,_t419F];
          tensor[3,3] hess41B7#1 = <tensor[3,3]>[_t4173,_t419B,_t41B5];
          (real[3] _t41B9#1,tensor[3][3] evecs41BA#0) = EigenVecs3x3(hess41B7);
          real _t41BC#1 = Subscript<real[3]>(_t41B9,_t410D);
          real op1_e3_l_341BF#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (g413B);
          real op1_e3_l_441C0#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_341BF);
          real op1_e3_l_541C1#1 = λ(T0[])<Neg(T0)> (_t41BC);
          real op1_e3_l_641C2#1 = λ(T0[],T1[])<(T0 + T1)> (fBias4098,op1_e3_l_441C0);
          real str41BE#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_541C1,op1_e3_l_641C2);
          bool _t41C8#1 = GT<real>(str41BE,fStrTh4094);
          if _t41C8 then goto ASSIGN41CC else goto JOIN41D3
        ASSIGN41CC:  preds = [COND41CA]
          bool _t41CB#1 = GTE<real>(_t40EF,fMaskTh4096);
          if _t41CB then goto ASSIGN41CF else goto JOIN41D1
        ASSIGN41CF:  preds = [COND41CD]
          bool _t41CE#1 = true;
          goto JOIN41D1
        JOIN41D1:  preds = [ASSIGN41CF,COND41CD]
          bool _t41D0#1 = phi(_t41CE,vv40D2)
          goto JOIN41D3
        JOIN41D3:  preds = [JOIN41D1,COND41CA]
          bool _t41D2#1 = phi(_t41D0,vv40D2)
          goto JOIN41D5
        JOIN41D5:  preds = [JOIN41D3,COND4104]
          bool _t41D4#1 = phi(_t41D2,vv40D2)
          bool _t41D6#1 = BNot(_t41D4);
          if _t41D6 then goto ASSIGN41DA else goto JOIN42CB
        ASSIGN41DA:  preds = [COND41D8]
          int _t41D9#1 = 0;
          bool _t41DB#1 = GT<int>(verb40AC,_t41D9);
          if _t41DB then goto JOIN41DF else goto JOIN41DF
        JOIN41DF:  preds = [COND41DD,COND41DD]
          bool _t41DE#1 = phi(vv40D2,vv40D2)
          if _t41DE then goto ASSIGN41E2 else goto ASSIGN4BD5
        ASSIGN41E2:  preds = [COND41E0]
          bool _t41E1#1 = true;
          goto JOIN41E5
        JOIN41E5:  preds = [ASSIGN41E2,ASSIGN4BD6]
          bool _t41E3#1 = phi(_t41E1,_t41E4)
          if _t41E3 then goto ASSIGN41E8 else goto JOIN42C9
        ASSIGN41E8:  preds = [COND41E6]
          string _t41E7#1 = "(i#";
          string _t41E9#1 = " @ ";
          string _t41EB#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID40C0,_t41E7,iter40BC,_t41E9,pos40BE,_t41EB);
          string _t41EE#1 = "!inside=";
          if _t40FB then goto ASSIGN41F2 else goto JOIN41F6
        ASSIGN41F2:  preds = [COND41F0]
          real _t41F1#1 = 0.3e1;
          bool _t41F3#1 = GT<real>(_t40F3,_t41F1);
          goto JOIN41F6
        JOIN41F6:  preds = [ASSIGN41F4,COND41F0]
          bool _t41F5#1 = phi(_t41F3,vv40D2)
          string _t41F7#1 = " || fStrength=";
          real x41F9#5 = TensorIndex<tensor[3],[0]>(pos40BE);
          real y41FB#5 = TensorIndex<tensor[3],[1]>(pos40BE);
          real z41FD#6 = TensorIndex<tensor[3],[2]>(pos40BE);
          real _t41FF#6 = 0.2e1;
          int _t4201#1 = 2;
          real op1_e3_l_64204#2 = λ(T0[])<(T0)^2> (x41F9);
          real op1_e3_l_74205#2 = λ(T0[])<(T0)^2> (y41FB);
          real op1_e3_l_84206#8 = λ(T0[])<(T0)^2> (z41FD);
          real op1_e3_l_94207#2 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_64204,op1_e3_l_74205,op1_e3_l_84206);
          real op1_e3_l_114208#7 = λ(T0[])<Cosine(T0)> (op1_e3_l_94207);
          real _t4203#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t41FF,x41F9,op1_e3_l_84206,op1_e3_l_114208);
          real _t420F#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t41FF,y41FB,op1_e3_l_84206,op1_e3_l_114208);
          real op1_e3_l_144220#3 = λ(T0[])<(T0)^3> (z41FD);
          real op1_e3_l_204222#8 = λ(T0[])<Sine(T0)> (op1_e3_l_94207);
          real op1_e3_l_214223#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t41FF,op1_e3_l_144220,op1_e3_l_114208);
          real op1_e3_l_224224#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t41FF,z41FD,op1_e3_l_204222);
          real _t421B#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_214223,op1_e3_l_224224);
          tensor[3] g422F#1 = <tensor[3]>[_t4203,_t420F,_t421B];
          int _t4231#1 = -4;
          real _t4233#6 = IntToReal(_t4231);
          real op1_e3_l_24423C#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t4233,op1_e3_l_64204,op1_e3_l_84206,op1_e3_l_204222);
          real op1_e3_l_25423D#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t41FF,op1_e3_l_84206,op1_e3_l_114208);
          real _t4235#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_24423C,op1_e3_l_25423D);
          real _t4247#2 = λ(T0[],T1[],T2[],T3[],T4[])<(T0 * T1 * T2 * T3 * T4)> (_t4233,x41F9,y41FB,op1_e3_l_84206,op1_e3_l_204222);
          real op1_e3_l_23425B#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t4233,x41F9,op1_e3_l_144220,op1_e3_l_204222);
          real op1_e3_l_24425C#1 = λ(T0[],T1[],T2[],T3[])<(T2 * T0 * T1 * T3)> (x41F9,z41FD,_t40F9,op1_e3_l_114208);
          real _t4253#2 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_23425B,op1_e3_l_24425C);
          tensor[3] _t4267#1 = <tensor[3]>[_t4235,_t4247,_t4253];
          real op1_e3_l_244270#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t4233,op1_e3_l_74205,op1_e3_l_84206,op1_e3_l_204222);
          real _t4269#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_244270,op1_e3_l_25423D);
          real op1_e3_l_234283#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t4233,y41FB,op1_e3_l_144220,op1_e3_l_204222);
          real op1_e3_l_244284#1 = λ(T0[],T1[],T2[],T3[])<(T2 * T0 * T1 * T3)> (y41FB,z41FD,_t40F9,op1_e3_l_114208);
          real _t427B#2 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_234283,op1_e3_l_244284);
          tensor[3] _t428F#1 = <tensor[3]>[_t4247,_t4269,_t427B];
          real _t4291#1 = 0.1e2;
          real op1_e3_l_184298#1 = λ(T0[])<(T0)^4> (z41FD);
          real op1_e3_l_31429B#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t4233,op1_e3_l_184298,op1_e3_l_204222);
          real op1_e3_l_32429C#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t4291,op1_e3_l_84206,op1_e3_l_114208);
          real op1_e3_l_33429D#1 = λ(T0[],T1[])<(T0 * T1)> (_t41FF,op1_e3_l_204222);
          real _t4293#1 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_31429B,op1_e3_l_32429C,op1_e3_l_33429D);
          tensor[3] _t42A9#1 = <tensor[3]>[_t4253,_t427B,_t4293];
          tensor[3,3] hess42AB#1 = <tensor[3,3]>[_t4267,_t428F,_t42A9];
          (real[3] _t42AD#1,tensor[3][3] evecs42AE#0) = EigenVecs3x3(hess42AB);
          real _t42B0#1 = Subscript<real[3]>(_t42AD,_t4201);
          real op1_e3_l_342B3#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (g422F);
          real op1_e3_l_442B4#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_342B3);
          real op1_e3_l_542B5#1 = λ(T0[])<Neg(T0)> (_t42B0);
          real op1_e3_l_642B6#1 = λ(T0[],T1[])<(T0 + T1)> (fBias4098,op1_e3_l_442B4);
          real str42B2#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_542B5,op1_e3_l_642B6);
          string _t42BC#1 = " <= fStrTh=";
          string _t42BE#1 = " || fMask(pos)=";
          string _t42C0#1 = " < fMaskTh=";
          string _t42C2#1 = " || fTest(pos)=";
          bool _t42C4#1 = true;
          string _t42C6#1 = " ==>DIE\n";
          Print<[string,bool,string,real,string,real,string,real,string,real,string,bool,string]>(_t41EE,_t41F5,_t41F7,str42B2,_t42BC,fStrTh4094,_t42BE,_t40EF,_t42C0,fMaskTh4096,_t42C2,_t42C4,_t42C6);
          goto JOIN42C9
        JOIN42C9:  preds = [MASSIGN42C8,COND41E6]
          die
          goto JOIN42CB
        JOIN42CB:  preds = [*DIE42CA,COND41D8]
          bool _t42CC#1 = GT<real>(travMax409E,_t40EF);
          if _t42CC then goto ASSIGN42D0 else goto JOIN42D4
        ASSIGN42D0:  preds = [COND42CE]
          bool _t42CF#1 = GT<real>(trav40C8,travMax409E);
          if _t42CF then goto DIE42D2 else goto JOIN42D3
        DIE42D2:  preds = [COND42D1]
          die
          goto JOIN42D3
        JOIN42D3:  preds = [*DIE42D2,COND42D1]
          goto JOIN42D4
        JOIN42D4:  preds = [JOIN42D3,COND42CE]
          bool _t42D5#1 = BNot(found40C4);
          if _t42D5 then goto ASSIGN42D9 else goto ASSIGN4461
        ASSIGN42D9:  preds = [COND42D7]
          int _t42D8#3 = 0;
          bool _t42DA#1 = GT<int>(nfsMax40A0,_t42D8);
          if _t42DA then goto ASSIGN42DE else goto JOIN4301
        ASSIGN42DE:  preds = [COND42DC]
          bool _t42DD#1 = GT<int>(nfs40C6,nfsMax40A0);
          if _t42DD then goto ASSIGN42E1 else goto JOIN4300
        ASSIGN42E1:  preds = [COND42DF]
          bool _t42E0#1 = GT<int>(verb40AC,_t42D8);
          if _t42E0 then goto JOIN42E4 else goto JOIN42E4
        JOIN42E4:  preds = [COND42E2,COND42E2]
          bool _t42E3#1 = phi(vv40D2,vv40D2)
          if _t42E3 then goto ASSIGN42E7 else goto ASSIGN445E
        ASSIGN42E7:  preds = [COND42E5]
          bool _t42E6#1 = true;
          goto JOIN42EA
        JOIN42EA:  preds = [ASSIGN42E7,ASSIGN445F]
          bool _t42E8#1 = phi(_t42E6,_t42E9)
          if _t42E8 then goto ASSIGN42ED else goto JOIN42FE
        ASSIGN42ED:  preds = [COND42EB]
          string _t42EC#1 = "(i#";
          string _t42EE#1 = " @ ";
          string _t42F0#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID40C0,_t42EC,iter40BC,_t42EE,pos40BE,_t42F0);
          string _t42F3#1 = "nfs=";
          string _t42F5#1 = " > nfsMax=";
          string _t42F7#1 = " || trav=";
          string _t42F9#1 = " > travMax=";
          string _t42FB#1 = " =>DIE\n";
          Print<[string,int,string,int,string,real,string,real,string]>(_t42F3,nfs40C6,_t42F5,nfsMax40A0,_t42F7,trav40C8,_t42F9,travMax409E,_t42FB);
          goto JOIN42FE
        JOIN42FE:  preds = [MASSIGN42FD,COND42EB]
          die
          goto JOIN4300
        JOIN4300:  preds = [*DIE42FF,COND42DF]
          goto JOIN4301
        JOIN4301:  preds = [JOIN4300,COND42DC]
          tensor[3] _t43F0#2 = fStep4302 (pos40BE);
          tensor[3] step43F2#3 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs40AE,_t43F0);
          tensor[3] pos43F4#2 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos40BE,step43F2);
          real op1_e3_l_543F9#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (_t43F0);
          real op1_e3_l_643FA#1 = λ(T0[],T1[])<(T0 * T0 * T1)> (sfs40AE,op1_e3_l_543F9);
          real op1_e3_l_743FB#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_643FA);
          real op1_e3_l_1143FC#3 = λ(T0[],T1[])<(T1) / ( T0)> (tipd409A,op1_e3_l_743FB);
          real op1_e3_l_1243FD#1 = λ(T0[],T1[])<(T0) - (T1)> (mvmt40CA,op1_e3_l_1143FC);
          real op1_e3_l_1443FE#1 = λ(T0[],T1[])<(T0 * T1)> (hist40B0,op1_e3_l_1243FD);
          real mvmt43F8#2 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_1143FC,op1_e3_l_1443FE);
          bool _t4406#1 = GT<real>(mvmt43F8,fsEps40A8);
          if _t4406 then goto ASSIGN4D2F else goto ASSIGN445B
        ASSIGN4D2F:  preds = [COND4408]
          real trav4409#1 = λ(T0[],T1[])<(T0 + T1)> (trav40C8,op1_e3_l_1143FC);
          int _t4413#1 = 1;
          int nfs4415#1 = IAdd(nfs40C6,_t4413);
          goto JOIN441D
        JOIN441D:  preds = [ASSIGN4416,ASSIGN445C]
          real mvmt4417#2 = phi(mvmt43F8,mvmt4418)
          real trav4419#1 = phi(trav4409,_t40EF)
          int nfs441A#1 = phi(nfs4415,nfs40C6)
          bool found441B#2 = phi(found40C4,found441C)
          bool _t441E#1 = GT<int>(verb40AC,_t42D8);
          if _t441E then goto JOIN4422 else goto JOIN4422
        JOIN4422:  preds = [COND4420,COND4420]
          bool _t4421#1 = phi(vv40D2,vv40D2)
          if _t4421 then goto ASSIGN4425 else goto ASSIGN4459
        ASSIGN4425:  preds = [COND4423]
          bool _t4424#1 = true;
          goto JOIN4428
        JOIN4428:  preds = [ASSIGN4425,ASSIGN445A]
          bool _t4426#1 = phi(_t4424,_t4427)
          if _t4426 then goto ASSIGN442B else goto JOIN443A
        ASSIGN442B:  preds = [COND4429]
          string _t442A#1 = "(i#";
          string _t442C#1 = " @ ";
          string _t442E#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID40C0,_t442A,iter40BC,_t442C,pos43F4,_t442E);
          string _t4431#1 = "step=";
          string _t4433#1 = "; mvmt=";
          string _t4435#1 = " => found=";
          string _t4437#1 = "\n";
          Print<[string,tensor[3],string,real,string,bool,string]>(_t4431,step43F2,_t4433,mvmt4417,_t4435,found441B,_t4437);
          goto JOIN443A
        JOIN443A:  preds = [MASSIGN4439,COND4429]
          goto JOIN444B
        JOIN444B:  preds = [JOIN443A,JOIN4B80]
          int born443B#1 = phi(born40CE,born443C)
          real closest443D#1 = phi(closest40CC,closest443E)
          real mvmt443F#1 = phi(mvmt4417,mvmt4440)
          real trav4441#1 = phi(trav4419,trav4442)
          int nfs4443#1 = phi(nfs441A,nfs40C6)
          bool found4444#1 = phi(found441B,found40C4)
          tensor[3] step4445#1 = phi(step43F2,step4446)
          real hh4447#1 = phi(hh40C2,hh4448)
          tensor[3] pos4449#2 = phi(pos43F4,pos444A)
          self.pos = pos4449;
          self._pos = pos4449;
          self.hh = hh4447;
          self.step = step4445;
          self.found = found4444;
          self.nfs = nfs4443;
          self.trav = trav4441;
          self.mvmt = mvmt443F;
          self.closest = closest443D;
          self.born = born443B;
          self.first = vv40D2;
          active
        ASSIGN4459:  preds = [COND4423]
          int _t4458#1 = 1;
          bool _t4427#1 = GT<int>(verb40AC,_t4458);
          goto JOIN4428
        ASSIGN445B:  preds = [COND4408]
          bool found441C#1 = true;
          real mvmt4418#1 = 0.1e1;
          goto JOIN441D
        ASSIGN445E:  preds = [COND42E5]
          int _t445D#1 = 1;
          bool _t42E9#1 = GT<int>(verb40AC,_t445D);
          goto JOIN42EA
        ASSIGN4461:  preds = [COND42D7]
          int _t4460#25 = 0;
          bool _t4462#1 = EQ<int>(_t4460,fDim40B4);
          if _t4462 then goto SAVE4465 else goto JOIN4467
        SAVE4465:  preds = [COND4464]
          self.pos = pos40BE;
          stabilize
          goto JOIN4467
        JOIN4467:  preds = [*STABILIZE4466,COND4464]
          tensor[3] _t4468#2 = fStep4302 (pos40BE);
          tensor[3] step446A#10 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs40AE,_t4468);
          tensor[3] pos446C#20 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos40BE,step446A);
          real op1_e3_l_44471#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (_t4468);
          real op1_e3_l_54472#1 = λ(T0[],T1[])<(T0 * T0 * T1)> (sfs40AE,op1_e3_l_44471);
          real op1_e3_l_64473#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_54472);
          real op1_e3_l_74474#2 = λ(T0[],T1[])<(T1) / ( T0)> (tipd409A,op1_e3_l_64473);
          real trav4470#4 = λ(T0[],T1[])<(T0 + T1)> (trav40C8,op1_e3_l_74474);
          point[] _t447A#1 = SphereQuery<3,point>(pos446C,rad40BA);
        FOREACH447D:  preds = [ASSIGN447B,NEXT4516]
          foreach (P447C in _t447A) on exit goto ASSIGN4574
            int nn4514#3 = phi(_t4460,nn4513)
            tensor[3] force44FF#4 = phi(_t40F1,force44FE)
            real oldE44D6#4 = phi(_t40EF,oldE44D5)
          tensor[3] _t447E#1 = P447C.pos;
          tensor[3] op1_e3_l_94483#3 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (_t447E,pos446C);
          real op1_e3_l_114484#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_94483,op1_e3_l_94483);
          real op1_e3_l_124485#3 = λ(T0[])<Sqrt(T0)> (op1_e3_l_114484);
          real _t4480#1 = λ(T0[],T1[])<(T1) / ( T0)> (tipd409A,op1_e3_l_124485);
          bool _t448C#1 = LT<real>(_t4480,fsEps40A8);
          if _t448C then goto ASSIGN4490 else goto JOIN4496
        ASSIGN4490:  preds = [COND448E]
          real _t448F#1 = P447C.ID;
          bool _t4491#1 = LTE<real>(ID40C0,_t448F);
          if _t4491 then goto DIE4494 else goto JOIN4495
        DIE4494:  preds = [COND4493]
          die
          goto JOIN4495
        JOIN4495:  preds = [*DIE4494,COND4493]
          goto JOIN4496
        JOIN4496:  preds = [JOIN4495,COND448E]
          real _t4497#12 = λ(T0[],T1[])<(T1) / ( T0)> (rad40BA,op1_e3_l_124485);
          real _t44A3#2 = 0.2e1;
          real _t44A5#2 = 0.3e1;
          real _t44A7#2 = λ(T0[],T1[])<(T0) / ( T1)> (_t44A3,_t44A5);
          bool _t44A9#2 = LT<real>(_t4497,_t44A7);
          if _t44A9 then goto ASSIGN44AD else goto ASSIGN4544
        ASSIGN44AD:  preds = [COND44AB]
          real _t44AC#1 = 0.1e1;
          real _t44AE#1 = -0.5646e1;
          real _t44B0#1 = 0.119835e2;
          real _t44B2#1 = -0.113535e2;
          real _t44B4#1 = 0.40550625e1;
          real op1_e3_l_5844BD#1 = λ(T0[],T1[])<(T0 * T1)> (_t44B4,_t4497);
          real op1_e3_l_6044BE#1 = λ(T0[],T1[])<(T0 + T1)> (_t44B2,op1_e3_l_5844BD);
          real op1_e3_l_6144BF#1 = λ(T0[],T1[])<(T0 * T1)> (_t4497,op1_e3_l_6044BE);
          real op1_e3_l_6344C0#1 = λ(T0[],T1[])<(T0 + T1)> (_t44B0,op1_e3_l_6144BF);
          real op1_e3_l_6444C1#1 = λ(T0[],T1[])<(T0 * T1)> (_t4497,op1_e3_l_6344C0);
          real op1_e3_l_6644C2#1 = λ(T0[],T1[])<(T0 + T1)> (_t44AE,op1_e3_l_6444C1);
          real op1_e3_l_6744C3#1 = λ(T0[],T1[])<(T0 * T1)> (_t4497,op1_e3_l_6644C2);
          real _t44B6#1 = λ(T0[],T1[])<(T0 + T1)> (_t44AC,op1_e3_l_6744C3);
          goto JOIN44D4
        JOIN44D4:  preds = [ASSIGN44D1,JOIN4572]
          real _t44D2#1 = phi(_t44B6,_t44D3)
          real oldE44D5#1 = λ(T0[],T1[])<(T0 + T1)> (oldE44D6,_t44D2);
          if _t44A9 then goto ASSIGN44DA else goto ASSIGN4518
        ASSIGN44DA:  preds = [COND44D8]
          real _t44D9#1 = -0.5646e1;
          real _t44DB#1 = 0.23967e2;
          real _t44DD#1 = -0.340605e2;
          real _t44DF#1 = 0.1622025e2;
          real op1_e3_l_4444E8#1 = λ(T0[],T1[])<(T0 * T1)> (_t44DF,_t4497);
          real op1_e3_l_4644E9#1 = λ(T0[],T1[])<(T0 + T1)> (_t44DD,op1_e3_l_4444E8);
          real op1_e3_l_4744EA#1 = λ(T0[],T1[])<(T0 * T1)> (_t4497,op1_e3_l_4644E9);
          real op1_e3_l_4944EB#1 = λ(T0[],T1[])<(T0 + T1)> (_t44DB,op1_e3_l_4744EA);
          real op1_e3_l_5044EC#1 = λ(T0[],T1[])<(T0 * T1)> (_t4497,op1_e3_l_4944EB);
          real _t44E1#1 = λ(T0[],T1[])<(T0 + T1)> (_t44D9,op1_e3_l_5044EC);
          goto JOIN44FB
        JOIN44FB:  preds = [ASSIGN44F8,JOIN4542]
          real _t44F9#1 = phi(_t44E1,_t44FA)
          real _t44FC#1 = 0.1e1;
          real op1_e3_l_144502#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t44FC,rad40BA);
          tensor[3] op1_e3_l_234505#1 = λ(T0[],T1[],T2[3])<(T0 * T1 * T2_{i0})>_{3} (_t44F9,op1_e3_l_144502,op1_e3_l_94483);
          tensor[3] op1_e3_l_254507#1 = λ(T0[3],T1[])<(T0_{i0}) / ( T1)>_{3} (op1_e3_l_234505,op1_e3_l_124485);
          tensor[3] force44FE#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (force44FF,op1_e3_l_254507);
          int _t4511#1 = 1;
          int nn4513#1 = IAdd(nn4514,_t4511);
          goto FOREACH447D
        ASSIGN4518:  preds = [COND44D8]
          real _t4517#1 = 0.1e1;
          bool _t4519#1 = LT<real>(_t4497,_t4517);
          if _t4519 then goto ASSIGN451D else goto JOIN4542
        ASSIGN451D:  preds = [COND451B]
          real _t451C#1 = 0.1234567901e-1;
          real _t451E#2 = 0.486e1;
          real _t4520#1 = -0.1458e2;
          real _t4522#1 = 0.1458e2;
          real op1_e3_l_42452B#1 = λ(T0[],T1[])<(T0 * T1)> (_t44A5,_t4497);
          real op1_e3_l_73452C#4 = λ(T0[],T1[])<(T1) - (T0)> (_t44A3,op1_e3_l_42452B);
          real op1_e3_l_74452D#1 = λ(T0[],T1[])<(T0 * T1)> (_t451E,op1_e3_l_73452C);
          real op1_e3_l_76452E#1 = λ(T0[],T1[])<(T0) - (T1)> (_t4522,op1_e3_l_74452D);
          real op1_e3_l_77452F#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_73452C,op1_e3_l_76452E);
          real op1_e3_l_794530#1 = λ(T0[],T1[])<(T0 + T1)> (_t4520,op1_e3_l_77452F);
          real op1_e3_l_804531#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_73452C,op1_e3_l_794530);
          real op1_e3_l_824532#1 = λ(T0[],T1[])<(T0 + T1)> (_t451E,op1_e3_l_804531);
          real _t4524#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t451C,op1_e3_l_73452C,op1_e3_l_824532);
          goto JOIN4542
        JOIN4542:  preds = [ASSIGN4541,COND451B]
          real _t44FA#1 = phi(_t4524,_t40EF)
          goto JOIN44FB
        ASSIGN4544:  preds = [COND44AB]
          real _t4543#1 = 0.1e1;
          bool _t4545#1 = LT<real>(_t4497,_t4543);
          if _t4545 then goto ASSIGN4549 else goto JOIN4572
        ASSIGN4549:  preds = [COND4547]
          real _t4548#1 = -0.1e-2;
          real _t454A#1 = 0.9e-1;
          real _t454C#1 = -0.54e0;
          real _t454E#1 = 0.1215e1;
          real _t4550#1 = 0.972e0;
          real op1_e3_l_50455A#5 = λ(T0[],T1[])<(T0) - (T1)> (_t4497,_t44A7);
          real op1_e3_l_51455B#1 = λ(T0[],T1[])<(T0 * T1)> (_t4550,op1_e3_l_50455A);
          real op1_e3_l_62455C#1 = λ(T0[],T1[])<(T0) - (T1)> (_t454E,op1_e3_l_51455B);
          real op1_e3_l_64455D#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_62455C,op1_e3_l_50455A);
          real op1_e3_l_75455E#1 = λ(T0[],T1[])<(T0 + T1)> (_t454C,op1_e3_l_64455D);
          real op1_e3_l_77455F#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_75455E,op1_e3_l_50455A);
          real op1_e3_l_984560#1 = λ(T0[],T1[])<(T0 + T1)> (_t454A,op1_e3_l_77455F);
          real op1_e3_l_1014561#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (op1_e3_l_984560,op1_e3_l_50455A,op1_e3_l_50455A);
          real _t4552#1 = λ(T0[],T1[])<(T0 + T1)> (_t4548,op1_e3_l_1014561);
          goto JOIN4572
        JOIN4572:  preds = [ASSIGN4571,COND4547]
          real _t44D3#1 = phi(_t4552,_t40EF)
          goto JOIN44D4
        ASSIGN4574:  preds = [FOREACH447D]
          bool _t4573#1 = EQ<int>(_t4460,nn4514);
          if _t4573 then goto ASSIGN4577 else goto JOIN47CF
        ASSIGN4577:  preds = [COND4575]
          bool _t4576#1 = GT<int>(pcp40B2,_t4460);
          if _t4576 then goto ASSIGN457A else goto JOIN4583
        ASSIGN457A:  preds = [COND4578]
          bool _t4579#1 = GT<int>(iter40BC,_t4460);
          if _t4579 then goto ASSIGN457D else goto JOIN4581
        ASSIGN457D:  preds = [COND457B]
          int _t457C#1 = IMod(iter40BC,pcp40B2);
          bool _t457E#1 = EQ<int>(_t4460,_t457C);
          goto JOIN4581
        JOIN4581:  preds = [ASSIGN457F,COND457B]
          bool _t4580#1 = phi(_t457E,vv40D2)
          goto JOIN4583
        JOIN4583:  preds = [JOIN4581,COND4578]
          bool _t4582#1 = phi(_t4580,vv40D2)
          if _t4582 then goto ASSIGN4586 else goto JOIN4592
        ASSIGN4586:  preds = [COND4584]
          int _t4585#1 = IDiv(iter40BC,pcp40B2);
          int _t4587#2 = 2;
          int _t4589#1 = IMod(_t4585,_t4587);
          int _t458B#1 = IMul(_t4589,_t4587);
          int _t458D#1 = 1;
          int _t458F#1 = ISub(_t458B,_t458D);
          goto JOIN4592
        JOIN4592:  preds = [ASSIGN4590,COND4584]
          int _t4591#1 = phi(_t458F,_t4460)
          bool _t4593#1 = GT<int>(_t4591,_t4460);
          if _t4593 then goto ASSIGN4597 else goto JOIN4599
        ASSIGN4597:  preds = [COND4595]
          bool _t4596#1 = LT<int>(born40CE,nnmax40B8);
          goto JOIN4599
        JOIN4599:  preds = [ASSIGN4597,COND4595]
          bool _t4598#1 = phi(_t4596,vv40D2)
          bool _t459A#1 = BNot(_t4598);
          if _t459A then goto SAVE459D else goto JOIN45A2
        SAVE459D:  preds = [COND459C]
          self.pos = pos446C;
          self._pos = pos446C;
          self.step = step446A;
          self.trav = trav4470;
          active
          goto JOIN45A2
        JOIN45A2:  preds = [*ACTIVE45A1,COND459C]
          tensor[3,3] _t4647#3 = fPerp45A3 (pos446C);
          tensor[3] _t4649#1 = <tensor[3]>[tipd409A,_t40EF,_t40EF];
          tensor[3] noff0464B#3 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (_t4647,_t4649);
          tensor[3] _t464D#1 = <tensor[3]>[_t40EF,tipd409A,_t40EF];
          tensor[3] noff1464F#3 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (_t4647,_t464D);
          tensor[3] _t4651#1 = <tensor[3]>[_t40EF,_t40EF,tipd409A];
          tensor[3] noff24653#3 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (_t4647,_t4651);
          real op1_e3_l_44657#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (noff0464B,noff0464B);
          real _t4655#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_44657);
          real op1_e3_l_4465D#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (noff1464F,noff1464F);
          real _t465B#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_4465D);
          bool _t4661#1 = GT<real>(_t4655,_t465B);
          if _t4661 then goto JOIN4665 else goto JOIN4665
        JOIN4665:  preds = [COND4663,COND4663]
          tensor[3] _t4664#2 = phi(noff0464B,noff1464F)
          real op1_e3_l_14667#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (_t4664);
          real _t4666#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_14667);
          real op1_e3_l_4466C#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (noff24653,noff24653);
          real _t466A#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_4466C);
          bool _t4670#1 = GT<real>(_t4666,_t466A);
          if _t4670 then goto JOIN4674 else goto JOIN4674
        JOIN4674:  preds = [COND4672,COND4672]
          tensor[3] _t4673#2 = phi(_t4664,noff24653)
          real op1_e3_l_64676#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (_t4673);
          real op1_e3_l_74677#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_64676);
          real op1_e3_l_84678#1 = λ(T0[])<(1) / ( T0)> (op1_e3_l_74677);
          tensor[3] op1_e3_l_94679#2 = λ(T0[],T1[3],T2[])<(T0 * T1_{i0} * T2)>_{3} (tipd409A,_t4673,op1_e3_l_84678);
          tensor[3] npos4675#1 = λ(T0[3],T1[3],T2[3])<(T1_{i0} + T0_{i0} + T2_{i0})>_{3} (pos40BE,op1_e3_l_94679,step446A);
          tensor[3] _t4681#1 = fStep4302 (npos4675);
          tensor[3] op1_e3_l_134689#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs40AE,_t4681);
          tensor[3] npos4683#5 = λ(T0[3],T1[3],T2[3],T3[3])<(T1_{i0} + T0_{i0} + T2_{i0} + T3_{i0})>_{3} (pos40BE,op1_e3_l_94679,step446A,op1_e3_l_134689);
          bool _t4691#2 = GT<int>(verb40AC,_t4460);
          if _t4691 then goto JOIN4695 else goto JOIN4695
        JOIN4695:  preds = [COND4693,COND4693]
          bool _t4694#1 = phi(vv40D2,vv40D2)
          if _t4694 then goto ASSIGN4698 else goto ASSIGN4BD2
        ASSIGN4698:  preds = [COND4696]
          bool _t4697#1 = true;
          goto JOIN469B
        JOIN469B:  preds = [ASSIGN4698,ASSIGN4BD3]
          bool _t4699#1 = phi(_t4697,_t469A)
          if _t4699 then goto ASSIGN469E else goto JOIN46C3
        ASSIGN469E:  preds = [COND469C]
          string _t469D#1 = "(i#";
          string _t469F#1 = " @ ";
          string _t46A1#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID40C0,_t469D,iter40BC,_t469F,pos446C,_t46A1);
          string _t46A4#1 = " 0==nn =>NEW(";
          string _t46A6#1 = ") w/ ID=";
          real _t46A8#1 = 0.1e7;
          real _t46AA#1 = TensorIndex<tensor[3],[0]>(npos4683);
          real _t46AC#1 = urnd403D (_t46AA);
          real _t46AE#1 = TensorIndex<tensor[3],[1]>(npos4683);
          real _t46B0#1 = urnd403D (_t46AE);
          real _t46B2#1 = TensorIndex<tensor[3],[2]>(npos4683);
          real _t46B4#1 = urnd403D (_t46B2);
          real _t46B6#1 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (_t46AC,_t46B0,_t46B4);
          real _t46B8#1 = 0.1e1;
          real _t46BA#1 = MathFn<fmod>(_t46B6,_t46B8);
          real _t46BC#1 = λ(T0[],T1[])<(T0 * T1)> (_t46A8,_t46BA);
          real _t46BE#1 = MathFn<floor>(_t46BC);
          string _t46C0#1 = "\n";
          Print<[string,tensor[3],string,real,string]>(_t46A4,npos4683,_t46A6,_t46BE,_t46C0);
          goto JOIN46C3
        JOIN46C3:  preds = [MASSIGN46C2,COND469C]
          tensor[3] op1_e3_l_846C7#2 = λ(T0[3],T1[3])<(T1_{i0}) - (T0_{i0})>_{3} (_t40F1,pos446C);
          real op1_e3_l_1046C8#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_846C7,op1_e3_l_846C7);
          real _t46C4#2 = λ(T0[])<Sqrt(T0)> (op1_e3_l_1046C8);
          bool _t46CE#1 = LT<real>(_t46C4,_t40F9);
          if _t46CE then goto ASSIGN46D2 else goto JOIN46D6
        ASSIGN46D2:  preds = [COND46D0]
          real _t46D1#1 = 0.3e1;
          bool _t46D3#1 = GT<real>(_t46C4,_t46D1);
          goto JOIN46D6
        JOIN46D6:  preds = [ASSIGN46D4,COND46D0]
          bool _t46D5#1 = phi(_t46D3,vv40D2)
          if _t46D5 then goto ASSIGN46D9 else goto JOIN47A8
        ASSIGN46D9:  preds = [COND46D7]
          real x46D8#5 = TensorIndex<tensor[3],[0]>(pos446C);
          real y46DA#5 = TensorIndex<tensor[3],[1]>(pos446C);
          real z46DC#6 = TensorIndex<tensor[3],[2]>(pos446C);
          real _t46DE#6 = 0.2e1;
          int _t46E0#1 = 2;
          real op1_e3_l_646E3#2 = λ(T0[])<(T0)^2> (x46D8);
          real op1_e3_l_746E4#2 = λ(T0[])<(T0)^2> (y46DA);
          real op1_e3_l_846E5#8 = λ(T0[])<(T0)^2> (z46DC);
          real op1_e3_l_946E6#2 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_646E3,op1_e3_l_746E4,op1_e3_l_846E5);
          real op1_e3_l_1146E7#7 = λ(T0[])<Cosine(T0)> (op1_e3_l_946E6);
          real _t46E2#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t46DE,x46D8,op1_e3_l_846E5,op1_e3_l_1146E7);
          real _t46EE#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t46DE,y46DA,op1_e3_l_846E5,op1_e3_l_1146E7);
          real op1_e3_l_1446FF#3 = λ(T0[])<(T0)^3> (z46DC);
          real op1_e3_l_204701#8 = λ(T0[])<Sine(T0)> (op1_e3_l_946E6);
          real op1_e3_l_214702#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t46DE,op1_e3_l_1446FF,op1_e3_l_1146E7);
          real op1_e3_l_224703#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t46DE,z46DC,op1_e3_l_204701);
          real _t46FA#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_214702,op1_e3_l_224703);
          tensor[3] g470E#1 = <tensor[3]>[_t46E2,_t46EE,_t46FA];
          int _t4710#1 = -4;
          real _t4712#6 = IntToReal(_t4710);
          real op1_e3_l_24471B#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t4712,op1_e3_l_646E3,op1_e3_l_846E5,op1_e3_l_204701);
          real op1_e3_l_25471C#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t46DE,op1_e3_l_846E5,op1_e3_l_1146E7);
          real _t4714#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_24471B,op1_e3_l_25471C);
          real _t4726#2 = λ(T0[],T1[],T2[],T3[],T4[])<(T0 * T1 * T2 * T3 * T4)> (_t4712,x46D8,y46DA,op1_e3_l_846E5,op1_e3_l_204701);
          real op1_e3_l_23473A#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t4712,x46D8,op1_e3_l_1446FF,op1_e3_l_204701);
          real op1_e3_l_24473B#1 = λ(T0[],T1[],T2[],T3[])<(T2 * T0 * T1 * T3)> (x46D8,z46DC,_t40F9,op1_e3_l_1146E7);
          real _t4732#2 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_23473A,op1_e3_l_24473B);
          tensor[3] _t4746#1 = <tensor[3]>[_t4714,_t4726,_t4732];
          real op1_e3_l_24474F#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t4712,op1_e3_l_746E4,op1_e3_l_846E5,op1_e3_l_204701);
          real _t4748#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_24474F,op1_e3_l_25471C);
          real op1_e3_l_234762#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t4712,y46DA,op1_e3_l_1446FF,op1_e3_l_204701);
          real op1_e3_l_244763#1 = λ(T0[],T1[],T2[],T3[])<(T2 * T0 * T1 * T3)> (y46DA,z46DC,_t40F9,op1_e3_l_1146E7);
          real _t475A#2 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_234762,op1_e3_l_244763);
          tensor[3] _t476E#1 = <tensor[3]>[_t4726,_t4748,_t475A];
          real _t4770#1 = 0.1e2;
          real op1_e3_l_184777#1 = λ(T0[])<(T0)^4> (z46DC);
          real op1_e3_l_31477A#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t4712,op1_e3_l_184777,op1_e3_l_204701);
          real op1_e3_l_32477B#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t4770,op1_e3_l_846E5,op1_e3_l_1146E7);
          real op1_e3_l_33477C#1 = λ(T0[],T1[])<(T0 * T1)> (_t46DE,op1_e3_l_204701);
          real _t4772#1 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_31477A,op1_e3_l_32477B,op1_e3_l_33477C);
          tensor[3] _t4788#1 = <tensor[3]>[_t4732,_t475A,_t4772];
          tensor[3,3] hess478A#1 = <tensor[3,3]>[_t4746,_t476E,_t4788];
          (real[3] _t478C#1,tensor[3][3] evecs478D#0) = EigenVecs3x3(hess478A);
          real _t478F#1 = Subscript<real[3]>(_t478C,_t46E0);
          real op1_e3_l_34792#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (g470E);
          real op1_e3_l_44793#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_34792);
          real op1_e3_l_54794#1 = λ(T0[])<Neg(T0)> (_t478F);
          real op1_e3_l_64795#1 = λ(T0[],T1[])<(T0 + T1)> (fBias4098,op1_e3_l_44793);
          real str4791#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_54794,op1_e3_l_64795);
          bool _t479B#1 = GT<real>(str4791,fStrTh4094);
          if _t479B then goto ASSIGN479F else goto JOIN47A6
        ASSIGN479F:  preds = [COND479D]
          bool _t479E#1 = GTE<real>(_t40EF,fMaskTh4096);
          if _t479E then goto ASSIGN47A2 else goto JOIN47A4
        ASSIGN47A2:  preds = [COND47A0]
          bool _t47A1#1 = true;
          goto JOIN47A4
        JOIN47A4:  preds = [ASSIGN47A2,COND47A0]
          bool _t47A3#1 = phi(_t47A1,vv40D2)
          goto JOIN47A6
        JOIN47A6:  preds = [JOIN47A4,COND479D]
          bool _t47A5#1 = phi(_t47A3,vv40D2)
          goto JOIN47A8
        JOIN47A8:  preds = [JOIN47A6,COND46D7]
          bool _t47A7#1 = phi(_t47A5,vv40D2)
          if _t47A7 then goto NEW47AA else goto JOIN47B0
        NEW47AA:  preds = [COND47A9]
          new point(npos4683,hh40C2);
          int _t47AB#1 = 1;
          int born47AD#1 = IAdd(born40CE,_t47AB);
          goto JOIN47B0
        JOIN47B0:  preds = [ASSIGN47AE,COND47A9]
          int born47AF#1 = phi(born47AD,born40CE)
          if _t4691 then goto JOIN47B3 else goto JOIN47B3
        JOIN47B3:  preds = [COND47B1,COND47B1]
          bool _t47B2#1 = phi(vv40D2,vv40D2)
          if _t47B2 then goto ASSIGN47B6 else goto ASSIGN4BCF
        ASSIGN47B6:  preds = [COND47B4]
          bool _t47B5#1 = true;
          goto JOIN47B9
        JOIN47B9:  preds = [ASSIGN47B6,ASSIGN4BD0]
          bool _t47B7#1 = phi(_t47B5,_t47B8)
          if _t47B7 then goto ASSIGN47BC else goto JOIN47C7
        ASSIGN47BC:  preds = [COND47BA]
          string _t47BB#1 = "(i#";
          string _t47BD#1 = " @ ";
          string _t47BF#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID40C0,_t47BB,iter40BC,_t47BD,pos446C,_t47BF);
          string _t47C2#1 = "nn=0; after birthing mvmt=";
          string _t47C4#1 = "\n";
          Print<[string,real,string]>(_t47C2,mvmt40CA,_t47C4);
          goto JOIN47C7
        JOIN47C7:  preds = [MASSIGN47C6,COND47BA]
          self.pos = pos446C;
          self._pos = pos446C;
          self.step = step446A;
          self.trav = trav4470;
          self.born = born47AF;
          active
          goto JOIN47CF
        JOIN47CF:  preds = [*ACTIVE47CD,COND4575]
          int born47CE#9 = phi(born40CE)
          tensor[3,3] _t47D0#1 = fPerp45A3 (pos446C);
          tensor[3] op1_e3_l_347D3#4 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (_t47D0,force44FF);
          tensor[3] es47D2#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (hh40C2,op1_e3_l_347D3);
          real op1_e3_l_547D8#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_347D3,op1_e3_l_347D3);
          real op1_e3_l_647D9#1 = λ(T0[],T1[])<(T0 * T0 * T1)> (hh40C2,op1_e3_l_547D8);
          real _t47D6#2 = λ(T0[])<Sqrt(T0)> (op1_e3_l_647D9);
          bool _t47DE#1 = GT<real>(_t47D6,tipd409A);
          if _t47DE then goto ASSIGN4CFA else goto JOIN47FB
        ASSIGN4CFA:  preds = [COND47E0]
          real op1_e3_l_1047E6#2 = λ(T0[],T1[])<(T0) / ( T1)> (tipd409A,_t47D6);
          real hh47E1#1 = λ(T0[],T1[])<(T0 * T1)> (hh40C2,op1_e3_l_1047E6);
          tensor[3] es47ED#1 = λ(T0[],T1[],T2[3])<(T0 * T1 * T2_{i0})>_{3} (hh40C2,op1_e3_l_1047E6,op1_e3_l_347D3);
          goto JOIN47FB
        JOIN47FB:  preds = [ASSIGN4CFB,COND47E0]
          tensor[3] es47F9#6 = phi(es47ED,es47D2)
          real hh47FA#2 = phi(hh47E1,hh40C2)
          tensor[3] _t47FC#1 = λ(T0[3],T1[3],T2[3])<(T0_{i0} + T2_{i0} + T1_{i0})>_{3} (pos40BE,es47F9,step446A);
          tensor[3] _t4800#2 = fStep4302 (_t47FC);
          tensor[3] fs4802#4 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs40AE,_t4800);
          real op1_e3_l_54805#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (_t4800);
          real op1_e3_l_64806#1 = λ(T0[],T1[])<(T0 * T0 * T1)> (sfs40AE,op1_e3_l_54805);
          real op1_e3_l_74807#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (es47F9);
          real op1_e3_l_84808#1 = λ(T0[],T1[])<(T0 * T1)> (fsEps40A8,tipd409A);
          real op1_e3_l_94809#2 = λ(T0[])<Sqrt(T0)> (op1_e3_l_74807);
          real op1_e3_l_10480A#2 = λ(T0[])<Sqrt(T0)> (op1_e3_l_64806);
          real op1_e3_l_11480B#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_84808,op1_e3_l_94809);
          real _t4804#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_10480A,op1_e3_l_11480B);
          real _t4814#3 = 0.5e0;
          bool _t4816#1 = GT<real>(_t4804,_t4814);
          if _t4816 then goto ASSIGN481A else goto JOIN4854
        ASSIGN481A:  preds = [COND4818]
          real hh4819#2 = λ(T0[],T1[])<(T0 * T1)> (hh47FA,_t4814);
          bool _t481B#1 = GT<int>(verb40AC,_t4460);
          if _t481B then goto JOIN481F else goto JOIN481F
        JOIN481F:  preds = [COND481D,COND481D]
          bool _t481E#1 = phi(vv40D2,vv40D2)
          if _t481E then goto ASSIGN4822 else goto ASSIGN4BCC
        ASSIGN4822:  preds = [COND4820]
          bool _t4821#1 = true;
          goto JOIN4825
        JOIN4825:  preds = [ASSIGN4822,ASSIGN4BCD]
          bool _t4823#1 = phi(_t4821,_t4824)
          if _t4823 then goto ASSIGN4828 else goto JOIN484B
        ASSIGN4828:  preds = [COND4826]
          string _t4827#1 = "(i#";
          string _t4829#1 = " @ ";
          string _t482B#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID40C0,_t4827,iter40BC,_t4829,pos446C,_t482B);
          string _t482E#1 = "nn=";
          string _t4830#1 = "; |fs|/|es|=";
          real _t4832#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_10480A,op1_e3_l_94809);
          string _t483E#1 = " > 0.5; trying again with hh=";
          string _t4840#1 = "; mvmt=";
          string _t4842#3 = "\n";
          Print<[string,int,string,real,string,real,string,real,string]>(_t482E,nn4514,_t4830,_t4832,_t483E,hh4819,_t4840,mvmt40CA,_t4842);
          string _t4845#1 = "        fs=";
          Print<[string,tensor[3],string]>(_t4845,fs4802,_t4842);
          string _t4848#1 = "        es=";
          Print<[string,tensor[3],string]>(_t4848,es47F9,_t4842);
          goto JOIN484B
        JOIN484B:  preds = [MASSIGN484A,COND4826]
          self.pos = pos446C;
          self._pos = pos446C;
          self.hh = hh4819;
          self.step = step446A;
          self.trav = trav4470;
          self.born = born47CE;
          active
          goto JOIN4854
        JOIN4854:  preds = [*ACTIVE4852,COND4818]
          real hh4853#2 = phi(hh47FA)
          tensor[3] pos4855#7 = λ(T0[3],T1[3],T2[3],T3[3])<(T0_{i0} + T2_{i0} + T3_{i0} + T1_{i0})>_{3} (pos40BE,es47F9,step446A,fs4802);
          point[] _t485B#1 = SphereQuery<3,point>(pos4855,rad40BA);
        FOREACH485E:  preds = [ASSIGN485C,NEXT48C4]
          foreach (P485D in _t485B) on exit goto ASSIGN48F8
            tensor[3] mno48B5#2 = phi(_t40F1,mno48B4)
            real newE48B0#6 = phi(_t40EF,newE48AF)
            int nn48C2#9 = phi(_t4460,nn48C1)
            real closest443E#3 = phi(rad40BA,closest48B2)
          tensor[3] _t485F#1 = P485D.pos;
          tensor[3] op1_e3_l_134865#3 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (_t485F,pos4855);
          real op1_e3_l_154866#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_134865,op1_e3_l_134865);
          real _t4861#2 = λ(T0[])<Sqrt(T0)> (op1_e3_l_154866);
          real _t486D#7 = λ(T0[],T1[])<(T1) / ( T0)> (rad40BA,_t4861);
          real _t487B#1 = 0.2e1;
          real _t487D#1 = 0.3e1;
          real _t487F#2 = λ(T0[],T1[])<(T0) / ( T1)> (_t487B,_t487D);
          bool _t4881#1 = LT<real>(_t486D,_t487F);
          if _t4881 then goto ASSIGN4885 else goto ASSIGN48C6
        ASSIGN4885:  preds = [COND4883]
          real _t4884#1 = 0.1e1;
          real _t4886#1 = -0.5646e1;
          real _t4888#1 = 0.119835e2;
          real _t488A#1 = -0.113535e2;
          real _t488C#1 = 0.40550625e1;
          real op1_e3_l_784896#1 = λ(T0[],T1[])<(T0 * T1)> (_t488C,_t486D);
          real op1_e3_l_804897#1 = λ(T0[],T1[])<(T0 + T1)> (_t488A,op1_e3_l_784896);
          real op1_e3_l_814898#1 = λ(T0[],T1[])<(T0 * T1)> (_t486D,op1_e3_l_804897);
          real op1_e3_l_834899#1 = λ(T0[],T1[])<(T0 + T1)> (_t4888,op1_e3_l_814898);
          real op1_e3_l_84489A#1 = λ(T0[],T1[])<(T0 * T1)> (_t486D,op1_e3_l_834899);
          real op1_e3_l_86489B#1 = λ(T0[],T1[])<(T0 + T1)> (_t4886,op1_e3_l_84489A);
          real op1_e3_l_87489C#1 = λ(T0[],T1[])<(T0 * T1)> (_t486D,op1_e3_l_86489B);
          real _t488E#1 = λ(T0[],T1[])<(T0 + T1)> (_t4884,op1_e3_l_87489C);
          goto JOIN48AE
        JOIN48AE:  preds = [ASSIGN48AB,JOIN48F6]
          real _t48AC#1 = phi(_t488E,_t48AD)
          real newE48AF#1 = λ(T0[],T1[])<(T0 + T1)> (newE48B0,_t48AC);
          real closest48B2#1 = Min<real>(closest443E,_t4861);
          tensor[3] mno48B4#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (mno48B5,op1_e3_l_134865);
          int _t48BF#1 = 1;
          int nn48C1#1 = IAdd(nn48C2,_t48BF);
          goto FOREACH485E
        ASSIGN48C6:  preds = [COND4883]
          real _t48C5#1 = 0.1e1;
          bool _t48C7#1 = LT<real>(_t486D,_t48C5);
          if _t48C7 then goto ASSIGN48CB else goto JOIN48F6
        ASSIGN48CB:  preds = [COND48C9]
          real _t48CA#1 = -0.1e-2;
          real _t48CC#1 = 0.9e-1;
          real _t48CE#1 = -0.54e0;
          real _t48D0#1 = 0.1215e1;
          real _t48D2#1 = 0.972e0;
          real op1_e3_l_6748DD#5 = λ(T0[],T1[])<(T0) - (T1)> (_t486D,_t487F);
          real op1_e3_l_6848DE#1 = λ(T0[],T1[])<(T0 * T1)> (_t48D2,op1_e3_l_6748DD);
          real op1_e3_l_8148DF#1 = λ(T0[],T1[])<(T0) - (T1)> (_t48D0,op1_e3_l_6848DE);
          real op1_e3_l_8348E0#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_8148DF,op1_e3_l_6748DD);
          real op1_e3_l_9648E1#1 = λ(T0[],T1[])<(T0 + T1)> (_t48CE,op1_e3_l_8348E0);
          real op1_e3_l_9848E2#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_9648E1,op1_e3_l_6748DD);
          real op1_e3_l_12348E3#1 = λ(T0[],T1[])<(T0 + T1)> (_t48CC,op1_e3_l_9848E2);
          real op1_e3_l_12648E4#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (op1_e3_l_12348E3,op1_e3_l_6748DD,op1_e3_l_6748DD);
          real _t48D4#1 = λ(T0[],T1[])<(T0 + T1)> (_t48CA,op1_e3_l_12648E4);
          goto JOIN48F6
        JOIN48F6:  preds = [ASSIGN48F5,COND48C9]
          real _t48AD#1 = phi(_t48D4,_t40EF)
          goto JOIN48AE
        ASSIGN48F8:  preds = [FOREACH485E]
          real _t48F7#2 = IntToReal(nn48C2);
          bool _t48F9#2 = GT<int>(verb40AC,_t4460);
          if _t48F9 then goto JOIN48FD else goto JOIN48FD
        JOIN48FD:  preds = [COND48FB,COND48FB]
          bool _t48FC#1 = phi(vv40D2,vv40D2)
          if _t48FC then goto ASSIGN4900 else goto ASSIGN4BC9
        ASSIGN4900:  preds = [COND48FE]
          bool _t48FF#1 = true;
          goto JOIN4903
        JOIN4903:  preds = [ASSIGN4900,ASSIGN4BCA]
          bool _t4901#1 = phi(_t48FF,_t4902)
          if _t4901 then goto ASSIGN4906 else goto JOIN4915
        ASSIGN4906:  preds = [COND4904]
          string _t4905#1 = "(i#";
          string _t4907#1 = " @ ";
          string _t4909#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID40C0,_t4905,iter40BC,_t4907,pos4855,_t4909);
          string _t490C#1 = "nn=";
          string _t490E#1 = "; oldE=";
          string _t4910#1 = " newE=";
          string _t4912#1 = "\n";
          Print<[string,int,string,real,string,real,string]>(_t490C,nn48C2,_t490E,oldE44D6,_t4910,newE48B0,_t4912);
          goto JOIN4915
        JOIN4915:  preds = [MASSIGN4914,COND4904]
          real _t4916#2 = λ(T0[],T1[])<(T0) - (T1)> (newE48B0,oldE44D6);
          tensor[3] _t4918#2 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (pos4855,pos446C);
          tensor[3] op1_e3_l_174928#1 = λ(T0[3])<Neg(T0_{i0})>_{3} (force44FF);
          real op1_e3_l_184929#2 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (_t4918,op1_e3_l_174928);
          real _t4922#1 = λ(T0[],T1[])<(T0 * T1)> (gdeTest40A2,op1_e3_l_184929);
          bool _t4932#1 = GT<real>(_t4916,_t4922);
          if _t4932 then goto ASSIGN4936 else goto JOIN4990
        ASSIGN4936:  preds = [COND4934]
          real hh4935#3 = λ(T0[],T1[])<(T0 * T1)> (hh4853,gdeBack40A4);
          bool _t4937#1 = EQ<real>(_t40EF,hh4935);
          if _t4937 then goto ASSIGN493B else goto JOIN4945
        ASSIGN493B:  preds = [COND4939]
          string _t493A#1 = "(i#";
          string _t493C#1 = " @ ";
          string _t493E#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID40C0,_t493A,iter40BC,_t493C,pos4855,_t493E);
          string _t4941#1 = "backtracked all the way to hh=0\n";
          Print<[string]>(_t4941);
          die
          goto JOIN4945
        JOIN4945:  preds = [*DIE4944,COND4939]
          if _t48F9 then goto JOIN4948 else goto JOIN4948
        JOIN4948:  preds = [COND4946,COND4946]
          bool _t4947#1 = phi(vv40D2,vv40D2)
          if _t4947 then goto ASSIGN494B else goto ASSIGN4BC6
        ASSIGN494B:  preds = [COND4949]
          bool _t494A#1 = true;
          goto JOIN494E
        JOIN494E:  preds = [ASSIGN494B,ASSIGN4BC7]
          bool _t494C#1 = phi(_t494A,_t494D)
          if _t494C then goto ASSIGN4951 else goto JOIN4986
        ASSIGN4951:  preds = [COND494F]
          string _t4950#1 = "(i#";
          string _t4952#1 = " @ ";
          string _t4954#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID40C0,_t4950,iter40BC,_t4952,pos4855,_t4954);
          string _t4957#1 = "nn=";
          string _t4959#1 = "; oldE=";
          string _t495B#1 = " newE=";
          string _t495D#1 = "; backtracking; hh=";
          string _t495F#1 = "; mvmt=";
          string _t4961#7 = "\n";
          Print<[string,int,string,real,string,real,string,real,string,real,string]>(_t4957,nn48C2,_t4959,oldE44D6,_t495B,newE48B0,_t495D,hh4935,_t495F,mvmt40CA,_t4961);
          string _t4964#1 = "      fs=";
          Print<[string,tensor[3],string]>(_t4964,fs4802,_t4961);
          string _t4967#1 = "      es=";
          Print<[string,tensor[3],string]>(_t4967,es47F9,_t4961);
          string _t496A#1 = "      newE - oldE=";
          Print<[string,real,string]>(_t496A,_t4916,_t4961);
          string _t496D#1 = "      force=";
          Print<[string,tensor[3],string]>(_t496D,force44FF,_t4961);
          string _t4970#1 = "      dpos=";
          Print<[string,tensor[3],string]>(_t4970,_t4918,_t4961);
          string _t4973#1 = "      0.5*(pos - oldpos).(-force)=";
          real _t4975#1 = λ(T0[],T1[])<(T0 * T1)> (_t4814,op1_e3_l_184929);
          Print<[string,real,string]>(_t4973,_t4975,_t4961);
          goto JOIN4986
        JOIN4986:  preds = [MASSIGN4985,COND494F]
          self.pos = pos446C;
          self._pos = pos446C;
          self.hh = hh4935;
          self.step = step446A;
          self.trav = trav4470;
          self.closest = closest443E;
          self.born = born47CE;
          active
          goto JOIN4990
        JOIN4990:  preds = [*ACTIVE498E,COND4934]
          real hh498F#1 = phi(hh4853)
          tensor[3] pos444A#8 = phi(pos4855)
          real hh4448#2 = λ(T0[],T1[])<(T0 * T1)> (hh498F,gdeOppor40A6);
          tensor[3] step4446#3 = λ(T0[3],T1[3],T2[3])<(T1_{i0} + T2_{i0} + T0_{i0})>_{3} (es47F9,step446A,fs4802);
          real op1_e3_l_12499B#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (step4446,step4446);
          real op1_e3_l_13499C#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_12499B);
          real _t4997#4 = λ(T0[],T1[])<(T1) / ( T0)> (tipd409A,op1_e3_l_13499C);
          real trav4442#1 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (trav40C8,op1_e3_l_74474,_t4997);
          real op1_e3_l_2549BE#1 = λ(T0[],T1[])<(T0) - (T1)> (mvmt40CA,_t4997);
          real op1_e3_l_2749BF#1 = λ(T0[],T1[])<(T0 * T1)> (hist40B0,op1_e3_l_2549BE);
          real mvmt4440#1 = λ(T0[],T1[])<(T0 + T1)> (_t4997,op1_e3_l_2749BF);
          bool _t49C9#1 = LT<real>(_t4997,pcmvEps40AA);
          if _t49C9 then goto ASSIGN49CD else goto JOIN4B80
        ASSIGN49CD:  preds = [COND49CB]
          bool _t49CC#3 = GT<int>(pcp40B2,_t4460);
          if _t49CC then goto ASSIGN49D0 else goto JOIN49D9
        ASSIGN49D0:  preds = [COND49CE]
          bool _t49CF#1 = GT<int>(iter40BC,_t4460);
          if _t49CF then goto ASSIGN49D3 else goto JOIN49D7
        ASSIGN49D3:  preds = [COND49D1]
          int _t49D2#1 = IMod(iter40BC,pcp40B2);
          bool _t49D4#1 = EQ<int>(_t4460,_t49D2);
          goto JOIN49D7
        JOIN49D7:  preds = [ASSIGN49D5,COND49D1]
          bool _t49D6#1 = phi(_t49D4,vv40D2)
          goto JOIN49D9
        JOIN49D9:  preds = [JOIN49D7,COND49CE]
          bool _t49D8#1 = phi(_t49D6,vv40D2)
          if _t49D8 then goto ASSIGN49DC else goto JOIN49E8
        ASSIGN49DC:  preds = [COND49DA]
          int _t49DB#1 = IDiv(iter40BC,pcp40B2);
          int _t49DD#2 = 2;
          int _t49DF#1 = IMod(_t49DB,_t49DD);
          int _t49E1#1 = IMul(_t49DF,_t49DD);
          int _t49E3#1 = 1;
          int _t49E5#1 = ISub(_t49E1,_t49E3);
          goto JOIN49E8
        JOIN49E8:  preds = [ASSIGN49E6,COND49DA]
          int _t49E7#1 = phi(_t49E5,_t4460)
          bool _t49E9#1 = NEQ<int>(_t49E7,_t4460);
          if _t49E9 then goto COND49EC else goto JOIN4B7F
        COND49EC:  preds = [COND49EB]
          if _t49CC then goto ASSIGN49EE else goto JOIN49F7
        ASSIGN49EE:  preds = [COND49EC]
          bool _t49ED#1 = GT<int>(iter40BC,_t4460);
          if _t49ED then goto ASSIGN49F1 else goto JOIN49F5
        ASSIGN49F1:  preds = [COND49EF]
          int _t49F0#1 = IMod(iter40BC,pcp40B2);
          bool _t49F2#1 = EQ<int>(_t4460,_t49F0);
          goto JOIN49F5
        JOIN49F5:  preds = [ASSIGN49F3,COND49EF]
          bool _t49F4#1 = phi(_t49F2,vv40D2)
          goto JOIN49F7
        JOIN49F7:  preds = [JOIN49F5,COND49EC]
          bool _t49F6#1 = phi(_t49F4,vv40D2)
          if _t49F6 then goto ASSIGN49FA else goto JOIN4A06
        ASSIGN49FA:  preds = [COND49F8]
          int _t49F9#1 = IDiv(iter40BC,pcp40B2);
          int _t49FB#2 = 2;
          int _t49FD#1 = IMod(_t49F9,_t49FB);
          int _t49FF#1 = IMul(_t49FD,_t49FB);
          int _t4A01#1 = 1;
          int _t4A03#1 = ISub(_t49FF,_t4A01);
          goto JOIN4A06
        JOIN4A06:  preds = [ASSIGN4A04,COND49F8]
          int _t4A05#1 = phi(_t4A03,_t4460)
          bool _t4A07#1 = GT<int>(_t4A05,_t4460);
          if _t4A07 then goto ASSIGN4A0B else goto JOIN4A17
        ASSIGN4A0B:  preds = [COND4A09]
          bool _t4A0A#1 = LT<real>(newE48B0,_t40EF);
          if _t4A0A then goto ASSIGN4A0E else goto JOIN4A15
        ASSIGN4A0E:  preds = [COND4A0C]
          bool _t4A0D#1 = LT<int>(nn48C2,nnmin40B6);
          if _t4A0D then goto ASSIGN4A11 else goto JOIN4A13
        ASSIGN4A11:  preds = [COND4A0F]
          bool _t4A10#1 = LT<int>(born47CE,nnmax40B8);
          goto JOIN4A13
        JOIN4A13:  preds = [ASSIGN4A11,COND4A0F]
          bool _t4A12#1 = phi(_t4A10,vv40D2)
          goto JOIN4A15
        JOIN4A15:  preds = [JOIN4A13,COND4A0C]
          bool _t4A14#1 = phi(_t4A12,vv40D2)
          goto JOIN4A17
        JOIN4A17:  preds = [JOIN4A15,COND4A09]
          bool _t4A16#1 = phi(_t4A14,vv40D2)
          if _t4A16 then goto ASSIGN4A1F else goto COND4B81
        ASSIGN4A1F:  preds = [COND4A18]
          tensor[3] op1_e3_l_64A1A#3 = λ(T0[3],T1[])<(T0_{i0}) / ( T1)>_{3} (mno48B5,_t48F7);
          real op1_e3_l_84A1B#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_64A1A,op1_e3_l_64A1A);
          real op1_e3_l_94A1C#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_84A1B);
          real op1_e3_l_114A1D#1 = λ(T0[])<(1) / ( T0)> (op1_e3_l_94A1C);
          tensor[3] op1_e3_l_124A1E#1 = λ(T0[],T1[3],T2[])<(T0 * T1_{i0} * T2)>_{3} (tipd409A,op1_e3_l_64A1A,op1_e3_l_114A1D);
          tensor[3] npos4A19#3 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (pos444A,op1_e3_l_124A1E);
          tensor[3] _t4A25#1 = fStep4302 (npos4A19);
          tensor[3] op1_e3_l_164A2E#2 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs40AE,_t4A25);
          tensor[3] npos4A27#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (npos4A19,op1_e3_l_164A2E);
          tensor[3] _t4A37#1 = fStep4302 (npos4A27);
          tensor[3] op1_e3_l_194A41#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs40AE,_t4A37);
          tensor[3] npos4A39#6 = λ(T0[3],T1[3],T2[3])<(T0_{i0} + T1_{i0} + T2_{i0})>_{3} (npos4A19,op1_e3_l_164A2E,op1_e3_l_194A41);
          bool birth4A4B#4 = true;
          int _t4A4D#2 = 2;
          bool _t4A4F#1 = EQ<int>(fDim40B4,_t4A4D);
          if _t4A4F then goto ASSIGN4A53 else goto JOIN4A81
        ASSIGN4A53:  preds = [COND4A51]
          int _t4A52#1 = 4;
          bool _t4A54#1 = GTE<int>(nn48C2,_t4A52);
          if _t4A54 then goto ASSIGN4A58 else goto JOIN4A7F
        ASSIGN4A58:  preds = [COND4A56]
          real _t4A57#1 = λ(T0[],T1[])<(T0 * T1)> (tipd409A,mabd409C);
          point[] _t4A59#1 = SphereQuery<3,point>(npos4A39,_t4A57);
        FOREACH4A5C:  preds = [ASSIGN4A5A,NEXT4A5D]
          foreach (P4A5B in _t4A59) on exit goto COND4A5F
            bool birth4A5E#2 = phi(birth4A4B,vv40D2)
          goto FOREACH4A5C
        COND4A5F:  preds = [FOREACH4A5C]
          if birth4A5E then goto ASSIGN4A61 else goto JOIN4A7D
        ASSIGN4A61:  preds = [COND4A5F]
          real _t4A60#1 = TensorIndex<tensor[3],[0]>(pos444A);
          real _t4A62#1 = urnd403D (_t4A60);
          real _t4A64#1 = TensorIndex<tensor[3],[1]>(pos444A);
          real _t4A66#1 = urnd403D (_t4A64);
          real _t4A68#1 = TensorIndex<tensor[3],[2]>(pos444A);
          real _t4A6A#1 = urnd403D (_t4A68);
          real _t4A6C#1 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (_t4A62,_t4A66,_t4A6A);
          real _t4A6E#1 = 0.1e1;
          real _t4A70#1 = MathFn<fmod>(_t4A6C,_t4A6E);
          int _t4A72#1 = ISub(nnmin40B6,nn48C2);
          real _t4A74#1 = IntToReal(_t4A72);
          real _t4A76#1 = IntToReal(nnmin40B6);
          real _t4A78#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t4A74,_t4A76);
          bool birth4A7A#1 = LT<real>(_t4A70,_t4A78);
          goto JOIN4A7D
        JOIN4A7D:  preds = [ASSIGN4A7B,COND4A5F]
          bool birth4A7C#1 = phi(birth4A7A,birth4A5E)
          goto JOIN4A7F
        JOIN4A7F:  preds = [JOIN4A7D,COND4A56]
          bool birth4A7E#1 = phi(birth4A7C,birth4A4B)
          goto JOIN4A81
        JOIN4A81:  preds = [JOIN4A7F,COND4A51]
          bool birth4A80#1 = phi(birth4A7E,birth4A4B)
          if birth4A80 then goto ASSIGN4D09 else goto JOIN4B7B
        ASSIGN4D09:  preds = [COND4A82]
          tensor[3] op1_e3_l_334A8D#2 = λ(T0[3],T1[3])<(T1_{i0}) - (T0_{i0})>_{3} (_t40F1,npos4A39);
          real op1_e3_l_354A8E#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_334A8D,op1_e3_l_334A8D);
          real _t4A83#2 = λ(T0[])<Sqrt(T0)> (op1_e3_l_354A8E);
          bool _t4A9B#1 = LT<real>(_t4A83,_t40F9);
          if _t4A9B then goto ASSIGN4A9F else goto JOIN4AA3
        ASSIGN4A9F:  preds = [COND4A9D]
          real _t4A9E#1 = 0.3e1;
          bool _t4AA0#1 = GT<real>(_t4A83,_t4A9E);
          goto JOIN4AA3
        JOIN4AA3:  preds = [ASSIGN4AA1,COND4A9D]
          bool _t4AA2#1 = phi(_t4AA0,vv40D2)
          if _t4AA2 then goto ASSIGN4AA6 else goto JOIN4B71
        ASSIGN4AA6:  preds = [COND4AA4]
          real x4AA5#5 = TensorIndex<tensor[3],[0]>(npos4A39);
          real y4AA7#5 = TensorIndex<tensor[3],[1]>(npos4A39);
          real z4AA9#6 = TensorIndex<tensor[3],[2]>(npos4A39);
          real _t4AAB#6 = 0.2e1;
          real op1_e3_l_64AAE#2 = λ(T0[])<(T0)^2> (x4AA5);
          real op1_e3_l_74AAF#2 = λ(T0[])<(T0)^2> (y4AA7);
          real op1_e3_l_84AB0#8 = λ(T0[])<(T0)^2> (z4AA9);
          real op1_e3_l_94AB1#2 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_64AAE,op1_e3_l_74AAF,op1_e3_l_84AB0);
          real op1_e3_l_114AB2#7 = λ(T0[])<Cosine(T0)> (op1_e3_l_94AB1);
          real _t4AAD#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t4AAB,x4AA5,op1_e3_l_84AB0,op1_e3_l_114AB2);
          real _t4AB9#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t4AAB,y4AA7,op1_e3_l_84AB0,op1_e3_l_114AB2);
          real op1_e3_l_144ACA#3 = λ(T0[])<(T0)^3> (z4AA9);
          real op1_e3_l_204ACC#8 = λ(T0[])<Sine(T0)> (op1_e3_l_94AB1);
          real op1_e3_l_214ACD#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t4AAB,op1_e3_l_144ACA,op1_e3_l_114AB2);
          real op1_e3_l_224ACE#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t4AAB,z4AA9,op1_e3_l_204ACC);
          real _t4AC5#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_214ACD,op1_e3_l_224ACE);
          tensor[3] g4AD9#1 = <tensor[3]>[_t4AAD,_t4AB9,_t4AC5];
          int _t4ADB#1 = -4;
          real _t4ADD#6 = IntToReal(_t4ADB);
          real op1_e3_l_244AE6#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t4ADD,op1_e3_l_64AAE,op1_e3_l_84AB0,op1_e3_l_204ACC);
          real op1_e3_l_254AE7#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t4AAB,op1_e3_l_84AB0,op1_e3_l_114AB2);
          real _t4ADF#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_244AE6,op1_e3_l_254AE7);
          real _t4AF1#2 = λ(T0[],T1[],T2[],T3[],T4[])<(T0 * T1 * T2 * T3 * T4)> (_t4ADD,x4AA5,y4AA7,op1_e3_l_84AB0,op1_e3_l_204ACC);
          real op1_e3_l_234B05#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t4ADD,x4AA5,op1_e3_l_144ACA,op1_e3_l_204ACC);
          real op1_e3_l_244B06#1 = λ(T0[],T1[],T2[],T3[])<(T2 * T0 * T1 * T3)> (x4AA5,z4AA9,_t40F9,op1_e3_l_114AB2);
          real _t4AFD#2 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_234B05,op1_e3_l_244B06);
          tensor[3] _t4B11#1 = <tensor[3]>[_t4ADF,_t4AF1,_t4AFD];
          real op1_e3_l_244B1A#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t4ADD,op1_e3_l_74AAF,op1_e3_l_84AB0,op1_e3_l_204ACC);
          real _t4B13#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_244B1A,op1_e3_l_254AE7);
          real op1_e3_l_234B2D#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t4ADD,y4AA7,op1_e3_l_144ACA,op1_e3_l_204ACC);
          real op1_e3_l_244B2E#1 = λ(T0[],T1[],T2[],T3[])<(T2 * T0 * T1 * T3)> (y4AA7,z4AA9,_t40F9,op1_e3_l_114AB2);
          real _t4B25#2 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_234B2D,op1_e3_l_244B2E);
          tensor[3] _t4B39#1 = <tensor[3]>[_t4AF1,_t4B13,_t4B25];
          real _t4B3B#1 = 0.1e2;
          real op1_e3_l_184B42#1 = λ(T0[])<(T0)^4> (z4AA9);
          real op1_e3_l_314B45#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t4ADD,op1_e3_l_184B42,op1_e3_l_204ACC);
          real op1_e3_l_324B46#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t4B3B,op1_e3_l_84AB0,op1_e3_l_114AB2);
          real op1_e3_l_334B47#1 = λ(T0[],T1[])<(T0 * T1)> (_t4AAB,op1_e3_l_204ACC);
          real _t4B3D#1 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_314B45,op1_e3_l_324B46,op1_e3_l_334B47);
          tensor[3] _t4B53#1 = <tensor[3]>[_t4AFD,_t4B25,_t4B3D];
          tensor[3,3] hess4B55#1 = <tensor[3,3]>[_t4B11,_t4B39,_t4B53];
          (real[3] _t4B57#1,tensor[3][3] evecs4B58#0) = EigenVecs3x3(hess4B55);
          real _t4B5A#1 = Subscript<real[3]>(_t4B57,_t4A4D);
          real op1_e3_l_34B5D#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (g4AD9);
          real op1_e3_l_44B5E#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_34B5D);
          real op1_e3_l_54B5F#1 = λ(T0[])<Neg(T0)> (_t4B5A);
          real op1_e3_l_64B60#1 = λ(T0[],T1[])<(T0 + T1)> (fBias4098,op1_e3_l_44B5E);
          real str4B5C#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_54B5F,op1_e3_l_64B60);
          bool _t4B66#1 = GT<real>(str4B5C,fStrTh4094);
          if _t4B66 then goto ASSIGN4B6A else goto JOIN4B6F
        ASSIGN4B6A:  preds = [COND4B68]
          bool _t4B69#1 = GTE<real>(_t40EF,fMaskTh4096);
          if _t4B69 then goto JOIN4B6D else goto JOIN4B6D
        JOIN4B6D:  preds = [COND4B6B,COND4B6B]
          bool _t4B6C#1 = phi(birth4A4B,vv40D2)
          goto JOIN4B6F
        JOIN4B6F:  preds = [JOIN4B6D,COND4B68]
          bool _t4B6E#1 = phi(_t4B6C,vv40D2)
          goto JOIN4B71
        JOIN4B71:  preds = [JOIN4B6F,COND4AA4]
          bool _t4B70#1 = phi(_t4B6E,vv40D2)
          if _t4B70 then goto NEW4B73 else goto JOIN4B79
        NEW4B73:  preds = [COND4B72]
          new point(npos4A39,hh4448);
          int _t4B74#1 = 1;
          int born4B76#1 = IAdd(born47CE,_t4B74);
          goto JOIN4B79
        JOIN4B79:  preds = [ASSIGN4B77,COND4B72]
          int born4B78#1 = phi(born4B76,born47CE)
          goto JOIN4B7B
        JOIN4B7B:  preds = [JOIN4B79,COND4A82]
          int born4B7A#1 = phi(born4B78,born47CE)
          goto JOIN4B7D
        JOIN4B7D:  preds = [JOIN4B7B,JOIN4BC4]
          int born4B7C#1 = phi(born4B7A,born47CE)
          goto JOIN4B7F
        JOIN4B7F:  preds = [JOIN4B7D,COND49EB]
          int born4B7E#1 = phi(born4B7C,born47CE)
          goto JOIN4B80
        JOIN4B80:  preds = [JOIN4B7F,COND49CB]
          int born443C#1 = phi(born4B7E,born47CE)
          goto JOIN444B
        COND4B81:  preds = [COND4A18]
          if _t49CC then goto ASSIGN4B83 else goto JOIN4B8C
        ASSIGN4B83:  preds = [COND4B81]
          bool _t4B82#1 = GT<int>(iter40BC,_t4460);
          if _t4B82 then goto ASSIGN4B86 else goto JOIN4B8A
        ASSIGN4B86:  preds = [COND4B84]
          int _t4B85#1 = IMod(iter40BC,pcp40B2);
          bool _t4B87#1 = EQ<int>(_t4460,_t4B85);
          goto JOIN4B8A
        JOIN4B8A:  preds = [ASSIGN4B88,COND4B84]
          bool _t4B89#1 = phi(_t4B87,vv40D2)
          goto JOIN4B8C
        JOIN4B8C:  preds = [JOIN4B8A,COND4B81]
          bool _t4B8B#1 = phi(_t4B89,vv40D2)
          if _t4B8B then goto ASSIGN4B8F else goto JOIN4B9B
        ASSIGN4B8F:  preds = [COND4B8D]
          int _t4B8E#1 = IDiv(iter40BC,pcp40B2);
          int _t4B90#2 = 2;
          int _t4B92#1 = IMod(_t4B8E,_t4B90);
          int _t4B94#1 = IMul(_t4B92,_t4B90);
          int _t4B96#1 = 1;
          int _t4B98#1 = ISub(_t4B94,_t4B96);
          goto JOIN4B9B
        JOIN4B9B:  preds = [ASSIGN4B99,COND4B8D]
          int _t4B9A#1 = phi(_t4B98,_t4460)
          bool _t4B9C#1 = LT<int>(_t4B9A,_t4460);
          if _t4B9C then goto ASSIGN4BA0 else goto JOIN4BC4
        ASSIGN4BA0:  preds = [COND4B9E]
          bool _t4B9F#1 = GT<real>(newE48B0,_t40EF);
          if _t4B9F then goto ASSIGN4BA3 else goto JOIN4BC3
        ASSIGN4BA3:  preds = [COND4BA1]
          bool _t4BA2#1 = GT<int>(nn48C2,nnmax40B8);
          if _t4BA2 then goto ASSIGN4BA6 else goto JOIN4BC2
        ASSIGN4BA6:  preds = [COND4BA4]
          real _t4BA5#1 = TensorIndex<tensor[3],[0]>(pos444A);
          real _t4BA7#1 = urnd403D (_t4BA5);
          real _t4BA9#1 = TensorIndex<tensor[3],[1]>(pos444A);
          real _t4BAB#1 = urnd403D (_t4BA9);
          real _t4BAD#1 = TensorIndex<tensor[3],[2]>(pos444A);
          real _t4BAF#1 = urnd403D (_t4BAD);
          real _t4BB1#1 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (_t4BA7,_t4BAB,_t4BAF);
          real _t4BB3#1 = 0.1e1;
          real _t4BB5#1 = MathFn<fmod>(_t4BB1,_t4BB3);
          int _t4BB7#1 = ISub(nn48C2,nnmax40B8);
          real _t4BB9#1 = IntToReal(_t4BB7);
          real _t4BBB#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t4BB9,_t48F7);
          bool _t4BBD#1 = LT<real>(_t4BB5,_t4BBB);
          if _t4BBD then goto DIE4BC0 else goto JOIN4BC1
        DIE4BC0:  preds = [COND4BBF]
          die
          goto JOIN4BC1
        JOIN4BC1:  preds = [*DIE4BC0,COND4BBF]
          goto JOIN4BC2
        JOIN4BC2:  preds = [JOIN4BC1,COND4BA4]
          goto JOIN4BC3
        JOIN4BC3:  preds = [JOIN4BC2,COND4BA1]
          goto JOIN4BC4
        JOIN4BC4:  preds = [JOIN4BC3,COND4B9E]
          goto JOIN4B7D
        ASSIGN4BC6:  preds = [COND4949]
          int _t4BC5#1 = 1;
          bool _t494D#1 = GT<int>(verb40AC,_t4BC5);
          goto JOIN494E
        ASSIGN4BC9:  preds = [COND48FE]
          int _t4BC8#1 = 1;
          bool _t4902#1 = GT<int>(verb40AC,_t4BC8);
          goto JOIN4903
        ASSIGN4BCC:  preds = [COND4820]
          int _t4BCB#1 = 1;
          bool _t4824#1 = GT<int>(verb40AC,_t4BCB);
          goto JOIN4825
        ASSIGN4BCF:  preds = [COND47B4]
          int _t4BCE#1 = 1;
          bool _t47B8#1 = GT<int>(verb40AC,_t4BCE);
          goto JOIN47B9
        ASSIGN4BD2:  preds = [COND4696]
          int _t4BD1#1 = 1;
          bool _t469A#1 = GT<int>(verb40AC,_t4BD1);
          goto JOIN469B
        ASSIGN4BD5:  preds = [COND41E0]
          int _t4BD4#1 = 1;
          bool _t41E4#1 = GT<int>(verb40AC,_t4BD4);
          goto JOIN41E5
        ASSIGN4BD8:  preds = [COND40DC]
          int _t4BD7#1 = 1;
          bool _t40E0#1 = GT<int>(verb40AC,_t4BD7);
          goto JOIN40E1
    end update
  end point
## initial strand creation
  COLLECTION
    ENTRY4BDA:  preds = []
      tensor[3][] ipos4BDB#2 = globals.ipos3F9B;
      int _t4BDD#1 = 0;
      int _t4BDF#1 = Length<tensor[3]>(ipos4BDB);
      int _t4BE1#1 = 1;
      int _t4BE3#1 = ISub(_t4BDF,_t4BE1);
      int[] _t4BE5#1 = Range(_t4BDD,_t4BE3);
    FOREACH4BE8:  preds = [ASSIGN4BE6,NEXT4BEE]
      foreach (ii4BE7 in _t4BE5) on exit goto RETURN4BEF
      tensor[3] _t4BE9#1 = Subscript<tensor[3][]>(ipos4BDB,ii4BE7);
      real _t4BEB#1 = 0.1e1;
      new point(_t4BE9,_t4BEB);
      goto FOREACH4BE8
    RETURN4BEF:  preds = [FOREACH4BE8]
      return
## global update
  ENTRY4BF0:  preds = []
    real geoEps4BF1#3 = globals.geoEps3F92;
    real mvmtEps4BF3#3 = globals.mvmtEps3F93;
    real rpcEps4BF5#3 = globals.rpcEps3F94;
    real pchist4BF7#1 = globals.pchist3FA0;
    int iter4BF9#4 = globals.iter3FA1;
    real rpc4BFB#1 = globals.rpc3FA2;
    int popLast4BFD#1 = globals.popLast3FA3;
    int pop4BFF#5 = NumStrands<active>;
    bool _t4C01#1 = NEQ<int>(pop4BFF,popLast4BFD);
    if _t4C01 then goto ASSIGN4C05 else goto ASSIGN4CAA
  ASSIGN4C05:  preds = [COND4C03]
    int _t4C04#1 = 1;
    goto JOIN4C08
  JOIN4C08:  preds = [ASSIGN4C05,ASSIGN4CAA]
    int _t4C06#2 = phi(_t4C04,_t4C07)
    real _t4C09#2 = IntToReal(_t4C06);
    real op1_e3_l_34C0C#1 = λ(T0[],T1[])<(T1) - (T0)> (_t4C09,rpc4BFB);
    real op1_e3_l_44C0D#1 = λ(T0[],T1[])<(T0 * T1)> (pchist4BF7,op1_e3_l_34C0C);
    real rpc4C0B#5 = λ(T0[],T1[])<(T0 + T1)> (_t4C09,op1_e3_l_44C0D);
    globals.rpc3FA2 = rpc4C0B;
    point[] P4C12#6 = Strands<point,all>;
    (bool res4C1A#1) = all(MAP all4C14 (P4C12));
    real _t4C1C#1 = 0.1e3;
    (real res4C2B#1) = sum<real>(MAP mean4C1E (P4C12));
    int num4C2D#1 = NumStrands<all>;
    real rNum4C2F#5 = IntToReal(num4C2D);
    real op1_e3_l_34C32#1 = λ(T0[],T1[])<(T0) / ( T1)> (res4C2B,rNum4C2F);
    real percfound4C31#1 = λ(T0[],T1[])<(T0 * T1)> (_t4C1C,op1_e3_l_34C32);
    (real res4C3B#2) = sum<real>(MAP mean4C35 (P4C12));
    real mean4C3D#2 = λ(T0[],T1[])<(T0) / ( T1)> (res4C3B,rNum4C2F);
    (real res4C4A#1) = sum<real>(MAP mean4C3F (P4C12,mean4C3D));
    real op1_e3_l_44C4D#1 = λ(T0[],T1[])<(T0) / ( T1)> (res4C4A,rNum4C2F);
    real op1_e3_l_54C4E#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_44C4D);
    real op1_e3_l_64C4F#1 = λ(T0[],T1[])<(T1 * T0)> (rNum4C2F,op1_e3_l_54C4E);
    real covcl4C4C#4 = λ(T0[],T1[])<(T1) / ( T0)> (res4C3B,op1_e3_l_64C4F);
    (real res4C5A#4) = max<real>(MAP max4C54 (P4C12));
    string _t4C5C#1 = "======= finished iter ";
    string _t4C5E#1 = " w/ ";
    string _t4C60#3 = ")";
    string _t4C62#1 = "; %found=";
    string _t4C64#1 = "; mean(hh)=";
    (real res4C6C#1) = sum<real>(MAP mean4C66 (P4C12));
    real mean4C6E#1 = λ(T0[],T1[])<(T0) / ( T1)> (res4C6C,rNum4C2F);
    string _t4C70#1 = "; mean(cl)=";
    string _t4C72#3 = "; COV(cl)=";
    string _t4C74#3 = "; max(mvmt)=";
    string _t4C76#1 = "; pc=";
    string _t4C78#3 = "; rpc=";
    string _t4C7A#3 = "\n";
    Print<[string,int,string,int,string,string,real,string,real,string,real,string,real,string,real,string,int,string,real,string]>(_t4C5C,iter4BF9,_t4C5E,pop4BFF,_t4C60,_t4C62,percfound4C31,_t4C64,mean4C6E,_t4C70,mean4C3D,_t4C72,covcl4C4C,_t4C74,res4C5A,_t4C76,_t4C06,_t4C78,rpc4C0B,_t4C7A);
    if res4C1A then goto ASSIGN4C7F else goto ASSIGN4CA9
  ASSIGN4C7F:  preds = [COND4C7D]
    bool _t4C7E#1 = LT<real>(covcl4C4C,geoEps4BF1);
    if _t4C7E then goto ASSIGN4C82 else goto ASSIGN4CA8
  ASSIGN4C82:  preds = [COND4C80]
    bool _t4C81#1 = LT<real>(res4C5A,mvmtEps4BF3);
    if _t4C81 then goto ASSIGN4C85 else goto ASSIGN4CA7
  ASSIGN4C85:  preds = [COND4C83]
    bool _t4C84#1 = LT<real>(rpc4C0B,rpcEps4BF5);
    goto JOIN4C88
  JOIN4C88:  preds = [ASSIGN4C85,ASSIGN4CA7]
    bool _t4C86#1 = phi(_t4C84,_t4C87)
    goto JOIN4C8B
  JOIN4C8B:  preds = [JOIN4C88,ASSIGN4CA8]
    bool _t4C89#1 = phi(_t4C86,_t4C8A)
    goto JOIN4C8E
  JOIN4C8E:  preds = [JOIN4C8B,ASSIGN4CA9]
    bool _t4C8C#1 = phi(_t4C89,_t4C8D)
    if _t4C8C then goto ASSIGN4C91 else goto ASSIGN4CA1
  ASSIGN4C91:  preds = [COND4C8F]
    string _t4C90#1 = "======= Stabilizing ";
    string _t4C92#1 = " (iter ";
    string _t4C94#3 = " < ";
    Print<[string,int,string,int,string,string,real,string,real,string,real,string,real,string,real,string,real,string]>(_t4C90,pop4BFF,_t4C92,iter4BF9,_t4C60,_t4C72,covcl4C4C,_t4C94,geoEps4BF1,_t4C74,res4C5A,_t4C94,mvmtEps4BF3,_t4C78,rpc4C0B,_t4C94,rpcEps4BF5,_t4C7A);
    StabilizeAll;
    goto JOIN4C98
  JOIN4C98:  preds = [MASSIGN4C97,MASSIGN4CA6]
    int _t4C99#1 = 1;
    int iter4C9B#1 = IAdd(iter4BF9,_t4C99);
    globals.iter3FA1 = iter4C9B;
    globals.popLast3FA3 = pop4BFF;
    continue
  ASSIGN4CA1:  preds = [COND4C8F]
    string _t4CA0#1 = "======= Stabilizing ";
    string _t4CA2#1 = " (iter ";
    string _t4CA4#3 = " > ";
    Print<[string,int,string,int,string,string,real,string,real,string,real,string,real,string,real,string,real,string]>(_t4CA0,pop4BFF,_t4CA2,iter4BF9,_t4C60,_t4C72,covcl4C4C,_t4CA4,geoEps4BF1,_t4C74,res4C5A,_t4CA4,mvmtEps4BF3,_t4C78,rpc4C0B,_t4CA4,rpcEps4BF5,_t4C7A);
    goto JOIN4C98
  ASSIGN4CA7:  preds = [COND4C83]
    bool _t4C87#1 = false;
    goto JOIN4C88
  ASSIGN4CA8:  preds = [COND4C80]
    bool _t4C8A#1 = false;
    goto JOIN4C8B
  ASSIGN4CA9:  preds = [COND4C7D]
    bool _t4C8D#1 = false;
    goto JOIN4C8E
  ASSIGN4CAA:  preds = [COND4C03]
    int _t4C07#1 = 0;
    goto JOIN4C08
#### end program ####
##### mid-ir: after contraction ####
## properties
  GlobalInit StabilizeAll GlobalReduce StrandSets GlobalUpdate NewStrands StrandCommunication StrandsMayDie HasInputs HasGlobals ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
## globals
  input meshData3F84 (meshData) = <no-default>
  input 0space07C6_intermedateGlobal3F85 (space) = <no-default>
  input 0data07C8_intermedateGlobal3F86 (data) = <no-default>
  input fStrTh3F87 (fStrTh) = <no-default>
  input fMaskTh3F88 (fMaskTh) = <default>
  input fBias3F89 (fBias) = <default>
  input tipd3F8A (tipd) = <default>
  input mabd3F8B (mabd) = <default>
  input travMax3F8C (travMax) = <default>
  input nfsMax3F8D (nfsMax) = <default>
  input gdeTest3F8E (gdeTest) = <default>
  input gdeBack3F8F (gdeBack) = <default>
  input gdeOppor3F90 (gdeOppor) = <default>
  input fsEps3F91 (fsEps) = <no-default>
  input geoEps3F92 (geoEps) = <default>
  input mvmtEps3F93 (mvmtEps) = <default>
  input rpcEps3F94 (rpcEps) = <default>
  input pcmvEps3F95 (pcmvEps) = <default>
  input isoval3F96 (isoval) = <default>
  input verb3F97 (verb) = <default>
  input sfs3F98 (sfs) = <default>
  input hist3F99 (hist) = <default>
  input pcp3F9A (pcp) = <default>
  input ipos3F9B (ipos) = <no-default>
  input fDim3F9C (fDim) = <default>
  global int nnmin3F9D
  global int nnmax3F9E
  global real rad3F9F
  global real pchist3FA0
  varying global int iter3FA1
  varying global real rpc3FA2
  varying global int popLast3FA3
## functions
  function real urnd403D (real x403E#2) {
    ENTRY403F:  preds = []
      int iter4040#1 = globals.iter3FA1;
      real _t4042#2 = 0.e0;
      bool _t4044#1 = EQ<real>(x403E,_t4042);
      if _t4044 then goto RETURN(_t4042)4047 else goto JOIN4048
    RETURN(_t4042)4047:  preds = [COND4046]
      return _t4042
      goto JOIN4048
    JOIN4048:  preds = [*RETURN(_t4042)4047,COND4046]
      real _t4049#1 = λ(T0[])<Abs(T0)> (x403E);
      real l2404B#2 = MathFn<log2>(_t4049);
      real _t404D#2 = 0.2e1;
      real _t404F#1 = MathFn<floor>(l2404B);
      real _t4051#2 = 0.1e1;
      real op1_e3_l_34054#1 = λ(T0[],T1[])<(T0) - (T1)> (l2404B,_t404F);
      real _t4053#1 = λ(T0[],T1[])<(T1) - (T0)> (_t4051,op1_e3_l_34054);
      real frxp4057#1 = MathFn<pow>(_t404D,_t4053);
      int _t4059#1 = 2;
      int _t405B#1 = IMul(_t4059,iter4040);
      real _t405D#1 = IntToReal(_t405B);
      real op1_e3_l_34060#1 = λ(T0[])<(T0)^20> (_t404D);
      real op1_e3_l_44061#1 = λ(T0[],T1[])<(T1 + T0)> (_t405D,op1_e3_l_34060);
      real _t405F#1 = λ(T0[],T1[])<(T0 * T1)> (frxp4057,op1_e3_l_44061);
      real _t4065#1 = MathFn<fmod>(_t405F,_t4051);
      return _t4065
}
  function tensor[3] fStep4302 (tensor[3] s4303#3) {
    ENTRY4304:  preds = []
      real x4305#5 = TensorIndex<tensor[3],[0]>(s4303);
      real y4307#5 = TensorIndex<tensor[3],[1]>(s4303);
      real z4309#6 = TensorIndex<tensor[3],[2]>(s4303);
      real _t430B#6 = 0.2e1;
      int _t430D#2 = 2;
      real op1_e3_l_64310#2 = λ(T0[])<(T0)^2> (x4305);
      real op1_e3_l_74311#2 = λ(T0[])<(T0)^2> (y4307);
      real op1_e3_l_84312#8 = λ(T0[])<(T0)^2> (z4309);
      real op1_e3_l_94313#2 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_64310,op1_e3_l_74311,op1_e3_l_84312);
      real op1_e3_l_114314#7 = λ(T0[])<Cosine(T0)> (op1_e3_l_94313);
      real _t430F#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t430B,x4305,op1_e3_l_84312,op1_e3_l_114314);
      real _t431B#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t430B,y4307,op1_e3_l_84312,op1_e3_l_114314);
      real op1_e3_l_14432C#3 = λ(T0[])<(T0)^3> (z4309);
      real op1_e3_l_20432E#8 = λ(T0[])<Sine(T0)> (op1_e3_l_94313);
      real op1_e3_l_21432F#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t430B,op1_e3_l_14432C,op1_e3_l_114314);
      real op1_e3_l_224330#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t430B,z4309,op1_e3_l_20432E);
      real _t4327#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_21432F,op1_e3_l_224330);
      tensor[3] g433B#1 = <tensor[3]>[_t430F,_t431B,_t4327];
      real _t433F#6 = -0.4e1;
      real op1_e3_l_244348#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t433F,op1_e3_l_64310,op1_e3_l_84312,op1_e3_l_20432E);
      real op1_e3_l_254349#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t430B,op1_e3_l_84312,op1_e3_l_114314);
      real _t4341#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_244348,op1_e3_l_254349);
      real _t4353#2 = λ(T0[],T1[],T2[],T3[],T4[])<(T0 * T1 * T2 * T3 * T4)> (_t433F,x4305,y4307,op1_e3_l_84312,op1_e3_l_20432E);
      real _t435F#2 = 0.4e1;
      real op1_e3_l_234369#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t433F,x4305,op1_e3_l_14432C,op1_e3_l_20432E);
      real op1_e3_l_24436A#1 = λ(T0[],T1[],T2[],T3[])<(T2 * T0 * T1 * T3)> (x4305,z4309,_t435F,op1_e3_l_114314);
      real _t4361#2 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_234369,op1_e3_l_24436A);
      tensor[3] _t4375#1 = <tensor[3]>[_t4341,_t4353,_t4361];
      real op1_e3_l_24437E#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t433F,op1_e3_l_74311,op1_e3_l_84312,op1_e3_l_20432E);
      real _t4377#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_24437E,op1_e3_l_254349);
      real op1_e3_l_234391#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t433F,y4307,op1_e3_l_14432C,op1_e3_l_20432E);
      real op1_e3_l_244392#1 = λ(T0[],T1[],T2[],T3[])<(T2 * T0 * T1 * T3)> (y4307,z4309,_t435F,op1_e3_l_114314);
      real _t4389#2 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_234391,op1_e3_l_244392);
      tensor[3] _t439D#1 = <tensor[3]>[_t4353,_t4377,_t4389];
      real _t439F#1 = 0.1e2;
      real op1_e3_l_1843A6#1 = λ(T0[])<(T0)^4> (z4309);
      real op1_e3_l_3143A9#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t433F,op1_e3_l_1843A6,op1_e3_l_20432E);
      real op1_e3_l_3243AA#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t439F,op1_e3_l_84312,op1_e3_l_114314);
      real op1_e3_l_3343AB#1 = λ(T0[],T1[])<(T0 * T1)> (_t430B,op1_e3_l_20432E);
      real _t43A1#1 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_3143A9,op1_e3_l_3243AA,op1_e3_l_3343AB);
      tensor[3] _t43B7#1 = <tensor[3]>[_t4361,_t4389,_t43A1];
      tensor[3,3] hess43B9#1 = <tensor[3,3]>[_t4375,_t439D,_t43B7];
      (real[3] evals43BB#1,tensor[3][3] E43BC#1) = EigenVecs3x3(hess43B9);
      real _t43BE#1 = 0.1e1;
      real _t43C0#1 = Subscript<real[3]>(evals43BB,_t430D);
      tensor[3] _t43C2#2 = Subscript<tensor[3][3]>(E43BC,_t430D);
      real op1_e3_l_543C5#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t43BE,_t43C0);
      real op1_e3_l_643C6#1 = λ(T0[])<Neg(T0)> (op1_e3_l_543C5);
      real op1_e3_l_743C7#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (_t43C2,g433B);
      tensor[3] up43C4#4 = λ(T0[3],T1[],T2[])<(T1 * T0_{i0} * T2)>_{3} (_t43C2,op1_e3_l_643C6,op1_e3_l_743C7);
      real _t43CC#2 = TensorIndex<tensor[3],[0]>(up43C4);
      bool _t43CE#1 = EQ<real>(_t43CC,_t43CC);
      bool _t43D0#1 = BNot(_t43CE);
      if _t43D0 then goto ASSIGN43D4 else goto ASSIGN43E1
    ASSIGN43D4:  preds = [COND43D2]
      bool _t43D3#1 = true;
      goto JOIN43D7
    JOIN43D7:  preds = [ASSIGN43D4,JOIN43EA]
      bool _t43D5#1 = phi(_t43D3,_t43D6)
      if _t43D5 then goto ASSIGN43DA else goto JOIN43DE
    ASSIGN43DA:  preds = [COND43D8]
      real _t43D9#3 = +inf;
      tensor[3] _t43DB#1 = <tensor[3]>[_t43D9,_t43D9,_t43D9];
      return _t43DB
      goto JOIN43DE
    JOIN43DE:  preds = [*RETURN(_t43DB)43DD,COND43D8]
      return up43C4
    ASSIGN43E1:  preds = [COND43D2]
      real _t43E0#2 = TensorIndex<tensor[3],[1]>(up43C4);
      bool _t43E2#1 = EQ<real>(_t43E0,_t43E0);
      bool _t43E4#1 = BNot(_t43E2);
      if _t43E4 then goto ASSIGN43E8 else goto ASSIGN43EC
    ASSIGN43E8:  preds = [COND43E6]
      bool _t43E7#1 = true;
      goto JOIN43EA
    JOIN43EA:  preds = [ASSIGN43E8,ASSIGN43EF]
      bool _t43D6#1 = phi(_t43E7,_t43E9)
      goto JOIN43D7
    ASSIGN43EC:  preds = [COND43E6]
      real _t43EB#2 = TensorIndex<tensor[3],[2]>(up43C4);
      bool _t43ED#1 = EQ<real>(_t43EB,_t43EB);
      bool _t43E9#1 = BNot(_t43ED);
      goto JOIN43EA
}
  function tensor[3,3] fPerp45A3 (tensor[3] s45A4#3) {
    ENTRY45A5:  preds = []
      real x45A6#4 = TensorIndex<tensor[3],[0]>(s45A4);
      real y45A8#4 = TensorIndex<tensor[3],[1]>(s45A4);
      real z45AA#5 = TensorIndex<tensor[3],[2]>(s45A4);
      real _t45AC#2 = 0.2e1;
      int _t45AE#1 = 2;
      real _t45B2#6 = -0.4e1;
      real op1_e3_l_1145B5#2 = λ(T0[])<(T0)^2> (x45A6);
      real op1_e3_l_1245B6#2 = λ(T0[])<(T0)^2> (y45A8);
      real op1_e3_l_1345B7#6 = λ(T0[])<(T0)^2> (z45AA);
      real op1_e3_l_1445B8#2 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_1145B5,op1_e3_l_1245B6,op1_e3_l_1345B7);
      real op1_e3_l_1745B9#7 = λ(T0[])<Sine(T0)> (op1_e3_l_1445B8);
      real op1_e3_l_2345BA#4 = λ(T0[])<Cosine(T0)> (op1_e3_l_1445B8);
      real op1_e3_l_2445BB#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t45B2,op1_e3_l_1145B5,op1_e3_l_1345B7,op1_e3_l_1745B9);
      real op1_e3_l_2545BC#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t45AC,op1_e3_l_1345B7,op1_e3_l_2345BA);
      real _t45B4#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_2445BB,op1_e3_l_2545BC);
      real _t45C6#2 = λ(T0[],T1[],T2[],T3[],T4[])<(T0 * T1 * T2 * T3 * T4)> (_t45B2,x45A6,y45A8,op1_e3_l_1345B7,op1_e3_l_1745B9);
      real _t45D2#2 = 0.4e1;
      real op1_e3_l_1645D9#2 = λ(T0[])<(T0)^3> (z45AA);
      real op1_e3_l_2345DC#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t45B2,x45A6,op1_e3_l_1645D9,op1_e3_l_1745B9);
      real op1_e3_l_2445DD#1 = λ(T0[],T1[],T2[],T3[])<(T2 * T0 * T1 * T3)> (x45A6,z45AA,_t45D2,op1_e3_l_2345BA);
      real _t45D4#2 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_2345DC,op1_e3_l_2445DD);
      tensor[3] _t45E8#1 = <tensor[3]>[_t45B4,_t45C6,_t45D4];
      real op1_e3_l_2445F1#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t45B2,op1_e3_l_1245B6,op1_e3_l_1345B7,op1_e3_l_1745B9);
      real _t45EA#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_2445F1,op1_e3_l_2545BC);
      real op1_e3_l_234604#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t45B2,y45A8,op1_e3_l_1645D9,op1_e3_l_1745B9);
      real op1_e3_l_244605#1 = λ(T0[],T1[],T2[],T3[])<(T2 * T0 * T1 * T3)> (y45A8,z45AA,_t45D2,op1_e3_l_2345BA);
      real _t45FC#2 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_234604,op1_e3_l_244605);
      tensor[3] _t4610#1 = <tensor[3]>[_t45C6,_t45EA,_t45FC];
      real _t4612#1 = 0.1e2;
      real op1_e3_l_184619#1 = λ(T0[])<(T0)^4> (z45AA);
      real op1_e3_l_31461C#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t45B2,op1_e3_l_184619,op1_e3_l_1745B9);
      real op1_e3_l_32461D#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t4612,op1_e3_l_1345B7,op1_e3_l_2345BA);
      real op1_e3_l_33461E#1 = λ(T0[],T1[])<(T0 * T1)> (_t45AC,op1_e3_l_1745B9);
      real _t4614#1 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_31461C,op1_e3_l_32461D,op1_e3_l_33461E);
      tensor[3] _t462A#1 = <tensor[3]>[_t45D4,_t45FC,_t4614];
      tensor[3,3] hess462C#1 = <tensor[3,3]>[_t45E8,_t4610,_t462A];
      (real[3] evals462E#0,tensor[3][3] _t462F#1) = EigenVecs3x3(hess462C);
      tensor[3] E24631#1 = Subscript<tensor[3][3]>(_t462F,_t45AE);
      tensor[3,3] op1_e3_l_24634#1 = λ(T0[3])<(T0_{i0} * T0_{i1})>_{3 3} (E24631);
      tensor[3,3] m4633#3 = λ(T0[3 3])<(δ_{i0,i1}) - (T0_{i0,i1})>_{3 3} (op1_e3_l_24634);
      real t4637#2 = λ(T0[3 3],T1[3 3])<Σ(i0=0..2)(i1=0..2)<((T0_{i0,i1} * T1_{i0,i1}))>(i0=0..2)(i1=0..2)> (m4633,m4633);
      bool _t463D#1 = EQ<real>(t4637,t4637);
      bool _t463F#1 = BNot(_t463D);
      if _t463F then goto ASSIGN4643 else goto JOIN4645
    ASSIGN4643:  preds = [COND4641]
      tensor[3,3] _t4642#1 = λ()<Z_{i0,i1}>_{3 3} ();
      return _t4642
      goto JOIN4645
    JOIN4645:  preds = [*RETURN(_t4642)4644,COND4641]
      return m4633
}
  function bool all4C14 (point P4C15#1) {
    ENTRY4C16:  preds = []
      bool _t4C17#1 = P4C15.found;
      return _t4C17
}
  function real mean4C1E (point P4C1F#1) {
    ENTRY4C20:  preds = []
      bool _t4C21#1 = P4C1F.found;
      if _t4C21 then goto ASSIGN4C25 else goto ASSIGN4C2A
    ASSIGN4C25:  preds = [COND4C23]
      real _t4C24#1 = 0.1e1;
      goto JOIN4C28
    JOIN4C28:  preds = [ASSIGN4C25,ASSIGN4C2A]
      real _t4C26#1 = phi(_t4C24,_t4C27)
      return _t4C26
    ASSIGN4C2A:  preds = [COND4C23]
      real _t4C27#1 = 0.e0;
      goto JOIN4C28
}
  function real mean4C35 (point P4C36#1) {
    ENTRY4C37:  preds = []
      real _t4C38#1 = P4C36.closest;
      return _t4C38
}
  function real mean4C3F (point P4C40#1, real meancl4C41#1) {
    ENTRY4C42:  preds = []
      real _t4C43#1 = P4C40.closest;
      real op1_e3_l_24C46#1 = λ(T0[],T1[])<(T0) - (T1)> (_t4C43,meancl4C41);
      real _t4C45#1 = λ(T0[])<(T0)^2> (op1_e3_l_24C46);
      return _t4C45
}
  function real max4C54 (point P4C55#1) {
    ENTRY4C56:  preds = []
      real _t4C57#1 = P4C55.mvmt;
      return _t4C57
}
  function real mean4C66 (point P4C67#1) {
    ENTRY4C68:  preds = []
      real _t4C69#1 = P4C67.hh;
      return _t4C69
}
## input initialization
  ENTRY3FA4:  preds = []
    real fMaskTh3FA5#3 = 0.e0;
    globals.fMaskTh3F88 = fMaskTh3FA5;
    globals.fBias3F89 = fMaskTh3FA5;
    real tipd3FA9#1 = 0.1e1;
    globals.tipd3F8A = tipd3FA9;
    real mabd3FAC#1 = 0.75e0;
    globals.mabd3F8B = mabd3FAC;
    real travMax3FAF#1 = 0.1e2;
    globals.travMax3F8C = travMax3FAF;
    int nfsMax3FB2#1 = 20;
    globals.nfsMax3F8D = nfsMax3FB2;
    real gdeTest3FB5#4 = 0.5e0;
    globals.gdeTest3F8E = gdeTest3FB5;
    globals.gdeBack3F8F = gdeTest3FB5;
    real gdeOppor3FB9#1 = 0.12e1;
    globals.gdeOppor3F90 = gdeOppor3FB9;
    real geoEps3FBC#1 = 0.1e0;
    globals.geoEps3F92 = geoEps3FBC;
    real mvmtEps3FBF#2 = 0.1e-1;
    globals.mvmtEps3F93 = mvmtEps3FBF;
    globals.rpcEps3F94 = mvmtEps3FBF;
    real pcmvEps3FC3#1 = 0.3e0;
    globals.pcmvEps3F95 = pcmvEps3FC3;
    globals.isoval3F96 = fMaskTh3FA5;
    int verb3FC7#1 = 0;
    globals.verb3F97 = verb3FC7;
    globals.sfs3F98 = gdeTest3FB5;
    globals.hist3F99 = gdeTest3FB5;
    int pcp3FCC#1 = 5;
    globals.pcp3F9A = pcp3FCC;
    int fDim3FCF#1 = 2;
    globals.fDim3F9C = fDim3FCF;
    return
## global-variable initialization
  ENTRY3FD3:  preds = []
    femData:Mesh meshData3FD4#2 = globals.meshData3F84;
    real tipd3FD6#1 = globals.tipd3F8A;
    real hist3FD8#1 = globals.hist3F99;
    int pcp3FDA#1 = globals.pcp3F9A;
    int fDim3FDC#3 = globals.fDim3F9C;
    int _t3FDE#4 = 0;
    int _t3FE0#3 = 1;
    int _t3FE2#1 = ExtractFemItem<int,NumCell(Mesh)>(meshData3FD4);
    int _t3FE4#1 = ISub(_t3FE2,_t3FE0);
    int[] _t3FE6#1 = Range(_t3FDE,_t3FE4);
    femData:MeshCell[] _t3FE8#1 = <femData:MeshCell[]>{};
  FOREACH3FEB:  preds = [ASSIGN3FE9,NEXT3FF1]
    foreach (_t3FEA in _t3FE6) on exit goto ASSIGN3FF3
      femData:MeshCell[] _t3FEF#1 = phi(_t3FE8,_t3FEE)
    femData:MeshCell _t3FEC#1 = LoadFem<femData:MeshCell>(meshData3FD4,_t3FEA);
    femData:MeshCell[] _t3FEE#1 = Append<femData:MeshCell>(_t3FEF,_t3FEC);
    goto FOREACH3FEB
  ASSIGN3FF3:  preds = [FOREACH3FEB]
    int _t3FF2#3 = 2;
    bool _t3FF4#2 = EQ<int>(_t3FF2,fDim3FDC);
    if _t3FF4 then goto ASSIGN3FF8 else goto ASSIGN4025
  ASSIGN3FF8:  preds = [COND3FF6]
    int _t3FF7#1 = 6;
    goto JOIN3FFB
  JOIN3FFB:  preds = [ASSIGN3FF8,JOIN4027]
    int _t3FF9#1 = phi(_t3FF7,_t3FFA)
    globals.nnmin3F9D = _t3FF9;
    if _t3FF4 then goto ASSIGN3FFF else goto ASSIGN401F
  ASSIGN3FFF:  preds = [COND3FFD]
    int _t3FFE#1 = 8;
    goto JOIN4002
  JOIN4002:  preds = [ASSIGN3FFF,JOIN4023]
    int _t4000#1 = phi(_t3FFE,_t4001)
    globals.nnmax3F9E = _t4000;
    real _t4004#1 = 0.2e1;
    real _t4006#1 = 0.3e1;
    real op1_e3_l_34009#1 = λ(T0[],T1[])<(T0 * T1)> (tipd3FD6,_t4006);
    real rad4008#1 = λ(T0[],T1[])<(T1) / ( T0)> (_t4004,op1_e3_l_34009);
    globals.rad3F9F = rad4008;
    real _t400D#2 = 0.1e1;
    int _t400F#1 = IMul(_t3FF2,pcp3FDA);
    real _t4011#1 = IntToReal(_t400F);
    real _t4013#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t400D,_t4011);
    real pchist4015#1 = MathFn<pow>(hist3FD8,_t4013);
    globals.pchist3FA0 = pchist4015;
    globals.iter3FA1 = _t3FDE;
    globals.rpc3FA2 = _t400D;
    int popLast401A#1 = -1;
    globals.popLast3FA3 = popLast401A;
    return
  ASSIGN401F:  preds = [COND3FFD]
    bool _t401E#1 = EQ<int>(_t3FE0,fDim3FDC);
    if _t401E then goto ASSIGN4022 else goto JOIN4023
  ASSIGN4022:  preds = [COND4020]
    int _t4021#1 = 3;
    goto JOIN4023
  JOIN4023:  preds = [ASSIGN4022,COND4020]
    int _t4001#1 = phi(_t4021,_t3FDE)
    goto JOIN4002
  ASSIGN4025:  preds = [COND3FF6]
    bool _t4024#1 = EQ<int>(_t3FE0,fDim3FDC);
    if _t4024 then goto JOIN4027 else goto JOIN4027
  JOIN4027:  preds = [COND4026,COND4026]
    int _t3FFA#1 = phi(_t3FF2,_t3FDE)
    goto JOIN3FFB
## strand
  strand point (tensor[3] p04028#5, real hh04029#1) in 3D
    state:
      output tensor[3] pos;
      output tensor[3] _pos;
      real ID;
      real hh;
      tensor[3] step;
      bool found;
      int nfs;
      real trav;
      real mvmt;
      real closest;
      int born;
      bool first;
    state init
      ENTRY4036:  preds = []
        real rad4037#1 = globals.rad3F9F;
        real _t4039#1 = 0.1e7;
        real _t403B#1 = TensorIndex<tensor[3],[0]>(p04028);
        real _t4068#1 = urnd403D (_t403B);
        real _t406A#1 = TensorIndex<tensor[3],[1]>(p04028);
        real _t406C#1 = urnd403D (_t406A);
        real _t406E#1 = TensorIndex<tensor[3],[2]>(p04028);
        real _t4070#1 = urnd403D (_t406E);
        real _t4072#1 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (_t4068,_t406C,_t4070);
        real _t4074#2 = 0.1e1;
        real _t4076#1 = MathFn<fmod>(_t4072,_t4074);
        real _t4078#1 = λ(T0[],T1[])<(T0 * T1)> (_t4039,_t4076);
        real _t407A#1 = MathFn<floor>(_t4078);
        real _t407C#4 = 0.e0;
        tensor[3] step407E#1 = <tensor[3]>[_t407C,_t407C,_t407C];
        bool found4080#1 = false;
        int nfs4082#2 = 0;
        bool first4084#1 = true;
        self.pos = p04028;
        self._pos = p04028;
        self.ID = _t407A;
        self.hh = hh04029;
        self.step = step407E;
        self.found = found4080;
        self.nfs = nfs4082;
        self.trav = _t407C;
        self.mvmt = _t4074;
        self.closest = rad4037;
        self.born = nfs4082;
        self.first = first4084;
        return
    end state init
    method update
        ENTRY4093:  preds = []
          real fStrTh4094#4 = globals.fStrTh3F87;
          real fMaskTh4096#4 = globals.fMaskTh3F88;
          real fBias4098#4 = globals.fBias3F89;
          real tipd409A#13 = globals.tipd3F8A;
          real mabd409C#1 = globals.mabd3F8B;
          real travMax409E#3 = globals.travMax3F8C;
          int nfsMax40A0#3 = globals.nfsMax3F8D;
          real gdeTest40A2#1 = globals.gdeTest3F8E;
          real gdeBack40A4#1 = globals.gdeBack3F8F;
          real gdeOppor40A6#1 = globals.gdeOppor3F90;
          real fsEps40A8#3 = globals.fsEps3F91;
          real pcmvEps40AA#1 = globals.pcmvEps3F95;
          int verb40AC#16 = globals.verb3F97;
          real sfs40AE#9 = globals.sfs3F98;
          real hist40B0#2 = globals.hist3F99;
          int pcp40B2#10 = globals.pcp3F9A;
          int fDim40B4#2 = globals.fDim3F9C;
          int nnmin40B6#3 = globals.nnmin3F9D;
          int nnmax40B8#4 = globals.nnmax3F9E;
          real rad40BA#6 = globals.rad3F9F;
          int iter40BC#22 = globals.iter3FA1;
          tensor[3] pos40BE#19 = self.pos;
          real ID40C0#11 = self.ID;
          real hh40C2#7 = self.hh;
          bool found40C4#3 = self.found;
          int nfs40C6#5 = self.nfs;
          real trav40C8#5 = self.trav;
          real mvmt40CA#5 = self.mvmt;
          real closest40CC#1 = self.closest;
          int born40CE#5 = self.born;
          bool first40D0#1 = self.first;
          bool vv40D2#45 = false;
          if first40D0 then goto ASSIGN40D6 else goto JOIN40EE
        ASSIGN40D6:  preds = [COND40D4]
          int _t40D5#1 = 0;
          bool _t40D7#1 = GT<int>(verb40AC,_t40D5);
          if _t40D7 then goto JOIN40DB else goto JOIN40DB
        JOIN40DB:  preds = [COND40D9,COND40D9]
          bool _t40DA#1 = phi(vv40D2,vv40D2)
          if _t40DA then goto ASSIGN40DE else goto ASSIGN4BD8
        ASSIGN40DE:  preds = [COND40DC]
          bool _t40DD#1 = true;
          goto JOIN40E1
        JOIN40E1:  preds = [ASSIGN40DE,ASSIGN4BD9]
          bool _t40DF#1 = phi(_t40DD,_t40E0)
          if _t40DF then goto ASSIGN40E4 else goto JOIN40ED
        ASSIGN40E4:  preds = [COND40E2]
          string _t40E3#1 = "(i#";
          string _t40E5#1 = " @ ";
          string _t40E7#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID40C0,_t40E3,iter40BC,_t40E5,pos40BE,_t40E7);
          string _t40EA#1 = " HELLO!\n";
          Print<[string]>(_t40EA);
          goto JOIN40ED
        JOIN40ED:  preds = [MASSIGN40EC,COND40E2]
          goto JOIN40EE
        JOIN40EE:  preds = [JOIN40ED,COND40D4]
          real _t40EF#23 = 0.e0;
          tensor[3] _t40F1#5 = <tensor[3]>[_t40EF,_t40EF,_t40EF];
          tensor[3] op1_e3_l_240F4#2 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (pos40BE,_t40F1);
          real op1_e3_l_440F5#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_240F4,op1_e3_l_240F4);
          real _t40F3#3 = λ(T0[])<Sqrt(T0)> (op1_e3_l_440F5);
          real _t40F9#11 = 0.4e1;
          bool _t40FB#2 = LT<real>(_t40F3,_t40F9);
          if _t40FB then goto ASSIGN40FF else goto JOIN4103
        ASSIGN40FF:  preds = [COND40FD]
          real _t40FE#1 = 0.3e1;
          bool _t4100#1 = GT<real>(_t40F3,_t40FE);
          goto JOIN4103
        JOIN4103:  preds = [ASSIGN4101,COND40FD]
          bool _t4102#1 = phi(_t4100,vv40D2)
          if _t4102 then goto ASSIGN4106 else goto JOIN41D5
        ASSIGN4106:  preds = [COND4104]
          real x4105#5 = TensorIndex<tensor[3],[0]>(pos40BE);
          real y4107#5 = TensorIndex<tensor[3],[1]>(pos40BE);
          real z4109#6 = TensorIndex<tensor[3],[2]>(pos40BE);
          real _t410B#6 = 0.2e1;
          int _t410D#1 = 2;
          real op1_e3_l_64110#2 = λ(T0[])<(T0)^2> (x4105);
          real op1_e3_l_74111#2 = λ(T0[])<(T0)^2> (y4107);
          real op1_e3_l_84112#8 = λ(T0[])<(T0)^2> (z4109);
          real op1_e3_l_94113#2 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_64110,op1_e3_l_74111,op1_e3_l_84112);
          real op1_e3_l_114114#7 = λ(T0[])<Cosine(T0)> (op1_e3_l_94113);
          real _t410F#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t410B,x4105,op1_e3_l_84112,op1_e3_l_114114);
          real _t411B#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t410B,y4107,op1_e3_l_84112,op1_e3_l_114114);
          real op1_e3_l_14412C#3 = λ(T0[])<(T0)^3> (z4109);
          real op1_e3_l_20412E#8 = λ(T0[])<Sine(T0)> (op1_e3_l_94113);
          real op1_e3_l_21412F#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t410B,op1_e3_l_14412C,op1_e3_l_114114);
          real op1_e3_l_224130#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t410B,z4109,op1_e3_l_20412E);
          real _t4127#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_21412F,op1_e3_l_224130);
          tensor[3] g413B#1 = <tensor[3]>[_t410F,_t411B,_t4127];
          real _t413F#6 = -0.4e1;
          real op1_e3_l_244148#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t413F,op1_e3_l_64110,op1_e3_l_84112,op1_e3_l_20412E);
          real op1_e3_l_254149#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t410B,op1_e3_l_84112,op1_e3_l_114114);
          real _t4141#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_244148,op1_e3_l_254149);
          real _t4153#2 = λ(T0[],T1[],T2[],T3[],T4[])<(T0 * T1 * T2 * T3 * T4)> (_t413F,x4105,y4107,op1_e3_l_84112,op1_e3_l_20412E);
          real op1_e3_l_234167#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t413F,x4105,op1_e3_l_14412C,op1_e3_l_20412E);
          real op1_e3_l_244168#1 = λ(T0[],T1[],T2[],T3[])<(T2 * T0 * T1 * T3)> (x4105,z4109,_t40F9,op1_e3_l_114114);
          real _t415F#2 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_234167,op1_e3_l_244168);
          tensor[3] _t4173#1 = <tensor[3]>[_t4141,_t4153,_t415F];
          real op1_e3_l_24417C#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t413F,op1_e3_l_74111,op1_e3_l_84112,op1_e3_l_20412E);
          real _t4175#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_24417C,op1_e3_l_254149);
          real op1_e3_l_23418F#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t413F,y4107,op1_e3_l_14412C,op1_e3_l_20412E);
          real op1_e3_l_244190#1 = λ(T0[],T1[],T2[],T3[])<(T2 * T0 * T1 * T3)> (y4107,z4109,_t40F9,op1_e3_l_114114);
          real _t4187#2 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_23418F,op1_e3_l_244190);
          tensor[3] _t419B#1 = <tensor[3]>[_t4153,_t4175,_t4187];
          real _t419D#1 = 0.1e2;
          real op1_e3_l_1841A4#1 = λ(T0[])<(T0)^4> (z4109);
          real op1_e3_l_3141A7#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t413F,op1_e3_l_1841A4,op1_e3_l_20412E);
          real op1_e3_l_3241A8#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t419D,op1_e3_l_84112,op1_e3_l_114114);
          real op1_e3_l_3341A9#1 = λ(T0[],T1[])<(T0 * T1)> (_t410B,op1_e3_l_20412E);
          real _t419F#1 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_3141A7,op1_e3_l_3241A8,op1_e3_l_3341A9);
          tensor[3] _t41B5#1 = <tensor[3]>[_t415F,_t4187,_t419F];
          tensor[3,3] hess41B7#1 = <tensor[3,3]>[_t4173,_t419B,_t41B5];
          real[3] _t41B9#1 = EigenVals3x3(hess41B7);
          real _t41BC#1 = Subscript<real[3]>(_t41B9,_t410D);
          real op1_e3_l_341BF#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (g413B);
          real op1_e3_l_441C0#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_341BF);
          real op1_e3_l_541C1#1 = λ(T0[])<Neg(T0)> (_t41BC);
          real op1_e3_l_641C2#1 = λ(T0[],T1[])<(T0 + T1)> (fBias4098,op1_e3_l_441C0);
          real str41BE#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_541C1,op1_e3_l_641C2);
          bool _t41C8#1 = GT<real>(str41BE,fStrTh4094);
          if _t41C8 then goto ASSIGN41CC else goto JOIN41D3
        ASSIGN41CC:  preds = [COND41CA]
          bool _t41CB#1 = GTE<real>(_t40EF,fMaskTh4096);
          if _t41CB then goto ASSIGN41CF else goto JOIN41D1
        ASSIGN41CF:  preds = [COND41CD]
          bool _t41CE#1 = true;
          goto JOIN41D1
        JOIN41D1:  preds = [ASSIGN41CF,COND41CD]
          bool _t41D0#1 = phi(_t41CE,vv40D2)
          goto JOIN41D3
        JOIN41D3:  preds = [JOIN41D1,COND41CA]
          bool _t41D2#1 = phi(_t41D0,vv40D2)
          goto JOIN41D5
        JOIN41D5:  preds = [JOIN41D3,COND4104]
          bool _t41D4#1 = phi(_t41D2,vv40D2)
          bool _t41D6#1 = BNot(_t41D4);
          if _t41D6 then goto ASSIGN41DA else goto JOIN42CB
        ASSIGN41DA:  preds = [COND41D8]
          int _t41D9#1 = 0;
          bool _t41DB#1 = GT<int>(verb40AC,_t41D9);
          if _t41DB then goto JOIN41DF else goto JOIN41DF
        JOIN41DF:  preds = [COND41DD,COND41DD]
          bool _t41DE#1 = phi(vv40D2,vv40D2)
          if _t41DE then goto ASSIGN41E2 else goto ASSIGN4BD5
        ASSIGN41E2:  preds = [COND41E0]
          bool _t41E1#1 = true;
          goto JOIN41E5
        JOIN41E5:  preds = [ASSIGN41E2,ASSIGN4BD6]
          bool _t41E3#1 = phi(_t41E1,_t41E4)
          if _t41E3 then goto ASSIGN41E8 else goto JOIN42C9
        ASSIGN41E8:  preds = [COND41E6]
          string _t41E7#1 = "(i#";
          string _t41E9#1 = " @ ";
          string _t41EB#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID40C0,_t41E7,iter40BC,_t41E9,pos40BE,_t41EB);
          string _t41EE#1 = "!inside=";
          if _t40FB then goto ASSIGN41F2 else goto JOIN41F6
        ASSIGN41F2:  preds = [COND41F0]
          real _t41F1#1 = 0.3e1;
          bool _t41F3#1 = GT<real>(_t40F3,_t41F1);
          goto JOIN41F6
        JOIN41F6:  preds = [ASSIGN41F4,COND41F0]
          bool _t41F5#1 = phi(_t41F3,vv40D2)
          string _t41F7#1 = " || fStrength=";
          real x41F9#5 = TensorIndex<tensor[3],[0]>(pos40BE);
          real y41FB#5 = TensorIndex<tensor[3],[1]>(pos40BE);
          real z41FD#6 = TensorIndex<tensor[3],[2]>(pos40BE);
          real _t41FF#6 = 0.2e1;
          int _t4201#1 = 2;
          real op1_e3_l_64204#2 = λ(T0[])<(T0)^2> (x41F9);
          real op1_e3_l_74205#2 = λ(T0[])<(T0)^2> (y41FB);
          real op1_e3_l_84206#8 = λ(T0[])<(T0)^2> (z41FD);
          real op1_e3_l_94207#2 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_64204,op1_e3_l_74205,op1_e3_l_84206);
          real op1_e3_l_114208#7 = λ(T0[])<Cosine(T0)> (op1_e3_l_94207);
          real _t4203#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t41FF,x41F9,op1_e3_l_84206,op1_e3_l_114208);
          real _t420F#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t41FF,y41FB,op1_e3_l_84206,op1_e3_l_114208);
          real op1_e3_l_144220#3 = λ(T0[])<(T0)^3> (z41FD);
          real op1_e3_l_204222#8 = λ(T0[])<Sine(T0)> (op1_e3_l_94207);
          real op1_e3_l_214223#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t41FF,op1_e3_l_144220,op1_e3_l_114208);
          real op1_e3_l_224224#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t41FF,z41FD,op1_e3_l_204222);
          real _t421B#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_214223,op1_e3_l_224224);
          tensor[3] g422F#1 = <tensor[3]>[_t4203,_t420F,_t421B];
          real _t4233#6 = -0.4e1;
          real op1_e3_l_24423C#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t4233,op1_e3_l_64204,op1_e3_l_84206,op1_e3_l_204222);
          real op1_e3_l_25423D#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t41FF,op1_e3_l_84206,op1_e3_l_114208);
          real _t4235#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_24423C,op1_e3_l_25423D);
          real _t4247#2 = λ(T0[],T1[],T2[],T3[],T4[])<(T0 * T1 * T2 * T3 * T4)> (_t4233,x41F9,y41FB,op1_e3_l_84206,op1_e3_l_204222);
          real op1_e3_l_23425B#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t4233,x41F9,op1_e3_l_144220,op1_e3_l_204222);
          real op1_e3_l_24425C#1 = λ(T0[],T1[],T2[],T3[])<(T2 * T0 * T1 * T3)> (x41F9,z41FD,_t40F9,op1_e3_l_114208);
          real _t4253#2 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_23425B,op1_e3_l_24425C);
          tensor[3] _t4267#1 = <tensor[3]>[_t4235,_t4247,_t4253];
          real op1_e3_l_244270#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t4233,op1_e3_l_74205,op1_e3_l_84206,op1_e3_l_204222);
          real _t4269#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_244270,op1_e3_l_25423D);
          real op1_e3_l_234283#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t4233,y41FB,op1_e3_l_144220,op1_e3_l_204222);
          real op1_e3_l_244284#1 = λ(T0[],T1[],T2[],T3[])<(T2 * T0 * T1 * T3)> (y41FB,z41FD,_t40F9,op1_e3_l_114208);
          real _t427B#2 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_234283,op1_e3_l_244284);
          tensor[3] _t428F#1 = <tensor[3]>[_t4247,_t4269,_t427B];
          real _t4291#1 = 0.1e2;
          real op1_e3_l_184298#1 = λ(T0[])<(T0)^4> (z41FD);
          real op1_e3_l_31429B#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t4233,op1_e3_l_184298,op1_e3_l_204222);
          real op1_e3_l_32429C#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t4291,op1_e3_l_84206,op1_e3_l_114208);
          real op1_e3_l_33429D#1 = λ(T0[],T1[])<(T0 * T1)> (_t41FF,op1_e3_l_204222);
          real _t4293#1 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_31429B,op1_e3_l_32429C,op1_e3_l_33429D);
          tensor[3] _t42A9#1 = <tensor[3]>[_t4253,_t427B,_t4293];
          tensor[3,3] hess42AB#1 = <tensor[3,3]>[_t4267,_t428F,_t42A9];
          real[3] _t42AD#1 = EigenVals3x3(hess42AB);
          real _t42B0#1 = Subscript<real[3]>(_t42AD,_t4201);
          real op1_e3_l_342B3#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (g422F);
          real op1_e3_l_442B4#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_342B3);
          real op1_e3_l_542B5#1 = λ(T0[])<Neg(T0)> (_t42B0);
          real op1_e3_l_642B6#1 = λ(T0[],T1[])<(T0 + T1)> (fBias4098,op1_e3_l_442B4);
          real str42B2#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_542B5,op1_e3_l_642B6);
          string _t42BC#1 = " <= fStrTh=";
          string _t42BE#1 = " || fMask(pos)=";
          string _t42C0#1 = " < fMaskTh=";
          string _t42C2#1 = " || fTest(pos)=";
          bool _t42C4#1 = true;
          string _t42C6#1 = " ==>DIE\n";
          Print<[string,bool,string,real,string,real,string,real,string,real,string,bool,string]>(_t41EE,_t41F5,_t41F7,str42B2,_t42BC,fStrTh4094,_t42BE,_t40EF,_t42C0,fMaskTh4096,_t42C2,_t42C4,_t42C6);
          goto JOIN42C9
        JOIN42C9:  preds = [MASSIGN42C8,COND41E6]
          die
          goto JOIN42CB
        JOIN42CB:  preds = [*DIE42CA,COND41D8]
          bool _t42CC#1 = GT<real>(travMax409E,_t40EF);
          if _t42CC then goto ASSIGN42D0 else goto JOIN42D4
        ASSIGN42D0:  preds = [COND42CE]
          bool _t42CF#1 = GT<real>(trav40C8,travMax409E);
          if _t42CF then goto DIE42D2 else goto JOIN42D3
        DIE42D2:  preds = [COND42D1]
          die
          goto JOIN42D3
        JOIN42D3:  preds = [*DIE42D2,COND42D1]
          goto JOIN42D4
        JOIN42D4:  preds = [JOIN42D3,COND42CE]
          bool _t42D5#1 = BNot(found40C4);
          if _t42D5 then goto ASSIGN42D9 else goto ASSIGN4461
        ASSIGN42D9:  preds = [COND42D7]
          int _t42D8#3 = 0;
          bool _t42DA#1 = GT<int>(nfsMax40A0,_t42D8);
          if _t42DA then goto ASSIGN42DE else goto JOIN4301
        ASSIGN42DE:  preds = [COND42DC]
          bool _t42DD#1 = GT<int>(nfs40C6,nfsMax40A0);
          if _t42DD then goto ASSIGN42E1 else goto JOIN4300
        ASSIGN42E1:  preds = [COND42DF]
          bool _t42E0#1 = GT<int>(verb40AC,_t42D8);
          if _t42E0 then goto JOIN42E4 else goto JOIN42E4
        JOIN42E4:  preds = [COND42E2,COND42E2]
          bool _t42E3#1 = phi(vv40D2,vv40D2)
          if _t42E3 then goto ASSIGN42E7 else goto ASSIGN445E
        ASSIGN42E7:  preds = [COND42E5]
          bool _t42E6#1 = true;
          goto JOIN42EA
        JOIN42EA:  preds = [ASSIGN42E7,ASSIGN445F]
          bool _t42E8#1 = phi(_t42E6,_t42E9)
          if _t42E8 then goto ASSIGN42ED else goto JOIN42FE
        ASSIGN42ED:  preds = [COND42EB]
          string _t42EC#1 = "(i#";
          string _t42EE#1 = " @ ";
          string _t42F0#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID40C0,_t42EC,iter40BC,_t42EE,pos40BE,_t42F0);
          string _t42F3#1 = "nfs=";
          string _t42F5#1 = " > nfsMax=";
          string _t42F7#1 = " || trav=";
          string _t42F9#1 = " > travMax=";
          string _t42FB#1 = " =>DIE\n";
          Print<[string,int,string,int,string,real,string,real,string]>(_t42F3,nfs40C6,_t42F5,nfsMax40A0,_t42F7,trav40C8,_t42F9,travMax409E,_t42FB);
          goto JOIN42FE
        JOIN42FE:  preds = [MASSIGN42FD,COND42EB]
          die
          goto JOIN4300
        JOIN4300:  preds = [*DIE42FF,COND42DF]
          goto JOIN4301
        JOIN4301:  preds = [JOIN4300,COND42DC]
          tensor[3] _t43F0#2 = fStep4302 (pos40BE);
          tensor[3] step43F2#3 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs40AE,_t43F0);
          tensor[3] pos43F4#2 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos40BE,step43F2);
          real op1_e3_l_543F9#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (_t43F0);
          real op1_e3_l_643FA#1 = λ(T0[],T1[])<(T0 * T0 * T1)> (sfs40AE,op1_e3_l_543F9);
          real op1_e3_l_743FB#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_643FA);
          real op1_e3_l_1143FC#3 = λ(T0[],T1[])<(T1) / ( T0)> (tipd409A,op1_e3_l_743FB);
          real op1_e3_l_1243FD#1 = λ(T0[],T1[])<(T0) - (T1)> (mvmt40CA,op1_e3_l_1143FC);
          real op1_e3_l_1443FE#1 = λ(T0[],T1[])<(T0 * T1)> (hist40B0,op1_e3_l_1243FD);
          real mvmt43F8#2 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_1143FC,op1_e3_l_1443FE);
          bool _t4406#1 = GT<real>(mvmt43F8,fsEps40A8);
          if _t4406 then goto ASSIGN4D2F else goto ASSIGN445B
        ASSIGN4D2F:  preds = [COND4408]
          real trav4409#1 = λ(T0[],T1[])<(T0 + T1)> (trav40C8,op1_e3_l_1143FC);
          int _t4413#1 = 1;
          int nfs4415#1 = IAdd(nfs40C6,_t4413);
          goto JOIN441D
        JOIN441D:  preds = [ASSIGN4416,ASSIGN445C]
          real mvmt4417#2 = phi(mvmt43F8,mvmt4418)
          real trav4419#1 = phi(trav4409,_t40EF)
          int nfs441A#1 = phi(nfs4415,nfs40C6)
          bool found441B#2 = phi(found40C4,found441C)
          bool _t441E#1 = GT<int>(verb40AC,_t42D8);
          if _t441E then goto JOIN4422 else goto JOIN4422
        JOIN4422:  preds = [COND4420,COND4420]
          bool _t4421#1 = phi(vv40D2,vv40D2)
          if _t4421 then goto ASSIGN4425 else goto ASSIGN4459
        ASSIGN4425:  preds = [COND4423]
          bool _t4424#1 = true;
          goto JOIN4428
        JOIN4428:  preds = [ASSIGN4425,ASSIGN445A]
          bool _t4426#1 = phi(_t4424,_t4427)
          if _t4426 then goto ASSIGN442B else goto JOIN443A
        ASSIGN442B:  preds = [COND4429]
          string _t442A#1 = "(i#";
          string _t442C#1 = " @ ";
          string _t442E#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID40C0,_t442A,iter40BC,_t442C,pos43F4,_t442E);
          string _t4431#1 = "step=";
          string _t4433#1 = "; mvmt=";
          string _t4435#1 = " => found=";
          string _t4437#1 = "\n";
          Print<[string,tensor[3],string,real,string,bool,string]>(_t4431,step43F2,_t4433,mvmt4417,_t4435,found441B,_t4437);
          goto JOIN443A
        JOIN443A:  preds = [MASSIGN4439,COND4429]
          goto JOIN444B
        JOIN444B:  preds = [JOIN443A,JOIN4B80]
          int born443B#1 = phi(born40CE,born443C)
          real closest443D#1 = phi(closest40CC,closest443E)
          real mvmt443F#1 = phi(mvmt4417,mvmt4440)
          real trav4441#1 = phi(trav4419,trav4442)
          int nfs4443#1 = phi(nfs441A,nfs40C6)
          bool found4444#1 = phi(found441B,found40C4)
          tensor[3] step4445#1 = phi(step43F2,step4446)
          real hh4447#1 = phi(hh40C2,hh4448)
          tensor[3] pos4449#2 = phi(pos43F4,pos444A)
          self.pos = pos4449;
          self._pos = pos4449;
          self.hh = hh4447;
          self.step = step4445;
          self.found = found4444;
          self.nfs = nfs4443;
          self.trav = trav4441;
          self.mvmt = mvmt443F;
          self.closest = closest443D;
          self.born = born443B;
          self.first = vv40D2;
          active
        ASSIGN4459:  preds = [COND4423]
          int _t4458#1 = 1;
          bool _t4427#1 = GT<int>(verb40AC,_t4458);
          goto JOIN4428
        ASSIGN445B:  preds = [COND4408]
          bool found441C#1 = true;
          real mvmt4418#1 = 0.1e1;
          goto JOIN441D
        ASSIGN445E:  preds = [COND42E5]
          int _t445D#1 = 1;
          bool _t42E9#1 = GT<int>(verb40AC,_t445D);
          goto JOIN42EA
        ASSIGN4461:  preds = [COND42D7]
          int _t4460#25 = 0;
          bool _t4462#1 = EQ<int>(_t4460,fDim40B4);
          if _t4462 then goto SAVE4465 else goto JOIN4467
        SAVE4465:  preds = [COND4464]
          self.pos = pos40BE;
          stabilize
          goto JOIN4467
        JOIN4467:  preds = [*STABILIZE4466,COND4464]
          tensor[3] _t4468#2 = fStep4302 (pos40BE);
          tensor[3] step446A#10 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs40AE,_t4468);
          tensor[3] pos446C#20 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos40BE,step446A);
          real op1_e3_l_44471#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (_t4468);
          real op1_e3_l_54472#1 = λ(T0[],T1[])<(T0 * T0 * T1)> (sfs40AE,op1_e3_l_44471);
          real op1_e3_l_64473#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_54472);
          real op1_e3_l_74474#2 = λ(T0[],T1[])<(T1) / ( T0)> (tipd409A,op1_e3_l_64473);
          real trav4470#4 = λ(T0[],T1[])<(T0 + T1)> (trav40C8,op1_e3_l_74474);
          point[] _t447A#1 = SphereQuery<3,point>(pos446C,rad40BA);
        FOREACH447D:  preds = [ASSIGN447B,NEXT4516]
          foreach (P447C in _t447A) on exit goto ASSIGN4574
            int nn4514#3 = phi(_t4460,nn4513)
            tensor[3] force44FF#4 = phi(_t40F1,force44FE)
            real oldE44D6#4 = phi(_t40EF,oldE44D5)
          tensor[3] _t447E#1 = P447C.pos;
          tensor[3] op1_e3_l_94483#3 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (_t447E,pos446C);
          real op1_e3_l_114484#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_94483,op1_e3_l_94483);
          real op1_e3_l_124485#3 = λ(T0[])<Sqrt(T0)> (op1_e3_l_114484);
          real _t4480#1 = λ(T0[],T1[])<(T1) / ( T0)> (tipd409A,op1_e3_l_124485);
          bool _t448C#1 = LT<real>(_t4480,fsEps40A8);
          if _t448C then goto ASSIGN4490 else goto JOIN4496
        ASSIGN4490:  preds = [COND448E]
          real _t448F#1 = P447C.ID;
          bool _t4491#1 = LTE<real>(ID40C0,_t448F);
          if _t4491 then goto DIE4494 else goto JOIN4495
        DIE4494:  preds = [COND4493]
          die
          goto JOIN4495
        JOIN4495:  preds = [*DIE4494,COND4493]
          goto JOIN4496
        JOIN4496:  preds = [JOIN4495,COND448E]
          real _t4497#12 = λ(T0[],T1[])<(T1) / ( T0)> (rad40BA,op1_e3_l_124485);
          real _t44A3#2 = 0.2e1;
          real _t44A5#2 = 0.3e1;
          real _t44A7#2 = λ(T0[],T1[])<(T0) / ( T1)> (_t44A3,_t44A5);
          bool _t44A9#2 = LT<real>(_t4497,_t44A7);
          if _t44A9 then goto ASSIGN44AD else goto ASSIGN4544
        ASSIGN44AD:  preds = [COND44AB]
          real _t44AC#1 = 0.1e1;
          real _t44AE#1 = -0.5646e1;
          real _t44B0#1 = 0.119835e2;
          real _t44B2#1 = -0.113535e2;
          real _t44B4#1 = 0.40550625e1;
          real op1_e3_l_5844BD#1 = λ(T0[],T1[])<(T0 * T1)> (_t44B4,_t4497);
          real op1_e3_l_6044BE#1 = λ(T0[],T1[])<(T0 + T1)> (_t44B2,op1_e3_l_5844BD);
          real op1_e3_l_6144BF#1 = λ(T0[],T1[])<(T0 * T1)> (_t4497,op1_e3_l_6044BE);
          real op1_e3_l_6344C0#1 = λ(T0[],T1[])<(T0 + T1)> (_t44B0,op1_e3_l_6144BF);
          real op1_e3_l_6444C1#1 = λ(T0[],T1[])<(T0 * T1)> (_t4497,op1_e3_l_6344C0);
          real op1_e3_l_6644C2#1 = λ(T0[],T1[])<(T0 + T1)> (_t44AE,op1_e3_l_6444C1);
          real op1_e3_l_6744C3#1 = λ(T0[],T1[])<(T0 * T1)> (_t4497,op1_e3_l_6644C2);
          real _t44B6#1 = λ(T0[],T1[])<(T0 + T1)> (_t44AC,op1_e3_l_6744C3);
          goto JOIN44D4
        JOIN44D4:  preds = [ASSIGN44D1,JOIN4572]
          real _t44D2#1 = phi(_t44B6,_t44D3)
          real oldE44D5#1 = λ(T0[],T1[])<(T0 + T1)> (oldE44D6,_t44D2);
          if _t44A9 then goto ASSIGN44DA else goto ASSIGN4518
        ASSIGN44DA:  preds = [COND44D8]
          real _t44D9#1 = -0.5646e1;
          real _t44DB#1 = 0.23967e2;
          real _t44DD#1 = -0.340605e2;
          real _t44DF#1 = 0.1622025e2;
          real op1_e3_l_4444E8#1 = λ(T0[],T1[])<(T0 * T1)> (_t44DF,_t4497);
          real op1_e3_l_4644E9#1 = λ(T0[],T1[])<(T0 + T1)> (_t44DD,op1_e3_l_4444E8);
          real op1_e3_l_4744EA#1 = λ(T0[],T1[])<(T0 * T1)> (_t4497,op1_e3_l_4644E9);
          real op1_e3_l_4944EB#1 = λ(T0[],T1[])<(T0 + T1)> (_t44DB,op1_e3_l_4744EA);
          real op1_e3_l_5044EC#1 = λ(T0[],T1[])<(T0 * T1)> (_t4497,op1_e3_l_4944EB);
          real _t44E1#1 = λ(T0[],T1[])<(T0 + T1)> (_t44D9,op1_e3_l_5044EC);
          goto JOIN44FB
        JOIN44FB:  preds = [ASSIGN44F8,JOIN4542]
          real _t44F9#1 = phi(_t44E1,_t44FA)
          real _t44FC#1 = 0.1e1;
          real op1_e3_l_144502#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t44FC,rad40BA);
          tensor[3] op1_e3_l_234505#1 = λ(T0[],T1[],T2[3])<(T0 * T1 * T2_{i0})>_{3} (_t44F9,op1_e3_l_144502,op1_e3_l_94483);
          tensor[3] op1_e3_l_254507#1 = λ(T0[3],T1[])<(T0_{i0}) / ( T1)>_{3} (op1_e3_l_234505,op1_e3_l_124485);
          tensor[3] force44FE#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (force44FF,op1_e3_l_254507);
          int _t4511#1 = 1;
          int nn4513#1 = IAdd(nn4514,_t4511);
          goto FOREACH447D
        ASSIGN4518:  preds = [COND44D8]
          real _t4517#1 = 0.1e1;
          bool _t4519#1 = LT<real>(_t4497,_t4517);
          if _t4519 then goto ASSIGN451D else goto JOIN4542
        ASSIGN451D:  preds = [COND451B]
          real _t451C#1 = 0.1234567901e-1;
          real _t451E#2 = 0.486e1;
          real _t4520#1 = -0.1458e2;
          real _t4522#1 = 0.1458e2;
          real op1_e3_l_42452B#1 = λ(T0[],T1[])<(T0 * T1)> (_t44A5,_t4497);
          real op1_e3_l_73452C#4 = λ(T0[],T1[])<(T1) - (T0)> (_t44A3,op1_e3_l_42452B);
          real op1_e3_l_74452D#1 = λ(T0[],T1[])<(T0 * T1)> (_t451E,op1_e3_l_73452C);
          real op1_e3_l_76452E#1 = λ(T0[],T1[])<(T0) - (T1)> (_t4522,op1_e3_l_74452D);
          real op1_e3_l_77452F#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_73452C,op1_e3_l_76452E);
          real op1_e3_l_794530#1 = λ(T0[],T1[])<(T0 + T1)> (_t4520,op1_e3_l_77452F);
          real op1_e3_l_804531#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_73452C,op1_e3_l_794530);
          real op1_e3_l_824532#1 = λ(T0[],T1[])<(T0 + T1)> (_t451E,op1_e3_l_804531);
          real _t4524#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t451C,op1_e3_l_73452C,op1_e3_l_824532);
          goto JOIN4542
        JOIN4542:  preds = [ASSIGN4541,COND451B]
          real _t44FA#1 = phi(_t4524,_t40EF)
          goto JOIN44FB
        ASSIGN4544:  preds = [COND44AB]
          real _t4543#1 = 0.1e1;
          bool _t4545#1 = LT<real>(_t4497,_t4543);
          if _t4545 then goto ASSIGN4549 else goto JOIN4572
        ASSIGN4549:  preds = [COND4547]
          real _t4548#1 = -0.1e-2;
          real _t454A#1 = 0.9e-1;
          real _t454C#1 = -0.54e0;
          real _t454E#1 = 0.1215e1;
          real _t4550#1 = 0.972e0;
          real op1_e3_l_50455A#5 = λ(T0[],T1[])<(T0) - (T1)> (_t4497,_t44A7);
          real op1_e3_l_51455B#1 = λ(T0[],T1[])<(T0 * T1)> (_t4550,op1_e3_l_50455A);
          real op1_e3_l_62455C#1 = λ(T0[],T1[])<(T0) - (T1)> (_t454E,op1_e3_l_51455B);
          real op1_e3_l_64455D#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_62455C,op1_e3_l_50455A);
          real op1_e3_l_75455E#1 = λ(T0[],T1[])<(T0 + T1)> (_t454C,op1_e3_l_64455D);
          real op1_e3_l_77455F#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_75455E,op1_e3_l_50455A);
          real op1_e3_l_984560#1 = λ(T0[],T1[])<(T0 + T1)> (_t454A,op1_e3_l_77455F);
          real op1_e3_l_1014561#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (op1_e3_l_984560,op1_e3_l_50455A,op1_e3_l_50455A);
          real _t4552#1 = λ(T0[],T1[])<(T0 + T1)> (_t4548,op1_e3_l_1014561);
          goto JOIN4572
        JOIN4572:  preds = [ASSIGN4571,COND4547]
          real _t44D3#1 = phi(_t4552,_t40EF)
          goto JOIN44D4
        ASSIGN4574:  preds = [FOREACH447D]
          bool _t4573#1 = EQ<int>(_t4460,nn4514);
          if _t4573 then goto ASSIGN4577 else goto JOIN47CF
        ASSIGN4577:  preds = [COND4575]
          bool _t4576#1 = GT<int>(pcp40B2,_t4460);
          if _t4576 then goto ASSIGN457A else goto JOIN4583
        ASSIGN457A:  preds = [COND4578]
          bool _t4579#1 = GT<int>(iter40BC,_t4460);
          if _t4579 then goto ASSIGN457D else goto JOIN4581
        ASSIGN457D:  preds = [COND457B]
          int _t457C#1 = IMod(iter40BC,pcp40B2);
          bool _t457E#1 = EQ<int>(_t4460,_t457C);
          goto JOIN4581
        JOIN4581:  preds = [ASSIGN457F,COND457B]
          bool _t4580#1 = phi(_t457E,vv40D2)
          goto JOIN4583
        JOIN4583:  preds = [JOIN4581,COND4578]
          bool _t4582#1 = phi(_t4580,vv40D2)
          if _t4582 then goto ASSIGN4586 else goto JOIN4592
        ASSIGN4586:  preds = [COND4584]
          int _t4585#1 = IDiv(iter40BC,pcp40B2);
          int _t4587#2 = 2;
          int _t4589#1 = IMod(_t4585,_t4587);
          int _t458B#1 = IMul(_t4589,_t4587);
          int _t458D#1 = 1;
          int _t458F#1 = ISub(_t458B,_t458D);
          goto JOIN4592
        JOIN4592:  preds = [ASSIGN4590,COND4584]
          int _t4591#1 = phi(_t458F,_t4460)
          bool _t4593#1 = GT<int>(_t4591,_t4460);
          if _t4593 then goto ASSIGN4597 else goto JOIN4599
        ASSIGN4597:  preds = [COND4595]
          bool _t4596#1 = LT<int>(born40CE,nnmax40B8);
          goto JOIN4599
        JOIN4599:  preds = [ASSIGN4597,COND4595]
          bool _t4598#1 = phi(_t4596,vv40D2)
          bool _t459A#1 = BNot(_t4598);
          if _t459A then goto SAVE459D else goto JOIN45A2
        SAVE459D:  preds = [COND459C]
          self.pos = pos446C;
          self._pos = pos446C;
          self.step = step446A;
          self.trav = trav4470;
          active
          goto JOIN45A2
        JOIN45A2:  preds = [*ACTIVE45A1,COND459C]
          tensor[3,3] _t4647#3 = fPerp45A3 (pos446C);
          tensor[3] _t4649#1 = <tensor[3]>[tipd409A,_t40EF,_t40EF];
          tensor[3] noff0464B#3 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (_t4647,_t4649);
          tensor[3] _t464D#1 = <tensor[3]>[_t40EF,tipd409A,_t40EF];
          tensor[3] noff1464F#3 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (_t4647,_t464D);
          tensor[3] _t4651#1 = <tensor[3]>[_t40EF,_t40EF,tipd409A];
          tensor[3] noff24653#3 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (_t4647,_t4651);
          real op1_e3_l_44657#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (noff0464B,noff0464B);
          real _t4655#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_44657);
          real op1_e3_l_4465D#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (noff1464F,noff1464F);
          real _t465B#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_4465D);
          bool _t4661#1 = GT<real>(_t4655,_t465B);
          if _t4661 then goto JOIN4665 else goto JOIN4665
        JOIN4665:  preds = [COND4663,COND4663]
          tensor[3] _t4664#2 = phi(noff0464B,noff1464F)
          real op1_e3_l_14667#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (_t4664);
          real _t4666#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_14667);
          real op1_e3_l_4466C#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (noff24653,noff24653);
          real _t466A#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_4466C);
          bool _t4670#1 = GT<real>(_t4666,_t466A);
          if _t4670 then goto JOIN4674 else goto JOIN4674
        JOIN4674:  preds = [COND4672,COND4672]
          tensor[3] _t4673#2 = phi(_t4664,noff24653)
          real op1_e3_l_64676#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (_t4673);
          real op1_e3_l_74677#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_64676);
          real op1_e3_l_84678#1 = λ(T0[])<(1) / ( T0)> (op1_e3_l_74677);
          tensor[3] op1_e3_l_94679#2 = λ(T0[],T1[3],T2[])<(T0 * T1_{i0} * T2)>_{3} (tipd409A,_t4673,op1_e3_l_84678);
          tensor[3] npos4675#1 = λ(T0[3],T1[3],T2[3])<(T1_{i0} + T0_{i0} + T2_{i0})>_{3} (pos40BE,op1_e3_l_94679,step446A);
          tensor[3] _t4681#1 = fStep4302 (npos4675);
          tensor[3] op1_e3_l_134689#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs40AE,_t4681);
          tensor[3] npos4683#5 = λ(T0[3],T1[3],T2[3],T3[3])<(T1_{i0} + T0_{i0} + T2_{i0} + T3_{i0})>_{3} (pos40BE,op1_e3_l_94679,step446A,op1_e3_l_134689);
          bool _t4691#2 = GT<int>(verb40AC,_t4460);
          if _t4691 then goto JOIN4695 else goto JOIN4695
        JOIN4695:  preds = [COND4693,COND4693]
          bool _t4694#1 = phi(vv40D2,vv40D2)
          if _t4694 then goto ASSIGN4698 else goto ASSIGN4BD2
        ASSIGN4698:  preds = [COND4696]
          bool _t4697#1 = true;
          goto JOIN469B
        JOIN469B:  preds = [ASSIGN4698,ASSIGN4BD3]
          bool _t4699#1 = phi(_t4697,_t469A)
          if _t4699 then goto ASSIGN469E else goto JOIN46C3
        ASSIGN469E:  preds = [COND469C]
          string _t469D#1 = "(i#";
          string _t469F#1 = " @ ";
          string _t46A1#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID40C0,_t469D,iter40BC,_t469F,pos446C,_t46A1);
          string _t46A4#1 = " 0==nn =>NEW(";
          string _t46A6#1 = ") w/ ID=";
          real _t46A8#1 = 0.1e7;
          real _t46AA#1 = TensorIndex<tensor[3],[0]>(npos4683);
          real _t46AC#1 = urnd403D (_t46AA);
          real _t46AE#1 = TensorIndex<tensor[3],[1]>(npos4683);
          real _t46B0#1 = urnd403D (_t46AE);
          real _t46B2#1 = TensorIndex<tensor[3],[2]>(npos4683);
          real _t46B4#1 = urnd403D (_t46B2);
          real _t46B6#1 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (_t46AC,_t46B0,_t46B4);
          real _t46B8#1 = 0.1e1;
          real _t46BA#1 = MathFn<fmod>(_t46B6,_t46B8);
          real _t46BC#1 = λ(T0[],T1[])<(T0 * T1)> (_t46A8,_t46BA);
          real _t46BE#1 = MathFn<floor>(_t46BC);
          string _t46C0#1 = "\n";
          Print<[string,tensor[3],string,real,string]>(_t46A4,npos4683,_t46A6,_t46BE,_t46C0);
          goto JOIN46C3
        JOIN46C3:  preds = [MASSIGN46C2,COND469C]
          tensor[3] op1_e3_l_846C7#2 = λ(T0[3],T1[3])<(T1_{i0}) - (T0_{i0})>_{3} (_t40F1,pos446C);
          real op1_e3_l_1046C8#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_846C7,op1_e3_l_846C7);
          real _t46C4#2 = λ(T0[])<Sqrt(T0)> (op1_e3_l_1046C8);
          bool _t46CE#1 = LT<real>(_t46C4,_t40F9);
          if _t46CE then goto ASSIGN46D2 else goto JOIN46D6
        ASSIGN46D2:  preds = [COND46D0]
          real _t46D1#1 = 0.3e1;
          bool _t46D3#1 = GT<real>(_t46C4,_t46D1);
          goto JOIN46D6
        JOIN46D6:  preds = [ASSIGN46D4,COND46D0]
          bool _t46D5#1 = phi(_t46D3,vv40D2)
          if _t46D5 then goto ASSIGN46D9 else goto JOIN47A8
        ASSIGN46D9:  preds = [COND46D7]
          real x46D8#5 = TensorIndex<tensor[3],[0]>(pos446C);
          real y46DA#5 = TensorIndex<tensor[3],[1]>(pos446C);
          real z46DC#6 = TensorIndex<tensor[3],[2]>(pos446C);
          real _t46DE#6 = 0.2e1;
          int _t46E0#1 = 2;
          real op1_e3_l_646E3#2 = λ(T0[])<(T0)^2> (x46D8);
          real op1_e3_l_746E4#2 = λ(T0[])<(T0)^2> (y46DA);
          real op1_e3_l_846E5#8 = λ(T0[])<(T0)^2> (z46DC);
          real op1_e3_l_946E6#2 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_646E3,op1_e3_l_746E4,op1_e3_l_846E5);
          real op1_e3_l_1146E7#7 = λ(T0[])<Cosine(T0)> (op1_e3_l_946E6);
          real _t46E2#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t46DE,x46D8,op1_e3_l_846E5,op1_e3_l_1146E7);
          real _t46EE#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t46DE,y46DA,op1_e3_l_846E5,op1_e3_l_1146E7);
          real op1_e3_l_1446FF#3 = λ(T0[])<(T0)^3> (z46DC);
          real op1_e3_l_204701#8 = λ(T0[])<Sine(T0)> (op1_e3_l_946E6);
          real op1_e3_l_214702#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t46DE,op1_e3_l_1446FF,op1_e3_l_1146E7);
          real op1_e3_l_224703#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t46DE,z46DC,op1_e3_l_204701);
          real _t46FA#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_214702,op1_e3_l_224703);
          tensor[3] g470E#1 = <tensor[3]>[_t46E2,_t46EE,_t46FA];
          real _t4712#6 = -0.4e1;
          real op1_e3_l_24471B#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t4712,op1_e3_l_646E3,op1_e3_l_846E5,op1_e3_l_204701);
          real op1_e3_l_25471C#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t46DE,op1_e3_l_846E5,op1_e3_l_1146E7);
          real _t4714#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_24471B,op1_e3_l_25471C);
          real _t4726#2 = λ(T0[],T1[],T2[],T3[],T4[])<(T0 * T1 * T2 * T3 * T4)> (_t4712,x46D8,y46DA,op1_e3_l_846E5,op1_e3_l_204701);
          real op1_e3_l_23473A#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t4712,x46D8,op1_e3_l_1446FF,op1_e3_l_204701);
          real op1_e3_l_24473B#1 = λ(T0[],T1[],T2[],T3[])<(T2 * T0 * T1 * T3)> (x46D8,z46DC,_t40F9,op1_e3_l_1146E7);
          real _t4732#2 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_23473A,op1_e3_l_24473B);
          tensor[3] _t4746#1 = <tensor[3]>[_t4714,_t4726,_t4732];
          real op1_e3_l_24474F#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t4712,op1_e3_l_746E4,op1_e3_l_846E5,op1_e3_l_204701);
          real _t4748#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_24474F,op1_e3_l_25471C);
          real op1_e3_l_234762#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t4712,y46DA,op1_e3_l_1446FF,op1_e3_l_204701);
          real op1_e3_l_244763#1 = λ(T0[],T1[],T2[],T3[])<(T2 * T0 * T1 * T3)> (y46DA,z46DC,_t40F9,op1_e3_l_1146E7);
          real _t475A#2 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_234762,op1_e3_l_244763);
          tensor[3] _t476E#1 = <tensor[3]>[_t4726,_t4748,_t475A];
          real _t4770#1 = 0.1e2;
          real op1_e3_l_184777#1 = λ(T0[])<(T0)^4> (z46DC);
          real op1_e3_l_31477A#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t4712,op1_e3_l_184777,op1_e3_l_204701);
          real op1_e3_l_32477B#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t4770,op1_e3_l_846E5,op1_e3_l_1146E7);
          real op1_e3_l_33477C#1 = λ(T0[],T1[])<(T0 * T1)> (_t46DE,op1_e3_l_204701);
          real _t4772#1 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_31477A,op1_e3_l_32477B,op1_e3_l_33477C);
          tensor[3] _t4788#1 = <tensor[3]>[_t4732,_t475A,_t4772];
          tensor[3,3] hess478A#1 = <tensor[3,3]>[_t4746,_t476E,_t4788];
          real[3] _t478C#1 = EigenVals3x3(hess478A);
          real _t478F#1 = Subscript<real[3]>(_t478C,_t46E0);
          real op1_e3_l_34792#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (g470E);
          real op1_e3_l_44793#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_34792);
          real op1_e3_l_54794#1 = λ(T0[])<Neg(T0)> (_t478F);
          real op1_e3_l_64795#1 = λ(T0[],T1[])<(T0 + T1)> (fBias4098,op1_e3_l_44793);
          real str4791#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_54794,op1_e3_l_64795);
          bool _t479B#1 = GT<real>(str4791,fStrTh4094);
          if _t479B then goto ASSIGN479F else goto JOIN47A6
        ASSIGN479F:  preds = [COND479D]
          bool _t479E#1 = GTE<real>(_t40EF,fMaskTh4096);
          if _t479E then goto ASSIGN47A2 else goto JOIN47A4
        ASSIGN47A2:  preds = [COND47A0]
          bool _t47A1#1 = true;
          goto JOIN47A4
        JOIN47A4:  preds = [ASSIGN47A2,COND47A0]
          bool _t47A3#1 = phi(_t47A1,vv40D2)
          goto JOIN47A6
        JOIN47A6:  preds = [JOIN47A4,COND479D]
          bool _t47A5#1 = phi(_t47A3,vv40D2)
          goto JOIN47A8
        JOIN47A8:  preds = [JOIN47A6,COND46D7]
          bool _t47A7#1 = phi(_t47A5,vv40D2)
          if _t47A7 then goto NEW47AA else goto JOIN47B0
        NEW47AA:  preds = [COND47A9]
          new point(npos4683,hh40C2);
          int _t47AB#1 = 1;
          int born47AD#1 = IAdd(born40CE,_t47AB);
          goto JOIN47B0
        JOIN47B0:  preds = [ASSIGN47AE,COND47A9]
          int born47AF#1 = phi(born47AD,born40CE)
          if _t4691 then goto JOIN47B3 else goto JOIN47B3
        JOIN47B3:  preds = [COND47B1,COND47B1]
          bool _t47B2#1 = phi(vv40D2,vv40D2)
          if _t47B2 then goto ASSIGN47B6 else goto ASSIGN4BCF
        ASSIGN47B6:  preds = [COND47B4]
          bool _t47B5#1 = true;
          goto JOIN47B9
        JOIN47B9:  preds = [ASSIGN47B6,ASSIGN4BD0]
          bool _t47B7#1 = phi(_t47B5,_t47B8)
          if _t47B7 then goto ASSIGN47BC else goto JOIN47C7
        ASSIGN47BC:  preds = [COND47BA]
          string _t47BB#1 = "(i#";
          string _t47BD#1 = " @ ";
          string _t47BF#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID40C0,_t47BB,iter40BC,_t47BD,pos446C,_t47BF);
          string _t47C2#1 = "nn=0; after birthing mvmt=";
          string _t47C4#1 = "\n";
          Print<[string,real,string]>(_t47C2,mvmt40CA,_t47C4);
          goto JOIN47C7
        JOIN47C7:  preds = [MASSIGN47C6,COND47BA]
          self.pos = pos446C;
          self._pos = pos446C;
          self.step = step446A;
          self.trav = trav4470;
          self.born = born47AF;
          active
          goto JOIN47CF
        JOIN47CF:  preds = [*ACTIVE47CD,COND4575]
          int born47CE#9 = phi(born40CE)
          tensor[3,3] _t47D0#1 = fPerp45A3 (pos446C);
          tensor[3] op1_e3_l_347D3#4 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (_t47D0,force44FF);
          tensor[3] es47D2#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (hh40C2,op1_e3_l_347D3);
          real op1_e3_l_547D8#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_347D3,op1_e3_l_347D3);
          real op1_e3_l_647D9#1 = λ(T0[],T1[])<(T0 * T0 * T1)> (hh40C2,op1_e3_l_547D8);
          real _t47D6#2 = λ(T0[])<Sqrt(T0)> (op1_e3_l_647D9);
          bool _t47DE#1 = GT<real>(_t47D6,tipd409A);
          if _t47DE then goto ASSIGN4CFA else goto JOIN47FB
        ASSIGN4CFA:  preds = [COND47E0]
          real op1_e3_l_1047E6#2 = λ(T0[],T1[])<(T0) / ( T1)> (tipd409A,_t47D6);
          real hh47E1#1 = λ(T0[],T1[])<(T0 * T1)> (hh40C2,op1_e3_l_1047E6);
          tensor[3] es47ED#1 = λ(T0[],T1[],T2[3])<(T0 * T1 * T2_{i0})>_{3} (hh40C2,op1_e3_l_1047E6,op1_e3_l_347D3);
          goto JOIN47FB
        JOIN47FB:  preds = [ASSIGN4CFB,COND47E0]
          tensor[3] es47F9#6 = phi(es47ED,es47D2)
          real hh47FA#2 = phi(hh47E1,hh40C2)
          tensor[3] _t47FC#1 = λ(T0[3],T1[3],T2[3])<(T0_{i0} + T2_{i0} + T1_{i0})>_{3} (pos40BE,es47F9,step446A);
          tensor[3] _t4800#2 = fStep4302 (_t47FC);
          tensor[3] fs4802#4 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs40AE,_t4800);
          real op1_e3_l_54805#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (_t4800);
          real op1_e3_l_64806#1 = λ(T0[],T1[])<(T0 * T0 * T1)> (sfs40AE,op1_e3_l_54805);
          real op1_e3_l_74807#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (es47F9);
          real op1_e3_l_84808#1 = λ(T0[],T1[])<(T0 * T1)> (fsEps40A8,tipd409A);
          real op1_e3_l_94809#2 = λ(T0[])<Sqrt(T0)> (op1_e3_l_74807);
          real op1_e3_l_10480A#2 = λ(T0[])<Sqrt(T0)> (op1_e3_l_64806);
          real op1_e3_l_11480B#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_84808,op1_e3_l_94809);
          real _t4804#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_10480A,op1_e3_l_11480B);
          real _t4814#3 = 0.5e0;
          bool _t4816#1 = GT<real>(_t4804,_t4814);
          if _t4816 then goto ASSIGN481A else goto JOIN4854
        ASSIGN481A:  preds = [COND4818]
          real hh4819#2 = λ(T0[],T1[])<(T0 * T1)> (hh47FA,_t4814);
          bool _t481B#1 = GT<int>(verb40AC,_t4460);
          if _t481B then goto JOIN481F else goto JOIN481F
        JOIN481F:  preds = [COND481D,COND481D]
          bool _t481E#1 = phi(vv40D2,vv40D2)
          if _t481E then goto ASSIGN4822 else goto ASSIGN4BCC
        ASSIGN4822:  preds = [COND4820]
          bool _t4821#1 = true;
          goto JOIN4825
        JOIN4825:  preds = [ASSIGN4822,ASSIGN4BCD]
          bool _t4823#1 = phi(_t4821,_t4824)
          if _t4823 then goto ASSIGN4828 else goto JOIN484B
        ASSIGN4828:  preds = [COND4826]
          string _t4827#1 = "(i#";
          string _t4829#1 = " @ ";
          string _t482B#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID40C0,_t4827,iter40BC,_t4829,pos446C,_t482B);
          string _t482E#1 = "nn=";
          string _t4830#1 = "; |fs|/|es|=";
          real _t4832#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_10480A,op1_e3_l_94809);
          string _t483E#1 = " > 0.5; trying again with hh=";
          string _t4840#1 = "; mvmt=";
          string _t4842#3 = "\n";
          Print<[string,int,string,real,string,real,string,real,string]>(_t482E,nn4514,_t4830,_t4832,_t483E,hh4819,_t4840,mvmt40CA,_t4842);
          string _t4845#1 = "        fs=";
          Print<[string,tensor[3],string]>(_t4845,fs4802,_t4842);
          string _t4848#1 = "        es=";
          Print<[string,tensor[3],string]>(_t4848,es47F9,_t4842);
          goto JOIN484B
        JOIN484B:  preds = [MASSIGN484A,COND4826]
          self.pos = pos446C;
          self._pos = pos446C;
          self.hh = hh4819;
          self.step = step446A;
          self.trav = trav4470;
          self.born = born47CE;
          active
          goto JOIN4854
        JOIN4854:  preds = [*ACTIVE4852,COND4818]
          real hh4853#2 = phi(hh47FA)
          tensor[3] pos4855#7 = λ(T0[3],T1[3],T2[3],T3[3])<(T0_{i0} + T2_{i0} + T3_{i0} + T1_{i0})>_{3} (pos40BE,es47F9,step446A,fs4802);
          point[] _t485B#1 = SphereQuery<3,point>(pos4855,rad40BA);
        FOREACH485E:  preds = [ASSIGN485C,NEXT48C4]
          foreach (P485D in _t485B) on exit goto ASSIGN48F8
            tensor[3] mno48B5#2 = phi(_t40F1,mno48B4)
            real newE48B0#6 = phi(_t40EF,newE48AF)
            int nn48C2#9 = phi(_t4460,nn48C1)
            real closest443E#3 = phi(rad40BA,closest48B2)
          tensor[3] _t485F#1 = P485D.pos;
          tensor[3] op1_e3_l_134865#3 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (_t485F,pos4855);
          real op1_e3_l_154866#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_134865,op1_e3_l_134865);
          real _t4861#2 = λ(T0[])<Sqrt(T0)> (op1_e3_l_154866);
          real _t486D#7 = λ(T0[],T1[])<(T1) / ( T0)> (rad40BA,_t4861);
          real _t487B#1 = 0.2e1;
          real _t487D#1 = 0.3e1;
          real _t487F#2 = λ(T0[],T1[])<(T0) / ( T1)> (_t487B,_t487D);
          bool _t4881#1 = LT<real>(_t486D,_t487F);
          if _t4881 then goto ASSIGN4885 else goto ASSIGN48C6
        ASSIGN4885:  preds = [COND4883]
          real _t4884#1 = 0.1e1;
          real _t4886#1 = -0.5646e1;
          real _t4888#1 = 0.119835e2;
          real _t488A#1 = -0.113535e2;
          real _t488C#1 = 0.40550625e1;
          real op1_e3_l_784896#1 = λ(T0[],T1[])<(T0 * T1)> (_t488C,_t486D);
          real op1_e3_l_804897#1 = λ(T0[],T1[])<(T0 + T1)> (_t488A,op1_e3_l_784896);
          real op1_e3_l_814898#1 = λ(T0[],T1[])<(T0 * T1)> (_t486D,op1_e3_l_804897);
          real op1_e3_l_834899#1 = λ(T0[],T1[])<(T0 + T1)> (_t4888,op1_e3_l_814898);
          real op1_e3_l_84489A#1 = λ(T0[],T1[])<(T0 * T1)> (_t486D,op1_e3_l_834899);
          real op1_e3_l_86489B#1 = λ(T0[],T1[])<(T0 + T1)> (_t4886,op1_e3_l_84489A);
          real op1_e3_l_87489C#1 = λ(T0[],T1[])<(T0 * T1)> (_t486D,op1_e3_l_86489B);
          real _t488E#1 = λ(T0[],T1[])<(T0 + T1)> (_t4884,op1_e3_l_87489C);
          goto JOIN48AE
        JOIN48AE:  preds = [ASSIGN48AB,JOIN48F6]
          real _t48AC#1 = phi(_t488E,_t48AD)
          real newE48AF#1 = λ(T0[],T1[])<(T0 + T1)> (newE48B0,_t48AC);
          real closest48B2#1 = Min<real>(closest443E,_t4861);
          tensor[3] mno48B4#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (mno48B5,op1_e3_l_134865);
          int _t48BF#1 = 1;
          int nn48C1#1 = IAdd(nn48C2,_t48BF);
          goto FOREACH485E
        ASSIGN48C6:  preds = [COND4883]
          real _t48C5#1 = 0.1e1;
          bool _t48C7#1 = LT<real>(_t486D,_t48C5);
          if _t48C7 then goto ASSIGN48CB else goto JOIN48F6
        ASSIGN48CB:  preds = [COND48C9]
          real _t48CA#1 = -0.1e-2;
          real _t48CC#1 = 0.9e-1;
          real _t48CE#1 = -0.54e0;
          real _t48D0#1 = 0.1215e1;
          real _t48D2#1 = 0.972e0;
          real op1_e3_l_6748DD#5 = λ(T0[],T1[])<(T0) - (T1)> (_t486D,_t487F);
          real op1_e3_l_6848DE#1 = λ(T0[],T1[])<(T0 * T1)> (_t48D2,op1_e3_l_6748DD);
          real op1_e3_l_8148DF#1 = λ(T0[],T1[])<(T0) - (T1)> (_t48D0,op1_e3_l_6848DE);
          real op1_e3_l_8348E0#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_8148DF,op1_e3_l_6748DD);
          real op1_e3_l_9648E1#1 = λ(T0[],T1[])<(T0 + T1)> (_t48CE,op1_e3_l_8348E0);
          real op1_e3_l_9848E2#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_9648E1,op1_e3_l_6748DD);
          real op1_e3_l_12348E3#1 = λ(T0[],T1[])<(T0 + T1)> (_t48CC,op1_e3_l_9848E2);
          real op1_e3_l_12648E4#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (op1_e3_l_12348E3,op1_e3_l_6748DD,op1_e3_l_6748DD);
          real _t48D4#1 = λ(T0[],T1[])<(T0 + T1)> (_t48CA,op1_e3_l_12648E4);
          goto JOIN48F6
        JOIN48F6:  preds = [ASSIGN48F5,COND48C9]
          real _t48AD#1 = phi(_t48D4,_t40EF)
          goto JOIN48AE
        ASSIGN48F8:  preds = [FOREACH485E]
          real _t48F7#2 = IntToReal(nn48C2);
          bool _t48F9#2 = GT<int>(verb40AC,_t4460);
          if _t48F9 then goto JOIN48FD else goto JOIN48FD
        JOIN48FD:  preds = [COND48FB,COND48FB]
          bool _t48FC#1 = phi(vv40D2,vv40D2)
          if _t48FC then goto ASSIGN4900 else goto ASSIGN4BC9
        ASSIGN4900:  preds = [COND48FE]
          bool _t48FF#1 = true;
          goto JOIN4903
        JOIN4903:  preds = [ASSIGN4900,ASSIGN4BCA]
          bool _t4901#1 = phi(_t48FF,_t4902)
          if _t4901 then goto ASSIGN4906 else goto JOIN4915
        ASSIGN4906:  preds = [COND4904]
          string _t4905#1 = "(i#";
          string _t4907#1 = " @ ";
          string _t4909#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID40C0,_t4905,iter40BC,_t4907,pos4855,_t4909);
          string _t490C#1 = "nn=";
          string _t490E#1 = "; oldE=";
          string _t4910#1 = " newE=";
          string _t4912#1 = "\n";
          Print<[string,int,string,real,string,real,string]>(_t490C,nn48C2,_t490E,oldE44D6,_t4910,newE48B0,_t4912);
          goto JOIN4915
        JOIN4915:  preds = [MASSIGN4914,COND4904]
          real _t4916#2 = λ(T0[],T1[])<(T0) - (T1)> (newE48B0,oldE44D6);
          tensor[3] _t4918#2 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (pos4855,pos446C);
          tensor[3] op1_e3_l_174928#1 = λ(T0[3])<Neg(T0_{i0})>_{3} (force44FF);
          real op1_e3_l_184929#2 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (_t4918,op1_e3_l_174928);
          real _t4922#1 = λ(T0[],T1[])<(T0 * T1)> (gdeTest40A2,op1_e3_l_184929);
          bool _t4932#1 = GT<real>(_t4916,_t4922);
          if _t4932 then goto ASSIGN4936 else goto JOIN4990
        ASSIGN4936:  preds = [COND4934]
          real hh4935#3 = λ(T0[],T1[])<(T0 * T1)> (hh4853,gdeBack40A4);
          bool _t4937#1 = EQ<real>(_t40EF,hh4935);
          if _t4937 then goto ASSIGN493B else goto JOIN4945
        ASSIGN493B:  preds = [COND4939]
          string _t493A#1 = "(i#";
          string _t493C#1 = " @ ";
          string _t493E#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID40C0,_t493A,iter40BC,_t493C,pos4855,_t493E);
          string _t4941#1 = "backtracked all the way to hh=0\n";
          Print<[string]>(_t4941);
          die
          goto JOIN4945
        JOIN4945:  preds = [*DIE4944,COND4939]
          if _t48F9 then goto JOIN4948 else goto JOIN4948
        JOIN4948:  preds = [COND4946,COND4946]
          bool _t4947#1 = phi(vv40D2,vv40D2)
          if _t4947 then goto ASSIGN494B else goto ASSIGN4BC6
        ASSIGN494B:  preds = [COND4949]
          bool _t494A#1 = true;
          goto JOIN494E
        JOIN494E:  preds = [ASSIGN494B,ASSIGN4BC7]
          bool _t494C#1 = phi(_t494A,_t494D)
          if _t494C then goto ASSIGN4951 else goto JOIN4986
        ASSIGN4951:  preds = [COND494F]
          string _t4950#1 = "(i#";
          string _t4952#1 = " @ ";
          string _t4954#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID40C0,_t4950,iter40BC,_t4952,pos4855,_t4954);
          string _t4957#1 = "nn=";
          string _t4959#1 = "; oldE=";
          string _t495B#1 = " newE=";
          string _t495D#1 = "; backtracking; hh=";
          string _t495F#1 = "; mvmt=";
          string _t4961#7 = "\n";
          Print<[string,int,string,real,string,real,string,real,string,real,string]>(_t4957,nn48C2,_t4959,oldE44D6,_t495B,newE48B0,_t495D,hh4935,_t495F,mvmt40CA,_t4961);
          string _t4964#1 = "      fs=";
          Print<[string,tensor[3],string]>(_t4964,fs4802,_t4961);
          string _t4967#1 = "      es=";
          Print<[string,tensor[3],string]>(_t4967,es47F9,_t4961);
          string _t496A#1 = "      newE - oldE=";
          Print<[string,real,string]>(_t496A,_t4916,_t4961);
          string _t496D#1 = "      force=";
          Print<[string,tensor[3],string]>(_t496D,force44FF,_t4961);
          string _t4970#1 = "      dpos=";
          Print<[string,tensor[3],string]>(_t4970,_t4918,_t4961);
          string _t4973#1 = "      0.5*(pos - oldpos).(-force)=";
          real _t4975#1 = λ(T0[],T1[])<(T0 * T1)> (_t4814,op1_e3_l_184929);
          Print<[string,real,string]>(_t4973,_t4975,_t4961);
          goto JOIN4986
        JOIN4986:  preds = [MASSIGN4985,COND494F]
          self.pos = pos446C;
          self._pos = pos446C;
          self.hh = hh4935;
          self.step = step446A;
          self.trav = trav4470;
          self.closest = closest443E;
          self.born = born47CE;
          active
          goto JOIN4990
        JOIN4990:  preds = [*ACTIVE498E,COND4934]
          real hh498F#1 = phi(hh4853)
          tensor[3] pos444A#8 = phi(pos4855)
          real hh4448#2 = λ(T0[],T1[])<(T0 * T1)> (hh498F,gdeOppor40A6);
          tensor[3] step4446#3 = λ(T0[3],T1[3],T2[3])<(T1_{i0} + T2_{i0} + T0_{i0})>_{3} (es47F9,step446A,fs4802);
          real op1_e3_l_12499B#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (step4446,step4446);
          real op1_e3_l_13499C#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_12499B);
          real _t4997#4 = λ(T0[],T1[])<(T1) / ( T0)> (tipd409A,op1_e3_l_13499C);
          real trav4442#1 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (trav40C8,op1_e3_l_74474,_t4997);
          real op1_e3_l_2549BE#1 = λ(T0[],T1[])<(T0) - (T1)> (mvmt40CA,_t4997);
          real op1_e3_l_2749BF#1 = λ(T0[],T1[])<(T0 * T1)> (hist40B0,op1_e3_l_2549BE);
          real mvmt4440#1 = λ(T0[],T1[])<(T0 + T1)> (_t4997,op1_e3_l_2749BF);
          bool _t49C9#1 = LT<real>(_t4997,pcmvEps40AA);
          if _t49C9 then goto ASSIGN49CD else goto JOIN4B80
        ASSIGN49CD:  preds = [COND49CB]
          bool _t49CC#3 = GT<int>(pcp40B2,_t4460);
          if _t49CC then goto ASSIGN49D0 else goto JOIN49D9
        ASSIGN49D0:  preds = [COND49CE]
          bool _t49CF#1 = GT<int>(iter40BC,_t4460);
          if _t49CF then goto ASSIGN49D3 else goto JOIN49D7
        ASSIGN49D3:  preds = [COND49D1]
          int _t49D2#1 = IMod(iter40BC,pcp40B2);
          bool _t49D4#1 = EQ<int>(_t4460,_t49D2);
          goto JOIN49D7
        JOIN49D7:  preds = [ASSIGN49D5,COND49D1]
          bool _t49D6#1 = phi(_t49D4,vv40D2)
          goto JOIN49D9
        JOIN49D9:  preds = [JOIN49D7,COND49CE]
          bool _t49D8#1 = phi(_t49D6,vv40D2)
          if _t49D8 then goto ASSIGN49DC else goto JOIN49E8
        ASSIGN49DC:  preds = [COND49DA]
          int _t49DB#1 = IDiv(iter40BC,pcp40B2);
          int _t49DD#2 = 2;
          int _t49DF#1 = IMod(_t49DB,_t49DD);
          int _t49E1#1 = IMul(_t49DF,_t49DD);
          int _t49E3#1 = 1;
          int _t49E5#1 = ISub(_t49E1,_t49E3);
          goto JOIN49E8
        JOIN49E8:  preds = [ASSIGN49E6,COND49DA]
          int _t49E7#1 = phi(_t49E5,_t4460)
          bool _t49E9#1 = NEQ<int>(_t49E7,_t4460);
          if _t49E9 then goto COND49EC else goto JOIN4B7F
        COND49EC:  preds = [COND49EB]
          if _t49CC then goto ASSIGN49EE else goto JOIN49F7
        ASSIGN49EE:  preds = [COND49EC]
          bool _t49ED#1 = GT<int>(iter40BC,_t4460);
          if _t49ED then goto ASSIGN49F1 else goto JOIN49F5
        ASSIGN49F1:  preds = [COND49EF]
          int _t49F0#1 = IMod(iter40BC,pcp40B2);
          bool _t49F2#1 = EQ<int>(_t4460,_t49F0);
          goto JOIN49F5
        JOIN49F5:  preds = [ASSIGN49F3,COND49EF]
          bool _t49F4#1 = phi(_t49F2,vv40D2)
          goto JOIN49F7
        JOIN49F7:  preds = [JOIN49F5,COND49EC]
          bool _t49F6#1 = phi(_t49F4,vv40D2)
          if _t49F6 then goto ASSIGN49FA else goto JOIN4A06
        ASSIGN49FA:  preds = [COND49F8]
          int _t49F9#1 = IDiv(iter40BC,pcp40B2);
          int _t49FB#2 = 2;
          int _t49FD#1 = IMod(_t49F9,_t49FB);
          int _t49FF#1 = IMul(_t49FD,_t49FB);
          int _t4A01#1 = 1;
          int _t4A03#1 = ISub(_t49FF,_t4A01);
          goto JOIN4A06
        JOIN4A06:  preds = [ASSIGN4A04,COND49F8]
          int _t4A05#1 = phi(_t4A03,_t4460)
          bool _t4A07#1 = GT<int>(_t4A05,_t4460);
          if _t4A07 then goto ASSIGN4A0B else goto JOIN4A17
        ASSIGN4A0B:  preds = [COND4A09]
          bool _t4A0A#1 = LT<real>(newE48B0,_t40EF);
          if _t4A0A then goto ASSIGN4A0E else goto JOIN4A15
        ASSIGN4A0E:  preds = [COND4A0C]
          bool _t4A0D#1 = LT<int>(nn48C2,nnmin40B6);
          if _t4A0D then goto ASSIGN4A11 else goto JOIN4A13
        ASSIGN4A11:  preds = [COND4A0F]
          bool _t4A10#1 = LT<int>(born47CE,nnmax40B8);
          goto JOIN4A13
        JOIN4A13:  preds = [ASSIGN4A11,COND4A0F]
          bool _t4A12#1 = phi(_t4A10,vv40D2)
          goto JOIN4A15
        JOIN4A15:  preds = [JOIN4A13,COND4A0C]
          bool _t4A14#1 = phi(_t4A12,vv40D2)
          goto JOIN4A17
        JOIN4A17:  preds = [JOIN4A15,COND4A09]
          bool _t4A16#1 = phi(_t4A14,vv40D2)
          if _t4A16 then goto ASSIGN4A1F else goto COND4B81
        ASSIGN4A1F:  preds = [COND4A18]
          tensor[3] op1_e3_l_64A1A#3 = λ(T0[3],T1[])<(T0_{i0}) / ( T1)>_{3} (mno48B5,_t48F7);
          real op1_e3_l_84A1B#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_64A1A,op1_e3_l_64A1A);
          real op1_e3_l_94A1C#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_84A1B);
          real op1_e3_l_114A1D#1 = λ(T0[])<(1) / ( T0)> (op1_e3_l_94A1C);
          tensor[3] op1_e3_l_124A1E#1 = λ(T0[],T1[3],T2[])<(T0 * T1_{i0} * T2)>_{3} (tipd409A,op1_e3_l_64A1A,op1_e3_l_114A1D);
          tensor[3] npos4A19#3 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (pos444A,op1_e3_l_124A1E);
          tensor[3] _t4A25#1 = fStep4302 (npos4A19);
          tensor[3] op1_e3_l_164A2E#2 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs40AE,_t4A25);
          tensor[3] npos4A27#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (npos4A19,op1_e3_l_164A2E);
          tensor[3] _t4A37#1 = fStep4302 (npos4A27);
          tensor[3] op1_e3_l_194A41#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs40AE,_t4A37);
          tensor[3] npos4A39#6 = λ(T0[3],T1[3],T2[3])<(T0_{i0} + T1_{i0} + T2_{i0})>_{3} (npos4A19,op1_e3_l_164A2E,op1_e3_l_194A41);
          bool birth4A4B#4 = true;
          int _t4A4D#2 = 2;
          bool _t4A4F#1 = EQ<int>(fDim40B4,_t4A4D);
          if _t4A4F then goto ASSIGN4A53 else goto JOIN4A81
        ASSIGN4A53:  preds = [COND4A51]
          int _t4A52#1 = 4;
          bool _t4A54#1 = GTE<int>(nn48C2,_t4A52);
          if _t4A54 then goto ASSIGN4A58 else goto JOIN4A7F
        ASSIGN4A58:  preds = [COND4A56]
          real _t4A57#1 = λ(T0[],T1[])<(T0 * T1)> (tipd409A,mabd409C);
          point[] _t4A59#1 = SphereQuery<3,point>(npos4A39,_t4A57);
        FOREACH4A5C:  preds = [ASSIGN4A5A,NEXT4A5D]
          foreach (P4A5B in _t4A59) on exit goto COND4A5F
            bool birth4A5E#2 = phi(birth4A4B,vv40D2)
          goto FOREACH4A5C
        COND4A5F:  preds = [FOREACH4A5C]
          if birth4A5E then goto ASSIGN4A61 else goto JOIN4A7D
        ASSIGN4A61:  preds = [COND4A5F]
          real _t4A60#1 = TensorIndex<tensor[3],[0]>(pos444A);
          real _t4A62#1 = urnd403D (_t4A60);
          real _t4A64#1 = TensorIndex<tensor[3],[1]>(pos444A);
          real _t4A66#1 = urnd403D (_t4A64);
          real _t4A68#1 = TensorIndex<tensor[3],[2]>(pos444A);
          real _t4A6A#1 = urnd403D (_t4A68);
          real _t4A6C#1 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (_t4A62,_t4A66,_t4A6A);
          real _t4A6E#1 = 0.1e1;
          real _t4A70#1 = MathFn<fmod>(_t4A6C,_t4A6E);
          int _t4A72#1 = ISub(nnmin40B6,nn48C2);
          real _t4A74#1 = IntToReal(_t4A72);
          real _t4A76#1 = IntToReal(nnmin40B6);
          real _t4A78#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t4A74,_t4A76);
          bool birth4A7A#1 = LT<real>(_t4A70,_t4A78);
          goto JOIN4A7D
        JOIN4A7D:  preds = [ASSIGN4A7B,COND4A5F]
          bool birth4A7C#1 = phi(birth4A7A,birth4A5E)
          goto JOIN4A7F
        JOIN4A7F:  preds = [JOIN4A7D,COND4A56]
          bool birth4A7E#1 = phi(birth4A7C,birth4A4B)
          goto JOIN4A81
        JOIN4A81:  preds = [JOIN4A7F,COND4A51]
          bool birth4A80#1 = phi(birth4A7E,birth4A4B)
          if birth4A80 then goto ASSIGN4D09 else goto JOIN4B7B
        ASSIGN4D09:  preds = [COND4A82]
          tensor[3] op1_e3_l_334A8D#2 = λ(T0[3],T1[3])<(T1_{i0}) - (T0_{i0})>_{3} (_t40F1,npos4A39);
          real op1_e3_l_354A8E#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_334A8D,op1_e3_l_334A8D);
          real _t4A83#2 = λ(T0[])<Sqrt(T0)> (op1_e3_l_354A8E);
          bool _t4A9B#1 = LT<real>(_t4A83,_t40F9);
          if _t4A9B then goto ASSIGN4A9F else goto JOIN4AA3
        ASSIGN4A9F:  preds = [COND4A9D]
          real _t4A9E#1 = 0.3e1;
          bool _t4AA0#1 = GT<real>(_t4A83,_t4A9E);
          goto JOIN4AA3
        JOIN4AA3:  preds = [ASSIGN4AA1,COND4A9D]
          bool _t4AA2#1 = phi(_t4AA0,vv40D2)
          if _t4AA2 then goto ASSIGN4AA6 else goto JOIN4B71
        ASSIGN4AA6:  preds = [COND4AA4]
          real x4AA5#5 = TensorIndex<tensor[3],[0]>(npos4A39);
          real y4AA7#5 = TensorIndex<tensor[3],[1]>(npos4A39);
          real z4AA9#6 = TensorIndex<tensor[3],[2]>(npos4A39);
          real _t4AAB#6 = 0.2e1;
          real op1_e3_l_64AAE#2 = λ(T0[])<(T0)^2> (x4AA5);
          real op1_e3_l_74AAF#2 = λ(T0[])<(T0)^2> (y4AA7);
          real op1_e3_l_84AB0#8 = λ(T0[])<(T0)^2> (z4AA9);
          real op1_e3_l_94AB1#2 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_64AAE,op1_e3_l_74AAF,op1_e3_l_84AB0);
          real op1_e3_l_114AB2#7 = λ(T0[])<Cosine(T0)> (op1_e3_l_94AB1);
          real _t4AAD#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t4AAB,x4AA5,op1_e3_l_84AB0,op1_e3_l_114AB2);
          real _t4AB9#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t4AAB,y4AA7,op1_e3_l_84AB0,op1_e3_l_114AB2);
          real op1_e3_l_144ACA#3 = λ(T0[])<(T0)^3> (z4AA9);
          real op1_e3_l_204ACC#8 = λ(T0[])<Sine(T0)> (op1_e3_l_94AB1);
          real op1_e3_l_214ACD#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t4AAB,op1_e3_l_144ACA,op1_e3_l_114AB2);
          real op1_e3_l_224ACE#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t4AAB,z4AA9,op1_e3_l_204ACC);
          real _t4AC5#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_214ACD,op1_e3_l_224ACE);
          tensor[3] g4AD9#1 = <tensor[3]>[_t4AAD,_t4AB9,_t4AC5];
          real _t4ADD#6 = -0.4e1;
          real op1_e3_l_244AE6#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t4ADD,op1_e3_l_64AAE,op1_e3_l_84AB0,op1_e3_l_204ACC);
          real op1_e3_l_254AE7#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t4AAB,op1_e3_l_84AB0,op1_e3_l_114AB2);
          real _t4ADF#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_244AE6,op1_e3_l_254AE7);
          real _t4AF1#2 = λ(T0[],T1[],T2[],T3[],T4[])<(T0 * T1 * T2 * T3 * T4)> (_t4ADD,x4AA5,y4AA7,op1_e3_l_84AB0,op1_e3_l_204ACC);
          real op1_e3_l_234B05#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t4ADD,x4AA5,op1_e3_l_144ACA,op1_e3_l_204ACC);
          real op1_e3_l_244B06#1 = λ(T0[],T1[],T2[],T3[])<(T2 * T0 * T1 * T3)> (x4AA5,z4AA9,_t40F9,op1_e3_l_114AB2);
          real _t4AFD#2 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_234B05,op1_e3_l_244B06);
          tensor[3] _t4B11#1 = <tensor[3]>[_t4ADF,_t4AF1,_t4AFD];
          real op1_e3_l_244B1A#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t4ADD,op1_e3_l_74AAF,op1_e3_l_84AB0,op1_e3_l_204ACC);
          real _t4B13#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_244B1A,op1_e3_l_254AE7);
          real op1_e3_l_234B2D#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t4ADD,y4AA7,op1_e3_l_144ACA,op1_e3_l_204ACC);
          real op1_e3_l_244B2E#1 = λ(T0[],T1[],T2[],T3[])<(T2 * T0 * T1 * T3)> (y4AA7,z4AA9,_t40F9,op1_e3_l_114AB2);
          real _t4B25#2 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_234B2D,op1_e3_l_244B2E);
          tensor[3] _t4B39#1 = <tensor[3]>[_t4AF1,_t4B13,_t4B25];
          real _t4B3B#1 = 0.1e2;
          real op1_e3_l_184B42#1 = λ(T0[])<(T0)^4> (z4AA9);
          real op1_e3_l_314B45#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t4ADD,op1_e3_l_184B42,op1_e3_l_204ACC);
          real op1_e3_l_324B46#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t4B3B,op1_e3_l_84AB0,op1_e3_l_114AB2);
          real op1_e3_l_334B47#1 = λ(T0[],T1[])<(T0 * T1)> (_t4AAB,op1_e3_l_204ACC);
          real _t4B3D#1 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_314B45,op1_e3_l_324B46,op1_e3_l_334B47);
          tensor[3] _t4B53#1 = <tensor[3]>[_t4AFD,_t4B25,_t4B3D];
          tensor[3,3] hess4B55#1 = <tensor[3,3]>[_t4B11,_t4B39,_t4B53];
          real[3] _t4B57#1 = EigenVals3x3(hess4B55);
          real _t4B5A#1 = Subscript<real[3]>(_t4B57,_t4A4D);
          real op1_e3_l_34B5D#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (g4AD9);
          real op1_e3_l_44B5E#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_34B5D);
          real op1_e3_l_54B5F#1 = λ(T0[])<Neg(T0)> (_t4B5A);
          real op1_e3_l_64B60#1 = λ(T0[],T1[])<(T0 + T1)> (fBias4098,op1_e3_l_44B5E);
          real str4B5C#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_54B5F,op1_e3_l_64B60);
          bool _t4B66#1 = GT<real>(str4B5C,fStrTh4094);
          if _t4B66 then goto ASSIGN4B6A else goto JOIN4B6F
        ASSIGN4B6A:  preds = [COND4B68]
          bool _t4B69#1 = GTE<real>(_t40EF,fMaskTh4096);
          if _t4B69 then goto JOIN4B6D else goto JOIN4B6D
        JOIN4B6D:  preds = [COND4B6B,COND4B6B]
          bool _t4B6C#1 = phi(birth4A4B,vv40D2)
          goto JOIN4B6F
        JOIN4B6F:  preds = [JOIN4B6D,COND4B68]
          bool _t4B6E#1 = phi(_t4B6C,vv40D2)
          goto JOIN4B71
        JOIN4B71:  preds = [JOIN4B6F,COND4AA4]
          bool _t4B70#1 = phi(_t4B6E,vv40D2)
          if _t4B70 then goto NEW4B73 else goto JOIN4B79
        NEW4B73:  preds = [COND4B72]
          new point(npos4A39,hh4448);
          int _t4B74#1 = 1;
          int born4B76#1 = IAdd(born47CE,_t4B74);
          goto JOIN4B79
        JOIN4B79:  preds = [ASSIGN4B77,COND4B72]
          int born4B78#1 = phi(born4B76,born47CE)
          goto JOIN4B7B
        JOIN4B7B:  preds = [JOIN4B79,COND4A82]
          int born4B7A#1 = phi(born4B78,born47CE)
          goto JOIN4B7D
        JOIN4B7D:  preds = [JOIN4B7B,JOIN4BC4]
          int born4B7C#1 = phi(born4B7A,born47CE)
          goto JOIN4B7F
        JOIN4B7F:  preds = [JOIN4B7D,COND49EB]
          int born4B7E#1 = phi(born4B7C,born47CE)
          goto JOIN4B80
        JOIN4B80:  preds = [JOIN4B7F,COND49CB]
          int born443C#1 = phi(born4B7E,born47CE)
          goto JOIN444B
        COND4B81:  preds = [COND4A18]
          if _t49CC then goto ASSIGN4B83 else goto JOIN4B8C
        ASSIGN4B83:  preds = [COND4B81]
          bool _t4B82#1 = GT<int>(iter40BC,_t4460);
          if _t4B82 then goto ASSIGN4B86 else goto JOIN4B8A
        ASSIGN4B86:  preds = [COND4B84]
          int _t4B85#1 = IMod(iter40BC,pcp40B2);
          bool _t4B87#1 = EQ<int>(_t4460,_t4B85);
          goto JOIN4B8A
        JOIN4B8A:  preds = [ASSIGN4B88,COND4B84]
          bool _t4B89#1 = phi(_t4B87,vv40D2)
          goto JOIN4B8C
        JOIN4B8C:  preds = [JOIN4B8A,COND4B81]
          bool _t4B8B#1 = phi(_t4B89,vv40D2)
          if _t4B8B then goto ASSIGN4B8F else goto JOIN4B9B
        ASSIGN4B8F:  preds = [COND4B8D]
          int _t4B8E#1 = IDiv(iter40BC,pcp40B2);
          int _t4B90#2 = 2;
          int _t4B92#1 = IMod(_t4B8E,_t4B90);
          int _t4B94#1 = IMul(_t4B92,_t4B90);
          int _t4B96#1 = 1;
          int _t4B98#1 = ISub(_t4B94,_t4B96);
          goto JOIN4B9B
        JOIN4B9B:  preds = [ASSIGN4B99,COND4B8D]
          int _t4B9A#1 = phi(_t4B98,_t4460)
          bool _t4B9C#1 = LT<int>(_t4B9A,_t4460);
          if _t4B9C then goto ASSIGN4BA0 else goto JOIN4BC4
        ASSIGN4BA0:  preds = [COND4B9E]
          bool _t4B9F#1 = GT<real>(newE48B0,_t40EF);
          if _t4B9F then goto ASSIGN4BA3 else goto JOIN4BC3
        ASSIGN4BA3:  preds = [COND4BA1]
          bool _t4BA2#1 = GT<int>(nn48C2,nnmax40B8);
          if _t4BA2 then goto ASSIGN4BA6 else goto JOIN4BC2
        ASSIGN4BA6:  preds = [COND4BA4]
          real _t4BA5#1 = TensorIndex<tensor[3],[0]>(pos444A);
          real _t4BA7#1 = urnd403D (_t4BA5);
          real _t4BA9#1 = TensorIndex<tensor[3],[1]>(pos444A);
          real _t4BAB#1 = urnd403D (_t4BA9);
          real _t4BAD#1 = TensorIndex<tensor[3],[2]>(pos444A);
          real _t4BAF#1 = urnd403D (_t4BAD);
          real _t4BB1#1 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (_t4BA7,_t4BAB,_t4BAF);
          real _t4BB3#1 = 0.1e1;
          real _t4BB5#1 = MathFn<fmod>(_t4BB1,_t4BB3);
          int _t4BB7#1 = ISub(nn48C2,nnmax40B8);
          real _t4BB9#1 = IntToReal(_t4BB7);
          real _t4BBB#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t4BB9,_t48F7);
          bool _t4BBD#1 = LT<real>(_t4BB5,_t4BBB);
          if _t4BBD then goto DIE4BC0 else goto JOIN4BC1
        DIE4BC0:  preds = [COND4BBF]
          die
          goto JOIN4BC1
        JOIN4BC1:  preds = [*DIE4BC0,COND4BBF]
          goto JOIN4BC2
        JOIN4BC2:  preds = [JOIN4BC1,COND4BA4]
          goto JOIN4BC3
        JOIN4BC3:  preds = [JOIN4BC2,COND4BA1]
          goto JOIN4BC4
        JOIN4BC4:  preds = [JOIN4BC3,COND4B9E]
          goto JOIN4B7D
        ASSIGN4BC6:  preds = [COND4949]
          int _t4BC5#1 = 1;
          bool _t494D#1 = GT<int>(verb40AC,_t4BC5);
          goto JOIN494E
        ASSIGN4BC9:  preds = [COND48FE]
          int _t4BC8#1 = 1;
          bool _t4902#1 = GT<int>(verb40AC,_t4BC8);
          goto JOIN4903
        ASSIGN4BCC:  preds = [COND4820]
          int _t4BCB#1 = 1;
          bool _t4824#1 = GT<int>(verb40AC,_t4BCB);
          goto JOIN4825
        ASSIGN4BCF:  preds = [COND47B4]
          int _t4BCE#1 = 1;
          bool _t47B8#1 = GT<int>(verb40AC,_t4BCE);
          goto JOIN47B9
        ASSIGN4BD2:  preds = [COND4696]
          int _t4BD1#1 = 1;
          bool _t469A#1 = GT<int>(verb40AC,_t4BD1);
          goto JOIN469B
        ASSIGN4BD5:  preds = [COND41E0]
          int _t4BD4#1 = 1;
          bool _t41E4#1 = GT<int>(verb40AC,_t4BD4);
          goto JOIN41E5
        ASSIGN4BD8:  preds = [COND40DC]
          int _t4BD7#1 = 1;
          bool _t40E0#1 = GT<int>(verb40AC,_t4BD7);
          goto JOIN40E1
    end update
  end point
## initial strand creation
  COLLECTION
    ENTRY4BDA:  preds = []
      tensor[3][] ipos4BDB#2 = globals.ipos3F9B;
      int _t4BDD#1 = 0;
      int _t4BDF#1 = Length<tensor[3]>(ipos4BDB);
      int _t4BE1#1 = 1;
      int _t4BE3#1 = ISub(_t4BDF,_t4BE1);
      int[] _t4BE5#1 = Range(_t4BDD,_t4BE3);
    FOREACH4BE8:  preds = [ASSIGN4BE6,NEXT4BEE]
      foreach (ii4BE7 in _t4BE5) on exit goto RETURN4BEF
      tensor[3] _t4BE9#1 = Subscript<tensor[3][]>(ipos4BDB,ii4BE7);
      real _t4BEB#1 = 0.1e1;
      new point(_t4BE9,_t4BEB);
      goto FOREACH4BE8
    RETURN4BEF:  preds = [FOREACH4BE8]
      return
## global update
  ENTRY4BF0:  preds = []
    real geoEps4BF1#3 = globals.geoEps3F92;
    real mvmtEps4BF3#3 = globals.mvmtEps3F93;
    real rpcEps4BF5#3 = globals.rpcEps3F94;
    real pchist4BF7#1 = globals.pchist3FA0;
    int iter4BF9#4 = globals.iter3FA1;
    real rpc4BFB#1 = globals.rpc3FA2;
    int popLast4BFD#1 = globals.popLast3FA3;
    int pop4BFF#5 = NumStrands<active>;
    bool _t4C01#1 = NEQ<int>(pop4BFF,popLast4BFD);
    if _t4C01 then goto ASSIGN4C05 else goto ASSIGN4CAA
  ASSIGN4C05:  preds = [COND4C03]
    int _t4C04#1 = 1;
    goto JOIN4C08
  JOIN4C08:  preds = [ASSIGN4C05,ASSIGN4CAA]
    int _t4C06#2 = phi(_t4C04,_t4C07)
    real _t4C09#2 = IntToReal(_t4C06);
    real op1_e3_l_34C0C#1 = λ(T0[],T1[])<(T1) - (T0)> (_t4C09,rpc4BFB);
    real op1_e3_l_44C0D#1 = λ(T0[],T1[])<(T0 * T1)> (pchist4BF7,op1_e3_l_34C0C);
    real rpc4C0B#5 = λ(T0[],T1[])<(T0 + T1)> (_t4C09,op1_e3_l_44C0D);
    globals.rpc3FA2 = rpc4C0B;
    point[] P4C12#6 = Strands<point,all>;
    (bool res4C1A#1) = all(MAP all4C14 (P4C12));
    real _t4C1C#1 = 0.1e3;
    (real res4C2B#1) = sum<real>(MAP mean4C1E (P4C12));
    int num4C2D#1 = NumStrands<all>;
    real rNum4C2F#5 = IntToReal(num4C2D);
    real op1_e3_l_34C32#1 = λ(T0[],T1[])<(T0) / ( T1)> (res4C2B,rNum4C2F);
    real percfound4C31#1 = λ(T0[],T1[])<(T0 * T1)> (_t4C1C,op1_e3_l_34C32);
    (real res4C3B#2) = sum<real>(MAP mean4C35 (P4C12));
    real mean4C3D#2 = λ(T0[],T1[])<(T0) / ( T1)> (res4C3B,rNum4C2F);
    (real res4C4A#1) = sum<real>(MAP mean4C3F (P4C12,mean4C3D));
    real op1_e3_l_44C4D#1 = λ(T0[],T1[])<(T0) / ( T1)> (res4C4A,rNum4C2F);
    real op1_e3_l_54C4E#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_44C4D);
    real op1_e3_l_64C4F#1 = λ(T0[],T1[])<(T1 * T0)> (rNum4C2F,op1_e3_l_54C4E);
    real covcl4C4C#4 = λ(T0[],T1[])<(T1) / ( T0)> (res4C3B,op1_e3_l_64C4F);
    (real res4C5A#4) = max<real>(MAP max4C54 (P4C12));
    string _t4C5C#1 = "======= finished iter ";
    string _t4C5E#1 = " w/ ";
    string _t4C60#3 = ")";
    string _t4C62#1 = "; %found=";
    string _t4C64#1 = "; mean(hh)=";
    (real res4C6C#1) = sum<real>(MAP mean4C66 (P4C12));
    real mean4C6E#1 = λ(T0[],T1[])<(T0) / ( T1)> (res4C6C,rNum4C2F);
    string _t4C70#1 = "; mean(cl)=";
    string _t4C72#3 = "; COV(cl)=";
    string _t4C74#3 = "; max(mvmt)=";
    string _t4C76#1 = "; pc=";
    string _t4C78#3 = "; rpc=";
    string _t4C7A#3 = "\n";
    Print<[string,int,string,int,string,string,real,string,real,string,real,string,real,string,real,string,int,string,real,string]>(_t4C5C,iter4BF9,_t4C5E,pop4BFF,_t4C60,_t4C62,percfound4C31,_t4C64,mean4C6E,_t4C70,mean4C3D,_t4C72,covcl4C4C,_t4C74,res4C5A,_t4C76,_t4C06,_t4C78,rpc4C0B,_t4C7A);
    if res4C1A then goto ASSIGN4C7F else goto ASSIGN4CA9
  ASSIGN4C7F:  preds = [COND4C7D]
    bool _t4C7E#1 = LT<real>(covcl4C4C,geoEps4BF1);
    if _t4C7E then goto ASSIGN4C82 else goto ASSIGN4CA8
  ASSIGN4C82:  preds = [COND4C80]
    bool _t4C81#1 = LT<real>(res4C5A,mvmtEps4BF3);
    if _t4C81 then goto ASSIGN4C85 else goto ASSIGN4CA7
  ASSIGN4C85:  preds = [COND4C83]
    bool _t4C84#1 = LT<real>(rpc4C0B,rpcEps4BF5);
    goto JOIN4C88
  JOIN4C88:  preds = [ASSIGN4C85,ASSIGN4CA7]
    bool _t4C86#1 = phi(_t4C84,_t4C87)
    goto JOIN4C8B
  JOIN4C8B:  preds = [JOIN4C88,ASSIGN4CA8]
    bool _t4C89#1 = phi(_t4C86,_t4C8A)
    goto JOIN4C8E
  JOIN4C8E:  preds = [JOIN4C8B,ASSIGN4CA9]
    bool _t4C8C#1 = phi(_t4C89,_t4C8D)
    if _t4C8C then goto ASSIGN4C91 else goto ASSIGN4CA1
  ASSIGN4C91:  preds = [COND4C8F]
    string _t4C90#1 = "======= Stabilizing ";
    string _t4C92#1 = " (iter ";
    string _t4C94#3 = " < ";
    Print<[string,int,string,int,string,string,real,string,real,string,real,string,real,string,real,string,real,string]>(_t4C90,pop4BFF,_t4C92,iter4BF9,_t4C60,_t4C72,covcl4C4C,_t4C94,geoEps4BF1,_t4C74,res4C5A,_t4C94,mvmtEps4BF3,_t4C78,rpc4C0B,_t4C94,rpcEps4BF5,_t4C7A);
    StabilizeAll;
    goto JOIN4C98
  JOIN4C98:  preds = [MASSIGN4C97,MASSIGN4CA6]
    int _t4C99#1 = 1;
    int iter4C9B#1 = IAdd(iter4BF9,_t4C99);
    globals.iter3FA1 = iter4C9B;
    globals.popLast3FA3 = pop4BFF;
    continue
  ASSIGN4CA1:  preds = [COND4C8F]
    string _t4CA0#1 = "======= Stabilizing ";
    string _t4CA2#1 = " (iter ";
    string _t4CA4#3 = " > ";
    Print<[string,int,string,int,string,string,real,string,real,string,real,string,real,string,real,string,real,string]>(_t4CA0,pop4BFF,_t4CA2,iter4BF9,_t4C60,_t4C72,covcl4C4C,_t4CA4,geoEps4BF1,_t4C74,res4C5A,_t4CA4,mvmtEps4BF3,_t4C78,rpc4C0B,_t4CA4,rpcEps4BF5,_t4C7A);
    goto JOIN4C98
  ASSIGN4CA7:  preds = [COND4C83]
    bool _t4C87#1 = false;
    goto JOIN4C88
  ASSIGN4CA8:  preds = [COND4C80]
    bool _t4C8A#1 = false;
    goto JOIN4C8B
  ASSIGN4CA9:  preds = [COND4C7D]
    bool _t4C8D#1 = false;
    goto JOIN4C8E
  ASSIGN4CAA:  preds = [COND4C03]
    int _t4C07#1 = 0;
    goto JOIN4C08
#### end program ####
##### mid-ir: after border control ####
## properties
  GlobalInit StabilizeAll GlobalReduce StrandSets GlobalUpdate NewStrands StrandCommunication StrandsMayDie HasInputs HasGlobals ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
## globals
  input meshData3F84 (meshData) = <no-default>
  input 0space07C6_intermedateGlobal3F85 (space) = <no-default>
  input 0data07C8_intermedateGlobal3F86 (data) = <no-default>
  input fStrTh3F87 (fStrTh) = <no-default>
  input fMaskTh3F88 (fMaskTh) = <default>
  input fBias3F89 (fBias) = <default>
  input tipd3F8A (tipd) = <default>
  input mabd3F8B (mabd) = <default>
  input travMax3F8C (travMax) = <default>
  input nfsMax3F8D (nfsMax) = <default>
  input gdeTest3F8E (gdeTest) = <default>
  input gdeBack3F8F (gdeBack) = <default>
  input gdeOppor3F90 (gdeOppor) = <default>
  input fsEps3F91 (fsEps) = <no-default>
  input geoEps3F92 (geoEps) = <default>
  input mvmtEps3F93 (mvmtEps) = <default>
  input rpcEps3F94 (rpcEps) = <default>
  input pcmvEps3F95 (pcmvEps) = <default>
  input isoval3F96 (isoval) = <default>
  input verb3F97 (verb) = <default>
  input sfs3F98 (sfs) = <default>
  input hist3F99 (hist) = <default>
  input pcp3F9A (pcp) = <default>
  input ipos3F9B (ipos) = <no-default>
  input fDim3F9C (fDim) = <default>
  global int nnmin3F9D
  global int nnmax3F9E
  global real rad3F9F
  global real pchist3FA0
  varying global int iter3FA1
  varying global real rpc3FA2
  varying global int popLast3FA3
## functions
  function real urnd403D (real x403E#2) {
    ENTRY403F:  preds = []
      int iter4040#1 = globals.iter3FA1;
      real _t4042#2 = 0.e0;
      bool _t4044#1 = EQ<real>(x403E,_t4042);
      if _t4044 then goto RETURN(_t4042)4047 else goto JOIN4048
    RETURN(_t4042)4047:  preds = [COND4046]
      return _t4042
      goto JOIN4048
    JOIN4048:  preds = [*RETURN(_t4042)4047,COND4046]
      real _t4049#1 = λ(T0[])<Abs(T0)> (x403E);
      real l2404B#2 = MathFn<log2>(_t4049);
      real _t404D#2 = 0.2e1;
      real _t404F#1 = MathFn<floor>(l2404B);
      real _t4051#2 = 0.1e1;
      real op1_e3_l_34054#1 = λ(T0[],T1[])<(T0) - (T1)> (l2404B,_t404F);
      real _t4053#1 = λ(T0[],T1[])<(T1) - (T0)> (_t4051,op1_e3_l_34054);
      real frxp4057#1 = MathFn<pow>(_t404D,_t4053);
      int _t4059#1 = 2;
      int _t405B#1 = IMul(_t4059,iter4040);
      real _t405D#1 = IntToReal(_t405B);
      real op1_e3_l_34060#1 = λ(T0[])<(T0)^20> (_t404D);
      real op1_e3_l_44061#1 = λ(T0[],T1[])<(T1 + T0)> (_t405D,op1_e3_l_34060);
      real _t405F#1 = λ(T0[],T1[])<(T0 * T1)> (frxp4057,op1_e3_l_44061);
      real _t4065#1 = MathFn<fmod>(_t405F,_t4051);
      return _t4065
}
  function tensor[3] fStep4302 (tensor[3] s4303#3) {
    ENTRY4304:  preds = []
      real x4305#5 = TensorIndex<tensor[3],[0]>(s4303);
      real y4307#5 = TensorIndex<tensor[3],[1]>(s4303);
      real z4309#6 = TensorIndex<tensor[3],[2]>(s4303);
      real _t430B#6 = 0.2e1;
      int _t430D#2 = 2;
      real op1_e3_l_64310#2 = λ(T0[])<(T0)^2> (x4305);
      real op1_e3_l_74311#2 = λ(T0[])<(T0)^2> (y4307);
      real op1_e3_l_84312#8 = λ(T0[])<(T0)^2> (z4309);
      real op1_e3_l_94313#2 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_64310,op1_e3_l_74311,op1_e3_l_84312);
      real op1_e3_l_114314#7 = λ(T0[])<Cosine(T0)> (op1_e3_l_94313);
      real _t430F#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t430B,x4305,op1_e3_l_84312,op1_e3_l_114314);
      real _t431B#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t430B,y4307,op1_e3_l_84312,op1_e3_l_114314);
      real op1_e3_l_14432C#3 = λ(T0[])<(T0)^3> (z4309);
      real op1_e3_l_20432E#8 = λ(T0[])<Sine(T0)> (op1_e3_l_94313);
      real op1_e3_l_21432F#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t430B,op1_e3_l_14432C,op1_e3_l_114314);
      real op1_e3_l_224330#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t430B,z4309,op1_e3_l_20432E);
      real _t4327#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_21432F,op1_e3_l_224330);
      tensor[3] g433B#1 = <tensor[3]>[_t430F,_t431B,_t4327];
      real _t433F#6 = -0.4e1;
      real op1_e3_l_244348#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t433F,op1_e3_l_64310,op1_e3_l_84312,op1_e3_l_20432E);
      real op1_e3_l_254349#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t430B,op1_e3_l_84312,op1_e3_l_114314);
      real _t4341#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_244348,op1_e3_l_254349);
      real _t4353#2 = λ(T0[],T1[],T2[],T3[],T4[])<(T0 * T1 * T2 * T3 * T4)> (_t433F,x4305,y4307,op1_e3_l_84312,op1_e3_l_20432E);
      real _t435F#2 = 0.4e1;
      real op1_e3_l_234369#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t433F,x4305,op1_e3_l_14432C,op1_e3_l_20432E);
      real op1_e3_l_24436A#1 = λ(T0[],T1[],T2[],T3[])<(T2 * T0 * T1 * T3)> (x4305,z4309,_t435F,op1_e3_l_114314);
      real _t4361#2 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_234369,op1_e3_l_24436A);
      tensor[3] _t4375#1 = <tensor[3]>[_t4341,_t4353,_t4361];
      real op1_e3_l_24437E#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t433F,op1_e3_l_74311,op1_e3_l_84312,op1_e3_l_20432E);
      real _t4377#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_24437E,op1_e3_l_254349);
      real op1_e3_l_234391#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t433F,y4307,op1_e3_l_14432C,op1_e3_l_20432E);
      real op1_e3_l_244392#1 = λ(T0[],T1[],T2[],T3[])<(T2 * T0 * T1 * T3)> (y4307,z4309,_t435F,op1_e3_l_114314);
      real _t4389#2 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_234391,op1_e3_l_244392);
      tensor[3] _t439D#1 = <tensor[3]>[_t4353,_t4377,_t4389];
      real _t439F#1 = 0.1e2;
      real op1_e3_l_1843A6#1 = λ(T0[])<(T0)^4> (z4309);
      real op1_e3_l_3143A9#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t433F,op1_e3_l_1843A6,op1_e3_l_20432E);
      real op1_e3_l_3243AA#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t439F,op1_e3_l_84312,op1_e3_l_114314);
      real op1_e3_l_3343AB#1 = λ(T0[],T1[])<(T0 * T1)> (_t430B,op1_e3_l_20432E);
      real _t43A1#1 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_3143A9,op1_e3_l_3243AA,op1_e3_l_3343AB);
      tensor[3] _t43B7#1 = <tensor[3]>[_t4361,_t4389,_t43A1];
      tensor[3,3] hess43B9#1 = <tensor[3,3]>[_t4375,_t439D,_t43B7];
      (real[3] evals43BB#1,tensor[3][3] E43BC#1) = EigenVecs3x3(hess43B9);
      real _t43BE#1 = 0.1e1;
      real _t43C0#1 = Subscript<real[3]>(evals43BB,_t430D);
      tensor[3] _t43C2#2 = Subscript<tensor[3][3]>(E43BC,_t430D);
      real op1_e3_l_543C5#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t43BE,_t43C0);
      real op1_e3_l_643C6#1 = λ(T0[])<Neg(T0)> (op1_e3_l_543C5);
      real op1_e3_l_743C7#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (_t43C2,g433B);
      tensor[3] up43C4#4 = λ(T0[3],T1[],T2[])<(T1 * T0_{i0} * T2)>_{3} (_t43C2,op1_e3_l_643C6,op1_e3_l_743C7);
      real _t43CC#2 = TensorIndex<tensor[3],[0]>(up43C4);
      bool _t43CE#1 = EQ<real>(_t43CC,_t43CC);
      bool _t43D0#1 = BNot(_t43CE);
      if _t43D0 then goto ASSIGN43D4 else goto ASSIGN43E1
    ASSIGN43D4:  preds = [COND43D2]
      bool _t43D3#1 = true;
      goto JOIN43D7
    JOIN43D7:  preds = [ASSIGN43D4,JOIN43EA]
      bool _t43D5#1 = phi(_t43D3,_t43D6)
      if _t43D5 then goto ASSIGN43DA else goto JOIN43DE
    ASSIGN43DA:  preds = [COND43D8]
      real _t43D9#3 = +inf;
      tensor[3] _t43DB#1 = <tensor[3]>[_t43D9,_t43D9,_t43D9];
      return _t43DB
      goto JOIN43DE
    JOIN43DE:  preds = [*RETURN(_t43DB)43DD,COND43D8]
      return up43C4
    ASSIGN43E1:  preds = [COND43D2]
      real _t43E0#2 = TensorIndex<tensor[3],[1]>(up43C4);
      bool _t43E2#1 = EQ<real>(_t43E0,_t43E0);
      bool _t43E4#1 = BNot(_t43E2);
      if _t43E4 then goto ASSIGN43E8 else goto ASSIGN43EC
    ASSIGN43E8:  preds = [COND43E6]
      bool _t43E7#1 = true;
      goto JOIN43EA
    JOIN43EA:  preds = [ASSIGN43E8,ASSIGN43EF]
      bool _t43D6#1 = phi(_t43E7,_t43E9)
      goto JOIN43D7
    ASSIGN43EC:  preds = [COND43E6]
      real _t43EB#2 = TensorIndex<tensor[3],[2]>(up43C4);
      bool _t43ED#1 = EQ<real>(_t43EB,_t43EB);
      bool _t43E9#1 = BNot(_t43ED);
      goto JOIN43EA
}
  function tensor[3,3] fPerp45A3 (tensor[3] s45A4#3) {
    ENTRY45A5:  preds = []
      real x45A6#4 = TensorIndex<tensor[3],[0]>(s45A4);
      real y45A8#4 = TensorIndex<tensor[3],[1]>(s45A4);
      real z45AA#5 = TensorIndex<tensor[3],[2]>(s45A4);
      real _t45AC#2 = 0.2e1;
      int _t45AE#1 = 2;
      real _t45B2#6 = -0.4e1;
      real op1_e3_l_1145B5#2 = λ(T0[])<(T0)^2> (x45A6);
      real op1_e3_l_1245B6#2 = λ(T0[])<(T0)^2> (y45A8);
      real op1_e3_l_1345B7#6 = λ(T0[])<(T0)^2> (z45AA);
      real op1_e3_l_1445B8#2 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_1145B5,op1_e3_l_1245B6,op1_e3_l_1345B7);
      real op1_e3_l_1745B9#7 = λ(T0[])<Sine(T0)> (op1_e3_l_1445B8);
      real op1_e3_l_2345BA#4 = λ(T0[])<Cosine(T0)> (op1_e3_l_1445B8);
      real op1_e3_l_2445BB#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t45B2,op1_e3_l_1145B5,op1_e3_l_1345B7,op1_e3_l_1745B9);
      real op1_e3_l_2545BC#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t45AC,op1_e3_l_1345B7,op1_e3_l_2345BA);
      real _t45B4#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_2445BB,op1_e3_l_2545BC);
      real _t45C6#2 = λ(T0[],T1[],T2[],T3[],T4[])<(T0 * T1 * T2 * T3 * T4)> (_t45B2,x45A6,y45A8,op1_e3_l_1345B7,op1_e3_l_1745B9);
      real _t45D2#2 = 0.4e1;
      real op1_e3_l_1645D9#2 = λ(T0[])<(T0)^3> (z45AA);
      real op1_e3_l_2345DC#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t45B2,x45A6,op1_e3_l_1645D9,op1_e3_l_1745B9);
      real op1_e3_l_2445DD#1 = λ(T0[],T1[],T2[],T3[])<(T2 * T0 * T1 * T3)> (x45A6,z45AA,_t45D2,op1_e3_l_2345BA);
      real _t45D4#2 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_2345DC,op1_e3_l_2445DD);
      tensor[3] _t45E8#1 = <tensor[3]>[_t45B4,_t45C6,_t45D4];
      real op1_e3_l_2445F1#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t45B2,op1_e3_l_1245B6,op1_e3_l_1345B7,op1_e3_l_1745B9);
      real _t45EA#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_2445F1,op1_e3_l_2545BC);
      real op1_e3_l_234604#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t45B2,y45A8,op1_e3_l_1645D9,op1_e3_l_1745B9);
      real op1_e3_l_244605#1 = λ(T0[],T1[],T2[],T3[])<(T2 * T0 * T1 * T3)> (y45A8,z45AA,_t45D2,op1_e3_l_2345BA);
      real _t45FC#2 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_234604,op1_e3_l_244605);
      tensor[3] _t4610#1 = <tensor[3]>[_t45C6,_t45EA,_t45FC];
      real _t4612#1 = 0.1e2;
      real op1_e3_l_184619#1 = λ(T0[])<(T0)^4> (z45AA);
      real op1_e3_l_31461C#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t45B2,op1_e3_l_184619,op1_e3_l_1745B9);
      real op1_e3_l_32461D#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t4612,op1_e3_l_1345B7,op1_e3_l_2345BA);
      real op1_e3_l_33461E#1 = λ(T0[],T1[])<(T0 * T1)> (_t45AC,op1_e3_l_1745B9);
      real _t4614#1 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_31461C,op1_e3_l_32461D,op1_e3_l_33461E);
      tensor[3] _t462A#1 = <tensor[3]>[_t45D4,_t45FC,_t4614];
      tensor[3,3] hess462C#1 = <tensor[3,3]>[_t45E8,_t4610,_t462A];
      (real[3] evals462E#0,tensor[3][3] _t462F#1) = EigenVecs3x3(hess462C);
      tensor[3] E24631#1 = Subscript<tensor[3][3]>(_t462F,_t45AE);
      tensor[3,3] op1_e3_l_24634#1 = λ(T0[3])<(T0_{i0} * T0_{i1})>_{3 3} (E24631);
      tensor[3,3] m4633#3 = λ(T0[3 3])<(δ_{i0,i1}) - (T0_{i0,i1})>_{3 3} (op1_e3_l_24634);
      real t4637#2 = λ(T0[3 3],T1[3 3])<Σ(i0=0..2)(i1=0..2)<((T0_{i0,i1} * T1_{i0,i1}))>(i0=0..2)(i1=0..2)> (m4633,m4633);
      bool _t463D#1 = EQ<real>(t4637,t4637);
      bool _t463F#1 = BNot(_t463D);
      if _t463F then goto ASSIGN4643 else goto JOIN4645
    ASSIGN4643:  preds = [COND4641]
      tensor[3,3] _t4642#1 = λ()<Z_{i0,i1}>_{3 3} ();
      return _t4642
      goto JOIN4645
    JOIN4645:  preds = [*RETURN(_t4642)4644,COND4641]
      return m4633
}
  function bool all4C14 (point P4C15#1) {
    ENTRY4C16:  preds = []
      bool _t4C17#1 = P4C15.found;
      return _t4C17
}
  function real mean4C1E (point P4C1F#1) {
    ENTRY4C20:  preds = []
      bool _t4C21#1 = P4C1F.found;
      if _t4C21 then goto ASSIGN4C25 else goto ASSIGN4C2A
    ASSIGN4C25:  preds = [COND4C23]
      real _t4C24#1 = 0.1e1;
      goto JOIN4C28
    JOIN4C28:  preds = [ASSIGN4C25,ASSIGN4C2A]
      real _t4C26#1 = phi(_t4C24,_t4C27)
      return _t4C26
    ASSIGN4C2A:  preds = [COND4C23]
      real _t4C27#1 = 0.e0;
      goto JOIN4C28
}
  function real mean4C35 (point P4C36#1) {
    ENTRY4C37:  preds = []
      real _t4C38#1 = P4C36.closest;
      return _t4C38
}
  function real mean4C3F (point P4C40#1, real meancl4C41#1) {
    ENTRY4C42:  preds = []
      real _t4C43#1 = P4C40.closest;
      real op1_e3_l_24C46#1 = λ(T0[],T1[])<(T0) - (T1)> (_t4C43,meancl4C41);
      real _t4C45#1 = λ(T0[])<(T0)^2> (op1_e3_l_24C46);
      return _t4C45
}
  function real max4C54 (point P4C55#1) {
    ENTRY4C56:  preds = []
      real _t4C57#1 = P4C55.mvmt;
      return _t4C57
}
  function real mean4C66 (point P4C67#1) {
    ENTRY4C68:  preds = []
      real _t4C69#1 = P4C67.hh;
      return _t4C69
}
## input initialization
  ENTRY3FA4:  preds = []
    real fMaskTh3FA5#3 = 0.e0;
    globals.fMaskTh3F88 = fMaskTh3FA5;
    globals.fBias3F89 = fMaskTh3FA5;
    real tipd3FA9#1 = 0.1e1;
    globals.tipd3F8A = tipd3FA9;
    real mabd3FAC#1 = 0.75e0;
    globals.mabd3F8B = mabd3FAC;
    real travMax3FAF#1 = 0.1e2;
    globals.travMax3F8C = travMax3FAF;
    int nfsMax3FB2#1 = 20;
    globals.nfsMax3F8D = nfsMax3FB2;
    real gdeTest3FB5#4 = 0.5e0;
    globals.gdeTest3F8E = gdeTest3FB5;
    globals.gdeBack3F8F = gdeTest3FB5;
    real gdeOppor3FB9#1 = 0.12e1;
    globals.gdeOppor3F90 = gdeOppor3FB9;
    real geoEps3FBC#1 = 0.1e0;
    globals.geoEps3F92 = geoEps3FBC;
    real mvmtEps3FBF#2 = 0.1e-1;
    globals.mvmtEps3F93 = mvmtEps3FBF;
    globals.rpcEps3F94 = mvmtEps3FBF;
    real pcmvEps3FC3#1 = 0.3e0;
    globals.pcmvEps3F95 = pcmvEps3FC3;
    globals.isoval3F96 = fMaskTh3FA5;
    int verb3FC7#1 = 0;
    globals.verb3F97 = verb3FC7;
    globals.sfs3F98 = gdeTest3FB5;
    globals.hist3F99 = gdeTest3FB5;
    int pcp3FCC#1 = 5;
    globals.pcp3F9A = pcp3FCC;
    int fDim3FCF#1 = 2;
    globals.fDim3F9C = fDim3FCF;
    return
## global-variable initialization
  ENTRY3FD3:  preds = []
    femData:Mesh meshData3FD4#2 = globals.meshData3F84;
    real tipd3FD6#1 = globals.tipd3F8A;
    real hist3FD8#1 = globals.hist3F99;
    int pcp3FDA#1 = globals.pcp3F9A;
    int fDim3FDC#3 = globals.fDim3F9C;
    int _t3FDE#4 = 0;
    int _t3FE0#3 = 1;
    int _t3FE2#1 = ExtractFemItem<int,NumCell(Mesh)>(meshData3FD4);
    int _t3FE4#1 = ISub(_t3FE2,_t3FE0);
    int[] _t3FE6#1 = Range(_t3FDE,_t3FE4);
    femData:MeshCell[] _t3FE8#1 = <femData:MeshCell[]>{};
  FOREACH3FEB:  preds = [ASSIGN3FE9,NEXT3FF1]
    foreach (_t3FEA in _t3FE6) on exit goto ASSIGN3FF3
      femData:MeshCell[] _t3FEF#1 = phi(_t3FE8,_t3FEE)
    femData:MeshCell _t3FEC#1 = LoadFem<femData:MeshCell>(meshData3FD4,_t3FEA);
    femData:MeshCell[] _t3FEE#1 = Append<femData:MeshCell>(_t3FEF,_t3FEC);
    goto FOREACH3FEB
  ASSIGN3FF3:  preds = [FOREACH3FEB]
    int _t3FF2#3 = 2;
    bool _t3FF4#2 = EQ<int>(_t3FF2,fDim3FDC);
    if _t3FF4 then goto ASSIGN3FF8 else goto ASSIGN4025
  ASSIGN3FF8:  preds = [COND3FF6]
    int _t3FF7#1 = 6;
    goto JOIN3FFB
  JOIN3FFB:  preds = [ASSIGN3FF8,JOIN4027]
    int _t3FF9#1 = phi(_t3FF7,_t3FFA)
    globals.nnmin3F9D = _t3FF9;
    if _t3FF4 then goto ASSIGN3FFF else goto ASSIGN401F
  ASSIGN3FFF:  preds = [COND3FFD]
    int _t3FFE#1 = 8;
    goto JOIN4002
  JOIN4002:  preds = [ASSIGN3FFF,JOIN4023]
    int _t4000#1 = phi(_t3FFE,_t4001)
    globals.nnmax3F9E = _t4000;
    real _t4004#1 = 0.2e1;
    real _t4006#1 = 0.3e1;
    real op1_e3_l_34009#1 = λ(T0[],T1[])<(T0 * T1)> (tipd3FD6,_t4006);
    real rad4008#1 = λ(T0[],T1[])<(T1) / ( T0)> (_t4004,op1_e3_l_34009);
    globals.rad3F9F = rad4008;
    real _t400D#2 = 0.1e1;
    int _t400F#1 = IMul(_t3FF2,pcp3FDA);
    real _t4011#1 = IntToReal(_t400F);
    real _t4013#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t400D,_t4011);
    real pchist4015#1 = MathFn<pow>(hist3FD8,_t4013);
    globals.pchist3FA0 = pchist4015;
    globals.iter3FA1 = _t3FDE;
    globals.rpc3FA2 = _t400D;
    int popLast401A#1 = -1;
    globals.popLast3FA3 = popLast401A;
    return
  ASSIGN401F:  preds = [COND3FFD]
    bool _t401E#1 = EQ<int>(_t3FE0,fDim3FDC);
    if _t401E then goto ASSIGN4022 else goto JOIN4023
  ASSIGN4022:  preds = [COND4020]
    int _t4021#1 = 3;
    goto JOIN4023
  JOIN4023:  preds = [ASSIGN4022,COND4020]
    int _t4001#1 = phi(_t4021,_t3FDE)
    goto JOIN4002
  ASSIGN4025:  preds = [COND3FF6]
    bool _t4024#1 = EQ<int>(_t3FE0,fDim3FDC);
    if _t4024 then goto JOIN4027 else goto JOIN4027
  JOIN4027:  preds = [COND4026,COND4026]
    int _t3FFA#1 = phi(_t3FF2,_t3FDE)
    goto JOIN3FFB
## strand
  strand point (tensor[3] p04028#5, real hh04029#1) in 3D
    state:
      output tensor[3] pos;
      output tensor[3] _pos;
      real ID;
      real hh;
      tensor[3] step;
      bool found;
      int nfs;
      real trav;
      real mvmt;
      real closest;
      int born;
      bool first;
    state init
      ENTRY4036:  preds = []
        real rad4037#1 = globals.rad3F9F;
        real _t4039#1 = 0.1e7;
        real _t403B#1 = TensorIndex<tensor[3],[0]>(p04028);
        real _t4068#1 = urnd403D (_t403B);
        real _t406A#1 = TensorIndex<tensor[3],[1]>(p04028);
        real _t406C#1 = urnd403D (_t406A);
        real _t406E#1 = TensorIndex<tensor[3],[2]>(p04028);
        real _t4070#1 = urnd403D (_t406E);
        real _t4072#1 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (_t4068,_t406C,_t4070);
        real _t4074#2 = 0.1e1;
        real _t4076#1 = MathFn<fmod>(_t4072,_t4074);
        real _t4078#1 = λ(T0[],T1[])<(T0 * T1)> (_t4039,_t4076);
        real _t407A#1 = MathFn<floor>(_t4078);
        real _t407C#4 = 0.e0;
        tensor[3] step407E#1 = <tensor[3]>[_t407C,_t407C,_t407C];
        bool found4080#1 = false;
        int nfs4082#2 = 0;
        bool first4084#1 = true;
        self.pos = p04028;
        self._pos = p04028;
        self.ID = _t407A;
        self.hh = hh04029;
        self.step = step407E;
        self.found = found4080;
        self.nfs = nfs4082;
        self.trav = _t407C;
        self.mvmt = _t4074;
        self.closest = rad4037;
        self.born = nfs4082;
        self.first = first4084;
        return
    end state init
    method update
        ENTRY4093:  preds = []
          real fStrTh4094#4 = globals.fStrTh3F87;
          real fMaskTh4096#4 = globals.fMaskTh3F88;
          real fBias4098#4 = globals.fBias3F89;
          real tipd409A#13 = globals.tipd3F8A;
          real mabd409C#1 = globals.mabd3F8B;
          real travMax409E#3 = globals.travMax3F8C;
          int nfsMax40A0#3 = globals.nfsMax3F8D;
          real gdeTest40A2#1 = globals.gdeTest3F8E;
          real gdeBack40A4#1 = globals.gdeBack3F8F;
          real gdeOppor40A6#1 = globals.gdeOppor3F90;
          real fsEps40A8#3 = globals.fsEps3F91;
          real pcmvEps40AA#1 = globals.pcmvEps3F95;
          int verb40AC#16 = globals.verb3F97;
          real sfs40AE#9 = globals.sfs3F98;
          real hist40B0#2 = globals.hist3F99;
          int pcp40B2#10 = globals.pcp3F9A;
          int fDim40B4#2 = globals.fDim3F9C;
          int nnmin40B6#3 = globals.nnmin3F9D;
          int nnmax40B8#4 = globals.nnmax3F9E;
          real rad40BA#6 = globals.rad3F9F;
          int iter40BC#22 = globals.iter3FA1;
          tensor[3] pos40BE#19 = self.pos;
          real ID40C0#11 = self.ID;
          real hh40C2#7 = self.hh;
          bool found40C4#3 = self.found;
          int nfs40C6#5 = self.nfs;
          real trav40C8#5 = self.trav;
          real mvmt40CA#5 = self.mvmt;
          real closest40CC#1 = self.closest;
          int born40CE#5 = self.born;
          bool first40D0#1 = self.first;
          bool vv40D2#45 = false;
          if first40D0 then goto ASSIGN40D6 else goto JOIN40EE
        ASSIGN40D6:  preds = [COND40D4]
          int _t40D5#1 = 0;
          bool _t40D7#1 = GT<int>(verb40AC,_t40D5);
          if _t40D7 then goto JOIN40DB else goto JOIN40DB
        JOIN40DB:  preds = [COND40D9,COND40D9]
          bool _t40DA#1 = phi(vv40D2,vv40D2)
          if _t40DA then goto ASSIGN40DE else goto ASSIGN4BD8
        ASSIGN40DE:  preds = [COND40DC]
          bool _t40DD#1 = true;
          goto JOIN40E1
        JOIN40E1:  preds = [ASSIGN40DE,ASSIGN4BD9]
          bool _t40DF#1 = phi(_t40DD,_t40E0)
          if _t40DF then goto ASSIGN40E4 else goto JOIN40ED
        ASSIGN40E4:  preds = [COND40E2]
          string _t40E3#1 = "(i#";
          string _t40E5#1 = " @ ";
          string _t40E7#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID40C0,_t40E3,iter40BC,_t40E5,pos40BE,_t40E7);
          string _t40EA#1 = " HELLO!\n";
          Print<[string]>(_t40EA);
          goto JOIN40ED
        JOIN40ED:  preds = [MASSIGN40EC,COND40E2]
          goto JOIN40EE
        JOIN40EE:  preds = [JOIN40ED,COND40D4]
          real _t40EF#23 = 0.e0;
          tensor[3] _t40F1#5 = <tensor[3]>[_t40EF,_t40EF,_t40EF];
          tensor[3] op1_e3_l_240F4#2 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (pos40BE,_t40F1);
          real op1_e3_l_440F5#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_240F4,op1_e3_l_240F4);
          real _t40F3#3 = λ(T0[])<Sqrt(T0)> (op1_e3_l_440F5);
          real _t40F9#11 = 0.4e1;
          bool _t40FB#2 = LT<real>(_t40F3,_t40F9);
          if _t40FB then goto ASSIGN40FF else goto JOIN4103
        ASSIGN40FF:  preds = [COND40FD]
          real _t40FE#1 = 0.3e1;
          bool _t4100#1 = GT<real>(_t40F3,_t40FE);
          goto JOIN4103
        JOIN4103:  preds = [ASSIGN4101,COND40FD]
          bool _t4102#1 = phi(_t4100,vv40D2)
          if _t4102 then goto ASSIGN4106 else goto JOIN41D5
        ASSIGN4106:  preds = [COND4104]
          real x4105#5 = TensorIndex<tensor[3],[0]>(pos40BE);
          real y4107#5 = TensorIndex<tensor[3],[1]>(pos40BE);
          real z4109#6 = TensorIndex<tensor[3],[2]>(pos40BE);
          real _t410B#6 = 0.2e1;
          int _t410D#1 = 2;
          real op1_e3_l_64110#2 = λ(T0[])<(T0)^2> (x4105);
          real op1_e3_l_74111#2 = λ(T0[])<(T0)^2> (y4107);
          real op1_e3_l_84112#8 = λ(T0[])<(T0)^2> (z4109);
          real op1_e3_l_94113#2 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_64110,op1_e3_l_74111,op1_e3_l_84112);
          real op1_e3_l_114114#7 = λ(T0[])<Cosine(T0)> (op1_e3_l_94113);
          real _t410F#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t410B,x4105,op1_e3_l_84112,op1_e3_l_114114);
          real _t411B#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t410B,y4107,op1_e3_l_84112,op1_e3_l_114114);
          real op1_e3_l_14412C#3 = λ(T0[])<(T0)^3> (z4109);
          real op1_e3_l_20412E#8 = λ(T0[])<Sine(T0)> (op1_e3_l_94113);
          real op1_e3_l_21412F#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t410B,op1_e3_l_14412C,op1_e3_l_114114);
          real op1_e3_l_224130#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t410B,z4109,op1_e3_l_20412E);
          real _t4127#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_21412F,op1_e3_l_224130);
          tensor[3] g413B#1 = <tensor[3]>[_t410F,_t411B,_t4127];
          real _t413F#6 = -0.4e1;
          real op1_e3_l_244148#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t413F,op1_e3_l_64110,op1_e3_l_84112,op1_e3_l_20412E);
          real op1_e3_l_254149#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t410B,op1_e3_l_84112,op1_e3_l_114114);
          real _t4141#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_244148,op1_e3_l_254149);
          real _t4153#2 = λ(T0[],T1[],T2[],T3[],T4[])<(T0 * T1 * T2 * T3 * T4)> (_t413F,x4105,y4107,op1_e3_l_84112,op1_e3_l_20412E);
          real op1_e3_l_234167#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t413F,x4105,op1_e3_l_14412C,op1_e3_l_20412E);
          real op1_e3_l_244168#1 = λ(T0[],T1[],T2[],T3[])<(T2 * T0 * T1 * T3)> (x4105,z4109,_t40F9,op1_e3_l_114114);
          real _t415F#2 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_234167,op1_e3_l_244168);
          tensor[3] _t4173#1 = <tensor[3]>[_t4141,_t4153,_t415F];
          real op1_e3_l_24417C#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t413F,op1_e3_l_74111,op1_e3_l_84112,op1_e3_l_20412E);
          real _t4175#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_24417C,op1_e3_l_254149);
          real op1_e3_l_23418F#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t413F,y4107,op1_e3_l_14412C,op1_e3_l_20412E);
          real op1_e3_l_244190#1 = λ(T0[],T1[],T2[],T3[])<(T2 * T0 * T1 * T3)> (y4107,z4109,_t40F9,op1_e3_l_114114);
          real _t4187#2 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_23418F,op1_e3_l_244190);
          tensor[3] _t419B#1 = <tensor[3]>[_t4153,_t4175,_t4187];
          real _t419D#1 = 0.1e2;
          real op1_e3_l_1841A4#1 = λ(T0[])<(T0)^4> (z4109);
          real op1_e3_l_3141A7#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t413F,op1_e3_l_1841A4,op1_e3_l_20412E);
          real op1_e3_l_3241A8#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t419D,op1_e3_l_84112,op1_e3_l_114114);
          real op1_e3_l_3341A9#1 = λ(T0[],T1[])<(T0 * T1)> (_t410B,op1_e3_l_20412E);
          real _t419F#1 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_3141A7,op1_e3_l_3241A8,op1_e3_l_3341A9);
          tensor[3] _t41B5#1 = <tensor[3]>[_t415F,_t4187,_t419F];
          tensor[3,3] hess41B7#1 = <tensor[3,3]>[_t4173,_t419B,_t41B5];
          real[3] _t41B9#1 = EigenVals3x3(hess41B7);
          real _t41BC#1 = Subscript<real[3]>(_t41B9,_t410D);
          real op1_e3_l_341BF#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (g413B);
          real op1_e3_l_441C0#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_341BF);
          real op1_e3_l_541C1#1 = λ(T0[])<Neg(T0)> (_t41BC);
          real op1_e3_l_641C2#1 = λ(T0[],T1[])<(T0 + T1)> (fBias4098,op1_e3_l_441C0);
          real str41BE#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_541C1,op1_e3_l_641C2);
          bool _t41C8#1 = GT<real>(str41BE,fStrTh4094);
          if _t41C8 then goto ASSIGN41CC else goto JOIN41D3
        ASSIGN41CC:  preds = [COND41CA]
          bool _t41CB#1 = GTE<real>(_t40EF,fMaskTh4096);
          if _t41CB then goto ASSIGN41CF else goto JOIN41D1
        ASSIGN41CF:  preds = [COND41CD]
          bool _t41CE#1 = true;
          goto JOIN41D1
        JOIN41D1:  preds = [ASSIGN41CF,COND41CD]
          bool _t41D0#1 = phi(_t41CE,vv40D2)
          goto JOIN41D3
        JOIN41D3:  preds = [JOIN41D1,COND41CA]
          bool _t41D2#1 = phi(_t41D0,vv40D2)
          goto JOIN41D5
        JOIN41D5:  preds = [JOIN41D3,COND4104]
          bool _t41D4#1 = phi(_t41D2,vv40D2)
          bool _t41D6#1 = BNot(_t41D4);
          if _t41D6 then goto ASSIGN41DA else goto JOIN42CB
        ASSIGN41DA:  preds = [COND41D8]
          int _t41D9#1 = 0;
          bool _t41DB#1 = GT<int>(verb40AC,_t41D9);
          if _t41DB then goto JOIN41DF else goto JOIN41DF
        JOIN41DF:  preds = [COND41DD,COND41DD]
          bool _t41DE#1 = phi(vv40D2,vv40D2)
          if _t41DE then goto ASSIGN41E2 else goto ASSIGN4BD5
        ASSIGN41E2:  preds = [COND41E0]
          bool _t41E1#1 = true;
          goto JOIN41E5
        JOIN41E5:  preds = [ASSIGN41E2,ASSIGN4BD6]
          bool _t41E3#1 = phi(_t41E1,_t41E4)
          if _t41E3 then goto ASSIGN41E8 else goto JOIN42C9
        ASSIGN41E8:  preds = [COND41E6]
          string _t41E7#1 = "(i#";
          string _t41E9#1 = " @ ";
          string _t41EB#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID40C0,_t41E7,iter40BC,_t41E9,pos40BE,_t41EB);
          string _t41EE#1 = "!inside=";
          if _t40FB then goto ASSIGN41F2 else goto JOIN41F6
        ASSIGN41F2:  preds = [COND41F0]
          real _t41F1#1 = 0.3e1;
          bool _t41F3#1 = GT<real>(_t40F3,_t41F1);
          goto JOIN41F6
        JOIN41F6:  preds = [ASSIGN41F4,COND41F0]
          bool _t41F5#1 = phi(_t41F3,vv40D2)
          string _t41F7#1 = " || fStrength=";
          real x41F9#5 = TensorIndex<tensor[3],[0]>(pos40BE);
          real y41FB#5 = TensorIndex<tensor[3],[1]>(pos40BE);
          real z41FD#6 = TensorIndex<tensor[3],[2]>(pos40BE);
          real _t41FF#6 = 0.2e1;
          int _t4201#1 = 2;
          real op1_e3_l_64204#2 = λ(T0[])<(T0)^2> (x41F9);
          real op1_e3_l_74205#2 = λ(T0[])<(T0)^2> (y41FB);
          real op1_e3_l_84206#8 = λ(T0[])<(T0)^2> (z41FD);
          real op1_e3_l_94207#2 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_64204,op1_e3_l_74205,op1_e3_l_84206);
          real op1_e3_l_114208#7 = λ(T0[])<Cosine(T0)> (op1_e3_l_94207);
          real _t4203#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t41FF,x41F9,op1_e3_l_84206,op1_e3_l_114208);
          real _t420F#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t41FF,y41FB,op1_e3_l_84206,op1_e3_l_114208);
          real op1_e3_l_144220#3 = λ(T0[])<(T0)^3> (z41FD);
          real op1_e3_l_204222#8 = λ(T0[])<Sine(T0)> (op1_e3_l_94207);
          real op1_e3_l_214223#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t41FF,op1_e3_l_144220,op1_e3_l_114208);
          real op1_e3_l_224224#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t41FF,z41FD,op1_e3_l_204222);
          real _t421B#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_214223,op1_e3_l_224224);
          tensor[3] g422F#1 = <tensor[3]>[_t4203,_t420F,_t421B];
          real _t4233#6 = -0.4e1;
          real op1_e3_l_24423C#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t4233,op1_e3_l_64204,op1_e3_l_84206,op1_e3_l_204222);
          real op1_e3_l_25423D#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t41FF,op1_e3_l_84206,op1_e3_l_114208);
          real _t4235#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_24423C,op1_e3_l_25423D);
          real _t4247#2 = λ(T0[],T1[],T2[],T3[],T4[])<(T0 * T1 * T2 * T3 * T4)> (_t4233,x41F9,y41FB,op1_e3_l_84206,op1_e3_l_204222);
          real op1_e3_l_23425B#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t4233,x41F9,op1_e3_l_144220,op1_e3_l_204222);
          real op1_e3_l_24425C#1 = λ(T0[],T1[],T2[],T3[])<(T2 * T0 * T1 * T3)> (x41F9,z41FD,_t40F9,op1_e3_l_114208);
          real _t4253#2 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_23425B,op1_e3_l_24425C);
          tensor[3] _t4267#1 = <tensor[3]>[_t4235,_t4247,_t4253];
          real op1_e3_l_244270#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t4233,op1_e3_l_74205,op1_e3_l_84206,op1_e3_l_204222);
          real _t4269#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_244270,op1_e3_l_25423D);
          real op1_e3_l_234283#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t4233,y41FB,op1_e3_l_144220,op1_e3_l_204222);
          real op1_e3_l_244284#1 = λ(T0[],T1[],T2[],T3[])<(T2 * T0 * T1 * T3)> (y41FB,z41FD,_t40F9,op1_e3_l_114208);
          real _t427B#2 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_234283,op1_e3_l_244284);
          tensor[3] _t428F#1 = <tensor[3]>[_t4247,_t4269,_t427B];
          real _t4291#1 = 0.1e2;
          real op1_e3_l_184298#1 = λ(T0[])<(T0)^4> (z41FD);
          real op1_e3_l_31429B#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t4233,op1_e3_l_184298,op1_e3_l_204222);
          real op1_e3_l_32429C#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t4291,op1_e3_l_84206,op1_e3_l_114208);
          real op1_e3_l_33429D#1 = λ(T0[],T1[])<(T0 * T1)> (_t41FF,op1_e3_l_204222);
          real _t4293#1 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_31429B,op1_e3_l_32429C,op1_e3_l_33429D);
          tensor[3] _t42A9#1 = <tensor[3]>[_t4253,_t427B,_t4293];
          tensor[3,3] hess42AB#1 = <tensor[3,3]>[_t4267,_t428F,_t42A9];
          real[3] _t42AD#1 = EigenVals3x3(hess42AB);
          real _t42B0#1 = Subscript<real[3]>(_t42AD,_t4201);
          real op1_e3_l_342B3#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (g422F);
          real op1_e3_l_442B4#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_342B3);
          real op1_e3_l_542B5#1 = λ(T0[])<Neg(T0)> (_t42B0);
          real op1_e3_l_642B6#1 = λ(T0[],T1[])<(T0 + T1)> (fBias4098,op1_e3_l_442B4);
          real str42B2#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_542B5,op1_e3_l_642B6);
          string _t42BC#1 = " <= fStrTh=";
          string _t42BE#1 = " || fMask(pos)=";
          string _t42C0#1 = " < fMaskTh=";
          string _t42C2#1 = " || fTest(pos)=";
          bool _t42C4#1 = true;
          string _t42C6#1 = " ==>DIE\n";
          Print<[string,bool,string,real,string,real,string,real,string,real,string,bool,string]>(_t41EE,_t41F5,_t41F7,str42B2,_t42BC,fStrTh4094,_t42BE,_t40EF,_t42C0,fMaskTh4096,_t42C2,_t42C4,_t42C6);
          goto JOIN42C9
        JOIN42C9:  preds = [MASSIGN42C8,COND41E6]
          die
          goto JOIN42CB
        JOIN42CB:  preds = [*DIE42CA,COND41D8]
          bool _t42CC#1 = GT<real>(travMax409E,_t40EF);
          if _t42CC then goto ASSIGN42D0 else goto JOIN42D4
        ASSIGN42D0:  preds = [COND42CE]
          bool _t42CF#1 = GT<real>(trav40C8,travMax409E);
          if _t42CF then goto DIE42D2 else goto JOIN42D3
        DIE42D2:  preds = [COND42D1]
          die
          goto JOIN42D3
        JOIN42D3:  preds = [*DIE42D2,COND42D1]
          goto JOIN42D4
        JOIN42D4:  preds = [JOIN42D3,COND42CE]
          bool _t42D5#1 = BNot(found40C4);
          if _t42D5 then goto ASSIGN42D9 else goto ASSIGN4461
        ASSIGN42D9:  preds = [COND42D7]
          int _t42D8#3 = 0;
          bool _t42DA#1 = GT<int>(nfsMax40A0,_t42D8);
          if _t42DA then goto ASSIGN42DE else goto JOIN4301
        ASSIGN42DE:  preds = [COND42DC]
          bool _t42DD#1 = GT<int>(nfs40C6,nfsMax40A0);
          if _t42DD then goto ASSIGN42E1 else goto JOIN4300
        ASSIGN42E1:  preds = [COND42DF]
          bool _t42E0#1 = GT<int>(verb40AC,_t42D8);
          if _t42E0 then goto JOIN42E4 else goto JOIN42E4
        JOIN42E4:  preds = [COND42E2,COND42E2]
          bool _t42E3#1 = phi(vv40D2,vv40D2)
          if _t42E3 then goto ASSIGN42E7 else goto ASSIGN445E
        ASSIGN42E7:  preds = [COND42E5]
          bool _t42E6#1 = true;
          goto JOIN42EA
        JOIN42EA:  preds = [ASSIGN42E7,ASSIGN445F]
          bool _t42E8#1 = phi(_t42E6,_t42E9)
          if _t42E8 then goto ASSIGN42ED else goto JOIN42FE
        ASSIGN42ED:  preds = [COND42EB]
          string _t42EC#1 = "(i#";
          string _t42EE#1 = " @ ";
          string _t42F0#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID40C0,_t42EC,iter40BC,_t42EE,pos40BE,_t42F0);
          string _t42F3#1 = "nfs=";
          string _t42F5#1 = " > nfsMax=";
          string _t42F7#1 = " || trav=";
          string _t42F9#1 = " > travMax=";
          string _t42FB#1 = " =>DIE\n";
          Print<[string,int,string,int,string,real,string,real,string]>(_t42F3,nfs40C6,_t42F5,nfsMax40A0,_t42F7,trav40C8,_t42F9,travMax409E,_t42FB);
          goto JOIN42FE
        JOIN42FE:  preds = [MASSIGN42FD,COND42EB]
          die
          goto JOIN4300
        JOIN4300:  preds = [*DIE42FF,COND42DF]
          goto JOIN4301
        JOIN4301:  preds = [JOIN4300,COND42DC]
          tensor[3] _t43F0#2 = fStep4302 (pos40BE);
          tensor[3] step43F2#3 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs40AE,_t43F0);
          tensor[3] pos43F4#2 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos40BE,step43F2);
          real op1_e3_l_543F9#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (_t43F0);
          real op1_e3_l_643FA#1 = λ(T0[],T1[])<(T0 * T0 * T1)> (sfs40AE,op1_e3_l_543F9);
          real op1_e3_l_743FB#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_643FA);
          real op1_e3_l_1143FC#3 = λ(T0[],T1[])<(T1) / ( T0)> (tipd409A,op1_e3_l_743FB);
          real op1_e3_l_1243FD#1 = λ(T0[],T1[])<(T0) - (T1)> (mvmt40CA,op1_e3_l_1143FC);
          real op1_e3_l_1443FE#1 = λ(T0[],T1[])<(T0 * T1)> (hist40B0,op1_e3_l_1243FD);
          real mvmt43F8#2 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_1143FC,op1_e3_l_1443FE);
          bool _t4406#1 = GT<real>(mvmt43F8,fsEps40A8);
          if _t4406 then goto ASSIGN4D2F else goto ASSIGN445B
        ASSIGN4D2F:  preds = [COND4408]
          real trav4409#1 = λ(T0[],T1[])<(T0 + T1)> (trav40C8,op1_e3_l_1143FC);
          int _t4413#1 = 1;
          int nfs4415#1 = IAdd(nfs40C6,_t4413);
          goto JOIN441D
        JOIN441D:  preds = [ASSIGN4416,ASSIGN445C]
          real mvmt4417#2 = phi(mvmt43F8,mvmt4418)
          real trav4419#1 = phi(trav4409,_t40EF)
          int nfs441A#1 = phi(nfs4415,nfs40C6)
          bool found441B#2 = phi(found40C4,found441C)
          bool _t441E#1 = GT<int>(verb40AC,_t42D8);
          if _t441E then goto JOIN4422 else goto JOIN4422
        JOIN4422:  preds = [COND4420,COND4420]
          bool _t4421#1 = phi(vv40D2,vv40D2)
          if _t4421 then goto ASSIGN4425 else goto ASSIGN4459
        ASSIGN4425:  preds = [COND4423]
          bool _t4424#1 = true;
          goto JOIN4428
        JOIN4428:  preds = [ASSIGN4425,ASSIGN445A]
          bool _t4426#1 = phi(_t4424,_t4427)
          if _t4426 then goto ASSIGN442B else goto JOIN443A
        ASSIGN442B:  preds = [COND4429]
          string _t442A#1 = "(i#";
          string _t442C#1 = " @ ";
          string _t442E#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID40C0,_t442A,iter40BC,_t442C,pos43F4,_t442E);
          string _t4431#1 = "step=";
          string _t4433#1 = "; mvmt=";
          string _t4435#1 = " => found=";
          string _t4437#1 = "\n";
          Print<[string,tensor[3],string,real,string,bool,string]>(_t4431,step43F2,_t4433,mvmt4417,_t4435,found441B,_t4437);
          goto JOIN443A
        JOIN443A:  preds = [MASSIGN4439,COND4429]
          goto JOIN444B
        JOIN444B:  preds = [JOIN443A,JOIN4B80]
          int born443B#1 = phi(born40CE,born443C)
          real closest443D#1 = phi(closest40CC,closest443E)
          real mvmt443F#1 = phi(mvmt4417,mvmt4440)
          real trav4441#1 = phi(trav4419,trav4442)
          int nfs4443#1 = phi(nfs441A,nfs40C6)
          bool found4444#1 = phi(found441B,found40C4)
          tensor[3] step4445#1 = phi(step43F2,step4446)
          real hh4447#1 = phi(hh40C2,hh4448)
          tensor[3] pos4449#2 = phi(pos43F4,pos444A)
          self.pos = pos4449;
          self._pos = pos4449;
          self.hh = hh4447;
          self.step = step4445;
          self.found = found4444;
          self.nfs = nfs4443;
          self.trav = trav4441;
          self.mvmt = mvmt443F;
          self.closest = closest443D;
          self.born = born443B;
          self.first = vv40D2;
          active
        ASSIGN4459:  preds = [COND4423]
          int _t4458#1 = 1;
          bool _t4427#1 = GT<int>(verb40AC,_t4458);
          goto JOIN4428
        ASSIGN445B:  preds = [COND4408]
          bool found441C#1 = true;
          real mvmt4418#1 = 0.1e1;
          goto JOIN441D
        ASSIGN445E:  preds = [COND42E5]
          int _t445D#1 = 1;
          bool _t42E9#1 = GT<int>(verb40AC,_t445D);
          goto JOIN42EA
        ASSIGN4461:  preds = [COND42D7]
          int _t4460#25 = 0;
          bool _t4462#1 = EQ<int>(_t4460,fDim40B4);
          if _t4462 then goto SAVE4465 else goto JOIN4467
        SAVE4465:  preds = [COND4464]
          self.pos = pos40BE;
          stabilize
          goto JOIN4467
        JOIN4467:  preds = [*STABILIZE4466,COND4464]
          tensor[3] _t4468#2 = fStep4302 (pos40BE);
          tensor[3] step446A#10 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs40AE,_t4468);
          tensor[3] pos446C#20 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (pos40BE,step446A);
          real op1_e3_l_44471#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (_t4468);
          real op1_e3_l_54472#1 = λ(T0[],T1[])<(T0 * T0 * T1)> (sfs40AE,op1_e3_l_44471);
          real op1_e3_l_64473#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_54472);
          real op1_e3_l_74474#2 = λ(T0[],T1[])<(T1) / ( T0)> (tipd409A,op1_e3_l_64473);
          real trav4470#4 = λ(T0[],T1[])<(T0 + T1)> (trav40C8,op1_e3_l_74474);
          point[] _t447A#1 = SphereQuery<3,point>(pos446C,rad40BA);
        FOREACH447D:  preds = [ASSIGN447B,NEXT4516]
          foreach (P447C in _t447A) on exit goto ASSIGN4574
            int nn4514#3 = phi(_t4460,nn4513)
            tensor[3] force44FF#4 = phi(_t40F1,force44FE)
            real oldE44D6#4 = phi(_t40EF,oldE44D5)
          tensor[3] _t447E#1 = P447C.pos;
          tensor[3] op1_e3_l_94483#3 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (_t447E,pos446C);
          real op1_e3_l_114484#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_94483,op1_e3_l_94483);
          real op1_e3_l_124485#3 = λ(T0[])<Sqrt(T0)> (op1_e3_l_114484);
          real _t4480#1 = λ(T0[],T1[])<(T1) / ( T0)> (tipd409A,op1_e3_l_124485);
          bool _t448C#1 = LT<real>(_t4480,fsEps40A8);
          if _t448C then goto ASSIGN4490 else goto JOIN4496
        ASSIGN4490:  preds = [COND448E]
          real _t448F#1 = P447C.ID;
          bool _t4491#1 = LTE<real>(ID40C0,_t448F);
          if _t4491 then goto DIE4494 else goto JOIN4495
        DIE4494:  preds = [COND4493]
          die
          goto JOIN4495
        JOIN4495:  preds = [*DIE4494,COND4493]
          goto JOIN4496
        JOIN4496:  preds = [JOIN4495,COND448E]
          real _t4497#12 = λ(T0[],T1[])<(T1) / ( T0)> (rad40BA,op1_e3_l_124485);
          real _t44A3#2 = 0.2e1;
          real _t44A5#2 = 0.3e1;
          real _t44A7#2 = λ(T0[],T1[])<(T0) / ( T1)> (_t44A3,_t44A5);
          bool _t44A9#2 = LT<real>(_t4497,_t44A7);
          if _t44A9 then goto ASSIGN44AD else goto ASSIGN4544
        ASSIGN44AD:  preds = [COND44AB]
          real _t44AC#1 = 0.1e1;
          real _t44AE#1 = -0.5646e1;
          real _t44B0#1 = 0.119835e2;
          real _t44B2#1 = -0.113535e2;
          real _t44B4#1 = 0.40550625e1;
          real op1_e3_l_5844BD#1 = λ(T0[],T1[])<(T0 * T1)> (_t44B4,_t4497);
          real op1_e3_l_6044BE#1 = λ(T0[],T1[])<(T0 + T1)> (_t44B2,op1_e3_l_5844BD);
          real op1_e3_l_6144BF#1 = λ(T0[],T1[])<(T0 * T1)> (_t4497,op1_e3_l_6044BE);
          real op1_e3_l_6344C0#1 = λ(T0[],T1[])<(T0 + T1)> (_t44B0,op1_e3_l_6144BF);
          real op1_e3_l_6444C1#1 = λ(T0[],T1[])<(T0 * T1)> (_t4497,op1_e3_l_6344C0);
          real op1_e3_l_6644C2#1 = λ(T0[],T1[])<(T0 + T1)> (_t44AE,op1_e3_l_6444C1);
          real op1_e3_l_6744C3#1 = λ(T0[],T1[])<(T0 * T1)> (_t4497,op1_e3_l_6644C2);
          real _t44B6#1 = λ(T0[],T1[])<(T0 + T1)> (_t44AC,op1_e3_l_6744C3);
          goto JOIN44D4
        JOIN44D4:  preds = [ASSIGN44D1,JOIN4572]
          real _t44D2#1 = phi(_t44B6,_t44D3)
          real oldE44D5#1 = λ(T0[],T1[])<(T0 + T1)> (oldE44D6,_t44D2);
          if _t44A9 then goto ASSIGN44DA else goto ASSIGN4518
        ASSIGN44DA:  preds = [COND44D8]
          real _t44D9#1 = -0.5646e1;
          real _t44DB#1 = 0.23967e2;
          real _t44DD#1 = -0.340605e2;
          real _t44DF#1 = 0.1622025e2;
          real op1_e3_l_4444E8#1 = λ(T0[],T1[])<(T0 * T1)> (_t44DF,_t4497);
          real op1_e3_l_4644E9#1 = λ(T0[],T1[])<(T0 + T1)> (_t44DD,op1_e3_l_4444E8);
          real op1_e3_l_4744EA#1 = λ(T0[],T1[])<(T0 * T1)> (_t4497,op1_e3_l_4644E9);
          real op1_e3_l_4944EB#1 = λ(T0[],T1[])<(T0 + T1)> (_t44DB,op1_e3_l_4744EA);
          real op1_e3_l_5044EC#1 = λ(T0[],T1[])<(T0 * T1)> (_t4497,op1_e3_l_4944EB);
          real _t44E1#1 = λ(T0[],T1[])<(T0 + T1)> (_t44D9,op1_e3_l_5044EC);
          goto JOIN44FB
        JOIN44FB:  preds = [ASSIGN44F8,JOIN4542]
          real _t44F9#1 = phi(_t44E1,_t44FA)
          real _t44FC#1 = 0.1e1;
          real op1_e3_l_144502#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t44FC,rad40BA);
          tensor[3] op1_e3_l_234505#1 = λ(T0[],T1[],T2[3])<(T0 * T1 * T2_{i0})>_{3} (_t44F9,op1_e3_l_144502,op1_e3_l_94483);
          tensor[3] op1_e3_l_254507#1 = λ(T0[3],T1[])<(T0_{i0}) / ( T1)>_{3} (op1_e3_l_234505,op1_e3_l_124485);
          tensor[3] force44FE#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (force44FF,op1_e3_l_254507);
          int _t4511#1 = 1;
          int nn4513#1 = IAdd(nn4514,_t4511);
          goto FOREACH447D
        ASSIGN4518:  preds = [COND44D8]
          real _t4517#1 = 0.1e1;
          bool _t4519#1 = LT<real>(_t4497,_t4517);
          if _t4519 then goto ASSIGN451D else goto JOIN4542
        ASSIGN451D:  preds = [COND451B]
          real _t451C#1 = 0.1234567901e-1;
          real _t451E#2 = 0.486e1;
          real _t4520#1 = -0.1458e2;
          real _t4522#1 = 0.1458e2;
          real op1_e3_l_42452B#1 = λ(T0[],T1[])<(T0 * T1)> (_t44A5,_t4497);
          real op1_e3_l_73452C#4 = λ(T0[],T1[])<(T1) - (T0)> (_t44A3,op1_e3_l_42452B);
          real op1_e3_l_74452D#1 = λ(T0[],T1[])<(T0 * T1)> (_t451E,op1_e3_l_73452C);
          real op1_e3_l_76452E#1 = λ(T0[],T1[])<(T0) - (T1)> (_t4522,op1_e3_l_74452D);
          real op1_e3_l_77452F#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_73452C,op1_e3_l_76452E);
          real op1_e3_l_794530#1 = λ(T0[],T1[])<(T0 + T1)> (_t4520,op1_e3_l_77452F);
          real op1_e3_l_804531#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_73452C,op1_e3_l_794530);
          real op1_e3_l_824532#1 = λ(T0[],T1[])<(T0 + T1)> (_t451E,op1_e3_l_804531);
          real _t4524#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t451C,op1_e3_l_73452C,op1_e3_l_824532);
          goto JOIN4542
        JOIN4542:  preds = [ASSIGN4541,COND451B]
          real _t44FA#1 = phi(_t4524,_t40EF)
          goto JOIN44FB
        ASSIGN4544:  preds = [COND44AB]
          real _t4543#1 = 0.1e1;
          bool _t4545#1 = LT<real>(_t4497,_t4543);
          if _t4545 then goto ASSIGN4549 else goto JOIN4572
        ASSIGN4549:  preds = [COND4547]
          real _t4548#1 = -0.1e-2;
          real _t454A#1 = 0.9e-1;
          real _t454C#1 = -0.54e0;
          real _t454E#1 = 0.1215e1;
          real _t4550#1 = 0.972e0;
          real op1_e3_l_50455A#5 = λ(T0[],T1[])<(T0) - (T1)> (_t4497,_t44A7);
          real op1_e3_l_51455B#1 = λ(T0[],T1[])<(T0 * T1)> (_t4550,op1_e3_l_50455A);
          real op1_e3_l_62455C#1 = λ(T0[],T1[])<(T0) - (T1)> (_t454E,op1_e3_l_51455B);
          real op1_e3_l_64455D#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_62455C,op1_e3_l_50455A);
          real op1_e3_l_75455E#1 = λ(T0[],T1[])<(T0 + T1)> (_t454C,op1_e3_l_64455D);
          real op1_e3_l_77455F#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_75455E,op1_e3_l_50455A);
          real op1_e3_l_984560#1 = λ(T0[],T1[])<(T0 + T1)> (_t454A,op1_e3_l_77455F);
          real op1_e3_l_1014561#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (op1_e3_l_984560,op1_e3_l_50455A,op1_e3_l_50455A);
          real _t4552#1 = λ(T0[],T1[])<(T0 + T1)> (_t4548,op1_e3_l_1014561);
          goto JOIN4572
        JOIN4572:  preds = [ASSIGN4571,COND4547]
          real _t44D3#1 = phi(_t4552,_t40EF)
          goto JOIN44D4
        ASSIGN4574:  preds = [FOREACH447D]
          bool _t4573#1 = EQ<int>(_t4460,nn4514);
          if _t4573 then goto ASSIGN4577 else goto JOIN47CF
        ASSIGN4577:  preds = [COND4575]
          bool _t4576#1 = GT<int>(pcp40B2,_t4460);
          if _t4576 then goto ASSIGN457A else goto JOIN4583
        ASSIGN457A:  preds = [COND4578]
          bool _t4579#1 = GT<int>(iter40BC,_t4460);
          if _t4579 then goto ASSIGN457D else goto JOIN4581
        ASSIGN457D:  preds = [COND457B]
          int _t457C#1 = IMod(iter40BC,pcp40B2);
          bool _t457E#1 = EQ<int>(_t4460,_t457C);
          goto JOIN4581
        JOIN4581:  preds = [ASSIGN457F,COND457B]
          bool _t4580#1 = phi(_t457E,vv40D2)
          goto JOIN4583
        JOIN4583:  preds = [JOIN4581,COND4578]
          bool _t4582#1 = phi(_t4580,vv40D2)
          if _t4582 then goto ASSIGN4586 else goto JOIN4592
        ASSIGN4586:  preds = [COND4584]
          int _t4585#1 = IDiv(iter40BC,pcp40B2);
          int _t4587#2 = 2;
          int _t4589#1 = IMod(_t4585,_t4587);
          int _t458B#1 = IMul(_t4589,_t4587);
          int _t458D#1 = 1;
          int _t458F#1 = ISub(_t458B,_t458D);
          goto JOIN4592
        JOIN4592:  preds = [ASSIGN4590,COND4584]
          int _t4591#1 = phi(_t458F,_t4460)
          bool _t4593#1 = GT<int>(_t4591,_t4460);
          if _t4593 then goto ASSIGN4597 else goto JOIN4599
        ASSIGN4597:  preds = [COND4595]
          bool _t4596#1 = LT<int>(born40CE,nnmax40B8);
          goto JOIN4599
        JOIN4599:  preds = [ASSIGN4597,COND4595]
          bool _t4598#1 = phi(_t4596,vv40D2)
          bool _t459A#1 = BNot(_t4598);
          if _t459A then goto SAVE459D else goto JOIN45A2
        SAVE459D:  preds = [COND459C]
          self.pos = pos446C;
          self._pos = pos446C;
          self.step = step446A;
          self.trav = trav4470;
          active
          goto JOIN45A2
        JOIN45A2:  preds = [*ACTIVE45A1,COND459C]
          tensor[3,3] _t4647#3 = fPerp45A3 (pos446C);
          tensor[3] _t4649#1 = <tensor[3]>[tipd409A,_t40EF,_t40EF];
          tensor[3] noff0464B#3 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (_t4647,_t4649);
          tensor[3] _t464D#1 = <tensor[3]>[_t40EF,tipd409A,_t40EF];
          tensor[3] noff1464F#3 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (_t4647,_t464D);
          tensor[3] _t4651#1 = <tensor[3]>[_t40EF,_t40EF,tipd409A];
          tensor[3] noff24653#3 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (_t4647,_t4651);
          real op1_e3_l_44657#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (noff0464B,noff0464B);
          real _t4655#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_44657);
          real op1_e3_l_4465D#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (noff1464F,noff1464F);
          real _t465B#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_4465D);
          bool _t4661#1 = GT<real>(_t4655,_t465B);
          if _t4661 then goto JOIN4665 else goto JOIN4665
        JOIN4665:  preds = [COND4663,COND4663]
          tensor[3] _t4664#2 = phi(noff0464B,noff1464F)
          real op1_e3_l_14667#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (_t4664);
          real _t4666#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_14667);
          real op1_e3_l_4466C#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (noff24653,noff24653);
          real _t466A#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_4466C);
          bool _t4670#1 = GT<real>(_t4666,_t466A);
          if _t4670 then goto JOIN4674 else goto JOIN4674
        JOIN4674:  preds = [COND4672,COND4672]
          tensor[3] _t4673#2 = phi(_t4664,noff24653)
          real op1_e3_l_64676#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (_t4673);
          real op1_e3_l_74677#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_64676);
          real op1_e3_l_84678#1 = λ(T0[])<(1) / ( T0)> (op1_e3_l_74677);
          tensor[3] op1_e3_l_94679#2 = λ(T0[],T1[3],T2[])<(T0 * T1_{i0} * T2)>_{3} (tipd409A,_t4673,op1_e3_l_84678);
          tensor[3] npos4675#1 = λ(T0[3],T1[3],T2[3])<(T1_{i0} + T0_{i0} + T2_{i0})>_{3} (pos40BE,op1_e3_l_94679,step446A);
          tensor[3] _t4681#1 = fStep4302 (npos4675);
          tensor[3] op1_e3_l_134689#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs40AE,_t4681);
          tensor[3] npos4683#5 = λ(T0[3],T1[3],T2[3],T3[3])<(T1_{i0} + T0_{i0} + T2_{i0} + T3_{i0})>_{3} (pos40BE,op1_e3_l_94679,step446A,op1_e3_l_134689);
          bool _t4691#2 = GT<int>(verb40AC,_t4460);
          if _t4691 then goto JOIN4695 else goto JOIN4695
        JOIN4695:  preds = [COND4693,COND4693]
          bool _t4694#1 = phi(vv40D2,vv40D2)
          if _t4694 then goto ASSIGN4698 else goto ASSIGN4BD2
        ASSIGN4698:  preds = [COND4696]
          bool _t4697#1 = true;
          goto JOIN469B
        JOIN469B:  preds = [ASSIGN4698,ASSIGN4BD3]
          bool _t4699#1 = phi(_t4697,_t469A)
          if _t4699 then goto ASSIGN469E else goto JOIN46C3
        ASSIGN469E:  preds = [COND469C]
          string _t469D#1 = "(i#";
          string _t469F#1 = " @ ";
          string _t46A1#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID40C0,_t469D,iter40BC,_t469F,pos446C,_t46A1);
          string _t46A4#1 = " 0==nn =>NEW(";
          string _t46A6#1 = ") w/ ID=";
          real _t46A8#1 = 0.1e7;
          real _t46AA#1 = TensorIndex<tensor[3],[0]>(npos4683);
          real _t46AC#1 = urnd403D (_t46AA);
          real _t46AE#1 = TensorIndex<tensor[3],[1]>(npos4683);
          real _t46B0#1 = urnd403D (_t46AE);
          real _t46B2#1 = TensorIndex<tensor[3],[2]>(npos4683);
          real _t46B4#1 = urnd403D (_t46B2);
          real _t46B6#1 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (_t46AC,_t46B0,_t46B4);
          real _t46B8#1 = 0.1e1;
          real _t46BA#1 = MathFn<fmod>(_t46B6,_t46B8);
          real _t46BC#1 = λ(T0[],T1[])<(T0 * T1)> (_t46A8,_t46BA);
          real _t46BE#1 = MathFn<floor>(_t46BC);
          string _t46C0#1 = "\n";
          Print<[string,tensor[3],string,real,string]>(_t46A4,npos4683,_t46A6,_t46BE,_t46C0);
          goto JOIN46C3
        JOIN46C3:  preds = [MASSIGN46C2,COND469C]
          tensor[3] op1_e3_l_846C7#2 = λ(T0[3],T1[3])<(T1_{i0}) - (T0_{i0})>_{3} (_t40F1,pos446C);
          real op1_e3_l_1046C8#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_846C7,op1_e3_l_846C7);
          real _t46C4#2 = λ(T0[])<Sqrt(T0)> (op1_e3_l_1046C8);
          bool _t46CE#1 = LT<real>(_t46C4,_t40F9);
          if _t46CE then goto ASSIGN46D2 else goto JOIN46D6
        ASSIGN46D2:  preds = [COND46D0]
          real _t46D1#1 = 0.3e1;
          bool _t46D3#1 = GT<real>(_t46C4,_t46D1);
          goto JOIN46D6
        JOIN46D6:  preds = [ASSIGN46D4,COND46D0]
          bool _t46D5#1 = phi(_t46D3,vv40D2)
          if _t46D5 then goto ASSIGN46D9 else goto JOIN47A8
        ASSIGN46D9:  preds = [COND46D7]
          real x46D8#5 = TensorIndex<tensor[3],[0]>(pos446C);
          real y46DA#5 = TensorIndex<tensor[3],[1]>(pos446C);
          real z46DC#6 = TensorIndex<tensor[3],[2]>(pos446C);
          real _t46DE#6 = 0.2e1;
          int _t46E0#1 = 2;
          real op1_e3_l_646E3#2 = λ(T0[])<(T0)^2> (x46D8);
          real op1_e3_l_746E4#2 = λ(T0[])<(T0)^2> (y46DA);
          real op1_e3_l_846E5#8 = λ(T0[])<(T0)^2> (z46DC);
          real op1_e3_l_946E6#2 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_646E3,op1_e3_l_746E4,op1_e3_l_846E5);
          real op1_e3_l_1146E7#7 = λ(T0[])<Cosine(T0)> (op1_e3_l_946E6);
          real _t46E2#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t46DE,x46D8,op1_e3_l_846E5,op1_e3_l_1146E7);
          real _t46EE#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t46DE,y46DA,op1_e3_l_846E5,op1_e3_l_1146E7);
          real op1_e3_l_1446FF#3 = λ(T0[])<(T0)^3> (z46DC);
          real op1_e3_l_204701#8 = λ(T0[])<Sine(T0)> (op1_e3_l_946E6);
          real op1_e3_l_214702#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t46DE,op1_e3_l_1446FF,op1_e3_l_1146E7);
          real op1_e3_l_224703#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t46DE,z46DC,op1_e3_l_204701);
          real _t46FA#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_214702,op1_e3_l_224703);
          tensor[3] g470E#1 = <tensor[3]>[_t46E2,_t46EE,_t46FA];
          real _t4712#6 = -0.4e1;
          real op1_e3_l_24471B#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t4712,op1_e3_l_646E3,op1_e3_l_846E5,op1_e3_l_204701);
          real op1_e3_l_25471C#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t46DE,op1_e3_l_846E5,op1_e3_l_1146E7);
          real _t4714#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_24471B,op1_e3_l_25471C);
          real _t4726#2 = λ(T0[],T1[],T2[],T3[],T4[])<(T0 * T1 * T2 * T3 * T4)> (_t4712,x46D8,y46DA,op1_e3_l_846E5,op1_e3_l_204701);
          real op1_e3_l_23473A#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t4712,x46D8,op1_e3_l_1446FF,op1_e3_l_204701);
          real op1_e3_l_24473B#1 = λ(T0[],T1[],T2[],T3[])<(T2 * T0 * T1 * T3)> (x46D8,z46DC,_t40F9,op1_e3_l_1146E7);
          real _t4732#2 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_23473A,op1_e3_l_24473B);
          tensor[3] _t4746#1 = <tensor[3]>[_t4714,_t4726,_t4732];
          real op1_e3_l_24474F#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t4712,op1_e3_l_746E4,op1_e3_l_846E5,op1_e3_l_204701);
          real _t4748#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_24474F,op1_e3_l_25471C);
          real op1_e3_l_234762#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t4712,y46DA,op1_e3_l_1446FF,op1_e3_l_204701);
          real op1_e3_l_244763#1 = λ(T0[],T1[],T2[],T3[])<(T2 * T0 * T1 * T3)> (y46DA,z46DC,_t40F9,op1_e3_l_1146E7);
          real _t475A#2 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_234762,op1_e3_l_244763);
          tensor[3] _t476E#1 = <tensor[3]>[_t4726,_t4748,_t475A];
          real _t4770#1 = 0.1e2;
          real op1_e3_l_184777#1 = λ(T0[])<(T0)^4> (z46DC);
          real op1_e3_l_31477A#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t4712,op1_e3_l_184777,op1_e3_l_204701);
          real op1_e3_l_32477B#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t4770,op1_e3_l_846E5,op1_e3_l_1146E7);
          real op1_e3_l_33477C#1 = λ(T0[],T1[])<(T0 * T1)> (_t46DE,op1_e3_l_204701);
          real _t4772#1 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_31477A,op1_e3_l_32477B,op1_e3_l_33477C);
          tensor[3] _t4788#1 = <tensor[3]>[_t4732,_t475A,_t4772];
          tensor[3,3] hess478A#1 = <tensor[3,3]>[_t4746,_t476E,_t4788];
          real[3] _t478C#1 = EigenVals3x3(hess478A);
          real _t478F#1 = Subscript<real[3]>(_t478C,_t46E0);
          real op1_e3_l_34792#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (g470E);
          real op1_e3_l_44793#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_34792);
          real op1_e3_l_54794#1 = λ(T0[])<Neg(T0)> (_t478F);
          real op1_e3_l_64795#1 = λ(T0[],T1[])<(T0 + T1)> (fBias4098,op1_e3_l_44793);
          real str4791#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_54794,op1_e3_l_64795);
          bool _t479B#1 = GT<real>(str4791,fStrTh4094);
          if _t479B then goto ASSIGN479F else goto JOIN47A6
        ASSIGN479F:  preds = [COND479D]
          bool _t479E#1 = GTE<real>(_t40EF,fMaskTh4096);
          if _t479E then goto ASSIGN47A2 else goto JOIN47A4
        ASSIGN47A2:  preds = [COND47A0]
          bool _t47A1#1 = true;
          goto JOIN47A4
        JOIN47A4:  preds = [ASSIGN47A2,COND47A0]
          bool _t47A3#1 = phi(_t47A1,vv40D2)
          goto JOIN47A6
        JOIN47A6:  preds = [JOIN47A4,COND479D]
          bool _t47A5#1 = phi(_t47A3,vv40D2)
          goto JOIN47A8
        JOIN47A8:  preds = [JOIN47A6,COND46D7]
          bool _t47A7#1 = phi(_t47A5,vv40D2)
          if _t47A7 then goto NEW47AA else goto JOIN47B0
        NEW47AA:  preds = [COND47A9]
          new point(npos4683,hh40C2);
          int _t47AB#1 = 1;
          int born47AD#1 = IAdd(born40CE,_t47AB);
          goto JOIN47B0
        JOIN47B0:  preds = [ASSIGN47AE,COND47A9]
          int born47AF#1 = phi(born47AD,born40CE)
          if _t4691 then goto JOIN47B3 else goto JOIN47B3
        JOIN47B3:  preds = [COND47B1,COND47B1]
          bool _t47B2#1 = phi(vv40D2,vv40D2)
          if _t47B2 then goto ASSIGN47B6 else goto ASSIGN4BCF
        ASSIGN47B6:  preds = [COND47B4]
          bool _t47B5#1 = true;
          goto JOIN47B9
        JOIN47B9:  preds = [ASSIGN47B6,ASSIGN4BD0]
          bool _t47B7#1 = phi(_t47B5,_t47B8)
          if _t47B7 then goto ASSIGN47BC else goto JOIN47C7
        ASSIGN47BC:  preds = [COND47BA]
          string _t47BB#1 = "(i#";
          string _t47BD#1 = " @ ";
          string _t47BF#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID40C0,_t47BB,iter40BC,_t47BD,pos446C,_t47BF);
          string _t47C2#1 = "nn=0; after birthing mvmt=";
          string _t47C4#1 = "\n";
          Print<[string,real,string]>(_t47C2,mvmt40CA,_t47C4);
          goto JOIN47C7
        JOIN47C7:  preds = [MASSIGN47C6,COND47BA]
          self.pos = pos446C;
          self._pos = pos446C;
          self.step = step446A;
          self.trav = trav4470;
          self.born = born47AF;
          active
          goto JOIN47CF
        JOIN47CF:  preds = [*ACTIVE47CD,COND4575]
          int born47CE#9 = phi(born40CE)
          tensor[3,3] _t47D0#1 = fPerp45A3 (pos446C);
          tensor[3] op1_e3_l_347D3#4 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (_t47D0,force44FF);
          tensor[3] es47D2#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (hh40C2,op1_e3_l_347D3);
          real op1_e3_l_547D8#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_347D3,op1_e3_l_347D3);
          real op1_e3_l_647D9#1 = λ(T0[],T1[])<(T0 * T0 * T1)> (hh40C2,op1_e3_l_547D8);
          real _t47D6#2 = λ(T0[])<Sqrt(T0)> (op1_e3_l_647D9);
          bool _t47DE#1 = GT<real>(_t47D6,tipd409A);
          if _t47DE then goto ASSIGN4CFA else goto JOIN47FB
        ASSIGN4CFA:  preds = [COND47E0]
          real op1_e3_l_1047E6#2 = λ(T0[],T1[])<(T0) / ( T1)> (tipd409A,_t47D6);
          real hh47E1#1 = λ(T0[],T1[])<(T0 * T1)> (hh40C2,op1_e3_l_1047E6);
          tensor[3] es47ED#1 = λ(T0[],T1[],T2[3])<(T0 * T1 * T2_{i0})>_{3} (hh40C2,op1_e3_l_1047E6,op1_e3_l_347D3);
          goto JOIN47FB
        JOIN47FB:  preds = [ASSIGN4CFB,COND47E0]
          tensor[3] es47F9#6 = phi(es47ED,es47D2)
          real hh47FA#2 = phi(hh47E1,hh40C2)
          tensor[3] _t47FC#1 = λ(T0[3],T1[3],T2[3])<(T0_{i0} + T2_{i0} + T1_{i0})>_{3} (pos40BE,es47F9,step446A);
          tensor[3] _t4800#2 = fStep4302 (_t47FC);
          tensor[3] fs4802#4 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs40AE,_t4800);
          real op1_e3_l_54805#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (_t4800);
          real op1_e3_l_64806#1 = λ(T0[],T1[])<(T0 * T0 * T1)> (sfs40AE,op1_e3_l_54805);
          real op1_e3_l_74807#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (es47F9);
          real op1_e3_l_84808#1 = λ(T0[],T1[])<(T0 * T1)> (fsEps40A8,tipd409A);
          real op1_e3_l_94809#2 = λ(T0[])<Sqrt(T0)> (op1_e3_l_74807);
          real op1_e3_l_10480A#2 = λ(T0[])<Sqrt(T0)> (op1_e3_l_64806);
          real op1_e3_l_11480B#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_84808,op1_e3_l_94809);
          real _t4804#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_10480A,op1_e3_l_11480B);
          real _t4814#3 = 0.5e0;
          bool _t4816#1 = GT<real>(_t4804,_t4814);
          if _t4816 then goto ASSIGN481A else goto JOIN4854
        ASSIGN481A:  preds = [COND4818]
          real hh4819#2 = λ(T0[],T1[])<(T0 * T1)> (hh47FA,_t4814);
          bool _t481B#1 = GT<int>(verb40AC,_t4460);
          if _t481B then goto JOIN481F else goto JOIN481F
        JOIN481F:  preds = [COND481D,COND481D]
          bool _t481E#1 = phi(vv40D2,vv40D2)
          if _t481E then goto ASSIGN4822 else goto ASSIGN4BCC
        ASSIGN4822:  preds = [COND4820]
          bool _t4821#1 = true;
          goto JOIN4825
        JOIN4825:  preds = [ASSIGN4822,ASSIGN4BCD]
          bool _t4823#1 = phi(_t4821,_t4824)
          if _t4823 then goto ASSIGN4828 else goto JOIN484B
        ASSIGN4828:  preds = [COND4826]
          string _t4827#1 = "(i#";
          string _t4829#1 = " @ ";
          string _t482B#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID40C0,_t4827,iter40BC,_t4829,pos446C,_t482B);
          string _t482E#1 = "nn=";
          string _t4830#1 = "; |fs|/|es|=";
          real _t4832#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_10480A,op1_e3_l_94809);
          string _t483E#1 = " > 0.5; trying again with hh=";
          string _t4840#1 = "; mvmt=";
          string _t4842#3 = "\n";
          Print<[string,int,string,real,string,real,string,real,string]>(_t482E,nn4514,_t4830,_t4832,_t483E,hh4819,_t4840,mvmt40CA,_t4842);
          string _t4845#1 = "        fs=";
          Print<[string,tensor[3],string]>(_t4845,fs4802,_t4842);
          string _t4848#1 = "        es=";
          Print<[string,tensor[3],string]>(_t4848,es47F9,_t4842);
          goto JOIN484B
        JOIN484B:  preds = [MASSIGN484A,COND4826]
          self.pos = pos446C;
          self._pos = pos446C;
          self.hh = hh4819;
          self.step = step446A;
          self.trav = trav4470;
          self.born = born47CE;
          active
          goto JOIN4854
        JOIN4854:  preds = [*ACTIVE4852,COND4818]
          real hh4853#2 = phi(hh47FA)
          tensor[3] pos4855#7 = λ(T0[3],T1[3],T2[3],T3[3])<(T0_{i0} + T2_{i0} + T3_{i0} + T1_{i0})>_{3} (pos40BE,es47F9,step446A,fs4802);
          point[] _t485B#1 = SphereQuery<3,point>(pos4855,rad40BA);
        FOREACH485E:  preds = [ASSIGN485C,NEXT48C4]
          foreach (P485D in _t485B) on exit goto ASSIGN48F8
            tensor[3] mno48B5#2 = phi(_t40F1,mno48B4)
            real newE48B0#6 = phi(_t40EF,newE48AF)
            int nn48C2#9 = phi(_t4460,nn48C1)
            real closest443E#3 = phi(rad40BA,closest48B2)
          tensor[3] _t485F#1 = P485D.pos;
          tensor[3] op1_e3_l_134865#3 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (_t485F,pos4855);
          real op1_e3_l_154866#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_134865,op1_e3_l_134865);
          real _t4861#2 = λ(T0[])<Sqrt(T0)> (op1_e3_l_154866);
          real _t486D#7 = λ(T0[],T1[])<(T1) / ( T0)> (rad40BA,_t4861);
          real _t487B#1 = 0.2e1;
          real _t487D#1 = 0.3e1;
          real _t487F#2 = λ(T0[],T1[])<(T0) / ( T1)> (_t487B,_t487D);
          bool _t4881#1 = LT<real>(_t486D,_t487F);
          if _t4881 then goto ASSIGN4885 else goto ASSIGN48C6
        ASSIGN4885:  preds = [COND4883]
          real _t4884#1 = 0.1e1;
          real _t4886#1 = -0.5646e1;
          real _t4888#1 = 0.119835e2;
          real _t488A#1 = -0.113535e2;
          real _t488C#1 = 0.40550625e1;
          real op1_e3_l_784896#1 = λ(T0[],T1[])<(T0 * T1)> (_t488C,_t486D);
          real op1_e3_l_804897#1 = λ(T0[],T1[])<(T0 + T1)> (_t488A,op1_e3_l_784896);
          real op1_e3_l_814898#1 = λ(T0[],T1[])<(T0 * T1)> (_t486D,op1_e3_l_804897);
          real op1_e3_l_834899#1 = λ(T0[],T1[])<(T0 + T1)> (_t4888,op1_e3_l_814898);
          real op1_e3_l_84489A#1 = λ(T0[],T1[])<(T0 * T1)> (_t486D,op1_e3_l_834899);
          real op1_e3_l_86489B#1 = λ(T0[],T1[])<(T0 + T1)> (_t4886,op1_e3_l_84489A);
          real op1_e3_l_87489C#1 = λ(T0[],T1[])<(T0 * T1)> (_t486D,op1_e3_l_86489B);
          real _t488E#1 = λ(T0[],T1[])<(T0 + T1)> (_t4884,op1_e3_l_87489C);
          goto JOIN48AE
        JOIN48AE:  preds = [ASSIGN48AB,JOIN48F6]
          real _t48AC#1 = phi(_t488E,_t48AD)
          real newE48AF#1 = λ(T0[],T1[])<(T0 + T1)> (newE48B0,_t48AC);
          real closest48B2#1 = Min<real>(closest443E,_t4861);
          tensor[3] mno48B4#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (mno48B5,op1_e3_l_134865);
          int _t48BF#1 = 1;
          int nn48C1#1 = IAdd(nn48C2,_t48BF);
          goto FOREACH485E
        ASSIGN48C6:  preds = [COND4883]
          real _t48C5#1 = 0.1e1;
          bool _t48C7#1 = LT<real>(_t486D,_t48C5);
          if _t48C7 then goto ASSIGN48CB else goto JOIN48F6
        ASSIGN48CB:  preds = [COND48C9]
          real _t48CA#1 = -0.1e-2;
          real _t48CC#1 = 0.9e-1;
          real _t48CE#1 = -0.54e0;
          real _t48D0#1 = 0.1215e1;
          real _t48D2#1 = 0.972e0;
          real op1_e3_l_6748DD#5 = λ(T0[],T1[])<(T0) - (T1)> (_t486D,_t487F);
          real op1_e3_l_6848DE#1 = λ(T0[],T1[])<(T0 * T1)> (_t48D2,op1_e3_l_6748DD);
          real op1_e3_l_8148DF#1 = λ(T0[],T1[])<(T0) - (T1)> (_t48D0,op1_e3_l_6848DE);
          real op1_e3_l_8348E0#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_8148DF,op1_e3_l_6748DD);
          real op1_e3_l_9648E1#1 = λ(T0[],T1[])<(T0 + T1)> (_t48CE,op1_e3_l_8348E0);
          real op1_e3_l_9848E2#1 = λ(T0[],T1[])<(T0 * T1)> (op1_e3_l_9648E1,op1_e3_l_6748DD);
          real op1_e3_l_12348E3#1 = λ(T0[],T1[])<(T0 + T1)> (_t48CC,op1_e3_l_9848E2);
          real op1_e3_l_12648E4#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (op1_e3_l_12348E3,op1_e3_l_6748DD,op1_e3_l_6748DD);
          real _t48D4#1 = λ(T0[],T1[])<(T0 + T1)> (_t48CA,op1_e3_l_12648E4);
          goto JOIN48F6
        JOIN48F6:  preds = [ASSIGN48F5,COND48C9]
          real _t48AD#1 = phi(_t48D4,_t40EF)
          goto JOIN48AE
        ASSIGN48F8:  preds = [FOREACH485E]
          real _t48F7#2 = IntToReal(nn48C2);
          bool _t48F9#2 = GT<int>(verb40AC,_t4460);
          if _t48F9 then goto JOIN48FD else goto JOIN48FD
        JOIN48FD:  preds = [COND48FB,COND48FB]
          bool _t48FC#1 = phi(vv40D2,vv40D2)
          if _t48FC then goto ASSIGN4900 else goto ASSIGN4BC9
        ASSIGN4900:  preds = [COND48FE]
          bool _t48FF#1 = true;
          goto JOIN4903
        JOIN4903:  preds = [ASSIGN4900,ASSIGN4BCA]
          bool _t4901#1 = phi(_t48FF,_t4902)
          if _t4901 then goto ASSIGN4906 else goto JOIN4915
        ASSIGN4906:  preds = [COND4904]
          string _t4905#1 = "(i#";
          string _t4907#1 = " @ ";
          string _t4909#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID40C0,_t4905,iter40BC,_t4907,pos4855,_t4909);
          string _t490C#1 = "nn=";
          string _t490E#1 = "; oldE=";
          string _t4910#1 = " newE=";
          string _t4912#1 = "\n";
          Print<[string,int,string,real,string,real,string]>(_t490C,nn48C2,_t490E,oldE44D6,_t4910,newE48B0,_t4912);
          goto JOIN4915
        JOIN4915:  preds = [MASSIGN4914,COND4904]
          real _t4916#2 = λ(T0[],T1[])<(T0) - (T1)> (newE48B0,oldE44D6);
          tensor[3] _t4918#2 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (pos4855,pos446C);
          tensor[3] op1_e3_l_174928#1 = λ(T0[3])<Neg(T0_{i0})>_{3} (force44FF);
          real op1_e3_l_184929#2 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (_t4918,op1_e3_l_174928);
          real _t4922#1 = λ(T0[],T1[])<(T0 * T1)> (gdeTest40A2,op1_e3_l_184929);
          bool _t4932#1 = GT<real>(_t4916,_t4922);
          if _t4932 then goto ASSIGN4936 else goto JOIN4990
        ASSIGN4936:  preds = [COND4934]
          real hh4935#3 = λ(T0[],T1[])<(T0 * T1)> (hh4853,gdeBack40A4);
          bool _t4937#1 = EQ<real>(_t40EF,hh4935);
          if _t4937 then goto ASSIGN493B else goto JOIN4945
        ASSIGN493B:  preds = [COND4939]
          string _t493A#1 = "(i#";
          string _t493C#1 = " @ ";
          string _t493E#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID40C0,_t493A,iter40BC,_t493C,pos4855,_t493E);
          string _t4941#1 = "backtracked all the way to hh=0\n";
          Print<[string]>(_t4941);
          die
          goto JOIN4945
        JOIN4945:  preds = [*DIE4944,COND4939]
          if _t48F9 then goto JOIN4948 else goto JOIN4948
        JOIN4948:  preds = [COND4946,COND4946]
          bool _t4947#1 = phi(vv40D2,vv40D2)
          if _t4947 then goto ASSIGN494B else goto ASSIGN4BC6
        ASSIGN494B:  preds = [COND4949]
          bool _t494A#1 = true;
          goto JOIN494E
        JOIN494E:  preds = [ASSIGN494B,ASSIGN4BC7]
          bool _t494C#1 = phi(_t494A,_t494D)
          if _t494C then goto ASSIGN4951 else goto JOIN4986
        ASSIGN4951:  preds = [COND494F]
          string _t4950#1 = "(i#";
          string _t4952#1 = " @ ";
          string _t4954#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID40C0,_t4950,iter40BC,_t4952,pos4855,_t4954);
          string _t4957#1 = "nn=";
          string _t4959#1 = "; oldE=";
          string _t495B#1 = " newE=";
          string _t495D#1 = "; backtracking; hh=";
          string _t495F#1 = "; mvmt=";
          string _t4961#7 = "\n";
          Print<[string,int,string,real,string,real,string,real,string,real,string]>(_t4957,nn48C2,_t4959,oldE44D6,_t495B,newE48B0,_t495D,hh4935,_t495F,mvmt40CA,_t4961);
          string _t4964#1 = "      fs=";
          Print<[string,tensor[3],string]>(_t4964,fs4802,_t4961);
          string _t4967#1 = "      es=";
          Print<[string,tensor[3],string]>(_t4967,es47F9,_t4961);
          string _t496A#1 = "      newE - oldE=";
          Print<[string,real,string]>(_t496A,_t4916,_t4961);
          string _t496D#1 = "      force=";
          Print<[string,tensor[3],string]>(_t496D,force44FF,_t4961);
          string _t4970#1 = "      dpos=";
          Print<[string,tensor[3],string]>(_t4970,_t4918,_t4961);
          string _t4973#1 = "      0.5*(pos - oldpos).(-force)=";
          real _t4975#1 = λ(T0[],T1[])<(T0 * T1)> (_t4814,op1_e3_l_184929);
          Print<[string,real,string]>(_t4973,_t4975,_t4961);
          goto JOIN4986
        JOIN4986:  preds = [MASSIGN4985,COND494F]
          self.pos = pos446C;
          self._pos = pos446C;
          self.hh = hh4935;
          self.step = step446A;
          self.trav = trav4470;
          self.closest = closest443E;
          self.born = born47CE;
          active
          goto JOIN4990
        JOIN4990:  preds = [*ACTIVE498E,COND4934]
          real hh498F#1 = phi(hh4853)
          tensor[3] pos444A#8 = phi(pos4855)
          real hh4448#2 = λ(T0[],T1[])<(T0 * T1)> (hh498F,gdeOppor40A6);
          tensor[3] step4446#3 = λ(T0[3],T1[3],T2[3])<(T1_{i0} + T2_{i0} + T0_{i0})>_{3} (es47F9,step446A,fs4802);
          real op1_e3_l_12499B#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (step4446,step4446);
          real op1_e3_l_13499C#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_12499B);
          real _t4997#4 = λ(T0[],T1[])<(T1) / ( T0)> (tipd409A,op1_e3_l_13499C);
          real trav4442#1 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (trav40C8,op1_e3_l_74474,_t4997);
          real op1_e3_l_2549BE#1 = λ(T0[],T1[])<(T0) - (T1)> (mvmt40CA,_t4997);
          real op1_e3_l_2749BF#1 = λ(T0[],T1[])<(T0 * T1)> (hist40B0,op1_e3_l_2549BE);
          real mvmt4440#1 = λ(T0[],T1[])<(T0 + T1)> (_t4997,op1_e3_l_2749BF);
          bool _t49C9#1 = LT<real>(_t4997,pcmvEps40AA);
          if _t49C9 then goto ASSIGN49CD else goto JOIN4B80
        ASSIGN49CD:  preds = [COND49CB]
          bool _t49CC#3 = GT<int>(pcp40B2,_t4460);
          if _t49CC then goto ASSIGN49D0 else goto JOIN49D9
        ASSIGN49D0:  preds = [COND49CE]
          bool _t49CF#1 = GT<int>(iter40BC,_t4460);
          if _t49CF then goto ASSIGN49D3 else goto JOIN49D7
        ASSIGN49D3:  preds = [COND49D1]
          int _t49D2#1 = IMod(iter40BC,pcp40B2);
          bool _t49D4#1 = EQ<int>(_t4460,_t49D2);
          goto JOIN49D7
        JOIN49D7:  preds = [ASSIGN49D5,COND49D1]
          bool _t49D6#1 = phi(_t49D4,vv40D2)
          goto JOIN49D9
        JOIN49D9:  preds = [JOIN49D7,COND49CE]
          bool _t49D8#1 = phi(_t49D6,vv40D2)
          if _t49D8 then goto ASSIGN49DC else goto JOIN49E8
        ASSIGN49DC:  preds = [COND49DA]
          int _t49DB#1 = IDiv(iter40BC,pcp40B2);
          int _t49DD#2 = 2;
          int _t49DF#1 = IMod(_t49DB,_t49DD);
          int _t49E1#1 = IMul(_t49DF,_t49DD);
          int _t49E3#1 = 1;
          int _t49E5#1 = ISub(_t49E1,_t49E3);
          goto JOIN49E8
        JOIN49E8:  preds = [ASSIGN49E6,COND49DA]
          int _t49E7#1 = phi(_t49E5,_t4460)
          bool _t49E9#1 = NEQ<int>(_t49E7,_t4460);
          if _t49E9 then goto COND49EC else goto JOIN4B7F
        COND49EC:  preds = [COND49EB]
          if _t49CC then goto ASSIGN49EE else goto JOIN49F7
        ASSIGN49EE:  preds = [COND49EC]
          bool _t49ED#1 = GT<int>(iter40BC,_t4460);
          if _t49ED then goto ASSIGN49F1 else goto JOIN49F5
        ASSIGN49F1:  preds = [COND49EF]
          int _t49F0#1 = IMod(iter40BC,pcp40B2);
          bool _t49F2#1 = EQ<int>(_t4460,_t49F0);
          goto JOIN49F5
        JOIN49F5:  preds = [ASSIGN49F3,COND49EF]
          bool _t49F4#1 = phi(_t49F2,vv40D2)
          goto JOIN49F7
        JOIN49F7:  preds = [JOIN49F5,COND49EC]
          bool _t49F6#1 = phi(_t49F4,vv40D2)
          if _t49F6 then goto ASSIGN49FA else goto JOIN4A06
        ASSIGN49FA:  preds = [COND49F8]
          int _t49F9#1 = IDiv(iter40BC,pcp40B2);
          int _t49FB#2 = 2;
          int _t49FD#1 = IMod(_t49F9,_t49FB);
          int _t49FF#1 = IMul(_t49FD,_t49FB);
          int _t4A01#1 = 1;
          int _t4A03#1 = ISub(_t49FF,_t4A01);
          goto JOIN4A06
        JOIN4A06:  preds = [ASSIGN4A04,COND49F8]
          int _t4A05#1 = phi(_t4A03,_t4460)
          bool _t4A07#1 = GT<int>(_t4A05,_t4460);
          if _t4A07 then goto ASSIGN4A0B else goto JOIN4A17
        ASSIGN4A0B:  preds = [COND4A09]
          bool _t4A0A#1 = LT<real>(newE48B0,_t40EF);
          if _t4A0A then goto ASSIGN4A0E else goto JOIN4A15
        ASSIGN4A0E:  preds = [COND4A0C]
          bool _t4A0D#1 = LT<int>(nn48C2,nnmin40B6);
          if _t4A0D then goto ASSIGN4A11 else goto JOIN4A13
        ASSIGN4A11:  preds = [COND4A0F]
          bool _t4A10#1 = LT<int>(born47CE,nnmax40B8);
          goto JOIN4A13
        JOIN4A13:  preds = [ASSIGN4A11,COND4A0F]
          bool _t4A12#1 = phi(_t4A10,vv40D2)
          goto JOIN4A15
        JOIN4A15:  preds = [JOIN4A13,COND4A0C]
          bool _t4A14#1 = phi(_t4A12,vv40D2)
          goto JOIN4A17
        JOIN4A17:  preds = [JOIN4A15,COND4A09]
          bool _t4A16#1 = phi(_t4A14,vv40D2)
          if _t4A16 then goto ASSIGN4A1F else goto COND4B81
        ASSIGN4A1F:  preds = [COND4A18]
          tensor[3] op1_e3_l_64A1A#3 = λ(T0[3],T1[])<(T0_{i0}) / ( T1)>_{3} (mno48B5,_t48F7);
          real op1_e3_l_84A1B#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_64A1A,op1_e3_l_64A1A);
          real op1_e3_l_94A1C#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_84A1B);
          real op1_e3_l_114A1D#1 = λ(T0[])<(1) / ( T0)> (op1_e3_l_94A1C);
          tensor[3] op1_e3_l_124A1E#1 = λ(T0[],T1[3],T2[])<(T0 * T1_{i0} * T2)>_{3} (tipd409A,op1_e3_l_64A1A,op1_e3_l_114A1D);
          tensor[3] npos4A19#3 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (pos444A,op1_e3_l_124A1E);
          tensor[3] _t4A25#1 = fStep4302 (npos4A19);
          tensor[3] op1_e3_l_164A2E#2 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs40AE,_t4A25);
          tensor[3] npos4A27#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (npos4A19,op1_e3_l_164A2E);
          tensor[3] _t4A37#1 = fStep4302 (npos4A27);
          tensor[3] op1_e3_l_194A41#1 = λ(T0[],T1[3])<(T0 * T1_{i0})>_{3} (sfs40AE,_t4A37);
          tensor[3] npos4A39#6 = λ(T0[3],T1[3],T2[3])<(T0_{i0} + T1_{i0} + T2_{i0})>_{3} (npos4A19,op1_e3_l_164A2E,op1_e3_l_194A41);
          bool birth4A4B#4 = true;
          int _t4A4D#2 = 2;
          bool _t4A4F#1 = EQ<int>(fDim40B4,_t4A4D);
          if _t4A4F then goto ASSIGN4A53 else goto JOIN4A81
        ASSIGN4A53:  preds = [COND4A51]
          int _t4A52#1 = 4;
          bool _t4A54#1 = GTE<int>(nn48C2,_t4A52);
          if _t4A54 then goto ASSIGN4A58 else goto JOIN4A7F
        ASSIGN4A58:  preds = [COND4A56]
          real _t4A57#1 = λ(T0[],T1[])<(T0 * T1)> (tipd409A,mabd409C);
          point[] _t4A59#1 = SphereQuery<3,point>(npos4A39,_t4A57);
        FOREACH4A5C:  preds = [ASSIGN4A5A,NEXT4A5D]
          foreach (P4A5B in _t4A59) on exit goto COND4A5F
            bool birth4A5E#2 = phi(birth4A4B,vv40D2)
          goto FOREACH4A5C
        COND4A5F:  preds = [FOREACH4A5C]
          if birth4A5E then goto ASSIGN4A61 else goto JOIN4A7D
        ASSIGN4A61:  preds = [COND4A5F]
          real _t4A60#1 = TensorIndex<tensor[3],[0]>(pos444A);
          real _t4A62#1 = urnd403D (_t4A60);
          real _t4A64#1 = TensorIndex<tensor[3],[1]>(pos444A);
          real _t4A66#1 = urnd403D (_t4A64);
          real _t4A68#1 = TensorIndex<tensor[3],[2]>(pos444A);
          real _t4A6A#1 = urnd403D (_t4A68);
          real _t4A6C#1 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (_t4A62,_t4A66,_t4A6A);
          real _t4A6E#1 = 0.1e1;
          real _t4A70#1 = MathFn<fmod>(_t4A6C,_t4A6E);
          int _t4A72#1 = ISub(nnmin40B6,nn48C2);
          real _t4A74#1 = IntToReal(_t4A72);
          real _t4A76#1 = IntToReal(nnmin40B6);
          real _t4A78#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t4A74,_t4A76);
          bool birth4A7A#1 = LT<real>(_t4A70,_t4A78);
          goto JOIN4A7D
        JOIN4A7D:  preds = [ASSIGN4A7B,COND4A5F]
          bool birth4A7C#1 = phi(birth4A7A,birth4A5E)
          goto JOIN4A7F
        JOIN4A7F:  preds = [JOIN4A7D,COND4A56]
          bool birth4A7E#1 = phi(birth4A7C,birth4A4B)
          goto JOIN4A81
        JOIN4A81:  preds = [JOIN4A7F,COND4A51]
          bool birth4A80#1 = phi(birth4A7E,birth4A4B)
          if birth4A80 then goto ASSIGN4D09 else goto JOIN4B7B
        ASSIGN4D09:  preds = [COND4A82]
          tensor[3] op1_e3_l_334A8D#2 = λ(T0[3],T1[3])<(T1_{i0}) - (T0_{i0})>_{3} (_t40F1,npos4A39);
          real op1_e3_l_354A8E#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_334A8D,op1_e3_l_334A8D);
          real _t4A83#2 = λ(T0[])<Sqrt(T0)> (op1_e3_l_354A8E);
          bool _t4A9B#1 = LT<real>(_t4A83,_t40F9);
          if _t4A9B then goto ASSIGN4A9F else goto JOIN4AA3
        ASSIGN4A9F:  preds = [COND4A9D]
          real _t4A9E#1 = 0.3e1;
          bool _t4AA0#1 = GT<real>(_t4A83,_t4A9E);
          goto JOIN4AA3
        JOIN4AA3:  preds = [ASSIGN4AA1,COND4A9D]
          bool _t4AA2#1 = phi(_t4AA0,vv40D2)
          if _t4AA2 then goto ASSIGN4AA6 else goto JOIN4B71
        ASSIGN4AA6:  preds = [COND4AA4]
          real x4AA5#5 = TensorIndex<tensor[3],[0]>(npos4A39);
          real y4AA7#5 = TensorIndex<tensor[3],[1]>(npos4A39);
          real z4AA9#6 = TensorIndex<tensor[3],[2]>(npos4A39);
          real _t4AAB#6 = 0.2e1;
          real op1_e3_l_64AAE#2 = λ(T0[])<(T0)^2> (x4AA5);
          real op1_e3_l_74AAF#2 = λ(T0[])<(T0)^2> (y4AA7);
          real op1_e3_l_84AB0#8 = λ(T0[])<(T0)^2> (z4AA9);
          real op1_e3_l_94AB1#2 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_64AAE,op1_e3_l_74AAF,op1_e3_l_84AB0);
          real op1_e3_l_114AB2#7 = λ(T0[])<Cosine(T0)> (op1_e3_l_94AB1);
          real _t4AAD#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t4AAB,x4AA5,op1_e3_l_84AB0,op1_e3_l_114AB2);
          real _t4AB9#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t4AAB,y4AA7,op1_e3_l_84AB0,op1_e3_l_114AB2);
          real op1_e3_l_144ACA#3 = λ(T0[])<(T0)^3> (z4AA9);
          real op1_e3_l_204ACC#8 = λ(T0[])<Sine(T0)> (op1_e3_l_94AB1);
          real op1_e3_l_214ACD#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t4AAB,op1_e3_l_144ACA,op1_e3_l_114AB2);
          real op1_e3_l_224ACE#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t4AAB,z4AA9,op1_e3_l_204ACC);
          real _t4AC5#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_214ACD,op1_e3_l_224ACE);
          tensor[3] g4AD9#1 = <tensor[3]>[_t4AAD,_t4AB9,_t4AC5];
          real _t4ADD#6 = -0.4e1;
          real op1_e3_l_244AE6#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t4ADD,op1_e3_l_64AAE,op1_e3_l_84AB0,op1_e3_l_204ACC);
          real op1_e3_l_254AE7#2 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t4AAB,op1_e3_l_84AB0,op1_e3_l_114AB2);
          real _t4ADF#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_244AE6,op1_e3_l_254AE7);
          real _t4AF1#2 = λ(T0[],T1[],T2[],T3[],T4[])<(T0 * T1 * T2 * T3 * T4)> (_t4ADD,x4AA5,y4AA7,op1_e3_l_84AB0,op1_e3_l_204ACC);
          real op1_e3_l_234B05#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t4ADD,x4AA5,op1_e3_l_144ACA,op1_e3_l_204ACC);
          real op1_e3_l_244B06#1 = λ(T0[],T1[],T2[],T3[])<(T2 * T0 * T1 * T3)> (x4AA5,z4AA9,_t40F9,op1_e3_l_114AB2);
          real _t4AFD#2 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_234B05,op1_e3_l_244B06);
          tensor[3] _t4B11#1 = <tensor[3]>[_t4ADF,_t4AF1,_t4AFD];
          real op1_e3_l_244B1A#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t4ADD,op1_e3_l_74AAF,op1_e3_l_84AB0,op1_e3_l_204ACC);
          real _t4B13#1 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_244B1A,op1_e3_l_254AE7);
          real op1_e3_l_234B2D#1 = λ(T0[],T1[],T2[],T3[])<(T0 * T1 * T2 * T3)> (_t4ADD,y4AA7,op1_e3_l_144ACA,op1_e3_l_204ACC);
          real op1_e3_l_244B2E#1 = λ(T0[],T1[],T2[],T3[])<(T2 * T0 * T1 * T3)> (y4AA7,z4AA9,_t40F9,op1_e3_l_114AB2);
          real _t4B25#2 = λ(T0[],T1[])<(T0 + T1)> (op1_e3_l_234B2D,op1_e3_l_244B2E);
          tensor[3] _t4B39#1 = <tensor[3]>[_t4AF1,_t4B13,_t4B25];
          real _t4B3B#1 = 0.1e2;
          real op1_e3_l_184B42#1 = λ(T0[])<(T0)^4> (z4AA9);
          real op1_e3_l_314B45#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t4ADD,op1_e3_l_184B42,op1_e3_l_204ACC);
          real op1_e3_l_324B46#1 = λ(T0[],T1[],T2[])<(T0 * T1 * T2)> (_t4B3B,op1_e3_l_84AB0,op1_e3_l_114AB2);
          real op1_e3_l_334B47#1 = λ(T0[],T1[])<(T0 * T1)> (_t4AAB,op1_e3_l_204ACC);
          real _t4B3D#1 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (op1_e3_l_314B45,op1_e3_l_324B46,op1_e3_l_334B47);
          tensor[3] _t4B53#1 = <tensor[3]>[_t4AFD,_t4B25,_t4B3D];
          tensor[3,3] hess4B55#1 = <tensor[3,3]>[_t4B11,_t4B39,_t4B53];
          real[3] _t4B57#1 = EigenVals3x3(hess4B55);
          real _t4B5A#1 = Subscript<real[3]>(_t4B57,_t4A4D);
          real op1_e3_l_34B5D#1 = λ(T0[3])<Σ(i0=0..2)<((T0_{i0} * T0_{i0}))>(i0=0..2)> (g4AD9);
          real op1_e3_l_44B5E#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_34B5D);
          real op1_e3_l_54B5F#1 = λ(T0[])<Neg(T0)> (_t4B5A);
          real op1_e3_l_64B60#1 = λ(T0[],T1[])<(T0 + T1)> (fBias4098,op1_e3_l_44B5E);
          real str4B5C#1 = λ(T0[],T1[])<(T0) / ( T1)> (op1_e3_l_54B5F,op1_e3_l_64B60);
          bool _t4B66#1 = GT<real>(str4B5C,fStrTh4094);
          if _t4B66 then goto ASSIGN4B6A else goto JOIN4B6F
        ASSIGN4B6A:  preds = [COND4B68]
          bool _t4B69#1 = GTE<real>(_t40EF,fMaskTh4096);
          if _t4B69 then goto JOIN4B6D else goto JOIN4B6D
        JOIN4B6D:  preds = [COND4B6B,COND4B6B]
          bool _t4B6C#1 = phi(birth4A4B,vv40D2)
          goto JOIN4B6F
        JOIN4B6F:  preds = [JOIN4B6D,COND4B68]
          bool _t4B6E#1 = phi(_t4B6C,vv40D2)
          goto JOIN4B71
        JOIN4B71:  preds = [JOIN4B6F,COND4AA4]
          bool _t4B70#1 = phi(_t4B6E,vv40D2)
          if _t4B70 then goto NEW4B73 else goto JOIN4B79
        NEW4B73:  preds = [COND4B72]
          new point(npos4A39,hh4448);
          int _t4B74#1 = 1;
          int born4B76#1 = IAdd(born47CE,_t4B74);
          goto JOIN4B79
        JOIN4B79:  preds = [ASSIGN4B77,COND4B72]
          int born4B78#1 = phi(born4B76,born47CE)
          goto JOIN4B7B
        JOIN4B7B:  preds = [JOIN4B79,COND4A82]
          int born4B7A#1 = phi(born4B78,born47CE)
          goto JOIN4B7D
        JOIN4B7D:  preds = [JOIN4B7B,JOIN4BC4]
          int born4B7C#1 = phi(born4B7A,born47CE)
          goto JOIN4B7F
        JOIN4B7F:  preds = [JOIN4B7D,COND49EB]
          int born4B7E#1 = phi(born4B7C,born47CE)
          goto JOIN4B80
        JOIN4B80:  preds = [JOIN4B7F,COND49CB]
          int born443C#1 = phi(born4B7E,born47CE)
          goto JOIN444B
        COND4B81:  preds = [COND4A18]
          if _t49CC then goto ASSIGN4B83 else goto JOIN4B8C
        ASSIGN4B83:  preds = [COND4B81]
          bool _t4B82#1 = GT<int>(iter40BC,_t4460);
          if _t4B82 then goto ASSIGN4B86 else goto JOIN4B8A
        ASSIGN4B86:  preds = [COND4B84]
          int _t4B85#1 = IMod(iter40BC,pcp40B2);
          bool _t4B87#1 = EQ<int>(_t4460,_t4B85);
          goto JOIN4B8A
        JOIN4B8A:  preds = [ASSIGN4B88,COND4B84]
          bool _t4B89#1 = phi(_t4B87,vv40D2)
          goto JOIN4B8C
        JOIN4B8C:  preds = [JOIN4B8A,COND4B81]
          bool _t4B8B#1 = phi(_t4B89,vv40D2)
          if _t4B8B then goto ASSIGN4B8F else goto JOIN4B9B
        ASSIGN4B8F:  preds = [COND4B8D]
          int _t4B8E#1 = IDiv(iter40BC,pcp40B2);
          int _t4B90#2 = 2;
          int _t4B92#1 = IMod(_t4B8E,_t4B90);
          int _t4B94#1 = IMul(_t4B92,_t4B90);
          int _t4B96#1 = 1;
          int _t4B98#1 = ISub(_t4B94,_t4B96);
          goto JOIN4B9B
        JOIN4B9B:  preds = [ASSIGN4B99,COND4B8D]
          int _t4B9A#1 = phi(_t4B98,_t4460)
          bool _t4B9C#1 = LT<int>(_t4B9A,_t4460);
          if _t4B9C then goto ASSIGN4BA0 else goto JOIN4BC4
        ASSIGN4BA0:  preds = [COND4B9E]
          bool _t4B9F#1 = GT<real>(newE48B0,_t40EF);
          if _t4B9F then goto ASSIGN4BA3 else goto JOIN4BC3
        ASSIGN4BA3:  preds = [COND4BA1]
          bool _t4BA2#1 = GT<int>(nn48C2,nnmax40B8);
          if _t4BA2 then goto ASSIGN4BA6 else goto JOIN4BC2
        ASSIGN4BA6:  preds = [COND4BA4]
          real _t4BA5#1 = TensorIndex<tensor[3],[0]>(pos444A);
          real _t4BA7#1 = urnd403D (_t4BA5);
          real _t4BA9#1 = TensorIndex<tensor[3],[1]>(pos444A);
          real _t4BAB#1 = urnd403D (_t4BA9);
          real _t4BAD#1 = TensorIndex<tensor[3],[2]>(pos444A);
          real _t4BAF#1 = urnd403D (_t4BAD);
          real _t4BB1#1 = λ(T0[],T1[],T2[])<(T0 + T1 + T2)> (_t4BA7,_t4BAB,_t4BAF);
          real _t4BB3#1 = 0.1e1;
          real _t4BB5#1 = MathFn<fmod>(_t4BB1,_t4BB3);
          int _t4BB7#1 = ISub(nn48C2,nnmax40B8);
          real _t4BB9#1 = IntToReal(_t4BB7);
          real _t4BBB#1 = λ(T0[],T1[])<(T0) / ( T1)> (_t4BB9,_t48F7);
          bool _t4BBD#1 = LT<real>(_t4BB5,_t4BBB);
          if _t4BBD then goto DIE4BC0 else goto JOIN4BC1
        DIE4BC0:  preds = [COND4BBF]
          die
          goto JOIN4BC1
        JOIN4BC1:  preds = [*DIE4BC0,COND4BBF]
          goto JOIN4BC2
        JOIN4BC2:  preds = [JOIN4BC1,COND4BA4]
          goto JOIN4BC3
        JOIN4BC3:  preds = [JOIN4BC2,COND4BA1]
          goto JOIN4BC4
        JOIN4BC4:  preds = [JOIN4BC3,COND4B9E]
          goto JOIN4B7D
        ASSIGN4BC6:  preds = [COND4949]
          int _t4BC5#1 = 1;
          bool _t494D#1 = GT<int>(verb40AC,_t4BC5);
          goto JOIN494E
        ASSIGN4BC9:  preds = [COND48FE]
          int _t4BC8#1 = 1;
          bool _t4902#1 = GT<int>(verb40AC,_t4BC8);
          goto JOIN4903
        ASSIGN4BCC:  preds = [COND4820]
          int _t4BCB#1 = 1;
          bool _t4824#1 = GT<int>(verb40AC,_t4BCB);
          goto JOIN4825
        ASSIGN4BCF:  preds = [COND47B4]
          int _t4BCE#1 = 1;
          bool _t47B8#1 = GT<int>(verb40AC,_t4BCE);
          goto JOIN47B9
        ASSIGN4BD2:  preds = [COND4696]
          int _t4BD1#1 = 1;
          bool _t469A#1 = GT<int>(verb40AC,_t4BD1);
          goto JOIN469B
        ASSIGN4BD5:  preds = [COND41E0]
          int _t4BD4#1 = 1;
          bool _t41E4#1 = GT<int>(verb40AC,_t4BD4);
          goto JOIN41E5
        ASSIGN4BD8:  preds = [COND40DC]
          int _t4BD7#1 = 1;
          bool _t40E0#1 = GT<int>(verb40AC,_t4BD7);
          goto JOIN40E1
    end update
  end point
## initial strand creation
  COLLECTION
    ENTRY4BDA:  preds = []
      tensor[3][] ipos4BDB#2 = globals.ipos3F9B;
      int _t4BDD#1 = 0;
      int _t4BDF#1 = Length<tensor[3]>(ipos4BDB);
      int _t4BE1#1 = 1;
      int _t4BE3#1 = ISub(_t4BDF,_t4BE1);
      int[] _t4BE5#1 = Range(_t4BDD,_t4BE3);
    FOREACH4BE8:  preds = [ASSIGN4BE6,NEXT4BEE]
      foreach (ii4BE7 in _t4BE5) on exit goto RETURN4BEF
      tensor[3] _t4BE9#1 = Subscript<tensor[3][]>(ipos4BDB,ii4BE7);
      real _t4BEB#1 = 0.1e1;
      new point(_t4BE9,_t4BEB);
      goto FOREACH4BE8
    RETURN4BEF:  preds = [FOREACH4BE8]
      return
## global update
  ENTRY4BF0:  preds = []
    real geoEps4BF1#3 = globals.geoEps3F92;
    real mvmtEps4BF3#3 = globals.mvmtEps3F93;
    real rpcEps4BF5#3 = globals.rpcEps3F94;
    real pchist4BF7#1 = globals.pchist3FA0;
    int iter4BF9#4 = globals.iter3FA1;
    real rpc4BFB#1 = globals.rpc3FA2;
    int popLast4BFD#1 = globals.popLast3FA3;
    int pop4BFF#5 = NumStrands<active>;
    bool _t4C01#1 = NEQ<int>(pop4BFF,popLast4BFD);
    if _t4C01 then goto ASSIGN4C05 else goto ASSIGN4CAA
  ASSIGN4C05:  preds = [COND4C03]
    int _t4C04#1 = 1;
    goto JOIN4C08
  JOIN4C08:  preds = [ASSIGN4C05,ASSIGN4CAA]
    int _t4C06#2 = phi(_t4C04,_t4C07)
    real _t4C09#2 = IntToReal(_t4C06);
    real op1_e3_l_34C0C#1 = λ(T0[],T1[])<(T1) - (T0)> (_t4C09,rpc4BFB);
    real op1_e3_l_44C0D#1 = λ(T0[],T1[])<(T0 * T1)> (pchist4BF7,op1_e3_l_34C0C);
    real rpc4C0B#5 = λ(T0[],T1[])<(T0 + T1)> (_t4C09,op1_e3_l_44C0D);
    globals.rpc3FA2 = rpc4C0B;
    point[] P4C12#6 = Strands<point,all>;
    (bool res4C1A#1) = all(MAP all4C14 (P4C12));
    real _t4C1C#1 = 0.1e3;
    (real res4C2B#1) = sum<real>(MAP mean4C1E (P4C12));
    int num4C2D#1 = NumStrands<all>;
    real rNum4C2F#5 = IntToReal(num4C2D);
    real op1_e3_l_34C32#1 = λ(T0[],T1[])<(T0) / ( T1)> (res4C2B,rNum4C2F);
    real percfound4C31#1 = λ(T0[],T1[])<(T0 * T1)> (_t4C1C,op1_e3_l_34C32);
    (real res4C3B#2) = sum<real>(MAP mean4C35 (P4C12));
    real mean4C3D#2 = λ(T0[],T1[])<(T0) / ( T1)> (res4C3B,rNum4C2F);
    (real res4C4A#1) = sum<real>(MAP mean4C3F (P4C12,mean4C3D));
    real op1_e3_l_44C4D#1 = λ(T0[],T1[])<(T0) / ( T1)> (res4C4A,rNum4C2F);
    real op1_e3_l_54C4E#1 = λ(T0[])<Sqrt(T0)> (op1_e3_l_44C4D);
    real op1_e3_l_64C4F#1 = λ(T0[],T1[])<(T1 * T0)> (rNum4C2F,op1_e3_l_54C4E);
    real covcl4C4C#4 = λ(T0[],T1[])<(T1) / ( T0)> (res4C3B,op1_e3_l_64C4F);
    (real res4C5A#4) = max<real>(MAP max4C54 (P4C12));
    string _t4C5C#1 = "======= finished iter ";
    string _t4C5E#1 = " w/ ";
    string _t4C60#3 = ")";
    string _t4C62#1 = "; %found=";
    string _t4C64#1 = "; mean(hh)=";
    (real res4C6C#1) = sum<real>(MAP mean4C66 (P4C12));
    real mean4C6E#1 = λ(T0[],T1[])<(T0) / ( T1)> (res4C6C,rNum4C2F);
    string _t4C70#1 = "; mean(cl)=";
    string _t4C72#3 = "; COV(cl)=";
    string _t4C74#3 = "; max(mvmt)=";
    string _t4C76#1 = "; pc=";
    string _t4C78#3 = "; rpc=";
    string _t4C7A#3 = "\n";
    Print<[string,int,string,int,string,string,real,string,real,string,real,string,real,string,real,string,int,string,real,string]>(_t4C5C,iter4BF9,_t4C5E,pop4BFF,_t4C60,_t4C62,percfound4C31,_t4C64,mean4C6E,_t4C70,mean4C3D,_t4C72,covcl4C4C,_t4C74,res4C5A,_t4C76,_t4C06,_t4C78,rpc4C0B,_t4C7A);
    if res4C1A then goto ASSIGN4C7F else goto ASSIGN4CA9
  ASSIGN4C7F:  preds = [COND4C7D]
    bool _t4C7E#1 = LT<real>(covcl4C4C,geoEps4BF1);
    if _t4C7E then goto ASSIGN4C82 else goto ASSIGN4CA8
  ASSIGN4C82:  preds = [COND4C80]
    bool _t4C81#1 = LT<real>(res4C5A,mvmtEps4BF3);
    if _t4C81 then goto ASSIGN4C85 else goto ASSIGN4CA7
  ASSIGN4C85:  preds = [COND4C83]
    bool _t4C84#1 = LT<real>(rpc4C0B,rpcEps4BF5);
    goto JOIN4C88
  JOIN4C88:  preds = [ASSIGN4C85,ASSIGN4CA7]
    bool _t4C86#1 = phi(_t4C84,_t4C87)
    goto JOIN4C8B
  JOIN4C8B:  preds = [JOIN4C88,ASSIGN4CA8]
    bool _t4C89#1 = phi(_t4C86,_t4C8A)
    goto JOIN4C8E
  JOIN4C8E:  preds = [JOIN4C8B,ASSIGN4CA9]
    bool _t4C8C#1 = phi(_t4C89,_t4C8D)
    if _t4C8C then goto ASSIGN4C91 else goto ASSIGN4CA1
  ASSIGN4C91:  preds = [COND4C8F]
    string _t4C90#1 = "======= Stabilizing ";
    string _t4C92#1 = " (iter ";
    string _t4C94#3 = " < ";
    Print<[string,int,string,int,string,string,real,string,real,string,real,string,real,string,real,string,real,string]>(_t4C90,pop4BFF,_t4C92,iter4BF9,_t4C60,_t4C72,covcl4C4C,_t4C94,geoEps4BF1,_t4C74,res4C5A,_t4C94,mvmtEps4BF3,_t4C78,rpc4C0B,_t4C94,rpcEps4BF5,_t4C7A);
    StabilizeAll;
    goto JOIN4C98
  JOIN4C98:  preds = [MASSIGN4C97,MASSIGN4CA6]
    int _t4C99#1 = 1;
    int iter4C9B#1 = IAdd(iter4BF9,_t4C99);
    globals.iter3FA1 = iter4C9B;
    globals.popLast3FA3 = pop4BFF;
    continue
  ASSIGN4CA1:  preds = [COND4C8F]
    string _t4CA0#1 = "======= Stabilizing ";
    string _t4CA2#1 = " (iter ";
    string _t4CA4#3 = " > ";
    Print<[string,int,string,int,string,string,real,string,real,string,real,string,real,string,real,string,real,string]>(_t4CA0,pop4BFF,_t4CA2,iter4BF9,_t4C60,_t4C72,covcl4C4C,_t4CA4,geoEps4BF1,_t4C74,res4C5A,_t4CA4,mvmtEps4BF3,_t4C78,rpc4C0B,_t4CA4,rpcEps4BF5,_t4C7A);
    goto JOIN4C98
  ASSIGN4CA7:  preds = [COND4C83]
    bool _t4C87#1 = false;
    goto JOIN4C88
  ASSIGN4CA8:  preds = [COND4C80]
    bool _t4C8A#1 = false;
    goto JOIN4C8B
  ASSIGN4CA9:  preds = [COND4C7D]
    bool _t4C8D#1 = false;
    goto JOIN4C8E
  ASSIGN4CAA:  preds = [COND4C03]
    int _t4C07#1 = 0;
    goto JOIN4C08
#### end program ####
##### low-ir: after mid-to-low translation ####
## properties
  GlobalInit StabilizeAll GlobalReduce StrandSets GlobalUpdate NewStrands StrandCommunication StrandsMayDie HasInputs HasGlobals ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
## globals
  input meshData4D3A (meshData) = <no-default>
  input 0space07C6_intermedateGlobal4D3B (space) = <no-default>
  input 0data07C8_intermedateGlobal4D3C (data) = <no-default>
  input fStrTh4D3D (fStrTh) = <no-default>
  input fMaskTh4D3E (fMaskTh) = <default>
  input fBias4D3F (fBias) = <default>
  input tipd4D40 (tipd) = <default>
  input mabd4D41 (mabd) = <default>
  input travMax4D42 (travMax) = <default>
  input nfsMax4D43 (nfsMax) = <default>
  input gdeTest4D44 (gdeTest) = <default>
  input gdeBack4D45 (gdeBack) = <default>
  input gdeOppor4D46 (gdeOppor) = <default>
  input fsEps4D47 (fsEps) = <no-default>
  input geoEps4D48 (geoEps) = <default>
  input mvmtEps4D49 (mvmtEps) = <default>
  input rpcEps4D4A (rpcEps) = <default>
  input pcmvEps4D4B (pcmvEps) = <default>
  input isoval4D4C (isoval) = <default>
  input verb4D4D (verb) = <default>
  input sfs4D4E (sfs) = <default>
  input hist4D4F (hist) = <default>
  input pcp4D50 (pcp) = <default>
  input ipos4D51 (ipos) = <no-default>
  input fDim4D52 (fDim) = <default>
  global int nnmin4D53
  global int nnmax4D54
  global real rad4D55
  global real pchist4D56
  varying global int iter4D57
  varying global real rpc4D58
  varying global int popLast4D59
## functions
  function real urnd4DF7 (real x4DF8#2) {
    ENTRY4DF9:  preds = []
      int iter4DFA#1 = globals.iter4D57;
      real _t4DFC#2 = 0.e0;
      bool _t4DFE#1 = EQ<real>(x4DF8,_t4DFC);
      if _t4DFE then goto RETURN(_t4DFC)4E01 else goto JOIN4E02
    RETURN(_t4DFC)4E01:  preds = [COND4E00]
      return _t4DFC
      goto JOIN4E02
    JOIN4E02:  preds = [*RETURN(_t4DFC)4E01,COND4E00]
      real _t4E03#1 = Abs<real>(x4DF8);
      real l24E06#2 = MathFn<log2>(_t4E03);
      real _t4E08#4 = 0.2e1;
      real _t4E0A#1 = MathFn<floor>(l24E06);
      real _t4E0C#2 = 0.1e1;
      real op1_e3_l_34E0E#1 = RSub(l24E06,_t4E0A);
      real _t4E11#1 = RSub(op1_e3_l_34E0E,_t4E0C);
      real frxp4E14#1 = MathFn<pow>(_t4E08,_t4E11);
      int _t4E16#1 = 2;
      int _t4E18#1 = IMul(_t4E16,iter4DFA);
      real _t4E1A#1 = IntToReal(_t4E18);
      real _Pow_24E1D#2 = RMul(_t4E08,_t4E08);
      real _Pow4_4E1E#1 = RMul(_Pow_24E1D,_Pow_24E1D);
      real _Pow5_4E1F#2 = RMul(_t4E08,_Pow4_4E1E);
      real _Pow10_4E20#2 = RMul(_Pow5_4E1F,_Pow5_4E1F);
      real op1_e3_l_34E1C#1 = RMul(_Pow10_4E20,_Pow10_4E20);
      real op1_e3_l_44E27#1 = RAdd(op1_e3_l_34E1C,_t4E1A);
      real _t4E2A#1 = RMul(frxp4E14,op1_e3_l_44E27);
      real _t4E2D#1 = MathFn<fmod>(_t4E2A,_t4E0C);
      return _t4E2D
}
  function tensor[3] fStep50BF (tensor[3] s50C0#3) {
    ENTRY50C1:  preds = []
      real x50C2#6 = VIndex<3,0>(s50C0);
      real y50C4#6 = VIndex<3,1>(s50C0);
      real z50C6#10 = VIndex<3,2>(s50C0);
      real _t50C8#6 = 0.2e1;
      int _t50CA#2 = 2;
      real op1_e3_l_650CC#2 = RMul(x50C2,x50C2);
      real op1_e3_l_750CF#2 = RMul(y50C4,y50C4);
      real op1_e3_l_850D2#8 = RMul(z50C6,z50C6);
      real r50D6#1 = RAdd(op1_e3_l_650CC,op1_e3_l_750CF);
      real op1_e3_l_950D5#2 = RAdd(r50D6,op1_e3_l_850D2);
      real op1_e3_l_1150DA#7 = Cos(op1_e3_l_950D5);
      real r50DE#1 = RMul(_t50C8,x50C2);
      real r50DF#1 = RMul(r50DE,op1_e3_l_850D2);
      real _t50DD#1 = RMul(r50DF,op1_e3_l_1150DA);
      real r50E5#1 = RMul(_t50C8,y50C4);
      real r50E6#1 = RMul(r50E5,op1_e3_l_850D2);
      real _t50E4#1 = RMul(r50E6,op1_e3_l_1150DA);
      real _Pow2_50EC#1 = RMul(z50C6,z50C6);
      real op1_e3_l_1450EB#3 = RMul(z50C6,_Pow2_50EC);
      real op1_e3_l_2050F0#8 = Sin(op1_e3_l_950D5);
      real r50F4#1 = RMul(_t50C8,op1_e3_l_1450EB);
      real op1_e3_l_2150F3#1 = RMul(r50F4,op1_e3_l_1150DA);
      real r50F9#1 = RMul(_t50C8,z50C6);
      real op1_e3_l_2250F8#1 = RMul(r50F9,op1_e3_l_2050F0);
      real _t50FD#1 = RAdd(op1_e3_l_2150F3,op1_e3_l_2250F8);
      tensor[3] g5100#1 = <tensor[3]>[_t50DD,_t50E4,_t50FD];
      real _t5102#6 = -0.4e1;
      real r5105#1 = RMul(_t5102,op1_e3_l_650CC);
      real r5106#1 = RMul(r5105,op1_e3_l_850D2);
      real op1_e3_l_245104#1 = RMul(r5106,op1_e3_l_2050F0);
      real r510C#1 = RMul(_t50C8,op1_e3_l_850D2);
      real op1_e3_l_25510B#2 = RMul(r510C,op1_e3_l_1150DA);
      real _t5110#1 = RAdd(op1_e3_l_245104,op1_e3_l_25510B);
      real r5114#1 = RMul(_t5102,x50C2);
      real r5115#1 = RMul(r5114,y50C4);
      real r5116#1 = RMul(r5115,op1_e3_l_850D2);
      real _t5113#2 = RMul(r5116,op1_e3_l_2050F0);
      real _t511C#2 = 0.4e1;
      real r511F#1 = RMul(_t5102,x50C2);
      real r5120#1 = RMul(r511F,op1_e3_l_1450EB);
      real op1_e3_l_23511E#1 = RMul(r5120,op1_e3_l_2050F0);
      real r5126#1 = RMul(_t511C,x50C2);
      real r5127#1 = RMul(r5126,z50C6);
      real op1_e3_l_245125#1 = RMul(r5127,op1_e3_l_1150DA);
      real _t512C#2 = RAdd(op1_e3_l_23511E,op1_e3_l_245125);
      tensor[3] _t512F#1 = <tensor[3]>[_t5110,_t5113,_t512C];
      real r5132#1 = RMul(_t5102,op1_e3_l_750CF);
      real r5133#1 = RMul(r5132,op1_e3_l_850D2);
      real op1_e3_l_245131#1 = RMul(r5133,op1_e3_l_2050F0);
      real _t5138#1 = RAdd(op1_e3_l_245131,op1_e3_l_25510B);
      real r513C#1 = RMul(_t5102,y50C4);
      real r513D#1 = RMul(r513C,op1_e3_l_1450EB);
      real op1_e3_l_23513B#1 = RMul(r513D,op1_e3_l_2050F0);
      real r5143#1 = RMul(_t511C,y50C4);
      real r5144#1 = RMul(r5143,z50C6);
      real op1_e3_l_245142#1 = RMul(r5144,op1_e3_l_1150DA);
      real _t5149#2 = RAdd(op1_e3_l_23513B,op1_e3_l_245142);
      tensor[3] _t514C#1 = <tensor[3]>[_t5113,_t5138,_t5149];
      real _t514E#1 = 0.1e2;
      real _Pow_25151#2 = RMul(z50C6,z50C6);
      real op1_e3_l_185150#1 = RMul(_Pow_25151,_Pow_25151);
      real r5156#1 = RMul(_t5102,op1_e3_l_185150);
      real op1_e3_l_315155#1 = RMul(r5156,op1_e3_l_2050F0);
      real r515B#1 = RMul(_t514E,op1_e3_l_850D2);
      real op1_e3_l_32515A#1 = RMul(r515B,op1_e3_l_1150DA);
      real op1_e3_l_33515F#1 = RMul(_t50C8,op1_e3_l_2050F0);
      real r5163#1 = RAdd(op1_e3_l_315155,op1_e3_l_32515A);
      real _t5162#1 = RAdd(r5163,op1_e3_l_33515F);
      tensor[3] _t5167#1 = <tensor[3]>[_t512C,_t5149,_t5162];
      tensor[3,3] hess5169#1 = <tensor[3,3]>[_t512F,_t514C,_t5167];
      (real[3] evals516B#1,tensor[3][3] E516C#1) = EigenVecs3x3(hess5169);
      real _t516E#1 = 0.1e1;
      real _t5170#1 = Subscript<real[3]>(evals516B,_t50CA);
      tensor[3] _t5172#4 = Subscript<tensor[3][3]>(E516C,_t50CA);
      real op1_e3_l_55174#1 = RDiv(_t516E,_t5170);
      real op1_e3_l_65177#3 = RNeg(op1_e3_l_55174);
      real op1_e3_l_7517A#3 = VDot<3>(_t5172,g5100);
      real r517E#1 = TensorIndex<tensor[3],[0]>(_t5172);
      real r517F#1 = RMul(op1_e3_l_65177,r517E);
      real r5180#1 = RMul(r517F,op1_e3_l_7517A);
      real r5181#1 = TensorIndex<tensor[3],[1]>(_t5172);
      real r5182#1 = RMul(op1_e3_l_65177,r5181);
      real r5183#1 = RMul(r5182,op1_e3_l_7517A);
      real r5184#1 = TensorIndex<tensor[3],[2]>(_t5172);
      real r5185#1 = RMul(op1_e3_l_65177,r5184);
      real r5186#1 = RMul(r5185,op1_e3_l_7517A);
      tensor[3] up517D#4 = <tensor[3]>[r5180,r5183,r5186];
      real _t5192#2 = VIndex<3,0>(up517D);
      bool _t5194#1 = EQ<real>(_t5192,_t5192);
      bool _t5196#1 = BNot(_t5194);
      if _t5196 then goto ASSIGN519A else goto ASSIGN51A7
    ASSIGN519A:  preds = [COND5198]
      bool _t5199#1 = true;
      goto JOIN519D
    JOIN519D:  preds = [ASSIGN519A,JOIN51B0]
      bool _t519B#1 = phi(_t5199,_t519C)
      if _t519B then goto ASSIGN51A0 else goto JOIN51A4
    ASSIGN51A0:  preds = [COND519E]
      real _t519F#3 = +inf;
      tensor[3] _t51A1#1 = <tensor[3]>[_t519F,_t519F,_t519F];
      return _t51A1
      goto JOIN51A4
    JOIN51A4:  preds = [*RETURN(_t51A1)51A3,COND519E]
      return up517D
    ASSIGN51A7:  preds = [COND5198]
      real _t51A6#2 = VIndex<3,1>(up517D);
      bool _t51A8#1 = EQ<real>(_t51A6,_t51A6);
      bool _t51AA#1 = BNot(_t51A8);
      if _t51AA then goto ASSIGN51AE else goto ASSIGN51B2
    ASSIGN51AE:  preds = [COND51AC]
      bool _t51AD#1 = true;
      goto JOIN51B0
    JOIN51B0:  preds = [ASSIGN51AE,ASSIGN51B5]
      bool _t519C#1 = phi(_t51AD,_t51AF)
      goto JOIN519D
    ASSIGN51B2:  preds = [COND51AC]
      real _t51B1#2 = VIndex<3,2>(up517D);
      bool _t51B3#1 = EQ<real>(_t51B1,_t51B1);
      bool _t51AF#1 = BNot(_t51B3);
      goto JOIN51B0
}
  function tensor[3,3] fPerp5375 (tensor[3] s5376#3) {
    ENTRY5377:  preds = []
      real x5378#5 = VIndex<3,0>(s5376);
      real y537A#5 = VIndex<3,1>(s5376);
      real z537C#9 = VIndex<3,2>(s5376);
      real _t537E#2 = 0.2e1;
      int _t5380#1 = 2;
      real _t5382#6 = -0.4e1;
      real op1_e3_l_115384#2 = RMul(x5378,x5378);
      real op1_e3_l_125387#2 = RMul(y537A,y537A);
      real op1_e3_l_13538A#6 = RMul(z537C,z537C);
      real r538E#1 = RAdd(op1_e3_l_115384,op1_e3_l_125387);
      real op1_e3_l_14538D#2 = RAdd(r538E,op1_e3_l_13538A);
      real op1_e3_l_175392#7 = Sin(op1_e3_l_14538D);
      real op1_e3_l_235395#4 = Cos(op1_e3_l_14538D);
      real r5399#1 = RMul(_t5382,op1_e3_l_115384);
      real r539A#1 = RMul(r5399,op1_e3_l_13538A);
      real op1_e3_l_245398#1 = RMul(r539A,op1_e3_l_175392);
      real r53A0#1 = RMul(_t537E,op1_e3_l_13538A);
      real op1_e3_l_25539F#2 = RMul(r53A0,op1_e3_l_235395);
      real _t53A4#1 = RAdd(op1_e3_l_245398,op1_e3_l_25539F);
      real r53A8#1 = RMul(_t5382,x5378);
      real r53A9#1 = RMul(r53A8,y537A);
      real r53AA#1 = RMul(r53A9,op1_e3_l_13538A);
      real _t53A7#2 = RMul(r53AA,op1_e3_l_175392);
      real _t53B0#2 = 0.4e1;
      real _Pow2_53B3#1 = RMul(z537C,z537C);
      real op1_e3_l_1653B2#2 = RMul(z537C,_Pow2_53B3);
      real r53B8#1 = RMul(_t5382,x5378);
      real r53B9#1 = RMul(r53B8,op1_e3_l_1653B2);
      real op1_e3_l_2353B7#1 = RMul(r53B9,op1_e3_l_175392);
      real r53BF#1 = RMul(_t53B0,x5378);
      real r53C0#1 = RMul(r53BF,z537C);
      real op1_e3_l_2453BE#1 = RMul(r53C0,op1_e3_l_235395);
      real _t53C5#2 = RAdd(op1_e3_l_2353B7,op1_e3_l_2453BE);
      tensor[3] _t53C8#1 = <tensor[3]>[_t53A4,_t53A7,_t53C5];
      real r53CB#1 = RMul(_t5382,op1_e3_l_125387);
      real r53CC#1 = RMul(r53CB,op1_e3_l_13538A);
      real op1_e3_l_2453CA#1 = RMul(r53CC,op1_e3_l_175392);
      real _t53D1#1 = RAdd(op1_e3_l_2453CA,op1_e3_l_25539F);
      real r53D5#1 = RMul(_t5382,y537A);
      real r53D6#1 = RMul(r53D5,op1_e3_l_1653B2);
      real op1_e3_l_2353D4#1 = RMul(r53D6,op1_e3_l_175392);
      real r53DC#1 = RMul(_t53B0,y537A);
      real r53DD#1 = RMul(r53DC,z537C);
      real op1_e3_l_2453DB#1 = RMul(r53DD,op1_e3_l_235395);
      real _t53E2#2 = RAdd(op1_e3_l_2353D4,op1_e3_l_2453DB);
      tensor[3] _t53E5#1 = <tensor[3]>[_t53A7,_t53D1,_t53E2];
      real _t53E7#1 = 0.1e2;
      real _Pow_253EA#2 = RMul(z537C,z537C);
      real op1_e3_l_1853E9#1 = RMul(_Pow_253EA,_Pow_253EA);
      real r53EF#1 = RMul(_t5382,op1_e3_l_1853E9);
      real op1_e3_l_3153EE#1 = RMul(r53EF,op1_e3_l_175392);
      real r53F4#1 = RMul(_t53E7,op1_e3_l_13538A);
      real op1_e3_l_3253F3#1 = RMul(r53F4,op1_e3_l_235395);
      real op1_e3_l_3353F8#1 = RMul(_t537E,op1_e3_l_175392);
      real r53FC#1 = RAdd(op1_e3_l_3153EE,op1_e3_l_3253F3);
      real _t53FB#1 = RAdd(r53FC,op1_e3_l_3353F8);
      tensor[3] _t5400#1 = <tensor[3]>[_t53C5,_t53E2,_t53FB];
      tensor[3,3] hess5402#1 = <tensor[3,3]>[_t53C8,_t53E5,_t5400];
      (real[3] evals5404#0,tensor[3][3] _t5405#1) = EigenVecs3x3(hess5402);
      tensor[3] E25407#6 = Subscript<tensor[3][3]>(_t5405,_t5380);
      real r540A#1 = TensorIndex<tensor[3],[0]>(E25407);
      tensor[3] binopV540B#1 = VScale<3>(r540A,E25407);
      real r540C#1 = TensorIndex<tensor[3],[1]>(E25407);
      tensor[3] binopV540D#1 = VScale<3>(r540C,E25407);
      real r540E#1 = TensorIndex<tensor[3],[2]>(E25407);
      tensor[3] binopV540F#1 = VScale<3>(r540E,E25407);
      tensor[3,3] op1_e3_l_25409#9 = <tensor[3,3]>[binopV540B,binopV540D,binopV540F];
      real realLit5419#3 = 0.1e1;
      real r541A#1 = TensorIndex<tensor[3,3],[0,0]>(op1_e3_l_25409);
      real r541B#1 = RSub(realLit5419,r541A);
      real realLit541C#6 = 0.e0;
      real r541D#1 = TensorIndex<tensor[3,3],[0,1]>(op1_e3_l_25409);
      real r541E#1 = RSub(realLit541C,r541D);
      real r541F#1 = TensorIndex<tensor[3,3],[0,2]>(op1_e3_l_25409);
      real r5420#1 = RSub(realLit541C,r541F);
      tensor[3] tensor5421#1 = <tensor[3]>[r541B,r541E,r5420];
      real r5422#1 = TensorIndex<tensor[3,3],[1,0]>(op1_e3_l_25409);
      real r5423#1 = RSub(realLit541C,r5422);
      real r5424#1 = TensorIndex<tensor[3,3],[1,1]>(op1_e3_l_25409);
      real r5425#1 = RSub(realLit5419,r5424);
      real r5426#1 = TensorIndex<tensor[3,3],[1,2]>(op1_e3_l_25409);
      real r5427#1 = RSub(realLit541C,r5426);
      tensor[3] tensor5428#1 = <tensor[3]>[r5423,r5425,r5427];
      real r5429#1 = TensorIndex<tensor[3,3],[2,0]>(op1_e3_l_25409);
      real r542A#1 = RSub(realLit541C,r5429);
      real r542B#1 = TensorIndex<tensor[3,3],[2,1]>(op1_e3_l_25409);
      real r542C#1 = RSub(realLit541C,r542B);
      real r542D#1 = TensorIndex<tensor[3,3],[2,2]>(op1_e3_l_25409);
      real r542E#1 = RSub(realLit5419,r542D);
      tensor[3] tensor542F#1 = <tensor[3]>[r542A,r542C,r542E];
      tensor[3,3] m5418#4 = <tensor[3,3]>[tensor5421,tensor5428,tensor542F];
      tensor[3] projParam544A#2 = ProjectLast<tensor[3,3],[0]>(m5418);
      real vdot544B#1 = VDot<3>(projParam544A,projParam544A);
      tensor[3] projParam544C#2 = ProjectLast<tensor[3,3],[1]>(m5418);
      real vdot544D#1 = VDot<3>(projParam544C,projParam544C);
      real r544E#1 = RAdd(vdot544B,vdot544D);
      tensor[3] projParam544F#2 = ProjectLast<tensor[3,3],[2]>(m5418);
      real vdot5450#1 = VDot<3>(projParam544F,projParam544F);
      real t5449#2 = RAdd(r544E,vdot5450);
      bool _t545A#1 = EQ<real>(t5449,t5449);
      bool _t545C#1 = BNot(_t545A);
      if _t545C then goto ASSIGN5463 else goto JOIN5467
    ASSIGN5463:  preds = [COND545E]
      real realLit5460#3 = 0.e0;
      tensor[3] tensor5461#3 = <tensor[3]>[realLit5460,realLit5460,realLit5460];
      tensor[3,3] _t545F#1 = <tensor[3,3]>[tensor5461,tensor5461,tensor5461];
      return _t545F
      goto JOIN5467
    JOIN5467:  preds = [*RETURN(_t545F)5466,COND545E]
      return m5418
}
  function bool all5A38 (point P5A39#1) {
    ENTRY5A3A:  preds = []
      bool _t5A3B#1 = P5A39.found;
      return _t5A3B
}
  function real mean5A42 (point P5A43#1) {
    ENTRY5A44:  preds = []
      bool _t5A45#1 = P5A43.found;
      if _t5A45 then goto ASSIGN5A49 else goto ASSIGN5A4E
    ASSIGN5A49:  preds = [COND5A47]
      real _t5A48#1 = 0.1e1;
      goto JOIN5A4C
    JOIN5A4C:  preds = [ASSIGN5A49,ASSIGN5A4E]
      real _t5A4A#1 = phi(_t5A48,_t5A4B)
      return _t5A4A
    ASSIGN5A4E:  preds = [COND5A47]
      real _t5A4B#1 = 0.e0;
      goto JOIN5A4C
}
  function real mean5A5B (point P5A5C#1) {
    ENTRY5A5D:  preds = []
      real _t5A5E#1 = P5A5C.closest;
      return _t5A5E
}
  function real mean5A66 (point P5A67#1, real meancl5A68#1) {
    ENTRY5A69:  preds = []
      real _t5A6A#1 = P5A67.closest;
      real op1_e3_l_25A6C#2 = RSub(_t5A6A,meancl5A68);
      real _t5A6F#1 = RMul(op1_e3_l_25A6C,op1_e3_l_25A6C);
      return _t5A6F
}
  function real max5A81 (point P5A82#1) {
    ENTRY5A83:  preds = []
      real _t5A84#1 = P5A82.mvmt;
      return _t5A84
}
  function real mean5A93 (point P5A94#1) {
    ENTRY5A95:  preds = []
      real _t5A96#1 = P5A94.hh;
      return _t5A96
}
## input initialization
  ENTRY4D5A:  preds = []
    real fMaskTh4D5B#3 = 0.e0;
    globals.fMaskTh4D3E = fMaskTh4D5B;
    globals.fBias4D3F = fMaskTh4D5B;
    real tipd4D5F#1 = 0.1e1;
    globals.tipd4D40 = tipd4D5F;
    real mabd4D62#1 = 0.75e0;
    globals.mabd4D41 = mabd4D62;
    real travMax4D65#1 = 0.1e2;
    globals.travMax4D42 = travMax4D65;
    int nfsMax4D68#1 = 20;
    globals.nfsMax4D43 = nfsMax4D68;
    real gdeTest4D6B#4 = 0.5e0;
    globals.gdeTest4D44 = gdeTest4D6B;
    globals.gdeBack4D45 = gdeTest4D6B;
    real gdeOppor4D6F#1 = 0.12e1;
    globals.gdeOppor4D46 = gdeOppor4D6F;
    real geoEps4D72#1 = 0.1e0;
    globals.geoEps4D48 = geoEps4D72;
    real mvmtEps4D75#2 = 0.1e-1;
    globals.mvmtEps4D49 = mvmtEps4D75;
    globals.rpcEps4D4A = mvmtEps4D75;
    real pcmvEps4D79#1 = 0.3e0;
    globals.pcmvEps4D4B = pcmvEps4D79;
    globals.isoval4D4C = fMaskTh4D5B;
    int verb4D7D#1 = 0;
    globals.verb4D4D = verb4D7D;
    globals.sfs4D4E = gdeTest4D6B;
    globals.hist4D4F = gdeTest4D6B;
    int pcp4D82#1 = 5;
    globals.pcp4D50 = pcp4D82;
    int fDim4D85#1 = 2;
    globals.fDim4D52 = fDim4D85;
    return
## global-variable initialization
  ENTRY4D89:  preds = []
    femData:Mesh meshData4D8A#2 = globals.meshData4D3A;
    real tipd4D8C#1 = globals.tipd4D40;
    real hist4D8E#1 = globals.hist4D4F;
    int pcp4D90#1 = globals.pcp4D50;
    int fDim4D92#3 = globals.fDim4D52;
    int _t4D94#4 = 0;
    int _t4D96#3 = 1;
    int _t4D98#1 = ExtractFemItem<int,NumCell(Mesh)>(meshData4D8A);
    int _t4D9A#1 = ISub(_t4D98,_t4D96);
    int[] _t4D9C#1 = Range(_t4D94,_t4D9A);
    femData:MeshCell[] _t4D9E#1 = <femData:MeshCell[]>{};
  FOREACH4DA1:  preds = [ASSIGN4D9F,NEXT4DA7]
    foreach (_t4DA0 in _t4D9C) on exit goto ASSIGN4DA9
      femData:MeshCell[] _t4DA5#1 = phi(_t4D9E,_t4DA4)
    femData:MeshCell _t4DA2#1 = LoadFem<femData:MeshCell>(meshData4D8A,_t4DA0);
    femData:MeshCell[] _t4DA4#1 = Append<femData:MeshCell>(_t4DA5,_t4DA2);
    goto FOREACH4DA1
  ASSIGN4DA9:  preds = [FOREACH4DA1]
    int _t4DA8#3 = 2;
    bool _t4DAA#2 = EQ<int>(_t4DA8,fDim4D92);
    if _t4DAA then goto ASSIGN4DAE else goto ASSIGN4DDE
  ASSIGN4DAE:  preds = [COND4DAC]
    int _t4DAD#1 = 6;
    goto JOIN4DB1
  JOIN4DB1:  preds = [ASSIGN4DAE,JOIN4DE0]
    int _t4DAF#1 = phi(_t4DAD,_t4DB0)
    globals.nnmin4D53 = _t4DAF;
    if _t4DAA then goto ASSIGN4DB5 else goto ASSIGN4DD8
  ASSIGN4DB5:  preds = [COND4DB3]
    int _t4DB4#1 = 8;
    goto JOIN4DB8
  JOIN4DB8:  preds = [ASSIGN4DB5,JOIN4DDC]
    int _t4DB6#1 = phi(_t4DB4,_t4DB7)
    globals.nnmax4D54 = _t4DB6;
    real _t4DBA#1 = 0.2e1;
    real _t4DBC#1 = 0.3e1;
    real op1_e3_l_34DBE#1 = RMul(tipd4D8C,_t4DBC);
    real rad4DC1#1 = RDiv(op1_e3_l_34DBE,_t4DBA);
    globals.rad4D55 = rad4DC1;
    real _t4DC5#2 = 0.1e1;
    int _t4DC7#1 = IMul(_t4DA8,pcp4D90);
    real _t4DC9#1 = IntToReal(_t4DC7);
    real _t4DCB#1 = RDiv(_t4DC5,_t4DC9);
    real pchist4DCE#1 = MathFn<pow>(hist4D8E,_t4DCB);
    globals.pchist4D56 = pchist4DCE;
    globals.iter4D57 = _t4D94;
    globals.rpc4D58 = _t4DC5;
    int popLast4DD3#1 = -1;
    globals.popLast4D59 = popLast4DD3;
    return
  ASSIGN4DD8:  preds = [COND4DB3]
    bool _t4DD7#1 = EQ<int>(_t4D96,fDim4D92);
    if _t4DD7 then goto ASSIGN4DDB else goto JOIN4DDC
  ASSIGN4DDB:  preds = [COND4DD9]
    int _t4DDA#1 = 3;
    goto JOIN4DDC
  JOIN4DDC:  preds = [ASSIGN4DDB,COND4DD9]
    int _t4DB7#1 = phi(_t4DDA,_t4D94)
    goto JOIN4DB8
  ASSIGN4DDE:  preds = [COND4DAC]
    bool _t4DDD#1 = EQ<int>(_t4D96,fDim4D92);
    if _t4DDD then goto JOIN4DE0 else goto JOIN4DE0
  JOIN4DE0:  preds = [COND4DDF,COND4DDF]
    int _t4DB0#1 = phi(_t4DA8,_t4D94)
    goto JOIN4DB1
## strand
  strand point (tensor[3] p04DE1#5, real hh04DE2#1) in 3D
    state:
      output tensor[3] pos;
      output tensor[3] _pos;
      real ID;
      real hh;
      tensor[3] step;
      bool found;
      int nfs;
      real trav;
      real mvmt;
      real closest;
      int born;
      bool first;
    state init
      ENTRY4DEF:  preds = []
        real rad4DF0#1 = globals.rad4D55;
        real _t4DF2#1 = 0.1e7;
        real _t4DF4#1 = VIndex<3,0>(p04DE1);
        real _t4DF6#1 = urnd4DF7 (_t4DF4);
        real _t4E31#1 = VIndex<3,1>(p04DE1);
        real _t4E33#1 = urnd4DF7 (_t4E31);
        real _t4E35#1 = VIndex<3,2>(p04DE1);
        real _t4E37#1 = urnd4DF7 (_t4E35);
        real r4E3A#1 = RAdd(_t4DF6,_t4E33);
        real _t4E39#1 = RAdd(r4E3A,_t4E37);
        real _t4E3E#2 = 0.1e1;
        real _t4E40#1 = MathFn<fmod>(_t4E39,_t4E3E);
        real _t4E42#1 = RMul(_t4DF2,_t4E40);
        real _t4E45#1 = MathFn<floor>(_t4E42);
        real _t4E47#4 = 0.e0;
        tensor[3] step4E49#1 = <tensor[3]>[_t4E47,_t4E47,_t4E47];
        bool found4E4B#1 = false;
        int nfs4E4D#2 = 0;
        bool first4E4F#1 = true;
        self.pos = p04DE1;
        self._pos = p04DE1;
        self.ID = _t4E45;
        self.hh = hh04DE2;
        self.step = step4E49;
        self.found = found4E4B;
        self.nfs = nfs4E4D;
        self.trav = _t4E47;
        self.mvmt = _t4E3E;
        self.closest = rad4DF0;
        self.born = nfs4E4D;
        self.first = first4E4F;
        return
    end state init
    method update
        ENTRY4E5E:  preds = []
          real fStrTh4E5F#4 = globals.fStrTh4D3D;
          real fMaskTh4E61#4 = globals.fMaskTh4D3E;
          real fBias4E63#4 = globals.fBias4D3F;
          real tipd4E65#17 = globals.tipd4D40;
          real mabd4E67#1 = globals.mabd4D41;
          real travMax4E69#3 = globals.travMax4D42;
          int nfsMax4E6B#3 = globals.nfsMax4D43;
          real gdeTest4E6D#1 = globals.gdeTest4D44;
          real gdeBack4E6F#1 = globals.gdeBack4D45;
          real gdeOppor4E71#1 = globals.gdeOppor4D46;
          real fsEps4E73#3 = globals.fsEps4D47;
          real pcmvEps4E75#1 = globals.pcmvEps4D4B;
          int verb4E77#16 = globals.verb4D4D;
          real sfs4E79#12 = globals.sfs4D4E;
          real hist4E7B#2 = globals.hist4D4F;
          int pcp4E7D#10 = globals.pcp4D50;
          int fDim4E7F#2 = globals.fDim4D52;
          int nnmin4E81#3 = globals.nnmin4D53;
          int nnmax4E83#4 = globals.nnmax4D54;
          real rad4E85#6 = globals.rad4D55;
          int iter4E87#22 = globals.iter4D57;
          tensor[3] pos4E89#19 = self.pos;
          real ID4E8B#11 = self.ID;
          real hh4E8D#8 = self.hh;
          bool found4E8F#3 = self.found;
          int nfs4E91#5 = self.nfs;
          real trav4E93#5 = self.trav;
          real mvmt4E95#5 = self.mvmt;
          real closest4E97#1 = self.closest;
          int born4E99#5 = self.born;
          bool first4E9B#1 = self.first;
          bool vv4E9D#45 = false;
          if first4E9B then goto ASSIGN4EA1 else goto JOIN4EB9
        ASSIGN4EA1:  preds = [COND4E9F]
          int _t4EA0#1 = 0;
          bool _t4EA2#1 = GT<int>(verb4E77,_t4EA0);
          if _t4EA2 then goto JOIN4EA6 else goto JOIN4EA6
        JOIN4EA6:  preds = [COND4EA4,COND4EA4]
          bool _t4EA5#1 = phi(vv4E9D,vv4E9D)
          if _t4EA5 then goto ASSIGN4EA9 else goto ASSIGN59F9
        ASSIGN4EA9:  preds = [COND4EA7]
          bool _t4EA8#1 = true;
          goto JOIN4EAC
        JOIN4EAC:  preds = [ASSIGN4EA9,ASSIGN59FA]
          bool _t4EAA#1 = phi(_t4EA8,_t4EAB)
          if _t4EAA then goto ASSIGN4EAF else goto JOIN4EB8
        ASSIGN4EAF:  preds = [COND4EAD]
          string _t4EAE#1 = "(i#";
          string _t4EB0#1 = " @ ";
          string _t4EB2#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID4E8B,_t4EAE,iter4E87,_t4EB0,pos4E89,_t4EB2);
          string _t4EB5#1 = " HELLO!\n";
          Print<[string]>(_t4EB5);
          goto JOIN4EB8
        JOIN4EB8:  preds = [MASSIGN4EB7,COND4EAD]
          goto JOIN4EB9
        JOIN4EB9:  preds = [JOIN4EB8,COND4E9F]
          real _t4EBA#23 = 0.e0;
          tensor[3] _t4EBC#5 = <tensor[3]>[_t4EBA,_t4EBA,_t4EBA];
          tensor[3] op1_e3_l_24EBE#2 = VSub<3>(pos4E89,_t4EBC);
          real op1_e3_l_44EC1#1 = VDot<3>(op1_e3_l_24EBE,op1_e3_l_24EBE);
          real _t4EC4#3 = Sqrt(op1_e3_l_44EC1);
          real _t4EC7#11 = 0.4e1;
          bool _t4EC9#2 = LT<real>(_t4EC4,_t4EC7);
          if _t4EC9 then goto ASSIGN4ECD else goto JOIN4ED1
        ASSIGN4ECD:  preds = [COND4ECB]
          real _t4ECC#1 = 0.3e1;
          bool _t4ECE#1 = GT<real>(_t4EC4,_t4ECC);
          goto JOIN4ED1
        JOIN4ED1:  preds = [ASSIGN4ECF,COND4ECB]
          bool _t4ED0#1 = phi(_t4ECE,vv4E9D)
          if _t4ED0 then goto ASSIGN4ED4 else goto JOIN4F9A
        ASSIGN4ED4:  preds = [COND4ED2]
          real x4ED3#6 = VIndex<3,0>(pos4E89);
          real y4ED5#6 = VIndex<3,1>(pos4E89);
          real z4ED7#10 = VIndex<3,2>(pos4E89);
          real _t4ED9#6 = 0.2e1;
          int _t4EDB#1 = 2;
          real op1_e3_l_64EDD#2 = RMul(x4ED3,x4ED3);
          real op1_e3_l_74EE0#2 = RMul(y4ED5,y4ED5);
          real op1_e3_l_84EE3#8 = RMul(z4ED7,z4ED7);
          real r4EE7#1 = RAdd(op1_e3_l_64EDD,op1_e3_l_74EE0);
          real op1_e3_l_94EE6#2 = RAdd(r4EE7,op1_e3_l_84EE3);
          real op1_e3_l_114EEB#7 = Cos(op1_e3_l_94EE6);
          real r4EEF#1 = RMul(_t4ED9,x4ED3);
          real r4EF0#1 = RMul(r4EEF,op1_e3_l_84EE3);
          real _t4EEE#1 = RMul(r4EF0,op1_e3_l_114EEB);
          real r4EF6#1 = RMul(_t4ED9,y4ED5);
          real r4EF7#1 = RMul(r4EF6,op1_e3_l_84EE3);
          real _t4EF5#1 = RMul(r4EF7,op1_e3_l_114EEB);
          real _Pow2_4EFD#1 = RMul(z4ED7,z4ED7);
          real op1_e3_l_144EFC#3 = RMul(z4ED7,_Pow2_4EFD);
          real op1_e3_l_204F01#8 = Sin(op1_e3_l_94EE6);
          real r4F05#1 = RMul(_t4ED9,op1_e3_l_144EFC);
          real op1_e3_l_214F04#1 = RMul(r4F05,op1_e3_l_114EEB);
          real r4F0A#1 = RMul(_t4ED9,z4ED7);
          real op1_e3_l_224F09#1 = RMul(r4F0A,op1_e3_l_204F01);
          real _t4F0E#1 = RAdd(op1_e3_l_214F04,op1_e3_l_224F09);
          tensor[3] g4F11#2 = <tensor[3]>[_t4EEE,_t4EF5,_t4F0E];
          real _t4F13#6 = -0.4e1;
          real r4F16#1 = RMul(_t4F13,op1_e3_l_64EDD);
          real r4F17#1 = RMul(r4F16,op1_e3_l_84EE3);
          real op1_e3_l_244F15#1 = RMul(r4F17,op1_e3_l_204F01);
          real r4F1D#1 = RMul(_t4ED9,op1_e3_l_84EE3);
          real op1_e3_l_254F1C#2 = RMul(r4F1D,op1_e3_l_114EEB);
          real _t4F21#1 = RAdd(op1_e3_l_244F15,op1_e3_l_254F1C);
          real r4F25#1 = RMul(_t4F13,x4ED3);
          real r4F26#1 = RMul(r4F25,y4ED5);
          real r4F27#1 = RMul(r4F26,op1_e3_l_84EE3);
          real _t4F24#2 = RMul(r4F27,op1_e3_l_204F01);
          real r4F2E#1 = RMul(_t4F13,x4ED3);
          real r4F2F#1 = RMul(r4F2E,op1_e3_l_144EFC);
          real op1_e3_l_234F2D#1 = RMul(r4F2F,op1_e3_l_204F01);
          real r4F35#1 = RMul(_t4EC7,x4ED3);
          real r4F36#1 = RMul(r4F35,z4ED7);
          real op1_e3_l_244F34#1 = RMul(r4F36,op1_e3_l_114EEB);
          real _t4F3B#2 = RAdd(op1_e3_l_234F2D,op1_e3_l_244F34);
          tensor[3] _t4F3E#1 = <tensor[3]>[_t4F21,_t4F24,_t4F3B];
          real r4F41#1 = RMul(_t4F13,op1_e3_l_74EE0);
          real r4F42#1 = RMul(r4F41,op1_e3_l_84EE3);
          real op1_e3_l_244F40#1 = RMul(r4F42,op1_e3_l_204F01);
          real _t4F47#1 = RAdd(op1_e3_l_244F40,op1_e3_l_254F1C);
          real r4F4B#1 = RMul(_t4F13,y4ED5);
          real r4F4C#1 = RMul(r4F4B,op1_e3_l_144EFC);
          real op1_e3_l_234F4A#1 = RMul(r4F4C,op1_e3_l_204F01);
          real r4F52#1 = RMul(_t4EC7,y4ED5);
          real r4F53#1 = RMul(r4F52,z4ED7);
          real op1_e3_l_244F51#1 = RMul(r4F53,op1_e3_l_114EEB);
          real _t4F58#2 = RAdd(op1_e3_l_234F4A,op1_e3_l_244F51);
          tensor[3] _t4F5B#1 = <tensor[3]>[_t4F24,_t4F47,_t4F58];
          real _t4F5D#1 = 0.1e2;
          real _Pow_24F60#2 = RMul(z4ED7,z4ED7);
          real op1_e3_l_184F5F#1 = RMul(_Pow_24F60,_Pow_24F60);
          real r4F65#1 = RMul(_t4F13,op1_e3_l_184F5F);
          real op1_e3_l_314F64#1 = RMul(r4F65,op1_e3_l_204F01);
          real r4F6A#1 = RMul(_t4F5D,op1_e3_l_84EE3);
          real op1_e3_l_324F69#1 = RMul(r4F6A,op1_e3_l_114EEB);
          real op1_e3_l_334F6E#1 = RMul(_t4ED9,op1_e3_l_204F01);
          real r4F72#1 = RAdd(op1_e3_l_314F64,op1_e3_l_324F69);
          real _t4F71#1 = RAdd(r4F72,op1_e3_l_334F6E);
          tensor[3] _t4F76#1 = <tensor[3]>[_t4F3B,_t4F58,_t4F71];
          tensor[3,3] hess4F78#1 = <tensor[3,3]>[_t4F3E,_t4F5B,_t4F76];
          real[3] _t4F7A#1 = EigenVals3x3(hess4F78);
          real _t4F7C#1 = Subscript<real[3]>(_t4F7A,_t4EDB);
          real op1_e3_l_34F7E#1 = VDot<3>(g4F11,g4F11);
          real op1_e3_l_44F81#1 = Sqrt(op1_e3_l_34F7E);
          real op1_e3_l_54F84#1 = RNeg(_t4F7C);
          real op1_e3_l_64F87#1 = RAdd(fBias4E63,op1_e3_l_44F81);
          real str4F8A#1 = RDiv(op1_e3_l_54F84,op1_e3_l_64F87);
          bool _t4F8D#1 = GT<real>(str4F8A,fStrTh4E5F);
          if _t4F8D then goto ASSIGN4F91 else goto JOIN4F98
        ASSIGN4F91:  preds = [COND4F8F]
          bool _t4F90#1 = GTE<real>(_t4EBA,fMaskTh4E61);
          if _t4F90 then goto ASSIGN4F94 else goto JOIN4F96
        ASSIGN4F94:  preds = [COND4F92]
          bool _t4F93#1 = true;
          goto JOIN4F96
        JOIN4F96:  preds = [ASSIGN4F94,COND4F92]
          bool _t4F95#1 = phi(_t4F93,vv4E9D)
          goto JOIN4F98
        JOIN4F98:  preds = [JOIN4F96,COND4F8F]
          bool _t4F97#1 = phi(_t4F95,vv4E9D)
          goto JOIN4F9A
        JOIN4F9A:  preds = [JOIN4F98,COND4ED2]
          bool _t4F99#1 = phi(_t4F97,vv4E9D)
          bool _t4F9B#1 = BNot(_t4F99);
          if _t4F9B then goto ASSIGN4F9F else goto JOIN5087
        ASSIGN4F9F:  preds = [COND4F9D]
          int _t4F9E#1 = 0;
          bool _t4FA0#1 = GT<int>(verb4E77,_t4F9E);
          if _t4FA0 then goto JOIN4FA4 else goto JOIN4FA4
        JOIN4FA4:  preds = [COND4FA2,COND4FA2]
          bool _t4FA3#1 = phi(vv4E9D,vv4E9D)
          if _t4FA3 then goto ASSIGN4FA7 else goto ASSIGN59F6
        ASSIGN4FA7:  preds = [COND4FA5]
          bool _t4FA6#1 = true;
          goto JOIN4FAA
        JOIN4FAA:  preds = [ASSIGN4FA7,ASSIGN59F7]
          bool _t4FA8#1 = phi(_t4FA6,_t4FA9)
          if _t4FA8 then goto ASSIGN4FAD else goto JOIN5085
        ASSIGN4FAD:  preds = [COND4FAB]
          string _t4FAC#1 = "(i#";
          string _t4FAE#1 = " @ ";
          string _t4FB0#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID4E8B,_t4FAC,iter4E87,_t4FAE,pos4E89,_t4FB0);
          string _t4FB3#1 = "!inside=";
          if _t4EC9 then goto ASSIGN4FB7 else goto JOIN4FBB
        ASSIGN4FB7:  preds = [COND4FB5]
          real _t4FB6#1 = 0.3e1;
          bool _t4FB8#1 = GT<real>(_t4EC4,_t4FB6);
          goto JOIN4FBB
        JOIN4FBB:  preds = [ASSIGN4FB9,COND4FB5]
          bool _t4FBA#1 = phi(_t4FB8,vv4E9D)
          string _t4FBC#1 = " || fStrength=";
          real x4FBE#6 = VIndex<3,0>(pos4E89);
          real y4FC0#6 = VIndex<3,1>(pos4E89);
          real z4FC2#10 = VIndex<3,2>(pos4E89);
          real _t4FC4#6 = 0.2e1;
          int _t4FC6#1 = 2;
          real op1_e3_l_64FC8#2 = RMul(x4FBE,x4FBE);
          real op1_e3_l_74FCB#2 = RMul(y4FC0,y4FC0);
          real op1_e3_l_84FCE#8 = RMul(z4FC2,z4FC2);
          real r4FD2#1 = RAdd(op1_e3_l_64FC8,op1_e3_l_74FCB);
          real op1_e3_l_94FD1#2 = RAdd(r4FD2,op1_e3_l_84FCE);
          real op1_e3_l_114FD6#7 = Cos(op1_e3_l_94FD1);
          real r4FDA#1 = RMul(_t4FC4,x4FBE);
          real r4FDB#1 = RMul(r4FDA,op1_e3_l_84FCE);
          real _t4FD9#1 = RMul(r4FDB,op1_e3_l_114FD6);
          real r4FE1#1 = RMul(_t4FC4,y4FC0);
          real r4FE2#1 = RMul(r4FE1,op1_e3_l_84FCE);
          real _t4FE0#1 = RMul(r4FE2,op1_e3_l_114FD6);
          real _Pow2_4FE8#1 = RMul(z4FC2,z4FC2);
          real op1_e3_l_144FE7#3 = RMul(z4FC2,_Pow2_4FE8);
          real op1_e3_l_204FEC#8 = Sin(op1_e3_l_94FD1);
          real r4FF0#1 = RMul(_t4FC4,op1_e3_l_144FE7);
          real op1_e3_l_214FEF#1 = RMul(r4FF0,op1_e3_l_114FD6);
          real r4FF5#1 = RMul(_t4FC4,z4FC2);
          real op1_e3_l_224FF4#1 = RMul(r4FF5,op1_e3_l_204FEC);
          real _t4FF9#1 = RAdd(op1_e3_l_214FEF,op1_e3_l_224FF4);
          tensor[3] g4FFC#2 = <tensor[3]>[_t4FD9,_t4FE0,_t4FF9];
          real _t4FFE#6 = -0.4e1;
          real r5001#1 = RMul(_t4FFE,op1_e3_l_64FC8);
          real r5002#1 = RMul(r5001,op1_e3_l_84FCE);
          real op1_e3_l_245000#1 = RMul(r5002,op1_e3_l_204FEC);
          real r5008#1 = RMul(_t4FC4,op1_e3_l_84FCE);
          real op1_e3_l_255007#2 = RMul(r5008,op1_e3_l_114FD6);
          real _t500C#1 = RAdd(op1_e3_l_245000,op1_e3_l_255007);
          real r5010#1 = RMul(_t4FFE,x4FBE);
          real r5011#1 = RMul(r5010,y4FC0);
          real r5012#1 = RMul(r5011,op1_e3_l_84FCE);
          real _t500F#2 = RMul(r5012,op1_e3_l_204FEC);
          real r5019#1 = RMul(_t4FFE,x4FBE);
          real r501A#1 = RMul(r5019,op1_e3_l_144FE7);
          real op1_e3_l_235018#1 = RMul(r501A,op1_e3_l_204FEC);
          real r5020#1 = RMul(_t4EC7,x4FBE);
          real r5021#1 = RMul(r5020,z4FC2);
          real op1_e3_l_24501F#1 = RMul(r5021,op1_e3_l_114FD6);
          real _t5026#2 = RAdd(op1_e3_l_235018,op1_e3_l_24501F);
          tensor[3] _t5029#1 = <tensor[3]>[_t500C,_t500F,_t5026];
          real r502C#1 = RMul(_t4FFE,op1_e3_l_74FCB);
          real r502D#1 = RMul(r502C,op1_e3_l_84FCE);
          real op1_e3_l_24502B#1 = RMul(r502D,op1_e3_l_204FEC);
          real _t5032#1 = RAdd(op1_e3_l_24502B,op1_e3_l_255007);
          real r5036#1 = RMul(_t4FFE,y4FC0);
          real r5037#1 = RMul(r5036,op1_e3_l_144FE7);
          real op1_e3_l_235035#1 = RMul(r5037,op1_e3_l_204FEC);
          real r503D#1 = RMul(_t4EC7,y4FC0);
          real r503E#1 = RMul(r503D,z4FC2);
          real op1_e3_l_24503C#1 = RMul(r503E,op1_e3_l_114FD6);
          real _t5043#2 = RAdd(op1_e3_l_235035,op1_e3_l_24503C);
          tensor[3] _t5046#1 = <tensor[3]>[_t500F,_t5032,_t5043];
          real _t5048#1 = 0.1e2;
          real _Pow_2504B#2 = RMul(z4FC2,z4FC2);
          real op1_e3_l_18504A#1 = RMul(_Pow_2504B,_Pow_2504B);
          real r5050#1 = RMul(_t4FFE,op1_e3_l_18504A);
          real op1_e3_l_31504F#1 = RMul(r5050,op1_e3_l_204FEC);
          real r5055#1 = RMul(_t5048,op1_e3_l_84FCE);
          real op1_e3_l_325054#1 = RMul(r5055,op1_e3_l_114FD6);
          real op1_e3_l_335059#1 = RMul(_t4FC4,op1_e3_l_204FEC);
          real r505D#1 = RAdd(op1_e3_l_31504F,op1_e3_l_325054);
          real _t505C#1 = RAdd(r505D,op1_e3_l_335059);
          tensor[3] _t5061#1 = <tensor[3]>[_t5026,_t5043,_t505C];
          tensor[3,3] hess5063#1 = <tensor[3,3]>[_t5029,_t5046,_t5061];
          real[3] _t5065#1 = EigenVals3x3(hess5063);
          real _t5067#1 = Subscript<real[3]>(_t5065,_t4FC6);
          real op1_e3_l_35069#1 = VDot<3>(g4FFC,g4FFC);
          real op1_e3_l_4506C#1 = Sqrt(op1_e3_l_35069);
          real op1_e3_l_5506F#1 = RNeg(_t5067);
          real op1_e3_l_65072#1 = RAdd(fBias4E63,op1_e3_l_4506C);
          real str5075#1 = RDiv(op1_e3_l_5506F,op1_e3_l_65072);
          string _t5078#1 = " <= fStrTh=";
          string _t507A#1 = " || fMask(pos)=";
          string _t507C#1 = " < fMaskTh=";
          string _t507E#1 = " || fTest(pos)=";
          bool _t5080#1 = true;
          string _t5082#1 = " ==>DIE\n";
          Print<[string,bool,string,real,string,real,string,real,string,real,string,bool,string]>(_t4FB3,_t4FBA,_t4FBC,str5075,_t5078,fStrTh4E5F,_t507A,_t4EBA,_t507C,fMaskTh4E61,_t507E,_t5080,_t5082);
          goto JOIN5085
        JOIN5085:  preds = [MASSIGN5084,COND4FAB]
          die
          goto JOIN5087
        JOIN5087:  preds = [*DIE5086,COND4F9D]
          bool _t5088#1 = GT<real>(travMax4E69,_t4EBA);
          if _t5088 then goto ASSIGN508C else goto JOIN5090
        ASSIGN508C:  preds = [COND508A]
          bool _t508B#1 = GT<real>(trav4E93,travMax4E69);
          if _t508B then goto DIE508E else goto JOIN508F
        DIE508E:  preds = [COND508D]
          die
          goto JOIN508F
        JOIN508F:  preds = [*DIE508E,COND508D]
          goto JOIN5090
        JOIN5090:  preds = [JOIN508F,COND508A]
          bool _t5091#1 = BNot(found4E8F);
          if _t5091 then goto ASSIGN5095 else goto ASSIGN5228
        ASSIGN5095:  preds = [COND5093]
          int _t5094#3 = 0;
          bool _t5096#1 = GT<int>(nfsMax4E6B,_t5094);
          if _t5096 then goto ASSIGN509A else goto JOIN50BD
        ASSIGN509A:  preds = [COND5098]
          bool _t5099#1 = GT<int>(nfs4E91,nfsMax4E6B);
          if _t5099 then goto ASSIGN509D else goto JOIN50BC
        ASSIGN509D:  preds = [COND509B]
          bool _t509C#1 = GT<int>(verb4E77,_t5094);
          if _t509C then goto JOIN50A0 else goto JOIN50A0
        JOIN50A0:  preds = [COND509E,COND509E]
          bool _t509F#1 = phi(vv4E9D,vv4E9D)
          if _t509F then goto ASSIGN50A3 else goto ASSIGN5225
        ASSIGN50A3:  preds = [COND50A1]
          bool _t50A2#1 = true;
          goto JOIN50A6
        JOIN50A6:  preds = [ASSIGN50A3,ASSIGN5226]
          bool _t50A4#1 = phi(_t50A2,_t50A5)
          if _t50A4 then goto ASSIGN50A9 else goto JOIN50BA
        ASSIGN50A9:  preds = [COND50A7]
          string _t50A8#1 = "(i#";
          string _t50AA#1 = " @ ";
          string _t50AC#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID4E8B,_t50A8,iter4E87,_t50AA,pos4E89,_t50AC);
          string _t50AF#1 = "nfs=";
          string _t50B1#1 = " > nfsMax=";
          string _t50B3#1 = " || trav=";
          string _t50B5#1 = " > travMax=";
          string _t50B7#1 = " =>DIE\n";
          Print<[string,int,string,int,string,real,string,real,string]>(_t50AF,nfs4E91,_t50B1,nfsMax4E6B,_t50B3,trav4E93,_t50B5,travMax4E69,_t50B7);
          goto JOIN50BA
        JOIN50BA:  preds = [MASSIGN50B9,COND50A7]
          die
          goto JOIN50BC
        JOIN50BC:  preds = [*DIE50BB,COND509B]
          goto JOIN50BD
        JOIN50BD:  preds = [JOIN50BC,COND5098]
          tensor[3] _t50BE#3 = fStep50BF (pos4E89);
          tensor[3] step51B7#3 = VScale<3>(sfs4E79,_t50BE);
          tensor[3] pos51BA#2 = VAdd<3>(pos4E89,step51B7);
          real op1_e3_l_551BD#1 = VDot<3>(_t50BE,_t50BE);
          real r51C1#1 = RMul(sfs4E79,sfs4E79);
          real op1_e3_l_651C0#1 = RMul(r51C1,op1_e3_l_551BD);
          real op1_e3_l_751C5#1 = Sqrt(op1_e3_l_651C0);
          real op1_e3_l_1151C8#3 = RDiv(op1_e3_l_751C5,tipd4E65);
          real op1_e3_l_1251CB#1 = RSub(mvmt4E95,op1_e3_l_1151C8);
          real op1_e3_l_1451CE#1 = RMul(hist4E7B,op1_e3_l_1251CB);
          real mvmt51D1#2 = RAdd(op1_e3_l_1151C8,op1_e3_l_1451CE);
          bool _t51D4#1 = GT<real>(mvmt51D1,fsEps4E73);
          if _t51D4 then goto ASSIGN51D9 else goto ASSIGN5222
        ASSIGN51D9:  preds = [COND51D6]
          real trav51D7#1 = RAdd(trav4E93,op1_e3_l_1151C8);
          int _t51DA#1 = 1;
          int nfs51DC#1 = IAdd(nfs4E91,_t51DA);
          goto JOIN51E4
        JOIN51E4:  preds = [ASSIGN51DD,ASSIGN5223]
          real mvmt51DE#2 = phi(mvmt51D1,mvmt51DF)
          real trav51E0#1 = phi(trav51D7,_t4EBA)
          int nfs51E1#1 = phi(nfs51DC,nfs4E91)
          bool found51E2#2 = phi(found4E8F,found51E3)
          bool _t51E5#1 = GT<int>(verb4E77,_t5094);
          if _t51E5 then goto JOIN51E9 else goto JOIN51E9
        JOIN51E9:  preds = [COND51E7,COND51E7]
          bool _t51E8#1 = phi(vv4E9D,vv4E9D)
          if _t51E8 then goto ASSIGN51EC else goto ASSIGN5220
        ASSIGN51EC:  preds = [COND51EA]
          bool _t51EB#1 = true;
          goto JOIN51EF
        JOIN51EF:  preds = [ASSIGN51EC,ASSIGN5221]
          bool _t51ED#1 = phi(_t51EB,_t51EE)
          if _t51ED then goto ASSIGN51F2 else goto JOIN5201
        ASSIGN51F2:  preds = [COND51F0]
          string _t51F1#1 = "(i#";
          string _t51F3#1 = " @ ";
          string _t51F5#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID4E8B,_t51F1,iter4E87,_t51F3,pos51BA,_t51F5);
          string _t51F8#1 = "step=";
          string _t51FA#1 = "; mvmt=";
          string _t51FC#1 = " => found=";
          string _t51FE#1 = "\n";
          Print<[string,tensor[3],string,real,string,bool,string]>(_t51F8,step51B7,_t51FA,mvmt51DE,_t51FC,found51E2,_t51FE);
          goto JOIN5201
        JOIN5201:  preds = [MASSIGN5200,COND51F0]
          goto JOIN5212
        JOIN5212:  preds = [JOIN5201,JOIN599D]
          int born5202#1 = phi(born4E99,born5203)
          real closest5204#1 = phi(closest4E97,closest5205)
          real mvmt5206#1 = phi(mvmt51DE,mvmt5207)
          real trav5208#1 = phi(trav51E0,trav5209)
          int nfs520A#1 = phi(nfs51E1,nfs4E91)
          bool found520B#1 = phi(found51E2,found4E8F)
          tensor[3] step520C#1 = phi(step51B7,step520D)
          real hh520E#1 = phi(hh4E8D,hh520F)
          tensor[3] pos5210#2 = phi(pos51BA,pos5211)
          self.pos = pos5210;
          self._pos = pos5210;
          self.hh = hh520E;
          self.step = step520C;
          self.found = found520B;
          self.nfs = nfs520A;
          self.trav = trav5208;
          self.mvmt = mvmt5206;
          self.closest = closest5204;
          self.born = born5202;
          self.first = vv4E9D;
          active
        ASSIGN5220:  preds = [COND51EA]
          int _t521F#1 = 1;
          bool _t51EE#1 = GT<int>(verb4E77,_t521F);
          goto JOIN51EF
        ASSIGN5222:  preds = [COND51D6]
          bool found51E3#1 = true;
          real mvmt51DF#1 = 0.1e1;
          goto JOIN51E4
        ASSIGN5225:  preds = [COND50A1]
          int _t5224#1 = 1;
          bool _t50A5#1 = GT<int>(verb4E77,_t5224);
          goto JOIN50A6
        ASSIGN5228:  preds = [COND5093]
          int _t5227#25 = 0;
          bool _t5229#1 = EQ<int>(_t5227,fDim4E7F);
          if _t5229 then goto SAVE522C else goto JOIN522E
        SAVE522C:  preds = [COND522B]
          self.pos = pos4E89;
          stabilize
          goto JOIN522E
        JOIN522E:  preds = [*STABILIZE522D,COND522B]
          tensor[3] _t522F#3 = fStep50BF (pos4E89);
          tensor[3] step5231#10 = VScale<3>(sfs4E79,_t522F);
          tensor[3] pos5234#20 = VAdd<3>(pos4E89,step5231);
          real op1_e3_l_45237#1 = VDot<3>(_t522F,_t522F);
          real r523B#1 = RMul(sfs4E79,sfs4E79);
          real op1_e3_l_5523A#1 = RMul(r523B,op1_e3_l_45237);
          real op1_e3_l_6523F#1 = Sqrt(op1_e3_l_5523A);
          real op1_e3_l_75242#2 = RDiv(op1_e3_l_6523F,tipd4E65);
          real trav5245#4 = RAdd(trav4E93,op1_e3_l_75242);
          point[] _t5248#1 = SphereQuery<3,point>(pos5234,rad4E85);
        FOREACH524B:  preds = [ASSIGN5249,NEXT52EB]
          foreach (P524A in _t5248) on exit goto ASSIGN5345
            int nn52E9#3 = phi(_t5227,nn52E8)
            tensor[3] force52E3#6 = phi(_t4EBC,force52E2)
            real oldE5298#4 = phi(_t4EBA,oldE5297)
          tensor[3] _t524C#1 = P524A.pos;
          tensor[3] op1_e3_l_9524E#5 = VSub<3>(_t524C,pos5234);
          real op1_e3_l_115251#1 = VDot<3>(op1_e3_l_9524E,op1_e3_l_9524E);
          real op1_e3_l_125254#3 = Sqrt(op1_e3_l_115251);
          real _t5257#1 = RDiv(op1_e3_l_125254,tipd4E65);
          bool _t525A#1 = LT<real>(_t5257,fsEps4E73);
          if _t525A then goto ASSIGN525E else goto JOIN5264
        ASSIGN525E:  preds = [COND525C]
          real _t525D#1 = P524A.ID;
          bool _t525F#1 = LTE<real>(ID4E8B,_t525D);
          if _t525F then goto DIE5262 else goto JOIN5263
        DIE5262:  preds = [COND5261]
          die
          goto JOIN5263
        JOIN5263:  preds = [*DIE5262,COND5261]
          goto JOIN5264
        JOIN5264:  preds = [JOIN5263,COND525C]
          real _t5265#12 = RDiv(op1_e3_l_125254,rad4E85);
          real _t5268#2 = 0.2e1;
          real _t526A#2 = 0.3e1;
          real _t526C#2 = RDiv(_t5268,_t526A);
          bool _t526F#2 = LT<real>(_t5265,_t526C);
          if _t526F then goto ASSIGN5273 else goto ASSIGN5318
        ASSIGN5273:  preds = [COND5271]
          real _t5272#1 = 0.1e1;
          real _t5274#1 = -0.5646e1;
          real _t5276#1 = 0.119835e2;
          real _t5278#1 = -0.113535e2;
          real _t527A#1 = 0.40550625e1;
          real op1_e3_l_58527C#1 = RMul(_t527A,_t5265);
          real op1_e3_l_60527F#1 = RAdd(_t5278,op1_e3_l_58527C);
          real op1_e3_l_615282#1 = RMul(_t5265,op1_e3_l_60527F);
          real op1_e3_l_635285#1 = RAdd(_t5276,op1_e3_l_615282);
          real op1_e3_l_645288#1 = RMul(_t5265,op1_e3_l_635285);
          real op1_e3_l_66528B#1 = RAdd(_t5274,op1_e3_l_645288);
          real op1_e3_l_67528E#1 = RMul(_t5265,op1_e3_l_66528B);
          real _t5291#1 = RAdd(_t5272,op1_e3_l_67528E);
          goto JOIN5296
        JOIN5296:  preds = [ASSIGN5293,JOIN5343]
          real _t5294#1 = phi(_t5291,_t5295)
          real oldE5297#1 = RAdd(oldE5298,_t5294);
          if _t526F then goto ASSIGN529D else goto ASSIGN52ED
        ASSIGN529D:  preds = [COND529B]
          real _t529C#1 = -0.5646e1;
          real _t529E#1 = 0.23967e2;
          real _t52A0#1 = -0.340605e2;
          real _t52A2#1 = 0.1622025e2;
          real op1_e3_l_4452A4#1 = RMul(_t52A2,_t5265);
          real op1_e3_l_4652A7#1 = RAdd(_t52A0,op1_e3_l_4452A4);
          real op1_e3_l_4752AA#1 = RMul(_t5265,op1_e3_l_4652A7);
          real op1_e3_l_4952AD#1 = RAdd(_t529E,op1_e3_l_4752AA);
          real op1_e3_l_5052B0#1 = RMul(_t5265,op1_e3_l_4952AD);
          real _t52B3#1 = RAdd(_t529C,op1_e3_l_5052B0);
          goto JOIN52B8
        JOIN52B8:  preds = [ASSIGN52B5,JOIN5316]
          real _t52B6#1 = phi(_t52B3,_t52B7)
          real _t52B9#1 = 0.1e1;
          real op1_e3_l_1452BB#1 = RDiv(_t52B9,rad4E85);
          real r52BF#1 = TensorIndex<tensor[3],[0]>(op1_e3_l_9524E);
          real r52C0#3 = RMul(_t52B6,op1_e3_l_1452BB);
          real r52C1#1 = RMul(r52C0,r52BF);
          real r52C2#1 = TensorIndex<tensor[3],[1]>(op1_e3_l_9524E);
          real r52C3#1 = RMul(r52C0,r52C2);
          real r52C4#1 = TensorIndex<tensor[3],[2]>(op1_e3_l_9524E);
          real r52C5#1 = RMul(r52C0,r52C4);
          tensor[3] op1_e3_l_2352BE#3 = <tensor[3]>[r52C1,r52C3,r52C5];
          real realLit52D0#1 = 0.1e1;
          real r52D1#3 = RDiv(realLit52D0,op1_e3_l_125254);
          real r52D2#1 = TensorIndex<tensor[3],[0]>(op1_e3_l_2352BE);
          real r52D3#1 = RMul(r52D1,r52D2);
          real r52D4#1 = TensorIndex<tensor[3],[1]>(op1_e3_l_2352BE);
          real r52D5#1 = RMul(r52D1,r52D4);
          real r52D6#1 = TensorIndex<tensor[3],[2]>(op1_e3_l_2352BE);
          real r52D7#1 = RMul(r52D1,r52D6);
          tensor[3] op1_e3_l_2552CF#1 = <tensor[3]>[r52D3,r52D5,r52D7];
          tensor[3] force52E2#1 = VAdd<3>(force52E3,op1_e3_l_2552CF);
          int _t52E6#1 = 1;
          int nn52E8#1 = IAdd(nn52E9,_t52E6);
          goto FOREACH524B
        ASSIGN52ED:  preds = [COND529B]
          real _t52EC#1 = 0.1e1;
          bool _t52EE#1 = LT<real>(_t5265,_t52EC);
          if _t52EE then goto ASSIGN52F2 else goto JOIN5316
        ASSIGN52F2:  preds = [COND52F0]
          real _t52F1#1 = 0.1234567901e-1;
          real _t52F3#2 = 0.486e1;
          real _t52F5#1 = -0.1458e2;
          real _t52F7#1 = 0.1458e2;
          real op1_e3_l_4252F9#1 = RMul(_t526A,_t5265);
          real op1_e3_l_7352FC#4 = RSub(op1_e3_l_4252F9,_t5268);
          real op1_e3_l_7452FF#1 = RMul(_t52F3,op1_e3_l_7352FC);
          real op1_e3_l_765302#1 = RSub(_t52F7,op1_e3_l_7452FF);
          real op1_e3_l_775305#1 = RMul(op1_e3_l_7352FC,op1_e3_l_765302);
          real op1_e3_l_795308#1 = RAdd(_t52F5,op1_e3_l_775305);
          real op1_e3_l_80530B#1 = RMul(op1_e3_l_7352FC,op1_e3_l_795308);
          real op1_e3_l_82530E#1 = RAdd(_t52F3,op1_e3_l_80530B);
          real r5312#1 = RMul(_t52F1,op1_e3_l_7352FC);
          real _t5311#1 = RMul(r5312,op1_e3_l_82530E);
          goto JOIN5316
        JOIN5316:  preds = [ASSIGN5315,COND52F0]
          real _t52B7#1 = phi(_t5311,_t4EBA)
          goto JOIN52B8
        ASSIGN5318:  preds = [COND5271]
          real _t5317#1 = 0.1e1;
          bool _t5319#1 = LT<real>(_t5265,_t5317);
          if _t5319 then goto ASSIGN531D else goto JOIN5343
        ASSIGN531D:  preds = [COND531B]
          real _t531C#1 = -0.1e-2;
          real _t531E#1 = 0.9e-1;
          real _t5320#1 = -0.54e0;
          real _t5322#1 = 0.1215e1;
          real _t5324#1 = 0.972e0;
          real op1_e3_l_505326#5 = RSub(_t5265,_t526C);
          real op1_e3_l_515329#1 = RMul(_t5324,op1_e3_l_505326);
          real op1_e3_l_62532C#1 = RSub(_t5322,op1_e3_l_515329);
          real op1_e3_l_64532F#1 = RMul(op1_e3_l_62532C,op1_e3_l_505326);
          real op1_e3_l_755332#1 = RAdd(_t5320,op1_e3_l_64532F);
          real op1_e3_l_775335#1 = RMul(op1_e3_l_755332,op1_e3_l_505326);
          real op1_e3_l_985338#1 = RAdd(_t531E,op1_e3_l_775335);
          real r533C#1 = RMul(op1_e3_l_985338,op1_e3_l_505326);
          real op1_e3_l_101533B#1 = RMul(r533C,op1_e3_l_505326);
          real _t5340#1 = RAdd(_t531C,op1_e3_l_101533B);
          goto JOIN5343
        JOIN5343:  preds = [ASSIGN5342,COND531B]
          real _t5295#1 = phi(_t5340,_t4EBA)
          goto JOIN5296
        ASSIGN5345:  preds = [FOREACH524B]
          bool _t5344#1 = EQ<int>(_t5227,nn52E9);
          if _t5344 then goto ASSIGN5348 else goto JOIN5628
        ASSIGN5348:  preds = [COND5346]
          bool _t5347#1 = GT<int>(pcp4E7D,_t5227);
          if _t5347 then goto ASSIGN534B else goto JOIN5354
        ASSIGN534B:  preds = [COND5349]
          bool _t534A#1 = GT<int>(iter4E87,_t5227);
          if _t534A then goto ASSIGN534E else goto JOIN5352
        ASSIGN534E:  preds = [COND534C]
          int _t534D#1 = IMod(iter4E87,pcp4E7D);
          bool _t534F#1 = EQ<int>(_t5227,_t534D);
          goto JOIN5352
        JOIN5352:  preds = [ASSIGN5350,COND534C]
          bool _t5351#1 = phi(_t534F,vv4E9D)
          goto JOIN5354
        JOIN5354:  preds = [JOIN5352,COND5349]
          bool _t5353#1 = phi(_t5351,vv4E9D)
          if _t5353 then goto ASSIGN5357 else goto JOIN5363
        ASSIGN5357:  preds = [COND5355]
          int _t5356#1 = IDiv(iter4E87,pcp4E7D);
          int _t5358#2 = 2;
          int _t535A#1 = IMod(_t5356,_t5358);
          int _t535C#1 = IMul(_t535A,_t5358);
          int _t535E#1 = 1;
          int _t5360#1 = ISub(_t535C,_t535E);
          goto JOIN5363
        JOIN5363:  preds = [ASSIGN5361,COND5355]
          int _t5362#1 = phi(_t5360,_t5227)
          bool _t5364#1 = GT<int>(_t5362,_t5227);
          if _t5364 then goto ASSIGN5368 else goto JOIN536A
        ASSIGN5368:  preds = [COND5366]
          bool _t5367#1 = LT<int>(born4E99,nnmax4E83);
          goto JOIN536A
        JOIN536A:  preds = [ASSIGN5368,COND5366]
          bool _t5369#1 = phi(_t5367,vv4E9D)
          bool _t536B#1 = BNot(_t5369);
          if _t536B then goto SAVE536E else goto JOIN5373
        SAVE536E:  preds = [COND536D]
          self.pos = pos5234;
          self._pos = pos5234;
          self.step = step5231;
          self.trav = trav5245;
          active
          goto JOIN5373
        JOIN5373:  preds = [*ACTIVE5372,COND536D]
          tensor[3,3] _t5374#9 = fPerp5375 (pos5234);
          tensor[3] _t546A#3 = <tensor[3]>[tipd4E65,_t4EBA,_t4EBA];
          tensor[3] projParam546D#1 = ProjectLast<tensor[3,3],[0]>(_t5374);
          real vdot546E#1 = VDot<3>(projParam546D,_t546A);
          tensor[3] projParam546F#1 = ProjectLast<tensor[3,3],[1]>(_t5374);
          real vdot5470#1 = VDot<3>(projParam546F,_t546A);
          tensor[3] projParam5471#1 = ProjectLast<tensor[3,3],[2]>(_t5374);
          real vdot5472#1 = VDot<3>(projParam5471,_t546A);
          tensor[3] noff0546C#3 = <tensor[3]>[vdot546E,vdot5470,vdot5472];
          tensor[3] _t547B#3 = <tensor[3]>[_t4EBA,tipd4E65,_t4EBA];
          tensor[3] projParam547E#1 = ProjectLast<tensor[3,3],[0]>(_t5374);
          real vdot547F#1 = VDot<3>(projParam547E,_t547B);
          tensor[3] projParam5480#1 = ProjectLast<tensor[3,3],[1]>(_t5374);
          real vdot5481#1 = VDot<3>(projParam5480,_t547B);
          tensor[3] projParam5482#1 = ProjectLast<tensor[3,3],[2]>(_t5374);
          real vdot5483#1 = VDot<3>(projParam5482,_t547B);
          tensor[3] noff1547D#3 = <tensor[3]>[vdot547F,vdot5481,vdot5483];
          tensor[3] _t548C#3 = <tensor[3]>[_t4EBA,_t4EBA,tipd4E65];
          tensor[3] projParam548F#1 = ProjectLast<tensor[3,3],[0]>(_t5374);
          real vdot5490#1 = VDot<3>(projParam548F,_t548C);
          tensor[3] projParam5491#1 = ProjectLast<tensor[3,3],[1]>(_t5374);
          real vdot5492#1 = VDot<3>(projParam5491,_t548C);
          tensor[3] projParam5493#1 = ProjectLast<tensor[3,3],[2]>(_t5374);
          real vdot5494#1 = VDot<3>(projParam5493,_t548C);
          tensor[3] noff2548E#3 = <tensor[3]>[vdot5490,vdot5492,vdot5494];
          real op1_e3_l_4549D#1 = VDot<3>(noff0546C,noff0546C);
          real _t54A0#1 = Sqrt(op1_e3_l_4549D);
          real op1_e3_l_454A3#1 = VDot<3>(noff1547D,noff1547D);
          real _t54A6#1 = Sqrt(op1_e3_l_454A3);
          bool _t54A9#1 = GT<real>(_t54A0,_t54A6);
          if _t54A9 then goto JOIN54AD else goto JOIN54AD
        JOIN54AD:  preds = [COND54AB,COND54AB]
          tensor[3] _t54AC#3 = phi(noff0546C,noff1547D)
          real op1_e3_l_154AE#1 = VDot<3>(_t54AC,_t54AC);
          real _t54B1#1 = Sqrt(op1_e3_l_154AE);
          real op1_e3_l_454B4#1 = VDot<3>(noff2548E,noff2548E);
          real _t54B7#1 = Sqrt(op1_e3_l_454B4);
          bool _t54BA#1 = GT<real>(_t54B1,_t54B7);
          if _t54BA then goto JOIN54BE else goto JOIN54BE
        JOIN54BE:  preds = [COND54BC,COND54BC]
          tensor[3] _t54BD#5 = phi(_t54AC,noff2548E)
          real op1_e3_l_654BF#1 = VDot<3>(_t54BD,_t54BD);
          real op1_e3_l_754C2#1 = Sqrt(op1_e3_l_654BF);
          real realLit54C6#1 = 0.1e1;
          real op1_e3_l_854C5#3 = RDiv(realLit54C6,op1_e3_l_754C2);
          real r54CB#1 = TensorIndex<tensor[3],[0]>(_t54BD);
          real r54CC#1 = RMul(tipd4E65,r54CB);
          real r54CD#1 = RMul(r54CC,op1_e3_l_854C5);
          real r54CE#1 = TensorIndex<tensor[3],[1]>(_t54BD);
          real r54CF#1 = RMul(tipd4E65,r54CE);
          real r54D0#1 = RMul(r54CF,op1_e3_l_854C5);
          real r54D1#1 = TensorIndex<tensor[3],[2]>(_t54BD);
          real r54D2#1 = RMul(tipd4E65,r54D1);
          real r54D3#1 = RMul(r54D2,op1_e3_l_854C5);
          tensor[3] op1_e3_l_954CA#2 = <tensor[3]>[r54CD,r54D0,r54D3];
          tensor[3] v54E0#1 = VAdd<3>(op1_e3_l_954CA,pos4E89);
          tensor[3] npos54DF#1 = VAdd<3>(v54E0,step5231);
          tensor[3] _t54E4#1 = fStep50BF (npos54DF);
          tensor[3] op1_e3_l_1354E6#1 = VScale<3>(sfs4E79,_t54E4);
          tensor[3] v54EA#1 = VAdd<3>(op1_e3_l_954CA,pos4E89);
          tensor[3] v54EB#1 = VAdd<3>(v54EA,step5231);
          tensor[3] npos54E9#5 = VAdd<3>(v54EB,op1_e3_l_1354E6);
          bool _t54F0#2 = GT<int>(verb4E77,_t5227);
          if _t54F0 then goto JOIN54F4 else goto JOIN54F4
        JOIN54F4:  preds = [COND54F2,COND54F2]
          bool _t54F3#1 = phi(vv4E9D,vv4E9D)
          if _t54F3 then goto ASSIGN54F7 else goto ASSIGN59F3
        ASSIGN54F7:  preds = [COND54F5]
          bool _t54F6#1 = true;
          goto JOIN54FA
        JOIN54FA:  preds = [ASSIGN54F7,ASSIGN59F4]
          bool _t54F8#1 = phi(_t54F6,_t54F9)
          if _t54F8 then goto ASSIGN54FD else goto JOIN5526
        ASSIGN54FD:  preds = [COND54FB]
          string _t54FC#1 = "(i#";
          string _t54FE#1 = " @ ";
          string _t5500#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID4E8B,_t54FC,iter4E87,_t54FE,pos5234,_t5500);
          string _t5503#1 = " 0==nn =>NEW(";
          string _t5505#1 = ") w/ ID=";
          real _t5507#1 = 0.1e7;
          real _t5509#1 = VIndex<3,0>(npos54E9);
          real _t550B#1 = urnd4DF7 (_t5509);
          real _t550D#1 = VIndex<3,1>(npos54E9);
          real _t550F#1 = urnd4DF7 (_t550D);
          real _t5511#1 = VIndex<3,2>(npos54E9);
          real _t5513#1 = urnd4DF7 (_t5511);
          real r5516#1 = RAdd(_t550B,_t550F);
          real _t5515#1 = RAdd(r5516,_t5513);
          real _t551A#1 = 0.1e1;
          real _t551C#1 = MathFn<fmod>(_t5515,_t551A);
          real _t551E#1 = RMul(_t5507,_t551C);
          real _t5521#1 = MathFn<floor>(_t551E);
          string _t5523#1 = "\n";
          Print<[string,tensor[3],string,real,string]>(_t5503,npos54E9,_t5505,_t5521,_t5523);
          goto JOIN5526
        JOIN5526:  preds = [MASSIGN5525,COND54FB]
          tensor[3] op1_e3_l_85527#2 = VSub<3>(pos5234,_t4EBC);
          real op1_e3_l_10552A#1 = VDot<3>(op1_e3_l_85527,op1_e3_l_85527);
          real _t552D#2 = Sqrt(op1_e3_l_10552A);
          bool _t5530#1 = LT<real>(_t552D,_t4EC7);
          if _t5530 then goto ASSIGN5534 else goto JOIN5538
        ASSIGN5534:  preds = [COND5532]
          real _t5533#1 = 0.3e1;
          bool _t5535#1 = GT<real>(_t552D,_t5533);
          goto JOIN5538
        JOIN5538:  preds = [ASSIGN5536,COND5532]
          bool _t5537#1 = phi(_t5535,vv4E9D)
          if _t5537 then goto ASSIGN553B else goto JOIN5601
        ASSIGN553B:  preds = [COND5539]
          real x553A#6 = VIndex<3,0>(pos5234);
          real y553C#6 = VIndex<3,1>(pos5234);
          real z553E#10 = VIndex<3,2>(pos5234);
          real _t5540#6 = 0.2e1;
          int _t5542#1 = 2;
          real op1_e3_l_65544#2 = RMul(x553A,x553A);
          real op1_e3_l_75547#2 = RMul(y553C,y553C);
          real op1_e3_l_8554A#8 = RMul(z553E,z553E);
          real r554E#1 = RAdd(op1_e3_l_65544,op1_e3_l_75547);
          real op1_e3_l_9554D#2 = RAdd(r554E,op1_e3_l_8554A);
          real op1_e3_l_115552#7 = Cos(op1_e3_l_9554D);
          real r5556#1 = RMul(_t5540,x553A);
          real r5557#1 = RMul(r5556,op1_e3_l_8554A);
          real _t5555#1 = RMul(r5557,op1_e3_l_115552);
          real r555D#1 = RMul(_t5540,y553C);
          real r555E#1 = RMul(r555D,op1_e3_l_8554A);
          real _t555C#1 = RMul(r555E,op1_e3_l_115552);
          real _Pow2_5564#1 = RMul(z553E,z553E);
          real op1_e3_l_145563#3 = RMul(z553E,_Pow2_5564);
          real op1_e3_l_205568#8 = Sin(op1_e3_l_9554D);
          real r556C#1 = RMul(_t5540,op1_e3_l_145563);
          real op1_e3_l_21556B#1 = RMul(r556C,op1_e3_l_115552);
          real r5571#1 = RMul(_t5540,z553E);
          real op1_e3_l_225570#1 = RMul(r5571,op1_e3_l_205568);
          real _t5575#1 = RAdd(op1_e3_l_21556B,op1_e3_l_225570);
          tensor[3] g5578#2 = <tensor[3]>[_t5555,_t555C,_t5575];
          real _t557A#6 = -0.4e1;
          real r557D#1 = RMul(_t557A,op1_e3_l_65544);
          real r557E#1 = RMul(r557D,op1_e3_l_8554A);
          real op1_e3_l_24557C#1 = RMul(r557E,op1_e3_l_205568);
          real r5584#1 = RMul(_t5540,op1_e3_l_8554A);
          real op1_e3_l_255583#2 = RMul(r5584,op1_e3_l_115552);
          real _t5588#1 = RAdd(op1_e3_l_24557C,op1_e3_l_255583);
          real r558C#1 = RMul(_t557A,x553A);
          real r558D#1 = RMul(r558C,y553C);
          real r558E#1 = RMul(r558D,op1_e3_l_8554A);
          real _t558B#2 = RMul(r558E,op1_e3_l_205568);
          real r5595#1 = RMul(_t557A,x553A);
          real r5596#1 = RMul(r5595,op1_e3_l_145563);
          real op1_e3_l_235594#1 = RMul(r5596,op1_e3_l_205568);
          real r559C#1 = RMul(_t4EC7,x553A);
          real r559D#1 = RMul(r559C,z553E);
          real op1_e3_l_24559B#1 = RMul(r559D,op1_e3_l_115552);
          real _t55A2#2 = RAdd(op1_e3_l_235594,op1_e3_l_24559B);
          tensor[3] _t55A5#1 = <tensor[3]>[_t5588,_t558B,_t55A2];
          real r55A8#1 = RMul(_t557A,op1_e3_l_75547);
          real r55A9#1 = RMul(r55A8,op1_e3_l_8554A);
          real op1_e3_l_2455A7#1 = RMul(r55A9,op1_e3_l_205568);
          real _t55AE#1 = RAdd(op1_e3_l_2455A7,op1_e3_l_255583);
          real r55B2#1 = RMul(_t557A,y553C);
          real r55B3#1 = RMul(r55B2,op1_e3_l_145563);
          real op1_e3_l_2355B1#1 = RMul(r55B3,op1_e3_l_205568);
          real r55B9#1 = RMul(_t4EC7,y553C);
          real r55BA#1 = RMul(r55B9,z553E);
          real op1_e3_l_2455B8#1 = RMul(r55BA,op1_e3_l_115552);
          real _t55BF#2 = RAdd(op1_e3_l_2355B1,op1_e3_l_2455B8);
          tensor[3] _t55C2#1 = <tensor[3]>[_t558B,_t55AE,_t55BF];
          real _t55C4#1 = 0.1e2;
          real _Pow_255C7#2 = RMul(z553E,z553E);
          real op1_e3_l_1855C6#1 = RMul(_Pow_255C7,_Pow_255C7);
          real r55CC#1 = RMul(_t557A,op1_e3_l_1855C6);
          real op1_e3_l_3155CB#1 = RMul(r55CC,op1_e3_l_205568);
          real r55D1#1 = RMul(_t55C4,op1_e3_l_8554A);
          real op1_e3_l_3255D0#1 = RMul(r55D1,op1_e3_l_115552);
          real op1_e3_l_3355D5#1 = RMul(_t5540,op1_e3_l_205568);
          real r55D9#1 = RAdd(op1_e3_l_3155CB,op1_e3_l_3255D0);
          real _t55D8#1 = RAdd(r55D9,op1_e3_l_3355D5);
          tensor[3] _t55DD#1 = <tensor[3]>[_t55A2,_t55BF,_t55D8];
          tensor[3,3] hess55DF#1 = <tensor[3,3]>[_t55A5,_t55C2,_t55DD];
          real[3] _t55E1#1 = EigenVals3x3(hess55DF);
          real _t55E3#1 = Subscript<real[3]>(_t55E1,_t5542);
          real op1_e3_l_355E5#1 = VDot<3>(g5578,g5578);
          real op1_e3_l_455E8#1 = Sqrt(op1_e3_l_355E5);
          real op1_e3_l_555EB#1 = RNeg(_t55E3);
          real op1_e3_l_655EE#1 = RAdd(fBias4E63,op1_e3_l_455E8);
          real str55F1#1 = RDiv(op1_e3_l_555EB,op1_e3_l_655EE);
          bool _t55F4#1 = GT<real>(str55F1,fStrTh4E5F);
          if _t55F4 then goto ASSIGN55F8 else goto JOIN55FF
        ASSIGN55F8:  preds = [COND55F6]
          bool _t55F7#1 = GTE<real>(_t4EBA,fMaskTh4E61);
          if _t55F7 then goto ASSIGN55FB else goto JOIN55FD
        ASSIGN55FB:  preds = [COND55F9]
          bool _t55FA#1 = true;
          goto JOIN55FD
        JOIN55FD:  preds = [ASSIGN55FB,COND55F9]
          bool _t55FC#1 = phi(_t55FA,vv4E9D)
          goto JOIN55FF
        JOIN55FF:  preds = [JOIN55FD,COND55F6]
          bool _t55FE#1 = phi(_t55FC,vv4E9D)
          goto JOIN5601
        JOIN5601:  preds = [JOIN55FF,COND5539]
          bool _t5600#1 = phi(_t55FE,vv4E9D)
          if _t5600 then goto NEW5603 else goto JOIN5609
        NEW5603:  preds = [COND5602]
          new point(npos54E9,hh4E8D);
          int _t5604#1 = 1;
          int born5606#1 = IAdd(born4E99,_t5604);
          goto JOIN5609
        JOIN5609:  preds = [ASSIGN5607,COND5602]
          int born5608#1 = phi(born5606,born4E99)
          if _t54F0 then goto JOIN560C else goto JOIN560C
        JOIN560C:  preds = [COND560A,COND560A]
          bool _t560B#1 = phi(vv4E9D,vv4E9D)
          if _t560B then goto ASSIGN560F else goto ASSIGN59F0
        ASSIGN560F:  preds = [COND560D]
          bool _t560E#1 = true;
          goto JOIN5612
        JOIN5612:  preds = [ASSIGN560F,ASSIGN59F1]
          bool _t5610#1 = phi(_t560E,_t5611)
          if _t5610 then goto ASSIGN5615 else goto JOIN5620
        ASSIGN5615:  preds = [COND5613]
          string _t5614#1 = "(i#";
          string _t5616#1 = " @ ";
          string _t5618#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID4E8B,_t5614,iter4E87,_t5616,pos5234,_t5618);
          string _t561B#1 = "nn=0; after birthing mvmt=";
          string _t561D#1 = "\n";
          Print<[string,real,string]>(_t561B,mvmt4E95,_t561D);
          goto JOIN5620
        JOIN5620:  preds = [MASSIGN561F,COND5613]
          self.pos = pos5234;
          self._pos = pos5234;
          self.step = step5231;
          self.trav = trav5245;
          self.born = born5608;
          active
          goto JOIN5628
        JOIN5628:  preds = [*ACTIVE5626,COND5346]
          int born5627#9 = phi(born4E99)
          tensor[3,3] _t5629#3 = fPerp5375 (pos5234);
          tensor[3] projParam562C#1 = ProjectLast<tensor[3,3],[0]>(_t5629);
          real vdot562D#1 = VDot<3>(projParam562C,force52E3);
          tensor[3] projParam562E#1 = ProjectLast<tensor[3,3],[1]>(_t5629);
          real vdot562F#1 = VDot<3>(projParam562E,force52E3);
          tensor[3] projParam5630#1 = ProjectLast<tensor[3,3],[2]>(_t5629);
          real vdot5631#1 = VDot<3>(projParam5630,force52E3);
          tensor[3] op1_e3_l_3562B#6 = <tensor[3]>[vdot562D,vdot562F,vdot5631];
          tensor[3] es563A#1 = VScale<3>(hh4E8D,op1_e3_l_3562B);
          real op1_e3_l_5563D#1 = VDot<3>(op1_e3_l_3562B,op1_e3_l_3562B);
          real r5641#1 = RMul(hh4E8D,hh4E8D);
          real op1_e3_l_65640#1 = RMul(r5641,op1_e3_l_5563D);
          real _t5645#2 = Sqrt(op1_e3_l_65640);
          bool _t5648#1 = GT<real>(_t5645,tipd4E65);
          if _t5648 then goto ASSIGN564D else goto JOIN5664
        ASSIGN564D:  preds = [COND564A]
          real op1_e3_l_10564B#2 = RDiv(tipd4E65,_t5645);
          real hh564E#1 = RMul(hh4E8D,op1_e3_l_10564B);
          real r5652#1 = TensorIndex<tensor[3],[0]>(op1_e3_l_3562B);
          real r5653#3 = RMul(hh4E8D,op1_e3_l_10564B);
          real r5654#1 = RMul(r5653,r5652);
          real r5655#1 = TensorIndex<tensor[3],[1]>(op1_e3_l_3562B);
          real r5656#1 = RMul(r5653,r5655);
          real r5657#1 = TensorIndex<tensor[3],[2]>(op1_e3_l_3562B);
          real r5658#1 = RMul(r5653,r5657);
          tensor[3] es5651#1 = <tensor[3]>[r5654,r5656,r5658];
          goto JOIN5664
        JOIN5664:  preds = [ASSIGN5661,COND564A]
          tensor[3] es5662#7 = phi(es5651,es563A)
          real hh5663#2 = phi(hh564E,hh4E8D)
          tensor[3] v5666#1 = VAdd<3>(pos4E89,step5231);
          tensor[3] _t5665#1 = VAdd<3>(v5666,es5662);
          tensor[3] _t566A#3 = fStep50BF (_t5665);
          tensor[3] fs566C#4 = VScale<3>(sfs4E79,_t566A);
          real op1_e3_l_5566F#1 = VDot<3>(_t566A,_t566A);
          real r5673#1 = RMul(sfs4E79,sfs4E79);
          real op1_e3_l_65672#1 = RMul(r5673,op1_e3_l_5566F);
          real op1_e3_l_75677#1 = VDot<3>(es5662,es5662);
          real op1_e3_l_8567A#1 = RMul(fsEps4E73,tipd4E65);
          real op1_e3_l_9567D#2 = Sqrt(op1_e3_l_75677);
          real op1_e3_l_105680#2 = Sqrt(op1_e3_l_65672);
          real op1_e3_l_115683#1 = RAdd(op1_e3_l_8567A,op1_e3_l_9567D);
          real _t5686#1 = RDiv(op1_e3_l_105680,op1_e3_l_115683);
          real _t5689#3 = 0.5e0;
          bool _t568B#1 = GT<real>(_t5686,_t5689);
          if _t568B then goto ASSIGN5690 else goto JOIN56C1
        ASSIGN5690:  preds = [COND568D]
          real hh568E#2 = RMul(hh5663,_t5689);
          bool _t5691#1 = GT<int>(verb4E77,_t5227);
          if _t5691 then goto JOIN5695 else goto JOIN5695
        JOIN5695:  preds = [COND5693,COND5693]
          bool _t5694#1 = phi(vv4E9D,vv4E9D)
          if _t5694 then goto ASSIGN5698 else goto ASSIGN59ED
        ASSIGN5698:  preds = [COND5696]
          bool _t5697#1 = true;
          goto JOIN569B
        JOIN569B:  preds = [ASSIGN5698,ASSIGN59EE]
          bool _t5699#1 = phi(_t5697,_t569A)
          if _t5699 then goto ASSIGN569E else goto JOIN56B8
        ASSIGN569E:  preds = [COND569C]
          string _t569D#1 = "(i#";
          string _t569F#1 = " @ ";
          string _t56A1#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID4E8B,_t569D,iter4E87,_t569F,pos5234,_t56A1);
          string _t56A4#1 = "nn=";
          string _t56A6#1 = "; |fs|/|es|=";
          real _t56A8#1 = RDiv(op1_e3_l_105680,op1_e3_l_9567D);
          string _t56AB#1 = " > 0.5; trying again with hh=";
          string _t56AD#1 = "; mvmt=";
          string _t56AF#3 = "\n";
          Print<[string,int,string,real,string,real,string,real,string]>(_t56A4,nn52E9,_t56A6,_t56A8,_t56AB,hh568E,_t56AD,mvmt4E95,_t56AF);
          string _t56B2#1 = "        fs=";
          Print<[string,tensor[3],string]>(_t56B2,fs566C,_t56AF);
          string _t56B5#1 = "        es=";
          Print<[string,tensor[3],string]>(_t56B5,es5662,_t56AF);
          goto JOIN56B8
        JOIN56B8:  preds = [MASSIGN56B7,COND569C]
          self.pos = pos5234;
          self._pos = pos5234;
          self.hh = hh568E;
          self.step = step5231;
          self.trav = trav5245;
          self.born = born5627;
          active
          goto JOIN56C1
        JOIN56C1:  preds = [*ACTIVE56BF,COND568D]
          real hh56C0#2 = phi(hh5663)
          tensor[3] v56C3#1 = VAdd<3>(pos4E89,step5231);
          tensor[3] v56C4#1 = VAdd<3>(v56C3,fs566C);
          tensor[3] pos56C2#7 = VAdd<3>(v56C4,es5662);
          point[] _t56C9#1 = SphereQuery<3,point>(pos56C2,rad4E85);
        FOREACH56CC:  preds = [ASSIGN56CA,NEXT5719]
          foreach (P56CB in _t56C9) on exit goto ASSIGN5748
            tensor[3] mno5711#4 = phi(_t4EBC,mno5710)
            real newE570B#6 = phi(_t4EBA,newE570A)
            int nn5717#9 = phi(_t5227,nn5716)
            real closest5205#3 = phi(rad4E85,closest570E)
          tensor[3] _t56CD#1 = P56CB.pos;
          tensor[3] op1_e3_l_1356CF#3 = VSub<3>(_t56CD,pos56C2);
          real op1_e3_l_1556D2#1 = VDot<3>(op1_e3_l_1356CF,op1_e3_l_1356CF);
          real _t56D5#2 = Sqrt(op1_e3_l_1556D2);
          real _t56D8#7 = RDiv(_t56D5,rad4E85);
          real _t56DB#1 = 0.2e1;
          real _t56DD#1 = 0.3e1;
          real _t56DF#2 = RDiv(_t56DB,_t56DD);
          bool _t56E2#1 = LT<real>(_t56D8,_t56DF);
          if _t56E2 then goto ASSIGN56E6 else goto ASSIGN571B
        ASSIGN56E6:  preds = [COND56E4]
          real _t56E5#1 = 0.1e1;
          real _t56E7#1 = -0.5646e1;
          real _t56E9#1 = 0.119835e2;
          real _t56EB#1 = -0.113535e2;
          real _t56ED#1 = 0.40550625e1;
          real op1_e3_l_7856EF#1 = RMul(_t56ED,_t56D8);
          real op1_e3_l_8056F2#1 = RAdd(_t56EB,op1_e3_l_7856EF);
          real op1_e3_l_8156F5#1 = RMul(_t56D8,op1_e3_l_8056F2);
          real op1_e3_l_8356F8#1 = RAdd(_t56E9,op1_e3_l_8156F5);
          real op1_e3_l_8456FB#1 = RMul(_t56D8,op1_e3_l_8356F8);
          real op1_e3_l_8656FE#1 = RAdd(_t56E7,op1_e3_l_8456FB);
          real op1_e3_l_875701#1 = RMul(_t56D8,op1_e3_l_8656FE);
          real _t5704#1 = RAdd(_t56E5,op1_e3_l_875701);
          goto JOIN5709
        JOIN5709:  preds = [ASSIGN5706,JOIN5746]
          real _t5707#1 = phi(_t5704,_t5708)
          real newE570A#1 = RAdd(newE570B,_t5707);
          real closest570E#1 = Min<real>(closest5205,_t56D5);
          tensor[3] mno5710#1 = VAdd<3>(mno5711,op1_e3_l_1356CF);
          int _t5714#1 = 1;
          int nn5716#1 = IAdd(nn5717,_t5714);
          goto FOREACH56CC
        ASSIGN571B:  preds = [COND56E4]
          real _t571A#1 = 0.1e1;
          bool _t571C#1 = LT<real>(_t56D8,_t571A);
          if _t571C then goto ASSIGN5720 else goto JOIN5746
        ASSIGN5720:  preds = [COND571E]
          real _t571F#1 = -0.1e-2;
          real _t5721#1 = 0.9e-1;
          real _t5723#1 = -0.54e0;
          real _t5725#1 = 0.1215e1;
          real _t5727#1 = 0.972e0;
          real op1_e3_l_675729#5 = RSub(_t56D8,_t56DF);
          real op1_e3_l_68572C#1 = RMul(_t5727,op1_e3_l_675729);
          real op1_e3_l_81572F#1 = RSub(_t5725,op1_e3_l_68572C);
          real op1_e3_l_835732#1 = RMul(op1_e3_l_81572F,op1_e3_l_675729);
          real op1_e3_l_965735#1 = RAdd(_t5723,op1_e3_l_835732);
          real op1_e3_l_985738#1 = RMul(op1_e3_l_965735,op1_e3_l_675729);
          real op1_e3_l_123573B#1 = RAdd(_t5721,op1_e3_l_985738);
          real r573F#1 = RMul(op1_e3_l_123573B,op1_e3_l_675729);
          real op1_e3_l_126573E#1 = RMul(r573F,op1_e3_l_675729);
          real _t5743#1 = RAdd(_t571F,op1_e3_l_126573E);
          goto JOIN5746
        JOIN5746:  preds = [ASSIGN5745,COND571E]
          real _t5708#1 = phi(_t5743,_t4EBA)
          goto JOIN5709
        ASSIGN5748:  preds = [FOREACH56CC]
          real _t5747#2 = IntToReal(nn5717);
          bool _t5749#2 = GT<int>(verb4E77,_t5227);
          if _t5749 then goto JOIN574D else goto JOIN574D
        JOIN574D:  preds = [COND574B,COND574B]
          bool _t574C#1 = phi(vv4E9D,vv4E9D)
          if _t574C then goto ASSIGN5750 else goto ASSIGN59EA
        ASSIGN5750:  preds = [COND574E]
          bool _t574F#1 = true;
          goto JOIN5753
        JOIN5753:  preds = [ASSIGN5750,ASSIGN59EB]
          bool _t5751#1 = phi(_t574F,_t5752)
          if _t5751 then goto ASSIGN5756 else goto JOIN5765
        ASSIGN5756:  preds = [COND5754]
          string _t5755#1 = "(i#";
          string _t5757#1 = " @ ";
          string _t5759#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID4E8B,_t5755,iter4E87,_t5757,pos56C2,_t5759);
          string _t575C#1 = "nn=";
          string _t575E#1 = "; oldE=";
          string _t5760#1 = " newE=";
          string _t5762#1 = "\n";
          Print<[string,int,string,real,string,real,string]>(_t575C,nn5717,_t575E,oldE5298,_t5760,newE570B,_t5762);
          goto JOIN5765
        JOIN5765:  preds = [MASSIGN5764,COND5754]
          real _t5766#2 = RSub(newE570B,oldE5298);
          tensor[3] _t5769#2 = VSub<3>(pos56C2,pos5234);
          tensor[3] op1_e3_l_17576C#1 = VNeg<3>(force52E3);
          real op1_e3_l_18576F#2 = VDot<3>(_t5769,op1_e3_l_17576C);
          real _t5772#1 = RMul(gdeTest4E6D,op1_e3_l_18576F);
          bool _t5775#1 = GT<real>(_t5766,_t5772);
          if _t5775 then goto ASSIGN577A else goto JOIN57C7
        ASSIGN577A:  preds = [COND5777]
          real hh5778#3 = RMul(hh56C0,gdeBack4E6F);
          bool _t577B#1 = EQ<real>(_t4EBA,hh5778);
          if _t577B then goto ASSIGN577F else goto JOIN5789
        ASSIGN577F:  preds = [COND577D]
          string _t577E#1 = "(i#";
          string _t5780#1 = " @ ";
          string _t5782#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID4E8B,_t577E,iter4E87,_t5780,pos56C2,_t5782);
          string _t5785#1 = "backtracked all the way to hh=0\n";
          Print<[string]>(_t5785);
          die
          goto JOIN5789
        JOIN5789:  preds = [*DIE5788,COND577D]
          if _t5749 then goto JOIN578C else goto JOIN578C
        JOIN578C:  preds = [COND578A,COND578A]
          bool _t578B#1 = phi(vv4E9D,vv4E9D)
          if _t578B then goto ASSIGN578F else goto ASSIGN59E7
        ASSIGN578F:  preds = [COND578D]
          bool _t578E#1 = true;
          goto JOIN5792
        JOIN5792:  preds = [ASSIGN578F,ASSIGN59E8]
          bool _t5790#1 = phi(_t578E,_t5791)
          if _t5790 then goto ASSIGN5795 else goto JOIN57BD
        ASSIGN5795:  preds = [COND5793]
          string _t5794#1 = "(i#";
          string _t5796#1 = " @ ";
          string _t5798#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID4E8B,_t5794,iter4E87,_t5796,pos56C2,_t5798);
          string _t579B#1 = "nn=";
          string _t579D#1 = "; oldE=";
          string _t579F#1 = " newE=";
          string _t57A1#1 = "; backtracking; hh=";
          string _t57A3#1 = "; mvmt=";
          string _t57A5#7 = "\n";
          Print<[string,int,string,real,string,real,string,real,string,real,string]>(_t579B,nn5717,_t579D,oldE5298,_t579F,newE570B,_t57A1,hh5778,_t57A3,mvmt4E95,_t57A5);
          string _t57A8#1 = "      fs=";
          Print<[string,tensor[3],string]>(_t57A8,fs566C,_t57A5);
          string _t57AB#1 = "      es=";
          Print<[string,tensor[3],string]>(_t57AB,es5662,_t57A5);
          string _t57AE#1 = "      newE - oldE=";
          Print<[string,real,string]>(_t57AE,_t5766,_t57A5);
          string _t57B1#1 = "      force=";
          Print<[string,tensor[3],string]>(_t57B1,force52E3,_t57A5);
          string _t57B4#1 = "      dpos=";
          Print<[string,tensor[3],string]>(_t57B4,_t5769,_t57A5);
          string _t57B7#1 = "      0.5*(pos - oldpos).(-force)=";
          real _t57B9#1 = RMul(_t5689,op1_e3_l_18576F);
          Print<[string,real,string]>(_t57B7,_t57B9,_t57A5);
          goto JOIN57BD
        JOIN57BD:  preds = [MASSIGN57BC,COND5793]
          self.pos = pos5234;
          self._pos = pos5234;
          self.hh = hh5778;
          self.step = step5231;
          self.trav = trav5245;
          self.closest = closest5205;
          self.born = born5627;
          active
          goto JOIN57C7
        JOIN57C7:  preds = [*ACTIVE57C5,COND5777]
          real hh57C6#1 = phi(hh56C0)
          tensor[3] pos5211#8 = phi(pos56C2)
          real hh520F#2 = RMul(hh57C6,gdeOppor4E71);
          tensor[3] v57CA#1 = VAdd<3>(step5231,fs566C);
          tensor[3] step520D#3 = VAdd<3>(v57CA,es5662);
          real op1_e3_l_1257CE#1 = VDot<3>(step520D,step520D);
          real op1_e3_l_1357D1#1 = Sqrt(op1_e3_l_1257CE);
          real _t57D4#4 = RDiv(op1_e3_l_1357D1,tipd4E65);
          real r57D7#1 = RAdd(trav4E93,op1_e3_l_75242);
          real trav5209#1 = RAdd(r57D7,_t57D4);
          real op1_e3_l_2557DB#1 = RSub(mvmt4E95,_t57D4);
          real op1_e3_l_2757DE#1 = RMul(hist4E7B,op1_e3_l_2557DB);
          real mvmt5207#1 = RAdd(_t57D4,op1_e3_l_2757DE);
          bool _t57E3#1 = LT<real>(_t57D4,pcmvEps4E75);
          if _t57E3 then goto ASSIGN57E7 else goto JOIN599D
        ASSIGN57E7:  preds = [COND57E5]
          bool _t57E6#3 = GT<int>(pcp4E7D,_t5227);
          if _t57E6 then goto ASSIGN57EA else goto JOIN57F3
        ASSIGN57EA:  preds = [COND57E8]
          bool _t57E9#1 = GT<int>(iter4E87,_t5227);
          if _t57E9 then goto ASSIGN57ED else goto JOIN57F1
        ASSIGN57ED:  preds = [COND57EB]
          int _t57EC#1 = IMod(iter4E87,pcp4E7D);
          bool _t57EE#1 = EQ<int>(_t5227,_t57EC);
          goto JOIN57F1
        JOIN57F1:  preds = [ASSIGN57EF,COND57EB]
          bool _t57F0#1 = phi(_t57EE,vv4E9D)
          goto JOIN57F3
        JOIN57F3:  preds = [JOIN57F1,COND57E8]
          bool _t57F2#1 = phi(_t57F0,vv4E9D)
          if _t57F2 then goto ASSIGN57F6 else goto JOIN5802
        ASSIGN57F6:  preds = [COND57F4]
          int _t57F5#1 = IDiv(iter4E87,pcp4E7D);
          int _t57F7#2 = 2;
          int _t57F9#1 = IMod(_t57F5,_t57F7);
          int _t57FB#1 = IMul(_t57F9,_t57F7);
          int _t57FD#1 = 1;
          int _t57FF#1 = ISub(_t57FB,_t57FD);
          goto JOIN5802
        JOIN5802:  preds = [ASSIGN5800,COND57F4]
          int _t5801#1 = phi(_t57FF,_t5227)
          bool _t5803#1 = NEQ<int>(_t5801,_t5227);
          if _t5803 then goto COND5806 else goto JOIN599C
        COND5806:  preds = [COND5805]
          if _t57E6 then goto ASSIGN5808 else goto JOIN5811
        ASSIGN5808:  preds = [COND5806]
          bool _t5807#1 = GT<int>(iter4E87,_t5227);
          if _t5807 then goto ASSIGN580B else goto JOIN580F
        ASSIGN580B:  preds = [COND5809]
          int _t580A#1 = IMod(iter4E87,pcp4E7D);
          bool _t580C#1 = EQ<int>(_t5227,_t580A);
          goto JOIN580F
        JOIN580F:  preds = [ASSIGN580D,COND5809]
          bool _t580E#1 = phi(_t580C,vv4E9D)
          goto JOIN5811
        JOIN5811:  preds = [JOIN580F,COND5806]
          bool _t5810#1 = phi(_t580E,vv4E9D)
          if _t5810 then goto ASSIGN5814 else goto JOIN5820
        ASSIGN5814:  preds = [COND5812]
          int _t5813#1 = IDiv(iter4E87,pcp4E7D);
          int _t5815#2 = 2;
          int _t5817#1 = IMod(_t5813,_t5815);
          int _t5819#1 = IMul(_t5817,_t5815);
          int _t581B#1 = 1;
          int _t581D#1 = ISub(_t5819,_t581B);
          goto JOIN5820
        JOIN5820:  preds = [ASSIGN581E,COND5812]
          int _t581F#1 = phi(_t581D,_t5227)
          bool _t5821#1 = GT<int>(_t581F,_t5227);
          if _t5821 then goto ASSIGN5825 else goto JOIN5831
        ASSIGN5825:  preds = [COND5823]
          bool _t5824#1 = LT<real>(newE570B,_t4EBA);
          if _t5824 then goto ASSIGN5828 else goto JOIN582F
        ASSIGN5828:  preds = [COND5826]
          bool _t5827#1 = LT<int>(nn5717,nnmin4E81);
          if _t5827 then goto ASSIGN582B else goto JOIN582D
        ASSIGN582B:  preds = [COND5829]
          bool _t582A#1 = LT<int>(born5627,nnmax4E83);
          goto JOIN582D
        JOIN582D:  preds = [ASSIGN582B,COND5829]
          bool _t582C#1 = phi(_t582A,vv4E9D)
          goto JOIN582F
        JOIN582F:  preds = [JOIN582D,COND5826]
          bool _t582E#1 = phi(_t582C,vv4E9D)
          goto JOIN5831
        JOIN5831:  preds = [JOIN582F,COND5823]
          bool _t5830#1 = phi(_t582E,vv4E9D)
          if _t5830 then goto ASSIGN583D else goto COND599E
        ASSIGN583D:  preds = [COND5832]
          real realLit5834#1 = 0.1e1;
          real r5835#3 = RDiv(realLit5834,_t5747);
          real r5836#1 = TensorIndex<tensor[3],[0]>(mno5711);
          real r5837#1 = RMul(r5835,r5836);
          real r5838#1 = TensorIndex<tensor[3],[1]>(mno5711);
          real r5839#1 = RMul(r5835,r5838);
          real r583A#1 = TensorIndex<tensor[3],[2]>(mno5711);
          real r583B#1 = RMul(r5835,r583A);
          tensor[3] op1_e3_l_65833#5 = <tensor[3]>[r5837,r5839,r583B];
          real op1_e3_l_85846#1 = VDot<3>(op1_e3_l_65833,op1_e3_l_65833);
          real op1_e3_l_95849#1 = Sqrt(op1_e3_l_85846);
          real realLit584D#1 = 0.1e1;
          real op1_e3_l_11584C#3 = RDiv(realLit584D,op1_e3_l_95849);
          real r5852#1 = TensorIndex<tensor[3],[0]>(op1_e3_l_65833);
          real r5853#1 = RMul(tipd4E65,r5852);
          real r5854#1 = RMul(r5853,op1_e3_l_11584C);
          real r5855#1 = TensorIndex<tensor[3],[1]>(op1_e3_l_65833);
          real r5856#1 = RMul(tipd4E65,r5855);
          real r5857#1 = RMul(r5856,op1_e3_l_11584C);
          real r5858#1 = TensorIndex<tensor[3],[2]>(op1_e3_l_65833);
          real r5859#1 = RMul(tipd4E65,r5858);
          real r585A#1 = RMul(r5859,op1_e3_l_11584C);
          tensor[3] op1_e3_l_125851#1 = <tensor[3]>[r5854,r5857,r585A];
          tensor[3] npos5866#3 = VSub<3>(pos5211,op1_e3_l_125851);
          tensor[3] _t5869#1 = fStep50BF (npos5866);
          tensor[3] op1_e3_l_16586B#2 = VScale<3>(sfs4E79,_t5869);
          tensor[3] npos586E#1 = VAdd<3>(npos5866,op1_e3_l_16586B);
          tensor[3] _t5871#1 = fStep50BF (npos586E);
          tensor[3] op1_e3_l_195873#1 = VScale<3>(sfs4E79,_t5871);
          tensor[3] v5877#1 = VAdd<3>(npos5866,op1_e3_l_16586B);
          tensor[3] npos5876#6 = VAdd<3>(v5877,op1_e3_l_195873);
          bool birth587B#4 = true;
          int _t587D#2 = 2;
          bool _t587F#1 = EQ<int>(fDim4E7F,_t587D);
          if _t587F then goto ASSIGN5883 else goto JOIN58B6
        ASSIGN5883:  preds = [COND5881]
          int _t5882#1 = 4;
          bool _t5884#1 = GTE<int>(nn5717,_t5882);
          if _t5884 then goto ASSIGN5889 else goto JOIN58B4
        ASSIGN5889:  preds = [COND5886]
          real _t5887#1 = RMul(tipd4E65,mabd4E67);
          point[] _t588A#1 = SphereQuery<3,point>(npos5876,_t5887);
        FOREACH588D:  preds = [ASSIGN588B,NEXT588E]
          foreach (P588C in _t588A) on exit goto COND5890
            bool birth588F#2 = phi(birth587B,vv4E9D)
          goto FOREACH588D
        COND5890:  preds = [FOREACH588D]
          if birth588F then goto ASSIGN5892 else goto JOIN58B2
        ASSIGN5892:  preds = [COND5890]
          real _t5891#1 = VIndex<3,0>(pos5211);
          real _t5893#1 = urnd4DF7 (_t5891);
          real _t5895#1 = VIndex<3,1>(pos5211);
          real _t5897#1 = urnd4DF7 (_t5895);
          real _t5899#1 = VIndex<3,2>(pos5211);
          real _t589B#1 = urnd4DF7 (_t5899);
          real r589E#1 = RAdd(_t5893,_t5897);
          real _t589D#1 = RAdd(r589E,_t589B);
          real _t58A2#1 = 0.1e1;
          real _t58A4#1 = MathFn<fmod>(_t589D,_t58A2);
          int _t58A6#1 = ISub(nnmin4E81,nn5717);
          real _t58A8#1 = IntToReal(_t58A6);
          real _t58AA#1 = IntToReal(nnmin4E81);
          real _t58AC#1 = RDiv(_t58A8,_t58AA);
          bool birth58AF#1 = LT<real>(_t58A4,_t58AC);
          goto JOIN58B2
        JOIN58B2:  preds = [ASSIGN58B0,COND5890]
          bool birth58B1#1 = phi(birth58AF,birth588F)
          goto JOIN58B4
        JOIN58B4:  preds = [JOIN58B2,COND5886]
          bool birth58B3#1 = phi(birth58B1,birth587B)
          goto JOIN58B6
        JOIN58B6:  preds = [JOIN58B4,COND5881]
          bool birth58B5#1 = phi(birth58B3,birth587B)
          if birth58B5 then goto ASSIGN58BA else goto JOIN5998
        ASSIGN58BA:  preds = [COND58B7]
          tensor[3] op1_e3_l_3358B8#2 = VSub<3>(npos5876,_t4EBC);
          real op1_e3_l_3558BB#1 = VDot<3>(op1_e3_l_3358B8,op1_e3_l_3358B8);
          real _t58BE#2 = Sqrt(op1_e3_l_3558BB);
          bool _t58C1#1 = LT<real>(_t58BE,_t4EC7);
          if _t58C1 then goto ASSIGN58C5 else goto JOIN58C9
        ASSIGN58C5:  preds = [COND58C3]
          real _t58C4#1 = 0.3e1;
          bool _t58C6#1 = GT<real>(_t58BE,_t58C4);
          goto JOIN58C9
        JOIN58C9:  preds = [ASSIGN58C7,COND58C3]
          bool _t58C8#1 = phi(_t58C6,vv4E9D)
          if _t58C8 then goto ASSIGN58CC else goto JOIN598E
        ASSIGN58CC:  preds = [COND58CA]
          real x58CB#6 = VIndex<3,0>(npos5876);
          real y58CD#6 = VIndex<3,1>(npos5876);
          real z58CF#10 = VIndex<3,2>(npos5876);
          real _t58D1#6 = 0.2e1;
          real op1_e3_l_658D3#2 = RMul(x58CB,x58CB);
          real op1_e3_l_758D6#2 = RMul(y58CD,y58CD);
          real op1_e3_l_858D9#8 = RMul(z58CF,z58CF);
          real r58DD#1 = RAdd(op1_e3_l_658D3,op1_e3_l_758D6);
          real op1_e3_l_958DC#2 = RAdd(r58DD,op1_e3_l_858D9);
          real op1_e3_l_1158E1#7 = Cos(op1_e3_l_958DC);
          real r58E5#1 = RMul(_t58D1,x58CB);
          real r58E6#1 = RMul(r58E5,op1_e3_l_858D9);
          real _t58E4#1 = RMul(r58E6,op1_e3_l_1158E1);
          real r58EC#1 = RMul(_t58D1,y58CD);
          real r58ED#1 = RMul(r58EC,op1_e3_l_858D9);
          real _t58EB#1 = RMul(r58ED,op1_e3_l_1158E1);
          real _Pow2_58F3#1 = RMul(z58CF,z58CF);
          real op1_e3_l_1458F2#3 = RMul(z58CF,_Pow2_58F3);
          real op1_e3_l_2058F7#8 = Sin(op1_e3_l_958DC);
          real r58FB#1 = RMul(_t58D1,op1_e3_l_1458F2);
          real op1_e3_l_2158FA#1 = RMul(r58FB,op1_e3_l_1158E1);
          real r5900#1 = RMul(_t58D1,z58CF);
          real op1_e3_l_2258FF#1 = RMul(r5900,op1_e3_l_2058F7);
          real _t5904#1 = RAdd(op1_e3_l_2158FA,op1_e3_l_2258FF);
          tensor[3] g5907#2 = <tensor[3]>[_t58E4,_t58EB,_t5904];
          real _t5909#6 = -0.4e1;
          real r590C#1 = RMul(_t5909,op1_e3_l_658D3);
          real r590D#1 = RMul(r590C,op1_e3_l_858D9);
          real op1_e3_l_24590B#1 = RMul(r590D,op1_e3_l_2058F7);
          real r5913#1 = RMul(_t58D1,op1_e3_l_858D9);
          real op1_e3_l_255912#2 = RMul(r5913,op1_e3_l_1158E1);
          real _t5917#1 = RAdd(op1_e3_l_24590B,op1_e3_l_255912);
          real r591B#1 = RMul(_t5909,x58CB);
          real r591C#1 = RMul(r591B,y58CD);
          real r591D#1 = RMul(r591C,op1_e3_l_858D9);
          real _t591A#2 = RMul(r591D,op1_e3_l_2058F7);
          real r5924#1 = RMul(_t5909,x58CB);
          real r5925#1 = RMul(r5924,op1_e3_l_1458F2);
          real op1_e3_l_235923#1 = RMul(r5925,op1_e3_l_2058F7);
          real r592B#1 = RMul(_t4EC7,x58CB);
          real r592C#1 = RMul(r592B,z58CF);
          real op1_e3_l_24592A#1 = RMul(r592C,op1_e3_l_1158E1);
          real _t5931#2 = RAdd(op1_e3_l_235923,op1_e3_l_24592A);
          tensor[3] _t5934#1 = <tensor[3]>[_t5917,_t591A,_t5931];
          real r5937#1 = RMul(_t5909,op1_e3_l_758D6);
          real r5938#1 = RMul(r5937,op1_e3_l_858D9);
          real op1_e3_l_245936#1 = RMul(r5938,op1_e3_l_2058F7);
          real _t593D#1 = RAdd(op1_e3_l_245936,op1_e3_l_255912);
          real r5941#1 = RMul(_t5909,y58CD);
          real r5942#1 = RMul(r5941,op1_e3_l_1458F2);
          real op1_e3_l_235940#1 = RMul(r5942,op1_e3_l_2058F7);
          real r5948#1 = RMul(_t4EC7,y58CD);
          real r5949#1 = RMul(r5948,z58CF);
          real op1_e3_l_245947#1 = RMul(r5949,op1_e3_l_1158E1);
          real _t594E#2 = RAdd(op1_e3_l_235940,op1_e3_l_245947);
          tensor[3] _t5951#1 = <tensor[3]>[_t591A,_t593D,_t594E];
          real _t5953#1 = 0.1e2;
          real _Pow_25956#2 = RMul(z58CF,z58CF);
          real op1_e3_l_185955#1 = RMul(_Pow_25956,_Pow_25956);
          real r595B#1 = RMul(_t5909,op1_e3_l_185955);
          real op1_e3_l_31595A#1 = RMul(r595B,op1_e3_l_2058F7);
          real r5960#1 = RMul(_t5953,op1_e3_l_858D9);
          real op1_e3_l_32595F#1 = RMul(r5960,op1_e3_l_1158E1);
          real op1_e3_l_335964#1 = RMul(_t58D1,op1_e3_l_2058F7);
          real r5968#1 = RAdd(op1_e3_l_31595A,op1_e3_l_32595F);
          real _t5967#1 = RAdd(r5968,op1_e3_l_335964);
          tensor[3] _t596C#1 = <tensor[3]>[_t5931,_t594E,_t5967];
          tensor[3,3] hess596E#1 = <tensor[3,3]>[_t5934,_t5951,_t596C];
          real[3] _t5970#1 = EigenVals3x3(hess596E);
          real _t5972#1 = Subscript<real[3]>(_t5970,_t587D);
          real op1_e3_l_35974#1 = VDot<3>(g5907,g5907);
          real op1_e3_l_45977#1 = Sqrt(op1_e3_l_35974);
          real op1_e3_l_5597A#1 = RNeg(_t5972);
          real op1_e3_l_6597D#1 = RAdd(fBias4E63,op1_e3_l_45977);
          real str5980#1 = RDiv(op1_e3_l_5597A,op1_e3_l_6597D);
          bool _t5983#1 = GT<real>(str5980,fStrTh4E5F);
          if _t5983 then goto ASSIGN5987 else goto JOIN598C
        ASSIGN5987:  preds = [COND5985]
          bool _t5986#1 = GTE<real>(_t4EBA,fMaskTh4E61);
          if _t5986 then goto JOIN598A else goto JOIN598A
        JOIN598A:  preds = [COND5988,COND5988]
          bool _t5989#1 = phi(birth587B,vv4E9D)
          goto JOIN598C
        JOIN598C:  preds = [JOIN598A,COND5985]
          bool _t598B#1 = phi(_t5989,vv4E9D)
          goto JOIN598E
        JOIN598E:  preds = [JOIN598C,COND58CA]
          bool _t598D#1 = phi(_t598B,vv4E9D)
          if _t598D then goto NEW5990 else goto JOIN5996
        NEW5990:  preds = [COND598F]
          new point(npos5876,hh520F);
          int _t5991#1 = 1;
          int born5993#1 = IAdd(born5627,_t5991);
          goto JOIN5996
        JOIN5996:  preds = [ASSIGN5994,COND598F]
          int born5995#1 = phi(born5993,born5627)
          goto JOIN5998
        JOIN5998:  preds = [JOIN5996,COND58B7]
          int born5997#1 = phi(born5995,born5627)
          goto JOIN599A
        JOIN599A:  preds = [JOIN5998,JOIN59E5]
          int born5999#1 = phi(born5997,born5627)
          goto JOIN599C
        JOIN599C:  preds = [JOIN599A,COND5805]
          int born599B#1 = phi(born5999,born5627)
          goto JOIN599D
        JOIN599D:  preds = [JOIN599C,COND57E5]
          int born5203#1 = phi(born599B,born5627)
          goto JOIN5212
        COND599E:  preds = [COND5832]
          if _t57E6 then goto ASSIGN59A0 else goto JOIN59A9
        ASSIGN59A0:  preds = [COND599E]
          bool _t599F#1 = GT<int>(iter4E87,_t5227);
          if _t599F then goto ASSIGN59A3 else goto JOIN59A7
        ASSIGN59A3:  preds = [COND59A1]
          int _t59A2#1 = IMod(iter4E87,pcp4E7D);
          bool _t59A4#1 = EQ<int>(_t5227,_t59A2);
          goto JOIN59A7
        JOIN59A7:  preds = [ASSIGN59A5,COND59A1]
          bool _t59A6#1 = phi(_t59A4,vv4E9D)
          goto JOIN59A9
        JOIN59A9:  preds = [JOIN59A7,COND599E]
          bool _t59A8#1 = phi(_t59A6,vv4E9D)
          if _t59A8 then goto ASSIGN59AC else goto JOIN59B8
        ASSIGN59AC:  preds = [COND59AA]
          int _t59AB#1 = IDiv(iter4E87,pcp4E7D);
          int _t59AD#2 = 2;
          int _t59AF#1 = IMod(_t59AB,_t59AD);
          int _t59B1#1 = IMul(_t59AF,_t59AD);
          int _t59B3#1 = 1;
          int _t59B5#1 = ISub(_t59B1,_t59B3);
          goto JOIN59B8
        JOIN59B8:  preds = [ASSIGN59B6,COND59AA]
          int _t59B7#1 = phi(_t59B5,_t5227)
          bool _t59B9#1 = LT<int>(_t59B7,_t5227);
          if _t59B9 then goto ASSIGN59BD else goto JOIN59E5
        ASSIGN59BD:  preds = [COND59BB]
          bool _t59BC#1 = GT<real>(newE570B,_t4EBA);
          if _t59BC then goto ASSIGN59C0 else goto JOIN59E4
        ASSIGN59C0:  preds = [COND59BE]
          bool _t59BF#1 = GT<int>(nn5717,nnmax4E83);
          if _t59BF then goto ASSIGN59C3 else goto JOIN59E3
        ASSIGN59C3:  preds = [COND59C1]
          real _t59C2#1 = VIndex<3,0>(pos5211);
          real _t59C4#1 = urnd4DF7 (_t59C2);
          real _t59C6#1 = VIndex<3,1>(pos5211);
          real _t59C8#1 = urnd4DF7 (_t59C6);
          real _t59CA#1 = VIndex<3,2>(pos5211);
          real _t59CC#1 = urnd4DF7 (_t59CA);
          real r59CF#1 = RAdd(_t59C4,_t59C8);
          real _t59CE#1 = RAdd(r59CF,_t59CC);
          real _t59D3#1 = 0.1e1;
          real _t59D5#1 = MathFn<fmod>(_t59CE,_t59D3);
          int _t59D7#1 = ISub(nn5717,nnmax4E83);
          real _t59D9#1 = IntToReal(_t59D7);
          real _t59DB#1 = RDiv(_t59D9,_t5747);
          bool _t59DE#1 = LT<real>(_t59D5,_t59DB);
          if _t59DE then goto DIE59E1 else goto JOIN59E2
        DIE59E1:  preds = [COND59E0]
          die
          goto JOIN59E2
        JOIN59E2:  preds = [*DIE59E1,COND59E0]
          goto JOIN59E3
        JOIN59E3:  preds = [JOIN59E2,COND59C1]
          goto JOIN59E4
        JOIN59E4:  preds = [JOIN59E3,COND59BE]
          goto JOIN59E5
        JOIN59E5:  preds = [JOIN59E4,COND59BB]
          goto JOIN599A
        ASSIGN59E7:  preds = [COND578D]
          int _t59E6#1 = 1;
          bool _t5791#1 = GT<int>(verb4E77,_t59E6);
          goto JOIN5792
        ASSIGN59EA:  preds = [COND574E]
          int _t59E9#1 = 1;
          bool _t5752#1 = GT<int>(verb4E77,_t59E9);
          goto JOIN5753
        ASSIGN59ED:  preds = [COND5696]
          int _t59EC#1 = 1;
          bool _t569A#1 = GT<int>(verb4E77,_t59EC);
          goto JOIN569B
        ASSIGN59F0:  preds = [COND560D]
          int _t59EF#1 = 1;
          bool _t5611#1 = GT<int>(verb4E77,_t59EF);
          goto JOIN5612
        ASSIGN59F3:  preds = [COND54F5]
          int _t59F2#1 = 1;
          bool _t54F9#1 = GT<int>(verb4E77,_t59F2);
          goto JOIN54FA
        ASSIGN59F6:  preds = [COND4FA5]
          int _t59F5#1 = 1;
          bool _t4FA9#1 = GT<int>(verb4E77,_t59F5);
          goto JOIN4FAA
        ASSIGN59F9:  preds = [COND4EA7]
          int _t59F8#1 = 1;
          bool _t4EAB#1 = GT<int>(verb4E77,_t59F8);
          goto JOIN4EAC
    end update
  end point
## initial strand creation
  COLLECTION
    ENTRY59FB:  preds = []
      tensor[3][] ipos59FC#2 = globals.ipos4D51;
      int _t59FE#1 = 0;
      int _t5A00#1 = Length<tensor[3]>(ipos59FC);
      int _t5A02#1 = 1;
      int _t5A04#1 = ISub(_t5A00,_t5A02);
      int[] _t5A06#1 = Range(_t59FE,_t5A04);
    FOREACH5A09:  preds = [ASSIGN5A07,NEXT5A0F]
      foreach (ii5A08 in _t5A06) on exit goto RETURN5A10
      tensor[3] _t5A0A#1 = Subscript<tensor[3][]>(ipos59FC,ii5A08);
      real _t5A0C#1 = 0.1e1;
      new point(_t5A0A,_t5A0C);
      goto FOREACH5A09
    RETURN5A10:  preds = [FOREACH5A09]
      return
## global update
  ENTRY5A11:  preds = []
    real geoEps5A12#3 = globals.geoEps4D48;
    real mvmtEps5A14#3 = globals.mvmtEps4D49;
    real rpcEps5A16#3 = globals.rpcEps4D4A;
    real pchist5A18#1 = globals.pchist4D56;
    int iter5A1A#4 = globals.iter4D57;
    real rpc5A1C#1 = globals.rpc4D58;
    int popLast5A1E#1 = globals.popLast4D59;
    int pop5A20#5 = NumStrands<active>;
    bool _t5A22#1 = NEQ<int>(pop5A20,popLast5A1E);
    if _t5A22 then goto ASSIGN5A26 else goto ASSIGN5AD8
  ASSIGN5A26:  preds = [COND5A24]
    int _t5A25#1 = 1;
    goto JOIN5A29
  JOIN5A29:  preds = [ASSIGN5A26,ASSIGN5AD8]
    int _t5A27#2 = phi(_t5A25,_t5A28)
    real _t5A2A#2 = IntToReal(_t5A27);
    real op1_e3_l_35A2C#1 = RSub(rpc5A1C,_t5A2A);
    real op1_e3_l_45A2F#1 = RMul(pchist5A18,op1_e3_l_35A2C);
    real rpc5A32#5 = RAdd(_t5A2A,op1_e3_l_45A2F);
    globals.rpc4D58 = rpc5A32;
    point[] P5A36#6 = Strands<point,all>;
    (bool res5A3E#1) = all(MAP all5A38 (P5A36));
    real _t5A40#1 = 0.1e3;
    (real res5A4F#1) = sum<real>(MAP mean5A42 (P5A36));
    int num5A51#1 = NumStrands<all>;
    real rNum5A53#5 = IntToReal(num5A51);
    real op1_e3_l_35A55#1 = RDiv(res5A4F,rNum5A53);
    real percfound5A58#1 = RMul(_t5A40,op1_e3_l_35A55);
    (real res5A61#2) = sum<real>(MAP mean5A5B (P5A36));
    real mean5A63#2 = RDiv(res5A61,rNum5A53);
    (real res5A73#1) = sum<real>(MAP mean5A66 (P5A36,mean5A63));
    real op1_e3_l_45A75#1 = RDiv(res5A73,rNum5A53);
    real op1_e3_l_55A78#1 = Sqrt(op1_e3_l_45A75);
    real op1_e3_l_65A7B#1 = RMul(op1_e3_l_55A78,rNum5A53);
    real covcl5A7E#4 = RDiv(op1_e3_l_65A7B,res5A61);
    (real res5A87#4) = max<real>(MAP max5A81 (P5A36));
    string _t5A89#1 = "======= finished iter ";
    string _t5A8B#1 = " w/ ";
    string _t5A8D#3 = ")";
    string _t5A8F#1 = "; %found=";
    string _t5A91#1 = "; mean(hh)=";
    (real res5A99#1) = sum<real>(MAP mean5A93 (P5A36));
    real mean5A9B#1 = RDiv(res5A99,rNum5A53);
    string _t5A9E#1 = "; mean(cl)=";
    string _t5AA0#3 = "; COV(cl)=";
    string _t5AA2#3 = "; max(mvmt)=";
    string _t5AA4#1 = "; pc=";
    string _t5AA6#3 = "; rpc=";
    string _t5AA8#3 = "\n";
    Print<[string,int,string,int,string,string,real,string,real,string,real,string,real,string,real,string,int,string,real,string]>(_t5A89,iter5A1A,_t5A8B,pop5A20,_t5A8D,_t5A8F,percfound5A58,_t5A91,mean5A9B,_t5A9E,mean5A63,_t5AA0,covcl5A7E,_t5AA2,res5A87,_t5AA4,_t5A27,_t5AA6,rpc5A32,_t5AA8);
    if res5A3E then goto ASSIGN5AAD else goto ASSIGN5AD7
  ASSIGN5AAD:  preds = [COND5AAB]
    bool _t5AAC#1 = LT<real>(covcl5A7E,geoEps5A12);
    if _t5AAC then goto ASSIGN5AB0 else goto ASSIGN5AD6
  ASSIGN5AB0:  preds = [COND5AAE]
    bool _t5AAF#1 = LT<real>(res5A87,mvmtEps5A14);
    if _t5AAF then goto ASSIGN5AB3 else goto ASSIGN5AD5
  ASSIGN5AB3:  preds = [COND5AB1]
    bool _t5AB2#1 = LT<real>(rpc5A32,rpcEps5A16);
    goto JOIN5AB6
  JOIN5AB6:  preds = [ASSIGN5AB3,ASSIGN5AD5]
    bool _t5AB4#1 = phi(_t5AB2,_t5AB5)
    goto JOIN5AB9
  JOIN5AB9:  preds = [JOIN5AB6,ASSIGN5AD6]
    bool _t5AB7#1 = phi(_t5AB4,_t5AB8)
    goto JOIN5ABC
  JOIN5ABC:  preds = [JOIN5AB9,ASSIGN5AD7]
    bool _t5ABA#1 = phi(_t5AB7,_t5ABB)
    if _t5ABA then goto ASSIGN5ABF else goto ASSIGN5ACF
  ASSIGN5ABF:  preds = [COND5ABD]
    string _t5ABE#1 = "======= Stabilizing ";
    string _t5AC0#1 = " (iter ";
    string _t5AC2#3 = " < ";
    Print<[string,int,string,int,string,string,real,string,real,string,real,string,real,string,real,string,real,string]>(_t5ABE,pop5A20,_t5AC0,iter5A1A,_t5A8D,_t5AA0,covcl5A7E,_t5AC2,geoEps5A12,_t5AA2,res5A87,_t5AC2,mvmtEps5A14,_t5AA6,rpc5A32,_t5AC2,rpcEps5A16,_t5AA8);
    StabilizeAll;
    goto JOIN5AC6
  JOIN5AC6:  preds = [MASSIGN5AC5,MASSIGN5AD4]
    int _t5AC7#1 = 1;
    int iter5AC9#1 = IAdd(iter5A1A,_t5AC7);
    globals.iter4D57 = iter5AC9;
    globals.popLast4D59 = pop5A20;
    continue
  ASSIGN5ACF:  preds = [COND5ABD]
    string _t5ACE#1 = "======= Stabilizing ";
    string _t5AD0#1 = " (iter ";
    string _t5AD2#3 = " > ";
    Print<[string,int,string,int,string,string,real,string,real,string,real,string,real,string,real,string,real,string]>(_t5ACE,pop5A20,_t5AD0,iter5A1A,_t5A8D,_t5AA0,covcl5A7E,_t5AD2,geoEps5A12,_t5AA2,res5A87,_t5AD2,mvmtEps5A14,_t5AA6,rpc5A32,_t5AD2,rpcEps5A16,_t5AA8);
    goto JOIN5AC6
  ASSIGN5AD5:  preds = [COND5AB1]
    bool _t5AB5#1 = false;
    goto JOIN5AB6
  ASSIGN5AD6:  preds = [COND5AAE]
    bool _t5AB8#1 = false;
    goto JOIN5AB9
  ASSIGN5AD7:  preds = [COND5AAB]
    bool _t5ABB#1 = false;
    goto JOIN5ABC
  ASSIGN5AD8:  preds = [COND5A24]
    int _t5A28#1 = 0;
    goto JOIN5A29
#### end program ####
##### low-ir: after contraction(1) ####
## properties
  GlobalInit StabilizeAll GlobalReduce StrandSets GlobalUpdate NewStrands StrandCommunication StrandsMayDie HasInputs HasGlobals ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
## globals
  input meshData4D3A (meshData) = <no-default>
  input 0space07C6_intermedateGlobal4D3B (space) = <no-default>
  input 0data07C8_intermedateGlobal4D3C (data) = <no-default>
  input fStrTh4D3D (fStrTh) = <no-default>
  input fMaskTh4D3E (fMaskTh) = <default>
  input fBias4D3F (fBias) = <default>
  input tipd4D40 (tipd) = <default>
  input mabd4D41 (mabd) = <default>
  input travMax4D42 (travMax) = <default>
  input nfsMax4D43 (nfsMax) = <default>
  input gdeTest4D44 (gdeTest) = <default>
  input gdeBack4D45 (gdeBack) = <default>
  input gdeOppor4D46 (gdeOppor) = <default>
  input fsEps4D47 (fsEps) = <no-default>
  input geoEps4D48 (geoEps) = <default>
  input mvmtEps4D49 (mvmtEps) = <default>
  input rpcEps4D4A (rpcEps) = <default>
  input pcmvEps4D4B (pcmvEps) = <default>
  input isoval4D4C (isoval) = <default>
  input verb4D4D (verb) = <default>
  input sfs4D4E (sfs) = <default>
  input hist4D4F (hist) = <default>
  input pcp4D50 (pcp) = <default>
  input ipos4D51 (ipos) = <no-default>
  input fDim4D52 (fDim) = <default>
  global int nnmin4D53
  global int nnmax4D54
  global real rad4D55
  global real pchist4D56
  varying global int iter4D57
  varying global real rpc4D58
  varying global int popLast4D59
## functions
  function real urnd4DF7 (real x4DF8#2) {
    ENTRY4DF9:  preds = []
      int iter4DFA#1 = globals.iter4D57;
      real _t4DFC#2 = 0.e0;
      bool _t4DFE#1 = EQ<real>(x4DF8,_t4DFC);
      if _t4DFE then goto RETURN(_t4DFC)4E01 else goto JOIN4E02
    RETURN(_t4DFC)4E01:  preds = [COND4E00]
      return _t4DFC
      goto JOIN4E02
    JOIN4E02:  preds = [*RETURN(_t4DFC)4E01,COND4E00]
      real _t4E03#1 = Abs<real>(x4DF8);
      real l24E06#2 = MathFn<log2>(_t4E03);
      real _t4E08#4 = 0.2e1;
      real _t4E0A#1 = MathFn<floor>(l24E06);
      real _t4E0C#2 = 0.1e1;
      real op1_e3_l_34E0E#1 = RSub(l24E06,_t4E0A);
      real _t4E11#1 = RSub(op1_e3_l_34E0E,_t4E0C);
      real frxp4E14#1 = MathFn<pow>(_t4E08,_t4E11);
      int _t4E16#1 = 2;
      int _t4E18#1 = IMul(_t4E16,iter4DFA);
      real _t4E1A#1 = IntToReal(_t4E18);
      real _Pow_24E1D#2 = RMul(_t4E08,_t4E08);
      real _Pow4_4E1E#1 = RMul(_Pow_24E1D,_Pow_24E1D);
      real _Pow5_4E1F#2 = RMul(_t4E08,_Pow4_4E1E);
      real _Pow10_4E20#2 = RMul(_Pow5_4E1F,_Pow5_4E1F);
      real op1_e3_l_34E1C#1 = RMul(_Pow10_4E20,_Pow10_4E20);
      real op1_e3_l_44E27#1 = RAdd(op1_e3_l_34E1C,_t4E1A);
      real _t4E2A#1 = RMul(frxp4E14,op1_e3_l_44E27);
      real _t4E2D#1 = MathFn<fmod>(_t4E2A,_t4E0C);
      return _t4E2D
}
  function tensor[3] fStep50BF (tensor[3] s50C0#3) {
    ENTRY50C1:  preds = []
      real x50C2#6 = VIndex<3,0>(s50C0);
      real y50C4#6 = VIndex<3,1>(s50C0);
      real z50C6#10 = VIndex<3,2>(s50C0);
      real _t50C8#6 = 0.2e1;
      int _t50CA#2 = 2;
      real op1_e3_l_650CC#2 = RMul(x50C2,x50C2);
      real op1_e3_l_750CF#2 = RMul(y50C4,y50C4);
      real op1_e3_l_850D2#8 = RMul(z50C6,z50C6);
      real r50D6#1 = RAdd(op1_e3_l_650CC,op1_e3_l_750CF);
      real op1_e3_l_950D5#2 = RAdd(r50D6,op1_e3_l_850D2);
      real op1_e3_l_1150DA#7 = Cos(op1_e3_l_950D5);
      real r50DE#1 = RMul(_t50C8,x50C2);
      real r50DF#1 = RMul(r50DE,op1_e3_l_850D2);
      real _t50DD#1 = RMul(r50DF,op1_e3_l_1150DA);
      real r50E5#1 = RMul(_t50C8,y50C4);
      real r50E6#1 = RMul(r50E5,op1_e3_l_850D2);
      real _t50E4#1 = RMul(r50E6,op1_e3_l_1150DA);
      real _Pow2_50EC#1 = RMul(z50C6,z50C6);
      real op1_e3_l_1450EB#3 = RMul(z50C6,_Pow2_50EC);
      real op1_e3_l_2050F0#8 = Sin(op1_e3_l_950D5);
      real r50F4#1 = RMul(_t50C8,op1_e3_l_1450EB);
      real op1_e3_l_2150F3#1 = RMul(r50F4,op1_e3_l_1150DA);
      real r50F9#1 = RMul(_t50C8,z50C6);
      real op1_e3_l_2250F8#1 = RMul(r50F9,op1_e3_l_2050F0);
      real _t50FD#1 = RAdd(op1_e3_l_2150F3,op1_e3_l_2250F8);
      tensor[3] g5100#1 = <tensor[3]>[_t50DD,_t50E4,_t50FD];
      real _t5102#6 = -0.4e1;
      real r5105#1 = RMul(_t5102,op1_e3_l_650CC);
      real r5106#1 = RMul(r5105,op1_e3_l_850D2);
      real op1_e3_l_245104#1 = RMul(r5106,op1_e3_l_2050F0);
      real r510C#1 = RMul(_t50C8,op1_e3_l_850D2);
      real op1_e3_l_25510B#2 = RMul(r510C,op1_e3_l_1150DA);
      real _t5110#1 = RAdd(op1_e3_l_245104,op1_e3_l_25510B);
      real r5114#1 = RMul(_t5102,x50C2);
      real r5115#1 = RMul(r5114,y50C4);
      real r5116#1 = RMul(r5115,op1_e3_l_850D2);
      real _t5113#2 = RMul(r5116,op1_e3_l_2050F0);
      real _t511C#2 = 0.4e1;
      real r511F#1 = RMul(_t5102,x50C2);
      real r5120#1 = RMul(r511F,op1_e3_l_1450EB);
      real op1_e3_l_23511E#1 = RMul(r5120,op1_e3_l_2050F0);
      real r5126#1 = RMul(_t511C,x50C2);
      real r5127#1 = RMul(r5126,z50C6);
      real op1_e3_l_245125#1 = RMul(r5127,op1_e3_l_1150DA);
      real _t512C#2 = RAdd(op1_e3_l_23511E,op1_e3_l_245125);
      tensor[3] _t512F#1 = <tensor[3]>[_t5110,_t5113,_t512C];
      real r5132#1 = RMul(_t5102,op1_e3_l_750CF);
      real r5133#1 = RMul(r5132,op1_e3_l_850D2);
      real op1_e3_l_245131#1 = RMul(r5133,op1_e3_l_2050F0);
      real _t5138#1 = RAdd(op1_e3_l_245131,op1_e3_l_25510B);
      real r513C#1 = RMul(_t5102,y50C4);
      real r513D#1 = RMul(r513C,op1_e3_l_1450EB);
      real op1_e3_l_23513B#1 = RMul(r513D,op1_e3_l_2050F0);
      real r5143#1 = RMul(_t511C,y50C4);
      real r5144#1 = RMul(r5143,z50C6);
      real op1_e3_l_245142#1 = RMul(r5144,op1_e3_l_1150DA);
      real _t5149#2 = RAdd(op1_e3_l_23513B,op1_e3_l_245142);
      tensor[3] _t514C#1 = <tensor[3]>[_t5113,_t5138,_t5149];
      real _t514E#1 = 0.1e2;
      real _Pow_25151#2 = RMul(z50C6,z50C6);
      real op1_e3_l_185150#1 = RMul(_Pow_25151,_Pow_25151);
      real r5156#1 = RMul(_t5102,op1_e3_l_185150);
      real op1_e3_l_315155#1 = RMul(r5156,op1_e3_l_2050F0);
      real r515B#1 = RMul(_t514E,op1_e3_l_850D2);
      real op1_e3_l_32515A#1 = RMul(r515B,op1_e3_l_1150DA);
      real op1_e3_l_33515F#1 = RMul(_t50C8,op1_e3_l_2050F0);
      real r5163#1 = RAdd(op1_e3_l_315155,op1_e3_l_32515A);
      real _t5162#1 = RAdd(r5163,op1_e3_l_33515F);
      tensor[3] _t5167#1 = <tensor[3]>[_t512C,_t5149,_t5162];
      tensor[3,3] hess5169#1 = <tensor[3,3]>[_t512F,_t514C,_t5167];
      (real[3] evals516B#1,tensor[3][3] E516C#1) = EigenVecs3x3(hess5169);
      real _t516E#1 = 0.1e1;
      real _t5170#1 = Subscript<real[3]>(evals516B,_t50CA);
      tensor[3] _t5172#4 = Subscript<tensor[3][3]>(E516C,_t50CA);
      real op1_e3_l_55174#1 = RDiv(_t516E,_t5170);
      real op1_e3_l_65177#3 = RNeg(op1_e3_l_55174);
      real op1_e3_l_7517A#3 = VDot<3>(_t5172,g5100);
      real r517E#1 = TensorIndex<tensor[3],[0]>(_t5172);
      real r517F#1 = RMul(op1_e3_l_65177,r517E);
      real r5180#1 = RMul(r517F,op1_e3_l_7517A);
      real r5181#1 = TensorIndex<tensor[3],[1]>(_t5172);
      real r5182#1 = RMul(op1_e3_l_65177,r5181);
      real r5183#1 = RMul(r5182,op1_e3_l_7517A);
      real r5184#1 = TensorIndex<tensor[3],[2]>(_t5172);
      real r5185#1 = RMul(op1_e3_l_65177,r5184);
      real r5186#1 = RMul(r5185,op1_e3_l_7517A);
      tensor[3] up517D#4 = <tensor[3]>[r5180,r5183,r5186];
      real _t5192#2 = VIndex<3,0>(up517D);
      bool _t5194#1 = EQ<real>(_t5192,_t5192);
      bool _t5196#1 = BNot(_t5194);
      if _t5196 then goto ASSIGN519A else goto ASSIGN51A7
    ASSIGN519A:  preds = [COND5198]
      bool _t5199#1 = true;
      goto JOIN519D
    JOIN519D:  preds = [ASSIGN519A,JOIN51B0]
      bool _t519B#1 = phi(_t5199,_t519C)
      if _t519B then goto ASSIGN51A0 else goto JOIN51A4
    ASSIGN51A0:  preds = [COND519E]
      real _t519F#3 = +inf;
      tensor[3] _t51A1#1 = <tensor[3]>[_t519F,_t519F,_t519F];
      return _t51A1
      goto JOIN51A4
    JOIN51A4:  preds = [*RETURN(_t51A1)51A3,COND519E]
      return up517D
    ASSIGN51A7:  preds = [COND5198]
      real _t51A6#2 = VIndex<3,1>(up517D);
      bool _t51A8#1 = EQ<real>(_t51A6,_t51A6);
      bool _t51AA#1 = BNot(_t51A8);
      if _t51AA then goto ASSIGN51AE else goto ASSIGN51B2
    ASSIGN51AE:  preds = [COND51AC]
      bool _t51AD#1 = true;
      goto JOIN51B0
    JOIN51B0:  preds = [ASSIGN51AE,ASSIGN51B5]
      bool _t519C#1 = phi(_t51AD,_t51AF)
      goto JOIN519D
    ASSIGN51B2:  preds = [COND51AC]
      real _t51B1#2 = VIndex<3,2>(up517D);
      bool _t51B3#1 = EQ<real>(_t51B1,_t51B1);
      bool _t51AF#1 = BNot(_t51B3);
      goto JOIN51B0
}
  function tensor[3,3] fPerp5375 (tensor[3] s5376#3) {
    ENTRY5377:  preds = []
      real x5378#5 = VIndex<3,0>(s5376);
      real y537A#5 = VIndex<3,1>(s5376);
      real z537C#9 = VIndex<3,2>(s5376);
      real _t537E#2 = 0.2e1;
      int _t5380#1 = 2;
      real _t5382#6 = -0.4e1;
      real op1_e3_l_115384#2 = RMul(x5378,x5378);
      real op1_e3_l_125387#2 = RMul(y537A,y537A);
      real op1_e3_l_13538A#6 = RMul(z537C,z537C);
      real r538E#1 = RAdd(op1_e3_l_115384,op1_e3_l_125387);
      real op1_e3_l_14538D#2 = RAdd(r538E,op1_e3_l_13538A);
      real op1_e3_l_175392#7 = Sin(op1_e3_l_14538D);
      real op1_e3_l_235395#4 = Cos(op1_e3_l_14538D);
      real r5399#1 = RMul(_t5382,op1_e3_l_115384);
      real r539A#1 = RMul(r5399,op1_e3_l_13538A);
      real op1_e3_l_245398#1 = RMul(r539A,op1_e3_l_175392);
      real r53A0#1 = RMul(_t537E,op1_e3_l_13538A);
      real op1_e3_l_25539F#2 = RMul(r53A0,op1_e3_l_235395);
      real _t53A4#1 = RAdd(op1_e3_l_245398,op1_e3_l_25539F);
      real r53A8#1 = RMul(_t5382,x5378);
      real r53A9#1 = RMul(r53A8,y537A);
      real r53AA#1 = RMul(r53A9,op1_e3_l_13538A);
      real _t53A7#2 = RMul(r53AA,op1_e3_l_175392);
      real _t53B0#2 = 0.4e1;
      real _Pow2_53B3#1 = RMul(z537C,z537C);
      real op1_e3_l_1653B2#2 = RMul(z537C,_Pow2_53B3);
      real r53B8#1 = RMul(_t5382,x5378);
      real r53B9#1 = RMul(r53B8,op1_e3_l_1653B2);
      real op1_e3_l_2353B7#1 = RMul(r53B9,op1_e3_l_175392);
      real r53BF#1 = RMul(_t53B0,x5378);
      real r53C0#1 = RMul(r53BF,z537C);
      real op1_e3_l_2453BE#1 = RMul(r53C0,op1_e3_l_235395);
      real _t53C5#2 = RAdd(op1_e3_l_2353B7,op1_e3_l_2453BE);
      tensor[3] _t53C8#1 = <tensor[3]>[_t53A4,_t53A7,_t53C5];
      real r53CB#1 = RMul(_t5382,op1_e3_l_125387);
      real r53CC#1 = RMul(r53CB,op1_e3_l_13538A);
      real op1_e3_l_2453CA#1 = RMul(r53CC,op1_e3_l_175392);
      real _t53D1#1 = RAdd(op1_e3_l_2453CA,op1_e3_l_25539F);
      real r53D5#1 = RMul(_t5382,y537A);
      real r53D6#1 = RMul(r53D5,op1_e3_l_1653B2);
      real op1_e3_l_2353D4#1 = RMul(r53D6,op1_e3_l_175392);
      real r53DC#1 = RMul(_t53B0,y537A);
      real r53DD#1 = RMul(r53DC,z537C);
      real op1_e3_l_2453DB#1 = RMul(r53DD,op1_e3_l_235395);
      real _t53E2#2 = RAdd(op1_e3_l_2353D4,op1_e3_l_2453DB);
      tensor[3] _t53E5#1 = <tensor[3]>[_t53A7,_t53D1,_t53E2];
      real _t53E7#1 = 0.1e2;
      real _Pow_253EA#2 = RMul(z537C,z537C);
      real op1_e3_l_1853E9#1 = RMul(_Pow_253EA,_Pow_253EA);
      real r53EF#1 = RMul(_t5382,op1_e3_l_1853E9);
      real op1_e3_l_3153EE#1 = RMul(r53EF,op1_e3_l_175392);
      real r53F4#1 = RMul(_t53E7,op1_e3_l_13538A);
      real op1_e3_l_3253F3#1 = RMul(r53F4,op1_e3_l_235395);
      real op1_e3_l_3353F8#1 = RMul(_t537E,op1_e3_l_175392);
      real r53FC#1 = RAdd(op1_e3_l_3153EE,op1_e3_l_3253F3);
      real _t53FB#1 = RAdd(r53FC,op1_e3_l_3353F8);
      tensor[3] _t5400#1 = <tensor[3]>[_t53C5,_t53E2,_t53FB];
      tensor[3,3] hess5402#1 = <tensor[3,3]>[_t53C8,_t53E5,_t5400];
      (real[3] evals5404#0,tensor[3][3] _t5405#1) = EigenVecs3x3(hess5402);
      tensor[3] E25407#6 = Subscript<tensor[3][3]>(_t5405,_t5380);
      real r540A#1 = TensorIndex<tensor[3],[0]>(E25407);
      tensor[3] binopV540B#3 = VScale<3>(r540A,E25407);
      real r540C#1 = TensorIndex<tensor[3],[1]>(E25407);
      tensor[3] binopV540D#3 = VScale<3>(r540C,E25407);
      real r540E#1 = TensorIndex<tensor[3],[2]>(E25407);
      tensor[3] binopV540F#3 = VScale<3>(r540E,E25407);
      real realLit5419#3 = 0.1e1;
      real r541A#1 = VIndex<3,0>(binopV540B);
      real r541B#1 = RSub(realLit5419,r541A);
      real realLit541C#6 = 0.e0;
      real r541D#1 = VIndex<3,1>(binopV540B);
      real r541E#1 = RSub(realLit541C,r541D);
      real r541F#1 = VIndex<3,2>(binopV540B);
      real r5420#1 = RSub(realLit541C,r541F);
      tensor[3] tensor5421#2 = <tensor[3]>[r541B,r541E,r5420];
      real r5422#1 = VIndex<3,0>(binopV540D);
      real r5423#1 = RSub(realLit541C,r5422);
      real r5424#1 = VIndex<3,1>(binopV540D);
      real r5425#1 = RSub(realLit5419,r5424);
      real r5426#1 = VIndex<3,2>(binopV540D);
      real r5427#1 = RSub(realLit541C,r5426);
      tensor[3] tensor5428#2 = <tensor[3]>[r5423,r5425,r5427];
      real r5429#1 = VIndex<3,0>(binopV540F);
      real r542A#1 = RSub(realLit541C,r5429);
      real r542B#1 = VIndex<3,1>(binopV540F);
      real r542C#1 = RSub(realLit541C,r542B);
      real r542D#1 = VIndex<3,2>(binopV540F);
      real r542E#1 = RSub(realLit5419,r542D);
      tensor[3] tensor542F#2 = <tensor[3]>[r542A,r542C,r542E];
      tensor[3,3] m5418#1 = <tensor[3,3]>[tensor5421,tensor5428,tensor542F];
      tensor[3] projParam544A#2 = tensor5421;
      real vdot544B#1 = VDot<3>(projParam544A,projParam544A);
      tensor[3] projParam544C#2 = tensor5428;
      real vdot544D#1 = VDot<3>(projParam544C,projParam544C);
      real r544E#1 = RAdd(vdot544B,vdot544D);
      tensor[3] projParam544F#2 = tensor542F;
      real vdot5450#1 = VDot<3>(projParam544F,projParam544F);
      real t5449#2 = RAdd(r544E,vdot5450);
      bool _t545A#1 = EQ<real>(t5449,t5449);
      bool _t545C#1 = BNot(_t545A);
      if _t545C then goto ASSIGN5463 else goto JOIN5467
    ASSIGN5463:  preds = [COND545E]
      real realLit5460#3 = 0.e0;
      tensor[3] tensor5461#3 = <tensor[3]>[realLit5460,realLit5460,realLit5460];
      tensor[3,3] _t545F#1 = <tensor[3,3]>[tensor5461,tensor5461,tensor5461];
      return _t545F
      goto JOIN5467
    JOIN5467:  preds = [*RETURN(_t545F)5466,COND545E]
      return m5418
}
  function bool all5A38 (point P5A39#1) {
    ENTRY5A3A:  preds = []
      bool _t5A3B#1 = P5A39.found;
      return _t5A3B
}
  function real mean5A42 (point P5A43#1) {
    ENTRY5A44:  preds = []
      bool _t5A45#1 = P5A43.found;
      if _t5A45 then goto ASSIGN5A49 else goto ASSIGN5A4E
    ASSIGN5A49:  preds = [COND5A47]
      real _t5A48#1 = 0.1e1;
      goto JOIN5A4C
    JOIN5A4C:  preds = [ASSIGN5A49,ASSIGN5A4E]
      real _t5A4A#1 = phi(_t5A48,_t5A4B)
      return _t5A4A
    ASSIGN5A4E:  preds = [COND5A47]
      real _t5A4B#1 = 0.e0;
      goto JOIN5A4C
}
  function real mean5A5B (point P5A5C#1) {
    ENTRY5A5D:  preds = []
      real _t5A5E#1 = P5A5C.closest;
      return _t5A5E
}
  function real mean5A66 (point P5A67#1, real meancl5A68#1) {
    ENTRY5A69:  preds = []
      real _t5A6A#1 = P5A67.closest;
      real op1_e3_l_25A6C#2 = RSub(_t5A6A,meancl5A68);
      real _t5A6F#1 = RMul(op1_e3_l_25A6C,op1_e3_l_25A6C);
      return _t5A6F
}
  function real max5A81 (point P5A82#1) {
    ENTRY5A83:  preds = []
      real _t5A84#1 = P5A82.mvmt;
      return _t5A84
}
  function real mean5A93 (point P5A94#1) {
    ENTRY5A95:  preds = []
      real _t5A96#1 = P5A94.hh;
      return _t5A96
}
## input initialization
  ENTRY4D5A:  preds = []
    real fMaskTh4D5B#3 = 0.e0;
    globals.fMaskTh4D3E = fMaskTh4D5B;
    globals.fBias4D3F = fMaskTh4D5B;
    real tipd4D5F#1 = 0.1e1;
    globals.tipd4D40 = tipd4D5F;
    real mabd4D62#1 = 0.75e0;
    globals.mabd4D41 = mabd4D62;
    real travMax4D65#1 = 0.1e2;
    globals.travMax4D42 = travMax4D65;
    int nfsMax4D68#1 = 20;
    globals.nfsMax4D43 = nfsMax4D68;
    real gdeTest4D6B#4 = 0.5e0;
    globals.gdeTest4D44 = gdeTest4D6B;
    globals.gdeBack4D45 = gdeTest4D6B;
    real gdeOppor4D6F#1 = 0.12e1;
    globals.gdeOppor4D46 = gdeOppor4D6F;
    real geoEps4D72#1 = 0.1e0;
    globals.geoEps4D48 = geoEps4D72;
    real mvmtEps4D75#2 = 0.1e-1;
    globals.mvmtEps4D49 = mvmtEps4D75;
    globals.rpcEps4D4A = mvmtEps4D75;
    real pcmvEps4D79#1 = 0.3e0;
    globals.pcmvEps4D4B = pcmvEps4D79;
    globals.isoval4D4C = fMaskTh4D5B;
    int verb4D7D#1 = 0;
    globals.verb4D4D = verb4D7D;
    globals.sfs4D4E = gdeTest4D6B;
    globals.hist4D4F = gdeTest4D6B;
    int pcp4D82#1 = 5;
    globals.pcp4D50 = pcp4D82;
    int fDim4D85#1 = 2;
    globals.fDim4D52 = fDim4D85;
    return
## global-variable initialization
  ENTRY4D89:  preds = []
    femData:Mesh meshData4D8A#2 = globals.meshData4D3A;
    real tipd4D8C#1 = globals.tipd4D40;
    real hist4D8E#1 = globals.hist4D4F;
    int pcp4D90#1 = globals.pcp4D50;
    int fDim4D92#3 = globals.fDim4D52;
    int _t4D94#4 = 0;
    int _t4D96#3 = 1;
    int _t4D98#1 = ExtractFemItem<int,NumCell(Mesh)>(meshData4D8A);
    int _t4D9A#1 = ISub(_t4D98,_t4D96);
    int[] _t4D9C#1 = Range(_t4D94,_t4D9A);
    femData:MeshCell[] _t4D9E#1 = <femData:MeshCell[]>{};
  FOREACH4DA1:  preds = [ASSIGN4D9F,NEXT4DA7]
    foreach (_t4DA0 in _t4D9C) on exit goto ASSIGN4DA9
      femData:MeshCell[] _t4DA5#1 = phi(_t4D9E,_t4DA4)
    femData:MeshCell _t4DA2#1 = LoadFem<femData:MeshCell>(meshData4D8A,_t4DA0);
    femData:MeshCell[] _t4DA4#1 = Append<femData:MeshCell>(_t4DA5,_t4DA2);
    goto FOREACH4DA1
  ASSIGN4DA9:  preds = [FOREACH4DA1]
    int _t4DA8#3 = 2;
    bool _t4DAA#2 = EQ<int>(_t4DA8,fDim4D92);
    if _t4DAA then goto ASSIGN4DAE else goto ASSIGN4DDE
  ASSIGN4DAE:  preds = [COND4DAC]
    int _t4DAD#1 = 6;
    goto JOIN4DB1
  JOIN4DB1:  preds = [ASSIGN4DAE,JOIN4DE0]
    int _t4DAF#1 = phi(_t4DAD,_t4DB0)
    globals.nnmin4D53 = _t4DAF;
    if _t4DAA then goto ASSIGN4DB5 else goto ASSIGN4DD8
  ASSIGN4DB5:  preds = [COND4DB3]
    int _t4DB4#1 = 8;
    goto JOIN4DB8
  JOIN4DB8:  preds = [ASSIGN4DB5,JOIN4DDC]
    int _t4DB6#1 = phi(_t4DB4,_t4DB7)
    globals.nnmax4D54 = _t4DB6;
    real _t4DBA#1 = 0.2e1;
    real _t4DBC#1 = 0.3e1;
    real op1_e3_l_34DBE#1 = RMul(tipd4D8C,_t4DBC);
    real rad4DC1#1 = RDiv(op1_e3_l_34DBE,_t4DBA);
    globals.rad4D55 = rad4DC1;
    real _t4DC5#2 = 0.1e1;
    int _t4DC7#1 = IMul(_t4DA8,pcp4D90);
    real _t4DC9#1 = IntToReal(_t4DC7);
    real _t4DCB#1 = RDiv(_t4DC5,_t4DC9);
    real pchist4DCE#1 = MathFn<pow>(hist4D8E,_t4DCB);
    globals.pchist4D56 = pchist4DCE;
    globals.iter4D57 = _t4D94;
    globals.rpc4D58 = _t4DC5;
    int popLast4DD3#1 = -1;
    globals.popLast4D59 = popLast4DD3;
    return
  ASSIGN4DD8:  preds = [COND4DB3]
    bool _t4DD7#1 = EQ<int>(_t4D96,fDim4D92);
    if _t4DD7 then goto ASSIGN4DDB else goto JOIN4DDC
  ASSIGN4DDB:  preds = [COND4DD9]
    int _t4DDA#1 = 3;
    goto JOIN4DDC
  JOIN4DDC:  preds = [ASSIGN4DDB,COND4DD9]
    int _t4DB7#1 = phi(_t4DDA,_t4D94)
    goto JOIN4DB8
  ASSIGN4DDE:  preds = [COND4DAC]
    bool _t4DDD#1 = EQ<int>(_t4D96,fDim4D92);
    if _t4DDD then goto JOIN4DE0 else goto JOIN4DE0
  JOIN4DE0:  preds = [COND4DDF,COND4DDF]
    int _t4DB0#1 = phi(_t4DA8,_t4D94)
    goto JOIN4DB1
## strand
  strand point (tensor[3] p04DE1#5, real hh04DE2#1) in 3D
    state:
      output tensor[3] pos;
      output tensor[3] _pos;
      real ID;
      real hh;
      tensor[3] step;
      bool found;
      int nfs;
      real trav;
      real mvmt;
      real closest;
      int born;
      bool first;
    state init
      ENTRY4DEF:  preds = []
        real rad4DF0#1 = globals.rad4D55;
        real _t4DF2#1 = 0.1e7;
        real _t4DF4#1 = VIndex<3,0>(p04DE1);
        real _t4DF6#1 = urnd4DF7 (_t4DF4);
        real _t4E31#1 = VIndex<3,1>(p04DE1);
        real _t4E33#1 = urnd4DF7 (_t4E31);
        real _t4E35#1 = VIndex<3,2>(p04DE1);
        real _t4E37#1 = urnd4DF7 (_t4E35);
        real r4E3A#1 = RAdd(_t4DF6,_t4E33);
        real _t4E39#1 = RAdd(r4E3A,_t4E37);
        real _t4E3E#2 = 0.1e1;
        real _t4E40#1 = MathFn<fmod>(_t4E39,_t4E3E);
        real _t4E42#1 = RMul(_t4DF2,_t4E40);
        real _t4E45#1 = MathFn<floor>(_t4E42);
        real _t4E47#4 = 0.e0;
        tensor[3] step4E49#1 = <tensor[3]>[_t4E47,_t4E47,_t4E47];
        bool found4E4B#1 = false;
        int nfs4E4D#2 = 0;
        bool first4E4F#1 = true;
        self.pos = p04DE1;
        self._pos = p04DE1;
        self.ID = _t4E45;
        self.hh = hh04DE2;
        self.step = step4E49;
        self.found = found4E4B;
        self.nfs = nfs4E4D;
        self.trav = _t4E47;
        self.mvmt = _t4E3E;
        self.closest = rad4DF0;
        self.born = nfs4E4D;
        self.first = first4E4F;
        return
    end state init
    method update
        ENTRY4E5E:  preds = []
          real fStrTh4E5F#4 = globals.fStrTh4D3D;
          real fMaskTh4E61#4 = globals.fMaskTh4D3E;
          real fBias4E63#4 = globals.fBias4D3F;
          real tipd4E65#17 = globals.tipd4D40;
          real mabd4E67#1 = globals.mabd4D41;
          real travMax4E69#3 = globals.travMax4D42;
          int nfsMax4E6B#3 = globals.nfsMax4D43;
          real gdeTest4E6D#1 = globals.gdeTest4D44;
          real gdeBack4E6F#1 = globals.gdeBack4D45;
          real gdeOppor4E71#1 = globals.gdeOppor4D46;
          real fsEps4E73#3 = globals.fsEps4D47;
          real pcmvEps4E75#1 = globals.pcmvEps4D4B;
          int verb4E77#16 = globals.verb4D4D;
          real sfs4E79#12 = globals.sfs4D4E;
          real hist4E7B#2 = globals.hist4D4F;
          int pcp4E7D#10 = globals.pcp4D50;
          int fDim4E7F#2 = globals.fDim4D52;
          int nnmin4E81#3 = globals.nnmin4D53;
          int nnmax4E83#4 = globals.nnmax4D54;
          real rad4E85#6 = globals.rad4D55;
          int iter4E87#22 = globals.iter4D57;
          tensor[3] pos4E89#19 = self.pos;
          real ID4E8B#11 = self.ID;
          real hh4E8D#8 = self.hh;
          bool found4E8F#3 = self.found;
          int nfs4E91#5 = self.nfs;
          real trav4E93#5 = self.trav;
          real mvmt4E95#5 = self.mvmt;
          real closest4E97#1 = self.closest;
          int born4E99#5 = self.born;
          bool first4E9B#1 = self.first;
          bool vv4E9D#45 = false;
          if first4E9B then goto ASSIGN4EA1 else goto JOIN4EB9
        ASSIGN4EA1:  preds = [COND4E9F]
          int _t4EA0#1 = 0;
          bool _t4EA2#1 = GT<int>(verb4E77,_t4EA0);
          if _t4EA2 then goto JOIN4EA6 else goto JOIN4EA6
        JOIN4EA6:  preds = [COND4EA4,COND4EA4]
          bool _t4EA5#1 = phi(vv4E9D,vv4E9D)
          if _t4EA5 then goto ASSIGN4EA9 else goto ASSIGN59F9
        ASSIGN4EA9:  preds = [COND4EA7]
          bool _t4EA8#1 = true;
          goto JOIN4EAC
        JOIN4EAC:  preds = [ASSIGN4EA9,ASSIGN59FA]
          bool _t4EAA#1 = phi(_t4EA8,_t4EAB)
          if _t4EAA then goto ASSIGN4EAF else goto JOIN4EB8
        ASSIGN4EAF:  preds = [COND4EAD]
          string _t4EAE#1 = "(i#";
          string _t4EB0#1 = " @ ";
          string _t4EB2#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID4E8B,_t4EAE,iter4E87,_t4EB0,pos4E89,_t4EB2);
          string _t4EB5#1 = " HELLO!\n";
          Print<[string]>(_t4EB5);
          goto JOIN4EB8
        JOIN4EB8:  preds = [MASSIGN4EB7,COND4EAD]
          goto JOIN4EB9
        JOIN4EB9:  preds = [JOIN4EB8,COND4E9F]
          real _t4EBA#23 = 0.e0;
          tensor[3] _t4EBC#5 = <tensor[3]>[_t4EBA,_t4EBA,_t4EBA];
          tensor[3] op1_e3_l_24EBE#2 = VSub<3>(pos4E89,_t4EBC);
          real op1_e3_l_44EC1#1 = VDot<3>(op1_e3_l_24EBE,op1_e3_l_24EBE);
          real _t4EC4#3 = Sqrt(op1_e3_l_44EC1);
          real _t4EC7#11 = 0.4e1;
          bool _t4EC9#2 = LT<real>(_t4EC4,_t4EC7);
          if _t4EC9 then goto ASSIGN4ECD else goto JOIN4ED1
        ASSIGN4ECD:  preds = [COND4ECB]
          real _t4ECC#1 = 0.3e1;
          bool _t4ECE#1 = GT<real>(_t4EC4,_t4ECC);
          goto JOIN4ED1
        JOIN4ED1:  preds = [ASSIGN4ECF,COND4ECB]
          bool _t4ED0#1 = phi(_t4ECE,vv4E9D)
          if _t4ED0 then goto ASSIGN4ED4 else goto JOIN4F9A
        ASSIGN4ED4:  preds = [COND4ED2]
          real x4ED3#6 = VIndex<3,0>(pos4E89);
          real y4ED5#6 = VIndex<3,1>(pos4E89);
          real z4ED7#10 = VIndex<3,2>(pos4E89);
          real _t4ED9#6 = 0.2e1;
          int _t4EDB#1 = 2;
          real op1_e3_l_64EDD#2 = RMul(x4ED3,x4ED3);
          real op1_e3_l_74EE0#2 = RMul(y4ED5,y4ED5);
          real op1_e3_l_84EE3#8 = RMul(z4ED7,z4ED7);
          real r4EE7#1 = RAdd(op1_e3_l_64EDD,op1_e3_l_74EE0);
          real op1_e3_l_94EE6#2 = RAdd(r4EE7,op1_e3_l_84EE3);
          real op1_e3_l_114EEB#7 = Cos(op1_e3_l_94EE6);
          real r4EEF#1 = RMul(_t4ED9,x4ED3);
          real r4EF0#1 = RMul(r4EEF,op1_e3_l_84EE3);
          real _t4EEE#1 = RMul(r4EF0,op1_e3_l_114EEB);
          real r4EF6#1 = RMul(_t4ED9,y4ED5);
          real r4EF7#1 = RMul(r4EF6,op1_e3_l_84EE3);
          real _t4EF5#1 = RMul(r4EF7,op1_e3_l_114EEB);
          real _Pow2_4EFD#1 = RMul(z4ED7,z4ED7);
          real op1_e3_l_144EFC#3 = RMul(z4ED7,_Pow2_4EFD);
          real op1_e3_l_204F01#8 = Sin(op1_e3_l_94EE6);
          real r4F05#1 = RMul(_t4ED9,op1_e3_l_144EFC);
          real op1_e3_l_214F04#1 = RMul(r4F05,op1_e3_l_114EEB);
          real r4F0A#1 = RMul(_t4ED9,z4ED7);
          real op1_e3_l_224F09#1 = RMul(r4F0A,op1_e3_l_204F01);
          real _t4F0E#1 = RAdd(op1_e3_l_214F04,op1_e3_l_224F09);
          tensor[3] g4F11#2 = <tensor[3]>[_t4EEE,_t4EF5,_t4F0E];
          real _t4F13#6 = -0.4e1;
          real r4F16#1 = RMul(_t4F13,op1_e3_l_64EDD);
          real r4F17#1 = RMul(r4F16,op1_e3_l_84EE3);
          real op1_e3_l_244F15#1 = RMul(r4F17,op1_e3_l_204F01);
          real r4F1D#1 = RMul(_t4ED9,op1_e3_l_84EE3);
          real op1_e3_l_254F1C#2 = RMul(r4F1D,op1_e3_l_114EEB);
          real _t4F21#1 = RAdd(op1_e3_l_244F15,op1_e3_l_254F1C);
          real r4F25#1 = RMul(_t4F13,x4ED3);
          real r4F26#1 = RMul(r4F25,y4ED5);
          real r4F27#1 = RMul(r4F26,op1_e3_l_84EE3);
          real _t4F24#2 = RMul(r4F27,op1_e3_l_204F01);
          real r4F2E#1 = RMul(_t4F13,x4ED3);
          real r4F2F#1 = RMul(r4F2E,op1_e3_l_144EFC);
          real op1_e3_l_234F2D#1 = RMul(r4F2F,op1_e3_l_204F01);
          real r4F35#1 = RMul(_t4EC7,x4ED3);
          real r4F36#1 = RMul(r4F35,z4ED7);
          real op1_e3_l_244F34#1 = RMul(r4F36,op1_e3_l_114EEB);
          real _t4F3B#2 = RAdd(op1_e3_l_234F2D,op1_e3_l_244F34);
          tensor[3] _t4F3E#1 = <tensor[3]>[_t4F21,_t4F24,_t4F3B];
          real r4F41#1 = RMul(_t4F13,op1_e3_l_74EE0);
          real r4F42#1 = RMul(r4F41,op1_e3_l_84EE3);
          real op1_e3_l_244F40#1 = RMul(r4F42,op1_e3_l_204F01);
          real _t4F47#1 = RAdd(op1_e3_l_244F40,op1_e3_l_254F1C);
          real r4F4B#1 = RMul(_t4F13,y4ED5);
          real r4F4C#1 = RMul(r4F4B,op1_e3_l_144EFC);
          real op1_e3_l_234F4A#1 = RMul(r4F4C,op1_e3_l_204F01);
          real r4F52#1 = RMul(_t4EC7,y4ED5);
          real r4F53#1 = RMul(r4F52,z4ED7);
          real op1_e3_l_244F51#1 = RMul(r4F53,op1_e3_l_114EEB);
          real _t4F58#2 = RAdd(op1_e3_l_234F4A,op1_e3_l_244F51);
          tensor[3] _t4F5B#1 = <tensor[3]>[_t4F24,_t4F47,_t4F58];
          real _t4F5D#1 = 0.1e2;
          real _Pow_24F60#2 = RMul(z4ED7,z4ED7);
          real op1_e3_l_184F5F#1 = RMul(_Pow_24F60,_Pow_24F60);
          real r4F65#1 = RMul(_t4F13,op1_e3_l_184F5F);
          real op1_e3_l_314F64#1 = RMul(r4F65,op1_e3_l_204F01);
          real r4F6A#1 = RMul(_t4F5D,op1_e3_l_84EE3);
          real op1_e3_l_324F69#1 = RMul(r4F6A,op1_e3_l_114EEB);
          real op1_e3_l_334F6E#1 = RMul(_t4ED9,op1_e3_l_204F01);
          real r4F72#1 = RAdd(op1_e3_l_314F64,op1_e3_l_324F69);
          real _t4F71#1 = RAdd(r4F72,op1_e3_l_334F6E);
          tensor[3] _t4F76#1 = <tensor[3]>[_t4F3B,_t4F58,_t4F71];
          tensor[3,3] hess4F78#1 = <tensor[3,3]>[_t4F3E,_t4F5B,_t4F76];
          real[3] _t4F7A#1 = EigenVals3x3(hess4F78);
          real _t4F7C#1 = Subscript<real[3]>(_t4F7A,_t4EDB);
          real op1_e3_l_34F7E#1 = VDot<3>(g4F11,g4F11);
          real op1_e3_l_44F81#1 = Sqrt(op1_e3_l_34F7E);
          real op1_e3_l_54F84#1 = RNeg(_t4F7C);
          real op1_e3_l_64F87#1 = RAdd(fBias4E63,op1_e3_l_44F81);
          real str4F8A#1 = RDiv(op1_e3_l_54F84,op1_e3_l_64F87);
          bool _t4F8D#1 = GT<real>(str4F8A,fStrTh4E5F);
          if _t4F8D then goto ASSIGN4F91 else goto JOIN4F98
        ASSIGN4F91:  preds = [COND4F8F]
          bool _t4F90#1 = GTE<real>(_t4EBA,fMaskTh4E61);
          if _t4F90 then goto ASSIGN4F94 else goto JOIN4F96
        ASSIGN4F94:  preds = [COND4F92]
          bool _t4F93#1 = true;
          goto JOIN4F96
        JOIN4F96:  preds = [ASSIGN4F94,COND4F92]
          bool _t4F95#1 = phi(_t4F93,vv4E9D)
          goto JOIN4F98
        JOIN4F98:  preds = [JOIN4F96,COND4F8F]
          bool _t4F97#1 = phi(_t4F95,vv4E9D)
          goto JOIN4F9A
        JOIN4F9A:  preds = [JOIN4F98,COND4ED2]
          bool _t4F99#1 = phi(_t4F97,vv4E9D)
          bool _t4F9B#1 = BNot(_t4F99);
          if _t4F9B then goto ASSIGN4F9F else goto JOIN5087
        ASSIGN4F9F:  preds = [COND4F9D]
          int _t4F9E#1 = 0;
          bool _t4FA0#1 = GT<int>(verb4E77,_t4F9E);
          if _t4FA0 then goto JOIN4FA4 else goto JOIN4FA4
        JOIN4FA4:  preds = [COND4FA2,COND4FA2]
          bool _t4FA3#1 = phi(vv4E9D,vv4E9D)
          if _t4FA3 then goto ASSIGN4FA7 else goto ASSIGN59F6
        ASSIGN4FA7:  preds = [COND4FA5]
          bool _t4FA6#1 = true;
          goto JOIN4FAA
        JOIN4FAA:  preds = [ASSIGN4FA7,ASSIGN59F7]
          bool _t4FA8#1 = phi(_t4FA6,_t4FA9)
          if _t4FA8 then goto ASSIGN4FAD else goto JOIN5085
        ASSIGN4FAD:  preds = [COND4FAB]
          string _t4FAC#1 = "(i#";
          string _t4FAE#1 = " @ ";
          string _t4FB0#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID4E8B,_t4FAC,iter4E87,_t4FAE,pos4E89,_t4FB0);
          string _t4FB3#1 = "!inside=";
          if _t4EC9 then goto ASSIGN4FB7 else goto JOIN4FBB
        ASSIGN4FB7:  preds = [COND4FB5]
          real _t4FB6#1 = 0.3e1;
          bool _t4FB8#1 = GT<real>(_t4EC4,_t4FB6);
          goto JOIN4FBB
        JOIN4FBB:  preds = [ASSIGN4FB9,COND4FB5]
          bool _t4FBA#1 = phi(_t4FB8,vv4E9D)
          string _t4FBC#1 = " || fStrength=";
          real x4FBE#6 = VIndex<3,0>(pos4E89);
          real y4FC0#6 = VIndex<3,1>(pos4E89);
          real z4FC2#10 = VIndex<3,2>(pos4E89);
          real _t4FC4#6 = 0.2e1;
          int _t4FC6#1 = 2;
          real op1_e3_l_64FC8#2 = RMul(x4FBE,x4FBE);
          real op1_e3_l_74FCB#2 = RMul(y4FC0,y4FC0);
          real op1_e3_l_84FCE#8 = RMul(z4FC2,z4FC2);
          real r4FD2#1 = RAdd(op1_e3_l_64FC8,op1_e3_l_74FCB);
          real op1_e3_l_94FD1#2 = RAdd(r4FD2,op1_e3_l_84FCE);
          real op1_e3_l_114FD6#7 = Cos(op1_e3_l_94FD1);
          real r4FDA#1 = RMul(_t4FC4,x4FBE);
          real r4FDB#1 = RMul(r4FDA,op1_e3_l_84FCE);
          real _t4FD9#1 = RMul(r4FDB,op1_e3_l_114FD6);
          real r4FE1#1 = RMul(_t4FC4,y4FC0);
          real r4FE2#1 = RMul(r4FE1,op1_e3_l_84FCE);
          real _t4FE0#1 = RMul(r4FE2,op1_e3_l_114FD6);
          real _Pow2_4FE8#1 = RMul(z4FC2,z4FC2);
          real op1_e3_l_144FE7#3 = RMul(z4FC2,_Pow2_4FE8);
          real op1_e3_l_204FEC#8 = Sin(op1_e3_l_94FD1);
          real r4FF0#1 = RMul(_t4FC4,op1_e3_l_144FE7);
          real op1_e3_l_214FEF#1 = RMul(r4FF0,op1_e3_l_114FD6);
          real r4FF5#1 = RMul(_t4FC4,z4FC2);
          real op1_e3_l_224FF4#1 = RMul(r4FF5,op1_e3_l_204FEC);
          real _t4FF9#1 = RAdd(op1_e3_l_214FEF,op1_e3_l_224FF4);
          tensor[3] g4FFC#2 = <tensor[3]>[_t4FD9,_t4FE0,_t4FF9];
          real _t4FFE#6 = -0.4e1;
          real r5001#1 = RMul(_t4FFE,op1_e3_l_64FC8);
          real r5002#1 = RMul(r5001,op1_e3_l_84FCE);
          real op1_e3_l_245000#1 = RMul(r5002,op1_e3_l_204FEC);
          real r5008#1 = RMul(_t4FC4,op1_e3_l_84FCE);
          real op1_e3_l_255007#2 = RMul(r5008,op1_e3_l_114FD6);
          real _t500C#1 = RAdd(op1_e3_l_245000,op1_e3_l_255007);
          real r5010#1 = RMul(_t4FFE,x4FBE);
          real r5011#1 = RMul(r5010,y4FC0);
          real r5012#1 = RMul(r5011,op1_e3_l_84FCE);
          real _t500F#2 = RMul(r5012,op1_e3_l_204FEC);
          real r5019#1 = RMul(_t4FFE,x4FBE);
          real r501A#1 = RMul(r5019,op1_e3_l_144FE7);
          real op1_e3_l_235018#1 = RMul(r501A,op1_e3_l_204FEC);
          real r5020#1 = RMul(_t4EC7,x4FBE);
          real r5021#1 = RMul(r5020,z4FC2);
          real op1_e3_l_24501F#1 = RMul(r5021,op1_e3_l_114FD6);
          real _t5026#2 = RAdd(op1_e3_l_235018,op1_e3_l_24501F);
          tensor[3] _t5029#1 = <tensor[3]>[_t500C,_t500F,_t5026];
          real r502C#1 = RMul(_t4FFE,op1_e3_l_74FCB);
          real r502D#1 = RMul(r502C,op1_e3_l_84FCE);
          real op1_e3_l_24502B#1 = RMul(r502D,op1_e3_l_204FEC);
          real _t5032#1 = RAdd(op1_e3_l_24502B,op1_e3_l_255007);
          real r5036#1 = RMul(_t4FFE,y4FC0);
          real r5037#1 = RMul(r5036,op1_e3_l_144FE7);
          real op1_e3_l_235035#1 = RMul(r5037,op1_e3_l_204FEC);
          real r503D#1 = RMul(_t4EC7,y4FC0);
          real r503E#1 = RMul(r503D,z4FC2);
          real op1_e3_l_24503C#1 = RMul(r503E,op1_e3_l_114FD6);
          real _t5043#2 = RAdd(op1_e3_l_235035,op1_e3_l_24503C);
          tensor[3] _t5046#1 = <tensor[3]>[_t500F,_t5032,_t5043];
          real _t5048#1 = 0.1e2;
          real _Pow_2504B#2 = RMul(z4FC2,z4FC2);
          real op1_e3_l_18504A#1 = RMul(_Pow_2504B,_Pow_2504B);
          real r5050#1 = RMul(_t4FFE,op1_e3_l_18504A);
          real op1_e3_l_31504F#1 = RMul(r5050,op1_e3_l_204FEC);
          real r5055#1 = RMul(_t5048,op1_e3_l_84FCE);
          real op1_e3_l_325054#1 = RMul(r5055,op1_e3_l_114FD6);
          real op1_e3_l_335059#1 = RMul(_t4FC4,op1_e3_l_204FEC);
          real r505D#1 = RAdd(op1_e3_l_31504F,op1_e3_l_325054);
          real _t505C#1 = RAdd(r505D,op1_e3_l_335059);
          tensor[3] _t5061#1 = <tensor[3]>[_t5026,_t5043,_t505C];
          tensor[3,3] hess5063#1 = <tensor[3,3]>[_t5029,_t5046,_t5061];
          real[3] _t5065#1 = EigenVals3x3(hess5063);
          real _t5067#1 = Subscript<real[3]>(_t5065,_t4FC6);
          real op1_e3_l_35069#1 = VDot<3>(g4FFC,g4FFC);
          real op1_e3_l_4506C#1 = Sqrt(op1_e3_l_35069);
          real op1_e3_l_5506F#1 = RNeg(_t5067);
          real op1_e3_l_65072#1 = RAdd(fBias4E63,op1_e3_l_4506C);
          real str5075#1 = RDiv(op1_e3_l_5506F,op1_e3_l_65072);
          string _t5078#1 = " <= fStrTh=";
          string _t507A#1 = " || fMask(pos)=";
          string _t507C#1 = " < fMaskTh=";
          string _t507E#1 = " || fTest(pos)=";
          bool _t5080#1 = true;
          string _t5082#1 = " ==>DIE\n";
          Print<[string,bool,string,real,string,real,string,real,string,real,string,bool,string]>(_t4FB3,_t4FBA,_t4FBC,str5075,_t5078,fStrTh4E5F,_t507A,_t4EBA,_t507C,fMaskTh4E61,_t507E,_t5080,_t5082);
          goto JOIN5085
        JOIN5085:  preds = [MASSIGN5084,COND4FAB]
          die
          goto JOIN5087
        JOIN5087:  preds = [*DIE5086,COND4F9D]
          bool _t5088#1 = GT<real>(travMax4E69,_t4EBA);
          if _t5088 then goto ASSIGN508C else goto JOIN5090
        ASSIGN508C:  preds = [COND508A]
          bool _t508B#1 = GT<real>(trav4E93,travMax4E69);
          if _t508B then goto DIE508E else goto JOIN508F
        DIE508E:  preds = [COND508D]
          die
          goto JOIN508F
        JOIN508F:  preds = [*DIE508E,COND508D]
          goto JOIN5090
        JOIN5090:  preds = [JOIN508F,COND508A]
          bool _t5091#1 = BNot(found4E8F);
          if _t5091 then goto ASSIGN5095 else goto ASSIGN5228
        ASSIGN5095:  preds = [COND5093]
          int _t5094#3 = 0;
          bool _t5096#1 = GT<int>(nfsMax4E6B,_t5094);
          if _t5096 then goto ASSIGN509A else goto JOIN50BD
        ASSIGN509A:  preds = [COND5098]
          bool _t5099#1 = GT<int>(nfs4E91,nfsMax4E6B);
          if _t5099 then goto ASSIGN509D else goto JOIN50BC
        ASSIGN509D:  preds = [COND509B]
          bool _t509C#1 = GT<int>(verb4E77,_t5094);
          if _t509C then goto JOIN50A0 else goto JOIN50A0
        JOIN50A0:  preds = [COND509E,COND509E]
          bool _t509F#1 = phi(vv4E9D,vv4E9D)
          if _t509F then goto ASSIGN50A3 else goto ASSIGN5225
        ASSIGN50A3:  preds = [COND50A1]
          bool _t50A2#1 = true;
          goto JOIN50A6
        JOIN50A6:  preds = [ASSIGN50A3,ASSIGN5226]
          bool _t50A4#1 = phi(_t50A2,_t50A5)
          if _t50A4 then goto ASSIGN50A9 else goto JOIN50BA
        ASSIGN50A9:  preds = [COND50A7]
          string _t50A8#1 = "(i#";
          string _t50AA#1 = " @ ";
          string _t50AC#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID4E8B,_t50A8,iter4E87,_t50AA,pos4E89,_t50AC);
          string _t50AF#1 = "nfs=";
          string _t50B1#1 = " > nfsMax=";
          string _t50B3#1 = " || trav=";
          string _t50B5#1 = " > travMax=";
          string _t50B7#1 = " =>DIE\n";
          Print<[string,int,string,int,string,real,string,real,string]>(_t50AF,nfs4E91,_t50B1,nfsMax4E6B,_t50B3,trav4E93,_t50B5,travMax4E69,_t50B7);
          goto JOIN50BA
        JOIN50BA:  preds = [MASSIGN50B9,COND50A7]
          die
          goto JOIN50BC
        JOIN50BC:  preds = [*DIE50BB,COND509B]
          goto JOIN50BD
        JOIN50BD:  preds = [JOIN50BC,COND5098]
          tensor[3] _t50BE#3 = fStep50BF (pos4E89);
          tensor[3] step51B7#3 = VScale<3>(sfs4E79,_t50BE);
          tensor[3] pos51BA#2 = VAdd<3>(pos4E89,step51B7);
          real op1_e3_l_551BD#1 = VDot<3>(_t50BE,_t50BE);
          real r51C1#1 = RMul(sfs4E79,sfs4E79);
          real op1_e3_l_651C0#1 = RMul(r51C1,op1_e3_l_551BD);
          real op1_e3_l_751C5#1 = Sqrt(op1_e3_l_651C0);
          real op1_e3_l_1151C8#3 = RDiv(op1_e3_l_751C5,tipd4E65);
          real op1_e3_l_1251CB#1 = RSub(mvmt4E95,op1_e3_l_1151C8);
          real op1_e3_l_1451CE#1 = RMul(hist4E7B,op1_e3_l_1251CB);
          real mvmt51D1#2 = RAdd(op1_e3_l_1151C8,op1_e3_l_1451CE);
          bool _t51D4#1 = GT<real>(mvmt51D1,fsEps4E73);
          if _t51D4 then goto ASSIGN51D9 else goto ASSIGN5222
        ASSIGN51D9:  preds = [COND51D6]
          real trav51D7#1 = RAdd(trav4E93,op1_e3_l_1151C8);
          int _t51DA#1 = 1;
          int nfs51DC#1 = IAdd(nfs4E91,_t51DA);
          goto JOIN51E4
        JOIN51E4:  preds = [ASSIGN51DD,ASSIGN5223]
          real mvmt51DE#2 = phi(mvmt51D1,mvmt51DF)
          real trav51E0#1 = phi(trav51D7,_t4EBA)
          int nfs51E1#1 = phi(nfs51DC,nfs4E91)
          bool found51E2#2 = phi(found4E8F,found51E3)
          bool _t51E5#1 = GT<int>(verb4E77,_t5094);
          if _t51E5 then goto JOIN51E9 else goto JOIN51E9
        JOIN51E9:  preds = [COND51E7,COND51E7]
          bool _t51E8#1 = phi(vv4E9D,vv4E9D)
          if _t51E8 then goto ASSIGN51EC else goto ASSIGN5220
        ASSIGN51EC:  preds = [COND51EA]
          bool _t51EB#1 = true;
          goto JOIN51EF
        JOIN51EF:  preds = [ASSIGN51EC,ASSIGN5221]
          bool _t51ED#1 = phi(_t51EB,_t51EE)
          if _t51ED then goto ASSIGN51F2 else goto JOIN5201
        ASSIGN51F2:  preds = [COND51F0]
          string _t51F1#1 = "(i#";
          string _t51F3#1 = " @ ";
          string _t51F5#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID4E8B,_t51F1,iter4E87,_t51F3,pos51BA,_t51F5);
          string _t51F8#1 = "step=";
          string _t51FA#1 = "; mvmt=";
          string _t51FC#1 = " => found=";
          string _t51FE#1 = "\n";
          Print<[string,tensor[3],string,real,string,bool,string]>(_t51F8,step51B7,_t51FA,mvmt51DE,_t51FC,found51E2,_t51FE);
          goto JOIN5201
        JOIN5201:  preds = [MASSIGN5200,COND51F0]
          goto JOIN5212
        JOIN5212:  preds = [JOIN5201,JOIN599D]
          int born5202#1 = phi(born4E99,born5203)
          real closest5204#1 = phi(closest4E97,closest5205)
          real mvmt5206#1 = phi(mvmt51DE,mvmt5207)
          real trav5208#1 = phi(trav51E0,trav5209)
          int nfs520A#1 = phi(nfs51E1,nfs4E91)
          bool found520B#1 = phi(found51E2,found4E8F)
          tensor[3] step520C#1 = phi(step51B7,step520D)
          real hh520E#1 = phi(hh4E8D,hh520F)
          tensor[3] pos5210#2 = phi(pos51BA,pos5211)
          self.pos = pos5210;
          self._pos = pos5210;
          self.hh = hh520E;
          self.step = step520C;
          self.found = found520B;
          self.nfs = nfs520A;
          self.trav = trav5208;
          self.mvmt = mvmt5206;
          self.closest = closest5204;
          self.born = born5202;
          self.first = vv4E9D;
          active
        ASSIGN5220:  preds = [COND51EA]
          int _t521F#1 = 1;
          bool _t51EE#1 = GT<int>(verb4E77,_t521F);
          goto JOIN51EF
        ASSIGN5222:  preds = [COND51D6]
          bool found51E3#1 = true;
          real mvmt51DF#1 = 0.1e1;
          goto JOIN51E4
        ASSIGN5225:  preds = [COND50A1]
          int _t5224#1 = 1;
          bool _t50A5#1 = GT<int>(verb4E77,_t5224);
          goto JOIN50A6
        ASSIGN5228:  preds = [COND5093]
          int _t5227#25 = 0;
          bool _t5229#1 = EQ<int>(_t5227,fDim4E7F);
          if _t5229 then goto SAVE522C else goto JOIN522E
        SAVE522C:  preds = [COND522B]
          self.pos = pos4E89;
          stabilize
          goto JOIN522E
        JOIN522E:  preds = [*STABILIZE522D,COND522B]
          tensor[3] _t522F#3 = fStep50BF (pos4E89);
          tensor[3] step5231#10 = VScale<3>(sfs4E79,_t522F);
          tensor[3] pos5234#20 = VAdd<3>(pos4E89,step5231);
          real op1_e3_l_45237#1 = VDot<3>(_t522F,_t522F);
          real r523B#1 = RMul(sfs4E79,sfs4E79);
          real op1_e3_l_5523A#1 = RMul(r523B,op1_e3_l_45237);
          real op1_e3_l_6523F#1 = Sqrt(op1_e3_l_5523A);
          real op1_e3_l_75242#2 = RDiv(op1_e3_l_6523F,tipd4E65);
          real trav5245#4 = RAdd(trav4E93,op1_e3_l_75242);
          point[] _t5248#1 = SphereQuery<3,point>(pos5234,rad4E85);
        FOREACH524B:  preds = [ASSIGN5249,NEXT52EB]
          foreach (P524A in _t5248) on exit goto ASSIGN5345
            int nn52E9#3 = phi(_t5227,nn52E8)
            tensor[3] force52E3#6 = phi(_t4EBC,force52E2)
            real oldE5298#4 = phi(_t4EBA,oldE5297)
          tensor[3] _t524C#1 = P524A.pos;
          tensor[3] op1_e3_l_9524E#5 = VSub<3>(_t524C,pos5234);
          real op1_e3_l_115251#1 = VDot<3>(op1_e3_l_9524E,op1_e3_l_9524E);
          real op1_e3_l_125254#3 = Sqrt(op1_e3_l_115251);
          real _t5257#1 = RDiv(op1_e3_l_125254,tipd4E65);
          bool _t525A#1 = LT<real>(_t5257,fsEps4E73);
          if _t525A then goto ASSIGN525E else goto JOIN5264
        ASSIGN525E:  preds = [COND525C]
          real _t525D#1 = P524A.ID;
          bool _t525F#1 = LTE<real>(ID4E8B,_t525D);
          if _t525F then goto DIE5262 else goto JOIN5263
        DIE5262:  preds = [COND5261]
          die
          goto JOIN5263
        JOIN5263:  preds = [*DIE5262,COND5261]
          goto JOIN5264
        JOIN5264:  preds = [JOIN5263,COND525C]
          real _t5265#12 = RDiv(op1_e3_l_125254,rad4E85);
          real _t5268#2 = 0.2e1;
          real _t526A#2 = 0.3e1;
          real _t526C#2 = RDiv(_t5268,_t526A);
          bool _t526F#2 = LT<real>(_t5265,_t526C);
          if _t526F then goto ASSIGN5273 else goto ASSIGN5318
        ASSIGN5273:  preds = [COND5271]
          real _t5272#1 = 0.1e1;
          real _t5274#1 = -0.5646e1;
          real _t5276#1 = 0.119835e2;
          real _t5278#1 = -0.113535e2;
          real _t527A#1 = 0.40550625e1;
          real op1_e3_l_58527C#1 = RMul(_t527A,_t5265);
          real op1_e3_l_60527F#1 = RAdd(_t5278,op1_e3_l_58527C);
          real op1_e3_l_615282#1 = RMul(_t5265,op1_e3_l_60527F);
          real op1_e3_l_635285#1 = RAdd(_t5276,op1_e3_l_615282);
          real op1_e3_l_645288#1 = RMul(_t5265,op1_e3_l_635285);
          real op1_e3_l_66528B#1 = RAdd(_t5274,op1_e3_l_645288);
          real op1_e3_l_67528E#1 = RMul(_t5265,op1_e3_l_66528B);
          real _t5291#1 = RAdd(_t5272,op1_e3_l_67528E);
          goto JOIN5296
        JOIN5296:  preds = [ASSIGN5293,JOIN5343]
          real _t5294#1 = phi(_t5291,_t5295)
          real oldE5297#1 = RAdd(oldE5298,_t5294);
          if _t526F then goto ASSIGN529D else goto ASSIGN52ED
        ASSIGN529D:  preds = [COND529B]
          real _t529C#1 = -0.5646e1;
          real _t529E#1 = 0.23967e2;
          real _t52A0#1 = -0.340605e2;
          real _t52A2#1 = 0.1622025e2;
          real op1_e3_l_4452A4#1 = RMul(_t52A2,_t5265);
          real op1_e3_l_4652A7#1 = RAdd(_t52A0,op1_e3_l_4452A4);
          real op1_e3_l_4752AA#1 = RMul(_t5265,op1_e3_l_4652A7);
          real op1_e3_l_4952AD#1 = RAdd(_t529E,op1_e3_l_4752AA);
          real op1_e3_l_5052B0#1 = RMul(_t5265,op1_e3_l_4952AD);
          real _t52B3#1 = RAdd(_t529C,op1_e3_l_5052B0);
          goto JOIN52B8
        JOIN52B8:  preds = [ASSIGN52B5,JOIN5316]
          real _t52B6#1 = phi(_t52B3,_t52B7)
          real _t52B9#1 = 0.1e1;
          real op1_e3_l_1452BB#1 = RDiv(_t52B9,rad4E85);
          real r52BF#1 = TensorIndex<tensor[3],[0]>(op1_e3_l_9524E);
          real r52C0#3 = RMul(_t52B6,op1_e3_l_1452BB);
          real r52C1#1 = RMul(r52C0,r52BF);
          real r52C2#1 = TensorIndex<tensor[3],[1]>(op1_e3_l_9524E);
          real r52C3#1 = RMul(r52C0,r52C2);
          real r52C4#1 = TensorIndex<tensor[3],[2]>(op1_e3_l_9524E);
          real r52C5#1 = RMul(r52C0,r52C4);
          real realLit52D0#1 = 0.1e1;
          real r52D1#3 = RDiv(realLit52D0,op1_e3_l_125254);
          real r52D2#1 = r52C1;
          real r52D3#1 = RMul(r52D1,r52D2);
          real r52D4#1 = r52C3;
          real r52D5#1 = RMul(r52D1,r52D4);
          real r52D6#1 = r52C5;
          real r52D7#1 = RMul(r52D1,r52D6);
          tensor[3] op1_e3_l_2552CF#1 = <tensor[3]>[r52D3,r52D5,r52D7];
          tensor[3] force52E2#1 = VAdd<3>(force52E3,op1_e3_l_2552CF);
          int _t52E6#1 = 1;
          int nn52E8#1 = IAdd(nn52E9,_t52E6);
          goto FOREACH524B
        ASSIGN52ED:  preds = [COND529B]
          real _t52EC#1 = 0.1e1;
          bool _t52EE#1 = LT<real>(_t5265,_t52EC);
          if _t52EE then goto ASSIGN52F2 else goto JOIN5316
        ASSIGN52F2:  preds = [COND52F0]
          real _t52F1#1 = 0.1234567901e-1;
          real _t52F3#2 = 0.486e1;
          real _t52F5#1 = -0.1458e2;
          real _t52F7#1 = 0.1458e2;
          real op1_e3_l_4252F9#1 = RMul(_t526A,_t5265);
          real op1_e3_l_7352FC#4 = RSub(op1_e3_l_4252F9,_t5268);
          real op1_e3_l_7452FF#1 = RMul(_t52F3,op1_e3_l_7352FC);
          real op1_e3_l_765302#1 = RSub(_t52F7,op1_e3_l_7452FF);
          real op1_e3_l_775305#1 = RMul(op1_e3_l_7352FC,op1_e3_l_765302);
          real op1_e3_l_795308#1 = RAdd(_t52F5,op1_e3_l_775305);
          real op1_e3_l_80530B#1 = RMul(op1_e3_l_7352FC,op1_e3_l_795308);
          real op1_e3_l_82530E#1 = RAdd(_t52F3,op1_e3_l_80530B);
          real r5312#1 = RMul(_t52F1,op1_e3_l_7352FC);
          real _t5311#1 = RMul(r5312,op1_e3_l_82530E);
          goto JOIN5316
        JOIN5316:  preds = [ASSIGN5315,COND52F0]
          real _t52B7#1 = phi(_t5311,_t4EBA)
          goto JOIN52B8
        ASSIGN5318:  preds = [COND5271]
          real _t5317#1 = 0.1e1;
          bool _t5319#1 = LT<real>(_t5265,_t5317);
          if _t5319 then goto ASSIGN531D else goto JOIN5343
        ASSIGN531D:  preds = [COND531B]
          real _t531C#1 = -0.1e-2;
          real _t531E#1 = 0.9e-1;
          real _t5320#1 = -0.54e0;
          real _t5322#1 = 0.1215e1;
          real _t5324#1 = 0.972e0;
          real op1_e3_l_505326#5 = RSub(_t5265,_t526C);
          real op1_e3_l_515329#1 = RMul(_t5324,op1_e3_l_505326);
          real op1_e3_l_62532C#1 = RSub(_t5322,op1_e3_l_515329);
          real op1_e3_l_64532F#1 = RMul(op1_e3_l_62532C,op1_e3_l_505326);
          real op1_e3_l_755332#1 = RAdd(_t5320,op1_e3_l_64532F);
          real op1_e3_l_775335#1 = RMul(op1_e3_l_755332,op1_e3_l_505326);
          real op1_e3_l_985338#1 = RAdd(_t531E,op1_e3_l_775335);
          real r533C#1 = RMul(op1_e3_l_985338,op1_e3_l_505326);
          real op1_e3_l_101533B#1 = RMul(r533C,op1_e3_l_505326);
          real _t5340#1 = RAdd(_t531C,op1_e3_l_101533B);
          goto JOIN5343
        JOIN5343:  preds = [ASSIGN5342,COND531B]
          real _t5295#1 = phi(_t5340,_t4EBA)
          goto JOIN5296
        ASSIGN5345:  preds = [FOREACH524B]
          bool _t5344#1 = EQ<int>(_t5227,nn52E9);
          if _t5344 then goto ASSIGN5348 else goto JOIN5628
        ASSIGN5348:  preds = [COND5346]
          bool _t5347#1 = GT<int>(pcp4E7D,_t5227);
          if _t5347 then goto ASSIGN534B else goto JOIN5354
        ASSIGN534B:  preds = [COND5349]
          bool _t534A#1 = GT<int>(iter4E87,_t5227);
          if _t534A then goto ASSIGN534E else goto JOIN5352
        ASSIGN534E:  preds = [COND534C]
          int _t534D#1 = IMod(iter4E87,pcp4E7D);
          bool _t534F#1 = EQ<int>(_t5227,_t534D);
          goto JOIN5352
        JOIN5352:  preds = [ASSIGN5350,COND534C]
          bool _t5351#1 = phi(_t534F,vv4E9D)
          goto JOIN5354
        JOIN5354:  preds = [JOIN5352,COND5349]
          bool _t5353#1 = phi(_t5351,vv4E9D)
          if _t5353 then goto ASSIGN5357 else goto JOIN5363
        ASSIGN5357:  preds = [COND5355]
          int _t5356#1 = IDiv(iter4E87,pcp4E7D);
          int _t5358#2 = 2;
          int _t535A#1 = IMod(_t5356,_t5358);
          int _t535C#1 = IMul(_t535A,_t5358);
          int _t535E#1 = 1;
          int _t5360#1 = ISub(_t535C,_t535E);
          goto JOIN5363
        JOIN5363:  preds = [ASSIGN5361,COND5355]
          int _t5362#1 = phi(_t5360,_t5227)
          bool _t5364#1 = GT<int>(_t5362,_t5227);
          if _t5364 then goto ASSIGN5368 else goto JOIN536A
        ASSIGN5368:  preds = [COND5366]
          bool _t5367#1 = LT<int>(born4E99,nnmax4E83);
          goto JOIN536A
        JOIN536A:  preds = [ASSIGN5368,COND5366]
          bool _t5369#1 = phi(_t5367,vv4E9D)
          bool _t536B#1 = BNot(_t5369);
          if _t536B then goto SAVE536E else goto JOIN5373
        SAVE536E:  preds = [COND536D]
          self.pos = pos5234;
          self._pos = pos5234;
          self.step = step5231;
          self.trav = trav5245;
          active
          goto JOIN5373
        JOIN5373:  preds = [*ACTIVE5372,COND536D]
          tensor[3,3] _t5374#9 = fPerp5375 (pos5234);
          tensor[3] _t546A#3 = <tensor[3]>[tipd4E65,_t4EBA,_t4EBA];
          tensor[3] projParam546D#1 = ProjectLast<tensor[3,3],[0]>(_t5374);
          real vdot546E#1 = VDot<3>(projParam546D,_t546A);
          tensor[3] projParam546F#1 = ProjectLast<tensor[3,3],[1]>(_t5374);
          real vdot5470#1 = VDot<3>(projParam546F,_t546A);
          tensor[3] projParam5471#1 = ProjectLast<tensor[3,3],[2]>(_t5374);
          real vdot5472#1 = VDot<3>(projParam5471,_t546A);
          tensor[3] noff0546C#3 = <tensor[3]>[vdot546E,vdot5470,vdot5472];
          tensor[3] _t547B#3 = <tensor[3]>[_t4EBA,tipd4E65,_t4EBA];
          tensor[3] projParam547E#1 = ProjectLast<tensor[3,3],[0]>(_t5374);
          real vdot547F#1 = VDot<3>(projParam547E,_t547B);
          tensor[3] projParam5480#1 = ProjectLast<tensor[3,3],[1]>(_t5374);
          real vdot5481#1 = VDot<3>(projParam5480,_t547B);
          tensor[3] projParam5482#1 = ProjectLast<tensor[3,3],[2]>(_t5374);
          real vdot5483#1 = VDot<3>(projParam5482,_t547B);
          tensor[3] noff1547D#3 = <tensor[3]>[vdot547F,vdot5481,vdot5483];
          tensor[3] _t548C#3 = <tensor[3]>[_t4EBA,_t4EBA,tipd4E65];
          tensor[3] projParam548F#1 = ProjectLast<tensor[3,3],[0]>(_t5374);
          real vdot5490#1 = VDot<3>(projParam548F,_t548C);
          tensor[3] projParam5491#1 = ProjectLast<tensor[3,3],[1]>(_t5374);
          real vdot5492#1 = VDot<3>(projParam5491,_t548C);
          tensor[3] projParam5493#1 = ProjectLast<tensor[3,3],[2]>(_t5374);
          real vdot5494#1 = VDot<3>(projParam5493,_t548C);
          tensor[3] noff2548E#3 = <tensor[3]>[vdot5490,vdot5492,vdot5494];
          real op1_e3_l_4549D#1 = VDot<3>(noff0546C,noff0546C);
          real _t54A0#1 = Sqrt(op1_e3_l_4549D);
          real op1_e3_l_454A3#1 = VDot<3>(noff1547D,noff1547D);
          real _t54A6#1 = Sqrt(op1_e3_l_454A3);
          bool _t54A9#1 = GT<real>(_t54A0,_t54A6);
          if _t54A9 then goto JOIN54AD else goto JOIN54AD
        JOIN54AD:  preds = [COND54AB,COND54AB]
          tensor[3] _t54AC#3 = phi(noff0546C,noff1547D)
          real op1_e3_l_154AE#1 = VDot<3>(_t54AC,_t54AC);
          real _t54B1#1 = Sqrt(op1_e3_l_154AE);
          real op1_e3_l_454B4#1 = VDot<3>(noff2548E,noff2548E);
          real _t54B7#1 = Sqrt(op1_e3_l_454B4);
          bool _t54BA#1 = GT<real>(_t54B1,_t54B7);
          if _t54BA then goto JOIN54BE else goto JOIN54BE
        JOIN54BE:  preds = [COND54BC,COND54BC]
          tensor[3] _t54BD#5 = phi(_t54AC,noff2548E)
          real op1_e3_l_654BF#1 = VDot<3>(_t54BD,_t54BD);
          real op1_e3_l_754C2#1 = Sqrt(op1_e3_l_654BF);
          real realLit54C6#1 = 0.1e1;
          real op1_e3_l_854C5#3 = RDiv(realLit54C6,op1_e3_l_754C2);
          real r54CB#1 = TensorIndex<tensor[3],[0]>(_t54BD);
          real r54CC#1 = RMul(tipd4E65,r54CB);
          real r54CD#1 = RMul(r54CC,op1_e3_l_854C5);
          real r54CE#1 = TensorIndex<tensor[3],[1]>(_t54BD);
          real r54CF#1 = RMul(tipd4E65,r54CE);
          real r54D0#1 = RMul(r54CF,op1_e3_l_854C5);
          real r54D1#1 = TensorIndex<tensor[3],[2]>(_t54BD);
          real r54D2#1 = RMul(tipd4E65,r54D1);
          real r54D3#1 = RMul(r54D2,op1_e3_l_854C5);
          tensor[3] op1_e3_l_954CA#2 = <tensor[3]>[r54CD,r54D0,r54D3];
          tensor[3] v54E0#1 = VAdd<3>(op1_e3_l_954CA,pos4E89);
          tensor[3] npos54DF#1 = VAdd<3>(v54E0,step5231);
          tensor[3] _t54E4#1 = fStep50BF (npos54DF);
          tensor[3] op1_e3_l_1354E6#1 = VScale<3>(sfs4E79,_t54E4);
          tensor[3] v54EA#1 = VAdd<3>(op1_e3_l_954CA,pos4E89);
          tensor[3] v54EB#1 = VAdd<3>(v54EA,step5231);
          tensor[3] npos54E9#5 = VAdd<3>(v54EB,op1_e3_l_1354E6);
          bool _t54F0#2 = GT<int>(verb4E77,_t5227);
          if _t54F0 then goto JOIN54F4 else goto JOIN54F4
        JOIN54F4:  preds = [COND54F2,COND54F2]
          bool _t54F3#1 = phi(vv4E9D,vv4E9D)
          if _t54F3 then goto ASSIGN54F7 else goto ASSIGN59F3
        ASSIGN54F7:  preds = [COND54F5]
          bool _t54F6#1 = true;
          goto JOIN54FA
        JOIN54FA:  preds = [ASSIGN54F7,ASSIGN59F4]
          bool _t54F8#1 = phi(_t54F6,_t54F9)
          if _t54F8 then goto ASSIGN54FD else goto JOIN5526
        ASSIGN54FD:  preds = [COND54FB]
          string _t54FC#1 = "(i#";
          string _t54FE#1 = " @ ";
          string _t5500#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID4E8B,_t54FC,iter4E87,_t54FE,pos5234,_t5500);
          string _t5503#1 = " 0==nn =>NEW(";
          string _t5505#1 = ") w/ ID=";
          real _t5507#1 = 0.1e7;
          real _t5509#1 = VIndex<3,0>(npos54E9);
          real _t550B#1 = urnd4DF7 (_t5509);
          real _t550D#1 = VIndex<3,1>(npos54E9);
          real _t550F#1 = urnd4DF7 (_t550D);
          real _t5511#1 = VIndex<3,2>(npos54E9);
          real _t5513#1 = urnd4DF7 (_t5511);
          real r5516#1 = RAdd(_t550B,_t550F);
          real _t5515#1 = RAdd(r5516,_t5513);
          real _t551A#1 = 0.1e1;
          real _t551C#1 = MathFn<fmod>(_t5515,_t551A);
          real _t551E#1 = RMul(_t5507,_t551C);
          real _t5521#1 = MathFn<floor>(_t551E);
          string _t5523#1 = "\n";
          Print<[string,tensor[3],string,real,string]>(_t5503,npos54E9,_t5505,_t5521,_t5523);
          goto JOIN5526
        JOIN5526:  preds = [MASSIGN5525,COND54FB]
          tensor[3] op1_e3_l_85527#2 = VSub<3>(pos5234,_t4EBC);
          real op1_e3_l_10552A#1 = VDot<3>(op1_e3_l_85527,op1_e3_l_85527);
          real _t552D#2 = Sqrt(op1_e3_l_10552A);
          bool _t5530#1 = LT<real>(_t552D,_t4EC7);
          if _t5530 then goto ASSIGN5534 else goto JOIN5538
        ASSIGN5534:  preds = [COND5532]
          real _t5533#1 = 0.3e1;
          bool _t5535#1 = GT<real>(_t552D,_t5533);
          goto JOIN5538
        JOIN5538:  preds = [ASSIGN5536,COND5532]
          bool _t5537#1 = phi(_t5535,vv4E9D)
          if _t5537 then goto ASSIGN553B else goto JOIN5601
        ASSIGN553B:  preds = [COND5539]
          real x553A#6 = VIndex<3,0>(pos5234);
          real y553C#6 = VIndex<3,1>(pos5234);
          real z553E#10 = VIndex<3,2>(pos5234);
          real _t5540#6 = 0.2e1;
          int _t5542#1 = 2;
          real op1_e3_l_65544#2 = RMul(x553A,x553A);
          real op1_e3_l_75547#2 = RMul(y553C,y553C);
          real op1_e3_l_8554A#8 = RMul(z553E,z553E);
          real r554E#1 = RAdd(op1_e3_l_65544,op1_e3_l_75547);
          real op1_e3_l_9554D#2 = RAdd(r554E,op1_e3_l_8554A);
          real op1_e3_l_115552#7 = Cos(op1_e3_l_9554D);
          real r5556#1 = RMul(_t5540,x553A);
          real r5557#1 = RMul(r5556,op1_e3_l_8554A);
          real _t5555#1 = RMul(r5557,op1_e3_l_115552);
          real r555D#1 = RMul(_t5540,y553C);
          real r555E#1 = RMul(r555D,op1_e3_l_8554A);
          real _t555C#1 = RMul(r555E,op1_e3_l_115552);
          real _Pow2_5564#1 = RMul(z553E,z553E);
          real op1_e3_l_145563#3 = RMul(z553E,_Pow2_5564);
          real op1_e3_l_205568#8 = Sin(op1_e3_l_9554D);
          real r556C#1 = RMul(_t5540,op1_e3_l_145563);
          real op1_e3_l_21556B#1 = RMul(r556C,op1_e3_l_115552);
          real r5571#1 = RMul(_t5540,z553E);
          real op1_e3_l_225570#1 = RMul(r5571,op1_e3_l_205568);
          real _t5575#1 = RAdd(op1_e3_l_21556B,op1_e3_l_225570);
          tensor[3] g5578#2 = <tensor[3]>[_t5555,_t555C,_t5575];
          real _t557A#6 = -0.4e1;
          real r557D#1 = RMul(_t557A,op1_e3_l_65544);
          real r557E#1 = RMul(r557D,op1_e3_l_8554A);
          real op1_e3_l_24557C#1 = RMul(r557E,op1_e3_l_205568);
          real r5584#1 = RMul(_t5540,op1_e3_l_8554A);
          real op1_e3_l_255583#2 = RMul(r5584,op1_e3_l_115552);
          real _t5588#1 = RAdd(op1_e3_l_24557C,op1_e3_l_255583);
          real r558C#1 = RMul(_t557A,x553A);
          real r558D#1 = RMul(r558C,y553C);
          real r558E#1 = RMul(r558D,op1_e3_l_8554A);
          real _t558B#2 = RMul(r558E,op1_e3_l_205568);
          real r5595#1 = RMul(_t557A,x553A);
          real r5596#1 = RMul(r5595,op1_e3_l_145563);
          real op1_e3_l_235594#1 = RMul(r5596,op1_e3_l_205568);
          real r559C#1 = RMul(_t4EC7,x553A);
          real r559D#1 = RMul(r559C,z553E);
          real op1_e3_l_24559B#1 = RMul(r559D,op1_e3_l_115552);
          real _t55A2#2 = RAdd(op1_e3_l_235594,op1_e3_l_24559B);
          tensor[3] _t55A5#1 = <tensor[3]>[_t5588,_t558B,_t55A2];
          real r55A8#1 = RMul(_t557A,op1_e3_l_75547);
          real r55A9#1 = RMul(r55A8,op1_e3_l_8554A);
          real op1_e3_l_2455A7#1 = RMul(r55A9,op1_e3_l_205568);
          real _t55AE#1 = RAdd(op1_e3_l_2455A7,op1_e3_l_255583);
          real r55B2#1 = RMul(_t557A,y553C);
          real r55B3#1 = RMul(r55B2,op1_e3_l_145563);
          real op1_e3_l_2355B1#1 = RMul(r55B3,op1_e3_l_205568);
          real r55B9#1 = RMul(_t4EC7,y553C);
          real r55BA#1 = RMul(r55B9,z553E);
          real op1_e3_l_2455B8#1 = RMul(r55BA,op1_e3_l_115552);
          real _t55BF#2 = RAdd(op1_e3_l_2355B1,op1_e3_l_2455B8);
          tensor[3] _t55C2#1 = <tensor[3]>[_t558B,_t55AE,_t55BF];
          real _t55C4#1 = 0.1e2;
          real _Pow_255C7#2 = RMul(z553E,z553E);
          real op1_e3_l_1855C6#1 = RMul(_Pow_255C7,_Pow_255C7);
          real r55CC#1 = RMul(_t557A,op1_e3_l_1855C6);
          real op1_e3_l_3155CB#1 = RMul(r55CC,op1_e3_l_205568);
          real r55D1#1 = RMul(_t55C4,op1_e3_l_8554A);
          real op1_e3_l_3255D0#1 = RMul(r55D1,op1_e3_l_115552);
          real op1_e3_l_3355D5#1 = RMul(_t5540,op1_e3_l_205568);
          real r55D9#1 = RAdd(op1_e3_l_3155CB,op1_e3_l_3255D0);
          real _t55D8#1 = RAdd(r55D9,op1_e3_l_3355D5);
          tensor[3] _t55DD#1 = <tensor[3]>[_t55A2,_t55BF,_t55D8];
          tensor[3,3] hess55DF#1 = <tensor[3,3]>[_t55A5,_t55C2,_t55DD];
          real[3] _t55E1#1 = EigenVals3x3(hess55DF);
          real _t55E3#1 = Subscript<real[3]>(_t55E1,_t5542);
          real op1_e3_l_355E5#1 = VDot<3>(g5578,g5578);
          real op1_e3_l_455E8#1 = Sqrt(op1_e3_l_355E5);
          real op1_e3_l_555EB#1 = RNeg(_t55E3);
          real op1_e3_l_655EE#1 = RAdd(fBias4E63,op1_e3_l_455E8);
          real str55F1#1 = RDiv(op1_e3_l_555EB,op1_e3_l_655EE);
          bool _t55F4#1 = GT<real>(str55F1,fStrTh4E5F);
          if _t55F4 then goto ASSIGN55F8 else goto JOIN55FF
        ASSIGN55F8:  preds = [COND55F6]
          bool _t55F7#1 = GTE<real>(_t4EBA,fMaskTh4E61);
          if _t55F7 then goto ASSIGN55FB else goto JOIN55FD
        ASSIGN55FB:  preds = [COND55F9]
          bool _t55FA#1 = true;
          goto JOIN55FD
        JOIN55FD:  preds = [ASSIGN55FB,COND55F9]
          bool _t55FC#1 = phi(_t55FA,vv4E9D)
          goto JOIN55FF
        JOIN55FF:  preds = [JOIN55FD,COND55F6]
          bool _t55FE#1 = phi(_t55FC,vv4E9D)
          goto JOIN5601
        JOIN5601:  preds = [JOIN55FF,COND5539]
          bool _t5600#1 = phi(_t55FE,vv4E9D)
          if _t5600 then goto NEW5603 else goto JOIN5609
        NEW5603:  preds = [COND5602]
          new point(npos54E9,hh4E8D);
          int _t5604#1 = 1;
          int born5606#1 = IAdd(born4E99,_t5604);
          goto JOIN5609
        JOIN5609:  preds = [ASSIGN5607,COND5602]
          int born5608#1 = phi(born5606,born4E99)
          if _t54F0 then goto JOIN560C else goto JOIN560C
        JOIN560C:  preds = [COND560A,COND560A]
          bool _t560B#1 = phi(vv4E9D,vv4E9D)
          if _t560B then goto ASSIGN560F else goto ASSIGN59F0
        ASSIGN560F:  preds = [COND560D]
          bool _t560E#1 = true;
          goto JOIN5612
        JOIN5612:  preds = [ASSIGN560F,ASSIGN59F1]
          bool _t5610#1 = phi(_t560E,_t5611)
          if _t5610 then goto ASSIGN5615 else goto JOIN5620
        ASSIGN5615:  preds = [COND5613]
          string _t5614#1 = "(i#";
          string _t5616#1 = " @ ";
          string _t5618#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID4E8B,_t5614,iter4E87,_t5616,pos5234,_t5618);
          string _t561B#1 = "nn=0; after birthing mvmt=";
          string _t561D#1 = "\n";
          Print<[string,real,string]>(_t561B,mvmt4E95,_t561D);
          goto JOIN5620
        JOIN5620:  preds = [MASSIGN561F,COND5613]
          self.pos = pos5234;
          self._pos = pos5234;
          self.step = step5231;
          self.trav = trav5245;
          self.born = born5608;
          active
          goto JOIN5628
        JOIN5628:  preds = [*ACTIVE5626,COND5346]
          int born5627#9 = phi(born4E99)
          tensor[3,3] _t5629#3 = fPerp5375 (pos5234);
          tensor[3] projParam562C#1 = ProjectLast<tensor[3,3],[0]>(_t5629);
          real vdot562D#2 = VDot<3>(projParam562C,force52E3);
          tensor[3] projParam562E#1 = ProjectLast<tensor[3,3],[1]>(_t5629);
          real vdot562F#2 = VDot<3>(projParam562E,force52E3);
          tensor[3] projParam5630#1 = ProjectLast<tensor[3,3],[2]>(_t5629);
          real vdot5631#2 = VDot<3>(projParam5630,force52E3);
          tensor[3] op1_e3_l_3562B#3 = <tensor[3]>[vdot562D,vdot562F,vdot5631];
          tensor[3] es563A#1 = VScale<3>(hh4E8D,op1_e3_l_3562B);
          real op1_e3_l_5563D#1 = VDot<3>(op1_e3_l_3562B,op1_e3_l_3562B);
          real r5641#1 = RMul(hh4E8D,hh4E8D);
          real op1_e3_l_65640#1 = RMul(r5641,op1_e3_l_5563D);
          real _t5645#2 = Sqrt(op1_e3_l_65640);
          bool _t5648#1 = GT<real>(_t5645,tipd4E65);
          if _t5648 then goto ASSIGN564D else goto JOIN5664
        ASSIGN564D:  preds = [COND564A]
          real op1_e3_l_10564B#2 = RDiv(tipd4E65,_t5645);
          real hh564E#1 = RMul(hh4E8D,op1_e3_l_10564B);
          real r5652#1 = vdot562D;
          real r5653#3 = RMul(hh4E8D,op1_e3_l_10564B);
          real r5654#1 = RMul(r5653,r5652);
          real r5655#1 = vdot562F;
          real r5656#1 = RMul(r5653,r5655);
          real r5657#1 = vdot5631;
          real r5658#1 = RMul(r5653,r5657);
          tensor[3] es5651#1 = <tensor[3]>[r5654,r5656,r5658];
          goto JOIN5664
        JOIN5664:  preds = [ASSIGN5661,COND564A]
          tensor[3] es5662#7 = phi(es5651,es563A)
          real hh5663#2 = phi(hh564E,hh4E8D)
          tensor[3] v5666#1 = VAdd<3>(pos4E89,step5231);
          tensor[3] _t5665#1 = VAdd<3>(v5666,es5662);
          tensor[3] _t566A#3 = fStep50BF (_t5665);
          tensor[3] fs566C#4 = VScale<3>(sfs4E79,_t566A);
          real op1_e3_l_5566F#1 = VDot<3>(_t566A,_t566A);
          real r5673#1 = RMul(sfs4E79,sfs4E79);
          real op1_e3_l_65672#1 = RMul(r5673,op1_e3_l_5566F);
          real op1_e3_l_75677#1 = VDot<3>(es5662,es5662);
          real op1_e3_l_8567A#1 = RMul(fsEps4E73,tipd4E65);
          real op1_e3_l_9567D#2 = Sqrt(op1_e3_l_75677);
          real op1_e3_l_105680#2 = Sqrt(op1_e3_l_65672);
          real op1_e3_l_115683#1 = RAdd(op1_e3_l_8567A,op1_e3_l_9567D);
          real _t5686#1 = RDiv(op1_e3_l_105680,op1_e3_l_115683);
          real _t5689#3 = 0.5e0;
          bool _t568B#1 = GT<real>(_t5686,_t5689);
          if _t568B then goto ASSIGN5690 else goto JOIN56C1
        ASSIGN5690:  preds = [COND568D]
          real hh568E#2 = RMul(hh5663,_t5689);
          bool _t5691#1 = GT<int>(verb4E77,_t5227);
          if _t5691 then goto JOIN5695 else goto JOIN5695
        JOIN5695:  preds = [COND5693,COND5693]
          bool _t5694#1 = phi(vv4E9D,vv4E9D)
          if _t5694 then goto ASSIGN5698 else goto ASSIGN59ED
        ASSIGN5698:  preds = [COND5696]
          bool _t5697#1 = true;
          goto JOIN569B
        JOIN569B:  preds = [ASSIGN5698,ASSIGN59EE]
          bool _t5699#1 = phi(_t5697,_t569A)
          if _t5699 then goto ASSIGN569E else goto JOIN56B8
        ASSIGN569E:  preds = [COND569C]
          string _t569D#1 = "(i#";
          string _t569F#1 = " @ ";
          string _t56A1#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID4E8B,_t569D,iter4E87,_t569F,pos5234,_t56A1);
          string _t56A4#1 = "nn=";
          string _t56A6#1 = "; |fs|/|es|=";
          real _t56A8#1 = RDiv(op1_e3_l_105680,op1_e3_l_9567D);
          string _t56AB#1 = " > 0.5; trying again with hh=";
          string _t56AD#1 = "; mvmt=";
          string _t56AF#3 = "\n";
          Print<[string,int,string,real,string,real,string,real,string]>(_t56A4,nn52E9,_t56A6,_t56A8,_t56AB,hh568E,_t56AD,mvmt4E95,_t56AF);
          string _t56B2#1 = "        fs=";
          Print<[string,tensor[3],string]>(_t56B2,fs566C,_t56AF);
          string _t56B5#1 = "        es=";
          Print<[string,tensor[3],string]>(_t56B5,es5662,_t56AF);
          goto JOIN56B8
        JOIN56B8:  preds = [MASSIGN56B7,COND569C]
          self.pos = pos5234;
          self._pos = pos5234;
          self.hh = hh568E;
          self.step = step5231;
          self.trav = trav5245;
          self.born = born5627;
          active
          goto JOIN56C1
        JOIN56C1:  preds = [*ACTIVE56BF,COND568D]
          real hh56C0#2 = phi(hh5663)
          tensor[3] v56C3#1 = VAdd<3>(pos4E89,step5231);
          tensor[3] v56C4#1 = VAdd<3>(v56C3,fs566C);
          tensor[3] pos56C2#7 = VAdd<3>(v56C4,es5662);
          point[] _t56C9#1 = SphereQuery<3,point>(pos56C2,rad4E85);
        FOREACH56CC:  preds = [ASSIGN56CA,NEXT5719]
          foreach (P56CB in _t56C9) on exit goto ASSIGN5748
            tensor[3] mno5711#4 = phi(_t4EBC,mno5710)
            real newE570B#6 = phi(_t4EBA,newE570A)
            int nn5717#9 = phi(_t5227,nn5716)
            real closest5205#3 = phi(rad4E85,closest570E)
          tensor[3] _t56CD#1 = P56CB.pos;
          tensor[3] op1_e3_l_1356CF#3 = VSub<3>(_t56CD,pos56C2);
          real op1_e3_l_1556D2#1 = VDot<3>(op1_e3_l_1356CF,op1_e3_l_1356CF);
          real _t56D5#2 = Sqrt(op1_e3_l_1556D2);
          real _t56D8#7 = RDiv(_t56D5,rad4E85);
          real _t56DB#1 = 0.2e1;
          real _t56DD#1 = 0.3e1;
          real _t56DF#2 = RDiv(_t56DB,_t56DD);
          bool _t56E2#1 = LT<real>(_t56D8,_t56DF);
          if _t56E2 then goto ASSIGN56E6 else goto ASSIGN571B
        ASSIGN56E6:  preds = [COND56E4]
          real _t56E5#1 = 0.1e1;
          real _t56E7#1 = -0.5646e1;
          real _t56E9#1 = 0.119835e2;
          real _t56EB#1 = -0.113535e2;
          real _t56ED#1 = 0.40550625e1;
          real op1_e3_l_7856EF#1 = RMul(_t56ED,_t56D8);
          real op1_e3_l_8056F2#1 = RAdd(_t56EB,op1_e3_l_7856EF);
          real op1_e3_l_8156F5#1 = RMul(_t56D8,op1_e3_l_8056F2);
          real op1_e3_l_8356F8#1 = RAdd(_t56E9,op1_e3_l_8156F5);
          real op1_e3_l_8456FB#1 = RMul(_t56D8,op1_e3_l_8356F8);
          real op1_e3_l_8656FE#1 = RAdd(_t56E7,op1_e3_l_8456FB);
          real op1_e3_l_875701#1 = RMul(_t56D8,op1_e3_l_8656FE);
          real _t5704#1 = RAdd(_t56E5,op1_e3_l_875701);
          goto JOIN5709
        JOIN5709:  preds = [ASSIGN5706,JOIN5746]
          real _t5707#1 = phi(_t5704,_t5708)
          real newE570A#1 = RAdd(newE570B,_t5707);
          real closest570E#1 = Min<real>(closest5205,_t56D5);
          tensor[3] mno5710#1 = VAdd<3>(mno5711,op1_e3_l_1356CF);
          int _t5714#1 = 1;
          int nn5716#1 = IAdd(nn5717,_t5714);
          goto FOREACH56CC
        ASSIGN571B:  preds = [COND56E4]
          real _t571A#1 = 0.1e1;
          bool _t571C#1 = LT<real>(_t56D8,_t571A);
          if _t571C then goto ASSIGN5720 else goto JOIN5746
        ASSIGN5720:  preds = [COND571E]
          real _t571F#1 = -0.1e-2;
          real _t5721#1 = 0.9e-1;
          real _t5723#1 = -0.54e0;
          real _t5725#1 = 0.1215e1;
          real _t5727#1 = 0.972e0;
          real op1_e3_l_675729#5 = RSub(_t56D8,_t56DF);
          real op1_e3_l_68572C#1 = RMul(_t5727,op1_e3_l_675729);
          real op1_e3_l_81572F#1 = RSub(_t5725,op1_e3_l_68572C);
          real op1_e3_l_835732#1 = RMul(op1_e3_l_81572F,op1_e3_l_675729);
          real op1_e3_l_965735#1 = RAdd(_t5723,op1_e3_l_835732);
          real op1_e3_l_985738#1 = RMul(op1_e3_l_965735,op1_e3_l_675729);
          real op1_e3_l_123573B#1 = RAdd(_t5721,op1_e3_l_985738);
          real r573F#1 = RMul(op1_e3_l_123573B,op1_e3_l_675729);
          real op1_e3_l_126573E#1 = RMul(r573F,op1_e3_l_675729);
          real _t5743#1 = RAdd(_t571F,op1_e3_l_126573E);
          goto JOIN5746
        JOIN5746:  preds = [ASSIGN5745,COND571E]
          real _t5708#1 = phi(_t5743,_t4EBA)
          goto JOIN5709
        ASSIGN5748:  preds = [FOREACH56CC]
          real _t5747#2 = IntToReal(nn5717);
          bool _t5749#2 = GT<int>(verb4E77,_t5227);
          if _t5749 then goto JOIN574D else goto JOIN574D
        JOIN574D:  preds = [COND574B,COND574B]
          bool _t574C#1 = phi(vv4E9D,vv4E9D)
          if _t574C then goto ASSIGN5750 else goto ASSIGN59EA
        ASSIGN5750:  preds = [COND574E]
          bool _t574F#1 = true;
          goto JOIN5753
        JOIN5753:  preds = [ASSIGN5750,ASSIGN59EB]
          bool _t5751#1 = phi(_t574F,_t5752)
          if _t5751 then goto ASSIGN5756 else goto JOIN5765
        ASSIGN5756:  preds = [COND5754]
          string _t5755#1 = "(i#";
          string _t5757#1 = " @ ";
          string _t5759#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID4E8B,_t5755,iter4E87,_t5757,pos56C2,_t5759);
          string _t575C#1 = "nn=";
          string _t575E#1 = "; oldE=";
          string _t5760#1 = " newE=";
          string _t5762#1 = "\n";
          Print<[string,int,string,real,string,real,string]>(_t575C,nn5717,_t575E,oldE5298,_t5760,newE570B,_t5762);
          goto JOIN5765
        JOIN5765:  preds = [MASSIGN5764,COND5754]
          real _t5766#2 = RSub(newE570B,oldE5298);
          tensor[3] _t5769#2 = VSub<3>(pos56C2,pos5234);
          tensor[3] op1_e3_l_17576C#1 = VNeg<3>(force52E3);
          real op1_e3_l_18576F#2 = VDot<3>(_t5769,op1_e3_l_17576C);
          real _t5772#1 = RMul(gdeTest4E6D,op1_e3_l_18576F);
          bool _t5775#1 = GT<real>(_t5766,_t5772);
          if _t5775 then goto ASSIGN577A else goto JOIN57C7
        ASSIGN577A:  preds = [COND5777]
          real hh5778#3 = RMul(hh56C0,gdeBack4E6F);
          bool _t577B#1 = EQ<real>(_t4EBA,hh5778);
          if _t577B then goto ASSIGN577F else goto JOIN5789
        ASSIGN577F:  preds = [COND577D]
          string _t577E#1 = "(i#";
          string _t5780#1 = " @ ";
          string _t5782#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID4E8B,_t577E,iter4E87,_t5780,pos56C2,_t5782);
          string _t5785#1 = "backtracked all the way to hh=0\n";
          Print<[string]>(_t5785);
          die
          goto JOIN5789
        JOIN5789:  preds = [*DIE5788,COND577D]
          if _t5749 then goto JOIN578C else goto JOIN578C
        JOIN578C:  preds = [COND578A,COND578A]
          bool _t578B#1 = phi(vv4E9D,vv4E9D)
          if _t578B then goto ASSIGN578F else goto ASSIGN59E7
        ASSIGN578F:  preds = [COND578D]
          bool _t578E#1 = true;
          goto JOIN5792
        JOIN5792:  preds = [ASSIGN578F,ASSIGN59E8]
          bool _t5790#1 = phi(_t578E,_t5791)
          if _t5790 then goto ASSIGN5795 else goto JOIN57BD
        ASSIGN5795:  preds = [COND5793]
          string _t5794#1 = "(i#";
          string _t5796#1 = " @ ";
          string _t5798#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID4E8B,_t5794,iter4E87,_t5796,pos56C2,_t5798);
          string _t579B#1 = "nn=";
          string _t579D#1 = "; oldE=";
          string _t579F#1 = " newE=";
          string _t57A1#1 = "; backtracking; hh=";
          string _t57A3#1 = "; mvmt=";
          string _t57A5#7 = "\n";
          Print<[string,int,string,real,string,real,string,real,string,real,string]>(_t579B,nn5717,_t579D,oldE5298,_t579F,newE570B,_t57A1,hh5778,_t57A3,mvmt4E95,_t57A5);
          string _t57A8#1 = "      fs=";
          Print<[string,tensor[3],string]>(_t57A8,fs566C,_t57A5);
          string _t57AB#1 = "      es=";
          Print<[string,tensor[3],string]>(_t57AB,es5662,_t57A5);
          string _t57AE#1 = "      newE - oldE=";
          Print<[string,real,string]>(_t57AE,_t5766,_t57A5);
          string _t57B1#1 = "      force=";
          Print<[string,tensor[3],string]>(_t57B1,force52E3,_t57A5);
          string _t57B4#1 = "      dpos=";
          Print<[string,tensor[3],string]>(_t57B4,_t5769,_t57A5);
          string _t57B7#1 = "      0.5*(pos - oldpos).(-force)=";
          real _t57B9#1 = RMul(_t5689,op1_e3_l_18576F);
          Print<[string,real,string]>(_t57B7,_t57B9,_t57A5);
          goto JOIN57BD
        JOIN57BD:  preds = [MASSIGN57BC,COND5793]
          self.pos = pos5234;
          self._pos = pos5234;
          self.hh = hh5778;
          self.step = step5231;
          self.trav = trav5245;
          self.closest = closest5205;
          self.born = born5627;
          active
          goto JOIN57C7
        JOIN57C7:  preds = [*ACTIVE57C5,COND5777]
          real hh57C6#1 = phi(hh56C0)
          tensor[3] pos5211#8 = phi(pos56C2)
          real hh520F#2 = RMul(hh57C6,gdeOppor4E71);
          tensor[3] v57CA#1 = VAdd<3>(step5231,fs566C);
          tensor[3] step520D#3 = VAdd<3>(v57CA,es5662);
          real op1_e3_l_1257CE#1 = VDot<3>(step520D,step520D);
          real op1_e3_l_1357D1#1 = Sqrt(op1_e3_l_1257CE);
          real _t57D4#4 = RDiv(op1_e3_l_1357D1,tipd4E65);
          real r57D7#1 = RAdd(trav4E93,op1_e3_l_75242);
          real trav5209#1 = RAdd(r57D7,_t57D4);
          real op1_e3_l_2557DB#1 = RSub(mvmt4E95,_t57D4);
          real op1_e3_l_2757DE#1 = RMul(hist4E7B,op1_e3_l_2557DB);
          real mvmt5207#1 = RAdd(_t57D4,op1_e3_l_2757DE);
          bool _t57E3#1 = LT<real>(_t57D4,pcmvEps4E75);
          if _t57E3 then goto ASSIGN57E7 else goto JOIN599D
        ASSIGN57E7:  preds = [COND57E5]
          bool _t57E6#3 = GT<int>(pcp4E7D,_t5227);
          if _t57E6 then goto ASSIGN57EA else goto JOIN57F3
        ASSIGN57EA:  preds = [COND57E8]
          bool _t57E9#1 = GT<int>(iter4E87,_t5227);
          if _t57E9 then goto ASSIGN57ED else goto JOIN57F1
        ASSIGN57ED:  preds = [COND57EB]
          int _t57EC#1 = IMod(iter4E87,pcp4E7D);
          bool _t57EE#1 = EQ<int>(_t5227,_t57EC);
          goto JOIN57F1
        JOIN57F1:  preds = [ASSIGN57EF,COND57EB]
          bool _t57F0#1 = phi(_t57EE,vv4E9D)
          goto JOIN57F3
        JOIN57F3:  preds = [JOIN57F1,COND57E8]
          bool _t57F2#1 = phi(_t57F0,vv4E9D)
          if _t57F2 then goto ASSIGN57F6 else goto JOIN5802
        ASSIGN57F6:  preds = [COND57F4]
          int _t57F5#1 = IDiv(iter4E87,pcp4E7D);
          int _t57F7#2 = 2;
          int _t57F9#1 = IMod(_t57F5,_t57F7);
          int _t57FB#1 = IMul(_t57F9,_t57F7);
          int _t57FD#1 = 1;
          int _t57FF#1 = ISub(_t57FB,_t57FD);
          goto JOIN5802
        JOIN5802:  preds = [ASSIGN5800,COND57F4]
          int _t5801#1 = phi(_t57FF,_t5227)
          bool _t5803#1 = NEQ<int>(_t5801,_t5227);
          if _t5803 then goto COND5806 else goto JOIN599C
        COND5806:  preds = [COND5805]
          if _t57E6 then goto ASSIGN5808 else goto JOIN5811
        ASSIGN5808:  preds = [COND5806]
          bool _t5807#1 = GT<int>(iter4E87,_t5227);
          if _t5807 then goto ASSIGN580B else goto JOIN580F
        ASSIGN580B:  preds = [COND5809]
          int _t580A#1 = IMod(iter4E87,pcp4E7D);
          bool _t580C#1 = EQ<int>(_t5227,_t580A);
          goto JOIN580F
        JOIN580F:  preds = [ASSIGN580D,COND5809]
          bool _t580E#1 = phi(_t580C,vv4E9D)
          goto JOIN5811
        JOIN5811:  preds = [JOIN580F,COND5806]
          bool _t5810#1 = phi(_t580E,vv4E9D)
          if _t5810 then goto ASSIGN5814 else goto JOIN5820
        ASSIGN5814:  preds = [COND5812]
          int _t5813#1 = IDiv(iter4E87,pcp4E7D);
          int _t5815#2 = 2;
          int _t5817#1 = IMod(_t5813,_t5815);
          int _t5819#1 = IMul(_t5817,_t5815);
          int _t581B#1 = 1;
          int _t581D#1 = ISub(_t5819,_t581B);
          goto JOIN5820
        JOIN5820:  preds = [ASSIGN581E,COND5812]
          int _t581F#1 = phi(_t581D,_t5227)
          bool _t5821#1 = GT<int>(_t581F,_t5227);
          if _t5821 then goto ASSIGN5825 else goto JOIN5831
        ASSIGN5825:  preds = [COND5823]
          bool _t5824#1 = LT<real>(newE570B,_t4EBA);
          if _t5824 then goto ASSIGN5828 else goto JOIN582F
        ASSIGN5828:  preds = [COND5826]
          bool _t5827#1 = LT<int>(nn5717,nnmin4E81);
          if _t5827 then goto ASSIGN582B else goto JOIN582D
        ASSIGN582B:  preds = [COND5829]
          bool _t582A#1 = LT<int>(born5627,nnmax4E83);
          goto JOIN582D
        JOIN582D:  preds = [ASSIGN582B,COND5829]
          bool _t582C#1 = phi(_t582A,vv4E9D)
          goto JOIN582F
        JOIN582F:  preds = [JOIN582D,COND5826]
          bool _t582E#1 = phi(_t582C,vv4E9D)
          goto JOIN5831
        JOIN5831:  preds = [JOIN582F,COND5823]
          bool _t5830#1 = phi(_t582E,vv4E9D)
          if _t5830 then goto ASSIGN583D else goto COND599E
        ASSIGN583D:  preds = [COND5832]
          real realLit5834#1 = 0.1e1;
          real r5835#3 = RDiv(realLit5834,_t5747);
          real r5836#1 = TensorIndex<tensor[3],[0]>(mno5711);
          real r5837#2 = RMul(r5835,r5836);
          real r5838#1 = TensorIndex<tensor[3],[1]>(mno5711);
          real r5839#2 = RMul(r5835,r5838);
          real r583A#1 = TensorIndex<tensor[3],[2]>(mno5711);
          real r583B#2 = RMul(r5835,r583A);
          tensor[3] op1_e3_l_65833#2 = <tensor[3]>[r5837,r5839,r583B];
          real op1_e3_l_85846#1 = VDot<3>(op1_e3_l_65833,op1_e3_l_65833);
          real op1_e3_l_95849#1 = Sqrt(op1_e3_l_85846);
          real realLit584D#1 = 0.1e1;
          real op1_e3_l_11584C#3 = RDiv(realLit584D,op1_e3_l_95849);
          real r5852#1 = r5837;
          real r5853#1 = RMul(tipd4E65,r5852);
          real r5854#1 = RMul(r5853,op1_e3_l_11584C);
          real r5855#1 = r5839;
          real r5856#1 = RMul(tipd4E65,r5855);
          real r5857#1 = RMul(r5856,op1_e3_l_11584C);
          real r5858#1 = r583B;
          real r5859#1 = RMul(tipd4E65,r5858);
          real r585A#1 = RMul(r5859,op1_e3_l_11584C);
          tensor[3] op1_e3_l_125851#1 = <tensor[3]>[r5854,r5857,r585A];
          tensor[3] npos5866#3 = VSub<3>(pos5211,op1_e3_l_125851);
          tensor[3] _t5869#1 = fStep50BF (npos5866);
          tensor[3] op1_e3_l_16586B#2 = VScale<3>(sfs4E79,_t5869);
          tensor[3] npos586E#1 = VAdd<3>(npos5866,op1_e3_l_16586B);
          tensor[3] _t5871#1 = fStep50BF (npos586E);
          tensor[3] op1_e3_l_195873#1 = VScale<3>(sfs4E79,_t5871);
          tensor[3] v5877#1 = VAdd<3>(npos5866,op1_e3_l_16586B);
          tensor[3] npos5876#6 = VAdd<3>(v5877,op1_e3_l_195873);
          bool birth587B#4 = true;
          int _t587D#2 = 2;
          bool _t587F#1 = EQ<int>(fDim4E7F,_t587D);
          if _t587F then goto ASSIGN5883 else goto JOIN58B6
        ASSIGN5883:  preds = [COND5881]
          int _t5882#1 = 4;
          bool _t5884#1 = GTE<int>(nn5717,_t5882);
          if _t5884 then goto ASSIGN5889 else goto JOIN58B4
        ASSIGN5889:  preds = [COND5886]
          real _t5887#1 = RMul(tipd4E65,mabd4E67);
          point[] _t588A#1 = SphereQuery<3,point>(npos5876,_t5887);
        FOREACH588D:  preds = [ASSIGN588B,NEXT588E]
          foreach (P588C in _t588A) on exit goto COND5890
            bool birth588F#2 = phi(birth587B,vv4E9D)
          goto FOREACH588D
        COND5890:  preds = [FOREACH588D]
          if birth588F then goto ASSIGN5892 else goto JOIN58B2
        ASSIGN5892:  preds = [COND5890]
          real _t5891#1 = VIndex<3,0>(pos5211);
          real _t5893#1 = urnd4DF7 (_t5891);
          real _t5895#1 = VIndex<3,1>(pos5211);
          real _t5897#1 = urnd4DF7 (_t5895);
          real _t5899#1 = VIndex<3,2>(pos5211);
          real _t589B#1 = urnd4DF7 (_t5899);
          real r589E#1 = RAdd(_t5893,_t5897);
          real _t589D#1 = RAdd(r589E,_t589B);
          real _t58A2#1 = 0.1e1;
          real _t58A4#1 = MathFn<fmod>(_t589D,_t58A2);
          int _t58A6#1 = ISub(nnmin4E81,nn5717);
          real _t58A8#1 = IntToReal(_t58A6);
          real _t58AA#1 = IntToReal(nnmin4E81);
          real _t58AC#1 = RDiv(_t58A8,_t58AA);
          bool birth58AF#1 = LT<real>(_t58A4,_t58AC);
          goto JOIN58B2
        JOIN58B2:  preds = [ASSIGN58B0,COND5890]
          bool birth58B1#1 = phi(birth58AF,birth588F)
          goto JOIN58B4
        JOIN58B4:  preds = [JOIN58B2,COND5886]
          bool birth58B3#1 = phi(birth58B1,birth587B)
          goto JOIN58B6
        JOIN58B6:  preds = [JOIN58B4,COND5881]
          bool birth58B5#1 = phi(birth58B3,birth587B)
          if birth58B5 then goto ASSIGN58BA else goto JOIN5998
        ASSIGN58BA:  preds = [COND58B7]
          tensor[3] op1_e3_l_3358B8#2 = VSub<3>(npos5876,_t4EBC);
          real op1_e3_l_3558BB#1 = VDot<3>(op1_e3_l_3358B8,op1_e3_l_3358B8);
          real _t58BE#2 = Sqrt(op1_e3_l_3558BB);
          bool _t58C1#1 = LT<real>(_t58BE,_t4EC7);
          if _t58C1 then goto ASSIGN58C5 else goto JOIN58C9
        ASSIGN58C5:  preds = [COND58C3]
          real _t58C4#1 = 0.3e1;
          bool _t58C6#1 = GT<real>(_t58BE,_t58C4);
          goto JOIN58C9
        JOIN58C9:  preds = [ASSIGN58C7,COND58C3]
          bool _t58C8#1 = phi(_t58C6,vv4E9D)
          if _t58C8 then goto ASSIGN58CC else goto JOIN598E
        ASSIGN58CC:  preds = [COND58CA]
          real x58CB#6 = VIndex<3,0>(npos5876);
          real y58CD#6 = VIndex<3,1>(npos5876);
          real z58CF#10 = VIndex<3,2>(npos5876);
          real _t58D1#6 = 0.2e1;
          real op1_e3_l_658D3#2 = RMul(x58CB,x58CB);
          real op1_e3_l_758D6#2 = RMul(y58CD,y58CD);
          real op1_e3_l_858D9#8 = RMul(z58CF,z58CF);
          real r58DD#1 = RAdd(op1_e3_l_658D3,op1_e3_l_758D6);
          real op1_e3_l_958DC#2 = RAdd(r58DD,op1_e3_l_858D9);
          real op1_e3_l_1158E1#7 = Cos(op1_e3_l_958DC);
          real r58E5#1 = RMul(_t58D1,x58CB);
          real r58E6#1 = RMul(r58E5,op1_e3_l_858D9);
          real _t58E4#1 = RMul(r58E6,op1_e3_l_1158E1);
          real r58EC#1 = RMul(_t58D1,y58CD);
          real r58ED#1 = RMul(r58EC,op1_e3_l_858D9);
          real _t58EB#1 = RMul(r58ED,op1_e3_l_1158E1);
          real _Pow2_58F3#1 = RMul(z58CF,z58CF);
          real op1_e3_l_1458F2#3 = RMul(z58CF,_Pow2_58F3);
          real op1_e3_l_2058F7#8 = Sin(op1_e3_l_958DC);
          real r58FB#1 = RMul(_t58D1,op1_e3_l_1458F2);
          real op1_e3_l_2158FA#1 = RMul(r58FB,op1_e3_l_1158E1);
          real r5900#1 = RMul(_t58D1,z58CF);
          real op1_e3_l_2258FF#1 = RMul(r5900,op1_e3_l_2058F7);
          real _t5904#1 = RAdd(op1_e3_l_2158FA,op1_e3_l_2258FF);
          tensor[3] g5907#2 = <tensor[3]>[_t58E4,_t58EB,_t5904];
          real _t5909#6 = -0.4e1;
          real r590C#1 = RMul(_t5909,op1_e3_l_658D3);
          real r590D#1 = RMul(r590C,op1_e3_l_858D9);
          real op1_e3_l_24590B#1 = RMul(r590D,op1_e3_l_2058F7);
          real r5913#1 = RMul(_t58D1,op1_e3_l_858D9);
          real op1_e3_l_255912#2 = RMul(r5913,op1_e3_l_1158E1);
          real _t5917#1 = RAdd(op1_e3_l_24590B,op1_e3_l_255912);
          real r591B#1 = RMul(_t5909,x58CB);
          real r591C#1 = RMul(r591B,y58CD);
          real r591D#1 = RMul(r591C,op1_e3_l_858D9);
          real _t591A#2 = RMul(r591D,op1_e3_l_2058F7);
          real r5924#1 = RMul(_t5909,x58CB);
          real r5925#1 = RMul(r5924,op1_e3_l_1458F2);
          real op1_e3_l_235923#1 = RMul(r5925,op1_e3_l_2058F7);
          real r592B#1 = RMul(_t4EC7,x58CB);
          real r592C#1 = RMul(r592B,z58CF);
          real op1_e3_l_24592A#1 = RMul(r592C,op1_e3_l_1158E1);
          real _t5931#2 = RAdd(op1_e3_l_235923,op1_e3_l_24592A);
          tensor[3] _t5934#1 = <tensor[3]>[_t5917,_t591A,_t5931];
          real r5937#1 = RMul(_t5909,op1_e3_l_758D6);
          real r5938#1 = RMul(r5937,op1_e3_l_858D9);
          real op1_e3_l_245936#1 = RMul(r5938,op1_e3_l_2058F7);
          real _t593D#1 = RAdd(op1_e3_l_245936,op1_e3_l_255912);
          real r5941#1 = RMul(_t5909,y58CD);
          real r5942#1 = RMul(r5941,op1_e3_l_1458F2);
          real op1_e3_l_235940#1 = RMul(r5942,op1_e3_l_2058F7);
          real r5948#1 = RMul(_t4EC7,y58CD);
          real r5949#1 = RMul(r5948,z58CF);
          real op1_e3_l_245947#1 = RMul(r5949,op1_e3_l_1158E1);
          real _t594E#2 = RAdd(op1_e3_l_235940,op1_e3_l_245947);
          tensor[3] _t5951#1 = <tensor[3]>[_t591A,_t593D,_t594E];
          real _t5953#1 = 0.1e2;
          real _Pow_25956#2 = RMul(z58CF,z58CF);
          real op1_e3_l_185955#1 = RMul(_Pow_25956,_Pow_25956);
          real r595B#1 = RMul(_t5909,op1_e3_l_185955);
          real op1_e3_l_31595A#1 = RMul(r595B,op1_e3_l_2058F7);
          real r5960#1 = RMul(_t5953,op1_e3_l_858D9);
          real op1_e3_l_32595F#1 = RMul(r5960,op1_e3_l_1158E1);
          real op1_e3_l_335964#1 = RMul(_t58D1,op1_e3_l_2058F7);
          real r5968#1 = RAdd(op1_e3_l_31595A,op1_e3_l_32595F);
          real _t5967#1 = RAdd(r5968,op1_e3_l_335964);
          tensor[3] _t596C#1 = <tensor[3]>[_t5931,_t594E,_t5967];
          tensor[3,3] hess596E#1 = <tensor[3,3]>[_t5934,_t5951,_t596C];
          real[3] _t5970#1 = EigenVals3x3(hess596E);
          real _t5972#1 = Subscript<real[3]>(_t5970,_t587D);
          real op1_e3_l_35974#1 = VDot<3>(g5907,g5907);
          real op1_e3_l_45977#1 = Sqrt(op1_e3_l_35974);
          real op1_e3_l_5597A#1 = RNeg(_t5972);
          real op1_e3_l_6597D#1 = RAdd(fBias4E63,op1_e3_l_45977);
          real str5980#1 = RDiv(op1_e3_l_5597A,op1_e3_l_6597D);
          bool _t5983#1 = GT<real>(str5980,fStrTh4E5F);
          if _t5983 then goto ASSIGN5987 else goto JOIN598C
        ASSIGN5987:  preds = [COND5985]
          bool _t5986#1 = GTE<real>(_t4EBA,fMaskTh4E61);
          if _t5986 then goto JOIN598A else goto JOIN598A
        JOIN598A:  preds = [COND5988,COND5988]
          bool _t5989#1 = phi(birth587B,vv4E9D)
          goto JOIN598C
        JOIN598C:  preds = [JOIN598A,COND5985]
          bool _t598B#1 = phi(_t5989,vv4E9D)
          goto JOIN598E
        JOIN598E:  preds = [JOIN598C,COND58CA]
          bool _t598D#1 = phi(_t598B,vv4E9D)
          if _t598D then goto NEW5990 else goto JOIN5996
        NEW5990:  preds = [COND598F]
          new point(npos5876,hh520F);
          int _t5991#1 = 1;
          int born5993#1 = IAdd(born5627,_t5991);
          goto JOIN5996
        JOIN5996:  preds = [ASSIGN5994,COND598F]
          int born5995#1 = phi(born5993,born5627)
          goto JOIN5998
        JOIN5998:  preds = [JOIN5996,COND58B7]
          int born5997#1 = phi(born5995,born5627)
          goto JOIN599A
        JOIN599A:  preds = [JOIN5998,JOIN59E5]
          int born5999#1 = phi(born5997,born5627)
          goto JOIN599C
        JOIN599C:  preds = [JOIN599A,COND5805]
          int born599B#1 = phi(born5999,born5627)
          goto JOIN599D
        JOIN599D:  preds = [JOIN599C,COND57E5]
          int born5203#1 = phi(born599B,born5627)
          goto JOIN5212
        COND599E:  preds = [COND5832]
          if _t57E6 then goto ASSIGN59A0 else goto JOIN59A9
        ASSIGN59A0:  preds = [COND599E]
          bool _t599F#1 = GT<int>(iter4E87,_t5227);
          if _t599F then goto ASSIGN59A3 else goto JOIN59A7
        ASSIGN59A3:  preds = [COND59A1]
          int _t59A2#1 = IMod(iter4E87,pcp4E7D);
          bool _t59A4#1 = EQ<int>(_t5227,_t59A2);
          goto JOIN59A7
        JOIN59A7:  preds = [ASSIGN59A5,COND59A1]
          bool _t59A6#1 = phi(_t59A4,vv4E9D)
          goto JOIN59A9
        JOIN59A9:  preds = [JOIN59A7,COND599E]
          bool _t59A8#1 = phi(_t59A6,vv4E9D)
          if _t59A8 then goto ASSIGN59AC else goto JOIN59B8
        ASSIGN59AC:  preds = [COND59AA]
          int _t59AB#1 = IDiv(iter4E87,pcp4E7D);
          int _t59AD#2 = 2;
          int _t59AF#1 = IMod(_t59AB,_t59AD);
          int _t59B1#1 = IMul(_t59AF,_t59AD);
          int _t59B3#1 = 1;
          int _t59B5#1 = ISub(_t59B1,_t59B3);
          goto JOIN59B8
        JOIN59B8:  preds = [ASSIGN59B6,COND59AA]
          int _t59B7#1 = phi(_t59B5,_t5227)
          bool _t59B9#1 = LT<int>(_t59B7,_t5227);
          if _t59B9 then goto ASSIGN59BD else goto JOIN59E5
        ASSIGN59BD:  preds = [COND59BB]
          bool _t59BC#1 = GT<real>(newE570B,_t4EBA);
          if _t59BC then goto ASSIGN59C0 else goto JOIN59E4
        ASSIGN59C0:  preds = [COND59BE]
          bool _t59BF#1 = GT<int>(nn5717,nnmax4E83);
          if _t59BF then goto ASSIGN59C3 else goto JOIN59E3
        ASSIGN59C3:  preds = [COND59C1]
          real _t59C2#1 = VIndex<3,0>(pos5211);
          real _t59C4#1 = urnd4DF7 (_t59C2);
          real _t59C6#1 = VIndex<3,1>(pos5211);
          real _t59C8#1 = urnd4DF7 (_t59C6);
          real _t59CA#1 = VIndex<3,2>(pos5211);
          real _t59CC#1 = urnd4DF7 (_t59CA);
          real r59CF#1 = RAdd(_t59C4,_t59C8);
          real _t59CE#1 = RAdd(r59CF,_t59CC);
          real _t59D3#1 = 0.1e1;
          real _t59D5#1 = MathFn<fmod>(_t59CE,_t59D3);
          int _t59D7#1 = ISub(nn5717,nnmax4E83);
          real _t59D9#1 = IntToReal(_t59D7);
          real _t59DB#1 = RDiv(_t59D9,_t5747);
          bool _t59DE#1 = LT<real>(_t59D5,_t59DB);
          if _t59DE then goto DIE59E1 else goto JOIN59E2
        DIE59E1:  preds = [COND59E0]
          die
          goto JOIN59E2
        JOIN59E2:  preds = [*DIE59E1,COND59E0]
          goto JOIN59E3
        JOIN59E3:  preds = [JOIN59E2,COND59C1]
          goto JOIN59E4
        JOIN59E4:  preds = [JOIN59E3,COND59BE]
          goto JOIN59E5
        JOIN59E5:  preds = [JOIN59E4,COND59BB]
          goto JOIN599A
        ASSIGN59E7:  preds = [COND578D]
          int _t59E6#1 = 1;
          bool _t5791#1 = GT<int>(verb4E77,_t59E6);
          goto JOIN5792
        ASSIGN59EA:  preds = [COND574E]
          int _t59E9#1 = 1;
          bool _t5752#1 = GT<int>(verb4E77,_t59E9);
          goto JOIN5753
        ASSIGN59ED:  preds = [COND5696]
          int _t59EC#1 = 1;
          bool _t569A#1 = GT<int>(verb4E77,_t59EC);
          goto JOIN569B
        ASSIGN59F0:  preds = [COND560D]
          int _t59EF#1 = 1;
          bool _t5611#1 = GT<int>(verb4E77,_t59EF);
          goto JOIN5612
        ASSIGN59F3:  preds = [COND54F5]
          int _t59F2#1 = 1;
          bool _t54F9#1 = GT<int>(verb4E77,_t59F2);
          goto JOIN54FA
        ASSIGN59F6:  preds = [COND4FA5]
          int _t59F5#1 = 1;
          bool _t4FA9#1 = GT<int>(verb4E77,_t59F5);
          goto JOIN4FAA
        ASSIGN59F9:  preds = [COND4EA7]
          int _t59F8#1 = 1;
          bool _t4EAB#1 = GT<int>(verb4E77,_t59F8);
          goto JOIN4EAC
    end update
  end point
## initial strand creation
  COLLECTION
    ENTRY59FB:  preds = []
      tensor[3][] ipos59FC#2 = globals.ipos4D51;
      int _t59FE#1 = 0;
      int _t5A00#1 = Length<tensor[3]>(ipos59FC);
      int _t5A02#1 = 1;
      int _t5A04#1 = ISub(_t5A00,_t5A02);
      int[] _t5A06#1 = Range(_t59FE,_t5A04);
    FOREACH5A09:  preds = [ASSIGN5A07,NEXT5A0F]
      foreach (ii5A08 in _t5A06) on exit goto RETURN5A10
      tensor[3] _t5A0A#1 = Subscript<tensor[3][]>(ipos59FC,ii5A08);
      real _t5A0C#1 = 0.1e1;
      new point(_t5A0A,_t5A0C);
      goto FOREACH5A09
    RETURN5A10:  preds = [FOREACH5A09]
      return
## global update
  ENTRY5A11:  preds = []
    real geoEps5A12#3 = globals.geoEps4D48;
    real mvmtEps5A14#3 = globals.mvmtEps4D49;
    real rpcEps5A16#3 = globals.rpcEps4D4A;
    real pchist5A18#1 = globals.pchist4D56;
    int iter5A1A#4 = globals.iter4D57;
    real rpc5A1C#1 = globals.rpc4D58;
    int popLast5A1E#1 = globals.popLast4D59;
    int pop5A20#5 = NumStrands<active>;
    bool _t5A22#1 = NEQ<int>(pop5A20,popLast5A1E);
    if _t5A22 then goto ASSIGN5A26 else goto ASSIGN5AD8
  ASSIGN5A26:  preds = [COND5A24]
    int _t5A25#1 = 1;
    goto JOIN5A29
  JOIN5A29:  preds = [ASSIGN5A26,ASSIGN5AD8]
    int _t5A27#2 = phi(_t5A25,_t5A28)
    real _t5A2A#2 = IntToReal(_t5A27);
    real op1_e3_l_35A2C#1 = RSub(rpc5A1C,_t5A2A);
    real op1_e3_l_45A2F#1 = RMul(pchist5A18,op1_e3_l_35A2C);
    real rpc5A32#5 = RAdd(_t5A2A,op1_e3_l_45A2F);
    globals.rpc4D58 = rpc5A32;
    point[] P5A36#6 = Strands<point,all>;
    (bool res5A3E#1) = all(MAP all5A38 (P5A36));
    real _t5A40#1 = 0.1e3;
    (real res5A4F#1) = sum<real>(MAP mean5A42 (P5A36));
    int num5A51#1 = NumStrands<all>;
    real rNum5A53#5 = IntToReal(num5A51);
    real op1_e3_l_35A55#1 = RDiv(res5A4F,rNum5A53);
    real percfound5A58#1 = RMul(_t5A40,op1_e3_l_35A55);
    (real res5A61#2) = sum<real>(MAP mean5A5B (P5A36));
    real mean5A63#2 = RDiv(res5A61,rNum5A53);
    (real res5A73#1) = sum<real>(MAP mean5A66 (P5A36,mean5A63));
    real op1_e3_l_45A75#1 = RDiv(res5A73,rNum5A53);
    real op1_e3_l_55A78#1 = Sqrt(op1_e3_l_45A75);
    real op1_e3_l_65A7B#1 = RMul(op1_e3_l_55A78,rNum5A53);
    real covcl5A7E#4 = RDiv(op1_e3_l_65A7B,res5A61);
    (real res5A87#4) = max<real>(MAP max5A81 (P5A36));
    string _t5A89#1 = "======= finished iter ";
    string _t5A8B#1 = " w/ ";
    string _t5A8D#3 = ")";
    string _t5A8F#1 = "; %found=";
    string _t5A91#1 = "; mean(hh)=";
    (real res5A99#1) = sum<real>(MAP mean5A93 (P5A36));
    real mean5A9B#1 = RDiv(res5A99,rNum5A53);
    string _t5A9E#1 = "; mean(cl)=";
    string _t5AA0#3 = "; COV(cl)=";
    string _t5AA2#3 = "; max(mvmt)=";
    string _t5AA4#1 = "; pc=";
    string _t5AA6#3 = "; rpc=";
    string _t5AA8#3 = "\n";
    Print<[string,int,string,int,string,string,real,string,real,string,real,string,real,string,real,string,int,string,real,string]>(_t5A89,iter5A1A,_t5A8B,pop5A20,_t5A8D,_t5A8F,percfound5A58,_t5A91,mean5A9B,_t5A9E,mean5A63,_t5AA0,covcl5A7E,_t5AA2,res5A87,_t5AA4,_t5A27,_t5AA6,rpc5A32,_t5AA8);
    if res5A3E then goto ASSIGN5AAD else goto ASSIGN5AD7
  ASSIGN5AAD:  preds = [COND5AAB]
    bool _t5AAC#1 = LT<real>(covcl5A7E,geoEps5A12);
    if _t5AAC then goto ASSIGN5AB0 else goto ASSIGN5AD6
  ASSIGN5AB0:  preds = [COND5AAE]
    bool _t5AAF#1 = LT<real>(res5A87,mvmtEps5A14);
    if _t5AAF then goto ASSIGN5AB3 else goto ASSIGN5AD5
  ASSIGN5AB3:  preds = [COND5AB1]
    bool _t5AB2#1 = LT<real>(rpc5A32,rpcEps5A16);
    goto JOIN5AB6
  JOIN5AB6:  preds = [ASSIGN5AB3,ASSIGN5AD5]
    bool _t5AB4#1 = phi(_t5AB2,_t5AB5)
    goto JOIN5AB9
  JOIN5AB9:  preds = [JOIN5AB6,ASSIGN5AD6]
    bool _t5AB7#1 = phi(_t5AB4,_t5AB8)
    goto JOIN5ABC
  JOIN5ABC:  preds = [JOIN5AB9,ASSIGN5AD7]
    bool _t5ABA#1 = phi(_t5AB7,_t5ABB)
    if _t5ABA then goto ASSIGN5ABF else goto ASSIGN5ACF
  ASSIGN5ABF:  preds = [COND5ABD]
    string _t5ABE#1 = "======= Stabilizing ";
    string _t5AC0#1 = " (iter ";
    string _t5AC2#3 = " < ";
    Print<[string,int,string,int,string,string,real,string,real,string,real,string,real,string,real,string,real,string]>(_t5ABE,pop5A20,_t5AC0,iter5A1A,_t5A8D,_t5AA0,covcl5A7E,_t5AC2,geoEps5A12,_t5AA2,res5A87,_t5AC2,mvmtEps5A14,_t5AA6,rpc5A32,_t5AC2,rpcEps5A16,_t5AA8);
    StabilizeAll;
    goto JOIN5AC6
  JOIN5AC6:  preds = [MASSIGN5AC5,MASSIGN5AD4]
    int _t5AC7#1 = 1;
    int iter5AC9#1 = IAdd(iter5A1A,_t5AC7);
    globals.iter4D57 = iter5AC9;
    globals.popLast4D59 = pop5A20;
    continue
  ASSIGN5ACF:  preds = [COND5ABD]
    string _t5ACE#1 = "======= Stabilizing ";
    string _t5AD0#1 = " (iter ";
    string _t5AD2#3 = " > ";
    Print<[string,int,string,int,string,string,real,string,real,string,real,string,real,string,real,string,real,string]>(_t5ACE,pop5A20,_t5AD0,iter5A1A,_t5A8D,_t5AA0,covcl5A7E,_t5AD2,geoEps5A12,_t5AA2,res5A87,_t5AD2,mvmtEps5A14,_t5AA6,rpc5A32,_t5AD2,rpcEps5A16,_t5AA8);
    goto JOIN5AC6
  ASSIGN5AD5:  preds = [COND5AB1]
    bool _t5AB5#1 = false;
    goto JOIN5AB6
  ASSIGN5AD6:  preds = [COND5AAE]
    bool _t5AB8#1 = false;
    goto JOIN5AB9
  ASSIGN5AD7:  preds = [COND5AAB]
    bool _t5ABB#1 = false;
    goto JOIN5ABC
  ASSIGN5AD8:  preds = [COND5A24]
    int _t5A28#1 = 0;
    goto JOIN5A29
#### end program ####
##### low-ir: after value numbering ####
## properties
  GlobalInit StabilizeAll GlobalReduce StrandSets GlobalUpdate NewStrands StrandCommunication StrandsMayDie HasInputs HasGlobals ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
## globals
  input meshData4D3A (meshData) = <no-default>
  input 0space07C6_intermedateGlobal4D3B (space) = <no-default>
  input 0data07C8_intermedateGlobal4D3C (data) = <no-default>
  input fStrTh4D3D (fStrTh) = <no-default>
  input fMaskTh4D3E (fMaskTh) = <default>
  input fBias4D3F (fBias) = <default>
  input tipd4D40 (tipd) = <default>
  input mabd4D41 (mabd) = <default>
  input travMax4D42 (travMax) = <default>
  input nfsMax4D43 (nfsMax) = <default>
  input gdeTest4D44 (gdeTest) = <default>
  input gdeBack4D45 (gdeBack) = <default>
  input gdeOppor4D46 (gdeOppor) = <default>
  input fsEps4D47 (fsEps) = <no-default>
  input geoEps4D48 (geoEps) = <default>
  input mvmtEps4D49 (mvmtEps) = <default>
  input rpcEps4D4A (rpcEps) = <default>
  input pcmvEps4D4B (pcmvEps) = <default>
  input isoval4D4C (isoval) = <default>
  input verb4D4D (verb) = <default>
  input sfs4D4E (sfs) = <default>
  input hist4D4F (hist) = <default>
  input pcp4D50 (pcp) = <default>
  input ipos4D51 (ipos) = <no-default>
  input fDim4D52 (fDim) = <default>
  global int nnmin4D53
  global int nnmax4D54
  global real rad4D55
  global real pchist4D56
  varying global int iter4D57
  varying global real rpc4D58
  varying global int popLast4D59
## functions
  function real urnd4DF7 (real x4DF8#2) {
    ENTRY4DF9:  preds = []
      int iter4DFA#1 = globals.iter4D57;
      real _t4DFC#2 = 0.e0;
      bool _t4DFE#1 = EQ<real>(x4DF8,_t4DFC);
      if _t4DFE then goto RETURN(_t4DFC)4E01 else goto JOIN4E02
    RETURN(_t4DFC)4E01:  preds = [COND4E00]
      return _t4DFC
      goto JOIN4E02
    JOIN4E02:  preds = [*RETURN(_t4DFC)4E01,COND4E00]
      real _t4E03#1 = Abs<real>(x4DF8);
      real l24E06#2 = MathFn<log2>(_t4E03);
      real _t4E08#4 = 0.2e1;
      real _t4E0A#1 = MathFn<floor>(l24E06);
      real _t4E0C#2 = 0.1e1;
      real op1_e3_l_34E0E#1 = RSub(l24E06,_t4E0A);
      real _t4E11#1 = RSub(op1_e3_l_34E0E,_t4E0C);
      real frxp4E14#1 = MathFn<pow>(_t4E08,_t4E11);
      int _t4E16#1 = 2;
      int _t4E18#1 = IMul(_t4E16,iter4DFA);
      real _t4E1A#1 = IntToReal(_t4E18);
      real _Pow_24E1D#2 = RMul(_t4E08,_t4E08);
      real _Pow4_4E1E#1 = RMul(_Pow_24E1D,_Pow_24E1D);
      real _Pow5_4E1F#2 = RMul(_t4E08,_Pow4_4E1E);
      real _Pow10_4E20#2 = RMul(_Pow5_4E1F,_Pow5_4E1F);
      real op1_e3_l_34E1C#1 = RMul(_Pow10_4E20,_Pow10_4E20);
      real op1_e3_l_44E27#1 = RAdd(op1_e3_l_34E1C,_t4E1A);
      real _t4E2A#1 = RMul(frxp4E14,op1_e3_l_44E27);
      real _t4E2D#1 = MathFn<fmod>(_t4E2A,_t4E0C);
      return _t4E2D
}
  function tensor[3] fStep50BF (tensor[3] s50C0#3) {
    ENTRY50C1:  preds = []
      real x50C2#5 = VIndex<3,0>(s50C0);
      real y50C4#6 = VIndex<3,1>(s50C0);
      real z50C6#6 = VIndex<3,2>(s50C0);
      real _t50C8#6 = 0.2e1;
      int _t50CA#2 = 2;
      real op1_e3_l_650CC#2 = RMul(x50C2,x50C2);
      real op1_e3_l_750CF#2 = RMul(y50C4,y50C4);
      real op1_e3_l_850D2#11 = RMul(z50C6,z50C6);
      real r50D6#1 = RAdd(op1_e3_l_650CC,op1_e3_l_750CF);
      real op1_e3_l_950D5#2 = RAdd(r50D6,op1_e3_l_850D2);
      real op1_e3_l_1150DA#7 = Cos(op1_e3_l_950D5);
      real r50DE#1 = RMul(_t50C8,x50C2);
      real r50DF#1 = RMul(r50DE,op1_e3_l_850D2);
      real _t50DD#1 = RMul(r50DF,op1_e3_l_1150DA);
      real r50E5#1 = RMul(_t50C8,y50C4);
      real r50E6#1 = RMul(r50E5,op1_e3_l_850D2);
      real _t50E4#1 = RMul(r50E6,op1_e3_l_1150DA);
      real op1_e3_l_1450EB#3 = RMul(z50C6,op1_e3_l_850D2);
      real op1_e3_l_2050F0#8 = Sin(op1_e3_l_950D5);
      real r50F4#1 = RMul(_t50C8,op1_e3_l_1450EB);
      real op1_e3_l_2150F3#1 = RMul(r50F4,op1_e3_l_1150DA);
      real r50F9#1 = RMul(_t50C8,z50C6);
      real op1_e3_l_2250F8#1 = RMul(r50F9,op1_e3_l_2050F0);
      real _t50FD#1 = RAdd(op1_e3_l_2150F3,op1_e3_l_2250F8);
      tensor[3] g5100#1 = <tensor[3]>[_t50DD,_t50E4,_t50FD];
      real _t5102#5 = -0.4e1;
      real r5105#1 = RMul(_t5102,op1_e3_l_650CC);
      real r5106#1 = RMul(r5105,op1_e3_l_850D2);
      real op1_e3_l_245104#1 = RMul(r5106,op1_e3_l_2050F0);
      real r510C#1 = RMul(_t50C8,op1_e3_l_850D2);
      real op1_e3_l_25510B#2 = RMul(r510C,op1_e3_l_1150DA);
      real _t5110#1 = RAdd(op1_e3_l_245104,op1_e3_l_25510B);
      real r5114#2 = RMul(_t5102,x50C2);
      real r5115#1 = RMul(r5114,y50C4);
      real r5116#1 = RMul(r5115,op1_e3_l_850D2);
      real _t5113#2 = RMul(r5116,op1_e3_l_2050F0);
      real _t511C#2 = 0.4e1;
      real r5120#1 = RMul(r5114,op1_e3_l_1450EB);
      real op1_e3_l_23511E#1 = RMul(r5120,op1_e3_l_2050F0);
      real r5126#1 = RMul(_t511C,x50C2);
      real r5127#1 = RMul(r5126,z50C6);
      real op1_e3_l_245125#1 = RMul(r5127,op1_e3_l_1150DA);
      real _t512C#2 = RAdd(op1_e3_l_23511E,op1_e3_l_245125);
      tensor[3] _t512F#1 = <tensor[3]>[_t5110,_t5113,_t512C];
      real r5132#1 = RMul(_t5102,op1_e3_l_750CF);
      real r5133#1 = RMul(r5132,op1_e3_l_850D2);
      real op1_e3_l_245131#1 = RMul(r5133,op1_e3_l_2050F0);
      real _t5138#1 = RAdd(op1_e3_l_245131,op1_e3_l_25510B);
      real r513C#1 = RMul(_t5102,y50C4);
      real r513D#1 = RMul(r513C,op1_e3_l_1450EB);
      real op1_e3_l_23513B#1 = RMul(r513D,op1_e3_l_2050F0);
      real r5143#1 = RMul(_t511C,y50C4);
      real r5144#1 = RMul(r5143,z50C6);
      real op1_e3_l_245142#1 = RMul(r5144,op1_e3_l_1150DA);
      real _t5149#2 = RAdd(op1_e3_l_23513B,op1_e3_l_245142);
      tensor[3] _t514C#1 = <tensor[3]>[_t5113,_t5138,_t5149];
      real _t514E#1 = 0.1e2;
      real op1_e3_l_185150#1 = RMul(op1_e3_l_850D2,op1_e3_l_850D2);
      real r5156#1 = RMul(_t5102,op1_e3_l_185150);
      real op1_e3_l_315155#1 = RMul(r5156,op1_e3_l_2050F0);
      real r515B#1 = RMul(_t514E,op1_e3_l_850D2);
      real op1_e3_l_32515A#1 = RMul(r515B,op1_e3_l_1150DA);
      real op1_e3_l_33515F#1 = RMul(_t50C8,op1_e3_l_2050F0);
      real r5163#1 = RAdd(op1_e3_l_315155,op1_e3_l_32515A);
      real _t5162#1 = RAdd(r5163,op1_e3_l_33515F);
      tensor[3] _t5167#1 = <tensor[3]>[_t512C,_t5149,_t5162];
      tensor[3,3] hess5169#1 = <tensor[3,3]>[_t512F,_t514C,_t5167];
      (real[3] evals516B#1,tensor[3][3] E516C#1) = EigenVecs3x3(hess5169);
      real _t516E#1 = 0.1e1;
      real _t5170#1 = Subscript<real[3]>(evals516B,_t50CA);
      tensor[3] _t5172#4 = Subscript<tensor[3][3]>(E516C,_t50CA);
      real op1_e3_l_55174#1 = RDiv(_t516E,_t5170);
      real op1_e3_l_65177#3 = RNeg(op1_e3_l_55174);
      real op1_e3_l_7517A#3 = VDot<3>(_t5172,g5100);
      real r517E#1 = TensorIndex<tensor[3],[0]>(_t5172);
      real r517F#1 = RMul(op1_e3_l_65177,r517E);
      real r5180#1 = RMul(r517F,op1_e3_l_7517A);
      real r5181#1 = TensorIndex<tensor[3],[1]>(_t5172);
      real r5182#1 = RMul(op1_e3_l_65177,r5181);
      real r5183#1 = RMul(r5182,op1_e3_l_7517A);
      real r5184#1 = TensorIndex<tensor[3],[2]>(_t5172);
      real r5185#1 = RMul(op1_e3_l_65177,r5184);
      real r5186#1 = RMul(r5185,op1_e3_l_7517A);
      tensor[3] up517D#4 = <tensor[3]>[r5180,r5183,r5186];
      real _t5192#2 = VIndex<3,0>(up517D);
      bool _t5194#1 = EQ<real>(_t5192,_t5192);
      bool _t5196#1 = BNot(_t5194);
      if _t5196 then goto ASSIGN519A else goto ASSIGN51A7
    ASSIGN519A:  preds = [COND5198]
      bool _t5199#1 = true;
      goto JOIN519D
    JOIN519D:  preds = [ASSIGN519A,JOIN51B0]
      bool _t519B#1 = phi(_t5199,_t519C)
      if _t519B then goto ASSIGN51A0 else goto JOIN51A4
    ASSIGN51A0:  preds = [COND519E]
      real _t519F#3 = +inf;
      tensor[3] _t51A1#1 = <tensor[3]>[_t519F,_t519F,_t519F];
      return _t51A1
      goto JOIN51A4
    JOIN51A4:  preds = [*RETURN(_t51A1)51A3,COND519E]
      return up517D
    ASSIGN51A7:  preds = [COND5198]
      real _t51A6#2 = VIndex<3,1>(up517D);
      bool _t51A8#1 = EQ<real>(_t51A6,_t51A6);
      bool _t51AA#1 = BNot(_t51A8);
      if _t51AA then goto ASSIGN51AE else goto ASSIGN51B2
    ASSIGN51AE:  preds = [COND51AC]
      bool _t51AD#1 = true;
      goto JOIN51B0
    JOIN51B0:  preds = [ASSIGN51AE,ASSIGN51B5]
      bool _t519C#1 = phi(_t51AD,_t51AF)
      goto JOIN519D
    ASSIGN51B2:  preds = [COND51AC]
      real _t51B1#2 = VIndex<3,2>(up517D);
      bool _t51B3#1 = EQ<real>(_t51B1,_t51B1);
      bool _t51AF#1 = BNot(_t51B3);
      goto JOIN51B0
}
  function tensor[3,3] fPerp5375 (tensor[3] s5376#3) {
    ENTRY5377:  preds = []
      real x5378#4 = VIndex<3,0>(s5376);
      real y537A#5 = VIndex<3,1>(s5376);
      real z537C#5 = VIndex<3,2>(s5376);
      real _t537E#2 = 0.2e1;
      int _t5380#1 = 2;
      real _t5382#5 = -0.4e1;
      real op1_e3_l_115384#2 = RMul(x5378,x5378);
      real op1_e3_l_125387#2 = RMul(y537A,y537A);
      real op1_e3_l_13538A#9 = RMul(z537C,z537C);
      real r538E#1 = RAdd(op1_e3_l_115384,op1_e3_l_125387);
      real op1_e3_l_14538D#2 = RAdd(r538E,op1_e3_l_13538A);
      real op1_e3_l_175392#7 = Sin(op1_e3_l_14538D);
      real op1_e3_l_235395#4 = Cos(op1_e3_l_14538D);
      real r5399#1 = RMul(_t5382,op1_e3_l_115384);
      real r539A#1 = RMul(r5399,op1_e3_l_13538A);
      real op1_e3_l_245398#1 = RMul(r539A,op1_e3_l_175392);
      real r53A0#1 = RMul(_t537E,op1_e3_l_13538A);
      real op1_e3_l_25539F#2 = RMul(r53A0,op1_e3_l_235395);
      real _t53A4#1 = RAdd(op1_e3_l_245398,op1_e3_l_25539F);
      real r53A8#2 = RMul(_t5382,x5378);
      real r53A9#1 = RMul(r53A8,y537A);
      real r53AA#1 = RMul(r53A9,op1_e3_l_13538A);
      real _t53A7#2 = RMul(r53AA,op1_e3_l_175392);
      real _t53B0#2 = 0.4e1;
      real op1_e3_l_1653B2#2 = RMul(z537C,op1_e3_l_13538A);
      real r53B9#1 = RMul(r53A8,op1_e3_l_1653B2);
      real op1_e3_l_2353B7#1 = RMul(r53B9,op1_e3_l_175392);
      real r53BF#1 = RMul(_t53B0,x5378);
      real r53C0#1 = RMul(r53BF,z537C);
      real op1_e3_l_2453BE#1 = RMul(r53C0,op1_e3_l_235395);
      real _t53C5#2 = RAdd(op1_e3_l_2353B7,op1_e3_l_2453BE);
      tensor[3] _t53C8#1 = <tensor[3]>[_t53A4,_t53A7,_t53C5];
      real r53CB#1 = RMul(_t5382,op1_e3_l_125387);
      real r53CC#1 = RMul(r53CB,op1_e3_l_13538A);
      real op1_e3_l_2453CA#1 = RMul(r53CC,op1_e3_l_175392);
      real _t53D1#1 = RAdd(op1_e3_l_2453CA,op1_e3_l_25539F);
      real r53D5#1 = RMul(_t5382,y537A);
      real r53D6#1 = RMul(r53D5,op1_e3_l_1653B2);
      real op1_e3_l_2353D4#1 = RMul(r53D6,op1_e3_l_175392);
      real r53DC#1 = RMul(_t53B0,y537A);
      real r53DD#1 = RMul(r53DC,z537C);
      real op1_e3_l_2453DB#1 = RMul(r53DD,op1_e3_l_235395);
      real _t53E2#2 = RAdd(op1_e3_l_2353D4,op1_e3_l_2453DB);
      tensor[3] _t53E5#1 = <tensor[3]>[_t53A7,_t53D1,_t53E2];
      real _t53E7#1 = 0.1e2;
      real op1_e3_l_1853E9#1 = RMul(op1_e3_l_13538A,op1_e3_l_13538A);
      real r53EF#1 = RMul(_t5382,op1_e3_l_1853E9);
      real op1_e3_l_3153EE#1 = RMul(r53EF,op1_e3_l_175392);
      real r53F4#1 = RMul(_t53E7,op1_e3_l_13538A);
      real op1_e3_l_3253F3#1 = RMul(r53F4,op1_e3_l_235395);
      real op1_e3_l_3353F8#1 = RMul(_t537E,op1_e3_l_175392);
      real r53FC#1 = RAdd(op1_e3_l_3153EE,op1_e3_l_3253F3);
      real _t53FB#1 = RAdd(r53FC,op1_e3_l_3353F8);
      tensor[3] _t5400#1 = <tensor[3]>[_t53C5,_t53E2,_t53FB];
      tensor[3,3] hess5402#1 = <tensor[3,3]>[_t53C8,_t53E5,_t5400];
      (real[3] evals5404#0,tensor[3][3] _t5405#1) = EigenVecs3x3(hess5402);
      tensor[3] E25407#6 = Subscript<tensor[3][3]>(_t5405,_t5380);
      real r540A#1 = TensorIndex<tensor[3],[0]>(E25407);
      tensor[3] binopV540B#3 = VScale<3>(r540A,E25407);
      real r540C#1 = TensorIndex<tensor[3],[1]>(E25407);
      tensor[3] binopV540D#3 = VScale<3>(r540C,E25407);
      real r540E#1 = TensorIndex<tensor[3],[2]>(E25407);
      tensor[3] binopV540F#3 = VScale<3>(r540E,E25407);
      real realLit5419#3 = 0.1e1;
      real r541A#1 = VIndex<3,0>(binopV540B);
      real r541B#1 = RSub(realLit5419,r541A);
      real realLit541C#9 = 0.e0;
      real r541D#1 = VIndex<3,1>(binopV540B);
      real r541E#1 = RSub(realLit541C,r541D);
      real r541F#1 = VIndex<3,2>(binopV540B);
      real r5420#1 = RSub(realLit541C,r541F);
      tensor[3] tensor5421#3 = <tensor[3]>[r541B,r541E,r5420];
      real r5422#1 = VIndex<3,0>(binopV540D);
      real r5423#1 = RSub(realLit541C,r5422);
      real r5424#1 = VIndex<3,1>(binopV540D);
      real r5425#1 = RSub(realLit5419,r5424);
      real r5426#1 = VIndex<3,2>(binopV540D);
      real r5427#1 = RSub(realLit541C,r5426);
      tensor[3] tensor5428#3 = <tensor[3]>[r5423,r5425,r5427];
      real r5429#1 = VIndex<3,0>(binopV540F);
      real r542A#1 = RSub(realLit541C,r5429);
      real r542B#1 = VIndex<3,1>(binopV540F);
      real r542C#1 = RSub(realLit541C,r542B);
      real r542D#1 = VIndex<3,2>(binopV540F);
      real r542E#1 = RSub(realLit5419,r542D);
      tensor[3] tensor542F#3 = <tensor[3]>[r542A,r542C,r542E];
      tensor[3,3] m5418#1 = <tensor[3,3]>[tensor5421,tensor5428,tensor542F];
      real vdot544B#1 = VDot<3>(tensor5421,tensor5421);
      real vdot544D#1 = VDot<3>(tensor5428,tensor5428);
      real r544E#1 = RAdd(vdot544B,vdot544D);
      real vdot5450#1 = VDot<3>(tensor542F,tensor542F);
      real t5449#2 = RAdd(r544E,vdot5450);
      bool _t545A#1 = EQ<real>(t5449,t5449);
      bool _t545C#1 = BNot(_t545A);
      if _t545C then goto ASSIGN5AF7 else goto JOIN5467
    ASSIGN5AF7:  preds = [COND545E]
      tensor[3] tensor5461#3 = <tensor[3]>[realLit541C,realLit541C,realLit541C];
      tensor[3,3] _t545F#1 = <tensor[3,3]>[tensor5461,tensor5461,tensor5461];
      return _t545F
      goto JOIN5467
    JOIN5467:  preds = [*RETURN(_t545F)5466,COND545E]
      return m5418
}
  function bool all5A38 (point P5A39#1) {
    ENTRY5A3A:  preds = []
      bool _t5A3B#1 = P5A39.found;
      return _t5A3B
}
  function real mean5A42 (point P5A43#1) {
    ENTRY5A44:  preds = []
      bool _t5A45#1 = P5A43.found;
      if _t5A45 then goto ASSIGN5A49 else goto ASSIGN5A4E
    ASSIGN5A49:  preds = [COND5A47]
      real _t5A48#1 = 0.1e1;
      goto JOIN5A4C
    JOIN5A4C:  preds = [ASSIGN5A49,ASSIGN5A4E]
      real _t5A4A#1 = phi(_t5A48,_t5A4B)
      return _t5A4A
    ASSIGN5A4E:  preds = [COND5A47]
      real _t5A4B#1 = 0.e0;
      goto JOIN5A4C
}
  function real mean5A5B (point P5A5C#1) {
    ENTRY5A5D:  preds = []
      real _t5A5E#1 = P5A5C.closest;
      return _t5A5E
}
  function real mean5A66 (point P5A67#1, real meancl5A68#1) {
    ENTRY5A69:  preds = []
      real _t5A6A#1 = P5A67.closest;
      real op1_e3_l_25A6C#2 = RSub(_t5A6A,meancl5A68);
      real _t5A6F#1 = RMul(op1_e3_l_25A6C,op1_e3_l_25A6C);
      return _t5A6F
}
  function real max5A81 (point P5A82#1) {
    ENTRY5A83:  preds = []
      real _t5A84#1 = P5A82.mvmt;
      return _t5A84
}
  function real mean5A93 (point P5A94#1) {
    ENTRY5A95:  preds = []
      real _t5A96#1 = P5A94.hh;
      return _t5A96
}
## input initialization
  ENTRY4D5A:  preds = []
    real fMaskTh4D5B#3 = 0.e0;
    globals.fMaskTh4D3E = fMaskTh4D5B;
    globals.fBias4D3F = fMaskTh4D5B;
    real tipd4D5F#1 = 0.1e1;
    globals.tipd4D40 = tipd4D5F;
    real mabd4D62#1 = 0.75e0;
    globals.mabd4D41 = mabd4D62;
    real travMax4D65#1 = 0.1e2;
    globals.travMax4D42 = travMax4D65;
    int nfsMax4D68#1 = 20;
    globals.nfsMax4D43 = nfsMax4D68;
    real gdeTest4D6B#4 = 0.5e0;
    globals.gdeTest4D44 = gdeTest4D6B;
    globals.gdeBack4D45 = gdeTest4D6B;
    real gdeOppor4D6F#1 = 0.12e1;
    globals.gdeOppor4D46 = gdeOppor4D6F;
    real geoEps4D72#1 = 0.1e0;
    globals.geoEps4D48 = geoEps4D72;
    real mvmtEps4D75#2 = 0.1e-1;
    globals.mvmtEps4D49 = mvmtEps4D75;
    globals.rpcEps4D4A = mvmtEps4D75;
    real pcmvEps4D79#1 = 0.3e0;
    globals.pcmvEps4D4B = pcmvEps4D79;
    globals.isoval4D4C = fMaskTh4D5B;
    int verb4D7D#1 = 0;
    globals.verb4D4D = verb4D7D;
    globals.sfs4D4E = gdeTest4D6B;
    globals.hist4D4F = gdeTest4D6B;
    int pcp4D82#1 = 5;
    globals.pcp4D50 = pcp4D82;
    int fDim4D85#1 = 2;
    globals.fDim4D52 = fDim4D85;
    return
## global-variable initialization
  ENTRY4D89:  preds = []
    femData:Mesh meshData4D8A#2 = globals.meshData4D3A;
    real tipd4D8C#1 = globals.tipd4D40;
    real hist4D8E#1 = globals.hist4D4F;
    int pcp4D90#1 = globals.pcp4D50;
    int fDim4D92#3 = globals.fDim4D52;
    int _t4D94#4 = 0;
    int _t4D96#3 = 1;
    int _t4D98#1 = ExtractFemItem<int,NumCell(Mesh)>(meshData4D8A);
    int _t4D9A#1 = ISub(_t4D98,_t4D96);
    int[] _t4D9C#1 = Range(_t4D94,_t4D9A);
    femData:MeshCell[] _t4D9E#1 = <femData:MeshCell[]>{};
  FOREACH4DA1:  preds = [ASSIGN4D9F,NEXT4DA7]
    foreach (_t4DA0 in _t4D9C) on exit goto ASSIGN4DA9
      femData:MeshCell[] _t4DA5#1 = phi(_t4D9E,_t4DA4)
    femData:MeshCell _t4DA2#1 = LoadFem<femData:MeshCell>(meshData4D8A,_t4DA0);
    femData:MeshCell[] _t4DA4#1 = Append<femData:MeshCell>(_t4DA5,_t4DA2);
    goto FOREACH4DA1
  ASSIGN4DA9:  preds = [FOREACH4DA1]
    int _t4DA8#3 = 2;
    bool _t4DAA#2 = EQ<int>(_t4DA8,fDim4D92);
    if _t4DAA then goto ASSIGN4DAE else goto ASSIGN4DDE
  ASSIGN4DAE:  preds = [COND4DAC]
    int _t4DAD#1 = 6;
    goto JOIN4DB1
  JOIN4DB1:  preds = [ASSIGN4DAE,JOIN4DE0]
    int _t4DAF#1 = phi(_t4DAD,_t4DB0)
    globals.nnmin4D53 = _t4DAF;
    if _t4DAA then goto ASSIGN4DB5 else goto ASSIGN4DD8
  ASSIGN4DB5:  preds = [COND4DB3]
    int _t4DB4#1 = 8;
    goto JOIN4DB8
  JOIN4DB8:  preds = [ASSIGN4DB5,JOIN4DDC]
    int _t4DB6#1 = phi(_t4DB4,_t4DB7)
    globals.nnmax4D54 = _t4DB6;
    real _t4DBA#1 = 0.2e1;
    real _t4DBC#1 = 0.3e1;
    real op1_e3_l_34DBE#1 = RMul(tipd4D8C,_t4DBC);
    real rad4DC1#1 = RDiv(op1_e3_l_34DBE,_t4DBA);
    globals.rad4D55 = rad4DC1;
    real _t4DC5#2 = 0.1e1;
    int _t4DC7#1 = IMul(_t4DA8,pcp4D90);
    real _t4DC9#1 = IntToReal(_t4DC7);
    real _t4DCB#1 = RDiv(_t4DC5,_t4DC9);
    real pchist4DCE#1 = MathFn<pow>(hist4D8E,_t4DCB);
    globals.pchist4D56 = pchist4DCE;
    globals.iter4D57 = _t4D94;
    globals.rpc4D58 = _t4DC5;
    int popLast4DD3#1 = -1;
    globals.popLast4D59 = popLast4DD3;
    return
  ASSIGN4DD8:  preds = [COND4DB3]
    bool _t4DD7#1 = EQ<int>(_t4D96,fDim4D92);
    if _t4DD7 then goto ASSIGN4DDB else goto JOIN4DDC
  ASSIGN4DDB:  preds = [COND4DD9]
    int _t4DDA#1 = 3;
    goto JOIN4DDC
  JOIN4DDC:  preds = [ASSIGN4DDB,COND4DD9]
    int _t4DB7#1 = phi(_t4DDA,_t4D94)
    goto JOIN4DB8
  ASSIGN4DDE:  preds = [COND4DAC]
    bool _t4DDD#1 = EQ<int>(_t4D96,fDim4D92);
    if _t4DDD then goto JOIN4DE0 else goto JOIN4DE0
  JOIN4DE0:  preds = [COND4DDF,COND4DDF]
    int _t4DB0#1 = phi(_t4DA8,_t4D94)
    goto JOIN4DB1
## strand
  strand point (tensor[3] p04DE1#5, real hh04DE2#1) in 3D
    state:
      output tensor[3] pos;
      output tensor[3] _pos;
      real ID;
      real hh;
      tensor[3] step;
      bool found;
      int nfs;
      real trav;
      real mvmt;
      real closest;
      int born;
      bool first;
    state init
      ENTRY4DEF:  preds = []
        real rad4DF0#1 = globals.rad4D55;
        real _t4DF2#1 = 0.1e7;
        real _t4DF4#1 = VIndex<3,0>(p04DE1);
        real _t4DF6#1 = urnd4DF7 (_t4DF4);
        real _t4E31#1 = VIndex<3,1>(p04DE1);
        real _t4E33#1 = urnd4DF7 (_t4E31);
        real _t4E35#1 = VIndex<3,2>(p04DE1);
        real _t4E37#1 = urnd4DF7 (_t4E35);
        real r4E3A#1 = RAdd(_t4DF6,_t4E33);
        real _t4E39#1 = RAdd(r4E3A,_t4E37);
        real _t4E3E#2 = 0.1e1;
        real _t4E40#1 = MathFn<fmod>(_t4E39,_t4E3E);
        real _t4E42#1 = RMul(_t4DF2,_t4E40);
        real _t4E45#1 = MathFn<floor>(_t4E42);
        real _t4E47#4 = 0.e0;
        tensor[3] step4E49#1 = <tensor[3]>[_t4E47,_t4E47,_t4E47];
        bool found4E4B#1 = false;
        int nfs4E4D#2 = 0;
        bool first4E4F#1 = true;
        self.pos = p04DE1;
        self._pos = p04DE1;
        self.ID = _t4E45;
        self.hh = hh04DE2;
        self.step = step4E49;
        self.found = found4E4B;
        self.nfs = nfs4E4D;
        self.trav = _t4E47;
        self.mvmt = _t4E3E;
        self.closest = rad4DF0;
        self.born = nfs4E4D;
        self.first = first4E4F;
        return
    end state init
    method update
        ENTRY4E5E:  preds = []
          real fStrTh4E5F#4 = globals.fStrTh4D3D;
          real fMaskTh4E61#4 = globals.fMaskTh4D3E;
          real fBias4E63#4 = globals.fBias4D3F;
          real tipd4E65#17 = globals.tipd4D40;
          real mabd4E67#1 = globals.mabd4D41;
          real travMax4E69#3 = globals.travMax4D42;
          int nfsMax4E6B#3 = globals.nfsMax4D43;
          real gdeTest4E6D#1 = globals.gdeTest4D44;
          real gdeBack4E6F#1 = globals.gdeBack4D45;
          real gdeOppor4E71#1 = globals.gdeOppor4D46;
          real fsEps4E73#3 = globals.fsEps4D47;
          real pcmvEps4E75#1 = globals.pcmvEps4D4B;
          int verb4E77#16 = globals.verb4D4D;
          real sfs4E79#10 = globals.sfs4D4E;
          real hist4E7B#2 = globals.hist4D4F;
          int pcp4E7D#10 = globals.pcp4D50;
          int fDim4E7F#2 = globals.fDim4D52;
          int nnmin4E81#3 = globals.nnmin4D53;
          int nnmax4E83#4 = globals.nnmax4D54;
          real rad4E85#6 = globals.rad4D55;
          int iter4E87#22 = globals.iter4D57;
          tensor[3] pos4E89#16 = self.pos;
          real ID4E8B#11 = self.ID;
          real hh4E8D#7 = self.hh;
          bool found4E8F#3 = self.found;
          int nfs4E91#5 = self.nfs;
          real trav4E93#4 = self.trav;
          real mvmt4E95#5 = self.mvmt;
          real closest4E97#1 = self.closest;
          int born4E99#5 = self.born;
          bool first4E9B#1 = self.first;
          bool vv4E9D#45 = false;
          if first4E9B then goto ASSIGN4EA1 else goto JOIN4EB9
        ASSIGN4EA1:  preds = [COND4E9F]
          int _t4EA0#1 = 0;
          bool _t4EA2#1 = GT<int>(verb4E77,_t4EA0);
          if _t4EA2 then goto JOIN4EA6 else goto JOIN4EA6
        JOIN4EA6:  preds = [COND4EA4,COND4EA4]
          bool _t4EA5#1 = phi(vv4E9D,vv4E9D)
          if _t4EA5 then goto ASSIGN4EA9 else goto ASSIGN59F9
        ASSIGN4EA9:  preds = [COND4EA7]
          bool _t4EA8#1 = true;
          goto JOIN4EAC
        JOIN4EAC:  preds = [ASSIGN4EA9,ASSIGN59FA]
          bool _t4EAA#1 = phi(_t4EA8,_t4EAB)
          if _t4EAA then goto ASSIGN4EAF else goto JOIN4EB8
        ASSIGN4EAF:  preds = [COND4EAD]
          string _t4EAE#1 = "(i#";
          string _t4EB0#1 = " @ ";
          string _t4EB2#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID4E8B,_t4EAE,iter4E87,_t4EB0,pos4E89,_t4EB2);
          string _t4EB5#1 = " HELLO!\n";
          Print<[string]>(_t4EB5);
          goto JOIN4EB8
        JOIN4EB8:  preds = [MASSIGN4EB7,COND4EAD]
          goto JOIN4EB9
        JOIN4EB9:  preds = [JOIN4EB8,COND4E9F]
          real _t4EBA#23 = 0.e0;
          tensor[3] _t4EBC#5 = <tensor[3]>[_t4EBA,_t4EBA,_t4EBA];
          tensor[3] op1_e3_l_24EBE#2 = VSub<3>(pos4E89,_t4EBC);
          real op1_e3_l_44EC1#1 = VDot<3>(op1_e3_l_24EBE,op1_e3_l_24EBE);
          real _t4EC4#3 = Sqrt(op1_e3_l_44EC1);
          real _t4EC7#11 = 0.4e1;
          bool _t4EC9#2 = LT<real>(_t4EC4,_t4EC7);
          if _t4EC9 then goto ASSIGN4ECD else goto JOIN4ED1
        ASSIGN4ECD:  preds = [COND4ECB]
          real _t4ECC#1 = 0.3e1;
          bool _t4ECE#1 = GT<real>(_t4EC4,_t4ECC);
          goto JOIN4ED1
        JOIN4ED1:  preds = [ASSIGN4ECF,COND4ECB]
          bool _t4ED0#1 = phi(_t4ECE,vv4E9D)
          if _t4ED0 then goto ASSIGN4ED4 else goto JOIN4F9A
        ASSIGN4ED4:  preds = [COND4ED2]
          real x4ED3#5 = VIndex<3,0>(pos4E89);
          real y4ED5#6 = VIndex<3,1>(pos4E89);
          real z4ED7#6 = VIndex<3,2>(pos4E89);
          real _t4ED9#6 = 0.2e1;
          int _t4EDB#1 = 2;
          real op1_e3_l_64EDD#2 = RMul(x4ED3,x4ED3);
          real op1_e3_l_74EE0#2 = RMul(y4ED5,y4ED5);
          real op1_e3_l_84EE3#11 = RMul(z4ED7,z4ED7);
          real r4EE7#1 = RAdd(op1_e3_l_64EDD,op1_e3_l_74EE0);
          real op1_e3_l_94EE6#2 = RAdd(r4EE7,op1_e3_l_84EE3);
          real op1_e3_l_114EEB#7 = Cos(op1_e3_l_94EE6);
          real r4EEF#1 = RMul(_t4ED9,x4ED3);
          real r4EF0#1 = RMul(r4EEF,op1_e3_l_84EE3);
          real _t4EEE#1 = RMul(r4EF0,op1_e3_l_114EEB);
          real r4EF6#1 = RMul(_t4ED9,y4ED5);
          real r4EF7#1 = RMul(r4EF6,op1_e3_l_84EE3);
          real _t4EF5#1 = RMul(r4EF7,op1_e3_l_114EEB);
          real op1_e3_l_144EFC#3 = RMul(z4ED7,op1_e3_l_84EE3);
          real op1_e3_l_204F01#8 = Sin(op1_e3_l_94EE6);
          real r4F05#1 = RMul(_t4ED9,op1_e3_l_144EFC);
          real op1_e3_l_214F04#1 = RMul(r4F05,op1_e3_l_114EEB);
          real r4F0A#1 = RMul(_t4ED9,z4ED7);
          real op1_e3_l_224F09#1 = RMul(r4F0A,op1_e3_l_204F01);
          real _t4F0E#1 = RAdd(op1_e3_l_214F04,op1_e3_l_224F09);
          tensor[3] g4F11#2 = <tensor[3]>[_t4EEE,_t4EF5,_t4F0E];
          real _t4F13#5 = -0.4e1;
          real r4F16#1 = RMul(_t4F13,op1_e3_l_64EDD);
          real r4F17#1 = RMul(r4F16,op1_e3_l_84EE3);
          real op1_e3_l_244F15#1 = RMul(r4F17,op1_e3_l_204F01);
          real r4F1D#1 = RMul(_t4ED9,op1_e3_l_84EE3);
          real op1_e3_l_254F1C#2 = RMul(r4F1D,op1_e3_l_114EEB);
          real _t4F21#1 = RAdd(op1_e3_l_244F15,op1_e3_l_254F1C);
          real r4F25#2 = RMul(_t4F13,x4ED3);
          real r4F26#1 = RMul(r4F25,y4ED5);
          real r4F27#1 = RMul(r4F26,op1_e3_l_84EE3);
          real _t4F24#2 = RMul(r4F27,op1_e3_l_204F01);
          real r4F2F#1 = RMul(r4F25,op1_e3_l_144EFC);
          real op1_e3_l_234F2D#1 = RMul(r4F2F,op1_e3_l_204F01);
          real r4F35#1 = RMul(_t4EC7,x4ED3);
          real r4F36#1 = RMul(r4F35,z4ED7);
          real op1_e3_l_244F34#1 = RMul(r4F36,op1_e3_l_114EEB);
          real _t4F3B#2 = RAdd(op1_e3_l_234F2D,op1_e3_l_244F34);
          tensor[3] _t4F3E#1 = <tensor[3]>[_t4F21,_t4F24,_t4F3B];
          real r4F41#1 = RMul(_t4F13,op1_e3_l_74EE0);
          real r4F42#1 = RMul(r4F41,op1_e3_l_84EE3);
          real op1_e3_l_244F40#1 = RMul(r4F42,op1_e3_l_204F01);
          real _t4F47#1 = RAdd(op1_e3_l_244F40,op1_e3_l_254F1C);
          real r4F4B#1 = RMul(_t4F13,y4ED5);
          real r4F4C#1 = RMul(r4F4B,op1_e3_l_144EFC);
          real op1_e3_l_234F4A#1 = RMul(r4F4C,op1_e3_l_204F01);
          real r4F52#1 = RMul(_t4EC7,y4ED5);
          real r4F53#1 = RMul(r4F52,z4ED7);
          real op1_e3_l_244F51#1 = RMul(r4F53,op1_e3_l_114EEB);
          real _t4F58#2 = RAdd(op1_e3_l_234F4A,op1_e3_l_244F51);
          tensor[3] _t4F5B#1 = <tensor[3]>[_t4F24,_t4F47,_t4F58];
          real _t4F5D#1 = 0.1e2;
          real op1_e3_l_184F5F#1 = RMul(op1_e3_l_84EE3,op1_e3_l_84EE3);
          real r4F65#1 = RMul(_t4F13,op1_e3_l_184F5F);
          real op1_e3_l_314F64#1 = RMul(r4F65,op1_e3_l_204F01);
          real r4F6A#1 = RMul(_t4F5D,op1_e3_l_84EE3);
          real op1_e3_l_324F69#1 = RMul(r4F6A,op1_e3_l_114EEB);
          real op1_e3_l_334F6E#1 = RMul(_t4ED9,op1_e3_l_204F01);
          real r4F72#1 = RAdd(op1_e3_l_314F64,op1_e3_l_324F69);
          real _t4F71#1 = RAdd(r4F72,op1_e3_l_334F6E);
          tensor[3] _t4F76#1 = <tensor[3]>[_t4F3B,_t4F58,_t4F71];
          tensor[3,3] hess4F78#1 = <tensor[3,3]>[_t4F3E,_t4F5B,_t4F76];
          real[3] _t4F7A#1 = EigenVals3x3(hess4F78);
          real _t4F7C#1 = Subscript<real[3]>(_t4F7A,_t4EDB);
          real op1_e3_l_34F7E#1 = VDot<3>(g4F11,g4F11);
          real op1_e3_l_44F81#1 = Sqrt(op1_e3_l_34F7E);
          real op1_e3_l_54F84#1 = RNeg(_t4F7C);
          real op1_e3_l_64F87#1 = RAdd(fBias4E63,op1_e3_l_44F81);
          real str4F8A#1 = RDiv(op1_e3_l_54F84,op1_e3_l_64F87);
          bool _t4F8D#1 = GT<real>(str4F8A,fStrTh4E5F);
          if _t4F8D then goto ASSIGN4F91 else goto JOIN4F98
        ASSIGN4F91:  preds = [COND4F8F]
          bool _t4F90#1 = GTE<real>(_t4EBA,fMaskTh4E61);
          if _t4F90 then goto ASSIGN4F94 else goto JOIN4F96
        ASSIGN4F94:  preds = [COND4F92]
          bool _t4F93#1 = true;
          goto JOIN4F96
        JOIN4F96:  preds = [ASSIGN4F94,COND4F92]
          bool _t4F95#1 = phi(_t4F93,vv4E9D)
          goto JOIN4F98
        JOIN4F98:  preds = [JOIN4F96,COND4F8F]
          bool _t4F97#1 = phi(_t4F95,vv4E9D)
          goto JOIN4F9A
        JOIN4F9A:  preds = [JOIN4F98,COND4ED2]
          bool _t4F99#1 = phi(_t4F97,vv4E9D)
          bool _t4F9B#1 = BNot(_t4F99);
          if _t4F9B then goto ASSIGN4F9F else goto JOIN5087
        ASSIGN4F9F:  preds = [COND4F9D]
          int _t4F9E#1 = 0;
          bool _t4FA0#1 = GT<int>(verb4E77,_t4F9E);
          if _t4FA0 then goto JOIN4FA4 else goto JOIN4FA4
        JOIN4FA4:  preds = [COND4FA2,COND4FA2]
          bool _t4FA3#1 = phi(vv4E9D,vv4E9D)
          if _t4FA3 then goto ASSIGN4FA7 else goto ASSIGN59F6
        ASSIGN4FA7:  preds = [COND4FA5]
          bool _t4FA6#1 = true;
          goto JOIN4FAA
        JOIN4FAA:  preds = [ASSIGN4FA7,ASSIGN59F7]
          bool _t4FA8#1 = phi(_t4FA6,_t4FA9)
          if _t4FA8 then goto ASSIGN4FAD else goto JOIN5085
        ASSIGN4FAD:  preds = [COND4FAB]
          string _t4FAC#1 = "(i#";
          string _t4FAE#1 = " @ ";
          string _t4FB0#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID4E8B,_t4FAC,iter4E87,_t4FAE,pos4E89,_t4FB0);
          string _t4FB3#1 = "!inside=";
          if _t4EC9 then goto ASSIGN4FB7 else goto JOIN4FBB
        ASSIGN4FB7:  preds = [COND4FB5]
          real _t4FB6#1 = 0.3e1;
          bool _t4FB8#1 = GT<real>(_t4EC4,_t4FB6);
          goto JOIN4FBB
        JOIN4FBB:  preds = [ASSIGN4FB9,COND4FB5]
          bool _t4FBA#1 = phi(_t4FB8,vv4E9D)
          string _t4FBC#1 = " || fStrength=";
          real x4FBE#5 = VIndex<3,0>(pos4E89);
          real y4FC0#6 = VIndex<3,1>(pos4E89);
          real z4FC2#6 = VIndex<3,2>(pos4E89);
          real _t4FC4#6 = 0.2e1;
          int _t4FC6#1 = 2;
          real op1_e3_l_64FC8#2 = RMul(x4FBE,x4FBE);
          real op1_e3_l_74FCB#2 = RMul(y4FC0,y4FC0);
          real op1_e3_l_84FCE#11 = RMul(z4FC2,z4FC2);
          real r4FD2#1 = RAdd(op1_e3_l_64FC8,op1_e3_l_74FCB);
          real op1_e3_l_94FD1#2 = RAdd(r4FD2,op1_e3_l_84FCE);
          real op1_e3_l_114FD6#7 = Cos(op1_e3_l_94FD1);
          real r4FDA#1 = RMul(_t4FC4,x4FBE);
          real r4FDB#1 = RMul(r4FDA,op1_e3_l_84FCE);
          real _t4FD9#1 = RMul(r4FDB,op1_e3_l_114FD6);
          real r4FE1#1 = RMul(_t4FC4,y4FC0);
          real r4FE2#1 = RMul(r4FE1,op1_e3_l_84FCE);
          real _t4FE0#1 = RMul(r4FE2,op1_e3_l_114FD6);
          real op1_e3_l_144FE7#3 = RMul(z4FC2,op1_e3_l_84FCE);
          real op1_e3_l_204FEC#8 = Sin(op1_e3_l_94FD1);
          real r4FF0#1 = RMul(_t4FC4,op1_e3_l_144FE7);
          real op1_e3_l_214FEF#1 = RMul(r4FF0,op1_e3_l_114FD6);
          real r4FF5#1 = RMul(_t4FC4,z4FC2);
          real op1_e3_l_224FF4#1 = RMul(r4FF5,op1_e3_l_204FEC);
          real _t4FF9#1 = RAdd(op1_e3_l_214FEF,op1_e3_l_224FF4);
          tensor[3] g4FFC#2 = <tensor[3]>[_t4FD9,_t4FE0,_t4FF9];
          real _t4FFE#5 = -0.4e1;
          real r5001#1 = RMul(_t4FFE,op1_e3_l_64FC8);
          real r5002#1 = RMul(r5001,op1_e3_l_84FCE);
          real op1_e3_l_245000#1 = RMul(r5002,op1_e3_l_204FEC);
          real r5008#1 = RMul(_t4FC4,op1_e3_l_84FCE);
          real op1_e3_l_255007#2 = RMul(r5008,op1_e3_l_114FD6);
          real _t500C#1 = RAdd(op1_e3_l_245000,op1_e3_l_255007);
          real r5010#2 = RMul(_t4FFE,x4FBE);
          real r5011#1 = RMul(r5010,y4FC0);
          real r5012#1 = RMul(r5011,op1_e3_l_84FCE);
          real _t500F#2 = RMul(r5012,op1_e3_l_204FEC);
          real r501A#1 = RMul(r5010,op1_e3_l_144FE7);
          real op1_e3_l_235018#1 = RMul(r501A,op1_e3_l_204FEC);
          real r5020#1 = RMul(_t4EC7,x4FBE);
          real r5021#1 = RMul(r5020,z4FC2);
          real op1_e3_l_24501F#1 = RMul(r5021,op1_e3_l_114FD6);
          real _t5026#2 = RAdd(op1_e3_l_235018,op1_e3_l_24501F);
          tensor[3] _t5029#1 = <tensor[3]>[_t500C,_t500F,_t5026];
          real r502C#1 = RMul(_t4FFE,op1_e3_l_74FCB);
          real r502D#1 = RMul(r502C,op1_e3_l_84FCE);
          real op1_e3_l_24502B#1 = RMul(r502D,op1_e3_l_204FEC);
          real _t5032#1 = RAdd(op1_e3_l_24502B,op1_e3_l_255007);
          real r5036#1 = RMul(_t4FFE,y4FC0);
          real r5037#1 = RMul(r5036,op1_e3_l_144FE7);
          real op1_e3_l_235035#1 = RMul(r5037,op1_e3_l_204FEC);
          real r503D#1 = RMul(_t4EC7,y4FC0);
          real r503E#1 = RMul(r503D,z4FC2);
          real op1_e3_l_24503C#1 = RMul(r503E,op1_e3_l_114FD6);
          real _t5043#2 = RAdd(op1_e3_l_235035,op1_e3_l_24503C);
          tensor[3] _t5046#1 = <tensor[3]>[_t500F,_t5032,_t5043];
          real _t5048#1 = 0.1e2;
          real op1_e3_l_18504A#1 = RMul(op1_e3_l_84FCE,op1_e3_l_84FCE);
          real r5050#1 = RMul(_t4FFE,op1_e3_l_18504A);
          real op1_e3_l_31504F#1 = RMul(r5050,op1_e3_l_204FEC);
          real r5055#1 = RMul(_t5048,op1_e3_l_84FCE);
          real op1_e3_l_325054#1 = RMul(r5055,op1_e3_l_114FD6);
          real op1_e3_l_335059#1 = RMul(_t4FC4,op1_e3_l_204FEC);
          real r505D#1 = RAdd(op1_e3_l_31504F,op1_e3_l_325054);
          real _t505C#1 = RAdd(r505D,op1_e3_l_335059);
          tensor[3] _t5061#1 = <tensor[3]>[_t5026,_t5043,_t505C];
          tensor[3,3] hess5063#1 = <tensor[3,3]>[_t5029,_t5046,_t5061];
          real[3] _t5065#1 = EigenVals3x3(hess5063);
          real _t5067#1 = Subscript<real[3]>(_t5065,_t4FC6);
          real op1_e3_l_35069#1 = VDot<3>(g4FFC,g4FFC);
          real op1_e3_l_4506C#1 = Sqrt(op1_e3_l_35069);
          real op1_e3_l_5506F#1 = RNeg(_t5067);
          real op1_e3_l_65072#1 = RAdd(fBias4E63,op1_e3_l_4506C);
          real str5075#1 = RDiv(op1_e3_l_5506F,op1_e3_l_65072);
          string _t5078#1 = " <= fStrTh=";
          string _t507A#1 = " || fMask(pos)=";
          string _t507C#1 = " < fMaskTh=";
          string _t507E#1 = " || fTest(pos)=";
          bool _t5080#1 = true;
          string _t5082#1 = " ==>DIE\n";
          Print<[string,bool,string,real,string,real,string,real,string,real,string,bool,string]>(_t4FB3,_t4FBA,_t4FBC,str5075,_t5078,fStrTh4E5F,_t507A,_t4EBA,_t507C,fMaskTh4E61,_t507E,_t5080,_t5082);
          goto JOIN5085
        JOIN5085:  preds = [MASSIGN5084,COND4FAB]
          die
          goto JOIN5087
        JOIN5087:  preds = [*DIE5086,COND4F9D]
          bool _t5088#1 = GT<real>(travMax4E69,_t4EBA);
          if _t5088 then goto ASSIGN508C else goto JOIN5090
        ASSIGN508C:  preds = [COND508A]
          bool _t508B#1 = GT<real>(trav4E93,travMax4E69);
          if _t508B then goto DIE508E else goto JOIN508F
        DIE508E:  preds = [COND508D]
          die
          goto JOIN508F
        JOIN508F:  preds = [*DIE508E,COND508D]
          goto JOIN5090
        JOIN5090:  preds = [JOIN508F,COND508A]
          bool _t5091#1 = BNot(found4E8F);
          if _t5091 then goto ASSIGN5095 else goto ASSIGN5228
        ASSIGN5095:  preds = [COND5093]
          int _t5094#3 = 0;
          bool _t5096#1 = GT<int>(nfsMax4E6B,_t5094);
          if _t5096 then goto ASSIGN509A else goto JOIN50BD
        ASSIGN509A:  preds = [COND5098]
          bool _t5099#1 = GT<int>(nfs4E91,nfsMax4E6B);
          if _t5099 then goto ASSIGN509D else goto JOIN50BC
        ASSIGN509D:  preds = [COND509B]
          bool _t509C#1 = GT<int>(verb4E77,_t5094);
          if _t509C then goto JOIN50A0 else goto JOIN50A0
        JOIN50A0:  preds = [COND509E,COND509E]
          bool _t509F#1 = phi(vv4E9D,vv4E9D)
          if _t509F then goto ASSIGN50A3 else goto ASSIGN5225
        ASSIGN50A3:  preds = [COND50A1]
          bool _t50A2#1 = true;
          goto JOIN50A6
        JOIN50A6:  preds = [ASSIGN50A3,ASSIGN5226]
          bool _t50A4#1 = phi(_t50A2,_t50A5)
          if _t50A4 then goto ASSIGN50A9 else goto JOIN50BA
        ASSIGN50A9:  preds = [COND50A7]
          string _t50A8#1 = "(i#";
          string _t50AA#1 = " @ ";
          string _t50AC#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID4E8B,_t50A8,iter4E87,_t50AA,pos4E89,_t50AC);
          string _t50AF#1 = "nfs=";
          string _t50B1#1 = " > nfsMax=";
          string _t50B3#1 = " || trav=";
          string _t50B5#1 = " > travMax=";
          string _t50B7#1 = " =>DIE\n";
          Print<[string,int,string,int,string,real,string,real,string]>(_t50AF,nfs4E91,_t50B1,nfsMax4E6B,_t50B3,trav4E93,_t50B5,travMax4E69,_t50B7);
          goto JOIN50BA
        JOIN50BA:  preds = [MASSIGN50B9,COND50A7]
          die
          goto JOIN50BC
        JOIN50BC:  preds = [*DIE50BB,COND509B]
          goto JOIN50BD
        JOIN50BD:  preds = [JOIN50BC,COND5098]
          tensor[3] _t50BE#3 = fStep50BF (pos4E89);
          tensor[3] step51B7#3 = VScale<3>(sfs4E79,_t50BE);
          tensor[3] pos51BA#2 = VAdd<3>(pos4E89,step51B7);
          real op1_e3_l_551BD#1 = VDot<3>(_t50BE,_t50BE);
          real r51C1#1 = RMul(sfs4E79,sfs4E79);
          real op1_e3_l_651C0#1 = RMul(r51C1,op1_e3_l_551BD);
          real op1_e3_l_751C5#1 = Sqrt(op1_e3_l_651C0);
          real op1_e3_l_1151C8#3 = RDiv(op1_e3_l_751C5,tipd4E65);
          real op1_e3_l_1251CB#1 = RSub(mvmt4E95,op1_e3_l_1151C8);
          real op1_e3_l_1451CE#1 = RMul(hist4E7B,op1_e3_l_1251CB);
          real mvmt51D1#2 = RAdd(op1_e3_l_1151C8,op1_e3_l_1451CE);
          bool _t51D4#1 = GT<real>(mvmt51D1,fsEps4E73);
          if _t51D4 then goto ASSIGN51D9 else goto ASSIGN5222
        ASSIGN51D9:  preds = [COND51D6]
          real trav51D7#1 = RAdd(trav4E93,op1_e3_l_1151C8);
          int _t51DA#1 = 1;
          int nfs51DC#1 = IAdd(nfs4E91,_t51DA);
          goto JOIN51E4
        JOIN51E4:  preds = [ASSIGN51DD,ASSIGN5223]
          real mvmt51DE#2 = phi(mvmt51D1,mvmt51DF)
          real trav51E0#1 = phi(trav51D7,_t4EBA)
          int nfs51E1#1 = phi(nfs51DC,nfs4E91)
          bool found51E2#2 = phi(found4E8F,found51E3)
          bool _t51E5#1 = GT<int>(verb4E77,_t5094);
          if _t51E5 then goto JOIN51E9 else goto JOIN51E9
        JOIN51E9:  preds = [COND51E7,COND51E7]
          bool _t51E8#1 = phi(vv4E9D,vv4E9D)
          if _t51E8 then goto ASSIGN51EC else goto ASSIGN5220
        ASSIGN51EC:  preds = [COND51EA]
          bool _t51EB#1 = true;
          goto JOIN51EF
        JOIN51EF:  preds = [ASSIGN51EC,ASSIGN5221]
          bool _t51ED#1 = phi(_t51EB,_t51EE)
          if _t51ED then goto ASSIGN51F2 else goto JOIN5201
        ASSIGN51F2:  preds = [COND51F0]
          string _t51F1#1 = "(i#";
          string _t51F3#1 = " @ ";
          string _t51F5#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID4E8B,_t51F1,iter4E87,_t51F3,pos51BA,_t51F5);
          string _t51F8#1 = "step=";
          string _t51FA#1 = "; mvmt=";
          string _t51FC#1 = " => found=";
          string _t51FE#1 = "\n";
          Print<[string,tensor[3],string,real,string,bool,string]>(_t51F8,step51B7,_t51FA,mvmt51DE,_t51FC,found51E2,_t51FE);
          goto JOIN5201
        JOIN5201:  preds = [MASSIGN5200,COND51F0]
          goto JOIN5212
        JOIN5212:  preds = [JOIN5201,JOIN599D]
          int born5202#1 = phi(born4E99,born5203)
          real closest5204#1 = phi(closest4E97,closest5205)
          real mvmt5206#1 = phi(mvmt51DE,mvmt5207)
          real trav5208#1 = phi(trav51E0,trav5209)
          int nfs520A#1 = phi(nfs51E1,nfs4E91)
          bool found520B#1 = phi(found51E2,found4E8F)
          tensor[3] step520C#1 = phi(step51B7,step520D)
          real hh520E#1 = phi(hh4E8D,hh520F)
          tensor[3] pos5210#2 = phi(pos51BA,pos5211)
          self.pos = pos5210;
          self._pos = pos5210;
          self.hh = hh520E;
          self.step = step520C;
          self.found = found520B;
          self.nfs = nfs520A;
          self.trav = trav5208;
          self.mvmt = mvmt5206;
          self.closest = closest5204;
          self.born = born5202;
          self.first = vv4E9D;
          active
        ASSIGN5220:  preds = [COND51EA]
          int _t521F#1 = 1;
          bool _t51EE#1 = GT<int>(verb4E77,_t521F);
          goto JOIN51EF
        ASSIGN5222:  preds = [COND51D6]
          bool found51E3#1 = true;
          real mvmt51DF#1 = 0.1e1;
          goto JOIN51E4
        ASSIGN5225:  preds = [COND50A1]
          int _t5224#1 = 1;
          bool _t50A5#1 = GT<int>(verb4E77,_t5224);
          goto JOIN50A6
        ASSIGN5228:  preds = [COND5093]
          int _t5227#25 = 0;
          bool _t5229#1 = EQ<int>(_t5227,fDim4E7F);
          if _t5229 then goto SAVE522C else goto JOIN522E
        SAVE522C:  preds = [COND522B]
          self.pos = pos4E89;
          stabilize
          goto JOIN522E
        JOIN522E:  preds = [*STABILIZE522D,COND522B]
          tensor[3] _t522F#3 = fStep50BF (pos4E89);
          tensor[3] step5231#7 = VScale<3>(sfs4E79,_t522F);
          tensor[3] pos5234#22 = VAdd<3>(pos4E89,step5231);
          real op1_e3_l_45237#1 = VDot<3>(_t522F,_t522F);
          real r523B#2 = RMul(sfs4E79,sfs4E79);
          real op1_e3_l_5523A#1 = RMul(r523B,op1_e3_l_45237);
          real op1_e3_l_6523F#1 = Sqrt(op1_e3_l_5523A);
          real op1_e3_l_75242#1 = RDiv(op1_e3_l_6523F,tipd4E65);
          real trav5245#5 = RAdd(trav4E93,op1_e3_l_75242);
          point[] _t5248#1 = SphereQuery<3,point>(pos5234,rad4E85);
        FOREACH524B:  preds = [ASSIGN5249,NEXT52EB]
          foreach (P524A in _t5248) on exit goto ASSIGN5345
            int nn52E9#3 = phi(_t5227,nn52E8)
            tensor[3] force52E3#6 = phi(_t4EBC,force52E2)
            real oldE5298#4 = phi(_t4EBA,oldE5297)
          tensor[3] _t524C#1 = P524A.pos;
          tensor[3] op1_e3_l_9524E#5 = VSub<3>(_t524C,pos5234);
          real op1_e3_l_115251#1 = VDot<3>(op1_e3_l_9524E,op1_e3_l_9524E);
          real op1_e3_l_125254#3 = Sqrt(op1_e3_l_115251);
          real _t5257#1 = RDiv(op1_e3_l_125254,tipd4E65);
          bool _t525A#1 = LT<real>(_t5257,fsEps4E73);
          if _t525A then goto ASSIGN525E else goto JOIN5264
        ASSIGN525E:  preds = [COND525C]
          real _t525D#1 = P524A.ID;
          bool _t525F#1 = LTE<real>(ID4E8B,_t525D);
          if _t525F then goto DIE5262 else goto JOIN5263
        DIE5262:  preds = [COND5261]
          die
          goto JOIN5263
        JOIN5263:  preds = [*DIE5262,COND5261]
          goto JOIN5264
        JOIN5264:  preds = [JOIN5263,COND525C]
          real _t5265#12 = RDiv(op1_e3_l_125254,rad4E85);
          real _t5268#2 = 0.2e1;
          real _t526A#2 = 0.3e1;
          real _t526C#2 = RDiv(_t5268,_t526A);
          bool _t526F#2 = LT<real>(_t5265,_t526C);
          if _t526F then goto ASSIGN5273 else goto ASSIGN5318
        ASSIGN5273:  preds = [COND5271]
          real _t5272#1 = 0.1e1;
          real _t5274#1 = -0.5646e1;
          real _t5276#1 = 0.119835e2;
          real _t5278#1 = -0.113535e2;
          real _t527A#1 = 0.40550625e1;
          real op1_e3_l_58527C#1 = RMul(_t527A,_t5265);
          real op1_e3_l_60527F#1 = RAdd(_t5278,op1_e3_l_58527C);
          real op1_e3_l_615282#1 = RMul(_t5265,op1_e3_l_60527F);
          real op1_e3_l_635285#1 = RAdd(_t5276,op1_e3_l_615282);
          real op1_e3_l_645288#1 = RMul(_t5265,op1_e3_l_635285);
          real op1_e3_l_66528B#1 = RAdd(_t5274,op1_e3_l_645288);
          real op1_e3_l_67528E#1 = RMul(_t5265,op1_e3_l_66528B);
          real _t5291#1 = RAdd(_t5272,op1_e3_l_67528E);
          goto JOIN5296
        JOIN5296:  preds = [ASSIGN5293,JOIN5343]
          real _t5294#1 = phi(_t5291,_t5295)
          real oldE5297#1 = RAdd(oldE5298,_t5294);
          if _t526F then goto ASSIGN529D else goto ASSIGN52ED
        ASSIGN529D:  preds = [COND529B]
          real _t529C#1 = -0.5646e1;
          real _t529E#1 = 0.23967e2;
          real _t52A0#1 = -0.340605e2;
          real _t52A2#1 = 0.1622025e2;
          real op1_e3_l_4452A4#1 = RMul(_t52A2,_t5265);
          real op1_e3_l_4652A7#1 = RAdd(_t52A0,op1_e3_l_4452A4);
          real op1_e3_l_4752AA#1 = RMul(_t5265,op1_e3_l_4652A7);
          real op1_e3_l_4952AD#1 = RAdd(_t529E,op1_e3_l_4752AA);
          real op1_e3_l_5052B0#1 = RMul(_t5265,op1_e3_l_4952AD);
          real _t52B3#1 = RAdd(_t529C,op1_e3_l_5052B0);
          goto JOIN52B8
        JOIN52B8:  preds = [ASSIGN52B5,JOIN5316]
          real _t52B6#1 = phi(_t52B3,_t52B7)
          real _t52B9#2 = 0.1e1;
          real op1_e3_l_1452BB#1 = RDiv(_t52B9,rad4E85);
          real r52BF#1 = TensorIndex<tensor[3],[0]>(op1_e3_l_9524E);
          real r52C0#3 = RMul(_t52B6,op1_e3_l_1452BB);
          real r52C1#1 = RMul(r52C0,r52BF);
          real r52C2#1 = TensorIndex<tensor[3],[1]>(op1_e3_l_9524E);
          real r52C3#1 = RMul(r52C0,r52C2);
          real r52C4#1 = TensorIndex<tensor[3],[2]>(op1_e3_l_9524E);
          real r52C5#1 = RMul(r52C0,r52C4);
          real r52D1#3 = RDiv(_t52B9,op1_e3_l_125254);
          real r52D3#1 = RMul(r52D1,r52C1);
          real r52D5#1 = RMul(r52D1,r52C3);
          real r52D7#1 = RMul(r52D1,r52C5);
          tensor[3] op1_e3_l_2552CF#1 = <tensor[3]>[r52D3,r52D5,r52D7];
          tensor[3] force52E2#1 = VAdd<3>(force52E3,op1_e3_l_2552CF);
          int _t52E6#1 = 1;
          int nn52E8#1 = IAdd(nn52E9,_t52E6);
          goto FOREACH524B
        ASSIGN52ED:  preds = [COND529B]
          real _t52EC#1 = 0.1e1;
          bool _t52EE#1 = LT<real>(_t5265,_t52EC);
          if _t52EE then goto ASSIGN52F2 else goto JOIN5316
        ASSIGN52F2:  preds = [COND52F0]
          real _t52F1#1 = 0.1234567901e-1;
          real _t52F3#2 = 0.486e1;
          real _t52F5#1 = -0.1458e2;
          real _t52F7#1 = 0.1458e2;
          real op1_e3_l_4252F9#1 = RMul(_t526A,_t5265);
          real op1_e3_l_7352FC#4 = RSub(op1_e3_l_4252F9,_t5268);
          real op1_e3_l_7452FF#1 = RMul(_t52F3,op1_e3_l_7352FC);
          real op1_e3_l_765302#1 = RSub(_t52F7,op1_e3_l_7452FF);
          real op1_e3_l_775305#1 = RMul(op1_e3_l_7352FC,op1_e3_l_765302);
          real op1_e3_l_795308#1 = RAdd(_t52F5,op1_e3_l_775305);
          real op1_e3_l_80530B#1 = RMul(op1_e3_l_7352FC,op1_e3_l_795308);
          real op1_e3_l_82530E#1 = RAdd(_t52F3,op1_e3_l_80530B);
          real r5312#1 = RMul(_t52F1,op1_e3_l_7352FC);
          real _t5311#1 = RMul(r5312,op1_e3_l_82530E);
          goto JOIN5316
        JOIN5316:  preds = [ASSIGN5315,COND52F0]
          real _t52B7#1 = phi(_t5311,_t4EBA)
          goto JOIN52B8
        ASSIGN5318:  preds = [COND5271]
          real _t5317#1 = 0.1e1;
          bool _t5319#1 = LT<real>(_t5265,_t5317);
          if _t5319 then goto ASSIGN531D else goto JOIN5343
        ASSIGN531D:  preds = [COND531B]
          real _t531C#1 = -0.1e-2;
          real _t531E#1 = 0.9e-1;
          real _t5320#1 = -0.54e0;
          real _t5322#1 = 0.1215e1;
          real _t5324#1 = 0.972e0;
          real op1_e3_l_505326#5 = RSub(_t5265,_t526C);
          real op1_e3_l_515329#1 = RMul(_t5324,op1_e3_l_505326);
          real op1_e3_l_62532C#1 = RSub(_t5322,op1_e3_l_515329);
          real op1_e3_l_64532F#1 = RMul(op1_e3_l_62532C,op1_e3_l_505326);
          real op1_e3_l_755332#1 = RAdd(_t5320,op1_e3_l_64532F);
          real op1_e3_l_775335#1 = RMul(op1_e3_l_755332,op1_e3_l_505326);
          real op1_e3_l_985338#1 = RAdd(_t531E,op1_e3_l_775335);
          real r533C#1 = RMul(op1_e3_l_985338,op1_e3_l_505326);
          real op1_e3_l_101533B#1 = RMul(r533C,op1_e3_l_505326);
          real _t5340#1 = RAdd(_t531C,op1_e3_l_101533B);
          goto JOIN5343
        JOIN5343:  preds = [ASSIGN5342,COND531B]
          real _t5295#1 = phi(_t5340,_t4EBA)
          goto JOIN5296
        ASSIGN5345:  preds = [FOREACH524B]
          bool _t5344#1 = EQ<int>(_t5227,nn52E9);
          if _t5344 then goto ASSIGN5348 else goto JOIN5628
        ASSIGN5348:  preds = [COND5346]
          bool _t5347#1 = GT<int>(pcp4E7D,_t5227);
          if _t5347 then goto ASSIGN534B else goto JOIN5354
        ASSIGN534B:  preds = [COND5349]
          bool _t534A#1 = GT<int>(iter4E87,_t5227);
          if _t534A then goto ASSIGN534E else goto JOIN5352
        ASSIGN534E:  preds = [COND534C]
          int _t534D#1 = IMod(iter4E87,pcp4E7D);
          bool _t534F#1 = EQ<int>(_t5227,_t534D);
          goto JOIN5352
        JOIN5352:  preds = [ASSIGN5350,COND534C]
          bool _t5351#1 = phi(_t534F,vv4E9D)
          goto JOIN5354
        JOIN5354:  preds = [JOIN5352,COND5349]
          bool _t5353#1 = phi(_t5351,vv4E9D)
          if _t5353 then goto ASSIGN5357 else goto JOIN5363
        ASSIGN5357:  preds = [COND5355]
          int _t5356#1 = IDiv(iter4E87,pcp4E7D);
          int _t5358#2 = 2;
          int _t535A#1 = IMod(_t5356,_t5358);
          int _t535C#1 = IMul(_t535A,_t5358);
          int _t535E#1 = 1;
          int _t5360#1 = ISub(_t535C,_t535E);
          goto JOIN5363
        JOIN5363:  preds = [ASSIGN5361,COND5355]
          int _t5362#1 = phi(_t5360,_t5227)
          bool _t5364#1 = GT<int>(_t5362,_t5227);
          if _t5364 then goto ASSIGN5368 else goto JOIN536A
        ASSIGN5368:  preds = [COND5366]
          bool _t5367#1 = LT<int>(born4E99,nnmax4E83);
          goto JOIN536A
        JOIN536A:  preds = [ASSIGN5368,COND5366]
          bool _t5369#1 = phi(_t5367,vv4E9D)
          bool _t536B#1 = BNot(_t5369);
          if _t536B then goto SAVE536E else goto JOIN5373
        SAVE536E:  preds = [COND536D]
          self.pos = pos5234;
          self._pos = pos5234;
          self.step = step5231;
          self.trav = trav5245;
          active
          goto JOIN5373
        JOIN5373:  preds = [*ACTIVE5372,COND536D]
          tensor[3,3] _t5374#3 = fPerp5375 (pos5234);
          tensor[3] _t546A#3 = <tensor[3]>[tipd4E65,_t4EBA,_t4EBA];
          tensor[3] projParam546D#3 = ProjectLast<tensor[3,3],[0]>(_t5374);
          real vdot546E#1 = VDot<3>(projParam546D,_t546A);
          tensor[3] projParam546F#3 = ProjectLast<tensor[3,3],[1]>(_t5374);
          real vdot5470#1 = VDot<3>(projParam546F,_t546A);
          tensor[3] projParam5471#3 = ProjectLast<tensor[3,3],[2]>(_t5374);
          real vdot5472#1 = VDot<3>(projParam5471,_t546A);
          tensor[3] noff0546C#3 = <tensor[3]>[vdot546E,vdot5470,vdot5472];
          tensor[3] _t547B#3 = <tensor[3]>[_t4EBA,tipd4E65,_t4EBA];
          real vdot547F#1 = VDot<3>(projParam546D,_t547B);
          real vdot5481#1 = VDot<3>(projParam546F,_t547B);
          real vdot5483#1 = VDot<3>(projParam5471,_t547B);
          tensor[3] noff1547D#3 = <tensor[3]>[vdot547F,vdot5481,vdot5483];
          tensor[3] _t548C#3 = <tensor[3]>[_t4EBA,_t4EBA,tipd4E65];
          real vdot5490#1 = VDot<3>(projParam546D,_t548C);
          real vdot5492#1 = VDot<3>(projParam546F,_t548C);
          real vdot5494#1 = VDot<3>(projParam5471,_t548C);
          tensor[3] noff2548E#3 = <tensor[3]>[vdot5490,vdot5492,vdot5494];
          real op1_e3_l_4549D#1 = VDot<3>(noff0546C,noff0546C);
          real _t54A0#1 = Sqrt(op1_e3_l_4549D);
          real op1_e3_l_454A3#1 = VDot<3>(noff1547D,noff1547D);
          real _t54A6#1 = Sqrt(op1_e3_l_454A3);
          bool _t54A9#1 = GT<real>(_t54A0,_t54A6);
          if _t54A9 then goto JOIN54AD else goto JOIN54AD
        JOIN54AD:  preds = [COND54AB,COND54AB]
          tensor[3] _t54AC#3 = phi(noff0546C,noff1547D)
          real op1_e3_l_154AE#1 = VDot<3>(_t54AC,_t54AC);
          real _t54B1#1 = Sqrt(op1_e3_l_154AE);
          real op1_e3_l_454B4#1 = VDot<3>(noff2548E,noff2548E);
          real _t54B7#1 = Sqrt(op1_e3_l_454B4);
          bool _t54BA#1 = GT<real>(_t54B1,_t54B7);
          if _t54BA then goto JOIN54BE else goto JOIN54BE
        JOIN54BE:  preds = [COND54BC,COND54BC]
          tensor[3] _t54BD#5 = phi(_t54AC,noff2548E)
          real op1_e3_l_654BF#1 = VDot<3>(_t54BD,_t54BD);
          real op1_e3_l_754C2#1 = Sqrt(op1_e3_l_654BF);
          real realLit54C6#2 = 0.1e1;
          real op1_e3_l_854C5#3 = RDiv(realLit54C6,op1_e3_l_754C2);
          real r54CB#1 = TensorIndex<tensor[3],[0]>(_t54BD);
          real r54CC#1 = RMul(tipd4E65,r54CB);
          real r54CD#1 = RMul(r54CC,op1_e3_l_854C5);
          real r54CE#1 = TensorIndex<tensor[3],[1]>(_t54BD);
          real r54CF#1 = RMul(tipd4E65,r54CE);
          real r54D0#1 = RMul(r54CF,op1_e3_l_854C5);
          real r54D1#1 = TensorIndex<tensor[3],[2]>(_t54BD);
          real r54D2#1 = RMul(tipd4E65,r54D1);
          real r54D3#1 = RMul(r54D2,op1_e3_l_854C5);
          tensor[3] op1_e3_l_954CA#1 = <tensor[3]>[r54CD,r54D0,r54D3];
          tensor[3] v54E0#1 = VAdd<3>(op1_e3_l_954CA,pos4E89);
          tensor[3] npos54DF#2 = VAdd<3>(v54E0,step5231);
          tensor[3] _t54E4#1 = fStep50BF (npos54DF);
          tensor[3] op1_e3_l_1354E6#1 = VScale<3>(sfs4E79,_t54E4);
          tensor[3] npos54E9#5 = VAdd<3>(npos54DF,op1_e3_l_1354E6);
          bool _t54F0#2 = GT<int>(verb4E77,_t5227);
          if _t54F0 then goto JOIN54F4 else goto JOIN54F4
        JOIN54F4:  preds = [COND54F2,COND54F2]
          bool _t54F3#1 = phi(vv4E9D,vv4E9D)
          if _t54F3 then goto ASSIGN54F7 else goto ASSIGN59F3
        ASSIGN54F7:  preds = [COND54F5]
          bool _t54F6#1 = true;
          goto JOIN54FA
        JOIN54FA:  preds = [ASSIGN54F7,ASSIGN59F4]
          bool _t54F8#1 = phi(_t54F6,_t54F9)
          if _t54F8 then goto ASSIGN54FD else goto JOIN5526
        ASSIGN54FD:  preds = [COND54FB]
          string _t54FC#1 = "(i#";
          string _t54FE#1 = " @ ";
          string _t5500#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID4E8B,_t54FC,iter4E87,_t54FE,pos5234,_t5500);
          string _t5503#1 = " 0==nn =>NEW(";
          string _t5505#1 = ") w/ ID=";
          real _t5507#1 = 0.1e7;
          real _t5509#1 = VIndex<3,0>(npos54E9);
          real _t550B#1 = urnd4DF7 (_t5509);
          real _t550D#1 = VIndex<3,1>(npos54E9);
          real _t550F#1 = urnd4DF7 (_t550D);
          real _t5511#1 = VIndex<3,2>(npos54E9);
          real _t5513#1 = urnd4DF7 (_t5511);
          real r5516#1 = RAdd(_t550B,_t550F);
          real _t5515#1 = RAdd(r5516,_t5513);
          real _t551C#1 = MathFn<fmod>(_t5515,realLit54C6);
          real _t551E#1 = RMul(_t5507,_t551C);
          real _t5521#1 = MathFn<floor>(_t551E);
          string _t5523#1 = "\n";
          Print<[string,tensor[3],string,real,string]>(_t5503,npos54E9,_t5505,_t5521,_t5523);
          goto JOIN5526
        JOIN5526:  preds = [MASSIGN5525,COND54FB]
          tensor[3] op1_e3_l_85527#2 = VSub<3>(pos5234,_t4EBC);
          real op1_e3_l_10552A#1 = VDot<3>(op1_e3_l_85527,op1_e3_l_85527);
          real _t552D#2 = Sqrt(op1_e3_l_10552A);
          bool _t5530#1 = LT<real>(_t552D,_t4EC7);
          if _t5530 then goto ASSIGN5534 else goto JOIN5538
        ASSIGN5534:  preds = [COND5532]
          real _t5533#1 = 0.3e1;
          bool _t5535#1 = GT<real>(_t552D,_t5533);
          goto JOIN5538
        JOIN5538:  preds = [ASSIGN5536,COND5532]
          bool _t5537#1 = phi(_t5535,vv4E9D)
          if _t5537 then goto ASSIGN553B else goto JOIN5601
        ASSIGN553B:  preds = [COND5539]
          real x553A#5 = VIndex<3,0>(pos5234);
          real y553C#6 = VIndex<3,1>(pos5234);
          real z553E#6 = VIndex<3,2>(pos5234);
          real _t5540#6 = 0.2e1;
          int _t5542#1 = 2;
          real op1_e3_l_65544#2 = RMul(x553A,x553A);
          real op1_e3_l_75547#2 = RMul(y553C,y553C);
          real op1_e3_l_8554A#11 = RMul(z553E,z553E);
          real r554E#1 = RAdd(op1_e3_l_65544,op1_e3_l_75547);
          real op1_e3_l_9554D#2 = RAdd(r554E,op1_e3_l_8554A);
          real op1_e3_l_115552#7 = Cos(op1_e3_l_9554D);
          real r5556#1 = RMul(_t5540,x553A);
          real r5557#1 = RMul(r5556,op1_e3_l_8554A);
          real _t5555#1 = RMul(r5557,op1_e3_l_115552);
          real r555D#1 = RMul(_t5540,y553C);
          real r555E#1 = RMul(r555D,op1_e3_l_8554A);
          real _t555C#1 = RMul(r555E,op1_e3_l_115552);
          real op1_e3_l_145563#3 = RMul(z553E,op1_e3_l_8554A);
          real op1_e3_l_205568#8 = Sin(op1_e3_l_9554D);
          real r556C#1 = RMul(_t5540,op1_e3_l_145563);
          real op1_e3_l_21556B#1 = RMul(r556C,op1_e3_l_115552);
          real r5571#1 = RMul(_t5540,z553E);
          real op1_e3_l_225570#1 = RMul(r5571,op1_e3_l_205568);
          real _t5575#1 = RAdd(op1_e3_l_21556B,op1_e3_l_225570);
          tensor[3] g5578#2 = <tensor[3]>[_t5555,_t555C,_t5575];
          real _t557A#5 = -0.4e1;
          real r557D#1 = RMul(_t557A,op1_e3_l_65544);
          real r557E#1 = RMul(r557D,op1_e3_l_8554A);
          real op1_e3_l_24557C#1 = RMul(r557E,op1_e3_l_205568);
          real r5584#1 = RMul(_t5540,op1_e3_l_8554A);
          real op1_e3_l_255583#2 = RMul(r5584,op1_e3_l_115552);
          real _t5588#1 = RAdd(op1_e3_l_24557C,op1_e3_l_255583);
          real r558C#2 = RMul(_t557A,x553A);
          real r558D#1 = RMul(r558C,y553C);
          real r558E#1 = RMul(r558D,op1_e3_l_8554A);
          real _t558B#2 = RMul(r558E,op1_e3_l_205568);
          real r5596#1 = RMul(r558C,op1_e3_l_145563);
          real op1_e3_l_235594#1 = RMul(r5596,op1_e3_l_205568);
          real r559C#1 = RMul(_t4EC7,x553A);
          real r559D#1 = RMul(r559C,z553E);
          real op1_e3_l_24559B#1 = RMul(r559D,op1_e3_l_115552);
          real _t55A2#2 = RAdd(op1_e3_l_235594,op1_e3_l_24559B);
          tensor[3] _t55A5#1 = <tensor[3]>[_t5588,_t558B,_t55A2];
          real r55A8#1 = RMul(_t557A,op1_e3_l_75547);
          real r55A9#1 = RMul(r55A8,op1_e3_l_8554A);
          real op1_e3_l_2455A7#1 = RMul(r55A9,op1_e3_l_205568);
          real _t55AE#1 = RAdd(op1_e3_l_2455A7,op1_e3_l_255583);
          real r55B2#1 = RMul(_t557A,y553C);
          real r55B3#1 = RMul(r55B2,op1_e3_l_145563);
          real op1_e3_l_2355B1#1 = RMul(r55B3,op1_e3_l_205568);
          real r55B9#1 = RMul(_t4EC7,y553C);
          real r55BA#1 = RMul(r55B9,z553E);
          real op1_e3_l_2455B8#1 = RMul(r55BA,op1_e3_l_115552);
          real _t55BF#2 = RAdd(op1_e3_l_2355B1,op1_e3_l_2455B8);
          tensor[3] _t55C2#1 = <tensor[3]>[_t558B,_t55AE,_t55BF];
          real _t55C4#1 = 0.1e2;
          real op1_e3_l_1855C6#1 = RMul(op1_e3_l_8554A,op1_e3_l_8554A);
          real r55CC#1 = RMul(_t557A,op1_e3_l_1855C6);
          real op1_e3_l_3155CB#1 = RMul(r55CC,op1_e3_l_205568);
          real r55D1#1 = RMul(_t55C4,op1_e3_l_8554A);
          real op1_e3_l_3255D0#1 = RMul(r55D1,op1_e3_l_115552);
          real op1_e3_l_3355D5#1 = RMul(_t5540,op1_e3_l_205568);
          real r55D9#1 = RAdd(op1_e3_l_3155CB,op1_e3_l_3255D0);
          real _t55D8#1 = RAdd(r55D9,op1_e3_l_3355D5);
          tensor[3] _t55DD#1 = <tensor[3]>[_t55A2,_t55BF,_t55D8];
          tensor[3,3] hess55DF#1 = <tensor[3,3]>[_t55A5,_t55C2,_t55DD];
          real[3] _t55E1#1 = EigenVals3x3(hess55DF);
          real _t55E3#1 = Subscript<real[3]>(_t55E1,_t5542);
          real op1_e3_l_355E5#1 = VDot<3>(g5578,g5578);
          real op1_e3_l_455E8#1 = Sqrt(op1_e3_l_355E5);
          real op1_e3_l_555EB#1 = RNeg(_t55E3);
          real op1_e3_l_655EE#1 = RAdd(fBias4E63,op1_e3_l_455E8);
          real str55F1#1 = RDiv(op1_e3_l_555EB,op1_e3_l_655EE);
          bool _t55F4#1 = GT<real>(str55F1,fStrTh4E5F);
          if _t55F4 then goto ASSIGN55F8 else goto JOIN55FF
        ASSIGN55F8:  preds = [COND55F6]
          bool _t55F7#1 = GTE<real>(_t4EBA,fMaskTh4E61);
          if _t55F7 then goto ASSIGN55FB else goto JOIN55FD
        ASSIGN55FB:  preds = [COND55F9]
          bool _t55FA#1 = true;
          goto JOIN55FD
        JOIN55FD:  preds = [ASSIGN55FB,COND55F9]
          bool _t55FC#1 = phi(_t55FA,vv4E9D)
          goto JOIN55FF
        JOIN55FF:  preds = [JOIN55FD,COND55F6]
          bool _t55FE#1 = phi(_t55FC,vv4E9D)
          goto JOIN5601
        JOIN5601:  preds = [JOIN55FF,COND5539]
          bool _t5600#1 = phi(_t55FE,vv4E9D)
          if _t5600 then goto NEW5603 else goto JOIN5609
        NEW5603:  preds = [COND5602]
          new point(npos54E9,hh4E8D);
          int _t5604#1 = 1;
          int born5606#1 = IAdd(born4E99,_t5604);
          goto JOIN5609
        JOIN5609:  preds = [ASSIGN5607,COND5602]
          int born5608#1 = phi(born5606,born4E99)
          if _t54F0 then goto JOIN560C else goto JOIN560C
        JOIN560C:  preds = [COND560A,COND560A]
          bool _t560B#1 = phi(vv4E9D,vv4E9D)
          if _t560B then goto ASSIGN560F else goto ASSIGN59F0
        ASSIGN560F:  preds = [COND560D]
          bool _t560E#1 = true;
          goto JOIN5612
        JOIN5612:  preds = [ASSIGN560F,ASSIGN59F1]
          bool _t5610#1 = phi(_t560E,_t5611)
          if _t5610 then goto ASSIGN5615 else goto JOIN5620
        ASSIGN5615:  preds = [COND5613]
          string _t5614#1 = "(i#";
          string _t5616#1 = " @ ";
          string _t5618#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID4E8B,_t5614,iter4E87,_t5616,pos5234,_t5618);
          string _t561B#1 = "nn=0; after birthing mvmt=";
          string _t561D#1 = "\n";
          Print<[string,real,string]>(_t561B,mvmt4E95,_t561D);
          goto JOIN5620
        JOIN5620:  preds = [MASSIGN561F,COND5613]
          self.pos = pos5234;
          self._pos = pos5234;
          self.step = step5231;
          self.trav = trav5245;
          self.born = born5608;
          active
          goto JOIN5628
        JOIN5628:  preds = [*ACTIVE5626,COND5346]
          int born5627#9 = phi(born4E99)
          tensor[3,3] _t5629#3 = fPerp5375 (pos5234);
          tensor[3] projParam562C#1 = ProjectLast<tensor[3,3],[0]>(_t5629);
          real vdot562D#2 = VDot<3>(projParam562C,force52E3);
          tensor[3] projParam562E#1 = ProjectLast<tensor[3,3],[1]>(_t5629);
          real vdot562F#2 = VDot<3>(projParam562E,force52E3);
          tensor[3] projParam5630#1 = ProjectLast<tensor[3,3],[2]>(_t5629);
          real vdot5631#2 = VDot<3>(projParam5630,force52E3);
          tensor[3] op1_e3_l_3562B#3 = <tensor[3]>[vdot562D,vdot562F,vdot5631];
          tensor[3] es563A#1 = VScale<3>(hh4E8D,op1_e3_l_3562B);
          real op1_e3_l_5563D#1 = VDot<3>(op1_e3_l_3562B,op1_e3_l_3562B);
          real r5641#1 = RMul(hh4E8D,hh4E8D);
          real op1_e3_l_65640#1 = RMul(r5641,op1_e3_l_5563D);
          real _t5645#2 = Sqrt(op1_e3_l_65640);
          bool _t5648#1 = GT<real>(_t5645,tipd4E65);
          if _t5648 then goto ASSIGN564D else goto JOIN5664
        ASSIGN564D:  preds = [COND564A]
          real op1_e3_l_10564B#1 = RDiv(tipd4E65,_t5645);
          real hh564E#4 = RMul(hh4E8D,op1_e3_l_10564B);
          real r5654#1 = RMul(hh564E,vdot562D);
          real r5656#1 = RMul(hh564E,vdot562F);
          real r5658#1 = RMul(hh564E,vdot5631);
          tensor[3] es5651#1 = <tensor[3]>[r5654,r5656,r5658];
          goto JOIN5664
        JOIN5664:  preds = [ASSIGN5661,COND564A]
          tensor[3] es5662#7 = phi(es5651,es563A)
          real hh5663#2 = phi(hh564E,hh4E8D)
          tensor[3] _t5665#1 = VAdd<3>(pos5234,es5662);
          tensor[3] _t566A#3 = fStep50BF (_t5665);
          tensor[3] fs566C#4 = VScale<3>(sfs4E79,_t566A);
          real op1_e3_l_5566F#1 = VDot<3>(_t566A,_t566A);
          real op1_e3_l_65672#1 = RMul(r523B,op1_e3_l_5566F);
          real op1_e3_l_75677#1 = VDot<3>(es5662,es5662);
          real op1_e3_l_8567A#1 = RMul(fsEps4E73,tipd4E65);
          real op1_e3_l_9567D#2 = Sqrt(op1_e3_l_75677);
          real op1_e3_l_105680#2 = Sqrt(op1_e3_l_65672);
          real op1_e3_l_115683#1 = RAdd(op1_e3_l_8567A,op1_e3_l_9567D);
          real _t5686#1 = RDiv(op1_e3_l_105680,op1_e3_l_115683);
          real _t5689#3 = 0.5e0;
          bool _t568B#1 = GT<real>(_t5686,_t5689);
          if _t568B then goto ASSIGN5690 else goto JOIN56C1
        ASSIGN5690:  preds = [COND568D]
          real hh568E#2 = RMul(hh5663,_t5689);
          bool _t5691#1 = GT<int>(verb4E77,_t5227);
          if _t5691 then goto JOIN5695 else goto JOIN5695
        JOIN5695:  preds = [COND5693,COND5693]
          bool _t5694#1 = phi(vv4E9D,vv4E9D)
          if _t5694 then goto ASSIGN5698 else goto ASSIGN59ED
        ASSIGN5698:  preds = [COND5696]
          bool _t5697#1 = true;
          goto JOIN569B
        JOIN569B:  preds = [ASSIGN5698,ASSIGN59EE]
          bool _t5699#1 = phi(_t5697,_t569A)
          if _t5699 then goto ASSIGN569E else goto JOIN56B8
        ASSIGN569E:  preds = [COND569C]
          string _t569D#1 = "(i#";
          string _t569F#1 = " @ ";
          string _t56A1#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID4E8B,_t569D,iter4E87,_t569F,pos5234,_t56A1);
          string _t56A4#1 = "nn=";
          string _t56A6#1 = "; |fs|/|es|=";
          real _t56A8#1 = RDiv(op1_e3_l_105680,op1_e3_l_9567D);
          string _t56AB#1 = " > 0.5; trying again with hh=";
          string _t56AD#1 = "; mvmt=";
          string _t56AF#3 = "\n";
          Print<[string,int,string,real,string,real,string,real,string]>(_t56A4,nn52E9,_t56A6,_t56A8,_t56AB,hh568E,_t56AD,mvmt4E95,_t56AF);
          string _t56B2#1 = "        fs=";
          Print<[string,tensor[3],string]>(_t56B2,fs566C,_t56AF);
          string _t56B5#1 = "        es=";
          Print<[string,tensor[3],string]>(_t56B5,es5662,_t56AF);
          goto JOIN56B8
        JOIN56B8:  preds = [MASSIGN56B7,COND569C]
          self.pos = pos5234;
          self._pos = pos5234;
          self.hh = hh568E;
          self.step = step5231;
          self.trav = trav5245;
          self.born = born5627;
          active
          goto JOIN56C1
        JOIN56C1:  preds = [*ACTIVE56BF,COND568D]
          real hh56C0#2 = phi(hh5663)
          tensor[3] v56C4#1 = VAdd<3>(pos5234,fs566C);
          tensor[3] pos56C2#7 = VAdd<3>(v56C4,es5662);
          point[] _t56C9#1 = SphereQuery<3,point>(pos56C2,rad4E85);
        FOREACH56CC:  preds = [ASSIGN56CA,NEXT5719]
          foreach (P56CB in _t56C9) on exit goto ASSIGN5748
            tensor[3] mno5711#4 = phi(_t4EBC,mno5710)
            real newE570B#6 = phi(_t4EBA,newE570A)
            int nn5717#9 = phi(_t5227,nn5716)
            real closest5205#3 = phi(rad4E85,closest570E)
          tensor[3] _t56CD#1 = P56CB.pos;
          tensor[3] op1_e3_l_1356CF#3 = VSub<3>(_t56CD,pos56C2);
          real op1_e3_l_1556D2#1 = VDot<3>(op1_e3_l_1356CF,op1_e3_l_1356CF);
          real _t56D5#2 = Sqrt(op1_e3_l_1556D2);
          real _t56D8#7 = RDiv(_t56D5,rad4E85);
          real _t56DB#1 = 0.2e1;
          real _t56DD#1 = 0.3e1;
          real _t56DF#2 = RDiv(_t56DB,_t56DD);
          bool _t56E2#1 = LT<real>(_t56D8,_t56DF);
          if _t56E2 then goto ASSIGN56E6 else goto ASSIGN571B
        ASSIGN56E6:  preds = [COND56E4]
          real _t56E5#1 = 0.1e1;
          real _t56E7#1 = -0.5646e1;
          real _t56E9#1 = 0.119835e2;
          real _t56EB#1 = -0.113535e2;
          real _t56ED#1 = 0.40550625e1;
          real op1_e3_l_7856EF#1 = RMul(_t56ED,_t56D8);
          real op1_e3_l_8056F2#1 = RAdd(_t56EB,op1_e3_l_7856EF);
          real op1_e3_l_8156F5#1 = RMul(_t56D8,op1_e3_l_8056F2);
          real op1_e3_l_8356F8#1 = RAdd(_t56E9,op1_e3_l_8156F5);
          real op1_e3_l_8456FB#1 = RMul(_t56D8,op1_e3_l_8356F8);
          real op1_e3_l_8656FE#1 = RAdd(_t56E7,op1_e3_l_8456FB);
          real op1_e3_l_875701#1 = RMul(_t56D8,op1_e3_l_8656FE);
          real _t5704#1 = RAdd(_t56E5,op1_e3_l_875701);
          goto JOIN5709
        JOIN5709:  preds = [ASSIGN5706,JOIN5746]
          real _t5707#1 = phi(_t5704,_t5708)
          real newE570A#1 = RAdd(newE570B,_t5707);
          real closest570E#1 = Min<real>(closest5205,_t56D5);
          tensor[3] mno5710#1 = VAdd<3>(mno5711,op1_e3_l_1356CF);
          int _t5714#1 = 1;
          int nn5716#1 = IAdd(nn5717,_t5714);
          goto FOREACH56CC
        ASSIGN571B:  preds = [COND56E4]
          real _t571A#1 = 0.1e1;
          bool _t571C#1 = LT<real>(_t56D8,_t571A);
          if _t571C then goto ASSIGN5720 else goto JOIN5746
        ASSIGN5720:  preds = [COND571E]
          real _t571F#1 = -0.1e-2;
          real _t5721#1 = 0.9e-1;
          real _t5723#1 = -0.54e0;
          real _t5725#1 = 0.1215e1;
          real _t5727#1 = 0.972e0;
          real op1_e3_l_675729#5 = RSub(_t56D8,_t56DF);
          real op1_e3_l_68572C#1 = RMul(_t5727,op1_e3_l_675729);
          real op1_e3_l_81572F#1 = RSub(_t5725,op1_e3_l_68572C);
          real op1_e3_l_835732#1 = RMul(op1_e3_l_81572F,op1_e3_l_675729);
          real op1_e3_l_965735#1 = RAdd(_t5723,op1_e3_l_835732);
          real op1_e3_l_985738#1 = RMul(op1_e3_l_965735,op1_e3_l_675729);
          real op1_e3_l_123573B#1 = RAdd(_t5721,op1_e3_l_985738);
          real r573F#1 = RMul(op1_e3_l_123573B,op1_e3_l_675729);
          real op1_e3_l_126573E#1 = RMul(r573F,op1_e3_l_675729);
          real _t5743#1 = RAdd(_t571F,op1_e3_l_126573E);
          goto JOIN5746
        JOIN5746:  preds = [ASSIGN5745,COND571E]
          real _t5708#1 = phi(_t5743,_t4EBA)
          goto JOIN5709
        ASSIGN5748:  preds = [FOREACH56CC]
          real _t5747#2 = IntToReal(nn5717);
          bool _t5749#2 = GT<int>(verb4E77,_t5227);
          if _t5749 then goto JOIN574D else goto JOIN574D
        JOIN574D:  preds = [COND574B,COND574B]
          bool _t574C#1 = phi(vv4E9D,vv4E9D)
          if _t574C then goto ASSIGN5750 else goto ASSIGN59EA
        ASSIGN5750:  preds = [COND574E]
          bool _t574F#1 = true;
          goto JOIN5753
        JOIN5753:  preds = [ASSIGN5750,ASSIGN59EB]
          bool _t5751#1 = phi(_t574F,_t5752)
          if _t5751 then goto ASSIGN5756 else goto JOIN5765
        ASSIGN5756:  preds = [COND5754]
          string _t5755#1 = "(i#";
          string _t5757#1 = " @ ";
          string _t5759#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID4E8B,_t5755,iter4E87,_t5757,pos56C2,_t5759);
          string _t575C#1 = "nn=";
          string _t575E#1 = "; oldE=";
          string _t5760#1 = " newE=";
          string _t5762#1 = "\n";
          Print<[string,int,string,real,string,real,string]>(_t575C,nn5717,_t575E,oldE5298,_t5760,newE570B,_t5762);
          goto JOIN5765
        JOIN5765:  preds = [MASSIGN5764,COND5754]
          real _t5766#2 = RSub(newE570B,oldE5298);
          tensor[3] _t5769#2 = VSub<3>(pos56C2,pos5234);
          tensor[3] op1_e3_l_17576C#1 = VNeg<3>(force52E3);
          real op1_e3_l_18576F#2 = VDot<3>(_t5769,op1_e3_l_17576C);
          real _t5772#1 = RMul(gdeTest4E6D,op1_e3_l_18576F);
          bool _t5775#1 = GT<real>(_t5766,_t5772);
          if _t5775 then goto ASSIGN577A else goto JOIN57C7
        ASSIGN577A:  preds = [COND5777]
          real hh5778#3 = RMul(hh56C0,gdeBack4E6F);
          bool _t577B#1 = EQ<real>(_t4EBA,hh5778);
          if _t577B then goto ASSIGN577F else goto JOIN5789
        ASSIGN577F:  preds = [COND577D]
          string _t577E#1 = "(i#";
          string _t5780#1 = " @ ";
          string _t5782#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID4E8B,_t577E,iter4E87,_t5780,pos56C2,_t5782);
          string _t5785#1 = "backtracked all the way to hh=0\n";
          Print<[string]>(_t5785);
          die
          goto JOIN5789
        JOIN5789:  preds = [*DIE5788,COND577D]
          if _t5749 then goto JOIN578C else goto JOIN578C
        JOIN578C:  preds = [COND578A,COND578A]
          bool _t578B#1 = phi(vv4E9D,vv4E9D)
          if _t578B then goto ASSIGN578F else goto ASSIGN59E7
        ASSIGN578F:  preds = [COND578D]
          bool _t578E#1 = true;
          goto JOIN5792
        JOIN5792:  preds = [ASSIGN578F,ASSIGN59E8]
          bool _t5790#1 = phi(_t578E,_t5791)
          if _t5790 then goto ASSIGN5795 else goto JOIN57BD
        ASSIGN5795:  preds = [COND5793]
          string _t5794#1 = "(i#";
          string _t5796#1 = " @ ";
          string _t5798#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID4E8B,_t5794,iter4E87,_t5796,pos56C2,_t5798);
          string _t579B#1 = "nn=";
          string _t579D#1 = "; oldE=";
          string _t579F#1 = " newE=";
          string _t57A1#1 = "; backtracking; hh=";
          string _t57A3#1 = "; mvmt=";
          string _t57A5#7 = "\n";
          Print<[string,int,string,real,string,real,string,real,string,real,string]>(_t579B,nn5717,_t579D,oldE5298,_t579F,newE570B,_t57A1,hh5778,_t57A3,mvmt4E95,_t57A5);
          string _t57A8#1 = "      fs=";
          Print<[string,tensor[3],string]>(_t57A8,fs566C,_t57A5);
          string _t57AB#1 = "      es=";
          Print<[string,tensor[3],string]>(_t57AB,es5662,_t57A5);
          string _t57AE#1 = "      newE - oldE=";
          Print<[string,real,string]>(_t57AE,_t5766,_t57A5);
          string _t57B1#1 = "      force=";
          Print<[string,tensor[3],string]>(_t57B1,force52E3,_t57A5);
          string _t57B4#1 = "      dpos=";
          Print<[string,tensor[3],string]>(_t57B4,_t5769,_t57A5);
          string _t57B7#1 = "      0.5*(pos - oldpos).(-force)=";
          real _t57B9#1 = RMul(_t5689,op1_e3_l_18576F);
          Print<[string,real,string]>(_t57B7,_t57B9,_t57A5);
          goto JOIN57BD
        JOIN57BD:  preds = [MASSIGN57BC,COND5793]
          self.pos = pos5234;
          self._pos = pos5234;
          self.hh = hh5778;
          self.step = step5231;
          self.trav = trav5245;
          self.closest = closest5205;
          self.born = born5627;
          active
          goto JOIN57C7
        JOIN57C7:  preds = [*ACTIVE57C5,COND5777]
          real hh57C6#1 = phi(hh56C0)
          tensor[3] pos5211#8 = phi(pos56C2)
          real hh520F#2 = RMul(hh57C6,gdeOppor4E71);
          tensor[3] v57CA#1 = VAdd<3>(step5231,fs566C);
          tensor[3] step520D#3 = VAdd<3>(v57CA,es5662);
          real op1_e3_l_1257CE#1 = VDot<3>(step520D,step520D);
          real op1_e3_l_1357D1#1 = Sqrt(op1_e3_l_1257CE);
          real _t57D4#4 = RDiv(op1_e3_l_1357D1,tipd4E65);
          real trav5209#1 = RAdd(trav5245,_t57D4);
          real op1_e3_l_2557DB#1 = RSub(mvmt4E95,_t57D4);
          real op1_e3_l_2757DE#1 = RMul(hist4E7B,op1_e3_l_2557DB);
          real mvmt5207#1 = RAdd(_t57D4,op1_e3_l_2757DE);
          bool _t57E3#1 = LT<real>(_t57D4,pcmvEps4E75);
          if _t57E3 then goto ASSIGN57E7 else goto JOIN599D
        ASSIGN57E7:  preds = [COND57E5]
          bool _t57E6#3 = GT<int>(pcp4E7D,_t5227);
          if _t57E6 then goto ASSIGN57EA else goto JOIN57F3
        ASSIGN57EA:  preds = [COND57E8]
          bool _t57E9#1 = GT<int>(iter4E87,_t5227);
          if _t57E9 then goto ASSIGN57ED else goto JOIN57F1
        ASSIGN57ED:  preds = [COND57EB]
          int _t57EC#1 = IMod(iter4E87,pcp4E7D);
          bool _t57EE#1 = EQ<int>(_t5227,_t57EC);
          goto JOIN57F1
        JOIN57F1:  preds = [ASSIGN57EF,COND57EB]
          bool _t57F0#1 = phi(_t57EE,vv4E9D)
          goto JOIN57F3
        JOIN57F3:  preds = [JOIN57F1,COND57E8]
          bool _t57F2#1 = phi(_t57F0,vv4E9D)
          if _t57F2 then goto ASSIGN57F6 else goto JOIN5802
        ASSIGN57F6:  preds = [COND57F4]
          int _t57F5#1 = IDiv(iter4E87,pcp4E7D);
          int _t57F7#2 = 2;
          int _t57F9#1 = IMod(_t57F5,_t57F7);
          int _t57FB#1 = IMul(_t57F9,_t57F7);
          int _t57FD#1 = 1;
          int _t57FF#1 = ISub(_t57FB,_t57FD);
          goto JOIN5802
        JOIN5802:  preds = [ASSIGN5800,COND57F4]
          int _t5801#1 = phi(_t57FF,_t5227)
          bool _t5803#1 = NEQ<int>(_t5801,_t5227);
          if _t5803 then goto COND5806 else goto JOIN599C
        COND5806:  preds = [COND5805]
          if _t57E6 then goto ASSIGN5808 else goto JOIN5811
        ASSIGN5808:  preds = [COND5806]
          bool _t5807#1 = GT<int>(iter4E87,_t5227);
          if _t5807 then goto ASSIGN580B else goto JOIN580F
        ASSIGN580B:  preds = [COND5809]
          int _t580A#1 = IMod(iter4E87,pcp4E7D);
          bool _t580C#1 = EQ<int>(_t5227,_t580A);
          goto JOIN580F
        JOIN580F:  preds = [ASSIGN580D,COND5809]
          bool _t580E#1 = phi(_t580C,vv4E9D)
          goto JOIN5811
        JOIN5811:  preds = [JOIN580F,COND5806]
          bool _t5810#1 = phi(_t580E,vv4E9D)
          if _t5810 then goto ASSIGN5814 else goto JOIN5820
        ASSIGN5814:  preds = [COND5812]
          int _t5813#1 = IDiv(iter4E87,pcp4E7D);
          int _t5815#2 = 2;
          int _t5817#1 = IMod(_t5813,_t5815);
          int _t5819#1 = IMul(_t5817,_t5815);
          int _t581B#1 = 1;
          int _t581D#1 = ISub(_t5819,_t581B);
          goto JOIN5820
        JOIN5820:  preds = [ASSIGN581E,COND5812]
          int _t581F#1 = phi(_t581D,_t5227)
          bool _t5821#1 = GT<int>(_t581F,_t5227);
          if _t5821 then goto ASSIGN5825 else goto JOIN5831
        ASSIGN5825:  preds = [COND5823]
          bool _t5824#1 = LT<real>(newE570B,_t4EBA);
          if _t5824 then goto ASSIGN5828 else goto JOIN582F
        ASSIGN5828:  preds = [COND5826]
          bool _t5827#1 = LT<int>(nn5717,nnmin4E81);
          if _t5827 then goto ASSIGN582B else goto JOIN582D
        ASSIGN582B:  preds = [COND5829]
          bool _t582A#1 = LT<int>(born5627,nnmax4E83);
          goto JOIN582D
        JOIN582D:  preds = [ASSIGN582B,COND5829]
          bool _t582C#1 = phi(_t582A,vv4E9D)
          goto JOIN582F
        JOIN582F:  preds = [JOIN582D,COND5826]
          bool _t582E#1 = phi(_t582C,vv4E9D)
          goto JOIN5831
        JOIN5831:  preds = [JOIN582F,COND5823]
          bool _t5830#1 = phi(_t582E,vv4E9D)
          if _t5830 then goto ASSIGN583D else goto COND599E
        ASSIGN583D:  preds = [COND5832]
          real realLit5834#3 = 0.1e1;
          real r5835#3 = RDiv(realLit5834,_t5747);
          real r5836#1 = TensorIndex<tensor[3],[0]>(mno5711);
          real r5837#2 = RMul(r5835,r5836);
          real r5838#1 = TensorIndex<tensor[3],[1]>(mno5711);
          real r5839#2 = RMul(r5835,r5838);
          real r583A#1 = TensorIndex<tensor[3],[2]>(mno5711);
          real r583B#2 = RMul(r5835,r583A);
          tensor[3] op1_e3_l_65833#2 = <tensor[3]>[r5837,r5839,r583B];
          real op1_e3_l_85846#1 = VDot<3>(op1_e3_l_65833,op1_e3_l_65833);
          real op1_e3_l_95849#1 = Sqrt(op1_e3_l_85846);
          real op1_e3_l_11584C#3 = RDiv(realLit5834,op1_e3_l_95849);
          real r5853#1 = RMul(tipd4E65,r5837);
          real r5854#1 = RMul(r5853,op1_e3_l_11584C);
          real r5856#1 = RMul(tipd4E65,r5839);
          real r5857#1 = RMul(r5856,op1_e3_l_11584C);
          real r5859#1 = RMul(tipd4E65,r583B);
          real r585A#1 = RMul(r5859,op1_e3_l_11584C);
          tensor[3] op1_e3_l_125851#1 = <tensor[3]>[r5854,r5857,r585A];
          tensor[3] npos5866#2 = VSub<3>(pos5211,op1_e3_l_125851);
          tensor[3] _t5869#1 = fStep50BF (npos5866);
          tensor[3] op1_e3_l_16586B#1 = VScale<3>(sfs4E79,_t5869);
          tensor[3] npos586E#2 = VAdd<3>(npos5866,op1_e3_l_16586B);
          tensor[3] _t5871#1 = fStep50BF (npos586E);
          tensor[3] op1_e3_l_195873#1 = VScale<3>(sfs4E79,_t5871);
          tensor[3] npos5876#6 = VAdd<3>(npos586E,op1_e3_l_195873);
          bool birth587B#4 = true;
          int _t587D#2 = 2;
          bool _t587F#1 = EQ<int>(fDim4E7F,_t587D);
          if _t587F then goto ASSIGN5883 else goto JOIN58B6
        ASSIGN5883:  preds = [COND5881]
          int _t5882#1 = 4;
          bool _t5884#1 = GTE<int>(nn5717,_t5882);
          if _t5884 then goto ASSIGN5889 else goto JOIN58B4
        ASSIGN5889:  preds = [COND5886]
          real _t5887#1 = RMul(tipd4E65,mabd4E67);
          point[] _t588A#1 = SphereQuery<3,point>(npos5876,_t5887);
        FOREACH588D:  preds = [ASSIGN588B,NEXT588E]
          foreach (P588C in _t588A) on exit goto COND5890
            bool birth588F#2 = phi(birth587B,vv4E9D)
          goto FOREACH588D
        COND5890:  preds = [FOREACH588D]
          if birth588F then goto ASSIGN5892 else goto JOIN58B2
        ASSIGN5892:  preds = [COND5890]
          real _t5891#1 = VIndex<3,0>(pos5211);
          real _t5893#1 = urnd4DF7 (_t5891);
          real _t5895#1 = VIndex<3,1>(pos5211);
          real _t5897#1 = urnd4DF7 (_t5895);
          real _t5899#1 = VIndex<3,2>(pos5211);
          real _t589B#1 = urnd4DF7 (_t5899);
          real r589E#1 = RAdd(_t5893,_t5897);
          real _t589D#1 = RAdd(r589E,_t589B);
          real _t58A4#1 = MathFn<fmod>(_t589D,realLit5834);
          int _t58A6#1 = ISub(nnmin4E81,nn5717);
          real _t58A8#1 = IntToReal(_t58A6);
          real _t58AA#1 = IntToReal(nnmin4E81);
          real _t58AC#1 = RDiv(_t58A8,_t58AA);
          bool birth58AF#1 = LT<real>(_t58A4,_t58AC);
          goto JOIN58B2
        JOIN58B2:  preds = [ASSIGN58B0,COND5890]
          bool birth58B1#1 = phi(birth58AF,birth588F)
          goto JOIN58B4
        JOIN58B4:  preds = [JOIN58B2,COND5886]
          bool birth58B3#1 = phi(birth58B1,birth587B)
          goto JOIN58B6
        JOIN58B6:  preds = [JOIN58B4,COND5881]
          bool birth58B5#1 = phi(birth58B3,birth587B)
          if birth58B5 then goto ASSIGN58BA else goto JOIN5998
        ASSIGN58BA:  preds = [COND58B7]
          tensor[3] op1_e3_l_3358B8#2 = VSub<3>(npos5876,_t4EBC);
          real op1_e3_l_3558BB#1 = VDot<3>(op1_e3_l_3358B8,op1_e3_l_3358B8);
          real _t58BE#2 = Sqrt(op1_e3_l_3558BB);
          bool _t58C1#1 = LT<real>(_t58BE,_t4EC7);
          if _t58C1 then goto ASSIGN58C5 else goto JOIN58C9
        ASSIGN58C5:  preds = [COND58C3]
          real _t58C4#1 = 0.3e1;
          bool _t58C6#1 = GT<real>(_t58BE,_t58C4);
          goto JOIN58C9
        JOIN58C9:  preds = [ASSIGN58C7,COND58C3]
          bool _t58C8#1 = phi(_t58C6,vv4E9D)
          if _t58C8 then goto ASSIGN58CC else goto JOIN598E
        ASSIGN58CC:  preds = [COND58CA]
          real x58CB#5 = VIndex<3,0>(npos5876);
          real y58CD#6 = VIndex<3,1>(npos5876);
          real z58CF#6 = VIndex<3,2>(npos5876);
          real _t58D1#6 = 0.2e1;
          real op1_e3_l_658D3#2 = RMul(x58CB,x58CB);
          real op1_e3_l_758D6#2 = RMul(y58CD,y58CD);
          real op1_e3_l_858D9#11 = RMul(z58CF,z58CF);
          real r58DD#1 = RAdd(op1_e3_l_658D3,op1_e3_l_758D6);
          real op1_e3_l_958DC#2 = RAdd(r58DD,op1_e3_l_858D9);
          real op1_e3_l_1158E1#7 = Cos(op1_e3_l_958DC);
          real r58E5#1 = RMul(_t58D1,x58CB);
          real r58E6#1 = RMul(r58E5,op1_e3_l_858D9);
          real _t58E4#1 = RMul(r58E6,op1_e3_l_1158E1);
          real r58EC#1 = RMul(_t58D1,y58CD);
          real r58ED#1 = RMul(r58EC,op1_e3_l_858D9);
          real _t58EB#1 = RMul(r58ED,op1_e3_l_1158E1);
          real op1_e3_l_1458F2#3 = RMul(z58CF,op1_e3_l_858D9);
          real op1_e3_l_2058F7#8 = Sin(op1_e3_l_958DC);
          real r58FB#1 = RMul(_t58D1,op1_e3_l_1458F2);
          real op1_e3_l_2158FA#1 = RMul(r58FB,op1_e3_l_1158E1);
          real r5900#1 = RMul(_t58D1,z58CF);
          real op1_e3_l_2258FF#1 = RMul(r5900,op1_e3_l_2058F7);
          real _t5904#1 = RAdd(op1_e3_l_2158FA,op1_e3_l_2258FF);
          tensor[3] g5907#2 = <tensor[3]>[_t58E4,_t58EB,_t5904];
          real _t5909#5 = -0.4e1;
          real r590C#1 = RMul(_t5909,op1_e3_l_658D3);
          real r590D#1 = RMul(r590C,op1_e3_l_858D9);
          real op1_e3_l_24590B#1 = RMul(r590D,op1_e3_l_2058F7);
          real r5913#1 = RMul(_t58D1,op1_e3_l_858D9);
          real op1_e3_l_255912#2 = RMul(r5913,op1_e3_l_1158E1);
          real _t5917#1 = RAdd(op1_e3_l_24590B,op1_e3_l_255912);
          real r591B#2 = RMul(_t5909,x58CB);
          real r591C#1 = RMul(r591B,y58CD);
          real r591D#1 = RMul(r591C,op1_e3_l_858D9);
          real _t591A#2 = RMul(r591D,op1_e3_l_2058F7);
          real r5925#1 = RMul(r591B,op1_e3_l_1458F2);
          real op1_e3_l_235923#1 = RMul(r5925,op1_e3_l_2058F7);
          real r592B#1 = RMul(_t4EC7,x58CB);
          real r592C#1 = RMul(r592B,z58CF);
          real op1_e3_l_24592A#1 = RMul(r592C,op1_e3_l_1158E1);
          real _t5931#2 = RAdd(op1_e3_l_235923,op1_e3_l_24592A);
          tensor[3] _t5934#1 = <tensor[3]>[_t5917,_t591A,_t5931];
          real r5937#1 = RMul(_t5909,op1_e3_l_758D6);
          real r5938#1 = RMul(r5937,op1_e3_l_858D9);
          real op1_e3_l_245936#1 = RMul(r5938,op1_e3_l_2058F7);
          real _t593D#1 = RAdd(op1_e3_l_245936,op1_e3_l_255912);
          real r5941#1 = RMul(_t5909,y58CD);
          real r5942#1 = RMul(r5941,op1_e3_l_1458F2);
          real op1_e3_l_235940#1 = RMul(r5942,op1_e3_l_2058F7);
          real r5948#1 = RMul(_t4EC7,y58CD);
          real r5949#1 = RMul(r5948,z58CF);
          real op1_e3_l_245947#1 = RMul(r5949,op1_e3_l_1158E1);
          real _t594E#2 = RAdd(op1_e3_l_235940,op1_e3_l_245947);
          tensor[3] _t5951#1 = <tensor[3]>[_t591A,_t593D,_t594E];
          real _t5953#1 = 0.1e2;
          real op1_e3_l_185955#1 = RMul(op1_e3_l_858D9,op1_e3_l_858D9);
          real r595B#1 = RMul(_t5909,op1_e3_l_185955);
          real op1_e3_l_31595A#1 = RMul(r595B,op1_e3_l_2058F7);
          real r5960#1 = RMul(_t5953,op1_e3_l_858D9);
          real op1_e3_l_32595F#1 = RMul(r5960,op1_e3_l_1158E1);
          real op1_e3_l_335964#1 = RMul(_t58D1,op1_e3_l_2058F7);
          real r5968#1 = RAdd(op1_e3_l_31595A,op1_e3_l_32595F);
          real _t5967#1 = RAdd(r5968,op1_e3_l_335964);
          tensor[3] _t596C#1 = <tensor[3]>[_t5931,_t594E,_t5967];
          tensor[3,3] hess596E#1 = <tensor[3,3]>[_t5934,_t5951,_t596C];
          real[3] _t5970#1 = EigenVals3x3(hess596E);
          real _t5972#1 = Subscript<real[3]>(_t5970,_t587D);
          real op1_e3_l_35974#1 = VDot<3>(g5907,g5907);
          real op1_e3_l_45977#1 = Sqrt(op1_e3_l_35974);
          real op1_e3_l_5597A#1 = RNeg(_t5972);
          real op1_e3_l_6597D#1 = RAdd(fBias4E63,op1_e3_l_45977);
          real str5980#1 = RDiv(op1_e3_l_5597A,op1_e3_l_6597D);
          bool _t5983#1 = GT<real>(str5980,fStrTh4E5F);
          if _t5983 then goto ASSIGN5987 else goto JOIN598C
        ASSIGN5987:  preds = [COND5985]
          bool _t5986#1 = GTE<real>(_t4EBA,fMaskTh4E61);
          if _t5986 then goto JOIN598A else goto JOIN598A
        JOIN598A:  preds = [COND5988,COND5988]
          bool _t5989#1 = phi(birth587B,vv4E9D)
          goto JOIN598C
        JOIN598C:  preds = [JOIN598A,COND5985]
          bool _t598B#1 = phi(_t5989,vv4E9D)
          goto JOIN598E
        JOIN598E:  preds = [JOIN598C,COND58CA]
          bool _t598D#1 = phi(_t598B,vv4E9D)
          if _t598D then goto NEW5990 else goto JOIN5996
        NEW5990:  preds = [COND598F]
          new point(npos5876,hh520F);
          int _t5991#1 = 1;
          int born5993#1 = IAdd(born5627,_t5991);
          goto JOIN5996
        JOIN5996:  preds = [ASSIGN5994,COND598F]
          int born5995#1 = phi(born5993,born5627)
          goto JOIN5998
        JOIN5998:  preds = [JOIN5996,COND58B7]
          int born5997#1 = phi(born5995,born5627)
          goto JOIN599A
        JOIN599A:  preds = [JOIN5998,JOIN59E5]
          int born5999#1 = phi(born5997,born5627)
          goto JOIN599C
        JOIN599C:  preds = [JOIN599A,COND5805]
          int born599B#1 = phi(born5999,born5627)
          goto JOIN599D
        JOIN599D:  preds = [JOIN599C,COND57E5]
          int born5203#1 = phi(born599B,born5627)
          goto JOIN5212
        COND599E:  preds = [COND5832]
          if _t57E6 then goto ASSIGN59A0 else goto JOIN59A9
        ASSIGN59A0:  preds = [COND599E]
          bool _t599F#1 = GT<int>(iter4E87,_t5227);
          if _t599F then goto ASSIGN59A3 else goto JOIN59A7
        ASSIGN59A3:  preds = [COND59A1]
          int _t59A2#1 = IMod(iter4E87,pcp4E7D);
          bool _t59A4#1 = EQ<int>(_t5227,_t59A2);
          goto JOIN59A7
        JOIN59A7:  preds = [ASSIGN59A5,COND59A1]
          bool _t59A6#1 = phi(_t59A4,vv4E9D)
          goto JOIN59A9
        JOIN59A9:  preds = [JOIN59A7,COND599E]
          bool _t59A8#1 = phi(_t59A6,vv4E9D)
          if _t59A8 then goto ASSIGN59AC else goto JOIN59B8
        ASSIGN59AC:  preds = [COND59AA]
          int _t59AB#1 = IDiv(iter4E87,pcp4E7D);
          int _t59AD#2 = 2;
          int _t59AF#1 = IMod(_t59AB,_t59AD);
          int _t59B1#1 = IMul(_t59AF,_t59AD);
          int _t59B3#1 = 1;
          int _t59B5#1 = ISub(_t59B1,_t59B3);
          goto JOIN59B8
        JOIN59B8:  preds = [ASSIGN59B6,COND59AA]
          int _t59B7#1 = phi(_t59B5,_t5227)
          bool _t59B9#1 = LT<int>(_t59B7,_t5227);
          if _t59B9 then goto ASSIGN59BD else goto JOIN59E5
        ASSIGN59BD:  preds = [COND59BB]
          bool _t59BC#1 = GT<real>(newE570B,_t4EBA);
          if _t59BC then goto ASSIGN59C0 else goto JOIN59E4
        ASSIGN59C0:  preds = [COND59BE]
          bool _t59BF#1 = GT<int>(nn5717,nnmax4E83);
          if _t59BF then goto ASSIGN59C3 else goto JOIN59E3
        ASSIGN59C3:  preds = [COND59C1]
          real _t59C2#1 = VIndex<3,0>(pos5211);
          real _t59C4#1 = urnd4DF7 (_t59C2);
          real _t59C6#1 = VIndex<3,1>(pos5211);
          real _t59C8#1 = urnd4DF7 (_t59C6);
          real _t59CA#1 = VIndex<3,2>(pos5211);
          real _t59CC#1 = urnd4DF7 (_t59CA);
          real r59CF#1 = RAdd(_t59C4,_t59C8);
          real _t59CE#1 = RAdd(r59CF,_t59CC);
          real _t59D3#1 = 0.1e1;
          real _t59D5#1 = MathFn<fmod>(_t59CE,_t59D3);
          int _t59D7#1 = ISub(nn5717,nnmax4E83);
          real _t59D9#1 = IntToReal(_t59D7);
          real _t59DB#1 = RDiv(_t59D9,_t5747);
          bool _t59DE#1 = LT<real>(_t59D5,_t59DB);
          if _t59DE then goto DIE59E1 else goto JOIN59E2
        DIE59E1:  preds = [COND59E0]
          die
          goto JOIN59E2
        JOIN59E2:  preds = [*DIE59E1,COND59E0]
          goto JOIN59E3
        JOIN59E3:  preds = [JOIN59E2,COND59C1]
          goto JOIN59E4
        JOIN59E4:  preds = [JOIN59E3,COND59BE]
          goto JOIN59E5
        JOIN59E5:  preds = [JOIN59E4,COND59BB]
          goto JOIN599A
        ASSIGN59E7:  preds = [COND578D]
          int _t59E6#1 = 1;
          bool _t5791#1 = GT<int>(verb4E77,_t59E6);
          goto JOIN5792
        ASSIGN59EA:  preds = [COND574E]
          int _t59E9#1 = 1;
          bool _t5752#1 = GT<int>(verb4E77,_t59E9);
          goto JOIN5753
        ASSIGN59ED:  preds = [COND5696]
          int _t59EC#1 = 1;
          bool _t569A#1 = GT<int>(verb4E77,_t59EC);
          goto JOIN569B
        ASSIGN59F0:  preds = [COND560D]
          int _t59EF#1 = 1;
          bool _t5611#1 = GT<int>(verb4E77,_t59EF);
          goto JOIN5612
        ASSIGN59F3:  preds = [COND54F5]
          int _t59F2#1 = 1;
          bool _t54F9#1 = GT<int>(verb4E77,_t59F2);
          goto JOIN54FA
        ASSIGN59F6:  preds = [COND4FA5]
          int _t59F5#1 = 1;
          bool _t4FA9#1 = GT<int>(verb4E77,_t59F5);
          goto JOIN4FAA
        ASSIGN59F9:  preds = [COND4EA7]
          int _t59F8#1 = 1;
          bool _t4EAB#1 = GT<int>(verb4E77,_t59F8);
          goto JOIN4EAC
    end update
  end point
## initial strand creation
  COLLECTION
    ENTRY59FB:  preds = []
      tensor[3][] ipos59FC#2 = globals.ipos4D51;
      int _t59FE#1 = 0;
      int _t5A00#1 = Length<tensor[3]>(ipos59FC);
      int _t5A02#1 = 1;
      int _t5A04#1 = ISub(_t5A00,_t5A02);
      int[] _t5A06#1 = Range(_t59FE,_t5A04);
    FOREACH5A09:  preds = [ASSIGN5A07,NEXT5A0F]
      foreach (ii5A08 in _t5A06) on exit goto RETURN5A10
      tensor[3] _t5A0A#1 = Subscript<tensor[3][]>(ipos59FC,ii5A08);
      real _t5A0C#1 = 0.1e1;
      new point(_t5A0A,_t5A0C);
      goto FOREACH5A09
    RETURN5A10:  preds = [FOREACH5A09]
      return
## global update
  ENTRY5A11:  preds = []
    real geoEps5A12#3 = globals.geoEps4D48;
    real mvmtEps5A14#3 = globals.mvmtEps4D49;
    real rpcEps5A16#3 = globals.rpcEps4D4A;
    real pchist5A18#1 = globals.pchist4D56;
    int iter5A1A#4 = globals.iter4D57;
    real rpc5A1C#1 = globals.rpc4D58;
    int popLast5A1E#1 = globals.popLast4D59;
    int pop5A20#5 = NumStrands<active>;
    bool _t5A22#1 = NEQ<int>(pop5A20,popLast5A1E);
    if _t5A22 then goto ASSIGN5A26 else goto ASSIGN5AD8
  ASSIGN5A26:  preds = [COND5A24]
    int _t5A25#1 = 1;
    goto JOIN5A29
  JOIN5A29:  preds = [ASSIGN5A26,ASSIGN5AD8]
    int _t5A27#2 = phi(_t5A25,_t5A28)
    real _t5A2A#2 = IntToReal(_t5A27);
    real op1_e3_l_35A2C#1 = RSub(rpc5A1C,_t5A2A);
    real op1_e3_l_45A2F#1 = RMul(pchist5A18,op1_e3_l_35A2C);
    real rpc5A32#5 = RAdd(_t5A2A,op1_e3_l_45A2F);
    globals.rpc4D58 = rpc5A32;
    point[] P5A36#6 = Strands<point,all>;
    (bool res5A3E#1) = all(MAP all5A38 (P5A36));
    real _t5A40#1 = 0.1e3;
    (real res5A4F#1) = sum<real>(MAP mean5A42 (P5A36));
    int num5A51#1 = NumStrands<all>;
    real rNum5A53#5 = IntToReal(num5A51);
    real op1_e3_l_35A55#1 = RDiv(res5A4F,rNum5A53);
    real percfound5A58#1 = RMul(_t5A40,op1_e3_l_35A55);
    (real res5A61#2) = sum<real>(MAP mean5A5B (P5A36));
    real mean5A63#2 = RDiv(res5A61,rNum5A53);
    (real res5A73#1) = sum<real>(MAP mean5A66 (P5A36,mean5A63));
    real op1_e3_l_45A75#1 = RDiv(res5A73,rNum5A53);
    real op1_e3_l_55A78#1 = Sqrt(op1_e3_l_45A75);
    real op1_e3_l_65A7B#1 = RMul(op1_e3_l_55A78,rNum5A53);
    real covcl5A7E#4 = RDiv(op1_e3_l_65A7B,res5A61);
    (real res5A87#4) = max<real>(MAP max5A81 (P5A36));
    string _t5A89#1 = "======= finished iter ";
    string _t5A8B#1 = " w/ ";
    string _t5A8D#3 = ")";
    string _t5A8F#1 = "; %found=";
    string _t5A91#1 = "; mean(hh)=";
    (real res5A99#1) = sum<real>(MAP mean5A93 (P5A36));
    real mean5A9B#1 = RDiv(res5A99,rNum5A53);
    string _t5A9E#1 = "; mean(cl)=";
    string _t5AA0#3 = "; COV(cl)=";
    string _t5AA2#3 = "; max(mvmt)=";
    string _t5AA4#1 = "; pc=";
    string _t5AA6#3 = "; rpc=";
    string _t5AA8#3 = "\n";
    Print<[string,int,string,int,string,string,real,string,real,string,real,string,real,string,real,string,int,string,real,string]>(_t5A89,iter5A1A,_t5A8B,pop5A20,_t5A8D,_t5A8F,percfound5A58,_t5A91,mean5A9B,_t5A9E,mean5A63,_t5AA0,covcl5A7E,_t5AA2,res5A87,_t5AA4,_t5A27,_t5AA6,rpc5A32,_t5AA8);
    if res5A3E then goto ASSIGN5AAD else goto ASSIGN5AD7
  ASSIGN5AAD:  preds = [COND5AAB]
    bool _t5AAC#1 = LT<real>(covcl5A7E,geoEps5A12);
    if _t5AAC then goto ASSIGN5AB0 else goto ASSIGN5AD6
  ASSIGN5AB0:  preds = [COND5AAE]
    bool _t5AAF#1 = LT<real>(res5A87,mvmtEps5A14);
    if _t5AAF then goto ASSIGN5AB3 else goto ASSIGN5AD5
  ASSIGN5AB3:  preds = [COND5AB1]
    bool _t5AB2#1 = LT<real>(rpc5A32,rpcEps5A16);
    goto JOIN5AB6
  JOIN5AB6:  preds = [ASSIGN5AB3,ASSIGN5AD5]
    bool _t5AB4#1 = phi(_t5AB2,_t5AB5)
    goto JOIN5AB9
  JOIN5AB9:  preds = [JOIN5AB6,ASSIGN5AD6]
    bool _t5AB7#1 = phi(_t5AB4,_t5AB8)
    goto JOIN5ABC
  JOIN5ABC:  preds = [JOIN5AB9,ASSIGN5AD7]
    bool _t5ABA#1 = phi(_t5AB7,_t5ABB)
    if _t5ABA then goto ASSIGN5ABF else goto ASSIGN5ACF
  ASSIGN5ABF:  preds = [COND5ABD]
    string _t5ABE#1 = "======= Stabilizing ";
    string _t5AC0#1 = " (iter ";
    string _t5AC2#3 = " < ";
    Print<[string,int,string,int,string,string,real,string,real,string,real,string,real,string,real,string,real,string]>(_t5ABE,pop5A20,_t5AC0,iter5A1A,_t5A8D,_t5AA0,covcl5A7E,_t5AC2,geoEps5A12,_t5AA2,res5A87,_t5AC2,mvmtEps5A14,_t5AA6,rpc5A32,_t5AC2,rpcEps5A16,_t5AA8);
    StabilizeAll;
    goto JOIN5AC6
  JOIN5AC6:  preds = [MASSIGN5AC5,MASSIGN5AD4]
    int _t5AC7#1 = 1;
    int iter5AC9#1 = IAdd(iter5A1A,_t5AC7);
    globals.iter4D57 = iter5AC9;
    globals.popLast4D59 = pop5A20;
    continue
  ASSIGN5ACF:  preds = [COND5ABD]
    string _t5ACE#1 = "======= Stabilizing ";
    string _t5AD0#1 = " (iter ";
    string _t5AD2#3 = " > ";
    Print<[string,int,string,int,string,string,real,string,real,string,real,string,real,string,real,string,real,string]>(_t5ACE,pop5A20,_t5AD0,iter5A1A,_t5A8D,_t5AA0,covcl5A7E,_t5AD2,geoEps5A12,_t5AA2,res5A87,_t5AD2,mvmtEps5A14,_t5AA6,rpc5A32,_t5AD2,rpcEps5A16,_t5AA8);
    goto JOIN5AC6
  ASSIGN5AD5:  preds = [COND5AB1]
    bool _t5AB5#1 = false;
    goto JOIN5AB6
  ASSIGN5AD6:  preds = [COND5AAE]
    bool _t5AB8#1 = false;
    goto JOIN5AB9
  ASSIGN5AD7:  preds = [COND5AAB]
    bool _t5ABB#1 = false;
    goto JOIN5ABC
  ASSIGN5AD8:  preds = [COND5A24]
    int _t5A28#1 = 0;
    goto JOIN5A29
#### end program ####
##### low-ir: after contraction(2) ####
## properties
  GlobalInit StabilizeAll GlobalReduce StrandSets GlobalUpdate NewStrands StrandCommunication StrandsMayDie HasInputs HasGlobals ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
## globals
  input meshData4D3A (meshData) = <no-default>
  input 0space07C6_intermedateGlobal4D3B (space) = <no-default>
  input 0data07C8_intermedateGlobal4D3C (data) = <no-default>
  input fStrTh4D3D (fStrTh) = <no-default>
  input fMaskTh4D3E (fMaskTh) = <default>
  input fBias4D3F (fBias) = <default>
  input tipd4D40 (tipd) = <default>
  input mabd4D41 (mabd) = <default>
  input travMax4D42 (travMax) = <default>
  input nfsMax4D43 (nfsMax) = <default>
  input gdeTest4D44 (gdeTest) = <default>
  input gdeBack4D45 (gdeBack) = <default>
  input gdeOppor4D46 (gdeOppor) = <default>
  input fsEps4D47 (fsEps) = <no-default>
  input geoEps4D48 (geoEps) = <default>
  input mvmtEps4D49 (mvmtEps) = <default>
  input rpcEps4D4A (rpcEps) = <default>
  input pcmvEps4D4B (pcmvEps) = <default>
  input isoval4D4C (isoval) = <default>
  input verb4D4D (verb) = <default>
  input sfs4D4E (sfs) = <default>
  input hist4D4F (hist) = <default>
  input pcp4D50 (pcp) = <default>
  input ipos4D51 (ipos) = <no-default>
  input fDim4D52 (fDim) = <default>
  global int nnmin4D53
  global int nnmax4D54
  global real rad4D55
  global real pchist4D56
  varying global int iter4D57
  varying global real rpc4D58
  varying global int popLast4D59
## functions
  function real urnd4DF7 (real x4DF8#2) {
    ENTRY4DF9:  preds = []
      int iter4DFA#1 = globals.iter4D57;
      real _t4DFC#2 = 0.e0;
      bool _t4DFE#1 = EQ<real>(x4DF8,_t4DFC);
      if _t4DFE then goto RETURN(_t4DFC)4E01 else goto JOIN4E02
    RETURN(_t4DFC)4E01:  preds = [COND4E00]
      return _t4DFC
      goto JOIN4E02
    JOIN4E02:  preds = [*RETURN(_t4DFC)4E01,COND4E00]
      real _t4E03#1 = Abs<real>(x4DF8);
      real l24E06#2 = MathFn<log2>(_t4E03);
      real _t4E08#4 = 0.2e1;
      real _t4E0A#1 = MathFn<floor>(l24E06);
      real _t4E0C#2 = 0.1e1;
      real op1_e3_l_34E0E#1 = RSub(l24E06,_t4E0A);
      real _t4E11#1 = RSub(op1_e3_l_34E0E,_t4E0C);
      real frxp4E14#1 = MathFn<pow>(_t4E08,_t4E11);
      int _t4E16#1 = 2;
      int _t4E18#1 = IMul(_t4E16,iter4DFA);
      real _t4E1A#1 = IntToReal(_t4E18);
      real _Pow_24E1D#2 = RMul(_t4E08,_t4E08);
      real _Pow4_4E1E#1 = RMul(_Pow_24E1D,_Pow_24E1D);
      real _Pow5_4E1F#2 = RMul(_t4E08,_Pow4_4E1E);
      real _Pow10_4E20#2 = RMul(_Pow5_4E1F,_Pow5_4E1F);
      real op1_e3_l_34E1C#1 = RMul(_Pow10_4E20,_Pow10_4E20);
      real op1_e3_l_44E27#1 = RAdd(op1_e3_l_34E1C,_t4E1A);
      real _t4E2A#1 = RMul(frxp4E14,op1_e3_l_44E27);
      real _t4E2D#1 = MathFn<fmod>(_t4E2A,_t4E0C);
      return _t4E2D
}
  function tensor[3] fStep50BF (tensor[3] s50C0#3) {
    ENTRY50C1:  preds = []
      real x50C2#5 = VIndex<3,0>(s50C0);
      real y50C4#6 = VIndex<3,1>(s50C0);
      real z50C6#6 = VIndex<3,2>(s50C0);
      real _t50C8#6 = 0.2e1;
      int _t50CA#2 = 2;
      real op1_e3_l_650CC#2 = RMul(x50C2,x50C2);
      real op1_e3_l_750CF#2 = RMul(y50C4,y50C4);
      real op1_e3_l_850D2#11 = RMul(z50C6,z50C6);
      real r50D6#1 = RAdd(op1_e3_l_650CC,op1_e3_l_750CF);
      real op1_e3_l_950D5#2 = RAdd(r50D6,op1_e3_l_850D2);
      real op1_e3_l_1150DA#7 = Cos(op1_e3_l_950D5);
      real r50DE#1 = RMul(_t50C8,x50C2);
      real r50DF#1 = RMul(r50DE,op1_e3_l_850D2);
      real _t50DD#1 = RMul(r50DF,op1_e3_l_1150DA);
      real r50E5#1 = RMul(_t50C8,y50C4);
      real r50E6#1 = RMul(r50E5,op1_e3_l_850D2);
      real _t50E4#1 = RMul(r50E6,op1_e3_l_1150DA);
      real op1_e3_l_1450EB#3 = RMul(z50C6,op1_e3_l_850D2);
      real op1_e3_l_2050F0#8 = Sin(op1_e3_l_950D5);
      real r50F4#1 = RMul(_t50C8,op1_e3_l_1450EB);
      real op1_e3_l_2150F3#1 = RMul(r50F4,op1_e3_l_1150DA);
      real r50F9#1 = RMul(_t50C8,z50C6);
      real op1_e3_l_2250F8#1 = RMul(r50F9,op1_e3_l_2050F0);
      real _t50FD#1 = RAdd(op1_e3_l_2150F3,op1_e3_l_2250F8);
      tensor[3] g5100#1 = <tensor[3]>[_t50DD,_t50E4,_t50FD];
      real _t5102#5 = -0.4e1;
      real r5105#1 = RMul(_t5102,op1_e3_l_650CC);
      real r5106#1 = RMul(r5105,op1_e3_l_850D2);
      real op1_e3_l_245104#1 = RMul(r5106,op1_e3_l_2050F0);
      real r510C#1 = RMul(_t50C8,op1_e3_l_850D2);
      real op1_e3_l_25510B#2 = RMul(r510C,op1_e3_l_1150DA);
      real _t5110#1 = RAdd(op1_e3_l_245104,op1_e3_l_25510B);
      real r5114#2 = RMul(_t5102,x50C2);
      real r5115#1 = RMul(r5114,y50C4);
      real r5116#1 = RMul(r5115,op1_e3_l_850D2);
      real _t5113#2 = RMul(r5116,op1_e3_l_2050F0);
      real _t511C#2 = 0.4e1;
      real r5120#1 = RMul(r5114,op1_e3_l_1450EB);
      real op1_e3_l_23511E#1 = RMul(r5120,op1_e3_l_2050F0);
      real r5126#1 = RMul(_t511C,x50C2);
      real r5127#1 = RMul(r5126,z50C6);
      real op1_e3_l_245125#1 = RMul(r5127,op1_e3_l_1150DA);
      real _t512C#2 = RAdd(op1_e3_l_23511E,op1_e3_l_245125);
      tensor[3] _t512F#1 = <tensor[3]>[_t5110,_t5113,_t512C];
      real r5132#1 = RMul(_t5102,op1_e3_l_750CF);
      real r5133#1 = RMul(r5132,op1_e3_l_850D2);
      real op1_e3_l_245131#1 = RMul(r5133,op1_e3_l_2050F0);
      real _t5138#1 = RAdd(op1_e3_l_245131,op1_e3_l_25510B);
      real r513C#1 = RMul(_t5102,y50C4);
      real r513D#1 = RMul(r513C,op1_e3_l_1450EB);
      real op1_e3_l_23513B#1 = RMul(r513D,op1_e3_l_2050F0);
      real r5143#1 = RMul(_t511C,y50C4);
      real r5144#1 = RMul(r5143,z50C6);
      real op1_e3_l_245142#1 = RMul(r5144,op1_e3_l_1150DA);
      real _t5149#2 = RAdd(op1_e3_l_23513B,op1_e3_l_245142);
      tensor[3] _t514C#1 = <tensor[3]>[_t5113,_t5138,_t5149];
      real _t514E#1 = 0.1e2;
      real op1_e3_l_185150#1 = RMul(op1_e3_l_850D2,op1_e3_l_850D2);
      real r5156#1 = RMul(_t5102,op1_e3_l_185150);
      real op1_e3_l_315155#1 = RMul(r5156,op1_e3_l_2050F0);
      real r515B#1 = RMul(_t514E,op1_e3_l_850D2);
      real op1_e3_l_32515A#1 = RMul(r515B,op1_e3_l_1150DA);
      real op1_e3_l_33515F#1 = RMul(_t50C8,op1_e3_l_2050F0);
      real r5163#1 = RAdd(op1_e3_l_315155,op1_e3_l_32515A);
      real _t5162#1 = RAdd(r5163,op1_e3_l_33515F);
      tensor[3] _t5167#1 = <tensor[3]>[_t512C,_t5149,_t5162];
      tensor[3,3] hess5169#1 = <tensor[3,3]>[_t512F,_t514C,_t5167];
      (real[3] evals516B#1,tensor[3][3] E516C#1) = EigenVecs3x3(hess5169);
      real _t516E#1 = 0.1e1;
      real _t5170#1 = Subscript<real[3]>(evals516B,_t50CA);
      tensor[3] _t5172#4 = Subscript<tensor[3][3]>(E516C,_t50CA);
      real op1_e3_l_55174#1 = RDiv(_t516E,_t5170);
      real op1_e3_l_65177#3 = RNeg(op1_e3_l_55174);
      real op1_e3_l_7517A#3 = VDot<3>(_t5172,g5100);
      real r517E#1 = TensorIndex<tensor[3],[0]>(_t5172);
      real r517F#1 = RMul(op1_e3_l_65177,r517E);
      real r5180#1 = RMul(r517F,op1_e3_l_7517A);
      real r5181#1 = TensorIndex<tensor[3],[1]>(_t5172);
      real r5182#1 = RMul(op1_e3_l_65177,r5181);
      real r5183#1 = RMul(r5182,op1_e3_l_7517A);
      real r5184#1 = TensorIndex<tensor[3],[2]>(_t5172);
      real r5185#1 = RMul(op1_e3_l_65177,r5184);
      real r5186#1 = RMul(r5185,op1_e3_l_7517A);
      tensor[3] up517D#4 = <tensor[3]>[r5180,r5183,r5186];
      real _t5192#2 = VIndex<3,0>(up517D);
      bool _t5194#1 = EQ<real>(_t5192,_t5192);
      bool _t5196#1 = BNot(_t5194);
      if _t5196 then goto ASSIGN519A else goto ASSIGN51A7
    ASSIGN519A:  preds = [COND5198]
      bool _t5199#1 = true;
      goto JOIN519D
    JOIN519D:  preds = [ASSIGN519A,JOIN51B0]
      bool _t519B#1 = phi(_t5199,_t519C)
      if _t519B then goto ASSIGN51A0 else goto JOIN51A4
    ASSIGN51A0:  preds = [COND519E]
      real _t519F#3 = +inf;
      tensor[3] _t51A1#1 = <tensor[3]>[_t519F,_t519F,_t519F];
      return _t51A1
      goto JOIN51A4
    JOIN51A4:  preds = [*RETURN(_t51A1)51A3,COND519E]
      return up517D
    ASSIGN51A7:  preds = [COND5198]
      real _t51A6#2 = VIndex<3,1>(up517D);
      bool _t51A8#1 = EQ<real>(_t51A6,_t51A6);
      bool _t51AA#1 = BNot(_t51A8);
      if _t51AA then goto ASSIGN51AE else goto ASSIGN51B2
    ASSIGN51AE:  preds = [COND51AC]
      bool _t51AD#1 = true;
      goto JOIN51B0
    JOIN51B0:  preds = [ASSIGN51AE,ASSIGN51B5]
      bool _t519C#1 = phi(_t51AD,_t51AF)
      goto JOIN519D
    ASSIGN51B2:  preds = [COND51AC]
      real _t51B1#2 = VIndex<3,2>(up517D);
      bool _t51B3#1 = EQ<real>(_t51B1,_t51B1);
      bool _t51AF#1 = BNot(_t51B3);
      goto JOIN51B0
}
  function tensor[3,3] fPerp5375 (tensor[3] s5376#3) {
    ENTRY5377:  preds = []
      real x5378#4 = VIndex<3,0>(s5376);
      real y537A#5 = VIndex<3,1>(s5376);
      real z537C#5 = VIndex<3,2>(s5376);
      real _t537E#2 = 0.2e1;
      int _t5380#1 = 2;
      real _t5382#5 = -0.4e1;
      real op1_e3_l_115384#2 = RMul(x5378,x5378);
      real op1_e3_l_125387#2 = RMul(y537A,y537A);
      real op1_e3_l_13538A#9 = RMul(z537C,z537C);
      real r538E#1 = RAdd(op1_e3_l_115384,op1_e3_l_125387);
      real op1_e3_l_14538D#2 = RAdd(r538E,op1_e3_l_13538A);
      real op1_e3_l_175392#7 = Sin(op1_e3_l_14538D);
      real op1_e3_l_235395#4 = Cos(op1_e3_l_14538D);
      real r5399#1 = RMul(_t5382,op1_e3_l_115384);
      real r539A#1 = RMul(r5399,op1_e3_l_13538A);
      real op1_e3_l_245398#1 = RMul(r539A,op1_e3_l_175392);
      real r53A0#1 = RMul(_t537E,op1_e3_l_13538A);
      real op1_e3_l_25539F#2 = RMul(r53A0,op1_e3_l_235395);
      real _t53A4#1 = RAdd(op1_e3_l_245398,op1_e3_l_25539F);
      real r53A8#2 = RMul(_t5382,x5378);
      real r53A9#1 = RMul(r53A8,y537A);
      real r53AA#1 = RMul(r53A9,op1_e3_l_13538A);
      real _t53A7#2 = RMul(r53AA,op1_e3_l_175392);
      real _t53B0#2 = 0.4e1;
      real op1_e3_l_1653B2#2 = RMul(z537C,op1_e3_l_13538A);
      real r53B9#1 = RMul(r53A8,op1_e3_l_1653B2);
      real op1_e3_l_2353B7#1 = RMul(r53B9,op1_e3_l_175392);
      real r53BF#1 = RMul(_t53B0,x5378);
      real r53C0#1 = RMul(r53BF,z537C);
      real op1_e3_l_2453BE#1 = RMul(r53C0,op1_e3_l_235395);
      real _t53C5#2 = RAdd(op1_e3_l_2353B7,op1_e3_l_2453BE);
      tensor[3] _t53C8#1 = <tensor[3]>[_t53A4,_t53A7,_t53C5];
      real r53CB#1 = RMul(_t5382,op1_e3_l_125387);
      real r53CC#1 = RMul(r53CB,op1_e3_l_13538A);
      real op1_e3_l_2453CA#1 = RMul(r53CC,op1_e3_l_175392);
      real _t53D1#1 = RAdd(op1_e3_l_2453CA,op1_e3_l_25539F);
      real r53D5#1 = RMul(_t5382,y537A);
      real r53D6#1 = RMul(r53D5,op1_e3_l_1653B2);
      real op1_e3_l_2353D4#1 = RMul(r53D6,op1_e3_l_175392);
      real r53DC#1 = RMul(_t53B0,y537A);
      real r53DD#1 = RMul(r53DC,z537C);
      real op1_e3_l_2453DB#1 = RMul(r53DD,op1_e3_l_235395);
      real _t53E2#2 = RAdd(op1_e3_l_2353D4,op1_e3_l_2453DB);
      tensor[3] _t53E5#1 = <tensor[3]>[_t53A7,_t53D1,_t53E2];
      real _t53E7#1 = 0.1e2;
      real op1_e3_l_1853E9#1 = RMul(op1_e3_l_13538A,op1_e3_l_13538A);
      real r53EF#1 = RMul(_t5382,op1_e3_l_1853E9);
      real op1_e3_l_3153EE#1 = RMul(r53EF,op1_e3_l_175392);
      real r53F4#1 = RMul(_t53E7,op1_e3_l_13538A);
      real op1_e3_l_3253F3#1 = RMul(r53F4,op1_e3_l_235395);
      real op1_e3_l_3353F8#1 = RMul(_t537E,op1_e3_l_175392);
      real r53FC#1 = RAdd(op1_e3_l_3153EE,op1_e3_l_3253F3);
      real _t53FB#1 = RAdd(r53FC,op1_e3_l_3353F8);
      tensor[3] _t5400#1 = <tensor[3]>[_t53C5,_t53E2,_t53FB];
      tensor[3,3] hess5402#1 = <tensor[3,3]>[_t53C8,_t53E5,_t5400];
      (real[3] evals5404#0,tensor[3][3] _t5405#1) = EigenVecs3x3(hess5402);
      tensor[3] E25407#6 = Subscript<tensor[3][3]>(_t5405,_t5380);
      real r540A#1 = TensorIndex<tensor[3],[0]>(E25407);
      tensor[3] binopV540B#3 = VScale<3>(r540A,E25407);
      real r540C#1 = TensorIndex<tensor[3],[1]>(E25407);
      tensor[3] binopV540D#3 = VScale<3>(r540C,E25407);
      real r540E#1 = TensorIndex<tensor[3],[2]>(E25407);
      tensor[3] binopV540F#3 = VScale<3>(r540E,E25407);
      real realLit5419#3 = 0.1e1;
      real r541A#1 = VIndex<3,0>(binopV540B);
      real r541B#1 = RSub(realLit5419,r541A);
      real realLit541C#9 = 0.e0;
      real r541D#1 = VIndex<3,1>(binopV540B);
      real r541E#1 = RSub(realLit541C,r541D);
      real r541F#1 = VIndex<3,2>(binopV540B);
      real r5420#1 = RSub(realLit541C,r541F);
      tensor[3] tensor5421#3 = <tensor[3]>[r541B,r541E,r5420];
      real r5422#1 = VIndex<3,0>(binopV540D);
      real r5423#1 = RSub(realLit541C,r5422);
      real r5424#1 = VIndex<3,1>(binopV540D);
      real r5425#1 = RSub(realLit5419,r5424);
      real r5426#1 = VIndex<3,2>(binopV540D);
      real r5427#1 = RSub(realLit541C,r5426);
      tensor[3] tensor5428#3 = <tensor[3]>[r5423,r5425,r5427];
      real r5429#1 = VIndex<3,0>(binopV540F);
      real r542A#1 = RSub(realLit541C,r5429);
      real r542B#1 = VIndex<3,1>(binopV540F);
      real r542C#1 = RSub(realLit541C,r542B);
      real r542D#1 = VIndex<3,2>(binopV540F);
      real r542E#1 = RSub(realLit5419,r542D);
      tensor[3] tensor542F#3 = <tensor[3]>[r542A,r542C,r542E];
      tensor[3,3] m5418#1 = <tensor[3,3]>[tensor5421,tensor5428,tensor542F];
      real vdot544B#1 = VDot<3>(tensor5421,tensor5421);
      real vdot544D#1 = VDot<3>(tensor5428,tensor5428);
      real r544E#1 = RAdd(vdot544B,vdot544D);
      real vdot5450#1 = VDot<3>(tensor542F,tensor542F);
      real t5449#2 = RAdd(r544E,vdot5450);
      bool _t545A#1 = EQ<real>(t5449,t5449);
      bool _t545C#1 = BNot(_t545A);
      if _t545C then goto ASSIGN5AF7 else goto JOIN5467
    ASSIGN5AF7:  preds = [COND545E]
      tensor[3] tensor5461#3 = <tensor[3]>[realLit541C,realLit541C,realLit541C];
      tensor[3,3] _t545F#1 = <tensor[3,3]>[tensor5461,tensor5461,tensor5461];
      return _t545F
      goto JOIN5467
    JOIN5467:  preds = [*RETURN(_t545F)5466,COND545E]
      return m5418
}
  function bool all5A38 (point P5A39#1) {
    ENTRY5A3A:  preds = []
      bool _t5A3B#1 = P5A39.found;
      return _t5A3B
}
  function real mean5A42 (point P5A43#1) {
    ENTRY5A44:  preds = []
      bool _t5A45#1 = P5A43.found;
      if _t5A45 then goto ASSIGN5A49 else goto ASSIGN5A4E
    ASSIGN5A49:  preds = [COND5A47]
      real _t5A48#1 = 0.1e1;
      goto JOIN5A4C
    JOIN5A4C:  preds = [ASSIGN5A49,ASSIGN5A4E]
      real _t5A4A#1 = phi(_t5A48,_t5A4B)
      return _t5A4A
    ASSIGN5A4E:  preds = [COND5A47]
      real _t5A4B#1 = 0.e0;
      goto JOIN5A4C
}
  function real mean5A5B (point P5A5C#1) {
    ENTRY5A5D:  preds = []
      real _t5A5E#1 = P5A5C.closest;
      return _t5A5E
}
  function real mean5A66 (point P5A67#1, real meancl5A68#1) {
    ENTRY5A69:  preds = []
      real _t5A6A#1 = P5A67.closest;
      real op1_e3_l_25A6C#2 = RSub(_t5A6A,meancl5A68);
      real _t5A6F#1 = RMul(op1_e3_l_25A6C,op1_e3_l_25A6C);
      return _t5A6F
}
  function real max5A81 (point P5A82#1) {
    ENTRY5A83:  preds = []
      real _t5A84#1 = P5A82.mvmt;
      return _t5A84
}
  function real mean5A93 (point P5A94#1) {
    ENTRY5A95:  preds = []
      real _t5A96#1 = P5A94.hh;
      return _t5A96
}
## input initialization
  ENTRY4D5A:  preds = []
    real fMaskTh4D5B#3 = 0.e0;
    globals.fMaskTh4D3E = fMaskTh4D5B;
    globals.fBias4D3F = fMaskTh4D5B;
    real tipd4D5F#1 = 0.1e1;
    globals.tipd4D40 = tipd4D5F;
    real mabd4D62#1 = 0.75e0;
    globals.mabd4D41 = mabd4D62;
    real travMax4D65#1 = 0.1e2;
    globals.travMax4D42 = travMax4D65;
    int nfsMax4D68#1 = 20;
    globals.nfsMax4D43 = nfsMax4D68;
    real gdeTest4D6B#4 = 0.5e0;
    globals.gdeTest4D44 = gdeTest4D6B;
    globals.gdeBack4D45 = gdeTest4D6B;
    real gdeOppor4D6F#1 = 0.12e1;
    globals.gdeOppor4D46 = gdeOppor4D6F;
    real geoEps4D72#1 = 0.1e0;
    globals.geoEps4D48 = geoEps4D72;
    real mvmtEps4D75#2 = 0.1e-1;
    globals.mvmtEps4D49 = mvmtEps4D75;
    globals.rpcEps4D4A = mvmtEps4D75;
    real pcmvEps4D79#1 = 0.3e0;
    globals.pcmvEps4D4B = pcmvEps4D79;
    globals.isoval4D4C = fMaskTh4D5B;
    int verb4D7D#1 = 0;
    globals.verb4D4D = verb4D7D;
    globals.sfs4D4E = gdeTest4D6B;
    globals.hist4D4F = gdeTest4D6B;
    int pcp4D82#1 = 5;
    globals.pcp4D50 = pcp4D82;
    int fDim4D85#1 = 2;
    globals.fDim4D52 = fDim4D85;
    return
## global-variable initialization
  ENTRY4D89:  preds = []
    femData:Mesh meshData4D8A#2 = globals.meshData4D3A;
    real tipd4D8C#1 = globals.tipd4D40;
    real hist4D8E#1 = globals.hist4D4F;
    int pcp4D90#1 = globals.pcp4D50;
    int fDim4D92#3 = globals.fDim4D52;
    int _t4D94#4 = 0;
    int _t4D96#3 = 1;
    int _t4D98#1 = ExtractFemItem<int,NumCell(Mesh)>(meshData4D8A);
    int _t4D9A#1 = ISub(_t4D98,_t4D96);
    int[] _t4D9C#1 = Range(_t4D94,_t4D9A);
    femData:MeshCell[] _t4D9E#1 = <femData:MeshCell[]>{};
  FOREACH4DA1:  preds = [ASSIGN4D9F,NEXT4DA7]
    foreach (_t4DA0 in _t4D9C) on exit goto ASSIGN4DA9
      femData:MeshCell[] _t4DA5#1 = phi(_t4D9E,_t4DA4)
    femData:MeshCell _t4DA2#1 = LoadFem<femData:MeshCell>(meshData4D8A,_t4DA0);
    femData:MeshCell[] _t4DA4#1 = Append<femData:MeshCell>(_t4DA5,_t4DA2);
    goto FOREACH4DA1
  ASSIGN4DA9:  preds = [FOREACH4DA1]
    int _t4DA8#3 = 2;
    bool _t4DAA#2 = EQ<int>(_t4DA8,fDim4D92);
    if _t4DAA then goto ASSIGN4DAE else goto ASSIGN4DDE
  ASSIGN4DAE:  preds = [COND4DAC]
    int _t4DAD#1 = 6;
    goto JOIN4DB1
  JOIN4DB1:  preds = [ASSIGN4DAE,JOIN4DE0]
    int _t4DAF#1 = phi(_t4DAD,_t4DB0)
    globals.nnmin4D53 = _t4DAF;
    if _t4DAA then goto ASSIGN4DB5 else goto ASSIGN4DD8
  ASSIGN4DB5:  preds = [COND4DB3]
    int _t4DB4#1 = 8;
    goto JOIN4DB8
  JOIN4DB8:  preds = [ASSIGN4DB5,JOIN4DDC]
    int _t4DB6#1 = phi(_t4DB4,_t4DB7)
    globals.nnmax4D54 = _t4DB6;
    real _t4DBA#1 = 0.2e1;
    real _t4DBC#1 = 0.3e1;
    real op1_e3_l_34DBE#1 = RMul(tipd4D8C,_t4DBC);
    real rad4DC1#1 = RDiv(op1_e3_l_34DBE,_t4DBA);
    globals.rad4D55 = rad4DC1;
    real _t4DC5#2 = 0.1e1;
    int _t4DC7#1 = IMul(_t4DA8,pcp4D90);
    real _t4DC9#1 = IntToReal(_t4DC7);
    real _t4DCB#1 = RDiv(_t4DC5,_t4DC9);
    real pchist4DCE#1 = MathFn<pow>(hist4D8E,_t4DCB);
    globals.pchist4D56 = pchist4DCE;
    globals.iter4D57 = _t4D94;
    globals.rpc4D58 = _t4DC5;
    int popLast4DD3#1 = -1;
    globals.popLast4D59 = popLast4DD3;
    return
  ASSIGN4DD8:  preds = [COND4DB3]
    bool _t4DD7#1 = EQ<int>(_t4D96,fDim4D92);
    if _t4DD7 then goto ASSIGN4DDB else goto JOIN4DDC
  ASSIGN4DDB:  preds = [COND4DD9]
    int _t4DDA#1 = 3;
    goto JOIN4DDC
  JOIN4DDC:  preds = [ASSIGN4DDB,COND4DD9]
    int _t4DB7#1 = phi(_t4DDA,_t4D94)
    goto JOIN4DB8
  ASSIGN4DDE:  preds = [COND4DAC]
    bool _t4DDD#1 = EQ<int>(_t4D96,fDim4D92);
    if _t4DDD then goto JOIN4DE0 else goto JOIN4DE0
  JOIN4DE0:  preds = [COND4DDF,COND4DDF]
    int _t4DB0#1 = phi(_t4DA8,_t4D94)
    goto JOIN4DB1
## strand
  strand point (tensor[3] p04DE1#5, real hh04DE2#1) in 3D
    state:
      output tensor[3] pos;
      output tensor[3] _pos;
      real ID;
      real hh;
      tensor[3] step;
      bool found;
      int nfs;
      real trav;
      real mvmt;
      real closest;
      int born;
      bool first;
    state init
      ENTRY4DEF:  preds = []
        real rad4DF0#1 = globals.rad4D55;
        real _t4DF2#1 = 0.1e7;
        real _t4DF4#1 = VIndex<3,0>(p04DE1);
        real _t4DF6#1 = urnd4DF7 (_t4DF4);
        real _t4E31#1 = VIndex<3,1>(p04DE1);
        real _t4E33#1 = urnd4DF7 (_t4E31);
        real _t4E35#1 = VIndex<3,2>(p04DE1);
        real _t4E37#1 = urnd4DF7 (_t4E35);
        real r4E3A#1 = RAdd(_t4DF6,_t4E33);
        real _t4E39#1 = RAdd(r4E3A,_t4E37);
        real _t4E3E#2 = 0.1e1;
        real _t4E40#1 = MathFn<fmod>(_t4E39,_t4E3E);
        real _t4E42#1 = RMul(_t4DF2,_t4E40);
        real _t4E45#1 = MathFn<floor>(_t4E42);
        real _t4E47#4 = 0.e0;
        tensor[3] step4E49#1 = <tensor[3]>[_t4E47,_t4E47,_t4E47];
        bool found4E4B#1 = false;
        int nfs4E4D#2 = 0;
        bool first4E4F#1 = true;
        self.pos = p04DE1;
        self._pos = p04DE1;
        self.ID = _t4E45;
        self.hh = hh04DE2;
        self.step = step4E49;
        self.found = found4E4B;
        self.nfs = nfs4E4D;
        self.trav = _t4E47;
        self.mvmt = _t4E3E;
        self.closest = rad4DF0;
        self.born = nfs4E4D;
        self.first = first4E4F;
        return
    end state init
    method update
        ENTRY4E5E:  preds = []
          real fStrTh4E5F#4 = globals.fStrTh4D3D;
          real fMaskTh4E61#4 = globals.fMaskTh4D3E;
          real fBias4E63#4 = globals.fBias4D3F;
          real tipd4E65#17 = globals.tipd4D40;
          real mabd4E67#1 = globals.mabd4D41;
          real travMax4E69#3 = globals.travMax4D42;
          int nfsMax4E6B#3 = globals.nfsMax4D43;
          real gdeTest4E6D#1 = globals.gdeTest4D44;
          real gdeBack4E6F#1 = globals.gdeBack4D45;
          real gdeOppor4E71#1 = globals.gdeOppor4D46;
          real fsEps4E73#3 = globals.fsEps4D47;
          real pcmvEps4E75#1 = globals.pcmvEps4D4B;
          int verb4E77#16 = globals.verb4D4D;
          real sfs4E79#10 = globals.sfs4D4E;
          real hist4E7B#2 = globals.hist4D4F;
          int pcp4E7D#10 = globals.pcp4D50;
          int fDim4E7F#2 = globals.fDim4D52;
          int nnmin4E81#3 = globals.nnmin4D53;
          int nnmax4E83#4 = globals.nnmax4D54;
          real rad4E85#6 = globals.rad4D55;
          int iter4E87#22 = globals.iter4D57;
          tensor[3] pos4E89#16 = self.pos;
          real ID4E8B#11 = self.ID;
          real hh4E8D#7 = self.hh;
          bool found4E8F#3 = self.found;
          int nfs4E91#5 = self.nfs;
          real trav4E93#4 = self.trav;
          real mvmt4E95#5 = self.mvmt;
          real closest4E97#1 = self.closest;
          int born4E99#5 = self.born;
          bool first4E9B#1 = self.first;
          bool vv4E9D#45 = false;
          if first4E9B then goto ASSIGN4EA1 else goto JOIN4EB9
        ASSIGN4EA1:  preds = [COND4E9F]
          int _t4EA0#1 = 0;
          bool _t4EA2#1 = GT<int>(verb4E77,_t4EA0);
          if _t4EA2 then goto JOIN4EA6 else goto JOIN4EA6
        JOIN4EA6:  preds = [COND4EA4,COND4EA4]
          bool _t4EA5#1 = phi(vv4E9D,vv4E9D)
          if _t4EA5 then goto ASSIGN4EA9 else goto ASSIGN59F9
        ASSIGN4EA9:  preds = [COND4EA7]
          bool _t4EA8#1 = true;
          goto JOIN4EAC
        JOIN4EAC:  preds = [ASSIGN4EA9,ASSIGN59FA]
          bool _t4EAA#1 = phi(_t4EA8,_t4EAB)
          if _t4EAA then goto ASSIGN4EAF else goto JOIN4EB8
        ASSIGN4EAF:  preds = [COND4EAD]
          string _t4EAE#1 = "(i#";
          string _t4EB0#1 = " @ ";
          string _t4EB2#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID4E8B,_t4EAE,iter4E87,_t4EB0,pos4E89,_t4EB2);
          string _t4EB5#1 = " HELLO!\n";
          Print<[string]>(_t4EB5);
          goto JOIN4EB8
        JOIN4EB8:  preds = [MASSIGN4EB7,COND4EAD]
          goto JOIN4EB9
        JOIN4EB9:  preds = [JOIN4EB8,COND4E9F]
          real _t4EBA#23 = 0.e0;
          tensor[3] _t4EBC#5 = <tensor[3]>[_t4EBA,_t4EBA,_t4EBA];
          tensor[3] op1_e3_l_24EBE#2 = VSub<3>(pos4E89,_t4EBC);
          real op1_e3_l_44EC1#1 = VDot<3>(op1_e3_l_24EBE,op1_e3_l_24EBE);
          real _t4EC4#3 = Sqrt(op1_e3_l_44EC1);
          real _t4EC7#11 = 0.4e1;
          bool _t4EC9#2 = LT<real>(_t4EC4,_t4EC7);
          if _t4EC9 then goto ASSIGN4ECD else goto JOIN4ED1
        ASSIGN4ECD:  preds = [COND4ECB]
          real _t4ECC#1 = 0.3e1;
          bool _t4ECE#1 = GT<real>(_t4EC4,_t4ECC);
          goto JOIN4ED1
        JOIN4ED1:  preds = [ASSIGN4ECF,COND4ECB]
          bool _t4ED0#1 = phi(_t4ECE,vv4E9D)
          if _t4ED0 then goto ASSIGN4ED4 else goto JOIN4F9A
        ASSIGN4ED4:  preds = [COND4ED2]
          real x4ED3#5 = VIndex<3,0>(pos4E89);
          real y4ED5#6 = VIndex<3,1>(pos4E89);
          real z4ED7#6 = VIndex<3,2>(pos4E89);
          real _t4ED9#6 = 0.2e1;
          int _t4EDB#1 = 2;
          real op1_e3_l_64EDD#2 = RMul(x4ED3,x4ED3);
          real op1_e3_l_74EE0#2 = RMul(y4ED5,y4ED5);
          real op1_e3_l_84EE3#11 = RMul(z4ED7,z4ED7);
          real r4EE7#1 = RAdd(op1_e3_l_64EDD,op1_e3_l_74EE0);
          real op1_e3_l_94EE6#2 = RAdd(r4EE7,op1_e3_l_84EE3);
          real op1_e3_l_114EEB#7 = Cos(op1_e3_l_94EE6);
          real r4EEF#1 = RMul(_t4ED9,x4ED3);
          real r4EF0#1 = RMul(r4EEF,op1_e3_l_84EE3);
          real _t4EEE#1 = RMul(r4EF0,op1_e3_l_114EEB);
          real r4EF6#1 = RMul(_t4ED9,y4ED5);
          real r4EF7#1 = RMul(r4EF6,op1_e3_l_84EE3);
          real _t4EF5#1 = RMul(r4EF7,op1_e3_l_114EEB);
          real op1_e3_l_144EFC#3 = RMul(z4ED7,op1_e3_l_84EE3);
          real op1_e3_l_204F01#8 = Sin(op1_e3_l_94EE6);
          real r4F05#1 = RMul(_t4ED9,op1_e3_l_144EFC);
          real op1_e3_l_214F04#1 = RMul(r4F05,op1_e3_l_114EEB);
          real r4F0A#1 = RMul(_t4ED9,z4ED7);
          real op1_e3_l_224F09#1 = RMul(r4F0A,op1_e3_l_204F01);
          real _t4F0E#1 = RAdd(op1_e3_l_214F04,op1_e3_l_224F09);
          tensor[3] g4F11#2 = <tensor[3]>[_t4EEE,_t4EF5,_t4F0E];
          real _t4F13#5 = -0.4e1;
          real r4F16#1 = RMul(_t4F13,op1_e3_l_64EDD);
          real r4F17#1 = RMul(r4F16,op1_e3_l_84EE3);
          real op1_e3_l_244F15#1 = RMul(r4F17,op1_e3_l_204F01);
          real r4F1D#1 = RMul(_t4ED9,op1_e3_l_84EE3);
          real op1_e3_l_254F1C#2 = RMul(r4F1D,op1_e3_l_114EEB);
          real _t4F21#1 = RAdd(op1_e3_l_244F15,op1_e3_l_254F1C);
          real r4F25#2 = RMul(_t4F13,x4ED3);
          real r4F26#1 = RMul(r4F25,y4ED5);
          real r4F27#1 = RMul(r4F26,op1_e3_l_84EE3);
          real _t4F24#2 = RMul(r4F27,op1_e3_l_204F01);
          real r4F2F#1 = RMul(r4F25,op1_e3_l_144EFC);
          real op1_e3_l_234F2D#1 = RMul(r4F2F,op1_e3_l_204F01);
          real r4F35#1 = RMul(_t4EC7,x4ED3);
          real r4F36#1 = RMul(r4F35,z4ED7);
          real op1_e3_l_244F34#1 = RMul(r4F36,op1_e3_l_114EEB);
          real _t4F3B#2 = RAdd(op1_e3_l_234F2D,op1_e3_l_244F34);
          tensor[3] _t4F3E#1 = <tensor[3]>[_t4F21,_t4F24,_t4F3B];
          real r4F41#1 = RMul(_t4F13,op1_e3_l_74EE0);
          real r4F42#1 = RMul(r4F41,op1_e3_l_84EE3);
          real op1_e3_l_244F40#1 = RMul(r4F42,op1_e3_l_204F01);
          real _t4F47#1 = RAdd(op1_e3_l_244F40,op1_e3_l_254F1C);
          real r4F4B#1 = RMul(_t4F13,y4ED5);
          real r4F4C#1 = RMul(r4F4B,op1_e3_l_144EFC);
          real op1_e3_l_234F4A#1 = RMul(r4F4C,op1_e3_l_204F01);
          real r4F52#1 = RMul(_t4EC7,y4ED5);
          real r4F53#1 = RMul(r4F52,z4ED7);
          real op1_e3_l_244F51#1 = RMul(r4F53,op1_e3_l_114EEB);
          real _t4F58#2 = RAdd(op1_e3_l_234F4A,op1_e3_l_244F51);
          tensor[3] _t4F5B#1 = <tensor[3]>[_t4F24,_t4F47,_t4F58];
          real _t4F5D#1 = 0.1e2;
          real op1_e3_l_184F5F#1 = RMul(op1_e3_l_84EE3,op1_e3_l_84EE3);
          real r4F65#1 = RMul(_t4F13,op1_e3_l_184F5F);
          real op1_e3_l_314F64#1 = RMul(r4F65,op1_e3_l_204F01);
          real r4F6A#1 = RMul(_t4F5D,op1_e3_l_84EE3);
          real op1_e3_l_324F69#1 = RMul(r4F6A,op1_e3_l_114EEB);
          real op1_e3_l_334F6E#1 = RMul(_t4ED9,op1_e3_l_204F01);
          real r4F72#1 = RAdd(op1_e3_l_314F64,op1_e3_l_324F69);
          real _t4F71#1 = RAdd(r4F72,op1_e3_l_334F6E);
          tensor[3] _t4F76#1 = <tensor[3]>[_t4F3B,_t4F58,_t4F71];
          tensor[3,3] hess4F78#1 = <tensor[3,3]>[_t4F3E,_t4F5B,_t4F76];
          real[3] _t4F7A#1 = EigenVals3x3(hess4F78);
          real _t4F7C#1 = Subscript<real[3]>(_t4F7A,_t4EDB);
          real op1_e3_l_34F7E#1 = VDot<3>(g4F11,g4F11);
          real op1_e3_l_44F81#1 = Sqrt(op1_e3_l_34F7E);
          real op1_e3_l_54F84#1 = RNeg(_t4F7C);
          real op1_e3_l_64F87#1 = RAdd(fBias4E63,op1_e3_l_44F81);
          real str4F8A#1 = RDiv(op1_e3_l_54F84,op1_e3_l_64F87);
          bool _t4F8D#1 = GT<real>(str4F8A,fStrTh4E5F);
          if _t4F8D then goto ASSIGN4F91 else goto JOIN4F98
        ASSIGN4F91:  preds = [COND4F8F]
          bool _t4F90#1 = GTE<real>(_t4EBA,fMaskTh4E61);
          if _t4F90 then goto ASSIGN4F94 else goto JOIN4F96
        ASSIGN4F94:  preds = [COND4F92]
          bool _t4F93#1 = true;
          goto JOIN4F96
        JOIN4F96:  preds = [ASSIGN4F94,COND4F92]
          bool _t4F95#1 = phi(_t4F93,vv4E9D)
          goto JOIN4F98
        JOIN4F98:  preds = [JOIN4F96,COND4F8F]
          bool _t4F97#1 = phi(_t4F95,vv4E9D)
          goto JOIN4F9A
        JOIN4F9A:  preds = [JOIN4F98,COND4ED2]
          bool _t4F99#1 = phi(_t4F97,vv4E9D)
          bool _t4F9B#1 = BNot(_t4F99);
          if _t4F9B then goto ASSIGN4F9F else goto JOIN5087
        ASSIGN4F9F:  preds = [COND4F9D]
          int _t4F9E#1 = 0;
          bool _t4FA0#1 = GT<int>(verb4E77,_t4F9E);
          if _t4FA0 then goto JOIN4FA4 else goto JOIN4FA4
        JOIN4FA4:  preds = [COND4FA2,COND4FA2]
          bool _t4FA3#1 = phi(vv4E9D,vv4E9D)
          if _t4FA3 then goto ASSIGN4FA7 else goto ASSIGN59F6
        ASSIGN4FA7:  preds = [COND4FA5]
          bool _t4FA6#1 = true;
          goto JOIN4FAA
        JOIN4FAA:  preds = [ASSIGN4FA7,ASSIGN59F7]
          bool _t4FA8#1 = phi(_t4FA6,_t4FA9)
          if _t4FA8 then goto ASSIGN4FAD else goto JOIN5085
        ASSIGN4FAD:  preds = [COND4FAB]
          string _t4FAC#1 = "(i#";
          string _t4FAE#1 = " @ ";
          string _t4FB0#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID4E8B,_t4FAC,iter4E87,_t4FAE,pos4E89,_t4FB0);
          string _t4FB3#1 = "!inside=";
          if _t4EC9 then goto ASSIGN4FB7 else goto JOIN4FBB
        ASSIGN4FB7:  preds = [COND4FB5]
          real _t4FB6#1 = 0.3e1;
          bool _t4FB8#1 = GT<real>(_t4EC4,_t4FB6);
          goto JOIN4FBB
        JOIN4FBB:  preds = [ASSIGN4FB9,COND4FB5]
          bool _t4FBA#1 = phi(_t4FB8,vv4E9D)
          string _t4FBC#1 = " || fStrength=";
          real x4FBE#5 = VIndex<3,0>(pos4E89);
          real y4FC0#6 = VIndex<3,1>(pos4E89);
          real z4FC2#6 = VIndex<3,2>(pos4E89);
          real _t4FC4#6 = 0.2e1;
          int _t4FC6#1 = 2;
          real op1_e3_l_64FC8#2 = RMul(x4FBE,x4FBE);
          real op1_e3_l_74FCB#2 = RMul(y4FC0,y4FC0);
          real op1_e3_l_84FCE#11 = RMul(z4FC2,z4FC2);
          real r4FD2#1 = RAdd(op1_e3_l_64FC8,op1_e3_l_74FCB);
          real op1_e3_l_94FD1#2 = RAdd(r4FD2,op1_e3_l_84FCE);
          real op1_e3_l_114FD6#7 = Cos(op1_e3_l_94FD1);
          real r4FDA#1 = RMul(_t4FC4,x4FBE);
          real r4FDB#1 = RMul(r4FDA,op1_e3_l_84FCE);
          real _t4FD9#1 = RMul(r4FDB,op1_e3_l_114FD6);
          real r4FE1#1 = RMul(_t4FC4,y4FC0);
          real r4FE2#1 = RMul(r4FE1,op1_e3_l_84FCE);
          real _t4FE0#1 = RMul(r4FE2,op1_e3_l_114FD6);
          real op1_e3_l_144FE7#3 = RMul(z4FC2,op1_e3_l_84FCE);
          real op1_e3_l_204FEC#8 = Sin(op1_e3_l_94FD1);
          real r4FF0#1 = RMul(_t4FC4,op1_e3_l_144FE7);
          real op1_e3_l_214FEF#1 = RMul(r4FF0,op1_e3_l_114FD6);
          real r4FF5#1 = RMul(_t4FC4,z4FC2);
          real op1_e3_l_224FF4#1 = RMul(r4FF5,op1_e3_l_204FEC);
          real _t4FF9#1 = RAdd(op1_e3_l_214FEF,op1_e3_l_224FF4);
          tensor[3] g4FFC#2 = <tensor[3]>[_t4FD9,_t4FE0,_t4FF9];
          real _t4FFE#5 = -0.4e1;
          real r5001#1 = RMul(_t4FFE,op1_e3_l_64FC8);
          real r5002#1 = RMul(r5001,op1_e3_l_84FCE);
          real op1_e3_l_245000#1 = RMul(r5002,op1_e3_l_204FEC);
          real r5008#1 = RMul(_t4FC4,op1_e3_l_84FCE);
          real op1_e3_l_255007#2 = RMul(r5008,op1_e3_l_114FD6);
          real _t500C#1 = RAdd(op1_e3_l_245000,op1_e3_l_255007);
          real r5010#2 = RMul(_t4FFE,x4FBE);
          real r5011#1 = RMul(r5010,y4FC0);
          real r5012#1 = RMul(r5011,op1_e3_l_84FCE);
          real _t500F#2 = RMul(r5012,op1_e3_l_204FEC);
          real r501A#1 = RMul(r5010,op1_e3_l_144FE7);
          real op1_e3_l_235018#1 = RMul(r501A,op1_e3_l_204FEC);
          real r5020#1 = RMul(_t4EC7,x4FBE);
          real r5021#1 = RMul(r5020,z4FC2);
          real op1_e3_l_24501F#1 = RMul(r5021,op1_e3_l_114FD6);
          real _t5026#2 = RAdd(op1_e3_l_235018,op1_e3_l_24501F);
          tensor[3] _t5029#1 = <tensor[3]>[_t500C,_t500F,_t5026];
          real r502C#1 = RMul(_t4FFE,op1_e3_l_74FCB);
          real r502D#1 = RMul(r502C,op1_e3_l_84FCE);
          real op1_e3_l_24502B#1 = RMul(r502D,op1_e3_l_204FEC);
          real _t5032#1 = RAdd(op1_e3_l_24502B,op1_e3_l_255007);
          real r5036#1 = RMul(_t4FFE,y4FC0);
          real r5037#1 = RMul(r5036,op1_e3_l_144FE7);
          real op1_e3_l_235035#1 = RMul(r5037,op1_e3_l_204FEC);
          real r503D#1 = RMul(_t4EC7,y4FC0);
          real r503E#1 = RMul(r503D,z4FC2);
          real op1_e3_l_24503C#1 = RMul(r503E,op1_e3_l_114FD6);
          real _t5043#2 = RAdd(op1_e3_l_235035,op1_e3_l_24503C);
          tensor[3] _t5046#1 = <tensor[3]>[_t500F,_t5032,_t5043];
          real _t5048#1 = 0.1e2;
          real op1_e3_l_18504A#1 = RMul(op1_e3_l_84FCE,op1_e3_l_84FCE);
          real r5050#1 = RMul(_t4FFE,op1_e3_l_18504A);
          real op1_e3_l_31504F#1 = RMul(r5050,op1_e3_l_204FEC);
          real r5055#1 = RMul(_t5048,op1_e3_l_84FCE);
          real op1_e3_l_325054#1 = RMul(r5055,op1_e3_l_114FD6);
          real op1_e3_l_335059#1 = RMul(_t4FC4,op1_e3_l_204FEC);
          real r505D#1 = RAdd(op1_e3_l_31504F,op1_e3_l_325054);
          real _t505C#1 = RAdd(r505D,op1_e3_l_335059);
          tensor[3] _t5061#1 = <tensor[3]>[_t5026,_t5043,_t505C];
          tensor[3,3] hess5063#1 = <tensor[3,3]>[_t5029,_t5046,_t5061];
          real[3] _t5065#1 = EigenVals3x3(hess5063);
          real _t5067#1 = Subscript<real[3]>(_t5065,_t4FC6);
          real op1_e3_l_35069#1 = VDot<3>(g4FFC,g4FFC);
          real op1_e3_l_4506C#1 = Sqrt(op1_e3_l_35069);
          real op1_e3_l_5506F#1 = RNeg(_t5067);
          real op1_e3_l_65072#1 = RAdd(fBias4E63,op1_e3_l_4506C);
          real str5075#1 = RDiv(op1_e3_l_5506F,op1_e3_l_65072);
          string _t5078#1 = " <= fStrTh=";
          string _t507A#1 = " || fMask(pos)=";
          string _t507C#1 = " < fMaskTh=";
          string _t507E#1 = " || fTest(pos)=";
          bool _t5080#1 = true;
          string _t5082#1 = " ==>DIE\n";
          Print<[string,bool,string,real,string,real,string,real,string,real,string,bool,string]>(_t4FB3,_t4FBA,_t4FBC,str5075,_t5078,fStrTh4E5F,_t507A,_t4EBA,_t507C,fMaskTh4E61,_t507E,_t5080,_t5082);
          goto JOIN5085
        JOIN5085:  preds = [MASSIGN5084,COND4FAB]
          die
          goto JOIN5087
        JOIN5087:  preds = [*DIE5086,COND4F9D]
          bool _t5088#1 = GT<real>(travMax4E69,_t4EBA);
          if _t5088 then goto ASSIGN508C else goto JOIN5090
        ASSIGN508C:  preds = [COND508A]
          bool _t508B#1 = GT<real>(trav4E93,travMax4E69);
          if _t508B then goto DIE508E else goto JOIN508F
        DIE508E:  preds = [COND508D]
          die
          goto JOIN508F
        JOIN508F:  preds = [*DIE508E,COND508D]
          goto JOIN5090
        JOIN5090:  preds = [JOIN508F,COND508A]
          bool _t5091#1 = BNot(found4E8F);
          if _t5091 then goto ASSIGN5095 else goto ASSIGN5228
        ASSIGN5095:  preds = [COND5093]
          int _t5094#3 = 0;
          bool _t5096#1 = GT<int>(nfsMax4E6B,_t5094);
          if _t5096 then goto ASSIGN509A else goto JOIN50BD
        ASSIGN509A:  preds = [COND5098]
          bool _t5099#1 = GT<int>(nfs4E91,nfsMax4E6B);
          if _t5099 then goto ASSIGN509D else goto JOIN50BC
        ASSIGN509D:  preds = [COND509B]
          bool _t509C#1 = GT<int>(verb4E77,_t5094);
          if _t509C then goto JOIN50A0 else goto JOIN50A0
        JOIN50A0:  preds = [COND509E,COND509E]
          bool _t509F#1 = phi(vv4E9D,vv4E9D)
          if _t509F then goto ASSIGN50A3 else goto ASSIGN5225
        ASSIGN50A3:  preds = [COND50A1]
          bool _t50A2#1 = true;
          goto JOIN50A6
        JOIN50A6:  preds = [ASSIGN50A3,ASSIGN5226]
          bool _t50A4#1 = phi(_t50A2,_t50A5)
          if _t50A4 then goto ASSIGN50A9 else goto JOIN50BA
        ASSIGN50A9:  preds = [COND50A7]
          string _t50A8#1 = "(i#";
          string _t50AA#1 = " @ ";
          string _t50AC#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID4E8B,_t50A8,iter4E87,_t50AA,pos4E89,_t50AC);
          string _t50AF#1 = "nfs=";
          string _t50B1#1 = " > nfsMax=";
          string _t50B3#1 = " || trav=";
          string _t50B5#1 = " > travMax=";
          string _t50B7#1 = " =>DIE\n";
          Print<[string,int,string,int,string,real,string,real,string]>(_t50AF,nfs4E91,_t50B1,nfsMax4E6B,_t50B3,trav4E93,_t50B5,travMax4E69,_t50B7);
          goto JOIN50BA
        JOIN50BA:  preds = [MASSIGN50B9,COND50A7]
          die
          goto JOIN50BC
        JOIN50BC:  preds = [*DIE50BB,COND509B]
          goto JOIN50BD
        JOIN50BD:  preds = [JOIN50BC,COND5098]
          tensor[3] _t50BE#3 = fStep50BF (pos4E89);
          tensor[3] step51B7#3 = VScale<3>(sfs4E79,_t50BE);
          tensor[3] pos51BA#2 = VAdd<3>(pos4E89,step51B7);
          real op1_e3_l_551BD#1 = VDot<3>(_t50BE,_t50BE);
          real r51C1#1 = RMul(sfs4E79,sfs4E79);
          real op1_e3_l_651C0#1 = RMul(r51C1,op1_e3_l_551BD);
          real op1_e3_l_751C5#1 = Sqrt(op1_e3_l_651C0);
          real op1_e3_l_1151C8#3 = RDiv(op1_e3_l_751C5,tipd4E65);
          real op1_e3_l_1251CB#1 = RSub(mvmt4E95,op1_e3_l_1151C8);
          real op1_e3_l_1451CE#1 = RMul(hist4E7B,op1_e3_l_1251CB);
          real mvmt51D1#2 = RAdd(op1_e3_l_1151C8,op1_e3_l_1451CE);
          bool _t51D4#1 = GT<real>(mvmt51D1,fsEps4E73);
          if _t51D4 then goto ASSIGN51D9 else goto ASSIGN5222
        ASSIGN51D9:  preds = [COND51D6]
          real trav51D7#1 = RAdd(trav4E93,op1_e3_l_1151C8);
          int _t51DA#1 = 1;
          int nfs51DC#1 = IAdd(nfs4E91,_t51DA);
          goto JOIN51E4
        JOIN51E4:  preds = [ASSIGN51DD,ASSIGN5223]
          real mvmt51DE#2 = phi(mvmt51D1,mvmt51DF)
          real trav51E0#1 = phi(trav51D7,_t4EBA)
          int nfs51E1#1 = phi(nfs51DC,nfs4E91)
          bool found51E2#2 = phi(found4E8F,found51E3)
          bool _t51E5#1 = GT<int>(verb4E77,_t5094);
          if _t51E5 then goto JOIN51E9 else goto JOIN51E9
        JOIN51E9:  preds = [COND51E7,COND51E7]
          bool _t51E8#1 = phi(vv4E9D,vv4E9D)
          if _t51E8 then goto ASSIGN51EC else goto ASSIGN5220
        ASSIGN51EC:  preds = [COND51EA]
          bool _t51EB#1 = true;
          goto JOIN51EF
        JOIN51EF:  preds = [ASSIGN51EC,ASSIGN5221]
          bool _t51ED#1 = phi(_t51EB,_t51EE)
          if _t51ED then goto ASSIGN51F2 else goto JOIN5201
        ASSIGN51F2:  preds = [COND51F0]
          string _t51F1#1 = "(i#";
          string _t51F3#1 = " @ ";
          string _t51F5#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID4E8B,_t51F1,iter4E87,_t51F3,pos51BA,_t51F5);
          string _t51F8#1 = "step=";
          string _t51FA#1 = "; mvmt=";
          string _t51FC#1 = " => found=";
          string _t51FE#1 = "\n";
          Print<[string,tensor[3],string,real,string,bool,string]>(_t51F8,step51B7,_t51FA,mvmt51DE,_t51FC,found51E2,_t51FE);
          goto JOIN5201
        JOIN5201:  preds = [MASSIGN5200,COND51F0]
          goto JOIN5212
        JOIN5212:  preds = [JOIN5201,JOIN599D]
          int born5202#1 = phi(born4E99,born5203)
          real closest5204#1 = phi(closest4E97,closest5205)
          real mvmt5206#1 = phi(mvmt51DE,mvmt5207)
          real trav5208#1 = phi(trav51E0,trav5209)
          int nfs520A#1 = phi(nfs51E1,nfs4E91)
          bool found520B#1 = phi(found51E2,found4E8F)
          tensor[3] step520C#1 = phi(step51B7,step520D)
          real hh520E#1 = phi(hh4E8D,hh520F)
          tensor[3] pos5210#2 = phi(pos51BA,pos5211)
          self.pos = pos5210;
          self._pos = pos5210;
          self.hh = hh520E;
          self.step = step520C;
          self.found = found520B;
          self.nfs = nfs520A;
          self.trav = trav5208;
          self.mvmt = mvmt5206;
          self.closest = closest5204;
          self.born = born5202;
          self.first = vv4E9D;
          active
        ASSIGN5220:  preds = [COND51EA]
          int _t521F#1 = 1;
          bool _t51EE#1 = GT<int>(verb4E77,_t521F);
          goto JOIN51EF
        ASSIGN5222:  preds = [COND51D6]
          bool found51E3#1 = true;
          real mvmt51DF#1 = 0.1e1;
          goto JOIN51E4
        ASSIGN5225:  preds = [COND50A1]
          int _t5224#1 = 1;
          bool _t50A5#1 = GT<int>(verb4E77,_t5224);
          goto JOIN50A6
        ASSIGN5228:  preds = [COND5093]
          int _t5227#25 = 0;
          bool _t5229#1 = EQ<int>(_t5227,fDim4E7F);
          if _t5229 then goto SAVE522C else goto JOIN522E
        SAVE522C:  preds = [COND522B]
          self.pos = pos4E89;
          stabilize
          goto JOIN522E
        JOIN522E:  preds = [*STABILIZE522D,COND522B]
          tensor[3] _t522F#3 = fStep50BF (pos4E89);
          tensor[3] step5231#7 = VScale<3>(sfs4E79,_t522F);
          tensor[3] pos5234#22 = VAdd<3>(pos4E89,step5231);
          real op1_e3_l_45237#1 = VDot<3>(_t522F,_t522F);
          real r523B#2 = RMul(sfs4E79,sfs4E79);
          real op1_e3_l_5523A#1 = RMul(r523B,op1_e3_l_45237);
          real op1_e3_l_6523F#1 = Sqrt(op1_e3_l_5523A);
          real op1_e3_l_75242#1 = RDiv(op1_e3_l_6523F,tipd4E65);
          real trav5245#5 = RAdd(trav4E93,op1_e3_l_75242);
          point[] _t5248#1 = SphereQuery<3,point>(pos5234,rad4E85);
        FOREACH524B:  preds = [ASSIGN5249,NEXT52EB]
          foreach (P524A in _t5248) on exit goto ASSIGN5345
            int nn52E9#3 = phi(_t5227,nn52E8)
            tensor[3] force52E3#6 = phi(_t4EBC,force52E2)
            real oldE5298#4 = phi(_t4EBA,oldE5297)
          tensor[3] _t524C#1 = P524A.pos;
          tensor[3] op1_e3_l_9524E#5 = VSub<3>(_t524C,pos5234);
          real op1_e3_l_115251#1 = VDot<3>(op1_e3_l_9524E,op1_e3_l_9524E);
          real op1_e3_l_125254#3 = Sqrt(op1_e3_l_115251);
          real _t5257#1 = RDiv(op1_e3_l_125254,tipd4E65);
          bool _t525A#1 = LT<real>(_t5257,fsEps4E73);
          if _t525A then goto ASSIGN525E else goto JOIN5264
        ASSIGN525E:  preds = [COND525C]
          real _t525D#1 = P524A.ID;
          bool _t525F#1 = LTE<real>(ID4E8B,_t525D);
          if _t525F then goto DIE5262 else goto JOIN5263
        DIE5262:  preds = [COND5261]
          die
          goto JOIN5263
        JOIN5263:  preds = [*DIE5262,COND5261]
          goto JOIN5264
        JOIN5264:  preds = [JOIN5263,COND525C]
          real _t5265#12 = RDiv(op1_e3_l_125254,rad4E85);
          real _t5268#2 = 0.2e1;
          real _t526A#2 = 0.3e1;
          real _t526C#2 = RDiv(_t5268,_t526A);
          bool _t526F#2 = LT<real>(_t5265,_t526C);
          if _t526F then goto ASSIGN5273 else goto ASSIGN5318
        ASSIGN5273:  preds = [COND5271]
          real _t5272#1 = 0.1e1;
          real _t5274#1 = -0.5646e1;
          real _t5276#1 = 0.119835e2;
          real _t5278#1 = -0.113535e2;
          real _t527A#1 = 0.40550625e1;
          real op1_e3_l_58527C#1 = RMul(_t527A,_t5265);
          real op1_e3_l_60527F#1 = RAdd(_t5278,op1_e3_l_58527C);
          real op1_e3_l_615282#1 = RMul(_t5265,op1_e3_l_60527F);
          real op1_e3_l_635285#1 = RAdd(_t5276,op1_e3_l_615282);
          real op1_e3_l_645288#1 = RMul(_t5265,op1_e3_l_635285);
          real op1_e3_l_66528B#1 = RAdd(_t5274,op1_e3_l_645288);
          real op1_e3_l_67528E#1 = RMul(_t5265,op1_e3_l_66528B);
          real _t5291#1 = RAdd(_t5272,op1_e3_l_67528E);
          goto JOIN5296
        JOIN5296:  preds = [ASSIGN5293,JOIN5343]
          real _t5294#1 = phi(_t5291,_t5295)
          real oldE5297#1 = RAdd(oldE5298,_t5294);
          if _t526F then goto ASSIGN529D else goto ASSIGN52ED
        ASSIGN529D:  preds = [COND529B]
          real _t529C#1 = -0.5646e1;
          real _t529E#1 = 0.23967e2;
          real _t52A0#1 = -0.340605e2;
          real _t52A2#1 = 0.1622025e2;
          real op1_e3_l_4452A4#1 = RMul(_t52A2,_t5265);
          real op1_e3_l_4652A7#1 = RAdd(_t52A0,op1_e3_l_4452A4);
          real op1_e3_l_4752AA#1 = RMul(_t5265,op1_e3_l_4652A7);
          real op1_e3_l_4952AD#1 = RAdd(_t529E,op1_e3_l_4752AA);
          real op1_e3_l_5052B0#1 = RMul(_t5265,op1_e3_l_4952AD);
          real _t52B3#1 = RAdd(_t529C,op1_e3_l_5052B0);
          goto JOIN52B8
        JOIN52B8:  preds = [ASSIGN52B5,JOIN5316]
          real _t52B6#1 = phi(_t52B3,_t52B7)
          real _t52B9#2 = 0.1e1;
          real op1_e3_l_1452BB#1 = RDiv(_t52B9,rad4E85);
          real r52BF#1 = TensorIndex<tensor[3],[0]>(op1_e3_l_9524E);
          real r52C0#3 = RMul(_t52B6,op1_e3_l_1452BB);
          real r52C1#1 = RMul(r52C0,r52BF);
          real r52C2#1 = TensorIndex<tensor[3],[1]>(op1_e3_l_9524E);
          real r52C3#1 = RMul(r52C0,r52C2);
          real r52C4#1 = TensorIndex<tensor[3],[2]>(op1_e3_l_9524E);
          real r52C5#1 = RMul(r52C0,r52C4);
          real r52D1#3 = RDiv(_t52B9,op1_e3_l_125254);
          real r52D3#1 = RMul(r52D1,r52C1);
          real r52D5#1 = RMul(r52D1,r52C3);
          real r52D7#1 = RMul(r52D1,r52C5);
          tensor[3] op1_e3_l_2552CF#1 = <tensor[3]>[r52D3,r52D5,r52D7];
          tensor[3] force52E2#1 = VAdd<3>(force52E3,op1_e3_l_2552CF);
          int _t52E6#1 = 1;
          int nn52E8#1 = IAdd(nn52E9,_t52E6);
          goto FOREACH524B
        ASSIGN52ED:  preds = [COND529B]
          real _t52EC#1 = 0.1e1;
          bool _t52EE#1 = LT<real>(_t5265,_t52EC);
          if _t52EE then goto ASSIGN52F2 else goto JOIN5316
        ASSIGN52F2:  preds = [COND52F0]
          real _t52F1#1 = 0.1234567901e-1;
          real _t52F3#2 = 0.486e1;
          real _t52F5#1 = -0.1458e2;
          real _t52F7#1 = 0.1458e2;
          real op1_e3_l_4252F9#1 = RMul(_t526A,_t5265);
          real op1_e3_l_7352FC#4 = RSub(op1_e3_l_4252F9,_t5268);
          real op1_e3_l_7452FF#1 = RMul(_t52F3,op1_e3_l_7352FC);
          real op1_e3_l_765302#1 = RSub(_t52F7,op1_e3_l_7452FF);
          real op1_e3_l_775305#1 = RMul(op1_e3_l_7352FC,op1_e3_l_765302);
          real op1_e3_l_795308#1 = RAdd(_t52F5,op1_e3_l_775305);
          real op1_e3_l_80530B#1 = RMul(op1_e3_l_7352FC,op1_e3_l_795308);
          real op1_e3_l_82530E#1 = RAdd(_t52F3,op1_e3_l_80530B);
          real r5312#1 = RMul(_t52F1,op1_e3_l_7352FC);
          real _t5311#1 = RMul(r5312,op1_e3_l_82530E);
          goto JOIN5316
        JOIN5316:  preds = [ASSIGN5315,COND52F0]
          real _t52B7#1 = phi(_t5311,_t4EBA)
          goto JOIN52B8
        ASSIGN5318:  preds = [COND5271]
          real _t5317#1 = 0.1e1;
          bool _t5319#1 = LT<real>(_t5265,_t5317);
          if _t5319 then goto ASSIGN531D else goto JOIN5343
        ASSIGN531D:  preds = [COND531B]
          real _t531C#1 = -0.1e-2;
          real _t531E#1 = 0.9e-1;
          real _t5320#1 = -0.54e0;
          real _t5322#1 = 0.1215e1;
          real _t5324#1 = 0.972e0;
          real op1_e3_l_505326#5 = RSub(_t5265,_t526C);
          real op1_e3_l_515329#1 = RMul(_t5324,op1_e3_l_505326);
          real op1_e3_l_62532C#1 = RSub(_t5322,op1_e3_l_515329);
          real op1_e3_l_64532F#1 = RMul(op1_e3_l_62532C,op1_e3_l_505326);
          real op1_e3_l_755332#1 = RAdd(_t5320,op1_e3_l_64532F);
          real op1_e3_l_775335#1 = RMul(op1_e3_l_755332,op1_e3_l_505326);
          real op1_e3_l_985338#1 = RAdd(_t531E,op1_e3_l_775335);
          real r533C#1 = RMul(op1_e3_l_985338,op1_e3_l_505326);
          real op1_e3_l_101533B#1 = RMul(r533C,op1_e3_l_505326);
          real _t5340#1 = RAdd(_t531C,op1_e3_l_101533B);
          goto JOIN5343
        JOIN5343:  preds = [ASSIGN5342,COND531B]
          real _t5295#1 = phi(_t5340,_t4EBA)
          goto JOIN5296
        ASSIGN5345:  preds = [FOREACH524B]
          bool _t5344#1 = EQ<int>(_t5227,nn52E9);
          if _t5344 then goto ASSIGN5348 else goto JOIN5628
        ASSIGN5348:  preds = [COND5346]
          bool _t5347#1 = GT<int>(pcp4E7D,_t5227);
          if _t5347 then goto ASSIGN534B else goto JOIN5354
        ASSIGN534B:  preds = [COND5349]
          bool _t534A#1 = GT<int>(iter4E87,_t5227);
          if _t534A then goto ASSIGN534E else goto JOIN5352
        ASSIGN534E:  preds = [COND534C]
          int _t534D#1 = IMod(iter4E87,pcp4E7D);
          bool _t534F#1 = EQ<int>(_t5227,_t534D);
          goto JOIN5352
        JOIN5352:  preds = [ASSIGN5350,COND534C]
          bool _t5351#1 = phi(_t534F,vv4E9D)
          goto JOIN5354
        JOIN5354:  preds = [JOIN5352,COND5349]
          bool _t5353#1 = phi(_t5351,vv4E9D)
          if _t5353 then goto ASSIGN5357 else goto JOIN5363
        ASSIGN5357:  preds = [COND5355]
          int _t5356#1 = IDiv(iter4E87,pcp4E7D);
          int _t5358#2 = 2;
          int _t535A#1 = IMod(_t5356,_t5358);
          int _t535C#1 = IMul(_t535A,_t5358);
          int _t535E#1 = 1;
          int _t5360#1 = ISub(_t535C,_t535E);
          goto JOIN5363
        JOIN5363:  preds = [ASSIGN5361,COND5355]
          int _t5362#1 = phi(_t5360,_t5227)
          bool _t5364#1 = GT<int>(_t5362,_t5227);
          if _t5364 then goto ASSIGN5368 else goto JOIN536A
        ASSIGN5368:  preds = [COND5366]
          bool _t5367#1 = LT<int>(born4E99,nnmax4E83);
          goto JOIN536A
        JOIN536A:  preds = [ASSIGN5368,COND5366]
          bool _t5369#1 = phi(_t5367,vv4E9D)
          bool _t536B#1 = BNot(_t5369);
          if _t536B then goto SAVE536E else goto JOIN5373
        SAVE536E:  preds = [COND536D]
          self.pos = pos5234;
          self._pos = pos5234;
          self.step = step5231;
          self.trav = trav5245;
          active
          goto JOIN5373
        JOIN5373:  preds = [*ACTIVE5372,COND536D]
          tensor[3,3] _t5374#3 = fPerp5375 (pos5234);
          tensor[3] _t546A#3 = <tensor[3]>[tipd4E65,_t4EBA,_t4EBA];
          tensor[3] projParam546D#3 = ProjectLast<tensor[3,3],[0]>(_t5374);
          real vdot546E#1 = VDot<3>(projParam546D,_t546A);
          tensor[3] projParam546F#3 = ProjectLast<tensor[3,3],[1]>(_t5374);
          real vdot5470#1 = VDot<3>(projParam546F,_t546A);
          tensor[3] projParam5471#3 = ProjectLast<tensor[3,3],[2]>(_t5374);
          real vdot5472#1 = VDot<3>(projParam5471,_t546A);
          tensor[3] noff0546C#3 = <tensor[3]>[vdot546E,vdot5470,vdot5472];
          tensor[3] _t547B#3 = <tensor[3]>[_t4EBA,tipd4E65,_t4EBA];
          real vdot547F#1 = VDot<3>(projParam546D,_t547B);
          real vdot5481#1 = VDot<3>(projParam546F,_t547B);
          real vdot5483#1 = VDot<3>(projParam5471,_t547B);
          tensor[3] noff1547D#3 = <tensor[3]>[vdot547F,vdot5481,vdot5483];
          tensor[3] _t548C#3 = <tensor[3]>[_t4EBA,_t4EBA,tipd4E65];
          real vdot5490#1 = VDot<3>(projParam546D,_t548C);
          real vdot5492#1 = VDot<3>(projParam546F,_t548C);
          real vdot5494#1 = VDot<3>(projParam5471,_t548C);
          tensor[3] noff2548E#3 = <tensor[3]>[vdot5490,vdot5492,vdot5494];
          real op1_e3_l_4549D#1 = VDot<3>(noff0546C,noff0546C);
          real _t54A0#1 = Sqrt(op1_e3_l_4549D);
          real op1_e3_l_454A3#1 = VDot<3>(noff1547D,noff1547D);
          real _t54A6#1 = Sqrt(op1_e3_l_454A3);
          bool _t54A9#1 = GT<real>(_t54A0,_t54A6);
          if _t54A9 then goto JOIN54AD else goto JOIN54AD
        JOIN54AD:  preds = [COND54AB,COND54AB]
          tensor[3] _t54AC#3 = phi(noff0546C,noff1547D)
          real op1_e3_l_154AE#1 = VDot<3>(_t54AC,_t54AC);
          real _t54B1#1 = Sqrt(op1_e3_l_154AE);
          real op1_e3_l_454B4#1 = VDot<3>(noff2548E,noff2548E);
          real _t54B7#1 = Sqrt(op1_e3_l_454B4);
          bool _t54BA#1 = GT<real>(_t54B1,_t54B7);
          if _t54BA then goto JOIN54BE else goto JOIN54BE
        JOIN54BE:  preds = [COND54BC,COND54BC]
          tensor[3] _t54BD#5 = phi(_t54AC,noff2548E)
          real op1_e3_l_654BF#1 = VDot<3>(_t54BD,_t54BD);
          real op1_e3_l_754C2#1 = Sqrt(op1_e3_l_654BF);
          real realLit54C6#2 = 0.1e1;
          real op1_e3_l_854C5#3 = RDiv(realLit54C6,op1_e3_l_754C2);
          real r54CB#1 = TensorIndex<tensor[3],[0]>(_t54BD);
          real r54CC#1 = RMul(tipd4E65,r54CB);
          real r54CD#1 = RMul(r54CC,op1_e3_l_854C5);
          real r54CE#1 = TensorIndex<tensor[3],[1]>(_t54BD);
          real r54CF#1 = RMul(tipd4E65,r54CE);
          real r54D0#1 = RMul(r54CF,op1_e3_l_854C5);
          real r54D1#1 = TensorIndex<tensor[3],[2]>(_t54BD);
          real r54D2#1 = RMul(tipd4E65,r54D1);
          real r54D3#1 = RMul(r54D2,op1_e3_l_854C5);
          tensor[3] op1_e3_l_954CA#1 = <tensor[3]>[r54CD,r54D0,r54D3];
          tensor[3] v54E0#1 = VAdd<3>(op1_e3_l_954CA,pos4E89);
          tensor[3] npos54DF#2 = VAdd<3>(v54E0,step5231);
          tensor[3] _t54E4#1 = fStep50BF (npos54DF);
          tensor[3] op1_e3_l_1354E6#1 = VScale<3>(sfs4E79,_t54E4);
          tensor[3] npos54E9#5 = VAdd<3>(npos54DF,op1_e3_l_1354E6);
          bool _t54F0#2 = GT<int>(verb4E77,_t5227);
          if _t54F0 then goto JOIN54F4 else goto JOIN54F4
        JOIN54F4:  preds = [COND54F2,COND54F2]
          bool _t54F3#1 = phi(vv4E9D,vv4E9D)
          if _t54F3 then goto ASSIGN54F7 else goto ASSIGN59F3
        ASSIGN54F7:  preds = [COND54F5]
          bool _t54F6#1 = true;
          goto JOIN54FA
        JOIN54FA:  preds = [ASSIGN54F7,ASSIGN59F4]
          bool _t54F8#1 = phi(_t54F6,_t54F9)
          if _t54F8 then goto ASSIGN54FD else goto JOIN5526
        ASSIGN54FD:  preds = [COND54FB]
          string _t54FC#1 = "(i#";
          string _t54FE#1 = " @ ";
          string _t5500#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID4E8B,_t54FC,iter4E87,_t54FE,pos5234,_t5500);
          string _t5503#1 = " 0==nn =>NEW(";
          string _t5505#1 = ") w/ ID=";
          real _t5507#1 = 0.1e7;
          real _t5509#1 = VIndex<3,0>(npos54E9);
          real _t550B#1 = urnd4DF7 (_t5509);
          real _t550D#1 = VIndex<3,1>(npos54E9);
          real _t550F#1 = urnd4DF7 (_t550D);
          real _t5511#1 = VIndex<3,2>(npos54E9);
          real _t5513#1 = urnd4DF7 (_t5511);
          real r5516#1 = RAdd(_t550B,_t550F);
          real _t5515#1 = RAdd(r5516,_t5513);
          real _t551C#1 = MathFn<fmod>(_t5515,realLit54C6);
          real _t551E#1 = RMul(_t5507,_t551C);
          real _t5521#1 = MathFn<floor>(_t551E);
          string _t5523#1 = "\n";
          Print<[string,tensor[3],string,real,string]>(_t5503,npos54E9,_t5505,_t5521,_t5523);
          goto JOIN5526
        JOIN5526:  preds = [MASSIGN5525,COND54FB]
          tensor[3] op1_e3_l_85527#2 = VSub<3>(pos5234,_t4EBC);
          real op1_e3_l_10552A#1 = VDot<3>(op1_e3_l_85527,op1_e3_l_85527);
          real _t552D#2 = Sqrt(op1_e3_l_10552A);
          bool _t5530#1 = LT<real>(_t552D,_t4EC7);
          if _t5530 then goto ASSIGN5534 else goto JOIN5538
        ASSIGN5534:  preds = [COND5532]
          real _t5533#1 = 0.3e1;
          bool _t5535#1 = GT<real>(_t552D,_t5533);
          goto JOIN5538
        JOIN5538:  preds = [ASSIGN5536,COND5532]
          bool _t5537#1 = phi(_t5535,vv4E9D)
          if _t5537 then goto ASSIGN553B else goto JOIN5601
        ASSIGN553B:  preds = [COND5539]
          real x553A#5 = VIndex<3,0>(pos5234);
          real y553C#6 = VIndex<3,1>(pos5234);
          real z553E#6 = VIndex<3,2>(pos5234);
          real _t5540#6 = 0.2e1;
          int _t5542#1 = 2;
          real op1_e3_l_65544#2 = RMul(x553A,x553A);
          real op1_e3_l_75547#2 = RMul(y553C,y553C);
          real op1_e3_l_8554A#11 = RMul(z553E,z553E);
          real r554E#1 = RAdd(op1_e3_l_65544,op1_e3_l_75547);
          real op1_e3_l_9554D#2 = RAdd(r554E,op1_e3_l_8554A);
          real op1_e3_l_115552#7 = Cos(op1_e3_l_9554D);
          real r5556#1 = RMul(_t5540,x553A);
          real r5557#1 = RMul(r5556,op1_e3_l_8554A);
          real _t5555#1 = RMul(r5557,op1_e3_l_115552);
          real r555D#1 = RMul(_t5540,y553C);
          real r555E#1 = RMul(r555D,op1_e3_l_8554A);
          real _t555C#1 = RMul(r555E,op1_e3_l_115552);
          real op1_e3_l_145563#3 = RMul(z553E,op1_e3_l_8554A);
          real op1_e3_l_205568#8 = Sin(op1_e3_l_9554D);
          real r556C#1 = RMul(_t5540,op1_e3_l_145563);
          real op1_e3_l_21556B#1 = RMul(r556C,op1_e3_l_115552);
          real r5571#1 = RMul(_t5540,z553E);
          real op1_e3_l_225570#1 = RMul(r5571,op1_e3_l_205568);
          real _t5575#1 = RAdd(op1_e3_l_21556B,op1_e3_l_225570);
          tensor[3] g5578#2 = <tensor[3]>[_t5555,_t555C,_t5575];
          real _t557A#5 = -0.4e1;
          real r557D#1 = RMul(_t557A,op1_e3_l_65544);
          real r557E#1 = RMul(r557D,op1_e3_l_8554A);
          real op1_e3_l_24557C#1 = RMul(r557E,op1_e3_l_205568);
          real r5584#1 = RMul(_t5540,op1_e3_l_8554A);
          real op1_e3_l_255583#2 = RMul(r5584,op1_e3_l_115552);
          real _t5588#1 = RAdd(op1_e3_l_24557C,op1_e3_l_255583);
          real r558C#2 = RMul(_t557A,x553A);
          real r558D#1 = RMul(r558C,y553C);
          real r558E#1 = RMul(r558D,op1_e3_l_8554A);
          real _t558B#2 = RMul(r558E,op1_e3_l_205568);
          real r5596#1 = RMul(r558C,op1_e3_l_145563);
          real op1_e3_l_235594#1 = RMul(r5596,op1_e3_l_205568);
          real r559C#1 = RMul(_t4EC7,x553A);
          real r559D#1 = RMul(r559C,z553E);
          real op1_e3_l_24559B#1 = RMul(r559D,op1_e3_l_115552);
          real _t55A2#2 = RAdd(op1_e3_l_235594,op1_e3_l_24559B);
          tensor[3] _t55A5#1 = <tensor[3]>[_t5588,_t558B,_t55A2];
          real r55A8#1 = RMul(_t557A,op1_e3_l_75547);
          real r55A9#1 = RMul(r55A8,op1_e3_l_8554A);
          real op1_e3_l_2455A7#1 = RMul(r55A9,op1_e3_l_205568);
          real _t55AE#1 = RAdd(op1_e3_l_2455A7,op1_e3_l_255583);
          real r55B2#1 = RMul(_t557A,y553C);
          real r55B3#1 = RMul(r55B2,op1_e3_l_145563);
          real op1_e3_l_2355B1#1 = RMul(r55B3,op1_e3_l_205568);
          real r55B9#1 = RMul(_t4EC7,y553C);
          real r55BA#1 = RMul(r55B9,z553E);
          real op1_e3_l_2455B8#1 = RMul(r55BA,op1_e3_l_115552);
          real _t55BF#2 = RAdd(op1_e3_l_2355B1,op1_e3_l_2455B8);
          tensor[3] _t55C2#1 = <tensor[3]>[_t558B,_t55AE,_t55BF];
          real _t55C4#1 = 0.1e2;
          real op1_e3_l_1855C6#1 = RMul(op1_e3_l_8554A,op1_e3_l_8554A);
          real r55CC#1 = RMul(_t557A,op1_e3_l_1855C6);
          real op1_e3_l_3155CB#1 = RMul(r55CC,op1_e3_l_205568);
          real r55D1#1 = RMul(_t55C4,op1_e3_l_8554A);
          real op1_e3_l_3255D0#1 = RMul(r55D1,op1_e3_l_115552);
          real op1_e3_l_3355D5#1 = RMul(_t5540,op1_e3_l_205568);
          real r55D9#1 = RAdd(op1_e3_l_3155CB,op1_e3_l_3255D0);
          real _t55D8#1 = RAdd(r55D9,op1_e3_l_3355D5);
          tensor[3] _t55DD#1 = <tensor[3]>[_t55A2,_t55BF,_t55D8];
          tensor[3,3] hess55DF#1 = <tensor[3,3]>[_t55A5,_t55C2,_t55DD];
          real[3] _t55E1#1 = EigenVals3x3(hess55DF);
          real _t55E3#1 = Subscript<real[3]>(_t55E1,_t5542);
          real op1_e3_l_355E5#1 = VDot<3>(g5578,g5578);
          real op1_e3_l_455E8#1 = Sqrt(op1_e3_l_355E5);
          real op1_e3_l_555EB#1 = RNeg(_t55E3);
          real op1_e3_l_655EE#1 = RAdd(fBias4E63,op1_e3_l_455E8);
          real str55F1#1 = RDiv(op1_e3_l_555EB,op1_e3_l_655EE);
          bool _t55F4#1 = GT<real>(str55F1,fStrTh4E5F);
          if _t55F4 then goto ASSIGN55F8 else goto JOIN55FF
        ASSIGN55F8:  preds = [COND55F6]
          bool _t55F7#1 = GTE<real>(_t4EBA,fMaskTh4E61);
          if _t55F7 then goto ASSIGN55FB else goto JOIN55FD
        ASSIGN55FB:  preds = [COND55F9]
          bool _t55FA#1 = true;
          goto JOIN55FD
        JOIN55FD:  preds = [ASSIGN55FB,COND55F9]
          bool _t55FC#1 = phi(_t55FA,vv4E9D)
          goto JOIN55FF
        JOIN55FF:  preds = [JOIN55FD,COND55F6]
          bool _t55FE#1 = phi(_t55FC,vv4E9D)
          goto JOIN5601
        JOIN5601:  preds = [JOIN55FF,COND5539]
          bool _t5600#1 = phi(_t55FE,vv4E9D)
          if _t5600 then goto NEW5603 else goto JOIN5609
        NEW5603:  preds = [COND5602]
          new point(npos54E9,hh4E8D);
          int _t5604#1 = 1;
          int born5606#1 = IAdd(born4E99,_t5604);
          goto JOIN5609
        JOIN5609:  preds = [ASSIGN5607,COND5602]
          int born5608#1 = phi(born5606,born4E99)
          if _t54F0 then goto JOIN560C else goto JOIN560C
        JOIN560C:  preds = [COND560A,COND560A]
          bool _t560B#1 = phi(vv4E9D,vv4E9D)
          if _t560B then goto ASSIGN560F else goto ASSIGN59F0
        ASSIGN560F:  preds = [COND560D]
          bool _t560E#1 = true;
          goto JOIN5612
        JOIN5612:  preds = [ASSIGN560F,ASSIGN59F1]
          bool _t5610#1 = phi(_t560E,_t5611)
          if _t5610 then goto ASSIGN5615 else goto JOIN5620
        ASSIGN5615:  preds = [COND5613]
          string _t5614#1 = "(i#";
          string _t5616#1 = " @ ";
          string _t5618#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID4E8B,_t5614,iter4E87,_t5616,pos5234,_t5618);
          string _t561B#1 = "nn=0; after birthing mvmt=";
          string _t561D#1 = "\n";
          Print<[string,real,string]>(_t561B,mvmt4E95,_t561D);
          goto JOIN5620
        JOIN5620:  preds = [MASSIGN561F,COND5613]
          self.pos = pos5234;
          self._pos = pos5234;
          self.step = step5231;
          self.trav = trav5245;
          self.born = born5608;
          active
          goto JOIN5628
        JOIN5628:  preds = [*ACTIVE5626,COND5346]
          int born5627#9 = phi(born4E99)
          tensor[3,3] _t5629#3 = fPerp5375 (pos5234);
          tensor[3] projParam562C#1 = ProjectLast<tensor[3,3],[0]>(_t5629);
          real vdot562D#2 = VDot<3>(projParam562C,force52E3);
          tensor[3] projParam562E#1 = ProjectLast<tensor[3,3],[1]>(_t5629);
          real vdot562F#2 = VDot<3>(projParam562E,force52E3);
          tensor[3] projParam5630#1 = ProjectLast<tensor[3,3],[2]>(_t5629);
          real vdot5631#2 = VDot<3>(projParam5630,force52E3);
          tensor[3] op1_e3_l_3562B#3 = <tensor[3]>[vdot562D,vdot562F,vdot5631];
          tensor[3] es563A#1 = VScale<3>(hh4E8D,op1_e3_l_3562B);
          real op1_e3_l_5563D#1 = VDot<3>(op1_e3_l_3562B,op1_e3_l_3562B);
          real r5641#1 = RMul(hh4E8D,hh4E8D);
          real op1_e3_l_65640#1 = RMul(r5641,op1_e3_l_5563D);
          real _t5645#2 = Sqrt(op1_e3_l_65640);
          bool _t5648#1 = GT<real>(_t5645,tipd4E65);
          if _t5648 then goto ASSIGN564D else goto JOIN5664
        ASSIGN564D:  preds = [COND564A]
          real op1_e3_l_10564B#1 = RDiv(tipd4E65,_t5645);
          real hh564E#4 = RMul(hh4E8D,op1_e3_l_10564B);
          real r5654#1 = RMul(hh564E,vdot562D);
          real r5656#1 = RMul(hh564E,vdot562F);
          real r5658#1 = RMul(hh564E,vdot5631);
          tensor[3] es5651#1 = <tensor[3]>[r5654,r5656,r5658];
          goto JOIN5664
        JOIN5664:  preds = [ASSIGN5661,COND564A]
          tensor[3] es5662#7 = phi(es5651,es563A)
          real hh5663#2 = phi(hh564E,hh4E8D)
          tensor[3] _t5665#1 = VAdd<3>(pos5234,es5662);
          tensor[3] _t566A#3 = fStep50BF (_t5665);
          tensor[3] fs566C#4 = VScale<3>(sfs4E79,_t566A);
          real op1_e3_l_5566F#1 = VDot<3>(_t566A,_t566A);
          real op1_e3_l_65672#1 = RMul(r523B,op1_e3_l_5566F);
          real op1_e3_l_75677#1 = VDot<3>(es5662,es5662);
          real op1_e3_l_8567A#1 = RMul(fsEps4E73,tipd4E65);
          real op1_e3_l_9567D#2 = Sqrt(op1_e3_l_75677);
          real op1_e3_l_105680#2 = Sqrt(op1_e3_l_65672);
          real op1_e3_l_115683#1 = RAdd(op1_e3_l_8567A,op1_e3_l_9567D);
          real _t5686#1 = RDiv(op1_e3_l_105680,op1_e3_l_115683);
          real _t5689#3 = 0.5e0;
          bool _t568B#1 = GT<real>(_t5686,_t5689);
          if _t568B then goto ASSIGN5690 else goto JOIN56C1
        ASSIGN5690:  preds = [COND568D]
          real hh568E#2 = RMul(hh5663,_t5689);
          bool _t5691#1 = GT<int>(verb4E77,_t5227);
          if _t5691 then goto JOIN5695 else goto JOIN5695
        JOIN5695:  preds = [COND5693,COND5693]
          bool _t5694#1 = phi(vv4E9D,vv4E9D)
          if _t5694 then goto ASSIGN5698 else goto ASSIGN59ED
        ASSIGN5698:  preds = [COND5696]
          bool _t5697#1 = true;
          goto JOIN569B
        JOIN569B:  preds = [ASSIGN5698,ASSIGN59EE]
          bool _t5699#1 = phi(_t5697,_t569A)
          if _t5699 then goto ASSIGN569E else goto JOIN56B8
        ASSIGN569E:  preds = [COND569C]
          string _t569D#1 = "(i#";
          string _t569F#1 = " @ ";
          string _t56A1#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID4E8B,_t569D,iter4E87,_t569F,pos5234,_t56A1);
          string _t56A4#1 = "nn=";
          string _t56A6#1 = "; |fs|/|es|=";
          real _t56A8#1 = RDiv(op1_e3_l_105680,op1_e3_l_9567D);
          string _t56AB#1 = " > 0.5; trying again with hh=";
          string _t56AD#1 = "; mvmt=";
          string _t56AF#3 = "\n";
          Print<[string,int,string,real,string,real,string,real,string]>(_t56A4,nn52E9,_t56A6,_t56A8,_t56AB,hh568E,_t56AD,mvmt4E95,_t56AF);
          string _t56B2#1 = "        fs=";
          Print<[string,tensor[3],string]>(_t56B2,fs566C,_t56AF);
          string _t56B5#1 = "        es=";
          Print<[string,tensor[3],string]>(_t56B5,es5662,_t56AF);
          goto JOIN56B8
        JOIN56B8:  preds = [MASSIGN56B7,COND569C]
          self.pos = pos5234;
          self._pos = pos5234;
          self.hh = hh568E;
          self.step = step5231;
          self.trav = trav5245;
          self.born = born5627;
          active
          goto JOIN56C1
        JOIN56C1:  preds = [*ACTIVE56BF,COND568D]
          real hh56C0#2 = phi(hh5663)
          tensor[3] v56C4#1 = VAdd<3>(pos5234,fs566C);
          tensor[3] pos56C2#7 = VAdd<3>(v56C4,es5662);
          point[] _t56C9#1 = SphereQuery<3,point>(pos56C2,rad4E85);
        FOREACH56CC:  preds = [ASSIGN56CA,NEXT5719]
          foreach (P56CB in _t56C9) on exit goto ASSIGN5748
            tensor[3] mno5711#4 = phi(_t4EBC,mno5710)
            real newE570B#6 = phi(_t4EBA,newE570A)
            int nn5717#9 = phi(_t5227,nn5716)
            real closest5205#3 = phi(rad4E85,closest570E)
          tensor[3] _t56CD#1 = P56CB.pos;
          tensor[3] op1_e3_l_1356CF#3 = VSub<3>(_t56CD,pos56C2);
          real op1_e3_l_1556D2#1 = VDot<3>(op1_e3_l_1356CF,op1_e3_l_1356CF);
          real _t56D5#2 = Sqrt(op1_e3_l_1556D2);
          real _t56D8#7 = RDiv(_t56D5,rad4E85);
          real _t56DB#1 = 0.2e1;
          real _t56DD#1 = 0.3e1;
          real _t56DF#2 = RDiv(_t56DB,_t56DD);
          bool _t56E2#1 = LT<real>(_t56D8,_t56DF);
          if _t56E2 then goto ASSIGN56E6 else goto ASSIGN571B
        ASSIGN56E6:  preds = [COND56E4]
          real _t56E5#1 = 0.1e1;
          real _t56E7#1 = -0.5646e1;
          real _t56E9#1 = 0.119835e2;
          real _t56EB#1 = -0.113535e2;
          real _t56ED#1 = 0.40550625e1;
          real op1_e3_l_7856EF#1 = RMul(_t56ED,_t56D8);
          real op1_e3_l_8056F2#1 = RAdd(_t56EB,op1_e3_l_7856EF);
          real op1_e3_l_8156F5#1 = RMul(_t56D8,op1_e3_l_8056F2);
          real op1_e3_l_8356F8#1 = RAdd(_t56E9,op1_e3_l_8156F5);
          real op1_e3_l_8456FB#1 = RMul(_t56D8,op1_e3_l_8356F8);
          real op1_e3_l_8656FE#1 = RAdd(_t56E7,op1_e3_l_8456FB);
          real op1_e3_l_875701#1 = RMul(_t56D8,op1_e3_l_8656FE);
          real _t5704#1 = RAdd(_t56E5,op1_e3_l_875701);
          goto JOIN5709
        JOIN5709:  preds = [ASSIGN5706,JOIN5746]
          real _t5707#1 = phi(_t5704,_t5708)
          real newE570A#1 = RAdd(newE570B,_t5707);
          real closest570E#1 = Min<real>(closest5205,_t56D5);
          tensor[3] mno5710#1 = VAdd<3>(mno5711,op1_e3_l_1356CF);
          int _t5714#1 = 1;
          int nn5716#1 = IAdd(nn5717,_t5714);
          goto FOREACH56CC
        ASSIGN571B:  preds = [COND56E4]
          real _t571A#1 = 0.1e1;
          bool _t571C#1 = LT<real>(_t56D8,_t571A);
          if _t571C then goto ASSIGN5720 else goto JOIN5746
        ASSIGN5720:  preds = [COND571E]
          real _t571F#1 = -0.1e-2;
          real _t5721#1 = 0.9e-1;
          real _t5723#1 = -0.54e0;
          real _t5725#1 = 0.1215e1;
          real _t5727#1 = 0.972e0;
          real op1_e3_l_675729#5 = RSub(_t56D8,_t56DF);
          real op1_e3_l_68572C#1 = RMul(_t5727,op1_e3_l_675729);
          real op1_e3_l_81572F#1 = RSub(_t5725,op1_e3_l_68572C);
          real op1_e3_l_835732#1 = RMul(op1_e3_l_81572F,op1_e3_l_675729);
          real op1_e3_l_965735#1 = RAdd(_t5723,op1_e3_l_835732);
          real op1_e3_l_985738#1 = RMul(op1_e3_l_965735,op1_e3_l_675729);
          real op1_e3_l_123573B#1 = RAdd(_t5721,op1_e3_l_985738);
          real r573F#1 = RMul(op1_e3_l_123573B,op1_e3_l_675729);
          real op1_e3_l_126573E#1 = RMul(r573F,op1_e3_l_675729);
          real _t5743#1 = RAdd(_t571F,op1_e3_l_126573E);
          goto JOIN5746
        JOIN5746:  preds = [ASSIGN5745,COND571E]
          real _t5708#1 = phi(_t5743,_t4EBA)
          goto JOIN5709
        ASSIGN5748:  preds = [FOREACH56CC]
          real _t5747#2 = IntToReal(nn5717);
          bool _t5749#2 = GT<int>(verb4E77,_t5227);
          if _t5749 then goto JOIN574D else goto JOIN574D
        JOIN574D:  preds = [COND574B,COND574B]
          bool _t574C#1 = phi(vv4E9D,vv4E9D)
          if _t574C then goto ASSIGN5750 else goto ASSIGN59EA
        ASSIGN5750:  preds = [COND574E]
          bool _t574F#1 = true;
          goto JOIN5753
        JOIN5753:  preds = [ASSIGN5750,ASSIGN59EB]
          bool _t5751#1 = phi(_t574F,_t5752)
          if _t5751 then goto ASSIGN5756 else goto JOIN5765
        ASSIGN5756:  preds = [COND5754]
          string _t5755#1 = "(i#";
          string _t5757#1 = " @ ";
          string _t5759#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID4E8B,_t5755,iter4E87,_t5757,pos56C2,_t5759);
          string _t575C#1 = "nn=";
          string _t575E#1 = "; oldE=";
          string _t5760#1 = " newE=";
          string _t5762#1 = "\n";
          Print<[string,int,string,real,string,real,string]>(_t575C,nn5717,_t575E,oldE5298,_t5760,newE570B,_t5762);
          goto JOIN5765
        JOIN5765:  preds = [MASSIGN5764,COND5754]
          real _t5766#2 = RSub(newE570B,oldE5298);
          tensor[3] _t5769#2 = VSub<3>(pos56C2,pos5234);
          tensor[3] op1_e3_l_17576C#1 = VNeg<3>(force52E3);
          real op1_e3_l_18576F#2 = VDot<3>(_t5769,op1_e3_l_17576C);
          real _t5772#1 = RMul(gdeTest4E6D,op1_e3_l_18576F);
          bool _t5775#1 = GT<real>(_t5766,_t5772);
          if _t5775 then goto ASSIGN577A else goto JOIN57C7
        ASSIGN577A:  preds = [COND5777]
          real hh5778#3 = RMul(hh56C0,gdeBack4E6F);
          bool _t577B#1 = EQ<real>(_t4EBA,hh5778);
          if _t577B then goto ASSIGN577F else goto JOIN5789
        ASSIGN577F:  preds = [COND577D]
          string _t577E#1 = "(i#";
          string _t5780#1 = " @ ";
          string _t5782#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID4E8B,_t577E,iter4E87,_t5780,pos56C2,_t5782);
          string _t5785#1 = "backtracked all the way to hh=0\n";
          Print<[string]>(_t5785);
          die
          goto JOIN5789
        JOIN5789:  preds = [*DIE5788,COND577D]
          if _t5749 then goto JOIN578C else goto JOIN578C
        JOIN578C:  preds = [COND578A,COND578A]
          bool _t578B#1 = phi(vv4E9D,vv4E9D)
          if _t578B then goto ASSIGN578F else goto ASSIGN59E7
        ASSIGN578F:  preds = [COND578D]
          bool _t578E#1 = true;
          goto JOIN5792
        JOIN5792:  preds = [ASSIGN578F,ASSIGN59E8]
          bool _t5790#1 = phi(_t578E,_t5791)
          if _t5790 then goto ASSIGN5795 else goto JOIN57BD
        ASSIGN5795:  preds = [COND5793]
          string _t5794#1 = "(i#";
          string _t5796#1 = " @ ";
          string _t5798#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID4E8B,_t5794,iter4E87,_t5796,pos56C2,_t5798);
          string _t579B#1 = "nn=";
          string _t579D#1 = "; oldE=";
          string _t579F#1 = " newE=";
          string _t57A1#1 = "; backtracking; hh=";
          string _t57A3#1 = "; mvmt=";
          string _t57A5#7 = "\n";
          Print<[string,int,string,real,string,real,string,real,string,real,string]>(_t579B,nn5717,_t579D,oldE5298,_t579F,newE570B,_t57A1,hh5778,_t57A3,mvmt4E95,_t57A5);
          string _t57A8#1 = "      fs=";
          Print<[string,tensor[3],string]>(_t57A8,fs566C,_t57A5);
          string _t57AB#1 = "      es=";
          Print<[string,tensor[3],string]>(_t57AB,es5662,_t57A5);
          string _t57AE#1 = "      newE - oldE=";
          Print<[string,real,string]>(_t57AE,_t5766,_t57A5);
          string _t57B1#1 = "      force=";
          Print<[string,tensor[3],string]>(_t57B1,force52E3,_t57A5);
          string _t57B4#1 = "      dpos=";
          Print<[string,tensor[3],string]>(_t57B4,_t5769,_t57A5);
          string _t57B7#1 = "      0.5*(pos - oldpos).(-force)=";
          real _t57B9#1 = RMul(_t5689,op1_e3_l_18576F);
          Print<[string,real,string]>(_t57B7,_t57B9,_t57A5);
          goto JOIN57BD
        JOIN57BD:  preds = [MASSIGN57BC,COND5793]
          self.pos = pos5234;
          self._pos = pos5234;
          self.hh = hh5778;
          self.step = step5231;
          self.trav = trav5245;
          self.closest = closest5205;
          self.born = born5627;
          active
          goto JOIN57C7
        JOIN57C7:  preds = [*ACTIVE57C5,COND5777]
          real hh57C6#1 = phi(hh56C0)
          tensor[3] pos5211#8 = phi(pos56C2)
          real hh520F#2 = RMul(hh57C6,gdeOppor4E71);
          tensor[3] v57CA#1 = VAdd<3>(step5231,fs566C);
          tensor[3] step520D#3 = VAdd<3>(v57CA,es5662);
          real op1_e3_l_1257CE#1 = VDot<3>(step520D,step520D);
          real op1_e3_l_1357D1#1 = Sqrt(op1_e3_l_1257CE);
          real _t57D4#4 = RDiv(op1_e3_l_1357D1,tipd4E65);
          real trav5209#1 = RAdd(trav5245,_t57D4);
          real op1_e3_l_2557DB#1 = RSub(mvmt4E95,_t57D4);
          real op1_e3_l_2757DE#1 = RMul(hist4E7B,op1_e3_l_2557DB);
          real mvmt5207#1 = RAdd(_t57D4,op1_e3_l_2757DE);
          bool _t57E3#1 = LT<real>(_t57D4,pcmvEps4E75);
          if _t57E3 then goto ASSIGN57E7 else goto JOIN599D
        ASSIGN57E7:  preds = [COND57E5]
          bool _t57E6#3 = GT<int>(pcp4E7D,_t5227);
          if _t57E6 then goto ASSIGN57EA else goto JOIN57F3
        ASSIGN57EA:  preds = [COND57E8]
          bool _t57E9#1 = GT<int>(iter4E87,_t5227);
          if _t57E9 then goto ASSIGN57ED else goto JOIN57F1
        ASSIGN57ED:  preds = [COND57EB]
          int _t57EC#1 = IMod(iter4E87,pcp4E7D);
          bool _t57EE#1 = EQ<int>(_t5227,_t57EC);
          goto JOIN57F1
        JOIN57F1:  preds = [ASSIGN57EF,COND57EB]
          bool _t57F0#1 = phi(_t57EE,vv4E9D)
          goto JOIN57F3
        JOIN57F3:  preds = [JOIN57F1,COND57E8]
          bool _t57F2#1 = phi(_t57F0,vv4E9D)
          if _t57F2 then goto ASSIGN57F6 else goto JOIN5802
        ASSIGN57F6:  preds = [COND57F4]
          int _t57F5#1 = IDiv(iter4E87,pcp4E7D);
          int _t57F7#2 = 2;
          int _t57F9#1 = IMod(_t57F5,_t57F7);
          int _t57FB#1 = IMul(_t57F9,_t57F7);
          int _t57FD#1 = 1;
          int _t57FF#1 = ISub(_t57FB,_t57FD);
          goto JOIN5802
        JOIN5802:  preds = [ASSIGN5800,COND57F4]
          int _t5801#1 = phi(_t57FF,_t5227)
          bool _t5803#1 = NEQ<int>(_t5801,_t5227);
          if _t5803 then goto COND5806 else goto JOIN599C
        COND5806:  preds = [COND5805]
          if _t57E6 then goto ASSIGN5808 else goto JOIN5811
        ASSIGN5808:  preds = [COND5806]
          bool _t5807#1 = GT<int>(iter4E87,_t5227);
          if _t5807 then goto ASSIGN580B else goto JOIN580F
        ASSIGN580B:  preds = [COND5809]
          int _t580A#1 = IMod(iter4E87,pcp4E7D);
          bool _t580C#1 = EQ<int>(_t5227,_t580A);
          goto JOIN580F
        JOIN580F:  preds = [ASSIGN580D,COND5809]
          bool _t580E#1 = phi(_t580C,vv4E9D)
          goto JOIN5811
        JOIN5811:  preds = [JOIN580F,COND5806]
          bool _t5810#1 = phi(_t580E,vv4E9D)
          if _t5810 then goto ASSIGN5814 else goto JOIN5820
        ASSIGN5814:  preds = [COND5812]
          int _t5813#1 = IDiv(iter4E87,pcp4E7D);
          int _t5815#2 = 2;
          int _t5817#1 = IMod(_t5813,_t5815);
          int _t5819#1 = IMul(_t5817,_t5815);
          int _t581B#1 = 1;
          int _t581D#1 = ISub(_t5819,_t581B);
          goto JOIN5820
        JOIN5820:  preds = [ASSIGN581E,COND5812]
          int _t581F#1 = phi(_t581D,_t5227)
          bool _t5821#1 = GT<int>(_t581F,_t5227);
          if _t5821 then goto ASSIGN5825 else goto JOIN5831
        ASSIGN5825:  preds = [COND5823]
          bool _t5824#1 = LT<real>(newE570B,_t4EBA);
          if _t5824 then goto ASSIGN5828 else goto JOIN582F
        ASSIGN5828:  preds = [COND5826]
          bool _t5827#1 = LT<int>(nn5717,nnmin4E81);
          if _t5827 then goto ASSIGN582B else goto JOIN582D
        ASSIGN582B:  preds = [COND5829]
          bool _t582A#1 = LT<int>(born5627,nnmax4E83);
          goto JOIN582D
        JOIN582D:  preds = [ASSIGN582B,COND5829]
          bool _t582C#1 = phi(_t582A,vv4E9D)
          goto JOIN582F
        JOIN582F:  preds = [JOIN582D,COND5826]
          bool _t582E#1 = phi(_t582C,vv4E9D)
          goto JOIN5831
        JOIN5831:  preds = [JOIN582F,COND5823]
          bool _t5830#1 = phi(_t582E,vv4E9D)
          if _t5830 then goto ASSIGN583D else goto COND599E
        ASSIGN583D:  preds = [COND5832]
          real realLit5834#3 = 0.1e1;
          real r5835#3 = RDiv(realLit5834,_t5747);
          real r5836#1 = TensorIndex<tensor[3],[0]>(mno5711);
          real r5837#2 = RMul(r5835,r5836);
          real r5838#1 = TensorIndex<tensor[3],[1]>(mno5711);
          real r5839#2 = RMul(r5835,r5838);
          real r583A#1 = TensorIndex<tensor[3],[2]>(mno5711);
          real r583B#2 = RMul(r5835,r583A);
          tensor[3] op1_e3_l_65833#2 = <tensor[3]>[r5837,r5839,r583B];
          real op1_e3_l_85846#1 = VDot<3>(op1_e3_l_65833,op1_e3_l_65833);
          real op1_e3_l_95849#1 = Sqrt(op1_e3_l_85846);
          real op1_e3_l_11584C#3 = RDiv(realLit5834,op1_e3_l_95849);
          real r5853#1 = RMul(tipd4E65,r5837);
          real r5854#1 = RMul(r5853,op1_e3_l_11584C);
          real r5856#1 = RMul(tipd4E65,r5839);
          real r5857#1 = RMul(r5856,op1_e3_l_11584C);
          real r5859#1 = RMul(tipd4E65,r583B);
          real r585A#1 = RMul(r5859,op1_e3_l_11584C);
          tensor[3] op1_e3_l_125851#1 = <tensor[3]>[r5854,r5857,r585A];
          tensor[3] npos5866#2 = VSub<3>(pos5211,op1_e3_l_125851);
          tensor[3] _t5869#1 = fStep50BF (npos5866);
          tensor[3] op1_e3_l_16586B#1 = VScale<3>(sfs4E79,_t5869);
          tensor[3] npos586E#2 = VAdd<3>(npos5866,op1_e3_l_16586B);
          tensor[3] _t5871#1 = fStep50BF (npos586E);
          tensor[3] op1_e3_l_195873#1 = VScale<3>(sfs4E79,_t5871);
          tensor[3] npos5876#6 = VAdd<3>(npos586E,op1_e3_l_195873);
          bool birth587B#4 = true;
          int _t587D#2 = 2;
          bool _t587F#1 = EQ<int>(fDim4E7F,_t587D);
          if _t587F then goto ASSIGN5883 else goto JOIN58B6
        ASSIGN5883:  preds = [COND5881]
          int _t5882#1 = 4;
          bool _t5884#1 = GTE<int>(nn5717,_t5882);
          if _t5884 then goto ASSIGN5889 else goto JOIN58B4
        ASSIGN5889:  preds = [COND5886]
          real _t5887#1 = RMul(tipd4E65,mabd4E67);
          point[] _t588A#1 = SphereQuery<3,point>(npos5876,_t5887);
        FOREACH588D:  preds = [ASSIGN588B,NEXT588E]
          foreach (P588C in _t588A) on exit goto COND5890
            bool birth588F#2 = phi(birth587B,vv4E9D)
          goto FOREACH588D
        COND5890:  preds = [FOREACH588D]
          if birth588F then goto ASSIGN5892 else goto JOIN58B2
        ASSIGN5892:  preds = [COND5890]
          real _t5891#1 = VIndex<3,0>(pos5211);
          real _t5893#1 = urnd4DF7 (_t5891);
          real _t5895#1 = VIndex<3,1>(pos5211);
          real _t5897#1 = urnd4DF7 (_t5895);
          real _t5899#1 = VIndex<3,2>(pos5211);
          real _t589B#1 = urnd4DF7 (_t5899);
          real r589E#1 = RAdd(_t5893,_t5897);
          real _t589D#1 = RAdd(r589E,_t589B);
          real _t58A4#1 = MathFn<fmod>(_t589D,realLit5834);
          int _t58A6#1 = ISub(nnmin4E81,nn5717);
          real _t58A8#1 = IntToReal(_t58A6);
          real _t58AA#1 = IntToReal(nnmin4E81);
          real _t58AC#1 = RDiv(_t58A8,_t58AA);
          bool birth58AF#1 = LT<real>(_t58A4,_t58AC);
          goto JOIN58B2
        JOIN58B2:  preds = [ASSIGN58B0,COND5890]
          bool birth58B1#1 = phi(birth58AF,birth588F)
          goto JOIN58B4
        JOIN58B4:  preds = [JOIN58B2,COND5886]
          bool birth58B3#1 = phi(birth58B1,birth587B)
          goto JOIN58B6
        JOIN58B6:  preds = [JOIN58B4,COND5881]
          bool birth58B5#1 = phi(birth58B3,birth587B)
          if birth58B5 then goto ASSIGN58BA else goto JOIN5998
        ASSIGN58BA:  preds = [COND58B7]
          tensor[3] op1_e3_l_3358B8#2 = VSub<3>(npos5876,_t4EBC);
          real op1_e3_l_3558BB#1 = VDot<3>(op1_e3_l_3358B8,op1_e3_l_3358B8);
          real _t58BE#2 = Sqrt(op1_e3_l_3558BB);
          bool _t58C1#1 = LT<real>(_t58BE,_t4EC7);
          if _t58C1 then goto ASSIGN58C5 else goto JOIN58C9
        ASSIGN58C5:  preds = [COND58C3]
          real _t58C4#1 = 0.3e1;
          bool _t58C6#1 = GT<real>(_t58BE,_t58C4);
          goto JOIN58C9
        JOIN58C9:  preds = [ASSIGN58C7,COND58C3]
          bool _t58C8#1 = phi(_t58C6,vv4E9D)
          if _t58C8 then goto ASSIGN58CC else goto JOIN598E
        ASSIGN58CC:  preds = [COND58CA]
          real x58CB#5 = VIndex<3,0>(npos5876);
          real y58CD#6 = VIndex<3,1>(npos5876);
          real z58CF#6 = VIndex<3,2>(npos5876);
          real _t58D1#6 = 0.2e1;
          real op1_e3_l_658D3#2 = RMul(x58CB,x58CB);
          real op1_e3_l_758D6#2 = RMul(y58CD,y58CD);
          real op1_e3_l_858D9#11 = RMul(z58CF,z58CF);
          real r58DD#1 = RAdd(op1_e3_l_658D3,op1_e3_l_758D6);
          real op1_e3_l_958DC#2 = RAdd(r58DD,op1_e3_l_858D9);
          real op1_e3_l_1158E1#7 = Cos(op1_e3_l_958DC);
          real r58E5#1 = RMul(_t58D1,x58CB);
          real r58E6#1 = RMul(r58E5,op1_e3_l_858D9);
          real _t58E4#1 = RMul(r58E6,op1_e3_l_1158E1);
          real r58EC#1 = RMul(_t58D1,y58CD);
          real r58ED#1 = RMul(r58EC,op1_e3_l_858D9);
          real _t58EB#1 = RMul(r58ED,op1_e3_l_1158E1);
          real op1_e3_l_1458F2#3 = RMul(z58CF,op1_e3_l_858D9);
          real op1_e3_l_2058F7#8 = Sin(op1_e3_l_958DC);
          real r58FB#1 = RMul(_t58D1,op1_e3_l_1458F2);
          real op1_e3_l_2158FA#1 = RMul(r58FB,op1_e3_l_1158E1);
          real r5900#1 = RMul(_t58D1,z58CF);
          real op1_e3_l_2258FF#1 = RMul(r5900,op1_e3_l_2058F7);
          real _t5904#1 = RAdd(op1_e3_l_2158FA,op1_e3_l_2258FF);
          tensor[3] g5907#2 = <tensor[3]>[_t58E4,_t58EB,_t5904];
          real _t5909#5 = -0.4e1;
          real r590C#1 = RMul(_t5909,op1_e3_l_658D3);
          real r590D#1 = RMul(r590C,op1_e3_l_858D9);
          real op1_e3_l_24590B#1 = RMul(r590D,op1_e3_l_2058F7);
          real r5913#1 = RMul(_t58D1,op1_e3_l_858D9);
          real op1_e3_l_255912#2 = RMul(r5913,op1_e3_l_1158E1);
          real _t5917#1 = RAdd(op1_e3_l_24590B,op1_e3_l_255912);
          real r591B#2 = RMul(_t5909,x58CB);
          real r591C#1 = RMul(r591B,y58CD);
          real r591D#1 = RMul(r591C,op1_e3_l_858D9);
          real _t591A#2 = RMul(r591D,op1_e3_l_2058F7);
          real r5925#1 = RMul(r591B,op1_e3_l_1458F2);
          real op1_e3_l_235923#1 = RMul(r5925,op1_e3_l_2058F7);
          real r592B#1 = RMul(_t4EC7,x58CB);
          real r592C#1 = RMul(r592B,z58CF);
          real op1_e3_l_24592A#1 = RMul(r592C,op1_e3_l_1158E1);
          real _t5931#2 = RAdd(op1_e3_l_235923,op1_e3_l_24592A);
          tensor[3] _t5934#1 = <tensor[3]>[_t5917,_t591A,_t5931];
          real r5937#1 = RMul(_t5909,op1_e3_l_758D6);
          real r5938#1 = RMul(r5937,op1_e3_l_858D9);
          real op1_e3_l_245936#1 = RMul(r5938,op1_e3_l_2058F7);
          real _t593D#1 = RAdd(op1_e3_l_245936,op1_e3_l_255912);
          real r5941#1 = RMul(_t5909,y58CD);
          real r5942#1 = RMul(r5941,op1_e3_l_1458F2);
          real op1_e3_l_235940#1 = RMul(r5942,op1_e3_l_2058F7);
          real r5948#1 = RMul(_t4EC7,y58CD);
          real r5949#1 = RMul(r5948,z58CF);
          real op1_e3_l_245947#1 = RMul(r5949,op1_e3_l_1158E1);
          real _t594E#2 = RAdd(op1_e3_l_235940,op1_e3_l_245947);
          tensor[3] _t5951#1 = <tensor[3]>[_t591A,_t593D,_t594E];
          real _t5953#1 = 0.1e2;
          real op1_e3_l_185955#1 = RMul(op1_e3_l_858D9,op1_e3_l_858D9);
          real r595B#1 = RMul(_t5909,op1_e3_l_185955);
          real op1_e3_l_31595A#1 = RMul(r595B,op1_e3_l_2058F7);
          real r5960#1 = RMul(_t5953,op1_e3_l_858D9);
          real op1_e3_l_32595F#1 = RMul(r5960,op1_e3_l_1158E1);
          real op1_e3_l_335964#1 = RMul(_t58D1,op1_e3_l_2058F7);
          real r5968#1 = RAdd(op1_e3_l_31595A,op1_e3_l_32595F);
          real _t5967#1 = RAdd(r5968,op1_e3_l_335964);
          tensor[3] _t596C#1 = <tensor[3]>[_t5931,_t594E,_t5967];
          tensor[3,3] hess596E#1 = <tensor[3,3]>[_t5934,_t5951,_t596C];
          real[3] _t5970#1 = EigenVals3x3(hess596E);
          real _t5972#1 = Subscript<real[3]>(_t5970,_t587D);
          real op1_e3_l_35974#1 = VDot<3>(g5907,g5907);
          real op1_e3_l_45977#1 = Sqrt(op1_e3_l_35974);
          real op1_e3_l_5597A#1 = RNeg(_t5972);
          real op1_e3_l_6597D#1 = RAdd(fBias4E63,op1_e3_l_45977);
          real str5980#1 = RDiv(op1_e3_l_5597A,op1_e3_l_6597D);
          bool _t5983#1 = GT<real>(str5980,fStrTh4E5F);
          if _t5983 then goto ASSIGN5987 else goto JOIN598C
        ASSIGN5987:  preds = [COND5985]
          bool _t5986#1 = GTE<real>(_t4EBA,fMaskTh4E61);
          if _t5986 then goto JOIN598A else goto JOIN598A
        JOIN598A:  preds = [COND5988,COND5988]
          bool _t5989#1 = phi(birth587B,vv4E9D)
          goto JOIN598C
        JOIN598C:  preds = [JOIN598A,COND5985]
          bool _t598B#1 = phi(_t5989,vv4E9D)
          goto JOIN598E
        JOIN598E:  preds = [JOIN598C,COND58CA]
          bool _t598D#1 = phi(_t598B,vv4E9D)
          if _t598D then goto NEW5990 else goto JOIN5996
        NEW5990:  preds = [COND598F]
          new point(npos5876,hh520F);
          int _t5991#1 = 1;
          int born5993#1 = IAdd(born5627,_t5991);
          goto JOIN5996
        JOIN5996:  preds = [ASSIGN5994,COND598F]
          int born5995#1 = phi(born5993,born5627)
          goto JOIN5998
        JOIN5998:  preds = [JOIN5996,COND58B7]
          int born5997#1 = phi(born5995,born5627)
          goto JOIN599A
        JOIN599A:  preds = [JOIN5998,JOIN59E5]
          int born5999#1 = phi(born5997,born5627)
          goto JOIN599C
        JOIN599C:  preds = [JOIN599A,COND5805]
          int born599B#1 = phi(born5999,born5627)
          goto JOIN599D
        JOIN599D:  preds = [JOIN599C,COND57E5]
          int born5203#1 = phi(born599B,born5627)
          goto JOIN5212
        COND599E:  preds = [COND5832]
          if _t57E6 then goto ASSIGN59A0 else goto JOIN59A9
        ASSIGN59A0:  preds = [COND599E]
          bool _t599F#1 = GT<int>(iter4E87,_t5227);
          if _t599F then goto ASSIGN59A3 else goto JOIN59A7
        ASSIGN59A3:  preds = [COND59A1]
          int _t59A2#1 = IMod(iter4E87,pcp4E7D);
          bool _t59A4#1 = EQ<int>(_t5227,_t59A2);
          goto JOIN59A7
        JOIN59A7:  preds = [ASSIGN59A5,COND59A1]
          bool _t59A6#1 = phi(_t59A4,vv4E9D)
          goto JOIN59A9
        JOIN59A9:  preds = [JOIN59A7,COND599E]
          bool _t59A8#1 = phi(_t59A6,vv4E9D)
          if _t59A8 then goto ASSIGN59AC else goto JOIN59B8
        ASSIGN59AC:  preds = [COND59AA]
          int _t59AB#1 = IDiv(iter4E87,pcp4E7D);
          int _t59AD#2 = 2;
          int _t59AF#1 = IMod(_t59AB,_t59AD);
          int _t59B1#1 = IMul(_t59AF,_t59AD);
          int _t59B3#1 = 1;
          int _t59B5#1 = ISub(_t59B1,_t59B3);
          goto JOIN59B8
        JOIN59B8:  preds = [ASSIGN59B6,COND59AA]
          int _t59B7#1 = phi(_t59B5,_t5227)
          bool _t59B9#1 = LT<int>(_t59B7,_t5227);
          if _t59B9 then goto ASSIGN59BD else goto JOIN59E5
        ASSIGN59BD:  preds = [COND59BB]
          bool _t59BC#1 = GT<real>(newE570B,_t4EBA);
          if _t59BC then goto ASSIGN59C0 else goto JOIN59E4
        ASSIGN59C0:  preds = [COND59BE]
          bool _t59BF#1 = GT<int>(nn5717,nnmax4E83);
          if _t59BF then goto ASSIGN59C3 else goto JOIN59E3
        ASSIGN59C3:  preds = [COND59C1]
          real _t59C2#1 = VIndex<3,0>(pos5211);
          real _t59C4#1 = urnd4DF7 (_t59C2);
          real _t59C6#1 = VIndex<3,1>(pos5211);
          real _t59C8#1 = urnd4DF7 (_t59C6);
          real _t59CA#1 = VIndex<3,2>(pos5211);
          real _t59CC#1 = urnd4DF7 (_t59CA);
          real r59CF#1 = RAdd(_t59C4,_t59C8);
          real _t59CE#1 = RAdd(r59CF,_t59CC);
          real _t59D3#1 = 0.1e1;
          real _t59D5#1 = MathFn<fmod>(_t59CE,_t59D3);
          int _t59D7#1 = ISub(nn5717,nnmax4E83);
          real _t59D9#1 = IntToReal(_t59D7);
          real _t59DB#1 = RDiv(_t59D9,_t5747);
          bool _t59DE#1 = LT<real>(_t59D5,_t59DB);
          if _t59DE then goto DIE59E1 else goto JOIN59E2
        DIE59E1:  preds = [COND59E0]
          die
          goto JOIN59E2
        JOIN59E2:  preds = [*DIE59E1,COND59E0]
          goto JOIN59E3
        JOIN59E3:  preds = [JOIN59E2,COND59C1]
          goto JOIN59E4
        JOIN59E4:  preds = [JOIN59E3,COND59BE]
          goto JOIN59E5
        JOIN59E5:  preds = [JOIN59E4,COND59BB]
          goto JOIN599A
        ASSIGN59E7:  preds = [COND578D]
          int _t59E6#1 = 1;
          bool _t5791#1 = GT<int>(verb4E77,_t59E6);
          goto JOIN5792
        ASSIGN59EA:  preds = [COND574E]
          int _t59E9#1 = 1;
          bool _t5752#1 = GT<int>(verb4E77,_t59E9);
          goto JOIN5753
        ASSIGN59ED:  preds = [COND5696]
          int _t59EC#1 = 1;
          bool _t569A#1 = GT<int>(verb4E77,_t59EC);
          goto JOIN569B
        ASSIGN59F0:  preds = [COND560D]
          int _t59EF#1 = 1;
          bool _t5611#1 = GT<int>(verb4E77,_t59EF);
          goto JOIN5612
        ASSIGN59F3:  preds = [COND54F5]
          int _t59F2#1 = 1;
          bool _t54F9#1 = GT<int>(verb4E77,_t59F2);
          goto JOIN54FA
        ASSIGN59F6:  preds = [COND4FA5]
          int _t59F5#1 = 1;
          bool _t4FA9#1 = GT<int>(verb4E77,_t59F5);
          goto JOIN4FAA
        ASSIGN59F9:  preds = [COND4EA7]
          int _t59F8#1 = 1;
          bool _t4EAB#1 = GT<int>(verb4E77,_t59F8);
          goto JOIN4EAC
    end update
  end point
## initial strand creation
  COLLECTION
    ENTRY59FB:  preds = []
      tensor[3][] ipos59FC#2 = globals.ipos4D51;
      int _t59FE#1 = 0;
      int _t5A00#1 = Length<tensor[3]>(ipos59FC);
      int _t5A02#1 = 1;
      int _t5A04#1 = ISub(_t5A00,_t5A02);
      int[] _t5A06#1 = Range(_t59FE,_t5A04);
    FOREACH5A09:  preds = [ASSIGN5A07,NEXT5A0F]
      foreach (ii5A08 in _t5A06) on exit goto RETURN5A10
      tensor[3] _t5A0A#1 = Subscript<tensor[3][]>(ipos59FC,ii5A08);
      real _t5A0C#1 = 0.1e1;
      new point(_t5A0A,_t5A0C);
      goto FOREACH5A09
    RETURN5A10:  preds = [FOREACH5A09]
      return
## global update
  ENTRY5A11:  preds = []
    real geoEps5A12#3 = globals.geoEps4D48;
    real mvmtEps5A14#3 = globals.mvmtEps4D49;
    real rpcEps5A16#3 = globals.rpcEps4D4A;
    real pchist5A18#1 = globals.pchist4D56;
    int iter5A1A#4 = globals.iter4D57;
    real rpc5A1C#1 = globals.rpc4D58;
    int popLast5A1E#1 = globals.popLast4D59;
    int pop5A20#5 = NumStrands<active>;
    bool _t5A22#1 = NEQ<int>(pop5A20,popLast5A1E);
    if _t5A22 then goto ASSIGN5A26 else goto ASSIGN5AD8
  ASSIGN5A26:  preds = [COND5A24]
    int _t5A25#1 = 1;
    goto JOIN5A29
  JOIN5A29:  preds = [ASSIGN5A26,ASSIGN5AD8]
    int _t5A27#2 = phi(_t5A25,_t5A28)
    real _t5A2A#2 = IntToReal(_t5A27);
    real op1_e3_l_35A2C#1 = RSub(rpc5A1C,_t5A2A);
    real op1_e3_l_45A2F#1 = RMul(pchist5A18,op1_e3_l_35A2C);
    real rpc5A32#5 = RAdd(_t5A2A,op1_e3_l_45A2F);
    globals.rpc4D58 = rpc5A32;
    point[] P5A36#6 = Strands<point,all>;
    (bool res5A3E#1) = all(MAP all5A38 (P5A36));
    real _t5A40#1 = 0.1e3;
    (real res5A4F#1) = sum<real>(MAP mean5A42 (P5A36));
    int num5A51#1 = NumStrands<all>;
    real rNum5A53#5 = IntToReal(num5A51);
    real op1_e3_l_35A55#1 = RDiv(res5A4F,rNum5A53);
    real percfound5A58#1 = RMul(_t5A40,op1_e3_l_35A55);
    (real res5A61#2) = sum<real>(MAP mean5A5B (P5A36));
    real mean5A63#2 = RDiv(res5A61,rNum5A53);
    (real res5A73#1) = sum<real>(MAP mean5A66 (P5A36,mean5A63));
    real op1_e3_l_45A75#1 = RDiv(res5A73,rNum5A53);
    real op1_e3_l_55A78#1 = Sqrt(op1_e3_l_45A75);
    real op1_e3_l_65A7B#1 = RMul(op1_e3_l_55A78,rNum5A53);
    real covcl5A7E#4 = RDiv(op1_e3_l_65A7B,res5A61);
    (real res5A87#4) = max<real>(MAP max5A81 (P5A36));
    string _t5A89#1 = "======= finished iter ";
    string _t5A8B#1 = " w/ ";
    string _t5A8D#3 = ")";
    string _t5A8F#1 = "; %found=";
    string _t5A91#1 = "; mean(hh)=";
    (real res5A99#1) = sum<real>(MAP mean5A93 (P5A36));
    real mean5A9B#1 = RDiv(res5A99,rNum5A53);
    string _t5A9E#1 = "; mean(cl)=";
    string _t5AA0#3 = "; COV(cl)=";
    string _t5AA2#3 = "; max(mvmt)=";
    string _t5AA4#1 = "; pc=";
    string _t5AA6#3 = "; rpc=";
    string _t5AA8#3 = "\n";
    Print<[string,int,string,int,string,string,real,string,real,string,real,string,real,string,real,string,int,string,real,string]>(_t5A89,iter5A1A,_t5A8B,pop5A20,_t5A8D,_t5A8F,percfound5A58,_t5A91,mean5A9B,_t5A9E,mean5A63,_t5AA0,covcl5A7E,_t5AA2,res5A87,_t5AA4,_t5A27,_t5AA6,rpc5A32,_t5AA8);
    if res5A3E then goto ASSIGN5AAD else goto ASSIGN5AD7
  ASSIGN5AAD:  preds = [COND5AAB]
    bool _t5AAC#1 = LT<real>(covcl5A7E,geoEps5A12);
    if _t5AAC then goto ASSIGN5AB0 else goto ASSIGN5AD6
  ASSIGN5AB0:  preds = [COND5AAE]
    bool _t5AAF#1 = LT<real>(res5A87,mvmtEps5A14);
    if _t5AAF then goto ASSIGN5AB3 else goto ASSIGN5AD5
  ASSIGN5AB3:  preds = [COND5AB1]
    bool _t5AB2#1 = LT<real>(rpc5A32,rpcEps5A16);
    goto JOIN5AB6
  JOIN5AB6:  preds = [ASSIGN5AB3,ASSIGN5AD5]
    bool _t5AB4#1 = phi(_t5AB2,_t5AB5)
    goto JOIN5AB9
  JOIN5AB9:  preds = [JOIN5AB6,ASSIGN5AD6]
    bool _t5AB7#1 = phi(_t5AB4,_t5AB8)
    goto JOIN5ABC
  JOIN5ABC:  preds = [JOIN5AB9,ASSIGN5AD7]
    bool _t5ABA#1 = phi(_t5AB7,_t5ABB)
    if _t5ABA then goto ASSIGN5ABF else goto ASSIGN5ACF
  ASSIGN5ABF:  preds = [COND5ABD]
    string _t5ABE#1 = "======= Stabilizing ";
    string _t5AC0#1 = " (iter ";
    string _t5AC2#3 = " < ";
    Print<[string,int,string,int,string,string,real,string,real,string,real,string,real,string,real,string,real,string]>(_t5ABE,pop5A20,_t5AC0,iter5A1A,_t5A8D,_t5AA0,covcl5A7E,_t5AC2,geoEps5A12,_t5AA2,res5A87,_t5AC2,mvmtEps5A14,_t5AA6,rpc5A32,_t5AC2,rpcEps5A16,_t5AA8);
    StabilizeAll;
    goto JOIN5AC6
  JOIN5AC6:  preds = [MASSIGN5AC5,MASSIGN5AD4]
    int _t5AC7#1 = 1;
    int iter5AC9#1 = IAdd(iter5A1A,_t5AC7);
    globals.iter4D57 = iter5AC9;
    globals.popLast4D59 = pop5A20;
    continue
  ASSIGN5ACF:  preds = [COND5ABD]
    string _t5ACE#1 = "======= Stabilizing ";
    string _t5AD0#1 = " (iter ";
    string _t5AD2#3 = " > ";
    Print<[string,int,string,int,string,string,real,string,real,string,real,string,real,string,real,string,real,string]>(_t5ACE,pop5A20,_t5AD0,iter5A1A,_t5A8D,_t5AA0,covcl5A7E,_t5AD2,geoEps5A12,_t5AA2,res5A87,_t5AD2,mvmtEps5A14,_t5AA6,rpc5A32,_t5AD2,rpcEps5A16,_t5AA8);
    goto JOIN5AC6
  ASSIGN5AD5:  preds = [COND5AB1]
    bool _t5AB5#1 = false;
    goto JOIN5AB6
  ASSIGN5AD6:  preds = [COND5AAE]
    bool _t5AB8#1 = false;
    goto JOIN5AB9
  ASSIGN5AD7:  preds = [COND5AAB]
    bool _t5ABB#1 = false;
    goto JOIN5ABC
  ASSIGN5AD8:  preds = [COND5A24]
    int _t5A28#1 = 0;
    goto JOIN5A29
#### end program ####
##### low-ir: after flatten ####
## properties
  GlobalInit StabilizeAll GlobalReduce StrandSets GlobalUpdate NewStrands StrandCommunication StrandsMayDie HasInputs HasGlobals ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
## globals
  input meshData4D3A (meshData) = <no-default>
  input 0space07C6_intermedateGlobal4D3B (space) = <no-default>
  input 0data07C8_intermedateGlobal4D3C (data) = <no-default>
  input fStrTh4D3D (fStrTh) = <no-default>
  input fMaskTh4D3E (fMaskTh) = <default>
  input fBias4D3F (fBias) = <default>
  input tipd4D40 (tipd) = <default>
  input mabd4D41 (mabd) = <default>
  input travMax4D42 (travMax) = <default>
  input nfsMax4D43 (nfsMax) = <default>
  input gdeTest4D44 (gdeTest) = <default>
  input gdeBack4D45 (gdeBack) = <default>
  input gdeOppor4D46 (gdeOppor) = <default>
  input fsEps4D47 (fsEps) = <no-default>
  input geoEps4D48 (geoEps) = <default>
  input mvmtEps4D49 (mvmtEps) = <default>
  input rpcEps4D4A (rpcEps) = <default>
  input pcmvEps4D4B (pcmvEps) = <default>
  input isoval4D4C (isoval) = <default>
  input verb4D4D (verb) = <default>
  input sfs4D4E (sfs) = <default>
  input hist4D4F (hist) = <default>
  input pcp4D50 (pcp) = <default>
  input ipos4D51 (ipos) = <no-default>
  input fDim4D52 (fDim) = <default>
  global int nnmin4D53
  global int nnmax4D54
  global real rad4D55
  global real pchist4D56
  varying global int iter4D57
  varying global real rpc4D58
  varying global int popLast4D59
## functions
  function real urnd4DF7 (real x4DF8#2) {
    ENTRY4DF9:  preds = []
      int iter4DFA#1 = globals.iter4D57;
      real _t4DFC#2 = 0.e0;
      bool _t4DFE#1 = EQ<real>(x4DF8,_t4DFC);
      if _t4DFE then goto RETURN(_t4DFC)4E01 else goto JOIN4E02
    RETURN(_t4DFC)4E01:  preds = [COND4E00]
      return _t4DFC
      goto JOIN4E02
    JOIN4E02:  preds = [*RETURN(_t4DFC)4E01,COND4E00]
      real _t4E03#1 = Abs<real>(x4DF8);
      real l24E06#2 = MathFn<log2>(_t4E03);
      real _t4E08#4 = 0.2e1;
      real _t4E0A#1 = MathFn<floor>(l24E06);
      real _t4E0C#2 = 0.1e1;
      real op1_e3_l_34E0E#1 = RSub(l24E06,_t4E0A);
      real _t4E11#1 = RSub(op1_e3_l_34E0E,_t4E0C);
      real frxp4E14#1 = MathFn<pow>(_t4E08,_t4E11);
      int _t4E16#1 = 2;
      int _t4E18#1 = IMul(_t4E16,iter4DFA);
      real _t4E1A#1 = IntToReal(_t4E18);
      real _Pow_24E1D#2 = RMul(_t4E08,_t4E08);
      real _Pow4_4E1E#1 = RMul(_Pow_24E1D,_Pow_24E1D);
      real _Pow5_4E1F#2 = RMul(_t4E08,_Pow4_4E1E);
      real _Pow10_4E20#2 = RMul(_Pow5_4E1F,_Pow5_4E1F);
      real op1_e3_l_34E1C#1 = RMul(_Pow10_4E20,_Pow10_4E20);
      real op1_e3_l_44E27#1 = RAdd(op1_e3_l_34E1C,_t4E1A);
      real _t4E2A#1 = RMul(frxp4E14,op1_e3_l_44E27);
      real _t4E2D#1 = MathFn<fmod>(_t4E2A,_t4E0C);
      return _t4E2D
}
  function tensor[3] fStep50BF (tensor[3] s50C0#3) {
    ENTRY50C1:  preds = []
      real x50C2#5 = VIndex<3,0>(s50C0);
      real y50C4#6 = VIndex<3,1>(s50C0);
      real z50C6#6 = VIndex<3,2>(s50C0);
      real _t50C8#6 = 0.2e1;
      int _t50CA#2 = 2;
      real op1_e3_l_650CC#2 = RMul(x50C2,x50C2);
      real op1_e3_l_750CF#2 = RMul(y50C4,y50C4);
      real op1_e3_l_850D2#11 = RMul(z50C6,z50C6);
      real r50D6#1 = RAdd(op1_e3_l_650CC,op1_e3_l_750CF);
      real op1_e3_l_950D5#2 = RAdd(r50D6,op1_e3_l_850D2);
      real op1_e3_l_1150DA#7 = Cos(op1_e3_l_950D5);
      real r50DE#1 = RMul(_t50C8,x50C2);
      real r50DF#1 = RMul(r50DE,op1_e3_l_850D2);
      real _t50DD#1 = RMul(r50DF,op1_e3_l_1150DA);
      real r50E5#1 = RMul(_t50C8,y50C4);
      real r50E6#1 = RMul(r50E5,op1_e3_l_850D2);
      real _t50E4#1 = RMul(r50E6,op1_e3_l_1150DA);
      real op1_e3_l_1450EB#3 = RMul(z50C6,op1_e3_l_850D2);
      real op1_e3_l_2050F0#8 = Sin(op1_e3_l_950D5);
      real r50F4#1 = RMul(_t50C8,op1_e3_l_1450EB);
      real op1_e3_l_2150F3#1 = RMul(r50F4,op1_e3_l_1150DA);
      real r50F9#1 = RMul(_t50C8,z50C6);
      real op1_e3_l_2250F8#1 = RMul(r50F9,op1_e3_l_2050F0);
      real _t50FD#1 = RAdd(op1_e3_l_2150F3,op1_e3_l_2250F8);
      tensor[3] g5100#1 = <tensor[3]>[_t50DD,_t50E4,_t50FD];
      real _t5102#5 = -0.4e1;
      real r5105#1 = RMul(_t5102,op1_e3_l_650CC);
      real r5106#1 = RMul(r5105,op1_e3_l_850D2);
      real op1_e3_l_245104#1 = RMul(r5106,op1_e3_l_2050F0);
      real r510C#1 = RMul(_t50C8,op1_e3_l_850D2);
      real op1_e3_l_25510B#2 = RMul(r510C,op1_e3_l_1150DA);
      real _t5110#1 = RAdd(op1_e3_l_245104,op1_e3_l_25510B);
      real r5114#2 = RMul(_t5102,x50C2);
      real r5115#1 = RMul(r5114,y50C4);
      real r5116#1 = RMul(r5115,op1_e3_l_850D2);
      real _t5113#2 = RMul(r5116,op1_e3_l_2050F0);
      real _t511C#2 = 0.4e1;
      real r5120#1 = RMul(r5114,op1_e3_l_1450EB);
      real op1_e3_l_23511E#1 = RMul(r5120,op1_e3_l_2050F0);
      real r5126#1 = RMul(_t511C,x50C2);
      real r5127#1 = RMul(r5126,z50C6);
      real op1_e3_l_245125#1 = RMul(r5127,op1_e3_l_1150DA);
      real _t512C#2 = RAdd(op1_e3_l_23511E,op1_e3_l_245125);
      real r5132#1 = RMul(_t5102,op1_e3_l_750CF);
      real r5133#1 = RMul(r5132,op1_e3_l_850D2);
      real op1_e3_l_245131#1 = RMul(r5133,op1_e3_l_2050F0);
      real _t5138#1 = RAdd(op1_e3_l_245131,op1_e3_l_25510B);
      real r513C#1 = RMul(_t5102,y50C4);
      real r513D#1 = RMul(r513C,op1_e3_l_1450EB);
      real op1_e3_l_23513B#1 = RMul(r513D,op1_e3_l_2050F0);
      real r5143#1 = RMul(_t511C,y50C4);
      real r5144#1 = RMul(r5143,z50C6);
      real op1_e3_l_245142#1 = RMul(r5144,op1_e3_l_1150DA);
      real _t5149#2 = RAdd(op1_e3_l_23513B,op1_e3_l_245142);
      real _t514E#1 = 0.1e2;
      real op1_e3_l_185150#1 = RMul(op1_e3_l_850D2,op1_e3_l_850D2);
      real r5156#1 = RMul(_t5102,op1_e3_l_185150);
      real op1_e3_l_315155#1 = RMul(r5156,op1_e3_l_2050F0);
      real r515B#1 = RMul(_t514E,op1_e3_l_850D2);
      real op1_e3_l_32515A#1 = RMul(r515B,op1_e3_l_1150DA);
      real op1_e3_l_33515F#1 = RMul(_t50C8,op1_e3_l_2050F0);
      real r5163#1 = RAdd(op1_e3_l_315155,op1_e3_l_32515A);
      real _t5162#1 = RAdd(r5163,op1_e3_l_33515F);
      tensor[3,3] hess5169#1 = <tensor[3,3]>[_t5110,_t5113,_t512C,_t5113,_t5138,_t5149,_t512C,_t5149,_t5162];
      (real[3] evals516B#1,tensor[3][3] E516C#1) = EigenVecs3x3(hess5169);
      real _t516E#1 = 0.1e1;
      real _t5170#1 = Subscript<real[3]>(evals516B,_t50CA);
      tensor[3] _t5172#4 = Subscript<tensor[3][3]>(E516C,_t50CA);
      real op1_e3_l_55174#1 = RDiv(_t516E,_t5170);
      real op1_e3_l_65177#3 = RNeg(op1_e3_l_55174);
      real op1_e3_l_7517A#3 = VDot<3>(_t5172,g5100);
      real r517E#1 = TensorIndex<tensor[3],[0]>(_t5172);
      real r517F#1 = RMul(op1_e3_l_65177,r517E);
      real r5180#1 = RMul(r517F,op1_e3_l_7517A);
      real r5181#1 = TensorIndex<tensor[3],[1]>(_t5172);
      real r5182#1 = RMul(op1_e3_l_65177,r5181);
      real r5183#1 = RMul(r5182,op1_e3_l_7517A);
      real r5184#1 = TensorIndex<tensor[3],[2]>(_t5172);
      real r5185#1 = RMul(op1_e3_l_65177,r5184);
      real r5186#1 = RMul(r5185,op1_e3_l_7517A);
      tensor[3] up517D#4 = <tensor[3]>[r5180,r5183,r5186];
      real _t5192#2 = VIndex<3,0>(up517D);
      bool _t5194#1 = EQ<real>(_t5192,_t5192);
      bool _t5196#1 = BNot(_t5194);
      if _t5196 then goto ASSIGN519A else goto ASSIGN51A7
    ASSIGN519A:  preds = [COND5198]
      bool _t5199#1 = true;
      goto JOIN519D
    JOIN519D:  preds = [ASSIGN519A,JOIN51B0]
      bool _t519B#1 = phi(_t5199,_t519C)
      if _t519B then goto ASSIGN51A0 else goto JOIN51A4
    ASSIGN51A0:  preds = [COND519E]
      real _t519F#3 = +inf;
      tensor[3] _t51A1#1 = <tensor[3]>[_t519F,_t519F,_t519F];
      return _t51A1
      goto JOIN51A4
    JOIN51A4:  preds = [*RETURN(_t51A1)51A3,COND519E]
      return up517D
    ASSIGN51A7:  preds = [COND5198]
      real _t51A6#2 = VIndex<3,1>(up517D);
      bool _t51A8#1 = EQ<real>(_t51A6,_t51A6);
      bool _t51AA#1 = BNot(_t51A8);
      if _t51AA then goto ASSIGN51AE else goto ASSIGN51B2
    ASSIGN51AE:  preds = [COND51AC]
      bool _t51AD#1 = true;
      goto JOIN51B0
    JOIN51B0:  preds = [ASSIGN51AE,ASSIGN51B5]
      bool _t519C#1 = phi(_t51AD,_t51AF)
      goto JOIN519D
    ASSIGN51B2:  preds = [COND51AC]
      real _t51B1#2 = VIndex<3,2>(up517D);
      bool _t51B3#1 = EQ<real>(_t51B1,_t51B1);
      bool _t51AF#1 = BNot(_t51B3);
      goto JOIN51B0
}
  function tensor[3,3] fPerp5375 (tensor[3] s5376#3) {
    ENTRY5377:  preds = []
      real x5378#4 = VIndex<3,0>(s5376);
      real y537A#5 = VIndex<3,1>(s5376);
      real z537C#5 = VIndex<3,2>(s5376);
      real _t537E#2 = 0.2e1;
      int _t5380#1 = 2;
      real _t5382#5 = -0.4e1;
      real op1_e3_l_115384#2 = RMul(x5378,x5378);
      real op1_e3_l_125387#2 = RMul(y537A,y537A);
      real op1_e3_l_13538A#9 = RMul(z537C,z537C);
      real r538E#1 = RAdd(op1_e3_l_115384,op1_e3_l_125387);
      real op1_e3_l_14538D#2 = RAdd(r538E,op1_e3_l_13538A);
      real op1_e3_l_175392#7 = Sin(op1_e3_l_14538D);
      real op1_e3_l_235395#4 = Cos(op1_e3_l_14538D);
      real r5399#1 = RMul(_t5382,op1_e3_l_115384);
      real r539A#1 = RMul(r5399,op1_e3_l_13538A);
      real op1_e3_l_245398#1 = RMul(r539A,op1_e3_l_175392);
      real r53A0#1 = RMul(_t537E,op1_e3_l_13538A);
      real op1_e3_l_25539F#2 = RMul(r53A0,op1_e3_l_235395);
      real _t53A4#1 = RAdd(op1_e3_l_245398,op1_e3_l_25539F);
      real r53A8#2 = RMul(_t5382,x5378);
      real r53A9#1 = RMul(r53A8,y537A);
      real r53AA#1 = RMul(r53A9,op1_e3_l_13538A);
      real _t53A7#2 = RMul(r53AA,op1_e3_l_175392);
      real _t53B0#2 = 0.4e1;
      real op1_e3_l_1653B2#2 = RMul(z537C,op1_e3_l_13538A);
      real r53B9#1 = RMul(r53A8,op1_e3_l_1653B2);
      real op1_e3_l_2353B7#1 = RMul(r53B9,op1_e3_l_175392);
      real r53BF#1 = RMul(_t53B0,x5378);
      real r53C0#1 = RMul(r53BF,z537C);
      real op1_e3_l_2453BE#1 = RMul(r53C0,op1_e3_l_235395);
      real _t53C5#2 = RAdd(op1_e3_l_2353B7,op1_e3_l_2453BE);
      real r53CB#1 = RMul(_t5382,op1_e3_l_125387);
      real r53CC#1 = RMul(r53CB,op1_e3_l_13538A);
      real op1_e3_l_2453CA#1 = RMul(r53CC,op1_e3_l_175392);
      real _t53D1#1 = RAdd(op1_e3_l_2453CA,op1_e3_l_25539F);
      real r53D5#1 = RMul(_t5382,y537A);
      real r53D6#1 = RMul(r53D5,op1_e3_l_1653B2);
      real op1_e3_l_2353D4#1 = RMul(r53D6,op1_e3_l_175392);
      real r53DC#1 = RMul(_t53B0,y537A);
      real r53DD#1 = RMul(r53DC,z537C);
      real op1_e3_l_2453DB#1 = RMul(r53DD,op1_e3_l_235395);
      real _t53E2#2 = RAdd(op1_e3_l_2353D4,op1_e3_l_2453DB);
      real _t53E7#1 = 0.1e2;
      real op1_e3_l_1853E9#1 = RMul(op1_e3_l_13538A,op1_e3_l_13538A);
      real r53EF#1 = RMul(_t5382,op1_e3_l_1853E9);
      real op1_e3_l_3153EE#1 = RMul(r53EF,op1_e3_l_175392);
      real r53F4#1 = RMul(_t53E7,op1_e3_l_13538A);
      real op1_e3_l_3253F3#1 = RMul(r53F4,op1_e3_l_235395);
      real op1_e3_l_3353F8#1 = RMul(_t537E,op1_e3_l_175392);
      real r53FC#1 = RAdd(op1_e3_l_3153EE,op1_e3_l_3253F3);
      real _t53FB#1 = RAdd(r53FC,op1_e3_l_3353F8);
      tensor[3,3] hess5402#1 = <tensor[3,3]>[_t53A4,_t53A7,_t53C5,_t53A7,_t53D1,_t53E2,_t53C5,_t53E2,_t53FB];
      (real[3] evals5404#0,tensor[3][3] _t5405#1) = EigenVecs3x3(hess5402);
      tensor[3] E25407#6 = Subscript<tensor[3][3]>(_t5405,_t5380);
      real r540A#1 = TensorIndex<tensor[3],[0]>(E25407);
      tensor[3] binopV540B#3 = VScale<3>(r540A,E25407);
      real r540C#1 = TensorIndex<tensor[3],[1]>(E25407);
      tensor[3] binopV540D#3 = VScale<3>(r540C,E25407);
      real r540E#1 = TensorIndex<tensor[3],[2]>(E25407);
      tensor[3] binopV540F#3 = VScale<3>(r540E,E25407);
      real realLit5419#3 = 0.1e1;
      real r541A#1 = VIndex<3,0>(binopV540B);
      real r541B#2 = RSub(realLit5419,r541A);
      real realLit541C#15 = 0.e0;
      real r541D#1 = VIndex<3,1>(binopV540B);
      real r541E#2 = RSub(realLit541C,r541D);
      real r541F#1 = VIndex<3,2>(binopV540B);
      real r5420#2 = RSub(realLit541C,r541F);
      tensor[3] tensor5421#2 = <tensor[3]>[r541B,r541E,r5420];
      real r5422#1 = VIndex<3,0>(binopV540D);
      real r5423#2 = RSub(realLit541C,r5422);
      real r5424#1 = VIndex<3,1>(binopV540D);
      real r5425#2 = RSub(realLit5419,r5424);
      real r5426#1 = VIndex<3,2>(binopV540D);
      real r5427#2 = RSub(realLit541C,r5426);
      tensor[3] tensor5428#2 = <tensor[3]>[r5423,r5425,r5427];
      real r5429#1 = VIndex<3,0>(binopV540F);
      real r542A#2 = RSub(realLit541C,r5429);
      real r542B#1 = VIndex<3,1>(binopV540F);
      real r542C#2 = RSub(realLit541C,r542B);
      real r542D#1 = VIndex<3,2>(binopV540F);
      real r542E#2 = RSub(realLit5419,r542D);
      tensor[3] tensor542F#2 = <tensor[3]>[r542A,r542C,r542E];
      tensor[3,3] m5418#1 = <tensor[3,3]>[r541B,r541E,r5420,r5423,r5425,r5427,r542A,r542C,r542E];
      real vdot544B#1 = VDot<3>(tensor5421,tensor5421);
      real vdot544D#1 = VDot<3>(tensor5428,tensor5428);
      real r544E#1 = RAdd(vdot544B,vdot544D);
      real vdot5450#1 = VDot<3>(tensor542F,tensor542F);
      real t5449#2 = RAdd(r544E,vdot5450);
      bool _t545A#1 = EQ<real>(t5449,t5449);
      bool _t545C#1 = BNot(_t545A);
      if _t545C then goto ASSIGN5B22 else goto JOIN5467
    ASSIGN5B22:  preds = [COND545E]
      tensor[3,3] _t545F#1 = <tensor[3,3]>[realLit541C,realLit541C,realLit541C,realLit541C,realLit541C,realLit541C,realLit541C,realLit541C,realLit541C];
      return _t545F
      goto JOIN5467
    JOIN5467:  preds = [*RETURN(_t545F)5466,COND545E]
      return m5418
}
  function bool all5A38 (point P5A39#1) {
    ENTRY5A3A:  preds = []
      bool _t5A3B#1 = P5A39.found;
      return _t5A3B
}
  function real mean5A42 (point P5A43#1) {
    ENTRY5A44:  preds = []
      bool _t5A45#1 = P5A43.found;
      if _t5A45 then goto ASSIGN5A49 else goto ASSIGN5A4E
    ASSIGN5A49:  preds = [COND5A47]
      real _t5A48#1 = 0.1e1;
      goto JOIN5A4C
    JOIN5A4C:  preds = [ASSIGN5A49,ASSIGN5A4E]
      real _t5A4A#1 = phi(_t5A48,_t5A4B)
      return _t5A4A
    ASSIGN5A4E:  preds = [COND5A47]
      real _t5A4B#1 = 0.e0;
      goto JOIN5A4C
}
  function real mean5A5B (point P5A5C#1) {
    ENTRY5A5D:  preds = []
      real _t5A5E#1 = P5A5C.closest;
      return _t5A5E
}
  function real mean5A66 (point P5A67#1, real meancl5A68#1) {
    ENTRY5A69:  preds = []
      real _t5A6A#1 = P5A67.closest;
      real op1_e3_l_25A6C#2 = RSub(_t5A6A,meancl5A68);
      real _t5A6F#1 = RMul(op1_e3_l_25A6C,op1_e3_l_25A6C);
      return _t5A6F
}
  function real max5A81 (point P5A82#1) {
    ENTRY5A83:  preds = []
      real _t5A84#1 = P5A82.mvmt;
      return _t5A84
}
  function real mean5A93 (point P5A94#1) {
    ENTRY5A95:  preds = []
      real _t5A96#1 = P5A94.hh;
      return _t5A96
}
## input initialization
  ENTRY4D5A:  preds = []
    real fMaskTh4D5B#3 = 0.e0;
    globals.fMaskTh4D3E = fMaskTh4D5B;
    globals.fBias4D3F = fMaskTh4D5B;
    real tipd4D5F#1 = 0.1e1;
    globals.tipd4D40 = tipd4D5F;
    real mabd4D62#1 = 0.75e0;
    globals.mabd4D41 = mabd4D62;
    real travMax4D65#1 = 0.1e2;
    globals.travMax4D42 = travMax4D65;
    int nfsMax4D68#1 = 20;
    globals.nfsMax4D43 = nfsMax4D68;
    real gdeTest4D6B#4 = 0.5e0;
    globals.gdeTest4D44 = gdeTest4D6B;
    globals.gdeBack4D45 = gdeTest4D6B;
    real gdeOppor4D6F#1 = 0.12e1;
    globals.gdeOppor4D46 = gdeOppor4D6F;
    real geoEps4D72#1 = 0.1e0;
    globals.geoEps4D48 = geoEps4D72;
    real mvmtEps4D75#2 = 0.1e-1;
    globals.mvmtEps4D49 = mvmtEps4D75;
    globals.rpcEps4D4A = mvmtEps4D75;
    real pcmvEps4D79#1 = 0.3e0;
    globals.pcmvEps4D4B = pcmvEps4D79;
    globals.isoval4D4C = fMaskTh4D5B;
    int verb4D7D#1 = 0;
    globals.verb4D4D = verb4D7D;
    globals.sfs4D4E = gdeTest4D6B;
    globals.hist4D4F = gdeTest4D6B;
    int pcp4D82#1 = 5;
    globals.pcp4D50 = pcp4D82;
    int fDim4D85#1 = 2;
    globals.fDim4D52 = fDim4D85;
    return
## global-variable initialization
  ENTRY4D89:  preds = []
    femData:Mesh meshData4D8A#2 = globals.meshData4D3A;
    real tipd4D8C#1 = globals.tipd4D40;
    real hist4D8E#1 = globals.hist4D4F;
    int pcp4D90#1 = globals.pcp4D50;
    int fDim4D92#3 = globals.fDim4D52;
    int _t4D94#4 = 0;
    int _t4D96#3 = 1;
    int _t4D98#1 = ExtractFemItem<int,NumCell(Mesh)>(meshData4D8A);
    int _t4D9A#1 = ISub(_t4D98,_t4D96);
    int[] _t4D9C#1 = Range(_t4D94,_t4D9A);
    femData:MeshCell[] _t4D9E#1 = <femData:MeshCell[]>{};
  FOREACH4DA1:  preds = [ASSIGN4D9F,NEXT4DA7]
    foreach (_t4DA0 in _t4D9C) on exit goto ASSIGN4DA9
      femData:MeshCell[] _t4DA5#1 = phi(_t4D9E,_t4DA4)
    femData:MeshCell _t4DA2#1 = LoadFem<femData:MeshCell>(meshData4D8A,_t4DA0);
    femData:MeshCell[] _t4DA4#1 = Append<femData:MeshCell>(_t4DA5,_t4DA2);
    goto FOREACH4DA1
  ASSIGN4DA9:  preds = [FOREACH4DA1]
    int _t4DA8#3 = 2;
    bool _t4DAA#2 = EQ<int>(_t4DA8,fDim4D92);
    if _t4DAA then goto ASSIGN4DAE else goto ASSIGN4DDE
  ASSIGN4DAE:  preds = [COND4DAC]
    int _t4DAD#1 = 6;
    goto JOIN4DB1
  JOIN4DB1:  preds = [ASSIGN4DAE,JOIN4DE0]
    int _t4DAF#1 = phi(_t4DAD,_t4DB0)
    globals.nnmin4D53 = _t4DAF;
    if _t4DAA then goto ASSIGN4DB5 else goto ASSIGN4DD8
  ASSIGN4DB5:  preds = [COND4DB3]
    int _t4DB4#1 = 8;
    goto JOIN4DB8
  JOIN4DB8:  preds = [ASSIGN4DB5,JOIN4DDC]
    int _t4DB6#1 = phi(_t4DB4,_t4DB7)
    globals.nnmax4D54 = _t4DB6;
    real _t4DBA#1 = 0.2e1;
    real _t4DBC#1 = 0.3e1;
    real op1_e3_l_34DBE#1 = RMul(tipd4D8C,_t4DBC);
    real rad4DC1#1 = RDiv(op1_e3_l_34DBE,_t4DBA);
    globals.rad4D55 = rad4DC1;
    real _t4DC5#2 = 0.1e1;
    int _t4DC7#1 = IMul(_t4DA8,pcp4D90);
    real _t4DC9#1 = IntToReal(_t4DC7);
    real _t4DCB#1 = RDiv(_t4DC5,_t4DC9);
    real pchist4DCE#1 = MathFn<pow>(hist4D8E,_t4DCB);
    globals.pchist4D56 = pchist4DCE;
    globals.iter4D57 = _t4D94;
    globals.rpc4D58 = _t4DC5;
    int popLast4DD3#1 = -1;
    globals.popLast4D59 = popLast4DD3;
    return
  ASSIGN4DD8:  preds = [COND4DB3]
    bool _t4DD7#1 = EQ<int>(_t4D96,fDim4D92);
    if _t4DD7 then goto ASSIGN4DDB else goto JOIN4DDC
  ASSIGN4DDB:  preds = [COND4DD9]
    int _t4DDA#1 = 3;
    goto JOIN4DDC
  JOIN4DDC:  preds = [ASSIGN4DDB,COND4DD9]
    int _t4DB7#1 = phi(_t4DDA,_t4D94)
    goto JOIN4DB8
  ASSIGN4DDE:  preds = [COND4DAC]
    bool _t4DDD#1 = EQ<int>(_t4D96,fDim4D92);
    if _t4DDD then goto JOIN4DE0 else goto JOIN4DE0
  JOIN4DE0:  preds = [COND4DDF,COND4DDF]
    int _t4DB0#1 = phi(_t4DA8,_t4D94)
    goto JOIN4DB1
## strand
  strand point (tensor[3] p04DE1#5, real hh04DE2#1) in 3D
    state:
      output tensor[3] pos;
      output tensor[3] _pos;
      real ID;
      real hh;
      tensor[3] step;
      bool found;
      int nfs;
      real trav;
      real mvmt;
      real closest;
      int born;
      bool first;
    state init
      ENTRY4DEF:  preds = []
        real rad4DF0#1 = globals.rad4D55;
        real _t4DF2#1 = 0.1e7;
        real _t4DF4#1 = VIndex<3,0>(p04DE1);
        real _t4DF6#1 = urnd4DF7 (_t4DF4);
        real _t4E31#1 = VIndex<3,1>(p04DE1);
        real _t4E33#1 = urnd4DF7 (_t4E31);
        real _t4E35#1 = VIndex<3,2>(p04DE1);
        real _t4E37#1 = urnd4DF7 (_t4E35);
        real r4E3A#1 = RAdd(_t4DF6,_t4E33);
        real _t4E39#1 = RAdd(r4E3A,_t4E37);
        real _t4E3E#2 = 0.1e1;
        real _t4E40#1 = MathFn<fmod>(_t4E39,_t4E3E);
        real _t4E42#1 = RMul(_t4DF2,_t4E40);
        real _t4E45#1 = MathFn<floor>(_t4E42);
        real _t4E47#4 = 0.e0;
        tensor[3] step4E49#1 = <tensor[3]>[_t4E47,_t4E47,_t4E47];
        bool found4E4B#1 = false;
        int nfs4E4D#2 = 0;
        bool first4E4F#1 = true;
        self.pos = p04DE1;
        self._pos = p04DE1;
        self.ID = _t4E45;
        self.hh = hh04DE2;
        self.step = step4E49;
        self.found = found4E4B;
        self.nfs = nfs4E4D;
        self.trav = _t4E47;
        self.mvmt = _t4E3E;
        self.closest = rad4DF0;
        self.born = nfs4E4D;
        self.first = first4E4F;
        return
    end state init
    method update
        ENTRY4E5E:  preds = []
          real fStrTh4E5F#4 = globals.fStrTh4D3D;
          real fMaskTh4E61#4 = globals.fMaskTh4D3E;
          real fBias4E63#4 = globals.fBias4D3F;
          real tipd4E65#17 = globals.tipd4D40;
          real mabd4E67#1 = globals.mabd4D41;
          real travMax4E69#3 = globals.travMax4D42;
          int nfsMax4E6B#3 = globals.nfsMax4D43;
          real gdeTest4E6D#1 = globals.gdeTest4D44;
          real gdeBack4E6F#1 = globals.gdeBack4D45;
          real gdeOppor4E71#1 = globals.gdeOppor4D46;
          real fsEps4E73#3 = globals.fsEps4D47;
          real pcmvEps4E75#1 = globals.pcmvEps4D4B;
          int verb4E77#16 = globals.verb4D4D;
          real sfs4E79#10 = globals.sfs4D4E;
          real hist4E7B#2 = globals.hist4D4F;
          int pcp4E7D#10 = globals.pcp4D50;
          int fDim4E7F#2 = globals.fDim4D52;
          int nnmin4E81#3 = globals.nnmin4D53;
          int nnmax4E83#4 = globals.nnmax4D54;
          real rad4E85#6 = globals.rad4D55;
          int iter4E87#22 = globals.iter4D57;
          tensor[3] pos4E89#16 = self.pos;
          real ID4E8B#11 = self.ID;
          real hh4E8D#7 = self.hh;
          bool found4E8F#3 = self.found;
          int nfs4E91#5 = self.nfs;
          real trav4E93#4 = self.trav;
          real mvmt4E95#5 = self.mvmt;
          real closest4E97#1 = self.closest;
          int born4E99#5 = self.born;
          bool first4E9B#1 = self.first;
          bool vv4E9D#45 = false;
          if first4E9B then goto ASSIGN4EA1 else goto JOIN4EB9
        ASSIGN4EA1:  preds = [COND4E9F]
          int _t4EA0#1 = 0;
          bool _t4EA2#1 = GT<int>(verb4E77,_t4EA0);
          if _t4EA2 then goto JOIN4EA6 else goto JOIN4EA6
        JOIN4EA6:  preds = [COND4EA4,COND4EA4]
          bool _t4EA5#1 = phi(vv4E9D,vv4E9D)
          if _t4EA5 then goto ASSIGN4EA9 else goto ASSIGN59F9
        ASSIGN4EA9:  preds = [COND4EA7]
          bool _t4EA8#1 = true;
          goto JOIN4EAC
        JOIN4EAC:  preds = [ASSIGN4EA9,ASSIGN59FA]
          bool _t4EAA#1 = phi(_t4EA8,_t4EAB)
          if _t4EAA then goto ASSIGN4EAF else goto JOIN4EB8
        ASSIGN4EAF:  preds = [COND4EAD]
          string _t4EAE#1 = "(i#";
          string _t4EB0#1 = " @ ";
          string _t4EB2#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID4E8B,_t4EAE,iter4E87,_t4EB0,pos4E89,_t4EB2);
          string _t4EB5#1 = " HELLO!\n";
          Print<[string]>(_t4EB5);
          goto JOIN4EB8
        JOIN4EB8:  preds = [MASSIGN4EB7,COND4EAD]
          goto JOIN4EB9
        JOIN4EB9:  preds = [JOIN4EB8,COND4E9F]
          real _t4EBA#23 = 0.e0;
          tensor[3] _t4EBC#5 = <tensor[3]>[_t4EBA,_t4EBA,_t4EBA];
          tensor[3] op1_e3_l_24EBE#2 = VSub<3>(pos4E89,_t4EBC);
          real op1_e3_l_44EC1#1 = VDot<3>(op1_e3_l_24EBE,op1_e3_l_24EBE);
          real _t4EC4#3 = Sqrt(op1_e3_l_44EC1);
          real _t4EC7#11 = 0.4e1;
          bool _t4EC9#2 = LT<real>(_t4EC4,_t4EC7);
          if _t4EC9 then goto ASSIGN4ECD else goto JOIN4ED1
        ASSIGN4ECD:  preds = [COND4ECB]
          real _t4ECC#1 = 0.3e1;
          bool _t4ECE#1 = GT<real>(_t4EC4,_t4ECC);
          goto JOIN4ED1
        JOIN4ED1:  preds = [ASSIGN4ECF,COND4ECB]
          bool _t4ED0#1 = phi(_t4ECE,vv4E9D)
          if _t4ED0 then goto ASSIGN4ED4 else goto JOIN4F9A
        ASSIGN4ED4:  preds = [COND4ED2]
          real x4ED3#5 = VIndex<3,0>(pos4E89);
          real y4ED5#6 = VIndex<3,1>(pos4E89);
          real z4ED7#6 = VIndex<3,2>(pos4E89);
          real _t4ED9#6 = 0.2e1;
          int _t4EDB#1 = 2;
          real op1_e3_l_64EDD#2 = RMul(x4ED3,x4ED3);
          real op1_e3_l_74EE0#2 = RMul(y4ED5,y4ED5);
          real op1_e3_l_84EE3#11 = RMul(z4ED7,z4ED7);
          real r4EE7#1 = RAdd(op1_e3_l_64EDD,op1_e3_l_74EE0);
          real op1_e3_l_94EE6#2 = RAdd(r4EE7,op1_e3_l_84EE3);
          real op1_e3_l_114EEB#7 = Cos(op1_e3_l_94EE6);
          real r4EEF#1 = RMul(_t4ED9,x4ED3);
          real r4EF0#1 = RMul(r4EEF,op1_e3_l_84EE3);
          real _t4EEE#1 = RMul(r4EF0,op1_e3_l_114EEB);
          real r4EF6#1 = RMul(_t4ED9,y4ED5);
          real r4EF7#1 = RMul(r4EF6,op1_e3_l_84EE3);
          real _t4EF5#1 = RMul(r4EF7,op1_e3_l_114EEB);
          real op1_e3_l_144EFC#3 = RMul(z4ED7,op1_e3_l_84EE3);
          real op1_e3_l_204F01#8 = Sin(op1_e3_l_94EE6);
          real r4F05#1 = RMul(_t4ED9,op1_e3_l_144EFC);
          real op1_e3_l_214F04#1 = RMul(r4F05,op1_e3_l_114EEB);
          real r4F0A#1 = RMul(_t4ED9,z4ED7);
          real op1_e3_l_224F09#1 = RMul(r4F0A,op1_e3_l_204F01);
          real _t4F0E#1 = RAdd(op1_e3_l_214F04,op1_e3_l_224F09);
          tensor[3] g4F11#2 = <tensor[3]>[_t4EEE,_t4EF5,_t4F0E];
          real _t4F13#5 = -0.4e1;
          real r4F16#1 = RMul(_t4F13,op1_e3_l_64EDD);
          real r4F17#1 = RMul(r4F16,op1_e3_l_84EE3);
          real op1_e3_l_244F15#1 = RMul(r4F17,op1_e3_l_204F01);
          real r4F1D#1 = RMul(_t4ED9,op1_e3_l_84EE3);
          real op1_e3_l_254F1C#2 = RMul(r4F1D,op1_e3_l_114EEB);
          real _t4F21#1 = RAdd(op1_e3_l_244F15,op1_e3_l_254F1C);
          real r4F25#2 = RMul(_t4F13,x4ED3);
          real r4F26#1 = RMul(r4F25,y4ED5);
          real r4F27#1 = RMul(r4F26,op1_e3_l_84EE3);
          real _t4F24#2 = RMul(r4F27,op1_e3_l_204F01);
          real r4F2F#1 = RMul(r4F25,op1_e3_l_144EFC);
          real op1_e3_l_234F2D#1 = RMul(r4F2F,op1_e3_l_204F01);
          real r4F35#1 = RMul(_t4EC7,x4ED3);
          real r4F36#1 = RMul(r4F35,z4ED7);
          real op1_e3_l_244F34#1 = RMul(r4F36,op1_e3_l_114EEB);
          real _t4F3B#2 = RAdd(op1_e3_l_234F2D,op1_e3_l_244F34);
          real r4F41#1 = RMul(_t4F13,op1_e3_l_74EE0);
          real r4F42#1 = RMul(r4F41,op1_e3_l_84EE3);
          real op1_e3_l_244F40#1 = RMul(r4F42,op1_e3_l_204F01);
          real _t4F47#1 = RAdd(op1_e3_l_244F40,op1_e3_l_254F1C);
          real r4F4B#1 = RMul(_t4F13,y4ED5);
          real r4F4C#1 = RMul(r4F4B,op1_e3_l_144EFC);
          real op1_e3_l_234F4A#1 = RMul(r4F4C,op1_e3_l_204F01);
          real r4F52#1 = RMul(_t4EC7,y4ED5);
          real r4F53#1 = RMul(r4F52,z4ED7);
          real op1_e3_l_244F51#1 = RMul(r4F53,op1_e3_l_114EEB);
          real _t4F58#2 = RAdd(op1_e3_l_234F4A,op1_e3_l_244F51);
          real _t4F5D#1 = 0.1e2;
          real op1_e3_l_184F5F#1 = RMul(op1_e3_l_84EE3,op1_e3_l_84EE3);
          real r4F65#1 = RMul(_t4F13,op1_e3_l_184F5F);
          real op1_e3_l_314F64#1 = RMul(r4F65,op1_e3_l_204F01);
          real r4F6A#1 = RMul(_t4F5D,op1_e3_l_84EE3);
          real op1_e3_l_324F69#1 = RMul(r4F6A,op1_e3_l_114EEB);
          real op1_e3_l_334F6E#1 = RMul(_t4ED9,op1_e3_l_204F01);
          real r4F72#1 = RAdd(op1_e3_l_314F64,op1_e3_l_324F69);
          real _t4F71#1 = RAdd(r4F72,op1_e3_l_334F6E);
          tensor[3,3] hess4F78#1 = <tensor[3,3]>[_t4F21,_t4F24,_t4F3B,_t4F24,_t4F47,_t4F58,_t4F3B,_t4F58,_t4F71];
          real[3] _t4F7A#1 = EigenVals3x3(hess4F78);
          real _t4F7C#1 = Subscript<real[3]>(_t4F7A,_t4EDB);
          real op1_e3_l_34F7E#1 = VDot<3>(g4F11,g4F11);
          real op1_e3_l_44F81#1 = Sqrt(op1_e3_l_34F7E);
          real op1_e3_l_54F84#1 = RNeg(_t4F7C);
          real op1_e3_l_64F87#1 = RAdd(fBias4E63,op1_e3_l_44F81);
          real str4F8A#1 = RDiv(op1_e3_l_54F84,op1_e3_l_64F87);
          bool _t4F8D#1 = GT<real>(str4F8A,fStrTh4E5F);
          if _t4F8D then goto ASSIGN4F91 else goto JOIN4F98
        ASSIGN4F91:  preds = [COND4F8F]
          bool _t4F90#1 = GTE<real>(_t4EBA,fMaskTh4E61);
          if _t4F90 then goto ASSIGN4F94 else goto JOIN4F96
        ASSIGN4F94:  preds = [COND4F92]
          bool _t4F93#1 = true;
          goto JOIN4F96
        JOIN4F96:  preds = [ASSIGN4F94,COND4F92]
          bool _t4F95#1 = phi(_t4F93,vv4E9D)
          goto JOIN4F98
        JOIN4F98:  preds = [JOIN4F96,COND4F8F]
          bool _t4F97#1 = phi(_t4F95,vv4E9D)
          goto JOIN4F9A
        JOIN4F9A:  preds = [JOIN4F98,COND4ED2]
          bool _t4F99#1 = phi(_t4F97,vv4E9D)
          bool _t4F9B#1 = BNot(_t4F99);
          if _t4F9B then goto ASSIGN4F9F else goto JOIN5087
        ASSIGN4F9F:  preds = [COND4F9D]
          int _t4F9E#1 = 0;
          bool _t4FA0#1 = GT<int>(verb4E77,_t4F9E);
          if _t4FA0 then goto JOIN4FA4 else goto JOIN4FA4
        JOIN4FA4:  preds = [COND4FA2,COND4FA2]
          bool _t4FA3#1 = phi(vv4E9D,vv4E9D)
          if _t4FA3 then goto ASSIGN4FA7 else goto ASSIGN59F6
        ASSIGN4FA7:  preds = [COND4FA5]
          bool _t4FA6#1 = true;
          goto JOIN4FAA
        JOIN4FAA:  preds = [ASSIGN4FA7,ASSIGN59F7]
          bool _t4FA8#1 = phi(_t4FA6,_t4FA9)
          if _t4FA8 then goto ASSIGN4FAD else goto JOIN5085
        ASSIGN4FAD:  preds = [COND4FAB]
          string _t4FAC#1 = "(i#";
          string _t4FAE#1 = " @ ";
          string _t4FB0#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID4E8B,_t4FAC,iter4E87,_t4FAE,pos4E89,_t4FB0);
          string _t4FB3#1 = "!inside=";
          if _t4EC9 then goto ASSIGN4FB7 else goto JOIN4FBB
        ASSIGN4FB7:  preds = [COND4FB5]
          real _t4FB6#1 = 0.3e1;
          bool _t4FB8#1 = GT<real>(_t4EC4,_t4FB6);
          goto JOIN4FBB
        JOIN4FBB:  preds = [ASSIGN4FB9,COND4FB5]
          bool _t4FBA#1 = phi(_t4FB8,vv4E9D)
          string _t4FBC#1 = " || fStrength=";
          real x4FBE#5 = VIndex<3,0>(pos4E89);
          real y4FC0#6 = VIndex<3,1>(pos4E89);
          real z4FC2#6 = VIndex<3,2>(pos4E89);
          real _t4FC4#6 = 0.2e1;
          int _t4FC6#1 = 2;
          real op1_e3_l_64FC8#2 = RMul(x4FBE,x4FBE);
          real op1_e3_l_74FCB#2 = RMul(y4FC0,y4FC0);
          real op1_e3_l_84FCE#11 = RMul(z4FC2,z4FC2);
          real r4FD2#1 = RAdd(op1_e3_l_64FC8,op1_e3_l_74FCB);
          real op1_e3_l_94FD1#2 = RAdd(r4FD2,op1_e3_l_84FCE);
          real op1_e3_l_114FD6#7 = Cos(op1_e3_l_94FD1);
          real r4FDA#1 = RMul(_t4FC4,x4FBE);
          real r4FDB#1 = RMul(r4FDA,op1_e3_l_84FCE);
          real _t4FD9#1 = RMul(r4FDB,op1_e3_l_114FD6);
          real r4FE1#1 = RMul(_t4FC4,y4FC0);
          real r4FE2#1 = RMul(r4FE1,op1_e3_l_84FCE);
          real _t4FE0#1 = RMul(r4FE2,op1_e3_l_114FD6);
          real op1_e3_l_144FE7#3 = RMul(z4FC2,op1_e3_l_84FCE);
          real op1_e3_l_204FEC#8 = Sin(op1_e3_l_94FD1);
          real r4FF0#1 = RMul(_t4FC4,op1_e3_l_144FE7);
          real op1_e3_l_214FEF#1 = RMul(r4FF0,op1_e3_l_114FD6);
          real r4FF5#1 = RMul(_t4FC4,z4FC2);
          real op1_e3_l_224FF4#1 = RMul(r4FF5,op1_e3_l_204FEC);
          real _t4FF9#1 = RAdd(op1_e3_l_214FEF,op1_e3_l_224FF4);
          tensor[3] g4FFC#2 = <tensor[3]>[_t4FD9,_t4FE0,_t4FF9];
          real _t4FFE#5 = -0.4e1;
          real r5001#1 = RMul(_t4FFE,op1_e3_l_64FC8);
          real r5002#1 = RMul(r5001,op1_e3_l_84FCE);
          real op1_e3_l_245000#1 = RMul(r5002,op1_e3_l_204FEC);
          real r5008#1 = RMul(_t4FC4,op1_e3_l_84FCE);
          real op1_e3_l_255007#2 = RMul(r5008,op1_e3_l_114FD6);
          real _t500C#1 = RAdd(op1_e3_l_245000,op1_e3_l_255007);
          real r5010#2 = RMul(_t4FFE,x4FBE);
          real r5011#1 = RMul(r5010,y4FC0);
          real r5012#1 = RMul(r5011,op1_e3_l_84FCE);
          real _t500F#2 = RMul(r5012,op1_e3_l_204FEC);
          real r501A#1 = RMul(r5010,op1_e3_l_144FE7);
          real op1_e3_l_235018#1 = RMul(r501A,op1_e3_l_204FEC);
          real r5020#1 = RMul(_t4EC7,x4FBE);
          real r5021#1 = RMul(r5020,z4FC2);
          real op1_e3_l_24501F#1 = RMul(r5021,op1_e3_l_114FD6);
          real _t5026#2 = RAdd(op1_e3_l_235018,op1_e3_l_24501F);
          real r502C#1 = RMul(_t4FFE,op1_e3_l_74FCB);
          real r502D#1 = RMul(r502C,op1_e3_l_84FCE);
          real op1_e3_l_24502B#1 = RMul(r502D,op1_e3_l_204FEC);
          real _t5032#1 = RAdd(op1_e3_l_24502B,op1_e3_l_255007);
          real r5036#1 = RMul(_t4FFE,y4FC0);
          real r5037#1 = RMul(r5036,op1_e3_l_144FE7);
          real op1_e3_l_235035#1 = RMul(r5037,op1_e3_l_204FEC);
          real r503D#1 = RMul(_t4EC7,y4FC0);
          real r503E#1 = RMul(r503D,z4FC2);
          real op1_e3_l_24503C#1 = RMul(r503E,op1_e3_l_114FD6);
          real _t5043#2 = RAdd(op1_e3_l_235035,op1_e3_l_24503C);
          real _t5048#1 = 0.1e2;
          real op1_e3_l_18504A#1 = RMul(op1_e3_l_84FCE,op1_e3_l_84FCE);
          real r5050#1 = RMul(_t4FFE,op1_e3_l_18504A);
          real op1_e3_l_31504F#1 = RMul(r5050,op1_e3_l_204FEC);
          real r5055#1 = RMul(_t5048,op1_e3_l_84FCE);
          real op1_e3_l_325054#1 = RMul(r5055,op1_e3_l_114FD6);
          real op1_e3_l_335059#1 = RMul(_t4FC4,op1_e3_l_204FEC);
          real r505D#1 = RAdd(op1_e3_l_31504F,op1_e3_l_325054);
          real _t505C#1 = RAdd(r505D,op1_e3_l_335059);
          tensor[3,3] hess5063#1 = <tensor[3,3]>[_t500C,_t500F,_t5026,_t500F,_t5032,_t5043,_t5026,_t5043,_t505C];
          real[3] _t5065#1 = EigenVals3x3(hess5063);
          real _t5067#1 = Subscript<real[3]>(_t5065,_t4FC6);
          real op1_e3_l_35069#1 = VDot<3>(g4FFC,g4FFC);
          real op1_e3_l_4506C#1 = Sqrt(op1_e3_l_35069);
          real op1_e3_l_5506F#1 = RNeg(_t5067);
          real op1_e3_l_65072#1 = RAdd(fBias4E63,op1_e3_l_4506C);
          real str5075#1 = RDiv(op1_e3_l_5506F,op1_e3_l_65072);
          string _t5078#1 = " <= fStrTh=";
          string _t507A#1 = " || fMask(pos)=";
          string _t507C#1 = " < fMaskTh=";
          string _t507E#1 = " || fTest(pos)=";
          bool _t5080#1 = true;
          string _t5082#1 = " ==>DIE\n";
          Print<[string,bool,string,real,string,real,string,real,string,real,string,bool,string]>(_t4FB3,_t4FBA,_t4FBC,str5075,_t5078,fStrTh4E5F,_t507A,_t4EBA,_t507C,fMaskTh4E61,_t507E,_t5080,_t5082);
          goto JOIN5085
        JOIN5085:  preds = [MASSIGN5084,COND4FAB]
          die
          goto JOIN5087
        JOIN5087:  preds = [*DIE5086,COND4F9D]
          bool _t5088#1 = GT<real>(travMax4E69,_t4EBA);
          if _t5088 then goto ASSIGN508C else goto JOIN5090
        ASSIGN508C:  preds = [COND508A]
          bool _t508B#1 = GT<real>(trav4E93,travMax4E69);
          if _t508B then goto DIE508E else goto JOIN508F
        DIE508E:  preds = [COND508D]
          die
          goto JOIN508F
        JOIN508F:  preds = [*DIE508E,COND508D]
          goto JOIN5090
        JOIN5090:  preds = [JOIN508F,COND508A]
          bool _t5091#1 = BNot(found4E8F);
          if _t5091 then goto ASSIGN5095 else goto ASSIGN5228
        ASSIGN5095:  preds = [COND5093]
          int _t5094#3 = 0;
          bool _t5096#1 = GT<int>(nfsMax4E6B,_t5094);
          if _t5096 then goto ASSIGN509A else goto JOIN50BD
        ASSIGN509A:  preds = [COND5098]
          bool _t5099#1 = GT<int>(nfs4E91,nfsMax4E6B);
          if _t5099 then goto ASSIGN509D else goto JOIN50BC
        ASSIGN509D:  preds = [COND509B]
          bool _t509C#1 = GT<int>(verb4E77,_t5094);
          if _t509C then goto JOIN50A0 else goto JOIN50A0
        JOIN50A0:  preds = [COND509E,COND509E]
          bool _t509F#1 = phi(vv4E9D,vv4E9D)
          if _t509F then goto ASSIGN50A3 else goto ASSIGN5225
        ASSIGN50A3:  preds = [COND50A1]
          bool _t50A2#1 = true;
          goto JOIN50A6
        JOIN50A6:  preds = [ASSIGN50A3,ASSIGN5226]
          bool _t50A4#1 = phi(_t50A2,_t50A5)
          if _t50A4 then goto ASSIGN50A9 else goto JOIN50BA
        ASSIGN50A9:  preds = [COND50A7]
          string _t50A8#1 = "(i#";
          string _t50AA#1 = " @ ";
          string _t50AC#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID4E8B,_t50A8,iter4E87,_t50AA,pos4E89,_t50AC);
          string _t50AF#1 = "nfs=";
          string _t50B1#1 = " > nfsMax=";
          string _t50B3#1 = " || trav=";
          string _t50B5#1 = " > travMax=";
          string _t50B7#1 = " =>DIE\n";
          Print<[string,int,string,int,string,real,string,real,string]>(_t50AF,nfs4E91,_t50B1,nfsMax4E6B,_t50B3,trav4E93,_t50B5,travMax4E69,_t50B7);
          goto JOIN50BA
        JOIN50BA:  preds = [MASSIGN50B9,COND50A7]
          die
          goto JOIN50BC
        JOIN50BC:  preds = [*DIE50BB,COND509B]
          goto JOIN50BD
        JOIN50BD:  preds = [JOIN50BC,COND5098]
          tensor[3] _t50BE#3 = fStep50BF (pos4E89);
          tensor[3] step51B7#3 = VScale<3>(sfs4E79,_t50BE);
          tensor[3] pos51BA#2 = VAdd<3>(pos4E89,step51B7);
          real op1_e3_l_551BD#1 = VDot<3>(_t50BE,_t50BE);
          real r51C1#1 = RMul(sfs4E79,sfs4E79);
          real op1_e3_l_651C0#1 = RMul(r51C1,op1_e3_l_551BD);
          real op1_e3_l_751C5#1 = Sqrt(op1_e3_l_651C0);
          real op1_e3_l_1151C8#3 = RDiv(op1_e3_l_751C5,tipd4E65);
          real op1_e3_l_1251CB#1 = RSub(mvmt4E95,op1_e3_l_1151C8);
          real op1_e3_l_1451CE#1 = RMul(hist4E7B,op1_e3_l_1251CB);
          real mvmt51D1#2 = RAdd(op1_e3_l_1151C8,op1_e3_l_1451CE);
          bool _t51D4#1 = GT<real>(mvmt51D1,fsEps4E73);
          if _t51D4 then goto ASSIGN51D9 else goto ASSIGN5222
        ASSIGN51D9:  preds = [COND51D6]
          real trav51D7#1 = RAdd(trav4E93,op1_e3_l_1151C8);
          int _t51DA#1 = 1;
          int nfs51DC#1 = IAdd(nfs4E91,_t51DA);
          goto JOIN51E4
        JOIN51E4:  preds = [ASSIGN51DD,ASSIGN5223]
          real mvmt51DE#2 = phi(mvmt51D1,mvmt51DF)
          real trav51E0#1 = phi(trav51D7,_t4EBA)
          int nfs51E1#1 = phi(nfs51DC,nfs4E91)
          bool found51E2#2 = phi(found4E8F,found51E3)
          bool _t51E5#1 = GT<int>(verb4E77,_t5094);
          if _t51E5 then goto JOIN51E9 else goto JOIN51E9
        JOIN51E9:  preds = [COND51E7,COND51E7]
          bool _t51E8#1 = phi(vv4E9D,vv4E9D)
          if _t51E8 then goto ASSIGN51EC else goto ASSIGN5220
        ASSIGN51EC:  preds = [COND51EA]
          bool _t51EB#1 = true;
          goto JOIN51EF
        JOIN51EF:  preds = [ASSIGN51EC,ASSIGN5221]
          bool _t51ED#1 = phi(_t51EB,_t51EE)
          if _t51ED then goto ASSIGN51F2 else goto JOIN5201
        ASSIGN51F2:  preds = [COND51F0]
          string _t51F1#1 = "(i#";
          string _t51F3#1 = " @ ";
          string _t51F5#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID4E8B,_t51F1,iter4E87,_t51F3,pos51BA,_t51F5);
          string _t51F8#1 = "step=";
          string _t51FA#1 = "; mvmt=";
          string _t51FC#1 = " => found=";
          string _t51FE#1 = "\n";
          Print<[string,tensor[3],string,real,string,bool,string]>(_t51F8,step51B7,_t51FA,mvmt51DE,_t51FC,found51E2,_t51FE);
          goto JOIN5201
        JOIN5201:  preds = [MASSIGN5200,COND51F0]
          goto JOIN5212
        JOIN5212:  preds = [JOIN5201,JOIN599D]
          int born5202#1 = phi(born4E99,born5203)
          real closest5204#1 = phi(closest4E97,closest5205)
          real mvmt5206#1 = phi(mvmt51DE,mvmt5207)
          real trav5208#1 = phi(trav51E0,trav5209)
          int nfs520A#1 = phi(nfs51E1,nfs4E91)
          bool found520B#1 = phi(found51E2,found4E8F)
          tensor[3] step520C#1 = phi(step51B7,step520D)
          real hh520E#1 = phi(hh4E8D,hh520F)
          tensor[3] pos5210#2 = phi(pos51BA,pos5211)
          self.pos = pos5210;
          self._pos = pos5210;
          self.hh = hh520E;
          self.step = step520C;
          self.found = found520B;
          self.nfs = nfs520A;
          self.trav = trav5208;
          self.mvmt = mvmt5206;
          self.closest = closest5204;
          self.born = born5202;
          self.first = vv4E9D;
          active
        ASSIGN5220:  preds = [COND51EA]
          int _t521F#1 = 1;
          bool _t51EE#1 = GT<int>(verb4E77,_t521F);
          goto JOIN51EF
        ASSIGN5222:  preds = [COND51D6]
          bool found51E3#1 = true;
          real mvmt51DF#1 = 0.1e1;
          goto JOIN51E4
        ASSIGN5225:  preds = [COND50A1]
          int _t5224#1 = 1;
          bool _t50A5#1 = GT<int>(verb4E77,_t5224);
          goto JOIN50A6
        ASSIGN5228:  preds = [COND5093]
          int _t5227#25 = 0;
          bool _t5229#1 = EQ<int>(_t5227,fDim4E7F);
          if _t5229 then goto SAVE522C else goto JOIN522E
        SAVE522C:  preds = [COND522B]
          self.pos = pos4E89;
          stabilize
          goto JOIN522E
        JOIN522E:  preds = [*STABILIZE522D,COND522B]
          tensor[3] _t522F#3 = fStep50BF (pos4E89);
          tensor[3] step5231#7 = VScale<3>(sfs4E79,_t522F);
          tensor[3] pos5234#22 = VAdd<3>(pos4E89,step5231);
          real op1_e3_l_45237#1 = VDot<3>(_t522F,_t522F);
          real r523B#2 = RMul(sfs4E79,sfs4E79);
          real op1_e3_l_5523A#1 = RMul(r523B,op1_e3_l_45237);
          real op1_e3_l_6523F#1 = Sqrt(op1_e3_l_5523A);
          real op1_e3_l_75242#1 = RDiv(op1_e3_l_6523F,tipd4E65);
          real trav5245#5 = RAdd(trav4E93,op1_e3_l_75242);
          point[] _t5248#1 = SphereQuery<3,point>(pos5234,rad4E85);
        FOREACH524B:  preds = [ASSIGN5249,NEXT52EB]
          foreach (P524A in _t5248) on exit goto ASSIGN5345
            int nn52E9#3 = phi(_t5227,nn52E8)
            tensor[3] force52E3#6 = phi(_t4EBC,force52E2)
            real oldE5298#4 = phi(_t4EBA,oldE5297)
          tensor[3] _t524C#1 = P524A.pos;
          tensor[3] op1_e3_l_9524E#5 = VSub<3>(_t524C,pos5234);
          real op1_e3_l_115251#1 = VDot<3>(op1_e3_l_9524E,op1_e3_l_9524E);
          real op1_e3_l_125254#3 = Sqrt(op1_e3_l_115251);
          real _t5257#1 = RDiv(op1_e3_l_125254,tipd4E65);
          bool _t525A#1 = LT<real>(_t5257,fsEps4E73);
          if _t525A then goto ASSIGN525E else goto JOIN5264
        ASSIGN525E:  preds = [COND525C]
          real _t525D#1 = P524A.ID;
          bool _t525F#1 = LTE<real>(ID4E8B,_t525D);
          if _t525F then goto DIE5262 else goto JOIN5263
        DIE5262:  preds = [COND5261]
          die
          goto JOIN5263
        JOIN5263:  preds = [*DIE5262,COND5261]
          goto JOIN5264
        JOIN5264:  preds = [JOIN5263,COND525C]
          real _t5265#12 = RDiv(op1_e3_l_125254,rad4E85);
          real _t5268#2 = 0.2e1;
          real _t526A#2 = 0.3e1;
          real _t526C#2 = RDiv(_t5268,_t526A);
          bool _t526F#2 = LT<real>(_t5265,_t526C);
          if _t526F then goto ASSIGN5273 else goto ASSIGN5318
        ASSIGN5273:  preds = [COND5271]
          real _t5272#1 = 0.1e1;
          real _t5274#1 = -0.5646e1;
          real _t5276#1 = 0.119835e2;
          real _t5278#1 = -0.113535e2;
          real _t527A#1 = 0.40550625e1;
          real op1_e3_l_58527C#1 = RMul(_t527A,_t5265);
          real op1_e3_l_60527F#1 = RAdd(_t5278,op1_e3_l_58527C);
          real op1_e3_l_615282#1 = RMul(_t5265,op1_e3_l_60527F);
          real op1_e3_l_635285#1 = RAdd(_t5276,op1_e3_l_615282);
          real op1_e3_l_645288#1 = RMul(_t5265,op1_e3_l_635285);
          real op1_e3_l_66528B#1 = RAdd(_t5274,op1_e3_l_645288);
          real op1_e3_l_67528E#1 = RMul(_t5265,op1_e3_l_66528B);
          real _t5291#1 = RAdd(_t5272,op1_e3_l_67528E);
          goto JOIN5296
        JOIN5296:  preds = [ASSIGN5293,JOIN5343]
          real _t5294#1 = phi(_t5291,_t5295)
          real oldE5297#1 = RAdd(oldE5298,_t5294);
          if _t526F then goto ASSIGN529D else goto ASSIGN52ED
        ASSIGN529D:  preds = [COND529B]
          real _t529C#1 = -0.5646e1;
          real _t529E#1 = 0.23967e2;
          real _t52A0#1 = -0.340605e2;
          real _t52A2#1 = 0.1622025e2;
          real op1_e3_l_4452A4#1 = RMul(_t52A2,_t5265);
          real op1_e3_l_4652A7#1 = RAdd(_t52A0,op1_e3_l_4452A4);
          real op1_e3_l_4752AA#1 = RMul(_t5265,op1_e3_l_4652A7);
          real op1_e3_l_4952AD#1 = RAdd(_t529E,op1_e3_l_4752AA);
          real op1_e3_l_5052B0#1 = RMul(_t5265,op1_e3_l_4952AD);
          real _t52B3#1 = RAdd(_t529C,op1_e3_l_5052B0);
          goto JOIN52B8
        JOIN52B8:  preds = [ASSIGN52B5,JOIN5316]
          real _t52B6#1 = phi(_t52B3,_t52B7)
          real _t52B9#2 = 0.1e1;
          real op1_e3_l_1452BB#1 = RDiv(_t52B9,rad4E85);
          real r52BF#1 = TensorIndex<tensor[3],[0]>(op1_e3_l_9524E);
          real r52C0#3 = RMul(_t52B6,op1_e3_l_1452BB);
          real r52C1#1 = RMul(r52C0,r52BF);
          real r52C2#1 = TensorIndex<tensor[3],[1]>(op1_e3_l_9524E);
          real r52C3#1 = RMul(r52C0,r52C2);
          real r52C4#1 = TensorIndex<tensor[3],[2]>(op1_e3_l_9524E);
          real r52C5#1 = RMul(r52C0,r52C4);
          real r52D1#3 = RDiv(_t52B9,op1_e3_l_125254);
          real r52D3#1 = RMul(r52D1,r52C1);
          real r52D5#1 = RMul(r52D1,r52C3);
          real r52D7#1 = RMul(r52D1,r52C5);
          tensor[3] op1_e3_l_2552CF#1 = <tensor[3]>[r52D3,r52D5,r52D7];
          tensor[3] force52E2#1 = VAdd<3>(force52E3,op1_e3_l_2552CF);
          int _t52E6#1 = 1;
          int nn52E8#1 = IAdd(nn52E9,_t52E6);
          goto FOREACH524B
        ASSIGN52ED:  preds = [COND529B]
          real _t52EC#1 = 0.1e1;
          bool _t52EE#1 = LT<real>(_t5265,_t52EC);
          if _t52EE then goto ASSIGN52F2 else goto JOIN5316
        ASSIGN52F2:  preds = [COND52F0]
          real _t52F1#1 = 0.1234567901e-1;
          real _t52F3#2 = 0.486e1;
          real _t52F5#1 = -0.1458e2;
          real _t52F7#1 = 0.1458e2;
          real op1_e3_l_4252F9#1 = RMul(_t526A,_t5265);
          real op1_e3_l_7352FC#4 = RSub(op1_e3_l_4252F9,_t5268);
          real op1_e3_l_7452FF#1 = RMul(_t52F3,op1_e3_l_7352FC);
          real op1_e3_l_765302#1 = RSub(_t52F7,op1_e3_l_7452FF);
          real op1_e3_l_775305#1 = RMul(op1_e3_l_7352FC,op1_e3_l_765302);
          real op1_e3_l_795308#1 = RAdd(_t52F5,op1_e3_l_775305);
          real op1_e3_l_80530B#1 = RMul(op1_e3_l_7352FC,op1_e3_l_795308);
          real op1_e3_l_82530E#1 = RAdd(_t52F3,op1_e3_l_80530B);
          real r5312#1 = RMul(_t52F1,op1_e3_l_7352FC);
          real _t5311#1 = RMul(r5312,op1_e3_l_82530E);
          goto JOIN5316
        JOIN5316:  preds = [ASSIGN5315,COND52F0]
          real _t52B7#1 = phi(_t5311,_t4EBA)
          goto JOIN52B8
        ASSIGN5318:  preds = [COND5271]
          real _t5317#1 = 0.1e1;
          bool _t5319#1 = LT<real>(_t5265,_t5317);
          if _t5319 then goto ASSIGN531D else goto JOIN5343
        ASSIGN531D:  preds = [COND531B]
          real _t531C#1 = -0.1e-2;
          real _t531E#1 = 0.9e-1;
          real _t5320#1 = -0.54e0;
          real _t5322#1 = 0.1215e1;
          real _t5324#1 = 0.972e0;
          real op1_e3_l_505326#5 = RSub(_t5265,_t526C);
          real op1_e3_l_515329#1 = RMul(_t5324,op1_e3_l_505326);
          real op1_e3_l_62532C#1 = RSub(_t5322,op1_e3_l_515329);
          real op1_e3_l_64532F#1 = RMul(op1_e3_l_62532C,op1_e3_l_505326);
          real op1_e3_l_755332#1 = RAdd(_t5320,op1_e3_l_64532F);
          real op1_e3_l_775335#1 = RMul(op1_e3_l_755332,op1_e3_l_505326);
          real op1_e3_l_985338#1 = RAdd(_t531E,op1_e3_l_775335);
          real r533C#1 = RMul(op1_e3_l_985338,op1_e3_l_505326);
          real op1_e3_l_101533B#1 = RMul(r533C,op1_e3_l_505326);
          real _t5340#1 = RAdd(_t531C,op1_e3_l_101533B);
          goto JOIN5343
        JOIN5343:  preds = [ASSIGN5342,COND531B]
          real _t5295#1 = phi(_t5340,_t4EBA)
          goto JOIN5296
        ASSIGN5345:  preds = [FOREACH524B]
          bool _t5344#1 = EQ<int>(_t5227,nn52E9);
          if _t5344 then goto ASSIGN5348 else goto JOIN5628
        ASSIGN5348:  preds = [COND5346]
          bool _t5347#1 = GT<int>(pcp4E7D,_t5227);
          if _t5347 then goto ASSIGN534B else goto JOIN5354
        ASSIGN534B:  preds = [COND5349]
          bool _t534A#1 = GT<int>(iter4E87,_t5227);
          if _t534A then goto ASSIGN534E else goto JOIN5352
        ASSIGN534E:  preds = [COND534C]
          int _t534D#1 = IMod(iter4E87,pcp4E7D);
          bool _t534F#1 = EQ<int>(_t5227,_t534D);
          goto JOIN5352
        JOIN5352:  preds = [ASSIGN5350,COND534C]
          bool _t5351#1 = phi(_t534F,vv4E9D)
          goto JOIN5354
        JOIN5354:  preds = [JOIN5352,COND5349]
          bool _t5353#1 = phi(_t5351,vv4E9D)
          if _t5353 then goto ASSIGN5357 else goto JOIN5363
        ASSIGN5357:  preds = [COND5355]
          int _t5356#1 = IDiv(iter4E87,pcp4E7D);
          int _t5358#2 = 2;
          int _t535A#1 = IMod(_t5356,_t5358);
          int _t535C#1 = IMul(_t535A,_t5358);
          int _t535E#1 = 1;
          int _t5360#1 = ISub(_t535C,_t535E);
          goto JOIN5363
        JOIN5363:  preds = [ASSIGN5361,COND5355]
          int _t5362#1 = phi(_t5360,_t5227)
          bool _t5364#1 = GT<int>(_t5362,_t5227);
          if _t5364 then goto ASSIGN5368 else goto JOIN536A
        ASSIGN5368:  preds = [COND5366]
          bool _t5367#1 = LT<int>(born4E99,nnmax4E83);
          goto JOIN536A
        JOIN536A:  preds = [ASSIGN5368,COND5366]
          bool _t5369#1 = phi(_t5367,vv4E9D)
          bool _t536B#1 = BNot(_t5369);
          if _t536B then goto SAVE536E else goto JOIN5373
        SAVE536E:  preds = [COND536D]
          self.pos = pos5234;
          self._pos = pos5234;
          self.step = step5231;
          self.trav = trav5245;
          active
          goto JOIN5373
        JOIN5373:  preds = [*ACTIVE5372,COND536D]
          tensor[3,3] _t5374#3 = fPerp5375 (pos5234);
          tensor[3] _t546A#3 = <tensor[3]>[tipd4E65,_t4EBA,_t4EBA];
          tensor[3] projParam546D#3 = ProjectLast<tensor[3,3],[0]>(_t5374);
          real vdot546E#1 = VDot<3>(projParam546D,_t546A);
          tensor[3] projParam546F#3 = ProjectLast<tensor[3,3],[1]>(_t5374);
          real vdot5470#1 = VDot<3>(projParam546F,_t546A);
          tensor[3] projParam5471#3 = ProjectLast<tensor[3,3],[2]>(_t5374);
          real vdot5472#1 = VDot<3>(projParam5471,_t546A);
          tensor[3] noff0546C#3 = <tensor[3]>[vdot546E,vdot5470,vdot5472];
          tensor[3] _t547B#3 = <tensor[3]>[_t4EBA,tipd4E65,_t4EBA];
          real vdot547F#1 = VDot<3>(projParam546D,_t547B);
          real vdot5481#1 = VDot<3>(projParam546F,_t547B);
          real vdot5483#1 = VDot<3>(projParam5471,_t547B);
          tensor[3] noff1547D#3 = <tensor[3]>[vdot547F,vdot5481,vdot5483];
          tensor[3] _t548C#3 = <tensor[3]>[_t4EBA,_t4EBA,tipd4E65];
          real vdot5490#1 = VDot<3>(projParam546D,_t548C);
          real vdot5492#1 = VDot<3>(projParam546F,_t548C);
          real vdot5494#1 = VDot<3>(projParam5471,_t548C);
          tensor[3] noff2548E#3 = <tensor[3]>[vdot5490,vdot5492,vdot5494];
          real op1_e3_l_4549D#1 = VDot<3>(noff0546C,noff0546C);
          real _t54A0#1 = Sqrt(op1_e3_l_4549D);
          real op1_e3_l_454A3#1 = VDot<3>(noff1547D,noff1547D);
          real _t54A6#1 = Sqrt(op1_e3_l_454A3);
          bool _t54A9#1 = GT<real>(_t54A0,_t54A6);
          if _t54A9 then goto JOIN54AD else goto JOIN54AD
        JOIN54AD:  preds = [COND54AB,COND54AB]
          tensor[3] _t54AC#3 = phi(noff0546C,noff1547D)
          real op1_e3_l_154AE#1 = VDot<3>(_t54AC,_t54AC);
          real _t54B1#1 = Sqrt(op1_e3_l_154AE);
          real op1_e3_l_454B4#1 = VDot<3>(noff2548E,noff2548E);
          real _t54B7#1 = Sqrt(op1_e3_l_454B4);
          bool _t54BA#1 = GT<real>(_t54B1,_t54B7);
          if _t54BA then goto JOIN54BE else goto JOIN54BE
        JOIN54BE:  preds = [COND54BC,COND54BC]
          tensor[3] _t54BD#5 = phi(_t54AC,noff2548E)
          real op1_e3_l_654BF#1 = VDot<3>(_t54BD,_t54BD);
          real op1_e3_l_754C2#1 = Sqrt(op1_e3_l_654BF);
          real realLit54C6#2 = 0.1e1;
          real op1_e3_l_854C5#3 = RDiv(realLit54C6,op1_e3_l_754C2);
          real r54CB#1 = TensorIndex<tensor[3],[0]>(_t54BD);
          real r54CC#1 = RMul(tipd4E65,r54CB);
          real r54CD#1 = RMul(r54CC,op1_e3_l_854C5);
          real r54CE#1 = TensorIndex<tensor[3],[1]>(_t54BD);
          real r54CF#1 = RMul(tipd4E65,r54CE);
          real r54D0#1 = RMul(r54CF,op1_e3_l_854C5);
          real r54D1#1 = TensorIndex<tensor[3],[2]>(_t54BD);
          real r54D2#1 = RMul(tipd4E65,r54D1);
          real r54D3#1 = RMul(r54D2,op1_e3_l_854C5);
          tensor[3] op1_e3_l_954CA#1 = <tensor[3]>[r54CD,r54D0,r54D3];
          tensor[3] v54E0#1 = VAdd<3>(op1_e3_l_954CA,pos4E89);
          tensor[3] npos54DF#2 = VAdd<3>(v54E0,step5231);
          tensor[3] _t54E4#1 = fStep50BF (npos54DF);
          tensor[3] op1_e3_l_1354E6#1 = VScale<3>(sfs4E79,_t54E4);
          tensor[3] npos54E9#5 = VAdd<3>(npos54DF,op1_e3_l_1354E6);
          bool _t54F0#2 = GT<int>(verb4E77,_t5227);
          if _t54F0 then goto JOIN54F4 else goto JOIN54F4
        JOIN54F4:  preds = [COND54F2,COND54F2]
          bool _t54F3#1 = phi(vv4E9D,vv4E9D)
          if _t54F3 then goto ASSIGN54F7 else goto ASSIGN59F3
        ASSIGN54F7:  preds = [COND54F5]
          bool _t54F6#1 = true;
          goto JOIN54FA
        JOIN54FA:  preds = [ASSIGN54F7,ASSIGN59F4]
          bool _t54F8#1 = phi(_t54F6,_t54F9)
          if _t54F8 then goto ASSIGN54FD else goto JOIN5526
        ASSIGN54FD:  preds = [COND54FB]
          string _t54FC#1 = "(i#";
          string _t54FE#1 = " @ ";
          string _t5500#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID4E8B,_t54FC,iter4E87,_t54FE,pos5234,_t5500);
          string _t5503#1 = " 0==nn =>NEW(";
          string _t5505#1 = ") w/ ID=";
          real _t5507#1 = 0.1e7;
          real _t5509#1 = VIndex<3,0>(npos54E9);
          real _t550B#1 = urnd4DF7 (_t5509);
          real _t550D#1 = VIndex<3,1>(npos54E9);
          real _t550F#1 = urnd4DF7 (_t550D);
          real _t5511#1 = VIndex<3,2>(npos54E9);
          real _t5513#1 = urnd4DF7 (_t5511);
          real r5516#1 = RAdd(_t550B,_t550F);
          real _t5515#1 = RAdd(r5516,_t5513);
          real _t551C#1 = MathFn<fmod>(_t5515,realLit54C6);
          real _t551E#1 = RMul(_t5507,_t551C);
          real _t5521#1 = MathFn<floor>(_t551E);
          string _t5523#1 = "\n";
          Print<[string,tensor[3],string,real,string]>(_t5503,npos54E9,_t5505,_t5521,_t5523);
          goto JOIN5526
        JOIN5526:  preds = [MASSIGN5525,COND54FB]
          tensor[3] op1_e3_l_85527#2 = VSub<3>(pos5234,_t4EBC);
          real op1_e3_l_10552A#1 = VDot<3>(op1_e3_l_85527,op1_e3_l_85527);
          real _t552D#2 = Sqrt(op1_e3_l_10552A);
          bool _t5530#1 = LT<real>(_t552D,_t4EC7);
          if _t5530 then goto ASSIGN5534 else goto JOIN5538
        ASSIGN5534:  preds = [COND5532]
          real _t5533#1 = 0.3e1;
          bool _t5535#1 = GT<real>(_t552D,_t5533);
          goto JOIN5538
        JOIN5538:  preds = [ASSIGN5536,COND5532]
          bool _t5537#1 = phi(_t5535,vv4E9D)
          if _t5537 then goto ASSIGN553B else goto JOIN5601
        ASSIGN553B:  preds = [COND5539]
          real x553A#5 = VIndex<3,0>(pos5234);
          real y553C#6 = VIndex<3,1>(pos5234);
          real z553E#6 = VIndex<3,2>(pos5234);
          real _t5540#6 = 0.2e1;
          int _t5542#1 = 2;
          real op1_e3_l_65544#2 = RMul(x553A,x553A);
          real op1_e3_l_75547#2 = RMul(y553C,y553C);
          real op1_e3_l_8554A#11 = RMul(z553E,z553E);
          real r554E#1 = RAdd(op1_e3_l_65544,op1_e3_l_75547);
          real op1_e3_l_9554D#2 = RAdd(r554E,op1_e3_l_8554A);
          real op1_e3_l_115552#7 = Cos(op1_e3_l_9554D);
          real r5556#1 = RMul(_t5540,x553A);
          real r5557#1 = RMul(r5556,op1_e3_l_8554A);
          real _t5555#1 = RMul(r5557,op1_e3_l_115552);
          real r555D#1 = RMul(_t5540,y553C);
          real r555E#1 = RMul(r555D,op1_e3_l_8554A);
          real _t555C#1 = RMul(r555E,op1_e3_l_115552);
          real op1_e3_l_145563#3 = RMul(z553E,op1_e3_l_8554A);
          real op1_e3_l_205568#8 = Sin(op1_e3_l_9554D);
          real r556C#1 = RMul(_t5540,op1_e3_l_145563);
          real op1_e3_l_21556B#1 = RMul(r556C,op1_e3_l_115552);
          real r5571#1 = RMul(_t5540,z553E);
          real op1_e3_l_225570#1 = RMul(r5571,op1_e3_l_205568);
          real _t5575#1 = RAdd(op1_e3_l_21556B,op1_e3_l_225570);
          tensor[3] g5578#2 = <tensor[3]>[_t5555,_t555C,_t5575];
          real _t557A#5 = -0.4e1;
          real r557D#1 = RMul(_t557A,op1_e3_l_65544);
          real r557E#1 = RMul(r557D,op1_e3_l_8554A);
          real op1_e3_l_24557C#1 = RMul(r557E,op1_e3_l_205568);
          real r5584#1 = RMul(_t5540,op1_e3_l_8554A);
          real op1_e3_l_255583#2 = RMul(r5584,op1_e3_l_115552);
          real _t5588#1 = RAdd(op1_e3_l_24557C,op1_e3_l_255583);
          real r558C#2 = RMul(_t557A,x553A);
          real r558D#1 = RMul(r558C,y553C);
          real r558E#1 = RMul(r558D,op1_e3_l_8554A);
          real _t558B#2 = RMul(r558E,op1_e3_l_205568);
          real r5596#1 = RMul(r558C,op1_e3_l_145563);
          real op1_e3_l_235594#1 = RMul(r5596,op1_e3_l_205568);
          real r559C#1 = RMul(_t4EC7,x553A);
          real r559D#1 = RMul(r559C,z553E);
          real op1_e3_l_24559B#1 = RMul(r559D,op1_e3_l_115552);
          real _t55A2#2 = RAdd(op1_e3_l_235594,op1_e3_l_24559B);
          real r55A8#1 = RMul(_t557A,op1_e3_l_75547);
          real r55A9#1 = RMul(r55A8,op1_e3_l_8554A);
          real op1_e3_l_2455A7#1 = RMul(r55A9,op1_e3_l_205568);
          real _t55AE#1 = RAdd(op1_e3_l_2455A7,op1_e3_l_255583);
          real r55B2#1 = RMul(_t557A,y553C);
          real r55B3#1 = RMul(r55B2,op1_e3_l_145563);
          real op1_e3_l_2355B1#1 = RMul(r55B3,op1_e3_l_205568);
          real r55B9#1 = RMul(_t4EC7,y553C);
          real r55BA#1 = RMul(r55B9,z553E);
          real op1_e3_l_2455B8#1 = RMul(r55BA,op1_e3_l_115552);
          real _t55BF#2 = RAdd(op1_e3_l_2355B1,op1_e3_l_2455B8);
          real _t55C4#1 = 0.1e2;
          real op1_e3_l_1855C6#1 = RMul(op1_e3_l_8554A,op1_e3_l_8554A);
          real r55CC#1 = RMul(_t557A,op1_e3_l_1855C6);
          real op1_e3_l_3155CB#1 = RMul(r55CC,op1_e3_l_205568);
          real r55D1#1 = RMul(_t55C4,op1_e3_l_8554A);
          real op1_e3_l_3255D0#1 = RMul(r55D1,op1_e3_l_115552);
          real op1_e3_l_3355D5#1 = RMul(_t5540,op1_e3_l_205568);
          real r55D9#1 = RAdd(op1_e3_l_3155CB,op1_e3_l_3255D0);
          real _t55D8#1 = RAdd(r55D9,op1_e3_l_3355D5);
          tensor[3,3] hess55DF#1 = <tensor[3,3]>[_t5588,_t558B,_t55A2,_t558B,_t55AE,_t55BF,_t55A2,_t55BF,_t55D8];
          real[3] _t55E1#1 = EigenVals3x3(hess55DF);
          real _t55E3#1 = Subscript<real[3]>(_t55E1,_t5542);
          real op1_e3_l_355E5#1 = VDot<3>(g5578,g5578);
          real op1_e3_l_455E8#1 = Sqrt(op1_e3_l_355E5);
          real op1_e3_l_555EB#1 = RNeg(_t55E3);
          real op1_e3_l_655EE#1 = RAdd(fBias4E63,op1_e3_l_455E8);
          real str55F1#1 = RDiv(op1_e3_l_555EB,op1_e3_l_655EE);
          bool _t55F4#1 = GT<real>(str55F1,fStrTh4E5F);
          if _t55F4 then goto ASSIGN55F8 else goto JOIN55FF
        ASSIGN55F8:  preds = [COND55F6]
          bool _t55F7#1 = GTE<real>(_t4EBA,fMaskTh4E61);
          if _t55F7 then goto ASSIGN55FB else goto JOIN55FD
        ASSIGN55FB:  preds = [COND55F9]
          bool _t55FA#1 = true;
          goto JOIN55FD
        JOIN55FD:  preds = [ASSIGN55FB,COND55F9]
          bool _t55FC#1 = phi(_t55FA,vv4E9D)
          goto JOIN55FF
        JOIN55FF:  preds = [JOIN55FD,COND55F6]
          bool _t55FE#1 = phi(_t55FC,vv4E9D)
          goto JOIN5601
        JOIN5601:  preds = [JOIN55FF,COND5539]
          bool _t5600#1 = phi(_t55FE,vv4E9D)
          if _t5600 then goto NEW5603 else goto JOIN5609
        NEW5603:  preds = [COND5602]
          new point(npos54E9,hh4E8D);
          int _t5604#1 = 1;
          int born5606#1 = IAdd(born4E99,_t5604);
          goto JOIN5609
        JOIN5609:  preds = [ASSIGN5607,COND5602]
          int born5608#1 = phi(born5606,born4E99)
          if _t54F0 then goto JOIN560C else goto JOIN560C
        JOIN560C:  preds = [COND560A,COND560A]
          bool _t560B#1 = phi(vv4E9D,vv4E9D)
          if _t560B then goto ASSIGN560F else goto ASSIGN59F0
        ASSIGN560F:  preds = [COND560D]
          bool _t560E#1 = true;
          goto JOIN5612
        JOIN5612:  preds = [ASSIGN560F,ASSIGN59F1]
          bool _t5610#1 = phi(_t560E,_t5611)
          if _t5610 then goto ASSIGN5615 else goto JOIN5620
        ASSIGN5615:  preds = [COND5613]
          string _t5614#1 = "(i#";
          string _t5616#1 = " @ ";
          string _t5618#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID4E8B,_t5614,iter4E87,_t5616,pos5234,_t5618);
          string _t561B#1 = "nn=0; after birthing mvmt=";
          string _t561D#1 = "\n";
          Print<[string,real,string]>(_t561B,mvmt4E95,_t561D);
          goto JOIN5620
        JOIN5620:  preds = [MASSIGN561F,COND5613]
          self.pos = pos5234;
          self._pos = pos5234;
          self.step = step5231;
          self.trav = trav5245;
          self.born = born5608;
          active
          goto JOIN5628
        JOIN5628:  preds = [*ACTIVE5626,COND5346]
          int born5627#9 = phi(born4E99)
          tensor[3,3] _t5629#3 = fPerp5375 (pos5234);
          tensor[3] projParam562C#1 = ProjectLast<tensor[3,3],[0]>(_t5629);
          real vdot562D#2 = VDot<3>(projParam562C,force52E3);
          tensor[3] projParam562E#1 = ProjectLast<tensor[3,3],[1]>(_t5629);
          real vdot562F#2 = VDot<3>(projParam562E,force52E3);
          tensor[3] projParam5630#1 = ProjectLast<tensor[3,3],[2]>(_t5629);
          real vdot5631#2 = VDot<3>(projParam5630,force52E3);
          tensor[3] op1_e3_l_3562B#3 = <tensor[3]>[vdot562D,vdot562F,vdot5631];
          tensor[3] es563A#1 = VScale<3>(hh4E8D,op1_e3_l_3562B);
          real op1_e3_l_5563D#1 = VDot<3>(op1_e3_l_3562B,op1_e3_l_3562B);
          real r5641#1 = RMul(hh4E8D,hh4E8D);
          real op1_e3_l_65640#1 = RMul(r5641,op1_e3_l_5563D);
          real _t5645#2 = Sqrt(op1_e3_l_65640);
          bool _t5648#1 = GT<real>(_t5645,tipd4E65);
          if _t5648 then goto ASSIGN564D else goto JOIN5664
        ASSIGN564D:  preds = [COND564A]
          real op1_e3_l_10564B#1 = RDiv(tipd4E65,_t5645);
          real hh564E#4 = RMul(hh4E8D,op1_e3_l_10564B);
          real r5654#1 = RMul(hh564E,vdot562D);
          real r5656#1 = RMul(hh564E,vdot562F);
          real r5658#1 = RMul(hh564E,vdot5631);
          tensor[3] es5651#1 = <tensor[3]>[r5654,r5656,r5658];
          goto JOIN5664
        JOIN5664:  preds = [ASSIGN5661,COND564A]
          tensor[3] es5662#7 = phi(es5651,es563A)
          real hh5663#2 = phi(hh564E,hh4E8D)
          tensor[3] _t5665#1 = VAdd<3>(pos5234,es5662);
          tensor[3] _t566A#3 = fStep50BF (_t5665);
          tensor[3] fs566C#4 = VScale<3>(sfs4E79,_t566A);
          real op1_e3_l_5566F#1 = VDot<3>(_t566A,_t566A);
          real op1_e3_l_65672#1 = RMul(r523B,op1_e3_l_5566F);
          real op1_e3_l_75677#1 = VDot<3>(es5662,es5662);
          real op1_e3_l_8567A#1 = RMul(fsEps4E73,tipd4E65);
          real op1_e3_l_9567D#2 = Sqrt(op1_e3_l_75677);
          real op1_e3_l_105680#2 = Sqrt(op1_e3_l_65672);
          real op1_e3_l_115683#1 = RAdd(op1_e3_l_8567A,op1_e3_l_9567D);
          real _t5686#1 = RDiv(op1_e3_l_105680,op1_e3_l_115683);
          real _t5689#3 = 0.5e0;
          bool _t568B#1 = GT<real>(_t5686,_t5689);
          if _t568B then goto ASSIGN5690 else goto JOIN56C1
        ASSIGN5690:  preds = [COND568D]
          real hh568E#2 = RMul(hh5663,_t5689);
          bool _t5691#1 = GT<int>(verb4E77,_t5227);
          if _t5691 then goto JOIN5695 else goto JOIN5695
        JOIN5695:  preds = [COND5693,COND5693]
          bool _t5694#1 = phi(vv4E9D,vv4E9D)
          if _t5694 then goto ASSIGN5698 else goto ASSIGN59ED
        ASSIGN5698:  preds = [COND5696]
          bool _t5697#1 = true;
          goto JOIN569B
        JOIN569B:  preds = [ASSIGN5698,ASSIGN59EE]
          bool _t5699#1 = phi(_t5697,_t569A)
          if _t5699 then goto ASSIGN569E else goto JOIN56B8
        ASSIGN569E:  preds = [COND569C]
          string _t569D#1 = "(i#";
          string _t569F#1 = " @ ";
          string _t56A1#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID4E8B,_t569D,iter4E87,_t569F,pos5234,_t56A1);
          string _t56A4#1 = "nn=";
          string _t56A6#1 = "; |fs|/|es|=";
          real _t56A8#1 = RDiv(op1_e3_l_105680,op1_e3_l_9567D);
          string _t56AB#1 = " > 0.5; trying again with hh=";
          string _t56AD#1 = "; mvmt=";
          string _t56AF#3 = "\n";
          Print<[string,int,string,real,string,real,string,real,string]>(_t56A4,nn52E9,_t56A6,_t56A8,_t56AB,hh568E,_t56AD,mvmt4E95,_t56AF);
          string _t56B2#1 = "        fs=";
          Print<[string,tensor[3],string]>(_t56B2,fs566C,_t56AF);
          string _t56B5#1 = "        es=";
          Print<[string,tensor[3],string]>(_t56B5,es5662,_t56AF);
          goto JOIN56B8
        JOIN56B8:  preds = [MASSIGN56B7,COND569C]
          self.pos = pos5234;
          self._pos = pos5234;
          self.hh = hh568E;
          self.step = step5231;
          self.trav = trav5245;
          self.born = born5627;
          active
          goto JOIN56C1
        JOIN56C1:  preds = [*ACTIVE56BF,COND568D]
          real hh56C0#2 = phi(hh5663)
          tensor[3] v56C4#1 = VAdd<3>(pos5234,fs566C);
          tensor[3] pos56C2#7 = VAdd<3>(v56C4,es5662);
          point[] _t56C9#1 = SphereQuery<3,point>(pos56C2,rad4E85);
        FOREACH56CC:  preds = [ASSIGN56CA,NEXT5719]
          foreach (P56CB in _t56C9) on exit goto ASSIGN5748
            tensor[3] mno5711#4 = phi(_t4EBC,mno5710)
            real newE570B#6 = phi(_t4EBA,newE570A)
            int nn5717#9 = phi(_t5227,nn5716)
            real closest5205#3 = phi(rad4E85,closest570E)
          tensor[3] _t56CD#1 = P56CB.pos;
          tensor[3] op1_e3_l_1356CF#3 = VSub<3>(_t56CD,pos56C2);
          real op1_e3_l_1556D2#1 = VDot<3>(op1_e3_l_1356CF,op1_e3_l_1356CF);
          real _t56D5#2 = Sqrt(op1_e3_l_1556D2);
          real _t56D8#7 = RDiv(_t56D5,rad4E85);
          real _t56DB#1 = 0.2e1;
          real _t56DD#1 = 0.3e1;
          real _t56DF#2 = RDiv(_t56DB,_t56DD);
          bool _t56E2#1 = LT<real>(_t56D8,_t56DF);
          if _t56E2 then goto ASSIGN56E6 else goto ASSIGN571B
        ASSIGN56E6:  preds = [COND56E4]
          real _t56E5#1 = 0.1e1;
          real _t56E7#1 = -0.5646e1;
          real _t56E9#1 = 0.119835e2;
          real _t56EB#1 = -0.113535e2;
          real _t56ED#1 = 0.40550625e1;
          real op1_e3_l_7856EF#1 = RMul(_t56ED,_t56D8);
          real op1_e3_l_8056F2#1 = RAdd(_t56EB,op1_e3_l_7856EF);
          real op1_e3_l_8156F5#1 = RMul(_t56D8,op1_e3_l_8056F2);
          real op1_e3_l_8356F8#1 = RAdd(_t56E9,op1_e3_l_8156F5);
          real op1_e3_l_8456FB#1 = RMul(_t56D8,op1_e3_l_8356F8);
          real op1_e3_l_8656FE#1 = RAdd(_t56E7,op1_e3_l_8456FB);
          real op1_e3_l_875701#1 = RMul(_t56D8,op1_e3_l_8656FE);
          real _t5704#1 = RAdd(_t56E5,op1_e3_l_875701);
          goto JOIN5709
        JOIN5709:  preds = [ASSIGN5706,JOIN5746]
          real _t5707#1 = phi(_t5704,_t5708)
          real newE570A#1 = RAdd(newE570B,_t5707);
          real closest570E#1 = Min<real>(closest5205,_t56D5);
          tensor[3] mno5710#1 = VAdd<3>(mno5711,op1_e3_l_1356CF);
          int _t5714#1 = 1;
          int nn5716#1 = IAdd(nn5717,_t5714);
          goto FOREACH56CC
        ASSIGN571B:  preds = [COND56E4]
          real _t571A#1 = 0.1e1;
          bool _t571C#1 = LT<real>(_t56D8,_t571A);
          if _t571C then goto ASSIGN5720 else goto JOIN5746
        ASSIGN5720:  preds = [COND571E]
          real _t571F#1 = -0.1e-2;
          real _t5721#1 = 0.9e-1;
          real _t5723#1 = -0.54e0;
          real _t5725#1 = 0.1215e1;
          real _t5727#1 = 0.972e0;
          real op1_e3_l_675729#5 = RSub(_t56D8,_t56DF);
          real op1_e3_l_68572C#1 = RMul(_t5727,op1_e3_l_675729);
          real op1_e3_l_81572F#1 = RSub(_t5725,op1_e3_l_68572C);
          real op1_e3_l_835732#1 = RMul(op1_e3_l_81572F,op1_e3_l_675729);
          real op1_e3_l_965735#1 = RAdd(_t5723,op1_e3_l_835732);
          real op1_e3_l_985738#1 = RMul(op1_e3_l_965735,op1_e3_l_675729);
          real op1_e3_l_123573B#1 = RAdd(_t5721,op1_e3_l_985738);
          real r573F#1 = RMul(op1_e3_l_123573B,op1_e3_l_675729);
          real op1_e3_l_126573E#1 = RMul(r573F,op1_e3_l_675729);
          real _t5743#1 = RAdd(_t571F,op1_e3_l_126573E);
          goto JOIN5746
        JOIN5746:  preds = [ASSIGN5745,COND571E]
          real _t5708#1 = phi(_t5743,_t4EBA)
          goto JOIN5709
        ASSIGN5748:  preds = [FOREACH56CC]
          real _t5747#2 = IntToReal(nn5717);
          bool _t5749#2 = GT<int>(verb4E77,_t5227);
          if _t5749 then goto JOIN574D else goto JOIN574D
        JOIN574D:  preds = [COND574B,COND574B]
          bool _t574C#1 = phi(vv4E9D,vv4E9D)
          if _t574C then goto ASSIGN5750 else goto ASSIGN59EA
        ASSIGN5750:  preds = [COND574E]
          bool _t574F#1 = true;
          goto JOIN5753
        JOIN5753:  preds = [ASSIGN5750,ASSIGN59EB]
          bool _t5751#1 = phi(_t574F,_t5752)
          if _t5751 then goto ASSIGN5756 else goto JOIN5765
        ASSIGN5756:  preds = [COND5754]
          string _t5755#1 = "(i#";
          string _t5757#1 = " @ ";
          string _t5759#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID4E8B,_t5755,iter4E87,_t5757,pos56C2,_t5759);
          string _t575C#1 = "nn=";
          string _t575E#1 = "; oldE=";
          string _t5760#1 = " newE=";
          string _t5762#1 = "\n";
          Print<[string,int,string,real,string,real,string]>(_t575C,nn5717,_t575E,oldE5298,_t5760,newE570B,_t5762);
          goto JOIN5765
        JOIN5765:  preds = [MASSIGN5764,COND5754]
          real _t5766#2 = RSub(newE570B,oldE5298);
          tensor[3] _t5769#2 = VSub<3>(pos56C2,pos5234);
          tensor[3] op1_e3_l_17576C#1 = VNeg<3>(force52E3);
          real op1_e3_l_18576F#2 = VDot<3>(_t5769,op1_e3_l_17576C);
          real _t5772#1 = RMul(gdeTest4E6D,op1_e3_l_18576F);
          bool _t5775#1 = GT<real>(_t5766,_t5772);
          if _t5775 then goto ASSIGN577A else goto JOIN57C7
        ASSIGN577A:  preds = [COND5777]
          real hh5778#3 = RMul(hh56C0,gdeBack4E6F);
          bool _t577B#1 = EQ<real>(_t4EBA,hh5778);
          if _t577B then goto ASSIGN577F else goto JOIN5789
        ASSIGN577F:  preds = [COND577D]
          string _t577E#1 = "(i#";
          string _t5780#1 = " @ ";
          string _t5782#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID4E8B,_t577E,iter4E87,_t5780,pos56C2,_t5782);
          string _t5785#1 = "backtracked all the way to hh=0\n";
          Print<[string]>(_t5785);
          die
          goto JOIN5789
        JOIN5789:  preds = [*DIE5788,COND577D]
          if _t5749 then goto JOIN578C else goto JOIN578C
        JOIN578C:  preds = [COND578A,COND578A]
          bool _t578B#1 = phi(vv4E9D,vv4E9D)
          if _t578B then goto ASSIGN578F else goto ASSIGN59E7
        ASSIGN578F:  preds = [COND578D]
          bool _t578E#1 = true;
          goto JOIN5792
        JOIN5792:  preds = [ASSIGN578F,ASSIGN59E8]
          bool _t5790#1 = phi(_t578E,_t5791)
          if _t5790 then goto ASSIGN5795 else goto JOIN57BD
        ASSIGN5795:  preds = [COND5793]
          string _t5794#1 = "(i#";
          string _t5796#1 = " @ ";
          string _t5798#1 = "): ";
          Print<[real,string,int,string,tensor[3],string]>(ID4E8B,_t5794,iter4E87,_t5796,pos56C2,_t5798);
          string _t579B#1 = "nn=";
          string _t579D#1 = "; oldE=";
          string _t579F#1 = " newE=";
          string _t57A1#1 = "; backtracking; hh=";
          string _t57A3#1 = "; mvmt=";
          string _t57A5#7 = "\n";
          Print<[string,int,string,real,string,real,string,real,string,real,string]>(_t579B,nn5717,_t579D,oldE5298,_t579F,newE570B,_t57A1,hh5778,_t57A3,mvmt4E95,_t57A5);
          string _t57A8#1 = "      fs=";
          Print<[string,tensor[3],string]>(_t57A8,fs566C,_t57A5);
          string _t57AB#1 = "      es=";
          Print<[string,tensor[3],string]>(_t57AB,es5662,_t57A5);
          string _t57AE#1 = "      newE - oldE=";
          Print<[string,real,string]>(_t57AE,_t5766,_t57A5);
          string _t57B1#1 = "      force=";
          Print<[string,tensor[3],string]>(_t57B1,force52E3,_t57A5);
          string _t57B4#1 = "      dpos=";
          Print<[string,tensor[3],string]>(_t57B4,_t5769,_t57A5);
          string _t57B7#1 = "      0.5*(pos - oldpos).(-force)=";
          real _t57B9#1 = RMul(_t5689,op1_e3_l_18576F);
          Print<[string,real,string]>(_t57B7,_t57B9,_t57A5);
          goto JOIN57BD
        JOIN57BD:  preds = [MASSIGN57BC,COND5793]
          self.pos = pos5234;
          self._pos = pos5234;
          self.hh = hh5778;
          self.step = step5231;
          self.trav = trav5245;
          self.closest = closest5205;
          self.born = born5627;
          active
          goto JOIN57C7
        JOIN57C7:  preds = [*ACTIVE57C5,COND5777]
          real hh57C6#1 = phi(hh56C0)
          tensor[3] pos5211#8 = phi(pos56C2)
          real hh520F#2 = RMul(hh57C6,gdeOppor4E71);
          tensor[3] v57CA#1 = VAdd<3>(step5231,fs566C);
          tensor[3] step520D#3 = VAdd<3>(v57CA,es5662);
          real op1_e3_l_1257CE#1 = VDot<3>(step520D,step520D);
          real op1_e3_l_1357D1#1 = Sqrt(op1_e3_l_1257CE);
          real _t57D4#4 = RDiv(op1_e3_l_1357D1,tipd4E65);
          real trav5209#1 = RAdd(trav5245,_t57D4);
          real op1_e3_l_2557DB#1 = RSub(mvmt4E95,_t57D4);
          real op1_e3_l_2757DE#1 = RMul(hist4E7B,op1_e3_l_2557DB);
          real mvmt5207#1 = RAdd(_t57D4,op1_e3_l_2757DE);
          bool _t57E3#1 = LT<real>(_t57D4,pcmvEps4E75);
          if _t57E3 then goto ASSIGN57E7 else goto JOIN599D
        ASSIGN57E7:  preds = [COND57E5]
          bool _t57E6#3 = GT<int>(pcp4E7D,_t5227);
          if _t57E6 then goto ASSIGN57EA else goto JOIN57F3
        ASSIGN57EA:  preds = [COND57E8]
          bool _t57E9#1 = GT<int>(iter4E87,_t5227);
          if _t57E9 then goto ASSIGN57ED else goto JOIN57F1
        ASSIGN57ED:  preds = [COND57EB]
          int _t57EC#1 = IMod(iter4E87,pcp4E7D);
          bool _t57EE#1 = EQ<int>(_t5227,_t57EC);
          goto JOIN57F1
        JOIN57F1:  preds = [ASSIGN57EF,COND57EB]
          bool _t57F0#1 = phi(_t57EE,vv4E9D)
          goto JOIN57F3
        JOIN57F3:  preds = [JOIN57F1,COND57E8]
          bool _t57F2#1 = phi(_t57F0,vv4E9D)
          if _t57F2 then goto ASSIGN57F6 else goto JOIN5802
        ASSIGN57F6:  preds = [COND57F4]
          int _t57F5#1 = IDiv(iter4E87,pcp4E7D);
          int _t57F7#2 = 2;
          int _t57F9#1 = IMod(_t57F5,_t57F7);
          int _t57FB#1 = IMul(_t57F9,_t57F7);
          int _t57FD#1 = 1;
          int _t57FF#1 = ISub(_t57FB,_t57FD);
          goto JOIN5802
        JOIN5802:  preds = [ASSIGN5800,COND57F4]
          int _t5801#1 = phi(_t57FF,_t5227)
          bool _t5803#1 = NEQ<int>(_t5801,_t5227);
          if _t5803 then goto COND5806 else goto JOIN599C
        COND5806:  preds = [COND5805]
          if _t57E6 then goto ASSIGN5808 else goto JOIN5811
        ASSIGN5808:  preds = [COND5806]
          bool _t5807#1 = GT<int>(iter4E87,_t5227);
          if _t5807 then goto ASSIGN580B else goto JOIN580F
        ASSIGN580B:  preds = [COND5809]
          int _t580A#1 = IMod(iter4E87,pcp4E7D);
          bool _t580C#1 = EQ<int>(_t5227,_t580A);
          goto JOIN580F
        JOIN580F:  preds = [ASSIGN580D,COND5809]
          bool _t580E#1 = phi(_t580C,vv4E9D)
          goto JOIN5811
        JOIN5811:  preds = [JOIN580F,COND5806]
          bool _t5810#1 = phi(_t580E,vv4E9D)
          if _t5810 then goto ASSIGN5814 else goto JOIN5820
        ASSIGN5814:  preds = [COND5812]
          int _t5813#1 = IDiv(iter4E87,pcp4E7D);
          int _t5815#2 = 2;
          int _t5817#1 = IMod(_t5813,_t5815);
          int _t5819#1 = IMul(_t5817,_t5815);
          int _t581B#1 = 1;
          int _t581D#1 = ISub(_t5819,_t581B);
          goto JOIN5820
        JOIN5820:  preds = [ASSIGN581E,COND5812]
          int _t581F#1 = phi(_t581D,_t5227)
          bool _t5821#1 = GT<int>(_t581F,_t5227);
          if _t5821 then goto ASSIGN5825 else goto JOIN5831
        ASSIGN5825:  preds = [COND5823]
          bool _t5824#1 = LT<real>(newE570B,_t4EBA);
          if _t5824 then goto ASSIGN5828 else goto JOIN582F
        ASSIGN5828:  preds = [COND5826]
          bool _t5827#1 = LT<int>(nn5717,nnmin4E81);
          if _t5827 then goto ASSIGN582B else goto JOIN582D
        ASSIGN582B:  preds = [COND5829]
          bool _t582A#1 = LT<int>(born5627,nnmax4E83);
          goto JOIN582D
        JOIN582D:  preds = [ASSIGN582B,COND5829]
          bool _t582C#1 = phi(_t582A,vv4E9D)
          goto JOIN582F
        JOIN582F:  preds = [JOIN582D,COND5826]
          bool _t582E#1 = phi(_t582C,vv4E9D)
          goto JOIN5831
        JOIN5831:  preds = [JOIN582F,COND5823]
          bool _t5830#1 = phi(_t582E,vv4E9D)
          if _t5830 then goto ASSIGN583D else goto COND599E
        ASSIGN583D:  preds = [COND5832]
          real realLit5834#3 = 0.1e1;
          real r5835#3 = RDiv(realLit5834,_t5747);
          real r5836#1 = TensorIndex<tensor[3],[0]>(mno5711);
          real r5837#2 = RMul(r5835,r5836);
          real r5838#1 = TensorIndex<tensor[3],[1]>(mno5711);
          real r5839#2 = RMul(r5835,r5838);
          real r583A#1 = TensorIndex<tensor[3],[2]>(mno5711);
          real r583B#2 = RMul(r5835,r583A);
          tensor[3] op1_e3_l_65833#2 = <tensor[3]>[r5837,r5839,r583B];
          real op1_e3_l_85846#1 = VDot<3>(op1_e3_l_65833,op1_e3_l_65833);
          real op1_e3_l_95849#1 = Sqrt(op1_e3_l_85846);
          real op1_e3_l_11584C#3 = RDiv(realLit5834,op1_e3_l_95849);
          real r5853#1 = RMul(tipd4E65,r5837);
          real r5854#1 = RMul(r5853,op1_e3_l_11584C);
          real r5856#1 = RMul(tipd4E65,r5839);
          real r5857#1 = RMul(r5856,op1_e3_l_11584C);
          real r5859#1 = RMul(tipd4E65,r583B);
          real r585A#1 = RMul(r5859,op1_e3_l_11584C);
          tensor[3] op1_e3_l_125851#1 = <tensor[3]>[r5854,r5857,r585A];
          tensor[3] npos5866#2 = VSub<3>(pos5211,op1_e3_l_125851);
          tensor[3] _t5869#1 = fStep50BF (npos5866);
          tensor[3] op1_e3_l_16586B#1 = VScale<3>(sfs4E79,_t5869);
          tensor[3] npos586E#2 = VAdd<3>(npos5866,op1_e3_l_16586B);
          tensor[3] _t5871#1 = fStep50BF (npos586E);
          tensor[3] op1_e3_l_195873#1 = VScale<3>(sfs4E79,_t5871);
          tensor[3] npos5876#6 = VAdd<3>(npos586E,op1_e3_l_195873);
          bool birth587B#4 = true;
          int _t587D#2 = 2;
          bool _t587F#1 = EQ<int>(fDim4E7F,_t587D);
          if _t587F then goto ASSIGN5883 else goto JOIN58B6
        ASSIGN5883:  preds = [COND5881]
          int _t5882#1 = 4;
          bool _t5884#1 = GTE<int>(nn5717,_t5882);
          if _t5884 then goto ASSIGN5889 else goto JOIN58B4
        ASSIGN5889:  preds = [COND5886]
          real _t5887#1 = RMul(tipd4E65,mabd4E67);
          point[] _t588A#1 = SphereQuery<3,point>(npos5876,_t5887);
        FOREACH588D:  preds = [ASSIGN588B,NEXT588E]
          foreach (P588C in _t588A) on exit goto COND5890
            bool birth588F#2 = phi(birth587B,vv4E9D)
          goto FOREACH588D
        COND5890:  preds = [FOREACH588D]
          if birth588F then goto ASSIGN5892 else goto JOIN58B2
        ASSIGN5892:  preds = [COND5890]
          real _t5891#1 = VIndex<3,0>(pos5211);
          real _t5893#1 = urnd4DF7 (_t5891);
          real _t5895#1 = VIndex<3,1>(pos5211);
          real _t5897#1 = urnd4DF7 (_t5895);
          real _t5899#1 = VIndex<3,2>(pos5211);
          real _t589B#1 = urnd4DF7 (_t5899);
          real r589E#1 = RAdd(_t5893,_t5897);
          real _t589D#1 = RAdd(r589E,_t589B);
          real _t58A4#1 = MathFn<fmod>(_t589D,realLit5834);
          int _t58A6#1 = ISub(nnmin4E81,nn5717);
          real _t58A8#1 = IntToReal(_t58A6);
          real _t58AA#1 = IntToReal(nnmin4E81);
          real _t58AC#1 = RDiv(_t58A8,_t58AA);
          bool birth58AF#1 = LT<real>(_t58A4,_t58AC);
          goto JOIN58B2
        JOIN58B2:  preds = [ASSIGN58B0,COND5890]
          bool birth58B1#1 = phi(birth58AF,birth588F)
          goto JOIN58B4
        JOIN58B4:  preds = [JOIN58B2,COND5886]
          bool birth58B3#1 = phi(birth58B1,birth587B)
          goto JOIN58B6
        JOIN58B6:  preds = [JOIN58B4,COND5881]
          bool birth58B5#1 = phi(birth58B3,birth587B)
          if birth58B5 then goto ASSIGN58BA else goto JOIN5998
        ASSIGN58BA:  preds = [COND58B7]
          tensor[3] op1_e3_l_3358B8#2 = VSub<3>(npos5876,_t4EBC);
          real op1_e3_l_3558BB#1 = VDot<3>(op1_e3_l_3358B8,op1_e3_l_3358B8);
          real _t58BE#2 = Sqrt(op1_e3_l_3558BB);
          bool _t58C1#1 = LT<real>(_t58BE,_t4EC7);
          if _t58C1 then goto ASSIGN58C5 else goto JOIN58C9
        ASSIGN58C5:  preds = [COND58C3]
          real _t58C4#1 = 0.3e1;
          bool _t58C6#1 = GT<real>(_t58BE,_t58C4);
          goto JOIN58C9
        JOIN58C9:  preds = [ASSIGN58C7,COND58C3]
          bool _t58C8#1 = phi(_t58C6,vv4E9D)
          if _t58C8 then goto ASSIGN58CC else goto JOIN598E
        ASSIGN58CC:  preds = [COND58CA]
          real x58CB#5 = VIndex<3,0>(npos5876);
          real y58CD#6 = VIndex<3,1>(npos5876);
          real z58CF#6 = VIndex<3,2>(npos5876);
          real _t58D1#6 = 0.2e1;
          real op1_e3_l_658D3#2 = RMul(x58CB,x58CB);
          real op1_e3_l_758D6#2 = RMul(y58CD,y58CD);
          real op1_e3_l_858D9#11 = RMul(z58CF,z58CF);
          real r58DD#1 = RAdd(op1_e3_l_658D3,op1_e3_l_758D6);
          real op1_e3_l_958DC#2 = RAdd(r58DD,op1_e3_l_858D9);
          real op1_e3_l_1158E1#7 = Cos(op1_e3_l_958DC);
          real r58E5#1 = RMul(_t58D1,x58CB);
          real r58E6#1 = RMul(r58E5,op1_e3_l_858D9);
          real _t58E4#1 = RMul(r58E6,op1_e3_l_1158E1);
          real r58EC#1 = RMul(_t58D1,y58CD);
          real r58ED#1 = RMul(r58EC,op1_e3_l_858D9);
          real _t58EB#1 = RMul(r58ED,op1_e3_l_1158E1);
          real op1_e3_l_1458F2#3 = RMul(z58CF,op1_e3_l_858D9);
          real op1_e3_l_2058F7#8 = Sin(op1_e3_l_958DC);
          real r58FB#1 = RMul(_t58D1,op1_e3_l_1458F2);
          real op1_e3_l_2158FA#1 = RMul(r58FB,op1_e3_l_1158E1);
          real r5900#1 = RMul(_t58D1,z58CF);
          real op1_e3_l_2258FF#1 = RMul(r5900,op1_e3_l_2058F7);
          real _t5904#1 = RAdd(op1_e3_l_2158FA,op1_e3_l_2258FF);
          tensor[3] g5907#2 = <tensor[3]>[_t58E4,_t58EB,_t5904];
          real _t5909#5 = -0.4e1;
          real r590C#1 = RMul(_t5909,op1_e3_l_658D3);
          real r590D#1 = RMul(r590C,op1_e3_l_858D9);
          real op1_e3_l_24590B#1 = RMul(r590D,op1_e3_l_2058F7);
          real r5913#1 = RMul(_t58D1,op1_e3_l_858D9);
          real op1_e3_l_255912#2 = RMul(r5913,op1_e3_l_1158E1);
          real _t5917#1 = RAdd(op1_e3_l_24590B,op1_e3_l_255912);
          real r591B#2 = RMul(_t5909,x58CB);
          real r591C#1 = RMul(r591B,y58CD);
          real r591D#1 = RMul(r591C,op1_e3_l_858D9);
          real _t591A#2 = RMul(r591D,op1_e3_l_2058F7);
          real r5925#1 = RMul(r591B,op1_e3_l_1458F2);
          real op1_e3_l_235923#1 = RMul(r5925,op1_e3_l_2058F7);
          real r592B#1 = RMul(_t4EC7,x58CB);
          real r592C#1 = RMul(r592B,z58CF);
          real op1_e3_l_24592A#1 = RMul(r592C,op1_e3_l_1158E1);
          real _t5931#2 = RAdd(op1_e3_l_235923,op1_e3_l_24592A);
          real r5937#1 = RMul(_t5909,op1_e3_l_758D6);
          real r5938#1 = RMul(r5937,op1_e3_l_858D9);
          real op1_e3_l_245936#1 = RMul(r5938,op1_e3_l_2058F7);
          real _t593D#1 = RAdd(op1_e3_l_245936,op1_e3_l_255912);
          real r5941#1 = RMul(_t5909,y58CD);
          real r5942#1 = RMul(r5941,op1_e3_l_1458F2);
          real op1_e3_l_235940#1 = RMul(r5942,op1_e3_l_2058F7);
          real r5948#1 = RMul(_t4EC7,y58CD);
          real r5949#1 = RMul(r5948,z58CF);
          real op1_e3_l_245947#1 = RMul(r5949,op1_e3_l_1158E1);
          real _t594E#2 = RAdd(op1_e3_l_235940,op1_e3_l_245947);
          real _t5953#1 = 0.1e2;
          real op1_e3_l_185955#1 = RMul(op1_e3_l_858D9,op1_e3_l_858D9);
          real r595B#1 = RMul(_t5909,op1_e3_l_185955);
          real op1_e3_l_31595A#1 = RMul(r595B,op1_e3_l_2058F7);
          real r5960#1 = RMul(_t5953,op1_e3_l_858D9);
          real op1_e3_l_32595F#1 = RMul(r5960,op1_e3_l_1158E1);
          real op1_e3_l_335964#1 = RMul(_t58D1,op1_e3_l_2058F7);
          real r5968#1 = RAdd(op1_e3_l_31595A,op1_e3_l_32595F);
          real _t5967#1 = RAdd(r5968,op1_e3_l_335964);
          tensor[3,3] hess596E#1 = <tensor[3,3]>[_t5917,_t591A,_t5931,_t591A,_t593D,_t594E,_t5931,_t594E,_t5967];
          real[3] _t5970#1 = EigenVals3x3(hess596E);
          real _t5972#1 = Subscript<real[3]>(_t5970,_t587D);
          real op1_e3_l_35974#1 = VDot<3>(g5907,g5907);
          real op1_e3_l_45977#1 = Sqrt(op1_e3_l_35974);
          real op1_e3_l_5597A#1 = RNeg(_t5972);
          real op1_e3_l_6597D#1 = RAdd(fBias4E63,op1_e3_l_45977);
          real str5980#1 = RDiv(op1_e3_l_5597A,op1_e3_l_6597D);
          bool _t5983#1 = GT<real>(str5980,fStrTh4E5F);
          if _t5983 then goto ASSIGN5987 else goto JOIN598C
        ASSIGN5987:  preds = [COND5985]
          bool _t5986#1 = GTE<real>(_t4EBA,fMaskTh4E61);
          if _t5986 then goto JOIN598A else goto JOIN598A
        JOIN598A:  preds = [COND5988,COND5988]
          bool _t5989#1 = phi(birth587B,vv4E9D)
          goto JOIN598C
        JOIN598C:  preds = [JOIN598A,COND5985]
          bool _t598B#1 = phi(_t5989,vv4E9D)
          goto JOIN598E
        JOIN598E:  preds = [JOIN598C,COND58CA]
          bool _t598D#1 = phi(_t598B,vv4E9D)
          if _t598D then goto NEW5990 else goto JOIN5996
        NEW5990:  preds = [COND598F]
          new point(npos5876,hh520F);
          int _t5991#1 = 1;
          int born5993#1 = IAdd(born5627,_t5991);
          goto JOIN5996
        JOIN5996:  preds = [ASSIGN5994,COND598F]
          int born5995#1 = phi(born5993,born5627)
          goto JOIN5998
        JOIN5998:  preds = [JOIN5996,COND58B7]
          int born5997#1 = phi(born5995,born5627)
          goto JOIN599A
        JOIN599A:  preds = [JOIN5998,JOIN59E5]
          int born5999#1 = phi(born5997,born5627)
          goto JOIN599C
        JOIN599C:  preds = [JOIN599A,COND5805]
          int born599B#1 = phi(born5999,born5627)
          goto JOIN599D
        JOIN599D:  preds = [JOIN599C,COND57E5]
          int born5203#1 = phi(born599B,born5627)
          goto JOIN5212
        COND599E:  preds = [COND5832]
          if _t57E6 then goto ASSIGN59A0 else goto JOIN59A9
        ASSIGN59A0:  preds = [COND599E]
          bool _t599F#1 = GT<int>(iter4E87,_t5227);
          if _t599F then goto ASSIGN59A3 else goto JOIN59A7
        ASSIGN59A3:  preds = [COND59A1]
          int _t59A2#1 = IMod(iter4E87,pcp4E7D);
          bool _t59A4#1 = EQ<int>(_t5227,_t59A2);
          goto JOIN59A7
        JOIN59A7:  preds = [ASSIGN59A5,COND59A1]
          bool _t59A6#1 = phi(_t59A4,vv4E9D)
          goto JOIN59A9
        JOIN59A9:  preds = [JOIN59A7,COND599E]
          bool _t59A8#1 = phi(_t59A6,vv4E9D)
          if _t59A8 then goto ASSIGN59AC else goto JOIN59B8
        ASSIGN59AC:  preds = [COND59AA]
          int _t59AB#1 = IDiv(iter4E87,pcp4E7D);
          int _t59AD#2 = 2;
          int _t59AF#1 = IMod(_t59AB,_t59AD);
          int _t59B1#1 = IMul(_t59AF,_t59AD);
          int _t59B3#1 = 1;
          int _t59B5#1 = ISub(_t59B1,_t59B3);
          goto JOIN59B8
        JOIN59B8:  preds = [ASSIGN59B6,COND59AA]
          int _t59B7#1 = phi(_t59B5,_t5227)
          bool _t59B9#1 = LT<int>(_t59B7,_t5227);
          if _t59B9 then goto ASSIGN59BD else goto JOIN59E5
        ASSIGN59BD:  preds = [COND59BB]
          bool _t59BC#1 = GT<real>(newE570B,_t4EBA);
          if _t59BC then goto ASSIGN59C0 else goto JOIN59E4
        ASSIGN59C0:  preds = [COND59BE]
          bool _t59BF#1 = GT<int>(nn5717,nnmax4E83);
          if _t59BF then goto ASSIGN59C3 else goto JOIN59E3
        ASSIGN59C3:  preds = [COND59C1]
          real _t59C2#1 = VIndex<3,0>(pos5211);
          real _t59C4#1 = urnd4DF7 (_t59C2);
          real _t59C6#1 = VIndex<3,1>(pos5211);
          real _t59C8#1 = urnd4DF7 (_t59C6);
          real _t59CA#1 = VIndex<3,2>(pos5211);
          real _t59CC#1 = urnd4DF7 (_t59CA);
          real r59CF#1 = RAdd(_t59C4,_t59C8);
          real _t59CE#1 = RAdd(r59CF,_t59CC);
          real _t59D3#1 = 0.1e1;
          real _t59D5#1 = MathFn<fmod>(_t59CE,_t59D3);
          int _t59D7#1 = ISub(nn5717,nnmax4E83);
          real _t59D9#1 = IntToReal(_t59D7);
          real _t59DB#1 = RDiv(_t59D9,_t5747);
          bool _t59DE#1 = LT<real>(_t59D5,_t59DB);
          if _t59DE then goto DIE59E1 else goto JOIN59E2
        DIE59E1:  preds = [COND59E0]
          die
          goto JOIN59E2
        JOIN59E2:  preds = [*DIE59E1,COND59E0]
          goto JOIN59E3
        JOIN59E3:  preds = [JOIN59E2,COND59C1]
          goto JOIN59E4
        JOIN59E4:  preds = [JOIN59E3,COND59BE]
          goto JOIN59E5
        JOIN59E5:  preds = [JOIN59E4,COND59BB]
          goto JOIN599A
        ASSIGN59E7:  preds = [COND578D]
          int _t59E6#1 = 1;
          bool _t5791#1 = GT<int>(verb4E77,_t59E6);
          goto JOIN5792
        ASSIGN59EA:  preds = [COND574E]
          int _t59E9#1 = 1;
          bool _t5752#1 = GT<int>(verb4E77,_t59E9);
          goto JOIN5753
        ASSIGN59ED:  preds = [COND5696]
          int _t59EC#1 = 1;
          bool _t569A#1 = GT<int>(verb4E77,_t59EC);
          goto JOIN569B
        ASSIGN59F0:  preds = [COND560D]
          int _t59EF#1 = 1;
          bool _t5611#1 = GT<int>(verb4E77,_t59EF);
          goto JOIN5612
        ASSIGN59F3:  preds = [COND54F5]
          int _t59F2#1 = 1;
          bool _t54F9#1 = GT<int>(verb4E77,_t59F2);
          goto JOIN54FA
        ASSIGN59F6:  preds = [COND4FA5]
          int _t59F5#1 = 1;
          bool _t4FA9#1 = GT<int>(verb4E77,_t59F5);
          goto JOIN4FAA
        ASSIGN59F9:  preds = [COND4EA7]
          int _t59F8#1 = 1;
          bool _t4EAB#1 = GT<int>(verb4E77,_t59F8);
          goto JOIN4EAC
    end update
  end point
## initial strand creation
  COLLECTION
    ENTRY59FB:  preds = []
      tensor[3][] ipos59FC#2 = globals.ipos4D51;
      int _t59FE#1 = 0;
      int _t5A00#1 = Length<tensor[3]>(ipos59FC);
      int _t5A02#1 = 1;
      int _t5A04#1 = ISub(_t5A00,_t5A02);
      int[] _t5A06#1 = Range(_t59FE,_t5A04);
    FOREACH5A09:  preds = [ASSIGN5A07,NEXT5A0F]
      foreach (ii5A08 in _t5A06) on exit goto RETURN5A10
      tensor[3] _t5A0A#1 = Subscript<tensor[3][]>(ipos59FC,ii5A08);
      real _t5A0C#1 = 0.1e1;
      new point(_t5A0A,_t5A0C);
      goto FOREACH5A09
    RETURN5A10:  preds = [FOREACH5A09]
      return
## global update
  ENTRY5A11:  preds = []
    real geoEps5A12#3 = globals.geoEps4D48;
    real mvmtEps5A14#3 = globals.mvmtEps4D49;
    real rpcEps5A16#3 = globals.rpcEps4D4A;
    real pchist5A18#1 = globals.pchist4D56;
    int iter5A1A#4 = globals.iter4D57;
    real rpc5A1C#1 = globals.rpc4D58;
    int popLast5A1E#1 = globals.popLast4D59;
    int pop5A20#5 = NumStrands<active>;
    bool _t5A22#1 = NEQ<int>(pop5A20,popLast5A1E);
    if _t5A22 then goto ASSIGN5A26 else goto ASSIGN5AD8
  ASSIGN5A26:  preds = [COND5A24]
    int _t5A25#1 = 1;
    goto JOIN5A29
  JOIN5A29:  preds = [ASSIGN5A26,ASSIGN5AD8]
    int _t5A27#2 = phi(_t5A25,_t5A28)
    real _t5A2A#2 = IntToReal(_t5A27);
    real op1_e3_l_35A2C#1 = RSub(rpc5A1C,_t5A2A);
    real op1_e3_l_45A2F#1 = RMul(pchist5A18,op1_e3_l_35A2C);
    real rpc5A32#5 = RAdd(_t5A2A,op1_e3_l_45A2F);
    globals.rpc4D58 = rpc5A32;
    point[] P5A36#6 = Strands<point,all>;
    (bool res5A3E#1) = all(MAP all5A38 (P5A36));
    real _t5A40#1 = 0.1e3;
    (real res5A4F#1) = sum<real>(MAP mean5A42 (P5A36));
    int num5A51#1 = NumStrands<all>;
    real rNum5A53#5 = IntToReal(num5A51);
    real op1_e3_l_35A55#1 = RDiv(res5A4F,rNum5A53);
    real percfound5A58#1 = RMul(_t5A40,op1_e3_l_35A55);
    (real res5A61#2) = sum<real>(MAP mean5A5B (P5A36));
    real mean5A63#2 = RDiv(res5A61,rNum5A53);
    (real res5A73#1) = sum<real>(MAP mean5A66 (P5A36,mean5A63));
    real op1_e3_l_45A75#1 = RDiv(res5A73,rNum5A53);
    real op1_e3_l_55A78#1 = Sqrt(op1_e3_l_45A75);
    real op1_e3_l_65A7B#1 = RMul(op1_e3_l_55A78,rNum5A53);
    real covcl5A7E#4 = RDiv(op1_e3_l_65A7B,res5A61);
    (real res5A87#4) = max<real>(MAP max5A81 (P5A36));
    string _t5A89#1 = "======= finished iter ";
    string _t5A8B#1 = " w/ ";
    string _t5A8D#3 = ")";
    string _t5A8F#1 = "; %found=";
    string _t5A91#1 = "; mean(hh)=";
    (real res5A99#1) = sum<real>(MAP mean5A93 (P5A36));
    real mean5A9B#1 = RDiv(res5A99,rNum5A53);
    string _t5A9E#1 = "; mean(cl)=";
    string _t5AA0#3 = "; COV(cl)=";
    string _t5AA2#3 = "; max(mvmt)=";
    string _t5AA4#1 = "; pc=";
    string _t5AA6#3 = "; rpc=";
    string _t5AA8#3 = "\n";
    Print<[string,int,string,int,string,string,real,string,real,string,real,string,real,string,real,string,int,string,real,string]>(_t5A89,iter5A1A,_t5A8B,pop5A20,_t5A8D,_t5A8F,percfound5A58,_t5A91,mean5A9B,_t5A9E,mean5A63,_t5AA0,covcl5A7E,_t5AA2,res5A87,_t5AA4,_t5A27,_t5AA6,rpc5A32,_t5AA8);
    if res5A3E then goto ASSIGN5AAD else goto ASSIGN5AD7
  ASSIGN5AAD:  preds = [COND5AAB]
    bool _t5AAC#1 = LT<real>(covcl5A7E,geoEps5A12);
    if _t5AAC then goto ASSIGN5AB0 else goto ASSIGN5AD6
  ASSIGN5AB0:  preds = [COND5AAE]
    bool _t5AAF#1 = LT<real>(res5A87,mvmtEps5A14);
    if _t5AAF then goto ASSIGN5AB3 else goto ASSIGN5AD5
  ASSIGN5AB3:  preds = [COND5AB1]
    bool _t5AB2#1 = LT<real>(rpc5A32,rpcEps5A16);
    goto JOIN5AB6
  JOIN5AB6:  preds = [ASSIGN5AB3,ASSIGN5AD5]
    bool _t5AB4#1 = phi(_t5AB2,_t5AB5)
    goto JOIN5AB9
  JOIN5AB9:  preds = [JOIN5AB6,ASSIGN5AD6]
    bool _t5AB7#1 = phi(_t5AB4,_t5AB8)
    goto JOIN5ABC
  JOIN5ABC:  preds = [JOIN5AB9,ASSIGN5AD7]
    bool _t5ABA#1 = phi(_t5AB7,_t5ABB)
    if _t5ABA then goto ASSIGN5ABF else goto ASSIGN5ACF
  ASSIGN5ABF:  preds = [COND5ABD]
    string _t5ABE#1 = "======= Stabilizing ";
    string _t5AC0#1 = " (iter ";
    string _t5AC2#3 = " < ";
    Print<[string,int,string,int,string,string,real,string,real,string,real,string,real,string,real,string,real,string]>(_t5ABE,pop5A20,_t5AC0,iter5A1A,_t5A8D,_t5AA0,covcl5A7E,_t5AC2,geoEps5A12,_t5AA2,res5A87,_t5AC2,mvmtEps5A14,_t5AA6,rpc5A32,_t5AC2,rpcEps5A16,_t5AA8);
    StabilizeAll;
    goto JOIN5AC6
  JOIN5AC6:  preds = [MASSIGN5AC5,MASSIGN5AD4]
    int _t5AC7#1 = 1;
    int iter5AC9#1 = IAdd(iter5A1A,_t5AC7);
    globals.iter4D57 = iter5AC9;
    globals.popLast4D59 = pop5A20;
    continue
  ASSIGN5ACF:  preds = [COND5ABD]
    string _t5ACE#1 = "======= Stabilizing ";
    string _t5AD0#1 = " (iter ";
    string _t5AD2#3 = " > ";
    Print<[string,int,string,int,string,string,real,string,real,string,real,string,real,string,real,string,real,string]>(_t5ACE,pop5A20,_t5AD0,iter5A1A,_t5A8D,_t5AA0,covcl5A7E,_t5AD2,geoEps5A12,_t5AA2,res5A87,_t5AD2,mvmtEps5A14,_t5AA6,rpc5A32,_t5AD2,rpcEps5A16,_t5AA8);
    goto JOIN5AC6
  ASSIGN5AD5:  preds = [COND5AB1]
    bool _t5AB5#1 = false;
    goto JOIN5AB6
  ASSIGN5AD6:  preds = [COND5AAE]
    bool _t5AB8#1 = false;
    goto JOIN5AB9
  ASSIGN5AD7:  preds = [COND5AAB]
    bool _t5ABB#1 = false;
    goto JOIN5ABC
  ASSIGN5AD8:  preds = [COND5A24]
    int _t5A28#1 = 0;
    goto JOIN5A29
#### end program ####
##### TreeIR: after low-to-tree translation ####
//***** PROPERTIES *****
  GlobalInit StabilizeAll GlobalReduce StrandSets GlobalUpdate NewStrands StrandCommunication StrandsMayDie HasInputs HasGlobals ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
//***** CONSTS *****
//***** INPUTS *****
input femData(Mesh) meshData;
input femData(Space) 0space07C6_intermedateGlobal;
input femData(FemFunc) 0data07C8_intermedateGlobal;
input real fStrTh;
input real fMaskTh;
input real fBias;
input real tipd;
input real mabd;
input real travMax;
input int nfsMax;
input real gdeTest;
input real gdeBack;
input real gdeOppor;
input real fsEps;
input real geoEps;
input real mvmtEps;
input real rpcEps;
input real pcmvEps;
input real isoval;
input int verb;
input real sfs;
input real hist;
input int pcp;
input tensor[3][] ipos;
input int fDim;
//***** CONST INIT *****
  {
    globals.fMaskTh = 0.e0;
    globals.fBias = 0.e0;
    globals.tipd = 0.1e1;
    globals.mabd = 0.75e0;
    globals.travMax = 0.1e2;
    globals.nfsMax = 20;
    globals.gdeTest = 0.5e0;
    globals.gdeBack = 0.5e0;
    globals.gdeOppor = 0.12e1;
    globals.geoEps = 0.1e0;
    globals.mvmtEps = 0.1e-1;
    globals.rpcEps = 0.1e-1;
    globals.pcmvEps = 0.3e0;
    globals.isoval = 0.e0;
    globals.verb = 0;
    globals.sfs = 0.5e0;
    globals.hist = 0.5e0;
    globals.pcp = 5;
    globals.fDim = 2;
  }
//***** GLOBALS *****
global int nnmin;
global int nnmax;
global real rad;
global real pchist;
varying global int iter;
varying global real rpc;
varying global int popLast;
//***** FUNCTIONS *****
  function real urnd (globals, real p_x_0) {
    if (EQ<real>(p_x_0,0.e0)) {
      return 0.e0
    }
    real l_l2_1 = MathFn<log2>(Abs<real>(p_x_0));
    real l__Pow_2_2 = RMul(0.2e1,0.2e1);
    real l__Pow5__3 = RMul(0.2e1,RMul(l__Pow_2_2,l__Pow_2_2));
    real l__Pow10__4 = RMul(l__Pow5__3,l__Pow5__3);
    return MathFn<fmod>(RMul(MathFn<pow>(0.2e1,RSub(RSub(l_l2_1,MathFn<floor>(l_l2_1)),0.1e1)),RAdd(RMul(l__Pow10__4,l__Pow10__4),IntToReal(IMul(2,globals.iter)))),0.1e1)
  }
  function tensor[3] fStep (&tensor[3] p_s_5) {
    bool l__t_30;
    tensor[3][3] l_E_23;
    real[3] l_evals_22;
    real l_x_6 = VIndex<3,4,0>(LOAD_0(p_s_5));
    real l_y_7 = VIndex<3,4,1>(LOAD_0(p_s_5));
    real l_z_8 = VIndex<3,4,2>(LOAD_0(p_s_5));
    real l_op1_e3_l_6_9 = RMul(l_x_6,l_x_6);
    real l_op1_e3_l_7_10 = RMul(l_y_7,l_y_7);
    real l_op1_e3_l_8_11 = RMul(l_z_8,l_z_8);
    real l_op1_e3_l_9_12 = RAdd(RAdd(l_op1_e3_l_6_9,l_op1_e3_l_7_10),l_op1_e3_l_8_11);
    real l_op1_e3_l_11_13 = Cos(l_op1_e3_l_9_12);
    real l_op1_e3_l_14_14 = RMul(l_z_8,l_op1_e3_l_8_11);
    real l_op1_e3_l_20_15 = Sin(l_op1_e3_l_9_12);
    real l_op1_e3_l_25_16 = RMul(RMul(0.2e1,l_op1_e3_l_8_11),l_op1_e3_l_11_13);
    real l_r_17 = RMul(-0.4e1,l_x_6);
    real l__t_18 = RMul(RMul(RMul(l_r_17,l_y_7),l_op1_e3_l_8_11),l_op1_e3_l_20_15);
    real l__t_19 = RAdd(RMul(RMul(l_r_17,l_op1_e3_l_14_14),l_op1_e3_l_20_15),RMul(RMul(RMul(0.4e1,l_x_6),l_z_8),l_op1_e3_l_11_13));
    real l__t_20 = RAdd(RMul(RMul(RMul(-0.4e1,l_y_7),l_op1_e3_l_14_14),l_op1_e3_l_20_15),RMul(RMul(RMul(0.4e1,l_y_7),l_z_8),l_op1_e3_l_11_13));
    tensor[3,3] t_21 = <tensor[3,3]>[RAdd(RMul(RMul(RMul(-0.4e1,l_op1_e3_l_6_9),l_op1_e3_l_8_11),l_op1_e3_l_20_15),l_op1_e3_l_25_16),l__t_18,l__t_19,l__t_18,RAdd(RMul(RMul(RMul(-0.4e1,l_op1_e3_l_7_10),l_op1_e3_l_8_11),l_op1_e3_l_20_15),l_op1_e3_l_25_16),l__t_20,l__t_19,l__t_20,RAdd(RAdd(RMul(RMul(-0.4e1,RMul(l_op1_e3_l_8_11,l_op1_e3_l_8_11)),l_op1_e3_l_20_15),RMul(RMul(0.1e2,l_op1_e3_l_8_11),l_op1_e3_l_11_13)),RMul(0.2e1,l_op1_e3_l_20_15))];
    (l_evals_22,l_E_23) = EigenVecs3x3(TensorRef<[3,3]>(t_21));
    &tensor[3] l__t_24 = Subscript<tensor[3][3]>(l_E_23,2);
    real l_op1_e3_l_6_25 = RNeg(RDiv(0.1e1,Subscript<real[3]>(l_evals_22,2)));
    real l_op1_e3_l_7_26 = VDot<3,4>(LOAD_0(l__t_24),VEC3{4}(RMul(RMul(RMul(0.2e1,l_x_6),l_op1_e3_l_8_11),l_op1_e3_l_11_13),RMul(RMul(RMul(0.2e1,l_y_7),l_op1_e3_l_8_11),l_op1_e3_l_11_13),RAdd(RMul(RMul(0.2e1,l_op1_e3_l_14_14),l_op1_e3_l_11_13),RMul(RMul(0.2e1,l_z_8),l_op1_e3_l_20_15))));
    vec3{4} v_27 = VEC3{4}(RMul(RMul(l_op1_e3_l_6_25,TensorIndex<&tensor[3],[0]>(l__t_24)),l_op1_e3_l_7_26),RMul(RMul(l_op1_e3_l_6_25,TensorIndex<&tensor[3],[1]>(l__t_24)),l_op1_e3_l_7_26),RMul(RMul(l_op1_e3_l_6_25,TensorIndex<&tensor[3],[2]>(l__t_24)),l_op1_e3_l_7_26));
    real l__t_28 = VIndex<3,4,0>(v_27);
    vec3{4} v_29 = v_27;
    if (BNot(EQ<real>(l__t_28,l__t_28))) {
      l__t_30 = true;
    } else {
      bool l__t_32;
      real l__t_31 = VIndex<3,4,1>(v_29);
      if (BNot(EQ<real>(l__t_31,l__t_31))) {
        l__t_32 = true;
      } else {
        real l__t_33 = VIndex<3,4,2>(v_29);
        l__t_32 = BNot(EQ<real>(l__t_33,l__t_33));
      }
      l__t_30 = l__t_32;
    }
    if (l__t_30) {
      tensor[3] _arg_34 = PACK(VEC3{4}(+inf,+inf,+inf));
      return _arg_34
    }
    tensor[3] _arg_35 = PACK(v_29);
    return _arg_35
  }
  function tensor[3,3] fPerp (&tensor[3] p_s_36) {
    tensor[3][3] l__t_54;
    real[3] l_evals_53;
    real l_x_37 = VIndex<3,4,0>(LOAD_0(p_s_36));
    real l_y_38 = VIndex<3,4,1>(LOAD_0(p_s_36));
    real l_z_39 = VIndex<3,4,2>(LOAD_0(p_s_36));
    real l_op1_e3_l_11_40 = RMul(l_x_37,l_x_37);
    real l_op1_e3_l_12_41 = RMul(l_y_38,l_y_38);
    real l_op1_e3_l_13_42 = RMul(l_z_39,l_z_39);
    real l_op1_e3_l_14_43 = RAdd(RAdd(l_op1_e3_l_11_40,l_op1_e3_l_12_41),l_op1_e3_l_13_42);
    real l_op1_e3_l_17_44 = Sin(l_op1_e3_l_14_43);
    real l_op1_e3_l_23_45 = Cos(l_op1_e3_l_14_43);
    real l_op1_e3_l_25_46 = RMul(RMul(0.2e1,l_op1_e3_l_13_42),l_op1_e3_l_23_45);
    real l_r_47 = RMul(-0.4e1,l_x_37);
    real l__t_48 = RMul(RMul(RMul(l_r_47,l_y_38),l_op1_e3_l_13_42),l_op1_e3_l_17_44);
    real l_op1_e3_l_16_49 = RMul(l_z_39,l_op1_e3_l_13_42);
    real l__t_50 = RAdd(RMul(RMul(l_r_47,l_op1_e3_l_16_49),l_op1_e3_l_17_44),RMul(RMul(RMul(0.4e1,l_x_37),l_z_39),l_op1_e3_l_23_45));
    real l__t_51 = RAdd(RMul(RMul(RMul(-0.4e1,l_y_38),l_op1_e3_l_16_49),l_op1_e3_l_17_44),RMul(RMul(RMul(0.4e1,l_y_38),l_z_39),l_op1_e3_l_23_45));
    tensor[3,3] t_52 = <tensor[3,3]>[RAdd(RMul(RMul(RMul(-0.4e1,l_op1_e3_l_11_40),l_op1_e3_l_13_42),l_op1_e3_l_17_44),l_op1_e3_l_25_46),l__t_48,l__t_50,l__t_48,RAdd(RMul(RMul(RMul(-0.4e1,l_op1_e3_l_12_41),l_op1_e3_l_13_42),l_op1_e3_l_17_44),l_op1_e3_l_25_46),l__t_51,l__t_50,l__t_51,RAdd(RAdd(RMul(RMul(-0.4e1,RMul(l_op1_e3_l_13_42,l_op1_e3_l_13_42)),l_op1_e3_l_17_44),RMul(RMul(0.1e2,l_op1_e3_l_13_42),l_op1_e3_l_23_45)),RMul(0.2e1,l_op1_e3_l_17_44))];
    (l_evals_53,l__t_54) = EigenVecs3x3(TensorRef<[3,3]>(t_52));
    &tensor[3] l_E2_55 = Subscript<tensor[3][3]>(l__t_54,2);
    vec3{4} v_56 = VScale<3,4>(TensorIndex<&tensor[3],[0]>(l_E2_55),LOAD_0(l_E2_55));
    vec3{4} v_57 = VScale<3,4>(TensorIndex<&tensor[3],[1]>(l_E2_55),LOAD_0(l_E2_55));
    vec3{4} v_58 = VScale<3,4>(TensorIndex<&tensor[3],[2]>(l_E2_55),LOAD_0(l_E2_55));
    real l_r_59 = RSub(0.1e1,VIndex<3,4,0>(v_56));
    real l_r_60 = RSub(0.e0,VIndex<3,4,1>(v_56));
    real l_r_61 = RSub(0.e0,VIndex<3,4,2>(v_56));
    vec3{4} v_62 = VEC3{4}(l_r_59,l_r_60,l_r_61);
    real l_r_63 = RSub(0.e0,VIndex<3,4,0>(v_57));
    real l_r_64 = RSub(0.1e1,VIndex<3,4,1>(v_57));
    real l_r_65 = RSub(0.e0,VIndex<3,4,2>(v_57));
    vec3{4} v_66 = VEC3{4}(l_r_63,l_r_64,l_r_65);
    real l_r_67 = RSub(0.e0,VIndex<3,4,0>(v_58));
    real l_r_68 = RSub(0.e0,VIndex<3,4,1>(v_58));
    real l_r_69 = RSub(0.1e1,VIndex<3,4,2>(v_58));
    vec3{4} v_70 = VEC3{4}(l_r_67,l_r_68,l_r_69);
    real l_t_71 = RAdd(RAdd(VDot<3,4>(v_62,v_62),VDot<3,4>(v_66,v_66)),VDot<3,4>(v_70,v_70));
    if (BNot(EQ<real>(l_t_71,l_t_71))) {
      tensor[3,3] t_72 = <tensor[3,3]>[0.e0,0.e0,0.e0,0.e0,0.e0,0.e0,0.e0,0.e0,0.e0];
      return t_72
    }
    tensor[3,3] t_73 = <tensor[3,3]>[l_r_59,l_r_60,l_r_61,l_r_63,l_r_64,l_r_65,l_r_67,l_r_68,l_r_69];
    return t_73
  }
  function bool all (world, id(point) p_P_74) {
    return p_P_74.found
  }
  function real mean (world, id(point) p_P_75) {
    real l__t_76;
    if (p_P_75.found) {
      l__t_76 = 0.1e1;
    } else {
      l__t_76 = 0.e0;
    }
    return l__t_76
  }
  function real mean (world, id(point) p_P_77) {
    return p_P_77.closest
  }
  function real mean (world, id(point) p_P_78,real p_meancl_79) {
    real l_op1_e3_l_2_80 = RSub(p_P_78.closest,p_meancl_79);
    return RMul(l_op1_e3_l_2_80,l_op1_e3_l_2_80)
  }
  function real max (world, id(point) p_P_81) {
    return p_P_81.mvmt
  }
  function real mean (world, id(point) p_P_82) {
    return p_P_82.hh
  }
//***** GLOBAL VARIABLE INIT *****
  {
    int l__t_88;
    int l__t_86;
    femData(MeshCell)[] l__t_83;
    l__t_83 = <femData(MeshCell)[]>{};
    for i__t_84 = 0 to ISub(ExtractFemItem<int,NumCell(Mesh)>(globals.meshData),1) {
      l__t_83 = Append<femData(MeshCell),femData(MeshCell)>(l__t_83,LoadFem<femData(MeshCell)>(globals.meshData,i__t_84));
    }
    bool l__t_85 = EQ<int>(2,globals.fDim);
    if (l__t_85) {
      l__t_86 = 6;
    } else {
      int l__t_87;
      if (EQ<int>(1,globals.fDim)) {
        l__t_87 = 2;
      } else {
        l__t_87 = 0;
      }
      l__t_86 = l__t_87;
    }
    globals.nnmin = l__t_86;
    if (l__t_85) {
      l__t_88 = 8;
    } else {
      int l__t_89;
      if (EQ<int>(1,globals.fDim)) {
        l__t_89 = 3;
      } else {
        l__t_89 = 0;
      }
      l__t_88 = l__t_89;
    }
    globals.nnmax = l__t_88;
    globals.rad = RDiv(RMul(globals.tipd,0.3e1),0.2e1);
    globals.pchist = MathFn<pow>(globals.hist,RDiv(0.1e1,IntToReal(IMul(2,globals.pcp))));
    globals.iter = 0;
    globals.rpc = 0.1e1;
    globals.popLast = -1;
  }
//***** STRAND *****
strand point (&tensor[3] p_p0_90,real p_hh0_91) in 3D {
  varying output tensor[3] pos;
  varying output tensor[3] _pos;
  real ID;
  varying real hh;
  varying tensor[3] step;
  varying bool found;
  varying int nfs;
  varying real trav;
  varying real mvmt;
  varying real closest;
  varying int born;
  varying bool first;
  initialize (globals) {
    real l__t_92 = urnd$5B2A(VIndex<3,4,0>(LOAD_0(p_p0_90)));
    real l__t_93 = urnd$5B2A(VIndex<3,4,1>(LOAD_0(p_p0_90)));
    real l__t_94 = urnd$5B2A(VIndex<3,4,2>(LOAD_0(p_p0_90)));
    self.pos = TensorCopy<[3]>(p_p0_90);
    self._pos = TensorCopy<[3]>(p_p0_90);
    self.ID = MathFn<floor>(RMul(0.1e7,MathFn<fmod>(RAdd(RAdd(l__t_92,l__t_93),l__t_94),0.1e1)));
    self.hh = p_hh0_91;
    self.step = PACK(VEC3{4}(0.e0,0.e0,0.e0));
    self.found = false;
    self.nfs = 0;
    self.trav = 0.e0;
    self.mvmt = 0.1e1;
    self.closest = globals.rad;
    self.born = 0;
    self.first = true;
  }
  update (world, globals) {
    vec3{4} v_171;
    real l_hh_170;
    vec3{4} v_169;
    bool l_found_168;
    int l_nfs_167;
    real l_trav_166;
    real l_mvmt_165;
    real l_closest_164;
    int l_born_163;
    bool l__t_124;
    bool l__t_103;
    if (self.first) {
      bool l__t_97;
      bool l_vv_96;
      if (GT<int>(globals.verb,0)) {
        l_vv_96 = false;
      } else {
        l_vv_96 = false;
      }
      if (l_vv_96) {
        l__t_97 = true;
      } else {
        l__t_97 = GT<int>(globals.verb,1);
      }
      if (l__t_97) {
        print(self.ID,"(i#",globals.iter," @ ",TensorRef<[3]>(self.pos),"): ");
        print(" HELLO!\n");
      }
    }
    vec3{4} v_98 = VEC3{4}(0.e0,0.e0,0.e0);
    vec3{4} v_99 = VSub<3,4>(LOAD_0(TensorRef<[3]>(self.pos)),v_98);
    real l__t_100 = Sqrt(VDot<3,4>(v_99,v_99));
    bool l__t_101 = LT<real>(l__t_100,0.4e1);
    vec3{4} v_102 = v_98;
    if (l__t_101) {
      l__t_103 = GT<real>(l__t_100,0.3e1);
    } else {
      l__t_103 = false;
    }
    if (l__t_103) {
      bool l__t_123;
      real l_x_104 = VIndex<3,4,0>(LOAD_0(TensorRef<[3]>(self.pos)));
      real l_y_105 = VIndex<3,4,1>(LOAD_0(TensorRef<[3]>(self.pos)));
      real l_z_106 = VIndex<3,4,2>(LOAD_0(TensorRef<[3]>(self.pos)));
      real l_op1_e3_l_6_107 = RMul(l_x_104,l_x_104);
      real l_op1_e3_l_7_108 = RMul(l_y_105,l_y_105);
      real l_op1_e3_l_8_109 = RMul(l_z_106,l_z_106);
      real l_op1_e3_l_9_110 = RAdd(RAdd(l_op1_e3_l_6_107,l_op1_e3_l_7_108),l_op1_e3_l_8_109);
      real l_op1_e3_l_11_111 = Cos(l_op1_e3_l_9_110);
      real l_op1_e3_l_14_112 = RMul(l_z_106,l_op1_e3_l_8_109);
      real l_op1_e3_l_20_113 = Sin(l_op1_e3_l_9_110);
      vec3{4} v_114 = VEC3{4}(RMul(RMul(RMul(0.2e1,l_x_104),l_op1_e3_l_8_109),l_op1_e3_l_11_111),RMul(RMul(RMul(0.2e1,l_y_105),l_op1_e3_l_8_109),l_op1_e3_l_11_111),RAdd(RMul(RMul(0.2e1,l_op1_e3_l_14_112),l_op1_e3_l_11_111),RMul(RMul(0.2e1,l_z_106),l_op1_e3_l_20_113)));
      real l_op1_e3_l_25_115 = RMul(RMul(0.2e1,l_op1_e3_l_8_109),l_op1_e3_l_11_111);
      real l_r_116 = RMul(-0.4e1,l_x_104);
      real l__t_117 = RMul(RMul(RMul(l_r_116,l_y_105),l_op1_e3_l_8_109),l_op1_e3_l_20_113);
      real l__t_118 = RAdd(RMul(RMul(l_r_116,l_op1_e3_l_14_112),l_op1_e3_l_20_113),RMul(RMul(RMul(0.4e1,l_x_104),l_z_106),l_op1_e3_l_11_111));
      real l__t_119 = RAdd(RMul(RMul(RMul(-0.4e1,l_y_105),l_op1_e3_l_14_112),l_op1_e3_l_20_113),RMul(RMul(RMul(0.4e1,l_y_105),l_z_106),l_op1_e3_l_11_111));
      tensor[3,3] t_120 = <tensor[3,3]>[RAdd(RMul(RMul(RMul(-0.4e1,l_op1_e3_l_6_107),l_op1_e3_l_8_109),l_op1_e3_l_20_113),l_op1_e3_l_25_115),l__t_117,l__t_118,l__t_117,RAdd(RMul(RMul(RMul(-0.4e1,l_op1_e3_l_7_108),l_op1_e3_l_8_109),l_op1_e3_l_20_113),l_op1_e3_l_25_115),l__t_119,l__t_118,l__t_119,RAdd(RAdd(RMul(RMul(-0.4e1,RMul(l_op1_e3_l_8_109,l_op1_e3_l_8_109)),l_op1_e3_l_20_113),RMul(RMul(0.1e2,l_op1_e3_l_8_109),l_op1_e3_l_11_111)),RMul(0.2e1,l_op1_e3_l_20_113))];
      real[3] l__t_121 = EigenVals3x3(TensorRef<[3,3]>(t_120));
      if (GT<real>(RDiv(RNeg(Subscript<real[3]>(l__t_121,2)),RAdd(globals.fBias,Sqrt(VDot<3,4>(v_114,v_114)))),globals.fStrTh)) {
        bool l__t_122;
        if (GTE<real>(0.e0,globals.fMaskTh)) {
          l__t_122 = true;
        } else {
          l__t_122 = false;
        }
        l__t_123 = l__t_122;
      } else {
        l__t_123 = false;
      }
      l__t_124 = l__t_123;
    } else {
      l__t_124 = false;
    }
    if (BNot(l__t_124)) {
      bool l__t_126;
      bool l_vv_125;
      if (GT<int>(globals.verb,0)) {
        l_vv_125 = false;
      } else {
        l_vv_125 = false;
      }
      if (l_vv_125) {
        l__t_126 = true;
      } else {
        l__t_126 = GT<int>(globals.verb,1);
      }
      if (l__t_126) {
        bool l__t_127;
        print(self.ID,"(i#",globals.iter," @ ",TensorRef<[3]>(self.pos),"): ");
        if (l__t_101) {
          l__t_127 = GT<real>(l__t_100,0.3e1);
        } else {
          l__t_127 = false;
        }
        real l_x_128 = VIndex<3,4,0>(LOAD_0(TensorRef<[3]>(self.pos)));
        real l_y_129 = VIndex<3,4,1>(LOAD_0(TensorRef<[3]>(self.pos)));
        real l_z_130 = VIndex<3,4,2>(LOAD_0(TensorRef<[3]>(self.pos)));
        real l_op1_e3_l_6_131 = RMul(l_x_128,l_x_128);
        real l_op1_e3_l_7_132 = RMul(l_y_129,l_y_129);
        real l_op1_e3_l_8_133 = RMul(l_z_130,l_z_130);
        real l_op1_e3_l_9_134 = RAdd(RAdd(l_op1_e3_l_6_131,l_op1_e3_l_7_132),l_op1_e3_l_8_133);
        real l_op1_e3_l_11_135 = Cos(l_op1_e3_l_9_134);
        real l_op1_e3_l_14_136 = RMul(l_z_130,l_op1_e3_l_8_133);
        real l_op1_e3_l_20_137 = Sin(l_op1_e3_l_9_134);
        vec3{4} v_138 = VEC3{4}(RMul(RMul(RMul(0.2e1,l_x_128),l_op1_e3_l_8_133),l_op1_e3_l_11_135),RMul(RMul(RMul(0.2e1,l_y_129),l_op1_e3_l_8_133),l_op1_e3_l_11_135),RAdd(RMul(RMul(0.2e1,l_op1_e3_l_14_136),l_op1_e3_l_11_135),RMul(RMul(0.2e1,l_z_130),l_op1_e3_l_20_137)));
        real l_op1_e3_l_25_139 = RMul(RMul(0.2e1,l_op1_e3_l_8_133),l_op1_e3_l_11_135);
        real l_r_140 = RMul(-0.4e1,l_x_128);
        real l__t_141 = RMul(RMul(RMul(l_r_140,l_y_129),l_op1_e3_l_8_133),l_op1_e3_l_20_137);
        real l__t_142 = RAdd(RMul(RMul(l_r_140,l_op1_e3_l_14_136),l_op1_e3_l_20_137),RMul(RMul(RMul(0.4e1,l_x_128),l_z_130),l_op1_e3_l_11_135));
        real l__t_143 = RAdd(RMul(RMul(RMul(-0.4e1,l_y_129),l_op1_e3_l_14_136),l_op1_e3_l_20_137),RMul(RMul(RMul(0.4e1,l_y_129),l_z_130),l_op1_e3_l_11_135));
        tensor[3,3] t_144 = <tensor[3,3]>[RAdd(RMul(RMul(RMul(-0.4e1,l_op1_e3_l_6_131),l_op1_e3_l_8_133),l_op1_e3_l_20_137),l_op1_e3_l_25_139),l__t_141,l__t_142,l__t_141,RAdd(RMul(RMul(RMul(-0.4e1,l_op1_e3_l_7_132),l_op1_e3_l_8_133),l_op1_e3_l_20_137),l_op1_e3_l_25_139),l__t_143,l__t_142,l__t_143,RAdd(RAdd(RMul(RMul(-0.4e1,RMul(l_op1_e3_l_8_133,l_op1_e3_l_8_133)),l_op1_e3_l_20_137),RMul(RMul(0.1e2,l_op1_e3_l_8_133),l_op1_e3_l_11_135)),RMul(0.2e1,l_op1_e3_l_20_137))];
        real[3] l__t_145 = EigenVals3x3(TensorRef<[3,3]>(t_144));
        print("!inside=",l__t_127," || fStrength=",RDiv(RNeg(Subscript<real[3]>(l__t_145,2)),RAdd(globals.fBias,Sqrt(VDot<3,4>(v_138,v_138))))," <= fStrTh=",globals.fStrTh," || fMask(pos)=",0.e0," < fMaskTh=",globals.fMaskTh," || fTest(pos)=",true," ==>DIE\n");
      }
      die;
    }
    if (GT<real>(globals.travMax,0.e0)) {
      if (GT<real>(self.trav,globals.travMax)) {
        die;
      }
    }
    if (BNot(self.found)) {
      bool l__t_160;
      bool l_vv_159;
      bool l_found_158;
      int l_nfs_157;
      real l_trav_156;
      real l_mvmt_155;
      if (GT<int>(globals.nfsMax,0)) {
        if (GT<int>(self.nfs,globals.nfsMax)) {
          bool l__t_147;
          bool l_vv_146;
          if (GT<int>(globals.verb,0)) {
            l_vv_146 = false;
          } else {
            l_vv_146 = false;
          }
          if (l_vv_146) {
            l__t_147 = true;
          } else {
            l__t_147 = GT<int>(globals.verb,1);
          }
          if (l__t_147) {
            print(self.ID,"(i#",globals.iter," @ ",TensorRef<[3]>(self.pos),"): ");
            print("nfs=",self.nfs," > nfsMax=",globals.nfsMax," || trav=",self.trav," > travMax=",globals.travMax," =>DIE\n");
          }
          die;
        }
      }
      &tensor[3] l__t_148 = fStep$5B52(TensorRef<[3]>(self.pos));
      vec3{4} v_149 = VScale<3,4>(globals.sfs,LOAD_0(l__t_148));
      vec3{4} v_150 = VAdd<3,4>(LOAD_0(TensorRef<[3]>(self.pos)),v_149);
      real l_op1_e3_l_11_151 = RDiv(Sqrt(RMul(RMul(globals.sfs,globals.sfs),VDot<3,4>(LOAD_0(l__t_148),LOAD_0(l__t_148)))),globals.tipd);
      real l_mvmt_152 = RAdd(l_op1_e3_l_11_151,RMul(globals.hist,RSub(self.mvmt,l_op1_e3_l_11_151)));
      vec3{4} v_153 = v_149;
      vec3{4} v_154 = v_150;
      if (GT<real>(l_mvmt_152,globals.fsEps)) {
        l_mvmt_155 = l_mvmt_152;
        l_trav_156 = RAdd(self.trav,l_op1_e3_l_11_151);
        l_nfs_157 = IAdd(self.nfs,1);
        l_found_158 = self.found;
      } else {
        l_mvmt_155 = 0.1e1;
        l_trav_156 = 0.e0;
        l_nfs_157 = self.nfs;
        l_found_158 = true;
      }
      if (GT<int>(globals.verb,0)) {
        l_vv_159 = false;
      } else {
        l_vv_159 = false;
      }
      if (l_vv_159) {
        l__t_160 = true;
      } else {
        l__t_160 = GT<int>(globals.verb,1);
      }
      if (l__t_160) {
        tensor[3] _arg_161 = PACK(v_154);
        print(self.ID,"(i#",globals.iter," @ ",TensorRef<[3]>(_arg_161),"): ");
        tensor[3] _arg_162 = PACK(v_153);
        print("step=",TensorRef<[3]>(_arg_162),"; mvmt=",l_mvmt_155," => found=",l_found_158,"\n");
      }
      l_born_163 = self.born;
      l_closest_164 = self.closest;
      l_mvmt_165 = l_mvmt_155;
      l_trav_166 = l_trav_156;
      l_nfs_167 = l_nfs_157;
      l_found_168 = l_found_158;
      v_169 = v_153;
      l_hh_170 = self.hh;
      v_171 = v_154;
    } else {
      int l_born_412;
      vec3{4} v_336;
      real l_hh_335;
      bool l__t_317;
      bool l_vv_316;
      real l_rad_302;
      int l__t_301;
      real l__t_300;
      vec3{4} v_299;
      real l_hh_296;
      real l_hh_280;
      vec3{4} v_279;
      int l_born_269;
      real l__t_180;
      vec3{4} v_179;
      int l__t_178;
      if (EQ<int>(0,globals.fDim)) {
        self.pos = TensorCopy<[3]>(TensorRef<[3]>(self.pos));
        stabilize;
      }
      &tensor[3] l__t_172 = fStep$5B52(TensorRef<[3]>(self.pos));
      vec3{4} v_173 = VScale<3,4>(globals.sfs,LOAD_0(l__t_172));
      vec3{4} v_174 = VAdd<3,4>(LOAD_0(TensorRef<[3]>(self.pos)),v_173);
      real l_r_175 = RMul(globals.sfs,globals.sfs);
      real l_trav_176 = RAdd(self.trav,RDiv(Sqrt(RMul(l_r_175,VDot<3,4>(LOAD_0(l__t_172),LOAD_0(l__t_172)))),globals.tipd));
      tensor[3] _arg_177 = PACK(v_174);
      l__t_178 = 0;
      v_179 = v_102;
      l__t_180 = 0.e0;
      id(point)[] t_182 = SphereQuery<3,id(point)>(TensorRef<[3]>(_arg_177),globals.rad);
      vec3{4} v_183 = v_173;
      vec3{4} v_184 = v_174;
      foreach id(point) i_P_181 in t_182 {
        real l__t_195;
        real l__t_191;
        vec3{4} v_185 = VSub<3,4>(LOAD_0(TensorRef<[3]>(i_P_181.pos)),v_184);
        real l_op1_e3_l_12_186 = Sqrt(VDot<3,4>(v_185,v_185));
        vec3{4} v_187 = v_185;
        if (LT<real>(RDiv(l_op1_e3_l_12_186,globals.tipd),globals.fsEps)) {
          if (LTE<real>(self.ID,i_P_181.ID)) {
            die;
          }
        }
        real l__t_188 = RDiv(l_op1_e3_l_12_186,globals.rad);
        real l__t_189 = RDiv(0.2e1,0.3e1);
        bool l__t_190 = LT<real>(l__t_188,l__t_189);
        if (l__t_190) {
          l__t_191 = RAdd(0.1e1,RMul(l__t_188,RAdd(-0.5646e1,RMul(l__t_188,RAdd(0.119835e2,RMul(l__t_188,RAdd(-0.113535e2,RMul(0.40550625e1,l__t_188))))))));
        } else {
          real l__t_193;
          if (LT<real>(l__t_188,0.1e1)) {
            real l_op1_e3_l_50_192 = RSub(l__t_188,l__t_189);
            l__t_193 = RAdd(-0.1e-2,RMul(RMul(RAdd(0.9e-1,RMul(RAdd(-0.54e0,RMul(RSub(0.1215e1,RMul(0.972e0,l_op1_e3_l_50_192)),l_op1_e3_l_50_192)),l_op1_e3_l_50_192)),l_op1_e3_l_50_192),l_op1_e3_l_50_192));
          } else {
            l__t_193 = 0.e0;
          }
          l__t_191 = l__t_193;
        }
        real l_oldE_194 = RAdd(l__t_180,l__t_191);
        if (l__t_190) {
          l__t_195 = RAdd(-0.5646e1,RMul(l__t_188,RAdd(0.23967e2,RMul(l__t_188,RAdd(-0.340605e2,RMul(0.1622025e2,l__t_188))))));
        } else {
          real l__t_197;
          if (LT<real>(l__t_188,0.1e1)) {
            real l_op1_e3_l_73_196 = RSub(RMul(0.3e1,l__t_188),0.2e1);
            l__t_197 = RMul(RMul(0.1234567901e-1,l_op1_e3_l_73_196),RAdd(0.486e1,RMul(l_op1_e3_l_73_196,RAdd(-0.1458e2,RMul(l_op1_e3_l_73_196,RSub(0.1458e2,RMul(0.486e1,l_op1_e3_l_73_196)))))));
          } else {
            l__t_197 = 0.e0;
          }
          l__t_195 = l__t_197;
        }
        real l_r_198 = RMul(l__t_195,RDiv(0.1e1,globals.rad));
        real l_r_199 = RDiv(0.1e1,l_op1_e3_l_12_186);
        l__t_178 = IAdd(l__t_178,1);
        v_179 = VAdd<3,4>(v_179,VEC3{4}(RMul(l_r_199,RMul(l_r_198,VIndex<3,4,0>(v_187))),RMul(l_r_199,RMul(l_r_198,VIndex<3,4,1>(v_187))),RMul(l_r_199,RMul(l_r_198,VIndex<3,4,2>(v_187)))));
        l__t_180 = l_oldE_194;
      }
      if (EQ<int>(0,l__t_178)) {
        bool l__t_264;
        bool l_vv_263;
        int l_born_262;
        bool l__t_260;
        bool l__t_239;
        bool l__t_231;
        bool l_vv_230;
        vec3{4} v_222;
        vec3{4} v_221;
        bool l__t_203;
        int l__t_202;
        bool l__t_201;
        if (GT<int>(globals.pcp,0)) {
          bool l__t_200;
          if (GT<int>(globals.iter,0)) {
            l__t_200 = EQ<int>(0,IMod(globals.iter,globals.pcp));
          } else {
            l__t_200 = false;
          }
          l__t_201 = l__t_200;
        } else {
          l__t_201 = false;
        }
        if (l__t_201) {
          l__t_202 = ISub(IMul(IMod(IDiv(globals.iter,globals.pcp),2),2),1);
        } else {
          l__t_202 = 0;
        }
        if (GT<int>(l__t_202,0)) {
          l__t_203 = LT<int>(self.born,globals.nnmax);
        } else {
          l__t_203 = false;
        }
        if (BNot(l__t_203)) {
          self.pos = PACK(v_184);
          self._pos = PACK(v_184);
          self.step = PACK(v_183);
          self.trav = l_trav_176;
          active;
        }
        tensor[3] _arg_207 = PACK(v_184);
        &tensor[3,3] l__t_208 = fPerp$5B79(_arg_207);
        vec3{4} v_209 = VEC3{4}(globals.tipd,0.e0,0.e0);
        &tensor[3] l_projParam_210 = ProjectLast<&tensor[3,3],[0]>(l__t_208);
        &tensor[3] l_projParam_211 = ProjectLast<&tensor[3,3],[1]>(l__t_208);
        &tensor[3] l_projParam_212 = ProjectLast<&tensor[3,3],[2]>(l__t_208);
        vec3{4} v_213 = VEC3{4}(VDot<3,4>(LOAD_0(l_projParam_210),v_209),VDot<3,4>(LOAD_0(l_projParam_211),v_209),VDot<3,4>(LOAD_0(l_projParam_212),v_209));
        vec3{4} v_214 = VEC3{4}(0.e0,globals.tipd,0.e0);
        vec3{4} v_215 = VEC3{4}(VDot<3,4>(LOAD_0(l_projParam_210),v_214),VDot<3,4>(LOAD_0(l_projParam_211),v_214),VDot<3,4>(LOAD_0(l_projParam_212),v_214));
        vec3{4} v_216 = VEC3{4}(0.e0,0.e0,globals.tipd);
        vec3{4} v_217 = VEC3{4}(VDot<3,4>(LOAD_0(l_projParam_210),v_216),VDot<3,4>(LOAD_0(l_projParam_211),v_216),VDot<3,4>(LOAD_0(l_projParam_212),v_216));
        vec3{4} v_218 = v_213;
        vec3{4} v_219 = v_215;
        vec3{4} v_220 = v_217;
        if (GT<real>(Sqrt(VDot<3,4>(v_213,v_213)),Sqrt(VDot<3,4>(v_215,v_215)))) {
          v_221 = v_218;
        } else {
          v_221 = v_219;
        }
        if (GT<real>(Sqrt(VDot<3,4>(v_221,v_221)),Sqrt(VDot<3,4>(v_220,v_220)))) {
          v_222 = v_221;
        } else {
          v_222 = v_220;
        }
        real l_op1_e3_l_8_223 = RDiv(0.1e1,Sqrt(VDot<3,4>(v_222,v_222)));
        vec3{4} v_224 = VAdd<3,4>(VAdd<3,4>(VEC3{4}(RMul(RMul(globals.tipd,VIndex<3,4,0>(v_222)),l_op1_e3_l_8_223),RMul(RMul(globals.tipd,VIndex<3,4,1>(v_222)),l_op1_e3_l_8_223),RMul(RMul(globals.tipd,VIndex<3,4,2>(v_222)),l_op1_e3_l_8_223)),LOAD_0(TensorRef<[3]>(self.pos))),v_183);
        tensor[3] _arg_225 = PACK(v_224);
        &tensor[3] l__t_226 = fStep$5B52(_arg_225);
        vec3{4} v_227 = VAdd<3,4>(v_224,VScale<3,4>(globals.sfs,LOAD_0(l__t_226)));
        bool l__t_228 = GT<int>(globals.verb,0);
        vec3{4} v_229 = v_227;
        if (l__t_228) {
          l_vv_230 = false;
        } else {
          l_vv_230 = false;
        }
        if (l_vv_230) {
          l__t_231 = true;
        } else {
          l__t_231 = GT<int>(globals.verb,1);
        }
        if (l__t_231) {
          tensor[3] _arg_232 = PACK(v_184);
          print(self.ID,"(i#",globals.iter," @ ",TensorRef<[3]>(_arg_232),"): ");
          real l__t_233 = urnd$5B2A(VIndex<3,4,0>(v_229));
          real l__t_234 = urnd$5B2A(VIndex<3,4,1>(v_229));
          real l__t_235 = urnd$5B2A(VIndex<3,4,2>(v_229));
          tensor[3] _arg_236 = PACK(v_229);
          print(" 0==nn =>NEW(",TensorRef<[3]>(_arg_236),") w/ ID=",MathFn<floor>(RMul(0.1e7,MathFn<fmod>(RAdd(RAdd(l__t_233,l__t_234),l__t_235),0.1e1))),"\n");
        }
        vec3{4} v_237 = VSub<3,4>(v_184,v_102);
        real l__t_238 = Sqrt(VDot<3,4>(v_237,v_237));
        if (LT<real>(l__t_238,0.4e1)) {
          l__t_239 = GT<real>(l__t_238,0.3e1);
        } else {
          l__t_239 = false;
        }
        if (l__t_239) {
          bool l__t_259;
          real l_x_240 = VIndex<3,4,0>(v_184);
          real l_y_241 = VIndex<3,4,1>(v_184);
          real l_z_242 = VIndex<3,4,2>(v_184);
          real l_op1_e3_l_6_243 = RMul(l_x_240,l_x_240);
          real l_op1_e3_l_7_244 = RMul(l_y_241,l_y_241);
          real l_op1_e3_l_8_245 = RMul(l_z_242,l_z_242);
          real l_op1_e3_l_9_246 = RAdd(RAdd(l_op1_e3_l_6_243,l_op1_e3_l_7_244),l_op1_e3_l_8_245);
          real l_op1_e3_l_11_247 = Cos(l_op1_e3_l_9_246);
          real l_op1_e3_l_14_248 = RMul(l_z_242,l_op1_e3_l_8_245);
          real l_op1_e3_l_20_249 = Sin(l_op1_e3_l_9_246);
          vec3{4} v_250 = VEC3{4}(RMul(RMul(RMul(0.2e1,l_x_240),l_op1_e3_l_8_245),l_op1_e3_l_11_247),RMul(RMul(RMul(0.2e1,l_y_241),l_op1_e3_l_8_245),l_op1_e3_l_11_247),RAdd(RMul(RMul(0.2e1,l_op1_e3_l_14_248),l_op1_e3_l_11_247),RMul(RMul(0.2e1,l_z_242),l_op1_e3_l_20_249)));
          real l_op1_e3_l_25_251 = RMul(RMul(0.2e1,l_op1_e3_l_8_245),l_op1_e3_l_11_247);
          real l_r_252 = RMul(-0.4e1,l_x_240);
          real l__t_253 = RMul(RMul(RMul(l_r_252,l_y_241),l_op1_e3_l_8_245),l_op1_e3_l_20_249);
          real l__t_254 = RAdd(RMul(RMul(l_r_252,l_op1_e3_l_14_248),l_op1_e3_l_20_249),RMul(RMul(RMul(0.4e1,l_x_240),l_z_242),l_op1_e3_l_11_247));
          real l__t_255 = RAdd(RMul(RMul(RMul(-0.4e1,l_y_241),l_op1_e3_l_14_248),l_op1_e3_l_20_249),RMul(RMul(RMul(0.4e1,l_y_241),l_z_242),l_op1_e3_l_11_247));
          tensor[3,3] t_256 = <tensor[3,3]>[RAdd(RMul(RMul(RMul(-0.4e1,l_op1_e3_l_6_243),l_op1_e3_l_8_245),l_op1_e3_l_20_249),l_op1_e3_l_25_251),l__t_253,l__t_254,l__t_253,RAdd(RMul(RMul(RMul(-0.4e1,l_op1_e3_l_7_244),l_op1_e3_l_8_245),l_op1_e3_l_20_249),l_op1_e3_l_25_251),l__t_255,l__t_254,l__t_255,RAdd(RAdd(RMul(RMul(-0.4e1,RMul(l_op1_e3_l_8_245,l_op1_e3_l_8_245)),l_op1_e3_l_20_249),RMul(RMul(0.1e2,l_op1_e3_l_8_245),l_op1_e3_l_11_247)),RMul(0.2e1,l_op1_e3_l_20_249))];
          real[3] l__t_257 = EigenVals3x3(TensorRef<[3,3]>(t_256));
          if (GT<real>(RDiv(RNeg(Subscript<real[3]>(l__t_257,2)),RAdd(globals.fBias,Sqrt(VDot<3,4>(v_250,v_250)))),globals.fStrTh)) {
            bool l__t_258;
            if (GTE<real>(0.e0,globals.fMaskTh)) {
              l__t_258 = true;
            } else {
              l__t_258 = false;
            }
            l__t_259 = l__t_258;
          } else {
            l__t_259 = false;
          }
          l__t_260 = l__t_259;
        } else {
          l__t_260 = false;
        }
        if (l__t_260) {
          tensor[3] _arg_261 = PACK(v_229);
          new point(_arg_261,self.hh);
          l_born_262 = IAdd(self.born,1);
        } else {
          l_born_262 = self.born;
        }
        if (l__t_228) {
          l_vv_263 = false;
        } else {
          l_vv_263 = false;
        }
        if (l_vv_263) {
          l__t_264 = true;
        } else {
          l__t_264 = GT<int>(globals.verb,1);
        }
        if (l__t_264) {
          tensor[3] _arg_265 = PACK(v_184);
          print(self.ID,"(i#",globals.iter," @ ",TensorRef<[3]>(_arg_265),"): ");
          print("nn=0; after birthing mvmt=",self.mvmt,"\n");
        }
        self.pos = PACK(v_184);
        self._pos = PACK(v_184);
        self.step = PACK(v_183);
        self.trav = l_trav_176;
        self.born = l_born_262;
        active;
      } else {
        l_born_269 = self.born;
      }
      tensor[3] _arg_270 = PACK(v_184);
      &tensor[3,3] l__t_271 = fPerp$5B79(_arg_270);
      real l_vdot_272 = VDot<3,4>(LOAD_0(ProjectLast<&tensor[3,3],[0]>(l__t_271)),v_179);
      real l_vdot_273 = VDot<3,4>(LOAD_0(ProjectLast<&tensor[3,3],[1]>(l__t_271)),v_179);
      real l_vdot_274 = VDot<3,4>(LOAD_0(ProjectLast<&tensor[3,3],[2]>(l__t_271)),v_179);
      vec3{4} v_275 = VEC3{4}(l_vdot_272,l_vdot_273,l_vdot_274);
      real l__t_276 = Sqrt(RMul(RMul(self.hh,self.hh),VDot<3,4>(v_275,v_275)));
      vec3{4} v_277 = VScale<3,4>(self.hh,v_275);
      if (GT<real>(l__t_276,globals.tipd)) {
        real l_hh_278 = RMul(self.hh,RDiv(globals.tipd,l__t_276));
        v_279 = VEC3{4}(RMul(l_hh_278,l_vdot_272),RMul(l_hh_278,l_vdot_273),RMul(l_hh_278,l_vdot_274));
        l_hh_280 = l_hh_278;
      } else {
        v_279 = v_277;
        l_hh_280 = self.hh;
      }
      tensor[3] _arg_281 = PACK(VAdd<3,4>(v_184,v_279));
      &tensor[3] l__t_282 = fStep$5B52(_arg_281);
      vec3{4} v_283 = VScale<3,4>(globals.sfs,LOAD_0(l__t_282));
      real l_op1_e3_l_9_284 = Sqrt(VDot<3,4>(v_279,v_279));
      real l_op1_e3_l_10_285 = Sqrt(RMul(l_r_175,VDot<3,4>(LOAD_0(l__t_282),LOAD_0(l__t_282))));
      vec3{4} v_286 = v_283;
      if (GT<real>(RDiv(l_op1_e3_l_10_285,RAdd(RMul(globals.fsEps,globals.tipd),l_op1_e3_l_9_284)),0.5e0)) {
        bool l__t_289;
        bool l_vv_288;
        real l_hh_287 = RMul(l_hh_280,0.5e0);
        if (GT<int>(globals.verb,0)) {
          l_vv_288 = false;
        } else {
          l_vv_288 = false;
        }
        if (l_vv_288) {
          l__t_289 = true;
        } else {
          l__t_289 = GT<int>(globals.verb,1);
        }
        if (l__t_289) {
          tensor[3] _arg_290 = PACK(v_184);
          print(self.ID,"(i#",globals.iter," @ ",TensorRef<[3]>(_arg_290),"): ");
          print("nn=",l__t_178,"; |fs|/|es|=",RDiv(l_op1_e3_l_10_285,l_op1_e3_l_9_284)," > 0.5; trying again with hh=",l_hh_287,"; mvmt=",self.mvmt,"\n");
          tensor[3] _arg_291 = PACK(v_286);
          print("        fs=",TensorRef<[3]>(_arg_291),"\n");
          tensor[3] _arg_292 = PACK(v_279);
          print("        es=",TensorRef<[3]>(_arg_292),"\n");
        }
        self.pos = PACK(v_184);
        self._pos = PACK(v_184);
        self.hh = l_hh_287;
        self.step = PACK(v_183);
        self.trav = l_trav_176;
        self.born = l_born_269;
        active;
      } else {
        l_hh_296 = l_hh_280;
      }
      vec3{4} v_297 = VAdd<3,4>(VAdd<3,4>(v_184,v_286),v_279);
      tensor[3] _arg_298 = PACK(v_297);
      v_299 = v_102;
      l__t_300 = 0.e0;
      l__t_301 = 0;
      l_rad_302 = globals.rad;
      id(point)[] t_304 = SphereQuery<3,id(point)>(TensorRef<[3]>(_arg_298),globals.rad);
      vec3{4} v_305 = v_297;
      foreach id(point) i_P_303 in t_304 {
        real l__t_311;
        vec3{4} v_306 = VSub<3,4>(LOAD_0(TensorRef<[3]>(i_P_303.pos)),v_305);
        real l__t_307 = Sqrt(VDot<3,4>(v_306,v_306));
        real l__t_308 = RDiv(l__t_307,globals.rad);
        real l__t_309 = RDiv(0.2e1,0.3e1);
        vec3{4} v_310 = v_306;
        if (LT<real>(l__t_308,l__t_309)) {
          l__t_311 = RAdd(0.1e1,RMul(l__t_308,RAdd(-0.5646e1,RMul(l__t_308,RAdd(0.119835e2,RMul(l__t_308,RAdd(-0.113535e2,RMul(0.40550625e1,l__t_308))))))));
        } else {
          real l__t_313;
          if (LT<real>(l__t_308,0.1e1)) {
            real l_op1_e3_l_67_312 = RSub(l__t_308,l__t_309);
            l__t_313 = RAdd(-0.1e-2,RMul(RMul(RAdd(0.9e-1,RMul(RAdd(-0.54e0,RMul(RSub(0.1215e1,RMul(0.972e0,l_op1_e3_l_67_312)),l_op1_e3_l_67_312)),l_op1_e3_l_67_312)),l_op1_e3_l_67_312),l_op1_e3_l_67_312));
          } else {
            l__t_313 = 0.e0;
          }
          l__t_311 = l__t_313;
        }
        v_299 = VAdd<3,4>(v_299,v_310);
        l__t_300 = RAdd(l__t_300,l__t_311);
        l__t_301 = IAdd(l__t_301,1);
        l_rad_302 = Min<real>(l_rad_302,l__t_307);
      }
      real l__t_314 = IntToReal(l__t_301);
      bool l__t_315 = GT<int>(globals.verb,0);
      if (l__t_315) {
        l_vv_316 = false;
      } else {
        l_vv_316 = false;
      }
      if (l_vv_316) {
        l__t_317 = true;
      } else {
        l__t_317 = GT<int>(globals.verb,1);
      }
      if (l__t_317) {
        tensor[3] _arg_318 = PACK(v_305);
        print(self.ID,"(i#",globals.iter," @ ",TensorRef<[3]>(_arg_318),"): ");
        print("nn=",l__t_301,"; oldE=",l__t_180," newE=",l__t_300,"\n");
      }
      real l__t_319 = RSub(l__t_300,l__t_180);
      vec3{4} v_320 = VSub<3,4>(v_305,v_184);
      real l_op1_e3_l_18_321 = VDot<3,4>(v_320,VNeg<3,4>(v_179));
      vec3{4} v_322 = v_320;
      if (GT<real>(l__t_319,RMul(globals.gdeTest,l_op1_e3_l_18_321))) {
        bool l__t_326;
        bool l_vv_325;
        real l_hh_323 = RMul(l_hh_296,globals.gdeBack);
        if (EQ<real>(0.e0,l_hh_323)) {
          tensor[3] _arg_324 = PACK(v_305);
          print(self.ID,"(i#",globals.iter," @ ",TensorRef<[3]>(_arg_324),"): ");
          print("backtracked all the way to hh=0\n");
          die;
        }
        if (l__t_315) {
          l_vv_325 = false;
        } else {
          l_vv_325 = false;
        }
        if (l_vv_325) {
          l__t_326 = true;
        } else {
          l__t_326 = GT<int>(globals.verb,1);
        }
        if (l__t_326) {
          tensor[3] _arg_327 = PACK(v_305);
          print(self.ID,"(i#",globals.iter," @ ",TensorRef<[3]>(_arg_327),"): ");
          print("nn=",l__t_301,"; oldE=",l__t_180," newE=",l__t_300,"; backtracking; hh=",l_hh_323,"; mvmt=",self.mvmt,"\n");
          tensor[3] _arg_328 = PACK(v_286);
          print("      fs=",TensorRef<[3]>(_arg_328),"\n");
          tensor[3] _arg_329 = PACK(v_279);
          print("      es=",TensorRef<[3]>(_arg_329),"\n");
          print("      newE - oldE=",l__t_319,"\n");
          tensor[3] _arg_330 = PACK(v_179);
          print("      force=",TensorRef<[3]>(_arg_330),"\n");
          tensor[3] _arg_331 = PACK(v_322);
          print("      dpos=",TensorRef<[3]>(_arg_331),"\n");
          print("      0.5*(pos - oldpos).(-force)=",RMul(0.5e0,l_op1_e3_l_18_321),"\n");
        }
        self.pos = PACK(v_184);
        self._pos = PACK(v_184);
        self.hh = l_hh_323;
        self.step = PACK(v_183);
        self.trav = l_trav_176;
        self.closest = l_rad_302;
        self.born = l_born_269;
        active;
      } else {
        l_hh_335 = l_hh_296;
        v_336 = v_305;
      }
      real l_hh_337 = RMul(l_hh_335,globals.gdeOppor);
      vec3{4} v_338 = VAdd<3,4>(VAdd<3,4>(v_183,v_286),v_279);
      real l__t_339 = RDiv(Sqrt(VDot<3,4>(v_338,v_338)),globals.tipd);
      real l_mvmt_340 = RAdd(l__t_339,RMul(globals.hist,RSub(self.mvmt,l__t_339)));
      real l_trav_341 = RAdd(l_trav_176,l__t_339);
      vec3{4} v_342 = v_338;
      if (LT<real>(l__t_339,globals.pcmvEps)) {
        int l_born_411;
        int l__t_346;
        bool l__t_345;
        bool l__t_343 = GT<int>(globals.pcp,0);
        if (l__t_343) {
          bool l__t_344;
          if (GT<int>(globals.iter,0)) {
            l__t_344 = EQ<int>(0,IMod(globals.iter,globals.pcp));
          } else {
            l__t_344 = false;
          }
          l__t_345 = l__t_344;
        } else {
          l__t_345 = false;
        }
        if (l__t_345) {
          l__t_346 = ISub(IMul(IMod(IDiv(globals.iter,globals.pcp),2),2),1);
        } else {
          l__t_346 = 0;
        }
        if (NEQ<int>(l__t_346,0)) {
          int l_born_404;
          bool l__t_352;
          int l__t_349;
          bool l__t_348;
          if (l__t_343) {
            bool l__t_347;
            if (GT<int>(globals.iter,0)) {
              l__t_347 = EQ<int>(0,IMod(globals.iter,globals.pcp));
            } else {
              l__t_347 = false;
            }
            l__t_348 = l__t_347;
          } else {
            l__t_348 = false;
          }
          if (l__t_348) {
            l__t_349 = ISub(IMul(IMod(IDiv(globals.iter,globals.pcp),2),2),1);
          } else {
            l__t_349 = 0;
          }
          if (GT<int>(l__t_349,0)) {
            bool l__t_351;
            if (LT<real>(l__t_300,0.e0)) {
              bool l__t_350;
              if (LT<int>(l__t_301,globals.nnmin)) {
                l__t_350 = LT<int>(l_born_269,globals.nnmax);
              } else {
                l__t_350 = false;
              }
              l__t_351 = l__t_350;
            } else {
              l__t_351 = false;
            }
            l__t_352 = l__t_351;
          } else {
            l__t_352 = false;
          }
          if (l__t_352) {
            int l_born_403;
            bool l_birth_376;
            real l_r_353 = RDiv(0.1e1,l__t_314);
            real l_r_354 = RMul(l_r_353,VIndex<3,4,0>(v_299));
            real l_r_355 = RMul(l_r_353,VIndex<3,4,1>(v_299));
            real l_r_356 = RMul(l_r_353,VIndex<3,4,2>(v_299));
            vec3{4} v_357 = VEC3{4}(l_r_354,l_r_355,l_r_356);
            real l_op1_e3_l_11_358 = RDiv(0.1e1,Sqrt(VDot<3,4>(v_357,v_357)));
            vec3{4} v_359 = VSub<3,4>(v_336,VEC3{4}(RMul(RMul(globals.tipd,l_r_354),l_op1_e3_l_11_358),RMul(RMul(globals.tipd,l_r_355),l_op1_e3_l_11_358),RMul(RMul(globals.tipd,l_r_356),l_op1_e3_l_11_358)));
            tensor[3] _arg_360 = PACK(v_359);
            &tensor[3] l__t_361 = fStep$5B52(_arg_360);
            vec3{4} v_362 = VAdd<3,4>(v_359,VScale<3,4>(globals.sfs,LOAD_0(l__t_361)));
            tensor[3] _arg_363 = PACK(v_362);
            &tensor[3] l__t_364 = fStep$5B52(_arg_363);
            vec3{4} v_365 = VAdd<3,4>(v_362,VScale<3,4>(globals.sfs,LOAD_0(l__t_364)));
            vec3{4} v_366 = v_365;
            if (EQ<int>(globals.fDim,2)) {
              bool l_birth_375;
              if (GTE<int>(l__t_301,4)) {
                bool l_birth_374;
                bool l_birth_368;
                tensor[3] _arg_367 = PACK(v_366);
                l_birth_368 = true;
                id(point)[] t_370 = SphereQuery<3,id(point)>(TensorRef<[3]>(_arg_367),RMul(globals.tipd,globals.mabd));
                foreach id(point) i_P_369 in t_370 {
                  l_birth_368 = false;
                }
                if (l_birth_368) {
                  real l__t_371 = urnd$5B2A(VIndex<3,4,0>(v_336));
                  real l__t_372 = urnd$5B2A(VIndex<3,4,1>(v_336));
                  real l__t_373 = urnd$5B2A(VIndex<3,4,2>(v_336));
                  l_birth_374 = LT<real>(MathFn<fmod>(RAdd(RAdd(l__t_371,l__t_372),l__t_373),0.1e1),RDiv(IntToReal(ISub(globals.nnmin,l__t_301)),IntToReal(globals.nnmin)));
                } else {
                  l_birth_374 = l_birth_368;
                }
                l_birth_375 = l_birth_374;
              } else {
                l_birth_375 = true;
              }
              l_birth_376 = l_birth_375;
            } else {
              l_birth_376 = true;
            }
            if (l_birth_376) {
              int l_born_402;
              bool l__t_400;
              bool l__t_379;
              vec3{4} v_377 = VSub<3,4>(v_366,v_102);
              real l__t_378 = Sqrt(VDot<3,4>(v_377,v_377));
              if (LT<real>(l__t_378,0.4e1)) {
                l__t_379 = GT<real>(l__t_378,0.3e1);
              } else {
                l__t_379 = false;
              }
              if (l__t_379) {
                bool l__t_399;
                real l_x_380 = VIndex<3,4,0>(v_366);
                real l_y_381 = VIndex<3,4,1>(v_366);
                real l_z_382 = VIndex<3,4,2>(v_366);
                real l_op1_e3_l_6_383 = RMul(l_x_380,l_x_380);
                real l_op1_e3_l_7_384 = RMul(l_y_381,l_y_381);
                real l_op1_e3_l_8_385 = RMul(l_z_382,l_z_382);
                real l_op1_e3_l_9_386 = RAdd(RAdd(l_op1_e3_l_6_383,l_op1_e3_l_7_384),l_op1_e3_l_8_385);
                real l_op1_e3_l_11_387 = Cos(l_op1_e3_l_9_386);
                real l_op1_e3_l_14_388 = RMul(l_z_382,l_op1_e3_l_8_385);
                real l_op1_e3_l_20_389 = Sin(l_op1_e3_l_9_386);
                vec3{4} v_390 = VEC3{4}(RMul(RMul(RMul(0.2e1,l_x_380),l_op1_e3_l_8_385),l_op1_e3_l_11_387),RMul(RMul(RMul(0.2e1,l_y_381),l_op1_e3_l_8_385),l_op1_e3_l_11_387),RAdd(RMul(RMul(0.2e1,l_op1_e3_l_14_388),l_op1_e3_l_11_387),RMul(RMul(0.2e1,l_z_382),l_op1_e3_l_20_389)));
                real l_op1_e3_l_25_391 = RMul(RMul(0.2e1,l_op1_e3_l_8_385),l_op1_e3_l_11_387);
                real l_r_392 = RMul(-0.4e1,l_x_380);
                real l__t_393 = RMul(RMul(RMul(l_r_392,l_y_381),l_op1_e3_l_8_385),l_op1_e3_l_20_389);
                real l__t_394 = RAdd(RMul(RMul(l_r_392,l_op1_e3_l_14_388),l_op1_e3_l_20_389),RMul(RMul(RMul(0.4e1,l_x_380),l_z_382),l_op1_e3_l_11_387));
                real l__t_395 = RAdd(RMul(RMul(RMul(-0.4e1,l_y_381),l_op1_e3_l_14_388),l_op1_e3_l_20_389),RMul(RMul(RMul(0.4e1,l_y_381),l_z_382),l_op1_e3_l_11_387));
                tensor[3,3] t_396 = <tensor[3,3]>[RAdd(RMul(RMul(RMul(-0.4e1,l_op1_e3_l_6_383),l_op1_e3_l_8_385),l_op1_e3_l_20_389),l_op1_e3_l_25_391),l__t_393,l__t_394,l__t_393,RAdd(RMul(RMul(RMul(-0.4e1,l_op1_e3_l_7_384),l_op1_e3_l_8_385),l_op1_e3_l_20_389),l_op1_e3_l_25_391),l__t_395,l__t_394,l__t_395,RAdd(RAdd(RMul(RMul(-0.4e1,RMul(l_op1_e3_l_8_385,l_op1_e3_l_8_385)),l_op1_e3_l_20_389),RMul(RMul(0.1e2,l_op1_e3_l_8_385),l_op1_e3_l_11_387)),RMul(0.2e1,l_op1_e3_l_20_389))];
                real[3] l__t_397 = EigenVals3x3(TensorRef<[3,3]>(t_396));
                if (GT<real>(RDiv(RNeg(Subscript<real[3]>(l__t_397,2)),RAdd(globals.fBias,Sqrt(VDot<3,4>(v_390,v_390)))),globals.fStrTh)) {
                  bool l_birth_398;
                  if (GTE<real>(0.e0,globals.fMaskTh)) {
                    l_birth_398 = true;
                  } else {
                    l_birth_398 = false;
                  }
                  l__t_399 = l_birth_398;
                } else {
                  l__t_399 = false;
                }
                l__t_400 = l__t_399;
              } else {
                l__t_400 = false;
              }
              if (l__t_400) {
                tensor[3] _arg_401 = PACK(v_366);
                new point(_arg_401,l_hh_337);
                l_born_402 = IAdd(l_born_269,1);
              } else {
                l_born_402 = l_born_269;
              }
              l_born_403 = l_born_402;
            } else {
              l_born_403 = l_born_269;
            }
            l_born_404 = l_born_403;
          } else {
            int l__t_407;
            bool l__t_406;
            if (l__t_343) {
              bool l__t_405;
              if (GT<int>(globals.iter,0)) {
                l__t_405 = EQ<int>(0,IMod(globals.iter,globals.pcp));
              } else {
                l__t_405 = false;
              }
              l__t_406 = l__t_405;
            } else {
              l__t_406 = false;
            }
            if (l__t_406) {
              l__t_407 = ISub(IMul(IMod(IDiv(globals.iter,globals.pcp),2),2),1);
            } else {
              l__t_407 = 0;
            }
            if (LT<int>(l__t_407,0)) {
              if (GT<real>(l__t_300,0.e0)) {
                if (GT<int>(l__t_301,globals.nnmax)) {
                  real l__t_408 = urnd$5B2A(VIndex<3,4,0>(v_336));
                  real l__t_409 = urnd$5B2A(VIndex<3,4,1>(v_336));
                  real l__t_410 = urnd$5B2A(VIndex<3,4,2>(v_336));
                  if (LT<real>(MathFn<fmod>(RAdd(RAdd(l__t_408,l__t_409),l__t_410),0.1e1),RDiv(IntToReal(ISub(l__t_301,globals.nnmax)),l__t_314))) {
                    die;
                  }
                }
              }
            }
            l_born_404 = l_born_269;
          }
          l_born_411 = l_born_404;
        } else {
          l_born_411 = l_born_269;
        }
        l_born_412 = l_born_411;
      } else {
        l_born_412 = l_born_269;
      }
      l_born_163 = l_born_412;
      l_closest_164 = l_rad_302;
      l_mvmt_165 = l_mvmt_340;
      l_trav_166 = l_trav_341;
      l_nfs_167 = self.nfs;
      l_found_168 = self.found;
      v_169 = v_342;
      l_hh_170 = l_hh_337;
      v_171 = v_336;
    }
    self.pos = PACK(v_171);
    self._pos = PACK(v_171);
    self.hh = l_hh_170;
    self.step = PACK(v_169);
    self.found = l_found_168;
    self.nfs = l_nfs_167;
    self.trav = l_trav_166;
    self.mvmt = l_mvmt_165;
    self.closest = l_closest_164;
    self.born = l_born_163;
    self.first = false;
    active;
  }
}
//***** CREATE COLLECTION *****
  {
    for i_ii_416 = 0 to ISub(Length<tensor[3]>(globals.ipos),1) {
      new point(Subscript<tensor[3][]>(globals.ipos,i_ii_416),0.1e1);
    }
  }
//***** GLOBAL UPDATE *****
  {
    bool l__t_440;
    id(point) ix_436;
    id(point) ix_434;
    id(point) ix_431;
    id(point) ix_428;
    id(point) ix_423;
    id(point) ix_421;
    int l__t_418;
    int l_pop_417 = NumStrands<active>();
    if (NEQ<int>(l_pop_417,globals.popLast)) {
      l__t_418 = 1;
    } else {
      l__t_418 = 0;
    }
    real l__t_419 = IntToReal(l__t_418);
    real l_rpc_420 = RAdd(l__t_419,RMul(globals.pchist,RSub(globals.rpc,l__t_419)));
    globals.rpc = l_rpc_420;
    mapreduce {
      bool l_res_422 = all { all$5B7B  (ix_421) | ix_421 in all }
    }
    mapreduce {
      real l_res_424 = sum<real> { mean$5B82  (ix_423) | ix_423 in all }
    }
    int t_425 = NumStrands<all>();
    real l_rNum_426 = IntToReal(t_425);
    real l_percfound_427 = RMul(0.1e3,RDiv(l_res_424,l_rNum_426));
    mapreduce {
      real l_res_429 = sum<real> { mean$5B84  (ix_428) | ix_428 in all }
    }
    real l_mean_430 = RDiv(l_res_429,l_rNum_426);
    mapreduce {
      real l_res_432 = sum<real> { mean$5B88  (ix_431,l_mean_430) | ix_431 in all }
    }
    real l_covcl_433 = RDiv(RMul(Sqrt(RDiv(l_res_432,l_rNum_426)),l_rNum_426),l_res_429);
    mapreduce {
      real l_res_435 = max<real> { max$5B8A  (ix_434) | ix_434 in all }
    }
    mapreduce {
      real l_res_437 = sum<real> { mean$5B8C  (ix_436) | ix_436 in all }
    }
    print("======= finished iter ",globals.iter," w/ ",l_pop_417,")","; %found=",l_percfound_427,"; mean(hh)=",RDiv(l_res_437,l_rNum_426),"; mean(cl)=",l_mean_430,"; COV(cl)=",l_covcl_433,"; max(mvmt)=",l_res_435,"; pc=",l__t_418,"; rpc=",l_rpc_420,"\n");
    if (l_res_422) {
      bool l__t_439;
      if (LT<real>(l_covcl_433,globals.geoEps)) {
        bool l__t_438;
        if (LT<real>(l_res_435,globals.mvmtEps)) {
          l__t_438 = LT<real>(l_rpc_420,globals.rpcEps);
        } else {
          l__t_438 = false;
        }
        l__t_439 = l__t_438;
      } else {
        l__t_439 = false;
      }
      l__t_440 = l__t_439;
    } else {
      l__t_440 = false;
    }
    if (l__t_440) {
      print("======= Stabilizing ",l_pop_417," (iter ",globals.iter,")","; COV(cl)=",l_covcl_433," < ",globals.geoEps,"; max(mvmt)=",l_res_435," < ",globals.mvmtEps,"; rpc=",l_rpc_420," < ",globals.rpcEps,"\n");
      stabilize_all;
    } else {
      print("======= Stabilizing ",l_pop_417," (iter ",globals.iter,")","; COV(cl)=",l_covcl_433," > ",globals.geoEps,"; max(mvmt)=",l_res_435," > ",globals.mvmtEps,"; rpc=",l_rpc_420," > ",globals.rpcEps,"\n");
    }
    globals.iter = IAdd(globals.iter,1);
    globals.popLast = l_pop_417;
    return
  }
#### end program ####
##### TreeIR: after contraction ####
//***** PROPERTIES *****
  GlobalInit StabilizeAll GlobalReduce StrandSets GlobalUpdate NewStrands StrandCommunication StrandsMayDie HasInputs HasGlobals ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
//***** CONSTS *****
//***** INPUTS *****
input femData(Mesh) meshData;
input femData(Space) 0space07C6_intermedateGlobal;
input femData(FemFunc) 0data07C8_intermedateGlobal;
input real fStrTh;
input real fMaskTh;
input real fBias;
input real tipd;
input real mabd;
input real travMax;
input int nfsMax;
input real gdeTest;
input real gdeBack;
input real gdeOppor;
input real fsEps;
input real geoEps;
input real mvmtEps;
input real rpcEps;
input real pcmvEps;
input real isoval;
input int verb;
input real sfs;
input real hist;
input int pcp;
input tensor[3][] ipos;
input int fDim;
//***** CONST INIT *****
  {
    globals.fMaskTh = 0.e0;
    globals.fBias = 0.e0;
    globals.tipd = 0.1e1;
    globals.mabd = 0.75e0;
    globals.travMax = 0.1e2;
    globals.nfsMax = 20;
    globals.gdeTest = 0.5e0;
    globals.gdeBack = 0.5e0;
    globals.gdeOppor = 0.12e1;
    globals.geoEps = 0.1e0;
    globals.mvmtEps = 0.1e-1;
    globals.rpcEps = 0.1e-1;
    globals.pcmvEps = 0.3e0;
    globals.isoval = 0.e0;
    globals.verb = 0;
    globals.sfs = 0.5e0;
    globals.hist = 0.5e0;
    globals.pcp = 5;
    globals.fDim = 2;
  }
//***** GLOBALS *****
global int nnmin;
global int nnmax;
global real rad;
global real pchist;
varying global int iter;
varying global real rpc;
varying global int popLast;
//***** FUNCTIONS *****
  function real urnd (globals, real p_x_0) {
    if (EQ<real>(p_x_0,0.e0)) {
      return 0.e0
    }
    real l_l2_1 = MathFn<log2>(Abs<real>(p_x_0));
    real l__Pow_2_2 = RMul(0.2e1,0.2e1);
    real l__Pow5__3 = RMul(0.2e1,RMul(l__Pow_2_2,l__Pow_2_2));
    real l__Pow10__4 = RMul(l__Pow5__3,l__Pow5__3);
    return MathFn<fmod>(RMul(MathFn<pow>(0.2e1,RSub(RSub(l_l2_1,MathFn<floor>(l_l2_1)),0.1e1)),RAdd(RMul(l__Pow10__4,l__Pow10__4),IntToReal(IMul(2,globals.iter)))),0.1e1)
  }
  function tensor[3] fStep (&tensor[3] p_s_5) {
    bool l__t_30;
    tensor[3][3] l_E_23;
    real[3] l_evals_22;
    real l_x_6 = TensorIndex<&tensor[3],[0]>(p_s_5);
    real l_y_7 = TensorIndex<&tensor[3],[1]>(p_s_5);
    real l_z_8 = TensorIndex<&tensor[3],[2]>(p_s_5);
    real l_op1_e3_l_6_9 = RMul(l_x_6,l_x_6);
    real l_op1_e3_l_7_10 = RMul(l_y_7,l_y_7);
    real l_op1_e3_l_8_11 = RMul(l_z_8,l_z_8);
    real l_op1_e3_l_9_12 = RAdd(RAdd(l_op1_e3_l_6_9,l_op1_e3_l_7_10),l_op1_e3_l_8_11);
    real l_op1_e3_l_11_13 = Cos(l_op1_e3_l_9_12);
    real l_op1_e3_l_14_14 = RMul(l_z_8,l_op1_e3_l_8_11);
    real l_op1_e3_l_20_15 = Sin(l_op1_e3_l_9_12);
    real l_op1_e3_l_25_16 = RMul(RMul(0.2e1,l_op1_e3_l_8_11),l_op1_e3_l_11_13);
    real l_r_17 = RMul(-0.4e1,l_x_6);
    real l__t_18 = RMul(RMul(RMul(l_r_17,l_y_7),l_op1_e3_l_8_11),l_op1_e3_l_20_15);
    real l__t_19 = RAdd(RMul(RMul(l_r_17,l_op1_e3_l_14_14),l_op1_e3_l_20_15),RMul(RMul(RMul(0.4e1,l_x_6),l_z_8),l_op1_e3_l_11_13));
    real l__t_20 = RAdd(RMul(RMul(RMul(-0.4e1,l_y_7),l_op1_e3_l_14_14),l_op1_e3_l_20_15),RMul(RMul(RMul(0.4e1,l_y_7),l_z_8),l_op1_e3_l_11_13));
    tensor[3,3] t_21 = <tensor[3,3]>[RAdd(RMul(RMul(RMul(-0.4e1,l_op1_e3_l_6_9),l_op1_e3_l_8_11),l_op1_e3_l_20_15),l_op1_e3_l_25_16),l__t_18,l__t_19,l__t_18,RAdd(RMul(RMul(RMul(-0.4e1,l_op1_e3_l_7_10),l_op1_e3_l_8_11),l_op1_e3_l_20_15),l_op1_e3_l_25_16),l__t_20,l__t_19,l__t_20,RAdd(RAdd(RMul(RMul(-0.4e1,RMul(l_op1_e3_l_8_11,l_op1_e3_l_8_11)),l_op1_e3_l_20_15),RMul(RMul(0.1e2,l_op1_e3_l_8_11),l_op1_e3_l_11_13)),RMul(0.2e1,l_op1_e3_l_20_15))];
    (l_evals_22,l_E_23) = EigenVecs3x3(TensorRef<[3,3]>(t_21));
    &tensor[3] l__t_24 = Subscript<tensor[3][3]>(l_E_23,2);
    real l_op1_e3_l_6_25 = RNeg(RDiv(0.1e1,Subscript<real[3]>(l_evals_22,2)));
    real l_op1_e3_l_7_26 = VDot<3,4>(LOAD_0(l__t_24),VEC3{4}(RMul(RMul(RMul(0.2e1,l_x_6),l_op1_e3_l_8_11),l_op1_e3_l_11_13),RMul(RMul(RMul(0.2e1,l_y_7),l_op1_e3_l_8_11),l_op1_e3_l_11_13),RAdd(RMul(RMul(0.2e1,l_op1_e3_l_14_14),l_op1_e3_l_11_13),RMul(RMul(0.2e1,l_z_8),l_op1_e3_l_20_15))));
    vec3{4} v_27 = VEC3{4}(RMul(RMul(l_op1_e3_l_6_25,TensorIndex<&tensor[3],[0]>(l__t_24)),l_op1_e3_l_7_26),RMul(RMul(l_op1_e3_l_6_25,TensorIndex<&tensor[3],[1]>(l__t_24)),l_op1_e3_l_7_26),RMul(RMul(l_op1_e3_l_6_25,TensorIndex<&tensor[3],[2]>(l__t_24)),l_op1_e3_l_7_26));
    real l__t_28 = VIndex<3,4,0>(v_27);
    vec3{4} v_29 = v_27;
    if (BNot(EQ<real>(l__t_28,l__t_28))) {
      l__t_30 = true;
    } else {
      bool l__t_32;
      real l__t_31 = VIndex<3,4,1>(v_29);
      if (BNot(EQ<real>(l__t_31,l__t_31))) {
        l__t_32 = true;
      } else {
        real l__t_33 = VIndex<3,4,2>(v_29);
        l__t_32 = BNot(EQ<real>(l__t_33,l__t_33));
      }
      l__t_30 = l__t_32;
    }
    if (l__t_30) {
      tensor[3] _arg_34 = <tensor[3]>[+inf,+inf,+inf];
      return _arg_34
    }
    tensor[3] _arg_35 = PACK(v_29);
    return _arg_35
  }
  function tensor[3,3] fPerp (&tensor[3] p_s_36) {
    tensor[3][3] l__t_54;
    real[3] l_evals_53;
    real l_x_37 = TensorIndex<&tensor[3],[0]>(p_s_36);
    real l_y_38 = TensorIndex<&tensor[3],[1]>(p_s_36);
    real l_z_39 = TensorIndex<&tensor[3],[2]>(p_s_36);
    real l_op1_e3_l_11_40 = RMul(l_x_37,l_x_37);
    real l_op1_e3_l_12_41 = RMul(l_y_38,l_y_38);
    real l_op1_e3_l_13_42 = RMul(l_z_39,l_z_39);
    real l_op1_e3_l_14_43 = RAdd(RAdd(l_op1_e3_l_11_40,l_op1_e3_l_12_41),l_op1_e3_l_13_42);
    real l_op1_e3_l_17_44 = Sin(l_op1_e3_l_14_43);
    real l_op1_e3_l_23_45 = Cos(l_op1_e3_l_14_43);
    real l_op1_e3_l_25_46 = RMul(RMul(0.2e1,l_op1_e3_l_13_42),l_op1_e3_l_23_45);
    real l_r_47 = RMul(-0.4e1,l_x_37);
    real l__t_48 = RMul(RMul(RMul(l_r_47,l_y_38),l_op1_e3_l_13_42),l_op1_e3_l_17_44);
    real l_op1_e3_l_16_49 = RMul(l_z_39,l_op1_e3_l_13_42);
    real l__t_50 = RAdd(RMul(RMul(l_r_47,l_op1_e3_l_16_49),l_op1_e3_l_17_44),RMul(RMul(RMul(0.4e1,l_x_37),l_z_39),l_op1_e3_l_23_45));
    real l__t_51 = RAdd(RMul(RMul(RMul(-0.4e1,l_y_38),l_op1_e3_l_16_49),l_op1_e3_l_17_44),RMul(RMul(RMul(0.4e1,l_y_38),l_z_39),l_op1_e3_l_23_45));
    tensor[3,3] t_52 = <tensor[3,3]>[RAdd(RMul(RMul(RMul(-0.4e1,l_op1_e3_l_11_40),l_op1_e3_l_13_42),l_op1_e3_l_17_44),l_op1_e3_l_25_46),l__t_48,l__t_50,l__t_48,RAdd(RMul(RMul(RMul(-0.4e1,l_op1_e3_l_12_41),l_op1_e3_l_13_42),l_op1_e3_l_17_44),l_op1_e3_l_25_46),l__t_51,l__t_50,l__t_51,RAdd(RAdd(RMul(RMul(-0.4e1,RMul(l_op1_e3_l_13_42,l_op1_e3_l_13_42)),l_op1_e3_l_17_44),RMul(RMul(0.1e2,l_op1_e3_l_13_42),l_op1_e3_l_23_45)),RMul(0.2e1,l_op1_e3_l_17_44))];
    (l_evals_53,l__t_54) = EigenVecs3x3(TensorRef<[3,3]>(t_52));
    &tensor[3] l_E2_55 = Subscript<tensor[3][3]>(l__t_54,2);
    vec3{4} v_56 = VScale<3,4>(TensorIndex<&tensor[3],[0]>(l_E2_55),LOAD_0(l_E2_55));
    vec3{4} v_57 = VScale<3,4>(TensorIndex<&tensor[3],[1]>(l_E2_55),LOAD_0(l_E2_55));
    vec3{4} v_58 = VScale<3,4>(TensorIndex<&tensor[3],[2]>(l_E2_55),LOAD_0(l_E2_55));
    real l_r_59 = RSub(0.1e1,VIndex<3,4,0>(v_56));
    real l_r_60 = RSub(0.e0,VIndex<3,4,1>(v_56));
    real l_r_61 = RSub(0.e0,VIndex<3,4,2>(v_56));
    vec3{4} v_62 = VEC3{4}(l_r_59,l_r_60,l_r_61);
    real l_r_63 = RSub(0.e0,VIndex<3,4,0>(v_57));
    real l_r_64 = RSub(0.1e1,VIndex<3,4,1>(v_57));
    real l_r_65 = RSub(0.e0,VIndex<3,4,2>(v_57));
    vec3{4} v_66 = VEC3{4}(l_r_63,l_r_64,l_r_65);
    real l_r_67 = RSub(0.e0,VIndex<3,4,0>(v_58));
    real l_r_68 = RSub(0.e0,VIndex<3,4,1>(v_58));
    real l_r_69 = RSub(0.1e1,VIndex<3,4,2>(v_58));
    vec3{4} v_70 = VEC3{4}(l_r_67,l_r_68,l_r_69);
    real l_t_71 = RAdd(RAdd(VDot<3,4>(v_62,v_62),VDot<3,4>(v_66,v_66)),VDot<3,4>(v_70,v_70));
    if (BNot(EQ<real>(l_t_71,l_t_71))) {
      tensor[3,3] t_72 = <tensor[3,3]>[0.e0,0.e0,0.e0,0.e0,0.e0,0.e0,0.e0,0.e0,0.e0];
      return t_72
    }
    tensor[3,3] t_73 = <tensor[3,3]>[l_r_59,l_r_60,l_r_61,l_r_63,l_r_64,l_r_65,l_r_67,l_r_68,l_r_69];
    return t_73
  }
  function bool all (world, id(point) p_P_74) {
    return p_P_74.found
  }
  function real mean (world, id(point) p_P_75) {
    real l__t_76;
    if (p_P_75.found) {
      l__t_76 = 0.1e1;
    } else {
      l__t_76 = 0.e0;
    }
    return l__t_76
  }
  function real mean (world, id(point) p_P_77) {
    return p_P_77.closest
  }
  function real mean (world, id(point) p_P_78,real p_meancl_79) {
    real l_op1_e3_l_2_80 = RSub(p_P_78.closest,p_meancl_79);
    return RMul(l_op1_e3_l_2_80,l_op1_e3_l_2_80)
  }
  function real max (world, id(point) p_P_81) {
    return p_P_81.mvmt
  }
  function real mean (world, id(point) p_P_82) {
    return p_P_82.hh
  }
//***** GLOBAL VARIABLE INIT *****
  {
    int l__t_88;
    int l__t_86;
    femData(MeshCell)[] l__t_83;
    l__t_83 = <femData(MeshCell)[]>{};
    for i__t_84 = 0 to ISub(ExtractFemItem<int,NumCell(Mesh)>(globals.meshData),1) {
      l__t_83 = Append<femData(MeshCell),femData(MeshCell)>(l__t_83,LoadFem<femData(MeshCell)>(globals.meshData,i__t_84));
    }
    bool l__t_85 = EQ<int>(2,globals.fDim);
    if (l__t_85) {
      l__t_86 = 6;
    } else {
      int l__t_87;
      if (EQ<int>(1,globals.fDim)) {
        l__t_87 = 2;
      } else {
        l__t_87 = 0;
      }
      l__t_86 = l__t_87;
    }
    globals.nnmin = l__t_86;
    if (l__t_85) {
      l__t_88 = 8;
    } else {
      int l__t_89;
      if (EQ<int>(1,globals.fDim)) {
        l__t_89 = 3;
      } else {
        l__t_89 = 0;
      }
      l__t_88 = l__t_89;
    }
    globals.nnmax = l__t_88;
    globals.rad = RDiv(RMul(globals.tipd,0.3e1),0.2e1);
    globals.pchist = MathFn<pow>(globals.hist,RDiv(0.1e1,IntToReal(IMul(2,globals.pcp))));
    globals.iter = 0;
    globals.rpc = 0.1e1;
    globals.popLast = -1;
  }
//***** STRAND *****
strand point (&tensor[3] p_p0_90,real p_hh0_91) in 3D {
  varying output tensor[3] pos;
  varying output tensor[3] _pos;
  real ID;
  varying real hh;
  varying tensor[3] step;
  varying bool found;
  varying int nfs;
  varying real trav;
  varying real mvmt;
  varying real closest;
  varying int born;
  varying bool first;
  initialize (globals) {
    real l__t_92 = urnd$5B2A(TensorIndex<&tensor[3],[0]>(p_p0_90));
    real l__t_93 = urnd$5B2A(TensorIndex<&tensor[3],[1]>(p_p0_90));
    real l__t_94 = urnd$5B2A(TensorIndex<&tensor[3],[2]>(p_p0_90));
    self.pos = TensorCopy<[3]>(p_p0_90);
    self._pos = TensorCopy<[3]>(p_p0_90);
    self.ID = MathFn<floor>(RMul(0.1e7,MathFn<fmod>(RAdd(RAdd(l__t_92,l__t_93),l__t_94),0.1e1)));
    self.hh = p_hh0_91;
    self.step = <tensor[3]>[0.e0,0.e0,0.e0];
    self.found = false;
    self.nfs = 0;
    self.trav = 0.e0;
    self.mvmt = 0.1e1;
    self.closest = globals.rad;
    self.born = 0;
    self.first = true;
  }
  update (world, globals) {
    vec3{4} v_171;
    real l_hh_170;
    vec3{4} v_169;
    bool l_found_168;
    int l_nfs_167;
    real l_trav_166;
    real l_mvmt_165;
    real l_closest_164;
    int l_born_163;
    bool l__t_124;
    bool l__t_103;
    if (self.first) {
      bool l__t_97;
      bool l_vv_96;
      if (GT<int>(globals.verb,0)) {
        l_vv_96 = false;
      } else {
        l_vv_96 = false;
      }
      if (l_vv_96) {
        l__t_97 = true;
      } else {
        l__t_97 = GT<int>(globals.verb,1);
      }
      if (l__t_97) {
        print(self.ID,"(i#",globals.iter," @ ",TensorRef<[3]>(self.pos),"): ");
        print(" HELLO!\n");
      }
    }
    vec3{4} v_98 = VEC3{4}(0.e0,0.e0,0.e0);
    vec3{4} v_99 = VSub<3,4>(LOAD_0(TensorRef<[3]>(self.pos)),v_98);
    real l__t_100 = Sqrt(VDot<3,4>(v_99,v_99));
    bool l__t_101 = LT<real>(l__t_100,0.4e1);
    vec3{4} v_102 = v_98;
    if (l__t_101) {
      l__t_103 = GT<real>(l__t_100,0.3e1);
    } else {
      l__t_103 = false;
    }
    if (l__t_103) {
      bool l__t_123;
      real l_x_104 = TensorIndex<&tensor[3],[0]>(TensorRef<[3]>(self.pos));
      real l_y_105 = TensorIndex<&tensor[3],[1]>(TensorRef<[3]>(self.pos));
      real l_z_106 = TensorIndex<&tensor[3],[2]>(TensorRef<[3]>(self.pos));
      real l_op1_e3_l_6_107 = RMul(l_x_104,l_x_104);
      real l_op1_e3_l_7_108 = RMul(l_y_105,l_y_105);
      real l_op1_e3_l_8_109 = RMul(l_z_106,l_z_106);
      real l_op1_e3_l_9_110 = RAdd(RAdd(l_op1_e3_l_6_107,l_op1_e3_l_7_108),l_op1_e3_l_8_109);
      real l_op1_e3_l_11_111 = Cos(l_op1_e3_l_9_110);
      real l_op1_e3_l_14_112 = RMul(l_z_106,l_op1_e3_l_8_109);
      real l_op1_e3_l_20_113 = Sin(l_op1_e3_l_9_110);
      vec3{4} v_114 = VEC3{4}(RMul(RMul(RMul(0.2e1,l_x_104),l_op1_e3_l_8_109),l_op1_e3_l_11_111),RMul(RMul(RMul(0.2e1,l_y_105),l_op1_e3_l_8_109),l_op1_e3_l_11_111),RAdd(RMul(RMul(0.2e1,l_op1_e3_l_14_112),l_op1_e3_l_11_111),RMul(RMul(0.2e1,l_z_106),l_op1_e3_l_20_113)));
      real l_op1_e3_l_25_115 = RMul(RMul(0.2e1,l_op1_e3_l_8_109),l_op1_e3_l_11_111);
      real l_r_116 = RMul(-0.4e1,l_x_104);
      real l__t_117 = RMul(RMul(RMul(l_r_116,l_y_105),l_op1_e3_l_8_109),l_op1_e3_l_20_113);
      real l__t_118 = RAdd(RMul(RMul(l_r_116,l_op1_e3_l_14_112),l_op1_e3_l_20_113),RMul(RMul(RMul(0.4e1,l_x_104),l_z_106),l_op1_e3_l_11_111));
      real l__t_119 = RAdd(RMul(RMul(RMul(-0.4e1,l_y_105),l_op1_e3_l_14_112),l_op1_e3_l_20_113),RMul(RMul(RMul(0.4e1,l_y_105),l_z_106),l_op1_e3_l_11_111));
      tensor[3,3] t_120 = <tensor[3,3]>[RAdd(RMul(RMul(RMul(-0.4e1,l_op1_e3_l_6_107),l_op1_e3_l_8_109),l_op1_e3_l_20_113),l_op1_e3_l_25_115),l__t_117,l__t_118,l__t_117,RAdd(RMul(RMul(RMul(-0.4e1,l_op1_e3_l_7_108),l_op1_e3_l_8_109),l_op1_e3_l_20_113),l_op1_e3_l_25_115),l__t_119,l__t_118,l__t_119,RAdd(RAdd(RMul(RMul(-0.4e1,RMul(l_op1_e3_l_8_109,l_op1_e3_l_8_109)),l_op1_e3_l_20_113),RMul(RMul(0.1e2,l_op1_e3_l_8_109),l_op1_e3_l_11_111)),RMul(0.2e1,l_op1_e3_l_20_113))];
      real[3] l__t_121 = EigenVals3x3(TensorRef<[3,3]>(t_120));
      if (GT<real>(RDiv(RNeg(Subscript<real[3]>(l__t_121,2)),RAdd(globals.fBias,Sqrt(VDot<3,4>(v_114,v_114)))),globals.fStrTh)) {
        bool l__t_122;
        if (GTE<real>(0.e0,globals.fMaskTh)) {
          l__t_122 = true;
        } else {
          l__t_122 = false;
        }
        l__t_123 = l__t_122;
      } else {
        l__t_123 = false;
      }
      l__t_124 = l__t_123;
    } else {
      l__t_124 = false;
    }
    if (BNot(l__t_124)) {
      bool l__t_126;
      bool l_vv_125;
      if (GT<int>(globals.verb,0)) {
        l_vv_125 = false;
      } else {
        l_vv_125 = false;
      }
      if (l_vv_125) {
        l__t_126 = true;
      } else {
        l__t_126 = GT<int>(globals.verb,1);
      }
      if (l__t_126) {
        bool l__t_127;
        print(self.ID,"(i#",globals.iter," @ ",TensorRef<[3]>(self.pos),"): ");
        if (l__t_101) {
          l__t_127 = GT<real>(l__t_100,0.3e1);
        } else {
          l__t_127 = false;
        }
        real l_x_128 = TensorIndex<&tensor[3],[0]>(TensorRef<[3]>(self.pos));
        real l_y_129 = TensorIndex<&tensor[3],[1]>(TensorRef<[3]>(self.pos));
        real l_z_130 = TensorIndex<&tensor[3],[2]>(TensorRef<[3]>(self.pos));
        real l_op1_e3_l_6_131 = RMul(l_x_128,l_x_128);
        real l_op1_e3_l_7_132 = RMul(l_y_129,l_y_129);
        real l_op1_e3_l_8_133 = RMul(l_z_130,l_z_130);
        real l_op1_e3_l_9_134 = RAdd(RAdd(l_op1_e3_l_6_131,l_op1_e3_l_7_132),l_op1_e3_l_8_133);
        real l_op1_e3_l_11_135 = Cos(l_op1_e3_l_9_134);
        real l_op1_e3_l_14_136 = RMul(l_z_130,l_op1_e3_l_8_133);
        real l_op1_e3_l_20_137 = Sin(l_op1_e3_l_9_134);
        vec3{4} v_138 = VEC3{4}(RMul(RMul(RMul(0.2e1,l_x_128),l_op1_e3_l_8_133),l_op1_e3_l_11_135),RMul(RMul(RMul(0.2e1,l_y_129),l_op1_e3_l_8_133),l_op1_e3_l_11_135),RAdd(RMul(RMul(0.2e1,l_op1_e3_l_14_136),l_op1_e3_l_11_135),RMul(RMul(0.2e1,l_z_130),l_op1_e3_l_20_137)));
        real l_op1_e3_l_25_139 = RMul(RMul(0.2e1,l_op1_e3_l_8_133),l_op1_e3_l_11_135);
        real l_r_140 = RMul(-0.4e1,l_x_128);
        real l__t_141 = RMul(RMul(RMul(l_r_140,l_y_129),l_op1_e3_l_8_133),l_op1_e3_l_20_137);
        real l__t_142 = RAdd(RMul(RMul(l_r_140,l_op1_e3_l_14_136),l_op1_e3_l_20_137),RMul(RMul(RMul(0.4e1,l_x_128),l_z_130),l_op1_e3_l_11_135));
        real l__t_143 = RAdd(RMul(RMul(RMul(-0.4e1,l_y_129),l_op1_e3_l_14_136),l_op1_e3_l_20_137),RMul(RMul(RMul(0.4e1,l_y_129),l_z_130),l_op1_e3_l_11_135));
        tensor[3,3] t_144 = <tensor[3,3]>[RAdd(RMul(RMul(RMul(-0.4e1,l_op1_e3_l_6_131),l_op1_e3_l_8_133),l_op1_e3_l_20_137),l_op1_e3_l_25_139),l__t_141,l__t_142,l__t_141,RAdd(RMul(RMul(RMul(-0.4e1,l_op1_e3_l_7_132),l_op1_e3_l_8_133),l_op1_e3_l_20_137),l_op1_e3_l_25_139),l__t_143,l__t_142,l__t_143,RAdd(RAdd(RMul(RMul(-0.4e1,RMul(l_op1_e3_l_8_133,l_op1_e3_l_8_133)),l_op1_e3_l_20_137),RMul(RMul(0.1e2,l_op1_e3_l_8_133),l_op1_e3_l_11_135)),RMul(0.2e1,l_op1_e3_l_20_137))];
        real[3] l__t_145 = EigenVals3x3(TensorRef<[3,3]>(t_144));
        print("!inside=",l__t_127," || fStrength=",RDiv(RNeg(Subscript<real[3]>(l__t_145,2)),RAdd(globals.fBias,Sqrt(VDot<3,4>(v_138,v_138))))," <= fStrTh=",globals.fStrTh," || fMask(pos)=",0.e0," < fMaskTh=",globals.fMaskTh," || fTest(pos)=",true," ==>DIE\n");
      }
      die;
    }
    if (GT<real>(globals.travMax,0.e0)) {
      if (GT<real>(self.trav,globals.travMax)) {
        die;
      }
    }
    if (BNot(self.found)) {
      bool l__t_160;
      bool l_vv_159;
      bool l_found_158;
      int l_nfs_157;
      real l_trav_156;
      real l_mvmt_155;
      if (GT<int>(globals.nfsMax,0)) {
        if (GT<int>(self.nfs,globals.nfsMax)) {
          bool l__t_147;
          bool l_vv_146;
          if (GT<int>(globals.verb,0)) {
            l_vv_146 = false;
          } else {
            l_vv_146 = false;
          }
          if (l_vv_146) {
            l__t_147 = true;
          } else {
            l__t_147 = GT<int>(globals.verb,1);
          }
          if (l__t_147) {
            print(self.ID,"(i#",globals.iter," @ ",TensorRef<[3]>(self.pos),"): ");
            print("nfs=",self.nfs," > nfsMax=",globals.nfsMax," || trav=",self.trav," > travMax=",globals.travMax," =>DIE\n");
          }
          die;
        }
      }
      &tensor[3] l__t_148 = fStep$5B52(TensorRef<[3]>(self.pos));
      vec3{4} v_149 = VScale<3,4>(globals.sfs,LOAD_0(l__t_148));
      vec3{4} v_150 = VAdd<3,4>(LOAD_0(TensorRef<[3]>(self.pos)),v_149);
      real l_op1_e3_l_11_151 = RDiv(Sqrt(RMul(RMul(globals.sfs,globals.sfs),VDot<3,4>(LOAD_0(l__t_148),LOAD_0(l__t_148)))),globals.tipd);
      real l_mvmt_152 = RAdd(l_op1_e3_l_11_151,RMul(globals.hist,RSub(self.mvmt,l_op1_e3_l_11_151)));
      vec3{4} v_153 = v_149;
      vec3{4} v_154 = v_150;
      if (GT<real>(l_mvmt_152,globals.fsEps)) {
        l_mvmt_155 = l_mvmt_152;
        l_trav_156 = RAdd(self.trav,l_op1_e3_l_11_151);
        l_nfs_157 = IAdd(self.nfs,1);
        l_found_158 = self.found;
      } else {
        l_mvmt_155 = 0.1e1;
        l_trav_156 = 0.e0;
        l_nfs_157 = self.nfs;
        l_found_158 = true;
      }
      if (GT<int>(globals.verb,0)) {
        l_vv_159 = false;
      } else {
        l_vv_159 = false;
      }
      if (l_vv_159) {
        l__t_160 = true;
      } else {
        l__t_160 = GT<int>(globals.verb,1);
      }
      if (l__t_160) {
        tensor[3] _arg_161 = PACK(v_154);
        print(self.ID,"(i#",globals.iter," @ ",TensorRef<[3]>(_arg_161),"): ");
        tensor[3] _arg_162 = PACK(v_153);
        print("step=",TensorRef<[3]>(_arg_162),"; mvmt=",l_mvmt_155," => found=",l_found_158,"\n");
      }
      l_born_163 = self.born;
      l_closest_164 = self.closest;
      l_mvmt_165 = l_mvmt_155;
      l_trav_166 = l_trav_156;
      l_nfs_167 = l_nfs_157;
      l_found_168 = l_found_158;
      v_169 = v_153;
      l_hh_170 = self.hh;
      v_171 = v_154;
    } else {
      int l_born_412;
      vec3{4} v_336;
      real l_hh_335;
      bool l__t_317;
      bool l_vv_316;
      real l_rad_302;
      int l__t_301;
      real l__t_300;
      vec3{4} v_299;
      real l_hh_296;
      real l_hh_280;
      vec3{4} v_279;
      int l_born_269;
      real l__t_180;
      vec3{4} v_179;
      int l__t_178;
      if (EQ<int>(0,globals.fDim)) {
        self.pos = TensorCopy<[3]>(TensorRef<[3]>(self.pos));
        stabilize;
      }
      &tensor[3] l__t_172 = fStep$5B52(TensorRef<[3]>(self.pos));
      vec3{4} v_173 = VScale<3,4>(globals.sfs,LOAD_0(l__t_172));
      vec3{4} v_174 = VAdd<3,4>(LOAD_0(TensorRef<[3]>(self.pos)),v_173);
      real l_r_175 = RMul(globals.sfs,globals.sfs);
      real l_trav_176 = RAdd(self.trav,RDiv(Sqrt(RMul(l_r_175,VDot<3,4>(LOAD_0(l__t_172),LOAD_0(l__t_172)))),globals.tipd));
      tensor[3] _arg_177 = PACK(v_174);
      l__t_178 = 0;
      v_179 = v_102;
      l__t_180 = 0.e0;
      id(point)[] t_182 = SphereQuery<3,id(point)>(TensorRef<[3]>(_arg_177),globals.rad);
      vec3{4} v_183 = v_173;
      vec3{4} v_184 = v_174;
      foreach id(point) i_P_181 in t_182 {
        real l__t_195;
        real l__t_191;
        vec3{4} v_185 = VSub<3,4>(LOAD_0(TensorRef<[3]>(i_P_181.pos)),v_184);
        real l_op1_e3_l_12_186 = Sqrt(VDot<3,4>(v_185,v_185));
        vec3{4} v_187 = v_185;
        if (LT<real>(RDiv(l_op1_e3_l_12_186,globals.tipd),globals.fsEps)) {
          if (LTE<real>(self.ID,i_P_181.ID)) {
            die;
          }
        }
        real l__t_188 = RDiv(l_op1_e3_l_12_186,globals.rad);
        real l__t_189 = RDiv(0.2e1,0.3e1);
        bool l__t_190 = LT<real>(l__t_188,l__t_189);
        if (l__t_190) {
          l__t_191 = RAdd(0.1e1,RMul(l__t_188,RAdd(-0.5646e1,RMul(l__t_188,RAdd(0.119835e2,RMul(l__t_188,RAdd(-0.113535e2,RMul(0.40550625e1,l__t_188))))))));
        } else {
          real l__t_193;
          if (LT<real>(l__t_188,0.1e1)) {
            real l_op1_e3_l_50_192 = RSub(l__t_188,l__t_189);
            l__t_193 = RAdd(-0.1e-2,RMul(RMul(RAdd(0.9e-1,RMul(RAdd(-0.54e0,RMul(RSub(0.1215e1,RMul(0.972e0,l_op1_e3_l_50_192)),l_op1_e3_l_50_192)),l_op1_e3_l_50_192)),l_op1_e3_l_50_192),l_op1_e3_l_50_192));
          } else {
            l__t_193 = 0.e0;
          }
          l__t_191 = l__t_193;
        }
        real l_oldE_194 = RAdd(l__t_180,l__t_191);
        if (l__t_190) {
          l__t_195 = RAdd(-0.5646e1,RMul(l__t_188,RAdd(0.23967e2,RMul(l__t_188,RAdd(-0.340605e2,RMul(0.1622025e2,l__t_188))))));
        } else {
          real l__t_197;
          if (LT<real>(l__t_188,0.1e1)) {
            real l_op1_e3_l_73_196 = RSub(RMul(0.3e1,l__t_188),0.2e1);
            l__t_197 = RMul(RMul(0.1234567901e-1,l_op1_e3_l_73_196),RAdd(0.486e1,RMul(l_op1_e3_l_73_196,RAdd(-0.1458e2,RMul(l_op1_e3_l_73_196,RSub(0.1458e2,RMul(0.486e1,l_op1_e3_l_73_196)))))));
          } else {
            l__t_197 = 0.e0;
          }
          l__t_195 = l__t_197;
        }
        real l_r_198 = RMul(l__t_195,RDiv(0.1e1,globals.rad));
        real l_r_199 = RDiv(0.1e1,l_op1_e3_l_12_186);
        l__t_178 = IAdd(l__t_178,1);
        v_179 = VAdd<3,4>(v_179,VEC3{4}(RMul(l_r_199,RMul(l_r_198,VIndex<3,4,0>(v_187))),RMul(l_r_199,RMul(l_r_198,VIndex<3,4,1>(v_187))),RMul(l_r_199,RMul(l_r_198,VIndex<3,4,2>(v_187)))));
        l__t_180 = l_oldE_194;
      }
      if (EQ<int>(0,l__t_178)) {
        bool l__t_264;
        bool l_vv_263;
        int l_born_262;
        bool l__t_260;
        bool l__t_239;
        bool l__t_231;
        bool l_vv_230;
        vec3{4} v_222;
        vec3{4} v_221;
        bool l__t_203;
        int l__t_202;
        bool l__t_201;
        if (GT<int>(globals.pcp,0)) {
          bool l__t_200;
          if (GT<int>(globals.iter,0)) {
            l__t_200 = EQ<int>(0,IMod(globals.iter,globals.pcp));
          } else {
            l__t_200 = false;
          }
          l__t_201 = l__t_200;
        } else {
          l__t_201 = false;
        }
        if (l__t_201) {
          l__t_202 = ISub(IMul(IMod(IDiv(globals.iter,globals.pcp),2),2),1);
        } else {
          l__t_202 = 0;
        }
        if (GT<int>(l__t_202,0)) {
          l__t_203 = LT<int>(self.born,globals.nnmax);
        } else {
          l__t_203 = false;
        }
        if (BNot(l__t_203)) {
          self.pos = PACK(v_184);
          self._pos = PACK(v_184);
          self.step = PACK(v_183);
          self.trav = l_trav_176;
          active;
        }
        tensor[3] _arg_207 = PACK(v_184);
        &tensor[3,3] l__t_208 = fPerp$5B79(_arg_207);
        vec3{4} v_209 = VEC3{4}(globals.tipd,0.e0,0.e0);
        &tensor[3] l_projParam_210 = ProjectLast<&tensor[3,3],[0]>(l__t_208);
        &tensor[3] l_projParam_211 = ProjectLast<&tensor[3,3],[1]>(l__t_208);
        &tensor[3] l_projParam_212 = ProjectLast<&tensor[3,3],[2]>(l__t_208);
        vec3{4} v_213 = VEC3{4}(VDot<3,4>(LOAD_0(l_projParam_210),v_209),VDot<3,4>(LOAD_0(l_projParam_211),v_209),VDot<3,4>(LOAD_0(l_projParam_212),v_209));
        vec3{4} v_214 = VEC3{4}(0.e0,globals.tipd,0.e0);
        vec3{4} v_215 = VEC3{4}(VDot<3,4>(LOAD_0(l_projParam_210),v_214),VDot<3,4>(LOAD_0(l_projParam_211),v_214),VDot<3,4>(LOAD_0(l_projParam_212),v_214));
        vec3{4} v_216 = VEC3{4}(0.e0,0.e0,globals.tipd);
        vec3{4} v_217 = VEC3{4}(VDot<3,4>(LOAD_0(l_projParam_210),v_216),VDot<3,4>(LOAD_0(l_projParam_211),v_216),VDot<3,4>(LOAD_0(l_projParam_212),v_216));
        vec3{4} v_218 = v_213;
        vec3{4} v_219 = v_215;
        vec3{4} v_220 = v_217;
        if (GT<real>(Sqrt(VDot<3,4>(v_213,v_213)),Sqrt(VDot<3,4>(v_215,v_215)))) {
          v_221 = v_218;
        } else {
          v_221 = v_219;
        }
        if (GT<real>(Sqrt(VDot<3,4>(v_221,v_221)),Sqrt(VDot<3,4>(v_220,v_220)))) {
          v_222 = v_221;
        } else {
          v_222 = v_220;
        }
        real l_op1_e3_l_8_223 = RDiv(0.1e1,Sqrt(VDot<3,4>(v_222,v_222)));
        vec3{4} v_224 = VAdd<3,4>(VAdd<3,4>(VEC3{4}(RMul(RMul(globals.tipd,VIndex<3,4,0>(v_222)),l_op1_e3_l_8_223),RMul(RMul(globals.tipd,VIndex<3,4,1>(v_222)),l_op1_e3_l_8_223),RMul(RMul(globals.tipd,VIndex<3,4,2>(v_222)),l_op1_e3_l_8_223)),LOAD_0(TensorRef<[3]>(self.pos))),v_183);
        tensor[3] _arg_225 = PACK(v_224);
        &tensor[3] l__t_226 = fStep$5B52(_arg_225);
        vec3{4} v_227 = VAdd<3,4>(v_224,VScale<3,4>(globals.sfs,LOAD_0(l__t_226)));
        bool l__t_228 = GT<int>(globals.verb,0);
        vec3{4} v_229 = v_227;
        if (l__t_228) {
          l_vv_230 = false;
        } else {
          l_vv_230 = false;
        }
        if (l_vv_230) {
          l__t_231 = true;
        } else {
          l__t_231 = GT<int>(globals.verb,1);
        }
        if (l__t_231) {
          tensor[3] _arg_232 = PACK(v_184);
          print(self.ID,"(i#",globals.iter," @ ",TensorRef<[3]>(_arg_232),"): ");
          real l__t_233 = urnd$5B2A(VIndex<3,4,0>(v_229));
          real l__t_234 = urnd$5B2A(VIndex<3,4,1>(v_229));
          real l__t_235 = urnd$5B2A(VIndex<3,4,2>(v_229));
          tensor[3] _arg_236 = PACK(v_229);
          print(" 0==nn =>NEW(",TensorRef<[3]>(_arg_236),") w/ ID=",MathFn<floor>(RMul(0.1e7,MathFn<fmod>(RAdd(RAdd(l__t_233,l__t_234),l__t_235),0.1e1))),"\n");
        }
        vec3{4} v_237 = VSub<3,4>(v_184,v_102);
        real l__t_238 = Sqrt(VDot<3,4>(v_237,v_237));
        if (LT<real>(l__t_238,0.4e1)) {
          l__t_239 = GT<real>(l__t_238,0.3e1);
        } else {
          l__t_239 = false;
        }
        if (l__t_239) {
          bool l__t_259;
          real l_x_240 = VIndex<3,4,0>(v_184);
          real l_y_241 = VIndex<3,4,1>(v_184);
          real l_z_242 = VIndex<3,4,2>(v_184);
          real l_op1_e3_l_6_243 = RMul(l_x_240,l_x_240);
          real l_op1_e3_l_7_244 = RMul(l_y_241,l_y_241);
          real l_op1_e3_l_8_245 = RMul(l_z_242,l_z_242);
          real l_op1_e3_l_9_246 = RAdd(RAdd(l_op1_e3_l_6_243,l_op1_e3_l_7_244),l_op1_e3_l_8_245);
          real l_op1_e3_l_11_247 = Cos(l_op1_e3_l_9_246);
          real l_op1_e3_l_14_248 = RMul(l_z_242,l_op1_e3_l_8_245);
          real l_op1_e3_l_20_249 = Sin(l_op1_e3_l_9_246);
          vec3{4} v_250 = VEC3{4}(RMul(RMul(RMul(0.2e1,l_x_240),l_op1_e3_l_8_245),l_op1_e3_l_11_247),RMul(RMul(RMul(0.2e1,l_y_241),l_op1_e3_l_8_245),l_op1_e3_l_11_247),RAdd(RMul(RMul(0.2e1,l_op1_e3_l_14_248),l_op1_e3_l_11_247),RMul(RMul(0.2e1,l_z_242),l_op1_e3_l_20_249)));
          real l_op1_e3_l_25_251 = RMul(RMul(0.2e1,l_op1_e3_l_8_245),l_op1_e3_l_11_247);
          real l_r_252 = RMul(-0.4e1,l_x_240);
          real l__t_253 = RMul(RMul(RMul(l_r_252,l_y_241),l_op1_e3_l_8_245),l_op1_e3_l_20_249);
          real l__t_254 = RAdd(RMul(RMul(l_r_252,l_op1_e3_l_14_248),l_op1_e3_l_20_249),RMul(RMul(RMul(0.4e1,l_x_240),l_z_242),l_op1_e3_l_11_247));
          real l__t_255 = RAdd(RMul(RMul(RMul(-0.4e1,l_y_241),l_op1_e3_l_14_248),l_op1_e3_l_20_249),RMul(RMul(RMul(0.4e1,l_y_241),l_z_242),l_op1_e3_l_11_247));
          tensor[3,3] t_256 = <tensor[3,3]>[RAdd(RMul(RMul(RMul(-0.4e1,l_op1_e3_l_6_243),l_op1_e3_l_8_245),l_op1_e3_l_20_249),l_op1_e3_l_25_251),l__t_253,l__t_254,l__t_253,RAdd(RMul(RMul(RMul(-0.4e1,l_op1_e3_l_7_244),l_op1_e3_l_8_245),l_op1_e3_l_20_249),l_op1_e3_l_25_251),l__t_255,l__t_254,l__t_255,RAdd(RAdd(RMul(RMul(-0.4e1,RMul(l_op1_e3_l_8_245,l_op1_e3_l_8_245)),l_op1_e3_l_20_249),RMul(RMul(0.1e2,l_op1_e3_l_8_245),l_op1_e3_l_11_247)),RMul(0.2e1,l_op1_e3_l_20_249))];
          real[3] l__t_257 = EigenVals3x3(TensorRef<[3,3]>(t_256));
          if (GT<real>(RDiv(RNeg(Subscript<real[3]>(l__t_257,2)),RAdd(globals.fBias,Sqrt(VDot<3,4>(v_250,v_250)))),globals.fStrTh)) {
            bool l__t_258;
            if (GTE<real>(0.e0,globals.fMaskTh)) {
              l__t_258 = true;
            } else {
              l__t_258 = false;
            }
            l__t_259 = l__t_258;
          } else {
            l__t_259 = false;
          }
          l__t_260 = l__t_259;
        } else {
          l__t_260 = false;
        }
        if (l__t_260) {
          tensor[3] _arg_261 = PACK(v_229);
          new point(_arg_261,self.hh);
          l_born_262 = IAdd(self.born,1);
        } else {
          l_born_262 = self.born;
        }
        if (l__t_228) {
          l_vv_263 = false;
        } else {
          l_vv_263 = false;
        }
        if (l_vv_263) {
          l__t_264 = true;
        } else {
          l__t_264 = GT<int>(globals.verb,1);
        }
        if (l__t_264) {
          tensor[3] _arg_265 = PACK(v_184);
          print(self.ID,"(i#",globals.iter," @ ",TensorRef<[3]>(_arg_265),"): ");
          print("nn=0; after birthing mvmt=",self.mvmt,"\n");
        }
        self.pos = PACK(v_184);
        self._pos = PACK(v_184);
        self.step = PACK(v_183);
        self.trav = l_trav_176;
        self.born = l_born_262;
        active;
      } else {
        l_born_269 = self.born;
      }
      tensor[3] _arg_270 = PACK(v_184);
      &tensor[3,3] l__t_271 = fPerp$5B79(_arg_270);
      real l_vdot_272 = VDot<3,4>(LOAD_0(ProjectLast<&tensor[3,3],[0]>(l__t_271)),v_179);
      real l_vdot_273 = VDot<3,4>(LOAD_0(ProjectLast<&tensor[3,3],[1]>(l__t_271)),v_179);
      real l_vdot_274 = VDot<3,4>(LOAD_0(ProjectLast<&tensor[3,3],[2]>(l__t_271)),v_179);
      vec3{4} v_275 = VEC3{4}(l_vdot_272,l_vdot_273,l_vdot_274);
      real l__t_276 = Sqrt(RMul(RMul(self.hh,self.hh),VDot<3,4>(v_275,v_275)));
      vec3{4} v_277 = VScale<3,4>(self.hh,v_275);
      if (GT<real>(l__t_276,globals.tipd)) {
        real l_hh_278 = RMul(self.hh,RDiv(globals.tipd,l__t_276));
        v_279 = VEC3{4}(RMul(l_hh_278,l_vdot_272),RMul(l_hh_278,l_vdot_273),RMul(l_hh_278,l_vdot_274));
        l_hh_280 = l_hh_278;
      } else {
        v_279 = v_277;
        l_hh_280 = self.hh;
      }
      tensor[3] _arg_281 = PACK(VAdd<3,4>(v_184,v_279));
      &tensor[3] l__t_282 = fStep$5B52(_arg_281);
      vec3{4} v_283 = VScale<3,4>(globals.sfs,LOAD_0(l__t_282));
      real l_op1_e3_l_9_284 = Sqrt(VDot<3,4>(v_279,v_279));
      real l_op1_e3_l_10_285 = Sqrt(RMul(l_r_175,VDot<3,4>(LOAD_0(l__t_282),LOAD_0(l__t_282))));
      vec3{4} v_286 = v_283;
      if (GT<real>(RDiv(l_op1_e3_l_10_285,RAdd(RMul(globals.fsEps,globals.tipd),l_op1_e3_l_9_284)),0.5e0)) {
        bool l__t_289;
        bool l_vv_288;
        real l_hh_287 = RMul(l_hh_280,0.5e0);
        if (GT<int>(globals.verb,0)) {
          l_vv_288 = false;
        } else {
          l_vv_288 = false;
        }
        if (l_vv_288) {
          l__t_289 = true;
        } else {
          l__t_289 = GT<int>(globals.verb,1);
        }
        if (l__t_289) {
          tensor[3] _arg_290 = PACK(v_184);
          print(self.ID,"(i#",globals.iter," @ ",TensorRef<[3]>(_arg_290),"): ");
          print("nn=",l__t_178,"; |fs|/|es|=",RDiv(l_op1_e3_l_10_285,l_op1_e3_l_9_284)," > 0.5; trying again with hh=",l_hh_287,"; mvmt=",self.mvmt,"\n");
          tensor[3] _arg_291 = PACK(v_286);
          print("        fs=",TensorRef<[3]>(_arg_291),"\n");
          tensor[3] _arg_292 = PACK(v_279);
          print("        es=",TensorRef<[3]>(_arg_292),"\n");
        }
        self.pos = PACK(v_184);
        self._pos = PACK(v_184);
        self.hh = l_hh_287;
        self.step = PACK(v_183);
        self.trav = l_trav_176;
        self.born = l_born_269;
        active;
      } else {
        l_hh_296 = l_hh_280;
      }
      vec3{4} v_297 = VAdd<3,4>(VAdd<3,4>(v_184,v_286),v_279);
      tensor[3] _arg_298 = PACK(v_297);
      v_299 = v_102;
      l__t_300 = 0.e0;
      l__t_301 = 0;
      l_rad_302 = globals.rad;
      id(point)[] t_304 = SphereQuery<3,id(point)>(TensorRef<[3]>(_arg_298),globals.rad);
      vec3{4} v_305 = v_297;
      foreach id(point) i_P_303 in t_304 {
        real l__t_311;
        vec3{4} v_306 = VSub<3,4>(LOAD_0(TensorRef<[3]>(i_P_303.pos)),v_305);
        real l__t_307 = Sqrt(VDot<3,4>(v_306,v_306));
        real l__t_308 = RDiv(l__t_307,globals.rad);
        real l__t_309 = RDiv(0.2e1,0.3e1);
        vec3{4} v_310 = v_306;
        if (LT<real>(l__t_308,l__t_309)) {
          l__t_311 = RAdd(0.1e1,RMul(l__t_308,RAdd(-0.5646e1,RMul(l__t_308,RAdd(0.119835e2,RMul(l__t_308,RAdd(-0.113535e2,RMul(0.40550625e1,l__t_308))))))));
        } else {
          real l__t_313;
          if (LT<real>(l__t_308,0.1e1)) {
            real l_op1_e3_l_67_312 = RSub(l__t_308,l__t_309);
            l__t_313 = RAdd(-0.1e-2,RMul(RMul(RAdd(0.9e-1,RMul(RAdd(-0.54e0,RMul(RSub(0.1215e1,RMul(0.972e0,l_op1_e3_l_67_312)),l_op1_e3_l_67_312)),l_op1_e3_l_67_312)),l_op1_e3_l_67_312),l_op1_e3_l_67_312));
          } else {
            l__t_313 = 0.e0;
          }
          l__t_311 = l__t_313;
        }
        v_299 = VAdd<3,4>(v_299,v_310);
        l__t_300 = RAdd(l__t_300,l__t_311);
        l__t_301 = IAdd(l__t_301,1);
        l_rad_302 = Min<real>(l_rad_302,l__t_307);
      }
      real l__t_314 = IntToReal(l__t_301);
      bool l__t_315 = GT<int>(globals.verb,0);
      if (l__t_315) {
        l_vv_316 = false;
      } else {
        l_vv_316 = false;
      }
      if (l_vv_316) {
        l__t_317 = true;
      } else {
        l__t_317 = GT<int>(globals.verb,1);
      }
      if (l__t_317) {
        tensor[3] _arg_318 = PACK(v_305);
        print(self.ID,"(i#",globals.iter," @ ",TensorRef<[3]>(_arg_318),"): ");
        print("nn=",l__t_301,"; oldE=",l__t_180," newE=",l__t_300,"\n");
      }
      real l__t_319 = RSub(l__t_300,l__t_180);
      vec3{4} v_320 = VSub<3,4>(v_305,v_184);
      real l_op1_e3_l_18_321 = VDot<3,4>(v_320,VNeg<3,4>(v_179));
      vec3{4} v_322 = v_320;
      if (GT<real>(l__t_319,RMul(globals.gdeTest,l_op1_e3_l_18_321))) {
        bool l__t_326;
        bool l_vv_325;
        real l_hh_323 = RMul(l_hh_296,globals.gdeBack);
        if (EQ<real>(0.e0,l_hh_323)) {
          tensor[3] _arg_324 = PACK(v_305);
          print(self.ID,"(i#",globals.iter," @ ",TensorRef<[3]>(_arg_324),"): ");
          print("backtracked all the way to hh=0\n");
          die;
        }
        if (l__t_315) {
          l_vv_325 = false;
        } else {
          l_vv_325 = false;
        }
        if (l_vv_325) {
          l__t_326 = true;
        } else {
          l__t_326 = GT<int>(globals.verb,1);
        }
        if (l__t_326) {
          tensor[3] _arg_327 = PACK(v_305);
          print(self.ID,"(i#",globals.iter," @ ",TensorRef<[3]>(_arg_327),"): ");
          print("nn=",l__t_301,"; oldE=",l__t_180," newE=",l__t_300,"; backtracking; hh=",l_hh_323,"; mvmt=",self.mvmt,"\n");
          tensor[3] _arg_328 = PACK(v_286);
          print("      fs=",TensorRef<[3]>(_arg_328),"\n");
          tensor[3] _arg_329 = PACK(v_279);
          print("      es=",TensorRef<[3]>(_arg_329),"\n");
          print("      newE - oldE=",l__t_319,"\n");
          tensor[3] _arg_330 = PACK(v_179);
          print("      force=",TensorRef<[3]>(_arg_330),"\n");
          tensor[3] _arg_331 = PACK(v_322);
          print("      dpos=",TensorRef<[3]>(_arg_331),"\n");
          print("      0.5*(pos - oldpos).(-force)=",RMul(0.5e0,l_op1_e3_l_18_321),"\n");
        }
        self.pos = PACK(v_184);
        self._pos = PACK(v_184);
        self.hh = l_hh_323;
        self.step = PACK(v_183);
        self.trav = l_trav_176;
        self.closest = l_rad_302;
        self.born = l_born_269;
        active;
      } else {
        l_hh_335 = l_hh_296;
        v_336 = v_305;
      }
      real l_hh_337 = RMul(l_hh_335,globals.gdeOppor);
      vec3{4} v_338 = VAdd<3,4>(VAdd<3,4>(v_183,v_286),v_279);
      real l__t_339 = RDiv(Sqrt(VDot<3,4>(v_338,v_338)),globals.tipd);
      real l_mvmt_340 = RAdd(l__t_339,RMul(globals.hist,RSub(self.mvmt,l__t_339)));
      real l_trav_341 = RAdd(l_trav_176,l__t_339);
      vec3{4} v_342 = v_338;
      if (LT<real>(l__t_339,globals.pcmvEps)) {
        int l_born_411;
        int l__t_346;
        bool l__t_345;
        bool l__t_343 = GT<int>(globals.pcp,0);
        if (l__t_343) {
          bool l__t_344;
          if (GT<int>(globals.iter,0)) {
            l__t_344 = EQ<int>(0,IMod(globals.iter,globals.pcp));
          } else {
            l__t_344 = false;
          }
          l__t_345 = l__t_344;
        } else {
          l__t_345 = false;
        }
        if (l__t_345) {
          l__t_346 = ISub(IMul(IMod(IDiv(globals.iter,globals.pcp),2),2),1);
        } else {
          l__t_346 = 0;
        }
        if (NEQ<int>(l__t_346,0)) {
          int l_born_404;
          bool l__t_352;
          int l__t_349;
          bool l__t_348;
          if (l__t_343) {
            bool l__t_347;
            if (GT<int>(globals.iter,0)) {
              l__t_347 = EQ<int>(0,IMod(globals.iter,globals.pcp));
            } else {
              l__t_347 = false;
            }
            l__t_348 = l__t_347;
          } else {
            l__t_348 = false;
          }
          if (l__t_348) {
            l__t_349 = ISub(IMul(IMod(IDiv(globals.iter,globals.pcp),2),2),1);
          } else {
            l__t_349 = 0;
          }
          if (GT<int>(l__t_349,0)) {
            bool l__t_351;
            if (LT<real>(l__t_300,0.e0)) {
              bool l__t_350;
              if (LT<int>(l__t_301,globals.nnmin)) {
                l__t_350 = LT<int>(l_born_269,globals.nnmax);
              } else {
                l__t_350 = false;
              }
              l__t_351 = l__t_350;
            } else {
              l__t_351 = false;
            }
            l__t_352 = l__t_351;
          } else {
            l__t_352 = false;
          }
          if (l__t_352) {
            int l_born_403;
            bool l_birth_376;
            real l_r_353 = RDiv(0.1e1,l__t_314);
            real l_r_354 = RMul(l_r_353,VIndex<3,4,0>(v_299));
            real l_r_355 = RMul(l_r_353,VIndex<3,4,1>(v_299));
            real l_r_356 = RMul(l_r_353,VIndex<3,4,2>(v_299));
            vec3{4} v_357 = VEC3{4}(l_r_354,l_r_355,l_r_356);
            real l_op1_e3_l_11_358 = RDiv(0.1e1,Sqrt(VDot<3,4>(v_357,v_357)));
            vec3{4} v_359 = VSub<3,4>(v_336,VEC3{4}(RMul(RMul(globals.tipd,l_r_354),l_op1_e3_l_11_358),RMul(RMul(globals.tipd,l_r_355),l_op1_e3_l_11_358),RMul(RMul(globals.tipd,l_r_356),l_op1_e3_l_11_358)));
            tensor[3] _arg_360 = PACK(v_359);
            &tensor[3] l__t_361 = fStep$5B52(_arg_360);
            vec3{4} v_362 = VAdd<3,4>(v_359,VScale<3,4>(globals.sfs,LOAD_0(l__t_361)));
            tensor[3] _arg_363 = PACK(v_362);
            &tensor[3] l__t_364 = fStep$5B52(_arg_363);
            vec3{4} v_365 = VAdd<3,4>(v_362,VScale<3,4>(globals.sfs,LOAD_0(l__t_364)));
            vec3{4} v_366 = v_365;
            if (EQ<int>(globals.fDim,2)) {
              bool l_birth_375;
              if (GTE<int>(l__t_301,4)) {
                bool l_birth_374;
                bool l_birth_368;
                tensor[3] _arg_367 = PACK(v_366);
                l_birth_368 = true;
                id(point)[] t_370 = SphereQuery<3,id(point)>(TensorRef<[3]>(_arg_367),RMul(globals.tipd,globals.mabd));
                foreach id(point) i_P_369 in t_370 {
                  l_birth_368 = false;
                }
                if (l_birth_368) {
                  real l__t_371 = urnd$5B2A(VIndex<3,4,0>(v_336));
                  real l__t_372 = urnd$5B2A(VIndex<3,4,1>(v_336));
                  real l__t_373 = urnd$5B2A(VIndex<3,4,2>(v_336));
                  l_birth_374 = LT<real>(MathFn<fmod>(RAdd(RAdd(l__t_371,l__t_372),l__t_373),0.1e1),RDiv(IntToReal(ISub(globals.nnmin,l__t_301)),IntToReal(globals.nnmin)));
                } else {
                  l_birth_374 = l_birth_368;
                }
                l_birth_375 = l_birth_374;
              } else {
                l_birth_375 = true;
              }
              l_birth_376 = l_birth_375;
            } else {
              l_birth_376 = true;
            }
            if (l_birth_376) {
              int l_born_402;
              bool l__t_400;
              bool l__t_379;
              vec3{4} v_377 = VSub<3,4>(v_366,v_102);
              real l__t_378 = Sqrt(VDot<3,4>(v_377,v_377));
              if (LT<real>(l__t_378,0.4e1)) {
                l__t_379 = GT<real>(l__t_378,0.3e1);
              } else {
                l__t_379 = false;
              }
              if (l__t_379) {
                bool l__t_399;
                real l_x_380 = VIndex<3,4,0>(v_366);
                real l_y_381 = VIndex<3,4,1>(v_366);
                real l_z_382 = VIndex<3,4,2>(v_366);
                real l_op1_e3_l_6_383 = RMul(l_x_380,l_x_380);
                real l_op1_e3_l_7_384 = RMul(l_y_381,l_y_381);
                real l_op1_e3_l_8_385 = RMul(l_z_382,l_z_382);
                real l_op1_e3_l_9_386 = RAdd(RAdd(l_op1_e3_l_6_383,l_op1_e3_l_7_384),l_op1_e3_l_8_385);
                real l_op1_e3_l_11_387 = Cos(l_op1_e3_l_9_386);
                real l_op1_e3_l_14_388 = RMul(l_z_382,l_op1_e3_l_8_385);
                real l_op1_e3_l_20_389 = Sin(l_op1_e3_l_9_386);
                vec3{4} v_390 = VEC3{4}(RMul(RMul(RMul(0.2e1,l_x_380),l_op1_e3_l_8_385),l_op1_e3_l_11_387),RMul(RMul(RMul(0.2e1,l_y_381),l_op1_e3_l_8_385),l_op1_e3_l_11_387),RAdd(RMul(RMul(0.2e1,l_op1_e3_l_14_388),l_op1_e3_l_11_387),RMul(RMul(0.2e1,l_z_382),l_op1_e3_l_20_389)));
                real l_op1_e3_l_25_391 = RMul(RMul(0.2e1,l_op1_e3_l_8_385),l_op1_e3_l_11_387);
                real l_r_392 = RMul(-0.4e1,l_x_380);
                real l__t_393 = RMul(RMul(RMul(l_r_392,l_y_381),l_op1_e3_l_8_385),l_op1_e3_l_20_389);
                real l__t_394 = RAdd(RMul(RMul(l_r_392,l_op1_e3_l_14_388),l_op1_e3_l_20_389),RMul(RMul(RMul(0.4e1,l_x_380),l_z_382),l_op1_e3_l_11_387));
                real l__t_395 = RAdd(RMul(RMul(RMul(-0.4e1,l_y_381),l_op1_e3_l_14_388),l_op1_e3_l_20_389),RMul(RMul(RMul(0.4e1,l_y_381),l_z_382),l_op1_e3_l_11_387));
                tensor[3,3] t_396 = <tensor[3,3]>[RAdd(RMul(RMul(RMul(-0.4e1,l_op1_e3_l_6_383),l_op1_e3_l_8_385),l_op1_e3_l_20_389),l_op1_e3_l_25_391),l__t_393,l__t_394,l__t_393,RAdd(RMul(RMul(RMul(-0.4e1,l_op1_e3_l_7_384),l_op1_e3_l_8_385),l_op1_e3_l_20_389),l_op1_e3_l_25_391),l__t_395,l__t_394,l__t_395,RAdd(RAdd(RMul(RMul(-0.4e1,RMul(l_op1_e3_l_8_385,l_op1_e3_l_8_385)),l_op1_e3_l_20_389),RMul(RMul(0.1e2,l_op1_e3_l_8_385),l_op1_e3_l_11_387)),RMul(0.2e1,l_op1_e3_l_20_389))];
                real[3] l__t_397 = EigenVals3x3(TensorRef<[3,3]>(t_396));
                if (GT<real>(RDiv(RNeg(Subscript<real[3]>(l__t_397,2)),RAdd(globals.fBias,Sqrt(VDot<3,4>(v_390,v_390)))),globals.fStrTh)) {
                  bool l_birth_398;
                  if (GTE<real>(0.e0,globals.fMaskTh)) {
                    l_birth_398 = true;
                  } else {
                    l_birth_398 = false;
                  }
                  l__t_399 = l_birth_398;
                } else {
                  l__t_399 = false;
                }
                l__t_400 = l__t_399;
              } else {
                l__t_400 = false;
              }
              if (l__t_400) {
                tensor[3] _arg_401 = PACK(v_366);
                new point(_arg_401,l_hh_337);
                l_born_402 = IAdd(l_born_269,1);
              } else {
                l_born_402 = l_born_269;
              }
              l_born_403 = l_born_402;
            } else {
              l_born_403 = l_born_269;
            }
            l_born_404 = l_born_403;
          } else {
            int l__t_407;
            bool l__t_406;
            if (l__t_343) {
              bool l__t_405;
              if (GT<int>(globals.iter,0)) {
                l__t_405 = EQ<int>(0,IMod(globals.iter,globals.pcp));
              } else {
                l__t_405 = false;
              }
              l__t_406 = l__t_405;
            } else {
              l__t_406 = false;
            }
            if (l__t_406) {
              l__t_407 = ISub(IMul(IMod(IDiv(globals.iter,globals.pcp),2),2),1);
            } else {
              l__t_407 = 0;
            }
            if (LT<int>(l__t_407,0)) {
              if (GT<real>(l__t_300,0.e0)) {
                if (GT<int>(l__t_301,globals.nnmax)) {
                  real l__t_408 = urnd$5B2A(VIndex<3,4,0>(v_336));
                  real l__t_409 = urnd$5B2A(VIndex<3,4,1>(v_336));
                  real l__t_410 = urnd$5B2A(VIndex<3,4,2>(v_336));
                  if (LT<real>(MathFn<fmod>(RAdd(RAdd(l__t_408,l__t_409),l__t_410),0.1e1),RDiv(IntToReal(ISub(l__t_301,globals.nnmax)),l__t_314))) {
                    die;
                  }
                }
              }
            }
            l_born_404 = l_born_269;
          }
          l_born_411 = l_born_404;
        } else {
          l_born_411 = l_born_269;
        }
        l_born_412 = l_born_411;
      } else {
        l_born_412 = l_born_269;
      }
      l_born_163 = l_born_412;
      l_closest_164 = l_rad_302;
      l_mvmt_165 = l_mvmt_340;
      l_trav_166 = l_trav_341;
      l_nfs_167 = self.nfs;
      l_found_168 = self.found;
      v_169 = v_342;
      l_hh_170 = l_hh_337;
      v_171 = v_336;
    }
    self.pos = PACK(v_171);
    self._pos = PACK(v_171);
    self.hh = l_hh_170;
    self.step = PACK(v_169);
    self.found = l_found_168;
    self.nfs = l_nfs_167;
    self.trav = l_trav_166;
    self.mvmt = l_mvmt_165;
    self.closest = l_closest_164;
    self.born = l_born_163;
    self.first = false;
    active;
  }
}
//***** CREATE COLLECTION *****
  {
    for i_ii_416 = 0 to ISub(Length<tensor[3]>(globals.ipos),1) {
      new point(Subscript<tensor[3][]>(globals.ipos,i_ii_416),0.1e1);
    }
  }
//***** GLOBAL UPDATE *****
  {
    bool l__t_440;
    id(point) ix_436;
    id(point) ix_434;
    id(point) ix_431;
    id(point) ix_428;
    id(point) ix_423;
    id(point) ix_421;
    int l__t_418;
    int l_pop_417 = NumStrands<active>();
    if (NEQ<int>(l_pop_417,globals.popLast)) {
      l__t_418 = 1;
    } else {
      l__t_418 = 0;
    }
    real l__t_419 = IntToReal(l__t_418);
    real l_rpc_420 = RAdd(l__t_419,RMul(globals.pchist,RSub(globals.rpc,l__t_419)));
    globals.rpc = l_rpc_420;
    mapreduce {
      bool l_res_422 = all { all$5B7B  (ix_421) | ix_421 in all }
    }
    mapreduce {
      real l_res_424 = sum<real> { mean$5B82  (ix_423) | ix_423 in all }
    }
    int t_425 = NumStrands<all>();
    real l_rNum_426 = IntToReal(t_425);
    real l_percfound_427 = RMul(0.1e3,RDiv(l_res_424,l_rNum_426));
    mapreduce {
      real l_res_429 = sum<real> { mean$5B84  (ix_428) | ix_428 in all }
    }
    real l_mean_430 = RDiv(l_res_429,l_rNum_426);
    mapreduce {
      real l_res_432 = sum<real> { mean$5B88  (ix_431,l_mean_430) | ix_431 in all }
    }
    real l_covcl_433 = RDiv(RMul(Sqrt(RDiv(l_res_432,l_rNum_426)),l_rNum_426),l_res_429);
    mapreduce {
      real l_res_435 = max<real> { max$5B8A  (ix_434) | ix_434 in all }
    }
    mapreduce {
      real l_res_437 = sum<real> { mean$5B8C  (ix_436) | ix_436 in all }
    }
    print("======= finished iter ",globals.iter," w/ ",l_pop_417,")","; %found=",l_percfound_427,"; mean(hh)=",RDiv(l_res_437,l_rNum_426),"; mean(cl)=",l_mean_430,"; COV(cl)=",l_covcl_433,"; max(mvmt)=",l_res_435,"; pc=",l__t_418,"; rpc=",l_rpc_420,"\n");
    if (l_res_422) {
      bool l__t_439;
      if (LT<real>(l_covcl_433,globals.geoEps)) {
        bool l__t_438;
        if (LT<real>(l_res_435,globals.mvmtEps)) {
          l__t_438 = LT<real>(l_rpc_420,globals.rpcEps);
        } else {
          l__t_438 = false;
        }
        l__t_439 = l__t_438;
      } else {
        l__t_439 = false;
      }
      l__t_440 = l__t_439;
    } else {
      l__t_440 = false;
    }
    if (l__t_440) {
      print("======= Stabilizing ",l_pop_417," (iter ",globals.iter,")","; COV(cl)=",l_covcl_433," < ",globals.geoEps,"; max(mvmt)=",l_res_435," < ",globals.mvmtEps,"; rpc=",l_rpc_420," < ",globals.rpcEps,"\n");
      stabilize_all;
    } else {
      print("======= Stabilizing ",l_pop_417," (iter ",globals.iter,")","; COV(cl)=",l_covcl_433," > ",globals.geoEps,"; max(mvmt)=",l_res_435," > ",globals.mvmtEps,"; rpc=",l_rpc_420," > ",globals.rpcEps,"\n");
    }
    globals.iter = IAdd(globals.iter,1);
    globals.popLast = l_pop_417;
    return
  }
#### end program ####
/usr/bin/clang++ -fPIC -m64 -c -Wreturn-type -Wuninitialized -g -O0 -pthread -mavx2 -msse4.2 -I/home/teocollin/gitcode/diderot/include -I/usr/local/include evalProg.cxx
/usr/bin/clang++ -shared -o evalProg.so evalProg.o /home/teocollin/gitcode/diderot/lib/diderot-rt-par-debug.o -Wl,-rpath=/usr/local/lib -L/usr/local/lib -lteem  -lspatialindex_c   -lspatialindex 
                                       Phase                                         Exclusive    Total  
  compiler ..........................................................................   0.078     2.853
    front end .......................................................................   0.913     1.145
      parser ........................................................................   0.181     0.181
      typechecker ...................................................................   0.052     0.052
      simplify ......................................................................   0.000     0.000
    translate .......................................................................   0.063     0.063
    High IR optimization ............................................................   0.044     0.117
      High IR value numbering .......................................................   0.038     0.038
      High IR normalization .........................................................   0.035     0.035
      High IR checking ..............................................................   0.000     0.000
    High to Mid translation .........................................................   0.059     0.059
    Mid IR optimization .............................................................   0.045     0.078
      Mid IR contraction ............................................................   0.009     0.009
      Mid IR value numbering ........................................................   0.022     0.022
      Mid IR border control .........................................................   0.003     0.003
      Mid IR checking ...............................................................   0.000     0.000
    Mid to Low translation ..........................................................   0.017     0.017
    Low IR optimization .............................................................   0.047     0.081
      Low IR contraction ............................................................   0.014     0.014
      Low IR value numbering ........................................................   0.020     0.020
      Low IR checking ...............................................................   0.000     0.000
    Low to Tree translation .........................................................   0.039     0.039
    Tree IR optimization ............................................................   0.007     0.008
      Tree IR contraction ...........................................................   0.001     0.001
      Tree IR checking ..............................................................   0.000     0.000
    code generation .................................................................   0.029     1.168
      C compiler ....................................................................   1.138     1.138
