/* ParseTree: After parsing */
  Program @ [evalProg.diderot:4.1-48.0] 
    [
      Type: mesh_t= @ [evalProg.diderot:4.1-5.0] 
        Mesh @ [evalProg.diderot:4.6-10] 
        From File : evalProg.json @ [evalProg.diderot:4.1-5.0] 
      Type: fns_t= @ [evalProg.diderot:5.1-6.0] 
        FunctionSpace(mesh_t) @ [evalProg.diderot:5.6-29] 
          [ ]
        From File : evalProg.json @ [evalProg.diderot:5.1-6.0] 
      Type: func_t= @ [evalProg.diderot:6.1-7.0] 
        FemFunction(fns_t) @ [evalProg.diderot:6.6-24] 
        From File : evalProg.json @ [evalProg.diderot:6.1-7.0] 
      Const: d= @ [evalProg.diderot:8.1-9.0] 
        Select @ [evalProg.diderot:8.15-25] 
          Var: mesh_t @ [evalProg.diderot:8.15-21] 
          dim
      Input: points @ [evalProg.diderot:9.1-10.0] 
      Input: cube @ [evalProg.diderot:11.1-12.0] 
      Input: space= @ [evalProg.diderot:12.1-13.0] 
        Apply @ [evalProg.diderot:12.21-32] 
          Var: fns_t @ [evalProg.diderot:12.21-26] 
          [
            Var: cube @ [evalProg.diderot:12.27-31] 
          ]
      Input: data= @ [evalProg.diderot:13.1-14.0] 
        Apply @ [evalProg.diderot:13.21-34] 
          Var: func_t @ [evalProg.diderot:13.21-27] 
          [
            Var: space @ [evalProg.diderot:13.28-33] 
          ]
      Var @ [evalProg.diderot:14.1-15.0] 
        Decl: F= @ [evalProg.diderot:14.1-15.0] 
          Select @ [evalProg.diderot:14.16-22] 
            Var: data @ [evalProg.diderot:14.16-20] 
            F
    ]
    Strand: gg @ [evalProg.diderot:16.1-47.3] 
      [
        Param: i @ [evalProg.diderot:16.11-22] 
          Tensor @ [evalProg.diderot:16.11-20] 
            [
              Var: d @ [evalProg.diderot:16.18-19] 
            ]
      ]
      [
        VarDcl: output @ [evalProg.diderot:17.3-18.0] 
        VarDcl: output @ [evalProg.diderot:18.3-19.0] 
        VarDcl: output @ [evalProg.diderot:19.3-20.0] 
        VarDcl: output @ [evalProg.diderot:20.3-21.0] 
        VarDcl: output @ [evalProg.diderot:21.3-22.0] 
        VarDcl: output @ [evalProg.diderot:22.3-23.0] 
        VarDcl: output @ [evalProg.diderot:23.3-24.0] 
      ]
      [
        Method: Update @ [evalProg.diderot:24.3-47.1] 
          Block @ [evalProg.diderot:24.10-47.0] 
            [
              Print @ [evalProg.diderot:25.5-26.0] 
                [
                  Lit: "Running on " @ [evalProg.diderot:25.11-24] 
                  Var: target @ [evalProg.diderot:25.26-32] 
                  Lit: "\n" @ [evalProg.diderot:25.34-38] 
                ]
              Decl @ [evalProg.diderot:24.10-47.0] 
                Decl: p= @ [evalProg.diderot:26.5-27.0] 
                  Apply @ [evalProg.diderot:26.26-46] 
                    Select @ [evalProg.diderot:26.26-46] 
                      Var: cube @ [evalProg.diderot:26.26-30] 
                      findPos
                    [
                      Var: target @ [evalProg.diderot:26.39-45] 
                    ]
              Assign: valid= @ [evalProg.diderot:27.5-28.0] 
                Apply @ [evalProg.diderot:27.13-24] 
                  Select @ [evalProg.diderot:27.13-24] 
                    Var: p @ [evalProg.diderot:27.13-14] 
                    isValid
                  [ ]
              IfThenElse @ [evalProg.diderot:28.5-45.0] 
                Var: valid @ [evalProg.diderot:28.8-13] 
                Block @ [evalProg.diderot:28.14-42.0] 
                  [
                    Assign: c= @ [evalProg.diderot:29.7-30.0] 
                      Apply @ [evalProg.diderot:29.11-17] 
                        Select @ [evalProg.diderot:29.11-17] 
                          Var: p @ [evalProg.diderot:29.11-12] 
                          mc
                        [ ]
                    Assign: translated= @ [evalProg.diderot:30.7-31.0] 
                      Select @ [evalProg.diderot:30.20-28] 
                        Var: p @ [evalProg.diderot:30.20-21] 
                        refPos
                    Assign: result= @ [evalProg.diderot:31.7-32.0] 
                      Apply @ [evalProg.diderot:31.16-25] 
                        Var: F @ [evalProg.diderot:31.16-17] 
                        [
                          Var: target @ [evalProg.diderot:31.18-24] 
                        ]
                    Assign: gradResult= @ [evalProg.diderot:32.7-33.0] 
                      Apply @ [evalProg.diderot:32.20-32] 
                        UnaryOp: ∇ @ [evalProg.diderot:32.20-24] 
                          Var: F @ [evalProg.diderot:32.23-24] 
                        [
                          Var: target @ [evalProg.diderot:32.25-31] 
                        ]
                  ]
                Print @ [evalProg.diderot:43.7-44.0] 
                  [
                    Lit: "Warning: Invalid!\n" @ [evalProg.diderot:43.13-34] 
                  ]
              Stabilize @ [evalProg.diderot:45.5-46.0] 
            ]
      ]
    Collection @ [evalProg.diderot:47.3-48.0] 
      Comprehension @ [evalProg.diderot:47.21-42] 
        Apply @ [evalProg.diderot:47.22-27] 
          Var: gg @ [evalProg.diderot:47.22-24] 
          [
            Var: i @ [evalProg.diderot:47.25-26] 
          ]
        [
          Iterator: i @ [evalProg.diderot:47.30-41] 
            Var: points @ [evalProg.diderot:47.35-41] 
        ]
/* end program */
/* AST: After typechecking */
properties: HasInputs,HasGlobals,HasConsts,ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
const int d = 3;
input vec3[] points;
input FemType: Mesh with type var:NONE cube = loadFem(Mesh);
input FemType: Space with type var:mesh_t space = loadFem(Space);
input FemType: FemFunc with type var:fns_t data = loadFem(FemFunc);
function bool != (FemType: MeshCell with type var:mesh_t cell1, FemType: MeshCell with type var:mesh_t cell1)
{
  return != (extractFemItem(cell1, int, CellIndex(Mesh)), extractFemItem(cell1, int, CellIndex(Mesh)));
  }
function bool == (FemType: MeshCell with type var:mesh_t cell1, FemType: MeshCell with type var:mesh_t cell1)
{
  return == (extractFemItem(cell1, int, CellIndex(Mesh)), extractFemItem(cell1, int, CellIndex(Mesh)));
  }
function FemType: MeshPos with type var:mesh_t findPos (FemType: Mesh with type var:mesh_t mesh, vec3 pos)
{
  xn = [0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0, 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0, 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0];
  newtonInt = 0;
  cellInt = extractFemItem(mesh, int, StartCell(Mesh));
  numCell = - (extractFemItem(mesh, int, NumCell(Mesh)), 1);
  yayCells = extractFemItem(mesh, pos : vec3, int[], NearbyCell(File=spat.in)(Mesh));
  foreach (int cellItter in yayCells) {
    cellInt = cellItter;
    A = @<#; %3; $[3,3]> (inv<#; %3> (∇⊗<#; %3; $[]; %3> (femField(mesh,cellInt,field(3)[3], Transform, ))), [0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0, 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0, 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0]);
    foreach (int newtonItter in $range (0, 16)) {
      delta = @<#; %3; $[3]> (•<#; %3; $[3,3]; $[3]; $[3]> (A, -<#; %3; $[3]> (femField(mesh,cellInt,field(3)[3], Transform, ), pos)), xn);
      xn = -<$[3]> (xn, delta);
      if >= (* (0.1e-7, 0.1e-7), •<$[3]; $[3]; $[]> (delta, delta)) {
        if $and (> (+<$[]> (0.1e1, 0.1e-8), •<$[3]; $[3]; $[]> ([0.1e1, 0.1e1, 0.1e1], xn)), $and (> (+<$[3]> ([0.1e-8, 0.1e-8, 0.1e-8], xn)[0], -0.e0), $and (> (+<$[3]> ([0.1e-8, 0.1e-8, 0.1e-8], xn)[1], -0.e0), > (+<$[3]> ([0.1e-8, 0.1e-8, 0.1e-8], xn)[2], -0.e0)))) {
          return extractFemItemN(AllBuild(MeshPos),FemType: Mesh with type var:NONE,int,vec3,vec3 (mesh, cellInt, xn, pos)):FemType: MeshPos with type var:mesh_t;
          }
        }
      }
    }
  print ("Bad end 2", "\n");
  return extractFemItemN(InvalidBuild(MeshPos),FemType: Mesh with type var:NONE (mesh)):FemType: MeshPos with type var:mesh_t;
  }
function FemType: RefCell with type var:mesh_t refcell (FemType: Mesh with type var:NONE arg0)
{
  return extractFemItem(arg0, FemType: RefCell with type var:mesh_t, RefCell(Mesh));
  }
function FemType: MeshCell with type var:mesh_t[] cells (FemType: Mesh with type var:NONE arg0)
{
  return extractFemItem(arg0, FemType: MeshCell with type var:mesh_t[], Cells(Mesh));
  }
function FemType: MeshCell with type var:mesh_t[] cells (FemType: Mesh with type var:NONE arg0)
{
  return {loadFem(MeshCell) | int i in $range (0, extractFemItem(arg0, int, NumCell(Mesh)))};
  }
function int numCell (FemType: Mesh with type var:NONE arg0)
{
  return extractFemItem(arg0, int, NumCell(Mesh));
  }
function tensor[3,3,3,3] mesh_t_transform_3 (vec3 pos, int cell, FemType: Mesh with type var:NONE mesh)
{
  return @<#; %3; $[3,3,3,3]> (∇⊗<#; %3; $[3,3]; %3> (∇⊗<#; %3; $[3]; %3> (∇⊗<#; %3; $[]; %3> (femField(mesh,cell,field(3)[3], Transform, )))), pos);
  }
function tensor[3,3,3] mesh_t_transform_2 (vec3 pos, int cell, FemType: Mesh with type var:NONE mesh)
{
  return @<#; %3; $[3,3,3]> (∇⊗<#; %3; $[3]; %3> (∇⊗<#; %3; $[]; %3> (femField(mesh,cell,field(3)[3], Transform, ))), pos);
  }
function mat3 mesh_t_transform_1 (vec3 pos, int cell, FemType: Mesh with type var:NONE mesh)
{
  return @<#; %3; $[3,3]> (∇⊗<#; %3; $[]; %3> (femField(mesh,cell,field(3)[3], Transform, )), pos);
  }
function vec3 mesh_t_transform_0 (vec3 pos, int cell, FemType: Mesh with type var:NONE mesh)
{
  return @<#; %3; $[3]> (femField(mesh,cell,field(3)[3], Transform, ), pos);
  }
function FemType: MeshPos with type var:mesh_t _mesh_t_newtonInverse (vec3 pos, int cellInt, FemType: Mesh with type var:NONE mesh)
{
  xn = [0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0, 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0, 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0];
  A = @<#; %3; $[3,3]> (inv<#; %3> (∇⊗<#; %3; $[]; %3> (femField(mesh,cellInt,field(3)[3], Transform, ))), [0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0, 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0, 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0]);
  foreach (int itter in $range (0, 16)) {
    delta = @<#; %3; $[3]> (•<#; %3; $[3,3]; $[3]; $[3]> (A, -<#; %3; $[3]> (femField(mesh,cellInt,field(3)[3], Transform, ), pos)), xn);
    xn = -<$[3]> (xn, delta);
    if >= (* (0.1e-7, 0.1e-7), •<$[3]; $[3]; $[]> (delta, delta)) {
      if $and (> (+<$[]> (0.1e1, 0.1e-8), •<$[3]; $[3]; $[]> ([0.1e1, 0.1e1, 0.1e1], xn)), $and (> (+<$[3]> ([0.1e-8, 0.1e-8, 0.1e-8], xn)[0], -0.e0), $and (> (+<$[3]> ([0.1e-8, 0.1e-8, 0.1e-8], xn)[1], -0.e0), > (+<$[3]> ([0.1e-8, 0.1e-8, 0.1e-8], xn)[2], -0.e0)))) {
        return extractFemItemN(AllBuild(MeshPos),FemType: Mesh with type var:NONE,int,vec3,vec3 (mesh, cellInt, xn, pos)):FemType: MeshPos with type var:mesh_t;
        }
      else {
        return extractFemItemN(InvalidBuild(MeshPos),FemType: Mesh with type var:NONE (mesh)):FemType: MeshPos with type var:mesh_t;
        }
      }
    }
  return extractFemItemN(InvalidBuild(MeshPos),FemType: Mesh with type var:NONE (mesh)):FemType: MeshPos with type var:mesh_t;
  }
function FemType: MeshPos with type var:mesh_t _mesh_pos_mesh_t_build_world_pos (FemType: MeshPos with type var:mesh_t pos)
{
  if extractFemItem(pos, bool, WorldTest(MeshPos)) {
    return extractFemItemN(NewWorld(MeshPos),FemType: MeshPos with type var:mesh_t,vec3 (pos, mesh_t_transform_0 (extractFemItem(pos, vec3, RefPos(MeshPos)), extractFemItem(pos, int, CellIndex(MeshPos)), extractFem(Mesh,pos )))):FemType: MeshPos with type var:mesh_t;
    }
  else {
    return pos;
    }
  }
function vec3 worldPos (FemType: MeshPos with type var:mesh_t pos)
{
  return mesh_t_transform_0 (extractFemItem(pos, vec3, RefPos(MeshPos)), extractFemItem(pos, int, CellIndex(MeshPos)), extractFem(Mesh,pos ));
  }
function FemType: MeshPos with type var:mesh_t $exitPos (FemType: Mesh with type var:NONE mesh, int cellId, vec3 refPos, vec3 dPos, real[2] time)
{
  if != (-1, $sub<int; %2> (nextCell4 ($r2i (time[1]), cellId, mesh), 0)) {
    return extractFemItemN(RefBuild(Mesh),FemType: Mesh with type var:NONE,int,vec3 (mesh, $sub<int; %2> (nextCell4 ($r2i (time[1]), cellId, mesh), 0), [•<$[4,4]; $[4]; $[4]> ($sub<mat4; %4> ($sub<mat4[4]; %4> ({{[[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.222044604925e-15, 0.e0, 0.44408920985e-15, 0.1e1]], [[0.173205080757e1, 0.173205080757e1, 0.173205080757e1, -0.173205080757e1], [0.1e1, 0.2e1, 0.1e1, -0.1e1], [-0.1e1, -0.1e1, -0.192296268638e-15, 0.1e1], [0.222044604925e-15, 0.e0, 0.44408920985e-15, 0.1e1]], [[0.1e1, 0.2e1, 0.1e1, -0.1e1], [0.173205080757e1, 0.173205080757e1, 0.173205080757e1, -0.173205080757e1], [-0.1e1, -0.1e1, -0.192296268638e-15, 0.1e1], [0.222044604925e-15, 0.e0, 0.44408920985e-15, 0.1e1]], [[0.1e1, 0.2e1, 0.1e1, -0.1e1], [-0.1e1, -0.1e1, -0.192296268638e-15, 0.1e1], [0.173205080757e1, 0.173205080757e1, 0.173205080757e1, -0.173205080757e1], [0.222044604925e-15, 0.e0, 0.44408920985e-15, 0.1e1]]}, {[[0.57735026919e0, -0.1e1, -0.1e1, 0.1e1], [-0.57735026919e0, 0.1e1, 0.e0, 0.e0], [0.57735026919e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.e0, 0.1e1, 0.e0, 0.e0], [0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]]}, {[[-0.1e1, 0.57735026919e0, -0.1e1, 0.1e1], [0.1e1, -0.57735026919e0, 0.e0, 0.e0], [0.e0, 0.57735026919e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.e0, 0.1e1, 0.e0, 0.e0], [0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]]}, {[[-0.1e1, -0.1e1, 0.57735026919e0, 0.1e1], [0.1e1, 0.e0, -0.57735026919e0, 0.e0], [0.e0, 0.1e1, 0.57735026919e0, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.e0, 0.e0, 0.1e1, 0.e0], [0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]]}}, $r2i (time[1])), $sub<int; %2> (nextCell4 ($r2i (time[1]), cellId, mesh), 1)), [+<$[3]> (*<$[3]> (time[0], dPos), refPos)[0], +<$[3]> (*<$[3]> (time[0], dPos), refPos)[1], +<$[3]> (*<$[3]> (time[0], dPos), refPos)[2], 0.1e1])[0], •<$[4,4]; $[4]; $[4]> ($sub<mat4; %4> ($sub<mat4[4]; %4> ({{[[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.222044604925e-15, 0.e0, 0.44408920985e-15, 0.1e1]], [[0.173205080757e1, 0.173205080757e1, 0.173205080757e1, -0.173205080757e1], [0.1e1, 0.2e1, 0.1e1, -0.1e1], [-0.1e1, -0.1e1, -0.192296268638e-15, 0.1e1], [0.222044604925e-15, 0.e0, 0.44408920985e-15, 0.1e1]], [[0.1e1, 0.2e1, 0.1e1, -0.1e1], [0.173205080757e1, 0.173205080757e1, 0.173205080757e1, -0.173205080757e1], [-0.1e1, -0.1e1, -0.192296268638e-15, 0.1e1], [0.222044604925e-15, 0.e0, 0.44408920985e-15, 0.1e1]], [[0.1e1, 0.2e1, 0.1e1, -0.1e1], [-0.1e1, -0.1e1, -0.192296268638e-15, 0.1e1], [0.173205080757e1, 0.173205080757e1, 0.173205080757e1, -0.173205080757e1], [0.222044604925e-15, 0.e0, 0.44408920985e-15, 0.1e1]]}, {[[0.57735026919e0, -0.1e1, -0.1e1, 0.1e1], [-0.57735026919e0, 0.1e1, 0.e0, 0.e0], [0.57735026919e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.e0, 0.1e1, 0.e0, 0.e0], [0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]]}, {[[-0.1e1, 0.57735026919e0, -0.1e1, 0.1e1], [0.1e1, -0.57735026919e0, 0.e0, 0.e0], [0.e0, 0.57735026919e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.e0, 0.1e1, 0.e0, 0.e0], [0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]]}, {[[-0.1e1, -0.1e1, 0.57735026919e0, 0.1e1], [0.1e1, 0.e0, -0.57735026919e0, 0.e0], [0.e0, 0.1e1, 0.57735026919e0, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.e0, 0.e0, 0.1e1, 0.e0], [0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]]}}, $r2i (time[1])), $sub<int; %2> (nextCell4 ($r2i (time[1]), cellId, mesh), 1)), [+<$[3]> (*<$[3]> (time[0], dPos), refPos)[0], +<$[3]> (*<$[3]> (time[0], dPos), refPos)[1], +<$[3]> (*<$[3]> (time[0], dPos), refPos)[2], 0.1e1])[1], •<$[4,4]; $[4]; $[4]> ($sub<mat4; %4> ($sub<mat4[4]; %4> ({{[[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.222044604925e-15, 0.e0, 0.44408920985e-15, 0.1e1]], [[0.173205080757e1, 0.173205080757e1, 0.173205080757e1, -0.173205080757e1], [0.1e1, 0.2e1, 0.1e1, -0.1e1], [-0.1e1, -0.1e1, -0.192296268638e-15, 0.1e1], [0.222044604925e-15, 0.e0, 0.44408920985e-15, 0.1e1]], [[0.1e1, 0.2e1, 0.1e1, -0.1e1], [0.173205080757e1, 0.173205080757e1, 0.173205080757e1, -0.173205080757e1], [-0.1e1, -0.1e1, -0.192296268638e-15, 0.1e1], [0.222044604925e-15, 0.e0, 0.44408920985e-15, 0.1e1]], [[0.1e1, 0.2e1, 0.1e1, -0.1e1], [-0.1e1, -0.1e1, -0.192296268638e-15, 0.1e1], [0.173205080757e1, 0.173205080757e1, 0.173205080757e1, -0.173205080757e1], [0.222044604925e-15, 0.e0, 0.44408920985e-15, 0.1e1]]}, {[[0.57735026919e0, -0.1e1, -0.1e1, 0.1e1], [-0.57735026919e0, 0.1e1, 0.e0, 0.e0], [0.57735026919e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.e0, 0.1e1, 0.e0, 0.e0], [0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]]}, {[[-0.1e1, 0.57735026919e0, -0.1e1, 0.1e1], [0.1e1, -0.57735026919e0, 0.e0, 0.e0], [0.e0, 0.57735026919e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.e0, 0.1e1, 0.e0, 0.e0], [0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]]}, {[[-0.1e1, -0.1e1, 0.57735026919e0, 0.1e1], [0.1e1, 0.e0, -0.57735026919e0, 0.e0], [0.e0, 0.1e1, 0.57735026919e0, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.e0, 0.e0, 0.1e1, 0.e0], [0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]], [[0.1e1, 0.e0, 0.e0, 0.e0], [0.e0, 0.1e1, 0.e0, 0.e0], [0.e0, 0.e0, 0.1e1, 0.e0], [0.e0, 0.e0, 0.e0, 0.1e1]]}}, $r2i (time[1])), $sub<int; %2> (nextCell4 ($r2i (time[1]), cellId, mesh), 1)), [+<$[3]> (*<$[3]> (time[0], dPos), refPos)[0], +<$[3]> (*<$[3]> (time[0], dPos), refPos)[1], +<$[3]> (*<$[3]> (time[0], dPos), refPos)[2], 0.1e1])[2]])):FemType: MeshPos with type var:mesh_t;
    }
  else {
    return extractFemItemN(InvalidBuildBoundary(MeshPos),FemType: Mesh with type var:NONE,vec3 (mesh, +<$[3]> (*<$[3]> (time[0], dPos), refPos))):FemType: MeshPos with type var:mesh_t;
    }
  }
function int[2] nextCell4 (int faceIdx, int cell, FemType: Mesh with type var:NONE mesh)
{
  {
    return extractFemItemN(CellFaceCell(Mesh),FemType: Mesh with type var:NONE,int (mesh, + (* (cell, 8), * (faceIdx, 2)))):int[2];
    }
  }
function int[2] $nextCell2 (int faceIdx, int cell, FemType: Mesh with type var:NONE mesh)
{
  nearbyCells = extractFemItem(mesh, cell : int, int[], CellConnectivity(Mesh));
  numFacetNodes = length<int> ({$sub<int; %12> ({1, 2, 3, 0, 2, 3, 0, 1, 3, 0, 1, 2}, + ($sub<int; %2> ($sub<int[2]; %4> ({{1, 3}, {3, 3}, {9, 3}, {27, 3}}, faceIdx), 0), i)) | int i in $range (0, $sub<int; %2> ($sub<int[2]; %4> ({{1, 3}, {3, 3}, {9, 3}, {27, 3}}, faceIdx), 1))});
  if == (3, numFacetNodes)
    foreach (int cellInt in nearbyCells) {
      if $and (== ($sub<int; %3> ({$sub<int; %4> (extractFemItem(mesh, cellInt : int, int[4], ExtractIndices(Mesh)), 1), $sub<int; %4> (extractFemItem(mesh, cellInt : int, int[4], ExtractIndices(Mesh)), 2), $sub<int; %4> (extractFemItem(mesh, cellInt : int, int[4], ExtractIndices(Mesh)), 3)}, 0), $dynsub<int> ({$sub<int; %12> ({1, 2, 3, 0, 2, 3, 0, 1, 3, 0, 1, 2}, + ($sub<int; %2> ($sub<int[2]; %4> ({{1, 3}, {3, 3}, {9, 3}, {27, 3}}, faceIdx), 0), i)) | int i in $range (0, $sub<int; %2> ($sub<int[2]; %4> ({{1, 3}, {3, 3}, {9, 3}, {27, 3}}, faceIdx), 1))}, 0)), $and (== ($sub<int; %3> ({$sub<int; %4> (extractFemItem(mesh, cellInt : int, int[4], ExtractIndices(Mesh)), 1), $sub<int; %4> (extractFemItem(mesh, cellInt : int, int[4], ExtractIndices(Mesh)), 2), $sub<int; %4> (extractFemItem(mesh, cellInt : int, int[4], ExtractIndices(Mesh)), 3)}, 1), $dynsub<int> ({$sub<int; %12> ({1, 2, 3, 0, 2, 3, 0, 1, 3, 0, 1, 2}, + ($sub<int; %2> ($sub<int[2]; %4> ({{1, 3}, {3, 3}, {9, 3}, {27, 3}}, faceIdx), 0), i)) | int i in $range (0, $sub<int; %2> ($sub<int[2]; %4> ({{1, 3}, {3, 3}, {9, 3}, {27, 3}}, faceIdx), 1))}, 1)), == ($sub<int; %3> ({$sub<int; %4> (extractFemItem(mesh, cellInt : int, int[4], ExtractIndices(Mesh)), 1), $sub<int; %4> (extractFemItem(mesh, cellInt : int, int[4], ExtractIndices(Mesh)), 2), $sub<int; %4> (extractFemItem(mesh, cellInt : int, int[4], ExtractIndices(Mesh)), 3)}, 2), $dynsub<int> ({$sub<int; %12> ({1, 2, 3, 0, 2, 3, 0, 1, 3, 0, 1, 2}, + ($sub<int; %2> ($sub<int[2]; %4> ({{1, 3}, {3, 3}, {9, 3}, {27, 3}}, faceIdx), 0), i)) | int i in $range (0, $sub<int; %2> ($sub<int[2]; %4> ({{1, 3}, {3, 3}, {9, 3}, {27, 3}}, faceIdx), 1))}, 2))))
        return {cellInt, 0};
        if $and (== ($sub<int; %3> ({$sub<int; %4> (extractFemItem(mesh, cellInt : int, int[4], ExtractIndices(Mesh)), 0), $sub<int; %4> (extractFemItem(mesh, cellInt : int, int[4], ExtractIndices(Mesh)), 2), $sub<int; %4> (extractFemItem(mesh, cellInt : int, int[4], ExtractIndices(Mesh)), 3)}, 0), $dynsub<int> ({$sub<int; %12> ({1, 2, 3, 0, 2, 3, 0, 1, 3, 0, 1, 2}, + ($sub<int; %2> ($sub<int[2]; %4> ({{1, 3}, {3, 3}, {9, 3}, {27, 3}}, faceIdx), 0), i)) | int i in $range (0, $sub<int; %2> ($sub<int[2]; %4> ({{1, 3}, {3, 3}, {9, 3}, {27, 3}}, faceIdx), 1))}, 0)), $and (== ($sub<int; %3> ({$sub<int; %4> (extractFemItem(mesh, cellInt : int, int[4], ExtractIndices(Mesh)), 0), $sub<int; %4> (extractFemItem(mesh, cellInt : int, int[4], ExtractIndices(Mesh)), 2), $sub<int; %4> (extractFemItem(mesh, cellInt : int, int[4], ExtractIndices(Mesh)), 3)}, 1), $dynsub<int> ({$sub<int; %12> ({1, 2, 3, 0, 2, 3, 0, 1, 3, 0, 1, 2}, + ($sub<int; %2> ($sub<int[2]; %4> ({{1, 3}, {3, 3}, {9, 3}, {27, 3}}, faceIdx), 0), i)) | int i in $range (0, $sub<int; %2> ($sub<int[2]; %4> ({{1, 3}, {3, 3}, {9, 3}, {27, 3}}, faceIdx), 1))}, 1)), == ($sub<int; %3> ({$sub<int; %4> (extractFemItem(mesh, cellInt : int, int[4], ExtractIndices(Mesh)), 0), $sub<int; %4> (extractFemItem(mesh, cellInt : int, int[4], ExtractIndices(Mesh)), 2), $sub<int; %4> (extractFemItem(mesh, cellInt : int, int[4], ExtractIndices(Mesh)), 3)}, 2), $dynsub<int> ({$sub<int; %12> ({1, 2, 3, 0, 2, 3, 0, 1, 3, 0, 1, 2}, + ($sub<int; %2> ($sub<int[2]; %4> ({{1, 3}, {3, 3}, {9, 3}, {27, 3}}, faceIdx), 0), i)) | int i in $range (0, $sub<int; %2> ($sub<int[2]; %4> ({{1, 3}, {3, 3}, {9, 3}, {27, 3}}, faceIdx), 1))}, 2))))
        return {cellInt, 1};
        if $and (== ($sub<int; %3> ({$sub<int; %4> (extractFemItem(mesh, cellInt : int, int[4], ExtractIndices(Mesh)), 0), $sub<int; %4> (extractFemItem(mesh, cellInt : int, int[4], ExtractIndices(Mesh)), 1), $sub<int; %4> (extractFemItem(mesh, cellInt : int, int[4], ExtractIndices(Mesh)), 3)}, 0), $dynsub<int> ({$sub<int; %12> ({1, 2, 3, 0, 2, 3, 0, 1, 3, 0, 1, 2}, + ($sub<int; %2> ($sub<int[2]; %4> ({{1, 3}, {3, 3}, {9, 3}, {27, 3}}, faceIdx), 0), i)) | int i in $range (0, $sub<int; %2> ($sub<int[2]; %4> ({{1, 3}, {3, 3}, {9, 3}, {27, 3}}, faceIdx), 1))}, 0)), $and (== ($sub<int; %3> ({$sub<int; %4> (extractFemItem(mesh, cellInt : int, int[4], ExtractIndices(Mesh)), 0), $sub<int; %4> (extractFemItem(mesh, cellInt : int, int[4], ExtractIndices(Mesh)), 1), $sub<int; %4> (extractFemItem(mesh, cellInt : int, int[4], ExtractIndices(Mesh)), 3)}, 1), $dynsub<int> ({$sub<int; %12> ({1, 2, 3, 0, 2, 3, 0, 1, 3, 0, 1, 2}, + ($sub<int; %2> ($sub<int[2]; %4> ({{1, 3}, {3, 3}, {9, 3}, {27, 3}}, faceIdx), 0), i)) | int i in $range (0, $sub<int; %2> ($sub<int[2]; %4> ({{1, 3}, {3, 3}, {9, 3}, {27, 3}}, faceIdx), 1))}, 1)), == ($sub<int; %3> ({$sub<int; %4> (extractFemItem(mesh, cellInt : int, int[4], ExtractIndices(Mesh)), 0), $sub<int; %4> (extractFemItem(mesh, cellInt : int, int[4], ExtractIndices(Mesh)), 1), $sub<int; %4> (extractFemItem(mesh, cellInt : int, int[4], ExtractIndices(Mesh)), 3)}, 2), $dynsub<int> ({$sub<int; %12> ({1, 2, 3, 0, 2, 3, 0, 1, 3, 0, 1, 2}, + ($sub<int; %2> ($sub<int[2]; %4> ({{1, 3}, {3, 3}, {9, 3}, {27, 3}}, faceIdx), 0), i)) | int i in $range (0, $sub<int; %2> ($sub<int[2]; %4> ({{1, 3}, {3, 3}, {9, 3}, {27, 3}}, faceIdx), 1))}, 2))))
        return {cellInt, 2};
        if $and (== ($sub<int; %3> ({$sub<int; %4> (extractFemItem(mesh, cellInt : int, int[4], ExtractIndices(Mesh)), 0), $sub<int; %4> (extractFemItem(mesh, cellInt : int, int[4], ExtractIndices(Mesh)), 1), $sub<int; %4> (extractFemItem(mesh, cellInt : int, int[4], ExtractIndices(Mesh)), 2)}, 0), $dynsub<int> ({$sub<int; %12> ({1, 2, 3, 0, 2, 3, 0, 1, 3, 0, 1, 2}, + ($sub<int; %2> ($sub<int[2]; %4> ({{1, 3}, {3, 3}, {9, 3}, {27, 3}}, faceIdx), 0), i)) | int i in $range (0, $sub<int; %2> ($sub<int[2]; %4> ({{1, 3}, {3, 3}, {9, 3}, {27, 3}}, faceIdx), 1))}, 0)), $and (== ($sub<int; %3> ({$sub<int; %4> (extractFemItem(mesh, cellInt : int, int[4], ExtractIndices(Mesh)), 0), $sub<int; %4> (extractFemItem(mesh, cellInt : int, int[4], ExtractIndices(Mesh)), 1), $sub<int; %4> (extractFemItem(mesh, cellInt : int, int[4], ExtractIndices(Mesh)), 2)}, 1), $dynsub<int> ({$sub<int; %12> ({1, 2, 3, 0, 2, 3, 0, 1, 3, 0, 1, 2}, + ($sub<int; %2> ($sub<int[2]; %4> ({{1, 3}, {3, 3}, {9, 3}, {27, 3}}, faceIdx), 0), i)) | int i in $range (0, $sub<int; %2> ($sub<int[2]; %4> ({{1, 3}, {3, 3}, {9, 3}, {27, 3}}, faceIdx), 1))}, 1)), == ($sub<int; %3> ({$sub<int; %4> (extractFemItem(mesh, cellInt : int, int[4], ExtractIndices(Mesh)), 0), $sub<int; %4> (extractFemItem(mesh, cellInt : int, int[4], ExtractIndices(Mesh)), 1), $sub<int; %4> (extractFemItem(mesh, cellInt : int, int[4], ExtractIndices(Mesh)), 2)}, 2), $dynsub<int> ({$sub<int; %12> ({1, 2, 3, 0, 2, 3, 0, 1, 3, 0, 1, 2}, + ($sub<int; %2> ($sub<int[2]; %4> ({{1, 3}, {3, 3}, {9, 3}, {27, 3}}, faceIdx), 0), i)) | int i in $range (0, $sub<int; %2> ($sub<int[2]; %4> ({{1, 3}, {3, 3}, {9, 3}, {27, 3}}, faceIdx), 1))}, 2))))
        return {cellInt, 3};
        }
    return {-1, -1};
  }
function vec2 _enter (vec3 refPos, vec3 dPos)
{
  real time = +inf;
  int face = -1;
  if $and (> (/ (-<$[]> (0.57735026919e0, •<$[3]; $[3]; $[]> ([0.57735026919e0, -0.57735026919e0, 0.57735026919e0], refPos)), •<$[3]; $[3]; $[]> ([0.57735026919e0, -0.57735026919e0, 0.57735026919e0], dPos)), -0.e0), > (time, / (-<$[]> (0.57735026919e0, •<$[3]; $[3]; $[]> ([0.57735026919e0, -0.57735026919e0, 0.57735026919e0], refPos)), •<$[3]; $[3]; $[]> ([0.57735026919e0, -0.57735026919e0, 0.57735026919e0], dPos))))
    if $and (> (+<$[]> (0.1e1, 0.1e-8), •<$[3]; $[3]; $[]> ([0.1e1, 0.1e1, 0.1e1], +<$[3]> (*<$[3]> (dPos, / (-<$[]> (0.57735026919e0, •<$[3]; $[3]; $[]> ([0.57735026919e0, -0.57735026919e0, 0.57735026919e0], refPos)), •<$[3]; $[3]; $[]> ([0.57735026919e0, -0.57735026919e0, 0.57735026919e0], dPos))), refPos))), $and (> (+<$[3]> ([0.1e-8, 0.1e-8, 0.1e-8], +<$[3]> (*<$[3]> (dPos, / (-<$[]> (0.57735026919e0, •<$[3]; $[3]; $[]> ([0.57735026919e0, -0.57735026919e0, 0.57735026919e0], refPos)), •<$[3]; $[3]; $[]> ([0.57735026919e0, -0.57735026919e0, 0.57735026919e0], dPos))), refPos))[0], -0.e0), $and (> (+<$[3]> ([0.1e-8, 0.1e-8, 0.1e-8], +<$[3]> (*<$[3]> (dPos, / (-<$[]> (0.57735026919e0, •<$[3]; $[3]; $[]> ([0.57735026919e0, -0.57735026919e0, 0.57735026919e0], refPos)), •<$[3]; $[3]; $[]> ([0.57735026919e0, -0.57735026919e0, 0.57735026919e0], dPos))), refPos))[1], -0.e0), > (+<$[3]> ([0.1e-8, 0.1e-8, 0.1e-8], +<$[3]> (*<$[3]> (dPos, / (-<$[]> (0.57735026919e0, •<$[3]; $[3]; $[]> ([0.57735026919e0, -0.57735026919e0, 0.57735026919e0], refPos)), •<$[3]; $[3]; $[]> ([0.57735026919e0, -0.57735026919e0, 0.57735026919e0], dPos))), refPos))[2], -0.e0)))) {
      time = / (-<$[]> (0.57735026919e0, •<$[3]; $[3]; $[]> ([0.57735026919e0, -0.57735026919e0, 0.57735026919e0], refPos)), •<$[3]; $[3]; $[]> ([0.57735026919e0, -0.57735026919e0, 0.57735026919e0], dPos));
      face = 0;
      }
    if $and (> (/ (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.1e1, 0.e0, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([0.1e1, 0.e0, 0.e0], dPos)), -0.e0), > (time, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.1e1, 0.e0, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([0.1e1, 0.e0, 0.e0], dPos))))
    if $and (> (+<$[]> (0.1e1, 0.1e-8), •<$[3]; $[3]; $[]> ([0.1e1, 0.1e1, 0.1e1], +<$[3]> (*<$[3]> (dPos, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.1e1, 0.e0, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([0.1e1, 0.e0, 0.e0], dPos))), refPos))), $and (> (+<$[3]> ([0.1e-8, 0.1e-8, 0.1e-8], +<$[3]> (*<$[3]> (dPos, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.1e1, 0.e0, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([0.1e1, 0.e0, 0.e0], dPos))), refPos))[0], -0.e0), $and (> (+<$[3]> ([0.1e-8, 0.1e-8, 0.1e-8], +<$[3]> (*<$[3]> (dPos, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.1e1, 0.e0, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([0.1e1, 0.e0, 0.e0], dPos))), refPos))[1], -0.e0), > (+<$[3]> ([0.1e-8, 0.1e-8, 0.1e-8], +<$[3]> (*<$[3]> (dPos, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.1e1, 0.e0, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([0.1e1, 0.e0, 0.e0], dPos))), refPos))[2], -0.e0)))) {
      time = / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.1e1, 0.e0, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([0.1e1, 0.e0, 0.e0], dPos));
      face = 1;
      }
    if $and (> (/ (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, 0.1e1, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([0.e0, 0.1e1, 0.e0], dPos)), -0.e0), > (time, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, 0.1e1, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([0.e0, 0.1e1, 0.e0], dPos))))
    if $and (> (+<$[]> (0.1e1, 0.1e-8), •<$[3]; $[3]; $[]> ([0.1e1, 0.1e1, 0.1e1], +<$[3]> (*<$[3]> (dPos, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, 0.1e1, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([0.e0, 0.1e1, 0.e0], dPos))), refPos))), $and (> (+<$[3]> ([0.1e-8, 0.1e-8, 0.1e-8], +<$[3]> (*<$[3]> (dPos, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, 0.1e1, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([0.e0, 0.1e1, 0.e0], dPos))), refPos))[0], -0.e0), $and (> (+<$[3]> ([0.1e-8, 0.1e-8, 0.1e-8], +<$[3]> (*<$[3]> (dPos, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, 0.1e1, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([0.e0, 0.1e1, 0.e0], dPos))), refPos))[1], -0.e0), > (+<$[3]> ([0.1e-8, 0.1e-8, 0.1e-8], +<$[3]> (*<$[3]> (dPos, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, 0.1e1, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([0.e0, 0.1e1, 0.e0], dPos))), refPos))[2], -0.e0)))) {
      time = / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, 0.1e1, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([0.e0, 0.1e1, 0.e0], dPos));
      face = 2;
      }
    if $and (> (/ (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, 0.e0, 0.1e1], refPos)), •<$[3]; $[3]; $[]> ([0.e0, 0.e0, 0.1e1], dPos)), -0.e0), > (time, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, 0.e0, 0.1e1], refPos)), •<$[3]; $[3]; $[]> ([0.e0, 0.e0, 0.1e1], dPos))))
    if $and (> (+<$[]> (0.1e1, 0.1e-8), •<$[3]; $[3]; $[]> ([0.1e1, 0.1e1, 0.1e1], +<$[3]> (*<$[3]> (dPos, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, 0.e0, 0.1e1], refPos)), •<$[3]; $[3]; $[]> ([0.e0, 0.e0, 0.1e1], dPos))), refPos))), $and (> (+<$[3]> ([0.1e-8, 0.1e-8, 0.1e-8], +<$[3]> (*<$[3]> (dPos, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, 0.e0, 0.1e1], refPos)), •<$[3]; $[3]; $[]> ([0.e0, 0.e0, 0.1e1], dPos))), refPos))[0], -0.e0), $and (> (+<$[3]> ([0.1e-8, 0.1e-8, 0.1e-8], +<$[3]> (*<$[3]> (dPos, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, 0.e0, 0.1e1], refPos)), •<$[3]; $[3]; $[]> ([0.e0, 0.e0, 0.1e1], dPos))), refPos))[1], -0.e0), > (+<$[3]> ([0.1e-8, 0.1e-8, 0.1e-8], +<$[3]> (*<$[3]> (dPos, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, 0.e0, 0.1e1], refPos)), •<$[3]; $[3]; $[]> ([0.e0, 0.e0, 0.1e1], dPos))), refPos))[2], -0.e0)))) {
      time = / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, 0.e0, 0.1e1], refPos)), •<$[3]; $[3]; $[]> ([0.e0, 0.e0, 0.1e1], dPos));
      face = 3;
      }
    if != (face, -1) {
    return [time, (real)face];
    }
  else {
    return [(real)-1, (real)-1];
    }
  }
function vec2 _exit (vec3 refPos, vec3 dPos)
{
  real time = +inf;
  int face = -1;
  if $and (> (/ (-<$[]> (0.57735026919e0, •<$[3]; $[3]; $[]> ([0.57735026919e0, -0.57735026919e0, 0.57735026919e0], refPos)), •<$[3]; $[3]; $[]> ([0.57735026919e0, -0.57735026919e0, 0.57735026919e0], dPos)), -0.e0), > (time, / (-<$[]> (0.57735026919e0, •<$[3]; $[3]; $[]> ([0.57735026919e0, -0.57735026919e0, 0.57735026919e0], refPos)), •<$[3]; $[3]; $[]> ([0.57735026919e0, -0.57735026919e0, 0.57735026919e0], dPos)))) {
    time = / (-<$[]> (0.57735026919e0, •<$[3]; $[3]; $[]> ([0.57735026919e0, -0.57735026919e0, 0.57735026919e0], refPos)), •<$[3]; $[3]; $[]> ([0.57735026919e0, -0.57735026919e0, 0.57735026919e0], dPos));
    face = 0;
    }
  if $and (> (/ (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.1e1, 0.e0, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([0.1e1, 0.e0, 0.e0], dPos)), -0.e0), > (time, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.1e1, 0.e0, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([0.1e1, 0.e0, 0.e0], dPos)))) {
    time = / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.1e1, 0.e0, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([0.1e1, 0.e0, 0.e0], dPos));
    face = 1;
    }
  if $and (> (/ (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, 0.1e1, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([0.e0, 0.1e1, 0.e0], dPos)), -0.e0), > (time, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, 0.1e1, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([0.e0, 0.1e1, 0.e0], dPos)))) {
    time = / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, 0.1e1, 0.e0], refPos)), •<$[3]; $[3]; $[]> ([0.e0, 0.1e1, 0.e0], dPos));
    face = 2;
    }
  if $and (> (/ (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, 0.e0, 0.1e1], refPos)), •<$[3]; $[3]; $[]> ([0.e0, 0.e0, 0.1e1], dPos)), -0.e0), > (time, / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, 0.e0, 0.1e1], refPos)), •<$[3]; $[3]; $[]> ([0.e0, 0.e0, 0.1e1], dPos)))) {
    time = / (-<$[]> (0.e0, •<$[3]; $[3]; $[]> ([0.e0, 0.e0, 0.1e1], refPos)), •<$[3]; $[3]; $[]> ([0.e0, 0.e0, 0.1e1], dPos));
    face = 3;
    }
  if != (face, -1) {
    return [time, (real)face];
    }
  else {
    return [(real)-1, (real)-1];
    }
  }
function FemType: Mesh with type var:mesh_t domain (FemType: Space with type var:mesh_t arg0)
{
  return extractFem(Mesh,arg0 );
  }
function FemType: Space with type var:mesh_t space (FemType: FemFunc with type var:fns_t arg0)
{
  return extractFem(Space,arg0 );
  }
function FemType: FuncCell with type var:func_t funcCell (FemType: FemFunc with type var:fns_t arg0, FemType: MeshCell with type var:mesh_t arg1)
{
  return loadFem(FuncCell);
  }
field(3)[] F = ∘<#; %3; $[]; %3; $[3]> (femField(data,extractFem(Mesh,extractFem(Space,data ) ),field(3)[], refField, findPos), femField(extractFem(Mesh,extractFem(Space,data ) ),extractFem(Mesh,extractFem(Space,data ) ),field(3)[3], InvTransform, findPos));
strand gg (vec3 i)
{
  output vec3 target = i;
  output vec3 translated = $nan<$[3]> ();
  output bool valid = false;
  output FemType: MeshCell with type var:mesh_t c = $dynsub<FemType: MeshCell with type var:mesh_t> (extractFemItem(cube, FemType: MeshCell with type var:mesh_t[], Cells(Mesh)), 0);
  output real result = $nan<$[]> ();
  output vec3 gradResult = $nan<$[3]> ();
  output vec3 gradResultp = $nan<$[3]> ();
  update {
    print ("Running on ", target, "\n");
    FemType: MeshPos with type var:mesh_t p = findPos (cube, target);
    valid = extractFemItem(p, bool, Valid(MeshPos));
    if valid {
      c = loadFem(MeshCell);
      translated = extractFemItem(p, vec3, RefPos(MeshPos));
      result = @<#; %3; $[]> (F, target);
      gradResult = @<#; %3; $[3]> (∇<#; %3> (F), target);
      }
    else {
      print ("Warning: Invalid!\n");
      }
    stabilize;
    }
  
}
collection {
    foreach (vec3 i in points) {
      new gg (i);
      }
    }
  
/* Program end */
/* Simplified Program (after after simplify) start */
properties: GlobalInit,HasInputs,HasGlobals,ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
input vec3[] points0335;
input FemData:Mesh cube0336;
input FemData:Space 0space0342_intermedateGlobal0343;
input FemData:FemFunc 0data0344_intermedateGlobal0345;
constants { }
global Femdata: MeshCell[] 0cell_cube0337;
global Femdata: Space space0342;
global Femdata: FemFunc data0344;
global field(3)[] F0ED0;
function bool#0 !=0346 (Femdata: MeshCell cell10347, Femdata: MeshCell cell10348)
{
  int _t0349 = extractFemItem(CellIndex(Mesh), int, cell10347);
  int _t034A = extractFemItem(CellIndex(Mesh), int, cell10348);
  bool _t034B = prim !=0086 (_t0349, _t034A);
  return _t034B;
}
function bool#0 ==034C (Femdata: MeshCell cell10347, Femdata: MeshCell cell10348)
{
  int _t034D = extractFemItem(CellIndex(Mesh), int, cell10347);
  int _t034E = extractFemItem(CellIndex(Mesh), int, cell10348);
  bool _t034F = prim ==0082 (_t034D, _t034E);
  return _t034F;
}
function Femdata: MeshPos#3 findPos0350 (Femdata: Mesh mesh0351, vec3 pos0352)
{
  real _t0353 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t0354 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t0355 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  xn0356 = [_t0353, _t0354, _t0355];
  newtonInt0357 = 0;
  cellInt0358 = extractFemItem(StartCell(Mesh), int, mesh0351);
  int _t0359 = extractFemItem(NumCell(Mesh), int, mesh0351);
  int _t035A = 1;
  numCell035B = prim -0024 (_t0359, _t035A);
  yayCells035C = extractFemItem2(NearbyCell(File=spat.in)(Mesh), vec3, mesh0351, pos0352 : vec3);
  foreach cellItter035D in yayCells035C {
    cellInt0358 = cellItter035D;
    field(3)[3] _t035E = femField(mesh0351,cellInt0358,field(3)[3],Transform,);
    field(3)[3,3] _t035F = prim ∇⊗00AD<#∞; %3; $[]; %3> (_t035E);
    field(3)[3,3] _t0360 = prim inv015E<#∞; %3> (_t035F);
    real _t0361 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    real _t0362 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    real _t0363 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    vec3 _t0364 = [_t0361, _t0362, _t0363];
    A0365 = prim @00A5<#∞; %3; $[3,3]> (_t0360, _t0364);
    int _t0366 = 0;
    int _t0367 = 16;
    int[] _t0368 = prim $range01C3 (_t0366, _t0367);
    foreach newtonItter0397 in _t0368 {
      field(3)[3] _t0369 = femField(mesh0351,cellInt0358,field(3)[3],Transform,);
      field(3)[3] _t036A = prim -002E<#∞; %3; $[3]> (_t0369, pos0352);
      field(3)[3] _t036B = prim •00D4<#∞; %3; $[3,3]; $[3]; $[3]> (A0365, _t036A);
      delta036C = prim @00A5<#∞; %3; $[3]> (_t036B, xn0356);
      xn0356 = prim -0026<$[3]> (xn0356, delta036C);
      real _t036D = 0.1e-7;
      real _t036E = 0.1e-7;
      real _t036F = prim *0034 (_t036D, _t036E);
      real _t0370 = prim •00CE<$[3]; $[3]; $[]> (delta036C, delta036C);
      bool _t0371 = prim >=007E (_t036F, _t0370);
      if _t0371 {
        real _t0372 = 0.1e1;
        real _t0373 = 0.1e-8;
        real _t0374 = prim +0017<$[]> (_t0372, _t0373);
        real _t0375 = 0.1e1;
        real _t0376 = 0.1e1;
        real _t0377 = 0.1e1;
        vec3 _t0378 = [_t0375, _t0376, _t0377];
        real _t0379 = prim •00CE<$[3]; $[3]; $[]> (_t0378, xn0356);
        bool _t037A = prim >0080 (_t0374, _t0379);
        real _t037B = 0.1e-8;
        real _t037C = 0.1e-8;
        real _t037D = 0.1e-8;
        vec3 _t037E = [_t037B, _t037C, _t037D];
        vec3 _t037F = prim +0017<$[3]> (_t037E, xn0356);
        real _t0380 = _t037F[0];
        real _t0381 = -0.e0;
        bool _t0382 = prim >0080 (_t0380, _t0381);
        real _t0383 = 0.1e-8;
        real _t0384 = 0.1e-8;
        real _t0385 = 0.1e-8;
        vec3 _t0386 = [_t0383, _t0384, _t0385];
        vec3 _t0387 = prim +0017<$[3]> (_t0386, xn0356);
        real _t0388 = _t0387[1];
        real _t0389 = -0.e0;
        bool _t038A = prim >0080 (_t0388, _t0389);
        real _t038B = 0.1e-8;
        real _t038C = 0.1e-8;
        real _t038D = 0.1e-8;
        vec3 _t038E = [_t038B, _t038C, _t038D];
        vec3 _t038F = prim +0017<$[3]> (_t038E, xn0356);
        real _t0390 = _t038F[2];
        real _t0391 = -0.e0;
        bool _t0392 = prim >0080 (_t0390, _t0391);
        bool _t0393 = prim $and01C4 (_t038A, _t0392);
        bool _t0394 = prim $and01C4 (_t0382, _t0393);
        bool _t0395 = prim $and01C4 (_t037A, _t0394);
        if _t0395 {
          Femdata: MeshPos _t0396 = extractFemItemN((mesh0351, cellInt0358, xn0356, pos0352),AllBuild(MeshPos),);
          return _t0396;
        }
      }
    }
  }
  string _t0398 = "Bad end 2";
  string _t0399 = "\n";
  print (_t0398, _t0399);
  Femdata: MeshPos _t039A = extractFemItemN((mesh0351),InvalidBuild(MeshPos),);
  return _t039A;
}
function Femdata: RefCell#0 refcell039B (Femdata: Mesh arg0039C)
{
  Femdata: RefCell _t039D = extractFemItem(RefCell(Mesh), Femdata: RefCell, arg0039C);
  return _t039D;
}
function Femdata: MeshCell[]#0 cells039E (Femdata: Mesh arg0039F)
{
  Femdata: MeshCell[] _t03A0 = extractFemItem(Cells(Mesh), Femdata: MeshCell[], arg0039F);
  return _t03A0;
}
function Femdata: MeshCell[]#0 cells03A1 (Femdata: Mesh arg0039F)
{
  int _t03A2 = 0;
  int _t03A3 = extractFemItem(NumCell(Mesh), int, arg0039F);
  int[] _t03A4 = prim $range01C3 (_t03A2, _t03A3);
  Femdata: MeshCell[] accum03A7 = {};
  foreach i03A5 in _t03A4 {
    Femdata: MeshCell _t03A6 = loadFem(MeshCell, arg0039F, i03A5);
    accum03A7 = prim @0010<Femdata: MeshCell> (accum03A7, _t03A6);
  }
  return accum03A7;
}
function int#0 numCell03A8 (Femdata: Mesh arg0039C)
{
  int _t03A9 = extractFemItem(NumCell(Mesh), int, arg0039C);
  return _t03A9;
}
function tensor[3,3,3,3]#0 mesh_t_transform_303AA (vec3 pos03AB, int cell03AC, Femdata: Mesh mesh03AD)
{
  field(3)[3] _t03AE = femField(mesh03AD,cell03AC,field(3)[3],Transform,);
  field(3)[3,3] _t03AF = prim ∇⊗00AD<#∞; %3; $[]; %3> (_t03AE);
  field(3)[3,3,3] _t03B0 = prim ∇⊗00AD<#∞; %3; $[3]; %3> (_t03AF);
  field(3)[3,3,3,3] _t03B1 = prim ∇⊗00AD<#∞; %3; $[3,3]; %3> (_t03B0);
  tensor[3,3,3,3] _t03B2 = prim @00A5<#∞; %3; $[3,3,3,3]> (_t03B1, pos03AB);
  return _t03B2;
}
function tensor[3,3,3]#0 mesh_t_transform_203B3 (vec3 pos03AB, int cell03AC, Femdata: Mesh mesh03AD)
{
  field(3)[3] _t03B4 = femField(mesh03AD,cell03AC,field(3)[3],Transform,);
  field(3)[3,3] _t03B5 = prim ∇⊗00AD<#∞; %3; $[]; %3> (_t03B4);
  field(3)[3,3,3] _t03B6 = prim ∇⊗00AD<#∞; %3; $[3]; %3> (_t03B5);
  tensor[3,3,3] _t03B7 = prim @00A5<#∞; %3; $[3,3,3]> (_t03B6, pos03AB);
  return _t03B7;
}
function tensor[3,3]#0 mesh_t_transform_103B8 (vec3 pos03AB, int cell03AC, Femdata: Mesh mesh03AD)
{
  field(3)[3] _t03B9 = femField(mesh03AD,cell03AC,field(3)[3],Transform,);
  field(3)[3,3] _t03BA = prim ∇⊗00AD<#∞; %3; $[]; %3> (_t03B9);
  tensor[3,3] _t03BB = prim @00A5<#∞; %3; $[3,3]> (_t03BA, pos03AB);
  return _t03BB;
}
function vec3#2 mesh_t_transform_003BC (vec3 pos03AB, int cell03AC, Femdata: Mesh mesh03AD)
{
  field(3)[3] _t03BD = femField(mesh03AD,cell03AC,field(3)[3],Transform,);
  vec3 _t03BE = prim @00A5<#∞; %3; $[3]> (_t03BD, pos03AB);
  return _t03BE;
}
function Femdata: MeshPos#0 _mesh_t_newtonInverse03BF (vec3 pos03C0, int cellInt03C1, Femdata: Mesh mesh03C2)
{
  real _t03C3 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t03C4 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t03C5 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  xn03C6 = [_t03C3, _t03C4, _t03C5];
  field(3)[3] _t03C7 = femField(mesh03C2,cellInt03C1,field(3)[3],Transform,);
  field(3)[3,3] _t03C8 = prim ∇⊗00AD<#∞; %3; $[]; %3> (_t03C7);
  field(3)[3,3] _t03C9 = prim inv015E<#∞; %3> (_t03C8);
  real _t03CA = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t03CB = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t03CC = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  vec3 _t03CD = [_t03CA, _t03CB, _t03CC];
  A03CE = prim @00A5<#∞; %3; $[3,3]> (_t03C9, _t03CD);
  int _t03CF = 0;
  int _t03D0 = 16;
  int[] _t03D1 = prim $range01C3 (_t03CF, _t03D0);
  foreach itter0401 in _t03D1 {
    field(3)[3] _t03D2 = femField(mesh03C2,cellInt03C1,field(3)[3],Transform,);
    field(3)[3] _t03D3 = prim -002E<#∞; %3; $[3]> (_t03D2, pos03C0);
    field(3)[3] _t03D4 = prim •00D4<#∞; %3; $[3,3]; $[3]; $[3]> (A03CE, _t03D3);
    delta03D5 = prim @00A5<#∞; %3; $[3]> (_t03D4, xn03C6);
    xn03C6 = prim -0026<$[3]> (xn03C6, delta03D5);
    real _t03D6 = 0.1e-7;
    real _t03D7 = 0.1e-7;
    real _t03D8 = prim *0034 (_t03D6, _t03D7);
    real _t03D9 = prim •00CE<$[3]; $[3]; $[]> (delta03D5, delta03D5);
    bool _t03DA = prim >=007E (_t03D8, _t03D9);
    if _t03DA {
      real _t03DB = 0.1e1;
      real _t03DC = 0.1e-8;
      real _t03DD = prim +0017<$[]> (_t03DB, _t03DC);
      real _t03DE = 0.1e1;
      real _t03DF = 0.1e1;
      real _t03E0 = 0.1e1;
      vec3 _t03E1 = [_t03DE, _t03DF, _t03E0];
      real _t03E2 = prim •00CE<$[3]; $[3]; $[]> (_t03E1, xn03C6);
      bool _t03E3 = prim >0080 (_t03DD, _t03E2);
      real _t03E4 = 0.1e-8;
      real _t03E5 = 0.1e-8;
      real _t03E6 = 0.1e-8;
      vec3 _t03E7 = [_t03E4, _t03E5, _t03E6];
      vec3 _t03E8 = prim +0017<$[3]> (_t03E7, xn03C6);
      real _t03E9 = _t03E8[0];
      real _t03EA = -0.e0;
      bool _t03EB = prim >0080 (_t03E9, _t03EA);
      real _t03EC = 0.1e-8;
      real _t03ED = 0.1e-8;
      real _t03EE = 0.1e-8;
      vec3 _t03EF = [_t03EC, _t03ED, _t03EE];
      vec3 _t03F0 = prim +0017<$[3]> (_t03EF, xn03C6);
      real _t03F1 = _t03F0[1];
      real _t03F2 = -0.e0;
      bool _t03F3 = prim >0080 (_t03F1, _t03F2);
      real _t03F4 = 0.1e-8;
      real _t03F5 = 0.1e-8;
      real _t03F6 = 0.1e-8;
      vec3 _t03F7 = [_t03F4, _t03F5, _t03F6];
      vec3 _t03F8 = prim +0017<$[3]> (_t03F7, xn03C6);
      real _t03F9 = _t03F8[2];
      real _t03FA = -0.e0;
      bool _t03FB = prim >0080 (_t03F9, _t03FA);
      bool _t03FC = prim $and01C4 (_t03F3, _t03FB);
      bool _t03FD = prim $and01C4 (_t03EB, _t03FC);
      bool _t03FE = prim $and01C4 (_t03E3, _t03FD);
      if _t03FE {
        Femdata: MeshPos _t03FF = extractFemItemN((mesh03C2, cellInt03C1, xn03C6, pos03C0),AllBuild(MeshPos),);
        return _t03FF;
      } else {
        Femdata: MeshPos _t0400 = extractFemItemN((mesh03C2),InvalidBuild(MeshPos),);
        return _t0400;
      }
    }
  }
  Femdata: MeshPos _t0402 = extractFemItemN((mesh03C2),InvalidBuild(MeshPos),);
  return _t0402;
}
function Femdata: MeshPos#0 _mesh_pos_mesh_t_build_world_pos0403 (Femdata: MeshPos pos0404)
{
  bool _t0405 = extractFemItem(WorldTest(MeshPos), bool, pos0404);
  if _t0405 {
    vec3 _t0406 = extractFemItem(RefPos(MeshPos), vec3, pos0404);
    int _t0407 = extractFemItem(CellIndex(MeshPos), int, pos0404);
    Femdata: Mesh _t0408 = extractFem(pos0404, Mesh);
    vec3 _t0409 = func mesh_t_transform_003BC (_t0406, _t0407, _t0408);
    Femdata: MeshPos _t040A = extractFemItemN((pos0404, _t0409),NewWorld(MeshPos),);
    return _t040A;
  } else {
    return pos0404;
  }
}
function vec3#0 worldPos040B (Femdata: MeshPos pos0404)
{
  vec3 _t040C = extractFemItem(RefPos(MeshPos), vec3, pos0404);
  int _t040D = extractFemItem(CellIndex(MeshPos), int, pos0404);
  Femdata: Mesh _t040E = extractFem(pos0404, Mesh);
  vec3 _t040F = func mesh_t_transform_003BC (_t040C, _t040D, _t040E);
  return _t040F;
}
function Femdata: MeshPos#0 $exitPos0410 (Femdata: Mesh mesh0411, int cellId0412, vec3 refPos0413, vec3 dPos0414, real[2] time0415)
{
  int _t0416 = -1;
  real _t0417 = time0415[1];
  int _t0418 = prim $r2i01B7 (_t0417);
  int[2] _t041A = func nextCell40419 (_t0418, cellId0412, mesh0411);
  int _t041B = 0;
  int _t041C = prim $sub01C0<int; %2> (_t041A, _t041B);
  bool _t041D = prim !=0086 (_t0416, _t041C);
  if _t041D {
    real _t041E = time0415[1];
    int _t041F = prim $r2i01B7 (_t041E);
    int[2] _t0420 = func nextCell40419 (_t041F, cellId0412, mesh0411);
    int _t0421 = 0;
    int _t0422 = prim $sub01C0<int; %2> (_t0420, _t0421);
    real _t0423 = 0.1e1;
    real _t0424 = 0.e0;
    real _t0425 = 0.e0;
    real _t0426 = 0.e0;
    vec4 _t0427 = [_t0423, _t0424, _t0425, _t0426];
    real _t0428 = 0.e0;
    real _t0429 = 0.1e1;
    real _t042A = 0.e0;
    real _t042B = 0.e0;
    vec4 _t042C = [_t0428, _t0429, _t042A, _t042B];
    real _t042D = 0.e0;
    real _t042E = 0.e0;
    real _t042F = 0.1e1;
    real _t0430 = 0.e0;
    vec4 _t0431 = [_t042D, _t042E, _t042F, _t0430];
    real _t0432 = 0.222044604925e-15;
    real _t0433 = 0.e0;
    real _t0434 = 0.44408920985e-15;
    real _t0435 = 0.1e1;
    vec4 _t0436 = [_t0432, _t0433, _t0434, _t0435];
    tensor[4,4] _t0437 = [_t0427, _t042C, _t0431, _t0436];
    real _t0438 = 0.173205080757e1;
    real _t0439 = 0.173205080757e1;
    real _t043A = 0.173205080757e1;
    real _t043B = -0.173205080757e1;
    vec4 _t043C = [_t0438, _t0439, _t043A, _t043B];
    real _t043D = 0.1e1;
    real _t043E = 0.2e1;
    real _t043F = 0.1e1;
    real _t0440 = -0.1e1;
    vec4 _t0441 = [_t043D, _t043E, _t043F, _t0440];
    real _t0442 = -0.1e1;
    real _t0443 = -0.1e1;
    real _t0444 = -0.192296268638e-15;
    real _t0445 = 0.1e1;
    vec4 _t0446 = [_t0442, _t0443, _t0444, _t0445];
    real _t0447 = 0.222044604925e-15;
    real _t0448 = 0.e0;
    real _t0449 = 0.44408920985e-15;
    real _t044A = 0.1e1;
    vec4 _t044B = [_t0447, _t0448, _t0449, _t044A];
    tensor[4,4] _t044C = [_t043C, _t0441, _t0446, _t044B];
    real _t044D = 0.1e1;
    real _t044E = 0.2e1;
    real _t044F = 0.1e1;
    real _t0450 = -0.1e1;
    vec4 _t0451 = [_t044D, _t044E, _t044F, _t0450];
    real _t0452 = 0.173205080757e1;
    real _t0453 = 0.173205080757e1;
    real _t0454 = 0.173205080757e1;
    real _t0455 = -0.173205080757e1;
    vec4 _t0456 = [_t0452, _t0453, _t0454, _t0455];
    real _t0457 = -0.1e1;
    real _t0458 = -0.1e1;
    real _t0459 = -0.192296268638e-15;
    real _t045A = 0.1e1;
    vec4 _t045B = [_t0457, _t0458, _t0459, _t045A];
    real _t045C = 0.222044604925e-15;
    real _t045D = 0.e0;
    real _t045E = 0.44408920985e-15;
    real _t045F = 0.1e1;
    vec4 _t0460 = [_t045C, _t045D, _t045E, _t045F];
    tensor[4,4] _t0461 = [_t0451, _t0456, _t045B, _t0460];
    real _t0462 = 0.1e1;
    real _t0463 = 0.2e1;
    real _t0464 = 0.1e1;
    real _t0465 = -0.1e1;
    vec4 _t0466 = [_t0462, _t0463, _t0464, _t0465];
    real _t0467 = -0.1e1;
    real _t0468 = -0.1e1;
    real _t0469 = -0.192296268638e-15;
    real _t046A = 0.1e1;
    vec4 _t046B = [_t0467, _t0468, _t0469, _t046A];
    real _t046C = 0.173205080757e1;
    real _t046D = 0.173205080757e1;
    real _t046E = 0.173205080757e1;
    real _t046F = -0.173205080757e1;
    vec4 _t0470 = [_t046C, _t046D, _t046E, _t046F];
    real _t0471 = 0.222044604925e-15;
    real _t0472 = 0.e0;
    real _t0473 = 0.44408920985e-15;
    real _t0474 = 0.1e1;
    vec4 _t0475 = [_t0471, _t0472, _t0473, _t0474];
    tensor[4,4] _t0476 = [_t0466, _t046B, _t0470, _t0475];
    tensor[4,4][4] _t0477 = {_t0437, _t044C, _t0461, _t0476};
    real _t0478 = 0.57735026919e0;
    real _t0479 = -0.1e1;
    real _t047A = -0.1e1;
    real _t047B = 0.1e1;
    vec4 _t047C = [_t0478, _t0479, _t047A, _t047B];
    real _t047D = -0.57735026919e0;
    real _t047E = 0.1e1;
    real _t047F = 0.e0;
    real _t0480 = 0.e0;
    vec4 _t0481 = [_t047D, _t047E, _t047F, _t0480];
    real _t0482 = 0.57735026919e0;
    real _t0483 = 0.e0;
    real _t0484 = 0.1e1;
    real _t0485 = 0.e0;
    vec4 _t0486 = [_t0482, _t0483, _t0484, _t0485];
    real _t0487 = 0.e0;
    real _t0488 = 0.e0;
    real _t0489 = 0.e0;
    real _t048A = 0.1e1;
    vec4 _t048B = [_t0487, _t0488, _t0489, _t048A];
    tensor[4,4] _t048C = [_t047C, _t0481, _t0486, _t048B];
    real _t048D = 0.1e1;
    real _t048E = 0.e0;
    real _t048F = 0.e0;
    real _t0490 = 0.e0;
    vec4 _t0491 = [_t048D, _t048E, _t048F, _t0490];
    real _t0492 = 0.e0;
    real _t0493 = 0.1e1;
    real _t0494 = 0.e0;
    real _t0495 = 0.e0;
    vec4 _t0496 = [_t0492, _t0493, _t0494, _t0495];
    real _t0497 = 0.e0;
    real _t0498 = 0.e0;
    real _t0499 = 0.1e1;
    real _t049A = 0.e0;
    vec4 _t049B = [_t0497, _t0498, _t0499, _t049A];
    real _t049C = 0.e0;
    real _t049D = 0.e0;
    real _t049E = 0.e0;
    real _t049F = 0.1e1;
    vec4 _t04A0 = [_t049C, _t049D, _t049E, _t049F];
    tensor[4,4] _t04A1 = [_t0491, _t0496, _t049B, _t04A0];
    real _t04A2 = 0.e0;
    real _t04A3 = 0.1e1;
    real _t04A4 = 0.e0;
    real _t04A5 = 0.e0;
    vec4 _t04A6 = [_t04A2, _t04A3, _t04A4, _t04A5];
    real _t04A7 = 0.1e1;
    real _t04A8 = 0.e0;
    real _t04A9 = 0.e0;
    real _t04AA = 0.e0;
    vec4 _t04AB = [_t04A7, _t04A8, _t04A9, _t04AA];
    real _t04AC = 0.e0;
    real _t04AD = 0.e0;
    real _t04AE = 0.1e1;
    real _t04AF = 0.e0;
    vec4 _t04B0 = [_t04AC, _t04AD, _t04AE, _t04AF];
    real _t04B1 = 0.e0;
    real _t04B2 = 0.e0;
    real _t04B3 = 0.e0;
    real _t04B4 = 0.1e1;
    vec4 _t04B5 = [_t04B1, _t04B2, _t04B3, _t04B4];
    tensor[4,4] _t04B6 = [_t04A6, _t04AB, _t04B0, _t04B5];
    real _t04B7 = 0.e0;
    real _t04B8 = 0.1e1;
    real _t04B9 = 0.e0;
    real _t04BA = 0.e0;
    vec4 _t04BB = [_t04B7, _t04B8, _t04B9, _t04BA];
    real _t04BC = 0.e0;
    real _t04BD = 0.e0;
    real _t04BE = 0.1e1;
    real _t04BF = 0.e0;
    vec4 _t04C0 = [_t04BC, _t04BD, _t04BE, _t04BF];
    real _t04C1 = 0.1e1;
    real _t04C2 = 0.e0;
    real _t04C3 = 0.e0;
    real _t04C4 = 0.e0;
    vec4 _t04C5 = [_t04C1, _t04C2, _t04C3, _t04C4];
    real _t04C6 = 0.e0;
    real _t04C7 = 0.e0;
    real _t04C8 = 0.e0;
    real _t04C9 = 0.1e1;
    vec4 _t04CA = [_t04C6, _t04C7, _t04C8, _t04C9];
    tensor[4,4] _t04CB = [_t04BB, _t04C0, _t04C5, _t04CA];
    tensor[4,4][4] _t04CC = {_t048C, _t04A1, _t04B6, _t04CB};
    real _t04CD = -0.1e1;
    real _t04CE = 0.57735026919e0;
    real _t04CF = -0.1e1;
    real _t04D0 = 0.1e1;
    vec4 _t04D1 = [_t04CD, _t04CE, _t04CF, _t04D0];
    real _t04D2 = 0.1e1;
    real _t04D3 = -0.57735026919e0;
    real _t04D4 = 0.e0;
    real _t04D5 = 0.e0;
    vec4 _t04D6 = [_t04D2, _t04D3, _t04D4, _t04D5];
    real _t04D7 = 0.e0;
    real _t04D8 = 0.57735026919e0;
    real _t04D9 = 0.1e1;
    real _t04DA = 0.e0;
    vec4 _t04DB = [_t04D7, _t04D8, _t04D9, _t04DA];
    real _t04DC = 0.e0;
    real _t04DD = 0.e0;
    real _t04DE = 0.e0;
    real _t04DF = 0.1e1;
    vec4 _t04E0 = [_t04DC, _t04DD, _t04DE, _t04DF];
    tensor[4,4] _t04E1 = [_t04D1, _t04D6, _t04DB, _t04E0];
    real _t04E2 = 0.e0;
    real _t04E3 = 0.1e1;
    real _t04E4 = 0.e0;
    real _t04E5 = 0.e0;
    vec4 _t04E6 = [_t04E2, _t04E3, _t04E4, _t04E5];
    real _t04E7 = 0.1e1;
    real _t04E8 = 0.e0;
    real _t04E9 = 0.e0;
    real _t04EA = 0.e0;
    vec4 _t04EB = [_t04E7, _t04E8, _t04E9, _t04EA];
    real _t04EC = 0.e0;
    real _t04ED = 0.e0;
    real _t04EE = 0.1e1;
    real _t04EF = 0.e0;
    vec4 _t04F0 = [_t04EC, _t04ED, _t04EE, _t04EF];
    real _t04F1 = 0.e0;
    real _t04F2 = 0.e0;
    real _t04F3 = 0.e0;
    real _t04F4 = 0.1e1;
    vec4 _t04F5 = [_t04F1, _t04F2, _t04F3, _t04F4];
    tensor[4,4] _t04F6 = [_t04E6, _t04EB, _t04F0, _t04F5];
    real _t04F7 = 0.1e1;
    real _t04F8 = 0.e0;
    real _t04F9 = 0.e0;
    real _t04FA = 0.e0;
    vec4 _t04FB = [_t04F7, _t04F8, _t04F9, _t04FA];
    real _t04FC = 0.e0;
    real _t04FD = 0.1e1;
    real _t04FE = 0.e0;
    real _t04FF = 0.e0;
    vec4 _t0500 = [_t04FC, _t04FD, _t04FE, _t04FF];
    real _t0501 = 0.e0;
    real _t0502 = 0.e0;
    real _t0503 = 0.1e1;
    real _t0504 = 0.e0;
    vec4 _t0505 = [_t0501, _t0502, _t0503, _t0504];
    real _t0506 = 0.e0;
    real _t0507 = 0.e0;
    real _t0508 = 0.e0;
    real _t0509 = 0.1e1;
    vec4 _t050A = [_t0506, _t0507, _t0508, _t0509];
    tensor[4,4] _t050B = [_t04FB, _t0500, _t0505, _t050A];
    real _t050C = 0.1e1;
    real _t050D = 0.e0;
    real _t050E = 0.e0;
    real _t050F = 0.e0;
    vec4 _t0510 = [_t050C, _t050D, _t050E, _t050F];
    real _t0511 = 0.e0;
    real _t0512 = 0.e0;
    real _t0513 = 0.1e1;
    real _t0514 = 0.e0;
    vec4 _t0515 = [_t0511, _t0512, _t0513, _t0514];
    real _t0516 = 0.e0;
    real _t0517 = 0.1e1;
    real _t0518 = 0.e0;
    real _t0519 = 0.e0;
    vec4 _t051A = [_t0516, _t0517, _t0518, _t0519];
    real _t051B = 0.e0;
    real _t051C = 0.e0;
    real _t051D = 0.e0;
    real _t051E = 0.1e1;
    vec4 _t051F = [_t051B, _t051C, _t051D, _t051E];
    tensor[4,4] _t0520 = [_t0510, _t0515, _t051A, _t051F];
    tensor[4,4][4] _t0521 = {_t04E1, _t04F6, _t050B, _t0520};
    real _t0522 = -0.1e1;
    real _t0523 = -0.1e1;
    real _t0524 = 0.57735026919e0;
    real _t0525 = 0.1e1;
    vec4 _t0526 = [_t0522, _t0523, _t0524, _t0525];
    real _t0527 = 0.1e1;
    real _t0528 = 0.e0;
    real _t0529 = -0.57735026919e0;
    real _t052A = 0.e0;
    vec4 _t052B = [_t0527, _t0528, _t0529, _t052A];
    real _t052C = 0.e0;
    real _t052D = 0.1e1;
    real _t052E = 0.57735026919e0;
    real _t052F = 0.e0;
    vec4 _t0530 = [_t052C, _t052D, _t052E, _t052F];
    real _t0531 = 0.e0;
    real _t0532 = 0.e0;
    real _t0533 = 0.e0;
    real _t0534 = 0.1e1;
    vec4 _t0535 = [_t0531, _t0532, _t0533, _t0534];
    tensor[4,4] _t0536 = [_t0526, _t052B, _t0530, _t0535];
    real _t0537 = 0.e0;
    real _t0538 = 0.e0;
    real _t0539 = 0.1e1;
    real _t053A = 0.e0;
    vec4 _t053B = [_t0537, _t0538, _t0539, _t053A];
    real _t053C = 0.1e1;
    real _t053D = 0.e0;
    real _t053E = 0.e0;
    real _t053F = 0.e0;
    vec4 _t0540 = [_t053C, _t053D, _t053E, _t053F];
    real _t0541 = 0.e0;
    real _t0542 = 0.1e1;
    real _t0543 = 0.e0;
    real _t0544 = 0.e0;
    vec4 _t0545 = [_t0541, _t0542, _t0543, _t0544];
    real _t0546 = 0.e0;
    real _t0547 = 0.e0;
    real _t0548 = 0.e0;
    real _t0549 = 0.1e1;
    vec4 _t054A = [_t0546, _t0547, _t0548, _t0549];
    tensor[4,4] _t054B = [_t053B, _t0540, _t0545, _t054A];
    real _t054C = 0.1e1;
    real _t054D = 0.e0;
    real _t054E = 0.e0;
    real _t054F = 0.e0;
    vec4 _t0550 = [_t054C, _t054D, _t054E, _t054F];
    real _t0551 = 0.e0;
    real _t0552 = 0.e0;
    real _t0553 = 0.1e1;
    real _t0554 = 0.e0;
    vec4 _t0555 = [_t0551, _t0552, _t0553, _t0554];
    real _t0556 = 0.e0;
    real _t0557 = 0.1e1;
    real _t0558 = 0.e0;
    real _t0559 = 0.e0;
    vec4 _t055A = [_t0556, _t0557, _t0558, _t0559];
    real _t055B = 0.e0;
    real _t055C = 0.e0;
    real _t055D = 0.e0;
    real _t055E = 0.1e1;
    vec4 _t055F = [_t055B, _t055C, _t055D, _t055E];
    tensor[4,4] _t0560 = [_t0550, _t0555, _t055A, _t055F];
    real _t0561 = 0.1e1;
    real _t0562 = 0.e0;
    real _t0563 = 0.e0;
    real _t0564 = 0.e0;
    vec4 _t0565 = [_t0561, _t0562, _t0563, _t0564];
    real _t0566 = 0.e0;
    real _t0567 = 0.1e1;
    real _t0568 = 0.e0;
    real _t0569 = 0.e0;
    vec4 _t056A = [_t0566, _t0567, _t0568, _t0569];
    real _t056B = 0.e0;
    real _t056C = 0.e0;
    real _t056D = 0.1e1;
    real _t056E = 0.e0;
    vec4 _t056F = [_t056B, _t056C, _t056D, _t056E];
    real _t0570 = 0.e0;
    real _t0571 = 0.e0;
    real _t0572 = 0.e0;
    real _t0573 = 0.1e1;
    vec4 _t0574 = [_t0570, _t0571, _t0572, _t0573];
    tensor[4,4] _t0575 = [_t0565, _t056A, _t056F, _t0574];
    tensor[4,4][4] _t0576 = {_t0536, _t054B, _t0560, _t0575};
    tensor[4,4][4][4] _t0577 = {_t0477, _t04CC, _t0521, _t0576};
    real _t0578 = time0415[1];
    int _t0579 = prim $r2i01B7 (_t0578);
    tensor[4,4][4] _t057A = prim $sub01C0<tensor[4,4][4]; %4> (_t0577, _t0579);
    real _t057B = time0415[1];
    int _t057C = prim $r2i01B7 (_t057B);
    int[2] _t057D = func nextCell40419 (_t057C, cellId0412, mesh0411);
    int _t057E = 1;
    int _t057F = prim $sub01C0<int; %2> (_t057D, _t057E);
    tensor[4,4] _t0580 = prim $sub01C0<tensor[4,4]; %4> (_t057A, _t057F);
    real _t0581 = time0415[0];
    vec3 _t0582 = prim *0036<$[3]> (_t0581, dPos0414);
    vec3 _t0583 = prim +0017<$[3]> (_t0582, refPos0413);
    real _t0584 = _t0583[0];
    real _t0585 = time0415[0];
    vec3 _t0586 = prim *0036<$[3]> (_t0585, dPos0414);
    vec3 _t0587 = prim +0017<$[3]> (_t0586, refPos0413);
    real _t0588 = _t0587[1];
    real _t0589 = time0415[0];
    vec3 _t058A = prim *0036<$[3]> (_t0589, dPos0414);
    vec3 _t058B = prim +0017<$[3]> (_t058A, refPos0413);
    real _t058C = _t058B[2];
    real _t058D = 0.1e1;
    vec4 _t058E = [_t0584, _t0588, _t058C, _t058D];
    vec4 _t058F = prim •00CE<$[4,4]; $[4]; $[4]> (_t0580, _t058E);
    real _t0590 = _t058F[0];
    real _t0591 = 0.1e1;
    real _t0592 = 0.e0;
    real _t0593 = 0.e0;
    real _t0594 = 0.e0;
    vec4 _t0595 = [_t0591, _t0592, _t0593, _t0594];
    real _t0596 = 0.e0;
    real _t0597 = 0.1e1;
    real _t0598 = 0.e0;
    real _t0599 = 0.e0;
    vec4 _t059A = [_t0596, _t0597, _t0598, _t0599];
    real _t059B = 0.e0;
    real _t059C = 0.e0;
    real _t059D = 0.1e1;
    real _t059E = 0.e0;
    vec4 _t059F = [_t059B, _t059C, _t059D, _t059E];
    real _t05A0 = 0.222044604925e-15;
    real _t05A1 = 0.e0;
    real _t05A2 = 0.44408920985e-15;
    real _t05A3 = 0.1e1;
    vec4 _t05A4 = [_t05A0, _t05A1, _t05A2, _t05A3];
    tensor[4,4] _t05A5 = [_t0595, _t059A, _t059F, _t05A4];
    real _t05A6 = 0.173205080757e1;
    real _t05A7 = 0.173205080757e1;
    real _t05A8 = 0.173205080757e1;
    real _t05A9 = -0.173205080757e1;
    vec4 _t05AA = [_t05A6, _t05A7, _t05A8, _t05A9];
    real _t05AB = 0.1e1;
    real _t05AC = 0.2e1;
    real _t05AD = 0.1e1;
    real _t05AE = -0.1e1;
    vec4 _t05AF = [_t05AB, _t05AC, _t05AD, _t05AE];
    real _t05B0 = -0.1e1;
    real _t05B1 = -0.1e1;
    real _t05B2 = -0.192296268638e-15;
    real _t05B3 = 0.1e1;
    vec4 _t05B4 = [_t05B0, _t05B1, _t05B2, _t05B3];
    real _t05B5 = 0.222044604925e-15;
    real _t05B6 = 0.e0;
    real _t05B7 = 0.44408920985e-15;
    real _t05B8 = 0.1e1;
    vec4 _t05B9 = [_t05B5, _t05B6, _t05B7, _t05B8];
    tensor[4,4] _t05BA = [_t05AA, _t05AF, _t05B4, _t05B9];
    real _t05BB = 0.1e1;
    real _t05BC = 0.2e1;
    real _t05BD = 0.1e1;
    real _t05BE = -0.1e1;
    vec4 _t05BF = [_t05BB, _t05BC, _t05BD, _t05BE];
    real _t05C0 = 0.173205080757e1;
    real _t05C1 = 0.173205080757e1;
    real _t05C2 = 0.173205080757e1;
    real _t05C3 = -0.173205080757e1;
    vec4 _t05C4 = [_t05C0, _t05C1, _t05C2, _t05C3];
    real _t05C5 = -0.1e1;
    real _t05C6 = -0.1e1;
    real _t05C7 = -0.192296268638e-15;
    real _t05C8 = 0.1e1;
    vec4 _t05C9 = [_t05C5, _t05C6, _t05C7, _t05C8];
    real _t05CA = 0.222044604925e-15;
    real _t05CB = 0.e0;
    real _t05CC = 0.44408920985e-15;
    real _t05CD = 0.1e1;
    vec4 _t05CE = [_t05CA, _t05CB, _t05CC, _t05CD];
    tensor[4,4] _t05CF = [_t05BF, _t05C4, _t05C9, _t05CE];
    real _t05D0 = 0.1e1;
    real _t05D1 = 0.2e1;
    real _t05D2 = 0.1e1;
    real _t05D3 = -0.1e1;
    vec4 _t05D4 = [_t05D0, _t05D1, _t05D2, _t05D3];
    real _t05D5 = -0.1e1;
    real _t05D6 = -0.1e1;
    real _t05D7 = -0.192296268638e-15;
    real _t05D8 = 0.1e1;
    vec4 _t05D9 = [_t05D5, _t05D6, _t05D7, _t05D8];
    real _t05DA = 0.173205080757e1;
    real _t05DB = 0.173205080757e1;
    real _t05DC = 0.173205080757e1;
    real _t05DD = -0.173205080757e1;
    vec4 _t05DE = [_t05DA, _t05DB, _t05DC, _t05DD];
    real _t05DF = 0.222044604925e-15;
    real _t05E0 = 0.e0;
    real _t05E1 = 0.44408920985e-15;
    real _t05E2 = 0.1e1;
    vec4 _t05E3 = [_t05DF, _t05E0, _t05E1, _t05E2];
    tensor[4,4] _t05E4 = [_t05D4, _t05D9, _t05DE, _t05E3];
    tensor[4,4][4] _t05E5 = {_t05A5, _t05BA, _t05CF, _t05E4};
    real _t05E6 = 0.57735026919e0;
    real _t05E7 = -0.1e1;
    real _t05E8 = -0.1e1;
    real _t05E9 = 0.1e1;
    vec4 _t05EA = [_t05E6, _t05E7, _t05E8, _t05E9];
    real _t05EB = -0.57735026919e0;
    real _t05EC = 0.1e1;
    real _t05ED = 0.e0;
    real _t05EE = 0.e0;
    vec4 _t05EF = [_t05EB, _t05EC, _t05ED, _t05EE];
    real _t05F0 = 0.57735026919e0;
    real _t05F1 = 0.e0;
    real _t05F2 = 0.1e1;
    real _t05F3 = 0.e0;
    vec4 _t05F4 = [_t05F0, _t05F1, _t05F2, _t05F3];
    real _t05F5 = 0.e0;
    real _t05F6 = 0.e0;
    real _t05F7 = 0.e0;
    real _t05F8 = 0.1e1;
    vec4 _t05F9 = [_t05F5, _t05F6, _t05F7, _t05F8];
    tensor[4,4] _t05FA = [_t05EA, _t05EF, _t05F4, _t05F9];
    real _t05FB = 0.1e1;
    real _t05FC = 0.e0;
    real _t05FD = 0.e0;
    real _t05FE = 0.e0;
    vec4 _t05FF = [_t05FB, _t05FC, _t05FD, _t05FE];
    real _t0600 = 0.e0;
    real _t0601 = 0.1e1;
    real _t0602 = 0.e0;
    real _t0603 = 0.e0;
    vec4 _t0604 = [_t0600, _t0601, _t0602, _t0603];
    real _t0605 = 0.e0;
    real _t0606 = 0.e0;
    real _t0607 = 0.1e1;
    real _t0608 = 0.e0;
    vec4 _t0609 = [_t0605, _t0606, _t0607, _t0608];
    real _t060A = 0.e0;
    real _t060B = 0.e0;
    real _t060C = 0.e0;
    real _t060D = 0.1e1;
    vec4 _t060E = [_t060A, _t060B, _t060C, _t060D];
    tensor[4,4] _t060F = [_t05FF, _t0604, _t0609, _t060E];
    real _t0610 = 0.e0;
    real _t0611 = 0.1e1;
    real _t0612 = 0.e0;
    real _t0613 = 0.e0;
    vec4 _t0614 = [_t0610, _t0611, _t0612, _t0613];
    real _t0615 = 0.1e1;
    real _t0616 = 0.e0;
    real _t0617 = 0.e0;
    real _t0618 = 0.e0;
    vec4 _t0619 = [_t0615, _t0616, _t0617, _t0618];
    real _t061A = 0.e0;
    real _t061B = 0.e0;
    real _t061C = 0.1e1;
    real _t061D = 0.e0;
    vec4 _t061E = [_t061A, _t061B, _t061C, _t061D];
    real _t061F = 0.e0;
    real _t0620 = 0.e0;
    real _t0621 = 0.e0;
    real _t0622 = 0.1e1;
    vec4 _t0623 = [_t061F, _t0620, _t0621, _t0622];
    tensor[4,4] _t0624 = [_t0614, _t0619, _t061E, _t0623];
    real _t0625 = 0.e0;
    real _t0626 = 0.1e1;
    real _t0627 = 0.e0;
    real _t0628 = 0.e0;
    vec4 _t0629 = [_t0625, _t0626, _t0627, _t0628];
    real _t062A = 0.e0;
    real _t062B = 0.e0;
    real _t062C = 0.1e1;
    real _t062D = 0.e0;
    vec4 _t062E = [_t062A, _t062B, _t062C, _t062D];
    real _t062F = 0.1e1;
    real _t0630 = 0.e0;
    real _t0631 = 0.e0;
    real _t0632 = 0.e0;
    vec4 _t0633 = [_t062F, _t0630, _t0631, _t0632];
    real _t0634 = 0.e0;
    real _t0635 = 0.e0;
    real _t0636 = 0.e0;
    real _t0637 = 0.1e1;
    vec4 _t0638 = [_t0634, _t0635, _t0636, _t0637];
    tensor[4,4] _t0639 = [_t0629, _t062E, _t0633, _t0638];
    tensor[4,4][4] _t063A = {_t05FA, _t060F, _t0624, _t0639};
    real _t063B = -0.1e1;
    real _t063C = 0.57735026919e0;
    real _t063D = -0.1e1;
    real _t063E = 0.1e1;
    vec4 _t063F = [_t063B, _t063C, _t063D, _t063E];
    real _t0640 = 0.1e1;
    real _t0641 = -0.57735026919e0;
    real _t0642 = 0.e0;
    real _t0643 = 0.e0;
    vec4 _t0644 = [_t0640, _t0641, _t0642, _t0643];
    real _t0645 = 0.e0;
    real _t0646 = 0.57735026919e0;
    real _t0647 = 0.1e1;
    real _t0648 = 0.e0;
    vec4 _t0649 = [_t0645, _t0646, _t0647, _t0648];
    real _t064A = 0.e0;
    real _t064B = 0.e0;
    real _t064C = 0.e0;
    real _t064D = 0.1e1;
    vec4 _t064E = [_t064A, _t064B, _t064C, _t064D];
    tensor[4,4] _t064F = [_t063F, _t0644, _t0649, _t064E];
    real _t0650 = 0.e0;
    real _t0651 = 0.1e1;
    real _t0652 = 0.e0;
    real _t0653 = 0.e0;
    vec4 _t0654 = [_t0650, _t0651, _t0652, _t0653];
    real _t0655 = 0.1e1;
    real _t0656 = 0.e0;
    real _t0657 = 0.e0;
    real _t0658 = 0.e0;
    vec4 _t0659 = [_t0655, _t0656, _t0657, _t0658];
    real _t065A = 0.e0;
    real _t065B = 0.e0;
    real _t065C = 0.1e1;
    real _t065D = 0.e0;
    vec4 _t065E = [_t065A, _t065B, _t065C, _t065D];
    real _t065F = 0.e0;
    real _t0660 = 0.e0;
    real _t0661 = 0.e0;
    real _t0662 = 0.1e1;
    vec4 _t0663 = [_t065F, _t0660, _t0661, _t0662];
    tensor[4,4] _t0664 = [_t0654, _t0659, _t065E, _t0663];
    real _t0665 = 0.1e1;
    real _t0666 = 0.e0;
    real _t0667 = 0.e0;
    real _t0668 = 0.e0;
    vec4 _t0669 = [_t0665, _t0666, _t0667, _t0668];
    real _t066A = 0.e0;
    real _t066B = 0.1e1;
    real _t066C = 0.e0;
    real _t066D = 0.e0;
    vec4 _t066E = [_t066A, _t066B, _t066C, _t066D];
    real _t066F = 0.e0;
    real _t0670 = 0.e0;
    real _t0671 = 0.1e1;
    real _t0672 = 0.e0;
    vec4 _t0673 = [_t066F, _t0670, _t0671, _t0672];
    real _t0674 = 0.e0;
    real _t0675 = 0.e0;
    real _t0676 = 0.e0;
    real _t0677 = 0.1e1;
    vec4 _t0678 = [_t0674, _t0675, _t0676, _t0677];
    tensor[4,4] _t0679 = [_t0669, _t066E, _t0673, _t0678];
    real _t067A = 0.1e1;
    real _t067B = 0.e0;
    real _t067C = 0.e0;
    real _t067D = 0.e0;
    vec4 _t067E = [_t067A, _t067B, _t067C, _t067D];
    real _t067F = 0.e0;
    real _t0680 = 0.e0;
    real _t0681 = 0.1e1;
    real _t0682 = 0.e0;
    vec4 _t0683 = [_t067F, _t0680, _t0681, _t0682];
    real _t0684 = 0.e0;
    real _t0685 = 0.1e1;
    real _t0686 = 0.e0;
    real _t0687 = 0.e0;
    vec4 _t0688 = [_t0684, _t0685, _t0686, _t0687];
    real _t0689 = 0.e0;
    real _t068A = 0.e0;
    real _t068B = 0.e0;
    real _t068C = 0.1e1;
    vec4 _t068D = [_t0689, _t068A, _t068B, _t068C];
    tensor[4,4] _t068E = [_t067E, _t0683, _t0688, _t068D];
    tensor[4,4][4] _t068F = {_t064F, _t0664, _t0679, _t068E};
    real _t0690 = -0.1e1;
    real _t0691 = -0.1e1;
    real _t0692 = 0.57735026919e0;
    real _t0693 = 0.1e1;
    vec4 _t0694 = [_t0690, _t0691, _t0692, _t0693];
    real _t0695 = 0.1e1;
    real _t0696 = 0.e0;
    real _t0697 = -0.57735026919e0;
    real _t0698 = 0.e0;
    vec4 _t0699 = [_t0695, _t0696, _t0697, _t0698];
    real _t069A = 0.e0;
    real _t069B = 0.1e1;
    real _t069C = 0.57735026919e0;
    real _t069D = 0.e0;
    vec4 _t069E = [_t069A, _t069B, _t069C, _t069D];
    real _t069F = 0.e0;
    real _t06A0 = 0.e0;
    real _t06A1 = 0.e0;
    real _t06A2 = 0.1e1;
    vec4 _t06A3 = [_t069F, _t06A0, _t06A1, _t06A2];
    tensor[4,4] _t06A4 = [_t0694, _t0699, _t069E, _t06A3];
    real _t06A5 = 0.e0;
    real _t06A6 = 0.e0;
    real _t06A7 = 0.1e1;
    real _t06A8 = 0.e0;
    vec4 _t06A9 = [_t06A5, _t06A6, _t06A7, _t06A8];
    real _t06AA = 0.1e1;
    real _t06AB = 0.e0;
    real _t06AC = 0.e0;
    real _t06AD = 0.e0;
    vec4 _t06AE = [_t06AA, _t06AB, _t06AC, _t06AD];
    real _t06AF = 0.e0;
    real _t06B0 = 0.1e1;
    real _t06B1 = 0.e0;
    real _t06B2 = 0.e0;
    vec4 _t06B3 = [_t06AF, _t06B0, _t06B1, _t06B2];
    real _t06B4 = 0.e0;
    real _t06B5 = 0.e0;
    real _t06B6 = 0.e0;
    real _t06B7 = 0.1e1;
    vec4 _t06B8 = [_t06B4, _t06B5, _t06B6, _t06B7];
    tensor[4,4] _t06B9 = [_t06A9, _t06AE, _t06B3, _t06B8];
    real _t06BA = 0.1e1;
    real _t06BB = 0.e0;
    real _t06BC = 0.e0;
    real _t06BD = 0.e0;
    vec4 _t06BE = [_t06BA, _t06BB, _t06BC, _t06BD];
    real _t06BF = 0.e0;
    real _t06C0 = 0.e0;
    real _t06C1 = 0.1e1;
    real _t06C2 = 0.e0;
    vec4 _t06C3 = [_t06BF, _t06C0, _t06C1, _t06C2];
    real _t06C4 = 0.e0;
    real _t06C5 = 0.1e1;
    real _t06C6 = 0.e0;
    real _t06C7 = 0.e0;
    vec4 _t06C8 = [_t06C4, _t06C5, _t06C6, _t06C7];
    real _t06C9 = 0.e0;
    real _t06CA = 0.e0;
    real _t06CB = 0.e0;
    real _t06CC = 0.1e1;
    vec4 _t06CD = [_t06C9, _t06CA, _t06CB, _t06CC];
    tensor[4,4] _t06CE = [_t06BE, _t06C3, _t06C8, _t06CD];
    real _t06CF = 0.1e1;
    real _t06D0 = 0.e0;
    real _t06D1 = 0.e0;
    real _t06D2 = 0.e0;
    vec4 _t06D3 = [_t06CF, _t06D0, _t06D1, _t06D2];
    real _t06D4 = 0.e0;
    real _t06D5 = 0.1e1;
    real _t06D6 = 0.e0;
    real _t06D7 = 0.e0;
    vec4 _t06D8 = [_t06D4, _t06D5, _t06D6, _t06D7];
    real _t06D9 = 0.e0;
    real _t06DA = 0.e0;
    real _t06DB = 0.1e1;
    real _t06DC = 0.e0;
    vec4 _t06DD = [_t06D9, _t06DA, _t06DB, _t06DC];
    real _t06DE = 0.e0;
    real _t06DF = 0.e0;
    real _t06E0 = 0.e0;
    real _t06E1 = 0.1e1;
    vec4 _t06E2 = [_t06DE, _t06DF, _t06E0, _t06E1];
    tensor[4,4] _t06E3 = [_t06D3, _t06D8, _t06DD, _t06E2];
    tensor[4,4][4] _t06E4 = {_t06A4, _t06B9, _t06CE, _t06E3};
    tensor[4,4][4][4] _t06E5 = {_t05E5, _t063A, _t068F, _t06E4};
    real _t06E6 = time0415[1];
    int _t06E7 = prim $r2i01B7 (_t06E6);
    tensor[4,4][4] _t06E8 = prim $sub01C0<tensor[4,4][4]; %4> (_t06E5, _t06E7);
    real _t06E9 = time0415[1];
    int _t06EA = prim $r2i01B7 (_t06E9);
    int[2] _t06EB = func nextCell40419 (_t06EA, cellId0412, mesh0411);
    int _t06EC = 1;
    int _t06ED = prim $sub01C0<int; %2> (_t06EB, _t06EC);
    tensor[4,4] _t06EE = prim $sub01C0<tensor[4,4]; %4> (_t06E8, _t06ED);
    real _t06EF = time0415[0];
    vec3 _t06F0 = prim *0036<$[3]> (_t06EF, dPos0414);
    vec3 _t06F1 = prim +0017<$[3]> (_t06F0, refPos0413);
    real _t06F2 = _t06F1[0];
    real _t06F3 = time0415[0];
    vec3 _t06F4 = prim *0036<$[3]> (_t06F3, dPos0414);
    vec3 _t06F5 = prim +0017<$[3]> (_t06F4, refPos0413);
    real _t06F6 = _t06F5[1];
    real _t06F7 = time0415[0];
    vec3 _t06F8 = prim *0036<$[3]> (_t06F7, dPos0414);
    vec3 _t06F9 = prim +0017<$[3]> (_t06F8, refPos0413);
    real _t06FA = _t06F9[2];
    real _t06FB = 0.1e1;
    vec4 _t06FC = [_t06F2, _t06F6, _t06FA, _t06FB];
    vec4 _t06FD = prim •00CE<$[4,4]; $[4]; $[4]> (_t06EE, _t06FC);
    real _t06FE = _t06FD[1];
    real _t06FF = 0.1e1;
    real _t0700 = 0.e0;
    real _t0701 = 0.e0;
    real _t0702 = 0.e0;
    vec4 _t0703 = [_t06FF, _t0700, _t0701, _t0702];
    real _t0704 = 0.e0;
    real _t0705 = 0.1e1;
    real _t0706 = 0.e0;
    real _t0707 = 0.e0;
    vec4 _t0708 = [_t0704, _t0705, _t0706, _t0707];
    real _t0709 = 0.e0;
    real _t070A = 0.e0;
    real _t070B = 0.1e1;
    real _t070C = 0.e0;
    vec4 _t070D = [_t0709, _t070A, _t070B, _t070C];
    real _t070E = 0.222044604925e-15;
    real _t070F = 0.e0;
    real _t0710 = 0.44408920985e-15;
    real _t0711 = 0.1e1;
    vec4 _t0712 = [_t070E, _t070F, _t0710, _t0711];
    tensor[4,4] _t0713 = [_t0703, _t0708, _t070D, _t0712];
    real _t0714 = 0.173205080757e1;
    real _t0715 = 0.173205080757e1;
    real _t0716 = 0.173205080757e1;
    real _t0717 = -0.173205080757e1;
    vec4 _t0718 = [_t0714, _t0715, _t0716, _t0717];
    real _t0719 = 0.1e1;
    real _t071A = 0.2e1;
    real _t071B = 0.1e1;
    real _t071C = -0.1e1;
    vec4 _t071D = [_t0719, _t071A, _t071B, _t071C];
    real _t071E = -0.1e1;
    real _t071F = -0.1e1;
    real _t0720 = -0.192296268638e-15;
    real _t0721 = 0.1e1;
    vec4 _t0722 = [_t071E, _t071F, _t0720, _t0721];
    real _t0723 = 0.222044604925e-15;
    real _t0724 = 0.e0;
    real _t0725 = 0.44408920985e-15;
    real _t0726 = 0.1e1;
    vec4 _t0727 = [_t0723, _t0724, _t0725, _t0726];
    tensor[4,4] _t0728 = [_t0718, _t071D, _t0722, _t0727];
    real _t0729 = 0.1e1;
    real _t072A = 0.2e1;
    real _t072B = 0.1e1;
    real _t072C = -0.1e1;
    vec4 _t072D = [_t0729, _t072A, _t072B, _t072C];
    real _t072E = 0.173205080757e1;
    real _t072F = 0.173205080757e1;
    real _t0730 = 0.173205080757e1;
    real _t0731 = -0.173205080757e1;
    vec4 _t0732 = [_t072E, _t072F, _t0730, _t0731];
    real _t0733 = -0.1e1;
    real _t0734 = -0.1e1;
    real _t0735 = -0.192296268638e-15;
    real _t0736 = 0.1e1;
    vec4 _t0737 = [_t0733, _t0734, _t0735, _t0736];
    real _t0738 = 0.222044604925e-15;
    real _t0739 = 0.e0;
    real _t073A = 0.44408920985e-15;
    real _t073B = 0.1e1;
    vec4 _t073C = [_t0738, _t0739, _t073A, _t073B];
    tensor[4,4] _t073D = [_t072D, _t0732, _t0737, _t073C];
    real _t073E = 0.1e1;
    real _t073F = 0.2e1;
    real _t0740 = 0.1e1;
    real _t0741 = -0.1e1;
    vec4 _t0742 = [_t073E, _t073F, _t0740, _t0741];
    real _t0743 = -0.1e1;
    real _t0744 = -0.1e1;
    real _t0745 = -0.192296268638e-15;
    real _t0746 = 0.1e1;
    vec4 _t0747 = [_t0743, _t0744, _t0745, _t0746];
    real _t0748 = 0.173205080757e1;
    real _t0749 = 0.173205080757e1;
    real _t074A = 0.173205080757e1;
    real _t074B = -0.173205080757e1;
    vec4 _t074C = [_t0748, _t0749, _t074A, _t074B];
    real _t074D = 0.222044604925e-15;
    real _t074E = 0.e0;
    real _t074F = 0.44408920985e-15;
    real _t0750 = 0.1e1;
    vec4 _t0751 = [_t074D, _t074E, _t074F, _t0750];
    tensor[4,4] _t0752 = [_t0742, _t0747, _t074C, _t0751];
    tensor[4,4][4] _t0753 = {_t0713, _t0728, _t073D, _t0752};
    real _t0754 = 0.57735026919e0;
    real _t0755 = -0.1e1;
    real _t0756 = -0.1e1;
    real _t0757 = 0.1e1;
    vec4 _t0758 = [_t0754, _t0755, _t0756, _t0757];
    real _t0759 = -0.57735026919e0;
    real _t075A = 0.1e1;
    real _t075B = 0.e0;
    real _t075C = 0.e0;
    vec4 _t075D = [_t0759, _t075A, _t075B, _t075C];
    real _t075E = 0.57735026919e0;
    real _t075F = 0.e0;
    real _t0760 = 0.1e1;
    real _t0761 = 0.e0;
    vec4 _t0762 = [_t075E, _t075F, _t0760, _t0761];
    real _t0763 = 0.e0;
    real _t0764 = 0.e0;
    real _t0765 = 0.e0;
    real _t0766 = 0.1e1;
    vec4 _t0767 = [_t0763, _t0764, _t0765, _t0766];
    tensor[4,4] _t0768 = [_t0758, _t075D, _t0762, _t0767];
    real _t0769 = 0.1e1;
    real _t076A = 0.e0;
    real _t076B = 0.e0;
    real _t076C = 0.e0;
    vec4 _t076D = [_t0769, _t076A, _t076B, _t076C];
    real _t076E = 0.e0;
    real _t076F = 0.1e1;
    real _t0770 = 0.e0;
    real _t0771 = 0.e0;
    vec4 _t0772 = [_t076E, _t076F, _t0770, _t0771];
    real _t0773 = 0.e0;
    real _t0774 = 0.e0;
    real _t0775 = 0.1e1;
    real _t0776 = 0.e0;
    vec4 _t0777 = [_t0773, _t0774, _t0775, _t0776];
    real _t0778 = 0.e0;
    real _t0779 = 0.e0;
    real _t077A = 0.e0;
    real _t077B = 0.1e1;
    vec4 _t077C = [_t0778, _t0779, _t077A, _t077B];
    tensor[4,4] _t077D = [_t076D, _t0772, _t0777, _t077C];
    real _t077E = 0.e0;
    real _t077F = 0.1e1;
    real _t0780 = 0.e0;
    real _t0781 = 0.e0;
    vec4 _t0782 = [_t077E, _t077F, _t0780, _t0781];
    real _t0783 = 0.1e1;
    real _t0784 = 0.e0;
    real _t0785 = 0.e0;
    real _t0786 = 0.e0;
    vec4 _t0787 = [_t0783, _t0784, _t0785, _t0786];
    real _t0788 = 0.e0;
    real _t0789 = 0.e0;
    real _t078A = 0.1e1;
    real _t078B = 0.e0;
    vec4 _t078C = [_t0788, _t0789, _t078A, _t078B];
    real _t078D = 0.e0;
    real _t078E = 0.e0;
    real _t078F = 0.e0;
    real _t0790 = 0.1e1;
    vec4 _t0791 = [_t078D, _t078E, _t078F, _t0790];
    tensor[4,4] _t0792 = [_t0782, _t0787, _t078C, _t0791];
    real _t0793 = 0.e0;
    real _t0794 = 0.1e1;
    real _t0795 = 0.e0;
    real _t0796 = 0.e0;
    vec4 _t0797 = [_t0793, _t0794, _t0795, _t0796];
    real _t0798 = 0.e0;
    real _t0799 = 0.e0;
    real _t079A = 0.1e1;
    real _t079B = 0.e0;
    vec4 _t079C = [_t0798, _t0799, _t079A, _t079B];
    real _t079D = 0.1e1;
    real _t079E = 0.e0;
    real _t079F = 0.e0;
    real _t07A0 = 0.e0;
    vec4 _t07A1 = [_t079D, _t079E, _t079F, _t07A0];
    real _t07A2 = 0.e0;
    real _t07A3 = 0.e0;
    real _t07A4 = 0.e0;
    real _t07A5 = 0.1e1;
    vec4 _t07A6 = [_t07A2, _t07A3, _t07A4, _t07A5];
    tensor[4,4] _t07A7 = [_t0797, _t079C, _t07A1, _t07A6];
    tensor[4,4][4] _t07A8 = {_t0768, _t077D, _t0792, _t07A7};
    real _t07A9 = -0.1e1;
    real _t07AA = 0.57735026919e0;
    real _t07AB = -0.1e1;
    real _t07AC = 0.1e1;
    vec4 _t07AD = [_t07A9, _t07AA, _t07AB, _t07AC];
    real _t07AE = 0.1e1;
    real _t07AF = -0.57735026919e0;
    real _t07B0 = 0.e0;
    real _t07B1 = 0.e0;
    vec4 _t07B2 = [_t07AE, _t07AF, _t07B0, _t07B1];
    real _t07B3 = 0.e0;
    real _t07B4 = 0.57735026919e0;
    real _t07B5 = 0.1e1;
    real _t07B6 = 0.e0;
    vec4 _t07B7 = [_t07B3, _t07B4, _t07B5, _t07B6];
    real _t07B8 = 0.e0;
    real _t07B9 = 0.e0;
    real _t07BA = 0.e0;
    real _t07BB = 0.1e1;
    vec4 _t07BC = [_t07B8, _t07B9, _t07BA, _t07BB];
    tensor[4,4] _t07BD = [_t07AD, _t07B2, _t07B7, _t07BC];
    real _t07BE = 0.e0;
    real _t07BF = 0.1e1;
    real _t07C0 = 0.e0;
    real _t07C1 = 0.e0;
    vec4 _t07C2 = [_t07BE, _t07BF, _t07C0, _t07C1];
    real _t07C3 = 0.1e1;
    real _t07C4 = 0.e0;
    real _t07C5 = 0.e0;
    real _t07C6 = 0.e0;
    vec4 _t07C7 = [_t07C3, _t07C4, _t07C5, _t07C6];
    real _t07C8 = 0.e0;
    real _t07C9 = 0.e0;
    real _t07CA = 0.1e1;
    real _t07CB = 0.e0;
    vec4 _t07CC = [_t07C8, _t07C9, _t07CA, _t07CB];
    real _t07CD = 0.e0;
    real _t07CE = 0.e0;
    real _t07CF = 0.e0;
    real _t07D0 = 0.1e1;
    vec4 _t07D1 = [_t07CD, _t07CE, _t07CF, _t07D0];
    tensor[4,4] _t07D2 = [_t07C2, _t07C7, _t07CC, _t07D1];
    real _t07D3 = 0.1e1;
    real _t07D4 = 0.e0;
    real _t07D5 = 0.e0;
    real _t07D6 = 0.e0;
    vec4 _t07D7 = [_t07D3, _t07D4, _t07D5, _t07D6];
    real _t07D8 = 0.e0;
    real _t07D9 = 0.1e1;
    real _t07DA = 0.e0;
    real _t07DB = 0.e0;
    vec4 _t07DC = [_t07D8, _t07D9, _t07DA, _t07DB];
    real _t07DD = 0.e0;
    real _t07DE = 0.e0;
    real _t07DF = 0.1e1;
    real _t07E0 = 0.e0;
    vec4 _t07E1 = [_t07DD, _t07DE, _t07DF, _t07E0];
    real _t07E2 = 0.e0;
    real _t07E3 = 0.e0;
    real _t07E4 = 0.e0;
    real _t07E5 = 0.1e1;
    vec4 _t07E6 = [_t07E2, _t07E3, _t07E4, _t07E5];
    tensor[4,4] _t07E7 = [_t07D7, _t07DC, _t07E1, _t07E6];
    real _t07E8 = 0.1e1;
    real _t07E9 = 0.e0;
    real _t07EA = 0.e0;
    real _t07EB = 0.e0;
    vec4 _t07EC = [_t07E8, _t07E9, _t07EA, _t07EB];
    real _t07ED = 0.e0;
    real _t07EE = 0.e0;
    real _t07EF = 0.1e1;
    real _t07F0 = 0.e0;
    vec4 _t07F1 = [_t07ED, _t07EE, _t07EF, _t07F0];
    real _t07F2 = 0.e0;
    real _t07F3 = 0.1e1;
    real _t07F4 = 0.e0;
    real _t07F5 = 0.e0;
    vec4 _t07F6 = [_t07F2, _t07F3, _t07F4, _t07F5];
    real _t07F7 = 0.e0;
    real _t07F8 = 0.e0;
    real _t07F9 = 0.e0;
    real _t07FA = 0.1e1;
    vec4 _t07FB = [_t07F7, _t07F8, _t07F9, _t07FA];
    tensor[4,4] _t07FC = [_t07EC, _t07F1, _t07F6, _t07FB];
    tensor[4,4][4] _t07FD = {_t07BD, _t07D2, _t07E7, _t07FC};
    real _t07FE = -0.1e1;
    real _t07FF = -0.1e1;
    real _t0800 = 0.57735026919e0;
    real _t0801 = 0.1e1;
    vec4 _t0802 = [_t07FE, _t07FF, _t0800, _t0801];
    real _t0803 = 0.1e1;
    real _t0804 = 0.e0;
    real _t0805 = -0.57735026919e0;
    real _t0806 = 0.e0;
    vec4 _t0807 = [_t0803, _t0804, _t0805, _t0806];
    real _t0808 = 0.e0;
    real _t0809 = 0.1e1;
    real _t080A = 0.57735026919e0;
    real _t080B = 0.e0;
    vec4 _t080C = [_t0808, _t0809, _t080A, _t080B];
    real _t080D = 0.e0;
    real _t080E = 0.e0;
    real _t080F = 0.e0;
    real _t0810 = 0.1e1;
    vec4 _t0811 = [_t080D, _t080E, _t080F, _t0810];
    tensor[4,4] _t0812 = [_t0802, _t0807, _t080C, _t0811];
    real _t0813 = 0.e0;
    real _t0814 = 0.e0;
    real _t0815 = 0.1e1;
    real _t0816 = 0.e0;
    vec4 _t0817 = [_t0813, _t0814, _t0815, _t0816];
    real _t0818 = 0.1e1;
    real _t0819 = 0.e0;
    real _t081A = 0.e0;
    real _t081B = 0.e0;
    vec4 _t081C = [_t0818, _t0819, _t081A, _t081B];
    real _t081D = 0.e0;
    real _t081E = 0.1e1;
    real _t081F = 0.e0;
    real _t0820 = 0.e0;
    vec4 _t0821 = [_t081D, _t081E, _t081F, _t0820];
    real _t0822 = 0.e0;
    real _t0823 = 0.e0;
    real _t0824 = 0.e0;
    real _t0825 = 0.1e1;
    vec4 _t0826 = [_t0822, _t0823, _t0824, _t0825];
    tensor[4,4] _t0827 = [_t0817, _t081C, _t0821, _t0826];
    real _t0828 = 0.1e1;
    real _t0829 = 0.e0;
    real _t082A = 0.e0;
    real _t082B = 0.e0;
    vec4 _t082C = [_t0828, _t0829, _t082A, _t082B];
    real _t082D = 0.e0;
    real _t082E = 0.e0;
    real _t082F = 0.1e1;
    real _t0830 = 0.e0;
    vec4 _t0831 = [_t082D, _t082E, _t082F, _t0830];
    real _t0832 = 0.e0;
    real _t0833 = 0.1e1;
    real _t0834 = 0.e0;
    real _t0835 = 0.e0;
    vec4 _t0836 = [_t0832, _t0833, _t0834, _t0835];
    real _t0837 = 0.e0;
    real _t0838 = 0.e0;
    real _t0839 = 0.e0;
    real _t083A = 0.1e1;
    vec4 _t083B = [_t0837, _t0838, _t0839, _t083A];
    tensor[4,4] _t083C = [_t082C, _t0831, _t0836, _t083B];
    real _t083D = 0.1e1;
    real _t083E = 0.e0;
    real _t083F = 0.e0;
    real _t0840 = 0.e0;
    vec4 _t0841 = [_t083D, _t083E, _t083F, _t0840];
    real _t0842 = 0.e0;
    real _t0843 = 0.1e1;
    real _t0844 = 0.e0;
    real _t0845 = 0.e0;
    vec4 _t0846 = [_t0842, _t0843, _t0844, _t0845];
    real _t0847 = 0.e0;
    real _t0848 = 0.e0;
    real _t0849 = 0.1e1;
    real _t084A = 0.e0;
    vec4 _t084B = [_t0847, _t0848, _t0849, _t084A];
    real _t084C = 0.e0;
    real _t084D = 0.e0;
    real _t084E = 0.e0;
    real _t084F = 0.1e1;
    vec4 _t0850 = [_t084C, _t084D, _t084E, _t084F];
    tensor[4,4] _t0851 = [_t0841, _t0846, _t084B, _t0850];
    tensor[4,4][4] _t0852 = {_t0812, _t0827, _t083C, _t0851};
    tensor[4,4][4][4] _t0853 = {_t0753, _t07A8, _t07FD, _t0852};
    real _t0854 = time0415[1];
    int _t0855 = prim $r2i01B7 (_t0854);
    tensor[4,4][4] _t0856 = prim $sub01C0<tensor[4,4][4]; %4> (_t0853, _t0855);
    real _t0857 = time0415[1];
    int _t0858 = prim $r2i01B7 (_t0857);
    int[2] _t0859 = func nextCell40419 (_t0858, cellId0412, mesh0411);
    int _t085A = 1;
    int _t085B = prim $sub01C0<int; %2> (_t0859, _t085A);
    tensor[4,4] _t085C = prim $sub01C0<tensor[4,4]; %4> (_t0856, _t085B);
    real _t085D = time0415[0];
    vec3 _t085E = prim *0036<$[3]> (_t085D, dPos0414);
    vec3 _t085F = prim +0017<$[3]> (_t085E, refPos0413);
    real _t0860 = _t085F[0];
    real _t0861 = time0415[0];
    vec3 _t0862 = prim *0036<$[3]> (_t0861, dPos0414);
    vec3 _t0863 = prim +0017<$[3]> (_t0862, refPos0413);
    real _t0864 = _t0863[1];
    real _t0865 = time0415[0];
    vec3 _t0866 = prim *0036<$[3]> (_t0865, dPos0414);
    vec3 _t0867 = prim +0017<$[3]> (_t0866, refPos0413);
    real _t0868 = _t0867[2];
    real _t0869 = 0.1e1;
    vec4 _t086A = [_t0860, _t0864, _t0868, _t0869];
    vec4 _t086B = prim •00CE<$[4,4]; $[4]; $[4]> (_t085C, _t086A);
    real _t086C = _t086B[2];
    vec3 _t086D = [_t0590, _t06FE, _t086C];
    Femdata: MeshPos _t086E = extractFemItemN((mesh0411, _t0422, _t086D),RefBuild(Mesh),);
    return _t086E;
  } else {
    real _t086F = time0415[0];
    vec3 _t0870 = prim *0036<$[3]> (_t086F, dPos0414);
    vec3 _t0871 = prim +0017<$[3]> (_t0870, refPos0413);
    Femdata: MeshPos _t0872 = extractFemItemN((mesh0411, _t0871),InvalidBuildBoundary(MeshPos),);
    return _t0872;
  }
}
function int[2]#5 nextCell40419 (int faceIdx0873, int cell0874, Femdata: Mesh mesh0875)
{
  int _t0876 = 8;
  int _t0877 = prim *0033 (cell0874, _t0876);
  int _t0878 = 2;
  int _t0879 = prim *0033 (faceIdx0873, _t0878);
  int _t087A = prim +0015 (_t0877, _t0879);
  int[2] _t087B = extractFemItemN((mesh0875, _t087A),CellFaceCell(Mesh),);
  return _t087B;
}
function int[2]#0 $nextCell2087C (int faceIdx0873, int cell0874, Femdata: Mesh mesh0875)
{
  nearbyCells087D = extractFemItem2(CellConnectivity(Mesh), int, mesh0875, cell0874 : int);
  int _t087E = 0;
  int _t087F = 1;
  int _t0880 = 3;
  int[2] _t0881 = {_t087F, _t0880};
  int _t0882 = 3;
  int _t0883 = 3;
  int[2] _t0884 = {_t0882, _t0883};
  int _t0885 = 9;
  int _t0886 = 3;
  int[2] _t0887 = {_t0885, _t0886};
  int _t0888 = 27;
  int _t0889 = 3;
  int[2] _t088A = {_t0888, _t0889};
  int[2][4] _t088B = {_t0881, _t0884, _t0887, _t088A};
  int[2] _t088C = prim $sub01C0<int[2]; %4> (_t088B, faceIdx0873);
  int _t088D = 1;
  int _t088E = prim $sub01C0<int; %2> (_t088C, _t088D);
  int[] _t088F = prim $range01C3 (_t087E, _t088E);
  int[] accum08B0 = {};
  foreach i08AD in _t088F {
    int _t0890 = 1;
    int _t0891 = 2;
    int _t0892 = 3;
    int _t0893 = 0;
    int _t0894 = 2;
    int _t0895 = 3;
    int _t0896 = 0;
    int _t0897 = 1;
    int _t0898 = 3;
    int _t0899 = 0;
    int _t089A = 1;
    int _t089B = 2;
    int[12] _t089C = {_t0890, _t0891, _t0892, _t0893, _t0894, _t0895, _t0896, _t0897, _t0898, _t0899, _t089A, _t089B};
    int _t089D = 1;
    int _t089E = 3;
    int[2] _t089F = {_t089D, _t089E};
    int _t08A0 = 3;
    int _t08A1 = 3;
    int[2] _t08A2 = {_t08A0, _t08A1};
    int _t08A3 = 9;
    int _t08A4 = 3;
    int[2] _t08A5 = {_t08A3, _t08A4};
    int _t08A6 = 27;
    int _t08A7 = 3;
    int[2] _t08A8 = {_t08A6, _t08A7};
    int[2][4] _t08A9 = {_t089F, _t08A2, _t08A5, _t08A8};
    int[2] _t08AA = prim $sub01C0<int[2]; %4> (_t08A9, faceIdx0873);
    int _t08AB = 0;
    int _t08AC = prim $sub01C0<int; %2> (_t08AA, _t08AB);
    int _t08AE = prim +0015 (_t08AC, i08AD);
    int _t08AF = prim $sub01C0<int; %12> (_t089C, _t08AE);
    accum08B0 = prim @0010<int> (accum08B0, _t08AF);
  }
  numFacetNodes08B1 = prim length0123<int> (accum08B0);
  int _t08B2 = 3;
  bool _t08B3 = prim ==0082 (_t08B2, numFacetNodes08B1);
  if _t08B3 {
    foreach cellInt08B4 in nearbyCells087D {
      int[4] _t08B5 = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t08B6 = 1;
      int _t08B7 = prim $sub01C0<int; %4> (_t08B5, _t08B6);
      int[4] _t08B8 = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t08B9 = 2;
      int _t08BA = prim $sub01C0<int; %4> (_t08B8, _t08B9);
      int[4] _t08BB = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t08BC = 3;
      int _t08BD = prim $sub01C0<int; %4> (_t08BB, _t08BC);
      int[3] _t08BE = {_t08B7, _t08BA, _t08BD};
      int _t08BF = 0;
      int _t08C0 = prim $sub01C0<int; %3> (_t08BE, _t08BF);
      int _t08C1 = 0;
      int _t08C2 = 1;
      int _t08C3 = 3;
      int[2] _t08C4 = {_t08C2, _t08C3};
      int _t08C5 = 3;
      int _t08C6 = 3;
      int[2] _t08C7 = {_t08C5, _t08C6};
      int _t08C8 = 9;
      int _t08C9 = 3;
      int[2] _t08CA = {_t08C8, _t08C9};
      int _t08CB = 27;
      int _t08CC = 3;
      int[2] _t08CD = {_t08CB, _t08CC};
      int[2][4] _t08CE = {_t08C4, _t08C7, _t08CA, _t08CD};
      int[2] _t08CF = prim $sub01C0<int[2]; %4> (_t08CE, faceIdx0873);
      int _t08D0 = 1;
      int _t08D1 = prim $sub01C0<int; %2> (_t08CF, _t08D0);
      int[] _t08D2 = prim $range01C3 (_t08C1, _t08D1);
      int[] accum08F2 = {};
      foreach i08AD in _t08D2 {
        int _t08D3 = 1;
        int _t08D4 = 2;
        int _t08D5 = 3;
        int _t08D6 = 0;
        int _t08D7 = 2;
        int _t08D8 = 3;
        int _t08D9 = 0;
        int _t08DA = 1;
        int _t08DB = 3;
        int _t08DC = 0;
        int _t08DD = 1;
        int _t08DE = 2;
        int[12] _t08DF = {_t08D3, _t08D4, _t08D5, _t08D6, _t08D7, _t08D8, _t08D9, _t08DA, _t08DB, _t08DC, _t08DD, _t08DE};
        int _t08E0 = 1;
        int _t08E1 = 3;
        int[2] _t08E2 = {_t08E0, _t08E1};
        int _t08E3 = 3;
        int _t08E4 = 3;
        int[2] _t08E5 = {_t08E3, _t08E4};
        int _t08E6 = 9;
        int _t08E7 = 3;
        int[2] _t08E8 = {_t08E6, _t08E7};
        int _t08E9 = 27;
        int _t08EA = 3;
        int[2] _t08EB = {_t08E9, _t08EA};
        int[2][4] _t08EC = {_t08E2, _t08E5, _t08E8, _t08EB};
        int[2] _t08ED = prim $sub01C0<int[2]; %4> (_t08EC, faceIdx0873);
        int _t08EE = 0;
        int _t08EF = prim $sub01C0<int; %2> (_t08ED, _t08EE);
        int _t08F0 = prim +0015 (_t08EF, i08AD);
        int _t08F1 = prim $sub01C0<int; %12> (_t08DF, _t08F0);
        accum08F2 = prim @0010<int> (accum08F2, _t08F1);
      }
      int _t08F3 = 0;
      int _t08F4 = prim $dynsub01C2<int> (accum08F2, _t08F3);
      bool _t08F5 = prim ==0082 (_t08C0, _t08F4);
      int[4] _t08F6 = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t08F7 = 1;
      int _t08F8 = prim $sub01C0<int; %4> (_t08F6, _t08F7);
      int[4] _t08F9 = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t08FA = 2;
      int _t08FB = prim $sub01C0<int; %4> (_t08F9, _t08FA);
      int[4] _t08FC = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t08FD = 3;
      int _t08FE = prim $sub01C0<int; %4> (_t08FC, _t08FD);
      int[3] _t08FF = {_t08F8, _t08FB, _t08FE};
      int _t0900 = 1;
      int _t0901 = prim $sub01C0<int; %3> (_t08FF, _t0900);
      int _t0902 = 0;
      int _t0903 = 1;
      int _t0904 = 3;
      int[2] _t0905 = {_t0903, _t0904};
      int _t0906 = 3;
      int _t0907 = 3;
      int[2] _t0908 = {_t0906, _t0907};
      int _t0909 = 9;
      int _t090A = 3;
      int[2] _t090B = {_t0909, _t090A};
      int _t090C = 27;
      int _t090D = 3;
      int[2] _t090E = {_t090C, _t090D};
      int[2][4] _t090F = {_t0905, _t0908, _t090B, _t090E};
      int[2] _t0910 = prim $sub01C0<int[2]; %4> (_t090F, faceIdx0873);
      int _t0911 = 1;
      int _t0912 = prim $sub01C0<int; %2> (_t0910, _t0911);
      int[] _t0913 = prim $range01C3 (_t0902, _t0912);
      int[] accum0933 = {};
      foreach i08AD in _t0913 {
        int _t0914 = 1;
        int _t0915 = 2;
        int _t0916 = 3;
        int _t0917 = 0;
        int _t0918 = 2;
        int _t0919 = 3;
        int _t091A = 0;
        int _t091B = 1;
        int _t091C = 3;
        int _t091D = 0;
        int _t091E = 1;
        int _t091F = 2;
        int[12] _t0920 = {_t0914, _t0915, _t0916, _t0917, _t0918, _t0919, _t091A, _t091B, _t091C, _t091D, _t091E, _t091F};
        int _t0921 = 1;
        int _t0922 = 3;
        int[2] _t0923 = {_t0921, _t0922};
        int _t0924 = 3;
        int _t0925 = 3;
        int[2] _t0926 = {_t0924, _t0925};
        int _t0927 = 9;
        int _t0928 = 3;
        int[2] _t0929 = {_t0927, _t0928};
        int _t092A = 27;
        int _t092B = 3;
        int[2] _t092C = {_t092A, _t092B};
        int[2][4] _t092D = {_t0923, _t0926, _t0929, _t092C};
        int[2] _t092E = prim $sub01C0<int[2]; %4> (_t092D, faceIdx0873);
        int _t092F = 0;
        int _t0930 = prim $sub01C0<int; %2> (_t092E, _t092F);
        int _t0931 = prim +0015 (_t0930, i08AD);
        int _t0932 = prim $sub01C0<int; %12> (_t0920, _t0931);
        accum0933 = prim @0010<int> (accum0933, _t0932);
      }
      int _t0934 = 1;
      int _t0935 = prim $dynsub01C2<int> (accum0933, _t0934);
      bool _t0936 = prim ==0082 (_t0901, _t0935);
      int[4] _t0937 = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t0938 = 1;
      int _t0939 = prim $sub01C0<int; %4> (_t0937, _t0938);
      int[4] _t093A = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t093B = 2;
      int _t093C = prim $sub01C0<int; %4> (_t093A, _t093B);
      int[4] _t093D = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t093E = 3;
      int _t093F = prim $sub01C0<int; %4> (_t093D, _t093E);
      int[3] _t0940 = {_t0939, _t093C, _t093F};
      int _t0941 = 2;
      int _t0942 = prim $sub01C0<int; %3> (_t0940, _t0941);
      int _t0943 = 0;
      int _t0944 = 1;
      int _t0945 = 3;
      int[2] _t0946 = {_t0944, _t0945};
      int _t0947 = 3;
      int _t0948 = 3;
      int[2] _t0949 = {_t0947, _t0948};
      int _t094A = 9;
      int _t094B = 3;
      int[2] _t094C = {_t094A, _t094B};
      int _t094D = 27;
      int _t094E = 3;
      int[2] _t094F = {_t094D, _t094E};
      int[2][4] _t0950 = {_t0946, _t0949, _t094C, _t094F};
      int[2] _t0951 = prim $sub01C0<int[2]; %4> (_t0950, faceIdx0873);
      int _t0952 = 1;
      int _t0953 = prim $sub01C0<int; %2> (_t0951, _t0952);
      int[] _t0954 = prim $range01C3 (_t0943, _t0953);
      int[] accum0974 = {};
      foreach i08AD in _t0954 {
        int _t0955 = 1;
        int _t0956 = 2;
        int _t0957 = 3;
        int _t0958 = 0;
        int _t0959 = 2;
        int _t095A = 3;
        int _t095B = 0;
        int _t095C = 1;
        int _t095D = 3;
        int _t095E = 0;
        int _t095F = 1;
        int _t0960 = 2;
        int[12] _t0961 = {_t0955, _t0956, _t0957, _t0958, _t0959, _t095A, _t095B, _t095C, _t095D, _t095E, _t095F, _t0960};
        int _t0962 = 1;
        int _t0963 = 3;
        int[2] _t0964 = {_t0962, _t0963};
        int _t0965 = 3;
        int _t0966 = 3;
        int[2] _t0967 = {_t0965, _t0966};
        int _t0968 = 9;
        int _t0969 = 3;
        int[2] _t096A = {_t0968, _t0969};
        int _t096B = 27;
        int _t096C = 3;
        int[2] _t096D = {_t096B, _t096C};
        int[2][4] _t096E = {_t0964, _t0967, _t096A, _t096D};
        int[2] _t096F = prim $sub01C0<int[2]; %4> (_t096E, faceIdx0873);
        int _t0970 = 0;
        int _t0971 = prim $sub01C0<int; %2> (_t096F, _t0970);
        int _t0972 = prim +0015 (_t0971, i08AD);
        int _t0973 = prim $sub01C0<int; %12> (_t0961, _t0972);
        accum0974 = prim @0010<int> (accum0974, _t0973);
      }
      int _t0975 = 2;
      int _t0976 = prim $dynsub01C2<int> (accum0974, _t0975);
      bool _t0977 = prim ==0082 (_t0942, _t0976);
      bool _t0978 = prim $and01C4 (_t0936, _t0977);
      bool _t0979 = prim $and01C4 (_t08F5, _t0978);
      if _t0979 {
        int _t097A = 0;
        int[2] _t097B = {cellInt08B4, _t097A};
        return _t097B;
      }
      int[4] _t097C = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t097D = 0;
      int _t097E = prim $sub01C0<int; %4> (_t097C, _t097D);
      int[4] _t097F = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t0980 = 2;
      int _t0981 = prim $sub01C0<int; %4> (_t097F, _t0980);
      int[4] _t0982 = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t0983 = 3;
      int _t0984 = prim $sub01C0<int; %4> (_t0982, _t0983);
      int[3] _t0985 = {_t097E, _t0981, _t0984};
      int _t0986 = 0;
      int _t0987 = prim $sub01C0<int; %3> (_t0985, _t0986);
      int _t0988 = 0;
      int _t0989 = 1;
      int _t098A = 3;
      int[2] _t098B = {_t0989, _t098A};
      int _t098C = 3;
      int _t098D = 3;
      int[2] _t098E = {_t098C, _t098D};
      int _t098F = 9;
      int _t0990 = 3;
      int[2] _t0991 = {_t098F, _t0990};
      int _t0992 = 27;
      int _t0993 = 3;
      int[2] _t0994 = {_t0992, _t0993};
      int[2][4] _t0995 = {_t098B, _t098E, _t0991, _t0994};
      int[2] _t0996 = prim $sub01C0<int[2]; %4> (_t0995, faceIdx0873);
      int _t0997 = 1;
      int _t0998 = prim $sub01C0<int; %2> (_t0996, _t0997);
      int[] _t0999 = prim $range01C3 (_t0988, _t0998);
      int[] accum09B9 = {};
      foreach i08AD in _t0999 {
        int _t099A = 1;
        int _t099B = 2;
        int _t099C = 3;
        int _t099D = 0;
        int _t099E = 2;
        int _t099F = 3;
        int _t09A0 = 0;
        int _t09A1 = 1;
        int _t09A2 = 3;
        int _t09A3 = 0;
        int _t09A4 = 1;
        int _t09A5 = 2;
        int[12] _t09A6 = {_t099A, _t099B, _t099C, _t099D, _t099E, _t099F, _t09A0, _t09A1, _t09A2, _t09A3, _t09A4, _t09A5};
        int _t09A7 = 1;
        int _t09A8 = 3;
        int[2] _t09A9 = {_t09A7, _t09A8};
        int _t09AA = 3;
        int _t09AB = 3;
        int[2] _t09AC = {_t09AA, _t09AB};
        int _t09AD = 9;
        int _t09AE = 3;
        int[2] _t09AF = {_t09AD, _t09AE};
        int _t09B0 = 27;
        int _t09B1 = 3;
        int[2] _t09B2 = {_t09B0, _t09B1};
        int[2][4] _t09B3 = {_t09A9, _t09AC, _t09AF, _t09B2};
        int[2] _t09B4 = prim $sub01C0<int[2]; %4> (_t09B3, faceIdx0873);
        int _t09B5 = 0;
        int _t09B6 = prim $sub01C0<int; %2> (_t09B4, _t09B5);
        int _t09B7 = prim +0015 (_t09B6, i08AD);
        int _t09B8 = prim $sub01C0<int; %12> (_t09A6, _t09B7);
        accum09B9 = prim @0010<int> (accum09B9, _t09B8);
      }
      int _t09BA = 0;
      int _t09BB = prim $dynsub01C2<int> (accum09B9, _t09BA);
      bool _t09BC = prim ==0082 (_t0987, _t09BB);
      int[4] _t09BD = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t09BE = 0;
      int _t09BF = prim $sub01C0<int; %4> (_t09BD, _t09BE);
      int[4] _t09C0 = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t09C1 = 2;
      int _t09C2 = prim $sub01C0<int; %4> (_t09C0, _t09C1);
      int[4] _t09C3 = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t09C4 = 3;
      int _t09C5 = prim $sub01C0<int; %4> (_t09C3, _t09C4);
      int[3] _t09C6 = {_t09BF, _t09C2, _t09C5};
      int _t09C7 = 1;
      int _t09C8 = prim $sub01C0<int; %3> (_t09C6, _t09C7);
      int _t09C9 = 0;
      int _t09CA = 1;
      int _t09CB = 3;
      int[2] _t09CC = {_t09CA, _t09CB};
      int _t09CD = 3;
      int _t09CE = 3;
      int[2] _t09CF = {_t09CD, _t09CE};
      int _t09D0 = 9;
      int _t09D1 = 3;
      int[2] _t09D2 = {_t09D0, _t09D1};
      int _t09D3 = 27;
      int _t09D4 = 3;
      int[2] _t09D5 = {_t09D3, _t09D4};
      int[2][4] _t09D6 = {_t09CC, _t09CF, _t09D2, _t09D5};
      int[2] _t09D7 = prim $sub01C0<int[2]; %4> (_t09D6, faceIdx0873);
      int _t09D8 = 1;
      int _t09D9 = prim $sub01C0<int; %2> (_t09D7, _t09D8);
      int[] _t09DA = prim $range01C3 (_t09C9, _t09D9);
      int[] accum09FA = {};
      foreach i08AD in _t09DA {
        int _t09DB = 1;
        int _t09DC = 2;
        int _t09DD = 3;
        int _t09DE = 0;
        int _t09DF = 2;
        int _t09E0 = 3;
        int _t09E1 = 0;
        int _t09E2 = 1;
        int _t09E3 = 3;
        int _t09E4 = 0;
        int _t09E5 = 1;
        int _t09E6 = 2;
        int[12] _t09E7 = {_t09DB, _t09DC, _t09DD, _t09DE, _t09DF, _t09E0, _t09E1, _t09E2, _t09E3, _t09E4, _t09E5, _t09E6};
        int _t09E8 = 1;
        int _t09E9 = 3;
        int[2] _t09EA = {_t09E8, _t09E9};
        int _t09EB = 3;
        int _t09EC = 3;
        int[2] _t09ED = {_t09EB, _t09EC};
        int _t09EE = 9;
        int _t09EF = 3;
        int[2] _t09F0 = {_t09EE, _t09EF};
        int _t09F1 = 27;
        int _t09F2 = 3;
        int[2] _t09F3 = {_t09F1, _t09F2};
        int[2][4] _t09F4 = {_t09EA, _t09ED, _t09F0, _t09F3};
        int[2] _t09F5 = prim $sub01C0<int[2]; %4> (_t09F4, faceIdx0873);
        int _t09F6 = 0;
        int _t09F7 = prim $sub01C0<int; %2> (_t09F5, _t09F6);
        int _t09F8 = prim +0015 (_t09F7, i08AD);
        int _t09F9 = prim $sub01C0<int; %12> (_t09E7, _t09F8);
        accum09FA = prim @0010<int> (accum09FA, _t09F9);
      }
      int _t09FB = 1;
      int _t09FC = prim $dynsub01C2<int> (accum09FA, _t09FB);
      bool _t09FD = prim ==0082 (_t09C8, _t09FC);
      int[4] _t09FE = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t09FF = 0;
      int _t0A00 = prim $sub01C0<int; %4> (_t09FE, _t09FF);
      int[4] _t0A01 = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t0A02 = 2;
      int _t0A03 = prim $sub01C0<int; %4> (_t0A01, _t0A02);
      int[4] _t0A04 = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t0A05 = 3;
      int _t0A06 = prim $sub01C0<int; %4> (_t0A04, _t0A05);
      int[3] _t0A07 = {_t0A00, _t0A03, _t0A06};
      int _t0A08 = 2;
      int _t0A09 = prim $sub01C0<int; %3> (_t0A07, _t0A08);
      int _t0A0A = 0;
      int _t0A0B = 1;
      int _t0A0C = 3;
      int[2] _t0A0D = {_t0A0B, _t0A0C};
      int _t0A0E = 3;
      int _t0A0F = 3;
      int[2] _t0A10 = {_t0A0E, _t0A0F};
      int _t0A11 = 9;
      int _t0A12 = 3;
      int[2] _t0A13 = {_t0A11, _t0A12};
      int _t0A14 = 27;
      int _t0A15 = 3;
      int[2] _t0A16 = {_t0A14, _t0A15};
      int[2][4] _t0A17 = {_t0A0D, _t0A10, _t0A13, _t0A16};
      int[2] _t0A18 = prim $sub01C0<int[2]; %4> (_t0A17, faceIdx0873);
      int _t0A19 = 1;
      int _t0A1A = prim $sub01C0<int; %2> (_t0A18, _t0A19);
      int[] _t0A1B = prim $range01C3 (_t0A0A, _t0A1A);
      int[] accum0A3B = {};
      foreach i08AD in _t0A1B {
        int _t0A1C = 1;
        int _t0A1D = 2;
        int _t0A1E = 3;
        int _t0A1F = 0;
        int _t0A20 = 2;
        int _t0A21 = 3;
        int _t0A22 = 0;
        int _t0A23 = 1;
        int _t0A24 = 3;
        int _t0A25 = 0;
        int _t0A26 = 1;
        int _t0A27 = 2;
        int[12] _t0A28 = {_t0A1C, _t0A1D, _t0A1E, _t0A1F, _t0A20, _t0A21, _t0A22, _t0A23, _t0A24, _t0A25, _t0A26, _t0A27};
        int _t0A29 = 1;
        int _t0A2A = 3;
        int[2] _t0A2B = {_t0A29, _t0A2A};
        int _t0A2C = 3;
        int _t0A2D = 3;
        int[2] _t0A2E = {_t0A2C, _t0A2D};
        int _t0A2F = 9;
        int _t0A30 = 3;
        int[2] _t0A31 = {_t0A2F, _t0A30};
        int _t0A32 = 27;
        int _t0A33 = 3;
        int[2] _t0A34 = {_t0A32, _t0A33};
        int[2][4] _t0A35 = {_t0A2B, _t0A2E, _t0A31, _t0A34};
        int[2] _t0A36 = prim $sub01C0<int[2]; %4> (_t0A35, faceIdx0873);
        int _t0A37 = 0;
        int _t0A38 = prim $sub01C0<int; %2> (_t0A36, _t0A37);
        int _t0A39 = prim +0015 (_t0A38, i08AD);
        int _t0A3A = prim $sub01C0<int; %12> (_t0A28, _t0A39);
        accum0A3B = prim @0010<int> (accum0A3B, _t0A3A);
      }
      int _t0A3C = 2;
      int _t0A3D = prim $dynsub01C2<int> (accum0A3B, _t0A3C);
      bool _t0A3E = prim ==0082 (_t0A09, _t0A3D);
      bool _t0A3F = prim $and01C4 (_t09FD, _t0A3E);
      bool _t0A40 = prim $and01C4 (_t09BC, _t0A3F);
      if _t0A40 {
        int _t0A41 = 1;
        int[2] _t0A42 = {cellInt08B4, _t0A41};
        return _t0A42;
      }
      int[4] _t0A43 = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t0A44 = 0;
      int _t0A45 = prim $sub01C0<int; %4> (_t0A43, _t0A44);
      int[4] _t0A46 = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t0A47 = 1;
      int _t0A48 = prim $sub01C0<int; %4> (_t0A46, _t0A47);
      int[4] _t0A49 = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t0A4A = 3;
      int _t0A4B = prim $sub01C0<int; %4> (_t0A49, _t0A4A);
      int[3] _t0A4C = {_t0A45, _t0A48, _t0A4B};
      int _t0A4D = 0;
      int _t0A4E = prim $sub01C0<int; %3> (_t0A4C, _t0A4D);
      int _t0A4F = 0;
      int _t0A50 = 1;
      int _t0A51 = 3;
      int[2] _t0A52 = {_t0A50, _t0A51};
      int _t0A53 = 3;
      int _t0A54 = 3;
      int[2] _t0A55 = {_t0A53, _t0A54};
      int _t0A56 = 9;
      int _t0A57 = 3;
      int[2] _t0A58 = {_t0A56, _t0A57};
      int _t0A59 = 27;
      int _t0A5A = 3;
      int[2] _t0A5B = {_t0A59, _t0A5A};
      int[2][4] _t0A5C = {_t0A52, _t0A55, _t0A58, _t0A5B};
      int[2] _t0A5D = prim $sub01C0<int[2]; %4> (_t0A5C, faceIdx0873);
      int _t0A5E = 1;
      int _t0A5F = prim $sub01C0<int; %2> (_t0A5D, _t0A5E);
      int[] _t0A60 = prim $range01C3 (_t0A4F, _t0A5F);
      int[] accum0A80 = {};
      foreach i08AD in _t0A60 {
        int _t0A61 = 1;
        int _t0A62 = 2;
        int _t0A63 = 3;
        int _t0A64 = 0;
        int _t0A65 = 2;
        int _t0A66 = 3;
        int _t0A67 = 0;
        int _t0A68 = 1;
        int _t0A69 = 3;
        int _t0A6A = 0;
        int _t0A6B = 1;
        int _t0A6C = 2;
        int[12] _t0A6D = {_t0A61, _t0A62, _t0A63, _t0A64, _t0A65, _t0A66, _t0A67, _t0A68, _t0A69, _t0A6A, _t0A6B, _t0A6C};
        int _t0A6E = 1;
        int _t0A6F = 3;
        int[2] _t0A70 = {_t0A6E, _t0A6F};
        int _t0A71 = 3;
        int _t0A72 = 3;
        int[2] _t0A73 = {_t0A71, _t0A72};
        int _t0A74 = 9;
        int _t0A75 = 3;
        int[2] _t0A76 = {_t0A74, _t0A75};
        int _t0A77 = 27;
        int _t0A78 = 3;
        int[2] _t0A79 = {_t0A77, _t0A78};
        int[2][4] _t0A7A = {_t0A70, _t0A73, _t0A76, _t0A79};
        int[2] _t0A7B = prim $sub01C0<int[2]; %4> (_t0A7A, faceIdx0873);
        int _t0A7C = 0;
        int _t0A7D = prim $sub01C0<int; %2> (_t0A7B, _t0A7C);
        int _t0A7E = prim +0015 (_t0A7D, i08AD);
        int _t0A7F = prim $sub01C0<int; %12> (_t0A6D, _t0A7E);
        accum0A80 = prim @0010<int> (accum0A80, _t0A7F);
      }
      int _t0A81 = 0;
      int _t0A82 = prim $dynsub01C2<int> (accum0A80, _t0A81);
      bool _t0A83 = prim ==0082 (_t0A4E, _t0A82);
      int[4] _t0A84 = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t0A85 = 0;
      int _t0A86 = prim $sub01C0<int; %4> (_t0A84, _t0A85);
      int[4] _t0A87 = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t0A88 = 1;
      int _t0A89 = prim $sub01C0<int; %4> (_t0A87, _t0A88);
      int[4] _t0A8A = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t0A8B = 3;
      int _t0A8C = prim $sub01C0<int; %4> (_t0A8A, _t0A8B);
      int[3] _t0A8D = {_t0A86, _t0A89, _t0A8C};
      int _t0A8E = 1;
      int _t0A8F = prim $sub01C0<int; %3> (_t0A8D, _t0A8E);
      int _t0A90 = 0;
      int _t0A91 = 1;
      int _t0A92 = 3;
      int[2] _t0A93 = {_t0A91, _t0A92};
      int _t0A94 = 3;
      int _t0A95 = 3;
      int[2] _t0A96 = {_t0A94, _t0A95};
      int _t0A97 = 9;
      int _t0A98 = 3;
      int[2] _t0A99 = {_t0A97, _t0A98};
      int _t0A9A = 27;
      int _t0A9B = 3;
      int[2] _t0A9C = {_t0A9A, _t0A9B};
      int[2][4] _t0A9D = {_t0A93, _t0A96, _t0A99, _t0A9C};
      int[2] _t0A9E = prim $sub01C0<int[2]; %4> (_t0A9D, faceIdx0873);
      int _t0A9F = 1;
      int _t0AA0 = prim $sub01C0<int; %2> (_t0A9E, _t0A9F);
      int[] _t0AA1 = prim $range01C3 (_t0A90, _t0AA0);
      int[] accum0AC1 = {};
      foreach i08AD in _t0AA1 {
        int _t0AA2 = 1;
        int _t0AA3 = 2;
        int _t0AA4 = 3;
        int _t0AA5 = 0;
        int _t0AA6 = 2;
        int _t0AA7 = 3;
        int _t0AA8 = 0;
        int _t0AA9 = 1;
        int _t0AAA = 3;
        int _t0AAB = 0;
        int _t0AAC = 1;
        int _t0AAD = 2;
        int[12] _t0AAE = {_t0AA2, _t0AA3, _t0AA4, _t0AA5, _t0AA6, _t0AA7, _t0AA8, _t0AA9, _t0AAA, _t0AAB, _t0AAC, _t0AAD};
        int _t0AAF = 1;
        int _t0AB0 = 3;
        int[2] _t0AB1 = {_t0AAF, _t0AB0};
        int _t0AB2 = 3;
        int _t0AB3 = 3;
        int[2] _t0AB4 = {_t0AB2, _t0AB3};
        int _t0AB5 = 9;
        int _t0AB6 = 3;
        int[2] _t0AB7 = {_t0AB5, _t0AB6};
        int _t0AB8 = 27;
        int _t0AB9 = 3;
        int[2] _t0ABA = {_t0AB8, _t0AB9};
        int[2][4] _t0ABB = {_t0AB1, _t0AB4, _t0AB7, _t0ABA};
        int[2] _t0ABC = prim $sub01C0<int[2]; %4> (_t0ABB, faceIdx0873);
        int _t0ABD = 0;
        int _t0ABE = prim $sub01C0<int; %2> (_t0ABC, _t0ABD);
        int _t0ABF = prim +0015 (_t0ABE, i08AD);
        int _t0AC0 = prim $sub01C0<int; %12> (_t0AAE, _t0ABF);
        accum0AC1 = prim @0010<int> (accum0AC1, _t0AC0);
      }
      int _t0AC2 = 1;
      int _t0AC3 = prim $dynsub01C2<int> (accum0AC1, _t0AC2);
      bool _t0AC4 = prim ==0082 (_t0A8F, _t0AC3);
      int[4] _t0AC5 = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t0AC6 = 0;
      int _t0AC7 = prim $sub01C0<int; %4> (_t0AC5, _t0AC6);
      int[4] _t0AC8 = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t0AC9 = 1;
      int _t0ACA = prim $sub01C0<int; %4> (_t0AC8, _t0AC9);
      int[4] _t0ACB = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t0ACC = 3;
      int _t0ACD = prim $sub01C0<int; %4> (_t0ACB, _t0ACC);
      int[3] _t0ACE = {_t0AC7, _t0ACA, _t0ACD};
      int _t0ACF = 2;
      int _t0AD0 = prim $sub01C0<int; %3> (_t0ACE, _t0ACF);
      int _t0AD1 = 0;
      int _t0AD2 = 1;
      int _t0AD3 = 3;
      int[2] _t0AD4 = {_t0AD2, _t0AD3};
      int _t0AD5 = 3;
      int _t0AD6 = 3;
      int[2] _t0AD7 = {_t0AD5, _t0AD6};
      int _t0AD8 = 9;
      int _t0AD9 = 3;
      int[2] _t0ADA = {_t0AD8, _t0AD9};
      int _t0ADB = 27;
      int _t0ADC = 3;
      int[2] _t0ADD = {_t0ADB, _t0ADC};
      int[2][4] _t0ADE = {_t0AD4, _t0AD7, _t0ADA, _t0ADD};
      int[2] _t0ADF = prim $sub01C0<int[2]; %4> (_t0ADE, faceIdx0873);
      int _t0AE0 = 1;
      int _t0AE1 = prim $sub01C0<int; %2> (_t0ADF, _t0AE0);
      int[] _t0AE2 = prim $range01C3 (_t0AD1, _t0AE1);
      int[] accum0B02 = {};
      foreach i08AD in _t0AE2 {
        int _t0AE3 = 1;
        int _t0AE4 = 2;
        int _t0AE5 = 3;
        int _t0AE6 = 0;
        int _t0AE7 = 2;
        int _t0AE8 = 3;
        int _t0AE9 = 0;
        int _t0AEA = 1;
        int _t0AEB = 3;
        int _t0AEC = 0;
        int _t0AED = 1;
        int _t0AEE = 2;
        int[12] _t0AEF = {_t0AE3, _t0AE4, _t0AE5, _t0AE6, _t0AE7, _t0AE8, _t0AE9, _t0AEA, _t0AEB, _t0AEC, _t0AED, _t0AEE};
        int _t0AF0 = 1;
        int _t0AF1 = 3;
        int[2] _t0AF2 = {_t0AF0, _t0AF1};
        int _t0AF3 = 3;
        int _t0AF4 = 3;
        int[2] _t0AF5 = {_t0AF3, _t0AF4};
        int _t0AF6 = 9;
        int _t0AF7 = 3;
        int[2] _t0AF8 = {_t0AF6, _t0AF7};
        int _t0AF9 = 27;
        int _t0AFA = 3;
        int[2] _t0AFB = {_t0AF9, _t0AFA};
        int[2][4] _t0AFC = {_t0AF2, _t0AF5, _t0AF8, _t0AFB};
        int[2] _t0AFD = prim $sub01C0<int[2]; %4> (_t0AFC, faceIdx0873);
        int _t0AFE = 0;
        int _t0AFF = prim $sub01C0<int; %2> (_t0AFD, _t0AFE);
        int _t0B00 = prim +0015 (_t0AFF, i08AD);
        int _t0B01 = prim $sub01C0<int; %12> (_t0AEF, _t0B00);
        accum0B02 = prim @0010<int> (accum0B02, _t0B01);
      }
      int _t0B03 = 2;
      int _t0B04 = prim $dynsub01C2<int> (accum0B02, _t0B03);
      bool _t0B05 = prim ==0082 (_t0AD0, _t0B04);
      bool _t0B06 = prim $and01C4 (_t0AC4, _t0B05);
      bool _t0B07 = prim $and01C4 (_t0A83, _t0B06);
      if _t0B07 {
        int _t0B08 = 2;
        int[2] _t0B09 = {cellInt08B4, _t0B08};
        return _t0B09;
      }
      int[4] _t0B0A = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t0B0B = 0;
      int _t0B0C = prim $sub01C0<int; %4> (_t0B0A, _t0B0B);
      int[4] _t0B0D = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t0B0E = 1;
      int _t0B0F = prim $sub01C0<int; %4> (_t0B0D, _t0B0E);
      int[4] _t0B10 = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t0B11 = 2;
      int _t0B12 = prim $sub01C0<int; %4> (_t0B10, _t0B11);
      int[3] _t0B13 = {_t0B0C, _t0B0F, _t0B12};
      int _t0B14 = 0;
      int _t0B15 = prim $sub01C0<int; %3> (_t0B13, _t0B14);
      int _t0B16 = 0;
      int _t0B17 = 1;
      int _t0B18 = 3;
      int[2] _t0B19 = {_t0B17, _t0B18};
      int _t0B1A = 3;
      int _t0B1B = 3;
      int[2] _t0B1C = {_t0B1A, _t0B1B};
      int _t0B1D = 9;
      int _t0B1E = 3;
      int[2] _t0B1F = {_t0B1D, _t0B1E};
      int _t0B20 = 27;
      int _t0B21 = 3;
      int[2] _t0B22 = {_t0B20, _t0B21};
      int[2][4] _t0B23 = {_t0B19, _t0B1C, _t0B1F, _t0B22};
      int[2] _t0B24 = prim $sub01C0<int[2]; %4> (_t0B23, faceIdx0873);
      int _t0B25 = 1;
      int _t0B26 = prim $sub01C0<int; %2> (_t0B24, _t0B25);
      int[] _t0B27 = prim $range01C3 (_t0B16, _t0B26);
      int[] accum0B47 = {};
      foreach i08AD in _t0B27 {
        int _t0B28 = 1;
        int _t0B29 = 2;
        int _t0B2A = 3;
        int _t0B2B = 0;
        int _t0B2C = 2;
        int _t0B2D = 3;
        int _t0B2E = 0;
        int _t0B2F = 1;
        int _t0B30 = 3;
        int _t0B31 = 0;
        int _t0B32 = 1;
        int _t0B33 = 2;
        int[12] _t0B34 = {_t0B28, _t0B29, _t0B2A, _t0B2B, _t0B2C, _t0B2D, _t0B2E, _t0B2F, _t0B30, _t0B31, _t0B32, _t0B33};
        int _t0B35 = 1;
        int _t0B36 = 3;
        int[2] _t0B37 = {_t0B35, _t0B36};
        int _t0B38 = 3;
        int _t0B39 = 3;
        int[2] _t0B3A = {_t0B38, _t0B39};
        int _t0B3B = 9;
        int _t0B3C = 3;
        int[2] _t0B3D = {_t0B3B, _t0B3C};
        int _t0B3E = 27;
        int _t0B3F = 3;
        int[2] _t0B40 = {_t0B3E, _t0B3F};
        int[2][4] _t0B41 = {_t0B37, _t0B3A, _t0B3D, _t0B40};
        int[2] _t0B42 = prim $sub01C0<int[2]; %4> (_t0B41, faceIdx0873);
        int _t0B43 = 0;
        int _t0B44 = prim $sub01C0<int; %2> (_t0B42, _t0B43);
        int _t0B45 = prim +0015 (_t0B44, i08AD);
        int _t0B46 = prim $sub01C0<int; %12> (_t0B34, _t0B45);
        accum0B47 = prim @0010<int> (accum0B47, _t0B46);
      }
      int _t0B48 = 0;
      int _t0B49 = prim $dynsub01C2<int> (accum0B47, _t0B48);
      bool _t0B4A = prim ==0082 (_t0B15, _t0B49);
      int[4] _t0B4B = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t0B4C = 0;
      int _t0B4D = prim $sub01C0<int; %4> (_t0B4B, _t0B4C);
      int[4] _t0B4E = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t0B4F = 1;
      int _t0B50 = prim $sub01C0<int; %4> (_t0B4E, _t0B4F);
      int[4] _t0B51 = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t0B52 = 2;
      int _t0B53 = prim $sub01C0<int; %4> (_t0B51, _t0B52);
      int[3] _t0B54 = {_t0B4D, _t0B50, _t0B53};
      int _t0B55 = 1;
      int _t0B56 = prim $sub01C0<int; %3> (_t0B54, _t0B55);
      int _t0B57 = 0;
      int _t0B58 = 1;
      int _t0B59 = 3;
      int[2] _t0B5A = {_t0B58, _t0B59};
      int _t0B5B = 3;
      int _t0B5C = 3;
      int[2] _t0B5D = {_t0B5B, _t0B5C};
      int _t0B5E = 9;
      int _t0B5F = 3;
      int[2] _t0B60 = {_t0B5E, _t0B5F};
      int _t0B61 = 27;
      int _t0B62 = 3;
      int[2] _t0B63 = {_t0B61, _t0B62};
      int[2][4] _t0B64 = {_t0B5A, _t0B5D, _t0B60, _t0B63};
      int[2] _t0B65 = prim $sub01C0<int[2]; %4> (_t0B64, faceIdx0873);
      int _t0B66 = 1;
      int _t0B67 = prim $sub01C0<int; %2> (_t0B65, _t0B66);
      int[] _t0B68 = prim $range01C3 (_t0B57, _t0B67);
      int[] accum0B88 = {};
      foreach i08AD in _t0B68 {
        int _t0B69 = 1;
        int _t0B6A = 2;
        int _t0B6B = 3;
        int _t0B6C = 0;
        int _t0B6D = 2;
        int _t0B6E = 3;
        int _t0B6F = 0;
        int _t0B70 = 1;
        int _t0B71 = 3;
        int _t0B72 = 0;
        int _t0B73 = 1;
        int _t0B74 = 2;
        int[12] _t0B75 = {_t0B69, _t0B6A, _t0B6B, _t0B6C, _t0B6D, _t0B6E, _t0B6F, _t0B70, _t0B71, _t0B72, _t0B73, _t0B74};
        int _t0B76 = 1;
        int _t0B77 = 3;
        int[2] _t0B78 = {_t0B76, _t0B77};
        int _t0B79 = 3;
        int _t0B7A = 3;
        int[2] _t0B7B = {_t0B79, _t0B7A};
        int _t0B7C = 9;
        int _t0B7D = 3;
        int[2] _t0B7E = {_t0B7C, _t0B7D};
        int _t0B7F = 27;
        int _t0B80 = 3;
        int[2] _t0B81 = {_t0B7F, _t0B80};
        int[2][4] _t0B82 = {_t0B78, _t0B7B, _t0B7E, _t0B81};
        int[2] _t0B83 = prim $sub01C0<int[2]; %4> (_t0B82, faceIdx0873);
        int _t0B84 = 0;
        int _t0B85 = prim $sub01C0<int; %2> (_t0B83, _t0B84);
        int _t0B86 = prim +0015 (_t0B85, i08AD);
        int _t0B87 = prim $sub01C0<int; %12> (_t0B75, _t0B86);
        accum0B88 = prim @0010<int> (accum0B88, _t0B87);
      }
      int _t0B89 = 1;
      int _t0B8A = prim $dynsub01C2<int> (accum0B88, _t0B89);
      bool _t0B8B = prim ==0082 (_t0B56, _t0B8A);
      int[4] _t0B8C = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t0B8D = 0;
      int _t0B8E = prim $sub01C0<int; %4> (_t0B8C, _t0B8D);
      int[4] _t0B8F = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t0B90 = 1;
      int _t0B91 = prim $sub01C0<int; %4> (_t0B8F, _t0B90);
      int[4] _t0B92 = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t0B93 = 2;
      int _t0B94 = prim $sub01C0<int; %4> (_t0B92, _t0B93);
      int[3] _t0B95 = {_t0B8E, _t0B91, _t0B94};
      int _t0B96 = 2;
      int _t0B97 = prim $sub01C0<int; %3> (_t0B95, _t0B96);
      int _t0B98 = 0;
      int _t0B99 = 1;
      int _t0B9A = 3;
      int[2] _t0B9B = {_t0B99, _t0B9A};
      int _t0B9C = 3;
      int _t0B9D = 3;
      int[2] _t0B9E = {_t0B9C, _t0B9D};
      int _t0B9F = 9;
      int _t0BA0 = 3;
      int[2] _t0BA1 = {_t0B9F, _t0BA0};
      int _t0BA2 = 27;
      int _t0BA3 = 3;
      int[2] _t0BA4 = {_t0BA2, _t0BA3};
      int[2][4] _t0BA5 = {_t0B9B, _t0B9E, _t0BA1, _t0BA4};
      int[2] _t0BA6 = prim $sub01C0<int[2]; %4> (_t0BA5, faceIdx0873);
      int _t0BA7 = 1;
      int _t0BA8 = prim $sub01C0<int; %2> (_t0BA6, _t0BA7);
      int[] _t0BA9 = prim $range01C3 (_t0B98, _t0BA8);
      int[] accum0BC9 = {};
      foreach i08AD in _t0BA9 {
        int _t0BAA = 1;
        int _t0BAB = 2;
        int _t0BAC = 3;
        int _t0BAD = 0;
        int _t0BAE = 2;
        int _t0BAF = 3;
        int _t0BB0 = 0;
        int _t0BB1 = 1;
        int _t0BB2 = 3;
        int _t0BB3 = 0;
        int _t0BB4 = 1;
        int _t0BB5 = 2;
        int[12] _t0BB6 = {_t0BAA, _t0BAB, _t0BAC, _t0BAD, _t0BAE, _t0BAF, _t0BB0, _t0BB1, _t0BB2, _t0BB3, _t0BB4, _t0BB5};
        int _t0BB7 = 1;
        int _t0BB8 = 3;
        int[2] _t0BB9 = {_t0BB7, _t0BB8};
        int _t0BBA = 3;
        int _t0BBB = 3;
        int[2] _t0BBC = {_t0BBA, _t0BBB};
        int _t0BBD = 9;
        int _t0BBE = 3;
        int[2] _t0BBF = {_t0BBD, _t0BBE};
        int _t0BC0 = 27;
        int _t0BC1 = 3;
        int[2] _t0BC2 = {_t0BC0, _t0BC1};
        int[2][4] _t0BC3 = {_t0BB9, _t0BBC, _t0BBF, _t0BC2};
        int[2] _t0BC4 = prim $sub01C0<int[2]; %4> (_t0BC3, faceIdx0873);
        int _t0BC5 = 0;
        int _t0BC6 = prim $sub01C0<int; %2> (_t0BC4, _t0BC5);
        int _t0BC7 = prim +0015 (_t0BC6, i08AD);
        int _t0BC8 = prim $sub01C0<int; %12> (_t0BB6, _t0BC7);
        accum0BC9 = prim @0010<int> (accum0BC9, _t0BC8);
      }
      int _t0BCA = 2;
      int _t0BCB = prim $dynsub01C2<int> (accum0BC9, _t0BCA);
      bool _t0BCC = prim ==0082 (_t0B97, _t0BCB);
      bool _t0BCD = prim $and01C4 (_t0B8B, _t0BCC);
      bool _t0BCE = prim $and01C4 (_t0B4A, _t0BCD);
      if _t0BCE {
        int _t0BCF = 3;
        int[2] _t0BD0 = {cellInt08B4, _t0BCF};
        return _t0BD0;
      }
    }
  }
  int _t0BD1 = -1;
  int _t0BD2 = -1;
  int[2] _t0BD3 = {_t0BD1, _t0BD2};
  return _t0BD3;
}
function vec2#0 _enter0BD4 (vec3 refPos0BD5, vec3 dPos0BD6)
{
  real time0BD7 = +inf;
  int face0BD8 = -1;
  real _t0BD9 = 0.57735026919e0;
  real _t0BDA = 0.57735026919e0;
  real _t0BDB = -0.57735026919e0;
  real _t0BDC = 0.57735026919e0;
  vec3 _t0BDD = [_t0BDA, _t0BDB, _t0BDC];
  real _t0BDE = prim •00CE<$[3]; $[3]; $[]> (_t0BDD, refPos0BD5);
  real _t0BDF = prim -0026<$[]> (_t0BD9, _t0BDE);
  real _t0BE0 = 0.57735026919e0;
  real _t0BE1 = -0.57735026919e0;
  real _t0BE2 = 0.57735026919e0;
  vec3 _t0BE3 = [_t0BE0, _t0BE1, _t0BE2];
  real _t0BE4 = prim •00CE<$[3]; $[3]; $[]> (_t0BE3, dPos0BD6);
  real _t0BE5 = prim /0055 (_t0BDF, _t0BE4);
  real _t0BE6 = -0.e0;
  bool _t0BE7 = prim >0080 (_t0BE5, _t0BE6);
  real _t0BE8 = 0.57735026919e0;
  real _t0BE9 = 0.57735026919e0;
  real _t0BEA = -0.57735026919e0;
  real _t0BEB = 0.57735026919e0;
  vec3 _t0BEC = [_t0BE9, _t0BEA, _t0BEB];
  real _t0BED = prim •00CE<$[3]; $[3]; $[]> (_t0BEC, refPos0BD5);
  real _t0BEE = prim -0026<$[]> (_t0BE8, _t0BED);
  real _t0BEF = 0.57735026919e0;
  real _t0BF0 = -0.57735026919e0;
  real _t0BF1 = 0.57735026919e0;
  vec3 _t0BF2 = [_t0BEF, _t0BF0, _t0BF1];
  real _t0BF3 = prim •00CE<$[3]; $[3]; $[]> (_t0BF2, dPos0BD6);
  real _t0BF4 = prim /0055 (_t0BEE, _t0BF3);
  bool _t0BF5 = prim >0080 (time0BD7, _t0BF4);
  bool _t0BF6 = prim $and01C4 (_t0BE7, _t0BF5);
  if _t0BF6 {
    real _t0BF7 = 0.1e1;
    real _t0BF8 = 0.1e-8;
    real _t0BF9 = prim +0017<$[]> (_t0BF7, _t0BF8);
    real _t0BFA = 0.1e1;
    real _t0BFB = 0.1e1;
    real _t0BFC = 0.1e1;
    vec3 _t0BFD = [_t0BFA, _t0BFB, _t0BFC];
    real _t0BFE = 0.57735026919e0;
    real _t0BFF = 0.57735026919e0;
    real _t0C00 = -0.57735026919e0;
    real _t0C01 = 0.57735026919e0;
    vec3 _t0C02 = [_t0BFF, _t0C00, _t0C01];
    real _t0C03 = prim •00CE<$[3]; $[3]; $[]> (_t0C02, refPos0BD5);
    real _t0C04 = prim -0026<$[]> (_t0BFE, _t0C03);
    real _t0C05 = 0.57735026919e0;
    real _t0C06 = -0.57735026919e0;
    real _t0C07 = 0.57735026919e0;
    vec3 _t0C08 = [_t0C05, _t0C06, _t0C07];
    real _t0C09 = prim •00CE<$[3]; $[3]; $[]> (_t0C08, dPos0BD6);
    real _t0C0A = prim /0055 (_t0C04, _t0C09);
    vec3 _t0C0B = prim *0038<$[3]> (dPos0BD6, _t0C0A);
    vec3 _t0C0C = prim +0017<$[3]> (_t0C0B, refPos0BD5);
    real _t0C0D = prim •00CE<$[3]; $[3]; $[]> (_t0BFD, _t0C0C);
    bool _t0C0E = prim >0080 (_t0BF9, _t0C0D);
    real _t0C0F = 0.1e-8;
    real _t0C10 = 0.1e-8;
    real _t0C11 = 0.1e-8;
    vec3 _t0C12 = [_t0C0F, _t0C10, _t0C11];
    real _t0C13 = 0.57735026919e0;
    real _t0C14 = 0.57735026919e0;
    real _t0C15 = -0.57735026919e0;
    real _t0C16 = 0.57735026919e0;
    vec3 _t0C17 = [_t0C14, _t0C15, _t0C16];
    real _t0C18 = prim •00CE<$[3]; $[3]; $[]> (_t0C17, refPos0BD5);
    real _t0C19 = prim -0026<$[]> (_t0C13, _t0C18);
    real _t0C1A = 0.57735026919e0;
    real _t0C1B = -0.57735026919e0;
    real _t0C1C = 0.57735026919e0;
    vec3 _t0C1D = [_t0C1A, _t0C1B, _t0C1C];
    real _t0C1E = prim •00CE<$[3]; $[3]; $[]> (_t0C1D, dPos0BD6);
    real _t0C1F = prim /0055 (_t0C19, _t0C1E);
    vec3 _t0C20 = prim *0038<$[3]> (dPos0BD6, _t0C1F);
    vec3 _t0C21 = prim +0017<$[3]> (_t0C20, refPos0BD5);
    vec3 _t0C22 = prim +0017<$[3]> (_t0C12, _t0C21);
    real _t0C23 = _t0C22[0];
    real _t0C24 = -0.e0;
    bool _t0C25 = prim >0080 (_t0C23, _t0C24);
    real _t0C26 = 0.1e-8;
    real _t0C27 = 0.1e-8;
    real _t0C28 = 0.1e-8;
    vec3 _t0C29 = [_t0C26, _t0C27, _t0C28];
    real _t0C2A = 0.57735026919e0;
    real _t0C2B = 0.57735026919e0;
    real _t0C2C = -0.57735026919e0;
    real _t0C2D = 0.57735026919e0;
    vec3 _t0C2E = [_t0C2B, _t0C2C, _t0C2D];
    real _t0C2F = prim •00CE<$[3]; $[3]; $[]> (_t0C2E, refPos0BD5);
    real _t0C30 = prim -0026<$[]> (_t0C2A, _t0C2F);
    real _t0C31 = 0.57735026919e0;
    real _t0C32 = -0.57735026919e0;
    real _t0C33 = 0.57735026919e0;
    vec3 _t0C34 = [_t0C31, _t0C32, _t0C33];
    real _t0C35 = prim •00CE<$[3]; $[3]; $[]> (_t0C34, dPos0BD6);
    real _t0C36 = prim /0055 (_t0C30, _t0C35);
    vec3 _t0C37 = prim *0038<$[3]> (dPos0BD6, _t0C36);
    vec3 _t0C38 = prim +0017<$[3]> (_t0C37, refPos0BD5);
    vec3 _t0C39 = prim +0017<$[3]> (_t0C29, _t0C38);
    real _t0C3A = _t0C39[1];
    real _t0C3B = -0.e0;
    bool _t0C3C = prim >0080 (_t0C3A, _t0C3B);
    real _t0C3D = 0.1e-8;
    real _t0C3E = 0.1e-8;
    real _t0C3F = 0.1e-8;
    vec3 _t0C40 = [_t0C3D, _t0C3E, _t0C3F];
    real _t0C41 = 0.57735026919e0;
    real _t0C42 = 0.57735026919e0;
    real _t0C43 = -0.57735026919e0;
    real _t0C44 = 0.57735026919e0;
    vec3 _t0C45 = [_t0C42, _t0C43, _t0C44];
    real _t0C46 = prim •00CE<$[3]; $[3]; $[]> (_t0C45, refPos0BD5);
    real _t0C47 = prim -0026<$[]> (_t0C41, _t0C46);
    real _t0C48 = 0.57735026919e0;
    real _t0C49 = -0.57735026919e0;
    real _t0C4A = 0.57735026919e0;
    vec3 _t0C4B = [_t0C48, _t0C49, _t0C4A];
    real _t0C4C = prim •00CE<$[3]; $[3]; $[]> (_t0C4B, dPos0BD6);
    real _t0C4D = prim /0055 (_t0C47, _t0C4C);
    vec3 _t0C4E = prim *0038<$[3]> (dPos0BD6, _t0C4D);
    vec3 _t0C4F = prim +0017<$[3]> (_t0C4E, refPos0BD5);
    vec3 _t0C50 = prim +0017<$[3]> (_t0C40, _t0C4F);
    real _t0C51 = _t0C50[2];
    real _t0C52 = -0.e0;
    bool _t0C53 = prim >0080 (_t0C51, _t0C52);
    bool _t0C54 = prim $and01C4 (_t0C3C, _t0C53);
    bool _t0C55 = prim $and01C4 (_t0C25, _t0C54);
    bool _t0C56 = prim $and01C4 (_t0C0E, _t0C55);
    if _t0C56 {
      real _t0C57 = 0.57735026919e0;
      real _t0C58 = 0.57735026919e0;
      real _t0C59 = -0.57735026919e0;
      real _t0C5A = 0.57735026919e0;
      vec3 _t0C5B = [_t0C58, _t0C59, _t0C5A];
      real _t0C5C = prim •00CE<$[3]; $[3]; $[]> (_t0C5B, refPos0BD5);
      real _t0C5D = prim -0026<$[]> (_t0C57, _t0C5C);
      real _t0C5E = 0.57735026919e0;
      real _t0C5F = -0.57735026919e0;
      real _t0C60 = 0.57735026919e0;
      vec3 _t0C61 = [_t0C5E, _t0C5F, _t0C60];
      real _t0C62 = prim •00CE<$[3]; $[3]; $[]> (_t0C61, dPos0BD6);
      time0BD7 = prim /0055 (_t0C5D, _t0C62);
      face0BD8 = 0;
    }
  }
  real _t0C63 = 0.e0;
  real _t0C64 = 0.1e1;
  real _t0C65 = 0.e0;
  real _t0C66 = 0.e0;
  vec3 _t0C67 = [_t0C64, _t0C65, _t0C66];
  real _t0C68 = prim •00CE<$[3]; $[3]; $[]> (_t0C67, refPos0BD5);
  real _t0C69 = prim -0026<$[]> (_t0C63, _t0C68);
  real _t0C6A = 0.1e1;
  real _t0C6B = 0.e0;
  real _t0C6C = 0.e0;
  vec3 _t0C6D = [_t0C6A, _t0C6B, _t0C6C];
  real _t0C6E = prim •00CE<$[3]; $[3]; $[]> (_t0C6D, dPos0BD6);
  real _t0C6F = prim /0055 (_t0C69, _t0C6E);
  real _t0C70 = -0.e0;
  bool _t0C71 = prim >0080 (_t0C6F, _t0C70);
  real _t0C72 = 0.e0;
  real _t0C73 = 0.1e1;
  real _t0C74 = 0.e0;
  real _t0C75 = 0.e0;
  vec3 _t0C76 = [_t0C73, _t0C74, _t0C75];
  real _t0C77 = prim •00CE<$[3]; $[3]; $[]> (_t0C76, refPos0BD5);
  real _t0C78 = prim -0026<$[]> (_t0C72, _t0C77);
  real _t0C79 = 0.1e1;
  real _t0C7A = 0.e0;
  real _t0C7B = 0.e0;
  vec3 _t0C7C = [_t0C79, _t0C7A, _t0C7B];
  real _t0C7D = prim •00CE<$[3]; $[3]; $[]> (_t0C7C, dPos0BD6);
  real _t0C7E = prim /0055 (_t0C78, _t0C7D);
  bool _t0C7F = prim >0080 (time0BD7, _t0C7E);
  bool _t0C80 = prim $and01C4 (_t0C71, _t0C7F);
  if _t0C80 {
    real _t0C81 = 0.1e1;
    real _t0C82 = 0.1e-8;
    real _t0C83 = prim +0017<$[]> (_t0C81, _t0C82);
    real _t0C84 = 0.1e1;
    real _t0C85 = 0.1e1;
    real _t0C86 = 0.1e1;
    vec3 _t0C87 = [_t0C84, _t0C85, _t0C86];
    real _t0C88 = 0.e0;
    real _t0C89 = 0.1e1;
    real _t0C8A = 0.e0;
    real _t0C8B = 0.e0;
    vec3 _t0C8C = [_t0C89, _t0C8A, _t0C8B];
    real _t0C8D = prim •00CE<$[3]; $[3]; $[]> (_t0C8C, refPos0BD5);
    real _t0C8E = prim -0026<$[]> (_t0C88, _t0C8D);
    real _t0C8F = 0.1e1;
    real _t0C90 = 0.e0;
    real _t0C91 = 0.e0;
    vec3 _t0C92 = [_t0C8F, _t0C90, _t0C91];
    real _t0C93 = prim •00CE<$[3]; $[3]; $[]> (_t0C92, dPos0BD6);
    real _t0C94 = prim /0055 (_t0C8E, _t0C93);
    vec3 _t0C95 = prim *0038<$[3]> (dPos0BD6, _t0C94);
    vec3 _t0C96 = prim +0017<$[3]> (_t0C95, refPos0BD5);
    real _t0C97 = prim •00CE<$[3]; $[3]; $[]> (_t0C87, _t0C96);
    bool _t0C98 = prim >0080 (_t0C83, _t0C97);
    real _t0C99 = 0.1e-8;
    real _t0C9A = 0.1e-8;
    real _t0C9B = 0.1e-8;
    vec3 _t0C9C = [_t0C99, _t0C9A, _t0C9B];
    real _t0C9D = 0.e0;
    real _t0C9E = 0.1e1;
    real _t0C9F = 0.e0;
    real _t0CA0 = 0.e0;
    vec3 _t0CA1 = [_t0C9E, _t0C9F, _t0CA0];
    real _t0CA2 = prim •00CE<$[3]; $[3]; $[]> (_t0CA1, refPos0BD5);
    real _t0CA3 = prim -0026<$[]> (_t0C9D, _t0CA2);
    real _t0CA4 = 0.1e1;
    real _t0CA5 = 0.e0;
    real _t0CA6 = 0.e0;
    vec3 _t0CA7 = [_t0CA4, _t0CA5, _t0CA6];
    real _t0CA8 = prim •00CE<$[3]; $[3]; $[]> (_t0CA7, dPos0BD6);
    real _t0CA9 = prim /0055 (_t0CA3, _t0CA8);
    vec3 _t0CAA = prim *0038<$[3]> (dPos0BD6, _t0CA9);
    vec3 _t0CAB = prim +0017<$[3]> (_t0CAA, refPos0BD5);
    vec3 _t0CAC = prim +0017<$[3]> (_t0C9C, _t0CAB);
    real _t0CAD = _t0CAC[0];
    real _t0CAE = -0.e0;
    bool _t0CAF = prim >0080 (_t0CAD, _t0CAE);
    real _t0CB0 = 0.1e-8;
    real _t0CB1 = 0.1e-8;
    real _t0CB2 = 0.1e-8;
    vec3 _t0CB3 = [_t0CB0, _t0CB1, _t0CB2];
    real _t0CB4 = 0.e0;
    real _t0CB5 = 0.1e1;
    real _t0CB6 = 0.e0;
    real _t0CB7 = 0.e0;
    vec3 _t0CB8 = [_t0CB5, _t0CB6, _t0CB7];
    real _t0CB9 = prim •00CE<$[3]; $[3]; $[]> (_t0CB8, refPos0BD5);
    real _t0CBA = prim -0026<$[]> (_t0CB4, _t0CB9);
    real _t0CBB = 0.1e1;
    real _t0CBC = 0.e0;
    real _t0CBD = 0.e0;
    vec3 _t0CBE = [_t0CBB, _t0CBC, _t0CBD];
    real _t0CBF = prim •00CE<$[3]; $[3]; $[]> (_t0CBE, dPos0BD6);
    real _t0CC0 = prim /0055 (_t0CBA, _t0CBF);
    vec3 _t0CC1 = prim *0038<$[3]> (dPos0BD6, _t0CC0);
    vec3 _t0CC2 = prim +0017<$[3]> (_t0CC1, refPos0BD5);
    vec3 _t0CC3 = prim +0017<$[3]> (_t0CB3, _t0CC2);
    real _t0CC4 = _t0CC3[1];
    real _t0CC5 = -0.e0;
    bool _t0CC6 = prim >0080 (_t0CC4, _t0CC5);
    real _t0CC7 = 0.1e-8;
    real _t0CC8 = 0.1e-8;
    real _t0CC9 = 0.1e-8;
    vec3 _t0CCA = [_t0CC7, _t0CC8, _t0CC9];
    real _t0CCB = 0.e0;
    real _t0CCC = 0.1e1;
    real _t0CCD = 0.e0;
    real _t0CCE = 0.e0;
    vec3 _t0CCF = [_t0CCC, _t0CCD, _t0CCE];
    real _t0CD0 = prim •00CE<$[3]; $[3]; $[]> (_t0CCF, refPos0BD5);
    real _t0CD1 = prim -0026<$[]> (_t0CCB, _t0CD0);
    real _t0CD2 = 0.1e1;
    real _t0CD3 = 0.e0;
    real _t0CD4 = 0.e0;
    vec3 _t0CD5 = [_t0CD2, _t0CD3, _t0CD4];
    real _t0CD6 = prim •00CE<$[3]; $[3]; $[]> (_t0CD5, dPos0BD6);
    real _t0CD7 = prim /0055 (_t0CD1, _t0CD6);
    vec3 _t0CD8 = prim *0038<$[3]> (dPos0BD6, _t0CD7);
    vec3 _t0CD9 = prim +0017<$[3]> (_t0CD8, refPos0BD5);
    vec3 _t0CDA = prim +0017<$[3]> (_t0CCA, _t0CD9);
    real _t0CDB = _t0CDA[2];
    real _t0CDC = -0.e0;
    bool _t0CDD = prim >0080 (_t0CDB, _t0CDC);
    bool _t0CDE = prim $and01C4 (_t0CC6, _t0CDD);
    bool _t0CDF = prim $and01C4 (_t0CAF, _t0CDE);
    bool _t0CE0 = prim $and01C4 (_t0C98, _t0CDF);
    if _t0CE0 {
      real _t0CE1 = 0.e0;
      real _t0CE2 = 0.1e1;
      real _t0CE3 = 0.e0;
      real _t0CE4 = 0.e0;
      vec3 _t0CE5 = [_t0CE2, _t0CE3, _t0CE4];
      real _t0CE6 = prim •00CE<$[3]; $[3]; $[]> (_t0CE5, refPos0BD5);
      real _t0CE7 = prim -0026<$[]> (_t0CE1, _t0CE6);
      real _t0CE8 = 0.1e1;
      real _t0CE9 = 0.e0;
      real _t0CEA = 0.e0;
      vec3 _t0CEB = [_t0CE8, _t0CE9, _t0CEA];
      real _t0CEC = prim •00CE<$[3]; $[3]; $[]> (_t0CEB, dPos0BD6);
      time0BD7 = prim /0055 (_t0CE7, _t0CEC);
      face0BD8 = 1;
    }
  }
  real _t0CED = 0.e0;
  real _t0CEE = 0.e0;
  real _t0CEF = 0.1e1;
  real _t0CF0 = 0.e0;
  vec3 _t0CF1 = [_t0CEE, _t0CEF, _t0CF0];
  real _t0CF2 = prim •00CE<$[3]; $[3]; $[]> (_t0CF1, refPos0BD5);
  real _t0CF3 = prim -0026<$[]> (_t0CED, _t0CF2);
  real _t0CF4 = 0.e0;
  real _t0CF5 = 0.1e1;
  real _t0CF6 = 0.e0;
  vec3 _t0CF7 = [_t0CF4, _t0CF5, _t0CF6];
  real _t0CF8 = prim •00CE<$[3]; $[3]; $[]> (_t0CF7, dPos0BD6);
  real _t0CF9 = prim /0055 (_t0CF3, _t0CF8);
  real _t0CFA = -0.e0;
  bool _t0CFB = prim >0080 (_t0CF9, _t0CFA);
  real _t0CFC = 0.e0;
  real _t0CFD = 0.e0;
  real _t0CFE = 0.1e1;
  real _t0CFF = 0.e0;
  vec3 _t0D00 = [_t0CFD, _t0CFE, _t0CFF];
  real _t0D01 = prim •00CE<$[3]; $[3]; $[]> (_t0D00, refPos0BD5);
  real _t0D02 = prim -0026<$[]> (_t0CFC, _t0D01);
  real _t0D03 = 0.e0;
  real _t0D04 = 0.1e1;
  real _t0D05 = 0.e0;
  vec3 _t0D06 = [_t0D03, _t0D04, _t0D05];
  real _t0D07 = prim •00CE<$[3]; $[3]; $[]> (_t0D06, dPos0BD6);
  real _t0D08 = prim /0055 (_t0D02, _t0D07);
  bool _t0D09 = prim >0080 (time0BD7, _t0D08);
  bool _t0D0A = prim $and01C4 (_t0CFB, _t0D09);
  if _t0D0A {
    real _t0D0B = 0.1e1;
    real _t0D0C = 0.1e-8;
    real _t0D0D = prim +0017<$[]> (_t0D0B, _t0D0C);
    real _t0D0E = 0.1e1;
    real _t0D0F = 0.1e1;
    real _t0D10 = 0.1e1;
    vec3 _t0D11 = [_t0D0E, _t0D0F, _t0D10];
    real _t0D12 = 0.e0;
    real _t0D13 = 0.e0;
    real _t0D14 = 0.1e1;
    real _t0D15 = 0.e0;
    vec3 _t0D16 = [_t0D13, _t0D14, _t0D15];
    real _t0D17 = prim •00CE<$[3]; $[3]; $[]> (_t0D16, refPos0BD5);
    real _t0D18 = prim -0026<$[]> (_t0D12, _t0D17);
    real _t0D19 = 0.e0;
    real _t0D1A = 0.1e1;
    real _t0D1B = 0.e0;
    vec3 _t0D1C = [_t0D19, _t0D1A, _t0D1B];
    real _t0D1D = prim •00CE<$[3]; $[3]; $[]> (_t0D1C, dPos0BD6);
    real _t0D1E = prim /0055 (_t0D18, _t0D1D);
    vec3 _t0D1F = prim *0038<$[3]> (dPos0BD6, _t0D1E);
    vec3 _t0D20 = prim +0017<$[3]> (_t0D1F, refPos0BD5);
    real _t0D21 = prim •00CE<$[3]; $[3]; $[]> (_t0D11, _t0D20);
    bool _t0D22 = prim >0080 (_t0D0D, _t0D21);
    real _t0D23 = 0.1e-8;
    real _t0D24 = 0.1e-8;
    real _t0D25 = 0.1e-8;
    vec3 _t0D26 = [_t0D23, _t0D24, _t0D25];
    real _t0D27 = 0.e0;
    real _t0D28 = 0.e0;
    real _t0D29 = 0.1e1;
    real _t0D2A = 0.e0;
    vec3 _t0D2B = [_t0D28, _t0D29, _t0D2A];
    real _t0D2C = prim •00CE<$[3]; $[3]; $[]> (_t0D2B, refPos0BD5);
    real _t0D2D = prim -0026<$[]> (_t0D27, _t0D2C);
    real _t0D2E = 0.e0;
    real _t0D2F = 0.1e1;
    real _t0D30 = 0.e0;
    vec3 _t0D31 = [_t0D2E, _t0D2F, _t0D30];
    real _t0D32 = prim •00CE<$[3]; $[3]; $[]> (_t0D31, dPos0BD6);
    real _t0D33 = prim /0055 (_t0D2D, _t0D32);
    vec3 _t0D34 = prim *0038<$[3]> (dPos0BD6, _t0D33);
    vec3 _t0D35 = prim +0017<$[3]> (_t0D34, refPos0BD5);
    vec3 _t0D36 = prim +0017<$[3]> (_t0D26, _t0D35);
    real _t0D37 = _t0D36[0];
    real _t0D38 = -0.e0;
    bool _t0D39 = prim >0080 (_t0D37, _t0D38);
    real _t0D3A = 0.1e-8;
    real _t0D3B = 0.1e-8;
    real _t0D3C = 0.1e-8;
    vec3 _t0D3D = [_t0D3A, _t0D3B, _t0D3C];
    real _t0D3E = 0.e0;
    real _t0D3F = 0.e0;
    real _t0D40 = 0.1e1;
    real _t0D41 = 0.e0;
    vec3 _t0D42 = [_t0D3F, _t0D40, _t0D41];
    real _t0D43 = prim •00CE<$[3]; $[3]; $[]> (_t0D42, refPos0BD5);
    real _t0D44 = prim -0026<$[]> (_t0D3E, _t0D43);
    real _t0D45 = 0.e0;
    real _t0D46 = 0.1e1;
    real _t0D47 = 0.e0;
    vec3 _t0D48 = [_t0D45, _t0D46, _t0D47];
    real _t0D49 = prim •00CE<$[3]; $[3]; $[]> (_t0D48, dPos0BD6);
    real _t0D4A = prim /0055 (_t0D44, _t0D49);
    vec3 _t0D4B = prim *0038<$[3]> (dPos0BD6, _t0D4A);
    vec3 _t0D4C = prim +0017<$[3]> (_t0D4B, refPos0BD5);
    vec3 _t0D4D = prim +0017<$[3]> (_t0D3D, _t0D4C);
    real _t0D4E = _t0D4D[1];
    real _t0D4F = -0.e0;
    bool _t0D50 = prim >0080 (_t0D4E, _t0D4F);
    real _t0D51 = 0.1e-8;
    real _t0D52 = 0.1e-8;
    real _t0D53 = 0.1e-8;
    vec3 _t0D54 = [_t0D51, _t0D52, _t0D53];
    real _t0D55 = 0.e0;
    real _t0D56 = 0.e0;
    real _t0D57 = 0.1e1;
    real _t0D58 = 0.e0;
    vec3 _t0D59 = [_t0D56, _t0D57, _t0D58];
    real _t0D5A = prim •00CE<$[3]; $[3]; $[]> (_t0D59, refPos0BD5);
    real _t0D5B = prim -0026<$[]> (_t0D55, _t0D5A);
    real _t0D5C = 0.e0;
    real _t0D5D = 0.1e1;
    real _t0D5E = 0.e0;
    vec3 _t0D5F = [_t0D5C, _t0D5D, _t0D5E];
    real _t0D60 = prim •00CE<$[3]; $[3]; $[]> (_t0D5F, dPos0BD6);
    real _t0D61 = prim /0055 (_t0D5B, _t0D60);
    vec3 _t0D62 = prim *0038<$[3]> (dPos0BD6, _t0D61);
    vec3 _t0D63 = prim +0017<$[3]> (_t0D62, refPos0BD5);
    vec3 _t0D64 = prim +0017<$[3]> (_t0D54, _t0D63);
    real _t0D65 = _t0D64[2];
    real _t0D66 = -0.e0;
    bool _t0D67 = prim >0080 (_t0D65, _t0D66);
    bool _t0D68 = prim $and01C4 (_t0D50, _t0D67);
    bool _t0D69 = prim $and01C4 (_t0D39, _t0D68);
    bool _t0D6A = prim $and01C4 (_t0D22, _t0D69);
    if _t0D6A {
      real _t0D6B = 0.e0;
      real _t0D6C = 0.e0;
      real _t0D6D = 0.1e1;
      real _t0D6E = 0.e0;
      vec3 _t0D6F = [_t0D6C, _t0D6D, _t0D6E];
      real _t0D70 = prim •00CE<$[3]; $[3]; $[]> (_t0D6F, refPos0BD5);
      real _t0D71 = prim -0026<$[]> (_t0D6B, _t0D70);
      real _t0D72 = 0.e0;
      real _t0D73 = 0.1e1;
      real _t0D74 = 0.e0;
      vec3 _t0D75 = [_t0D72, _t0D73, _t0D74];
      real _t0D76 = prim •00CE<$[3]; $[3]; $[]> (_t0D75, dPos0BD6);
      time0BD7 = prim /0055 (_t0D71, _t0D76);
      face0BD8 = 2;
    }
  }
  real _t0D77 = 0.e0;
  real _t0D78 = 0.e0;
  real _t0D79 = 0.e0;
  real _t0D7A = 0.1e1;
  vec3 _t0D7B = [_t0D78, _t0D79, _t0D7A];
  real _t0D7C = prim •00CE<$[3]; $[3]; $[]> (_t0D7B, refPos0BD5);
  real _t0D7D = prim -0026<$[]> (_t0D77, _t0D7C);
  real _t0D7E = 0.e0;
  real _t0D7F = 0.e0;
  real _t0D80 = 0.1e1;
  vec3 _t0D81 = [_t0D7E, _t0D7F, _t0D80];
  real _t0D82 = prim •00CE<$[3]; $[3]; $[]> (_t0D81, dPos0BD6);
  real _t0D83 = prim /0055 (_t0D7D, _t0D82);
  real _t0D84 = -0.e0;
  bool _t0D85 = prim >0080 (_t0D83, _t0D84);
  real _t0D86 = 0.e0;
  real _t0D87 = 0.e0;
  real _t0D88 = 0.e0;
  real _t0D89 = 0.1e1;
  vec3 _t0D8A = [_t0D87, _t0D88, _t0D89];
  real _t0D8B = prim •00CE<$[3]; $[3]; $[]> (_t0D8A, refPos0BD5);
  real _t0D8C = prim -0026<$[]> (_t0D86, _t0D8B);
  real _t0D8D = 0.e0;
  real _t0D8E = 0.e0;
  real _t0D8F = 0.1e1;
  vec3 _t0D90 = [_t0D8D, _t0D8E, _t0D8F];
  real _t0D91 = prim •00CE<$[3]; $[3]; $[]> (_t0D90, dPos0BD6);
  real _t0D92 = prim /0055 (_t0D8C, _t0D91);
  bool _t0D93 = prim >0080 (time0BD7, _t0D92);
  bool _t0D94 = prim $and01C4 (_t0D85, _t0D93);
  if _t0D94 {
    real _t0D95 = 0.1e1;
    real _t0D96 = 0.1e-8;
    real _t0D97 = prim +0017<$[]> (_t0D95, _t0D96);
    real _t0D98 = 0.1e1;
    real _t0D99 = 0.1e1;
    real _t0D9A = 0.1e1;
    vec3 _t0D9B = [_t0D98, _t0D99, _t0D9A];
    real _t0D9C = 0.e0;
    real _t0D9D = 0.e0;
    real _t0D9E = 0.e0;
    real _t0D9F = 0.1e1;
    vec3 _t0DA0 = [_t0D9D, _t0D9E, _t0D9F];
    real _t0DA1 = prim •00CE<$[3]; $[3]; $[]> (_t0DA0, refPos0BD5);
    real _t0DA2 = prim -0026<$[]> (_t0D9C, _t0DA1);
    real _t0DA3 = 0.e0;
    real _t0DA4 = 0.e0;
    real _t0DA5 = 0.1e1;
    vec3 _t0DA6 = [_t0DA3, _t0DA4, _t0DA5];
    real _t0DA7 = prim •00CE<$[3]; $[3]; $[]> (_t0DA6, dPos0BD6);
    real _t0DA8 = prim /0055 (_t0DA2, _t0DA7);
    vec3 _t0DA9 = prim *0038<$[3]> (dPos0BD6, _t0DA8);
    vec3 _t0DAA = prim +0017<$[3]> (_t0DA9, refPos0BD5);
    real _t0DAB = prim •00CE<$[3]; $[3]; $[]> (_t0D9B, _t0DAA);
    bool _t0DAC = prim >0080 (_t0D97, _t0DAB);
    real _t0DAD = 0.1e-8;
    real _t0DAE = 0.1e-8;
    real _t0DAF = 0.1e-8;
    vec3 _t0DB0 = [_t0DAD, _t0DAE, _t0DAF];
    real _t0DB1 = 0.e0;
    real _t0DB2 = 0.e0;
    real _t0DB3 = 0.e0;
    real _t0DB4 = 0.1e1;
    vec3 _t0DB5 = [_t0DB2, _t0DB3, _t0DB4];
    real _t0DB6 = prim •00CE<$[3]; $[3]; $[]> (_t0DB5, refPos0BD5);
    real _t0DB7 = prim -0026<$[]> (_t0DB1, _t0DB6);
    real _t0DB8 = 0.e0;
    real _t0DB9 = 0.e0;
    real _t0DBA = 0.1e1;
    vec3 _t0DBB = [_t0DB8, _t0DB9, _t0DBA];
    real _t0DBC = prim •00CE<$[3]; $[3]; $[]> (_t0DBB, dPos0BD6);
    real _t0DBD = prim /0055 (_t0DB7, _t0DBC);
    vec3 _t0DBE = prim *0038<$[3]> (dPos0BD6, _t0DBD);
    vec3 _t0DBF = prim +0017<$[3]> (_t0DBE, refPos0BD5);
    vec3 _t0DC0 = prim +0017<$[3]> (_t0DB0, _t0DBF);
    real _t0DC1 = _t0DC0[0];
    real _t0DC2 = -0.e0;
    bool _t0DC3 = prim >0080 (_t0DC1, _t0DC2);
    real _t0DC4 = 0.1e-8;
    real _t0DC5 = 0.1e-8;
    real _t0DC6 = 0.1e-8;
    vec3 _t0DC7 = [_t0DC4, _t0DC5, _t0DC6];
    real _t0DC8 = 0.e0;
    real _t0DC9 = 0.e0;
    real _t0DCA = 0.e0;
    real _t0DCB = 0.1e1;
    vec3 _t0DCC = [_t0DC9, _t0DCA, _t0DCB];
    real _t0DCD = prim •00CE<$[3]; $[3]; $[]> (_t0DCC, refPos0BD5);
    real _t0DCE = prim -0026<$[]> (_t0DC8, _t0DCD);
    real _t0DCF = 0.e0;
    real _t0DD0 = 0.e0;
    real _t0DD1 = 0.1e1;
    vec3 _t0DD2 = [_t0DCF, _t0DD0, _t0DD1];
    real _t0DD3 = prim •00CE<$[3]; $[3]; $[]> (_t0DD2, dPos0BD6);
    real _t0DD4 = prim /0055 (_t0DCE, _t0DD3);
    vec3 _t0DD5 = prim *0038<$[3]> (dPos0BD6, _t0DD4);
    vec3 _t0DD6 = prim +0017<$[3]> (_t0DD5, refPos0BD5);
    vec3 _t0DD7 = prim +0017<$[3]> (_t0DC7, _t0DD6);
    real _t0DD8 = _t0DD7[1];
    real _t0DD9 = -0.e0;
    bool _t0DDA = prim >0080 (_t0DD8, _t0DD9);
    real _t0DDB = 0.1e-8;
    real _t0DDC = 0.1e-8;
    real _t0DDD = 0.1e-8;
    vec3 _t0DDE = [_t0DDB, _t0DDC, _t0DDD];
    real _t0DDF = 0.e0;
    real _t0DE0 = 0.e0;
    real _t0DE1 = 0.e0;
    real _t0DE2 = 0.1e1;
    vec3 _t0DE3 = [_t0DE0, _t0DE1, _t0DE2];
    real _t0DE4 = prim •00CE<$[3]; $[3]; $[]> (_t0DE3, refPos0BD5);
    real _t0DE5 = prim -0026<$[]> (_t0DDF, _t0DE4);
    real _t0DE6 = 0.e0;
    real _t0DE7 = 0.e0;
    real _t0DE8 = 0.1e1;
    vec3 _t0DE9 = [_t0DE6, _t0DE7, _t0DE8];
    real _t0DEA = prim •00CE<$[3]; $[3]; $[]> (_t0DE9, dPos0BD6);
    real _t0DEB = prim /0055 (_t0DE5, _t0DEA);
    vec3 _t0DEC = prim *0038<$[3]> (dPos0BD6, _t0DEB);
    vec3 _t0DED = prim +0017<$[3]> (_t0DEC, refPos0BD5);
    vec3 _t0DEE = prim +0017<$[3]> (_t0DDE, _t0DED);
    real _t0DEF = _t0DEE[2];
    real _t0DF0 = -0.e0;
    bool _t0DF1 = prim >0080 (_t0DEF, _t0DF0);
    bool _t0DF2 = prim $and01C4 (_t0DDA, _t0DF1);
    bool _t0DF3 = prim $and01C4 (_t0DC3, _t0DF2);
    bool _t0DF4 = prim $and01C4 (_t0DAC, _t0DF3);
    if _t0DF4 {
      real _t0DF5 = 0.e0;
      real _t0DF6 = 0.e0;
      real _t0DF7 = 0.e0;
      real _t0DF8 = 0.1e1;
      vec3 _t0DF9 = [_t0DF6, _t0DF7, _t0DF8];
      real _t0DFA = prim •00CE<$[3]; $[3]; $[]> (_t0DF9, refPos0BD5);
      real _t0DFB = prim -0026<$[]> (_t0DF5, _t0DFA);
      real _t0DFC = 0.e0;
      real _t0DFD = 0.e0;
      real _t0DFE = 0.1e1;
      vec3 _t0DFF = [_t0DFC, _t0DFD, _t0DFE];
      real _t0E00 = prim •00CE<$[3]; $[3]; $[]> (_t0DFF, dPos0BD6);
      time0BD7 = prim /0055 (_t0DFB, _t0E00);
      face0BD8 = 3;
    }
  }
  int _t0E01 = -1;
  bool _t0E02 = prim !=0086 (face0BD8, _t0E01);
  if _t0E02 {
    real _t0E03 = (real)face0BD8;
    vec2 _t0E04 = [time0BD7, _t0E03];
    return _t0E04;
  } else {
    real _t0E05 = -0.1e1;
    real _t0E06 = -0.1e1;
    vec2 _t0E07 = [_t0E05, _t0E06];
    return _t0E07;
  }
}
function vec2#0 _exit0E08 (vec3 refPos0BD5, vec3 dPos0BD6)
{
  real time0E09 = +inf;
  int face0E0A = -1;
  real _t0E0B = 0.57735026919e0;
  real _t0E0C = 0.57735026919e0;
  real _t0E0D = -0.57735026919e0;
  real _t0E0E = 0.57735026919e0;
  vec3 _t0E0F = [_t0E0C, _t0E0D, _t0E0E];
  real _t0E10 = prim •00CE<$[3]; $[3]; $[]> (_t0E0F, refPos0BD5);
  real _t0E11 = prim -0026<$[]> (_t0E0B, _t0E10);
  real _t0E12 = 0.57735026919e0;
  real _t0E13 = -0.57735026919e0;
  real _t0E14 = 0.57735026919e0;
  vec3 _t0E15 = [_t0E12, _t0E13, _t0E14];
  real _t0E16 = prim •00CE<$[3]; $[3]; $[]> (_t0E15, dPos0BD6);
  real _t0E17 = prim /0055 (_t0E11, _t0E16);
  real _t0E18 = -0.e0;
  bool _t0E19 = prim >0080 (_t0E17, _t0E18);
  real _t0E1A = 0.57735026919e0;
  real _t0E1B = 0.57735026919e0;
  real _t0E1C = -0.57735026919e0;
  real _t0E1D = 0.57735026919e0;
  vec3 _t0E1E = [_t0E1B, _t0E1C, _t0E1D];
  real _t0E1F = prim •00CE<$[3]; $[3]; $[]> (_t0E1E, refPos0BD5);
  real _t0E20 = prim -0026<$[]> (_t0E1A, _t0E1F);
  real _t0E21 = 0.57735026919e0;
  real _t0E22 = -0.57735026919e0;
  real _t0E23 = 0.57735026919e0;
  vec3 _t0E24 = [_t0E21, _t0E22, _t0E23];
  real _t0E25 = prim •00CE<$[3]; $[3]; $[]> (_t0E24, dPos0BD6);
  real _t0E26 = prim /0055 (_t0E20, _t0E25);
  bool _t0E27 = prim >0080 (time0E09, _t0E26);
  bool _t0E28 = prim $and01C4 (_t0E19, _t0E27);
  if _t0E28 {
    real _t0E29 = 0.57735026919e0;
    real _t0E2A = 0.57735026919e0;
    real _t0E2B = -0.57735026919e0;
    real _t0E2C = 0.57735026919e0;
    vec3 _t0E2D = [_t0E2A, _t0E2B, _t0E2C];
    real _t0E2E = prim •00CE<$[3]; $[3]; $[]> (_t0E2D, refPos0BD5);
    real _t0E2F = prim -0026<$[]> (_t0E29, _t0E2E);
    real _t0E30 = 0.57735026919e0;
    real _t0E31 = -0.57735026919e0;
    real _t0E32 = 0.57735026919e0;
    vec3 _t0E33 = [_t0E30, _t0E31, _t0E32];
    real _t0E34 = prim •00CE<$[3]; $[3]; $[]> (_t0E33, dPos0BD6);
    time0E09 = prim /0055 (_t0E2F, _t0E34);
    face0E0A = 0;
  }
  real _t0E35 = 0.e0;
  real _t0E36 = 0.1e1;
  real _t0E37 = 0.e0;
  real _t0E38 = 0.e0;
  vec3 _t0E39 = [_t0E36, _t0E37, _t0E38];
  real _t0E3A = prim •00CE<$[3]; $[3]; $[]> (_t0E39, refPos0BD5);
  real _t0E3B = prim -0026<$[]> (_t0E35, _t0E3A);
  real _t0E3C = 0.1e1;
  real _t0E3D = 0.e0;
  real _t0E3E = 0.e0;
  vec3 _t0E3F = [_t0E3C, _t0E3D, _t0E3E];
  real _t0E40 = prim •00CE<$[3]; $[3]; $[]> (_t0E3F, dPos0BD6);
  real _t0E41 = prim /0055 (_t0E3B, _t0E40);
  real _t0E42 = -0.e0;
  bool _t0E43 = prim >0080 (_t0E41, _t0E42);
  real _t0E44 = 0.e0;
  real _t0E45 = 0.1e1;
  real _t0E46 = 0.e0;
  real _t0E47 = 0.e0;
  vec3 _t0E48 = [_t0E45, _t0E46, _t0E47];
  real _t0E49 = prim •00CE<$[3]; $[3]; $[]> (_t0E48, refPos0BD5);
  real _t0E4A = prim -0026<$[]> (_t0E44, _t0E49);
  real _t0E4B = 0.1e1;
  real _t0E4C = 0.e0;
  real _t0E4D = 0.e0;
  vec3 _t0E4E = [_t0E4B, _t0E4C, _t0E4D];
  real _t0E4F = prim •00CE<$[3]; $[3]; $[]> (_t0E4E, dPos0BD6);
  real _t0E50 = prim /0055 (_t0E4A, _t0E4F);
  bool _t0E51 = prim >0080 (time0E09, _t0E50);
  bool _t0E52 = prim $and01C4 (_t0E43, _t0E51);
  if _t0E52 {
    real _t0E53 = 0.e0;
    real _t0E54 = 0.1e1;
    real _t0E55 = 0.e0;
    real _t0E56 = 0.e0;
    vec3 _t0E57 = [_t0E54, _t0E55, _t0E56];
    real _t0E58 = prim •00CE<$[3]; $[3]; $[]> (_t0E57, refPos0BD5);
    real _t0E59 = prim -0026<$[]> (_t0E53, _t0E58);
    real _t0E5A = 0.1e1;
    real _t0E5B = 0.e0;
    real _t0E5C = 0.e0;
    vec3 _t0E5D = [_t0E5A, _t0E5B, _t0E5C];
    real _t0E5E = prim •00CE<$[3]; $[3]; $[]> (_t0E5D, dPos0BD6);
    time0E09 = prim /0055 (_t0E59, _t0E5E);
    face0E0A = 1;
  }
  real _t0E5F = 0.e0;
  real _t0E60 = 0.e0;
  real _t0E61 = 0.1e1;
  real _t0E62 = 0.e0;
  vec3 _t0E63 = [_t0E60, _t0E61, _t0E62];
  real _t0E64 = prim •00CE<$[3]; $[3]; $[]> (_t0E63, refPos0BD5);
  real _t0E65 = prim -0026<$[]> (_t0E5F, _t0E64);
  real _t0E66 = 0.e0;
  real _t0E67 = 0.1e1;
  real _t0E68 = 0.e0;
  vec3 _t0E69 = [_t0E66, _t0E67, _t0E68];
  real _t0E6A = prim •00CE<$[3]; $[3]; $[]> (_t0E69, dPos0BD6);
  real _t0E6B = prim /0055 (_t0E65, _t0E6A);
  real _t0E6C = -0.e0;
  bool _t0E6D = prim >0080 (_t0E6B, _t0E6C);
  real _t0E6E = 0.e0;
  real _t0E6F = 0.e0;
  real _t0E70 = 0.1e1;
  real _t0E71 = 0.e0;
  vec3 _t0E72 = [_t0E6F, _t0E70, _t0E71];
  real _t0E73 = prim •00CE<$[3]; $[3]; $[]> (_t0E72, refPos0BD5);
  real _t0E74 = prim -0026<$[]> (_t0E6E, _t0E73);
  real _t0E75 = 0.e0;
  real _t0E76 = 0.1e1;
  real _t0E77 = 0.e0;
  vec3 _t0E78 = [_t0E75, _t0E76, _t0E77];
  real _t0E79 = prim •00CE<$[3]; $[3]; $[]> (_t0E78, dPos0BD6);
  real _t0E7A = prim /0055 (_t0E74, _t0E79);
  bool _t0E7B = prim >0080 (time0E09, _t0E7A);
  bool _t0E7C = prim $and01C4 (_t0E6D, _t0E7B);
  if _t0E7C {
    real _t0E7D = 0.e0;
    real _t0E7E = 0.e0;
    real _t0E7F = 0.1e1;
    real _t0E80 = 0.e0;
    vec3 _t0E81 = [_t0E7E, _t0E7F, _t0E80];
    real _t0E82 = prim •00CE<$[3]; $[3]; $[]> (_t0E81, refPos0BD5);
    real _t0E83 = prim -0026<$[]> (_t0E7D, _t0E82);
    real _t0E84 = 0.e0;
    real _t0E85 = 0.1e1;
    real _t0E86 = 0.e0;
    vec3 _t0E87 = [_t0E84, _t0E85, _t0E86];
    real _t0E88 = prim •00CE<$[3]; $[3]; $[]> (_t0E87, dPos0BD6);
    time0E09 = prim /0055 (_t0E83, _t0E88);
    face0E0A = 2;
  }
  real _t0E89 = 0.e0;
  real _t0E8A = 0.e0;
  real _t0E8B = 0.e0;
  real _t0E8C = 0.1e1;
  vec3 _t0E8D = [_t0E8A, _t0E8B, _t0E8C];
  real _t0E8E = prim •00CE<$[3]; $[3]; $[]> (_t0E8D, refPos0BD5);
  real _t0E8F = prim -0026<$[]> (_t0E89, _t0E8E);
  real _t0E90 = 0.e0;
  real _t0E91 = 0.e0;
  real _t0E92 = 0.1e1;
  vec3 _t0E93 = [_t0E90, _t0E91, _t0E92];
  real _t0E94 = prim •00CE<$[3]; $[3]; $[]> (_t0E93, dPos0BD6);
  real _t0E95 = prim /0055 (_t0E8F, _t0E94);
  real _t0E96 = -0.e0;
  bool _t0E97 = prim >0080 (_t0E95, _t0E96);
  real _t0E98 = 0.e0;
  real _t0E99 = 0.e0;
  real _t0E9A = 0.e0;
  real _t0E9B = 0.1e1;
  vec3 _t0E9C = [_t0E99, _t0E9A, _t0E9B];
  real _t0E9D = prim •00CE<$[3]; $[3]; $[]> (_t0E9C, refPos0BD5);
  real _t0E9E = prim -0026<$[]> (_t0E98, _t0E9D);
  real _t0E9F = 0.e0;
  real _t0EA0 = 0.e0;
  real _t0EA1 = 0.1e1;
  vec3 _t0EA2 = [_t0E9F, _t0EA0, _t0EA1];
  real _t0EA3 = prim •00CE<$[3]; $[3]; $[]> (_t0EA2, dPos0BD6);
  real _t0EA4 = prim /0055 (_t0E9E, _t0EA3);
  bool _t0EA5 = prim >0080 (time0E09, _t0EA4);
  bool _t0EA6 = prim $and01C4 (_t0E97, _t0EA5);
  if _t0EA6 {
    real _t0EA7 = 0.e0;
    real _t0EA8 = 0.e0;
    real _t0EA9 = 0.e0;
    real _t0EAA = 0.1e1;
    vec3 _t0EAB = [_t0EA8, _t0EA9, _t0EAA];
    real _t0EAC = prim •00CE<$[3]; $[3]; $[]> (_t0EAB, refPos0BD5);
    real _t0EAD = prim -0026<$[]> (_t0EA7, _t0EAC);
    real _t0EAE = 0.e0;
    real _t0EAF = 0.e0;
    real _t0EB0 = 0.1e1;
    vec3 _t0EB1 = [_t0EAE, _t0EAF, _t0EB0];
    real _t0EB2 = prim •00CE<$[3]; $[3]; $[]> (_t0EB1, dPos0BD6);
    time0E09 = prim /0055 (_t0EAD, _t0EB2);
    face0E0A = 3;
  }
  int _t0EB3 = -1;
  bool _t0EB4 = prim !=0086 (face0E0A, _t0EB3);
  if _t0EB4 {
    real _t0EB5 = (real)face0E0A;
    vec2 _t0EB6 = [time0E09, _t0EB5];
    return _t0EB6;
  } else {
    real _t0EB7 = -0.1e1;
    real _t0EB8 = -0.1e1;
    vec2 _t0EB9 = [_t0EB7, _t0EB8];
    return _t0EB9;
  }
}
function Femdata: Mesh#0 domain0EBA (Femdata: Space arg00EBB)
{
  Femdata: Mesh _t0EBC = extractFem(arg00EBB, Mesh);
  return _t0EBC;
}
function Femdata: Space#0 space0EBD (Femdata: FemFunc arg00EBE)
{
  Femdata: Space _t0EBF = extractFem(arg00EBE, Space);
  return _t0EBF;
}
function Femdata: FuncCell#0 funcCell0EC0 (Femdata: FemFunc arg00EC1, Femdata: MeshCell arg10EC2)
{
  int _t0EC3 = extractFemItem(CellIndex(MeshCell), int, arg10EC2);
  Femdata: FuncCell _t0EC4 = loadFem(FuncCell, arg00EC1, _t0EC3);
  return _t0EC4;
}
globalInit {
  int _t033A = 0;
  int _t0338 = 1;
  int _t033C = extractFemItem(NumCell(Mesh), int, cube0336);
  int _t033B = prim -0024 (_t033C, _t0338);
  int[] _t033F = prim $range01C3 (_t033A, _t033B);
  Femdata: MeshCell[] _t0340 = {};
  foreach _t033E in _t033F {
    Femdata: MeshCell _t0341 = loadFem(MeshCell, cube0336, _t033E);
    _t0340 = prim @0010<Femdata: MeshCell> (_t0340, _t0341);
  }
  0cell_cube0337 = _t0340;
  space0342 = loadFem(Space, 0space0342_intermedateGlobal0343, cube0336);
  data0344 = loadFem(FemFunc, 0data0344_intermedateGlobal0345, space0342);
  Femdata: Space _t0EC5 = extractFem(data0344, Space);
  Femdata: Space _t0EC6 = extractFem(data0344, Space);
  Femdata: Mesh _t0EC7 = extractFem(_t0EC6, Mesh);
  field(3)[] _t0EC8 = femField(data0344,_t0EC7,field(3)[],refField,findPos0350 );
  Femdata: Space _t0EC9 = extractFem(data0344, Space);
  Femdata: Mesh _t0ECA = extractFem(_t0EC9, Mesh);
  Femdata: Space _t0ECB = extractFem(data0344, Space);
  Femdata: Mesh _t0ECC = extractFem(_t0ECB, Mesh);
  Femdata: Space _t0ECD = extractFem(data0344, Space);
  Femdata: Mesh _t0ECE = extractFem(_t0ECD, Mesh);
  field(3)[3] _t0ECF = femField(_t0ECA,_t0ECE,field(3)[3],InvTransform,findPos0350 );
  F0ED0 = prim ∘0164<#∞; %3; $[]; %3; $[3]> (_t0EC8, _t0ECF);
}
strand gg (vec3 i0ED1) {
  output vec3 target0ED2;
  output vec3 translated0ED3;
  output bool valid0ED4;
  output Femdata: MeshCell c0ED5;
  output real result0ED7;
  output vec3 gradResult0ED8;
  output vec3 gradResultp0ED9;
  {
    target0ED2 = i0ED1;
    translated0ED3 = prim $nan01BD<$[3]> ();
    valid0ED4 = false;
    int _t0ED6 = 0;
    c0ED5 = prim $dynsub01C2<Femdata: MeshCell> (0cell_cube0337, _t0ED6);
    result0ED7 = prim $nan01BD<$[]> ();
    gradResult0ED8 = prim $nan01BD<$[3]> ();
    gradResultp0ED9 = prim $nan01BD<$[3]> ();
  }
  update
  {
    string _t0EDA = "Running on ";
    string _t0EDB = "\n";
    print (_t0EDA, target0ED2, _t0EDB);
    Femdata: MeshPos p0EDC = func findPos0350 (cube0336, target0ED2);
    valid0ED4 = extractFemItem(Valid(MeshPos), bool, p0EDC);
    if valid0ED4 {
      Femdata: Mesh _t0EDD = extractFem(p0EDC, Mesh);
      int _t0EDE = extractFemItem(CellIndex(MeshPos), int, p0EDC);
      c0ED5 = loadFem(MeshCell, _t0EDD, _t0EDE);
      translated0ED3 = extractFemItem(RefPos(MeshPos), vec3, p0EDC);
      result0ED7 = prim @00A5<#∞; %3; $[]> (F0ED0, target0ED2);
      field(3)[3] _t0EDF = prim ∇00A8<#∞; %3> (F0ED0);
      gradResult0ED8 = prim @00A5<#∞; %3; $[3]> (_t0EDF, target0ED2);
    } else {
      string _t0EE0 = "Warning: Invalid!\n";
      print (_t0EE0);
    }
    stabilize;
  }
}
collection {
  foreach i0EE1 in points0335 {
    new gg (i0EE1);
  }
}
/* Program end */
/* Simplified Program (after after contraction (1)) start */
properties: GlobalInit,HasInputs,HasGlobals,ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
input vec3[] points0335;
input FemData:Mesh cube0336;
input FemData:Space 0space0342_intermedateGlobal0343;
input FemData:FemFunc 0data0344_intermedateGlobal0345;
constants { }
global Femdata: MeshCell[] 0cell_cube0337;
global Femdata: Space space0342;
global Femdata: FemFunc data0344;
global field(3)[] F0ED0;
function bool#0 !=0346 (Femdata: MeshCell cell10347, Femdata: MeshCell cell10348)
{
  int _t0349 = extractFemItem(CellIndex(Mesh), int, cell10347);
  int _t034A = extractFemItem(CellIndex(Mesh), int, cell10348);
  bool _t034B = prim !=0086 (_t0349, _t034A);
  return _t034B;
}
function bool#0 ==034C (Femdata: MeshCell cell10347, Femdata: MeshCell cell10348)
{
  int _t034D = extractFemItem(CellIndex(Mesh), int, cell10347);
  int _t034E = extractFemItem(CellIndex(Mesh), int, cell10348);
  bool _t034F = prim ==0082 (_t034D, _t034E);
  return _t034F;
}
function Femdata: MeshPos#3 findPos0350 (Femdata: Mesh mesh0351, vec3 pos0352)
{
  real _t0353 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t0354 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t0355 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  xn0356 = [_t0353, _t0354, _t0355];
  newtonInt0357 = 0;
  cellInt0358 = extractFemItem(StartCell(Mesh), int, mesh0351);
  int _t0359 = extractFemItem(NumCell(Mesh), int, mesh0351);
  int _t035A = 1;
  numCell035B = prim -0024 (_t0359, _t035A);
  yayCells035C = extractFemItem2(NearbyCell(File=spat.in)(Mesh), vec3, mesh0351, pos0352 : vec3);
  foreach cellItter035D in yayCells035C {
    cellInt0358 = cellItter035D;
    field(3)[3] _t035E = femField(mesh0351,cellInt0358,field(3)[3],Transform,);
    field(3)[3,3] _t035F = prim ∇⊗00AD<#∞; %3; $[]; %3> (_t035E);
    field(3)[3,3] _t0360 = prim inv015E<#∞; %3> (_t035F);
    real _t0361 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    real _t0362 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    real _t0363 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    vec3 _t0364 = [_t0361, _t0362, _t0363];
    A0365 = prim @00A5<#∞; %3; $[3,3]> (_t0360, _t0364);
    int _t0366 = 0;
    int _t0367 = 16;
    int[] _t0368 = prim $range01C3 (_t0366, _t0367);
    foreach newtonItter0397 in _t0368 {
      field(3)[3] _t0369 = femField(mesh0351,cellInt0358,field(3)[3],Transform,);
      field(3)[3] _t036A = prim -002E<#∞; %3; $[3]> (_t0369, pos0352);
      field(3)[3] _t036B = prim •00D4<#∞; %3; $[3,3]; $[3]; $[3]> (A0365, _t036A);
      delta036C = prim @00A5<#∞; %3; $[3]> (_t036B, xn0356);
      xn0356 = prim -0026<$[3]> (xn0356, delta036C);
      real _t036D = 0.1e-7;
      real _t036E = 0.1e-7;
      real _t036F = prim *0034 (_t036D, _t036E);
      real _t0370 = prim •00CE<$[3]; $[3]; $[]> (delta036C, delta036C);
      bool _t0371 = prim >=007E (_t036F, _t0370);
      if _t0371 {
        real _t0372 = 0.1e1;
        real _t0373 = 0.1e-8;
        real _t0374 = prim +0017<$[]> (_t0372, _t0373);
        real _t0375 = 0.1e1;
        real _t0376 = 0.1e1;
        real _t0377 = 0.1e1;
        vec3 _t0378 = [_t0375, _t0376, _t0377];
        real _t0379 = prim •00CE<$[3]; $[3]; $[]> (_t0378, xn0356);
        bool _t037A = prim >0080 (_t0374, _t0379);
        real _t037B = 0.1e-8;
        real _t037C = 0.1e-8;
        real _t037D = 0.1e-8;
        vec3 _t037E = [_t037B, _t037C, _t037D];
        vec3 _t037F = prim +0017<$[3]> (_t037E, xn0356);
        real _t0380 = _t037F[0];
        real _t0381 = -0.e0;
        bool _t0382 = prim >0080 (_t0380, _t0381);
        real _t0383 = 0.1e-8;
        real _t0384 = 0.1e-8;
        real _t0385 = 0.1e-8;
        vec3 _t0386 = [_t0383, _t0384, _t0385];
        vec3 _t0387 = prim +0017<$[3]> (_t0386, xn0356);
        real _t0388 = _t0387[1];
        real _t0389 = -0.e0;
        bool _t038A = prim >0080 (_t0388, _t0389);
        real _t038B = 0.1e-8;
        real _t038C = 0.1e-8;
        real _t038D = 0.1e-8;
        vec3 _t038E = [_t038B, _t038C, _t038D];
        vec3 _t038F = prim +0017<$[3]> (_t038E, xn0356);
        real _t0390 = _t038F[2];
        real _t0391 = -0.e0;
        bool _t0392 = prim >0080 (_t0390, _t0391);
        bool _t0393 = prim $and01C4 (_t038A, _t0392);
        bool _t0394 = prim $and01C4 (_t0382, _t0393);
        bool _t0395 = prim $and01C4 (_t037A, _t0394);
        if _t0395 {
          Femdata: MeshPos _t0396 = extractFemItemN((mesh0351, cellInt0358, xn0356, pos0352),AllBuild(MeshPos),);
          return _t0396;
        }
      }
    }
  }
  string _t0398 = "Bad end 2";
  string _t0399 = "\n";
  print (_t0398, _t0399);
  Femdata: MeshPos _t039A = extractFemItemN((mesh0351),InvalidBuild(MeshPos),);
  return _t039A;
}
function Femdata: RefCell#0 refcell039B (Femdata: Mesh arg0039C)
{
  Femdata: RefCell _t039D = extractFemItem(RefCell(Mesh), Femdata: RefCell, arg0039C);
  return _t039D;
}
function Femdata: MeshCell[]#0 cells039E (Femdata: Mesh arg0039F)
{
  Femdata: MeshCell[] _t03A0 = extractFemItem(Cells(Mesh), Femdata: MeshCell[], arg0039F);
  return _t03A0;
}
function Femdata: MeshCell[]#0 cells03A1 (Femdata: Mesh arg0039F)
{
  int _t03A2 = 0;
  int _t03A3 = extractFemItem(NumCell(Mesh), int, arg0039F);
  int[] _t03A4 = prim $range01C3 (_t03A2, _t03A3);
  Femdata: MeshCell[] accum03A7 = {};
  foreach i03A5 in _t03A4 {
    Femdata: MeshCell _t03A6 = loadFem(MeshCell, arg0039F, i03A5);
    accum03A7 = prim @0010<Femdata: MeshCell> (accum03A7, _t03A6);
  }
  return accum03A7;
}
function int#0 numCell03A8 (Femdata: Mesh arg0039C)
{
  int _t03A9 = extractFemItem(NumCell(Mesh), int, arg0039C);
  return _t03A9;
}
function tensor[3,3,3,3]#0 mesh_t_transform_303AA (vec3 pos03AB, int cell03AC, Femdata: Mesh mesh03AD)
{
  field(3)[3] _t03AE = femField(mesh03AD,cell03AC,field(3)[3],Transform,);
  field(3)[3,3] _t03AF = prim ∇⊗00AD<#∞; %3; $[]; %3> (_t03AE);
  field(3)[3,3,3] _t03B0 = prim ∇⊗00AD<#∞; %3; $[3]; %3> (_t03AF);
  field(3)[3,3,3,3] _t03B1 = prim ∇⊗00AD<#∞; %3; $[3,3]; %3> (_t03B0);
  tensor[3,3,3,3] _t03B2 = prim @00A5<#∞; %3; $[3,3,3,3]> (_t03B1, pos03AB);
  return _t03B2;
}
function tensor[3,3,3]#0 mesh_t_transform_203B3 (vec3 pos03AB, int cell03AC, Femdata: Mesh mesh03AD)
{
  field(3)[3] _t03B4 = femField(mesh03AD,cell03AC,field(3)[3],Transform,);
  field(3)[3,3] _t03B5 = prim ∇⊗00AD<#∞; %3; $[]; %3> (_t03B4);
  field(3)[3,3,3] _t03B6 = prim ∇⊗00AD<#∞; %3; $[3]; %3> (_t03B5);
  tensor[3,3,3] _t03B7 = prim @00A5<#∞; %3; $[3,3,3]> (_t03B6, pos03AB);
  return _t03B7;
}
function tensor[3,3]#0 mesh_t_transform_103B8 (vec3 pos03AB, int cell03AC, Femdata: Mesh mesh03AD)
{
  field(3)[3] _t03B9 = femField(mesh03AD,cell03AC,field(3)[3],Transform,);
  field(3)[3,3] _t03BA = prim ∇⊗00AD<#∞; %3; $[]; %3> (_t03B9);
  tensor[3,3] _t03BB = prim @00A5<#∞; %3; $[3,3]> (_t03BA, pos03AB);
  return _t03BB;
}
function vec3#2 mesh_t_transform_003BC (vec3 pos03AB, int cell03AC, Femdata: Mesh mesh03AD)
{
  field(3)[3] _t03BD = femField(mesh03AD,cell03AC,field(3)[3],Transform,);
  vec3 _t03BE = prim @00A5<#∞; %3; $[3]> (_t03BD, pos03AB);
  return _t03BE;
}
function Femdata: MeshPos#0 _mesh_t_newtonInverse03BF (vec3 pos03C0, int cellInt03C1, Femdata: Mesh mesh03C2)
{
  real _t03C3 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t03C4 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t03C5 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  xn03C6 = [_t03C3, _t03C4, _t03C5];
  field(3)[3] _t03C7 = femField(mesh03C2,cellInt03C1,field(3)[3],Transform,);
  field(3)[3,3] _t03C8 = prim ∇⊗00AD<#∞; %3; $[]; %3> (_t03C7);
  field(3)[3,3] _t03C9 = prim inv015E<#∞; %3> (_t03C8);
  real _t03CA = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t03CB = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t03CC = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  vec3 _t03CD = [_t03CA, _t03CB, _t03CC];
  A03CE = prim @00A5<#∞; %3; $[3,3]> (_t03C9, _t03CD);
  int _t03CF = 0;
  int _t03D0 = 16;
  int[] _t03D1 = prim $range01C3 (_t03CF, _t03D0);
  foreach itter0401 in _t03D1 {
    field(3)[3] _t03D2 = femField(mesh03C2,cellInt03C1,field(3)[3],Transform,);
    field(3)[3] _t03D3 = prim -002E<#∞; %3; $[3]> (_t03D2, pos03C0);
    field(3)[3] _t03D4 = prim •00D4<#∞; %3; $[3,3]; $[3]; $[3]> (A03CE, _t03D3);
    delta03D5 = prim @00A5<#∞; %3; $[3]> (_t03D4, xn03C6);
    xn03C6 = prim -0026<$[3]> (xn03C6, delta03D5);
    real _t03D6 = 0.1e-7;
    real _t03D7 = 0.1e-7;
    real _t03D8 = prim *0034 (_t03D6, _t03D7);
    real _t03D9 = prim •00CE<$[3]; $[3]; $[]> (delta03D5, delta03D5);
    bool _t03DA = prim >=007E (_t03D8, _t03D9);
    if _t03DA {
      real _t03DB = 0.1e1;
      real _t03DC = 0.1e-8;
      real _t03DD = prim +0017<$[]> (_t03DB, _t03DC);
      real _t03DE = 0.1e1;
      real _t03DF = 0.1e1;
      real _t03E0 = 0.1e1;
      vec3 _t03E1 = [_t03DE, _t03DF, _t03E0];
      real _t03E2 = prim •00CE<$[3]; $[3]; $[]> (_t03E1, xn03C6);
      bool _t03E3 = prim >0080 (_t03DD, _t03E2);
      real _t03E4 = 0.1e-8;
      real _t03E5 = 0.1e-8;
      real _t03E6 = 0.1e-8;
      vec3 _t03E7 = [_t03E4, _t03E5, _t03E6];
      vec3 _t03E8 = prim +0017<$[3]> (_t03E7, xn03C6);
      real _t03E9 = _t03E8[0];
      real _t03EA = -0.e0;
      bool _t03EB = prim >0080 (_t03E9, _t03EA);
      real _t03EC = 0.1e-8;
      real _t03ED = 0.1e-8;
      real _t03EE = 0.1e-8;
      vec3 _t03EF = [_t03EC, _t03ED, _t03EE];
      vec3 _t03F0 = prim +0017<$[3]> (_t03EF, xn03C6);
      real _t03F1 = _t03F0[1];
      real _t03F2 = -0.e0;
      bool _t03F3 = prim >0080 (_t03F1, _t03F2);
      real _t03F4 = 0.1e-8;
      real _t03F5 = 0.1e-8;
      real _t03F6 = 0.1e-8;
      vec3 _t03F7 = [_t03F4, _t03F5, _t03F6];
      vec3 _t03F8 = prim +0017<$[3]> (_t03F7, xn03C6);
      real _t03F9 = _t03F8[2];
      real _t03FA = -0.e0;
      bool _t03FB = prim >0080 (_t03F9, _t03FA);
      bool _t03FC = prim $and01C4 (_t03F3, _t03FB);
      bool _t03FD = prim $and01C4 (_t03EB, _t03FC);
      bool _t03FE = prim $and01C4 (_t03E3, _t03FD);
      if _t03FE {
        Femdata: MeshPos _t03FF = extractFemItemN((mesh03C2, cellInt03C1, xn03C6, pos03C0),AllBuild(MeshPos),);
        return _t03FF;
      } else {
        Femdata: MeshPos _t0400 = extractFemItemN((mesh03C2),InvalidBuild(MeshPos),);
        return _t0400;
      }
    }
  }
  Femdata: MeshPos _t0402 = extractFemItemN((mesh03C2),InvalidBuild(MeshPos),);
  return _t0402;
}
function Femdata: MeshPos#0 _mesh_pos_mesh_t_build_world_pos0403 (Femdata: MeshPos pos0404)
{
  bool _t0405 = extractFemItem(WorldTest(MeshPos), bool, pos0404);
  if _t0405 {
    vec3 _t0406 = extractFemItem(RefPos(MeshPos), vec3, pos0404);
    int _t0407 = extractFemItem(CellIndex(MeshPos), int, pos0404);
    Femdata: Mesh _t0408 = extractFem(pos0404, Mesh);
    vec3 _t0409 = func mesh_t_transform_003BC (_t0406, _t0407, _t0408);
    Femdata: MeshPos _t040A = extractFemItemN((pos0404, _t0409),NewWorld(MeshPos),);
    return _t040A;
  } else {
    return pos0404;
  }
}
function vec3#0 worldPos040B (Femdata: MeshPos pos0404)
{
  vec3 _t040C = extractFemItem(RefPos(MeshPos), vec3, pos0404);
  int _t040D = extractFemItem(CellIndex(MeshPos), int, pos0404);
  Femdata: Mesh _t040E = extractFem(pos0404, Mesh);
  vec3 _t040F = func mesh_t_transform_003BC (_t040C, _t040D, _t040E);
  return _t040F;
}
function Femdata: MeshPos#0 $exitPos0410 (Femdata: Mesh mesh0411, int cellId0412, vec3 refPos0413, vec3 dPos0414, real[2] time0415)
{
  int _t0416 = -1;
  real _t0417 = time0415[1];
  int _t0418 = prim $r2i01B7 (_t0417);
  int[2] _t041A = func nextCell40419 (_t0418, cellId0412, mesh0411);
  int _t041B = 0;
  int _t041C = prim $sub01C0<int; %2> (_t041A, _t041B);
  bool _t041D = prim !=0086 (_t0416, _t041C);
  if _t041D {
    real _t041E = time0415[1];
    int _t041F = prim $r2i01B7 (_t041E);
    int[2] _t0420 = func nextCell40419 (_t041F, cellId0412, mesh0411);
    int _t0421 = 0;
    int _t0422 = prim $sub01C0<int; %2> (_t0420, _t0421);
    real _t0423 = 0.1e1;
    real _t0424 = 0.e0;
    real _t0425 = 0.e0;
    real _t0426 = 0.e0;
    vec4 _t0427 = [_t0423, _t0424, _t0425, _t0426];
    real _t0428 = 0.e0;
    real _t0429 = 0.1e1;
    real _t042A = 0.e0;
    real _t042B = 0.e0;
    vec4 _t042C = [_t0428, _t0429, _t042A, _t042B];
    real _t042D = 0.e0;
    real _t042E = 0.e0;
    real _t042F = 0.1e1;
    real _t0430 = 0.e0;
    vec4 _t0431 = [_t042D, _t042E, _t042F, _t0430];
    real _t0432 = 0.222044604925e-15;
    real _t0433 = 0.e0;
    real _t0434 = 0.44408920985e-15;
    real _t0435 = 0.1e1;
    vec4 _t0436 = [_t0432, _t0433, _t0434, _t0435];
    tensor[4,4] _t0437 = [_t0427, _t042C, _t0431, _t0436];
    real _t0438 = 0.173205080757e1;
    real _t0439 = 0.173205080757e1;
    real _t043A = 0.173205080757e1;
    real _t043B = -0.173205080757e1;
    vec4 _t043C = [_t0438, _t0439, _t043A, _t043B];
    real _t043D = 0.1e1;
    real _t043E = 0.2e1;
    real _t043F = 0.1e1;
    real _t0440 = -0.1e1;
    vec4 _t0441 = [_t043D, _t043E, _t043F, _t0440];
    real _t0442 = -0.1e1;
    real _t0443 = -0.1e1;
    real _t0444 = -0.192296268638e-15;
    real _t0445 = 0.1e1;
    vec4 _t0446 = [_t0442, _t0443, _t0444, _t0445];
    real _t0447 = 0.222044604925e-15;
    real _t0448 = 0.e0;
    real _t0449 = 0.44408920985e-15;
    real _t044A = 0.1e1;
    vec4 _t044B = [_t0447, _t0448, _t0449, _t044A];
    tensor[4,4] _t044C = [_t043C, _t0441, _t0446, _t044B];
    real _t044D = 0.1e1;
    real _t044E = 0.2e1;
    real _t044F = 0.1e1;
    real _t0450 = -0.1e1;
    vec4 _t0451 = [_t044D, _t044E, _t044F, _t0450];
    real _t0452 = 0.173205080757e1;
    real _t0453 = 0.173205080757e1;
    real _t0454 = 0.173205080757e1;
    real _t0455 = -0.173205080757e1;
    vec4 _t0456 = [_t0452, _t0453, _t0454, _t0455];
    real _t0457 = -0.1e1;
    real _t0458 = -0.1e1;
    real _t0459 = -0.192296268638e-15;
    real _t045A = 0.1e1;
    vec4 _t045B = [_t0457, _t0458, _t0459, _t045A];
    real _t045C = 0.222044604925e-15;
    real _t045D = 0.e0;
    real _t045E = 0.44408920985e-15;
    real _t045F = 0.1e1;
    vec4 _t0460 = [_t045C, _t045D, _t045E, _t045F];
    tensor[4,4] _t0461 = [_t0451, _t0456, _t045B, _t0460];
    real _t0462 = 0.1e1;
    real _t0463 = 0.2e1;
    real _t0464 = 0.1e1;
    real _t0465 = -0.1e1;
    vec4 _t0466 = [_t0462, _t0463, _t0464, _t0465];
    real _t0467 = -0.1e1;
    real _t0468 = -0.1e1;
    real _t0469 = -0.192296268638e-15;
    real _t046A = 0.1e1;
    vec4 _t046B = [_t0467, _t0468, _t0469, _t046A];
    real _t046C = 0.173205080757e1;
    real _t046D = 0.173205080757e1;
    real _t046E = 0.173205080757e1;
    real _t046F = -0.173205080757e1;
    vec4 _t0470 = [_t046C, _t046D, _t046E, _t046F];
    real _t0471 = 0.222044604925e-15;
    real _t0472 = 0.e0;
    real _t0473 = 0.44408920985e-15;
    real _t0474 = 0.1e1;
    vec4 _t0475 = [_t0471, _t0472, _t0473, _t0474];
    tensor[4,4] _t0476 = [_t0466, _t046B, _t0470, _t0475];
    tensor[4,4][4] _t0477 = {_t0437, _t044C, _t0461, _t0476};
    real _t0478 = 0.57735026919e0;
    real _t0479 = -0.1e1;
    real _t047A = -0.1e1;
    real _t047B = 0.1e1;
    vec4 _t047C = [_t0478, _t0479, _t047A, _t047B];
    real _t047D = -0.57735026919e0;
    real _t047E = 0.1e1;
    real _t047F = 0.e0;
    real _t0480 = 0.e0;
    vec4 _t0481 = [_t047D, _t047E, _t047F, _t0480];
    real _t0482 = 0.57735026919e0;
    real _t0483 = 0.e0;
    real _t0484 = 0.1e1;
    real _t0485 = 0.e0;
    vec4 _t0486 = [_t0482, _t0483, _t0484, _t0485];
    real _t0487 = 0.e0;
    real _t0488 = 0.e0;
    real _t0489 = 0.e0;
    real _t048A = 0.1e1;
    vec4 _t048B = [_t0487, _t0488, _t0489, _t048A];
    tensor[4,4] _t048C = [_t047C, _t0481, _t0486, _t048B];
    real _t048D = 0.1e1;
    real _t048E = 0.e0;
    real _t048F = 0.e0;
    real _t0490 = 0.e0;
    vec4 _t0491 = [_t048D, _t048E, _t048F, _t0490];
    real _t0492 = 0.e0;
    real _t0493 = 0.1e1;
    real _t0494 = 0.e0;
    real _t0495 = 0.e0;
    vec4 _t0496 = [_t0492, _t0493, _t0494, _t0495];
    real _t0497 = 0.e0;
    real _t0498 = 0.e0;
    real _t0499 = 0.1e1;
    real _t049A = 0.e0;
    vec4 _t049B = [_t0497, _t0498, _t0499, _t049A];
    real _t049C = 0.e0;
    real _t049D = 0.e0;
    real _t049E = 0.e0;
    real _t049F = 0.1e1;
    vec4 _t04A0 = [_t049C, _t049D, _t049E, _t049F];
    tensor[4,4] _t04A1 = [_t0491, _t0496, _t049B, _t04A0];
    real _t04A2 = 0.e0;
    real _t04A3 = 0.1e1;
    real _t04A4 = 0.e0;
    real _t04A5 = 0.e0;
    vec4 _t04A6 = [_t04A2, _t04A3, _t04A4, _t04A5];
    real _t04A7 = 0.1e1;
    real _t04A8 = 0.e0;
    real _t04A9 = 0.e0;
    real _t04AA = 0.e0;
    vec4 _t04AB = [_t04A7, _t04A8, _t04A9, _t04AA];
    real _t04AC = 0.e0;
    real _t04AD = 0.e0;
    real _t04AE = 0.1e1;
    real _t04AF = 0.e0;
    vec4 _t04B0 = [_t04AC, _t04AD, _t04AE, _t04AF];
    real _t04B1 = 0.e0;
    real _t04B2 = 0.e0;
    real _t04B3 = 0.e0;
    real _t04B4 = 0.1e1;
    vec4 _t04B5 = [_t04B1, _t04B2, _t04B3, _t04B4];
    tensor[4,4] _t04B6 = [_t04A6, _t04AB, _t04B0, _t04B5];
    real _t04B7 = 0.e0;
    real _t04B8 = 0.1e1;
    real _t04B9 = 0.e0;
    real _t04BA = 0.e0;
    vec4 _t04BB = [_t04B7, _t04B8, _t04B9, _t04BA];
    real _t04BC = 0.e0;
    real _t04BD = 0.e0;
    real _t04BE = 0.1e1;
    real _t04BF = 0.e0;
    vec4 _t04C0 = [_t04BC, _t04BD, _t04BE, _t04BF];
    real _t04C1 = 0.1e1;
    real _t04C2 = 0.e0;
    real _t04C3 = 0.e0;
    real _t04C4 = 0.e0;
    vec4 _t04C5 = [_t04C1, _t04C2, _t04C3, _t04C4];
    real _t04C6 = 0.e0;
    real _t04C7 = 0.e0;
    real _t04C8 = 0.e0;
    real _t04C9 = 0.1e1;
    vec4 _t04CA = [_t04C6, _t04C7, _t04C8, _t04C9];
    tensor[4,4] _t04CB = [_t04BB, _t04C0, _t04C5, _t04CA];
    tensor[4,4][4] _t04CC = {_t048C, _t04A1, _t04B6, _t04CB};
    real _t04CD = -0.1e1;
    real _t04CE = 0.57735026919e0;
    real _t04CF = -0.1e1;
    real _t04D0 = 0.1e1;
    vec4 _t04D1 = [_t04CD, _t04CE, _t04CF, _t04D0];
    real _t04D2 = 0.1e1;
    real _t04D3 = -0.57735026919e0;
    real _t04D4 = 0.e0;
    real _t04D5 = 0.e0;
    vec4 _t04D6 = [_t04D2, _t04D3, _t04D4, _t04D5];
    real _t04D7 = 0.e0;
    real _t04D8 = 0.57735026919e0;
    real _t04D9 = 0.1e1;
    real _t04DA = 0.e0;
    vec4 _t04DB = [_t04D7, _t04D8, _t04D9, _t04DA];
    real _t04DC = 0.e0;
    real _t04DD = 0.e0;
    real _t04DE = 0.e0;
    real _t04DF = 0.1e1;
    vec4 _t04E0 = [_t04DC, _t04DD, _t04DE, _t04DF];
    tensor[4,4] _t04E1 = [_t04D1, _t04D6, _t04DB, _t04E0];
    real _t04E2 = 0.e0;
    real _t04E3 = 0.1e1;
    real _t04E4 = 0.e0;
    real _t04E5 = 0.e0;
    vec4 _t04E6 = [_t04E2, _t04E3, _t04E4, _t04E5];
    real _t04E7 = 0.1e1;
    real _t04E8 = 0.e0;
    real _t04E9 = 0.e0;
    real _t04EA = 0.e0;
    vec4 _t04EB = [_t04E7, _t04E8, _t04E9, _t04EA];
    real _t04EC = 0.e0;
    real _t04ED = 0.e0;
    real _t04EE = 0.1e1;
    real _t04EF = 0.e0;
    vec4 _t04F0 = [_t04EC, _t04ED, _t04EE, _t04EF];
    real _t04F1 = 0.e0;
    real _t04F2 = 0.e0;
    real _t04F3 = 0.e0;
    real _t04F4 = 0.1e1;
    vec4 _t04F5 = [_t04F1, _t04F2, _t04F3, _t04F4];
    tensor[4,4] _t04F6 = [_t04E6, _t04EB, _t04F0, _t04F5];
    real _t04F7 = 0.1e1;
    real _t04F8 = 0.e0;
    real _t04F9 = 0.e0;
    real _t04FA = 0.e0;
    vec4 _t04FB = [_t04F7, _t04F8, _t04F9, _t04FA];
    real _t04FC = 0.e0;
    real _t04FD = 0.1e1;
    real _t04FE = 0.e0;
    real _t04FF = 0.e0;
    vec4 _t0500 = [_t04FC, _t04FD, _t04FE, _t04FF];
    real _t0501 = 0.e0;
    real _t0502 = 0.e0;
    real _t0503 = 0.1e1;
    real _t0504 = 0.e0;
    vec4 _t0505 = [_t0501, _t0502, _t0503, _t0504];
    real _t0506 = 0.e0;
    real _t0507 = 0.e0;
    real _t0508 = 0.e0;
    real _t0509 = 0.1e1;
    vec4 _t050A = [_t0506, _t0507, _t0508, _t0509];
    tensor[4,4] _t050B = [_t04FB, _t0500, _t0505, _t050A];
    real _t050C = 0.1e1;
    real _t050D = 0.e0;
    real _t050E = 0.e0;
    real _t050F = 0.e0;
    vec4 _t0510 = [_t050C, _t050D, _t050E, _t050F];
    real _t0511 = 0.e0;
    real _t0512 = 0.e0;
    real _t0513 = 0.1e1;
    real _t0514 = 0.e0;
    vec4 _t0515 = [_t0511, _t0512, _t0513, _t0514];
    real _t0516 = 0.e0;
    real _t0517 = 0.1e1;
    real _t0518 = 0.e0;
    real _t0519 = 0.e0;
    vec4 _t051A = [_t0516, _t0517, _t0518, _t0519];
    real _t051B = 0.e0;
    real _t051C = 0.e0;
    real _t051D = 0.e0;
    real _t051E = 0.1e1;
    vec4 _t051F = [_t051B, _t051C, _t051D, _t051E];
    tensor[4,4] _t0520 = [_t0510, _t0515, _t051A, _t051F];
    tensor[4,4][4] _t0521 = {_t04E1, _t04F6, _t050B, _t0520};
    real _t0522 = -0.1e1;
    real _t0523 = -0.1e1;
    real _t0524 = 0.57735026919e0;
    real _t0525 = 0.1e1;
    vec4 _t0526 = [_t0522, _t0523, _t0524, _t0525];
    real _t0527 = 0.1e1;
    real _t0528 = 0.e0;
    real _t0529 = -0.57735026919e0;
    real _t052A = 0.e0;
    vec4 _t052B = [_t0527, _t0528, _t0529, _t052A];
    real _t052C = 0.e0;
    real _t052D = 0.1e1;
    real _t052E = 0.57735026919e0;
    real _t052F = 0.e0;
    vec4 _t0530 = [_t052C, _t052D, _t052E, _t052F];
    real _t0531 = 0.e0;
    real _t0532 = 0.e0;
    real _t0533 = 0.e0;
    real _t0534 = 0.1e1;
    vec4 _t0535 = [_t0531, _t0532, _t0533, _t0534];
    tensor[4,4] _t0536 = [_t0526, _t052B, _t0530, _t0535];
    real _t0537 = 0.e0;
    real _t0538 = 0.e0;
    real _t0539 = 0.1e1;
    real _t053A = 0.e0;
    vec4 _t053B = [_t0537, _t0538, _t0539, _t053A];
    real _t053C = 0.1e1;
    real _t053D = 0.e0;
    real _t053E = 0.e0;
    real _t053F = 0.e0;
    vec4 _t0540 = [_t053C, _t053D, _t053E, _t053F];
    real _t0541 = 0.e0;
    real _t0542 = 0.1e1;
    real _t0543 = 0.e0;
    real _t0544 = 0.e0;
    vec4 _t0545 = [_t0541, _t0542, _t0543, _t0544];
    real _t0546 = 0.e0;
    real _t0547 = 0.e0;
    real _t0548 = 0.e0;
    real _t0549 = 0.1e1;
    vec4 _t054A = [_t0546, _t0547, _t0548, _t0549];
    tensor[4,4] _t054B = [_t053B, _t0540, _t0545, _t054A];
    real _t054C = 0.1e1;
    real _t054D = 0.e0;
    real _t054E = 0.e0;
    real _t054F = 0.e0;
    vec4 _t0550 = [_t054C, _t054D, _t054E, _t054F];
    real _t0551 = 0.e0;
    real _t0552 = 0.e0;
    real _t0553 = 0.1e1;
    real _t0554 = 0.e0;
    vec4 _t0555 = [_t0551, _t0552, _t0553, _t0554];
    real _t0556 = 0.e0;
    real _t0557 = 0.1e1;
    real _t0558 = 0.e0;
    real _t0559 = 0.e0;
    vec4 _t055A = [_t0556, _t0557, _t0558, _t0559];
    real _t055B = 0.e0;
    real _t055C = 0.e0;
    real _t055D = 0.e0;
    real _t055E = 0.1e1;
    vec4 _t055F = [_t055B, _t055C, _t055D, _t055E];
    tensor[4,4] _t0560 = [_t0550, _t0555, _t055A, _t055F];
    real _t0561 = 0.1e1;
    real _t0562 = 0.e0;
    real _t0563 = 0.e0;
    real _t0564 = 0.e0;
    vec4 _t0565 = [_t0561, _t0562, _t0563, _t0564];
    real _t0566 = 0.e0;
    real _t0567 = 0.1e1;
    real _t0568 = 0.e0;
    real _t0569 = 0.e0;
    vec4 _t056A = [_t0566, _t0567, _t0568, _t0569];
    real _t056B = 0.e0;
    real _t056C = 0.e0;
    real _t056D = 0.1e1;
    real _t056E = 0.e0;
    vec4 _t056F = [_t056B, _t056C, _t056D, _t056E];
    real _t0570 = 0.e0;
    real _t0571 = 0.e0;
    real _t0572 = 0.e0;
    real _t0573 = 0.1e1;
    vec4 _t0574 = [_t0570, _t0571, _t0572, _t0573];
    tensor[4,4] _t0575 = [_t0565, _t056A, _t056F, _t0574];
    tensor[4,4][4] _t0576 = {_t0536, _t054B, _t0560, _t0575};
    tensor[4,4][4][4] _t0577 = {_t0477, _t04CC, _t0521, _t0576};
    real _t0578 = time0415[1];
    int _t0579 = prim $r2i01B7 (_t0578);
    tensor[4,4][4] _t057A = prim $sub01C0<tensor[4,4][4]; %4> (_t0577, _t0579);
    real _t057B = time0415[1];
    int _t057C = prim $r2i01B7 (_t057B);
    int[2] _t057D = func nextCell40419 (_t057C, cellId0412, mesh0411);
    int _t057E = 1;
    int _t057F = prim $sub01C0<int; %2> (_t057D, _t057E);
    tensor[4,4] _t0580 = prim $sub01C0<tensor[4,4]; %4> (_t057A, _t057F);
    real _t0581 = time0415[0];
    vec3 _t0582 = prim *0036<$[3]> (_t0581, dPos0414);
    vec3 _t0583 = prim +0017<$[3]> (_t0582, refPos0413);
    real _t0584 = _t0583[0];
    real _t0585 = time0415[0];
    vec3 _t0586 = prim *0036<$[3]> (_t0585, dPos0414);
    vec3 _t0587 = prim +0017<$[3]> (_t0586, refPos0413);
    real _t0588 = _t0587[1];
    real _t0589 = time0415[0];
    vec3 _t058A = prim *0036<$[3]> (_t0589, dPos0414);
    vec3 _t058B = prim +0017<$[3]> (_t058A, refPos0413);
    real _t058C = _t058B[2];
    real _t058D = 0.1e1;
    vec4 _t058E = [_t0584, _t0588, _t058C, _t058D];
    vec4 _t058F = prim •00CE<$[4,4]; $[4]; $[4]> (_t0580, _t058E);
    real _t0590 = _t058F[0];
    real _t0591 = 0.1e1;
    real _t0592 = 0.e0;
    real _t0593 = 0.e0;
    real _t0594 = 0.e0;
    vec4 _t0595 = [_t0591, _t0592, _t0593, _t0594];
    real _t0596 = 0.e0;
    real _t0597 = 0.1e1;
    real _t0598 = 0.e0;
    real _t0599 = 0.e0;
    vec4 _t059A = [_t0596, _t0597, _t0598, _t0599];
    real _t059B = 0.e0;
    real _t059C = 0.e0;
    real _t059D = 0.1e1;
    real _t059E = 0.e0;
    vec4 _t059F = [_t059B, _t059C, _t059D, _t059E];
    real _t05A0 = 0.222044604925e-15;
    real _t05A1 = 0.e0;
    real _t05A2 = 0.44408920985e-15;
    real _t05A3 = 0.1e1;
    vec4 _t05A4 = [_t05A0, _t05A1, _t05A2, _t05A3];
    tensor[4,4] _t05A5 = [_t0595, _t059A, _t059F, _t05A4];
    real _t05A6 = 0.173205080757e1;
    real _t05A7 = 0.173205080757e1;
    real _t05A8 = 0.173205080757e1;
    real _t05A9 = -0.173205080757e1;
    vec4 _t05AA = [_t05A6, _t05A7, _t05A8, _t05A9];
    real _t05AB = 0.1e1;
    real _t05AC = 0.2e1;
    real _t05AD = 0.1e1;
    real _t05AE = -0.1e1;
    vec4 _t05AF = [_t05AB, _t05AC, _t05AD, _t05AE];
    real _t05B0 = -0.1e1;
    real _t05B1 = -0.1e1;
    real _t05B2 = -0.192296268638e-15;
    real _t05B3 = 0.1e1;
    vec4 _t05B4 = [_t05B0, _t05B1, _t05B2, _t05B3];
    real _t05B5 = 0.222044604925e-15;
    real _t05B6 = 0.e0;
    real _t05B7 = 0.44408920985e-15;
    real _t05B8 = 0.1e1;
    vec4 _t05B9 = [_t05B5, _t05B6, _t05B7, _t05B8];
    tensor[4,4] _t05BA = [_t05AA, _t05AF, _t05B4, _t05B9];
    real _t05BB = 0.1e1;
    real _t05BC = 0.2e1;
    real _t05BD = 0.1e1;
    real _t05BE = -0.1e1;
    vec4 _t05BF = [_t05BB, _t05BC, _t05BD, _t05BE];
    real _t05C0 = 0.173205080757e1;
    real _t05C1 = 0.173205080757e1;
    real _t05C2 = 0.173205080757e1;
    real _t05C3 = -0.173205080757e1;
    vec4 _t05C4 = [_t05C0, _t05C1, _t05C2, _t05C3];
    real _t05C5 = -0.1e1;
    real _t05C6 = -0.1e1;
    real _t05C7 = -0.192296268638e-15;
    real _t05C8 = 0.1e1;
    vec4 _t05C9 = [_t05C5, _t05C6, _t05C7, _t05C8];
    real _t05CA = 0.222044604925e-15;
    real _t05CB = 0.e0;
    real _t05CC = 0.44408920985e-15;
    real _t05CD = 0.1e1;
    vec4 _t05CE = [_t05CA, _t05CB, _t05CC, _t05CD];
    tensor[4,4] _t05CF = [_t05BF, _t05C4, _t05C9, _t05CE];
    real _t05D0 = 0.1e1;
    real _t05D1 = 0.2e1;
    real _t05D2 = 0.1e1;
    real _t05D3 = -0.1e1;
    vec4 _t05D4 = [_t05D0, _t05D1, _t05D2, _t05D3];
    real _t05D5 = -0.1e1;
    real _t05D6 = -0.1e1;
    real _t05D7 = -0.192296268638e-15;
    real _t05D8 = 0.1e1;
    vec4 _t05D9 = [_t05D5, _t05D6, _t05D7, _t05D8];
    real _t05DA = 0.173205080757e1;
    real _t05DB = 0.173205080757e1;
    real _t05DC = 0.173205080757e1;
    real _t05DD = -0.173205080757e1;
    vec4 _t05DE = [_t05DA, _t05DB, _t05DC, _t05DD];
    real _t05DF = 0.222044604925e-15;
    real _t05E0 = 0.e0;
    real _t05E1 = 0.44408920985e-15;
    real _t05E2 = 0.1e1;
    vec4 _t05E3 = [_t05DF, _t05E0, _t05E1, _t05E2];
    tensor[4,4] _t05E4 = [_t05D4, _t05D9, _t05DE, _t05E3];
    tensor[4,4][4] _t05E5 = {_t05A5, _t05BA, _t05CF, _t05E4};
    real _t05E6 = 0.57735026919e0;
    real _t05E7 = -0.1e1;
    real _t05E8 = -0.1e1;
    real _t05E9 = 0.1e1;
    vec4 _t05EA = [_t05E6, _t05E7, _t05E8, _t05E9];
    real _t05EB = -0.57735026919e0;
    real _t05EC = 0.1e1;
    real _t05ED = 0.e0;
    real _t05EE = 0.e0;
    vec4 _t05EF = [_t05EB, _t05EC, _t05ED, _t05EE];
    real _t05F0 = 0.57735026919e0;
    real _t05F1 = 0.e0;
    real _t05F2 = 0.1e1;
    real _t05F3 = 0.e0;
    vec4 _t05F4 = [_t05F0, _t05F1, _t05F2, _t05F3];
    real _t05F5 = 0.e0;
    real _t05F6 = 0.e0;
    real _t05F7 = 0.e0;
    real _t05F8 = 0.1e1;
    vec4 _t05F9 = [_t05F5, _t05F6, _t05F7, _t05F8];
    tensor[4,4] _t05FA = [_t05EA, _t05EF, _t05F4, _t05F9];
    real _t05FB = 0.1e1;
    real _t05FC = 0.e0;
    real _t05FD = 0.e0;
    real _t05FE = 0.e0;
    vec4 _t05FF = [_t05FB, _t05FC, _t05FD, _t05FE];
    real _t0600 = 0.e0;
    real _t0601 = 0.1e1;
    real _t0602 = 0.e0;
    real _t0603 = 0.e0;
    vec4 _t0604 = [_t0600, _t0601, _t0602, _t0603];
    real _t0605 = 0.e0;
    real _t0606 = 0.e0;
    real _t0607 = 0.1e1;
    real _t0608 = 0.e0;
    vec4 _t0609 = [_t0605, _t0606, _t0607, _t0608];
    real _t060A = 0.e0;
    real _t060B = 0.e0;
    real _t060C = 0.e0;
    real _t060D = 0.1e1;
    vec4 _t060E = [_t060A, _t060B, _t060C, _t060D];
    tensor[4,4] _t060F = [_t05FF, _t0604, _t0609, _t060E];
    real _t0610 = 0.e0;
    real _t0611 = 0.1e1;
    real _t0612 = 0.e0;
    real _t0613 = 0.e0;
    vec4 _t0614 = [_t0610, _t0611, _t0612, _t0613];
    real _t0615 = 0.1e1;
    real _t0616 = 0.e0;
    real _t0617 = 0.e0;
    real _t0618 = 0.e0;
    vec4 _t0619 = [_t0615, _t0616, _t0617, _t0618];
    real _t061A = 0.e0;
    real _t061B = 0.e0;
    real _t061C = 0.1e1;
    real _t061D = 0.e0;
    vec4 _t061E = [_t061A, _t061B, _t061C, _t061D];
    real _t061F = 0.e0;
    real _t0620 = 0.e0;
    real _t0621 = 0.e0;
    real _t0622 = 0.1e1;
    vec4 _t0623 = [_t061F, _t0620, _t0621, _t0622];
    tensor[4,4] _t0624 = [_t0614, _t0619, _t061E, _t0623];
    real _t0625 = 0.e0;
    real _t0626 = 0.1e1;
    real _t0627 = 0.e0;
    real _t0628 = 0.e0;
    vec4 _t0629 = [_t0625, _t0626, _t0627, _t0628];
    real _t062A = 0.e0;
    real _t062B = 0.e0;
    real _t062C = 0.1e1;
    real _t062D = 0.e0;
    vec4 _t062E = [_t062A, _t062B, _t062C, _t062D];
    real _t062F = 0.1e1;
    real _t0630 = 0.e0;
    real _t0631 = 0.e0;
    real _t0632 = 0.e0;
    vec4 _t0633 = [_t062F, _t0630, _t0631, _t0632];
    real _t0634 = 0.e0;
    real _t0635 = 0.e0;
    real _t0636 = 0.e0;
    real _t0637 = 0.1e1;
    vec4 _t0638 = [_t0634, _t0635, _t0636, _t0637];
    tensor[4,4] _t0639 = [_t0629, _t062E, _t0633, _t0638];
    tensor[4,4][4] _t063A = {_t05FA, _t060F, _t0624, _t0639};
    real _t063B = -0.1e1;
    real _t063C = 0.57735026919e0;
    real _t063D = -0.1e1;
    real _t063E = 0.1e1;
    vec4 _t063F = [_t063B, _t063C, _t063D, _t063E];
    real _t0640 = 0.1e1;
    real _t0641 = -0.57735026919e0;
    real _t0642 = 0.e0;
    real _t0643 = 0.e0;
    vec4 _t0644 = [_t0640, _t0641, _t0642, _t0643];
    real _t0645 = 0.e0;
    real _t0646 = 0.57735026919e0;
    real _t0647 = 0.1e1;
    real _t0648 = 0.e0;
    vec4 _t0649 = [_t0645, _t0646, _t0647, _t0648];
    real _t064A = 0.e0;
    real _t064B = 0.e0;
    real _t064C = 0.e0;
    real _t064D = 0.1e1;
    vec4 _t064E = [_t064A, _t064B, _t064C, _t064D];
    tensor[4,4] _t064F = [_t063F, _t0644, _t0649, _t064E];
    real _t0650 = 0.e0;
    real _t0651 = 0.1e1;
    real _t0652 = 0.e0;
    real _t0653 = 0.e0;
    vec4 _t0654 = [_t0650, _t0651, _t0652, _t0653];
    real _t0655 = 0.1e1;
    real _t0656 = 0.e0;
    real _t0657 = 0.e0;
    real _t0658 = 0.e0;
    vec4 _t0659 = [_t0655, _t0656, _t0657, _t0658];
    real _t065A = 0.e0;
    real _t065B = 0.e0;
    real _t065C = 0.1e1;
    real _t065D = 0.e0;
    vec4 _t065E = [_t065A, _t065B, _t065C, _t065D];
    real _t065F = 0.e0;
    real _t0660 = 0.e0;
    real _t0661 = 0.e0;
    real _t0662 = 0.1e1;
    vec4 _t0663 = [_t065F, _t0660, _t0661, _t0662];
    tensor[4,4] _t0664 = [_t0654, _t0659, _t065E, _t0663];
    real _t0665 = 0.1e1;
    real _t0666 = 0.e0;
    real _t0667 = 0.e0;
    real _t0668 = 0.e0;
    vec4 _t0669 = [_t0665, _t0666, _t0667, _t0668];
    real _t066A = 0.e0;
    real _t066B = 0.1e1;
    real _t066C = 0.e0;
    real _t066D = 0.e0;
    vec4 _t066E = [_t066A, _t066B, _t066C, _t066D];
    real _t066F = 0.e0;
    real _t0670 = 0.e0;
    real _t0671 = 0.1e1;
    real _t0672 = 0.e0;
    vec4 _t0673 = [_t066F, _t0670, _t0671, _t0672];
    real _t0674 = 0.e0;
    real _t0675 = 0.e0;
    real _t0676 = 0.e0;
    real _t0677 = 0.1e1;
    vec4 _t0678 = [_t0674, _t0675, _t0676, _t0677];
    tensor[4,4] _t0679 = [_t0669, _t066E, _t0673, _t0678];
    real _t067A = 0.1e1;
    real _t067B = 0.e0;
    real _t067C = 0.e0;
    real _t067D = 0.e0;
    vec4 _t067E = [_t067A, _t067B, _t067C, _t067D];
    real _t067F = 0.e0;
    real _t0680 = 0.e0;
    real _t0681 = 0.1e1;
    real _t0682 = 0.e0;
    vec4 _t0683 = [_t067F, _t0680, _t0681, _t0682];
    real _t0684 = 0.e0;
    real _t0685 = 0.1e1;
    real _t0686 = 0.e0;
    real _t0687 = 0.e0;
    vec4 _t0688 = [_t0684, _t0685, _t0686, _t0687];
    real _t0689 = 0.e0;
    real _t068A = 0.e0;
    real _t068B = 0.e0;
    real _t068C = 0.1e1;
    vec4 _t068D = [_t0689, _t068A, _t068B, _t068C];
    tensor[4,4] _t068E = [_t067E, _t0683, _t0688, _t068D];
    tensor[4,4][4] _t068F = {_t064F, _t0664, _t0679, _t068E};
    real _t0690 = -0.1e1;
    real _t0691 = -0.1e1;
    real _t0692 = 0.57735026919e0;
    real _t0693 = 0.1e1;
    vec4 _t0694 = [_t0690, _t0691, _t0692, _t0693];
    real _t0695 = 0.1e1;
    real _t0696 = 0.e0;
    real _t0697 = -0.57735026919e0;
    real _t0698 = 0.e0;
    vec4 _t0699 = [_t0695, _t0696, _t0697, _t0698];
    real _t069A = 0.e0;
    real _t069B = 0.1e1;
    real _t069C = 0.57735026919e0;
    real _t069D = 0.e0;
    vec4 _t069E = [_t069A, _t069B, _t069C, _t069D];
    real _t069F = 0.e0;
    real _t06A0 = 0.e0;
    real _t06A1 = 0.e0;
    real _t06A2 = 0.1e1;
    vec4 _t06A3 = [_t069F, _t06A0, _t06A1, _t06A2];
    tensor[4,4] _t06A4 = [_t0694, _t0699, _t069E, _t06A3];
    real _t06A5 = 0.e0;
    real _t06A6 = 0.e0;
    real _t06A7 = 0.1e1;
    real _t06A8 = 0.e0;
    vec4 _t06A9 = [_t06A5, _t06A6, _t06A7, _t06A8];
    real _t06AA = 0.1e1;
    real _t06AB = 0.e0;
    real _t06AC = 0.e0;
    real _t06AD = 0.e0;
    vec4 _t06AE = [_t06AA, _t06AB, _t06AC, _t06AD];
    real _t06AF = 0.e0;
    real _t06B0 = 0.1e1;
    real _t06B1 = 0.e0;
    real _t06B2 = 0.e0;
    vec4 _t06B3 = [_t06AF, _t06B0, _t06B1, _t06B2];
    real _t06B4 = 0.e0;
    real _t06B5 = 0.e0;
    real _t06B6 = 0.e0;
    real _t06B7 = 0.1e1;
    vec4 _t06B8 = [_t06B4, _t06B5, _t06B6, _t06B7];
    tensor[4,4] _t06B9 = [_t06A9, _t06AE, _t06B3, _t06B8];
    real _t06BA = 0.1e1;
    real _t06BB = 0.e0;
    real _t06BC = 0.e0;
    real _t06BD = 0.e0;
    vec4 _t06BE = [_t06BA, _t06BB, _t06BC, _t06BD];
    real _t06BF = 0.e0;
    real _t06C0 = 0.e0;
    real _t06C1 = 0.1e1;
    real _t06C2 = 0.e0;
    vec4 _t06C3 = [_t06BF, _t06C0, _t06C1, _t06C2];
    real _t06C4 = 0.e0;
    real _t06C5 = 0.1e1;
    real _t06C6 = 0.e0;
    real _t06C7 = 0.e0;
    vec4 _t06C8 = [_t06C4, _t06C5, _t06C6, _t06C7];
    real _t06C9 = 0.e0;
    real _t06CA = 0.e0;
    real _t06CB = 0.e0;
    real _t06CC = 0.1e1;
    vec4 _t06CD = [_t06C9, _t06CA, _t06CB, _t06CC];
    tensor[4,4] _t06CE = [_t06BE, _t06C3, _t06C8, _t06CD];
    real _t06CF = 0.1e1;
    real _t06D0 = 0.e0;
    real _t06D1 = 0.e0;
    real _t06D2 = 0.e0;
    vec4 _t06D3 = [_t06CF, _t06D0, _t06D1, _t06D2];
    real _t06D4 = 0.e0;
    real _t06D5 = 0.1e1;
    real _t06D6 = 0.e0;
    real _t06D7 = 0.e0;
    vec4 _t06D8 = [_t06D4, _t06D5, _t06D6, _t06D7];
    real _t06D9 = 0.e0;
    real _t06DA = 0.e0;
    real _t06DB = 0.1e1;
    real _t06DC = 0.e0;
    vec4 _t06DD = [_t06D9, _t06DA, _t06DB, _t06DC];
    real _t06DE = 0.e0;
    real _t06DF = 0.e0;
    real _t06E0 = 0.e0;
    real _t06E1 = 0.1e1;
    vec4 _t06E2 = [_t06DE, _t06DF, _t06E0, _t06E1];
    tensor[4,4] _t06E3 = [_t06D3, _t06D8, _t06DD, _t06E2];
    tensor[4,4][4] _t06E4 = {_t06A4, _t06B9, _t06CE, _t06E3};
    tensor[4,4][4][4] _t06E5 = {_t05E5, _t063A, _t068F, _t06E4};
    real _t06E6 = time0415[1];
    int _t06E7 = prim $r2i01B7 (_t06E6);
    tensor[4,4][4] _t06E8 = prim $sub01C0<tensor[4,4][4]; %4> (_t06E5, _t06E7);
    real _t06E9 = time0415[1];
    int _t06EA = prim $r2i01B7 (_t06E9);
    int[2] _t06EB = func nextCell40419 (_t06EA, cellId0412, mesh0411);
    int _t06EC = 1;
    int _t06ED = prim $sub01C0<int; %2> (_t06EB, _t06EC);
    tensor[4,4] _t06EE = prim $sub01C0<tensor[4,4]; %4> (_t06E8, _t06ED);
    real _t06EF = time0415[0];
    vec3 _t06F0 = prim *0036<$[3]> (_t06EF, dPos0414);
    vec3 _t06F1 = prim +0017<$[3]> (_t06F0, refPos0413);
    real _t06F2 = _t06F1[0];
    real _t06F3 = time0415[0];
    vec3 _t06F4 = prim *0036<$[3]> (_t06F3, dPos0414);
    vec3 _t06F5 = prim +0017<$[3]> (_t06F4, refPos0413);
    real _t06F6 = _t06F5[1];
    real _t06F7 = time0415[0];
    vec3 _t06F8 = prim *0036<$[3]> (_t06F7, dPos0414);
    vec3 _t06F9 = prim +0017<$[3]> (_t06F8, refPos0413);
    real _t06FA = _t06F9[2];
    real _t06FB = 0.1e1;
    vec4 _t06FC = [_t06F2, _t06F6, _t06FA, _t06FB];
    vec4 _t06FD = prim •00CE<$[4,4]; $[4]; $[4]> (_t06EE, _t06FC);
    real _t06FE = _t06FD[1];
    real _t06FF = 0.1e1;
    real _t0700 = 0.e0;
    real _t0701 = 0.e0;
    real _t0702 = 0.e0;
    vec4 _t0703 = [_t06FF, _t0700, _t0701, _t0702];
    real _t0704 = 0.e0;
    real _t0705 = 0.1e1;
    real _t0706 = 0.e0;
    real _t0707 = 0.e0;
    vec4 _t0708 = [_t0704, _t0705, _t0706, _t0707];
    real _t0709 = 0.e0;
    real _t070A = 0.e0;
    real _t070B = 0.1e1;
    real _t070C = 0.e0;
    vec4 _t070D = [_t0709, _t070A, _t070B, _t070C];
    real _t070E = 0.222044604925e-15;
    real _t070F = 0.e0;
    real _t0710 = 0.44408920985e-15;
    real _t0711 = 0.1e1;
    vec4 _t0712 = [_t070E, _t070F, _t0710, _t0711];
    tensor[4,4] _t0713 = [_t0703, _t0708, _t070D, _t0712];
    real _t0714 = 0.173205080757e1;
    real _t0715 = 0.173205080757e1;
    real _t0716 = 0.173205080757e1;
    real _t0717 = -0.173205080757e1;
    vec4 _t0718 = [_t0714, _t0715, _t0716, _t0717];
    real _t0719 = 0.1e1;
    real _t071A = 0.2e1;
    real _t071B = 0.1e1;
    real _t071C = -0.1e1;
    vec4 _t071D = [_t0719, _t071A, _t071B, _t071C];
    real _t071E = -0.1e1;
    real _t071F = -0.1e1;
    real _t0720 = -0.192296268638e-15;
    real _t0721 = 0.1e1;
    vec4 _t0722 = [_t071E, _t071F, _t0720, _t0721];
    real _t0723 = 0.222044604925e-15;
    real _t0724 = 0.e0;
    real _t0725 = 0.44408920985e-15;
    real _t0726 = 0.1e1;
    vec4 _t0727 = [_t0723, _t0724, _t0725, _t0726];
    tensor[4,4] _t0728 = [_t0718, _t071D, _t0722, _t0727];
    real _t0729 = 0.1e1;
    real _t072A = 0.2e1;
    real _t072B = 0.1e1;
    real _t072C = -0.1e1;
    vec4 _t072D = [_t0729, _t072A, _t072B, _t072C];
    real _t072E = 0.173205080757e1;
    real _t072F = 0.173205080757e1;
    real _t0730 = 0.173205080757e1;
    real _t0731 = -0.173205080757e1;
    vec4 _t0732 = [_t072E, _t072F, _t0730, _t0731];
    real _t0733 = -0.1e1;
    real _t0734 = -0.1e1;
    real _t0735 = -0.192296268638e-15;
    real _t0736 = 0.1e1;
    vec4 _t0737 = [_t0733, _t0734, _t0735, _t0736];
    real _t0738 = 0.222044604925e-15;
    real _t0739 = 0.e0;
    real _t073A = 0.44408920985e-15;
    real _t073B = 0.1e1;
    vec4 _t073C = [_t0738, _t0739, _t073A, _t073B];
    tensor[4,4] _t073D = [_t072D, _t0732, _t0737, _t073C];
    real _t073E = 0.1e1;
    real _t073F = 0.2e1;
    real _t0740 = 0.1e1;
    real _t0741 = -0.1e1;
    vec4 _t0742 = [_t073E, _t073F, _t0740, _t0741];
    real _t0743 = -0.1e1;
    real _t0744 = -0.1e1;
    real _t0745 = -0.192296268638e-15;
    real _t0746 = 0.1e1;
    vec4 _t0747 = [_t0743, _t0744, _t0745, _t0746];
    real _t0748 = 0.173205080757e1;
    real _t0749 = 0.173205080757e1;
    real _t074A = 0.173205080757e1;
    real _t074B = -0.173205080757e1;
    vec4 _t074C = [_t0748, _t0749, _t074A, _t074B];
    real _t074D = 0.222044604925e-15;
    real _t074E = 0.e0;
    real _t074F = 0.44408920985e-15;
    real _t0750 = 0.1e1;
    vec4 _t0751 = [_t074D, _t074E, _t074F, _t0750];
    tensor[4,4] _t0752 = [_t0742, _t0747, _t074C, _t0751];
    tensor[4,4][4] _t0753 = {_t0713, _t0728, _t073D, _t0752};
    real _t0754 = 0.57735026919e0;
    real _t0755 = -0.1e1;
    real _t0756 = -0.1e1;
    real _t0757 = 0.1e1;
    vec4 _t0758 = [_t0754, _t0755, _t0756, _t0757];
    real _t0759 = -0.57735026919e0;
    real _t075A = 0.1e1;
    real _t075B = 0.e0;
    real _t075C = 0.e0;
    vec4 _t075D = [_t0759, _t075A, _t075B, _t075C];
    real _t075E = 0.57735026919e0;
    real _t075F = 0.e0;
    real _t0760 = 0.1e1;
    real _t0761 = 0.e0;
    vec4 _t0762 = [_t075E, _t075F, _t0760, _t0761];
    real _t0763 = 0.e0;
    real _t0764 = 0.e0;
    real _t0765 = 0.e0;
    real _t0766 = 0.1e1;
    vec4 _t0767 = [_t0763, _t0764, _t0765, _t0766];
    tensor[4,4] _t0768 = [_t0758, _t075D, _t0762, _t0767];
    real _t0769 = 0.1e1;
    real _t076A = 0.e0;
    real _t076B = 0.e0;
    real _t076C = 0.e0;
    vec4 _t076D = [_t0769, _t076A, _t076B, _t076C];
    real _t076E = 0.e0;
    real _t076F = 0.1e1;
    real _t0770 = 0.e0;
    real _t0771 = 0.e0;
    vec4 _t0772 = [_t076E, _t076F, _t0770, _t0771];
    real _t0773 = 0.e0;
    real _t0774 = 0.e0;
    real _t0775 = 0.1e1;
    real _t0776 = 0.e0;
    vec4 _t0777 = [_t0773, _t0774, _t0775, _t0776];
    real _t0778 = 0.e0;
    real _t0779 = 0.e0;
    real _t077A = 0.e0;
    real _t077B = 0.1e1;
    vec4 _t077C = [_t0778, _t0779, _t077A, _t077B];
    tensor[4,4] _t077D = [_t076D, _t0772, _t0777, _t077C];
    real _t077E = 0.e0;
    real _t077F = 0.1e1;
    real _t0780 = 0.e0;
    real _t0781 = 0.e0;
    vec4 _t0782 = [_t077E, _t077F, _t0780, _t0781];
    real _t0783 = 0.1e1;
    real _t0784 = 0.e0;
    real _t0785 = 0.e0;
    real _t0786 = 0.e0;
    vec4 _t0787 = [_t0783, _t0784, _t0785, _t0786];
    real _t0788 = 0.e0;
    real _t0789 = 0.e0;
    real _t078A = 0.1e1;
    real _t078B = 0.e0;
    vec4 _t078C = [_t0788, _t0789, _t078A, _t078B];
    real _t078D = 0.e0;
    real _t078E = 0.e0;
    real _t078F = 0.e0;
    real _t0790 = 0.1e1;
    vec4 _t0791 = [_t078D, _t078E, _t078F, _t0790];
    tensor[4,4] _t0792 = [_t0782, _t0787, _t078C, _t0791];
    real _t0793 = 0.e0;
    real _t0794 = 0.1e1;
    real _t0795 = 0.e0;
    real _t0796 = 0.e0;
    vec4 _t0797 = [_t0793, _t0794, _t0795, _t0796];
    real _t0798 = 0.e0;
    real _t0799 = 0.e0;
    real _t079A = 0.1e1;
    real _t079B = 0.e0;
    vec4 _t079C = [_t0798, _t0799, _t079A, _t079B];
    real _t079D = 0.1e1;
    real _t079E = 0.e0;
    real _t079F = 0.e0;
    real _t07A0 = 0.e0;
    vec4 _t07A1 = [_t079D, _t079E, _t079F, _t07A0];
    real _t07A2 = 0.e0;
    real _t07A3 = 0.e0;
    real _t07A4 = 0.e0;
    real _t07A5 = 0.1e1;
    vec4 _t07A6 = [_t07A2, _t07A3, _t07A4, _t07A5];
    tensor[4,4] _t07A7 = [_t0797, _t079C, _t07A1, _t07A6];
    tensor[4,4][4] _t07A8 = {_t0768, _t077D, _t0792, _t07A7};
    real _t07A9 = -0.1e1;
    real _t07AA = 0.57735026919e0;
    real _t07AB = -0.1e1;
    real _t07AC = 0.1e1;
    vec4 _t07AD = [_t07A9, _t07AA, _t07AB, _t07AC];
    real _t07AE = 0.1e1;
    real _t07AF = -0.57735026919e0;
    real _t07B0 = 0.e0;
    real _t07B1 = 0.e0;
    vec4 _t07B2 = [_t07AE, _t07AF, _t07B0, _t07B1];
    real _t07B3 = 0.e0;
    real _t07B4 = 0.57735026919e0;
    real _t07B5 = 0.1e1;
    real _t07B6 = 0.e0;
    vec4 _t07B7 = [_t07B3, _t07B4, _t07B5, _t07B6];
    real _t07B8 = 0.e0;
    real _t07B9 = 0.e0;
    real _t07BA = 0.e0;
    real _t07BB = 0.1e1;
    vec4 _t07BC = [_t07B8, _t07B9, _t07BA, _t07BB];
    tensor[4,4] _t07BD = [_t07AD, _t07B2, _t07B7, _t07BC];
    real _t07BE = 0.e0;
    real _t07BF = 0.1e1;
    real _t07C0 = 0.e0;
    real _t07C1 = 0.e0;
    vec4 _t07C2 = [_t07BE, _t07BF, _t07C0, _t07C1];
    real _t07C3 = 0.1e1;
    real _t07C4 = 0.e0;
    real _t07C5 = 0.e0;
    real _t07C6 = 0.e0;
    vec4 _t07C7 = [_t07C3, _t07C4, _t07C5, _t07C6];
    real _t07C8 = 0.e0;
    real _t07C9 = 0.e0;
    real _t07CA = 0.1e1;
    real _t07CB = 0.e0;
    vec4 _t07CC = [_t07C8, _t07C9, _t07CA, _t07CB];
    real _t07CD = 0.e0;
    real _t07CE = 0.e0;
    real _t07CF = 0.e0;
    real _t07D0 = 0.1e1;
    vec4 _t07D1 = [_t07CD, _t07CE, _t07CF, _t07D0];
    tensor[4,4] _t07D2 = [_t07C2, _t07C7, _t07CC, _t07D1];
    real _t07D3 = 0.1e1;
    real _t07D4 = 0.e0;
    real _t07D5 = 0.e0;
    real _t07D6 = 0.e0;
    vec4 _t07D7 = [_t07D3, _t07D4, _t07D5, _t07D6];
    real _t07D8 = 0.e0;
    real _t07D9 = 0.1e1;
    real _t07DA = 0.e0;
    real _t07DB = 0.e0;
    vec4 _t07DC = [_t07D8, _t07D9, _t07DA, _t07DB];
    real _t07DD = 0.e0;
    real _t07DE = 0.e0;
    real _t07DF = 0.1e1;
    real _t07E0 = 0.e0;
    vec4 _t07E1 = [_t07DD, _t07DE, _t07DF, _t07E0];
    real _t07E2 = 0.e0;
    real _t07E3 = 0.e0;
    real _t07E4 = 0.e0;
    real _t07E5 = 0.1e1;
    vec4 _t07E6 = [_t07E2, _t07E3, _t07E4, _t07E5];
    tensor[4,4] _t07E7 = [_t07D7, _t07DC, _t07E1, _t07E6];
    real _t07E8 = 0.1e1;
    real _t07E9 = 0.e0;
    real _t07EA = 0.e0;
    real _t07EB = 0.e0;
    vec4 _t07EC = [_t07E8, _t07E9, _t07EA, _t07EB];
    real _t07ED = 0.e0;
    real _t07EE = 0.e0;
    real _t07EF = 0.1e1;
    real _t07F0 = 0.e0;
    vec4 _t07F1 = [_t07ED, _t07EE, _t07EF, _t07F0];
    real _t07F2 = 0.e0;
    real _t07F3 = 0.1e1;
    real _t07F4 = 0.e0;
    real _t07F5 = 0.e0;
    vec4 _t07F6 = [_t07F2, _t07F3, _t07F4, _t07F5];
    real _t07F7 = 0.e0;
    real _t07F8 = 0.e0;
    real _t07F9 = 0.e0;
    real _t07FA = 0.1e1;
    vec4 _t07FB = [_t07F7, _t07F8, _t07F9, _t07FA];
    tensor[4,4] _t07FC = [_t07EC, _t07F1, _t07F6, _t07FB];
    tensor[4,4][4] _t07FD = {_t07BD, _t07D2, _t07E7, _t07FC};
    real _t07FE = -0.1e1;
    real _t07FF = -0.1e1;
    real _t0800 = 0.57735026919e0;
    real _t0801 = 0.1e1;
    vec4 _t0802 = [_t07FE, _t07FF, _t0800, _t0801];
    real _t0803 = 0.1e1;
    real _t0804 = 0.e0;
    real _t0805 = -0.57735026919e0;
    real _t0806 = 0.e0;
    vec4 _t0807 = [_t0803, _t0804, _t0805, _t0806];
    real _t0808 = 0.e0;
    real _t0809 = 0.1e1;
    real _t080A = 0.57735026919e0;
    real _t080B = 0.e0;
    vec4 _t080C = [_t0808, _t0809, _t080A, _t080B];
    real _t080D = 0.e0;
    real _t080E = 0.e0;
    real _t080F = 0.e0;
    real _t0810 = 0.1e1;
    vec4 _t0811 = [_t080D, _t080E, _t080F, _t0810];
    tensor[4,4] _t0812 = [_t0802, _t0807, _t080C, _t0811];
    real _t0813 = 0.e0;
    real _t0814 = 0.e0;
    real _t0815 = 0.1e1;
    real _t0816 = 0.e0;
    vec4 _t0817 = [_t0813, _t0814, _t0815, _t0816];
    real _t0818 = 0.1e1;
    real _t0819 = 0.e0;
    real _t081A = 0.e0;
    real _t081B = 0.e0;
    vec4 _t081C = [_t0818, _t0819, _t081A, _t081B];
    real _t081D = 0.e0;
    real _t081E = 0.1e1;
    real _t081F = 0.e0;
    real _t0820 = 0.e0;
    vec4 _t0821 = [_t081D, _t081E, _t081F, _t0820];
    real _t0822 = 0.e0;
    real _t0823 = 0.e0;
    real _t0824 = 0.e0;
    real _t0825 = 0.1e1;
    vec4 _t0826 = [_t0822, _t0823, _t0824, _t0825];
    tensor[4,4] _t0827 = [_t0817, _t081C, _t0821, _t0826];
    real _t0828 = 0.1e1;
    real _t0829 = 0.e0;
    real _t082A = 0.e0;
    real _t082B = 0.e0;
    vec4 _t082C = [_t0828, _t0829, _t082A, _t082B];
    real _t082D = 0.e0;
    real _t082E = 0.e0;
    real _t082F = 0.1e1;
    real _t0830 = 0.e0;
    vec4 _t0831 = [_t082D, _t082E, _t082F, _t0830];
    real _t0832 = 0.e0;
    real _t0833 = 0.1e1;
    real _t0834 = 0.e0;
    real _t0835 = 0.e0;
    vec4 _t0836 = [_t0832, _t0833, _t0834, _t0835];
    real _t0837 = 0.e0;
    real _t0838 = 0.e0;
    real _t0839 = 0.e0;
    real _t083A = 0.1e1;
    vec4 _t083B = [_t0837, _t0838, _t0839, _t083A];
    tensor[4,4] _t083C = [_t082C, _t0831, _t0836, _t083B];
    real _t083D = 0.1e1;
    real _t083E = 0.e0;
    real _t083F = 0.e0;
    real _t0840 = 0.e0;
    vec4 _t0841 = [_t083D, _t083E, _t083F, _t0840];
    real _t0842 = 0.e0;
    real _t0843 = 0.1e1;
    real _t0844 = 0.e0;
    real _t0845 = 0.e0;
    vec4 _t0846 = [_t0842, _t0843, _t0844, _t0845];
    real _t0847 = 0.e0;
    real _t0848 = 0.e0;
    real _t0849 = 0.1e1;
    real _t084A = 0.e0;
    vec4 _t084B = [_t0847, _t0848, _t0849, _t084A];
    real _t084C = 0.e0;
    real _t084D = 0.e0;
    real _t084E = 0.e0;
    real _t084F = 0.1e1;
    vec4 _t0850 = [_t084C, _t084D, _t084E, _t084F];
    tensor[4,4] _t0851 = [_t0841, _t0846, _t084B, _t0850];
    tensor[4,4][4] _t0852 = {_t0812, _t0827, _t083C, _t0851};
    tensor[4,4][4][4] _t0853 = {_t0753, _t07A8, _t07FD, _t0852};
    real _t0854 = time0415[1];
    int _t0855 = prim $r2i01B7 (_t0854);
    tensor[4,4][4] _t0856 = prim $sub01C0<tensor[4,4][4]; %4> (_t0853, _t0855);
    real _t0857 = time0415[1];
    int _t0858 = prim $r2i01B7 (_t0857);
    int[2] _t0859 = func nextCell40419 (_t0858, cellId0412, mesh0411);
    int _t085A = 1;
    int _t085B = prim $sub01C0<int; %2> (_t0859, _t085A);
    tensor[4,4] _t085C = prim $sub01C0<tensor[4,4]; %4> (_t0856, _t085B);
    real _t085D = time0415[0];
    vec3 _t085E = prim *0036<$[3]> (_t085D, dPos0414);
    vec3 _t085F = prim +0017<$[3]> (_t085E, refPos0413);
    real _t0860 = _t085F[0];
    real _t0861 = time0415[0];
    vec3 _t0862 = prim *0036<$[3]> (_t0861, dPos0414);
    vec3 _t0863 = prim +0017<$[3]> (_t0862, refPos0413);
    real _t0864 = _t0863[1];
    real _t0865 = time0415[0];
    vec3 _t0866 = prim *0036<$[3]> (_t0865, dPos0414);
    vec3 _t0867 = prim +0017<$[3]> (_t0866, refPos0413);
    real _t0868 = _t0867[2];
    real _t0869 = 0.1e1;
    vec4 _t086A = [_t0860, _t0864, _t0868, _t0869];
    vec4 _t086B = prim •00CE<$[4,4]; $[4]; $[4]> (_t085C, _t086A);
    real _t086C = _t086B[2];
    vec3 _t086D = [_t0590, _t06FE, _t086C];
    Femdata: MeshPos _t086E = extractFemItemN((mesh0411, _t0422, _t086D),RefBuild(Mesh),);
    return _t086E;
  } else {
    real _t086F = time0415[0];
    vec3 _t0870 = prim *0036<$[3]> (_t086F, dPos0414);
    vec3 _t0871 = prim +0017<$[3]> (_t0870, refPos0413);
    Femdata: MeshPos _t0872 = extractFemItemN((mesh0411, _t0871),InvalidBuildBoundary(MeshPos),);
    return _t0872;
  }
}
function int[2]#5 nextCell40419 (int faceIdx0873, int cell0874, Femdata: Mesh mesh0875)
{
  int _t0876 = 8;
  int _t0877 = prim *0033 (cell0874, _t0876);
  int _t0878 = 2;
  int _t0879 = prim *0033 (faceIdx0873, _t0878);
  int _t087A = prim +0015 (_t0877, _t0879);
  int[2] _t087B = extractFemItemN((mesh0875, _t087A),CellFaceCell(Mesh),);
  return _t087B;
}
function int[2]#0 $nextCell2087C (int faceIdx0873, int cell0874, Femdata: Mesh mesh0875)
{
  nearbyCells087D = extractFemItem2(CellConnectivity(Mesh), int, mesh0875, cell0874 : int);
  int _t087E = 0;
  int _t087F = 1;
  int _t0880 = 3;
  int[2] _t0881 = {_t087F, _t0880};
  int _t0882 = 3;
  int _t0883 = 3;
  int[2] _t0884 = {_t0882, _t0883};
  int _t0885 = 9;
  int _t0886 = 3;
  int[2] _t0887 = {_t0885, _t0886};
  int _t0888 = 27;
  int _t0889 = 3;
  int[2] _t088A = {_t0888, _t0889};
  int[2][4] _t088B = {_t0881, _t0884, _t0887, _t088A};
  int[2] _t088C = prim $sub01C0<int[2]; %4> (_t088B, faceIdx0873);
  int _t088D = 1;
  int _t088E = prim $sub01C0<int; %2> (_t088C, _t088D);
  int[] _t088F = prim $range01C3 (_t087E, _t088E);
  int[] accum08B0 = {};
  foreach i08AD in _t088F {
    int _t0890 = 1;
    int _t0891 = 2;
    int _t0892 = 3;
    int _t0893 = 0;
    int _t0894 = 2;
    int _t0895 = 3;
    int _t0896 = 0;
    int _t0897 = 1;
    int _t0898 = 3;
    int _t0899 = 0;
    int _t089A = 1;
    int _t089B = 2;
    int[12] _t089C = {_t0890, _t0891, _t0892, _t0893, _t0894, _t0895, _t0896, _t0897, _t0898, _t0899, _t089A, _t089B};
    int _t089D = 1;
    int _t089E = 3;
    int[2] _t089F = {_t089D, _t089E};
    int _t08A0 = 3;
    int _t08A1 = 3;
    int[2] _t08A2 = {_t08A0, _t08A1};
    int _t08A3 = 9;
    int _t08A4 = 3;
    int[2] _t08A5 = {_t08A3, _t08A4};
    int _t08A6 = 27;
    int _t08A7 = 3;
    int[2] _t08A8 = {_t08A6, _t08A7};
    int[2][4] _t08A9 = {_t089F, _t08A2, _t08A5, _t08A8};
    int[2] _t08AA = prim $sub01C0<int[2]; %4> (_t08A9, faceIdx0873);
    int _t08AB = 0;
    int _t08AC = prim $sub01C0<int; %2> (_t08AA, _t08AB);
    int _t08AE = prim +0015 (_t08AC, i08AD);
    int _t08AF = prim $sub01C0<int; %12> (_t089C, _t08AE);
    accum08B0 = prim @0010<int> (accum08B0, _t08AF);
  }
  numFacetNodes08B1 = prim length0123<int> (accum08B0);
  int _t08B2 = 3;
  bool _t08B3 = prim ==0082 (_t08B2, numFacetNodes08B1);
  if _t08B3 {
    foreach cellInt08B4 in nearbyCells087D {
      int[4] _t08B5 = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t08B6 = 1;
      int _t08B7 = prim $sub01C0<int; %4> (_t08B5, _t08B6);
      int[4] _t08B8 = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t08B9 = 2;
      int _t08BA = prim $sub01C0<int; %4> (_t08B8, _t08B9);
      int[4] _t08BB = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t08BC = 3;
      int _t08BD = prim $sub01C0<int; %4> (_t08BB, _t08BC);
      int[3] _t08BE = {_t08B7, _t08BA, _t08BD};
      int _t08BF = 0;
      int _t08C0 = prim $sub01C0<int; %3> (_t08BE, _t08BF);
      int _t08C1 = 0;
      int _t08C2 = 1;
      int _t08C3 = 3;
      int[2] _t08C4 = {_t08C2, _t08C3};
      int _t08C5 = 3;
      int _t08C6 = 3;
      int[2] _t08C7 = {_t08C5, _t08C6};
      int _t08C8 = 9;
      int _t08C9 = 3;
      int[2] _t08CA = {_t08C8, _t08C9};
      int _t08CB = 27;
      int _t08CC = 3;
      int[2] _t08CD = {_t08CB, _t08CC};
      int[2][4] _t08CE = {_t08C4, _t08C7, _t08CA, _t08CD};
      int[2] _t08CF = prim $sub01C0<int[2]; %4> (_t08CE, faceIdx0873);
      int _t08D0 = 1;
      int _t08D1 = prim $sub01C0<int; %2> (_t08CF, _t08D0);
      int[] _t08D2 = prim $range01C3 (_t08C1, _t08D1);
      int[] accum08F2 = {};
      foreach i08AD in _t08D2 {
        int _t08D3 = 1;
        int _t08D4 = 2;
        int _t08D5 = 3;
        int _t08D6 = 0;
        int _t08D7 = 2;
        int _t08D8 = 3;
        int _t08D9 = 0;
        int _t08DA = 1;
        int _t08DB = 3;
        int _t08DC = 0;
        int _t08DD = 1;
        int _t08DE = 2;
        int[12] _t08DF = {_t08D3, _t08D4, _t08D5, _t08D6, _t08D7, _t08D8, _t08D9, _t08DA, _t08DB, _t08DC, _t08DD, _t08DE};
        int _t08E0 = 1;
        int _t08E1 = 3;
        int[2] _t08E2 = {_t08E0, _t08E1};
        int _t08E3 = 3;
        int _t08E4 = 3;
        int[2] _t08E5 = {_t08E3, _t08E4};
        int _t08E6 = 9;
        int _t08E7 = 3;
        int[2] _t08E8 = {_t08E6, _t08E7};
        int _t08E9 = 27;
        int _t08EA = 3;
        int[2] _t08EB = {_t08E9, _t08EA};
        int[2][4] _t08EC = {_t08E2, _t08E5, _t08E8, _t08EB};
        int[2] _t08ED = prim $sub01C0<int[2]; %4> (_t08EC, faceIdx0873);
        int _t08EE = 0;
        int _t08EF = prim $sub01C0<int; %2> (_t08ED, _t08EE);
        int _t08F0 = prim +0015 (_t08EF, i08AD);
        int _t08F1 = prim $sub01C0<int; %12> (_t08DF, _t08F0);
        accum08F2 = prim @0010<int> (accum08F2, _t08F1);
      }
      int _t08F3 = 0;
      int _t08F4 = prim $dynsub01C2<int> (accum08F2, _t08F3);
      bool _t08F5 = prim ==0082 (_t08C0, _t08F4);
      int[4] _t08F6 = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t08F7 = 1;
      int _t08F8 = prim $sub01C0<int; %4> (_t08F6, _t08F7);
      int[4] _t08F9 = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t08FA = 2;
      int _t08FB = prim $sub01C0<int; %4> (_t08F9, _t08FA);
      int[4] _t08FC = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t08FD = 3;
      int _t08FE = prim $sub01C0<int; %4> (_t08FC, _t08FD);
      int[3] _t08FF = {_t08F8, _t08FB, _t08FE};
      int _t0900 = 1;
      int _t0901 = prim $sub01C0<int; %3> (_t08FF, _t0900);
      int _t0902 = 0;
      int _t0903 = 1;
      int _t0904 = 3;
      int[2] _t0905 = {_t0903, _t0904};
      int _t0906 = 3;
      int _t0907 = 3;
      int[2] _t0908 = {_t0906, _t0907};
      int _t0909 = 9;
      int _t090A = 3;
      int[2] _t090B = {_t0909, _t090A};
      int _t090C = 27;
      int _t090D = 3;
      int[2] _t090E = {_t090C, _t090D};
      int[2][4] _t090F = {_t0905, _t0908, _t090B, _t090E};
      int[2] _t0910 = prim $sub01C0<int[2]; %4> (_t090F, faceIdx0873);
      int _t0911 = 1;
      int _t0912 = prim $sub01C0<int; %2> (_t0910, _t0911);
      int[] _t0913 = prim $range01C3 (_t0902, _t0912);
      int[] accum0933 = {};
      foreach i08AD in _t0913 {
        int _t0914 = 1;
        int _t0915 = 2;
        int _t0916 = 3;
        int _t0917 = 0;
        int _t0918 = 2;
        int _t0919 = 3;
        int _t091A = 0;
        int _t091B = 1;
        int _t091C = 3;
        int _t091D = 0;
        int _t091E = 1;
        int _t091F = 2;
        int[12] _t0920 = {_t0914, _t0915, _t0916, _t0917, _t0918, _t0919, _t091A, _t091B, _t091C, _t091D, _t091E, _t091F};
        int _t0921 = 1;
        int _t0922 = 3;
        int[2] _t0923 = {_t0921, _t0922};
        int _t0924 = 3;
        int _t0925 = 3;
        int[2] _t0926 = {_t0924, _t0925};
        int _t0927 = 9;
        int _t0928 = 3;
        int[2] _t0929 = {_t0927, _t0928};
        int _t092A = 27;
        int _t092B = 3;
        int[2] _t092C = {_t092A, _t092B};
        int[2][4] _t092D = {_t0923, _t0926, _t0929, _t092C};
        int[2] _t092E = prim $sub01C0<int[2]; %4> (_t092D, faceIdx0873);
        int _t092F = 0;
        int _t0930 = prim $sub01C0<int; %2> (_t092E, _t092F);
        int _t0931 = prim +0015 (_t0930, i08AD);
        int _t0932 = prim $sub01C0<int; %12> (_t0920, _t0931);
        accum0933 = prim @0010<int> (accum0933, _t0932);
      }
      int _t0934 = 1;
      int _t0935 = prim $dynsub01C2<int> (accum0933, _t0934);
      bool _t0936 = prim ==0082 (_t0901, _t0935);
      int[4] _t0937 = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t0938 = 1;
      int _t0939 = prim $sub01C0<int; %4> (_t0937, _t0938);
      int[4] _t093A = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t093B = 2;
      int _t093C = prim $sub01C0<int; %4> (_t093A, _t093B);
      int[4] _t093D = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t093E = 3;
      int _t093F = prim $sub01C0<int; %4> (_t093D, _t093E);
      int[3] _t0940 = {_t0939, _t093C, _t093F};
      int _t0941 = 2;
      int _t0942 = prim $sub01C0<int; %3> (_t0940, _t0941);
      int _t0943 = 0;
      int _t0944 = 1;
      int _t0945 = 3;
      int[2] _t0946 = {_t0944, _t0945};
      int _t0947 = 3;
      int _t0948 = 3;
      int[2] _t0949 = {_t0947, _t0948};
      int _t094A = 9;
      int _t094B = 3;
      int[2] _t094C = {_t094A, _t094B};
      int _t094D = 27;
      int _t094E = 3;
      int[2] _t094F = {_t094D, _t094E};
      int[2][4] _t0950 = {_t0946, _t0949, _t094C, _t094F};
      int[2] _t0951 = prim $sub01C0<int[2]; %4> (_t0950, faceIdx0873);
      int _t0952 = 1;
      int _t0953 = prim $sub01C0<int; %2> (_t0951, _t0952);
      int[] _t0954 = prim $range01C3 (_t0943, _t0953);
      int[] accum0974 = {};
      foreach i08AD in _t0954 {
        int _t0955 = 1;
        int _t0956 = 2;
        int _t0957 = 3;
        int _t0958 = 0;
        int _t0959 = 2;
        int _t095A = 3;
        int _t095B = 0;
        int _t095C = 1;
        int _t095D = 3;
        int _t095E = 0;
        int _t095F = 1;
        int _t0960 = 2;
        int[12] _t0961 = {_t0955, _t0956, _t0957, _t0958, _t0959, _t095A, _t095B, _t095C, _t095D, _t095E, _t095F, _t0960};
        int _t0962 = 1;
        int _t0963 = 3;
        int[2] _t0964 = {_t0962, _t0963};
        int _t0965 = 3;
        int _t0966 = 3;
        int[2] _t0967 = {_t0965, _t0966};
        int _t0968 = 9;
        int _t0969 = 3;
        int[2] _t096A = {_t0968, _t0969};
        int _t096B = 27;
        int _t096C = 3;
        int[2] _t096D = {_t096B, _t096C};
        int[2][4] _t096E = {_t0964, _t0967, _t096A, _t096D};
        int[2] _t096F = prim $sub01C0<int[2]; %4> (_t096E, faceIdx0873);
        int _t0970 = 0;
        int _t0971 = prim $sub01C0<int; %2> (_t096F, _t0970);
        int _t0972 = prim +0015 (_t0971, i08AD);
        int _t0973 = prim $sub01C0<int; %12> (_t0961, _t0972);
        accum0974 = prim @0010<int> (accum0974, _t0973);
      }
      int _t0975 = 2;
      int _t0976 = prim $dynsub01C2<int> (accum0974, _t0975);
      bool _t0977 = prim ==0082 (_t0942, _t0976);
      bool _t0978 = prim $and01C4 (_t0936, _t0977);
      bool _t0979 = prim $and01C4 (_t08F5, _t0978);
      if _t0979 {
        int _t097A = 0;
        int[2] _t097B = {cellInt08B4, _t097A};
        return _t097B;
      }
      int[4] _t097C = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t097D = 0;
      int _t097E = prim $sub01C0<int; %4> (_t097C, _t097D);
      int[4] _t097F = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t0980 = 2;
      int _t0981 = prim $sub01C0<int; %4> (_t097F, _t0980);
      int[4] _t0982 = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t0983 = 3;
      int _t0984 = prim $sub01C0<int; %4> (_t0982, _t0983);
      int[3] _t0985 = {_t097E, _t0981, _t0984};
      int _t0986 = 0;
      int _t0987 = prim $sub01C0<int; %3> (_t0985, _t0986);
      int _t0988 = 0;
      int _t0989 = 1;
      int _t098A = 3;
      int[2] _t098B = {_t0989, _t098A};
      int _t098C = 3;
      int _t098D = 3;
      int[2] _t098E = {_t098C, _t098D};
      int _t098F = 9;
      int _t0990 = 3;
      int[2] _t0991 = {_t098F, _t0990};
      int _t0992 = 27;
      int _t0993 = 3;
      int[2] _t0994 = {_t0992, _t0993};
      int[2][4] _t0995 = {_t098B, _t098E, _t0991, _t0994};
      int[2] _t0996 = prim $sub01C0<int[2]; %4> (_t0995, faceIdx0873);
      int _t0997 = 1;
      int _t0998 = prim $sub01C0<int; %2> (_t0996, _t0997);
      int[] _t0999 = prim $range01C3 (_t0988, _t0998);
      int[] accum09B9 = {};
      foreach i08AD in _t0999 {
        int _t099A = 1;
        int _t099B = 2;
        int _t099C = 3;
        int _t099D = 0;
        int _t099E = 2;
        int _t099F = 3;
        int _t09A0 = 0;
        int _t09A1 = 1;
        int _t09A2 = 3;
        int _t09A3 = 0;
        int _t09A4 = 1;
        int _t09A5 = 2;
        int[12] _t09A6 = {_t099A, _t099B, _t099C, _t099D, _t099E, _t099F, _t09A0, _t09A1, _t09A2, _t09A3, _t09A4, _t09A5};
        int _t09A7 = 1;
        int _t09A8 = 3;
        int[2] _t09A9 = {_t09A7, _t09A8};
        int _t09AA = 3;
        int _t09AB = 3;
        int[2] _t09AC = {_t09AA, _t09AB};
        int _t09AD = 9;
        int _t09AE = 3;
        int[2] _t09AF = {_t09AD, _t09AE};
        int _t09B0 = 27;
        int _t09B1 = 3;
        int[2] _t09B2 = {_t09B0, _t09B1};
        int[2][4] _t09B3 = {_t09A9, _t09AC, _t09AF, _t09B2};
        int[2] _t09B4 = prim $sub01C0<int[2]; %4> (_t09B3, faceIdx0873);
        int _t09B5 = 0;
        int _t09B6 = prim $sub01C0<int; %2> (_t09B4, _t09B5);
        int _t09B7 = prim +0015 (_t09B6, i08AD);
        int _t09B8 = prim $sub01C0<int; %12> (_t09A6, _t09B7);
        accum09B9 = prim @0010<int> (accum09B9, _t09B8);
      }
      int _t09BA = 0;
      int _t09BB = prim $dynsub01C2<int> (accum09B9, _t09BA);
      bool _t09BC = prim ==0082 (_t0987, _t09BB);
      int[4] _t09BD = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t09BE = 0;
      int _t09BF = prim $sub01C0<int; %4> (_t09BD, _t09BE);
      int[4] _t09C0 = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t09C1 = 2;
      int _t09C2 = prim $sub01C0<int; %4> (_t09C0, _t09C1);
      int[4] _t09C3 = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t09C4 = 3;
      int _t09C5 = prim $sub01C0<int; %4> (_t09C3, _t09C4);
      int[3] _t09C6 = {_t09BF, _t09C2, _t09C5};
      int _t09C7 = 1;
      int _t09C8 = prim $sub01C0<int; %3> (_t09C6, _t09C7);
      int _t09C9 = 0;
      int _t09CA = 1;
      int _t09CB = 3;
      int[2] _t09CC = {_t09CA, _t09CB};
      int _t09CD = 3;
      int _t09CE = 3;
      int[2] _t09CF = {_t09CD, _t09CE};
      int _t09D0 = 9;
      int _t09D1 = 3;
      int[2] _t09D2 = {_t09D0, _t09D1};
      int _t09D3 = 27;
      int _t09D4 = 3;
      int[2] _t09D5 = {_t09D3, _t09D4};
      int[2][4] _t09D6 = {_t09CC, _t09CF, _t09D2, _t09D5};
      int[2] _t09D7 = prim $sub01C0<int[2]; %4> (_t09D6, faceIdx0873);
      int _t09D8 = 1;
      int _t09D9 = prim $sub01C0<int; %2> (_t09D7, _t09D8);
      int[] _t09DA = prim $range01C3 (_t09C9, _t09D9);
      int[] accum09FA = {};
      foreach i08AD in _t09DA {
        int _t09DB = 1;
        int _t09DC = 2;
        int _t09DD = 3;
        int _t09DE = 0;
        int _t09DF = 2;
        int _t09E0 = 3;
        int _t09E1 = 0;
        int _t09E2 = 1;
        int _t09E3 = 3;
        int _t09E4 = 0;
        int _t09E5 = 1;
        int _t09E6 = 2;
        int[12] _t09E7 = {_t09DB, _t09DC, _t09DD, _t09DE, _t09DF, _t09E0, _t09E1, _t09E2, _t09E3, _t09E4, _t09E5, _t09E6};
        int _t09E8 = 1;
        int _t09E9 = 3;
        int[2] _t09EA = {_t09E8, _t09E9};
        int _t09EB = 3;
        int _t09EC = 3;
        int[2] _t09ED = {_t09EB, _t09EC};
        int _t09EE = 9;
        int _t09EF = 3;
        int[2] _t09F0 = {_t09EE, _t09EF};
        int _t09F1 = 27;
        int _t09F2 = 3;
        int[2] _t09F3 = {_t09F1, _t09F2};
        int[2][4] _t09F4 = {_t09EA, _t09ED, _t09F0, _t09F3};
        int[2] _t09F5 = prim $sub01C0<int[2]; %4> (_t09F4, faceIdx0873);
        int _t09F6 = 0;
        int _t09F7 = prim $sub01C0<int; %2> (_t09F5, _t09F6);
        int _t09F8 = prim +0015 (_t09F7, i08AD);
        int _t09F9 = prim $sub01C0<int; %12> (_t09E7, _t09F8);
        accum09FA = prim @0010<int> (accum09FA, _t09F9);
      }
      int _t09FB = 1;
      int _t09FC = prim $dynsub01C2<int> (accum09FA, _t09FB);
      bool _t09FD = prim ==0082 (_t09C8, _t09FC);
      int[4] _t09FE = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t09FF = 0;
      int _t0A00 = prim $sub01C0<int; %4> (_t09FE, _t09FF);
      int[4] _t0A01 = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t0A02 = 2;
      int _t0A03 = prim $sub01C0<int; %4> (_t0A01, _t0A02);
      int[4] _t0A04 = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t0A05 = 3;
      int _t0A06 = prim $sub01C0<int; %4> (_t0A04, _t0A05);
      int[3] _t0A07 = {_t0A00, _t0A03, _t0A06};
      int _t0A08 = 2;
      int _t0A09 = prim $sub01C0<int; %3> (_t0A07, _t0A08);
      int _t0A0A = 0;
      int _t0A0B = 1;
      int _t0A0C = 3;
      int[2] _t0A0D = {_t0A0B, _t0A0C};
      int _t0A0E = 3;
      int _t0A0F = 3;
      int[2] _t0A10 = {_t0A0E, _t0A0F};
      int _t0A11 = 9;
      int _t0A12 = 3;
      int[2] _t0A13 = {_t0A11, _t0A12};
      int _t0A14 = 27;
      int _t0A15 = 3;
      int[2] _t0A16 = {_t0A14, _t0A15};
      int[2][4] _t0A17 = {_t0A0D, _t0A10, _t0A13, _t0A16};
      int[2] _t0A18 = prim $sub01C0<int[2]; %4> (_t0A17, faceIdx0873);
      int _t0A19 = 1;
      int _t0A1A = prim $sub01C0<int; %2> (_t0A18, _t0A19);
      int[] _t0A1B = prim $range01C3 (_t0A0A, _t0A1A);
      int[] accum0A3B = {};
      foreach i08AD in _t0A1B {
        int _t0A1C = 1;
        int _t0A1D = 2;
        int _t0A1E = 3;
        int _t0A1F = 0;
        int _t0A20 = 2;
        int _t0A21 = 3;
        int _t0A22 = 0;
        int _t0A23 = 1;
        int _t0A24 = 3;
        int _t0A25 = 0;
        int _t0A26 = 1;
        int _t0A27 = 2;
        int[12] _t0A28 = {_t0A1C, _t0A1D, _t0A1E, _t0A1F, _t0A20, _t0A21, _t0A22, _t0A23, _t0A24, _t0A25, _t0A26, _t0A27};
        int _t0A29 = 1;
        int _t0A2A = 3;
        int[2] _t0A2B = {_t0A29, _t0A2A};
        int _t0A2C = 3;
        int _t0A2D = 3;
        int[2] _t0A2E = {_t0A2C, _t0A2D};
        int _t0A2F = 9;
        int _t0A30 = 3;
        int[2] _t0A31 = {_t0A2F, _t0A30};
        int _t0A32 = 27;
        int _t0A33 = 3;
        int[2] _t0A34 = {_t0A32, _t0A33};
        int[2][4] _t0A35 = {_t0A2B, _t0A2E, _t0A31, _t0A34};
        int[2] _t0A36 = prim $sub01C0<int[2]; %4> (_t0A35, faceIdx0873);
        int _t0A37 = 0;
        int _t0A38 = prim $sub01C0<int; %2> (_t0A36, _t0A37);
        int _t0A39 = prim +0015 (_t0A38, i08AD);
        int _t0A3A = prim $sub01C0<int; %12> (_t0A28, _t0A39);
        accum0A3B = prim @0010<int> (accum0A3B, _t0A3A);
      }
      int _t0A3C = 2;
      int _t0A3D = prim $dynsub01C2<int> (accum0A3B, _t0A3C);
      bool _t0A3E = prim ==0082 (_t0A09, _t0A3D);
      bool _t0A3F = prim $and01C4 (_t09FD, _t0A3E);
      bool _t0A40 = prim $and01C4 (_t09BC, _t0A3F);
      if _t0A40 {
        int _t0A41 = 1;
        int[2] _t0A42 = {cellInt08B4, _t0A41};
        return _t0A42;
      }
      int[4] _t0A43 = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t0A44 = 0;
      int _t0A45 = prim $sub01C0<int; %4> (_t0A43, _t0A44);
      int[4] _t0A46 = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t0A47 = 1;
      int _t0A48 = prim $sub01C0<int; %4> (_t0A46, _t0A47);
      int[4] _t0A49 = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t0A4A = 3;
      int _t0A4B = prim $sub01C0<int; %4> (_t0A49, _t0A4A);
      int[3] _t0A4C = {_t0A45, _t0A48, _t0A4B};
      int _t0A4D = 0;
      int _t0A4E = prim $sub01C0<int; %3> (_t0A4C, _t0A4D);
      int _t0A4F = 0;
      int _t0A50 = 1;
      int _t0A51 = 3;
      int[2] _t0A52 = {_t0A50, _t0A51};
      int _t0A53 = 3;
      int _t0A54 = 3;
      int[2] _t0A55 = {_t0A53, _t0A54};
      int _t0A56 = 9;
      int _t0A57 = 3;
      int[2] _t0A58 = {_t0A56, _t0A57};
      int _t0A59 = 27;
      int _t0A5A = 3;
      int[2] _t0A5B = {_t0A59, _t0A5A};
      int[2][4] _t0A5C = {_t0A52, _t0A55, _t0A58, _t0A5B};
      int[2] _t0A5D = prim $sub01C0<int[2]; %4> (_t0A5C, faceIdx0873);
      int _t0A5E = 1;
      int _t0A5F = prim $sub01C0<int; %2> (_t0A5D, _t0A5E);
      int[] _t0A60 = prim $range01C3 (_t0A4F, _t0A5F);
      int[] accum0A80 = {};
      foreach i08AD in _t0A60 {
        int _t0A61 = 1;
        int _t0A62 = 2;
        int _t0A63 = 3;
        int _t0A64 = 0;
        int _t0A65 = 2;
        int _t0A66 = 3;
        int _t0A67 = 0;
        int _t0A68 = 1;
        int _t0A69 = 3;
        int _t0A6A = 0;
        int _t0A6B = 1;
        int _t0A6C = 2;
        int[12] _t0A6D = {_t0A61, _t0A62, _t0A63, _t0A64, _t0A65, _t0A66, _t0A67, _t0A68, _t0A69, _t0A6A, _t0A6B, _t0A6C};
        int _t0A6E = 1;
        int _t0A6F = 3;
        int[2] _t0A70 = {_t0A6E, _t0A6F};
        int _t0A71 = 3;
        int _t0A72 = 3;
        int[2] _t0A73 = {_t0A71, _t0A72};
        int _t0A74 = 9;
        int _t0A75 = 3;
        int[2] _t0A76 = {_t0A74, _t0A75};
        int _t0A77 = 27;
        int _t0A78 = 3;
        int[2] _t0A79 = {_t0A77, _t0A78};
        int[2][4] _t0A7A = {_t0A70, _t0A73, _t0A76, _t0A79};
        int[2] _t0A7B = prim $sub01C0<int[2]; %4> (_t0A7A, faceIdx0873);
        int _t0A7C = 0;
        int _t0A7D = prim $sub01C0<int; %2> (_t0A7B, _t0A7C);
        int _t0A7E = prim +0015 (_t0A7D, i08AD);
        int _t0A7F = prim $sub01C0<int; %12> (_t0A6D, _t0A7E);
        accum0A80 = prim @0010<int> (accum0A80, _t0A7F);
      }
      int _t0A81 = 0;
      int _t0A82 = prim $dynsub01C2<int> (accum0A80, _t0A81);
      bool _t0A83 = prim ==0082 (_t0A4E, _t0A82);
      int[4] _t0A84 = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t0A85 = 0;
      int _t0A86 = prim $sub01C0<int; %4> (_t0A84, _t0A85);
      int[4] _t0A87 = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t0A88 = 1;
      int _t0A89 = prim $sub01C0<int; %4> (_t0A87, _t0A88);
      int[4] _t0A8A = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t0A8B = 3;
      int _t0A8C = prim $sub01C0<int; %4> (_t0A8A, _t0A8B);
      int[3] _t0A8D = {_t0A86, _t0A89, _t0A8C};
      int _t0A8E = 1;
      int _t0A8F = prim $sub01C0<int; %3> (_t0A8D, _t0A8E);
      int _t0A90 = 0;
      int _t0A91 = 1;
      int _t0A92 = 3;
      int[2] _t0A93 = {_t0A91, _t0A92};
      int _t0A94 = 3;
      int _t0A95 = 3;
      int[2] _t0A96 = {_t0A94, _t0A95};
      int _t0A97 = 9;
      int _t0A98 = 3;
      int[2] _t0A99 = {_t0A97, _t0A98};
      int _t0A9A = 27;
      int _t0A9B = 3;
      int[2] _t0A9C = {_t0A9A, _t0A9B};
      int[2][4] _t0A9D = {_t0A93, _t0A96, _t0A99, _t0A9C};
      int[2] _t0A9E = prim $sub01C0<int[2]; %4> (_t0A9D, faceIdx0873);
      int _t0A9F = 1;
      int _t0AA0 = prim $sub01C0<int; %2> (_t0A9E, _t0A9F);
      int[] _t0AA1 = prim $range01C3 (_t0A90, _t0AA0);
      int[] accum0AC1 = {};
      foreach i08AD in _t0AA1 {
        int _t0AA2 = 1;
        int _t0AA3 = 2;
        int _t0AA4 = 3;
        int _t0AA5 = 0;
        int _t0AA6 = 2;
        int _t0AA7 = 3;
        int _t0AA8 = 0;
        int _t0AA9 = 1;
        int _t0AAA = 3;
        int _t0AAB = 0;
        int _t0AAC = 1;
        int _t0AAD = 2;
        int[12] _t0AAE = {_t0AA2, _t0AA3, _t0AA4, _t0AA5, _t0AA6, _t0AA7, _t0AA8, _t0AA9, _t0AAA, _t0AAB, _t0AAC, _t0AAD};
        int _t0AAF = 1;
        int _t0AB0 = 3;
        int[2] _t0AB1 = {_t0AAF, _t0AB0};
        int _t0AB2 = 3;
        int _t0AB3 = 3;
        int[2] _t0AB4 = {_t0AB2, _t0AB3};
        int _t0AB5 = 9;
        int _t0AB6 = 3;
        int[2] _t0AB7 = {_t0AB5, _t0AB6};
        int _t0AB8 = 27;
        int _t0AB9 = 3;
        int[2] _t0ABA = {_t0AB8, _t0AB9};
        int[2][4] _t0ABB = {_t0AB1, _t0AB4, _t0AB7, _t0ABA};
        int[2] _t0ABC = prim $sub01C0<int[2]; %4> (_t0ABB, faceIdx0873);
        int _t0ABD = 0;
        int _t0ABE = prim $sub01C0<int; %2> (_t0ABC, _t0ABD);
        int _t0ABF = prim +0015 (_t0ABE, i08AD);
        int _t0AC0 = prim $sub01C0<int; %12> (_t0AAE, _t0ABF);
        accum0AC1 = prim @0010<int> (accum0AC1, _t0AC0);
      }
      int _t0AC2 = 1;
      int _t0AC3 = prim $dynsub01C2<int> (accum0AC1, _t0AC2);
      bool _t0AC4 = prim ==0082 (_t0A8F, _t0AC3);
      int[4] _t0AC5 = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t0AC6 = 0;
      int _t0AC7 = prim $sub01C0<int; %4> (_t0AC5, _t0AC6);
      int[4] _t0AC8 = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t0AC9 = 1;
      int _t0ACA = prim $sub01C0<int; %4> (_t0AC8, _t0AC9);
      int[4] _t0ACB = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t0ACC = 3;
      int _t0ACD = prim $sub01C0<int; %4> (_t0ACB, _t0ACC);
      int[3] _t0ACE = {_t0AC7, _t0ACA, _t0ACD};
      int _t0ACF = 2;
      int _t0AD0 = prim $sub01C0<int; %3> (_t0ACE, _t0ACF);
      int _t0AD1 = 0;
      int _t0AD2 = 1;
      int _t0AD3 = 3;
      int[2] _t0AD4 = {_t0AD2, _t0AD3};
      int _t0AD5 = 3;
      int _t0AD6 = 3;
      int[2] _t0AD7 = {_t0AD5, _t0AD6};
      int _t0AD8 = 9;
      int _t0AD9 = 3;
      int[2] _t0ADA = {_t0AD8, _t0AD9};
      int _t0ADB = 27;
      int _t0ADC = 3;
      int[2] _t0ADD = {_t0ADB, _t0ADC};
      int[2][4] _t0ADE = {_t0AD4, _t0AD7, _t0ADA, _t0ADD};
      int[2] _t0ADF = prim $sub01C0<int[2]; %4> (_t0ADE, faceIdx0873);
      int _t0AE0 = 1;
      int _t0AE1 = prim $sub01C0<int; %2> (_t0ADF, _t0AE0);
      int[] _t0AE2 = prim $range01C3 (_t0AD1, _t0AE1);
      int[] accum0B02 = {};
      foreach i08AD in _t0AE2 {
        int _t0AE3 = 1;
        int _t0AE4 = 2;
        int _t0AE5 = 3;
        int _t0AE6 = 0;
        int _t0AE7 = 2;
        int _t0AE8 = 3;
        int _t0AE9 = 0;
        int _t0AEA = 1;
        int _t0AEB = 3;
        int _t0AEC = 0;
        int _t0AED = 1;
        int _t0AEE = 2;
        int[12] _t0AEF = {_t0AE3, _t0AE4, _t0AE5, _t0AE6, _t0AE7, _t0AE8, _t0AE9, _t0AEA, _t0AEB, _t0AEC, _t0AED, _t0AEE};
        int _t0AF0 = 1;
        int _t0AF1 = 3;
        int[2] _t0AF2 = {_t0AF0, _t0AF1};
        int _t0AF3 = 3;
        int _t0AF4 = 3;
        int[2] _t0AF5 = {_t0AF3, _t0AF4};
        int _t0AF6 = 9;
        int _t0AF7 = 3;
        int[2] _t0AF8 = {_t0AF6, _t0AF7};
        int _t0AF9 = 27;
        int _t0AFA = 3;
        int[2] _t0AFB = {_t0AF9, _t0AFA};
        int[2][4] _t0AFC = {_t0AF2, _t0AF5, _t0AF8, _t0AFB};
        int[2] _t0AFD = prim $sub01C0<int[2]; %4> (_t0AFC, faceIdx0873);
        int _t0AFE = 0;
        int _t0AFF = prim $sub01C0<int; %2> (_t0AFD, _t0AFE);
        int _t0B00 = prim +0015 (_t0AFF, i08AD);
        int _t0B01 = prim $sub01C0<int; %12> (_t0AEF, _t0B00);
        accum0B02 = prim @0010<int> (accum0B02, _t0B01);
      }
      int _t0B03 = 2;
      int _t0B04 = prim $dynsub01C2<int> (accum0B02, _t0B03);
      bool _t0B05 = prim ==0082 (_t0AD0, _t0B04);
      bool _t0B06 = prim $and01C4 (_t0AC4, _t0B05);
      bool _t0B07 = prim $and01C4 (_t0A83, _t0B06);
      if _t0B07 {
        int _t0B08 = 2;
        int[2] _t0B09 = {cellInt08B4, _t0B08};
        return _t0B09;
      }
      int[4] _t0B0A = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t0B0B = 0;
      int _t0B0C = prim $sub01C0<int; %4> (_t0B0A, _t0B0B);
      int[4] _t0B0D = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t0B0E = 1;
      int _t0B0F = prim $sub01C0<int; %4> (_t0B0D, _t0B0E);
      int[4] _t0B10 = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t0B11 = 2;
      int _t0B12 = prim $sub01C0<int; %4> (_t0B10, _t0B11);
      int[3] _t0B13 = {_t0B0C, _t0B0F, _t0B12};
      int _t0B14 = 0;
      int _t0B15 = prim $sub01C0<int; %3> (_t0B13, _t0B14);
      int _t0B16 = 0;
      int _t0B17 = 1;
      int _t0B18 = 3;
      int[2] _t0B19 = {_t0B17, _t0B18};
      int _t0B1A = 3;
      int _t0B1B = 3;
      int[2] _t0B1C = {_t0B1A, _t0B1B};
      int _t0B1D = 9;
      int _t0B1E = 3;
      int[2] _t0B1F = {_t0B1D, _t0B1E};
      int _t0B20 = 27;
      int _t0B21 = 3;
      int[2] _t0B22 = {_t0B20, _t0B21};
      int[2][4] _t0B23 = {_t0B19, _t0B1C, _t0B1F, _t0B22};
      int[2] _t0B24 = prim $sub01C0<int[2]; %4> (_t0B23, faceIdx0873);
      int _t0B25 = 1;
      int _t0B26 = prim $sub01C0<int; %2> (_t0B24, _t0B25);
      int[] _t0B27 = prim $range01C3 (_t0B16, _t0B26);
      int[] accum0B47 = {};
      foreach i08AD in _t0B27 {
        int _t0B28 = 1;
        int _t0B29 = 2;
        int _t0B2A = 3;
        int _t0B2B = 0;
        int _t0B2C = 2;
        int _t0B2D = 3;
        int _t0B2E = 0;
        int _t0B2F = 1;
        int _t0B30 = 3;
        int _t0B31 = 0;
        int _t0B32 = 1;
        int _t0B33 = 2;
        int[12] _t0B34 = {_t0B28, _t0B29, _t0B2A, _t0B2B, _t0B2C, _t0B2D, _t0B2E, _t0B2F, _t0B30, _t0B31, _t0B32, _t0B33};
        int _t0B35 = 1;
        int _t0B36 = 3;
        int[2] _t0B37 = {_t0B35, _t0B36};
        int _t0B38 = 3;
        int _t0B39 = 3;
        int[2] _t0B3A = {_t0B38, _t0B39};
        int _t0B3B = 9;
        int _t0B3C = 3;
        int[2] _t0B3D = {_t0B3B, _t0B3C};
        int _t0B3E = 27;
        int _t0B3F = 3;
        int[2] _t0B40 = {_t0B3E, _t0B3F};
        int[2][4] _t0B41 = {_t0B37, _t0B3A, _t0B3D, _t0B40};
        int[2] _t0B42 = prim $sub01C0<int[2]; %4> (_t0B41, faceIdx0873);
        int _t0B43 = 0;
        int _t0B44 = prim $sub01C0<int; %2> (_t0B42, _t0B43);
        int _t0B45 = prim +0015 (_t0B44, i08AD);
        int _t0B46 = prim $sub01C0<int; %12> (_t0B34, _t0B45);
        accum0B47 = prim @0010<int> (accum0B47, _t0B46);
      }
      int _t0B48 = 0;
      int _t0B49 = prim $dynsub01C2<int> (accum0B47, _t0B48);
      bool _t0B4A = prim ==0082 (_t0B15, _t0B49);
      int[4] _t0B4B = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t0B4C = 0;
      int _t0B4D = prim $sub01C0<int; %4> (_t0B4B, _t0B4C);
      int[4] _t0B4E = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t0B4F = 1;
      int _t0B50 = prim $sub01C0<int; %4> (_t0B4E, _t0B4F);
      int[4] _t0B51 = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t0B52 = 2;
      int _t0B53 = prim $sub01C0<int; %4> (_t0B51, _t0B52);
      int[3] _t0B54 = {_t0B4D, _t0B50, _t0B53};
      int _t0B55 = 1;
      int _t0B56 = prim $sub01C0<int; %3> (_t0B54, _t0B55);
      int _t0B57 = 0;
      int _t0B58 = 1;
      int _t0B59 = 3;
      int[2] _t0B5A = {_t0B58, _t0B59};
      int _t0B5B = 3;
      int _t0B5C = 3;
      int[2] _t0B5D = {_t0B5B, _t0B5C};
      int _t0B5E = 9;
      int _t0B5F = 3;
      int[2] _t0B60 = {_t0B5E, _t0B5F};
      int _t0B61 = 27;
      int _t0B62 = 3;
      int[2] _t0B63 = {_t0B61, _t0B62};
      int[2][4] _t0B64 = {_t0B5A, _t0B5D, _t0B60, _t0B63};
      int[2] _t0B65 = prim $sub01C0<int[2]; %4> (_t0B64, faceIdx0873);
      int _t0B66 = 1;
      int _t0B67 = prim $sub01C0<int; %2> (_t0B65, _t0B66);
      int[] _t0B68 = prim $range01C3 (_t0B57, _t0B67);
      int[] accum0B88 = {};
      foreach i08AD in _t0B68 {
        int _t0B69 = 1;
        int _t0B6A = 2;
        int _t0B6B = 3;
        int _t0B6C = 0;
        int _t0B6D = 2;
        int _t0B6E = 3;
        int _t0B6F = 0;
        int _t0B70 = 1;
        int _t0B71 = 3;
        int _t0B72 = 0;
        int _t0B73 = 1;
        int _t0B74 = 2;
        int[12] _t0B75 = {_t0B69, _t0B6A, _t0B6B, _t0B6C, _t0B6D, _t0B6E, _t0B6F, _t0B70, _t0B71, _t0B72, _t0B73, _t0B74};
        int _t0B76 = 1;
        int _t0B77 = 3;
        int[2] _t0B78 = {_t0B76, _t0B77};
        int _t0B79 = 3;
        int _t0B7A = 3;
        int[2] _t0B7B = {_t0B79, _t0B7A};
        int _t0B7C = 9;
        int _t0B7D = 3;
        int[2] _t0B7E = {_t0B7C, _t0B7D};
        int _t0B7F = 27;
        int _t0B80 = 3;
        int[2] _t0B81 = {_t0B7F, _t0B80};
        int[2][4] _t0B82 = {_t0B78, _t0B7B, _t0B7E, _t0B81};
        int[2] _t0B83 = prim $sub01C0<int[2]; %4> (_t0B82, faceIdx0873);
        int _t0B84 = 0;
        int _t0B85 = prim $sub01C0<int; %2> (_t0B83, _t0B84);
        int _t0B86 = prim +0015 (_t0B85, i08AD);
        int _t0B87 = prim $sub01C0<int; %12> (_t0B75, _t0B86);
        accum0B88 = prim @0010<int> (accum0B88, _t0B87);
      }
      int _t0B89 = 1;
      int _t0B8A = prim $dynsub01C2<int> (accum0B88, _t0B89);
      bool _t0B8B = prim ==0082 (_t0B56, _t0B8A);
      int[4] _t0B8C = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t0B8D = 0;
      int _t0B8E = prim $sub01C0<int; %4> (_t0B8C, _t0B8D);
      int[4] _t0B8F = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t0B90 = 1;
      int _t0B91 = prim $sub01C0<int; %4> (_t0B8F, _t0B90);
      int[4] _t0B92 = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t0B93 = 2;
      int _t0B94 = prim $sub01C0<int; %4> (_t0B92, _t0B93);
      int[3] _t0B95 = {_t0B8E, _t0B91, _t0B94};
      int _t0B96 = 2;
      int _t0B97 = prim $sub01C0<int; %3> (_t0B95, _t0B96);
      int _t0B98 = 0;
      int _t0B99 = 1;
      int _t0B9A = 3;
      int[2] _t0B9B = {_t0B99, _t0B9A};
      int _t0B9C = 3;
      int _t0B9D = 3;
      int[2] _t0B9E = {_t0B9C, _t0B9D};
      int _t0B9F = 9;
      int _t0BA0 = 3;
      int[2] _t0BA1 = {_t0B9F, _t0BA0};
      int _t0BA2 = 27;
      int _t0BA3 = 3;
      int[2] _t0BA4 = {_t0BA2, _t0BA3};
      int[2][4] _t0BA5 = {_t0B9B, _t0B9E, _t0BA1, _t0BA4};
      int[2] _t0BA6 = prim $sub01C0<int[2]; %4> (_t0BA5, faceIdx0873);
      int _t0BA7 = 1;
      int _t0BA8 = prim $sub01C0<int; %2> (_t0BA6, _t0BA7);
      int[] _t0BA9 = prim $range01C3 (_t0B98, _t0BA8);
      int[] accum0BC9 = {};
      foreach i08AD in _t0BA9 {
        int _t0BAA = 1;
        int _t0BAB = 2;
        int _t0BAC = 3;
        int _t0BAD = 0;
        int _t0BAE = 2;
        int _t0BAF = 3;
        int _t0BB0 = 0;
        int _t0BB1 = 1;
        int _t0BB2 = 3;
        int _t0BB3 = 0;
        int _t0BB4 = 1;
        int _t0BB5 = 2;
        int[12] _t0BB6 = {_t0BAA, _t0BAB, _t0BAC, _t0BAD, _t0BAE, _t0BAF, _t0BB0, _t0BB1, _t0BB2, _t0BB3, _t0BB4, _t0BB5};
        int _t0BB7 = 1;
        int _t0BB8 = 3;
        int[2] _t0BB9 = {_t0BB7, _t0BB8};
        int _t0BBA = 3;
        int _t0BBB = 3;
        int[2] _t0BBC = {_t0BBA, _t0BBB};
        int _t0BBD = 9;
        int _t0BBE = 3;
        int[2] _t0BBF = {_t0BBD, _t0BBE};
        int _t0BC0 = 27;
        int _t0BC1 = 3;
        int[2] _t0BC2 = {_t0BC0, _t0BC1};
        int[2][4] _t0BC3 = {_t0BB9, _t0BBC, _t0BBF, _t0BC2};
        int[2] _t0BC4 = prim $sub01C0<int[2]; %4> (_t0BC3, faceIdx0873);
        int _t0BC5 = 0;
        int _t0BC6 = prim $sub01C0<int; %2> (_t0BC4, _t0BC5);
        int _t0BC7 = prim +0015 (_t0BC6, i08AD);
        int _t0BC8 = prim $sub01C0<int; %12> (_t0BB6, _t0BC7);
        accum0BC9 = prim @0010<int> (accum0BC9, _t0BC8);
      }
      int _t0BCA = 2;
      int _t0BCB = prim $dynsub01C2<int> (accum0BC9, _t0BCA);
      bool _t0BCC = prim ==0082 (_t0B97, _t0BCB);
      bool _t0BCD = prim $and01C4 (_t0B8B, _t0BCC);
      bool _t0BCE = prim $and01C4 (_t0B4A, _t0BCD);
      if _t0BCE {
        int _t0BCF = 3;
        int[2] _t0BD0 = {cellInt08B4, _t0BCF};
        return _t0BD0;
      }
    }
  }
  int _t0BD1 = -1;
  int _t0BD2 = -1;
  int[2] _t0BD3 = {_t0BD1, _t0BD2};
  return _t0BD3;
}
function vec2#0 _enter0BD4 (vec3 refPos0BD5, vec3 dPos0BD6)
{
  real time0BD7 = +inf;
  int face0BD8 = -1;
  real _t0BD9 = 0.57735026919e0;
  real _t0BDA = 0.57735026919e0;
  real _t0BDB = -0.57735026919e0;
  real _t0BDC = 0.57735026919e0;
  vec3 _t0BDD = [_t0BDA, _t0BDB, _t0BDC];
  real _t0BDE = prim •00CE<$[3]; $[3]; $[]> (_t0BDD, refPos0BD5);
  real _t0BDF = prim -0026<$[]> (_t0BD9, _t0BDE);
  real _t0BE0 = 0.57735026919e0;
  real _t0BE1 = -0.57735026919e0;
  real _t0BE2 = 0.57735026919e0;
  vec3 _t0BE3 = [_t0BE0, _t0BE1, _t0BE2];
  real _t0BE4 = prim •00CE<$[3]; $[3]; $[]> (_t0BE3, dPos0BD6);
  real _t0BE5 = prim /0055 (_t0BDF, _t0BE4);
  real _t0BE6 = -0.e0;
  bool _t0BE7 = prim >0080 (_t0BE5, _t0BE6);
  real _t0BE8 = 0.57735026919e0;
  real _t0BE9 = 0.57735026919e0;
  real _t0BEA = -0.57735026919e0;
  real _t0BEB = 0.57735026919e0;
  vec3 _t0BEC = [_t0BE9, _t0BEA, _t0BEB];
  real _t0BED = prim •00CE<$[3]; $[3]; $[]> (_t0BEC, refPos0BD5);
  real _t0BEE = prim -0026<$[]> (_t0BE8, _t0BED);
  real _t0BEF = 0.57735026919e0;
  real _t0BF0 = -0.57735026919e0;
  real _t0BF1 = 0.57735026919e0;
  vec3 _t0BF2 = [_t0BEF, _t0BF0, _t0BF1];
  real _t0BF3 = prim •00CE<$[3]; $[3]; $[]> (_t0BF2, dPos0BD6);
  real _t0BF4 = prim /0055 (_t0BEE, _t0BF3);
  bool _t0BF5 = prim >0080 (time0BD7, _t0BF4);
  bool _t0BF6 = prim $and01C4 (_t0BE7, _t0BF5);
  if _t0BF6 {
    real _t0BF7 = 0.1e1;
    real _t0BF8 = 0.1e-8;
    real _t0BF9 = prim +0017<$[]> (_t0BF7, _t0BF8);
    real _t0BFA = 0.1e1;
    real _t0BFB = 0.1e1;
    real _t0BFC = 0.1e1;
    vec3 _t0BFD = [_t0BFA, _t0BFB, _t0BFC];
    real _t0BFE = 0.57735026919e0;
    real _t0BFF = 0.57735026919e0;
    real _t0C00 = -0.57735026919e0;
    real _t0C01 = 0.57735026919e0;
    vec3 _t0C02 = [_t0BFF, _t0C00, _t0C01];
    real _t0C03 = prim •00CE<$[3]; $[3]; $[]> (_t0C02, refPos0BD5);
    real _t0C04 = prim -0026<$[]> (_t0BFE, _t0C03);
    real _t0C05 = 0.57735026919e0;
    real _t0C06 = -0.57735026919e0;
    real _t0C07 = 0.57735026919e0;
    vec3 _t0C08 = [_t0C05, _t0C06, _t0C07];
    real _t0C09 = prim •00CE<$[3]; $[3]; $[]> (_t0C08, dPos0BD6);
    real _t0C0A = prim /0055 (_t0C04, _t0C09);
    vec3 _t0C0B = prim *0038<$[3]> (dPos0BD6, _t0C0A);
    vec3 _t0C0C = prim +0017<$[3]> (_t0C0B, refPos0BD5);
    real _t0C0D = prim •00CE<$[3]; $[3]; $[]> (_t0BFD, _t0C0C);
    bool _t0C0E = prim >0080 (_t0BF9, _t0C0D);
    real _t0C0F = 0.1e-8;
    real _t0C10 = 0.1e-8;
    real _t0C11 = 0.1e-8;
    vec3 _t0C12 = [_t0C0F, _t0C10, _t0C11];
    real _t0C13 = 0.57735026919e0;
    real _t0C14 = 0.57735026919e0;
    real _t0C15 = -0.57735026919e0;
    real _t0C16 = 0.57735026919e0;
    vec3 _t0C17 = [_t0C14, _t0C15, _t0C16];
    real _t0C18 = prim •00CE<$[3]; $[3]; $[]> (_t0C17, refPos0BD5);
    real _t0C19 = prim -0026<$[]> (_t0C13, _t0C18);
    real _t0C1A = 0.57735026919e0;
    real _t0C1B = -0.57735026919e0;
    real _t0C1C = 0.57735026919e0;
    vec3 _t0C1D = [_t0C1A, _t0C1B, _t0C1C];
    real _t0C1E = prim •00CE<$[3]; $[3]; $[]> (_t0C1D, dPos0BD6);
    real _t0C1F = prim /0055 (_t0C19, _t0C1E);
    vec3 _t0C20 = prim *0038<$[3]> (dPos0BD6, _t0C1F);
    vec3 _t0C21 = prim +0017<$[3]> (_t0C20, refPos0BD5);
    vec3 _t0C22 = prim +0017<$[3]> (_t0C12, _t0C21);
    real _t0C23 = _t0C22[0];
    real _t0C24 = -0.e0;
    bool _t0C25 = prim >0080 (_t0C23, _t0C24);
    real _t0C26 = 0.1e-8;
    real _t0C27 = 0.1e-8;
    real _t0C28 = 0.1e-8;
    vec3 _t0C29 = [_t0C26, _t0C27, _t0C28];
    real _t0C2A = 0.57735026919e0;
    real _t0C2B = 0.57735026919e0;
    real _t0C2C = -0.57735026919e0;
    real _t0C2D = 0.57735026919e0;
    vec3 _t0C2E = [_t0C2B, _t0C2C, _t0C2D];
    real _t0C2F = prim •00CE<$[3]; $[3]; $[]> (_t0C2E, refPos0BD5);
    real _t0C30 = prim -0026<$[]> (_t0C2A, _t0C2F);
    real _t0C31 = 0.57735026919e0;
    real _t0C32 = -0.57735026919e0;
    real _t0C33 = 0.57735026919e0;
    vec3 _t0C34 = [_t0C31, _t0C32, _t0C33];
    real _t0C35 = prim •00CE<$[3]; $[3]; $[]> (_t0C34, dPos0BD6);
    real _t0C36 = prim /0055 (_t0C30, _t0C35);
    vec3 _t0C37 = prim *0038<$[3]> (dPos0BD6, _t0C36);
    vec3 _t0C38 = prim +0017<$[3]> (_t0C37, refPos0BD5);
    vec3 _t0C39 = prim +0017<$[3]> (_t0C29, _t0C38);
    real _t0C3A = _t0C39[1];
    real _t0C3B = -0.e0;
    bool _t0C3C = prim >0080 (_t0C3A, _t0C3B);
    real _t0C3D = 0.1e-8;
    real _t0C3E = 0.1e-8;
    real _t0C3F = 0.1e-8;
    vec3 _t0C40 = [_t0C3D, _t0C3E, _t0C3F];
    real _t0C41 = 0.57735026919e0;
    real _t0C42 = 0.57735026919e0;
    real _t0C43 = -0.57735026919e0;
    real _t0C44 = 0.57735026919e0;
    vec3 _t0C45 = [_t0C42, _t0C43, _t0C44];
    real _t0C46 = prim •00CE<$[3]; $[3]; $[]> (_t0C45, refPos0BD5);
    real _t0C47 = prim -0026<$[]> (_t0C41, _t0C46);
    real _t0C48 = 0.57735026919e0;
    real _t0C49 = -0.57735026919e0;
    real _t0C4A = 0.57735026919e0;
    vec3 _t0C4B = [_t0C48, _t0C49, _t0C4A];
    real _t0C4C = prim •00CE<$[3]; $[3]; $[]> (_t0C4B, dPos0BD6);
    real _t0C4D = prim /0055 (_t0C47, _t0C4C);
    vec3 _t0C4E = prim *0038<$[3]> (dPos0BD6, _t0C4D);
    vec3 _t0C4F = prim +0017<$[3]> (_t0C4E, refPos0BD5);
    vec3 _t0C50 = prim +0017<$[3]> (_t0C40, _t0C4F);
    real _t0C51 = _t0C50[2];
    real _t0C52 = -0.e0;
    bool _t0C53 = prim >0080 (_t0C51, _t0C52);
    bool _t0C54 = prim $and01C4 (_t0C3C, _t0C53);
    bool _t0C55 = prim $and01C4 (_t0C25, _t0C54);
    bool _t0C56 = prim $and01C4 (_t0C0E, _t0C55);
    if _t0C56 {
      real _t0C57 = 0.57735026919e0;
      real _t0C58 = 0.57735026919e0;
      real _t0C59 = -0.57735026919e0;
      real _t0C5A = 0.57735026919e0;
      vec3 _t0C5B = [_t0C58, _t0C59, _t0C5A];
      real _t0C5C = prim •00CE<$[3]; $[3]; $[]> (_t0C5B, refPos0BD5);
      real _t0C5D = prim -0026<$[]> (_t0C57, _t0C5C);
      real _t0C5E = 0.57735026919e0;
      real _t0C5F = -0.57735026919e0;
      real _t0C60 = 0.57735026919e0;
      vec3 _t0C61 = [_t0C5E, _t0C5F, _t0C60];
      real _t0C62 = prim •00CE<$[3]; $[3]; $[]> (_t0C61, dPos0BD6);
      time0BD7 = prim /0055 (_t0C5D, _t0C62);
      face0BD8 = 0;
    }
  }
  real _t0C63 = 0.e0;
  real _t0C64 = 0.1e1;
  real _t0C65 = 0.e0;
  real _t0C66 = 0.e0;
  vec3 _t0C67 = [_t0C64, _t0C65, _t0C66];
  real _t0C68 = prim •00CE<$[3]; $[3]; $[]> (_t0C67, refPos0BD5);
  real _t0C69 = prim -0026<$[]> (_t0C63, _t0C68);
  real _t0C6A = 0.1e1;
  real _t0C6B = 0.e0;
  real _t0C6C = 0.e0;
  vec3 _t0C6D = [_t0C6A, _t0C6B, _t0C6C];
  real _t0C6E = prim •00CE<$[3]; $[3]; $[]> (_t0C6D, dPos0BD6);
  real _t0C6F = prim /0055 (_t0C69, _t0C6E);
  real _t0C70 = -0.e0;
  bool _t0C71 = prim >0080 (_t0C6F, _t0C70);
  real _t0C72 = 0.e0;
  real _t0C73 = 0.1e1;
  real _t0C74 = 0.e0;
  real _t0C75 = 0.e0;
  vec3 _t0C76 = [_t0C73, _t0C74, _t0C75];
  real _t0C77 = prim •00CE<$[3]; $[3]; $[]> (_t0C76, refPos0BD5);
  real _t0C78 = prim -0026<$[]> (_t0C72, _t0C77);
  real _t0C79 = 0.1e1;
  real _t0C7A = 0.e0;
  real _t0C7B = 0.e0;
  vec3 _t0C7C = [_t0C79, _t0C7A, _t0C7B];
  real _t0C7D = prim •00CE<$[3]; $[3]; $[]> (_t0C7C, dPos0BD6);
  real _t0C7E = prim /0055 (_t0C78, _t0C7D);
  bool _t0C7F = prim >0080 (time0BD7, _t0C7E);
  bool _t0C80 = prim $and01C4 (_t0C71, _t0C7F);
  if _t0C80 {
    real _t0C81 = 0.1e1;
    real _t0C82 = 0.1e-8;
    real _t0C83 = prim +0017<$[]> (_t0C81, _t0C82);
    real _t0C84 = 0.1e1;
    real _t0C85 = 0.1e1;
    real _t0C86 = 0.1e1;
    vec3 _t0C87 = [_t0C84, _t0C85, _t0C86];
    real _t0C88 = 0.e0;
    real _t0C89 = 0.1e1;
    real _t0C8A = 0.e0;
    real _t0C8B = 0.e0;
    vec3 _t0C8C = [_t0C89, _t0C8A, _t0C8B];
    real _t0C8D = prim •00CE<$[3]; $[3]; $[]> (_t0C8C, refPos0BD5);
    real _t0C8E = prim -0026<$[]> (_t0C88, _t0C8D);
    real _t0C8F = 0.1e1;
    real _t0C90 = 0.e0;
    real _t0C91 = 0.e0;
    vec3 _t0C92 = [_t0C8F, _t0C90, _t0C91];
    real _t0C93 = prim •00CE<$[3]; $[3]; $[]> (_t0C92, dPos0BD6);
    real _t0C94 = prim /0055 (_t0C8E, _t0C93);
    vec3 _t0C95 = prim *0038<$[3]> (dPos0BD6, _t0C94);
    vec3 _t0C96 = prim +0017<$[3]> (_t0C95, refPos0BD5);
    real _t0C97 = prim •00CE<$[3]; $[3]; $[]> (_t0C87, _t0C96);
    bool _t0C98 = prim >0080 (_t0C83, _t0C97);
    real _t0C99 = 0.1e-8;
    real _t0C9A = 0.1e-8;
    real _t0C9B = 0.1e-8;
    vec3 _t0C9C = [_t0C99, _t0C9A, _t0C9B];
    real _t0C9D = 0.e0;
    real _t0C9E = 0.1e1;
    real _t0C9F = 0.e0;
    real _t0CA0 = 0.e0;
    vec3 _t0CA1 = [_t0C9E, _t0C9F, _t0CA0];
    real _t0CA2 = prim •00CE<$[3]; $[3]; $[]> (_t0CA1, refPos0BD5);
    real _t0CA3 = prim -0026<$[]> (_t0C9D, _t0CA2);
    real _t0CA4 = 0.1e1;
    real _t0CA5 = 0.e0;
    real _t0CA6 = 0.e0;
    vec3 _t0CA7 = [_t0CA4, _t0CA5, _t0CA6];
    real _t0CA8 = prim •00CE<$[3]; $[3]; $[]> (_t0CA7, dPos0BD6);
    real _t0CA9 = prim /0055 (_t0CA3, _t0CA8);
    vec3 _t0CAA = prim *0038<$[3]> (dPos0BD6, _t0CA9);
    vec3 _t0CAB = prim +0017<$[3]> (_t0CAA, refPos0BD5);
    vec3 _t0CAC = prim +0017<$[3]> (_t0C9C, _t0CAB);
    real _t0CAD = _t0CAC[0];
    real _t0CAE = -0.e0;
    bool _t0CAF = prim >0080 (_t0CAD, _t0CAE);
    real _t0CB0 = 0.1e-8;
    real _t0CB1 = 0.1e-8;
    real _t0CB2 = 0.1e-8;
    vec3 _t0CB3 = [_t0CB0, _t0CB1, _t0CB2];
    real _t0CB4 = 0.e0;
    real _t0CB5 = 0.1e1;
    real _t0CB6 = 0.e0;
    real _t0CB7 = 0.e0;
    vec3 _t0CB8 = [_t0CB5, _t0CB6, _t0CB7];
    real _t0CB9 = prim •00CE<$[3]; $[3]; $[]> (_t0CB8, refPos0BD5);
    real _t0CBA = prim -0026<$[]> (_t0CB4, _t0CB9);
    real _t0CBB = 0.1e1;
    real _t0CBC = 0.e0;
    real _t0CBD = 0.e0;
    vec3 _t0CBE = [_t0CBB, _t0CBC, _t0CBD];
    real _t0CBF = prim •00CE<$[3]; $[3]; $[]> (_t0CBE, dPos0BD6);
    real _t0CC0 = prim /0055 (_t0CBA, _t0CBF);
    vec3 _t0CC1 = prim *0038<$[3]> (dPos0BD6, _t0CC0);
    vec3 _t0CC2 = prim +0017<$[3]> (_t0CC1, refPos0BD5);
    vec3 _t0CC3 = prim +0017<$[3]> (_t0CB3, _t0CC2);
    real _t0CC4 = _t0CC3[1];
    real _t0CC5 = -0.e0;
    bool _t0CC6 = prim >0080 (_t0CC4, _t0CC5);
    real _t0CC7 = 0.1e-8;
    real _t0CC8 = 0.1e-8;
    real _t0CC9 = 0.1e-8;
    vec3 _t0CCA = [_t0CC7, _t0CC8, _t0CC9];
    real _t0CCB = 0.e0;
    real _t0CCC = 0.1e1;
    real _t0CCD = 0.e0;
    real _t0CCE = 0.e0;
    vec3 _t0CCF = [_t0CCC, _t0CCD, _t0CCE];
    real _t0CD0 = prim •00CE<$[3]; $[3]; $[]> (_t0CCF, refPos0BD5);
    real _t0CD1 = prim -0026<$[]> (_t0CCB, _t0CD0);
    real _t0CD2 = 0.1e1;
    real _t0CD3 = 0.e0;
    real _t0CD4 = 0.e0;
    vec3 _t0CD5 = [_t0CD2, _t0CD3, _t0CD4];
    real _t0CD6 = prim •00CE<$[3]; $[3]; $[]> (_t0CD5, dPos0BD6);
    real _t0CD7 = prim /0055 (_t0CD1, _t0CD6);
    vec3 _t0CD8 = prim *0038<$[3]> (dPos0BD6, _t0CD7);
    vec3 _t0CD9 = prim +0017<$[3]> (_t0CD8, refPos0BD5);
    vec3 _t0CDA = prim +0017<$[3]> (_t0CCA, _t0CD9);
    real _t0CDB = _t0CDA[2];
    real _t0CDC = -0.e0;
    bool _t0CDD = prim >0080 (_t0CDB, _t0CDC);
    bool _t0CDE = prim $and01C4 (_t0CC6, _t0CDD);
    bool _t0CDF = prim $and01C4 (_t0CAF, _t0CDE);
    bool _t0CE0 = prim $and01C4 (_t0C98, _t0CDF);
    if _t0CE0 {
      real _t0CE1 = 0.e0;
      real _t0CE2 = 0.1e1;
      real _t0CE3 = 0.e0;
      real _t0CE4 = 0.e0;
      vec3 _t0CE5 = [_t0CE2, _t0CE3, _t0CE4];
      real _t0CE6 = prim •00CE<$[3]; $[3]; $[]> (_t0CE5, refPos0BD5);
      real _t0CE7 = prim -0026<$[]> (_t0CE1, _t0CE6);
      real _t0CE8 = 0.1e1;
      real _t0CE9 = 0.e0;
      real _t0CEA = 0.e0;
      vec3 _t0CEB = [_t0CE8, _t0CE9, _t0CEA];
      real _t0CEC = prim •00CE<$[3]; $[3]; $[]> (_t0CEB, dPos0BD6);
      time0BD7 = prim /0055 (_t0CE7, _t0CEC);
      face0BD8 = 1;
    }
  }
  real _t0CED = 0.e0;
  real _t0CEE = 0.e0;
  real _t0CEF = 0.1e1;
  real _t0CF0 = 0.e0;
  vec3 _t0CF1 = [_t0CEE, _t0CEF, _t0CF0];
  real _t0CF2 = prim •00CE<$[3]; $[3]; $[]> (_t0CF1, refPos0BD5);
  real _t0CF3 = prim -0026<$[]> (_t0CED, _t0CF2);
  real _t0CF4 = 0.e0;
  real _t0CF5 = 0.1e1;
  real _t0CF6 = 0.e0;
  vec3 _t0CF7 = [_t0CF4, _t0CF5, _t0CF6];
  real _t0CF8 = prim •00CE<$[3]; $[3]; $[]> (_t0CF7, dPos0BD6);
  real _t0CF9 = prim /0055 (_t0CF3, _t0CF8);
  real _t0CFA = -0.e0;
  bool _t0CFB = prim >0080 (_t0CF9, _t0CFA);
  real _t0CFC = 0.e0;
  real _t0CFD = 0.e0;
  real _t0CFE = 0.1e1;
  real _t0CFF = 0.e0;
  vec3 _t0D00 = [_t0CFD, _t0CFE, _t0CFF];
  real _t0D01 = prim •00CE<$[3]; $[3]; $[]> (_t0D00, refPos0BD5);
  real _t0D02 = prim -0026<$[]> (_t0CFC, _t0D01);
  real _t0D03 = 0.e0;
  real _t0D04 = 0.1e1;
  real _t0D05 = 0.e0;
  vec3 _t0D06 = [_t0D03, _t0D04, _t0D05];
  real _t0D07 = prim •00CE<$[3]; $[3]; $[]> (_t0D06, dPos0BD6);
  real _t0D08 = prim /0055 (_t0D02, _t0D07);
  bool _t0D09 = prim >0080 (time0BD7, _t0D08);
  bool _t0D0A = prim $and01C4 (_t0CFB, _t0D09);
  if _t0D0A {
    real _t0D0B = 0.1e1;
    real _t0D0C = 0.1e-8;
    real _t0D0D = prim +0017<$[]> (_t0D0B, _t0D0C);
    real _t0D0E = 0.1e1;
    real _t0D0F = 0.1e1;
    real _t0D10 = 0.1e1;
    vec3 _t0D11 = [_t0D0E, _t0D0F, _t0D10];
    real _t0D12 = 0.e0;
    real _t0D13 = 0.e0;
    real _t0D14 = 0.1e1;
    real _t0D15 = 0.e0;
    vec3 _t0D16 = [_t0D13, _t0D14, _t0D15];
    real _t0D17 = prim •00CE<$[3]; $[3]; $[]> (_t0D16, refPos0BD5);
    real _t0D18 = prim -0026<$[]> (_t0D12, _t0D17);
    real _t0D19 = 0.e0;
    real _t0D1A = 0.1e1;
    real _t0D1B = 0.e0;
    vec3 _t0D1C = [_t0D19, _t0D1A, _t0D1B];
    real _t0D1D = prim •00CE<$[3]; $[3]; $[]> (_t0D1C, dPos0BD6);
    real _t0D1E = prim /0055 (_t0D18, _t0D1D);
    vec3 _t0D1F = prim *0038<$[3]> (dPos0BD6, _t0D1E);
    vec3 _t0D20 = prim +0017<$[3]> (_t0D1F, refPos0BD5);
    real _t0D21 = prim •00CE<$[3]; $[3]; $[]> (_t0D11, _t0D20);
    bool _t0D22 = prim >0080 (_t0D0D, _t0D21);
    real _t0D23 = 0.1e-8;
    real _t0D24 = 0.1e-8;
    real _t0D25 = 0.1e-8;
    vec3 _t0D26 = [_t0D23, _t0D24, _t0D25];
    real _t0D27 = 0.e0;
    real _t0D28 = 0.e0;
    real _t0D29 = 0.1e1;
    real _t0D2A = 0.e0;
    vec3 _t0D2B = [_t0D28, _t0D29, _t0D2A];
    real _t0D2C = prim •00CE<$[3]; $[3]; $[]> (_t0D2B, refPos0BD5);
    real _t0D2D = prim -0026<$[]> (_t0D27, _t0D2C);
    real _t0D2E = 0.e0;
    real _t0D2F = 0.1e1;
    real _t0D30 = 0.e0;
    vec3 _t0D31 = [_t0D2E, _t0D2F, _t0D30];
    real _t0D32 = prim •00CE<$[3]; $[3]; $[]> (_t0D31, dPos0BD6);
    real _t0D33 = prim /0055 (_t0D2D, _t0D32);
    vec3 _t0D34 = prim *0038<$[3]> (dPos0BD6, _t0D33);
    vec3 _t0D35 = prim +0017<$[3]> (_t0D34, refPos0BD5);
    vec3 _t0D36 = prim +0017<$[3]> (_t0D26, _t0D35);
    real _t0D37 = _t0D36[0];
    real _t0D38 = -0.e0;
    bool _t0D39 = prim >0080 (_t0D37, _t0D38);
    real _t0D3A = 0.1e-8;
    real _t0D3B = 0.1e-8;
    real _t0D3C = 0.1e-8;
    vec3 _t0D3D = [_t0D3A, _t0D3B, _t0D3C];
    real _t0D3E = 0.e0;
    real _t0D3F = 0.e0;
    real _t0D40 = 0.1e1;
    real _t0D41 = 0.e0;
    vec3 _t0D42 = [_t0D3F, _t0D40, _t0D41];
    real _t0D43 = prim •00CE<$[3]; $[3]; $[]> (_t0D42, refPos0BD5);
    real _t0D44 = prim -0026<$[]> (_t0D3E, _t0D43);
    real _t0D45 = 0.e0;
    real _t0D46 = 0.1e1;
    real _t0D47 = 0.e0;
    vec3 _t0D48 = [_t0D45, _t0D46, _t0D47];
    real _t0D49 = prim •00CE<$[3]; $[3]; $[]> (_t0D48, dPos0BD6);
    real _t0D4A = prim /0055 (_t0D44, _t0D49);
    vec3 _t0D4B = prim *0038<$[3]> (dPos0BD6, _t0D4A);
    vec3 _t0D4C = prim +0017<$[3]> (_t0D4B, refPos0BD5);
    vec3 _t0D4D = prim +0017<$[3]> (_t0D3D, _t0D4C);
    real _t0D4E = _t0D4D[1];
    real _t0D4F = -0.e0;
    bool _t0D50 = prim >0080 (_t0D4E, _t0D4F);
    real _t0D51 = 0.1e-8;
    real _t0D52 = 0.1e-8;
    real _t0D53 = 0.1e-8;
    vec3 _t0D54 = [_t0D51, _t0D52, _t0D53];
    real _t0D55 = 0.e0;
    real _t0D56 = 0.e0;
    real _t0D57 = 0.1e1;
    real _t0D58 = 0.e0;
    vec3 _t0D59 = [_t0D56, _t0D57, _t0D58];
    real _t0D5A = prim •00CE<$[3]; $[3]; $[]> (_t0D59, refPos0BD5);
    real _t0D5B = prim -0026<$[]> (_t0D55, _t0D5A);
    real _t0D5C = 0.e0;
    real _t0D5D = 0.1e1;
    real _t0D5E = 0.e0;
    vec3 _t0D5F = [_t0D5C, _t0D5D, _t0D5E];
    real _t0D60 = prim •00CE<$[3]; $[3]; $[]> (_t0D5F, dPos0BD6);
    real _t0D61 = prim /0055 (_t0D5B, _t0D60);
    vec3 _t0D62 = prim *0038<$[3]> (dPos0BD6, _t0D61);
    vec3 _t0D63 = prim +0017<$[3]> (_t0D62, refPos0BD5);
    vec3 _t0D64 = prim +0017<$[3]> (_t0D54, _t0D63);
    real _t0D65 = _t0D64[2];
    real _t0D66 = -0.e0;
    bool _t0D67 = prim >0080 (_t0D65, _t0D66);
    bool _t0D68 = prim $and01C4 (_t0D50, _t0D67);
    bool _t0D69 = prim $and01C4 (_t0D39, _t0D68);
    bool _t0D6A = prim $and01C4 (_t0D22, _t0D69);
    if _t0D6A {
      real _t0D6B = 0.e0;
      real _t0D6C = 0.e0;
      real _t0D6D = 0.1e1;
      real _t0D6E = 0.e0;
      vec3 _t0D6F = [_t0D6C, _t0D6D, _t0D6E];
      real _t0D70 = prim •00CE<$[3]; $[3]; $[]> (_t0D6F, refPos0BD5);
      real _t0D71 = prim -0026<$[]> (_t0D6B, _t0D70);
      real _t0D72 = 0.e0;
      real _t0D73 = 0.1e1;
      real _t0D74 = 0.e0;
      vec3 _t0D75 = [_t0D72, _t0D73, _t0D74];
      real _t0D76 = prim •00CE<$[3]; $[3]; $[]> (_t0D75, dPos0BD6);
      time0BD7 = prim /0055 (_t0D71, _t0D76);
      face0BD8 = 2;
    }
  }
  real _t0D77 = 0.e0;
  real _t0D78 = 0.e0;
  real _t0D79 = 0.e0;
  real _t0D7A = 0.1e1;
  vec3 _t0D7B = [_t0D78, _t0D79, _t0D7A];
  real _t0D7C = prim •00CE<$[3]; $[3]; $[]> (_t0D7B, refPos0BD5);
  real _t0D7D = prim -0026<$[]> (_t0D77, _t0D7C);
  real _t0D7E = 0.e0;
  real _t0D7F = 0.e0;
  real _t0D80 = 0.1e1;
  vec3 _t0D81 = [_t0D7E, _t0D7F, _t0D80];
  real _t0D82 = prim •00CE<$[3]; $[3]; $[]> (_t0D81, dPos0BD6);
  real _t0D83 = prim /0055 (_t0D7D, _t0D82);
  real _t0D84 = -0.e0;
  bool _t0D85 = prim >0080 (_t0D83, _t0D84);
  real _t0D86 = 0.e0;
  real _t0D87 = 0.e0;
  real _t0D88 = 0.e0;
  real _t0D89 = 0.1e1;
  vec3 _t0D8A = [_t0D87, _t0D88, _t0D89];
  real _t0D8B = prim •00CE<$[3]; $[3]; $[]> (_t0D8A, refPos0BD5);
  real _t0D8C = prim -0026<$[]> (_t0D86, _t0D8B);
  real _t0D8D = 0.e0;
  real _t0D8E = 0.e0;
  real _t0D8F = 0.1e1;
  vec3 _t0D90 = [_t0D8D, _t0D8E, _t0D8F];
  real _t0D91 = prim •00CE<$[3]; $[3]; $[]> (_t0D90, dPos0BD6);
  real _t0D92 = prim /0055 (_t0D8C, _t0D91);
  bool _t0D93 = prim >0080 (time0BD7, _t0D92);
  bool _t0D94 = prim $and01C4 (_t0D85, _t0D93);
  if _t0D94 {
    real _t0D95 = 0.1e1;
    real _t0D96 = 0.1e-8;
    real _t0D97 = prim +0017<$[]> (_t0D95, _t0D96);
    real _t0D98 = 0.1e1;
    real _t0D99 = 0.1e1;
    real _t0D9A = 0.1e1;
    vec3 _t0D9B = [_t0D98, _t0D99, _t0D9A];
    real _t0D9C = 0.e0;
    real _t0D9D = 0.e0;
    real _t0D9E = 0.e0;
    real _t0D9F = 0.1e1;
    vec3 _t0DA0 = [_t0D9D, _t0D9E, _t0D9F];
    real _t0DA1 = prim •00CE<$[3]; $[3]; $[]> (_t0DA0, refPos0BD5);
    real _t0DA2 = prim -0026<$[]> (_t0D9C, _t0DA1);
    real _t0DA3 = 0.e0;
    real _t0DA4 = 0.e0;
    real _t0DA5 = 0.1e1;
    vec3 _t0DA6 = [_t0DA3, _t0DA4, _t0DA5];
    real _t0DA7 = prim •00CE<$[3]; $[3]; $[]> (_t0DA6, dPos0BD6);
    real _t0DA8 = prim /0055 (_t0DA2, _t0DA7);
    vec3 _t0DA9 = prim *0038<$[3]> (dPos0BD6, _t0DA8);
    vec3 _t0DAA = prim +0017<$[3]> (_t0DA9, refPos0BD5);
    real _t0DAB = prim •00CE<$[3]; $[3]; $[]> (_t0D9B, _t0DAA);
    bool _t0DAC = prim >0080 (_t0D97, _t0DAB);
    real _t0DAD = 0.1e-8;
    real _t0DAE = 0.1e-8;
    real _t0DAF = 0.1e-8;
    vec3 _t0DB0 = [_t0DAD, _t0DAE, _t0DAF];
    real _t0DB1 = 0.e0;
    real _t0DB2 = 0.e0;
    real _t0DB3 = 0.e0;
    real _t0DB4 = 0.1e1;
    vec3 _t0DB5 = [_t0DB2, _t0DB3, _t0DB4];
    real _t0DB6 = prim •00CE<$[3]; $[3]; $[]> (_t0DB5, refPos0BD5);
    real _t0DB7 = prim -0026<$[]> (_t0DB1, _t0DB6);
    real _t0DB8 = 0.e0;
    real _t0DB9 = 0.e0;
    real _t0DBA = 0.1e1;
    vec3 _t0DBB = [_t0DB8, _t0DB9, _t0DBA];
    real _t0DBC = prim •00CE<$[3]; $[3]; $[]> (_t0DBB, dPos0BD6);
    real _t0DBD = prim /0055 (_t0DB7, _t0DBC);
    vec3 _t0DBE = prim *0038<$[3]> (dPos0BD6, _t0DBD);
    vec3 _t0DBF = prim +0017<$[3]> (_t0DBE, refPos0BD5);
    vec3 _t0DC0 = prim +0017<$[3]> (_t0DB0, _t0DBF);
    real _t0DC1 = _t0DC0[0];
    real _t0DC2 = -0.e0;
    bool _t0DC3 = prim >0080 (_t0DC1, _t0DC2);
    real _t0DC4 = 0.1e-8;
    real _t0DC5 = 0.1e-8;
    real _t0DC6 = 0.1e-8;
    vec3 _t0DC7 = [_t0DC4, _t0DC5, _t0DC6];
    real _t0DC8 = 0.e0;
    real _t0DC9 = 0.e0;
    real _t0DCA = 0.e0;
    real _t0DCB = 0.1e1;
    vec3 _t0DCC = [_t0DC9, _t0DCA, _t0DCB];
    real _t0DCD = prim •00CE<$[3]; $[3]; $[]> (_t0DCC, refPos0BD5);
    real _t0DCE = prim -0026<$[]> (_t0DC8, _t0DCD);
    real _t0DCF = 0.e0;
    real _t0DD0 = 0.e0;
    real _t0DD1 = 0.1e1;
    vec3 _t0DD2 = [_t0DCF, _t0DD0, _t0DD1];
    real _t0DD3 = prim •00CE<$[3]; $[3]; $[]> (_t0DD2, dPos0BD6);
    real _t0DD4 = prim /0055 (_t0DCE, _t0DD3);
    vec3 _t0DD5 = prim *0038<$[3]> (dPos0BD6, _t0DD4);
    vec3 _t0DD6 = prim +0017<$[3]> (_t0DD5, refPos0BD5);
    vec3 _t0DD7 = prim +0017<$[3]> (_t0DC7, _t0DD6);
    real _t0DD8 = _t0DD7[1];
    real _t0DD9 = -0.e0;
    bool _t0DDA = prim >0080 (_t0DD8, _t0DD9);
    real _t0DDB = 0.1e-8;
    real _t0DDC = 0.1e-8;
    real _t0DDD = 0.1e-8;
    vec3 _t0DDE = [_t0DDB, _t0DDC, _t0DDD];
    real _t0DDF = 0.e0;
    real _t0DE0 = 0.e0;
    real _t0DE1 = 0.e0;
    real _t0DE2 = 0.1e1;
    vec3 _t0DE3 = [_t0DE0, _t0DE1, _t0DE2];
    real _t0DE4 = prim •00CE<$[3]; $[3]; $[]> (_t0DE3, refPos0BD5);
    real _t0DE5 = prim -0026<$[]> (_t0DDF, _t0DE4);
    real _t0DE6 = 0.e0;
    real _t0DE7 = 0.e0;
    real _t0DE8 = 0.1e1;
    vec3 _t0DE9 = [_t0DE6, _t0DE7, _t0DE8];
    real _t0DEA = prim •00CE<$[3]; $[3]; $[]> (_t0DE9, dPos0BD6);
    real _t0DEB = prim /0055 (_t0DE5, _t0DEA);
    vec3 _t0DEC = prim *0038<$[3]> (dPos0BD6, _t0DEB);
    vec3 _t0DED = prim +0017<$[3]> (_t0DEC, refPos0BD5);
    vec3 _t0DEE = prim +0017<$[3]> (_t0DDE, _t0DED);
    real _t0DEF = _t0DEE[2];
    real _t0DF0 = -0.e0;
    bool _t0DF1 = prim >0080 (_t0DEF, _t0DF0);
    bool _t0DF2 = prim $and01C4 (_t0DDA, _t0DF1);
    bool _t0DF3 = prim $and01C4 (_t0DC3, _t0DF2);
    bool _t0DF4 = prim $and01C4 (_t0DAC, _t0DF3);
    if _t0DF4 {
      real _t0DF5 = 0.e0;
      real _t0DF6 = 0.e0;
      real _t0DF7 = 0.e0;
      real _t0DF8 = 0.1e1;
      vec3 _t0DF9 = [_t0DF6, _t0DF7, _t0DF8];
      real _t0DFA = prim •00CE<$[3]; $[3]; $[]> (_t0DF9, refPos0BD5);
      real _t0DFB = prim -0026<$[]> (_t0DF5, _t0DFA);
      real _t0DFC = 0.e0;
      real _t0DFD = 0.e0;
      real _t0DFE = 0.1e1;
      vec3 _t0DFF = [_t0DFC, _t0DFD, _t0DFE];
      real _t0E00 = prim •00CE<$[3]; $[3]; $[]> (_t0DFF, dPos0BD6);
      time0BD7 = prim /0055 (_t0DFB, _t0E00);
      face0BD8 = 3;
    }
  }
  int _t0E01 = -1;
  bool _t0E02 = prim !=0086 (face0BD8, _t0E01);
  if _t0E02 {
    real _t0E03 = (real)face0BD8;
    vec2 _t0E04 = [time0BD7, _t0E03];
    return _t0E04;
  } else {
    real _t0E05 = -0.1e1;
    real _t0E06 = -0.1e1;
    vec2 _t0E07 = [_t0E05, _t0E06];
    return _t0E07;
  }
}
function vec2#0 _exit0E08 (vec3 refPos0BD5, vec3 dPos0BD6)
{
  real time0E09 = +inf;
  int face0E0A = -1;
  real _t0E0B = 0.57735026919e0;
  real _t0E0C = 0.57735026919e0;
  real _t0E0D = -0.57735026919e0;
  real _t0E0E = 0.57735026919e0;
  vec3 _t0E0F = [_t0E0C, _t0E0D, _t0E0E];
  real _t0E10 = prim •00CE<$[3]; $[3]; $[]> (_t0E0F, refPos0BD5);
  real _t0E11 = prim -0026<$[]> (_t0E0B, _t0E10);
  real _t0E12 = 0.57735026919e0;
  real _t0E13 = -0.57735026919e0;
  real _t0E14 = 0.57735026919e0;
  vec3 _t0E15 = [_t0E12, _t0E13, _t0E14];
  real _t0E16 = prim •00CE<$[3]; $[3]; $[]> (_t0E15, dPos0BD6);
  real _t0E17 = prim /0055 (_t0E11, _t0E16);
  real _t0E18 = -0.e0;
  bool _t0E19 = prim >0080 (_t0E17, _t0E18);
  real _t0E1A = 0.57735026919e0;
  real _t0E1B = 0.57735026919e0;
  real _t0E1C = -0.57735026919e0;
  real _t0E1D = 0.57735026919e0;
  vec3 _t0E1E = [_t0E1B, _t0E1C, _t0E1D];
  real _t0E1F = prim •00CE<$[3]; $[3]; $[]> (_t0E1E, refPos0BD5);
  real _t0E20 = prim -0026<$[]> (_t0E1A, _t0E1F);
  real _t0E21 = 0.57735026919e0;
  real _t0E22 = -0.57735026919e0;
  real _t0E23 = 0.57735026919e0;
  vec3 _t0E24 = [_t0E21, _t0E22, _t0E23];
  real _t0E25 = prim •00CE<$[3]; $[3]; $[]> (_t0E24, dPos0BD6);
  real _t0E26 = prim /0055 (_t0E20, _t0E25);
  bool _t0E27 = prim >0080 (time0E09, _t0E26);
  bool _t0E28 = prim $and01C4 (_t0E19, _t0E27);
  if _t0E28 {
    real _t0E29 = 0.57735026919e0;
    real _t0E2A = 0.57735026919e0;
    real _t0E2B = -0.57735026919e0;
    real _t0E2C = 0.57735026919e0;
    vec3 _t0E2D = [_t0E2A, _t0E2B, _t0E2C];
    real _t0E2E = prim •00CE<$[3]; $[3]; $[]> (_t0E2D, refPos0BD5);
    real _t0E2F = prim -0026<$[]> (_t0E29, _t0E2E);
    real _t0E30 = 0.57735026919e0;
    real _t0E31 = -0.57735026919e0;
    real _t0E32 = 0.57735026919e0;
    vec3 _t0E33 = [_t0E30, _t0E31, _t0E32];
    real _t0E34 = prim •00CE<$[3]; $[3]; $[]> (_t0E33, dPos0BD6);
    time0E09 = prim /0055 (_t0E2F, _t0E34);
    face0E0A = 0;
  }
  real _t0E35 = 0.e0;
  real _t0E36 = 0.1e1;
  real _t0E37 = 0.e0;
  real _t0E38 = 0.e0;
  vec3 _t0E39 = [_t0E36, _t0E37, _t0E38];
  real _t0E3A = prim •00CE<$[3]; $[3]; $[]> (_t0E39, refPos0BD5);
  real _t0E3B = prim -0026<$[]> (_t0E35, _t0E3A);
  real _t0E3C = 0.1e1;
  real _t0E3D = 0.e0;
  real _t0E3E = 0.e0;
  vec3 _t0E3F = [_t0E3C, _t0E3D, _t0E3E];
  real _t0E40 = prim •00CE<$[3]; $[3]; $[]> (_t0E3F, dPos0BD6);
  real _t0E41 = prim /0055 (_t0E3B, _t0E40);
  real _t0E42 = -0.e0;
  bool _t0E43 = prim >0080 (_t0E41, _t0E42);
  real _t0E44 = 0.e0;
  real _t0E45 = 0.1e1;
  real _t0E46 = 0.e0;
  real _t0E47 = 0.e0;
  vec3 _t0E48 = [_t0E45, _t0E46, _t0E47];
  real _t0E49 = prim •00CE<$[3]; $[3]; $[]> (_t0E48, refPos0BD5);
  real _t0E4A = prim -0026<$[]> (_t0E44, _t0E49);
  real _t0E4B = 0.1e1;
  real _t0E4C = 0.e0;
  real _t0E4D = 0.e0;
  vec3 _t0E4E = [_t0E4B, _t0E4C, _t0E4D];
  real _t0E4F = prim •00CE<$[3]; $[3]; $[]> (_t0E4E, dPos0BD6);
  real _t0E50 = prim /0055 (_t0E4A, _t0E4F);
  bool _t0E51 = prim >0080 (time0E09, _t0E50);
  bool _t0E52 = prim $and01C4 (_t0E43, _t0E51);
  if _t0E52 {
    real _t0E53 = 0.e0;
    real _t0E54 = 0.1e1;
    real _t0E55 = 0.e0;
    real _t0E56 = 0.e0;
    vec3 _t0E57 = [_t0E54, _t0E55, _t0E56];
    real _t0E58 = prim •00CE<$[3]; $[3]; $[]> (_t0E57, refPos0BD5);
    real _t0E59 = prim -0026<$[]> (_t0E53, _t0E58);
    real _t0E5A = 0.1e1;
    real _t0E5B = 0.e0;
    real _t0E5C = 0.e0;
    vec3 _t0E5D = [_t0E5A, _t0E5B, _t0E5C];
    real _t0E5E = prim •00CE<$[3]; $[3]; $[]> (_t0E5D, dPos0BD6);
    time0E09 = prim /0055 (_t0E59, _t0E5E);
    face0E0A = 1;
  }
  real _t0E5F = 0.e0;
  real _t0E60 = 0.e0;
  real _t0E61 = 0.1e1;
  real _t0E62 = 0.e0;
  vec3 _t0E63 = [_t0E60, _t0E61, _t0E62];
  real _t0E64 = prim •00CE<$[3]; $[3]; $[]> (_t0E63, refPos0BD5);
  real _t0E65 = prim -0026<$[]> (_t0E5F, _t0E64);
  real _t0E66 = 0.e0;
  real _t0E67 = 0.1e1;
  real _t0E68 = 0.e0;
  vec3 _t0E69 = [_t0E66, _t0E67, _t0E68];
  real _t0E6A = prim •00CE<$[3]; $[3]; $[]> (_t0E69, dPos0BD6);
  real _t0E6B = prim /0055 (_t0E65, _t0E6A);
  real _t0E6C = -0.e0;
  bool _t0E6D = prim >0080 (_t0E6B, _t0E6C);
  real _t0E6E = 0.e0;
  real _t0E6F = 0.e0;
  real _t0E70 = 0.1e1;
  real _t0E71 = 0.e0;
  vec3 _t0E72 = [_t0E6F, _t0E70, _t0E71];
  real _t0E73 = prim •00CE<$[3]; $[3]; $[]> (_t0E72, refPos0BD5);
  real _t0E74 = prim -0026<$[]> (_t0E6E, _t0E73);
  real _t0E75 = 0.e0;
  real _t0E76 = 0.1e1;
  real _t0E77 = 0.e0;
  vec3 _t0E78 = [_t0E75, _t0E76, _t0E77];
  real _t0E79 = prim •00CE<$[3]; $[3]; $[]> (_t0E78, dPos0BD6);
  real _t0E7A = prim /0055 (_t0E74, _t0E79);
  bool _t0E7B = prim >0080 (time0E09, _t0E7A);
  bool _t0E7C = prim $and01C4 (_t0E6D, _t0E7B);
  if _t0E7C {
    real _t0E7D = 0.e0;
    real _t0E7E = 0.e0;
    real _t0E7F = 0.1e1;
    real _t0E80 = 0.e0;
    vec3 _t0E81 = [_t0E7E, _t0E7F, _t0E80];
    real _t0E82 = prim •00CE<$[3]; $[3]; $[]> (_t0E81, refPos0BD5);
    real _t0E83 = prim -0026<$[]> (_t0E7D, _t0E82);
    real _t0E84 = 0.e0;
    real _t0E85 = 0.1e1;
    real _t0E86 = 0.e0;
    vec3 _t0E87 = [_t0E84, _t0E85, _t0E86];
    real _t0E88 = prim •00CE<$[3]; $[3]; $[]> (_t0E87, dPos0BD6);
    time0E09 = prim /0055 (_t0E83, _t0E88);
    face0E0A = 2;
  }
  real _t0E89 = 0.e0;
  real _t0E8A = 0.e0;
  real _t0E8B = 0.e0;
  real _t0E8C = 0.1e1;
  vec3 _t0E8D = [_t0E8A, _t0E8B, _t0E8C];
  real _t0E8E = prim •00CE<$[3]; $[3]; $[]> (_t0E8D, refPos0BD5);
  real _t0E8F = prim -0026<$[]> (_t0E89, _t0E8E);
  real _t0E90 = 0.e0;
  real _t0E91 = 0.e0;
  real _t0E92 = 0.1e1;
  vec3 _t0E93 = [_t0E90, _t0E91, _t0E92];
  real _t0E94 = prim •00CE<$[3]; $[3]; $[]> (_t0E93, dPos0BD6);
  real _t0E95 = prim /0055 (_t0E8F, _t0E94);
  real _t0E96 = -0.e0;
  bool _t0E97 = prim >0080 (_t0E95, _t0E96);
  real _t0E98 = 0.e0;
  real _t0E99 = 0.e0;
  real _t0E9A = 0.e0;
  real _t0E9B = 0.1e1;
  vec3 _t0E9C = [_t0E99, _t0E9A, _t0E9B];
  real _t0E9D = prim •00CE<$[3]; $[3]; $[]> (_t0E9C, refPos0BD5);
  real _t0E9E = prim -0026<$[]> (_t0E98, _t0E9D);
  real _t0E9F = 0.e0;
  real _t0EA0 = 0.e0;
  real _t0EA1 = 0.1e1;
  vec3 _t0EA2 = [_t0E9F, _t0EA0, _t0EA1];
  real _t0EA3 = prim •00CE<$[3]; $[3]; $[]> (_t0EA2, dPos0BD6);
  real _t0EA4 = prim /0055 (_t0E9E, _t0EA3);
  bool _t0EA5 = prim >0080 (time0E09, _t0EA4);
  bool _t0EA6 = prim $and01C4 (_t0E97, _t0EA5);
  if _t0EA6 {
    real _t0EA7 = 0.e0;
    real _t0EA8 = 0.e0;
    real _t0EA9 = 0.e0;
    real _t0EAA = 0.1e1;
    vec3 _t0EAB = [_t0EA8, _t0EA9, _t0EAA];
    real _t0EAC = prim •00CE<$[3]; $[3]; $[]> (_t0EAB, refPos0BD5);
    real _t0EAD = prim -0026<$[]> (_t0EA7, _t0EAC);
    real _t0EAE = 0.e0;
    real _t0EAF = 0.e0;
    real _t0EB0 = 0.1e1;
    vec3 _t0EB1 = [_t0EAE, _t0EAF, _t0EB0];
    real _t0EB2 = prim •00CE<$[3]; $[3]; $[]> (_t0EB1, dPos0BD6);
    time0E09 = prim /0055 (_t0EAD, _t0EB2);
    face0E0A = 3;
  }
  int _t0EB3 = -1;
  bool _t0EB4 = prim !=0086 (face0E0A, _t0EB3);
  if _t0EB4 {
    real _t0EB5 = (real)face0E0A;
    vec2 _t0EB6 = [time0E09, _t0EB5];
    return _t0EB6;
  } else {
    real _t0EB7 = -0.1e1;
    real _t0EB8 = -0.1e1;
    vec2 _t0EB9 = [_t0EB7, _t0EB8];
    return _t0EB9;
  }
}
function Femdata: Mesh#0 domain0EBA (Femdata: Space arg00EBB)
{
  Femdata: Mesh _t0EBC = extractFem(arg00EBB, Mesh);
  return _t0EBC;
}
function Femdata: Space#0 space0EBD (Femdata: FemFunc arg00EBE)
{
  Femdata: Space _t0EBF = extractFem(arg00EBE, Space);
  return _t0EBF;
}
function Femdata: FuncCell#0 funcCell0EC0 (Femdata: FemFunc arg00EC1, Femdata: MeshCell arg10EC2)
{
  int _t0EC3 = extractFemItem(CellIndex(MeshCell), int, arg10EC2);
  Femdata: FuncCell _t0EC4 = loadFem(FuncCell, arg00EC1, _t0EC3);
  return _t0EC4;
}
globalInit {
  int _t033A = 0;
  int _t0338 = 1;
  int _t033C = extractFemItem(NumCell(Mesh), int, cube0336);
  int _t033B = prim -0024 (_t033C, _t0338);
  int[] _t033F = prim $range01C3 (_t033A, _t033B);
  Femdata: MeshCell[] _t0340 = {};
  foreach _t033E in _t033F {
    Femdata: MeshCell _t0341 = loadFem(MeshCell, cube0336, _t033E);
    _t0340 = prim @0010<Femdata: MeshCell> (_t0340, _t0341);
  }
  0cell_cube0337 = _t0340;
  space0342 = loadFem(Space, 0space0342_intermedateGlobal0343, cube0336);
  data0344 = loadFem(FemFunc, 0data0344_intermedateGlobal0345, space0342);
  Femdata: Space _t0EC5 = extractFem(data0344, Space);
  Femdata: Space _t0EC6 = extractFem(data0344, Space);
  Femdata: Mesh _t0EC7 = extractFem(_t0EC6, Mesh);
  field(3)[] _t0EC8 = femField(data0344,_t0EC7,field(3)[],refField,findPos0350 );
  Femdata: Space _t0EC9 = extractFem(data0344, Space);
  Femdata: Mesh _t0ECA = extractFem(_t0EC9, Mesh);
  Femdata: Space _t0ECB = extractFem(data0344, Space);
  Femdata: Mesh _t0ECC = extractFem(_t0ECB, Mesh);
  Femdata: Space _t0ECD = extractFem(data0344, Space);
  Femdata: Mesh _t0ECE = extractFem(_t0ECD, Mesh);
  field(3)[3] _t0ECF = femField(_t0ECA,_t0ECE,field(3)[3],InvTransform,findPos0350 );
  F0ED0 = prim ∘0164<#∞; %3; $[]; %3; $[3]> (_t0EC8, _t0ECF);
}
strand gg (vec3 i0ED1) {
  output vec3 target0ED2;
  output vec3 translated0ED3;
  output bool valid0ED4;
  output Femdata: MeshCell c0ED5;
  output real result0ED7;
  output vec3 gradResult0ED8;
  output vec3 gradResultp0ED9;
  {
    target0ED2 = i0ED1;
    translated0ED3 = prim $nan01BD<$[3]> ();
    valid0ED4 = false;
    int _t0ED6 = 0;
    c0ED5 = prim $dynsub01C2<Femdata: MeshCell> (0cell_cube0337, _t0ED6);
    result0ED7 = prim $nan01BD<$[]> ();
    gradResult0ED8 = prim $nan01BD<$[3]> ();
    gradResultp0ED9 = prim $nan01BD<$[3]> ();
  }
  update
  {
    string _t0EDA = "Running on ";
    string _t0EDB = "\n";
    print (_t0EDA, target0ED2, _t0EDB);
    Femdata: MeshPos p0EDC = func findPos0350 (cube0336, target0ED2);
    valid0ED4 = extractFemItem(Valid(MeshPos), bool, p0EDC);
    if valid0ED4 {
      Femdata: Mesh _t0EDD = extractFem(p0EDC, Mesh);
      int _t0EDE = extractFemItem(CellIndex(MeshPos), int, p0EDC);
      c0ED5 = loadFem(MeshCell, _t0EDD, _t0EDE);
      translated0ED3 = extractFemItem(RefPos(MeshPos), vec3, p0EDC);
      result0ED7 = prim @00A5<#∞; %3; $[]> (F0ED0, target0ED2);
      field(3)[3] _t0EDF = prim ∇00A8<#∞; %3> (F0ED0);
      gradResult0ED8 = prim @00A5<#∞; %3; $[3]> (_t0EDF, target0ED2);
    } else {
      string _t0EE0 = "Warning: Invalid!\n";
      print (_t0EE0);
    }
    stabilize;
  }
}
collection {
  foreach i0EE1 in points0335 {
    new gg (i0EE1);
  }
}
/* Program end */
/* Simplified Program (after after map-reduce-fusion) start */
properties: GlobalInit,HasInputs,HasGlobals,ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
input vec3[] points0335;
input FemData:Mesh cube0336;
input FemData:Space 0space0342_intermedateGlobal0343;
input FemData:FemFunc 0data0344_intermedateGlobal0345;
constants { }
global Femdata: MeshCell[] 0cell_cube0337;
global Femdata: Space space0342;
global Femdata: FemFunc data0344;
global field(3)[] F0ED0;
function bool#0 !=0346 (Femdata: MeshCell cell10347, Femdata: MeshCell cell10348)
{
  int _t0349 = extractFemItem(CellIndex(Mesh), int, cell10347);
  int _t034A = extractFemItem(CellIndex(Mesh), int, cell10348);
  bool _t034B = prim !=0086 (_t0349, _t034A);
  return _t034B;
}
function bool#0 ==034C (Femdata: MeshCell cell10347, Femdata: MeshCell cell10348)
{
  int _t034D = extractFemItem(CellIndex(Mesh), int, cell10347);
  int _t034E = extractFemItem(CellIndex(Mesh), int, cell10348);
  bool _t034F = prim ==0082 (_t034D, _t034E);
  return _t034F;
}
function Femdata: MeshPos#3 findPos0350 (Femdata: Mesh mesh0351, vec3 pos0352)
{
  real _t0353 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t0354 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t0355 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  xn0356 = [_t0353, _t0354, _t0355];
  newtonInt0357 = 0;
  cellInt0358 = extractFemItem(StartCell(Mesh), int, mesh0351);
  int _t0359 = extractFemItem(NumCell(Mesh), int, mesh0351);
  int _t035A = 1;
  numCell035B = prim -0024 (_t0359, _t035A);
  yayCells035C = extractFemItem2(NearbyCell(File=spat.in)(Mesh), vec3, mesh0351, pos0352 : vec3);
  foreach cellItter035D in yayCells035C {
    cellInt0358 = cellItter035D;
    field(3)[3] _t035E = femField(mesh0351,cellInt0358,field(3)[3],Transform,);
    field(3)[3,3] _t035F = prim ∇⊗00AD<#∞; %3; $[]; %3> (_t035E);
    field(3)[3,3] _t0360 = prim inv015E<#∞; %3> (_t035F);
    real _t0361 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    real _t0362 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    real _t0363 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    vec3 _t0364 = [_t0361, _t0362, _t0363];
    A0365 = prim @00A5<#∞; %3; $[3,3]> (_t0360, _t0364);
    int _t0366 = 0;
    int _t0367 = 16;
    int[] _t0368 = prim $range01C3 (_t0366, _t0367);
    foreach newtonItter0397 in _t0368 {
      field(3)[3] _t0369 = femField(mesh0351,cellInt0358,field(3)[3],Transform,);
      field(3)[3] _t036A = prim -002E<#∞; %3; $[3]> (_t0369, pos0352);
      field(3)[3] _t036B = prim •00D4<#∞; %3; $[3,3]; $[3]; $[3]> (A0365, _t036A);
      delta036C = prim @00A5<#∞; %3; $[3]> (_t036B, xn0356);
      xn0356 = prim -0026<$[3]> (xn0356, delta036C);
      real _t036D = 0.1e-7;
      real _t036E = 0.1e-7;
      real _t036F = prim *0034 (_t036D, _t036E);
      real _t0370 = prim •00CE<$[3]; $[3]; $[]> (delta036C, delta036C);
      bool _t0371 = prim >=007E (_t036F, _t0370);
      if _t0371 {
        real _t0372 = 0.1e1;
        real _t0373 = 0.1e-8;
        real _t0374 = prim +0017<$[]> (_t0372, _t0373);
        real _t0375 = 0.1e1;
        real _t0376 = 0.1e1;
        real _t0377 = 0.1e1;
        vec3 _t0378 = [_t0375, _t0376, _t0377];
        real _t0379 = prim •00CE<$[3]; $[3]; $[]> (_t0378, xn0356);
        bool _t037A = prim >0080 (_t0374, _t0379);
        real _t037B = 0.1e-8;
        real _t037C = 0.1e-8;
        real _t037D = 0.1e-8;
        vec3 _t037E = [_t037B, _t037C, _t037D];
        vec3 _t037F = prim +0017<$[3]> (_t037E, xn0356);
        real _t0380 = _t037F[0];
        real _t0381 = -0.e0;
        bool _t0382 = prim >0080 (_t0380, _t0381);
        real _t0383 = 0.1e-8;
        real _t0384 = 0.1e-8;
        real _t0385 = 0.1e-8;
        vec3 _t0386 = [_t0383, _t0384, _t0385];
        vec3 _t0387 = prim +0017<$[3]> (_t0386, xn0356);
        real _t0388 = _t0387[1];
        real _t0389 = -0.e0;
        bool _t038A = prim >0080 (_t0388, _t0389);
        real _t038B = 0.1e-8;
        real _t038C = 0.1e-8;
        real _t038D = 0.1e-8;
        vec3 _t038E = [_t038B, _t038C, _t038D];
        vec3 _t038F = prim +0017<$[3]> (_t038E, xn0356);
        real _t0390 = _t038F[2];
        real _t0391 = -0.e0;
        bool _t0392 = prim >0080 (_t0390, _t0391);
        bool _t0393 = prim $and01C4 (_t038A, _t0392);
        bool _t0394 = prim $and01C4 (_t0382, _t0393);
        bool _t0395 = prim $and01C4 (_t037A, _t0394);
        if _t0395 {
          Femdata: MeshPos _t0396 = extractFemItemN((mesh0351, cellInt0358, xn0356, pos0352),AllBuild(MeshPos),);
          return _t0396;
        }
      }
    }
  }
  string _t0398 = "Bad end 2";
  string _t0399 = "\n";
  print (_t0398, _t0399);
  Femdata: MeshPos _t039A = extractFemItemN((mesh0351),InvalidBuild(MeshPos),);
  return _t039A;
}
function Femdata: RefCell#0 refcell039B (Femdata: Mesh arg0039C)
{
  Femdata: RefCell _t039D = extractFemItem(RefCell(Mesh), Femdata: RefCell, arg0039C);
  return _t039D;
}
function Femdata: MeshCell[]#0 cells039E (Femdata: Mesh arg0039F)
{
  Femdata: MeshCell[] _t03A0 = extractFemItem(Cells(Mesh), Femdata: MeshCell[], arg0039F);
  return _t03A0;
}
function Femdata: MeshCell[]#0 cells03A1 (Femdata: Mesh arg0039F)
{
  int _t03A2 = 0;
  int _t03A3 = extractFemItem(NumCell(Mesh), int, arg0039F);
  int[] _t03A4 = prim $range01C3 (_t03A2, _t03A3);
  Femdata: MeshCell[] accum03A7 = {};
  foreach i03A5 in _t03A4 {
    Femdata: MeshCell _t03A6 = loadFem(MeshCell, arg0039F, i03A5);
    accum03A7 = prim @0010<Femdata: MeshCell> (accum03A7, _t03A6);
  }
  return accum03A7;
}
function int#0 numCell03A8 (Femdata: Mesh arg0039C)
{
  int _t03A9 = extractFemItem(NumCell(Mesh), int, arg0039C);
  return _t03A9;
}
function tensor[3,3,3,3]#0 mesh_t_transform_303AA (vec3 pos03AB, int cell03AC, Femdata: Mesh mesh03AD)
{
  field(3)[3] _t03AE = femField(mesh03AD,cell03AC,field(3)[3],Transform,);
  field(3)[3,3] _t03AF = prim ∇⊗00AD<#∞; %3; $[]; %3> (_t03AE);
  field(3)[3,3,3] _t03B0 = prim ∇⊗00AD<#∞; %3; $[3]; %3> (_t03AF);
  field(3)[3,3,3,3] _t03B1 = prim ∇⊗00AD<#∞; %3; $[3,3]; %3> (_t03B0);
  tensor[3,3,3,3] _t03B2 = prim @00A5<#∞; %3; $[3,3,3,3]> (_t03B1, pos03AB);
  return _t03B2;
}
function tensor[3,3,3]#0 mesh_t_transform_203B3 (vec3 pos03AB, int cell03AC, Femdata: Mesh mesh03AD)
{
  field(3)[3] _t03B4 = femField(mesh03AD,cell03AC,field(3)[3],Transform,);
  field(3)[3,3] _t03B5 = prim ∇⊗00AD<#∞; %3; $[]; %3> (_t03B4);
  field(3)[3,3,3] _t03B6 = prim ∇⊗00AD<#∞; %3; $[3]; %3> (_t03B5);
  tensor[3,3,3] _t03B7 = prim @00A5<#∞; %3; $[3,3,3]> (_t03B6, pos03AB);
  return _t03B7;
}
function tensor[3,3]#0 mesh_t_transform_103B8 (vec3 pos03AB, int cell03AC, Femdata: Mesh mesh03AD)
{
  field(3)[3] _t03B9 = femField(mesh03AD,cell03AC,field(3)[3],Transform,);
  field(3)[3,3] _t03BA = prim ∇⊗00AD<#∞; %3; $[]; %3> (_t03B9);
  tensor[3,3] _t03BB = prim @00A5<#∞; %3; $[3,3]> (_t03BA, pos03AB);
  return _t03BB;
}
function vec3#2 mesh_t_transform_003BC (vec3 pos03AB, int cell03AC, Femdata: Mesh mesh03AD)
{
  field(3)[3] _t03BD = femField(mesh03AD,cell03AC,field(3)[3],Transform,);
  vec3 _t03BE = prim @00A5<#∞; %3; $[3]> (_t03BD, pos03AB);
  return _t03BE;
}
function Femdata: MeshPos#0 _mesh_t_newtonInverse03BF (vec3 pos03C0, int cellInt03C1, Femdata: Mesh mesh03C2)
{
  real _t03C3 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t03C4 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t03C5 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  xn03C6 = [_t03C3, _t03C4, _t03C5];
  field(3)[3] _t03C7 = femField(mesh03C2,cellInt03C1,field(3)[3],Transform,);
  field(3)[3,3] _t03C8 = prim ∇⊗00AD<#∞; %3; $[]; %3> (_t03C7);
  field(3)[3,3] _t03C9 = prim inv015E<#∞; %3> (_t03C8);
  real _t03CA = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t03CB = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t03CC = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  vec3 _t03CD = [_t03CA, _t03CB, _t03CC];
  A03CE = prim @00A5<#∞; %3; $[3,3]> (_t03C9, _t03CD);
  int _t03CF = 0;
  int _t03D0 = 16;
  int[] _t03D1 = prim $range01C3 (_t03CF, _t03D0);
  foreach itter0401 in _t03D1 {
    field(3)[3] _t03D2 = femField(mesh03C2,cellInt03C1,field(3)[3],Transform,);
    field(3)[3] _t03D3 = prim -002E<#∞; %3; $[3]> (_t03D2, pos03C0);
    field(3)[3] _t03D4 = prim •00D4<#∞; %3; $[3,3]; $[3]; $[3]> (A03CE, _t03D3);
    delta03D5 = prim @00A5<#∞; %3; $[3]> (_t03D4, xn03C6);
    xn03C6 = prim -0026<$[3]> (xn03C6, delta03D5);
    real _t03D6 = 0.1e-7;
    real _t03D7 = 0.1e-7;
    real _t03D8 = prim *0034 (_t03D6, _t03D7);
    real _t03D9 = prim •00CE<$[3]; $[3]; $[]> (delta03D5, delta03D5);
    bool _t03DA = prim >=007E (_t03D8, _t03D9);
    if _t03DA {
      real _t03DB = 0.1e1;
      real _t03DC = 0.1e-8;
      real _t03DD = prim +0017<$[]> (_t03DB, _t03DC);
      real _t03DE = 0.1e1;
      real _t03DF = 0.1e1;
      real _t03E0 = 0.1e1;
      vec3 _t03E1 = [_t03DE, _t03DF, _t03E0];
      real _t03E2 = prim •00CE<$[3]; $[3]; $[]> (_t03E1, xn03C6);
      bool _t03E3 = prim >0080 (_t03DD, _t03E2);
      real _t03E4 = 0.1e-8;
      real _t03E5 = 0.1e-8;
      real _t03E6 = 0.1e-8;
      vec3 _t03E7 = [_t03E4, _t03E5, _t03E6];
      vec3 _t03E8 = prim +0017<$[3]> (_t03E7, xn03C6);
      real _t03E9 = _t03E8[0];
      real _t03EA = -0.e0;
      bool _t03EB = prim >0080 (_t03E9, _t03EA);
      real _t03EC = 0.1e-8;
      real _t03ED = 0.1e-8;
      real _t03EE = 0.1e-8;
      vec3 _t03EF = [_t03EC, _t03ED, _t03EE];
      vec3 _t03F0 = prim +0017<$[3]> (_t03EF, xn03C6);
      real _t03F1 = _t03F0[1];
      real _t03F2 = -0.e0;
      bool _t03F3 = prim >0080 (_t03F1, _t03F2);
      real _t03F4 = 0.1e-8;
      real _t03F5 = 0.1e-8;
      real _t03F6 = 0.1e-8;
      vec3 _t03F7 = [_t03F4, _t03F5, _t03F6];
      vec3 _t03F8 = prim +0017<$[3]> (_t03F7, xn03C6);
      real _t03F9 = _t03F8[2];
      real _t03FA = -0.e0;
      bool _t03FB = prim >0080 (_t03F9, _t03FA);
      bool _t03FC = prim $and01C4 (_t03F3, _t03FB);
      bool _t03FD = prim $and01C4 (_t03EB, _t03FC);
      bool _t03FE = prim $and01C4 (_t03E3, _t03FD);
      if _t03FE {
        Femdata: MeshPos _t03FF = extractFemItemN((mesh03C2, cellInt03C1, xn03C6, pos03C0),AllBuild(MeshPos),);
        return _t03FF;
      } else {
        Femdata: MeshPos _t0400 = extractFemItemN((mesh03C2),InvalidBuild(MeshPos),);
        return _t0400;
      }
    }
  }
  Femdata: MeshPos _t0402 = extractFemItemN((mesh03C2),InvalidBuild(MeshPos),);
  return _t0402;
}
function Femdata: MeshPos#0 _mesh_pos_mesh_t_build_world_pos0403 (Femdata: MeshPos pos0404)
{
  bool _t0405 = extractFemItem(WorldTest(MeshPos), bool, pos0404);
  if _t0405 {
    vec3 _t0406 = extractFemItem(RefPos(MeshPos), vec3, pos0404);
    int _t0407 = extractFemItem(CellIndex(MeshPos), int, pos0404);
    Femdata: Mesh _t0408 = extractFem(pos0404, Mesh);
    vec3 _t0409 = func mesh_t_transform_003BC (_t0406, _t0407, _t0408);
    Femdata: MeshPos _t040A = extractFemItemN((pos0404, _t0409),NewWorld(MeshPos),);
    return _t040A;
  } else {
    return pos0404;
  }
}
function vec3#0 worldPos040B (Femdata: MeshPos pos0404)
{
  vec3 _t040C = extractFemItem(RefPos(MeshPos), vec3, pos0404);
  int _t040D = extractFemItem(CellIndex(MeshPos), int, pos0404);
  Femdata: Mesh _t040E = extractFem(pos0404, Mesh);
  vec3 _t040F = func mesh_t_transform_003BC (_t040C, _t040D, _t040E);
  return _t040F;
}
function Femdata: MeshPos#0 $exitPos0410 (Femdata: Mesh mesh0411, int cellId0412, vec3 refPos0413, vec3 dPos0414, real[2] time0415)
{
  int _t0416 = -1;
  real _t0417 = time0415[1];
  int _t0418 = prim $r2i01B7 (_t0417);
  int[2] _t041A = func nextCell40419 (_t0418, cellId0412, mesh0411);
  int _t041B = 0;
  int _t041C = prim $sub01C0<int; %2> (_t041A, _t041B);
  bool _t041D = prim !=0086 (_t0416, _t041C);
  if _t041D {
    real _t041E = time0415[1];
    int _t041F = prim $r2i01B7 (_t041E);
    int[2] _t0420 = func nextCell40419 (_t041F, cellId0412, mesh0411);
    int _t0421 = 0;
    int _t0422 = prim $sub01C0<int; %2> (_t0420, _t0421);
    real _t0423 = 0.1e1;
    real _t0424 = 0.e0;
    real _t0425 = 0.e0;
    real _t0426 = 0.e0;
    vec4 _t0427 = [_t0423, _t0424, _t0425, _t0426];
    real _t0428 = 0.e0;
    real _t0429 = 0.1e1;
    real _t042A = 0.e0;
    real _t042B = 0.e0;
    vec4 _t042C = [_t0428, _t0429, _t042A, _t042B];
    real _t042D = 0.e0;
    real _t042E = 0.e0;
    real _t042F = 0.1e1;
    real _t0430 = 0.e0;
    vec4 _t0431 = [_t042D, _t042E, _t042F, _t0430];
    real _t0432 = 0.222044604925e-15;
    real _t0433 = 0.e0;
    real _t0434 = 0.44408920985e-15;
    real _t0435 = 0.1e1;
    vec4 _t0436 = [_t0432, _t0433, _t0434, _t0435];
    tensor[4,4] _t0437 = [_t0427, _t042C, _t0431, _t0436];
    real _t0438 = 0.173205080757e1;
    real _t0439 = 0.173205080757e1;
    real _t043A = 0.173205080757e1;
    real _t043B = -0.173205080757e1;
    vec4 _t043C = [_t0438, _t0439, _t043A, _t043B];
    real _t043D = 0.1e1;
    real _t043E = 0.2e1;
    real _t043F = 0.1e1;
    real _t0440 = -0.1e1;
    vec4 _t0441 = [_t043D, _t043E, _t043F, _t0440];
    real _t0442 = -0.1e1;
    real _t0443 = -0.1e1;
    real _t0444 = -0.192296268638e-15;
    real _t0445 = 0.1e1;
    vec4 _t0446 = [_t0442, _t0443, _t0444, _t0445];
    real _t0447 = 0.222044604925e-15;
    real _t0448 = 0.e0;
    real _t0449 = 0.44408920985e-15;
    real _t044A = 0.1e1;
    vec4 _t044B = [_t0447, _t0448, _t0449, _t044A];
    tensor[4,4] _t044C = [_t043C, _t0441, _t0446, _t044B];
    real _t044D = 0.1e1;
    real _t044E = 0.2e1;
    real _t044F = 0.1e1;
    real _t0450 = -0.1e1;
    vec4 _t0451 = [_t044D, _t044E, _t044F, _t0450];
    real _t0452 = 0.173205080757e1;
    real _t0453 = 0.173205080757e1;
    real _t0454 = 0.173205080757e1;
    real _t0455 = -0.173205080757e1;
    vec4 _t0456 = [_t0452, _t0453, _t0454, _t0455];
    real _t0457 = -0.1e1;
    real _t0458 = -0.1e1;
    real _t0459 = -0.192296268638e-15;
    real _t045A = 0.1e1;
    vec4 _t045B = [_t0457, _t0458, _t0459, _t045A];
    real _t045C = 0.222044604925e-15;
    real _t045D = 0.e0;
    real _t045E = 0.44408920985e-15;
    real _t045F = 0.1e1;
    vec4 _t0460 = [_t045C, _t045D, _t045E, _t045F];
    tensor[4,4] _t0461 = [_t0451, _t0456, _t045B, _t0460];
    real _t0462 = 0.1e1;
    real _t0463 = 0.2e1;
    real _t0464 = 0.1e1;
    real _t0465 = -0.1e1;
    vec4 _t0466 = [_t0462, _t0463, _t0464, _t0465];
    real _t0467 = -0.1e1;
    real _t0468 = -0.1e1;
    real _t0469 = -0.192296268638e-15;
    real _t046A = 0.1e1;
    vec4 _t046B = [_t0467, _t0468, _t0469, _t046A];
    real _t046C = 0.173205080757e1;
    real _t046D = 0.173205080757e1;
    real _t046E = 0.173205080757e1;
    real _t046F = -0.173205080757e1;
    vec4 _t0470 = [_t046C, _t046D, _t046E, _t046F];
    real _t0471 = 0.222044604925e-15;
    real _t0472 = 0.e0;
    real _t0473 = 0.44408920985e-15;
    real _t0474 = 0.1e1;
    vec4 _t0475 = [_t0471, _t0472, _t0473, _t0474];
    tensor[4,4] _t0476 = [_t0466, _t046B, _t0470, _t0475];
    tensor[4,4][4] _t0477 = {_t0437, _t044C, _t0461, _t0476};
    real _t0478 = 0.57735026919e0;
    real _t0479 = -0.1e1;
    real _t047A = -0.1e1;
    real _t047B = 0.1e1;
    vec4 _t047C = [_t0478, _t0479, _t047A, _t047B];
    real _t047D = -0.57735026919e0;
    real _t047E = 0.1e1;
    real _t047F = 0.e0;
    real _t0480 = 0.e0;
    vec4 _t0481 = [_t047D, _t047E, _t047F, _t0480];
    real _t0482 = 0.57735026919e0;
    real _t0483 = 0.e0;
    real _t0484 = 0.1e1;
    real _t0485 = 0.e0;
    vec4 _t0486 = [_t0482, _t0483, _t0484, _t0485];
    real _t0487 = 0.e0;
    real _t0488 = 0.e0;
    real _t0489 = 0.e0;
    real _t048A = 0.1e1;
    vec4 _t048B = [_t0487, _t0488, _t0489, _t048A];
    tensor[4,4] _t048C = [_t047C, _t0481, _t0486, _t048B];
    real _t048D = 0.1e1;
    real _t048E = 0.e0;
    real _t048F = 0.e0;
    real _t0490 = 0.e0;
    vec4 _t0491 = [_t048D, _t048E, _t048F, _t0490];
    real _t0492 = 0.e0;
    real _t0493 = 0.1e1;
    real _t0494 = 0.e0;
    real _t0495 = 0.e0;
    vec4 _t0496 = [_t0492, _t0493, _t0494, _t0495];
    real _t0497 = 0.e0;
    real _t0498 = 0.e0;
    real _t0499 = 0.1e1;
    real _t049A = 0.e0;
    vec4 _t049B = [_t0497, _t0498, _t0499, _t049A];
    real _t049C = 0.e0;
    real _t049D = 0.e0;
    real _t049E = 0.e0;
    real _t049F = 0.1e1;
    vec4 _t04A0 = [_t049C, _t049D, _t049E, _t049F];
    tensor[4,4] _t04A1 = [_t0491, _t0496, _t049B, _t04A0];
    real _t04A2 = 0.e0;
    real _t04A3 = 0.1e1;
    real _t04A4 = 0.e0;
    real _t04A5 = 0.e0;
    vec4 _t04A6 = [_t04A2, _t04A3, _t04A4, _t04A5];
    real _t04A7 = 0.1e1;
    real _t04A8 = 0.e0;
    real _t04A9 = 0.e0;
    real _t04AA = 0.e0;
    vec4 _t04AB = [_t04A7, _t04A8, _t04A9, _t04AA];
    real _t04AC = 0.e0;
    real _t04AD = 0.e0;
    real _t04AE = 0.1e1;
    real _t04AF = 0.e0;
    vec4 _t04B0 = [_t04AC, _t04AD, _t04AE, _t04AF];
    real _t04B1 = 0.e0;
    real _t04B2 = 0.e0;
    real _t04B3 = 0.e0;
    real _t04B4 = 0.1e1;
    vec4 _t04B5 = [_t04B1, _t04B2, _t04B3, _t04B4];
    tensor[4,4] _t04B6 = [_t04A6, _t04AB, _t04B0, _t04B5];
    real _t04B7 = 0.e0;
    real _t04B8 = 0.1e1;
    real _t04B9 = 0.e0;
    real _t04BA = 0.e0;
    vec4 _t04BB = [_t04B7, _t04B8, _t04B9, _t04BA];
    real _t04BC = 0.e0;
    real _t04BD = 0.e0;
    real _t04BE = 0.1e1;
    real _t04BF = 0.e0;
    vec4 _t04C0 = [_t04BC, _t04BD, _t04BE, _t04BF];
    real _t04C1 = 0.1e1;
    real _t04C2 = 0.e0;
    real _t04C3 = 0.e0;
    real _t04C4 = 0.e0;
    vec4 _t04C5 = [_t04C1, _t04C2, _t04C3, _t04C4];
    real _t04C6 = 0.e0;
    real _t04C7 = 0.e0;
    real _t04C8 = 0.e0;
    real _t04C9 = 0.1e1;
    vec4 _t04CA = [_t04C6, _t04C7, _t04C8, _t04C9];
    tensor[4,4] _t04CB = [_t04BB, _t04C0, _t04C5, _t04CA];
    tensor[4,4][4] _t04CC = {_t048C, _t04A1, _t04B6, _t04CB};
    real _t04CD = -0.1e1;
    real _t04CE = 0.57735026919e0;
    real _t04CF = -0.1e1;
    real _t04D0 = 0.1e1;
    vec4 _t04D1 = [_t04CD, _t04CE, _t04CF, _t04D0];
    real _t04D2 = 0.1e1;
    real _t04D3 = -0.57735026919e0;
    real _t04D4 = 0.e0;
    real _t04D5 = 0.e0;
    vec4 _t04D6 = [_t04D2, _t04D3, _t04D4, _t04D5];
    real _t04D7 = 0.e0;
    real _t04D8 = 0.57735026919e0;
    real _t04D9 = 0.1e1;
    real _t04DA = 0.e0;
    vec4 _t04DB = [_t04D7, _t04D8, _t04D9, _t04DA];
    real _t04DC = 0.e0;
    real _t04DD = 0.e0;
    real _t04DE = 0.e0;
    real _t04DF = 0.1e1;
    vec4 _t04E0 = [_t04DC, _t04DD, _t04DE, _t04DF];
    tensor[4,4] _t04E1 = [_t04D1, _t04D6, _t04DB, _t04E0];
    real _t04E2 = 0.e0;
    real _t04E3 = 0.1e1;
    real _t04E4 = 0.e0;
    real _t04E5 = 0.e0;
    vec4 _t04E6 = [_t04E2, _t04E3, _t04E4, _t04E5];
    real _t04E7 = 0.1e1;
    real _t04E8 = 0.e0;
    real _t04E9 = 0.e0;
    real _t04EA = 0.e0;
    vec4 _t04EB = [_t04E7, _t04E8, _t04E9, _t04EA];
    real _t04EC = 0.e0;
    real _t04ED = 0.e0;
    real _t04EE = 0.1e1;
    real _t04EF = 0.e0;
    vec4 _t04F0 = [_t04EC, _t04ED, _t04EE, _t04EF];
    real _t04F1 = 0.e0;
    real _t04F2 = 0.e0;
    real _t04F3 = 0.e0;
    real _t04F4 = 0.1e1;
    vec4 _t04F5 = [_t04F1, _t04F2, _t04F3, _t04F4];
    tensor[4,4] _t04F6 = [_t04E6, _t04EB, _t04F0, _t04F5];
    real _t04F7 = 0.1e1;
    real _t04F8 = 0.e0;
    real _t04F9 = 0.e0;
    real _t04FA = 0.e0;
    vec4 _t04FB = [_t04F7, _t04F8, _t04F9, _t04FA];
    real _t04FC = 0.e0;
    real _t04FD = 0.1e1;
    real _t04FE = 0.e0;
    real _t04FF = 0.e0;
    vec4 _t0500 = [_t04FC, _t04FD, _t04FE, _t04FF];
    real _t0501 = 0.e0;
    real _t0502 = 0.e0;
    real _t0503 = 0.1e1;
    real _t0504 = 0.e0;
    vec4 _t0505 = [_t0501, _t0502, _t0503, _t0504];
    real _t0506 = 0.e0;
    real _t0507 = 0.e0;
    real _t0508 = 0.e0;
    real _t0509 = 0.1e1;
    vec4 _t050A = [_t0506, _t0507, _t0508, _t0509];
    tensor[4,4] _t050B = [_t04FB, _t0500, _t0505, _t050A];
    real _t050C = 0.1e1;
    real _t050D = 0.e0;
    real _t050E = 0.e0;
    real _t050F = 0.e0;
    vec4 _t0510 = [_t050C, _t050D, _t050E, _t050F];
    real _t0511 = 0.e0;
    real _t0512 = 0.e0;
    real _t0513 = 0.1e1;
    real _t0514 = 0.e0;
    vec4 _t0515 = [_t0511, _t0512, _t0513, _t0514];
    real _t0516 = 0.e0;
    real _t0517 = 0.1e1;
    real _t0518 = 0.e0;
    real _t0519 = 0.e0;
    vec4 _t051A = [_t0516, _t0517, _t0518, _t0519];
    real _t051B = 0.e0;
    real _t051C = 0.e0;
    real _t051D = 0.e0;
    real _t051E = 0.1e1;
    vec4 _t051F = [_t051B, _t051C, _t051D, _t051E];
    tensor[4,4] _t0520 = [_t0510, _t0515, _t051A, _t051F];
    tensor[4,4][4] _t0521 = {_t04E1, _t04F6, _t050B, _t0520};
    real _t0522 = -0.1e1;
    real _t0523 = -0.1e1;
    real _t0524 = 0.57735026919e0;
    real _t0525 = 0.1e1;
    vec4 _t0526 = [_t0522, _t0523, _t0524, _t0525];
    real _t0527 = 0.1e1;
    real _t0528 = 0.e0;
    real _t0529 = -0.57735026919e0;
    real _t052A = 0.e0;
    vec4 _t052B = [_t0527, _t0528, _t0529, _t052A];
    real _t052C = 0.e0;
    real _t052D = 0.1e1;
    real _t052E = 0.57735026919e0;
    real _t052F = 0.e0;
    vec4 _t0530 = [_t052C, _t052D, _t052E, _t052F];
    real _t0531 = 0.e0;
    real _t0532 = 0.e0;
    real _t0533 = 0.e0;
    real _t0534 = 0.1e1;
    vec4 _t0535 = [_t0531, _t0532, _t0533, _t0534];
    tensor[4,4] _t0536 = [_t0526, _t052B, _t0530, _t0535];
    real _t0537 = 0.e0;
    real _t0538 = 0.e0;
    real _t0539 = 0.1e1;
    real _t053A = 0.e0;
    vec4 _t053B = [_t0537, _t0538, _t0539, _t053A];
    real _t053C = 0.1e1;
    real _t053D = 0.e0;
    real _t053E = 0.e0;
    real _t053F = 0.e0;
    vec4 _t0540 = [_t053C, _t053D, _t053E, _t053F];
    real _t0541 = 0.e0;
    real _t0542 = 0.1e1;
    real _t0543 = 0.e0;
    real _t0544 = 0.e0;
    vec4 _t0545 = [_t0541, _t0542, _t0543, _t0544];
    real _t0546 = 0.e0;
    real _t0547 = 0.e0;
    real _t0548 = 0.e0;
    real _t0549 = 0.1e1;
    vec4 _t054A = [_t0546, _t0547, _t0548, _t0549];
    tensor[4,4] _t054B = [_t053B, _t0540, _t0545, _t054A];
    real _t054C = 0.1e1;
    real _t054D = 0.e0;
    real _t054E = 0.e0;
    real _t054F = 0.e0;
    vec4 _t0550 = [_t054C, _t054D, _t054E, _t054F];
    real _t0551 = 0.e0;
    real _t0552 = 0.e0;
    real _t0553 = 0.1e1;
    real _t0554 = 0.e0;
    vec4 _t0555 = [_t0551, _t0552, _t0553, _t0554];
    real _t0556 = 0.e0;
    real _t0557 = 0.1e1;
    real _t0558 = 0.e0;
    real _t0559 = 0.e0;
    vec4 _t055A = [_t0556, _t0557, _t0558, _t0559];
    real _t055B = 0.e0;
    real _t055C = 0.e0;
    real _t055D = 0.e0;
    real _t055E = 0.1e1;
    vec4 _t055F = [_t055B, _t055C, _t055D, _t055E];
    tensor[4,4] _t0560 = [_t0550, _t0555, _t055A, _t055F];
    real _t0561 = 0.1e1;
    real _t0562 = 0.e0;
    real _t0563 = 0.e0;
    real _t0564 = 0.e0;
    vec4 _t0565 = [_t0561, _t0562, _t0563, _t0564];
    real _t0566 = 0.e0;
    real _t0567 = 0.1e1;
    real _t0568 = 0.e0;
    real _t0569 = 0.e0;
    vec4 _t056A = [_t0566, _t0567, _t0568, _t0569];
    real _t056B = 0.e0;
    real _t056C = 0.e0;
    real _t056D = 0.1e1;
    real _t056E = 0.e0;
    vec4 _t056F = [_t056B, _t056C, _t056D, _t056E];
    real _t0570 = 0.e0;
    real _t0571 = 0.e0;
    real _t0572 = 0.e0;
    real _t0573 = 0.1e1;
    vec4 _t0574 = [_t0570, _t0571, _t0572, _t0573];
    tensor[4,4] _t0575 = [_t0565, _t056A, _t056F, _t0574];
    tensor[4,4][4] _t0576 = {_t0536, _t054B, _t0560, _t0575};
    tensor[4,4][4][4] _t0577 = {_t0477, _t04CC, _t0521, _t0576};
    real _t0578 = time0415[1];
    int _t0579 = prim $r2i01B7 (_t0578);
    tensor[4,4][4] _t057A = prim $sub01C0<tensor[4,4][4]; %4> (_t0577, _t0579);
    real _t057B = time0415[1];
    int _t057C = prim $r2i01B7 (_t057B);
    int[2] _t057D = func nextCell40419 (_t057C, cellId0412, mesh0411);
    int _t057E = 1;
    int _t057F = prim $sub01C0<int; %2> (_t057D, _t057E);
    tensor[4,4] _t0580 = prim $sub01C0<tensor[4,4]; %4> (_t057A, _t057F);
    real _t0581 = time0415[0];
    vec3 _t0582 = prim *0036<$[3]> (_t0581, dPos0414);
    vec3 _t0583 = prim +0017<$[3]> (_t0582, refPos0413);
    real _t0584 = _t0583[0];
    real _t0585 = time0415[0];
    vec3 _t0586 = prim *0036<$[3]> (_t0585, dPos0414);
    vec3 _t0587 = prim +0017<$[3]> (_t0586, refPos0413);
    real _t0588 = _t0587[1];
    real _t0589 = time0415[0];
    vec3 _t058A = prim *0036<$[3]> (_t0589, dPos0414);
    vec3 _t058B = prim +0017<$[3]> (_t058A, refPos0413);
    real _t058C = _t058B[2];
    real _t058D = 0.1e1;
    vec4 _t058E = [_t0584, _t0588, _t058C, _t058D];
    vec4 _t058F = prim •00CE<$[4,4]; $[4]; $[4]> (_t0580, _t058E);
    real _t0590 = _t058F[0];
    real _t0591 = 0.1e1;
    real _t0592 = 0.e0;
    real _t0593 = 0.e0;
    real _t0594 = 0.e0;
    vec4 _t0595 = [_t0591, _t0592, _t0593, _t0594];
    real _t0596 = 0.e0;
    real _t0597 = 0.1e1;
    real _t0598 = 0.e0;
    real _t0599 = 0.e0;
    vec4 _t059A = [_t0596, _t0597, _t0598, _t0599];
    real _t059B = 0.e0;
    real _t059C = 0.e0;
    real _t059D = 0.1e1;
    real _t059E = 0.e0;
    vec4 _t059F = [_t059B, _t059C, _t059D, _t059E];
    real _t05A0 = 0.222044604925e-15;
    real _t05A1 = 0.e0;
    real _t05A2 = 0.44408920985e-15;
    real _t05A3 = 0.1e1;
    vec4 _t05A4 = [_t05A0, _t05A1, _t05A2, _t05A3];
    tensor[4,4] _t05A5 = [_t0595, _t059A, _t059F, _t05A4];
    real _t05A6 = 0.173205080757e1;
    real _t05A7 = 0.173205080757e1;
    real _t05A8 = 0.173205080757e1;
    real _t05A9 = -0.173205080757e1;
    vec4 _t05AA = [_t05A6, _t05A7, _t05A8, _t05A9];
    real _t05AB = 0.1e1;
    real _t05AC = 0.2e1;
    real _t05AD = 0.1e1;
    real _t05AE = -0.1e1;
    vec4 _t05AF = [_t05AB, _t05AC, _t05AD, _t05AE];
    real _t05B0 = -0.1e1;
    real _t05B1 = -0.1e1;
    real _t05B2 = -0.192296268638e-15;
    real _t05B3 = 0.1e1;
    vec4 _t05B4 = [_t05B0, _t05B1, _t05B2, _t05B3];
    real _t05B5 = 0.222044604925e-15;
    real _t05B6 = 0.e0;
    real _t05B7 = 0.44408920985e-15;
    real _t05B8 = 0.1e1;
    vec4 _t05B9 = [_t05B5, _t05B6, _t05B7, _t05B8];
    tensor[4,4] _t05BA = [_t05AA, _t05AF, _t05B4, _t05B9];
    real _t05BB = 0.1e1;
    real _t05BC = 0.2e1;
    real _t05BD = 0.1e1;
    real _t05BE = -0.1e1;
    vec4 _t05BF = [_t05BB, _t05BC, _t05BD, _t05BE];
    real _t05C0 = 0.173205080757e1;
    real _t05C1 = 0.173205080757e1;
    real _t05C2 = 0.173205080757e1;
    real _t05C3 = -0.173205080757e1;
    vec4 _t05C4 = [_t05C0, _t05C1, _t05C2, _t05C3];
    real _t05C5 = -0.1e1;
    real _t05C6 = -0.1e1;
    real _t05C7 = -0.192296268638e-15;
    real _t05C8 = 0.1e1;
    vec4 _t05C9 = [_t05C5, _t05C6, _t05C7, _t05C8];
    real _t05CA = 0.222044604925e-15;
    real _t05CB = 0.e0;
    real _t05CC = 0.44408920985e-15;
    real _t05CD = 0.1e1;
    vec4 _t05CE = [_t05CA, _t05CB, _t05CC, _t05CD];
    tensor[4,4] _t05CF = [_t05BF, _t05C4, _t05C9, _t05CE];
    real _t05D0 = 0.1e1;
    real _t05D1 = 0.2e1;
    real _t05D2 = 0.1e1;
    real _t05D3 = -0.1e1;
    vec4 _t05D4 = [_t05D0, _t05D1, _t05D2, _t05D3];
    real _t05D5 = -0.1e1;
    real _t05D6 = -0.1e1;
    real _t05D7 = -0.192296268638e-15;
    real _t05D8 = 0.1e1;
    vec4 _t05D9 = [_t05D5, _t05D6, _t05D7, _t05D8];
    real _t05DA = 0.173205080757e1;
    real _t05DB = 0.173205080757e1;
    real _t05DC = 0.173205080757e1;
    real _t05DD = -0.173205080757e1;
    vec4 _t05DE = [_t05DA, _t05DB, _t05DC, _t05DD];
    real _t05DF = 0.222044604925e-15;
    real _t05E0 = 0.e0;
    real _t05E1 = 0.44408920985e-15;
    real _t05E2 = 0.1e1;
    vec4 _t05E3 = [_t05DF, _t05E0, _t05E1, _t05E2];
    tensor[4,4] _t05E4 = [_t05D4, _t05D9, _t05DE, _t05E3];
    tensor[4,4][4] _t05E5 = {_t05A5, _t05BA, _t05CF, _t05E4};
    real _t05E6 = 0.57735026919e0;
    real _t05E7 = -0.1e1;
    real _t05E8 = -0.1e1;
    real _t05E9 = 0.1e1;
    vec4 _t05EA = [_t05E6, _t05E7, _t05E8, _t05E9];
    real _t05EB = -0.57735026919e0;
    real _t05EC = 0.1e1;
    real _t05ED = 0.e0;
    real _t05EE = 0.e0;
    vec4 _t05EF = [_t05EB, _t05EC, _t05ED, _t05EE];
    real _t05F0 = 0.57735026919e0;
    real _t05F1 = 0.e0;
    real _t05F2 = 0.1e1;
    real _t05F3 = 0.e0;
    vec4 _t05F4 = [_t05F0, _t05F1, _t05F2, _t05F3];
    real _t05F5 = 0.e0;
    real _t05F6 = 0.e0;
    real _t05F7 = 0.e0;
    real _t05F8 = 0.1e1;
    vec4 _t05F9 = [_t05F5, _t05F6, _t05F7, _t05F8];
    tensor[4,4] _t05FA = [_t05EA, _t05EF, _t05F4, _t05F9];
    real _t05FB = 0.1e1;
    real _t05FC = 0.e0;
    real _t05FD = 0.e0;
    real _t05FE = 0.e0;
    vec4 _t05FF = [_t05FB, _t05FC, _t05FD, _t05FE];
    real _t0600 = 0.e0;
    real _t0601 = 0.1e1;
    real _t0602 = 0.e0;
    real _t0603 = 0.e0;
    vec4 _t0604 = [_t0600, _t0601, _t0602, _t0603];
    real _t0605 = 0.e0;
    real _t0606 = 0.e0;
    real _t0607 = 0.1e1;
    real _t0608 = 0.e0;
    vec4 _t0609 = [_t0605, _t0606, _t0607, _t0608];
    real _t060A = 0.e0;
    real _t060B = 0.e0;
    real _t060C = 0.e0;
    real _t060D = 0.1e1;
    vec4 _t060E = [_t060A, _t060B, _t060C, _t060D];
    tensor[4,4] _t060F = [_t05FF, _t0604, _t0609, _t060E];
    real _t0610 = 0.e0;
    real _t0611 = 0.1e1;
    real _t0612 = 0.e0;
    real _t0613 = 0.e0;
    vec4 _t0614 = [_t0610, _t0611, _t0612, _t0613];
    real _t0615 = 0.1e1;
    real _t0616 = 0.e0;
    real _t0617 = 0.e0;
    real _t0618 = 0.e0;
    vec4 _t0619 = [_t0615, _t0616, _t0617, _t0618];
    real _t061A = 0.e0;
    real _t061B = 0.e0;
    real _t061C = 0.1e1;
    real _t061D = 0.e0;
    vec4 _t061E = [_t061A, _t061B, _t061C, _t061D];
    real _t061F = 0.e0;
    real _t0620 = 0.e0;
    real _t0621 = 0.e0;
    real _t0622 = 0.1e1;
    vec4 _t0623 = [_t061F, _t0620, _t0621, _t0622];
    tensor[4,4] _t0624 = [_t0614, _t0619, _t061E, _t0623];
    real _t0625 = 0.e0;
    real _t0626 = 0.1e1;
    real _t0627 = 0.e0;
    real _t0628 = 0.e0;
    vec4 _t0629 = [_t0625, _t0626, _t0627, _t0628];
    real _t062A = 0.e0;
    real _t062B = 0.e0;
    real _t062C = 0.1e1;
    real _t062D = 0.e0;
    vec4 _t062E = [_t062A, _t062B, _t062C, _t062D];
    real _t062F = 0.1e1;
    real _t0630 = 0.e0;
    real _t0631 = 0.e0;
    real _t0632 = 0.e0;
    vec4 _t0633 = [_t062F, _t0630, _t0631, _t0632];
    real _t0634 = 0.e0;
    real _t0635 = 0.e0;
    real _t0636 = 0.e0;
    real _t0637 = 0.1e1;
    vec4 _t0638 = [_t0634, _t0635, _t0636, _t0637];
    tensor[4,4] _t0639 = [_t0629, _t062E, _t0633, _t0638];
    tensor[4,4][4] _t063A = {_t05FA, _t060F, _t0624, _t0639};
    real _t063B = -0.1e1;
    real _t063C = 0.57735026919e0;
    real _t063D = -0.1e1;
    real _t063E = 0.1e1;
    vec4 _t063F = [_t063B, _t063C, _t063D, _t063E];
    real _t0640 = 0.1e1;
    real _t0641 = -0.57735026919e0;
    real _t0642 = 0.e0;
    real _t0643 = 0.e0;
    vec4 _t0644 = [_t0640, _t0641, _t0642, _t0643];
    real _t0645 = 0.e0;
    real _t0646 = 0.57735026919e0;
    real _t0647 = 0.1e1;
    real _t0648 = 0.e0;
    vec4 _t0649 = [_t0645, _t0646, _t0647, _t0648];
    real _t064A = 0.e0;
    real _t064B = 0.e0;
    real _t064C = 0.e0;
    real _t064D = 0.1e1;
    vec4 _t064E = [_t064A, _t064B, _t064C, _t064D];
    tensor[4,4] _t064F = [_t063F, _t0644, _t0649, _t064E];
    real _t0650 = 0.e0;
    real _t0651 = 0.1e1;
    real _t0652 = 0.e0;
    real _t0653 = 0.e0;
    vec4 _t0654 = [_t0650, _t0651, _t0652, _t0653];
    real _t0655 = 0.1e1;
    real _t0656 = 0.e0;
    real _t0657 = 0.e0;
    real _t0658 = 0.e0;
    vec4 _t0659 = [_t0655, _t0656, _t0657, _t0658];
    real _t065A = 0.e0;
    real _t065B = 0.e0;
    real _t065C = 0.1e1;
    real _t065D = 0.e0;
    vec4 _t065E = [_t065A, _t065B, _t065C, _t065D];
    real _t065F = 0.e0;
    real _t0660 = 0.e0;
    real _t0661 = 0.e0;
    real _t0662 = 0.1e1;
    vec4 _t0663 = [_t065F, _t0660, _t0661, _t0662];
    tensor[4,4] _t0664 = [_t0654, _t0659, _t065E, _t0663];
    real _t0665 = 0.1e1;
    real _t0666 = 0.e0;
    real _t0667 = 0.e0;
    real _t0668 = 0.e0;
    vec4 _t0669 = [_t0665, _t0666, _t0667, _t0668];
    real _t066A = 0.e0;
    real _t066B = 0.1e1;
    real _t066C = 0.e0;
    real _t066D = 0.e0;
    vec4 _t066E = [_t066A, _t066B, _t066C, _t066D];
    real _t066F = 0.e0;
    real _t0670 = 0.e0;
    real _t0671 = 0.1e1;
    real _t0672 = 0.e0;
    vec4 _t0673 = [_t066F, _t0670, _t0671, _t0672];
    real _t0674 = 0.e0;
    real _t0675 = 0.e0;
    real _t0676 = 0.e0;
    real _t0677 = 0.1e1;
    vec4 _t0678 = [_t0674, _t0675, _t0676, _t0677];
    tensor[4,4] _t0679 = [_t0669, _t066E, _t0673, _t0678];
    real _t067A = 0.1e1;
    real _t067B = 0.e0;
    real _t067C = 0.e0;
    real _t067D = 0.e0;
    vec4 _t067E = [_t067A, _t067B, _t067C, _t067D];
    real _t067F = 0.e0;
    real _t0680 = 0.e0;
    real _t0681 = 0.1e1;
    real _t0682 = 0.e0;
    vec4 _t0683 = [_t067F, _t0680, _t0681, _t0682];
    real _t0684 = 0.e0;
    real _t0685 = 0.1e1;
    real _t0686 = 0.e0;
    real _t0687 = 0.e0;
    vec4 _t0688 = [_t0684, _t0685, _t0686, _t0687];
    real _t0689 = 0.e0;
    real _t068A = 0.e0;
    real _t068B = 0.e0;
    real _t068C = 0.1e1;
    vec4 _t068D = [_t0689, _t068A, _t068B, _t068C];
    tensor[4,4] _t068E = [_t067E, _t0683, _t0688, _t068D];
    tensor[4,4][4] _t068F = {_t064F, _t0664, _t0679, _t068E};
    real _t0690 = -0.1e1;
    real _t0691 = -0.1e1;
    real _t0692 = 0.57735026919e0;
    real _t0693 = 0.1e1;
    vec4 _t0694 = [_t0690, _t0691, _t0692, _t0693];
    real _t0695 = 0.1e1;
    real _t0696 = 0.e0;
    real _t0697 = -0.57735026919e0;
    real _t0698 = 0.e0;
    vec4 _t0699 = [_t0695, _t0696, _t0697, _t0698];
    real _t069A = 0.e0;
    real _t069B = 0.1e1;
    real _t069C = 0.57735026919e0;
    real _t069D = 0.e0;
    vec4 _t069E = [_t069A, _t069B, _t069C, _t069D];
    real _t069F = 0.e0;
    real _t06A0 = 0.e0;
    real _t06A1 = 0.e0;
    real _t06A2 = 0.1e1;
    vec4 _t06A3 = [_t069F, _t06A0, _t06A1, _t06A2];
    tensor[4,4] _t06A4 = [_t0694, _t0699, _t069E, _t06A3];
    real _t06A5 = 0.e0;
    real _t06A6 = 0.e0;
    real _t06A7 = 0.1e1;
    real _t06A8 = 0.e0;
    vec4 _t06A9 = [_t06A5, _t06A6, _t06A7, _t06A8];
    real _t06AA = 0.1e1;
    real _t06AB = 0.e0;
    real _t06AC = 0.e0;
    real _t06AD = 0.e0;
    vec4 _t06AE = [_t06AA, _t06AB, _t06AC, _t06AD];
    real _t06AF = 0.e0;
    real _t06B0 = 0.1e1;
    real _t06B1 = 0.e0;
    real _t06B2 = 0.e0;
    vec4 _t06B3 = [_t06AF, _t06B0, _t06B1, _t06B2];
    real _t06B4 = 0.e0;
    real _t06B5 = 0.e0;
    real _t06B6 = 0.e0;
    real _t06B7 = 0.1e1;
    vec4 _t06B8 = [_t06B4, _t06B5, _t06B6, _t06B7];
    tensor[4,4] _t06B9 = [_t06A9, _t06AE, _t06B3, _t06B8];
    real _t06BA = 0.1e1;
    real _t06BB = 0.e0;
    real _t06BC = 0.e0;
    real _t06BD = 0.e0;
    vec4 _t06BE = [_t06BA, _t06BB, _t06BC, _t06BD];
    real _t06BF = 0.e0;
    real _t06C0 = 0.e0;
    real _t06C1 = 0.1e1;
    real _t06C2 = 0.e0;
    vec4 _t06C3 = [_t06BF, _t06C0, _t06C1, _t06C2];
    real _t06C4 = 0.e0;
    real _t06C5 = 0.1e1;
    real _t06C6 = 0.e0;
    real _t06C7 = 0.e0;
    vec4 _t06C8 = [_t06C4, _t06C5, _t06C6, _t06C7];
    real _t06C9 = 0.e0;
    real _t06CA = 0.e0;
    real _t06CB = 0.e0;
    real _t06CC = 0.1e1;
    vec4 _t06CD = [_t06C9, _t06CA, _t06CB, _t06CC];
    tensor[4,4] _t06CE = [_t06BE, _t06C3, _t06C8, _t06CD];
    real _t06CF = 0.1e1;
    real _t06D0 = 0.e0;
    real _t06D1 = 0.e0;
    real _t06D2 = 0.e0;
    vec4 _t06D3 = [_t06CF, _t06D0, _t06D1, _t06D2];
    real _t06D4 = 0.e0;
    real _t06D5 = 0.1e1;
    real _t06D6 = 0.e0;
    real _t06D7 = 0.e0;
    vec4 _t06D8 = [_t06D4, _t06D5, _t06D6, _t06D7];
    real _t06D9 = 0.e0;
    real _t06DA = 0.e0;
    real _t06DB = 0.1e1;
    real _t06DC = 0.e0;
    vec4 _t06DD = [_t06D9, _t06DA, _t06DB, _t06DC];
    real _t06DE = 0.e0;
    real _t06DF = 0.e0;
    real _t06E0 = 0.e0;
    real _t06E1 = 0.1e1;
    vec4 _t06E2 = [_t06DE, _t06DF, _t06E0, _t06E1];
    tensor[4,4] _t06E3 = [_t06D3, _t06D8, _t06DD, _t06E2];
    tensor[4,4][4] _t06E4 = {_t06A4, _t06B9, _t06CE, _t06E3};
    tensor[4,4][4][4] _t06E5 = {_t05E5, _t063A, _t068F, _t06E4};
    real _t06E6 = time0415[1];
    int _t06E7 = prim $r2i01B7 (_t06E6);
    tensor[4,4][4] _t06E8 = prim $sub01C0<tensor[4,4][4]; %4> (_t06E5, _t06E7);
    real _t06E9 = time0415[1];
    int _t06EA = prim $r2i01B7 (_t06E9);
    int[2] _t06EB = func nextCell40419 (_t06EA, cellId0412, mesh0411);
    int _t06EC = 1;
    int _t06ED = prim $sub01C0<int; %2> (_t06EB, _t06EC);
    tensor[4,4] _t06EE = prim $sub01C0<tensor[4,4]; %4> (_t06E8, _t06ED);
    real _t06EF = time0415[0];
    vec3 _t06F0 = prim *0036<$[3]> (_t06EF, dPos0414);
    vec3 _t06F1 = prim +0017<$[3]> (_t06F0, refPos0413);
    real _t06F2 = _t06F1[0];
    real _t06F3 = time0415[0];
    vec3 _t06F4 = prim *0036<$[3]> (_t06F3, dPos0414);
    vec3 _t06F5 = prim +0017<$[3]> (_t06F4, refPos0413);
    real _t06F6 = _t06F5[1];
    real _t06F7 = time0415[0];
    vec3 _t06F8 = prim *0036<$[3]> (_t06F7, dPos0414);
    vec3 _t06F9 = prim +0017<$[3]> (_t06F8, refPos0413);
    real _t06FA = _t06F9[2];
    real _t06FB = 0.1e1;
    vec4 _t06FC = [_t06F2, _t06F6, _t06FA, _t06FB];
    vec4 _t06FD = prim •00CE<$[4,4]; $[4]; $[4]> (_t06EE, _t06FC);
    real _t06FE = _t06FD[1];
    real _t06FF = 0.1e1;
    real _t0700 = 0.e0;
    real _t0701 = 0.e0;
    real _t0702 = 0.e0;
    vec4 _t0703 = [_t06FF, _t0700, _t0701, _t0702];
    real _t0704 = 0.e0;
    real _t0705 = 0.1e1;
    real _t0706 = 0.e0;
    real _t0707 = 0.e0;
    vec4 _t0708 = [_t0704, _t0705, _t0706, _t0707];
    real _t0709 = 0.e0;
    real _t070A = 0.e0;
    real _t070B = 0.1e1;
    real _t070C = 0.e0;
    vec4 _t070D = [_t0709, _t070A, _t070B, _t070C];
    real _t070E = 0.222044604925e-15;
    real _t070F = 0.e0;
    real _t0710 = 0.44408920985e-15;
    real _t0711 = 0.1e1;
    vec4 _t0712 = [_t070E, _t070F, _t0710, _t0711];
    tensor[4,4] _t0713 = [_t0703, _t0708, _t070D, _t0712];
    real _t0714 = 0.173205080757e1;
    real _t0715 = 0.173205080757e1;
    real _t0716 = 0.173205080757e1;
    real _t0717 = -0.173205080757e1;
    vec4 _t0718 = [_t0714, _t0715, _t0716, _t0717];
    real _t0719 = 0.1e1;
    real _t071A = 0.2e1;
    real _t071B = 0.1e1;
    real _t071C = -0.1e1;
    vec4 _t071D = [_t0719, _t071A, _t071B, _t071C];
    real _t071E = -0.1e1;
    real _t071F = -0.1e1;
    real _t0720 = -0.192296268638e-15;
    real _t0721 = 0.1e1;
    vec4 _t0722 = [_t071E, _t071F, _t0720, _t0721];
    real _t0723 = 0.222044604925e-15;
    real _t0724 = 0.e0;
    real _t0725 = 0.44408920985e-15;
    real _t0726 = 0.1e1;
    vec4 _t0727 = [_t0723, _t0724, _t0725, _t0726];
    tensor[4,4] _t0728 = [_t0718, _t071D, _t0722, _t0727];
    real _t0729 = 0.1e1;
    real _t072A = 0.2e1;
    real _t072B = 0.1e1;
    real _t072C = -0.1e1;
    vec4 _t072D = [_t0729, _t072A, _t072B, _t072C];
    real _t072E = 0.173205080757e1;
    real _t072F = 0.173205080757e1;
    real _t0730 = 0.173205080757e1;
    real _t0731 = -0.173205080757e1;
    vec4 _t0732 = [_t072E, _t072F, _t0730, _t0731];
    real _t0733 = -0.1e1;
    real _t0734 = -0.1e1;
    real _t0735 = -0.192296268638e-15;
    real _t0736 = 0.1e1;
    vec4 _t0737 = [_t0733, _t0734, _t0735, _t0736];
    real _t0738 = 0.222044604925e-15;
    real _t0739 = 0.e0;
    real _t073A = 0.44408920985e-15;
    real _t073B = 0.1e1;
    vec4 _t073C = [_t0738, _t0739, _t073A, _t073B];
    tensor[4,4] _t073D = [_t072D, _t0732, _t0737, _t073C];
    real _t073E = 0.1e1;
    real _t073F = 0.2e1;
    real _t0740 = 0.1e1;
    real _t0741 = -0.1e1;
    vec4 _t0742 = [_t073E, _t073F, _t0740, _t0741];
    real _t0743 = -0.1e1;
    real _t0744 = -0.1e1;
    real _t0745 = -0.192296268638e-15;
    real _t0746 = 0.1e1;
    vec4 _t0747 = [_t0743, _t0744, _t0745, _t0746];
    real _t0748 = 0.173205080757e1;
    real _t0749 = 0.173205080757e1;
    real _t074A = 0.173205080757e1;
    real _t074B = -0.173205080757e1;
    vec4 _t074C = [_t0748, _t0749, _t074A, _t074B];
    real _t074D = 0.222044604925e-15;
    real _t074E = 0.e0;
    real _t074F = 0.44408920985e-15;
    real _t0750 = 0.1e1;
    vec4 _t0751 = [_t074D, _t074E, _t074F, _t0750];
    tensor[4,4] _t0752 = [_t0742, _t0747, _t074C, _t0751];
    tensor[4,4][4] _t0753 = {_t0713, _t0728, _t073D, _t0752};
    real _t0754 = 0.57735026919e0;
    real _t0755 = -0.1e1;
    real _t0756 = -0.1e1;
    real _t0757 = 0.1e1;
    vec4 _t0758 = [_t0754, _t0755, _t0756, _t0757];
    real _t0759 = -0.57735026919e0;
    real _t075A = 0.1e1;
    real _t075B = 0.e0;
    real _t075C = 0.e0;
    vec4 _t075D = [_t0759, _t075A, _t075B, _t075C];
    real _t075E = 0.57735026919e0;
    real _t075F = 0.e0;
    real _t0760 = 0.1e1;
    real _t0761 = 0.e0;
    vec4 _t0762 = [_t075E, _t075F, _t0760, _t0761];
    real _t0763 = 0.e0;
    real _t0764 = 0.e0;
    real _t0765 = 0.e0;
    real _t0766 = 0.1e1;
    vec4 _t0767 = [_t0763, _t0764, _t0765, _t0766];
    tensor[4,4] _t0768 = [_t0758, _t075D, _t0762, _t0767];
    real _t0769 = 0.1e1;
    real _t076A = 0.e0;
    real _t076B = 0.e0;
    real _t076C = 0.e0;
    vec4 _t076D = [_t0769, _t076A, _t076B, _t076C];
    real _t076E = 0.e0;
    real _t076F = 0.1e1;
    real _t0770 = 0.e0;
    real _t0771 = 0.e0;
    vec4 _t0772 = [_t076E, _t076F, _t0770, _t0771];
    real _t0773 = 0.e0;
    real _t0774 = 0.e0;
    real _t0775 = 0.1e1;
    real _t0776 = 0.e0;
    vec4 _t0777 = [_t0773, _t0774, _t0775, _t0776];
    real _t0778 = 0.e0;
    real _t0779 = 0.e0;
    real _t077A = 0.e0;
    real _t077B = 0.1e1;
    vec4 _t077C = [_t0778, _t0779, _t077A, _t077B];
    tensor[4,4] _t077D = [_t076D, _t0772, _t0777, _t077C];
    real _t077E = 0.e0;
    real _t077F = 0.1e1;
    real _t0780 = 0.e0;
    real _t0781 = 0.e0;
    vec4 _t0782 = [_t077E, _t077F, _t0780, _t0781];
    real _t0783 = 0.1e1;
    real _t0784 = 0.e0;
    real _t0785 = 0.e0;
    real _t0786 = 0.e0;
    vec4 _t0787 = [_t0783, _t0784, _t0785, _t0786];
    real _t0788 = 0.e0;
    real _t0789 = 0.e0;
    real _t078A = 0.1e1;
    real _t078B = 0.e0;
    vec4 _t078C = [_t0788, _t0789, _t078A, _t078B];
    real _t078D = 0.e0;
    real _t078E = 0.e0;
    real _t078F = 0.e0;
    real _t0790 = 0.1e1;
    vec4 _t0791 = [_t078D, _t078E, _t078F, _t0790];
    tensor[4,4] _t0792 = [_t0782, _t0787, _t078C, _t0791];
    real _t0793 = 0.e0;
    real _t0794 = 0.1e1;
    real _t0795 = 0.e0;
    real _t0796 = 0.e0;
    vec4 _t0797 = [_t0793, _t0794, _t0795, _t0796];
    real _t0798 = 0.e0;
    real _t0799 = 0.e0;
    real _t079A = 0.1e1;
    real _t079B = 0.e0;
    vec4 _t079C = [_t0798, _t0799, _t079A, _t079B];
    real _t079D = 0.1e1;
    real _t079E = 0.e0;
    real _t079F = 0.e0;
    real _t07A0 = 0.e0;
    vec4 _t07A1 = [_t079D, _t079E, _t079F, _t07A0];
    real _t07A2 = 0.e0;
    real _t07A3 = 0.e0;
    real _t07A4 = 0.e0;
    real _t07A5 = 0.1e1;
    vec4 _t07A6 = [_t07A2, _t07A3, _t07A4, _t07A5];
    tensor[4,4] _t07A7 = [_t0797, _t079C, _t07A1, _t07A6];
    tensor[4,4][4] _t07A8 = {_t0768, _t077D, _t0792, _t07A7};
    real _t07A9 = -0.1e1;
    real _t07AA = 0.57735026919e0;
    real _t07AB = -0.1e1;
    real _t07AC = 0.1e1;
    vec4 _t07AD = [_t07A9, _t07AA, _t07AB, _t07AC];
    real _t07AE = 0.1e1;
    real _t07AF = -0.57735026919e0;
    real _t07B0 = 0.e0;
    real _t07B1 = 0.e0;
    vec4 _t07B2 = [_t07AE, _t07AF, _t07B0, _t07B1];
    real _t07B3 = 0.e0;
    real _t07B4 = 0.57735026919e0;
    real _t07B5 = 0.1e1;
    real _t07B6 = 0.e0;
    vec4 _t07B7 = [_t07B3, _t07B4, _t07B5, _t07B6];
    real _t07B8 = 0.e0;
    real _t07B9 = 0.e0;
    real _t07BA = 0.e0;
    real _t07BB = 0.1e1;
    vec4 _t07BC = [_t07B8, _t07B9, _t07BA, _t07BB];
    tensor[4,4] _t07BD = [_t07AD, _t07B2, _t07B7, _t07BC];
    real _t07BE = 0.e0;
    real _t07BF = 0.1e1;
    real _t07C0 = 0.e0;
    real _t07C1 = 0.e0;
    vec4 _t07C2 = [_t07BE, _t07BF, _t07C0, _t07C1];
    real _t07C3 = 0.1e1;
    real _t07C4 = 0.e0;
    real _t07C5 = 0.e0;
    real _t07C6 = 0.e0;
    vec4 _t07C7 = [_t07C3, _t07C4, _t07C5, _t07C6];
    real _t07C8 = 0.e0;
    real _t07C9 = 0.e0;
    real _t07CA = 0.1e1;
    real _t07CB = 0.e0;
    vec4 _t07CC = [_t07C8, _t07C9, _t07CA, _t07CB];
    real _t07CD = 0.e0;
    real _t07CE = 0.e0;
    real _t07CF = 0.e0;
    real _t07D0 = 0.1e1;
    vec4 _t07D1 = [_t07CD, _t07CE, _t07CF, _t07D0];
    tensor[4,4] _t07D2 = [_t07C2, _t07C7, _t07CC, _t07D1];
    real _t07D3 = 0.1e1;
    real _t07D4 = 0.e0;
    real _t07D5 = 0.e0;
    real _t07D6 = 0.e0;
    vec4 _t07D7 = [_t07D3, _t07D4, _t07D5, _t07D6];
    real _t07D8 = 0.e0;
    real _t07D9 = 0.1e1;
    real _t07DA = 0.e0;
    real _t07DB = 0.e0;
    vec4 _t07DC = [_t07D8, _t07D9, _t07DA, _t07DB];
    real _t07DD = 0.e0;
    real _t07DE = 0.e0;
    real _t07DF = 0.1e1;
    real _t07E0 = 0.e0;
    vec4 _t07E1 = [_t07DD, _t07DE, _t07DF, _t07E0];
    real _t07E2 = 0.e0;
    real _t07E3 = 0.e0;
    real _t07E4 = 0.e0;
    real _t07E5 = 0.1e1;
    vec4 _t07E6 = [_t07E2, _t07E3, _t07E4, _t07E5];
    tensor[4,4] _t07E7 = [_t07D7, _t07DC, _t07E1, _t07E6];
    real _t07E8 = 0.1e1;
    real _t07E9 = 0.e0;
    real _t07EA = 0.e0;
    real _t07EB = 0.e0;
    vec4 _t07EC = [_t07E8, _t07E9, _t07EA, _t07EB];
    real _t07ED = 0.e0;
    real _t07EE = 0.e0;
    real _t07EF = 0.1e1;
    real _t07F0 = 0.e0;
    vec4 _t07F1 = [_t07ED, _t07EE, _t07EF, _t07F0];
    real _t07F2 = 0.e0;
    real _t07F3 = 0.1e1;
    real _t07F4 = 0.e0;
    real _t07F5 = 0.e0;
    vec4 _t07F6 = [_t07F2, _t07F3, _t07F4, _t07F5];
    real _t07F7 = 0.e0;
    real _t07F8 = 0.e0;
    real _t07F9 = 0.e0;
    real _t07FA = 0.1e1;
    vec4 _t07FB = [_t07F7, _t07F8, _t07F9, _t07FA];
    tensor[4,4] _t07FC = [_t07EC, _t07F1, _t07F6, _t07FB];
    tensor[4,4][4] _t07FD = {_t07BD, _t07D2, _t07E7, _t07FC};
    real _t07FE = -0.1e1;
    real _t07FF = -0.1e1;
    real _t0800 = 0.57735026919e0;
    real _t0801 = 0.1e1;
    vec4 _t0802 = [_t07FE, _t07FF, _t0800, _t0801];
    real _t0803 = 0.1e1;
    real _t0804 = 0.e0;
    real _t0805 = -0.57735026919e0;
    real _t0806 = 0.e0;
    vec4 _t0807 = [_t0803, _t0804, _t0805, _t0806];
    real _t0808 = 0.e0;
    real _t0809 = 0.1e1;
    real _t080A = 0.57735026919e0;
    real _t080B = 0.e0;
    vec4 _t080C = [_t0808, _t0809, _t080A, _t080B];
    real _t080D = 0.e0;
    real _t080E = 0.e0;
    real _t080F = 0.e0;
    real _t0810 = 0.1e1;
    vec4 _t0811 = [_t080D, _t080E, _t080F, _t0810];
    tensor[4,4] _t0812 = [_t0802, _t0807, _t080C, _t0811];
    real _t0813 = 0.e0;
    real _t0814 = 0.e0;
    real _t0815 = 0.1e1;
    real _t0816 = 0.e0;
    vec4 _t0817 = [_t0813, _t0814, _t0815, _t0816];
    real _t0818 = 0.1e1;
    real _t0819 = 0.e0;
    real _t081A = 0.e0;
    real _t081B = 0.e0;
    vec4 _t081C = [_t0818, _t0819, _t081A, _t081B];
    real _t081D = 0.e0;
    real _t081E = 0.1e1;
    real _t081F = 0.e0;
    real _t0820 = 0.e0;
    vec4 _t0821 = [_t081D, _t081E, _t081F, _t0820];
    real _t0822 = 0.e0;
    real _t0823 = 0.e0;
    real _t0824 = 0.e0;
    real _t0825 = 0.1e1;
    vec4 _t0826 = [_t0822, _t0823, _t0824, _t0825];
    tensor[4,4] _t0827 = [_t0817, _t081C, _t0821, _t0826];
    real _t0828 = 0.1e1;
    real _t0829 = 0.e0;
    real _t082A = 0.e0;
    real _t082B = 0.e0;
    vec4 _t082C = [_t0828, _t0829, _t082A, _t082B];
    real _t082D = 0.e0;
    real _t082E = 0.e0;
    real _t082F = 0.1e1;
    real _t0830 = 0.e0;
    vec4 _t0831 = [_t082D, _t082E, _t082F, _t0830];
    real _t0832 = 0.e0;
    real _t0833 = 0.1e1;
    real _t0834 = 0.e0;
    real _t0835 = 0.e0;
    vec4 _t0836 = [_t0832, _t0833, _t0834, _t0835];
    real _t0837 = 0.e0;
    real _t0838 = 0.e0;
    real _t0839 = 0.e0;
    real _t083A = 0.1e1;
    vec4 _t083B = [_t0837, _t0838, _t0839, _t083A];
    tensor[4,4] _t083C = [_t082C, _t0831, _t0836, _t083B];
    real _t083D = 0.1e1;
    real _t083E = 0.e0;
    real _t083F = 0.e0;
    real _t0840 = 0.e0;
    vec4 _t0841 = [_t083D, _t083E, _t083F, _t0840];
    real _t0842 = 0.e0;
    real _t0843 = 0.1e1;
    real _t0844 = 0.e0;
    real _t0845 = 0.e0;
    vec4 _t0846 = [_t0842, _t0843, _t0844, _t0845];
    real _t0847 = 0.e0;
    real _t0848 = 0.e0;
    real _t0849 = 0.1e1;
    real _t084A = 0.e0;
    vec4 _t084B = [_t0847, _t0848, _t0849, _t084A];
    real _t084C = 0.e0;
    real _t084D = 0.e0;
    real _t084E = 0.e0;
    real _t084F = 0.1e1;
    vec4 _t0850 = [_t084C, _t084D, _t084E, _t084F];
    tensor[4,4] _t0851 = [_t0841, _t0846, _t084B, _t0850];
    tensor[4,4][4] _t0852 = {_t0812, _t0827, _t083C, _t0851};
    tensor[4,4][4][4] _t0853 = {_t0753, _t07A8, _t07FD, _t0852};
    real _t0854 = time0415[1];
    int _t0855 = prim $r2i01B7 (_t0854);
    tensor[4,4][4] _t0856 = prim $sub01C0<tensor[4,4][4]; %4> (_t0853, _t0855);
    real _t0857 = time0415[1];
    int _t0858 = prim $r2i01B7 (_t0857);
    int[2] _t0859 = func nextCell40419 (_t0858, cellId0412, mesh0411);
    int _t085A = 1;
    int _t085B = prim $sub01C0<int; %2> (_t0859, _t085A);
    tensor[4,4] _t085C = prim $sub01C0<tensor[4,4]; %4> (_t0856, _t085B);
    real _t085D = time0415[0];
    vec3 _t085E = prim *0036<$[3]> (_t085D, dPos0414);
    vec3 _t085F = prim +0017<$[3]> (_t085E, refPos0413);
    real _t0860 = _t085F[0];
    real _t0861 = time0415[0];
    vec3 _t0862 = prim *0036<$[3]> (_t0861, dPos0414);
    vec3 _t0863 = prim +0017<$[3]> (_t0862, refPos0413);
    real _t0864 = _t0863[1];
    real _t0865 = time0415[0];
    vec3 _t0866 = prim *0036<$[3]> (_t0865, dPos0414);
    vec3 _t0867 = prim +0017<$[3]> (_t0866, refPos0413);
    real _t0868 = _t0867[2];
    real _t0869 = 0.1e1;
    vec4 _t086A = [_t0860, _t0864, _t0868, _t0869];
    vec4 _t086B = prim •00CE<$[4,4]; $[4]; $[4]> (_t085C, _t086A);
    real _t086C = _t086B[2];
    vec3 _t086D = [_t0590, _t06FE, _t086C];
    Femdata: MeshPos _t086E = extractFemItemN((mesh0411, _t0422, _t086D),RefBuild(Mesh),);
    return _t086E;
  } else {
    real _t086F = time0415[0];
    vec3 _t0870 = prim *0036<$[3]> (_t086F, dPos0414);
    vec3 _t0871 = prim +0017<$[3]> (_t0870, refPos0413);
    Femdata: MeshPos _t0872 = extractFemItemN((mesh0411, _t0871),InvalidBuildBoundary(MeshPos),);
    return _t0872;
  }
}
function int[2]#5 nextCell40419 (int faceIdx0873, int cell0874, Femdata: Mesh mesh0875)
{
  int _t0876 = 8;
  int _t0877 = prim *0033 (cell0874, _t0876);
  int _t0878 = 2;
  int _t0879 = prim *0033 (faceIdx0873, _t0878);
  int _t087A = prim +0015 (_t0877, _t0879);
  int[2] _t087B = extractFemItemN((mesh0875, _t087A),CellFaceCell(Mesh),);
  return _t087B;
}
function int[2]#0 $nextCell2087C (int faceIdx0873, int cell0874, Femdata: Mesh mesh0875)
{
  nearbyCells087D = extractFemItem2(CellConnectivity(Mesh), int, mesh0875, cell0874 : int);
  int _t087E = 0;
  int _t087F = 1;
  int _t0880 = 3;
  int[2] _t0881 = {_t087F, _t0880};
  int _t0882 = 3;
  int _t0883 = 3;
  int[2] _t0884 = {_t0882, _t0883};
  int _t0885 = 9;
  int _t0886 = 3;
  int[2] _t0887 = {_t0885, _t0886};
  int _t0888 = 27;
  int _t0889 = 3;
  int[2] _t088A = {_t0888, _t0889};
  int[2][4] _t088B = {_t0881, _t0884, _t0887, _t088A};
  int[2] _t088C = prim $sub01C0<int[2]; %4> (_t088B, faceIdx0873);
  int _t088D = 1;
  int _t088E = prim $sub01C0<int; %2> (_t088C, _t088D);
  int[] _t088F = prim $range01C3 (_t087E, _t088E);
  int[] accum08B0 = {};
  foreach i08AD in _t088F {
    int _t0890 = 1;
    int _t0891 = 2;
    int _t0892 = 3;
    int _t0893 = 0;
    int _t0894 = 2;
    int _t0895 = 3;
    int _t0896 = 0;
    int _t0897 = 1;
    int _t0898 = 3;
    int _t0899 = 0;
    int _t089A = 1;
    int _t089B = 2;
    int[12] _t089C = {_t0890, _t0891, _t0892, _t0893, _t0894, _t0895, _t0896, _t0897, _t0898, _t0899, _t089A, _t089B};
    int _t089D = 1;
    int _t089E = 3;
    int[2] _t089F = {_t089D, _t089E};
    int _t08A0 = 3;
    int _t08A1 = 3;
    int[2] _t08A2 = {_t08A0, _t08A1};
    int _t08A3 = 9;
    int _t08A4 = 3;
    int[2] _t08A5 = {_t08A3, _t08A4};
    int _t08A6 = 27;
    int _t08A7 = 3;
    int[2] _t08A8 = {_t08A6, _t08A7};
    int[2][4] _t08A9 = {_t089F, _t08A2, _t08A5, _t08A8};
    int[2] _t08AA = prim $sub01C0<int[2]; %4> (_t08A9, faceIdx0873);
    int _t08AB = 0;
    int _t08AC = prim $sub01C0<int; %2> (_t08AA, _t08AB);
    int _t08AE = prim +0015 (_t08AC, i08AD);
    int _t08AF = prim $sub01C0<int; %12> (_t089C, _t08AE);
    accum08B0 = prim @0010<int> (accum08B0, _t08AF);
  }
  numFacetNodes08B1 = prim length0123<int> (accum08B0);
  int _t08B2 = 3;
  bool _t08B3 = prim ==0082 (_t08B2, numFacetNodes08B1);
  if _t08B3 {
    foreach cellInt08B4 in nearbyCells087D {
      int[4] _t08B5 = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t08B6 = 1;
      int _t08B7 = prim $sub01C0<int; %4> (_t08B5, _t08B6);
      int[4] _t08B8 = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t08B9 = 2;
      int _t08BA = prim $sub01C0<int; %4> (_t08B8, _t08B9);
      int[4] _t08BB = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t08BC = 3;
      int _t08BD = prim $sub01C0<int; %4> (_t08BB, _t08BC);
      int[3] _t08BE = {_t08B7, _t08BA, _t08BD};
      int _t08BF = 0;
      int _t08C0 = prim $sub01C0<int; %3> (_t08BE, _t08BF);
      int _t08C1 = 0;
      int _t08C2 = 1;
      int _t08C3 = 3;
      int[2] _t08C4 = {_t08C2, _t08C3};
      int _t08C5 = 3;
      int _t08C6 = 3;
      int[2] _t08C7 = {_t08C5, _t08C6};
      int _t08C8 = 9;
      int _t08C9 = 3;
      int[2] _t08CA = {_t08C8, _t08C9};
      int _t08CB = 27;
      int _t08CC = 3;
      int[2] _t08CD = {_t08CB, _t08CC};
      int[2][4] _t08CE = {_t08C4, _t08C7, _t08CA, _t08CD};
      int[2] _t08CF = prim $sub01C0<int[2]; %4> (_t08CE, faceIdx0873);
      int _t08D0 = 1;
      int _t08D1 = prim $sub01C0<int; %2> (_t08CF, _t08D0);
      int[] _t08D2 = prim $range01C3 (_t08C1, _t08D1);
      int[] accum08F2 = {};
      foreach i08AD in _t08D2 {
        int _t08D3 = 1;
        int _t08D4 = 2;
        int _t08D5 = 3;
        int _t08D6 = 0;
        int _t08D7 = 2;
        int _t08D8 = 3;
        int _t08D9 = 0;
        int _t08DA = 1;
        int _t08DB = 3;
        int _t08DC = 0;
        int _t08DD = 1;
        int _t08DE = 2;
        int[12] _t08DF = {_t08D3, _t08D4, _t08D5, _t08D6, _t08D7, _t08D8, _t08D9, _t08DA, _t08DB, _t08DC, _t08DD, _t08DE};
        int _t08E0 = 1;
        int _t08E1 = 3;
        int[2] _t08E2 = {_t08E0, _t08E1};
        int _t08E3 = 3;
        int _t08E4 = 3;
        int[2] _t08E5 = {_t08E3, _t08E4};
        int _t08E6 = 9;
        int _t08E7 = 3;
        int[2] _t08E8 = {_t08E6, _t08E7};
        int _t08E9 = 27;
        int _t08EA = 3;
        int[2] _t08EB = {_t08E9, _t08EA};
        int[2][4] _t08EC = {_t08E2, _t08E5, _t08E8, _t08EB};
        int[2] _t08ED = prim $sub01C0<int[2]; %4> (_t08EC, faceIdx0873);
        int _t08EE = 0;
        int _t08EF = prim $sub01C0<int; %2> (_t08ED, _t08EE);
        int _t08F0 = prim +0015 (_t08EF, i08AD);
        int _t08F1 = prim $sub01C0<int; %12> (_t08DF, _t08F0);
        accum08F2 = prim @0010<int> (accum08F2, _t08F1);
      }
      int _t08F3 = 0;
      int _t08F4 = prim $dynsub01C2<int> (accum08F2, _t08F3);
      bool _t08F5 = prim ==0082 (_t08C0, _t08F4);
      int[4] _t08F6 = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t08F7 = 1;
      int _t08F8 = prim $sub01C0<int; %4> (_t08F6, _t08F7);
      int[4] _t08F9 = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t08FA = 2;
      int _t08FB = prim $sub01C0<int; %4> (_t08F9, _t08FA);
      int[4] _t08FC = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t08FD = 3;
      int _t08FE = prim $sub01C0<int; %4> (_t08FC, _t08FD);
      int[3] _t08FF = {_t08F8, _t08FB, _t08FE};
      int _t0900 = 1;
      int _t0901 = prim $sub01C0<int; %3> (_t08FF, _t0900);
      int _t0902 = 0;
      int _t0903 = 1;
      int _t0904 = 3;
      int[2] _t0905 = {_t0903, _t0904};
      int _t0906 = 3;
      int _t0907 = 3;
      int[2] _t0908 = {_t0906, _t0907};
      int _t0909 = 9;
      int _t090A = 3;
      int[2] _t090B = {_t0909, _t090A};
      int _t090C = 27;
      int _t090D = 3;
      int[2] _t090E = {_t090C, _t090D};
      int[2][4] _t090F = {_t0905, _t0908, _t090B, _t090E};
      int[2] _t0910 = prim $sub01C0<int[2]; %4> (_t090F, faceIdx0873);
      int _t0911 = 1;
      int _t0912 = prim $sub01C0<int; %2> (_t0910, _t0911);
      int[] _t0913 = prim $range01C3 (_t0902, _t0912);
      int[] accum0933 = {};
      foreach i08AD in _t0913 {
        int _t0914 = 1;
        int _t0915 = 2;
        int _t0916 = 3;
        int _t0917 = 0;
        int _t0918 = 2;
        int _t0919 = 3;
        int _t091A = 0;
        int _t091B = 1;
        int _t091C = 3;
        int _t091D = 0;
        int _t091E = 1;
        int _t091F = 2;
        int[12] _t0920 = {_t0914, _t0915, _t0916, _t0917, _t0918, _t0919, _t091A, _t091B, _t091C, _t091D, _t091E, _t091F};
        int _t0921 = 1;
        int _t0922 = 3;
        int[2] _t0923 = {_t0921, _t0922};
        int _t0924 = 3;
        int _t0925 = 3;
        int[2] _t0926 = {_t0924, _t0925};
        int _t0927 = 9;
        int _t0928 = 3;
        int[2] _t0929 = {_t0927, _t0928};
        int _t092A = 27;
        int _t092B = 3;
        int[2] _t092C = {_t092A, _t092B};
        int[2][4] _t092D = {_t0923, _t0926, _t0929, _t092C};
        int[2] _t092E = prim $sub01C0<int[2]; %4> (_t092D, faceIdx0873);
        int _t092F = 0;
        int _t0930 = prim $sub01C0<int; %2> (_t092E, _t092F);
        int _t0931 = prim +0015 (_t0930, i08AD);
        int _t0932 = prim $sub01C0<int; %12> (_t0920, _t0931);
        accum0933 = prim @0010<int> (accum0933, _t0932);
      }
      int _t0934 = 1;
      int _t0935 = prim $dynsub01C2<int> (accum0933, _t0934);
      bool _t0936 = prim ==0082 (_t0901, _t0935);
      int[4] _t0937 = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t0938 = 1;
      int _t0939 = prim $sub01C0<int; %4> (_t0937, _t0938);
      int[4] _t093A = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t093B = 2;
      int _t093C = prim $sub01C0<int; %4> (_t093A, _t093B);
      int[4] _t093D = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t093E = 3;
      int _t093F = prim $sub01C0<int; %4> (_t093D, _t093E);
      int[3] _t0940 = {_t0939, _t093C, _t093F};
      int _t0941 = 2;
      int _t0942 = prim $sub01C0<int; %3> (_t0940, _t0941);
      int _t0943 = 0;
      int _t0944 = 1;
      int _t0945 = 3;
      int[2] _t0946 = {_t0944, _t0945};
      int _t0947 = 3;
      int _t0948 = 3;
      int[2] _t0949 = {_t0947, _t0948};
      int _t094A = 9;
      int _t094B = 3;
      int[2] _t094C = {_t094A, _t094B};
      int _t094D = 27;
      int _t094E = 3;
      int[2] _t094F = {_t094D, _t094E};
      int[2][4] _t0950 = {_t0946, _t0949, _t094C, _t094F};
      int[2] _t0951 = prim $sub01C0<int[2]; %4> (_t0950, faceIdx0873);
      int _t0952 = 1;
      int _t0953 = prim $sub01C0<int; %2> (_t0951, _t0952);
      int[] _t0954 = prim $range01C3 (_t0943, _t0953);
      int[] accum0974 = {};
      foreach i08AD in _t0954 {
        int _t0955 = 1;
        int _t0956 = 2;
        int _t0957 = 3;
        int _t0958 = 0;
        int _t0959 = 2;
        int _t095A = 3;
        int _t095B = 0;
        int _t095C = 1;
        int _t095D = 3;
        int _t095E = 0;
        int _t095F = 1;
        int _t0960 = 2;
        int[12] _t0961 = {_t0955, _t0956, _t0957, _t0958, _t0959, _t095A, _t095B, _t095C, _t095D, _t095E, _t095F, _t0960};
        int _t0962 = 1;
        int _t0963 = 3;
        int[2] _t0964 = {_t0962, _t0963};
        int _t0965 = 3;
        int _t0966 = 3;
        int[2] _t0967 = {_t0965, _t0966};
        int _t0968 = 9;
        int _t0969 = 3;
        int[2] _t096A = {_t0968, _t0969};
        int _t096B = 27;
        int _t096C = 3;
        int[2] _t096D = {_t096B, _t096C};
        int[2][4] _t096E = {_t0964, _t0967, _t096A, _t096D};
        int[2] _t096F = prim $sub01C0<int[2]; %4> (_t096E, faceIdx0873);
        int _t0970 = 0;
        int _t0971 = prim $sub01C0<int; %2> (_t096F, _t0970);
        int _t0972 = prim +0015 (_t0971, i08AD);
        int _t0973 = prim $sub01C0<int; %12> (_t0961, _t0972);
        accum0974 = prim @0010<int> (accum0974, _t0973);
      }
      int _t0975 = 2;
      int _t0976 = prim $dynsub01C2<int> (accum0974, _t0975);
      bool _t0977 = prim ==0082 (_t0942, _t0976);
      bool _t0978 = prim $and01C4 (_t0936, _t0977);
      bool _t0979 = prim $and01C4 (_t08F5, _t0978);
      if _t0979 {
        int _t097A = 0;
        int[2] _t097B = {cellInt08B4, _t097A};
        return _t097B;
      }
      int[4] _t097C = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t097D = 0;
      int _t097E = prim $sub01C0<int; %4> (_t097C, _t097D);
      int[4] _t097F = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t0980 = 2;
      int _t0981 = prim $sub01C0<int; %4> (_t097F, _t0980);
      int[4] _t0982 = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t0983 = 3;
      int _t0984 = prim $sub01C0<int; %4> (_t0982, _t0983);
      int[3] _t0985 = {_t097E, _t0981, _t0984};
      int _t0986 = 0;
      int _t0987 = prim $sub01C0<int; %3> (_t0985, _t0986);
      int _t0988 = 0;
      int _t0989 = 1;
      int _t098A = 3;
      int[2] _t098B = {_t0989, _t098A};
      int _t098C = 3;
      int _t098D = 3;
      int[2] _t098E = {_t098C, _t098D};
      int _t098F = 9;
      int _t0990 = 3;
      int[2] _t0991 = {_t098F, _t0990};
      int _t0992 = 27;
      int _t0993 = 3;
      int[2] _t0994 = {_t0992, _t0993};
      int[2][4] _t0995 = {_t098B, _t098E, _t0991, _t0994};
      int[2] _t0996 = prim $sub01C0<int[2]; %4> (_t0995, faceIdx0873);
      int _t0997 = 1;
      int _t0998 = prim $sub01C0<int; %2> (_t0996, _t0997);
      int[] _t0999 = prim $range01C3 (_t0988, _t0998);
      int[] accum09B9 = {};
      foreach i08AD in _t0999 {
        int _t099A = 1;
        int _t099B = 2;
        int _t099C = 3;
        int _t099D = 0;
        int _t099E = 2;
        int _t099F = 3;
        int _t09A0 = 0;
        int _t09A1 = 1;
        int _t09A2 = 3;
        int _t09A3 = 0;
        int _t09A4 = 1;
        int _t09A5 = 2;
        int[12] _t09A6 = {_t099A, _t099B, _t099C, _t099D, _t099E, _t099F, _t09A0, _t09A1, _t09A2, _t09A3, _t09A4, _t09A5};
        int _t09A7 = 1;
        int _t09A8 = 3;
        int[2] _t09A9 = {_t09A7, _t09A8};
        int _t09AA = 3;
        int _t09AB = 3;
        int[2] _t09AC = {_t09AA, _t09AB};
        int _t09AD = 9;
        int _t09AE = 3;
        int[2] _t09AF = {_t09AD, _t09AE};
        int _t09B0 = 27;
        int _t09B1 = 3;
        int[2] _t09B2 = {_t09B0, _t09B1};
        int[2][4] _t09B3 = {_t09A9, _t09AC, _t09AF, _t09B2};
        int[2] _t09B4 = prim $sub01C0<int[2]; %4> (_t09B3, faceIdx0873);
        int _t09B5 = 0;
        int _t09B6 = prim $sub01C0<int; %2> (_t09B4, _t09B5);
        int _t09B7 = prim +0015 (_t09B6, i08AD);
        int _t09B8 = prim $sub01C0<int; %12> (_t09A6, _t09B7);
        accum09B9 = prim @0010<int> (accum09B9, _t09B8);
      }
      int _t09BA = 0;
      int _t09BB = prim $dynsub01C2<int> (accum09B9, _t09BA);
      bool _t09BC = prim ==0082 (_t0987, _t09BB);
      int[4] _t09BD = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t09BE = 0;
      int _t09BF = prim $sub01C0<int; %4> (_t09BD, _t09BE);
      int[4] _t09C0 = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t09C1 = 2;
      int _t09C2 = prim $sub01C0<int; %4> (_t09C0, _t09C1);
      int[4] _t09C3 = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t09C4 = 3;
      int _t09C5 = prim $sub01C0<int; %4> (_t09C3, _t09C4);
      int[3] _t09C6 = {_t09BF, _t09C2, _t09C5};
      int _t09C7 = 1;
      int _t09C8 = prim $sub01C0<int; %3> (_t09C6, _t09C7);
      int _t09C9 = 0;
      int _t09CA = 1;
      int _t09CB = 3;
      int[2] _t09CC = {_t09CA, _t09CB};
      int _t09CD = 3;
      int _t09CE = 3;
      int[2] _t09CF = {_t09CD, _t09CE};
      int _t09D0 = 9;
      int _t09D1 = 3;
      int[2] _t09D2 = {_t09D0, _t09D1};
      int _t09D3 = 27;
      int _t09D4 = 3;
      int[2] _t09D5 = {_t09D3, _t09D4};
      int[2][4] _t09D6 = {_t09CC, _t09CF, _t09D2, _t09D5};
      int[2] _t09D7 = prim $sub01C0<int[2]; %4> (_t09D6, faceIdx0873);
      int _t09D8 = 1;
      int _t09D9 = prim $sub01C0<int; %2> (_t09D7, _t09D8);
      int[] _t09DA = prim $range01C3 (_t09C9, _t09D9);
      int[] accum09FA = {};
      foreach i08AD in _t09DA {
        int _t09DB = 1;
        int _t09DC = 2;
        int _t09DD = 3;
        int _t09DE = 0;
        int _t09DF = 2;
        int _t09E0 = 3;
        int _t09E1 = 0;
        int _t09E2 = 1;
        int _t09E3 = 3;
        int _t09E4 = 0;
        int _t09E5 = 1;
        int _t09E6 = 2;
        int[12] _t09E7 = {_t09DB, _t09DC, _t09DD, _t09DE, _t09DF, _t09E0, _t09E1, _t09E2, _t09E3, _t09E4, _t09E5, _t09E6};
        int _t09E8 = 1;
        int _t09E9 = 3;
        int[2] _t09EA = {_t09E8, _t09E9};
        int _t09EB = 3;
        int _t09EC = 3;
        int[2] _t09ED = {_t09EB, _t09EC};
        int _t09EE = 9;
        int _t09EF = 3;
        int[2] _t09F0 = {_t09EE, _t09EF};
        int _t09F1 = 27;
        int _t09F2 = 3;
        int[2] _t09F3 = {_t09F1, _t09F2};
        int[2][4] _t09F4 = {_t09EA, _t09ED, _t09F0, _t09F3};
        int[2] _t09F5 = prim $sub01C0<int[2]; %4> (_t09F4, faceIdx0873);
        int _t09F6 = 0;
        int _t09F7 = prim $sub01C0<int; %2> (_t09F5, _t09F6);
        int _t09F8 = prim +0015 (_t09F7, i08AD);
        int _t09F9 = prim $sub01C0<int; %12> (_t09E7, _t09F8);
        accum09FA = prim @0010<int> (accum09FA, _t09F9);
      }
      int _t09FB = 1;
      int _t09FC = prim $dynsub01C2<int> (accum09FA, _t09FB);
      bool _t09FD = prim ==0082 (_t09C8, _t09FC);
      int[4] _t09FE = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t09FF = 0;
      int _t0A00 = prim $sub01C0<int; %4> (_t09FE, _t09FF);
      int[4] _t0A01 = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t0A02 = 2;
      int _t0A03 = prim $sub01C0<int; %4> (_t0A01, _t0A02);
      int[4] _t0A04 = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t0A05 = 3;
      int _t0A06 = prim $sub01C0<int; %4> (_t0A04, _t0A05);
      int[3] _t0A07 = {_t0A00, _t0A03, _t0A06};
      int _t0A08 = 2;
      int _t0A09 = prim $sub01C0<int; %3> (_t0A07, _t0A08);
      int _t0A0A = 0;
      int _t0A0B = 1;
      int _t0A0C = 3;
      int[2] _t0A0D = {_t0A0B, _t0A0C};
      int _t0A0E = 3;
      int _t0A0F = 3;
      int[2] _t0A10 = {_t0A0E, _t0A0F};
      int _t0A11 = 9;
      int _t0A12 = 3;
      int[2] _t0A13 = {_t0A11, _t0A12};
      int _t0A14 = 27;
      int _t0A15 = 3;
      int[2] _t0A16 = {_t0A14, _t0A15};
      int[2][4] _t0A17 = {_t0A0D, _t0A10, _t0A13, _t0A16};
      int[2] _t0A18 = prim $sub01C0<int[2]; %4> (_t0A17, faceIdx0873);
      int _t0A19 = 1;
      int _t0A1A = prim $sub01C0<int; %2> (_t0A18, _t0A19);
      int[] _t0A1B = prim $range01C3 (_t0A0A, _t0A1A);
      int[] accum0A3B = {};
      foreach i08AD in _t0A1B {
        int _t0A1C = 1;
        int _t0A1D = 2;
        int _t0A1E = 3;
        int _t0A1F = 0;
        int _t0A20 = 2;
        int _t0A21 = 3;
        int _t0A22 = 0;
        int _t0A23 = 1;
        int _t0A24 = 3;
        int _t0A25 = 0;
        int _t0A26 = 1;
        int _t0A27 = 2;
        int[12] _t0A28 = {_t0A1C, _t0A1D, _t0A1E, _t0A1F, _t0A20, _t0A21, _t0A22, _t0A23, _t0A24, _t0A25, _t0A26, _t0A27};
        int _t0A29 = 1;
        int _t0A2A = 3;
        int[2] _t0A2B = {_t0A29, _t0A2A};
        int _t0A2C = 3;
        int _t0A2D = 3;
        int[2] _t0A2E = {_t0A2C, _t0A2D};
        int _t0A2F = 9;
        int _t0A30 = 3;
        int[2] _t0A31 = {_t0A2F, _t0A30};
        int _t0A32 = 27;
        int _t0A33 = 3;
        int[2] _t0A34 = {_t0A32, _t0A33};
        int[2][4] _t0A35 = {_t0A2B, _t0A2E, _t0A31, _t0A34};
        int[2] _t0A36 = prim $sub01C0<int[2]; %4> (_t0A35, faceIdx0873);
        int _t0A37 = 0;
        int _t0A38 = prim $sub01C0<int; %2> (_t0A36, _t0A37);
        int _t0A39 = prim +0015 (_t0A38, i08AD);
        int _t0A3A = prim $sub01C0<int; %12> (_t0A28, _t0A39);
        accum0A3B = prim @0010<int> (accum0A3B, _t0A3A);
      }
      int _t0A3C = 2;
      int _t0A3D = prim $dynsub01C2<int> (accum0A3B, _t0A3C);
      bool _t0A3E = prim ==0082 (_t0A09, _t0A3D);
      bool _t0A3F = prim $and01C4 (_t09FD, _t0A3E);
      bool _t0A40 = prim $and01C4 (_t09BC, _t0A3F);
      if _t0A40 {
        int _t0A41 = 1;
        int[2] _t0A42 = {cellInt08B4, _t0A41};
        return _t0A42;
      }
      int[4] _t0A43 = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t0A44 = 0;
      int _t0A45 = prim $sub01C0<int; %4> (_t0A43, _t0A44);
      int[4] _t0A46 = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t0A47 = 1;
      int _t0A48 = prim $sub01C0<int; %4> (_t0A46, _t0A47);
      int[4] _t0A49 = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t0A4A = 3;
      int _t0A4B = prim $sub01C0<int; %4> (_t0A49, _t0A4A);
      int[3] _t0A4C = {_t0A45, _t0A48, _t0A4B};
      int _t0A4D = 0;
      int _t0A4E = prim $sub01C0<int; %3> (_t0A4C, _t0A4D);
      int _t0A4F = 0;
      int _t0A50 = 1;
      int _t0A51 = 3;
      int[2] _t0A52 = {_t0A50, _t0A51};
      int _t0A53 = 3;
      int _t0A54 = 3;
      int[2] _t0A55 = {_t0A53, _t0A54};
      int _t0A56 = 9;
      int _t0A57 = 3;
      int[2] _t0A58 = {_t0A56, _t0A57};
      int _t0A59 = 27;
      int _t0A5A = 3;
      int[2] _t0A5B = {_t0A59, _t0A5A};
      int[2][4] _t0A5C = {_t0A52, _t0A55, _t0A58, _t0A5B};
      int[2] _t0A5D = prim $sub01C0<int[2]; %4> (_t0A5C, faceIdx0873);
      int _t0A5E = 1;
      int _t0A5F = prim $sub01C0<int; %2> (_t0A5D, _t0A5E);
      int[] _t0A60 = prim $range01C3 (_t0A4F, _t0A5F);
      int[] accum0A80 = {};
      foreach i08AD in _t0A60 {
        int _t0A61 = 1;
        int _t0A62 = 2;
        int _t0A63 = 3;
        int _t0A64 = 0;
        int _t0A65 = 2;
        int _t0A66 = 3;
        int _t0A67 = 0;
        int _t0A68 = 1;
        int _t0A69 = 3;
        int _t0A6A = 0;
        int _t0A6B = 1;
        int _t0A6C = 2;
        int[12] _t0A6D = {_t0A61, _t0A62, _t0A63, _t0A64, _t0A65, _t0A66, _t0A67, _t0A68, _t0A69, _t0A6A, _t0A6B, _t0A6C};
        int _t0A6E = 1;
        int _t0A6F = 3;
        int[2] _t0A70 = {_t0A6E, _t0A6F};
        int _t0A71 = 3;
        int _t0A72 = 3;
        int[2] _t0A73 = {_t0A71, _t0A72};
        int _t0A74 = 9;
        int _t0A75 = 3;
        int[2] _t0A76 = {_t0A74, _t0A75};
        int _t0A77 = 27;
        int _t0A78 = 3;
        int[2] _t0A79 = {_t0A77, _t0A78};
        int[2][4] _t0A7A = {_t0A70, _t0A73, _t0A76, _t0A79};
        int[2] _t0A7B = prim $sub01C0<int[2]; %4> (_t0A7A, faceIdx0873);
        int _t0A7C = 0;
        int _t0A7D = prim $sub01C0<int; %2> (_t0A7B, _t0A7C);
        int _t0A7E = prim +0015 (_t0A7D, i08AD);
        int _t0A7F = prim $sub01C0<int; %12> (_t0A6D, _t0A7E);
        accum0A80 = prim @0010<int> (accum0A80, _t0A7F);
      }
      int _t0A81 = 0;
      int _t0A82 = prim $dynsub01C2<int> (accum0A80, _t0A81);
      bool _t0A83 = prim ==0082 (_t0A4E, _t0A82);
      int[4] _t0A84 = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t0A85 = 0;
      int _t0A86 = prim $sub01C0<int; %4> (_t0A84, _t0A85);
      int[4] _t0A87 = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t0A88 = 1;
      int _t0A89 = prim $sub01C0<int; %4> (_t0A87, _t0A88);
      int[4] _t0A8A = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t0A8B = 3;
      int _t0A8C = prim $sub01C0<int; %4> (_t0A8A, _t0A8B);
      int[3] _t0A8D = {_t0A86, _t0A89, _t0A8C};
      int _t0A8E = 1;
      int _t0A8F = prim $sub01C0<int; %3> (_t0A8D, _t0A8E);
      int _t0A90 = 0;
      int _t0A91 = 1;
      int _t0A92 = 3;
      int[2] _t0A93 = {_t0A91, _t0A92};
      int _t0A94 = 3;
      int _t0A95 = 3;
      int[2] _t0A96 = {_t0A94, _t0A95};
      int _t0A97 = 9;
      int _t0A98 = 3;
      int[2] _t0A99 = {_t0A97, _t0A98};
      int _t0A9A = 27;
      int _t0A9B = 3;
      int[2] _t0A9C = {_t0A9A, _t0A9B};
      int[2][4] _t0A9D = {_t0A93, _t0A96, _t0A99, _t0A9C};
      int[2] _t0A9E = prim $sub01C0<int[2]; %4> (_t0A9D, faceIdx0873);
      int _t0A9F = 1;
      int _t0AA0 = prim $sub01C0<int; %2> (_t0A9E, _t0A9F);
      int[] _t0AA1 = prim $range01C3 (_t0A90, _t0AA0);
      int[] accum0AC1 = {};
      foreach i08AD in _t0AA1 {
        int _t0AA2 = 1;
        int _t0AA3 = 2;
        int _t0AA4 = 3;
        int _t0AA5 = 0;
        int _t0AA6 = 2;
        int _t0AA7 = 3;
        int _t0AA8 = 0;
        int _t0AA9 = 1;
        int _t0AAA = 3;
        int _t0AAB = 0;
        int _t0AAC = 1;
        int _t0AAD = 2;
        int[12] _t0AAE = {_t0AA2, _t0AA3, _t0AA4, _t0AA5, _t0AA6, _t0AA7, _t0AA8, _t0AA9, _t0AAA, _t0AAB, _t0AAC, _t0AAD};
        int _t0AAF = 1;
        int _t0AB0 = 3;
        int[2] _t0AB1 = {_t0AAF, _t0AB0};
        int _t0AB2 = 3;
        int _t0AB3 = 3;
        int[2] _t0AB4 = {_t0AB2, _t0AB3};
        int _t0AB5 = 9;
        int _t0AB6 = 3;
        int[2] _t0AB7 = {_t0AB5, _t0AB6};
        int _t0AB8 = 27;
        int _t0AB9 = 3;
        int[2] _t0ABA = {_t0AB8, _t0AB9};
        int[2][4] _t0ABB = {_t0AB1, _t0AB4, _t0AB7, _t0ABA};
        int[2] _t0ABC = prim $sub01C0<int[2]; %4> (_t0ABB, faceIdx0873);
        int _t0ABD = 0;
        int _t0ABE = prim $sub01C0<int; %2> (_t0ABC, _t0ABD);
        int _t0ABF = prim +0015 (_t0ABE, i08AD);
        int _t0AC0 = prim $sub01C0<int; %12> (_t0AAE, _t0ABF);
        accum0AC1 = prim @0010<int> (accum0AC1, _t0AC0);
      }
      int _t0AC2 = 1;
      int _t0AC3 = prim $dynsub01C2<int> (accum0AC1, _t0AC2);
      bool _t0AC4 = prim ==0082 (_t0A8F, _t0AC3);
      int[4] _t0AC5 = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t0AC6 = 0;
      int _t0AC7 = prim $sub01C0<int; %4> (_t0AC5, _t0AC6);
      int[4] _t0AC8 = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t0AC9 = 1;
      int _t0ACA = prim $sub01C0<int; %4> (_t0AC8, _t0AC9);
      int[4] _t0ACB = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t0ACC = 3;
      int _t0ACD = prim $sub01C0<int; %4> (_t0ACB, _t0ACC);
      int[3] _t0ACE = {_t0AC7, _t0ACA, _t0ACD};
      int _t0ACF = 2;
      int _t0AD0 = prim $sub01C0<int; %3> (_t0ACE, _t0ACF);
      int _t0AD1 = 0;
      int _t0AD2 = 1;
      int _t0AD3 = 3;
      int[2] _t0AD4 = {_t0AD2, _t0AD3};
      int _t0AD5 = 3;
      int _t0AD6 = 3;
      int[2] _t0AD7 = {_t0AD5, _t0AD6};
      int _t0AD8 = 9;
      int _t0AD9 = 3;
      int[2] _t0ADA = {_t0AD8, _t0AD9};
      int _t0ADB = 27;
      int _t0ADC = 3;
      int[2] _t0ADD = {_t0ADB, _t0ADC};
      int[2][4] _t0ADE = {_t0AD4, _t0AD7, _t0ADA, _t0ADD};
      int[2] _t0ADF = prim $sub01C0<int[2]; %4> (_t0ADE, faceIdx0873);
      int _t0AE0 = 1;
      int _t0AE1 = prim $sub01C0<int; %2> (_t0ADF, _t0AE0);
      int[] _t0AE2 = prim $range01C3 (_t0AD1, _t0AE1);
      int[] accum0B02 = {};
      foreach i08AD in _t0AE2 {
        int _t0AE3 = 1;
        int _t0AE4 = 2;
        int _t0AE5 = 3;
        int _t0AE6 = 0;
        int _t0AE7 = 2;
        int _t0AE8 = 3;
        int _t0AE9 = 0;
        int _t0AEA = 1;
        int _t0AEB = 3;
        int _t0AEC = 0;
        int _t0AED = 1;
        int _t0AEE = 2;
        int[12] _t0AEF = {_t0AE3, _t0AE4, _t0AE5, _t0AE6, _t0AE7, _t0AE8, _t0AE9, _t0AEA, _t0AEB, _t0AEC, _t0AED, _t0AEE};
        int _t0AF0 = 1;
        int _t0AF1 = 3;
        int[2] _t0AF2 = {_t0AF0, _t0AF1};
        int _t0AF3 = 3;
        int _t0AF4 = 3;
        int[2] _t0AF5 = {_t0AF3, _t0AF4};
        int _t0AF6 = 9;
        int _t0AF7 = 3;
        int[2] _t0AF8 = {_t0AF6, _t0AF7};
        int _t0AF9 = 27;
        int _t0AFA = 3;
        int[2] _t0AFB = {_t0AF9, _t0AFA};
        int[2][4] _t0AFC = {_t0AF2, _t0AF5, _t0AF8, _t0AFB};
        int[2] _t0AFD = prim $sub01C0<int[2]; %4> (_t0AFC, faceIdx0873);
        int _t0AFE = 0;
        int _t0AFF = prim $sub01C0<int; %2> (_t0AFD, _t0AFE);
        int _t0B00 = prim +0015 (_t0AFF, i08AD);
        int _t0B01 = prim $sub01C0<int; %12> (_t0AEF, _t0B00);
        accum0B02 = prim @0010<int> (accum0B02, _t0B01);
      }
      int _t0B03 = 2;
      int _t0B04 = prim $dynsub01C2<int> (accum0B02, _t0B03);
      bool _t0B05 = prim ==0082 (_t0AD0, _t0B04);
      bool _t0B06 = prim $and01C4 (_t0AC4, _t0B05);
      bool _t0B07 = prim $and01C4 (_t0A83, _t0B06);
      if _t0B07 {
        int _t0B08 = 2;
        int[2] _t0B09 = {cellInt08B4, _t0B08};
        return _t0B09;
      }
      int[4] _t0B0A = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t0B0B = 0;
      int _t0B0C = prim $sub01C0<int; %4> (_t0B0A, _t0B0B);
      int[4] _t0B0D = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t0B0E = 1;
      int _t0B0F = prim $sub01C0<int; %4> (_t0B0D, _t0B0E);
      int[4] _t0B10 = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t0B11 = 2;
      int _t0B12 = prim $sub01C0<int; %4> (_t0B10, _t0B11);
      int[3] _t0B13 = {_t0B0C, _t0B0F, _t0B12};
      int _t0B14 = 0;
      int _t0B15 = prim $sub01C0<int; %3> (_t0B13, _t0B14);
      int _t0B16 = 0;
      int _t0B17 = 1;
      int _t0B18 = 3;
      int[2] _t0B19 = {_t0B17, _t0B18};
      int _t0B1A = 3;
      int _t0B1B = 3;
      int[2] _t0B1C = {_t0B1A, _t0B1B};
      int _t0B1D = 9;
      int _t0B1E = 3;
      int[2] _t0B1F = {_t0B1D, _t0B1E};
      int _t0B20 = 27;
      int _t0B21 = 3;
      int[2] _t0B22 = {_t0B20, _t0B21};
      int[2][4] _t0B23 = {_t0B19, _t0B1C, _t0B1F, _t0B22};
      int[2] _t0B24 = prim $sub01C0<int[2]; %4> (_t0B23, faceIdx0873);
      int _t0B25 = 1;
      int _t0B26 = prim $sub01C0<int; %2> (_t0B24, _t0B25);
      int[] _t0B27 = prim $range01C3 (_t0B16, _t0B26);
      int[] accum0B47 = {};
      foreach i08AD in _t0B27 {
        int _t0B28 = 1;
        int _t0B29 = 2;
        int _t0B2A = 3;
        int _t0B2B = 0;
        int _t0B2C = 2;
        int _t0B2D = 3;
        int _t0B2E = 0;
        int _t0B2F = 1;
        int _t0B30 = 3;
        int _t0B31 = 0;
        int _t0B32 = 1;
        int _t0B33 = 2;
        int[12] _t0B34 = {_t0B28, _t0B29, _t0B2A, _t0B2B, _t0B2C, _t0B2D, _t0B2E, _t0B2F, _t0B30, _t0B31, _t0B32, _t0B33};
        int _t0B35 = 1;
        int _t0B36 = 3;
        int[2] _t0B37 = {_t0B35, _t0B36};
        int _t0B38 = 3;
        int _t0B39 = 3;
        int[2] _t0B3A = {_t0B38, _t0B39};
        int _t0B3B = 9;
        int _t0B3C = 3;
        int[2] _t0B3D = {_t0B3B, _t0B3C};
        int _t0B3E = 27;
        int _t0B3F = 3;
        int[2] _t0B40 = {_t0B3E, _t0B3F};
        int[2][4] _t0B41 = {_t0B37, _t0B3A, _t0B3D, _t0B40};
        int[2] _t0B42 = prim $sub01C0<int[2]; %4> (_t0B41, faceIdx0873);
        int _t0B43 = 0;
        int _t0B44 = prim $sub01C0<int; %2> (_t0B42, _t0B43);
        int _t0B45 = prim +0015 (_t0B44, i08AD);
        int _t0B46 = prim $sub01C0<int; %12> (_t0B34, _t0B45);
        accum0B47 = prim @0010<int> (accum0B47, _t0B46);
      }
      int _t0B48 = 0;
      int _t0B49 = prim $dynsub01C2<int> (accum0B47, _t0B48);
      bool _t0B4A = prim ==0082 (_t0B15, _t0B49);
      int[4] _t0B4B = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t0B4C = 0;
      int _t0B4D = prim $sub01C0<int; %4> (_t0B4B, _t0B4C);
      int[4] _t0B4E = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t0B4F = 1;
      int _t0B50 = prim $sub01C0<int; %4> (_t0B4E, _t0B4F);
      int[4] _t0B51 = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t0B52 = 2;
      int _t0B53 = prim $sub01C0<int; %4> (_t0B51, _t0B52);
      int[3] _t0B54 = {_t0B4D, _t0B50, _t0B53};
      int _t0B55 = 1;
      int _t0B56 = prim $sub01C0<int; %3> (_t0B54, _t0B55);
      int _t0B57 = 0;
      int _t0B58 = 1;
      int _t0B59 = 3;
      int[2] _t0B5A = {_t0B58, _t0B59};
      int _t0B5B = 3;
      int _t0B5C = 3;
      int[2] _t0B5D = {_t0B5B, _t0B5C};
      int _t0B5E = 9;
      int _t0B5F = 3;
      int[2] _t0B60 = {_t0B5E, _t0B5F};
      int _t0B61 = 27;
      int _t0B62 = 3;
      int[2] _t0B63 = {_t0B61, _t0B62};
      int[2][4] _t0B64 = {_t0B5A, _t0B5D, _t0B60, _t0B63};
      int[2] _t0B65 = prim $sub01C0<int[2]; %4> (_t0B64, faceIdx0873);
      int _t0B66 = 1;
      int _t0B67 = prim $sub01C0<int; %2> (_t0B65, _t0B66);
      int[] _t0B68 = prim $range01C3 (_t0B57, _t0B67);
      int[] accum0B88 = {};
      foreach i08AD in _t0B68 {
        int _t0B69 = 1;
        int _t0B6A = 2;
        int _t0B6B = 3;
        int _t0B6C = 0;
        int _t0B6D = 2;
        int _t0B6E = 3;
        int _t0B6F = 0;
        int _t0B70 = 1;
        int _t0B71 = 3;
        int _t0B72 = 0;
        int _t0B73 = 1;
        int _t0B74 = 2;
        int[12] _t0B75 = {_t0B69, _t0B6A, _t0B6B, _t0B6C, _t0B6D, _t0B6E, _t0B6F, _t0B70, _t0B71, _t0B72, _t0B73, _t0B74};
        int _t0B76 = 1;
        int _t0B77 = 3;
        int[2] _t0B78 = {_t0B76, _t0B77};
        int _t0B79 = 3;
        int _t0B7A = 3;
        int[2] _t0B7B = {_t0B79, _t0B7A};
        int _t0B7C = 9;
        int _t0B7D = 3;
        int[2] _t0B7E = {_t0B7C, _t0B7D};
        int _t0B7F = 27;
        int _t0B80 = 3;
        int[2] _t0B81 = {_t0B7F, _t0B80};
        int[2][4] _t0B82 = {_t0B78, _t0B7B, _t0B7E, _t0B81};
        int[2] _t0B83 = prim $sub01C0<int[2]; %4> (_t0B82, faceIdx0873);
        int _t0B84 = 0;
        int _t0B85 = prim $sub01C0<int; %2> (_t0B83, _t0B84);
        int _t0B86 = prim +0015 (_t0B85, i08AD);
        int _t0B87 = prim $sub01C0<int; %12> (_t0B75, _t0B86);
        accum0B88 = prim @0010<int> (accum0B88, _t0B87);
      }
      int _t0B89 = 1;
      int _t0B8A = prim $dynsub01C2<int> (accum0B88, _t0B89);
      bool _t0B8B = prim ==0082 (_t0B56, _t0B8A);
      int[4] _t0B8C = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t0B8D = 0;
      int _t0B8E = prim $sub01C0<int; %4> (_t0B8C, _t0B8D);
      int[4] _t0B8F = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t0B90 = 1;
      int _t0B91 = prim $sub01C0<int; %4> (_t0B8F, _t0B90);
      int[4] _t0B92 = extractFemItem2(ExtractIndices(Mesh), int, mesh0875, cellInt08B4 : int);
      int _t0B93 = 2;
      int _t0B94 = prim $sub01C0<int; %4> (_t0B92, _t0B93);
      int[3] _t0B95 = {_t0B8E, _t0B91, _t0B94};
      int _t0B96 = 2;
      int _t0B97 = prim $sub01C0<int; %3> (_t0B95, _t0B96);
      int _t0B98 = 0;
      int _t0B99 = 1;
      int _t0B9A = 3;
      int[2] _t0B9B = {_t0B99, _t0B9A};
      int _t0B9C = 3;
      int _t0B9D = 3;
      int[2] _t0B9E = {_t0B9C, _t0B9D};
      int _t0B9F = 9;
      int _t0BA0 = 3;
      int[2] _t0BA1 = {_t0B9F, _t0BA0};
      int _t0BA2 = 27;
      int _t0BA3 = 3;
      int[2] _t0BA4 = {_t0BA2, _t0BA3};
      int[2][4] _t0BA5 = {_t0B9B, _t0B9E, _t0BA1, _t0BA4};
      int[2] _t0BA6 = prim $sub01C0<int[2]; %4> (_t0BA5, faceIdx0873);
      int _t0BA7 = 1;
      int _t0BA8 = prim $sub01C0<int; %2> (_t0BA6, _t0BA7);
      int[] _t0BA9 = prim $range01C3 (_t0B98, _t0BA8);
      int[] accum0BC9 = {};
      foreach i08AD in _t0BA9 {
        int _t0BAA = 1;
        int _t0BAB = 2;
        int _t0BAC = 3;
        int _t0BAD = 0;
        int _t0BAE = 2;
        int _t0BAF = 3;
        int _t0BB0 = 0;
        int _t0BB1 = 1;
        int _t0BB2 = 3;
        int _t0BB3 = 0;
        int _t0BB4 = 1;
        int _t0BB5 = 2;
        int[12] _t0BB6 = {_t0BAA, _t0BAB, _t0BAC, _t0BAD, _t0BAE, _t0BAF, _t0BB0, _t0BB1, _t0BB2, _t0BB3, _t0BB4, _t0BB5};
        int _t0BB7 = 1;
        int _t0BB8 = 3;
        int[2] _t0BB9 = {_t0BB7, _t0BB8};
        int _t0BBA = 3;
        int _t0BBB = 3;
        int[2] _t0BBC = {_t0BBA, _t0BBB};
        int _t0BBD = 9;
        int _t0BBE = 3;
        int[2] _t0BBF = {_t0BBD, _t0BBE};
        int _t0BC0 = 27;
        int _t0BC1 = 3;
        int[2] _t0BC2 = {_t0BC0, _t0BC1};
        int[2][4] _t0BC3 = {_t0BB9, _t0BBC, _t0BBF, _t0BC2};
        int[2] _t0BC4 = prim $sub01C0<int[2]; %4> (_t0BC3, faceIdx0873);
        int _t0BC5 = 0;
        int _t0BC6 = prim $sub01C0<int; %2> (_t0BC4, _t0BC5);
        int _t0BC7 = prim +0015 (_t0BC6, i08AD);
        int _t0BC8 = prim $sub01C0<int; %12> (_t0BB6, _t0BC7);
        accum0BC9 = prim @0010<int> (accum0BC9, _t0BC8);
      }
      int _t0BCA = 2;
      int _t0BCB = prim $dynsub01C2<int> (accum0BC9, _t0BCA);
      bool _t0BCC = prim ==0082 (_t0B97, _t0BCB);
      bool _t0BCD = prim $and01C4 (_t0B8B, _t0BCC);
      bool _t0BCE = prim $and01C4 (_t0B4A, _t0BCD);
      if _t0BCE {
        int _t0BCF = 3;
        int[2] _t0BD0 = {cellInt08B4, _t0BCF};
        return _t0BD0;
      }
    }
  }
  int _t0BD1 = -1;
  int _t0BD2 = -1;
  int[2] _t0BD3 = {_t0BD1, _t0BD2};
  return _t0BD3;
}
function vec2#0 _enter0BD4 (vec3 refPos0BD5, vec3 dPos0BD6)
{
  real time0BD7 = +inf;
  int face0BD8 = -1;
  real _t0BD9 = 0.57735026919e0;
  real _t0BDA = 0.57735026919e0;
  real _t0BDB = -0.57735026919e0;
  real _t0BDC = 0.57735026919e0;
  vec3 _t0BDD = [_t0BDA, _t0BDB, _t0BDC];
  real _t0BDE = prim •00CE<$[3]; $[3]; $[]> (_t0BDD, refPos0BD5);
  real _t0BDF = prim -0026<$[]> (_t0BD9, _t0BDE);
  real _t0BE0 = 0.57735026919e0;
  real _t0BE1 = -0.57735026919e0;
  real _t0BE2 = 0.57735026919e0;
  vec3 _t0BE3 = [_t0BE0, _t0BE1, _t0BE2];
  real _t0BE4 = prim •00CE<$[3]; $[3]; $[]> (_t0BE3, dPos0BD6);
  real _t0BE5 = prim /0055 (_t0BDF, _t0BE4);
  real _t0BE6 = -0.e0;
  bool _t0BE7 = prim >0080 (_t0BE5, _t0BE6);
  real _t0BE8 = 0.57735026919e0;
  real _t0BE9 = 0.57735026919e0;
  real _t0BEA = -0.57735026919e0;
  real _t0BEB = 0.57735026919e0;
  vec3 _t0BEC = [_t0BE9, _t0BEA, _t0BEB];
  real _t0BED = prim •00CE<$[3]; $[3]; $[]> (_t0BEC, refPos0BD5);
  real _t0BEE = prim -0026<$[]> (_t0BE8, _t0BED);
  real _t0BEF = 0.57735026919e0;
  real _t0BF0 = -0.57735026919e0;
  real _t0BF1 = 0.57735026919e0;
  vec3 _t0BF2 = [_t0BEF, _t0BF0, _t0BF1];
  real _t0BF3 = prim •00CE<$[3]; $[3]; $[]> (_t0BF2, dPos0BD6);
  real _t0BF4 = prim /0055 (_t0BEE, _t0BF3);
  bool _t0BF5 = prim >0080 (time0BD7, _t0BF4);
  bool _t0BF6 = prim $and01C4 (_t0BE7, _t0BF5);
  if _t0BF6 {
    real _t0BF7 = 0.1e1;
    real _t0BF8 = 0.1e-8;
    real _t0BF9 = prim +0017<$[]> (_t0BF7, _t0BF8);
    real _t0BFA = 0.1e1;
    real _t0BFB = 0.1e1;
    real _t0BFC = 0.1e1;
    vec3 _t0BFD = [_t0BFA, _t0BFB, _t0BFC];
    real _t0BFE = 0.57735026919e0;
    real _t0BFF = 0.57735026919e0;
    real _t0C00 = -0.57735026919e0;
    real _t0C01 = 0.57735026919e0;
    vec3 _t0C02 = [_t0BFF, _t0C00, _t0C01];
    real _t0C03 = prim •00CE<$[3]; $[3]; $[]> (_t0C02, refPos0BD5);
    real _t0C04 = prim -0026<$[]> (_t0BFE, _t0C03);
    real _t0C05 = 0.57735026919e0;
    real _t0C06 = -0.57735026919e0;
    real _t0C07 = 0.57735026919e0;
    vec3 _t0C08 = [_t0C05, _t0C06, _t0C07];
    real _t0C09 = prim •00CE<$[3]; $[3]; $[]> (_t0C08, dPos0BD6);
    real _t0C0A = prim /0055 (_t0C04, _t0C09);
    vec3 _t0C0B = prim *0038<$[3]> (dPos0BD6, _t0C0A);
    vec3 _t0C0C = prim +0017<$[3]> (_t0C0B, refPos0BD5);
    real _t0C0D = prim •00CE<$[3]; $[3]; $[]> (_t0BFD, _t0C0C);
    bool _t0C0E = prim >0080 (_t0BF9, _t0C0D);
    real _t0C0F = 0.1e-8;
    real _t0C10 = 0.1e-8;
    real _t0C11 = 0.1e-8;
    vec3 _t0C12 = [_t0C0F, _t0C10, _t0C11];
    real _t0C13 = 0.57735026919e0;
    real _t0C14 = 0.57735026919e0;
    real _t0C15 = -0.57735026919e0;
    real _t0C16 = 0.57735026919e0;
    vec3 _t0C17 = [_t0C14, _t0C15, _t0C16];
    real _t0C18 = prim •00CE<$[3]; $[3]; $[]> (_t0C17, refPos0BD5);
    real _t0C19 = prim -0026<$[]> (_t0C13, _t0C18);
    real _t0C1A = 0.57735026919e0;
    real _t0C1B = -0.57735026919e0;
    real _t0C1C = 0.57735026919e0;
    vec3 _t0C1D = [_t0C1A, _t0C1B, _t0C1C];
    real _t0C1E = prim •00CE<$[3]; $[3]; $[]> (_t0C1D, dPos0BD6);
    real _t0C1F = prim /0055 (_t0C19, _t0C1E);
    vec3 _t0C20 = prim *0038<$[3]> (dPos0BD6, _t0C1F);
    vec3 _t0C21 = prim +0017<$[3]> (_t0C20, refPos0BD5);
    vec3 _t0C22 = prim +0017<$[3]> (_t0C12, _t0C21);
    real _t0C23 = _t0C22[0];
    real _t0C24 = -0.e0;
    bool _t0C25 = prim >0080 (_t0C23, _t0C24);
    real _t0C26 = 0.1e-8;
    real _t0C27 = 0.1e-8;
    real _t0C28 = 0.1e-8;
    vec3 _t0C29 = [_t0C26, _t0C27, _t0C28];
    real _t0C2A = 0.57735026919e0;
    real _t0C2B = 0.57735026919e0;
    real _t0C2C = -0.57735026919e0;
    real _t0C2D = 0.57735026919e0;
    vec3 _t0C2E = [_t0C2B, _t0C2C, _t0C2D];
    real _t0C2F = prim •00CE<$[3]; $[3]; $[]> (_t0C2E, refPos0BD5);
    real _t0C30 = prim -0026<$[]> (_t0C2A, _t0C2F);
    real _t0C31 = 0.57735026919e0;
    real _t0C32 = -0.57735026919e0;
    real _t0C33 = 0.57735026919e0;
    vec3 _t0C34 = [_t0C31, _t0C32, _t0C33];
    real _t0C35 = prim •00CE<$[3]; $[3]; $[]> (_t0C34, dPos0BD6);
    real _t0C36 = prim /0055 (_t0C30, _t0C35);
    vec3 _t0C37 = prim *0038<$[3]> (dPos0BD6, _t0C36);
    vec3 _t0C38 = prim +0017<$[3]> (_t0C37, refPos0BD5);
    vec3 _t0C39 = prim +0017<$[3]> (_t0C29, _t0C38);
    real _t0C3A = _t0C39[1];
    real _t0C3B = -0.e0;
    bool _t0C3C = prim >0080 (_t0C3A, _t0C3B);
    real _t0C3D = 0.1e-8;
    real _t0C3E = 0.1e-8;
    real _t0C3F = 0.1e-8;
    vec3 _t0C40 = [_t0C3D, _t0C3E, _t0C3F];
    real _t0C41 = 0.57735026919e0;
    real _t0C42 = 0.57735026919e0;
    real _t0C43 = -0.57735026919e0;
    real _t0C44 = 0.57735026919e0;
    vec3 _t0C45 = [_t0C42, _t0C43, _t0C44];
    real _t0C46 = prim •00CE<$[3]; $[3]; $[]> (_t0C45, refPos0BD5);
    real _t0C47 = prim -0026<$[]> (_t0C41, _t0C46);
    real _t0C48 = 0.57735026919e0;
    real _t0C49 = -0.57735026919e0;
    real _t0C4A = 0.57735026919e0;
    vec3 _t0C4B = [_t0C48, _t0C49, _t0C4A];
    real _t0C4C = prim •00CE<$[3]; $[3]; $[]> (_t0C4B, dPos0BD6);
    real _t0C4D = prim /0055 (_t0C47, _t0C4C);
    vec3 _t0C4E = prim *0038<$[3]> (dPos0BD6, _t0C4D);
    vec3 _t0C4F = prim +0017<$[3]> (_t0C4E, refPos0BD5);
    vec3 _t0C50 = prim +0017<$[3]> (_t0C40, _t0C4F);
    real _t0C51 = _t0C50[2];
    real _t0C52 = -0.e0;
    bool _t0C53 = prim >0080 (_t0C51, _t0C52);
    bool _t0C54 = prim $and01C4 (_t0C3C, _t0C53);
    bool _t0C55 = prim $and01C4 (_t0C25, _t0C54);
    bool _t0C56 = prim $and01C4 (_t0C0E, _t0C55);
    if _t0C56 {
      real _t0C57 = 0.57735026919e0;
      real _t0C58 = 0.57735026919e0;
      real _t0C59 = -0.57735026919e0;
      real _t0C5A = 0.57735026919e0;
      vec3 _t0C5B = [_t0C58, _t0C59, _t0C5A];
      real _t0C5C = prim •00CE<$[3]; $[3]; $[]> (_t0C5B, refPos0BD5);
      real _t0C5D = prim -0026<$[]> (_t0C57, _t0C5C);
      real _t0C5E = 0.57735026919e0;
      real _t0C5F = -0.57735026919e0;
      real _t0C60 = 0.57735026919e0;
      vec3 _t0C61 = [_t0C5E, _t0C5F, _t0C60];
      real _t0C62 = prim •00CE<$[3]; $[3]; $[]> (_t0C61, dPos0BD6);
      time0BD7 = prim /0055 (_t0C5D, _t0C62);
      face0BD8 = 0;
    }
  }
  real _t0C63 = 0.e0;
  real _t0C64 = 0.1e1;
  real _t0C65 = 0.e0;
  real _t0C66 = 0.e0;
  vec3 _t0C67 = [_t0C64, _t0C65, _t0C66];
  real _t0C68 = prim •00CE<$[3]; $[3]; $[]> (_t0C67, refPos0BD5);
  real _t0C69 = prim -0026<$[]> (_t0C63, _t0C68);
  real _t0C6A = 0.1e1;
  real _t0C6B = 0.e0;
  real _t0C6C = 0.e0;
  vec3 _t0C6D = [_t0C6A, _t0C6B, _t0C6C];
  real _t0C6E = prim •00CE<$[3]; $[3]; $[]> (_t0C6D, dPos0BD6);
  real _t0C6F = prim /0055 (_t0C69, _t0C6E);
  real _t0C70 = -0.e0;
  bool _t0C71 = prim >0080 (_t0C6F, _t0C70);
  real _t0C72 = 0.e0;
  real _t0C73 = 0.1e1;
  real _t0C74 = 0.e0;
  real _t0C75 = 0.e0;
  vec3 _t0C76 = [_t0C73, _t0C74, _t0C75];
  real _t0C77 = prim •00CE<$[3]; $[3]; $[]> (_t0C76, refPos0BD5);
  real _t0C78 = prim -0026<$[]> (_t0C72, _t0C77);
  real _t0C79 = 0.1e1;
  real _t0C7A = 0.e0;
  real _t0C7B = 0.e0;
  vec3 _t0C7C = [_t0C79, _t0C7A, _t0C7B];
  real _t0C7D = prim •00CE<$[3]; $[3]; $[]> (_t0C7C, dPos0BD6);
  real _t0C7E = prim /0055 (_t0C78, _t0C7D);
  bool _t0C7F = prim >0080 (time0BD7, _t0C7E);
  bool _t0C80 = prim $and01C4 (_t0C71, _t0C7F);
  if _t0C80 {
    real _t0C81 = 0.1e1;
    real _t0C82 = 0.1e-8;
    real _t0C83 = prim +0017<$[]> (_t0C81, _t0C82);
    real _t0C84 = 0.1e1;
    real _t0C85 = 0.1e1;
    real _t0C86 = 0.1e1;
    vec3 _t0C87 = [_t0C84, _t0C85, _t0C86];
    real _t0C88 = 0.e0;
    real _t0C89 = 0.1e1;
    real _t0C8A = 0.e0;
    real _t0C8B = 0.e0;
    vec3 _t0C8C = [_t0C89, _t0C8A, _t0C8B];
    real _t0C8D = prim •00CE<$[3]; $[3]; $[]> (_t0C8C, refPos0BD5);
    real _t0C8E = prim -0026<$[]> (_t0C88, _t0C8D);
    real _t0C8F = 0.1e1;
    real _t0C90 = 0.e0;
    real _t0C91 = 0.e0;
    vec3 _t0C92 = [_t0C8F, _t0C90, _t0C91];
    real _t0C93 = prim •00CE<$[3]; $[3]; $[]> (_t0C92, dPos0BD6);
    real _t0C94 = prim /0055 (_t0C8E, _t0C93);
    vec3 _t0C95 = prim *0038<$[3]> (dPos0BD6, _t0C94);
    vec3 _t0C96 = prim +0017<$[3]> (_t0C95, refPos0BD5);
    real _t0C97 = prim •00CE<$[3]; $[3]; $[]> (_t0C87, _t0C96);
    bool _t0C98 = prim >0080 (_t0C83, _t0C97);
    real _t0C99 = 0.1e-8;
    real _t0C9A = 0.1e-8;
    real _t0C9B = 0.1e-8;
    vec3 _t0C9C = [_t0C99, _t0C9A, _t0C9B];
    real _t0C9D = 0.e0;
    real _t0C9E = 0.1e1;
    real _t0C9F = 0.e0;
    real _t0CA0 = 0.e0;
    vec3 _t0CA1 = [_t0C9E, _t0C9F, _t0CA0];
    real _t0CA2 = prim •00CE<$[3]; $[3]; $[]> (_t0CA1, refPos0BD5);
    real _t0CA3 = prim -0026<$[]> (_t0C9D, _t0CA2);
    real _t0CA4 = 0.1e1;
    real _t0CA5 = 0.e0;
    real _t0CA6 = 0.e0;
    vec3 _t0CA7 = [_t0CA4, _t0CA5, _t0CA6];
    real _t0CA8 = prim •00CE<$[3]; $[3]; $[]> (_t0CA7, dPos0BD6);
    real _t0CA9 = prim /0055 (_t0CA3, _t0CA8);
    vec3 _t0CAA = prim *0038<$[3]> (dPos0BD6, _t0CA9);
    vec3 _t0CAB = prim +0017<$[3]> (_t0CAA, refPos0BD5);
    vec3 _t0CAC = prim +0017<$[3]> (_t0C9C, _t0CAB);
    real _t0CAD = _t0CAC[0];
    real _t0CAE = -0.e0;
    bool _t0CAF = prim >0080 (_t0CAD, _t0CAE);
    real _t0CB0 = 0.1e-8;
    real _t0CB1 = 0.1e-8;
    real _t0CB2 = 0.1e-8;
    vec3 _t0CB3 = [_t0CB0, _t0CB1, _t0CB2];
    real _t0CB4 = 0.e0;
    real _t0CB5 = 0.1e1;
    real _t0CB6 = 0.e0;
    real _t0CB7 = 0.e0;
    vec3 _t0CB8 = [_t0CB5, _t0CB6, _t0CB7];
    real _t0CB9 = prim •00CE<$[3]; $[3]; $[]> (_t0CB8, refPos0BD5);
    real _t0CBA = prim -0026<$[]> (_t0CB4, _t0CB9);
    real _t0CBB = 0.1e1;
    real _t0CBC = 0.e0;
    real _t0CBD = 0.e0;
    vec3 _t0CBE = [_t0CBB, _t0CBC, _t0CBD];
    real _t0CBF = prim •00CE<$[3]; $[3]; $[]> (_t0CBE, dPos0BD6);
    real _t0CC0 = prim /0055 (_t0CBA, _t0CBF);
    vec3 _t0CC1 = prim *0038<$[3]> (dPos0BD6, _t0CC0);
    vec3 _t0CC2 = prim +0017<$[3]> (_t0CC1, refPos0BD5);
    vec3 _t0CC3 = prim +0017<$[3]> (_t0CB3, _t0CC2);
    real _t0CC4 = _t0CC3[1];
    real _t0CC5 = -0.e0;
    bool _t0CC6 = prim >0080 (_t0CC4, _t0CC5);
    real _t0CC7 = 0.1e-8;
    real _t0CC8 = 0.1e-8;
    real _t0CC9 = 0.1e-8;
    vec3 _t0CCA = [_t0CC7, _t0CC8, _t0CC9];
    real _t0CCB = 0.e0;
    real _t0CCC = 0.1e1;
    real _t0CCD = 0.e0;
    real _t0CCE = 0.e0;
    vec3 _t0CCF = [_t0CCC, _t0CCD, _t0CCE];
    real _t0CD0 = prim •00CE<$[3]; $[3]; $[]> (_t0CCF, refPos0BD5);
    real _t0CD1 = prim -0026<$[]> (_t0CCB, _t0CD0);
    real _t0CD2 = 0.1e1;
    real _t0CD3 = 0.e0;
    real _t0CD4 = 0.e0;
    vec3 _t0CD5 = [_t0CD2, _t0CD3, _t0CD4];
    real _t0CD6 = prim •00CE<$[3]; $[3]; $[]> (_t0CD5, dPos0BD6);
    real _t0CD7 = prim /0055 (_t0CD1, _t0CD6);
    vec3 _t0CD8 = prim *0038<$[3]> (dPos0BD6, _t0CD7);
    vec3 _t0CD9 = prim +0017<$[3]> (_t0CD8, refPos0BD5);
    vec3 _t0CDA = prim +0017<$[3]> (_t0CCA, _t0CD9);
    real _t0CDB = _t0CDA[2];
    real _t0CDC = -0.e0;
    bool _t0CDD = prim >0080 (_t0CDB, _t0CDC);
    bool _t0CDE = prim $and01C4 (_t0CC6, _t0CDD);
    bool _t0CDF = prim $and01C4 (_t0CAF, _t0CDE);
    bool _t0CE0 = prim $and01C4 (_t0C98, _t0CDF);
    if _t0CE0 {
      real _t0CE1 = 0.e0;
      real _t0CE2 = 0.1e1;
      real _t0CE3 = 0.e0;
      real _t0CE4 = 0.e0;
      vec3 _t0CE5 = [_t0CE2, _t0CE3, _t0CE4];
      real _t0CE6 = prim •00CE<$[3]; $[3]; $[]> (_t0CE5, refPos0BD5);
      real _t0CE7 = prim -0026<$[]> (_t0CE1, _t0CE6);
      real _t0CE8 = 0.1e1;
      real _t0CE9 = 0.e0;
      real _t0CEA = 0.e0;
      vec3 _t0CEB = [_t0CE8, _t0CE9, _t0CEA];
      real _t0CEC = prim •00CE<$[3]; $[3]; $[]> (_t0CEB, dPos0BD6);
      time0BD7 = prim /0055 (_t0CE7, _t0CEC);
      face0BD8 = 1;
    }
  }
  real _t0CED = 0.e0;
  real _t0CEE = 0.e0;
  real _t0CEF = 0.1e1;
  real _t0CF0 = 0.e0;
  vec3 _t0CF1 = [_t0CEE, _t0CEF, _t0CF0];
  real _t0CF2 = prim •00CE<$[3]; $[3]; $[]> (_t0CF1, refPos0BD5);
  real _t0CF3 = prim -0026<$[]> (_t0CED, _t0CF2);
  real _t0CF4 = 0.e0;
  real _t0CF5 = 0.1e1;
  real _t0CF6 = 0.e0;
  vec3 _t0CF7 = [_t0CF4, _t0CF5, _t0CF6];
  real _t0CF8 = prim •00CE<$[3]; $[3]; $[]> (_t0CF7, dPos0BD6);
  real _t0CF9 = prim /0055 (_t0CF3, _t0CF8);
  real _t0CFA = -0.e0;
  bool _t0CFB = prim >0080 (_t0CF9, _t0CFA);
  real _t0CFC = 0.e0;
  real _t0CFD = 0.e0;
  real _t0CFE = 0.1e1;
  real _t0CFF = 0.e0;
  vec3 _t0D00 = [_t0CFD, _t0CFE, _t0CFF];
  real _t0D01 = prim •00CE<$[3]; $[3]; $[]> (_t0D00, refPos0BD5);
  real _t0D02 = prim -0026<$[]> (_t0CFC, _t0D01);
  real _t0D03 = 0.e0;
  real _t0D04 = 0.1e1;
  real _t0D05 = 0.e0;
  vec3 _t0D06 = [_t0D03, _t0D04, _t0D05];
  real _t0D07 = prim •00CE<$[3]; $[3]; $[]> (_t0D06, dPos0BD6);
  real _t0D08 = prim /0055 (_t0D02, _t0D07);
  bool _t0D09 = prim >0080 (time0BD7, _t0D08);
  bool _t0D0A = prim $and01C4 (_t0CFB, _t0D09);
  if _t0D0A {
    real _t0D0B = 0.1e1;
    real _t0D0C = 0.1e-8;
    real _t0D0D = prim +0017<$[]> (_t0D0B, _t0D0C);
    real _t0D0E = 0.1e1;
    real _t0D0F = 0.1e1;
    real _t0D10 = 0.1e1;
    vec3 _t0D11 = [_t0D0E, _t0D0F, _t0D10];
    real _t0D12 = 0.e0;
    real _t0D13 = 0.e0;
    real _t0D14 = 0.1e1;
    real _t0D15 = 0.e0;
    vec3 _t0D16 = [_t0D13, _t0D14, _t0D15];
    real _t0D17 = prim •00CE<$[3]; $[3]; $[]> (_t0D16, refPos0BD5);
    real _t0D18 = prim -0026<$[]> (_t0D12, _t0D17);
    real _t0D19 = 0.e0;
    real _t0D1A = 0.1e1;
    real _t0D1B = 0.e0;
    vec3 _t0D1C = [_t0D19, _t0D1A, _t0D1B];
    real _t0D1D = prim •00CE<$[3]; $[3]; $[]> (_t0D1C, dPos0BD6);
    real _t0D1E = prim /0055 (_t0D18, _t0D1D);
    vec3 _t0D1F = prim *0038<$[3]> (dPos0BD6, _t0D1E);
    vec3 _t0D20 = prim +0017<$[3]> (_t0D1F, refPos0BD5);
    real _t0D21 = prim •00CE<$[3]; $[3]; $[]> (_t0D11, _t0D20);
    bool _t0D22 = prim >0080 (_t0D0D, _t0D21);
    real _t0D23 = 0.1e-8;
    real _t0D24 = 0.1e-8;
    real _t0D25 = 0.1e-8;
    vec3 _t0D26 = [_t0D23, _t0D24, _t0D25];
    real _t0D27 = 0.e0;
    real _t0D28 = 0.e0;
    real _t0D29 = 0.1e1;
    real _t0D2A = 0.e0;
    vec3 _t0D2B = [_t0D28, _t0D29, _t0D2A];
    real _t0D2C = prim •00CE<$[3]; $[3]; $[]> (_t0D2B, refPos0BD5);
    real _t0D2D = prim -0026<$[]> (_t0D27, _t0D2C);
    real _t0D2E = 0.e0;
    real _t0D2F = 0.1e1;
    real _t0D30 = 0.e0;
    vec3 _t0D31 = [_t0D2E, _t0D2F, _t0D30];
    real _t0D32 = prim •00CE<$[3]; $[3]; $[]> (_t0D31, dPos0BD6);
    real _t0D33 = prim /0055 (_t0D2D, _t0D32);
    vec3 _t0D34 = prim *0038<$[3]> (dPos0BD6, _t0D33);
    vec3 _t0D35 = prim +0017<$[3]> (_t0D34, refPos0BD5);
    vec3 _t0D36 = prim +0017<$[3]> (_t0D26, _t0D35);
    real _t0D37 = _t0D36[0];
    real _t0D38 = -0.e0;
    bool _t0D39 = prim >0080 (_t0D37, _t0D38);
    real _t0D3A = 0.1e-8;
    real _t0D3B = 0.1e-8;
    real _t0D3C = 0.1e-8;
    vec3 _t0D3D = [_t0D3A, _t0D3B, _t0D3C];
    real _t0D3E = 0.e0;
    real _t0D3F = 0.e0;
    real _t0D40 = 0.1e1;
    real _t0D41 = 0.e0;
    vec3 _t0D42 = [_t0D3F, _t0D40, _t0D41];
    real _t0D43 = prim •00CE<$[3]; $[3]; $[]> (_t0D42, refPos0BD5);
    real _t0D44 = prim -0026<$[]> (_t0D3E, _t0D43);
    real _t0D45 = 0.e0;
    real _t0D46 = 0.1e1;
    real _t0D47 = 0.e0;
    vec3 _t0D48 = [_t0D45, _t0D46, _t0D47];
    real _t0D49 = prim •00CE<$[3]; $[3]; $[]> (_t0D48, dPos0BD6);
    real _t0D4A = prim /0055 (_t0D44, _t0D49);
    vec3 _t0D4B = prim *0038<$[3]> (dPos0BD6, _t0D4A);
    vec3 _t0D4C = prim +0017<$[3]> (_t0D4B, refPos0BD5);
    vec3 _t0D4D = prim +0017<$[3]> (_t0D3D, _t0D4C);
    real _t0D4E = _t0D4D[1];
    real _t0D4F = -0.e0;
    bool _t0D50 = prim >0080 (_t0D4E, _t0D4F);
    real _t0D51 = 0.1e-8;
    real _t0D52 = 0.1e-8;
    real _t0D53 = 0.1e-8;
    vec3 _t0D54 = [_t0D51, _t0D52, _t0D53];
    real _t0D55 = 0.e0;
    real _t0D56 = 0.e0;
    real _t0D57 = 0.1e1;
    real _t0D58 = 0.e0;
    vec3 _t0D59 = [_t0D56, _t0D57, _t0D58];
    real _t0D5A = prim •00CE<$[3]; $[3]; $[]> (_t0D59, refPos0BD5);
    real _t0D5B = prim -0026<$[]> (_t0D55, _t0D5A);
    real _t0D5C = 0.e0;
    real _t0D5D = 0.1e1;
    real _t0D5E = 0.e0;
    vec3 _t0D5F = [_t0D5C, _t0D5D, _t0D5E];
    real _t0D60 = prim •00CE<$[3]; $[3]; $[]> (_t0D5F, dPos0BD6);
    real _t0D61 = prim /0055 (_t0D5B, _t0D60);
    vec3 _t0D62 = prim *0038<$[3]> (dPos0BD6, _t0D61);
    vec3 _t0D63 = prim +0017<$[3]> (_t0D62, refPos0BD5);
    vec3 _t0D64 = prim +0017<$[3]> (_t0D54, _t0D63);
    real _t0D65 = _t0D64[2];
    real _t0D66 = -0.e0;
    bool _t0D67 = prim >0080 (_t0D65, _t0D66);
    bool _t0D68 = prim $and01C4 (_t0D50, _t0D67);
    bool _t0D69 = prim $and01C4 (_t0D39, _t0D68);
    bool _t0D6A = prim $and01C4 (_t0D22, _t0D69);
    if _t0D6A {
      real _t0D6B = 0.e0;
      real _t0D6C = 0.e0;
      real _t0D6D = 0.1e1;
      real _t0D6E = 0.e0;
      vec3 _t0D6F = [_t0D6C, _t0D6D, _t0D6E];
      real _t0D70 = prim •00CE<$[3]; $[3]; $[]> (_t0D6F, refPos0BD5);
      real _t0D71 = prim -0026<$[]> (_t0D6B, _t0D70);
      real _t0D72 = 0.e0;
      real _t0D73 = 0.1e1;
      real _t0D74 = 0.e0;
      vec3 _t0D75 = [_t0D72, _t0D73, _t0D74];
      real _t0D76 = prim •00CE<$[3]; $[3]; $[]> (_t0D75, dPos0BD6);
      time0BD7 = prim /0055 (_t0D71, _t0D76);
      face0BD8 = 2;
    }
  }
  real _t0D77 = 0.e0;
  real _t0D78 = 0.e0;
  real _t0D79 = 0.e0;
  real _t0D7A = 0.1e1;
  vec3 _t0D7B = [_t0D78, _t0D79, _t0D7A];
  real _t0D7C = prim •00CE<$[3]; $[3]; $[]> (_t0D7B, refPos0BD5);
  real _t0D7D = prim -0026<$[]> (_t0D77, _t0D7C);
  real _t0D7E = 0.e0;
  real _t0D7F = 0.e0;
  real _t0D80 = 0.1e1;
  vec3 _t0D81 = [_t0D7E, _t0D7F, _t0D80];
  real _t0D82 = prim •00CE<$[3]; $[3]; $[]> (_t0D81, dPos0BD6);
  real _t0D83 = prim /0055 (_t0D7D, _t0D82);
  real _t0D84 = -0.e0;
  bool _t0D85 = prim >0080 (_t0D83, _t0D84);
  real _t0D86 = 0.e0;
  real _t0D87 = 0.e0;
  real _t0D88 = 0.e0;
  real _t0D89 = 0.1e1;
  vec3 _t0D8A = [_t0D87, _t0D88, _t0D89];
  real _t0D8B = prim •00CE<$[3]; $[3]; $[]> (_t0D8A, refPos0BD5);
  real _t0D8C = prim -0026<$[]> (_t0D86, _t0D8B);
  real _t0D8D = 0.e0;
  real _t0D8E = 0.e0;
  real _t0D8F = 0.1e1;
  vec3 _t0D90 = [_t0D8D, _t0D8E, _t0D8F];
  real _t0D91 = prim •00CE<$[3]; $[3]; $[]> (_t0D90, dPos0BD6);
  real _t0D92 = prim /0055 (_t0D8C, _t0D91);
  bool _t0D93 = prim >0080 (time0BD7, _t0D92);
  bool _t0D94 = prim $and01C4 (_t0D85, _t0D93);
  if _t0D94 {
    real _t0D95 = 0.1e1;
    real _t0D96 = 0.1e-8;
    real _t0D97 = prim +0017<$[]> (_t0D95, _t0D96);
    real _t0D98 = 0.1e1;
    real _t0D99 = 0.1e1;
    real _t0D9A = 0.1e1;
    vec3 _t0D9B = [_t0D98, _t0D99, _t0D9A];
    real _t0D9C = 0.e0;
    real _t0D9D = 0.e0;
    real _t0D9E = 0.e0;
    real _t0D9F = 0.1e1;
    vec3 _t0DA0 = [_t0D9D, _t0D9E, _t0D9F];
    real _t0DA1 = prim •00CE<$[3]; $[3]; $[]> (_t0DA0, refPos0BD5);
    real _t0DA2 = prim -0026<$[]> (_t0D9C, _t0DA1);
    real _t0DA3 = 0.e0;
    real _t0DA4 = 0.e0;
    real _t0DA5 = 0.1e1;
    vec3 _t0DA6 = [_t0DA3, _t0DA4, _t0DA5];
    real _t0DA7 = prim •00CE<$[3]; $[3]; $[]> (_t0DA6, dPos0BD6);
    real _t0DA8 = prim /0055 (_t0DA2, _t0DA7);
    vec3 _t0DA9 = prim *0038<$[3]> (dPos0BD6, _t0DA8);
    vec3 _t0DAA = prim +0017<$[3]> (_t0DA9, refPos0BD5);
    real _t0DAB = prim •00CE<$[3]; $[3]; $[]> (_t0D9B, _t0DAA);
    bool _t0DAC = prim >0080 (_t0D97, _t0DAB);
    real _t0DAD = 0.1e-8;
    real _t0DAE = 0.1e-8;
    real _t0DAF = 0.1e-8;
    vec3 _t0DB0 = [_t0DAD, _t0DAE, _t0DAF];
    real _t0DB1 = 0.e0;
    real _t0DB2 = 0.e0;
    real _t0DB3 = 0.e0;
    real _t0DB4 = 0.1e1;
    vec3 _t0DB5 = [_t0DB2, _t0DB3, _t0DB4];
    real _t0DB6 = prim •00CE<$[3]; $[3]; $[]> (_t0DB5, refPos0BD5);
    real _t0DB7 = prim -0026<$[]> (_t0DB1, _t0DB6);
    real _t0DB8 = 0.e0;
    real _t0DB9 = 0.e0;
    real _t0DBA = 0.1e1;
    vec3 _t0DBB = [_t0DB8, _t0DB9, _t0DBA];
    real _t0DBC = prim •00CE<$[3]; $[3]; $[]> (_t0DBB, dPos0BD6);
    real _t0DBD = prim /0055 (_t0DB7, _t0DBC);
    vec3 _t0DBE = prim *0038<$[3]> (dPos0BD6, _t0DBD);
    vec3 _t0DBF = prim +0017<$[3]> (_t0DBE, refPos0BD5);
    vec3 _t0DC0 = prim +0017<$[3]> (_t0DB0, _t0DBF);
    real _t0DC1 = _t0DC0[0];
    real _t0DC2 = -0.e0;
    bool _t0DC3 = prim >0080 (_t0DC1, _t0DC2);
    real _t0DC4 = 0.1e-8;
    real _t0DC5 = 0.1e-8;
    real _t0DC6 = 0.1e-8;
    vec3 _t0DC7 = [_t0DC4, _t0DC5, _t0DC6];
    real _t0DC8 = 0.e0;
    real _t0DC9 = 0.e0;
    real _t0DCA = 0.e0;
    real _t0DCB = 0.1e1;
    vec3 _t0DCC = [_t0DC9, _t0DCA, _t0DCB];
    real _t0DCD = prim •00CE<$[3]; $[3]; $[]> (_t0DCC, refPos0BD5);
    real _t0DCE = prim -0026<$[]> (_t0DC8, _t0DCD);
    real _t0DCF = 0.e0;
    real _t0DD0 = 0.e0;
    real _t0DD1 = 0.1e1;
    vec3 _t0DD2 = [_t0DCF, _t0DD0, _t0DD1];
    real _t0DD3 = prim •00CE<$[3]; $[3]; $[]> (_t0DD2, dPos0BD6);
    real _t0DD4 = prim /0055 (_t0DCE, _t0DD3);
    vec3 _t0DD5 = prim *0038<$[3]> (dPos0BD6, _t0DD4);
    vec3 _t0DD6 = prim +0017<$[3]> (_t0DD5, refPos0BD5);
    vec3 _t0DD7 = prim +0017<$[3]> (_t0DC7, _t0DD6);
    real _t0DD8 = _t0DD7[1];
    real _t0DD9 = -0.e0;
    bool _t0DDA = prim >0080 (_t0DD8, _t0DD9);
    real _t0DDB = 0.1e-8;
    real _t0DDC = 0.1e-8;
    real _t0DDD = 0.1e-8;
    vec3 _t0DDE = [_t0DDB, _t0DDC, _t0DDD];
    real _t0DDF = 0.e0;
    real _t0DE0 = 0.e0;
    real _t0DE1 = 0.e0;
    real _t0DE2 = 0.1e1;
    vec3 _t0DE3 = [_t0DE0, _t0DE1, _t0DE2];
    real _t0DE4 = prim •00CE<$[3]; $[3]; $[]> (_t0DE3, refPos0BD5);
    real _t0DE5 = prim -0026<$[]> (_t0DDF, _t0DE4);
    real _t0DE6 = 0.e0;
    real _t0DE7 = 0.e0;
    real _t0DE8 = 0.1e1;
    vec3 _t0DE9 = [_t0DE6, _t0DE7, _t0DE8];
    real _t0DEA = prim •00CE<$[3]; $[3]; $[]> (_t0DE9, dPos0BD6);
    real _t0DEB = prim /0055 (_t0DE5, _t0DEA);
    vec3 _t0DEC = prim *0038<$[3]> (dPos0BD6, _t0DEB);
    vec3 _t0DED = prim +0017<$[3]> (_t0DEC, refPos0BD5);
    vec3 _t0DEE = prim +0017<$[3]> (_t0DDE, _t0DED);
    real _t0DEF = _t0DEE[2];
    real _t0DF0 = -0.e0;
    bool _t0DF1 = prim >0080 (_t0DEF, _t0DF0);
    bool _t0DF2 = prim $and01C4 (_t0DDA, _t0DF1);
    bool _t0DF3 = prim $and01C4 (_t0DC3, _t0DF2);
    bool _t0DF4 = prim $and01C4 (_t0DAC, _t0DF3);
    if _t0DF4 {
      real _t0DF5 = 0.e0;
      real _t0DF6 = 0.e0;
      real _t0DF7 = 0.e0;
      real _t0DF8 = 0.1e1;
      vec3 _t0DF9 = [_t0DF6, _t0DF7, _t0DF8];
      real _t0DFA = prim •00CE<$[3]; $[3]; $[]> (_t0DF9, refPos0BD5);
      real _t0DFB = prim -0026<$[]> (_t0DF5, _t0DFA);
      real _t0DFC = 0.e0;
      real _t0DFD = 0.e0;
      real _t0DFE = 0.1e1;
      vec3 _t0DFF = [_t0DFC, _t0DFD, _t0DFE];
      real _t0E00 = prim •00CE<$[3]; $[3]; $[]> (_t0DFF, dPos0BD6);
      time0BD7 = prim /0055 (_t0DFB, _t0E00);
      face0BD8 = 3;
    }
  }
  int _t0E01 = -1;
  bool _t0E02 = prim !=0086 (face0BD8, _t0E01);
  if _t0E02 {
    real _t0E03 = (real)face0BD8;
    vec2 _t0E04 = [time0BD7, _t0E03];
    return _t0E04;
  } else {
    real _t0E05 = -0.1e1;
    real _t0E06 = -0.1e1;
    vec2 _t0E07 = [_t0E05, _t0E06];
    return _t0E07;
  }
}
function vec2#0 _exit0E08 (vec3 refPos0BD5, vec3 dPos0BD6)
{
  real time0E09 = +inf;
  int face0E0A = -1;
  real _t0E0B = 0.57735026919e0;
  real _t0E0C = 0.57735026919e0;
  real _t0E0D = -0.57735026919e0;
  real _t0E0E = 0.57735026919e0;
  vec3 _t0E0F = [_t0E0C, _t0E0D, _t0E0E];
  real _t0E10 = prim •00CE<$[3]; $[3]; $[]> (_t0E0F, refPos0BD5);
  real _t0E11 = prim -0026<$[]> (_t0E0B, _t0E10);
  real _t0E12 = 0.57735026919e0;
  real _t0E13 = -0.57735026919e0;
  real _t0E14 = 0.57735026919e0;
  vec3 _t0E15 = [_t0E12, _t0E13, _t0E14];
  real _t0E16 = prim •00CE<$[3]; $[3]; $[]> (_t0E15, dPos0BD6);
  real _t0E17 = prim /0055 (_t0E11, _t0E16);
  real _t0E18 = -0.e0;
  bool _t0E19 = prim >0080 (_t0E17, _t0E18);
  real _t0E1A = 0.57735026919e0;
  real _t0E1B = 0.57735026919e0;
  real _t0E1C = -0.57735026919e0;
  real _t0E1D = 0.57735026919e0;
  vec3 _t0E1E = [_t0E1B, _t0E1C, _t0E1D];
  real _t0E1F = prim •00CE<$[3]; $[3]; $[]> (_t0E1E, refPos0BD5);
  real _t0E20 = prim -0026<$[]> (_t0E1A, _t0E1F);
  real _t0E21 = 0.57735026919e0;
  real _t0E22 = -0.57735026919e0;
  real _t0E23 = 0.57735026919e0;
  vec3 _t0E24 = [_t0E21, _t0E22, _t0E23];
  real _t0E25 = prim •00CE<$[3]; $[3]; $[]> (_t0E24, dPos0BD6);
  real _t0E26 = prim /0055 (_t0E20, _t0E25);
  bool _t0E27 = prim >0080 (time0E09, _t0E26);
  bool _t0E28 = prim $and01C4 (_t0E19, _t0E27);
  if _t0E28 {
    real _t0E29 = 0.57735026919e0;
    real _t0E2A = 0.57735026919e0;
    real _t0E2B = -0.57735026919e0;
    real _t0E2C = 0.57735026919e0;
    vec3 _t0E2D = [_t0E2A, _t0E2B, _t0E2C];
    real _t0E2E = prim •00CE<$[3]; $[3]; $[]> (_t0E2D, refPos0BD5);
    real _t0E2F = prim -0026<$[]> (_t0E29, _t0E2E);
    real _t0E30 = 0.57735026919e0;
    real _t0E31 = -0.57735026919e0;
    real _t0E32 = 0.57735026919e0;
    vec3 _t0E33 = [_t0E30, _t0E31, _t0E32];
    real _t0E34 = prim •00CE<$[3]; $[3]; $[]> (_t0E33, dPos0BD6);
    time0E09 = prim /0055 (_t0E2F, _t0E34);
    face0E0A = 0;
  }
  real _t0E35 = 0.e0;
  real _t0E36 = 0.1e1;
  real _t0E37 = 0.e0;
  real _t0E38 = 0.e0;
  vec3 _t0E39 = [_t0E36, _t0E37, _t0E38];
  real _t0E3A = prim •00CE<$[3]; $[3]; $[]> (_t0E39, refPos0BD5);
  real _t0E3B = prim -0026<$[]> (_t0E35, _t0E3A);
  real _t0E3C = 0.1e1;
  real _t0E3D = 0.e0;
  real _t0E3E = 0.e0;
  vec3 _t0E3F = [_t0E3C, _t0E3D, _t0E3E];
  real _t0E40 = prim •00CE<$[3]; $[3]; $[]> (_t0E3F, dPos0BD6);
  real _t0E41 = prim /0055 (_t0E3B, _t0E40);
  real _t0E42 = -0.e0;
  bool _t0E43 = prim >0080 (_t0E41, _t0E42);
  real _t0E44 = 0.e0;
  real _t0E45 = 0.1e1;
  real _t0E46 = 0.e0;
  real _t0E47 = 0.e0;
  vec3 _t0E48 = [_t0E45, _t0E46, _t0E47];
  real _t0E49 = prim •00CE<$[3]; $[3]; $[]> (_t0E48, refPos0BD5);
  real _t0E4A = prim -0026<$[]> (_t0E44, _t0E49);
  real _t0E4B = 0.1e1;
  real _t0E4C = 0.e0;
  real _t0E4D = 0.e0;
  vec3 _t0E4E = [_t0E4B, _t0E4C, _t0E4D];
  real _t0E4F = prim •00CE<$[3]; $[3]; $[]> (_t0E4E, dPos0BD6);
  real _t0E50 = prim /0055 (_t0E4A, _t0E4F);
  bool _t0E51 = prim >0080 (time0E09, _t0E50);
  bool _t0E52 = prim $and01C4 (_t0E43, _t0E51);
  if _t0E52 {
    real _t0E53 = 0.e0;
    real _t0E54 = 0.1e1;
    real _t0E55 = 0.e0;
    real _t0E56 = 0.e0;
    vec3 _t0E57 = [_t0E54, _t0E55, _t0E56];
    real _t0E58 = prim •00CE<$[3]; $[3]; $[]> (_t0E57, refPos0BD5);
    real _t0E59 = prim -0026<$[]> (_t0E53, _t0E58);
    real _t0E5A = 0.1e1;
    real _t0E5B = 0.e0;
    real _t0E5C = 0.e0;
    vec3 _t0E5D = [_t0E5A, _t0E5B, _t0E5C];
    real _t0E5E = prim •00CE<$[3]; $[3]; $[]> (_t0E5D, dPos0BD6);
    time0E09 = prim /0055 (_t0E59, _t0E5E);
    face0E0A = 1;
  }
  real _t0E5F = 0.e0;
  real _t0E60 = 0.e0;
  real _t0E61 = 0.1e1;
  real _t0E62 = 0.e0;
  vec3 _t0E63 = [_t0E60, _t0E61, _t0E62];
  real _t0E64 = prim •00CE<$[3]; $[3]; $[]> (_t0E63, refPos0BD5);
  real _t0E65 = prim -0026<$[]> (_t0E5F, _t0E64);
  real _t0E66 = 0.e0;
  real _t0E67 = 0.1e1;
  real _t0E68 = 0.e0;
  vec3 _t0E69 = [_t0E66, _t0E67, _t0E68];
  real _t0E6A = prim •00CE<$[3]; $[3]; $[]> (_t0E69, dPos0BD6);
  real _t0E6B = prim /0055 (_t0E65, _t0E6A);
  real _t0E6C = -0.e0;
  bool _t0E6D = prim >0080 (_t0E6B, _t0E6C);
  real _t0E6E = 0.e0;
  real _t0E6F = 0.e0;
  real _t0E70 = 0.1e1;
  real _t0E71 = 0.e0;
  vec3 _t0E72 = [_t0E6F, _t0E70, _t0E71];
  real _t0E73 = prim •00CE<$[3]; $[3]; $[]> (_t0E72, refPos0BD5);
  real _t0E74 = prim -0026<$[]> (_t0E6E, _t0E73);
  real _t0E75 = 0.e0;
  real _t0E76 = 0.1e1;
  real _t0E77 = 0.e0;
  vec3 _t0E78 = [_t0E75, _t0E76, _t0E77];
  real _t0E79 = prim •00CE<$[3]; $[3]; $[]> (_t0E78, dPos0BD6);
  real _t0E7A = prim /0055 (_t0E74, _t0E79);
  bool _t0E7B = prim >0080 (time0E09, _t0E7A);
  bool _t0E7C = prim $and01C4 (_t0E6D, _t0E7B);
  if _t0E7C {
    real _t0E7D = 0.e0;
    real _t0E7E = 0.e0;
    real _t0E7F = 0.1e1;
    real _t0E80 = 0.e0;
    vec3 _t0E81 = [_t0E7E, _t0E7F, _t0E80];
    real _t0E82 = prim •00CE<$[3]; $[3]; $[]> (_t0E81, refPos0BD5);
    real _t0E83 = prim -0026<$[]> (_t0E7D, _t0E82);
    real _t0E84 = 0.e0;
    real _t0E85 = 0.1e1;
    real _t0E86 = 0.e0;
    vec3 _t0E87 = [_t0E84, _t0E85, _t0E86];
    real _t0E88 = prim •00CE<$[3]; $[3]; $[]> (_t0E87, dPos0BD6);
    time0E09 = prim /0055 (_t0E83, _t0E88);
    face0E0A = 2;
  }
  real _t0E89 = 0.e0;
  real _t0E8A = 0.e0;
  real _t0E8B = 0.e0;
  real _t0E8C = 0.1e1;
  vec3 _t0E8D = [_t0E8A, _t0E8B, _t0E8C];
  real _t0E8E = prim •00CE<$[3]; $[3]; $[]> (_t0E8D, refPos0BD5);
  real _t0E8F = prim -0026<$[]> (_t0E89, _t0E8E);
  real _t0E90 = 0.e0;
  real _t0E91 = 0.e0;
  real _t0E92 = 0.1e1;
  vec3 _t0E93 = [_t0E90, _t0E91, _t0E92];
  real _t0E94 = prim •00CE<$[3]; $[3]; $[]> (_t0E93, dPos0BD6);
  real _t0E95 = prim /0055 (_t0E8F, _t0E94);
  real _t0E96 = -0.e0;
  bool _t0E97 = prim >0080 (_t0E95, _t0E96);
  real _t0E98 = 0.e0;
  real _t0E99 = 0.e0;
  real _t0E9A = 0.e0;
  real _t0E9B = 0.1e1;
  vec3 _t0E9C = [_t0E99, _t0E9A, _t0E9B];
  real _t0E9D = prim •00CE<$[3]; $[3]; $[]> (_t0E9C, refPos0BD5);
  real _t0E9E = prim -0026<$[]> (_t0E98, _t0E9D);
  real _t0E9F = 0.e0;
  real _t0EA0 = 0.e0;
  real _t0EA1 = 0.1e1;
  vec3 _t0EA2 = [_t0E9F, _t0EA0, _t0EA1];
  real _t0EA3 = prim •00CE<$[3]; $[3]; $[]> (_t0EA2, dPos0BD6);
  real _t0EA4 = prim /0055 (_t0E9E, _t0EA3);
  bool _t0EA5 = prim >0080 (time0E09, _t0EA4);
  bool _t0EA6 = prim $and01C4 (_t0E97, _t0EA5);
  if _t0EA6 {
    real _t0EA7 = 0.e0;
    real _t0EA8 = 0.e0;
    real _t0EA9 = 0.e0;
    real _t0EAA = 0.1e1;
    vec3 _t0EAB = [_t0EA8, _t0EA9, _t0EAA];
    real _t0EAC = prim •00CE<$[3]; $[3]; $[]> (_t0EAB, refPos0BD5);
    real _t0EAD = prim -0026<$[]> (_t0EA7, _t0EAC);
    real _t0EAE = 0.e0;
    real _t0EAF = 0.e0;
    real _t0EB0 = 0.1e1;
    vec3 _t0EB1 = [_t0EAE, _t0EAF, _t0EB0];
    real _t0EB2 = prim •00CE<$[3]; $[3]; $[]> (_t0EB1, dPos0BD6);
    time0E09 = prim /0055 (_t0EAD, _t0EB2);
    face0E0A = 3;
  }
  int _t0EB3 = -1;
  bool _t0EB4 = prim !=0086 (face0E0A, _t0EB3);
  if _t0EB4 {
    real _t0EB5 = (real)face0E0A;
    vec2 _t0EB6 = [time0E09, _t0EB5];
    return _t0EB6;
  } else {
    real _t0EB7 = -0.1e1;
    real _t0EB8 = -0.1e1;
    vec2 _t0EB9 = [_t0EB7, _t0EB8];
    return _t0EB9;
  }
}
function Femdata: Mesh#0 domain0EBA (Femdata: Space arg00EBB)
{
  Femdata: Mesh _t0EBC = extractFem(arg00EBB, Mesh);
  return _t0EBC;
}
function Femdata: Space#0 space0EBD (Femdata: FemFunc arg00EBE)
{
  Femdata: Space _t0EBF = extractFem(arg00EBE, Space);
  return _t0EBF;
}
function Femdata: FuncCell#0 funcCell0EC0 (Femdata: FemFunc arg00EC1, Femdata: MeshCell arg10EC2)
{
  int _t0EC3 = extractFemItem(CellIndex(MeshCell), int, arg10EC2);
  Femdata: FuncCell _t0EC4 = loadFem(FuncCell, arg00EC1, _t0EC3);
  return _t0EC4;
}
globalInit {
  int _t033A = 0;
  int _t0338 = 1;
  int _t033C = extractFemItem(NumCell(Mesh), int, cube0336);
  int _t033B = prim -0024 (_t033C, _t0338);
  int[] _t033F = prim $range01C3 (_t033A, _t033B);
  Femdata: MeshCell[] _t0340 = {};
  foreach _t033E in _t033F {
    Femdata: MeshCell _t0341 = loadFem(MeshCell, cube0336, _t033E);
    _t0340 = prim @0010<Femdata: MeshCell> (_t0340, _t0341);
  }
  0cell_cube0337 = _t0340;
  space0342 = loadFem(Space, 0space0342_intermedateGlobal0343, cube0336);
  data0344 = loadFem(FemFunc, 0data0344_intermedateGlobal0345, space0342);
  Femdata: Space _t0EC5 = extractFem(data0344, Space);
  Femdata: Space _t0EC6 = extractFem(data0344, Space);
  Femdata: Mesh _t0EC7 = extractFem(_t0EC6, Mesh);
  field(3)[] _t0EC8 = femField(data0344,_t0EC7,field(3)[],refField,findPos0350 );
  Femdata: Space _t0EC9 = extractFem(data0344, Space);
  Femdata: Mesh _t0ECA = extractFem(_t0EC9, Mesh);
  Femdata: Space _t0ECB = extractFem(data0344, Space);
  Femdata: Mesh _t0ECC = extractFem(_t0ECB, Mesh);
  Femdata: Space _t0ECD = extractFem(data0344, Space);
  Femdata: Mesh _t0ECE = extractFem(_t0ECD, Mesh);
  field(3)[3] _t0ECF = femField(_t0ECA,_t0ECE,field(3)[3],InvTransform,findPos0350 );
  F0ED0 = prim ∘0164<#∞; %3; $[]; %3; $[3]> (_t0EC8, _t0ECF);
}
strand gg (vec3 i0ED1) {
  output vec3 target0ED2;
  output vec3 translated0ED3;
  output bool valid0ED4;
  output Femdata: MeshCell c0ED5;
  output real result0ED7;
  output vec3 gradResult0ED8;
  output vec3 gradResultp0ED9;
  {
    target0ED2 = i0ED1;
    translated0ED3 = prim $nan01BD<$[3]> ();
    valid0ED4 = false;
    int _t0ED6 = 0;
    c0ED5 = prim $dynsub01C2<Femdata: MeshCell> (0cell_cube0337, _t0ED6);
    result0ED7 = prim $nan01BD<$[]> ();
    gradResult0ED8 = prim $nan01BD<$[3]> ();
    gradResultp0ED9 = prim $nan01BD<$[3]> ();
  }
  update
  {
    string _t0EDA = "Running on ";
    string _t0EDB = "\n";
    print (_t0EDA, target0ED2, _t0EDB);
    Femdata: MeshPos p0EDC = func findPos0350 (cube0336, target0ED2);
    valid0ED4 = extractFemItem(Valid(MeshPos), bool, p0EDC);
    if valid0ED4 {
      Femdata: Mesh _t0EDD = extractFem(p0EDC, Mesh);
      int _t0EDE = extractFemItem(CellIndex(MeshPos), int, p0EDC);
      c0ED5 = loadFem(MeshCell, _t0EDD, _t0EDE);
      translated0ED3 = extractFemItem(RefPos(MeshPos), vec3, p0EDC);
      result0ED7 = prim @00A5<#∞; %3; $[]> (F0ED0, target0ED2);
      field(3)[3] _t0EDF = prim ∇00A8<#∞; %3> (F0ED0);
      gradResult0ED8 = prim @00A5<#∞; %3; $[3]> (_t0EDF, target0ED2);
    } else {
      string _t0EE0 = "Warning: Invalid!\n";
      print (_t0EE0);
    }
    stabilize;
  }
}
collection {
  foreach i0EE1 in points0335 {
    new gg (i0EE1);
  }
}
/* Program end */
/* Simplified Program (after after inlining) start */
properties: GlobalInit,HasInputs,HasGlobals,ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
input vec3[] points0335;
input FemData:Mesh cube0336;
input FemData:Space 0space0342_intermedateGlobal0343;
input FemData:FemFunc 0data0344_intermedateGlobal0345;
constants { }
global Femdata: MeshCell[] 0cell_cube0337;
global Femdata: Space space0342;
global Femdata: FemFunc data0344;
global field(3)[] F0ED0;
function Femdata: MeshPos#3 findPos0350 (Femdata: Mesh mesh0351, vec3 pos0352)
{
  real _t0353 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t0354 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t0355 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  xn0356 = [_t0353, _t0354, _t0355];
  newtonInt0357 = 0;
  cellInt0358 = extractFemItem(StartCell(Mesh), int, mesh0351);
  int _t0359 = extractFemItem(NumCell(Mesh), int, mesh0351);
  int _t035A = 1;
  numCell035B = prim -0024 (_t0359, _t035A);
  yayCells035C = extractFemItem2(NearbyCell(File=spat.in)(Mesh), vec3, mesh0351, pos0352 : vec3);
  foreach cellItter035D in yayCells035C {
    cellInt0358 = cellItter035D;
    field(3)[3] _t035E = femField(mesh0351,cellInt0358,field(3)[3],Transform,);
    field(3)[3,3] _t035F = prim ∇⊗00AD<#∞; %3; $[]; %3> (_t035E);
    field(3)[3,3] _t0360 = prim inv015E<#∞; %3> (_t035F);
    real _t0361 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    real _t0362 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    real _t0363 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    vec3 _t0364 = [_t0361, _t0362, _t0363];
    A0365 = prim @00A5<#∞; %3; $[3,3]> (_t0360, _t0364);
    int _t0366 = 0;
    int _t0367 = 16;
    int[] _t0368 = prim $range01C3 (_t0366, _t0367);
    foreach newtonItter0397 in _t0368 {
      field(3)[3] _t0369 = femField(mesh0351,cellInt0358,field(3)[3],Transform,);
      field(3)[3] _t036A = prim -002E<#∞; %3; $[3]> (_t0369, pos0352);
      field(3)[3] _t036B = prim •00D4<#∞; %3; $[3,3]; $[3]; $[3]> (A0365, _t036A);
      delta036C = prim @00A5<#∞; %3; $[3]> (_t036B, xn0356);
      xn0356 = prim -0026<$[3]> (xn0356, delta036C);
      real _t036D = 0.1e-7;
      real _t036E = 0.1e-7;
      real _t036F = prim *0034 (_t036D, _t036E);
      real _t0370 = prim •00CE<$[3]; $[3]; $[]> (delta036C, delta036C);
      bool _t0371 = prim >=007E (_t036F, _t0370);
      if _t0371 {
        real _t0372 = 0.1e1;
        real _t0373 = 0.1e-8;
        real _t0374 = prim +0017<$[]> (_t0372, _t0373);
        real _t0375 = 0.1e1;
        real _t0376 = 0.1e1;
        real _t0377 = 0.1e1;
        vec3 _t0378 = [_t0375, _t0376, _t0377];
        real _t0379 = prim •00CE<$[3]; $[3]; $[]> (_t0378, xn0356);
        bool _t037A = prim >0080 (_t0374, _t0379);
        real _t037B = 0.1e-8;
        real _t037C = 0.1e-8;
        real _t037D = 0.1e-8;
        vec3 _t037E = [_t037B, _t037C, _t037D];
        vec3 _t037F = prim +0017<$[3]> (_t037E, xn0356);
        real _t0380 = _t037F[0];
        real _t0381 = -0.e0;
        bool _t0382 = prim >0080 (_t0380, _t0381);
        real _t0383 = 0.1e-8;
        real _t0384 = 0.1e-8;
        real _t0385 = 0.1e-8;
        vec3 _t0386 = [_t0383, _t0384, _t0385];
        vec3 _t0387 = prim +0017<$[3]> (_t0386, xn0356);
        real _t0388 = _t0387[1];
        real _t0389 = -0.e0;
        bool _t038A = prim >0080 (_t0388, _t0389);
        real _t038B = 0.1e-8;
        real _t038C = 0.1e-8;
        real _t038D = 0.1e-8;
        vec3 _t038E = [_t038B, _t038C, _t038D];
        vec3 _t038F = prim +0017<$[3]> (_t038E, xn0356);
        real _t0390 = _t038F[2];
        real _t0391 = -0.e0;
        bool _t0392 = prim >0080 (_t0390, _t0391);
        bool _t0393 = prim $and01C4 (_t038A, _t0392);
        bool _t0394 = prim $and01C4 (_t0382, _t0393);
        bool _t0395 = prim $and01C4 (_t037A, _t0394);
        if _t0395 {
          Femdata: MeshPos _t0396 = extractFemItemN((mesh0351, cellInt0358, xn0356, pos0352),AllBuild(MeshPos),);
          return _t0396;
        }
      }
    }
  }
  string _t0398 = "Bad end 2";
  string _t0399 = "\n";
  print (_t0398, _t0399);
  Femdata: MeshPos _t039A = extractFemItemN((mesh0351),InvalidBuild(MeshPos),);
  return _t039A;
}
function int[2]#5 nextCell40419 (int faceIdx0873, int cell0874, Femdata: Mesh mesh0875)
{
  int _t0876 = 8;
  int _t0877 = prim *0033 (cell0874, _t0876);
  int _t0878 = 2;
  int _t0879 = prim *0033 (faceIdx0873, _t0878);
  int _t087A = prim +0015 (_t0877, _t0879);
  int[2] _t087B = extractFemItemN((mesh0875, _t087A),CellFaceCell(Mesh),);
  return _t087B;
}
globalInit {
  int _t033A = 0;
  int _t0338 = 1;
  int _t033C = extractFemItem(NumCell(Mesh), int, cube0336);
  int _t033B = prim -0024 (_t033C, _t0338);
  int[] _t033F = prim $range01C3 (_t033A, _t033B);
  Femdata: MeshCell[] _t0340 = {};
  foreach _t033E in _t033F {
    Femdata: MeshCell _t0341 = loadFem(MeshCell, cube0336, _t033E);
    _t0340 = prim @0010<Femdata: MeshCell> (_t0340, _t0341);
  }
  0cell_cube0337 = _t0340;
  space0342 = loadFem(Space, 0space0342_intermedateGlobal0343, cube0336);
  data0344 = loadFem(FemFunc, 0data0344_intermedateGlobal0345, space0342);
  Femdata: Space _t0EC5 = extractFem(data0344, Space);
  Femdata: Space _t0EC6 = extractFem(data0344, Space);
  Femdata: Mesh _t0EC7 = extractFem(_t0EC6, Mesh);
  field(3)[] _t0EC8 = femField(data0344,_t0EC7,field(3)[],refField,findPos0350 );
  Femdata: Space _t0EC9 = extractFem(data0344, Space);
  Femdata: Mesh _t0ECA = extractFem(_t0EC9, Mesh);
  Femdata: Space _t0ECB = extractFem(data0344, Space);
  Femdata: Mesh _t0ECC = extractFem(_t0ECB, Mesh);
  Femdata: Space _t0ECD = extractFem(data0344, Space);
  Femdata: Mesh _t0ECE = extractFem(_t0ECD, Mesh);
  field(3)[3] _t0ECF = femField(_t0ECA,_t0ECE,field(3)[3],InvTransform,findPos0350 );
  F0ED0 = prim ∘0164<#∞; %3; $[]; %3; $[3]> (_t0EC8, _t0ECF);
}
strand gg (vec3 i0ED1) {
  output vec3 target0ED2;
  output vec3 translated0ED3;
  output bool valid0ED4;
  output Femdata: MeshCell c0ED5;
  output real result0ED7;
  output vec3 gradResult0ED8;
  output vec3 gradResultp0ED9;
  {
    target0ED2 = i0ED1;
    translated0ED3 = prim $nan01BD<$[3]> ();
    valid0ED4 = false;
    int _t0ED6 = 0;
    c0ED5 = prim $dynsub01C2<Femdata: MeshCell> (0cell_cube0337, _t0ED6);
    result0ED7 = prim $nan01BD<$[]> ();
    gradResult0ED8 = prim $nan01BD<$[3]> ();
    gradResultp0ED9 = prim $nan01BD<$[3]> ();
  }
  update
  {
    string _t0EDA = "Running on ";
    string _t0EDB = "\n";
    print (_t0EDA, target0ED2, _t0EDB);
    Femdata: MeshPos p0EDC = func findPos0350 (cube0336, target0ED2);
    valid0ED4 = extractFemItem(Valid(MeshPos), bool, p0EDC);
    if valid0ED4 {
      Femdata: Mesh _t0EDD = extractFem(p0EDC, Mesh);
      int _t0EDE = extractFemItem(CellIndex(MeshPos), int, p0EDC);
      c0ED5 = loadFem(MeshCell, _t0EDD, _t0EDE);
      translated0ED3 = extractFemItem(RefPos(MeshPos), vec3, p0EDC);
      result0ED7 = prim @00A5<#∞; %3; $[]> (F0ED0, target0ED2);
      field(3)[3] _t0EDF = prim ∇00A8<#∞; %3> (F0ED0);
      gradResult0ED8 = prim @00A5<#∞; %3; $[3]> (_t0EDF, target0ED2);
    } else {
      string _t0EE0 = "Warning: Invalid!\n";
      print (_t0EE0);
    }
    stabilize;
  }
}
collection {
  foreach i0EE1 in points0335 {
    new gg (i0EE1);
  }
}
/* Program end */
/* Simplified Program (after after contraction (2)) start */
properties: GlobalInit,HasInputs,HasGlobals,ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
input vec3[] points0335;
input FemData:Mesh cube0336;
input FemData:Space 0space0342_intermedateGlobal0343;
input FemData:FemFunc 0data0344_intermedateGlobal0345;
constants { }
global Femdata: MeshCell[] 0cell_cube0337;
global Femdata: Space space0342;
global Femdata: FemFunc data0344;
global field(3)[] F0ED0;
function Femdata: MeshPos#3 findPos0350 (Femdata: Mesh mesh0351, vec3 pos0352)
{
  real _t0353 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t0354 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t0355 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  xn0356 = [_t0353, _t0354, _t0355];
  newtonInt0357 = 0;
  cellInt0358 = extractFemItem(StartCell(Mesh), int, mesh0351);
  int _t0359 = extractFemItem(NumCell(Mesh), int, mesh0351);
  int _t035A = 1;
  numCell035B = prim -0024 (_t0359, _t035A);
  yayCells035C = extractFemItem2(NearbyCell(File=spat.in)(Mesh), vec3, mesh0351, pos0352 : vec3);
  foreach cellItter035D in yayCells035C {
    cellInt0358 = cellItter035D;
    field(3)[3] _t035E = femField(mesh0351,cellInt0358,field(3)[3],Transform,);
    field(3)[3,3] _t035F = prim ∇⊗00AD<#∞; %3; $[]; %3> (_t035E);
    field(3)[3,3] _t0360 = prim inv015E<#∞; %3> (_t035F);
    real _t0361 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    real _t0362 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    real _t0363 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    vec3 _t0364 = [_t0361, _t0362, _t0363];
    A0365 = prim @00A5<#∞; %3; $[3,3]> (_t0360, _t0364);
    int _t0366 = 0;
    int _t0367 = 16;
    int[] _t0368 = prim $range01C3 (_t0366, _t0367);
    foreach newtonItter0397 in _t0368 {
      field(3)[3] _t0369 = femField(mesh0351,cellInt0358,field(3)[3],Transform,);
      field(3)[3] _t036A = prim -002E<#∞; %3; $[3]> (_t0369, pos0352);
      field(3)[3] _t036B = prim •00D4<#∞; %3; $[3,3]; $[3]; $[3]> (A0365, _t036A);
      delta036C = prim @00A5<#∞; %3; $[3]> (_t036B, xn0356);
      xn0356 = prim -0026<$[3]> (xn0356, delta036C);
      real _t036D = 0.1e-7;
      real _t036E = 0.1e-7;
      real _t036F = prim *0034 (_t036D, _t036E);
      real _t0370 = prim •00CE<$[3]; $[3]; $[]> (delta036C, delta036C);
      bool _t0371 = prim >=007E (_t036F, _t0370);
      if _t0371 {
        real _t0372 = 0.1e1;
        real _t0373 = 0.1e-8;
        real _t0374 = prim +0017<$[]> (_t0372, _t0373);
        real _t0375 = 0.1e1;
        real _t0376 = 0.1e1;
        real _t0377 = 0.1e1;
        vec3 _t0378 = [_t0375, _t0376, _t0377];
        real _t0379 = prim •00CE<$[3]; $[3]; $[]> (_t0378, xn0356);
        bool _t037A = prim >0080 (_t0374, _t0379);
        real _t037B = 0.1e-8;
        real _t037C = 0.1e-8;
        real _t037D = 0.1e-8;
        vec3 _t037E = [_t037B, _t037C, _t037D];
        vec3 _t037F = prim +0017<$[3]> (_t037E, xn0356);
        real _t0380 = _t037F[0];
        real _t0381 = -0.e0;
        bool _t0382 = prim >0080 (_t0380, _t0381);
        real _t0383 = 0.1e-8;
        real _t0384 = 0.1e-8;
        real _t0385 = 0.1e-8;
        vec3 _t0386 = [_t0383, _t0384, _t0385];
        vec3 _t0387 = prim +0017<$[3]> (_t0386, xn0356);
        real _t0388 = _t0387[1];
        real _t0389 = -0.e0;
        bool _t038A = prim >0080 (_t0388, _t0389);
        real _t038B = 0.1e-8;
        real _t038C = 0.1e-8;
        real _t038D = 0.1e-8;
        vec3 _t038E = [_t038B, _t038C, _t038D];
        vec3 _t038F = prim +0017<$[3]> (_t038E, xn0356);
        real _t0390 = _t038F[2];
        real _t0391 = -0.e0;
        bool _t0392 = prim >0080 (_t0390, _t0391);
        bool _t0393 = prim $and01C4 (_t038A, _t0392);
        bool _t0394 = prim $and01C4 (_t0382, _t0393);
        bool _t0395 = prim $and01C4 (_t037A, _t0394);
        if _t0395 {
          Femdata: MeshPos _t0396 = extractFemItemN((mesh0351, cellInt0358, xn0356, pos0352),AllBuild(MeshPos),);
          return _t0396;
        }
      }
    }
  }
  string _t0398 = "Bad end 2";
  string _t0399 = "\n";
  print (_t0398, _t0399);
  Femdata: MeshPos _t039A = extractFemItemN((mesh0351),InvalidBuild(MeshPos),);
  return _t039A;
}
function int[2]#5 nextCell40419 (int faceIdx0873, int cell0874, Femdata: Mesh mesh0875)
{
  int _t0876 = 8;
  int _t0877 = prim *0033 (cell0874, _t0876);
  int _t0878 = 2;
  int _t0879 = prim *0033 (faceIdx0873, _t0878);
  int _t087A = prim +0015 (_t0877, _t0879);
  int[2] _t087B = extractFemItemN((mesh0875, _t087A),CellFaceCell(Mesh),);
  return _t087B;
}
globalInit {
  int _t033A = 0;
  int _t0338 = 1;
  int _t033C = extractFemItem(NumCell(Mesh), int, cube0336);
  int _t033B = prim -0024 (_t033C, _t0338);
  int[] _t033F = prim $range01C3 (_t033A, _t033B);
  Femdata: MeshCell[] _t0340 = {};
  foreach _t033E in _t033F {
    Femdata: MeshCell _t0341 = loadFem(MeshCell, cube0336, _t033E);
    _t0340 = prim @0010<Femdata: MeshCell> (_t0340, _t0341);
  }
  0cell_cube0337 = _t0340;
  space0342 = loadFem(Space, 0space0342_intermedateGlobal0343, cube0336);
  data0344 = loadFem(FemFunc, 0data0344_intermedateGlobal0345, space0342);
  Femdata: Space _t0EC5 = extractFem(data0344, Space);
  Femdata: Space _t0EC6 = extractFem(data0344, Space);
  Femdata: Mesh _t0EC7 = extractFem(_t0EC6, Mesh);
  field(3)[] _t0EC8 = femField(data0344,_t0EC7,field(3)[],refField,findPos0350 );
  Femdata: Space _t0EC9 = extractFem(data0344, Space);
  Femdata: Mesh _t0ECA = extractFem(_t0EC9, Mesh);
  Femdata: Space _t0ECB = extractFem(data0344, Space);
  Femdata: Mesh _t0ECC = extractFem(_t0ECB, Mesh);
  Femdata: Space _t0ECD = extractFem(data0344, Space);
  Femdata: Mesh _t0ECE = extractFem(_t0ECD, Mesh);
  field(3)[3] _t0ECF = femField(_t0ECA,_t0ECE,field(3)[3],InvTransform,findPos0350 );
  F0ED0 = prim ∘0164<#∞; %3; $[]; %3; $[3]> (_t0EC8, _t0ECF);
}
strand gg (vec3 i0ED1) {
  output vec3 target0ED2;
  output vec3 translated0ED3;
  output bool valid0ED4;
  output Femdata: MeshCell c0ED5;
  output real result0ED7;
  output vec3 gradResult0ED8;
  output vec3 gradResultp0ED9;
  {
    target0ED2 = i0ED1;
    translated0ED3 = prim $nan01BD<$[3]> ();
    valid0ED4 = false;
    int _t0ED6 = 0;
    c0ED5 = prim $dynsub01C2<Femdata: MeshCell> (0cell_cube0337, _t0ED6);
    result0ED7 = prim $nan01BD<$[]> ();
    gradResult0ED8 = prim $nan01BD<$[3]> ();
    gradResultp0ED9 = prim $nan01BD<$[3]> ();
  }
  update
  {
    string _t0EDA = "Running on ";
    string _t0EDB = "\n";
    print (_t0EDA, target0ED2, _t0EDB);
    Femdata: MeshPos p0EDC = func findPos0350 (cube0336, target0ED2);
    valid0ED4 = extractFemItem(Valid(MeshPos), bool, p0EDC);
    if valid0ED4 {
      Femdata: Mesh _t0EDD = extractFem(p0EDC, Mesh);
      int _t0EDE = extractFemItem(CellIndex(MeshPos), int, p0EDC);
      c0ED5 = loadFem(MeshCell, _t0EDD, _t0EDE);
      translated0ED3 = extractFemItem(RefPos(MeshPos), vec3, p0EDC);
      result0ED7 = prim @00A5<#∞; %3; $[]> (F0ED0, target0ED2);
      field(3)[3] _t0EDF = prim ∇00A8<#∞; %3> (F0ED0);
      gradResult0ED8 = prim @00A5<#∞; %3; $[3]> (_t0EDF, target0ED2);
    } else {
      string _t0EE0 = "Warning: Invalid!\n";
      print (_t0EE0);
    }
    stabilize;
  }
}
collection {
  foreach i0EE1 in points0335 {
    new gg (i0EE1);
  }
}
/* Program end */
/* Simplified Program (after after simplify fields) start */
properties: GlobalInit,HasInputs,HasGlobals,ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
input vec3[] points0335;
input FemData:Mesh cube0336;
input FemData:Space 0space0342_intermedateGlobal0343;
input FemData:FemFunc 0data0344_intermedateGlobal0345;
constants { }
global Femdata: MeshCell[] 0cell_cube0337;
global Femdata: Space space0342;
global Femdata: FemFunc data0344;
global field(3)[] F0ED0;
function Femdata: MeshPos#3 findPos0350 (Femdata: Mesh mesh0351, vec3 pos0352)
{
  real _t0353 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t0354 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t0355 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  xn0356 = [_t0353, _t0354, _t0355];
  newtonInt0357 = 0;
  cellInt0358 = extractFemItem(StartCell(Mesh), int, mesh0351);
  int _t0359 = extractFemItem(NumCell(Mesh), int, mesh0351);
  int _t035A = 1;
  numCell035B = prim -0024 (_t0359, _t035A);
  yayCells035C = extractFemItem2(NearbyCell(File=spat.in)(Mesh), vec3, mesh0351, pos0352 : vec3);
  foreach cellItter035D in yayCells035C {
    cellInt0358 = cellItter035D;
    field(3)[3] _t035E = femField(mesh0351,cellInt0358,field(3)[3],Transform,);
    field(3)[3,3] _t035F = prim ∇⊗00AD<#∞; %3; $[]; %3> (_t035E);
    field(3)[3,3] _t0360 = prim inv015E<#∞; %3> (_t035F);
    real _t0361 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    real _t0362 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    real _t0363 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    vec3 _t0364 = [_t0361, _t0362, _t0363];
    A0365 = prim @00A5<#∞; %3; $[3,3]> (_t0360, _t0364);
    int _t0366 = 0;
    int _t0367 = 16;
    int[] _t0368 = prim $range01C3 (_t0366, _t0367);
    foreach newtonItter0397 in _t0368 {
      field(3)[3] _t0369 = femField(mesh0351,cellInt0358,field(3)[3],Transform,);
      field(3)[3] _t036A = prim -002E<#∞; %3; $[3]> (_t0369, pos0352);
      field(3)[3] _t036B = prim •00D4<#∞; %3; $[3,3]; $[3]; $[3]> (A0365, _t036A);
      delta036C = prim @00A5<#∞; %3; $[3]> (_t036B, xn0356);
      xn0356 = prim -0026<$[3]> (xn0356, delta036C);
      real _t036D = 0.1e-7;
      real _t036E = 0.1e-7;
      real _t036F = prim *0034 (_t036D, _t036E);
      real _t0370 = prim •00CE<$[3]; $[3]; $[]> (delta036C, delta036C);
      bool _t0371 = prim >=007E (_t036F, _t0370);
      if _t0371 {
        real _t0372 = 0.1e1;
        real _t0373 = 0.1e-8;
        real _t0374 = prim +0017<$[]> (_t0372, _t0373);
        real _t0375 = 0.1e1;
        real _t0376 = 0.1e1;
        real _t0377 = 0.1e1;
        vec3 _t0378 = [_t0375, _t0376, _t0377];
        real _t0379 = prim •00CE<$[3]; $[3]; $[]> (_t0378, xn0356);
        bool _t037A = prim >0080 (_t0374, _t0379);
        real _t037B = 0.1e-8;
        real _t037C = 0.1e-8;
        real _t037D = 0.1e-8;
        vec3 _t037E = [_t037B, _t037C, _t037D];
        vec3 _t037F = prim +0017<$[3]> (_t037E, xn0356);
        real _t0380 = _t037F[0];
        real _t0381 = -0.e0;
        bool _t0382 = prim >0080 (_t0380, _t0381);
        real _t0383 = 0.1e-8;
        real _t0384 = 0.1e-8;
        real _t0385 = 0.1e-8;
        vec3 _t0386 = [_t0383, _t0384, _t0385];
        vec3 _t0387 = prim +0017<$[3]> (_t0386, xn0356);
        real _t0388 = _t0387[1];
        real _t0389 = -0.e0;
        bool _t038A = prim >0080 (_t0388, _t0389);
        real _t038B = 0.1e-8;
        real _t038C = 0.1e-8;
        real _t038D = 0.1e-8;
        vec3 _t038E = [_t038B, _t038C, _t038D];
        vec3 _t038F = prim +0017<$[3]> (_t038E, xn0356);
        real _t0390 = _t038F[2];
        real _t0391 = -0.e0;
        bool _t0392 = prim >0080 (_t0390, _t0391);
        bool _t0393 = prim $and01C4 (_t038A, _t0392);
        bool _t0394 = prim $and01C4 (_t0382, _t0393);
        bool _t0395 = prim $and01C4 (_t037A, _t0394);
        if _t0395 {
          Femdata: MeshPos _t0396 = extractFemItemN((mesh0351, cellInt0358, xn0356, pos0352),AllBuild(MeshPos),);
          return _t0396;
        }
      }
    }
  }
  string _t0398 = "Bad end 2";
  string _t0399 = "\n";
  print (_t0398, _t0399);
  Femdata: MeshPos _t039A = extractFemItemN((mesh0351),InvalidBuild(MeshPos),);
  return _t039A;
}
function int[2]#5 nextCell40419 (int faceIdx0873, int cell0874, Femdata: Mesh mesh0875)
{
  int _t0876 = 8;
  int _t0877 = prim *0033 (cell0874, _t0876);
  int _t0878 = 2;
  int _t0879 = prim *0033 (faceIdx0873, _t0878);
  int _t087A = prim +0015 (_t0877, _t0879);
  int[2] _t087B = extractFemItemN((mesh0875, _t087A),CellFaceCell(Mesh),);
  return _t087B;
}
globalInit {
  int _t033A = 0;
  int _t0338 = 1;
  int _t033C = extractFemItem(NumCell(Mesh), int, cube0336);
  int _t033B = prim -0024 (_t033C, _t0338);
  int[] _t033F = prim $range01C3 (_t033A, _t033B);
  Femdata: MeshCell[] _t0340 = {};
  foreach _t033E in _t033F {
    Femdata: MeshCell _t0341 = loadFem(MeshCell, cube0336, _t033E);
    _t0340 = prim @0010<Femdata: MeshCell> (_t0340, _t0341);
  }
  0cell_cube0337 = _t0340;
  space0342 = loadFem(Space, 0space0342_intermedateGlobal0343, cube0336);
  data0344 = loadFem(FemFunc, 0data0344_intermedateGlobal0345, space0342);
  Femdata: Space _t0EC5 = extractFem(data0344, Space);
  Femdata: Space _t0EC6 = extractFem(data0344, Space);
  Femdata: Mesh _t0EC7 = extractFem(_t0EC6, Mesh);
  field(3)[] _t0EC8 = femField(data0344,_t0EC7,field(3)[],refField,findPos0350 );
  Femdata: Space _t0EC9 = extractFem(data0344, Space);
  Femdata: Mesh _t0ECA = extractFem(_t0EC9, Mesh);
  Femdata: Space _t0ECB = extractFem(data0344, Space);
  Femdata: Mesh _t0ECC = extractFem(_t0ECB, Mesh);
  Femdata: Space _t0ECD = extractFem(data0344, Space);
  Femdata: Mesh _t0ECE = extractFem(_t0ECD, Mesh);
  field(3)[3] _t0ECF = femField(_t0ECA,_t0ECE,field(3)[3],InvTransform,findPos0350 );
  F0ED0 = prim ∘0164<#∞; %3; $[]; %3; $[3]> (_t0EC8, _t0ECF);
}
strand gg (vec3 i0ED1) {
  output vec3 target0ED2;
  output vec3 translated0ED3;
  output bool valid0ED4;
  output Femdata: MeshCell c0ED5;
  output real result0ED7;
  output vec3 gradResult0ED8;
  output vec3 gradResultp0ED9;
  {
    target0ED2 = i0ED1;
    translated0ED3 = prim $nan01BD<$[3]> ();
    valid0ED4 = false;
    int _t0ED6 = 0;
    c0ED5 = prim $dynsub01C2<Femdata: MeshCell> (0cell_cube0337, _t0ED6);
    result0ED7 = prim $nan01BD<$[]> ();
    gradResult0ED8 = prim $nan01BD<$[3]> ();
    gradResultp0ED9 = prim $nan01BD<$[3]> ();
  }
  update
  {
    string _t0EDA = "Running on ";
    string _t0EDB = "\n";
    print (_t0EDA, target0ED2, _t0EDB);
    Femdata: MeshPos p0EDC = func findPos0350 (cube0336, target0ED2);
    valid0ED4 = extractFemItem(Valid(MeshPos), bool, p0EDC);
    if valid0ED4 {
      Femdata: Mesh _t0EDD = extractFem(p0EDC, Mesh);
      int _t0EDE = extractFemItem(CellIndex(MeshPos), int, p0EDC);
      c0ED5 = loadFem(MeshCell, _t0EDD, _t0EDE);
      translated0ED3 = extractFemItem(RefPos(MeshPos), vec3, p0EDC);
      result0ED7 = prim @00A5<#∞; %3; $[]> (F0ED0, target0ED2);
      field(3)[3] _t0EDF = prim ∇00A8<#∞; %3> (F0ED0);
      gradResult0ED8 = prim @00A5<#∞; %3; $[3]> (_t0EDF, target0ED2);
    } else {
      string _t0EE0 = "Warning: Invalid!\n";
      print (_t0EE0);
    }
    stabilize;
  }
}
collection {
  foreach i0EE1 in points0335 {
    new gg (i0EE1);
  }
}
/* Program end */
/* Simplified Program (after after simplify variables) start */
properties: GlobalInit,HasInputs,HasGlobals,ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
input vec3[] points0335;
input FemData:Mesh cube0336;
input FemData:Space 0space0342_intermedateGlobal0343;
input FemData:FemFunc 0data0344_intermedateGlobal0345;
constants { }
global Femdata: MeshCell[] 0cell_cube0337;
global Femdata: Space space0342;
global Femdata: FemFunc data0344;
global field(3)[] F0ED0;
function Femdata: MeshPos#3 findPos0350 (Femdata: Mesh mesh0351, vec3 pos0352)
{
  real _t0353 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t0354 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t0355 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  xn0356 = [_t0353, _t0354, _t0355];
  newtonInt0357 = 0;
  cellInt0358 = extractFemItem(StartCell(Mesh), int, mesh0351);
  int _t0359 = extractFemItem(NumCell(Mesh), int, mesh0351);
  int _t035A = 1;
  numCell035B = prim -0024 (_t0359, _t035A);
  yayCells035C = extractFemItem2(NearbyCell(File=spat.in)(Mesh), vec3, mesh0351, pos0352 : vec3);
  foreach cellItter035D in yayCells035C {
    cellInt0358 = cellItter035D;
    field(3)[3] _t035E = femField(mesh0351,cellInt0358,field(3)[3],Transform,);
    field(3)[3,3] _t035F = prim ∇⊗00AD<#∞; %3; $[]; %3> (_t035E);
    field(3)[3,3] _t0360 = prim inv015E<#∞; %3> (_t035F);
    real _t0361 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    real _t0362 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    real _t0363 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    vec3 _t0364 = [_t0361, _t0362, _t0363];
    A0365 = prim @00A5<#∞; %3; $[3,3]> (_t0360, _t0364);
    int _t0366 = 0;
    int _t0367 = 16;
    int[] _t0368 = prim $range01C3 (_t0366, _t0367);
    foreach newtonItter0397 in _t0368 {
      field(3)[3] _t0369 = femField(mesh0351,cellInt0358,field(3)[3],Transform,);
      field(3)[3] _t036A = prim -002E<#∞; %3; $[3]> (_t0369, pos0352);
      field(3)[3] _t036B = prim •00D4<#∞; %3; $[3,3]; $[3]; $[3]> (A0365, _t036A);
      delta036C = prim @00A5<#∞; %3; $[3]> (_t036B, xn0356);
      xn0356 = prim -0026<$[3]> (xn0356, delta036C);
      real _t036D = 0.1e-7;
      real _t036E = 0.1e-7;
      real _t036F = prim *0034 (_t036D, _t036E);
      real _t0370 = prim •00CE<$[3]; $[3]; $[]> (delta036C, delta036C);
      bool _t0371 = prim >=007E (_t036F, _t0370);
      if _t0371 {
        real _t0372 = 0.1e1;
        real _t0373 = 0.1e-8;
        real _t0374 = prim +0017<$[]> (_t0372, _t0373);
        real _t0375 = 0.1e1;
        real _t0376 = 0.1e1;
        real _t0377 = 0.1e1;
        vec3 _t0378 = [_t0375, _t0376, _t0377];
        real _t0379 = prim •00CE<$[3]; $[3]; $[]> (_t0378, xn0356);
        bool _t037A = prim >0080 (_t0374, _t0379);
        real _t037B = 0.1e-8;
        real _t037C = 0.1e-8;
        real _t037D = 0.1e-8;
        vec3 _t037E = [_t037B, _t037C, _t037D];
        vec3 _t037F = prim +0017<$[3]> (_t037E, xn0356);
        real _t0380 = _t037F[0];
        real _t0381 = -0.e0;
        bool _t0382 = prim >0080 (_t0380, _t0381);
        real _t0383 = 0.1e-8;
        real _t0384 = 0.1e-8;
        real _t0385 = 0.1e-8;
        vec3 _t0386 = [_t0383, _t0384, _t0385];
        vec3 _t0387 = prim +0017<$[3]> (_t0386, xn0356);
        real _t0388 = _t0387[1];
        real _t0389 = -0.e0;
        bool _t038A = prim >0080 (_t0388, _t0389);
        real _t038B = 0.1e-8;
        real _t038C = 0.1e-8;
        real _t038D = 0.1e-8;
        vec3 _t038E = [_t038B, _t038C, _t038D];
        vec3 _t038F = prim +0017<$[3]> (_t038E, xn0356);
        real _t0390 = _t038F[2];
        real _t0391 = -0.e0;
        bool _t0392 = prim >0080 (_t0390, _t0391);
        bool _t0393 = prim $and01C4 (_t038A, _t0392);
        bool _t0394 = prim $and01C4 (_t0382, _t0393);
        bool _t0395 = prim $and01C4 (_t037A, _t0394);
        if _t0395 {
          Femdata: MeshPos _t0396 = extractFemItemN((mesh0351, cellInt0358, xn0356, pos0352),AllBuild(MeshPos),);
          return _t0396;
        }
      }
    }
  }
  string _t0398 = "Bad end 2";
  string _t0399 = "\n";
  print (_t0398, _t0399);
  Femdata: MeshPos _t039A = extractFemItemN((mesh0351),InvalidBuild(MeshPos),);
  return _t039A;
}
function int[2]#5 nextCell40419 (int faceIdx0873, int cell0874, Femdata: Mesh mesh0875)
{
  int _t0876 = 8;
  int _t0877 = prim *0033 (cell0874, _t0876);
  int _t0878 = 2;
  int _t0879 = prim *0033 (faceIdx0873, _t0878);
  int _t087A = prim +0015 (_t0877, _t0879);
  int[2] _t087B = extractFemItemN((mesh0875, _t087A),CellFaceCell(Mesh),);
  return _t087B;
}
globalInit {
  int _t033A = 0;
  int _t0338 = 1;
  int _t033C = extractFemItem(NumCell(Mesh), int, cube0336);
  int _t033B = prim -0024 (_t033C, _t0338);
  int[] _t033F = prim $range01C3 (_t033A, _t033B);
  Femdata: MeshCell[] _t0340 = {};
  foreach _t033E in _t033F {
    Femdata: MeshCell _t0341 = loadFem(MeshCell, cube0336, _t033E);
    _t0340 = prim @0010<Femdata: MeshCell> (_t0340, _t0341);
  }
  0cell_cube0337 = _t0340;
  space0342 = loadFem(Space, 0space0342_intermedateGlobal0343, cube0336);
  data0344 = loadFem(FemFunc, 0data0344_intermedateGlobal0345, space0342);
  Femdata: Space _t0EC5 = extractFem(data0344, Space);
  Femdata: Space _t0EC6 = extractFem(data0344, Space);
  Femdata: Mesh _t0EC7 = extractFem(_t0EC6, Mesh);
  field(3)[] _t0EC8 = femField(data0344,_t0EC7,field(3)[],refField,findPos0350 );
  Femdata: Space _t0EC9 = extractFem(data0344, Space);
  Femdata: Mesh _t0ECA = extractFem(_t0EC9, Mesh);
  Femdata: Space _t0ECB = extractFem(data0344, Space);
  Femdata: Mesh _t0ECC = extractFem(_t0ECB, Mesh);
  Femdata: Space _t0ECD = extractFem(data0344, Space);
  Femdata: Mesh _t0ECE = extractFem(_t0ECD, Mesh);
  field(3)[3] _t0ECF = femField(_t0ECA,_t0ECE,field(3)[3],InvTransform,findPos0350 );
  F0ED0 = prim ∘0164<#∞; %3; $[]; %3; $[3]> (_t0EC8, _t0ECF);
}
strand gg (vec3 i0ED1) {
  output vec3 target0ED2;
  output vec3 translated0ED3;
  output bool valid0ED4;
  output Femdata: MeshCell c0ED5;
  output real result0ED7;
  output vec3 gradResult0ED8;
  output vec3 gradResultp0ED9;
  {
    target0ED2 = i0ED1;
    translated0ED3 = prim $nan01BD<$[3]> ();
    valid0ED4 = false;
    int _t0ED6 = 0;
    c0ED5 = prim $dynsub01C2<Femdata: MeshCell> (0cell_cube0337, _t0ED6);
    result0ED7 = prim $nan01BD<$[]> ();
    gradResult0ED8 = prim $nan01BD<$[3]> ();
    gradResultp0ED9 = prim $nan01BD<$[3]> ();
  }
  update
  {
    string _t0EDA = "Running on ";
    string _t0EDB = "\n";
    print (_t0EDA, target0ED2, _t0EDB);
    Femdata: MeshPos p0EDC = func findPos0350 (cube0336, target0ED2);
    valid0ED4 = extractFemItem(Valid(MeshPos), bool, p0EDC);
    if valid0ED4 {
      Femdata: Mesh _t0EDD = extractFem(p0EDC, Mesh);
      int _t0EDE = extractFemItem(CellIndex(MeshPos), int, p0EDC);
      c0ED5 = loadFem(MeshCell, _t0EDD, _t0EDE);
      translated0ED3 = extractFemItem(RefPos(MeshPos), vec3, p0EDC);
      result0ED7 = prim @00A5<#∞; %3; $[]> (F0ED0, target0ED2);
      field(3)[3] _t0EDF = prim ∇00A8<#∞; %3> (F0ED0);
      gradResult0ED8 = prim @00A5<#∞; %3; $[3]> (_t0EDF, target0ED2);
    } else {
      string _t0EE0 = "Warning: Invalid!\n";
      print (_t0EE0);
    }
    stabilize;
  }
}
collection {
  foreach i0EE1 in points0335 {
    new gg (i0EE1);
  }
}
/* Program end */
/* Simplified Program (after after simplify fem vars) start */
properties: GlobalInit,HasInputs,HasGlobals,ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
input vec3[] points0335;
input FemData:Mesh cube0336;
input FemData:Space 0space0342_intermedateGlobal0343;
input FemData:FemFunc 0data0344_intermedateGlobal0345;
constants { }
global Femdata: MeshCell[] 0cell_cube0337;
global Femdata: Space space0342;
global Femdata: FemFunc data0344;
global field(3)[] F0ED0;
function Femdata: MeshPos#3 findPos0350 (Femdata: Mesh mesh0351, vec3 pos0352)
{
  real _t0353 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t0354 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  real _t0355 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
  xn0356 = [_t0353, _t0354, _t0355];
  newtonInt0357 = 0;
  cellInt0358 = extractFemItem(StartCell(Mesh), int, mesh0351);
  int _t0359 = extractFemItem(NumCell(Mesh), int, mesh0351);
  int _t035A = 1;
  numCell035B = prim -0024 (_t0359, _t035A);
  yayCells035C = extractFemItem2(NearbyCell(File=spat.in)(Mesh), vec3, mesh0351, pos0352 : vec3);
  foreach cellItter035D in yayCells035C {
    cellInt0358 = cellItter035D;
    field(3)[3] _t035E = femField(mesh0351,cellInt0358,field(3)[3],Transform,);
    field(3)[3,3] _t035F = prim ∇⊗00AD<#∞; %3; $[]; %3> (_t035E);
    field(3)[3,3] _t0360 = prim inv015E<#∞; %3> (_t035F);
    real _t0361 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    real _t0362 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    real _t0363 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
    vec3 _t0364 = [_t0361, _t0362, _t0363];
    A0365 = prim @00A5<#∞; %3; $[3,3]> (_t0360, _t0364);
    int _t0366 = 0;
    int _t0367 = 16;
    int[] _t0368 = prim $range01C3 (_t0366, _t0367);
    foreach newtonItter0397 in _t0368 {
      field(3)[3] _t0369 = femField(mesh0351,cellInt0358,field(3)[3],Transform,);
      field(3)[3] _t036A = prim -002E<#∞; %3; $[3]> (_t0369, pos0352);
      field(3)[3] _t036B = prim •00D4<#∞; %3; $[3,3]; $[3]; $[3]> (A0365, _t036A);
      delta036C = prim @00A5<#∞; %3; $[3]> (_t036B, xn0356);
      xn0356 = prim -0026<$[3]> (xn0356, delta036C);
      real _t036D = 0.1e-7;
      real _t036E = 0.1e-7;
      real _t036F = prim *0034 (_t036D, _t036E);
      real _t0370 = prim •00CE<$[3]; $[3]; $[]> (delta036C, delta036C);
      bool _t0371 = prim >=007E (_t036F, _t0370);
      if _t0371 {
        real _t0372 = 0.1e1;
        real _t0373 = 0.1e-8;
        real _t0374 = prim +0017<$[]> (_t0372, _t0373);
        real _t0375 = 0.1e1;
        real _t0376 = 0.1e1;
        real _t0377 = 0.1e1;
        vec3 _t0378 = [_t0375, _t0376, _t0377];
        real _t0379 = prim •00CE<$[3]; $[3]; $[]> (_t0378, xn0356);
        bool _t037A = prim >0080 (_t0374, _t0379);
        real _t037B = 0.1e-8;
        real _t037C = 0.1e-8;
        real _t037D = 0.1e-8;
        vec3 _t037E = [_t037B, _t037C, _t037D];
        vec3 _t037F = prim +0017<$[3]> (_t037E, xn0356);
        real _t0380 = _t037F[0];
        real _t0381 = -0.e0;
        bool _t0382 = prim >0080 (_t0380, _t0381);
        real _t0383 = 0.1e-8;
        real _t0384 = 0.1e-8;
        real _t0385 = 0.1e-8;
        vec3 _t0386 = [_t0383, _t0384, _t0385];
        vec3 _t0387 = prim +0017<$[3]> (_t0386, xn0356);
        real _t0388 = _t0387[1];
        real _t0389 = -0.e0;
        bool _t038A = prim >0080 (_t0388, _t0389);
        real _t038B = 0.1e-8;
        real _t038C = 0.1e-8;
        real _t038D = 0.1e-8;
        vec3 _t038E = [_t038B, _t038C, _t038D];
        vec3 _t038F = prim +0017<$[3]> (_t038E, xn0356);
        real _t0390 = _t038F[2];
        real _t0391 = -0.e0;
        bool _t0392 = prim >0080 (_t0390, _t0391);
        bool _t0393 = prim $and01C4 (_t038A, _t0392);
        bool _t0394 = prim $and01C4 (_t0382, _t0393);
        bool _t0395 = prim $and01C4 (_t037A, _t0394);
        if _t0395 {
          Femdata: MeshPos _t0396 = extractFemItemN((mesh0351, cellInt0358, xn0356, pos0352),AllBuild(MeshPos),);
          return _t0396;
        }
      }
    }
  }
  string _t0398 = "Bad end 2";
  string _t0399 = "\n";
  print (_t0398, _t0399);
  Femdata: MeshPos _t039A = extractFemItemN((mesh0351),InvalidBuild(MeshPos),);
  return _t039A;
}
function int[2]#5 nextCell40419 (int faceIdx0873, int cell0874, Femdata: Mesh mesh0875)
{
  int _t0876 = 8;
  int _t0877 = prim *0033 (cell0874, _t0876);
  int _t0878 = 2;
  int _t0879 = prim *0033 (faceIdx0873, _t0878);
  int _t087A = prim +0015 (_t0877, _t0879);
  int[2] _t087B = extractFemItemN((mesh0875, _t087A),CellFaceCell(Mesh),);
  return _t087B;
}
globalInit {
  int _t033A = 0;
  int _t0338 = 1;
  int _t033C = extractFemItem(NumCell(Mesh), int, cube0336);
  int _t033B = prim -0024 (_t033C, _t0338);
  int[] _t033F = prim $range01C3 (_t033A, _t033B);
  Femdata: MeshCell[] _t0340 = {};
  foreach _t033E in _t033F {
    Femdata: MeshCell _t0341 = loadFem(MeshCell, cube0336, _t033E);
    _t0340 = prim @0010<Femdata: MeshCell> (_t0340, _t0341);
  }
  0cell_cube0337 = _t0340;
  space0342 = loadFem(Space, 0space0342_intermedateGlobal0343, cube0336);
  data0344 = loadFem(FemFunc, 0data0344_intermedateGlobal0345, space0342);
  Femdata: Space _t0EC5 = extractFem(data0344, Space);
  Femdata: Space _t0EC6 = extractFem(data0344, Space);
  Femdata: Mesh _t0EC7 = extractFem(_t0EC6, Mesh);
  field(3)[] _t0EC8 = femField(data0344,_t0EC7,field(3)[],refField,findPos0350 );
  Femdata: Space _t0EC9 = extractFem(data0344, Space);
  Femdata: Mesh _t0ECA = extractFem(_t0EC9, Mesh);
  Femdata: Space _t0ECB = extractFem(data0344, Space);
  Femdata: Mesh _t0ECC = extractFem(_t0ECB, Mesh);
  Femdata: Space _t0ECD = extractFem(data0344, Space);
  Femdata: Mesh _t0ECE = extractFem(_t0ECD, Mesh);
  field(3)[3] _t0ECF = femField(_t0ECA,_t0ECE,field(3)[3],InvTransform,findPos0350 );
  F0ED0 = prim ∘0164<#∞; %3; $[]; %3; $[3]> (_t0EC8, _t0ECF);
}
strand gg (vec3 i0ED1) {
  output vec3 target0ED2;
  output vec3 translated0ED3;
  output bool valid0ED4;
  output Femdata: MeshCell c0ED5;
  output real result0ED7;
  output vec3 gradResult0ED8;
  output vec3 gradResultp0ED9;
  {
    target0ED2 = i0ED1;
    translated0ED3 = prim $nan01BD<$[3]> ();
    valid0ED4 = false;
    int _t0ED6 = 0;
    c0ED5 = prim $dynsub01C2<Femdata: MeshCell> (0cell_cube0337, _t0ED6);
    result0ED7 = prim $nan01BD<$[]> ();
    gradResult0ED8 = prim $nan01BD<$[3]> ();
    gradResultp0ED9 = prim $nan01BD<$[3]> ();
  }
  update
  {
    string _t0EDA = "Running on ";
    string _t0EDB = "\n";
    print (_t0EDA, target0ED2, _t0EDB);
    Femdata: MeshPos p0EDC = func findPos0350 (cube0336, target0ED2);
    valid0ED4 = extractFemItem(Valid(MeshPos), bool, p0EDC);
    if valid0ED4 {
      Femdata: Mesh _t0EDD = extractFem(p0EDC, Mesh);
      int _t0EDE = extractFemItem(CellIndex(MeshPos), int, p0EDC);
      c0ED5 = loadFem(MeshCell, _t0EDD, _t0EDE);
      translated0ED3 = extractFemItem(RefPos(MeshPos), vec3, p0EDC);
      result0ED7 = prim @00A5<#∞; %3; $[]> (F0ED0, target0ED2);
      field(3)[3] _t0EDF = prim ∇00A8<#∞; %3> (F0ED0);
      gradResult0ED8 = prim @00A5<#∞; %3; $[3]> (_t0EDF, target0ED2);
    } else {
      string _t0EE0 = "Warning: Invalid!\n";
      print (_t0EE0);
    }
    stabilize;
  }
}
collection {
  foreach i0EE1 in points0335 {
    new gg (i0EE1);
  }
}
/* Program end */
##### high-ir: after simple-to-high translation ####
## properties
  GlobalInit HasInputs HasGlobals ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
## globals
  input points0EE6 (points) = <no-default>
  input cube0EE7 (cube) = <no-default>
  input 0space0342_intermedateGlobal0EE8 (space) = <no-default>
  input 0data0344_intermedateGlobal0EE9 (data) = <no-default>
  global femData:MeshCell[] 0cell_cube0EEC
  global femData:Space space0EED
  global femData:FemFunc data0EEE
  global field F0EEF
## functions
  function femData:MeshPos findPos0F93 (femData:Mesh mesh0EF0#9, tensor[3] pos0EF1#3) {
    ENTRY0F92:  preds = []
      real _t0EF2#1 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
      real _t0EF4#1 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
      real _t0EF6#1 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
      tensor[3] xn0EF8#1 = <tensor[3]>[_t0EF2,_t0EF4,_t0EF6];
      int newtonInt0EFA#0 = 0;
      int cellInt0EFC#1 = ExtractFemItem<int,StartCell(Mesh)>(mesh0EF0);
      int _t0EFE#1 = ExtractFemItem<int,NumCell(Mesh)>(mesh0EF0);
      int _t0F00#1 = 1;
      int numCell0F02#0 = ISub(_t0EFE,_t0F00);
      int[] yayCells0F04#1 = ExtractFemItem2<tensor[3],int[],NearbyCell(File=spat.in)(Mesh)>(mesh0EF0,pos0EF1);
    FOREACH0F08:  preds = [ASSIGN0F05,NEXT0F89]
      foreach (cellItter0F06 in yayCells0F04) on exit goto ASSIGN0F8B
        int cellInt0F0A#0 = phi(cellInt0EFC,cellInt0F09)
        tensor[3] xn0F07#1 = phi(xn0EF8,xn0F23)
      int cellInt0F09#4 = cellItter0F06;
      field _t0F0C#1 = λ(INT0,FEM(mesh_t)1,FEM(mesh_t)2)<femV(noFunc, 0, 1, 2)_{i0}⊛Basis()>_{3} (cellInt0F09,mesh0EF0,mesh0EF0);
      field _t0F0E#1 = λ(F0[3])<∂/∂x_{i1}@(F0_{i0})>_{3 3} (_t0F0C);
      field _t0F10#1 = λ(F0[3])<((Σ(i6=0..2)(i7=0..2)(i9=0..2)(i10=0..2)<((ϵ_{ii6,ii7,ii0} * ϵ_{ii9,ii10,ii1} * F0_{i9,i6} * F0_{i10,i7}))>(i6=0..2)(i7=0..2)(i9=0..2)(i10=0..2)) / ( 2)) / ( Σ(i3=0..2)(i4=0..2)(i5=0..2)<((ϵ_{ii3,ii4,ii5} * F0_{i3,'0'} * F0_{i4,'1'} * F0_{i5,'2'}))>(i3=0..2)(i4=0..2)(i5=0..2))>_{3 3} (_t0F0E);
      real _t0F12#1 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
      real _t0F14#1 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
      real _t0F16#1 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
      tensor[3] _t0F18#1 = <tensor[3]>[_t0F12,_t0F14,_t0F16];
      tensor[3,3] A0F1A#1 = λ(F0[3],T1[3])<Probe(F0_{i0,i1},T1)>_{3 3} (_t0F10,_t0F18);
      int _t0F1C#1 = 0;
      int _t0F1E#1 = 16;
      int[] _t0F20#1 = Range(_t0F1C,_t0F1E);
    FOREACH0F24:  preds = [ASSIGN0F21,NEXT0F88]
      foreach (newtonItter0F22 in _t0F20) on exit goto NEXT0F89
        tensor[3] xn0F23#3 = phi(xn0F07,xn0F2D)
      field _t0F25#1 = λ(INT0,FEM(mesh_t)1,FEM(mesh_t)2)<femV(noFunc, 0, 1, 2)_{i0}⊛Basis()>_{3} (cellInt0F09,mesh0EF0,mesh0EF0);
      field _t0F27#1 = λ(T0[3],F1[3])<(F1_{i0}) - («T0_{i0}»)>_{3} (pos0EF1,_t0F25);
      field _t0F29#1 = λ(T0[3 3],F1[3])<Σ(i1=0..2)<((«T0_{i0,i1}» * F1_{i1}))>(i1=0..2)>_{3} (A0F1A,_t0F27);
      tensor[3] delta0F2B#3 = λ(F0[3],T1[3])<Probe(F0_{i0},T1)>_{3} (_t0F29,xn0F23);
      tensor[3] xn0F2D#6 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (xn0F23,delta0F2B);
      real _t0F2F#1 = 0.1e-7;
      real _t0F31#1 = 0.1e-7;
      real _t0F33#1 = λ(T0[],T1[])<(T0 * T1)> (_t0F2F,_t0F31);
      real _t0F35#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (delta0F2B,delta0F2B);
      bool _t0F37#1 = GTE<real>(_t0F33,_t0F35);
      if _t0F37 then goto ASSIGN0F3B else goto JOIN0F39
    ASSIGN0F3B:  preds = [COND0F87]
      real _t0F3A#1 = 0.1e1;
      real _t0F3C#1 = 0.1e-8;
      real _t0F3E#1 = λ(T0[],T1[])<(T0 + T1)> (_t0F3A,_t0F3C);
      real _t0F40#1 = 0.1e1;
      real _t0F42#1 = 0.1e1;
      real _t0F44#1 = 0.1e1;
      tensor[3] _t0F46#1 = <tensor[3]>[_t0F40,_t0F42,_t0F44];
      real _t0F48#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (_t0F46,xn0F2D);
      bool _t0F4A#1 = GT<real>(_t0F3E,_t0F48);
      real _t0F4C#1 = 0.1e-8;
      real _t0F4E#1 = 0.1e-8;
      real _t0F50#1 = 0.1e-8;
      tensor[3] _t0F52#1 = <tensor[3]>[_t0F4C,_t0F4E,_t0F50];
      tensor[3] _t0F54#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (_t0F52,xn0F2D);
      real _t0F56#1 = TensorIndex<tensor[3],[0]>(_t0F54);
      real _t0F58#1 = -0.e0;
      bool _t0F5A#1 = GT<real>(_t0F56,_t0F58);
      real _t0F5C#1 = 0.1e-8;
      real _t0F5E#1 = 0.1e-8;
      real _t0F60#1 = 0.1e-8;
      tensor[3] _t0F62#1 = <tensor[3]>[_t0F5C,_t0F5E,_t0F60];
      tensor[3] _t0F64#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (_t0F62,xn0F2D);
      real _t0F66#1 = TensorIndex<tensor[3],[1]>(_t0F64);
      real _t0F68#1 = -0.e0;
      bool _t0F6A#1 = GT<real>(_t0F66,_t0F68);
      real _t0F6C#1 = 0.1e-8;
      real _t0F6E#1 = 0.1e-8;
      real _t0F70#1 = 0.1e-8;
      tensor[3] _t0F72#1 = <tensor[3]>[_t0F6C,_t0F6E,_t0F70];
      tensor[3] _t0F74#1 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (_t0F72,xn0F2D);
      real _t0F76#1 = TensorIndex<tensor[3],[2]>(_t0F74);
      real _t0F78#1 = -0.e0;
      bool _t0F7A#1 = GT<real>(_t0F76,_t0F78);
      bool _t0F7C#1 = BAnd(_t0F6A,_t0F7A);
      bool _t0F7E#1 = BAnd(_t0F5A,_t0F7C);
      bool _t0F80#1 = BAnd(_t0F4A,_t0F7E);
      if _t0F80 then goto ASSIGN0F84 else goto JOIN0F82
    ASSIGN0F84:  preds = [COND0F86]
      femData:MeshPos _t0F83#1 = ExtractFemItemN<[femData:Mesh,int,tensor[3],tensor[3]],femData:MeshPos,AllBuild(MeshPos),0000,"",[],int>(mesh0EF0,cellInt0F09,xn0F2D,pos0EF1);
      return _t0F83
      goto JOIN0F82
    JOIN0F82:  preds = [*RETURN(_t0F83)0F85,COND0F86]
      goto JOIN0F39
    JOIN0F39:  preds = [JOIN0F82,COND0F87]
      goto FOREACH0F24
    NEXT0F89:  preds = [FOREACH0F24]
      goto FOREACH0F08
    ASSIGN0F8B:  preds = [FOREACH0F08]
      string _t0F8A#1 = "Bad end 2";
      string _t0F8C#1 = "\n";
      Print<[string,string]>(_t0F8A,_t0F8C);
      femData:MeshPos _t0F8F#1 = ExtractFemItemN<[femData:Mesh],femData:MeshPos,InvalidBuild(MeshPos),0000,"",[],int>(mesh0EF0);
      return _t0F8F
}
  function int[2] nextCell40FA5 (int faceIdx0F94#1, int cell0F95#1, femData:Mesh mesh0F96#1) {
    ENTRY0FA4:  preds = []
      int _t0F97#1 = 8;
      int _t0F99#1 = IMul(cell0F95,_t0F97);
      int _t0F9B#1 = 2;
      int _t0F9D#1 = IMul(faceIdx0F94,_t0F9B);
      int _t0F9F#1 = IAdd(_t0F99,_t0F9D);
      int[2] _t0FA1#1 = ExtractFemItemN<[femData:Mesh,int],int[2],CellFaceCell(Mesh),0000,"",[],int>(mesh0F96,_t0F9F);
      return _t0FA1
}
## input initialization
  ENTRY0EEA:  preds = []
    return
## global-variable initialization
  ENTRY0FE2:  preds = []
    femData:Mesh cube0FA8#3 = globals.cube0EE7;
    femData:Space 0space0342_intermedateGlobal0FA7#1 = globals.0space0342_intermedateGlobal0EE8;
    femData:FemFunc 0data0344_intermedateGlobal0FA6#1 = globals.0data0344_intermedateGlobal0EE9;
    int _t0FAC#1 = 0;
    int _t0FAE#1 = 1;
    int _t0FB0#1 = ExtractFemItem<int,NumCell(Mesh)>(cube0FA8);
    int _t0FB2#1 = ISub(_t0FB0,_t0FAE);
    int[] _t0FB4#1 = Range(_t0FAC,_t0FB2);
    femData:MeshCell[] _t0FB6#1 = <femData:MeshCell[]>{};
  FOREACH0FBA:  preds = [ASSIGN0FB7,NEXT0FBF]
    foreach (_t0FB8 in _t0FB4) on exit goto ASSIGN0FC1
      femData:MeshCell[] _t0FB9#2 = phi(_t0FB6,_t0FBD)
    femData:MeshCell _t0FBB#1 = LoadFem<femData:MeshCell>(cube0FA8,_t0FB8);
    femData:MeshCell[] _t0FBD#1 = Append<femData:MeshCell>(_t0FB9,_t0FBB);
    goto FOREACH0FBA
  ASSIGN0FC1:  preds = [FOREACH0FBA]
    femData:MeshCell[] 0cell_cube0FC0#1 = _t0FB9;
    globals.0cell_cube0EEC = 0cell_cube0FC0;
    femData:Space space0FC3#2 = LoadFem<femData:Space>(0space0342_intermedateGlobal0FA7,cube0FA8);
    globals.space0EED = space0FC3;
    femData:FemFunc data0FC6#7 = LoadFem<femData:FemFunc>(0data0344_intermedateGlobal0FA6,space0FC3);
    globals.data0EEE = data0FC6;
    femData:Space _t0FC9#1 = ExtractFem<femData:Space,femData:FemFunc>(data0FC6);
    femData:Space _t0FCB#1 = ExtractFem<femData:Space,femData:FemFunc>(data0FC6);
    femData:Mesh _t0FCD#1 = ExtractFem<femData:Mesh,femData:Space>(_t0FCB);
    field _t0FCF#1 = λ(FEM(mesh_t)0,FEM(fns_t)1,FEM(func_t)2)<femV(0F93, 0, 1, 2)⊛Basis()> (_t0FCD,_t0FC9,data0FC6);
    femData:Space _t0FD1#1 = ExtractFem<femData:Space,femData:FemFunc>(data0FC6);
    femData:Mesh _t0FD3#2 = ExtractFem<femData:Mesh,femData:Space>(_t0FD1);
    femData:Space _t0FD5#1 = ExtractFem<femData:Space,femData:FemFunc>(data0FC6);
    femData:Mesh _t0FD7#0 = ExtractFem<femData:Mesh,femData:Space>(_t0FD5);
    femData:Space _t0FD9#1 = ExtractFem<femData:Space,femData:FemFunc>(data0FC6);
    femData:Mesh _t0FDB#1 = ExtractFem<femData:Mesh,femData:Space>(_t0FD9);
    field _t0FDD#1 = λ(FEM(mesh_t)0,FEM(mesh_t)1,FEM(mesh_t)2)<femInvV(0F93, 0, 1, 2)_{i0}⊛Basis()>_{3} (_t0FDB,_t0FD3,_t0FD3);
    field F0FDF#1 = λ(F0[3],F1[3])<Cmp(F0)[F1_{i0}{3}]> (_t0FCF,_t0FDD);
    globals.F0EEF = F0FDF;
    return
## strand
  strand gg (tensor[3] i0FEC#1)
    state:
      output tensor[3] target;
      output tensor[3] translated;
      output bool valid;
      output femData:MeshCell c;
      output real result;
      output tensor[3] gradResult;
      output tensor[3] gradResultp;
    state init
      ENTRY101F:  preds = []
        femData:MeshCell[] 0cell_cube0FF4#1 = globals.0cell_cube0EEC;
        tensor[3] target0FFD#1 = i0FEC;
        real _nan1000#1 = nan;
        real _nan1001#1 = nan;
        real _nan1002#1 = nan;
        tensor[3] translated0FFF#1 = <tensor[3]>[_nan1000,_nan1001,_nan1002];
        bool valid1007#1 = false;
        int _t1009#1 = 0;
        femData:MeshCell c100B#1 = Subscript<femData:MeshCell[]>(0cell_cube0FF4,_t1009);
        real result100D#1 = nan;
        real _nan1010#1 = nan;
        real _nan1011#1 = nan;
        real _nan1012#1 = nan;
        tensor[3] gradResult100F#1 = <tensor[3]>[_nan1010,_nan1011,_nan1012];
        real _nan1018#1 = nan;
        real _nan1019#1 = nan;
        real _nan101A#1 = nan;
        tensor[3] gradResultp1017#1 = <tensor[3]>[_nan1018,_nan1019,_nan101A];
        self.target = target0FFD;
        self.translated = translated0FFF;
        self.valid = valid1007;
        self.c = c100B;
        self.result = result100D;
        self.gradResult = gradResult100F;
        self.gradResultp = gradResultp1017;
        return
    end state init
    method update
        ENTRY1060:  preds = []
          femData:Mesh cube1029#1 = globals.cube0EE7;
          field F1028#2 = globals.F0EEF;
          tensor[3] target102C#4 = self.target;
          tensor[3] translated102D#1 = self.translated;
          bool valid102E#0 = self.valid;
          femData:MeshCell c102F#1 = self.c;
          real result1030#1 = self.result;
          tensor[3] gradResult1031#1 = self.gradResult;
          tensor[3] gradResultp1032#0 = self.gradResultp;
          string _t103A#1 = "Running on ";
          string _t103C#1 = "\n";
          Print<[string,tensor[3],string]>(_t103A,target102C,_t103C);
          femData:MeshPos p103F#4 = findPos0F93 (cube1029,target102C);
          bool valid1041#2 = ExtractFemItem<bool,Valid(MeshPos)>(p103F);
          if valid1041 then goto ASSIGN1045 else goto ASSIGN1057
        ASSIGN1045:  preds = [COND1059]
          femData:Mesh _t1044#1 = ExtractFem<femData:Mesh,femData:MeshPos>(p103F);
          int _t1046#1 = ExtractFemItem<int,CellIndex(MeshPos)>(p103F);
          femData:MeshCell c1048#1 = LoadFem<femData:MeshCell>(_t1044,_t1046);
          tensor[3] translated104B#1 = ExtractFemItem<tensor[3],RefPos(MeshPos)>(p103F);
          real result104E#1 = λ(F0[3],T1[3])<Probe(F0,T1)> (F1028,target102C);
          field _t1051#1 = λ(F0[3])<∂/∂x_{i0}@(F0)>_{3} (F1028);
          tensor[3] gradResult1053#1 = λ(F0[3],T1[3])<Probe(F0_{i0},T1)>_{3} (_t1051,target102C);
          goto JOIN1043
        JOIN1043:  preds = [ASSIGN1055,MASSIGN1058]
          tensor[3] gradResult1054#1 = phi(gradResult1053,gradResult1031)
          real result104F#1 = phi(result104E,result1030)
          femData:MeshCell c1049#1 = phi(c1048,c102F)
          tensor[3] translated104C#1 = phi(translated104B,translated102D)
          self.translated = translated104C;
          self.valid = valid1041;
          self.c = c1049;
          self.result = result104F;
          self.gradResult = gradResult1054;
          stabilize
        ASSIGN1057:  preds = [COND1059]
          string _t1056#1 = "Warning: Invalid!\n";
          Print<[string]>(_t1056);
          goto JOIN1043
    end update
  end gg
## initial strand creation
  COLLECTION
    ENTRY0FEA:  preds = []
      tensor[3][] points0FE4#1 = globals.points0EE6;
    FOREACH0FE7:  preds = [ASSIGN0FE5,NEXT0FE9]
      foreach (i0FE6 in points0FE4) on exit goto RETURN0FEB
      new gg(i0FE6);
      goto FOREACH0FE7
    RETURN0FEB:  preds = [FOREACH0FE7]
      return
#### end program ####
##### high-ir: after value numbering ####
## properties
  GlobalInit HasInputs HasGlobals ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
## globals
  input points0EE6 (points) = <no-default>
  input cube0EE7 (cube) = <no-default>
  input 0space0342_intermedateGlobal0EE8 (space) = <no-default>
  input 0data0344_intermedateGlobal0EE9 (data) = <no-default>
  global femData:MeshCell[] 0cell_cube0EEC
  global femData:Space space0EED
  global femData:FemFunc data0EEE
  global field F0EEF
## functions
  function femData:MeshPos findPos0F93 (femData:Mesh mesh0EF0#7, tensor[3] pos0EF1#3) {
    ENTRY0F92:  preds = []
      real _t0EF2#3 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
      tensor[3] xn0EF8#2 = <tensor[3]>[_t0EF2,_t0EF2,_t0EF2];
      int newtonInt0EFA#1 = 0;
      int cellInt0EFC#1 = ExtractFemItem<int,StartCell(Mesh)>(mesh0EF0);
      int _t0EFE#1 = ExtractFemItem<int,NumCell(Mesh)>(mesh0EF0);
      int _t0F00#1 = 1;
      int numCell0F02#0 = ISub(_t0EFE,_t0F00);
      int[] yayCells0F04#1 = ExtractFemItem2<tensor[3],int[],NearbyCell(File=spat.in)(Mesh)>(mesh0EF0,pos0EF1);
    FOREACH0F08:  preds = [ASSIGN0F05,NEXT0F89]
      foreach (cellItter0F06 in yayCells0F04) on exit goto ASSIGN0F8B
        int cellInt0F0A#0 = phi(cellInt0EFC,cellItter0F06)
        tensor[3] xn0F07#1 = phi(xn0EF8,xn0F23)
      field _t0F0C#2 = λ(INT0,FEM(mesh_t)1,FEM(mesh_t)2)<femV(noFunc, 0, 1, 2)_{i0}⊛Basis()>_{3} (cellItter0F06,mesh0EF0,mesh0EF0);
      field _t0F0E#1 = λ(F0[3])<∂/∂x_{i1}@(F0_{i0})>_{3 3} (_t0F0C);
      field _t0F10#1 = λ(F0[3])<((Σ(i6=0..2)(i7=0..2)(i9=0..2)(i10=0..2)<((ϵ_{ii6,ii7,ii0} * ϵ_{ii9,ii10,ii1} * F0_{i9,i6} * F0_{i10,i7}))>(i6=0..2)(i7=0..2)(i9=0..2)(i10=0..2)) / ( 2)) / ( Σ(i3=0..2)(i4=0..2)(i5=0..2)<((ϵ_{ii3,ii4,ii5} * F0_{i3,'0'} * F0_{i4,'1'} * F0_{i5,'2'}))>(i3=0..2)(i4=0..2)(i5=0..2))>_{3 3} (_t0F0E);
      tensor[3,3] A0F1A#1 = λ(F0[3],T1[3])<Probe(F0_{i0,i1},T1)>_{3 3} (_t0F10,xn0EF8);
      int _t0F1E#1 = 16;
      int[] _t0F20#1 = Range(newtonInt0EFA,_t0F1E);
    FOREACH0F24:  preds = [ASSIGN1065,NEXT0F88]
      foreach (newtonItter0F22 in _t0F20) on exit goto NEXT0F89
        tensor[3] xn0F23#3 = phi(xn0F07,xn0F2D)
      field _t0F27#1 = λ(T0[3],F1[3])<(F1_{i0}) - («T0_{i0}»)>_{3} (pos0EF1,_t0F0C);
      field _t0F29#1 = λ(T0[3 3],F1[3])<Σ(i1=0..2)<((«T0_{i0,i1}» * F1_{i1}))>(i1=0..2)>_{3} (A0F1A,_t0F27);
      tensor[3] delta0F2B#3 = λ(F0[3],T1[3])<Probe(F0_{i0},T1)>_{3} (_t0F29,xn0F23);
      tensor[3] xn0F2D#4 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (xn0F23,delta0F2B);
      real _t0F2F#2 = 0.1e-7;
      real _t0F33#1 = λ(T0[],T1[])<(T0 * T1)> (_t0F2F,_t0F2F);
      real _t0F35#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (delta0F2B,delta0F2B);
      bool _t0F37#1 = GTE<real>(_t0F33,_t0F35);
      if _t0F37 then goto ASSIGN0F3B else goto JOIN0F39
    ASSIGN0F3B:  preds = [COND0F87]
      real _t0F3A#4 = 0.1e1;
      real _t0F3C#4 = 0.1e-8;
      real _t0F3E#1 = λ(T0[],T1[])<(T0 + T1)> (_t0F3A,_t0F3C);
      tensor[3] _t0F46#1 = <tensor[3]>[_t0F3A,_t0F3A,_t0F3A];
      real _t0F48#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (_t0F46,xn0F2D);
      bool _t0F4A#1 = GT<real>(_t0F3E,_t0F48);
      tensor[3] _t0F52#1 = <tensor[3]>[_t0F3C,_t0F3C,_t0F3C];
      tensor[3] _t0F54#3 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (_t0F52,xn0F2D);
      real _t0F56#1 = TensorIndex<tensor[3],[0]>(_t0F54);
      real _t0F58#3 = -0.e0;
      bool _t0F5A#1 = GT<real>(_t0F56,_t0F58);
      real _t0F66#1 = TensorIndex<tensor[3],[1]>(_t0F54);
      bool _t0F6A#1 = GT<real>(_t0F66,_t0F58);
      real _t0F76#1 = TensorIndex<tensor[3],[2]>(_t0F54);
      bool _t0F7A#1 = GT<real>(_t0F76,_t0F58);
      bool _t0F7C#1 = BAnd(_t0F6A,_t0F7A);
      bool _t0F7E#1 = BAnd(_t0F5A,_t0F7C);
      bool _t0F80#1 = BAnd(_t0F4A,_t0F7E);
      if _t0F80 then goto ASSIGN106E else goto JOIN0F82
    ASSIGN106E:  preds = [COND0F86]
      femData:MeshPos _t0F83#1 = ExtractFemItemN<[femData:Mesh,int,tensor[3],tensor[3]],femData:MeshPos,AllBuild(MeshPos),0000,"",[],int>(mesh0EF0,cellItter0F06,xn0F2D,pos0EF1);
      return _t0F83
      goto JOIN0F82
    JOIN0F82:  preds = [*RETURN(_t0F83)0F85,COND0F86]
      goto JOIN0F39
    JOIN0F39:  preds = [JOIN0F82,COND0F87]
      goto FOREACH0F24
    NEXT0F89:  preds = [FOREACH0F24]
      goto FOREACH0F08
    ASSIGN0F8B:  preds = [FOREACH0F08]
      string _t0F8A#1 = "Bad end 2";
      string _t0F8C#1 = "\n";
      Print<[string,string]>(_t0F8A,_t0F8C);
      femData:MeshPos _t0F8F#1 = ExtractFemItemN<[femData:Mesh],femData:MeshPos,InvalidBuild(MeshPos),0000,"",[],int>(mesh0EF0);
      return _t0F8F
}
  function int[2] nextCell40FA5 (int faceIdx0F94#1, int cell0F95#1, femData:Mesh mesh0F96#1) {
    ENTRY0FA4:  preds = []
      int _t0F97#1 = 8;
      int _t0F99#1 = IMul(cell0F95,_t0F97);
      int _t0F9B#1 = 2;
      int _t0F9D#1 = IMul(faceIdx0F94,_t0F9B);
      int _t0F9F#1 = IAdd(_t0F99,_t0F9D);
      int[2] _t0FA1#1 = ExtractFemItemN<[femData:Mesh,int],int[2],CellFaceCell(Mesh),0000,"",[],int>(mesh0F96,_t0F9F);
      return _t0FA1
}
## input initialization
  ENTRY0EEA:  preds = []
    return
## global-variable initialization
  ENTRY0FE2:  preds = []
    femData:Mesh cube0FA8#3 = globals.cube0EE7;
    femData:Space 0space0342_intermedateGlobal0FA7#1 = globals.0space0342_intermedateGlobal0EE8;
    femData:FemFunc 0data0344_intermedateGlobal0FA6#1 = globals.0data0344_intermedateGlobal0EE9;
    int _t0FAC#1 = 0;
    int _t0FAE#1 = 1;
    int _t0FB0#1 = ExtractFemItem<int,NumCell(Mesh)>(cube0FA8);
    int _t0FB2#1 = ISub(_t0FB0,_t0FAE);
    int[] _t0FB4#1 = Range(_t0FAC,_t0FB2);
    femData:MeshCell[] _t0FB6#1 = <femData:MeshCell[]>{};
  FOREACH0FBA:  preds = [ASSIGN0FB7,NEXT0FBF]
    foreach (_t0FB8 in _t0FB4) on exit goto GASSIGN106F
      femData:MeshCell[] _t0FB9#2 = phi(_t0FB6,_t0FBD)
    femData:MeshCell _t0FBB#1 = LoadFem<femData:MeshCell>(cube0FA8,_t0FB8);
    femData:MeshCell[] _t0FBD#1 = Append<femData:MeshCell>(_t0FB9,_t0FBB);
    goto FOREACH0FBA
  GASSIGN106F:  preds = [FOREACH0FBA]
    globals.0cell_cube0EEC = _t0FB9;
    femData:Space space0FC3#2 = LoadFem<femData:Space>(0space0342_intermedateGlobal0FA7,cube0FA8);
    globals.space0EED = space0FC3;
    femData:FemFunc data0FC6#3 = LoadFem<femData:FemFunc>(0data0344_intermedateGlobal0FA6,space0FC3);
    globals.data0EEE = data0FC6;
    femData:Space _t0FC9#2 = ExtractFem<femData:Space,femData:FemFunc>(data0FC6);
    femData:Mesh _t0FCD#4 = ExtractFem<femData:Mesh,femData:Space>(_t0FC9);
    field _t0FCF#1 = λ(FEM(mesh_t)0,FEM(fns_t)1,FEM(func_t)2)<femV(0F93, 0, 1, 2)⊛Basis()> (_t0FCD,_t0FC9,data0FC6);
    field _t0FDD#1 = λ(FEM(mesh_t)0,FEM(mesh_t)1,FEM(mesh_t)2)<femInvV(0F93, 0, 1, 2)_{i0}⊛Basis()>_{3} (_t0FCD,_t0FCD,_t0FCD);
    field F0FDF#1 = λ(F0[3],F1[3])<Cmp(F0)[F1_{i0}{3}]> (_t0FCF,_t0FDD);
    globals.F0EEF = F0FDF;
    return
## strand
  strand gg (tensor[3] i0FEC#1)
    state:
      output tensor[3] target;
      output tensor[3] translated;
      output bool valid;
      output femData:MeshCell c;
      output real result;
      output tensor[3] gradResult;
      output tensor[3] gradResultp;
    state init
      ENTRY101F:  preds = []
        femData:MeshCell[] 0cell_cube0FF4#1 = globals.0cell_cube0EEC;
        real _nan1000#4 = nan;
        tensor[3] translated0FFF#3 = <tensor[3]>[_nan1000,_nan1000,_nan1000];
        bool valid1007#1 = false;
        int _t1009#1 = 0;
        femData:MeshCell c100B#1 = Subscript<femData:MeshCell[]>(0cell_cube0FF4,_t1009);
        self.target = i0FEC;
        self.translated = translated0FFF;
        self.valid = valid1007;
        self.c = c100B;
        self.result = _nan1000;
        self.gradResult = translated0FFF;
        self.gradResultp = translated0FFF;
        return
    end state init
    method update
        ENTRY1060:  preds = []
          femData:Mesh cube1029#1 = globals.cube0EE7;
          field F1028#2 = globals.F0EEF;
          tensor[3] target102C#4 = self.target;
          tensor[3] translated102D#1 = self.translated;
          bool valid102E#0 = self.valid;
          femData:MeshCell c102F#1 = self.c;
          real result1030#1 = self.result;
          tensor[3] gradResult1031#1 = self.gradResult;
          tensor[3] gradResultp1032#0 = self.gradResultp;
          string _t103A#1 = "Running on ";
          string _t103C#1 = "\n";
          Print<[string,tensor[3],string]>(_t103A,target102C,_t103C);
          femData:MeshPos p103F#4 = findPos0F93 (cube1029,target102C);
          bool valid1041#2 = ExtractFemItem<bool,Valid(MeshPos)>(p103F);
          if valid1041 then goto ASSIGN1045 else goto ASSIGN1057
        ASSIGN1045:  preds = [COND1059]
          femData:Mesh _t1044#1 = ExtractFem<femData:Mesh,femData:MeshPos>(p103F);
          int _t1046#1 = ExtractFemItem<int,CellIndex(MeshPos)>(p103F);
          femData:MeshCell c1048#1 = LoadFem<femData:MeshCell>(_t1044,_t1046);
          tensor[3] translated104B#1 = ExtractFemItem<tensor[3],RefPos(MeshPos)>(p103F);
          real result104E#1 = λ(F0[3],T1[3])<Probe(F0,T1)> (F1028,target102C);
          field _t1051#1 = λ(F0[3])<∂/∂x_{i0}@(F0)>_{3} (F1028);
          tensor[3] gradResult1053#1 = λ(F0[3],T1[3])<Probe(F0_{i0},T1)>_{3} (_t1051,target102C);
          goto JOIN1043
        JOIN1043:  preds = [ASSIGN1055,MASSIGN1058]
          tensor[3] gradResult1054#1 = phi(gradResult1053,gradResult1031)
          real result104F#1 = phi(result104E,result1030)
          femData:MeshCell c1049#1 = phi(c1048,c102F)
          tensor[3] translated104C#1 = phi(translated104B,translated102D)
          self.translated = translated104C;
          self.valid = valid1041;
          self.c = c1049;
          self.result = result104F;
          self.gradResult = gradResult1054;
          stabilize
        ASSIGN1057:  preds = [COND1059]
          string _t1056#1 = "Warning: Invalid!\n";
          Print<[string]>(_t1056);
          goto JOIN1043
    end update
  end gg
## initial strand creation
  COLLECTION
    ENTRY0FEA:  preds = []
      tensor[3][] points0FE4#1 = globals.points0EE6;
    FOREACH0FE7:  preds = [ASSIGN0FE5,NEXT0FE9]
      foreach (i0FE6 in points0FE4) on exit goto RETURN0FEB
      new gg(i0FE6);
      goto FOREACH0FE7
    RETURN0FEB:  preds = [FOREACH0FE7]
      return
#### end program ####
##### high-ir: after normalization rewriting ####
## properties
  GlobalInit HasInputs HasGlobals ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
## globals
  input points0EE6 (points) = <no-default>
  input cube0EE7 (cube) = <no-default>
  input 0space0342_intermedateGlobal0EE8 (space) = <no-default>
  input 0data0344_intermedateGlobal0EE9 (data) = <no-default>
  global femData:MeshCell[] 0cell_cube0EEC
## functions
  function femData:MeshPos findPos0F93 (femData:Mesh mesh0EF0#23, tensor[3] pos0EF1#7) {
    ENTRY0F92:  preds = []
      real _t0EF2#3 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
      tensor[3] xn0EF8#6 = <tensor[3]>[_t0EF2,_t0EF2,_t0EF2];
      int newtonInt0EFA#1 = 0;
      int[] yayCells0F04#1 = ExtractFemItem2<tensor[3],int[],NearbyCell(File=spat.in)(Mesh)>(mesh0EF0,pos0EF1);
    FOREACH0F08:  preds = [ASSIGN0F05,NEXT0F89]
      foreach (cellItter0F06 in yayCells0F04) on exit goto ASSIGN0F8B
        tensor[3] xn0F07#1 = phi(xn0EF8,xn0F23)
      int _t0F1E#1 = 16;
      int[] _t0F20#1 = Range(newtonInt0EFA,_t0F1E);
    FOREACH0F24:  preds = [ASSIGN1065,NEXT0F88]
      foreach (newtonItter0F22 in _t0F20) on exit goto NEXT0F89
        tensor[3] xn0F23#9 = phi(xn0F07,xn0F2D)
      tensor[3] xn0F2D#2 = λ(T0[3],INT1,FEM(mesh_t)2,FEM(mesh_t)3,T4[3],T5[3],INT6,FEM(mesh_t)7,FEM(mesh_t)8,T9[3])<(T0_{i0}) - (Σ(i3=0..2)<(((Σ(i11=0..2)(i12=0..2)<((ϵ_{ii11,ii12,ii0} * Σ(i14=0..2)<((Probe(femV(noFunc, 1, 2, 2)_{i14}⊛Basis()dx_{i11},T4) * Σ(i15=0..2)<((ϵ_{ii14,ii15,ii3} * Probe(femV(noFunc, 1, 2, 2)_{i15}⊛Basis()dx_{i12},T4)))>(i15=0..2)))>(i14=0..2)))>(i11=0..2)(i12=0..2)) / ( (2 * Σ(i8=0..2)<((Probe(femV(noFunc, 1, 2, 2)_{i8}⊛Basis()dx_{'0'},T4) * Σ(i9=0..2)<((Probe(femV(noFunc, 1, 2, 2)_{i9}⊛Basis()dx_{'1'},T4) * Σ(i10=0..2)<((ϵ_{ii8,ii9,ii10} * Probe(femV(noFunc, 1, 2, 2)_{i10}⊛Basis()dx_{'2'},T4)))>(i10=0..2)))>(i9=0..2)))>(i8=0..2))) * (Probe(femV(noFunc, 1, 2, 2)_{i3}⊛Basis(),T0)) - (T5_{i3})))>(i3=0..2))>_{3} (xn0F23,cellItter0F06,mesh0EF0,mesh0EF0,xn0EF8,pos0EF1,cellItter0F06,mesh0EF0,mesh0EF0,xn0F23);
      real _t0F2F#2 = 0.1e-7;
      real _t0F33#1 = λ(T0[],T1[])<(T0 * T1)> (_t0F2F,_t0F2F);
      real _t0F35#1 = λ(INT0,FEM(mesh_t)1,FEM(mesh_t)2,T3[3],T4[3],INT5,FEM(mesh_t)6,FEM(mesh_t)7,T8[3],INT9,FEM(mesh_t)10,FEM(mesh_t)11,T12[3],T13[3],INT14,FEM(mesh_t)15,FEM(mesh_t)16,T17[3])<Σ(i0=0..2)<((Σ(i2=0..2)<(((Σ(i10=0..2)(i11=0..2)<((ϵ_{ii10,ii11,ii0} * Σ(i13=0..2)<((Probe(femV(noFunc, 0, 1, 1)_{i13}⊛Basis()dx_{i10},T3) * Σ(i14=0..2)<((ϵ_{ii13,ii14,ii2} * Probe(femV(noFunc, 0, 1, 1)_{i14}⊛Basis()dx_{i11},T3)))>(i14=0..2)))>(i13=0..2)))>(i10=0..2)(i11=0..2)) / ( (2 * Σ(i7=0..2)<((Probe(femV(noFunc, 0, 1, 1)_{i7}⊛Basis()dx_{'0'},T3) * Σ(i8=0..2)<((Probe(femV(noFunc, 0, 1, 1)_{i8}⊛Basis()dx_{'1'},T3) * Σ(i9=0..2)<((ϵ_{ii7,ii8,ii9} * Probe(femV(noFunc, 0, 1, 1)_{i9}⊛Basis()dx_{'2'},T3)))>(i9=0..2)))>(i8=0..2)))>(i7=0..2))) * (Probe(femV(noFunc, 0, 1, 1)_{i2}⊛Basis(),T8)) - (T4_{i2})))>(i2=0..2) * Σ(i11=0..2)<(((Σ(i19=0..2)(i20=0..2)<((ϵ_{ii19,ii20,ii0} * Σ(i22=0..2)<((Probe(femV(noFunc, 0, 1, 1)_{i22}⊛Basis()dx_{i19},T3) * Σ(i23=0..2)<((ϵ_{ii22,ii23,ii11} * Probe(femV(noFunc, 0, 1, 1)_{i23}⊛Basis()dx_{i20},T3)))>(i23=0..2)))>(i22=0..2)))>(i19=0..2)(i20=0..2)) / ( (2 * Σ(i16=0..2)<((Probe(femV(noFunc, 0, 1, 1)_{i16}⊛Basis()dx_{'0'},T3) * Σ(i17=0..2)<((Probe(femV(noFunc, 0, 1, 1)_{i17}⊛Basis()dx_{'1'},T3) * Σ(i18=0..2)<((ϵ_{ii16,ii17,ii18} * Probe(femV(noFunc, 0, 1, 1)_{i18}⊛Basis()dx_{'2'},T3)))>(i18=0..2)))>(i17=0..2)))>(i16=0..2))) * (Probe(femV(noFunc, 0, 1, 1)_{i11}⊛Basis(),T8)) - (T4_{i11})))>(i11=0..2)))>(i0=0..2)> (cellItter0F06,mesh0EF0,mesh0EF0,xn0EF8,pos0EF1,cellItter0F06,mesh0EF0,mesh0EF0,xn0F23,cellItter0F06,mesh0EF0,mesh0EF0,xn0EF8,pos0EF1,cellItter0F06,mesh0EF0,mesh0EF0,xn0F23);
      bool _t0F37#1 = GTE<real>(_t0F33,_t0F35);
      if _t0F37 then goto ASSIGN0F3B else goto JOIN0F39
    ASSIGN0F3B:  preds = [COND0F87]
      real _t0F3A#4 = 0.1e1;
      real _t0F3C#4 = 0.1e-8;
      real _t0F3E#1 = λ(T0[],T1[])<(T0 + T1)> (_t0F3A,_t0F3C);
      tensor[3] _t0F46#1 = <tensor[3]>[_t0F3A,_t0F3A,_t0F3A];
      real _t0F48#1 = λ(T0[3],T1[3],INT2,FEM(mesh_t)3,FEM(mesh_t)4,T5[3],T6[3],INT7,FEM(mesh_t)8,FEM(mesh_t)9,T10[3])<Σ(i0=0..2)<((T0_{i0} * (T1_{i0}) - (Σ(i3=0..2)<(((Σ(i11=0..2)(i12=0..2)<((ϵ_{ii11,ii12,ii0} * Σ(i14=0..2)<((Probe(femV(noFunc, 2, 3, 3)_{i14}⊛Basis()dx_{i11},T5) * Σ(i15=0..2)<((ϵ_{ii14,ii15,ii3} * Probe(femV(noFunc, 2, 3, 3)_{i15}⊛Basis()dx_{i12},T5)))>(i15=0..2)))>(i14=0..2)))>(i11=0..2)(i12=0..2)) / ( (2 * Σ(i8=0..2)<((Probe(femV(noFunc, 2, 3, 3)_{i8}⊛Basis()dx_{'0'},T5) * Σ(i9=0..2)<((Probe(femV(noFunc, 2, 3, 3)_{i9}⊛Basis()dx_{'1'},T5) * Σ(i10=0..2)<((ϵ_{ii8,ii9,ii10} * Probe(femV(noFunc, 2, 3, 3)_{i10}⊛Basis()dx_{'2'},T5)))>(i10=0..2)))>(i9=0..2)))>(i8=0..2))) * (Probe(femV(noFunc, 2, 3, 3)_{i3}⊛Basis(),T1)) - (T6_{i3})))>(i3=0..2))))>(i0=0..2)> (_t0F46,xn0F23,cellItter0F06,mesh0EF0,mesh0EF0,xn0EF8,pos0EF1,cellItter0F06,mesh0EF0,mesh0EF0,xn0F23);
      bool _t0F4A#1 = GT<real>(_t0F3E,_t0F48);
      tensor[3] _t0F52#1 = <tensor[3]>[_t0F3C,_t0F3C,_t0F3C];
      tensor[3] _t0F54#3 = λ(T0[3],T1[3],INT2,FEM(mesh_t)3,FEM(mesh_t)4,T5[3],T6[3],INT7,FEM(mesh_t)8,FEM(mesh_t)9,T10[3])<(T0_{i0} + (T1_{i0}) - (Σ(i4=0..2)<(((Σ(i12=0..2)(i13=0..2)<((ϵ_{ii12,ii13,ii0} * Σ(i15=0..2)<((Probe(femV(noFunc, 2, 3, 3)_{i15}⊛Basis()dx_{i12},T5) * Σ(i16=0..2)<((ϵ_{ii15,ii16,ii4} * Probe(femV(noFunc, 2, 3, 3)_{i16}⊛Basis()dx_{i13},T5)))>(i16=0..2)))>(i15=0..2)))>(i12=0..2)(i13=0..2)) / ( (2 * Σ(i9=0..2)<((Probe(femV(noFunc, 2, 3, 3)_{i9}⊛Basis()dx_{'0'},T5) * Σ(i10=0..2)<((Probe(femV(noFunc, 2, 3, 3)_{i10}⊛Basis()dx_{'1'},T5) * Σ(i11=0..2)<((ϵ_{ii9,ii10,ii11} * Probe(femV(noFunc, 2, 3, 3)_{i11}⊛Basis()dx_{'2'},T5)))>(i11=0..2)))>(i10=0..2)))>(i9=0..2))) * (Probe(femV(noFunc, 2, 3, 3)_{i4}⊛Basis(),T1)) - (T6_{i4})))>(i4=0..2)))>_{3} (_t0F52,xn0F23,cellItter0F06,mesh0EF0,mesh0EF0,xn0EF8,pos0EF1,cellItter0F06,mesh0EF0,mesh0EF0,xn0F23);
      real _t0F56#1 = TensorIndex<tensor[3],[0]>(_t0F54);
      real _t0F58#3 = -0.e0;
      bool _t0F5A#1 = GT<real>(_t0F56,_t0F58);
      real _t0F66#1 = TensorIndex<tensor[3],[1]>(_t0F54);
      bool _t0F6A#1 = GT<real>(_t0F66,_t0F58);
      real _t0F76#1 = TensorIndex<tensor[3],[2]>(_t0F54);
      bool _t0F7A#1 = GT<real>(_t0F76,_t0F58);
      bool _t0F7C#1 = BAnd(_t0F6A,_t0F7A);
      bool _t0F7E#1 = BAnd(_t0F5A,_t0F7C);
      bool _t0F80#1 = BAnd(_t0F4A,_t0F7E);
      if _t0F80 then goto ASSIGN106E else goto JOIN0F82
    ASSIGN106E:  preds = [COND0F86]
      femData:MeshPos _t0F83#1 = ExtractFemItemN<[femData:Mesh,int,tensor[3],tensor[3]],femData:MeshPos,AllBuild(MeshPos),0000,"",[],int>(mesh0EF0,cellItter0F06,xn0F2D,pos0EF1);
      return _t0F83
      goto JOIN0F82
    JOIN0F82:  preds = [*RETURN(_t0F83)0F85,COND0F86]
      goto JOIN0F39
    JOIN0F39:  preds = [JOIN0F82,COND0F87]
      goto FOREACH0F24
    NEXT0F89:  preds = [FOREACH0F24]
      goto FOREACH0F08
    ASSIGN0F8B:  preds = [FOREACH0F08]
      string _t0F8A#1 = "Bad end 2";
      string _t0F8C#1 = "\n";
      Print<[string,string]>(_t0F8A,_t0F8C);
      femData:MeshPos _t0F8F#1 = ExtractFemItemN<[femData:Mesh],femData:MeshPos,InvalidBuild(MeshPos),0000,"",[],int>(mesh0EF0);
      return _t0F8F
}
  function int[2] nextCell40FA5 (int faceIdx0F94#1, int cell0F95#1, femData:Mesh mesh0F96#1) {
    ENTRY0FA4:  preds = []
      int _t0F97#1 = 8;
      int _t0F99#1 = IMul(cell0F95,_t0F97);
      int _t0F9B#1 = 2;
      int _t0F9D#1 = IMul(faceIdx0F94,_t0F9B);
      int _t0F9F#1 = IAdd(_t0F99,_t0F9D);
      int[2] _t0FA1#1 = ExtractFemItemN<[femData:Mesh,int],int[2],CellFaceCell(Mesh),0000,"",[],int>(mesh0F96,_t0F9F);
      return _t0FA1
}
## input initialization
  ENTRY0EEA:  preds = []
    return
## global-variable initialization
  ENTRY0FE2:  preds = []
    femData:Mesh cube0FA8#3 = globals.cube0EE7;
    femData:Space 0space0342_intermedateGlobal0FA7#1 = globals.0space0342_intermedateGlobal0EE8;
    femData:FemFunc 0data0344_intermedateGlobal0FA6#1 = globals.0data0344_intermedateGlobal0EE9;
    int _t0FAC#1 = 0;
    int _t0FAE#1 = 1;
    int _t0FB0#1 = ExtractFemItem<int,NumCell(Mesh)>(cube0FA8);
    int _t0FB2#1 = ISub(_t0FB0,_t0FAE);
    int[] _t0FB4#1 = Range(_t0FAC,_t0FB2);
    femData:MeshCell[] _t0FB6#1 = <femData:MeshCell[]>{};
  FOREACH0FBA:  preds = [ASSIGN0FB7,NEXT0FBF]
    foreach (_t0FB8 in _t0FB4) on exit goto GASSIGN106F
      femData:MeshCell[] _t0FB9#2 = phi(_t0FB6,_t0FBD)
    femData:MeshCell _t0FBB#1 = LoadFem<femData:MeshCell>(cube0FA8,_t0FB8);
    femData:MeshCell[] _t0FBD#1 = Append<femData:MeshCell>(_t0FB9,_t0FBB);
    goto FOREACH0FBA
  GASSIGN106F:  preds = [FOREACH0FBA]
    globals.0cell_cube0EEC = _t0FB9;
    femData:Space space0FC3#1 = LoadFem<femData:Space>(0space0342_intermedateGlobal0FA7,cube0FA8);
    femData:FemFunc data0FC6#3 = LoadFem<femData:FemFunc>(0data0344_intermedateGlobal0FA6,space0FC3);
    femData:Space _t0FC9#3 = ExtractFem<femData:Space,femData:FemFunc>(data0FC6);
    femData:Mesh _t0FCD#8 = ExtractFem<femData:Mesh,femData:Space>(_t0FC9);
    return
## strand
  strand gg (tensor[3] i0FEC#1)
    state:
      output tensor[3] target;
      output tensor[3] translated;
      output bool valid;
      output femData:MeshCell c;
      output real result;
      output tensor[3] gradResult;
      output tensor[3] gradResultp;
    state init
      ENTRY101F:  preds = []
        femData:MeshCell[] 0cell_cube0FF4#1 = globals.0cell_cube0EEC;
        real _nan1000#4 = nan;
        tensor[3] translated0FFF#3 = <tensor[3]>[_nan1000,_nan1000,_nan1000];
        bool valid1007#1 = false;
        int _t1009#1 = 0;
        femData:MeshCell c100B#1 = Subscript<femData:MeshCell[]>(0cell_cube0FF4,_t1009);
        self.target = i0FEC;
        self.translated = translated0FFF;
        self.valid = valid1007;
        self.c = c100B;
        self.result = _nan1000;
        self.gradResult = translated0FFF;
        self.gradResultp = translated0FFF;
        return
    end state init
    method update
        ENTRY1060:  preds = []
          femData:Mesh cube1029#1 = globals.cube0EE7;
          tensor[3] target102C#4 = self.target;
          tensor[3] translated102D#1 = self.translated;
          femData:MeshCell c102F#1 = self.c;
          real result1030#1 = self.result;
          tensor[3] gradResult1031#1 = self.gradResult;
          string _t103A#1 = "Running on ";
          string _t103C#1 = "\n";
          Print<[string,tensor[3],string]>(_t103A,target102C,_t103C);
          femData:MeshPos p103F#4 = findPos0F93 (cube1029,target102C);
          bool valid1041#2 = ExtractFemItem<bool,Valid(MeshPos)>(p103F);
          if valid1041 then goto ASSIGN1045 else goto ASSIGN1057
        ASSIGN1045:  preds = [COND1059]
          femData:Mesh _t1044#1 = ExtractFem<femData:Mesh,femData:MeshPos>(p103F);
          int _t1046#1 = ExtractFemItem<int,CellIndex(MeshPos)>(p103F);
          femData:MeshCell c1048#1 = LoadFem<femData:MeshCell>(_t1044,_t1046);
          tensor[3] translated104B#1 = ExtractFemItem<tensor[3],RefPos(MeshPos)>(p103F);
          real result104E#1 = λ(FEM(mesh_t)0,FEM(fns_t)1,FEM(func_t)2,FEM(mesh_t)3,FEM(mesh_t)4,FEM(mesh_t)5,T6[3])<Probe(Cmp(femV(0F93, 0, 1, 2)⊛Basis())[femInvV(0F93, 0, 0, 0)_{i0}⊛Basis(){3}],T6)> (_t0FCD,_t0FC9,data0FC6,_t0FCD,_t0FCD,_t0FCD,target102C);
          tensor[3] gradResult1053#1 = λ(FEM(mesh_t)0,FEM(fns_t)1,FEM(func_t)2,FEM(mesh_t)3,FEM(mesh_t)4,FEM(mesh_t)5,T6[3])<Σ(i104=0..2)<((Probe(Cmp(femV(0F93, 0, 1, 2)⊛Basis()dx_{i104})[femInvV(0F93, 0, 0, 0)_{i0}⊛Basis(){3}],T6) * (Σ(i115=0..2)(i116=0..2)<((ϵ_{ii115,ii116,ii104} * Σ(i118=0..2)<((Probe(femV(0F93, 0, 0, 0)_{i118}⊛Basis()dx_{i115},T6) * Σ(i119=0..2)<((ϵ_{ii118,ii119,ii0} * Probe(femV(0F93, 0, 0, 0)_{i119}⊛Basis()dx_{i116},T6)))>(i119=0..2)))>(i118=0..2)))>(i115=0..2)(i116=0..2)) / ( (2 * Σ(i112=0..2)<((Probe(femV(0F93, 0, 0, 0)_{i112}⊛Basis()dx_{'0'},T6) * Σ(i113=0..2)<((Probe(femV(0F93, 0, 0, 0)_{i113}⊛Basis()dx_{'1'},T6) * Σ(i114=0..2)<((ϵ_{ii112,ii113,ii114} * Probe(femV(0F93, 0, 0, 0)_{i114}⊛Basis()dx_{'2'},T6)))>(i114=0..2)))>(i113=0..2)))>(i112=0..2)))))>(i104=0..2)>_{3} (_t0FCD,_t0FC9,data0FC6,_t0FCD,_t0FCD,_t0FCD,target102C);
          goto JOIN1043
        JOIN1043:  preds = [ASSIGN1084,MASSIGN1058]
          tensor[3] gradResult1054#1 = phi(gradResult1053,gradResult1031)
          real result104F#1 = phi(result104E,result1030)
          femData:MeshCell c1049#1 = phi(c1048,c102F)
          tensor[3] translated104C#1 = phi(translated104B,translated102D)
          self.translated = translated104C;
          self.valid = valid1041;
          self.c = c1049;
          self.result = result104F;
          self.gradResult = gradResult1054;
          stabilize
        ASSIGN1057:  preds = [COND1059]
          string _t1056#1 = "Warning: Invalid!\n";
          Print<[string]>(_t1056);
          goto JOIN1043
    end update
  end gg
## initial strand creation
  COLLECTION
    ENTRY0FEA:  preds = []
      tensor[3][] points0FE4#1 = globals.points0EE6;
    FOREACH0FE7:  preds = [ASSIGN0FE5,NEXT0FE9]
      foreach (i0FE6 in points0FE4) on exit goto RETURN0FEB
      new gg(i0FE6);
      goto FOREACH0FE7
    RETURN0FEB:  preds = [FOREACH0FE7]
      return
#### end program ####
promote _t0FCD --> globals._t1086
promote _t0FC9 --> globals._tX1089
promote data0FC6 --> globals.data108C
##### high-ir: after normalization promotion ####
## properties
  GlobalInit HasInputs HasGlobals ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
## globals
  input points0EE6 (points) = <no-default>
  input cube0EE7 (cube) = <no-default>
  input 0space0342_intermedateGlobal0EE8 (space) = <no-default>
  input 0data0344_intermedateGlobal0EE9 (data) = <no-default>
  global femData:MeshCell[] 0cell_cube0EEC
  global femData:Mesh _t1086
  global femData:Space _tX1089
  global femData:FemFunc data108C
## functions
  function femData:MeshPos findPos0F93 (femData:Mesh mesh0EF0#23, tensor[3] pos0EF1#7) {
    ENTRY0F92:  preds = []
      real _t0EF2#3 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
      tensor[3] xn0EF8#6 = <tensor[3]>[_t0EF2,_t0EF2,_t0EF2];
      int newtonInt0EFA#1 = 0;
      int[] yayCells0F04#1 = ExtractFemItem2<tensor[3],int[],NearbyCell(File=spat.in)(Mesh)>(mesh0EF0,pos0EF1);
    FOREACH0F08:  preds = [ASSIGN0F05,NEXT0F89]
      foreach (cellItter0F06 in yayCells0F04) on exit goto ASSIGN0F8B
        tensor[3] xn0F07#1 = phi(xn0EF8,xn0F23)
      int _t0F1E#1 = 16;
      int[] _t0F20#1 = Range(newtonInt0EFA,_t0F1E);
    FOREACH0F24:  preds = [ASSIGN1065,NEXT0F88]
      foreach (newtonItter0F22 in _t0F20) on exit goto NEXT0F89
        tensor[3] xn0F23#9 = phi(xn0F07,xn0F2D)
      tensor[3] xn0F2D#2 = λ(T0[3],INT1,FEM(mesh_t)2,FEM(mesh_t)3,T4[3],T5[3],INT6,FEM(mesh_t)7,FEM(mesh_t)8,T9[3])<(T0_{i0}) - (Σ(i3=0..2)<(((Σ(i11=0..2)(i12=0..2)<((ϵ_{ii11,ii12,ii0} * Σ(i14=0..2)<((Probe(femV(noFunc, 1, 2, 2)_{i14}⊛Basis()dx_{i11},T4) * Σ(i15=0..2)<((ϵ_{ii14,ii15,ii3} * Probe(femV(noFunc, 1, 2, 2)_{i15}⊛Basis()dx_{i12},T4)))>(i15=0..2)))>(i14=0..2)))>(i11=0..2)(i12=0..2)) / ( (2 * Σ(i8=0..2)<((Probe(femV(noFunc, 1, 2, 2)_{i8}⊛Basis()dx_{'0'},T4) * Σ(i9=0..2)<((Probe(femV(noFunc, 1, 2, 2)_{i9}⊛Basis()dx_{'1'},T4) * Σ(i10=0..2)<((ϵ_{ii8,ii9,ii10} * Probe(femV(noFunc, 1, 2, 2)_{i10}⊛Basis()dx_{'2'},T4)))>(i10=0..2)))>(i9=0..2)))>(i8=0..2))) * (Probe(femV(noFunc, 1, 2, 2)_{i3}⊛Basis(),T0)) - (T5_{i3})))>(i3=0..2))>_{3} (xn0F23,cellItter0F06,mesh0EF0,mesh0EF0,xn0EF8,pos0EF1,cellItter0F06,mesh0EF0,mesh0EF0,xn0F23);
      real _t0F2F#2 = 0.1e-7;
      real _t0F33#1 = λ(T0[],T1[])<(T0 * T1)> (_t0F2F,_t0F2F);
      real _t0F35#1 = λ(INT0,FEM(mesh_t)1,FEM(mesh_t)2,T3[3],T4[3],INT5,FEM(mesh_t)6,FEM(mesh_t)7,T8[3],INT9,FEM(mesh_t)10,FEM(mesh_t)11,T12[3],T13[3],INT14,FEM(mesh_t)15,FEM(mesh_t)16,T17[3])<Σ(i0=0..2)<((Σ(i2=0..2)<(((Σ(i10=0..2)(i11=0..2)<((ϵ_{ii10,ii11,ii0} * Σ(i13=0..2)<((Probe(femV(noFunc, 0, 1, 1)_{i13}⊛Basis()dx_{i10},T3) * Σ(i14=0..2)<((ϵ_{ii13,ii14,ii2} * Probe(femV(noFunc, 0, 1, 1)_{i14}⊛Basis()dx_{i11},T3)))>(i14=0..2)))>(i13=0..2)))>(i10=0..2)(i11=0..2)) / ( (2 * Σ(i7=0..2)<((Probe(femV(noFunc, 0, 1, 1)_{i7}⊛Basis()dx_{'0'},T3) * Σ(i8=0..2)<((Probe(femV(noFunc, 0, 1, 1)_{i8}⊛Basis()dx_{'1'},T3) * Σ(i9=0..2)<((ϵ_{ii7,ii8,ii9} * Probe(femV(noFunc, 0, 1, 1)_{i9}⊛Basis()dx_{'2'},T3)))>(i9=0..2)))>(i8=0..2)))>(i7=0..2))) * (Probe(femV(noFunc, 0, 1, 1)_{i2}⊛Basis(),T8)) - (T4_{i2})))>(i2=0..2) * Σ(i11=0..2)<(((Σ(i19=0..2)(i20=0..2)<((ϵ_{ii19,ii20,ii0} * Σ(i22=0..2)<((Probe(femV(noFunc, 0, 1, 1)_{i22}⊛Basis()dx_{i19},T3) * Σ(i23=0..2)<((ϵ_{ii22,ii23,ii11} * Probe(femV(noFunc, 0, 1, 1)_{i23}⊛Basis()dx_{i20},T3)))>(i23=0..2)))>(i22=0..2)))>(i19=0..2)(i20=0..2)) / ( (2 * Σ(i16=0..2)<((Probe(femV(noFunc, 0, 1, 1)_{i16}⊛Basis()dx_{'0'},T3) * Σ(i17=0..2)<((Probe(femV(noFunc, 0, 1, 1)_{i17}⊛Basis()dx_{'1'},T3) * Σ(i18=0..2)<((ϵ_{ii16,ii17,ii18} * Probe(femV(noFunc, 0, 1, 1)_{i18}⊛Basis()dx_{'2'},T3)))>(i18=0..2)))>(i17=0..2)))>(i16=0..2))) * (Probe(femV(noFunc, 0, 1, 1)_{i11}⊛Basis(),T8)) - (T4_{i11})))>(i11=0..2)))>(i0=0..2)> (cellItter0F06,mesh0EF0,mesh0EF0,xn0EF8,pos0EF1,cellItter0F06,mesh0EF0,mesh0EF0,xn0F23,cellItter0F06,mesh0EF0,mesh0EF0,xn0EF8,pos0EF1,cellItter0F06,mesh0EF0,mesh0EF0,xn0F23);
      bool _t0F37#1 = GTE<real>(_t0F33,_t0F35);
      if _t0F37 then goto ASSIGN0F3B else goto JOIN0F39
    ASSIGN0F3B:  preds = [COND0F87]
      real _t0F3A#4 = 0.1e1;
      real _t0F3C#4 = 0.1e-8;
      real _t0F3E#1 = λ(T0[],T1[])<(T0 + T1)> (_t0F3A,_t0F3C);
      tensor[3] _t0F46#1 = <tensor[3]>[_t0F3A,_t0F3A,_t0F3A];
      real _t0F48#1 = λ(T0[3],T1[3],INT2,FEM(mesh_t)3,FEM(mesh_t)4,T5[3],T6[3],INT7,FEM(mesh_t)8,FEM(mesh_t)9,T10[3])<Σ(i0=0..2)<((T0_{i0} * (T1_{i0}) - (Σ(i3=0..2)<(((Σ(i11=0..2)(i12=0..2)<((ϵ_{ii11,ii12,ii0} * Σ(i14=0..2)<((Probe(femV(noFunc, 2, 3, 3)_{i14}⊛Basis()dx_{i11},T5) * Σ(i15=0..2)<((ϵ_{ii14,ii15,ii3} * Probe(femV(noFunc, 2, 3, 3)_{i15}⊛Basis()dx_{i12},T5)))>(i15=0..2)))>(i14=0..2)))>(i11=0..2)(i12=0..2)) / ( (2 * Σ(i8=0..2)<((Probe(femV(noFunc, 2, 3, 3)_{i8}⊛Basis()dx_{'0'},T5) * Σ(i9=0..2)<((Probe(femV(noFunc, 2, 3, 3)_{i9}⊛Basis()dx_{'1'},T5) * Σ(i10=0..2)<((ϵ_{ii8,ii9,ii10} * Probe(femV(noFunc, 2, 3, 3)_{i10}⊛Basis()dx_{'2'},T5)))>(i10=0..2)))>(i9=0..2)))>(i8=0..2))) * (Probe(femV(noFunc, 2, 3, 3)_{i3}⊛Basis(),T1)) - (T6_{i3})))>(i3=0..2))))>(i0=0..2)> (_t0F46,xn0F23,cellItter0F06,mesh0EF0,mesh0EF0,xn0EF8,pos0EF1,cellItter0F06,mesh0EF0,mesh0EF0,xn0F23);
      bool _t0F4A#1 = GT<real>(_t0F3E,_t0F48);
      tensor[3] _t0F52#1 = <tensor[3]>[_t0F3C,_t0F3C,_t0F3C];
      tensor[3] _t0F54#3 = λ(T0[3],T1[3],INT2,FEM(mesh_t)3,FEM(mesh_t)4,T5[3],T6[3],INT7,FEM(mesh_t)8,FEM(mesh_t)9,T10[3])<(T0_{i0} + (T1_{i0}) - (Σ(i4=0..2)<(((Σ(i12=0..2)(i13=0..2)<((ϵ_{ii12,ii13,ii0} * Σ(i15=0..2)<((Probe(femV(noFunc, 2, 3, 3)_{i15}⊛Basis()dx_{i12},T5) * Σ(i16=0..2)<((ϵ_{ii15,ii16,ii4} * Probe(femV(noFunc, 2, 3, 3)_{i16}⊛Basis()dx_{i13},T5)))>(i16=0..2)))>(i15=0..2)))>(i12=0..2)(i13=0..2)) / ( (2 * Σ(i9=0..2)<((Probe(femV(noFunc, 2, 3, 3)_{i9}⊛Basis()dx_{'0'},T5) * Σ(i10=0..2)<((Probe(femV(noFunc, 2, 3, 3)_{i10}⊛Basis()dx_{'1'},T5) * Σ(i11=0..2)<((ϵ_{ii9,ii10,ii11} * Probe(femV(noFunc, 2, 3, 3)_{i11}⊛Basis()dx_{'2'},T5)))>(i11=0..2)))>(i10=0..2)))>(i9=0..2))) * (Probe(femV(noFunc, 2, 3, 3)_{i4}⊛Basis(),T1)) - (T6_{i4})))>(i4=0..2)))>_{3} (_t0F52,xn0F23,cellItter0F06,mesh0EF0,mesh0EF0,xn0EF8,pos0EF1,cellItter0F06,mesh0EF0,mesh0EF0,xn0F23);
      real _t0F56#1 = TensorIndex<tensor[3],[0]>(_t0F54);
      real _t0F58#3 = -0.e0;
      bool _t0F5A#1 = GT<real>(_t0F56,_t0F58);
      real _t0F66#1 = TensorIndex<tensor[3],[1]>(_t0F54);
      bool _t0F6A#1 = GT<real>(_t0F66,_t0F58);
      real _t0F76#1 = TensorIndex<tensor[3],[2]>(_t0F54);
      bool _t0F7A#1 = GT<real>(_t0F76,_t0F58);
      bool _t0F7C#1 = BAnd(_t0F6A,_t0F7A);
      bool _t0F7E#1 = BAnd(_t0F5A,_t0F7C);
      bool _t0F80#1 = BAnd(_t0F4A,_t0F7E);
      if _t0F80 then goto ASSIGN106E else goto JOIN0F82
    ASSIGN106E:  preds = [COND0F86]
      femData:MeshPos _t0F83#1 = ExtractFemItemN<[femData:Mesh,int,tensor[3],tensor[3]],femData:MeshPos,AllBuild(MeshPos),0000,"",[],int>(mesh0EF0,cellItter0F06,xn0F2D,pos0EF1);
      return _t0F83
      goto JOIN0F82
    JOIN0F82:  preds = [*RETURN(_t0F83)0F85,COND0F86]
      goto JOIN0F39
    JOIN0F39:  preds = [JOIN0F82,COND0F87]
      goto FOREACH0F24
    NEXT0F89:  preds = [FOREACH0F24]
      goto FOREACH0F08
    ASSIGN0F8B:  preds = [FOREACH0F08]
      string _t0F8A#1 = "Bad end 2";
      string _t0F8C#1 = "\n";
      Print<[string,string]>(_t0F8A,_t0F8C);
      femData:MeshPos _t0F8F#1 = ExtractFemItemN<[femData:Mesh],femData:MeshPos,InvalidBuild(MeshPos),0000,"",[],int>(mesh0EF0);
      return _t0F8F
}
  function int[2] nextCell40FA5 (int faceIdx0F94#1, int cell0F95#1, femData:Mesh mesh0F96#1) {
    ENTRY0FA4:  preds = []
      int _t0F97#1 = 8;
      int _t0F99#1 = IMul(cell0F95,_t0F97);
      int _t0F9B#1 = 2;
      int _t0F9D#1 = IMul(faceIdx0F94,_t0F9B);
      int _t0F9F#1 = IAdd(_t0F99,_t0F9D);
      int[2] _t0FA1#1 = ExtractFemItemN<[femData:Mesh,int],int[2],CellFaceCell(Mesh),0000,"",[],int>(mesh0F96,_t0F9F);
      return _t0FA1
}
## input initialization
  ENTRY0EEA:  preds = []
    return
## global-variable initialization
  ENTRY0FE2:  preds = []
    femData:Mesh cube0FA8#3 = globals.cube0EE7;
    femData:Space 0space0342_intermedateGlobal0FA7#1 = globals.0space0342_intermedateGlobal0EE8;
    femData:FemFunc 0data0344_intermedateGlobal0FA6#1 = globals.0data0344_intermedateGlobal0EE9;
    int _t0FAC#1 = 0;
    int _t0FAE#1 = 1;
    int _t0FB0#1 = ExtractFemItem<int,NumCell(Mesh)>(cube0FA8);
    int _t0FB2#1 = ISub(_t0FB0,_t0FAE);
    int[] _t0FB4#1 = Range(_t0FAC,_t0FB2);
    femData:MeshCell[] _t0FB6#1 = <femData:MeshCell[]>{};
  FOREACH0FBA:  preds = [ASSIGN0FB7,NEXT0FBF]
    foreach (_t0FB8 in _t0FB4) on exit goto GASSIGN106F
      femData:MeshCell[] _t0FB9#2 = phi(_t0FB6,_t0FBD)
    femData:MeshCell _t0FBB#1 = LoadFem<femData:MeshCell>(cube0FA8,_t0FB8);
    femData:MeshCell[] _t0FBD#1 = Append<femData:MeshCell>(_t0FB9,_t0FBB);
    goto FOREACH0FBA
  GASSIGN106F:  preds = [FOREACH0FBA]
    globals.0cell_cube0EEC = _t0FB9;
    femData:Space space0FC3#1 = LoadFem<femData:Space>(0space0342_intermedateGlobal0FA7,cube0FA8);
    femData:FemFunc data0FC6#2 = LoadFem<femData:FemFunc>(0data0344_intermedateGlobal0FA6,space0FC3);
    femData:Space _t0FC9#2 = ExtractFem<femData:Space,femData:FemFunc>(data0FC6);
    femData:Mesh _t0FCD#1 = ExtractFem<femData:Mesh,femData:Space>(_t0FC9);
    globals._t1086 = _t0FCD;
    globals._tX1089 = _t0FC9;
    globals.data108C = data0FC6;
    return
## strand
  strand gg (tensor[3] i0FEC#1)
    state:
      output tensor[3] target;
      output tensor[3] translated;
      output bool valid;
      output femData:MeshCell c;
      output real result;
      output tensor[3] gradResult;
      output tensor[3] gradResultp;
    state init
      ENTRY101F:  preds = []
        femData:MeshCell[] 0cell_cube0FF4#1 = globals.0cell_cube0EEC;
        real _nan1000#4 = nan;
        tensor[3] translated0FFF#3 = <tensor[3]>[_nan1000,_nan1000,_nan1000];
        bool valid1007#1 = false;
        int _t1009#1 = 0;
        femData:MeshCell c100B#1 = Subscript<femData:MeshCell[]>(0cell_cube0FF4,_t1009);
        self.target = i0FEC;
        self.translated = translated0FFF;
        self.valid = valid1007;
        self.c = c100B;
        self.result = _nan1000;
        self.gradResult = translated0FFF;
        self.gradResultp = translated0FFF;
        return
    end state init
    method update
        ENTRY1060:  preds = []
          femData:Mesh _t1087#8 = globals._t1086;
          femData:Space _t108A#2 = globals._tX1089;
          femData:FemFunc data108D#2 = globals.data108C;
          femData:Mesh cube1029#1 = globals.cube0EE7;
          tensor[3] target102C#4 = self.target;
          tensor[3] translated102D#1 = self.translated;
          femData:MeshCell c102F#1 = self.c;
          real result1030#1 = self.result;
          tensor[3] gradResult1031#1 = self.gradResult;
          string _t103A#1 = "Running on ";
          string _t103C#1 = "\n";
          Print<[string,tensor[3],string]>(_t103A,target102C,_t103C);
          femData:MeshPos p103F#4 = findPos0F93 (cube1029,target102C);
          bool valid1041#2 = ExtractFemItem<bool,Valid(MeshPos)>(p103F);
          if valid1041 then goto ASSIGN1045 else goto ASSIGN1057
        ASSIGN1045:  preds = [COND1059]
          femData:Mesh _t1044#1 = ExtractFem<femData:Mesh,femData:MeshPos>(p103F);
          int _t1046#1 = ExtractFemItem<int,CellIndex(MeshPos)>(p103F);
          femData:MeshCell c1048#1 = LoadFem<femData:MeshCell>(_t1044,_t1046);
          tensor[3] translated104B#1 = ExtractFemItem<tensor[3],RefPos(MeshPos)>(p103F);
          real result104E#1 = λ(FEM(mesh_t)0,FEM(fns_t)1,FEM(func_t)2,FEM(mesh_t)3,FEM(mesh_t)4,FEM(mesh_t)5,T6[3])<Probe(Cmp(femV(0F93, 0, 1, 2)⊛Basis())[femInvV(0F93, 0, 0, 0)_{i0}⊛Basis(){3}],T6)> (_t1087,_t108A,data108D,_t1087,_t1087,_t1087,target102C);
          tensor[3] gradResult1053#1 = λ(FEM(mesh_t)0,FEM(fns_t)1,FEM(func_t)2,FEM(mesh_t)3,FEM(mesh_t)4,FEM(mesh_t)5,T6[3])<Σ(i104=0..2)<((Probe(Cmp(femV(0F93, 0, 1, 2)⊛Basis()dx_{i104})[femInvV(0F93, 0, 0, 0)_{i0}⊛Basis(){3}],T6) * (Σ(i115=0..2)(i116=0..2)<((ϵ_{ii115,ii116,ii104} * Σ(i118=0..2)<((Probe(femV(0F93, 0, 0, 0)_{i118}⊛Basis()dx_{i115},T6) * Σ(i119=0..2)<((ϵ_{ii118,ii119,ii0} * Probe(femV(0F93, 0, 0, 0)_{i119}⊛Basis()dx_{i116},T6)))>(i119=0..2)))>(i118=0..2)))>(i115=0..2)(i116=0..2)) / ( (2 * Σ(i112=0..2)<((Probe(femV(0F93, 0, 0, 0)_{i112}⊛Basis()dx_{'0'},T6) * Σ(i113=0..2)<((Probe(femV(0F93, 0, 0, 0)_{i113}⊛Basis()dx_{'1'},T6) * Σ(i114=0..2)<((ϵ_{ii112,ii113,ii114} * Probe(femV(0F93, 0, 0, 0)_{i114}⊛Basis()dx_{'2'},T6)))>(i114=0..2)))>(i113=0..2)))>(i112=0..2)))))>(i104=0..2)>_{3} (_t1087,_t108A,data108D,_t1087,_t1087,_t1087,target102C);
          goto JOIN1043
        JOIN1043:  preds = [ASSIGN108F,MASSIGN1058]
          tensor[3] gradResult1054#1 = phi(gradResult1053,gradResult1031)
          real result104F#1 = phi(result104E,result1030)
          femData:MeshCell c1049#1 = phi(c1048,c102F)
          tensor[3] translated104C#1 = phi(translated104B,translated102D)
          self.translated = translated104C;
          self.valid = valid1041;
          self.c = c1049;
          self.result = result104F;
          self.gradResult = gradResult1054;
          stabilize
        ASSIGN1057:  preds = [COND1059]
          string _t1056#1 = "Warning: Invalid!\n";
          Print<[string]>(_t1056);
          goto JOIN1043
    end update
  end gg
## initial strand creation
  COLLECTION
    ENTRY0FEA:  preds = []
      tensor[3][] points0FE4#1 = globals.points0EE6;
    FOREACH0FE7:  preds = [ASSIGN0FE5,NEXT0FE9]
      foreach (i0FE6 in points0FE4) on exit goto RETURN0FEB
      new gg(i0FE6);
      goto FOREACH0FE7
    RETURN0FEB:  preds = [FOREACH0FE7]
      return
#### end program ####
##### mid-ir: after high-to-mid translation ####
## properties
  GlobalInit HasInputs HasGlobals ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
## globals
  input points1096 (points) = <no-default>
  input cube1097 (cube) = <no-default>
  input 0space0342_intermedateGlobal1098 (space) = <no-default>
  input 0data0344_intermedateGlobal1099 (data) = <no-default>
  global femData:MeshCell[] 0cell_cube109A
  global femData:Mesh _t109B
  global femData:Space _tX109C
  global femData:FemFunc data109D
## functions
  function femData:MeshPos findPos10FD (femData:Mesh mesh10FE#31, tensor[3] pos10FF#6) {
    ENTRY1100:  preds = []
      real _t1101#3 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
      tensor[3] xn1103#49 = <tensor[3]>[_t1101,_t1101,_t1101];
      int newtonInt1105#1 = 0;
      int[] yayCells1107#1 = ExtractFemItem2<tensor[3],int[],NearbyCell(File=spat.in)(Mesh)>(mesh10FE,pos10FF);
    FOREACH110A:  preds = [ASSIGN1108,NEXT1225]
      foreach (cellItter1109 in yayCells1107) on exit goto ASSIGN1227
        tensor[3] xn1224#1 = phi(xn1103,xn1112)
      int _t110B#1 = 16;
      int[] _t110D#1 = Range(newtonInt1105,_t110B);
    FOREACH1110:  preds = [ASSIGN110E,NEXT1223]
      foreach (newtonItter110F in _t110D) on exit goto NEXT1225
        tensor[3] xn1112#16 = phi(xn1224,xn1111)
      int[4] femIndicies1123#1 = ExtractFemItem2<int,int[4],ExtractIndices(Mesh)>(mesh10FE,cellItter1109);
      tensor[4,3] femDofs1124#5 = ExtractFemItem2<int[4],tensor[4,3],ExtractDofsSeq(Mesh)>(mesh10FE,femIndicies1123);
      tensor[4,3] dofs1122#1 = femDofs1124;
      tensor[3,4] basisResult1125#1 = EvaluateBasis<BasisArray(3,4)>(xn1103);
      tensor[3,3] probe_l_101113#2 = λ(INT0,FEM(mesh_t)1,T2[3],T3[4 3],T4[3 4],T5[3])<Σ(i3=0..3)<((T3_{i3,i0} * T4_{i1,i3}))>(i3=0..3)>_{3 3} (cellItter1109,mesh10FE,xn1103,dofs1122,basisResult1125,xn1103);
      tensor[3,3,3] op1_e3_l_121114#1 = λ(T0[3 3])<Σ(i3=0..2)<((ϵ_{ii0,ii3,ii1} * T0_{i3,i2}))>(i3=0..2)>_{3 3 3} (probe_l_101113);
      tensor[3,3,3] op1_e3_l_131115#1 = λ(T0[3 3],T1[3 3 3])<Σ(i3=0..2)<((T0_{i3,i0} * T1_{i3,i1,i2}))>(i3=0..2)>_{3 3 3} (probe_l_101113,op1_e3_l_121114);
      tensor[4,3] dofs1126#1 = femDofs1124;
      tensor[3,4] basisResult1127#1 = EvaluateBasis<BasisArray(3,4)>(xn1103);
      tensor[3] probe_l_141116#1 = λ(INT0,FEM(mesh_t)1,T2[3],T3[4 3],T4[3 4],T5[3])<Σ(i2=0..3)<((T3_{i2,i0} * T4_{'0',i2}))>(i2=0..3)>_{3} (cellItter1109,mesh10FE,xn1103,dofs1126,basisResult1127,xn1103);
      tensor[4,3] dofs1128#1 = femDofs1124;
      tensor[3,4] basisResult1129#1 = EvaluateBasis<BasisArray(3,4)>(xn1103);
      tensor[3] probe_l_151117#1 = λ(INT0,FEM(mesh_t)1,T2[3],T3[4 3],T4[3 4],T5[3])<Σ(i2=0..3)<((T3_{i2,i0} * T4_{'1',i2}))>(i2=0..3)>_{3} (cellItter1109,mesh10FE,xn1103,dofs1128,basisResult1129,xn1103);
      tensor[4,3] dofs112A#1 = femDofs1124;
      tensor[3,4] basisResult112B#1 = EvaluateBasis<BasisArray(3,4)>(xn1103);
      tensor[3] probe_l_161118#1 = λ(INT0,FEM(mesh_t)1,T2[3],T3[4 3],T4[3 4],T5[3])<Σ(i2=0..3)<((T3_{i2,i0} * T4_{'2',i2}))>(i2=0..3)>_{3} (cellItter1109,mesh10FE,xn1103,dofs112A,basisResult112B,xn1103);
      tensor[3,3] op1_e3_l_171119#1 = λ(T0[3])<Σ(i2=0..2)<((ϵ_{ii0,ii1,ii2} * T0_{i2}))>(i2=0..2)>_{3 3} (probe_l_161118);
      tensor[3] op1_e3_l_18111A#1 = λ(T0[3],T1[3 3])<Σ(i1=0..2)<((T0_{i1} * T1_{i0,i1}))>(i1=0..2)>_{3} (probe_l_151117,op1_e3_l_171119);
      real op1_e3_l_19111B#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (probe_l_141116,op1_e3_l_18111A);
      tensor[3,3] op1_e3_l_20111C#1 = λ(T0[3 3 3])<Σ(i2=0..2)(i3=0..2)<((ϵ_{ii2,ii3,ii0} * T0_{i2,i1,i3}))>(i2=0..2)(i3=0..2)>_{3 3} (op1_e3_l_131115);
      real op1_e3_l_21111D#1 = λ(T0[])<(2 * T0)> (op1_e3_l_19111B);
      tensor[4,3] dofs112C#1 = femDofs1124;
      tensor[4] basisResult112D#1 = EvaluateBasis<BasisArray(4)>(xn1112);
      tensor[3] probe_l_22111E#1 = λ(T0[3],INT1,FEM(mesh_t)2,T3[4 3],T4[4],T5[3])<Σ(i1=0..3)<((T3_{i1,i0} * T4_{i1}))>(i1=0..3)>_{3} (xn1112,cellItter1109,mesh10FE,dofs112C,basisResult112D,xn1112);
      tensor[3,3] op1_e3_l_23111F#1 = λ(T0[3 3],T1[])<(T0_{i0,i1}) / ( T1)>_{3 3} (op1_e3_l_20111C,op1_e3_l_21111D);
      tensor[3] op1_e3_l_241120#1 = λ(T0[3],T1[3])<(T1_{i0}) - (T0_{i0})>_{3} (pos10FF,probe_l_22111E);
      tensor[3] op1_e3_l_251121#1 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (op1_e3_l_23111F,op1_e3_l_241120);
      tensor[3] xn1111#2 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (xn1112,op1_e3_l_251121);
      real _t114A#2 = 0.1e-7;
      real _t114C#1 = λ(T0[],T1[])<(T0 * T1)> (_t114A,_t114A);
      int[4] femIndicies115F#1 = ExtractFemItem2<int,int[4],ExtractIndices(Mesh)>(mesh10FE,cellItter1109);
      tensor[4,3] femDofs1160#5 = ExtractFemItem2<int[4],tensor[4,3],ExtractDofsSeq(Mesh)>(mesh10FE,femIndicies115F);
      tensor[4,3] dofs115E#1 = femDofs1160;
      tensor[3,4] basisResult1161#1 = EvaluateBasis<BasisArray(3,4)>(xn1103);
      tensor[3,3] probe_l_18114F#2 = λ(INT0,FEM(mesh_t)1,T2[3],T3[4 3],T4[3 4],T5[3])<Σ(i3=0..3)<((T3_{i3,i0} * T4_{i1,i3}))>(i3=0..3)>_{3 3} (cellItter1109,mesh10FE,xn1103,dofs115E,basisResult1161,xn1103);
      tensor[3,3,3] op1_e3_l_201150#1 = λ(T0[3 3])<Σ(i3=0..2)<((ϵ_{ii0,ii3,ii1} * T0_{i3,i2}))>(i3=0..2)>_{3 3 3} (probe_l_18114F);
      tensor[3,3,3] op1_e3_l_211151#1 = λ(T0[3 3],T1[3 3 3])<Σ(i3=0..2)<((T0_{i3,i0} * T1_{i3,i1,i2}))>(i3=0..2)>_{3 3 3} (probe_l_18114F,op1_e3_l_201150);
      tensor[4,3] dofs1162#1 = femDofs1160;
      tensor[3,4] basisResult1163#1 = EvaluateBasis<BasisArray(3,4)>(xn1103);
      tensor[3] probe_l_221152#1 = λ(INT0,FEM(mesh_t)1,T2[3],T3[4 3],T4[3 4],T5[3])<Σ(i2=0..3)<((T3_{i2,i0} * T4_{'0',i2}))>(i2=0..3)>_{3} (cellItter1109,mesh10FE,xn1103,dofs1162,basisResult1163,xn1103);
      tensor[4,3] dofs1164#1 = femDofs1160;
      tensor[3,4] basisResult1165#1 = EvaluateBasis<BasisArray(3,4)>(xn1103);
      tensor[3] probe_l_231153#1 = λ(INT0,FEM(mesh_t)1,T2[3],T3[4 3],T4[3 4],T5[3])<Σ(i2=0..3)<((T3_{i2,i0} * T4_{'1',i2}))>(i2=0..3)>_{3} (cellItter1109,mesh10FE,xn1103,dofs1164,basisResult1165,xn1103);
      tensor[4,3] dofs1166#1 = femDofs1160;
      tensor[3,4] basisResult1167#1 = EvaluateBasis<BasisArray(3,4)>(xn1103);
      tensor[3] probe_l_241154#1 = λ(INT0,FEM(mesh_t)1,T2[3],T3[4 3],T4[3 4],T5[3])<Σ(i2=0..3)<((T3_{i2,i0} * T4_{'2',i2}))>(i2=0..3)>_{3} (cellItter1109,mesh10FE,xn1103,dofs1166,basisResult1167,xn1103);
      tensor[3,3] op1_e3_l_251155#1 = λ(T0[3])<Σ(i2=0..2)<((ϵ_{ii0,ii1,ii2} * T0_{i2}))>(i2=0..2)>_{3 3} (probe_l_241154);
      tensor[3] op1_e3_l_261156#1 = λ(T0[3],T1[3 3])<Σ(i1=0..2)<((T0_{i1} * T1_{i0,i1}))>(i1=0..2)>_{3} (probe_l_231153,op1_e3_l_251155);
      real op1_e3_l_271157#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (probe_l_221152,op1_e3_l_261156);
      tensor[3,3] op1_e3_l_281158#1 = λ(T0[3 3 3])<Σ(i2=0..2)(i3=0..2)<((ϵ_{ii2,ii3,ii0} * T0_{i2,i1,i3}))>(i2=0..2)(i3=0..2)>_{3 3} (op1_e3_l_211151);
      real op1_e3_l_291159#1 = λ(T0[])<(2 * T0)> (op1_e3_l_271157);
      tensor[4,3] dofs1168#1 = femDofs1160;
      tensor[4] basisResult1169#1 = EvaluateBasis<BasisArray(4)>(xn1112);
      tensor[3] probe_l_30115A#1 = λ(INT0,FEM(mesh_t)1,T2[3],T3[4 3],T4[4],T5[3])<Σ(i1=0..3)<((T3_{i1,i0} * T4_{i1}))>(i1=0..3)>_{3} (cellItter1109,mesh10FE,xn1112,dofs1168,basisResult1169,xn1112);
      tensor[3,3] op1_e3_l_31115B#1 = λ(T0[3 3],T1[])<(T0_{i0,i1}) / ( T1)>_{3 3} (op1_e3_l_281158,op1_e3_l_291159);
      tensor[3] op1_e3_l_32115C#1 = λ(T0[3],T1[3])<(T1_{i0}) - (T0_{i0})>_{3} (pos10FF,probe_l_30115A);
      tensor[3] op1_e3_l_48115D#2 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (op1_e3_l_31115B,op1_e3_l_32115C);
      real _t114E#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_48115D,op1_e3_l_48115D);
      bool _t1186#1 = GTE<real>(_t114C,_t114E);
      if _t1186 then goto ASSIGN118A else goto JOIN1222
    ASSIGN118A:  preds = [COND1188]
      real _t1189#4 = 0.1e1;
      real _t118B#4 = 0.1e-8;
      real _t118D#1 = λ(T0[],T1[])<(T0 + T1)> (_t1189,_t118B);
      tensor[3] _t118F#1 = <tensor[3]>[_t1189,_t1189,_t1189];
      int[4] femIndicies11A3#1 = ExtractFemItem2<int,int[4],ExtractIndices(Mesh)>(mesh10FE,cellItter1109);
      tensor[4,3] femDofs11A4#5 = ExtractFemItem2<int[4],tensor[4,3],ExtractDofsSeq(Mesh)>(mesh10FE,femIndicies11A3);
      tensor[4,3] dofs11A2#1 = femDofs11A4;
      tensor[3,4] basisResult11A5#1 = EvaluateBasis<BasisArray(3,4)>(xn1103);
      tensor[3,3] probe_l_111192#2 = λ(INT0,FEM(mesh_t)1,T2[3],T3[4 3],T4[3 4],T5[3])<Σ(i3=0..3)<((T3_{i3,i0} * T4_{i1,i3}))>(i3=0..3)>_{3 3} (cellItter1109,mesh10FE,xn1103,dofs11A2,basisResult11A5,xn1103);
      tensor[3,3,3] op1_e3_l_131193#1 = λ(T0[3 3])<Σ(i3=0..2)<((ϵ_{ii0,ii3,ii1} * T0_{i3,i2}))>(i3=0..2)>_{3 3 3} (probe_l_111192);
      tensor[3,3,3] op1_e3_l_141194#1 = λ(T0[3 3],T1[3 3 3])<Σ(i3=0..2)<((T0_{i3,i0} * T1_{i3,i1,i2}))>(i3=0..2)>_{3 3 3} (probe_l_111192,op1_e3_l_131193);
      tensor[4,3] dofs11A6#1 = femDofs11A4;
      tensor[3,4] basisResult11A7#1 = EvaluateBasis<BasisArray(3,4)>(xn1103);
      tensor[3] probe_l_151195#1 = λ(INT0,FEM(mesh_t)1,T2[3],T3[4 3],T4[3 4],T5[3])<Σ(i2=0..3)<((T3_{i2,i0} * T4_{'0',i2}))>(i2=0..3)>_{3} (cellItter1109,mesh10FE,xn1103,dofs11A6,basisResult11A7,xn1103);
      tensor[4,3] dofs11A8#1 = femDofs11A4;
      tensor[3,4] basisResult11A9#1 = EvaluateBasis<BasisArray(3,4)>(xn1103);
      tensor[3] probe_l_161196#1 = λ(INT0,FEM(mesh_t)1,T2[3],T3[4 3],T4[3 4],T5[3])<Σ(i2=0..3)<((T3_{i2,i0} * T4_{'1',i2}))>(i2=0..3)>_{3} (cellItter1109,mesh10FE,xn1103,dofs11A8,basisResult11A9,xn1103);
      tensor[4,3] dofs11AA#1 = femDofs11A4;
      tensor[3,4] basisResult11AB#1 = EvaluateBasis<BasisArray(3,4)>(xn1103);
      tensor[3] probe_l_171197#1 = λ(INT0,FEM(mesh_t)1,T2[3],T3[4 3],T4[3 4],T5[3])<Σ(i2=0..3)<((T3_{i2,i0} * T4_{'2',i2}))>(i2=0..3)>_{3} (cellItter1109,mesh10FE,xn1103,dofs11AA,basisResult11AB,xn1103);
      tensor[3,3] op1_e3_l_181198#1 = λ(T0[3])<Σ(i2=0..2)<((ϵ_{ii0,ii1,ii2} * T0_{i2}))>(i2=0..2)>_{3 3} (probe_l_171197);
      tensor[3] op1_e3_l_191199#1 = λ(T0[3],T1[3 3])<Σ(i1=0..2)<((T0_{i1} * T1_{i0,i1}))>(i1=0..2)>_{3} (probe_l_161196,op1_e3_l_181198);
      real op1_e3_l_20119A#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (probe_l_151195,op1_e3_l_191199);
      tensor[3,3] op1_e3_l_21119B#1 = λ(T0[3 3 3])<Σ(i2=0..2)(i3=0..2)<((ϵ_{ii2,ii3,ii0} * T0_{i2,i1,i3}))>(i2=0..2)(i3=0..2)>_{3 3} (op1_e3_l_141194);
      real op1_e3_l_22119C#1 = λ(T0[])<(2 * T0)> (op1_e3_l_20119A);
      tensor[4,3] dofs11AC#1 = femDofs11A4;
      tensor[4] basisResult11AD#1 = EvaluateBasis<BasisArray(4)>(xn1112);
      tensor[3] probe_l_23119D#1 = λ(T0[3],INT1,FEM(mesh_t)2,T3[4 3],T4[4],T5[3])<Σ(i1=0..3)<((T3_{i1,i0} * T4_{i1}))>(i1=0..3)>_{3} (xn1112,cellItter1109,mesh10FE,dofs11AC,basisResult11AD,xn1112);
      tensor[3,3] op1_e3_l_24119E#1 = λ(T0[3 3],T1[])<(T0_{i0,i1}) / ( T1)>_{3 3} (op1_e3_l_21119B,op1_e3_l_22119C);
      tensor[3] op1_e3_l_25119F#1 = λ(T0[3],T1[3])<(T1_{i0}) - (T0_{i0})>_{3} (pos10FF,probe_l_23119D);
      tensor[3] op1_e3_l_2611A0#1 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (op1_e3_l_24119E,op1_e3_l_25119F);
      tensor[3] op1_e3_l_2711A1#1 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (xn1112,op1_e3_l_2611A0);
      real _t1191#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (_t118F,op1_e3_l_2711A1);
      bool _t11CB#1 = GT<real>(_t118D,_t1191);
      tensor[3] _t11CD#1 = <tensor[3]>[_t118B,_t118B,_t118B];
      int[4] femIndicies11E1#1 = ExtractFemItem2<int,int[4],ExtractIndices(Mesh)>(mesh10FE,cellItter1109);
      tensor[4,3] femDofs11E2#5 = ExtractFemItem2<int[4],tensor[4,3],ExtractDofsSeq(Mesh)>(mesh10FE,femIndicies11E1);
      tensor[4,3] dofs11E0#1 = femDofs11E2;
      tensor[3,4] basisResult11E3#1 = EvaluateBasis<BasisArray(3,4)>(xn1103);
      tensor[3,3] probe_l_1111D0#2 = λ(INT0,FEM(mesh_t)1,T2[3],T3[4 3],T4[3 4],T5[3])<Σ(i3=0..3)<((T3_{i3,i0} * T4_{i1,i3}))>(i3=0..3)>_{3 3} (cellItter1109,mesh10FE,xn1103,dofs11E0,basisResult11E3,xn1103);
      tensor[3,3,3] op1_e3_l_1311D1#1 = λ(T0[3 3])<Σ(i3=0..2)<((ϵ_{ii0,ii3,ii1} * T0_{i3,i2}))>(i3=0..2)>_{3 3 3} (probe_l_1111D0);
      tensor[3,3,3] op1_e3_l_1411D2#1 = λ(T0[3 3],T1[3 3 3])<Σ(i3=0..2)<((T0_{i3,i0} * T1_{i3,i1,i2}))>(i3=0..2)>_{3 3 3} (probe_l_1111D0,op1_e3_l_1311D1);
      tensor[4,3] dofs11E4#1 = femDofs11E2;
      tensor[3,4] basisResult11E5#1 = EvaluateBasis<BasisArray(3,4)>(xn1103);
      tensor[3] probe_l_1511D3#1 = λ(INT0,FEM(mesh_t)1,T2[3],T3[4 3],T4[3 4],T5[3])<Σ(i2=0..3)<((T3_{i2,i0} * T4_{'0',i2}))>(i2=0..3)>_{3} (cellItter1109,mesh10FE,xn1103,dofs11E4,basisResult11E5,xn1103);
      tensor[4,3] dofs11E6#1 = femDofs11E2;
      tensor[3,4] basisResult11E7#1 = EvaluateBasis<BasisArray(3,4)>(xn1103);
      tensor[3] probe_l_1611D4#1 = λ(INT0,FEM(mesh_t)1,T2[3],T3[4 3],T4[3 4],T5[3])<Σ(i2=0..3)<((T3_{i2,i0} * T4_{'1',i2}))>(i2=0..3)>_{3} (cellItter1109,mesh10FE,xn1103,dofs11E6,basisResult11E7,xn1103);
      tensor[4,3] dofs11E8#1 = femDofs11E2;
      tensor[3,4] basisResult11E9#1 = EvaluateBasis<BasisArray(3,4)>(xn1103);
      tensor[3] probe_l_1711D5#1 = λ(INT0,FEM(mesh_t)1,T2[3],T3[4 3],T4[3 4],T5[3])<Σ(i2=0..3)<((T3_{i2,i0} * T4_{'2',i2}))>(i2=0..3)>_{3} (cellItter1109,mesh10FE,xn1103,dofs11E8,basisResult11E9,xn1103);
      tensor[3,3] op1_e3_l_1811D6#1 = λ(T0[3])<Σ(i2=0..2)<((ϵ_{ii0,ii1,ii2} * T0_{i2}))>(i2=0..2)>_{3 3} (probe_l_1711D5);
      tensor[3] op1_e3_l_1911D7#1 = λ(T0[3],T1[3 3])<Σ(i1=0..2)<((T0_{i1} * T1_{i0,i1}))>(i1=0..2)>_{3} (probe_l_1611D4,op1_e3_l_1811D6);
      real op1_e3_l_2011D8#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (probe_l_1511D3,op1_e3_l_1911D7);
      tensor[3,3] op1_e3_l_2111D9#1 = λ(T0[3 3 3])<Σ(i2=0..2)(i3=0..2)<((ϵ_{ii2,ii3,ii0} * T0_{i2,i1,i3}))>(i2=0..2)(i3=0..2)>_{3 3} (op1_e3_l_1411D2);
      real op1_e3_l_2211DA#1 = λ(T0[])<(2 * T0)> (op1_e3_l_2011D8);
      tensor[4,3] dofs11EA#1 = femDofs11E2;
      tensor[4] basisResult11EB#1 = EvaluateBasis<BasisArray(4)>(xn1112);
      tensor[3] probe_l_2311DB#1 = λ(T0[3],INT1,FEM(mesh_t)2,T3[4 3],T4[4],T5[3])<Σ(i1=0..3)<((T3_{i1,i0} * T4_{i1}))>(i1=0..3)>_{3} (xn1112,cellItter1109,mesh10FE,dofs11EA,basisResult11EB,xn1112);
      tensor[3,3] op1_e3_l_2411DC#1 = λ(T0[3 3],T1[])<(T0_{i0,i1}) / ( T1)>_{3 3} (op1_e3_l_2111D9,op1_e3_l_2211DA);
      tensor[3] op1_e3_l_2511DD#1 = λ(T0[3],T1[3])<(T1_{i0}) - (T0_{i0})>_{3} (pos10FF,probe_l_2311DB);
      tensor[3] op1_e3_l_2611DE#1 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (op1_e3_l_2411DC,op1_e3_l_2511DD);
      tensor[3] op1_e3_l_2711DF#1 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (xn1112,op1_e3_l_2611DE);
      tensor[3] _t11CF#3 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (_t11CD,op1_e3_l_2711DF);
      real _t1209#1 = TensorIndex<tensor[3],[0]>(_t11CF);
      real _t120B#3 = -0.e0;
      bool _t120D#1 = GT<real>(_t1209,_t120B);
      real _t120F#1 = TensorIndex<tensor[3],[1]>(_t11CF);
      bool _t1211#1 = GT<real>(_t120F,_t120B);
      real _t1213#1 = TensorIndex<tensor[3],[2]>(_t11CF);
      bool _t1215#1 = GT<real>(_t1213,_t120B);
      bool _t1217#1 = BAnd(_t1211,_t1215);
      bool _t1219#1 = BAnd(_t120D,_t1217);
      bool _t121B#1 = BAnd(_t11CB,_t1219);
      if _t121B then goto ASSIGN121F else goto JOIN1221
    ASSIGN121F:  preds = [COND121D]
      femData:MeshPos _t121E#1 = ExtractFemItemN<[femData:Mesh,int,tensor[3],tensor[3]],femData:MeshPos,AllBuild(MeshPos),0000,"",[],int>(mesh10FE,cellItter1109,xn1111,pos10FF);
      return _t121E
      goto JOIN1221
    JOIN1221:  preds = [*RETURN(_t121E)1220,COND121D]
      goto JOIN1222
    JOIN1222:  preds = [JOIN1221,COND1188]
      goto FOREACH1110
    NEXT1225:  preds = [FOREACH1110]
      goto FOREACH110A
    ASSIGN1227:  preds = [FOREACH110A]
      string _t1226#1 = "Bad end 2";
      string _t1228#1 = "\n";
      Print<[string,string]>(_t1226,_t1228);
      femData:MeshPos _t122B#1 = ExtractFemItemN<[femData:Mesh],femData:MeshPos,InvalidBuild(MeshPos),0000,"",[],int>(mesh10FE);
      return _t122B
}
## input initialization
  ENTRY109E:  preds = []
    return
## global-variable initialization
  ENTRY10A0:  preds = []
    femData:Mesh cube10A1#3 = globals.cube1097;
    femData:Space 0space0342_intermedateGlobal10A3#1 = globals.0space0342_intermedateGlobal1098;
    femData:FemFunc 0data0344_intermedateGlobal10A5#1 = globals.0data0344_intermedateGlobal1099;
    int _t10A7#1 = 0;
    int _t10A9#1 = 1;
    int _t10AB#1 = ExtractFemItem<int,NumCell(Mesh)>(cube10A1);
    int _t10AD#1 = ISub(_t10AB,_t10A9);
    int[] _t10AF#1 = Range(_t10A7,_t10AD);
    femData:MeshCell[] _t10B1#1 = <femData:MeshCell[]>{};
  FOREACH10B4:  preds = [ASSIGN10B2,NEXT10BA]
    foreach (_t10B3 in _t10AF) on exit goto GASSIGN10BB
      femData:MeshCell[] _t10B8#2 = phi(_t10B1,_t10B7)
    femData:MeshCell _t10B5#1 = LoadFem<femData:MeshCell>(cube10A1,_t10B3);
    femData:MeshCell[] _t10B7#1 = Append<femData:MeshCell>(_t10B8,_t10B5);
    goto FOREACH10B4
  GASSIGN10BB:  preds = [FOREACH10B4]
    globals.0cell_cube109A = _t10B8;
    femData:Space space10BC#1 = LoadFem<femData:Space>(0space0342_intermedateGlobal10A3,cube10A1);
    femData:FemFunc data10BE#2 = LoadFem<femData:FemFunc>(0data0344_intermedateGlobal10A5,space10BC);
    femData:Space _t10C0#2 = ExtractFem<femData:Space,femData:FemFunc>(data10BE);
    femData:Mesh _t10C2#1 = ExtractFem<femData:Mesh,femData:Space>(_t10C0);
    globals._t109B = _t10C2;
    globals._tX109C = _t10C0;
    globals.data109D = data10BE;
    return
## strand
  strand gg (tensor[3] i10C8#1)
    state:
      output tensor[3] target;
      output tensor[3] translated;
      output bool valid;
      output femData:MeshCell c;
      output real result;
      output tensor[3] gradResult;
      output tensor[3] gradResultp;
    state init
      ENTRY10D0:  preds = []
        femData:MeshCell[] 0cell_cube10D1#1 = globals.0cell_cube109A;
        real _nan10D3#4 = nan;
        tensor[3] translated10D5#3 = <tensor[3]>[_nan10D3,_nan10D3,_nan10D3];
        bool valid10D7#1 = false;
        int _t10D9#1 = 0;
        femData:MeshCell c10DB#1 = Subscript<femData:MeshCell[]>(0cell_cube10D1,_t10D9);
        self.target = i10C8;
        self.translated = translated10D5;
        self.valid = valid10D7;
        self.c = c10DB;
        self.result = _nan10D3;
        self.gradResult = translated10D5;
        self.gradResultp = translated10D5;
        return
    end state init
    method update
        ENTRY10E5:  preds = []
          femData:Mesh _t10E6#12 = globals._t109B;
          femData:Space _t10E8#4 = globals._tX109C;
          femData:FemFunc data10EA#4 = globals.data109D;
          femData:Mesh cube10EC#1 = globals.cube1097;
          tensor[3] target10EE#10 = self.target;
          tensor[3] translated10F0#1 = self.translated;
          femData:MeshCell c10F2#1 = self.c;
          real result10F4#1 = self.result;
          tensor[3] gradResult10F6#1 = self.gradResult;
          string _t10F8#1 = "Running on ";
          string _t10FA#1 = "\n";
          Print<[string,tensor[3],string]>(_t10F8,target10EE,_t10FA);
          femData:MeshPos p122E#4 = findPos10FD (cube10EC,target10EE);
          bool valid1230#2 = ExtractFemItem<bool,Valid(MeshPos)>(p122E);
          if valid1230 then goto ASSIGN1234 else goto ASSIGN12A7
        ASSIGN1234:  preds = [COND1232]
          femData:Mesh _t1233#1 = ExtractFem<femData:Mesh,femData:MeshPos>(p122E);
          int _t1235#1 = ExtractFemItem<int,CellIndex(MeshPos)>(p122E);
          femData:MeshCell c1237#1 = LoadFem<femData:MeshCell>(_t1233,_t1235);
          tensor[3] translated1239#1 = ExtractFemItem<tensor[3],RefPos(MeshPos)>(p122E);
          femData:MeshPos callFindPos123E#2 = findPos10FD (_t10E6,target10EE);
          int intPos123F#0 = ExtractFemItem<int,CellIndex(Mesh)>(callFindPos123E);
          tensor[3] refPos1240#0 = ExtractFemItem<tensor[3],RefPos(Mesh)>(callFindPos123E);
          tensor[3] Inner123C#2 = target10EE;
          femData:MeshPos callFindPos1241#2 = findPos10FD (_t10E6,Inner123C);
          int intPos1242#1 = ExtractFemItem<int,CellIndex(Mesh)>(callFindPos1241);
          tensor[3] refPos1243#2 = ExtractFemItem<tensor[3],RefPos(Mesh)>(callFindPos1241);
          int[35] femIndicies1245#1 = ExtractFemItem2<int,int[35],ExtractIndices(Space)>(_t10E8,intPos1242);
          tensor[35] femDofs1246#1 = ExtractFemItem2<int[35],tensor[35],ExtractDofsSeq(FemFunc)>(data10EA,femIndicies1245);
          tensor[35] dofs1244#1 = femDofs1246;
          tensor[35] basisResult1247#1 = EvaluateBasis<BasisArray(35)>(refPos1243);
          real compositionl123D#1 = λ(FEM(mesh_t)0,FEM(fns_t)1,FEM(func_t)2,T3[3],T4[35],T5[35],T6[3])<Σ(i0=0..34)<((T4_{i0} * T5_{i0}))>(i0=0..34)> (_t10E6,_t10E8,data10EA,Inner123C,dofs1244,basisResult1247,refPos1243);
          real result123B#1 = λ(T0[])<T0> (compositionl123D);
          femData:MeshPos callFindPos1264#2 = findPos10FD (_t10E6,target10EE);
          int intPos1265#1 = ExtractFemItem<int,CellIndex(Mesh)>(callFindPos1264);
          tensor[3] refPos1266#8 = ExtractFemItem<tensor[3],RefPos(Mesh)>(callFindPos1264);
          tensor[3] Inner1256#2 = target10EE;
          femData:MeshPos callFindPos1267#2 = findPos10FD (_t10E6,Inner1256);
          int intPos1268#1 = ExtractFemItem<int,CellIndex(Mesh)>(callFindPos1267);
          tensor[3] refPos1269#2 = ExtractFemItem<tensor[3],RefPos(Mesh)>(callFindPos1267);
          int[35] femIndicies126B#1 = ExtractFemItem2<int,int[35],ExtractIndices(Space)>(_t10E8,intPos1268);
          tensor[35] femDofs126C#1 = ExtractFemItem2<int[35],tensor[35],ExtractDofsSeq(FemFunc)>(data10EA,femIndicies126B);
          tensor[35] dofs126A#1 = femDofs126C;
          tensor[3,35] basisResult126D#1 = EvaluateBasis<BasisArray(3,35)>(refPos1269);
          tensor[3] compositionl1257#1 = λ(FEM(mesh_t)0,FEM(fns_t)1,FEM(func_t)2,T3[3],T4[35],T5[3 35],T6[3])<Σ(i2=0..34)<((T4_{i2} * T5_{i0,i2}))>(i2=0..34)>_{3} (_t10E6,_t10E8,data10EA,Inner1256,dofs126A,basisResult126D,refPos1269);
          int[4] femIndicies126F#1 = ExtractFemItem2<int,int[4],ExtractIndices(Mesh)>(_t10E6,intPos1265);
          tensor[4,3] femDofs1270#4 = ExtractFemItem2<int[4],tensor[4,3],ExtractDofsSeq(Mesh)>(_t10E6,femIndicies126F);
          tensor[4,3] dofs126E#1 = femDofs1270;
          tensor[3,4] basisResult1271#1 = EvaluateBasis<BasisArray(3,4)>(refPos1266);
          tensor[3,3] probe_l_81258#2 = λ(FEM(mesh_t)0,T1[3],T2[4 3],T3[3 4],T4[3])<Σ(i3=0..3)<((T2_{i3,i0} * T3_{i1,i3}))>(i3=0..3)>_{3 3} (_t10E6,target10EE,dofs126E,basisResult1271,refPos1266);
          tensor[3,3,3] op1_e3_l_101259#1 = λ(T0[3 3])<Σ(i3=0..2)<((ϵ_{ii0,ii3,ii1} * T0_{i3,i2}))>(i3=0..2)>_{3 3 3} (probe_l_81258);
          tensor[3,3,3] op1_e3_l_11125A#1 = λ(T0[3 3],T1[3 3 3])<Σ(i3=0..2)<((T0_{i3,i0} * T1_{i3,i1,i2}))>(i3=0..2)>_{3 3 3} (probe_l_81258,op1_e3_l_101259);
          tensor[4,3] dofs1272#1 = femDofs1270;
          tensor[3,4] basisResult1273#1 = EvaluateBasis<BasisArray(3,4)>(refPos1266);
          tensor[3] probe_l_12125B#1 = λ(FEM(mesh_t)0,T1[3],T2[4 3],T3[3 4],T4[3])<Σ(i2=0..3)<((T2_{i2,i0} * T3_{'0',i2}))>(i2=0..3)>_{3} (_t10E6,target10EE,dofs1272,basisResult1273,refPos1266);
          tensor[4,3] dofs1274#1 = femDofs1270;
          tensor[3,4] basisResult1275#1 = EvaluateBasis<BasisArray(3,4)>(refPos1266);
          tensor[3] probe_l_13125C#1 = λ(FEM(mesh_t)0,T1[3],T2[4 3],T3[3 4],T4[3])<Σ(i2=0..3)<((T2_{i2,i0} * T3_{'1',i2}))>(i2=0..3)>_{3} (_t10E6,target10EE,dofs1274,basisResult1275,refPos1266);
          tensor[4,3] dofs1276#1 = femDofs1270;
          tensor[3,4] basisResult1277#1 = EvaluateBasis<BasisArray(3,4)>(refPos1266);
          tensor[3] probe_l_14125D#1 = λ(FEM(mesh_t)0,T1[3],T2[4 3],T3[3 4],T4[3])<Σ(i2=0..3)<((T2_{i2,i0} * T3_{'2',i2}))>(i2=0..3)>_{3} (_t10E6,target10EE,dofs1276,basisResult1277,refPos1266);
          tensor[3,3] op1_e3_l_15125E#1 = λ(T0[3])<Σ(i2=0..2)<((ϵ_{ii0,ii1,ii2} * T0_{i2}))>(i2=0..2)>_{3 3} (probe_l_14125D);
          tensor[3] op1_e3_l_16125F#1 = λ(T0[3],T1[3 3])<Σ(i1=0..2)<((T0_{i1} * T1_{i0,i1}))>(i1=0..2)>_{3} (probe_l_13125C,op1_e3_l_15125E);
          real op1_e3_l_171260#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (probe_l_12125B,op1_e3_l_16125F);
          tensor[3,3] op1_e3_l_181261#1 = λ(T0[3 3 3])<Σ(i2=0..2)(i3=0..2)<((ϵ_{ii2,ii3,ii0} * T0_{i2,i1,i3}))>(i2=0..2)(i3=0..2)>_{3 3} (op1_e3_l_11125A);
          real op1_e3_l_191262#1 = λ(T0[])<(2 * T0)> (op1_e3_l_171260);
          tensor[3,3] op1_e3_l_201263#1 = λ(T0[3 3],T1[])<(T0_{i0,i1}) / ( T1)>_{3 3} (op1_e3_l_181261,op1_e3_l_191262);
          tensor[3] gradResult1255#1 = λ(T0[3],T1[3 3])<Σ(i104=0..2)<((T0_{i104} * T1_{i104,i0}))>(i104=0..2)>_{3} (compositionl1257,op1_e3_l_201263);
          goto JOIN129F
        JOIN129F:  preds = [ASSIGN129A,MASSIGN12A8]
          tensor[3] gradResult129B#1 = phi(gradResult1255,gradResult10F6)
          real result129C#1 = phi(result123B,result10F4)
          femData:MeshCell c129D#1 = phi(c1237,c10F2)
          tensor[3] translated129E#1 = phi(translated1239,translated10F0)
          self.translated = translated129E;
          self.valid = valid1230;
          self.c = c129D;
          self.result = result129C;
          self.gradResult = gradResult129B;
          stabilize
        ASSIGN12A7:  preds = [COND1232]
          string _t12A6#1 = "Warning: Invalid!\n";
          Print<[string]>(_t12A6);
          goto JOIN129F
    end update
  end gg
## initial strand creation
  COLLECTION
    ENTRY12AA:  preds = []
      tensor[3][] points12AB#1 = globals.points1096;
    FOREACH12AE:  preds = [ASSIGN12AC,NEXT12B0]
      foreach (i12AD in points12AB) on exit goto RETURN12B1
      new gg(i12AD);
      goto FOREACH12AE
    RETURN12B1:  preds = [FOREACH12AE]
      return
#### end program ####
##### mid-ir: after value numbering ####
## properties
  GlobalInit HasInputs HasGlobals ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
## globals
  input points1096 (points) = <no-default>
  input cube1097 (cube) = <no-default>
  input 0space0342_intermedateGlobal1098 (space) = <no-default>
  input 0data0344_intermedateGlobal1099 (data) = <no-default>
  global femData:MeshCell[] 0cell_cube109A
  global femData:Mesh _t109B
  global femData:Space _tX109C
  global femData:FemFunc data109D
## functions
  function femData:MeshPos findPos10FD (femData:Mesh mesh10FE#11, tensor[3] pos10FF#4) {
    ENTRY1100:  preds = []
      real _t1101#3 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
      tensor[3] xn1103#10 = <tensor[3]>[_t1101,_t1101,_t1101];
      int newtonInt1105#1 = 0;
      int[] yayCells1107#1 = ExtractFemItem2<tensor[3],int[],NearbyCell(File=spat.in)(Mesh)>(mesh10FE,pos10FF);
    FOREACH110A:  preds = [ASSIGN1108,NEXT1225]
      foreach (cellItter1109 in yayCells1107) on exit goto ASSIGN1227
        tensor[3] xn1224#1 = phi(xn1103,xn1112)
      int _t110B#1 = 16;
      int[] _t110D#1 = Range(newtonInt1105,_t110B);
    FOREACH1110:  preds = [ASSIGN110E,NEXT1223]
      foreach (newtonItter110F in _t110D) on exit goto NEXT1225
        tensor[3] xn1112#7 = phi(xn1224,xn1111)
      int[4] femIndicies1123#1 = ExtractFemItem2<int,int[4],ExtractIndices(Mesh)>(mesh10FE,cellItter1109);
      tensor[4,3] femDofs1124#6 = ExtractFemItem2<int[4],tensor[4,3],ExtractDofsSeq(Mesh)>(mesh10FE,femIndicies1123);
      tensor[3,4] basisResult1125#4 = EvaluateBasis<BasisArray(3,4)>(xn1103);
      tensor[3,3] probe_l_101113#2 = λ(INT0,FEM(mesh_t)1,T2[3],T3[4 3],T4[3 4],T5[3])<Σ(i3=0..3)<((T3_{i3,i0} * T4_{i1,i3}))>(i3=0..3)>_{3 3} (cellItter1109,mesh10FE,xn1103,femDofs1124,basisResult1125,xn1103);
      tensor[3,3,3] op1_e3_l_121114#1 = λ(T0[3 3])<Σ(i3=0..2)<((ϵ_{ii0,ii3,ii1} * T0_{i3,i2}))>(i3=0..2)>_{3 3 3} (probe_l_101113);
      tensor[3,3,3] op1_e3_l_131115#1 = λ(T0[3 3],T1[3 3 3])<Σ(i3=0..2)<((T0_{i3,i0} * T1_{i3,i1,i2}))>(i3=0..2)>_{3 3 3} (probe_l_101113,op1_e3_l_121114);
      tensor[3] probe_l_141116#1 = λ(INT0,FEM(mesh_t)1,T2[3],T3[4 3],T4[3 4],T5[3])<Σ(i2=0..3)<((T3_{i2,i0} * T4_{'0',i2}))>(i2=0..3)>_{3} (cellItter1109,mesh10FE,xn1103,femDofs1124,basisResult1125,xn1103);
      tensor[3] probe_l_151117#1 = λ(INT0,FEM(mesh_t)1,T2[3],T3[4 3],T4[3 4],T5[3])<Σ(i2=0..3)<((T3_{i2,i0} * T4_{'1',i2}))>(i2=0..3)>_{3} (cellItter1109,mesh10FE,xn1103,femDofs1124,basisResult1125,xn1103);
      tensor[3] probe_l_161118#1 = λ(INT0,FEM(mesh_t)1,T2[3],T3[4 3],T4[3 4],T5[3])<Σ(i2=0..3)<((T3_{i2,i0} * T4_{'2',i2}))>(i2=0..3)>_{3} (cellItter1109,mesh10FE,xn1103,femDofs1124,basisResult1125,xn1103);
      tensor[3,3] op1_e3_l_171119#1 = λ(T0[3])<Σ(i2=0..2)<((ϵ_{ii0,ii1,ii2} * T0_{i2}))>(i2=0..2)>_{3 3} (probe_l_161118);
      tensor[3] op1_e3_l_18111A#1 = λ(T0[3],T1[3 3])<Σ(i1=0..2)<((T0_{i1} * T1_{i0,i1}))>(i1=0..2)>_{3} (probe_l_151117,op1_e3_l_171119);
      real op1_e3_l_19111B#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (probe_l_141116,op1_e3_l_18111A);
      tensor[3,3] op1_e3_l_20111C#1 = λ(T0[3 3 3])<Σ(i2=0..2)(i3=0..2)<((ϵ_{ii2,ii3,ii0} * T0_{i2,i1,i3}))>(i2=0..2)(i3=0..2)>_{3 3} (op1_e3_l_131115);
      real op1_e3_l_21111D#1 = λ(T0[])<(2 * T0)> (op1_e3_l_19111B);
      tensor[4] basisResult112D#2 = EvaluateBasis<BasisArray(4)>(xn1112);
      tensor[3] probe_l_22111E#1 = λ(T0[3],INT1,FEM(mesh_t)2,T3[4 3],T4[4],T5[3])<Σ(i1=0..3)<((T3_{i1,i0} * T4_{i1}))>(i1=0..3)>_{3} (xn1112,cellItter1109,mesh10FE,femDofs1124,basisResult112D,xn1112);
      tensor[3,3] op1_e3_l_23111F#2 = λ(T0[3 3],T1[])<(T0_{i0,i1}) / ( T1)>_{3 3} (op1_e3_l_20111C,op1_e3_l_21111D);
      tensor[3] op1_e3_l_241120#1 = λ(T0[3],T1[3])<(T1_{i0}) - (T0_{i0})>_{3} (pos10FF,probe_l_22111E);
      tensor[3] op1_e3_l_251121#1 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (op1_e3_l_23111F,op1_e3_l_241120);
      tensor[3] xn1111#4 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (xn1112,op1_e3_l_251121);
      real _t114A#2 = 0.1e-7;
      real _t114C#1 = λ(T0[],T1[])<(T0 * T1)> (_t114A,_t114A);
      tensor[3] probe_l_30115A#1 = λ(INT0,FEM(mesh_t)1,T2[3],T3[4 3],T4[4],T5[3])<Σ(i1=0..3)<((T3_{i1,i0} * T4_{i1}))>(i1=0..3)>_{3} (cellItter1109,mesh10FE,xn1112,femDofs1124,basisResult112D,xn1112);
      tensor[3] op1_e3_l_32115C#1 = λ(T0[3],T1[3])<(T1_{i0}) - (T0_{i0})>_{3} (pos10FF,probe_l_30115A);
      tensor[3] op1_e3_l_48115D#2 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (op1_e3_l_23111F,op1_e3_l_32115C);
      real _t114E#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_48115D,op1_e3_l_48115D);
      bool _t1186#1 = GTE<real>(_t114C,_t114E);
      if _t1186 then goto ASSIGN118A else goto JOIN1222
    ASSIGN118A:  preds = [COND1188]
      real _t1189#4 = 0.1e1;
      real _t118B#4 = 0.1e-8;
      real _t118D#1 = λ(T0[],T1[])<(T0 + T1)> (_t1189,_t118B);
      tensor[3] _t118F#1 = <tensor[3]>[_t1189,_t1189,_t1189];
      real _t1191#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (_t118F,xn1111);
      bool _t11CB#1 = GT<real>(_t118D,_t1191);
      tensor[3] _t11CD#1 = <tensor[3]>[_t118B,_t118B,_t118B];
      tensor[3] _t11CF#3 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (_t11CD,xn1111);
      real _t1209#1 = TensorIndex<tensor[3],[0]>(_t11CF);
      real _t120B#3 = -0.e0;
      bool _t120D#1 = GT<real>(_t1209,_t120B);
      real _t120F#1 = TensorIndex<tensor[3],[1]>(_t11CF);
      bool _t1211#1 = GT<real>(_t120F,_t120B);
      real _t1213#1 = TensorIndex<tensor[3],[2]>(_t11CF);
      bool _t1215#1 = GT<real>(_t1213,_t120B);
      bool _t1217#1 = BAnd(_t1211,_t1215);
      bool _t1219#1 = BAnd(_t120D,_t1217);
      bool _t121B#1 = BAnd(_t11CB,_t1219);
      if _t121B then goto ASSIGN121F else goto JOIN1221
    ASSIGN121F:  preds = [COND121D]
      femData:MeshPos _t121E#1 = ExtractFemItemN<[femData:Mesh,int,tensor[3],tensor[3]],femData:MeshPos,AllBuild(MeshPos),0000,"",[],int>(mesh10FE,cellItter1109,xn1111,pos10FF);
      return _t121E
      goto JOIN1221
    JOIN1221:  preds = [*RETURN(_t121E)1220,COND121D]
      goto JOIN1222
    JOIN1222:  preds = [JOIN1221,COND1188]
      goto FOREACH1110
    NEXT1225:  preds = [FOREACH1110]
      goto FOREACH110A
    ASSIGN1227:  preds = [FOREACH110A]
      string _t1226#1 = "Bad end 2";
      string _t1228#1 = "\n";
      Print<[string,string]>(_t1226,_t1228);
      femData:MeshPos _t122B#1 = ExtractFemItemN<[femData:Mesh],femData:MeshPos,InvalidBuild(MeshPos),0000,"",[],int>(mesh10FE);
      return _t122B
}
## input initialization
  ENTRY109E:  preds = []
    return
## global-variable initialization
  ENTRY10A0:  preds = []
    femData:Mesh cube10A1#3 = globals.cube1097;
    femData:Space 0space0342_intermedateGlobal10A3#1 = globals.0space0342_intermedateGlobal1098;
    femData:FemFunc 0data0344_intermedateGlobal10A5#1 = globals.0data0344_intermedateGlobal1099;
    int _t10A7#1 = 0;
    int _t10A9#1 = 1;
    int _t10AB#1 = ExtractFemItem<int,NumCell(Mesh)>(cube10A1);
    int _t10AD#1 = ISub(_t10AB,_t10A9);
    int[] _t10AF#1 = Range(_t10A7,_t10AD);
    femData:MeshCell[] _t10B1#1 = <femData:MeshCell[]>{};
  FOREACH10B4:  preds = [ASSIGN10B2,NEXT10BA]
    foreach (_t10B3 in _t10AF) on exit goto GASSIGN10BB
      femData:MeshCell[] _t10B8#2 = phi(_t10B1,_t10B7)
    femData:MeshCell _t10B5#1 = LoadFem<femData:MeshCell>(cube10A1,_t10B3);
    femData:MeshCell[] _t10B7#1 = Append<femData:MeshCell>(_t10B8,_t10B5);
    goto FOREACH10B4
  GASSIGN10BB:  preds = [FOREACH10B4]
    globals.0cell_cube109A = _t10B8;
    femData:Space space10BC#1 = LoadFem<femData:Space>(0space0342_intermedateGlobal10A3,cube10A1);
    femData:FemFunc data10BE#2 = LoadFem<femData:FemFunc>(0data0344_intermedateGlobal10A5,space10BC);
    femData:Space _t10C0#2 = ExtractFem<femData:Space,femData:FemFunc>(data10BE);
    femData:Mesh _t10C2#1 = ExtractFem<femData:Mesh,femData:Space>(_t10C0);
    globals._t109B = _t10C2;
    globals._tX109C = _t10C0;
    globals.data109D = data10BE;
    return
## strand
  strand gg (tensor[3] i10C8#1)
    state:
      output tensor[3] target;
      output tensor[3] translated;
      output bool valid;
      output femData:MeshCell c;
      output real result;
      output tensor[3] gradResult;
      output tensor[3] gradResultp;
    state init
      ENTRY10D0:  preds = []
        femData:MeshCell[] 0cell_cube10D1#1 = globals.0cell_cube109A;
        real _nan10D3#4 = nan;
        tensor[3] translated10D5#3 = <tensor[3]>[_nan10D3,_nan10D3,_nan10D3];
        bool valid10D7#1 = false;
        int _t10D9#1 = 0;
        femData:MeshCell c10DB#1 = Subscript<femData:MeshCell[]>(0cell_cube10D1,_t10D9);
        self.target = i10C8;
        self.translated = translated10D5;
        self.valid = valid10D7;
        self.c = c10DB;
        self.result = _nan10D3;
        self.gradResult = translated10D5;
        self.gradResultp = translated10D5;
        return
    end state init
    method update
        ENTRY10E5:  preds = []
          femData:Mesh _t10E6#9 = globals._t109B;
          femData:Space _t10E8#3 = globals._tX109C;
          femData:FemFunc data10EA#3 = globals.data109D;
          femData:Mesh cube10EC#1 = globals.cube1097;
          tensor[3] target10EE#9 = self.target;
          tensor[3] translated10F0#1 = self.translated;
          femData:MeshCell c10F2#1 = self.c;
          real result10F4#1 = self.result;
          tensor[3] gradResult10F6#1 = self.gradResult;
          string _t10F8#1 = "Running on ";
          string _t10FA#1 = "\n";
          Print<[string,tensor[3],string]>(_t10F8,target10EE,_t10FA);
          femData:MeshPos p122E#4 = findPos10FD (cube10EC,target10EE);
          bool valid1230#2 = ExtractFemItem<bool,Valid(MeshPos)>(p122E);
          if valid1230 then goto ASSIGN1234 else goto ASSIGN12A7
        ASSIGN1234:  preds = [COND1232]
          femData:Mesh _t1233#1 = ExtractFem<femData:Mesh,femData:MeshPos>(p122E);
          int _t1235#1 = ExtractFemItem<int,CellIndex(MeshPos)>(p122E);
          femData:MeshCell c1237#1 = LoadFem<femData:MeshCell>(_t1233,_t1235);
          tensor[3] translated1239#1 = ExtractFemItem<tensor[3],RefPos(MeshPos)>(p122E);
          femData:MeshPos callFindPos123E#2 = findPos10FD (_t10E6,target10EE);
          int intPos123F#2 = ExtractFemItem<int,CellIndex(Mesh)>(callFindPos123E);
          tensor[3] refPos1240#9 = ExtractFemItem<tensor[3],RefPos(Mesh)>(callFindPos123E);
          int[35] femIndicies1245#1 = ExtractFemItem2<int,int[35],ExtractIndices(Space)>(_t10E8,intPos123F);
          tensor[35] femDofs1246#2 = ExtractFemItem2<int[35],tensor[35],ExtractDofsSeq(FemFunc)>(data10EA,femIndicies1245);
          tensor[35] basisResult1247#1 = EvaluateBasis<BasisArray(35)>(refPos1240);
          real compositionl123D#1 = λ(FEM(mesh_t)0,FEM(fns_t)1,FEM(func_t)2,T3[3],T4[35],T5[35],T6[3])<Σ(i0=0..34)<((T4_{i0} * T5_{i0}))>(i0=0..34)> (_t10E6,_t10E8,data10EA,target10EE,femDofs1246,basisResult1247,refPos1240);
          real result123B#1 = λ(T0[])<T0> (compositionl123D);
          tensor[3,35] basisResult126D#1 = EvaluateBasis<BasisArray(3,35)>(refPos1240);
          tensor[3] compositionl1257#1 = λ(FEM(mesh_t)0,FEM(fns_t)1,FEM(func_t)2,T3[3],T4[35],T5[3 35],T6[3])<Σ(i2=0..34)<((T4_{i2} * T5_{i0,i2}))>(i2=0..34)>_{3} (_t10E6,_t10E8,data10EA,target10EE,femDofs1246,basisResult126D,refPos1240);
          int[4] femIndicies126F#1 = ExtractFemItem2<int,int[4],ExtractIndices(Mesh)>(_t10E6,intPos123F);
          tensor[4,3] femDofs1270#4 = ExtractFemItem2<int[4],tensor[4,3],ExtractDofsSeq(Mesh)>(_t10E6,femIndicies126F);
          tensor[3,4] basisResult1271#4 = EvaluateBasis<BasisArray(3,4)>(refPos1240);
          tensor[3,3] probe_l_81258#2 = λ(FEM(mesh_t)0,T1[3],T2[4 3],T3[3 4],T4[3])<Σ(i3=0..3)<((T2_{i3,i0} * T3_{i1,i3}))>(i3=0..3)>_{3 3} (_t10E6,target10EE,femDofs1270,basisResult1271,refPos1240);
          tensor[3,3,3] op1_e3_l_101259#1 = λ(T0[3 3])<Σ(i3=0..2)<((ϵ_{ii0,ii3,ii1} * T0_{i3,i2}))>(i3=0..2)>_{3 3 3} (probe_l_81258);
          tensor[3,3,3] op1_e3_l_11125A#1 = λ(T0[3 3],T1[3 3 3])<Σ(i3=0..2)<((T0_{i3,i0} * T1_{i3,i1,i2}))>(i3=0..2)>_{3 3 3} (probe_l_81258,op1_e3_l_101259);
          tensor[3] probe_l_12125B#1 = λ(FEM(mesh_t)0,T1[3],T2[4 3],T3[3 4],T4[3])<Σ(i2=0..3)<((T2_{i2,i0} * T3_{'0',i2}))>(i2=0..3)>_{3} (_t10E6,target10EE,femDofs1270,basisResult1271,refPos1240);
          tensor[3] probe_l_13125C#1 = λ(FEM(mesh_t)0,T1[3],T2[4 3],T3[3 4],T4[3])<Σ(i2=0..3)<((T2_{i2,i0} * T3_{'1',i2}))>(i2=0..3)>_{3} (_t10E6,target10EE,femDofs1270,basisResult1271,refPos1240);
          tensor[3] probe_l_14125D#1 = λ(FEM(mesh_t)0,T1[3],T2[4 3],T3[3 4],T4[3])<Σ(i2=0..3)<((T2_{i2,i0} * T3_{'2',i2}))>(i2=0..3)>_{3} (_t10E6,target10EE,femDofs1270,basisResult1271,refPos1240);
          tensor[3,3] op1_e3_l_15125E#1 = λ(T0[3])<Σ(i2=0..2)<((ϵ_{ii0,ii1,ii2} * T0_{i2}))>(i2=0..2)>_{3 3} (probe_l_14125D);
          tensor[3] op1_e3_l_16125F#1 = λ(T0[3],T1[3 3])<Σ(i1=0..2)<((T0_{i1} * T1_{i0,i1}))>(i1=0..2)>_{3} (probe_l_13125C,op1_e3_l_15125E);
          real op1_e3_l_171260#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (probe_l_12125B,op1_e3_l_16125F);
          tensor[3,3] op1_e3_l_181261#1 = λ(T0[3 3 3])<Σ(i2=0..2)(i3=0..2)<((ϵ_{ii2,ii3,ii0} * T0_{i2,i1,i3}))>(i2=0..2)(i3=0..2)>_{3 3} (op1_e3_l_11125A);
          real op1_e3_l_191262#1 = λ(T0[])<(2 * T0)> (op1_e3_l_171260);
          tensor[3,3] op1_e3_l_201263#1 = λ(T0[3 3],T1[])<(T0_{i0,i1}) / ( T1)>_{3 3} (op1_e3_l_181261,op1_e3_l_191262);
          tensor[3] gradResult1255#1 = λ(T0[3],T1[3 3])<Σ(i104=0..2)<((T0_{i104} * T1_{i104,i0}))>(i104=0..2)>_{3} (compositionl1257,op1_e3_l_201263);
          goto JOIN129F
        JOIN129F:  preds = [ASSIGN129A,MASSIGN12A8]
          tensor[3] gradResult129B#1 = phi(gradResult1255,gradResult10F6)
          real result129C#1 = phi(result123B,result10F4)
          femData:MeshCell c129D#1 = phi(c1237,c10F2)
          tensor[3] translated129E#1 = phi(translated1239,translated10F0)
          self.translated = translated129E;
          self.valid = valid1230;
          self.c = c129D;
          self.result = result129C;
          self.gradResult = gradResult129B;
          stabilize
        ASSIGN12A7:  preds = [COND1232]
          string _t12A6#1 = "Warning: Invalid!\n";
          Print<[string]>(_t12A6);
          goto JOIN129F
    end update
  end gg
## initial strand creation
  COLLECTION
    ENTRY12AA:  preds = []
      tensor[3][] points12AB#1 = globals.points1096;
    FOREACH12AE:  preds = [ASSIGN12AC,NEXT12B0]
      foreach (i12AD in points12AB) on exit goto RETURN12B1
      new gg(i12AD);
      goto FOREACH12AE
    RETURN12B1:  preds = [FOREACH12AE]
      return
#### end program ####
##### mid-ir: after contraction ####
## properties
  GlobalInit HasInputs HasGlobals ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
## globals
  input points1096 (points) = <no-default>
  input cube1097 (cube) = <no-default>
  input 0space0342_intermedateGlobal1098 (space) = <no-default>
  input 0data0344_intermedateGlobal1099 (data) = <no-default>
  global femData:MeshCell[] 0cell_cube109A
  global femData:Mesh _t109B
  global femData:Space _tX109C
  global femData:FemFunc data109D
## functions
  function femData:MeshPos findPos10FD (femData:Mesh mesh10FE#11, tensor[3] pos10FF#4) {
    ENTRY1100:  preds = []
      real _t1101#3 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
      tensor[3] xn1103#10 = <tensor[3]>[_t1101,_t1101,_t1101];
      int newtonInt1105#1 = 0;
      int[] yayCells1107#1 = ExtractFemItem2<tensor[3],int[],NearbyCell(File=spat.in)(Mesh)>(mesh10FE,pos10FF);
    FOREACH110A:  preds = [ASSIGN1108,NEXT1225]
      foreach (cellItter1109 in yayCells1107) on exit goto ASSIGN1227
        tensor[3] xn1224#1 = phi(xn1103,xn1112)
      int _t110B#1 = 16;
      int[] _t110D#1 = Range(newtonInt1105,_t110B);
    FOREACH1110:  preds = [ASSIGN110E,NEXT1223]
      foreach (newtonItter110F in _t110D) on exit goto NEXT1225
        tensor[3] xn1112#7 = phi(xn1224,xn1111)
      int[4] femIndicies1123#1 = ExtractFemItem2<int,int[4],ExtractIndices(Mesh)>(mesh10FE,cellItter1109);
      tensor[4,3] femDofs1124#6 = ExtractFemItem2<int[4],tensor[4,3],ExtractDofsSeq(Mesh)>(mesh10FE,femIndicies1123);
      tensor[3,4] basisResult1125#4 = EvaluateBasis<BasisArray(3,4)>(xn1103);
      tensor[3,3] probe_l_101113#2 = λ(INT0,FEM(mesh_t)1,T2[3],T3[4 3],T4[3 4],T5[3])<Σ(i3=0..3)<((T3_{i3,i0} * T4_{i1,i3}))>(i3=0..3)>_{3 3} (cellItter1109,mesh10FE,xn1103,femDofs1124,basisResult1125,xn1103);
      tensor[3,3,3] op1_e3_l_121114#1 = λ(T0[3 3])<Σ(i3=0..2)<((ϵ_{ii0,ii3,ii1} * T0_{i3,i2}))>(i3=0..2)>_{3 3 3} (probe_l_101113);
      tensor[3,3,3] op1_e3_l_131115#1 = λ(T0[3 3],T1[3 3 3])<Σ(i3=0..2)<((T0_{i3,i0} * T1_{i3,i1,i2}))>(i3=0..2)>_{3 3 3} (probe_l_101113,op1_e3_l_121114);
      tensor[3] probe_l_141116#1 = λ(INT0,FEM(mesh_t)1,T2[3],T3[4 3],T4[3 4],T5[3])<Σ(i2=0..3)<((T3_{i2,i0} * T4_{'0',i2}))>(i2=0..3)>_{3} (cellItter1109,mesh10FE,xn1103,femDofs1124,basisResult1125,xn1103);
      tensor[3] probe_l_151117#1 = λ(INT0,FEM(mesh_t)1,T2[3],T3[4 3],T4[3 4],T5[3])<Σ(i2=0..3)<((T3_{i2,i0} * T4_{'1',i2}))>(i2=0..3)>_{3} (cellItter1109,mesh10FE,xn1103,femDofs1124,basisResult1125,xn1103);
      tensor[3] probe_l_161118#1 = λ(INT0,FEM(mesh_t)1,T2[3],T3[4 3],T4[3 4],T5[3])<Σ(i2=0..3)<((T3_{i2,i0} * T4_{'2',i2}))>(i2=0..3)>_{3} (cellItter1109,mesh10FE,xn1103,femDofs1124,basisResult1125,xn1103);
      tensor[3,3] op1_e3_l_171119#1 = λ(T0[3])<Σ(i2=0..2)<((ϵ_{ii0,ii1,ii2} * T0_{i2}))>(i2=0..2)>_{3 3} (probe_l_161118);
      tensor[3] op1_e3_l_18111A#1 = λ(T0[3],T1[3 3])<Σ(i1=0..2)<((T0_{i1} * T1_{i0,i1}))>(i1=0..2)>_{3} (probe_l_151117,op1_e3_l_171119);
      real op1_e3_l_19111B#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (probe_l_141116,op1_e3_l_18111A);
      tensor[3,3] op1_e3_l_20111C#1 = λ(T0[3 3 3])<Σ(i2=0..2)(i3=0..2)<((ϵ_{ii2,ii3,ii0} * T0_{i2,i1,i3}))>(i2=0..2)(i3=0..2)>_{3 3} (op1_e3_l_131115);
      real op1_e3_l_21111D#1 = λ(T0[])<(2 * T0)> (op1_e3_l_19111B);
      tensor[4] basisResult112D#2 = EvaluateBasis<BasisArray(4)>(xn1112);
      tensor[3] probe_l_22111E#1 = λ(T0[3],INT1,FEM(mesh_t)2,T3[4 3],T4[4],T5[3])<Σ(i1=0..3)<((T3_{i1,i0} * T4_{i1}))>(i1=0..3)>_{3} (xn1112,cellItter1109,mesh10FE,femDofs1124,basisResult112D,xn1112);
      tensor[3,3] op1_e3_l_23111F#2 = λ(T0[3 3],T1[])<(T0_{i0,i1}) / ( T1)>_{3 3} (op1_e3_l_20111C,op1_e3_l_21111D);
      tensor[3] op1_e3_l_241120#1 = λ(T0[3],T1[3])<(T1_{i0}) - (T0_{i0})>_{3} (pos10FF,probe_l_22111E);
      tensor[3] op1_e3_l_251121#1 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (op1_e3_l_23111F,op1_e3_l_241120);
      tensor[3] xn1111#4 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (xn1112,op1_e3_l_251121);
      real _t114A#2 = 0.1e-7;
      real _t114C#1 = λ(T0[],T1[])<(T0 * T1)> (_t114A,_t114A);
      tensor[3] probe_l_30115A#1 = λ(INT0,FEM(mesh_t)1,T2[3],T3[4 3],T4[4],T5[3])<Σ(i1=0..3)<((T3_{i1,i0} * T4_{i1}))>(i1=0..3)>_{3} (cellItter1109,mesh10FE,xn1112,femDofs1124,basisResult112D,xn1112);
      tensor[3] op1_e3_l_32115C#1 = λ(T0[3],T1[3])<(T1_{i0}) - (T0_{i0})>_{3} (pos10FF,probe_l_30115A);
      tensor[3] op1_e3_l_48115D#2 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (op1_e3_l_23111F,op1_e3_l_32115C);
      real _t114E#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_48115D,op1_e3_l_48115D);
      bool _t1186#1 = GTE<real>(_t114C,_t114E);
      if _t1186 then goto ASSIGN118A else goto JOIN1222
    ASSIGN118A:  preds = [COND1188]
      real _t1189#4 = 0.1e1;
      real _t118B#4 = 0.1e-8;
      real _t118D#1 = λ(T0[],T1[])<(T0 + T1)> (_t1189,_t118B);
      tensor[3] _t118F#1 = <tensor[3]>[_t1189,_t1189,_t1189];
      real _t1191#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (_t118F,xn1111);
      bool _t11CB#1 = GT<real>(_t118D,_t1191);
      tensor[3] _t11CD#1 = <tensor[3]>[_t118B,_t118B,_t118B];
      tensor[3] _t11CF#3 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (_t11CD,xn1111);
      real _t1209#1 = TensorIndex<tensor[3],[0]>(_t11CF);
      real _t120B#3 = -0.e0;
      bool _t120D#1 = GT<real>(_t1209,_t120B);
      real _t120F#1 = TensorIndex<tensor[3],[1]>(_t11CF);
      bool _t1211#1 = GT<real>(_t120F,_t120B);
      real _t1213#1 = TensorIndex<tensor[3],[2]>(_t11CF);
      bool _t1215#1 = GT<real>(_t1213,_t120B);
      bool _t1217#1 = BAnd(_t1211,_t1215);
      bool _t1219#1 = BAnd(_t120D,_t1217);
      bool _t121B#1 = BAnd(_t11CB,_t1219);
      if _t121B then goto ASSIGN121F else goto JOIN1221
    ASSIGN121F:  preds = [COND121D]
      femData:MeshPos _t121E#1 = ExtractFemItemN<[femData:Mesh,int,tensor[3],tensor[3]],femData:MeshPos,AllBuild(MeshPos),0000,"",[],int>(mesh10FE,cellItter1109,xn1111,pos10FF);
      return _t121E
      goto JOIN1221
    JOIN1221:  preds = [*RETURN(_t121E)1220,COND121D]
      goto JOIN1222
    JOIN1222:  preds = [JOIN1221,COND1188]
      goto FOREACH1110
    NEXT1225:  preds = [FOREACH1110]
      goto FOREACH110A
    ASSIGN1227:  preds = [FOREACH110A]
      string _t1226#1 = "Bad end 2";
      string _t1228#1 = "\n";
      Print<[string,string]>(_t1226,_t1228);
      femData:MeshPos _t122B#1 = ExtractFemItemN<[femData:Mesh],femData:MeshPos,InvalidBuild(MeshPos),0000,"",[],int>(mesh10FE);
      return _t122B
}
## input initialization
  ENTRY109E:  preds = []
    return
## global-variable initialization
  ENTRY10A0:  preds = []
    femData:Mesh cube10A1#3 = globals.cube1097;
    femData:Space 0space0342_intermedateGlobal10A3#1 = globals.0space0342_intermedateGlobal1098;
    femData:FemFunc 0data0344_intermedateGlobal10A5#1 = globals.0data0344_intermedateGlobal1099;
    int _t10A7#1 = 0;
    int _t10A9#1 = 1;
    int _t10AB#1 = ExtractFemItem<int,NumCell(Mesh)>(cube10A1);
    int _t10AD#1 = ISub(_t10AB,_t10A9);
    int[] _t10AF#1 = Range(_t10A7,_t10AD);
    femData:MeshCell[] _t10B1#1 = <femData:MeshCell[]>{};
  FOREACH10B4:  preds = [ASSIGN10B2,NEXT10BA]
    foreach (_t10B3 in _t10AF) on exit goto GASSIGN10BB
      femData:MeshCell[] _t10B8#2 = phi(_t10B1,_t10B7)
    femData:MeshCell _t10B5#1 = LoadFem<femData:MeshCell>(cube10A1,_t10B3);
    femData:MeshCell[] _t10B7#1 = Append<femData:MeshCell>(_t10B8,_t10B5);
    goto FOREACH10B4
  GASSIGN10BB:  preds = [FOREACH10B4]
    globals.0cell_cube109A = _t10B8;
    femData:Space space10BC#1 = LoadFem<femData:Space>(0space0342_intermedateGlobal10A3,cube10A1);
    femData:FemFunc data10BE#2 = LoadFem<femData:FemFunc>(0data0344_intermedateGlobal10A5,space10BC);
    femData:Space _t10C0#2 = ExtractFem<femData:Space,femData:FemFunc>(data10BE);
    femData:Mesh _t10C2#1 = ExtractFem<femData:Mesh,femData:Space>(_t10C0);
    globals._t109B = _t10C2;
    globals._tX109C = _t10C0;
    globals.data109D = data10BE;
    return
## strand
  strand gg (tensor[3] i10C8#1)
    state:
      output tensor[3] target;
      output tensor[3] translated;
      output bool valid;
      output femData:MeshCell c;
      output real result;
      output tensor[3] gradResult;
      output tensor[3] gradResultp;
    state init
      ENTRY10D0:  preds = []
        femData:MeshCell[] 0cell_cube10D1#1 = globals.0cell_cube109A;
        real _nan10D3#4 = nan;
        tensor[3] translated10D5#3 = <tensor[3]>[_nan10D3,_nan10D3,_nan10D3];
        bool valid10D7#1 = false;
        int _t10D9#1 = 0;
        femData:MeshCell c10DB#1 = Subscript<femData:MeshCell[]>(0cell_cube10D1,_t10D9);
        self.target = i10C8;
        self.translated = translated10D5;
        self.valid = valid10D7;
        self.c = c10DB;
        self.result = _nan10D3;
        self.gradResult = translated10D5;
        self.gradResultp = translated10D5;
        return
    end state init
    method update
        ENTRY10E5:  preds = []
          femData:Mesh _t10E6#9 = globals._t109B;
          femData:Space _t10E8#3 = globals._tX109C;
          femData:FemFunc data10EA#3 = globals.data109D;
          femData:Mesh cube10EC#1 = globals.cube1097;
          tensor[3] target10EE#9 = self.target;
          tensor[3] translated10F0#1 = self.translated;
          femData:MeshCell c10F2#1 = self.c;
          real result10F4#1 = self.result;
          tensor[3] gradResult10F6#1 = self.gradResult;
          string _t10F8#1 = "Running on ";
          string _t10FA#1 = "\n";
          Print<[string,tensor[3],string]>(_t10F8,target10EE,_t10FA);
          femData:MeshPos p122E#4 = findPos10FD (cube10EC,target10EE);
          bool valid1230#2 = ExtractFemItem<bool,Valid(MeshPos)>(p122E);
          if valid1230 then goto ASSIGN1234 else goto ASSIGN12A7
        ASSIGN1234:  preds = [COND1232]
          femData:Mesh _t1233#1 = ExtractFem<femData:Mesh,femData:MeshPos>(p122E);
          int _t1235#1 = ExtractFemItem<int,CellIndex(MeshPos)>(p122E);
          femData:MeshCell c1237#1 = LoadFem<femData:MeshCell>(_t1233,_t1235);
          tensor[3] translated1239#1 = ExtractFemItem<tensor[3],RefPos(MeshPos)>(p122E);
          femData:MeshPos callFindPos123E#2 = findPos10FD (_t10E6,target10EE);
          int intPos123F#2 = ExtractFemItem<int,CellIndex(Mesh)>(callFindPos123E);
          tensor[3] refPos1240#9 = ExtractFemItem<tensor[3],RefPos(Mesh)>(callFindPos123E);
          int[35] femIndicies1245#1 = ExtractFemItem2<int,int[35],ExtractIndices(Space)>(_t10E8,intPos123F);
          tensor[35] femDofs1246#2 = ExtractFemItem2<int[35],tensor[35],ExtractDofsSeq(FemFunc)>(data10EA,femIndicies1245);
          tensor[35] basisResult1247#1 = EvaluateBasis<BasisArray(35)>(refPos1240);
          real compositionl123D#1 = λ(FEM(mesh_t)0,FEM(fns_t)1,FEM(func_t)2,T3[3],T4[35],T5[35],T6[3])<Σ(i0=0..34)<((T4_{i0} * T5_{i0}))>(i0=0..34)> (_t10E6,_t10E8,data10EA,target10EE,femDofs1246,basisResult1247,refPos1240);
          real result123B#1 = λ(T0[])<T0> (compositionl123D);
          tensor[3,35] basisResult126D#1 = EvaluateBasis<BasisArray(3,35)>(refPos1240);
          tensor[3] compositionl1257#1 = λ(FEM(mesh_t)0,FEM(fns_t)1,FEM(func_t)2,T3[3],T4[35],T5[3 35],T6[3])<Σ(i2=0..34)<((T4_{i2} * T5_{i0,i2}))>(i2=0..34)>_{3} (_t10E6,_t10E8,data10EA,target10EE,femDofs1246,basisResult126D,refPos1240);
          int[4] femIndicies126F#1 = ExtractFemItem2<int,int[4],ExtractIndices(Mesh)>(_t10E6,intPos123F);
          tensor[4,3] femDofs1270#4 = ExtractFemItem2<int[4],tensor[4,3],ExtractDofsSeq(Mesh)>(_t10E6,femIndicies126F);
          tensor[3,4] basisResult1271#4 = EvaluateBasis<BasisArray(3,4)>(refPos1240);
          tensor[3,3] probe_l_81258#2 = λ(FEM(mesh_t)0,T1[3],T2[4 3],T3[3 4],T4[3])<Σ(i3=0..3)<((T2_{i3,i0} * T3_{i1,i3}))>(i3=0..3)>_{3 3} (_t10E6,target10EE,femDofs1270,basisResult1271,refPos1240);
          tensor[3,3,3] op1_e3_l_101259#1 = λ(T0[3 3])<Σ(i3=0..2)<((ϵ_{ii0,ii3,ii1} * T0_{i3,i2}))>(i3=0..2)>_{3 3 3} (probe_l_81258);
          tensor[3,3,3] op1_e3_l_11125A#1 = λ(T0[3 3],T1[3 3 3])<Σ(i3=0..2)<((T0_{i3,i0} * T1_{i3,i1,i2}))>(i3=0..2)>_{3 3 3} (probe_l_81258,op1_e3_l_101259);
          tensor[3] probe_l_12125B#1 = λ(FEM(mesh_t)0,T1[3],T2[4 3],T3[3 4],T4[3])<Σ(i2=0..3)<((T2_{i2,i0} * T3_{'0',i2}))>(i2=0..3)>_{3} (_t10E6,target10EE,femDofs1270,basisResult1271,refPos1240);
          tensor[3] probe_l_13125C#1 = λ(FEM(mesh_t)0,T1[3],T2[4 3],T3[3 4],T4[3])<Σ(i2=0..3)<((T2_{i2,i0} * T3_{'1',i2}))>(i2=0..3)>_{3} (_t10E6,target10EE,femDofs1270,basisResult1271,refPos1240);
          tensor[3] probe_l_14125D#1 = λ(FEM(mesh_t)0,T1[3],T2[4 3],T3[3 4],T4[3])<Σ(i2=0..3)<((T2_{i2,i0} * T3_{'2',i2}))>(i2=0..3)>_{3} (_t10E6,target10EE,femDofs1270,basisResult1271,refPos1240);
          tensor[3,3] op1_e3_l_15125E#1 = λ(T0[3])<Σ(i2=0..2)<((ϵ_{ii0,ii1,ii2} * T0_{i2}))>(i2=0..2)>_{3 3} (probe_l_14125D);
          tensor[3] op1_e3_l_16125F#1 = λ(T0[3],T1[3 3])<Σ(i1=0..2)<((T0_{i1} * T1_{i0,i1}))>(i1=0..2)>_{3} (probe_l_13125C,op1_e3_l_15125E);
          real op1_e3_l_171260#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (probe_l_12125B,op1_e3_l_16125F);
          tensor[3,3] op1_e3_l_181261#1 = λ(T0[3 3 3])<Σ(i2=0..2)(i3=0..2)<((ϵ_{ii2,ii3,ii0} * T0_{i2,i1,i3}))>(i2=0..2)(i3=0..2)>_{3 3} (op1_e3_l_11125A);
          real op1_e3_l_191262#1 = λ(T0[])<(2 * T0)> (op1_e3_l_171260);
          tensor[3,3] op1_e3_l_201263#1 = λ(T0[3 3],T1[])<(T0_{i0,i1}) / ( T1)>_{3 3} (op1_e3_l_181261,op1_e3_l_191262);
          tensor[3] gradResult1255#1 = λ(T0[3],T1[3 3])<Σ(i104=0..2)<((T0_{i104} * T1_{i104,i0}))>(i104=0..2)>_{3} (compositionl1257,op1_e3_l_201263);
          goto JOIN129F
        JOIN129F:  preds = [ASSIGN129A,MASSIGN12A8]
          tensor[3] gradResult129B#1 = phi(gradResult1255,gradResult10F6)
          real result129C#1 = phi(result123B,result10F4)
          femData:MeshCell c129D#1 = phi(c1237,c10F2)
          tensor[3] translated129E#1 = phi(translated1239,translated10F0)
          self.translated = translated129E;
          self.valid = valid1230;
          self.c = c129D;
          self.result = result129C;
          self.gradResult = gradResult129B;
          stabilize
        ASSIGN12A7:  preds = [COND1232]
          string _t12A6#1 = "Warning: Invalid!\n";
          Print<[string]>(_t12A6);
          goto JOIN129F
    end update
  end gg
## initial strand creation
  COLLECTION
    ENTRY12AA:  preds = []
      tensor[3][] points12AB#1 = globals.points1096;
    FOREACH12AE:  preds = [ASSIGN12AC,NEXT12B0]
      foreach (i12AD in points12AB) on exit goto RETURN12B1
      new gg(i12AD);
      goto FOREACH12AE
    RETURN12B1:  preds = [FOREACH12AE]
      return
#### end program ####
##### mid-ir: after border control ####
## properties
  GlobalInit HasInputs HasGlobals ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
## globals
  input points1096 (points) = <no-default>
  input cube1097 (cube) = <no-default>
  input 0space0342_intermedateGlobal1098 (space) = <no-default>
  input 0data0344_intermedateGlobal1099 (data) = <no-default>
  global femData:MeshCell[] 0cell_cube109A
  global femData:Mesh _t109B
  global femData:Space _tX109C
  global femData:FemFunc data109D
## functions
  function femData:MeshPos findPos10FD (femData:Mesh mesh10FE#11, tensor[3] pos10FF#4) {
    ENTRY1100:  preds = []
      real _t1101#3 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
      tensor[3] xn1103#10 = <tensor[3]>[_t1101,_t1101,_t1101];
      int newtonInt1105#1 = 0;
      int[] yayCells1107#1 = ExtractFemItem2<tensor[3],int[],NearbyCell(File=spat.in)(Mesh)>(mesh10FE,pos10FF);
    FOREACH110A:  preds = [ASSIGN1108,NEXT1225]
      foreach (cellItter1109 in yayCells1107) on exit goto ASSIGN1227
        tensor[3] xn1224#1 = phi(xn1103,xn1112)
      int _t110B#1 = 16;
      int[] _t110D#1 = Range(newtonInt1105,_t110B);
    FOREACH1110:  preds = [ASSIGN110E,NEXT1223]
      foreach (newtonItter110F in _t110D) on exit goto NEXT1225
        tensor[3] xn1112#7 = phi(xn1224,xn1111)
      int[4] femIndicies1123#1 = ExtractFemItem2<int,int[4],ExtractIndices(Mesh)>(mesh10FE,cellItter1109);
      tensor[4,3] femDofs1124#6 = ExtractFemItem2<int[4],tensor[4,3],ExtractDofsSeq(Mesh)>(mesh10FE,femIndicies1123);
      tensor[3,4] basisResult1125#4 = EvaluateBasis<BasisArray(3,4)>(xn1103);
      tensor[3,3] probe_l_101113#2 = λ(INT0,FEM(mesh_t)1,T2[3],T3[4 3],T4[3 4],T5[3])<Σ(i3=0..3)<((T3_{i3,i0} * T4_{i1,i3}))>(i3=0..3)>_{3 3} (cellItter1109,mesh10FE,xn1103,femDofs1124,basisResult1125,xn1103);
      tensor[3,3,3] op1_e3_l_121114#1 = λ(T0[3 3])<Σ(i3=0..2)<((ϵ_{ii0,ii3,ii1} * T0_{i3,i2}))>(i3=0..2)>_{3 3 3} (probe_l_101113);
      tensor[3,3,3] op1_e3_l_131115#1 = λ(T0[3 3],T1[3 3 3])<Σ(i3=0..2)<((T0_{i3,i0} * T1_{i3,i1,i2}))>(i3=0..2)>_{3 3 3} (probe_l_101113,op1_e3_l_121114);
      tensor[3] probe_l_141116#1 = λ(INT0,FEM(mesh_t)1,T2[3],T3[4 3],T4[3 4],T5[3])<Σ(i2=0..3)<((T3_{i2,i0} * T4_{'0',i2}))>(i2=0..3)>_{3} (cellItter1109,mesh10FE,xn1103,femDofs1124,basisResult1125,xn1103);
      tensor[3] probe_l_151117#1 = λ(INT0,FEM(mesh_t)1,T2[3],T3[4 3],T4[3 4],T5[3])<Σ(i2=0..3)<((T3_{i2,i0} * T4_{'1',i2}))>(i2=0..3)>_{3} (cellItter1109,mesh10FE,xn1103,femDofs1124,basisResult1125,xn1103);
      tensor[3] probe_l_161118#1 = λ(INT0,FEM(mesh_t)1,T2[3],T3[4 3],T4[3 4],T5[3])<Σ(i2=0..3)<((T3_{i2,i0} * T4_{'2',i2}))>(i2=0..3)>_{3} (cellItter1109,mesh10FE,xn1103,femDofs1124,basisResult1125,xn1103);
      tensor[3,3] op1_e3_l_171119#1 = λ(T0[3])<Σ(i2=0..2)<((ϵ_{ii0,ii1,ii2} * T0_{i2}))>(i2=0..2)>_{3 3} (probe_l_161118);
      tensor[3] op1_e3_l_18111A#1 = λ(T0[3],T1[3 3])<Σ(i1=0..2)<((T0_{i1} * T1_{i0,i1}))>(i1=0..2)>_{3} (probe_l_151117,op1_e3_l_171119);
      real op1_e3_l_19111B#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (probe_l_141116,op1_e3_l_18111A);
      tensor[3,3] op1_e3_l_20111C#1 = λ(T0[3 3 3])<Σ(i2=0..2)(i3=0..2)<((ϵ_{ii2,ii3,ii0} * T0_{i2,i1,i3}))>(i2=0..2)(i3=0..2)>_{3 3} (op1_e3_l_131115);
      real op1_e3_l_21111D#1 = λ(T0[])<(2 * T0)> (op1_e3_l_19111B);
      tensor[4] basisResult112D#2 = EvaluateBasis<BasisArray(4)>(xn1112);
      tensor[3] probe_l_22111E#1 = λ(T0[3],INT1,FEM(mesh_t)2,T3[4 3],T4[4],T5[3])<Σ(i1=0..3)<((T3_{i1,i0} * T4_{i1}))>(i1=0..3)>_{3} (xn1112,cellItter1109,mesh10FE,femDofs1124,basisResult112D,xn1112);
      tensor[3,3] op1_e3_l_23111F#2 = λ(T0[3 3],T1[])<(T0_{i0,i1}) / ( T1)>_{3 3} (op1_e3_l_20111C,op1_e3_l_21111D);
      tensor[3] op1_e3_l_241120#1 = λ(T0[3],T1[3])<(T1_{i0}) - (T0_{i0})>_{3} (pos10FF,probe_l_22111E);
      tensor[3] op1_e3_l_251121#1 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (op1_e3_l_23111F,op1_e3_l_241120);
      tensor[3] xn1111#4 = λ(T0[3],T1[3])<(T0_{i0}) - (T1_{i0})>_{3} (xn1112,op1_e3_l_251121);
      real _t114A#2 = 0.1e-7;
      real _t114C#1 = λ(T0[],T1[])<(T0 * T1)> (_t114A,_t114A);
      tensor[3] probe_l_30115A#1 = λ(INT0,FEM(mesh_t)1,T2[3],T3[4 3],T4[4],T5[3])<Σ(i1=0..3)<((T3_{i1,i0} * T4_{i1}))>(i1=0..3)>_{3} (cellItter1109,mesh10FE,xn1112,femDofs1124,basisResult112D,xn1112);
      tensor[3] op1_e3_l_32115C#1 = λ(T0[3],T1[3])<(T1_{i0}) - (T0_{i0})>_{3} (pos10FF,probe_l_30115A);
      tensor[3] op1_e3_l_48115D#2 = λ(T0[3 3],T1[3])<Σ(i1=0..2)<((T0_{i0,i1} * T1_{i1}))>(i1=0..2)>_{3} (op1_e3_l_23111F,op1_e3_l_32115C);
      real _t114E#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (op1_e3_l_48115D,op1_e3_l_48115D);
      bool _t1186#1 = GTE<real>(_t114C,_t114E);
      if _t1186 then goto ASSIGN118A else goto JOIN1222
    ASSIGN118A:  preds = [COND1188]
      real _t1189#4 = 0.1e1;
      real _t118B#4 = 0.1e-8;
      real _t118D#1 = λ(T0[],T1[])<(T0 + T1)> (_t1189,_t118B);
      tensor[3] _t118F#1 = <tensor[3]>[_t1189,_t1189,_t1189];
      real _t1191#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (_t118F,xn1111);
      bool _t11CB#1 = GT<real>(_t118D,_t1191);
      tensor[3] _t11CD#1 = <tensor[3]>[_t118B,_t118B,_t118B];
      tensor[3] _t11CF#3 = λ(T0[3],T1[3])<(T0_{i0} + T1_{i0})>_{3} (_t11CD,xn1111);
      real _t1209#1 = TensorIndex<tensor[3],[0]>(_t11CF);
      real _t120B#3 = -0.e0;
      bool _t120D#1 = GT<real>(_t1209,_t120B);
      real _t120F#1 = TensorIndex<tensor[3],[1]>(_t11CF);
      bool _t1211#1 = GT<real>(_t120F,_t120B);
      real _t1213#1 = TensorIndex<tensor[3],[2]>(_t11CF);
      bool _t1215#1 = GT<real>(_t1213,_t120B);
      bool _t1217#1 = BAnd(_t1211,_t1215);
      bool _t1219#1 = BAnd(_t120D,_t1217);
      bool _t121B#1 = BAnd(_t11CB,_t1219);
      if _t121B then goto ASSIGN121F else goto JOIN1221
    ASSIGN121F:  preds = [COND121D]
      femData:MeshPos _t121E#1 = ExtractFemItemN<[femData:Mesh,int,tensor[3],tensor[3]],femData:MeshPos,AllBuild(MeshPos),0000,"",[],int>(mesh10FE,cellItter1109,xn1111,pos10FF);
      return _t121E
      goto JOIN1221
    JOIN1221:  preds = [*RETURN(_t121E)1220,COND121D]
      goto JOIN1222
    JOIN1222:  preds = [JOIN1221,COND1188]
      goto FOREACH1110
    NEXT1225:  preds = [FOREACH1110]
      goto FOREACH110A
    ASSIGN1227:  preds = [FOREACH110A]
      string _t1226#1 = "Bad end 2";
      string _t1228#1 = "\n";
      Print<[string,string]>(_t1226,_t1228);
      femData:MeshPos _t122B#1 = ExtractFemItemN<[femData:Mesh],femData:MeshPos,InvalidBuild(MeshPos),0000,"",[],int>(mesh10FE);
      return _t122B
}
## input initialization
  ENTRY109E:  preds = []
    return
## global-variable initialization
  ENTRY10A0:  preds = []
    femData:Mesh cube10A1#3 = globals.cube1097;
    femData:Space 0space0342_intermedateGlobal10A3#1 = globals.0space0342_intermedateGlobal1098;
    femData:FemFunc 0data0344_intermedateGlobal10A5#1 = globals.0data0344_intermedateGlobal1099;
    int _t10A7#1 = 0;
    int _t10A9#1 = 1;
    int _t10AB#1 = ExtractFemItem<int,NumCell(Mesh)>(cube10A1);
    int _t10AD#1 = ISub(_t10AB,_t10A9);
    int[] _t10AF#1 = Range(_t10A7,_t10AD);
    femData:MeshCell[] _t10B1#1 = <femData:MeshCell[]>{};
  FOREACH10B4:  preds = [ASSIGN10B2,NEXT10BA]
    foreach (_t10B3 in _t10AF) on exit goto GASSIGN10BB
      femData:MeshCell[] _t10B8#2 = phi(_t10B1,_t10B7)
    femData:MeshCell _t10B5#1 = LoadFem<femData:MeshCell>(cube10A1,_t10B3);
    femData:MeshCell[] _t10B7#1 = Append<femData:MeshCell>(_t10B8,_t10B5);
    goto FOREACH10B4
  GASSIGN10BB:  preds = [FOREACH10B4]
    globals.0cell_cube109A = _t10B8;
    femData:Space space10BC#1 = LoadFem<femData:Space>(0space0342_intermedateGlobal10A3,cube10A1);
    femData:FemFunc data10BE#2 = LoadFem<femData:FemFunc>(0data0344_intermedateGlobal10A5,space10BC);
    femData:Space _t10C0#2 = ExtractFem<femData:Space,femData:FemFunc>(data10BE);
    femData:Mesh _t10C2#1 = ExtractFem<femData:Mesh,femData:Space>(_t10C0);
    globals._t109B = _t10C2;
    globals._tX109C = _t10C0;
    globals.data109D = data10BE;
    return
## strand
  strand gg (tensor[3] i10C8#1)
    state:
      output tensor[3] target;
      output tensor[3] translated;
      output bool valid;
      output femData:MeshCell c;
      output real result;
      output tensor[3] gradResult;
      output tensor[3] gradResultp;
    state init
      ENTRY10D0:  preds = []
        femData:MeshCell[] 0cell_cube10D1#1 = globals.0cell_cube109A;
        real _nan10D3#4 = nan;
        tensor[3] translated10D5#3 = <tensor[3]>[_nan10D3,_nan10D3,_nan10D3];
        bool valid10D7#1 = false;
        int _t10D9#1 = 0;
        femData:MeshCell c10DB#1 = Subscript<femData:MeshCell[]>(0cell_cube10D1,_t10D9);
        self.target = i10C8;
        self.translated = translated10D5;
        self.valid = valid10D7;
        self.c = c10DB;
        self.result = _nan10D3;
        self.gradResult = translated10D5;
        self.gradResultp = translated10D5;
        return
    end state init
    method update
        ENTRY10E5:  preds = []
          femData:Mesh _t10E6#9 = globals._t109B;
          femData:Space _t10E8#3 = globals._tX109C;
          femData:FemFunc data10EA#3 = globals.data109D;
          femData:Mesh cube10EC#1 = globals.cube1097;
          tensor[3] target10EE#9 = self.target;
          tensor[3] translated10F0#1 = self.translated;
          femData:MeshCell c10F2#1 = self.c;
          real result10F4#1 = self.result;
          tensor[3] gradResult10F6#1 = self.gradResult;
          string _t10F8#1 = "Running on ";
          string _t10FA#1 = "\n";
          Print<[string,tensor[3],string]>(_t10F8,target10EE,_t10FA);
          femData:MeshPos p122E#4 = findPos10FD (cube10EC,target10EE);
          bool valid1230#2 = ExtractFemItem<bool,Valid(MeshPos)>(p122E);
          if valid1230 then goto ASSIGN1234 else goto ASSIGN12A7
        ASSIGN1234:  preds = [COND1232]
          femData:Mesh _t1233#1 = ExtractFem<femData:Mesh,femData:MeshPos>(p122E);
          int _t1235#1 = ExtractFemItem<int,CellIndex(MeshPos)>(p122E);
          femData:MeshCell c1237#1 = LoadFem<femData:MeshCell>(_t1233,_t1235);
          tensor[3] translated1239#1 = ExtractFemItem<tensor[3],RefPos(MeshPos)>(p122E);
          femData:MeshPos callFindPos123E#2 = findPos10FD (_t10E6,target10EE);
          int intPos123F#2 = ExtractFemItem<int,CellIndex(Mesh)>(callFindPos123E);
          tensor[3] refPos1240#9 = ExtractFemItem<tensor[3],RefPos(Mesh)>(callFindPos123E);
          int[35] femIndicies1245#1 = ExtractFemItem2<int,int[35],ExtractIndices(Space)>(_t10E8,intPos123F);
          tensor[35] femDofs1246#2 = ExtractFemItem2<int[35],tensor[35],ExtractDofsSeq(FemFunc)>(data10EA,femIndicies1245);
          tensor[35] basisResult1247#1 = EvaluateBasis<BasisArray(35)>(refPos1240);
          real compositionl123D#1 = λ(FEM(mesh_t)0,FEM(fns_t)1,FEM(func_t)2,T3[3],T4[35],T5[35],T6[3])<Σ(i0=0..34)<((T4_{i0} * T5_{i0}))>(i0=0..34)> (_t10E6,_t10E8,data10EA,target10EE,femDofs1246,basisResult1247,refPos1240);
          real result123B#1 = λ(T0[])<T0> (compositionl123D);
          tensor[3,35] basisResult126D#1 = EvaluateBasis<BasisArray(3,35)>(refPos1240);
          tensor[3] compositionl1257#1 = λ(FEM(mesh_t)0,FEM(fns_t)1,FEM(func_t)2,T3[3],T4[35],T5[3 35],T6[3])<Σ(i2=0..34)<((T4_{i2} * T5_{i0,i2}))>(i2=0..34)>_{3} (_t10E6,_t10E8,data10EA,target10EE,femDofs1246,basisResult126D,refPos1240);
          int[4] femIndicies126F#1 = ExtractFemItem2<int,int[4],ExtractIndices(Mesh)>(_t10E6,intPos123F);
          tensor[4,3] femDofs1270#4 = ExtractFemItem2<int[4],tensor[4,3],ExtractDofsSeq(Mesh)>(_t10E6,femIndicies126F);
          tensor[3,4] basisResult1271#4 = EvaluateBasis<BasisArray(3,4)>(refPos1240);
          tensor[3,3] probe_l_81258#2 = λ(FEM(mesh_t)0,T1[3],T2[4 3],T3[3 4],T4[3])<Σ(i3=0..3)<((T2_{i3,i0} * T3_{i1,i3}))>(i3=0..3)>_{3 3} (_t10E6,target10EE,femDofs1270,basisResult1271,refPos1240);
          tensor[3,3,3] op1_e3_l_101259#1 = λ(T0[3 3])<Σ(i3=0..2)<((ϵ_{ii0,ii3,ii1} * T0_{i3,i2}))>(i3=0..2)>_{3 3 3} (probe_l_81258);
          tensor[3,3,3] op1_e3_l_11125A#1 = λ(T0[3 3],T1[3 3 3])<Σ(i3=0..2)<((T0_{i3,i0} * T1_{i3,i1,i2}))>(i3=0..2)>_{3 3 3} (probe_l_81258,op1_e3_l_101259);
          tensor[3] probe_l_12125B#1 = λ(FEM(mesh_t)0,T1[3],T2[4 3],T3[3 4],T4[3])<Σ(i2=0..3)<((T2_{i2,i0} * T3_{'0',i2}))>(i2=0..3)>_{3} (_t10E6,target10EE,femDofs1270,basisResult1271,refPos1240);
          tensor[3] probe_l_13125C#1 = λ(FEM(mesh_t)0,T1[3],T2[4 3],T3[3 4],T4[3])<Σ(i2=0..3)<((T2_{i2,i0} * T3_{'1',i2}))>(i2=0..3)>_{3} (_t10E6,target10EE,femDofs1270,basisResult1271,refPos1240);
          tensor[3] probe_l_14125D#1 = λ(FEM(mesh_t)0,T1[3],T2[4 3],T3[3 4],T4[3])<Σ(i2=0..3)<((T2_{i2,i0} * T3_{'2',i2}))>(i2=0..3)>_{3} (_t10E6,target10EE,femDofs1270,basisResult1271,refPos1240);
          tensor[3,3] op1_e3_l_15125E#1 = λ(T0[3])<Σ(i2=0..2)<((ϵ_{ii0,ii1,ii2} * T0_{i2}))>(i2=0..2)>_{3 3} (probe_l_14125D);
          tensor[3] op1_e3_l_16125F#1 = λ(T0[3],T1[3 3])<Σ(i1=0..2)<((T0_{i1} * T1_{i0,i1}))>(i1=0..2)>_{3} (probe_l_13125C,op1_e3_l_15125E);
          real op1_e3_l_171260#1 = λ(T0[3],T1[3])<Σ(i0=0..2)<((T0_{i0} * T1_{i0}))>(i0=0..2)> (probe_l_12125B,op1_e3_l_16125F);
          tensor[3,3] op1_e3_l_181261#1 = λ(T0[3 3 3])<Σ(i2=0..2)(i3=0..2)<((ϵ_{ii2,ii3,ii0} * T0_{i2,i1,i3}))>(i2=0..2)(i3=0..2)>_{3 3} (op1_e3_l_11125A);
          real op1_e3_l_191262#1 = λ(T0[])<(2 * T0)> (op1_e3_l_171260);
          tensor[3,3] op1_e3_l_201263#1 = λ(T0[3 3],T1[])<(T0_{i0,i1}) / ( T1)>_{3 3} (op1_e3_l_181261,op1_e3_l_191262);
          tensor[3] gradResult1255#1 = λ(T0[3],T1[3 3])<Σ(i104=0..2)<((T0_{i104} * T1_{i104,i0}))>(i104=0..2)>_{3} (compositionl1257,op1_e3_l_201263);
          goto JOIN129F
        JOIN129F:  preds = [ASSIGN129A,MASSIGN12A8]
          tensor[3] gradResult129B#1 = phi(gradResult1255,gradResult10F6)
          real result129C#1 = phi(result123B,result10F4)
          femData:MeshCell c129D#1 = phi(c1237,c10F2)
          tensor[3] translated129E#1 = phi(translated1239,translated10F0)
          self.translated = translated129E;
          self.valid = valid1230;
          self.c = c129D;
          self.result = result129C;
          self.gradResult = gradResult129B;
          stabilize
        ASSIGN12A7:  preds = [COND1232]
          string _t12A6#1 = "Warning: Invalid!\n";
          Print<[string]>(_t12A6);
          goto JOIN129F
    end update
  end gg
## initial strand creation
  COLLECTION
    ENTRY12AA:  preds = []
      tensor[3][] points12AB#1 = globals.points1096;
    FOREACH12AE:  preds = [ASSIGN12AC,NEXT12B0]
      foreach (i12AD in points12AB) on exit goto RETURN12B1
      new gg(i12AD);
      goto FOREACH12AE
    RETURN12B1:  preds = [FOREACH12AE]
      return
#### end program ####
##### low-ir: after mid-to-low translation ####
## properties
  GlobalInit HasInputs HasGlobals ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
## globals
  input points12C6 (points) = <no-default>
  input cube12C7 (cube) = <no-default>
  input 0space0342_intermedateGlobal12C8 (space) = <no-default>
  input 0data0344_intermedateGlobal12C9 (data) = <no-default>
  global femData:MeshCell[] 0cell_cube12CA
  global femData:Mesh _t12CB
  global femData:Space _tX12CC
  global femData:FemFunc data12CD
## functions
  function femData:MeshPos findPos132E (femData:Mesh mesh132F#19, tensor[3] pos1330#4) {
    ENTRY1331:  preds = []
      real _t1332#3 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
      tensor[3] xn1334#4 = <tensor[3]>[_t1332,_t1332,_t1332];
      int newtonInt1336#1 = 0;
      int[] yayCells1338#1 = ExtractFemItem2<tensor[3],int[],NearbyCell(File=spat.in)(Mesh)>(mesh132F,pos1330);
    FOREACH133B:  preds = [ASSIGN1339,NEXT1A70]
      foreach (cellItter133A in yayCells1338) on exit goto ASSIGN1A72
        tensor[3] xn1A6F#1 = phi(xn1334,xn1910)
      int _t133C#1 = 16;
      int[] _t133E#1 = Range(newtonInt1336,_t133C);
    FOREACH1341:  preds = [ASSIGN133F,NEXT1A6E]
      foreach (newtonItter1340 in _t133E) on exit goto NEXT1A70
        tensor[3] xn1910#5 = phi(xn1A6F,xn19D4)
      int ilit1343#1 = 4;
      int mulRes1344#4 = IMul(cellItter133A,ilit1343);
      int ilit1345#1 = 0;
      int addRes1346#1 = IAdd(mulRes1344,ilit1345);
      int idx1347#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(mesh132F,addRes1346);
      int ilit1348#1 = 1;
      int addRes1349#1 = IAdd(mulRes1344,ilit1348);
      int idx134A#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(mesh132F,addRes1349);
      int ilit134B#1 = 2;
      int addRes134C#1 = IAdd(mulRes1344,ilit134B);
      int idx134D#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(mesh132F,addRes134C);
      int ilit134E#1 = 3;
      int addRes134F#1 = IAdd(mulRes1344,ilit134E);
      int idx1350#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(mesh132F,addRes134F);
      int[4] seq1351#1 = <int[4]>{idx1347,idx134A,idx134D,idx1350};
      int[4] femIndicies1342#4 = seq1351;
      int ilit1363#5 = 0;
      int ilit1364#5 = 3;
      int idx1365#1 = Subscript<int>(femIndicies1342,ilit1363);
      int mulRes1366#3 = IMul(ilit1364,idx1365);
      int addRes1367#1 = IAdd(ilit1363,mulRes1366);
      int ilit1368#5 = 1;
      int addRes1369#1 = IAdd(ilit1368,mulRes1366);
      int ilit136A#5 = 2;
      int addRes136B#1 = IAdd(ilit136A,mulRes1366);
      real dof_load136C#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh132F,addRes1367);
      real dof_load136D#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh132F,addRes1369);
      real dof_load136E#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh132F,addRes136B);
      tensor[3] interCons136F#1 = <tensor[3]>[dof_load136C,dof_load136D,dof_load136E];
      int idx1370#1 = Subscript<int>(femIndicies1342,ilit1368);
      int mulRes1371#3 = IMul(ilit1364,idx1370);
      int addRes1372#1 = IAdd(ilit1363,mulRes1371);
      int addRes1373#1 = IAdd(ilit1368,mulRes1371);
      int addRes1374#1 = IAdd(ilit136A,mulRes1371);
      real dof_load1375#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh132F,addRes1372);
      real dof_load1376#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh132F,addRes1373);
      real dof_load1377#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh132F,addRes1374);
      tensor[3] interCons1378#1 = <tensor[3]>[dof_load1375,dof_load1376,dof_load1377];
      int idx1379#1 = Subscript<int>(femIndicies1342,ilit136A);
      int mulRes137A#3 = IMul(ilit1364,idx1379);
      int addRes137B#1 = IAdd(ilit1363,mulRes137A);
      int addRes137C#1 = IAdd(ilit1368,mulRes137A);
      int addRes137D#1 = IAdd(ilit136A,mulRes137A);
      real dof_load137E#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh132F,addRes137B);
      real dof_load137F#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh132F,addRes137C);
      real dof_load1380#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh132F,addRes137D);
      tensor[3] interCons1381#1 = <tensor[3]>[dof_load137E,dof_load137F,dof_load1380];
      int idx1382#1 = Subscript<int>(femIndicies1342,ilit1364);
      int mulRes1383#3 = IMul(ilit1364,idx1382);
      int addRes1384#1 = IAdd(ilit1363,mulRes1383);
      int addRes1385#1 = IAdd(ilit1368,mulRes1383);
      int addRes1386#1 = IAdd(ilit136A,mulRes1383);
      real dof_load1387#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh132F,addRes1384);
      real dof_load1388#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh132F,addRes1385);
      real dof_load1389#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh132F,addRes1386);
      tensor[3] interCons138A#1 = <tensor[3]>[dof_load1387,dof_load1388,dof_load1389];
      tensor[4,3] dofs138B#1 = <tensor[4,3]>[interCons136F,interCons1378,interCons1381,interCons138A];
      tensor[4,3] femDofs1362#72 = dofs138B;
      real varAcc13B7#0 = VIndex<3,0>(xn1334);
      real varAcc13B8#0 = VIndex<3,1>(xn1334);
      real varAcc13B9#0 = VIndex<3,2>(xn1334);
      real coeff13BA#1 = -0.1e1;
      real one13BB#4 = 0.1e1;
      real prod13BC#1 = RMul(one13BB,one13BB);
      real prod13BD#2 = RMul(one13BB,prod13BC);
      real basisEval13BE#3 = RMul(coeff13BA,prod13BD);
      real basisEval13BF#3 = RMul(one13BB,prod13BD);
      real basisEval13C0#6 = 0.e0;
      tensor[4] intermediateCons13C1#1 = <tensor[4]>[basisEval13BE,basisEval13BF,basisEval13C0,basisEval13C0];
      tensor[4] intermediateCons13C2#1 = <tensor[4]>[basisEval13BE,basisEval13C0,basisEval13BF,basisEval13C0];
      tensor[4] intermediateCons13C3#1 = <tensor[4]>[basisEval13BE,basisEval13C0,basisEval13C0,basisEval13BF];
      tensor[3,4] intermediateCons13C4#1 = <tensor[3,4]>[intermediateCons13C1,intermediateCons13C2,intermediateCons13C3];
      tensor[3,4] basisResult13B6#24 = intermediateCons13C4;
      real r13D5#3 = TensorIndex<tensor[4,3],[0,0]>(femDofs1362);
      real r13D6#3 = TensorIndex<tensor[3,4],[0,0]>(basisResult13B6);
      real r13D7#1 = RMul(r13D5,r13D6);
      real r13D8#3 = TensorIndex<tensor[4,3],[1,0]>(femDofs1362);
      real r13D9#3 = TensorIndex<tensor[3,4],[0,1]>(basisResult13B6);
      real r13DA#1 = RMul(r13D8,r13D9);
      real r13DB#3 = TensorIndex<tensor[4,3],[2,0]>(femDofs1362);
      real r13DC#3 = TensorIndex<tensor[3,4],[0,2]>(basisResult13B6);
      real r13DD#1 = RMul(r13DB,r13DC);
      real r13DE#3 = TensorIndex<tensor[4,3],[3,0]>(femDofs1362);
      real r13DF#3 = TensorIndex<tensor[3,4],[0,3]>(basisResult13B6);
      real r13E0#1 = RMul(r13DE,r13DF);
      real r13E1#1 = RAdd(r13D7,r13DA);
      real r13E2#1 = RAdd(r13E1,r13DD);
      real r13E3#1 = RAdd(r13E2,r13E0);
      real r13E4#3 = TensorIndex<tensor[3,4],[1,0]>(basisResult13B6);
      real r13E5#1 = RMul(r13D5,r13E4);
      real r13E6#3 = TensorIndex<tensor[3,4],[1,1]>(basisResult13B6);
      real r13E7#1 = RMul(r13D8,r13E6);
      real r13E8#3 = TensorIndex<tensor[3,4],[1,2]>(basisResult13B6);
      real r13E9#1 = RMul(r13DB,r13E8);
      real r13EA#3 = TensorIndex<tensor[3,4],[1,3]>(basisResult13B6);
      real r13EB#1 = RMul(r13DE,r13EA);
      real r13EC#1 = RAdd(r13E5,r13E7);
      real r13ED#1 = RAdd(r13EC,r13E9);
      real r13EE#1 = RAdd(r13ED,r13EB);
      real r13EF#3 = TensorIndex<tensor[3,4],[2,0]>(basisResult13B6);
      real r13F0#1 = RMul(r13D5,r13EF);
      real r13F1#3 = TensorIndex<tensor[3,4],[2,1]>(basisResult13B6);
      real r13F2#1 = RMul(r13D8,r13F1);
      real r13F3#3 = TensorIndex<tensor[3,4],[2,2]>(basisResult13B6);
      real r13F4#1 = RMul(r13DB,r13F3);
      real r13F5#3 = TensorIndex<tensor[3,4],[2,3]>(basisResult13B6);
      real r13F6#1 = RMul(r13DE,r13F5);
      real r13F7#1 = RAdd(r13F0,r13F2);
      real r13F8#1 = RAdd(r13F7,r13F4);
      real r13F9#1 = RAdd(r13F8,r13F6);
      tensor[3] tensor13FA#1 = <tensor[3]>[r13E3,r13EE,r13F9];
      real r13FB#3 = TensorIndex<tensor[4,3],[0,1]>(femDofs1362);
      real r13FC#1 = RMul(r13FB,r13D6);
      real r13FD#3 = TensorIndex<tensor[4,3],[1,1]>(femDofs1362);
      real r13FE#1 = RMul(r13FD,r13D9);
      real r13FF#3 = TensorIndex<tensor[4,3],[2,1]>(femDofs1362);
      real r1400#1 = RMul(r13FF,r13DC);
      real r1401#3 = TensorIndex<tensor[4,3],[3,1]>(femDofs1362);
      real r1402#1 = RMul(r1401,r13DF);
      real r1403#1 = RAdd(r13FC,r13FE);
      real r1404#1 = RAdd(r1403,r1400);
      real r1405#1 = RAdd(r1404,r1402);
      real r1406#1 = RMul(r13FB,r13E4);
      real r1407#1 = RMul(r13FD,r13E6);
      real r1408#1 = RMul(r13FF,r13E8);
      real r1409#1 = RMul(r1401,r13EA);
      real r140A#1 = RAdd(r1406,r1407);
      real r140B#1 = RAdd(r140A,r1408);
      real r140C#1 = RAdd(r140B,r1409);
      real r140D#1 = RMul(r13FB,r13EF);
      real r140E#1 = RMul(r13FD,r13F1);
      real r140F#1 = RMul(r13FF,r13F3);
      real r1410#1 = RMul(r1401,r13F5);
      real r1411#1 = RAdd(r140D,r140E);
      real r1412#1 = RAdd(r1411,r140F);
      real r1413#1 = RAdd(r1412,r1410);
      tensor[3] tensor1414#1 = <tensor[3]>[r1405,r140C,r1413];
      real r1415#3 = TensorIndex<tensor[4,3],[0,2]>(femDofs1362);
      real r1416#1 = RMul(r1415,r13D6);
      real r1417#3 = TensorIndex<tensor[4,3],[1,2]>(femDofs1362);
      real r1418#1 = RMul(r1417,r13D9);
      real r1419#3 = TensorIndex<tensor[4,3],[2,2]>(femDofs1362);
      real r141A#1 = RMul(r1419,r13DC);
      real r141B#3 = TensorIndex<tensor[4,3],[3,2]>(femDofs1362);
      real r141C#1 = RMul(r141B,r13DF);
      real r141D#1 = RAdd(r1416,r1418);
      real r141E#1 = RAdd(r141D,r141A);
      real r141F#1 = RAdd(r141E,r141C);
      real r1420#1 = RMul(r1415,r13E4);
      real r1421#1 = RMul(r1417,r13E6);
      real r1422#1 = RMul(r1419,r13E8);
      real r1423#1 = RMul(r141B,r13EA);
      real r1424#1 = RAdd(r1420,r1421);
      real r1425#1 = RAdd(r1424,r1422);
      real r1426#1 = RAdd(r1425,r1423);
      real r1427#1 = RMul(r1415,r13EF);
      real r1428#1 = RMul(r1417,r13F1);
      real r1429#1 = RMul(r1419,r13F3);
      real r142A#1 = RMul(r141B,r13F5);
      real r142B#1 = RAdd(r1427,r1428);
      real r142C#1 = RAdd(r142B,r1429);
      real r142D#1 = RAdd(r142C,r142A);
      tensor[3] tensor142E#1 = <tensor[3]>[r141F,r1426,r142D];
      tensor[3,3] probe_l_1013D4#18 = <tensor[3,3]>[tensor13FA,tensor1414,tensor142E];
      real realLit148C#9 = 0.e0;
      real r148D#3 = TensorIndex<tensor[3,3],[0,0]>(probe_l_1013D4);
      real r148E#3 = RMul(realLit148C,r148D);
      real r148F#3 = TensorIndex<tensor[3,3],[1,0]>(probe_l_1013D4);
      real r1490#3 = RMul(realLit148C,r148F);
      real r1491#3 = TensorIndex<tensor[3,3],[2,0]>(probe_l_1013D4);
      real r1492#5 = RMul(realLit148C,r1491);
      real r1493#3 = RAdd(r148E,r1490);
      real r1494#1 = RAdd(r1493,r1492);
      real r1495#3 = TensorIndex<tensor[3,3],[0,1]>(probe_l_1013D4);
      real r1496#3 = RMul(realLit148C,r1495);
      real r1497#3 = TensorIndex<tensor[3,3],[1,1]>(probe_l_1013D4);
      real r1498#3 = RMul(realLit148C,r1497);
      real r1499#3 = TensorIndex<tensor[3,3],[2,1]>(probe_l_1013D4);
      real r149A#5 = RMul(realLit148C,r1499);
      real r149B#3 = RAdd(r1496,r1498);
      real r149C#1 = RAdd(r149B,r149A);
      real r149D#3 = TensorIndex<tensor[3,3],[0,2]>(probe_l_1013D4);
      real r149E#3 = RMul(realLit148C,r149D);
      real r149F#3 = TensorIndex<tensor[3,3],[1,2]>(probe_l_1013D4);
      real r14A0#3 = RMul(realLit148C,r149F);
      real r14A1#3 = TensorIndex<tensor[3,3],[2,2]>(probe_l_1013D4);
      real r14A2#5 = RMul(realLit148C,r14A1);
      real r14A3#3 = RAdd(r149E,r14A0);
      real r14A4#1 = RAdd(r14A3,r14A2);
      tensor[3] tensor14A5#3 = <tensor[3]>[r1494,r149C,r14A4];
      real realLit14A6#9 = -0.1e1;
      real r14A7#1 = RMul(realLit14A6,r1491);
      real r14A8#1 = RAdd(r1493,r14A7);
      real r14A9#1 = RMul(realLit14A6,r1499);
      real r14AA#1 = RAdd(r149B,r14A9);
      real r14AB#1 = RMul(realLit14A6,r14A1);
      real r14AC#1 = RAdd(r14A3,r14AB);
      tensor[3] tensor14AD#1 = <tensor[3]>[r14A8,r14AA,r14AC];
      real realLit14AE#9 = 0.1e1;
      real r14AF#1 = RMul(realLit14AE,r148F);
      real r14B0#1 = RAdd(r148E,r14AF);
      real r14B1#1 = RAdd(r14B0,r1492);
      real r14B2#1 = RMul(realLit14AE,r1497);
      real r14B3#1 = RAdd(r1496,r14B2);
      real r14B4#1 = RAdd(r14B3,r149A);
      real r14B5#1 = RMul(realLit14AE,r149F);
      real r14B6#1 = RAdd(r149E,r14B5);
      real r14B7#1 = RAdd(r14B6,r14A2);
      tensor[3] tensor14B8#1 = <tensor[3]>[r14B1,r14B4,r14B7];
      tensor[3,3] tensor14B9#1 = <tensor[3,3]>[tensor14A5,tensor14AD,tensor14B8];
      real r14BA#1 = RMul(realLit14AE,r1491);
      real r14BB#1 = RAdd(r1493,r14BA);
      real r14BC#1 = RMul(realLit14AE,r1499);
      real r14BD#1 = RAdd(r149B,r14BC);
      real r14BE#1 = RMul(realLit14AE,r14A1);
      real r14BF#1 = RAdd(r14A3,r14BE);
      tensor[3] tensor14C0#1 = <tensor[3]>[r14BB,r14BD,r14BF];
      real r14C1#1 = RMul(realLit14A6,r148D);
      real r14C2#1 = RAdd(r14C1,r1490);
      real r14C3#1 = RAdd(r14C2,r1492);
      real r14C4#1 = RMul(realLit14A6,r1495);
      real r14C5#1 = RAdd(r14C4,r1498);
      real r14C6#1 = RAdd(r14C5,r149A);
      real r14C7#1 = RMul(realLit14A6,r149D);
      real r14C8#1 = RAdd(r14C7,r14A0);
      real r14C9#1 = RAdd(r14C8,r14A2);
      tensor[3] tensor14CA#1 = <tensor[3]>[r14C3,r14C6,r14C9];
      tensor[3,3] tensor14CB#1 = <tensor[3,3]>[tensor14C0,tensor14A5,tensor14CA];
      real r14CC#1 = RMul(realLit14A6,r148F);
      real r14CD#1 = RAdd(r148E,r14CC);
      real r14CE#1 = RAdd(r14CD,r1492);
      real r14CF#1 = RMul(realLit14A6,r1497);
      real r14D0#1 = RAdd(r1496,r14CF);
      real r14D1#1 = RAdd(r14D0,r149A);
      real r14D2#1 = RMul(realLit14A6,r149F);
      real r14D3#1 = RAdd(r149E,r14D2);
      real r14D4#1 = RAdd(r14D3,r14A2);
      tensor[3] tensor14D5#1 = <tensor[3]>[r14CE,r14D1,r14D4];
      real r14D6#1 = RMul(realLit14AE,r148D);
      real r14D7#1 = RAdd(r14D6,r1490);
      real r14D8#1 = RAdd(r14D7,r1492);
      real r14D9#1 = RMul(realLit14AE,r1495);
      real r14DA#1 = RAdd(r14D9,r1498);
      real r14DB#1 = RAdd(r14DA,r149A);
      real r14DC#1 = RMul(realLit14AE,r149D);
      real r14DD#1 = RAdd(r14DC,r14A0);
      real r14DE#1 = RAdd(r14DD,r14A2);
      tensor[3] tensor14DF#1 = <tensor[3]>[r14D8,r14DB,r14DE];
      tensor[3,3] tensor14E0#1 = <tensor[3,3]>[tensor14D5,tensor14DF,tensor14A5];
      tensor[3,3,3] op1_e3_l_12148B#27 = <tensor[3,3,3]>[tensor14B9,tensor14CB,tensor14E0];
      real r1539#9 = TensorIndex<tensor[3,3],[0,0]>(probe_l_1013D4);
      real r153A#3 = TensorIndex<tensor[3,3,3],[0,0,0]>(op1_e3_l_12148B);
      real r153B#1 = RMul(r1539,r153A);
      real r153C#9 = TensorIndex<tensor[3,3],[1,0]>(probe_l_1013D4);
      real r153D#3 = TensorIndex<tensor[3,3,3],[1,0,0]>(op1_e3_l_12148B);
      real r153E#1 = RMul(r153C,r153D);
      real r153F#9 = TensorIndex<tensor[3,3],[2,0]>(probe_l_1013D4);
      real r1540#3 = TensorIndex<tensor[3,3,3],[2,0,0]>(op1_e3_l_12148B);
      real r1541#1 = RMul(r153F,r1540);
      real r1542#1 = RAdd(r153B,r153E);
      real r1543#1 = RAdd(r1542,r1541);
      real r1544#3 = TensorIndex<tensor[3,3,3],[0,0,1]>(op1_e3_l_12148B);
      real r1545#1 = RMul(r1539,r1544);
      real r1546#3 = TensorIndex<tensor[3,3,3],[1,0,1]>(op1_e3_l_12148B);
      real r1547#1 = RMul(r153C,r1546);
      real r1548#3 = TensorIndex<tensor[3,3,3],[2,0,1]>(op1_e3_l_12148B);
      real r1549#1 = RMul(r153F,r1548);
      real r154A#1 = RAdd(r1545,r1547);
      real r154B#1 = RAdd(r154A,r1549);
      real r154C#3 = TensorIndex<tensor[3,3,3],[0,0,2]>(op1_e3_l_12148B);
      real r154D#1 = RMul(r1539,r154C);
      real r154E#3 = TensorIndex<tensor[3,3,3],[1,0,2]>(op1_e3_l_12148B);
      real r154F#1 = RMul(r153C,r154E);
      real r1550#3 = TensorIndex<tensor[3,3,3],[2,0,2]>(op1_e3_l_12148B);
      real r1551#1 = RMul(r153F,r1550);
      real r1552#1 = RAdd(r154D,r154F);
      real r1553#1 = RAdd(r1552,r1551);
      tensor[3] tensor1554#1 = <tensor[3]>[r1543,r154B,r1553];
      real r1555#3 = TensorIndex<tensor[3,3,3],[0,1,0]>(op1_e3_l_12148B);
      real r1556#1 = RMul(r1539,r1555);
      real r1557#3 = TensorIndex<tensor[3,3,3],[1,1,0]>(op1_e3_l_12148B);
      real r1558#1 = RMul(r153C,r1557);
      real r1559#3 = TensorIndex<tensor[3,3,3],[2,1,0]>(op1_e3_l_12148B);
      real r155A#1 = RMul(r153F,r1559);
      real r155B#1 = RAdd(r1556,r1558);
      real r155C#1 = RAdd(r155B,r155A);
      real r155D#3 = TensorIndex<tensor[3,3,3],[0,1,1]>(op1_e3_l_12148B);
      real r155E#1 = RMul(r1539,r155D);
      real r155F#3 = TensorIndex<tensor[3,3,3],[1,1,1]>(op1_e3_l_12148B);
      real r1560#1 = RMul(r153C,r155F);
      real r1561#3 = TensorIndex<tensor[3,3,3],[2,1,1]>(op1_e3_l_12148B);
      real r1562#1 = RMul(r153F,r1561);
      real r1563#1 = RAdd(r155E,r1560);
      real r1564#1 = RAdd(r1563,r1562);
      real r1565#3 = TensorIndex<tensor[3,3,3],[0,1,2]>(op1_e3_l_12148B);
      real r1566#1 = RMul(r1539,r1565);
      real r1567#3 = TensorIndex<tensor[3,3,3],[1,1,2]>(op1_e3_l_12148B);
      real r1568#1 = RMul(r153C,r1567);
      real r1569#3 = TensorIndex<tensor[3,3,3],[2,1,2]>(op1_e3_l_12148B);
      real r156A#1 = RMul(r153F,r1569);
      real r156B#1 = RAdd(r1566,r1568);
      real r156C#1 = RAdd(r156B,r156A);
      tensor[3] tensor156D#1 = <tensor[3]>[r155C,r1564,r156C];
      real r156E#3 = TensorIndex<tensor[3,3,3],[0,2,0]>(op1_e3_l_12148B);
      real r156F#1 = RMul(r1539,r156E);
      real r1570#3 = TensorIndex<tensor[3,3,3],[1,2,0]>(op1_e3_l_12148B);
      real r1571#1 = RMul(r153C,r1570);
      real r1572#3 = TensorIndex<tensor[3,3,3],[2,2,0]>(op1_e3_l_12148B);
      real r1573#1 = RMul(r153F,r1572);
      real r1574#1 = RAdd(r156F,r1571);
      real r1575#1 = RAdd(r1574,r1573);
      real r1576#3 = TensorIndex<tensor[3,3,3],[0,2,1]>(op1_e3_l_12148B);
      real r1577#1 = RMul(r1539,r1576);
      real r1578#3 = TensorIndex<tensor[3,3,3],[1,2,1]>(op1_e3_l_12148B);
      real r1579#1 = RMul(r153C,r1578);
      real r157A#3 = TensorIndex<tensor[3,3,3],[2,2,1]>(op1_e3_l_12148B);
      real r157B#1 = RMul(r153F,r157A);
      real r157C#1 = RAdd(r1577,r1579);
      real r157D#1 = RAdd(r157C,r157B);
      real r157E#3 = TensorIndex<tensor[3,3,3],[0,2,2]>(op1_e3_l_12148B);
      real r157F#1 = RMul(r1539,r157E);
      real r1580#3 = TensorIndex<tensor[3,3,3],[1,2,2]>(op1_e3_l_12148B);
      real r1581#1 = RMul(r153C,r1580);
      real r1582#3 = TensorIndex<tensor[3,3,3],[2,2,2]>(op1_e3_l_12148B);
      real r1583#1 = RMul(r153F,r1582);
      real r1584#1 = RAdd(r157F,r1581);
      real r1585#1 = RAdd(r1584,r1583);
      tensor[3] tensor1586#1 = <tensor[3]>[r1575,r157D,r1585];
      tensor[3,3] tensor1587#1 = <tensor[3,3]>[tensor1554,tensor156D,tensor1586];
      real r1588#9 = TensorIndex<tensor[3,3],[0,1]>(probe_l_1013D4);
      real r1589#1 = RMul(r1588,r153A);
      real r158A#9 = TensorIndex<tensor[3,3],[1,1]>(probe_l_1013D4);
      real r158B#1 = RMul(r158A,r153D);
      real r158C#9 = TensorIndex<tensor[3,3],[2,1]>(probe_l_1013D4);
      real r158D#1 = RMul(r158C,r1540);
      real r158E#1 = RAdd(r1589,r158B);
      real r158F#1 = RAdd(r158E,r158D);
      real r1590#1 = RMul(r1588,r1544);
      real r1591#1 = RMul(r158A,r1546);
      real r1592#1 = RMul(r158C,r1548);
      real r1593#1 = RAdd(r1590,r1591);
      real r1594#1 = RAdd(r1593,r1592);
      real r1595#1 = RMul(r1588,r154C);
      real r1596#1 = RMul(r158A,r154E);
      real r1597#1 = RMul(r158C,r1550);
      real r1598#1 = RAdd(r1595,r1596);
      real r1599#1 = RAdd(r1598,r1597);
      tensor[3] tensor159A#1 = <tensor[3]>[r158F,r1594,r1599];
      real r159B#1 = RMul(r1588,r1555);
      real r159C#1 = RMul(r158A,r1557);
      real r159D#1 = RMul(r158C,r1559);
      real r159E#1 = RAdd(r159B,r159C);
      real r159F#1 = RAdd(r159E,r159D);
      real r15A0#1 = RMul(r1588,r155D);
      real r15A1#1 = RMul(r158A,r155F);
      real r15A2#1 = RMul(r158C,r1561);
      real r15A3#1 = RAdd(r15A0,r15A1);
      real r15A4#1 = RAdd(r15A3,r15A2);
      real r15A5#1 = RMul(r1588,r1565);
      real r15A6#1 = RMul(r158A,r1567);
      real r15A7#1 = RMul(r158C,r1569);
      real r15A8#1 = RAdd(r15A5,r15A6);
      real r15A9#1 = RAdd(r15A8,r15A7);
      tensor[3] tensor15AA#1 = <tensor[3]>[r159F,r15A4,r15A9];
      real r15AB#1 = RMul(r1588,r156E);
      real r15AC#1 = RMul(r158A,r1570);
      real r15AD#1 = RMul(r158C,r1572);
      real r15AE#1 = RAdd(r15AB,r15AC);
      real r15AF#1 = RAdd(r15AE,r15AD);
      real r15B0#1 = RMul(r1588,r1576);
      real r15B1#1 = RMul(r158A,r1578);
      real r15B2#1 = RMul(r158C,r157A);
      real r15B3#1 = RAdd(r15B0,r15B1);
      real r15B4#1 = RAdd(r15B3,r15B2);
      real r15B5#1 = RMul(r1588,r157E);
      real r15B6#1 = RMul(r158A,r1580);
      real r15B7#1 = RMul(r158C,r1582);
      real r15B8#1 = RAdd(r15B5,r15B6);
      real r15B9#1 = RAdd(r15B8,r15B7);
      tensor[3] tensor15BA#1 = <tensor[3]>[r15AF,r15B4,r15B9];
      tensor[3,3] tensor15BB#1 = <tensor[3,3]>[tensor159A,tensor15AA,tensor15BA];
      real r15BC#9 = TensorIndex<tensor[3,3],[0,2]>(probe_l_1013D4);
      real r15BD#1 = RMul(r15BC,r153A);
      real r15BE#9 = TensorIndex<tensor[3,3],[1,2]>(probe_l_1013D4);
      real r15BF#1 = RMul(r15BE,r153D);
      real r15C0#9 = TensorIndex<tensor[3,3],[2,2]>(probe_l_1013D4);
      real r15C1#1 = RMul(r15C0,r1540);
      real r15C2#1 = RAdd(r15BD,r15BF);
      real r15C3#1 = RAdd(r15C2,r15C1);
      real r15C4#1 = RMul(r15BC,r1544);
      real r15C5#1 = RMul(r15BE,r1546);
      real r15C6#1 = RMul(r15C0,r1548);
      real r15C7#1 = RAdd(r15C4,r15C5);
      real r15C8#1 = RAdd(r15C7,r15C6);
      real r15C9#1 = RMul(r15BC,r154C);
      real r15CA#1 = RMul(r15BE,r154E);
      real r15CB#1 = RMul(r15C0,r1550);
      real r15CC#1 = RAdd(r15C9,r15CA);
      real r15CD#1 = RAdd(r15CC,r15CB);
      tensor[3] tensor15CE#1 = <tensor[3]>[r15C3,r15C8,r15CD];
      real r15CF#1 = RMul(r15BC,r1555);
      real r15D0#1 = RMul(r15BE,r1557);
      real r15D1#1 = RMul(r15C0,r1559);
      real r15D2#1 = RAdd(r15CF,r15D0);
      real r15D3#1 = RAdd(r15D2,r15D1);
      real r15D4#1 = RMul(r15BC,r155D);
      real r15D5#1 = RMul(r15BE,r155F);
      real r15D6#1 = RMul(r15C0,r1561);
      real r15D7#1 = RAdd(r15D4,r15D5);
      real r15D8#1 = RAdd(r15D7,r15D6);
      real r15D9#1 = RMul(r15BC,r1565);
      real r15DA#1 = RMul(r15BE,r1567);
      real r15DB#1 = RMul(r15C0,r1569);
      real r15DC#1 = RAdd(r15D9,r15DA);
      real r15DD#1 = RAdd(r15DC,r15DB);
      tensor[3] tensor15DE#1 = <tensor[3]>[r15D3,r15D8,r15DD];
      real r15DF#1 = RMul(r15BC,r156E);
      real r15E0#1 = RMul(r15BE,r1570);
      real r15E1#1 = RMul(r15C0,r1572);
      real r15E2#1 = RAdd(r15DF,r15E0);
      real r15E3#1 = RAdd(r15E2,r15E1);
      real r15E4#1 = RMul(r15BC,r1576);
      real r15E5#1 = RMul(r15BE,r1578);
      real r15E6#1 = RMul(r15C0,r157A);
      real r15E7#1 = RAdd(r15E4,r15E5);
      real r15E8#1 = RAdd(r15E7,r15E6);
      real r15E9#1 = RMul(r15BC,r157E);
      real r15EA#1 = RMul(r15BE,r1580);
      real r15EB#1 = RMul(r15C0,r1582);
      real r15EC#1 = RAdd(r15E9,r15EA);
      real r15ED#1 = RAdd(r15EC,r15EB);
      tensor[3] tensor15EE#1 = <tensor[3]>[r15E3,r15E8,r15ED];
      tensor[3,3] tensor15EF#1 = <tensor[3,3]>[tensor15CE,tensor15DE,tensor15EE];
      tensor[3,3,3] op1_e3_l_131538#27 = <tensor[3,3,3]>[tensor1587,tensor15BB,tensor15EF];
      real r16AA#1 = TensorIndex<tensor[4,3],[0,0]>(femDofs1362);
      real r16AB#3 = TensorIndex<tensor[3,4],[0,0]>(basisResult13B6);
      real r16AC#1 = RMul(r16AA,r16AB);
      real r16AD#1 = TensorIndex<tensor[4,3],[1,0]>(femDofs1362);
      real r16AE#3 = TensorIndex<tensor[3,4],[0,1]>(basisResult13B6);
      real r16AF#1 = RMul(r16AD,r16AE);
      real r16B0#1 = TensorIndex<tensor[4,3],[2,0]>(femDofs1362);
      real r16B1#3 = TensorIndex<tensor[3,4],[0,2]>(basisResult13B6);
      real r16B2#1 = RMul(r16B0,r16B1);
      real r16B3#1 = TensorIndex<tensor[4,3],[3,0]>(femDofs1362);
      real r16B4#3 = TensorIndex<tensor[3,4],[0,3]>(basisResult13B6);
      real r16B5#1 = RMul(r16B3,r16B4);
      real r16B6#1 = RAdd(r16AC,r16AF);
      real r16B7#1 = RAdd(r16B6,r16B2);
      real r16B8#1 = RAdd(r16B7,r16B5);
      real r16B9#1 = TensorIndex<tensor[4,3],[0,1]>(femDofs1362);
      real r16BA#1 = RMul(r16B9,r16AB);
      real r16BB#1 = TensorIndex<tensor[4,3],[1,1]>(femDofs1362);
      real r16BC#1 = RMul(r16BB,r16AE);
      real r16BD#1 = TensorIndex<tensor[4,3],[2,1]>(femDofs1362);
      real r16BE#1 = RMul(r16BD,r16B1);
      real r16BF#1 = TensorIndex<tensor[4,3],[3,1]>(femDofs1362);
      real r16C0#1 = RMul(r16BF,r16B4);
      real r16C1#1 = RAdd(r16BA,r16BC);
      real r16C2#1 = RAdd(r16C1,r16BE);
      real r16C3#1 = RAdd(r16C2,r16C0);
      real r16C4#1 = TensorIndex<tensor[4,3],[0,2]>(femDofs1362);
      real r16C5#1 = RMul(r16C4,r16AB);
      real r16C6#1 = TensorIndex<tensor[4,3],[1,2]>(femDofs1362);
      real r16C7#1 = RMul(r16C6,r16AE);
      real r16C8#1 = TensorIndex<tensor[4,3],[2,2]>(femDofs1362);
      real r16C9#1 = RMul(r16C8,r16B1);
      real r16CA#1 = TensorIndex<tensor[4,3],[3,2]>(femDofs1362);
      real r16CB#1 = RMul(r16CA,r16B4);
      real r16CC#1 = RAdd(r16C5,r16C7);
      real r16CD#1 = RAdd(r16CC,r16C9);
      real r16CE#1 = RAdd(r16CD,r16CB);
      tensor[3] probe_l_1416A9#1 = <tensor[3]>[r16B8,r16C3,r16CE];
      real r16F7#1 = TensorIndex<tensor[4,3],[0,0]>(femDofs1362);
      real r16F8#3 = TensorIndex<tensor[3,4],[1,0]>(basisResult13B6);
      real r16F9#1 = RMul(r16F7,r16F8);
      real r16FA#1 = TensorIndex<tensor[4,3],[1,0]>(femDofs1362);
      real r16FB#3 = TensorIndex<tensor[3,4],[1,1]>(basisResult13B6);
      real r16FC#1 = RMul(r16FA,r16FB);
      real r16FD#1 = TensorIndex<tensor[4,3],[2,0]>(femDofs1362);
      real r16FE#3 = TensorIndex<tensor[3,4],[1,2]>(basisResult13B6);
      real r16FF#1 = RMul(r16FD,r16FE);
      real r1700#1 = TensorIndex<tensor[4,3],[3,0]>(femDofs1362);
      real r1701#3 = TensorIndex<tensor[3,4],[1,3]>(basisResult13B6);
      real r1702#1 = RMul(r1700,r1701);
      real r1703#1 = RAdd(r16F9,r16FC);
      real r1704#1 = RAdd(r1703,r16FF);
      real r1705#1 = RAdd(r1704,r1702);
      real r1706#1 = TensorIndex<tensor[4,3],[0,1]>(femDofs1362);
      real r1707#1 = RMul(r1706,r16F8);
      real r1708#1 = TensorIndex<tensor[4,3],[1,1]>(femDofs1362);
      real r1709#1 = RMul(r1708,r16FB);
      real r170A#1 = TensorIndex<tensor[4,3],[2,1]>(femDofs1362);
      real r170B#1 = RMul(r170A,r16FE);
      real r170C#1 = TensorIndex<tensor[4,3],[3,1]>(femDofs1362);
      real r170D#1 = RMul(r170C,r1701);
      real r170E#1 = RAdd(r1707,r1709);
      real r170F#1 = RAdd(r170E,r170B);
      real r1710#1 = RAdd(r170F,r170D);
      real r1711#1 = TensorIndex<tensor[4,3],[0,2]>(femDofs1362);
      real r1712#1 = RMul(r1711,r16F8);
      real r1713#1 = TensorIndex<tensor[4,3],[1,2]>(femDofs1362);
      real r1714#1 = RMul(r1713,r16FB);
      real r1715#1 = TensorIndex<tensor[4,3],[2,2]>(femDofs1362);
      real r1716#1 = RMul(r1715,r16FE);
      real r1717#1 = TensorIndex<tensor[4,3],[3,2]>(femDofs1362);
      real r1718#1 = RMul(r1717,r1701);
      real r1719#1 = RAdd(r1712,r1714);
      real r171A#1 = RAdd(r1719,r1716);
      real r171B#1 = RAdd(r171A,r1718);
      tensor[3] probe_l_1516F6#3 = <tensor[3]>[r1705,r1710,r171B];
      real r1744#1 = TensorIndex<tensor[4,3],[0,0]>(femDofs1362);
      real r1745#3 = TensorIndex<tensor[3,4],[2,0]>(basisResult13B6);
      real r1746#1 = RMul(r1744,r1745);
      real r1747#1 = TensorIndex<tensor[4,3],[1,0]>(femDofs1362);
      real r1748#3 = TensorIndex<tensor[3,4],[2,1]>(basisResult13B6);
      real r1749#1 = RMul(r1747,r1748);
      real r174A#1 = TensorIndex<tensor[4,3],[2,0]>(femDofs1362);
      real r174B#3 = TensorIndex<tensor[3,4],[2,2]>(basisResult13B6);
      real r174C#1 = RMul(r174A,r174B);
      real r174D#1 = TensorIndex<tensor[4,3],[3,0]>(femDofs1362);
      real r174E#3 = TensorIndex<tensor[3,4],[2,3]>(basisResult13B6);
      real r174F#1 = RMul(r174D,r174E);
      real r1750#1 = RAdd(r1746,r1749);
      real r1751#1 = RAdd(r1750,r174C);
      real r1752#1 = RAdd(r1751,r174F);
      real r1753#1 = TensorIndex<tensor[4,3],[0,1]>(femDofs1362);
      real r1754#1 = RMul(r1753,r1745);
      real r1755#1 = TensorIndex<tensor[4,3],[1,1]>(femDofs1362);
      real r1756#1 = RMul(r1755,r1748);
      real r1757#1 = TensorIndex<tensor[4,3],[2,1]>(femDofs1362);
      real r1758#1 = RMul(r1757,r174B);
      real r1759#1 = TensorIndex<tensor[4,3],[3,1]>(femDofs1362);
      real r175A#1 = RMul(r1759,r174E);
      real r175B#1 = RAdd(r1754,r1756);
      real r175C#1 = RAdd(r175B,r1758);
      real r175D#1 = RAdd(r175C,r175A);
      real r175E#1 = TensorIndex<tensor[4,3],[0,2]>(femDofs1362);
      real r175F#1 = RMul(r175E,r1745);
      real r1760#1 = TensorIndex<tensor[4,3],[1,2]>(femDofs1362);
      real r1761#1 = RMul(r1760,r1748);
      real r1762#1 = TensorIndex<tensor[4,3],[2,2]>(femDofs1362);
      real r1763#1 = RMul(r1762,r174B);
      real r1764#1 = TensorIndex<tensor[4,3],[3,2]>(femDofs1362);
      real r1765#1 = RMul(r1764,r174E);
      real r1766#1 = RAdd(r175F,r1761);
      real r1767#1 = RAdd(r1766,r1763);
      real r1768#1 = RAdd(r1767,r1765);
      tensor[3] probe_l_161743#3 = <tensor[3]>[r1752,r175D,r1768];
      real realLit1791#3 = 0.e0;
      real r1792#3 = TensorIndex<tensor[3],[0]>(probe_l_161743);
      real r1793#3 = RMul(realLit1791,r1792);
      real r1794#3 = TensorIndex<tensor[3],[1]>(probe_l_161743);
      real r1795#3 = RMul(realLit1791,r1794);
      real r1796#3 = TensorIndex<tensor[3],[2]>(probe_l_161743);
      real r1797#5 = RMul(realLit1791,r1796);
      real r1798#3 = RAdd(r1793,r1795);
      real r1799#3 = RAdd(r1798,r1797);
      real realLit179A#3 = 0.1e1;
      real r179B#1 = RMul(realLit179A,r1796);
      real r179C#1 = RAdd(r1798,r179B);
      real realLit179D#3 = -0.1e1;
      real r179E#1 = RMul(realLit179D,r1794);
      real r179F#1 = RAdd(r1793,r179E);
      real r17A0#1 = RAdd(r179F,r1797);
      tensor[3] tensor17A1#1 = <tensor[3]>[r1799,r179C,r17A0];
      real r17A2#1 = RMul(realLit179D,r1796);
      real r17A3#1 = RAdd(r1798,r17A2);
      real r17A4#1 = RMul(realLit179A,r1792);
      real r17A5#1 = RAdd(r17A4,r1795);
      real r17A6#1 = RAdd(r17A5,r1797);
      tensor[3] tensor17A7#1 = <tensor[3]>[r17A3,r1799,r17A6];
      real r17A8#1 = RMul(realLit179A,r1794);
      real r17A9#1 = RAdd(r1793,r17A8);
      real r17AA#1 = RAdd(r17A9,r1797);
      real r17AB#1 = RMul(realLit179D,r1792);
      real r17AC#1 = RAdd(r17AB,r1795);
      real r17AD#1 = RAdd(r17AC,r1797);
      tensor[3] tensor17AE#1 = <tensor[3]>[r17AA,r17AD,r1799];
      tensor[3,3] op1_e3_l_171790#3 = <tensor[3,3]>[tensor17A1,tensor17A7,tensor17AE];
      tensor[3] projParam17D0#1 = ProjectLast<tensor[3,3],[0]>(op1_e3_l_171790);
      real vdot17D1#1 = VDot<3>(probe_l_1516F6,projParam17D0);
      tensor[3] projParam17D2#1 = ProjectLast<tensor[3,3],[1]>(op1_e3_l_171790);
      real vdot17D3#1 = VDot<3>(probe_l_1516F6,projParam17D2);
      tensor[3] projParam17D4#1 = ProjectLast<tensor[3,3],[2]>(op1_e3_l_171790);
      real vdot17D5#1 = VDot<3>(probe_l_1516F6,projParam17D4);
      tensor[3] op1_e3_l_1817CF#1 = <tensor[3]>[vdot17D1,vdot17D3,vdot17D5];
      real op1_e3_l_1917DE#1 = VDot<3>(probe_l_1416A9,op1_e3_l_1817CF);
      real realLit17E2#27 = 0.e0;
      real r17E3#1 = TensorIndex<tensor[3,3,3],[0,0,0]>(op1_e3_l_131538);
      real r17E4#2 = RMul(realLit17E2,r17E3);
      real r17E5#2 = TensorIndex<tensor[3,3,3],[0,0,1]>(op1_e3_l_131538);
      real r17E6#1 = RMul(realLit17E2,r17E5);
      real r17E7#2 = TensorIndex<tensor[3,3,3],[0,0,2]>(op1_e3_l_131538);
      real r17E8#2 = RMul(realLit17E2,r17E7);
      real r17E9#2 = TensorIndex<tensor[3,3,3],[1,0,0]>(op1_e3_l_131538);
      real r17EA#2 = RMul(realLit17E2,r17E9);
      real r17EB#1 = TensorIndex<tensor[3,3,3],[1,0,1]>(op1_e3_l_131538);
      real r17EC#3 = RMul(realLit17E2,r17EB);
      real realLit17ED#9 = 0.1e1;
      real r17EE#2 = TensorIndex<tensor[3,3,3],[1,0,2]>(op1_e3_l_131538);
      real r17EF#1 = RMul(realLit17ED,r17EE);
      real r17F0#2 = TensorIndex<tensor[3,3,3],[2,0,0]>(op1_e3_l_131538);
      real r17F1#2 = RMul(realLit17E2,r17F0);
      real realLit17F2#9 = -0.1e1;
      real r17F3#2 = TensorIndex<tensor[3,3,3],[2,0,1]>(op1_e3_l_131538);
      real r17F4#1 = RMul(realLit17F2,r17F3);
      real r17F5#1 = TensorIndex<tensor[3,3,3],[2,0,2]>(op1_e3_l_131538);
      real r17F6#3 = RMul(realLit17E2,r17F5);
      real r17F7#2 = RAdd(r17E4,r17E6);
      real r17F8#1 = RAdd(r17F7,r17E8);
      real r17F9#1 = RAdd(r17F8,r17EA);
      real r17FA#1 = RAdd(r17F9,r17EC);
      real r17FB#1 = RAdd(r17FA,r17EF);
      real r17FC#1 = RAdd(r17FB,r17F1);
      real r17FD#1 = RAdd(r17FC,r17F4);
      real r17FE#1 = RAdd(r17FD,r17F6);
      real r17FF#1 = TensorIndex<tensor[3,3,3],[0,1,0]>(op1_e3_l_131538);
      real r1800#2 = RMul(realLit17E2,r17FF);
      real r1801#2 = TensorIndex<tensor[3,3,3],[0,1,1]>(op1_e3_l_131538);
      real r1802#1 = RMul(realLit17E2,r1801);
      real r1803#2 = TensorIndex<tensor[3,3,3],[0,1,2]>(op1_e3_l_131538);
      real r1804#2 = RMul(realLit17E2,r1803);
      real r1805#2 = TensorIndex<tensor[3,3,3],[1,1,0]>(op1_e3_l_131538);
      real r1806#2 = RMul(realLit17E2,r1805);
      real r1807#1 = TensorIndex<tensor[3,3,3],[1,1,1]>(op1_e3_l_131538);
      real r1808#3 = RMul(realLit17E2,r1807);
      real r1809#2 = TensorIndex<tensor[3,3,3],[1,1,2]>(op1_e3_l_131538);
      real r180A#1 = RMul(realLit17ED,r1809);
      real r180B#2 = TensorIndex<tensor[3,3,3],[2,1,0]>(op1_e3_l_131538);
      real r180C#2 = RMul(realLit17E2,r180B);
      real r180D#2 = TensorIndex<tensor[3,3,3],[2,1,1]>(op1_e3_l_131538);
      real r180E#1 = RMul(realLit17F2,r180D);
      real r180F#1 = TensorIndex<tensor[3,3,3],[2,1,2]>(op1_e3_l_131538);
      real r1810#3 = RMul(realLit17E2,r180F);
      real r1811#2 = RAdd(r1800,r1802);
      real r1812#1 = RAdd(r1811,r1804);
      real r1813#1 = RAdd(r1812,r1806);
      real r1814#1 = RAdd(r1813,r1808);
      real r1815#1 = RAdd(r1814,r180A);
      real r1816#1 = RAdd(r1815,r180C);
      real r1817#1 = RAdd(r1816,r180E);
      real r1818#1 = RAdd(r1817,r1810);
      real r1819#1 = TensorIndex<tensor[3,3,3],[0,2,0]>(op1_e3_l_131538);
      real r181A#2 = RMul(realLit17E2,r1819);
      real r181B#2 = TensorIndex<tensor[3,3,3],[0,2,1]>(op1_e3_l_131538);
      real r181C#1 = RMul(realLit17E2,r181B);
      real r181D#2 = TensorIndex<tensor[3,3,3],[0,2,2]>(op1_e3_l_131538);
      real r181E#2 = RMul(realLit17E2,r181D);
      real r181F#2 = TensorIndex<tensor[3,3,3],[1,2,0]>(op1_e3_l_131538);
      real r1820#2 = RMul(realLit17E2,r181F);
      real r1821#1 = TensorIndex<tensor[3,3,3],[1,2,1]>(op1_e3_l_131538);
      real r1822#3 = RMul(realLit17E2,r1821);
      real r1823#2 = TensorIndex<tensor[3,3,3],[1,2,2]>(op1_e3_l_131538);
      real r1824#1 = RMul(realLit17ED,r1823);
      real r1825#2 = TensorIndex<tensor[3,3,3],[2,2,0]>(op1_e3_l_131538);
      real r1826#2 = RMul(realLit17E2,r1825);
      real r1827#2 = TensorIndex<tensor[3,3,3],[2,2,1]>(op1_e3_l_131538);
      real r1828#1 = RMul(realLit17F2,r1827);
      real r1829#1 = TensorIndex<tensor[3,3,3],[2,2,2]>(op1_e3_l_131538);
      real r182A#3 = RMul(realLit17E2,r1829);
      real r182B#2 = RAdd(r181A,r181C);
      real r182C#1 = RAdd(r182B,r181E);
      real r182D#1 = RAdd(r182C,r1820);
      real r182E#1 = RAdd(r182D,r1822);
      real r182F#1 = RAdd(r182E,r1824);
      real r1830#1 = RAdd(r182F,r1826);
      real r1831#1 = RAdd(r1830,r1828);
      real r1832#1 = RAdd(r1831,r182A);
      tensor[3] tensor1833#1 = <tensor[3]>[r17FE,r1818,r1832];
      real r1834#1 = RMul(realLit17F2,r17E7);
      real r1835#2 = RMul(realLit17E2,r17EE);
      real r1836#1 = RMul(realLit17ED,r17F0);
      real r1837#2 = RMul(realLit17E2,r17F3);
      real r1838#1 = RAdd(r17F7,r1834);
      real r1839#1 = RAdd(r1838,r17EA);
      real r183A#1 = RAdd(r1839,r17EC);
      real r183B#1 = RAdd(r183A,r1835);
      real r183C#1 = RAdd(r183B,r1836);
      real r183D#1 = RAdd(r183C,r1837);
      real r183E#1 = RAdd(r183D,r17F6);
      real r183F#1 = RMul(realLit17F2,r1803);
      real r1840#2 = RMul(realLit17E2,r1809);
      real r1841#1 = RMul(realLit17ED,r180B);
      real r1842#2 = RMul(realLit17E2,r180D);
      real r1843#1 = RAdd(r1811,r183F);
      real r1844#1 = RAdd(r1843,r1806);
      real r1845#1 = RAdd(r1844,r1808);
      real r1846#1 = RAdd(r1845,r1840);
      real r1847#1 = RAdd(r1846,r1841);
      real r1848#1 = RAdd(r1847,r1842);
      real r1849#1 = RAdd(r1848,r1810);
      real r184A#1 = RMul(realLit17F2,r181D);
      real r184B#2 = RMul(realLit17E2,r1823);
      real r184C#1 = RMul(realLit17ED,r1825);
      real r184D#2 = RMul(realLit17E2,r1827);
      real r184E#1 = RAdd(r182B,r184A);
      real r184F#1 = RAdd(r184E,r1820);
      real r1850#1 = RAdd(r184F,r1822);
      real r1851#1 = RAdd(r1850,r184B);
      real r1852#1 = RAdd(r1851,r184C);
      real r1853#1 = RAdd(r1852,r184D);
      real r1854#1 = RAdd(r1853,r182A);
      tensor[3] tensor1855#1 = <tensor[3]>[r183E,r1849,r1854];
      real r1856#1 = RMul(realLit17ED,r17E5);
      real r1857#1 = RMul(realLit17F2,r17E9);
      real r1858#1 = RAdd(r17E4,r1856);
      real r1859#1 = RAdd(r1858,r17E8);
      real r185A#1 = RAdd(r1859,r1857);
      real r185B#1 = RAdd(r185A,r17EC);
      real r185C#1 = RAdd(r185B,r1835);
      real r185D#1 = RAdd(r185C,r17F1);
      real r185E#1 = RAdd(r185D,r1837);
      real r185F#1 = RAdd(r185E,r17F6);
      real r1860#1 = RMul(realLit17ED,r1801);
      real r1861#1 = RMul(realLit17F2,r1805);
      real r1862#1 = RAdd(r1800,r1860);
      real r1863#1 = RAdd(r1862,r1804);
      real r1864#1 = RAdd(r1863,r1861);
      real r1865#1 = RAdd(r1864,r1808);
      real r1866#1 = RAdd(r1865,r1840);
      real r1867#1 = RAdd(r1866,r180C);
      real r1868#1 = RAdd(r1867,r1842);
      real r1869#1 = RAdd(r1868,r1810);
      real r186A#1 = RMul(realLit17ED,r181B);
      real r186B#1 = RMul(realLit17F2,r181F);
      real r186C#1 = RAdd(r181A,r186A);
      real r186D#1 = RAdd(r186C,r181E);
      real r186E#1 = RAdd(r186D,r186B);
      real r186F#1 = RAdd(r186E,r1822);
      real r1870#1 = RAdd(r186F,r184B);
      real r1871#1 = RAdd(r1870,r1826);
      real r1872#1 = RAdd(r1871,r184D);
      real r1873#1 = RAdd(r1872,r182A);
      tensor[3] tensor1874#1 = <tensor[3]>[r185F,r1869,r1873];
      tensor[3,3] op1_e3_l_2017E1#9 = <tensor[3,3]>[tensor1833,tensor1855,tensor1874];
      real realLit190B#1 = 0.2e1;
      real op1_e3_l_21190A#9 = RMul(realLit190B,op1_e3_l_1917DE);
      real varAcc1911#1 = VIndex<3,0>(xn1910);
      real varAcc1912#1 = VIndex<3,1>(xn1910);
      real varAcc1913#1 = VIndex<3,2>(xn1910);
      real coeff1914#3 = -0.1e1;
      real iden1915#1 = varAcc1911;
      real one1916#11 = 0.1e1;
      real prod1917#2 = RMul(one1916,one1916);
      real prod1918#2 = RMul(iden1915,prod1917);
      real iden1919#1 = varAcc1912;
      real prod191A#1 = RMul(iden1919,one1916);
      real prod191B#2 = RMul(one1916,prod191A);
      real iden191C#1 = varAcc1913;
      real prod191D#1 = RMul(one1916,iden191C);
      real prod191E#2 = RMul(one1916,prod191D);
      real prod191F#1 = RMul(one1916,prod1917);
      real mult1920#1 = RMul(one1916,prod191F);
      real mult1921#1 = RMul(coeff1914,prod191E);
      real mult1922#1 = RMul(coeff1914,prod191B);
      real mult1923#1 = RMul(coeff1914,prod1918);
      real sum1924#1 = RAdd(mult1922,mult1923);
      real sum1925#1 = RAdd(mult1921,sum1924);
      real sum1926#1 = RAdd(mult1920,sum1925);
      real intermediate1927#1 = sum1926;
      real basisEval1928#1 = RMul(one1916,prod1918);
      real basisEval1929#1 = RMul(one1916,prod191B);
      real basisEval192A#1 = RMul(one1916,prod191E);
      tensor[4] intermediateCons192B#1 = <tensor[4]>[intermediate1927,basisEval1928,basisEval1929,basisEval192A];
      tensor[4] basisResult190F#8 = intermediateCons192B;
      real r1949#1 = TensorIndex<tensor[4,3],[0,0]>(femDofs1362);
      real r194A#3 = TensorIndex<tensor[4],[0]>(basisResult190F);
      real r194B#1 = RMul(r1949,r194A);
      real r194C#1 = TensorIndex<tensor[4,3],[1,0]>(femDofs1362);
      real r194D#3 = TensorIndex<tensor[4],[1]>(basisResult190F);
      real r194E#1 = RMul(r194C,r194D);
      real r194F#1 = TensorIndex<tensor[4,3],[2,0]>(femDofs1362);
      real r1950#3 = TensorIndex<tensor[4],[2]>(basisResult190F);
      real r1951#1 = RMul(r194F,r1950);
      real r1952#1 = TensorIndex<tensor[4,3],[3,0]>(femDofs1362);
      real r1953#3 = TensorIndex<tensor[4],[3]>(basisResult190F);
      real r1954#1 = RMul(r1952,r1953);
      real r1955#1 = RAdd(r194B,r194E);
      real r1956#1 = RAdd(r1955,r1951);
      real r1957#1 = RAdd(r1956,r1954);
      real r1958#1 = TensorIndex<tensor[4,3],[0,1]>(femDofs1362);
      real r1959#1 = RMul(r1958,r194A);
      real r195A#1 = TensorIndex<tensor[4,3],[1,1]>(femDofs1362);
      real r195B#1 = RMul(r195A,r194D);
      real r195C#1 = TensorIndex<tensor[4,3],[2,1]>(femDofs1362);
      real r195D#1 = RMul(r195C,r1950);
      real r195E#1 = TensorIndex<tensor[4,3],[3,1]>(femDofs1362);
      real r195F#1 = RMul(r195E,r1953);
      real r1960#1 = RAdd(r1959,r195B);
      real r1961#1 = RAdd(r1960,r195D);
      real r1962#1 = RAdd(r1961,r195F);
      real r1963#1 = TensorIndex<tensor[4,3],[0,2]>(femDofs1362);
      real r1964#1 = RMul(r1963,r194A);
      real r1965#1 = TensorIndex<tensor[4,3],[1,2]>(femDofs1362);
      real r1966#1 = RMul(r1965,r194D);
      real r1967#1 = TensorIndex<tensor[4,3],[2,2]>(femDofs1362);
      real r1968#1 = RMul(r1967,r1950);
      real r1969#1 = TensorIndex<tensor[4,3],[3,2]>(femDofs1362);
      real r196A#1 = RMul(r1969,r1953);
      real r196B#1 = RAdd(r1964,r1966);
      real r196C#1 = RAdd(r196B,r1968);
      real r196D#1 = RAdd(r196C,r196A);
      tensor[3] probe_l_221948#1 = <tensor[3]>[r1957,r1962,r196D];
      real r1996#1 = TensorIndex<tensor[3,3],[0,0]>(op1_e3_l_2017E1);
      real r1997#1 = RDiv(r1996,op1_e3_l_21190A);
      real r1998#1 = TensorIndex<tensor[3,3],[0,1]>(op1_e3_l_2017E1);
      real r1999#1 = RDiv(r1998,op1_e3_l_21190A);
      real r199A#1 = TensorIndex<tensor[3,3],[0,2]>(op1_e3_l_2017E1);
      real r199B#1 = RDiv(r199A,op1_e3_l_21190A);
      tensor[3] tensor199C#1 = <tensor[3]>[r1997,r1999,r199B];
      real r199D#1 = TensorIndex<tensor[3,3],[1,0]>(op1_e3_l_2017E1);
      real r199E#1 = RDiv(r199D,op1_e3_l_21190A);
      real r199F#1 = TensorIndex<tensor[3,3],[1,1]>(op1_e3_l_2017E1);
      real r19A0#1 = RDiv(r199F,op1_e3_l_21190A);
      real r19A1#1 = TensorIndex<tensor[3,3],[1,2]>(op1_e3_l_2017E1);
      real r19A2#1 = RDiv(r19A1,op1_e3_l_21190A);
      tensor[3] tensor19A3#1 = <tensor[3]>[r199E,r19A0,r19A2];
      real r19A4#1 = TensorIndex<tensor[3,3],[2,0]>(op1_e3_l_2017E1);
      real r19A5#1 = RDiv(r19A4,op1_e3_l_21190A);
      real r19A6#1 = TensorIndex<tensor[3,3],[2,1]>(op1_e3_l_2017E1);
      real r19A7#1 = RDiv(r19A6,op1_e3_l_21190A);
      real r19A8#1 = TensorIndex<tensor[3,3],[2,2]>(op1_e3_l_2017E1);
      real r19A9#1 = RDiv(r19A8,op1_e3_l_21190A);
      tensor[3] tensor19AA#1 = <tensor[3]>[r19A5,r19A7,r19A9];
      tensor[3,3] op1_e3_l_231995#6 = <tensor[3,3]>[tensor199C,tensor19A3,tensor19AA];
      tensor[3] op1_e3_l_2419C2#3 = VSub<3>(probe_l_221948,pos1330);
      tensor[3] projParam19C6#1 = ProjectLast<tensor[3,3],[0]>(op1_e3_l_231995);
      real vdot19C7#1 = VDot<3>(projParam19C6,op1_e3_l_2419C2);
      tensor[3] projParam19C8#1 = ProjectLast<tensor[3,3],[1]>(op1_e3_l_231995);
      real vdot19C9#1 = VDot<3>(projParam19C8,op1_e3_l_2419C2);
      tensor[3] projParam19CA#1 = ProjectLast<tensor[3,3],[2]>(op1_e3_l_231995);
      real vdot19CB#1 = VDot<3>(projParam19CA,op1_e3_l_2419C2);
      tensor[3] op1_e3_l_2519C5#1 = <tensor[3]>[vdot19C7,vdot19C9,vdot19CB];
      tensor[3] xn19D4#4 = VSub<3>(xn1910,op1_e3_l_2519C5);
      real _t19D7#2 = 0.1e-7;
      real _t19D9#1 = RMul(_t19D7,_t19D7);
      real r19DD#1 = TensorIndex<tensor[4,3],[0,0]>(femDofs1362);
      real r19DE#3 = TensorIndex<tensor[4],[0]>(basisResult190F);
      real r19DF#1 = RMul(r19DD,r19DE);
      real r19E0#1 = TensorIndex<tensor[4,3],[1,0]>(femDofs1362);
      real r19E1#3 = TensorIndex<tensor[4],[1]>(basisResult190F);
      real r19E2#1 = RMul(r19E0,r19E1);
      real r19E3#1 = TensorIndex<tensor[4,3],[2,0]>(femDofs1362);
      real r19E4#3 = TensorIndex<tensor[4],[2]>(basisResult190F);
      real r19E5#1 = RMul(r19E3,r19E4);
      real r19E6#1 = TensorIndex<tensor[4,3],[3,0]>(femDofs1362);
      real r19E7#3 = TensorIndex<tensor[4],[3]>(basisResult190F);
      real r19E8#1 = RMul(r19E6,r19E7);
      real r19E9#1 = RAdd(r19DF,r19E2);
      real r19EA#1 = RAdd(r19E9,r19E5);
      real r19EB#1 = RAdd(r19EA,r19E8);
      real r19EC#1 = TensorIndex<tensor[4,3],[0,1]>(femDofs1362);
      real r19ED#1 = RMul(r19EC,r19DE);
      real r19EE#1 = TensorIndex<tensor[4,3],[1,1]>(femDofs1362);
      real r19EF#1 = RMul(r19EE,r19E1);
      real r19F0#1 = TensorIndex<tensor[4,3],[2,1]>(femDofs1362);
      real r19F1#1 = RMul(r19F0,r19E4);
      real r19F2#1 = TensorIndex<tensor[4,3],[3,1]>(femDofs1362);
      real r19F3#1 = RMul(r19F2,r19E7);
      real r19F4#1 = RAdd(r19ED,r19EF);
      real r19F5#1 = RAdd(r19F4,r19F1);
      real r19F6#1 = RAdd(r19F5,r19F3);
      real r19F7#1 = TensorIndex<tensor[4,3],[0,2]>(femDofs1362);
      real r19F8#1 = RMul(r19F7,r19DE);
      real r19F9#1 = TensorIndex<tensor[4,3],[1,2]>(femDofs1362);
      real r19FA#1 = RMul(r19F9,r19E1);
      real r19FB#1 = TensorIndex<tensor[4,3],[2,2]>(femDofs1362);
      real r19FC#1 = RMul(r19FB,r19E4);
      real r19FD#1 = TensorIndex<tensor[4,3],[3,2]>(femDofs1362);
      real r19FE#1 = RMul(r19FD,r19E7);
      real r19FF#1 = RAdd(r19F8,r19FA);
      real r1A00#1 = RAdd(r19FF,r19FC);
      real r1A01#1 = RAdd(r1A00,r19FE);
      tensor[3] probe_l_3019DC#1 = <tensor[3]>[r19EB,r19F6,r1A01];
      tensor[3] op1_e3_l_321A29#3 = VSub<3>(probe_l_3019DC,pos1330);
      tensor[3] projParam1A2D#1 = ProjectLast<tensor[3,3],[0]>(op1_e3_l_231995);
      real vdot1A2E#1 = VDot<3>(projParam1A2D,op1_e3_l_321A29);
      tensor[3] projParam1A2F#1 = ProjectLast<tensor[3,3],[1]>(op1_e3_l_231995);
      real vdot1A30#1 = VDot<3>(projParam1A2F,op1_e3_l_321A29);
      tensor[3] projParam1A31#1 = ProjectLast<tensor[3,3],[2]>(op1_e3_l_231995);
      real vdot1A32#1 = VDot<3>(projParam1A31,op1_e3_l_321A29);
      tensor[3] op1_e3_l_481A2C#2 = <tensor[3]>[vdot1A2E,vdot1A30,vdot1A32];
      real _t1A3B#1 = VDot<3>(op1_e3_l_481A2C,op1_e3_l_481A2C);
      bool _t1A3E#1 = GTE<real>(_t19D9,_t1A3B);
      if _t1A3E then goto ASSIGN1A42 else goto JOIN1A6D
    ASSIGN1A42:  preds = [COND1A40]
      real _t1A41#4 = 0.1e1;
      real _t1A43#4 = 0.1e-8;
      real _t1A45#1 = RAdd(_t1A41,_t1A43);
      tensor[3] _t1A48#1 = <tensor[3]>[_t1A41,_t1A41,_t1A41];
      real _t1A4A#1 = VDot<3>(_t1A48,xn19D4);
      bool _t1A4D#1 = GT<real>(_t1A45,_t1A4A);
      tensor[3] _t1A4F#1 = <tensor[3]>[_t1A43,_t1A43,_t1A43];
      tensor[3] _t1A51#3 = VAdd<3>(_t1A4F,xn19D4);
      real _t1A54#1 = VIndex<3,0>(_t1A51);
      real _t1A56#3 = -0.e0;
      bool _t1A58#1 = GT<real>(_t1A54,_t1A56);
      real _t1A5A#1 = VIndex<3,1>(_t1A51);
      bool _t1A5C#1 = GT<real>(_t1A5A,_t1A56);
      real _t1A5E#1 = VIndex<3,2>(_t1A51);
      bool _t1A60#1 = GT<real>(_t1A5E,_t1A56);
      bool _t1A62#1 = BAnd(_t1A5C,_t1A60);
      bool _t1A64#1 = BAnd(_t1A58,_t1A62);
      bool _t1A66#1 = BAnd(_t1A4D,_t1A64);
      if _t1A66 then goto ASSIGN1A6A else goto JOIN1A6C
    ASSIGN1A6A:  preds = [COND1A68]
      femData:MeshPos _t1A69#1 = ExtractFemItemN<[femData:Mesh,int,tensor[3],tensor[3]],femData:MeshPos,AllBuild(MeshPos),0000,"",[],int>(mesh132F,cellItter133A,xn19D4,pos1330);
      return _t1A69
      goto JOIN1A6C
    JOIN1A6C:  preds = [*RETURN(_t1A69)1A6B,COND1A68]
      goto JOIN1A6D
    JOIN1A6D:  preds = [JOIN1A6C,COND1A40]
      goto FOREACH1341
    NEXT1A70:  preds = [FOREACH1341]
      goto FOREACH133B
    ASSIGN1A72:  preds = [FOREACH133B]
      string _t1A71#1 = "Bad end 2";
      string _t1A73#1 = "\n";
      Print<[string,string]>(_t1A71,_t1A73);
      femData:MeshPos _t1A76#1 = ExtractFemItemN<[femData:Mesh],femData:MeshPos,InvalidBuild(MeshPos),0000,"",[],int>(mesh132F);
      return _t1A76
}
## input initialization
  ENTRY12CE:  preds = []
    return
## global-variable initialization
  ENTRY12D0:  preds = []
    femData:Mesh cube12D1#3 = globals.cube12C7;
    femData:Space 0space0342_intermedateGlobal12D3#1 = globals.0space0342_intermedateGlobal12C8;
    femData:FemFunc 0data0344_intermedateGlobal12D5#1 = globals.0data0344_intermedateGlobal12C9;
    int _t12D7#1 = 0;
    int _t12D9#1 = 1;
    int _t12DB#1 = ExtractFemItem<int,NumCell(Mesh)>(cube12D1);
    int _t12DD#1 = ISub(_t12DB,_t12D9);
    int[] _t12DF#1 = Range(_t12D7,_t12DD);
    femData:MeshCell[] _t12E1#1 = <femData:MeshCell[]>{};
  FOREACH12E4:  preds = [ASSIGN12E2,NEXT12EA]
    foreach (_t12E3 in _t12DF) on exit goto GASSIGN12EB
      femData:MeshCell[] _t12E8#2 = phi(_t12E1,_t12E7)
    femData:MeshCell _t12E5#1 = LoadFem<femData:MeshCell>(cube12D1,_t12E3);
    femData:MeshCell[] _t12E7#1 = Append<femData:MeshCell>(_t12E8,_t12E5);
    goto FOREACH12E4
  GASSIGN12EB:  preds = [FOREACH12E4]
    globals.0cell_cube12CA = _t12E8;
    femData:Space space12EC#1 = LoadFem<femData:Space>(0space0342_intermedateGlobal12D3,cube12D1);
    femData:FemFunc data12EE#2 = LoadFem<femData:FemFunc>(0data0344_intermedateGlobal12D5,space12EC);
    femData:Space _t12F0#2 = ExtractFem<femData:Space,femData:FemFunc>(data12EE);
    femData:Mesh _t12F2#1 = ExtractFem<femData:Mesh,femData:Space>(_t12F0);
    globals._t12CB = _t12F2;
    globals._tX12CC = _t12F0;
    globals.data12CD = data12EE;
    return
## strand
  strand gg (tensor[3] i12F8#1)
    state:
      output tensor[3] target;
      output tensor[3] translated;
      output bool valid;
      output femData:MeshCell c;
      output real result;
      output tensor[3] gradResult;
      output tensor[3] gradResultp;
    state init
      ENTRY1300:  preds = []
        femData:MeshCell[] 0cell_cube1301#1 = globals.0cell_cube12CA;
        real _nan1303#4 = nan;
        tensor[3] translated1305#3 = <tensor[3]>[_nan1303,_nan1303,_nan1303];
        bool valid1307#1 = false;
        int _t1309#1 = 0;
        femData:MeshCell c130B#1 = Subscript<femData:MeshCell[]>(0cell_cube1301,_t1309);
        self.target = i12F8;
        self.translated = translated1305;
        self.valid = valid1307;
        self.c = c130B;
        self.result = _nan1303;
        self.gradResult = translated1305;
        self.gradResultp = translated1305;
        return
    end state init
    method update
        ENTRY1315:  preds = []
          femData:Mesh _t1316#17 = globals._t12CB;
          femData:Space _t1318#35 = globals._tX12CC;
          femData:FemFunc data131A#35 = globals.data12CD;
          femData:Mesh cube131C#1 = globals.cube12C7;
          tensor[3] target131E#3 = self.target;
          tensor[3] translated1320#1 = self.translated;
          femData:MeshCell c1322#1 = self.c;
          real result1324#1 = self.result;
          tensor[3] gradResult1326#1 = self.gradResult;
          string _t1328#1 = "Running on ";
          string _t132A#1 = "\n";
          Print<[string,tensor[3],string]>(_t1328,target131E,_t132A);
          femData:MeshPos p132D#4 = findPos132E (cube131C,target131E);
          bool valid1A7A#2 = ExtractFemItem<bool,Valid(MeshPos)>(p132D);
          if valid1A7A then goto ASSIGN1A7E else goto ASSIGN2D44
        ASSIGN1A7E:  preds = [COND1A7C]
          femData:Mesh _t1A7D#1 = ExtractFem<femData:Mesh,femData:MeshPos>(p132D);
          int _t1A7F#1 = ExtractFemItem<int,CellIndex(MeshPos)>(p132D);
          femData:MeshCell c1A81#1 = LoadFem<femData:MeshCell>(_t1A7D,_t1A7F);
          tensor[3] translated1A83#1 = ExtractFemItem<tensor[3],RefPos(MeshPos)>(p132D);
          femData:MeshPos callFindPos1A85#2 = findPos132E (_t1316,target131E);
          int intPos1A87#2 = ExtractFemItem<int,CellIndex(Mesh)>(callFindPos1A85);
          tensor[3] refPos1A89#9 = ExtractFemItem<tensor[3],RefPos(Mesh)>(callFindPos1A85);
          int ilit1A8C#1 = 35;
          int mulRes1A8D#35 = IMul(intPos1A87,ilit1A8C);
          int ilit1A8E#1 = 0;
          int addRes1A8F#1 = IAdd(mulRes1A8D,ilit1A8E);
          int idx1A90#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1A8F);
          int ilit1A91#1 = 1;
          int addRes1A92#1 = IAdd(mulRes1A8D,ilit1A91);
          int idx1A93#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1A92);
          int ilit1A94#1 = 2;
          int addRes1A95#1 = IAdd(mulRes1A8D,ilit1A94);
          int idx1A96#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1A95);
          int ilit1A97#1 = 3;
          int addRes1A98#1 = IAdd(mulRes1A8D,ilit1A97);
          int idx1A99#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1A98);
          int ilit1A9A#1 = 4;
          int addRes1A9B#1 = IAdd(mulRes1A8D,ilit1A9A);
          int idx1A9C#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1A9B);
          int ilit1A9D#1 = 5;
          int addRes1A9E#1 = IAdd(mulRes1A8D,ilit1A9D);
          int idx1A9F#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1A9E);
          int ilit1AA0#1 = 6;
          int addRes1AA1#1 = IAdd(mulRes1A8D,ilit1AA0);
          int idx1AA2#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AA1);
          int ilit1AA3#1 = 7;
          int addRes1AA4#1 = IAdd(mulRes1A8D,ilit1AA3);
          int idx1AA5#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AA4);
          int ilit1AA6#1 = 8;
          int addRes1AA7#1 = IAdd(mulRes1A8D,ilit1AA6);
          int idx1AA8#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AA7);
          int ilit1AA9#1 = 9;
          int addRes1AAA#1 = IAdd(mulRes1A8D,ilit1AA9);
          int idx1AAB#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AAA);
          int ilit1AAC#1 = 10;
          int addRes1AAD#1 = IAdd(mulRes1A8D,ilit1AAC);
          int idx1AAE#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AAD);
          int ilit1AAF#1 = 11;
          int addRes1AB0#1 = IAdd(mulRes1A8D,ilit1AAF);
          int idx1AB1#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AB0);
          int ilit1AB2#1 = 12;
          int addRes1AB3#1 = IAdd(mulRes1A8D,ilit1AB2);
          int idx1AB4#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AB3);
          int ilit1AB5#1 = 13;
          int addRes1AB6#1 = IAdd(mulRes1A8D,ilit1AB5);
          int idx1AB7#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AB6);
          int ilit1AB8#1 = 14;
          int addRes1AB9#1 = IAdd(mulRes1A8D,ilit1AB8);
          int idx1ABA#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AB9);
          int ilit1ABB#1 = 15;
          int addRes1ABC#1 = IAdd(mulRes1A8D,ilit1ABB);
          int idx1ABD#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1ABC);
          int ilit1ABE#1 = 16;
          int addRes1ABF#1 = IAdd(mulRes1A8D,ilit1ABE);
          int idx1AC0#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1ABF);
          int ilit1AC1#1 = 17;
          int addRes1AC2#1 = IAdd(mulRes1A8D,ilit1AC1);
          int idx1AC3#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AC2);
          int ilit1AC4#1 = 18;
          int addRes1AC5#1 = IAdd(mulRes1A8D,ilit1AC4);
          int idx1AC6#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AC5);
          int ilit1AC7#1 = 19;
          int addRes1AC8#1 = IAdd(mulRes1A8D,ilit1AC7);
          int idx1AC9#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AC8);
          int ilit1ACA#1 = 20;
          int addRes1ACB#1 = IAdd(mulRes1A8D,ilit1ACA);
          int idx1ACC#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1ACB);
          int ilit1ACD#1 = 21;
          int addRes1ACE#1 = IAdd(mulRes1A8D,ilit1ACD);
          int idx1ACF#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1ACE);
          int ilit1AD0#1 = 22;
          int addRes1AD1#1 = IAdd(mulRes1A8D,ilit1AD0);
          int idx1AD2#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AD1);
          int ilit1AD3#1 = 23;
          int addRes1AD4#1 = IAdd(mulRes1A8D,ilit1AD3);
          int idx1AD5#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AD4);
          int ilit1AD6#1 = 24;
          int addRes1AD7#1 = IAdd(mulRes1A8D,ilit1AD6);
          int idx1AD8#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AD7);
          int ilit1AD9#1 = 25;
          int addRes1ADA#1 = IAdd(mulRes1A8D,ilit1AD9);
          int idx1ADB#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1ADA);
          int ilit1ADC#1 = 26;
          int addRes1ADD#1 = IAdd(mulRes1A8D,ilit1ADC);
          int idx1ADE#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1ADD);
          int ilit1ADF#1 = 27;
          int addRes1AE0#1 = IAdd(mulRes1A8D,ilit1ADF);
          int idx1AE1#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AE0);
          int ilit1AE2#1 = 28;
          int addRes1AE3#1 = IAdd(mulRes1A8D,ilit1AE2);
          int idx1AE4#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AE3);
          int ilit1AE5#1 = 29;
          int addRes1AE6#1 = IAdd(mulRes1A8D,ilit1AE5);
          int idx1AE7#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AE6);
          int ilit1AE8#1 = 30;
          int addRes1AE9#1 = IAdd(mulRes1A8D,ilit1AE8);
          int idx1AEA#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AE9);
          int ilit1AEB#1 = 31;
          int addRes1AEC#1 = IAdd(mulRes1A8D,ilit1AEB);
          int idx1AED#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AEC);
          int ilit1AEE#1 = 32;
          int addRes1AEF#1 = IAdd(mulRes1A8D,ilit1AEE);
          int idx1AF0#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AEF);
          int ilit1AF1#1 = 33;
          int addRes1AF2#1 = IAdd(mulRes1A8D,ilit1AF1);
          int idx1AF3#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AF2);
          int ilit1AF4#1 = 34;
          int addRes1AF5#1 = IAdd(mulRes1A8D,ilit1AF4);
          int idx1AF6#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AF5);
          int[35] seq1AF7#1 = <int[35]>{idx1A90,idx1A93,idx1A96,idx1A99,idx1A9C,idx1A9F,idx1AA2,idx1AA5,idx1AA8,idx1AAB,idx1AAE,idx1AB1,idx1AB4,idx1AB7,idx1ABA,idx1ABD,idx1AC0,idx1AC3,idx1AC6,idx1AC9,idx1ACC,idx1ACF,idx1AD2,idx1AD5,idx1AD8,idx1ADB,idx1ADE,idx1AE1,idx1AE4,idx1AE7,idx1AEA,idx1AED,idx1AF0,idx1AF3,idx1AF6};
          int[35] femIndicies1A8B#35 = seq1AF7;
          int ilit1B66#36 = 1;
          int ilit1B67#1 = 0;
          int idx1B68#1 = Subscript<int>(femIndicies1A8B,ilit1B67);
          int mulRes1B69#1 = IMul(ilit1B66,idx1B68);
          int idx1B6A#1 = Subscript<int>(femIndicies1A8B,ilit1B66);
          int mulRes1B6B#1 = IMul(ilit1B66,idx1B6A);
          int ilit1B6C#1 = 2;
          int idx1B6D#1 = Subscript<int>(femIndicies1A8B,ilit1B6C);
          int mulRes1B6E#1 = IMul(ilit1B66,idx1B6D);
          int ilit1B6F#1 = 3;
          int idx1B70#1 = Subscript<int>(femIndicies1A8B,ilit1B6F);
          int mulRes1B71#1 = IMul(ilit1B66,idx1B70);
          int ilit1B72#1 = 4;
          int idx1B73#1 = Subscript<int>(femIndicies1A8B,ilit1B72);
          int mulRes1B74#1 = IMul(ilit1B66,idx1B73);
          int ilit1B75#1 = 5;
          int idx1B76#1 = Subscript<int>(femIndicies1A8B,ilit1B75);
          int mulRes1B77#1 = IMul(ilit1B66,idx1B76);
          int ilit1B78#1 = 6;
          int idx1B79#1 = Subscript<int>(femIndicies1A8B,ilit1B78);
          int mulRes1B7A#1 = IMul(ilit1B66,idx1B79);
          int ilit1B7B#1 = 7;
          int idx1B7C#1 = Subscript<int>(femIndicies1A8B,ilit1B7B);
          int mulRes1B7D#1 = IMul(ilit1B66,idx1B7C);
          int ilit1B7E#1 = 8;
          int idx1B7F#1 = Subscript<int>(femIndicies1A8B,ilit1B7E);
          int mulRes1B80#1 = IMul(ilit1B66,idx1B7F);
          int ilit1B81#1 = 9;
          int idx1B82#1 = Subscript<int>(femIndicies1A8B,ilit1B81);
          int mulRes1B83#1 = IMul(ilit1B66,idx1B82);
          int ilit1B84#1 = 10;
          int idx1B85#1 = Subscript<int>(femIndicies1A8B,ilit1B84);
          int mulRes1B86#1 = IMul(ilit1B66,idx1B85);
          int ilit1B87#1 = 11;
          int idx1B88#1 = Subscript<int>(femIndicies1A8B,ilit1B87);
          int mulRes1B89#1 = IMul(ilit1B66,idx1B88);
          int ilit1B8A#1 = 12;
          int idx1B8B#1 = Subscript<int>(femIndicies1A8B,ilit1B8A);
          int mulRes1B8C#1 = IMul(ilit1B66,idx1B8B);
          int ilit1B8D#1 = 13;
          int idx1B8E#1 = Subscript<int>(femIndicies1A8B,ilit1B8D);
          int mulRes1B8F#1 = IMul(ilit1B66,idx1B8E);
          int ilit1B90#1 = 14;
          int idx1B91#1 = Subscript<int>(femIndicies1A8B,ilit1B90);
          int mulRes1B92#1 = IMul(ilit1B66,idx1B91);
          int ilit1B93#1 = 15;
          int idx1B94#1 = Subscript<int>(femIndicies1A8B,ilit1B93);
          int mulRes1B95#1 = IMul(ilit1B66,idx1B94);
          int ilit1B96#1 = 16;
          int idx1B97#1 = Subscript<int>(femIndicies1A8B,ilit1B96);
          int mulRes1B98#1 = IMul(ilit1B66,idx1B97);
          int ilit1B99#1 = 17;
          int idx1B9A#1 = Subscript<int>(femIndicies1A8B,ilit1B99);
          int mulRes1B9B#1 = IMul(ilit1B66,idx1B9A);
          int ilit1B9C#1 = 18;
          int idx1B9D#1 = Subscript<int>(femIndicies1A8B,ilit1B9C);
          int mulRes1B9E#1 = IMul(ilit1B66,idx1B9D);
          int ilit1B9F#1 = 19;
          int idx1BA0#1 = Subscript<int>(femIndicies1A8B,ilit1B9F);
          int mulRes1BA1#1 = IMul(ilit1B66,idx1BA0);
          int ilit1BA2#1 = 20;
          int idx1BA3#1 = Subscript<int>(femIndicies1A8B,ilit1BA2);
          int mulRes1BA4#1 = IMul(ilit1B66,idx1BA3);
          int ilit1BA5#1 = 21;
          int idx1BA6#1 = Subscript<int>(femIndicies1A8B,ilit1BA5);
          int mulRes1BA7#1 = IMul(ilit1B66,idx1BA6);
          int ilit1BA8#1 = 22;
          int idx1BA9#1 = Subscript<int>(femIndicies1A8B,ilit1BA8);
          int mulRes1BAA#1 = IMul(ilit1B66,idx1BA9);
          int ilit1BAB#1 = 23;
          int idx1BAC#1 = Subscript<int>(femIndicies1A8B,ilit1BAB);
          int mulRes1BAD#1 = IMul(ilit1B66,idx1BAC);
          int ilit1BAE#1 = 24;
          int idx1BAF#1 = Subscript<int>(femIndicies1A8B,ilit1BAE);
          int mulRes1BB0#1 = IMul(ilit1B66,idx1BAF);
          int ilit1BB1#1 = 25;
          int idx1BB2#1 = Subscript<int>(femIndicies1A8B,ilit1BB1);
          int mulRes1BB3#1 = IMul(ilit1B66,idx1BB2);
          int ilit1BB4#1 = 26;
          int idx1BB5#1 = Subscript<int>(femIndicies1A8B,ilit1BB4);
          int mulRes1BB6#1 = IMul(ilit1B66,idx1BB5);
          int ilit1BB7#1 = 27;
          int idx1BB8#1 = Subscript<int>(femIndicies1A8B,ilit1BB7);
          int mulRes1BB9#1 = IMul(ilit1B66,idx1BB8);
          int ilit1BBA#1 = 28;
          int idx1BBB#1 = Subscript<int>(femIndicies1A8B,ilit1BBA);
          int mulRes1BBC#1 = IMul(ilit1B66,idx1BBB);
          int ilit1BBD#1 = 29;
          int idx1BBE#1 = Subscript<int>(femIndicies1A8B,ilit1BBD);
          int mulRes1BBF#1 = IMul(ilit1B66,idx1BBE);
          int ilit1BC0#1 = 30;
          int idx1BC1#1 = Subscript<int>(femIndicies1A8B,ilit1BC0);
          int mulRes1BC2#1 = IMul(ilit1B66,idx1BC1);
          int ilit1BC3#1 = 31;
          int idx1BC4#1 = Subscript<int>(femIndicies1A8B,ilit1BC3);
          int mulRes1BC5#1 = IMul(ilit1B66,idx1BC4);
          int ilit1BC6#1 = 32;
          int idx1BC7#1 = Subscript<int>(femIndicies1A8B,ilit1BC6);
          int mulRes1BC8#1 = IMul(ilit1B66,idx1BC7);
          int ilit1BC9#1 = 33;
          int idx1BCA#1 = Subscript<int>(femIndicies1A8B,ilit1BC9);
          int mulRes1BCB#1 = IMul(ilit1B66,idx1BCA);
          int ilit1BCC#1 = 34;
          int idx1BCD#1 = Subscript<int>(femIndicies1A8B,ilit1BCC);
          int mulRes1BCE#1 = IMul(ilit1B66,idx1BCD);
          real dof1BCF#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B69);
          real dof1BD0#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B6B);
          real dof1BD1#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B6E);
          real dof1BD2#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B71);
          real dof1BD3#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B74);
          real dof1BD4#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B77);
          real dof1BD5#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B7A);
          real dof1BD6#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B7D);
          real dof1BD7#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B80);
          real dof1BD8#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B83);
          real dof1BD9#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B86);
          real dof1BDA#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B89);
          real dof1BDB#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B8C);
          real dof1BDC#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B8F);
          real dof1BDD#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B92);
          real dof1BDE#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B95);
          real dof1BDF#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B98);
          real dof1BE0#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B9B);
          real dof1BE1#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B9E);
          real dof1BE2#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BA1);
          real dof1BE3#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BA4);
          real dof1BE4#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BA7);
          real dof1BE5#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BAA);
          real dof1BE6#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BAD);
          real dof1BE7#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BB0);
          real dof1BE8#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BB3);
          real dof1BE9#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BB6);
          real dof1BEA#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BB9);
          real dof1BEB#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BBC);
          real dof1BEC#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BBF);
          real dof1BED#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BC2);
          real dof1BEE#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BC5);
          real dof1BEF#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BC8);
          real dof1BF0#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BCB);
          real dof1BF1#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BCE);
          tensor[35] dofs1BF2#1 = <tensor[35]>[dof1BCF,dof1BD0,dof1BD1,dof1BD2,dof1BD3,dof1BD4,dof1BD5,dof1BD6,dof1BD7,dof1BD8,dof1BD9,dof1BDA,dof1BDB,dof1BDC,dof1BDD,dof1BDE,dof1BDF,dof1BE0,dof1BE1,dof1BE2,dof1BE3,dof1BE4,dof1BE5,dof1BE6,dof1BE7,dof1BE8,dof1BE9,dof1BEA,dof1BEB,dof1BEC,dof1BED,dof1BEE,dof1BEF,dof1BF0,dof1BF1];
          tensor[35] femDofs1B65#4 = dofs1BF2;
          real varAcc1C82#4 = VIndex<3,0>(refPos1A89);
          real varAcc1C83#4 = VIndex<3,1>(refPos1A89);
          real varAcc1C84#4 = VIndex<3,2>(refPos1A89);
          real coeff1C85#3 = 0.106666666667e2;
          real iden1C86#11 = varAcc1C82;
          real prod21C87#7 = RMul(iden1C86,varAcc1C82);
          real prod31C88#4 = RMul(prod21C87,varAcc1C82);
          real prod41C89#1 = RMul(prod31C88,varAcc1C82);
          real one1C8A#26 = 0.1e1;
          real prod1C8B#5 = RMul(one1C8A,one1C8A);
          real prod1C8C#3 = RMul(prod41C89,prod1C8B);
          real coeff1C8D#6 = 0.426666666667e2;
          real iden1C8E#5 = varAcc1C83;
          real prod1C8F#4 = RMul(iden1C8E,one1C8A);
          real prod1C90#4 = RMul(prod31C88,prod1C8F);
          real iden1C91#5 = varAcc1C84;
          real prod1C92#4 = RMul(one1C8A,iden1C91);
          real prod1C93#4 = RMul(prod31C88,prod1C92);
          real coeff1C94#3 = -0.266666666667e2;
          real prod1C95#5 = RMul(prod31C88,prod1C8B);
          real coeff1C96#6 = 0.64e2;
          real prod21C97#4 = RMul(iden1C8E,varAcc1C83);
          real prod1C98#3 = RMul(prod21C97,one1C8A);
          real prod1C99#3 = RMul(prod21C87,prod1C98);
          real coeff1C9A#9 = 0.128e3;
          real prod1C9B#3 = RMul(iden1C8E,iden1C91);
          real prod1C9C#4 = RMul(prod21C87,prod1C9B);
          real coeff1C9D#6 = -0.80e2;
          real prod1C9E#9 = RMul(prod21C87,prod1C8F);
          real prod21C9F#4 = RMul(iden1C91,varAcc1C84);
          real prod1CA0#3 = RMul(one1C8A,prod21C9F);
          real prod1CA1#3 = RMul(prod21C87,prod1CA0);
          real prod1CA2#9 = RMul(prod21C87,prod1C92);
          real coeff1CA3#3 = 0.233333333333e2;
          real prod1CA4#5 = RMul(prod21C87,prod1C8B);
          real prod31CA5#3 = RMul(prod21C97,varAcc1C83);
          real prod1CA6#2 = RMul(prod31CA5,one1C8A);
          real prod1CA7#4 = RMul(iden1C86,prod1CA6);
          real prod1CA8#2 = RMul(prod21C97,iden1C91);
          real prod1CA9#4 = RMul(iden1C86,prod1CA8);
          real prod1CAA#9 = RMul(iden1C86,prod1C98);
          real prod1CAB#2 = RMul(iden1C8E,prod21C9F);
          real prod1CAC#4 = RMul(iden1C86,prod1CAB);
          real coeff1CAD#1 = -0.160e3;
          real prod1CAE#6 = RMul(iden1C86,prod1C9B);
          real coeff1CAF#3 = 0.466666666667e2;
          real prod1CB0#8 = RMul(iden1C86,prod1C8F);
          real prod31CB1#3 = RMul(prod21C9F,varAcc1C84);
          real prod1CB2#2 = RMul(one1C8A,prod31CB1);
          real prod1CB3#4 = RMul(iden1C86,prod1CB2);
          real prod1CB4#9 = RMul(iden1C86,prod1CA0);
          real prod1CB5#8 = RMul(iden1C86,prod1C92);
          real coeff1CB6#3 = -0.833333333333e1;
          real prod1CB7#5 = RMul(iden1C86,prod1C8B);
          real prod41CB8#1 = RMul(prod31CA5,varAcc1C83);
          real prod1CB9#1 = RMul(prod41CB8,one1C8A);
          real prod1CBA#3 = RMul(one1C8A,prod1CB9);
          real prod1CBB#1 = RMul(prod31CA5,iden1C91);
          real prod1CBC#4 = RMul(one1C8A,prod1CBB);
          real prod1CBD#5 = RMul(one1C8A,prod1CA6);
          real prod1CBE#1 = RMul(prod21C97,prod21C9F);
          real prod1CBF#3 = RMul(one1C8A,prod1CBE);
          real prod1CC0#9 = RMul(one1C8A,prod1CA8);
          real prod1CC1#5 = RMul(one1C8A,prod1C98);
          real prod1CC2#1 = RMul(iden1C8E,prod31CB1);
          real prod1CC3#4 = RMul(one1C8A,prod1CC2);
          real prod1CC4#9 = RMul(one1C8A,prod1CAB);
          real prod1CC5#8 = RMul(one1C8A,prod1C9B);
          real prod1CC6#5 = RMul(one1C8A,prod1C8F);
          real prod41CC7#1 = RMul(prod31CB1,varAcc1C84);
          real prod1CC8#1 = RMul(one1C8A,prod41CC7);
          real prod1CC9#3 = RMul(one1C8A,prod1CC8);
          real prod1CCA#5 = RMul(one1C8A,prod1CB2);
          real prod1CCB#5 = RMul(one1C8A,prod1CA0);
          real prod1CCC#5 = RMul(one1C8A,prod1C92);
          real prod1CCD#1 = RMul(one1C8A,prod1C8B);
          real mult1CCE#1 = RMul(one1C8A,prod1CCD);
          real mult1CCF#1 = RMul(coeff1CB6,prod1CCC);
          real mult1CD0#1 = RMul(coeff1CA3,prod1CCB);
          real mult1CD1#1 = RMul(coeff1C94,prod1CCA);
          real mult1CD2#2 = RMul(coeff1C85,prod1CC9);
          real mult1CD3#1 = RMul(coeff1CB6,prod1CC6);
          real mult1CD4#1 = RMul(coeff1CAF,prod1CC5);
          real mult1CD5#1 = RMul(coeff1C9D,prod1CC4);
          real mult1CD6#2 = RMul(coeff1C8D,prod1CC3);
          real mult1CD7#1 = RMul(coeff1CA3,prod1CC1);
          real mult1CD8#1 = RMul(coeff1C9D,prod1CC0);
          real mult1CD9#4 = RMul(coeff1C96,prod1CBF);
          real mult1CDA#1 = RMul(coeff1C94,prod1CBD);
          real mult1CDB#2 = RMul(coeff1C8D,prod1CBC);
          real mult1CDC#2 = RMul(coeff1C85,prod1CBA);
          real mult1CDD#1 = RMul(coeff1CB6,prod1CB7);
          real mult1CDE#1 = RMul(coeff1CAF,prod1CB5);
          real mult1CDF#1 = RMul(coeff1C9D,prod1CB4);
          real mult1CE0#2 = RMul(coeff1C8D,prod1CB3);
          real mult1CE1#1 = RMul(coeff1CAF,prod1CB0);
          real mult1CE2#1 = RMul(coeff1CAD,prod1CAE);
          real mult1CE3#4 = RMul(coeff1C9A,prod1CAC);
          real mult1CE4#1 = RMul(coeff1C9D,prod1CAA);
          real mult1CE5#4 = RMul(coeff1C9A,prod1CA9);
          real mult1CE6#2 = RMul(coeff1C8D,prod1CA7);
          real mult1CE7#1 = RMul(coeff1CA3,prod1CA4);
          real mult1CE8#1 = RMul(coeff1C9D,prod1CA2);
          real mult1CE9#3 = RMul(coeff1C96,prod1CA1);
          real mult1CEA#1 = RMul(coeff1C9D,prod1C9E);
          real mult1CEB#4 = RMul(coeff1C9A,prod1C9C);
          real mult1CEC#3 = RMul(coeff1C96,prod1C99);
          real mult1CED#1 = RMul(coeff1C94,prod1C95);
          real mult1CEE#2 = RMul(coeff1C8D,prod1C93);
          real mult1CEF#2 = RMul(coeff1C8D,prod1C90);
          real mult1CF0#2 = RMul(coeff1C85,prod1C8C);
          real sum1CF1#1 = RAdd(mult1CEF,mult1CF0);
          real sum1CF2#1 = RAdd(mult1CEE,sum1CF1);
          real sum1CF3#1 = RAdd(mult1CED,sum1CF2);
          real sum1CF4#1 = RAdd(mult1CEC,sum1CF3);
          real sum1CF5#1 = RAdd(mult1CEB,sum1CF4);
          real sum1CF6#1 = RAdd(mult1CEA,sum1CF5);
          real sum1CF7#1 = RAdd(mult1CE9,sum1CF6);
          real sum1CF8#1 = RAdd(mult1CE8,sum1CF7);
          real sum1CF9#1 = RAdd(mult1CE7,sum1CF8);
          real sum1CFA#1 = RAdd(mult1CE6,sum1CF9);
          real sum1CFB#1 = RAdd(mult1CE5,sum1CFA);
          real sum1CFC#1 = RAdd(mult1CE4,sum1CFB);
          real sum1CFD#1 = RAdd(mult1CE3,sum1CFC);
          real sum1CFE#1 = RAdd(mult1CE2,sum1CFD);
          real sum1CFF#1 = RAdd(mult1CE1,sum1CFE);
          real sum1D00#1 = RAdd(mult1CE0,sum1CFF);
          real sum1D01#1 = RAdd(mult1CDF,sum1D00);
          real sum1D02#1 = RAdd(mult1CDE,sum1D01);
          real sum1D03#1 = RAdd(mult1CDD,sum1D02);
          real sum1D04#1 = RAdd(mult1CDC,sum1D03);
          real sum1D05#1 = RAdd(mult1CDB,sum1D04);
          real sum1D06#1 = RAdd(mult1CDA,sum1D05);
          real sum1D07#1 = RAdd(mult1CD9,sum1D06);
          real sum1D08#1 = RAdd(mult1CD8,sum1D07);
          real sum1D09#1 = RAdd(mult1CD7,sum1D08);
          real sum1D0A#1 = RAdd(mult1CD6,sum1D09);
          real sum1D0B#1 = RAdd(mult1CD5,sum1D0A);
          real sum1D0C#1 = RAdd(mult1CD4,sum1D0B);
          real sum1D0D#1 = RAdd(mult1CD3,sum1D0C);
          real sum1D0E#1 = RAdd(mult1CD2,sum1D0D);
          real sum1D0F#1 = RAdd(mult1CD1,sum1D0E);
          real sum1D10#1 = RAdd(mult1CD0,sum1D0F);
          real sum1D11#1 = RAdd(mult1CCF,sum1D10);
          real sum1D12#1 = RAdd(mult1CCE,sum1D11);
          real intermediate1D13#1 = sum1D12;
          real coeff1D14#9 = -0.16e2;
          real coeff1D15#3 = 0.733333333333e1;
          real coeff1D16#3 = -0.1e1;
          real mult1D17#1 = RMul(coeff1D16,prod1CB7);
          real mult1D18#1 = RMul(coeff1D15,prod1CA4);
          real mult1D19#1 = RMul(coeff1D14,prod1C95);
          real sum1D1A#1 = RAdd(mult1D19,mult1CF0);
          real sum1D1B#1 = RAdd(mult1D18,sum1D1A);
          real sum1D1C#1 = RAdd(mult1D17,sum1D1B);
          real intermediate1D1D#1 = sum1D1C;
          real mult1D1E#1 = RMul(coeff1D16,prod1CC6);
          real mult1D1F#1 = RMul(coeff1D15,prod1CC1);
          real mult1D20#1 = RMul(coeff1D14,prod1CBD);
          real sum1D21#1 = RAdd(mult1D20,mult1CDC);
          real sum1D22#1 = RAdd(mult1D1F,sum1D21);
          real sum1D23#1 = RAdd(mult1D1E,sum1D22);
          real intermediate1D24#1 = sum1D23;
          real mult1D25#1 = RMul(coeff1D16,prod1CCC);
          real mult1D26#1 = RMul(coeff1D15,prod1CCB);
          real mult1D27#1 = RMul(coeff1D14,prod1CCA);
          real sum1D28#1 = RAdd(mult1D27,mult1CD2);
          real sum1D29#1 = RAdd(mult1D26,sum1D28);
          real sum1D2A#1 = RAdd(mult1D25,sum1D29);
          real intermediate1D2B#1 = sum1D2A;
          real coeff1D2C#10 = -0.32e2;
          real coeff1D2D#6 = 0.533333333333e1;
          real mult1D2E#2 = RMul(coeff1D2D,prod1CC5);
          real mult1D2F#1 = RMul(coeff1D2C,prod1CC0);
          real sum1D30#1 = RAdd(mult1D2F,mult1CDB);
          real sum1D31#1 = RAdd(mult1D2E,sum1D30);
          real intermediate1D32#1 = sum1D31;
          real coeff1D33#3 = 0.4e1;
          real mult1D34#1 = RMul(coeff1D33,prod1CC5);
          real mult1D35#2 = RMul(coeff1D14,prod1CC4);
          real mult1D36#2 = RMul(coeff1D14,prod1CC0);
          real sum1D37#1 = RAdd(mult1D36,mult1CD9);
          real sum1D38#1 = RAdd(mult1D35,sum1D37);
          real sum1D39#1 = RAdd(mult1D34,sum1D38);
          real intermediate1D3A#1 = sum1D39;
          real mult1D3B#1 = RMul(coeff1D2C,prod1CC4);
          real sum1D3C#1 = RAdd(mult1D3B,mult1CD6);
          real sum1D3D#1 = RAdd(mult1D2E,sum1D3C);
          real intermediate1D3E#1 = sum1D3D;
          real mult1D3F#2 = RMul(coeff1D2D,prod1CB5);
          real mult1D40#1 = RMul(coeff1D2C,prod1CA2);
          real sum1D41#1 = RAdd(mult1D40,mult1CEE);
          real sum1D42#1 = RAdd(mult1D3F,sum1D41);
          real intermediate1D43#1 = sum1D42;
          real mult1D44#1 = RMul(coeff1D33,prod1CB5);
          real mult1D45#2 = RMul(coeff1D14,prod1CB4);
          real mult1D46#1 = RMul(coeff1D14,prod1CA2);
          real sum1D47#2 = RAdd(mult1D46,mult1CE9);
          real sum1D48#1 = RAdd(mult1D45,sum1D47);
          real sum1D49#1 = RAdd(mult1D44,sum1D48);
          real intermediate1D4A#1 = sum1D49;
          real mult1D4B#1 = RMul(coeff1D2C,prod1CB4);
          real sum1D4C#1 = RAdd(mult1D4B,mult1CE0);
          real sum1D4D#1 = RAdd(mult1D3F,sum1D4C);
          real intermediate1D4E#1 = sum1D4D;
          real mult1D4F#2 = RMul(coeff1D2D,prod1CB0);
          real mult1D50#1 = RMul(coeff1D2C,prod1C9E);
          real sum1D51#1 = RAdd(mult1D50,mult1CEF);
          real sum1D52#1 = RAdd(mult1D4F,sum1D51);
          real intermediate1D53#1 = sum1D52;
          real mult1D54#1 = RMul(coeff1D33,prod1CB0);
          real mult1D55#2 = RMul(coeff1D14,prod1CAA);
          real mult1D56#1 = RMul(coeff1D14,prod1C9E);
          real sum1D57#2 = RAdd(mult1D56,mult1CEC);
          real sum1D58#1 = RAdd(mult1D55,sum1D57);
          real sum1D59#1 = RAdd(mult1D54,sum1D58);
          real intermediate1D5A#1 = sum1D59;
          real mult1D5B#1 = RMul(coeff1D2C,prod1CAA);
          real sum1D5C#1 = RAdd(mult1D5B,mult1CE6);
          real sum1D5D#1 = RAdd(mult1D4F,sum1D5C);
          real intermediate1D5E#1 = sum1D5D;
          real coeff1D5F#9 = -0.426666666667e2;
          real coeff1D60#15 = -0.128e3;
          real coeff1D61#12 = 0.96e2;
          real coeff1D62#3 = -0.256e3;
          real coeff1D63#7 = 0.192e3;
          real coeff1D64#6 = -0.693333333333e2;
          real coeff1D65#3 = 0.16e2;
          real mult1D66#1 = RMul(coeff1D65,prod1CCC);
          real mult1D67#1 = RMul(coeff1D64,prod1CCB);
          real mult1D68#1 = RMul(coeff1D61,prod1CCA);
          real mult1D69#2 = RMul(coeff1D5F,prod1CC9);
          real mult1D6A#2 = RMul(coeff1D64,prod1CC5);
          real mult1D6B#1 = RMul(coeff1D63,prod1CC4);
          real mult1D6C#2 = RMul(coeff1D60,prod1CC3);
          real mult1D6D#1 = RMul(coeff1D61,prod1CC0);
          real mult1D6E#4 = RMul(coeff1D60,prod1CBF);
          real mult1D6F#2 = RMul(coeff1D5F,prod1CBC);
          real mult1D70#2 = RMul(coeff1D64,prod1CB5);
          real mult1D71#1 = RMul(coeff1D63,prod1CB4);
          real mult1D72#2 = RMul(coeff1D60,prod1CB3);
          real mult1D73#3 = RMul(coeff1D63,prod1CAE);
          real mult1D74#2 = RMul(coeff1D62,prod1CAC);
          real mult1D75#4 = RMul(coeff1D60,prod1CA9);
          real mult1D76#1 = RMul(coeff1D61,prod1CA2);
          real mult1D77#4 = RMul(coeff1D60,prod1CA1);
          real mult1D78#4 = RMul(coeff1D60,prod1C9C);
          real mult1D79#2 = RMul(coeff1D5F,prod1C93);
          real sum1D7A#1 = RAdd(mult1D78,mult1D79);
          real sum1D7B#1 = RAdd(mult1D77,sum1D7A);
          real sum1D7C#1 = RAdd(mult1D76,sum1D7B);
          real sum1D7D#1 = RAdd(mult1D75,sum1D7C);
          real sum1D7E#1 = RAdd(mult1D74,sum1D7D);
          real sum1D7F#1 = RAdd(mult1D73,sum1D7E);
          real sum1D80#1 = RAdd(mult1D72,sum1D7F);
          real sum1D81#1 = RAdd(mult1D71,sum1D80);
          real sum1D82#1 = RAdd(mult1D70,sum1D81);
          real sum1D83#1 = RAdd(mult1D6F,sum1D82);
          real sum1D84#1 = RAdd(mult1D6E,sum1D83);
          real sum1D85#1 = RAdd(mult1D6D,sum1D84);
          real sum1D86#1 = RAdd(mult1D6C,sum1D85);
          real sum1D87#1 = RAdd(mult1D6B,sum1D86);
          real sum1D88#1 = RAdd(mult1D6A,sum1D87);
          real sum1D89#1 = RAdd(mult1D69,sum1D88);
          real sum1D8A#1 = RAdd(mult1D68,sum1D89);
          real sum1D8B#1 = RAdd(mult1D67,sum1D8A);
          real sum1D8C#1 = RAdd(mult1D66,sum1D8B);
          real intermediate1D8D#1 = sum1D8C;
          real coeff1D8E#6 = -0.144e3;
          real coeff1D8F#3 = 0.28e2;
          real coeff1D90#3 = 0.76e2;
          real coeff1D91#3 = -0.12e2;
          real mult1D92#1 = RMul(coeff1D91,prod1CCC);
          real mult1D93#1 = RMul(coeff1D90,prod1CCB);
          real mult1D94#1 = RMul(coeff1D60,prod1CCA);
          real mult1D95#1 = RMul(coeff1C96,prod1CC9);
          real mult1D96#2 = RMul(coeff1D8F,prod1CC5);
          real mult1D97#1 = RMul(coeff1D8E,prod1CC4);
          real mult1D98#2 = RMul(coeff1C9A,prod1CC3);
          real mult1D99#2 = RMul(coeff1D8F,prod1CB5);
          real mult1D9A#1 = RMul(coeff1D8E,prod1CB4);
          real mult1D9B#2 = RMul(coeff1C9A,prod1CB3);
          real mult1D9C#6 = RMul(coeff1D2C,prod1CAE);
          real sum1D9D#1 = RAdd(mult1CE3,sum1D47);
          real sum1D9E#1 = RAdd(mult1D9C,sum1D9D);
          real sum1D9F#1 = RAdd(mult1D9B,sum1D9E);
          real sum1DA0#1 = RAdd(mult1D9A,sum1D9F);
          real sum1DA1#1 = RAdd(mult1D99,sum1DA0);
          real sum1DA2#1 = RAdd(mult1CD9,sum1DA1);
          real sum1DA3#1 = RAdd(mult1D36,sum1DA2);
          real sum1DA4#1 = RAdd(mult1D98,sum1DA3);
          real sum1DA5#1 = RAdd(mult1D97,sum1DA4);
          real sum1DA6#1 = RAdd(mult1D96,sum1DA5);
          real sum1DA7#1 = RAdd(mult1D95,sum1DA6);
          real sum1DA8#1 = RAdd(mult1D94,sum1DA7);
          real sum1DA9#1 = RAdd(mult1D93,sum1DA8);
          real sum1DAA#1 = RAdd(mult1D92,sum1DA9);
          real intermediate1DAB#1 = sum1DAA;
          real coeff1DAC#7 = 0.32e2;
          real coeff1DAD#3 = -0.533333333333e1;
          real coeff1DAE#3 = 0.746666666667e2;
          real coeff1DAF#3 = -0.373333333333e2;
          real mult1DB0#1 = RMul(coeff1D2D,prod1CCC);
          real mult1DB1#1 = RMul(coeff1DAF,prod1CCB);
          real mult1DB2#1 = RMul(coeff1DAE,prod1CCA);
          real mult1DB3#2 = RMul(coeff1DAD,prod1CC5);
          real mult1DB4#2 = RMul(coeff1DAC,prod1CC4);
          real mult1DB5#2 = RMul(coeff1D5F,prod1CC3);
          real mult1DB6#2 = RMul(coeff1DAD,prod1CB5);
          real mult1DB7#2 = RMul(coeff1DAC,prod1CB4);
          real mult1DB8#2 = RMul(coeff1D5F,prod1CB3);
          real sum1DB9#1 = RAdd(mult1DB7,mult1DB8);
          real sum1DBA#1 = RAdd(mult1DB6,sum1DB9);
          real sum1DBB#1 = RAdd(mult1DB5,sum1DBA);
          real sum1DBC#1 = RAdd(mult1DB4,sum1DBB);
          real sum1DBD#1 = RAdd(mult1DB3,sum1DBC);
          real sum1DBE#1 = RAdd(mult1D69,sum1DBD);
          real sum1DBF#1 = RAdd(mult1DB2,sum1DBE);
          real sum1DC0#1 = RAdd(mult1DB1,sum1DBF);
          real sum1DC1#1 = RAdd(mult1DB0,sum1DC0);
          real intermediate1DC2#1 = sum1DC1;
          real mult1DC3#1 = RMul(coeff1D65,prod1CC6);
          real mult1DC4#1 = RMul(coeff1D61,prod1CC4);
          real mult1DC5#1 = RMul(coeff1D64,prod1CC1);
          real mult1DC6#1 = RMul(coeff1D63,prod1CC0);
          real mult1DC7#1 = RMul(coeff1D61,prod1CBD);
          real mult1DC8#2 = RMul(coeff1D60,prod1CBC);
          real mult1DC9#2 = RMul(coeff1D5F,prod1CBA);
          real mult1DCA#2 = RMul(coeff1D64,prod1CB0);
          real mult1DCB#4 = RMul(coeff1D60,prod1CAC);
          real mult1DCC#1 = RMul(coeff1D63,prod1CAA);
          real mult1DCD#2 = RMul(coeff1D62,prod1CA9);
          real mult1DCE#2 = RMul(coeff1D60,prod1CA7);
          real mult1DCF#1 = RMul(coeff1D61,prod1C9E);
          real mult1DD0#4 = RMul(coeff1D60,prod1C99);
          real mult1DD1#2 = RMul(coeff1D5F,prod1C90);
          real sum1DD2#1 = RAdd(mult1DD0,mult1DD1);
          real sum1DD3#1 = RAdd(mult1D78,sum1DD2);
          real sum1DD4#1 = RAdd(mult1DCF,sum1DD3);
          real sum1DD5#1 = RAdd(mult1DCE,sum1DD4);
          real sum1DD6#1 = RAdd(mult1DCD,sum1DD5);
          real sum1DD7#1 = RAdd(mult1DCC,sum1DD6);
          real sum1DD8#1 = RAdd(mult1DCB,sum1DD7);
          real sum1DD9#1 = RAdd(mult1D73,sum1DD8);
          real sum1DDA#1 = RAdd(mult1DCA,sum1DD9);
          real sum1DDB#1 = RAdd(mult1DC9,sum1DDA);
          real sum1DDC#1 = RAdd(mult1DC8,sum1DDB);
          real sum1DDD#1 = RAdd(mult1DC7,sum1DDC);
          real sum1DDE#1 = RAdd(mult1D6E,sum1DDD);
          real sum1DDF#1 = RAdd(mult1DC6,sum1DDE);
          real sum1DE0#1 = RAdd(mult1DC5,sum1DDF);
          real sum1DE1#1 = RAdd(mult1DB5,sum1DE0);
          real sum1DE2#1 = RAdd(mult1DC4,sum1DE1);
          real sum1DE3#1 = RAdd(mult1D6A,sum1DE2);
          real sum1DE4#1 = RAdd(mult1DC3,sum1DE3);
          real intermediate1DE5#1 = sum1DE4;
          real mult1DE6#1 = RMul(coeff1D91,prod1CC6);
          real mult1DE7#1 = RMul(coeff1D90,prod1CC1);
          real mult1DE8#1 = RMul(coeff1D8E,prod1CC0);
          real mult1DE9#1 = RMul(coeff1D60,prod1CBD);
          real mult1DEA#2 = RMul(coeff1C9A,prod1CBC);
          real mult1DEB#1 = RMul(coeff1C96,prod1CBA);
          real mult1DEC#2 = RMul(coeff1D8F,prod1CB0);
          real mult1DED#1 = RMul(coeff1D8E,prod1CAA);
          real mult1DEE#2 = RMul(coeff1C9A,prod1CA7);
          real sum1DEF#1 = RAdd(mult1DEE,sum1D57);
          real sum1DF0#1 = RAdd(mult1CE5,sum1DEF);
          real sum1DF1#1 = RAdd(mult1DED,sum1DF0);
          real sum1DF2#1 = RAdd(mult1D9C,sum1DF1);
          real sum1DF3#1 = RAdd(mult1DEC,sum1DF2);
          real sum1DF4#1 = RAdd(mult1DEB,sum1DF3);
          real sum1DF5#1 = RAdd(mult1DEA,sum1DF4);
          real sum1DF6#1 = RAdd(mult1DE9,sum1DF5);
          real sum1DF7#1 = RAdd(mult1CD9,sum1DF6);
          real sum1DF8#1 = RAdd(mult1DE8,sum1DF7);
          real sum1DF9#1 = RAdd(mult1DE7,sum1DF8);
          real sum1DFA#1 = RAdd(mult1D35,sum1DF9);
          real sum1DFB#1 = RAdd(mult1D96,sum1DFA);
          real sum1DFC#1 = RAdd(mult1DE6,sum1DFB);
          real intermediate1DFD#1 = sum1DFC;
          real mult1DFE#1 = RMul(coeff1D2D,prod1CC6);
          real mult1DFF#1 = RMul(coeff1DAF,prod1CC1);
          real mult1E00#2 = RMul(coeff1DAC,prod1CC0);
          real mult1E01#1 = RMul(coeff1DAE,prod1CBD);
          real mult1E02#2 = RMul(coeff1DAD,prod1CB0);
          real mult1E03#2 = RMul(coeff1DAC,prod1CAA);
          real mult1E04#2 = RMul(coeff1D5F,prod1CA7);
          real sum1E05#1 = RAdd(mult1E03,mult1E04);
          real sum1E06#1 = RAdd(mult1E02,sum1E05);
          real sum1E07#1 = RAdd(mult1DC9,sum1E06);
          real sum1E08#1 = RAdd(mult1D6F,sum1E07);
          real sum1E09#1 = RAdd(mult1E01,sum1E08);
          real sum1E0A#1 = RAdd(mult1E00,sum1E09);
          real sum1E0B#1 = RAdd(mult1DFF,sum1E0A);
          real sum1E0C#1 = RAdd(mult1DB3,sum1E0B);
          real sum1E0D#1 = RAdd(mult1DFE,sum1E0C);
          real intermediate1E0E#1 = sum1E0D;
          real mult1E0F#1 = RMul(coeff1D65,prod1CB7);
          real mult1E10#1 = RMul(coeff1D61,prod1CB4);
          real mult1E11#1 = RMul(coeff1D61,prod1CAA);
          real mult1E12#1 = RMul(coeff1D64,prod1CA4);
          real mult1E13#1 = RMul(coeff1D63,prod1CA2);
          real mult1E14#1 = RMul(coeff1D63,prod1C9E);
          real mult1E15#2 = RMul(coeff1D62,prod1C9C);
          real mult1E16#1 = RMul(coeff1D61,prod1C95);
          real mult1E17#2 = RMul(coeff1D60,prod1C93);
          real mult1E18#2 = RMul(coeff1D60,prod1C90);
          real mult1E19#2 = RMul(coeff1D5F,prod1C8C);
          real sum1E1A#1 = RAdd(mult1E18,mult1E19);
          real sum1E1B#1 = RAdd(mult1E17,sum1E1A);
          real sum1E1C#1 = RAdd(mult1E16,sum1E1B);
          real sum1E1D#1 = RAdd(mult1DD0,sum1E1C);
          real sum1E1E#1 = RAdd(mult1E15,sum1E1D);
          real sum1E1F#1 = RAdd(mult1E14,sum1E1E);
          real sum1E20#1 = RAdd(mult1D77,sum1E1F);
          real sum1E21#1 = RAdd(mult1E13,sum1E20);
          real sum1E22#1 = RAdd(mult1E12,sum1E21);
          real sum1E23#1 = RAdd(mult1E04,sum1E22);
          real sum1E24#1 = RAdd(mult1D75,sum1E23);
          real sum1E25#1 = RAdd(mult1E11,sum1E24);
          real sum1E26#1 = RAdd(mult1DCB,sum1E25);
          real sum1E27#1 = RAdd(mult1D73,sum1E26);
          real sum1E28#1 = RAdd(mult1DCA,sum1E27);
          real sum1E29#1 = RAdd(mult1DB8,sum1E28);
          real sum1E2A#1 = RAdd(mult1E10,sum1E29);
          real sum1E2B#1 = RAdd(mult1D70,sum1E2A);
          real sum1E2C#1 = RAdd(mult1E0F,sum1E2B);
          real intermediate1E2D#1 = sum1E2C;
          real mult1E2E#1 = RMul(coeff1D91,prod1CB7);
          real mult1E2F#1 = RMul(coeff1D90,prod1CA4);
          real mult1E30#1 = RMul(coeff1D8E,prod1CA2);
          real mult1E31#1 = RMul(coeff1D8E,prod1C9E);
          real mult1E32#1 = RMul(coeff1D60,prod1C95);
          real mult1E33#2 = RMul(coeff1C9A,prod1C93);
          real mult1E34#2 = RMul(coeff1C9A,prod1C90);
          real mult1E35#1 = RMul(coeff1C96,prod1C8C);
          real sum1E36#1 = RAdd(mult1E34,mult1E35);
          real sum1E37#1 = RAdd(mult1E33,sum1E36);
          real sum1E38#1 = RAdd(mult1E32,sum1E37);
          real sum1E39#1 = RAdd(mult1CEC,sum1E38);
          real sum1E3A#1 = RAdd(mult1CEB,sum1E39);
          real sum1E3B#1 = RAdd(mult1E31,sum1E3A);
          real sum1E3C#1 = RAdd(mult1CE9,sum1E3B);
          real sum1E3D#1 = RAdd(mult1E30,sum1E3C);
          real sum1E3E#1 = RAdd(mult1E2F,sum1E3D);
          real sum1E3F#1 = RAdd(mult1D55,sum1E3E);
          real sum1E40#1 = RAdd(mult1D9C,sum1E3F);
          real sum1E41#1 = RAdd(mult1DEC,sum1E40);
          real sum1E42#1 = RAdd(mult1D45,sum1E41);
          real sum1E43#1 = RAdd(mult1D99,sum1E42);
          real sum1E44#1 = RAdd(mult1E2E,sum1E43);
          real intermediate1E45#1 = sum1E44;
          real mult1E46#1 = RMul(coeff1D2D,prod1CB7);
          real mult1E47#1 = RMul(coeff1DAF,prod1CA4);
          real mult1E48#2 = RMul(coeff1DAC,prod1CA2);
          real mult1E49#2 = RMul(coeff1DAC,prod1C9E);
          real mult1E4A#1 = RMul(coeff1DAE,prod1C95);
          real sum1E4B#1 = RAdd(mult1DD1,mult1E19);
          real sum1E4C#1 = RAdd(mult1D79,sum1E4B);
          real sum1E4D#1 = RAdd(mult1E4A,sum1E4C);
          real sum1E4E#1 = RAdd(mult1E49,sum1E4D);
          real sum1E4F#1 = RAdd(mult1E48,sum1E4E);
          real sum1E50#1 = RAdd(mult1E47,sum1E4F);
          real sum1E51#1 = RAdd(mult1E02,sum1E50);
          real sum1E52#1 = RAdd(mult1DB6,sum1E51);
          real sum1E53#1 = RAdd(mult1E46,sum1E52);
          real intermediate1E54#1 = sum1E53;
          real sum1E55#1 = RAdd(mult1D9C,mult1CEB);
          real intermediate1E56#1 = sum1E55;
          real sum1E57#1 = RAdd(mult1D9C,mult1CE5);
          real intermediate1E58#1 = sum1E57;
          real sum1E59#1 = RAdd(mult1D9C,mult1CE3);
          real intermediate1E5A#1 = sum1E59;
          real coeff1E5B#7 = 0.256e3;
          real coeff1E5C#7 = -0.224e3;
          real mult1E5D#1 = RMul(coeff1D61,prod1CC5);
          real mult1E5E#1 = RMul(coeff1E5C,prod1CC4);
          real mult1E5F#1 = RMul(coeff1E5C,prod1CC0);
          real mult1E60#1 = RMul(coeff1E5B,prod1CBF);
          real mult1E61#3 = RMul(coeff1E5C,prod1CAE);
          real mult1E62#2 = RMul(coeff1E5B,prod1CAC);
          real mult1E63#2 = RMul(coeff1E5B,prod1CA9);
          real sum1E64#1 = RAdd(mult1E63,mult1CEB);
          real sum1E65#1 = RAdd(mult1E62,sum1E64);
          real sum1E66#1 = RAdd(mult1E61,sum1E65);
          real sum1E67#1 = RAdd(mult1DEA,sum1E66);
          real sum1E68#1 = RAdd(mult1E60,sum1E67);
          real sum1E69#1 = RAdd(mult1E5F,sum1E68);
          real sum1E6A#1 = RAdd(mult1D98,sum1E69);
          real sum1E6B#1 = RAdd(mult1E5E,sum1E6A);
          real sum1E6C#1 = RAdd(mult1E5D,sum1E6B);
          real intermediate1E6D#1 = sum1E6C;
          real coeff1E6E#6 = 0.160e3;
          real mult1E6F#2 = RMul(coeff1D2C,prod1CC5);
          real mult1E70#1 = RMul(coeff1E6E,prod1CC0);
          real mult1E71#6 = RMul(coeff1DAC,prod1CAE);
          real sum1E72#1 = RAdd(mult1E71,mult1D75);
          real sum1E73#1 = RAdd(mult1DC8,sum1E72);
          real sum1E74#1 = RAdd(mult1D6E,sum1E73);
          real sum1E75#1 = RAdd(mult1E70,sum1E74);
          real sum1E76#1 = RAdd(mult1DB4,sum1E75);
          real sum1E77#1 = RAdd(mult1E6F,sum1E76);
          real intermediate1E78#1 = sum1E77;
          real mult1E79#1 = RMul(coeff1E6E,prod1CC4);
          real sum1E7A#1 = RAdd(mult1E71,mult1DCB);
          real sum1E7B#1 = RAdd(mult1D6E,sum1E7A);
          real sum1E7C#1 = RAdd(mult1E00,sum1E7B);
          real sum1E7D#1 = RAdd(mult1D6C,sum1E7C);
          real sum1E7E#1 = RAdd(mult1E79,sum1E7D);
          real sum1E7F#1 = RAdd(mult1E6F,sum1E7E);
          real intermediate1E80#1 = sum1E7F;
          real mult1E81#1 = RMul(coeff1D61,prod1CB5);
          real mult1E82#1 = RMul(coeff1E5C,prod1CB4);
          real mult1E83#1 = RMul(coeff1E5C,prod1CA2);
          real mult1E84#1 = RMul(coeff1E5B,prod1CA1);
          real mult1E85#2 = RMul(coeff1E5B,prod1C9C);
          real sum1E86#1 = RAdd(mult1E85,mult1E33);
          real sum1E87#1 = RAdd(mult1E84,sum1E86);
          real sum1E88#1 = RAdd(mult1E83,sum1E87);
          real sum1E89#1 = RAdd(mult1CE5,sum1E88);
          real sum1E8A#1 = RAdd(mult1E62,sum1E89);
          real sum1E8B#1 = RAdd(mult1E61,sum1E8A);
          real sum1E8C#1 = RAdd(mult1D9B,sum1E8B);
          real sum1E8D#1 = RAdd(mult1E82,sum1E8C);
          real sum1E8E#1 = RAdd(mult1E81,sum1E8D);
          real intermediate1E8F#1 = sum1E8E;
          real mult1E90#2 = RMul(coeff1D2C,prod1CB5);
          real mult1E91#1 = RMul(coeff1E6E,prod1CA2);
          real sum1E92#1 = RAdd(mult1D78,mult1E17);
          real sum1E93#1 = RAdd(mult1D77,sum1E92);
          real sum1E94#1 = RAdd(mult1E91,sum1E93);
          real sum1E95#1 = RAdd(mult1E71,sum1E94);
          real sum1E96#1 = RAdd(mult1DB7,sum1E95);
          real sum1E97#1 = RAdd(mult1E90,sum1E96);
          real intermediate1E98#1 = sum1E97;
          real mult1E99#1 = RMul(coeff1E6E,prod1CB4);
          real sum1E9A#1 = RAdd(mult1E48,mult1D77);
          real sum1E9B#1 = RAdd(mult1DCB,sum1E9A);
          real sum1E9C#1 = RAdd(mult1E71,sum1E9B);
          real sum1E9D#1 = RAdd(mult1D72,sum1E9C);
          real sum1E9E#1 = RAdd(mult1E99,sum1E9D);
          real sum1E9F#1 = RAdd(mult1E90,sum1E9E);
          real intermediate1EA0#1 = sum1E9F;
          real mult1EA1#1 = RMul(coeff1D61,prod1CB0);
          real mult1EA2#1 = RMul(coeff1E5C,prod1CAA);
          real mult1EA3#1 = RMul(coeff1E5C,prod1C9E);
          real mult1EA4#1 = RMul(coeff1E5B,prod1C99);
          real sum1EA5#1 = RAdd(mult1EA4,mult1E34);
          real sum1EA6#1 = RAdd(mult1E85,sum1EA5);
          real sum1EA7#1 = RAdd(mult1EA3,sum1EA6);
          real sum1EA8#1 = RAdd(mult1DEE,sum1EA7);
          real sum1EA9#1 = RAdd(mult1E63,sum1EA8);
          real sum1EAA#1 = RAdd(mult1EA2,sum1EA9);
          real sum1EAB#1 = RAdd(mult1CE3,sum1EAA);
          real sum1EAC#1 = RAdd(mult1E61,sum1EAB);
          real sum1EAD#1 = RAdd(mult1EA1,sum1EAC);
          real intermediate1EAE#1 = sum1EAD;
          real mult1EAF#2 = RMul(coeff1D2C,prod1CB0);
          real mult1EB0#1 = RMul(coeff1E6E,prod1C9E);
          real sum1EB1#1 = RAdd(mult1DD0,mult1E18);
          real sum1EB2#1 = RAdd(mult1D78,sum1EB1);
          real sum1EB3#1 = RAdd(mult1EB0,sum1EB2);
          real sum1EB4#1 = RAdd(mult1E03,sum1EB3);
          real sum1EB5#1 = RAdd(mult1E71,sum1EB4);
          real sum1EB6#1 = RAdd(mult1EAF,sum1EB5);
          real intermediate1EB7#1 = sum1EB6;
          real mult1EB8#1 = RMul(coeff1E6E,prod1CAA);
          real sum1EB9#1 = RAdd(mult1E49,mult1DD0);
          real sum1EBA#1 = RAdd(mult1DCE,sum1EB9);
          real sum1EBB#1 = RAdd(mult1D75,sum1EBA);
          real sum1EBC#1 = RAdd(mult1EB8,sum1EBB);
          real sum1EBD#1 = RAdd(mult1E71,sum1EBC);
          real sum1EBE#1 = RAdd(mult1EAF,sum1EBD);
          real intermediate1EBF#1 = sum1EBE;
          real mult1EC0#1 = RMul(coeff1E5B,prod1CAE);
          real sum1EC1#1 = RAdd(mult1DCD,mult1E15);
          real sum1EC2#1 = RAdd(mult1D74,sum1EC1);
          real sum1EC3#1 = RAdd(mult1EC0,sum1EC2);
          real intermediate1EC4#1 = sum1EC3;
          tensor[35] intermediateCons1EC5#1 = <tensor[35]>[intermediate1D13,intermediate1D1D,intermediate1D24,intermediate1D2B,intermediate1D32,intermediate1D3A,intermediate1D3E,intermediate1D43,intermediate1D4A,intermediate1D4E,intermediate1D53,intermediate1D5A,intermediate1D5E,intermediate1D8D,intermediate1DAB,intermediate1DC2,intermediate1DE5,intermediate1DFD,intermediate1E0E,intermediate1E2D,intermediate1E45,intermediate1E54,intermediate1E56,intermediate1E58,intermediate1E5A,intermediate1E6D,intermediate1E78,intermediate1E80,intermediate1E8F,intermediate1E98,intermediate1EA0,intermediate1EAE,intermediate1EB7,intermediate1EBF,intermediate1EC4];
          tensor[35] basisResult1C81#1 = intermediateCons1EC5;
          real compositionl210B#1 = VDot<35>(femDofs1B65,basisResult1C81);
          real result210E#1 = compositionl210B;
          real varAcc2111#3 = VIndex<3,0>(refPos1A89);
          real varAcc2112#3 = VIndex<3,1>(refPos1A89);
          real varAcc2113#3 = VIndex<3,2>(refPos1A89);
          real coeff2114#3 = 0.426666666667e2;
          real iden2115#7 = varAcc2111;
          real prod22116#4 = RMul(iden2115,varAcc2111);
          real prod32117#1 = RMul(prod22116,varAcc2111);
          real one2118#18 = 0.1e1;
          real prod2119#4 = RMul(one2118,one2118);
          real prod211A#6 = RMul(prod32117,prod2119);
          real coeff211B#9 = 0.128e3;
          real iden211C#4 = varAcc2112;
          real prod211D#3 = RMul(iden211C,one2118);
          real prod211E#7 = RMul(prod22116,prod211D);
          real iden211F#4 = varAcc2113;
          real prod2120#3 = RMul(one2118,iden211F);
          real prod2121#7 = RMul(prod22116,prod2120);
          real coeff2122#3 = -0.80e2;
          real prod2123#13 = RMul(prod22116,prod2119);
          real prod22124#3 = RMul(iden211C,varAcc2112);
          real prod2125#2 = RMul(prod22124,one2118);
          real prod2126#7 = RMul(iden2115,prod2125);
          real coeff2127#13 = 0.256e3;
          real prod2128#2 = RMul(iden211C,iden211F);
          real prod2129#4 = RMul(iden2115,prod2128);
          real coeff212A#3 = -0.160e3;
          real prod212B#12 = RMul(iden2115,prod211D);
          real prod2212C#3 = RMul(iden211F,varAcc2113);
          real prod212D#2 = RMul(one2118,prod2212C);
          real prod212E#7 = RMul(iden2115,prod212D);
          real prod212F#12 = RMul(iden2115,prod2120);
          real coeff2130#3 = 0.466666666667e2;
          real prod2131#12 = RMul(iden2115,prod2119);
          real prod32132#1 = RMul(prod22124,varAcc2112);
          real prod2133#1 = RMul(prod32132,one2118);
          real prod2134#6 = RMul(one2118,prod2133);
          real prod2135#1 = RMul(prod22124,iden211F);
          real prod2136#7 = RMul(one2118,prod2135);
          real prod2137#13 = RMul(one2118,prod2125);
          real prod2138#1 = RMul(iden211C,prod2212C);
          real prod2139#7 = RMul(one2118,prod2138);
          real prod213A#12 = RMul(one2118,prod2128);
          real prod213B#12 = RMul(one2118,prod211D);
          real prod3213C#1 = RMul(prod2212C,varAcc2113);
          real prod213D#1 = RMul(one2118,prod3213C);
          real prod213E#6 = RMul(one2118,prod213D);
          real prod213F#13 = RMul(one2118,prod212D);
          real prod2140#12 = RMul(one2118,prod2120);
          real coeff2141#1 = -0.833333333333e1;
          real prod2142#5 = RMul(one2118,prod2119);
          real mult2143#1 = RMul(coeff2141,prod2142);
          real mult2144#1 = RMul(coeff2130,prod2140);
          real mult2145#1 = RMul(coeff2122,prod213F);
          real mult2146#3 = RMul(coeff2114,prod213E);
          real mult2147#1 = RMul(coeff2130,prod213B);
          real mult2148#1 = RMul(coeff212A,prod213A);
          real mult2149#6 = RMul(coeff211B,prod2139);
          real mult214A#1 = RMul(coeff2122,prod2137);
          real mult214B#7 = RMul(coeff211B,prod2136);
          real mult214C#3 = RMul(coeff2114,prod2134);
          real mult214D#1 = RMul(coeff2130,prod2131);
          real mult214E#1 = RMul(coeff212A,prod212F);
          real mult214F#5 = RMul(coeff211B,prod212E);
          real mult2150#1 = RMul(coeff212A,prod212B);
          real mult2151#10 = RMul(coeff2127,prod2129);
          real mult2152#5 = RMul(coeff211B,prod2126);
          real mult2153#1 = RMul(coeff2122,prod2123);
          real mult2154#6 = RMul(coeff211B,prod2121);
          real mult2155#6 = RMul(coeff211B,prod211E);
          real mult2156#3 = RMul(coeff2114,prod211A);
          real sum2157#1 = RAdd(mult2155,mult2156);
          real sum2158#1 = RAdd(mult2154,sum2157);
          real sum2159#1 = RAdd(mult2153,sum2158);
          real sum215A#1 = RAdd(mult2152,sum2159);
          real sum215B#1 = RAdd(mult2151,sum215A);
          real sum215C#1 = RAdd(mult2150,sum215B);
          real sum215D#1 = RAdd(mult214F,sum215C);
          real sum215E#1 = RAdd(mult214E,sum215D);
          real sum215F#1 = RAdd(mult214D,sum215E);
          real sum2160#1 = RAdd(mult214C,sum215F);
          real sum2161#1 = RAdd(mult214B,sum2160);
          real sum2162#1 = RAdd(mult214A,sum2161);
          real sum2163#1 = RAdd(mult2149,sum2162);
          real sum2164#1 = RAdd(mult2148,sum2163);
          real sum2165#1 = RAdd(mult2147,sum2164);
          real sum2166#1 = RAdd(mult2146,sum2165);
          real sum2167#1 = RAdd(mult2145,sum2166);
          real sum2168#1 = RAdd(mult2144,sum2167);
          real sum2169#3 = RAdd(mult2143,sum2168);
          real intermediate216A#1 = sum2169;
          real coeff216B#3 = -0.48e2;
          real coeff216C#3 = 0.146666666667e2;
          real coeff216D#1 = -0.1e1;
          real mult216E#3 = RMul(coeff216D,prod2142);
          real mult216F#1 = RMul(coeff216C,prod2131);
          real mult2170#1 = RMul(coeff216B,prod2123);
          real sum2171#1 = RAdd(mult2170,mult2156);
          real sum2172#1 = RAdd(mult216F,sum2171);
          real sum2173#1 = RAdd(mult216E,sum2172);
          real intermediate2174#1 = sum2173;
          real basisEval2175#15 = 0.e0;
          real coeff2176#3 = -0.64e2;
          real coeff2177#4 = 0.533333333333e1;
          real mult2178#3 = RMul(coeff2177,prod2140);
          real mult2179#2 = RMul(coeff2176,prod212F);
          real sum217A#1 = RAdd(mult2179,mult2154);
          real sum217B#1 = RAdd(mult2178,sum217A);
          real intermediate217C#1 = sum217B;
          real coeff217D#9 = -0.32e2;
          real coeff217E#3 = -0.16e2;
          real coeff217F#3 = 0.4e1;
          real mult2180#2 = RMul(coeff217F,prod2140);
          real mult2181#4 = RMul(coeff217E,prod213F);
          real mult2182#6 = RMul(coeff217D,prod212F);
          real sum2183#3 = RAdd(mult2182,mult214F);
          real sum2184#1 = RAdd(mult2181,sum2183);
          real sum2185#1 = RAdd(mult2180,sum2184);
          real intermediate2186#1 = sum2185;
          real mult2187#1 = RMul(coeff217D,prod213F);
          real sum2188#1 = RAdd(mult2187,mult2146);
          real sum2189#2 = RAdd(mult2178,sum2188);
          real intermediate218A#1 = sum2189;
          real mult218B#3 = RMul(coeff2177,prod213B);
          real mult218C#2 = RMul(coeff2176,prod212B);
          real sum218D#1 = RAdd(mult218C,mult2155);
          real sum218E#1 = RAdd(mult218B,sum218D);
          real intermediate218F#1 = sum218E;
          real mult2190#2 = RMul(coeff217F,prod213B);
          real mult2191#4 = RMul(coeff217E,prod2137);
          real mult2192#6 = RMul(coeff217D,prod212B);
          real sum2193#3 = RAdd(mult2192,mult2152);
          real sum2194#1 = RAdd(mult2191,sum2193);
          real sum2195#1 = RAdd(mult2190,sum2194);
          real intermediate2196#1 = sum2195;
          real mult2197#1 = RMul(coeff217D,prod2137);
          real sum2198#1 = RAdd(mult2197,mult214C);
          real sum2199#2 = RAdd(mult218B,sum2198);
          real intermediate219A#1 = sum2199;
          real coeff219B#9 = -0.128e3;
          real coeff219C#7 = -0.256e3;
          real coeff219D#6 = 0.192e3;
          real coeff219E#3 = -0.693333333333e2;
          real mult219F#3 = RMul(coeff219E,prod2140);
          real mult21A0#1 = RMul(coeff219D,prod213F);
          real mult21A1#3 = RMul(coeff219B,prod213E);
          real mult21A2#3 = RMul(coeff219D,prod213A);
          real mult21A3#5 = RMul(coeff219C,prod2139);
          real mult21A4#5 = RMul(coeff219B,prod2136);
          real mult21A5#3 = RMul(coeff219D,prod212F);
          real mult21A6#5 = RMul(coeff219C,prod212E);
          real mult21A7#9 = RMul(coeff219C,prod2129);
          real mult21A8#5 = RMul(coeff219B,prod2121);
          real sum21A9#1 = RAdd(mult21A7,mult21A8);
          real sum21AA#1 = RAdd(mult21A6,sum21A9);
          real sum21AB#1 = RAdd(mult21A5,sum21AA);
          real sum21AC#1 = RAdd(mult21A4,sum21AB);
          real sum21AD#1 = RAdd(mult21A3,sum21AC);
          real sum21AE#1 = RAdd(mult21A2,sum21AD);
          real sum21AF#1 = RAdd(mult21A1,sum21AE);
          real sum21B0#1 = RAdd(mult21A0,sum21AF);
          real sum21B1#2 = RAdd(mult219F,sum21B0);
          real intermediate21B2#1 = sum21B1;
          real coeff21B3#3 = -0.144e3;
          real coeff21B4#3 = 0.28e2;
          real mult21B5#3 = RMul(coeff21B4,prod2140);
          real mult21B6#1 = RMul(coeff21B3,prod213F);
          real mult21B7#3 = RMul(coeff211B,prod213E);
          real mult21B8#7 = RMul(coeff217D,prod213A);
          real sum21B9#1 = RAdd(mult2149,sum2183);
          real sum21BA#1 = RAdd(mult21B8,sum21B9);
          real sum21BB#1 = RAdd(mult21B7,sum21BA);
          real sum21BC#1 = RAdd(mult21B6,sum21BB);
          real sum21BD#2 = RAdd(mult21B5,sum21BC);
          real intermediate21BE#1 = sum21BD;
          real coeff21BF#3 = -0.426666666667e2;
          real coeff21C0#6 = 0.32e2;
          real coeff21C1#3 = -0.533333333333e1;
          real mult21C2#3 = RMul(coeff21C1,prod2140);
          real mult21C3#3 = RMul(coeff21C0,prod213F);
          real mult21C4#3 = RMul(coeff21BF,prod213E);
          real sum21C5#1 = RAdd(mult21C3,mult21C4);
          real sum21C6#2 = RAdd(mult21C2,sum21C5);
          real intermediate21C7#1 = sum21C6;
          real mult21C8#3 = RMul(coeff219E,prod213B);
          real mult21C9#5 = RMul(coeff219B,prod2139);
          real mult21CA#1 = RMul(coeff219D,prod2137);
          real mult21CB#5 = RMul(coeff219C,prod2136);
          real mult21CC#3 = RMul(coeff219B,prod2134);
          real mult21CD#3 = RMul(coeff219D,prod212B);
          real mult21CE#5 = RMul(coeff219C,prod2126);
          real mult21CF#5 = RMul(coeff219B,prod211E);
          real sum21D0#1 = RAdd(mult21CE,mult21CF);
          real sum21D1#1 = RAdd(mult21A7,sum21D0);
          real sum21D2#1 = RAdd(mult21CD,sum21D1);
          real sum21D3#1 = RAdd(mult21CC,sum21D2);
          real sum21D4#1 = RAdd(mult21CB,sum21D3);
          real sum21D5#1 = RAdd(mult21CA,sum21D4);
          real sum21D6#1 = RAdd(mult21C9,sum21D5);
          real sum21D7#1 = RAdd(mult21A2,sum21D6);
          real sum21D8#2 = RAdd(mult21C8,sum21D7);
          real intermediate21D9#1 = sum21D8;
          real mult21DA#3 = RMul(coeff21B4,prod213B);
          real mult21DB#1 = RMul(coeff21B3,prod2137);
          real mult21DC#3 = RMul(coeff211B,prod2134);
          real sum21DD#1 = RAdd(mult21DC,sum2193);
          real sum21DE#1 = RAdd(mult214B,sum21DD);
          real sum21DF#1 = RAdd(mult21DB,sum21DE);
          real sum21E0#1 = RAdd(mult21B8,sum21DF);
          real sum21E1#2 = RAdd(mult21DA,sum21E0);
          real intermediate21E2#1 = sum21E1;
          real mult21E3#3 = RMul(coeff21C1,prod213B);
          real mult21E4#3 = RMul(coeff21C0,prod2137);
          real mult21E5#3 = RMul(coeff21BF,prod2134);
          real sum21E6#1 = RAdd(mult21E4,mult21E5);
          real sum21E7#2 = RAdd(mult21E3,sum21E6);
          real intermediate21E8#1 = sum21E7;
          real coeff21E9#3 = -0.170666666667e3;
          real coeff21EA#9 = -0.384e3;
          real coeff21EB#3 = 0.288e3;
          real coeff21EC#1 = -0.512e3;
          real coeff21ED#9 = 0.384e3;
          real coeff21EE#3 = -0.138666666667e3;
          real coeff21EF#6 = 0.96e2;
          real coeff21F0#1 = 0.16e2;
          real mult21F1#3 = RMul(coeff21F0,prod2142);
          real mult21F2#2 = RMul(coeff21EF,prod213F);
          real mult21F3#2 = RMul(coeff21EF,prod2137);
          real mult21F4#1 = RMul(coeff21EE,prod2131);
          real mult21F5#2 = RMul(coeff21ED,prod212F);
          real mult21F6#2 = RMul(coeff21ED,prod212B);
          real mult21F7#6 = RMul(coeff21EC,prod2129);
          real mult21F8#1 = RMul(coeff21EB,prod2123);
          real mult21F9#2 = RMul(coeff21EA,prod2121);
          real mult21FA#2 = RMul(coeff21EA,prod211E);
          real mult21FB#2 = RMul(coeff21E9,prod211A);
          real sum21FC#1 = RAdd(mult21FA,mult21FB);
          real sum21FD#1 = RAdd(mult21F9,sum21FC);
          real sum21FE#1 = RAdd(mult21F8,sum21FD);
          real sum21FF#1 = RAdd(mult21CE,sum21FE);
          real sum2200#1 = RAdd(mult21F7,sum21FF);
          real sum2201#1 = RAdd(mult21F6,sum2200);
          real sum2202#1 = RAdd(mult21A6,sum2201);
          real sum2203#1 = RAdd(mult21F5,sum2202);
          real sum2204#1 = RAdd(mult21F4,sum2203);
          real sum2205#1 = RAdd(mult21E5,sum2204);
          real sum2206#1 = RAdd(mult21A4,sum2205);
          real sum2207#1 = RAdd(mult21F3,sum2206);
          real sum2208#1 = RAdd(mult21C9,sum2207);
          real sum2209#1 = RAdd(mult21A2,sum2208);
          real sum220A#1 = RAdd(mult21C8,sum2209);
          real sum220B#1 = RAdd(mult21C4,sum220A);
          real sum220C#1 = RAdd(mult21F2,sum220B);
          real sum220D#1 = RAdd(mult219F,sum220C);
          real sum220E#1 = RAdd(mult21F1,sum220D);
          real intermediate220F#1 = sum220E;
          real coeff2210#3 = -0.288e3;
          real coeff2211#3 = 0.152e3;
          real coeff2212#1 = -0.12e2;
          real mult2213#3 = RMul(coeff2212,prod2142);
          real mult2214#1 = RMul(coeff2211,prod2131);
          real mult2215#2 = RMul(coeff2210,prod212F);
          real mult2216#2 = RMul(coeff2210,prod212B);
          real mult2217#1 = RMul(coeff21EA,prod2123);
          real mult2218#2 = RMul(coeff21ED,prod2121);
          real mult2219#2 = RMul(coeff21ED,prod211E);
          real mult221A#1 = RMul(coeff2127,prod211A);
          real sum221B#1 = RAdd(mult2219,mult221A);
          real sum221C#1 = RAdd(mult2218,sum221B);
          real sum221D#1 = RAdd(mult2217,sum221C);
          real sum221E#1 = RAdd(mult2152,sum221D);
          real sum221F#1 = RAdd(mult2151,sum221E);
          real sum2220#1 = RAdd(mult2216,sum221F);
          real sum2221#1 = RAdd(mult214F,sum2220);
          real sum2222#1 = RAdd(mult2215,sum2221);
          real sum2223#1 = RAdd(mult2214,sum2222);
          real sum2224#1 = RAdd(mult2191,sum2223);
          real sum2225#1 = RAdd(mult21B8,sum2224);
          real sum2226#1 = RAdd(mult21DA,sum2225);
          real sum2227#1 = RAdd(mult2181,sum2226);
          real sum2228#1 = RAdd(mult21B5,sum2227);
          real sum2229#1 = RAdd(mult2213,sum2228);
          real intermediate222A#1 = sum2229;
          real coeff222B#3 = 0.224e3;
          real coeff222C#3 = 0.64e2;
          real coeff222D#3 = -0.746666666667e2;
          real mult222E#3 = RMul(coeff2177,prod2142);
          real mult222F#1 = RMul(coeff222D,prod2131);
          real mult2230#4 = RMul(coeff222C,prod212F);
          real mult2231#4 = RMul(coeff222C,prod212B);
          real mult2232#1 = RMul(coeff222B,prod2123);
          real sum2233#1 = RAdd(mult21CF,mult21FB);
          real sum2234#1 = RAdd(mult21A8,sum2233);
          real sum2235#1 = RAdd(mult2232,sum2234);
          real sum2236#1 = RAdd(mult2231,sum2235);
          real sum2237#1 = RAdd(mult2230,sum2236);
          real sum2238#1 = RAdd(mult222F,sum2237);
          real sum2239#1 = RAdd(mult21E3,sum2238);
          real sum223A#1 = RAdd(mult21C2,sum2239);
          real sum223B#1 = RAdd(mult222E,sum223A);
          real intermediate223C#1 = sum223B;
          real sum223D#1 = RAdd(mult21B8,mult2151);
          real intermediate223E#1 = sum223D;
          real sum223F#1 = RAdd(mult21B8,mult214B);
          real intermediate2240#1 = sum223F;
          real sum2241#2 = RAdd(mult21B8,mult2149);
          real intermediate2242#1 = sum2241;
          real coeff2243#6 = -0.224e3;
          real mult2244#3 = RMul(coeff2243,prod213A);
          real mult2245#2 = RMul(coeff2127,prod2139);
          real mult2246#2 = RMul(coeff2127,prod2136);
          real sum2247#1 = RAdd(mult2246,mult2151);
          real sum2248#1 = RAdd(mult2245,sum2247);
          real sum2249#1 = RAdd(mult2244,sum2248);
          real intermediate224A#1 = sum2249;
          real mult224B#6 = RMul(coeff21C0,prod213A);
          real sum224C#1 = RAdd(mult224B,mult21A4);
          real intermediate224D#1 = sum224C;
          real sum224E#1 = RAdd(mult224B,mult21C9);
          real intermediate224F#1 = sum224E;
          real coeff2250#7 = 0.512e3;
          real coeff2251#3 = -0.448e3;
          real mult2252#2 = RMul(coeff21EF,prod2140);
          real mult2253#2 = RMul(coeff2243,prod213F);
          real mult2254#2 = RMul(coeff2251,prod212F);
          real mult2255#1 = RMul(coeff2250,prod212E);
          real mult2256#6 = RMul(coeff2250,prod2129);
          real sum2257#1 = RAdd(mult2256,mult2218);
          real sum2258#1 = RAdd(mult2255,sum2257);
          real sum2259#1 = RAdd(mult2254,sum2258);
          real sum225A#1 = RAdd(mult214B,sum2259);
          real sum225B#1 = RAdd(mult2245,sum225A);
          real sum225C#1 = RAdd(mult2244,sum225B);
          real sum225D#1 = RAdd(mult21B7,sum225C);
          real sum225E#1 = RAdd(mult2253,sum225D);
          real sum225F#1 = RAdd(mult2252,sum225E);
          real intermediate2260#1 = sum225F;
          real coeff2261#3 = 0.320e3;
          real mult2262#4 = RMul(coeff217D,prod2140);
          real mult2263#2 = RMul(coeff2261,prod212F);
          real sum2264#1 = RAdd(mult21A7,mult21F9);
          real sum2265#1 = RAdd(mult21A6,sum2264);
          real sum2266#1 = RAdd(mult2263,sum2265);
          real sum2267#1 = RAdd(mult224B,sum2266);
          real sum2268#1 = RAdd(mult21C3,sum2267);
          real sum2269#1 = RAdd(mult2262,sum2268);
          real intermediate226A#1 = sum2269;
          real coeff226B#3 = 0.160e3;
          real mult226C#2 = RMul(coeff226B,prod213F);
          real sum226D#1 = RAdd(mult2230,mult21A6);
          real sum226E#1 = RAdd(mult21C9,sum226D);
          real sum226F#1 = RAdd(mult224B,sum226E);
          real sum2270#1 = RAdd(mult21A1,sum226F);
          real sum2271#1 = RAdd(mult226C,sum2270);
          real sum2272#1 = RAdd(mult2262,sum2271);
          real intermediate2273#1 = sum2272;
          real mult2274#2 = RMul(coeff21EF,prod213B);
          real mult2275#2 = RMul(coeff2243,prod2137);
          real mult2276#2 = RMul(coeff2251,prod212B);
          real mult2277#1 = RMul(coeff2250,prod2126);
          real sum2278#1 = RAdd(mult2277,mult2219);
          real sum2279#1 = RAdd(mult2256,sum2278);
          real sum227A#1 = RAdd(mult2276,sum2279);
          real sum227B#1 = RAdd(mult21DC,sum227A);
          real sum227C#1 = RAdd(mult2246,sum227B);
          real sum227D#1 = RAdd(mult2275,sum227C);
          real sum227E#1 = RAdd(mult2149,sum227D);
          real sum227F#1 = RAdd(mult2244,sum227E);
          real sum2280#1 = RAdd(mult2274,sum227F);
          real intermediate2281#1 = sum2280;
          real mult2282#4 = RMul(coeff217D,prod213B);
          real mult2283#2 = RMul(coeff2261,prod212B);
          real sum2284#1 = RAdd(mult21CE,mult21FA);
          real sum2285#1 = RAdd(mult21A7,sum2284);
          real sum2286#1 = RAdd(mult2283,sum2285);
          real sum2287#1 = RAdd(mult21E4,sum2286);
          real sum2288#1 = RAdd(mult224B,sum2287);
          real sum2289#1 = RAdd(mult2282,sum2288);
          real intermediate228A#1 = sum2289;
          real mult228B#2 = RMul(coeff226B,prod2137);
          real sum228C#1 = RAdd(mult2231,mult21CE);
          real sum228D#1 = RAdd(mult21CC,sum228C);
          real sum228E#1 = RAdd(mult21A4,sum228D);
          real sum228F#1 = RAdd(mult228B,sum228E);
          real sum2290#1 = RAdd(mult224B,sum228F);
          real sum2291#1 = RAdd(mult2282,sum2290);
          real intermediate2292#1 = sum2291;
          real mult2293#1 = RMul(coeff2127,prod213A);
          real sum2294#1 = RAdd(mult21CB,mult21F7);
          real sum2295#1 = RAdd(mult21A3,sum2294);
          real sum2296#1 = RAdd(mult2293,sum2295);
          real intermediate2297#1 = sum2296;
          real intermediate2298#1 = sum2169;
          real mult2299#1 = RMul(coeff216C,prod213B);
          real mult229A#1 = RMul(coeff216B,prod2137);
          real sum229B#1 = RAdd(mult229A,mult214C);
          real sum229C#1 = RAdd(mult2299,sum229B);
          real sum229D#1 = RAdd(mult216E,sum229C);
          real intermediate229E#1 = sum229D;
          real mult229F#2 = RMul(coeff2176,prod213A);
          real sum22A0#1 = RAdd(mult229F,mult214B);
          real sum22A1#1 = RAdd(mult2178,sum22A0);
          real intermediate22A2#1 = sum22A1;
          real sum22A3#1 = RAdd(mult2181,sum2241);
          real sum22A4#1 = RAdd(mult2180,sum22A3);
          real intermediate22A5#1 = sum22A4;
          real intermediate22A6#1 = sum2189;
          real mult22A7#3 = RMul(coeff2177,prod2131);
          real mult22A8#1 = RMul(coeff217D,prod2123);
          real sum22A9#1 = RAdd(mult22A8,mult2156);
          real sum22AA#2 = RAdd(mult22A7,sum22A9);
          real intermediate22AB#1 = sum22AA;
          real mult22AC#2 = RMul(coeff217F,prod2131);
          real mult22AD#2 = RMul(coeff217E,prod2123);
          real sum22AE#2 = RAdd(mult22AD,mult2155);
          real sum22AF#1 = RAdd(mult2192,sum22AE);
          real sum22B0#1 = RAdd(mult22AC,sum22AF);
          real intermediate22B1#1 = sum22B0;
          real sum22B2#1 = RAdd(mult218C,mult2152);
          real sum22B3#1 = RAdd(mult22A7,sum22B2);
          real intermediate22B4#1 = sum22B3;
          real intermediate22B5#1 = sum21B1;
          real intermediate22B6#1 = sum21BD;
          real intermediate22B7#1 = sum21C6;
          real mult22B8#1 = RMul(coeff21EE,prod213B);
          real mult22B9#2 = RMul(coeff21ED,prod213A);
          real mult22BA#1 = RMul(coeff21EB,prod2137);
          real mult22BB#2 = RMul(coeff21EA,prod2136);
          real mult22BC#2 = RMul(coeff21E9,prod2134);
          real mult22BD#3 = RMul(coeff219E,prod2131);
          real mult22BE#4 = RMul(coeff219B,prod212E);
          real mult22BF#2 = RMul(coeff21EA,prod2126);
          real mult22C0#2 = RMul(coeff21EF,prod2123);
          real mult22C1#4 = RMul(coeff219C,prod211E);
          real mult22C2#3 = RMul(coeff21BF,prod211A);
          real sum22C3#1 = RAdd(mult22C1,mult22C2);
          real sum22C4#1 = RAdd(mult21A8,sum22C3);
          real sum22C5#1 = RAdd(mult22C0,sum22C4);
          real sum22C6#1 = RAdd(mult22BF,sum22C5);
          real sum22C7#1 = RAdd(mult21F7,sum22C6);
          real sum22C8#1 = RAdd(mult21F6,sum22C7);
          real sum22C9#1 = RAdd(mult22BE,sum22C8);
          real sum22CA#1 = RAdd(mult21A5,sum22C9);
          real sum22CB#1 = RAdd(mult22BD,sum22CA);
          real sum22CC#1 = RAdd(mult22BC,sum22CB);
          real sum22CD#1 = RAdd(mult22BB,sum22CC);
          real sum22CE#1 = RAdd(mult22BA,sum22CD);
          real sum22CF#1 = RAdd(mult21A3,sum22CE);
          real sum22D0#1 = RAdd(mult22B9,sum22CF);
          real sum22D1#1 = RAdd(mult22B8,sum22D0);
          real sum22D2#1 = RAdd(mult21C4,sum22D1);
          real sum22D3#1 = RAdd(mult21F2,sum22D2);
          real sum22D4#1 = RAdd(mult219F,sum22D3);
          real sum22D5#1 = RAdd(mult21F1,sum22D4);
          real intermediate22D6#1 = sum22D5;
          real mult22D7#1 = RMul(coeff2211,prod213B);
          real mult22D8#2 = RMul(coeff2210,prod213A);
          real mult22D9#1 = RMul(coeff21EA,prod2137);
          real mult22DA#2 = RMul(coeff21ED,prod2136);
          real mult22DB#1 = RMul(coeff2127,prod2134);
          real mult22DC#3 = RMul(coeff21B4,prod2131);
          real mult22DD#2 = RMul(coeff21ED,prod2126);
          real sum22DE#1 = RAdd(mult22DD,sum22AE);
          real sum22DF#1 = RAdd(mult2151,sum22DE);
          real sum22E0#1 = RAdd(mult2216,sum22DF);
          real sum22E1#1 = RAdd(mult2182,sum22E0);
          real sum22E2#1 = RAdd(mult22DC,sum22E1);
          real sum22E3#1 = RAdd(mult22DB,sum22E2);
          real sum22E4#1 = RAdd(mult22DA,sum22E3);
          real sum22E5#1 = RAdd(mult22D9,sum22E4);
          real sum22E6#1 = RAdd(mult2149,sum22E5);
          real sum22E7#1 = RAdd(mult22D8,sum22E6);
          real sum22E8#1 = RAdd(mult22D7,sum22E7);
          real sum22E9#1 = RAdd(mult2181,sum22E8);
          real sum22EA#1 = RAdd(mult21B5,sum22E9);
          real sum22EB#1 = RAdd(mult2213,sum22EA);
          real intermediate22EC#1 = sum22EB;
          real mult22ED#1 = RMul(coeff222D,prod213B);
          real mult22EE#4 = RMul(coeff222C,prod213A);
          real mult22EF#1 = RMul(coeff222B,prod2137);
          real mult22F0#3 = RMul(coeff21C1,prod2131);
          real mult22F1#4 = RMul(coeff219B,prod2126);
          real sum22F2#1 = RAdd(mult2231,mult22F1);
          real sum22F3#1 = RAdd(mult22F0,sum22F2);
          real sum22F4#1 = RAdd(mult22BC,sum22F3);
          real sum22F5#1 = RAdd(mult21A4,sum22F4);
          real sum22F6#1 = RAdd(mult22EF,sum22F5);
          real sum22F7#1 = RAdd(mult22EE,sum22F6);
          real sum22F8#1 = RAdd(mult22ED,sum22F7);
          real sum22F9#1 = RAdd(mult21C2,sum22F8);
          real sum22FA#1 = RAdd(mult222E,sum22F9);
          real intermediate22FB#1 = sum22FA;
          real mult22FC#1 = RMul(coeff219D,prod2123);
          real mult22FD#5 = RMul(coeff219C,prod2121);
          real mult22FE#2 = RMul(coeff219B,prod211A);
          real sum22FF#2 = RAdd(mult22C1,mult22FE);
          real sum2300#1 = RAdd(mult22FD,sum22FF);
          real sum2301#1 = RAdd(mult22FC,sum2300);
          real sum2302#1 = RAdd(mult22F1,sum2301);
          real sum2303#1 = RAdd(mult21A7,sum2302);
          real sum2304#1 = RAdd(mult21CD,sum2303);
          real sum2305#1 = RAdd(mult22BE,sum2304);
          real sum2306#1 = RAdd(mult21A5,sum2305);
          real sum2307#2 = RAdd(mult22BD,sum2306);
          real intermediate2308#1 = sum2307;
          real mult2309#1 = RMul(coeff21B3,prod2123);
          real mult230A#3 = RMul(coeff211B,prod211A);
          real sum230B#1 = RAdd(mult2155,mult230A);
          real sum230C#1 = RAdd(mult2154,sum230B);
          real sum230D#1 = RAdd(mult2309,sum230C);
          real sum230E#1 = RAdd(mult2192,sum230D);
          real sum230F#1 = RAdd(mult2182,sum230E);
          real sum2310#2 = RAdd(mult22DC,sum230F);
          real intermediate2311#1 = sum2310;
          real mult2312#3 = RMul(coeff21C0,prod2123);
          real sum2313#1 = RAdd(mult2312,mult22C2);
          real sum2314#2 = RAdd(mult22F0,sum2313);
          real intermediate2315#1 = sum2314;
          real sum2316#1 = RAdd(mult2182,mult2154);
          real intermediate2317#1 = sum2316;
          real sum2318#1 = RAdd(mult2182,mult2151);
          real intermediate2319#1 = sum2318;
          real intermediate231A#1 = sum2183;
          real mult231B#2 = RMul(coeff2251,prod213A);
          real mult231C#1 = RMul(coeff2250,prod2139);
          real mult231D#3 = RMul(coeff2243,prod212F);
          real mult231E#2 = RMul(coeff2127,prod212E);
          real sum231F#1 = RAdd(mult2256,mult2154);
          real sum2320#1 = RAdd(mult231E,sum231F);
          real sum2321#1 = RAdd(mult231D,sum2320);
          real sum2322#1 = RAdd(mult22DA,sum2321);
          real sum2323#1 = RAdd(mult231C,sum2322);
          real sum2324#1 = RAdd(mult231B,sum2323);
          real sum2325#1 = RAdd(mult21B7,sum2324);
          real sum2326#1 = RAdd(mult2253,sum2325);
          real sum2327#1 = RAdd(mult2252,sum2326);
          real intermediate2328#1 = sum2327;
          real mult2329#2 = RMul(coeff2261,prod213A);
          real mult232A#5 = RMul(coeff21C0,prod212F);
          real sum232B#1 = RAdd(mult232A,mult21A7);
          real sum232C#1 = RAdd(mult22BB,sum232B);
          real sum232D#1 = RAdd(mult21A3,sum232C);
          real sum232E#1 = RAdd(mult2329,sum232D);
          real sum232F#1 = RAdd(mult21C3,sum232E);
          real sum2330#1 = RAdd(mult2262,sum232F);
          real intermediate2331#1 = sum2330;
          real sum2332#2 = RAdd(mult232A,mult22BE);
          real sum2333#1 = RAdd(mult21A3,sum2332);
          real sum2334#1 = RAdd(mult22EE,sum2333);
          real sum2335#1 = RAdd(mult21A1,sum2334);
          real sum2336#1 = RAdd(mult226C,sum2335);
          real sum2337#1 = RAdd(mult2262,sum2336);
          real intermediate2338#1 = sum2337;
          real mult2339#2 = RMul(coeff2127,prod2121);
          real sum233A#1 = RAdd(mult2151,mult2339);
          real sum233B#1 = RAdd(mult231E,sum233A);
          real sum233C#1 = RAdd(mult231D,sum233B);
          real intermediate233D#1 = sum233C;
          real sum233E#1 = RAdd(mult232A,mult21A8);
          real intermediate233F#1 = sum233E;
          real intermediate2340#1 = sum2332;
          real mult2341#2 = RMul(coeff21EF,prod2131);
          real mult2342#2 = RMul(coeff2243,prod2123);
          real mult2343#1 = RMul(coeff2250,prod211E);
          real sum2344#1 = RAdd(mult2343,mult230A);
          real sum2345#1 = RAdd(mult2339,sum2344);
          real sum2346#1 = RAdd(mult2342,sum2345);
          real sum2347#1 = RAdd(mult22DD,sum2346);
          real sum2348#1 = RAdd(mult2256,sum2347);
          real sum2349#1 = RAdd(mult2276,sum2348);
          real sum234A#1 = RAdd(mult214F,sum2349);
          real sum234B#1 = RAdd(mult231D,sum234A);
          real sum234C#1 = RAdd(mult2341,sum234B);
          real intermediate234D#1 = sum234C;
          real mult234E#4 = RMul(coeff217D,prod2131);
          real mult234F#2 = RMul(coeff226B,prod2123);
          real sum2350#1 = RAdd(mult21A8,sum22FF);
          real sum2351#1 = RAdd(mult234F,sum2350);
          real sum2352#1 = RAdd(mult2231,sum2351);
          real sum2353#1 = RAdd(mult232A,sum2352);
          real sum2354#1 = RAdd(mult234E,sum2353);
          real intermediate2355#1 = sum2354;
          real sum2356#1 = RAdd(mult2312,mult22C1);
          real sum2357#1 = RAdd(mult22BF,sum2356);
          real sum2358#1 = RAdd(mult21A7,sum2357);
          real sum2359#1 = RAdd(mult2283,sum2358);
          real sum235A#1 = RAdd(mult232A,sum2359);
          real sum235B#1 = RAdd(mult234E,sum235A);
          real intermediate235C#1 = sum235B;
          real mult235D#1 = RMul(coeff2127,prod212F);
          real sum235E#1 = RAdd(mult21F7,mult22FD);
          real sum235F#1 = RAdd(mult21A6,sum235E);
          real sum2360#1 = RAdd(mult235D,sum235F);
          real intermediate2361#1 = sum2360;
          real intermediate2362#1 = sum2169;
          real mult2363#1 = RMul(coeff216C,prod2140);
          real mult2364#1 = RMul(coeff216B,prod213F);
          real sum2365#1 = RAdd(mult2364,mult2146);
          real sum2366#1 = RAdd(mult2363,sum2365);
          real sum2367#1 = RAdd(mult216E,sum2366);
          real intermediate2368#1 = sum2367;
          real intermediate2369#1 = sum2199;
          real sum236A#1 = RAdd(mult2191,mult214B);
          real sum236B#1 = RAdd(mult21B8,sum236A);
          real sum236C#1 = RAdd(mult2190,sum236B);
          real intermediate236D#1 = sum236C;
          real sum236E#1 = RAdd(mult229F,mult2149);
          real sum236F#1 = RAdd(mult218B,sum236E);
          real intermediate2370#1 = sum236F;
          real intermediate2371#1 = sum22AA;
          real sum2372#2 = RAdd(mult22AD,mult2154);
          real sum2373#1 = RAdd(mult2182,sum2372);
          real sum2374#1 = RAdd(mult22AC,sum2373);
          real intermediate2375#1 = sum2374;
          real sum2376#1 = RAdd(mult2179,mult214F);
          real sum2377#1 = RAdd(mult22A7,sum2376);
          real intermediate2378#1 = sum2377;
          real mult2379#1 = RMul(coeff21EE,prod2140);
          real mult237A#1 = RMul(coeff21EB,prod213F);
          real mult237B#2 = RMul(coeff21E9,prod213E);
          real mult237C#2 = RMul(coeff21EA,prod2139);
          real mult237D#2 = RMul(coeff21EA,prod212E);
          real sum237E#1 = RAdd(mult21CF,mult22C2);
          real sum237F#1 = RAdd(mult22FD,sum237E);
          real sum2380#1 = RAdd(mult22C0,sum237F);
          real sum2381#1 = RAdd(mult22F1,sum2380);
          real sum2382#1 = RAdd(mult21F7,sum2381);
          real sum2383#1 = RAdd(mult21CD,sum2382);
          real sum2384#1 = RAdd(mult237D,sum2383);
          real sum2385#1 = RAdd(mult21F5,sum2384);
          real sum2386#1 = RAdd(mult22BD,sum2385);
          real sum2387#1 = RAdd(mult21E5,sum2386);
          real sum2388#1 = RAdd(mult21CB,sum2387);
          real sum2389#1 = RAdd(mult21F3,sum2388);
          real sum238A#1 = RAdd(mult237C,sum2389);
          real sum238B#1 = RAdd(mult22B9,sum238A);
          real sum238C#1 = RAdd(mult21C8,sum238B);
          real sum238D#1 = RAdd(mult237B,sum238C);
          real sum238E#1 = RAdd(mult237A,sum238D);
          real sum238F#1 = RAdd(mult2379,sum238E);
          real sum2390#1 = RAdd(mult21F1,sum238F);
          real intermediate2391#1 = sum2390;
          real mult2392#1 = RMul(coeff2211,prod2140);
          real mult2393#1 = RMul(coeff21EA,prod213F);
          real mult2394#1 = RMul(coeff2127,prod213E);
          real mult2395#2 = RMul(coeff21ED,prod2139);
          real mult2396#2 = RMul(coeff21ED,prod212E);
          real sum2397#1 = RAdd(mult2151,sum2372);
          real sum2398#1 = RAdd(mult2192,sum2397);
          real sum2399#1 = RAdd(mult2396,sum2398);
          real sum239A#1 = RAdd(mult2215,sum2399);
          real sum239B#1 = RAdd(mult22DC,sum239A);
          real sum239C#1 = RAdd(mult214B,sum239B);
          real sum239D#1 = RAdd(mult2191,sum239C);
          real sum239E#1 = RAdd(mult2395,sum239D);
          real sum239F#1 = RAdd(mult22D8,sum239E);
          real sum23A0#1 = RAdd(mult21DA,sum239F);
          real sum23A1#1 = RAdd(mult2394,sum23A0);
          real sum23A2#1 = RAdd(mult2393,sum23A1);
          real sum23A3#1 = RAdd(mult2392,sum23A2);
          real sum23A4#1 = RAdd(mult2213,sum23A3);
          real intermediate23A5#1 = sum23A4;
          real mult23A6#1 = RMul(coeff222D,prod2140);
          real mult23A7#1 = RMul(coeff222B,prod213F);
          real sum23A8#1 = RAdd(mult2230,mult22BE);
          real sum23A9#1 = RAdd(mult22F0,sum23A8);
          real sum23AA#1 = RAdd(mult21C9,sum23A9);
          real sum23AB#1 = RAdd(mult22EE,sum23AA);
          real sum23AC#1 = RAdd(mult21E3,sum23AB);
          real sum23AD#1 = RAdd(mult237B,sum23AC);
          real sum23AE#1 = RAdd(mult23A7,sum23AD);
          real sum23AF#1 = RAdd(mult23A6,sum23AE);
          real sum23B0#1 = RAdd(mult222E,sum23AF);
          real intermediate23B1#1 = sum23B0;
          real intermediate23B2#1 = sum21D8;
          real intermediate23B3#1 = sum21E1;
          real intermediate23B4#1 = sum21E7;
          real intermediate23B5#1 = sum2307;
          real intermediate23B6#1 = sum2310;
          real intermediate23B7#1 = sum2314;
          real sum23B8#1 = RAdd(mult2192,mult2155);
          real intermediate23B9#1 = sum23B8;
          real intermediate23BA#1 = sum2193;
          real sum23BB#1 = RAdd(mult2192,mult2151);
          real intermediate23BC#1 = sum23BB;
          real mult23BD#1 = RMul(coeff2250,prod2136);
          real mult23BE#3 = RMul(coeff2243,prod212B);
          real mult23BF#2 = RMul(coeff2127,prod2126);
          real sum23C0#1 = RAdd(mult23BF,mult2155);
          real sum23C1#1 = RAdd(mult2256,sum23C0);
          real sum23C2#1 = RAdd(mult23BE,sum23C1);
          real sum23C3#1 = RAdd(mult21DC,sum23C2);
          real sum23C4#1 = RAdd(mult23BD,sum23C3);
          real sum23C5#1 = RAdd(mult2275,sum23C4);
          real sum23C6#1 = RAdd(mult2395,sum23C5);
          real sum23C7#1 = RAdd(mult231B,sum23C6);
          real sum23C8#1 = RAdd(mult2274,sum23C7);
          real intermediate23C9#1 = sum23C8;
          real mult23CA#5 = RMul(coeff21C0,prod212B);
          real sum23CB#2 = RAdd(mult23CA,mult22F1);
          real sum23CC#1 = RAdd(mult21CC,sum23CB);
          real sum23CD#1 = RAdd(mult21CB,sum23CC);
          real sum23CE#1 = RAdd(mult228B,sum23CD);
          real sum23CF#1 = RAdd(mult22EE,sum23CE);
          real sum23D0#1 = RAdd(mult2282,sum23CF);
          real intermediate23D1#1 = sum23D0;
          real sum23D2#1 = RAdd(mult23CA,mult21A7);
          real sum23D3#1 = RAdd(mult21CB,sum23D2);
          real sum23D4#1 = RAdd(mult21E4,sum23D3);
          real sum23D5#1 = RAdd(mult237C,sum23D4);
          real sum23D6#1 = RAdd(mult2329,sum23D5);
          real sum23D7#1 = RAdd(mult2282,sum23D6);
          real intermediate23D8#1 = sum23D7;
          real mult23D9#1 = RMul(coeff2250,prod2121);
          real mult23DA#2 = RMul(coeff2127,prod211E);
          real sum23DB#1 = RAdd(mult23DA,mult230A);
          real sum23DC#1 = RAdd(mult23D9,sum23DB);
          real sum23DD#1 = RAdd(mult2342,sum23DC);
          real sum23DE#1 = RAdd(mult2152,sum23DD);
          real sum23DF#1 = RAdd(mult2256,sum23DE);
          real sum23E0#1 = RAdd(mult23BE,sum23DF);
          real sum23E1#1 = RAdd(mult2396,sum23E0);
          real sum23E2#1 = RAdd(mult2254,sum23E1);
          real sum23E3#1 = RAdd(mult2341,sum23E2);
          real intermediate23E4#1 = sum23E3;
          real sum23E5#1 = RAdd(mult21CF,mult22FE);
          real sum23E6#1 = RAdd(mult22FD,sum23E5);
          real sum23E7#1 = RAdd(mult234F,sum23E6);
          real sum23E8#1 = RAdd(mult23CA,sum23E7);
          real sum23E9#1 = RAdd(mult2230,sum23E8);
          real sum23EA#1 = RAdd(mult234E,sum23E9);
          real intermediate23EB#1 = sum23EA;
          real sum23EC#1 = RAdd(mult2312,mult22FD);
          real sum23ED#1 = RAdd(mult21A7,sum23EC);
          real sum23EE#1 = RAdd(mult23CA,sum23ED);
          real sum23EF#1 = RAdd(mult237D,sum23EE);
          real sum23F0#1 = RAdd(mult2263,sum23EF);
          real sum23F1#1 = RAdd(mult234E,sum23F0);
          real intermediate23F2#1 = sum23F1;
          real sum23F3#1 = RAdd(mult23BF,mult23DA);
          real sum23F4#1 = RAdd(mult2151,sum23F3);
          real sum23F5#1 = RAdd(mult23BE,sum23F4);
          real intermediate23F6#1 = sum23F5;
          real sum23F7#1 = RAdd(mult23CA,mult21CF);
          real intermediate23F8#1 = sum23F7;
          real intermediate23F9#1 = sum23CB;
          real mult23FA#1 = RMul(coeff2127,prod212B);
          real sum23FB#1 = RAdd(mult21CE,mult22C1);
          real sum23FC#1 = RAdd(mult21F7,sum23FB);
          real sum23FD#1 = RAdd(mult23FA,sum23FC);
          real intermediate23FE#1 = sum23FD;
          tensor[35] intermediateCons23FF#1 = <tensor[35]>[intermediate216A,intermediate2174,basisEval2175,basisEval2175,basisEval2175,basisEval2175,basisEval2175,intermediate217C,intermediate2186,intermediate218A,intermediate218F,intermediate2196,intermediate219A,intermediate21B2,intermediate21BE,intermediate21C7,intermediate21D9,intermediate21E2,intermediate21E8,intermediate220F,intermediate222A,intermediate223C,intermediate223E,intermediate2240,intermediate2242,intermediate224A,intermediate224D,intermediate224F,intermediate2260,intermediate226A,intermediate2273,intermediate2281,intermediate228A,intermediate2292,intermediate2297];
          tensor[35] intermediateCons2400#1 = <tensor[35]>[intermediate2298,basisEval2175,intermediate229E,basisEval2175,intermediate22A2,intermediate22A5,intermediate22A6,basisEval2175,basisEval2175,basisEval2175,intermediate22AB,intermediate22B1,intermediate22B4,intermediate22B5,intermediate22B6,intermediate22B7,intermediate22D6,intermediate22EC,intermediate22FB,intermediate2308,intermediate2311,intermediate2315,intermediate2317,intermediate2319,intermediate231A,intermediate2328,intermediate2331,intermediate2338,intermediate233D,intermediate233F,intermediate2340,intermediate234D,intermediate2355,intermediate235C,intermediate2361];
          tensor[35] intermediateCons2401#1 = <tensor[35]>[intermediate2362,basisEval2175,basisEval2175,intermediate2368,intermediate2369,intermediate236D,intermediate2370,intermediate2371,intermediate2375,intermediate2378,basisEval2175,basisEval2175,basisEval2175,intermediate2391,intermediate23A5,intermediate23B1,intermediate23B2,intermediate23B3,intermediate23B4,intermediate23B5,intermediate23B6,intermediate23B7,intermediate23B9,intermediate23BA,intermediate23BC,intermediate23C9,intermediate23D1,intermediate23D8,intermediate23E4,intermediate23EB,intermediate23F2,intermediate23F6,intermediate23F8,intermediate23F9,intermediate23FE];
          tensor[3,35] intermediateCons2402#1 = <tensor[3,35]>[intermediateCons23FF,intermediateCons2400,intermediateCons2401];
          tensor[3,35] basisResult2110#3 = intermediateCons2402;
          tensor[35] projParam26F7#1 = ProjectLast<tensor[3,35],[0]>(basisResult2110);
          real vdot26F8#1 = VDot<35>(femDofs1B65,projParam26F7);
          tensor[35] projParam26F9#1 = ProjectLast<tensor[3,35],[1]>(basisResult2110);
          real vdot26FA#1 = VDot<35>(femDofs1B65,projParam26F9);
          tensor[35] projParam26FB#1 = ProjectLast<tensor[3,35],[2]>(basisResult2110);
          real vdot26FC#1 = VDot<35>(femDofs1B65,projParam26FB);
          tensor[3] compositionl26F6#3 = <tensor[3]>[vdot26F8,vdot26FA,vdot26FC];
          int ilit2706#1 = 4;
          int mulRes2707#4 = IMul(intPos1A87,ilit2706);
          int ilit2708#1 = 0;
          int addRes2709#1 = IAdd(mulRes2707,ilit2708);
          int idx270A#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(_t1316,addRes2709);
          int ilit270B#1 = 1;
          int addRes270C#1 = IAdd(mulRes2707,ilit270B);
          int idx270D#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(_t1316,addRes270C);
          int ilit270E#1 = 2;
          int addRes270F#1 = IAdd(mulRes2707,ilit270E);
          int idx2710#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(_t1316,addRes270F);
          int ilit2711#1 = 3;
          int addRes2712#1 = IAdd(mulRes2707,ilit2711);
          int idx2713#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(_t1316,addRes2712);
          int[4] seq2714#1 = <int[4]>{idx270A,idx270D,idx2710,idx2713};
          int[4] femIndicies2705#4 = seq2714;
          int ilit2726#5 = 0;
          int ilit2727#5 = 3;
          int idx2728#1 = Subscript<int>(femIndicies2705,ilit2726);
          int mulRes2729#3 = IMul(ilit2727,idx2728);
          int addRes272A#1 = IAdd(ilit2726,mulRes2729);
          int ilit272B#5 = 1;
          int addRes272C#1 = IAdd(ilit272B,mulRes2729);
          int ilit272D#5 = 2;
          int addRes272E#1 = IAdd(ilit272D,mulRes2729);
          real dof_load272F#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1316,addRes272A);
          real dof_load2730#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1316,addRes272C);
          real dof_load2731#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1316,addRes272E);
          tensor[3] interCons2732#1 = <tensor[3]>[dof_load272F,dof_load2730,dof_load2731];
          int idx2733#1 = Subscript<int>(femIndicies2705,ilit272B);
          int mulRes2734#3 = IMul(ilit2727,idx2733);
          int addRes2735#1 = IAdd(ilit2726,mulRes2734);
          int addRes2736#1 = IAdd(ilit272B,mulRes2734);
          int addRes2737#1 = IAdd(ilit272D,mulRes2734);
          real dof_load2738#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1316,addRes2735);
          real dof_load2739#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1316,addRes2736);
          real dof_load273A#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1316,addRes2737);
          tensor[3] interCons273B#1 = <tensor[3]>[dof_load2738,dof_load2739,dof_load273A];
          int idx273C#1 = Subscript<int>(femIndicies2705,ilit272D);
          int mulRes273D#3 = IMul(ilit2727,idx273C);
          int addRes273E#1 = IAdd(ilit2726,mulRes273D);
          int addRes273F#1 = IAdd(ilit272B,mulRes273D);
          int addRes2740#1 = IAdd(ilit272D,mulRes273D);
          real dof_load2741#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1316,addRes273E);
          real dof_load2742#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1316,addRes273F);
          real dof_load2743#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1316,addRes2740);
          tensor[3] interCons2744#1 = <tensor[3]>[dof_load2741,dof_load2742,dof_load2743];
          int idx2745#1 = Subscript<int>(femIndicies2705,ilit2727);
          int mulRes2746#3 = IMul(ilit2727,idx2745);
          int addRes2747#1 = IAdd(ilit2726,mulRes2746);
          int addRes2748#1 = IAdd(ilit272B,mulRes2746);
          int addRes2749#1 = IAdd(ilit272D,mulRes2746);
          real dof_load274A#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1316,addRes2747);
          real dof_load274B#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1316,addRes2748);
          real dof_load274C#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1316,addRes2749);
          tensor[3] interCons274D#1 = <tensor[3]>[dof_load274A,dof_load274B,dof_load274C];
          tensor[4,3] dofs274E#1 = <tensor[4,3]>[interCons2732,interCons273B,interCons2744,interCons274D];
          tensor[4,3] femDofs2725#48 = dofs274E;
          real varAcc277A#0 = VIndex<3,0>(refPos1A89);
          real varAcc277B#0 = VIndex<3,1>(refPos1A89);
          real varAcc277C#0 = VIndex<3,2>(refPos1A89);
          real coeff277D#1 = -0.1e1;
          real one277E#4 = 0.1e1;
          real prod277F#1 = RMul(one277E,one277E);
          real prod2780#2 = RMul(one277E,prod277F);
          real basisEval2781#3 = RMul(coeff277D,prod2780);
          real basisEval2782#3 = RMul(one277E,prod2780);
          real basisEval2783#6 = 0.e0;
          tensor[4] intermediateCons2784#1 = <tensor[4]>[basisEval2781,basisEval2782,basisEval2783,basisEval2783];
          tensor[4] intermediateCons2785#1 = <tensor[4]>[basisEval2781,basisEval2783,basisEval2782,basisEval2783];
          tensor[4] intermediateCons2786#1 = <tensor[4]>[basisEval2781,basisEval2783,basisEval2783,basisEval2782];
          tensor[3,4] intermediateCons2787#1 = <tensor[3,4]>[intermediateCons2784,intermediateCons2785,intermediateCons2786];
          tensor[3,4] basisResult2779#24 = intermediateCons2787;
          real r2798#3 = TensorIndex<tensor[4,3],[0,0]>(femDofs2725);
          real r2799#3 = TensorIndex<tensor[3,4],[0,0]>(basisResult2779);
          real r279A#1 = RMul(r2798,r2799);
          real r279B#3 = TensorIndex<tensor[4,3],[1,0]>(femDofs2725);
          real r279C#3 = TensorIndex<tensor[3,4],[0,1]>(basisResult2779);
          real r279D#1 = RMul(r279B,r279C);
          real r279E#3 = TensorIndex<tensor[4,3],[2,0]>(femDofs2725);
          real r279F#3 = TensorIndex<tensor[3,4],[0,2]>(basisResult2779);
          real r27A0#1 = RMul(r279E,r279F);
          real r27A1#3 = TensorIndex<tensor[4,3],[3,0]>(femDofs2725);
          real r27A2#3 = TensorIndex<tensor[3,4],[0,3]>(basisResult2779);
          real r27A3#1 = RMul(r27A1,r27A2);
          real r27A4#1 = RAdd(r279A,r279D);
          real r27A5#1 = RAdd(r27A4,r27A0);
          real r27A6#1 = RAdd(r27A5,r27A3);
          real r27A7#3 = TensorIndex<tensor[3,4],[1,0]>(basisResult2779);
          real r27A8#1 = RMul(r2798,r27A7);
          real r27A9#3 = TensorIndex<tensor[3,4],[1,1]>(basisResult2779);
          real r27AA#1 = RMul(r279B,r27A9);
          real r27AB#3 = TensorIndex<tensor[3,4],[1,2]>(basisResult2779);
          real r27AC#1 = RMul(r279E,r27AB);
          real r27AD#3 = TensorIndex<tensor[3,4],[1,3]>(basisResult2779);
          real r27AE#1 = RMul(r27A1,r27AD);
          real r27AF#1 = RAdd(r27A8,r27AA);
          real r27B0#1 = RAdd(r27AF,r27AC);
          real r27B1#1 = RAdd(r27B0,r27AE);
          real r27B2#3 = TensorIndex<tensor[3,4],[2,0]>(basisResult2779);
          real r27B3#1 = RMul(r2798,r27B2);
          real r27B4#3 = TensorIndex<tensor[3,4],[2,1]>(basisResult2779);
          real r27B5#1 = RMul(r279B,r27B4);
          real r27B6#3 = TensorIndex<tensor[3,4],[2,2]>(basisResult2779);
          real r27B7#1 = RMul(r279E,r27B6);
          real r27B8#3 = TensorIndex<tensor[3,4],[2,3]>(basisResult2779);
          real r27B9#1 = RMul(r27A1,r27B8);
          real r27BA#1 = RAdd(r27B3,r27B5);
          real r27BB#1 = RAdd(r27BA,r27B7);
          real r27BC#1 = RAdd(r27BB,r27B9);
          tensor[3] tensor27BD#1 = <tensor[3]>[r27A6,r27B1,r27BC];
          real r27BE#3 = TensorIndex<tensor[4,3],[0,1]>(femDofs2725);
          real r27BF#1 = RMul(r27BE,r2799);
          real r27C0#3 = TensorIndex<tensor[4,3],[1,1]>(femDofs2725);
          real r27C1#1 = RMul(r27C0,r279C);
          real r27C2#3 = TensorIndex<tensor[4,3],[2,1]>(femDofs2725);
          real r27C3#1 = RMul(r27C2,r279F);
          real r27C4#3 = TensorIndex<tensor[4,3],[3,1]>(femDofs2725);
          real r27C5#1 = RMul(r27C4,r27A2);
          real r27C6#1 = RAdd(r27BF,r27C1);
          real r27C7#1 = RAdd(r27C6,r27C3);
          real r27C8#1 = RAdd(r27C7,r27C5);
          real r27C9#1 = RMul(r27BE,r27A7);
          real r27CA#1 = RMul(r27C0,r27A9);
          real r27CB#1 = RMul(r27C2,r27AB);
          real r27CC#1 = RMul(r27C4,r27AD);
          real r27CD#1 = RAdd(r27C9,r27CA);
          real r27CE#1 = RAdd(r27CD,r27CB);
          real r27CF#1 = RAdd(r27CE,r27CC);
          real r27D0#1 = RMul(r27BE,r27B2);
          real r27D1#1 = RMul(r27C0,r27B4);
          real r27D2#1 = RMul(r27C2,r27B6);
          real r27D3#1 = RMul(r27C4,r27B8);
          real r27D4#1 = RAdd(r27D0,r27D1);
          real r27D5#1 = RAdd(r27D4,r27D2);
          real r27D6#1 = RAdd(r27D5,r27D3);
          tensor[3] tensor27D7#1 = <tensor[3]>[r27C8,r27CF,r27D6];
          real r27D8#3 = TensorIndex<tensor[4,3],[0,2]>(femDofs2725);
          real r27D9#1 = RMul(r27D8,r2799);
          real r27DA#3 = TensorIndex<tensor[4,3],[1,2]>(femDofs2725);
          real r27DB#1 = RMul(r27DA,r279C);
          real r27DC#3 = TensorIndex<tensor[4,3],[2,2]>(femDofs2725);
          real r27DD#1 = RMul(r27DC,r279F);
          real r27DE#3 = TensorIndex<tensor[4,3],[3,2]>(femDofs2725);
          real r27DF#1 = RMul(r27DE,r27A2);
          real r27E0#1 = RAdd(r27D9,r27DB);
          real r27E1#1 = RAdd(r27E0,r27DD);
          real r27E2#1 = RAdd(r27E1,r27DF);
          real r27E3#1 = RMul(r27D8,r27A7);
          real r27E4#1 = RMul(r27DA,r27A9);
          real r27E5#1 = RMul(r27DC,r27AB);
          real r27E6#1 = RMul(r27DE,r27AD);
          real r27E7#1 = RAdd(r27E3,r27E4);
          real r27E8#1 = RAdd(r27E7,r27E5);
          real r27E9#1 = RAdd(r27E8,r27E6);
          real r27EA#1 = RMul(r27D8,r27B2);
          real r27EB#1 = RMul(r27DA,r27B4);
          real r27EC#1 = RMul(r27DC,r27B6);
          real r27ED#1 = RMul(r27DE,r27B8);
          real r27EE#1 = RAdd(r27EA,r27EB);
          real r27EF#1 = RAdd(r27EE,r27EC);
          real r27F0#1 = RAdd(r27EF,r27ED);
          tensor[3] tensor27F1#1 = <tensor[3]>[r27E2,r27E9,r27F0];
          tensor[3,3] probe_l_82797#18 = <tensor[3,3]>[tensor27BD,tensor27D7,tensor27F1];
          real realLit284F#9 = 0.e0;
          real r2850#3 = TensorIndex<tensor[3,3],[0,0]>(probe_l_82797);
          real r2851#3 = RMul(realLit284F,r2850);
          real r2852#3 = TensorIndex<tensor[3,3],[1,0]>(probe_l_82797);
          real r2853#3 = RMul(realLit284F,r2852);
          real r2854#3 = TensorIndex<tensor[3,3],[2,0]>(probe_l_82797);
          real r2855#5 = RMul(realLit284F,r2854);
          real r2856#3 = RAdd(r2851,r2853);
          real r2857#1 = RAdd(r2856,r2855);
          real r2858#3 = TensorIndex<tensor[3,3],[0,1]>(probe_l_82797);
          real r2859#3 = RMul(realLit284F,r2858);
          real r285A#3 = TensorIndex<tensor[3,3],[1,1]>(probe_l_82797);
          real r285B#3 = RMul(realLit284F,r285A);
          real r285C#3 = TensorIndex<tensor[3,3],[2,1]>(probe_l_82797);
          real r285D#5 = RMul(realLit284F,r285C);
          real r285E#3 = RAdd(r2859,r285B);
          real r285F#1 = RAdd(r285E,r285D);
          real r2860#3 = TensorIndex<tensor[3,3],[0,2]>(probe_l_82797);
          real r2861#3 = RMul(realLit284F,r2860);
          real r2862#3 = TensorIndex<tensor[3,3],[1,2]>(probe_l_82797);
          real r2863#3 = RMul(realLit284F,r2862);
          real r2864#3 = TensorIndex<tensor[3,3],[2,2]>(probe_l_82797);
          real r2865#5 = RMul(realLit284F,r2864);
          real r2866#3 = RAdd(r2861,r2863);
          real r2867#1 = RAdd(r2866,r2865);
          tensor[3] tensor2868#3 = <tensor[3]>[r2857,r285F,r2867];
          real realLit2869#9 = -0.1e1;
          real r286A#1 = RMul(realLit2869,r2854);
          real r286B#1 = RAdd(r2856,r286A);
          real r286C#1 = RMul(realLit2869,r285C);
          real r286D#1 = RAdd(r285E,r286C);
          real r286E#1 = RMul(realLit2869,r2864);
          real r286F#1 = RAdd(r2866,r286E);
          tensor[3] tensor2870#1 = <tensor[3]>[r286B,r286D,r286F];
          real realLit2871#9 = 0.1e1;
          real r2872#1 = RMul(realLit2871,r2852);
          real r2873#1 = RAdd(r2851,r2872);
          real r2874#1 = RAdd(r2873,r2855);
          real r2875#1 = RMul(realLit2871,r285A);
          real r2876#1 = RAdd(r2859,r2875);
          real r2877#1 = RAdd(r2876,r285D);
          real r2878#1 = RMul(realLit2871,r2862);
          real r2879#1 = RAdd(r2861,r2878);
          real r287A#1 = RAdd(r2879,r2865);
          tensor[3] tensor287B#1 = <tensor[3]>[r2874,r2877,r287A];
          tensor[3,3] tensor287C#1 = <tensor[3,3]>[tensor2868,tensor2870,tensor287B];
          real r287D#1 = RMul(realLit2871,r2854);
          real r287E#1 = RAdd(r2856,r287D);
          real r287F#1 = RMul(realLit2871,r285C);
          real r2880#1 = RAdd(r285E,r287F);
          real r2881#1 = RMul(realLit2871,r2864);
          real r2882#1 = RAdd(r2866,r2881);
          tensor[3] tensor2883#1 = <tensor[3]>[r287E,r2880,r2882];
          real r2884#1 = RMul(realLit2869,r2850);
          real r2885#1 = RAdd(r2884,r2853);
          real r2886#1 = RAdd(r2885,r2855);
          real r2887#1 = RMul(realLit2869,r2858);
          real r2888#1 = RAdd(r2887,r285B);
          real r2889#1 = RAdd(r2888,r285D);
          real r288A#1 = RMul(realLit2869,r2860);
          real r288B#1 = RAdd(r288A,r2863);
          real r288C#1 = RAdd(r288B,r2865);
          tensor[3] tensor288D#1 = <tensor[3]>[r2886,r2889,r288C];
          tensor[3,3] tensor288E#1 = <tensor[3,3]>[tensor2883,tensor2868,tensor288D];
          real r288F#1 = RMul(realLit2869,r2852);
          real r2890#1 = RAdd(r2851,r288F);
          real r2891#1 = RAdd(r2890,r2855);
          real r2892#1 = RMul(realLit2869,r285A);
          real r2893#1 = RAdd(r2859,r2892);
          real r2894#1 = RAdd(r2893,r285D);
          real r2895#1 = RMul(realLit2869,r2862);
          real r2896#1 = RAdd(r2861,r2895);
          real r2897#1 = RAdd(r2896,r2865);
          tensor[3] tensor2898#1 = <tensor[3]>[r2891,r2894,r2897];
          real r2899#1 = RMul(realLit2871,r2850);
          real r289A#1 = RAdd(r2899,r2853);
          real r289B#1 = RAdd(r289A,r2855);
          real r289C#1 = RMul(realLit2871,r2858);
          real r289D#1 = RAdd(r289C,r285B);
          real r289E#1 = RAdd(r289D,r285D);
          real r289F#1 = RMul(realLit2871,r2860);
          real r28A0#1 = RAdd(r289F,r2863);
          real r28A1#1 = RAdd(r28A0,r2865);
          tensor[3] tensor28A2#1 = <tensor[3]>[r289B,r289E,r28A1];
          tensor[3,3] tensor28A3#1 = <tensor[3,3]>[tensor2898,tensor28A2,tensor2868];
          tensor[3,3,3] op1_e3_l_10284E#27 = <tensor[3,3,3]>[tensor287C,tensor288E,tensor28A3];
          real r28FC#9 = TensorIndex<tensor[3,3],[0,0]>(probe_l_82797);
          real r28FD#3 = TensorIndex<tensor[3,3,3],[0,0,0]>(op1_e3_l_10284E);
          real r28FE#1 = RMul(r28FC,r28FD);
          real r28FF#9 = TensorIndex<tensor[3,3],[1,0]>(probe_l_82797);
          real r2900#3 = TensorIndex<tensor[3,3,3],[1,0,0]>(op1_e3_l_10284E);
          real r2901#1 = RMul(r28FF,r2900);
          real r2902#9 = TensorIndex<tensor[3,3],[2,0]>(probe_l_82797);
          real r2903#3 = TensorIndex<tensor[3,3,3],[2,0,0]>(op1_e3_l_10284E);
          real r2904#1 = RMul(r2902,r2903);
          real r2905#1 = RAdd(r28FE,r2901);
          real r2906#1 = RAdd(r2905,r2904);
          real r2907#3 = TensorIndex<tensor[3,3,3],[0,0,1]>(op1_e3_l_10284E);
          real r2908#1 = RMul(r28FC,r2907);
          real r2909#3 = TensorIndex<tensor[3,3,3],[1,0,1]>(op1_e3_l_10284E);
          real r290A#1 = RMul(r28FF,r2909);
          real r290B#3 = TensorIndex<tensor[3,3,3],[2,0,1]>(op1_e3_l_10284E);
          real r290C#1 = RMul(r2902,r290B);
          real r290D#1 = RAdd(r2908,r290A);
          real r290E#1 = RAdd(r290D,r290C);
          real r290F#3 = TensorIndex<tensor[3,3,3],[0,0,2]>(op1_e3_l_10284E);
          real r2910#1 = RMul(r28FC,r290F);
          real r2911#3 = TensorIndex<tensor[3,3,3],[1,0,2]>(op1_e3_l_10284E);
          real r2912#1 = RMul(r28FF,r2911);
          real r2913#3 = TensorIndex<tensor[3,3,3],[2,0,2]>(op1_e3_l_10284E);
          real r2914#1 = RMul(r2902,r2913);
          real r2915#1 = RAdd(r2910,r2912);
          real r2916#1 = RAdd(r2915,r2914);
          tensor[3] tensor2917#1 = <tensor[3]>[r2906,r290E,r2916];
          real r2918#3 = TensorIndex<tensor[3,3,3],[0,1,0]>(op1_e3_l_10284E);
          real r2919#1 = RMul(r28FC,r2918);
          real r291A#3 = TensorIndex<tensor[3,3,3],[1,1,0]>(op1_e3_l_10284E);
          real r291B#1 = RMul(r28FF,r291A);
          real r291C#3 = TensorIndex<tensor[3,3,3],[2,1,0]>(op1_e3_l_10284E);
          real r291D#1 = RMul(r2902,r291C);
          real r291E#1 = RAdd(r2919,r291B);
          real r291F#1 = RAdd(r291E,r291D);
          real r2920#3 = TensorIndex<tensor[3,3,3],[0,1,1]>(op1_e3_l_10284E);
          real r2921#1 = RMul(r28FC,r2920);
          real r2922#3 = TensorIndex<tensor[3,3,3],[1,1,1]>(op1_e3_l_10284E);
          real r2923#1 = RMul(r28FF,r2922);
          real r2924#3 = TensorIndex<tensor[3,3,3],[2,1,1]>(op1_e3_l_10284E);
          real r2925#1 = RMul(r2902,r2924);
          real r2926#1 = RAdd(r2921,r2923);
          real r2927#1 = RAdd(r2926,r2925);
          real r2928#3 = TensorIndex<tensor[3,3,3],[0,1,2]>(op1_e3_l_10284E);
          real r2929#1 = RMul(r28FC,r2928);
          real r292A#3 = TensorIndex<tensor[3,3,3],[1,1,2]>(op1_e3_l_10284E);
          real r292B#1 = RMul(r28FF,r292A);
          real r292C#3 = TensorIndex<tensor[3,3,3],[2,1,2]>(op1_e3_l_10284E);
          real r292D#1 = RMul(r2902,r292C);
          real r292E#1 = RAdd(r2929,r292B);
          real r292F#1 = RAdd(r292E,r292D);
          tensor[3] tensor2930#1 = <tensor[3]>[r291F,r2927,r292F];
          real r2931#3 = TensorIndex<tensor[3,3,3],[0,2,0]>(op1_e3_l_10284E);
          real r2932#1 = RMul(r28FC,r2931);
          real r2933#3 = TensorIndex<tensor[3,3,3],[1,2,0]>(op1_e3_l_10284E);
          real r2934#1 = RMul(r28FF,r2933);
          real r2935#3 = TensorIndex<tensor[3,3,3],[2,2,0]>(op1_e3_l_10284E);
          real r2936#1 = RMul(r2902,r2935);
          real r2937#1 = RAdd(r2932,r2934);
          real r2938#1 = RAdd(r2937,r2936);
          real r2939#3 = TensorIndex<tensor[3,3,3],[0,2,1]>(op1_e3_l_10284E);
          real r293A#1 = RMul(r28FC,r2939);
          real r293B#3 = TensorIndex<tensor[3,3,3],[1,2,1]>(op1_e3_l_10284E);
          real r293C#1 = RMul(r28FF,r293B);
          real r293D#3 = TensorIndex<tensor[3,3,3],[2,2,1]>(op1_e3_l_10284E);
          real r293E#1 = RMul(r2902,r293D);
          real r293F#1 = RAdd(r293A,r293C);
          real r2940#1 = RAdd(r293F,r293E);
          real r2941#3 = TensorIndex<tensor[3,3,3],[0,2,2]>(op1_e3_l_10284E);
          real r2942#1 = RMul(r28FC,r2941);
          real r2943#3 = TensorIndex<tensor[3,3,3],[1,2,2]>(op1_e3_l_10284E);
          real r2944#1 = RMul(r28FF,r2943);
          real r2945#3 = TensorIndex<tensor[3,3,3],[2,2,2]>(op1_e3_l_10284E);
          real r2946#1 = RMul(r2902,r2945);
          real r2947#1 = RAdd(r2942,r2944);
          real r2948#1 = RAdd(r2947,r2946);
          tensor[3] tensor2949#1 = <tensor[3]>[r2938,r2940,r2948];
          tensor[3,3] tensor294A#1 = <tensor[3,3]>[tensor2917,tensor2930,tensor2949];
          real r294B#9 = TensorIndex<tensor[3,3],[0,1]>(probe_l_82797);
          real r294C#1 = RMul(r294B,r28FD);
          real r294D#9 = TensorIndex<tensor[3,3],[1,1]>(probe_l_82797);
          real r294E#1 = RMul(r294D,r2900);
          real r294F#9 = TensorIndex<tensor[3,3],[2,1]>(probe_l_82797);
          real r2950#1 = RMul(r294F,r2903);
          real r2951#1 = RAdd(r294C,r294E);
          real r2952#1 = RAdd(r2951,r2950);
          real r2953#1 = RMul(r294B,r2907);
          real r2954#1 = RMul(r294D,r2909);
          real r2955#1 = RMul(r294F,r290B);
          real r2956#1 = RAdd(r2953,r2954);
          real r2957#1 = RAdd(r2956,r2955);
          real r2958#1 = RMul(r294B,r290F);
          real r2959#1 = RMul(r294D,r2911);
          real r295A#1 = RMul(r294F,r2913);
          real r295B#1 = RAdd(r2958,r2959);
          real r295C#1 = RAdd(r295B,r295A);
          tensor[3] tensor295D#1 = <tensor[3]>[r2952,r2957,r295C];
          real r295E#1 = RMul(r294B,r2918);
          real r295F#1 = RMul(r294D,r291A);
          real r2960#1 = RMul(r294F,r291C);
          real r2961#1 = RAdd(r295E,r295F);
          real r2962#1 = RAdd(r2961,r2960);
          real r2963#1 = RMul(r294B,r2920);
          real r2964#1 = RMul(r294D,r2922);
          real r2965#1 = RMul(r294F,r2924);
          real r2966#1 = RAdd(r2963,r2964);
          real r2967#1 = RAdd(r2966,r2965);
          real r2968#1 = RMul(r294B,r2928);
          real r2969#1 = RMul(r294D,r292A);
          real r296A#1 = RMul(r294F,r292C);
          real r296B#1 = RAdd(r2968,r2969);
          real r296C#1 = RAdd(r296B,r296A);
          tensor[3] tensor296D#1 = <tensor[3]>[r2962,r2967,r296C];
          real r296E#1 = RMul(r294B,r2931);
          real r296F#1 = RMul(r294D,r2933);
          real r2970#1 = RMul(r294F,r2935);
          real r2971#1 = RAdd(r296E,r296F);
          real r2972#1 = RAdd(r2971,r2970);
          real r2973#1 = RMul(r294B,r2939);
          real r2974#1 = RMul(r294D,r293B);
          real r2975#1 = RMul(r294F,r293D);
          real r2976#1 = RAdd(r2973,r2974);
          real r2977#1 = RAdd(r2976,r2975);
          real r2978#1 = RMul(r294B,r2941);
          real r2979#1 = RMul(r294D,r2943);
          real r297A#1 = RMul(r294F,r2945);
          real r297B#1 = RAdd(r2978,r2979);
          real r297C#1 = RAdd(r297B,r297A);
          tensor[3] tensor297D#1 = <tensor[3]>[r2972,r2977,r297C];
          tensor[3,3] tensor297E#1 = <tensor[3,3]>[tensor295D,tensor296D,tensor297D];
          real r297F#9 = TensorIndex<tensor[3,3],[0,2]>(probe_l_82797);
          real r2980#1 = RMul(r297F,r28FD);
          real r2981#9 = TensorIndex<tensor[3,3],[1,2]>(probe_l_82797);
          real r2982#1 = RMul(r2981,r2900);
          real r2983#9 = TensorIndex<tensor[3,3],[2,2]>(probe_l_82797);
          real r2984#1 = RMul(r2983,r2903);
          real r2985#1 = RAdd(r2980,r2982);
          real r2986#1 = RAdd(r2985,r2984);
          real r2987#1 = RMul(r297F,r2907);
          real r2988#1 = RMul(r2981,r2909);
          real r2989#1 = RMul(r2983,r290B);
          real r298A#1 = RAdd(r2987,r2988);
          real r298B#1 = RAdd(r298A,r2989);
          real r298C#1 = RMul(r297F,r290F);
          real r298D#1 = RMul(r2981,r2911);
          real r298E#1 = RMul(r2983,r2913);
          real r298F#1 = RAdd(r298C,r298D);
          real r2990#1 = RAdd(r298F,r298E);
          tensor[3] tensor2991#1 = <tensor[3]>[r2986,r298B,r2990];
          real r2992#1 = RMul(r297F,r2918);
          real r2993#1 = RMul(r2981,r291A);
          real r2994#1 = RMul(r2983,r291C);
          real r2995#1 = RAdd(r2992,r2993);
          real r2996#1 = RAdd(r2995,r2994);
          real r2997#1 = RMul(r297F,r2920);
          real r2998#1 = RMul(r2981,r2922);
          real r2999#1 = RMul(r2983,r2924);
          real r299A#1 = RAdd(r2997,r2998);
          real r299B#1 = RAdd(r299A,r2999);
          real r299C#1 = RMul(r297F,r2928);
          real r299D#1 = RMul(r2981,r292A);
          real r299E#1 = RMul(r2983,r292C);
          real r299F#1 = RAdd(r299C,r299D);
          real r29A0#1 = RAdd(r299F,r299E);
          tensor[3] tensor29A1#1 = <tensor[3]>[r2996,r299B,r29A0];
          real r29A2#1 = RMul(r297F,r2931);
          real r29A3#1 = RMul(r2981,r2933);
          real r29A4#1 = RMul(r2983,r2935);
          real r29A5#1 = RAdd(r29A2,r29A3);
          real r29A6#1 = RAdd(r29A5,r29A4);
          real r29A7#1 = RMul(r297F,r2939);
          real r29A8#1 = RMul(r2981,r293B);
          real r29A9#1 = RMul(r2983,r293D);
          real r29AA#1 = RAdd(r29A7,r29A8);
          real r29AB#1 = RAdd(r29AA,r29A9);
          real r29AC#1 = RMul(r297F,r2941);
          real r29AD#1 = RMul(r2981,r2943);
          real r29AE#1 = RMul(r2983,r2945);
          real r29AF#1 = RAdd(r29AC,r29AD);
          real r29B0#1 = RAdd(r29AF,r29AE);
          tensor[3] tensor29B1#1 = <tensor[3]>[r29A6,r29AB,r29B0];
          tensor[3,3] tensor29B2#1 = <tensor[3,3]>[tensor2991,tensor29A1,tensor29B1];
          tensor[3,3,3] op1_e3_l_1128FB#27 = <tensor[3,3,3]>[tensor294A,tensor297E,tensor29B2];
          real r2A6D#1 = TensorIndex<tensor[4,3],[0,0]>(femDofs2725);
          real r2A6E#3 = TensorIndex<tensor[3,4],[0,0]>(basisResult2779);
          real r2A6F#1 = RMul(r2A6D,r2A6E);
          real r2A70#1 = TensorIndex<tensor[4,3],[1,0]>(femDofs2725);
          real r2A71#3 = TensorIndex<tensor[3,4],[0,1]>(basisResult2779);
          real r2A72#1 = RMul(r2A70,r2A71);
          real r2A73#1 = TensorIndex<tensor[4,3],[2,0]>(femDofs2725);
          real r2A74#3 = TensorIndex<tensor[3,4],[0,2]>(basisResult2779);
          real r2A75#1 = RMul(r2A73,r2A74);
          real r2A76#1 = TensorIndex<tensor[4,3],[3,0]>(femDofs2725);
          real r2A77#3 = TensorIndex<tensor[3,4],[0,3]>(basisResult2779);
          real r2A78#1 = RMul(r2A76,r2A77);
          real r2A79#1 = RAdd(r2A6F,r2A72);
          real r2A7A#1 = RAdd(r2A79,r2A75);
          real r2A7B#1 = RAdd(r2A7A,r2A78);
          real r2A7C#1 = TensorIndex<tensor[4,3],[0,1]>(femDofs2725);
          real r2A7D#1 = RMul(r2A7C,r2A6E);
          real r2A7E#1 = TensorIndex<tensor[4,3],[1,1]>(femDofs2725);
          real r2A7F#1 = RMul(r2A7E,r2A71);
          real r2A80#1 = TensorIndex<tensor[4,3],[2,1]>(femDofs2725);
          real r2A81#1 = RMul(r2A80,r2A74);
          real r2A82#1 = TensorIndex<tensor[4,3],[3,1]>(femDofs2725);
          real r2A83#1 = RMul(r2A82,r2A77);
          real r2A84#1 = RAdd(r2A7D,r2A7F);
          real r2A85#1 = RAdd(r2A84,r2A81);
          real r2A86#1 = RAdd(r2A85,r2A83);
          real r2A87#1 = TensorIndex<tensor[4,3],[0,2]>(femDofs2725);
          real r2A88#1 = RMul(r2A87,r2A6E);
          real r2A89#1 = TensorIndex<tensor[4,3],[1,2]>(femDofs2725);
          real r2A8A#1 = RMul(r2A89,r2A71);
          real r2A8B#1 = TensorIndex<tensor[4,3],[2,2]>(femDofs2725);
          real r2A8C#1 = RMul(r2A8B,r2A74);
          real r2A8D#1 = TensorIndex<tensor[4,3],[3,2]>(femDofs2725);
          real r2A8E#1 = RMul(r2A8D,r2A77);
          real r2A8F#1 = RAdd(r2A88,r2A8A);
          real r2A90#1 = RAdd(r2A8F,r2A8C);
          real r2A91#1 = RAdd(r2A90,r2A8E);
          tensor[3] probe_l_122A6C#1 = <tensor[3]>[r2A7B,r2A86,r2A91];
          real r2ABA#1 = TensorIndex<tensor[4,3],[0,0]>(femDofs2725);
          real r2ABB#3 = TensorIndex<tensor[3,4],[1,0]>(basisResult2779);
          real r2ABC#1 = RMul(r2ABA,r2ABB);
          real r2ABD#1 = TensorIndex<tensor[4,3],[1,0]>(femDofs2725);
          real r2ABE#3 = TensorIndex<tensor[3,4],[1,1]>(basisResult2779);
          real r2ABF#1 = RMul(r2ABD,r2ABE);
          real r2AC0#1 = TensorIndex<tensor[4,3],[2,0]>(femDofs2725);
          real r2AC1#3 = TensorIndex<tensor[3,4],[1,2]>(basisResult2779);
          real r2AC2#1 = RMul(r2AC0,r2AC1);
          real r2AC3#1 = TensorIndex<tensor[4,3],[3,0]>(femDofs2725);
          real r2AC4#3 = TensorIndex<tensor[3,4],[1,3]>(basisResult2779);
          real r2AC5#1 = RMul(r2AC3,r2AC4);
          real r2AC6#1 = RAdd(r2ABC,r2ABF);
          real r2AC7#1 = RAdd(r2AC6,r2AC2);
          real r2AC8#1 = RAdd(r2AC7,r2AC5);
          real r2AC9#1 = TensorIndex<tensor[4,3],[0,1]>(femDofs2725);
          real r2ACA#1 = RMul(r2AC9,r2ABB);
          real r2ACB#1 = TensorIndex<tensor[4,3],[1,1]>(femDofs2725);
          real r2ACC#1 = RMul(r2ACB,r2ABE);
          real r2ACD#1 = TensorIndex<tensor[4,3],[2,1]>(femDofs2725);
          real r2ACE#1 = RMul(r2ACD,r2AC1);
          real r2ACF#1 = TensorIndex<tensor[4,3],[3,1]>(femDofs2725);
          real r2AD0#1 = RMul(r2ACF,r2AC4);
          real r2AD1#1 = RAdd(r2ACA,r2ACC);
          real r2AD2#1 = RAdd(r2AD1,r2ACE);
          real r2AD3#1 = RAdd(r2AD2,r2AD0);
          real r2AD4#1 = TensorIndex<tensor[4,3],[0,2]>(femDofs2725);
          real r2AD5#1 = RMul(r2AD4,r2ABB);
          real r2AD6#1 = TensorIndex<tensor[4,3],[1,2]>(femDofs2725);
          real r2AD7#1 = RMul(r2AD6,r2ABE);
          real r2AD8#1 = TensorIndex<tensor[4,3],[2,2]>(femDofs2725);
          real r2AD9#1 = RMul(r2AD8,r2AC1);
          real r2ADA#1 = TensorIndex<tensor[4,3],[3,2]>(femDofs2725);
          real r2ADB#1 = RMul(r2ADA,r2AC4);
          real r2ADC#1 = RAdd(r2AD5,r2AD7);
          real r2ADD#1 = RAdd(r2ADC,r2AD9);
          real r2ADE#1 = RAdd(r2ADD,r2ADB);
          tensor[3] probe_l_132AB9#3 = <tensor[3]>[r2AC8,r2AD3,r2ADE];
          real r2B07#1 = TensorIndex<tensor[4,3],[0,0]>(femDofs2725);
          real r2B08#3 = TensorIndex<tensor[3,4],[2,0]>(basisResult2779);
          real r2B09#1 = RMul(r2B07,r2B08);
          real r2B0A#1 = TensorIndex<tensor[4,3],[1,0]>(femDofs2725);
          real r2B0B#3 = TensorIndex<tensor[3,4],[2,1]>(basisResult2779);
          real r2B0C#1 = RMul(r2B0A,r2B0B);
          real r2B0D#1 = TensorIndex<tensor[4,3],[2,0]>(femDofs2725);
          real r2B0E#3 = TensorIndex<tensor[3,4],[2,2]>(basisResult2779);
          real r2B0F#1 = RMul(r2B0D,r2B0E);
          real r2B10#1 = TensorIndex<tensor[4,3],[3,0]>(femDofs2725);
          real r2B11#3 = TensorIndex<tensor[3,4],[2,3]>(basisResult2779);
          real r2B12#1 = RMul(r2B10,r2B11);
          real r2B13#1 = RAdd(r2B09,r2B0C);
          real r2B14#1 = RAdd(r2B13,r2B0F);
          real r2B15#1 = RAdd(r2B14,r2B12);
          real r2B16#1 = TensorIndex<tensor[4,3],[0,1]>(femDofs2725);
          real r2B17#1 = RMul(r2B16,r2B08);
          real r2B18#1 = TensorIndex<tensor[4,3],[1,1]>(femDofs2725);
          real r2B19#1 = RMul(r2B18,r2B0B);
          real r2B1A#1 = TensorIndex<tensor[4,3],[2,1]>(femDofs2725);
          real r2B1B#1 = RMul(r2B1A,r2B0E);
          real r2B1C#1 = TensorIndex<tensor[4,3],[3,1]>(femDofs2725);
          real r2B1D#1 = RMul(r2B1C,r2B11);
          real r2B1E#1 = RAdd(r2B17,r2B19);
          real r2B1F#1 = RAdd(r2B1E,r2B1B);
          real r2B20#1 = RAdd(r2B1F,r2B1D);
          real r2B21#1 = TensorIndex<tensor[4,3],[0,2]>(femDofs2725);
          real r2B22#1 = RMul(r2B21,r2B08);
          real r2B23#1 = TensorIndex<tensor[4,3],[1,2]>(femDofs2725);
          real r2B24#1 = RMul(r2B23,r2B0B);
          real r2B25#1 = TensorIndex<tensor[4,3],[2,2]>(femDofs2725);
          real r2B26#1 = RMul(r2B25,r2B0E);
          real r2B27#1 = TensorIndex<tensor[4,3],[3,2]>(femDofs2725);
          real r2B28#1 = RMul(r2B27,r2B11);
          real r2B29#1 = RAdd(r2B22,r2B24);
          real r2B2A#1 = RAdd(r2B29,r2B26);
          real r2B2B#1 = RAdd(r2B2A,r2B28);
          tensor[3] probe_l_142B06#3 = <tensor[3]>[r2B15,r2B20,r2B2B];
          real realLit2B54#3 = 0.e0;
          real r2B55#3 = TensorIndex<tensor[3],[0]>(probe_l_142B06);
          real r2B56#3 = RMul(realLit2B54,r2B55);
          real r2B57#3 = TensorIndex<tensor[3],[1]>(probe_l_142B06);
          real r2B58#3 = RMul(realLit2B54,r2B57);
          real r2B59#3 = TensorIndex<tensor[3],[2]>(probe_l_142B06);
          real r2B5A#5 = RMul(realLit2B54,r2B59);
          real r2B5B#3 = RAdd(r2B56,r2B58);
          real r2B5C#3 = RAdd(r2B5B,r2B5A);
          real realLit2B5D#3 = 0.1e1;
          real r2B5E#1 = RMul(realLit2B5D,r2B59);
          real r2B5F#1 = RAdd(r2B5B,r2B5E);
          real realLit2B60#3 = -0.1e1;
          real r2B61#1 = RMul(realLit2B60,r2B57);
          real r2B62#1 = RAdd(r2B56,r2B61);
          real r2B63#1 = RAdd(r2B62,r2B5A);
          tensor[3] tensor2B64#1 = <tensor[3]>[r2B5C,r2B5F,r2B63];
          real r2B65#1 = RMul(realLit2B60,r2B59);
          real r2B66#1 = RAdd(r2B5B,r2B65);
          real r2B67#1 = RMul(realLit2B5D,r2B55);
          real r2B68#1 = RAdd(r2B67,r2B58);
          real r2B69#1 = RAdd(r2B68,r2B5A);
          tensor[3] tensor2B6A#1 = <tensor[3]>[r2B66,r2B5C,r2B69];
          real r2B6B#1 = RMul(realLit2B5D,r2B57);
          real r2B6C#1 = RAdd(r2B56,r2B6B);
          real r2B6D#1 = RAdd(r2B6C,r2B5A);
          real r2B6E#1 = RMul(realLit2B60,r2B55);
          real r2B6F#1 = RAdd(r2B6E,r2B58);
          real r2B70#1 = RAdd(r2B6F,r2B5A);
          tensor[3] tensor2B71#1 = <tensor[3]>[r2B6D,r2B70,r2B5C];
          tensor[3,3] op1_e3_l_152B53#3 = <tensor[3,3]>[tensor2B64,tensor2B6A,tensor2B71];
          tensor[3] projParam2B93#1 = ProjectLast<tensor[3,3],[0]>(op1_e3_l_152B53);
          real vdot2B94#1 = VDot<3>(probe_l_132AB9,projParam2B93);
          tensor[3] projParam2B95#1 = ProjectLast<tensor[3,3],[1]>(op1_e3_l_152B53);
          real vdot2B96#1 = VDot<3>(probe_l_132AB9,projParam2B95);
          tensor[3] projParam2B97#1 = ProjectLast<tensor[3,3],[2]>(op1_e3_l_152B53);
          real vdot2B98#1 = VDot<3>(probe_l_132AB9,projParam2B97);
          tensor[3] op1_e3_l_162B92#1 = <tensor[3]>[vdot2B94,vdot2B96,vdot2B98];
          real op1_e3_l_172BA1#1 = VDot<3>(probe_l_122A6C,op1_e3_l_162B92);
          real realLit2BA5#27 = 0.e0;
          real r2BA6#1 = TensorIndex<tensor[3,3,3],[0,0,0]>(op1_e3_l_1128FB);
          real r2BA7#2 = RMul(realLit2BA5,r2BA6);
          real r2BA8#2 = TensorIndex<tensor[3,3,3],[0,0,1]>(op1_e3_l_1128FB);
          real r2BA9#1 = RMul(realLit2BA5,r2BA8);
          real r2BAA#2 = TensorIndex<tensor[3,3,3],[0,0,2]>(op1_e3_l_1128FB);
          real r2BAB#2 = RMul(realLit2BA5,r2BAA);
          real r2BAC#2 = TensorIndex<tensor[3,3,3],[1,0,0]>(op1_e3_l_1128FB);
          real r2BAD#2 = RMul(realLit2BA5,r2BAC);
          real r2BAE#1 = TensorIndex<tensor[3,3,3],[1,0,1]>(op1_e3_l_1128FB);
          real r2BAF#3 = RMul(realLit2BA5,r2BAE);
          real realLit2BB0#9 = 0.1e1;
          real r2BB1#2 = TensorIndex<tensor[3,3,3],[1,0,2]>(op1_e3_l_1128FB);
          real r2BB2#1 = RMul(realLit2BB0,r2BB1);
          real r2BB3#2 = TensorIndex<tensor[3,3,3],[2,0,0]>(op1_e3_l_1128FB);
          real r2BB4#2 = RMul(realLit2BA5,r2BB3);
          real realLit2BB5#9 = -0.1e1;
          real r2BB6#2 = TensorIndex<tensor[3,3,3],[2,0,1]>(op1_e3_l_1128FB);
          real r2BB7#1 = RMul(realLit2BB5,r2BB6);
          real r2BB8#1 = TensorIndex<tensor[3,3,3],[2,0,2]>(op1_e3_l_1128FB);
          real r2BB9#3 = RMul(realLit2BA5,r2BB8);
          real r2BBA#2 = RAdd(r2BA7,r2BA9);
          real r2BBB#1 = RAdd(r2BBA,r2BAB);
          real r2BBC#1 = RAdd(r2BBB,r2BAD);
          real r2BBD#1 = RAdd(r2BBC,r2BAF);
          real r2BBE#1 = RAdd(r2BBD,r2BB2);
          real r2BBF#1 = RAdd(r2BBE,r2BB4);
          real r2BC0#1 = RAdd(r2BBF,r2BB7);
          real r2BC1#1 = RAdd(r2BC0,r2BB9);
          real r2BC2#1 = TensorIndex<tensor[3,3,3],[0,1,0]>(op1_e3_l_1128FB);
          real r2BC3#2 = RMul(realLit2BA5,r2BC2);
          real r2BC4#2 = TensorIndex<tensor[3,3,3],[0,1,1]>(op1_e3_l_1128FB);
          real r2BC5#1 = RMul(realLit2BA5,r2BC4);
          real r2BC6#2 = TensorIndex<tensor[3,3,3],[0,1,2]>(op1_e3_l_1128FB);
          real r2BC7#2 = RMul(realLit2BA5,r2BC6);
          real r2BC8#2 = TensorIndex<tensor[3,3,3],[1,1,0]>(op1_e3_l_1128FB);
          real r2BC9#2 = RMul(realLit2BA5,r2BC8);
          real r2BCA#1 = TensorIndex<tensor[3,3,3],[1,1,1]>(op1_e3_l_1128FB);
          real r2BCB#3 = RMul(realLit2BA5,r2BCA);
          real r2BCC#2 = TensorIndex<tensor[3,3,3],[1,1,2]>(op1_e3_l_1128FB);
          real r2BCD#1 = RMul(realLit2BB0,r2BCC);
          real r2BCE#2 = TensorIndex<tensor[3,3,3],[2,1,0]>(op1_e3_l_1128FB);
          real r2BCF#2 = RMul(realLit2BA5,r2BCE);
          real r2BD0#2 = TensorIndex<tensor[3,3,3],[2,1,1]>(op1_e3_l_1128FB);
          real r2BD1#1 = RMul(realLit2BB5,r2BD0);
          real r2BD2#1 = TensorIndex<tensor[3,3,3],[2,1,2]>(op1_e3_l_1128FB);
          real r2BD3#3 = RMul(realLit2BA5,r2BD2);
          real r2BD4#2 = RAdd(r2BC3,r2BC5);
          real r2BD5#1 = RAdd(r2BD4,r2BC7);
          real r2BD6#1 = RAdd(r2BD5,r2BC9);
          real r2BD7#1 = RAdd(r2BD6,r2BCB);
          real r2BD8#1 = RAdd(r2BD7,r2BCD);
          real r2BD9#1 = RAdd(r2BD8,r2BCF);
          real r2BDA#1 = RAdd(r2BD9,r2BD1);
          real r2BDB#1 = RAdd(r2BDA,r2BD3);
          real r2BDC#1 = TensorIndex<tensor[3,3,3],[0,2,0]>(op1_e3_l_1128FB);
          real r2BDD#2 = RMul(realLit2BA5,r2BDC);
          real r2BDE#2 = TensorIndex<tensor[3,3,3],[0,2,1]>(op1_e3_l_1128FB);
          real r2BDF#1 = RMul(realLit2BA5,r2BDE);
          real r2BE0#2 = TensorIndex<tensor[3,3,3],[0,2,2]>(op1_e3_l_1128FB);
          real r2BE1#2 = RMul(realLit2BA5,r2BE0);
          real r2BE2#2 = TensorIndex<tensor[3,3,3],[1,2,0]>(op1_e3_l_1128FB);
          real r2BE3#2 = RMul(realLit2BA5,r2BE2);
          real r2BE4#1 = TensorIndex<tensor[3,3,3],[1,2,1]>(op1_e3_l_1128FB);
          real r2BE5#3 = RMul(realLit2BA5,r2BE4);
          real r2BE6#2 = TensorIndex<tensor[3,3,3],[1,2,2]>(op1_e3_l_1128FB);
          real r2BE7#1 = RMul(realLit2BB0,r2BE6);
          real r2BE8#2 = TensorIndex<tensor[3,3,3],[2,2,0]>(op1_e3_l_1128FB);
          real r2BE9#2 = RMul(realLit2BA5,r2BE8);
          real r2BEA#2 = TensorIndex<tensor[3,3,3],[2,2,1]>(op1_e3_l_1128FB);
          real r2BEB#1 = RMul(realLit2BB5,r2BEA);
          real r2BEC#1 = TensorIndex<tensor[3,3,3],[2,2,2]>(op1_e3_l_1128FB);
          real r2BED#3 = RMul(realLit2BA5,r2BEC);
          real r2BEE#2 = RAdd(r2BDD,r2BDF);
          real r2BEF#1 = RAdd(r2BEE,r2BE1);
          real r2BF0#1 = RAdd(r2BEF,r2BE3);
          real r2BF1#1 = RAdd(r2BF0,r2BE5);
          real r2BF2#1 = RAdd(r2BF1,r2BE7);
          real r2BF3#1 = RAdd(r2BF2,r2BE9);
          real r2BF4#1 = RAdd(r2BF3,r2BEB);
          real r2BF5#1 = RAdd(r2BF4,r2BED);
          tensor[3] tensor2BF6#1 = <tensor[3]>[r2BC1,r2BDB,r2BF5];
          real r2BF7#1 = RMul(realLit2BB5,r2BAA);
          real r2BF8#2 = RMul(realLit2BA5,r2BB1);
          real r2BF9#1 = RMul(realLit2BB0,r2BB3);
          real r2BFA#2 = RMul(realLit2BA5,r2BB6);
          real r2BFB#1 = RAdd(r2BBA,r2BF7);
          real r2BFC#1 = RAdd(r2BFB,r2BAD);
          real r2BFD#1 = RAdd(r2BFC,r2BAF);
          real r2BFE#1 = RAdd(r2BFD,r2BF8);
          real r2BFF#1 = RAdd(r2BFE,r2BF9);
          real r2C00#1 = RAdd(r2BFF,r2BFA);
          real r2C01#1 = RAdd(r2C00,r2BB9);
          real r2C02#1 = RMul(realLit2BB5,r2BC6);
          real r2C03#2 = RMul(realLit2BA5,r2BCC);
          real r2C04#1 = RMul(realLit2BB0,r2BCE);
          real r2C05#2 = RMul(realLit2BA5,r2BD0);
          real r2C06#1 = RAdd(r2BD4,r2C02);
          real r2C07#1 = RAdd(r2C06,r2BC9);
          real r2C08#1 = RAdd(r2C07,r2BCB);
          real r2C09#1 = RAdd(r2C08,r2C03);
          real r2C0A#1 = RAdd(r2C09,r2C04);
          real r2C0B#1 = RAdd(r2C0A,r2C05);
          real r2C0C#1 = RAdd(r2C0B,r2BD3);
          real r2C0D#1 = RMul(realLit2BB5,r2BE0);
          real r2C0E#2 = RMul(realLit2BA5,r2BE6);
          real r2C0F#1 = RMul(realLit2BB0,r2BE8);
          real r2C10#2 = RMul(realLit2BA5,r2BEA);
          real r2C11#1 = RAdd(r2BEE,r2C0D);
          real r2C12#1 = RAdd(r2C11,r2BE3);
          real r2C13#1 = RAdd(r2C12,r2BE5);
          real r2C14#1 = RAdd(r2C13,r2C0E);
          real r2C15#1 = RAdd(r2C14,r2C0F);
          real r2C16#1 = RAdd(r2C15,r2C10);
          real r2C17#1 = RAdd(r2C16,r2BED);
          tensor[3] tensor2C18#1 = <tensor[3]>[r2C01,r2C0C,r2C17];
          real r2C19#1 = RMul(realLit2BB0,r2BA8);
          real r2C1A#1 = RMul(realLit2BB5,r2BAC);
          real r2C1B#1 = RAdd(r2BA7,r2C19);
          real r2C1C#1 = RAdd(r2C1B,r2BAB);
          real r2C1D#1 = RAdd(r2C1C,r2C1A);
          real r2C1E#1 = RAdd(r2C1D,r2BAF);
          real r2C1F#1 = RAdd(r2C1E,r2BF8);
          real r2C20#1 = RAdd(r2C1F,r2BB4);
          real r2C21#1 = RAdd(r2C20,r2BFA);
          real r2C22#1 = RAdd(r2C21,r2BB9);
          real r2C23#1 = RMul(realLit2BB0,r2BC4);
          real r2C24#1 = RMul(realLit2BB5,r2BC8);
          real r2C25#1 = RAdd(r2BC3,r2C23);
          real r2C26#1 = RAdd(r2C25,r2BC7);
          real r2C27#1 = RAdd(r2C26,r2C24);
          real r2C28#1 = RAdd(r2C27,r2BCB);
          real r2C29#1 = RAdd(r2C28,r2C03);
          real r2C2A#1 = RAdd(r2C29,r2BCF);
          real r2C2B#1 = RAdd(r2C2A,r2C05);
          real r2C2C#1 = RAdd(r2C2B,r2BD3);
          real r2C2D#1 = RMul(realLit2BB0,r2BDE);
          real r2C2E#1 = RMul(realLit2BB5,r2BE2);
          real r2C2F#1 = RAdd(r2BDD,r2C2D);
          real r2C30#1 = RAdd(r2C2F,r2BE1);
          real r2C31#1 = RAdd(r2C30,r2C2E);
          real r2C32#1 = RAdd(r2C31,r2BE5);
          real r2C33#1 = RAdd(r2C32,r2C0E);
          real r2C34#1 = RAdd(r2C33,r2BE9);
          real r2C35#1 = RAdd(r2C34,r2C10);
          real r2C36#1 = RAdd(r2C35,r2BED);
          tensor[3] tensor2C37#1 = <tensor[3]>[r2C22,r2C2C,r2C36];
          tensor[3,3] op1_e3_l_182BA4#9 = <tensor[3,3]>[tensor2BF6,tensor2C18,tensor2C37];
          real realLit2CCE#1 = 0.2e1;
          real op1_e3_l_192CCD#9 = RMul(realLit2CCE,op1_e3_l_172BA1);
          real r2CD3#1 = TensorIndex<tensor[3,3],[0,0]>(op1_e3_l_182BA4);
          real r2CD4#1 = RDiv(r2CD3,op1_e3_l_192CCD);
          real r2CD5#1 = TensorIndex<tensor[3,3],[0,1]>(op1_e3_l_182BA4);
          real r2CD6#1 = RDiv(r2CD5,op1_e3_l_192CCD);
          real r2CD7#1 = TensorIndex<tensor[3,3],[0,2]>(op1_e3_l_182BA4);
          real r2CD8#1 = RDiv(r2CD7,op1_e3_l_192CCD);
          tensor[3] tensor2CD9#1 = <tensor[3]>[r2CD4,r2CD6,r2CD8];
          real r2CDA#1 = TensorIndex<tensor[3,3],[1,0]>(op1_e3_l_182BA4);
          real r2CDB#1 = RDiv(r2CDA,op1_e3_l_192CCD);
          real r2CDC#1 = TensorIndex<tensor[3,3],[1,1]>(op1_e3_l_182BA4);
          real r2CDD#1 = RDiv(r2CDC,op1_e3_l_192CCD);
          real r2CDE#1 = TensorIndex<tensor[3,3],[1,2]>(op1_e3_l_182BA4);
          real r2CDF#1 = RDiv(r2CDE,op1_e3_l_192CCD);
          tensor[3] tensor2CE0#1 = <tensor[3]>[r2CDB,r2CDD,r2CDF];
          real r2CE1#1 = TensorIndex<tensor[3,3],[2,0]>(op1_e3_l_182BA4);
          real r2CE2#1 = RDiv(r2CE1,op1_e3_l_192CCD);
          real r2CE3#1 = TensorIndex<tensor[3,3],[2,1]>(op1_e3_l_182BA4);
          real r2CE4#1 = RDiv(r2CE3,op1_e3_l_192CCD);
          real r2CE5#1 = TensorIndex<tensor[3,3],[2,2]>(op1_e3_l_182BA4);
          real r2CE6#1 = RDiv(r2CE5,op1_e3_l_192CCD);
          tensor[3] tensor2CE7#1 = <tensor[3]>[r2CE2,r2CE4,r2CE6];
          tensor[3,3] op1_e3_l_202CD2#9 = <tensor[3,3]>[tensor2CD9,tensor2CE0,tensor2CE7];
          real r2D00#3 = TensorIndex<tensor[3],[0]>(compositionl26F6);
          real r2D01#1 = TensorIndex<tensor[3,3],[0,0]>(op1_e3_l_202CD2);
          real r2D02#1 = RMul(r2D00,r2D01);
          real r2D03#3 = TensorIndex<tensor[3],[1]>(compositionl26F6);
          real r2D04#1 = TensorIndex<tensor[3,3],[1,0]>(op1_e3_l_202CD2);
          real r2D05#1 = RMul(r2D03,r2D04);
          real r2D06#3 = TensorIndex<tensor[3],[2]>(compositionl26F6);
          real r2D07#1 = TensorIndex<tensor[3,3],[2,0]>(op1_e3_l_202CD2);
          real r2D08#1 = RMul(r2D06,r2D07);
          real r2D09#1 = RAdd(r2D02,r2D05);
          real r2D0A#1 = RAdd(r2D09,r2D08);
          real r2D0B#1 = TensorIndex<tensor[3,3],[0,1]>(op1_e3_l_202CD2);
          real r2D0C#1 = RMul(r2D00,r2D0B);
          real r2D0D#1 = TensorIndex<tensor[3,3],[1,1]>(op1_e3_l_202CD2);
          real r2D0E#1 = RMul(r2D03,r2D0D);
          real r2D0F#1 = TensorIndex<tensor[3,3],[2,1]>(op1_e3_l_202CD2);
          real r2D10#1 = RMul(r2D06,r2D0F);
          real r2D11#1 = RAdd(r2D0C,r2D0E);
          real r2D12#1 = RAdd(r2D11,r2D10);
          real r2D13#1 = TensorIndex<tensor[3,3],[0,2]>(op1_e3_l_202CD2);
          real r2D14#1 = RMul(r2D00,r2D13);
          real r2D15#1 = TensorIndex<tensor[3,3],[1,2]>(op1_e3_l_202CD2);
          real r2D16#1 = RMul(r2D03,r2D15);
          real r2D17#1 = TensorIndex<tensor[3,3],[2,2]>(op1_e3_l_202CD2);
          real r2D18#1 = RMul(r2D06,r2D17);
          real r2D19#1 = RAdd(r2D14,r2D16);
          real r2D1A#1 = RAdd(r2D19,r2D18);
          tensor[3] gradResult2CFF#1 = <tensor[3]>[r2D0A,r2D12,r2D1A];
          goto JOIN2D3C
        JOIN2D3C:  preds = [ASSIGN2D37,MASSIGN2D45]
          tensor[3] gradResult2D38#1 = phi(gradResult2CFF,gradResult1326)
          real result2D39#1 = phi(result210E,result1324)
          femData:MeshCell c2D3A#1 = phi(c1A81,c1322)
          tensor[3] translated2D3B#1 = phi(translated1A83,translated1320)
          self.translated = translated2D3B;
          self.valid = valid1A7A;
          self.c = c2D3A;
          self.result = result2D39;
          self.gradResult = gradResult2D38;
          stabilize
        ASSIGN2D44:  preds = [COND1A7C]
          string _t2D43#1 = "Warning: Invalid!\n";
          Print<[string]>(_t2D43);
          goto JOIN2D3C
    end update
  end gg
## initial strand creation
  COLLECTION
    ENTRY2D47:  preds = []
      tensor[3][] points2D48#1 = globals.points12C6;
    FOREACH2D4B:  preds = [ASSIGN2D49,NEXT2D4D]
      foreach (i2D4A in points2D48) on exit goto RETURN2D4E
      new gg(i2D4A);
      goto FOREACH2D4B
    RETURN2D4E:  preds = [FOREACH2D4B]
      return
#### end program ####
##### low-ir: after contraction(1) ####
## properties
  GlobalInit HasInputs HasGlobals ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
## globals
  input points12C6 (points) = <no-default>
  input cube12C7 (cube) = <no-default>
  input 0space0342_intermedateGlobal12C8 (space) = <no-default>
  input 0data0344_intermedateGlobal12C9 (data) = <no-default>
  global femData:MeshCell[] 0cell_cube12CA
  global femData:Mesh _t12CB
  global femData:Space _tX12CC
  global femData:FemFunc data12CD
## functions
  function femData:MeshPos findPos132E (femData:Mesh mesh132F#19, tensor[3] pos1330#4) {
    ENTRY1331:  preds = []
      real _t1332#3 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
      tensor[3] xn1334#1 = <tensor[3]>[_t1332,_t1332,_t1332];
      int newtonInt1336#1 = 0;
      int[] yayCells1338#1 = ExtractFemItem2<tensor[3],int[],NearbyCell(File=spat.in)(Mesh)>(mesh132F,pos1330);
    FOREACH133B:  preds = [ASSIGN1339,NEXT1A70]
      foreach (cellItter133A in yayCells1338) on exit goto ASSIGN1A72
        tensor[3] xn1A6F#1 = phi(xn1334,xn1910)
      int _t133C#1 = 16;
      int[] _t133E#1 = Range(newtonInt1336,_t133C);
    FOREACH1341:  preds = [ASSIGN133F,NEXT1A6E]
      foreach (newtonItter1340 in _t133E) on exit goto NEXT1A70
        tensor[3] xn1910#5 = phi(xn1A6F,xn19D4)
      int ilit1343#1 = 4;
      int mulRes1344#4 = IMul(cellItter133A,ilit1343);
      int addRes1346#1 = mulRes1344;
      int idx1347#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(mesh132F,addRes1346);
      int ilit1348#1 = 1;
      int addRes1349#1 = IAdd(mulRes1344,ilit1348);
      int idx134A#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(mesh132F,addRes1349);
      int ilit134B#1 = 2;
      int addRes134C#1 = IAdd(mulRes1344,ilit134B);
      int idx134D#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(mesh132F,addRes134C);
      int ilit134E#1 = 3;
      int addRes134F#1 = IAdd(mulRes1344,ilit134E);
      int idx1350#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(mesh132F,addRes134F);
      int ilit1364#4 = 3;
      int idx1365#1 = idx1347;
      int mulRes1366#3 = IMul(ilit1364,idx1365);
      int addRes1367#1 = mulRes1366;
      int ilit1368#4 = 1;
      int addRes1369#1 = IAdd(ilit1368,mulRes1366);
      int ilit136A#4 = 2;
      int addRes136B#1 = IAdd(ilit136A,mulRes1366);
      real dof_load136C#6 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh132F,addRes1367);
      real dof_load136D#6 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh132F,addRes1369);
      real dof_load136E#6 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh132F,addRes136B);
      int idx1370#1 = idx134A;
      int mulRes1371#3 = IMul(ilit1364,idx1370);
      int addRes1372#1 = mulRes1371;
      int addRes1373#1 = IAdd(ilit1368,mulRes1371);
      int addRes1374#1 = IAdd(ilit136A,mulRes1371);
      real dof_load1375#6 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh132F,addRes1372);
      real dof_load1376#6 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh132F,addRes1373);
      real dof_load1377#6 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh132F,addRes1374);
      int idx1379#1 = idx134D;
      int mulRes137A#3 = IMul(ilit1364,idx1379);
      int addRes137B#1 = mulRes137A;
      int addRes137C#1 = IAdd(ilit1368,mulRes137A);
      int addRes137D#1 = IAdd(ilit136A,mulRes137A);
      real dof_load137E#6 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh132F,addRes137B);
      real dof_load137F#6 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh132F,addRes137C);
      real dof_load1380#6 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh132F,addRes137D);
      int idx1382#1 = idx1350;
      int mulRes1383#3 = IMul(ilit1364,idx1382);
      int addRes1384#1 = mulRes1383;
      int addRes1385#1 = IAdd(ilit1368,mulRes1383);
      int addRes1386#1 = IAdd(ilit136A,mulRes1383);
      real dof_load1387#6 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh132F,addRes1384);
      real dof_load1388#6 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh132F,addRes1385);
      real dof_load1389#6 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh132F,addRes1386);
      real coeff13BA#1 = -0.1e1;
      real one13BB#4 = 0.1e1;
      real prod13BC#1 = RMul(one13BB,one13BB);
      real prod13BD#2 = RMul(one13BB,prod13BC);
      real basisEval13BE#6 = RMul(coeff13BA,prod13BD);
      real basisEval13BF#6 = RMul(one13BB,prod13BD);
      real basisEval13C0#12 = 0.e0;
      real r13D5#3 = dof_load136C;
      real r13D6#3 = basisEval13BE;
      real r13D7#1 = RMul(r13D5,r13D6);
      real r13D8#3 = dof_load1375;
      real r13D9#3 = basisEval13BF;
      real r13DA#1 = RMul(r13D8,r13D9);
      real r13DB#3 = dof_load137E;
      real r13DC#3 = basisEval13C0;
      real r13DD#1 = RMul(r13DB,r13DC);
      real r13DE#3 = dof_load1387;
      real r13DF#3 = basisEval13C0;
      real r13E0#1 = RMul(r13DE,r13DF);
      real r13E1#1 = RAdd(r13D7,r13DA);
      real r13E2#1 = RAdd(r13E1,r13DD);
      real r13E3#2 = RAdd(r13E2,r13E0);
      real r13E4#3 = basisEval13BE;
      real r13E5#1 = RMul(r13D5,r13E4);
      real r13E6#3 = basisEval13C0;
      real r13E7#1 = RMul(r13D8,r13E6);
      real r13E8#3 = basisEval13BF;
      real r13E9#1 = RMul(r13DB,r13E8);
      real r13EA#3 = basisEval13C0;
      real r13EB#1 = RMul(r13DE,r13EA);
      real r13EC#1 = RAdd(r13E5,r13E7);
      real r13ED#1 = RAdd(r13EC,r13E9);
      real r13EE#2 = RAdd(r13ED,r13EB);
      real r13EF#3 = basisEval13BE;
      real r13F0#1 = RMul(r13D5,r13EF);
      real r13F1#3 = basisEval13C0;
      real r13F2#1 = RMul(r13D8,r13F1);
      real r13F3#3 = basisEval13C0;
      real r13F4#1 = RMul(r13DB,r13F3);
      real r13F5#3 = basisEval13BF;
      real r13F6#1 = RMul(r13DE,r13F5);
      real r13F7#1 = RAdd(r13F0,r13F2);
      real r13F8#1 = RAdd(r13F7,r13F4);
      real r13F9#2 = RAdd(r13F8,r13F6);
      real r13FB#3 = dof_load136D;
      real r13FC#1 = RMul(r13FB,r13D6);
      real r13FD#3 = dof_load1376;
      real r13FE#1 = RMul(r13FD,r13D9);
      real r13FF#3 = dof_load137F;
      real r1400#1 = RMul(r13FF,r13DC);
      real r1401#3 = dof_load1388;
      real r1402#1 = RMul(r1401,r13DF);
      real r1403#1 = RAdd(r13FC,r13FE);
      real r1404#1 = RAdd(r1403,r1400);
      real r1405#2 = RAdd(r1404,r1402);
      real r1406#1 = RMul(r13FB,r13E4);
      real r1407#1 = RMul(r13FD,r13E6);
      real r1408#1 = RMul(r13FF,r13E8);
      real r1409#1 = RMul(r1401,r13EA);
      real r140A#1 = RAdd(r1406,r1407);
      real r140B#1 = RAdd(r140A,r1408);
      real r140C#2 = RAdd(r140B,r1409);
      real r140D#1 = RMul(r13FB,r13EF);
      real r140E#1 = RMul(r13FD,r13F1);
      real r140F#1 = RMul(r13FF,r13F3);
      real r1410#1 = RMul(r1401,r13F5);
      real r1411#1 = RAdd(r140D,r140E);
      real r1412#1 = RAdd(r1411,r140F);
      real r1413#2 = RAdd(r1412,r1410);
      real r1415#3 = dof_load136E;
      real r1416#1 = RMul(r1415,r13D6);
      real r1417#3 = dof_load1377;
      real r1418#1 = RMul(r1417,r13D9);
      real r1419#3 = dof_load1380;
      real r141A#1 = RMul(r1419,r13DC);
      real r141B#3 = dof_load1389;
      real r141C#1 = RMul(r141B,r13DF);
      real r141D#1 = RAdd(r1416,r1418);
      real r141E#1 = RAdd(r141D,r141A);
      real r141F#2 = RAdd(r141E,r141C);
      real r1420#1 = RMul(r1415,r13E4);
      real r1421#1 = RMul(r1417,r13E6);
      real r1422#1 = RMul(r1419,r13E8);
      real r1423#1 = RMul(r141B,r13EA);
      real r1424#1 = RAdd(r1420,r1421);
      real r1425#1 = RAdd(r1424,r1422);
      real r1426#2 = RAdd(r1425,r1423);
      real r1427#1 = RMul(r1415,r13EF);
      real r1428#1 = RMul(r1417,r13F1);
      real r1429#1 = RMul(r1419,r13F3);
      real r142A#1 = RMul(r141B,r13F5);
      real r142B#1 = RAdd(r1427,r1428);
      real r142C#1 = RAdd(r142B,r1429);
      real r142D#2 = RAdd(r142C,r142A);
      real realLit148C#9 = 0.e0;
      real r148D#3 = r13E3;
      real r148E#3 = RMul(realLit148C,r148D);
      real r148F#3 = r1405;
      real r1490#3 = RMul(realLit148C,r148F);
      real r1491#3 = r141F;
      real r1492#5 = RMul(realLit148C,r1491);
      real r1493#3 = RAdd(r148E,r1490);
      real r1494#3 = RAdd(r1493,r1492);
      real r1495#3 = r13EE;
      real r1496#3 = RMul(realLit148C,r1495);
      real r1497#3 = r140C;
      real r1498#3 = RMul(realLit148C,r1497);
      real r1499#3 = r1426;
      real r149A#5 = RMul(realLit148C,r1499);
      real r149B#3 = RAdd(r1496,r1498);
      real r149C#3 = RAdd(r149B,r149A);
      real r149D#3 = r13F9;
      real r149E#3 = RMul(realLit148C,r149D);
      real r149F#3 = r1413;
      real r14A0#3 = RMul(realLit148C,r149F);
      real r14A1#3 = r142D;
      real r14A2#5 = RMul(realLit148C,r14A1);
      real r14A3#3 = RAdd(r149E,r14A0);
      real r14A4#3 = RAdd(r14A3,r14A2);
      real realLit14A6#9 = -0.1e1;
      real r14A7#1 = RMul(realLit14A6,r1491);
      real r14A8#1 = RAdd(r1493,r14A7);
      real r14A9#1 = RMul(realLit14A6,r1499);
      real r14AA#1 = RAdd(r149B,r14A9);
      real r14AB#1 = RMul(realLit14A6,r14A1);
      real r14AC#1 = RAdd(r14A3,r14AB);
      real realLit14AE#9 = 0.1e1;
      real r14AF#1 = RMul(realLit14AE,r148F);
      real r14B0#1 = RAdd(r148E,r14AF);
      real r14B1#1 = RAdd(r14B0,r1492);
      real r14B2#1 = RMul(realLit14AE,r1497);
      real r14B3#1 = RAdd(r1496,r14B2);
      real r14B4#1 = RAdd(r14B3,r149A);
      real r14B5#1 = RMul(realLit14AE,r149F);
      real r14B6#1 = RAdd(r149E,r14B5);
      real r14B7#1 = RAdd(r14B6,r14A2);
      real r14BA#1 = RMul(realLit14AE,r1491);
      real r14BB#1 = RAdd(r1493,r14BA);
      real r14BC#1 = RMul(realLit14AE,r1499);
      real r14BD#1 = RAdd(r149B,r14BC);
      real r14BE#1 = RMul(realLit14AE,r14A1);
      real r14BF#1 = RAdd(r14A3,r14BE);
      real r14C1#1 = RMul(realLit14A6,r148D);
      real r14C2#1 = RAdd(r14C1,r1490);
      real r14C3#1 = RAdd(r14C2,r1492);
      real r14C4#1 = RMul(realLit14A6,r1495);
      real r14C5#1 = RAdd(r14C4,r1498);
      real r14C6#1 = RAdd(r14C5,r149A);
      real r14C7#1 = RMul(realLit14A6,r149D);
      real r14C8#1 = RAdd(r14C7,r14A0);
      real r14C9#1 = RAdd(r14C8,r14A2);
      real r14CC#1 = RMul(realLit14A6,r148F);
      real r14CD#1 = RAdd(r148E,r14CC);
      real r14CE#1 = RAdd(r14CD,r1492);
      real r14CF#1 = RMul(realLit14A6,r1497);
      real r14D0#1 = RAdd(r1496,r14CF);
      real r14D1#1 = RAdd(r14D0,r149A);
      real r14D2#1 = RMul(realLit14A6,r149F);
      real r14D3#1 = RAdd(r149E,r14D2);
      real r14D4#1 = RAdd(r14D3,r14A2);
      real r14D6#1 = RMul(realLit14AE,r148D);
      real r14D7#1 = RAdd(r14D6,r1490);
      real r14D8#1 = RAdd(r14D7,r1492);
      real r14D9#1 = RMul(realLit14AE,r1495);
      real r14DA#1 = RAdd(r14D9,r1498);
      real r14DB#1 = RAdd(r14DA,r149A);
      real r14DC#1 = RMul(realLit14AE,r149D);
      real r14DD#1 = RAdd(r14DC,r14A0);
      real r14DE#1 = RAdd(r14DD,r14A2);
      real r1539#9 = r13E3;
      real r153A#3 = r1494;
      real r153B#1 = RMul(r1539,r153A);
      real r153C#9 = r1405;
      real r153D#3 = r14BB;
      real r153E#1 = RMul(r153C,r153D);
      real r153F#9 = r141F;
      real r1540#3 = r14CE;
      real r1541#1 = RMul(r153F,r1540);
      real r1542#1 = RAdd(r153B,r153E);
      real r1543#1 = RAdd(r1542,r1541);
      real r1544#3 = r149C;
      real r1545#1 = RMul(r1539,r1544);
      real r1546#3 = r14BD;
      real r1547#1 = RMul(r153C,r1546);
      real r1548#3 = r14D1;
      real r1549#1 = RMul(r153F,r1548);
      real r154A#1 = RAdd(r1545,r1547);
      real r154B#1 = RAdd(r154A,r1549);
      real r154C#3 = r14A4;
      real r154D#1 = RMul(r1539,r154C);
      real r154E#3 = r14BF;
      real r154F#1 = RMul(r153C,r154E);
      real r1550#3 = r14D4;
      real r1551#1 = RMul(r153F,r1550);
      real r1552#1 = RAdd(r154D,r154F);
      real r1553#1 = RAdd(r1552,r1551);
      real r1555#3 = r14A8;
      real r1556#1 = RMul(r1539,r1555);
      real r1557#3 = r1494;
      real r1558#1 = RMul(r153C,r1557);
      real r1559#3 = r14D8;
      real r155A#1 = RMul(r153F,r1559);
      real r155B#1 = RAdd(r1556,r1558);
      real r155C#1 = RAdd(r155B,r155A);
      real r155D#3 = r14AA;
      real r155E#1 = RMul(r1539,r155D);
      real r155F#3 = r149C;
      real r1560#1 = RMul(r153C,r155F);
      real r1561#3 = r14DB;
      real r1562#1 = RMul(r153F,r1561);
      real r1563#1 = RAdd(r155E,r1560);
      real r1564#1 = RAdd(r1563,r1562);
      real r1565#3 = r14AC;
      real r1566#1 = RMul(r1539,r1565);
      real r1567#3 = r14A4;
      real r1568#1 = RMul(r153C,r1567);
      real r1569#3 = r14DE;
      real r156A#1 = RMul(r153F,r1569);
      real r156B#1 = RAdd(r1566,r1568);
      real r156C#1 = RAdd(r156B,r156A);
      real r156E#3 = r14B1;
      real r156F#1 = RMul(r1539,r156E);
      real r1570#3 = r14C3;
      real r1571#1 = RMul(r153C,r1570);
      real r1572#3 = r1494;
      real r1573#1 = RMul(r153F,r1572);
      real r1574#1 = RAdd(r156F,r1571);
      real r1575#1 = RAdd(r1574,r1573);
      real r1576#3 = r14B4;
      real r1577#1 = RMul(r1539,r1576);
      real r1578#3 = r14C6;
      real r1579#1 = RMul(r153C,r1578);
      real r157A#3 = r149C;
      real r157B#1 = RMul(r153F,r157A);
      real r157C#1 = RAdd(r1577,r1579);
      real r157D#1 = RAdd(r157C,r157B);
      real r157E#3 = r14B7;
      real r157F#1 = RMul(r1539,r157E);
      real r1580#3 = r14C9;
      real r1581#1 = RMul(r153C,r1580);
      real r1582#3 = r14A4;
      real r1583#1 = RMul(r153F,r1582);
      real r1584#1 = RAdd(r157F,r1581);
      real r1585#1 = RAdd(r1584,r1583);
      real r1588#9 = r13EE;
      real r1589#1 = RMul(r1588,r153A);
      real r158A#9 = r140C;
      real r158B#1 = RMul(r158A,r153D);
      real r158C#9 = r1426;
      real r158D#1 = RMul(r158C,r1540);
      real r158E#1 = RAdd(r1589,r158B);
      real r158F#1 = RAdd(r158E,r158D);
      real r1590#1 = RMul(r1588,r1544);
      real r1591#1 = RMul(r158A,r1546);
      real r1592#1 = RMul(r158C,r1548);
      real r1593#1 = RAdd(r1590,r1591);
      real r1594#1 = RAdd(r1593,r1592);
      real r1595#1 = RMul(r1588,r154C);
      real r1596#1 = RMul(r158A,r154E);
      real r1597#1 = RMul(r158C,r1550);
      real r1598#1 = RAdd(r1595,r1596);
      real r1599#1 = RAdd(r1598,r1597);
      real r159B#1 = RMul(r1588,r1555);
      real r159C#1 = RMul(r158A,r1557);
      real r159D#1 = RMul(r158C,r1559);
      real r159E#1 = RAdd(r159B,r159C);
      real r159F#1 = RAdd(r159E,r159D);
      real r15A0#1 = RMul(r1588,r155D);
      real r15A1#1 = RMul(r158A,r155F);
      real r15A2#1 = RMul(r158C,r1561);
      real r15A3#1 = RAdd(r15A0,r15A1);
      real r15A4#1 = RAdd(r15A3,r15A2);
      real r15A5#1 = RMul(r1588,r1565);
      real r15A6#1 = RMul(r158A,r1567);
      real r15A7#1 = RMul(r158C,r1569);
      real r15A8#1 = RAdd(r15A5,r15A6);
      real r15A9#1 = RAdd(r15A8,r15A7);
      real r15AB#1 = RMul(r1588,r156E);
      real r15AC#1 = RMul(r158A,r1570);
      real r15AD#1 = RMul(r158C,r1572);
      real r15AE#1 = RAdd(r15AB,r15AC);
      real r15AF#1 = RAdd(r15AE,r15AD);
      real r15B0#1 = RMul(r1588,r1576);
      real r15B1#1 = RMul(r158A,r1578);
      real r15B2#1 = RMul(r158C,r157A);
      real r15B3#1 = RAdd(r15B0,r15B1);
      real r15B4#1 = RAdd(r15B3,r15B2);
      real r15B5#1 = RMul(r1588,r157E);
      real r15B6#1 = RMul(r158A,r1580);
      real r15B7#1 = RMul(r158C,r1582);
      real r15B8#1 = RAdd(r15B5,r15B6);
      real r15B9#1 = RAdd(r15B8,r15B7);
      real r15BC#9 = r13F9;
      real r15BD#1 = RMul(r15BC,r153A);
      real r15BE#9 = r1413;
      real r15BF#1 = RMul(r15BE,r153D);
      real r15C0#9 = r142D;
      real r15C1#1 = RMul(r15C0,r1540);
      real r15C2#1 = RAdd(r15BD,r15BF);
      real r15C3#1 = RAdd(r15C2,r15C1);
      real r15C4#1 = RMul(r15BC,r1544);
      real r15C5#1 = RMul(r15BE,r1546);
      real r15C6#1 = RMul(r15C0,r1548);
      real r15C7#1 = RAdd(r15C4,r15C5);
      real r15C8#1 = RAdd(r15C7,r15C6);
      real r15C9#1 = RMul(r15BC,r154C);
      real r15CA#1 = RMul(r15BE,r154E);
      real r15CB#1 = RMul(r15C0,r1550);
      real r15CC#1 = RAdd(r15C9,r15CA);
      real r15CD#1 = RAdd(r15CC,r15CB);
      real r15CF#1 = RMul(r15BC,r1555);
      real r15D0#1 = RMul(r15BE,r1557);
      real r15D1#1 = RMul(r15C0,r1559);
      real r15D2#1 = RAdd(r15CF,r15D0);
      real r15D3#1 = RAdd(r15D2,r15D1);
      real r15D4#1 = RMul(r15BC,r155D);
      real r15D5#1 = RMul(r15BE,r155F);
      real r15D6#1 = RMul(r15C0,r1561);
      real r15D7#1 = RAdd(r15D4,r15D5);
      real r15D8#1 = RAdd(r15D7,r15D6);
      real r15D9#1 = RMul(r15BC,r1565);
      real r15DA#1 = RMul(r15BE,r1567);
      real r15DB#1 = RMul(r15C0,r1569);
      real r15DC#1 = RAdd(r15D9,r15DA);
      real r15DD#1 = RAdd(r15DC,r15DB);
      real r15DF#1 = RMul(r15BC,r156E);
      real r15E0#1 = RMul(r15BE,r1570);
      real r15E1#1 = RMul(r15C0,r1572);
      real r15E2#1 = RAdd(r15DF,r15E0);
      real r15E3#1 = RAdd(r15E2,r15E1);
      real r15E4#1 = RMul(r15BC,r1576);
      real r15E5#1 = RMul(r15BE,r1578);
      real r15E6#1 = RMul(r15C0,r157A);
      real r15E7#1 = RAdd(r15E4,r15E5);
      real r15E8#1 = RAdd(r15E7,r15E6);
      real r15E9#1 = RMul(r15BC,r157E);
      real r15EA#1 = RMul(r15BE,r1580);
      real r15EB#1 = RMul(r15C0,r1582);
      real r15EC#1 = RAdd(r15E9,r15EA);
      real r15ED#1 = RAdd(r15EC,r15EB);
      real r16AA#1 = dof_load136C;
      real r16AB#3 = basisEval13BE;
      real r16AC#1 = RMul(r16AA,r16AB);
      real r16AD#1 = dof_load1375;
      real r16AE#3 = basisEval13BF;
      real r16AF#1 = RMul(r16AD,r16AE);
      real r16B0#1 = dof_load137E;
      real r16B1#3 = basisEval13C0;
      real r16B2#1 = RMul(r16B0,r16B1);
      real r16B3#1 = dof_load1387;
      real r16B4#3 = basisEval13C0;
      real r16B5#1 = RMul(r16B3,r16B4);
      real r16B6#1 = RAdd(r16AC,r16AF);
      real r16B7#1 = RAdd(r16B6,r16B2);
      real r16B8#1 = RAdd(r16B7,r16B5);
      real r16B9#1 = dof_load136D;
      real r16BA#1 = RMul(r16B9,r16AB);
      real r16BB#1 = dof_load1376;
      real r16BC#1 = RMul(r16BB,r16AE);
      real r16BD#1 = dof_load137F;
      real r16BE#1 = RMul(r16BD,r16B1);
      real r16BF#1 = dof_load1388;
      real r16C0#1 = RMul(r16BF,r16B4);
      real r16C1#1 = RAdd(r16BA,r16BC);
      real r16C2#1 = RAdd(r16C1,r16BE);
      real r16C3#1 = RAdd(r16C2,r16C0);
      real r16C4#1 = dof_load136E;
      real r16C5#1 = RMul(r16C4,r16AB);
      real r16C6#1 = dof_load1377;
      real r16C7#1 = RMul(r16C6,r16AE);
      real r16C8#1 = dof_load1380;
      real r16C9#1 = RMul(r16C8,r16B1);
      real r16CA#1 = dof_load1389;
      real r16CB#1 = RMul(r16CA,r16B4);
      real r16CC#1 = RAdd(r16C5,r16C7);
      real r16CD#1 = RAdd(r16CC,r16C9);
      real r16CE#1 = RAdd(r16CD,r16CB);
      tensor[3] probe_l_1416A9#1 = <tensor[3]>[r16B8,r16C3,r16CE];
      real r16F7#1 = dof_load136C;
      real r16F8#3 = basisEval13BE;
      real r16F9#1 = RMul(r16F7,r16F8);
      real r16FA#1 = dof_load1375;
      real r16FB#3 = basisEval13C0;
      real r16FC#1 = RMul(r16FA,r16FB);
      real r16FD#1 = dof_load137E;
      real r16FE#3 = basisEval13BF;
      real r16FF#1 = RMul(r16FD,r16FE);
      real r1700#1 = dof_load1387;
      real r1701#3 = basisEval13C0;
      real r1702#1 = RMul(r1700,r1701);
      real r1703#1 = RAdd(r16F9,r16FC);
      real r1704#1 = RAdd(r1703,r16FF);
      real r1705#1 = RAdd(r1704,r1702);
      real r1706#1 = dof_load136D;
      real r1707#1 = RMul(r1706,r16F8);
      real r1708#1 = dof_load1376;
      real r1709#1 = RMul(r1708,r16FB);
      real r170A#1 = dof_load137F;
      real r170B#1 = RMul(r170A,r16FE);
      real r170C#1 = dof_load1388;
      real r170D#1 = RMul(r170C,r1701);
      real r170E#1 = RAdd(r1707,r1709);
      real r170F#1 = RAdd(r170E,r170B);
      real r1710#1 = RAdd(r170F,r170D);
      real r1711#1 = dof_load136E;
      real r1712#1 = RMul(r1711,r16F8);
      real r1713#1 = dof_load1377;
      real r1714#1 = RMul(r1713,r16FB);
      real r1715#1 = dof_load1380;
      real r1716#1 = RMul(r1715,r16FE);
      real r1717#1 = dof_load1389;
      real r1718#1 = RMul(r1717,r1701);
      real r1719#1 = RAdd(r1712,r1714);
      real r171A#1 = RAdd(r1719,r1716);
      real r171B#1 = RAdd(r171A,r1718);
      tensor[3] probe_l_1516F6#3 = <tensor[3]>[r1705,r1710,r171B];
      real r1744#1 = dof_load136C;
      real r1745#3 = basisEval13BE;
      real r1746#1 = RMul(r1744,r1745);
      real r1747#1 = dof_load1375;
      real r1748#3 = basisEval13C0;
      real r1749#1 = RMul(r1747,r1748);
      real r174A#1 = dof_load137E;
      real r174B#3 = basisEval13C0;
      real r174C#1 = RMul(r174A,r174B);
      real r174D#1 = dof_load1387;
      real r174E#3 = basisEval13BF;
      real r174F#1 = RMul(r174D,r174E);
      real r1750#1 = RAdd(r1746,r1749);
      real r1751#1 = RAdd(r1750,r174C);
      real r1752#1 = RAdd(r1751,r174F);
      real r1753#1 = dof_load136D;
      real r1754#1 = RMul(r1753,r1745);
      real r1755#1 = dof_load1376;
      real r1756#1 = RMul(r1755,r1748);
      real r1757#1 = dof_load137F;
      real r1758#1 = RMul(r1757,r174B);
      real r1759#1 = dof_load1388;
      real r175A#1 = RMul(r1759,r174E);
      real r175B#1 = RAdd(r1754,r1756);
      real r175C#1 = RAdd(r175B,r1758);
      real r175D#1 = RAdd(r175C,r175A);
      real r175E#1 = dof_load136E;
      real r175F#1 = RMul(r175E,r1745);
      real r1760#1 = dof_load1377;
      real r1761#1 = RMul(r1760,r1748);
      real r1762#1 = dof_load1380;
      real r1763#1 = RMul(r1762,r174B);
      real r1764#1 = dof_load1389;
      real r1765#1 = RMul(r1764,r174E);
      real r1766#1 = RAdd(r175F,r1761);
      real r1767#1 = RAdd(r1766,r1763);
      real r1768#1 = RAdd(r1767,r1765);
      real realLit1791#3 = 0.e0;
      real r1792#3 = r1752;
      real r1793#3 = RMul(realLit1791,r1792);
      real r1794#3 = r175D;
      real r1795#3 = RMul(realLit1791,r1794);
      real r1796#3 = r1768;
      real r1797#5 = RMul(realLit1791,r1796);
      real r1798#3 = RAdd(r1793,r1795);
      real r1799#3 = RAdd(r1798,r1797);
      real realLit179A#3 = 0.1e1;
      real r179B#1 = RMul(realLit179A,r1796);
      real r179C#1 = RAdd(r1798,r179B);
      real realLit179D#3 = -0.1e1;
      real r179E#1 = RMul(realLit179D,r1794);
      real r179F#1 = RAdd(r1793,r179E);
      real r17A0#1 = RAdd(r179F,r1797);
      tensor[3] tensor17A1#1 = <tensor[3]>[r1799,r179C,r17A0];
      real r17A2#1 = RMul(realLit179D,r1796);
      real r17A3#1 = RAdd(r1798,r17A2);
      real r17A4#1 = RMul(realLit179A,r1792);
      real r17A5#1 = RAdd(r17A4,r1795);
      real r17A6#1 = RAdd(r17A5,r1797);
      tensor[3] tensor17A7#1 = <tensor[3]>[r17A3,r1799,r17A6];
      real r17A8#1 = RMul(realLit179A,r1794);
      real r17A9#1 = RAdd(r1793,r17A8);
      real r17AA#1 = RAdd(r17A9,r1797);
      real r17AB#1 = RMul(realLit179D,r1792);
      real r17AC#1 = RAdd(r17AB,r1795);
      real r17AD#1 = RAdd(r17AC,r1797);
      tensor[3] tensor17AE#1 = <tensor[3]>[r17AA,r17AD,r1799];
      tensor[3] projParam17D0#1 = tensor17A1;
      real vdot17D1#1 = VDot<3>(probe_l_1516F6,projParam17D0);
      tensor[3] projParam17D2#1 = tensor17A7;
      real vdot17D3#1 = VDot<3>(probe_l_1516F6,projParam17D2);
      tensor[3] projParam17D4#1 = tensor17AE;
      real vdot17D5#1 = VDot<3>(probe_l_1516F6,projParam17D4);
      tensor[3] op1_e3_l_1817CF#1 = <tensor[3]>[vdot17D1,vdot17D3,vdot17D5];
      real op1_e3_l_1917DE#1 = VDot<3>(probe_l_1416A9,op1_e3_l_1817CF);
      real realLit17E2#27 = 0.e0;
      real r17E3#1 = r1543;
      real r17E4#2 = RMul(realLit17E2,r17E3);
      real r17E5#2 = r154B;
      real r17E6#1 = RMul(realLit17E2,r17E5);
      real r17E7#2 = r1553;
      real r17E8#2 = RMul(realLit17E2,r17E7);
      real r17E9#2 = r158F;
      real r17EA#2 = RMul(realLit17E2,r17E9);
      real r17EB#1 = r1594;
      real r17EC#3 = RMul(realLit17E2,r17EB);
      real realLit17ED#9 = 0.1e1;
      real r17EE#2 = r1599;
      real r17EF#1 = RMul(realLit17ED,r17EE);
      real r17F0#2 = r15C3;
      real r17F1#2 = RMul(realLit17E2,r17F0);
      real realLit17F2#9 = -0.1e1;
      real r17F3#2 = r15C8;
      real r17F4#1 = RMul(realLit17F2,r17F3);
      real r17F5#1 = r15CD;
      real r17F6#3 = RMul(realLit17E2,r17F5);
      real r17F7#2 = RAdd(r17E4,r17E6);
      real r17F8#1 = RAdd(r17F7,r17E8);
      real r17F9#1 = RAdd(r17F8,r17EA);
      real r17FA#1 = RAdd(r17F9,r17EC);
      real r17FB#1 = RAdd(r17FA,r17EF);
      real r17FC#1 = RAdd(r17FB,r17F1);
      real r17FD#1 = RAdd(r17FC,r17F4);
      real r17FE#1 = RAdd(r17FD,r17F6);
      real r17FF#1 = r155C;
      real r1800#2 = RMul(realLit17E2,r17FF);
      real r1801#2 = r1564;
      real r1802#1 = RMul(realLit17E2,r1801);
      real r1803#2 = r156C;
      real r1804#2 = RMul(realLit17E2,r1803);
      real r1805#2 = r159F;
      real r1806#2 = RMul(realLit17E2,r1805);
      real r1807#1 = r15A4;
      real r1808#3 = RMul(realLit17E2,r1807);
      real r1809#2 = r15A9;
      real r180A#1 = RMul(realLit17ED,r1809);
      real r180B#2 = r15D3;
      real r180C#2 = RMul(realLit17E2,r180B);
      real r180D#2 = r15D8;
      real r180E#1 = RMul(realLit17F2,r180D);
      real r180F#1 = r15DD;
      real r1810#3 = RMul(realLit17E2,r180F);
      real r1811#2 = RAdd(r1800,r1802);
      real r1812#1 = RAdd(r1811,r1804);
      real r1813#1 = RAdd(r1812,r1806);
      real r1814#1 = RAdd(r1813,r1808);
      real r1815#1 = RAdd(r1814,r180A);
      real r1816#1 = RAdd(r1815,r180C);
      real r1817#1 = RAdd(r1816,r180E);
      real r1818#1 = RAdd(r1817,r1810);
      real r1819#1 = r1575;
      real r181A#2 = RMul(realLit17E2,r1819);
      real r181B#2 = r157D;
      real r181C#1 = RMul(realLit17E2,r181B);
      real r181D#2 = r1585;
      real r181E#2 = RMul(realLit17E2,r181D);
      real r181F#2 = r15AF;
      real r1820#2 = RMul(realLit17E2,r181F);
      real r1821#1 = r15B4;
      real r1822#3 = RMul(realLit17E2,r1821);
      real r1823#2 = r15B9;
      real r1824#1 = RMul(realLit17ED,r1823);
      real r1825#2 = r15E3;
      real r1826#2 = RMul(realLit17E2,r1825);
      real r1827#2 = r15E8;
      real r1828#1 = RMul(realLit17F2,r1827);
      real r1829#1 = r15ED;
      real r182A#3 = RMul(realLit17E2,r1829);
      real r182B#2 = RAdd(r181A,r181C);
      real r182C#1 = RAdd(r182B,r181E);
      real r182D#1 = RAdd(r182C,r1820);
      real r182E#1 = RAdd(r182D,r1822);
      real r182F#1 = RAdd(r182E,r1824);
      real r1830#1 = RAdd(r182F,r1826);
      real r1831#1 = RAdd(r1830,r1828);
      real r1832#1 = RAdd(r1831,r182A);
      real r1834#1 = RMul(realLit17F2,r17E7);
      real r1835#2 = RMul(realLit17E2,r17EE);
      real r1836#1 = RMul(realLit17ED,r17F0);
      real r1837#2 = RMul(realLit17E2,r17F3);
      real r1838#1 = RAdd(r17F7,r1834);
      real r1839#1 = RAdd(r1838,r17EA);
      real r183A#1 = RAdd(r1839,r17EC);
      real r183B#1 = RAdd(r183A,r1835);
      real r183C#1 = RAdd(r183B,r1836);
      real r183D#1 = RAdd(r183C,r1837);
      real r183E#1 = RAdd(r183D,r17F6);
      real r183F#1 = RMul(realLit17F2,r1803);
      real r1840#2 = RMul(realLit17E2,r1809);
      real r1841#1 = RMul(realLit17ED,r180B);
      real r1842#2 = RMul(realLit17E2,r180D);
      real r1843#1 = RAdd(r1811,r183F);
      real r1844#1 = RAdd(r1843,r1806);
      real r1845#1 = RAdd(r1844,r1808);
      real r1846#1 = RAdd(r1845,r1840);
      real r1847#1 = RAdd(r1846,r1841);
      real r1848#1 = RAdd(r1847,r1842);
      real r1849#1 = RAdd(r1848,r1810);
      real r184A#1 = RMul(realLit17F2,r181D);
      real r184B#2 = RMul(realLit17E2,r1823);
      real r184C#1 = RMul(realLit17ED,r1825);
      real r184D#2 = RMul(realLit17E2,r1827);
      real r184E#1 = RAdd(r182B,r184A);
      real r184F#1 = RAdd(r184E,r1820);
      real r1850#1 = RAdd(r184F,r1822);
      real r1851#1 = RAdd(r1850,r184B);
      real r1852#1 = RAdd(r1851,r184C);
      real r1853#1 = RAdd(r1852,r184D);
      real r1854#1 = RAdd(r1853,r182A);
      real r1856#1 = RMul(realLit17ED,r17E5);
      real r1857#1 = RMul(realLit17F2,r17E9);
      real r1858#1 = RAdd(r17E4,r1856);
      real r1859#1 = RAdd(r1858,r17E8);
      real r185A#1 = RAdd(r1859,r1857);
      real r185B#1 = RAdd(r185A,r17EC);
      real r185C#1 = RAdd(r185B,r1835);
      real r185D#1 = RAdd(r185C,r17F1);
      real r185E#1 = RAdd(r185D,r1837);
      real r185F#1 = RAdd(r185E,r17F6);
      real r1860#1 = RMul(realLit17ED,r1801);
      real r1861#1 = RMul(realLit17F2,r1805);
      real r1862#1 = RAdd(r1800,r1860);
      real r1863#1 = RAdd(r1862,r1804);
      real r1864#1 = RAdd(r1863,r1861);
      real r1865#1 = RAdd(r1864,r1808);
      real r1866#1 = RAdd(r1865,r1840);
      real r1867#1 = RAdd(r1866,r180C);
      real r1868#1 = RAdd(r1867,r1842);
      real r1869#1 = RAdd(r1868,r1810);
      real r186A#1 = RMul(realLit17ED,r181B);
      real r186B#1 = RMul(realLit17F2,r181F);
      real r186C#1 = RAdd(r181A,r186A);
      real r186D#1 = RAdd(r186C,r181E);
      real r186E#1 = RAdd(r186D,r186B);
      real r186F#1 = RAdd(r186E,r1822);
      real r1870#1 = RAdd(r186F,r184B);
      real r1871#1 = RAdd(r1870,r1826);
      real r1872#1 = RAdd(r1871,r184D);
      real r1873#1 = RAdd(r1872,r182A);
      real realLit190B#1 = 0.2e1;
      real op1_e3_l_21190A#9 = RMul(realLit190B,op1_e3_l_1917DE);
      real varAcc1911#1 = VIndex<3,0>(xn1910);
      real varAcc1912#1 = VIndex<3,1>(xn1910);
      real varAcc1913#1 = VIndex<3,2>(xn1910);
      real coeff1914#3 = -0.1e1;
      real iden1915#1 = varAcc1911;
      real one1916#11 = 0.1e1;
      real prod1917#2 = RMul(one1916,one1916);
      real prod1918#2 = RMul(iden1915,prod1917);
      real iden1919#1 = varAcc1912;
      real prod191A#1 = RMul(iden1919,one1916);
      real prod191B#2 = RMul(one1916,prod191A);
      real iden191C#1 = varAcc1913;
      real prod191D#1 = RMul(one1916,iden191C);
      real prod191E#2 = RMul(one1916,prod191D);
      real prod191F#1 = RMul(one1916,prod1917);
      real mult1920#1 = RMul(one1916,prod191F);
      real mult1921#1 = RMul(coeff1914,prod191E);
      real mult1922#1 = RMul(coeff1914,prod191B);
      real mult1923#1 = RMul(coeff1914,prod1918);
      real sum1924#1 = RAdd(mult1922,mult1923);
      real sum1925#1 = RAdd(mult1921,sum1924);
      real sum1926#1 = RAdd(mult1920,sum1925);
      real intermediate1927#2 = sum1926;
      real basisEval1928#2 = RMul(one1916,prod1918);
      real basisEval1929#2 = RMul(one1916,prod191B);
      real basisEval192A#2 = RMul(one1916,prod191E);
      real r1949#1 = dof_load136C;
      real r194A#3 = intermediate1927;
      real r194B#1 = RMul(r1949,r194A);
      real r194C#1 = dof_load1375;
      real r194D#3 = basisEval1928;
      real r194E#1 = RMul(r194C,r194D);
      real r194F#1 = dof_load137E;
      real r1950#3 = basisEval1929;
      real r1951#1 = RMul(r194F,r1950);
      real r1952#1 = dof_load1387;
      real r1953#3 = basisEval192A;
      real r1954#1 = RMul(r1952,r1953);
      real r1955#1 = RAdd(r194B,r194E);
      real r1956#1 = RAdd(r1955,r1951);
      real r1957#1 = RAdd(r1956,r1954);
      real r1958#1 = dof_load136D;
      real r1959#1 = RMul(r1958,r194A);
      real r195A#1 = dof_load1376;
      real r195B#1 = RMul(r195A,r194D);
      real r195C#1 = dof_load137F;
      real r195D#1 = RMul(r195C,r1950);
      real r195E#1 = dof_load1388;
      real r195F#1 = RMul(r195E,r1953);
      real r1960#1 = RAdd(r1959,r195B);
      real r1961#1 = RAdd(r1960,r195D);
      real r1962#1 = RAdd(r1961,r195F);
      real r1963#1 = dof_load136E;
      real r1964#1 = RMul(r1963,r194A);
      real r1965#1 = dof_load1377;
      real r1966#1 = RMul(r1965,r194D);
      real r1967#1 = dof_load1380;
      real r1968#1 = RMul(r1967,r1950);
      real r1969#1 = dof_load1389;
      real r196A#1 = RMul(r1969,r1953);
      real r196B#1 = RAdd(r1964,r1966);
      real r196C#1 = RAdd(r196B,r1968);
      real r196D#1 = RAdd(r196C,r196A);
      tensor[3] probe_l_221948#1 = <tensor[3]>[r1957,r1962,r196D];
      real r1996#1 = r17FE;
      real r1997#1 = RDiv(r1996,op1_e3_l_21190A);
      real r1998#1 = r1818;
      real r1999#1 = RDiv(r1998,op1_e3_l_21190A);
      real r199A#1 = r1832;
      real r199B#1 = RDiv(r199A,op1_e3_l_21190A);
      tensor[3] tensor199C#2 = <tensor[3]>[r1997,r1999,r199B];
      real r199D#1 = r183E;
      real r199E#1 = RDiv(r199D,op1_e3_l_21190A);
      real r199F#1 = r1849;
      real r19A0#1 = RDiv(r199F,op1_e3_l_21190A);
      real r19A1#1 = r1854;
      real r19A2#1 = RDiv(r19A1,op1_e3_l_21190A);
      tensor[3] tensor19A3#2 = <tensor[3]>[r199E,r19A0,r19A2];
      real r19A4#1 = r185F;
      real r19A5#1 = RDiv(r19A4,op1_e3_l_21190A);
      real r19A6#1 = r1869;
      real r19A7#1 = RDiv(r19A6,op1_e3_l_21190A);
      real r19A8#1 = r1873;
      real r19A9#1 = RDiv(r19A8,op1_e3_l_21190A);
      tensor[3] tensor19AA#2 = <tensor[3]>[r19A5,r19A7,r19A9];
      tensor[3] op1_e3_l_2419C2#3 = VSub<3>(probe_l_221948,pos1330);
      tensor[3] projParam19C6#1 = tensor199C;
      real vdot19C7#1 = VDot<3>(projParam19C6,op1_e3_l_2419C2);
      tensor[3] projParam19C8#1 = tensor19A3;
      real vdot19C9#1 = VDot<3>(projParam19C8,op1_e3_l_2419C2);
      tensor[3] projParam19CA#1 = tensor19AA;
      real vdot19CB#1 = VDot<3>(projParam19CA,op1_e3_l_2419C2);
      tensor[3] op1_e3_l_2519C5#1 = <tensor[3]>[vdot19C7,vdot19C9,vdot19CB];
      tensor[3] xn19D4#4 = VSub<3>(xn1910,op1_e3_l_2519C5);
      real _t19D7#2 = 0.1e-7;
      real _t19D9#1 = RMul(_t19D7,_t19D7);
      real r19DD#1 = dof_load136C;
      real r19DE#3 = intermediate1927;
      real r19DF#1 = RMul(r19DD,r19DE);
      real r19E0#1 = dof_load1375;
      real r19E1#3 = basisEval1928;
      real r19E2#1 = RMul(r19E0,r19E1);
      real r19E3#1 = dof_load137E;
      real r19E4#3 = basisEval1929;
      real r19E5#1 = RMul(r19E3,r19E4);
      real r19E6#1 = dof_load1387;
      real r19E7#3 = basisEval192A;
      real r19E8#1 = RMul(r19E6,r19E7);
      real r19E9#1 = RAdd(r19DF,r19E2);
      real r19EA#1 = RAdd(r19E9,r19E5);
      real r19EB#1 = RAdd(r19EA,r19E8);
      real r19EC#1 = dof_load136D;
      real r19ED#1 = RMul(r19EC,r19DE);
      real r19EE#1 = dof_load1376;
      real r19EF#1 = RMul(r19EE,r19E1);
      real r19F0#1 = dof_load137F;
      real r19F1#1 = RMul(r19F0,r19E4);
      real r19F2#1 = dof_load1388;
      real r19F3#1 = RMul(r19F2,r19E7);
      real r19F4#1 = RAdd(r19ED,r19EF);
      real r19F5#1 = RAdd(r19F4,r19F1);
      real r19F6#1 = RAdd(r19F5,r19F3);
      real r19F7#1 = dof_load136E;
      real r19F8#1 = RMul(r19F7,r19DE);
      real r19F9#1 = dof_load1377;
      real r19FA#1 = RMul(r19F9,r19E1);
      real r19FB#1 = dof_load1380;
      real r19FC#1 = RMul(r19FB,r19E4);
      real r19FD#1 = dof_load1389;
      real r19FE#1 = RMul(r19FD,r19E7);
      real r19FF#1 = RAdd(r19F8,r19FA);
      real r1A00#1 = RAdd(r19FF,r19FC);
      real r1A01#1 = RAdd(r1A00,r19FE);
      tensor[3] probe_l_3019DC#1 = <tensor[3]>[r19EB,r19F6,r1A01];
      tensor[3] op1_e3_l_321A29#3 = VSub<3>(probe_l_3019DC,pos1330);
      tensor[3] projParam1A2D#1 = tensor199C;
      real vdot1A2E#1 = VDot<3>(projParam1A2D,op1_e3_l_321A29);
      tensor[3] projParam1A2F#1 = tensor19A3;
      real vdot1A30#1 = VDot<3>(projParam1A2F,op1_e3_l_321A29);
      tensor[3] projParam1A31#1 = tensor19AA;
      real vdot1A32#1 = VDot<3>(projParam1A31,op1_e3_l_321A29);
      tensor[3] op1_e3_l_481A2C#2 = <tensor[3]>[vdot1A2E,vdot1A30,vdot1A32];
      real _t1A3B#1 = VDot<3>(op1_e3_l_481A2C,op1_e3_l_481A2C);
      bool _t1A3E#1 = GTE<real>(_t19D9,_t1A3B);
      if _t1A3E then goto ASSIGN1A42 else goto JOIN1A6D
    ASSIGN1A42:  preds = [COND1A40]
      real _t1A41#4 = 0.1e1;
      real _t1A43#4 = 0.1e-8;
      real _t1A45#1 = RAdd(_t1A41,_t1A43);
      tensor[3] _t1A48#1 = <tensor[3]>[_t1A41,_t1A41,_t1A41];
      real _t1A4A#1 = VDot<3>(_t1A48,xn19D4);
      bool _t1A4D#1 = GT<real>(_t1A45,_t1A4A);
      tensor[3] _t1A4F#1 = <tensor[3]>[_t1A43,_t1A43,_t1A43];
      tensor[3] _t1A51#3 = VAdd<3>(_t1A4F,xn19D4);
      real _t1A54#1 = VIndex<3,0>(_t1A51);
      real _t1A56#3 = -0.e0;
      bool _t1A58#1 = GT<real>(_t1A54,_t1A56);
      real _t1A5A#1 = VIndex<3,1>(_t1A51);
      bool _t1A5C#1 = GT<real>(_t1A5A,_t1A56);
      real _t1A5E#1 = VIndex<3,2>(_t1A51);
      bool _t1A60#1 = GT<real>(_t1A5E,_t1A56);
      bool _t1A62#1 = BAnd(_t1A5C,_t1A60);
      bool _t1A64#1 = BAnd(_t1A58,_t1A62);
      bool _t1A66#1 = BAnd(_t1A4D,_t1A64);
      if _t1A66 then goto ASSIGN1A6A else goto JOIN1A6C
    ASSIGN1A6A:  preds = [COND1A68]
      femData:MeshPos _t1A69#1 = ExtractFemItemN<[femData:Mesh,int,tensor[3],tensor[3]],femData:MeshPos,AllBuild(MeshPos),0000,"",[],int>(mesh132F,cellItter133A,xn19D4,pos1330);
      return _t1A69
      goto JOIN1A6C
    JOIN1A6C:  preds = [*RETURN(_t1A69)1A6B,COND1A68]
      goto JOIN1A6D
    JOIN1A6D:  preds = [JOIN1A6C,COND1A40]
      goto FOREACH1341
    NEXT1A70:  preds = [FOREACH1341]
      goto FOREACH133B
    ASSIGN1A72:  preds = [FOREACH133B]
      string _t1A71#1 = "Bad end 2";
      string _t1A73#1 = "\n";
      Print<[string,string]>(_t1A71,_t1A73);
      femData:MeshPos _t1A76#1 = ExtractFemItemN<[femData:Mesh],femData:MeshPos,InvalidBuild(MeshPos),0000,"",[],int>(mesh132F);
      return _t1A76
}
## input initialization
  ENTRY12CE:  preds = []
    return
## global-variable initialization
  ENTRY12D0:  preds = []
    femData:Mesh cube12D1#3 = globals.cube12C7;
    femData:Space 0space0342_intermedateGlobal12D3#1 = globals.0space0342_intermedateGlobal12C8;
    femData:FemFunc 0data0344_intermedateGlobal12D5#1 = globals.0data0344_intermedateGlobal12C9;
    int _t12D7#1 = 0;
    int _t12D9#1 = 1;
    int _t12DB#1 = ExtractFemItem<int,NumCell(Mesh)>(cube12D1);
    int _t12DD#1 = ISub(_t12DB,_t12D9);
    int[] _t12DF#1 = Range(_t12D7,_t12DD);
    femData:MeshCell[] _t12E1#1 = <femData:MeshCell[]>{};
  FOREACH12E4:  preds = [ASSIGN12E2,NEXT12EA]
    foreach (_t12E3 in _t12DF) on exit goto GASSIGN12EB
      femData:MeshCell[] _t12E8#2 = phi(_t12E1,_t12E7)
    femData:MeshCell _t12E5#1 = LoadFem<femData:MeshCell>(cube12D1,_t12E3);
    femData:MeshCell[] _t12E7#1 = Append<femData:MeshCell>(_t12E8,_t12E5);
    goto FOREACH12E4
  GASSIGN12EB:  preds = [FOREACH12E4]
    globals.0cell_cube12CA = _t12E8;
    femData:Space space12EC#1 = LoadFem<femData:Space>(0space0342_intermedateGlobal12D3,cube12D1);
    femData:FemFunc data12EE#2 = LoadFem<femData:FemFunc>(0data0344_intermedateGlobal12D5,space12EC);
    femData:Space _t12F0#2 = ExtractFem<femData:Space,femData:FemFunc>(data12EE);
    femData:Mesh _t12F2#1 = ExtractFem<femData:Mesh,femData:Space>(_t12F0);
    globals._t12CB = _t12F2;
    globals._tX12CC = _t12F0;
    globals.data12CD = data12EE;
    return
## strand
  strand gg (tensor[3] i12F8#1)
    state:
      output tensor[3] target;
      output tensor[3] translated;
      output bool valid;
      output femData:MeshCell c;
      output real result;
      output tensor[3] gradResult;
      output tensor[3] gradResultp;
    state init
      ENTRY1300:  preds = []
        femData:MeshCell[] 0cell_cube1301#1 = globals.0cell_cube12CA;
        real _nan1303#4 = nan;
        tensor[3] translated1305#3 = <tensor[3]>[_nan1303,_nan1303,_nan1303];
        bool valid1307#1 = false;
        int _t1309#1 = 0;
        femData:MeshCell c130B#1 = Subscript<femData:MeshCell[]>(0cell_cube1301,_t1309);
        self.target = i12F8;
        self.translated = translated1305;
        self.valid = valid1307;
        self.c = c130B;
        self.result = _nan1303;
        self.gradResult = translated1305;
        self.gradResultp = translated1305;
        return
    end state init
    method update
        ENTRY1315:  preds = []
          femData:Mesh _t1316#17 = globals._t12CB;
          femData:Space _t1318#35 = globals._tX12CC;
          femData:FemFunc data131A#35 = globals.data12CD;
          femData:Mesh cube131C#1 = globals.cube12C7;
          tensor[3] target131E#3 = self.target;
          tensor[3] translated1320#1 = self.translated;
          femData:MeshCell c1322#1 = self.c;
          real result1324#1 = self.result;
          tensor[3] gradResult1326#1 = self.gradResult;
          string _t1328#1 = "Running on ";
          string _t132A#1 = "\n";
          Print<[string,tensor[3],string]>(_t1328,target131E,_t132A);
          femData:MeshPos p132D#4 = findPos132E (cube131C,target131E);
          bool valid1A7A#2 = ExtractFemItem<bool,Valid(MeshPos)>(p132D);
          if valid1A7A then goto ASSIGN1A7E else goto ASSIGN2D44
        ASSIGN1A7E:  preds = [COND1A7C]
          femData:Mesh _t1A7D#1 = ExtractFem<femData:Mesh,femData:MeshPos>(p132D);
          int _t1A7F#1 = ExtractFemItem<int,CellIndex(MeshPos)>(p132D);
          femData:MeshCell c1A81#1 = LoadFem<femData:MeshCell>(_t1A7D,_t1A7F);
          tensor[3] translated1A83#1 = ExtractFemItem<tensor[3],RefPos(MeshPos)>(p132D);
          femData:MeshPos callFindPos1A85#2 = findPos132E (_t1316,target131E);
          int intPos1A87#2 = ExtractFemItem<int,CellIndex(Mesh)>(callFindPos1A85);
          tensor[3] refPos1A89#6 = ExtractFemItem<tensor[3],RefPos(Mesh)>(callFindPos1A85);
          int ilit1A8C#1 = 35;
          int mulRes1A8D#35 = IMul(intPos1A87,ilit1A8C);
          int addRes1A8F#1 = mulRes1A8D;
          int idx1A90#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1A8F);
          int ilit1A91#1 = 1;
          int addRes1A92#1 = IAdd(mulRes1A8D,ilit1A91);
          int idx1A93#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1A92);
          int ilit1A94#1 = 2;
          int addRes1A95#1 = IAdd(mulRes1A8D,ilit1A94);
          int idx1A96#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1A95);
          int ilit1A97#1 = 3;
          int addRes1A98#1 = IAdd(mulRes1A8D,ilit1A97);
          int idx1A99#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1A98);
          int ilit1A9A#1 = 4;
          int addRes1A9B#1 = IAdd(mulRes1A8D,ilit1A9A);
          int idx1A9C#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1A9B);
          int ilit1A9D#1 = 5;
          int addRes1A9E#1 = IAdd(mulRes1A8D,ilit1A9D);
          int idx1A9F#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1A9E);
          int ilit1AA0#1 = 6;
          int addRes1AA1#1 = IAdd(mulRes1A8D,ilit1AA0);
          int idx1AA2#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AA1);
          int ilit1AA3#1 = 7;
          int addRes1AA4#1 = IAdd(mulRes1A8D,ilit1AA3);
          int idx1AA5#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AA4);
          int ilit1AA6#1 = 8;
          int addRes1AA7#1 = IAdd(mulRes1A8D,ilit1AA6);
          int idx1AA8#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AA7);
          int ilit1AA9#1 = 9;
          int addRes1AAA#1 = IAdd(mulRes1A8D,ilit1AA9);
          int idx1AAB#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AAA);
          int ilit1AAC#1 = 10;
          int addRes1AAD#1 = IAdd(mulRes1A8D,ilit1AAC);
          int idx1AAE#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AAD);
          int ilit1AAF#1 = 11;
          int addRes1AB0#1 = IAdd(mulRes1A8D,ilit1AAF);
          int idx1AB1#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AB0);
          int ilit1AB2#1 = 12;
          int addRes1AB3#1 = IAdd(mulRes1A8D,ilit1AB2);
          int idx1AB4#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AB3);
          int ilit1AB5#1 = 13;
          int addRes1AB6#1 = IAdd(mulRes1A8D,ilit1AB5);
          int idx1AB7#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AB6);
          int ilit1AB8#1 = 14;
          int addRes1AB9#1 = IAdd(mulRes1A8D,ilit1AB8);
          int idx1ABA#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AB9);
          int ilit1ABB#1 = 15;
          int addRes1ABC#1 = IAdd(mulRes1A8D,ilit1ABB);
          int idx1ABD#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1ABC);
          int ilit1ABE#1 = 16;
          int addRes1ABF#1 = IAdd(mulRes1A8D,ilit1ABE);
          int idx1AC0#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1ABF);
          int ilit1AC1#1 = 17;
          int addRes1AC2#1 = IAdd(mulRes1A8D,ilit1AC1);
          int idx1AC3#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AC2);
          int ilit1AC4#1 = 18;
          int addRes1AC5#1 = IAdd(mulRes1A8D,ilit1AC4);
          int idx1AC6#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AC5);
          int ilit1AC7#1 = 19;
          int addRes1AC8#1 = IAdd(mulRes1A8D,ilit1AC7);
          int idx1AC9#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AC8);
          int ilit1ACA#1 = 20;
          int addRes1ACB#1 = IAdd(mulRes1A8D,ilit1ACA);
          int idx1ACC#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1ACB);
          int ilit1ACD#1 = 21;
          int addRes1ACE#1 = IAdd(mulRes1A8D,ilit1ACD);
          int idx1ACF#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1ACE);
          int ilit1AD0#1 = 22;
          int addRes1AD1#1 = IAdd(mulRes1A8D,ilit1AD0);
          int idx1AD2#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AD1);
          int ilit1AD3#1 = 23;
          int addRes1AD4#1 = IAdd(mulRes1A8D,ilit1AD3);
          int idx1AD5#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AD4);
          int ilit1AD6#1 = 24;
          int addRes1AD7#1 = IAdd(mulRes1A8D,ilit1AD6);
          int idx1AD8#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AD7);
          int ilit1AD9#1 = 25;
          int addRes1ADA#1 = IAdd(mulRes1A8D,ilit1AD9);
          int idx1ADB#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1ADA);
          int ilit1ADC#1 = 26;
          int addRes1ADD#1 = IAdd(mulRes1A8D,ilit1ADC);
          int idx1ADE#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1ADD);
          int ilit1ADF#1 = 27;
          int addRes1AE0#1 = IAdd(mulRes1A8D,ilit1ADF);
          int idx1AE1#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AE0);
          int ilit1AE2#1 = 28;
          int addRes1AE3#1 = IAdd(mulRes1A8D,ilit1AE2);
          int idx1AE4#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AE3);
          int ilit1AE5#1 = 29;
          int addRes1AE6#1 = IAdd(mulRes1A8D,ilit1AE5);
          int idx1AE7#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AE6);
          int ilit1AE8#1 = 30;
          int addRes1AE9#1 = IAdd(mulRes1A8D,ilit1AE8);
          int idx1AEA#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AE9);
          int ilit1AEB#1 = 31;
          int addRes1AEC#1 = IAdd(mulRes1A8D,ilit1AEB);
          int idx1AED#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AEC);
          int ilit1AEE#1 = 32;
          int addRes1AEF#1 = IAdd(mulRes1A8D,ilit1AEE);
          int idx1AF0#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AEF);
          int ilit1AF1#1 = 33;
          int addRes1AF2#1 = IAdd(mulRes1A8D,ilit1AF1);
          int idx1AF3#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AF2);
          int ilit1AF4#1 = 34;
          int addRes1AF5#1 = IAdd(mulRes1A8D,ilit1AF4);
          int idx1AF6#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AF5);
          int ilit1B66#35 = 1;
          int idx1B68#1 = idx1A90;
          int mulRes1B69#1 = IMul(ilit1B66,idx1B68);
          int idx1B6A#1 = idx1A93;
          int mulRes1B6B#1 = IMul(ilit1B66,idx1B6A);
          int idx1B6D#1 = idx1A96;
          int mulRes1B6E#1 = IMul(ilit1B66,idx1B6D);
          int idx1B70#1 = idx1A99;
          int mulRes1B71#1 = IMul(ilit1B66,idx1B70);
          int idx1B73#1 = idx1A9C;
          int mulRes1B74#1 = IMul(ilit1B66,idx1B73);
          int idx1B76#1 = idx1A9F;
          int mulRes1B77#1 = IMul(ilit1B66,idx1B76);
          int idx1B79#1 = idx1AA2;
          int mulRes1B7A#1 = IMul(ilit1B66,idx1B79);
          int idx1B7C#1 = idx1AA5;
          int mulRes1B7D#1 = IMul(ilit1B66,idx1B7C);
          int idx1B7F#1 = idx1AA8;
          int mulRes1B80#1 = IMul(ilit1B66,idx1B7F);
          int idx1B82#1 = idx1AAB;
          int mulRes1B83#1 = IMul(ilit1B66,idx1B82);
          int idx1B85#1 = idx1AAE;
          int mulRes1B86#1 = IMul(ilit1B66,idx1B85);
          int idx1B88#1 = idx1AB1;
          int mulRes1B89#1 = IMul(ilit1B66,idx1B88);
          int idx1B8B#1 = idx1AB4;
          int mulRes1B8C#1 = IMul(ilit1B66,idx1B8B);
          int idx1B8E#1 = idx1AB7;
          int mulRes1B8F#1 = IMul(ilit1B66,idx1B8E);
          int idx1B91#1 = idx1ABA;
          int mulRes1B92#1 = IMul(ilit1B66,idx1B91);
          int idx1B94#1 = idx1ABD;
          int mulRes1B95#1 = IMul(ilit1B66,idx1B94);
          int idx1B97#1 = idx1AC0;
          int mulRes1B98#1 = IMul(ilit1B66,idx1B97);
          int idx1B9A#1 = idx1AC3;
          int mulRes1B9B#1 = IMul(ilit1B66,idx1B9A);
          int idx1B9D#1 = idx1AC6;
          int mulRes1B9E#1 = IMul(ilit1B66,idx1B9D);
          int idx1BA0#1 = idx1AC9;
          int mulRes1BA1#1 = IMul(ilit1B66,idx1BA0);
          int idx1BA3#1 = idx1ACC;
          int mulRes1BA4#1 = IMul(ilit1B66,idx1BA3);
          int idx1BA6#1 = idx1ACF;
          int mulRes1BA7#1 = IMul(ilit1B66,idx1BA6);
          int idx1BA9#1 = idx1AD2;
          int mulRes1BAA#1 = IMul(ilit1B66,idx1BA9);
          int idx1BAC#1 = idx1AD5;
          int mulRes1BAD#1 = IMul(ilit1B66,idx1BAC);
          int idx1BAF#1 = idx1AD8;
          int mulRes1BB0#1 = IMul(ilit1B66,idx1BAF);
          int idx1BB2#1 = idx1ADB;
          int mulRes1BB3#1 = IMul(ilit1B66,idx1BB2);
          int idx1BB5#1 = idx1ADE;
          int mulRes1BB6#1 = IMul(ilit1B66,idx1BB5);
          int idx1BB8#1 = idx1AE1;
          int mulRes1BB9#1 = IMul(ilit1B66,idx1BB8);
          int idx1BBB#1 = idx1AE4;
          int mulRes1BBC#1 = IMul(ilit1B66,idx1BBB);
          int idx1BBE#1 = idx1AE7;
          int mulRes1BBF#1 = IMul(ilit1B66,idx1BBE);
          int idx1BC1#1 = idx1AEA;
          int mulRes1BC2#1 = IMul(ilit1B66,idx1BC1);
          int idx1BC4#1 = idx1AED;
          int mulRes1BC5#1 = IMul(ilit1B66,idx1BC4);
          int idx1BC7#1 = idx1AF0;
          int mulRes1BC8#1 = IMul(ilit1B66,idx1BC7);
          int idx1BCA#1 = idx1AF3;
          int mulRes1BCB#1 = IMul(ilit1B66,idx1BCA);
          int idx1BCD#1 = idx1AF6;
          int mulRes1BCE#1 = IMul(ilit1B66,idx1BCD);
          real dof1BCF#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B69);
          real dof1BD0#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B6B);
          real dof1BD1#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B6E);
          real dof1BD2#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B71);
          real dof1BD3#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B74);
          real dof1BD4#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B77);
          real dof1BD5#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B7A);
          real dof1BD6#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B7D);
          real dof1BD7#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B80);
          real dof1BD8#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B83);
          real dof1BD9#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B86);
          real dof1BDA#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B89);
          real dof1BDB#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B8C);
          real dof1BDC#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B8F);
          real dof1BDD#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B92);
          real dof1BDE#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B95);
          real dof1BDF#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B98);
          real dof1BE0#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B9B);
          real dof1BE1#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B9E);
          real dof1BE2#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BA1);
          real dof1BE3#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BA4);
          real dof1BE4#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BA7);
          real dof1BE5#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BAA);
          real dof1BE6#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BAD);
          real dof1BE7#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BB0);
          real dof1BE8#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BB3);
          real dof1BE9#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BB6);
          real dof1BEA#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BB9);
          real dof1BEB#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BBC);
          real dof1BEC#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BBF);
          real dof1BED#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BC2);
          real dof1BEE#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BC5);
          real dof1BEF#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BC8);
          real dof1BF0#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BCB);
          real dof1BF1#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BCE);
          tensor[35] dofs1BF2#1 = <tensor[35]>[dof1BCF,dof1BD0,dof1BD1,dof1BD2,dof1BD3,dof1BD4,dof1BD5,dof1BD6,dof1BD7,dof1BD8,dof1BD9,dof1BDA,dof1BDB,dof1BDC,dof1BDD,dof1BDE,dof1BDF,dof1BE0,dof1BE1,dof1BE2,dof1BE3,dof1BE4,dof1BE5,dof1BE6,dof1BE7,dof1BE8,dof1BE9,dof1BEA,dof1BEB,dof1BEC,dof1BED,dof1BEE,dof1BEF,dof1BF0,dof1BF1];
          tensor[35] femDofs1B65#4 = dofs1BF2;
          real varAcc1C82#4 = VIndex<3,0>(refPos1A89);
          real varAcc1C83#4 = VIndex<3,1>(refPos1A89);
          real varAcc1C84#4 = VIndex<3,2>(refPos1A89);
          real coeff1C85#3 = 0.106666666667e2;
          real iden1C86#11 = varAcc1C82;
          real prod21C87#7 = RMul(iden1C86,varAcc1C82);
          real prod31C88#4 = RMul(prod21C87,varAcc1C82);
          real prod41C89#1 = RMul(prod31C88,varAcc1C82);
          real one1C8A#26 = 0.1e1;
          real prod1C8B#5 = RMul(one1C8A,one1C8A);
          real prod1C8C#3 = RMul(prod41C89,prod1C8B);
          real coeff1C8D#6 = 0.426666666667e2;
          real iden1C8E#5 = varAcc1C83;
          real prod1C8F#4 = RMul(iden1C8E,one1C8A);
          real prod1C90#4 = RMul(prod31C88,prod1C8F);
          real iden1C91#5 = varAcc1C84;
          real prod1C92#4 = RMul(one1C8A,iden1C91);
          real prod1C93#4 = RMul(prod31C88,prod1C92);
          real coeff1C94#3 = -0.266666666667e2;
          real prod1C95#5 = RMul(prod31C88,prod1C8B);
          real coeff1C96#6 = 0.64e2;
          real prod21C97#4 = RMul(iden1C8E,varAcc1C83);
          real prod1C98#3 = RMul(prod21C97,one1C8A);
          real prod1C99#3 = RMul(prod21C87,prod1C98);
          real coeff1C9A#9 = 0.128e3;
          real prod1C9B#3 = RMul(iden1C8E,iden1C91);
          real prod1C9C#4 = RMul(prod21C87,prod1C9B);
          real coeff1C9D#6 = -0.80e2;
          real prod1C9E#9 = RMul(prod21C87,prod1C8F);
          real prod21C9F#4 = RMul(iden1C91,varAcc1C84);
          real prod1CA0#3 = RMul(one1C8A,prod21C9F);
          real prod1CA1#3 = RMul(prod21C87,prod1CA0);
          real prod1CA2#9 = RMul(prod21C87,prod1C92);
          real coeff1CA3#3 = 0.233333333333e2;
          real prod1CA4#5 = RMul(prod21C87,prod1C8B);
          real prod31CA5#3 = RMul(prod21C97,varAcc1C83);
          real prod1CA6#2 = RMul(prod31CA5,one1C8A);
          real prod1CA7#4 = RMul(iden1C86,prod1CA6);
          real prod1CA8#2 = RMul(prod21C97,iden1C91);
          real prod1CA9#4 = RMul(iden1C86,prod1CA8);
          real prod1CAA#9 = RMul(iden1C86,prod1C98);
          real prod1CAB#2 = RMul(iden1C8E,prod21C9F);
          real prod1CAC#4 = RMul(iden1C86,prod1CAB);
          real coeff1CAD#1 = -0.160e3;
          real prod1CAE#6 = RMul(iden1C86,prod1C9B);
          real coeff1CAF#3 = 0.466666666667e2;
          real prod1CB0#8 = RMul(iden1C86,prod1C8F);
          real prod31CB1#3 = RMul(prod21C9F,varAcc1C84);
          real prod1CB2#2 = RMul(one1C8A,prod31CB1);
          real prod1CB3#4 = RMul(iden1C86,prod1CB2);
          real prod1CB4#9 = RMul(iden1C86,prod1CA0);
          real prod1CB5#8 = RMul(iden1C86,prod1C92);
          real coeff1CB6#3 = -0.833333333333e1;
          real prod1CB7#5 = RMul(iden1C86,prod1C8B);
          real prod41CB8#1 = RMul(prod31CA5,varAcc1C83);
          real prod1CB9#1 = RMul(prod41CB8,one1C8A);
          real prod1CBA#3 = RMul(one1C8A,prod1CB9);
          real prod1CBB#1 = RMul(prod31CA5,iden1C91);
          real prod1CBC#4 = RMul(one1C8A,prod1CBB);
          real prod1CBD#5 = RMul(one1C8A,prod1CA6);
          real prod1CBE#1 = RMul(prod21C97,prod21C9F);
          real prod1CBF#3 = RMul(one1C8A,prod1CBE);
          real prod1CC0#9 = RMul(one1C8A,prod1CA8);
          real prod1CC1#5 = RMul(one1C8A,prod1C98);
          real prod1CC2#1 = RMul(iden1C8E,prod31CB1);
          real prod1CC3#4 = RMul(one1C8A,prod1CC2);
          real prod1CC4#9 = RMul(one1C8A,prod1CAB);
          real prod1CC5#8 = RMul(one1C8A,prod1C9B);
          real prod1CC6#5 = RMul(one1C8A,prod1C8F);
          real prod41CC7#1 = RMul(prod31CB1,varAcc1C84);
          real prod1CC8#1 = RMul(one1C8A,prod41CC7);
          real prod1CC9#3 = RMul(one1C8A,prod1CC8);
          real prod1CCA#5 = RMul(one1C8A,prod1CB2);
          real prod1CCB#5 = RMul(one1C8A,prod1CA0);
          real prod1CCC#5 = RMul(one1C8A,prod1C92);
          real prod1CCD#1 = RMul(one1C8A,prod1C8B);
          real mult1CCE#1 = RMul(one1C8A,prod1CCD);
          real mult1CCF#1 = RMul(coeff1CB6,prod1CCC);
          real mult1CD0#1 = RMul(coeff1CA3,prod1CCB);
          real mult1CD1#1 = RMul(coeff1C94,prod1CCA);
          real mult1CD2#2 = RMul(coeff1C85,prod1CC9);
          real mult1CD3#1 = RMul(coeff1CB6,prod1CC6);
          real mult1CD4#1 = RMul(coeff1CAF,prod1CC5);
          real mult1CD5#1 = RMul(coeff1C9D,prod1CC4);
          real mult1CD6#2 = RMul(coeff1C8D,prod1CC3);
          real mult1CD7#1 = RMul(coeff1CA3,prod1CC1);
          real mult1CD8#1 = RMul(coeff1C9D,prod1CC0);
          real mult1CD9#4 = RMul(coeff1C96,prod1CBF);
          real mult1CDA#1 = RMul(coeff1C94,prod1CBD);
          real mult1CDB#2 = RMul(coeff1C8D,prod1CBC);
          real mult1CDC#2 = RMul(coeff1C85,prod1CBA);
          real mult1CDD#1 = RMul(coeff1CB6,prod1CB7);
          real mult1CDE#1 = RMul(coeff1CAF,prod1CB5);
          real mult1CDF#1 = RMul(coeff1C9D,prod1CB4);
          real mult1CE0#2 = RMul(coeff1C8D,prod1CB3);
          real mult1CE1#1 = RMul(coeff1CAF,prod1CB0);
          real mult1CE2#1 = RMul(coeff1CAD,prod1CAE);
          real mult1CE3#4 = RMul(coeff1C9A,prod1CAC);
          real mult1CE4#1 = RMul(coeff1C9D,prod1CAA);
          real mult1CE5#4 = RMul(coeff1C9A,prod1CA9);
          real mult1CE6#2 = RMul(coeff1C8D,prod1CA7);
          real mult1CE7#1 = RMul(coeff1CA3,prod1CA4);
          real mult1CE8#1 = RMul(coeff1C9D,prod1CA2);
          real mult1CE9#3 = RMul(coeff1C96,prod1CA1);
          real mult1CEA#1 = RMul(coeff1C9D,prod1C9E);
          real mult1CEB#4 = RMul(coeff1C9A,prod1C9C);
          real mult1CEC#3 = RMul(coeff1C96,prod1C99);
          real mult1CED#1 = RMul(coeff1C94,prod1C95);
          real mult1CEE#2 = RMul(coeff1C8D,prod1C93);
          real mult1CEF#2 = RMul(coeff1C8D,prod1C90);
          real mult1CF0#2 = RMul(coeff1C85,prod1C8C);
          real sum1CF1#1 = RAdd(mult1CEF,mult1CF0);
          real sum1CF2#1 = RAdd(mult1CEE,sum1CF1);
          real sum1CF3#1 = RAdd(mult1CED,sum1CF2);
          real sum1CF4#1 = RAdd(mult1CEC,sum1CF3);
          real sum1CF5#1 = RAdd(mult1CEB,sum1CF4);
          real sum1CF6#1 = RAdd(mult1CEA,sum1CF5);
          real sum1CF7#1 = RAdd(mult1CE9,sum1CF6);
          real sum1CF8#1 = RAdd(mult1CE8,sum1CF7);
          real sum1CF9#1 = RAdd(mult1CE7,sum1CF8);
          real sum1CFA#1 = RAdd(mult1CE6,sum1CF9);
          real sum1CFB#1 = RAdd(mult1CE5,sum1CFA);
          real sum1CFC#1 = RAdd(mult1CE4,sum1CFB);
          real sum1CFD#1 = RAdd(mult1CE3,sum1CFC);
          real sum1CFE#1 = RAdd(mult1CE2,sum1CFD);
          real sum1CFF#1 = RAdd(mult1CE1,sum1CFE);
          real sum1D00#1 = RAdd(mult1CE0,sum1CFF);
          real sum1D01#1 = RAdd(mult1CDF,sum1D00);
          real sum1D02#1 = RAdd(mult1CDE,sum1D01);
          real sum1D03#1 = RAdd(mult1CDD,sum1D02);
          real sum1D04#1 = RAdd(mult1CDC,sum1D03);
          real sum1D05#1 = RAdd(mult1CDB,sum1D04);
          real sum1D06#1 = RAdd(mult1CDA,sum1D05);
          real sum1D07#1 = RAdd(mult1CD9,sum1D06);
          real sum1D08#1 = RAdd(mult1CD8,sum1D07);
          real sum1D09#1 = RAdd(mult1CD7,sum1D08);
          real sum1D0A#1 = RAdd(mult1CD6,sum1D09);
          real sum1D0B#1 = RAdd(mult1CD5,sum1D0A);
          real sum1D0C#1 = RAdd(mult1CD4,sum1D0B);
          real sum1D0D#1 = RAdd(mult1CD3,sum1D0C);
          real sum1D0E#1 = RAdd(mult1CD2,sum1D0D);
          real sum1D0F#1 = RAdd(mult1CD1,sum1D0E);
          real sum1D10#1 = RAdd(mult1CD0,sum1D0F);
          real sum1D11#1 = RAdd(mult1CCF,sum1D10);
          real sum1D12#1 = RAdd(mult1CCE,sum1D11);
          real intermediate1D13#1 = sum1D12;
          real coeff1D14#9 = -0.16e2;
          real coeff1D15#3 = 0.733333333333e1;
          real coeff1D16#3 = -0.1e1;
          real mult1D17#1 = RMul(coeff1D16,prod1CB7);
          real mult1D18#1 = RMul(coeff1D15,prod1CA4);
          real mult1D19#1 = RMul(coeff1D14,prod1C95);
          real sum1D1A#1 = RAdd(mult1D19,mult1CF0);
          real sum1D1B#1 = RAdd(mult1D18,sum1D1A);
          real sum1D1C#1 = RAdd(mult1D17,sum1D1B);
          real intermediate1D1D#1 = sum1D1C;
          real mult1D1E#1 = RMul(coeff1D16,prod1CC6);
          real mult1D1F#1 = RMul(coeff1D15,prod1CC1);
          real mult1D20#1 = RMul(coeff1D14,prod1CBD);
          real sum1D21#1 = RAdd(mult1D20,mult1CDC);
          real sum1D22#1 = RAdd(mult1D1F,sum1D21);
          real sum1D23#1 = RAdd(mult1D1E,sum1D22);
          real intermediate1D24#1 = sum1D23;
          real mult1D25#1 = RMul(coeff1D16,prod1CCC);
          real mult1D26#1 = RMul(coeff1D15,prod1CCB);
          real mult1D27#1 = RMul(coeff1D14,prod1CCA);
          real sum1D28#1 = RAdd(mult1D27,mult1CD2);
          real sum1D29#1 = RAdd(mult1D26,sum1D28);
          real sum1D2A#1 = RAdd(mult1D25,sum1D29);
          real intermediate1D2B#1 = sum1D2A;
          real coeff1D2C#10 = -0.32e2;
          real coeff1D2D#6 = 0.533333333333e1;
          real mult1D2E#2 = RMul(coeff1D2D,prod1CC5);
          real mult1D2F#1 = RMul(coeff1D2C,prod1CC0);
          real sum1D30#1 = RAdd(mult1D2F,mult1CDB);
          real sum1D31#1 = RAdd(mult1D2E,sum1D30);
          real intermediate1D32#1 = sum1D31;
          real coeff1D33#3 = 0.4e1;
          real mult1D34#1 = RMul(coeff1D33,prod1CC5);
          real mult1D35#2 = RMul(coeff1D14,prod1CC4);
          real mult1D36#2 = RMul(coeff1D14,prod1CC0);
          real sum1D37#1 = RAdd(mult1D36,mult1CD9);
          real sum1D38#1 = RAdd(mult1D35,sum1D37);
          real sum1D39#1 = RAdd(mult1D34,sum1D38);
          real intermediate1D3A#1 = sum1D39;
          real mult1D3B#1 = RMul(coeff1D2C,prod1CC4);
          real sum1D3C#1 = RAdd(mult1D3B,mult1CD6);
          real sum1D3D#1 = RAdd(mult1D2E,sum1D3C);
          real intermediate1D3E#1 = sum1D3D;
          real mult1D3F#2 = RMul(coeff1D2D,prod1CB5);
          real mult1D40#1 = RMul(coeff1D2C,prod1CA2);
          real sum1D41#1 = RAdd(mult1D40,mult1CEE);
          real sum1D42#1 = RAdd(mult1D3F,sum1D41);
          real intermediate1D43#1 = sum1D42;
          real mult1D44#1 = RMul(coeff1D33,prod1CB5);
          real mult1D45#2 = RMul(coeff1D14,prod1CB4);
          real mult1D46#1 = RMul(coeff1D14,prod1CA2);
          real sum1D47#2 = RAdd(mult1D46,mult1CE9);
          real sum1D48#1 = RAdd(mult1D45,sum1D47);
          real sum1D49#1 = RAdd(mult1D44,sum1D48);
          real intermediate1D4A#1 = sum1D49;
          real mult1D4B#1 = RMul(coeff1D2C,prod1CB4);
          real sum1D4C#1 = RAdd(mult1D4B,mult1CE0);
          real sum1D4D#1 = RAdd(mult1D3F,sum1D4C);
          real intermediate1D4E#1 = sum1D4D;
          real mult1D4F#2 = RMul(coeff1D2D,prod1CB0);
          real mult1D50#1 = RMul(coeff1D2C,prod1C9E);
          real sum1D51#1 = RAdd(mult1D50,mult1CEF);
          real sum1D52#1 = RAdd(mult1D4F,sum1D51);
          real intermediate1D53#1 = sum1D52;
          real mult1D54#1 = RMul(coeff1D33,prod1CB0);
          real mult1D55#2 = RMul(coeff1D14,prod1CAA);
          real mult1D56#1 = RMul(coeff1D14,prod1C9E);
          real sum1D57#2 = RAdd(mult1D56,mult1CEC);
          real sum1D58#1 = RAdd(mult1D55,sum1D57);
          real sum1D59#1 = RAdd(mult1D54,sum1D58);
          real intermediate1D5A#1 = sum1D59;
          real mult1D5B#1 = RMul(coeff1D2C,prod1CAA);
          real sum1D5C#1 = RAdd(mult1D5B,mult1CE6);
          real sum1D5D#1 = RAdd(mult1D4F,sum1D5C);
          real intermediate1D5E#1 = sum1D5D;
          real coeff1D5F#9 = -0.426666666667e2;
          real coeff1D60#15 = -0.128e3;
          real coeff1D61#12 = 0.96e2;
          real coeff1D62#3 = -0.256e3;
          real coeff1D63#7 = 0.192e3;
          real coeff1D64#6 = -0.693333333333e2;
          real coeff1D65#3 = 0.16e2;
          real mult1D66#1 = RMul(coeff1D65,prod1CCC);
          real mult1D67#1 = RMul(coeff1D64,prod1CCB);
          real mult1D68#1 = RMul(coeff1D61,prod1CCA);
          real mult1D69#2 = RMul(coeff1D5F,prod1CC9);
          real mult1D6A#2 = RMul(coeff1D64,prod1CC5);
          real mult1D6B#1 = RMul(coeff1D63,prod1CC4);
          real mult1D6C#2 = RMul(coeff1D60,prod1CC3);
          real mult1D6D#1 = RMul(coeff1D61,prod1CC0);
          real mult1D6E#4 = RMul(coeff1D60,prod1CBF);
          real mult1D6F#2 = RMul(coeff1D5F,prod1CBC);
          real mult1D70#2 = RMul(coeff1D64,prod1CB5);
          real mult1D71#1 = RMul(coeff1D63,prod1CB4);
          real mult1D72#2 = RMul(coeff1D60,prod1CB3);
          real mult1D73#3 = RMul(coeff1D63,prod1CAE);
          real mult1D74#2 = RMul(coeff1D62,prod1CAC);
          real mult1D75#4 = RMul(coeff1D60,prod1CA9);
          real mult1D76#1 = RMul(coeff1D61,prod1CA2);
          real mult1D77#4 = RMul(coeff1D60,prod1CA1);
          real mult1D78#4 = RMul(coeff1D60,prod1C9C);
          real mult1D79#2 = RMul(coeff1D5F,prod1C93);
          real sum1D7A#1 = RAdd(mult1D78,mult1D79);
          real sum1D7B#1 = RAdd(mult1D77,sum1D7A);
          real sum1D7C#1 = RAdd(mult1D76,sum1D7B);
          real sum1D7D#1 = RAdd(mult1D75,sum1D7C);
          real sum1D7E#1 = RAdd(mult1D74,sum1D7D);
          real sum1D7F#1 = RAdd(mult1D73,sum1D7E);
          real sum1D80#1 = RAdd(mult1D72,sum1D7F);
          real sum1D81#1 = RAdd(mult1D71,sum1D80);
          real sum1D82#1 = RAdd(mult1D70,sum1D81);
          real sum1D83#1 = RAdd(mult1D6F,sum1D82);
          real sum1D84#1 = RAdd(mult1D6E,sum1D83);
          real sum1D85#1 = RAdd(mult1D6D,sum1D84);
          real sum1D86#1 = RAdd(mult1D6C,sum1D85);
          real sum1D87#1 = RAdd(mult1D6B,sum1D86);
          real sum1D88#1 = RAdd(mult1D6A,sum1D87);
          real sum1D89#1 = RAdd(mult1D69,sum1D88);
          real sum1D8A#1 = RAdd(mult1D68,sum1D89);
          real sum1D8B#1 = RAdd(mult1D67,sum1D8A);
          real sum1D8C#1 = RAdd(mult1D66,sum1D8B);
          real intermediate1D8D#1 = sum1D8C;
          real coeff1D8E#6 = -0.144e3;
          real coeff1D8F#3 = 0.28e2;
          real coeff1D90#3 = 0.76e2;
          real coeff1D91#3 = -0.12e2;
          real mult1D92#1 = RMul(coeff1D91,prod1CCC);
          real mult1D93#1 = RMul(coeff1D90,prod1CCB);
          real mult1D94#1 = RMul(coeff1D60,prod1CCA);
          real mult1D95#1 = RMul(coeff1C96,prod1CC9);
          real mult1D96#2 = RMul(coeff1D8F,prod1CC5);
          real mult1D97#1 = RMul(coeff1D8E,prod1CC4);
          real mult1D98#2 = RMul(coeff1C9A,prod1CC3);
          real mult1D99#2 = RMul(coeff1D8F,prod1CB5);
          real mult1D9A#1 = RMul(coeff1D8E,prod1CB4);
          real mult1D9B#2 = RMul(coeff1C9A,prod1CB3);
          real mult1D9C#6 = RMul(coeff1D2C,prod1CAE);
          real sum1D9D#1 = RAdd(mult1CE3,sum1D47);
          real sum1D9E#1 = RAdd(mult1D9C,sum1D9D);
          real sum1D9F#1 = RAdd(mult1D9B,sum1D9E);
          real sum1DA0#1 = RAdd(mult1D9A,sum1D9F);
          real sum1DA1#1 = RAdd(mult1D99,sum1DA0);
          real sum1DA2#1 = RAdd(mult1CD9,sum1DA1);
          real sum1DA3#1 = RAdd(mult1D36,sum1DA2);
          real sum1DA4#1 = RAdd(mult1D98,sum1DA3);
          real sum1DA5#1 = RAdd(mult1D97,sum1DA4);
          real sum1DA6#1 = RAdd(mult1D96,sum1DA5);
          real sum1DA7#1 = RAdd(mult1D95,sum1DA6);
          real sum1DA8#1 = RAdd(mult1D94,sum1DA7);
          real sum1DA9#1 = RAdd(mult1D93,sum1DA8);
          real sum1DAA#1 = RAdd(mult1D92,sum1DA9);
          real intermediate1DAB#1 = sum1DAA;
          real coeff1DAC#7 = 0.32e2;
          real coeff1DAD#3 = -0.533333333333e1;
          real coeff1DAE#3 = 0.746666666667e2;
          real coeff1DAF#3 = -0.373333333333e2;
          real mult1DB0#1 = RMul(coeff1D2D,prod1CCC);
          real mult1DB1#1 = RMul(coeff1DAF,prod1CCB);
          real mult1DB2#1 = RMul(coeff1DAE,prod1CCA);
          real mult1DB3#2 = RMul(coeff1DAD,prod1CC5);
          real mult1DB4#2 = RMul(coeff1DAC,prod1CC4);
          real mult1DB5#2 = RMul(coeff1D5F,prod1CC3);
          real mult1DB6#2 = RMul(coeff1DAD,prod1CB5);
          real mult1DB7#2 = RMul(coeff1DAC,prod1CB4);
          real mult1DB8#2 = RMul(coeff1D5F,prod1CB3);
          real sum1DB9#1 = RAdd(mult1DB7,mult1DB8);
          real sum1DBA#1 = RAdd(mult1DB6,sum1DB9);
          real sum1DBB#1 = RAdd(mult1DB5,sum1DBA);
          real sum1DBC#1 = RAdd(mult1DB4,sum1DBB);
          real sum1DBD#1 = RAdd(mult1DB3,sum1DBC);
          real sum1DBE#1 = RAdd(mult1D69,sum1DBD);
          real sum1DBF#1 = RAdd(mult1DB2,sum1DBE);
          real sum1DC0#1 = RAdd(mult1DB1,sum1DBF);
          real sum1DC1#1 = RAdd(mult1DB0,sum1DC0);
          real intermediate1DC2#1 = sum1DC1;
          real mult1DC3#1 = RMul(coeff1D65,prod1CC6);
          real mult1DC4#1 = RMul(coeff1D61,prod1CC4);
          real mult1DC5#1 = RMul(coeff1D64,prod1CC1);
          real mult1DC6#1 = RMul(coeff1D63,prod1CC0);
          real mult1DC7#1 = RMul(coeff1D61,prod1CBD);
          real mult1DC8#2 = RMul(coeff1D60,prod1CBC);
          real mult1DC9#2 = RMul(coeff1D5F,prod1CBA);
          real mult1DCA#2 = RMul(coeff1D64,prod1CB0);
          real mult1DCB#4 = RMul(coeff1D60,prod1CAC);
          real mult1DCC#1 = RMul(coeff1D63,prod1CAA);
          real mult1DCD#2 = RMul(coeff1D62,prod1CA9);
          real mult1DCE#2 = RMul(coeff1D60,prod1CA7);
          real mult1DCF#1 = RMul(coeff1D61,prod1C9E);
          real mult1DD0#4 = RMul(coeff1D60,prod1C99);
          real mult1DD1#2 = RMul(coeff1D5F,prod1C90);
          real sum1DD2#1 = RAdd(mult1DD0,mult1DD1);
          real sum1DD3#1 = RAdd(mult1D78,sum1DD2);
          real sum1DD4#1 = RAdd(mult1DCF,sum1DD3);
          real sum1DD5#1 = RAdd(mult1DCE,sum1DD4);
          real sum1DD6#1 = RAdd(mult1DCD,sum1DD5);
          real sum1DD7#1 = RAdd(mult1DCC,sum1DD6);
          real sum1DD8#1 = RAdd(mult1DCB,sum1DD7);
          real sum1DD9#1 = RAdd(mult1D73,sum1DD8);
          real sum1DDA#1 = RAdd(mult1DCA,sum1DD9);
          real sum1DDB#1 = RAdd(mult1DC9,sum1DDA);
          real sum1DDC#1 = RAdd(mult1DC8,sum1DDB);
          real sum1DDD#1 = RAdd(mult1DC7,sum1DDC);
          real sum1DDE#1 = RAdd(mult1D6E,sum1DDD);
          real sum1DDF#1 = RAdd(mult1DC6,sum1DDE);
          real sum1DE0#1 = RAdd(mult1DC5,sum1DDF);
          real sum1DE1#1 = RAdd(mult1DB5,sum1DE0);
          real sum1DE2#1 = RAdd(mult1DC4,sum1DE1);
          real sum1DE3#1 = RAdd(mult1D6A,sum1DE2);
          real sum1DE4#1 = RAdd(mult1DC3,sum1DE3);
          real intermediate1DE5#1 = sum1DE4;
          real mult1DE6#1 = RMul(coeff1D91,prod1CC6);
          real mult1DE7#1 = RMul(coeff1D90,prod1CC1);
          real mult1DE8#1 = RMul(coeff1D8E,prod1CC0);
          real mult1DE9#1 = RMul(coeff1D60,prod1CBD);
          real mult1DEA#2 = RMul(coeff1C9A,prod1CBC);
          real mult1DEB#1 = RMul(coeff1C96,prod1CBA);
          real mult1DEC#2 = RMul(coeff1D8F,prod1CB0);
          real mult1DED#1 = RMul(coeff1D8E,prod1CAA);
          real mult1DEE#2 = RMul(coeff1C9A,prod1CA7);
          real sum1DEF#1 = RAdd(mult1DEE,sum1D57);
          real sum1DF0#1 = RAdd(mult1CE5,sum1DEF);
          real sum1DF1#1 = RAdd(mult1DED,sum1DF0);
          real sum1DF2#1 = RAdd(mult1D9C,sum1DF1);
          real sum1DF3#1 = RAdd(mult1DEC,sum1DF2);
          real sum1DF4#1 = RAdd(mult1DEB,sum1DF3);
          real sum1DF5#1 = RAdd(mult1DEA,sum1DF4);
          real sum1DF6#1 = RAdd(mult1DE9,sum1DF5);
          real sum1DF7#1 = RAdd(mult1CD9,sum1DF6);
          real sum1DF8#1 = RAdd(mult1DE8,sum1DF7);
          real sum1DF9#1 = RAdd(mult1DE7,sum1DF8);
          real sum1DFA#1 = RAdd(mult1D35,sum1DF9);
          real sum1DFB#1 = RAdd(mult1D96,sum1DFA);
          real sum1DFC#1 = RAdd(mult1DE6,sum1DFB);
          real intermediate1DFD#1 = sum1DFC;
          real mult1DFE#1 = RMul(coeff1D2D,prod1CC6);
          real mult1DFF#1 = RMul(coeff1DAF,prod1CC1);
          real mult1E00#2 = RMul(coeff1DAC,prod1CC0);
          real mult1E01#1 = RMul(coeff1DAE,prod1CBD);
          real mult1E02#2 = RMul(coeff1DAD,prod1CB0);
          real mult1E03#2 = RMul(coeff1DAC,prod1CAA);
          real mult1E04#2 = RMul(coeff1D5F,prod1CA7);
          real sum1E05#1 = RAdd(mult1E03,mult1E04);
          real sum1E06#1 = RAdd(mult1E02,sum1E05);
          real sum1E07#1 = RAdd(mult1DC9,sum1E06);
          real sum1E08#1 = RAdd(mult1D6F,sum1E07);
          real sum1E09#1 = RAdd(mult1E01,sum1E08);
          real sum1E0A#1 = RAdd(mult1E00,sum1E09);
          real sum1E0B#1 = RAdd(mult1DFF,sum1E0A);
          real sum1E0C#1 = RAdd(mult1DB3,sum1E0B);
          real sum1E0D#1 = RAdd(mult1DFE,sum1E0C);
          real intermediate1E0E#1 = sum1E0D;
          real mult1E0F#1 = RMul(coeff1D65,prod1CB7);
          real mult1E10#1 = RMul(coeff1D61,prod1CB4);
          real mult1E11#1 = RMul(coeff1D61,prod1CAA);
          real mult1E12#1 = RMul(coeff1D64,prod1CA4);
          real mult1E13#1 = RMul(coeff1D63,prod1CA2);
          real mult1E14#1 = RMul(coeff1D63,prod1C9E);
          real mult1E15#2 = RMul(coeff1D62,prod1C9C);
          real mult1E16#1 = RMul(coeff1D61,prod1C95);
          real mult1E17#2 = RMul(coeff1D60,prod1C93);
          real mult1E18#2 = RMul(coeff1D60,prod1C90);
          real mult1E19#2 = RMul(coeff1D5F,prod1C8C);
          real sum1E1A#1 = RAdd(mult1E18,mult1E19);
          real sum1E1B#1 = RAdd(mult1E17,sum1E1A);
          real sum1E1C#1 = RAdd(mult1E16,sum1E1B);
          real sum1E1D#1 = RAdd(mult1DD0,sum1E1C);
          real sum1E1E#1 = RAdd(mult1E15,sum1E1D);
          real sum1E1F#1 = RAdd(mult1E14,sum1E1E);
          real sum1E20#1 = RAdd(mult1D77,sum1E1F);
          real sum1E21#1 = RAdd(mult1E13,sum1E20);
          real sum1E22#1 = RAdd(mult1E12,sum1E21);
          real sum1E23#1 = RAdd(mult1E04,sum1E22);
          real sum1E24#1 = RAdd(mult1D75,sum1E23);
          real sum1E25#1 = RAdd(mult1E11,sum1E24);
          real sum1E26#1 = RAdd(mult1DCB,sum1E25);
          real sum1E27#1 = RAdd(mult1D73,sum1E26);
          real sum1E28#1 = RAdd(mult1DCA,sum1E27);
          real sum1E29#1 = RAdd(mult1DB8,sum1E28);
          real sum1E2A#1 = RAdd(mult1E10,sum1E29);
          real sum1E2B#1 = RAdd(mult1D70,sum1E2A);
          real sum1E2C#1 = RAdd(mult1E0F,sum1E2B);
          real intermediate1E2D#1 = sum1E2C;
          real mult1E2E#1 = RMul(coeff1D91,prod1CB7);
          real mult1E2F#1 = RMul(coeff1D90,prod1CA4);
          real mult1E30#1 = RMul(coeff1D8E,prod1CA2);
          real mult1E31#1 = RMul(coeff1D8E,prod1C9E);
          real mult1E32#1 = RMul(coeff1D60,prod1C95);
          real mult1E33#2 = RMul(coeff1C9A,prod1C93);
          real mult1E34#2 = RMul(coeff1C9A,prod1C90);
          real mult1E35#1 = RMul(coeff1C96,prod1C8C);
          real sum1E36#1 = RAdd(mult1E34,mult1E35);
          real sum1E37#1 = RAdd(mult1E33,sum1E36);
          real sum1E38#1 = RAdd(mult1E32,sum1E37);
          real sum1E39#1 = RAdd(mult1CEC,sum1E38);
          real sum1E3A#1 = RAdd(mult1CEB,sum1E39);
          real sum1E3B#1 = RAdd(mult1E31,sum1E3A);
          real sum1E3C#1 = RAdd(mult1CE9,sum1E3B);
          real sum1E3D#1 = RAdd(mult1E30,sum1E3C);
          real sum1E3E#1 = RAdd(mult1E2F,sum1E3D);
          real sum1E3F#1 = RAdd(mult1D55,sum1E3E);
          real sum1E40#1 = RAdd(mult1D9C,sum1E3F);
          real sum1E41#1 = RAdd(mult1DEC,sum1E40);
          real sum1E42#1 = RAdd(mult1D45,sum1E41);
          real sum1E43#1 = RAdd(mult1D99,sum1E42);
          real sum1E44#1 = RAdd(mult1E2E,sum1E43);
          real intermediate1E45#1 = sum1E44;
          real mult1E46#1 = RMul(coeff1D2D,prod1CB7);
          real mult1E47#1 = RMul(coeff1DAF,prod1CA4);
          real mult1E48#2 = RMul(coeff1DAC,prod1CA2);
          real mult1E49#2 = RMul(coeff1DAC,prod1C9E);
          real mult1E4A#1 = RMul(coeff1DAE,prod1C95);
          real sum1E4B#1 = RAdd(mult1DD1,mult1E19);
          real sum1E4C#1 = RAdd(mult1D79,sum1E4B);
          real sum1E4D#1 = RAdd(mult1E4A,sum1E4C);
          real sum1E4E#1 = RAdd(mult1E49,sum1E4D);
          real sum1E4F#1 = RAdd(mult1E48,sum1E4E);
          real sum1E50#1 = RAdd(mult1E47,sum1E4F);
          real sum1E51#1 = RAdd(mult1E02,sum1E50);
          real sum1E52#1 = RAdd(mult1DB6,sum1E51);
          real sum1E53#1 = RAdd(mult1E46,sum1E52);
          real intermediate1E54#1 = sum1E53;
          real sum1E55#1 = RAdd(mult1D9C,mult1CEB);
          real intermediate1E56#1 = sum1E55;
          real sum1E57#1 = RAdd(mult1D9C,mult1CE5);
          real intermediate1E58#1 = sum1E57;
          real sum1E59#1 = RAdd(mult1D9C,mult1CE3);
          real intermediate1E5A#1 = sum1E59;
          real coeff1E5B#7 = 0.256e3;
          real coeff1E5C#7 = -0.224e3;
          real mult1E5D#1 = RMul(coeff1D61,prod1CC5);
          real mult1E5E#1 = RMul(coeff1E5C,prod1CC4);
          real mult1E5F#1 = RMul(coeff1E5C,prod1CC0);
          real mult1E60#1 = RMul(coeff1E5B,prod1CBF);
          real mult1E61#3 = RMul(coeff1E5C,prod1CAE);
          real mult1E62#2 = RMul(coeff1E5B,prod1CAC);
          real mult1E63#2 = RMul(coeff1E5B,prod1CA9);
          real sum1E64#1 = RAdd(mult1E63,mult1CEB);
          real sum1E65#1 = RAdd(mult1E62,sum1E64);
          real sum1E66#1 = RAdd(mult1E61,sum1E65);
          real sum1E67#1 = RAdd(mult1DEA,sum1E66);
          real sum1E68#1 = RAdd(mult1E60,sum1E67);
          real sum1E69#1 = RAdd(mult1E5F,sum1E68);
          real sum1E6A#1 = RAdd(mult1D98,sum1E69);
          real sum1E6B#1 = RAdd(mult1E5E,sum1E6A);
          real sum1E6C#1 = RAdd(mult1E5D,sum1E6B);
          real intermediate1E6D#1 = sum1E6C;
          real coeff1E6E#6 = 0.160e3;
          real mult1E6F#2 = RMul(coeff1D2C,prod1CC5);
          real mult1E70#1 = RMul(coeff1E6E,prod1CC0);
          real mult1E71#6 = RMul(coeff1DAC,prod1CAE);
          real sum1E72#1 = RAdd(mult1E71,mult1D75);
          real sum1E73#1 = RAdd(mult1DC8,sum1E72);
          real sum1E74#1 = RAdd(mult1D6E,sum1E73);
          real sum1E75#1 = RAdd(mult1E70,sum1E74);
          real sum1E76#1 = RAdd(mult1DB4,sum1E75);
          real sum1E77#1 = RAdd(mult1E6F,sum1E76);
          real intermediate1E78#1 = sum1E77;
          real mult1E79#1 = RMul(coeff1E6E,prod1CC4);
          real sum1E7A#1 = RAdd(mult1E71,mult1DCB);
          real sum1E7B#1 = RAdd(mult1D6E,sum1E7A);
          real sum1E7C#1 = RAdd(mult1E00,sum1E7B);
          real sum1E7D#1 = RAdd(mult1D6C,sum1E7C);
          real sum1E7E#1 = RAdd(mult1E79,sum1E7D);
          real sum1E7F#1 = RAdd(mult1E6F,sum1E7E);
          real intermediate1E80#1 = sum1E7F;
          real mult1E81#1 = RMul(coeff1D61,prod1CB5);
          real mult1E82#1 = RMul(coeff1E5C,prod1CB4);
          real mult1E83#1 = RMul(coeff1E5C,prod1CA2);
          real mult1E84#1 = RMul(coeff1E5B,prod1CA1);
          real mult1E85#2 = RMul(coeff1E5B,prod1C9C);
          real sum1E86#1 = RAdd(mult1E85,mult1E33);
          real sum1E87#1 = RAdd(mult1E84,sum1E86);
          real sum1E88#1 = RAdd(mult1E83,sum1E87);
          real sum1E89#1 = RAdd(mult1CE5,sum1E88);
          real sum1E8A#1 = RAdd(mult1E62,sum1E89);
          real sum1E8B#1 = RAdd(mult1E61,sum1E8A);
          real sum1E8C#1 = RAdd(mult1D9B,sum1E8B);
          real sum1E8D#1 = RAdd(mult1E82,sum1E8C);
          real sum1E8E#1 = RAdd(mult1E81,sum1E8D);
          real intermediate1E8F#1 = sum1E8E;
          real mult1E90#2 = RMul(coeff1D2C,prod1CB5);
          real mult1E91#1 = RMul(coeff1E6E,prod1CA2);
          real sum1E92#1 = RAdd(mult1D78,mult1E17);
          real sum1E93#1 = RAdd(mult1D77,sum1E92);
          real sum1E94#1 = RAdd(mult1E91,sum1E93);
          real sum1E95#1 = RAdd(mult1E71,sum1E94);
          real sum1E96#1 = RAdd(mult1DB7,sum1E95);
          real sum1E97#1 = RAdd(mult1E90,sum1E96);
          real intermediate1E98#1 = sum1E97;
          real mult1E99#1 = RMul(coeff1E6E,prod1CB4);
          real sum1E9A#1 = RAdd(mult1E48,mult1D77);
          real sum1E9B#1 = RAdd(mult1DCB,sum1E9A);
          real sum1E9C#1 = RAdd(mult1E71,sum1E9B);
          real sum1E9D#1 = RAdd(mult1D72,sum1E9C);
          real sum1E9E#1 = RAdd(mult1E99,sum1E9D);
          real sum1E9F#1 = RAdd(mult1E90,sum1E9E);
          real intermediate1EA0#1 = sum1E9F;
          real mult1EA1#1 = RMul(coeff1D61,prod1CB0);
          real mult1EA2#1 = RMul(coeff1E5C,prod1CAA);
          real mult1EA3#1 = RMul(coeff1E5C,prod1C9E);
          real mult1EA4#1 = RMul(coeff1E5B,prod1C99);
          real sum1EA5#1 = RAdd(mult1EA4,mult1E34);
          real sum1EA6#1 = RAdd(mult1E85,sum1EA5);
          real sum1EA7#1 = RAdd(mult1EA3,sum1EA6);
          real sum1EA8#1 = RAdd(mult1DEE,sum1EA7);
          real sum1EA9#1 = RAdd(mult1E63,sum1EA8);
          real sum1EAA#1 = RAdd(mult1EA2,sum1EA9);
          real sum1EAB#1 = RAdd(mult1CE3,sum1EAA);
          real sum1EAC#1 = RAdd(mult1E61,sum1EAB);
          real sum1EAD#1 = RAdd(mult1EA1,sum1EAC);
          real intermediate1EAE#1 = sum1EAD;
          real mult1EAF#2 = RMul(coeff1D2C,prod1CB0);
          real mult1EB0#1 = RMul(coeff1E6E,prod1C9E);
          real sum1EB1#1 = RAdd(mult1DD0,mult1E18);
          real sum1EB2#1 = RAdd(mult1D78,sum1EB1);
          real sum1EB3#1 = RAdd(mult1EB0,sum1EB2);
          real sum1EB4#1 = RAdd(mult1E03,sum1EB3);
          real sum1EB5#1 = RAdd(mult1E71,sum1EB4);
          real sum1EB6#1 = RAdd(mult1EAF,sum1EB5);
          real intermediate1EB7#1 = sum1EB6;
          real mult1EB8#1 = RMul(coeff1E6E,prod1CAA);
          real sum1EB9#1 = RAdd(mult1E49,mult1DD0);
          real sum1EBA#1 = RAdd(mult1DCE,sum1EB9);
          real sum1EBB#1 = RAdd(mult1D75,sum1EBA);
          real sum1EBC#1 = RAdd(mult1EB8,sum1EBB);
          real sum1EBD#1 = RAdd(mult1E71,sum1EBC);
          real sum1EBE#1 = RAdd(mult1EAF,sum1EBD);
          real intermediate1EBF#1 = sum1EBE;
          real mult1EC0#1 = RMul(coeff1E5B,prod1CAE);
          real sum1EC1#1 = RAdd(mult1DCD,mult1E15);
          real sum1EC2#1 = RAdd(mult1D74,sum1EC1);
          real sum1EC3#1 = RAdd(mult1EC0,sum1EC2);
          real intermediate1EC4#1 = sum1EC3;
          tensor[35] intermediateCons1EC5#1 = <tensor[35]>[intermediate1D13,intermediate1D1D,intermediate1D24,intermediate1D2B,intermediate1D32,intermediate1D3A,intermediate1D3E,intermediate1D43,intermediate1D4A,intermediate1D4E,intermediate1D53,intermediate1D5A,intermediate1D5E,intermediate1D8D,intermediate1DAB,intermediate1DC2,intermediate1DE5,intermediate1DFD,intermediate1E0E,intermediate1E2D,intermediate1E45,intermediate1E54,intermediate1E56,intermediate1E58,intermediate1E5A,intermediate1E6D,intermediate1E78,intermediate1E80,intermediate1E8F,intermediate1E98,intermediate1EA0,intermediate1EAE,intermediate1EB7,intermediate1EBF,intermediate1EC4];
          tensor[35] basisResult1C81#1 = intermediateCons1EC5;
          real compositionl210B#1 = VDot<35>(femDofs1B65,basisResult1C81);
          real result210E#1 = compositionl210B;
          real varAcc2111#3 = VIndex<3,0>(refPos1A89);
          real varAcc2112#3 = VIndex<3,1>(refPos1A89);
          real varAcc2113#3 = VIndex<3,2>(refPos1A89);
          real coeff2114#3 = 0.426666666667e2;
          real iden2115#7 = varAcc2111;
          real prod22116#4 = RMul(iden2115,varAcc2111);
          real prod32117#1 = RMul(prod22116,varAcc2111);
          real one2118#18 = 0.1e1;
          real prod2119#4 = RMul(one2118,one2118);
          real prod211A#6 = RMul(prod32117,prod2119);
          real coeff211B#9 = 0.128e3;
          real iden211C#4 = varAcc2112;
          real prod211D#3 = RMul(iden211C,one2118);
          real prod211E#7 = RMul(prod22116,prod211D);
          real iden211F#4 = varAcc2113;
          real prod2120#3 = RMul(one2118,iden211F);
          real prod2121#7 = RMul(prod22116,prod2120);
          real coeff2122#3 = -0.80e2;
          real prod2123#13 = RMul(prod22116,prod2119);
          real prod22124#3 = RMul(iden211C,varAcc2112);
          real prod2125#2 = RMul(prod22124,one2118);
          real prod2126#7 = RMul(iden2115,prod2125);
          real coeff2127#13 = 0.256e3;
          real prod2128#2 = RMul(iden211C,iden211F);
          real prod2129#4 = RMul(iden2115,prod2128);
          real coeff212A#3 = -0.160e3;
          real prod212B#12 = RMul(iden2115,prod211D);
          real prod2212C#3 = RMul(iden211F,varAcc2113);
          real prod212D#2 = RMul(one2118,prod2212C);
          real prod212E#7 = RMul(iden2115,prod212D);
          real prod212F#12 = RMul(iden2115,prod2120);
          real coeff2130#3 = 0.466666666667e2;
          real prod2131#12 = RMul(iden2115,prod2119);
          real prod32132#1 = RMul(prod22124,varAcc2112);
          real prod2133#1 = RMul(prod32132,one2118);
          real prod2134#6 = RMul(one2118,prod2133);
          real prod2135#1 = RMul(prod22124,iden211F);
          real prod2136#7 = RMul(one2118,prod2135);
          real prod2137#13 = RMul(one2118,prod2125);
          real prod2138#1 = RMul(iden211C,prod2212C);
          real prod2139#7 = RMul(one2118,prod2138);
          real prod213A#12 = RMul(one2118,prod2128);
          real prod213B#12 = RMul(one2118,prod211D);
          real prod3213C#1 = RMul(prod2212C,varAcc2113);
          real prod213D#1 = RMul(one2118,prod3213C);
          real prod213E#6 = RMul(one2118,prod213D);
          real prod213F#13 = RMul(one2118,prod212D);
          real prod2140#12 = RMul(one2118,prod2120);
          real coeff2141#1 = -0.833333333333e1;
          real prod2142#5 = RMul(one2118,prod2119);
          real mult2143#1 = RMul(coeff2141,prod2142);
          real mult2144#1 = RMul(coeff2130,prod2140);
          real mult2145#1 = RMul(coeff2122,prod213F);
          real mult2146#3 = RMul(coeff2114,prod213E);
          real mult2147#1 = RMul(coeff2130,prod213B);
          real mult2148#1 = RMul(coeff212A,prod213A);
          real mult2149#6 = RMul(coeff211B,prod2139);
          real mult214A#1 = RMul(coeff2122,prod2137);
          real mult214B#7 = RMul(coeff211B,prod2136);
          real mult214C#3 = RMul(coeff2114,prod2134);
          real mult214D#1 = RMul(coeff2130,prod2131);
          real mult214E#1 = RMul(coeff212A,prod212F);
          real mult214F#5 = RMul(coeff211B,prod212E);
          real mult2150#1 = RMul(coeff212A,prod212B);
          real mult2151#10 = RMul(coeff2127,prod2129);
          real mult2152#5 = RMul(coeff211B,prod2126);
          real mult2153#1 = RMul(coeff2122,prod2123);
          real mult2154#6 = RMul(coeff211B,prod2121);
          real mult2155#6 = RMul(coeff211B,prod211E);
          real mult2156#3 = RMul(coeff2114,prod211A);
          real sum2157#1 = RAdd(mult2155,mult2156);
          real sum2158#1 = RAdd(mult2154,sum2157);
          real sum2159#1 = RAdd(mult2153,sum2158);
          real sum215A#1 = RAdd(mult2152,sum2159);
          real sum215B#1 = RAdd(mult2151,sum215A);
          real sum215C#1 = RAdd(mult2150,sum215B);
          real sum215D#1 = RAdd(mult214F,sum215C);
          real sum215E#1 = RAdd(mult214E,sum215D);
          real sum215F#1 = RAdd(mult214D,sum215E);
          real sum2160#1 = RAdd(mult214C,sum215F);
          real sum2161#1 = RAdd(mult214B,sum2160);
          real sum2162#1 = RAdd(mult214A,sum2161);
          real sum2163#1 = RAdd(mult2149,sum2162);
          real sum2164#1 = RAdd(mult2148,sum2163);
          real sum2165#1 = RAdd(mult2147,sum2164);
          real sum2166#1 = RAdd(mult2146,sum2165);
          real sum2167#1 = RAdd(mult2145,sum2166);
          real sum2168#1 = RAdd(mult2144,sum2167);
          real sum2169#3 = RAdd(mult2143,sum2168);
          real intermediate216A#1 = sum2169;
          real coeff216B#3 = -0.48e2;
          real coeff216C#3 = 0.146666666667e2;
          real coeff216D#1 = -0.1e1;
          real mult216E#3 = RMul(coeff216D,prod2142);
          real mult216F#1 = RMul(coeff216C,prod2131);
          real mult2170#1 = RMul(coeff216B,prod2123);
          real sum2171#1 = RAdd(mult2170,mult2156);
          real sum2172#1 = RAdd(mult216F,sum2171);
          real sum2173#1 = RAdd(mult216E,sum2172);
          real intermediate2174#1 = sum2173;
          real basisEval2175#15 = 0.e0;
          real coeff2176#3 = -0.64e2;
          real coeff2177#4 = 0.533333333333e1;
          real mult2178#3 = RMul(coeff2177,prod2140);
          real mult2179#2 = RMul(coeff2176,prod212F);
          real sum217A#1 = RAdd(mult2179,mult2154);
          real sum217B#1 = RAdd(mult2178,sum217A);
          real intermediate217C#1 = sum217B;
          real coeff217D#9 = -0.32e2;
          real coeff217E#3 = -0.16e2;
          real coeff217F#3 = 0.4e1;
          real mult2180#2 = RMul(coeff217F,prod2140);
          real mult2181#4 = RMul(coeff217E,prod213F);
          real mult2182#6 = RMul(coeff217D,prod212F);
          real sum2183#3 = RAdd(mult2182,mult214F);
          real sum2184#1 = RAdd(mult2181,sum2183);
          real sum2185#1 = RAdd(mult2180,sum2184);
          real intermediate2186#1 = sum2185;
          real mult2187#1 = RMul(coeff217D,prod213F);
          real sum2188#1 = RAdd(mult2187,mult2146);
          real sum2189#2 = RAdd(mult2178,sum2188);
          real intermediate218A#1 = sum2189;
          real mult218B#3 = RMul(coeff2177,prod213B);
          real mult218C#2 = RMul(coeff2176,prod212B);
          real sum218D#1 = RAdd(mult218C,mult2155);
          real sum218E#1 = RAdd(mult218B,sum218D);
          real intermediate218F#1 = sum218E;
          real mult2190#2 = RMul(coeff217F,prod213B);
          real mult2191#4 = RMul(coeff217E,prod2137);
          real mult2192#6 = RMul(coeff217D,prod212B);
          real sum2193#3 = RAdd(mult2192,mult2152);
          real sum2194#1 = RAdd(mult2191,sum2193);
          real sum2195#1 = RAdd(mult2190,sum2194);
          real intermediate2196#1 = sum2195;
          real mult2197#1 = RMul(coeff217D,prod2137);
          real sum2198#1 = RAdd(mult2197,mult214C);
          real sum2199#2 = RAdd(mult218B,sum2198);
          real intermediate219A#1 = sum2199;
          real coeff219B#9 = -0.128e3;
          real coeff219C#7 = -0.256e3;
          real coeff219D#6 = 0.192e3;
          real coeff219E#3 = -0.693333333333e2;
          real mult219F#3 = RMul(coeff219E,prod2140);
          real mult21A0#1 = RMul(coeff219D,prod213F);
          real mult21A1#3 = RMul(coeff219B,prod213E);
          real mult21A2#3 = RMul(coeff219D,prod213A);
          real mult21A3#5 = RMul(coeff219C,prod2139);
          real mult21A4#5 = RMul(coeff219B,prod2136);
          real mult21A5#3 = RMul(coeff219D,prod212F);
          real mult21A6#5 = RMul(coeff219C,prod212E);
          real mult21A7#9 = RMul(coeff219C,prod2129);
          real mult21A8#5 = RMul(coeff219B,prod2121);
          real sum21A9#1 = RAdd(mult21A7,mult21A8);
          real sum21AA#1 = RAdd(mult21A6,sum21A9);
          real sum21AB#1 = RAdd(mult21A5,sum21AA);
          real sum21AC#1 = RAdd(mult21A4,sum21AB);
          real sum21AD#1 = RAdd(mult21A3,sum21AC);
          real sum21AE#1 = RAdd(mult21A2,sum21AD);
          real sum21AF#1 = RAdd(mult21A1,sum21AE);
          real sum21B0#1 = RAdd(mult21A0,sum21AF);
          real sum21B1#2 = RAdd(mult219F,sum21B0);
          real intermediate21B2#1 = sum21B1;
          real coeff21B3#3 = -0.144e3;
          real coeff21B4#3 = 0.28e2;
          real mult21B5#3 = RMul(coeff21B4,prod2140);
          real mult21B6#1 = RMul(coeff21B3,prod213F);
          real mult21B7#3 = RMul(coeff211B,prod213E);
          real mult21B8#7 = RMul(coeff217D,prod213A);
          real sum21B9#1 = RAdd(mult2149,sum2183);
          real sum21BA#1 = RAdd(mult21B8,sum21B9);
          real sum21BB#1 = RAdd(mult21B7,sum21BA);
          real sum21BC#1 = RAdd(mult21B6,sum21BB);
          real sum21BD#2 = RAdd(mult21B5,sum21BC);
          real intermediate21BE#1 = sum21BD;
          real coeff21BF#3 = -0.426666666667e2;
          real coeff21C0#6 = 0.32e2;
          real coeff21C1#3 = -0.533333333333e1;
          real mult21C2#3 = RMul(coeff21C1,prod2140);
          real mult21C3#3 = RMul(coeff21C0,prod213F);
          real mult21C4#3 = RMul(coeff21BF,prod213E);
          real sum21C5#1 = RAdd(mult21C3,mult21C4);
          real sum21C6#2 = RAdd(mult21C2,sum21C5);
          real intermediate21C7#1 = sum21C6;
          real mult21C8#3 = RMul(coeff219E,prod213B);
          real mult21C9#5 = RMul(coeff219B,prod2139);
          real mult21CA#1 = RMul(coeff219D,prod2137);
          real mult21CB#5 = RMul(coeff219C,prod2136);
          real mult21CC#3 = RMul(coeff219B,prod2134);
          real mult21CD#3 = RMul(coeff219D,prod212B);
          real mult21CE#5 = RMul(coeff219C,prod2126);
          real mult21CF#5 = RMul(coeff219B,prod211E);
          real sum21D0#1 = RAdd(mult21CE,mult21CF);
          real sum21D1#1 = RAdd(mult21A7,sum21D0);
          real sum21D2#1 = RAdd(mult21CD,sum21D1);
          real sum21D3#1 = RAdd(mult21CC,sum21D2);
          real sum21D4#1 = RAdd(mult21CB,sum21D3);
          real sum21D5#1 = RAdd(mult21CA,sum21D4);
          real sum21D6#1 = RAdd(mult21C9,sum21D5);
          real sum21D7#1 = RAdd(mult21A2,sum21D6);
          real sum21D8#2 = RAdd(mult21C8,sum21D7);
          real intermediate21D9#1 = sum21D8;
          real mult21DA#3 = RMul(coeff21B4,prod213B);
          real mult21DB#1 = RMul(coeff21B3,prod2137);
          real mult21DC#3 = RMul(coeff211B,prod2134);
          real sum21DD#1 = RAdd(mult21DC,sum2193);
          real sum21DE#1 = RAdd(mult214B,sum21DD);
          real sum21DF#1 = RAdd(mult21DB,sum21DE);
          real sum21E0#1 = RAdd(mult21B8,sum21DF);
          real sum21E1#2 = RAdd(mult21DA,sum21E0);
          real intermediate21E2#1 = sum21E1;
          real mult21E3#3 = RMul(coeff21C1,prod213B);
          real mult21E4#3 = RMul(coeff21C0,prod2137);
          real mult21E5#3 = RMul(coeff21BF,prod2134);
          real sum21E6#1 = RAdd(mult21E4,mult21E5);
          real sum21E7#2 = RAdd(mult21E3,sum21E6);
          real intermediate21E8#1 = sum21E7;
          real coeff21E9#3 = -0.170666666667e3;
          real coeff21EA#9 = -0.384e3;
          real coeff21EB#3 = 0.288e3;
          real coeff21EC#1 = -0.512e3;
          real coeff21ED#9 = 0.384e3;
          real coeff21EE#3 = -0.138666666667e3;
          real coeff21EF#6 = 0.96e2;
          real coeff21F0#1 = 0.16e2;
          real mult21F1#3 = RMul(coeff21F0,prod2142);
          real mult21F2#2 = RMul(coeff21EF,prod213F);
          real mult21F3#2 = RMul(coeff21EF,prod2137);
          real mult21F4#1 = RMul(coeff21EE,prod2131);
          real mult21F5#2 = RMul(coeff21ED,prod212F);
          real mult21F6#2 = RMul(coeff21ED,prod212B);
          real mult21F7#6 = RMul(coeff21EC,prod2129);
          real mult21F8#1 = RMul(coeff21EB,prod2123);
          real mult21F9#2 = RMul(coeff21EA,prod2121);
          real mult21FA#2 = RMul(coeff21EA,prod211E);
          real mult21FB#2 = RMul(coeff21E9,prod211A);
          real sum21FC#1 = RAdd(mult21FA,mult21FB);
          real sum21FD#1 = RAdd(mult21F9,sum21FC);
          real sum21FE#1 = RAdd(mult21F8,sum21FD);
          real sum21FF#1 = RAdd(mult21CE,sum21FE);
          real sum2200#1 = RAdd(mult21F7,sum21FF);
          real sum2201#1 = RAdd(mult21F6,sum2200);
          real sum2202#1 = RAdd(mult21A6,sum2201);
          real sum2203#1 = RAdd(mult21F5,sum2202);
          real sum2204#1 = RAdd(mult21F4,sum2203);
          real sum2205#1 = RAdd(mult21E5,sum2204);
          real sum2206#1 = RAdd(mult21A4,sum2205);
          real sum2207#1 = RAdd(mult21F3,sum2206);
          real sum2208#1 = RAdd(mult21C9,sum2207);
          real sum2209#1 = RAdd(mult21A2,sum2208);
          real sum220A#1 = RAdd(mult21C8,sum2209);
          real sum220B#1 = RAdd(mult21C4,sum220A);
          real sum220C#1 = RAdd(mult21F2,sum220B);
          real sum220D#1 = RAdd(mult219F,sum220C);
          real sum220E#1 = RAdd(mult21F1,sum220D);
          real intermediate220F#1 = sum220E;
          real coeff2210#3 = -0.288e3;
          real coeff2211#3 = 0.152e3;
          real coeff2212#1 = -0.12e2;
          real mult2213#3 = RMul(coeff2212,prod2142);
          real mult2214#1 = RMul(coeff2211,prod2131);
          real mult2215#2 = RMul(coeff2210,prod212F);
          real mult2216#2 = RMul(coeff2210,prod212B);
          real mult2217#1 = RMul(coeff21EA,prod2123);
          real mult2218#2 = RMul(coeff21ED,prod2121);
          real mult2219#2 = RMul(coeff21ED,prod211E);
          real mult221A#1 = RMul(coeff2127,prod211A);
          real sum221B#1 = RAdd(mult2219,mult221A);
          real sum221C#1 = RAdd(mult2218,sum221B);
          real sum221D#1 = RAdd(mult2217,sum221C);
          real sum221E#1 = RAdd(mult2152,sum221D);
          real sum221F#1 = RAdd(mult2151,sum221E);
          real sum2220#1 = RAdd(mult2216,sum221F);
          real sum2221#1 = RAdd(mult214F,sum2220);
          real sum2222#1 = RAdd(mult2215,sum2221);
          real sum2223#1 = RAdd(mult2214,sum2222);
          real sum2224#1 = RAdd(mult2191,sum2223);
          real sum2225#1 = RAdd(mult21B8,sum2224);
          real sum2226#1 = RAdd(mult21DA,sum2225);
          real sum2227#1 = RAdd(mult2181,sum2226);
          real sum2228#1 = RAdd(mult21B5,sum2227);
          real sum2229#1 = RAdd(mult2213,sum2228);
          real intermediate222A#1 = sum2229;
          real coeff222B#3 = 0.224e3;
          real coeff222C#3 = 0.64e2;
          real coeff222D#3 = -0.746666666667e2;
          real mult222E#3 = RMul(coeff2177,prod2142);
          real mult222F#1 = RMul(coeff222D,prod2131);
          real mult2230#4 = RMul(coeff222C,prod212F);
          real mult2231#4 = RMul(coeff222C,prod212B);
          real mult2232#1 = RMul(coeff222B,prod2123);
          real sum2233#1 = RAdd(mult21CF,mult21FB);
          real sum2234#1 = RAdd(mult21A8,sum2233);
          real sum2235#1 = RAdd(mult2232,sum2234);
          real sum2236#1 = RAdd(mult2231,sum2235);
          real sum2237#1 = RAdd(mult2230,sum2236);
          real sum2238#1 = RAdd(mult222F,sum2237);
          real sum2239#1 = RAdd(mult21E3,sum2238);
          real sum223A#1 = RAdd(mult21C2,sum2239);
          real sum223B#1 = RAdd(mult222E,sum223A);
          real intermediate223C#1 = sum223B;
          real sum223D#1 = RAdd(mult21B8,mult2151);
          real intermediate223E#1 = sum223D;
          real sum223F#1 = RAdd(mult21B8,mult214B);
          real intermediate2240#1 = sum223F;
          real sum2241#2 = RAdd(mult21B8,mult2149);
          real intermediate2242#1 = sum2241;
          real coeff2243#6 = -0.224e3;
          real mult2244#3 = RMul(coeff2243,prod213A);
          real mult2245#2 = RMul(coeff2127,prod2139);
          real mult2246#2 = RMul(coeff2127,prod2136);
          real sum2247#1 = RAdd(mult2246,mult2151);
          real sum2248#1 = RAdd(mult2245,sum2247);
          real sum2249#1 = RAdd(mult2244,sum2248);
          real intermediate224A#1 = sum2249;
          real mult224B#6 = RMul(coeff21C0,prod213A);
          real sum224C#1 = RAdd(mult224B,mult21A4);
          real intermediate224D#1 = sum224C;
          real sum224E#1 = RAdd(mult224B,mult21C9);
          real intermediate224F#1 = sum224E;
          real coeff2250#7 = 0.512e3;
          real coeff2251#3 = -0.448e3;
          real mult2252#2 = RMul(coeff21EF,prod2140);
          real mult2253#2 = RMul(coeff2243,prod213F);
          real mult2254#2 = RMul(coeff2251,prod212F);
          real mult2255#1 = RMul(coeff2250,prod212E);
          real mult2256#6 = RMul(coeff2250,prod2129);
          real sum2257#1 = RAdd(mult2256,mult2218);
          real sum2258#1 = RAdd(mult2255,sum2257);
          real sum2259#1 = RAdd(mult2254,sum2258);
          real sum225A#1 = RAdd(mult214B,sum2259);
          real sum225B#1 = RAdd(mult2245,sum225A);
          real sum225C#1 = RAdd(mult2244,sum225B);
          real sum225D#1 = RAdd(mult21B7,sum225C);
          real sum225E#1 = RAdd(mult2253,sum225D);
          real sum225F#1 = RAdd(mult2252,sum225E);
          real intermediate2260#1 = sum225F;
          real coeff2261#3 = 0.320e3;
          real mult2262#4 = RMul(coeff217D,prod2140);
          real mult2263#2 = RMul(coeff2261,prod212F);
          real sum2264#1 = RAdd(mult21A7,mult21F9);
          real sum2265#1 = RAdd(mult21A6,sum2264);
          real sum2266#1 = RAdd(mult2263,sum2265);
          real sum2267#1 = RAdd(mult224B,sum2266);
          real sum2268#1 = RAdd(mult21C3,sum2267);
          real sum2269#1 = RAdd(mult2262,sum2268);
          real intermediate226A#1 = sum2269;
          real coeff226B#3 = 0.160e3;
          real mult226C#2 = RMul(coeff226B,prod213F);
          real sum226D#1 = RAdd(mult2230,mult21A6);
          real sum226E#1 = RAdd(mult21C9,sum226D);
          real sum226F#1 = RAdd(mult224B,sum226E);
          real sum2270#1 = RAdd(mult21A1,sum226F);
          real sum2271#1 = RAdd(mult226C,sum2270);
          real sum2272#1 = RAdd(mult2262,sum2271);
          real intermediate2273#1 = sum2272;
          real mult2274#2 = RMul(coeff21EF,prod213B);
          real mult2275#2 = RMul(coeff2243,prod2137);
          real mult2276#2 = RMul(coeff2251,prod212B);
          real mult2277#1 = RMul(coeff2250,prod2126);
          real sum2278#1 = RAdd(mult2277,mult2219);
          real sum2279#1 = RAdd(mult2256,sum2278);
          real sum227A#1 = RAdd(mult2276,sum2279);
          real sum227B#1 = RAdd(mult21DC,sum227A);
          real sum227C#1 = RAdd(mult2246,sum227B);
          real sum227D#1 = RAdd(mult2275,sum227C);
          real sum227E#1 = RAdd(mult2149,sum227D);
          real sum227F#1 = RAdd(mult2244,sum227E);
          real sum2280#1 = RAdd(mult2274,sum227F);
          real intermediate2281#1 = sum2280;
          real mult2282#4 = RMul(coeff217D,prod213B);
          real mult2283#2 = RMul(coeff2261,prod212B);
          real sum2284#1 = RAdd(mult21CE,mult21FA);
          real sum2285#1 = RAdd(mult21A7,sum2284);
          real sum2286#1 = RAdd(mult2283,sum2285);
          real sum2287#1 = RAdd(mult21E4,sum2286);
          real sum2288#1 = RAdd(mult224B,sum2287);
          real sum2289#1 = RAdd(mult2282,sum2288);
          real intermediate228A#1 = sum2289;
          real mult228B#2 = RMul(coeff226B,prod2137);
          real sum228C#1 = RAdd(mult2231,mult21CE);
          real sum228D#1 = RAdd(mult21CC,sum228C);
          real sum228E#1 = RAdd(mult21A4,sum228D);
          real sum228F#1 = RAdd(mult228B,sum228E);
          real sum2290#1 = RAdd(mult224B,sum228F);
          real sum2291#1 = RAdd(mult2282,sum2290);
          real intermediate2292#1 = sum2291;
          real mult2293#1 = RMul(coeff2127,prod213A);
          real sum2294#1 = RAdd(mult21CB,mult21F7);
          real sum2295#1 = RAdd(mult21A3,sum2294);
          real sum2296#1 = RAdd(mult2293,sum2295);
          real intermediate2297#1 = sum2296;
          real intermediate2298#1 = sum2169;
          real mult2299#1 = RMul(coeff216C,prod213B);
          real mult229A#1 = RMul(coeff216B,prod2137);
          real sum229B#1 = RAdd(mult229A,mult214C);
          real sum229C#1 = RAdd(mult2299,sum229B);
          real sum229D#1 = RAdd(mult216E,sum229C);
          real intermediate229E#1 = sum229D;
          real mult229F#2 = RMul(coeff2176,prod213A);
          real sum22A0#1 = RAdd(mult229F,mult214B);
          real sum22A1#1 = RAdd(mult2178,sum22A0);
          real intermediate22A2#1 = sum22A1;
          real sum22A3#1 = RAdd(mult2181,sum2241);
          real sum22A4#1 = RAdd(mult2180,sum22A3);
          real intermediate22A5#1 = sum22A4;
          real intermediate22A6#1 = sum2189;
          real mult22A7#3 = RMul(coeff2177,prod2131);
          real mult22A8#1 = RMul(coeff217D,prod2123);
          real sum22A9#1 = RAdd(mult22A8,mult2156);
          real sum22AA#2 = RAdd(mult22A7,sum22A9);
          real intermediate22AB#1 = sum22AA;
          real mult22AC#2 = RMul(coeff217F,prod2131);
          real mult22AD#2 = RMul(coeff217E,prod2123);
          real sum22AE#2 = RAdd(mult22AD,mult2155);
          real sum22AF#1 = RAdd(mult2192,sum22AE);
          real sum22B0#1 = RAdd(mult22AC,sum22AF);
          real intermediate22B1#1 = sum22B0;
          real sum22B2#1 = RAdd(mult218C,mult2152);
          real sum22B3#1 = RAdd(mult22A7,sum22B2);
          real intermediate22B4#1 = sum22B3;
          real intermediate22B5#1 = sum21B1;
          real intermediate22B6#1 = sum21BD;
          real intermediate22B7#1 = sum21C6;
          real mult22B8#1 = RMul(coeff21EE,prod213B);
          real mult22B9#2 = RMul(coeff21ED,prod213A);
          real mult22BA#1 = RMul(coeff21EB,prod2137);
          real mult22BB#2 = RMul(coeff21EA,prod2136);
          real mult22BC#2 = RMul(coeff21E9,prod2134);
          real mult22BD#3 = RMul(coeff219E,prod2131);
          real mult22BE#4 = RMul(coeff219B,prod212E);
          real mult22BF#2 = RMul(coeff21EA,prod2126);
          real mult22C0#2 = RMul(coeff21EF,prod2123);
          real mult22C1#4 = RMul(coeff219C,prod211E);
          real mult22C2#3 = RMul(coeff21BF,prod211A);
          real sum22C3#1 = RAdd(mult22C1,mult22C2);
          real sum22C4#1 = RAdd(mult21A8,sum22C3);
          real sum22C5#1 = RAdd(mult22C0,sum22C4);
          real sum22C6#1 = RAdd(mult22BF,sum22C5);
          real sum22C7#1 = RAdd(mult21F7,sum22C6);
          real sum22C8#1 = RAdd(mult21F6,sum22C7);
          real sum22C9#1 = RAdd(mult22BE,sum22C8);
          real sum22CA#1 = RAdd(mult21A5,sum22C9);
          real sum22CB#1 = RAdd(mult22BD,sum22CA);
          real sum22CC#1 = RAdd(mult22BC,sum22CB);
          real sum22CD#1 = RAdd(mult22BB,sum22CC);
          real sum22CE#1 = RAdd(mult22BA,sum22CD);
          real sum22CF#1 = RAdd(mult21A3,sum22CE);
          real sum22D0#1 = RAdd(mult22B9,sum22CF);
          real sum22D1#1 = RAdd(mult22B8,sum22D0);
          real sum22D2#1 = RAdd(mult21C4,sum22D1);
          real sum22D3#1 = RAdd(mult21F2,sum22D2);
          real sum22D4#1 = RAdd(mult219F,sum22D3);
          real sum22D5#1 = RAdd(mult21F1,sum22D4);
          real intermediate22D6#1 = sum22D5;
          real mult22D7#1 = RMul(coeff2211,prod213B);
          real mult22D8#2 = RMul(coeff2210,prod213A);
          real mult22D9#1 = RMul(coeff21EA,prod2137);
          real mult22DA#2 = RMul(coeff21ED,prod2136);
          real mult22DB#1 = RMul(coeff2127,prod2134);
          real mult22DC#3 = RMul(coeff21B4,prod2131);
          real mult22DD#2 = RMul(coeff21ED,prod2126);
          real sum22DE#1 = RAdd(mult22DD,sum22AE);
          real sum22DF#1 = RAdd(mult2151,sum22DE);
          real sum22E0#1 = RAdd(mult2216,sum22DF);
          real sum22E1#1 = RAdd(mult2182,sum22E0);
          real sum22E2#1 = RAdd(mult22DC,sum22E1);
          real sum22E3#1 = RAdd(mult22DB,sum22E2);
          real sum22E4#1 = RAdd(mult22DA,sum22E3);
          real sum22E5#1 = RAdd(mult22D9,sum22E4);
          real sum22E6#1 = RAdd(mult2149,sum22E5);
          real sum22E7#1 = RAdd(mult22D8,sum22E6);
          real sum22E8#1 = RAdd(mult22D7,sum22E7);
          real sum22E9#1 = RAdd(mult2181,sum22E8);
          real sum22EA#1 = RAdd(mult21B5,sum22E9);
          real sum22EB#1 = RAdd(mult2213,sum22EA);
          real intermediate22EC#1 = sum22EB;
          real mult22ED#1 = RMul(coeff222D,prod213B);
          real mult22EE#4 = RMul(coeff222C,prod213A);
          real mult22EF#1 = RMul(coeff222B,prod2137);
          real mult22F0#3 = RMul(coeff21C1,prod2131);
          real mult22F1#4 = RMul(coeff219B,prod2126);
          real sum22F2#1 = RAdd(mult2231,mult22F1);
          real sum22F3#1 = RAdd(mult22F0,sum22F2);
          real sum22F4#1 = RAdd(mult22BC,sum22F3);
          real sum22F5#1 = RAdd(mult21A4,sum22F4);
          real sum22F6#1 = RAdd(mult22EF,sum22F5);
          real sum22F7#1 = RAdd(mult22EE,sum22F6);
          real sum22F8#1 = RAdd(mult22ED,sum22F7);
          real sum22F9#1 = RAdd(mult21C2,sum22F8);
          real sum22FA#1 = RAdd(mult222E,sum22F9);
          real intermediate22FB#1 = sum22FA;
          real mult22FC#1 = RMul(coeff219D,prod2123);
          real mult22FD#5 = RMul(coeff219C,prod2121);
          real mult22FE#2 = RMul(coeff219B,prod211A);
          real sum22FF#2 = RAdd(mult22C1,mult22FE);
          real sum2300#1 = RAdd(mult22FD,sum22FF);
          real sum2301#1 = RAdd(mult22FC,sum2300);
          real sum2302#1 = RAdd(mult22F1,sum2301);
          real sum2303#1 = RAdd(mult21A7,sum2302);
          real sum2304#1 = RAdd(mult21CD,sum2303);
          real sum2305#1 = RAdd(mult22BE,sum2304);
          real sum2306#1 = RAdd(mult21A5,sum2305);
          real sum2307#2 = RAdd(mult22BD,sum2306);
          real intermediate2308#1 = sum2307;
          real mult2309#1 = RMul(coeff21B3,prod2123);
          real mult230A#3 = RMul(coeff211B,prod211A);
          real sum230B#1 = RAdd(mult2155,mult230A);
          real sum230C#1 = RAdd(mult2154,sum230B);
          real sum230D#1 = RAdd(mult2309,sum230C);
          real sum230E#1 = RAdd(mult2192,sum230D);
          real sum230F#1 = RAdd(mult2182,sum230E);
          real sum2310#2 = RAdd(mult22DC,sum230F);
          real intermediate2311#1 = sum2310;
          real mult2312#3 = RMul(coeff21C0,prod2123);
          real sum2313#1 = RAdd(mult2312,mult22C2);
          real sum2314#2 = RAdd(mult22F0,sum2313);
          real intermediate2315#1 = sum2314;
          real sum2316#1 = RAdd(mult2182,mult2154);
          real intermediate2317#1 = sum2316;
          real sum2318#1 = RAdd(mult2182,mult2151);
          real intermediate2319#1 = sum2318;
          real intermediate231A#1 = sum2183;
          real mult231B#2 = RMul(coeff2251,prod213A);
          real mult231C#1 = RMul(coeff2250,prod2139);
          real mult231D#3 = RMul(coeff2243,prod212F);
          real mult231E#2 = RMul(coeff2127,prod212E);
          real sum231F#1 = RAdd(mult2256,mult2154);
          real sum2320#1 = RAdd(mult231E,sum231F);
          real sum2321#1 = RAdd(mult231D,sum2320);
          real sum2322#1 = RAdd(mult22DA,sum2321);
          real sum2323#1 = RAdd(mult231C,sum2322);
          real sum2324#1 = RAdd(mult231B,sum2323);
          real sum2325#1 = RAdd(mult21B7,sum2324);
          real sum2326#1 = RAdd(mult2253,sum2325);
          real sum2327#1 = RAdd(mult2252,sum2326);
          real intermediate2328#1 = sum2327;
          real mult2329#2 = RMul(coeff2261,prod213A);
          real mult232A#5 = RMul(coeff21C0,prod212F);
          real sum232B#1 = RAdd(mult232A,mult21A7);
          real sum232C#1 = RAdd(mult22BB,sum232B);
          real sum232D#1 = RAdd(mult21A3,sum232C);
          real sum232E#1 = RAdd(mult2329,sum232D);
          real sum232F#1 = RAdd(mult21C3,sum232E);
          real sum2330#1 = RAdd(mult2262,sum232F);
          real intermediate2331#1 = sum2330;
          real sum2332#2 = RAdd(mult232A,mult22BE);
          real sum2333#1 = RAdd(mult21A3,sum2332);
          real sum2334#1 = RAdd(mult22EE,sum2333);
          real sum2335#1 = RAdd(mult21A1,sum2334);
          real sum2336#1 = RAdd(mult226C,sum2335);
          real sum2337#1 = RAdd(mult2262,sum2336);
          real intermediate2338#1 = sum2337;
          real mult2339#2 = RMul(coeff2127,prod2121);
          real sum233A#1 = RAdd(mult2151,mult2339);
          real sum233B#1 = RAdd(mult231E,sum233A);
          real sum233C#1 = RAdd(mult231D,sum233B);
          real intermediate233D#1 = sum233C;
          real sum233E#1 = RAdd(mult232A,mult21A8);
          real intermediate233F#1 = sum233E;
          real intermediate2340#1 = sum2332;
          real mult2341#2 = RMul(coeff21EF,prod2131);
          real mult2342#2 = RMul(coeff2243,prod2123);
          real mult2343#1 = RMul(coeff2250,prod211E);
          real sum2344#1 = RAdd(mult2343,mult230A);
          real sum2345#1 = RAdd(mult2339,sum2344);
          real sum2346#1 = RAdd(mult2342,sum2345);
          real sum2347#1 = RAdd(mult22DD,sum2346);
          real sum2348#1 = RAdd(mult2256,sum2347);
          real sum2349#1 = RAdd(mult2276,sum2348);
          real sum234A#1 = RAdd(mult214F,sum2349);
          real sum234B#1 = RAdd(mult231D,sum234A);
          real sum234C#1 = RAdd(mult2341,sum234B);
          real intermediate234D#1 = sum234C;
          real mult234E#4 = RMul(coeff217D,prod2131);
          real mult234F#2 = RMul(coeff226B,prod2123);
          real sum2350#1 = RAdd(mult21A8,sum22FF);
          real sum2351#1 = RAdd(mult234F,sum2350);
          real sum2352#1 = RAdd(mult2231,sum2351);
          real sum2353#1 = RAdd(mult232A,sum2352);
          real sum2354#1 = RAdd(mult234E,sum2353);
          real intermediate2355#1 = sum2354;
          real sum2356#1 = RAdd(mult2312,mult22C1);
          real sum2357#1 = RAdd(mult22BF,sum2356);
          real sum2358#1 = RAdd(mult21A7,sum2357);
          real sum2359#1 = RAdd(mult2283,sum2358);
          real sum235A#1 = RAdd(mult232A,sum2359);
          real sum235B#1 = RAdd(mult234E,sum235A);
          real intermediate235C#1 = sum235B;
          real mult235D#1 = RMul(coeff2127,prod212F);
          real sum235E#1 = RAdd(mult21F7,mult22FD);
          real sum235F#1 = RAdd(mult21A6,sum235E);
          real sum2360#1 = RAdd(mult235D,sum235F);
          real intermediate2361#1 = sum2360;
          real intermediate2362#1 = sum2169;
          real mult2363#1 = RMul(coeff216C,prod2140);
          real mult2364#1 = RMul(coeff216B,prod213F);
          real sum2365#1 = RAdd(mult2364,mult2146);
          real sum2366#1 = RAdd(mult2363,sum2365);
          real sum2367#1 = RAdd(mult216E,sum2366);
          real intermediate2368#1 = sum2367;
          real intermediate2369#1 = sum2199;
          real sum236A#1 = RAdd(mult2191,mult214B);
          real sum236B#1 = RAdd(mult21B8,sum236A);
          real sum236C#1 = RAdd(mult2190,sum236B);
          real intermediate236D#1 = sum236C;
          real sum236E#1 = RAdd(mult229F,mult2149);
          real sum236F#1 = RAdd(mult218B,sum236E);
          real intermediate2370#1 = sum236F;
          real intermediate2371#1 = sum22AA;
          real sum2372#2 = RAdd(mult22AD,mult2154);
          real sum2373#1 = RAdd(mult2182,sum2372);
          real sum2374#1 = RAdd(mult22AC,sum2373);
          real intermediate2375#1 = sum2374;
          real sum2376#1 = RAdd(mult2179,mult214F);
          real sum2377#1 = RAdd(mult22A7,sum2376);
          real intermediate2378#1 = sum2377;
          real mult2379#1 = RMul(coeff21EE,prod2140);
          real mult237A#1 = RMul(coeff21EB,prod213F);
          real mult237B#2 = RMul(coeff21E9,prod213E);
          real mult237C#2 = RMul(coeff21EA,prod2139);
          real mult237D#2 = RMul(coeff21EA,prod212E);
          real sum237E#1 = RAdd(mult21CF,mult22C2);
          real sum237F#1 = RAdd(mult22FD,sum237E);
          real sum2380#1 = RAdd(mult22C0,sum237F);
          real sum2381#1 = RAdd(mult22F1,sum2380);
          real sum2382#1 = RAdd(mult21F7,sum2381);
          real sum2383#1 = RAdd(mult21CD,sum2382);
          real sum2384#1 = RAdd(mult237D,sum2383);
          real sum2385#1 = RAdd(mult21F5,sum2384);
          real sum2386#1 = RAdd(mult22BD,sum2385);
          real sum2387#1 = RAdd(mult21E5,sum2386);
          real sum2388#1 = RAdd(mult21CB,sum2387);
          real sum2389#1 = RAdd(mult21F3,sum2388);
          real sum238A#1 = RAdd(mult237C,sum2389);
          real sum238B#1 = RAdd(mult22B9,sum238A);
          real sum238C#1 = RAdd(mult21C8,sum238B);
          real sum238D#1 = RAdd(mult237B,sum238C);
          real sum238E#1 = RAdd(mult237A,sum238D);
          real sum238F#1 = RAdd(mult2379,sum238E);
          real sum2390#1 = RAdd(mult21F1,sum238F);
          real intermediate2391#1 = sum2390;
          real mult2392#1 = RMul(coeff2211,prod2140);
          real mult2393#1 = RMul(coeff21EA,prod213F);
          real mult2394#1 = RMul(coeff2127,prod213E);
          real mult2395#2 = RMul(coeff21ED,prod2139);
          real mult2396#2 = RMul(coeff21ED,prod212E);
          real sum2397#1 = RAdd(mult2151,sum2372);
          real sum2398#1 = RAdd(mult2192,sum2397);
          real sum2399#1 = RAdd(mult2396,sum2398);
          real sum239A#1 = RAdd(mult2215,sum2399);
          real sum239B#1 = RAdd(mult22DC,sum239A);
          real sum239C#1 = RAdd(mult214B,sum239B);
          real sum239D#1 = RAdd(mult2191,sum239C);
          real sum239E#1 = RAdd(mult2395,sum239D);
          real sum239F#1 = RAdd(mult22D8,sum239E);
          real sum23A0#1 = RAdd(mult21DA,sum239F);
          real sum23A1#1 = RAdd(mult2394,sum23A0);
          real sum23A2#1 = RAdd(mult2393,sum23A1);
          real sum23A3#1 = RAdd(mult2392,sum23A2);
          real sum23A4#1 = RAdd(mult2213,sum23A3);
          real intermediate23A5#1 = sum23A4;
          real mult23A6#1 = RMul(coeff222D,prod2140);
          real mult23A7#1 = RMul(coeff222B,prod213F);
          real sum23A8#1 = RAdd(mult2230,mult22BE);
          real sum23A9#1 = RAdd(mult22F0,sum23A8);
          real sum23AA#1 = RAdd(mult21C9,sum23A9);
          real sum23AB#1 = RAdd(mult22EE,sum23AA);
          real sum23AC#1 = RAdd(mult21E3,sum23AB);
          real sum23AD#1 = RAdd(mult237B,sum23AC);
          real sum23AE#1 = RAdd(mult23A7,sum23AD);
          real sum23AF#1 = RAdd(mult23A6,sum23AE);
          real sum23B0#1 = RAdd(mult222E,sum23AF);
          real intermediate23B1#1 = sum23B0;
          real intermediate23B2#1 = sum21D8;
          real intermediate23B3#1 = sum21E1;
          real intermediate23B4#1 = sum21E7;
          real intermediate23B5#1 = sum2307;
          real intermediate23B6#1 = sum2310;
          real intermediate23B7#1 = sum2314;
          real sum23B8#1 = RAdd(mult2192,mult2155);
          real intermediate23B9#1 = sum23B8;
          real intermediate23BA#1 = sum2193;
          real sum23BB#1 = RAdd(mult2192,mult2151);
          real intermediate23BC#1 = sum23BB;
          real mult23BD#1 = RMul(coeff2250,prod2136);
          real mult23BE#3 = RMul(coeff2243,prod212B);
          real mult23BF#2 = RMul(coeff2127,prod2126);
          real sum23C0#1 = RAdd(mult23BF,mult2155);
          real sum23C1#1 = RAdd(mult2256,sum23C0);
          real sum23C2#1 = RAdd(mult23BE,sum23C1);
          real sum23C3#1 = RAdd(mult21DC,sum23C2);
          real sum23C4#1 = RAdd(mult23BD,sum23C3);
          real sum23C5#1 = RAdd(mult2275,sum23C4);
          real sum23C6#1 = RAdd(mult2395,sum23C5);
          real sum23C7#1 = RAdd(mult231B,sum23C6);
          real sum23C8#1 = RAdd(mult2274,sum23C7);
          real intermediate23C9#1 = sum23C8;
          real mult23CA#5 = RMul(coeff21C0,prod212B);
          real sum23CB#2 = RAdd(mult23CA,mult22F1);
          real sum23CC#1 = RAdd(mult21CC,sum23CB);
          real sum23CD#1 = RAdd(mult21CB,sum23CC);
          real sum23CE#1 = RAdd(mult228B,sum23CD);
          real sum23CF#1 = RAdd(mult22EE,sum23CE);
          real sum23D0#1 = RAdd(mult2282,sum23CF);
          real intermediate23D1#1 = sum23D0;
          real sum23D2#1 = RAdd(mult23CA,mult21A7);
          real sum23D3#1 = RAdd(mult21CB,sum23D2);
          real sum23D4#1 = RAdd(mult21E4,sum23D3);
          real sum23D5#1 = RAdd(mult237C,sum23D4);
          real sum23D6#1 = RAdd(mult2329,sum23D5);
          real sum23D7#1 = RAdd(mult2282,sum23D6);
          real intermediate23D8#1 = sum23D7;
          real mult23D9#1 = RMul(coeff2250,prod2121);
          real mult23DA#2 = RMul(coeff2127,prod211E);
          real sum23DB#1 = RAdd(mult23DA,mult230A);
          real sum23DC#1 = RAdd(mult23D9,sum23DB);
          real sum23DD#1 = RAdd(mult2342,sum23DC);
          real sum23DE#1 = RAdd(mult2152,sum23DD);
          real sum23DF#1 = RAdd(mult2256,sum23DE);
          real sum23E0#1 = RAdd(mult23BE,sum23DF);
          real sum23E1#1 = RAdd(mult2396,sum23E0);
          real sum23E2#1 = RAdd(mult2254,sum23E1);
          real sum23E3#1 = RAdd(mult2341,sum23E2);
          real intermediate23E4#1 = sum23E3;
          real sum23E5#1 = RAdd(mult21CF,mult22FE);
          real sum23E6#1 = RAdd(mult22FD,sum23E5);
          real sum23E7#1 = RAdd(mult234F,sum23E6);
          real sum23E8#1 = RAdd(mult23CA,sum23E7);
          real sum23E9#1 = RAdd(mult2230,sum23E8);
          real sum23EA#1 = RAdd(mult234E,sum23E9);
          real intermediate23EB#1 = sum23EA;
          real sum23EC#1 = RAdd(mult2312,mult22FD);
          real sum23ED#1 = RAdd(mult21A7,sum23EC);
          real sum23EE#1 = RAdd(mult23CA,sum23ED);
          real sum23EF#1 = RAdd(mult237D,sum23EE);
          real sum23F0#1 = RAdd(mult2263,sum23EF);
          real sum23F1#1 = RAdd(mult234E,sum23F0);
          real intermediate23F2#1 = sum23F1;
          real sum23F3#1 = RAdd(mult23BF,mult23DA);
          real sum23F4#1 = RAdd(mult2151,sum23F3);
          real sum23F5#1 = RAdd(mult23BE,sum23F4);
          real intermediate23F6#1 = sum23F5;
          real sum23F7#1 = RAdd(mult23CA,mult21CF);
          real intermediate23F8#1 = sum23F7;
          real intermediate23F9#1 = sum23CB;
          real mult23FA#1 = RMul(coeff2127,prod212B);
          real sum23FB#1 = RAdd(mult21CE,mult22C1);
          real sum23FC#1 = RAdd(mult21F7,sum23FB);
          real sum23FD#1 = RAdd(mult23FA,sum23FC);
          real intermediate23FE#1 = sum23FD;
          tensor[35] intermediateCons23FF#1 = <tensor[35]>[intermediate216A,intermediate2174,basisEval2175,basisEval2175,basisEval2175,basisEval2175,basisEval2175,intermediate217C,intermediate2186,intermediate218A,intermediate218F,intermediate2196,intermediate219A,intermediate21B2,intermediate21BE,intermediate21C7,intermediate21D9,intermediate21E2,intermediate21E8,intermediate220F,intermediate222A,intermediate223C,intermediate223E,intermediate2240,intermediate2242,intermediate224A,intermediate224D,intermediate224F,intermediate2260,intermediate226A,intermediate2273,intermediate2281,intermediate228A,intermediate2292,intermediate2297];
          tensor[35] intermediateCons2400#1 = <tensor[35]>[intermediate2298,basisEval2175,intermediate229E,basisEval2175,intermediate22A2,intermediate22A5,intermediate22A6,basisEval2175,basisEval2175,basisEval2175,intermediate22AB,intermediate22B1,intermediate22B4,intermediate22B5,intermediate22B6,intermediate22B7,intermediate22D6,intermediate22EC,intermediate22FB,intermediate2308,intermediate2311,intermediate2315,intermediate2317,intermediate2319,intermediate231A,intermediate2328,intermediate2331,intermediate2338,intermediate233D,intermediate233F,intermediate2340,intermediate234D,intermediate2355,intermediate235C,intermediate2361];
          tensor[35] intermediateCons2401#1 = <tensor[35]>[intermediate2362,basisEval2175,basisEval2175,intermediate2368,intermediate2369,intermediate236D,intermediate2370,intermediate2371,intermediate2375,intermediate2378,basisEval2175,basisEval2175,basisEval2175,intermediate2391,intermediate23A5,intermediate23B1,intermediate23B2,intermediate23B3,intermediate23B4,intermediate23B5,intermediate23B6,intermediate23B7,intermediate23B9,intermediate23BA,intermediate23BC,intermediate23C9,intermediate23D1,intermediate23D8,intermediate23E4,intermediate23EB,intermediate23F2,intermediate23F6,intermediate23F8,intermediate23F9,intermediate23FE];
          tensor[35] projParam26F7#1 = intermediateCons23FF;
          real vdot26F8#1 = VDot<35>(femDofs1B65,projParam26F7);
          tensor[35] projParam26F9#1 = intermediateCons2400;
          real vdot26FA#1 = VDot<35>(femDofs1B65,projParam26F9);
          tensor[35] projParam26FB#1 = intermediateCons2401;
          real vdot26FC#1 = VDot<35>(femDofs1B65,projParam26FB);
          int ilit2706#1 = 4;
          int mulRes2707#4 = IMul(intPos1A87,ilit2706);
          int addRes2709#1 = mulRes2707;
          int idx270A#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(_t1316,addRes2709);
          int ilit270B#1 = 1;
          int addRes270C#1 = IAdd(mulRes2707,ilit270B);
          int idx270D#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(_t1316,addRes270C);
          int ilit270E#1 = 2;
          int addRes270F#1 = IAdd(mulRes2707,ilit270E);
          int idx2710#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(_t1316,addRes270F);
          int ilit2711#1 = 3;
          int addRes2712#1 = IAdd(mulRes2707,ilit2711);
          int idx2713#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(_t1316,addRes2712);
          int ilit2727#4 = 3;
          int idx2728#1 = idx270A;
          int mulRes2729#3 = IMul(ilit2727,idx2728);
          int addRes272A#1 = mulRes2729;
          int ilit272B#4 = 1;
          int addRes272C#1 = IAdd(ilit272B,mulRes2729);
          int ilit272D#4 = 2;
          int addRes272E#1 = IAdd(ilit272D,mulRes2729);
          real dof_load272F#4 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1316,addRes272A);
          real dof_load2730#4 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1316,addRes272C);
          real dof_load2731#4 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1316,addRes272E);
          int idx2733#1 = idx270D;
          int mulRes2734#3 = IMul(ilit2727,idx2733);
          int addRes2735#1 = mulRes2734;
          int addRes2736#1 = IAdd(ilit272B,mulRes2734);
          int addRes2737#1 = IAdd(ilit272D,mulRes2734);
          real dof_load2738#4 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1316,addRes2735);
          real dof_load2739#4 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1316,addRes2736);
          real dof_load273A#4 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1316,addRes2737);
          int idx273C#1 = idx2710;
          int mulRes273D#3 = IMul(ilit2727,idx273C);
          int addRes273E#1 = mulRes273D;
          int addRes273F#1 = IAdd(ilit272B,mulRes273D);
          int addRes2740#1 = IAdd(ilit272D,mulRes273D);
          real dof_load2741#4 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1316,addRes273E);
          real dof_load2742#4 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1316,addRes273F);
          real dof_load2743#4 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1316,addRes2740);
          int idx2745#1 = idx2713;
          int mulRes2746#3 = IMul(ilit2727,idx2745);
          int addRes2747#1 = mulRes2746;
          int addRes2748#1 = IAdd(ilit272B,mulRes2746);
          int addRes2749#1 = IAdd(ilit272D,mulRes2746);
          real dof_load274A#4 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1316,addRes2747);
          real dof_load274B#4 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1316,addRes2748);
          real dof_load274C#4 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1316,addRes2749);
          real coeff277D#1 = -0.1e1;
          real one277E#4 = 0.1e1;
          real prod277F#1 = RMul(one277E,one277E);
          real prod2780#2 = RMul(one277E,prod277F);
          real basisEval2781#6 = RMul(coeff277D,prod2780);
          real basisEval2782#6 = RMul(one277E,prod2780);
          real basisEval2783#12 = 0.e0;
          real r2798#3 = dof_load272F;
          real r2799#3 = basisEval2781;
          real r279A#1 = RMul(r2798,r2799);
          real r279B#3 = dof_load2738;
          real r279C#3 = basisEval2782;
          real r279D#1 = RMul(r279B,r279C);
          real r279E#3 = dof_load2741;
          real r279F#3 = basisEval2783;
          real r27A0#1 = RMul(r279E,r279F);
          real r27A1#3 = dof_load274A;
          real r27A2#3 = basisEval2783;
          real r27A3#1 = RMul(r27A1,r27A2);
          real r27A4#1 = RAdd(r279A,r279D);
          real r27A5#1 = RAdd(r27A4,r27A0);
          real r27A6#2 = RAdd(r27A5,r27A3);
          real r27A7#3 = basisEval2781;
          real r27A8#1 = RMul(r2798,r27A7);
          real r27A9#3 = basisEval2783;
          real r27AA#1 = RMul(r279B,r27A9);
          real r27AB#3 = basisEval2782;
          real r27AC#1 = RMul(r279E,r27AB);
          real r27AD#3 = basisEval2783;
          real r27AE#1 = RMul(r27A1,r27AD);
          real r27AF#1 = RAdd(r27A8,r27AA);
          real r27B0#1 = RAdd(r27AF,r27AC);
          real r27B1#2 = RAdd(r27B0,r27AE);
          real r27B2#3 = basisEval2781;
          real r27B3#1 = RMul(r2798,r27B2);
          real r27B4#3 = basisEval2783;
          real r27B5#1 = RMul(r279B,r27B4);
          real r27B6#3 = basisEval2783;
          real r27B7#1 = RMul(r279E,r27B6);
          real r27B8#3 = basisEval2782;
          real r27B9#1 = RMul(r27A1,r27B8);
          real r27BA#1 = RAdd(r27B3,r27B5);
          real r27BB#1 = RAdd(r27BA,r27B7);
          real r27BC#2 = RAdd(r27BB,r27B9);
          real r27BE#3 = dof_load2730;
          real r27BF#1 = RMul(r27BE,r2799);
          real r27C0#3 = dof_load2739;
          real r27C1#1 = RMul(r27C0,r279C);
          real r27C2#3 = dof_load2742;
          real r27C3#1 = RMul(r27C2,r279F);
          real r27C4#3 = dof_load274B;
          real r27C5#1 = RMul(r27C4,r27A2);
          real r27C6#1 = RAdd(r27BF,r27C1);
          real r27C7#1 = RAdd(r27C6,r27C3);
          real r27C8#2 = RAdd(r27C7,r27C5);
          real r27C9#1 = RMul(r27BE,r27A7);
          real r27CA#1 = RMul(r27C0,r27A9);
          real r27CB#1 = RMul(r27C2,r27AB);
          real r27CC#1 = RMul(r27C4,r27AD);
          real r27CD#1 = RAdd(r27C9,r27CA);
          real r27CE#1 = RAdd(r27CD,r27CB);
          real r27CF#2 = RAdd(r27CE,r27CC);
          real r27D0#1 = RMul(r27BE,r27B2);
          real r27D1#1 = RMul(r27C0,r27B4);
          real r27D2#1 = RMul(r27C2,r27B6);
          real r27D3#1 = RMul(r27C4,r27B8);
          real r27D4#1 = RAdd(r27D0,r27D1);
          real r27D5#1 = RAdd(r27D4,r27D2);
          real r27D6#2 = RAdd(r27D5,r27D3);
          real r27D8#3 = dof_load2731;
          real r27D9#1 = RMul(r27D8,r2799);
          real r27DA#3 = dof_load273A;
          real r27DB#1 = RMul(r27DA,r279C);
          real r27DC#3 = dof_load2743;
          real r27DD#1 = RMul(r27DC,r279F);
          real r27DE#3 = dof_load274C;
          real r27DF#1 = RMul(r27DE,r27A2);
          real r27E0#1 = RAdd(r27D9,r27DB);
          real r27E1#1 = RAdd(r27E0,r27DD);
          real r27E2#2 = RAdd(r27E1,r27DF);
          real r27E3#1 = RMul(r27D8,r27A7);
          real r27E4#1 = RMul(r27DA,r27A9);
          real r27E5#1 = RMul(r27DC,r27AB);
          real r27E6#1 = RMul(r27DE,r27AD);
          real r27E7#1 = RAdd(r27E3,r27E4);
          real r27E8#1 = RAdd(r27E7,r27E5);
          real r27E9#2 = RAdd(r27E8,r27E6);
          real r27EA#1 = RMul(r27D8,r27B2);
          real r27EB#1 = RMul(r27DA,r27B4);
          real r27EC#1 = RMul(r27DC,r27B6);
          real r27ED#1 = RMul(r27DE,r27B8);
          real r27EE#1 = RAdd(r27EA,r27EB);
          real r27EF#1 = RAdd(r27EE,r27EC);
          real r27F0#2 = RAdd(r27EF,r27ED);
          real realLit284F#9 = 0.e0;
          real r2850#3 = r27A6;
          real r2851#3 = RMul(realLit284F,r2850);
          real r2852#3 = r27C8;
          real r2853#3 = RMul(realLit284F,r2852);
          real r2854#3 = r27E2;
          real r2855#5 = RMul(realLit284F,r2854);
          real r2856#3 = RAdd(r2851,r2853);
          real r2857#3 = RAdd(r2856,r2855);
          real r2858#3 = r27B1;
          real r2859#3 = RMul(realLit284F,r2858);
          real r285A#3 = r27CF;
          real r285B#3 = RMul(realLit284F,r285A);
          real r285C#3 = r27E9;
          real r285D#5 = RMul(realLit284F,r285C);
          real r285E#3 = RAdd(r2859,r285B);
          real r285F#3 = RAdd(r285E,r285D);
          real r2860#3 = r27BC;
          real r2861#3 = RMul(realLit284F,r2860);
          real r2862#3 = r27D6;
          real r2863#3 = RMul(realLit284F,r2862);
          real r2864#3 = r27F0;
          real r2865#5 = RMul(realLit284F,r2864);
          real r2866#3 = RAdd(r2861,r2863);
          real r2867#3 = RAdd(r2866,r2865);
          real realLit2869#9 = -0.1e1;
          real r286A#1 = RMul(realLit2869,r2854);
          real r286B#1 = RAdd(r2856,r286A);
          real r286C#1 = RMul(realLit2869,r285C);
          real r286D#1 = RAdd(r285E,r286C);
          real r286E#1 = RMul(realLit2869,r2864);
          real r286F#1 = RAdd(r2866,r286E);
          real realLit2871#9 = 0.1e1;
          real r2872#1 = RMul(realLit2871,r2852);
          real r2873#1 = RAdd(r2851,r2872);
          real r2874#1 = RAdd(r2873,r2855);
          real r2875#1 = RMul(realLit2871,r285A);
          real r2876#1 = RAdd(r2859,r2875);
          real r2877#1 = RAdd(r2876,r285D);
          real r2878#1 = RMul(realLit2871,r2862);
          real r2879#1 = RAdd(r2861,r2878);
          real r287A#1 = RAdd(r2879,r2865);
          real r287D#1 = RMul(realLit2871,r2854);
          real r287E#1 = RAdd(r2856,r287D);
          real r287F#1 = RMul(realLit2871,r285C);
          real r2880#1 = RAdd(r285E,r287F);
          real r2881#1 = RMul(realLit2871,r2864);
          real r2882#1 = RAdd(r2866,r2881);
          real r2884#1 = RMul(realLit2869,r2850);
          real r2885#1 = RAdd(r2884,r2853);
          real r2886#1 = RAdd(r2885,r2855);
          real r2887#1 = RMul(realLit2869,r2858);
          real r2888#1 = RAdd(r2887,r285B);
          real r2889#1 = RAdd(r2888,r285D);
          real r288A#1 = RMul(realLit2869,r2860);
          real r288B#1 = RAdd(r288A,r2863);
          real r288C#1 = RAdd(r288B,r2865);
          real r288F#1 = RMul(realLit2869,r2852);
          real r2890#1 = RAdd(r2851,r288F);
          real r2891#1 = RAdd(r2890,r2855);
          real r2892#1 = RMul(realLit2869,r285A);
          real r2893#1 = RAdd(r2859,r2892);
          real r2894#1 = RAdd(r2893,r285D);
          real r2895#1 = RMul(realLit2869,r2862);
          real r2896#1 = RAdd(r2861,r2895);
          real r2897#1 = RAdd(r2896,r2865);
          real r2899#1 = RMul(realLit2871,r2850);
          real r289A#1 = RAdd(r2899,r2853);
          real r289B#1 = RAdd(r289A,r2855);
          real r289C#1 = RMul(realLit2871,r2858);
          real r289D#1 = RAdd(r289C,r285B);
          real r289E#1 = RAdd(r289D,r285D);
          real r289F#1 = RMul(realLit2871,r2860);
          real r28A0#1 = RAdd(r289F,r2863);
          real r28A1#1 = RAdd(r28A0,r2865);
          real r28FC#9 = r27A6;
          real r28FD#3 = r2857;
          real r28FE#1 = RMul(r28FC,r28FD);
          real r28FF#9 = r27C8;
          real r2900#3 = r287E;
          real r2901#1 = RMul(r28FF,r2900);
          real r2902#9 = r27E2;
          real r2903#3 = r2891;
          real r2904#1 = RMul(r2902,r2903);
          real r2905#1 = RAdd(r28FE,r2901);
          real r2906#1 = RAdd(r2905,r2904);
          real r2907#3 = r285F;
          real r2908#1 = RMul(r28FC,r2907);
          real r2909#3 = r2880;
          real r290A#1 = RMul(r28FF,r2909);
          real r290B#3 = r2894;
          real r290C#1 = RMul(r2902,r290B);
          real r290D#1 = RAdd(r2908,r290A);
          real r290E#1 = RAdd(r290D,r290C);
          real r290F#3 = r2867;
          real r2910#1 = RMul(r28FC,r290F);
          real r2911#3 = r2882;
          real r2912#1 = RMul(r28FF,r2911);
          real r2913#3 = r2897;
          real r2914#1 = RMul(r2902,r2913);
          real r2915#1 = RAdd(r2910,r2912);
          real r2916#1 = RAdd(r2915,r2914);
          real r2918#3 = r286B;
          real r2919#1 = RMul(r28FC,r2918);
          real r291A#3 = r2857;
          real r291B#1 = RMul(r28FF,r291A);
          real r291C#3 = r289B;
          real r291D#1 = RMul(r2902,r291C);
          real r291E#1 = RAdd(r2919,r291B);
          real r291F#1 = RAdd(r291E,r291D);
          real r2920#3 = r286D;
          real r2921#1 = RMul(r28FC,r2920);
          real r2922#3 = r285F;
          real r2923#1 = RMul(r28FF,r2922);
          real r2924#3 = r289E;
          real r2925#1 = RMul(r2902,r2924);
          real r2926#1 = RAdd(r2921,r2923);
          real r2927#1 = RAdd(r2926,r2925);
          real r2928#3 = r286F;
          real r2929#1 = RMul(r28FC,r2928);
          real r292A#3 = r2867;
          real r292B#1 = RMul(r28FF,r292A);
          real r292C#3 = r28A1;
          real r292D#1 = RMul(r2902,r292C);
          real r292E#1 = RAdd(r2929,r292B);
          real r292F#1 = RAdd(r292E,r292D);
          real r2931#3 = r2874;
          real r2932#1 = RMul(r28FC,r2931);
          real r2933#3 = r2886;
          real r2934#1 = RMul(r28FF,r2933);
          real r2935#3 = r2857;
          real r2936#1 = RMul(r2902,r2935);
          real r2937#1 = RAdd(r2932,r2934);
          real r2938#1 = RAdd(r2937,r2936);
          real r2939#3 = r2877;
          real r293A#1 = RMul(r28FC,r2939);
          real r293B#3 = r2889;
          real r293C#1 = RMul(r28FF,r293B);
          real r293D#3 = r285F;
          real r293E#1 = RMul(r2902,r293D);
          real r293F#1 = RAdd(r293A,r293C);
          real r2940#1 = RAdd(r293F,r293E);
          real r2941#3 = r287A;
          real r2942#1 = RMul(r28FC,r2941);
          real r2943#3 = r288C;
          real r2944#1 = RMul(r28FF,r2943);
          real r2945#3 = r2867;
          real r2946#1 = RMul(r2902,r2945);
          real r2947#1 = RAdd(r2942,r2944);
          real r2948#1 = RAdd(r2947,r2946);
          real r294B#9 = r27B1;
          real r294C#1 = RMul(r294B,r28FD);
          real r294D#9 = r27CF;
          real r294E#1 = RMul(r294D,r2900);
          real r294F#9 = r27E9;
          real r2950#1 = RMul(r294F,r2903);
          real r2951#1 = RAdd(r294C,r294E);
          real r2952#1 = RAdd(r2951,r2950);
          real r2953#1 = RMul(r294B,r2907);
          real r2954#1 = RMul(r294D,r2909);
          real r2955#1 = RMul(r294F,r290B);
          real r2956#1 = RAdd(r2953,r2954);
          real r2957#1 = RAdd(r2956,r2955);
          real r2958#1 = RMul(r294B,r290F);
          real r2959#1 = RMul(r294D,r2911);
          real r295A#1 = RMul(r294F,r2913);
          real r295B#1 = RAdd(r2958,r2959);
          real r295C#1 = RAdd(r295B,r295A);
          real r295E#1 = RMul(r294B,r2918);
          real r295F#1 = RMul(r294D,r291A);
          real r2960#1 = RMul(r294F,r291C);
          real r2961#1 = RAdd(r295E,r295F);
          real r2962#1 = RAdd(r2961,r2960);
          real r2963#1 = RMul(r294B,r2920);
          real r2964#1 = RMul(r294D,r2922);
          real r2965#1 = RMul(r294F,r2924);
          real r2966#1 = RAdd(r2963,r2964);
          real r2967#1 = RAdd(r2966,r2965);
          real r2968#1 = RMul(r294B,r2928);
          real r2969#1 = RMul(r294D,r292A);
          real r296A#1 = RMul(r294F,r292C);
          real r296B#1 = RAdd(r2968,r2969);
          real r296C#1 = RAdd(r296B,r296A);
          real r296E#1 = RMul(r294B,r2931);
          real r296F#1 = RMul(r294D,r2933);
          real r2970#1 = RMul(r294F,r2935);
          real r2971#1 = RAdd(r296E,r296F);
          real r2972#1 = RAdd(r2971,r2970);
          real r2973#1 = RMul(r294B,r2939);
          real r2974#1 = RMul(r294D,r293B);
          real r2975#1 = RMul(r294F,r293D);
          real r2976#1 = RAdd(r2973,r2974);
          real r2977#1 = RAdd(r2976,r2975);
          real r2978#1 = RMul(r294B,r2941);
          real r2979#1 = RMul(r294D,r2943);
          real r297A#1 = RMul(r294F,r2945);
          real r297B#1 = RAdd(r2978,r2979);
          real r297C#1 = RAdd(r297B,r297A);
          real r297F#9 = r27BC;
          real r2980#1 = RMul(r297F,r28FD);
          real r2981#9 = r27D6;
          real r2982#1 = RMul(r2981,r2900);
          real r2983#9 = r27F0;
          real r2984#1 = RMul(r2983,r2903);
          real r2985#1 = RAdd(r2980,r2982);
          real r2986#1 = RAdd(r2985,r2984);
          real r2987#1 = RMul(r297F,r2907);
          real r2988#1 = RMul(r2981,r2909);
          real r2989#1 = RMul(r2983,r290B);
          real r298A#1 = RAdd(r2987,r2988);
          real r298B#1 = RAdd(r298A,r2989);
          real r298C#1 = RMul(r297F,r290F);
          real r298D#1 = RMul(r2981,r2911);
          real r298E#1 = RMul(r2983,r2913);
          real r298F#1 = RAdd(r298C,r298D);
          real r2990#1 = RAdd(r298F,r298E);
          real r2992#1 = RMul(r297F,r2918);
          real r2993#1 = RMul(r2981,r291A);
          real r2994#1 = RMul(r2983,r291C);
          real r2995#1 = RAdd(r2992,r2993);
          real r2996#1 = RAdd(r2995,r2994);
          real r2997#1 = RMul(r297F,r2920);
          real r2998#1 = RMul(r2981,r2922);
          real r2999#1 = RMul(r2983,r2924);
          real r299A#1 = RAdd(r2997,r2998);
          real r299B#1 = RAdd(r299A,r2999);
          real r299C#1 = RMul(r297F,r2928);
          real r299D#1 = RMul(r2981,r292A);
          real r299E#1 = RMul(r2983,r292C);
          real r299F#1 = RAdd(r299C,r299D);
          real r29A0#1 = RAdd(r299F,r299E);
          real r29A2#1 = RMul(r297F,r2931);
          real r29A3#1 = RMul(r2981,r2933);
          real r29A4#1 = RMul(r2983,r2935);
          real r29A5#1 = RAdd(r29A2,r29A3);
          real r29A6#1 = RAdd(r29A5,r29A4);
          real r29A7#1 = RMul(r297F,r2939);
          real r29A8#1 = RMul(r2981,r293B);
          real r29A9#1 = RMul(r2983,r293D);
          real r29AA#1 = RAdd(r29A7,r29A8);
          real r29AB#1 = RAdd(r29AA,r29A9);
          real r29AC#1 = RMul(r297F,r2941);
          real r29AD#1 = RMul(r2981,r2943);
          real r29AE#1 = RMul(r2983,r2945);
          real r29AF#1 = RAdd(r29AC,r29AD);
          real r29B0#1 = RAdd(r29AF,r29AE);
          real r2A6D#1 = dof_load272F;
          real r2A6E#3 = basisEval2781;
          real r2A6F#1 = RMul(r2A6D,r2A6E);
          real r2A70#1 = dof_load2738;
          real r2A71#3 = basisEval2782;
          real r2A72#1 = RMul(r2A70,r2A71);
          real r2A73#1 = dof_load2741;
          real r2A74#3 = basisEval2783;
          real r2A75#1 = RMul(r2A73,r2A74);
          real r2A76#1 = dof_load274A;
          real r2A77#3 = basisEval2783;
          real r2A78#1 = RMul(r2A76,r2A77);
          real r2A79#1 = RAdd(r2A6F,r2A72);
          real r2A7A#1 = RAdd(r2A79,r2A75);
          real r2A7B#1 = RAdd(r2A7A,r2A78);
          real r2A7C#1 = dof_load2730;
          real r2A7D#1 = RMul(r2A7C,r2A6E);
          real r2A7E#1 = dof_load2739;
          real r2A7F#1 = RMul(r2A7E,r2A71);
          real r2A80#1 = dof_load2742;
          real r2A81#1 = RMul(r2A80,r2A74);
          real r2A82#1 = dof_load274B;
          real r2A83#1 = RMul(r2A82,r2A77);
          real r2A84#1 = RAdd(r2A7D,r2A7F);
          real r2A85#1 = RAdd(r2A84,r2A81);
          real r2A86#1 = RAdd(r2A85,r2A83);
          real r2A87#1 = dof_load2731;
          real r2A88#1 = RMul(r2A87,r2A6E);
          real r2A89#1 = dof_load273A;
          real r2A8A#1 = RMul(r2A89,r2A71);
          real r2A8B#1 = dof_load2743;
          real r2A8C#1 = RMul(r2A8B,r2A74);
          real r2A8D#1 = dof_load274C;
          real r2A8E#1 = RMul(r2A8D,r2A77);
          real r2A8F#1 = RAdd(r2A88,r2A8A);
          real r2A90#1 = RAdd(r2A8F,r2A8C);
          real r2A91#1 = RAdd(r2A90,r2A8E);
          tensor[3] probe_l_122A6C#1 = <tensor[3]>[r2A7B,r2A86,r2A91];
          real r2ABA#1 = dof_load272F;
          real r2ABB#3 = basisEval2781;
          real r2ABC#1 = RMul(r2ABA,r2ABB);
          real r2ABD#1 = dof_load2738;
          real r2ABE#3 = basisEval2783;
          real r2ABF#1 = RMul(r2ABD,r2ABE);
          real r2AC0#1 = dof_load2741;
          real r2AC1#3 = basisEval2782;
          real r2AC2#1 = RMul(r2AC0,r2AC1);
          real r2AC3#1 = dof_load274A;
          real r2AC4#3 = basisEval2783;
          real r2AC5#1 = RMul(r2AC3,r2AC4);
          real r2AC6#1 = RAdd(r2ABC,r2ABF);
          real r2AC7#1 = RAdd(r2AC6,r2AC2);
          real r2AC8#1 = RAdd(r2AC7,r2AC5);
          real r2AC9#1 = dof_load2730;
          real r2ACA#1 = RMul(r2AC9,r2ABB);
          real r2ACB#1 = dof_load2739;
          real r2ACC#1 = RMul(r2ACB,r2ABE);
          real r2ACD#1 = dof_load2742;
          real r2ACE#1 = RMul(r2ACD,r2AC1);
          real r2ACF#1 = dof_load274B;
          real r2AD0#1 = RMul(r2ACF,r2AC4);
          real r2AD1#1 = RAdd(r2ACA,r2ACC);
          real r2AD2#1 = RAdd(r2AD1,r2ACE);
          real r2AD3#1 = RAdd(r2AD2,r2AD0);
          real r2AD4#1 = dof_load2731;
          real r2AD5#1 = RMul(r2AD4,r2ABB);
          real r2AD6#1 = dof_load273A;
          real r2AD7#1 = RMul(r2AD6,r2ABE);
          real r2AD8#1 = dof_load2743;
          real r2AD9#1 = RMul(r2AD8,r2AC1);
          real r2ADA#1 = dof_load274C;
          real r2ADB#1 = RMul(r2ADA,r2AC4);
          real r2ADC#1 = RAdd(r2AD5,r2AD7);
          real r2ADD#1 = RAdd(r2ADC,r2AD9);
          real r2ADE#1 = RAdd(r2ADD,r2ADB);
          tensor[3] probe_l_132AB9#3 = <tensor[3]>[r2AC8,r2AD3,r2ADE];
          real r2B07#1 = dof_load272F;
          real r2B08#3 = basisEval2781;
          real r2B09#1 = RMul(r2B07,r2B08);
          real r2B0A#1 = dof_load2738;
          real r2B0B#3 = basisEval2783;
          real r2B0C#1 = RMul(r2B0A,r2B0B);
          real r2B0D#1 = dof_load2741;
          real r2B0E#3 = basisEval2783;
          real r2B0F#1 = RMul(r2B0D,r2B0E);
          real r2B10#1 = dof_load274A;
          real r2B11#3 = basisEval2782;
          real r2B12#1 = RMul(r2B10,r2B11);
          real r2B13#1 = RAdd(r2B09,r2B0C);
          real r2B14#1 = RAdd(r2B13,r2B0F);
          real r2B15#1 = RAdd(r2B14,r2B12);
          real r2B16#1 = dof_load2730;
          real r2B17#1 = RMul(r2B16,r2B08);
          real r2B18#1 = dof_load2739;
          real r2B19#1 = RMul(r2B18,r2B0B);
          real r2B1A#1 = dof_load2742;
          real r2B1B#1 = RMul(r2B1A,r2B0E);
          real r2B1C#1 = dof_load274B;
          real r2B1D#1 = RMul(r2B1C,r2B11);
          real r2B1E#1 = RAdd(r2B17,r2B19);
          real r2B1F#1 = RAdd(r2B1E,r2B1B);
          real r2B20#1 = RAdd(r2B1F,r2B1D);
          real r2B21#1 = dof_load2731;
          real r2B22#1 = RMul(r2B21,r2B08);
          real r2B23#1 = dof_load273A;
          real r2B24#1 = RMul(r2B23,r2B0B);
          real r2B25#1 = dof_load2743;
          real r2B26#1 = RMul(r2B25,r2B0E);
          real r2B27#1 = dof_load274C;
          real r2B28#1 = RMul(r2B27,r2B11);
          real r2B29#1 = RAdd(r2B22,r2B24);
          real r2B2A#1 = RAdd(r2B29,r2B26);
          real r2B2B#1 = RAdd(r2B2A,r2B28);
          real realLit2B54#3 = 0.e0;
          real r2B55#3 = r2B15;
          real r2B56#3 = RMul(realLit2B54,r2B55);
          real r2B57#3 = r2B20;
          real r2B58#3 = RMul(realLit2B54,r2B57);
          real r2B59#3 = r2B2B;
          real r2B5A#5 = RMul(realLit2B54,r2B59);
          real r2B5B#3 = RAdd(r2B56,r2B58);
          real r2B5C#3 = RAdd(r2B5B,r2B5A);
          real realLit2B5D#3 = 0.1e1;
          real r2B5E#1 = RMul(realLit2B5D,r2B59);
          real r2B5F#1 = RAdd(r2B5B,r2B5E);
          real realLit2B60#3 = -0.1e1;
          real r2B61#1 = RMul(realLit2B60,r2B57);
          real r2B62#1 = RAdd(r2B56,r2B61);
          real r2B63#1 = RAdd(r2B62,r2B5A);
          tensor[3] tensor2B64#1 = <tensor[3]>[r2B5C,r2B5F,r2B63];
          real r2B65#1 = RMul(realLit2B60,r2B59);
          real r2B66#1 = RAdd(r2B5B,r2B65);
          real r2B67#1 = RMul(realLit2B5D,r2B55);
          real r2B68#1 = RAdd(r2B67,r2B58);
          real r2B69#1 = RAdd(r2B68,r2B5A);
          tensor[3] tensor2B6A#1 = <tensor[3]>[r2B66,r2B5C,r2B69];
          real r2B6B#1 = RMul(realLit2B5D,r2B57);
          real r2B6C#1 = RAdd(r2B56,r2B6B);
          real r2B6D#1 = RAdd(r2B6C,r2B5A);
          real r2B6E#1 = RMul(realLit2B60,r2B55);
          real r2B6F#1 = RAdd(r2B6E,r2B58);
          real r2B70#1 = RAdd(r2B6F,r2B5A);
          tensor[3] tensor2B71#1 = <tensor[3]>[r2B6D,r2B70,r2B5C];
          tensor[3] projParam2B93#1 = tensor2B64;
          real vdot2B94#1 = VDot<3>(probe_l_132AB9,projParam2B93);
          tensor[3] projParam2B95#1 = tensor2B6A;
          real vdot2B96#1 = VDot<3>(probe_l_132AB9,projParam2B95);
          tensor[3] projParam2B97#1 = tensor2B71;
          real vdot2B98#1 = VDot<3>(probe_l_132AB9,projParam2B97);
          tensor[3] op1_e3_l_162B92#1 = <tensor[3]>[vdot2B94,vdot2B96,vdot2B98];
          real op1_e3_l_172BA1#1 = VDot<3>(probe_l_122A6C,op1_e3_l_162B92);
          real realLit2BA5#27 = 0.e0;
          real r2BA6#1 = r2906;
          real r2BA7#2 = RMul(realLit2BA5,r2BA6);
          real r2BA8#2 = r290E;
          real r2BA9#1 = RMul(realLit2BA5,r2BA8);
          real r2BAA#2 = r2916;
          real r2BAB#2 = RMul(realLit2BA5,r2BAA);
          real r2BAC#2 = r2952;
          real r2BAD#2 = RMul(realLit2BA5,r2BAC);
          real r2BAE#1 = r2957;
          real r2BAF#3 = RMul(realLit2BA5,r2BAE);
          real realLit2BB0#9 = 0.1e1;
          real r2BB1#2 = r295C;
          real r2BB2#1 = RMul(realLit2BB0,r2BB1);
          real r2BB3#2 = r2986;
          real r2BB4#2 = RMul(realLit2BA5,r2BB3);
          real realLit2BB5#9 = -0.1e1;
          real r2BB6#2 = r298B;
          real r2BB7#1 = RMul(realLit2BB5,r2BB6);
          real r2BB8#1 = r2990;
          real r2BB9#3 = RMul(realLit2BA5,r2BB8);
          real r2BBA#2 = RAdd(r2BA7,r2BA9);
          real r2BBB#1 = RAdd(r2BBA,r2BAB);
          real r2BBC#1 = RAdd(r2BBB,r2BAD);
          real r2BBD#1 = RAdd(r2BBC,r2BAF);
          real r2BBE#1 = RAdd(r2BBD,r2BB2);
          real r2BBF#1 = RAdd(r2BBE,r2BB4);
          real r2BC0#1 = RAdd(r2BBF,r2BB7);
          real r2BC1#1 = RAdd(r2BC0,r2BB9);
          real r2BC2#1 = r291F;
          real r2BC3#2 = RMul(realLit2BA5,r2BC2);
          real r2BC4#2 = r2927;
          real r2BC5#1 = RMul(realLit2BA5,r2BC4);
          real r2BC6#2 = r292F;
          real r2BC7#2 = RMul(realLit2BA5,r2BC6);
          real r2BC8#2 = r2962;
          real r2BC9#2 = RMul(realLit2BA5,r2BC8);
          real r2BCA#1 = r2967;
          real r2BCB#3 = RMul(realLit2BA5,r2BCA);
          real r2BCC#2 = r296C;
          real r2BCD#1 = RMul(realLit2BB0,r2BCC);
          real r2BCE#2 = r2996;
          real r2BCF#2 = RMul(realLit2BA5,r2BCE);
          real r2BD0#2 = r299B;
          real r2BD1#1 = RMul(realLit2BB5,r2BD0);
          real r2BD2#1 = r29A0;
          real r2BD3#3 = RMul(realLit2BA5,r2BD2);
          real r2BD4#2 = RAdd(r2BC3,r2BC5);
          real r2BD5#1 = RAdd(r2BD4,r2BC7);
          real r2BD6#1 = RAdd(r2BD5,r2BC9);
          real r2BD7#1 = RAdd(r2BD6,r2BCB);
          real r2BD8#1 = RAdd(r2BD7,r2BCD);
          real r2BD9#1 = RAdd(r2BD8,r2BCF);
          real r2BDA#1 = RAdd(r2BD9,r2BD1);
          real r2BDB#1 = RAdd(r2BDA,r2BD3);
          real r2BDC#1 = r2938;
          real r2BDD#2 = RMul(realLit2BA5,r2BDC);
          real r2BDE#2 = r2940;
          real r2BDF#1 = RMul(realLit2BA5,r2BDE);
          real r2BE0#2 = r2948;
          real r2BE1#2 = RMul(realLit2BA5,r2BE0);
          real r2BE2#2 = r2972;
          real r2BE3#2 = RMul(realLit2BA5,r2BE2);
          real r2BE4#1 = r2977;
          real r2BE5#3 = RMul(realLit2BA5,r2BE4);
          real r2BE6#2 = r297C;
          real r2BE7#1 = RMul(realLit2BB0,r2BE6);
          real r2BE8#2 = r29A6;
          real r2BE9#2 = RMul(realLit2BA5,r2BE8);
          real r2BEA#2 = r29AB;
          real r2BEB#1 = RMul(realLit2BB5,r2BEA);
          real r2BEC#1 = r29B0;
          real r2BED#3 = RMul(realLit2BA5,r2BEC);
          real r2BEE#2 = RAdd(r2BDD,r2BDF);
          real r2BEF#1 = RAdd(r2BEE,r2BE1);
          real r2BF0#1 = RAdd(r2BEF,r2BE3);
          real r2BF1#1 = RAdd(r2BF0,r2BE5);
          real r2BF2#1 = RAdd(r2BF1,r2BE7);
          real r2BF3#1 = RAdd(r2BF2,r2BE9);
          real r2BF4#1 = RAdd(r2BF3,r2BEB);
          real r2BF5#1 = RAdd(r2BF4,r2BED);
          real r2BF7#1 = RMul(realLit2BB5,r2BAA);
          real r2BF8#2 = RMul(realLit2BA5,r2BB1);
          real r2BF9#1 = RMul(realLit2BB0,r2BB3);
          real r2BFA#2 = RMul(realLit2BA5,r2BB6);
          real r2BFB#1 = RAdd(r2BBA,r2BF7);
          real r2BFC#1 = RAdd(r2BFB,r2BAD);
          real r2BFD#1 = RAdd(r2BFC,r2BAF);
          real r2BFE#1 = RAdd(r2BFD,r2BF8);
          real r2BFF#1 = RAdd(r2BFE,r2BF9);
          real r2C00#1 = RAdd(r2BFF,r2BFA);
          real r2C01#1 = RAdd(r2C00,r2BB9);
          real r2C02#1 = RMul(realLit2BB5,r2BC6);
          real r2C03#2 = RMul(realLit2BA5,r2BCC);
          real r2C04#1 = RMul(realLit2BB0,r2BCE);
          real r2C05#2 = RMul(realLit2BA5,r2BD0);
          real r2C06#1 = RAdd(r2BD4,r2C02);
          real r2C07#1 = RAdd(r2C06,r2BC9);
          real r2C08#1 = RAdd(r2C07,r2BCB);
          real r2C09#1 = RAdd(r2C08,r2C03);
          real r2C0A#1 = RAdd(r2C09,r2C04);
          real r2C0B#1 = RAdd(r2C0A,r2C05);
          real r2C0C#1 = RAdd(r2C0B,r2BD3);
          real r2C0D#1 = RMul(realLit2BB5,r2BE0);
          real r2C0E#2 = RMul(realLit2BA5,r2BE6);
          real r2C0F#1 = RMul(realLit2BB0,r2BE8);
          real r2C10#2 = RMul(realLit2BA5,r2BEA);
          real r2C11#1 = RAdd(r2BEE,r2C0D);
          real r2C12#1 = RAdd(r2C11,r2BE3);
          real r2C13#1 = RAdd(r2C12,r2BE5);
          real r2C14#1 = RAdd(r2C13,r2C0E);
          real r2C15#1 = RAdd(r2C14,r2C0F);
          real r2C16#1 = RAdd(r2C15,r2C10);
          real r2C17#1 = RAdd(r2C16,r2BED);
          real r2C19#1 = RMul(realLit2BB0,r2BA8);
          real r2C1A#1 = RMul(realLit2BB5,r2BAC);
          real r2C1B#1 = RAdd(r2BA7,r2C19);
          real r2C1C#1 = RAdd(r2C1B,r2BAB);
          real r2C1D#1 = RAdd(r2C1C,r2C1A);
          real r2C1E#1 = RAdd(r2C1D,r2BAF);
          real r2C1F#1 = RAdd(r2C1E,r2BF8);
          real r2C20#1 = RAdd(r2C1F,r2BB4);
          real r2C21#1 = RAdd(r2C20,r2BFA);
          real r2C22#1 = RAdd(r2C21,r2BB9);
          real r2C23#1 = RMul(realLit2BB0,r2BC4);
          real r2C24#1 = RMul(realLit2BB5,r2BC8);
          real r2C25#1 = RAdd(r2BC3,r2C23);
          real r2C26#1 = RAdd(r2C25,r2BC7);
          real r2C27#1 = RAdd(r2C26,r2C24);
          real r2C28#1 = RAdd(r2C27,r2BCB);
          real r2C29#1 = RAdd(r2C28,r2C03);
          real r2C2A#1 = RAdd(r2C29,r2BCF);
          real r2C2B#1 = RAdd(r2C2A,r2C05);
          real r2C2C#1 = RAdd(r2C2B,r2BD3);
          real r2C2D#1 = RMul(realLit2BB0,r2BDE);
          real r2C2E#1 = RMul(realLit2BB5,r2BE2);
          real r2C2F#1 = RAdd(r2BDD,r2C2D);
          real r2C30#1 = RAdd(r2C2F,r2BE1);
          real r2C31#1 = RAdd(r2C30,r2C2E);
          real r2C32#1 = RAdd(r2C31,r2BE5);
          real r2C33#1 = RAdd(r2C32,r2C0E);
          real r2C34#1 = RAdd(r2C33,r2BE9);
          real r2C35#1 = RAdd(r2C34,r2C10);
          real r2C36#1 = RAdd(r2C35,r2BED);
          real realLit2CCE#1 = 0.2e1;
          real op1_e3_l_192CCD#9 = RMul(realLit2CCE,op1_e3_l_172BA1);
          real r2CD3#1 = r2BC1;
          real r2CD4#1 = RDiv(r2CD3,op1_e3_l_192CCD);
          real r2CD5#1 = r2BDB;
          real r2CD6#1 = RDiv(r2CD5,op1_e3_l_192CCD);
          real r2CD7#1 = r2BF5;
          real r2CD8#1 = RDiv(r2CD7,op1_e3_l_192CCD);
          real r2CDA#1 = r2C01;
          real r2CDB#1 = RDiv(r2CDA,op1_e3_l_192CCD);
          real r2CDC#1 = r2C0C;
          real r2CDD#1 = RDiv(r2CDC,op1_e3_l_192CCD);
          real r2CDE#1 = r2C17;
          real r2CDF#1 = RDiv(r2CDE,op1_e3_l_192CCD);
          real r2CE1#1 = r2C22;
          real r2CE2#1 = RDiv(r2CE1,op1_e3_l_192CCD);
          real r2CE3#1 = r2C2C;
          real r2CE4#1 = RDiv(r2CE3,op1_e3_l_192CCD);
          real r2CE5#1 = r2C36;
          real r2CE6#1 = RDiv(r2CE5,op1_e3_l_192CCD);
          real r2D00#3 = vdot26F8;
          real r2D01#1 = r2CD4;
          real r2D02#1 = RMul(r2D00,r2D01);
          real r2D03#3 = vdot26FA;
          real r2D04#1 = r2CDB;
          real r2D05#1 = RMul(r2D03,r2D04);
          real r2D06#3 = vdot26FC;
          real r2D07#1 = r2CE2;
          real r2D08#1 = RMul(r2D06,r2D07);
          real r2D09#1 = RAdd(r2D02,r2D05);
          real r2D0A#1 = RAdd(r2D09,r2D08);
          real r2D0B#1 = r2CD6;
          real r2D0C#1 = RMul(r2D00,r2D0B);
          real r2D0D#1 = r2CDD;
          real r2D0E#1 = RMul(r2D03,r2D0D);
          real r2D0F#1 = r2CE4;
          real r2D10#1 = RMul(r2D06,r2D0F);
          real r2D11#1 = RAdd(r2D0C,r2D0E);
          real r2D12#1 = RAdd(r2D11,r2D10);
          real r2D13#1 = r2CD8;
          real r2D14#1 = RMul(r2D00,r2D13);
          real r2D15#1 = r2CDF;
          real r2D16#1 = RMul(r2D03,r2D15);
          real r2D17#1 = r2CE6;
          real r2D18#1 = RMul(r2D06,r2D17);
          real r2D19#1 = RAdd(r2D14,r2D16);
          real r2D1A#1 = RAdd(r2D19,r2D18);
          tensor[3] gradResult2CFF#1 = <tensor[3]>[r2D0A,r2D12,r2D1A];
          goto JOIN2D3C
        JOIN2D3C:  preds = [ASSIGN2D37,MASSIGN2D45]
          tensor[3] gradResult2D38#1 = phi(gradResult2CFF,gradResult1326)
          real result2D39#1 = phi(result210E,result1324)
          femData:MeshCell c2D3A#1 = phi(c1A81,c1322)
          tensor[3] translated2D3B#1 = phi(translated1A83,translated1320)
          self.translated = translated2D3B;
          self.valid = valid1A7A;
          self.c = c2D3A;
          self.result = result2D39;
          self.gradResult = gradResult2D38;
          stabilize
        ASSIGN2D44:  preds = [COND1A7C]
          string _t2D43#1 = "Warning: Invalid!\n";
          Print<[string]>(_t2D43);
          goto JOIN2D3C
    end update
  end gg
## initial strand creation
  COLLECTION
    ENTRY2D47:  preds = []
      tensor[3][] points2D48#1 = globals.points12C6;
    FOREACH2D4B:  preds = [ASSIGN2D49,NEXT2D4D]
      foreach (i2D4A in points2D48) on exit goto RETURN2D4E
      new gg(i2D4A);
      goto FOREACH2D4B
    RETURN2D4E:  preds = [FOREACH2D4B]
      return
#### end program ####
##### low-ir: after value numbering ####
## properties
  GlobalInit HasInputs HasGlobals ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
## globals
  input points12C6 (points) = <no-default>
  input cube12C7 (cube) = <no-default>
  input 0space0342_intermedateGlobal12C8 (space) = <no-default>
  input 0data0344_intermedateGlobal12C9 (data) = <no-default>
  global femData:MeshCell[] 0cell_cube12CA
  global femData:Mesh _t12CB
  global femData:Space _tX12CC
  global femData:FemFunc data12CD
## functions
  function femData:MeshPos findPos132E (femData:Mesh mesh132F#19, tensor[3] pos1330#3) {
    ENTRY1331:  preds = []
      real _t1332#3 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
      tensor[3] xn1334#1 = <tensor[3]>[_t1332,_t1332,_t1332];
      int newtonInt1336#1 = 0;
      int[] yayCells1338#1 = ExtractFemItem2<tensor[3],int[],NearbyCell(File=spat.in)(Mesh)>(mesh132F,pos1330);
    FOREACH133B:  preds = [ASSIGN1339,NEXT1A70]
      foreach (cellItter133A in yayCells1338) on exit goto ASSIGN1A72
        tensor[3] xn1A6F#1 = phi(xn1334,xn1910)
      int _t133C#1 = 16;
      int[] _t133E#1 = Range(newtonInt1336,_t133C);
    FOREACH1341:  preds = [ASSIGN133F,NEXT1A6E]
      foreach (newtonItter1340 in _t133E) on exit goto NEXT1A70
        tensor[3] xn1910#5 = phi(xn1A6F,xn19D4)
      int ilit1343#1 = 4;
      int mulRes1344#4 = IMul(cellItter133A,ilit1343);
      int idx1347#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(mesh132F,mulRes1344);
      int ilit1348#5 = 1;
      int addRes1349#1 = IAdd(mulRes1344,ilit1348);
      int idx134A#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(mesh132F,addRes1349);
      int ilit134B#5 = 2;
      int addRes134C#1 = IAdd(mulRes1344,ilit134B);
      int idx134D#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(mesh132F,addRes134C);
      int ilit134E#5 = 3;
      int addRes134F#1 = IAdd(mulRes1344,ilit134E);
      int idx1350#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(mesh132F,addRes134F);
      int mulRes1366#3 = IMul(ilit134E,idx1347);
      int addRes1369#1 = IAdd(ilit1348,mulRes1366);
      int addRes136B#1 = IAdd(ilit134B,mulRes1366);
      real dof_load136C#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh132F,mulRes1366);
      real dof_load136D#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh132F,addRes1369);
      real dof_load136E#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh132F,addRes136B);
      int mulRes1371#3 = IMul(ilit134E,idx134A);
      int addRes1373#1 = IAdd(ilit1348,mulRes1371);
      int addRes1374#1 = IAdd(ilit134B,mulRes1371);
      real dof_load1375#3 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh132F,mulRes1371);
      real dof_load1376#3 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh132F,addRes1373);
      real dof_load1377#3 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh132F,addRes1374);
      int mulRes137A#3 = IMul(ilit134E,idx134D);
      int addRes137C#1 = IAdd(ilit1348,mulRes137A);
      int addRes137D#1 = IAdd(ilit134B,mulRes137A);
      real dof_load137E#3 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh132F,mulRes137A);
      real dof_load137F#3 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh132F,addRes137C);
      real dof_load1380#3 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh132F,addRes137D);
      int mulRes1383#3 = IMul(ilit134E,idx1350);
      int addRes1385#1 = IAdd(ilit1348,mulRes1383);
      int addRes1386#1 = IAdd(ilit134B,mulRes1383);
      real dof_load1387#3 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh132F,mulRes1383);
      real dof_load1388#3 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh132F,addRes1385);
      real dof_load1389#3 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh132F,addRes1386);
      real coeff13BA#22 = -0.1e1;
      real one13BB#33 = 0.1e1;
      real prod13BC#2 = RMul(one13BB,one13BB);
      real prod13BD#2 = RMul(one13BB,prod13BC);
      real basisEval13BE#3 = RMul(coeff13BA,prod13BD);
      real basisEval13BF#10 = RMul(one13BB,prod13BD);
      real basisEval13C0#45 = 0.e0;
      real r13D7#2 = RMul(dof_load136C,basisEval13BE);
      real r13DA#1 = RMul(dof_load1375,basisEval13BF);
      real r13DD#2 = RMul(dof_load137E,basisEval13C0);
      real r13E0#2 = RMul(dof_load1387,basisEval13C0);
      real r13E1#1 = RAdd(r13D7,r13DA);
      real r13E2#1 = RAdd(r13E1,r13DD);
      real r13E3#13 = RAdd(r13E2,r13E0);
      real r13E7#1 = RMul(dof_load1375,basisEval13C0);
      real r13E9#1 = RMul(dof_load137E,basisEval13BF);
      real r13EC#2 = RAdd(r13D7,r13E7);
      real r13ED#1 = RAdd(r13EC,r13E9);
      real r13EE#13 = RAdd(r13ED,r13E0);
      real r13F6#1 = RMul(dof_load1387,basisEval13BF);
      real r13F8#1 = RAdd(r13EC,r13DD);
      real r13F9#12 = RAdd(r13F8,r13F6);
      real r13FC#2 = RMul(dof_load136D,basisEval13BE);
      real r13FE#1 = RMul(dof_load1376,basisEval13BF);
      real r1400#2 = RMul(dof_load137F,basisEval13C0);
      real r1402#2 = RMul(dof_load1388,basisEval13C0);
      real r1403#1 = RAdd(r13FC,r13FE);
      real r1404#1 = RAdd(r1403,r1400);
      real r1405#13 = RAdd(r1404,r1402);
      real r1407#1 = RMul(dof_load1376,basisEval13C0);
      real r1408#1 = RMul(dof_load137F,basisEval13BF);
      real r140A#2 = RAdd(r13FC,r1407);
      real r140B#1 = RAdd(r140A,r1408);
      real r140C#13 = RAdd(r140B,r1402);
      real r1410#1 = RMul(dof_load1388,basisEval13BF);
      real r1412#1 = RAdd(r140A,r1400);
      real r1413#12 = RAdd(r1412,r1410);
      real r1416#2 = RMul(dof_load136E,basisEval13BE);
      real r1418#1 = RMul(dof_load1377,basisEval13BF);
      real r141A#2 = RMul(dof_load1380,basisEval13C0);
      real r141C#2 = RMul(dof_load1389,basisEval13C0);
      real r141D#1 = RAdd(r1416,r1418);
      real r141E#1 = RAdd(r141D,r141A);
      real r141F#13 = RAdd(r141E,r141C);
      real r1421#1 = RMul(dof_load1377,basisEval13C0);
      real r1422#1 = RMul(dof_load1380,basisEval13BF);
      real r1424#2 = RAdd(r1416,r1421);
      real r1425#1 = RAdd(r1424,r1422);
      real r1426#13 = RAdd(r1425,r141C);
      real r142A#1 = RMul(dof_load1389,basisEval13BF);
      real r142C#1 = RAdd(r1424,r141A);
      real r142D#12 = RAdd(r142C,r142A);
      real r148E#3 = RMul(basisEval13C0,r13E3);
      real r1490#3 = RMul(basisEval13C0,r1405);
      real r1492#5 = RMul(basisEval13C0,r141F);
      real r1493#3 = RAdd(r148E,r1490);
      real r1494#9 = RAdd(r1493,r1492);
      real r1496#3 = RMul(basisEval13C0,r13EE);
      real r1498#3 = RMul(basisEval13C0,r140C);
      real r149A#5 = RMul(basisEval13C0,r1426);
      real r149B#3 = RAdd(r1496,r1498);
      real r149C#9 = RAdd(r149B,r149A);
      real r149E#3 = RMul(basisEval13C0,r13F9);
      real r14A0#3 = RMul(basisEval13C0,r1413);
      real r14A2#5 = RMul(basisEval13C0,r142D);
      real r14A3#3 = RAdd(r149E,r14A0);
      real r14A4#12 = RAdd(r14A3,r14A2);
      real r14A7#1 = RMul(coeff13BA,r141F);
      real r14A8#3 = RAdd(r1493,r14A7);
      real r14A9#1 = RMul(coeff13BA,r1426);
      real r14AA#3 = RAdd(r149B,r14A9);
      real r14AB#1 = RMul(coeff13BA,r142D);
      real r14AC#4 = RAdd(r14A3,r14AB);
      real r14AF#1 = RMul(one13BB,r1405);
      real r14B0#1 = RAdd(r148E,r14AF);
      real r14B1#3 = RAdd(r14B0,r1492);
      real r14B2#1 = RMul(one13BB,r140C);
      real r14B3#1 = RAdd(r1496,r14B2);
      real r14B4#3 = RAdd(r14B3,r149A);
      real r14B5#1 = RMul(one13BB,r1413);
      real r14B6#1 = RAdd(r149E,r14B5);
      real r14B7#4 = RAdd(r14B6,r14A2);
      real r14BA#1 = RMul(one13BB,r141F);
      real r14BB#3 = RAdd(r1493,r14BA);
      real r14BC#1 = RMul(one13BB,r1426);
      real r14BD#3 = RAdd(r149B,r14BC);
      real r14BE#1 = RMul(one13BB,r142D);
      real r14BF#4 = RAdd(r14A3,r14BE);
      real r14C1#1 = RMul(coeff13BA,r13E3);
      real r14C2#1 = RAdd(r14C1,r1490);
      real r14C3#3 = RAdd(r14C2,r1492);
      real r14C4#1 = RMul(coeff13BA,r13EE);
      real r14C5#1 = RAdd(r14C4,r1498);
      real r14C6#3 = RAdd(r14C5,r149A);
      real r14C7#1 = RMul(coeff13BA,r13F9);
      real r14C8#1 = RAdd(r14C7,r14A0);
      real r14C9#4 = RAdd(r14C8,r14A2);
      real r14CC#1 = RMul(coeff13BA,r1405);
      real r14CD#1 = RAdd(r148E,r14CC);
      real r14CE#3 = RAdd(r14CD,r1492);
      real r14CF#1 = RMul(coeff13BA,r140C);
      real r14D0#1 = RAdd(r1496,r14CF);
      real r14D1#3 = RAdd(r14D0,r149A);
      real r14D2#1 = RMul(coeff13BA,r1413);
      real r14D3#1 = RAdd(r149E,r14D2);
      real r14D4#4 = RAdd(r14D3,r14A2);
      real r14D6#1 = RMul(one13BB,r13E3);
      real r14D7#1 = RAdd(r14D6,r1490);
      real r14D8#3 = RAdd(r14D7,r1492);
      real r14D9#1 = RMul(one13BB,r13EE);
      real r14DA#1 = RAdd(r14D9,r1498);
      real r14DB#3 = RAdd(r14DA,r149A);
      real r14DC#1 = RMul(one13BB,r13F9);
      real r14DD#1 = RAdd(r14DC,r14A0);
      real r14DE#4 = RAdd(r14DD,r14A2);
      real r153B#1 = RMul(r13E3,r1494);
      real r153E#1 = RMul(r1405,r14BB);
      real r1541#1 = RMul(r141F,r14CE);
      real r1542#1 = RAdd(r153B,r153E);
      real r1543#1 = RAdd(r1542,r1541);
      real r1545#1 = RMul(r13E3,r149C);
      real r1547#1 = RMul(r1405,r14BD);
      real r1549#1 = RMul(r141F,r14D1);
      real r154A#1 = RAdd(r1545,r1547);
      real r154B#2 = RAdd(r154A,r1549);
      real r154D#1 = RMul(r13E3,r14A4);
      real r154F#1 = RMul(r1405,r14BF);
      real r1551#1 = RMul(r141F,r14D4);
      real r1552#1 = RAdd(r154D,r154F);
      real r1553#2 = RAdd(r1552,r1551);
      real r1556#1 = RMul(r13E3,r14A8);
      real r1558#1 = RMul(r1405,r1494);
      real r155A#1 = RMul(r141F,r14D8);
      real r155B#1 = RAdd(r1556,r1558);
      real r155C#1 = RAdd(r155B,r155A);
      real r155E#1 = RMul(r13E3,r14AA);
      real r1560#1 = RMul(r1405,r149C);
      real r1562#1 = RMul(r141F,r14DB);
      real r1563#1 = RAdd(r155E,r1560);
      real r1564#2 = RAdd(r1563,r1562);
      real r1566#1 = RMul(r13E3,r14AC);
      real r1568#1 = RMul(r1405,r14A4);
      real r156A#1 = RMul(r141F,r14DE);
      real r156B#1 = RAdd(r1566,r1568);
      real r156C#2 = RAdd(r156B,r156A);
      real r156F#1 = RMul(r13E3,r14B1);
      real r1571#1 = RMul(r1405,r14C3);
      real r1573#1 = RMul(r141F,r1494);
      real r1574#1 = RAdd(r156F,r1571);
      real r1575#1 = RAdd(r1574,r1573);
      real r1577#1 = RMul(r13E3,r14B4);
      real r1579#1 = RMul(r1405,r14C6);
      real r157B#1 = RMul(r141F,r149C);
      real r157C#1 = RAdd(r1577,r1579);
      real r157D#2 = RAdd(r157C,r157B);
      real r157F#1 = RMul(r13E3,r14B7);
      real r1581#1 = RMul(r1405,r14C9);
      real r1583#1 = RMul(r141F,r14A4);
      real r1584#1 = RAdd(r157F,r1581);
      real r1585#2 = RAdd(r1584,r1583);
      real r1589#1 = RMul(r13EE,r1494);
      real r158B#1 = RMul(r140C,r14BB);
      real r158D#1 = RMul(r1426,r14CE);
      real r158E#1 = RAdd(r1589,r158B);
      real r158F#2 = RAdd(r158E,r158D);
      real r1590#1 = RMul(r13EE,r149C);
      real r1591#1 = RMul(r140C,r14BD);
      real r1592#1 = RMul(r1426,r14D1);
      real r1593#1 = RAdd(r1590,r1591);
      real r1594#1 = RAdd(r1593,r1592);
      real r1595#1 = RMul(r13EE,r14A4);
      real r1596#1 = RMul(r140C,r14BF);
      real r1597#1 = RMul(r1426,r14D4);
      real r1598#1 = RAdd(r1595,r1596);
      real r1599#2 = RAdd(r1598,r1597);
      real r159B#1 = RMul(r13EE,r14A8);
      real r159C#1 = RMul(r140C,r1494);
      real r159D#1 = RMul(r1426,r14D8);
      real r159E#1 = RAdd(r159B,r159C);
      real r159F#2 = RAdd(r159E,r159D);
      real r15A0#1 = RMul(r13EE,r14AA);
      real r15A1#1 = RMul(r140C,r149C);
      real r15A2#1 = RMul(r1426,r14DB);
      real r15A3#1 = RAdd(r15A0,r15A1);
      real r15A4#1 = RAdd(r15A3,r15A2);
      real r15A5#1 = RMul(r13EE,r14AC);
      real r15A6#1 = RMul(r140C,r14A4);
      real r15A7#1 = RMul(r1426,r14DE);
      real r15A8#1 = RAdd(r15A5,r15A6);
      real r15A9#2 = RAdd(r15A8,r15A7);
      real r15AB#1 = RMul(r13EE,r14B1);
      real r15AC#1 = RMul(r140C,r14C3);
      real r15AD#1 = RMul(r1426,r1494);
      real r15AE#1 = RAdd(r15AB,r15AC);
      real r15AF#2 = RAdd(r15AE,r15AD);
      real r15B0#1 = RMul(r13EE,r14B4);
      real r15B1#1 = RMul(r140C,r14C6);
      real r15B2#1 = RMul(r1426,r149C);
      real r15B3#1 = RAdd(r15B0,r15B1);
      real r15B4#1 = RAdd(r15B3,r15B2);
      real r15B5#1 = RMul(r13EE,r14B7);
      real r15B6#1 = RMul(r140C,r14C9);
      real r15B7#1 = RMul(r1426,r14A4);
      real r15B8#1 = RAdd(r15B5,r15B6);
      real r15B9#2 = RAdd(r15B8,r15B7);
      real r15BD#1 = RMul(r13F9,r1494);
      real r15BF#1 = RMul(r1413,r14BB);
      real r15C1#1 = RMul(r142D,r14CE);
      real r15C2#1 = RAdd(r15BD,r15BF);
      real r15C3#2 = RAdd(r15C2,r15C1);
      real r15C4#1 = RMul(r13F9,r149C);
      real r15C5#1 = RMul(r1413,r14BD);
      real r15C6#1 = RMul(r142D,r14D1);
      real r15C7#1 = RAdd(r15C4,r15C5);
      real r15C8#2 = RAdd(r15C7,r15C6);
      real r15C9#1 = RMul(r13F9,r14A4);
      real r15CA#1 = RMul(r1413,r14BF);
      real r15CB#1 = RMul(r142D,r14D4);
      real r15CC#1 = RAdd(r15C9,r15CA);
      real r15CD#1 = RAdd(r15CC,r15CB);
      real r15CF#1 = RMul(r13F9,r14A8);
      real r15D0#1 = RMul(r1413,r1494);
      real r15D1#1 = RMul(r142D,r14D8);
      real r15D2#1 = RAdd(r15CF,r15D0);
      real r15D3#2 = RAdd(r15D2,r15D1);
      real r15D4#1 = RMul(r13F9,r14AA);
      real r15D5#1 = RMul(r1413,r149C);
      real r15D6#1 = RMul(r142D,r14DB);
      real r15D7#1 = RAdd(r15D4,r15D5);
      real r15D8#2 = RAdd(r15D7,r15D6);
      real r15D9#1 = RMul(r13F9,r14AC);
      real r15DA#1 = RMul(r1413,r14A4);
      real r15DB#1 = RMul(r142D,r14DE);
      real r15DC#1 = RAdd(r15D9,r15DA);
      real r15DD#1 = RAdd(r15DC,r15DB);
      real r15DF#1 = RMul(r13F9,r14B1);
      real r15E0#1 = RMul(r1413,r14C3);
      real r15E1#1 = RMul(r142D,r1494);
      real r15E2#1 = RAdd(r15DF,r15E0);
      real r15E3#2 = RAdd(r15E2,r15E1);
      real r15E4#1 = RMul(r13F9,r14B4);
      real r15E5#1 = RMul(r1413,r14C6);
      real r15E6#1 = RMul(r142D,r149C);
      real r15E7#1 = RAdd(r15E4,r15E5);
      real r15E8#2 = RAdd(r15E7,r15E6);
      real r15E9#1 = RMul(r13F9,r14B7);
      real r15EA#1 = RMul(r1413,r14C9);
      real r15EB#1 = RMul(r142D,r14A4);
      real r15EC#1 = RAdd(r15E9,r15EA);
      real r15ED#1 = RAdd(r15EC,r15EB);
      tensor[3] probe_l_1416A9#1 = <tensor[3]>[r13E3,r1405,r141F];
      tensor[3] probe_l_1516F6#3 = <tensor[3]>[r13EE,r140C,r1426];
      tensor[3] tensor17A1#1 = <tensor[3]>[r14A4,r14BF,r14D4];
      tensor[3] tensor17A7#1 = <tensor[3]>[r14AC,r14A4,r14DE];
      tensor[3] tensor17AE#1 = <tensor[3]>[r14B7,r14C9,r14A4];
      real vdot17D1#1 = VDot<3>(probe_l_1516F6,tensor17A1);
      real vdot17D3#1 = VDot<3>(probe_l_1516F6,tensor17A7);
      real vdot17D5#1 = VDot<3>(probe_l_1516F6,tensor17AE);
      tensor[3] op1_e3_l_1817CF#1 = <tensor[3]>[vdot17D1,vdot17D3,vdot17D5];
      real op1_e3_l_1917DE#1 = VDot<3>(probe_l_1416A9,op1_e3_l_1817CF);
      real r17E4#2 = RMul(basisEval13C0,r1543);
      real r17E6#1 = RMul(basisEval13C0,r154B);
      real r17E8#2 = RMul(basisEval13C0,r1553);
      real r17EA#2 = RMul(basisEval13C0,r158F);
      real r17EC#3 = RMul(basisEval13C0,r1594);
      real r17EF#1 = RMul(one13BB,r1599);
      real r17F1#2 = RMul(basisEval13C0,r15C3);
      real r17F4#1 = RMul(coeff13BA,r15C8);
      real r17F6#3 = RMul(basisEval13C0,r15CD);
      real r17F7#2 = RAdd(r17E4,r17E6);
      real r17F8#1 = RAdd(r17F7,r17E8);
      real r17F9#1 = RAdd(r17F8,r17EA);
      real r17FA#1 = RAdd(r17F9,r17EC);
      real r17FB#1 = RAdd(r17FA,r17EF);
      real r17FC#1 = RAdd(r17FB,r17F1);
      real r17FD#1 = RAdd(r17FC,r17F4);
      real r17FE#1 = RAdd(r17FD,r17F6);
      real r1800#2 = RMul(basisEval13C0,r155C);
      real r1802#1 = RMul(basisEval13C0,r1564);
      real r1804#2 = RMul(basisEval13C0,r156C);
      real r1806#2 = RMul(basisEval13C0,r159F);
      real r1808#3 = RMul(basisEval13C0,r15A4);
      real r180A#1 = RMul(one13BB,r15A9);
      real r180C#2 = RMul(basisEval13C0,r15D3);
      real r180E#1 = RMul(coeff13BA,r15D8);
      real r1810#3 = RMul(basisEval13C0,r15DD);
      real r1811#2 = RAdd(r1800,r1802);
      real r1812#1 = RAdd(r1811,r1804);
      real r1813#1 = RAdd(r1812,r1806);
      real r1814#1 = RAdd(r1813,r1808);
      real r1815#1 = RAdd(r1814,r180A);
      real r1816#1 = RAdd(r1815,r180C);
      real r1817#1 = RAdd(r1816,r180E);
      real r1818#1 = RAdd(r1817,r1810);
      real r181A#2 = RMul(basisEval13C0,r1575);
      real r181C#1 = RMul(basisEval13C0,r157D);
      real r181E#2 = RMul(basisEval13C0,r1585);
      real r1820#2 = RMul(basisEval13C0,r15AF);
      real r1822#3 = RMul(basisEval13C0,r15B4);
      real r1824#1 = RMul(one13BB,r15B9);
      real r1826#2 = RMul(basisEval13C0,r15E3);
      real r1828#1 = RMul(coeff13BA,r15E8);
      real r182A#3 = RMul(basisEval13C0,r15ED);
      real r182B#2 = RAdd(r181A,r181C);
      real r182C#1 = RAdd(r182B,r181E);
      real r182D#1 = RAdd(r182C,r1820);
      real r182E#1 = RAdd(r182D,r1822);
      real r182F#1 = RAdd(r182E,r1824);
      real r1830#1 = RAdd(r182F,r1826);
      real r1831#1 = RAdd(r1830,r1828);
      real r1832#1 = RAdd(r1831,r182A);
      real r1834#1 = RMul(coeff13BA,r1553);
      real r1835#2 = RMul(basisEval13C0,r1599);
      real r1836#1 = RMul(one13BB,r15C3);
      real r1837#2 = RMul(basisEval13C0,r15C8);
      real r1838#1 = RAdd(r17F7,r1834);
      real r1839#1 = RAdd(r1838,r17EA);
      real r183A#1 = RAdd(r1839,r17EC);
      real r183B#1 = RAdd(r183A,r1835);
      real r183C#1 = RAdd(r183B,r1836);
      real r183D#1 = RAdd(r183C,r1837);
      real r183E#1 = RAdd(r183D,r17F6);
      real r183F#1 = RMul(coeff13BA,r156C);
      real r1840#2 = RMul(basisEval13C0,r15A9);
      real r1841#1 = RMul(one13BB,r15D3);
      real r1842#2 = RMul(basisEval13C0,r15D8);
      real r1843#1 = RAdd(r1811,r183F);
      real r1844#1 = RAdd(r1843,r1806);
      real r1845#1 = RAdd(r1844,r1808);
      real r1846#1 = RAdd(r1845,r1840);
      real r1847#1 = RAdd(r1846,r1841);
      real r1848#1 = RAdd(r1847,r1842);
      real r1849#1 = RAdd(r1848,r1810);
      real r184A#1 = RMul(coeff13BA,r1585);
      real r184B#2 = RMul(basisEval13C0,r15B9);
      real r184C#1 = RMul(one13BB,r15E3);
      real r184D#2 = RMul(basisEval13C0,r15E8);
      real r184E#1 = RAdd(r182B,r184A);
      real r184F#1 = RAdd(r184E,r1820);
      real r1850#1 = RAdd(r184F,r1822);
      real r1851#1 = RAdd(r1850,r184B);
      real r1852#1 = RAdd(r1851,r184C);
      real r1853#1 = RAdd(r1852,r184D);
      real r1854#1 = RAdd(r1853,r182A);
      real r1856#1 = RMul(one13BB,r154B);
      real r1857#1 = RMul(coeff13BA,r158F);
      real r1858#1 = RAdd(r17E4,r1856);
      real r1859#1 = RAdd(r1858,r17E8);
      real r185A#1 = RAdd(r1859,r1857);
      real r185B#1 = RAdd(r185A,r17EC);
      real r185C#1 = RAdd(r185B,r1835);
      real r185D#1 = RAdd(r185C,r17F1);
      real r185E#1 = RAdd(r185D,r1837);
      real r185F#1 = RAdd(r185E,r17F6);
      real r1860#1 = RMul(one13BB,r1564);
      real r1861#1 = RMul(coeff13BA,r159F);
      real r1862#1 = RAdd(r1800,r1860);
      real r1863#1 = RAdd(r1862,r1804);
      real r1864#1 = RAdd(r1863,r1861);
      real r1865#1 = RAdd(r1864,r1808);
      real r1866#1 = RAdd(r1865,r1840);
      real r1867#1 = RAdd(r1866,r180C);
      real r1868#1 = RAdd(r1867,r1842);
      real r1869#1 = RAdd(r1868,r1810);
      real r186A#1 = RMul(one13BB,r157D);
      real r186B#1 = RMul(coeff13BA,r15AF);
      real r186C#1 = RAdd(r181A,r186A);
      real r186D#1 = RAdd(r186C,r181E);
      real r186E#1 = RAdd(r186D,r186B);
      real r186F#1 = RAdd(r186E,r1822);
      real r1870#1 = RAdd(r186F,r184B);
      real r1871#1 = RAdd(r1870,r1826);
      real r1872#1 = RAdd(r1871,r184D);
      real r1873#1 = RAdd(r1872,r182A);
      real realLit190B#1 = 0.2e1;
      real op1_e3_l_21190A#9 = RMul(realLit190B,op1_e3_l_1917DE);
      real varAcc1911#1 = VIndex<3,0>(xn1910);
      real varAcc1912#1 = VIndex<3,1>(xn1910);
      real varAcc1913#1 = VIndex<3,2>(xn1910);
      real prod1918#2 = RMul(varAcc1911,prod13BC);
      real prod191A#1 = RMul(varAcc1912,one13BB);
      real prod191B#2 = RMul(one13BB,prod191A);
      real prod191D#1 = RMul(one13BB,varAcc1913);
      real prod191E#2 = RMul(one13BB,prod191D);
      real mult1921#1 = RMul(coeff13BA,prod191E);
      real mult1922#1 = RMul(coeff13BA,prod191B);
      real mult1923#1 = RMul(coeff13BA,prod1918);
      real sum1924#1 = RAdd(mult1922,mult1923);
      real sum1925#1 = RAdd(mult1921,sum1924);
      real sum1926#3 = RAdd(basisEval13BF,sum1925);
      real basisEval1928#3 = RMul(one13BB,prod1918);
      real basisEval1929#3 = RMul(one13BB,prod191B);
      real basisEval192A#3 = RMul(one13BB,prod191E);
      real r194B#1 = RMul(dof_load136C,sum1926);
      real r194E#1 = RMul(dof_load1375,basisEval1928);
      real r1951#1 = RMul(dof_load137E,basisEval1929);
      real r1954#1 = RMul(dof_load1387,basisEval192A);
      real r1955#1 = RAdd(r194B,r194E);
      real r1956#1 = RAdd(r1955,r1951);
      real r1957#1 = RAdd(r1956,r1954);
      real r1959#1 = RMul(dof_load136D,sum1926);
      real r195B#1 = RMul(dof_load1376,basisEval1928);
      real r195D#1 = RMul(dof_load137F,basisEval1929);
      real r195F#1 = RMul(dof_load1388,basisEval192A);
      real r1960#1 = RAdd(r1959,r195B);
      real r1961#1 = RAdd(r1960,r195D);
      real r1962#1 = RAdd(r1961,r195F);
      real r1964#1 = RMul(dof_load136E,sum1926);
      real r1966#1 = RMul(dof_load1377,basisEval1928);
      real r1968#1 = RMul(dof_load1380,basisEval1929);
      real r196A#1 = RMul(dof_load1389,basisEval192A);
      real r196B#1 = RAdd(r1964,r1966);
      real r196C#1 = RAdd(r196B,r1968);
      real r196D#1 = RAdd(r196C,r196A);
      tensor[3] probe_l_221948#1 = <tensor[3]>[r1957,r1962,r196D];
      real r1997#1 = RDiv(r17FE,op1_e3_l_21190A);
      real r1999#1 = RDiv(r1818,op1_e3_l_21190A);
      real r199B#1 = RDiv(r1832,op1_e3_l_21190A);
      tensor[3] tensor199C#1 = <tensor[3]>[r1997,r1999,r199B];
      real r199E#1 = RDiv(r183E,op1_e3_l_21190A);
      real r19A0#1 = RDiv(r1849,op1_e3_l_21190A);
      real r19A2#1 = RDiv(r1854,op1_e3_l_21190A);
      tensor[3] tensor19A3#1 = <tensor[3]>[r199E,r19A0,r19A2];
      real r19A5#1 = RDiv(r185F,op1_e3_l_21190A);
      real r19A7#1 = RDiv(r1869,op1_e3_l_21190A);
      real r19A9#1 = RDiv(r1873,op1_e3_l_21190A);
      tensor[3] tensor19AA#1 = <tensor[3]>[r19A5,r19A7,r19A9];
      tensor[3] op1_e3_l_2419C2#3 = VSub<3>(probe_l_221948,pos1330);
      real vdot19C7#1 = VDot<3>(tensor199C,op1_e3_l_2419C2);
      real vdot19C9#1 = VDot<3>(tensor19A3,op1_e3_l_2419C2);
      real vdot19CB#1 = VDot<3>(tensor19AA,op1_e3_l_2419C2);
      tensor[3] op1_e3_l_2519C5#3 = <tensor[3]>[vdot19C7,vdot19C9,vdot19CB];
      tensor[3] xn19D4#4 = VSub<3>(xn1910,op1_e3_l_2519C5);
      real _t19D7#2 = 0.1e-7;
      real _t19D9#1 = RMul(_t19D7,_t19D7);
      real _t1A3B#1 = VDot<3>(op1_e3_l_2519C5,op1_e3_l_2519C5);
      bool _t1A3E#1 = GTE<real>(_t19D9,_t1A3B);
      if _t1A3E then goto ASSIGN1A44 else goto JOIN1A6D
    ASSIGN1A44:  preds = [COND1A40]
      real _t1A43#4 = 0.1e-8;
      real _t1A45#1 = RAdd(one13BB,_t1A43);
      tensor[3] _t1A48#1 = <tensor[3]>[one13BB,one13BB,one13BB];
      real _t1A4A#1 = VDot<3>(_t1A48,xn19D4);
      bool _t1A4D#1 = GT<real>(_t1A45,_t1A4A);
      tensor[3] _t1A4F#1 = <tensor[3]>[_t1A43,_t1A43,_t1A43];
      tensor[3] _t1A51#3 = VAdd<3>(_t1A4F,xn19D4);
      real _t1A54#1 = VIndex<3,0>(_t1A51);
      real _t1A56#3 = -0.e0;
      bool _t1A58#1 = GT<real>(_t1A54,_t1A56);
      real _t1A5A#1 = VIndex<3,1>(_t1A51);
      bool _t1A5C#1 = GT<real>(_t1A5A,_t1A56);
      real _t1A5E#1 = VIndex<3,2>(_t1A51);
      bool _t1A60#1 = GT<real>(_t1A5E,_t1A56);
      bool _t1A62#1 = BAnd(_t1A5C,_t1A60);
      bool _t1A64#1 = BAnd(_t1A58,_t1A62);
      bool _t1A66#1 = BAnd(_t1A4D,_t1A64);
      if _t1A66 then goto ASSIGN1A6A else goto JOIN1A6C
    ASSIGN1A6A:  preds = [COND1A68]
      femData:MeshPos _t1A69#1 = ExtractFemItemN<[femData:Mesh,int,tensor[3],tensor[3]],femData:MeshPos,AllBuild(MeshPos),0000,"",[],int>(mesh132F,cellItter133A,xn19D4,pos1330);
      return _t1A69
      goto JOIN1A6C
    JOIN1A6C:  preds = [*RETURN(_t1A69)1A6B,COND1A68]
      goto JOIN1A6D
    JOIN1A6D:  preds = [JOIN1A6C,COND1A40]
      goto FOREACH1341
    NEXT1A70:  preds = [FOREACH1341]
      goto FOREACH133B
    ASSIGN1A72:  preds = [FOREACH133B]
      string _t1A71#1 = "Bad end 2";
      string _t1A73#1 = "\n";
      Print<[string,string]>(_t1A71,_t1A73);
      femData:MeshPos _t1A76#1 = ExtractFemItemN<[femData:Mesh],femData:MeshPos,InvalidBuild(MeshPos),0000,"",[],int>(mesh132F);
      return _t1A76
}
## input initialization
  ENTRY12CE:  preds = []
    return
## global-variable initialization
  ENTRY12D0:  preds = []
    femData:Mesh cube12D1#3 = globals.cube12C7;
    femData:Space 0space0342_intermedateGlobal12D3#1 = globals.0space0342_intermedateGlobal12C8;
    femData:FemFunc 0data0344_intermedateGlobal12D5#1 = globals.0data0344_intermedateGlobal12C9;
    int _t12D7#1 = 0;
    int _t12D9#1 = 1;
    int _t12DB#1 = ExtractFemItem<int,NumCell(Mesh)>(cube12D1);
    int _t12DD#1 = ISub(_t12DB,_t12D9);
    int[] _t12DF#1 = Range(_t12D7,_t12DD);
    femData:MeshCell[] _t12E1#1 = <femData:MeshCell[]>{};
  FOREACH12E4:  preds = [ASSIGN12E2,NEXT12EA]
    foreach (_t12E3 in _t12DF) on exit goto GASSIGN12EB
      femData:MeshCell[] _t12E8#2 = phi(_t12E1,_t12E7)
    femData:MeshCell _t12E5#1 = LoadFem<femData:MeshCell>(cube12D1,_t12E3);
    femData:MeshCell[] _t12E7#1 = Append<femData:MeshCell>(_t12E8,_t12E5);
    goto FOREACH12E4
  GASSIGN12EB:  preds = [FOREACH12E4]
    globals.0cell_cube12CA = _t12E8;
    femData:Space space12EC#1 = LoadFem<femData:Space>(0space0342_intermedateGlobal12D3,cube12D1);
    femData:FemFunc data12EE#2 = LoadFem<femData:FemFunc>(0data0344_intermedateGlobal12D5,space12EC);
    femData:Space _t12F0#2 = ExtractFem<femData:Space,femData:FemFunc>(data12EE);
    femData:Mesh _t12F2#1 = ExtractFem<femData:Mesh,femData:Space>(_t12F0);
    globals._t12CB = _t12F2;
    globals._tX12CC = _t12F0;
    globals.data12CD = data12EE;
    return
## strand
  strand gg (tensor[3] i12F8#1)
    state:
      output tensor[3] target;
      output tensor[3] translated;
      output bool valid;
      output femData:MeshCell c;
      output real result;
      output tensor[3] gradResult;
      output tensor[3] gradResultp;
    state init
      ENTRY1300:  preds = []
        femData:MeshCell[] 0cell_cube1301#1 = globals.0cell_cube12CA;
        real _nan1303#4 = nan;
        tensor[3] translated1305#3 = <tensor[3]>[_nan1303,_nan1303,_nan1303];
        bool valid1307#1 = false;
        int _t1309#1 = 0;
        femData:MeshCell c130B#1 = Subscript<femData:MeshCell[]>(0cell_cube1301,_t1309);
        self.target = i12F8;
        self.translated = translated1305;
        self.valid = valid1307;
        self.c = c130B;
        self.result = _nan1303;
        self.gradResult = translated1305;
        self.gradResultp = translated1305;
        return
    end state init
    method update
        ENTRY1315:  preds = []
          femData:Mesh _t1316#17 = globals._t12CB;
          femData:Space _t1318#35 = globals._tX12CC;
          femData:FemFunc data131A#35 = globals.data12CD;
          femData:Mesh cube131C#1 = globals.cube12C7;
          tensor[3] target131E#3 = self.target;
          tensor[3] translated1320#1 = self.translated;
          femData:MeshCell c1322#1 = self.c;
          real result1324#1 = self.result;
          tensor[3] gradResult1326#1 = self.gradResult;
          string _t1328#1 = "Running on ";
          string _t132A#1 = "\n";
          Print<[string,tensor[3],string]>(_t1328,target131E,_t132A);
          femData:MeshPos p132D#4 = findPos132E (cube131C,target131E);
          bool valid1A7A#2 = ExtractFemItem<bool,Valid(MeshPos)>(p132D);
          if valid1A7A then goto ASSIGN1A7E else goto ASSIGN2D44
        ASSIGN1A7E:  preds = [COND1A7C]
          femData:Mesh _t1A7D#1 = ExtractFem<femData:Mesh,femData:MeshPos>(p132D);
          int _t1A7F#1 = ExtractFemItem<int,CellIndex(MeshPos)>(p132D);
          femData:MeshCell c1A81#1 = LoadFem<femData:MeshCell>(_t1A7D,_t1A7F);
          tensor[3] translated1A83#1 = ExtractFemItem<tensor[3],RefPos(MeshPos)>(p132D);
          femData:MeshPos callFindPos1A85#2 = findPos132E (_t1316,target131E);
          int intPos1A87#2 = ExtractFemItem<int,CellIndex(Mesh)>(callFindPos1A85);
          tensor[3] refPos1A89#3 = ExtractFemItem<tensor[3],RefPos(Mesh)>(callFindPos1A85);
          int ilit1A8C#1 = 35;
          int mulRes1A8D#35 = IMul(intPos1A87,ilit1A8C);
          int idx1A90#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,mulRes1A8D);
          int ilit1A91#41 = 1;
          int addRes1A92#1 = IAdd(mulRes1A8D,ilit1A91);
          int idx1A93#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1A92);
          int ilit1A94#6 = 2;
          int addRes1A95#1 = IAdd(mulRes1A8D,ilit1A94);
          int idx1A96#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1A95);
          int ilit1A97#6 = 3;
          int addRes1A98#1 = IAdd(mulRes1A8D,ilit1A97);
          int idx1A99#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1A98);
          int ilit1A9A#2 = 4;
          int addRes1A9B#1 = IAdd(mulRes1A8D,ilit1A9A);
          int idx1A9C#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1A9B);
          int ilit1A9D#1 = 5;
          int addRes1A9E#1 = IAdd(mulRes1A8D,ilit1A9D);
          int idx1A9F#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1A9E);
          int ilit1AA0#1 = 6;
          int addRes1AA1#1 = IAdd(mulRes1A8D,ilit1AA0);
          int idx1AA2#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AA1);
          int ilit1AA3#1 = 7;
          int addRes1AA4#1 = IAdd(mulRes1A8D,ilit1AA3);
          int idx1AA5#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AA4);
          int ilit1AA6#1 = 8;
          int addRes1AA7#1 = IAdd(mulRes1A8D,ilit1AA6);
          int idx1AA8#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AA7);
          int ilit1AA9#1 = 9;
          int addRes1AAA#1 = IAdd(mulRes1A8D,ilit1AA9);
          int idx1AAB#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AAA);
          int ilit1AAC#1 = 10;
          int addRes1AAD#1 = IAdd(mulRes1A8D,ilit1AAC);
          int idx1AAE#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AAD);
          int ilit1AAF#1 = 11;
          int addRes1AB0#1 = IAdd(mulRes1A8D,ilit1AAF);
          int idx1AB1#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AB0);
          int ilit1AB2#1 = 12;
          int addRes1AB3#1 = IAdd(mulRes1A8D,ilit1AB2);
          int idx1AB4#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AB3);
          int ilit1AB5#1 = 13;
          int addRes1AB6#1 = IAdd(mulRes1A8D,ilit1AB5);
          int idx1AB7#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AB6);
          int ilit1AB8#1 = 14;
          int addRes1AB9#1 = IAdd(mulRes1A8D,ilit1AB8);
          int idx1ABA#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AB9);
          int ilit1ABB#1 = 15;
          int addRes1ABC#1 = IAdd(mulRes1A8D,ilit1ABB);
          int idx1ABD#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1ABC);
          int ilit1ABE#1 = 16;
          int addRes1ABF#1 = IAdd(mulRes1A8D,ilit1ABE);
          int idx1AC0#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1ABF);
          int ilit1AC1#1 = 17;
          int addRes1AC2#1 = IAdd(mulRes1A8D,ilit1AC1);
          int idx1AC3#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AC2);
          int ilit1AC4#1 = 18;
          int addRes1AC5#1 = IAdd(mulRes1A8D,ilit1AC4);
          int idx1AC6#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AC5);
          int ilit1AC7#1 = 19;
          int addRes1AC8#1 = IAdd(mulRes1A8D,ilit1AC7);
          int idx1AC9#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AC8);
          int ilit1ACA#1 = 20;
          int addRes1ACB#1 = IAdd(mulRes1A8D,ilit1ACA);
          int idx1ACC#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1ACB);
          int ilit1ACD#1 = 21;
          int addRes1ACE#1 = IAdd(mulRes1A8D,ilit1ACD);
          int idx1ACF#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1ACE);
          int ilit1AD0#1 = 22;
          int addRes1AD1#1 = IAdd(mulRes1A8D,ilit1AD0);
          int idx1AD2#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AD1);
          int ilit1AD3#1 = 23;
          int addRes1AD4#1 = IAdd(mulRes1A8D,ilit1AD3);
          int idx1AD5#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AD4);
          int ilit1AD6#1 = 24;
          int addRes1AD7#1 = IAdd(mulRes1A8D,ilit1AD6);
          int idx1AD8#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AD7);
          int ilit1AD9#1 = 25;
          int addRes1ADA#1 = IAdd(mulRes1A8D,ilit1AD9);
          int idx1ADB#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1ADA);
          int ilit1ADC#1 = 26;
          int addRes1ADD#1 = IAdd(mulRes1A8D,ilit1ADC);
          int idx1ADE#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1ADD);
          int ilit1ADF#1 = 27;
          int addRes1AE0#1 = IAdd(mulRes1A8D,ilit1ADF);
          int idx1AE1#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AE0);
          int ilit1AE2#1 = 28;
          int addRes1AE3#1 = IAdd(mulRes1A8D,ilit1AE2);
          int idx1AE4#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AE3);
          int ilit1AE5#1 = 29;
          int addRes1AE6#1 = IAdd(mulRes1A8D,ilit1AE5);
          int idx1AE7#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AE6);
          int ilit1AE8#1 = 30;
          int addRes1AE9#1 = IAdd(mulRes1A8D,ilit1AE8);
          int idx1AEA#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AE9);
          int ilit1AEB#1 = 31;
          int addRes1AEC#1 = IAdd(mulRes1A8D,ilit1AEB);
          int idx1AED#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AEC);
          int ilit1AEE#1 = 32;
          int addRes1AEF#1 = IAdd(mulRes1A8D,ilit1AEE);
          int idx1AF0#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AEF);
          int ilit1AF1#1 = 33;
          int addRes1AF2#1 = IAdd(mulRes1A8D,ilit1AF1);
          int idx1AF3#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AF2);
          int ilit1AF4#1 = 34;
          int addRes1AF5#1 = IAdd(mulRes1A8D,ilit1AF4);
          int idx1AF6#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AF5);
          int mulRes1B69#1 = IMul(ilit1A91,idx1A90);
          int mulRes1B6B#1 = IMul(ilit1A91,idx1A93);
          int mulRes1B6E#1 = IMul(ilit1A91,idx1A96);
          int mulRes1B71#1 = IMul(ilit1A91,idx1A99);
          int mulRes1B74#1 = IMul(ilit1A91,idx1A9C);
          int mulRes1B77#1 = IMul(ilit1A91,idx1A9F);
          int mulRes1B7A#1 = IMul(ilit1A91,idx1AA2);
          int mulRes1B7D#1 = IMul(ilit1A91,idx1AA5);
          int mulRes1B80#1 = IMul(ilit1A91,idx1AA8);
          int mulRes1B83#1 = IMul(ilit1A91,idx1AAB);
          int mulRes1B86#1 = IMul(ilit1A91,idx1AAE);
          int mulRes1B89#1 = IMul(ilit1A91,idx1AB1);
          int mulRes1B8C#1 = IMul(ilit1A91,idx1AB4);
          int mulRes1B8F#1 = IMul(ilit1A91,idx1AB7);
          int mulRes1B92#1 = IMul(ilit1A91,idx1ABA);
          int mulRes1B95#1 = IMul(ilit1A91,idx1ABD);
          int mulRes1B98#1 = IMul(ilit1A91,idx1AC0);
          int mulRes1B9B#1 = IMul(ilit1A91,idx1AC3);
          int mulRes1B9E#1 = IMul(ilit1A91,idx1AC6);
          int mulRes1BA1#1 = IMul(ilit1A91,idx1AC9);
          int mulRes1BA4#1 = IMul(ilit1A91,idx1ACC);
          int mulRes1BA7#1 = IMul(ilit1A91,idx1ACF);
          int mulRes1BAA#1 = IMul(ilit1A91,idx1AD2);
          int mulRes1BAD#1 = IMul(ilit1A91,idx1AD5);
          int mulRes1BB0#1 = IMul(ilit1A91,idx1AD8);
          int mulRes1BB3#1 = IMul(ilit1A91,idx1ADB);
          int mulRes1BB6#1 = IMul(ilit1A91,idx1ADE);
          int mulRes1BB9#1 = IMul(ilit1A91,idx1AE1);
          int mulRes1BBC#1 = IMul(ilit1A91,idx1AE4);
          int mulRes1BBF#1 = IMul(ilit1A91,idx1AE7);
          int mulRes1BC2#1 = IMul(ilit1A91,idx1AEA);
          int mulRes1BC5#1 = IMul(ilit1A91,idx1AED);
          int mulRes1BC8#1 = IMul(ilit1A91,idx1AF0);
          int mulRes1BCB#1 = IMul(ilit1A91,idx1AF3);
          int mulRes1BCE#1 = IMul(ilit1A91,idx1AF6);
          real dof1BCF#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B69);
          real dof1BD0#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B6B);
          real dof1BD1#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B6E);
          real dof1BD2#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B71);
          real dof1BD3#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B74);
          real dof1BD4#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B77);
          real dof1BD5#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B7A);
          real dof1BD6#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B7D);
          real dof1BD7#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B80);
          real dof1BD8#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B83);
          real dof1BD9#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B86);
          real dof1BDA#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B89);
          real dof1BDB#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B8C);
          real dof1BDC#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B8F);
          real dof1BDD#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B92);
          real dof1BDE#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B95);
          real dof1BDF#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B98);
          real dof1BE0#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B9B);
          real dof1BE1#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B9E);
          real dof1BE2#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BA1);
          real dof1BE3#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BA4);
          real dof1BE4#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BA7);
          real dof1BE5#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BAA);
          real dof1BE6#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BAD);
          real dof1BE7#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BB0);
          real dof1BE8#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BB3);
          real dof1BE9#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BB6);
          real dof1BEA#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BB9);
          real dof1BEB#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BBC);
          real dof1BEC#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BBF);
          real dof1BED#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BC2);
          real dof1BEE#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BC5);
          real dof1BEF#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BC8);
          real dof1BF0#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BCB);
          real dof1BF1#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BCE);
          tensor[35] dofs1BF2#4 = <tensor[35]>[dof1BCF,dof1BD0,dof1BD1,dof1BD2,dof1BD3,dof1BD4,dof1BD5,dof1BD6,dof1BD7,dof1BD8,dof1BD9,dof1BDA,dof1BDB,dof1BDC,dof1BDD,dof1BDE,dof1BDF,dof1BE0,dof1BE1,dof1BE2,dof1BE3,dof1BE4,dof1BE5,dof1BE6,dof1BE7,dof1BE8,dof1BE9,dof1BEA,dof1BEB,dof1BEC,dof1BED,dof1BEE,dof1BEF,dof1BF0,dof1BF1];
          real varAcc1C82#14 = VIndex<3,0>(refPos1A89);
          real varAcc1C83#8 = VIndex<3,1>(refPos1A89);
          real varAcc1C84#8 = VIndex<3,2>(refPos1A89);
          real coeff1C85#3 = 0.106666666667e2;
          real prod21C87#7 = RMul(varAcc1C82,varAcc1C82);
          real prod31C88#4 = RMul(prod21C87,varAcc1C82);
          real prod41C89#1 = RMul(prod31C88,varAcc1C82);
          real one1C8A#44 = 0.1e1;
          real prod1C8B#5 = RMul(one1C8A,one1C8A);
          real prod1C8C#3 = RMul(prod41C89,prod1C8B);
          real coeff1C8D#9 = 0.426666666667e2;
          real prod1C8F#4 = RMul(varAcc1C83,one1C8A);
          real prod1C90#4 = RMul(prod31C88,prod1C8F);
          real prod1C92#4 = RMul(one1C8A,varAcc1C84);
          real prod1C93#4 = RMul(prod31C88,prod1C92);
          real coeff1C94#3 = -0.266666666667e2;
          real prod1C95#10 = RMul(prod31C88,prod1C8B);
          real coeff1C96#9 = 0.64e2;
          real prod21C97#4 = RMul(varAcc1C83,varAcc1C83);
          real prod1C98#3 = RMul(prod21C97,one1C8A);
          real prod1C99#3 = RMul(prod21C87,prod1C98);
          real coeff1C9A#18 = 0.128e3;
          real prod1C9B#3 = RMul(varAcc1C83,varAcc1C84);
          real prod1C9C#4 = RMul(prod21C87,prod1C9B);
          real coeff1C9D#9 = -0.80e2;
          real prod1C9E#16 = RMul(prod21C87,prod1C8F);
          real prod21C9F#4 = RMul(varAcc1C84,varAcc1C84);
          real prod1CA0#3 = RMul(one1C8A,prod21C9F);
          real prod1CA1#3 = RMul(prod21C87,prod1CA0);
          real prod1CA2#16 = RMul(prod21C87,prod1C92);
          real coeff1CA3#3 = 0.233333333333e2;
          real prod1CA4#18 = RMul(prod21C87,prod1C8B);
          real prod31CA5#3 = RMul(prod21C97,varAcc1C83);
          real prod1CA6#2 = RMul(prod31CA5,one1C8A);
          real prod1CA7#4 = RMul(varAcc1C82,prod1CA6);
          real prod1CA8#2 = RMul(prod21C97,varAcc1C84);
          real prod1CA9#4 = RMul(varAcc1C82,prod1CA8);
          real prod1CAA#16 = RMul(varAcc1C82,prod1C98);
          real prod1CAB#2 = RMul(varAcc1C83,prod21C9F);
          real prod1CAC#4 = RMul(varAcc1C82,prod1CAB);
          real coeff1CAD#4 = -0.160e3;
          real prod1CAE#9 = RMul(varAcc1C82,prod1C9B);
          real coeff1CAF#6 = 0.466666666667e2;
          real prod1CB0#19 = RMul(varAcc1C82,prod1C8F);
          real prod31CB1#3 = RMul(prod21C9F,varAcc1C84);
          real prod1CB2#2 = RMul(one1C8A,prod31CB1);
          real prod1CB3#4 = RMul(varAcc1C82,prod1CB2);
          real prod1CB4#16 = RMul(varAcc1C82,prod1CA0);
          real prod1CB5#19 = RMul(varAcc1C82,prod1C92);
          real coeff1CB6#4 = -0.833333333333e1;
          real prod1CB7#16 = RMul(varAcc1C82,prod1C8B);
          real prod41CB8#1 = RMul(prod31CA5,varAcc1C83);
          real prod1CB9#1 = RMul(prod41CB8,one1C8A);
          real prod1CBA#3 = RMul(one1C8A,prod1CB9);
          real prod1CBB#1 = RMul(prod31CA5,varAcc1C84);
          real prod1CBC#4 = RMul(one1C8A,prod1CBB);
          real prod1CBD#10 = RMul(one1C8A,prod1CA6);
          real prod1CBE#1 = RMul(prod21C97,prod21C9F);
          real prod1CBF#3 = RMul(one1C8A,prod1CBE);
          real prod1CC0#16 = RMul(one1C8A,prod1CA8);
          real prod1CC1#18 = RMul(one1C8A,prod1C98);
          real prod1CC2#1 = RMul(varAcc1C83,prod31CB1);
          real prod1CC3#4 = RMul(one1C8A,prod1CC2);
          real prod1CC4#16 = RMul(one1C8A,prod1CAB);
          real prod1CC5#19 = RMul(one1C8A,prod1C9B);
          real prod1CC6#16 = RMul(one1C8A,prod1C8F);
          real prod41CC7#1 = RMul(prod31CB1,varAcc1C84);
          real prod1CC8#1 = RMul(one1C8A,prod41CC7);
          real prod1CC9#3 = RMul(one1C8A,prod1CC8);
          real prod1CCA#10 = RMul(one1C8A,prod1CB2);
          real prod1CCB#18 = RMul(one1C8A,prod1CA0);
          real prod1CCC#16 = RMul(one1C8A,prod1C92);
          real prod1CCD#6 = RMul(one1C8A,prod1C8B);
          real mult1CCE#10 = RMul(one1C8A,prod1CCD);
          real mult1CCF#1 = RMul(coeff1CB6,prod1CCC);
          real mult1CD0#1 = RMul(coeff1CA3,prod1CCB);
          real mult1CD1#1 = RMul(coeff1C94,prod1CCA);
          real mult1CD2#2 = RMul(coeff1C85,prod1CC9);
          real mult1CD3#1 = RMul(coeff1CB6,prod1CC6);
          real mult1CD4#1 = RMul(coeff1CAF,prod1CC5);
          real mult1CD5#1 = RMul(coeff1C9D,prod1CC4);
          real mult1CD6#2 = RMul(coeff1C8D,prod1CC3);
          real mult1CD7#1 = RMul(coeff1CA3,prod1CC1);
          real mult1CD8#1 = RMul(coeff1C9D,prod1CC0);
          real mult1CD9#4 = RMul(coeff1C96,prod1CBF);
          real mult1CDA#1 = RMul(coeff1C94,prod1CBD);
          real mult1CDB#2 = RMul(coeff1C8D,prod1CBC);
          real mult1CDC#2 = RMul(coeff1C85,prod1CBA);
          real mult1CDD#1 = RMul(coeff1CB6,prod1CB7);
          real mult1CDE#1 = RMul(coeff1CAF,prod1CB5);
          real mult1CDF#1 = RMul(coeff1C9D,prod1CB4);
          real mult1CE0#2 = RMul(coeff1C8D,prod1CB3);
          real mult1CE1#1 = RMul(coeff1CAF,prod1CB0);
          real mult1CE2#1 = RMul(coeff1CAD,prod1CAE);
          real mult1CE3#4 = RMul(coeff1C9A,prod1CAC);
          real mult1CE4#1 = RMul(coeff1C9D,prod1CAA);
          real mult1CE5#4 = RMul(coeff1C9A,prod1CA9);
          real mult1CE6#2 = RMul(coeff1C8D,prod1CA7);
          real mult1CE7#1 = RMul(coeff1CA3,prod1CA4);
          real mult1CE8#1 = RMul(coeff1C9D,prod1CA2);
          real mult1CE9#3 = RMul(coeff1C96,prod1CA1);
          real mult1CEA#1 = RMul(coeff1C9D,prod1C9E);
          real mult1CEB#4 = RMul(coeff1C9A,prod1C9C);
          real mult1CEC#3 = RMul(coeff1C96,prod1C99);
          real mult1CED#1 = RMul(coeff1C94,prod1C95);
          real mult1CEE#2 = RMul(coeff1C8D,prod1C93);
          real mult1CEF#2 = RMul(coeff1C8D,prod1C90);
          real mult1CF0#2 = RMul(coeff1C85,prod1C8C);
          real sum1CF1#1 = RAdd(mult1CEF,mult1CF0);
          real sum1CF2#1 = RAdd(mult1CEE,sum1CF1);
          real sum1CF3#1 = RAdd(mult1CED,sum1CF2);
          real sum1CF4#1 = RAdd(mult1CEC,sum1CF3);
          real sum1CF5#1 = RAdd(mult1CEB,sum1CF4);
          real sum1CF6#1 = RAdd(mult1CEA,sum1CF5);
          real sum1CF7#1 = RAdd(mult1CE9,sum1CF6);
          real sum1CF8#1 = RAdd(mult1CE8,sum1CF7);
          real sum1CF9#1 = RAdd(mult1CE7,sum1CF8);
          real sum1CFA#1 = RAdd(mult1CE6,sum1CF9);
          real sum1CFB#1 = RAdd(mult1CE5,sum1CFA);
          real sum1CFC#1 = RAdd(mult1CE4,sum1CFB);
          real sum1CFD#1 = RAdd(mult1CE3,sum1CFC);
          real sum1CFE#1 = RAdd(mult1CE2,sum1CFD);
          real sum1CFF#1 = RAdd(mult1CE1,sum1CFE);
          real sum1D00#1 = RAdd(mult1CE0,sum1CFF);
          real sum1D01#1 = RAdd(mult1CDF,sum1D00);
          real sum1D02#1 = RAdd(mult1CDE,sum1D01);
          real sum1D03#1 = RAdd(mult1CDD,sum1D02);
          real sum1D04#1 = RAdd(mult1CDC,sum1D03);
          real sum1D05#1 = RAdd(mult1CDB,sum1D04);
          real sum1D06#1 = RAdd(mult1CDA,sum1D05);
          real sum1D07#1 = RAdd(mult1CD9,sum1D06);
          real sum1D08#1 = RAdd(mult1CD8,sum1D07);
          real sum1D09#1 = RAdd(mult1CD7,sum1D08);
          real sum1D0A#1 = RAdd(mult1CD6,sum1D09);
          real sum1D0B#1 = RAdd(mult1CD5,sum1D0A);
          real sum1D0C#1 = RAdd(mult1CD4,sum1D0B);
          real sum1D0D#1 = RAdd(mult1CD3,sum1D0C);
          real sum1D0E#1 = RAdd(mult1CD2,sum1D0D);
          real sum1D0F#1 = RAdd(mult1CD1,sum1D0E);
          real sum1D10#1 = RAdd(mult1CD0,sum1D0F);
          real sum1D11#1 = RAdd(mult1CCF,sum1D10);
          real sum1D12#1 = RAdd(mult1CCE,sum1D11);
          real coeff1D14#12 = -0.16e2;
          real coeff1D15#3 = 0.733333333333e1;
          real coeff1D16#22 = -0.1e1;
          real mult1D17#1 = RMul(coeff1D16,prod1CB7);
          real mult1D18#1 = RMul(coeff1D15,prod1CA4);
          real mult1D19#1 = RMul(coeff1D14,prod1C95);
          real sum1D1A#1 = RAdd(mult1D19,mult1CF0);
          real sum1D1B#1 = RAdd(mult1D18,sum1D1A);
          real sum1D1C#1 = RAdd(mult1D17,sum1D1B);
          real mult1D1E#1 = RMul(coeff1D16,prod1CC6);
          real mult1D1F#1 = RMul(coeff1D15,prod1CC1);
          real mult1D20#1 = RMul(coeff1D14,prod1CBD);
          real sum1D21#1 = RAdd(mult1D20,mult1CDC);
          real sum1D22#1 = RAdd(mult1D1F,sum1D21);
          real sum1D23#1 = RAdd(mult1D1E,sum1D22);
          real mult1D25#1 = RMul(coeff1D16,prod1CCC);
          real mult1D26#1 = RMul(coeff1D15,prod1CCB);
          real mult1D27#1 = RMul(coeff1D14,prod1CCA);
          real sum1D28#1 = RAdd(mult1D27,mult1CD2);
          real sum1D29#1 = RAdd(mult1D26,sum1D28);
          real sum1D2A#1 = RAdd(mult1D25,sum1D29);
          real coeff1D2C#16 = -0.32e2;
          real coeff1D2D#7 = 0.533333333333e1;
          real mult1D2E#2 = RMul(coeff1D2D,prod1CC5);
          real mult1D2F#1 = RMul(coeff1D2C,prod1CC0);
          real sum1D30#1 = RAdd(mult1D2F,mult1CDB);
          real sum1D31#1 = RAdd(mult1D2E,sum1D30);
          real coeff1D33#6 = 0.4e1;
          real mult1D34#1 = RMul(coeff1D33,prod1CC5);
          real mult1D35#2 = RMul(coeff1D14,prod1CC4);
          real mult1D36#2 = RMul(coeff1D14,prod1CC0);
          real sum1D37#1 = RAdd(mult1D36,mult1CD9);
          real sum1D38#1 = RAdd(mult1D35,sum1D37);
          real sum1D39#1 = RAdd(mult1D34,sum1D38);
          real mult1D3B#1 = RMul(coeff1D2C,prod1CC4);
          real sum1D3C#1 = RAdd(mult1D3B,mult1CD6);
          real sum1D3D#1 = RAdd(mult1D2E,sum1D3C);
          real mult1D3F#2 = RMul(coeff1D2D,prod1CB5);
          real mult1D40#1 = RMul(coeff1D2C,prod1CA2);
          real sum1D41#1 = RAdd(mult1D40,mult1CEE);
          real sum1D42#1 = RAdd(mult1D3F,sum1D41);
          real mult1D44#1 = RMul(coeff1D33,prod1CB5);
          real mult1D45#2 = RMul(coeff1D14,prod1CB4);
          real mult1D46#1 = RMul(coeff1D14,prod1CA2);
          real sum1D47#2 = RAdd(mult1D46,mult1CE9);
          real sum1D48#1 = RAdd(mult1D45,sum1D47);
          real sum1D49#1 = RAdd(mult1D44,sum1D48);
          real mult1D4B#1 = RMul(coeff1D2C,prod1CB4);
          real sum1D4C#1 = RAdd(mult1D4B,mult1CE0);
          real sum1D4D#1 = RAdd(mult1D3F,sum1D4C);
          real mult1D4F#2 = RMul(coeff1D2D,prod1CB0);
          real mult1D50#1 = RMul(coeff1D2C,prod1C9E);
          real sum1D51#1 = RAdd(mult1D50,mult1CEF);
          real sum1D52#1 = RAdd(mult1D4F,sum1D51);
          real mult1D54#1 = RMul(coeff1D33,prod1CB0);
          real mult1D55#2 = RMul(coeff1D14,prod1CAA);
          real mult1D56#1 = RMul(coeff1D14,prod1C9E);
          real sum1D57#2 = RAdd(mult1D56,mult1CEC);
          real sum1D58#1 = RAdd(mult1D55,sum1D57);
          real sum1D59#1 = RAdd(mult1D54,sum1D58);
          real mult1D5B#1 = RMul(coeff1D2C,prod1CAA);
          real sum1D5C#1 = RAdd(mult1D5B,mult1CE6);
          real sum1D5D#1 = RAdd(mult1D4F,sum1D5C);
          real coeff1D5F#12 = -0.426666666667e2;
          real coeff1D60#21 = -0.128e3;
          real coeff1D61#18 = 0.96e2;
          real coeff1D62#10 = -0.256e3;
          real coeff1D63#13 = 0.192e3;
          real coeff1D64#9 = -0.693333333333e2;
          real coeff1D65#4 = 0.16e2;
          real mult1D66#1 = RMul(coeff1D65,prod1CCC);
          real mult1D67#1 = RMul(coeff1D64,prod1CCB);
          real mult1D68#1 = RMul(coeff1D61,prod1CCA);
          real mult1D69#2 = RMul(coeff1D5F,prod1CC9);
          real mult1D6A#2 = RMul(coeff1D64,prod1CC5);
          real mult1D6B#1 = RMul(coeff1D63,prod1CC4);
          real mult1D6C#2 = RMul(coeff1D60,prod1CC3);
          real mult1D6D#1 = RMul(coeff1D61,prod1CC0);
          real mult1D6E#4 = RMul(coeff1D60,prod1CBF);
          real mult1D6F#2 = RMul(coeff1D5F,prod1CBC);
          real mult1D70#2 = RMul(coeff1D64,prod1CB5);
          real mult1D71#1 = RMul(coeff1D63,prod1CB4);
          real mult1D72#2 = RMul(coeff1D60,prod1CB3);
          real mult1D73#3 = RMul(coeff1D63,prod1CAE);
          real mult1D74#2 = RMul(coeff1D62,prod1CAC);
          real mult1D75#4 = RMul(coeff1D60,prod1CA9);
          real mult1D76#1 = RMul(coeff1D61,prod1CA2);
          real mult1D77#4 = RMul(coeff1D60,prod1CA1);
          real mult1D78#4 = RMul(coeff1D60,prod1C9C);
          real mult1D79#2 = RMul(coeff1D5F,prod1C93);
          real sum1D7A#1 = RAdd(mult1D78,mult1D79);
          real sum1D7B#1 = RAdd(mult1D77,sum1D7A);
          real sum1D7C#1 = RAdd(mult1D76,sum1D7B);
          real sum1D7D#1 = RAdd(mult1D75,sum1D7C);
          real sum1D7E#1 = RAdd(mult1D74,sum1D7D);
          real sum1D7F#1 = RAdd(mult1D73,sum1D7E);
          real sum1D80#1 = RAdd(mult1D72,sum1D7F);
          real sum1D81#1 = RAdd(mult1D71,sum1D80);
          real sum1D82#1 = RAdd(mult1D70,sum1D81);
          real sum1D83#1 = RAdd(mult1D6F,sum1D82);
          real sum1D84#1 = RAdd(mult1D6E,sum1D83);
          real sum1D85#1 = RAdd(mult1D6D,sum1D84);
          real sum1D86#1 = RAdd(mult1D6C,sum1D85);
          real sum1D87#1 = RAdd(mult1D6B,sum1D86);
          real sum1D88#1 = RAdd(mult1D6A,sum1D87);
          real sum1D89#1 = RAdd(mult1D69,sum1D88);
          real sum1D8A#1 = RAdd(mult1D68,sum1D89);
          real sum1D8B#1 = RAdd(mult1D67,sum1D8A);
          real sum1D8C#1 = RAdd(mult1D66,sum1D8B);
          real coeff1D8E#9 = -0.144e3;
          real coeff1D8F#6 = 0.28e2;
          real coeff1D90#3 = 0.76e2;
          real coeff1D91#4 = -0.12e2;
          real mult1D92#1 = RMul(coeff1D91,prod1CCC);
          real mult1D93#1 = RMul(coeff1D90,prod1CCB);
          real mult1D94#4 = RMul(coeff1D60,prod1CCA);
          real mult1D95#1 = RMul(coeff1C96,prod1CC9);
          real mult1D96#2 = RMul(coeff1D8F,prod1CC5);
          real mult1D97#1 = RMul(coeff1D8E,prod1CC4);
          real mult1D98#2 = RMul(coeff1C9A,prod1CC3);
          real mult1D99#2 = RMul(coeff1D8F,prod1CB5);
          real mult1D9A#1 = RMul(coeff1D8E,prod1CB4);
          real mult1D9B#2 = RMul(coeff1C9A,prod1CB3);
          real mult1D9C#6 = RMul(coeff1D2C,prod1CAE);
          real sum1D9D#1 = RAdd(mult1CE3,sum1D47);
          real sum1D9E#1 = RAdd(mult1D9C,sum1D9D);
          real sum1D9F#1 = RAdd(mult1D9B,sum1D9E);
          real sum1DA0#1 = RAdd(mult1D9A,sum1D9F);
          real sum1DA1#1 = RAdd(mult1D99,sum1DA0);
          real sum1DA2#1 = RAdd(mult1CD9,sum1DA1);
          real sum1DA3#1 = RAdd(mult1D36,sum1DA2);
          real sum1DA4#1 = RAdd(mult1D98,sum1DA3);
          real sum1DA5#1 = RAdd(mult1D97,sum1DA4);
          real sum1DA6#1 = RAdd(mult1D96,sum1DA5);
          real sum1DA7#1 = RAdd(mult1D95,sum1DA6);
          real sum1DA8#1 = RAdd(mult1D94,sum1DA7);
          real sum1DA9#1 = RAdd(mult1D93,sum1DA8);
          real sum1DAA#1 = RAdd(mult1D92,sum1DA9);
          real coeff1DAC#13 = 0.32e2;
          real coeff1DAD#6 = -0.533333333333e1;
          real coeff1DAE#3 = 0.746666666667e2;
          real coeff1DAF#3 = -0.373333333333e2;
          real mult1DB0#4 = RMul(coeff1D2D,prod1CCC);
          real mult1DB1#1 = RMul(coeff1DAF,prod1CCB);
          real mult1DB2#1 = RMul(coeff1DAE,prod1CCA);
          real mult1DB3#2 = RMul(coeff1DAD,prod1CC5);
          real mult1DB4#2 = RMul(coeff1DAC,prod1CC4);
          real mult1DB5#2 = RMul(coeff1D5F,prod1CC3);
          real mult1DB6#2 = RMul(coeff1DAD,prod1CB5);
          real mult1DB7#2 = RMul(coeff1DAC,prod1CB4);
          real mult1DB8#2 = RMul(coeff1D5F,prod1CB3);
          real sum1DB9#1 = RAdd(mult1DB7,mult1DB8);
          real sum1DBA#1 = RAdd(mult1DB6,sum1DB9);
          real sum1DBB#1 = RAdd(mult1DB5,sum1DBA);
          real sum1DBC#1 = RAdd(mult1DB4,sum1DBB);
          real sum1DBD#1 = RAdd(mult1DB3,sum1DBC);
          real sum1DBE#1 = RAdd(mult1D69,sum1DBD);
          real sum1DBF#1 = RAdd(mult1DB2,sum1DBE);
          real sum1DC0#1 = RAdd(mult1DB1,sum1DBF);
          real sum1DC1#1 = RAdd(mult1DB0,sum1DC0);
          real mult1DC3#1 = RMul(coeff1D65,prod1CC6);
          real mult1DC4#1 = RMul(coeff1D61,prod1CC4);
          real mult1DC5#1 = RMul(coeff1D64,prod1CC1);
          real mult1DC6#1 = RMul(coeff1D63,prod1CC0);
          real mult1DC7#1 = RMul(coeff1D61,prod1CBD);
          real mult1DC8#2 = RMul(coeff1D60,prod1CBC);
          real mult1DC9#2 = RMul(coeff1D5F,prod1CBA);
          real mult1DCA#2 = RMul(coeff1D64,prod1CB0);
          real mult1DCB#4 = RMul(coeff1D60,prod1CAC);
          real mult1DCC#1 = RMul(coeff1D63,prod1CAA);
          real mult1DCD#2 = RMul(coeff1D62,prod1CA9);
          real mult1DCE#2 = RMul(coeff1D60,prod1CA7);
          real mult1DCF#1 = RMul(coeff1D61,prod1C9E);
          real mult1DD0#4 = RMul(coeff1D60,prod1C99);
          real mult1DD1#2 = RMul(coeff1D5F,prod1C90);
          real sum1DD2#1 = RAdd(mult1DD0,mult1DD1);
          real sum1DD3#1 = RAdd(mult1D78,sum1DD2);
          real sum1DD4#1 = RAdd(mult1DCF,sum1DD3);
          real sum1DD5#1 = RAdd(mult1DCE,sum1DD4);
          real sum1DD6#1 = RAdd(mult1DCD,sum1DD5);
          real sum1DD7#1 = RAdd(mult1DCC,sum1DD6);
          real sum1DD8#1 = RAdd(mult1DCB,sum1DD7);
          real sum1DD9#1 = RAdd(mult1D73,sum1DD8);
          real sum1DDA#1 = RAdd(mult1DCA,sum1DD9);
          real sum1DDB#1 = RAdd(mult1DC9,sum1DDA);
          real sum1DDC#1 = RAdd(mult1DC8,sum1DDB);
          real sum1DDD#1 = RAdd(mult1DC7,sum1DDC);
          real sum1DDE#1 = RAdd(mult1D6E,sum1DDD);
          real sum1DDF#1 = RAdd(mult1DC6,sum1DDE);
          real sum1DE0#1 = RAdd(mult1DC5,sum1DDF);
          real sum1DE1#1 = RAdd(mult1DB5,sum1DE0);
          real sum1DE2#1 = RAdd(mult1DC4,sum1DE1);
          real sum1DE3#1 = RAdd(mult1D6A,sum1DE2);
          real sum1DE4#1 = RAdd(mult1DC3,sum1DE3);
          real mult1DE6#1 = RMul(coeff1D91,prod1CC6);
          real mult1DE7#1 = RMul(coeff1D90,prod1CC1);
          real mult1DE8#1 = RMul(coeff1D8E,prod1CC0);
          real mult1DE9#4 = RMul(coeff1D60,prod1CBD);
          real mult1DEA#2 = RMul(coeff1C9A,prod1CBC);
          real mult1DEB#1 = RMul(coeff1C96,prod1CBA);
          real mult1DEC#2 = RMul(coeff1D8F,prod1CB0);
          real mult1DED#1 = RMul(coeff1D8E,prod1CAA);
          real mult1DEE#2 = RMul(coeff1C9A,prod1CA7);
          real sum1DEF#1 = RAdd(mult1DEE,sum1D57);
          real sum1DF0#1 = RAdd(mult1CE5,sum1DEF);
          real sum1DF1#1 = RAdd(mult1DED,sum1DF0);
          real sum1DF2#1 = RAdd(mult1D9C,sum1DF1);
          real sum1DF3#1 = RAdd(mult1DEC,sum1DF2);
          real sum1DF4#1 = RAdd(mult1DEB,sum1DF3);
          real sum1DF5#1 = RAdd(mult1DEA,sum1DF4);
          real sum1DF6#1 = RAdd(mult1DE9,sum1DF5);
          real sum1DF7#1 = RAdd(mult1CD9,sum1DF6);
          real sum1DF8#1 = RAdd(mult1DE8,sum1DF7);
          real sum1DF9#1 = RAdd(mult1DE7,sum1DF8);
          real sum1DFA#1 = RAdd(mult1D35,sum1DF9);
          real sum1DFB#1 = RAdd(mult1D96,sum1DFA);
          real sum1DFC#1 = RAdd(mult1DE6,sum1DFB);
          real mult1DFE#4 = RMul(coeff1D2D,prod1CC6);
          real mult1DFF#1 = RMul(coeff1DAF,prod1CC1);
          real mult1E00#2 = RMul(coeff1DAC,prod1CC0);
          real mult1E01#1 = RMul(coeff1DAE,prod1CBD);
          real mult1E02#2 = RMul(coeff1DAD,prod1CB0);
          real mult1E03#2 = RMul(coeff1DAC,prod1CAA);
          real mult1E04#2 = RMul(coeff1D5F,prod1CA7);
          real sum1E05#1 = RAdd(mult1E03,mult1E04);
          real sum1E06#1 = RAdd(mult1E02,sum1E05);
          real sum1E07#1 = RAdd(mult1DC9,sum1E06);
          real sum1E08#1 = RAdd(mult1D6F,sum1E07);
          real sum1E09#1 = RAdd(mult1E01,sum1E08);
          real sum1E0A#1 = RAdd(mult1E00,sum1E09);
          real sum1E0B#1 = RAdd(mult1DFF,sum1E0A);
          real sum1E0C#1 = RAdd(mult1DB3,sum1E0B);
          real sum1E0D#1 = RAdd(mult1DFE,sum1E0C);
          real mult1E0F#1 = RMul(coeff1D65,prod1CB7);
          real mult1E10#1 = RMul(coeff1D61,prod1CB4);
          real mult1E11#1 = RMul(coeff1D61,prod1CAA);
          real mult1E12#1 = RMul(coeff1D64,prod1CA4);
          real mult1E13#1 = RMul(coeff1D63,prod1CA2);
          real mult1E14#1 = RMul(coeff1D63,prod1C9E);
          real mult1E15#2 = RMul(coeff1D62,prod1C9C);
          real mult1E16#1 = RMul(coeff1D61,prod1C95);
          real mult1E17#2 = RMul(coeff1D60,prod1C93);
          real mult1E18#2 = RMul(coeff1D60,prod1C90);
          real mult1E19#2 = RMul(coeff1D5F,prod1C8C);
          real sum1E1A#1 = RAdd(mult1E18,mult1E19);
          real sum1E1B#1 = RAdd(mult1E17,sum1E1A);
          real sum1E1C#1 = RAdd(mult1E16,sum1E1B);
          real sum1E1D#1 = RAdd(mult1DD0,sum1E1C);
          real sum1E1E#1 = RAdd(mult1E15,sum1E1D);
          real sum1E1F#1 = RAdd(mult1E14,sum1E1E);
          real sum1E20#1 = RAdd(mult1D77,sum1E1F);
          real sum1E21#1 = RAdd(mult1E13,sum1E20);
          real sum1E22#1 = RAdd(mult1E12,sum1E21);
          real sum1E23#1 = RAdd(mult1E04,sum1E22);
          real sum1E24#1 = RAdd(mult1D75,sum1E23);
          real sum1E25#1 = RAdd(mult1E11,sum1E24);
          real sum1E26#1 = RAdd(mult1DCB,sum1E25);
          real sum1E27#1 = RAdd(mult1D73,sum1E26);
          real sum1E28#1 = RAdd(mult1DCA,sum1E27);
          real sum1E29#1 = RAdd(mult1DB8,sum1E28);
          real sum1E2A#1 = RAdd(mult1E10,sum1E29);
          real sum1E2B#1 = RAdd(mult1D70,sum1E2A);
          real sum1E2C#1 = RAdd(mult1E0F,sum1E2B);
          real mult1E2E#1 = RMul(coeff1D91,prod1CB7);
          real mult1E2F#1 = RMul(coeff1D90,prod1CA4);
          real mult1E30#1 = RMul(coeff1D8E,prod1CA2);
          real mult1E31#1 = RMul(coeff1D8E,prod1C9E);
          real mult1E32#3 = RMul(coeff1D60,prod1C95);
          real mult1E33#2 = RMul(coeff1C9A,prod1C93);
          real mult1E34#2 = RMul(coeff1C9A,prod1C90);
          real mult1E35#1 = RMul(coeff1C96,prod1C8C);
          real sum1E36#1 = RAdd(mult1E34,mult1E35);
          real sum1E37#1 = RAdd(mult1E33,sum1E36);
          real sum1E38#1 = RAdd(mult1E32,sum1E37);
          real sum1E39#1 = RAdd(mult1CEC,sum1E38);
          real sum1E3A#1 = RAdd(mult1CEB,sum1E39);
          real sum1E3B#1 = RAdd(mult1E31,sum1E3A);
          real sum1E3C#1 = RAdd(mult1CE9,sum1E3B);
          real sum1E3D#1 = RAdd(mult1E30,sum1E3C);
          real sum1E3E#1 = RAdd(mult1E2F,sum1E3D);
          real sum1E3F#1 = RAdd(mult1D55,sum1E3E);
          real sum1E40#1 = RAdd(mult1D9C,sum1E3F);
          real sum1E41#1 = RAdd(mult1DEC,sum1E40);
          real sum1E42#1 = RAdd(mult1D45,sum1E41);
          real sum1E43#1 = RAdd(mult1D99,sum1E42);
          real sum1E44#1 = RAdd(mult1E2E,sum1E43);
          real mult1E46#4 = RMul(coeff1D2D,prod1CB7);
          real mult1E47#1 = RMul(coeff1DAF,prod1CA4);
          real mult1E48#2 = RMul(coeff1DAC,prod1CA2);
          real mult1E49#2 = RMul(coeff1DAC,prod1C9E);
          real mult1E4A#1 = RMul(coeff1DAE,prod1C95);
          real sum1E4B#1 = RAdd(mult1DD1,mult1E19);
          real sum1E4C#1 = RAdd(mult1D79,sum1E4B);
          real sum1E4D#1 = RAdd(mult1E4A,sum1E4C);
          real sum1E4E#1 = RAdd(mult1E49,sum1E4D);
          real sum1E4F#1 = RAdd(mult1E48,sum1E4E);
          real sum1E50#1 = RAdd(mult1E47,sum1E4F);
          real sum1E51#1 = RAdd(mult1E02,sum1E50);
          real sum1E52#1 = RAdd(mult1DB6,sum1E51);
          real sum1E53#1 = RAdd(mult1E46,sum1E52);
          real sum1E55#1 = RAdd(mult1D9C,mult1CEB);
          real sum1E57#1 = RAdd(mult1D9C,mult1CE5);
          real sum1E59#1 = RAdd(mult1D9C,mult1CE3);
          real coeff1E5B#19 = 0.256e3;
          real coeff1E5C#13 = -0.224e3;
          real mult1E5D#1 = RMul(coeff1D61,prod1CC5);
          real mult1E5E#1 = RMul(coeff1E5C,prod1CC4);
          real mult1E5F#1 = RMul(coeff1E5C,prod1CC0);
          real mult1E60#1 = RMul(coeff1E5B,prod1CBF);
          real mult1E61#3 = RMul(coeff1E5C,prod1CAE);
          real mult1E62#2 = RMul(coeff1E5B,prod1CAC);
          real mult1E63#2 = RMul(coeff1E5B,prod1CA9);
          real sum1E64#1 = RAdd(mult1E63,mult1CEB);
          real sum1E65#1 = RAdd(mult1E62,sum1E64);
          real sum1E66#1 = RAdd(mult1E61,sum1E65);
          real sum1E67#1 = RAdd(mult1DEA,sum1E66);
          real sum1E68#1 = RAdd(mult1E60,sum1E67);
          real sum1E69#1 = RAdd(mult1E5F,sum1E68);
          real sum1E6A#1 = RAdd(mult1D98,sum1E69);
          real sum1E6B#1 = RAdd(mult1E5E,sum1E6A);
          real sum1E6C#1 = RAdd(mult1E5D,sum1E6B);
          real coeff1E6E#9 = 0.160e3;
          real mult1E6F#9 = RMul(coeff1D2C,prod1CC5);
          real mult1E70#1 = RMul(coeff1E6E,prod1CC0);
          real mult1E71#6 = RMul(coeff1DAC,prod1CAE);
          real sum1E72#1 = RAdd(mult1E71,mult1D75);
          real sum1E73#1 = RAdd(mult1DC8,sum1E72);
          real sum1E74#1 = RAdd(mult1D6E,sum1E73);
          real sum1E75#1 = RAdd(mult1E70,sum1E74);
          real sum1E76#1 = RAdd(mult1DB4,sum1E75);
          real sum1E77#1 = RAdd(mult1E6F,sum1E76);
          real mult1E79#1 = RMul(coeff1E6E,prod1CC4);
          real sum1E7A#1 = RAdd(mult1E71,mult1DCB);
          real sum1E7B#1 = RAdd(mult1D6E,sum1E7A);
          real sum1E7C#1 = RAdd(mult1E00,sum1E7B);
          real sum1E7D#1 = RAdd(mult1D6C,sum1E7C);
          real sum1E7E#1 = RAdd(mult1E79,sum1E7D);
          real sum1E7F#1 = RAdd(mult1E6F,sum1E7E);
          real mult1E81#1 = RMul(coeff1D61,prod1CB5);
          real mult1E82#1 = RMul(coeff1E5C,prod1CB4);
          real mult1E83#1 = RMul(coeff1E5C,prod1CA2);
          real mult1E84#1 = RMul(coeff1E5B,prod1CA1);
          real mult1E85#2 = RMul(coeff1E5B,prod1C9C);
          real sum1E86#1 = RAdd(mult1E85,mult1E33);
          real sum1E87#1 = RAdd(mult1E84,sum1E86);
          real sum1E88#1 = RAdd(mult1E83,sum1E87);
          real sum1E89#1 = RAdd(mult1CE5,sum1E88);
          real sum1E8A#1 = RAdd(mult1E62,sum1E89);
          real sum1E8B#1 = RAdd(mult1E61,sum1E8A);
          real sum1E8C#1 = RAdd(mult1D9B,sum1E8B);
          real sum1E8D#1 = RAdd(mult1E82,sum1E8C);
          real sum1E8E#1 = RAdd(mult1E81,sum1E8D);
          real mult1E90#8 = RMul(coeff1D2C,prod1CB5);
          real mult1E91#1 = RMul(coeff1E6E,prod1CA2);
          real sum1E92#1 = RAdd(mult1D78,mult1E17);
          real sum1E93#1 = RAdd(mult1D77,sum1E92);
          real sum1E94#1 = RAdd(mult1E91,sum1E93);
          real sum1E95#1 = RAdd(mult1E71,sum1E94);
          real sum1E96#1 = RAdd(mult1DB7,sum1E95);
          real sum1E97#1 = RAdd(mult1E90,sum1E96);
          real mult1E99#1 = RMul(coeff1E6E,prod1CB4);
          real sum1E9A#1 = RAdd(mult1E48,mult1D77);
          real sum1E9B#1 = RAdd(mult1DCB,sum1E9A);
          real sum1E9C#1 = RAdd(mult1E71,sum1E9B);
          real sum1E9D#1 = RAdd(mult1D72,sum1E9C);
          real sum1E9E#1 = RAdd(mult1E99,sum1E9D);
          real sum1E9F#1 = RAdd(mult1E90,sum1E9E);
          real mult1EA1#1 = RMul(coeff1D61,prod1CB0);
          real mult1EA2#1 = RMul(coeff1E5C,prod1CAA);
          real mult1EA3#1 = RMul(coeff1E5C,prod1C9E);
          real mult1EA4#1 = RMul(coeff1E5B,prod1C99);
          real sum1EA5#1 = RAdd(mult1EA4,mult1E34);
          real sum1EA6#1 = RAdd(mult1E85,sum1EA5);
          real sum1EA7#1 = RAdd(mult1EA3,sum1EA6);
          real sum1EA8#1 = RAdd(mult1DEE,sum1EA7);
          real sum1EA9#1 = RAdd(mult1E63,sum1EA8);
          real sum1EAA#1 = RAdd(mult1EA2,sum1EA9);
          real sum1EAB#1 = RAdd(mult1CE3,sum1EAA);
          real sum1EAC#1 = RAdd(mult1E61,sum1EAB);
          real sum1EAD#1 = RAdd(mult1EA1,sum1EAC);
          real mult1EAF#8 = RMul(coeff1D2C,prod1CB0);
          real mult1EB0#1 = RMul(coeff1E6E,prod1C9E);
          real sum1EB1#1 = RAdd(mult1DD0,mult1E18);
          real sum1EB2#1 = RAdd(mult1D78,sum1EB1);
          real sum1EB3#1 = RAdd(mult1EB0,sum1EB2);
          real sum1EB4#1 = RAdd(mult1E03,sum1EB3);
          real sum1EB5#1 = RAdd(mult1E71,sum1EB4);
          real sum1EB6#1 = RAdd(mult1EAF,sum1EB5);
          real mult1EB8#1 = RMul(coeff1E6E,prod1CAA);
          real sum1EB9#1 = RAdd(mult1E49,mult1DD0);
          real sum1EBA#1 = RAdd(mult1DCE,sum1EB9);
          real sum1EBB#1 = RAdd(mult1D75,sum1EBA);
          real sum1EBC#1 = RAdd(mult1EB8,sum1EBB);
          real sum1EBD#1 = RAdd(mult1E71,sum1EBC);
          real sum1EBE#1 = RAdd(mult1EAF,sum1EBD);
          real mult1EC0#11 = RMul(coeff1E5B,prod1CAE);
          real sum1EC1#1 = RAdd(mult1DCD,mult1E15);
          real sum1EC2#1 = RAdd(mult1D74,sum1EC1);
          real sum1EC3#1 = RAdd(mult1EC0,sum1EC2);
          tensor[35] intermediateCons1EC5#1 = <tensor[35]>[sum1D12,sum1D1C,sum1D23,sum1D2A,sum1D31,sum1D39,sum1D3D,sum1D42,sum1D49,sum1D4D,sum1D52,sum1D59,sum1D5D,sum1D8C,sum1DAA,sum1DC1,sum1DE4,sum1DFC,sum1E0D,sum1E2C,sum1E44,sum1E53,sum1E55,sum1E57,sum1E59,sum1E6C,sum1E77,sum1E7F,sum1E8E,sum1E97,sum1E9F,sum1EAD,sum1EB6,sum1EBE,sum1EC3];
          real compositionl210B#1 = VDot<35>(dofs1BF2,intermediateCons1EC5);
          real mult2143#1 = RMul(coeff1CB6,prod1CCD);
          real mult2144#1 = RMul(coeff1CAF,prod1CCC);
          real mult2145#1 = RMul(coeff1C9D,prod1CCB);
          real mult2146#3 = RMul(coeff1C8D,prod1CCA);
          real mult2147#1 = RMul(coeff1CAF,prod1CC6);
          real mult2148#1 = RMul(coeff1CAD,prod1CC5);
          real mult2149#6 = RMul(coeff1C9A,prod1CC4);
          real mult214A#1 = RMul(coeff1C9D,prod1CC1);
          real mult214B#7 = RMul(coeff1C9A,prod1CC0);
          real mult214C#3 = RMul(coeff1C8D,prod1CBD);
          real mult214D#1 = RMul(coeff1CAF,prod1CB7);
          real mult214E#1 = RMul(coeff1CAD,prod1CB5);
          real mult214F#5 = RMul(coeff1C9A,prod1CB4);
          real mult2150#1 = RMul(coeff1CAD,prod1CB0);
          real mult2152#5 = RMul(coeff1C9A,prod1CAA);
          real mult2153#1 = RMul(coeff1C9D,prod1CA4);
          real mult2154#6 = RMul(coeff1C9A,prod1CA2);
          real mult2155#6 = RMul(coeff1C9A,prod1C9E);
          real mult2156#3 = RMul(coeff1C8D,prod1C95);
          real sum2157#1 = RAdd(mult2155,mult2156);
          real sum2158#1 = RAdd(mult2154,sum2157);
          real sum2159#1 = RAdd(mult2153,sum2158);
          real sum215A#1 = RAdd(mult2152,sum2159);
          real sum215B#1 = RAdd(mult1EC0,sum215A);
          real sum215C#1 = RAdd(mult2150,sum215B);
          real sum215D#1 = RAdd(mult214F,sum215C);
          real sum215E#1 = RAdd(mult214E,sum215D);
          real sum215F#1 = RAdd(mult214D,sum215E);
          real sum2160#1 = RAdd(mult214C,sum215F);
          real sum2161#1 = RAdd(mult214B,sum2160);
          real sum2162#1 = RAdd(mult214A,sum2161);
          real sum2163#1 = RAdd(mult2149,sum2162);
          real sum2164#1 = RAdd(mult2148,sum2163);
          real sum2165#1 = RAdd(mult2147,sum2164);
          real sum2166#1 = RAdd(mult2146,sum2165);
          real sum2167#1 = RAdd(mult2145,sum2166);
          real sum2168#1 = RAdd(mult2144,sum2167);
          real sum2169#3 = RAdd(mult2143,sum2168);
          real coeff216B#3 = -0.48e2;
          real coeff216C#3 = 0.146666666667e2;
          real mult216E#6 = RMul(coeff1D16,prod1CCD);
          real mult216F#1 = RMul(coeff216C,prod1CB7);
          real mult2170#1 = RMul(coeff216B,prod1CA4);
          real sum2171#1 = RAdd(mult2170,mult2156);
          real sum2172#1 = RAdd(mult216F,sum2171);
          real sum2173#1 = RAdd(mult216E,sum2172);
          real basisEval2175#60 = 0.e0;
          real coeff2176#3 = -0.64e2;
          real mult2179#2 = RMul(coeff2176,prod1CB5);
          real sum217A#1 = RAdd(mult2179,mult2154);
          real sum217B#1 = RAdd(mult1DB0,sum217A);
          real mult2180#2 = RMul(coeff1D33,prod1CCC);
          real mult2181#4 = RMul(coeff1D14,prod1CCB);
          real sum2183#3 = RAdd(mult1E90,mult214F);
          real sum2184#1 = RAdd(mult2181,sum2183);
          real sum2185#1 = RAdd(mult2180,sum2184);
          real mult2187#1 = RMul(coeff1D2C,prod1CCB);
          real sum2188#1 = RAdd(mult2187,mult2146);
          real sum2189#2 = RAdd(mult1DB0,sum2188);
          real mult218C#2 = RMul(coeff2176,prod1CB0);
          real sum218D#1 = RAdd(mult218C,mult2155);
          real sum218E#1 = RAdd(mult1DFE,sum218D);
          real mult2190#2 = RMul(coeff1D33,prod1CC6);
          real mult2191#4 = RMul(coeff1D14,prod1CC1);
          real sum2193#3 = RAdd(mult1EAF,mult2152);
          real sum2194#1 = RAdd(mult2191,sum2193);
          real sum2195#1 = RAdd(mult2190,sum2194);
          real mult2197#1 = RMul(coeff1D2C,prod1CC1);
          real sum2198#1 = RAdd(mult2197,mult214C);
          real sum2199#2 = RAdd(mult1DFE,sum2198);
          real mult219F#3 = RMul(coeff1D64,prod1CCC);
          real mult21A0#1 = RMul(coeff1D63,prod1CCB);
          real mult21A2#3 = RMul(coeff1D63,prod1CC5);
          real mult21A3#5 = RMul(coeff1D62,prod1CC4);
          real mult21A4#5 = RMul(coeff1D60,prod1CC0);
          real mult21A5#3 = RMul(coeff1D63,prod1CB5);
          real mult21A6#5 = RMul(coeff1D62,prod1CB4);
          real mult21A7#9 = RMul(coeff1D62,prod1CAE);
          real mult21A8#5 = RMul(coeff1D60,prod1CA2);
          real sum21A9#1 = RAdd(mult21A7,mult21A8);
          real sum21AA#1 = RAdd(mult21A6,sum21A9);
          real sum21AB#1 = RAdd(mult21A5,sum21AA);
          real sum21AC#1 = RAdd(mult21A4,sum21AB);
          real sum21AD#1 = RAdd(mult21A3,sum21AC);
          real sum21AE#1 = RAdd(mult21A2,sum21AD);
          real sum21AF#1 = RAdd(mult1D94,sum21AE);
          real sum21B0#1 = RAdd(mult21A0,sum21AF);
          real sum21B1#2 = RAdd(mult219F,sum21B0);
          real mult21B5#3 = RMul(coeff1D8F,prod1CCC);
          real mult21B6#1 = RMul(coeff1D8E,prod1CCB);
          real mult21B7#3 = RMul(coeff1C9A,prod1CCA);
          real sum21B9#1 = RAdd(mult2149,sum2183);
          real sum21BA#1 = RAdd(mult1E6F,sum21B9);
          real sum21BB#1 = RAdd(mult21B7,sum21BA);
          real sum21BC#1 = RAdd(mult21B6,sum21BB);
          real sum21BD#2 = RAdd(mult21B5,sum21BC);
          real mult21C2#3 = RMul(coeff1DAD,prod1CCC);
          real mult21C3#3 = RMul(coeff1DAC,prod1CCB);
          real mult21C4#3 = RMul(coeff1D5F,prod1CCA);
          real sum21C5#1 = RAdd(mult21C3,mult21C4);
          real sum21C6#2 = RAdd(mult21C2,sum21C5);
          real mult21C8#3 = RMul(coeff1D64,prod1CC6);
          real mult21C9#5 = RMul(coeff1D60,prod1CC4);
          real mult21CA#1 = RMul(coeff1D63,prod1CC1);
          real mult21CB#5 = RMul(coeff1D62,prod1CC0);
          real mult21CD#3 = RMul(coeff1D63,prod1CB0);
          real mult21CE#5 = RMul(coeff1D62,prod1CAA);
          real mult21CF#5 = RMul(coeff1D60,prod1C9E);
          real sum21D0#1 = RAdd(mult21CE,mult21CF);
          real sum21D1#1 = RAdd(mult21A7,sum21D0);
          real sum21D2#1 = RAdd(mult21CD,sum21D1);
          real sum21D3#1 = RAdd(mult1DE9,sum21D2);
          real sum21D4#1 = RAdd(mult21CB,sum21D3);
          real sum21D5#1 = RAdd(mult21CA,sum21D4);
          real sum21D6#1 = RAdd(mult21C9,sum21D5);
          real sum21D7#1 = RAdd(mult21A2,sum21D6);
          real sum21D8#2 = RAdd(mult21C8,sum21D7);
          real mult21DA#3 = RMul(coeff1D8F,prod1CC6);
          real mult21DB#1 = RMul(coeff1D8E,prod1CC1);
          real mult21DC#3 = RMul(coeff1C9A,prod1CBD);
          real sum21DD#1 = RAdd(mult21DC,sum2193);
          real sum21DE#1 = RAdd(mult214B,sum21DD);
          real sum21DF#1 = RAdd(mult21DB,sum21DE);
          real sum21E0#1 = RAdd(mult1E6F,sum21DF);
          real sum21E1#2 = RAdd(mult21DA,sum21E0);
          real mult21E3#3 = RMul(coeff1DAD,prod1CC6);
          real mult21E4#3 = RMul(coeff1DAC,prod1CC1);
          real mult21E5#3 = RMul(coeff1D5F,prod1CBD);
          real sum21E6#1 = RAdd(mult21E4,mult21E5);
          real sum21E7#2 = RAdd(mult21E3,sum21E6);
          real coeff21E9#3 = -0.170666666667e3;
          real coeff21EA#9 = -0.384e3;
          real coeff21EB#3 = 0.288e3;
          real coeff21EC#1 = -0.512e3;
          real coeff21ED#9 = 0.384e3;
          real coeff21EE#3 = -0.138666666667e3;
          real mult21F1#3 = RMul(coeff1D65,prod1CCD);
          real mult21F2#2 = RMul(coeff1D61,prod1CCB);
          real mult21F3#2 = RMul(coeff1D61,prod1CC1);
          real mult21F4#1 = RMul(coeff21EE,prod1CB7);
          real mult21F5#2 = RMul(coeff21ED,prod1CB5);
          real mult21F6#2 = RMul(coeff21ED,prod1CB0);
          real mult21F7#6 = RMul(coeff21EC,prod1CAE);
          real mult21F8#1 = RMul(coeff21EB,prod1CA4);
          real mult21F9#2 = RMul(coeff21EA,prod1CA2);
          real mult21FA#2 = RMul(coeff21EA,prod1C9E);
          real mult21FB#2 = RMul(coeff21E9,prod1C95);
          real sum21FC#1 = RAdd(mult21FA,mult21FB);
          real sum21FD#1 = RAdd(mult21F9,sum21FC);
          real sum21FE#1 = RAdd(mult21F8,sum21FD);
          real sum21FF#1 = RAdd(mult21CE,sum21FE);
          real sum2200#1 = RAdd(mult21F7,sum21FF);
          real sum2201#1 = RAdd(mult21F6,sum2200);
          real sum2202#1 = RAdd(mult21A6,sum2201);
          real sum2203#1 = RAdd(mult21F5,sum2202);
          real sum2204#1 = RAdd(mult21F4,sum2203);
          real sum2205#1 = RAdd(mult21E5,sum2204);
          real sum2206#1 = RAdd(mult21A4,sum2205);
          real sum2207#1 = RAdd(mult21F3,sum2206);
          real sum2208#1 = RAdd(mult21C9,sum2207);
          real sum2209#1 = RAdd(mult21A2,sum2208);
          real sum220A#1 = RAdd(mult21C8,sum2209);
          real sum220B#1 = RAdd(mult21C4,sum220A);
          real sum220C#1 = RAdd(mult21F2,sum220B);
          real sum220D#1 = RAdd(mult219F,sum220C);
          real sum220E#1 = RAdd(mult21F1,sum220D);
          real coeff2210#3 = -0.288e3;
          real coeff2211#3 = 0.152e3;
          real mult2213#3 = RMul(coeff1D91,prod1CCD);
          real mult2214#1 = RMul(coeff2211,prod1CB7);
          real mult2215#2 = RMul(coeff2210,prod1CB5);
          real mult2216#2 = RMul(coeff2210,prod1CB0);
          real mult2217#1 = RMul(coeff21EA,prod1CA4);
          real mult2218#2 = RMul(coeff21ED,prod1CA2);
          real mult2219#2 = RMul(coeff21ED,prod1C9E);
          real mult221A#1 = RMul(coeff1E5B,prod1C95);
          real sum221B#1 = RAdd(mult2219,mult221A);
          real sum221C#1 = RAdd(mult2218,sum221B);
          real sum221D#1 = RAdd(mult2217,sum221C);
          real sum221E#1 = RAdd(mult2152,sum221D);
          real sum221F#1 = RAdd(mult1EC0,sum221E);
          real sum2220#1 = RAdd(mult2216,sum221F);
          real sum2221#1 = RAdd(mult214F,sum2220);
          real sum2222#1 = RAdd(mult2215,sum2221);
          real sum2223#1 = RAdd(mult2214,sum2222);
          real sum2224#1 = RAdd(mult2191,sum2223);
          real sum2225#1 = RAdd(mult1E6F,sum2224);
          real sum2226#1 = RAdd(mult21DA,sum2225);
          real sum2227#1 = RAdd(mult2181,sum2226);
          real sum2228#1 = RAdd(mult21B5,sum2227);
          real sum2229#1 = RAdd(mult2213,sum2228);
          real coeff222B#3 = 0.224e3;
          real coeff222D#3 = -0.746666666667e2;
          real mult222E#3 = RMul(coeff1D2D,prod1CCD);
          real mult222F#1 = RMul(coeff222D,prod1CB7);
          real mult2230#4 = RMul(coeff1C96,prod1CB5);
          real mult2231#4 = RMul(coeff1C96,prod1CB0);
          real mult2232#1 = RMul(coeff222B,prod1CA4);
          real sum2233#1 = RAdd(mult21CF,mult21FB);
          real sum2234#1 = RAdd(mult21A8,sum2233);
          real sum2235#1 = RAdd(mult2232,sum2234);
          real sum2236#1 = RAdd(mult2231,sum2235);
          real sum2237#1 = RAdd(mult2230,sum2236);
          real sum2238#1 = RAdd(mult222F,sum2237);
          real sum2239#1 = RAdd(mult21E3,sum2238);
          real sum223A#1 = RAdd(mult21C2,sum2239);
          real sum223B#1 = RAdd(mult222E,sum223A);
          real sum223D#1 = RAdd(mult1E6F,mult1EC0);
          real sum223F#1 = RAdd(mult1E6F,mult214B);
          real sum2241#2 = RAdd(mult1E6F,mult2149);
          real mult2244#3 = RMul(coeff1E5C,prod1CC5);
          real mult2245#2 = RMul(coeff1E5B,prod1CC4);
          real mult2246#2 = RMul(coeff1E5B,prod1CC0);
          real sum2247#1 = RAdd(mult2246,mult1EC0);
          real sum2248#1 = RAdd(mult2245,sum2247);
          real sum2249#1 = RAdd(mult2244,sum2248);
          real mult224B#6 = RMul(coeff1DAC,prod1CC5);
          real sum224C#1 = RAdd(mult224B,mult21A4);
          real sum224E#1 = RAdd(mult224B,mult21C9);
          real coeff2250#7 = 0.512e3;
          real coeff2251#3 = -0.448e3;
          real mult2252#2 = RMul(coeff1D61,prod1CCC);
          real mult2253#2 = RMul(coeff1E5C,prod1CCB);
          real mult2254#2 = RMul(coeff2251,prod1CB5);
          real mult2255#1 = RMul(coeff2250,prod1CB4);
          real mult2256#6 = RMul(coeff2250,prod1CAE);
          real sum2257#1 = RAdd(mult2256,mult2218);
          real sum2258#1 = RAdd(mult2255,sum2257);
          real sum2259#1 = RAdd(mult2254,sum2258);
          real sum225A#1 = RAdd(mult214B,sum2259);
          real sum225B#1 = RAdd(mult2245,sum225A);
          real sum225C#1 = RAdd(mult2244,sum225B);
          real sum225D#1 = RAdd(mult21B7,sum225C);
          real sum225E#1 = RAdd(mult2253,sum225D);
          real sum225F#1 = RAdd(mult2252,sum225E);
          real coeff2261#3 = 0.320e3;
          real mult2262#4 = RMul(coeff1D2C,prod1CCC);
          real mult2263#2 = RMul(coeff2261,prod1CB5);
          real sum2264#1 = RAdd(mult21A7,mult21F9);
          real sum2265#1 = RAdd(mult21A6,sum2264);
          real sum2266#1 = RAdd(mult2263,sum2265);
          real sum2267#1 = RAdd(mult224B,sum2266);
          real sum2268#1 = RAdd(mult21C3,sum2267);
          real sum2269#1 = RAdd(mult2262,sum2268);
          real mult226C#2 = RMul(coeff1E6E,prod1CCB);
          real sum226D#1 = RAdd(mult2230,mult21A6);
          real sum226E#1 = RAdd(mult21C9,sum226D);
          real sum226F#1 = RAdd(mult224B,sum226E);
          real sum2270#1 = RAdd(mult1D94,sum226F);
          real sum2271#1 = RAdd(mult226C,sum2270);
          real sum2272#1 = RAdd(mult2262,sum2271);
          real mult2274#2 = RMul(coeff1D61,prod1CC6);
          real mult2275#2 = RMul(coeff1E5C,prod1CC1);
          real mult2276#2 = RMul(coeff2251,prod1CB0);
          real mult2277#1 = RMul(coeff2250,prod1CAA);
          real sum2278#1 = RAdd(mult2277,mult2219);
          real sum2279#1 = RAdd(mult2256,sum2278);
          real sum227A#1 = RAdd(mult2276,sum2279);
          real sum227B#1 = RAdd(mult21DC,sum227A);
          real sum227C#1 = RAdd(mult2246,sum227B);
          real sum227D#1 = RAdd(mult2275,sum227C);
          real sum227E#1 = RAdd(mult2149,sum227D);
          real sum227F#1 = RAdd(mult2244,sum227E);
          real sum2280#1 = RAdd(mult2274,sum227F);
          real mult2282#4 = RMul(coeff1D2C,prod1CC6);
          real mult2283#2 = RMul(coeff2261,prod1CB0);
          real sum2284#1 = RAdd(mult21CE,mult21FA);
          real sum2285#1 = RAdd(mult21A7,sum2284);
          real sum2286#1 = RAdd(mult2283,sum2285);
          real sum2287#1 = RAdd(mult21E4,sum2286);
          real sum2288#1 = RAdd(mult224B,sum2287);
          real sum2289#1 = RAdd(mult2282,sum2288);
          real mult228B#2 = RMul(coeff1E6E,prod1CC1);
          real sum228C#1 = RAdd(mult2231,mult21CE);
          real sum228D#1 = RAdd(mult1DE9,sum228C);
          real sum228E#1 = RAdd(mult21A4,sum228D);
          real sum228F#1 = RAdd(mult228B,sum228E);
          real sum2290#1 = RAdd(mult224B,sum228F);
          real sum2291#1 = RAdd(mult2282,sum2290);
          real mult2293#1 = RMul(coeff1E5B,prod1CC5);
          real sum2294#1 = RAdd(mult21CB,mult21F7);
          real sum2295#1 = RAdd(mult21A3,sum2294);
          real sum2296#1 = RAdd(mult2293,sum2295);
          real mult2299#1 = RMul(coeff216C,prod1CC6);
          real mult229A#1 = RMul(coeff216B,prod1CC1);
          real sum229B#1 = RAdd(mult229A,mult214C);
          real sum229C#1 = RAdd(mult2299,sum229B);
          real sum229D#1 = RAdd(mult216E,sum229C);
          real mult229F#2 = RMul(coeff2176,prod1CC5);
          real sum22A0#1 = RAdd(mult229F,mult214B);
          real sum22A1#1 = RAdd(mult1DB0,sum22A0);
          real sum22A3#1 = RAdd(mult2181,sum2241);
          real sum22A4#1 = RAdd(mult2180,sum22A3);
          real mult22A8#1 = RMul(coeff1D2C,prod1CA4);
          real sum22A9#1 = RAdd(mult22A8,mult2156);
          real sum22AA#2 = RAdd(mult1E46,sum22A9);
          real mult22AC#2 = RMul(coeff1D33,prod1CB7);
          real mult22AD#2 = RMul(coeff1D14,prod1CA4);
          real sum22AE#2 = RAdd(mult22AD,mult2155);
          real sum22AF#1 = RAdd(mult1EAF,sum22AE);
          real sum22B0#1 = RAdd(mult22AC,sum22AF);
          real sum22B2#1 = RAdd(mult218C,mult2152);
          real sum22B3#1 = RAdd(mult1E46,sum22B2);
          real mult22B8#1 = RMul(coeff21EE,prod1CC6);
          real mult22B9#2 = RMul(coeff21ED,prod1CC5);
          real mult22BA#1 = RMul(coeff21EB,prod1CC1);
          real mult22BB#2 = RMul(coeff21EA,prod1CC0);
          real mult22BC#2 = RMul(coeff21E9,prod1CBD);
          real mult22BD#3 = RMul(coeff1D64,prod1CB7);
          real mult22BE#4 = RMul(coeff1D60,prod1CB4);
          real mult22BF#2 = RMul(coeff21EA,prod1CAA);
          real mult22C0#2 = RMul(coeff1D61,prod1CA4);
          real mult22C1#4 = RMul(coeff1D62,prod1C9E);
          real mult22C2#3 = RMul(coeff1D5F,prod1C95);
          real sum22C3#1 = RAdd(mult22C1,mult22C2);
          real sum22C4#1 = RAdd(mult21A8,sum22C3);
          real sum22C5#1 = RAdd(mult22C0,sum22C4);
          real sum22C6#1 = RAdd(mult22BF,sum22C5);
          real sum22C7#1 = RAdd(mult21F7,sum22C6);
          real sum22C8#1 = RAdd(mult21F6,sum22C7);
          real sum22C9#1 = RAdd(mult22BE,sum22C8);
          real sum22CA#1 = RAdd(mult21A5,sum22C9);
          real sum22CB#1 = RAdd(mult22BD,sum22CA);
          real sum22CC#1 = RAdd(mult22BC,sum22CB);
          real sum22CD#1 = RAdd(mult22BB,sum22CC);
          real sum22CE#1 = RAdd(mult22BA,sum22CD);
          real sum22CF#1 = RAdd(mult21A3,sum22CE);
          real sum22D0#1 = RAdd(mult22B9,sum22CF);
          real sum22D1#1 = RAdd(mult22B8,sum22D0);
          real sum22D2#1 = RAdd(mult21C4,sum22D1);
          real sum22D3#1 = RAdd(mult21F2,sum22D2);
          real sum22D4#1 = RAdd(mult219F,sum22D3);
          real sum22D5#1 = RAdd(mult21F1,sum22D4);
          real mult22D7#1 = RMul(coeff2211,prod1CC6);
          real mult22D8#2 = RMul(coeff2210,prod1CC5);
          real mult22D9#1 = RMul(coeff21EA,prod1CC1);
          real mult22DA#2 = RMul(coeff21ED,prod1CC0);
          real mult22DB#1 = RMul(coeff1E5B,prod1CBD);
          real mult22DC#3 = RMul(coeff1D8F,prod1CB7);
          real mult22DD#2 = RMul(coeff21ED,prod1CAA);
          real sum22DE#1 = RAdd(mult22DD,sum22AE);
          real sum22DF#1 = RAdd(mult1EC0,sum22DE);
          real sum22E0#1 = RAdd(mult2216,sum22DF);
          real sum22E1#1 = RAdd(mult1E90,sum22E0);
          real sum22E2#1 = RAdd(mult22DC,sum22E1);
          real sum22E3#1 = RAdd(mult22DB,sum22E2);
          real sum22E4#1 = RAdd(mult22DA,sum22E3);
          real sum22E5#1 = RAdd(mult22D9,sum22E4);
          real sum22E6#1 = RAdd(mult2149,sum22E5);
          real sum22E7#1 = RAdd(mult22D8,sum22E6);
          real sum22E8#1 = RAdd(mult22D7,sum22E7);
          real sum22E9#1 = RAdd(mult2181,sum22E8);
          real sum22EA#1 = RAdd(mult21B5,sum22E9);
          real sum22EB#1 = RAdd(mult2213,sum22EA);
          real mult22ED#1 = RMul(coeff222D,prod1CC6);
          real mult22EE#4 = RMul(coeff1C96,prod1CC5);
          real mult22EF#1 = RMul(coeff222B,prod1CC1);
          real mult22F0#3 = RMul(coeff1DAD,prod1CB7);
          real mult22F1#4 = RMul(coeff1D60,prod1CAA);
          real sum22F2#1 = RAdd(mult2231,mult22F1);
          real sum22F3#1 = RAdd(mult22F0,sum22F2);
          real sum22F4#1 = RAdd(mult22BC,sum22F3);
          real sum22F5#1 = RAdd(mult21A4,sum22F4);
          real sum22F6#1 = RAdd(mult22EF,sum22F5);
          real sum22F7#1 = RAdd(mult22EE,sum22F6);
          real sum22F8#1 = RAdd(mult22ED,sum22F7);
          real sum22F9#1 = RAdd(mult21C2,sum22F8);
          real sum22FA#1 = RAdd(mult222E,sum22F9);
          real mult22FC#1 = RMul(coeff1D63,prod1CA4);
          real mult22FD#5 = RMul(coeff1D62,prod1CA2);
          real sum22FF#2 = RAdd(mult22C1,mult1E32);
          real sum2300#1 = RAdd(mult22FD,sum22FF);
          real sum2301#1 = RAdd(mult22FC,sum2300);
          real sum2302#1 = RAdd(mult22F1,sum2301);
          real sum2303#1 = RAdd(mult21A7,sum2302);
          real sum2304#1 = RAdd(mult21CD,sum2303);
          real sum2305#1 = RAdd(mult22BE,sum2304);
          real sum2306#1 = RAdd(mult21A5,sum2305);
          real sum2307#2 = RAdd(mult22BD,sum2306);
          real mult2309#1 = RMul(coeff1D8E,prod1CA4);
          real mult230A#3 = RMul(coeff1C9A,prod1C95);
          real sum230B#1 = RAdd(mult2155,mult230A);
          real sum230C#1 = RAdd(mult2154,sum230B);
          real sum230D#1 = RAdd(mult2309,sum230C);
          real sum230E#1 = RAdd(mult1EAF,sum230D);
          real sum230F#1 = RAdd(mult1E90,sum230E);
          real sum2310#2 = RAdd(mult22DC,sum230F);
          real mult2312#3 = RMul(coeff1DAC,prod1CA4);
          real sum2313#1 = RAdd(mult2312,mult22C2);
          real sum2314#2 = RAdd(mult22F0,sum2313);
          real sum2316#1 = RAdd(mult1E90,mult2154);
          real sum2318#1 = RAdd(mult1E90,mult1EC0);
          real mult231B#2 = RMul(coeff2251,prod1CC5);
          real mult231C#1 = RMul(coeff2250,prod1CC4);
          real mult231D#3 = RMul(coeff1E5C,prod1CB5);
          real mult231E#2 = RMul(coeff1E5B,prod1CB4);
          real sum231F#1 = RAdd(mult2256,mult2154);
          real sum2320#1 = RAdd(mult231E,sum231F);
          real sum2321#1 = RAdd(mult231D,sum2320);
          real sum2322#1 = RAdd(mult22DA,sum2321);
          real sum2323#1 = RAdd(mult231C,sum2322);
          real sum2324#1 = RAdd(mult231B,sum2323);
          real sum2325#1 = RAdd(mult21B7,sum2324);
          real sum2326#1 = RAdd(mult2253,sum2325);
          real sum2327#1 = RAdd(mult2252,sum2326);
          real mult2329#2 = RMul(coeff2261,prod1CC5);
          real mult232A#5 = RMul(coeff1DAC,prod1CB5);
          real sum232B#1 = RAdd(mult232A,mult21A7);
          real sum232C#1 = RAdd(mult22BB,sum232B);
          real sum232D#1 = RAdd(mult21A3,sum232C);
          real sum232E#1 = RAdd(mult2329,sum232D);
          real sum232F#1 = RAdd(mult21C3,sum232E);
          real sum2330#1 = RAdd(mult2262,sum232F);
          real sum2332#2 = RAdd(mult232A,mult22BE);
          real sum2333#1 = RAdd(mult21A3,sum2332);
          real sum2334#1 = RAdd(mult22EE,sum2333);
          real sum2335#1 = RAdd(mult1D94,sum2334);
          real sum2336#1 = RAdd(mult226C,sum2335);
          real sum2337#1 = RAdd(mult2262,sum2336);
          real mult2339#2 = RMul(coeff1E5B,prod1CA2);
          real sum233A#1 = RAdd(mult1EC0,mult2339);
          real sum233B#1 = RAdd(mult231E,sum233A);
          real sum233C#1 = RAdd(mult231D,sum233B);
          real sum233E#1 = RAdd(mult232A,mult21A8);
          real mult2341#2 = RMul(coeff1D61,prod1CB7);
          real mult2342#2 = RMul(coeff1E5C,prod1CA4);
          real mult2343#1 = RMul(coeff2250,prod1C9E);
          real sum2344#1 = RAdd(mult2343,mult230A);
          real sum2345#1 = RAdd(mult2339,sum2344);
          real sum2346#1 = RAdd(mult2342,sum2345);
          real sum2347#1 = RAdd(mult22DD,sum2346);
          real sum2348#1 = RAdd(mult2256,sum2347);
          real sum2349#1 = RAdd(mult2276,sum2348);
          real sum234A#1 = RAdd(mult214F,sum2349);
          real sum234B#1 = RAdd(mult231D,sum234A);
          real sum234C#1 = RAdd(mult2341,sum234B);
          real mult234E#4 = RMul(coeff1D2C,prod1CB7);
          real mult234F#2 = RMul(coeff1E6E,prod1CA4);
          real sum2350#1 = RAdd(mult21A8,sum22FF);
          real sum2351#1 = RAdd(mult234F,sum2350);
          real sum2352#1 = RAdd(mult2231,sum2351);
          real sum2353#1 = RAdd(mult232A,sum2352);
          real sum2354#1 = RAdd(mult234E,sum2353);
          real sum2356#1 = RAdd(mult2312,mult22C1);
          real sum2357#1 = RAdd(mult22BF,sum2356);
          real sum2358#1 = RAdd(mult21A7,sum2357);
          real sum2359#1 = RAdd(mult2283,sum2358);
          real sum235A#1 = RAdd(mult232A,sum2359);
          real sum235B#1 = RAdd(mult234E,sum235A);
          real mult235D#1 = RMul(coeff1E5B,prod1CB5);
          real sum235E#1 = RAdd(mult21F7,mult22FD);
          real sum235F#1 = RAdd(mult21A6,sum235E);
          real sum2360#1 = RAdd(mult235D,sum235F);
          real mult2363#1 = RMul(coeff216C,prod1CCC);
          real mult2364#1 = RMul(coeff216B,prod1CCB);
          real sum2365#1 = RAdd(mult2364,mult2146);
          real sum2366#1 = RAdd(mult2363,sum2365);
          real sum2367#1 = RAdd(mult216E,sum2366);
          real sum236A#1 = RAdd(mult2191,mult214B);
          real sum236B#1 = RAdd(mult1E6F,sum236A);
          real sum236C#1 = RAdd(mult2190,sum236B);
          real sum236E#1 = RAdd(mult229F,mult2149);
          real sum236F#1 = RAdd(mult1DFE,sum236E);
          real sum2372#2 = RAdd(mult22AD,mult2154);
          real sum2373#1 = RAdd(mult1E90,sum2372);
          real sum2374#1 = RAdd(mult22AC,sum2373);
          real sum2376#1 = RAdd(mult2179,mult214F);
          real sum2377#1 = RAdd(mult1E46,sum2376);
          real mult2379#1 = RMul(coeff21EE,prod1CCC);
          real mult237A#1 = RMul(coeff21EB,prod1CCB);
          real mult237B#2 = RMul(coeff21E9,prod1CCA);
          real mult237C#2 = RMul(coeff21EA,prod1CC4);
          real mult237D#2 = RMul(coeff21EA,prod1CB4);
          real sum237E#1 = RAdd(mult21CF,mult22C2);
          real sum237F#1 = RAdd(mult22FD,sum237E);
          real sum2380#1 = RAdd(mult22C0,sum237F);
          real sum2381#1 = RAdd(mult22F1,sum2380);
          real sum2382#1 = RAdd(mult21F7,sum2381);
          real sum2383#1 = RAdd(mult21CD,sum2382);
          real sum2384#1 = RAdd(mult237D,sum2383);
          real sum2385#1 = RAdd(mult21F5,sum2384);
          real sum2386#1 = RAdd(mult22BD,sum2385);
          real sum2387#1 = RAdd(mult21E5,sum2386);
          real sum2388#1 = RAdd(mult21CB,sum2387);
          real sum2389#1 = RAdd(mult21F3,sum2388);
          real sum238A#1 = RAdd(mult237C,sum2389);
          real sum238B#1 = RAdd(mult22B9,sum238A);
          real sum238C#1 = RAdd(mult21C8,sum238B);
          real sum238D#1 = RAdd(mult237B,sum238C);
          real sum238E#1 = RAdd(mult237A,sum238D);
          real sum238F#1 = RAdd(mult2379,sum238E);
          real sum2390#1 = RAdd(mult21F1,sum238F);
          real mult2392#1 = RMul(coeff2211,prod1CCC);
          real mult2393#1 = RMul(coeff21EA,prod1CCB);
          real mult2394#1 = RMul(coeff1E5B,prod1CCA);
          real mult2395#2 = RMul(coeff21ED,prod1CC4);
          real mult2396#2 = RMul(coeff21ED,prod1CB4);
          real sum2397#1 = RAdd(mult1EC0,sum2372);
          real sum2398#1 = RAdd(mult1EAF,sum2397);
          real sum2399#1 = RAdd(mult2396,sum2398);
          real sum239A#1 = RAdd(mult2215,sum2399);
          real sum239B#1 = RAdd(mult22DC,sum239A);
          real sum239C#1 = RAdd(mult214B,sum239B);
          real sum239D#1 = RAdd(mult2191,sum239C);
          real sum239E#1 = RAdd(mult2395,sum239D);
          real sum239F#1 = RAdd(mult22D8,sum239E);
          real sum23A0#1 = RAdd(mult21DA,sum239F);
          real sum23A1#1 = RAdd(mult2394,sum23A0);
          real sum23A2#1 = RAdd(mult2393,sum23A1);
          real sum23A3#1 = RAdd(mult2392,sum23A2);
          real sum23A4#1 = RAdd(mult2213,sum23A3);
          real mult23A6#1 = RMul(coeff222D,prod1CCC);
          real mult23A7#1 = RMul(coeff222B,prod1CCB);
          real sum23A8#1 = RAdd(mult2230,mult22BE);
          real sum23A9#1 = RAdd(mult22F0,sum23A8);
          real sum23AA#1 = RAdd(mult21C9,sum23A9);
          real sum23AB#1 = RAdd(mult22EE,sum23AA);
          real sum23AC#1 = RAdd(mult21E3,sum23AB);
          real sum23AD#1 = RAdd(mult237B,sum23AC);
          real sum23AE#1 = RAdd(mult23A7,sum23AD);
          real sum23AF#1 = RAdd(mult23A6,sum23AE);
          real sum23B0#1 = RAdd(mult222E,sum23AF);
          real sum23B8#1 = RAdd(mult1EAF,mult2155);
          real sum23BB#1 = RAdd(mult1EAF,mult1EC0);
          real mult23BD#1 = RMul(coeff2250,prod1CC0);
          real mult23BE#3 = RMul(coeff1E5C,prod1CB0);
          real mult23BF#2 = RMul(coeff1E5B,prod1CAA);
          real sum23C0#1 = RAdd(mult23BF,mult2155);
          real sum23C1#1 = RAdd(mult2256,sum23C0);
          real sum23C2#1 = RAdd(mult23BE,sum23C1);
          real sum23C3#1 = RAdd(mult21DC,sum23C2);
          real sum23C4#1 = RAdd(mult23BD,sum23C3);
          real sum23C5#1 = RAdd(mult2275,sum23C4);
          real sum23C6#1 = RAdd(mult2395,sum23C5);
          real sum23C7#1 = RAdd(mult231B,sum23C6);
          real sum23C8#1 = RAdd(mult2274,sum23C7);
          real mult23CA#5 = RMul(coeff1DAC,prod1CB0);
          real sum23CB#2 = RAdd(mult23CA,mult22F1);
          real sum23CC#1 = RAdd(mult1DE9,sum23CB);
          real sum23CD#1 = RAdd(mult21CB,sum23CC);
          real sum23CE#1 = RAdd(mult228B,sum23CD);
          real sum23CF#1 = RAdd(mult22EE,sum23CE);
          real sum23D0#1 = RAdd(mult2282,sum23CF);
          real sum23D2#1 = RAdd(mult23CA,mult21A7);
          real sum23D3#1 = RAdd(mult21CB,sum23D2);
          real sum23D4#1 = RAdd(mult21E4,sum23D3);
          real sum23D5#1 = RAdd(mult237C,sum23D4);
          real sum23D6#1 = RAdd(mult2329,sum23D5);
          real sum23D7#1 = RAdd(mult2282,sum23D6);
          real mult23D9#1 = RMul(coeff2250,prod1CA2);
          real mult23DA#2 = RMul(coeff1E5B,prod1C9E);
          real sum23DB#1 = RAdd(mult23DA,mult230A);
          real sum23DC#1 = RAdd(mult23D9,sum23DB);
          real sum23DD#1 = RAdd(mult2342,sum23DC);
          real sum23DE#1 = RAdd(mult2152,sum23DD);
          real sum23DF#1 = RAdd(mult2256,sum23DE);
          real sum23E0#1 = RAdd(mult23BE,sum23DF);
          real sum23E1#1 = RAdd(mult2396,sum23E0);
          real sum23E2#1 = RAdd(mult2254,sum23E1);
          real sum23E3#1 = RAdd(mult2341,sum23E2);
          real sum23E5#1 = RAdd(mult21CF,mult1E32);
          real sum23E6#1 = RAdd(mult22FD,sum23E5);
          real sum23E7#1 = RAdd(mult234F,sum23E6);
          real sum23E8#1 = RAdd(mult23CA,sum23E7);
          real sum23E9#1 = RAdd(mult2230,sum23E8);
          real sum23EA#1 = RAdd(mult234E,sum23E9);
          real sum23EC#1 = RAdd(mult2312,mult22FD);
          real sum23ED#1 = RAdd(mult21A7,sum23EC);
          real sum23EE#1 = RAdd(mult23CA,sum23ED);
          real sum23EF#1 = RAdd(mult237D,sum23EE);
          real sum23F0#1 = RAdd(mult2263,sum23EF);
          real sum23F1#1 = RAdd(mult234E,sum23F0);
          real sum23F3#1 = RAdd(mult23BF,mult23DA);
          real sum23F4#1 = RAdd(mult1EC0,sum23F3);
          real sum23F5#1 = RAdd(mult23BE,sum23F4);
          real sum23F7#1 = RAdd(mult23CA,mult21CF);
          real mult23FA#1 = RMul(coeff1E5B,prod1CB0);
          real sum23FB#1 = RAdd(mult21CE,mult22C1);
          real sum23FC#1 = RAdd(mult21F7,sum23FB);
          real sum23FD#1 = RAdd(mult23FA,sum23FC);
          tensor[35] intermediateCons23FF#1 = <tensor[35]>[sum2169,sum2173,basisEval2175,basisEval2175,basisEval2175,basisEval2175,basisEval2175,sum217B,sum2185,sum2189,sum218E,sum2195,sum2199,sum21B1,sum21BD,sum21C6,sum21D8,sum21E1,sum21E7,sum220E,sum2229,sum223B,sum223D,sum223F,sum2241,sum2249,sum224C,sum224E,sum225F,sum2269,sum2272,sum2280,sum2289,sum2291,sum2296];
          tensor[35] intermediateCons2400#1 = <tensor[35]>[sum2169,basisEval2175,sum229D,basisEval2175,sum22A1,sum22A4,sum2189,basisEval2175,basisEval2175,basisEval2175,sum22AA,sum22B0,sum22B3,sum21B1,sum21BD,sum21C6,sum22D5,sum22EB,sum22FA,sum2307,sum2310,sum2314,sum2316,sum2318,sum2183,sum2327,sum2330,sum2337,sum233C,sum233E,sum2332,sum234C,sum2354,sum235B,sum2360];
          tensor[35] intermediateCons2401#1 = <tensor[35]>[sum2169,basisEval2175,basisEval2175,sum2367,sum2199,sum236C,sum236F,sum22AA,sum2374,sum2377,basisEval2175,basisEval2175,basisEval2175,sum2390,sum23A4,sum23B0,sum21D8,sum21E1,sum21E7,sum2307,sum2310,sum2314,sum23B8,sum2193,sum23BB,sum23C8,sum23D0,sum23D7,sum23E3,sum23EA,sum23F1,sum23F5,sum23F7,sum23CB,sum23FD];
          real vdot26F8#3 = VDot<35>(dofs1BF2,intermediateCons23FF);
          real vdot26FA#3 = VDot<35>(dofs1BF2,intermediateCons2400);
          real vdot26FC#3 = VDot<35>(dofs1BF2,intermediateCons2401);
          int mulRes2707#4 = IMul(intPos1A87,ilit1A9A);
          int idx270A#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(_t1316,mulRes2707);
          int addRes270C#1 = IAdd(mulRes2707,ilit1A91);
          int idx270D#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(_t1316,addRes270C);
          int addRes270F#1 = IAdd(mulRes2707,ilit1A94);
          int idx2710#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(_t1316,addRes270F);
          int addRes2712#1 = IAdd(mulRes2707,ilit1A97);
          int idx2713#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(_t1316,addRes2712);
          int mulRes2729#3 = IMul(ilit1A97,idx270A);
          int addRes272C#1 = IAdd(ilit1A91,mulRes2729);
          int addRes272E#1 = IAdd(ilit1A94,mulRes2729);
          real dof_load272F#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1316,mulRes2729);
          real dof_load2730#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1316,addRes272C);
          real dof_load2731#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1316,addRes272E);
          int mulRes2734#3 = IMul(ilit1A97,idx270D);
          int addRes2736#1 = IAdd(ilit1A91,mulRes2734);
          int addRes2737#1 = IAdd(ilit1A94,mulRes2734);
          real dof_load2738#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1316,mulRes2734);
          real dof_load2739#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1316,addRes2736);
          real dof_load273A#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1316,addRes2737);
          int mulRes273D#3 = IMul(ilit1A97,idx2710);
          int addRes273F#1 = IAdd(ilit1A91,mulRes273D);
          int addRes2740#1 = IAdd(ilit1A94,mulRes273D);
          real dof_load2741#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1316,mulRes273D);
          real dof_load2742#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1316,addRes273F);
          real dof_load2743#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1316,addRes2740);
          int mulRes2746#3 = IMul(ilit1A97,idx2713);
          int addRes2748#1 = IAdd(ilit1A91,mulRes2746);
          int addRes2749#1 = IAdd(ilit1A94,mulRes2746);
          real dof_load274A#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1316,mulRes2746);
          real dof_load274B#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1316,addRes2748);
          real dof_load274C#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1316,addRes2749);
          real r279A#2 = RMul(dof_load272F,mult216E);
          real r279D#1 = RMul(dof_load2738,mult1CCE);
          real r27A0#2 = RMul(dof_load2741,basisEval2175);
          real r27A3#2 = RMul(dof_load274A,basisEval2175);
          real r27A4#1 = RAdd(r279A,r279D);
          real r27A5#1 = RAdd(r27A4,r27A0);
          real r27A6#13 = RAdd(r27A5,r27A3);
          real r27AA#1 = RMul(dof_load2738,basisEval2175);
          real r27AC#1 = RMul(dof_load2741,mult1CCE);
          real r27AF#2 = RAdd(r279A,r27AA);
          real r27B0#1 = RAdd(r27AF,r27AC);
          real r27B1#13 = RAdd(r27B0,r27A3);
          real r27B9#1 = RMul(dof_load274A,mult1CCE);
          real r27BB#1 = RAdd(r27AF,r27A0);
          real r27BC#12 = RAdd(r27BB,r27B9);
          real r27BF#2 = RMul(dof_load2730,mult216E);
          real r27C1#1 = RMul(dof_load2739,mult1CCE);
          real r27C3#2 = RMul(dof_load2742,basisEval2175);
          real r27C5#2 = RMul(dof_load274B,basisEval2175);
          real r27C6#1 = RAdd(r27BF,r27C1);
          real r27C7#1 = RAdd(r27C6,r27C3);
          real r27C8#13 = RAdd(r27C7,r27C5);
          real r27CA#1 = RMul(dof_load2739,basisEval2175);
          real r27CB#1 = RMul(dof_load2742,mult1CCE);
          real r27CD#2 = RAdd(r27BF,r27CA);
          real r27CE#1 = RAdd(r27CD,r27CB);
          real r27CF#13 = RAdd(r27CE,r27C5);
          real r27D3#1 = RMul(dof_load274B,mult1CCE);
          real r27D5#1 = RAdd(r27CD,r27C3);
          real r27D6#12 = RAdd(r27D5,r27D3);
          real r27D9#2 = RMul(dof_load2731,mult216E);
          real r27DB#1 = RMul(dof_load273A,mult1CCE);
          real r27DD#2 = RMul(dof_load2743,basisEval2175);
          real r27DF#2 = RMul(dof_load274C,basisEval2175);
          real r27E0#1 = RAdd(r27D9,r27DB);
          real r27E1#1 = RAdd(r27E0,r27DD);
          real r27E2#13 = RAdd(r27E1,r27DF);
          real r27E4#1 = RMul(dof_load273A,basisEval2175);
          real r27E5#1 = RMul(dof_load2743,mult1CCE);
          real r27E7#2 = RAdd(r27D9,r27E4);
          real r27E8#1 = RAdd(r27E7,r27E5);
          real r27E9#13 = RAdd(r27E8,r27DF);
          real r27ED#1 = RMul(dof_load274C,mult1CCE);
          real r27EF#1 = RAdd(r27E7,r27DD);
          real r27F0#12 = RAdd(r27EF,r27ED);
          real r2851#3 = RMul(basisEval2175,r27A6);
          real r2853#3 = RMul(basisEval2175,r27C8);
          real r2855#5 = RMul(basisEval2175,r27E2);
          real r2856#3 = RAdd(r2851,r2853);
          real r2857#9 = RAdd(r2856,r2855);
          real r2859#3 = RMul(basisEval2175,r27B1);
          real r285B#3 = RMul(basisEval2175,r27CF);
          real r285D#5 = RMul(basisEval2175,r27E9);
          real r285E#3 = RAdd(r2859,r285B);
          real r285F#9 = RAdd(r285E,r285D);
          real r2861#3 = RMul(basisEval2175,r27BC);
          real r2863#3 = RMul(basisEval2175,r27D6);
          real r2865#5 = RMul(basisEval2175,r27F0);
          real r2866#3 = RAdd(r2861,r2863);
          real r2867#12 = RAdd(r2866,r2865);
          real r286A#1 = RMul(coeff1D16,r27E2);
          real r286B#3 = RAdd(r2856,r286A);
          real r286C#1 = RMul(coeff1D16,r27E9);
          real r286D#3 = RAdd(r285E,r286C);
          real r286E#1 = RMul(coeff1D16,r27F0);
          real r286F#4 = RAdd(r2866,r286E);
          real r2872#1 = RMul(one1C8A,r27C8);
          real r2873#1 = RAdd(r2851,r2872);
          real r2874#3 = RAdd(r2873,r2855);
          real r2875#1 = RMul(one1C8A,r27CF);
          real r2876#1 = RAdd(r2859,r2875);
          real r2877#3 = RAdd(r2876,r285D);
          real r2878#1 = RMul(one1C8A,r27D6);
          real r2879#1 = RAdd(r2861,r2878);
          real r287A#4 = RAdd(r2879,r2865);
          real r287D#1 = RMul(one1C8A,r27E2);
          real r287E#3 = RAdd(r2856,r287D);
          real r287F#1 = RMul(one1C8A,r27E9);
          real r2880#3 = RAdd(r285E,r287F);
          real r2881#1 = RMul(one1C8A,r27F0);
          real r2882#4 = RAdd(r2866,r2881);
          real r2884#1 = RMul(coeff1D16,r27A6);
          real r2885#1 = RAdd(r2884,r2853);
          real r2886#3 = RAdd(r2885,r2855);
          real r2887#1 = RMul(coeff1D16,r27B1);
          real r2888#1 = RAdd(r2887,r285B);
          real r2889#3 = RAdd(r2888,r285D);
          real r288A#1 = RMul(coeff1D16,r27BC);
          real r288B#1 = RAdd(r288A,r2863);
          real r288C#4 = RAdd(r288B,r2865);
          real r288F#1 = RMul(coeff1D16,r27C8);
          real r2890#1 = RAdd(r2851,r288F);
          real r2891#3 = RAdd(r2890,r2855);
          real r2892#1 = RMul(coeff1D16,r27CF);
          real r2893#1 = RAdd(r2859,r2892);
          real r2894#3 = RAdd(r2893,r285D);
          real r2895#1 = RMul(coeff1D16,r27D6);
          real r2896#1 = RAdd(r2861,r2895);
          real r2897#4 = RAdd(r2896,r2865);
          real r2899#1 = RMul(one1C8A,r27A6);
          real r289A#1 = RAdd(r2899,r2853);
          real r289B#3 = RAdd(r289A,r2855);
          real r289C#1 = RMul(one1C8A,r27B1);
          real r289D#1 = RAdd(r289C,r285B);
          real r289E#3 = RAdd(r289D,r285D);
          real r289F#1 = RMul(one1C8A,r27BC);
          real r28A0#1 = RAdd(r289F,r2863);
          real r28A1#4 = RAdd(r28A0,r2865);
          real r28FE#1 = RMul(r27A6,r2857);
          real r2901#1 = RMul(r27C8,r287E);
          real r2904#1 = RMul(r27E2,r2891);
          real r2905#1 = RAdd(r28FE,r2901);
          real r2906#1 = RAdd(r2905,r2904);
          real r2908#1 = RMul(r27A6,r285F);
          real r290A#1 = RMul(r27C8,r2880);
          real r290C#1 = RMul(r27E2,r2894);
          real r290D#1 = RAdd(r2908,r290A);
          real r290E#2 = RAdd(r290D,r290C);
          real r2910#1 = RMul(r27A6,r2867);
          real r2912#1 = RMul(r27C8,r2882);
          real r2914#1 = RMul(r27E2,r2897);
          real r2915#1 = RAdd(r2910,r2912);
          real r2916#2 = RAdd(r2915,r2914);
          real r2919#1 = RMul(r27A6,r286B);
          real r291B#1 = RMul(r27C8,r2857);
          real r291D#1 = RMul(r27E2,r289B);
          real r291E#1 = RAdd(r2919,r291B);
          real r291F#1 = RAdd(r291E,r291D);
          real r2921#1 = RMul(r27A6,r286D);
          real r2923#1 = RMul(r27C8,r285F);
          real r2925#1 = RMul(r27E2,r289E);
          real r2926#1 = RAdd(r2921,r2923);
          real r2927#2 = RAdd(r2926,r2925);
          real r2929#1 = RMul(r27A6,r286F);
          real r292B#1 = RMul(r27C8,r2867);
          real r292D#1 = RMul(r27E2,r28A1);
          real r292E#1 = RAdd(r2929,r292B);
          real r292F#2 = RAdd(r292E,r292D);
          real r2932#1 = RMul(r27A6,r2874);
          real r2934#1 = RMul(r27C8,r2886);
          real r2936#1 = RMul(r27E2,r2857);
          real r2937#1 = RAdd(r2932,r2934);
          real r2938#1 = RAdd(r2937,r2936);
          real r293A#1 = RMul(r27A6,r2877);
          real r293C#1 = RMul(r27C8,r2889);
          real r293E#1 = RMul(r27E2,r285F);
          real r293F#1 = RAdd(r293A,r293C);
          real r2940#2 = RAdd(r293F,r293E);
          real r2942#1 = RMul(r27A6,r287A);
          real r2944#1 = RMul(r27C8,r288C);
          real r2946#1 = RMul(r27E2,r2867);
          real r2947#1 = RAdd(r2942,r2944);
          real r2948#2 = RAdd(r2947,r2946);
          real r294C#1 = RMul(r27B1,r2857);
          real r294E#1 = RMul(r27CF,r287E);
          real r2950#1 = RMul(r27E9,r2891);
          real r2951#1 = RAdd(r294C,r294E);
          real r2952#2 = RAdd(r2951,r2950);
          real r2953#1 = RMul(r27B1,r285F);
          real r2954#1 = RMul(r27CF,r2880);
          real r2955#1 = RMul(r27E9,r2894);
          real r2956#1 = RAdd(r2953,r2954);
          real r2957#1 = RAdd(r2956,r2955);
          real r2958#1 = RMul(r27B1,r2867);
          real r2959#1 = RMul(r27CF,r2882);
          real r295A#1 = RMul(r27E9,r2897);
          real r295B#1 = RAdd(r2958,r2959);
          real r295C#2 = RAdd(r295B,r295A);
          real r295E#1 = RMul(r27B1,r286B);
          real r295F#1 = RMul(r27CF,r2857);
          real r2960#1 = RMul(r27E9,r289B);
          real r2961#1 = RAdd(r295E,r295F);
          real r2962#2 = RAdd(r2961,r2960);
          real r2963#1 = RMul(r27B1,r286D);
          real r2964#1 = RMul(r27CF,r285F);
          real r2965#1 = RMul(r27E9,r289E);
          real r2966#1 = RAdd(r2963,r2964);
          real r2967#1 = RAdd(r2966,r2965);
          real r2968#1 = RMul(r27B1,r286F);
          real r2969#1 = RMul(r27CF,r2867);
          real r296A#1 = RMul(r27E9,r28A1);
          real r296B#1 = RAdd(r2968,r2969);
          real r296C#2 = RAdd(r296B,r296A);
          real r296E#1 = RMul(r27B1,r2874);
          real r296F#1 = RMul(r27CF,r2886);
          real r2970#1 = RMul(r27E9,r2857);
          real r2971#1 = RAdd(r296E,r296F);
          real r2972#2 = RAdd(r2971,r2970);
          real r2973#1 = RMul(r27B1,r2877);
          real r2974#1 = RMul(r27CF,r2889);
          real r2975#1 = RMul(r27E9,r285F);
          real r2976#1 = RAdd(r2973,r2974);
          real r2977#1 = RAdd(r2976,r2975);
          real r2978#1 = RMul(r27B1,r287A);
          real r2979#1 = RMul(r27CF,r288C);
          real r297A#1 = RMul(r27E9,r2867);
          real r297B#1 = RAdd(r2978,r2979);
          real r297C#2 = RAdd(r297B,r297A);
          real r2980#1 = RMul(r27BC,r2857);
          real r2982#1 = RMul(r27D6,r287E);
          real r2984#1 = RMul(r27F0,r2891);
          real r2985#1 = RAdd(r2980,r2982);
          real r2986#2 = RAdd(r2985,r2984);
          real r2987#1 = RMul(r27BC,r285F);
          real r2988#1 = RMul(r27D6,r2880);
          real r2989#1 = RMul(r27F0,r2894);
          real r298A#1 = RAdd(r2987,r2988);
          real r298B#2 = RAdd(r298A,r2989);
          real r298C#1 = RMul(r27BC,r2867);
          real r298D#1 = RMul(r27D6,r2882);
          real r298E#1 = RMul(r27F0,r2897);
          real r298F#1 = RAdd(r298C,r298D);
          real r2990#1 = RAdd(r298F,r298E);
          real r2992#1 = RMul(r27BC,r286B);
          real r2993#1 = RMul(r27D6,r2857);
          real r2994#1 = RMul(r27F0,r289B);
          real r2995#1 = RAdd(r2992,r2993);
          real r2996#2 = RAdd(r2995,r2994);
          real r2997#1 = RMul(r27BC,r286D);
          real r2998#1 = RMul(r27D6,r285F);
          real r2999#1 = RMul(r27F0,r289E);
          real r299A#1 = RAdd(r2997,r2998);
          real r299B#2 = RAdd(r299A,r2999);
          real r299C#1 = RMul(r27BC,r286F);
          real r299D#1 = RMul(r27D6,r2867);
          real r299E#1 = RMul(r27F0,r28A1);
          real r299F#1 = RAdd(r299C,r299D);
          real r29A0#1 = RAdd(r299F,r299E);
          real r29A2#1 = RMul(r27BC,r2874);
          real r29A3#1 = RMul(r27D6,r2886);
          real r29A4#1 = RMul(r27F0,r2857);
          real r29A5#1 = RAdd(r29A2,r29A3);
          real r29A6#2 = RAdd(r29A5,r29A4);
          real r29A7#1 = RMul(r27BC,r2877);
          real r29A8#1 = RMul(r27D6,r2889);
          real r29A9#1 = RMul(r27F0,r285F);
          real r29AA#1 = RAdd(r29A7,r29A8);
          real r29AB#2 = RAdd(r29AA,r29A9);
          real r29AC#1 = RMul(r27BC,r287A);
          real r29AD#1 = RMul(r27D6,r288C);
          real r29AE#1 = RMul(r27F0,r2867);
          real r29AF#1 = RAdd(r29AC,r29AD);
          real r29B0#1 = RAdd(r29AF,r29AE);
          tensor[3] probe_l_122A6C#1 = <tensor[3]>[r27A6,r27C8,r27E2];
          tensor[3] probe_l_132AB9#3 = <tensor[3]>[r27B1,r27CF,r27E9];
          tensor[3] tensor2B64#1 = <tensor[3]>[r2867,r2882,r2897];
          tensor[3] tensor2B6A#1 = <tensor[3]>[r286F,r2867,r28A1];
          tensor[3] tensor2B71#1 = <tensor[3]>[r287A,r288C,r2867];
          real vdot2B94#1 = VDot<3>(probe_l_132AB9,tensor2B64);
          real vdot2B96#1 = VDot<3>(probe_l_132AB9,tensor2B6A);
          real vdot2B98#1 = VDot<3>(probe_l_132AB9,tensor2B71);
          tensor[3] op1_e3_l_162B92#1 = <tensor[3]>[vdot2B94,vdot2B96,vdot2B98];
          real op1_e3_l_172BA1#1 = VDot<3>(probe_l_122A6C,op1_e3_l_162B92);
          real r2BA7#2 = RMul(basisEval2175,r2906);
          real r2BA9#1 = RMul(basisEval2175,r290E);
          real r2BAB#2 = RMul(basisEval2175,r2916);
          real r2BAD#2 = RMul(basisEval2175,r2952);
          real r2BAF#3 = RMul(basisEval2175,r2957);
          real r2BB2#1 = RMul(one1C8A,r295C);
          real r2BB4#2 = RMul(basisEval2175,r2986);
          real r2BB7#1 = RMul(coeff1D16,r298B);
          real r2BB9#3 = RMul(basisEval2175,r2990);
          real r2BBA#2 = RAdd(r2BA7,r2BA9);
          real r2BBB#1 = RAdd(r2BBA,r2BAB);
          real r2BBC#1 = RAdd(r2BBB,r2BAD);
          real r2BBD#1 = RAdd(r2BBC,r2BAF);
          real r2BBE#1 = RAdd(r2BBD,r2BB2);
          real r2BBF#1 = RAdd(r2BBE,r2BB4);
          real r2BC0#1 = RAdd(r2BBF,r2BB7);
          real r2BC1#1 = RAdd(r2BC0,r2BB9);
          real r2BC3#2 = RMul(basisEval2175,r291F);
          real r2BC5#1 = RMul(basisEval2175,r2927);
          real r2BC7#2 = RMul(basisEval2175,r292F);
          real r2BC9#2 = RMul(basisEval2175,r2962);
          real r2BCB#3 = RMul(basisEval2175,r2967);
          real r2BCD#1 = RMul(one1C8A,r296C);
          real r2BCF#2 = RMul(basisEval2175,r2996);
          real r2BD1#1 = RMul(coeff1D16,r299B);
          real r2BD3#3 = RMul(basisEval2175,r29A0);
          real r2BD4#2 = RAdd(r2BC3,r2BC5);
          real r2BD5#1 = RAdd(r2BD4,r2BC7);
          real r2BD6#1 = RAdd(r2BD5,r2BC9);
          real r2BD7#1 = RAdd(r2BD6,r2BCB);
          real r2BD8#1 = RAdd(r2BD7,r2BCD);
          real r2BD9#1 = RAdd(r2BD8,r2BCF);
          real r2BDA#1 = RAdd(r2BD9,r2BD1);
          real r2BDB#1 = RAdd(r2BDA,r2BD3);
          real r2BDD#2 = RMul(basisEval2175,r2938);
          real r2BDF#1 = RMul(basisEval2175,r2940);
          real r2BE1#2 = RMul(basisEval2175,r2948);
          real r2BE3#2 = RMul(basisEval2175,r2972);
          real r2BE5#3 = RMul(basisEval2175,r2977);
          real r2BE7#1 = RMul(one1C8A,r297C);
          real r2BE9#2 = RMul(basisEval2175,r29A6);
          real r2BEB#1 = RMul(coeff1D16,r29AB);
          real r2BED#3 = RMul(basisEval2175,r29B0);
          real r2BEE#2 = RAdd(r2BDD,r2BDF);
          real r2BEF#1 = RAdd(r2BEE,r2BE1);
          real r2BF0#1 = RAdd(r2BEF,r2BE3);
          real r2BF1#1 = RAdd(r2BF0,r2BE5);
          real r2BF2#1 = RAdd(r2BF1,r2BE7);
          real r2BF3#1 = RAdd(r2BF2,r2BE9);
          real r2BF4#1 = RAdd(r2BF3,r2BEB);
          real r2BF5#1 = RAdd(r2BF4,r2BED);
          real r2BF7#1 = RMul(coeff1D16,r2916);
          real r2BF8#2 = RMul(basisEval2175,r295C);
          real r2BF9#1 = RMul(one1C8A,r2986);
          real r2BFA#2 = RMul(basisEval2175,r298B);
          real r2BFB#1 = RAdd(r2BBA,r2BF7);
          real r2BFC#1 = RAdd(r2BFB,r2BAD);
          real r2BFD#1 = RAdd(r2BFC,r2BAF);
          real r2BFE#1 = RAdd(r2BFD,r2BF8);
          real r2BFF#1 = RAdd(r2BFE,r2BF9);
          real r2C00#1 = RAdd(r2BFF,r2BFA);
          real r2C01#1 = RAdd(r2C00,r2BB9);
          real r2C02#1 = RMul(coeff1D16,r292F);
          real r2C03#2 = RMul(basisEval2175,r296C);
          real r2C04#1 = RMul(one1C8A,r2996);
          real r2C05#2 = RMul(basisEval2175,r299B);
          real r2C06#1 = RAdd(r2BD4,r2C02);
          real r2C07#1 = RAdd(r2C06,r2BC9);
          real r2C08#1 = RAdd(r2C07,r2BCB);
          real r2C09#1 = RAdd(r2C08,r2C03);
          real r2C0A#1 = RAdd(r2C09,r2C04);
          real r2C0B#1 = RAdd(r2C0A,r2C05);
          real r2C0C#1 = RAdd(r2C0B,r2BD3);
          real r2C0D#1 = RMul(coeff1D16,r2948);
          real r2C0E#2 = RMul(basisEval2175,r297C);
          real r2C0F#1 = RMul(one1C8A,r29A6);
          real r2C10#2 = RMul(basisEval2175,r29AB);
          real r2C11#1 = RAdd(r2BEE,r2C0D);
          real r2C12#1 = RAdd(r2C11,r2BE3);
          real r2C13#1 = RAdd(r2C12,r2BE5);
          real r2C14#1 = RAdd(r2C13,r2C0E);
          real r2C15#1 = RAdd(r2C14,r2C0F);
          real r2C16#1 = RAdd(r2C15,r2C10);
          real r2C17#1 = RAdd(r2C16,r2BED);
          real r2C19#1 = RMul(one1C8A,r290E);
          real r2C1A#1 = RMul(coeff1D16,r2952);
          real r2C1B#1 = RAdd(r2BA7,r2C19);
          real r2C1C#1 = RAdd(r2C1B,r2BAB);
          real r2C1D#1 = RAdd(r2C1C,r2C1A);
          real r2C1E#1 = RAdd(r2C1D,r2BAF);
          real r2C1F#1 = RAdd(r2C1E,r2BF8);
          real r2C20#1 = RAdd(r2C1F,r2BB4);
          real r2C21#1 = RAdd(r2C20,r2BFA);
          real r2C22#1 = RAdd(r2C21,r2BB9);
          real r2C23#1 = RMul(one1C8A,r2927);
          real r2C24#1 = RMul(coeff1D16,r2962);
          real r2C25#1 = RAdd(r2BC3,r2C23);
          real r2C26#1 = RAdd(r2C25,r2BC7);
          real r2C27#1 = RAdd(r2C26,r2C24);
          real r2C28#1 = RAdd(r2C27,r2BCB);
          real r2C29#1 = RAdd(r2C28,r2C03);
          real r2C2A#1 = RAdd(r2C29,r2BCF);
          real r2C2B#1 = RAdd(r2C2A,r2C05);
          real r2C2C#1 = RAdd(r2C2B,r2BD3);
          real r2C2D#1 = RMul(one1C8A,r2940);
          real r2C2E#1 = RMul(coeff1D16,r2972);
          real r2C2F#1 = RAdd(r2BDD,r2C2D);
          real r2C30#1 = RAdd(r2C2F,r2BE1);
          real r2C31#1 = RAdd(r2C30,r2C2E);
          real r2C32#1 = RAdd(r2C31,r2BE5);
          real r2C33#1 = RAdd(r2C32,r2C0E);
          real r2C34#1 = RAdd(r2C33,r2BE9);
          real r2C35#1 = RAdd(r2C34,r2C10);
          real r2C36#1 = RAdd(r2C35,r2BED);
          real realLit2CCE#1 = 0.2e1;
          real op1_e3_l_192CCD#9 = RMul(realLit2CCE,op1_e3_l_172BA1);
          real r2CD4#1 = RDiv(r2BC1,op1_e3_l_192CCD);
          real r2CD6#1 = RDiv(r2BDB,op1_e3_l_192CCD);
          real r2CD8#1 = RDiv(r2BF5,op1_e3_l_192CCD);
          real r2CDB#1 = RDiv(r2C01,op1_e3_l_192CCD);
          real r2CDD#1 = RDiv(r2C0C,op1_e3_l_192CCD);
          real r2CDF#1 = RDiv(r2C17,op1_e3_l_192CCD);
          real r2CE2#1 = RDiv(r2C22,op1_e3_l_192CCD);
          real r2CE4#1 = RDiv(r2C2C,op1_e3_l_192CCD);
          real r2CE6#1 = RDiv(r2C36,op1_e3_l_192CCD);
          real r2D02#1 = RMul(vdot26F8,r2CD4);
          real r2D05#1 = RMul(vdot26FA,r2CDB);
          real r2D08#1 = RMul(vdot26FC,r2CE2);
          real r2D09#1 = RAdd(r2D02,r2D05);
          real r2D0A#1 = RAdd(r2D09,r2D08);
          real r2D0C#1 = RMul(vdot26F8,r2CD6);
          real r2D0E#1 = RMul(vdot26FA,r2CDD);
          real r2D10#1 = RMul(vdot26FC,r2CE4);
          real r2D11#1 = RAdd(r2D0C,r2D0E);
          real r2D12#1 = RAdd(r2D11,r2D10);
          real r2D14#1 = RMul(vdot26F8,r2CD8);
          real r2D16#1 = RMul(vdot26FA,r2CDF);
          real r2D18#1 = RMul(vdot26FC,r2CE6);
          real r2D19#1 = RAdd(r2D14,r2D16);
          real r2D1A#1 = RAdd(r2D19,r2D18);
          tensor[3] gradResult2CFF#1 = <tensor[3]>[r2D0A,r2D12,r2D1A];
          goto JOIN2D3C
        JOIN2D3C:  preds = [ASSIGN2D37,MASSIGN2D45]
          tensor[3] gradResult2D38#1 = phi(gradResult2CFF,gradResult1326)
          real result2D39#1 = phi(compositionl210B,result1324)
          femData:MeshCell c2D3A#1 = phi(c1A81,c1322)
          tensor[3] translated2D3B#1 = phi(translated1A83,translated1320)
          self.translated = translated2D3B;
          self.valid = valid1A7A;
          self.c = c2D3A;
          self.result = result2D39;
          self.gradResult = gradResult2D38;
          stabilize
        ASSIGN2D44:  preds = [COND1A7C]
          string _t2D43#1 = "Warning: Invalid!\n";
          Print<[string]>(_t2D43);
          goto JOIN2D3C
    end update
  end gg
## initial strand creation
  COLLECTION
    ENTRY2D47:  preds = []
      tensor[3][] points2D48#1 = globals.points12C6;
    FOREACH2D4B:  preds = [ASSIGN2D49,NEXT2D4D]
      foreach (i2D4A in points2D48) on exit goto RETURN2D4E
      new gg(i2D4A);
      goto FOREACH2D4B
    RETURN2D4E:  preds = [FOREACH2D4B]
      return
#### end program ####
##### low-ir: after contraction(2) ####
## properties
  GlobalInit HasInputs HasGlobals ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
## globals
  input points12C6 (points) = <no-default>
  input cube12C7 (cube) = <no-default>
  input 0space0342_intermedateGlobal12C8 (space) = <no-default>
  input 0data0344_intermedateGlobal12C9 (data) = <no-default>
  global femData:MeshCell[] 0cell_cube12CA
  global femData:Mesh _t12CB
  global femData:Space _tX12CC
  global femData:FemFunc data12CD
## functions
  function femData:MeshPos findPos132E (femData:Mesh mesh132F#19, tensor[3] pos1330#3) {
    ENTRY1331:  preds = []
      real _t1332#3 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
      tensor[3] xn1334#1 = <tensor[3]>[_t1332,_t1332,_t1332];
      int newtonInt1336#1 = 0;
      int[] yayCells1338#1 = ExtractFemItem2<tensor[3],int[],NearbyCell(File=spat.in)(Mesh)>(mesh132F,pos1330);
    FOREACH133B:  preds = [ASSIGN1339,NEXT1A70]
      foreach (cellItter133A in yayCells1338) on exit goto ASSIGN1A72
        tensor[3] xn1A6F#1 = phi(xn1334,xn1910)
      int _t133C#1 = 16;
      int[] _t133E#1 = Range(newtonInt1336,_t133C);
    FOREACH1341:  preds = [ASSIGN133F,NEXT1A6E]
      foreach (newtonItter1340 in _t133E) on exit goto NEXT1A70
        tensor[3] xn1910#5 = phi(xn1A6F,xn19D4)
      int ilit1343#1 = 4;
      int mulRes1344#4 = IMul(cellItter133A,ilit1343);
      int idx1347#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(mesh132F,mulRes1344);
      int ilit1348#5 = 1;
      int addRes1349#1 = IAdd(mulRes1344,ilit1348);
      int idx134A#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(mesh132F,addRes1349);
      int ilit134B#5 = 2;
      int addRes134C#1 = IAdd(mulRes1344,ilit134B);
      int idx134D#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(mesh132F,addRes134C);
      int ilit134E#5 = 3;
      int addRes134F#1 = IAdd(mulRes1344,ilit134E);
      int idx1350#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(mesh132F,addRes134F);
      int mulRes1366#3 = IMul(ilit134E,idx1347);
      int addRes1369#1 = IAdd(ilit1348,mulRes1366);
      int addRes136B#1 = IAdd(ilit134B,mulRes1366);
      real dof_load136C#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh132F,mulRes1366);
      real dof_load136D#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh132F,addRes1369);
      real dof_load136E#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh132F,addRes136B);
      int mulRes1371#3 = IMul(ilit134E,idx134A);
      int addRes1373#1 = IAdd(ilit1348,mulRes1371);
      int addRes1374#1 = IAdd(ilit134B,mulRes1371);
      real dof_load1375#3 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh132F,mulRes1371);
      real dof_load1376#3 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh132F,addRes1373);
      real dof_load1377#3 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh132F,addRes1374);
      int mulRes137A#3 = IMul(ilit134E,idx134D);
      int addRes137C#1 = IAdd(ilit1348,mulRes137A);
      int addRes137D#1 = IAdd(ilit134B,mulRes137A);
      real dof_load137E#3 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh132F,mulRes137A);
      real dof_load137F#3 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh132F,addRes137C);
      real dof_load1380#3 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh132F,addRes137D);
      int mulRes1383#3 = IMul(ilit134E,idx1350);
      int addRes1385#1 = IAdd(ilit1348,mulRes1383);
      int addRes1386#1 = IAdd(ilit134B,mulRes1383);
      real dof_load1387#3 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh132F,mulRes1383);
      real dof_load1388#3 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh132F,addRes1385);
      real dof_load1389#3 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh132F,addRes1386);
      real coeff13BA#22 = -0.1e1;
      real one13BB#33 = 0.1e1;
      real prod13BC#2 = RMul(one13BB,one13BB);
      real prod13BD#2 = RMul(one13BB,prod13BC);
      real basisEval13BE#3 = RMul(coeff13BA,prod13BD);
      real basisEval13BF#10 = RMul(one13BB,prod13BD);
      real basisEval13C0#45 = 0.e0;
      real r13D7#2 = RMul(dof_load136C,basisEval13BE);
      real r13DA#1 = RMul(dof_load1375,basisEval13BF);
      real r13DD#2 = RMul(dof_load137E,basisEval13C0);
      real r13E0#2 = RMul(dof_load1387,basisEval13C0);
      real r13E1#1 = RAdd(r13D7,r13DA);
      real r13E2#1 = RAdd(r13E1,r13DD);
      real r13E3#13 = RAdd(r13E2,r13E0);
      real r13E7#1 = RMul(dof_load1375,basisEval13C0);
      real r13E9#1 = RMul(dof_load137E,basisEval13BF);
      real r13EC#2 = RAdd(r13D7,r13E7);
      real r13ED#1 = RAdd(r13EC,r13E9);
      real r13EE#13 = RAdd(r13ED,r13E0);
      real r13F6#1 = RMul(dof_load1387,basisEval13BF);
      real r13F8#1 = RAdd(r13EC,r13DD);
      real r13F9#12 = RAdd(r13F8,r13F6);
      real r13FC#2 = RMul(dof_load136D,basisEval13BE);
      real r13FE#1 = RMul(dof_load1376,basisEval13BF);
      real r1400#2 = RMul(dof_load137F,basisEval13C0);
      real r1402#2 = RMul(dof_load1388,basisEval13C0);
      real r1403#1 = RAdd(r13FC,r13FE);
      real r1404#1 = RAdd(r1403,r1400);
      real r1405#13 = RAdd(r1404,r1402);
      real r1407#1 = RMul(dof_load1376,basisEval13C0);
      real r1408#1 = RMul(dof_load137F,basisEval13BF);
      real r140A#2 = RAdd(r13FC,r1407);
      real r140B#1 = RAdd(r140A,r1408);
      real r140C#13 = RAdd(r140B,r1402);
      real r1410#1 = RMul(dof_load1388,basisEval13BF);
      real r1412#1 = RAdd(r140A,r1400);
      real r1413#12 = RAdd(r1412,r1410);
      real r1416#2 = RMul(dof_load136E,basisEval13BE);
      real r1418#1 = RMul(dof_load1377,basisEval13BF);
      real r141A#2 = RMul(dof_load1380,basisEval13C0);
      real r141C#2 = RMul(dof_load1389,basisEval13C0);
      real r141D#1 = RAdd(r1416,r1418);
      real r141E#1 = RAdd(r141D,r141A);
      real r141F#13 = RAdd(r141E,r141C);
      real r1421#1 = RMul(dof_load1377,basisEval13C0);
      real r1422#1 = RMul(dof_load1380,basisEval13BF);
      real r1424#2 = RAdd(r1416,r1421);
      real r1425#1 = RAdd(r1424,r1422);
      real r1426#13 = RAdd(r1425,r141C);
      real r142A#1 = RMul(dof_load1389,basisEval13BF);
      real r142C#1 = RAdd(r1424,r141A);
      real r142D#12 = RAdd(r142C,r142A);
      real r148E#3 = RMul(basisEval13C0,r13E3);
      real r1490#3 = RMul(basisEval13C0,r1405);
      real r1492#5 = RMul(basisEval13C0,r141F);
      real r1493#3 = RAdd(r148E,r1490);
      real r1494#9 = RAdd(r1493,r1492);
      real r1496#3 = RMul(basisEval13C0,r13EE);
      real r1498#3 = RMul(basisEval13C0,r140C);
      real r149A#5 = RMul(basisEval13C0,r1426);
      real r149B#3 = RAdd(r1496,r1498);
      real r149C#9 = RAdd(r149B,r149A);
      real r149E#3 = RMul(basisEval13C0,r13F9);
      real r14A0#3 = RMul(basisEval13C0,r1413);
      real r14A2#5 = RMul(basisEval13C0,r142D);
      real r14A3#3 = RAdd(r149E,r14A0);
      real r14A4#12 = RAdd(r14A3,r14A2);
      real r14A7#1 = RMul(coeff13BA,r141F);
      real r14A8#3 = RAdd(r1493,r14A7);
      real r14A9#1 = RMul(coeff13BA,r1426);
      real r14AA#3 = RAdd(r149B,r14A9);
      real r14AB#1 = RMul(coeff13BA,r142D);
      real r14AC#4 = RAdd(r14A3,r14AB);
      real r14AF#1 = RMul(one13BB,r1405);
      real r14B0#1 = RAdd(r148E,r14AF);
      real r14B1#3 = RAdd(r14B0,r1492);
      real r14B2#1 = RMul(one13BB,r140C);
      real r14B3#1 = RAdd(r1496,r14B2);
      real r14B4#3 = RAdd(r14B3,r149A);
      real r14B5#1 = RMul(one13BB,r1413);
      real r14B6#1 = RAdd(r149E,r14B5);
      real r14B7#4 = RAdd(r14B6,r14A2);
      real r14BA#1 = RMul(one13BB,r141F);
      real r14BB#3 = RAdd(r1493,r14BA);
      real r14BC#1 = RMul(one13BB,r1426);
      real r14BD#3 = RAdd(r149B,r14BC);
      real r14BE#1 = RMul(one13BB,r142D);
      real r14BF#4 = RAdd(r14A3,r14BE);
      real r14C1#1 = RMul(coeff13BA,r13E3);
      real r14C2#1 = RAdd(r14C1,r1490);
      real r14C3#3 = RAdd(r14C2,r1492);
      real r14C4#1 = RMul(coeff13BA,r13EE);
      real r14C5#1 = RAdd(r14C4,r1498);
      real r14C6#3 = RAdd(r14C5,r149A);
      real r14C7#1 = RMul(coeff13BA,r13F9);
      real r14C8#1 = RAdd(r14C7,r14A0);
      real r14C9#4 = RAdd(r14C8,r14A2);
      real r14CC#1 = RMul(coeff13BA,r1405);
      real r14CD#1 = RAdd(r148E,r14CC);
      real r14CE#3 = RAdd(r14CD,r1492);
      real r14CF#1 = RMul(coeff13BA,r140C);
      real r14D0#1 = RAdd(r1496,r14CF);
      real r14D1#3 = RAdd(r14D0,r149A);
      real r14D2#1 = RMul(coeff13BA,r1413);
      real r14D3#1 = RAdd(r149E,r14D2);
      real r14D4#4 = RAdd(r14D3,r14A2);
      real r14D6#1 = RMul(one13BB,r13E3);
      real r14D7#1 = RAdd(r14D6,r1490);
      real r14D8#3 = RAdd(r14D7,r1492);
      real r14D9#1 = RMul(one13BB,r13EE);
      real r14DA#1 = RAdd(r14D9,r1498);
      real r14DB#3 = RAdd(r14DA,r149A);
      real r14DC#1 = RMul(one13BB,r13F9);
      real r14DD#1 = RAdd(r14DC,r14A0);
      real r14DE#4 = RAdd(r14DD,r14A2);
      real r153B#1 = RMul(r13E3,r1494);
      real r153E#1 = RMul(r1405,r14BB);
      real r1541#1 = RMul(r141F,r14CE);
      real r1542#1 = RAdd(r153B,r153E);
      real r1543#1 = RAdd(r1542,r1541);
      real r1545#1 = RMul(r13E3,r149C);
      real r1547#1 = RMul(r1405,r14BD);
      real r1549#1 = RMul(r141F,r14D1);
      real r154A#1 = RAdd(r1545,r1547);
      real r154B#2 = RAdd(r154A,r1549);
      real r154D#1 = RMul(r13E3,r14A4);
      real r154F#1 = RMul(r1405,r14BF);
      real r1551#1 = RMul(r141F,r14D4);
      real r1552#1 = RAdd(r154D,r154F);
      real r1553#2 = RAdd(r1552,r1551);
      real r1556#1 = RMul(r13E3,r14A8);
      real r1558#1 = RMul(r1405,r1494);
      real r155A#1 = RMul(r141F,r14D8);
      real r155B#1 = RAdd(r1556,r1558);
      real r155C#1 = RAdd(r155B,r155A);
      real r155E#1 = RMul(r13E3,r14AA);
      real r1560#1 = RMul(r1405,r149C);
      real r1562#1 = RMul(r141F,r14DB);
      real r1563#1 = RAdd(r155E,r1560);
      real r1564#2 = RAdd(r1563,r1562);
      real r1566#1 = RMul(r13E3,r14AC);
      real r1568#1 = RMul(r1405,r14A4);
      real r156A#1 = RMul(r141F,r14DE);
      real r156B#1 = RAdd(r1566,r1568);
      real r156C#2 = RAdd(r156B,r156A);
      real r156F#1 = RMul(r13E3,r14B1);
      real r1571#1 = RMul(r1405,r14C3);
      real r1573#1 = RMul(r141F,r1494);
      real r1574#1 = RAdd(r156F,r1571);
      real r1575#1 = RAdd(r1574,r1573);
      real r1577#1 = RMul(r13E3,r14B4);
      real r1579#1 = RMul(r1405,r14C6);
      real r157B#1 = RMul(r141F,r149C);
      real r157C#1 = RAdd(r1577,r1579);
      real r157D#2 = RAdd(r157C,r157B);
      real r157F#1 = RMul(r13E3,r14B7);
      real r1581#1 = RMul(r1405,r14C9);
      real r1583#1 = RMul(r141F,r14A4);
      real r1584#1 = RAdd(r157F,r1581);
      real r1585#2 = RAdd(r1584,r1583);
      real r1589#1 = RMul(r13EE,r1494);
      real r158B#1 = RMul(r140C,r14BB);
      real r158D#1 = RMul(r1426,r14CE);
      real r158E#1 = RAdd(r1589,r158B);
      real r158F#2 = RAdd(r158E,r158D);
      real r1590#1 = RMul(r13EE,r149C);
      real r1591#1 = RMul(r140C,r14BD);
      real r1592#1 = RMul(r1426,r14D1);
      real r1593#1 = RAdd(r1590,r1591);
      real r1594#1 = RAdd(r1593,r1592);
      real r1595#1 = RMul(r13EE,r14A4);
      real r1596#1 = RMul(r140C,r14BF);
      real r1597#1 = RMul(r1426,r14D4);
      real r1598#1 = RAdd(r1595,r1596);
      real r1599#2 = RAdd(r1598,r1597);
      real r159B#1 = RMul(r13EE,r14A8);
      real r159C#1 = RMul(r140C,r1494);
      real r159D#1 = RMul(r1426,r14D8);
      real r159E#1 = RAdd(r159B,r159C);
      real r159F#2 = RAdd(r159E,r159D);
      real r15A0#1 = RMul(r13EE,r14AA);
      real r15A1#1 = RMul(r140C,r149C);
      real r15A2#1 = RMul(r1426,r14DB);
      real r15A3#1 = RAdd(r15A0,r15A1);
      real r15A4#1 = RAdd(r15A3,r15A2);
      real r15A5#1 = RMul(r13EE,r14AC);
      real r15A6#1 = RMul(r140C,r14A4);
      real r15A7#1 = RMul(r1426,r14DE);
      real r15A8#1 = RAdd(r15A5,r15A6);
      real r15A9#2 = RAdd(r15A8,r15A7);
      real r15AB#1 = RMul(r13EE,r14B1);
      real r15AC#1 = RMul(r140C,r14C3);
      real r15AD#1 = RMul(r1426,r1494);
      real r15AE#1 = RAdd(r15AB,r15AC);
      real r15AF#2 = RAdd(r15AE,r15AD);
      real r15B0#1 = RMul(r13EE,r14B4);
      real r15B1#1 = RMul(r140C,r14C6);
      real r15B2#1 = RMul(r1426,r149C);
      real r15B3#1 = RAdd(r15B0,r15B1);
      real r15B4#1 = RAdd(r15B3,r15B2);
      real r15B5#1 = RMul(r13EE,r14B7);
      real r15B6#1 = RMul(r140C,r14C9);
      real r15B7#1 = RMul(r1426,r14A4);
      real r15B8#1 = RAdd(r15B5,r15B6);
      real r15B9#2 = RAdd(r15B8,r15B7);
      real r15BD#1 = RMul(r13F9,r1494);
      real r15BF#1 = RMul(r1413,r14BB);
      real r15C1#1 = RMul(r142D,r14CE);
      real r15C2#1 = RAdd(r15BD,r15BF);
      real r15C3#2 = RAdd(r15C2,r15C1);
      real r15C4#1 = RMul(r13F9,r149C);
      real r15C5#1 = RMul(r1413,r14BD);
      real r15C6#1 = RMul(r142D,r14D1);
      real r15C7#1 = RAdd(r15C4,r15C5);
      real r15C8#2 = RAdd(r15C7,r15C6);
      real r15C9#1 = RMul(r13F9,r14A4);
      real r15CA#1 = RMul(r1413,r14BF);
      real r15CB#1 = RMul(r142D,r14D4);
      real r15CC#1 = RAdd(r15C9,r15CA);
      real r15CD#1 = RAdd(r15CC,r15CB);
      real r15CF#1 = RMul(r13F9,r14A8);
      real r15D0#1 = RMul(r1413,r1494);
      real r15D1#1 = RMul(r142D,r14D8);
      real r15D2#1 = RAdd(r15CF,r15D0);
      real r15D3#2 = RAdd(r15D2,r15D1);
      real r15D4#1 = RMul(r13F9,r14AA);
      real r15D5#1 = RMul(r1413,r149C);
      real r15D6#1 = RMul(r142D,r14DB);
      real r15D7#1 = RAdd(r15D4,r15D5);
      real r15D8#2 = RAdd(r15D7,r15D6);
      real r15D9#1 = RMul(r13F9,r14AC);
      real r15DA#1 = RMul(r1413,r14A4);
      real r15DB#1 = RMul(r142D,r14DE);
      real r15DC#1 = RAdd(r15D9,r15DA);
      real r15DD#1 = RAdd(r15DC,r15DB);
      real r15DF#1 = RMul(r13F9,r14B1);
      real r15E0#1 = RMul(r1413,r14C3);
      real r15E1#1 = RMul(r142D,r1494);
      real r15E2#1 = RAdd(r15DF,r15E0);
      real r15E3#2 = RAdd(r15E2,r15E1);
      real r15E4#1 = RMul(r13F9,r14B4);
      real r15E5#1 = RMul(r1413,r14C6);
      real r15E6#1 = RMul(r142D,r149C);
      real r15E7#1 = RAdd(r15E4,r15E5);
      real r15E8#2 = RAdd(r15E7,r15E6);
      real r15E9#1 = RMul(r13F9,r14B7);
      real r15EA#1 = RMul(r1413,r14C9);
      real r15EB#1 = RMul(r142D,r14A4);
      real r15EC#1 = RAdd(r15E9,r15EA);
      real r15ED#1 = RAdd(r15EC,r15EB);
      tensor[3] probe_l_1416A9#1 = <tensor[3]>[r13E3,r1405,r141F];
      tensor[3] probe_l_1516F6#3 = <tensor[3]>[r13EE,r140C,r1426];
      tensor[3] tensor17A1#1 = <tensor[3]>[r14A4,r14BF,r14D4];
      tensor[3] tensor17A7#1 = <tensor[3]>[r14AC,r14A4,r14DE];
      tensor[3] tensor17AE#1 = <tensor[3]>[r14B7,r14C9,r14A4];
      real vdot17D1#1 = VDot<3>(probe_l_1516F6,tensor17A1);
      real vdot17D3#1 = VDot<3>(probe_l_1516F6,tensor17A7);
      real vdot17D5#1 = VDot<3>(probe_l_1516F6,tensor17AE);
      tensor[3] op1_e3_l_1817CF#1 = <tensor[3]>[vdot17D1,vdot17D3,vdot17D5];
      real op1_e3_l_1917DE#1 = VDot<3>(probe_l_1416A9,op1_e3_l_1817CF);
      real r17E4#2 = RMul(basisEval13C0,r1543);
      real r17E6#1 = RMul(basisEval13C0,r154B);
      real r17E8#2 = RMul(basisEval13C0,r1553);
      real r17EA#2 = RMul(basisEval13C0,r158F);
      real r17EC#3 = RMul(basisEval13C0,r1594);
      real r17EF#1 = RMul(one13BB,r1599);
      real r17F1#2 = RMul(basisEval13C0,r15C3);
      real r17F4#1 = RMul(coeff13BA,r15C8);
      real r17F6#3 = RMul(basisEval13C0,r15CD);
      real r17F7#2 = RAdd(r17E4,r17E6);
      real r17F8#1 = RAdd(r17F7,r17E8);
      real r17F9#1 = RAdd(r17F8,r17EA);
      real r17FA#1 = RAdd(r17F9,r17EC);
      real r17FB#1 = RAdd(r17FA,r17EF);
      real r17FC#1 = RAdd(r17FB,r17F1);
      real r17FD#1 = RAdd(r17FC,r17F4);
      real r17FE#1 = RAdd(r17FD,r17F6);
      real r1800#2 = RMul(basisEval13C0,r155C);
      real r1802#1 = RMul(basisEval13C0,r1564);
      real r1804#2 = RMul(basisEval13C0,r156C);
      real r1806#2 = RMul(basisEval13C0,r159F);
      real r1808#3 = RMul(basisEval13C0,r15A4);
      real r180A#1 = RMul(one13BB,r15A9);
      real r180C#2 = RMul(basisEval13C0,r15D3);
      real r180E#1 = RMul(coeff13BA,r15D8);
      real r1810#3 = RMul(basisEval13C0,r15DD);
      real r1811#2 = RAdd(r1800,r1802);
      real r1812#1 = RAdd(r1811,r1804);
      real r1813#1 = RAdd(r1812,r1806);
      real r1814#1 = RAdd(r1813,r1808);
      real r1815#1 = RAdd(r1814,r180A);
      real r1816#1 = RAdd(r1815,r180C);
      real r1817#1 = RAdd(r1816,r180E);
      real r1818#1 = RAdd(r1817,r1810);
      real r181A#2 = RMul(basisEval13C0,r1575);
      real r181C#1 = RMul(basisEval13C0,r157D);
      real r181E#2 = RMul(basisEval13C0,r1585);
      real r1820#2 = RMul(basisEval13C0,r15AF);
      real r1822#3 = RMul(basisEval13C0,r15B4);
      real r1824#1 = RMul(one13BB,r15B9);
      real r1826#2 = RMul(basisEval13C0,r15E3);
      real r1828#1 = RMul(coeff13BA,r15E8);
      real r182A#3 = RMul(basisEval13C0,r15ED);
      real r182B#2 = RAdd(r181A,r181C);
      real r182C#1 = RAdd(r182B,r181E);
      real r182D#1 = RAdd(r182C,r1820);
      real r182E#1 = RAdd(r182D,r1822);
      real r182F#1 = RAdd(r182E,r1824);
      real r1830#1 = RAdd(r182F,r1826);
      real r1831#1 = RAdd(r1830,r1828);
      real r1832#1 = RAdd(r1831,r182A);
      real r1834#1 = RMul(coeff13BA,r1553);
      real r1835#2 = RMul(basisEval13C0,r1599);
      real r1836#1 = RMul(one13BB,r15C3);
      real r1837#2 = RMul(basisEval13C0,r15C8);
      real r1838#1 = RAdd(r17F7,r1834);
      real r1839#1 = RAdd(r1838,r17EA);
      real r183A#1 = RAdd(r1839,r17EC);
      real r183B#1 = RAdd(r183A,r1835);
      real r183C#1 = RAdd(r183B,r1836);
      real r183D#1 = RAdd(r183C,r1837);
      real r183E#1 = RAdd(r183D,r17F6);
      real r183F#1 = RMul(coeff13BA,r156C);
      real r1840#2 = RMul(basisEval13C0,r15A9);
      real r1841#1 = RMul(one13BB,r15D3);
      real r1842#2 = RMul(basisEval13C0,r15D8);
      real r1843#1 = RAdd(r1811,r183F);
      real r1844#1 = RAdd(r1843,r1806);
      real r1845#1 = RAdd(r1844,r1808);
      real r1846#1 = RAdd(r1845,r1840);
      real r1847#1 = RAdd(r1846,r1841);
      real r1848#1 = RAdd(r1847,r1842);
      real r1849#1 = RAdd(r1848,r1810);
      real r184A#1 = RMul(coeff13BA,r1585);
      real r184B#2 = RMul(basisEval13C0,r15B9);
      real r184C#1 = RMul(one13BB,r15E3);
      real r184D#2 = RMul(basisEval13C0,r15E8);
      real r184E#1 = RAdd(r182B,r184A);
      real r184F#1 = RAdd(r184E,r1820);
      real r1850#1 = RAdd(r184F,r1822);
      real r1851#1 = RAdd(r1850,r184B);
      real r1852#1 = RAdd(r1851,r184C);
      real r1853#1 = RAdd(r1852,r184D);
      real r1854#1 = RAdd(r1853,r182A);
      real r1856#1 = RMul(one13BB,r154B);
      real r1857#1 = RMul(coeff13BA,r158F);
      real r1858#1 = RAdd(r17E4,r1856);
      real r1859#1 = RAdd(r1858,r17E8);
      real r185A#1 = RAdd(r1859,r1857);
      real r185B#1 = RAdd(r185A,r17EC);
      real r185C#1 = RAdd(r185B,r1835);
      real r185D#1 = RAdd(r185C,r17F1);
      real r185E#1 = RAdd(r185D,r1837);
      real r185F#1 = RAdd(r185E,r17F6);
      real r1860#1 = RMul(one13BB,r1564);
      real r1861#1 = RMul(coeff13BA,r159F);
      real r1862#1 = RAdd(r1800,r1860);
      real r1863#1 = RAdd(r1862,r1804);
      real r1864#1 = RAdd(r1863,r1861);
      real r1865#1 = RAdd(r1864,r1808);
      real r1866#1 = RAdd(r1865,r1840);
      real r1867#1 = RAdd(r1866,r180C);
      real r1868#1 = RAdd(r1867,r1842);
      real r1869#1 = RAdd(r1868,r1810);
      real r186A#1 = RMul(one13BB,r157D);
      real r186B#1 = RMul(coeff13BA,r15AF);
      real r186C#1 = RAdd(r181A,r186A);
      real r186D#1 = RAdd(r186C,r181E);
      real r186E#1 = RAdd(r186D,r186B);
      real r186F#1 = RAdd(r186E,r1822);
      real r1870#1 = RAdd(r186F,r184B);
      real r1871#1 = RAdd(r1870,r1826);
      real r1872#1 = RAdd(r1871,r184D);
      real r1873#1 = RAdd(r1872,r182A);
      real realLit190B#1 = 0.2e1;
      real op1_e3_l_21190A#9 = RMul(realLit190B,op1_e3_l_1917DE);
      real varAcc1911#1 = VIndex<3,0>(xn1910);
      real varAcc1912#1 = VIndex<3,1>(xn1910);
      real varAcc1913#1 = VIndex<3,2>(xn1910);
      real prod1918#2 = RMul(varAcc1911,prod13BC);
      real prod191A#1 = RMul(varAcc1912,one13BB);
      real prod191B#2 = RMul(one13BB,prod191A);
      real prod191D#1 = RMul(one13BB,varAcc1913);
      real prod191E#2 = RMul(one13BB,prod191D);
      real mult1921#1 = RMul(coeff13BA,prod191E);
      real mult1922#1 = RMul(coeff13BA,prod191B);
      real mult1923#1 = RMul(coeff13BA,prod1918);
      real sum1924#1 = RAdd(mult1922,mult1923);
      real sum1925#1 = RAdd(mult1921,sum1924);
      real sum1926#3 = RAdd(basisEval13BF,sum1925);
      real basisEval1928#3 = RMul(one13BB,prod1918);
      real basisEval1929#3 = RMul(one13BB,prod191B);
      real basisEval192A#3 = RMul(one13BB,prod191E);
      real r194B#1 = RMul(dof_load136C,sum1926);
      real r194E#1 = RMul(dof_load1375,basisEval1928);
      real r1951#1 = RMul(dof_load137E,basisEval1929);
      real r1954#1 = RMul(dof_load1387,basisEval192A);
      real r1955#1 = RAdd(r194B,r194E);
      real r1956#1 = RAdd(r1955,r1951);
      real r1957#1 = RAdd(r1956,r1954);
      real r1959#1 = RMul(dof_load136D,sum1926);
      real r195B#1 = RMul(dof_load1376,basisEval1928);
      real r195D#1 = RMul(dof_load137F,basisEval1929);
      real r195F#1 = RMul(dof_load1388,basisEval192A);
      real r1960#1 = RAdd(r1959,r195B);
      real r1961#1 = RAdd(r1960,r195D);
      real r1962#1 = RAdd(r1961,r195F);
      real r1964#1 = RMul(dof_load136E,sum1926);
      real r1966#1 = RMul(dof_load1377,basisEval1928);
      real r1968#1 = RMul(dof_load1380,basisEval1929);
      real r196A#1 = RMul(dof_load1389,basisEval192A);
      real r196B#1 = RAdd(r1964,r1966);
      real r196C#1 = RAdd(r196B,r1968);
      real r196D#1 = RAdd(r196C,r196A);
      tensor[3] probe_l_221948#1 = <tensor[3]>[r1957,r1962,r196D];
      real r1997#1 = RDiv(r17FE,op1_e3_l_21190A);
      real r1999#1 = RDiv(r1818,op1_e3_l_21190A);
      real r199B#1 = RDiv(r1832,op1_e3_l_21190A);
      tensor[3] tensor199C#1 = <tensor[3]>[r1997,r1999,r199B];
      real r199E#1 = RDiv(r183E,op1_e3_l_21190A);
      real r19A0#1 = RDiv(r1849,op1_e3_l_21190A);
      real r19A2#1 = RDiv(r1854,op1_e3_l_21190A);
      tensor[3] tensor19A3#1 = <tensor[3]>[r199E,r19A0,r19A2];
      real r19A5#1 = RDiv(r185F,op1_e3_l_21190A);
      real r19A7#1 = RDiv(r1869,op1_e3_l_21190A);
      real r19A9#1 = RDiv(r1873,op1_e3_l_21190A);
      tensor[3] tensor19AA#1 = <tensor[3]>[r19A5,r19A7,r19A9];
      tensor[3] op1_e3_l_2419C2#3 = VSub<3>(probe_l_221948,pos1330);
      real vdot19C7#1 = VDot<3>(tensor199C,op1_e3_l_2419C2);
      real vdot19C9#1 = VDot<3>(tensor19A3,op1_e3_l_2419C2);
      real vdot19CB#1 = VDot<3>(tensor19AA,op1_e3_l_2419C2);
      tensor[3] op1_e3_l_2519C5#3 = <tensor[3]>[vdot19C7,vdot19C9,vdot19CB];
      tensor[3] xn19D4#4 = VSub<3>(xn1910,op1_e3_l_2519C5);
      real _t19D7#2 = 0.1e-7;
      real _t19D9#1 = RMul(_t19D7,_t19D7);
      real _t1A3B#1 = VDot<3>(op1_e3_l_2519C5,op1_e3_l_2519C5);
      bool _t1A3E#1 = GTE<real>(_t19D9,_t1A3B);
      if _t1A3E then goto ASSIGN1A44 else goto JOIN1A6D
    ASSIGN1A44:  preds = [COND1A40]
      real _t1A43#4 = 0.1e-8;
      real _t1A45#1 = RAdd(one13BB,_t1A43);
      tensor[3] _t1A48#1 = <tensor[3]>[one13BB,one13BB,one13BB];
      real _t1A4A#1 = VDot<3>(_t1A48,xn19D4);
      bool _t1A4D#1 = GT<real>(_t1A45,_t1A4A);
      tensor[3] _t1A4F#1 = <tensor[3]>[_t1A43,_t1A43,_t1A43];
      tensor[3] _t1A51#3 = VAdd<3>(_t1A4F,xn19D4);
      real _t1A54#1 = VIndex<3,0>(_t1A51);
      real _t1A56#3 = -0.e0;
      bool _t1A58#1 = GT<real>(_t1A54,_t1A56);
      real _t1A5A#1 = VIndex<3,1>(_t1A51);
      bool _t1A5C#1 = GT<real>(_t1A5A,_t1A56);
      real _t1A5E#1 = VIndex<3,2>(_t1A51);
      bool _t1A60#1 = GT<real>(_t1A5E,_t1A56);
      bool _t1A62#1 = BAnd(_t1A5C,_t1A60);
      bool _t1A64#1 = BAnd(_t1A58,_t1A62);
      bool _t1A66#1 = BAnd(_t1A4D,_t1A64);
      if _t1A66 then goto ASSIGN1A6A else goto JOIN1A6C
    ASSIGN1A6A:  preds = [COND1A68]
      femData:MeshPos _t1A69#1 = ExtractFemItemN<[femData:Mesh,int,tensor[3],tensor[3]],femData:MeshPos,AllBuild(MeshPos),0000,"",[],int>(mesh132F,cellItter133A,xn19D4,pos1330);
      return _t1A69
      goto JOIN1A6C
    JOIN1A6C:  preds = [*RETURN(_t1A69)1A6B,COND1A68]
      goto JOIN1A6D
    JOIN1A6D:  preds = [JOIN1A6C,COND1A40]
      goto FOREACH1341
    NEXT1A70:  preds = [FOREACH1341]
      goto FOREACH133B
    ASSIGN1A72:  preds = [FOREACH133B]
      string _t1A71#1 = "Bad end 2";
      string _t1A73#1 = "\n";
      Print<[string,string]>(_t1A71,_t1A73);
      femData:MeshPos _t1A76#1 = ExtractFemItemN<[femData:Mesh],femData:MeshPos,InvalidBuild(MeshPos),0000,"",[],int>(mesh132F);
      return _t1A76
}
## input initialization
  ENTRY12CE:  preds = []
    return
## global-variable initialization
  ENTRY12D0:  preds = []
    femData:Mesh cube12D1#3 = globals.cube12C7;
    femData:Space 0space0342_intermedateGlobal12D3#1 = globals.0space0342_intermedateGlobal12C8;
    femData:FemFunc 0data0344_intermedateGlobal12D5#1 = globals.0data0344_intermedateGlobal12C9;
    int _t12D7#1 = 0;
    int _t12D9#1 = 1;
    int _t12DB#1 = ExtractFemItem<int,NumCell(Mesh)>(cube12D1);
    int _t12DD#1 = ISub(_t12DB,_t12D9);
    int[] _t12DF#1 = Range(_t12D7,_t12DD);
    femData:MeshCell[] _t12E1#1 = <femData:MeshCell[]>{};
  FOREACH12E4:  preds = [ASSIGN12E2,NEXT12EA]
    foreach (_t12E3 in _t12DF) on exit goto GASSIGN12EB
      femData:MeshCell[] _t12E8#2 = phi(_t12E1,_t12E7)
    femData:MeshCell _t12E5#1 = LoadFem<femData:MeshCell>(cube12D1,_t12E3);
    femData:MeshCell[] _t12E7#1 = Append<femData:MeshCell>(_t12E8,_t12E5);
    goto FOREACH12E4
  GASSIGN12EB:  preds = [FOREACH12E4]
    globals.0cell_cube12CA = _t12E8;
    femData:Space space12EC#1 = LoadFem<femData:Space>(0space0342_intermedateGlobal12D3,cube12D1);
    femData:FemFunc data12EE#2 = LoadFem<femData:FemFunc>(0data0344_intermedateGlobal12D5,space12EC);
    femData:Space _t12F0#2 = ExtractFem<femData:Space,femData:FemFunc>(data12EE);
    femData:Mesh _t12F2#1 = ExtractFem<femData:Mesh,femData:Space>(_t12F0);
    globals._t12CB = _t12F2;
    globals._tX12CC = _t12F0;
    globals.data12CD = data12EE;
    return
## strand
  strand gg (tensor[3] i12F8#1)
    state:
      output tensor[3] target;
      output tensor[3] translated;
      output bool valid;
      output femData:MeshCell c;
      output real result;
      output tensor[3] gradResult;
      output tensor[3] gradResultp;
    state init
      ENTRY1300:  preds = []
        femData:MeshCell[] 0cell_cube1301#1 = globals.0cell_cube12CA;
        real _nan1303#4 = nan;
        tensor[3] translated1305#3 = <tensor[3]>[_nan1303,_nan1303,_nan1303];
        bool valid1307#1 = false;
        int _t1309#1 = 0;
        femData:MeshCell c130B#1 = Subscript<femData:MeshCell[]>(0cell_cube1301,_t1309);
        self.target = i12F8;
        self.translated = translated1305;
        self.valid = valid1307;
        self.c = c130B;
        self.result = _nan1303;
        self.gradResult = translated1305;
        self.gradResultp = translated1305;
        return
    end state init
    method update
        ENTRY1315:  preds = []
          femData:Mesh _t1316#17 = globals._t12CB;
          femData:Space _t1318#35 = globals._tX12CC;
          femData:FemFunc data131A#35 = globals.data12CD;
          femData:Mesh cube131C#1 = globals.cube12C7;
          tensor[3] target131E#3 = self.target;
          tensor[3] translated1320#1 = self.translated;
          femData:MeshCell c1322#1 = self.c;
          real result1324#1 = self.result;
          tensor[3] gradResult1326#1 = self.gradResult;
          string _t1328#1 = "Running on ";
          string _t132A#1 = "\n";
          Print<[string,tensor[3],string]>(_t1328,target131E,_t132A);
          femData:MeshPos p132D#4 = findPos132E (cube131C,target131E);
          bool valid1A7A#2 = ExtractFemItem<bool,Valid(MeshPos)>(p132D);
          if valid1A7A then goto ASSIGN1A7E else goto ASSIGN2D44
        ASSIGN1A7E:  preds = [COND1A7C]
          femData:Mesh _t1A7D#1 = ExtractFem<femData:Mesh,femData:MeshPos>(p132D);
          int _t1A7F#1 = ExtractFemItem<int,CellIndex(MeshPos)>(p132D);
          femData:MeshCell c1A81#1 = LoadFem<femData:MeshCell>(_t1A7D,_t1A7F);
          tensor[3] translated1A83#1 = ExtractFemItem<tensor[3],RefPos(MeshPos)>(p132D);
          femData:MeshPos callFindPos1A85#2 = findPos132E (_t1316,target131E);
          int intPos1A87#2 = ExtractFemItem<int,CellIndex(Mesh)>(callFindPos1A85);
          tensor[3] refPos1A89#3 = ExtractFemItem<tensor[3],RefPos(Mesh)>(callFindPos1A85);
          int ilit1A8C#1 = 35;
          int mulRes1A8D#35 = IMul(intPos1A87,ilit1A8C);
          int idx1A90#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,mulRes1A8D);
          int ilit1A91#41 = 1;
          int addRes1A92#1 = IAdd(mulRes1A8D,ilit1A91);
          int idx1A93#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1A92);
          int ilit1A94#6 = 2;
          int addRes1A95#1 = IAdd(mulRes1A8D,ilit1A94);
          int idx1A96#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1A95);
          int ilit1A97#6 = 3;
          int addRes1A98#1 = IAdd(mulRes1A8D,ilit1A97);
          int idx1A99#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1A98);
          int ilit1A9A#2 = 4;
          int addRes1A9B#1 = IAdd(mulRes1A8D,ilit1A9A);
          int idx1A9C#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1A9B);
          int ilit1A9D#1 = 5;
          int addRes1A9E#1 = IAdd(mulRes1A8D,ilit1A9D);
          int idx1A9F#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1A9E);
          int ilit1AA0#1 = 6;
          int addRes1AA1#1 = IAdd(mulRes1A8D,ilit1AA0);
          int idx1AA2#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AA1);
          int ilit1AA3#1 = 7;
          int addRes1AA4#1 = IAdd(mulRes1A8D,ilit1AA3);
          int idx1AA5#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AA4);
          int ilit1AA6#1 = 8;
          int addRes1AA7#1 = IAdd(mulRes1A8D,ilit1AA6);
          int idx1AA8#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AA7);
          int ilit1AA9#1 = 9;
          int addRes1AAA#1 = IAdd(mulRes1A8D,ilit1AA9);
          int idx1AAB#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AAA);
          int ilit1AAC#1 = 10;
          int addRes1AAD#1 = IAdd(mulRes1A8D,ilit1AAC);
          int idx1AAE#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AAD);
          int ilit1AAF#1 = 11;
          int addRes1AB0#1 = IAdd(mulRes1A8D,ilit1AAF);
          int idx1AB1#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AB0);
          int ilit1AB2#1 = 12;
          int addRes1AB3#1 = IAdd(mulRes1A8D,ilit1AB2);
          int idx1AB4#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AB3);
          int ilit1AB5#1 = 13;
          int addRes1AB6#1 = IAdd(mulRes1A8D,ilit1AB5);
          int idx1AB7#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AB6);
          int ilit1AB8#1 = 14;
          int addRes1AB9#1 = IAdd(mulRes1A8D,ilit1AB8);
          int idx1ABA#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AB9);
          int ilit1ABB#1 = 15;
          int addRes1ABC#1 = IAdd(mulRes1A8D,ilit1ABB);
          int idx1ABD#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1ABC);
          int ilit1ABE#1 = 16;
          int addRes1ABF#1 = IAdd(mulRes1A8D,ilit1ABE);
          int idx1AC0#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1ABF);
          int ilit1AC1#1 = 17;
          int addRes1AC2#1 = IAdd(mulRes1A8D,ilit1AC1);
          int idx1AC3#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AC2);
          int ilit1AC4#1 = 18;
          int addRes1AC5#1 = IAdd(mulRes1A8D,ilit1AC4);
          int idx1AC6#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AC5);
          int ilit1AC7#1 = 19;
          int addRes1AC8#1 = IAdd(mulRes1A8D,ilit1AC7);
          int idx1AC9#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AC8);
          int ilit1ACA#1 = 20;
          int addRes1ACB#1 = IAdd(mulRes1A8D,ilit1ACA);
          int idx1ACC#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1ACB);
          int ilit1ACD#1 = 21;
          int addRes1ACE#1 = IAdd(mulRes1A8D,ilit1ACD);
          int idx1ACF#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1ACE);
          int ilit1AD0#1 = 22;
          int addRes1AD1#1 = IAdd(mulRes1A8D,ilit1AD0);
          int idx1AD2#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AD1);
          int ilit1AD3#1 = 23;
          int addRes1AD4#1 = IAdd(mulRes1A8D,ilit1AD3);
          int idx1AD5#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AD4);
          int ilit1AD6#1 = 24;
          int addRes1AD7#1 = IAdd(mulRes1A8D,ilit1AD6);
          int idx1AD8#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AD7);
          int ilit1AD9#1 = 25;
          int addRes1ADA#1 = IAdd(mulRes1A8D,ilit1AD9);
          int idx1ADB#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1ADA);
          int ilit1ADC#1 = 26;
          int addRes1ADD#1 = IAdd(mulRes1A8D,ilit1ADC);
          int idx1ADE#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1ADD);
          int ilit1ADF#1 = 27;
          int addRes1AE0#1 = IAdd(mulRes1A8D,ilit1ADF);
          int idx1AE1#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AE0);
          int ilit1AE2#1 = 28;
          int addRes1AE3#1 = IAdd(mulRes1A8D,ilit1AE2);
          int idx1AE4#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AE3);
          int ilit1AE5#1 = 29;
          int addRes1AE6#1 = IAdd(mulRes1A8D,ilit1AE5);
          int idx1AE7#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AE6);
          int ilit1AE8#1 = 30;
          int addRes1AE9#1 = IAdd(mulRes1A8D,ilit1AE8);
          int idx1AEA#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AE9);
          int ilit1AEB#1 = 31;
          int addRes1AEC#1 = IAdd(mulRes1A8D,ilit1AEB);
          int idx1AED#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AEC);
          int ilit1AEE#1 = 32;
          int addRes1AEF#1 = IAdd(mulRes1A8D,ilit1AEE);
          int idx1AF0#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AEF);
          int ilit1AF1#1 = 33;
          int addRes1AF2#1 = IAdd(mulRes1A8D,ilit1AF1);
          int idx1AF3#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AF2);
          int ilit1AF4#1 = 34;
          int addRes1AF5#1 = IAdd(mulRes1A8D,ilit1AF4);
          int idx1AF6#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AF5);
          int mulRes1B69#1 = IMul(ilit1A91,idx1A90);
          int mulRes1B6B#1 = IMul(ilit1A91,idx1A93);
          int mulRes1B6E#1 = IMul(ilit1A91,idx1A96);
          int mulRes1B71#1 = IMul(ilit1A91,idx1A99);
          int mulRes1B74#1 = IMul(ilit1A91,idx1A9C);
          int mulRes1B77#1 = IMul(ilit1A91,idx1A9F);
          int mulRes1B7A#1 = IMul(ilit1A91,idx1AA2);
          int mulRes1B7D#1 = IMul(ilit1A91,idx1AA5);
          int mulRes1B80#1 = IMul(ilit1A91,idx1AA8);
          int mulRes1B83#1 = IMul(ilit1A91,idx1AAB);
          int mulRes1B86#1 = IMul(ilit1A91,idx1AAE);
          int mulRes1B89#1 = IMul(ilit1A91,idx1AB1);
          int mulRes1B8C#1 = IMul(ilit1A91,idx1AB4);
          int mulRes1B8F#1 = IMul(ilit1A91,idx1AB7);
          int mulRes1B92#1 = IMul(ilit1A91,idx1ABA);
          int mulRes1B95#1 = IMul(ilit1A91,idx1ABD);
          int mulRes1B98#1 = IMul(ilit1A91,idx1AC0);
          int mulRes1B9B#1 = IMul(ilit1A91,idx1AC3);
          int mulRes1B9E#1 = IMul(ilit1A91,idx1AC6);
          int mulRes1BA1#1 = IMul(ilit1A91,idx1AC9);
          int mulRes1BA4#1 = IMul(ilit1A91,idx1ACC);
          int mulRes1BA7#1 = IMul(ilit1A91,idx1ACF);
          int mulRes1BAA#1 = IMul(ilit1A91,idx1AD2);
          int mulRes1BAD#1 = IMul(ilit1A91,idx1AD5);
          int mulRes1BB0#1 = IMul(ilit1A91,idx1AD8);
          int mulRes1BB3#1 = IMul(ilit1A91,idx1ADB);
          int mulRes1BB6#1 = IMul(ilit1A91,idx1ADE);
          int mulRes1BB9#1 = IMul(ilit1A91,idx1AE1);
          int mulRes1BBC#1 = IMul(ilit1A91,idx1AE4);
          int mulRes1BBF#1 = IMul(ilit1A91,idx1AE7);
          int mulRes1BC2#1 = IMul(ilit1A91,idx1AEA);
          int mulRes1BC5#1 = IMul(ilit1A91,idx1AED);
          int mulRes1BC8#1 = IMul(ilit1A91,idx1AF0);
          int mulRes1BCB#1 = IMul(ilit1A91,idx1AF3);
          int mulRes1BCE#1 = IMul(ilit1A91,idx1AF6);
          real dof1BCF#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B69);
          real dof1BD0#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B6B);
          real dof1BD1#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B6E);
          real dof1BD2#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B71);
          real dof1BD3#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B74);
          real dof1BD4#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B77);
          real dof1BD5#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B7A);
          real dof1BD6#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B7D);
          real dof1BD7#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B80);
          real dof1BD8#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B83);
          real dof1BD9#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B86);
          real dof1BDA#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B89);
          real dof1BDB#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B8C);
          real dof1BDC#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B8F);
          real dof1BDD#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B92);
          real dof1BDE#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B95);
          real dof1BDF#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B98);
          real dof1BE0#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B9B);
          real dof1BE1#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B9E);
          real dof1BE2#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BA1);
          real dof1BE3#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BA4);
          real dof1BE4#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BA7);
          real dof1BE5#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BAA);
          real dof1BE6#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BAD);
          real dof1BE7#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BB0);
          real dof1BE8#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BB3);
          real dof1BE9#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BB6);
          real dof1BEA#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BB9);
          real dof1BEB#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BBC);
          real dof1BEC#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BBF);
          real dof1BED#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BC2);
          real dof1BEE#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BC5);
          real dof1BEF#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BC8);
          real dof1BF0#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BCB);
          real dof1BF1#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BCE);
          tensor[35] dofs1BF2#4 = <tensor[35]>[dof1BCF,dof1BD0,dof1BD1,dof1BD2,dof1BD3,dof1BD4,dof1BD5,dof1BD6,dof1BD7,dof1BD8,dof1BD9,dof1BDA,dof1BDB,dof1BDC,dof1BDD,dof1BDE,dof1BDF,dof1BE0,dof1BE1,dof1BE2,dof1BE3,dof1BE4,dof1BE5,dof1BE6,dof1BE7,dof1BE8,dof1BE9,dof1BEA,dof1BEB,dof1BEC,dof1BED,dof1BEE,dof1BEF,dof1BF0,dof1BF1];
          real varAcc1C82#14 = VIndex<3,0>(refPos1A89);
          real varAcc1C83#8 = VIndex<3,1>(refPos1A89);
          real varAcc1C84#8 = VIndex<3,2>(refPos1A89);
          real coeff1C85#3 = 0.106666666667e2;
          real prod21C87#7 = RMul(varAcc1C82,varAcc1C82);
          real prod31C88#4 = RMul(prod21C87,varAcc1C82);
          real prod41C89#1 = RMul(prod31C88,varAcc1C82);
          real one1C8A#44 = 0.1e1;
          real prod1C8B#5 = RMul(one1C8A,one1C8A);
          real prod1C8C#3 = RMul(prod41C89,prod1C8B);
          real coeff1C8D#9 = 0.426666666667e2;
          real prod1C8F#4 = RMul(varAcc1C83,one1C8A);
          real prod1C90#4 = RMul(prod31C88,prod1C8F);
          real prod1C92#4 = RMul(one1C8A,varAcc1C84);
          real prod1C93#4 = RMul(prod31C88,prod1C92);
          real coeff1C94#3 = -0.266666666667e2;
          real prod1C95#10 = RMul(prod31C88,prod1C8B);
          real coeff1C96#9 = 0.64e2;
          real prod21C97#4 = RMul(varAcc1C83,varAcc1C83);
          real prod1C98#3 = RMul(prod21C97,one1C8A);
          real prod1C99#3 = RMul(prod21C87,prod1C98);
          real coeff1C9A#18 = 0.128e3;
          real prod1C9B#3 = RMul(varAcc1C83,varAcc1C84);
          real prod1C9C#4 = RMul(prod21C87,prod1C9B);
          real coeff1C9D#9 = -0.80e2;
          real prod1C9E#16 = RMul(prod21C87,prod1C8F);
          real prod21C9F#4 = RMul(varAcc1C84,varAcc1C84);
          real prod1CA0#3 = RMul(one1C8A,prod21C9F);
          real prod1CA1#3 = RMul(prod21C87,prod1CA0);
          real prod1CA2#16 = RMul(prod21C87,prod1C92);
          real coeff1CA3#3 = 0.233333333333e2;
          real prod1CA4#18 = RMul(prod21C87,prod1C8B);
          real prod31CA5#3 = RMul(prod21C97,varAcc1C83);
          real prod1CA6#2 = RMul(prod31CA5,one1C8A);
          real prod1CA7#4 = RMul(varAcc1C82,prod1CA6);
          real prod1CA8#2 = RMul(prod21C97,varAcc1C84);
          real prod1CA9#4 = RMul(varAcc1C82,prod1CA8);
          real prod1CAA#16 = RMul(varAcc1C82,prod1C98);
          real prod1CAB#2 = RMul(varAcc1C83,prod21C9F);
          real prod1CAC#4 = RMul(varAcc1C82,prod1CAB);
          real coeff1CAD#4 = -0.160e3;
          real prod1CAE#9 = RMul(varAcc1C82,prod1C9B);
          real coeff1CAF#6 = 0.466666666667e2;
          real prod1CB0#19 = RMul(varAcc1C82,prod1C8F);
          real prod31CB1#3 = RMul(prod21C9F,varAcc1C84);
          real prod1CB2#2 = RMul(one1C8A,prod31CB1);
          real prod1CB3#4 = RMul(varAcc1C82,prod1CB2);
          real prod1CB4#16 = RMul(varAcc1C82,prod1CA0);
          real prod1CB5#19 = RMul(varAcc1C82,prod1C92);
          real coeff1CB6#4 = -0.833333333333e1;
          real prod1CB7#16 = RMul(varAcc1C82,prod1C8B);
          real prod41CB8#1 = RMul(prod31CA5,varAcc1C83);
          real prod1CB9#1 = RMul(prod41CB8,one1C8A);
          real prod1CBA#3 = RMul(one1C8A,prod1CB9);
          real prod1CBB#1 = RMul(prod31CA5,varAcc1C84);
          real prod1CBC#4 = RMul(one1C8A,prod1CBB);
          real prod1CBD#10 = RMul(one1C8A,prod1CA6);
          real prod1CBE#1 = RMul(prod21C97,prod21C9F);
          real prod1CBF#3 = RMul(one1C8A,prod1CBE);
          real prod1CC0#16 = RMul(one1C8A,prod1CA8);
          real prod1CC1#18 = RMul(one1C8A,prod1C98);
          real prod1CC2#1 = RMul(varAcc1C83,prod31CB1);
          real prod1CC3#4 = RMul(one1C8A,prod1CC2);
          real prod1CC4#16 = RMul(one1C8A,prod1CAB);
          real prod1CC5#19 = RMul(one1C8A,prod1C9B);
          real prod1CC6#16 = RMul(one1C8A,prod1C8F);
          real prod41CC7#1 = RMul(prod31CB1,varAcc1C84);
          real prod1CC8#1 = RMul(one1C8A,prod41CC7);
          real prod1CC9#3 = RMul(one1C8A,prod1CC8);
          real prod1CCA#10 = RMul(one1C8A,prod1CB2);
          real prod1CCB#18 = RMul(one1C8A,prod1CA0);
          real prod1CCC#16 = RMul(one1C8A,prod1C92);
          real prod1CCD#6 = RMul(one1C8A,prod1C8B);
          real mult1CCE#10 = RMul(one1C8A,prod1CCD);
          real mult1CCF#1 = RMul(coeff1CB6,prod1CCC);
          real mult1CD0#1 = RMul(coeff1CA3,prod1CCB);
          real mult1CD1#1 = RMul(coeff1C94,prod1CCA);
          real mult1CD2#2 = RMul(coeff1C85,prod1CC9);
          real mult1CD3#1 = RMul(coeff1CB6,prod1CC6);
          real mult1CD4#1 = RMul(coeff1CAF,prod1CC5);
          real mult1CD5#1 = RMul(coeff1C9D,prod1CC4);
          real mult1CD6#2 = RMul(coeff1C8D,prod1CC3);
          real mult1CD7#1 = RMul(coeff1CA3,prod1CC1);
          real mult1CD8#1 = RMul(coeff1C9D,prod1CC0);
          real mult1CD9#4 = RMul(coeff1C96,prod1CBF);
          real mult1CDA#1 = RMul(coeff1C94,prod1CBD);
          real mult1CDB#2 = RMul(coeff1C8D,prod1CBC);
          real mult1CDC#2 = RMul(coeff1C85,prod1CBA);
          real mult1CDD#1 = RMul(coeff1CB6,prod1CB7);
          real mult1CDE#1 = RMul(coeff1CAF,prod1CB5);
          real mult1CDF#1 = RMul(coeff1C9D,prod1CB4);
          real mult1CE0#2 = RMul(coeff1C8D,prod1CB3);
          real mult1CE1#1 = RMul(coeff1CAF,prod1CB0);
          real mult1CE2#1 = RMul(coeff1CAD,prod1CAE);
          real mult1CE3#4 = RMul(coeff1C9A,prod1CAC);
          real mult1CE4#1 = RMul(coeff1C9D,prod1CAA);
          real mult1CE5#4 = RMul(coeff1C9A,prod1CA9);
          real mult1CE6#2 = RMul(coeff1C8D,prod1CA7);
          real mult1CE7#1 = RMul(coeff1CA3,prod1CA4);
          real mult1CE8#1 = RMul(coeff1C9D,prod1CA2);
          real mult1CE9#3 = RMul(coeff1C96,prod1CA1);
          real mult1CEA#1 = RMul(coeff1C9D,prod1C9E);
          real mult1CEB#4 = RMul(coeff1C9A,prod1C9C);
          real mult1CEC#3 = RMul(coeff1C96,prod1C99);
          real mult1CED#1 = RMul(coeff1C94,prod1C95);
          real mult1CEE#2 = RMul(coeff1C8D,prod1C93);
          real mult1CEF#2 = RMul(coeff1C8D,prod1C90);
          real mult1CF0#2 = RMul(coeff1C85,prod1C8C);
          real sum1CF1#1 = RAdd(mult1CEF,mult1CF0);
          real sum1CF2#1 = RAdd(mult1CEE,sum1CF1);
          real sum1CF3#1 = RAdd(mult1CED,sum1CF2);
          real sum1CF4#1 = RAdd(mult1CEC,sum1CF3);
          real sum1CF5#1 = RAdd(mult1CEB,sum1CF4);
          real sum1CF6#1 = RAdd(mult1CEA,sum1CF5);
          real sum1CF7#1 = RAdd(mult1CE9,sum1CF6);
          real sum1CF8#1 = RAdd(mult1CE8,sum1CF7);
          real sum1CF9#1 = RAdd(mult1CE7,sum1CF8);
          real sum1CFA#1 = RAdd(mult1CE6,sum1CF9);
          real sum1CFB#1 = RAdd(mult1CE5,sum1CFA);
          real sum1CFC#1 = RAdd(mult1CE4,sum1CFB);
          real sum1CFD#1 = RAdd(mult1CE3,sum1CFC);
          real sum1CFE#1 = RAdd(mult1CE2,sum1CFD);
          real sum1CFF#1 = RAdd(mult1CE1,sum1CFE);
          real sum1D00#1 = RAdd(mult1CE0,sum1CFF);
          real sum1D01#1 = RAdd(mult1CDF,sum1D00);
          real sum1D02#1 = RAdd(mult1CDE,sum1D01);
          real sum1D03#1 = RAdd(mult1CDD,sum1D02);
          real sum1D04#1 = RAdd(mult1CDC,sum1D03);
          real sum1D05#1 = RAdd(mult1CDB,sum1D04);
          real sum1D06#1 = RAdd(mult1CDA,sum1D05);
          real sum1D07#1 = RAdd(mult1CD9,sum1D06);
          real sum1D08#1 = RAdd(mult1CD8,sum1D07);
          real sum1D09#1 = RAdd(mult1CD7,sum1D08);
          real sum1D0A#1 = RAdd(mult1CD6,sum1D09);
          real sum1D0B#1 = RAdd(mult1CD5,sum1D0A);
          real sum1D0C#1 = RAdd(mult1CD4,sum1D0B);
          real sum1D0D#1 = RAdd(mult1CD3,sum1D0C);
          real sum1D0E#1 = RAdd(mult1CD2,sum1D0D);
          real sum1D0F#1 = RAdd(mult1CD1,sum1D0E);
          real sum1D10#1 = RAdd(mult1CD0,sum1D0F);
          real sum1D11#1 = RAdd(mult1CCF,sum1D10);
          real sum1D12#1 = RAdd(mult1CCE,sum1D11);
          real coeff1D14#12 = -0.16e2;
          real coeff1D15#3 = 0.733333333333e1;
          real coeff1D16#22 = -0.1e1;
          real mult1D17#1 = RMul(coeff1D16,prod1CB7);
          real mult1D18#1 = RMul(coeff1D15,prod1CA4);
          real mult1D19#1 = RMul(coeff1D14,prod1C95);
          real sum1D1A#1 = RAdd(mult1D19,mult1CF0);
          real sum1D1B#1 = RAdd(mult1D18,sum1D1A);
          real sum1D1C#1 = RAdd(mult1D17,sum1D1B);
          real mult1D1E#1 = RMul(coeff1D16,prod1CC6);
          real mult1D1F#1 = RMul(coeff1D15,prod1CC1);
          real mult1D20#1 = RMul(coeff1D14,prod1CBD);
          real sum1D21#1 = RAdd(mult1D20,mult1CDC);
          real sum1D22#1 = RAdd(mult1D1F,sum1D21);
          real sum1D23#1 = RAdd(mult1D1E,sum1D22);
          real mult1D25#1 = RMul(coeff1D16,prod1CCC);
          real mult1D26#1 = RMul(coeff1D15,prod1CCB);
          real mult1D27#1 = RMul(coeff1D14,prod1CCA);
          real sum1D28#1 = RAdd(mult1D27,mult1CD2);
          real sum1D29#1 = RAdd(mult1D26,sum1D28);
          real sum1D2A#1 = RAdd(mult1D25,sum1D29);
          real coeff1D2C#16 = -0.32e2;
          real coeff1D2D#7 = 0.533333333333e1;
          real mult1D2E#2 = RMul(coeff1D2D,prod1CC5);
          real mult1D2F#1 = RMul(coeff1D2C,prod1CC0);
          real sum1D30#1 = RAdd(mult1D2F,mult1CDB);
          real sum1D31#1 = RAdd(mult1D2E,sum1D30);
          real coeff1D33#6 = 0.4e1;
          real mult1D34#1 = RMul(coeff1D33,prod1CC5);
          real mult1D35#2 = RMul(coeff1D14,prod1CC4);
          real mult1D36#2 = RMul(coeff1D14,prod1CC0);
          real sum1D37#1 = RAdd(mult1D36,mult1CD9);
          real sum1D38#1 = RAdd(mult1D35,sum1D37);
          real sum1D39#1 = RAdd(mult1D34,sum1D38);
          real mult1D3B#1 = RMul(coeff1D2C,prod1CC4);
          real sum1D3C#1 = RAdd(mult1D3B,mult1CD6);
          real sum1D3D#1 = RAdd(mult1D2E,sum1D3C);
          real mult1D3F#2 = RMul(coeff1D2D,prod1CB5);
          real mult1D40#1 = RMul(coeff1D2C,prod1CA2);
          real sum1D41#1 = RAdd(mult1D40,mult1CEE);
          real sum1D42#1 = RAdd(mult1D3F,sum1D41);
          real mult1D44#1 = RMul(coeff1D33,prod1CB5);
          real mult1D45#2 = RMul(coeff1D14,prod1CB4);
          real mult1D46#1 = RMul(coeff1D14,prod1CA2);
          real sum1D47#2 = RAdd(mult1D46,mult1CE9);
          real sum1D48#1 = RAdd(mult1D45,sum1D47);
          real sum1D49#1 = RAdd(mult1D44,sum1D48);
          real mult1D4B#1 = RMul(coeff1D2C,prod1CB4);
          real sum1D4C#1 = RAdd(mult1D4B,mult1CE0);
          real sum1D4D#1 = RAdd(mult1D3F,sum1D4C);
          real mult1D4F#2 = RMul(coeff1D2D,prod1CB0);
          real mult1D50#1 = RMul(coeff1D2C,prod1C9E);
          real sum1D51#1 = RAdd(mult1D50,mult1CEF);
          real sum1D52#1 = RAdd(mult1D4F,sum1D51);
          real mult1D54#1 = RMul(coeff1D33,prod1CB0);
          real mult1D55#2 = RMul(coeff1D14,prod1CAA);
          real mult1D56#1 = RMul(coeff1D14,prod1C9E);
          real sum1D57#2 = RAdd(mult1D56,mult1CEC);
          real sum1D58#1 = RAdd(mult1D55,sum1D57);
          real sum1D59#1 = RAdd(mult1D54,sum1D58);
          real mult1D5B#1 = RMul(coeff1D2C,prod1CAA);
          real sum1D5C#1 = RAdd(mult1D5B,mult1CE6);
          real sum1D5D#1 = RAdd(mult1D4F,sum1D5C);
          real coeff1D5F#12 = -0.426666666667e2;
          real coeff1D60#21 = -0.128e3;
          real coeff1D61#18 = 0.96e2;
          real coeff1D62#10 = -0.256e3;
          real coeff1D63#13 = 0.192e3;
          real coeff1D64#9 = -0.693333333333e2;
          real coeff1D65#4 = 0.16e2;
          real mult1D66#1 = RMul(coeff1D65,prod1CCC);
          real mult1D67#1 = RMul(coeff1D64,prod1CCB);
          real mult1D68#1 = RMul(coeff1D61,prod1CCA);
          real mult1D69#2 = RMul(coeff1D5F,prod1CC9);
          real mult1D6A#2 = RMul(coeff1D64,prod1CC5);
          real mult1D6B#1 = RMul(coeff1D63,prod1CC4);
          real mult1D6C#2 = RMul(coeff1D60,prod1CC3);
          real mult1D6D#1 = RMul(coeff1D61,prod1CC0);
          real mult1D6E#4 = RMul(coeff1D60,prod1CBF);
          real mult1D6F#2 = RMul(coeff1D5F,prod1CBC);
          real mult1D70#2 = RMul(coeff1D64,prod1CB5);
          real mult1D71#1 = RMul(coeff1D63,prod1CB4);
          real mult1D72#2 = RMul(coeff1D60,prod1CB3);
          real mult1D73#3 = RMul(coeff1D63,prod1CAE);
          real mult1D74#2 = RMul(coeff1D62,prod1CAC);
          real mult1D75#4 = RMul(coeff1D60,prod1CA9);
          real mult1D76#1 = RMul(coeff1D61,prod1CA2);
          real mult1D77#4 = RMul(coeff1D60,prod1CA1);
          real mult1D78#4 = RMul(coeff1D60,prod1C9C);
          real mult1D79#2 = RMul(coeff1D5F,prod1C93);
          real sum1D7A#1 = RAdd(mult1D78,mult1D79);
          real sum1D7B#1 = RAdd(mult1D77,sum1D7A);
          real sum1D7C#1 = RAdd(mult1D76,sum1D7B);
          real sum1D7D#1 = RAdd(mult1D75,sum1D7C);
          real sum1D7E#1 = RAdd(mult1D74,sum1D7D);
          real sum1D7F#1 = RAdd(mult1D73,sum1D7E);
          real sum1D80#1 = RAdd(mult1D72,sum1D7F);
          real sum1D81#1 = RAdd(mult1D71,sum1D80);
          real sum1D82#1 = RAdd(mult1D70,sum1D81);
          real sum1D83#1 = RAdd(mult1D6F,sum1D82);
          real sum1D84#1 = RAdd(mult1D6E,sum1D83);
          real sum1D85#1 = RAdd(mult1D6D,sum1D84);
          real sum1D86#1 = RAdd(mult1D6C,sum1D85);
          real sum1D87#1 = RAdd(mult1D6B,sum1D86);
          real sum1D88#1 = RAdd(mult1D6A,sum1D87);
          real sum1D89#1 = RAdd(mult1D69,sum1D88);
          real sum1D8A#1 = RAdd(mult1D68,sum1D89);
          real sum1D8B#1 = RAdd(mult1D67,sum1D8A);
          real sum1D8C#1 = RAdd(mult1D66,sum1D8B);
          real coeff1D8E#9 = -0.144e3;
          real coeff1D8F#6 = 0.28e2;
          real coeff1D90#3 = 0.76e2;
          real coeff1D91#4 = -0.12e2;
          real mult1D92#1 = RMul(coeff1D91,prod1CCC);
          real mult1D93#1 = RMul(coeff1D90,prod1CCB);
          real mult1D94#4 = RMul(coeff1D60,prod1CCA);
          real mult1D95#1 = RMul(coeff1C96,prod1CC9);
          real mult1D96#2 = RMul(coeff1D8F,prod1CC5);
          real mult1D97#1 = RMul(coeff1D8E,prod1CC4);
          real mult1D98#2 = RMul(coeff1C9A,prod1CC3);
          real mult1D99#2 = RMul(coeff1D8F,prod1CB5);
          real mult1D9A#1 = RMul(coeff1D8E,prod1CB4);
          real mult1D9B#2 = RMul(coeff1C9A,prod1CB3);
          real mult1D9C#6 = RMul(coeff1D2C,prod1CAE);
          real sum1D9D#1 = RAdd(mult1CE3,sum1D47);
          real sum1D9E#1 = RAdd(mult1D9C,sum1D9D);
          real sum1D9F#1 = RAdd(mult1D9B,sum1D9E);
          real sum1DA0#1 = RAdd(mult1D9A,sum1D9F);
          real sum1DA1#1 = RAdd(mult1D99,sum1DA0);
          real sum1DA2#1 = RAdd(mult1CD9,sum1DA1);
          real sum1DA3#1 = RAdd(mult1D36,sum1DA2);
          real sum1DA4#1 = RAdd(mult1D98,sum1DA3);
          real sum1DA5#1 = RAdd(mult1D97,sum1DA4);
          real sum1DA6#1 = RAdd(mult1D96,sum1DA5);
          real sum1DA7#1 = RAdd(mult1D95,sum1DA6);
          real sum1DA8#1 = RAdd(mult1D94,sum1DA7);
          real sum1DA9#1 = RAdd(mult1D93,sum1DA8);
          real sum1DAA#1 = RAdd(mult1D92,sum1DA9);
          real coeff1DAC#13 = 0.32e2;
          real coeff1DAD#6 = -0.533333333333e1;
          real coeff1DAE#3 = 0.746666666667e2;
          real coeff1DAF#3 = -0.373333333333e2;
          real mult1DB0#4 = RMul(coeff1D2D,prod1CCC);
          real mult1DB1#1 = RMul(coeff1DAF,prod1CCB);
          real mult1DB2#1 = RMul(coeff1DAE,prod1CCA);
          real mult1DB3#2 = RMul(coeff1DAD,prod1CC5);
          real mult1DB4#2 = RMul(coeff1DAC,prod1CC4);
          real mult1DB5#2 = RMul(coeff1D5F,prod1CC3);
          real mult1DB6#2 = RMul(coeff1DAD,prod1CB5);
          real mult1DB7#2 = RMul(coeff1DAC,prod1CB4);
          real mult1DB8#2 = RMul(coeff1D5F,prod1CB3);
          real sum1DB9#1 = RAdd(mult1DB7,mult1DB8);
          real sum1DBA#1 = RAdd(mult1DB6,sum1DB9);
          real sum1DBB#1 = RAdd(mult1DB5,sum1DBA);
          real sum1DBC#1 = RAdd(mult1DB4,sum1DBB);
          real sum1DBD#1 = RAdd(mult1DB3,sum1DBC);
          real sum1DBE#1 = RAdd(mult1D69,sum1DBD);
          real sum1DBF#1 = RAdd(mult1DB2,sum1DBE);
          real sum1DC0#1 = RAdd(mult1DB1,sum1DBF);
          real sum1DC1#1 = RAdd(mult1DB0,sum1DC0);
          real mult1DC3#1 = RMul(coeff1D65,prod1CC6);
          real mult1DC4#1 = RMul(coeff1D61,prod1CC4);
          real mult1DC5#1 = RMul(coeff1D64,prod1CC1);
          real mult1DC6#1 = RMul(coeff1D63,prod1CC0);
          real mult1DC7#1 = RMul(coeff1D61,prod1CBD);
          real mult1DC8#2 = RMul(coeff1D60,prod1CBC);
          real mult1DC9#2 = RMul(coeff1D5F,prod1CBA);
          real mult1DCA#2 = RMul(coeff1D64,prod1CB0);
          real mult1DCB#4 = RMul(coeff1D60,prod1CAC);
          real mult1DCC#1 = RMul(coeff1D63,prod1CAA);
          real mult1DCD#2 = RMul(coeff1D62,prod1CA9);
          real mult1DCE#2 = RMul(coeff1D60,prod1CA7);
          real mult1DCF#1 = RMul(coeff1D61,prod1C9E);
          real mult1DD0#4 = RMul(coeff1D60,prod1C99);
          real mult1DD1#2 = RMul(coeff1D5F,prod1C90);
          real sum1DD2#1 = RAdd(mult1DD0,mult1DD1);
          real sum1DD3#1 = RAdd(mult1D78,sum1DD2);
          real sum1DD4#1 = RAdd(mult1DCF,sum1DD3);
          real sum1DD5#1 = RAdd(mult1DCE,sum1DD4);
          real sum1DD6#1 = RAdd(mult1DCD,sum1DD5);
          real sum1DD7#1 = RAdd(mult1DCC,sum1DD6);
          real sum1DD8#1 = RAdd(mult1DCB,sum1DD7);
          real sum1DD9#1 = RAdd(mult1D73,sum1DD8);
          real sum1DDA#1 = RAdd(mult1DCA,sum1DD9);
          real sum1DDB#1 = RAdd(mult1DC9,sum1DDA);
          real sum1DDC#1 = RAdd(mult1DC8,sum1DDB);
          real sum1DDD#1 = RAdd(mult1DC7,sum1DDC);
          real sum1DDE#1 = RAdd(mult1D6E,sum1DDD);
          real sum1DDF#1 = RAdd(mult1DC6,sum1DDE);
          real sum1DE0#1 = RAdd(mult1DC5,sum1DDF);
          real sum1DE1#1 = RAdd(mult1DB5,sum1DE0);
          real sum1DE2#1 = RAdd(mult1DC4,sum1DE1);
          real sum1DE3#1 = RAdd(mult1D6A,sum1DE2);
          real sum1DE4#1 = RAdd(mult1DC3,sum1DE3);
          real mult1DE6#1 = RMul(coeff1D91,prod1CC6);
          real mult1DE7#1 = RMul(coeff1D90,prod1CC1);
          real mult1DE8#1 = RMul(coeff1D8E,prod1CC0);
          real mult1DE9#4 = RMul(coeff1D60,prod1CBD);
          real mult1DEA#2 = RMul(coeff1C9A,prod1CBC);
          real mult1DEB#1 = RMul(coeff1C96,prod1CBA);
          real mult1DEC#2 = RMul(coeff1D8F,prod1CB0);
          real mult1DED#1 = RMul(coeff1D8E,prod1CAA);
          real mult1DEE#2 = RMul(coeff1C9A,prod1CA7);
          real sum1DEF#1 = RAdd(mult1DEE,sum1D57);
          real sum1DF0#1 = RAdd(mult1CE5,sum1DEF);
          real sum1DF1#1 = RAdd(mult1DED,sum1DF0);
          real sum1DF2#1 = RAdd(mult1D9C,sum1DF1);
          real sum1DF3#1 = RAdd(mult1DEC,sum1DF2);
          real sum1DF4#1 = RAdd(mult1DEB,sum1DF3);
          real sum1DF5#1 = RAdd(mult1DEA,sum1DF4);
          real sum1DF6#1 = RAdd(mult1DE9,sum1DF5);
          real sum1DF7#1 = RAdd(mult1CD9,sum1DF6);
          real sum1DF8#1 = RAdd(mult1DE8,sum1DF7);
          real sum1DF9#1 = RAdd(mult1DE7,sum1DF8);
          real sum1DFA#1 = RAdd(mult1D35,sum1DF9);
          real sum1DFB#1 = RAdd(mult1D96,sum1DFA);
          real sum1DFC#1 = RAdd(mult1DE6,sum1DFB);
          real mult1DFE#4 = RMul(coeff1D2D,prod1CC6);
          real mult1DFF#1 = RMul(coeff1DAF,prod1CC1);
          real mult1E00#2 = RMul(coeff1DAC,prod1CC0);
          real mult1E01#1 = RMul(coeff1DAE,prod1CBD);
          real mult1E02#2 = RMul(coeff1DAD,prod1CB0);
          real mult1E03#2 = RMul(coeff1DAC,prod1CAA);
          real mult1E04#2 = RMul(coeff1D5F,prod1CA7);
          real sum1E05#1 = RAdd(mult1E03,mult1E04);
          real sum1E06#1 = RAdd(mult1E02,sum1E05);
          real sum1E07#1 = RAdd(mult1DC9,sum1E06);
          real sum1E08#1 = RAdd(mult1D6F,sum1E07);
          real sum1E09#1 = RAdd(mult1E01,sum1E08);
          real sum1E0A#1 = RAdd(mult1E00,sum1E09);
          real sum1E0B#1 = RAdd(mult1DFF,sum1E0A);
          real sum1E0C#1 = RAdd(mult1DB3,sum1E0B);
          real sum1E0D#1 = RAdd(mult1DFE,sum1E0C);
          real mult1E0F#1 = RMul(coeff1D65,prod1CB7);
          real mult1E10#1 = RMul(coeff1D61,prod1CB4);
          real mult1E11#1 = RMul(coeff1D61,prod1CAA);
          real mult1E12#1 = RMul(coeff1D64,prod1CA4);
          real mult1E13#1 = RMul(coeff1D63,prod1CA2);
          real mult1E14#1 = RMul(coeff1D63,prod1C9E);
          real mult1E15#2 = RMul(coeff1D62,prod1C9C);
          real mult1E16#1 = RMul(coeff1D61,prod1C95);
          real mult1E17#2 = RMul(coeff1D60,prod1C93);
          real mult1E18#2 = RMul(coeff1D60,prod1C90);
          real mult1E19#2 = RMul(coeff1D5F,prod1C8C);
          real sum1E1A#1 = RAdd(mult1E18,mult1E19);
          real sum1E1B#1 = RAdd(mult1E17,sum1E1A);
          real sum1E1C#1 = RAdd(mult1E16,sum1E1B);
          real sum1E1D#1 = RAdd(mult1DD0,sum1E1C);
          real sum1E1E#1 = RAdd(mult1E15,sum1E1D);
          real sum1E1F#1 = RAdd(mult1E14,sum1E1E);
          real sum1E20#1 = RAdd(mult1D77,sum1E1F);
          real sum1E21#1 = RAdd(mult1E13,sum1E20);
          real sum1E22#1 = RAdd(mult1E12,sum1E21);
          real sum1E23#1 = RAdd(mult1E04,sum1E22);
          real sum1E24#1 = RAdd(mult1D75,sum1E23);
          real sum1E25#1 = RAdd(mult1E11,sum1E24);
          real sum1E26#1 = RAdd(mult1DCB,sum1E25);
          real sum1E27#1 = RAdd(mult1D73,sum1E26);
          real sum1E28#1 = RAdd(mult1DCA,sum1E27);
          real sum1E29#1 = RAdd(mult1DB8,sum1E28);
          real sum1E2A#1 = RAdd(mult1E10,sum1E29);
          real sum1E2B#1 = RAdd(mult1D70,sum1E2A);
          real sum1E2C#1 = RAdd(mult1E0F,sum1E2B);
          real mult1E2E#1 = RMul(coeff1D91,prod1CB7);
          real mult1E2F#1 = RMul(coeff1D90,prod1CA4);
          real mult1E30#1 = RMul(coeff1D8E,prod1CA2);
          real mult1E31#1 = RMul(coeff1D8E,prod1C9E);
          real mult1E32#3 = RMul(coeff1D60,prod1C95);
          real mult1E33#2 = RMul(coeff1C9A,prod1C93);
          real mult1E34#2 = RMul(coeff1C9A,prod1C90);
          real mult1E35#1 = RMul(coeff1C96,prod1C8C);
          real sum1E36#1 = RAdd(mult1E34,mult1E35);
          real sum1E37#1 = RAdd(mult1E33,sum1E36);
          real sum1E38#1 = RAdd(mult1E32,sum1E37);
          real sum1E39#1 = RAdd(mult1CEC,sum1E38);
          real sum1E3A#1 = RAdd(mult1CEB,sum1E39);
          real sum1E3B#1 = RAdd(mult1E31,sum1E3A);
          real sum1E3C#1 = RAdd(mult1CE9,sum1E3B);
          real sum1E3D#1 = RAdd(mult1E30,sum1E3C);
          real sum1E3E#1 = RAdd(mult1E2F,sum1E3D);
          real sum1E3F#1 = RAdd(mult1D55,sum1E3E);
          real sum1E40#1 = RAdd(mult1D9C,sum1E3F);
          real sum1E41#1 = RAdd(mult1DEC,sum1E40);
          real sum1E42#1 = RAdd(mult1D45,sum1E41);
          real sum1E43#1 = RAdd(mult1D99,sum1E42);
          real sum1E44#1 = RAdd(mult1E2E,sum1E43);
          real mult1E46#4 = RMul(coeff1D2D,prod1CB7);
          real mult1E47#1 = RMul(coeff1DAF,prod1CA4);
          real mult1E48#2 = RMul(coeff1DAC,prod1CA2);
          real mult1E49#2 = RMul(coeff1DAC,prod1C9E);
          real mult1E4A#1 = RMul(coeff1DAE,prod1C95);
          real sum1E4B#1 = RAdd(mult1DD1,mult1E19);
          real sum1E4C#1 = RAdd(mult1D79,sum1E4B);
          real sum1E4D#1 = RAdd(mult1E4A,sum1E4C);
          real sum1E4E#1 = RAdd(mult1E49,sum1E4D);
          real sum1E4F#1 = RAdd(mult1E48,sum1E4E);
          real sum1E50#1 = RAdd(mult1E47,sum1E4F);
          real sum1E51#1 = RAdd(mult1E02,sum1E50);
          real sum1E52#1 = RAdd(mult1DB6,sum1E51);
          real sum1E53#1 = RAdd(mult1E46,sum1E52);
          real sum1E55#1 = RAdd(mult1D9C,mult1CEB);
          real sum1E57#1 = RAdd(mult1D9C,mult1CE5);
          real sum1E59#1 = RAdd(mult1D9C,mult1CE3);
          real coeff1E5B#19 = 0.256e3;
          real coeff1E5C#13 = -0.224e3;
          real mult1E5D#1 = RMul(coeff1D61,prod1CC5);
          real mult1E5E#1 = RMul(coeff1E5C,prod1CC4);
          real mult1E5F#1 = RMul(coeff1E5C,prod1CC0);
          real mult1E60#1 = RMul(coeff1E5B,prod1CBF);
          real mult1E61#3 = RMul(coeff1E5C,prod1CAE);
          real mult1E62#2 = RMul(coeff1E5B,prod1CAC);
          real mult1E63#2 = RMul(coeff1E5B,prod1CA9);
          real sum1E64#1 = RAdd(mult1E63,mult1CEB);
          real sum1E65#1 = RAdd(mult1E62,sum1E64);
          real sum1E66#1 = RAdd(mult1E61,sum1E65);
          real sum1E67#1 = RAdd(mult1DEA,sum1E66);
          real sum1E68#1 = RAdd(mult1E60,sum1E67);
          real sum1E69#1 = RAdd(mult1E5F,sum1E68);
          real sum1E6A#1 = RAdd(mult1D98,sum1E69);
          real sum1E6B#1 = RAdd(mult1E5E,sum1E6A);
          real sum1E6C#1 = RAdd(mult1E5D,sum1E6B);
          real coeff1E6E#9 = 0.160e3;
          real mult1E6F#9 = RMul(coeff1D2C,prod1CC5);
          real mult1E70#1 = RMul(coeff1E6E,prod1CC0);
          real mult1E71#6 = RMul(coeff1DAC,prod1CAE);
          real sum1E72#1 = RAdd(mult1E71,mult1D75);
          real sum1E73#1 = RAdd(mult1DC8,sum1E72);
          real sum1E74#1 = RAdd(mult1D6E,sum1E73);
          real sum1E75#1 = RAdd(mult1E70,sum1E74);
          real sum1E76#1 = RAdd(mult1DB4,sum1E75);
          real sum1E77#1 = RAdd(mult1E6F,sum1E76);
          real mult1E79#1 = RMul(coeff1E6E,prod1CC4);
          real sum1E7A#1 = RAdd(mult1E71,mult1DCB);
          real sum1E7B#1 = RAdd(mult1D6E,sum1E7A);
          real sum1E7C#1 = RAdd(mult1E00,sum1E7B);
          real sum1E7D#1 = RAdd(mult1D6C,sum1E7C);
          real sum1E7E#1 = RAdd(mult1E79,sum1E7D);
          real sum1E7F#1 = RAdd(mult1E6F,sum1E7E);
          real mult1E81#1 = RMul(coeff1D61,prod1CB5);
          real mult1E82#1 = RMul(coeff1E5C,prod1CB4);
          real mult1E83#1 = RMul(coeff1E5C,prod1CA2);
          real mult1E84#1 = RMul(coeff1E5B,prod1CA1);
          real mult1E85#2 = RMul(coeff1E5B,prod1C9C);
          real sum1E86#1 = RAdd(mult1E85,mult1E33);
          real sum1E87#1 = RAdd(mult1E84,sum1E86);
          real sum1E88#1 = RAdd(mult1E83,sum1E87);
          real sum1E89#1 = RAdd(mult1CE5,sum1E88);
          real sum1E8A#1 = RAdd(mult1E62,sum1E89);
          real sum1E8B#1 = RAdd(mult1E61,sum1E8A);
          real sum1E8C#1 = RAdd(mult1D9B,sum1E8B);
          real sum1E8D#1 = RAdd(mult1E82,sum1E8C);
          real sum1E8E#1 = RAdd(mult1E81,sum1E8D);
          real mult1E90#8 = RMul(coeff1D2C,prod1CB5);
          real mult1E91#1 = RMul(coeff1E6E,prod1CA2);
          real sum1E92#1 = RAdd(mult1D78,mult1E17);
          real sum1E93#1 = RAdd(mult1D77,sum1E92);
          real sum1E94#1 = RAdd(mult1E91,sum1E93);
          real sum1E95#1 = RAdd(mult1E71,sum1E94);
          real sum1E96#1 = RAdd(mult1DB7,sum1E95);
          real sum1E97#1 = RAdd(mult1E90,sum1E96);
          real mult1E99#1 = RMul(coeff1E6E,prod1CB4);
          real sum1E9A#1 = RAdd(mult1E48,mult1D77);
          real sum1E9B#1 = RAdd(mult1DCB,sum1E9A);
          real sum1E9C#1 = RAdd(mult1E71,sum1E9B);
          real sum1E9D#1 = RAdd(mult1D72,sum1E9C);
          real sum1E9E#1 = RAdd(mult1E99,sum1E9D);
          real sum1E9F#1 = RAdd(mult1E90,sum1E9E);
          real mult1EA1#1 = RMul(coeff1D61,prod1CB0);
          real mult1EA2#1 = RMul(coeff1E5C,prod1CAA);
          real mult1EA3#1 = RMul(coeff1E5C,prod1C9E);
          real mult1EA4#1 = RMul(coeff1E5B,prod1C99);
          real sum1EA5#1 = RAdd(mult1EA4,mult1E34);
          real sum1EA6#1 = RAdd(mult1E85,sum1EA5);
          real sum1EA7#1 = RAdd(mult1EA3,sum1EA6);
          real sum1EA8#1 = RAdd(mult1DEE,sum1EA7);
          real sum1EA9#1 = RAdd(mult1E63,sum1EA8);
          real sum1EAA#1 = RAdd(mult1EA2,sum1EA9);
          real sum1EAB#1 = RAdd(mult1CE3,sum1EAA);
          real sum1EAC#1 = RAdd(mult1E61,sum1EAB);
          real sum1EAD#1 = RAdd(mult1EA1,sum1EAC);
          real mult1EAF#8 = RMul(coeff1D2C,prod1CB0);
          real mult1EB0#1 = RMul(coeff1E6E,prod1C9E);
          real sum1EB1#1 = RAdd(mult1DD0,mult1E18);
          real sum1EB2#1 = RAdd(mult1D78,sum1EB1);
          real sum1EB3#1 = RAdd(mult1EB0,sum1EB2);
          real sum1EB4#1 = RAdd(mult1E03,sum1EB3);
          real sum1EB5#1 = RAdd(mult1E71,sum1EB4);
          real sum1EB6#1 = RAdd(mult1EAF,sum1EB5);
          real mult1EB8#1 = RMul(coeff1E6E,prod1CAA);
          real sum1EB9#1 = RAdd(mult1E49,mult1DD0);
          real sum1EBA#1 = RAdd(mult1DCE,sum1EB9);
          real sum1EBB#1 = RAdd(mult1D75,sum1EBA);
          real sum1EBC#1 = RAdd(mult1EB8,sum1EBB);
          real sum1EBD#1 = RAdd(mult1E71,sum1EBC);
          real sum1EBE#1 = RAdd(mult1EAF,sum1EBD);
          real mult1EC0#11 = RMul(coeff1E5B,prod1CAE);
          real sum1EC1#1 = RAdd(mult1DCD,mult1E15);
          real sum1EC2#1 = RAdd(mult1D74,sum1EC1);
          real sum1EC3#1 = RAdd(mult1EC0,sum1EC2);
          tensor[35] intermediateCons1EC5#1 = <tensor[35]>[sum1D12,sum1D1C,sum1D23,sum1D2A,sum1D31,sum1D39,sum1D3D,sum1D42,sum1D49,sum1D4D,sum1D52,sum1D59,sum1D5D,sum1D8C,sum1DAA,sum1DC1,sum1DE4,sum1DFC,sum1E0D,sum1E2C,sum1E44,sum1E53,sum1E55,sum1E57,sum1E59,sum1E6C,sum1E77,sum1E7F,sum1E8E,sum1E97,sum1E9F,sum1EAD,sum1EB6,sum1EBE,sum1EC3];
          real compositionl210B#1 = VDot<35>(dofs1BF2,intermediateCons1EC5);
          real mult2143#1 = RMul(coeff1CB6,prod1CCD);
          real mult2144#1 = RMul(coeff1CAF,prod1CCC);
          real mult2145#1 = RMul(coeff1C9D,prod1CCB);
          real mult2146#3 = RMul(coeff1C8D,prod1CCA);
          real mult2147#1 = RMul(coeff1CAF,prod1CC6);
          real mult2148#1 = RMul(coeff1CAD,prod1CC5);
          real mult2149#6 = RMul(coeff1C9A,prod1CC4);
          real mult214A#1 = RMul(coeff1C9D,prod1CC1);
          real mult214B#7 = RMul(coeff1C9A,prod1CC0);
          real mult214C#3 = RMul(coeff1C8D,prod1CBD);
          real mult214D#1 = RMul(coeff1CAF,prod1CB7);
          real mult214E#1 = RMul(coeff1CAD,prod1CB5);
          real mult214F#5 = RMul(coeff1C9A,prod1CB4);
          real mult2150#1 = RMul(coeff1CAD,prod1CB0);
          real mult2152#5 = RMul(coeff1C9A,prod1CAA);
          real mult2153#1 = RMul(coeff1C9D,prod1CA4);
          real mult2154#6 = RMul(coeff1C9A,prod1CA2);
          real mult2155#6 = RMul(coeff1C9A,prod1C9E);
          real mult2156#3 = RMul(coeff1C8D,prod1C95);
          real sum2157#1 = RAdd(mult2155,mult2156);
          real sum2158#1 = RAdd(mult2154,sum2157);
          real sum2159#1 = RAdd(mult2153,sum2158);
          real sum215A#1 = RAdd(mult2152,sum2159);
          real sum215B#1 = RAdd(mult1EC0,sum215A);
          real sum215C#1 = RAdd(mult2150,sum215B);
          real sum215D#1 = RAdd(mult214F,sum215C);
          real sum215E#1 = RAdd(mult214E,sum215D);
          real sum215F#1 = RAdd(mult214D,sum215E);
          real sum2160#1 = RAdd(mult214C,sum215F);
          real sum2161#1 = RAdd(mult214B,sum2160);
          real sum2162#1 = RAdd(mult214A,sum2161);
          real sum2163#1 = RAdd(mult2149,sum2162);
          real sum2164#1 = RAdd(mult2148,sum2163);
          real sum2165#1 = RAdd(mult2147,sum2164);
          real sum2166#1 = RAdd(mult2146,sum2165);
          real sum2167#1 = RAdd(mult2145,sum2166);
          real sum2168#1 = RAdd(mult2144,sum2167);
          real sum2169#3 = RAdd(mult2143,sum2168);
          real coeff216B#3 = -0.48e2;
          real coeff216C#3 = 0.146666666667e2;
          real mult216E#6 = RMul(coeff1D16,prod1CCD);
          real mult216F#1 = RMul(coeff216C,prod1CB7);
          real mult2170#1 = RMul(coeff216B,prod1CA4);
          real sum2171#1 = RAdd(mult2170,mult2156);
          real sum2172#1 = RAdd(mult216F,sum2171);
          real sum2173#1 = RAdd(mult216E,sum2172);
          real basisEval2175#60 = 0.e0;
          real coeff2176#3 = -0.64e2;
          real mult2179#2 = RMul(coeff2176,prod1CB5);
          real sum217A#1 = RAdd(mult2179,mult2154);
          real sum217B#1 = RAdd(mult1DB0,sum217A);
          real mult2180#2 = RMul(coeff1D33,prod1CCC);
          real mult2181#4 = RMul(coeff1D14,prod1CCB);
          real sum2183#3 = RAdd(mult1E90,mult214F);
          real sum2184#1 = RAdd(mult2181,sum2183);
          real sum2185#1 = RAdd(mult2180,sum2184);
          real mult2187#1 = RMul(coeff1D2C,prod1CCB);
          real sum2188#1 = RAdd(mult2187,mult2146);
          real sum2189#2 = RAdd(mult1DB0,sum2188);
          real mult218C#2 = RMul(coeff2176,prod1CB0);
          real sum218D#1 = RAdd(mult218C,mult2155);
          real sum218E#1 = RAdd(mult1DFE,sum218D);
          real mult2190#2 = RMul(coeff1D33,prod1CC6);
          real mult2191#4 = RMul(coeff1D14,prod1CC1);
          real sum2193#3 = RAdd(mult1EAF,mult2152);
          real sum2194#1 = RAdd(mult2191,sum2193);
          real sum2195#1 = RAdd(mult2190,sum2194);
          real mult2197#1 = RMul(coeff1D2C,prod1CC1);
          real sum2198#1 = RAdd(mult2197,mult214C);
          real sum2199#2 = RAdd(mult1DFE,sum2198);
          real mult219F#3 = RMul(coeff1D64,prod1CCC);
          real mult21A0#1 = RMul(coeff1D63,prod1CCB);
          real mult21A2#3 = RMul(coeff1D63,prod1CC5);
          real mult21A3#5 = RMul(coeff1D62,prod1CC4);
          real mult21A4#5 = RMul(coeff1D60,prod1CC0);
          real mult21A5#3 = RMul(coeff1D63,prod1CB5);
          real mult21A6#5 = RMul(coeff1D62,prod1CB4);
          real mult21A7#9 = RMul(coeff1D62,prod1CAE);
          real mult21A8#5 = RMul(coeff1D60,prod1CA2);
          real sum21A9#1 = RAdd(mult21A7,mult21A8);
          real sum21AA#1 = RAdd(mult21A6,sum21A9);
          real sum21AB#1 = RAdd(mult21A5,sum21AA);
          real sum21AC#1 = RAdd(mult21A4,sum21AB);
          real sum21AD#1 = RAdd(mult21A3,sum21AC);
          real sum21AE#1 = RAdd(mult21A2,sum21AD);
          real sum21AF#1 = RAdd(mult1D94,sum21AE);
          real sum21B0#1 = RAdd(mult21A0,sum21AF);
          real sum21B1#2 = RAdd(mult219F,sum21B0);
          real mult21B5#3 = RMul(coeff1D8F,prod1CCC);
          real mult21B6#1 = RMul(coeff1D8E,prod1CCB);
          real mult21B7#3 = RMul(coeff1C9A,prod1CCA);
          real sum21B9#1 = RAdd(mult2149,sum2183);
          real sum21BA#1 = RAdd(mult1E6F,sum21B9);
          real sum21BB#1 = RAdd(mult21B7,sum21BA);
          real sum21BC#1 = RAdd(mult21B6,sum21BB);
          real sum21BD#2 = RAdd(mult21B5,sum21BC);
          real mult21C2#3 = RMul(coeff1DAD,prod1CCC);
          real mult21C3#3 = RMul(coeff1DAC,prod1CCB);
          real mult21C4#3 = RMul(coeff1D5F,prod1CCA);
          real sum21C5#1 = RAdd(mult21C3,mult21C4);
          real sum21C6#2 = RAdd(mult21C2,sum21C5);
          real mult21C8#3 = RMul(coeff1D64,prod1CC6);
          real mult21C9#5 = RMul(coeff1D60,prod1CC4);
          real mult21CA#1 = RMul(coeff1D63,prod1CC1);
          real mult21CB#5 = RMul(coeff1D62,prod1CC0);
          real mult21CD#3 = RMul(coeff1D63,prod1CB0);
          real mult21CE#5 = RMul(coeff1D62,prod1CAA);
          real mult21CF#5 = RMul(coeff1D60,prod1C9E);
          real sum21D0#1 = RAdd(mult21CE,mult21CF);
          real sum21D1#1 = RAdd(mult21A7,sum21D0);
          real sum21D2#1 = RAdd(mult21CD,sum21D1);
          real sum21D3#1 = RAdd(mult1DE9,sum21D2);
          real sum21D4#1 = RAdd(mult21CB,sum21D3);
          real sum21D5#1 = RAdd(mult21CA,sum21D4);
          real sum21D6#1 = RAdd(mult21C9,sum21D5);
          real sum21D7#1 = RAdd(mult21A2,sum21D6);
          real sum21D8#2 = RAdd(mult21C8,sum21D7);
          real mult21DA#3 = RMul(coeff1D8F,prod1CC6);
          real mult21DB#1 = RMul(coeff1D8E,prod1CC1);
          real mult21DC#3 = RMul(coeff1C9A,prod1CBD);
          real sum21DD#1 = RAdd(mult21DC,sum2193);
          real sum21DE#1 = RAdd(mult214B,sum21DD);
          real sum21DF#1 = RAdd(mult21DB,sum21DE);
          real sum21E0#1 = RAdd(mult1E6F,sum21DF);
          real sum21E1#2 = RAdd(mult21DA,sum21E0);
          real mult21E3#3 = RMul(coeff1DAD,prod1CC6);
          real mult21E4#3 = RMul(coeff1DAC,prod1CC1);
          real mult21E5#3 = RMul(coeff1D5F,prod1CBD);
          real sum21E6#1 = RAdd(mult21E4,mult21E5);
          real sum21E7#2 = RAdd(mult21E3,sum21E6);
          real coeff21E9#3 = -0.170666666667e3;
          real coeff21EA#9 = -0.384e3;
          real coeff21EB#3 = 0.288e3;
          real coeff21EC#1 = -0.512e3;
          real coeff21ED#9 = 0.384e3;
          real coeff21EE#3 = -0.138666666667e3;
          real mult21F1#3 = RMul(coeff1D65,prod1CCD);
          real mult21F2#2 = RMul(coeff1D61,prod1CCB);
          real mult21F3#2 = RMul(coeff1D61,prod1CC1);
          real mult21F4#1 = RMul(coeff21EE,prod1CB7);
          real mult21F5#2 = RMul(coeff21ED,prod1CB5);
          real mult21F6#2 = RMul(coeff21ED,prod1CB0);
          real mult21F7#6 = RMul(coeff21EC,prod1CAE);
          real mult21F8#1 = RMul(coeff21EB,prod1CA4);
          real mult21F9#2 = RMul(coeff21EA,prod1CA2);
          real mult21FA#2 = RMul(coeff21EA,prod1C9E);
          real mult21FB#2 = RMul(coeff21E9,prod1C95);
          real sum21FC#1 = RAdd(mult21FA,mult21FB);
          real sum21FD#1 = RAdd(mult21F9,sum21FC);
          real sum21FE#1 = RAdd(mult21F8,sum21FD);
          real sum21FF#1 = RAdd(mult21CE,sum21FE);
          real sum2200#1 = RAdd(mult21F7,sum21FF);
          real sum2201#1 = RAdd(mult21F6,sum2200);
          real sum2202#1 = RAdd(mult21A6,sum2201);
          real sum2203#1 = RAdd(mult21F5,sum2202);
          real sum2204#1 = RAdd(mult21F4,sum2203);
          real sum2205#1 = RAdd(mult21E5,sum2204);
          real sum2206#1 = RAdd(mult21A4,sum2205);
          real sum2207#1 = RAdd(mult21F3,sum2206);
          real sum2208#1 = RAdd(mult21C9,sum2207);
          real sum2209#1 = RAdd(mult21A2,sum2208);
          real sum220A#1 = RAdd(mult21C8,sum2209);
          real sum220B#1 = RAdd(mult21C4,sum220A);
          real sum220C#1 = RAdd(mult21F2,sum220B);
          real sum220D#1 = RAdd(mult219F,sum220C);
          real sum220E#1 = RAdd(mult21F1,sum220D);
          real coeff2210#3 = -0.288e3;
          real coeff2211#3 = 0.152e3;
          real mult2213#3 = RMul(coeff1D91,prod1CCD);
          real mult2214#1 = RMul(coeff2211,prod1CB7);
          real mult2215#2 = RMul(coeff2210,prod1CB5);
          real mult2216#2 = RMul(coeff2210,prod1CB0);
          real mult2217#1 = RMul(coeff21EA,prod1CA4);
          real mult2218#2 = RMul(coeff21ED,prod1CA2);
          real mult2219#2 = RMul(coeff21ED,prod1C9E);
          real mult221A#1 = RMul(coeff1E5B,prod1C95);
          real sum221B#1 = RAdd(mult2219,mult221A);
          real sum221C#1 = RAdd(mult2218,sum221B);
          real sum221D#1 = RAdd(mult2217,sum221C);
          real sum221E#1 = RAdd(mult2152,sum221D);
          real sum221F#1 = RAdd(mult1EC0,sum221E);
          real sum2220#1 = RAdd(mult2216,sum221F);
          real sum2221#1 = RAdd(mult214F,sum2220);
          real sum2222#1 = RAdd(mult2215,sum2221);
          real sum2223#1 = RAdd(mult2214,sum2222);
          real sum2224#1 = RAdd(mult2191,sum2223);
          real sum2225#1 = RAdd(mult1E6F,sum2224);
          real sum2226#1 = RAdd(mult21DA,sum2225);
          real sum2227#1 = RAdd(mult2181,sum2226);
          real sum2228#1 = RAdd(mult21B5,sum2227);
          real sum2229#1 = RAdd(mult2213,sum2228);
          real coeff222B#3 = 0.224e3;
          real coeff222D#3 = -0.746666666667e2;
          real mult222E#3 = RMul(coeff1D2D,prod1CCD);
          real mult222F#1 = RMul(coeff222D,prod1CB7);
          real mult2230#4 = RMul(coeff1C96,prod1CB5);
          real mult2231#4 = RMul(coeff1C96,prod1CB0);
          real mult2232#1 = RMul(coeff222B,prod1CA4);
          real sum2233#1 = RAdd(mult21CF,mult21FB);
          real sum2234#1 = RAdd(mult21A8,sum2233);
          real sum2235#1 = RAdd(mult2232,sum2234);
          real sum2236#1 = RAdd(mult2231,sum2235);
          real sum2237#1 = RAdd(mult2230,sum2236);
          real sum2238#1 = RAdd(mult222F,sum2237);
          real sum2239#1 = RAdd(mult21E3,sum2238);
          real sum223A#1 = RAdd(mult21C2,sum2239);
          real sum223B#1 = RAdd(mult222E,sum223A);
          real sum223D#1 = RAdd(mult1E6F,mult1EC0);
          real sum223F#1 = RAdd(mult1E6F,mult214B);
          real sum2241#2 = RAdd(mult1E6F,mult2149);
          real mult2244#3 = RMul(coeff1E5C,prod1CC5);
          real mult2245#2 = RMul(coeff1E5B,prod1CC4);
          real mult2246#2 = RMul(coeff1E5B,prod1CC0);
          real sum2247#1 = RAdd(mult2246,mult1EC0);
          real sum2248#1 = RAdd(mult2245,sum2247);
          real sum2249#1 = RAdd(mult2244,sum2248);
          real mult224B#6 = RMul(coeff1DAC,prod1CC5);
          real sum224C#1 = RAdd(mult224B,mult21A4);
          real sum224E#1 = RAdd(mult224B,mult21C9);
          real coeff2250#7 = 0.512e3;
          real coeff2251#3 = -0.448e3;
          real mult2252#2 = RMul(coeff1D61,prod1CCC);
          real mult2253#2 = RMul(coeff1E5C,prod1CCB);
          real mult2254#2 = RMul(coeff2251,prod1CB5);
          real mult2255#1 = RMul(coeff2250,prod1CB4);
          real mult2256#6 = RMul(coeff2250,prod1CAE);
          real sum2257#1 = RAdd(mult2256,mult2218);
          real sum2258#1 = RAdd(mult2255,sum2257);
          real sum2259#1 = RAdd(mult2254,sum2258);
          real sum225A#1 = RAdd(mult214B,sum2259);
          real sum225B#1 = RAdd(mult2245,sum225A);
          real sum225C#1 = RAdd(mult2244,sum225B);
          real sum225D#1 = RAdd(mult21B7,sum225C);
          real sum225E#1 = RAdd(mult2253,sum225D);
          real sum225F#1 = RAdd(mult2252,sum225E);
          real coeff2261#3 = 0.320e3;
          real mult2262#4 = RMul(coeff1D2C,prod1CCC);
          real mult2263#2 = RMul(coeff2261,prod1CB5);
          real sum2264#1 = RAdd(mult21A7,mult21F9);
          real sum2265#1 = RAdd(mult21A6,sum2264);
          real sum2266#1 = RAdd(mult2263,sum2265);
          real sum2267#1 = RAdd(mult224B,sum2266);
          real sum2268#1 = RAdd(mult21C3,sum2267);
          real sum2269#1 = RAdd(mult2262,sum2268);
          real mult226C#2 = RMul(coeff1E6E,prod1CCB);
          real sum226D#1 = RAdd(mult2230,mult21A6);
          real sum226E#1 = RAdd(mult21C9,sum226D);
          real sum226F#1 = RAdd(mult224B,sum226E);
          real sum2270#1 = RAdd(mult1D94,sum226F);
          real sum2271#1 = RAdd(mult226C,sum2270);
          real sum2272#1 = RAdd(mult2262,sum2271);
          real mult2274#2 = RMul(coeff1D61,prod1CC6);
          real mult2275#2 = RMul(coeff1E5C,prod1CC1);
          real mult2276#2 = RMul(coeff2251,prod1CB0);
          real mult2277#1 = RMul(coeff2250,prod1CAA);
          real sum2278#1 = RAdd(mult2277,mult2219);
          real sum2279#1 = RAdd(mult2256,sum2278);
          real sum227A#1 = RAdd(mult2276,sum2279);
          real sum227B#1 = RAdd(mult21DC,sum227A);
          real sum227C#1 = RAdd(mult2246,sum227B);
          real sum227D#1 = RAdd(mult2275,sum227C);
          real sum227E#1 = RAdd(mult2149,sum227D);
          real sum227F#1 = RAdd(mult2244,sum227E);
          real sum2280#1 = RAdd(mult2274,sum227F);
          real mult2282#4 = RMul(coeff1D2C,prod1CC6);
          real mult2283#2 = RMul(coeff2261,prod1CB0);
          real sum2284#1 = RAdd(mult21CE,mult21FA);
          real sum2285#1 = RAdd(mult21A7,sum2284);
          real sum2286#1 = RAdd(mult2283,sum2285);
          real sum2287#1 = RAdd(mult21E4,sum2286);
          real sum2288#1 = RAdd(mult224B,sum2287);
          real sum2289#1 = RAdd(mult2282,sum2288);
          real mult228B#2 = RMul(coeff1E6E,prod1CC1);
          real sum228C#1 = RAdd(mult2231,mult21CE);
          real sum228D#1 = RAdd(mult1DE9,sum228C);
          real sum228E#1 = RAdd(mult21A4,sum228D);
          real sum228F#1 = RAdd(mult228B,sum228E);
          real sum2290#1 = RAdd(mult224B,sum228F);
          real sum2291#1 = RAdd(mult2282,sum2290);
          real mult2293#1 = RMul(coeff1E5B,prod1CC5);
          real sum2294#1 = RAdd(mult21CB,mult21F7);
          real sum2295#1 = RAdd(mult21A3,sum2294);
          real sum2296#1 = RAdd(mult2293,sum2295);
          real mult2299#1 = RMul(coeff216C,prod1CC6);
          real mult229A#1 = RMul(coeff216B,prod1CC1);
          real sum229B#1 = RAdd(mult229A,mult214C);
          real sum229C#1 = RAdd(mult2299,sum229B);
          real sum229D#1 = RAdd(mult216E,sum229C);
          real mult229F#2 = RMul(coeff2176,prod1CC5);
          real sum22A0#1 = RAdd(mult229F,mult214B);
          real sum22A1#1 = RAdd(mult1DB0,sum22A0);
          real sum22A3#1 = RAdd(mult2181,sum2241);
          real sum22A4#1 = RAdd(mult2180,sum22A3);
          real mult22A8#1 = RMul(coeff1D2C,prod1CA4);
          real sum22A9#1 = RAdd(mult22A8,mult2156);
          real sum22AA#2 = RAdd(mult1E46,sum22A9);
          real mult22AC#2 = RMul(coeff1D33,prod1CB7);
          real mult22AD#2 = RMul(coeff1D14,prod1CA4);
          real sum22AE#2 = RAdd(mult22AD,mult2155);
          real sum22AF#1 = RAdd(mult1EAF,sum22AE);
          real sum22B0#1 = RAdd(mult22AC,sum22AF);
          real sum22B2#1 = RAdd(mult218C,mult2152);
          real sum22B3#1 = RAdd(mult1E46,sum22B2);
          real mult22B8#1 = RMul(coeff21EE,prod1CC6);
          real mult22B9#2 = RMul(coeff21ED,prod1CC5);
          real mult22BA#1 = RMul(coeff21EB,prod1CC1);
          real mult22BB#2 = RMul(coeff21EA,prod1CC0);
          real mult22BC#2 = RMul(coeff21E9,prod1CBD);
          real mult22BD#3 = RMul(coeff1D64,prod1CB7);
          real mult22BE#4 = RMul(coeff1D60,prod1CB4);
          real mult22BF#2 = RMul(coeff21EA,prod1CAA);
          real mult22C0#2 = RMul(coeff1D61,prod1CA4);
          real mult22C1#4 = RMul(coeff1D62,prod1C9E);
          real mult22C2#3 = RMul(coeff1D5F,prod1C95);
          real sum22C3#1 = RAdd(mult22C1,mult22C2);
          real sum22C4#1 = RAdd(mult21A8,sum22C3);
          real sum22C5#1 = RAdd(mult22C0,sum22C4);
          real sum22C6#1 = RAdd(mult22BF,sum22C5);
          real sum22C7#1 = RAdd(mult21F7,sum22C6);
          real sum22C8#1 = RAdd(mult21F6,sum22C7);
          real sum22C9#1 = RAdd(mult22BE,sum22C8);
          real sum22CA#1 = RAdd(mult21A5,sum22C9);
          real sum22CB#1 = RAdd(mult22BD,sum22CA);
          real sum22CC#1 = RAdd(mult22BC,sum22CB);
          real sum22CD#1 = RAdd(mult22BB,sum22CC);
          real sum22CE#1 = RAdd(mult22BA,sum22CD);
          real sum22CF#1 = RAdd(mult21A3,sum22CE);
          real sum22D0#1 = RAdd(mult22B9,sum22CF);
          real sum22D1#1 = RAdd(mult22B8,sum22D0);
          real sum22D2#1 = RAdd(mult21C4,sum22D1);
          real sum22D3#1 = RAdd(mult21F2,sum22D2);
          real sum22D4#1 = RAdd(mult219F,sum22D3);
          real sum22D5#1 = RAdd(mult21F1,sum22D4);
          real mult22D7#1 = RMul(coeff2211,prod1CC6);
          real mult22D8#2 = RMul(coeff2210,prod1CC5);
          real mult22D9#1 = RMul(coeff21EA,prod1CC1);
          real mult22DA#2 = RMul(coeff21ED,prod1CC0);
          real mult22DB#1 = RMul(coeff1E5B,prod1CBD);
          real mult22DC#3 = RMul(coeff1D8F,prod1CB7);
          real mult22DD#2 = RMul(coeff21ED,prod1CAA);
          real sum22DE#1 = RAdd(mult22DD,sum22AE);
          real sum22DF#1 = RAdd(mult1EC0,sum22DE);
          real sum22E0#1 = RAdd(mult2216,sum22DF);
          real sum22E1#1 = RAdd(mult1E90,sum22E0);
          real sum22E2#1 = RAdd(mult22DC,sum22E1);
          real sum22E3#1 = RAdd(mult22DB,sum22E2);
          real sum22E4#1 = RAdd(mult22DA,sum22E3);
          real sum22E5#1 = RAdd(mult22D9,sum22E4);
          real sum22E6#1 = RAdd(mult2149,sum22E5);
          real sum22E7#1 = RAdd(mult22D8,sum22E6);
          real sum22E8#1 = RAdd(mult22D7,sum22E7);
          real sum22E9#1 = RAdd(mult2181,sum22E8);
          real sum22EA#1 = RAdd(mult21B5,sum22E9);
          real sum22EB#1 = RAdd(mult2213,sum22EA);
          real mult22ED#1 = RMul(coeff222D,prod1CC6);
          real mult22EE#4 = RMul(coeff1C96,prod1CC5);
          real mult22EF#1 = RMul(coeff222B,prod1CC1);
          real mult22F0#3 = RMul(coeff1DAD,prod1CB7);
          real mult22F1#4 = RMul(coeff1D60,prod1CAA);
          real sum22F2#1 = RAdd(mult2231,mult22F1);
          real sum22F3#1 = RAdd(mult22F0,sum22F2);
          real sum22F4#1 = RAdd(mult22BC,sum22F3);
          real sum22F5#1 = RAdd(mult21A4,sum22F4);
          real sum22F6#1 = RAdd(mult22EF,sum22F5);
          real sum22F7#1 = RAdd(mult22EE,sum22F6);
          real sum22F8#1 = RAdd(mult22ED,sum22F7);
          real sum22F9#1 = RAdd(mult21C2,sum22F8);
          real sum22FA#1 = RAdd(mult222E,sum22F9);
          real mult22FC#1 = RMul(coeff1D63,prod1CA4);
          real mult22FD#5 = RMul(coeff1D62,prod1CA2);
          real sum22FF#2 = RAdd(mult22C1,mult1E32);
          real sum2300#1 = RAdd(mult22FD,sum22FF);
          real sum2301#1 = RAdd(mult22FC,sum2300);
          real sum2302#1 = RAdd(mult22F1,sum2301);
          real sum2303#1 = RAdd(mult21A7,sum2302);
          real sum2304#1 = RAdd(mult21CD,sum2303);
          real sum2305#1 = RAdd(mult22BE,sum2304);
          real sum2306#1 = RAdd(mult21A5,sum2305);
          real sum2307#2 = RAdd(mult22BD,sum2306);
          real mult2309#1 = RMul(coeff1D8E,prod1CA4);
          real mult230A#3 = RMul(coeff1C9A,prod1C95);
          real sum230B#1 = RAdd(mult2155,mult230A);
          real sum230C#1 = RAdd(mult2154,sum230B);
          real sum230D#1 = RAdd(mult2309,sum230C);
          real sum230E#1 = RAdd(mult1EAF,sum230D);
          real sum230F#1 = RAdd(mult1E90,sum230E);
          real sum2310#2 = RAdd(mult22DC,sum230F);
          real mult2312#3 = RMul(coeff1DAC,prod1CA4);
          real sum2313#1 = RAdd(mult2312,mult22C2);
          real sum2314#2 = RAdd(mult22F0,sum2313);
          real sum2316#1 = RAdd(mult1E90,mult2154);
          real sum2318#1 = RAdd(mult1E90,mult1EC0);
          real mult231B#2 = RMul(coeff2251,prod1CC5);
          real mult231C#1 = RMul(coeff2250,prod1CC4);
          real mult231D#3 = RMul(coeff1E5C,prod1CB5);
          real mult231E#2 = RMul(coeff1E5B,prod1CB4);
          real sum231F#1 = RAdd(mult2256,mult2154);
          real sum2320#1 = RAdd(mult231E,sum231F);
          real sum2321#1 = RAdd(mult231D,sum2320);
          real sum2322#1 = RAdd(mult22DA,sum2321);
          real sum2323#1 = RAdd(mult231C,sum2322);
          real sum2324#1 = RAdd(mult231B,sum2323);
          real sum2325#1 = RAdd(mult21B7,sum2324);
          real sum2326#1 = RAdd(mult2253,sum2325);
          real sum2327#1 = RAdd(mult2252,sum2326);
          real mult2329#2 = RMul(coeff2261,prod1CC5);
          real mult232A#5 = RMul(coeff1DAC,prod1CB5);
          real sum232B#1 = RAdd(mult232A,mult21A7);
          real sum232C#1 = RAdd(mult22BB,sum232B);
          real sum232D#1 = RAdd(mult21A3,sum232C);
          real sum232E#1 = RAdd(mult2329,sum232D);
          real sum232F#1 = RAdd(mult21C3,sum232E);
          real sum2330#1 = RAdd(mult2262,sum232F);
          real sum2332#2 = RAdd(mult232A,mult22BE);
          real sum2333#1 = RAdd(mult21A3,sum2332);
          real sum2334#1 = RAdd(mult22EE,sum2333);
          real sum2335#1 = RAdd(mult1D94,sum2334);
          real sum2336#1 = RAdd(mult226C,sum2335);
          real sum2337#1 = RAdd(mult2262,sum2336);
          real mult2339#2 = RMul(coeff1E5B,prod1CA2);
          real sum233A#1 = RAdd(mult1EC0,mult2339);
          real sum233B#1 = RAdd(mult231E,sum233A);
          real sum233C#1 = RAdd(mult231D,sum233B);
          real sum233E#1 = RAdd(mult232A,mult21A8);
          real mult2341#2 = RMul(coeff1D61,prod1CB7);
          real mult2342#2 = RMul(coeff1E5C,prod1CA4);
          real mult2343#1 = RMul(coeff2250,prod1C9E);
          real sum2344#1 = RAdd(mult2343,mult230A);
          real sum2345#1 = RAdd(mult2339,sum2344);
          real sum2346#1 = RAdd(mult2342,sum2345);
          real sum2347#1 = RAdd(mult22DD,sum2346);
          real sum2348#1 = RAdd(mult2256,sum2347);
          real sum2349#1 = RAdd(mult2276,sum2348);
          real sum234A#1 = RAdd(mult214F,sum2349);
          real sum234B#1 = RAdd(mult231D,sum234A);
          real sum234C#1 = RAdd(mult2341,sum234B);
          real mult234E#4 = RMul(coeff1D2C,prod1CB7);
          real mult234F#2 = RMul(coeff1E6E,prod1CA4);
          real sum2350#1 = RAdd(mult21A8,sum22FF);
          real sum2351#1 = RAdd(mult234F,sum2350);
          real sum2352#1 = RAdd(mult2231,sum2351);
          real sum2353#1 = RAdd(mult232A,sum2352);
          real sum2354#1 = RAdd(mult234E,sum2353);
          real sum2356#1 = RAdd(mult2312,mult22C1);
          real sum2357#1 = RAdd(mult22BF,sum2356);
          real sum2358#1 = RAdd(mult21A7,sum2357);
          real sum2359#1 = RAdd(mult2283,sum2358);
          real sum235A#1 = RAdd(mult232A,sum2359);
          real sum235B#1 = RAdd(mult234E,sum235A);
          real mult235D#1 = RMul(coeff1E5B,prod1CB5);
          real sum235E#1 = RAdd(mult21F7,mult22FD);
          real sum235F#1 = RAdd(mult21A6,sum235E);
          real sum2360#1 = RAdd(mult235D,sum235F);
          real mult2363#1 = RMul(coeff216C,prod1CCC);
          real mult2364#1 = RMul(coeff216B,prod1CCB);
          real sum2365#1 = RAdd(mult2364,mult2146);
          real sum2366#1 = RAdd(mult2363,sum2365);
          real sum2367#1 = RAdd(mult216E,sum2366);
          real sum236A#1 = RAdd(mult2191,mult214B);
          real sum236B#1 = RAdd(mult1E6F,sum236A);
          real sum236C#1 = RAdd(mult2190,sum236B);
          real sum236E#1 = RAdd(mult229F,mult2149);
          real sum236F#1 = RAdd(mult1DFE,sum236E);
          real sum2372#2 = RAdd(mult22AD,mult2154);
          real sum2373#1 = RAdd(mult1E90,sum2372);
          real sum2374#1 = RAdd(mult22AC,sum2373);
          real sum2376#1 = RAdd(mult2179,mult214F);
          real sum2377#1 = RAdd(mult1E46,sum2376);
          real mult2379#1 = RMul(coeff21EE,prod1CCC);
          real mult237A#1 = RMul(coeff21EB,prod1CCB);
          real mult237B#2 = RMul(coeff21E9,prod1CCA);
          real mult237C#2 = RMul(coeff21EA,prod1CC4);
          real mult237D#2 = RMul(coeff21EA,prod1CB4);
          real sum237E#1 = RAdd(mult21CF,mult22C2);
          real sum237F#1 = RAdd(mult22FD,sum237E);
          real sum2380#1 = RAdd(mult22C0,sum237F);
          real sum2381#1 = RAdd(mult22F1,sum2380);
          real sum2382#1 = RAdd(mult21F7,sum2381);
          real sum2383#1 = RAdd(mult21CD,sum2382);
          real sum2384#1 = RAdd(mult237D,sum2383);
          real sum2385#1 = RAdd(mult21F5,sum2384);
          real sum2386#1 = RAdd(mult22BD,sum2385);
          real sum2387#1 = RAdd(mult21E5,sum2386);
          real sum2388#1 = RAdd(mult21CB,sum2387);
          real sum2389#1 = RAdd(mult21F3,sum2388);
          real sum238A#1 = RAdd(mult237C,sum2389);
          real sum238B#1 = RAdd(mult22B9,sum238A);
          real sum238C#1 = RAdd(mult21C8,sum238B);
          real sum238D#1 = RAdd(mult237B,sum238C);
          real sum238E#1 = RAdd(mult237A,sum238D);
          real sum238F#1 = RAdd(mult2379,sum238E);
          real sum2390#1 = RAdd(mult21F1,sum238F);
          real mult2392#1 = RMul(coeff2211,prod1CCC);
          real mult2393#1 = RMul(coeff21EA,prod1CCB);
          real mult2394#1 = RMul(coeff1E5B,prod1CCA);
          real mult2395#2 = RMul(coeff21ED,prod1CC4);
          real mult2396#2 = RMul(coeff21ED,prod1CB4);
          real sum2397#1 = RAdd(mult1EC0,sum2372);
          real sum2398#1 = RAdd(mult1EAF,sum2397);
          real sum2399#1 = RAdd(mult2396,sum2398);
          real sum239A#1 = RAdd(mult2215,sum2399);
          real sum239B#1 = RAdd(mult22DC,sum239A);
          real sum239C#1 = RAdd(mult214B,sum239B);
          real sum239D#1 = RAdd(mult2191,sum239C);
          real sum239E#1 = RAdd(mult2395,sum239D);
          real sum239F#1 = RAdd(mult22D8,sum239E);
          real sum23A0#1 = RAdd(mult21DA,sum239F);
          real sum23A1#1 = RAdd(mult2394,sum23A0);
          real sum23A2#1 = RAdd(mult2393,sum23A1);
          real sum23A3#1 = RAdd(mult2392,sum23A2);
          real sum23A4#1 = RAdd(mult2213,sum23A3);
          real mult23A6#1 = RMul(coeff222D,prod1CCC);
          real mult23A7#1 = RMul(coeff222B,prod1CCB);
          real sum23A8#1 = RAdd(mult2230,mult22BE);
          real sum23A9#1 = RAdd(mult22F0,sum23A8);
          real sum23AA#1 = RAdd(mult21C9,sum23A9);
          real sum23AB#1 = RAdd(mult22EE,sum23AA);
          real sum23AC#1 = RAdd(mult21E3,sum23AB);
          real sum23AD#1 = RAdd(mult237B,sum23AC);
          real sum23AE#1 = RAdd(mult23A7,sum23AD);
          real sum23AF#1 = RAdd(mult23A6,sum23AE);
          real sum23B0#1 = RAdd(mult222E,sum23AF);
          real sum23B8#1 = RAdd(mult1EAF,mult2155);
          real sum23BB#1 = RAdd(mult1EAF,mult1EC0);
          real mult23BD#1 = RMul(coeff2250,prod1CC0);
          real mult23BE#3 = RMul(coeff1E5C,prod1CB0);
          real mult23BF#2 = RMul(coeff1E5B,prod1CAA);
          real sum23C0#1 = RAdd(mult23BF,mult2155);
          real sum23C1#1 = RAdd(mult2256,sum23C0);
          real sum23C2#1 = RAdd(mult23BE,sum23C1);
          real sum23C3#1 = RAdd(mult21DC,sum23C2);
          real sum23C4#1 = RAdd(mult23BD,sum23C3);
          real sum23C5#1 = RAdd(mult2275,sum23C4);
          real sum23C6#1 = RAdd(mult2395,sum23C5);
          real sum23C7#1 = RAdd(mult231B,sum23C6);
          real sum23C8#1 = RAdd(mult2274,sum23C7);
          real mult23CA#5 = RMul(coeff1DAC,prod1CB0);
          real sum23CB#2 = RAdd(mult23CA,mult22F1);
          real sum23CC#1 = RAdd(mult1DE9,sum23CB);
          real sum23CD#1 = RAdd(mult21CB,sum23CC);
          real sum23CE#1 = RAdd(mult228B,sum23CD);
          real sum23CF#1 = RAdd(mult22EE,sum23CE);
          real sum23D0#1 = RAdd(mult2282,sum23CF);
          real sum23D2#1 = RAdd(mult23CA,mult21A7);
          real sum23D3#1 = RAdd(mult21CB,sum23D2);
          real sum23D4#1 = RAdd(mult21E4,sum23D3);
          real sum23D5#1 = RAdd(mult237C,sum23D4);
          real sum23D6#1 = RAdd(mult2329,sum23D5);
          real sum23D7#1 = RAdd(mult2282,sum23D6);
          real mult23D9#1 = RMul(coeff2250,prod1CA2);
          real mult23DA#2 = RMul(coeff1E5B,prod1C9E);
          real sum23DB#1 = RAdd(mult23DA,mult230A);
          real sum23DC#1 = RAdd(mult23D9,sum23DB);
          real sum23DD#1 = RAdd(mult2342,sum23DC);
          real sum23DE#1 = RAdd(mult2152,sum23DD);
          real sum23DF#1 = RAdd(mult2256,sum23DE);
          real sum23E0#1 = RAdd(mult23BE,sum23DF);
          real sum23E1#1 = RAdd(mult2396,sum23E0);
          real sum23E2#1 = RAdd(mult2254,sum23E1);
          real sum23E3#1 = RAdd(mult2341,sum23E2);
          real sum23E5#1 = RAdd(mult21CF,mult1E32);
          real sum23E6#1 = RAdd(mult22FD,sum23E5);
          real sum23E7#1 = RAdd(mult234F,sum23E6);
          real sum23E8#1 = RAdd(mult23CA,sum23E7);
          real sum23E9#1 = RAdd(mult2230,sum23E8);
          real sum23EA#1 = RAdd(mult234E,sum23E9);
          real sum23EC#1 = RAdd(mult2312,mult22FD);
          real sum23ED#1 = RAdd(mult21A7,sum23EC);
          real sum23EE#1 = RAdd(mult23CA,sum23ED);
          real sum23EF#1 = RAdd(mult237D,sum23EE);
          real sum23F0#1 = RAdd(mult2263,sum23EF);
          real sum23F1#1 = RAdd(mult234E,sum23F0);
          real sum23F3#1 = RAdd(mult23BF,mult23DA);
          real sum23F4#1 = RAdd(mult1EC0,sum23F3);
          real sum23F5#1 = RAdd(mult23BE,sum23F4);
          real sum23F7#1 = RAdd(mult23CA,mult21CF);
          real mult23FA#1 = RMul(coeff1E5B,prod1CB0);
          real sum23FB#1 = RAdd(mult21CE,mult22C1);
          real sum23FC#1 = RAdd(mult21F7,sum23FB);
          real sum23FD#1 = RAdd(mult23FA,sum23FC);
          tensor[35] intermediateCons23FF#1 = <tensor[35]>[sum2169,sum2173,basisEval2175,basisEval2175,basisEval2175,basisEval2175,basisEval2175,sum217B,sum2185,sum2189,sum218E,sum2195,sum2199,sum21B1,sum21BD,sum21C6,sum21D8,sum21E1,sum21E7,sum220E,sum2229,sum223B,sum223D,sum223F,sum2241,sum2249,sum224C,sum224E,sum225F,sum2269,sum2272,sum2280,sum2289,sum2291,sum2296];
          tensor[35] intermediateCons2400#1 = <tensor[35]>[sum2169,basisEval2175,sum229D,basisEval2175,sum22A1,sum22A4,sum2189,basisEval2175,basisEval2175,basisEval2175,sum22AA,sum22B0,sum22B3,sum21B1,sum21BD,sum21C6,sum22D5,sum22EB,sum22FA,sum2307,sum2310,sum2314,sum2316,sum2318,sum2183,sum2327,sum2330,sum2337,sum233C,sum233E,sum2332,sum234C,sum2354,sum235B,sum2360];
          tensor[35] intermediateCons2401#1 = <tensor[35]>[sum2169,basisEval2175,basisEval2175,sum2367,sum2199,sum236C,sum236F,sum22AA,sum2374,sum2377,basisEval2175,basisEval2175,basisEval2175,sum2390,sum23A4,sum23B0,sum21D8,sum21E1,sum21E7,sum2307,sum2310,sum2314,sum23B8,sum2193,sum23BB,sum23C8,sum23D0,sum23D7,sum23E3,sum23EA,sum23F1,sum23F5,sum23F7,sum23CB,sum23FD];
          real vdot26F8#3 = VDot<35>(dofs1BF2,intermediateCons23FF);
          real vdot26FA#3 = VDot<35>(dofs1BF2,intermediateCons2400);
          real vdot26FC#3 = VDot<35>(dofs1BF2,intermediateCons2401);
          int mulRes2707#4 = IMul(intPos1A87,ilit1A9A);
          int idx270A#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(_t1316,mulRes2707);
          int addRes270C#1 = IAdd(mulRes2707,ilit1A91);
          int idx270D#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(_t1316,addRes270C);
          int addRes270F#1 = IAdd(mulRes2707,ilit1A94);
          int idx2710#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(_t1316,addRes270F);
          int addRes2712#1 = IAdd(mulRes2707,ilit1A97);
          int idx2713#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(_t1316,addRes2712);
          int mulRes2729#3 = IMul(ilit1A97,idx270A);
          int addRes272C#1 = IAdd(ilit1A91,mulRes2729);
          int addRes272E#1 = IAdd(ilit1A94,mulRes2729);
          real dof_load272F#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1316,mulRes2729);
          real dof_load2730#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1316,addRes272C);
          real dof_load2731#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1316,addRes272E);
          int mulRes2734#3 = IMul(ilit1A97,idx270D);
          int addRes2736#1 = IAdd(ilit1A91,mulRes2734);
          int addRes2737#1 = IAdd(ilit1A94,mulRes2734);
          real dof_load2738#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1316,mulRes2734);
          real dof_load2739#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1316,addRes2736);
          real dof_load273A#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1316,addRes2737);
          int mulRes273D#3 = IMul(ilit1A97,idx2710);
          int addRes273F#1 = IAdd(ilit1A91,mulRes273D);
          int addRes2740#1 = IAdd(ilit1A94,mulRes273D);
          real dof_load2741#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1316,mulRes273D);
          real dof_load2742#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1316,addRes273F);
          real dof_load2743#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1316,addRes2740);
          int mulRes2746#3 = IMul(ilit1A97,idx2713);
          int addRes2748#1 = IAdd(ilit1A91,mulRes2746);
          int addRes2749#1 = IAdd(ilit1A94,mulRes2746);
          real dof_load274A#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1316,mulRes2746);
          real dof_load274B#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1316,addRes2748);
          real dof_load274C#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1316,addRes2749);
          real r279A#2 = RMul(dof_load272F,mult216E);
          real r279D#1 = RMul(dof_load2738,mult1CCE);
          real r27A0#2 = RMul(dof_load2741,basisEval2175);
          real r27A3#2 = RMul(dof_load274A,basisEval2175);
          real r27A4#1 = RAdd(r279A,r279D);
          real r27A5#1 = RAdd(r27A4,r27A0);
          real r27A6#13 = RAdd(r27A5,r27A3);
          real r27AA#1 = RMul(dof_load2738,basisEval2175);
          real r27AC#1 = RMul(dof_load2741,mult1CCE);
          real r27AF#2 = RAdd(r279A,r27AA);
          real r27B0#1 = RAdd(r27AF,r27AC);
          real r27B1#13 = RAdd(r27B0,r27A3);
          real r27B9#1 = RMul(dof_load274A,mult1CCE);
          real r27BB#1 = RAdd(r27AF,r27A0);
          real r27BC#12 = RAdd(r27BB,r27B9);
          real r27BF#2 = RMul(dof_load2730,mult216E);
          real r27C1#1 = RMul(dof_load2739,mult1CCE);
          real r27C3#2 = RMul(dof_load2742,basisEval2175);
          real r27C5#2 = RMul(dof_load274B,basisEval2175);
          real r27C6#1 = RAdd(r27BF,r27C1);
          real r27C7#1 = RAdd(r27C6,r27C3);
          real r27C8#13 = RAdd(r27C7,r27C5);
          real r27CA#1 = RMul(dof_load2739,basisEval2175);
          real r27CB#1 = RMul(dof_load2742,mult1CCE);
          real r27CD#2 = RAdd(r27BF,r27CA);
          real r27CE#1 = RAdd(r27CD,r27CB);
          real r27CF#13 = RAdd(r27CE,r27C5);
          real r27D3#1 = RMul(dof_load274B,mult1CCE);
          real r27D5#1 = RAdd(r27CD,r27C3);
          real r27D6#12 = RAdd(r27D5,r27D3);
          real r27D9#2 = RMul(dof_load2731,mult216E);
          real r27DB#1 = RMul(dof_load273A,mult1CCE);
          real r27DD#2 = RMul(dof_load2743,basisEval2175);
          real r27DF#2 = RMul(dof_load274C,basisEval2175);
          real r27E0#1 = RAdd(r27D9,r27DB);
          real r27E1#1 = RAdd(r27E0,r27DD);
          real r27E2#13 = RAdd(r27E1,r27DF);
          real r27E4#1 = RMul(dof_load273A,basisEval2175);
          real r27E5#1 = RMul(dof_load2743,mult1CCE);
          real r27E7#2 = RAdd(r27D9,r27E4);
          real r27E8#1 = RAdd(r27E7,r27E5);
          real r27E9#13 = RAdd(r27E8,r27DF);
          real r27ED#1 = RMul(dof_load274C,mult1CCE);
          real r27EF#1 = RAdd(r27E7,r27DD);
          real r27F0#12 = RAdd(r27EF,r27ED);
          real r2851#3 = RMul(basisEval2175,r27A6);
          real r2853#3 = RMul(basisEval2175,r27C8);
          real r2855#5 = RMul(basisEval2175,r27E2);
          real r2856#3 = RAdd(r2851,r2853);
          real r2857#9 = RAdd(r2856,r2855);
          real r2859#3 = RMul(basisEval2175,r27B1);
          real r285B#3 = RMul(basisEval2175,r27CF);
          real r285D#5 = RMul(basisEval2175,r27E9);
          real r285E#3 = RAdd(r2859,r285B);
          real r285F#9 = RAdd(r285E,r285D);
          real r2861#3 = RMul(basisEval2175,r27BC);
          real r2863#3 = RMul(basisEval2175,r27D6);
          real r2865#5 = RMul(basisEval2175,r27F0);
          real r2866#3 = RAdd(r2861,r2863);
          real r2867#12 = RAdd(r2866,r2865);
          real r286A#1 = RMul(coeff1D16,r27E2);
          real r286B#3 = RAdd(r2856,r286A);
          real r286C#1 = RMul(coeff1D16,r27E9);
          real r286D#3 = RAdd(r285E,r286C);
          real r286E#1 = RMul(coeff1D16,r27F0);
          real r286F#4 = RAdd(r2866,r286E);
          real r2872#1 = RMul(one1C8A,r27C8);
          real r2873#1 = RAdd(r2851,r2872);
          real r2874#3 = RAdd(r2873,r2855);
          real r2875#1 = RMul(one1C8A,r27CF);
          real r2876#1 = RAdd(r2859,r2875);
          real r2877#3 = RAdd(r2876,r285D);
          real r2878#1 = RMul(one1C8A,r27D6);
          real r2879#1 = RAdd(r2861,r2878);
          real r287A#4 = RAdd(r2879,r2865);
          real r287D#1 = RMul(one1C8A,r27E2);
          real r287E#3 = RAdd(r2856,r287D);
          real r287F#1 = RMul(one1C8A,r27E9);
          real r2880#3 = RAdd(r285E,r287F);
          real r2881#1 = RMul(one1C8A,r27F0);
          real r2882#4 = RAdd(r2866,r2881);
          real r2884#1 = RMul(coeff1D16,r27A6);
          real r2885#1 = RAdd(r2884,r2853);
          real r2886#3 = RAdd(r2885,r2855);
          real r2887#1 = RMul(coeff1D16,r27B1);
          real r2888#1 = RAdd(r2887,r285B);
          real r2889#3 = RAdd(r2888,r285D);
          real r288A#1 = RMul(coeff1D16,r27BC);
          real r288B#1 = RAdd(r288A,r2863);
          real r288C#4 = RAdd(r288B,r2865);
          real r288F#1 = RMul(coeff1D16,r27C8);
          real r2890#1 = RAdd(r2851,r288F);
          real r2891#3 = RAdd(r2890,r2855);
          real r2892#1 = RMul(coeff1D16,r27CF);
          real r2893#1 = RAdd(r2859,r2892);
          real r2894#3 = RAdd(r2893,r285D);
          real r2895#1 = RMul(coeff1D16,r27D6);
          real r2896#1 = RAdd(r2861,r2895);
          real r2897#4 = RAdd(r2896,r2865);
          real r2899#1 = RMul(one1C8A,r27A6);
          real r289A#1 = RAdd(r2899,r2853);
          real r289B#3 = RAdd(r289A,r2855);
          real r289C#1 = RMul(one1C8A,r27B1);
          real r289D#1 = RAdd(r289C,r285B);
          real r289E#3 = RAdd(r289D,r285D);
          real r289F#1 = RMul(one1C8A,r27BC);
          real r28A0#1 = RAdd(r289F,r2863);
          real r28A1#4 = RAdd(r28A0,r2865);
          real r28FE#1 = RMul(r27A6,r2857);
          real r2901#1 = RMul(r27C8,r287E);
          real r2904#1 = RMul(r27E2,r2891);
          real r2905#1 = RAdd(r28FE,r2901);
          real r2906#1 = RAdd(r2905,r2904);
          real r2908#1 = RMul(r27A6,r285F);
          real r290A#1 = RMul(r27C8,r2880);
          real r290C#1 = RMul(r27E2,r2894);
          real r290D#1 = RAdd(r2908,r290A);
          real r290E#2 = RAdd(r290D,r290C);
          real r2910#1 = RMul(r27A6,r2867);
          real r2912#1 = RMul(r27C8,r2882);
          real r2914#1 = RMul(r27E2,r2897);
          real r2915#1 = RAdd(r2910,r2912);
          real r2916#2 = RAdd(r2915,r2914);
          real r2919#1 = RMul(r27A6,r286B);
          real r291B#1 = RMul(r27C8,r2857);
          real r291D#1 = RMul(r27E2,r289B);
          real r291E#1 = RAdd(r2919,r291B);
          real r291F#1 = RAdd(r291E,r291D);
          real r2921#1 = RMul(r27A6,r286D);
          real r2923#1 = RMul(r27C8,r285F);
          real r2925#1 = RMul(r27E2,r289E);
          real r2926#1 = RAdd(r2921,r2923);
          real r2927#2 = RAdd(r2926,r2925);
          real r2929#1 = RMul(r27A6,r286F);
          real r292B#1 = RMul(r27C8,r2867);
          real r292D#1 = RMul(r27E2,r28A1);
          real r292E#1 = RAdd(r2929,r292B);
          real r292F#2 = RAdd(r292E,r292D);
          real r2932#1 = RMul(r27A6,r2874);
          real r2934#1 = RMul(r27C8,r2886);
          real r2936#1 = RMul(r27E2,r2857);
          real r2937#1 = RAdd(r2932,r2934);
          real r2938#1 = RAdd(r2937,r2936);
          real r293A#1 = RMul(r27A6,r2877);
          real r293C#1 = RMul(r27C8,r2889);
          real r293E#1 = RMul(r27E2,r285F);
          real r293F#1 = RAdd(r293A,r293C);
          real r2940#2 = RAdd(r293F,r293E);
          real r2942#1 = RMul(r27A6,r287A);
          real r2944#1 = RMul(r27C8,r288C);
          real r2946#1 = RMul(r27E2,r2867);
          real r2947#1 = RAdd(r2942,r2944);
          real r2948#2 = RAdd(r2947,r2946);
          real r294C#1 = RMul(r27B1,r2857);
          real r294E#1 = RMul(r27CF,r287E);
          real r2950#1 = RMul(r27E9,r2891);
          real r2951#1 = RAdd(r294C,r294E);
          real r2952#2 = RAdd(r2951,r2950);
          real r2953#1 = RMul(r27B1,r285F);
          real r2954#1 = RMul(r27CF,r2880);
          real r2955#1 = RMul(r27E9,r2894);
          real r2956#1 = RAdd(r2953,r2954);
          real r2957#1 = RAdd(r2956,r2955);
          real r2958#1 = RMul(r27B1,r2867);
          real r2959#1 = RMul(r27CF,r2882);
          real r295A#1 = RMul(r27E9,r2897);
          real r295B#1 = RAdd(r2958,r2959);
          real r295C#2 = RAdd(r295B,r295A);
          real r295E#1 = RMul(r27B1,r286B);
          real r295F#1 = RMul(r27CF,r2857);
          real r2960#1 = RMul(r27E9,r289B);
          real r2961#1 = RAdd(r295E,r295F);
          real r2962#2 = RAdd(r2961,r2960);
          real r2963#1 = RMul(r27B1,r286D);
          real r2964#1 = RMul(r27CF,r285F);
          real r2965#1 = RMul(r27E9,r289E);
          real r2966#1 = RAdd(r2963,r2964);
          real r2967#1 = RAdd(r2966,r2965);
          real r2968#1 = RMul(r27B1,r286F);
          real r2969#1 = RMul(r27CF,r2867);
          real r296A#1 = RMul(r27E9,r28A1);
          real r296B#1 = RAdd(r2968,r2969);
          real r296C#2 = RAdd(r296B,r296A);
          real r296E#1 = RMul(r27B1,r2874);
          real r296F#1 = RMul(r27CF,r2886);
          real r2970#1 = RMul(r27E9,r2857);
          real r2971#1 = RAdd(r296E,r296F);
          real r2972#2 = RAdd(r2971,r2970);
          real r2973#1 = RMul(r27B1,r2877);
          real r2974#1 = RMul(r27CF,r2889);
          real r2975#1 = RMul(r27E9,r285F);
          real r2976#1 = RAdd(r2973,r2974);
          real r2977#1 = RAdd(r2976,r2975);
          real r2978#1 = RMul(r27B1,r287A);
          real r2979#1 = RMul(r27CF,r288C);
          real r297A#1 = RMul(r27E9,r2867);
          real r297B#1 = RAdd(r2978,r2979);
          real r297C#2 = RAdd(r297B,r297A);
          real r2980#1 = RMul(r27BC,r2857);
          real r2982#1 = RMul(r27D6,r287E);
          real r2984#1 = RMul(r27F0,r2891);
          real r2985#1 = RAdd(r2980,r2982);
          real r2986#2 = RAdd(r2985,r2984);
          real r2987#1 = RMul(r27BC,r285F);
          real r2988#1 = RMul(r27D6,r2880);
          real r2989#1 = RMul(r27F0,r2894);
          real r298A#1 = RAdd(r2987,r2988);
          real r298B#2 = RAdd(r298A,r2989);
          real r298C#1 = RMul(r27BC,r2867);
          real r298D#1 = RMul(r27D6,r2882);
          real r298E#1 = RMul(r27F0,r2897);
          real r298F#1 = RAdd(r298C,r298D);
          real r2990#1 = RAdd(r298F,r298E);
          real r2992#1 = RMul(r27BC,r286B);
          real r2993#1 = RMul(r27D6,r2857);
          real r2994#1 = RMul(r27F0,r289B);
          real r2995#1 = RAdd(r2992,r2993);
          real r2996#2 = RAdd(r2995,r2994);
          real r2997#1 = RMul(r27BC,r286D);
          real r2998#1 = RMul(r27D6,r285F);
          real r2999#1 = RMul(r27F0,r289E);
          real r299A#1 = RAdd(r2997,r2998);
          real r299B#2 = RAdd(r299A,r2999);
          real r299C#1 = RMul(r27BC,r286F);
          real r299D#1 = RMul(r27D6,r2867);
          real r299E#1 = RMul(r27F0,r28A1);
          real r299F#1 = RAdd(r299C,r299D);
          real r29A0#1 = RAdd(r299F,r299E);
          real r29A2#1 = RMul(r27BC,r2874);
          real r29A3#1 = RMul(r27D6,r2886);
          real r29A4#1 = RMul(r27F0,r2857);
          real r29A5#1 = RAdd(r29A2,r29A3);
          real r29A6#2 = RAdd(r29A5,r29A4);
          real r29A7#1 = RMul(r27BC,r2877);
          real r29A8#1 = RMul(r27D6,r2889);
          real r29A9#1 = RMul(r27F0,r285F);
          real r29AA#1 = RAdd(r29A7,r29A8);
          real r29AB#2 = RAdd(r29AA,r29A9);
          real r29AC#1 = RMul(r27BC,r287A);
          real r29AD#1 = RMul(r27D6,r288C);
          real r29AE#1 = RMul(r27F0,r2867);
          real r29AF#1 = RAdd(r29AC,r29AD);
          real r29B0#1 = RAdd(r29AF,r29AE);
          tensor[3] probe_l_122A6C#1 = <tensor[3]>[r27A6,r27C8,r27E2];
          tensor[3] probe_l_132AB9#3 = <tensor[3]>[r27B1,r27CF,r27E9];
          tensor[3] tensor2B64#1 = <tensor[3]>[r2867,r2882,r2897];
          tensor[3] tensor2B6A#1 = <tensor[3]>[r286F,r2867,r28A1];
          tensor[3] tensor2B71#1 = <tensor[3]>[r287A,r288C,r2867];
          real vdot2B94#1 = VDot<3>(probe_l_132AB9,tensor2B64);
          real vdot2B96#1 = VDot<3>(probe_l_132AB9,tensor2B6A);
          real vdot2B98#1 = VDot<3>(probe_l_132AB9,tensor2B71);
          tensor[3] op1_e3_l_162B92#1 = <tensor[3]>[vdot2B94,vdot2B96,vdot2B98];
          real op1_e3_l_172BA1#1 = VDot<3>(probe_l_122A6C,op1_e3_l_162B92);
          real r2BA7#2 = RMul(basisEval2175,r2906);
          real r2BA9#1 = RMul(basisEval2175,r290E);
          real r2BAB#2 = RMul(basisEval2175,r2916);
          real r2BAD#2 = RMul(basisEval2175,r2952);
          real r2BAF#3 = RMul(basisEval2175,r2957);
          real r2BB2#1 = RMul(one1C8A,r295C);
          real r2BB4#2 = RMul(basisEval2175,r2986);
          real r2BB7#1 = RMul(coeff1D16,r298B);
          real r2BB9#3 = RMul(basisEval2175,r2990);
          real r2BBA#2 = RAdd(r2BA7,r2BA9);
          real r2BBB#1 = RAdd(r2BBA,r2BAB);
          real r2BBC#1 = RAdd(r2BBB,r2BAD);
          real r2BBD#1 = RAdd(r2BBC,r2BAF);
          real r2BBE#1 = RAdd(r2BBD,r2BB2);
          real r2BBF#1 = RAdd(r2BBE,r2BB4);
          real r2BC0#1 = RAdd(r2BBF,r2BB7);
          real r2BC1#1 = RAdd(r2BC0,r2BB9);
          real r2BC3#2 = RMul(basisEval2175,r291F);
          real r2BC5#1 = RMul(basisEval2175,r2927);
          real r2BC7#2 = RMul(basisEval2175,r292F);
          real r2BC9#2 = RMul(basisEval2175,r2962);
          real r2BCB#3 = RMul(basisEval2175,r2967);
          real r2BCD#1 = RMul(one1C8A,r296C);
          real r2BCF#2 = RMul(basisEval2175,r2996);
          real r2BD1#1 = RMul(coeff1D16,r299B);
          real r2BD3#3 = RMul(basisEval2175,r29A0);
          real r2BD4#2 = RAdd(r2BC3,r2BC5);
          real r2BD5#1 = RAdd(r2BD4,r2BC7);
          real r2BD6#1 = RAdd(r2BD5,r2BC9);
          real r2BD7#1 = RAdd(r2BD6,r2BCB);
          real r2BD8#1 = RAdd(r2BD7,r2BCD);
          real r2BD9#1 = RAdd(r2BD8,r2BCF);
          real r2BDA#1 = RAdd(r2BD9,r2BD1);
          real r2BDB#1 = RAdd(r2BDA,r2BD3);
          real r2BDD#2 = RMul(basisEval2175,r2938);
          real r2BDF#1 = RMul(basisEval2175,r2940);
          real r2BE1#2 = RMul(basisEval2175,r2948);
          real r2BE3#2 = RMul(basisEval2175,r2972);
          real r2BE5#3 = RMul(basisEval2175,r2977);
          real r2BE7#1 = RMul(one1C8A,r297C);
          real r2BE9#2 = RMul(basisEval2175,r29A6);
          real r2BEB#1 = RMul(coeff1D16,r29AB);
          real r2BED#3 = RMul(basisEval2175,r29B0);
          real r2BEE#2 = RAdd(r2BDD,r2BDF);
          real r2BEF#1 = RAdd(r2BEE,r2BE1);
          real r2BF0#1 = RAdd(r2BEF,r2BE3);
          real r2BF1#1 = RAdd(r2BF0,r2BE5);
          real r2BF2#1 = RAdd(r2BF1,r2BE7);
          real r2BF3#1 = RAdd(r2BF2,r2BE9);
          real r2BF4#1 = RAdd(r2BF3,r2BEB);
          real r2BF5#1 = RAdd(r2BF4,r2BED);
          real r2BF7#1 = RMul(coeff1D16,r2916);
          real r2BF8#2 = RMul(basisEval2175,r295C);
          real r2BF9#1 = RMul(one1C8A,r2986);
          real r2BFA#2 = RMul(basisEval2175,r298B);
          real r2BFB#1 = RAdd(r2BBA,r2BF7);
          real r2BFC#1 = RAdd(r2BFB,r2BAD);
          real r2BFD#1 = RAdd(r2BFC,r2BAF);
          real r2BFE#1 = RAdd(r2BFD,r2BF8);
          real r2BFF#1 = RAdd(r2BFE,r2BF9);
          real r2C00#1 = RAdd(r2BFF,r2BFA);
          real r2C01#1 = RAdd(r2C00,r2BB9);
          real r2C02#1 = RMul(coeff1D16,r292F);
          real r2C03#2 = RMul(basisEval2175,r296C);
          real r2C04#1 = RMul(one1C8A,r2996);
          real r2C05#2 = RMul(basisEval2175,r299B);
          real r2C06#1 = RAdd(r2BD4,r2C02);
          real r2C07#1 = RAdd(r2C06,r2BC9);
          real r2C08#1 = RAdd(r2C07,r2BCB);
          real r2C09#1 = RAdd(r2C08,r2C03);
          real r2C0A#1 = RAdd(r2C09,r2C04);
          real r2C0B#1 = RAdd(r2C0A,r2C05);
          real r2C0C#1 = RAdd(r2C0B,r2BD3);
          real r2C0D#1 = RMul(coeff1D16,r2948);
          real r2C0E#2 = RMul(basisEval2175,r297C);
          real r2C0F#1 = RMul(one1C8A,r29A6);
          real r2C10#2 = RMul(basisEval2175,r29AB);
          real r2C11#1 = RAdd(r2BEE,r2C0D);
          real r2C12#1 = RAdd(r2C11,r2BE3);
          real r2C13#1 = RAdd(r2C12,r2BE5);
          real r2C14#1 = RAdd(r2C13,r2C0E);
          real r2C15#1 = RAdd(r2C14,r2C0F);
          real r2C16#1 = RAdd(r2C15,r2C10);
          real r2C17#1 = RAdd(r2C16,r2BED);
          real r2C19#1 = RMul(one1C8A,r290E);
          real r2C1A#1 = RMul(coeff1D16,r2952);
          real r2C1B#1 = RAdd(r2BA7,r2C19);
          real r2C1C#1 = RAdd(r2C1B,r2BAB);
          real r2C1D#1 = RAdd(r2C1C,r2C1A);
          real r2C1E#1 = RAdd(r2C1D,r2BAF);
          real r2C1F#1 = RAdd(r2C1E,r2BF8);
          real r2C20#1 = RAdd(r2C1F,r2BB4);
          real r2C21#1 = RAdd(r2C20,r2BFA);
          real r2C22#1 = RAdd(r2C21,r2BB9);
          real r2C23#1 = RMul(one1C8A,r2927);
          real r2C24#1 = RMul(coeff1D16,r2962);
          real r2C25#1 = RAdd(r2BC3,r2C23);
          real r2C26#1 = RAdd(r2C25,r2BC7);
          real r2C27#1 = RAdd(r2C26,r2C24);
          real r2C28#1 = RAdd(r2C27,r2BCB);
          real r2C29#1 = RAdd(r2C28,r2C03);
          real r2C2A#1 = RAdd(r2C29,r2BCF);
          real r2C2B#1 = RAdd(r2C2A,r2C05);
          real r2C2C#1 = RAdd(r2C2B,r2BD3);
          real r2C2D#1 = RMul(one1C8A,r2940);
          real r2C2E#1 = RMul(coeff1D16,r2972);
          real r2C2F#1 = RAdd(r2BDD,r2C2D);
          real r2C30#1 = RAdd(r2C2F,r2BE1);
          real r2C31#1 = RAdd(r2C30,r2C2E);
          real r2C32#1 = RAdd(r2C31,r2BE5);
          real r2C33#1 = RAdd(r2C32,r2C0E);
          real r2C34#1 = RAdd(r2C33,r2BE9);
          real r2C35#1 = RAdd(r2C34,r2C10);
          real r2C36#1 = RAdd(r2C35,r2BED);
          real realLit2CCE#1 = 0.2e1;
          real op1_e3_l_192CCD#9 = RMul(realLit2CCE,op1_e3_l_172BA1);
          real r2CD4#1 = RDiv(r2BC1,op1_e3_l_192CCD);
          real r2CD6#1 = RDiv(r2BDB,op1_e3_l_192CCD);
          real r2CD8#1 = RDiv(r2BF5,op1_e3_l_192CCD);
          real r2CDB#1 = RDiv(r2C01,op1_e3_l_192CCD);
          real r2CDD#1 = RDiv(r2C0C,op1_e3_l_192CCD);
          real r2CDF#1 = RDiv(r2C17,op1_e3_l_192CCD);
          real r2CE2#1 = RDiv(r2C22,op1_e3_l_192CCD);
          real r2CE4#1 = RDiv(r2C2C,op1_e3_l_192CCD);
          real r2CE6#1 = RDiv(r2C36,op1_e3_l_192CCD);
          real r2D02#1 = RMul(vdot26F8,r2CD4);
          real r2D05#1 = RMul(vdot26FA,r2CDB);
          real r2D08#1 = RMul(vdot26FC,r2CE2);
          real r2D09#1 = RAdd(r2D02,r2D05);
          real r2D0A#1 = RAdd(r2D09,r2D08);
          real r2D0C#1 = RMul(vdot26F8,r2CD6);
          real r2D0E#1 = RMul(vdot26FA,r2CDD);
          real r2D10#1 = RMul(vdot26FC,r2CE4);
          real r2D11#1 = RAdd(r2D0C,r2D0E);
          real r2D12#1 = RAdd(r2D11,r2D10);
          real r2D14#1 = RMul(vdot26F8,r2CD8);
          real r2D16#1 = RMul(vdot26FA,r2CDF);
          real r2D18#1 = RMul(vdot26FC,r2CE6);
          real r2D19#1 = RAdd(r2D14,r2D16);
          real r2D1A#1 = RAdd(r2D19,r2D18);
          tensor[3] gradResult2CFF#1 = <tensor[3]>[r2D0A,r2D12,r2D1A];
          goto JOIN2D3C
        JOIN2D3C:  preds = [ASSIGN2D37,MASSIGN2D45]
          tensor[3] gradResult2D38#1 = phi(gradResult2CFF,gradResult1326)
          real result2D39#1 = phi(compositionl210B,result1324)
          femData:MeshCell c2D3A#1 = phi(c1A81,c1322)
          tensor[3] translated2D3B#1 = phi(translated1A83,translated1320)
          self.translated = translated2D3B;
          self.valid = valid1A7A;
          self.c = c2D3A;
          self.result = result2D39;
          self.gradResult = gradResult2D38;
          stabilize
        ASSIGN2D44:  preds = [COND1A7C]
          string _t2D43#1 = "Warning: Invalid!\n";
          Print<[string]>(_t2D43);
          goto JOIN2D3C
    end update
  end gg
## initial strand creation
  COLLECTION
    ENTRY2D47:  preds = []
      tensor[3][] points2D48#1 = globals.points12C6;
    FOREACH2D4B:  preds = [ASSIGN2D49,NEXT2D4D]
      foreach (i2D4A in points2D48) on exit goto RETURN2D4E
      new gg(i2D4A);
      goto FOREACH2D4B
    RETURN2D4E:  preds = [FOREACH2D4B]
      return
#### end program ####
##### low-ir: after flatten ####
## properties
  GlobalInit HasInputs HasGlobals ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
## globals
  input points12C6 (points) = <no-default>
  input cube12C7 (cube) = <no-default>
  input 0space0342_intermedateGlobal12C8 (space) = <no-default>
  input 0data0344_intermedateGlobal12C9 (data) = <no-default>
  global femData:MeshCell[] 0cell_cube12CA
  global femData:Mesh _t12CB
  global femData:Space _tX12CC
  global femData:FemFunc data12CD
## functions
  function femData:MeshPos findPos132E (femData:Mesh mesh132F#19, tensor[3] pos1330#3) {
    ENTRY1331:  preds = []
      real _t1332#3 = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0;
      tensor[3] xn1334#1 = <tensor[3]>[_t1332,_t1332,_t1332];
      int newtonInt1336#1 = 0;
      int[] yayCells1338#1 = ExtractFemItem2<tensor[3],int[],NearbyCell(File=spat.in)(Mesh)>(mesh132F,pos1330);
    FOREACH133B:  preds = [ASSIGN1339,NEXT1A70]
      foreach (cellItter133A in yayCells1338) on exit goto ASSIGN1A72
        tensor[3] xn1A6F#1 = phi(xn1334,xn1910)
      int _t133C#1 = 16;
      int[] _t133E#1 = Range(newtonInt1336,_t133C);
    FOREACH1341:  preds = [ASSIGN133F,NEXT1A6E]
      foreach (newtonItter1340 in _t133E) on exit goto NEXT1A70
        tensor[3] xn1910#5 = phi(xn1A6F,xn19D4)
      int ilit1343#1 = 4;
      int mulRes1344#4 = IMul(cellItter133A,ilit1343);
      int idx1347#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(mesh132F,mulRes1344);
      int ilit1348#5 = 1;
      int addRes1349#1 = IAdd(mulRes1344,ilit1348);
      int idx134A#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(mesh132F,addRes1349);
      int ilit134B#5 = 2;
      int addRes134C#1 = IAdd(mulRes1344,ilit134B);
      int idx134D#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(mesh132F,addRes134C);
      int ilit134E#5 = 3;
      int addRes134F#1 = IAdd(mulRes1344,ilit134E);
      int idx1350#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(mesh132F,addRes134F);
      int mulRes1366#3 = IMul(ilit134E,idx1347);
      int addRes1369#1 = IAdd(ilit1348,mulRes1366);
      int addRes136B#1 = IAdd(ilit134B,mulRes1366);
      real dof_load136C#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh132F,mulRes1366);
      real dof_load136D#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh132F,addRes1369);
      real dof_load136E#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh132F,addRes136B);
      int mulRes1371#3 = IMul(ilit134E,idx134A);
      int addRes1373#1 = IAdd(ilit1348,mulRes1371);
      int addRes1374#1 = IAdd(ilit134B,mulRes1371);
      real dof_load1375#3 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh132F,mulRes1371);
      real dof_load1376#3 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh132F,addRes1373);
      real dof_load1377#3 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh132F,addRes1374);
      int mulRes137A#3 = IMul(ilit134E,idx134D);
      int addRes137C#1 = IAdd(ilit1348,mulRes137A);
      int addRes137D#1 = IAdd(ilit134B,mulRes137A);
      real dof_load137E#3 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh132F,mulRes137A);
      real dof_load137F#3 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh132F,addRes137C);
      real dof_load1380#3 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh132F,addRes137D);
      int mulRes1383#3 = IMul(ilit134E,idx1350);
      int addRes1385#1 = IAdd(ilit1348,mulRes1383);
      int addRes1386#1 = IAdd(ilit134B,mulRes1383);
      real dof_load1387#3 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh132F,mulRes1383);
      real dof_load1388#3 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh132F,addRes1385);
      real dof_load1389#3 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(mesh132F,addRes1386);
      real coeff13BA#22 = -0.1e1;
      real one13BB#33 = 0.1e1;
      real prod13BC#2 = RMul(one13BB,one13BB);
      real prod13BD#2 = RMul(one13BB,prod13BC);
      real basisEval13BE#3 = RMul(coeff13BA,prod13BD);
      real basisEval13BF#10 = RMul(one13BB,prod13BD);
      real basisEval13C0#45 = 0.e0;
      real r13D7#2 = RMul(dof_load136C,basisEval13BE);
      real r13DA#1 = RMul(dof_load1375,basisEval13BF);
      real r13DD#2 = RMul(dof_load137E,basisEval13C0);
      real r13E0#2 = RMul(dof_load1387,basisEval13C0);
      real r13E1#1 = RAdd(r13D7,r13DA);
      real r13E2#1 = RAdd(r13E1,r13DD);
      real r13E3#13 = RAdd(r13E2,r13E0);
      real r13E7#1 = RMul(dof_load1375,basisEval13C0);
      real r13E9#1 = RMul(dof_load137E,basisEval13BF);
      real r13EC#2 = RAdd(r13D7,r13E7);
      real r13ED#1 = RAdd(r13EC,r13E9);
      real r13EE#13 = RAdd(r13ED,r13E0);
      real r13F6#1 = RMul(dof_load1387,basisEval13BF);
      real r13F8#1 = RAdd(r13EC,r13DD);
      real r13F9#12 = RAdd(r13F8,r13F6);
      real r13FC#2 = RMul(dof_load136D,basisEval13BE);
      real r13FE#1 = RMul(dof_load1376,basisEval13BF);
      real r1400#2 = RMul(dof_load137F,basisEval13C0);
      real r1402#2 = RMul(dof_load1388,basisEval13C0);
      real r1403#1 = RAdd(r13FC,r13FE);
      real r1404#1 = RAdd(r1403,r1400);
      real r1405#13 = RAdd(r1404,r1402);
      real r1407#1 = RMul(dof_load1376,basisEval13C0);
      real r1408#1 = RMul(dof_load137F,basisEval13BF);
      real r140A#2 = RAdd(r13FC,r1407);
      real r140B#1 = RAdd(r140A,r1408);
      real r140C#13 = RAdd(r140B,r1402);
      real r1410#1 = RMul(dof_load1388,basisEval13BF);
      real r1412#1 = RAdd(r140A,r1400);
      real r1413#12 = RAdd(r1412,r1410);
      real r1416#2 = RMul(dof_load136E,basisEval13BE);
      real r1418#1 = RMul(dof_load1377,basisEval13BF);
      real r141A#2 = RMul(dof_load1380,basisEval13C0);
      real r141C#2 = RMul(dof_load1389,basisEval13C0);
      real r141D#1 = RAdd(r1416,r1418);
      real r141E#1 = RAdd(r141D,r141A);
      real r141F#13 = RAdd(r141E,r141C);
      real r1421#1 = RMul(dof_load1377,basisEval13C0);
      real r1422#1 = RMul(dof_load1380,basisEval13BF);
      real r1424#2 = RAdd(r1416,r1421);
      real r1425#1 = RAdd(r1424,r1422);
      real r1426#13 = RAdd(r1425,r141C);
      real r142A#1 = RMul(dof_load1389,basisEval13BF);
      real r142C#1 = RAdd(r1424,r141A);
      real r142D#12 = RAdd(r142C,r142A);
      real r148E#3 = RMul(basisEval13C0,r13E3);
      real r1490#3 = RMul(basisEval13C0,r1405);
      real r1492#5 = RMul(basisEval13C0,r141F);
      real r1493#3 = RAdd(r148E,r1490);
      real r1494#9 = RAdd(r1493,r1492);
      real r1496#3 = RMul(basisEval13C0,r13EE);
      real r1498#3 = RMul(basisEval13C0,r140C);
      real r149A#5 = RMul(basisEval13C0,r1426);
      real r149B#3 = RAdd(r1496,r1498);
      real r149C#9 = RAdd(r149B,r149A);
      real r149E#3 = RMul(basisEval13C0,r13F9);
      real r14A0#3 = RMul(basisEval13C0,r1413);
      real r14A2#5 = RMul(basisEval13C0,r142D);
      real r14A3#3 = RAdd(r149E,r14A0);
      real r14A4#12 = RAdd(r14A3,r14A2);
      real r14A7#1 = RMul(coeff13BA,r141F);
      real r14A8#3 = RAdd(r1493,r14A7);
      real r14A9#1 = RMul(coeff13BA,r1426);
      real r14AA#3 = RAdd(r149B,r14A9);
      real r14AB#1 = RMul(coeff13BA,r142D);
      real r14AC#4 = RAdd(r14A3,r14AB);
      real r14AF#1 = RMul(one13BB,r1405);
      real r14B0#1 = RAdd(r148E,r14AF);
      real r14B1#3 = RAdd(r14B0,r1492);
      real r14B2#1 = RMul(one13BB,r140C);
      real r14B3#1 = RAdd(r1496,r14B2);
      real r14B4#3 = RAdd(r14B3,r149A);
      real r14B5#1 = RMul(one13BB,r1413);
      real r14B6#1 = RAdd(r149E,r14B5);
      real r14B7#4 = RAdd(r14B6,r14A2);
      real r14BA#1 = RMul(one13BB,r141F);
      real r14BB#3 = RAdd(r1493,r14BA);
      real r14BC#1 = RMul(one13BB,r1426);
      real r14BD#3 = RAdd(r149B,r14BC);
      real r14BE#1 = RMul(one13BB,r142D);
      real r14BF#4 = RAdd(r14A3,r14BE);
      real r14C1#1 = RMul(coeff13BA,r13E3);
      real r14C2#1 = RAdd(r14C1,r1490);
      real r14C3#3 = RAdd(r14C2,r1492);
      real r14C4#1 = RMul(coeff13BA,r13EE);
      real r14C5#1 = RAdd(r14C4,r1498);
      real r14C6#3 = RAdd(r14C5,r149A);
      real r14C7#1 = RMul(coeff13BA,r13F9);
      real r14C8#1 = RAdd(r14C7,r14A0);
      real r14C9#4 = RAdd(r14C8,r14A2);
      real r14CC#1 = RMul(coeff13BA,r1405);
      real r14CD#1 = RAdd(r148E,r14CC);
      real r14CE#3 = RAdd(r14CD,r1492);
      real r14CF#1 = RMul(coeff13BA,r140C);
      real r14D0#1 = RAdd(r1496,r14CF);
      real r14D1#3 = RAdd(r14D0,r149A);
      real r14D2#1 = RMul(coeff13BA,r1413);
      real r14D3#1 = RAdd(r149E,r14D2);
      real r14D4#4 = RAdd(r14D3,r14A2);
      real r14D6#1 = RMul(one13BB,r13E3);
      real r14D7#1 = RAdd(r14D6,r1490);
      real r14D8#3 = RAdd(r14D7,r1492);
      real r14D9#1 = RMul(one13BB,r13EE);
      real r14DA#1 = RAdd(r14D9,r1498);
      real r14DB#3 = RAdd(r14DA,r149A);
      real r14DC#1 = RMul(one13BB,r13F9);
      real r14DD#1 = RAdd(r14DC,r14A0);
      real r14DE#4 = RAdd(r14DD,r14A2);
      real r153B#1 = RMul(r13E3,r1494);
      real r153E#1 = RMul(r1405,r14BB);
      real r1541#1 = RMul(r141F,r14CE);
      real r1542#1 = RAdd(r153B,r153E);
      real r1543#1 = RAdd(r1542,r1541);
      real r1545#1 = RMul(r13E3,r149C);
      real r1547#1 = RMul(r1405,r14BD);
      real r1549#1 = RMul(r141F,r14D1);
      real r154A#1 = RAdd(r1545,r1547);
      real r154B#2 = RAdd(r154A,r1549);
      real r154D#1 = RMul(r13E3,r14A4);
      real r154F#1 = RMul(r1405,r14BF);
      real r1551#1 = RMul(r141F,r14D4);
      real r1552#1 = RAdd(r154D,r154F);
      real r1553#2 = RAdd(r1552,r1551);
      real r1556#1 = RMul(r13E3,r14A8);
      real r1558#1 = RMul(r1405,r1494);
      real r155A#1 = RMul(r141F,r14D8);
      real r155B#1 = RAdd(r1556,r1558);
      real r155C#1 = RAdd(r155B,r155A);
      real r155E#1 = RMul(r13E3,r14AA);
      real r1560#1 = RMul(r1405,r149C);
      real r1562#1 = RMul(r141F,r14DB);
      real r1563#1 = RAdd(r155E,r1560);
      real r1564#2 = RAdd(r1563,r1562);
      real r1566#1 = RMul(r13E3,r14AC);
      real r1568#1 = RMul(r1405,r14A4);
      real r156A#1 = RMul(r141F,r14DE);
      real r156B#1 = RAdd(r1566,r1568);
      real r156C#2 = RAdd(r156B,r156A);
      real r156F#1 = RMul(r13E3,r14B1);
      real r1571#1 = RMul(r1405,r14C3);
      real r1573#1 = RMul(r141F,r1494);
      real r1574#1 = RAdd(r156F,r1571);
      real r1575#1 = RAdd(r1574,r1573);
      real r1577#1 = RMul(r13E3,r14B4);
      real r1579#1 = RMul(r1405,r14C6);
      real r157B#1 = RMul(r141F,r149C);
      real r157C#1 = RAdd(r1577,r1579);
      real r157D#2 = RAdd(r157C,r157B);
      real r157F#1 = RMul(r13E3,r14B7);
      real r1581#1 = RMul(r1405,r14C9);
      real r1583#1 = RMul(r141F,r14A4);
      real r1584#1 = RAdd(r157F,r1581);
      real r1585#2 = RAdd(r1584,r1583);
      real r1589#1 = RMul(r13EE,r1494);
      real r158B#1 = RMul(r140C,r14BB);
      real r158D#1 = RMul(r1426,r14CE);
      real r158E#1 = RAdd(r1589,r158B);
      real r158F#2 = RAdd(r158E,r158D);
      real r1590#1 = RMul(r13EE,r149C);
      real r1591#1 = RMul(r140C,r14BD);
      real r1592#1 = RMul(r1426,r14D1);
      real r1593#1 = RAdd(r1590,r1591);
      real r1594#1 = RAdd(r1593,r1592);
      real r1595#1 = RMul(r13EE,r14A4);
      real r1596#1 = RMul(r140C,r14BF);
      real r1597#1 = RMul(r1426,r14D4);
      real r1598#1 = RAdd(r1595,r1596);
      real r1599#2 = RAdd(r1598,r1597);
      real r159B#1 = RMul(r13EE,r14A8);
      real r159C#1 = RMul(r140C,r1494);
      real r159D#1 = RMul(r1426,r14D8);
      real r159E#1 = RAdd(r159B,r159C);
      real r159F#2 = RAdd(r159E,r159D);
      real r15A0#1 = RMul(r13EE,r14AA);
      real r15A1#1 = RMul(r140C,r149C);
      real r15A2#1 = RMul(r1426,r14DB);
      real r15A3#1 = RAdd(r15A0,r15A1);
      real r15A4#1 = RAdd(r15A3,r15A2);
      real r15A5#1 = RMul(r13EE,r14AC);
      real r15A6#1 = RMul(r140C,r14A4);
      real r15A7#1 = RMul(r1426,r14DE);
      real r15A8#1 = RAdd(r15A5,r15A6);
      real r15A9#2 = RAdd(r15A8,r15A7);
      real r15AB#1 = RMul(r13EE,r14B1);
      real r15AC#1 = RMul(r140C,r14C3);
      real r15AD#1 = RMul(r1426,r1494);
      real r15AE#1 = RAdd(r15AB,r15AC);
      real r15AF#2 = RAdd(r15AE,r15AD);
      real r15B0#1 = RMul(r13EE,r14B4);
      real r15B1#1 = RMul(r140C,r14C6);
      real r15B2#1 = RMul(r1426,r149C);
      real r15B3#1 = RAdd(r15B0,r15B1);
      real r15B4#1 = RAdd(r15B3,r15B2);
      real r15B5#1 = RMul(r13EE,r14B7);
      real r15B6#1 = RMul(r140C,r14C9);
      real r15B7#1 = RMul(r1426,r14A4);
      real r15B8#1 = RAdd(r15B5,r15B6);
      real r15B9#2 = RAdd(r15B8,r15B7);
      real r15BD#1 = RMul(r13F9,r1494);
      real r15BF#1 = RMul(r1413,r14BB);
      real r15C1#1 = RMul(r142D,r14CE);
      real r15C2#1 = RAdd(r15BD,r15BF);
      real r15C3#2 = RAdd(r15C2,r15C1);
      real r15C4#1 = RMul(r13F9,r149C);
      real r15C5#1 = RMul(r1413,r14BD);
      real r15C6#1 = RMul(r142D,r14D1);
      real r15C7#1 = RAdd(r15C4,r15C5);
      real r15C8#2 = RAdd(r15C7,r15C6);
      real r15C9#1 = RMul(r13F9,r14A4);
      real r15CA#1 = RMul(r1413,r14BF);
      real r15CB#1 = RMul(r142D,r14D4);
      real r15CC#1 = RAdd(r15C9,r15CA);
      real r15CD#1 = RAdd(r15CC,r15CB);
      real r15CF#1 = RMul(r13F9,r14A8);
      real r15D0#1 = RMul(r1413,r1494);
      real r15D1#1 = RMul(r142D,r14D8);
      real r15D2#1 = RAdd(r15CF,r15D0);
      real r15D3#2 = RAdd(r15D2,r15D1);
      real r15D4#1 = RMul(r13F9,r14AA);
      real r15D5#1 = RMul(r1413,r149C);
      real r15D6#1 = RMul(r142D,r14DB);
      real r15D7#1 = RAdd(r15D4,r15D5);
      real r15D8#2 = RAdd(r15D7,r15D6);
      real r15D9#1 = RMul(r13F9,r14AC);
      real r15DA#1 = RMul(r1413,r14A4);
      real r15DB#1 = RMul(r142D,r14DE);
      real r15DC#1 = RAdd(r15D9,r15DA);
      real r15DD#1 = RAdd(r15DC,r15DB);
      real r15DF#1 = RMul(r13F9,r14B1);
      real r15E0#1 = RMul(r1413,r14C3);
      real r15E1#1 = RMul(r142D,r1494);
      real r15E2#1 = RAdd(r15DF,r15E0);
      real r15E3#2 = RAdd(r15E2,r15E1);
      real r15E4#1 = RMul(r13F9,r14B4);
      real r15E5#1 = RMul(r1413,r14C6);
      real r15E6#1 = RMul(r142D,r149C);
      real r15E7#1 = RAdd(r15E4,r15E5);
      real r15E8#2 = RAdd(r15E7,r15E6);
      real r15E9#1 = RMul(r13F9,r14B7);
      real r15EA#1 = RMul(r1413,r14C9);
      real r15EB#1 = RMul(r142D,r14A4);
      real r15EC#1 = RAdd(r15E9,r15EA);
      real r15ED#1 = RAdd(r15EC,r15EB);
      tensor[3] probe_l_1416A9#1 = <tensor[3]>[r13E3,r1405,r141F];
      tensor[3] probe_l_1516F6#3 = <tensor[3]>[r13EE,r140C,r1426];
      tensor[3] tensor17A1#1 = <tensor[3]>[r14A4,r14BF,r14D4];
      tensor[3] tensor17A7#1 = <tensor[3]>[r14AC,r14A4,r14DE];
      tensor[3] tensor17AE#1 = <tensor[3]>[r14B7,r14C9,r14A4];
      real vdot17D1#1 = VDot<3>(probe_l_1516F6,tensor17A1);
      real vdot17D3#1 = VDot<3>(probe_l_1516F6,tensor17A7);
      real vdot17D5#1 = VDot<3>(probe_l_1516F6,tensor17AE);
      tensor[3] op1_e3_l_1817CF#1 = <tensor[3]>[vdot17D1,vdot17D3,vdot17D5];
      real op1_e3_l_1917DE#1 = VDot<3>(probe_l_1416A9,op1_e3_l_1817CF);
      real r17E4#2 = RMul(basisEval13C0,r1543);
      real r17E6#1 = RMul(basisEval13C0,r154B);
      real r17E8#2 = RMul(basisEval13C0,r1553);
      real r17EA#2 = RMul(basisEval13C0,r158F);
      real r17EC#3 = RMul(basisEval13C0,r1594);
      real r17EF#1 = RMul(one13BB,r1599);
      real r17F1#2 = RMul(basisEval13C0,r15C3);
      real r17F4#1 = RMul(coeff13BA,r15C8);
      real r17F6#3 = RMul(basisEval13C0,r15CD);
      real r17F7#2 = RAdd(r17E4,r17E6);
      real r17F8#1 = RAdd(r17F7,r17E8);
      real r17F9#1 = RAdd(r17F8,r17EA);
      real r17FA#1 = RAdd(r17F9,r17EC);
      real r17FB#1 = RAdd(r17FA,r17EF);
      real r17FC#1 = RAdd(r17FB,r17F1);
      real r17FD#1 = RAdd(r17FC,r17F4);
      real r17FE#1 = RAdd(r17FD,r17F6);
      real r1800#2 = RMul(basisEval13C0,r155C);
      real r1802#1 = RMul(basisEval13C0,r1564);
      real r1804#2 = RMul(basisEval13C0,r156C);
      real r1806#2 = RMul(basisEval13C0,r159F);
      real r1808#3 = RMul(basisEval13C0,r15A4);
      real r180A#1 = RMul(one13BB,r15A9);
      real r180C#2 = RMul(basisEval13C0,r15D3);
      real r180E#1 = RMul(coeff13BA,r15D8);
      real r1810#3 = RMul(basisEval13C0,r15DD);
      real r1811#2 = RAdd(r1800,r1802);
      real r1812#1 = RAdd(r1811,r1804);
      real r1813#1 = RAdd(r1812,r1806);
      real r1814#1 = RAdd(r1813,r1808);
      real r1815#1 = RAdd(r1814,r180A);
      real r1816#1 = RAdd(r1815,r180C);
      real r1817#1 = RAdd(r1816,r180E);
      real r1818#1 = RAdd(r1817,r1810);
      real r181A#2 = RMul(basisEval13C0,r1575);
      real r181C#1 = RMul(basisEval13C0,r157D);
      real r181E#2 = RMul(basisEval13C0,r1585);
      real r1820#2 = RMul(basisEval13C0,r15AF);
      real r1822#3 = RMul(basisEval13C0,r15B4);
      real r1824#1 = RMul(one13BB,r15B9);
      real r1826#2 = RMul(basisEval13C0,r15E3);
      real r1828#1 = RMul(coeff13BA,r15E8);
      real r182A#3 = RMul(basisEval13C0,r15ED);
      real r182B#2 = RAdd(r181A,r181C);
      real r182C#1 = RAdd(r182B,r181E);
      real r182D#1 = RAdd(r182C,r1820);
      real r182E#1 = RAdd(r182D,r1822);
      real r182F#1 = RAdd(r182E,r1824);
      real r1830#1 = RAdd(r182F,r1826);
      real r1831#1 = RAdd(r1830,r1828);
      real r1832#1 = RAdd(r1831,r182A);
      real r1834#1 = RMul(coeff13BA,r1553);
      real r1835#2 = RMul(basisEval13C0,r1599);
      real r1836#1 = RMul(one13BB,r15C3);
      real r1837#2 = RMul(basisEval13C0,r15C8);
      real r1838#1 = RAdd(r17F7,r1834);
      real r1839#1 = RAdd(r1838,r17EA);
      real r183A#1 = RAdd(r1839,r17EC);
      real r183B#1 = RAdd(r183A,r1835);
      real r183C#1 = RAdd(r183B,r1836);
      real r183D#1 = RAdd(r183C,r1837);
      real r183E#1 = RAdd(r183D,r17F6);
      real r183F#1 = RMul(coeff13BA,r156C);
      real r1840#2 = RMul(basisEval13C0,r15A9);
      real r1841#1 = RMul(one13BB,r15D3);
      real r1842#2 = RMul(basisEval13C0,r15D8);
      real r1843#1 = RAdd(r1811,r183F);
      real r1844#1 = RAdd(r1843,r1806);
      real r1845#1 = RAdd(r1844,r1808);
      real r1846#1 = RAdd(r1845,r1840);
      real r1847#1 = RAdd(r1846,r1841);
      real r1848#1 = RAdd(r1847,r1842);
      real r1849#1 = RAdd(r1848,r1810);
      real r184A#1 = RMul(coeff13BA,r1585);
      real r184B#2 = RMul(basisEval13C0,r15B9);
      real r184C#1 = RMul(one13BB,r15E3);
      real r184D#2 = RMul(basisEval13C0,r15E8);
      real r184E#1 = RAdd(r182B,r184A);
      real r184F#1 = RAdd(r184E,r1820);
      real r1850#1 = RAdd(r184F,r1822);
      real r1851#1 = RAdd(r1850,r184B);
      real r1852#1 = RAdd(r1851,r184C);
      real r1853#1 = RAdd(r1852,r184D);
      real r1854#1 = RAdd(r1853,r182A);
      real r1856#1 = RMul(one13BB,r154B);
      real r1857#1 = RMul(coeff13BA,r158F);
      real r1858#1 = RAdd(r17E4,r1856);
      real r1859#1 = RAdd(r1858,r17E8);
      real r185A#1 = RAdd(r1859,r1857);
      real r185B#1 = RAdd(r185A,r17EC);
      real r185C#1 = RAdd(r185B,r1835);
      real r185D#1 = RAdd(r185C,r17F1);
      real r185E#1 = RAdd(r185D,r1837);
      real r185F#1 = RAdd(r185E,r17F6);
      real r1860#1 = RMul(one13BB,r1564);
      real r1861#1 = RMul(coeff13BA,r159F);
      real r1862#1 = RAdd(r1800,r1860);
      real r1863#1 = RAdd(r1862,r1804);
      real r1864#1 = RAdd(r1863,r1861);
      real r1865#1 = RAdd(r1864,r1808);
      real r1866#1 = RAdd(r1865,r1840);
      real r1867#1 = RAdd(r1866,r180C);
      real r1868#1 = RAdd(r1867,r1842);
      real r1869#1 = RAdd(r1868,r1810);
      real r186A#1 = RMul(one13BB,r157D);
      real r186B#1 = RMul(coeff13BA,r15AF);
      real r186C#1 = RAdd(r181A,r186A);
      real r186D#1 = RAdd(r186C,r181E);
      real r186E#1 = RAdd(r186D,r186B);
      real r186F#1 = RAdd(r186E,r1822);
      real r1870#1 = RAdd(r186F,r184B);
      real r1871#1 = RAdd(r1870,r1826);
      real r1872#1 = RAdd(r1871,r184D);
      real r1873#1 = RAdd(r1872,r182A);
      real realLit190B#1 = 0.2e1;
      real op1_e3_l_21190A#9 = RMul(realLit190B,op1_e3_l_1917DE);
      real varAcc1911#1 = VIndex<3,0>(xn1910);
      real varAcc1912#1 = VIndex<3,1>(xn1910);
      real varAcc1913#1 = VIndex<3,2>(xn1910);
      real prod1918#2 = RMul(varAcc1911,prod13BC);
      real prod191A#1 = RMul(varAcc1912,one13BB);
      real prod191B#2 = RMul(one13BB,prod191A);
      real prod191D#1 = RMul(one13BB,varAcc1913);
      real prod191E#2 = RMul(one13BB,prod191D);
      real mult1921#1 = RMul(coeff13BA,prod191E);
      real mult1922#1 = RMul(coeff13BA,prod191B);
      real mult1923#1 = RMul(coeff13BA,prod1918);
      real sum1924#1 = RAdd(mult1922,mult1923);
      real sum1925#1 = RAdd(mult1921,sum1924);
      real sum1926#3 = RAdd(basisEval13BF,sum1925);
      real basisEval1928#3 = RMul(one13BB,prod1918);
      real basisEval1929#3 = RMul(one13BB,prod191B);
      real basisEval192A#3 = RMul(one13BB,prod191E);
      real r194B#1 = RMul(dof_load136C,sum1926);
      real r194E#1 = RMul(dof_load1375,basisEval1928);
      real r1951#1 = RMul(dof_load137E,basisEval1929);
      real r1954#1 = RMul(dof_load1387,basisEval192A);
      real r1955#1 = RAdd(r194B,r194E);
      real r1956#1 = RAdd(r1955,r1951);
      real r1957#1 = RAdd(r1956,r1954);
      real r1959#1 = RMul(dof_load136D,sum1926);
      real r195B#1 = RMul(dof_load1376,basisEval1928);
      real r195D#1 = RMul(dof_load137F,basisEval1929);
      real r195F#1 = RMul(dof_load1388,basisEval192A);
      real r1960#1 = RAdd(r1959,r195B);
      real r1961#1 = RAdd(r1960,r195D);
      real r1962#1 = RAdd(r1961,r195F);
      real r1964#1 = RMul(dof_load136E,sum1926);
      real r1966#1 = RMul(dof_load1377,basisEval1928);
      real r1968#1 = RMul(dof_load1380,basisEval1929);
      real r196A#1 = RMul(dof_load1389,basisEval192A);
      real r196B#1 = RAdd(r1964,r1966);
      real r196C#1 = RAdd(r196B,r1968);
      real r196D#1 = RAdd(r196C,r196A);
      tensor[3] probe_l_221948#1 = <tensor[3]>[r1957,r1962,r196D];
      real r1997#1 = RDiv(r17FE,op1_e3_l_21190A);
      real r1999#1 = RDiv(r1818,op1_e3_l_21190A);
      real r199B#1 = RDiv(r1832,op1_e3_l_21190A);
      tensor[3] tensor199C#1 = <tensor[3]>[r1997,r1999,r199B];
      real r199E#1 = RDiv(r183E,op1_e3_l_21190A);
      real r19A0#1 = RDiv(r1849,op1_e3_l_21190A);
      real r19A2#1 = RDiv(r1854,op1_e3_l_21190A);
      tensor[3] tensor19A3#1 = <tensor[3]>[r199E,r19A0,r19A2];
      real r19A5#1 = RDiv(r185F,op1_e3_l_21190A);
      real r19A7#1 = RDiv(r1869,op1_e3_l_21190A);
      real r19A9#1 = RDiv(r1873,op1_e3_l_21190A);
      tensor[3] tensor19AA#1 = <tensor[3]>[r19A5,r19A7,r19A9];
      tensor[3] op1_e3_l_2419C2#3 = VSub<3>(probe_l_221948,pos1330);
      real vdot19C7#1 = VDot<3>(tensor199C,op1_e3_l_2419C2);
      real vdot19C9#1 = VDot<3>(tensor19A3,op1_e3_l_2419C2);
      real vdot19CB#1 = VDot<3>(tensor19AA,op1_e3_l_2419C2);
      tensor[3] op1_e3_l_2519C5#3 = <tensor[3]>[vdot19C7,vdot19C9,vdot19CB];
      tensor[3] xn19D4#4 = VSub<3>(xn1910,op1_e3_l_2519C5);
      real _t19D7#2 = 0.1e-7;
      real _t19D9#1 = RMul(_t19D7,_t19D7);
      real _t1A3B#1 = VDot<3>(op1_e3_l_2519C5,op1_e3_l_2519C5);
      bool _t1A3E#1 = GTE<real>(_t19D9,_t1A3B);
      if _t1A3E then goto ASSIGN1A44 else goto JOIN1A6D
    ASSIGN1A44:  preds = [COND1A40]
      real _t1A43#4 = 0.1e-8;
      real _t1A45#1 = RAdd(one13BB,_t1A43);
      tensor[3] _t1A48#1 = <tensor[3]>[one13BB,one13BB,one13BB];
      real _t1A4A#1 = VDot<3>(_t1A48,xn19D4);
      bool _t1A4D#1 = GT<real>(_t1A45,_t1A4A);
      tensor[3] _t1A4F#1 = <tensor[3]>[_t1A43,_t1A43,_t1A43];
      tensor[3] _t1A51#3 = VAdd<3>(_t1A4F,xn19D4);
      real _t1A54#1 = VIndex<3,0>(_t1A51);
      real _t1A56#3 = -0.e0;
      bool _t1A58#1 = GT<real>(_t1A54,_t1A56);
      real _t1A5A#1 = VIndex<3,1>(_t1A51);
      bool _t1A5C#1 = GT<real>(_t1A5A,_t1A56);
      real _t1A5E#1 = VIndex<3,2>(_t1A51);
      bool _t1A60#1 = GT<real>(_t1A5E,_t1A56);
      bool _t1A62#1 = BAnd(_t1A5C,_t1A60);
      bool _t1A64#1 = BAnd(_t1A58,_t1A62);
      bool _t1A66#1 = BAnd(_t1A4D,_t1A64);
      if _t1A66 then goto ASSIGN1A6A else goto JOIN1A6C
    ASSIGN1A6A:  preds = [COND1A68]
      femData:MeshPos _t1A69#1 = ExtractFemItemN<[femData:Mesh,int,tensor[3],tensor[3]],femData:MeshPos,AllBuild(MeshPos),0000,"",[],int>(mesh132F,cellItter133A,xn19D4,pos1330);
      return _t1A69
      goto JOIN1A6C
    JOIN1A6C:  preds = [*RETURN(_t1A69)1A6B,COND1A68]
      goto JOIN1A6D
    JOIN1A6D:  preds = [JOIN1A6C,COND1A40]
      goto FOREACH1341
    NEXT1A70:  preds = [FOREACH1341]
      goto FOREACH133B
    ASSIGN1A72:  preds = [FOREACH133B]
      string _t1A71#1 = "Bad end 2";
      string _t1A73#1 = "\n";
      Print<[string,string]>(_t1A71,_t1A73);
      femData:MeshPos _t1A76#1 = ExtractFemItemN<[femData:Mesh],femData:MeshPos,InvalidBuild(MeshPos),0000,"",[],int>(mesh132F);
      return _t1A76
}
## input initialization
  ENTRY12CE:  preds = []
    return
## global-variable initialization
  ENTRY12D0:  preds = []
    femData:Mesh cube12D1#3 = globals.cube12C7;
    femData:Space 0space0342_intermedateGlobal12D3#1 = globals.0space0342_intermedateGlobal12C8;
    femData:FemFunc 0data0344_intermedateGlobal12D5#1 = globals.0data0344_intermedateGlobal12C9;
    int _t12D7#1 = 0;
    int _t12D9#1 = 1;
    int _t12DB#1 = ExtractFemItem<int,NumCell(Mesh)>(cube12D1);
    int _t12DD#1 = ISub(_t12DB,_t12D9);
    int[] _t12DF#1 = Range(_t12D7,_t12DD);
    femData:MeshCell[] _t12E1#1 = <femData:MeshCell[]>{};
  FOREACH12E4:  preds = [ASSIGN12E2,NEXT12EA]
    foreach (_t12E3 in _t12DF) on exit goto GASSIGN12EB
      femData:MeshCell[] _t12E8#2 = phi(_t12E1,_t12E7)
    femData:MeshCell _t12E5#1 = LoadFem<femData:MeshCell>(cube12D1,_t12E3);
    femData:MeshCell[] _t12E7#1 = Append<femData:MeshCell>(_t12E8,_t12E5);
    goto FOREACH12E4
  GASSIGN12EB:  preds = [FOREACH12E4]
    globals.0cell_cube12CA = _t12E8;
    femData:Space space12EC#1 = LoadFem<femData:Space>(0space0342_intermedateGlobal12D3,cube12D1);
    femData:FemFunc data12EE#2 = LoadFem<femData:FemFunc>(0data0344_intermedateGlobal12D5,space12EC);
    femData:Space _t12F0#2 = ExtractFem<femData:Space,femData:FemFunc>(data12EE);
    femData:Mesh _t12F2#1 = ExtractFem<femData:Mesh,femData:Space>(_t12F0);
    globals._t12CB = _t12F2;
    globals._tX12CC = _t12F0;
    globals.data12CD = data12EE;
    return
## strand
  strand gg (tensor[3] i12F8#1)
    state:
      output tensor[3] target;
      output tensor[3] translated;
      output bool valid;
      output femData:MeshCell c;
      output real result;
      output tensor[3] gradResult;
      output tensor[3] gradResultp;
    state init
      ENTRY1300:  preds = []
        femData:MeshCell[] 0cell_cube1301#1 = globals.0cell_cube12CA;
        real _nan1303#4 = nan;
        tensor[3] translated1305#3 = <tensor[3]>[_nan1303,_nan1303,_nan1303];
        bool valid1307#1 = false;
        int _t1309#1 = 0;
        femData:MeshCell c130B#1 = Subscript<femData:MeshCell[]>(0cell_cube1301,_t1309);
        self.target = i12F8;
        self.translated = translated1305;
        self.valid = valid1307;
        self.c = c130B;
        self.result = _nan1303;
        self.gradResult = translated1305;
        self.gradResultp = translated1305;
        return
    end state init
    method update
        ENTRY1315:  preds = []
          femData:Mesh _t1316#17 = globals._t12CB;
          femData:Space _t1318#35 = globals._tX12CC;
          femData:FemFunc data131A#35 = globals.data12CD;
          femData:Mesh cube131C#1 = globals.cube12C7;
          tensor[3] target131E#3 = self.target;
          tensor[3] translated1320#1 = self.translated;
          femData:MeshCell c1322#1 = self.c;
          real result1324#1 = self.result;
          tensor[3] gradResult1326#1 = self.gradResult;
          string _t1328#1 = "Running on ";
          string _t132A#1 = "\n";
          Print<[string,tensor[3],string]>(_t1328,target131E,_t132A);
          femData:MeshPos p132D#4 = findPos132E (cube131C,target131E);
          bool valid1A7A#2 = ExtractFemItem<bool,Valid(MeshPos)>(p132D);
          if valid1A7A then goto ASSIGN1A7E else goto ASSIGN2D44
        ASSIGN1A7E:  preds = [COND1A7C]
          femData:Mesh _t1A7D#1 = ExtractFem<femData:Mesh,femData:MeshPos>(p132D);
          int _t1A7F#1 = ExtractFemItem<int,CellIndex(MeshPos)>(p132D);
          femData:MeshCell c1A81#1 = LoadFem<femData:MeshCell>(_t1A7D,_t1A7F);
          tensor[3] translated1A83#1 = ExtractFemItem<tensor[3],RefPos(MeshPos)>(p132D);
          femData:MeshPos callFindPos1A85#2 = findPos132E (_t1316,target131E);
          int intPos1A87#2 = ExtractFemItem<int,CellIndex(Mesh)>(callFindPos1A85);
          tensor[3] refPos1A89#3 = ExtractFemItem<tensor[3],RefPos(Mesh)>(callFindPos1A85);
          int ilit1A8C#1 = 35;
          int mulRes1A8D#35 = IMul(intPos1A87,ilit1A8C);
          int idx1A90#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,mulRes1A8D);
          int ilit1A91#41 = 1;
          int addRes1A92#1 = IAdd(mulRes1A8D,ilit1A91);
          int idx1A93#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1A92);
          int ilit1A94#6 = 2;
          int addRes1A95#1 = IAdd(mulRes1A8D,ilit1A94);
          int idx1A96#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1A95);
          int ilit1A97#6 = 3;
          int addRes1A98#1 = IAdd(mulRes1A8D,ilit1A97);
          int idx1A99#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1A98);
          int ilit1A9A#2 = 4;
          int addRes1A9B#1 = IAdd(mulRes1A8D,ilit1A9A);
          int idx1A9C#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1A9B);
          int ilit1A9D#1 = 5;
          int addRes1A9E#1 = IAdd(mulRes1A8D,ilit1A9D);
          int idx1A9F#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1A9E);
          int ilit1AA0#1 = 6;
          int addRes1AA1#1 = IAdd(mulRes1A8D,ilit1AA0);
          int idx1AA2#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AA1);
          int ilit1AA3#1 = 7;
          int addRes1AA4#1 = IAdd(mulRes1A8D,ilit1AA3);
          int idx1AA5#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AA4);
          int ilit1AA6#1 = 8;
          int addRes1AA7#1 = IAdd(mulRes1A8D,ilit1AA6);
          int idx1AA8#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AA7);
          int ilit1AA9#1 = 9;
          int addRes1AAA#1 = IAdd(mulRes1A8D,ilit1AA9);
          int idx1AAB#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AAA);
          int ilit1AAC#1 = 10;
          int addRes1AAD#1 = IAdd(mulRes1A8D,ilit1AAC);
          int idx1AAE#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AAD);
          int ilit1AAF#1 = 11;
          int addRes1AB0#1 = IAdd(mulRes1A8D,ilit1AAF);
          int idx1AB1#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AB0);
          int ilit1AB2#1 = 12;
          int addRes1AB3#1 = IAdd(mulRes1A8D,ilit1AB2);
          int idx1AB4#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AB3);
          int ilit1AB5#1 = 13;
          int addRes1AB6#1 = IAdd(mulRes1A8D,ilit1AB5);
          int idx1AB7#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AB6);
          int ilit1AB8#1 = 14;
          int addRes1AB9#1 = IAdd(mulRes1A8D,ilit1AB8);
          int idx1ABA#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AB9);
          int ilit1ABB#1 = 15;
          int addRes1ABC#1 = IAdd(mulRes1A8D,ilit1ABB);
          int idx1ABD#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1ABC);
          int ilit1ABE#1 = 16;
          int addRes1ABF#1 = IAdd(mulRes1A8D,ilit1ABE);
          int idx1AC0#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1ABF);
          int ilit1AC1#1 = 17;
          int addRes1AC2#1 = IAdd(mulRes1A8D,ilit1AC1);
          int idx1AC3#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AC2);
          int ilit1AC4#1 = 18;
          int addRes1AC5#1 = IAdd(mulRes1A8D,ilit1AC4);
          int idx1AC6#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AC5);
          int ilit1AC7#1 = 19;
          int addRes1AC8#1 = IAdd(mulRes1A8D,ilit1AC7);
          int idx1AC9#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AC8);
          int ilit1ACA#1 = 20;
          int addRes1ACB#1 = IAdd(mulRes1A8D,ilit1ACA);
          int idx1ACC#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1ACB);
          int ilit1ACD#1 = 21;
          int addRes1ACE#1 = IAdd(mulRes1A8D,ilit1ACD);
          int idx1ACF#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1ACE);
          int ilit1AD0#1 = 22;
          int addRes1AD1#1 = IAdd(mulRes1A8D,ilit1AD0);
          int idx1AD2#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AD1);
          int ilit1AD3#1 = 23;
          int addRes1AD4#1 = IAdd(mulRes1A8D,ilit1AD3);
          int idx1AD5#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AD4);
          int ilit1AD6#1 = 24;
          int addRes1AD7#1 = IAdd(mulRes1A8D,ilit1AD6);
          int idx1AD8#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AD7);
          int ilit1AD9#1 = 25;
          int addRes1ADA#1 = IAdd(mulRes1A8D,ilit1AD9);
          int idx1ADB#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1ADA);
          int ilit1ADC#1 = 26;
          int addRes1ADD#1 = IAdd(mulRes1A8D,ilit1ADC);
          int idx1ADE#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1ADD);
          int ilit1ADF#1 = 27;
          int addRes1AE0#1 = IAdd(mulRes1A8D,ilit1ADF);
          int idx1AE1#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AE0);
          int ilit1AE2#1 = 28;
          int addRes1AE3#1 = IAdd(mulRes1A8D,ilit1AE2);
          int idx1AE4#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AE3);
          int ilit1AE5#1 = 29;
          int addRes1AE6#1 = IAdd(mulRes1A8D,ilit1AE5);
          int idx1AE7#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AE6);
          int ilit1AE8#1 = 30;
          int addRes1AE9#1 = IAdd(mulRes1A8D,ilit1AE8);
          int idx1AEA#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AE9);
          int ilit1AEB#1 = 31;
          int addRes1AEC#1 = IAdd(mulRes1A8D,ilit1AEB);
          int idx1AED#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AEC);
          int ilit1AEE#1 = 32;
          int addRes1AEF#1 = IAdd(mulRes1A8D,ilit1AEE);
          int idx1AF0#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AEF);
          int ilit1AF1#1 = 33;
          int addRes1AF2#1 = IAdd(mulRes1A8D,ilit1AF1);
          int idx1AF3#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AF2);
          int ilit1AF4#1 = 34;
          int addRes1AF5#1 = IAdd(mulRes1A8D,ilit1AF4);
          int idx1AF6#1 = ExtractFemItem2<int,int,ExtractIndex(Space)>(_t1318,addRes1AF5);
          int mulRes1B69#1 = IMul(ilit1A91,idx1A90);
          int mulRes1B6B#1 = IMul(ilit1A91,idx1A93);
          int mulRes1B6E#1 = IMul(ilit1A91,idx1A96);
          int mulRes1B71#1 = IMul(ilit1A91,idx1A99);
          int mulRes1B74#1 = IMul(ilit1A91,idx1A9C);
          int mulRes1B77#1 = IMul(ilit1A91,idx1A9F);
          int mulRes1B7A#1 = IMul(ilit1A91,idx1AA2);
          int mulRes1B7D#1 = IMul(ilit1A91,idx1AA5);
          int mulRes1B80#1 = IMul(ilit1A91,idx1AA8);
          int mulRes1B83#1 = IMul(ilit1A91,idx1AAB);
          int mulRes1B86#1 = IMul(ilit1A91,idx1AAE);
          int mulRes1B89#1 = IMul(ilit1A91,idx1AB1);
          int mulRes1B8C#1 = IMul(ilit1A91,idx1AB4);
          int mulRes1B8F#1 = IMul(ilit1A91,idx1AB7);
          int mulRes1B92#1 = IMul(ilit1A91,idx1ABA);
          int mulRes1B95#1 = IMul(ilit1A91,idx1ABD);
          int mulRes1B98#1 = IMul(ilit1A91,idx1AC0);
          int mulRes1B9B#1 = IMul(ilit1A91,idx1AC3);
          int mulRes1B9E#1 = IMul(ilit1A91,idx1AC6);
          int mulRes1BA1#1 = IMul(ilit1A91,idx1AC9);
          int mulRes1BA4#1 = IMul(ilit1A91,idx1ACC);
          int mulRes1BA7#1 = IMul(ilit1A91,idx1ACF);
          int mulRes1BAA#1 = IMul(ilit1A91,idx1AD2);
          int mulRes1BAD#1 = IMul(ilit1A91,idx1AD5);
          int mulRes1BB0#1 = IMul(ilit1A91,idx1AD8);
          int mulRes1BB3#1 = IMul(ilit1A91,idx1ADB);
          int mulRes1BB6#1 = IMul(ilit1A91,idx1ADE);
          int mulRes1BB9#1 = IMul(ilit1A91,idx1AE1);
          int mulRes1BBC#1 = IMul(ilit1A91,idx1AE4);
          int mulRes1BBF#1 = IMul(ilit1A91,idx1AE7);
          int mulRes1BC2#1 = IMul(ilit1A91,idx1AEA);
          int mulRes1BC5#1 = IMul(ilit1A91,idx1AED);
          int mulRes1BC8#1 = IMul(ilit1A91,idx1AF0);
          int mulRes1BCB#1 = IMul(ilit1A91,idx1AF3);
          int mulRes1BCE#1 = IMul(ilit1A91,idx1AF6);
          real dof1BCF#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B69);
          real dof1BD0#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B6B);
          real dof1BD1#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B6E);
          real dof1BD2#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B71);
          real dof1BD3#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B74);
          real dof1BD4#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B77);
          real dof1BD5#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B7A);
          real dof1BD6#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B7D);
          real dof1BD7#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B80);
          real dof1BD8#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B83);
          real dof1BD9#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B86);
          real dof1BDA#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B89);
          real dof1BDB#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B8C);
          real dof1BDC#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B8F);
          real dof1BDD#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B92);
          real dof1BDE#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B95);
          real dof1BDF#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B98);
          real dof1BE0#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B9B);
          real dof1BE1#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1B9E);
          real dof1BE2#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BA1);
          real dof1BE3#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BA4);
          real dof1BE4#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BA7);
          real dof1BE5#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BAA);
          real dof1BE6#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BAD);
          real dof1BE7#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BB0);
          real dof1BE8#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BB3);
          real dof1BE9#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BB6);
          real dof1BEA#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BB9);
          real dof1BEB#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BBC);
          real dof1BEC#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BBF);
          real dof1BED#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BC2);
          real dof1BEE#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BC5);
          real dof1BEF#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BC8);
          real dof1BF0#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BCB);
          real dof1BF1#1 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(data131A,mulRes1BCE);
          tensor[35] dofs1BF2#4 = <tensor[35]>[dof1BCF,dof1BD0,dof1BD1,dof1BD2,dof1BD3,dof1BD4,dof1BD5,dof1BD6,dof1BD7,dof1BD8,dof1BD9,dof1BDA,dof1BDB,dof1BDC,dof1BDD,dof1BDE,dof1BDF,dof1BE0,dof1BE1,dof1BE2,dof1BE3,dof1BE4,dof1BE5,dof1BE6,dof1BE7,dof1BE8,dof1BE9,dof1BEA,dof1BEB,dof1BEC,dof1BED,dof1BEE,dof1BEF,dof1BF0,dof1BF1];
          real varAcc1C82#14 = VIndex<3,0>(refPos1A89);
          real varAcc1C83#8 = VIndex<3,1>(refPos1A89);
          real varAcc1C84#8 = VIndex<3,2>(refPos1A89);
          real coeff1C85#3 = 0.106666666667e2;
          real prod21C87#7 = RMul(varAcc1C82,varAcc1C82);
          real prod31C88#4 = RMul(prod21C87,varAcc1C82);
          real prod41C89#1 = RMul(prod31C88,varAcc1C82);
          real one1C8A#44 = 0.1e1;
          real prod1C8B#5 = RMul(one1C8A,one1C8A);
          real prod1C8C#3 = RMul(prod41C89,prod1C8B);
          real coeff1C8D#9 = 0.426666666667e2;
          real prod1C8F#4 = RMul(varAcc1C83,one1C8A);
          real prod1C90#4 = RMul(prod31C88,prod1C8F);
          real prod1C92#4 = RMul(one1C8A,varAcc1C84);
          real prod1C93#4 = RMul(prod31C88,prod1C92);
          real coeff1C94#3 = -0.266666666667e2;
          real prod1C95#10 = RMul(prod31C88,prod1C8B);
          real coeff1C96#9 = 0.64e2;
          real prod21C97#4 = RMul(varAcc1C83,varAcc1C83);
          real prod1C98#3 = RMul(prod21C97,one1C8A);
          real prod1C99#3 = RMul(prod21C87,prod1C98);
          real coeff1C9A#18 = 0.128e3;
          real prod1C9B#3 = RMul(varAcc1C83,varAcc1C84);
          real prod1C9C#4 = RMul(prod21C87,prod1C9B);
          real coeff1C9D#9 = -0.80e2;
          real prod1C9E#16 = RMul(prod21C87,prod1C8F);
          real prod21C9F#4 = RMul(varAcc1C84,varAcc1C84);
          real prod1CA0#3 = RMul(one1C8A,prod21C9F);
          real prod1CA1#3 = RMul(prod21C87,prod1CA0);
          real prod1CA2#16 = RMul(prod21C87,prod1C92);
          real coeff1CA3#3 = 0.233333333333e2;
          real prod1CA4#18 = RMul(prod21C87,prod1C8B);
          real prod31CA5#3 = RMul(prod21C97,varAcc1C83);
          real prod1CA6#2 = RMul(prod31CA5,one1C8A);
          real prod1CA7#4 = RMul(varAcc1C82,prod1CA6);
          real prod1CA8#2 = RMul(prod21C97,varAcc1C84);
          real prod1CA9#4 = RMul(varAcc1C82,prod1CA8);
          real prod1CAA#16 = RMul(varAcc1C82,prod1C98);
          real prod1CAB#2 = RMul(varAcc1C83,prod21C9F);
          real prod1CAC#4 = RMul(varAcc1C82,prod1CAB);
          real coeff1CAD#4 = -0.160e3;
          real prod1CAE#9 = RMul(varAcc1C82,prod1C9B);
          real coeff1CAF#6 = 0.466666666667e2;
          real prod1CB0#19 = RMul(varAcc1C82,prod1C8F);
          real prod31CB1#3 = RMul(prod21C9F,varAcc1C84);
          real prod1CB2#2 = RMul(one1C8A,prod31CB1);
          real prod1CB3#4 = RMul(varAcc1C82,prod1CB2);
          real prod1CB4#16 = RMul(varAcc1C82,prod1CA0);
          real prod1CB5#19 = RMul(varAcc1C82,prod1C92);
          real coeff1CB6#4 = -0.833333333333e1;
          real prod1CB7#16 = RMul(varAcc1C82,prod1C8B);
          real prod41CB8#1 = RMul(prod31CA5,varAcc1C83);
          real prod1CB9#1 = RMul(prod41CB8,one1C8A);
          real prod1CBA#3 = RMul(one1C8A,prod1CB9);
          real prod1CBB#1 = RMul(prod31CA5,varAcc1C84);
          real prod1CBC#4 = RMul(one1C8A,prod1CBB);
          real prod1CBD#10 = RMul(one1C8A,prod1CA6);
          real prod1CBE#1 = RMul(prod21C97,prod21C9F);
          real prod1CBF#3 = RMul(one1C8A,prod1CBE);
          real prod1CC0#16 = RMul(one1C8A,prod1CA8);
          real prod1CC1#18 = RMul(one1C8A,prod1C98);
          real prod1CC2#1 = RMul(varAcc1C83,prod31CB1);
          real prod1CC3#4 = RMul(one1C8A,prod1CC2);
          real prod1CC4#16 = RMul(one1C8A,prod1CAB);
          real prod1CC5#19 = RMul(one1C8A,prod1C9B);
          real prod1CC6#16 = RMul(one1C8A,prod1C8F);
          real prod41CC7#1 = RMul(prod31CB1,varAcc1C84);
          real prod1CC8#1 = RMul(one1C8A,prod41CC7);
          real prod1CC9#3 = RMul(one1C8A,prod1CC8);
          real prod1CCA#10 = RMul(one1C8A,prod1CB2);
          real prod1CCB#18 = RMul(one1C8A,prod1CA0);
          real prod1CCC#16 = RMul(one1C8A,prod1C92);
          real prod1CCD#6 = RMul(one1C8A,prod1C8B);
          real mult1CCE#10 = RMul(one1C8A,prod1CCD);
          real mult1CCF#1 = RMul(coeff1CB6,prod1CCC);
          real mult1CD0#1 = RMul(coeff1CA3,prod1CCB);
          real mult1CD1#1 = RMul(coeff1C94,prod1CCA);
          real mult1CD2#2 = RMul(coeff1C85,prod1CC9);
          real mult1CD3#1 = RMul(coeff1CB6,prod1CC6);
          real mult1CD4#1 = RMul(coeff1CAF,prod1CC5);
          real mult1CD5#1 = RMul(coeff1C9D,prod1CC4);
          real mult1CD6#2 = RMul(coeff1C8D,prod1CC3);
          real mult1CD7#1 = RMul(coeff1CA3,prod1CC1);
          real mult1CD8#1 = RMul(coeff1C9D,prod1CC0);
          real mult1CD9#4 = RMul(coeff1C96,prod1CBF);
          real mult1CDA#1 = RMul(coeff1C94,prod1CBD);
          real mult1CDB#2 = RMul(coeff1C8D,prod1CBC);
          real mult1CDC#2 = RMul(coeff1C85,prod1CBA);
          real mult1CDD#1 = RMul(coeff1CB6,prod1CB7);
          real mult1CDE#1 = RMul(coeff1CAF,prod1CB5);
          real mult1CDF#1 = RMul(coeff1C9D,prod1CB4);
          real mult1CE0#2 = RMul(coeff1C8D,prod1CB3);
          real mult1CE1#1 = RMul(coeff1CAF,prod1CB0);
          real mult1CE2#1 = RMul(coeff1CAD,prod1CAE);
          real mult1CE3#4 = RMul(coeff1C9A,prod1CAC);
          real mult1CE4#1 = RMul(coeff1C9D,prod1CAA);
          real mult1CE5#4 = RMul(coeff1C9A,prod1CA9);
          real mult1CE6#2 = RMul(coeff1C8D,prod1CA7);
          real mult1CE7#1 = RMul(coeff1CA3,prod1CA4);
          real mult1CE8#1 = RMul(coeff1C9D,prod1CA2);
          real mult1CE9#3 = RMul(coeff1C96,prod1CA1);
          real mult1CEA#1 = RMul(coeff1C9D,prod1C9E);
          real mult1CEB#4 = RMul(coeff1C9A,prod1C9C);
          real mult1CEC#3 = RMul(coeff1C96,prod1C99);
          real mult1CED#1 = RMul(coeff1C94,prod1C95);
          real mult1CEE#2 = RMul(coeff1C8D,prod1C93);
          real mult1CEF#2 = RMul(coeff1C8D,prod1C90);
          real mult1CF0#2 = RMul(coeff1C85,prod1C8C);
          real sum1CF1#1 = RAdd(mult1CEF,mult1CF0);
          real sum1CF2#1 = RAdd(mult1CEE,sum1CF1);
          real sum1CF3#1 = RAdd(mult1CED,sum1CF2);
          real sum1CF4#1 = RAdd(mult1CEC,sum1CF3);
          real sum1CF5#1 = RAdd(mult1CEB,sum1CF4);
          real sum1CF6#1 = RAdd(mult1CEA,sum1CF5);
          real sum1CF7#1 = RAdd(mult1CE9,sum1CF6);
          real sum1CF8#1 = RAdd(mult1CE8,sum1CF7);
          real sum1CF9#1 = RAdd(mult1CE7,sum1CF8);
          real sum1CFA#1 = RAdd(mult1CE6,sum1CF9);
          real sum1CFB#1 = RAdd(mult1CE5,sum1CFA);
          real sum1CFC#1 = RAdd(mult1CE4,sum1CFB);
          real sum1CFD#1 = RAdd(mult1CE3,sum1CFC);
          real sum1CFE#1 = RAdd(mult1CE2,sum1CFD);
          real sum1CFF#1 = RAdd(mult1CE1,sum1CFE);
          real sum1D00#1 = RAdd(mult1CE0,sum1CFF);
          real sum1D01#1 = RAdd(mult1CDF,sum1D00);
          real sum1D02#1 = RAdd(mult1CDE,sum1D01);
          real sum1D03#1 = RAdd(mult1CDD,sum1D02);
          real sum1D04#1 = RAdd(mult1CDC,sum1D03);
          real sum1D05#1 = RAdd(mult1CDB,sum1D04);
          real sum1D06#1 = RAdd(mult1CDA,sum1D05);
          real sum1D07#1 = RAdd(mult1CD9,sum1D06);
          real sum1D08#1 = RAdd(mult1CD8,sum1D07);
          real sum1D09#1 = RAdd(mult1CD7,sum1D08);
          real sum1D0A#1 = RAdd(mult1CD6,sum1D09);
          real sum1D0B#1 = RAdd(mult1CD5,sum1D0A);
          real sum1D0C#1 = RAdd(mult1CD4,sum1D0B);
          real sum1D0D#1 = RAdd(mult1CD3,sum1D0C);
          real sum1D0E#1 = RAdd(mult1CD2,sum1D0D);
          real sum1D0F#1 = RAdd(mult1CD1,sum1D0E);
          real sum1D10#1 = RAdd(mult1CD0,sum1D0F);
          real sum1D11#1 = RAdd(mult1CCF,sum1D10);
          real sum1D12#1 = RAdd(mult1CCE,sum1D11);
          real coeff1D14#12 = -0.16e2;
          real coeff1D15#3 = 0.733333333333e1;
          real coeff1D16#22 = -0.1e1;
          real mult1D17#1 = RMul(coeff1D16,prod1CB7);
          real mult1D18#1 = RMul(coeff1D15,prod1CA4);
          real mult1D19#1 = RMul(coeff1D14,prod1C95);
          real sum1D1A#1 = RAdd(mult1D19,mult1CF0);
          real sum1D1B#1 = RAdd(mult1D18,sum1D1A);
          real sum1D1C#1 = RAdd(mult1D17,sum1D1B);
          real mult1D1E#1 = RMul(coeff1D16,prod1CC6);
          real mult1D1F#1 = RMul(coeff1D15,prod1CC1);
          real mult1D20#1 = RMul(coeff1D14,prod1CBD);
          real sum1D21#1 = RAdd(mult1D20,mult1CDC);
          real sum1D22#1 = RAdd(mult1D1F,sum1D21);
          real sum1D23#1 = RAdd(mult1D1E,sum1D22);
          real mult1D25#1 = RMul(coeff1D16,prod1CCC);
          real mult1D26#1 = RMul(coeff1D15,prod1CCB);
          real mult1D27#1 = RMul(coeff1D14,prod1CCA);
          real sum1D28#1 = RAdd(mult1D27,mult1CD2);
          real sum1D29#1 = RAdd(mult1D26,sum1D28);
          real sum1D2A#1 = RAdd(mult1D25,sum1D29);
          real coeff1D2C#16 = -0.32e2;
          real coeff1D2D#7 = 0.533333333333e1;
          real mult1D2E#2 = RMul(coeff1D2D,prod1CC5);
          real mult1D2F#1 = RMul(coeff1D2C,prod1CC0);
          real sum1D30#1 = RAdd(mult1D2F,mult1CDB);
          real sum1D31#1 = RAdd(mult1D2E,sum1D30);
          real coeff1D33#6 = 0.4e1;
          real mult1D34#1 = RMul(coeff1D33,prod1CC5);
          real mult1D35#2 = RMul(coeff1D14,prod1CC4);
          real mult1D36#2 = RMul(coeff1D14,prod1CC0);
          real sum1D37#1 = RAdd(mult1D36,mult1CD9);
          real sum1D38#1 = RAdd(mult1D35,sum1D37);
          real sum1D39#1 = RAdd(mult1D34,sum1D38);
          real mult1D3B#1 = RMul(coeff1D2C,prod1CC4);
          real sum1D3C#1 = RAdd(mult1D3B,mult1CD6);
          real sum1D3D#1 = RAdd(mult1D2E,sum1D3C);
          real mult1D3F#2 = RMul(coeff1D2D,prod1CB5);
          real mult1D40#1 = RMul(coeff1D2C,prod1CA2);
          real sum1D41#1 = RAdd(mult1D40,mult1CEE);
          real sum1D42#1 = RAdd(mult1D3F,sum1D41);
          real mult1D44#1 = RMul(coeff1D33,prod1CB5);
          real mult1D45#2 = RMul(coeff1D14,prod1CB4);
          real mult1D46#1 = RMul(coeff1D14,prod1CA2);
          real sum1D47#2 = RAdd(mult1D46,mult1CE9);
          real sum1D48#1 = RAdd(mult1D45,sum1D47);
          real sum1D49#1 = RAdd(mult1D44,sum1D48);
          real mult1D4B#1 = RMul(coeff1D2C,prod1CB4);
          real sum1D4C#1 = RAdd(mult1D4B,mult1CE0);
          real sum1D4D#1 = RAdd(mult1D3F,sum1D4C);
          real mult1D4F#2 = RMul(coeff1D2D,prod1CB0);
          real mult1D50#1 = RMul(coeff1D2C,prod1C9E);
          real sum1D51#1 = RAdd(mult1D50,mult1CEF);
          real sum1D52#1 = RAdd(mult1D4F,sum1D51);
          real mult1D54#1 = RMul(coeff1D33,prod1CB0);
          real mult1D55#2 = RMul(coeff1D14,prod1CAA);
          real mult1D56#1 = RMul(coeff1D14,prod1C9E);
          real sum1D57#2 = RAdd(mult1D56,mult1CEC);
          real sum1D58#1 = RAdd(mult1D55,sum1D57);
          real sum1D59#1 = RAdd(mult1D54,sum1D58);
          real mult1D5B#1 = RMul(coeff1D2C,prod1CAA);
          real sum1D5C#1 = RAdd(mult1D5B,mult1CE6);
          real sum1D5D#1 = RAdd(mult1D4F,sum1D5C);
          real coeff1D5F#12 = -0.426666666667e2;
          real coeff1D60#21 = -0.128e3;
          real coeff1D61#18 = 0.96e2;
          real coeff1D62#10 = -0.256e3;
          real coeff1D63#13 = 0.192e3;
          real coeff1D64#9 = -0.693333333333e2;
          real coeff1D65#4 = 0.16e2;
          real mult1D66#1 = RMul(coeff1D65,prod1CCC);
          real mult1D67#1 = RMul(coeff1D64,prod1CCB);
          real mult1D68#1 = RMul(coeff1D61,prod1CCA);
          real mult1D69#2 = RMul(coeff1D5F,prod1CC9);
          real mult1D6A#2 = RMul(coeff1D64,prod1CC5);
          real mult1D6B#1 = RMul(coeff1D63,prod1CC4);
          real mult1D6C#2 = RMul(coeff1D60,prod1CC3);
          real mult1D6D#1 = RMul(coeff1D61,prod1CC0);
          real mult1D6E#4 = RMul(coeff1D60,prod1CBF);
          real mult1D6F#2 = RMul(coeff1D5F,prod1CBC);
          real mult1D70#2 = RMul(coeff1D64,prod1CB5);
          real mult1D71#1 = RMul(coeff1D63,prod1CB4);
          real mult1D72#2 = RMul(coeff1D60,prod1CB3);
          real mult1D73#3 = RMul(coeff1D63,prod1CAE);
          real mult1D74#2 = RMul(coeff1D62,prod1CAC);
          real mult1D75#4 = RMul(coeff1D60,prod1CA9);
          real mult1D76#1 = RMul(coeff1D61,prod1CA2);
          real mult1D77#4 = RMul(coeff1D60,prod1CA1);
          real mult1D78#4 = RMul(coeff1D60,prod1C9C);
          real mult1D79#2 = RMul(coeff1D5F,prod1C93);
          real sum1D7A#1 = RAdd(mult1D78,mult1D79);
          real sum1D7B#1 = RAdd(mult1D77,sum1D7A);
          real sum1D7C#1 = RAdd(mult1D76,sum1D7B);
          real sum1D7D#1 = RAdd(mult1D75,sum1D7C);
          real sum1D7E#1 = RAdd(mult1D74,sum1D7D);
          real sum1D7F#1 = RAdd(mult1D73,sum1D7E);
          real sum1D80#1 = RAdd(mult1D72,sum1D7F);
          real sum1D81#1 = RAdd(mult1D71,sum1D80);
          real sum1D82#1 = RAdd(mult1D70,sum1D81);
          real sum1D83#1 = RAdd(mult1D6F,sum1D82);
          real sum1D84#1 = RAdd(mult1D6E,sum1D83);
          real sum1D85#1 = RAdd(mult1D6D,sum1D84);
          real sum1D86#1 = RAdd(mult1D6C,sum1D85);
          real sum1D87#1 = RAdd(mult1D6B,sum1D86);
          real sum1D88#1 = RAdd(mult1D6A,sum1D87);
          real sum1D89#1 = RAdd(mult1D69,sum1D88);
          real sum1D8A#1 = RAdd(mult1D68,sum1D89);
          real sum1D8B#1 = RAdd(mult1D67,sum1D8A);
          real sum1D8C#1 = RAdd(mult1D66,sum1D8B);
          real coeff1D8E#9 = -0.144e3;
          real coeff1D8F#6 = 0.28e2;
          real coeff1D90#3 = 0.76e2;
          real coeff1D91#4 = -0.12e2;
          real mult1D92#1 = RMul(coeff1D91,prod1CCC);
          real mult1D93#1 = RMul(coeff1D90,prod1CCB);
          real mult1D94#4 = RMul(coeff1D60,prod1CCA);
          real mult1D95#1 = RMul(coeff1C96,prod1CC9);
          real mult1D96#2 = RMul(coeff1D8F,prod1CC5);
          real mult1D97#1 = RMul(coeff1D8E,prod1CC4);
          real mult1D98#2 = RMul(coeff1C9A,prod1CC3);
          real mult1D99#2 = RMul(coeff1D8F,prod1CB5);
          real mult1D9A#1 = RMul(coeff1D8E,prod1CB4);
          real mult1D9B#2 = RMul(coeff1C9A,prod1CB3);
          real mult1D9C#6 = RMul(coeff1D2C,prod1CAE);
          real sum1D9D#1 = RAdd(mult1CE3,sum1D47);
          real sum1D9E#1 = RAdd(mult1D9C,sum1D9D);
          real sum1D9F#1 = RAdd(mult1D9B,sum1D9E);
          real sum1DA0#1 = RAdd(mult1D9A,sum1D9F);
          real sum1DA1#1 = RAdd(mult1D99,sum1DA0);
          real sum1DA2#1 = RAdd(mult1CD9,sum1DA1);
          real sum1DA3#1 = RAdd(mult1D36,sum1DA2);
          real sum1DA4#1 = RAdd(mult1D98,sum1DA3);
          real sum1DA5#1 = RAdd(mult1D97,sum1DA4);
          real sum1DA6#1 = RAdd(mult1D96,sum1DA5);
          real sum1DA7#1 = RAdd(mult1D95,sum1DA6);
          real sum1DA8#1 = RAdd(mult1D94,sum1DA7);
          real sum1DA9#1 = RAdd(mult1D93,sum1DA8);
          real sum1DAA#1 = RAdd(mult1D92,sum1DA9);
          real coeff1DAC#13 = 0.32e2;
          real coeff1DAD#6 = -0.533333333333e1;
          real coeff1DAE#3 = 0.746666666667e2;
          real coeff1DAF#3 = -0.373333333333e2;
          real mult1DB0#4 = RMul(coeff1D2D,prod1CCC);
          real mult1DB1#1 = RMul(coeff1DAF,prod1CCB);
          real mult1DB2#1 = RMul(coeff1DAE,prod1CCA);
          real mult1DB3#2 = RMul(coeff1DAD,prod1CC5);
          real mult1DB4#2 = RMul(coeff1DAC,prod1CC4);
          real mult1DB5#2 = RMul(coeff1D5F,prod1CC3);
          real mult1DB6#2 = RMul(coeff1DAD,prod1CB5);
          real mult1DB7#2 = RMul(coeff1DAC,prod1CB4);
          real mult1DB8#2 = RMul(coeff1D5F,prod1CB3);
          real sum1DB9#1 = RAdd(mult1DB7,mult1DB8);
          real sum1DBA#1 = RAdd(mult1DB6,sum1DB9);
          real sum1DBB#1 = RAdd(mult1DB5,sum1DBA);
          real sum1DBC#1 = RAdd(mult1DB4,sum1DBB);
          real sum1DBD#1 = RAdd(mult1DB3,sum1DBC);
          real sum1DBE#1 = RAdd(mult1D69,sum1DBD);
          real sum1DBF#1 = RAdd(mult1DB2,sum1DBE);
          real sum1DC0#1 = RAdd(mult1DB1,sum1DBF);
          real sum1DC1#1 = RAdd(mult1DB0,sum1DC0);
          real mult1DC3#1 = RMul(coeff1D65,prod1CC6);
          real mult1DC4#1 = RMul(coeff1D61,prod1CC4);
          real mult1DC5#1 = RMul(coeff1D64,prod1CC1);
          real mult1DC6#1 = RMul(coeff1D63,prod1CC0);
          real mult1DC7#1 = RMul(coeff1D61,prod1CBD);
          real mult1DC8#2 = RMul(coeff1D60,prod1CBC);
          real mult1DC9#2 = RMul(coeff1D5F,prod1CBA);
          real mult1DCA#2 = RMul(coeff1D64,prod1CB0);
          real mult1DCB#4 = RMul(coeff1D60,prod1CAC);
          real mult1DCC#1 = RMul(coeff1D63,prod1CAA);
          real mult1DCD#2 = RMul(coeff1D62,prod1CA9);
          real mult1DCE#2 = RMul(coeff1D60,prod1CA7);
          real mult1DCF#1 = RMul(coeff1D61,prod1C9E);
          real mult1DD0#4 = RMul(coeff1D60,prod1C99);
          real mult1DD1#2 = RMul(coeff1D5F,prod1C90);
          real sum1DD2#1 = RAdd(mult1DD0,mult1DD1);
          real sum1DD3#1 = RAdd(mult1D78,sum1DD2);
          real sum1DD4#1 = RAdd(mult1DCF,sum1DD3);
          real sum1DD5#1 = RAdd(mult1DCE,sum1DD4);
          real sum1DD6#1 = RAdd(mult1DCD,sum1DD5);
          real sum1DD7#1 = RAdd(mult1DCC,sum1DD6);
          real sum1DD8#1 = RAdd(mult1DCB,sum1DD7);
          real sum1DD9#1 = RAdd(mult1D73,sum1DD8);
          real sum1DDA#1 = RAdd(mult1DCA,sum1DD9);
          real sum1DDB#1 = RAdd(mult1DC9,sum1DDA);
          real sum1DDC#1 = RAdd(mult1DC8,sum1DDB);
          real sum1DDD#1 = RAdd(mult1DC7,sum1DDC);
          real sum1DDE#1 = RAdd(mult1D6E,sum1DDD);
          real sum1DDF#1 = RAdd(mult1DC6,sum1DDE);
          real sum1DE0#1 = RAdd(mult1DC5,sum1DDF);
          real sum1DE1#1 = RAdd(mult1DB5,sum1DE0);
          real sum1DE2#1 = RAdd(mult1DC4,sum1DE1);
          real sum1DE3#1 = RAdd(mult1D6A,sum1DE2);
          real sum1DE4#1 = RAdd(mult1DC3,sum1DE3);
          real mult1DE6#1 = RMul(coeff1D91,prod1CC6);
          real mult1DE7#1 = RMul(coeff1D90,prod1CC1);
          real mult1DE8#1 = RMul(coeff1D8E,prod1CC0);
          real mult1DE9#4 = RMul(coeff1D60,prod1CBD);
          real mult1DEA#2 = RMul(coeff1C9A,prod1CBC);
          real mult1DEB#1 = RMul(coeff1C96,prod1CBA);
          real mult1DEC#2 = RMul(coeff1D8F,prod1CB0);
          real mult1DED#1 = RMul(coeff1D8E,prod1CAA);
          real mult1DEE#2 = RMul(coeff1C9A,prod1CA7);
          real sum1DEF#1 = RAdd(mult1DEE,sum1D57);
          real sum1DF0#1 = RAdd(mult1CE5,sum1DEF);
          real sum1DF1#1 = RAdd(mult1DED,sum1DF0);
          real sum1DF2#1 = RAdd(mult1D9C,sum1DF1);
          real sum1DF3#1 = RAdd(mult1DEC,sum1DF2);
          real sum1DF4#1 = RAdd(mult1DEB,sum1DF3);
          real sum1DF5#1 = RAdd(mult1DEA,sum1DF4);
          real sum1DF6#1 = RAdd(mult1DE9,sum1DF5);
          real sum1DF7#1 = RAdd(mult1CD9,sum1DF6);
          real sum1DF8#1 = RAdd(mult1DE8,sum1DF7);
          real sum1DF9#1 = RAdd(mult1DE7,sum1DF8);
          real sum1DFA#1 = RAdd(mult1D35,sum1DF9);
          real sum1DFB#1 = RAdd(mult1D96,sum1DFA);
          real sum1DFC#1 = RAdd(mult1DE6,sum1DFB);
          real mult1DFE#4 = RMul(coeff1D2D,prod1CC6);
          real mult1DFF#1 = RMul(coeff1DAF,prod1CC1);
          real mult1E00#2 = RMul(coeff1DAC,prod1CC0);
          real mult1E01#1 = RMul(coeff1DAE,prod1CBD);
          real mult1E02#2 = RMul(coeff1DAD,prod1CB0);
          real mult1E03#2 = RMul(coeff1DAC,prod1CAA);
          real mult1E04#2 = RMul(coeff1D5F,prod1CA7);
          real sum1E05#1 = RAdd(mult1E03,mult1E04);
          real sum1E06#1 = RAdd(mult1E02,sum1E05);
          real sum1E07#1 = RAdd(mult1DC9,sum1E06);
          real sum1E08#1 = RAdd(mult1D6F,sum1E07);
          real sum1E09#1 = RAdd(mult1E01,sum1E08);
          real sum1E0A#1 = RAdd(mult1E00,sum1E09);
          real sum1E0B#1 = RAdd(mult1DFF,sum1E0A);
          real sum1E0C#1 = RAdd(mult1DB3,sum1E0B);
          real sum1E0D#1 = RAdd(mult1DFE,sum1E0C);
          real mult1E0F#1 = RMul(coeff1D65,prod1CB7);
          real mult1E10#1 = RMul(coeff1D61,prod1CB4);
          real mult1E11#1 = RMul(coeff1D61,prod1CAA);
          real mult1E12#1 = RMul(coeff1D64,prod1CA4);
          real mult1E13#1 = RMul(coeff1D63,prod1CA2);
          real mult1E14#1 = RMul(coeff1D63,prod1C9E);
          real mult1E15#2 = RMul(coeff1D62,prod1C9C);
          real mult1E16#1 = RMul(coeff1D61,prod1C95);
          real mult1E17#2 = RMul(coeff1D60,prod1C93);
          real mult1E18#2 = RMul(coeff1D60,prod1C90);
          real mult1E19#2 = RMul(coeff1D5F,prod1C8C);
          real sum1E1A#1 = RAdd(mult1E18,mult1E19);
          real sum1E1B#1 = RAdd(mult1E17,sum1E1A);
          real sum1E1C#1 = RAdd(mult1E16,sum1E1B);
          real sum1E1D#1 = RAdd(mult1DD0,sum1E1C);
          real sum1E1E#1 = RAdd(mult1E15,sum1E1D);
          real sum1E1F#1 = RAdd(mult1E14,sum1E1E);
          real sum1E20#1 = RAdd(mult1D77,sum1E1F);
          real sum1E21#1 = RAdd(mult1E13,sum1E20);
          real sum1E22#1 = RAdd(mult1E12,sum1E21);
          real sum1E23#1 = RAdd(mult1E04,sum1E22);
          real sum1E24#1 = RAdd(mult1D75,sum1E23);
          real sum1E25#1 = RAdd(mult1E11,sum1E24);
          real sum1E26#1 = RAdd(mult1DCB,sum1E25);
          real sum1E27#1 = RAdd(mult1D73,sum1E26);
          real sum1E28#1 = RAdd(mult1DCA,sum1E27);
          real sum1E29#1 = RAdd(mult1DB8,sum1E28);
          real sum1E2A#1 = RAdd(mult1E10,sum1E29);
          real sum1E2B#1 = RAdd(mult1D70,sum1E2A);
          real sum1E2C#1 = RAdd(mult1E0F,sum1E2B);
          real mult1E2E#1 = RMul(coeff1D91,prod1CB7);
          real mult1E2F#1 = RMul(coeff1D90,prod1CA4);
          real mult1E30#1 = RMul(coeff1D8E,prod1CA2);
          real mult1E31#1 = RMul(coeff1D8E,prod1C9E);
          real mult1E32#3 = RMul(coeff1D60,prod1C95);
          real mult1E33#2 = RMul(coeff1C9A,prod1C93);
          real mult1E34#2 = RMul(coeff1C9A,prod1C90);
          real mult1E35#1 = RMul(coeff1C96,prod1C8C);
          real sum1E36#1 = RAdd(mult1E34,mult1E35);
          real sum1E37#1 = RAdd(mult1E33,sum1E36);
          real sum1E38#1 = RAdd(mult1E32,sum1E37);
          real sum1E39#1 = RAdd(mult1CEC,sum1E38);
          real sum1E3A#1 = RAdd(mult1CEB,sum1E39);
          real sum1E3B#1 = RAdd(mult1E31,sum1E3A);
          real sum1E3C#1 = RAdd(mult1CE9,sum1E3B);
          real sum1E3D#1 = RAdd(mult1E30,sum1E3C);
          real sum1E3E#1 = RAdd(mult1E2F,sum1E3D);
          real sum1E3F#1 = RAdd(mult1D55,sum1E3E);
          real sum1E40#1 = RAdd(mult1D9C,sum1E3F);
          real sum1E41#1 = RAdd(mult1DEC,sum1E40);
          real sum1E42#1 = RAdd(mult1D45,sum1E41);
          real sum1E43#1 = RAdd(mult1D99,sum1E42);
          real sum1E44#1 = RAdd(mult1E2E,sum1E43);
          real mult1E46#4 = RMul(coeff1D2D,prod1CB7);
          real mult1E47#1 = RMul(coeff1DAF,prod1CA4);
          real mult1E48#2 = RMul(coeff1DAC,prod1CA2);
          real mult1E49#2 = RMul(coeff1DAC,prod1C9E);
          real mult1E4A#1 = RMul(coeff1DAE,prod1C95);
          real sum1E4B#1 = RAdd(mult1DD1,mult1E19);
          real sum1E4C#1 = RAdd(mult1D79,sum1E4B);
          real sum1E4D#1 = RAdd(mult1E4A,sum1E4C);
          real sum1E4E#1 = RAdd(mult1E49,sum1E4D);
          real sum1E4F#1 = RAdd(mult1E48,sum1E4E);
          real sum1E50#1 = RAdd(mult1E47,sum1E4F);
          real sum1E51#1 = RAdd(mult1E02,sum1E50);
          real sum1E52#1 = RAdd(mult1DB6,sum1E51);
          real sum1E53#1 = RAdd(mult1E46,sum1E52);
          real sum1E55#1 = RAdd(mult1D9C,mult1CEB);
          real sum1E57#1 = RAdd(mult1D9C,mult1CE5);
          real sum1E59#1 = RAdd(mult1D9C,mult1CE3);
          real coeff1E5B#19 = 0.256e3;
          real coeff1E5C#13 = -0.224e3;
          real mult1E5D#1 = RMul(coeff1D61,prod1CC5);
          real mult1E5E#1 = RMul(coeff1E5C,prod1CC4);
          real mult1E5F#1 = RMul(coeff1E5C,prod1CC0);
          real mult1E60#1 = RMul(coeff1E5B,prod1CBF);
          real mult1E61#3 = RMul(coeff1E5C,prod1CAE);
          real mult1E62#2 = RMul(coeff1E5B,prod1CAC);
          real mult1E63#2 = RMul(coeff1E5B,prod1CA9);
          real sum1E64#1 = RAdd(mult1E63,mult1CEB);
          real sum1E65#1 = RAdd(mult1E62,sum1E64);
          real sum1E66#1 = RAdd(mult1E61,sum1E65);
          real sum1E67#1 = RAdd(mult1DEA,sum1E66);
          real sum1E68#1 = RAdd(mult1E60,sum1E67);
          real sum1E69#1 = RAdd(mult1E5F,sum1E68);
          real sum1E6A#1 = RAdd(mult1D98,sum1E69);
          real sum1E6B#1 = RAdd(mult1E5E,sum1E6A);
          real sum1E6C#1 = RAdd(mult1E5D,sum1E6B);
          real coeff1E6E#9 = 0.160e3;
          real mult1E6F#9 = RMul(coeff1D2C,prod1CC5);
          real mult1E70#1 = RMul(coeff1E6E,prod1CC0);
          real mult1E71#6 = RMul(coeff1DAC,prod1CAE);
          real sum1E72#1 = RAdd(mult1E71,mult1D75);
          real sum1E73#1 = RAdd(mult1DC8,sum1E72);
          real sum1E74#1 = RAdd(mult1D6E,sum1E73);
          real sum1E75#1 = RAdd(mult1E70,sum1E74);
          real sum1E76#1 = RAdd(mult1DB4,sum1E75);
          real sum1E77#1 = RAdd(mult1E6F,sum1E76);
          real mult1E79#1 = RMul(coeff1E6E,prod1CC4);
          real sum1E7A#1 = RAdd(mult1E71,mult1DCB);
          real sum1E7B#1 = RAdd(mult1D6E,sum1E7A);
          real sum1E7C#1 = RAdd(mult1E00,sum1E7B);
          real sum1E7D#1 = RAdd(mult1D6C,sum1E7C);
          real sum1E7E#1 = RAdd(mult1E79,sum1E7D);
          real sum1E7F#1 = RAdd(mult1E6F,sum1E7E);
          real mult1E81#1 = RMul(coeff1D61,prod1CB5);
          real mult1E82#1 = RMul(coeff1E5C,prod1CB4);
          real mult1E83#1 = RMul(coeff1E5C,prod1CA2);
          real mult1E84#1 = RMul(coeff1E5B,prod1CA1);
          real mult1E85#2 = RMul(coeff1E5B,prod1C9C);
          real sum1E86#1 = RAdd(mult1E85,mult1E33);
          real sum1E87#1 = RAdd(mult1E84,sum1E86);
          real sum1E88#1 = RAdd(mult1E83,sum1E87);
          real sum1E89#1 = RAdd(mult1CE5,sum1E88);
          real sum1E8A#1 = RAdd(mult1E62,sum1E89);
          real sum1E8B#1 = RAdd(mult1E61,sum1E8A);
          real sum1E8C#1 = RAdd(mult1D9B,sum1E8B);
          real sum1E8D#1 = RAdd(mult1E82,sum1E8C);
          real sum1E8E#1 = RAdd(mult1E81,sum1E8D);
          real mult1E90#8 = RMul(coeff1D2C,prod1CB5);
          real mult1E91#1 = RMul(coeff1E6E,prod1CA2);
          real sum1E92#1 = RAdd(mult1D78,mult1E17);
          real sum1E93#1 = RAdd(mult1D77,sum1E92);
          real sum1E94#1 = RAdd(mult1E91,sum1E93);
          real sum1E95#1 = RAdd(mult1E71,sum1E94);
          real sum1E96#1 = RAdd(mult1DB7,sum1E95);
          real sum1E97#1 = RAdd(mult1E90,sum1E96);
          real mult1E99#1 = RMul(coeff1E6E,prod1CB4);
          real sum1E9A#1 = RAdd(mult1E48,mult1D77);
          real sum1E9B#1 = RAdd(mult1DCB,sum1E9A);
          real sum1E9C#1 = RAdd(mult1E71,sum1E9B);
          real sum1E9D#1 = RAdd(mult1D72,sum1E9C);
          real sum1E9E#1 = RAdd(mult1E99,sum1E9D);
          real sum1E9F#1 = RAdd(mult1E90,sum1E9E);
          real mult1EA1#1 = RMul(coeff1D61,prod1CB0);
          real mult1EA2#1 = RMul(coeff1E5C,prod1CAA);
          real mult1EA3#1 = RMul(coeff1E5C,prod1C9E);
          real mult1EA4#1 = RMul(coeff1E5B,prod1C99);
          real sum1EA5#1 = RAdd(mult1EA4,mult1E34);
          real sum1EA6#1 = RAdd(mult1E85,sum1EA5);
          real sum1EA7#1 = RAdd(mult1EA3,sum1EA6);
          real sum1EA8#1 = RAdd(mult1DEE,sum1EA7);
          real sum1EA9#1 = RAdd(mult1E63,sum1EA8);
          real sum1EAA#1 = RAdd(mult1EA2,sum1EA9);
          real sum1EAB#1 = RAdd(mult1CE3,sum1EAA);
          real sum1EAC#1 = RAdd(mult1E61,sum1EAB);
          real sum1EAD#1 = RAdd(mult1EA1,sum1EAC);
          real mult1EAF#8 = RMul(coeff1D2C,prod1CB0);
          real mult1EB0#1 = RMul(coeff1E6E,prod1C9E);
          real sum1EB1#1 = RAdd(mult1DD0,mult1E18);
          real sum1EB2#1 = RAdd(mult1D78,sum1EB1);
          real sum1EB3#1 = RAdd(mult1EB0,sum1EB2);
          real sum1EB4#1 = RAdd(mult1E03,sum1EB3);
          real sum1EB5#1 = RAdd(mult1E71,sum1EB4);
          real sum1EB6#1 = RAdd(mult1EAF,sum1EB5);
          real mult1EB8#1 = RMul(coeff1E6E,prod1CAA);
          real sum1EB9#1 = RAdd(mult1E49,mult1DD0);
          real sum1EBA#1 = RAdd(mult1DCE,sum1EB9);
          real sum1EBB#1 = RAdd(mult1D75,sum1EBA);
          real sum1EBC#1 = RAdd(mult1EB8,sum1EBB);
          real sum1EBD#1 = RAdd(mult1E71,sum1EBC);
          real sum1EBE#1 = RAdd(mult1EAF,sum1EBD);
          real mult1EC0#11 = RMul(coeff1E5B,prod1CAE);
          real sum1EC1#1 = RAdd(mult1DCD,mult1E15);
          real sum1EC2#1 = RAdd(mult1D74,sum1EC1);
          real sum1EC3#1 = RAdd(mult1EC0,sum1EC2);
          tensor[35] intermediateCons1EC5#1 = <tensor[35]>[sum1D12,sum1D1C,sum1D23,sum1D2A,sum1D31,sum1D39,sum1D3D,sum1D42,sum1D49,sum1D4D,sum1D52,sum1D59,sum1D5D,sum1D8C,sum1DAA,sum1DC1,sum1DE4,sum1DFC,sum1E0D,sum1E2C,sum1E44,sum1E53,sum1E55,sum1E57,sum1E59,sum1E6C,sum1E77,sum1E7F,sum1E8E,sum1E97,sum1E9F,sum1EAD,sum1EB6,sum1EBE,sum1EC3];
          real compositionl210B#1 = VDot<35>(dofs1BF2,intermediateCons1EC5);
          real mult2143#1 = RMul(coeff1CB6,prod1CCD);
          real mult2144#1 = RMul(coeff1CAF,prod1CCC);
          real mult2145#1 = RMul(coeff1C9D,prod1CCB);
          real mult2146#3 = RMul(coeff1C8D,prod1CCA);
          real mult2147#1 = RMul(coeff1CAF,prod1CC6);
          real mult2148#1 = RMul(coeff1CAD,prod1CC5);
          real mult2149#6 = RMul(coeff1C9A,prod1CC4);
          real mult214A#1 = RMul(coeff1C9D,prod1CC1);
          real mult214B#7 = RMul(coeff1C9A,prod1CC0);
          real mult214C#3 = RMul(coeff1C8D,prod1CBD);
          real mult214D#1 = RMul(coeff1CAF,prod1CB7);
          real mult214E#1 = RMul(coeff1CAD,prod1CB5);
          real mult214F#5 = RMul(coeff1C9A,prod1CB4);
          real mult2150#1 = RMul(coeff1CAD,prod1CB0);
          real mult2152#5 = RMul(coeff1C9A,prod1CAA);
          real mult2153#1 = RMul(coeff1C9D,prod1CA4);
          real mult2154#6 = RMul(coeff1C9A,prod1CA2);
          real mult2155#6 = RMul(coeff1C9A,prod1C9E);
          real mult2156#3 = RMul(coeff1C8D,prod1C95);
          real sum2157#1 = RAdd(mult2155,mult2156);
          real sum2158#1 = RAdd(mult2154,sum2157);
          real sum2159#1 = RAdd(mult2153,sum2158);
          real sum215A#1 = RAdd(mult2152,sum2159);
          real sum215B#1 = RAdd(mult1EC0,sum215A);
          real sum215C#1 = RAdd(mult2150,sum215B);
          real sum215D#1 = RAdd(mult214F,sum215C);
          real sum215E#1 = RAdd(mult214E,sum215D);
          real sum215F#1 = RAdd(mult214D,sum215E);
          real sum2160#1 = RAdd(mult214C,sum215F);
          real sum2161#1 = RAdd(mult214B,sum2160);
          real sum2162#1 = RAdd(mult214A,sum2161);
          real sum2163#1 = RAdd(mult2149,sum2162);
          real sum2164#1 = RAdd(mult2148,sum2163);
          real sum2165#1 = RAdd(mult2147,sum2164);
          real sum2166#1 = RAdd(mult2146,sum2165);
          real sum2167#1 = RAdd(mult2145,sum2166);
          real sum2168#1 = RAdd(mult2144,sum2167);
          real sum2169#3 = RAdd(mult2143,sum2168);
          real coeff216B#3 = -0.48e2;
          real coeff216C#3 = 0.146666666667e2;
          real mult216E#6 = RMul(coeff1D16,prod1CCD);
          real mult216F#1 = RMul(coeff216C,prod1CB7);
          real mult2170#1 = RMul(coeff216B,prod1CA4);
          real sum2171#1 = RAdd(mult2170,mult2156);
          real sum2172#1 = RAdd(mult216F,sum2171);
          real sum2173#1 = RAdd(mult216E,sum2172);
          real basisEval2175#60 = 0.e0;
          real coeff2176#3 = -0.64e2;
          real mult2179#2 = RMul(coeff2176,prod1CB5);
          real sum217A#1 = RAdd(mult2179,mult2154);
          real sum217B#1 = RAdd(mult1DB0,sum217A);
          real mult2180#2 = RMul(coeff1D33,prod1CCC);
          real mult2181#4 = RMul(coeff1D14,prod1CCB);
          real sum2183#3 = RAdd(mult1E90,mult214F);
          real sum2184#1 = RAdd(mult2181,sum2183);
          real sum2185#1 = RAdd(mult2180,sum2184);
          real mult2187#1 = RMul(coeff1D2C,prod1CCB);
          real sum2188#1 = RAdd(mult2187,mult2146);
          real sum2189#2 = RAdd(mult1DB0,sum2188);
          real mult218C#2 = RMul(coeff2176,prod1CB0);
          real sum218D#1 = RAdd(mult218C,mult2155);
          real sum218E#1 = RAdd(mult1DFE,sum218D);
          real mult2190#2 = RMul(coeff1D33,prod1CC6);
          real mult2191#4 = RMul(coeff1D14,prod1CC1);
          real sum2193#3 = RAdd(mult1EAF,mult2152);
          real sum2194#1 = RAdd(mult2191,sum2193);
          real sum2195#1 = RAdd(mult2190,sum2194);
          real mult2197#1 = RMul(coeff1D2C,prod1CC1);
          real sum2198#1 = RAdd(mult2197,mult214C);
          real sum2199#2 = RAdd(mult1DFE,sum2198);
          real mult219F#3 = RMul(coeff1D64,prod1CCC);
          real mult21A0#1 = RMul(coeff1D63,prod1CCB);
          real mult21A2#3 = RMul(coeff1D63,prod1CC5);
          real mult21A3#5 = RMul(coeff1D62,prod1CC4);
          real mult21A4#5 = RMul(coeff1D60,prod1CC0);
          real mult21A5#3 = RMul(coeff1D63,prod1CB5);
          real mult21A6#5 = RMul(coeff1D62,prod1CB4);
          real mult21A7#9 = RMul(coeff1D62,prod1CAE);
          real mult21A8#5 = RMul(coeff1D60,prod1CA2);
          real sum21A9#1 = RAdd(mult21A7,mult21A8);
          real sum21AA#1 = RAdd(mult21A6,sum21A9);
          real sum21AB#1 = RAdd(mult21A5,sum21AA);
          real sum21AC#1 = RAdd(mult21A4,sum21AB);
          real sum21AD#1 = RAdd(mult21A3,sum21AC);
          real sum21AE#1 = RAdd(mult21A2,sum21AD);
          real sum21AF#1 = RAdd(mult1D94,sum21AE);
          real sum21B0#1 = RAdd(mult21A0,sum21AF);
          real sum21B1#2 = RAdd(mult219F,sum21B0);
          real mult21B5#3 = RMul(coeff1D8F,prod1CCC);
          real mult21B6#1 = RMul(coeff1D8E,prod1CCB);
          real mult21B7#3 = RMul(coeff1C9A,prod1CCA);
          real sum21B9#1 = RAdd(mult2149,sum2183);
          real sum21BA#1 = RAdd(mult1E6F,sum21B9);
          real sum21BB#1 = RAdd(mult21B7,sum21BA);
          real sum21BC#1 = RAdd(mult21B6,sum21BB);
          real sum21BD#2 = RAdd(mult21B5,sum21BC);
          real mult21C2#3 = RMul(coeff1DAD,prod1CCC);
          real mult21C3#3 = RMul(coeff1DAC,prod1CCB);
          real mult21C4#3 = RMul(coeff1D5F,prod1CCA);
          real sum21C5#1 = RAdd(mult21C3,mult21C4);
          real sum21C6#2 = RAdd(mult21C2,sum21C5);
          real mult21C8#3 = RMul(coeff1D64,prod1CC6);
          real mult21C9#5 = RMul(coeff1D60,prod1CC4);
          real mult21CA#1 = RMul(coeff1D63,prod1CC1);
          real mult21CB#5 = RMul(coeff1D62,prod1CC0);
          real mult21CD#3 = RMul(coeff1D63,prod1CB0);
          real mult21CE#5 = RMul(coeff1D62,prod1CAA);
          real mult21CF#5 = RMul(coeff1D60,prod1C9E);
          real sum21D0#1 = RAdd(mult21CE,mult21CF);
          real sum21D1#1 = RAdd(mult21A7,sum21D0);
          real sum21D2#1 = RAdd(mult21CD,sum21D1);
          real sum21D3#1 = RAdd(mult1DE9,sum21D2);
          real sum21D4#1 = RAdd(mult21CB,sum21D3);
          real sum21D5#1 = RAdd(mult21CA,sum21D4);
          real sum21D6#1 = RAdd(mult21C9,sum21D5);
          real sum21D7#1 = RAdd(mult21A2,sum21D6);
          real sum21D8#2 = RAdd(mult21C8,sum21D7);
          real mult21DA#3 = RMul(coeff1D8F,prod1CC6);
          real mult21DB#1 = RMul(coeff1D8E,prod1CC1);
          real mult21DC#3 = RMul(coeff1C9A,prod1CBD);
          real sum21DD#1 = RAdd(mult21DC,sum2193);
          real sum21DE#1 = RAdd(mult214B,sum21DD);
          real sum21DF#1 = RAdd(mult21DB,sum21DE);
          real sum21E0#1 = RAdd(mult1E6F,sum21DF);
          real sum21E1#2 = RAdd(mult21DA,sum21E0);
          real mult21E3#3 = RMul(coeff1DAD,prod1CC6);
          real mult21E4#3 = RMul(coeff1DAC,prod1CC1);
          real mult21E5#3 = RMul(coeff1D5F,prod1CBD);
          real sum21E6#1 = RAdd(mult21E4,mult21E5);
          real sum21E7#2 = RAdd(mult21E3,sum21E6);
          real coeff21E9#3 = -0.170666666667e3;
          real coeff21EA#9 = -0.384e3;
          real coeff21EB#3 = 0.288e3;
          real coeff21EC#1 = -0.512e3;
          real coeff21ED#9 = 0.384e3;
          real coeff21EE#3 = -0.138666666667e3;
          real mult21F1#3 = RMul(coeff1D65,prod1CCD);
          real mult21F2#2 = RMul(coeff1D61,prod1CCB);
          real mult21F3#2 = RMul(coeff1D61,prod1CC1);
          real mult21F4#1 = RMul(coeff21EE,prod1CB7);
          real mult21F5#2 = RMul(coeff21ED,prod1CB5);
          real mult21F6#2 = RMul(coeff21ED,prod1CB0);
          real mult21F7#6 = RMul(coeff21EC,prod1CAE);
          real mult21F8#1 = RMul(coeff21EB,prod1CA4);
          real mult21F9#2 = RMul(coeff21EA,prod1CA2);
          real mult21FA#2 = RMul(coeff21EA,prod1C9E);
          real mult21FB#2 = RMul(coeff21E9,prod1C95);
          real sum21FC#1 = RAdd(mult21FA,mult21FB);
          real sum21FD#1 = RAdd(mult21F9,sum21FC);
          real sum21FE#1 = RAdd(mult21F8,sum21FD);
          real sum21FF#1 = RAdd(mult21CE,sum21FE);
          real sum2200#1 = RAdd(mult21F7,sum21FF);
          real sum2201#1 = RAdd(mult21F6,sum2200);
          real sum2202#1 = RAdd(mult21A6,sum2201);
          real sum2203#1 = RAdd(mult21F5,sum2202);
          real sum2204#1 = RAdd(mult21F4,sum2203);
          real sum2205#1 = RAdd(mult21E5,sum2204);
          real sum2206#1 = RAdd(mult21A4,sum2205);
          real sum2207#1 = RAdd(mult21F3,sum2206);
          real sum2208#1 = RAdd(mult21C9,sum2207);
          real sum2209#1 = RAdd(mult21A2,sum2208);
          real sum220A#1 = RAdd(mult21C8,sum2209);
          real sum220B#1 = RAdd(mult21C4,sum220A);
          real sum220C#1 = RAdd(mult21F2,sum220B);
          real sum220D#1 = RAdd(mult219F,sum220C);
          real sum220E#1 = RAdd(mult21F1,sum220D);
          real coeff2210#3 = -0.288e3;
          real coeff2211#3 = 0.152e3;
          real mult2213#3 = RMul(coeff1D91,prod1CCD);
          real mult2214#1 = RMul(coeff2211,prod1CB7);
          real mult2215#2 = RMul(coeff2210,prod1CB5);
          real mult2216#2 = RMul(coeff2210,prod1CB0);
          real mult2217#1 = RMul(coeff21EA,prod1CA4);
          real mult2218#2 = RMul(coeff21ED,prod1CA2);
          real mult2219#2 = RMul(coeff21ED,prod1C9E);
          real mult221A#1 = RMul(coeff1E5B,prod1C95);
          real sum221B#1 = RAdd(mult2219,mult221A);
          real sum221C#1 = RAdd(mult2218,sum221B);
          real sum221D#1 = RAdd(mult2217,sum221C);
          real sum221E#1 = RAdd(mult2152,sum221D);
          real sum221F#1 = RAdd(mult1EC0,sum221E);
          real sum2220#1 = RAdd(mult2216,sum221F);
          real sum2221#1 = RAdd(mult214F,sum2220);
          real sum2222#1 = RAdd(mult2215,sum2221);
          real sum2223#1 = RAdd(mult2214,sum2222);
          real sum2224#1 = RAdd(mult2191,sum2223);
          real sum2225#1 = RAdd(mult1E6F,sum2224);
          real sum2226#1 = RAdd(mult21DA,sum2225);
          real sum2227#1 = RAdd(mult2181,sum2226);
          real sum2228#1 = RAdd(mult21B5,sum2227);
          real sum2229#1 = RAdd(mult2213,sum2228);
          real coeff222B#3 = 0.224e3;
          real coeff222D#3 = -0.746666666667e2;
          real mult222E#3 = RMul(coeff1D2D,prod1CCD);
          real mult222F#1 = RMul(coeff222D,prod1CB7);
          real mult2230#4 = RMul(coeff1C96,prod1CB5);
          real mult2231#4 = RMul(coeff1C96,prod1CB0);
          real mult2232#1 = RMul(coeff222B,prod1CA4);
          real sum2233#1 = RAdd(mult21CF,mult21FB);
          real sum2234#1 = RAdd(mult21A8,sum2233);
          real sum2235#1 = RAdd(mult2232,sum2234);
          real sum2236#1 = RAdd(mult2231,sum2235);
          real sum2237#1 = RAdd(mult2230,sum2236);
          real sum2238#1 = RAdd(mult222F,sum2237);
          real sum2239#1 = RAdd(mult21E3,sum2238);
          real sum223A#1 = RAdd(mult21C2,sum2239);
          real sum223B#1 = RAdd(mult222E,sum223A);
          real sum223D#1 = RAdd(mult1E6F,mult1EC0);
          real sum223F#1 = RAdd(mult1E6F,mult214B);
          real sum2241#2 = RAdd(mult1E6F,mult2149);
          real mult2244#3 = RMul(coeff1E5C,prod1CC5);
          real mult2245#2 = RMul(coeff1E5B,prod1CC4);
          real mult2246#2 = RMul(coeff1E5B,prod1CC0);
          real sum2247#1 = RAdd(mult2246,mult1EC0);
          real sum2248#1 = RAdd(mult2245,sum2247);
          real sum2249#1 = RAdd(mult2244,sum2248);
          real mult224B#6 = RMul(coeff1DAC,prod1CC5);
          real sum224C#1 = RAdd(mult224B,mult21A4);
          real sum224E#1 = RAdd(mult224B,mult21C9);
          real coeff2250#7 = 0.512e3;
          real coeff2251#3 = -0.448e3;
          real mult2252#2 = RMul(coeff1D61,prod1CCC);
          real mult2253#2 = RMul(coeff1E5C,prod1CCB);
          real mult2254#2 = RMul(coeff2251,prod1CB5);
          real mult2255#1 = RMul(coeff2250,prod1CB4);
          real mult2256#6 = RMul(coeff2250,prod1CAE);
          real sum2257#1 = RAdd(mult2256,mult2218);
          real sum2258#1 = RAdd(mult2255,sum2257);
          real sum2259#1 = RAdd(mult2254,sum2258);
          real sum225A#1 = RAdd(mult214B,sum2259);
          real sum225B#1 = RAdd(mult2245,sum225A);
          real sum225C#1 = RAdd(mult2244,sum225B);
          real sum225D#1 = RAdd(mult21B7,sum225C);
          real sum225E#1 = RAdd(mult2253,sum225D);
          real sum225F#1 = RAdd(mult2252,sum225E);
          real coeff2261#3 = 0.320e3;
          real mult2262#4 = RMul(coeff1D2C,prod1CCC);
          real mult2263#2 = RMul(coeff2261,prod1CB5);
          real sum2264#1 = RAdd(mult21A7,mult21F9);
          real sum2265#1 = RAdd(mult21A6,sum2264);
          real sum2266#1 = RAdd(mult2263,sum2265);
          real sum2267#1 = RAdd(mult224B,sum2266);
          real sum2268#1 = RAdd(mult21C3,sum2267);
          real sum2269#1 = RAdd(mult2262,sum2268);
          real mult226C#2 = RMul(coeff1E6E,prod1CCB);
          real sum226D#1 = RAdd(mult2230,mult21A6);
          real sum226E#1 = RAdd(mult21C9,sum226D);
          real sum226F#1 = RAdd(mult224B,sum226E);
          real sum2270#1 = RAdd(mult1D94,sum226F);
          real sum2271#1 = RAdd(mult226C,sum2270);
          real sum2272#1 = RAdd(mult2262,sum2271);
          real mult2274#2 = RMul(coeff1D61,prod1CC6);
          real mult2275#2 = RMul(coeff1E5C,prod1CC1);
          real mult2276#2 = RMul(coeff2251,prod1CB0);
          real mult2277#1 = RMul(coeff2250,prod1CAA);
          real sum2278#1 = RAdd(mult2277,mult2219);
          real sum2279#1 = RAdd(mult2256,sum2278);
          real sum227A#1 = RAdd(mult2276,sum2279);
          real sum227B#1 = RAdd(mult21DC,sum227A);
          real sum227C#1 = RAdd(mult2246,sum227B);
          real sum227D#1 = RAdd(mult2275,sum227C);
          real sum227E#1 = RAdd(mult2149,sum227D);
          real sum227F#1 = RAdd(mult2244,sum227E);
          real sum2280#1 = RAdd(mult2274,sum227F);
          real mult2282#4 = RMul(coeff1D2C,prod1CC6);
          real mult2283#2 = RMul(coeff2261,prod1CB0);
          real sum2284#1 = RAdd(mult21CE,mult21FA);
          real sum2285#1 = RAdd(mult21A7,sum2284);
          real sum2286#1 = RAdd(mult2283,sum2285);
          real sum2287#1 = RAdd(mult21E4,sum2286);
          real sum2288#1 = RAdd(mult224B,sum2287);
          real sum2289#1 = RAdd(mult2282,sum2288);
          real mult228B#2 = RMul(coeff1E6E,prod1CC1);
          real sum228C#1 = RAdd(mult2231,mult21CE);
          real sum228D#1 = RAdd(mult1DE9,sum228C);
          real sum228E#1 = RAdd(mult21A4,sum228D);
          real sum228F#1 = RAdd(mult228B,sum228E);
          real sum2290#1 = RAdd(mult224B,sum228F);
          real sum2291#1 = RAdd(mult2282,sum2290);
          real mult2293#1 = RMul(coeff1E5B,prod1CC5);
          real sum2294#1 = RAdd(mult21CB,mult21F7);
          real sum2295#1 = RAdd(mult21A3,sum2294);
          real sum2296#1 = RAdd(mult2293,sum2295);
          real mult2299#1 = RMul(coeff216C,prod1CC6);
          real mult229A#1 = RMul(coeff216B,prod1CC1);
          real sum229B#1 = RAdd(mult229A,mult214C);
          real sum229C#1 = RAdd(mult2299,sum229B);
          real sum229D#1 = RAdd(mult216E,sum229C);
          real mult229F#2 = RMul(coeff2176,prod1CC5);
          real sum22A0#1 = RAdd(mult229F,mult214B);
          real sum22A1#1 = RAdd(mult1DB0,sum22A0);
          real sum22A3#1 = RAdd(mult2181,sum2241);
          real sum22A4#1 = RAdd(mult2180,sum22A3);
          real mult22A8#1 = RMul(coeff1D2C,prod1CA4);
          real sum22A9#1 = RAdd(mult22A8,mult2156);
          real sum22AA#2 = RAdd(mult1E46,sum22A9);
          real mult22AC#2 = RMul(coeff1D33,prod1CB7);
          real mult22AD#2 = RMul(coeff1D14,prod1CA4);
          real sum22AE#2 = RAdd(mult22AD,mult2155);
          real sum22AF#1 = RAdd(mult1EAF,sum22AE);
          real sum22B0#1 = RAdd(mult22AC,sum22AF);
          real sum22B2#1 = RAdd(mult218C,mult2152);
          real sum22B3#1 = RAdd(mult1E46,sum22B2);
          real mult22B8#1 = RMul(coeff21EE,prod1CC6);
          real mult22B9#2 = RMul(coeff21ED,prod1CC5);
          real mult22BA#1 = RMul(coeff21EB,prod1CC1);
          real mult22BB#2 = RMul(coeff21EA,prod1CC0);
          real mult22BC#2 = RMul(coeff21E9,prod1CBD);
          real mult22BD#3 = RMul(coeff1D64,prod1CB7);
          real mult22BE#4 = RMul(coeff1D60,prod1CB4);
          real mult22BF#2 = RMul(coeff21EA,prod1CAA);
          real mult22C0#2 = RMul(coeff1D61,prod1CA4);
          real mult22C1#4 = RMul(coeff1D62,prod1C9E);
          real mult22C2#3 = RMul(coeff1D5F,prod1C95);
          real sum22C3#1 = RAdd(mult22C1,mult22C2);
          real sum22C4#1 = RAdd(mult21A8,sum22C3);
          real sum22C5#1 = RAdd(mult22C0,sum22C4);
          real sum22C6#1 = RAdd(mult22BF,sum22C5);
          real sum22C7#1 = RAdd(mult21F7,sum22C6);
          real sum22C8#1 = RAdd(mult21F6,sum22C7);
          real sum22C9#1 = RAdd(mult22BE,sum22C8);
          real sum22CA#1 = RAdd(mult21A5,sum22C9);
          real sum22CB#1 = RAdd(mult22BD,sum22CA);
          real sum22CC#1 = RAdd(mult22BC,sum22CB);
          real sum22CD#1 = RAdd(mult22BB,sum22CC);
          real sum22CE#1 = RAdd(mult22BA,sum22CD);
          real sum22CF#1 = RAdd(mult21A3,sum22CE);
          real sum22D0#1 = RAdd(mult22B9,sum22CF);
          real sum22D1#1 = RAdd(mult22B8,sum22D0);
          real sum22D2#1 = RAdd(mult21C4,sum22D1);
          real sum22D3#1 = RAdd(mult21F2,sum22D2);
          real sum22D4#1 = RAdd(mult219F,sum22D3);
          real sum22D5#1 = RAdd(mult21F1,sum22D4);
          real mult22D7#1 = RMul(coeff2211,prod1CC6);
          real mult22D8#2 = RMul(coeff2210,prod1CC5);
          real mult22D9#1 = RMul(coeff21EA,prod1CC1);
          real mult22DA#2 = RMul(coeff21ED,prod1CC0);
          real mult22DB#1 = RMul(coeff1E5B,prod1CBD);
          real mult22DC#3 = RMul(coeff1D8F,prod1CB7);
          real mult22DD#2 = RMul(coeff21ED,prod1CAA);
          real sum22DE#1 = RAdd(mult22DD,sum22AE);
          real sum22DF#1 = RAdd(mult1EC0,sum22DE);
          real sum22E0#1 = RAdd(mult2216,sum22DF);
          real sum22E1#1 = RAdd(mult1E90,sum22E0);
          real sum22E2#1 = RAdd(mult22DC,sum22E1);
          real sum22E3#1 = RAdd(mult22DB,sum22E2);
          real sum22E4#1 = RAdd(mult22DA,sum22E3);
          real sum22E5#1 = RAdd(mult22D9,sum22E4);
          real sum22E6#1 = RAdd(mult2149,sum22E5);
          real sum22E7#1 = RAdd(mult22D8,sum22E6);
          real sum22E8#1 = RAdd(mult22D7,sum22E7);
          real sum22E9#1 = RAdd(mult2181,sum22E8);
          real sum22EA#1 = RAdd(mult21B5,sum22E9);
          real sum22EB#1 = RAdd(mult2213,sum22EA);
          real mult22ED#1 = RMul(coeff222D,prod1CC6);
          real mult22EE#4 = RMul(coeff1C96,prod1CC5);
          real mult22EF#1 = RMul(coeff222B,prod1CC1);
          real mult22F0#3 = RMul(coeff1DAD,prod1CB7);
          real mult22F1#4 = RMul(coeff1D60,prod1CAA);
          real sum22F2#1 = RAdd(mult2231,mult22F1);
          real sum22F3#1 = RAdd(mult22F0,sum22F2);
          real sum22F4#1 = RAdd(mult22BC,sum22F3);
          real sum22F5#1 = RAdd(mult21A4,sum22F4);
          real sum22F6#1 = RAdd(mult22EF,sum22F5);
          real sum22F7#1 = RAdd(mult22EE,sum22F6);
          real sum22F8#1 = RAdd(mult22ED,sum22F7);
          real sum22F9#1 = RAdd(mult21C2,sum22F8);
          real sum22FA#1 = RAdd(mult222E,sum22F9);
          real mult22FC#1 = RMul(coeff1D63,prod1CA4);
          real mult22FD#5 = RMul(coeff1D62,prod1CA2);
          real sum22FF#2 = RAdd(mult22C1,mult1E32);
          real sum2300#1 = RAdd(mult22FD,sum22FF);
          real sum2301#1 = RAdd(mult22FC,sum2300);
          real sum2302#1 = RAdd(mult22F1,sum2301);
          real sum2303#1 = RAdd(mult21A7,sum2302);
          real sum2304#1 = RAdd(mult21CD,sum2303);
          real sum2305#1 = RAdd(mult22BE,sum2304);
          real sum2306#1 = RAdd(mult21A5,sum2305);
          real sum2307#2 = RAdd(mult22BD,sum2306);
          real mult2309#1 = RMul(coeff1D8E,prod1CA4);
          real mult230A#3 = RMul(coeff1C9A,prod1C95);
          real sum230B#1 = RAdd(mult2155,mult230A);
          real sum230C#1 = RAdd(mult2154,sum230B);
          real sum230D#1 = RAdd(mult2309,sum230C);
          real sum230E#1 = RAdd(mult1EAF,sum230D);
          real sum230F#1 = RAdd(mult1E90,sum230E);
          real sum2310#2 = RAdd(mult22DC,sum230F);
          real mult2312#3 = RMul(coeff1DAC,prod1CA4);
          real sum2313#1 = RAdd(mult2312,mult22C2);
          real sum2314#2 = RAdd(mult22F0,sum2313);
          real sum2316#1 = RAdd(mult1E90,mult2154);
          real sum2318#1 = RAdd(mult1E90,mult1EC0);
          real mult231B#2 = RMul(coeff2251,prod1CC5);
          real mult231C#1 = RMul(coeff2250,prod1CC4);
          real mult231D#3 = RMul(coeff1E5C,prod1CB5);
          real mult231E#2 = RMul(coeff1E5B,prod1CB4);
          real sum231F#1 = RAdd(mult2256,mult2154);
          real sum2320#1 = RAdd(mult231E,sum231F);
          real sum2321#1 = RAdd(mult231D,sum2320);
          real sum2322#1 = RAdd(mult22DA,sum2321);
          real sum2323#1 = RAdd(mult231C,sum2322);
          real sum2324#1 = RAdd(mult231B,sum2323);
          real sum2325#1 = RAdd(mult21B7,sum2324);
          real sum2326#1 = RAdd(mult2253,sum2325);
          real sum2327#1 = RAdd(mult2252,sum2326);
          real mult2329#2 = RMul(coeff2261,prod1CC5);
          real mult232A#5 = RMul(coeff1DAC,prod1CB5);
          real sum232B#1 = RAdd(mult232A,mult21A7);
          real sum232C#1 = RAdd(mult22BB,sum232B);
          real sum232D#1 = RAdd(mult21A3,sum232C);
          real sum232E#1 = RAdd(mult2329,sum232D);
          real sum232F#1 = RAdd(mult21C3,sum232E);
          real sum2330#1 = RAdd(mult2262,sum232F);
          real sum2332#2 = RAdd(mult232A,mult22BE);
          real sum2333#1 = RAdd(mult21A3,sum2332);
          real sum2334#1 = RAdd(mult22EE,sum2333);
          real sum2335#1 = RAdd(mult1D94,sum2334);
          real sum2336#1 = RAdd(mult226C,sum2335);
          real sum2337#1 = RAdd(mult2262,sum2336);
          real mult2339#2 = RMul(coeff1E5B,prod1CA2);
          real sum233A#1 = RAdd(mult1EC0,mult2339);
          real sum233B#1 = RAdd(mult231E,sum233A);
          real sum233C#1 = RAdd(mult231D,sum233B);
          real sum233E#1 = RAdd(mult232A,mult21A8);
          real mult2341#2 = RMul(coeff1D61,prod1CB7);
          real mult2342#2 = RMul(coeff1E5C,prod1CA4);
          real mult2343#1 = RMul(coeff2250,prod1C9E);
          real sum2344#1 = RAdd(mult2343,mult230A);
          real sum2345#1 = RAdd(mult2339,sum2344);
          real sum2346#1 = RAdd(mult2342,sum2345);
          real sum2347#1 = RAdd(mult22DD,sum2346);
          real sum2348#1 = RAdd(mult2256,sum2347);
          real sum2349#1 = RAdd(mult2276,sum2348);
          real sum234A#1 = RAdd(mult214F,sum2349);
          real sum234B#1 = RAdd(mult231D,sum234A);
          real sum234C#1 = RAdd(mult2341,sum234B);
          real mult234E#4 = RMul(coeff1D2C,prod1CB7);
          real mult234F#2 = RMul(coeff1E6E,prod1CA4);
          real sum2350#1 = RAdd(mult21A8,sum22FF);
          real sum2351#1 = RAdd(mult234F,sum2350);
          real sum2352#1 = RAdd(mult2231,sum2351);
          real sum2353#1 = RAdd(mult232A,sum2352);
          real sum2354#1 = RAdd(mult234E,sum2353);
          real sum2356#1 = RAdd(mult2312,mult22C1);
          real sum2357#1 = RAdd(mult22BF,sum2356);
          real sum2358#1 = RAdd(mult21A7,sum2357);
          real sum2359#1 = RAdd(mult2283,sum2358);
          real sum235A#1 = RAdd(mult232A,sum2359);
          real sum235B#1 = RAdd(mult234E,sum235A);
          real mult235D#1 = RMul(coeff1E5B,prod1CB5);
          real sum235E#1 = RAdd(mult21F7,mult22FD);
          real sum235F#1 = RAdd(mult21A6,sum235E);
          real sum2360#1 = RAdd(mult235D,sum235F);
          real mult2363#1 = RMul(coeff216C,prod1CCC);
          real mult2364#1 = RMul(coeff216B,prod1CCB);
          real sum2365#1 = RAdd(mult2364,mult2146);
          real sum2366#1 = RAdd(mult2363,sum2365);
          real sum2367#1 = RAdd(mult216E,sum2366);
          real sum236A#1 = RAdd(mult2191,mult214B);
          real sum236B#1 = RAdd(mult1E6F,sum236A);
          real sum236C#1 = RAdd(mult2190,sum236B);
          real sum236E#1 = RAdd(mult229F,mult2149);
          real sum236F#1 = RAdd(mult1DFE,sum236E);
          real sum2372#2 = RAdd(mult22AD,mult2154);
          real sum2373#1 = RAdd(mult1E90,sum2372);
          real sum2374#1 = RAdd(mult22AC,sum2373);
          real sum2376#1 = RAdd(mult2179,mult214F);
          real sum2377#1 = RAdd(mult1E46,sum2376);
          real mult2379#1 = RMul(coeff21EE,prod1CCC);
          real mult237A#1 = RMul(coeff21EB,prod1CCB);
          real mult237B#2 = RMul(coeff21E9,prod1CCA);
          real mult237C#2 = RMul(coeff21EA,prod1CC4);
          real mult237D#2 = RMul(coeff21EA,prod1CB4);
          real sum237E#1 = RAdd(mult21CF,mult22C2);
          real sum237F#1 = RAdd(mult22FD,sum237E);
          real sum2380#1 = RAdd(mult22C0,sum237F);
          real sum2381#1 = RAdd(mult22F1,sum2380);
          real sum2382#1 = RAdd(mult21F7,sum2381);
          real sum2383#1 = RAdd(mult21CD,sum2382);
          real sum2384#1 = RAdd(mult237D,sum2383);
          real sum2385#1 = RAdd(mult21F5,sum2384);
          real sum2386#1 = RAdd(mult22BD,sum2385);
          real sum2387#1 = RAdd(mult21E5,sum2386);
          real sum2388#1 = RAdd(mult21CB,sum2387);
          real sum2389#1 = RAdd(mult21F3,sum2388);
          real sum238A#1 = RAdd(mult237C,sum2389);
          real sum238B#1 = RAdd(mult22B9,sum238A);
          real sum238C#1 = RAdd(mult21C8,sum238B);
          real sum238D#1 = RAdd(mult237B,sum238C);
          real sum238E#1 = RAdd(mult237A,sum238D);
          real sum238F#1 = RAdd(mult2379,sum238E);
          real sum2390#1 = RAdd(mult21F1,sum238F);
          real mult2392#1 = RMul(coeff2211,prod1CCC);
          real mult2393#1 = RMul(coeff21EA,prod1CCB);
          real mult2394#1 = RMul(coeff1E5B,prod1CCA);
          real mult2395#2 = RMul(coeff21ED,prod1CC4);
          real mult2396#2 = RMul(coeff21ED,prod1CB4);
          real sum2397#1 = RAdd(mult1EC0,sum2372);
          real sum2398#1 = RAdd(mult1EAF,sum2397);
          real sum2399#1 = RAdd(mult2396,sum2398);
          real sum239A#1 = RAdd(mult2215,sum2399);
          real sum239B#1 = RAdd(mult22DC,sum239A);
          real sum239C#1 = RAdd(mult214B,sum239B);
          real sum239D#1 = RAdd(mult2191,sum239C);
          real sum239E#1 = RAdd(mult2395,sum239D);
          real sum239F#1 = RAdd(mult22D8,sum239E);
          real sum23A0#1 = RAdd(mult21DA,sum239F);
          real sum23A1#1 = RAdd(mult2394,sum23A0);
          real sum23A2#1 = RAdd(mult2393,sum23A1);
          real sum23A3#1 = RAdd(mult2392,sum23A2);
          real sum23A4#1 = RAdd(mult2213,sum23A3);
          real mult23A6#1 = RMul(coeff222D,prod1CCC);
          real mult23A7#1 = RMul(coeff222B,prod1CCB);
          real sum23A8#1 = RAdd(mult2230,mult22BE);
          real sum23A9#1 = RAdd(mult22F0,sum23A8);
          real sum23AA#1 = RAdd(mult21C9,sum23A9);
          real sum23AB#1 = RAdd(mult22EE,sum23AA);
          real sum23AC#1 = RAdd(mult21E3,sum23AB);
          real sum23AD#1 = RAdd(mult237B,sum23AC);
          real sum23AE#1 = RAdd(mult23A7,sum23AD);
          real sum23AF#1 = RAdd(mult23A6,sum23AE);
          real sum23B0#1 = RAdd(mult222E,sum23AF);
          real sum23B8#1 = RAdd(mult1EAF,mult2155);
          real sum23BB#1 = RAdd(mult1EAF,mult1EC0);
          real mult23BD#1 = RMul(coeff2250,prod1CC0);
          real mult23BE#3 = RMul(coeff1E5C,prod1CB0);
          real mult23BF#2 = RMul(coeff1E5B,prod1CAA);
          real sum23C0#1 = RAdd(mult23BF,mult2155);
          real sum23C1#1 = RAdd(mult2256,sum23C0);
          real sum23C2#1 = RAdd(mult23BE,sum23C1);
          real sum23C3#1 = RAdd(mult21DC,sum23C2);
          real sum23C4#1 = RAdd(mult23BD,sum23C3);
          real sum23C5#1 = RAdd(mult2275,sum23C4);
          real sum23C6#1 = RAdd(mult2395,sum23C5);
          real sum23C7#1 = RAdd(mult231B,sum23C6);
          real sum23C8#1 = RAdd(mult2274,sum23C7);
          real mult23CA#5 = RMul(coeff1DAC,prod1CB0);
          real sum23CB#2 = RAdd(mult23CA,mult22F1);
          real sum23CC#1 = RAdd(mult1DE9,sum23CB);
          real sum23CD#1 = RAdd(mult21CB,sum23CC);
          real sum23CE#1 = RAdd(mult228B,sum23CD);
          real sum23CF#1 = RAdd(mult22EE,sum23CE);
          real sum23D0#1 = RAdd(mult2282,sum23CF);
          real sum23D2#1 = RAdd(mult23CA,mult21A7);
          real sum23D3#1 = RAdd(mult21CB,sum23D2);
          real sum23D4#1 = RAdd(mult21E4,sum23D3);
          real sum23D5#1 = RAdd(mult237C,sum23D4);
          real sum23D6#1 = RAdd(mult2329,sum23D5);
          real sum23D7#1 = RAdd(mult2282,sum23D6);
          real mult23D9#1 = RMul(coeff2250,prod1CA2);
          real mult23DA#2 = RMul(coeff1E5B,prod1C9E);
          real sum23DB#1 = RAdd(mult23DA,mult230A);
          real sum23DC#1 = RAdd(mult23D9,sum23DB);
          real sum23DD#1 = RAdd(mult2342,sum23DC);
          real sum23DE#1 = RAdd(mult2152,sum23DD);
          real sum23DF#1 = RAdd(mult2256,sum23DE);
          real sum23E0#1 = RAdd(mult23BE,sum23DF);
          real sum23E1#1 = RAdd(mult2396,sum23E0);
          real sum23E2#1 = RAdd(mult2254,sum23E1);
          real sum23E3#1 = RAdd(mult2341,sum23E2);
          real sum23E5#1 = RAdd(mult21CF,mult1E32);
          real sum23E6#1 = RAdd(mult22FD,sum23E5);
          real sum23E7#1 = RAdd(mult234F,sum23E6);
          real sum23E8#1 = RAdd(mult23CA,sum23E7);
          real sum23E9#1 = RAdd(mult2230,sum23E8);
          real sum23EA#1 = RAdd(mult234E,sum23E9);
          real sum23EC#1 = RAdd(mult2312,mult22FD);
          real sum23ED#1 = RAdd(mult21A7,sum23EC);
          real sum23EE#1 = RAdd(mult23CA,sum23ED);
          real sum23EF#1 = RAdd(mult237D,sum23EE);
          real sum23F0#1 = RAdd(mult2263,sum23EF);
          real sum23F1#1 = RAdd(mult234E,sum23F0);
          real sum23F3#1 = RAdd(mult23BF,mult23DA);
          real sum23F4#1 = RAdd(mult1EC0,sum23F3);
          real sum23F5#1 = RAdd(mult23BE,sum23F4);
          real sum23F7#1 = RAdd(mult23CA,mult21CF);
          real mult23FA#1 = RMul(coeff1E5B,prod1CB0);
          real sum23FB#1 = RAdd(mult21CE,mult22C1);
          real sum23FC#1 = RAdd(mult21F7,sum23FB);
          real sum23FD#1 = RAdd(mult23FA,sum23FC);
          tensor[35] intermediateCons23FF#1 = <tensor[35]>[sum2169,sum2173,basisEval2175,basisEval2175,basisEval2175,basisEval2175,basisEval2175,sum217B,sum2185,sum2189,sum218E,sum2195,sum2199,sum21B1,sum21BD,sum21C6,sum21D8,sum21E1,sum21E7,sum220E,sum2229,sum223B,sum223D,sum223F,sum2241,sum2249,sum224C,sum224E,sum225F,sum2269,sum2272,sum2280,sum2289,sum2291,sum2296];
          tensor[35] intermediateCons2400#1 = <tensor[35]>[sum2169,basisEval2175,sum229D,basisEval2175,sum22A1,sum22A4,sum2189,basisEval2175,basisEval2175,basisEval2175,sum22AA,sum22B0,sum22B3,sum21B1,sum21BD,sum21C6,sum22D5,sum22EB,sum22FA,sum2307,sum2310,sum2314,sum2316,sum2318,sum2183,sum2327,sum2330,sum2337,sum233C,sum233E,sum2332,sum234C,sum2354,sum235B,sum2360];
          tensor[35] intermediateCons2401#1 = <tensor[35]>[sum2169,basisEval2175,basisEval2175,sum2367,sum2199,sum236C,sum236F,sum22AA,sum2374,sum2377,basisEval2175,basisEval2175,basisEval2175,sum2390,sum23A4,sum23B0,sum21D8,sum21E1,sum21E7,sum2307,sum2310,sum2314,sum23B8,sum2193,sum23BB,sum23C8,sum23D0,sum23D7,sum23E3,sum23EA,sum23F1,sum23F5,sum23F7,sum23CB,sum23FD];
          real vdot26F8#3 = VDot<35>(dofs1BF2,intermediateCons23FF);
          real vdot26FA#3 = VDot<35>(dofs1BF2,intermediateCons2400);
          real vdot26FC#3 = VDot<35>(dofs1BF2,intermediateCons2401);
          int mulRes2707#4 = IMul(intPos1A87,ilit1A9A);
          int idx270A#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(_t1316,mulRes2707);
          int addRes270C#1 = IAdd(mulRes2707,ilit1A91);
          int idx270D#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(_t1316,addRes270C);
          int addRes270F#1 = IAdd(mulRes2707,ilit1A94);
          int idx2710#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(_t1316,addRes270F);
          int addRes2712#1 = IAdd(mulRes2707,ilit1A97);
          int idx2713#1 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(_t1316,addRes2712);
          int mulRes2729#3 = IMul(ilit1A97,idx270A);
          int addRes272C#1 = IAdd(ilit1A91,mulRes2729);
          int addRes272E#1 = IAdd(ilit1A94,mulRes2729);
          real dof_load272F#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1316,mulRes2729);
          real dof_load2730#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1316,addRes272C);
          real dof_load2731#1 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1316,addRes272E);
          int mulRes2734#3 = IMul(ilit1A97,idx270D);
          int addRes2736#1 = IAdd(ilit1A91,mulRes2734);
          int addRes2737#1 = IAdd(ilit1A94,mulRes2734);
          real dof_load2738#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1316,mulRes2734);
          real dof_load2739#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1316,addRes2736);
          real dof_load273A#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1316,addRes2737);
          int mulRes273D#3 = IMul(ilit1A97,idx2710);
          int addRes273F#1 = IAdd(ilit1A91,mulRes273D);
          int addRes2740#1 = IAdd(ilit1A94,mulRes273D);
          real dof_load2741#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1316,mulRes273D);
          real dof_load2742#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1316,addRes273F);
          real dof_load2743#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1316,addRes2740);
          int mulRes2746#3 = IMul(ilit1A97,idx2713);
          int addRes2748#1 = IAdd(ilit1A91,mulRes2746);
          int addRes2749#1 = IAdd(ilit1A94,mulRes2746);
          real dof_load274A#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1316,mulRes2746);
          real dof_load274B#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1316,addRes2748);
          real dof_load274C#2 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(_t1316,addRes2749);
          real r279A#2 = RMul(dof_load272F,mult216E);
          real r279D#1 = RMul(dof_load2738,mult1CCE);
          real r27A0#2 = RMul(dof_load2741,basisEval2175);
          real r27A3#2 = RMul(dof_load274A,basisEval2175);
          real r27A4#1 = RAdd(r279A,r279D);
          real r27A5#1 = RAdd(r27A4,r27A0);
          real r27A6#13 = RAdd(r27A5,r27A3);
          real r27AA#1 = RMul(dof_load2738,basisEval2175);
          real r27AC#1 = RMul(dof_load2741,mult1CCE);
          real r27AF#2 = RAdd(r279A,r27AA);
          real r27B0#1 = RAdd(r27AF,r27AC);
          real r27B1#13 = RAdd(r27B0,r27A3);
          real r27B9#1 = RMul(dof_load274A,mult1CCE);
          real r27BB#1 = RAdd(r27AF,r27A0);
          real r27BC#12 = RAdd(r27BB,r27B9);
          real r27BF#2 = RMul(dof_load2730,mult216E);
          real r27C1#1 = RMul(dof_load2739,mult1CCE);
          real r27C3#2 = RMul(dof_load2742,basisEval2175);
          real r27C5#2 = RMul(dof_load274B,basisEval2175);
          real r27C6#1 = RAdd(r27BF,r27C1);
          real r27C7#1 = RAdd(r27C6,r27C3);
          real r27C8#13 = RAdd(r27C7,r27C5);
          real r27CA#1 = RMul(dof_load2739,basisEval2175);
          real r27CB#1 = RMul(dof_load2742,mult1CCE);
          real r27CD#2 = RAdd(r27BF,r27CA);
          real r27CE#1 = RAdd(r27CD,r27CB);
          real r27CF#13 = RAdd(r27CE,r27C5);
          real r27D3#1 = RMul(dof_load274B,mult1CCE);
          real r27D5#1 = RAdd(r27CD,r27C3);
          real r27D6#12 = RAdd(r27D5,r27D3);
          real r27D9#2 = RMul(dof_load2731,mult216E);
          real r27DB#1 = RMul(dof_load273A,mult1CCE);
          real r27DD#2 = RMul(dof_load2743,basisEval2175);
          real r27DF#2 = RMul(dof_load274C,basisEval2175);
          real r27E0#1 = RAdd(r27D9,r27DB);
          real r27E1#1 = RAdd(r27E0,r27DD);
          real r27E2#13 = RAdd(r27E1,r27DF);
          real r27E4#1 = RMul(dof_load273A,basisEval2175);
          real r27E5#1 = RMul(dof_load2743,mult1CCE);
          real r27E7#2 = RAdd(r27D9,r27E4);
          real r27E8#1 = RAdd(r27E7,r27E5);
          real r27E9#13 = RAdd(r27E8,r27DF);
          real r27ED#1 = RMul(dof_load274C,mult1CCE);
          real r27EF#1 = RAdd(r27E7,r27DD);
          real r27F0#12 = RAdd(r27EF,r27ED);
          real r2851#3 = RMul(basisEval2175,r27A6);
          real r2853#3 = RMul(basisEval2175,r27C8);
          real r2855#5 = RMul(basisEval2175,r27E2);
          real r2856#3 = RAdd(r2851,r2853);
          real r2857#9 = RAdd(r2856,r2855);
          real r2859#3 = RMul(basisEval2175,r27B1);
          real r285B#3 = RMul(basisEval2175,r27CF);
          real r285D#5 = RMul(basisEval2175,r27E9);
          real r285E#3 = RAdd(r2859,r285B);
          real r285F#9 = RAdd(r285E,r285D);
          real r2861#3 = RMul(basisEval2175,r27BC);
          real r2863#3 = RMul(basisEval2175,r27D6);
          real r2865#5 = RMul(basisEval2175,r27F0);
          real r2866#3 = RAdd(r2861,r2863);
          real r2867#12 = RAdd(r2866,r2865);
          real r286A#1 = RMul(coeff1D16,r27E2);
          real r286B#3 = RAdd(r2856,r286A);
          real r286C#1 = RMul(coeff1D16,r27E9);
          real r286D#3 = RAdd(r285E,r286C);
          real r286E#1 = RMul(coeff1D16,r27F0);
          real r286F#4 = RAdd(r2866,r286E);
          real r2872#1 = RMul(one1C8A,r27C8);
          real r2873#1 = RAdd(r2851,r2872);
          real r2874#3 = RAdd(r2873,r2855);
          real r2875#1 = RMul(one1C8A,r27CF);
          real r2876#1 = RAdd(r2859,r2875);
          real r2877#3 = RAdd(r2876,r285D);
          real r2878#1 = RMul(one1C8A,r27D6);
          real r2879#1 = RAdd(r2861,r2878);
          real r287A#4 = RAdd(r2879,r2865);
          real r287D#1 = RMul(one1C8A,r27E2);
          real r287E#3 = RAdd(r2856,r287D);
          real r287F#1 = RMul(one1C8A,r27E9);
          real r2880#3 = RAdd(r285E,r287F);
          real r2881#1 = RMul(one1C8A,r27F0);
          real r2882#4 = RAdd(r2866,r2881);
          real r2884#1 = RMul(coeff1D16,r27A6);
          real r2885#1 = RAdd(r2884,r2853);
          real r2886#3 = RAdd(r2885,r2855);
          real r2887#1 = RMul(coeff1D16,r27B1);
          real r2888#1 = RAdd(r2887,r285B);
          real r2889#3 = RAdd(r2888,r285D);
          real r288A#1 = RMul(coeff1D16,r27BC);
          real r288B#1 = RAdd(r288A,r2863);
          real r288C#4 = RAdd(r288B,r2865);
          real r288F#1 = RMul(coeff1D16,r27C8);
          real r2890#1 = RAdd(r2851,r288F);
          real r2891#3 = RAdd(r2890,r2855);
          real r2892#1 = RMul(coeff1D16,r27CF);
          real r2893#1 = RAdd(r2859,r2892);
          real r2894#3 = RAdd(r2893,r285D);
          real r2895#1 = RMul(coeff1D16,r27D6);
          real r2896#1 = RAdd(r2861,r2895);
          real r2897#4 = RAdd(r2896,r2865);
          real r2899#1 = RMul(one1C8A,r27A6);
          real r289A#1 = RAdd(r2899,r2853);
          real r289B#3 = RAdd(r289A,r2855);
          real r289C#1 = RMul(one1C8A,r27B1);
          real r289D#1 = RAdd(r289C,r285B);
          real r289E#3 = RAdd(r289D,r285D);
          real r289F#1 = RMul(one1C8A,r27BC);
          real r28A0#1 = RAdd(r289F,r2863);
          real r28A1#4 = RAdd(r28A0,r2865);
          real r28FE#1 = RMul(r27A6,r2857);
          real r2901#1 = RMul(r27C8,r287E);
          real r2904#1 = RMul(r27E2,r2891);
          real r2905#1 = RAdd(r28FE,r2901);
          real r2906#1 = RAdd(r2905,r2904);
          real r2908#1 = RMul(r27A6,r285F);
          real r290A#1 = RMul(r27C8,r2880);
          real r290C#1 = RMul(r27E2,r2894);
          real r290D#1 = RAdd(r2908,r290A);
          real r290E#2 = RAdd(r290D,r290C);
          real r2910#1 = RMul(r27A6,r2867);
          real r2912#1 = RMul(r27C8,r2882);
          real r2914#1 = RMul(r27E2,r2897);
          real r2915#1 = RAdd(r2910,r2912);
          real r2916#2 = RAdd(r2915,r2914);
          real r2919#1 = RMul(r27A6,r286B);
          real r291B#1 = RMul(r27C8,r2857);
          real r291D#1 = RMul(r27E2,r289B);
          real r291E#1 = RAdd(r2919,r291B);
          real r291F#1 = RAdd(r291E,r291D);
          real r2921#1 = RMul(r27A6,r286D);
          real r2923#1 = RMul(r27C8,r285F);
          real r2925#1 = RMul(r27E2,r289E);
          real r2926#1 = RAdd(r2921,r2923);
          real r2927#2 = RAdd(r2926,r2925);
          real r2929#1 = RMul(r27A6,r286F);
          real r292B#1 = RMul(r27C8,r2867);
          real r292D#1 = RMul(r27E2,r28A1);
          real r292E#1 = RAdd(r2929,r292B);
          real r292F#2 = RAdd(r292E,r292D);
          real r2932#1 = RMul(r27A6,r2874);
          real r2934#1 = RMul(r27C8,r2886);
          real r2936#1 = RMul(r27E2,r2857);
          real r2937#1 = RAdd(r2932,r2934);
          real r2938#1 = RAdd(r2937,r2936);
          real r293A#1 = RMul(r27A6,r2877);
          real r293C#1 = RMul(r27C8,r2889);
          real r293E#1 = RMul(r27E2,r285F);
          real r293F#1 = RAdd(r293A,r293C);
          real r2940#2 = RAdd(r293F,r293E);
          real r2942#1 = RMul(r27A6,r287A);
          real r2944#1 = RMul(r27C8,r288C);
          real r2946#1 = RMul(r27E2,r2867);
          real r2947#1 = RAdd(r2942,r2944);
          real r2948#2 = RAdd(r2947,r2946);
          real r294C#1 = RMul(r27B1,r2857);
          real r294E#1 = RMul(r27CF,r287E);
          real r2950#1 = RMul(r27E9,r2891);
          real r2951#1 = RAdd(r294C,r294E);
          real r2952#2 = RAdd(r2951,r2950);
          real r2953#1 = RMul(r27B1,r285F);
          real r2954#1 = RMul(r27CF,r2880);
          real r2955#1 = RMul(r27E9,r2894);
          real r2956#1 = RAdd(r2953,r2954);
          real r2957#1 = RAdd(r2956,r2955);
          real r2958#1 = RMul(r27B1,r2867);
          real r2959#1 = RMul(r27CF,r2882);
          real r295A#1 = RMul(r27E9,r2897);
          real r295B#1 = RAdd(r2958,r2959);
          real r295C#2 = RAdd(r295B,r295A);
          real r295E#1 = RMul(r27B1,r286B);
          real r295F#1 = RMul(r27CF,r2857);
          real r2960#1 = RMul(r27E9,r289B);
          real r2961#1 = RAdd(r295E,r295F);
          real r2962#2 = RAdd(r2961,r2960);
          real r2963#1 = RMul(r27B1,r286D);
          real r2964#1 = RMul(r27CF,r285F);
          real r2965#1 = RMul(r27E9,r289E);
          real r2966#1 = RAdd(r2963,r2964);
          real r2967#1 = RAdd(r2966,r2965);
          real r2968#1 = RMul(r27B1,r286F);
          real r2969#1 = RMul(r27CF,r2867);
          real r296A#1 = RMul(r27E9,r28A1);
          real r296B#1 = RAdd(r2968,r2969);
          real r296C#2 = RAdd(r296B,r296A);
          real r296E#1 = RMul(r27B1,r2874);
          real r296F#1 = RMul(r27CF,r2886);
          real r2970#1 = RMul(r27E9,r2857);
          real r2971#1 = RAdd(r296E,r296F);
          real r2972#2 = RAdd(r2971,r2970);
          real r2973#1 = RMul(r27B1,r2877);
          real r2974#1 = RMul(r27CF,r2889);
          real r2975#1 = RMul(r27E9,r285F);
          real r2976#1 = RAdd(r2973,r2974);
          real r2977#1 = RAdd(r2976,r2975);
          real r2978#1 = RMul(r27B1,r287A);
          real r2979#1 = RMul(r27CF,r288C);
          real r297A#1 = RMul(r27E9,r2867);
          real r297B#1 = RAdd(r2978,r2979);
          real r297C#2 = RAdd(r297B,r297A);
          real r2980#1 = RMul(r27BC,r2857);
          real r2982#1 = RMul(r27D6,r287E);
          real r2984#1 = RMul(r27F0,r2891);
          real r2985#1 = RAdd(r2980,r2982);
          real r2986#2 = RAdd(r2985,r2984);
          real r2987#1 = RMul(r27BC,r285F);
          real r2988#1 = RMul(r27D6,r2880);
          real r2989#1 = RMul(r27F0,r2894);
          real r298A#1 = RAdd(r2987,r2988);
          real r298B#2 = RAdd(r298A,r2989);
          real r298C#1 = RMul(r27BC,r2867);
          real r298D#1 = RMul(r27D6,r2882);
          real r298E#1 = RMul(r27F0,r2897);
          real r298F#1 = RAdd(r298C,r298D);
          real r2990#1 = RAdd(r298F,r298E);
          real r2992#1 = RMul(r27BC,r286B);
          real r2993#1 = RMul(r27D6,r2857);
          real r2994#1 = RMul(r27F0,r289B);
          real r2995#1 = RAdd(r2992,r2993);
          real r2996#2 = RAdd(r2995,r2994);
          real r2997#1 = RMul(r27BC,r286D);
          real r2998#1 = RMul(r27D6,r285F);
          real r2999#1 = RMul(r27F0,r289E);
          real r299A#1 = RAdd(r2997,r2998);
          real r299B#2 = RAdd(r299A,r2999);
          real r299C#1 = RMul(r27BC,r286F);
          real r299D#1 = RMul(r27D6,r2867);
          real r299E#1 = RMul(r27F0,r28A1);
          real r299F#1 = RAdd(r299C,r299D);
          real r29A0#1 = RAdd(r299F,r299E);
          real r29A2#1 = RMul(r27BC,r2874);
          real r29A3#1 = RMul(r27D6,r2886);
          real r29A4#1 = RMul(r27F0,r2857);
          real r29A5#1 = RAdd(r29A2,r29A3);
          real r29A6#2 = RAdd(r29A5,r29A4);
          real r29A7#1 = RMul(r27BC,r2877);
          real r29A8#1 = RMul(r27D6,r2889);
          real r29A9#1 = RMul(r27F0,r285F);
          real r29AA#1 = RAdd(r29A7,r29A8);
          real r29AB#2 = RAdd(r29AA,r29A9);
          real r29AC#1 = RMul(r27BC,r287A);
          real r29AD#1 = RMul(r27D6,r288C);
          real r29AE#1 = RMul(r27F0,r2867);
          real r29AF#1 = RAdd(r29AC,r29AD);
          real r29B0#1 = RAdd(r29AF,r29AE);
          tensor[3] probe_l_122A6C#1 = <tensor[3]>[r27A6,r27C8,r27E2];
          tensor[3] probe_l_132AB9#3 = <tensor[3]>[r27B1,r27CF,r27E9];
          tensor[3] tensor2B64#1 = <tensor[3]>[r2867,r2882,r2897];
          tensor[3] tensor2B6A#1 = <tensor[3]>[r286F,r2867,r28A1];
          tensor[3] tensor2B71#1 = <tensor[3]>[r287A,r288C,r2867];
          real vdot2B94#1 = VDot<3>(probe_l_132AB9,tensor2B64);
          real vdot2B96#1 = VDot<3>(probe_l_132AB9,tensor2B6A);
          real vdot2B98#1 = VDot<3>(probe_l_132AB9,tensor2B71);
          tensor[3] op1_e3_l_162B92#1 = <tensor[3]>[vdot2B94,vdot2B96,vdot2B98];
          real op1_e3_l_172BA1#1 = VDot<3>(probe_l_122A6C,op1_e3_l_162B92);
          real r2BA7#2 = RMul(basisEval2175,r2906);
          real r2BA9#1 = RMul(basisEval2175,r290E);
          real r2BAB#2 = RMul(basisEval2175,r2916);
          real r2BAD#2 = RMul(basisEval2175,r2952);
          real r2BAF#3 = RMul(basisEval2175,r2957);
          real r2BB2#1 = RMul(one1C8A,r295C);
          real r2BB4#2 = RMul(basisEval2175,r2986);
          real r2BB7#1 = RMul(coeff1D16,r298B);
          real r2BB9#3 = RMul(basisEval2175,r2990);
          real r2BBA#2 = RAdd(r2BA7,r2BA9);
          real r2BBB#1 = RAdd(r2BBA,r2BAB);
          real r2BBC#1 = RAdd(r2BBB,r2BAD);
          real r2BBD#1 = RAdd(r2BBC,r2BAF);
          real r2BBE#1 = RAdd(r2BBD,r2BB2);
          real r2BBF#1 = RAdd(r2BBE,r2BB4);
          real r2BC0#1 = RAdd(r2BBF,r2BB7);
          real r2BC1#1 = RAdd(r2BC0,r2BB9);
          real r2BC3#2 = RMul(basisEval2175,r291F);
          real r2BC5#1 = RMul(basisEval2175,r2927);
          real r2BC7#2 = RMul(basisEval2175,r292F);
          real r2BC9#2 = RMul(basisEval2175,r2962);
          real r2BCB#3 = RMul(basisEval2175,r2967);
          real r2BCD#1 = RMul(one1C8A,r296C);
          real r2BCF#2 = RMul(basisEval2175,r2996);
          real r2BD1#1 = RMul(coeff1D16,r299B);
          real r2BD3#3 = RMul(basisEval2175,r29A0);
          real r2BD4#2 = RAdd(r2BC3,r2BC5);
          real r2BD5#1 = RAdd(r2BD4,r2BC7);
          real r2BD6#1 = RAdd(r2BD5,r2BC9);
          real r2BD7#1 = RAdd(r2BD6,r2BCB);
          real r2BD8#1 = RAdd(r2BD7,r2BCD);
          real r2BD9#1 = RAdd(r2BD8,r2BCF);
          real r2BDA#1 = RAdd(r2BD9,r2BD1);
          real r2BDB#1 = RAdd(r2BDA,r2BD3);
          real r2BDD#2 = RMul(basisEval2175,r2938);
          real r2BDF#1 = RMul(basisEval2175,r2940);
          real r2BE1#2 = RMul(basisEval2175,r2948);
          real r2BE3#2 = RMul(basisEval2175,r2972);
          real r2BE5#3 = RMul(basisEval2175,r2977);
          real r2BE7#1 = RMul(one1C8A,r297C);
          real r2BE9#2 = RMul(basisEval2175,r29A6);
          real r2BEB#1 = RMul(coeff1D16,r29AB);
          real r2BED#3 = RMul(basisEval2175,r29B0);
          real r2BEE#2 = RAdd(r2BDD,r2BDF);
          real r2BEF#1 = RAdd(r2BEE,r2BE1);
          real r2BF0#1 = RAdd(r2BEF,r2BE3);
          real r2BF1#1 = RAdd(r2BF0,r2BE5);
          real r2BF2#1 = RAdd(r2BF1,r2BE7);
          real r2BF3#1 = RAdd(r2BF2,r2BE9);
          real r2BF4#1 = RAdd(r2BF3,r2BEB);
          real r2BF5#1 = RAdd(r2BF4,r2BED);
          real r2BF7#1 = RMul(coeff1D16,r2916);
          real r2BF8#2 = RMul(basisEval2175,r295C);
          real r2BF9#1 = RMul(one1C8A,r2986);
          real r2BFA#2 = RMul(basisEval2175,r298B);
          real r2BFB#1 = RAdd(r2BBA,r2BF7);
          real r2BFC#1 = RAdd(r2BFB,r2BAD);
          real r2BFD#1 = RAdd(r2BFC,r2BAF);
          real r2BFE#1 = RAdd(r2BFD,r2BF8);
          real r2BFF#1 = RAdd(r2BFE,r2BF9);
          real r2C00#1 = RAdd(r2BFF,r2BFA);
          real r2C01#1 = RAdd(r2C00,r2BB9);
          real r2C02#1 = RMul(coeff1D16,r292F);
          real r2C03#2 = RMul(basisEval2175,r296C);
          real r2C04#1 = RMul(one1C8A,r2996);
          real r2C05#2 = RMul(basisEval2175,r299B);
          real r2C06#1 = RAdd(r2BD4,r2C02);
          real r2C07#1 = RAdd(r2C06,r2BC9);
          real r2C08#1 = RAdd(r2C07,r2BCB);
          real r2C09#1 = RAdd(r2C08,r2C03);
          real r2C0A#1 = RAdd(r2C09,r2C04);
          real r2C0B#1 = RAdd(r2C0A,r2C05);
          real r2C0C#1 = RAdd(r2C0B,r2BD3);
          real r2C0D#1 = RMul(coeff1D16,r2948);
          real r2C0E#2 = RMul(basisEval2175,r297C);
          real r2C0F#1 = RMul(one1C8A,r29A6);
          real r2C10#2 = RMul(basisEval2175,r29AB);
          real r2C11#1 = RAdd(r2BEE,r2C0D);
          real r2C12#1 = RAdd(r2C11,r2BE3);
          real r2C13#1 = RAdd(r2C12,r2BE5);
          real r2C14#1 = RAdd(r2C13,r2C0E);
          real r2C15#1 = RAdd(r2C14,r2C0F);
          real r2C16#1 = RAdd(r2C15,r2C10);
          real r2C17#1 = RAdd(r2C16,r2BED);
          real r2C19#1 = RMul(one1C8A,r290E);
          real r2C1A#1 = RMul(coeff1D16,r2952);
          real r2C1B#1 = RAdd(r2BA7,r2C19);
          real r2C1C#1 = RAdd(r2C1B,r2BAB);
          real r2C1D#1 = RAdd(r2C1C,r2C1A);
          real r2C1E#1 = RAdd(r2C1D,r2BAF);
          real r2C1F#1 = RAdd(r2C1E,r2BF8);
          real r2C20#1 = RAdd(r2C1F,r2BB4);
          real r2C21#1 = RAdd(r2C20,r2BFA);
          real r2C22#1 = RAdd(r2C21,r2BB9);
          real r2C23#1 = RMul(one1C8A,r2927);
          real r2C24#1 = RMul(coeff1D16,r2962);
          real r2C25#1 = RAdd(r2BC3,r2C23);
          real r2C26#1 = RAdd(r2C25,r2BC7);
          real r2C27#1 = RAdd(r2C26,r2C24);
          real r2C28#1 = RAdd(r2C27,r2BCB);
          real r2C29#1 = RAdd(r2C28,r2C03);
          real r2C2A#1 = RAdd(r2C29,r2BCF);
          real r2C2B#1 = RAdd(r2C2A,r2C05);
          real r2C2C#1 = RAdd(r2C2B,r2BD3);
          real r2C2D#1 = RMul(one1C8A,r2940);
          real r2C2E#1 = RMul(coeff1D16,r2972);
          real r2C2F#1 = RAdd(r2BDD,r2C2D);
          real r2C30#1 = RAdd(r2C2F,r2BE1);
          real r2C31#1 = RAdd(r2C30,r2C2E);
          real r2C32#1 = RAdd(r2C31,r2BE5);
          real r2C33#1 = RAdd(r2C32,r2C0E);
          real r2C34#1 = RAdd(r2C33,r2BE9);
          real r2C35#1 = RAdd(r2C34,r2C10);
          real r2C36#1 = RAdd(r2C35,r2BED);
          real realLit2CCE#1 = 0.2e1;
          real op1_e3_l_192CCD#9 = RMul(realLit2CCE,op1_e3_l_172BA1);
          real r2CD4#1 = RDiv(r2BC1,op1_e3_l_192CCD);
          real r2CD6#1 = RDiv(r2BDB,op1_e3_l_192CCD);
          real r2CD8#1 = RDiv(r2BF5,op1_e3_l_192CCD);
          real r2CDB#1 = RDiv(r2C01,op1_e3_l_192CCD);
          real r2CDD#1 = RDiv(r2C0C,op1_e3_l_192CCD);
          real r2CDF#1 = RDiv(r2C17,op1_e3_l_192CCD);
          real r2CE2#1 = RDiv(r2C22,op1_e3_l_192CCD);
          real r2CE4#1 = RDiv(r2C2C,op1_e3_l_192CCD);
          real r2CE6#1 = RDiv(r2C36,op1_e3_l_192CCD);
          real r2D02#1 = RMul(vdot26F8,r2CD4);
          real r2D05#1 = RMul(vdot26FA,r2CDB);
          real r2D08#1 = RMul(vdot26FC,r2CE2);
          real r2D09#1 = RAdd(r2D02,r2D05);
          real r2D0A#1 = RAdd(r2D09,r2D08);
          real r2D0C#1 = RMul(vdot26F8,r2CD6);
          real r2D0E#1 = RMul(vdot26FA,r2CDD);
          real r2D10#1 = RMul(vdot26FC,r2CE4);
          real r2D11#1 = RAdd(r2D0C,r2D0E);
          real r2D12#1 = RAdd(r2D11,r2D10);
          real r2D14#1 = RMul(vdot26F8,r2CD8);
          real r2D16#1 = RMul(vdot26FA,r2CDF);
          real r2D18#1 = RMul(vdot26FC,r2CE6);
          real r2D19#1 = RAdd(r2D14,r2D16);
          real r2D1A#1 = RAdd(r2D19,r2D18);
          tensor[3] gradResult2CFF#1 = <tensor[3]>[r2D0A,r2D12,r2D1A];
          goto JOIN2D3C
        JOIN2D3C:  preds = [ASSIGN2D37,MASSIGN2D45]
          tensor[3] gradResult2D38#1 = phi(gradResult2CFF,gradResult1326)
          real result2D39#1 = phi(compositionl210B,result1324)
          femData:MeshCell c2D3A#1 = phi(c1A81,c1322)
          tensor[3] translated2D3B#1 = phi(translated1A83,translated1320)
          self.translated = translated2D3B;
          self.valid = valid1A7A;
          self.c = c2D3A;
          self.result = result2D39;
          self.gradResult = gradResult2D38;
          stabilize
        ASSIGN2D44:  preds = [COND1A7C]
          string _t2D43#1 = "Warning: Invalid!\n";
          Print<[string]>(_t2D43);
          goto JOIN2D3C
    end update
  end gg
## initial strand creation
  COLLECTION
    ENTRY2D47:  preds = []
      tensor[3][] points2D48#1 = globals.points12C6;
    FOREACH2D4B:  preds = [ASSIGN2D49,NEXT2D4D]
      foreach (i2D4A in points2D48) on exit goto RETURN2D4E
      new gg(i2D4A);
      goto FOREACH2D4B
    RETURN2D4E:  preds = [FOREACH2D4B]
      return
#### end program ####
##### TreeIR: after low-to-tree translation ####
//***** PROPERTIES *****
  GlobalInit HasInputs HasGlobals ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
//***** CONSTS *****
//***** INPUTS *****
input tensor[3][] points;
input femData(Mesh) cube;
input femData(Space) 0space0342_intermedateGlobal;
input femData(FemFunc) 0data0344_intermedateGlobal;
//***** CONST INIT *****
  {
  }
//***** GLOBALS *****
global femData(MeshCell)[] 0cell_cube;
global femData(Mesh) _t;
global femData(Space) _tX;
global femData(FemFunc) data;
//***** FUNCTIONS *****
  function femData(MeshPos) findPos (world, femData(Mesh) p_mesh_0,&tensor[3] p_pos_1) {
    vec3{4} v_2;
    v_2 = VEC3{4}(0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0,0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0,0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0);
    int[] t_4 = ExtractFemItem2<tensor[3],int[],NearbyCell(File=spat.in)(Mesh)>(p_mesh_0,p_pos_1);
    foreach int i_cellItter_3 in t_4 {
      vec3{4} v_5;
      v_5 = v_2;
      for i_newtonItter_6 = 0 to 16 {
        int l_mulRes_7 = IMul(i_cellItter_3,4);
        int t_8 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(p_mesh_0,l_mulRes_7);
        int l_mulRes_9 = IMul(3,t_8);
        real l_dof_load_10 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(p_mesh_0,l_mulRes_9);
        real l_dof_load_11 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(p_mesh_0,IAdd(1,l_mulRes_9));
        real l_dof_load_12 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(p_mesh_0,IAdd(2,l_mulRes_9));
        int t_13 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(p_mesh_0,IAdd(l_mulRes_7,1));
        int l_mulRes_14 = IMul(3,t_13);
        real l_dof_load_15 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(p_mesh_0,l_mulRes_14);
        real l_dof_load_16 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(p_mesh_0,IAdd(1,l_mulRes_14));
        real l_dof_load_17 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(p_mesh_0,IAdd(2,l_mulRes_14));
        int t_18 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(p_mesh_0,IAdd(l_mulRes_7,2));
        int l_mulRes_19 = IMul(3,t_18);
        real l_dof_load_20 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(p_mesh_0,l_mulRes_19);
        real l_dof_load_21 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(p_mesh_0,IAdd(1,l_mulRes_19));
        real l_dof_load_22 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(p_mesh_0,IAdd(2,l_mulRes_19));
        int t_23 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(p_mesh_0,IAdd(l_mulRes_7,3));
        int l_mulRes_24 = IMul(3,t_23);
        real l_dof_load_25 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(p_mesh_0,l_mulRes_24);
        real l_dof_load_26 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(p_mesh_0,IAdd(1,l_mulRes_24));
        real l_dof_load_27 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(p_mesh_0,IAdd(2,l_mulRes_24));
        real l_prod_28 = RMul(0.1e1,0.1e1);
        real l_prod_29 = RMul(0.1e1,l_prod_28);
        real l_basisEval_30 = RMul(-0.1e1,l_prod_29);
        real l_basisEval_31 = RMul(0.1e1,l_prod_29);
        real l_r_32 = RMul(l_dof_load_10,l_basisEval_30);
        real l_r_33 = RMul(l_dof_load_20,0.e0);
        real l_r_34 = RMul(l_dof_load_25,0.e0);
        real l_r_35 = RAdd(RAdd(RAdd(l_r_32,RMul(l_dof_load_15,l_basisEval_31)),l_r_33),l_r_34);
        real l_r_36 = RAdd(l_r_32,RMul(l_dof_load_15,0.e0));
        real l_r_37 = RAdd(RAdd(l_r_36,RMul(l_dof_load_20,l_basisEval_31)),l_r_34);
        real l_r_38 = RAdd(RAdd(l_r_36,l_r_33),RMul(l_dof_load_25,l_basisEval_31));
        real l_r_39 = RMul(l_dof_load_11,l_basisEval_30);
        real l_r_40 = RMul(l_dof_load_21,0.e0);
        real l_r_41 = RMul(l_dof_load_26,0.e0);
        real l_r_42 = RAdd(RAdd(RAdd(l_r_39,RMul(l_dof_load_16,l_basisEval_31)),l_r_40),l_r_41);
        real l_r_43 = RAdd(l_r_39,RMul(l_dof_load_16,0.e0));
        real l_r_44 = RAdd(RAdd(l_r_43,RMul(l_dof_load_21,l_basisEval_31)),l_r_41);
        real l_r_45 = RAdd(RAdd(l_r_43,l_r_40),RMul(l_dof_load_26,l_basisEval_31));
        real l_r_46 = RMul(l_dof_load_12,l_basisEval_30);
        real l_r_47 = RMul(l_dof_load_22,0.e0);
        real l_r_48 = RMul(l_dof_load_27,0.e0);
        real l_r_49 = RAdd(RAdd(RAdd(l_r_46,RMul(l_dof_load_17,l_basisEval_31)),l_r_47),l_r_48);
        real l_r_50 = RAdd(l_r_46,RMul(l_dof_load_17,0.e0));
        real l_r_51 = RAdd(RAdd(l_r_50,RMul(l_dof_load_22,l_basisEval_31)),l_r_48);
        real l_r_52 = RAdd(RAdd(l_r_50,l_r_47),RMul(l_dof_load_27,l_basisEval_31));
        real l_r_53 = RMul(0.e0,l_r_35);
        real l_r_54 = RMul(0.e0,l_r_42);
        real l_r_55 = RMul(0.e0,l_r_49);
        real l_r_56 = RAdd(l_r_53,l_r_54);
        real l_r_57 = RAdd(l_r_56,l_r_55);
        real l_r_58 = RMul(0.e0,l_r_37);
        real l_r_59 = RMul(0.e0,l_r_44);
        real l_r_60 = RMul(0.e0,l_r_51);
        real l_r_61 = RAdd(l_r_58,l_r_59);
        real l_r_62 = RAdd(l_r_61,l_r_60);
        real l_r_63 = RMul(0.e0,l_r_38);
        real l_r_64 = RMul(0.e0,l_r_45);
        real l_r_65 = RMul(0.e0,l_r_52);
        real l_r_66 = RAdd(l_r_63,l_r_64);
        real l_r_67 = RAdd(l_r_66,l_r_65);
        real l_r_68 = RAdd(l_r_56,RMul(-0.1e1,l_r_49));
        real l_r_69 = RAdd(l_r_61,RMul(-0.1e1,l_r_51));
        real l_r_70 = RAdd(l_r_66,RMul(-0.1e1,l_r_52));
        real l_r_71 = RAdd(RAdd(l_r_53,RMul(0.1e1,l_r_42)),l_r_55);
        real l_r_72 = RAdd(RAdd(l_r_58,RMul(0.1e1,l_r_44)),l_r_60);
        real l_r_73 = RAdd(RAdd(l_r_63,RMul(0.1e1,l_r_45)),l_r_65);
        real l_r_74 = RAdd(l_r_56,RMul(0.1e1,l_r_49));
        real l_r_75 = RAdd(l_r_61,RMul(0.1e1,l_r_51));
        real l_r_76 = RAdd(l_r_66,RMul(0.1e1,l_r_52));
        real l_r_77 = RAdd(RAdd(RMul(-0.1e1,l_r_35),l_r_54),l_r_55);
        real l_r_78 = RAdd(RAdd(RMul(-0.1e1,l_r_37),l_r_59),l_r_60);
        real l_r_79 = RAdd(RAdd(RMul(-0.1e1,l_r_38),l_r_64),l_r_65);
        real l_r_80 = RAdd(RAdd(l_r_53,RMul(-0.1e1,l_r_42)),l_r_55);
        real l_r_81 = RAdd(RAdd(l_r_58,RMul(-0.1e1,l_r_44)),l_r_60);
        real l_r_82 = RAdd(RAdd(l_r_63,RMul(-0.1e1,l_r_45)),l_r_65);
        real l_r_83 = RAdd(RAdd(RMul(0.1e1,l_r_35),l_r_54),l_r_55);
        real l_r_84 = RAdd(RAdd(RMul(0.1e1,l_r_37),l_r_59),l_r_60);
        real l_r_85 = RAdd(RAdd(RMul(0.1e1,l_r_38),l_r_64),l_r_65);
        real l_r_86 = RAdd(RAdd(RMul(l_r_35,l_r_62),RMul(l_r_42,l_r_75)),RMul(l_r_49,l_r_81));
        real l_r_87 = RAdd(RAdd(RMul(l_r_35,l_r_67),RMul(l_r_42,l_r_76)),RMul(l_r_49,l_r_82));
        real l_r_88 = RAdd(RAdd(RMul(l_r_35,l_r_69),RMul(l_r_42,l_r_62)),RMul(l_r_49,l_r_84));
        real l_r_89 = RAdd(RAdd(RMul(l_r_35,l_r_70),RMul(l_r_42,l_r_67)),RMul(l_r_49,l_r_85));
        real l_r_90 = RAdd(RAdd(RMul(l_r_35,l_r_72),RMul(l_r_42,l_r_78)),RMul(l_r_49,l_r_62));
        real l_r_91 = RAdd(RAdd(RMul(l_r_35,l_r_73),RMul(l_r_42,l_r_79)),RMul(l_r_49,l_r_67));
        real l_r_92 = RAdd(RAdd(RMul(l_r_37,l_r_57),RMul(l_r_44,l_r_74)),RMul(l_r_51,l_r_80));
        real l_r_93 = RAdd(RAdd(RMul(l_r_37,l_r_67),RMul(l_r_44,l_r_76)),RMul(l_r_51,l_r_82));
        real l_r_94 = RAdd(RAdd(RMul(l_r_37,l_r_68),RMul(l_r_44,l_r_57)),RMul(l_r_51,l_r_83));
        real l_r_95 = RAdd(RAdd(RMul(l_r_37,l_r_70),RMul(l_r_44,l_r_67)),RMul(l_r_51,l_r_85));
        real l_r_96 = RAdd(RAdd(RMul(l_r_37,l_r_71),RMul(l_r_44,l_r_77)),RMul(l_r_51,l_r_57));
        real l_r_97 = RAdd(RAdd(RMul(l_r_37,l_r_73),RMul(l_r_44,l_r_79)),RMul(l_r_51,l_r_67));
        real l_r_98 = RAdd(RAdd(RMul(l_r_38,l_r_57),RMul(l_r_45,l_r_74)),RMul(l_r_52,l_r_80));
        real l_r_99 = RAdd(RAdd(RMul(l_r_38,l_r_62),RMul(l_r_45,l_r_75)),RMul(l_r_52,l_r_81));
        real l_r_100 = RAdd(RAdd(RMul(l_r_38,l_r_68),RMul(l_r_45,l_r_57)),RMul(l_r_52,l_r_83));
        real l_r_101 = RAdd(RAdd(RMul(l_r_38,l_r_69),RMul(l_r_45,l_r_62)),RMul(l_r_52,l_r_84));
        real l_r_102 = RAdd(RAdd(RMul(l_r_38,l_r_71),RMul(l_r_45,l_r_77)),RMul(l_r_52,l_r_57));
        real l_r_103 = RAdd(RAdd(RMul(l_r_38,l_r_72),RMul(l_r_45,l_r_78)),RMul(l_r_52,l_r_62));
        vec3{4} v_104 = VEC3{4}(l_r_37,l_r_44,l_r_51);
        real l_r_105 = RMul(0.e0,RAdd(RAdd(RMul(l_r_35,l_r_57),RMul(l_r_42,l_r_74)),RMul(l_r_49,l_r_80)));
        real l_r_106 = RMul(0.e0,l_r_87);
        real l_r_107 = RMul(0.e0,l_r_92);
        real l_r_108 = RMul(0.e0,RAdd(RAdd(RMul(l_r_37,l_r_62),RMul(l_r_44,l_r_75)),RMul(l_r_51,l_r_81)));
        real l_r_109 = RMul(0.e0,l_r_98);
        real l_r_110 = RMul(0.e0,RAdd(RAdd(RMul(l_r_38,l_r_67),RMul(l_r_45,l_r_76)),RMul(l_r_52,l_r_82)));
        real l_r_111 = RAdd(l_r_105,RMul(0.e0,l_r_86));
        real l_r_112 = RMul(0.e0,RAdd(RAdd(RMul(l_r_35,l_r_68),RMul(l_r_42,l_r_57)),RMul(l_r_49,l_r_83)));
        real l_r_113 = RMul(0.e0,l_r_89);
        real l_r_114 = RMul(0.e0,l_r_94);
        real l_r_115 = RMul(0.e0,RAdd(RAdd(RMul(l_r_37,l_r_69),RMul(l_r_44,l_r_62)),RMul(l_r_51,l_r_84)));
        real l_r_116 = RMul(0.e0,l_r_100);
        real l_r_117 = RMul(0.e0,RAdd(RAdd(RMul(l_r_38,l_r_70),RMul(l_r_45,l_r_67)),RMul(l_r_52,l_r_85)));
        real l_r_118 = RAdd(l_r_112,RMul(0.e0,l_r_88));
        real l_r_119 = RMul(0.e0,RAdd(RAdd(RMul(l_r_35,l_r_71),RMul(l_r_42,l_r_77)),RMul(l_r_49,l_r_57)));
        real l_r_120 = RMul(0.e0,l_r_91);
        real l_r_121 = RMul(0.e0,l_r_96);
        real l_r_122 = RMul(0.e0,RAdd(RAdd(RMul(l_r_37,l_r_72),RMul(l_r_44,l_r_78)),RMul(l_r_51,l_r_62)));
        real l_r_123 = RMul(0.e0,l_r_102);
        real l_r_124 = RMul(0.e0,RAdd(RAdd(RMul(l_r_38,l_r_73),RMul(l_r_45,l_r_79)),RMul(l_r_52,l_r_67)));
        real l_r_125 = RAdd(l_r_119,RMul(0.e0,l_r_90));
        real l_r_126 = RMul(0.e0,l_r_93);
        real l_r_127 = RMul(0.e0,l_r_99);
        real l_r_128 = RMul(0.e0,l_r_95);
        real l_r_129 = RMul(0.e0,l_r_101);
        real l_r_130 = RMul(0.e0,l_r_97);
        real l_r_131 = RMul(0.e0,l_r_103);
        real l_op1_e3_l_21_132 = RMul(0.2e1,VDot<3,4>(VEC3{4}(l_r_35,l_r_42,l_r_49),VEC3{4}(VDot<3,4>(v_104,VEC3{4}(l_r_67,l_r_76,l_r_82)),VDot<3,4>(v_104,VEC3{4}(l_r_70,l_r_67,l_r_85)),VDot<3,4>(v_104,VEC3{4}(l_r_73,l_r_79,l_r_67)))));
        real l_prod_133 = RMul(VIndex<3,4,0>(v_5),l_prod_28);
        real l_prod_134 = RMul(0.1e1,RMul(VIndex<3,4,1>(v_5),0.1e1));
        real l_prod_135 = RMul(0.1e1,RMul(0.1e1,VIndex<3,4,2>(v_5)));
        real l_sum_136 = RAdd(l_basisEval_31,RAdd(RMul(-0.1e1,l_prod_135),RAdd(RMul(-0.1e1,l_prod_134),RMul(-0.1e1,l_prod_133))));
        real l_basisEval_137 = RMul(0.1e1,l_prod_133);
        real l_basisEval_138 = RMul(0.1e1,l_prod_134);
        real l_basisEval_139 = RMul(0.1e1,l_prod_135);
        vec3{4} v_140 = VSub<3,4>(VEC3{4}(RAdd(RAdd(RAdd(RMul(l_dof_load_10,l_sum_136),RMul(l_dof_load_15,l_basisEval_137)),RMul(l_dof_load_20,l_basisEval_138)),RMul(l_dof_load_25,l_basisEval_139)),RAdd(RAdd(RAdd(RMul(l_dof_load_11,l_sum_136),RMul(l_dof_load_16,l_basisEval_137)),RMul(l_dof_load_21,l_basisEval_138)),RMul(l_dof_load_26,l_basisEval_139)),RAdd(RAdd(RAdd(RMul(l_dof_load_12,l_sum_136),RMul(l_dof_load_17,l_basisEval_137)),RMul(l_dof_load_22,l_basisEval_138)),RMul(l_dof_load_27,l_basisEval_139))),LOAD_0(p_pos_1));
        vec3{4} v_141 = VEC3{4}(VDot<3,4>(VEC3{4}(RDiv(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(l_r_111,l_r_106),l_r_107),l_r_108),RMul(0.1e1,l_r_93)),l_r_109),RMul(-0.1e1,l_r_99)),l_r_110),l_op1_e3_l_21_132),RDiv(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(l_r_118,l_r_113),l_r_114),l_r_115),RMul(0.1e1,l_r_95)),l_r_116),RMul(-0.1e1,l_r_101)),l_r_117),l_op1_e3_l_21_132),RDiv(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(l_r_125,l_r_120),l_r_121),l_r_122),RMul(0.1e1,l_r_97)),l_r_123),RMul(-0.1e1,l_r_103)),l_r_124),l_op1_e3_l_21_132)),v_140),VDot<3,4>(VEC3{4}(RDiv(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(l_r_111,RMul(-0.1e1,l_r_87)),l_r_107),l_r_108),l_r_126),RMul(0.1e1,l_r_98)),l_r_127),l_r_110),l_op1_e3_l_21_132),RDiv(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(l_r_118,RMul(-0.1e1,l_r_89)),l_r_114),l_r_115),l_r_128),RMul(0.1e1,l_r_100)),l_r_129),l_r_117),l_op1_e3_l_21_132),RDiv(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(l_r_125,RMul(-0.1e1,l_r_91)),l_r_121),l_r_122),l_r_130),RMul(0.1e1,l_r_102)),l_r_131),l_r_124),l_op1_e3_l_21_132)),v_140),VDot<3,4>(VEC3{4}(RDiv(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(l_r_105,RMul(0.1e1,l_r_86)),l_r_106),RMul(-0.1e1,l_r_92)),l_r_108),l_r_126),l_r_109),l_r_127),l_r_110),l_op1_e3_l_21_132),RDiv(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(l_r_112,RMul(0.1e1,l_r_88)),l_r_113),RMul(-0.1e1,l_r_94)),l_r_115),l_r_128),l_r_116),l_r_129),l_r_117),l_op1_e3_l_21_132),RDiv(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(l_r_119,RMul(0.1e1,l_r_90)),l_r_120),RMul(-0.1e1,l_r_96)),l_r_122),l_r_130),l_r_123),l_r_131),l_r_124),l_op1_e3_l_21_132)),v_140));
        vec3{4} v_142 = VSub<3,4>(v_5,v_141);
        vec3{4} v_143 = v_142;
        if (GTE<real>(RMul(0.1e-7,0.1e-7),VDot<3,4>(v_141,v_141))) {
          vec3{4} v_144 = VAdd<3,4>(VEC3{4}(0.1e-8,0.1e-8,0.1e-8),v_143);
          if (BAnd(GT<real>(RAdd(0.1e1,0.1e-8),VDot<3,4>(VEC3{4}(0.1e1,0.1e1,0.1e1),v_143)),BAnd(GT<real>(VIndex<3,4,0>(v_144),-0.e0),BAnd(GT<real>(VIndex<3,4,1>(v_144),-0.e0),GT<real>(VIndex<3,4,2>(v_144),-0.e0))))) {
            tensor[3] _arg_145 = PACK(v_143);
            return ExtractFemItemN<[femData(Mesh),int,tensor[3],tensor[3]],femData(MeshPos),AllBuild(MeshPos),"","",[],int>(p_mesh_0,i_cellItter_3,_arg_145,p_pos_1)
          }
        }
        v_5 = v_143;
      }
      v_2 = v_5;
    }
    print("Bad end 2","\n");
    return ExtractFemItemN<[femData(Mesh)],femData(MeshPos),InvalidBuild(MeshPos),"","",[],int>(p_mesh_0)
  }
//***** GLOBAL VARIABLE INIT *****
  {
    femData(MeshCell)[] l__t_146;
    l__t_146 = <femData(MeshCell)[]>{};
    for i__t_147 = 0 to ISub(ExtractFemItem<int,NumCell(Mesh)>(globals.cube),1) {
      l__t_146 = Append<femData(MeshCell),femData(MeshCell)>(l__t_146,LoadFem<femData(MeshCell)>(globals.cube,i__t_147));
    }
    globals.0cell_cube = l__t_146;
    femData(FemFunc) l_data_148 = LoadFem<femData(FemFunc)>(globals.0data0344_intermedateGlobal,LoadFem<femData(Space)>(globals.0space0342_intermedateGlobal,globals.cube));
    femData(Space) l__t_149 = ExtractFem<femData(Space),femData(FemFunc)>(l_data_148);
    globals._t = ExtractFem<femData(Mesh),femData(Space)>(l__t_149);
    globals._tX = l__t_149;
    globals.data = l_data_148;
  }
//***** STRAND *****
strand gg (&tensor[3] p_i_150) {
  output tensor[3] target;
  varying output tensor[3] translated;
  varying output bool valid;
  varying output femData(MeshCell) c;
  varying output real result;
  varying output tensor[3] gradResult;
  output tensor[3] gradResultp;
  initialize (globals) {
    vec3{4} v_151 = VEC3{4}(nan,nan,nan);
    self.target = TensorCopy<[3]>(p_i_150);
    self.translated = PACK(v_151);
    self.valid = false;
    self.c = Subscript<femData(MeshCell)[]>(globals.0cell_cube,0);
    self.result = nan;
    self.gradResult = PACK(v_151);
    self.gradResultp = PACK(v_151);
  }
  update (world, globals) {
    vec3{4} v_645;
    femData(MeshCell) l_c_644;
    real l_compositionl_643;
    vec3{4} v_642;
    print("Running on ",TensorRef<[3]>(self.target),"\n");
    femData(MeshPos) l_p_155 = findPos$3284(globals.cube,TensorRef<[3]>(self.target));
    bool l_valid_156 = ExtractFemItem<bool,Valid(MeshPos)>(l_p_155);
    if (l_valid_156) {
      femData(MeshPos) l_callFindPos_157 = findPos$3284(globals._t,TensorRef<[3]>(self.target));
      int l_intPos_158 = ExtractFemItem<int,CellIndex(Mesh)>(l_callFindPos_157);
      &tensor[3] l_refPos_159 = ExtractFemItem<tensor[3],RefPos(Mesh)>(l_callFindPos_157);
      int l_mulRes_160 = IMul(l_intPos_158,35);
      int t_161 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,l_mulRes_160);
      int t_162 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,IAdd(l_mulRes_160,1));
      int t_163 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,IAdd(l_mulRes_160,2));
      int t_164 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,IAdd(l_mulRes_160,3));
      int t_165 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,IAdd(l_mulRes_160,4));
      int t_166 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,IAdd(l_mulRes_160,5));
      int t_167 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,IAdd(l_mulRes_160,6));
      int t_168 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,IAdd(l_mulRes_160,7));
      int t_169 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,IAdd(l_mulRes_160,8));
      int t_170 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,IAdd(l_mulRes_160,9));
      int t_171 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,IAdd(l_mulRes_160,10));
      int t_172 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,IAdd(l_mulRes_160,11));
      int t_173 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,IAdd(l_mulRes_160,12));
      int t_174 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,IAdd(l_mulRes_160,13));
      int t_175 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,IAdd(l_mulRes_160,14));
      int t_176 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,IAdd(l_mulRes_160,15));
      int t_177 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,IAdd(l_mulRes_160,16));
      int t_178 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,IAdd(l_mulRes_160,17));
      int t_179 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,IAdd(l_mulRes_160,18));
      int t_180 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,IAdd(l_mulRes_160,19));
      int t_181 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,IAdd(l_mulRes_160,20));
      int t_182 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,IAdd(l_mulRes_160,21));
      int t_183 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,IAdd(l_mulRes_160,22));
      int t_184 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,IAdd(l_mulRes_160,23));
      int t_185 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,IAdd(l_mulRes_160,24));
      int t_186 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,IAdd(l_mulRes_160,25));
      int t_187 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,IAdd(l_mulRes_160,26));
      int t_188 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,IAdd(l_mulRes_160,27));
      int t_189 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,IAdd(l_mulRes_160,28));
      int t_190 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,IAdd(l_mulRes_160,29));
      int t_191 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,IAdd(l_mulRes_160,30));
      int t_192 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,IAdd(l_mulRes_160,31));
      int t_193 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,IAdd(l_mulRes_160,32));
      int t_194 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,IAdd(l_mulRes_160,33));
      int t_195 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,IAdd(l_mulRes_160,34));
      real t_196 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_195));
      real t_197 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_194));
      real t_198 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_193));
      real t_199 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_192));
      real t_200 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_191));
      real t_201 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_190));
      real t_202 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_189));
      real t_203 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_188));
      real t_204 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_187));
      real t_205 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_186));
      real t_206 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_185));
      real t_207 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_184));
      real t_208 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_183));
      real t_209 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_182));
      real t_210 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_181));
      real t_211 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_180));
      real t_212 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_179));
      real t_213 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_178));
      real t_214 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_177));
      real t_215 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_176));
      real t_216 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_175));
      real t_217 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_174));
      real t_218 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_173));
      real t_219 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_172));
      real t_220 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_171));
      real t_221 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_170));
      real t_222 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_169));
      real t_223 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_168));
      real t_224 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_167));
      real t_225 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_166));
      real t_226 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_165));
      real t_227 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_164));
      real t_228 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_163));
      real t_229 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_162));
      real t_230 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_161));
      vec4 v_231 = VEC4(t_230,t_229,t_228,t_227);
      vec4 v_232 = VEC4(t_226,t_225,t_224,t_223);
      vec4 v_233 = VEC4(t_222,t_221,t_220,t_219);
      vec4 v_234 = VEC4(t_218,t_217,t_216,t_215);
      vec4 v_235 = VEC4(t_214,t_213,t_212,t_211);
      vec4 v_236 = VEC4(t_210,t_209,t_208,t_207);
      vec4 v_237 = VEC4(t_206,t_205,t_204,t_203);
      vec4 v_238 = VEC4(t_202,t_201,t_200,t_199);
      vec3{4} v_239 = VEC3{4}(t_198,t_197,t_196);
      real l_varAcc_240 = VIndex<3,4,0>(LOAD_0(l_refPos_159));
      real l_varAcc_241 = VIndex<3,4,1>(LOAD_0(l_refPos_159));
      real l_varAcc_242 = VIndex<3,4,2>(LOAD_0(l_refPos_159));
      real l_prod2_243 = RMul(l_varAcc_240,l_varAcc_240);
      real l_prod3_244 = RMul(l_prod2_243,l_varAcc_240);
      real l_prod_245 = RMul(0.1e1,0.1e1);
      real l_prod_246 = RMul(RMul(l_prod3_244,l_varAcc_240),l_prod_245);
      real l_prod_247 = RMul(l_varAcc_241,0.1e1);
      real l_prod_248 = RMul(l_prod3_244,l_prod_247);
      real l_prod_249 = RMul(0.1e1,l_varAcc_242);
      real l_prod_250 = RMul(l_prod3_244,l_prod_249);
      real l_prod_251 = RMul(l_prod3_244,l_prod_245);
      real l_prod2_252 = RMul(l_varAcc_241,l_varAcc_241);
      real l_prod_253 = RMul(l_prod2_252,0.1e1);
      real l_prod_254 = RMul(l_prod2_243,l_prod_253);
      real l_prod_255 = RMul(l_varAcc_241,l_varAcc_242);
      real l_prod_256 = RMul(l_prod2_243,l_prod_255);
      real l_prod_257 = RMul(l_prod2_243,l_prod_247);
      real l_prod2_258 = RMul(l_varAcc_242,l_varAcc_242);
      real l_prod_259 = RMul(0.1e1,l_prod2_258);
      real l_prod_260 = RMul(l_prod2_243,l_prod_259);
      real l_prod_261 = RMul(l_prod2_243,l_prod_249);
      real l_prod_262 = RMul(l_prod2_243,l_prod_245);
      real l_prod3_263 = RMul(l_prod2_252,l_varAcc_241);
      real l_prod_264 = RMul(l_prod3_263,0.1e1);
      real l_prod_265 = RMul(l_varAcc_240,l_prod_264);
      real l_prod_266 = RMul(l_prod2_252,l_varAcc_242);
      real l_prod_267 = RMul(l_varAcc_240,l_prod_266);
      real l_prod_268 = RMul(l_varAcc_240,l_prod_253);
      real l_prod_269 = RMul(l_varAcc_241,l_prod2_258);
      real l_prod_270 = RMul(l_varAcc_240,l_prod_269);
      real l_prod_271 = RMul(l_varAcc_240,l_prod_255);
      real l_prod_272 = RMul(l_varAcc_240,l_prod_247);
      real l_prod3_273 = RMul(l_prod2_258,l_varAcc_242);
      real l_prod_274 = RMul(0.1e1,l_prod3_273);
      real l_prod_275 = RMul(l_varAcc_240,l_prod_274);
      real l_prod_276 = RMul(l_varAcc_240,l_prod_259);
      real l_prod_277 = RMul(l_varAcc_240,l_prod_249);
      real l_prod_278 = RMul(l_varAcc_240,l_prod_245);
      real l_prod_279 = RMul(0.1e1,RMul(RMul(l_prod3_263,l_varAcc_241),0.1e1));
      real l_prod_280 = RMul(0.1e1,RMul(l_prod3_263,l_varAcc_242));
      real l_prod_281 = RMul(0.1e1,l_prod_264);
      real l_prod_282 = RMul(0.1e1,RMul(l_prod2_252,l_prod2_258));
      real l_prod_283 = RMul(0.1e1,l_prod_266);
      real l_prod_284 = RMul(0.1e1,l_prod_253);
      real l_prod_285 = RMul(0.1e1,RMul(l_varAcc_241,l_prod3_273));
      real l_prod_286 = RMul(0.1e1,l_prod_269);
      real l_prod_287 = RMul(0.1e1,l_prod_255);
      real l_prod_288 = RMul(0.1e1,l_prod_247);
      real l_prod_289 = RMul(0.1e1,RMul(0.1e1,RMul(l_prod3_273,l_varAcc_242)));
      real l_prod_290 = RMul(0.1e1,l_prod_274);
      real l_prod_291 = RMul(0.1e1,l_prod_259);
      real l_prod_292 = RMul(0.1e1,l_prod_249);
      real l_prod_293 = RMul(0.1e1,l_prod_245);
      real l_mult_294 = RMul(0.1e1,l_prod_293);
      real l_mult_295 = RMul(0.106666666667e2,l_prod_289);
      real l_mult_296 = RMul(0.426666666667e2,l_prod_285);
      real l_mult_297 = RMul(0.64e2,l_prod_282);
      real l_mult_298 = RMul(0.426666666667e2,l_prod_280);
      real l_mult_299 = RMul(0.106666666667e2,l_prod_279);
      real l_mult_300 = RMul(0.426666666667e2,l_prod_275);
      real l_mult_301 = RMul(0.128e3,l_prod_270);
      real l_mult_302 = RMul(0.128e3,l_prod_267);
      real l_mult_303 = RMul(0.426666666667e2,l_prod_265);
      real l_mult_304 = RMul(0.64e2,l_prod_260);
      real l_mult_305 = RMul(0.128e3,l_prod_256);
      real l_mult_306 = RMul(0.64e2,l_prod_254);
      real l_mult_307 = RMul(0.426666666667e2,l_prod_250);
      real l_mult_308 = RMul(0.426666666667e2,l_prod_248);
      real l_mult_309 = RMul(0.106666666667e2,l_prod_246);
      real l_mult_310 = RMul(0.533333333333e1,l_prod_287);
      real l_mult_311 = RMul(-0.16e2,l_prod_286);
      real l_mult_312 = RMul(-0.16e2,l_prod_283);
      real l_mult_313 = RMul(0.533333333333e1,l_prod_277);
      real l_mult_314 = RMul(-0.16e2,l_prod_276);
      real l_sum_315 = RAdd(RMul(-0.16e2,l_prod_261),l_mult_304);
      real l_mult_316 = RMul(0.533333333333e1,l_prod_272);
      real l_mult_317 = RMul(-0.16e2,l_prod_268);
      real l_sum_318 = RAdd(RMul(-0.16e2,l_prod_257),l_mult_306);
      real l_mult_319 = RMul(-0.426666666667e2,l_prod_289);
      real l_mult_320 = RMul(-0.693333333333e2,l_prod_287);
      real l_mult_321 = RMul(-0.128e3,l_prod_285);
      real l_mult_322 = RMul(-0.128e3,l_prod_282);
      real l_mult_323 = RMul(-0.426666666667e2,l_prod_280);
      real l_mult_324 = RMul(-0.693333333333e2,l_prod_277);
      real l_mult_325 = RMul(-0.128e3,l_prod_275);
      real l_mult_326 = RMul(0.192e3,l_prod_271);
      real l_mult_327 = RMul(-0.256e3,l_prod_270);
      real l_mult_328 = RMul(-0.128e3,l_prod_267);
      real l_mult_329 = RMul(-0.128e3,l_prod_260);
      real l_mult_330 = RMul(-0.128e3,l_prod_256);
      real l_mult_331 = RMul(-0.426666666667e2,l_prod_250);
      real l_mult_332 = RMul(-0.128e3,l_prod_290);
      real l_mult_333 = RMul(0.28e2,l_prod_287);
      real l_mult_334 = RMul(0.128e3,l_prod_285);
      real l_mult_335 = RMul(0.28e2,l_prod_277);
      real l_mult_336 = RMul(0.128e3,l_prod_275);
      real l_mult_337 = RMul(-0.32e2,l_prod_271);
      real l_mult_338 = RMul(0.533333333333e1,l_prod_292);
      real l_mult_339 = RMul(-0.533333333333e1,l_prod_287);
      real l_mult_340 = RMul(0.32e2,l_prod_286);
      real l_mult_341 = RMul(-0.426666666667e2,l_prod_285);
      real l_mult_342 = RMul(-0.533333333333e1,l_prod_277);
      real l_mult_343 = RMul(0.32e2,l_prod_276);
      real l_mult_344 = RMul(-0.426666666667e2,l_prod_275);
      real l_mult_345 = RMul(-0.128e3,l_prod_280);
      real l_mult_346 = RMul(-0.426666666667e2,l_prod_279);
      real l_mult_347 = RMul(-0.693333333333e2,l_prod_272);
      real l_mult_348 = RMul(-0.128e3,l_prod_270);
      real l_mult_349 = RMul(-0.256e3,l_prod_267);
      real l_mult_350 = RMul(-0.128e3,l_prod_265);
      real l_mult_351 = RMul(-0.128e3,l_prod_254);
      real l_mult_352 = RMul(-0.426666666667e2,l_prod_248);
      real l_mult_353 = RMul(-0.128e3,l_prod_281);
      real l_mult_354 = RMul(0.128e3,l_prod_280);
      real l_mult_355 = RMul(0.28e2,l_prod_272);
      real l_mult_356 = RMul(0.128e3,l_prod_265);
      real l_mult_357 = RMul(0.533333333333e1,l_prod_288);
      real l_mult_358 = RMul(0.32e2,l_prod_283);
      real l_mult_359 = RMul(-0.533333333333e1,l_prod_272);
      real l_mult_360 = RMul(0.32e2,l_prod_268);
      real l_mult_361 = RMul(-0.426666666667e2,l_prod_265);
      real l_mult_362 = RMul(-0.256e3,l_prod_256);
      real l_mult_363 = RMul(-0.128e3,l_prod_250);
      real l_mult_364 = RMul(-0.128e3,l_prod_248);
      real l_mult_365 = RMul(-0.426666666667e2,l_prod_246);
      real l_mult_366 = RMul(-0.128e3,l_prod_251);
      real l_mult_367 = RMul(0.128e3,l_prod_250);
      real l_mult_368 = RMul(0.128e3,l_prod_248);
      real l_mult_369 = RMul(0.533333333333e1,l_prod_278);
      real l_mult_370 = RMul(0.32e2,l_prod_261);
      real l_mult_371 = RMul(0.32e2,l_prod_257);
      real l_mult_372 = RMul(-0.224e3,l_prod_271);
      real l_mult_373 = RMul(0.256e3,l_prod_270);
      real l_mult_374 = RMul(0.256e3,l_prod_267);
      real l_mult_375 = RMul(-0.32e2,l_prod_287);
      real l_mult_376 = RMul(0.32e2,l_prod_271);
      real l_mult_377 = RMul(0.256e3,l_prod_256);
      real l_mult_378 = RMul(-0.32e2,l_prod_277);
      real l_mult_379 = RMul(-0.32e2,l_prod_272);
      real l_mult_380 = RMul(0.256e3,l_prod_271);
      real l_mult_381 = RMul(0.426666666667e2,l_prod_290);
      real l_mult_382 = RMul(0.128e3,l_prod_286);
      real l_mult_383 = RMul(0.128e3,l_prod_283);
      real l_mult_384 = RMul(0.426666666667e2,l_prod_281);
      real l_mult_385 = RMul(0.128e3,l_prod_276);
      real l_mult_386 = RMul(0.128e3,l_prod_268);
      real l_mult_387 = RMul(0.128e3,l_prod_261);
      real l_mult_388 = RMul(0.128e3,l_prod_257);
      real l_mult_389 = RMul(0.426666666667e2,l_prod_251);
      real l_sum_390 = RAdd(RMul(-0.833333333333e1,l_prod_293),RAdd(RMul(0.466666666667e2,l_prod_292),RAdd(RMul(-0.80e2,l_prod_291),RAdd(l_mult_381,RAdd(RMul(0.466666666667e2,l_prod_288),RAdd(RMul(-0.160e3,l_prod_287),RAdd(l_mult_382,RAdd(RMul(-0.80e2,l_prod_284),RAdd(l_mult_383,RAdd(l_mult_384,RAdd(RMul(0.466666666667e2,l_prod_278),RAdd(RMul(-0.160e3,l_prod_277),RAdd(l_mult_385,RAdd(RMul(-0.160e3,l_prod_272),RAdd(l_mult_380,RAdd(l_mult_386,RAdd(RMul(-0.80e2,l_prod_262),RAdd(l_mult_387,RAdd(l_mult_388,l_mult_389)))))))))))))))))));
      real l_mult_391 = RMul(-0.1e1,l_prod_293);
      real l_mult_392 = RMul(-0.64e2,l_prod_277);
      real l_mult_393 = RMul(0.4e1,l_prod_292);
      real l_mult_394 = RMul(-0.16e2,l_prod_291);
      real l_sum_395 = RAdd(l_mult_378,l_mult_385);
      real l_sum_396 = RAdd(l_mult_338,RAdd(RMul(-0.32e2,l_prod_291),l_mult_381));
      real l_mult_397 = RMul(-0.64e2,l_prod_272);
      real l_mult_398 = RMul(0.4e1,l_prod_288);
      real l_mult_399 = RMul(-0.16e2,l_prod_284);
      real l_sum_400 = RAdd(l_mult_379,l_mult_386);
      real l_sum_401 = RAdd(l_mult_357,RAdd(RMul(-0.32e2,l_prod_284),l_mult_384));
      real l_mult_402 = RMul(-0.693333333333e2,l_prod_292);
      real l_mult_403 = RMul(0.192e3,l_prod_287);
      real l_mult_404 = RMul(-0.256e3,l_prod_286);
      real l_mult_405 = RMul(-0.128e3,l_prod_283);
      real l_mult_406 = RMul(0.192e3,l_prod_277);
      real l_mult_407 = RMul(-0.256e3,l_prod_276);
      real l_mult_408 = RMul(-0.256e3,l_prod_271);
      real l_mult_409 = RMul(-0.128e3,l_prod_261);
      real l_sum_410 = RAdd(l_mult_402,RAdd(RMul(0.192e3,l_prod_291),RAdd(l_mult_332,RAdd(l_mult_403,RAdd(l_mult_404,RAdd(l_mult_405,RAdd(l_mult_406,RAdd(l_mult_407,RAdd(l_mult_408,l_mult_409)))))))));
      real l_mult_411 = RMul(0.28e2,l_prod_292);
      real l_mult_412 = RMul(0.128e3,l_prod_290);
      real l_sum_413 = RAdd(l_mult_411,RAdd(RMul(-0.144e3,l_prod_291),RAdd(l_mult_412,RAdd(l_mult_375,RAdd(l_mult_382,l_sum_395)))));
      real l_mult_414 = RMul(-0.533333333333e1,l_prod_292);
      real l_mult_415 = RMul(0.32e2,l_prod_291);
      real l_mult_416 = RMul(-0.426666666667e2,l_prod_290);
      real l_sum_417 = RAdd(l_mult_414,RAdd(l_mult_415,l_mult_416));
      real l_mult_418 = RMul(-0.693333333333e2,l_prod_288);
      real l_mult_419 = RMul(-0.128e3,l_prod_286);
      real l_mult_420 = RMul(-0.256e3,l_prod_283);
      real l_mult_421 = RMul(0.192e3,l_prod_272);
      real l_mult_422 = RMul(-0.256e3,l_prod_268);
      real l_mult_423 = RMul(-0.128e3,l_prod_257);
      real l_sum_424 = RAdd(l_mult_418,RAdd(l_mult_403,RAdd(l_mult_419,RAdd(RMul(0.192e3,l_prod_284),RAdd(l_mult_420,RAdd(l_mult_353,RAdd(l_mult_421,RAdd(l_mult_408,RAdd(l_mult_422,l_mult_423)))))))));
      real l_mult_425 = RMul(0.28e2,l_prod_288);
      real l_mult_426 = RMul(0.128e3,l_prod_281);
      real l_sum_427 = RAdd(l_mult_425,RAdd(l_mult_375,RAdd(RMul(-0.144e3,l_prod_284),RAdd(l_mult_383,RAdd(l_mult_426,l_sum_400)))));
      real l_mult_428 = RMul(-0.533333333333e1,l_prod_288);
      real l_mult_429 = RMul(0.32e2,l_prod_284);
      real l_mult_430 = RMul(-0.426666666667e2,l_prod_281);
      real l_sum_431 = RAdd(l_mult_428,RAdd(l_mult_429,l_mult_430));
      real l_mult_432 = RMul(0.16e2,l_prod_293);
      real l_mult_433 = RMul(0.96e2,l_prod_291);
      real l_mult_434 = RMul(0.96e2,l_prod_284);
      real l_mult_435 = RMul(0.384e3,l_prod_277);
      real l_mult_436 = RMul(0.384e3,l_prod_272);
      real l_mult_437 = RMul(-0.512e3,l_prod_271);
      real l_mult_438 = RMul(-0.384e3,l_prod_261);
      real l_mult_439 = RMul(-0.384e3,l_prod_257);
      real l_mult_440 = RMul(-0.170666666667e3,l_prod_251);
      real l_mult_441 = RMul(-0.12e2,l_prod_293);
      real l_mult_442 = RMul(-0.288e3,l_prod_277);
      real l_mult_443 = RMul(-0.288e3,l_prod_272);
      real l_mult_444 = RMul(0.384e3,l_prod_261);
      real l_mult_445 = RMul(0.384e3,l_prod_257);
      real l_mult_446 = RMul(0.533333333333e1,l_prod_293);
      real l_mult_447 = RMul(0.64e2,l_prod_277);
      real l_mult_448 = RMul(0.64e2,l_prod_272);
      real l_sum_449 = RAdd(l_mult_375,l_mult_382);
      real l_mult_450 = RMul(-0.224e3,l_prod_287);
      real l_mult_451 = RMul(0.256e3,l_prod_286);
      real l_mult_452 = RMul(0.256e3,l_prod_283);
      real l_mult_453 = RMul(0.32e2,l_prod_287);
      real l_mult_454 = RMul(0.96e2,l_prod_292);
      real l_mult_455 = RMul(-0.224e3,l_prod_291);
      real l_mult_456 = RMul(-0.448e3,l_prod_277);
      real l_mult_457 = RMul(0.512e3,l_prod_271);
      real l_mult_458 = RMul(-0.32e2,l_prod_292);
      real l_mult_459 = RMul(0.320e3,l_prod_277);
      real l_mult_460 = RMul(0.160e3,l_prod_291);
      real l_mult_461 = RMul(0.96e2,l_prod_288);
      real l_mult_462 = RMul(-0.224e3,l_prod_284);
      real l_mult_463 = RMul(-0.448e3,l_prod_272);
      real l_mult_464 = RMul(-0.32e2,l_prod_288);
      real l_mult_465 = RMul(0.320e3,l_prod_272);
      real l_mult_466 = RMul(0.160e3,l_prod_284);
      real l_mult_467 = RMul(-0.64e2,l_prod_287);
      real l_sum_468 = RAdd(l_mult_369,RAdd(RMul(-0.32e2,l_prod_262),l_mult_389));
      real l_mult_469 = RMul(0.4e1,l_prod_278);
      real l_mult_470 = RMul(-0.16e2,l_prod_262);
      real l_sum_471 = RAdd(l_mult_470,l_mult_388);
      real l_mult_472 = RMul(0.384e3,l_prod_287);
      real l_mult_473 = RMul(-0.384e3,l_prod_283);
      real l_mult_474 = RMul(-0.170666666667e3,l_prod_281);
      real l_mult_475 = RMul(-0.693333333333e2,l_prod_278);
      real l_mult_476 = RMul(-0.128e3,l_prod_276);
      real l_mult_477 = RMul(-0.384e3,l_prod_268);
      real l_mult_478 = RMul(0.96e2,l_prod_262);
      real l_mult_479 = RMul(-0.256e3,l_prod_257);
      real l_mult_480 = RMul(-0.426666666667e2,l_prod_251);
      real l_mult_481 = RMul(-0.288e3,l_prod_287);
      real l_mult_482 = RMul(0.384e3,l_prod_283);
      real l_mult_483 = RMul(0.28e2,l_prod_278);
      real l_mult_484 = RMul(0.384e3,l_prod_268);
      real l_mult_485 = RMul(0.64e2,l_prod_287);
      real l_mult_486 = RMul(-0.533333333333e1,l_prod_278);
      real l_mult_487 = RMul(-0.128e3,l_prod_268);
      real l_mult_488 = RMul(-0.256e3,l_prod_261);
      real l_sum_489 = RAdd(l_mult_479,l_mult_366);
      real l_sum_490 = RAdd(l_mult_475,RAdd(l_mult_406,RAdd(l_mult_476,RAdd(l_mult_421,RAdd(l_mult_408,RAdd(l_mult_487,RAdd(RMul(0.192e3,l_prod_262),RAdd(l_mult_488,l_sum_489))))))));
      real l_mult_491 = RMul(0.128e3,l_prod_251);
      real l_sum_492 = RAdd(l_mult_483,RAdd(l_mult_378,RAdd(l_mult_379,RAdd(RMul(-0.144e3,l_prod_262),RAdd(l_mult_387,RAdd(l_mult_388,l_mult_491))))));
      real l_mult_493 = RMul(0.32e2,l_prod_262);
      real l_sum_494 = RAdd(l_mult_486,RAdd(l_mult_493,l_mult_480));
      real l_mult_495 = RMul(-0.448e3,l_prod_287);
      real l_mult_496 = RMul(-0.224e3,l_prod_277);
      real l_mult_497 = RMul(0.256e3,l_prod_276);
      real l_mult_498 = RMul(0.320e3,l_prod_287);
      real l_mult_499 = RMul(0.32e2,l_prod_277);
      real l_sum_500 = RAdd(l_mult_499,l_mult_476);
      real l_mult_501 = RMul(0.256e3,l_prod_261);
      real l_mult_502 = RMul(0.96e2,l_prod_278);
      real l_mult_503 = RMul(-0.224e3,l_prod_262);
      real l_mult_504 = RMul(-0.32e2,l_prod_278);
      real l_mult_505 = RMul(0.160e3,l_prod_262);
      real l_sum_506 = RAdd(l_mult_470,l_mult_387);
      real l_mult_507 = RMul(-0.170666666667e3,l_prod_290);
      real l_mult_508 = RMul(-0.384e3,l_prod_286);
      real l_mult_509 = RMul(-0.384e3,l_prod_276);
      real l_mult_510 = RMul(0.384e3,l_prod_286);
      real l_mult_511 = RMul(0.384e3,l_prod_276);
      real l_mult_512 = RMul(-0.224e3,l_prod_272);
      real l_mult_513 = RMul(0.256e3,l_prod_268);
      real l_mult_514 = RMul(0.32e2,l_prod_272);
      real l_sum_515 = RAdd(l_mult_514,l_mult_487);
      real l_mult_516 = RMul(0.256e3,l_prod_257);
      real l_vdot_517 = RAdd(VDot<4,4>(v_232,VEC4(0.e0,0.e0,0.e0,RAdd(l_mult_338,RAdd(l_mult_392,l_mult_387)))),RAdd(VDot<4,4>(v_233,VEC4(RAdd(l_mult_393,RAdd(l_mult_394,l_sum_395)),l_sum_396,RAdd(l_mult_357,RAdd(l_mult_397,l_mult_388)),RAdd(l_mult_398,RAdd(l_mult_399,l_sum_400)))),RAdd(VDot<4,4>(v_234,VEC4(l_sum_401,l_sum_410,l_sum_413,l_sum_417)),RAdd(VDot<4,4>(v_235,VEC4(l_sum_424,l_sum_427,l_sum_431,RAdd(l_mult_432,RAdd(l_mult_402,RAdd(l_mult_433,RAdd(l_mult_416,RAdd(l_mult_418,RAdd(l_mult_403,RAdd(l_mult_419,RAdd(l_mult_434,RAdd(l_mult_405,RAdd(l_mult_430,RAdd(RMul(-0.138666666667e3,l_prod_278),RAdd(l_mult_435,RAdd(l_mult_407,RAdd(l_mult_436,RAdd(l_mult_437,RAdd(l_mult_422,RAdd(RMul(0.288e3,l_prod_262),RAdd(l_mult_438,RAdd(l_mult_439,l_mult_440))))))))))))))))))))),RAdd(VDot<4,4>(v_236,VEC4(RAdd(l_mult_441,RAdd(l_mult_411,RAdd(l_mult_394,RAdd(l_mult_425,RAdd(l_mult_375,RAdd(l_mult_399,RAdd(RMul(0.152e3,l_prod_278),RAdd(l_mult_442,RAdd(l_mult_385,RAdd(l_mult_443,RAdd(l_mult_380,RAdd(l_mult_386,RAdd(RMul(-0.384e3,l_prod_262),RAdd(l_mult_444,RAdd(l_mult_445,RMul(0.256e3,l_prod_251)))))))))))))))),RAdd(l_mult_446,RAdd(l_mult_414,RAdd(l_mult_428,RAdd(RMul(-0.746666666667e2,l_prod_278),RAdd(l_mult_447,RAdd(l_mult_448,RAdd(RMul(0.224e3,l_prod_262),RAdd(l_mult_409,RAdd(l_mult_423,l_mult_440))))))))),RAdd(l_mult_375,l_mult_380),RAdd(l_mult_375,l_mult_383))),RAdd(VDot<4,4>(v_237,VEC4(l_sum_449,RAdd(l_mult_450,RAdd(l_mult_451,RAdd(l_mult_452,l_mult_380))),RAdd(l_mult_453,l_mult_405),RAdd(l_mult_453,l_mult_419))),RAdd(VDot<4,4>(v_238,VEC4(RAdd(l_mult_454,RAdd(l_mult_455,RAdd(l_mult_412,RAdd(l_mult_450,RAdd(l_mult_451,RAdd(l_mult_383,RAdd(l_mult_456,RAdd(RMul(0.512e3,l_prod_276),RAdd(l_mult_457,l_mult_444))))))))),RAdd(l_mult_458,RAdd(l_mult_415,RAdd(l_mult_453,RAdd(l_mult_459,RAdd(l_mult_407,RAdd(l_mult_408,l_mult_438)))))),RAdd(l_mult_458,RAdd(l_mult_460,RAdd(l_mult_332,RAdd(l_mult_453,RAdd(l_mult_419,RAdd(l_mult_447,l_mult_407)))))),RAdd(l_mult_461,RAdd(l_mult_450,RAdd(l_mult_382,RAdd(l_mult_462,RAdd(l_mult_452,RAdd(l_mult_426,RAdd(l_mult_463,RAdd(l_mult_457,RAdd(RMul(0.512e3,l_prod_268),l_mult_445))))))))))),RAdd(VDot<3,4>(v_239,VEC3{4}(RAdd(l_mult_464,RAdd(l_mult_453,RAdd(l_mult_429,RAdd(l_mult_465,RAdd(l_mult_408,RAdd(l_mult_422,l_mult_439)))))),RAdd(l_mult_464,RAdd(l_mult_453,RAdd(l_mult_466,RAdd(l_mult_405,RAdd(l_mult_353,RAdd(l_mult_448,l_mult_422)))))),RAdd(RMul(0.256e3,l_prod_287),RAdd(l_mult_404,RAdd(l_mult_420,l_mult_437))))),VDot<4,4>(v_231,VEC4(l_sum_390,RAdd(l_mult_391,RAdd(RMul(0.146666666667e2,l_prod_278),RAdd(RMul(-0.48e2,l_prod_262),l_mult_389))),0.e0,0.e0))))))))));
      real l_vdot_518 = RAdd(VDot<4,4>(v_232,VEC4(RAdd(l_mult_338,RAdd(l_mult_467,l_mult_383)),RAdd(l_mult_393,RAdd(l_mult_394,l_sum_449)),l_sum_396,0.e0)),RAdd(VDot<4,4>(v_233,VEC4(0.e0,0.e0,l_sum_468,RAdd(l_mult_469,RAdd(l_mult_379,l_sum_471)))),RAdd(VDot<4,4>(v_234,VEC4(RAdd(l_mult_369,RAdd(l_mult_397,l_mult_386)),l_sum_410,l_sum_413,l_sum_417)),RAdd(VDot<4,4>(v_235,VEC4(RAdd(l_mult_432,RAdd(l_mult_402,RAdd(l_mult_433,RAdd(l_mult_416,RAdd(RMul(-0.138666666667e3,l_prod_288),RAdd(l_mult_472,RAdd(l_mult_404,RAdd(RMul(0.288e3,l_prod_284),RAdd(l_mult_473,RAdd(l_mult_474,RAdd(l_mult_475,RAdd(l_mult_406,RAdd(l_mult_476,RAdd(l_mult_436,RAdd(l_mult_437,RAdd(l_mult_477,RAdd(l_mult_478,RAdd(l_mult_409,RAdd(l_mult_479,l_mult_480))))))))))))))))))),RAdd(l_mult_441,RAdd(l_mult_411,RAdd(l_mult_394,RAdd(RMul(0.152e3,l_prod_288),RAdd(l_mult_481,RAdd(l_mult_382,RAdd(RMul(-0.384e3,l_prod_284),RAdd(l_mult_482,RAdd(RMul(0.256e3,l_prod_281),RAdd(l_mult_483,RAdd(l_mult_378,RAdd(l_mult_443,RAdd(l_mult_380,RAdd(l_mult_484,l_sum_471)))))))))))))),RAdd(l_mult_446,RAdd(l_mult_414,RAdd(RMul(-0.746666666667e2,l_prod_288),RAdd(l_mult_485,RAdd(RMul(0.224e3,l_prod_284),RAdd(l_mult_405,RAdd(l_mult_474,RAdd(l_mult_486,RAdd(l_mult_448,l_mult_487))))))))),l_sum_490)),RAdd(VDot<4,4>(v_236,VEC4(l_sum_492,l_sum_494,RAdd(l_mult_378,l_mult_387),RAdd(l_mult_378,l_mult_380))),RAdd(VDot<4,4>(v_237,VEC4(l_sum_395,RAdd(l_mult_454,RAdd(l_mult_455,RAdd(l_mult_412,RAdd(l_mult_495,RAdd(RMul(0.512e3,l_prod_286),RAdd(l_mult_482,RAdd(l_mult_496,RAdd(l_mult_497,RAdd(l_mult_457,l_mult_387))))))))),RAdd(l_mult_458,RAdd(l_mult_415,RAdd(l_mult_498,RAdd(l_mult_404,RAdd(l_mult_473,RAdd(l_mult_499,l_mult_408)))))),RAdd(l_mult_458,RAdd(l_mult_460,RAdd(l_mult_332,RAdd(l_mult_485,RAdd(l_mult_404,l_sum_500))))))),RAdd(VDot<4,4>(v_238,VEC4(RAdd(l_mult_496,RAdd(l_mult_497,RAdd(l_mult_380,l_mult_501))),RAdd(l_mult_499,l_mult_409),l_sum_500,RAdd(l_mult_502,RAdd(l_mult_496,RAdd(l_mult_385,RAdd(l_mult_463,RAdd(l_mult_457,RAdd(l_mult_484,RAdd(l_mult_503,RAdd(l_mult_501,RAdd(RMul(0.512e3,l_prod_257),l_mult_491))))))))))),RAdd(VDot<3,4>(v_239,VEC3{4}(RAdd(l_mult_504,RAdd(l_mult_499,RAdd(l_mult_448,RAdd(l_mult_505,RAdd(l_mult_409,l_sum_489))))),RAdd(l_mult_504,RAdd(l_mult_499,RAdd(l_mult_465,RAdd(l_mult_408,RAdd(l_mult_477,RAdd(l_mult_493,l_mult_479)))))),RAdd(RMul(0.256e3,l_prod_277),RAdd(l_mult_407,RAdd(l_mult_437,l_mult_488))))),VDot<4,4>(v_231,VEC4(l_sum_390,0.e0,RAdd(l_mult_391,RAdd(RMul(0.146666666667e2,l_prod_288),RAdd(RMul(-0.48e2,l_prod_284),l_mult_384))),0.e0))))))))));
      real l_vdot_519 = RAdd(VDot<4,4>(v_232,VEC4(l_sum_401,RAdd(l_mult_398,RAdd(l_mult_375,RAdd(l_mult_399,l_mult_383))),RAdd(l_mult_357,RAdd(l_mult_467,l_mult_382)),l_sum_468)),RAdd(VDot<4,4>(v_233,VEC4(RAdd(l_mult_469,RAdd(l_mult_378,l_sum_506)),RAdd(l_mult_369,RAdd(l_mult_392,l_mult_385)),0.e0,0.e0)),RAdd(VDot<4,4>(v_234,VEC4(0.e0,RAdd(l_mult_432,RAdd(RMul(-0.138666666667e3,l_prod_292),RAdd(RMul(0.288e3,l_prod_291),RAdd(l_mult_507,RAdd(l_mult_418,RAdd(l_mult_472,RAdd(l_mult_508,RAdd(l_mult_434,RAdd(l_mult_420,RAdd(l_mult_430,RAdd(l_mult_475,RAdd(l_mult_435,RAdd(l_mult_509,RAdd(l_mult_421,RAdd(l_mult_437,RAdd(l_mult_487,RAdd(l_mult_478,RAdd(l_mult_488,RAdd(l_mult_423,l_mult_480))))))))))))))))))),RAdd(l_mult_441,RAdd(RMul(0.152e3,l_prod_292),RAdd(RMul(-0.384e3,l_prod_291),RAdd(RMul(0.256e3,l_prod_290),RAdd(l_mult_425,RAdd(l_mult_481,RAdd(l_mult_510,RAdd(l_mult_399,RAdd(l_mult_383,RAdd(l_mult_483,RAdd(l_mult_442,RAdd(l_mult_511,RAdd(l_mult_379,RAdd(l_mult_380,l_sum_506)))))))))))))),RAdd(l_mult_446,RAdd(RMul(-0.746666666667e2,l_prod_292),RAdd(RMul(0.224e3,l_prod_291),RAdd(l_mult_507,RAdd(l_mult_428,RAdd(l_mult_485,RAdd(l_mult_419,RAdd(l_mult_486,RAdd(l_mult_447,l_mult_476))))))))))),RAdd(VDot<4,4>(v_235,VEC4(l_sum_424,l_sum_427,l_sum_431,l_sum_490)),RAdd(VDot<4,4>(v_236,VEC4(l_sum_492,l_sum_494,RAdd(l_mult_379,l_mult_388),l_sum_400)),RAdd(VDot<4,4>(v_237,VEC4(RAdd(l_mult_379,l_mult_380),RAdd(l_mult_461,RAdd(l_mult_495,RAdd(l_mult_510,RAdd(l_mult_462,RAdd(RMul(0.512e3,l_prod_283),RAdd(l_mult_426,RAdd(l_mult_512,RAdd(l_mult_457,RAdd(l_mult_513,l_mult_388))))))))),RAdd(l_mult_464,RAdd(l_mult_485,RAdd(l_mult_466,RAdd(l_mult_420,RAdd(l_mult_353,l_sum_515))))),RAdd(l_mult_464,RAdd(l_mult_498,RAdd(l_mult_508,RAdd(l_mult_429,RAdd(l_mult_420,RAdd(l_mult_514,l_mult_408)))))))),RAdd(VDot<4,4>(v_238,VEC4(RAdd(l_mult_502,RAdd(l_mult_456,RAdd(l_mult_511,RAdd(l_mult_512,RAdd(l_mult_457,RAdd(l_mult_386,RAdd(l_mult_503,RAdd(RMul(0.512e3,l_prod_261),RAdd(l_mult_516,l_mult_491))))))))),RAdd(l_mult_504,RAdd(l_mult_447,RAdd(l_mult_514,RAdd(l_mult_505,RAdd(l_mult_488,RAdd(l_mult_423,l_mult_366)))))),RAdd(l_mult_504,RAdd(l_mult_459,RAdd(l_mult_509,RAdd(l_mult_514,RAdd(l_mult_408,RAdd(l_mult_493,l_mult_488)))))),RAdd(l_mult_512,RAdd(l_mult_380,RAdd(l_mult_513,l_mult_516))))),RAdd(VDot<3,4>(v_239,VEC3{4}(RAdd(l_mult_514,l_mult_423),l_sum_515,RAdd(RMul(0.256e3,l_prod_272),RAdd(l_mult_437,RAdd(l_mult_422,l_mult_479))))),VDot<4,4>(v_231,VEC4(l_sum_390,0.e0,0.e0,RAdd(l_mult_391,RAdd(RMul(0.146666666667e2,l_prod_292),RAdd(RMul(-0.48e2,l_prod_291),l_mult_381)))))))))))));
      int l_mulRes_520 = IMul(l_intPos_158,4);
      int t_521 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(globals._t,l_mulRes_520);
      int l_mulRes_522 = IMul(3,t_521);
      int t_523 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(globals._t,IAdd(l_mulRes_520,1));
      int l_mulRes_524 = IMul(3,t_523);
      real l_dof_load_525 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(globals._t,l_mulRes_524);
      real l_dof_load_526 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(globals._t,IAdd(1,l_mulRes_524));
      real l_dof_load_527 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(globals._t,IAdd(2,l_mulRes_524));
      int t_528 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(globals._t,IAdd(l_mulRes_520,2));
      int l_mulRes_529 = IMul(3,t_528);
      real l_dof_load_530 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(globals._t,l_mulRes_529);
      real l_dof_load_531 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(globals._t,IAdd(1,l_mulRes_529));
      real l_dof_load_532 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(globals._t,IAdd(2,l_mulRes_529));
      int t_533 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(globals._t,IAdd(l_mulRes_520,3));
      int l_mulRes_534 = IMul(3,t_533);
      real l_dof_load_535 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(globals._t,l_mulRes_534);
      real l_dof_load_536 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(globals._t,IAdd(1,l_mulRes_534));
      real l_dof_load_537 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(globals._t,IAdd(2,l_mulRes_534));
      real t_538 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(globals._t,l_mulRes_522);
      real l_r_539 = RMul(t_538,l_mult_391);
      real l_r_540 = RMul(l_dof_load_530,0.e0);
      real l_r_541 = RMul(l_dof_load_535,0.e0);
      real l_r_542 = RAdd(RAdd(RAdd(l_r_539,RMul(l_dof_load_525,l_mult_294)),l_r_540),l_r_541);
      real l_r_543 = RAdd(l_r_539,RMul(l_dof_load_525,0.e0));
      real l_r_544 = RAdd(RAdd(l_r_543,RMul(l_dof_load_530,l_mult_294)),l_r_541);
      real l_r_545 = RAdd(RAdd(l_r_543,l_r_540),RMul(l_dof_load_535,l_mult_294));
      real t_546 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(globals._t,IAdd(1,l_mulRes_522));
      real l_r_547 = RMul(t_546,l_mult_391);
      real l_r_548 = RMul(l_dof_load_531,0.e0);
      real l_r_549 = RMul(l_dof_load_536,0.e0);
      real l_r_550 = RAdd(RAdd(RAdd(l_r_547,RMul(l_dof_load_526,l_mult_294)),l_r_548),l_r_549);
      real l_r_551 = RAdd(l_r_547,RMul(l_dof_load_526,0.e0));
      real l_r_552 = RAdd(RAdd(l_r_551,RMul(l_dof_load_531,l_mult_294)),l_r_549);
      real l_r_553 = RAdd(RAdd(l_r_551,l_r_548),RMul(l_dof_load_536,l_mult_294));
      real t_554 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(globals._t,IAdd(2,l_mulRes_522));
      real l_r_555 = RMul(t_554,l_mult_391);
      real l_r_556 = RMul(l_dof_load_532,0.e0);
      real l_r_557 = RMul(l_dof_load_537,0.e0);
      real l_r_558 = RAdd(RAdd(RAdd(l_r_555,RMul(l_dof_load_527,l_mult_294)),l_r_556),l_r_557);
      real l_r_559 = RAdd(l_r_555,RMul(l_dof_load_527,0.e0));
      real l_r_560 = RAdd(RAdd(l_r_559,RMul(l_dof_load_532,l_mult_294)),l_r_557);
      real l_r_561 = RAdd(RAdd(l_r_559,l_r_556),RMul(l_dof_load_537,l_mult_294));
      real l_r_562 = RMul(0.e0,l_r_542);
      real l_r_563 = RMul(0.e0,l_r_550);
      real l_r_564 = RMul(0.e0,l_r_558);
      real l_r_565 = RAdd(l_r_562,l_r_563);
      real l_r_566 = RAdd(l_r_565,l_r_564);
      real l_r_567 = RMul(0.e0,l_r_544);
      real l_r_568 = RMul(0.e0,l_r_552);
      real l_r_569 = RMul(0.e0,l_r_560);
      real l_r_570 = RAdd(l_r_567,l_r_568);
      real l_r_571 = RAdd(l_r_570,l_r_569);
      real l_r_572 = RMul(0.e0,l_r_545);
      real l_r_573 = RMul(0.e0,l_r_553);
      real l_r_574 = RMul(0.e0,l_r_561);
      real l_r_575 = RAdd(l_r_572,l_r_573);
      real l_r_576 = RAdd(l_r_575,l_r_574);
      real l_r_577 = RAdd(l_r_565,RMul(-0.1e1,l_r_558));
      real l_r_578 = RAdd(l_r_570,RMul(-0.1e1,l_r_560));
      real l_r_579 = RAdd(l_r_575,RMul(-0.1e1,l_r_561));
      real l_r_580 = RAdd(RAdd(l_r_562,RMul(0.1e1,l_r_550)),l_r_564);
      real l_r_581 = RAdd(RAdd(l_r_567,RMul(0.1e1,l_r_552)),l_r_569);
      real l_r_582 = RAdd(RAdd(l_r_572,RMul(0.1e1,l_r_553)),l_r_574);
      real l_r_583 = RAdd(l_r_565,RMul(0.1e1,l_r_558));
      real l_r_584 = RAdd(l_r_570,RMul(0.1e1,l_r_560));
      real l_r_585 = RAdd(l_r_575,RMul(0.1e1,l_r_561));
      real l_r_586 = RAdd(RAdd(RMul(-0.1e1,l_r_542),l_r_563),l_r_564);
      real l_r_587 = RAdd(RAdd(RMul(-0.1e1,l_r_544),l_r_568),l_r_569);
      real l_r_588 = RAdd(RAdd(RMul(-0.1e1,l_r_545),l_r_573),l_r_574);
      real l_r_589 = RAdd(RAdd(l_r_562,RMul(-0.1e1,l_r_550)),l_r_564);
      real l_r_590 = RAdd(RAdd(l_r_567,RMul(-0.1e1,l_r_552)),l_r_569);
      real l_r_591 = RAdd(RAdd(l_r_572,RMul(-0.1e1,l_r_553)),l_r_574);
      real l_r_592 = RAdd(RAdd(RMul(0.1e1,l_r_542),l_r_563),l_r_564);
      real l_r_593 = RAdd(RAdd(RMul(0.1e1,l_r_544),l_r_568),l_r_569);
      real l_r_594 = RAdd(RAdd(RMul(0.1e1,l_r_545),l_r_573),l_r_574);
      real l_r_595 = RAdd(RAdd(RMul(l_r_542,l_r_571),RMul(l_r_550,l_r_584)),RMul(l_r_558,l_r_590));
      real l_r_596 = RAdd(RAdd(RMul(l_r_542,l_r_576),RMul(l_r_550,l_r_585)),RMul(l_r_558,l_r_591));
      real l_r_597 = RAdd(RAdd(RMul(l_r_542,l_r_578),RMul(l_r_550,l_r_571)),RMul(l_r_558,l_r_593));
      real l_r_598 = RAdd(RAdd(RMul(l_r_542,l_r_579),RMul(l_r_550,l_r_576)),RMul(l_r_558,l_r_594));
      real l_r_599 = RAdd(RAdd(RMul(l_r_542,l_r_581),RMul(l_r_550,l_r_587)),RMul(l_r_558,l_r_571));
      real l_r_600 = RAdd(RAdd(RMul(l_r_542,l_r_582),RMul(l_r_550,l_r_588)),RMul(l_r_558,l_r_576));
      real l_r_601 = RAdd(RAdd(RMul(l_r_544,l_r_566),RMul(l_r_552,l_r_583)),RMul(l_r_560,l_r_589));
      real l_r_602 = RAdd(RAdd(RMul(l_r_544,l_r_576),RMul(l_r_552,l_r_585)),RMul(l_r_560,l_r_591));
      real l_r_603 = RAdd(RAdd(RMul(l_r_544,l_r_577),RMul(l_r_552,l_r_566)),RMul(l_r_560,l_r_592));
      real l_r_604 = RAdd(RAdd(RMul(l_r_544,l_r_579),RMul(l_r_552,l_r_576)),RMul(l_r_560,l_r_594));
      real l_r_605 = RAdd(RAdd(RMul(l_r_544,l_r_580),RMul(l_r_552,l_r_586)),RMul(l_r_560,l_r_566));
      real l_r_606 = RAdd(RAdd(RMul(l_r_544,l_r_582),RMul(l_r_552,l_r_588)),RMul(l_r_560,l_r_576));
      real l_r_607 = RAdd(RAdd(RMul(l_r_545,l_r_566),RMul(l_r_553,l_r_583)),RMul(l_r_561,l_r_589));
      real l_r_608 = RAdd(RAdd(RMul(l_r_545,l_r_571),RMul(l_r_553,l_r_584)),RMul(l_r_561,l_r_590));
      real l_r_609 = RAdd(RAdd(RMul(l_r_545,l_r_577),RMul(l_r_553,l_r_566)),RMul(l_r_561,l_r_592));
      real l_r_610 = RAdd(RAdd(RMul(l_r_545,l_r_578),RMul(l_r_553,l_r_571)),RMul(l_r_561,l_r_593));
      real l_r_611 = RAdd(RAdd(RMul(l_r_545,l_r_580),RMul(l_r_553,l_r_586)),RMul(l_r_561,l_r_566));
      real l_r_612 = RAdd(RAdd(RMul(l_r_545,l_r_581),RMul(l_r_553,l_r_587)),RMul(l_r_561,l_r_571));
      vec3{4} v_613 = VEC3{4}(l_r_544,l_r_552,l_r_560);
      real l_r_614 = RMul(0.e0,RAdd(RAdd(RMul(l_r_542,l_r_566),RMul(l_r_550,l_r_583)),RMul(l_r_558,l_r_589)));
      real l_r_615 = RMul(0.e0,l_r_596);
      real l_r_616 = RMul(0.e0,l_r_601);
      real l_r_617 = RMul(0.e0,RAdd(RAdd(RMul(l_r_544,l_r_571),RMul(l_r_552,l_r_584)),RMul(l_r_560,l_r_590)));
      real l_r_618 = RMul(0.e0,l_r_607);
      real l_r_619 = RMul(0.e0,RAdd(RAdd(RMul(l_r_545,l_r_576),RMul(l_r_553,l_r_585)),RMul(l_r_561,l_r_591)));
      real l_r_620 = RAdd(l_r_614,RMul(0.e0,l_r_595));
      real l_r_621 = RMul(0.e0,RAdd(RAdd(RMul(l_r_542,l_r_577),RMul(l_r_550,l_r_566)),RMul(l_r_558,l_r_592)));
      real l_r_622 = RMul(0.e0,l_r_598);
      real l_r_623 = RMul(0.e0,l_r_603);
      real l_r_624 = RMul(0.e0,RAdd(RAdd(RMul(l_r_544,l_r_578),RMul(l_r_552,l_r_571)),RMul(l_r_560,l_r_593)));
      real l_r_625 = RMul(0.e0,l_r_609);
      real l_r_626 = RMul(0.e0,RAdd(RAdd(RMul(l_r_545,l_r_579),RMul(l_r_553,l_r_576)),RMul(l_r_561,l_r_594)));
      real l_r_627 = RAdd(l_r_621,RMul(0.e0,l_r_597));
      real l_r_628 = RMul(0.e0,RAdd(RAdd(RMul(l_r_542,l_r_580),RMul(l_r_550,l_r_586)),RMul(l_r_558,l_r_566)));
      real l_r_629 = RMul(0.e0,l_r_600);
      real l_r_630 = RMul(0.e0,l_r_605);
      real l_r_631 = RMul(0.e0,RAdd(RAdd(RMul(l_r_544,l_r_581),RMul(l_r_552,l_r_587)),RMul(l_r_560,l_r_571)));
      real l_r_632 = RMul(0.e0,l_r_611);
      real l_r_633 = RMul(0.e0,RAdd(RAdd(RMul(l_r_545,l_r_582),RMul(l_r_553,l_r_588)),RMul(l_r_561,l_r_576)));
      real l_r_634 = RAdd(l_r_628,RMul(0.e0,l_r_599));
      real l_r_635 = RMul(0.e0,l_r_602);
      real l_r_636 = RMul(0.e0,l_r_608);
      real l_r_637 = RMul(0.e0,l_r_604);
      real l_r_638 = RMul(0.e0,l_r_610);
      real l_r_639 = RMul(0.e0,l_r_606);
      real l_r_640 = RMul(0.e0,l_r_612);
      real l_op1_e3_l_19_641 = RMul(0.2e1,VDot<3,4>(VEC3{4}(l_r_542,l_r_550,l_r_558),VEC3{4}(VDot<3,4>(v_613,VEC3{4}(l_r_576,l_r_585,l_r_591)),VDot<3,4>(v_613,VEC3{4}(l_r_579,l_r_576,l_r_594)),VDot<3,4>(v_613,VEC3{4}(l_r_582,l_r_588,l_r_576)))));
      v_642 = VEC3{4}(RAdd(RAdd(RMul(l_vdot_517,RDiv(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(l_r_620,l_r_615),l_r_616),l_r_617),RMul(0.1e1,l_r_602)),l_r_618),RMul(-0.1e1,l_r_608)),l_r_619),l_op1_e3_l_19_641)),RMul(l_vdot_518,RDiv(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(l_r_620,RMul(-0.1e1,l_r_596)),l_r_616),l_r_617),l_r_635),RMul(0.1e1,l_r_607)),l_r_636),l_r_619),l_op1_e3_l_19_641))),RMul(l_vdot_519,RDiv(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(l_r_614,RMul(0.1e1,l_r_595)),l_r_615),RMul(-0.1e1,l_r_601)),l_r_617),l_r_635),l_r_618),l_r_636),l_r_619),l_op1_e3_l_19_641))),RAdd(RAdd(RMul(l_vdot_517,RDiv(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(l_r_627,l_r_622),l_r_623),l_r_624),RMul(0.1e1,l_r_604)),l_r_625),RMul(-0.1e1,l_r_610)),l_r_626),l_op1_e3_l_19_641)),RMul(l_vdot_518,RDiv(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(l_r_627,RMul(-0.1e1,l_r_598)),l_r_623),l_r_624),l_r_637),RMul(0.1e1,l_r_609)),l_r_638),l_r_626),l_op1_e3_l_19_641))),RMul(l_vdot_519,RDiv(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(l_r_621,RMul(0.1e1,l_r_597)),l_r_622),RMul(-0.1e1,l_r_603)),l_r_624),l_r_637),l_r_625),l_r_638),l_r_626),l_op1_e3_l_19_641))),RAdd(RAdd(RMul(l_vdot_517,RDiv(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(l_r_634,l_r_629),l_r_630),l_r_631),RMul(0.1e1,l_r_606)),l_r_632),RMul(-0.1e1,l_r_612)),l_r_633),l_op1_e3_l_19_641)),RMul(l_vdot_518,RDiv(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(l_r_634,RMul(-0.1e1,l_r_600)),l_r_630),l_r_631),l_r_639),RMul(0.1e1,l_r_611)),l_r_640),l_r_633),l_op1_e3_l_19_641))),RMul(l_vdot_519,RDiv(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(l_r_628,RMul(0.1e1,l_r_599)),l_r_629),RMul(-0.1e1,l_r_605)),l_r_631),l_r_639),l_r_632),l_r_640),l_r_633),l_op1_e3_l_19_641))));
      l_compositionl_643 = RAdd(VDot<4,4>(v_232,VEC4(RAdd(l_mult_310,RAdd(RMul(-0.32e2,l_prod_283),l_mult_298)),RAdd(RMul(0.4e1,l_prod_287),RAdd(l_mult_311,RAdd(l_mult_312,l_mult_297))),RAdd(l_mult_310,RAdd(RMul(-0.32e2,l_prod_286),l_mult_296)),RAdd(l_mult_313,RAdd(RMul(-0.32e2,l_prod_261),l_mult_307)))),RAdd(VDot<4,4>(v_233,VEC4(RAdd(RMul(0.4e1,l_prod_277),RAdd(l_mult_314,l_sum_315)),RAdd(l_mult_313,RAdd(RMul(-0.32e2,l_prod_276),l_mult_300)),RAdd(l_mult_316,RAdd(RMul(-0.32e2,l_prod_257),l_mult_308)),RAdd(RMul(0.4e1,l_prod_272),RAdd(l_mult_317,l_sum_318)))),RAdd(VDot<4,4>(v_234,VEC4(RAdd(l_mult_316,RAdd(RMul(-0.32e2,l_prod_268),l_mult_303)),RAdd(RMul(0.16e2,l_prod_292),RAdd(RMul(-0.693333333333e2,l_prod_291),RAdd(RMul(0.96e2,l_prod_290),RAdd(l_mult_319,RAdd(l_mult_320,RAdd(RMul(0.192e3,l_prod_286),RAdd(l_mult_321,RAdd(RMul(0.96e2,l_prod_283),RAdd(l_mult_322,RAdd(l_mult_323,RAdd(l_mult_324,RAdd(RMul(0.192e3,l_prod_276),RAdd(l_mult_325,RAdd(l_mult_326,RAdd(l_mult_327,RAdd(l_mult_328,RAdd(RMul(0.96e2,l_prod_261),RAdd(l_mult_329,RAdd(l_mult_330,l_mult_331))))))))))))))))))),RAdd(RMul(-0.12e2,l_prod_292),RAdd(RMul(0.76e2,l_prod_291),RAdd(l_mult_332,RAdd(RMul(0.64e2,l_prod_289),RAdd(l_mult_333,RAdd(RMul(-0.144e3,l_prod_286),RAdd(l_mult_334,RAdd(l_mult_312,RAdd(l_mult_297,RAdd(l_mult_335,RAdd(RMul(-0.144e3,l_prod_276),RAdd(l_mult_336,RAdd(l_mult_337,RAdd(l_mult_301,l_sum_315)))))))))))))),RAdd(l_mult_338,RAdd(RMul(-0.373333333333e2,l_prod_291),RAdd(RMul(0.746666666667e2,l_prod_290),RAdd(l_mult_319,RAdd(l_mult_339,RAdd(l_mult_340,RAdd(l_mult_341,RAdd(l_mult_342,RAdd(l_mult_343,l_mult_344))))))))))),RAdd(VDot<4,4>(v_235,VEC4(RAdd(RMul(0.16e2,l_prod_288),RAdd(l_mult_320,RAdd(RMul(0.96e2,l_prod_286),RAdd(l_mult_341,RAdd(RMul(-0.693333333333e2,l_prod_284),RAdd(RMul(0.192e3,l_prod_283),RAdd(l_mult_322,RAdd(RMul(0.96e2,l_prod_281),RAdd(l_mult_345,RAdd(l_mult_346,RAdd(l_mult_347,RAdd(l_mult_326,RAdd(l_mult_348,RAdd(RMul(0.192e3,l_prod_268),RAdd(l_mult_349,RAdd(l_mult_350,RAdd(RMul(0.96e2,l_prod_257),RAdd(l_mult_330,RAdd(l_mult_351,l_mult_352))))))))))))))))))),RAdd(RMul(-0.12e2,l_prod_288),RAdd(l_mult_333,RAdd(l_mult_311,RAdd(RMul(0.76e2,l_prod_284),RAdd(RMul(-0.144e3,l_prod_283),RAdd(l_mult_297,RAdd(l_mult_353,RAdd(l_mult_354,RAdd(RMul(0.64e2,l_prod_279),RAdd(l_mult_355,RAdd(l_mult_337,RAdd(RMul(-0.144e3,l_prod_268),RAdd(l_mult_302,RAdd(l_mult_356,l_sum_318)))))))))))))),RAdd(l_mult_357,RAdd(l_mult_339,RAdd(RMul(-0.373333333333e2,l_prod_284),RAdd(l_mult_358,RAdd(RMul(0.746666666667e2,l_prod_281),RAdd(l_mult_323,RAdd(l_mult_346,RAdd(l_mult_359,RAdd(l_mult_360,l_mult_361))))))))),RAdd(RMul(0.16e2,l_prod_278),RAdd(l_mult_324,RAdd(RMul(0.96e2,l_prod_276),RAdd(l_mult_344,RAdd(l_mult_347,RAdd(l_mult_326,RAdd(l_mult_348,RAdd(RMul(0.96e2,l_prod_268),RAdd(l_mult_328,RAdd(l_mult_361,RAdd(RMul(-0.693333333333e2,l_prod_262),RAdd(RMul(0.192e3,l_prod_261),RAdd(l_mult_329,RAdd(RMul(0.192e3,l_prod_257),RAdd(l_mult_362,RAdd(l_mult_351,RAdd(RMul(0.96e2,l_prod_251),RAdd(l_mult_363,RAdd(l_mult_364,l_mult_365))))))))))))))))))))),RAdd(VDot<4,4>(v_236,VEC4(RAdd(RMul(-0.12e2,l_prod_278),RAdd(l_mult_335,RAdd(l_mult_314,RAdd(l_mult_355,RAdd(l_mult_337,RAdd(l_mult_317,RAdd(RMul(0.76e2,l_prod_262),RAdd(RMul(-0.144e3,l_prod_261),RAdd(l_mult_304,RAdd(RMul(-0.144e3,l_prod_257),RAdd(l_mult_305,RAdd(l_mult_306,RAdd(l_mult_366,RAdd(l_mult_367,RAdd(l_mult_368,RMul(0.64e2,l_prod_246)))))))))))))))),RAdd(l_mult_369,RAdd(l_mult_342,RAdd(l_mult_359,RAdd(RMul(-0.373333333333e2,l_prod_262),RAdd(l_mult_370,RAdd(l_mult_371,RAdd(RMul(0.746666666667e2,l_prod_251),RAdd(l_mult_331,RAdd(l_mult_352,l_mult_365))))))))),RAdd(l_mult_337,l_mult_305),RAdd(l_mult_337,l_mult_302))),RAdd(VDot<4,4>(v_237,VEC4(RAdd(l_mult_337,l_mult_301),RAdd(RMul(0.96e2,l_prod_287),RAdd(RMul(-0.224e3,l_prod_286),RAdd(l_mult_334,RAdd(RMul(-0.224e3,l_prod_283),RAdd(RMul(0.256e3,l_prod_282),RAdd(l_mult_354,RAdd(l_mult_372,RAdd(l_mult_373,RAdd(l_mult_374,l_mult_305))))))))),RAdd(l_mult_375,RAdd(l_mult_340,RAdd(RMul(0.160e3,l_prod_283),RAdd(l_mult_322,RAdd(l_mult_345,RAdd(l_mult_376,l_mult_328)))))),RAdd(l_mult_375,RAdd(RMul(0.160e3,l_prod_286),RAdd(l_mult_321,RAdd(l_mult_358,RAdd(l_mult_322,RAdd(l_mult_376,l_mult_348)))))))),RAdd(VDot<4,4>(v_238,VEC4(RAdd(RMul(0.96e2,l_prod_277),RAdd(RMul(-0.224e3,l_prod_276),RAdd(l_mult_336,RAdd(l_mult_372,RAdd(l_mult_373,RAdd(l_mult_302,RAdd(RMul(-0.224e3,l_prod_261),RAdd(RMul(0.256e3,l_prod_260),RAdd(l_mult_377,l_mult_367))))))))),RAdd(l_mult_378,RAdd(l_mult_343,RAdd(l_mult_376,RAdd(RMul(0.160e3,l_prod_261),RAdd(l_mult_329,RAdd(l_mult_330,l_mult_363)))))),RAdd(l_mult_378,RAdd(RMul(0.160e3,l_prod_276),RAdd(l_mult_325,RAdd(l_mult_376,RAdd(l_mult_348,RAdd(l_mult_370,l_mult_329)))))),RAdd(RMul(0.96e2,l_prod_272),RAdd(l_mult_372,RAdd(l_mult_301,RAdd(RMul(-0.224e3,l_prod_268),RAdd(l_mult_374,RAdd(l_mult_356,RAdd(RMul(-0.224e3,l_prod_257),RAdd(l_mult_377,RAdd(RMul(0.256e3,l_prod_254),l_mult_368))))))))))),RAdd(VDot<3,4>(v_239,VEC3{4}(RAdd(l_mult_379,RAdd(l_mult_376,RAdd(l_mult_360,RAdd(RMul(0.160e3,l_prod_257),RAdd(l_mult_330,RAdd(l_mult_351,l_mult_364)))))),RAdd(l_mult_379,RAdd(l_mult_376,RAdd(RMul(0.160e3,l_prod_268),RAdd(l_mult_328,RAdd(l_mult_350,RAdd(l_mult_371,l_mult_351)))))),RAdd(l_mult_380,RAdd(l_mult_327,RAdd(l_mult_349,l_mult_362))))),VDot<4,4>(v_231,VEC4(RAdd(l_mult_294,RAdd(RMul(-0.833333333333e1,l_prod_292),RAdd(RMul(0.233333333333e2,l_prod_291),RAdd(RMul(-0.266666666667e2,l_prod_290),RAdd(l_mult_295,RAdd(RMul(-0.833333333333e1,l_prod_288),RAdd(RMul(0.466666666667e2,l_prod_287),RAdd(RMul(-0.80e2,l_prod_286),RAdd(l_mult_296,RAdd(RMul(0.233333333333e2,l_prod_284),RAdd(RMul(-0.80e2,l_prod_283),RAdd(l_mult_297,RAdd(RMul(-0.266666666667e2,l_prod_281),RAdd(l_mult_298,RAdd(l_mult_299,RAdd(RMul(-0.833333333333e1,l_prod_278),RAdd(RMul(0.466666666667e2,l_prod_277),RAdd(RMul(-0.80e2,l_prod_276),RAdd(l_mult_300,RAdd(RMul(0.466666666667e2,l_prod_272),RAdd(RMul(-0.160e3,l_prod_271),RAdd(l_mult_301,RAdd(RMul(-0.80e2,l_prod_268),RAdd(l_mult_302,RAdd(l_mult_303,RAdd(RMul(0.233333333333e2,l_prod_262),RAdd(RMul(-0.80e2,l_prod_261),RAdd(l_mult_304,RAdd(RMul(-0.80e2,l_prod_257),RAdd(l_mult_305,RAdd(l_mult_306,RAdd(RMul(-0.266666666667e2,l_prod_251),RAdd(l_mult_307,RAdd(l_mult_308,l_mult_309)))))))))))))))))))))))))))))))))),RAdd(RMul(-0.1e1,l_prod_278),RAdd(RMul(0.733333333333e1,l_prod_262),RAdd(RMul(-0.16e2,l_prod_251),l_mult_309))),RAdd(RMul(-0.1e1,l_prod_288),RAdd(RMul(0.733333333333e1,l_prod_284),RAdd(RMul(-0.16e2,l_prod_281),l_mult_299))),RAdd(RMul(-0.1e1,l_prod_292),RAdd(RMul(0.733333333333e1,l_prod_291),RAdd(RMul(-0.16e2,l_prod_290),l_mult_295)))))))))))));
      l_c_644 = LoadFem<femData(MeshCell)>(ExtractFem<femData(Mesh),femData(MeshPos)>(l_p_155),ExtractFemItem<int,CellIndex(MeshPos)>(l_p_155));
      v_645 = LOAD_0(TensorRef<[3]>(ExtractFemItem<tensor[3],RefPos(MeshPos)>(l_p_155)));
    } else {
      print("Warning: Invalid!\n");
      v_642 = LOAD_0(TensorRef<[3]>(self.gradResult));
      l_compositionl_643 = self.result;
      l_c_644 = self.c;
      v_645 = LOAD_0(TensorRef<[3]>(self.translated));
    }
    self.translated = PACK(v_645);
    self.valid = l_valid_156;
    self.c = l_c_644;
    self.result = l_compositionl_643;
    self.gradResult = PACK(v_642);
    stabilize;
  }
}
//***** CREATE COLLECTION *****
  {
    foreach &tensor[3] i_i_648 in globals.points {
      new gg(i_i_648);
    }
  }
#### end program ####
##### TreeIR: after contraction ####
//***** PROPERTIES *****
  GlobalInit HasInputs HasGlobals ExtraFlags(-#[<spatialindex/capi/sidx_api.h>,<spatialindex/capi/sidx_impl.h>],-I[],-l[lspatialindex_c,lspatialindex],-L[])
//***** CONSTS *****
//***** INPUTS *****
input tensor[3][] points;
input femData(Mesh) cube;
input femData(Space) 0space0342_intermedateGlobal;
input femData(FemFunc) 0data0344_intermedateGlobal;
//***** CONST INIT *****
  {
  }
//***** GLOBALS *****
global femData(MeshCell)[] 0cell_cube;
global femData(Mesh) _t;
global femData(Space) _tX;
global femData(FemFunc) data;
//***** FUNCTIONS *****
  function femData(MeshPos) findPos (world, femData(Mesh) p_mesh_0,&tensor[3] p_pos_1) {
    vec3{4} v_2;
    v_2 = VEC3{4}(0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0,0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0,0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e0);
    int[] t_4 = ExtractFemItem2<tensor[3],int[],NearbyCell(File=spat.in)(Mesh)>(p_mesh_0,p_pos_1);
    foreach int i_cellItter_3 in t_4 {
      vec3{4} v_5;
      v_5 = v_2;
      for i_newtonItter_6 = 0 to 16 {
        int l_mulRes_7 = IMul(i_cellItter_3,4);
        int t_8 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(p_mesh_0,l_mulRes_7);
        int l_mulRes_9 = IMul(3,t_8);
        real l_dof_load_10 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(p_mesh_0,l_mulRes_9);
        real l_dof_load_11 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(p_mesh_0,IAdd(1,l_mulRes_9));
        real l_dof_load_12 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(p_mesh_0,IAdd(2,l_mulRes_9));
        int t_13 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(p_mesh_0,IAdd(l_mulRes_7,1));
        int l_mulRes_14 = IMul(3,t_13);
        real l_dof_load_15 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(p_mesh_0,l_mulRes_14);
        real l_dof_load_16 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(p_mesh_0,IAdd(1,l_mulRes_14));
        real l_dof_load_17 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(p_mesh_0,IAdd(2,l_mulRes_14));
        int t_18 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(p_mesh_0,IAdd(l_mulRes_7,2));
        int l_mulRes_19 = IMul(3,t_18);
        real l_dof_load_20 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(p_mesh_0,l_mulRes_19);
        real l_dof_load_21 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(p_mesh_0,IAdd(1,l_mulRes_19));
        real l_dof_load_22 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(p_mesh_0,IAdd(2,l_mulRes_19));
        int t_23 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(p_mesh_0,IAdd(l_mulRes_7,3));
        int l_mulRes_24 = IMul(3,t_23);
        real l_dof_load_25 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(p_mesh_0,l_mulRes_24);
        real l_dof_load_26 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(p_mesh_0,IAdd(1,l_mulRes_24));
        real l_dof_load_27 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(p_mesh_0,IAdd(2,l_mulRes_24));
        real l_prod_28 = RMul(0.1e1,0.1e1);
        real l_prod_29 = RMul(0.1e1,l_prod_28);
        real l_basisEval_30 = RMul(-0.1e1,l_prod_29);
        real l_basisEval_31 = RMul(0.1e1,l_prod_29);
        real l_r_32 = RMul(l_dof_load_10,l_basisEval_30);
        real l_r_33 = RMul(l_dof_load_20,0.e0);
        real l_r_34 = RMul(l_dof_load_25,0.e0);
        real l_r_35 = RAdd(RAdd(RAdd(l_r_32,RMul(l_dof_load_15,l_basisEval_31)),l_r_33),l_r_34);
        real l_r_36 = RAdd(l_r_32,RMul(l_dof_load_15,0.e0));
        real l_r_37 = RAdd(RAdd(l_r_36,RMul(l_dof_load_20,l_basisEval_31)),l_r_34);
        real l_r_38 = RAdd(RAdd(l_r_36,l_r_33),RMul(l_dof_load_25,l_basisEval_31));
        real l_r_39 = RMul(l_dof_load_11,l_basisEval_30);
        real l_r_40 = RMul(l_dof_load_21,0.e0);
        real l_r_41 = RMul(l_dof_load_26,0.e0);
        real l_r_42 = RAdd(RAdd(RAdd(l_r_39,RMul(l_dof_load_16,l_basisEval_31)),l_r_40),l_r_41);
        real l_r_43 = RAdd(l_r_39,RMul(l_dof_load_16,0.e0));
        real l_r_44 = RAdd(RAdd(l_r_43,RMul(l_dof_load_21,l_basisEval_31)),l_r_41);
        real l_r_45 = RAdd(RAdd(l_r_43,l_r_40),RMul(l_dof_load_26,l_basisEval_31));
        real l_r_46 = RMul(l_dof_load_12,l_basisEval_30);
        real l_r_47 = RMul(l_dof_load_22,0.e0);
        real l_r_48 = RMul(l_dof_load_27,0.e0);
        real l_r_49 = RAdd(RAdd(RAdd(l_r_46,RMul(l_dof_load_17,l_basisEval_31)),l_r_47),l_r_48);
        real l_r_50 = RAdd(l_r_46,RMul(l_dof_load_17,0.e0));
        real l_r_51 = RAdd(RAdd(l_r_50,RMul(l_dof_load_22,l_basisEval_31)),l_r_48);
        real l_r_52 = RAdd(RAdd(l_r_50,l_r_47),RMul(l_dof_load_27,l_basisEval_31));
        real l_r_53 = RMul(0.e0,l_r_35);
        real l_r_54 = RMul(0.e0,l_r_42);
        real l_r_55 = RMul(0.e0,l_r_49);
        real l_r_56 = RAdd(l_r_53,l_r_54);
        real l_r_57 = RAdd(l_r_56,l_r_55);
        real l_r_58 = RMul(0.e0,l_r_37);
        real l_r_59 = RMul(0.e0,l_r_44);
        real l_r_60 = RMul(0.e0,l_r_51);
        real l_r_61 = RAdd(l_r_58,l_r_59);
        real l_r_62 = RAdd(l_r_61,l_r_60);
        real l_r_63 = RMul(0.e0,l_r_38);
        real l_r_64 = RMul(0.e0,l_r_45);
        real l_r_65 = RMul(0.e0,l_r_52);
        real l_r_66 = RAdd(l_r_63,l_r_64);
        real l_r_67 = RAdd(l_r_66,l_r_65);
        real l_r_68 = RAdd(l_r_56,RMul(-0.1e1,l_r_49));
        real l_r_69 = RAdd(l_r_61,RMul(-0.1e1,l_r_51));
        real l_r_70 = RAdd(l_r_66,RMul(-0.1e1,l_r_52));
        real l_r_71 = RAdd(RAdd(l_r_53,RMul(0.1e1,l_r_42)),l_r_55);
        real l_r_72 = RAdd(RAdd(l_r_58,RMul(0.1e1,l_r_44)),l_r_60);
        real l_r_73 = RAdd(RAdd(l_r_63,RMul(0.1e1,l_r_45)),l_r_65);
        real l_r_74 = RAdd(l_r_56,RMul(0.1e1,l_r_49));
        real l_r_75 = RAdd(l_r_61,RMul(0.1e1,l_r_51));
        real l_r_76 = RAdd(l_r_66,RMul(0.1e1,l_r_52));
        real l_r_77 = RAdd(RAdd(RMul(-0.1e1,l_r_35),l_r_54),l_r_55);
        real l_r_78 = RAdd(RAdd(RMul(-0.1e1,l_r_37),l_r_59),l_r_60);
        real l_r_79 = RAdd(RAdd(RMul(-0.1e1,l_r_38),l_r_64),l_r_65);
        real l_r_80 = RAdd(RAdd(l_r_53,RMul(-0.1e1,l_r_42)),l_r_55);
        real l_r_81 = RAdd(RAdd(l_r_58,RMul(-0.1e1,l_r_44)),l_r_60);
        real l_r_82 = RAdd(RAdd(l_r_63,RMul(-0.1e1,l_r_45)),l_r_65);
        real l_r_83 = RAdd(RAdd(RMul(0.1e1,l_r_35),l_r_54),l_r_55);
        real l_r_84 = RAdd(RAdd(RMul(0.1e1,l_r_37),l_r_59),l_r_60);
        real l_r_85 = RAdd(RAdd(RMul(0.1e1,l_r_38),l_r_64),l_r_65);
        real l_r_86 = RAdd(RAdd(RMul(l_r_35,l_r_62),RMul(l_r_42,l_r_75)),RMul(l_r_49,l_r_81));
        real l_r_87 = RAdd(RAdd(RMul(l_r_35,l_r_67),RMul(l_r_42,l_r_76)),RMul(l_r_49,l_r_82));
        real l_r_88 = RAdd(RAdd(RMul(l_r_35,l_r_69),RMul(l_r_42,l_r_62)),RMul(l_r_49,l_r_84));
        real l_r_89 = RAdd(RAdd(RMul(l_r_35,l_r_70),RMul(l_r_42,l_r_67)),RMul(l_r_49,l_r_85));
        real l_r_90 = RAdd(RAdd(RMul(l_r_35,l_r_72),RMul(l_r_42,l_r_78)),RMul(l_r_49,l_r_62));
        real l_r_91 = RAdd(RAdd(RMul(l_r_35,l_r_73),RMul(l_r_42,l_r_79)),RMul(l_r_49,l_r_67));
        real l_r_92 = RAdd(RAdd(RMul(l_r_37,l_r_57),RMul(l_r_44,l_r_74)),RMul(l_r_51,l_r_80));
        real l_r_93 = RAdd(RAdd(RMul(l_r_37,l_r_67),RMul(l_r_44,l_r_76)),RMul(l_r_51,l_r_82));
        real l_r_94 = RAdd(RAdd(RMul(l_r_37,l_r_68),RMul(l_r_44,l_r_57)),RMul(l_r_51,l_r_83));
        real l_r_95 = RAdd(RAdd(RMul(l_r_37,l_r_70),RMul(l_r_44,l_r_67)),RMul(l_r_51,l_r_85));
        real l_r_96 = RAdd(RAdd(RMul(l_r_37,l_r_71),RMul(l_r_44,l_r_77)),RMul(l_r_51,l_r_57));
        real l_r_97 = RAdd(RAdd(RMul(l_r_37,l_r_73),RMul(l_r_44,l_r_79)),RMul(l_r_51,l_r_67));
        real l_r_98 = RAdd(RAdd(RMul(l_r_38,l_r_57),RMul(l_r_45,l_r_74)),RMul(l_r_52,l_r_80));
        real l_r_99 = RAdd(RAdd(RMul(l_r_38,l_r_62),RMul(l_r_45,l_r_75)),RMul(l_r_52,l_r_81));
        real l_r_100 = RAdd(RAdd(RMul(l_r_38,l_r_68),RMul(l_r_45,l_r_57)),RMul(l_r_52,l_r_83));
        real l_r_101 = RAdd(RAdd(RMul(l_r_38,l_r_69),RMul(l_r_45,l_r_62)),RMul(l_r_52,l_r_84));
        real l_r_102 = RAdd(RAdd(RMul(l_r_38,l_r_71),RMul(l_r_45,l_r_77)),RMul(l_r_52,l_r_57));
        real l_r_103 = RAdd(RAdd(RMul(l_r_38,l_r_72),RMul(l_r_45,l_r_78)),RMul(l_r_52,l_r_62));
        vec3{4} v_104 = VEC3{4}(l_r_37,l_r_44,l_r_51);
        real l_r_105 = RMul(0.e0,RAdd(RAdd(RMul(l_r_35,l_r_57),RMul(l_r_42,l_r_74)),RMul(l_r_49,l_r_80)));
        real l_r_106 = RMul(0.e0,l_r_87);
        real l_r_107 = RMul(0.e0,l_r_92);
        real l_r_108 = RMul(0.e0,RAdd(RAdd(RMul(l_r_37,l_r_62),RMul(l_r_44,l_r_75)),RMul(l_r_51,l_r_81)));
        real l_r_109 = RMul(0.e0,l_r_98);
        real l_r_110 = RMul(0.e0,RAdd(RAdd(RMul(l_r_38,l_r_67),RMul(l_r_45,l_r_76)),RMul(l_r_52,l_r_82)));
        real l_r_111 = RAdd(l_r_105,RMul(0.e0,l_r_86));
        real l_r_112 = RMul(0.e0,RAdd(RAdd(RMul(l_r_35,l_r_68),RMul(l_r_42,l_r_57)),RMul(l_r_49,l_r_83)));
        real l_r_113 = RMul(0.e0,l_r_89);
        real l_r_114 = RMul(0.e0,l_r_94);
        real l_r_115 = RMul(0.e0,RAdd(RAdd(RMul(l_r_37,l_r_69),RMul(l_r_44,l_r_62)),RMul(l_r_51,l_r_84)));
        real l_r_116 = RMul(0.e0,l_r_100);
        real l_r_117 = RMul(0.e0,RAdd(RAdd(RMul(l_r_38,l_r_70),RMul(l_r_45,l_r_67)),RMul(l_r_52,l_r_85)));
        real l_r_118 = RAdd(l_r_112,RMul(0.e0,l_r_88));
        real l_r_119 = RMul(0.e0,RAdd(RAdd(RMul(l_r_35,l_r_71),RMul(l_r_42,l_r_77)),RMul(l_r_49,l_r_57)));
        real l_r_120 = RMul(0.e0,l_r_91);
        real l_r_121 = RMul(0.e0,l_r_96);
        real l_r_122 = RMul(0.e0,RAdd(RAdd(RMul(l_r_37,l_r_72),RMul(l_r_44,l_r_78)),RMul(l_r_51,l_r_62)));
        real l_r_123 = RMul(0.e0,l_r_102);
        real l_r_124 = RMul(0.e0,RAdd(RAdd(RMul(l_r_38,l_r_73),RMul(l_r_45,l_r_79)),RMul(l_r_52,l_r_67)));
        real l_r_125 = RAdd(l_r_119,RMul(0.e0,l_r_90));
        real l_r_126 = RMul(0.e0,l_r_93);
        real l_r_127 = RMul(0.e0,l_r_99);
        real l_r_128 = RMul(0.e0,l_r_95);
        real l_r_129 = RMul(0.e0,l_r_101);
        real l_r_130 = RMul(0.e0,l_r_97);
        real l_r_131 = RMul(0.e0,l_r_103);
        real l_op1_e3_l_21_132 = RMul(0.2e1,VDot<3,4>(VEC3{4}(l_r_35,l_r_42,l_r_49),VEC3{4}(VDot<3,4>(v_104,VEC3{4}(l_r_67,l_r_76,l_r_82)),VDot<3,4>(v_104,VEC3{4}(l_r_70,l_r_67,l_r_85)),VDot<3,4>(v_104,VEC3{4}(l_r_73,l_r_79,l_r_67)))));
        real l_prod_133 = RMul(VIndex<3,4,0>(v_5),l_prod_28);
        real l_prod_134 = RMul(0.1e1,RMul(VIndex<3,4,1>(v_5),0.1e1));
        real l_prod_135 = RMul(0.1e1,RMul(0.1e1,VIndex<3,4,2>(v_5)));
        real l_sum_136 = RAdd(l_basisEval_31,RAdd(RMul(-0.1e1,l_prod_135),RAdd(RMul(-0.1e1,l_prod_134),RMul(-0.1e1,l_prod_133))));
        real l_basisEval_137 = RMul(0.1e1,l_prod_133);
        real l_basisEval_138 = RMul(0.1e1,l_prod_134);
        real l_basisEval_139 = RMul(0.1e1,l_prod_135);
        vec3{4} v_140 = VSub<3,4>(VEC3{4}(RAdd(RAdd(RAdd(RMul(l_dof_load_10,l_sum_136),RMul(l_dof_load_15,l_basisEval_137)),RMul(l_dof_load_20,l_basisEval_138)),RMul(l_dof_load_25,l_basisEval_139)),RAdd(RAdd(RAdd(RMul(l_dof_load_11,l_sum_136),RMul(l_dof_load_16,l_basisEval_137)),RMul(l_dof_load_21,l_basisEval_138)),RMul(l_dof_load_26,l_basisEval_139)),RAdd(RAdd(RAdd(RMul(l_dof_load_12,l_sum_136),RMul(l_dof_load_17,l_basisEval_137)),RMul(l_dof_load_22,l_basisEval_138)),RMul(l_dof_load_27,l_basisEval_139))),LOAD_0(p_pos_1));
        vec3{4} v_141 = VEC3{4}(VDot<3,4>(VEC3{4}(RDiv(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(l_r_111,l_r_106),l_r_107),l_r_108),RMul(0.1e1,l_r_93)),l_r_109),RMul(-0.1e1,l_r_99)),l_r_110),l_op1_e3_l_21_132),RDiv(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(l_r_118,l_r_113),l_r_114),l_r_115),RMul(0.1e1,l_r_95)),l_r_116),RMul(-0.1e1,l_r_101)),l_r_117),l_op1_e3_l_21_132),RDiv(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(l_r_125,l_r_120),l_r_121),l_r_122),RMul(0.1e1,l_r_97)),l_r_123),RMul(-0.1e1,l_r_103)),l_r_124),l_op1_e3_l_21_132)),v_140),VDot<3,4>(VEC3{4}(RDiv(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(l_r_111,RMul(-0.1e1,l_r_87)),l_r_107),l_r_108),l_r_126),RMul(0.1e1,l_r_98)),l_r_127),l_r_110),l_op1_e3_l_21_132),RDiv(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(l_r_118,RMul(-0.1e1,l_r_89)),l_r_114),l_r_115),l_r_128),RMul(0.1e1,l_r_100)),l_r_129),l_r_117),l_op1_e3_l_21_132),RDiv(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(l_r_125,RMul(-0.1e1,l_r_91)),l_r_121),l_r_122),l_r_130),RMul(0.1e1,l_r_102)),l_r_131),l_r_124),l_op1_e3_l_21_132)),v_140),VDot<3,4>(VEC3{4}(RDiv(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(l_r_105,RMul(0.1e1,l_r_86)),l_r_106),RMul(-0.1e1,l_r_92)),l_r_108),l_r_126),l_r_109),l_r_127),l_r_110),l_op1_e3_l_21_132),RDiv(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(l_r_112,RMul(0.1e1,l_r_88)),l_r_113),RMul(-0.1e1,l_r_94)),l_r_115),l_r_128),l_r_116),l_r_129),l_r_117),l_op1_e3_l_21_132),RDiv(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(l_r_119,RMul(0.1e1,l_r_90)),l_r_120),RMul(-0.1e1,l_r_96)),l_r_122),l_r_130),l_r_123),l_r_131),l_r_124),l_op1_e3_l_21_132)),v_140));
        vec3{4} v_142 = VSub<3,4>(v_5,v_141);
        vec3{4} v_143 = v_142;
        if (GTE<real>(RMul(0.1e-7,0.1e-7),VDot<3,4>(v_141,v_141))) {
          vec3{4} v_144 = VAdd<3,4>(VEC3{4}(0.1e-8,0.1e-8,0.1e-8),v_143);
          if (BAnd(GT<real>(RAdd(0.1e1,0.1e-8),VDot<3,4>(VEC3{4}(0.1e1,0.1e1,0.1e1),v_143)),BAnd(GT<real>(VIndex<3,4,0>(v_144),-0.e0),BAnd(GT<real>(VIndex<3,4,1>(v_144),-0.e0),GT<real>(VIndex<3,4,2>(v_144),-0.e0))))) {
            tensor[3] _arg_145 = PACK(v_143);
            return ExtractFemItemN<[femData(Mesh),int,tensor[3],tensor[3]],femData(MeshPos),AllBuild(MeshPos),"","",[],int>(p_mesh_0,i_cellItter_3,_arg_145,p_pos_1)
          }
        }
        v_5 = v_143;
      }
      v_2 = v_5;
    }
    print("Bad end 2","\n");
    return ExtractFemItemN<[femData(Mesh)],femData(MeshPos),InvalidBuild(MeshPos),"","",[],int>(p_mesh_0)
  }
//***** GLOBAL VARIABLE INIT *****
  {
    femData(MeshCell)[] l__t_146;
    l__t_146 = <femData(MeshCell)[]>{};
    for i__t_147 = 0 to ISub(ExtractFemItem<int,NumCell(Mesh)>(globals.cube),1) {
      l__t_146 = Append<femData(MeshCell),femData(MeshCell)>(l__t_146,LoadFem<femData(MeshCell)>(globals.cube,i__t_147));
    }
    globals.0cell_cube = l__t_146;
    femData(FemFunc) l_data_148 = LoadFem<femData(FemFunc)>(globals.0data0344_intermedateGlobal,LoadFem<femData(Space)>(globals.0space0342_intermedateGlobal,globals.cube));
    femData(Space) l__t_149 = ExtractFem<femData(Space),femData(FemFunc)>(l_data_148);
    globals._t = ExtractFem<femData(Mesh),femData(Space)>(l__t_149);
    globals._tX = l__t_149;
    globals.data = l_data_148;
  }
//***** STRAND *****
strand gg (&tensor[3] p_i_150) {
  output tensor[3] target;
  varying output tensor[3] translated;
  varying output bool valid;
  varying output femData(MeshCell) c;
  varying output real result;
  varying output tensor[3] gradResult;
  output tensor[3] gradResultp;
  initialize (globals) {
    vec3{4} v_151 = VEC3{4}(nan,nan,nan);
    self.target = TensorCopy<[3]>(p_i_150);
    self.translated = PACK(v_151);
    self.valid = false;
    self.c = Subscript<femData(MeshCell)[]>(globals.0cell_cube,0);
    self.result = nan;
    self.gradResult = PACK(v_151);
    self.gradResultp = PACK(v_151);
  }
  update (world, globals) {
    vec3{4} v_645;
    femData(MeshCell) l_c_644;
    real l_compositionl_643;
    vec3{4} v_642;
    print("Running on ",TensorRef<[3]>(self.target),"\n");
    femData(MeshPos) l_p_155 = findPos$3284(globals.cube,TensorRef<[3]>(self.target));
    bool l_valid_156 = ExtractFemItem<bool,Valid(MeshPos)>(l_p_155);
    if (l_valid_156) {
      femData(MeshPos) l_callFindPos_157 = findPos$3284(globals._t,TensorRef<[3]>(self.target));
      int l_intPos_158 = ExtractFemItem<int,CellIndex(Mesh)>(l_callFindPos_157);
      &tensor[3] l_refPos_159 = ExtractFemItem<tensor[3],RefPos(Mesh)>(l_callFindPos_157);
      int l_mulRes_160 = IMul(l_intPos_158,35);
      int t_161 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,l_mulRes_160);
      int t_162 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,IAdd(l_mulRes_160,1));
      int t_163 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,IAdd(l_mulRes_160,2));
      int t_164 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,IAdd(l_mulRes_160,3));
      int t_165 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,IAdd(l_mulRes_160,4));
      int t_166 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,IAdd(l_mulRes_160,5));
      int t_167 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,IAdd(l_mulRes_160,6));
      int t_168 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,IAdd(l_mulRes_160,7));
      int t_169 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,IAdd(l_mulRes_160,8));
      int t_170 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,IAdd(l_mulRes_160,9));
      int t_171 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,IAdd(l_mulRes_160,10));
      int t_172 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,IAdd(l_mulRes_160,11));
      int t_173 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,IAdd(l_mulRes_160,12));
      int t_174 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,IAdd(l_mulRes_160,13));
      int t_175 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,IAdd(l_mulRes_160,14));
      int t_176 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,IAdd(l_mulRes_160,15));
      int t_177 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,IAdd(l_mulRes_160,16));
      int t_178 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,IAdd(l_mulRes_160,17));
      int t_179 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,IAdd(l_mulRes_160,18));
      int t_180 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,IAdd(l_mulRes_160,19));
      int t_181 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,IAdd(l_mulRes_160,20));
      int t_182 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,IAdd(l_mulRes_160,21));
      int t_183 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,IAdd(l_mulRes_160,22));
      int t_184 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,IAdd(l_mulRes_160,23));
      int t_185 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,IAdd(l_mulRes_160,24));
      int t_186 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,IAdd(l_mulRes_160,25));
      int t_187 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,IAdd(l_mulRes_160,26));
      int t_188 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,IAdd(l_mulRes_160,27));
      int t_189 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,IAdd(l_mulRes_160,28));
      int t_190 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,IAdd(l_mulRes_160,29));
      int t_191 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,IAdd(l_mulRes_160,30));
      int t_192 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,IAdd(l_mulRes_160,31));
      int t_193 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,IAdd(l_mulRes_160,32));
      int t_194 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,IAdd(l_mulRes_160,33));
      int t_195 = ExtractFemItem2<int,int,ExtractIndex(Space)>(globals._tX,IAdd(l_mulRes_160,34));
      real t_196 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_195));
      real t_197 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_194));
      real t_198 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_193));
      real t_199 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_192));
      real t_200 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_191));
      real t_201 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_190));
      real t_202 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_189));
      real t_203 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_188));
      real t_204 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_187));
      real t_205 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_186));
      real t_206 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_185));
      real t_207 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_184));
      real t_208 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_183));
      real t_209 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_182));
      real t_210 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_181));
      real t_211 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_180));
      real t_212 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_179));
      real t_213 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_178));
      real t_214 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_177));
      real t_215 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_176));
      real t_216 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_175));
      real t_217 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_174));
      real t_218 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_173));
      real t_219 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_172));
      real t_220 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_171));
      real t_221 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_170));
      real t_222 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_169));
      real t_223 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_168));
      real t_224 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_167));
      real t_225 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_166));
      real t_226 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_165));
      real t_227 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_164));
      real t_228 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_163));
      real t_229 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_162));
      real t_230 = ExtractFemItem2<int,real,ExtractDof(FemFunc)>(globals.data,IMul(1,t_161));
      vec4 v_231 = VEC4(t_230,t_229,t_228,t_227);
      vec4 v_232 = VEC4(t_226,t_225,t_224,t_223);
      vec4 v_233 = VEC4(t_222,t_221,t_220,t_219);
      vec4 v_234 = VEC4(t_218,t_217,t_216,t_215);
      vec4 v_235 = VEC4(t_214,t_213,t_212,t_211);
      vec4 v_236 = VEC4(t_210,t_209,t_208,t_207);
      vec4 v_237 = VEC4(t_206,t_205,t_204,t_203);
      vec4 v_238 = VEC4(t_202,t_201,t_200,t_199);
      vec3{4} v_239 = VEC3{4}(t_198,t_197,t_196);
      real l_varAcc_240 = TensorIndex<&tensor[3],[0]>(l_refPos_159);
      real l_varAcc_241 = TensorIndex<&tensor[3],[1]>(l_refPos_159);
      real l_varAcc_242 = TensorIndex<&tensor[3],[2]>(l_refPos_159);
      real l_prod2_243 = RMul(l_varAcc_240,l_varAcc_240);
      real l_prod3_244 = RMul(l_prod2_243,l_varAcc_240);
      real l_prod_245 = RMul(0.1e1,0.1e1);
      real l_prod_246 = RMul(RMul(l_prod3_244,l_varAcc_240),l_prod_245);
      real l_prod_247 = RMul(l_varAcc_241,0.1e1);
      real l_prod_248 = RMul(l_prod3_244,l_prod_247);
      real l_prod_249 = RMul(0.1e1,l_varAcc_242);
      real l_prod_250 = RMul(l_prod3_244,l_prod_249);
      real l_prod_251 = RMul(l_prod3_244,l_prod_245);
      real l_prod2_252 = RMul(l_varAcc_241,l_varAcc_241);
      real l_prod_253 = RMul(l_prod2_252,0.1e1);
      real l_prod_254 = RMul(l_prod2_243,l_prod_253);
      real l_prod_255 = RMul(l_varAcc_241,l_varAcc_242);
      real l_prod_256 = RMul(l_prod2_243,l_prod_255);
      real l_prod_257 = RMul(l_prod2_243,l_prod_247);
      real l_prod2_258 = RMul(l_varAcc_242,l_varAcc_242);
      real l_prod_259 = RMul(0.1e1,l_prod2_258);
      real l_prod_260 = RMul(l_prod2_243,l_prod_259);
      real l_prod_261 = RMul(l_prod2_243,l_prod_249);
      real l_prod_262 = RMul(l_prod2_243,l_prod_245);
      real l_prod3_263 = RMul(l_prod2_252,l_varAcc_241);
      real l_prod_264 = RMul(l_prod3_263,0.1e1);
      real l_prod_265 = RMul(l_varAcc_240,l_prod_264);
      real l_prod_266 = RMul(l_prod2_252,l_varAcc_242);
      real l_prod_267 = RMul(l_varAcc_240,l_prod_266);
      real l_prod_268 = RMul(l_varAcc_240,l_prod_253);
      real l_prod_269 = RMul(l_varAcc_241,l_prod2_258);
      real l_prod_270 = RMul(l_varAcc_240,l_prod_269);
      real l_prod_271 = RMul(l_varAcc_240,l_prod_255);
      real l_prod_272 = RMul(l_varAcc_240,l_prod_247);
      real l_prod3_273 = RMul(l_prod2_258,l_varAcc_242);
      real l_prod_274 = RMul(0.1e1,l_prod3_273);
      real l_prod_275 = RMul(l_varAcc_240,l_prod_274);
      real l_prod_276 = RMul(l_varAcc_240,l_prod_259);
      real l_prod_277 = RMul(l_varAcc_240,l_prod_249);
      real l_prod_278 = RMul(l_varAcc_240,l_prod_245);
      real l_prod_279 = RMul(0.1e1,RMul(RMul(l_prod3_263,l_varAcc_241),0.1e1));
      real l_prod_280 = RMul(0.1e1,RMul(l_prod3_263,l_varAcc_242));
      real l_prod_281 = RMul(0.1e1,l_prod_264);
      real l_prod_282 = RMul(0.1e1,RMul(l_prod2_252,l_prod2_258));
      real l_prod_283 = RMul(0.1e1,l_prod_266);
      real l_prod_284 = RMul(0.1e1,l_prod_253);
      real l_prod_285 = RMul(0.1e1,RMul(l_varAcc_241,l_prod3_273));
      real l_prod_286 = RMul(0.1e1,l_prod_269);
      real l_prod_287 = RMul(0.1e1,l_prod_255);
      real l_prod_288 = RMul(0.1e1,l_prod_247);
      real l_prod_289 = RMul(0.1e1,RMul(0.1e1,RMul(l_prod3_273,l_varAcc_242)));
      real l_prod_290 = RMul(0.1e1,l_prod_274);
      real l_prod_291 = RMul(0.1e1,l_prod_259);
      real l_prod_292 = RMul(0.1e1,l_prod_249);
      real l_prod_293 = RMul(0.1e1,l_prod_245);
      real l_mult_294 = RMul(0.1e1,l_prod_293);
      real l_mult_295 = RMul(0.106666666667e2,l_prod_289);
      real l_mult_296 = RMul(0.426666666667e2,l_prod_285);
      real l_mult_297 = RMul(0.64e2,l_prod_282);
      real l_mult_298 = RMul(0.426666666667e2,l_prod_280);
      real l_mult_299 = RMul(0.106666666667e2,l_prod_279);
      real l_mult_300 = RMul(0.426666666667e2,l_prod_275);
      real l_mult_301 = RMul(0.128e3,l_prod_270);
      real l_mult_302 = RMul(0.128e3,l_prod_267);
      real l_mult_303 = RMul(0.426666666667e2,l_prod_265);
      real l_mult_304 = RMul(0.64e2,l_prod_260);
      real l_mult_305 = RMul(0.128e3,l_prod_256);
      real l_mult_306 = RMul(0.64e2,l_prod_254);
      real l_mult_307 = RMul(0.426666666667e2,l_prod_250);
      real l_mult_308 = RMul(0.426666666667e2,l_prod_248);
      real l_mult_309 = RMul(0.106666666667e2,l_prod_246);
      real l_mult_310 = RMul(0.533333333333e1,l_prod_287);
      real l_mult_311 = RMul(-0.16e2,l_prod_286);
      real l_mult_312 = RMul(-0.16e2,l_prod_283);
      real l_mult_313 = RMul(0.533333333333e1,l_prod_277);
      real l_mult_314 = RMul(-0.16e2,l_prod_276);
      real l_sum_315 = RAdd(RMul(-0.16e2,l_prod_261),l_mult_304);
      real l_mult_316 = RMul(0.533333333333e1,l_prod_272);
      real l_mult_317 = RMul(-0.16e2,l_prod_268);
      real l_sum_318 = RAdd(RMul(-0.16e2,l_prod_257),l_mult_306);
      real l_mult_319 = RMul(-0.426666666667e2,l_prod_289);
      real l_mult_320 = RMul(-0.693333333333e2,l_prod_287);
      real l_mult_321 = RMul(-0.128e3,l_prod_285);
      real l_mult_322 = RMul(-0.128e3,l_prod_282);
      real l_mult_323 = RMul(-0.426666666667e2,l_prod_280);
      real l_mult_324 = RMul(-0.693333333333e2,l_prod_277);
      real l_mult_325 = RMul(-0.128e3,l_prod_275);
      real l_mult_326 = RMul(0.192e3,l_prod_271);
      real l_mult_327 = RMul(-0.256e3,l_prod_270);
      real l_mult_328 = RMul(-0.128e3,l_prod_267);
      real l_mult_329 = RMul(-0.128e3,l_prod_260);
      real l_mult_330 = RMul(-0.128e3,l_prod_256);
      real l_mult_331 = RMul(-0.426666666667e2,l_prod_250);
      real l_mult_332 = RMul(-0.128e3,l_prod_290);
      real l_mult_333 = RMul(0.28e2,l_prod_287);
      real l_mult_334 = RMul(0.128e3,l_prod_285);
      real l_mult_335 = RMul(0.28e2,l_prod_277);
      real l_mult_336 = RMul(0.128e3,l_prod_275);
      real l_mult_337 = RMul(-0.32e2,l_prod_271);
      real l_mult_338 = RMul(0.533333333333e1,l_prod_292);
      real l_mult_339 = RMul(-0.533333333333e1,l_prod_287);
      real l_mult_340 = RMul(0.32e2,l_prod_286);
      real l_mult_341 = RMul(-0.426666666667e2,l_prod_285);
      real l_mult_342 = RMul(-0.533333333333e1,l_prod_277);
      real l_mult_343 = RMul(0.32e2,l_prod_276);
      real l_mult_344 = RMul(-0.426666666667e2,l_prod_275);
      real l_mult_345 = RMul(-0.128e3,l_prod_280);
      real l_mult_346 = RMul(-0.426666666667e2,l_prod_279);
      real l_mult_347 = RMul(-0.693333333333e2,l_prod_272);
      real l_mult_348 = RMul(-0.128e3,l_prod_270);
      real l_mult_349 = RMul(-0.256e3,l_prod_267);
      real l_mult_350 = RMul(-0.128e3,l_prod_265);
      real l_mult_351 = RMul(-0.128e3,l_prod_254);
      real l_mult_352 = RMul(-0.426666666667e2,l_prod_248);
      real l_mult_353 = RMul(-0.128e3,l_prod_281);
      real l_mult_354 = RMul(0.128e3,l_prod_280);
      real l_mult_355 = RMul(0.28e2,l_prod_272);
      real l_mult_356 = RMul(0.128e3,l_prod_265);
      real l_mult_357 = RMul(0.533333333333e1,l_prod_288);
      real l_mult_358 = RMul(0.32e2,l_prod_283);
      real l_mult_359 = RMul(-0.533333333333e1,l_prod_272);
      real l_mult_360 = RMul(0.32e2,l_prod_268);
      real l_mult_361 = RMul(-0.426666666667e2,l_prod_265);
      real l_mult_362 = RMul(-0.256e3,l_prod_256);
      real l_mult_363 = RMul(-0.128e3,l_prod_250);
      real l_mult_364 = RMul(-0.128e3,l_prod_248);
      real l_mult_365 = RMul(-0.426666666667e2,l_prod_246);
      real l_mult_366 = RMul(-0.128e3,l_prod_251);
      real l_mult_367 = RMul(0.128e3,l_prod_250);
      real l_mult_368 = RMul(0.128e3,l_prod_248);
      real l_mult_369 = RMul(0.533333333333e1,l_prod_278);
      real l_mult_370 = RMul(0.32e2,l_prod_261);
      real l_mult_371 = RMul(0.32e2,l_prod_257);
      real l_mult_372 = RMul(-0.224e3,l_prod_271);
      real l_mult_373 = RMul(0.256e3,l_prod_270);
      real l_mult_374 = RMul(0.256e3,l_prod_267);
      real l_mult_375 = RMul(-0.32e2,l_prod_287);
      real l_mult_376 = RMul(0.32e2,l_prod_271);
      real l_mult_377 = RMul(0.256e3,l_prod_256);
      real l_mult_378 = RMul(-0.32e2,l_prod_277);
      real l_mult_379 = RMul(-0.32e2,l_prod_272);
      real l_mult_380 = RMul(0.256e3,l_prod_271);
      real l_mult_381 = RMul(0.426666666667e2,l_prod_290);
      real l_mult_382 = RMul(0.128e3,l_prod_286);
      real l_mult_383 = RMul(0.128e3,l_prod_283);
      real l_mult_384 = RMul(0.426666666667e2,l_prod_281);
      real l_mult_385 = RMul(0.128e3,l_prod_276);
      real l_mult_386 = RMul(0.128e3,l_prod_268);
      real l_mult_387 = RMul(0.128e3,l_prod_261);
      real l_mult_388 = RMul(0.128e3,l_prod_257);
      real l_mult_389 = RMul(0.426666666667e2,l_prod_251);
      real l_sum_390 = RAdd(RMul(-0.833333333333e1,l_prod_293),RAdd(RMul(0.466666666667e2,l_prod_292),RAdd(RMul(-0.80e2,l_prod_291),RAdd(l_mult_381,RAdd(RMul(0.466666666667e2,l_prod_288),RAdd(RMul(-0.160e3,l_prod_287),RAdd(l_mult_382,RAdd(RMul(-0.80e2,l_prod_284),RAdd(l_mult_383,RAdd(l_mult_384,RAdd(RMul(0.466666666667e2,l_prod_278),RAdd(RMul(-0.160e3,l_prod_277),RAdd(l_mult_385,RAdd(RMul(-0.160e3,l_prod_272),RAdd(l_mult_380,RAdd(l_mult_386,RAdd(RMul(-0.80e2,l_prod_262),RAdd(l_mult_387,RAdd(l_mult_388,l_mult_389)))))))))))))))))));
      real l_mult_391 = RMul(-0.1e1,l_prod_293);
      real l_mult_392 = RMul(-0.64e2,l_prod_277);
      real l_mult_393 = RMul(0.4e1,l_prod_292);
      real l_mult_394 = RMul(-0.16e2,l_prod_291);
      real l_sum_395 = RAdd(l_mult_378,l_mult_385);
      real l_sum_396 = RAdd(l_mult_338,RAdd(RMul(-0.32e2,l_prod_291),l_mult_381));
      real l_mult_397 = RMul(-0.64e2,l_prod_272);
      real l_mult_398 = RMul(0.4e1,l_prod_288);
      real l_mult_399 = RMul(-0.16e2,l_prod_284);
      real l_sum_400 = RAdd(l_mult_379,l_mult_386);
      real l_sum_401 = RAdd(l_mult_357,RAdd(RMul(-0.32e2,l_prod_284),l_mult_384));
      real l_mult_402 = RMul(-0.693333333333e2,l_prod_292);
      real l_mult_403 = RMul(0.192e3,l_prod_287);
      real l_mult_404 = RMul(-0.256e3,l_prod_286);
      real l_mult_405 = RMul(-0.128e3,l_prod_283);
      real l_mult_406 = RMul(0.192e3,l_prod_277);
      real l_mult_407 = RMul(-0.256e3,l_prod_276);
      real l_mult_408 = RMul(-0.256e3,l_prod_271);
      real l_mult_409 = RMul(-0.128e3,l_prod_261);
      real l_sum_410 = RAdd(l_mult_402,RAdd(RMul(0.192e3,l_prod_291),RAdd(l_mult_332,RAdd(l_mult_403,RAdd(l_mult_404,RAdd(l_mult_405,RAdd(l_mult_406,RAdd(l_mult_407,RAdd(l_mult_408,l_mult_409)))))))));
      real l_mult_411 = RMul(0.28e2,l_prod_292);
      real l_mult_412 = RMul(0.128e3,l_prod_290);
      real l_sum_413 = RAdd(l_mult_411,RAdd(RMul(-0.144e3,l_prod_291),RAdd(l_mult_412,RAdd(l_mult_375,RAdd(l_mult_382,l_sum_395)))));
      real l_mult_414 = RMul(-0.533333333333e1,l_prod_292);
      real l_mult_415 = RMul(0.32e2,l_prod_291);
      real l_mult_416 = RMul(-0.426666666667e2,l_prod_290);
      real l_sum_417 = RAdd(l_mult_414,RAdd(l_mult_415,l_mult_416));
      real l_mult_418 = RMul(-0.693333333333e2,l_prod_288);
      real l_mult_419 = RMul(-0.128e3,l_prod_286);
      real l_mult_420 = RMul(-0.256e3,l_prod_283);
      real l_mult_421 = RMul(0.192e3,l_prod_272);
      real l_mult_422 = RMul(-0.256e3,l_prod_268);
      real l_mult_423 = RMul(-0.128e3,l_prod_257);
      real l_sum_424 = RAdd(l_mult_418,RAdd(l_mult_403,RAdd(l_mult_419,RAdd(RMul(0.192e3,l_prod_284),RAdd(l_mult_420,RAdd(l_mult_353,RAdd(l_mult_421,RAdd(l_mult_408,RAdd(l_mult_422,l_mult_423)))))))));
      real l_mult_425 = RMul(0.28e2,l_prod_288);
      real l_mult_426 = RMul(0.128e3,l_prod_281);
      real l_sum_427 = RAdd(l_mult_425,RAdd(l_mult_375,RAdd(RMul(-0.144e3,l_prod_284),RAdd(l_mult_383,RAdd(l_mult_426,l_sum_400)))));
      real l_mult_428 = RMul(-0.533333333333e1,l_prod_288);
      real l_mult_429 = RMul(0.32e2,l_prod_284);
      real l_mult_430 = RMul(-0.426666666667e2,l_prod_281);
      real l_sum_431 = RAdd(l_mult_428,RAdd(l_mult_429,l_mult_430));
      real l_mult_432 = RMul(0.16e2,l_prod_293);
      real l_mult_433 = RMul(0.96e2,l_prod_291);
      real l_mult_434 = RMul(0.96e2,l_prod_284);
      real l_mult_435 = RMul(0.384e3,l_prod_277);
      real l_mult_436 = RMul(0.384e3,l_prod_272);
      real l_mult_437 = RMul(-0.512e3,l_prod_271);
      real l_mult_438 = RMul(-0.384e3,l_prod_261);
      real l_mult_439 = RMul(-0.384e3,l_prod_257);
      real l_mult_440 = RMul(-0.170666666667e3,l_prod_251);
      real l_mult_441 = RMul(-0.12e2,l_prod_293);
      real l_mult_442 = RMul(-0.288e3,l_prod_277);
      real l_mult_443 = RMul(-0.288e3,l_prod_272);
      real l_mult_444 = RMul(0.384e3,l_prod_261);
      real l_mult_445 = RMul(0.384e3,l_prod_257);
      real l_mult_446 = RMul(0.533333333333e1,l_prod_293);
      real l_mult_447 = RMul(0.64e2,l_prod_277);
      real l_mult_448 = RMul(0.64e2,l_prod_272);
      real l_sum_449 = RAdd(l_mult_375,l_mult_382);
      real l_mult_450 = RMul(-0.224e3,l_prod_287);
      real l_mult_451 = RMul(0.256e3,l_prod_286);
      real l_mult_452 = RMul(0.256e3,l_prod_283);
      real l_mult_453 = RMul(0.32e2,l_prod_287);
      real l_mult_454 = RMul(0.96e2,l_prod_292);
      real l_mult_455 = RMul(-0.224e3,l_prod_291);
      real l_mult_456 = RMul(-0.448e3,l_prod_277);
      real l_mult_457 = RMul(0.512e3,l_prod_271);
      real l_mult_458 = RMul(-0.32e2,l_prod_292);
      real l_mult_459 = RMul(0.320e3,l_prod_277);
      real l_mult_460 = RMul(0.160e3,l_prod_291);
      real l_mult_461 = RMul(0.96e2,l_prod_288);
      real l_mult_462 = RMul(-0.224e3,l_prod_284);
      real l_mult_463 = RMul(-0.448e3,l_prod_272);
      real l_mult_464 = RMul(-0.32e2,l_prod_288);
      real l_mult_465 = RMul(0.320e3,l_prod_272);
      real l_mult_466 = RMul(0.160e3,l_prod_284);
      real l_mult_467 = RMul(-0.64e2,l_prod_287);
      real l_sum_468 = RAdd(l_mult_369,RAdd(RMul(-0.32e2,l_prod_262),l_mult_389));
      real l_mult_469 = RMul(0.4e1,l_prod_278);
      real l_mult_470 = RMul(-0.16e2,l_prod_262);
      real l_sum_471 = RAdd(l_mult_470,l_mult_388);
      real l_mult_472 = RMul(0.384e3,l_prod_287);
      real l_mult_473 = RMul(-0.384e3,l_prod_283);
      real l_mult_474 = RMul(-0.170666666667e3,l_prod_281);
      real l_mult_475 = RMul(-0.693333333333e2,l_prod_278);
      real l_mult_476 = RMul(-0.128e3,l_prod_276);
      real l_mult_477 = RMul(-0.384e3,l_prod_268);
      real l_mult_478 = RMul(0.96e2,l_prod_262);
      real l_mult_479 = RMul(-0.256e3,l_prod_257);
      real l_mult_480 = RMul(-0.426666666667e2,l_prod_251);
      real l_mult_481 = RMul(-0.288e3,l_prod_287);
      real l_mult_482 = RMul(0.384e3,l_prod_283);
      real l_mult_483 = RMul(0.28e2,l_prod_278);
      real l_mult_484 = RMul(0.384e3,l_prod_268);
      real l_mult_485 = RMul(0.64e2,l_prod_287);
      real l_mult_486 = RMul(-0.533333333333e1,l_prod_278);
      real l_mult_487 = RMul(-0.128e3,l_prod_268);
      real l_mult_488 = RMul(-0.256e3,l_prod_261);
      real l_sum_489 = RAdd(l_mult_479,l_mult_366);
      real l_sum_490 = RAdd(l_mult_475,RAdd(l_mult_406,RAdd(l_mult_476,RAdd(l_mult_421,RAdd(l_mult_408,RAdd(l_mult_487,RAdd(RMul(0.192e3,l_prod_262),RAdd(l_mult_488,l_sum_489))))))));
      real l_mult_491 = RMul(0.128e3,l_prod_251);
      real l_sum_492 = RAdd(l_mult_483,RAdd(l_mult_378,RAdd(l_mult_379,RAdd(RMul(-0.144e3,l_prod_262),RAdd(l_mult_387,RAdd(l_mult_388,l_mult_491))))));
      real l_mult_493 = RMul(0.32e2,l_prod_262);
      real l_sum_494 = RAdd(l_mult_486,RAdd(l_mult_493,l_mult_480));
      real l_mult_495 = RMul(-0.448e3,l_prod_287);
      real l_mult_496 = RMul(-0.224e3,l_prod_277);
      real l_mult_497 = RMul(0.256e3,l_prod_276);
      real l_mult_498 = RMul(0.320e3,l_prod_287);
      real l_mult_499 = RMul(0.32e2,l_prod_277);
      real l_sum_500 = RAdd(l_mult_499,l_mult_476);
      real l_mult_501 = RMul(0.256e3,l_prod_261);
      real l_mult_502 = RMul(0.96e2,l_prod_278);
      real l_mult_503 = RMul(-0.224e3,l_prod_262);
      real l_mult_504 = RMul(-0.32e2,l_prod_278);
      real l_mult_505 = RMul(0.160e3,l_prod_262);
      real l_sum_506 = RAdd(l_mult_470,l_mult_387);
      real l_mult_507 = RMul(-0.170666666667e3,l_prod_290);
      real l_mult_508 = RMul(-0.384e3,l_prod_286);
      real l_mult_509 = RMul(-0.384e3,l_prod_276);
      real l_mult_510 = RMul(0.384e3,l_prod_286);
      real l_mult_511 = RMul(0.384e3,l_prod_276);
      real l_mult_512 = RMul(-0.224e3,l_prod_272);
      real l_mult_513 = RMul(0.256e3,l_prod_268);
      real l_mult_514 = RMul(0.32e2,l_prod_272);
      real l_sum_515 = RAdd(l_mult_514,l_mult_487);
      real l_mult_516 = RMul(0.256e3,l_prod_257);
      real l_vdot_517 = RAdd(VDot<4,4>(v_232,VEC4(0.e0,0.e0,0.e0,RAdd(l_mult_338,RAdd(l_mult_392,l_mult_387)))),RAdd(VDot<4,4>(v_233,VEC4(RAdd(l_mult_393,RAdd(l_mult_394,l_sum_395)),l_sum_396,RAdd(l_mult_357,RAdd(l_mult_397,l_mult_388)),RAdd(l_mult_398,RAdd(l_mult_399,l_sum_400)))),RAdd(VDot<4,4>(v_234,VEC4(l_sum_401,l_sum_410,l_sum_413,l_sum_417)),RAdd(VDot<4,4>(v_235,VEC4(l_sum_424,l_sum_427,l_sum_431,RAdd(l_mult_432,RAdd(l_mult_402,RAdd(l_mult_433,RAdd(l_mult_416,RAdd(l_mult_418,RAdd(l_mult_403,RAdd(l_mult_419,RAdd(l_mult_434,RAdd(l_mult_405,RAdd(l_mult_430,RAdd(RMul(-0.138666666667e3,l_prod_278),RAdd(l_mult_435,RAdd(l_mult_407,RAdd(l_mult_436,RAdd(l_mult_437,RAdd(l_mult_422,RAdd(RMul(0.288e3,l_prod_262),RAdd(l_mult_438,RAdd(l_mult_439,l_mult_440))))))))))))))))))))),RAdd(VDot<4,4>(v_236,VEC4(RAdd(l_mult_441,RAdd(l_mult_411,RAdd(l_mult_394,RAdd(l_mult_425,RAdd(l_mult_375,RAdd(l_mult_399,RAdd(RMul(0.152e3,l_prod_278),RAdd(l_mult_442,RAdd(l_mult_385,RAdd(l_mult_443,RAdd(l_mult_380,RAdd(l_mult_386,RAdd(RMul(-0.384e3,l_prod_262),RAdd(l_mult_444,RAdd(l_mult_445,RMul(0.256e3,l_prod_251)))))))))))))))),RAdd(l_mult_446,RAdd(l_mult_414,RAdd(l_mult_428,RAdd(RMul(-0.746666666667e2,l_prod_278),RAdd(l_mult_447,RAdd(l_mult_448,RAdd(RMul(0.224e3,l_prod_262),RAdd(l_mult_409,RAdd(l_mult_423,l_mult_440))))))))),RAdd(l_mult_375,l_mult_380),RAdd(l_mult_375,l_mult_383))),RAdd(VDot<4,4>(v_237,VEC4(l_sum_449,RAdd(l_mult_450,RAdd(l_mult_451,RAdd(l_mult_452,l_mult_380))),RAdd(l_mult_453,l_mult_405),RAdd(l_mult_453,l_mult_419))),RAdd(VDot<4,4>(v_238,VEC4(RAdd(l_mult_454,RAdd(l_mult_455,RAdd(l_mult_412,RAdd(l_mult_450,RAdd(l_mult_451,RAdd(l_mult_383,RAdd(l_mult_456,RAdd(RMul(0.512e3,l_prod_276),RAdd(l_mult_457,l_mult_444))))))))),RAdd(l_mult_458,RAdd(l_mult_415,RAdd(l_mult_453,RAdd(l_mult_459,RAdd(l_mult_407,RAdd(l_mult_408,l_mult_438)))))),RAdd(l_mult_458,RAdd(l_mult_460,RAdd(l_mult_332,RAdd(l_mult_453,RAdd(l_mult_419,RAdd(l_mult_447,l_mult_407)))))),RAdd(l_mult_461,RAdd(l_mult_450,RAdd(l_mult_382,RAdd(l_mult_462,RAdd(l_mult_452,RAdd(l_mult_426,RAdd(l_mult_463,RAdd(l_mult_457,RAdd(RMul(0.512e3,l_prod_268),l_mult_445))))))))))),RAdd(VDot<3,4>(v_239,VEC3{4}(RAdd(l_mult_464,RAdd(l_mult_453,RAdd(l_mult_429,RAdd(l_mult_465,RAdd(l_mult_408,RAdd(l_mult_422,l_mult_439)))))),RAdd(l_mult_464,RAdd(l_mult_453,RAdd(l_mult_466,RAdd(l_mult_405,RAdd(l_mult_353,RAdd(l_mult_448,l_mult_422)))))),RAdd(RMul(0.256e3,l_prod_287),RAdd(l_mult_404,RAdd(l_mult_420,l_mult_437))))),VDot<4,4>(v_231,VEC4(l_sum_390,RAdd(l_mult_391,RAdd(RMul(0.146666666667e2,l_prod_278),RAdd(RMul(-0.48e2,l_prod_262),l_mult_389))),0.e0,0.e0))))))))));
      real l_vdot_518 = RAdd(VDot<4,4>(v_232,VEC4(RAdd(l_mult_338,RAdd(l_mult_467,l_mult_383)),RAdd(l_mult_393,RAdd(l_mult_394,l_sum_449)),l_sum_396,0.e0)),RAdd(VDot<4,4>(v_233,VEC4(0.e0,0.e0,l_sum_468,RAdd(l_mult_469,RAdd(l_mult_379,l_sum_471)))),RAdd(VDot<4,4>(v_234,VEC4(RAdd(l_mult_369,RAdd(l_mult_397,l_mult_386)),l_sum_410,l_sum_413,l_sum_417)),RAdd(VDot<4,4>(v_235,VEC4(RAdd(l_mult_432,RAdd(l_mult_402,RAdd(l_mult_433,RAdd(l_mult_416,RAdd(RMul(-0.138666666667e3,l_prod_288),RAdd(l_mult_472,RAdd(l_mult_404,RAdd(RMul(0.288e3,l_prod_284),RAdd(l_mult_473,RAdd(l_mult_474,RAdd(l_mult_475,RAdd(l_mult_406,RAdd(l_mult_476,RAdd(l_mult_436,RAdd(l_mult_437,RAdd(l_mult_477,RAdd(l_mult_478,RAdd(l_mult_409,RAdd(l_mult_479,l_mult_480))))))))))))))))))),RAdd(l_mult_441,RAdd(l_mult_411,RAdd(l_mult_394,RAdd(RMul(0.152e3,l_prod_288),RAdd(l_mult_481,RAdd(l_mult_382,RAdd(RMul(-0.384e3,l_prod_284),RAdd(l_mult_482,RAdd(RMul(0.256e3,l_prod_281),RAdd(l_mult_483,RAdd(l_mult_378,RAdd(l_mult_443,RAdd(l_mult_380,RAdd(l_mult_484,l_sum_471)))))))))))))),RAdd(l_mult_446,RAdd(l_mult_414,RAdd(RMul(-0.746666666667e2,l_prod_288),RAdd(l_mult_485,RAdd(RMul(0.224e3,l_prod_284),RAdd(l_mult_405,RAdd(l_mult_474,RAdd(l_mult_486,RAdd(l_mult_448,l_mult_487))))))))),l_sum_490)),RAdd(VDot<4,4>(v_236,VEC4(l_sum_492,l_sum_494,RAdd(l_mult_378,l_mult_387),RAdd(l_mult_378,l_mult_380))),RAdd(VDot<4,4>(v_237,VEC4(l_sum_395,RAdd(l_mult_454,RAdd(l_mult_455,RAdd(l_mult_412,RAdd(l_mult_495,RAdd(RMul(0.512e3,l_prod_286),RAdd(l_mult_482,RAdd(l_mult_496,RAdd(l_mult_497,RAdd(l_mult_457,l_mult_387))))))))),RAdd(l_mult_458,RAdd(l_mult_415,RAdd(l_mult_498,RAdd(l_mult_404,RAdd(l_mult_473,RAdd(l_mult_499,l_mult_408)))))),RAdd(l_mult_458,RAdd(l_mult_460,RAdd(l_mult_332,RAdd(l_mult_485,RAdd(l_mult_404,l_sum_500))))))),RAdd(VDot<4,4>(v_238,VEC4(RAdd(l_mult_496,RAdd(l_mult_497,RAdd(l_mult_380,l_mult_501))),RAdd(l_mult_499,l_mult_409),l_sum_500,RAdd(l_mult_502,RAdd(l_mult_496,RAdd(l_mult_385,RAdd(l_mult_463,RAdd(l_mult_457,RAdd(l_mult_484,RAdd(l_mult_503,RAdd(l_mult_501,RAdd(RMul(0.512e3,l_prod_257),l_mult_491))))))))))),RAdd(VDot<3,4>(v_239,VEC3{4}(RAdd(l_mult_504,RAdd(l_mult_499,RAdd(l_mult_448,RAdd(l_mult_505,RAdd(l_mult_409,l_sum_489))))),RAdd(l_mult_504,RAdd(l_mult_499,RAdd(l_mult_465,RAdd(l_mult_408,RAdd(l_mult_477,RAdd(l_mult_493,l_mult_479)))))),RAdd(RMul(0.256e3,l_prod_277),RAdd(l_mult_407,RAdd(l_mult_437,l_mult_488))))),VDot<4,4>(v_231,VEC4(l_sum_390,0.e0,RAdd(l_mult_391,RAdd(RMul(0.146666666667e2,l_prod_288),RAdd(RMul(-0.48e2,l_prod_284),l_mult_384))),0.e0))))))))));
      real l_vdot_519 = RAdd(VDot<4,4>(v_232,VEC4(l_sum_401,RAdd(l_mult_398,RAdd(l_mult_375,RAdd(l_mult_399,l_mult_383))),RAdd(l_mult_357,RAdd(l_mult_467,l_mult_382)),l_sum_468)),RAdd(VDot<4,4>(v_233,VEC4(RAdd(l_mult_469,RAdd(l_mult_378,l_sum_506)),RAdd(l_mult_369,RAdd(l_mult_392,l_mult_385)),0.e0,0.e0)),RAdd(VDot<4,4>(v_234,VEC4(0.e0,RAdd(l_mult_432,RAdd(RMul(-0.138666666667e3,l_prod_292),RAdd(RMul(0.288e3,l_prod_291),RAdd(l_mult_507,RAdd(l_mult_418,RAdd(l_mult_472,RAdd(l_mult_508,RAdd(l_mult_434,RAdd(l_mult_420,RAdd(l_mult_430,RAdd(l_mult_475,RAdd(l_mult_435,RAdd(l_mult_509,RAdd(l_mult_421,RAdd(l_mult_437,RAdd(l_mult_487,RAdd(l_mult_478,RAdd(l_mult_488,RAdd(l_mult_423,l_mult_480))))))))))))))))))),RAdd(l_mult_441,RAdd(RMul(0.152e3,l_prod_292),RAdd(RMul(-0.384e3,l_prod_291),RAdd(RMul(0.256e3,l_prod_290),RAdd(l_mult_425,RAdd(l_mult_481,RAdd(l_mult_510,RAdd(l_mult_399,RAdd(l_mult_383,RAdd(l_mult_483,RAdd(l_mult_442,RAdd(l_mult_511,RAdd(l_mult_379,RAdd(l_mult_380,l_sum_506)))))))))))))),RAdd(l_mult_446,RAdd(RMul(-0.746666666667e2,l_prod_292),RAdd(RMul(0.224e3,l_prod_291),RAdd(l_mult_507,RAdd(l_mult_428,RAdd(l_mult_485,RAdd(l_mult_419,RAdd(l_mult_486,RAdd(l_mult_447,l_mult_476))))))))))),RAdd(VDot<4,4>(v_235,VEC4(l_sum_424,l_sum_427,l_sum_431,l_sum_490)),RAdd(VDot<4,4>(v_236,VEC4(l_sum_492,l_sum_494,RAdd(l_mult_379,l_mult_388),l_sum_400)),RAdd(VDot<4,4>(v_237,VEC4(RAdd(l_mult_379,l_mult_380),RAdd(l_mult_461,RAdd(l_mult_495,RAdd(l_mult_510,RAdd(l_mult_462,RAdd(RMul(0.512e3,l_prod_283),RAdd(l_mult_426,RAdd(l_mult_512,RAdd(l_mult_457,RAdd(l_mult_513,l_mult_388))))))))),RAdd(l_mult_464,RAdd(l_mult_485,RAdd(l_mult_466,RAdd(l_mult_420,RAdd(l_mult_353,l_sum_515))))),RAdd(l_mult_464,RAdd(l_mult_498,RAdd(l_mult_508,RAdd(l_mult_429,RAdd(l_mult_420,RAdd(l_mult_514,l_mult_408)))))))),RAdd(VDot<4,4>(v_238,VEC4(RAdd(l_mult_502,RAdd(l_mult_456,RAdd(l_mult_511,RAdd(l_mult_512,RAdd(l_mult_457,RAdd(l_mult_386,RAdd(l_mult_503,RAdd(RMul(0.512e3,l_prod_261),RAdd(l_mult_516,l_mult_491))))))))),RAdd(l_mult_504,RAdd(l_mult_447,RAdd(l_mult_514,RAdd(l_mult_505,RAdd(l_mult_488,RAdd(l_mult_423,l_mult_366)))))),RAdd(l_mult_504,RAdd(l_mult_459,RAdd(l_mult_509,RAdd(l_mult_514,RAdd(l_mult_408,RAdd(l_mult_493,l_mult_488)))))),RAdd(l_mult_512,RAdd(l_mult_380,RAdd(l_mult_513,l_mult_516))))),RAdd(VDot<3,4>(v_239,VEC3{4}(RAdd(l_mult_514,l_mult_423),l_sum_515,RAdd(RMul(0.256e3,l_prod_272),RAdd(l_mult_437,RAdd(l_mult_422,l_mult_479))))),VDot<4,4>(v_231,VEC4(l_sum_390,0.e0,0.e0,RAdd(l_mult_391,RAdd(RMul(0.146666666667e2,l_prod_292),RAdd(RMul(-0.48e2,l_prod_291),l_mult_381)))))))))))));
      int l_mulRes_520 = IMul(l_intPos_158,4);
      int t_521 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(globals._t,l_mulRes_520);
      int l_mulRes_522 = IMul(3,t_521);
      int t_523 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(globals._t,IAdd(l_mulRes_520,1));
      int l_mulRes_524 = IMul(3,t_523);
      real l_dof_load_525 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(globals._t,l_mulRes_524);
      real l_dof_load_526 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(globals._t,IAdd(1,l_mulRes_524));
      real l_dof_load_527 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(globals._t,IAdd(2,l_mulRes_524));
      int t_528 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(globals._t,IAdd(l_mulRes_520,2));
      int l_mulRes_529 = IMul(3,t_528);
      real l_dof_load_530 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(globals._t,l_mulRes_529);
      real l_dof_load_531 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(globals._t,IAdd(1,l_mulRes_529));
      real l_dof_load_532 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(globals._t,IAdd(2,l_mulRes_529));
      int t_533 = ExtractFemItem2<int,int,ExtractIndex(Mesh)>(globals._t,IAdd(l_mulRes_520,3));
      int l_mulRes_534 = IMul(3,t_533);
      real l_dof_load_535 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(globals._t,l_mulRes_534);
      real l_dof_load_536 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(globals._t,IAdd(1,l_mulRes_534));
      real l_dof_load_537 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(globals._t,IAdd(2,l_mulRes_534));
      real t_538 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(globals._t,l_mulRes_522);
      real l_r_539 = RMul(t_538,l_mult_391);
      real l_r_540 = RMul(l_dof_load_530,0.e0);
      real l_r_541 = RMul(l_dof_load_535,0.e0);
      real l_r_542 = RAdd(RAdd(RAdd(l_r_539,RMul(l_dof_load_525,l_mult_294)),l_r_540),l_r_541);
      real l_r_543 = RAdd(l_r_539,RMul(l_dof_load_525,0.e0));
      real l_r_544 = RAdd(RAdd(l_r_543,RMul(l_dof_load_530,l_mult_294)),l_r_541);
      real l_r_545 = RAdd(RAdd(l_r_543,l_r_540),RMul(l_dof_load_535,l_mult_294));
      real t_546 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(globals._t,IAdd(1,l_mulRes_522));
      real l_r_547 = RMul(t_546,l_mult_391);
      real l_r_548 = RMul(l_dof_load_531,0.e0);
      real l_r_549 = RMul(l_dof_load_536,0.e0);
      real l_r_550 = RAdd(RAdd(RAdd(l_r_547,RMul(l_dof_load_526,l_mult_294)),l_r_548),l_r_549);
      real l_r_551 = RAdd(l_r_547,RMul(l_dof_load_526,0.e0));
      real l_r_552 = RAdd(RAdd(l_r_551,RMul(l_dof_load_531,l_mult_294)),l_r_549);
      real l_r_553 = RAdd(RAdd(l_r_551,l_r_548),RMul(l_dof_load_536,l_mult_294));
      real t_554 = ExtractFemItem2<int,real,ExtractDof(Mesh)>(globals._t,IAdd(2,l_mulRes_522));
      real l_r_555 = RMul(t_554,l_mult_391);
      real l_r_556 = RMul(l_dof_load_532,0.e0);
      real l_r_557 = RMul(l_dof_load_537,0.e0);
      real l_r_558 = RAdd(RAdd(RAdd(l_r_555,RMul(l_dof_load_527,l_mult_294)),l_r_556),l_r_557);
      real l_r_559 = RAdd(l_r_555,RMul(l_dof_load_527,0.e0));
      real l_r_560 = RAdd(RAdd(l_r_559,RMul(l_dof_load_532,l_mult_294)),l_r_557);
      real l_r_561 = RAdd(RAdd(l_r_559,l_r_556),RMul(l_dof_load_537,l_mult_294));
      real l_r_562 = RMul(0.e0,l_r_542);
      real l_r_563 = RMul(0.e0,l_r_550);
      real l_r_564 = RMul(0.e0,l_r_558);
      real l_r_565 = RAdd(l_r_562,l_r_563);
      real l_r_566 = RAdd(l_r_565,l_r_564);
      real l_r_567 = RMul(0.e0,l_r_544);
      real l_r_568 = RMul(0.e0,l_r_552);
      real l_r_569 = RMul(0.e0,l_r_560);
      real l_r_570 = RAdd(l_r_567,l_r_568);
      real l_r_571 = RAdd(l_r_570,l_r_569);
      real l_r_572 = RMul(0.e0,l_r_545);
      real l_r_573 = RMul(0.e0,l_r_553);
      real l_r_574 = RMul(0.e0,l_r_561);
      real l_r_575 = RAdd(l_r_572,l_r_573);
      real l_r_576 = RAdd(l_r_575,l_r_574);
      real l_r_577 = RAdd(l_r_565,RMul(-0.1e1,l_r_558));
      real l_r_578 = RAdd(l_r_570,RMul(-0.1e1,l_r_560));
      real l_r_579 = RAdd(l_r_575,RMul(-0.1e1,l_r_561));
      real l_r_580 = RAdd(RAdd(l_r_562,RMul(0.1e1,l_r_550)),l_r_564);
      real l_r_581 = RAdd(RAdd(l_r_567,RMul(0.1e1,l_r_552)),l_r_569);
      real l_r_582 = RAdd(RAdd(l_r_572,RMul(0.1e1,l_r_553)),l_r_574);
      real l_r_583 = RAdd(l_r_565,RMul(0.1e1,l_r_558));
      real l_r_584 = RAdd(l_r_570,RMul(0.1e1,l_r_560));
      real l_r_585 = RAdd(l_r_575,RMul(0.1e1,l_r_561));
      real l_r_586 = RAdd(RAdd(RMul(-0.1e1,l_r_542),l_r_563),l_r_564);
      real l_r_587 = RAdd(RAdd(RMul(-0.1e1,l_r_544),l_r_568),l_r_569);
      real l_r_588 = RAdd(RAdd(RMul(-0.1e1,l_r_545),l_r_573),l_r_574);
      real l_r_589 = RAdd(RAdd(l_r_562,RMul(-0.1e1,l_r_550)),l_r_564);
      real l_r_590 = RAdd(RAdd(l_r_567,RMul(-0.1e1,l_r_552)),l_r_569);
      real l_r_591 = RAdd(RAdd(l_r_572,RMul(-0.1e1,l_r_553)),l_r_574);
      real l_r_592 = RAdd(RAdd(RMul(0.1e1,l_r_542),l_r_563),l_r_564);
      real l_r_593 = RAdd(RAdd(RMul(0.1e1,l_r_544),l_r_568),l_r_569);
      real l_r_594 = RAdd(RAdd(RMul(0.1e1,l_r_545),l_r_573),l_r_574);
      real l_r_595 = RAdd(RAdd(RMul(l_r_542,l_r_571),RMul(l_r_550,l_r_584)),RMul(l_r_558,l_r_590));
      real l_r_596 = RAdd(RAdd(RMul(l_r_542,l_r_576),RMul(l_r_550,l_r_585)),RMul(l_r_558,l_r_591));
      real l_r_597 = RAdd(RAdd(RMul(l_r_542,l_r_578),RMul(l_r_550,l_r_571)),RMul(l_r_558,l_r_593));
      real l_r_598 = RAdd(RAdd(RMul(l_r_542,l_r_579),RMul(l_r_550,l_r_576)),RMul(l_r_558,l_r_594));
      real l_r_599 = RAdd(RAdd(RMul(l_r_542,l_r_581),RMul(l_r_550,l_r_587)),RMul(l_r_558,l_r_571));
      real l_r_600 = RAdd(RAdd(RMul(l_r_542,l_r_582),RMul(l_r_550,l_r_588)),RMul(l_r_558,l_r_576));
      real l_r_601 = RAdd(RAdd(RMul(l_r_544,l_r_566),RMul(l_r_552,l_r_583)),RMul(l_r_560,l_r_589));
      real l_r_602 = RAdd(RAdd(RMul(l_r_544,l_r_576),RMul(l_r_552,l_r_585)),RMul(l_r_560,l_r_591));
      real l_r_603 = RAdd(RAdd(RMul(l_r_544,l_r_577),RMul(l_r_552,l_r_566)),RMul(l_r_560,l_r_592));
      real l_r_604 = RAdd(RAdd(RMul(l_r_544,l_r_579),RMul(l_r_552,l_r_576)),RMul(l_r_560,l_r_594));
      real l_r_605 = RAdd(RAdd(RMul(l_r_544,l_r_580),RMul(l_r_552,l_r_586)),RMul(l_r_560,l_r_566));
      real l_r_606 = RAdd(RAdd(RMul(l_r_544,l_r_582),RMul(l_r_552,l_r_588)),RMul(l_r_560,l_r_576));
      real l_r_607 = RAdd(RAdd(RMul(l_r_545,l_r_566),RMul(l_r_553,l_r_583)),RMul(l_r_561,l_r_589));
      real l_r_608 = RAdd(RAdd(RMul(l_r_545,l_r_571),RMul(l_r_553,l_r_584)),RMul(l_r_561,l_r_590));
      real l_r_609 = RAdd(RAdd(RMul(l_r_545,l_r_577),RMul(l_r_553,l_r_566)),RMul(l_r_561,l_r_592));
      real l_r_610 = RAdd(RAdd(RMul(l_r_545,l_r_578),RMul(l_r_553,l_r_571)),RMul(l_r_561,l_r_593));
      real l_r_611 = RAdd(RAdd(RMul(l_r_545,l_r_580),RMul(l_r_553,l_r_586)),RMul(l_r_561,l_r_566));
      real l_r_612 = RAdd(RAdd(RMul(l_r_545,l_r_581),RMul(l_r_553,l_r_587)),RMul(l_r_561,l_r_571));
      vec3{4} v_613 = VEC3{4}(l_r_544,l_r_552,l_r_560);
      real l_r_614 = RMul(0.e0,RAdd(RAdd(RMul(l_r_542,l_r_566),RMul(l_r_550,l_r_583)),RMul(l_r_558,l_r_589)));
      real l_r_615 = RMul(0.e0,l_r_596);
      real l_r_616 = RMul(0.e0,l_r_601);
      real l_r_617 = RMul(0.e0,RAdd(RAdd(RMul(l_r_544,l_r_571),RMul(l_r_552,l_r_584)),RMul(l_r_560,l_r_590)));
      real l_r_618 = RMul(0.e0,l_r_607);
      real l_r_619 = RMul(0.e0,RAdd(RAdd(RMul(l_r_545,l_r_576),RMul(l_r_553,l_r_585)),RMul(l_r_561,l_r_591)));
      real l_r_620 = RAdd(l_r_614,RMul(0.e0,l_r_595));
      real l_r_621 = RMul(0.e0,RAdd(RAdd(RMul(l_r_542,l_r_577),RMul(l_r_550,l_r_566)),RMul(l_r_558,l_r_592)));
      real l_r_622 = RMul(0.e0,l_r_598);
      real l_r_623 = RMul(0.e0,l_r_603);
      real l_r_624 = RMul(0.e0,RAdd(RAdd(RMul(l_r_544,l_r_578),RMul(l_r_552,l_r_571)),RMul(l_r_560,l_r_593)));
      real l_r_625 = RMul(0.e0,l_r_609);
      real l_r_626 = RMul(0.e0,RAdd(RAdd(RMul(l_r_545,l_r_579),RMul(l_r_553,l_r_576)),RMul(l_r_561,l_r_594)));
      real l_r_627 = RAdd(l_r_621,RMul(0.e0,l_r_597));
      real l_r_628 = RMul(0.e0,RAdd(RAdd(RMul(l_r_542,l_r_580),RMul(l_r_550,l_r_586)),RMul(l_r_558,l_r_566)));
      real l_r_629 = RMul(0.e0,l_r_600);
      real l_r_630 = RMul(0.e0,l_r_605);
      real l_r_631 = RMul(0.e0,RAdd(RAdd(RMul(l_r_544,l_r_581),RMul(l_r_552,l_r_587)),RMul(l_r_560,l_r_571)));
      real l_r_632 = RMul(0.e0,l_r_611);
      real l_r_633 = RMul(0.e0,RAdd(RAdd(RMul(l_r_545,l_r_582),RMul(l_r_553,l_r_588)),RMul(l_r_561,l_r_576)));
      real l_r_634 = RAdd(l_r_628,RMul(0.e0,l_r_599));
      real l_r_635 = RMul(0.e0,l_r_602);
      real l_r_636 = RMul(0.e0,l_r_608);
      real l_r_637 = RMul(0.e0,l_r_604);
      real l_r_638 = RMul(0.e0,l_r_610);
      real l_r_639 = RMul(0.e0,l_r_606);
      real l_r_640 = RMul(0.e0,l_r_612);
      real l_op1_e3_l_19_641 = RMul(0.2e1,VDot<3,4>(VEC3{4}(l_r_542,l_r_550,l_r_558),VEC3{4}(VDot<3,4>(v_613,VEC3{4}(l_r_576,l_r_585,l_r_591)),VDot<3,4>(v_613,VEC3{4}(l_r_579,l_r_576,l_r_594)),VDot<3,4>(v_613,VEC3{4}(l_r_582,l_r_588,l_r_576)))));
      v_642 = VEC3{4}(RAdd(RAdd(RMul(l_vdot_517,RDiv(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(l_r_620,l_r_615),l_r_616),l_r_617),RMul(0.1e1,l_r_602)),l_r_618),RMul(-0.1e1,l_r_608)),l_r_619),l_op1_e3_l_19_641)),RMul(l_vdot_518,RDiv(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(l_r_620,RMul(-0.1e1,l_r_596)),l_r_616),l_r_617),l_r_635),RMul(0.1e1,l_r_607)),l_r_636),l_r_619),l_op1_e3_l_19_641))),RMul(l_vdot_519,RDiv(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(l_r_614,RMul(0.1e1,l_r_595)),l_r_615),RMul(-0.1e1,l_r_601)),l_r_617),l_r_635),l_r_618),l_r_636),l_r_619),l_op1_e3_l_19_641))),RAdd(RAdd(RMul(l_vdot_517,RDiv(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(l_r_627,l_r_622),l_r_623),l_r_624),RMul(0.1e1,l_r_604)),l_r_625),RMul(-0.1e1,l_r_610)),l_r_626),l_op1_e3_l_19_641)),RMul(l_vdot_518,RDiv(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(l_r_627,RMul(-0.1e1,l_r_598)),l_r_623),l_r_624),l_r_637),RMul(0.1e1,l_r_609)),l_r_638),l_r_626),l_op1_e3_l_19_641))),RMul(l_vdot_519,RDiv(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(l_r_621,RMul(0.1e1,l_r_597)),l_r_622),RMul(-0.1e1,l_r_603)),l_r_624),l_r_637),l_r_625),l_r_638),l_r_626),l_op1_e3_l_19_641))),RAdd(RAdd(RMul(l_vdot_517,RDiv(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(l_r_634,l_r_629),l_r_630),l_r_631),RMul(0.1e1,l_r_606)),l_r_632),RMul(-0.1e1,l_r_612)),l_r_633),l_op1_e3_l_19_641)),RMul(l_vdot_518,RDiv(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(l_r_634,RMul(-0.1e1,l_r_600)),l_r_630),l_r_631),l_r_639),RMul(0.1e1,l_r_611)),l_r_640),l_r_633),l_op1_e3_l_19_641))),RMul(l_vdot_519,RDiv(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(RAdd(l_r_628,RMul(0.1e1,l_r_599)),l_r_629),RMul(-0.1e1,l_r_605)),l_r_631),l_r_639),l_r_632),l_r_640),l_r_633),l_op1_e3_l_19_641))));
      l_compositionl_643 = RAdd(VDot<4,4>(v_232,VEC4(RAdd(l_mult_310,RAdd(RMul(-0.32e2,l_prod_283),l_mult_298)),RAdd(RMul(0.4e1,l_prod_287),RAdd(l_mult_311,RAdd(l_mult_312,l_mult_297))),RAdd(l_mult_310,RAdd(RMul(-0.32e2,l_prod_286),l_mult_296)),RAdd(l_mult_313,RAdd(RMul(-0.32e2,l_prod_261),l_mult_307)))),RAdd(VDot<4,4>(v_233,VEC4(RAdd(RMul(0.4e1,l_prod_277),RAdd(l_mult_314,l_sum_315)),RAdd(l_mult_313,RAdd(RMul(-0.32e2,l_prod_276),l_mult_300)),RAdd(l_mult_316,RAdd(RMul(-0.32e2,l_prod_257),l_mult_308)),RAdd(RMul(0.4e1,l_prod_272),RAdd(l_mult_317,l_sum_318)))),RAdd(VDot<4,4>(v_234,VEC4(RAdd(l_mult_316,RAdd(RMul(-0.32e2,l_prod_268),l_mult_303)),RAdd(RMul(0.16e2,l_prod_292),RAdd(RMul(-0.693333333333e2,l_prod_291),RAdd(RMul(0.96e2,l_prod_290),RAdd(l_mult_319,RAdd(l_mult_320,RAdd(RMul(0.192e3,l_prod_286),RAdd(l_mult_321,RAdd(RMul(0.96e2,l_prod_283),RAdd(l_mult_322,RAdd(l_mult_323,RAdd(l_mult_324,RAdd(RMul(0.192e3,l_prod_276),RAdd(l_mult_325,RAdd(l_mult_326,RAdd(l_mult_327,RAdd(l_mult_328,RAdd(RMul(0.96e2,l_prod_261),RAdd(l_mult_329,RAdd(l_mult_330,l_mult_331))))))))))))))))))),RAdd(RMul(-0.12e2,l_prod_292),RAdd(RMul(0.76e2,l_prod_291),RAdd(l_mult_332,RAdd(RMul(0.64e2,l_prod_289),RAdd(l_mult_333,RAdd(RMul(-0.144e3,l_prod_286),RAdd(l_mult_334,RAdd(l_mult_312,RAdd(l_mult_297,RAdd(l_mult_335,RAdd(RMul(-0.144e3,l_prod_276),RAdd(l_mult_336,RAdd(l_mult_337,RAdd(l_mult_301,l_sum_315)))))))))))))),RAdd(l_mult_338,RAdd(RMul(-0.373333333333e2,l_prod_291),RAdd(RMul(0.746666666667e2,l_prod_290),RAdd(l_mult_319,RAdd(l_mult_339,RAdd(l_mult_340,RAdd(l_mult_341,RAdd(l_mult_342,RAdd(l_mult_343,l_mult_344))))))))))),RAdd(VDot<4,4>(v_235,VEC4(RAdd(RMul(0.16e2,l_prod_288),RAdd(l_mult_320,RAdd(RMul(0.96e2,l_prod_286),RAdd(l_mult_341,RAdd(RMul(-0.693333333333e2,l_prod_284),RAdd(RMul(0.192e3,l_prod_283),RAdd(l_mult_322,RAdd(RMul(0.96e2,l_prod_281),RAdd(l_mult_345,RAdd(l_mult_346,RAdd(l_mult_347,RAdd(l_mult_326,RAdd(l_mult_348,RAdd(RMul(0.192e3,l_prod_268),RAdd(l_mult_349,RAdd(l_mult_350,RAdd(RMul(0.96e2,l_prod_257),RAdd(l_mult_330,RAdd(l_mult_351,l_mult_352))))))))))))))))))),RAdd(RMul(-0.12e2,l_prod_288),RAdd(l_mult_333,RAdd(l_mult_311,RAdd(RMul(0.76e2,l_prod_284),RAdd(RMul(-0.144e3,l_prod_283),RAdd(l_mult_297,RAdd(l_mult_353,RAdd(l_mult_354,RAdd(RMul(0.64e2,l_prod_279),RAdd(l_mult_355,RAdd(l_mult_337,RAdd(RMul(-0.144e3,l_prod_268),RAdd(l_mult_302,RAdd(l_mult_356,l_sum_318)))))))))))))),RAdd(l_mult_357,RAdd(l_mult_339,RAdd(RMul(-0.373333333333e2,l_prod_284),RAdd(l_mult_358,RAdd(RMul(0.746666666667e2,l_prod_281),RAdd(l_mult_323,RAdd(l_mult_346,RAdd(l_mult_359,RAdd(l_mult_360,l_mult_361))))))))),RAdd(RMul(0.16e2,l_prod_278),RAdd(l_mult_324,RAdd(RMul(0.96e2,l_prod_276),RAdd(l_mult_344,RAdd(l_mult_347,RAdd(l_mult_326,RAdd(l_mult_348,RAdd(RMul(0.96e2,l_prod_268),RAdd(l_mult_328,RAdd(l_mult_361,RAdd(RMul(-0.693333333333e2,l_prod_262),RAdd(RMul(0.192e3,l_prod_261),RAdd(l_mult_329,RAdd(RMul(0.192e3,l_prod_257),RAdd(l_mult_362,RAdd(l_mult_351,RAdd(RMul(0.96e2,l_prod_251),RAdd(l_mult_363,RAdd(l_mult_364,l_mult_365))))))))))))))))))))),RAdd(VDot<4,4>(v_236,VEC4(RAdd(RMul(-0.12e2,l_prod_278),RAdd(l_mult_335,RAdd(l_mult_314,RAdd(l_mult_355,RAdd(l_mult_337,RAdd(l_mult_317,RAdd(RMul(0.76e2,l_prod_262),RAdd(RMul(-0.144e3,l_prod_261),RAdd(l_mult_304,RAdd(RMul(-0.144e3,l_prod_257),RAdd(l_mult_305,RAdd(l_mult_306,RAdd(l_mult_366,RAdd(l_mult_367,RAdd(l_mult_368,RMul(0.64e2,l_prod_246)))))))))))))))),RAdd(l_mult_369,RAdd(l_mult_342,RAdd(l_mult_359,RAdd(RMul(-0.373333333333e2,l_prod_262),RAdd(l_mult_370,RAdd(l_mult_371,RAdd(RMul(0.746666666667e2,l_prod_251),RAdd(l_mult_331,RAdd(l_mult_352,l_mult_365))))))))),RAdd(l_mult_337,l_mult_305),RAdd(l_mult_337,l_mult_302))),RAdd(VDot<4,4>(v_237,VEC4(RAdd(l_mult_337,l_mult_301),RAdd(RMul(0.96e2,l_prod_287),RAdd(RMul(-0.224e3,l_prod_286),RAdd(l_mult_334,RAdd(RMul(-0.224e3,l_prod_283),RAdd(RMul(0.256e3,l_prod_282),RAdd(l_mult_354,RAdd(l_mult_372,RAdd(l_mult_373,RAdd(l_mult_374,l_mult_305))))))))),RAdd(l_mult_375,RAdd(l_mult_340,RAdd(RMul(0.160e3,l_prod_283),RAdd(l_mult_322,RAdd(l_mult_345,RAdd(l_mult_376,l_mult_328)))))),RAdd(l_mult_375,RAdd(RMul(0.160e3,l_prod_286),RAdd(l_mult_321,RAdd(l_mult_358,RAdd(l_mult_322,RAdd(l_mult_376,l_mult_348)))))))),RAdd(VDot<4,4>(v_238,VEC4(RAdd(RMul(0.96e2,l_prod_277),RAdd(RMul(-0.224e3,l_prod_276),RAdd(l_mult_336,RAdd(l_mult_372,RAdd(l_mult_373,RAdd(l_mult_302,RAdd(RMul(-0.224e3,l_prod_261),RAdd(RMul(0.256e3,l_prod_260),RAdd(l_mult_377,l_mult_367))))))))),RAdd(l_mult_378,RAdd(l_mult_343,RAdd(l_mult_376,RAdd(RMul(0.160e3,l_prod_261),RAdd(l_mult_329,RAdd(l_mult_330,l_mult_363)))))),RAdd(l_mult_378,RAdd(RMul(0.160e3,l_prod_276),RAdd(l_mult_325,RAdd(l_mult_376,RAdd(l_mult_348,RAdd(l_mult_370,l_mult_329)))))),RAdd(RMul(0.96e2,l_prod_272),RAdd(l_mult_372,RAdd(l_mult_301,RAdd(RMul(-0.224e3,l_prod_268),RAdd(l_mult_374,RAdd(l_mult_356,RAdd(RMul(-0.224e3,l_prod_257),RAdd(l_mult_377,RAdd(RMul(0.256e3,l_prod_254),l_mult_368))))))))))),RAdd(VDot<3,4>(v_239,VEC3{4}(RAdd(l_mult_379,RAdd(l_mult_376,RAdd(l_mult_360,RAdd(RMul(0.160e3,l_prod_257),RAdd(l_mult_330,RAdd(l_mult_351,l_mult_364)))))),RAdd(l_mult_379,RAdd(l_mult_376,RAdd(RMul(0.160e3,l_prod_268),RAdd(l_mult_328,RAdd(l_mult_350,RAdd(l_mult_371,l_mult_351)))))),RAdd(l_mult_380,RAdd(l_mult_327,RAdd(l_mult_349,l_mult_362))))),VDot<4,4>(v_231,VEC4(RAdd(l_mult_294,RAdd(RMul(-0.833333333333e1,l_prod_292),RAdd(RMul(0.233333333333e2,l_prod_291),RAdd(RMul(-0.266666666667e2,l_prod_290),RAdd(l_mult_295,RAdd(RMul(-0.833333333333e1,l_prod_288),RAdd(RMul(0.466666666667e2,l_prod_287),RAdd(RMul(-0.80e2,l_prod_286),RAdd(l_mult_296,RAdd(RMul(0.233333333333e2,l_prod_284),RAdd(RMul(-0.80e2,l_prod_283),RAdd(l_mult_297,RAdd(RMul(-0.266666666667e2,l_prod_281),RAdd(l_mult_298,RAdd(l_mult_299,RAdd(RMul(-0.833333333333e1,l_prod_278),RAdd(RMul(0.466666666667e2,l_prod_277),RAdd(RMul(-0.80e2,l_prod_276),RAdd(l_mult_300,RAdd(RMul(0.466666666667e2,l_prod_272),RAdd(RMul(-0.160e3,l_prod_271),RAdd(l_mult_301,RAdd(RMul(-0.80e2,l_prod_268),RAdd(l_mult_302,RAdd(l_mult_303,RAdd(RMul(0.233333333333e2,l_prod_262),RAdd(RMul(-0.80e2,l_prod_261),RAdd(l_mult_304,RAdd(RMul(-0.80e2,l_prod_257),RAdd(l_mult_305,RAdd(l_mult_306,RAdd(RMul(-0.266666666667e2,l_prod_251),RAdd(l_mult_307,RAdd(l_mult_308,l_mult_309)))))))))))))))))))))))))))))))))),RAdd(RMul(-0.1e1,l_prod_278),RAdd(RMul(0.733333333333e1,l_prod_262),RAdd(RMul(-0.16e2,l_prod_251),l_mult_309))),RAdd(RMul(-0.1e1,l_prod_288),RAdd(RMul(0.733333333333e1,l_prod_284),RAdd(RMul(-0.16e2,l_prod_281),l_mult_299))),RAdd(RMul(-0.1e1,l_prod_292),RAdd(RMul(0.733333333333e1,l_prod_291),RAdd(RMul(-0.16e2,l_prod_290),l_mult_295)))))))))))));
      l_c_644 = LoadFem<femData(MeshCell)>(ExtractFem<femData(Mesh),femData(MeshPos)>(l_p_155),ExtractFemItem<int,CellIndex(MeshPos)>(l_p_155));
      v_645 = LOAD_0(TensorRef<[3]>(ExtractFemItem<tensor[3],RefPos(MeshPos)>(l_p_155)));
    } else {
      print("Warning: Invalid!\n");
      v_642 = LOAD_0(TensorRef<[3]>(self.gradResult));
      l_compositionl_643 = self.result;
      l_c_644 = self.c;
      v_645 = LOAD_0(TensorRef<[3]>(self.translated));
    }
    self.translated = PACK(v_645);
    self.valid = l_valid_156;
    self.c = l_c_644;
    self.result = l_compositionl_643;
    self.gradResult = PACK(v_642);
    stabilize;
  }
}
//***** CREATE COLLECTION *****
  {
    foreach &tensor[3] i_i_648 in globals.points {
      new gg(i_i_648);
    }
  }
#### end program ####
/usr/bin/clang++ -fPIC -m64 -c -Wreturn-type -Wuninitialized -g -O0 -mavx2 -msse4.2 -I/home/teocollin/gitcode/diderot/include -I/usr/local/include evalProg.cxx
/usr/bin/clang++ -shared -o evalProg.so evalProg.o /home/teocollin/gitcode/diderot/lib/diderot-rt-seq-debug.o -Wl,-rpath=/usr/local/lib -L/usr/local/lib -lteem  -lspatialindex_c   -lspatialindex 
                                       Phase                                         Exclusive    Total  
  compiler ..........................................................................   0.050     2.535
    front end .......................................................................   0.309     0.379
      parser ........................................................................   0.007     0.007
      typechecker ...................................................................   0.063     0.063
      simplify ......................................................................   0.000     0.000
    translate .......................................................................   0.002     0.002
    High IR optimization ............................................................   0.018     0.715
      High IR value numbering .......................................................   0.006     0.006
      High IR normalization .........................................................   0.691     0.691
      High IR checking ..............................................................   0.000     0.000
    High to Mid translation .........................................................   0.023     0.023
    Mid IR optimization .............................................................   0.009     0.016
      Mid IR contraction ............................................................   0.001     0.001
      Mid IR value numbering ........................................................   0.005     0.005
      Mid IR border control .........................................................   0.001     0.001
      Mid IR checking ...............................................................   0.000     0.000
    Mid to Low translation ..........................................................   0.083     0.083
    Low IR optimization .............................................................   0.080     0.184
      Low IR contraction ............................................................   0.041     0.041
      Low IR value numbering ........................................................   0.062     0.062
      Low IR checking ...............................................................   0.000     0.000
    Low to Tree translation .........................................................   0.055     0.055
    Tree IR optimization ............................................................   0.006     0.007
      Tree IR contraction ...........................................................   0.001     0.001
      Tree IR checking ..............................................................   0.000     0.000
    code generation .................................................................   0.029     1.021
      C compiler ....................................................................   0.992     0.992
