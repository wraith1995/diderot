New:
=================
FemOpts are in disarray and need docs:
**Go through and document their use and locations
**Clean up
**Notice: DUMB Seq vs. tensor debate again. Needs to be cleaned up, but recall why T vs T^-1 represented
**Notice above: ^ Needs cleaning: should be ExtractDofs -> ExtractDofsSeq, ExtractIndecies - ExtractDof, ExtractIndex
**Notice above: enable vectorization too.
**Notice: Valid should die - clean up Pos builds
**Notice: CellData stays

Exact:Dofs issue as above
Exact:Valid
Exact:All builds - investigate though

==================
Basis access needed:
**Translate and document here.
=======================
Top level require smartter wrapping:
**Alwalys have an inline able function unpack and unwrap for base functions
==========================
Hoare logic:
**Translate all fem opts and fem data besides base to baser operations - make easier to do checks for the field
** See other file
**Should accomplish full fem scalariziation modulo big types

(BY TOMORROOW)
===================
Top level requires some new operators:
**Check on face, edge, vertex detector
**Swap
**Robus intersection detector
**Provide class methods for T, DT, DT^-1, etc with noinline propery
**Provide bounding box for facet, global intersect spat, local global inersect spat -- defaults could be provided - see spattodo
**Allow use of class methods in above
**Document json/c copy -> if nrrd added could add more
**Reorganization of common inserts (NearbyCell, InsideInsert)
(SUNDAY JOB???)
==========================
Accomodate field language
--inverse optimizations
--force inverse optimization
--Allow position evaluation
--make inside use correct diagnostic (valid, meshpos, etc)
--Order inside with above
===========================
Affine, interval, bspline (see below)
========================
Tuple:
**invetigate ref tuple for input passing
**simplifly interface
**Add general scalirzation optimizations
**Check snapshots
**Parsing
========================
Caches:
-Consider instruction level/thread level cache for:
--cells
--Dofs (defeat out of order stuff)
--certain situations to override the cache?
===========================
Basis function structure parsing and Basis SSA check.
--e.g. oplus, otimes, +.
====================
Sphere bug:
curent _pos rewrite doesn't commute with sphere(a,b)
(Or at least it doesn't if another sphere isn't there too)
====================
Merge in Chiw branch for field funcs
=====================
BIG FEM IO FIX
================


OLD
====================
Precdence fixing:
-select should be a deepest level
--Atomic Expr should feature .selec - remove from suffix
====================
Equality checking bug:
Is the SSA thing really working? I have some doubts...
=====================
Delayed evaluation and composition with functions:
-We need a mechanism that compose swith FEM so that we can go between derivatives w.r.t to reference and w.r.t. to world
-Something like T^{*}F = F(T(x)), but we want T^{*}(DF) -> same as composition
---F = A \circ B^-1
---G = DF
---H = G \circ B //remove internal B^-1 !!!
---DH //future derivative doesn't add extra B^-1 term -- but does affect (DB)^-1 terms.

-Impl notes: Roughly like this....
--So we want T\circ T^-1 to happen -> idea is if you detect this in the inner thing - cancel and replace with one that only affects the deriative
--if you have |_ -> replace and then kill derivative after applying the ones around htis.
--so if I have P(D) (P(D)(F\ circ T^-1) |_{ T}) -> we stop replacing the derivative of P(D)
--General allow functions in the field language
Better TT^-1 cancelling (relates highly to the above.)
--Capture TT^-1 and opposite - cancel them
--Done at simple-ir -> sometimes replace with no derivative version if there is a derivative being taken. (See above)
--Idea: cancel out these, but still allow world space and regular space derivatives.
--add potential cell/mesh checks (See other section)
AD LIKE Related to above: Look at Chiw and think about functions in the field language vs. fields in the function language.
-Merge in Chiw's branch
-allow functions to have specified derivatives (field valued or maybe not)
-allows recovery
-Maybe look at exposing ImgToWorld/ImgCell/Positions on images.
=========================
==========================
Tuple + FEM + Type one item
--When this should occur in relation to pos semantics
--When this should occur in relation to other optimizations
e--scalarization relation
=========================
Pos lazyness/caching
--local rewrites to make CSE more likely/to continue to grab global results
--a sort of sub-typing maybe
===========================
Better Geometry and Bound box access:
-Would be useful to access bounding box at high level
-Would be useful to access simplexization of cell
-Would be useful to access distance functions/indicators
-Would be useful to access kernel fields
-Fix non-linear cell intersection - I don't think the C code intersections work
-Allow a default non-linear cell intersection algorithim - (would help if affine was around)
=============================
Allow a basis dump would be nice.
=============================
Affine SSA transformation
--affine keyword
--propogation until SSA level
--replace with new operators (vector min/max)
--Policy settomg
--function cooperation/insertion into field language
=============================
