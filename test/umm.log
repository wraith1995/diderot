/* ParseTree: After parsing */
  Program @ [test/umm.diderot:3.1-138.0] 
    [
      Type: quat= @ [test/umm.diderot:3.1-4.0] 
        Tensor @ [test/umm.diderot:3.6-15] 
          [
            Lit: 4 @ [test/umm.diderot:3.13-14] 
          ]
      Type: hmm= @ [test/umm.diderot:4.1-5.0] 
        Seq @ [test/umm.diderot:4.6-14] 
          Id: quat @ [test/umm.diderot:4.6-14] 
          Lit: 4 @ [test/umm.diderot:4.11-12] 
      Var @ [test/umm.diderot:7.1-8.0] 
        Decl: q0= @ [test/umm.diderot:7.1-8.0] 
          Apply @ [test/umm.diderot:7.11-26] 
            Var: quat @ [test/umm.diderot:7.11-15] 
            [
              Cons @ [test/umm.diderot:7.16-25] 
                [
                  Lit: 4 @ [test/umm.diderot:7.17-18] 
                  Lit: 3 @ [test/umm.diderot:7.19-20] 
                  Lit: 2 @ [test/umm.diderot:7.21-22] 
                  Lit: 1 @ [test/umm.diderot:7.23-24] 
                ]
            ]
      Var @ [test/umm.diderot:8.1-9.0] 
        Decl: q1= @ [test/umm.diderot:8.1-9.0] 
          Apply @ [test/umm.diderot:8.11-26] 
            Var: quat @ [test/umm.diderot:8.11-15] 
            [
              Cons @ [test/umm.diderot:8.16-25] 
                [
                  Lit: 1 @ [test/umm.diderot:8.17-18] 
                  Lit: 2 @ [test/umm.diderot:8.19-20] 
                  Lit: 3 @ [test/umm.diderot:8.21-22] 
                  Lit: 1 @ [test/umm.diderot:8.23-24] 
                ]
            ]
      Func: rand @ [test/umm.diderot:10.1-19.1] 
        Tensor @ [test/umm.diderot:10.10-16] 
          [ ]
        [
          Param: a @ [test/umm.diderot:10.22-33] 
            Tensor @ [test/umm.diderot:10.22-31] 
              [
                Lit: 5 @ [test/umm.diderot:10.29-30] 
              ]
        ]
        Stmt @ [test/umm.diderot:10.1-19.1] 
          Block @ [test/umm.diderot:10.34-17.0] 
            [
              Decl @ [test/umm.diderot:10.34-17.0] 
                Decl: z= @ [test/umm.diderot:11.3-12.0] 
                  Lit: 2 @ [test/umm.diderot:11.12-13] 
              Foreach @ [test/umm.diderot:12.3-15.0] 
                Int @ [test/umm.diderot:12.12-16] 
                Iterator: j @ [test/umm.diderot:12.16-25] 
                  Range @ [test/umm.diderot:12.21-25] 
                    Lit: 0 @ [test/umm.diderot:12.21-22] 
                    Lit: 5 @ [test/umm.diderot:12.24-25] 
                Assign: z+= @ [test/umm.diderot:13.5-14.0] 
                  BinOp: + @ [test/umm.diderot:13.8-13] 
                    UnaryOp: |()| @ [test/umm.diderot:13.8-11] 
                      Var: a @ [test/umm.diderot:13.9-10] 
                    Var: j @ [test/umm.diderot:13.12-13] 
              Return @ [test/umm.diderot:15.3-16.0] 
                Var: z @ [test/umm.diderot:15.10-11] 
            ]
      Overloading Operator: + @ [test/umm.diderot:19.1-27.1] 
        Id: quat @ [test/umm.diderot:19.10-15] 
        [
          Param: x @ [test/umm.diderot:19.19-25] 
            Id: quat @ [test/umm.diderot:19.19-24] 
          Param: y @ [test/umm.diderot:19.27-33] 
            Id: quat @ [test/umm.diderot:19.27-32] 
        ]
        Stmt @ [test/umm.diderot:19.1-27.1] 
          Block @ [test/umm.diderot:19.34-26.0] 
            [
              Decl @ [test/umm.diderot:19.34-26.0] 
                Decl: result= @ [test/umm.diderot:21.3-22.0] 
                  Apply @ [test/umm.diderot:21.17-46] 
                    Var: quat @ [test/umm.diderot:21.17-21] 
                    [
                      BinOp: + @ [test/umm.diderot:21.22-45] 
                        Apply @ [test/umm.diderot:21.22-32] 
                          Select @ [test/umm.diderot:21.22-32] 
                            Var: x @ [test/umm.diderot:21.22-23] 
                            unpack
                          [ ]
                        Apply @ [test/umm.diderot:21.35-45] 
                          Select @ [test/umm.diderot:21.35-45] 
                            Var: y @ [test/umm.diderot:21.35-36] 
                            unpack
                          [ ]
                    ]
              Return @ [test/umm.diderot:24.3-25.0] 
                Var: result @ [test/umm.diderot:24.10-16] 
            ]
      Overloading Operator: - @ [test/umm.diderot:27.1-31.1] 
        Id: quat @ [test/umm.diderot:27.10-15] 
        [
          Param: x @ [test/umm.diderot:27.19-25] 
            Id: quat @ [test/umm.diderot:27.19-24] 
          Param: y @ [test/umm.diderot:27.27-33] 
            Id: quat @ [test/umm.diderot:27.27-32] 
        ]
        Stmt @ [test/umm.diderot:27.1-31.1] 
          Block @ [test/umm.diderot:27.34-31.0] 
            [
              Decl @ [test/umm.diderot:27.34-31.0] 
                Decl: result= @ [test/umm.diderot:28.3-29.0] 
                  Apply @ [test/umm.diderot:28.17-46] 
                    Var: quat @ [test/umm.diderot:28.17-21] 
                    [
                      BinOp: - @ [test/umm.diderot:28.22-45] 
                        Apply @ [test/umm.diderot:28.22-32] 
                          Select @ [test/umm.diderot:28.22-32] 
                            Var: x @ [test/umm.diderot:28.22-23] 
                            unpack
                          [ ]
                        Apply @ [test/umm.diderot:28.35-45] 
                          Select @ [test/umm.diderot:28.35-45] 
                            Var: y @ [test/umm.diderot:28.35-36] 
                            unpack
                          [ ]
                    ]
              Return @ [test/umm.diderot:29.3-30.0] 
                Var: result @ [test/umm.diderot:29.10-16] 
            ]
      Overloading Operator: - @ [test/umm.diderot:31.1-37.1] 
        Id: quat @ [test/umm.diderot:31.10-15] 
        [
          Param: x @ [test/umm.diderot:31.19-25] 
            Id: quat @ [test/umm.diderot:31.19-24] 
        ]
        Stmt @ [test/umm.diderot:31.1-37.1] 
          Block @ [test/umm.diderot:31.26-35.0] 
            [
              Decl @ [test/umm.diderot:31.26-35.0] 
                Decl: result= @ [test/umm.diderot:32.3-33.0] 
                  Apply @ [test/umm.diderot:32.17-43] 
                    Var: quat @ [test/umm.diderot:32.17-21] 
                    [
                      BinOp: - @ [test/umm.diderot:32.22-42] 
                        Cons @ [test/umm.diderot:32.22-31] 
                          [
                            Lit: 0 @ [test/umm.diderot:32.23-24] 
                            Lit: 0 @ [test/umm.diderot:32.25-26] 
                            Lit: 0 @ [test/umm.diderot:32.27-28] 
                            Lit: 0 @ [test/umm.diderot:32.29-30] 
                          ]
                        Apply @ [test/umm.diderot:32.32-42] 
                          Select @ [test/umm.diderot:32.32-42] 
                            Var: x @ [test/umm.diderot:32.32-33] 
                            unpack
                          [ ]
                    ]
              Return @ [test/umm.diderot:33.3-34.0] 
                Var: result @ [test/umm.diderot:33.10-16] 
            ]
      Overloading Operator: • @ [test/umm.diderot:37.1-42.1] 
        Tensor @ [test/umm.diderot:37.10-15] 
          [ ]
        [
          Param: x @ [test/umm.diderot:37.21-27] 
            Id: quat @ [test/umm.diderot:37.21-26] 
          Param: y @ [test/umm.diderot:37.29-35] 
            Id: quat @ [test/umm.diderot:37.29-34] 
        ]
        Stmt @ [test/umm.diderot:37.1-42.1] 
          Block @ [test/umm.diderot:37.36-41.0] 
            [
              Decl @ [test/umm.diderot:37.36-41.0] 
                Decl: result= @ [test/umm.diderot:38.3-39.0] 
                  BinOp: • @ [test/umm.diderot:38.17-42] 
                    Apply @ [test/umm.diderot:38.17-27] 
                      Select @ [test/umm.diderot:38.17-27] 
                        Var: x @ [test/umm.diderot:38.17-18] 
                        unpack
                      [ ]
                    Apply @ [test/umm.diderot:38.32-42] 
                      Select @ [test/umm.diderot:38.32-42] 
                        Var: y @ [test/umm.diderot:38.32-33] 
                        unpack
                      [ ]
              Return @ [test/umm.diderot:39.3-40.0] 
                Var: result @ [test/umm.diderot:39.10-16] 
            ]
      Overloading Operator: * @ [test/umm.diderot:42.1-43.1] 
        Id: quat @ [test/umm.diderot:42.10-15] 
        [
          Param: x @ [test/umm.diderot:42.19-25] 
            Id: quat @ [test/umm.diderot:42.19-24] 
          Param: y @ [test/umm.diderot:42.27-33] 
            Tensor @ [test/umm.diderot:42.27-32] 
              [ ]
        ]
        Stmt @ [test/umm.diderot:42.1-43.1] 
          Return @ [test/umm.diderot:42.36-64] 
            Apply @ [test/umm.diderot:42.43-63] 
              Var: quat @ [test/umm.diderot:42.43-47] 
              [
                BinOp: * @ [test/umm.diderot:42.48-62] 
                  Var: y @ [test/umm.diderot:42.48-49] 
                  Apply @ [test/umm.diderot:42.52-62] 
                    Select @ [test/umm.diderot:42.52-62] 
                      Var: x @ [test/umm.diderot:42.52-53] 
                      unpack
                    [ ]
              ]
      Overloading Operator: * @ [test/umm.diderot:43.1-45.1] 
        Id: quat @ [test/umm.diderot:43.10-15] 
        [
          Param: y @ [test/umm.diderot:43.19-25] 
            Tensor @ [test/umm.diderot:43.19-24] 
              [ ]
          Param: x @ [test/umm.diderot:43.27-33] 
            Id: quat @ [test/umm.diderot:43.27-32] 
        ]
        Stmt @ [test/umm.diderot:43.1-45.1] 
          Return @ [test/umm.diderot:43.36-64] 
            Apply @ [test/umm.diderot:43.43-63] 
              Var: quat @ [test/umm.diderot:43.43-47] 
              [
                BinOp: * @ [test/umm.diderot:43.48-62] 
                  Var: y @ [test/umm.diderot:43.48-49] 
                  Apply @ [test/umm.diderot:43.52-62] 
                    Select @ [test/umm.diderot:43.52-62] 
                      Var: x @ [test/umm.diderot:43.52-53] 
                      unpack
                    [ ]
              ]
      Func: conj @ [test/umm.diderot:45.1-56.1] 
        Id: quat @ [test/umm.diderot:45.10-15] 
        [
          Param: x0 @ [test/umm.diderot:45.20-27] 
            Id: quat @ [test/umm.diderot:45.20-25] 
        ]
        Stmt @ [test/umm.diderot:45.1-56.1] 
          Block @ [test/umm.diderot:45.28-49.0] 
            [
              Decl @ [test/umm.diderot:45.28-49.0] 
                Decl: x= @ [test/umm.diderot:46.3-47.0] 
                  Apply @ [test/umm.diderot:46.17-28] 
                    Select @ [test/umm.diderot:46.17-28] 
                      Var: x0 @ [test/umm.diderot:46.17-19] 
                      unpack
                    [ ]
              Return @ [test/umm.diderot:47.3-48.0] 
                Apply @ [test/umm.diderot:47.10-43] 
                  Var: quat @ [test/umm.diderot:47.10-14] 
                  [
                    Cons @ [test/umm.diderot:47.15-42] 
                      [
                        Subscript @ [test/umm.diderot:47.16-20] 
                          Var: x @ [test/umm.diderot:47.16-17] 
                          [
                            Lit: 0 @ [test/umm.diderot:47.18-19] 
                          ]
                        UnaryOp: unary - @ [test/umm.diderot:47.22-27] 
                          Subscript @ [test/umm.diderot:47.23-27] 
                            Var: x @ [test/umm.diderot:47.23-24] 
                            [
                              Lit: 1 @ [test/umm.diderot:47.25-26] 
                            ]
                        UnaryOp: unary - @ [test/umm.diderot:47.29-34] 
                          Subscript @ [test/umm.diderot:47.30-34] 
                            Var: x @ [test/umm.diderot:47.30-31] 
                            [
                              Lit: 2 @ [test/umm.diderot:47.32-33] 
                            ]
                        UnaryOp: unary - @ [test/umm.diderot:47.36-41] 
                          Subscript @ [test/umm.diderot:47.37-41] 
                            Var: x @ [test/umm.diderot:47.37-38] 
                            [
                              Lit: 3 @ [test/umm.diderot:47.39-40] 
                            ]
                      ]
                  ]
            ]
      Func: oreintDist @ [test/umm.diderot:56.1-70.1] 
        Tensor @ [test/umm.diderot:56.10-15] 
          [ ]
        [
          Param: x @ [test/umm.diderot:56.27-33] 
            Id: quat @ [test/umm.diderot:56.27-32] 
          Param: y @ [test/umm.diderot:56.35-41] 
            Id: quat @ [test/umm.diderot:56.35-40] 
        ]
        Stmt @ [test/umm.diderot:56.1-70.1] 
          Block @ [test/umm.diderot:56.42-62.0] 
            [
              Decl @ [test/umm.diderot:56.42-62.0] 
                Decl: x0= @ [test/umm.diderot:58.3-59.0] 
                  BinOp: * @ [test/umm.diderot:58.13-35] 
                    Var: x @ [test/umm.diderot:58.13-14] 
                    BinOp: / @ [test/umm.diderot:58.18-34] 
                      Lit: 1 @ [test/umm.diderot:58.18-19] 
                      Apply @ [test/umm.diderot:58.20-34] 
                        Var: sqrt @ [test/umm.diderot:58.20-24] 
                        [
                          BinOp: • @ [test/umm.diderot:58.25-33] 
                            Var: x @ [test/umm.diderot:58.25-26] 
                            Var: x @ [test/umm.diderot:58.31-32] 
                        ]
              Decl @ [test/umm.diderot:56.42-62.0] 
                Decl: y0= @ [test/umm.diderot:59.3-60.0] 
                  BinOp: * @ [test/umm.diderot:59.13-35] 
                    Var: y @ [test/umm.diderot:59.13-14] 
                    BinOp: / @ [test/umm.diderot:59.18-34] 
                      Lit: 1 @ [test/umm.diderot:59.18-19] 
                      Apply @ [test/umm.diderot:59.20-34] 
                        Var: sqrt @ [test/umm.diderot:59.20-24] 
                        [
                          BinOp: • @ [test/umm.diderot:59.25-33] 
                            Var: y @ [test/umm.diderot:59.25-26] 
                            Var: y @ [test/umm.diderot:59.31-32] 
                        ]
              Return @ [test/umm.diderot:60.3-29] 
                BinOp: - @ [test/umm.diderot:60.10-28] 
                  Lit: 1 @ [test/umm.diderot:60.10-11] 
                  BinOp: ^ @ [test/umm.diderot:60.14-28] 
                    BinOp: • @ [test/umm.diderot:60.15-25] 
                      Var: x0 @ [test/umm.diderot:60.15-17] 
                      Var: y0 @ [test/umm.diderot:60.22-24] 
                    Lit: 2 @ [test/umm.diderot:60.27-28] 
            ]
      Func: sinOverX @ [test/umm.diderot:70.1-71.0] 
        Tensor @ [test/umm.diderot:70.10-15] 
          [ ]
        [
          Param: ang @ [test/umm.diderot:70.24-32] 
            Tensor @ [test/umm.diderot:70.24-29] 
              [ ]
        ]
        Expr @ [test/umm.diderot:70.1-71.0] 
          Cond @ [test/umm.diderot:70.37-76] 
            Lit: 1 @ [test/umm.diderot:70.37-38] 
            BinOp: == @ [test/umm.diderot:70.42-59] 
              BinOp: + @ [test/umm.diderot:70.42-54] 
                BinOp: * @ [test/umm.diderot:70.42-50] 
                  Var: ang @ [test/umm.diderot:70.42-45] 
                  Var: ang @ [test/umm.diderot:70.46-49] 
                Lit: 1 @ [test/umm.diderot:70.52-53] 
              Lit: 1 @ [test/umm.diderot:70.57-58] 
            BinOp: / @ [test/umm.diderot:70.64-76] 
              Apply @ [test/umm.diderot:70.64-72] 
                Var: sin @ [test/umm.diderot:70.64-67] 
                [
                  Var: ang @ [test/umm.diderot:70.68-71] 
                ]
              Var: ang @ [test/umm.diderot:70.73-76] 
      Func: angBet @ [test/umm.diderot:71.1-86.1] 
        Tensor @ [test/umm.diderot:71.10-15] 
          [ ]
        [
          Param: x @ [test/umm.diderot:71.22-28] 
            Id: quat @ [test/umm.diderot:71.22-27] 
          Param: y @ [test/umm.diderot:71.30-36] 
            Id: quat @ [test/umm.diderot:71.30-35] 
        ]
        Stmt @ [test/umm.diderot:71.1-86.1] 
          Block @ [test/umm.diderot:71.38-82.0] 
            [
              Decl @ [test/umm.diderot:71.38-82.0] 
                Decl: dot= @ [test/umm.diderot:72.3-73.0] 
                  BinOp: • @ [test/umm.diderot:72.14-21] 
                    Var: x @ [test/umm.diderot:72.14-15] 
                    Var: y @ [test/umm.diderot:72.20-21] 
              IfThenElse @ [test/umm.diderot:73.3-81.0] 
                BinOp: < @ [test/umm.diderot:73.7-14] 
                  Var: dot @ [test/umm.diderot:73.7-10] 
                  Lit: 0 @ [test/umm.diderot:73.13-14] 
                Block @ [test/umm.diderot:73.15-77.0] 
                  [
                    Decl @ [test/umm.diderot:73.15-77.0] 
                      Decl: arc= @ [test/umm.diderot:74.5-75.0] 
                        BinOp: / @ [test/umm.diderot:74.16-42] 
                          Apply @ [test/umm.diderot:74.16-40] 
                            Var: sqrt @ [test/umm.diderot:74.16-20] 
                            [
                              BinOp: • @ [test/umm.diderot:74.21-39] 
                                BinOp: - @ [test/umm.diderot:74.22-26] 
                                  UnaryOp: unary - @ [test/umm.diderot:74.22-24] 
                                    Var: x @ [test/umm.diderot:74.23-24] 
                                  Var: y @ [test/umm.diderot:74.25-26] 
                                BinOp: - @ [test/umm.diderot:74.33-38] 
                                  UnaryOp: unary - @ [test/umm.diderot:74.33-35] 
                                    Var: x @ [test/umm.diderot:74.34-35] 
                                  Var: y @ [test/umm.diderot:74.36-37] 
                            ]
                          Lit: 2 @ [test/umm.diderot:74.41-42] 
                    Return @ [test/umm.diderot:75.5-76.0] 
                      BinOp: - @ [test/umm.diderot:75.12-30] 
                        Lit: 0.314159265358979323846264338327950288e1 @ [test/umm.diderot:75.12-14] 
                        BinOp: * @ [test/umm.diderot:75.17-30] 
                          Lit: 2 @ [test/umm.diderot:75.17-18] 
                          Apply @ [test/umm.diderot:75.21-30] 
                            Var: asin @ [test/umm.diderot:75.21-25] 
                            [
                              Var: arc @ [test/umm.diderot:75.26-29] 
                            ]
                  ]
                Block @ [test/umm.diderot:77.7-81.0] 
                  [
                    Decl @ [test/umm.diderot:77.7-81.0] 
                      Decl: arc= @ [test/umm.diderot:78.5-79.0] 
                        BinOp: / @ [test/umm.diderot:78.16-40] 
                          Apply @ [test/umm.diderot:78.16-38] 
                            Var: sqrt @ [test/umm.diderot:78.16-20] 
                            [
                              BinOp: • @ [test/umm.diderot:78.21-37] 
                                BinOp: - @ [test/umm.diderot:78.22-25] 
                                  Var: x @ [test/umm.diderot:78.22-23] 
                                  Var: y @ [test/umm.diderot:78.24-25] 
                                BinOp: - @ [test/umm.diderot:78.32-36] 
                                  Var: x @ [test/umm.diderot:78.32-33] 
                                  Var: y @ [test/umm.diderot:78.34-35] 
                            ]
                          Lit: 2 @ [test/umm.diderot:78.39-40] 
                    Return @ [test/umm.diderot:79.5-80.0] 
                      BinOp: * @ [test/umm.diderot:79.12-25] 
                        Lit: 2 @ [test/umm.diderot:79.12-13] 
                        Apply @ [test/umm.diderot:79.16-25] 
                          Var: asin @ [test/umm.diderot:79.16-20] 
                          [
                            Var: arc @ [test/umm.diderot:79.21-24] 
                          ]
                  ]
            ]
      Func: slerp @ [test/umm.diderot:86.1-97.1] 
        Id: quat @ [test/umm.diderot:86.10-15] 
        [
          Param: x0 @ [test/umm.diderot:86.22-29] 
            Id: quat @ [test/umm.diderot:86.22-27] 
          Param: y0 @ [test/umm.diderot:86.31-38] 
            Id: quat @ [test/umm.diderot:86.31-36] 
          Param: t @ [test/umm.diderot:86.40-46] 
            Tensor @ [test/umm.diderot:86.40-45] 
              [ ]
        ]
        Stmt @ [test/umm.diderot:86.1-97.1] 
          Block @ [test/umm.diderot:86.47-93.0] 
            [
              Decl @ [test/umm.diderot:86.47-93.0] 
                Decl: x= @ [test/umm.diderot:87.3-88.0] 
                  BinOp: * @ [test/umm.diderot:87.12-37] 
                    Var: x0 @ [test/umm.diderot:87.12-14] 
                    BinOp: / @ [test/umm.diderot:87.18-36] 
                      Lit: 1 @ [test/umm.diderot:87.18-19] 
                      Apply @ [test/umm.diderot:87.20-36] 
                        Var: sqrt @ [test/umm.diderot:87.20-24] 
                        [
                          BinOp: • @ [test/umm.diderot:87.25-35] 
                            Var: x0 @ [test/umm.diderot:87.25-27] 
                            Var: x0 @ [test/umm.diderot:87.32-34] 
                        ]
              Decl @ [test/umm.diderot:86.47-93.0] 
                Decl: y= @ [test/umm.diderot:88.3-89.0] 
                  BinOp: * @ [test/umm.diderot:88.12-37] 
                    Var: y0 @ [test/umm.diderot:88.12-14] 
                    BinOp: / @ [test/umm.diderot:88.18-36] 
                      Lit: 1 @ [test/umm.diderot:88.18-19] 
                      Apply @ [test/umm.diderot:88.20-36] 
                        Var: sqrt @ [test/umm.diderot:88.20-24] 
                        [
                          BinOp: • @ [test/umm.diderot:88.25-35] 
                            Var: y0 @ [test/umm.diderot:88.25-27] 
                            Var: y0 @ [test/umm.diderot:88.32-34] 
                        ]
              Decl @ [test/umm.diderot:86.47-93.0] 
                Decl: ang= @ [test/umm.diderot:89.3-90.0] 
                  Apply @ [test/umm.diderot:89.14-25] 
                    Var: angBet @ [test/umm.diderot:89.14-20] 
                    [
                      Var: x @ [test/umm.diderot:89.21-22] 
                      Var: y @ [test/umm.diderot:89.23-24] 
                    ]
              Decl @ [test/umm.diderot:86.47-93.0] 
                Decl: result= @ [test/umm.diderot:90.3-91.0] 
                  BinOp: + @ [test/umm.diderot:90.17-107] 
                    BinOp: * @ [test/umm.diderot:90.17-67] 
                      BinOp: * @ [test/umm.diderot:90.17-59] 
                        Var: x @ [test/umm.diderot:90.17-18] 
                        BinOp: / @ [test/umm.diderot:90.22-57] 
                          Apply @ [test/umm.diderot:90.22-43] 
                            Var: sinOverX @ [test/umm.diderot:90.22-30] 
                            [
                              BinOp: * @ [test/umm.diderot:90.31-42] 
                                BinOp: - @ [test/umm.diderot:90.32-35] 
                                  Lit: 1 @ [test/umm.diderot:90.32-33] 
                                  Var: t @ [test/umm.diderot:90.34-35] 
                                Var: ang @ [test/umm.diderot:90.39-42] 
                            ]
                          Apply @ [test/umm.diderot:90.44-57] 
                            Var: sinOverX @ [test/umm.diderot:90.44-52] 
                            [
                              Var: ang @ [test/umm.diderot:90.53-56] 
                            ]
                      BinOp: - @ [test/umm.diderot:90.62-65] 
                        Lit: 1 @ [test/umm.diderot:90.62-63] 
                        Var: t @ [test/umm.diderot:90.64-65] 
                    BinOp: * @ [test/umm.diderot:90.69-107] 
                      BinOp: * @ [test/umm.diderot:90.69-105] 
                        Var: y @ [test/umm.diderot:90.69-70] 
                        BinOp: / @ [test/umm.diderot:90.74-103] 
                          Apply @ [test/umm.diderot:90.74-89] 
                            Var: sinOverX @ [test/umm.diderot:90.74-82] 
                            [
                              BinOp: * @ [test/umm.diderot:90.83-88] 
                                Var: t @ [test/umm.diderot:90.83-84] 
                                Var: ang @ [test/umm.diderot:90.85-88] 
                            ]
                          Apply @ [test/umm.diderot:90.90-103] 
                            Var: sinOverX @ [test/umm.diderot:90.90-98] 
                            [
                              Var: ang @ [test/umm.diderot:90.99-102] 
                            ]
                      Var: t @ [test/umm.diderot:90.106-107] 
              Return @ [test/umm.diderot:91.3-92.0] 
                Var: result @ [test/umm.diderot:91.10-16] 
            ]
      Overloading Operator: * @ [test/umm.diderot:97.1-108.1] 
        Id: quat @ [test/umm.diderot:97.10-15] 
        [
          Param: x0 @ [test/umm.diderot:97.19-26] 
            Id: quat @ [test/umm.diderot:97.19-24] 
          Param: y0 @ [test/umm.diderot:97.28-35] 
            Id: quat @ [test/umm.diderot:97.28-33] 
        ]
        Stmt @ [test/umm.diderot:97.1-108.1] 
          Block @ [test/umm.diderot:97.36-106.0] 
            [
              Decl @ [test/umm.diderot:97.36-106.0] 
                Decl: x= @ [test/umm.diderot:98.3-99.0] 
                  Apply @ [test/umm.diderot:98.17-28] 
                    Select @ [test/umm.diderot:98.17-28] 
                      Var: x0 @ [test/umm.diderot:98.17-19] 
                      unpack
                    [ ]
              Decl @ [test/umm.diderot:97.36-106.0] 
                Decl: y= @ [test/umm.diderot:99.3-100.0] 
                  Apply @ [test/umm.diderot:99.17-28] 
                    Select @ [test/umm.diderot:99.17-28] 
                      Var: y0 @ [test/umm.diderot:99.17-19] 
                      unpack
                    [ ]
              Decl @ [test/umm.diderot:97.36-106.0] 
                Decl: result= @ [test/umm.diderot:100.3-104.0] 
                  Apply @ [test/umm.diderot:100.17-103.56] 
                    Var: quat @ [test/umm.diderot:100.17-21] 
                    [
                      Cons @ [test/umm.diderot:100.22-103.55] 
                        [
                          BinOp: - @ [test/umm.diderot:100.23-68] 
                            BinOp: - @ [test/umm.diderot:100.23-57] 
                              BinOp: - @ [test/umm.diderot:100.23-45] 
                                BinOp: * @ [test/umm.diderot:100.23-33] 
                                  Subscript @ [test/umm.diderot:100.23-27] 
                                    Var: x @ [test/umm.diderot:100.23-24] 
                                    [
                                      Lit: 0 @ [test/umm.diderot:100.25-26] 
                                    ]
                                  Subscript @ [test/umm.diderot:100.28-32] 
                                    Var: y @ [test/umm.diderot:100.28-29] 
                                    [
                                      Lit: 0 @ [test/umm.diderot:100.30-31] 
                                    ]
                                BinOp: * @ [test/umm.diderot:100.35-45] 
                                  Subscript @ [test/umm.diderot:100.35-39] 
                                    Var: x @ [test/umm.diderot:100.35-36] 
                                    [
                                      Lit: 1 @ [test/umm.diderot:100.37-38] 
                                    ]
                                  Subscript @ [test/umm.diderot:100.40-44] 
                                    Var: y @ [test/umm.diderot:100.40-41] 
                                    [
                                      Lit: 1 @ [test/umm.diderot:100.42-43] 
                                    ]
                              BinOp: * @ [test/umm.diderot:100.47-57] 
                                Subscript @ [test/umm.diderot:100.47-51] 
                                  Var: x @ [test/umm.diderot:100.47-48] 
                                  [
                                    Lit: 2 @ [test/umm.diderot:100.49-50] 
                                  ]
                                Subscript @ [test/umm.diderot:100.52-56] 
                                  Var: y @ [test/umm.diderot:100.52-53] 
                                  [
                                    Lit: 2 @ [test/umm.diderot:100.54-55] 
                                  ]
                            BinOp: * @ [test/umm.diderot:100.59-68] 
                              Subscript @ [test/umm.diderot:100.59-63] 
                                Var: x @ [test/umm.diderot:100.59-60] 
                                [
                                  Lit: 3 @ [test/umm.diderot:100.61-62] 
                                ]
                              Subscript @ [test/umm.diderot:100.64-68] 
                                Var: y @ [test/umm.diderot:100.64-65] 
                                [
                                  Lit: 3 @ [test/umm.diderot:100.66-67] 
                                ]
                          BinOp: - @ [test/umm.diderot:101.9-54] 
                            BinOp: + @ [test/umm.diderot:101.9-43] 
                              BinOp: - @ [test/umm.diderot:101.9-31] 
                                BinOp: * @ [test/umm.diderot:101.9-19] 
                                  Subscript @ [test/umm.diderot:101.9-13] 
                                    Var: x @ [test/umm.diderot:101.9-10] 
                                    [
                                      Lit: 0 @ [test/umm.diderot:101.11-12] 
                                    ]
                                  Subscript @ [test/umm.diderot:101.14-18] 
                                    Var: y @ [test/umm.diderot:101.14-15] 
                                    [
                                      Lit: 1 @ [test/umm.diderot:101.16-17] 
                                    ]
                                BinOp: * @ [test/umm.diderot:101.21-31] 
                                  Subscript @ [test/umm.diderot:101.21-25] 
                                    Var: x @ [test/umm.diderot:101.21-22] 
                                    [
                                      Lit: 1 @ [test/umm.diderot:101.23-24] 
                                    ]
                                  Subscript @ [test/umm.diderot:101.26-30] 
                                    Var: y @ [test/umm.diderot:101.26-27] 
                                    [
                                      Lit: 0 @ [test/umm.diderot:101.28-29] 
                                    ]
                              BinOp: * @ [test/umm.diderot:101.33-43] 
                                Subscript @ [test/umm.diderot:101.33-37] 
                                  Var: x @ [test/umm.diderot:101.33-34] 
                                  [
                                    Lit: 2 @ [test/umm.diderot:101.35-36] 
                                  ]
                                Subscript @ [test/umm.diderot:101.38-42] 
                                  Var: y @ [test/umm.diderot:101.38-39] 
                                  [
                                    Lit: 3 @ [test/umm.diderot:101.40-41] 
                                  ]
                            BinOp: * @ [test/umm.diderot:101.45-54] 
                              Subscript @ [test/umm.diderot:101.45-49] 
                                Var: x @ [test/umm.diderot:101.45-46] 
                                [
                                  Lit: 3 @ [test/umm.diderot:101.47-48] 
                                ]
                              Subscript @ [test/umm.diderot:101.50-54] 
                                Var: y @ [test/umm.diderot:101.50-51] 
                                [
                                  Lit: 2 @ [test/umm.diderot:101.52-53] 
                                ]
                          BinOp: + @ [test/umm.diderot:102.9-54] 
                            BinOp: + @ [test/umm.diderot:102.9-43] 
                              BinOp: - @ [test/umm.diderot:102.9-31] 
                                BinOp: * @ [test/umm.diderot:102.9-19] 
                                  Subscript @ [test/umm.diderot:102.9-13] 
                                    Var: x @ [test/umm.diderot:102.9-10] 
                                    [
                                      Lit: 0 @ [test/umm.diderot:102.11-12] 
                                    ]
                                  Subscript @ [test/umm.diderot:102.14-18] 
                                    Var: y @ [test/umm.diderot:102.14-15] 
                                    [
                                      Lit: 2 @ [test/umm.diderot:102.16-17] 
                                    ]
                                BinOp: * @ [test/umm.diderot:102.21-31] 
                                  Subscript @ [test/umm.diderot:102.21-25] 
                                    Var: x @ [test/umm.diderot:102.21-22] 
                                    [
                                      Lit: 1 @ [test/umm.diderot:102.23-24] 
                                    ]
                                  Subscript @ [test/umm.diderot:102.26-30] 
                                    Var: y @ [test/umm.diderot:102.26-27] 
                                    [
                                      Lit: 3 @ [test/umm.diderot:102.28-29] 
                                    ]
                              BinOp: * @ [test/umm.diderot:102.33-43] 
                                Subscript @ [test/umm.diderot:102.33-37] 
                                  Var: x @ [test/umm.diderot:102.33-34] 
                                  [
                                    Lit: 2 @ [test/umm.diderot:102.35-36] 
                                  ]
                                Subscript @ [test/umm.diderot:102.38-42] 
                                  Var: y @ [test/umm.diderot:102.38-39] 
                                  [
                                    Lit: 0 @ [test/umm.diderot:102.40-41] 
                                  ]
                            BinOp: * @ [test/umm.diderot:102.45-54] 
                              Subscript @ [test/umm.diderot:102.45-49] 
                                Var: x @ [test/umm.diderot:102.45-46] 
                                [
                                  Lit: 3 @ [test/umm.diderot:102.47-48] 
                                ]
                              Subscript @ [test/umm.diderot:102.50-54] 
                                Var: y @ [test/umm.diderot:102.50-51] 
                                [
                                  Lit: 1 @ [test/umm.diderot:102.52-53] 
                                ]
                          BinOp: + @ [test/umm.diderot:103.9-54] 
                            BinOp: - @ [test/umm.diderot:103.9-43] 
                              BinOp: - @ [test/umm.diderot:103.9-31] 
                                BinOp: * @ [test/umm.diderot:103.9-19] 
                                  Subscript @ [test/umm.diderot:103.9-13] 
                                    Var: x @ [test/umm.diderot:103.9-10] 
                                    [
                                      Lit: 0 @ [test/umm.diderot:103.11-12] 
                                    ]
                                  Subscript @ [test/umm.diderot:103.14-18] 
                                    Var: y @ [test/umm.diderot:103.14-15] 
                                    [
                                      Lit: 3 @ [test/umm.diderot:103.16-17] 
                                    ]
                                BinOp: * @ [test/umm.diderot:103.21-31] 
                                  Subscript @ [test/umm.diderot:103.21-25] 
                                    Var: x @ [test/umm.diderot:103.21-22] 
                                    [
                                      Lit: 1 @ [test/umm.diderot:103.23-24] 
                                    ]
                                  Subscript @ [test/umm.diderot:103.26-30] 
                                    Var: y @ [test/umm.diderot:103.26-27] 
                                    [
                                      Lit: 2 @ [test/umm.diderot:103.28-29] 
                                    ]
                              BinOp: * @ [test/umm.diderot:103.33-43] 
                                Subscript @ [test/umm.diderot:103.33-37] 
                                  Var: x @ [test/umm.diderot:103.33-34] 
                                  [
                                    Lit: 2 @ [test/umm.diderot:103.35-36] 
                                  ]
                                Subscript @ [test/umm.diderot:103.38-42] 
                                  Var: y @ [test/umm.diderot:103.38-39] 
                                  [
                                    Lit: 1 @ [test/umm.diderot:103.40-41] 
                                  ]
                            BinOp: * @ [test/umm.diderot:103.45-54] 
                              Subscript @ [test/umm.diderot:103.45-49] 
                                Var: x @ [test/umm.diderot:103.45-46] 
                                [
                                  Lit: 3 @ [test/umm.diderot:103.47-48] 
                                ]
                              Subscript @ [test/umm.diderot:103.50-54] 
                                Var: y @ [test/umm.diderot:103.50-51] 
                                [
                                  Lit: 0 @ [test/umm.diderot:103.52-53] 
                                ]
                        ]
                    ]
              Return @ [test/umm.diderot:104.3-105.0] 
                Var: result @ [test/umm.diderot:104.10-16] 
            ]
      Overloading Operator: / @ [test/umm.diderot:108.1-121.1] 
        Id: quat @ [test/umm.diderot:108.10-15] 
        [
          Param: y @ [test/umm.diderot:108.19-25] 
            Id: quat @ [test/umm.diderot:108.19-24] 
          Param: x @ [test/umm.diderot:108.27-33] 
            Id: quat @ [test/umm.diderot:108.27-32] 
        ]
        Stmt @ [test/umm.diderot:108.1-121.1] 
          Block @ [test/umm.diderot:108.35-112.0] 
            [
              Decl @ [test/umm.diderot:108.35-112.0] 
                Decl: invx= @ [test/umm.diderot:109.3-35] 
                  BinOp: * @ [test/umm.diderot:109.15-34] 
                    Apply @ [test/umm.diderot:109.15-22] 
                      Var: conj @ [test/umm.diderot:109.15-19] 
                      [
                        Var: x @ [test/umm.diderot:109.20-21] 
                      ]
                    BinOp: • @ [test/umm.diderot:109.26-33] 
                      Var: x @ [test/umm.diderot:109.26-27] 
                      Var: x @ [test/umm.diderot:109.32-33] 
              Return @ [test/umm.diderot:110.3-111.0] 
                BinOp: * @ [test/umm.diderot:110.10-16] 
                  Var: y @ [test/umm.diderot:110.10-11] 
                  Var: invx @ [test/umm.diderot:110.12-16] 
            ]
    ]
    Strand: f @ [test/umm.diderot:121.1-137.1] 
      [
        Param: i @ [test/umm.diderot:121.10-15] 
          Int @ [test/umm.diderot:121.10-14] 
      ]
      [
        VarDcl @ [test/umm.diderot:122.3-123.0] 
        VarDcl @ [test/umm.diderot:123.3-124.0] 
        VarDcl: output @ [test/umm.diderot:124.3-125.0] 
        VarDcl: output @ [test/umm.diderot:125.3-126.0] 
        VarDcl: output @ [test/umm.diderot:126.3-127.0] 
      ]
      [
        Method: Update @ [test/umm.diderot:127.3-136.1] 
          Block @ [test/umm.diderot:127.10-136.0] 
            [
              Decl @ [test/umm.diderot:127.10-136.0] 
                Decl: z= @ [test/umm.diderot:128.5-129.0] 
                  Lit: 2 @ [test/umm.diderot:128.14-15] 
              Foreach @ [test/umm.diderot:129.5-133.0] 
                Int @ [test/umm.diderot:129.14-18] 
                Iterator: j @ [test/umm.diderot:129.18-27] 
                  Range @ [test/umm.diderot:129.23-27] 
                    Lit: 0 @ [test/umm.diderot:129.23-24] 
                    Lit: 5 @ [test/umm.diderot:129.26-27] 
                Block @ [test/umm.diderot:129.28-133.0] 
                  [
                    Assign: z+= @ [test/umm.diderot:130.7-131.0] 
                      BinOp: + @ [test/umm.diderot:130.10-15] 
                        UnaryOp: |()| @ [test/umm.diderot:130.10-13] 
                          Var: b @ [test/umm.diderot:130.11-12] 
                        Var: j @ [test/umm.diderot:130.14-15] 
                    Assign: z1+= @ [test/umm.diderot:131.7-132.0] 
                      Var: q1 @ [test/umm.diderot:131.11-13] 
                  ]
              Print @ [test/umm.diderot:133.5-134.0] 
                [
                  Var: q @ [test/umm.diderot:133.11-12] 
                  Lit: " " @ [test/umm.diderot:133.13-16] 
                  Var: z @ [test/umm.diderot:133.17-18] 
                  Lit: " " @ [test/umm.diderot:133.19-22] 
                  Apply @ [test/umm.diderot:133.24-35] 
                    Select @ [test/umm.diderot:133.24-35] 
                      Var: z1 @ [test/umm.diderot:133.24-26] 
                      unpack
                    [ ]
                  Lit: " " @ [test/umm.diderot:133.37-40] 
                  Var: frm @ [test/umm.diderot:133.41-44] 
                  Lit: "\n" @ [test/umm.diderot:133.45-49] 
                ]
              Stabilize @ [test/umm.diderot:134.5-135.0] 
            ]
      ]
    Grid @ [test/umm.diderot:137.1-138.0] 
      Comprehension @ [test/umm.diderot:137.14-33] 
        Apply @ [test/umm.diderot:137.16-20] 
          Var: f @ [test/umm.diderot:137.16-17] 
          [
            Var: i @ [test/umm.diderot:137.18-19] 
          ]
        [
          Iterator: i @ [test/umm.diderot:137.23-32] 
            Range @ [test/umm.diderot:137.28-32] 
              Lit: 0 @ [test/umm.diderot:137.28-29] 
              Lit: 1 @ [test/umm.diderot:137.31-32] 
        ]
/* end program */
/* AST: After typechecking */
properties: StrandArray,HasGlobals
function vec4 unpack (vec4 arg0)
{
  return (vec4)arg0;
  }
function vec4 quat (vec4 arg0)
{
  return (quat( using vec4))arg0;
  }
function quat( using vec4)[4] unpack (quat( using quat( using vec4))[4] arg0)
{
  return (quat( using quat( using vec4))[4])arg0;
  }
function quat( using quat( using vec4))[4] hmm (quat( using vec4)[4] arg0)
{
  return (hmm( using quat( using quat( using vec4))[4]))arg0;
  }
quat( using vec4) q0 = quat ([0.4e1, 0.3e1, 0.2e1, 0.1e1]);
quat( using vec4) q1 = quat ([0.1e1, 0.2e1, 0.3e1, 0.1e1]);
function real rand (tensor[5] a)
{
  real z = 0.2e1;
  foreach (int j in $range (0, 5)) {
    z = +<$[]> (z, +<$[]> (|()|<$[5]> (a), (real)j));
    }
  return z;
  }
function quat( using vec4) + (quat( using vec4) x, quat( using vec4) y)
{
  quat( using vec4) result = quat (+<$[4]> (unpack (x), unpack (y)));
  return result;
  }
function quat( using vec4) - (quat( using vec4) x, quat( using vec4) y)
{
  quat( using vec4) result = quat (-<$[4]> (unpack (x), unpack (y)));
  return result;
  }
function quat( using vec4) - (quat( using vec4) x)
{
  quat( using vec4) result = quat (-<$[4]> ([0.e0, 0.e0, 0.e0, 0.e0], unpack (x)));
  return result;
  }
function real • (quat( using vec4) x, quat( using vec4) y)
{
  real result = •<$[4]; $[4]; $[]> (unpack (x), unpack (y));
  return result;
  }
function quat( using vec4) * (quat( using vec4) x, real y)
{
  return quat (*<$[4]> (y, unpack (x)));
  }
function quat( using vec4) * (real y, quat( using vec4) x)
{
  return quat (*<$[4]> (y, unpack (x)));
  }
function quat( using vec4) conj (quat( using vec4) x0)
{
  vec4 x = unpack (x0);
  return quat ([x[0], unary -<$[]> (x[1]), unary -<$[]> (x[2]), unary -<$[]> (x[3])]);
  }
function real oreintDist (quat( using vec4) x, quat( using vec4) y)
{
  quat( using vec4) x0 = * (x, / ((real)1, sqrt (• (x, x))));
  quat( using vec4) y0 = * (y, / ((real)1, sqrt (• (y, y))));
  return -<$[]> ((real)1, ^ (• (x0, y0), 2));
  }
function real sinOverX (real ang)
{
  return (0.1e1 if == (+<$[]> (* (ang, ang), (real)1), (real)1) else / (sin (ang), ang));
  }
function real angBet (quat( using vec4) x, quat( using vec4) y)
{
  real dot = • (x, y);
  if < (dot, (real)0) {
    real arc = / (sqrt (• (- (- (x), y), - (- (x), y))), (real)2);
    return -<$[]> (0.314159265358979323846264338327950288e1, * ((real)2, asin (arc)));
    }
  else {
    real arc = / (sqrt (• (- (x, y), - (x, y))), (real)2);
    return * ((real)2, asin (arc));
    }
  }
function quat( using vec4) slerp (quat( using vec4) x0, quat( using vec4) y0, real t)
{
  quat( using vec4) x = * (x0, / ((real)1, sqrt (• (x0, x0))));
  quat( using vec4) y = * (y0, / ((real)1, sqrt (• (y0, y0))));
  real ang = angBet (x, y);
  quat( using vec4) result = + (* (* (x, / (sinOverX (* (-<$[]> ((real)1, t), ang)), sinOverX (ang))), -<$[]> ((real)1, t)), * (* (y, / (sinOverX (* (t, ang)), sinOverX (ang))), t));
  return result;
  }
function quat( using vec4) * (quat( using vec4) x0, quat( using vec4) y0)
{
  vec4 x = unpack (x0);
  vec4 y = unpack (y0);
  quat( using vec4) result = quat ([-<$[]> (-<$[]> (-<$[]> (* (x[0], y[0]), * (x[1], y[1])), * (x[2], y[2])), * (x[3], y[3])), -<$[]> (+<$[]> (-<$[]> (* (x[0], y[1]), * (x[1], y[0])), * (x[2], y[3])), * (x[3], y[2])), +<$[]> (+<$[]> (-<$[]> (* (x[0], y[2]), * (x[1], y[3])), * (x[2], y[0])), * (x[3], y[1])), +<$[]> (-<$[]> (-<$[]> (* (x[0], y[3]), * (x[1], y[2])), * (x[2], y[1])), * (x[3], y[0]))]);
  return result;
  }
function quat( using vec4) / (quat( using vec4) y, quat( using vec4) x)
{
  quat( using vec4) invx = * (conj (x), • (x, x));
  return * (y, invx);
  }
strand f (int i)
{
  real b = 0.1e1;
  quat( using quat( using vec4)) z1 = quat ([0.e0, 0.e0, 0.e0, 0.e0]);
  output real a = oreintDist (q0, q1);
  output vec4 frm = unpack (slerp (q0, q1, 0.5e0));
  output real q = rand ([0.1e1, 0.e0, 0.e0, 0.e0, 0.e0]);
  update {
    real z = 0.2e1;
    foreach (int j in $range (0, 5)) {
      z = +<$[]> (z, +<$[]> (|()|<$[]> (b), (real)j));
      z1 = + (z1, q1);
      }
    print (q, " ", z, " ", unpack (z1), " ", frm, "\n");
    stabilize;
    }
  
}
grid(1) {
    foreach (int i in $range (0, 1)) {
      new f (i);
      }
    }
  
/* Program end */
/* Simplified Program (after after simplify) start */
properties: GlobalInit,StrandArray,HasGlobals
constants { }
global vec4 q003EE;
global vec4 q103F4;
function vec4#14 unpack03DD (vec4 arg003DE)
{
  vec4 _t03DF = (vec4)arg003DE;
  return _t03DF;
}
function vec4#10 quat03E0 (vec4 arg003E1)
{
  vec4 _t03E2 = (vec4)arg003E1;
  return _t03E2;
}
function vec4[4]#0 unpack03E3 (vec4[4] arg003E4)
{
  vec4[4] _t03E5 = (vec4[4])arg003E4;
  return _t03E5;
}
function vec4[4]#0 hmm03E6 (vec4[4] arg003E7)
{
  vec4[4] _t03E8 = (vec4[4])arg003E7;
  return _t03E8;
}
function real#1 rand03F5 (tensor[5] a03F6)
{
  real z03F7 = 0.2e1;
  int _t03F8 = 0;
  int _t03F9 = 5;
  int[] _t03FA = $range01B9 (_t03F8, _t03F9);
  foreach j03FC in _t03FA {
    real _t03FB = |()|00B5<$[5]> (a03F6);
    real _t03FD = (real)j03FC;
    real _t03FE = +0017<$[]> (_t03FB, _t03FD);
    z03F7 = +0017<$[]> (z03F7, _t03FE);
  }
  return z03F7;
}
function vec4#2 +03FF (vec4 x0400, vec4 y0401)
{
  vec4 _t0402 = unpack03DD (x0400);
  vec4 _t0403 = unpack03DD (y0401);
  vec4 _t0404 = +0017<$[4]> (_t0402, _t0403);
  vec4 result0405 = quat03E0 (_t0404);
  return result0405;
}
function vec4#4 -0406 (vec4 x0407, vec4 y0408)
{
  vec4 _t0409 = unpack03DD (x0407);
  vec4 _t040A = unpack03DD (y0408);
  vec4 _t040B = -0026<$[4]> (_t0409, _t040A);
  vec4 result040C = quat03E0 (_t040B);
  return result040C;
}
function vec4#2 -040D (vec4 x040E)
{
  real _t040F = 0.e0;
  real _t0410 = 0.e0;
  real _t0411 = 0.e0;
  real _t0412 = 0.e0;
  vec4 _t0413 = [_t040F, _t0410, _t0411, _t0412];
  vec4 _t0414 = unpack03DD (x040E);
  vec4 _t0415 = -0026<$[4]> (_t0413, _t0414);
  vec4 result0416 = quat03E0 (_t0415);
  return result0416;
}
function real#9 •0417 (vec4 x0418, vec4 y0419)
{
  vec4 _t041A = unpack03DD (x0418);
  vec4 _t041B = unpack03DD (y0419);
  real result041C = •00CE<$[4]; $[4]; $[]> (_t041A, _t041B);
  return result041C;
}
function vec4#9 *041D (vec4 x041E, real y041F)
{
  vec4 _t0420 = unpack03DD (x041E);
  vec4 _t0421 = *0036<$[4]> (y041F, _t0420);
  vec4 _t0422 = quat03E0 (_t0421);
  return _t0422;
}
function vec4#0 *0423 (real y0424, vec4 x0425)
{
  vec4 _t0426 = unpack03DD (x0425);
  vec4 _t0427 = *0036<$[4]> (y0424, _t0426);
  vec4 _t0428 = quat03E0 (_t0427);
  return _t0428;
}
function vec4#1 conj0429 (vec4 x0042A)
{
  vec4 x042B = unpack03DD (x0042A);
  real _t042C = x042B[0];
  real _t042D = x042B[1];
  real _t042E = unary -008B<$[]> (_t042D);
  real _t042F = x042B[2];
  real _t0430 = unary -008B<$[]> (_t042F);
  real _t0431 = x042B[3];
  real _t0432 = unary -008B<$[]> (_t0431);
  vec4 _t0433 = [_t042C, _t042E, _t0430, _t0432];
  vec4 _t0434 = quat03E0 (_t0433);
  return _t0434;
}
function real#1 oreintDist0435 (vec4 x0436, vec4 y0437)
{
  real _t0438 = 0.1e1;
  real _t0439 = •0417 (x0436, x0436);
  real _t043A = sqrt015F (_t0439);
  real _t043B = /0055 (_t0438, _t043A);
  vec4 x0043C = *041D (x0436, _t043B);
  real _t043D = 0.1e1;
  real _t043E = •0417 (y0437, y0437);
  real _t043F = sqrt015F (_t043E);
  real _t0440 = /0055 (_t043D, _t043F);
  vec4 y00441 = *041D (y0437, _t0440);
  real _t0442 = 0.1e1;
  real _t0443 = •0417 (x0043C, y00441);
  int _t0444 = 2;
  real _t0445 = ^0068 (_t0443, _t0444);
  real _t0446 = -0026<$[]> (_t0442, _t0445);
  return _t0446;
}
function real#4 sinOverX0447 (real ang0448)
{
  real _t0449;
  real _t044A = *0034 (ang0448, ang0448);
  real _t044B = 0.1e1;
  real _t044C = +0017<$[]> (_t044A, _t044B);
  real _t044D = 0.1e1;
  bool _t044E = ==0084 (_t044C, _t044D);
  if _t044E {
    _t0449 = 0.1e1;
  } else {
    real _t044F = sin016B (ang0448);
    _t0449 = /0055 (_t044F, ang0448);
  }
  return _t0449;
}
function real#1 angBet0450 (vec4 x0451, vec4 y0452)
{
  real dot0453 = •0417 (x0451, y0452);
  real _t0454 = 0.e0;
  bool _t0455 = <007A (dot0453, _t0454);
  if _t0455 {
    vec4 _t0456 = -040D (x0451);
    vec4 _t0457 = -0406 (_t0456, y0452);
    vec4 _t0458 = -040D (x0451);
    vec4 _t0459 = -0406 (_t0458, y0452);
    real _t045A = •0417 (_t0457, _t0459);
    real _t045B = sqrt015F (_t045A);
    real _t045C = 0.2e1;
    real arc045D = /0055 (_t045B, _t045C);
    real _t045E = 0.314159265358979323846264338327950288e1;
    real _t045F = 0.2e1;
    real _t0460 = asin016F (arc045D);
    real _t0461 = *0034 (_t045F, _t0460);
    real _t0462 = -0026<$[]> (_t045E, _t0461);
    return _t0462;
  } else {
    vec4 _t0463 = -0406 (x0451, y0452);
    vec4 _t0464 = -0406 (x0451, y0452);
    real _t0465 = •0417 (_t0463, _t0464);
    real _t0466 = sqrt015F (_t0465);
    real _t0467 = 0.2e1;
    real arc0468 = /0055 (_t0466, _t0467);
    real _t0469 = 0.2e1;
    real _t046A = asin016F (arc0468);
    real _t046B = *0034 (_t0469, _t046A);
    return _t046B;
  }
}
function vec4#1 slerp046C (vec4 x0046D, vec4 y0046E, real t046F)
{
  real _t0470 = 0.1e1;
  real _t0471 = •0417 (x0046D, x0046D);
  real _t0472 = sqrt015F (_t0471);
  real _t0473 = /0055 (_t0470, _t0472);
  vec4 x0474 = *041D (x0046D, _t0473);
  real _t0475 = 0.1e1;
  real _t0476 = •0417 (y0046E, y0046E);
  real _t0477 = sqrt015F (_t0476);
  real _t0478 = /0055 (_t0475, _t0477);
  vec4 y0479 = *041D (y0046E, _t0478);
  real ang047A = angBet0450 (x0474, y0479);
  real _t047B = 0.1e1;
  real _t047C = -0026<$[]> (_t047B, t046F);
  real _t047D = *0034 (_t047C, ang047A);
  real _t047E = sinOverX0447 (_t047D);
  real _t047F = sinOverX0447 (ang047A);
  real _t0480 = /0055 (_t047E, _t047F);
  vec4 _t0481 = *041D (x0474, _t0480);
  real _t0482 = 0.1e1;
  real _t0483 = -0026<$[]> (_t0482, t046F);
  vec4 _t0484 = *041D (_t0481, _t0483);
  real _t0485 = *0034 (t046F, ang047A);
  real _t0486 = sinOverX0447 (_t0485);
  real _t0487 = sinOverX0447 (ang047A);
  real _t0488 = /0055 (_t0486, _t0487);
  vec4 _t0489 = *041D (y0479, _t0488);
  vec4 _t048A = *041D (_t0489, t046F);
  vec4 result048B = +03FF (_t0484, _t048A);
  return result048B;
}
function vec4#1 *048C (vec4 x0048D, vec4 y0048E)
{
  vec4 x048F = unpack03DD (x0048D);
  vec4 y0490 = unpack03DD (y0048E);
  real _t0491 = x048F[0];
  real _t0492 = y0490[0];
  real _t0493 = *0034 (_t0491, _t0492);
  real _t0494 = x048F[1];
  real _t0495 = y0490[1];
  real _t0496 = *0034 (_t0494, _t0495);
  real _t0497 = -0026<$[]> (_t0493, _t0496);
  real _t0498 = x048F[2];
  real _t0499 = y0490[2];
  real _t049A = *0034 (_t0498, _t0499);
  real _t049B = -0026<$[]> (_t0497, _t049A);
  real _t049C = x048F[3];
  real _t049D = y0490[3];
  real _t049E = *0034 (_t049C, _t049D);
  real _t049F = -0026<$[]> (_t049B, _t049E);
  real _t04A0 = x048F[0];
  real _t04A1 = y0490[1];
  real _t04A2 = *0034 (_t04A0, _t04A1);
  real _t04A3 = x048F[1];
  real _t04A4 = y0490[0];
  real _t04A5 = *0034 (_t04A3, _t04A4);
  real _t04A6 = -0026<$[]> (_t04A2, _t04A5);
  real _t04A7 = x048F[2];
  real _t04A8 = y0490[3];
  real _t04A9 = *0034 (_t04A7, _t04A8);
  real _t04AA = +0017<$[]> (_t04A6, _t04A9);
  real _t04AB = x048F[3];
  real _t04AC = y0490[2];
  real _t04AD = *0034 (_t04AB, _t04AC);
  real _t04AE = -0026<$[]> (_t04AA, _t04AD);
  real _t04AF = x048F[0];
  real _t04B0 = y0490[2];
  real _t04B1 = *0034 (_t04AF, _t04B0);
  real _t04B2 = x048F[1];
  real _t04B3 = y0490[3];
  real _t04B4 = *0034 (_t04B2, _t04B3);
  real _t04B5 = -0026<$[]> (_t04B1, _t04B4);
  real _t04B6 = x048F[2];
  real _t04B7 = y0490[0];
  real _t04B8 = *0034 (_t04B6, _t04B7);
  real _t04B9 = +0017<$[]> (_t04B5, _t04B8);
  real _t04BA = x048F[3];
  real _t04BB = y0490[1];
  real _t04BC = *0034 (_t04BA, _t04BB);
  real _t04BD = +0017<$[]> (_t04B9, _t04BC);
  real _t04BE = x048F[0];
  real _t04BF = y0490[3];
  real _t04C0 = *0034 (_t04BE, _t04BF);
  real _t04C1 = x048F[1];
  real _t04C2 = y0490[2];
  real _t04C3 = *0034 (_t04C1, _t04C2);
  real _t04C4 = -0026<$[]> (_t04C0, _t04C3);
  real _t04C5 = x048F[2];
  real _t04C6 = y0490[1];
  real _t04C7 = *0034 (_t04C5, _t04C6);
  real _t04C8 = -0026<$[]> (_t04C4, _t04C7);
  real _t04C9 = x048F[3];
  real _t04CA = y0490[0];
  real _t04CB = *0034 (_t04C9, _t04CA);
  real _t04CC = +0017<$[]> (_t04C8, _t04CB);
  vec4 _t04CD = [_t049F, _t04AE, _t04BD, _t04CC];
  vec4 result04CE = quat03E0 (_t04CD);
  return result04CE;
}
function vec4#0 /04CF (vec4 y04D0, vec4 x04D1)
{
  vec4 _t04D2 = conj0429 (x04D1);
  real _t04D3 = •0417 (x04D1, x04D1);
  vec4 invx04D4 = *041D (_t04D2, _t04D3);
  vec4 _t04D5 = *048C (y04D0, invx04D4);
  return _t04D5;
}
globalInit {
  real _t03E9 = 0.4e1;
  real _t03EA = 0.3e1;
  real _t03EB = 0.2e1;
  real _t03EC = 0.1e1;
  vec4 _t03ED = [_t03E9, _t03EA, _t03EB, _t03EC];
  q003EE = quat03E0 (_t03ED);
  real _t03EF = 0.1e1;
  real _t03F0 = 0.2e1;
  real _t03F1 = 0.3e1;
  real _t03F2 = 0.1e1;
  vec4 _t03F3 = [_t03EF, _t03F0, _t03F1, _t03F2];
  q103F4 = quat03E0 (_t03F3);
}
strand f (int i04D6) {
  real b04D7;
  vec4 z104D8;
  output real a04DE;
  output vec4 frm04DF;
  output real q04E2;
  {
    b04D7 = 0.1e1;
    real _t04D9 = 0.e0;
    real _t04DA = 0.e0;
    real _t04DB = 0.e0;
    real _t04DC = 0.e0;
    vec4 _t04DD = [_t04D9, _t04DA, _t04DB, _t04DC];
    z104D8 = quat03E0 (_t04DD);
    a04DE = oreintDist0435 (q003EE, q103F4);
    real _t04E0 = 0.5e0;
    vec4 _t04E1 = slerp046C (q003EE, q103F4, _t04E0);
    frm04DF = unpack03DD (_t04E1);
    real _t04E3 = 0.1e1;
    real _t04E4 = 0.e0;
    real _t04E5 = 0.e0;
    real _t04E6 = 0.e0;
    real _t04E7 = 0.e0;
    tensor[5] _t04E8 = [_t04E3, _t04E4, _t04E5, _t04E6, _t04E7];
    q04E2 = rand03F5 (_t04E8);
  }
  update
  {
    real z04E9 = 0.2e1;
    int _t04EA = 0;
    int _t04EB = 5;
    int[] _t04EC = $range01B9 (_t04EA, _t04EB);
    foreach j04EE in _t04EC {
      real _t04ED = |()|00B5<$[]> (b04D7);
      real _t04EF = (real)j04EE;
      real _t04F0 = +0017<$[]> (_t04ED, _t04EF);
      z04E9 = +0017<$[]> (z04E9, _t04F0);
      z104D8 = +03FF (z104D8, q103F4);
    }
    string _t04F1 = " ";
    string _t04F2 = " ";
    vec4 _t04F3 = unpack03DD (z104D8);
    string _t04F4 = " ";
    string _t04F5 = "\n";
    print (q04E2, _t04F1, z04E9, _t04F2, _t04F3, _t04F4, frm04DF, _t04F5);
    stabilize;
  }
}
grid(1) {
  int _t04F6 = 0;
  int _t04F7 = 1;
  int[] _t04F8 = $range01B9 (_t04F6, _t04F7);
  foreach i04F9 in _t04F8 {
    new f (i04F9);
  }
}
/* Program end */
/* Simplified Program (after after contraction (1)) start */
properties: GlobalInit,StrandArray,HasGlobals
constants { }
global vec4 q003EE;
global vec4 q103F4;
function vec4#14 unpack03DD (vec4 arg003DE)
{
  vec4 _t03DF = (vec4)arg003DE;
  return _t03DF;
}
function vec4#10 quat03E0 (vec4 arg003E1)
{
  vec4 _t03E2 = (vec4)arg003E1;
  return _t03E2;
}
function vec4[4]#0 unpack03E3 (vec4[4] arg003E4)
{
  vec4[4] _t03E5 = (vec4[4])arg003E4;
  return _t03E5;
}
function vec4[4]#0 hmm03E6 (vec4[4] arg003E7)
{
  vec4[4] _t03E8 = (vec4[4])arg003E7;
  return _t03E8;
}
function real#1 rand03F5 (tensor[5] a03F6)
{
  real z03F7 = 0.2e1;
  int _t03F8 = 0;
  int _t03F9 = 5;
  int[] _t03FA = $range01B9 (_t03F8, _t03F9);
  foreach j03FC in _t03FA {
    real _t03FB = |()|00B5<$[5]> (a03F6);
    real _t03FD = (real)j03FC;
    real _t03FE = +0017<$[]> (_t03FB, _t03FD);
    z03F7 = +0017<$[]> (z03F7, _t03FE);
  }
  return z03F7;
}
function vec4#2 +03FF (vec4 x0400, vec4 y0401)
{
  vec4 _t0402 = unpack03DD (x0400);
  vec4 _t0403 = unpack03DD (y0401);
  vec4 _t0404 = +0017<$[4]> (_t0402, _t0403);
  vec4 result0405 = quat03E0 (_t0404);
  return result0405;
}
function vec4#4 -0406 (vec4 x0407, vec4 y0408)
{
  vec4 _t0409 = unpack03DD (x0407);
  vec4 _t040A = unpack03DD (y0408);
  vec4 _t040B = -0026<$[4]> (_t0409, _t040A);
  vec4 result040C = quat03E0 (_t040B);
  return result040C;
}
function vec4#2 -040D (vec4 x040E)
{
  real _t040F = 0.e0;
  real _t0410 = 0.e0;
  real _t0411 = 0.e0;
  real _t0412 = 0.e0;
  vec4 _t0413 = [_t040F, _t0410, _t0411, _t0412];
  vec4 _t0414 = unpack03DD (x040E);
  vec4 _t0415 = -0026<$[4]> (_t0413, _t0414);
  vec4 result0416 = quat03E0 (_t0415);
  return result0416;
}
function real#9 •0417 (vec4 x0418, vec4 y0419)
{
  vec4 _t041A = unpack03DD (x0418);
  vec4 _t041B = unpack03DD (y0419);
  real result041C = •00CE<$[4]; $[4]; $[]> (_t041A, _t041B);
  return result041C;
}
function vec4#9 *041D (vec4 x041E, real y041F)
{
  vec4 _t0420 = unpack03DD (x041E);
  vec4 _t0421 = *0036<$[4]> (y041F, _t0420);
  vec4 _t0422 = quat03E0 (_t0421);
  return _t0422;
}
function vec4#0 *0423 (real y0424, vec4 x0425)
{
  vec4 _t0426 = unpack03DD (x0425);
  vec4 _t0427 = *0036<$[4]> (y0424, _t0426);
  vec4 _t0428 = quat03E0 (_t0427);
  return _t0428;
}
function vec4#1 conj0429 (vec4 x0042A)
{
  vec4 x042B = unpack03DD (x0042A);
  real _t042C = x042B[0];
  real _t042D = x042B[1];
  real _t042E = unary -008B<$[]> (_t042D);
  real _t042F = x042B[2];
  real _t0430 = unary -008B<$[]> (_t042F);
  real _t0431 = x042B[3];
  real _t0432 = unary -008B<$[]> (_t0431);
  vec4 _t0433 = [_t042C, _t042E, _t0430, _t0432];
  vec4 _t0434 = quat03E0 (_t0433);
  return _t0434;
}
function real#1 oreintDist0435 (vec4 x0436, vec4 y0437)
{
  real _t0438 = 0.1e1;
  real _t0439 = •0417 (x0436, x0436);
  real _t043A = sqrt015F (_t0439);
  real _t043B = /0055 (_t0438, _t043A);
  vec4 x0043C = *041D (x0436, _t043B);
  real _t043D = 0.1e1;
  real _t043E = •0417 (y0437, y0437);
  real _t043F = sqrt015F (_t043E);
  real _t0440 = /0055 (_t043D, _t043F);
  vec4 y00441 = *041D (y0437, _t0440);
  real _t0442 = 0.1e1;
  real _t0443 = •0417 (x0043C, y00441);
  int _t0444 = 2;
  real _t0445 = ^0068 (_t0443, _t0444);
  real _t0446 = -0026<$[]> (_t0442, _t0445);
  return _t0446;
}
function real#4 sinOverX0447 (real ang0448)
{
  real _t0449;
  real _t044A = *0034 (ang0448, ang0448);
  real _t044B = 0.1e1;
  real _t044C = +0017<$[]> (_t044A, _t044B);
  real _t044D = 0.1e1;
  bool _t044E = ==0084 (_t044C, _t044D);
  if _t044E {
    _t0449 = 0.1e1;
  } else {
    real _t044F = sin016B (ang0448);
    _t0449 = /0055 (_t044F, ang0448);
  }
  return _t0449;
}
function real#1 angBet0450 (vec4 x0451, vec4 y0452)
{
  real dot0453 = •0417 (x0451, y0452);
  real _t0454 = 0.e0;
  bool _t0455 = <007A (dot0453, _t0454);
  if _t0455 {
    vec4 _t0456 = -040D (x0451);
    vec4 _t0457 = -0406 (_t0456, y0452);
    vec4 _t0458 = -040D (x0451);
    vec4 _t0459 = -0406 (_t0458, y0452);
    real _t045A = •0417 (_t0457, _t0459);
    real _t045B = sqrt015F (_t045A);
    real _t045C = 0.2e1;
    real arc045D = /0055 (_t045B, _t045C);
    real _t045E = 0.314159265358979323846264338327950288e1;
    real _t045F = 0.2e1;
    real _t0460 = asin016F (arc045D);
    real _t0461 = *0034 (_t045F, _t0460);
    real _t0462 = -0026<$[]> (_t045E, _t0461);
    return _t0462;
  } else {
    vec4 _t0463 = -0406 (x0451, y0452);
    vec4 _t0464 = -0406 (x0451, y0452);
    real _t0465 = •0417 (_t0463, _t0464);
    real _t0466 = sqrt015F (_t0465);
    real _t0467 = 0.2e1;
    real arc0468 = /0055 (_t0466, _t0467);
    real _t0469 = 0.2e1;
    real _t046A = asin016F (arc0468);
    real _t046B = *0034 (_t0469, _t046A);
    return _t046B;
  }
}
function vec4#1 slerp046C (vec4 x0046D, vec4 y0046E, real t046F)
{
  real _t0470 = 0.1e1;
  real _t0471 = •0417 (x0046D, x0046D);
  real _t0472 = sqrt015F (_t0471);
  real _t0473 = /0055 (_t0470, _t0472);
  vec4 x0474 = *041D (x0046D, _t0473);
  real _t0475 = 0.1e1;
  real _t0476 = •0417 (y0046E, y0046E);
  real _t0477 = sqrt015F (_t0476);
  real _t0478 = /0055 (_t0475, _t0477);
  vec4 y0479 = *041D (y0046E, _t0478);
  real ang047A = angBet0450 (x0474, y0479);
  real _t047B = 0.1e1;
  real _t047C = -0026<$[]> (_t047B, t046F);
  real _t047D = *0034 (_t047C, ang047A);
  real _t047E = sinOverX0447 (_t047D);
  real _t047F = sinOverX0447 (ang047A);
  real _t0480 = /0055 (_t047E, _t047F);
  vec4 _t0481 = *041D (x0474, _t0480);
  real _t0482 = 0.1e1;
  real _t0483 = -0026<$[]> (_t0482, t046F);
  vec4 _t0484 = *041D (_t0481, _t0483);
  real _t0485 = *0034 (t046F, ang047A);
  real _t0486 = sinOverX0447 (_t0485);
  real _t0487 = sinOverX0447 (ang047A);
  real _t0488 = /0055 (_t0486, _t0487);
  vec4 _t0489 = *041D (y0479, _t0488);
  vec4 _t048A = *041D (_t0489, t046F);
  vec4 result048B = +03FF (_t0484, _t048A);
  return result048B;
}
function vec4#1 *048C (vec4 x0048D, vec4 y0048E)
{
  vec4 x048F = unpack03DD (x0048D);
  vec4 y0490 = unpack03DD (y0048E);
  real _t0491 = x048F[0];
  real _t0492 = y0490[0];
  real _t0493 = *0034 (_t0491, _t0492);
  real _t0494 = x048F[1];
  real _t0495 = y0490[1];
  real _t0496 = *0034 (_t0494, _t0495);
  real _t0497 = -0026<$[]> (_t0493, _t0496);
  real _t0498 = x048F[2];
  real _t0499 = y0490[2];
  real _t049A = *0034 (_t0498, _t0499);
  real _t049B = -0026<$[]> (_t0497, _t049A);
  real _t049C = x048F[3];
  real _t049D = y0490[3];
  real _t049E = *0034 (_t049C, _t049D);
  real _t049F = -0026<$[]> (_t049B, _t049E);
  real _t04A0 = x048F[0];
  real _t04A1 = y0490[1];
  real _t04A2 = *0034 (_t04A0, _t04A1);
  real _t04A3 = x048F[1];
  real _t04A4 = y0490[0];
  real _t04A5 = *0034 (_t04A3, _t04A4);
  real _t04A6 = -0026<$[]> (_t04A2, _t04A5);
  real _t04A7 = x048F[2];
  real _t04A8 = y0490[3];
  real _t04A9 = *0034 (_t04A7, _t04A8);
  real _t04AA = +0017<$[]> (_t04A6, _t04A9);
  real _t04AB = x048F[3];
  real _t04AC = y0490[2];
  real _t04AD = *0034 (_t04AB, _t04AC);
  real _t04AE = -0026<$[]> (_t04AA, _t04AD);
  real _t04AF = x048F[0];
  real _t04B0 = y0490[2];
  real _t04B1 = *0034 (_t04AF, _t04B0);
  real _t04B2 = x048F[1];
  real _t04B3 = y0490[3];
  real _t04B4 = *0034 (_t04B2, _t04B3);
  real _t04B5 = -0026<$[]> (_t04B1, _t04B4);
  real _t04B6 = x048F[2];
  real _t04B7 = y0490[0];
  real _t04B8 = *0034 (_t04B6, _t04B7);
  real _t04B9 = +0017<$[]> (_t04B5, _t04B8);
  real _t04BA = x048F[3];
  real _t04BB = y0490[1];
  real _t04BC = *0034 (_t04BA, _t04BB);
  real _t04BD = +0017<$[]> (_t04B9, _t04BC);
  real _t04BE = x048F[0];
  real _t04BF = y0490[3];
  real _t04C0 = *0034 (_t04BE, _t04BF);
  real _t04C1 = x048F[1];
  real _t04C2 = y0490[2];
  real _t04C3 = *0034 (_t04C1, _t04C2);
  real _t04C4 = -0026<$[]> (_t04C0, _t04C3);
  real _t04C5 = x048F[2];
  real _t04C6 = y0490[1];
  real _t04C7 = *0034 (_t04C5, _t04C6);
  real _t04C8 = -0026<$[]> (_t04C4, _t04C7);
  real _t04C9 = x048F[3];
  real _t04CA = y0490[0];
  real _t04CB = *0034 (_t04C9, _t04CA);
  real _t04CC = +0017<$[]> (_t04C8, _t04CB);
  vec4 _t04CD = [_t049F, _t04AE, _t04BD, _t04CC];
  vec4 result04CE = quat03E0 (_t04CD);
  return result04CE;
}
function vec4#0 /04CF (vec4 y04D0, vec4 x04D1)
{
  vec4 _t04D2 = conj0429 (x04D1);
  real _t04D3 = •0417 (x04D1, x04D1);
  vec4 invx04D4 = *041D (_t04D2, _t04D3);
  vec4 _t04D5 = *048C (y04D0, invx04D4);
  return _t04D5;
}
globalInit {
  real _t03E9 = 0.4e1;
  real _t03EA = 0.3e1;
  real _t03EB = 0.2e1;
  real _t03EC = 0.1e1;
  vec4 _t03ED = [_t03E9, _t03EA, _t03EB, _t03EC];
  q003EE = quat03E0 (_t03ED);
  real _t03EF = 0.1e1;
  real _t03F0 = 0.2e1;
  real _t03F1 = 0.3e1;
  real _t03F2 = 0.1e1;
  vec4 _t03F3 = [_t03EF, _t03F0, _t03F1, _t03F2];
  q103F4 = quat03E0 (_t03F3);
}
strand f (int i04D6) {
  real b04D7;
  vec4 z104D8;
  output real a04DE;
  output vec4 frm04DF;
  output real q04E2;
  {
    b04D7 = 0.1e1;
    real _t04D9 = 0.e0;
    real _t04DA = 0.e0;
    real _t04DB = 0.e0;
    real _t04DC = 0.e0;
    vec4 _t04DD = [_t04D9, _t04DA, _t04DB, _t04DC];
    z104D8 = quat03E0 (_t04DD);
    a04DE = oreintDist0435 (q003EE, q103F4);
    real _t04E0 = 0.5e0;
    vec4 _t04E1 = slerp046C (q003EE, q103F4, _t04E0);
    frm04DF = unpack03DD (_t04E1);
    real _t04E3 = 0.1e1;
    real _t04E4 = 0.e0;
    real _t04E5 = 0.e0;
    real _t04E6 = 0.e0;
    real _t04E7 = 0.e0;
    tensor[5] _t04E8 = [_t04E3, _t04E4, _t04E5, _t04E6, _t04E7];
    q04E2 = rand03F5 (_t04E8);
  }
  update
  {
    real z04E9 = 0.2e1;
    int _t04EA = 0;
    int _t04EB = 5;
    int[] _t04EC = $range01B9 (_t04EA, _t04EB);
    foreach j04EE in _t04EC {
      real _t04ED = |()|00B5<$[]> (b04D7);
      real _t04EF = (real)j04EE;
      real _t04F0 = +0017<$[]> (_t04ED, _t04EF);
      z04E9 = +0017<$[]> (z04E9, _t04F0);
      z104D8 = +03FF (z104D8, q103F4);
    }
    string _t04F1 = " ";
    string _t04F2 = " ";
    vec4 _t04F3 = unpack03DD (z104D8);
    string _t04F4 = " ";
    string _t04F5 = "\n";
    print (q04E2, _t04F1, z04E9, _t04F2, _t04F3, _t04F4, frm04DF, _t04F5);
    stabilize;
  }
}
grid(1) {
  int _t04F6 = 0;
  int _t04F7 = 1;
  int[] _t04F8 = $range01B9 (_t04F6, _t04F7);
  foreach i04F9 in _t04F8 {
    new f (i04F9);
  }
}
/* Program end */
/* Simplified Program (after after map-reduce-fusion) start */
properties: GlobalInit,StrandArray,HasGlobals
constants { }
global vec4 q003EE;
global vec4 q103F4;
function vec4#14 unpack03DD (vec4 arg003DE)
{
  vec4 _t03DF = (vec4)arg003DE;
  return _t03DF;
}
function vec4#10 quat03E0 (vec4 arg003E1)
{
  vec4 _t03E2 = (vec4)arg003E1;
  return _t03E2;
}
function vec4[4]#0 unpack03E3 (vec4[4] arg003E4)
{
  vec4[4] _t03E5 = (vec4[4])arg003E4;
  return _t03E5;
}
function vec4[4]#0 hmm03E6 (vec4[4] arg003E7)
{
  vec4[4] _t03E8 = (vec4[4])arg003E7;
  return _t03E8;
}
function real#1 rand03F5 (tensor[5] a03F6)
{
  real z03F7 = 0.2e1;
  int _t03F8 = 0;
  int _t03F9 = 5;
  int[] _t03FA = $range01B9 (_t03F8, _t03F9);
  foreach j03FC in _t03FA {
    real _t03FB = |()|00B5<$[5]> (a03F6);
    real _t03FD = (real)j03FC;
    real _t03FE = +0017<$[]> (_t03FB, _t03FD);
    z03F7 = +0017<$[]> (z03F7, _t03FE);
  }
  return z03F7;
}
function vec4#2 +03FF (vec4 x0400, vec4 y0401)
{
  vec4 _t0402 = unpack03DD (x0400);
  vec4 _t0403 = unpack03DD (y0401);
  vec4 _t0404 = +0017<$[4]> (_t0402, _t0403);
  vec4 result0405 = quat03E0 (_t0404);
  return result0405;
}
function vec4#4 -0406 (vec4 x0407, vec4 y0408)
{
  vec4 _t0409 = unpack03DD (x0407);
  vec4 _t040A = unpack03DD (y0408);
  vec4 _t040B = -0026<$[4]> (_t0409, _t040A);
  vec4 result040C = quat03E0 (_t040B);
  return result040C;
}
function vec4#2 -040D (vec4 x040E)
{
  real _t040F = 0.e0;
  real _t0410 = 0.e0;
  real _t0411 = 0.e0;
  real _t0412 = 0.e0;
  vec4 _t0413 = [_t040F, _t0410, _t0411, _t0412];
  vec4 _t0414 = unpack03DD (x040E);
  vec4 _t0415 = -0026<$[4]> (_t0413, _t0414);
  vec4 result0416 = quat03E0 (_t0415);
  return result0416;
}
function real#9 •0417 (vec4 x0418, vec4 y0419)
{
  vec4 _t041A = unpack03DD (x0418);
  vec4 _t041B = unpack03DD (y0419);
  real result041C = •00CE<$[4]; $[4]; $[]> (_t041A, _t041B);
  return result041C;
}
function vec4#9 *041D (vec4 x041E, real y041F)
{
  vec4 _t0420 = unpack03DD (x041E);
  vec4 _t0421 = *0036<$[4]> (y041F, _t0420);
  vec4 _t0422 = quat03E0 (_t0421);
  return _t0422;
}
function vec4#0 *0423 (real y0424, vec4 x0425)
{
  vec4 _t0426 = unpack03DD (x0425);
  vec4 _t0427 = *0036<$[4]> (y0424, _t0426);
  vec4 _t0428 = quat03E0 (_t0427);
  return _t0428;
}
function vec4#1 conj0429 (vec4 x0042A)
{
  vec4 x042B = unpack03DD (x0042A);
  real _t042C = x042B[0];
  real _t042D = x042B[1];
  real _t042E = unary -008B<$[]> (_t042D);
  real _t042F = x042B[2];
  real _t0430 = unary -008B<$[]> (_t042F);
  real _t0431 = x042B[3];
  real _t0432 = unary -008B<$[]> (_t0431);
  vec4 _t0433 = [_t042C, _t042E, _t0430, _t0432];
  vec4 _t0434 = quat03E0 (_t0433);
  return _t0434;
}
function real#1 oreintDist0435 (vec4 x0436, vec4 y0437)
{
  real _t0438 = 0.1e1;
  real _t0439 = •0417 (x0436, x0436);
  real _t043A = sqrt015F (_t0439);
  real _t043B = /0055 (_t0438, _t043A);
  vec4 x0043C = *041D (x0436, _t043B);
  real _t043D = 0.1e1;
  real _t043E = •0417 (y0437, y0437);
  real _t043F = sqrt015F (_t043E);
  real _t0440 = /0055 (_t043D, _t043F);
  vec4 y00441 = *041D (y0437, _t0440);
  real _t0442 = 0.1e1;
  real _t0443 = •0417 (x0043C, y00441);
  int _t0444 = 2;
  real _t0445 = ^0068 (_t0443, _t0444);
  real _t0446 = -0026<$[]> (_t0442, _t0445);
  return _t0446;
}
function real#4 sinOverX0447 (real ang0448)
{
  real _t0449;
  real _t044A = *0034 (ang0448, ang0448);
  real _t044B = 0.1e1;
  real _t044C = +0017<$[]> (_t044A, _t044B);
  real _t044D = 0.1e1;
  bool _t044E = ==0084 (_t044C, _t044D);
  if _t044E {
    _t0449 = 0.1e1;
  } else {
    real _t044F = sin016B (ang0448);
    _t0449 = /0055 (_t044F, ang0448);
  }
  return _t0449;
}
function real#1 angBet0450 (vec4 x0451, vec4 y0452)
{
  real dot0453 = •0417 (x0451, y0452);
  real _t0454 = 0.e0;
  bool _t0455 = <007A (dot0453, _t0454);
  if _t0455 {
    vec4 _t0456 = -040D (x0451);
    vec4 _t0457 = -0406 (_t0456, y0452);
    vec4 _t0458 = -040D (x0451);
    vec4 _t0459 = -0406 (_t0458, y0452);
    real _t045A = •0417 (_t0457, _t0459);
    real _t045B = sqrt015F (_t045A);
    real _t045C = 0.2e1;
    real arc045D = /0055 (_t045B, _t045C);
    real _t045E = 0.314159265358979323846264338327950288e1;
    real _t045F = 0.2e1;
    real _t0460 = asin016F (arc045D);
    real _t0461 = *0034 (_t045F, _t0460);
    real _t0462 = -0026<$[]> (_t045E, _t0461);
    return _t0462;
  } else {
    vec4 _t0463 = -0406 (x0451, y0452);
    vec4 _t0464 = -0406 (x0451, y0452);
    real _t0465 = •0417 (_t0463, _t0464);
    real _t0466 = sqrt015F (_t0465);
    real _t0467 = 0.2e1;
    real arc0468 = /0055 (_t0466, _t0467);
    real _t0469 = 0.2e1;
    real _t046A = asin016F (arc0468);
    real _t046B = *0034 (_t0469, _t046A);
    return _t046B;
  }
}
function vec4#1 slerp046C (vec4 x0046D, vec4 y0046E, real t046F)
{
  real _t0470 = 0.1e1;
  real _t0471 = •0417 (x0046D, x0046D);
  real _t0472 = sqrt015F (_t0471);
  real _t0473 = /0055 (_t0470, _t0472);
  vec4 x0474 = *041D (x0046D, _t0473);
  real _t0475 = 0.1e1;
  real _t0476 = •0417 (y0046E, y0046E);
  real _t0477 = sqrt015F (_t0476);
  real _t0478 = /0055 (_t0475, _t0477);
  vec4 y0479 = *041D (y0046E, _t0478);
  real ang047A = angBet0450 (x0474, y0479);
  real _t047B = 0.1e1;
  real _t047C = -0026<$[]> (_t047B, t046F);
  real _t047D = *0034 (_t047C, ang047A);
  real _t047E = sinOverX0447 (_t047D);
  real _t047F = sinOverX0447 (ang047A);
  real _t0480 = /0055 (_t047E, _t047F);
  vec4 _t0481 = *041D (x0474, _t0480);
  real _t0482 = 0.1e1;
  real _t0483 = -0026<$[]> (_t0482, t046F);
  vec4 _t0484 = *041D (_t0481, _t0483);
  real _t0485 = *0034 (t046F, ang047A);
  real _t0486 = sinOverX0447 (_t0485);
  real _t0487 = sinOverX0447 (ang047A);
  real _t0488 = /0055 (_t0486, _t0487);
  vec4 _t0489 = *041D (y0479, _t0488);
  vec4 _t048A = *041D (_t0489, t046F);
  vec4 result048B = +03FF (_t0484, _t048A);
  return result048B;
}
function vec4#1 *048C (vec4 x0048D, vec4 y0048E)
{
  vec4 x048F = unpack03DD (x0048D);
  vec4 y0490 = unpack03DD (y0048E);
  real _t0491 = x048F[0];
  real _t0492 = y0490[0];
  real _t0493 = *0034 (_t0491, _t0492);
  real _t0494 = x048F[1];
  real _t0495 = y0490[1];
  real _t0496 = *0034 (_t0494, _t0495);
  real _t0497 = -0026<$[]> (_t0493, _t0496);
  real _t0498 = x048F[2];
  real _t0499 = y0490[2];
  real _t049A = *0034 (_t0498, _t0499);
  real _t049B = -0026<$[]> (_t0497, _t049A);
  real _t049C = x048F[3];
  real _t049D = y0490[3];
  real _t049E = *0034 (_t049C, _t049D);
  real _t049F = -0026<$[]> (_t049B, _t049E);
  real _t04A0 = x048F[0];
  real _t04A1 = y0490[1];
  real _t04A2 = *0034 (_t04A0, _t04A1);
  real _t04A3 = x048F[1];
  real _t04A4 = y0490[0];
  real _t04A5 = *0034 (_t04A3, _t04A4);
  real _t04A6 = -0026<$[]> (_t04A2, _t04A5);
  real _t04A7 = x048F[2];
  real _t04A8 = y0490[3];
  real _t04A9 = *0034 (_t04A7, _t04A8);
  real _t04AA = +0017<$[]> (_t04A6, _t04A9);
  real _t04AB = x048F[3];
  real _t04AC = y0490[2];
  real _t04AD = *0034 (_t04AB, _t04AC);
  real _t04AE = -0026<$[]> (_t04AA, _t04AD);
  real _t04AF = x048F[0];
  real _t04B0 = y0490[2];
  real _t04B1 = *0034 (_t04AF, _t04B0);
  real _t04B2 = x048F[1];
  real _t04B3 = y0490[3];
  real _t04B4 = *0034 (_t04B2, _t04B3);
  real _t04B5 = -0026<$[]> (_t04B1, _t04B4);
  real _t04B6 = x048F[2];
  real _t04B7 = y0490[0];
  real _t04B8 = *0034 (_t04B6, _t04B7);
  real _t04B9 = +0017<$[]> (_t04B5, _t04B8);
  real _t04BA = x048F[3];
  real _t04BB = y0490[1];
  real _t04BC = *0034 (_t04BA, _t04BB);
  real _t04BD = +0017<$[]> (_t04B9, _t04BC);
  real _t04BE = x048F[0];
  real _t04BF = y0490[3];
  real _t04C0 = *0034 (_t04BE, _t04BF);
  real _t04C1 = x048F[1];
  real _t04C2 = y0490[2];
  real _t04C3 = *0034 (_t04C1, _t04C2);
  real _t04C4 = -0026<$[]> (_t04C0, _t04C3);
  real _t04C5 = x048F[2];
  real _t04C6 = y0490[1];
  real _t04C7 = *0034 (_t04C5, _t04C6);
  real _t04C8 = -0026<$[]> (_t04C4, _t04C7);
  real _t04C9 = x048F[3];
  real _t04CA = y0490[0];
  real _t04CB = *0034 (_t04C9, _t04CA);
  real _t04CC = +0017<$[]> (_t04C8, _t04CB);
  vec4 _t04CD = [_t049F, _t04AE, _t04BD, _t04CC];
  vec4 result04CE = quat03E0 (_t04CD);
  return result04CE;
}
function vec4#0 /04CF (vec4 y04D0, vec4 x04D1)
{
  vec4 _t04D2 = conj0429 (x04D1);
  real _t04D3 = •0417 (x04D1, x04D1);
  vec4 invx04D4 = *041D (_t04D2, _t04D3);
  vec4 _t04D5 = *048C (y04D0, invx04D4);
  return _t04D5;
}
globalInit {
  real _t03E9 = 0.4e1;
  real _t03EA = 0.3e1;
  real _t03EB = 0.2e1;
  real _t03EC = 0.1e1;
  vec4 _t03ED = [_t03E9, _t03EA, _t03EB, _t03EC];
  q003EE = quat03E0 (_t03ED);
  real _t03EF = 0.1e1;
  real _t03F0 = 0.2e1;
  real _t03F1 = 0.3e1;
  real _t03F2 = 0.1e1;
  vec4 _t03F3 = [_t03EF, _t03F0, _t03F1, _t03F2];
  q103F4 = quat03E0 (_t03F3);
}
strand f (int i04D6) {
  real b04D7;
  vec4 z104D8;
  output real a04DE;
  output vec4 frm04DF;
  output real q04E2;
  {
    b04D7 = 0.1e1;
    real _t04D9 = 0.e0;
    real _t04DA = 0.e0;
    real _t04DB = 0.e0;
    real _t04DC = 0.e0;
    vec4 _t04DD = [_t04D9, _t04DA, _t04DB, _t04DC];
    z104D8 = quat03E0 (_t04DD);
    a04DE = oreintDist0435 (q003EE, q103F4);
    real _t04E0 = 0.5e0;
    vec4 _t04E1 = slerp046C (q003EE, q103F4, _t04E0);
    frm04DF = unpack03DD (_t04E1);
    real _t04E3 = 0.1e1;
    real _t04E4 = 0.e0;
    real _t04E5 = 0.e0;
    real _t04E6 = 0.e0;
    real _t04E7 = 0.e0;
    tensor[5] _t04E8 = [_t04E3, _t04E4, _t04E5, _t04E6, _t04E7];
    q04E2 = rand03F5 (_t04E8);
  }
  update
  {
    real z04E9 = 0.2e1;
    int _t04EA = 0;
    int _t04EB = 5;
    int[] _t04EC = $range01B9 (_t04EA, _t04EB);
    foreach j04EE in _t04EC {
      real _t04ED = |()|00B5<$[]> (b04D7);
      real _t04EF = (real)j04EE;
      real _t04F0 = +0017<$[]> (_t04ED, _t04EF);
      z04E9 = +0017<$[]> (z04E9, _t04F0);
      z104D8 = +03FF (z104D8, q103F4);
    }
    string _t04F1 = " ";
    string _t04F2 = " ";
    vec4 _t04F3 = unpack03DD (z104D8);
    string _t04F4 = " ";
    string _t04F5 = "\n";
    print (q04E2, _t04F1, z04E9, _t04F2, _t04F3, _t04F4, frm04DF, _t04F5);
    stabilize;
  }
}
grid(1) {
  int _t04F6 = 0;
  int _t04F7 = 1;
  int[] _t04F8 = $range01B9 (_t04F6, _t04F7);
  foreach i04F9 in _t04F8 {
    new f (i04F9);
  }
}
/* Program end */
/* Simplified Program (after after inlining) start */
properties: GlobalInit,StrandArray,HasGlobals
constants { }
global vec4 q003EE;
global vec4 q103F4;
globalInit {
  real _t03E9 = 0.4e1;
  real _t03EA = 0.3e1;
  real _t03EB = 0.2e1;
  real _t03EC = 0.1e1;
  vec4 _t03ED = [_t03E9, _t03EA, _t03EB, _t03EC];
  vec4 q00663;
  vec4 _t0664 = (vec4)_t03ED;
  q00663 = _t0664;
  q003EE = q00663;
  real _t03EF = 0.1e1;
  real _t03F0 = 0.2e1;
  real _t03F1 = 0.3e1;
  real _t03F2 = 0.1e1;
  vec4 _t03F3 = [_t03EF, _t03F0, _t03F1, _t03F2];
  vec4 q10661;
  vec4 _t0662 = (vec4)_t03F3;
  q10661 = _t0662;
  q103F4 = q10661;
}
strand f (int i04D6) {
  real b04D7;
  vec4 z104D8;
  output real a04DE;
  output vec4 frm04DF;
  output real q04E2;
  {
    b04D7 = 0.1e1;
    real _t04D9 = 0.e0;
    real _t04DA = 0.e0;
    real _t04DB = 0.e0;
    real _t04DC = 0.e0;
    vec4 _t04DD = [_t04D9, _t04DA, _t04DB, _t04DC];
    vec4 z10757;
    vec4 _t0758 = (vec4)_t04DD;
    z10757 = _t0758;
    z104D8 = z10757;
    real a072E;
    real _t072F = 0.1e1;
    real _t0730;
    vec4 _t0731;
    vec4 _t0732 = (vec4)q003EE;
    _t0731 = _t0732;
    vec4 _t0733;
    vec4 _t0734 = (vec4)q003EE;
    _t0733 = _t0734;
    real result0735 = •00CE<$[4]; $[4]; $[]> (_t0731, _t0733);
    _t0730 = result0735;
    real _t0736 = sqrt015F (_t0730);
    real _t0737 = /0055 (_t072F, _t0736);
    vec4 x00738;
    vec4 _t0739;
    vec4 _t073A = (vec4)q003EE;
    _t0739 = _t073A;
    vec4 _t073B = *0036<$[4]> (_t0737, _t0739);
    vec4 _t073C;
    vec4 _t073D = (vec4)_t073B;
    _t073C = _t073D;
    x00738 = _t073C;
    real _t073E = 0.1e1;
    real _t073F;
    vec4 _t0740;
    vec4 _t0741 = (vec4)q103F4;
    _t0740 = _t0741;
    vec4 _t0742;
    vec4 _t0743 = (vec4)q103F4;
    _t0742 = _t0743;
    real result0744 = •00CE<$[4]; $[4]; $[]> (_t0740, _t0742);
    _t073F = result0744;
    real _t0745 = sqrt015F (_t073F);
    real _t0746 = /0055 (_t073E, _t0745);
    vec4 y00747;
    vec4 _t0748;
    vec4 _t0749 = (vec4)q103F4;
    _t0748 = _t0749;
    vec4 _t074A = *0036<$[4]> (_t0746, _t0748);
    vec4 _t074B;
    vec4 _t074C = (vec4)_t074A;
    _t074B = _t074C;
    y00747 = _t074B;
    real _t074D = 0.1e1;
    real _t074E;
    vec4 _t074F;
    vec4 _t0750 = (vec4)x00738;
    _t074F = _t0750;
    vec4 _t0751;
    vec4 _t0752 = (vec4)y00747;
    _t0751 = _t0752;
    real result0753 = •00CE<$[4]; $[4]; $[]> (_t074F, _t0751);
    _t074E = result0753;
    int _t0754 = 2;
    real _t0755 = ^0068 (_t074E, _t0754);
    real _t0756 = -0026<$[]> (_t074D, _t0755);
    a072E = _t0756;
    a04DE = a072E;
    real _t04E0 = 0.5e0;
    vec4 _t04E1;
    real _t066F = 0.1e1;
    real _t0670;
    vec4 _t0671;
    vec4 _t0672 = (vec4)q003EE;
    _t0671 = _t0672;
    vec4 _t0673;
    vec4 _t0674 = (vec4)q003EE;
    _t0673 = _t0674;
    real result0675 = •00CE<$[4]; $[4]; $[]> (_t0671, _t0673);
    _t0670 = result0675;
    real _t0676 = sqrt015F (_t0670);
    real _t0677 = /0055 (_t066F, _t0676);
    vec4 x0678;
    vec4 _t0679;
    vec4 _t067A = (vec4)q003EE;
    _t0679 = _t067A;
    vec4 _t067B = *0036<$[4]> (_t0677, _t0679);
    vec4 _t067C;
    vec4 _t067D = (vec4)_t067B;
    _t067C = _t067D;
    x0678 = _t067C;
    real _t067E = 0.1e1;
    real _t067F;
    vec4 _t0680;
    vec4 _t0681 = (vec4)q103F4;
    _t0680 = _t0681;
    vec4 _t0682;
    vec4 _t0683 = (vec4)q103F4;
    _t0682 = _t0683;
    real result0684 = •00CE<$[4]; $[4]; $[]> (_t0680, _t0682);
    _t067F = result0684;
    real _t0685 = sqrt015F (_t067F);
    real _t0686 = /0055 (_t067E, _t0685);
    vec4 y0687;
    vec4 _t0688;
    vec4 _t0689 = (vec4)q103F4;
    _t0688 = _t0689;
    vec4 _t068A = *0036<$[4]> (_t0686, _t0688);
    vec4 _t068B;
    vec4 _t068C = (vec4)_t068A;
    _t068B = _t068C;
    y0687 = _t068B;
    real ang068D;
    real dot068E;
    vec4 _t068F;
    vec4 _t0690 = (vec4)x0678;
    _t068F = _t0690;
    vec4 _t0691;
    vec4 _t0692 = (vec4)y0687;
    _t0691 = _t0692;
    real result0693 = •00CE<$[4]; $[4]; $[]> (_t068F, _t0691);
    dot068E = result0693;
    real _t0694 = 0.e0;
    bool _t0695 = <007A (dot068E, _t0694);
    if _t0695 {
      vec4 _t0696;
      real _t0697 = 0.e0;
      real _t0698 = 0.e0;
      real _t0699 = 0.e0;
      real _t069A = 0.e0;
      vec4 _t069B = [_t0697, _t0698, _t0699, _t069A];
      vec4 _t069C;
      vec4 _t069D = (vec4)x0678;
      _t069C = _t069D;
      vec4 _t069E = -0026<$[4]> (_t069B, _t069C);
      vec4 result069F;
      vec4 _t06A0 = (vec4)_t069E;
      result069F = _t06A0;
      _t0696 = result069F;
      vec4 _t06A1;
      vec4 _t06A2;
      vec4 _t06A3 = (vec4)_t0696;
      _t06A2 = _t06A3;
      vec4 _t06A4;
      vec4 _t06A5 = (vec4)y0687;
      _t06A4 = _t06A5;
      vec4 _t06A6 = -0026<$[4]> (_t06A2, _t06A4);
      vec4 result06A7;
      vec4 _t06A8 = (vec4)_t06A6;
      result06A7 = _t06A8;
      _t06A1 = result06A7;
      vec4 _t06A9;
      real _t06AA = 0.e0;
      real _t06AB = 0.e0;
      real _t06AC = 0.e0;
      real _t06AD = 0.e0;
      vec4 _t06AE = [_t06AA, _t06AB, _t06AC, _t06AD];
      vec4 _t06AF;
      vec4 _t06B0 = (vec4)x0678;
      _t06AF = _t06B0;
      vec4 _t06B1 = -0026<$[4]> (_t06AE, _t06AF);
      vec4 result06B2;
      vec4 _t06B3 = (vec4)_t06B1;
      result06B2 = _t06B3;
      _t06A9 = result06B2;
      vec4 _t06B4;
      vec4 _t06B5;
      vec4 _t06B6 = (vec4)_t06A9;
      _t06B5 = _t06B6;
      vec4 _t06B7;
      vec4 _t06B8 = (vec4)y0687;
      _t06B7 = _t06B8;
      vec4 _t06B9 = -0026<$[4]> (_t06B5, _t06B7);
      vec4 result06BA;
      vec4 _t06BB = (vec4)_t06B9;
      result06BA = _t06BB;
      _t06B4 = result06BA;
      real _t06BC;
      vec4 _t06BD;
      vec4 _t06BE = (vec4)_t06A1;
      _t06BD = _t06BE;
      vec4 _t06BF;
      vec4 _t06C0 = (vec4)_t06B4;
      _t06BF = _t06C0;
      real result06C1 = •00CE<$[4]; $[4]; $[]> (_t06BD, _t06BF);
      _t06BC = result06C1;
      real _t06C2 = sqrt015F (_t06BC);
      real _t06C3 = 0.2e1;
      real arc06C4 = /0055 (_t06C2, _t06C3);
      real _t06C5 = 0.314159265358979323846264338327950288e1;
      real _t06C6 = 0.2e1;
      real _t06C7 = asin016F (arc06C4);
      real _t06C8 = *0034 (_t06C6, _t06C7);
      real _t06C9 = -0026<$[]> (_t06C5, _t06C8);
      ang068D = _t06C9;
    } else {
      vec4 _t06CA;
      vec4 _t06CB;
      vec4 _t06CC = (vec4)x0678;
      _t06CB = _t06CC;
      vec4 _t06CD;
      vec4 _t06CE = (vec4)y0687;
      _t06CD = _t06CE;
      vec4 _t06CF = -0026<$[4]> (_t06CB, _t06CD);
      vec4 result06D0;
      vec4 _t06D1 = (vec4)_t06CF;
      result06D0 = _t06D1;
      _t06CA = result06D0;
      vec4 _t06D2;
      vec4 _t06D3;
      vec4 _t06D4 = (vec4)x0678;
      _t06D3 = _t06D4;
      vec4 _t06D5;
      vec4 _t06D6 = (vec4)y0687;
      _t06D5 = _t06D6;
      vec4 _t06D7 = -0026<$[4]> (_t06D3, _t06D5);
      vec4 result06D8;
      vec4 _t06D9 = (vec4)_t06D7;
      result06D8 = _t06D9;
      _t06D2 = result06D8;
      real _t06DA;
      vec4 _t06DB;
      vec4 _t06DC = (vec4)_t06CA;
      _t06DB = _t06DC;
      vec4 _t06DD;
      vec4 _t06DE = (vec4)_t06D2;
      _t06DD = _t06DE;
      real result06DF = •00CE<$[4]; $[4]; $[]> (_t06DB, _t06DD);
      _t06DA = result06DF;
      real _t06E0 = sqrt015F (_t06DA);
      real _t06E1 = 0.2e1;
      real arc06E2 = /0055 (_t06E0, _t06E1);
      real _t06E3 = 0.2e1;
      real _t06E4 = asin016F (arc06E2);
      real _t06E5 = *0034 (_t06E3, _t06E4);
      ang068D = _t06E5;
    }
    real _t06E6 = 0.1e1;
    real _t06E7 = -0026<$[]> (_t06E6, _t04E0);
    real _t06E8 = *0034 (_t06E7, ang068D);
    real _t06E9;
    real _t06EA;
    real _t06EB = *0034 (_t06E8, _t06E8);
    real _t06EC = 0.1e1;
    real _t06ED = +0017<$[]> (_t06EB, _t06EC);
    real _t06EE = 0.1e1;
    bool _t06EF = ==0084 (_t06ED, _t06EE);
    if _t06EF {
      _t06EA = 0.1e1;
    } else {
      real _t06F0 = sin016B (_t06E8);
      _t06EA = /0055 (_t06F0, _t06E8);
    }
    _t06E9 = _t06EA;
    real _t06F1;
    real _t06F2;
    real _t06F3 = *0034 (ang068D, ang068D);
    real _t06F4 = 0.1e1;
    real _t06F5 = +0017<$[]> (_t06F3, _t06F4);
    real _t06F6 = 0.1e1;
    bool _t06F7 = ==0084 (_t06F5, _t06F6);
    if _t06F7 {
      _t06F2 = 0.1e1;
    } else {
      real _t06F8 = sin016B (ang068D);
      _t06F2 = /0055 (_t06F8, ang068D);
    }
    _t06F1 = _t06F2;
    real _t06F9 = /0055 (_t06E9, _t06F1);
    vec4 _t06FA;
    vec4 _t06FB;
    vec4 _t06FC = (vec4)x0678;
    _t06FB = _t06FC;
    vec4 _t06FD = *0036<$[4]> (_t06F9, _t06FB);
    vec4 _t06FE;
    vec4 _t06FF = (vec4)_t06FD;
    _t06FE = _t06FF;
    _t06FA = _t06FE;
    real _t0700 = 0.1e1;
    real _t0701 = -0026<$[]> (_t0700, _t04E0);
    vec4 _t0702;
    vec4 _t0703;
    vec4 _t0704 = (vec4)_t06FA;
    _t0703 = _t0704;
    vec4 _t0705 = *0036<$[4]> (_t0701, _t0703);
    vec4 _t0706;
    vec4 _t0707 = (vec4)_t0705;
    _t0706 = _t0707;
    _t0702 = _t0706;
    real _t0708 = *0034 (_t04E0, ang068D);
    real _t0709;
    real _t070A;
    real _t070B = *0034 (_t0708, _t0708);
    real _t070C = 0.1e1;
    real _t070D = +0017<$[]> (_t070B, _t070C);
    real _t070E = 0.1e1;
    bool _t070F = ==0084 (_t070D, _t070E);
    if _t070F {
      _t070A = 0.1e1;
    } else {
      real _t0710 = sin016B (_t0708);
      _t070A = /0055 (_t0710, _t0708);
    }
    _t0709 = _t070A;
    real _t0711;
    real _t0712;
    real _t0713 = *0034 (ang068D, ang068D);
    real _t0714 = 0.1e1;
    real _t0715 = +0017<$[]> (_t0713, _t0714);
    real _t0716 = 0.1e1;
    bool _t0717 = ==0084 (_t0715, _t0716);
    if _t0717 {
      _t0712 = 0.1e1;
    } else {
      real _t0718 = sin016B (ang068D);
      _t0712 = /0055 (_t0718, ang068D);
    }
    _t0711 = _t0712;
    real _t0719 = /0055 (_t0709, _t0711);
    vec4 _t071A;
    vec4 _t071B;
    vec4 _t071C = (vec4)y0687;
    _t071B = _t071C;
    vec4 _t071D = *0036<$[4]> (_t0719, _t071B);
    vec4 _t071E;
    vec4 _t071F = (vec4)_t071D;
    _t071E = _t071F;
    _t071A = _t071E;
    vec4 _t0720;
    vec4 _t0721;
    vec4 _t0722 = (vec4)_t071A;
    _t0721 = _t0722;
    vec4 _t0723 = *0036<$[4]> (_t04E0, _t0721);
    vec4 _t0724;
    vec4 _t0725 = (vec4)_t0723;
    _t0724 = _t0725;
    _t0720 = _t0724;
    vec4 result0726;
    vec4 _t0727;
    vec4 _t0728 = (vec4)_t0702;
    _t0727 = _t0728;
    vec4 _t0729;
    vec4 _t072A = (vec4)_t0720;
    _t0729 = _t072A;
    vec4 _t072B = +0017<$[4]> (_t0727, _t0729);
    vec4 result072C;
    vec4 _t072D = (vec4)_t072B;
    result072C = _t072D;
    result0726 = result072C;
    _t04E1 = result0726;
    vec4 frm066D;
    vec4 _t066E = (vec4)_t04E1;
    frm066D = _t066E;
    frm04DF = frm066D;
    real _t04E3 = 0.1e1;
    real _t04E4 = 0.e0;
    real _t04E5 = 0.e0;
    real _t04E6 = 0.e0;
    real _t04E7 = 0.e0;
    tensor[5] _t04E8 = [_t04E3, _t04E4, _t04E5, _t04E6, _t04E7];
    real q0665;
    real z0666 = 0.2e1;
    int _t0667 = 0;
    int _t0668 = 5;
    int[] _t0669 = $range01B9 (_t0667, _t0668);
    foreach j03FC in _t0669 {
      real _t066A = |()|00B5<$[5]> (_t04E8);
      real _t066B = (real)j03FC;
      real _t066C = +0017<$[]> (_t066A, _t066B);
      z0666 = +0017<$[]> (z0666, _t066C);
    }
    q0665 = z0666;
    q04E2 = q0665;
  }
  update
  {
    real z04E9 = 0.2e1;
    int _t04EA = 0;
    int _t04EB = 5;
    int[] _t04EC = $range01B9 (_t04EA, _t04EB);
    foreach j04EE in _t04EC {
      real _t04ED = |()|00B5<$[]> (b04D7);
      real _t04EF = (real)j04EE;
      real _t04F0 = +0017<$[]> (_t04ED, _t04EF);
      z04E9 = +0017<$[]> (z04E9, _t04F0);
      vec4 z1075A;
      vec4 _t075B;
      vec4 _t075C = (vec4)z104D8;
      _t075B = _t075C;
      vec4 _t075D;
      vec4 _t075E = (vec4)q103F4;
      _t075D = _t075E;
      vec4 _t075F = +0017<$[4]> (_t075B, _t075D);
      vec4 result0760;
      vec4 _t0761 = (vec4)_t075F;
      result0760 = _t0761;
      z1075A = result0760;
      z104D8 = z1075A;
    }
    string _t04F1 = " ";
    string _t04F2 = " ";
    vec4 _t04F3;
    vec4 _t0759 = (vec4)z104D8;
    _t04F3 = _t0759;
    string _t04F4 = " ";
    string _t04F5 = "\n";
    print (q04E2, _t04F1, z04E9, _t04F2, _t04F3, _t04F4, frm04DF, _t04F5);
    stabilize;
  }
}
grid(1) {
  int _t04F6 = 0;
  int _t04F7 = 1;
  int[] _t04F8 = $range01B9 (_t04F6, _t04F7);
  foreach i04F9 in _t04F8 {
    new f (i04F9);
  }
}
/* Program end */
/* Simplified Program (after after contraction (2)) start */
properties: GlobalInit,StrandArray,HasGlobals
constants { }
global vec4 q003EE;
global vec4 q103F4;
globalInit {
  real _t03E9 = 0.4e1;
  real _t03EA = 0.3e1;
  real _t03EB = 0.2e1;
  real _t03EC = 0.1e1;
  vec4 _t03ED = [_t03E9, _t03EA, _t03EB, _t03EC];
  vec4 q00663;
  vec4 _t0664 = (vec4)_t03ED;
  q00663 = _t0664;
  q003EE = q00663;
  real _t03EF = 0.1e1;
  real _t03F0 = 0.2e1;
  real _t03F1 = 0.3e1;
  real _t03F2 = 0.1e1;
  vec4 _t03F3 = [_t03EF, _t03F0, _t03F1, _t03F2];
  vec4 q10661;
  vec4 _t0662 = (vec4)_t03F3;
  q10661 = _t0662;
  q103F4 = q10661;
}
strand f (int i04D6) {
  real b04D7;
  vec4 z104D8;
  output real a04DE;
  output vec4 frm04DF;
  output real q04E2;
  {
    b04D7 = 0.1e1;
    real _t04D9 = 0.e0;
    real _t04DA = 0.e0;
    real _t04DB = 0.e0;
    real _t04DC = 0.e0;
    vec4 _t04DD = [_t04D9, _t04DA, _t04DB, _t04DC];
    vec4 z10757;
    vec4 _t0758 = (vec4)_t04DD;
    z10757 = _t0758;
    z104D8 = z10757;
    real a072E;
    real _t072F = 0.1e1;
    real _t0730;
    vec4 _t0731;
    vec4 _t0732 = (vec4)q003EE;
    _t0731 = _t0732;
    vec4 _t0733;
    vec4 _t0734 = (vec4)q003EE;
    _t0733 = _t0734;
    real result0735 = •00CE<$[4]; $[4]; $[]> (_t0731, _t0733);
    _t0730 = result0735;
    real _t0736 = sqrt015F (_t0730);
    real _t0737 = /0055 (_t072F, _t0736);
    vec4 x00738;
    vec4 _t0739;
    vec4 _t073A = (vec4)q003EE;
    _t0739 = _t073A;
    vec4 _t073B = *0036<$[4]> (_t0737, _t0739);
    vec4 _t073C;
    vec4 _t073D = (vec4)_t073B;
    _t073C = _t073D;
    x00738 = _t073C;
    real _t073E = 0.1e1;
    real _t073F;
    vec4 _t0740;
    vec4 _t0741 = (vec4)q103F4;
    _t0740 = _t0741;
    vec4 _t0742;
    vec4 _t0743 = (vec4)q103F4;
    _t0742 = _t0743;
    real result0744 = •00CE<$[4]; $[4]; $[]> (_t0740, _t0742);
    _t073F = result0744;
    real _t0745 = sqrt015F (_t073F);
    real _t0746 = /0055 (_t073E, _t0745);
    vec4 y00747;
    vec4 _t0748;
    vec4 _t0749 = (vec4)q103F4;
    _t0748 = _t0749;
    vec4 _t074A = *0036<$[4]> (_t0746, _t0748);
    vec4 _t074B;
    vec4 _t074C = (vec4)_t074A;
    _t074B = _t074C;
    y00747 = _t074B;
    real _t074D = 0.1e1;
    real _t074E;
    vec4 _t074F;
    vec4 _t0750 = (vec4)x00738;
    _t074F = _t0750;
    vec4 _t0751;
    vec4 _t0752 = (vec4)y00747;
    _t0751 = _t0752;
    real result0753 = •00CE<$[4]; $[4]; $[]> (_t074F, _t0751);
    _t074E = result0753;
    int _t0754 = 2;
    real _t0755 = ^0068 (_t074E, _t0754);
    real _t0756 = -0026<$[]> (_t074D, _t0755);
    a072E = _t0756;
    a04DE = a072E;
    real _t04E0 = 0.5e0;
    vec4 _t04E1;
    real _t066F = 0.1e1;
    real _t0670;
    vec4 _t0671;
    vec4 _t0672 = (vec4)q003EE;
    _t0671 = _t0672;
    vec4 _t0673;
    vec4 _t0674 = (vec4)q003EE;
    _t0673 = _t0674;
    real result0675 = •00CE<$[4]; $[4]; $[]> (_t0671, _t0673);
    _t0670 = result0675;
    real _t0676 = sqrt015F (_t0670);
    real _t0677 = /0055 (_t066F, _t0676);
    vec4 x0678;
    vec4 _t0679;
    vec4 _t067A = (vec4)q003EE;
    _t0679 = _t067A;
    vec4 _t067B = *0036<$[4]> (_t0677, _t0679);
    vec4 _t067C;
    vec4 _t067D = (vec4)_t067B;
    _t067C = _t067D;
    x0678 = _t067C;
    real _t067E = 0.1e1;
    real _t067F;
    vec4 _t0680;
    vec4 _t0681 = (vec4)q103F4;
    _t0680 = _t0681;
    vec4 _t0682;
    vec4 _t0683 = (vec4)q103F4;
    _t0682 = _t0683;
    real result0684 = •00CE<$[4]; $[4]; $[]> (_t0680, _t0682);
    _t067F = result0684;
    real _t0685 = sqrt015F (_t067F);
    real _t0686 = /0055 (_t067E, _t0685);
    vec4 y0687;
    vec4 _t0688;
    vec4 _t0689 = (vec4)q103F4;
    _t0688 = _t0689;
    vec4 _t068A = *0036<$[4]> (_t0686, _t0688);
    vec4 _t068B;
    vec4 _t068C = (vec4)_t068A;
    _t068B = _t068C;
    y0687 = _t068B;
    real ang068D;
    real dot068E;
    vec4 _t068F;
    vec4 _t0690 = (vec4)x0678;
    _t068F = _t0690;
    vec4 _t0691;
    vec4 _t0692 = (vec4)y0687;
    _t0691 = _t0692;
    real result0693 = •00CE<$[4]; $[4]; $[]> (_t068F, _t0691);
    dot068E = result0693;
    real _t0694 = 0.e0;
    bool _t0695 = <007A (dot068E, _t0694);
    if _t0695 {
      vec4 _t0696;
      real _t0697 = 0.e0;
      real _t0698 = 0.e0;
      real _t0699 = 0.e0;
      real _t069A = 0.e0;
      vec4 _t069B = [_t0697, _t0698, _t0699, _t069A];
      vec4 _t069C;
      vec4 _t069D = (vec4)x0678;
      _t069C = _t069D;
      vec4 _t069E = -0026<$[4]> (_t069B, _t069C);
      vec4 result069F;
      vec4 _t06A0 = (vec4)_t069E;
      result069F = _t06A0;
      _t0696 = result069F;
      vec4 _t06A1;
      vec4 _t06A2;
      vec4 _t06A3 = (vec4)_t0696;
      _t06A2 = _t06A3;
      vec4 _t06A4;
      vec4 _t06A5 = (vec4)y0687;
      _t06A4 = _t06A5;
      vec4 _t06A6 = -0026<$[4]> (_t06A2, _t06A4);
      vec4 result06A7;
      vec4 _t06A8 = (vec4)_t06A6;
      result06A7 = _t06A8;
      _t06A1 = result06A7;
      vec4 _t06A9;
      real _t06AA = 0.e0;
      real _t06AB = 0.e0;
      real _t06AC = 0.e0;
      real _t06AD = 0.e0;
      vec4 _t06AE = [_t06AA, _t06AB, _t06AC, _t06AD];
      vec4 _t06AF;
      vec4 _t06B0 = (vec4)x0678;
      _t06AF = _t06B0;
      vec4 _t06B1 = -0026<$[4]> (_t06AE, _t06AF);
      vec4 result06B2;
      vec4 _t06B3 = (vec4)_t06B1;
      result06B2 = _t06B3;
      _t06A9 = result06B2;
      vec4 _t06B4;
      vec4 _t06B5;
      vec4 _t06B6 = (vec4)_t06A9;
      _t06B5 = _t06B6;
      vec4 _t06B7;
      vec4 _t06B8 = (vec4)y0687;
      _t06B7 = _t06B8;
      vec4 _t06B9 = -0026<$[4]> (_t06B5, _t06B7);
      vec4 result06BA;
      vec4 _t06BB = (vec4)_t06B9;
      result06BA = _t06BB;
      _t06B4 = result06BA;
      real _t06BC;
      vec4 _t06BD;
      vec4 _t06BE = (vec4)_t06A1;
      _t06BD = _t06BE;
      vec4 _t06BF;
      vec4 _t06C0 = (vec4)_t06B4;
      _t06BF = _t06C0;
      real result06C1 = •00CE<$[4]; $[4]; $[]> (_t06BD, _t06BF);
      _t06BC = result06C1;
      real _t06C2 = sqrt015F (_t06BC);
      real _t06C3 = 0.2e1;
      real arc06C4 = /0055 (_t06C2, _t06C3);
      real _t06C5 = 0.314159265358979323846264338327950288e1;
      real _t06C6 = 0.2e1;
      real _t06C7 = asin016F (arc06C4);
      real _t06C8 = *0034 (_t06C6, _t06C7);
      real _t06C9 = -0026<$[]> (_t06C5, _t06C8);
      ang068D = _t06C9;
    } else {
      vec4 _t06CA;
      vec4 _t06CB;
      vec4 _t06CC = (vec4)x0678;
      _t06CB = _t06CC;
      vec4 _t06CD;
      vec4 _t06CE = (vec4)y0687;
      _t06CD = _t06CE;
      vec4 _t06CF = -0026<$[4]> (_t06CB, _t06CD);
      vec4 result06D0;
      vec4 _t06D1 = (vec4)_t06CF;
      result06D0 = _t06D1;
      _t06CA = result06D0;
      vec4 _t06D2;
      vec4 _t06D3;
      vec4 _t06D4 = (vec4)x0678;
      _t06D3 = _t06D4;
      vec4 _t06D5;
      vec4 _t06D6 = (vec4)y0687;
      _t06D5 = _t06D6;
      vec4 _t06D7 = -0026<$[4]> (_t06D3, _t06D5);
      vec4 result06D8;
      vec4 _t06D9 = (vec4)_t06D7;
      result06D8 = _t06D9;
      _t06D2 = result06D8;
      real _t06DA;
      vec4 _t06DB;
      vec4 _t06DC = (vec4)_t06CA;
      _t06DB = _t06DC;
      vec4 _t06DD;
      vec4 _t06DE = (vec4)_t06D2;
      _t06DD = _t06DE;
      real result06DF = •00CE<$[4]; $[4]; $[]> (_t06DB, _t06DD);
      _t06DA = result06DF;
      real _t06E0 = sqrt015F (_t06DA);
      real _t06E1 = 0.2e1;
      real arc06E2 = /0055 (_t06E0, _t06E1);
      real _t06E3 = 0.2e1;
      real _t06E4 = asin016F (arc06E2);
      real _t06E5 = *0034 (_t06E3, _t06E4);
      ang068D = _t06E5;
    }
    real _t06E6 = 0.1e1;
    real _t06E7 = -0026<$[]> (_t06E6, _t04E0);
    real _t06E8 = *0034 (_t06E7, ang068D);
    real _t06E9;
    real _t06EA;
    real _t06EB = *0034 (_t06E8, _t06E8);
    real _t06EC = 0.1e1;
    real _t06ED = +0017<$[]> (_t06EB, _t06EC);
    real _t06EE = 0.1e1;
    bool _t06EF = ==0084 (_t06ED, _t06EE);
    if _t06EF {
      _t06EA = 0.1e1;
    } else {
      real _t06F0 = sin016B (_t06E8);
      _t06EA = /0055 (_t06F0, _t06E8);
    }
    _t06E9 = _t06EA;
    real _t06F1;
    real _t06F2;
    real _t06F3 = *0034 (ang068D, ang068D);
    real _t06F4 = 0.1e1;
    real _t06F5 = +0017<$[]> (_t06F3, _t06F4);
    real _t06F6 = 0.1e1;
    bool _t06F7 = ==0084 (_t06F5, _t06F6);
    if _t06F7 {
      _t06F2 = 0.1e1;
    } else {
      real _t06F8 = sin016B (ang068D);
      _t06F2 = /0055 (_t06F8, ang068D);
    }
    _t06F1 = _t06F2;
    real _t06F9 = /0055 (_t06E9, _t06F1);
    vec4 _t06FA;
    vec4 _t06FB;
    vec4 _t06FC = (vec4)x0678;
    _t06FB = _t06FC;
    vec4 _t06FD = *0036<$[4]> (_t06F9, _t06FB);
    vec4 _t06FE;
    vec4 _t06FF = (vec4)_t06FD;
    _t06FE = _t06FF;
    _t06FA = _t06FE;
    real _t0700 = 0.1e1;
    real _t0701 = -0026<$[]> (_t0700, _t04E0);
    vec4 _t0702;
    vec4 _t0703;
    vec4 _t0704 = (vec4)_t06FA;
    _t0703 = _t0704;
    vec4 _t0705 = *0036<$[4]> (_t0701, _t0703);
    vec4 _t0706;
    vec4 _t0707 = (vec4)_t0705;
    _t0706 = _t0707;
    _t0702 = _t0706;
    real _t0708 = *0034 (_t04E0, ang068D);
    real _t0709;
    real _t070A;
    real _t070B = *0034 (_t0708, _t0708);
    real _t070C = 0.1e1;
    real _t070D = +0017<$[]> (_t070B, _t070C);
    real _t070E = 0.1e1;
    bool _t070F = ==0084 (_t070D, _t070E);
    if _t070F {
      _t070A = 0.1e1;
    } else {
      real _t0710 = sin016B (_t0708);
      _t070A = /0055 (_t0710, _t0708);
    }
    _t0709 = _t070A;
    real _t0711;
    real _t0712;
    real _t0713 = *0034 (ang068D, ang068D);
    real _t0714 = 0.1e1;
    real _t0715 = +0017<$[]> (_t0713, _t0714);
    real _t0716 = 0.1e1;
    bool _t0717 = ==0084 (_t0715, _t0716);
    if _t0717 {
      _t0712 = 0.1e1;
    } else {
      real _t0718 = sin016B (ang068D);
      _t0712 = /0055 (_t0718, ang068D);
    }
    _t0711 = _t0712;
    real _t0719 = /0055 (_t0709, _t0711);
    vec4 _t071A;
    vec4 _t071B;
    vec4 _t071C = (vec4)y0687;
    _t071B = _t071C;
    vec4 _t071D = *0036<$[4]> (_t0719, _t071B);
    vec4 _t071E;
    vec4 _t071F = (vec4)_t071D;
    _t071E = _t071F;
    _t071A = _t071E;
    vec4 _t0720;
    vec4 _t0721;
    vec4 _t0722 = (vec4)_t071A;
    _t0721 = _t0722;
    vec4 _t0723 = *0036<$[4]> (_t04E0, _t0721);
    vec4 _t0724;
    vec4 _t0725 = (vec4)_t0723;
    _t0724 = _t0725;
    _t0720 = _t0724;
    vec4 result0726;
    vec4 _t0727;
    vec4 _t0728 = (vec4)_t0702;
    _t0727 = _t0728;
    vec4 _t0729;
    vec4 _t072A = (vec4)_t0720;
    _t0729 = _t072A;
    vec4 _t072B = +0017<$[4]> (_t0727, _t0729);
    vec4 result072C;
    vec4 _t072D = (vec4)_t072B;
    result072C = _t072D;
    result0726 = result072C;
    _t04E1 = result0726;
    vec4 frm066D;
    vec4 _t066E = (vec4)_t04E1;
    frm066D = _t066E;
    frm04DF = frm066D;
    real _t04E3 = 0.1e1;
    real _t04E4 = 0.e0;
    real _t04E5 = 0.e0;
    real _t04E6 = 0.e0;
    real _t04E7 = 0.e0;
    tensor[5] _t04E8 = [_t04E3, _t04E4, _t04E5, _t04E6, _t04E7];
    real q0665;
    real z0666 = 0.2e1;
    int _t0667 = 0;
    int _t0668 = 5;
    int[] _t0669 = $range01B9 (_t0667, _t0668);
    foreach j03FC in _t0669 {
      real _t066A = |()|00B5<$[5]> (_t04E8);
      real _t066B = (real)j03FC;
      real _t066C = +0017<$[]> (_t066A, _t066B);
      z0666 = +0017<$[]> (z0666, _t066C);
    }
    q0665 = z0666;
    q04E2 = q0665;
  }
  update
  {
    real z04E9 = 0.2e1;
    int _t04EA = 0;
    int _t04EB = 5;
    int[] _t04EC = $range01B9 (_t04EA, _t04EB);
    foreach j04EE in _t04EC {
      real _t04ED = |()|00B5<$[]> (b04D7);
      real _t04EF = (real)j04EE;
      real _t04F0 = +0017<$[]> (_t04ED, _t04EF);
      z04E9 = +0017<$[]> (z04E9, _t04F0);
      vec4 z1075A;
      vec4 _t075B;
      vec4 _t075C = (vec4)z104D8;
      _t075B = _t075C;
      vec4 _t075D;
      vec4 _t075E = (vec4)q103F4;
      _t075D = _t075E;
      vec4 _t075F = +0017<$[4]> (_t075B, _t075D);
      vec4 result0760;
      vec4 _t0761 = (vec4)_t075F;
      result0760 = _t0761;
      z1075A = result0760;
      z104D8 = z1075A;
    }
    string _t04F1 = " ";
    string _t04F2 = " ";
    vec4 _t04F3;
    vec4 _t0759 = (vec4)z104D8;
    _t04F3 = _t0759;
    string _t04F4 = " ";
    string _t04F5 = "\n";
    print (q04E2, _t04F1, z04E9, _t04F2, _t04F3, _t04F4, frm04DF, _t04F5);
    stabilize;
  }
}
grid(1) {
  int _t04F6 = 0;
  int _t04F7 = 1;
  int[] _t04F8 = $range01B9 (_t04F6, _t04F7);
  foreach i04F9 in _t04F8 {
    new f (i04F9);
  }
}
/* Program end */
/* Simplified Program (after after simplify fields) start */
properties: GlobalInit,StrandArray,HasGlobals
constants { }
global vec4 q003EE;
global vec4 q103F4;
globalInit {
  real _t03E9 = 0.4e1;
  real _t03EA = 0.3e1;
  real _t03EB = 0.2e1;
  real _t03EC = 0.1e1;
  vec4 _t03ED = [_t03E9, _t03EA, _t03EB, _t03EC];
  vec4 q00663;
  vec4 _t0664 = (vec4)_t03ED;
  q00663 = _t0664;
  q003EE = q00663;
  real _t03EF = 0.1e1;
  real _t03F0 = 0.2e1;
  real _t03F1 = 0.3e1;
  real _t03F2 = 0.1e1;
  vec4 _t03F3 = [_t03EF, _t03F0, _t03F1, _t03F2];
  vec4 q10661;
  vec4 _t0662 = (vec4)_t03F3;
  q10661 = _t0662;
  q103F4 = q10661;
}
strand f (int i04D6) {
  real b04D7;
  vec4 z104D8;
  output real a04DE;
  output vec4 frm04DF;
  output real q04E2;
  {
    b04D7 = 0.1e1;
    real _t04D9 = 0.e0;
    real _t04DA = 0.e0;
    real _t04DB = 0.e0;
    real _t04DC = 0.e0;
    vec4 _t04DD = [_t04D9, _t04DA, _t04DB, _t04DC];
    vec4 z10757;
    vec4 _t0758 = (vec4)_t04DD;
    z10757 = _t0758;
    z104D8 = z10757;
    real a072E;
    real _t072F = 0.1e1;
    real _t0730;
    vec4 _t0731;
    vec4 _t0732 = (vec4)q003EE;
    _t0731 = _t0732;
    vec4 _t0733;
    vec4 _t0734 = (vec4)q003EE;
    _t0733 = _t0734;
    real result0735 = •00CE<$[4]; $[4]; $[]> (_t0731, _t0733);
    _t0730 = result0735;
    real _t0736 = sqrt015F (_t0730);
    real _t0737 = /0055 (_t072F, _t0736);
    vec4 x00738;
    vec4 _t0739;
    vec4 _t073A = (vec4)q003EE;
    _t0739 = _t073A;
    vec4 _t073B = *0036<$[4]> (_t0737, _t0739);
    vec4 _t073C;
    vec4 _t073D = (vec4)_t073B;
    _t073C = _t073D;
    x00738 = _t073C;
    real _t073E = 0.1e1;
    real _t073F;
    vec4 _t0740;
    vec4 _t0741 = (vec4)q103F4;
    _t0740 = _t0741;
    vec4 _t0742;
    vec4 _t0743 = (vec4)q103F4;
    _t0742 = _t0743;
    real result0744 = •00CE<$[4]; $[4]; $[]> (_t0740, _t0742);
    _t073F = result0744;
    real _t0745 = sqrt015F (_t073F);
    real _t0746 = /0055 (_t073E, _t0745);
    vec4 y00747;
    vec4 _t0748;
    vec4 _t0749 = (vec4)q103F4;
    _t0748 = _t0749;
    vec4 _t074A = *0036<$[4]> (_t0746, _t0748);
    vec4 _t074B;
    vec4 _t074C = (vec4)_t074A;
    _t074B = _t074C;
    y00747 = _t074B;
    real _t074D = 0.1e1;
    real _t074E;
    vec4 _t074F;
    vec4 _t0750 = (vec4)x00738;
    _t074F = _t0750;
    vec4 _t0751;
    vec4 _t0752 = (vec4)y00747;
    _t0751 = _t0752;
    real result0753 = •00CE<$[4]; $[4]; $[]> (_t074F, _t0751);
    _t074E = result0753;
    int _t0754 = 2;
    real _t0755 = ^0068 (_t074E, _t0754);
    real _t0756 = -0026<$[]> (_t074D, _t0755);
    a072E = _t0756;
    a04DE = a072E;
    real _t04E0 = 0.5e0;
    vec4 _t04E1;
    real _t066F = 0.1e1;
    real _t0670;
    vec4 _t0671;
    vec4 _t0672 = (vec4)q003EE;
    _t0671 = _t0672;
    vec4 _t0673;
    vec4 _t0674 = (vec4)q003EE;
    _t0673 = _t0674;
    real result0675 = •00CE<$[4]; $[4]; $[]> (_t0671, _t0673);
    _t0670 = result0675;
    real _t0676 = sqrt015F (_t0670);
    real _t0677 = /0055 (_t066F, _t0676);
    vec4 x0678;
    vec4 _t0679;
    vec4 _t067A = (vec4)q003EE;
    _t0679 = _t067A;
    vec4 _t067B = *0036<$[4]> (_t0677, _t0679);
    vec4 _t067C;
    vec4 _t067D = (vec4)_t067B;
    _t067C = _t067D;
    x0678 = _t067C;
    real _t067E = 0.1e1;
    real _t067F;
    vec4 _t0680;
    vec4 _t0681 = (vec4)q103F4;
    _t0680 = _t0681;
    vec4 _t0682;
    vec4 _t0683 = (vec4)q103F4;
    _t0682 = _t0683;
    real result0684 = •00CE<$[4]; $[4]; $[]> (_t0680, _t0682);
    _t067F = result0684;
    real _t0685 = sqrt015F (_t067F);
    real _t0686 = /0055 (_t067E, _t0685);
    vec4 y0687;
    vec4 _t0688;
    vec4 _t0689 = (vec4)q103F4;
    _t0688 = _t0689;
    vec4 _t068A = *0036<$[4]> (_t0686, _t0688);
    vec4 _t068B;
    vec4 _t068C = (vec4)_t068A;
    _t068B = _t068C;
    y0687 = _t068B;
    real ang068D;
    real dot068E;
    vec4 _t068F;
    vec4 _t0690 = (vec4)x0678;
    _t068F = _t0690;
    vec4 _t0691;
    vec4 _t0692 = (vec4)y0687;
    _t0691 = _t0692;
    real result0693 = •00CE<$[4]; $[4]; $[]> (_t068F, _t0691);
    dot068E = result0693;
    real _t0694 = 0.e0;
    bool _t0695 = <007A (dot068E, _t0694);
    if _t0695 {
      vec4 _t0696;
      real _t0697 = 0.e0;
      real _t0698 = 0.e0;
      real _t0699 = 0.e0;
      real _t069A = 0.e0;
      vec4 _t069B = [_t0697, _t0698, _t0699, _t069A];
      vec4 _t069C;
      vec4 _t069D = (vec4)x0678;
      _t069C = _t069D;
      vec4 _t069E = -0026<$[4]> (_t069B, _t069C);
      vec4 result069F;
      vec4 _t06A0 = (vec4)_t069E;
      result069F = _t06A0;
      _t0696 = result069F;
      vec4 _t06A1;
      vec4 _t06A2;
      vec4 _t06A3 = (vec4)_t0696;
      _t06A2 = _t06A3;
      vec4 _t06A4;
      vec4 _t06A5 = (vec4)y0687;
      _t06A4 = _t06A5;
      vec4 _t06A6 = -0026<$[4]> (_t06A2, _t06A4);
      vec4 result06A7;
      vec4 _t06A8 = (vec4)_t06A6;
      result06A7 = _t06A8;
      _t06A1 = result06A7;
      vec4 _t06A9;
      real _t06AA = 0.e0;
      real _t06AB = 0.e0;
      real _t06AC = 0.e0;
      real _t06AD = 0.e0;
      vec4 _t06AE = [_t06AA, _t06AB, _t06AC, _t06AD];
      vec4 _t06AF;
      vec4 _t06B0 = (vec4)x0678;
      _t06AF = _t06B0;
      vec4 _t06B1 = -0026<$[4]> (_t06AE, _t06AF);
      vec4 result06B2;
      vec4 _t06B3 = (vec4)_t06B1;
      result06B2 = _t06B3;
      _t06A9 = result06B2;
      vec4 _t06B4;
      vec4 _t06B5;
      vec4 _t06B6 = (vec4)_t06A9;
      _t06B5 = _t06B6;
      vec4 _t06B7;
      vec4 _t06B8 = (vec4)y0687;
      _t06B7 = _t06B8;
      vec4 _t06B9 = -0026<$[4]> (_t06B5, _t06B7);
      vec4 result06BA;
      vec4 _t06BB = (vec4)_t06B9;
      result06BA = _t06BB;
      _t06B4 = result06BA;
      real _t06BC;
      vec4 _t06BD;
      vec4 _t06BE = (vec4)_t06A1;
      _t06BD = _t06BE;
      vec4 _t06BF;
      vec4 _t06C0 = (vec4)_t06B4;
      _t06BF = _t06C0;
      real result06C1 = •00CE<$[4]; $[4]; $[]> (_t06BD, _t06BF);
      _t06BC = result06C1;
      real _t06C2 = sqrt015F (_t06BC);
      real _t06C3 = 0.2e1;
      real arc06C4 = /0055 (_t06C2, _t06C3);
      real _t06C5 = 0.314159265358979323846264338327950288e1;
      real _t06C6 = 0.2e1;
      real _t06C7 = asin016F (arc06C4);
      real _t06C8 = *0034 (_t06C6, _t06C7);
      real _t06C9 = -0026<$[]> (_t06C5, _t06C8);
      ang068D = _t06C9;
    } else {
      vec4 _t06CA;
      vec4 _t06CB;
      vec4 _t06CC = (vec4)x0678;
      _t06CB = _t06CC;
      vec4 _t06CD;
      vec4 _t06CE = (vec4)y0687;
      _t06CD = _t06CE;
      vec4 _t06CF = -0026<$[4]> (_t06CB, _t06CD);
      vec4 result06D0;
      vec4 _t06D1 = (vec4)_t06CF;
      result06D0 = _t06D1;
      _t06CA = result06D0;
      vec4 _t06D2;
      vec4 _t06D3;
      vec4 _t06D4 = (vec4)x0678;
      _t06D3 = _t06D4;
      vec4 _t06D5;
      vec4 _t06D6 = (vec4)y0687;
      _t06D5 = _t06D6;
      vec4 _t06D7 = -0026<$[4]> (_t06D3, _t06D5);
      vec4 result06D8;
      vec4 _t06D9 = (vec4)_t06D7;
      result06D8 = _t06D9;
      _t06D2 = result06D8;
      real _t06DA;
      vec4 _t06DB;
      vec4 _t06DC = (vec4)_t06CA;
      _t06DB = _t06DC;
      vec4 _t06DD;
      vec4 _t06DE = (vec4)_t06D2;
      _t06DD = _t06DE;
      real result06DF = •00CE<$[4]; $[4]; $[]> (_t06DB, _t06DD);
      _t06DA = result06DF;
      real _t06E0 = sqrt015F (_t06DA);
      real _t06E1 = 0.2e1;
      real arc06E2 = /0055 (_t06E0, _t06E1);
      real _t06E3 = 0.2e1;
      real _t06E4 = asin016F (arc06E2);
      real _t06E5 = *0034 (_t06E3, _t06E4);
      ang068D = _t06E5;
    }
    real _t06E6 = 0.1e1;
    real _t06E7 = -0026<$[]> (_t06E6, _t04E0);
    real _t06E8 = *0034 (_t06E7, ang068D);
    real _t06E9;
    real _t06EA;
    real _t06EB = *0034 (_t06E8, _t06E8);
    real _t06EC = 0.1e1;
    real _t06ED = +0017<$[]> (_t06EB, _t06EC);
    real _t06EE = 0.1e1;
    bool _t06EF = ==0084 (_t06ED, _t06EE);
    if _t06EF {
      _t06EA = 0.1e1;
    } else {
      real _t06F0 = sin016B (_t06E8);
      _t06EA = /0055 (_t06F0, _t06E8);
    }
    _t06E9 = _t06EA;
    real _t06F1;
    real _t06F2;
    real _t06F3 = *0034 (ang068D, ang068D);
    real _t06F4 = 0.1e1;
    real _t06F5 = +0017<$[]> (_t06F3, _t06F4);
    real _t06F6 = 0.1e1;
    bool _t06F7 = ==0084 (_t06F5, _t06F6);
    if _t06F7 {
      _t06F2 = 0.1e1;
    } else {
      real _t06F8 = sin016B (ang068D);
      _t06F2 = /0055 (_t06F8, ang068D);
    }
    _t06F1 = _t06F2;
    real _t06F9 = /0055 (_t06E9, _t06F1);
    vec4 _t06FA;
    vec4 _t06FB;
    vec4 _t06FC = (vec4)x0678;
    _t06FB = _t06FC;
    vec4 _t06FD = *0036<$[4]> (_t06F9, _t06FB);
    vec4 _t06FE;
    vec4 _t06FF = (vec4)_t06FD;
    _t06FE = _t06FF;
    _t06FA = _t06FE;
    real _t0700 = 0.1e1;
    real _t0701 = -0026<$[]> (_t0700, _t04E0);
    vec4 _t0702;
    vec4 _t0703;
    vec4 _t0704 = (vec4)_t06FA;
    _t0703 = _t0704;
    vec4 _t0705 = *0036<$[4]> (_t0701, _t0703);
    vec4 _t0706;
    vec4 _t0707 = (vec4)_t0705;
    _t0706 = _t0707;
    _t0702 = _t0706;
    real _t0708 = *0034 (_t04E0, ang068D);
    real _t0709;
    real _t070A;
    real _t070B = *0034 (_t0708, _t0708);
    real _t070C = 0.1e1;
    real _t070D = +0017<$[]> (_t070B, _t070C);
    real _t070E = 0.1e1;
    bool _t070F = ==0084 (_t070D, _t070E);
    if _t070F {
      _t070A = 0.1e1;
    } else {
      real _t0710 = sin016B (_t0708);
      _t070A = /0055 (_t0710, _t0708);
    }
    _t0709 = _t070A;
    real _t0711;
    real _t0712;
    real _t0713 = *0034 (ang068D, ang068D);
    real _t0714 = 0.1e1;
    real _t0715 = +0017<$[]> (_t0713, _t0714);
    real _t0716 = 0.1e1;
    bool _t0717 = ==0084 (_t0715, _t0716);
    if _t0717 {
      _t0712 = 0.1e1;
    } else {
      real _t0718 = sin016B (ang068D);
      _t0712 = /0055 (_t0718, ang068D);
    }
    _t0711 = _t0712;
    real _t0719 = /0055 (_t0709, _t0711);
    vec4 _t071A;
    vec4 _t071B;
    vec4 _t071C = (vec4)y0687;
    _t071B = _t071C;
    vec4 _t071D = *0036<$[4]> (_t0719, _t071B);
    vec4 _t071E;
    vec4 _t071F = (vec4)_t071D;
    _t071E = _t071F;
    _t071A = _t071E;
    vec4 _t0720;
    vec4 _t0721;
    vec4 _t0722 = (vec4)_t071A;
    _t0721 = _t0722;
    vec4 _t0723 = *0036<$[4]> (_t04E0, _t0721);
    vec4 _t0724;
    vec4 _t0725 = (vec4)_t0723;
    _t0724 = _t0725;
    _t0720 = _t0724;
    vec4 result0726;
    vec4 _t0727;
    vec4 _t0728 = (vec4)_t0702;
    _t0727 = _t0728;
    vec4 _t0729;
    vec4 _t072A = (vec4)_t0720;
    _t0729 = _t072A;
    vec4 _t072B = +0017<$[4]> (_t0727, _t0729);
    vec4 result072C;
    vec4 _t072D = (vec4)_t072B;
    result072C = _t072D;
    result0726 = result072C;
    _t04E1 = result0726;
    vec4 frm066D;
    vec4 _t066E = (vec4)_t04E1;
    frm066D = _t066E;
    frm04DF = frm066D;
    real _t04E3 = 0.1e1;
    real _t04E4 = 0.e0;
    real _t04E5 = 0.e0;
    real _t04E6 = 0.e0;
    real _t04E7 = 0.e0;
    tensor[5] _t04E8 = [_t04E3, _t04E4, _t04E5, _t04E6, _t04E7];
    real q0665;
    real z0666 = 0.2e1;
    int _t0667 = 0;
    int _t0668 = 5;
    int[] _t0669 = $range01B9 (_t0667, _t0668);
    foreach j03FC in _t0669 {
      real _t066A = |()|00B5<$[5]> (_t04E8);
      real _t066B = (real)j03FC;
      real _t066C = +0017<$[]> (_t066A, _t066B);
      z0666 = +0017<$[]> (z0666, _t066C);
    }
    q0665 = z0666;
    q04E2 = q0665;
  }
  update
  {
    real z04E9 = 0.2e1;
    int _t04EA = 0;
    int _t04EB = 5;
    int[] _t04EC = $range01B9 (_t04EA, _t04EB);
    foreach j04EE in _t04EC {
      real _t04ED = |()|00B5<$[]> (b04D7);
      real _t04EF = (real)j04EE;
      real _t04F0 = +0017<$[]> (_t04ED, _t04EF);
      z04E9 = +0017<$[]> (z04E9, _t04F0);
      vec4 z1075A;
      vec4 _t075B;
      vec4 _t075C = (vec4)z104D8;
      _t075B = _t075C;
      vec4 _t075D;
      vec4 _t075E = (vec4)q103F4;
      _t075D = _t075E;
      vec4 _t075F = +0017<$[4]> (_t075B, _t075D);
      vec4 result0760;
      vec4 _t0761 = (vec4)_t075F;
      result0760 = _t0761;
      z1075A = result0760;
      z104D8 = z1075A;
    }
    string _t04F1 = " ";
    string _t04F2 = " ";
    vec4 _t04F3;
    vec4 _t0759 = (vec4)z104D8;
    _t04F3 = _t0759;
    string _t04F4 = " ";
    string _t04F5 = "\n";
    print (q04E2, _t04F1, z04E9, _t04F2, _t04F3, _t04F4, frm04DF, _t04F5);
    stabilize;
  }
}
grid(1) {
  int _t04F6 = 0;
  int _t04F7 = 1;
  int[] _t04F8 = $range01B9 (_t04F6, _t04F7);
  foreach i04F9 in _t04F8 {
    new f (i04F9);
  }
}
/* Program end */
/* Simplified Program (after after simplify variables) start */
properties: GlobalInit,StrandArray,HasGlobals
constants { }
global vec4 q003EE;
global vec4 q103F4;
globalInit {
  real _t03E9 = 0.4e1;
  real _t03EA = 0.3e1;
  real _t03EB = 0.2e1;
  real _t03EC = 0.1e1;
  vec4 _t03ED = [_t03E9, _t03EA, _t03EB, _t03EC];
  vec4 q00663;
  vec4 _t0664 = (vec4)_t03ED;
  q00663 = _t0664;
  q003EE = q00663;
  real _t03EF = 0.1e1;
  real _t03F0 = 0.2e1;
  real _t03F1 = 0.3e1;
  real _t03F2 = 0.1e1;
  vec4 _t03F3 = [_t03EF, _t03F0, _t03F1, _t03F2];
  vec4 q10661;
  vec4 _t0662 = (vec4)_t03F3;
  q10661 = _t0662;
  q103F4 = q10661;
}
strand f (int i04D6) {
  real b04D7;
  vec4 z104D8;
  output real a04DE;
  output vec4 frm04DF;
  output real q04E2;
  {
    b04D7 = 0.1e1;
    real _t04D9 = 0.e0;
    real _t04DA = 0.e0;
    real _t04DB = 0.e0;
    real _t04DC = 0.e0;
    vec4 _t04DD = [_t04D9, _t04DA, _t04DB, _t04DC];
    vec4 z10757;
    vec4 _t0758 = (vec4)_t04DD;
    z10757 = _t0758;
    z104D8 = z10757;
    real a072E;
    real _t072F = 0.1e1;
    real _t0730;
    vec4 _t0731;
    vec4 _t0732 = (vec4)q003EE;
    _t0731 = _t0732;
    vec4 _t0733;
    vec4 _t0734 = (vec4)q003EE;
    _t0733 = _t0734;
    real result0735 = •00CE<$[4]; $[4]; $[]> (_t0731, _t0733);
    _t0730 = result0735;
    real _t0736 = sqrt015F (_t0730);
    real _t0737 = /0055 (_t072F, _t0736);
    vec4 x00738;
    vec4 _t0739;
    vec4 _t073A = (vec4)q003EE;
    _t0739 = _t073A;
    vec4 _t073B = *0036<$[4]> (_t0737, _t0739);
    vec4 _t073C;
    vec4 _t073D = (vec4)_t073B;
    _t073C = _t073D;
    x00738 = _t073C;
    real _t073E = 0.1e1;
    real _t073F;
    vec4 _t0740;
    vec4 _t0741 = (vec4)q103F4;
    _t0740 = _t0741;
    vec4 _t0742;
    vec4 _t0743 = (vec4)q103F4;
    _t0742 = _t0743;
    real result0744 = •00CE<$[4]; $[4]; $[]> (_t0740, _t0742);
    _t073F = result0744;
    real _t0745 = sqrt015F (_t073F);
    real _t0746 = /0055 (_t073E, _t0745);
    vec4 y00747;
    vec4 _t0748;
    vec4 _t0749 = (vec4)q103F4;
    _t0748 = _t0749;
    vec4 _t074A = *0036<$[4]> (_t0746, _t0748);
    vec4 _t074B;
    vec4 _t074C = (vec4)_t074A;
    _t074B = _t074C;
    y00747 = _t074B;
    real _t074D = 0.1e1;
    real _t074E;
    vec4 _t074F;
    vec4 _t0750 = (vec4)x00738;
    _t074F = _t0750;
    vec4 _t0751;
    vec4 _t0752 = (vec4)y00747;
    _t0751 = _t0752;
    real result0753 = •00CE<$[4]; $[4]; $[]> (_t074F, _t0751);
    _t074E = result0753;
    int _t0754 = 2;
    real _t0755 = ^0068 (_t074E, _t0754);
    real _t0756 = -0026<$[]> (_t074D, _t0755);
    a072E = _t0756;
    a04DE = a072E;
    real _t04E0 = 0.5e0;
    vec4 _t04E1;
    real _t066F = 0.1e1;
    real _t0670;
    vec4 _t0671;
    vec4 _t0672 = (vec4)q003EE;
    _t0671 = _t0672;
    vec4 _t0673;
    vec4 _t0674 = (vec4)q003EE;
    _t0673 = _t0674;
    real result0675 = •00CE<$[4]; $[4]; $[]> (_t0671, _t0673);
    _t0670 = result0675;
    real _t0676 = sqrt015F (_t0670);
    real _t0677 = /0055 (_t066F, _t0676);
    vec4 x0678;
    vec4 _t0679;
    vec4 _t067A = (vec4)q003EE;
    _t0679 = _t067A;
    vec4 _t067B = *0036<$[4]> (_t0677, _t0679);
    vec4 _t067C;
    vec4 _t067D = (vec4)_t067B;
    _t067C = _t067D;
    x0678 = _t067C;
    real _t067E = 0.1e1;
    real _t067F;
    vec4 _t0680;
    vec4 _t0681 = (vec4)q103F4;
    _t0680 = _t0681;
    vec4 _t0682;
    vec4 _t0683 = (vec4)q103F4;
    _t0682 = _t0683;
    real result0684 = •00CE<$[4]; $[4]; $[]> (_t0680, _t0682);
    _t067F = result0684;
    real _t0685 = sqrt015F (_t067F);
    real _t0686 = /0055 (_t067E, _t0685);
    vec4 y0687;
    vec4 _t0688;
    vec4 _t0689 = (vec4)q103F4;
    _t0688 = _t0689;
    vec4 _t068A = *0036<$[4]> (_t0686, _t0688);
    vec4 _t068B;
    vec4 _t068C = (vec4)_t068A;
    _t068B = _t068C;
    y0687 = _t068B;
    real ang068D;
    real dot068E;
    vec4 _t068F;
    vec4 _t0690 = (vec4)x0678;
    _t068F = _t0690;
    vec4 _t0691;
    vec4 _t0692 = (vec4)y0687;
    _t0691 = _t0692;
    real result0693 = •00CE<$[4]; $[4]; $[]> (_t068F, _t0691);
    dot068E = result0693;
    real _t0694 = 0.e0;
    bool _t0695 = <007A (dot068E, _t0694);
    if _t0695 {
      vec4 _t0696;
      real _t0697 = 0.e0;
      real _t0698 = 0.e0;
      real _t0699 = 0.e0;
      real _t069A = 0.e0;
      vec4 _t069B = [_t0697, _t0698, _t0699, _t069A];
      vec4 _t069C;
      vec4 _t069D = (vec4)x0678;
      _t069C = _t069D;
      vec4 _t069E = -0026<$[4]> (_t069B, _t069C);
      vec4 result069F;
      vec4 _t06A0 = (vec4)_t069E;
      result069F = _t06A0;
      _t0696 = result069F;
      vec4 _t06A1;
      vec4 _t06A2;
      vec4 _t06A3 = (vec4)_t0696;
      _t06A2 = _t06A3;
      vec4 _t06A4;
      vec4 _t06A5 = (vec4)y0687;
      _t06A4 = _t06A5;
      vec4 _t06A6 = -0026<$[4]> (_t06A2, _t06A4);
      vec4 result06A7;
      vec4 _t06A8 = (vec4)_t06A6;
      result06A7 = _t06A8;
      _t06A1 = result06A7;
      vec4 _t06A9;
      real _t06AA = 0.e0;
      real _t06AB = 0.e0;
      real _t06AC = 0.e0;
      real _t06AD = 0.e0;
      vec4 _t06AE = [_t06AA, _t06AB, _t06AC, _t06AD];
      vec4 _t06AF;
      vec4 _t06B0 = (vec4)x0678;
      _t06AF = _t06B0;
      vec4 _t06B1 = -0026<$[4]> (_t06AE, _t06AF);
      vec4 result06B2;
      vec4 _t06B3 = (vec4)_t06B1;
      result06B2 = _t06B3;
      _t06A9 = result06B2;
      vec4 _t06B4;
      vec4 _t06B5;
      vec4 _t06B6 = (vec4)_t06A9;
      _t06B5 = _t06B6;
      vec4 _t06B7;
      vec4 _t06B8 = (vec4)y0687;
      _t06B7 = _t06B8;
      vec4 _t06B9 = -0026<$[4]> (_t06B5, _t06B7);
      vec4 result06BA;
      vec4 _t06BB = (vec4)_t06B9;
      result06BA = _t06BB;
      _t06B4 = result06BA;
      real _t06BC;
      vec4 _t06BD;
      vec4 _t06BE = (vec4)_t06A1;
      _t06BD = _t06BE;
      vec4 _t06BF;
      vec4 _t06C0 = (vec4)_t06B4;
      _t06BF = _t06C0;
      real result06C1 = •00CE<$[4]; $[4]; $[]> (_t06BD, _t06BF);
      _t06BC = result06C1;
      real _t06C2 = sqrt015F (_t06BC);
      real _t06C3 = 0.2e1;
      real arc06C4 = /0055 (_t06C2, _t06C3);
      real _t06C5 = 0.314159265358979323846264338327950288e1;
      real _t06C6 = 0.2e1;
      real _t06C7 = asin016F (arc06C4);
      real _t06C8 = *0034 (_t06C6, _t06C7);
      real _t06C9 = -0026<$[]> (_t06C5, _t06C8);
      ang068D = _t06C9;
    } else {
      vec4 _t06CA;
      vec4 _t06CB;
      vec4 _t06CC = (vec4)x0678;
      _t06CB = _t06CC;
      vec4 _t06CD;
      vec4 _t06CE = (vec4)y0687;
      _t06CD = _t06CE;
      vec4 _t06CF = -0026<$[4]> (_t06CB, _t06CD);
      vec4 result06D0;
      vec4 _t06D1 = (vec4)_t06CF;
      result06D0 = _t06D1;
      _t06CA = result06D0;
      vec4 _t06D2;
      vec4 _t06D3;
      vec4 _t06D4 = (vec4)x0678;
      _t06D3 = _t06D4;
      vec4 _t06D5;
      vec4 _t06D6 = (vec4)y0687;
      _t06D5 = _t06D6;
      vec4 _t06D7 = -0026<$[4]> (_t06D3, _t06D5);
      vec4 result06D8;
      vec4 _t06D9 = (vec4)_t06D7;
      result06D8 = _t06D9;
      _t06D2 = result06D8;
      real _t06DA;
      vec4 _t06DB;
      vec4 _t06DC = (vec4)_t06CA;
      _t06DB = _t06DC;
      vec4 _t06DD;
      vec4 _t06DE = (vec4)_t06D2;
      _t06DD = _t06DE;
      real result06DF = •00CE<$[4]; $[4]; $[]> (_t06DB, _t06DD);
      _t06DA = result06DF;
      real _t06E0 = sqrt015F (_t06DA);
      real _t06E1 = 0.2e1;
      real arc06E2 = /0055 (_t06E0, _t06E1);
      real _t06E3 = 0.2e1;
      real _t06E4 = asin016F (arc06E2);
      real _t06E5 = *0034 (_t06E3, _t06E4);
      ang068D = _t06E5;
    }
    real _t06E6 = 0.1e1;
    real _t06E7 = -0026<$[]> (_t06E6, _t04E0);
    real _t06E8 = *0034 (_t06E7, ang068D);
    real _t06E9;
    real _t06EA;
    real _t06EB = *0034 (_t06E8, _t06E8);
    real _t06EC = 0.1e1;
    real _t06ED = +0017<$[]> (_t06EB, _t06EC);
    real _t06EE = 0.1e1;
    bool _t06EF = ==0084 (_t06ED, _t06EE);
    if _t06EF {
      _t06EA = 0.1e1;
    } else {
      real _t06F0 = sin016B (_t06E8);
      _t06EA = /0055 (_t06F0, _t06E8);
    }
    _t06E9 = _t06EA;
    real _t06F1;
    real _t06F2;
    real _t06F3 = *0034 (ang068D, ang068D);
    real _t06F4 = 0.1e1;
    real _t06F5 = +0017<$[]> (_t06F3, _t06F4);
    real _t06F6 = 0.1e1;
    bool _t06F7 = ==0084 (_t06F5, _t06F6);
    if _t06F7 {
      _t06F2 = 0.1e1;
    } else {
      real _t06F8 = sin016B (ang068D);
      _t06F2 = /0055 (_t06F8, ang068D);
    }
    _t06F1 = _t06F2;
    real _t06F9 = /0055 (_t06E9, _t06F1);
    vec4 _t06FA;
    vec4 _t06FB;
    vec4 _t06FC = (vec4)x0678;
    _t06FB = _t06FC;
    vec4 _t06FD = *0036<$[4]> (_t06F9, _t06FB);
    vec4 _t06FE;
    vec4 _t06FF = (vec4)_t06FD;
    _t06FE = _t06FF;
    _t06FA = _t06FE;
    real _t0700 = 0.1e1;
    real _t0701 = -0026<$[]> (_t0700, _t04E0);
    vec4 _t0702;
    vec4 _t0703;
    vec4 _t0704 = (vec4)_t06FA;
    _t0703 = _t0704;
    vec4 _t0705 = *0036<$[4]> (_t0701, _t0703);
    vec4 _t0706;
    vec4 _t0707 = (vec4)_t0705;
    _t0706 = _t0707;
    _t0702 = _t0706;
    real _t0708 = *0034 (_t04E0, ang068D);
    real _t0709;
    real _t070A;
    real _t070B = *0034 (_t0708, _t0708);
    real _t070C = 0.1e1;
    real _t070D = +0017<$[]> (_t070B, _t070C);
    real _t070E = 0.1e1;
    bool _t070F = ==0084 (_t070D, _t070E);
    if _t070F {
      _t070A = 0.1e1;
    } else {
      real _t0710 = sin016B (_t0708);
      _t070A = /0055 (_t0710, _t0708);
    }
    _t0709 = _t070A;
    real _t0711;
    real _t0712;
    real _t0713 = *0034 (ang068D, ang068D);
    real _t0714 = 0.1e1;
    real _t0715 = +0017<$[]> (_t0713, _t0714);
    real _t0716 = 0.1e1;
    bool _t0717 = ==0084 (_t0715, _t0716);
    if _t0717 {
      _t0712 = 0.1e1;
    } else {
      real _t0718 = sin016B (ang068D);
      _t0712 = /0055 (_t0718, ang068D);
    }
    _t0711 = _t0712;
    real _t0719 = /0055 (_t0709, _t0711);
    vec4 _t071A;
    vec4 _t071B;
    vec4 _t071C = (vec4)y0687;
    _t071B = _t071C;
    vec4 _t071D = *0036<$[4]> (_t0719, _t071B);
    vec4 _t071E;
    vec4 _t071F = (vec4)_t071D;
    _t071E = _t071F;
    _t071A = _t071E;
    vec4 _t0720;
    vec4 _t0721;
    vec4 _t0722 = (vec4)_t071A;
    _t0721 = _t0722;
    vec4 _t0723 = *0036<$[4]> (_t04E0, _t0721);
    vec4 _t0724;
    vec4 _t0725 = (vec4)_t0723;
    _t0724 = _t0725;
    _t0720 = _t0724;
    vec4 result0726;
    vec4 _t0727;
    vec4 _t0728 = (vec4)_t0702;
    _t0727 = _t0728;
    vec4 _t0729;
    vec4 _t072A = (vec4)_t0720;
    _t0729 = _t072A;
    vec4 _t072B = +0017<$[4]> (_t0727, _t0729);
    vec4 result072C;
    vec4 _t072D = (vec4)_t072B;
    result072C = _t072D;
    result0726 = result072C;
    _t04E1 = result0726;
    vec4 frm066D;
    vec4 _t066E = (vec4)_t04E1;
    frm066D = _t066E;
    frm04DF = frm066D;
    real _t04E3 = 0.1e1;
    real _t04E4 = 0.e0;
    real _t04E5 = 0.e0;
    real _t04E6 = 0.e0;
    real _t04E7 = 0.e0;
    tensor[5] _t04E8 = [_t04E3, _t04E4, _t04E5, _t04E6, _t04E7];
    real q0665;
    real z0666 = 0.2e1;
    int _t0667 = 0;
    int _t0668 = 5;
    int[] _t0669 = $range01B9 (_t0667, _t0668);
    foreach j03FC in _t0669 {
      real _t066A = |()|00B5<$[5]> (_t04E8);
      real _t066B = (real)j03FC;
      real _t066C = +0017<$[]> (_t066A, _t066B);
      z0666 = +0017<$[]> (z0666, _t066C);
    }
    q0665 = z0666;
    q04E2 = q0665;
  }
  update
  {
    real z04E9 = 0.2e1;
    int _t04EA = 0;
    int _t04EB = 5;
    int[] _t04EC = $range01B9 (_t04EA, _t04EB);
    foreach j04EE in _t04EC {
      real _t04ED = |()|00B5<$[]> (b04D7);
      real _t04EF = (real)j04EE;
      real _t04F0 = +0017<$[]> (_t04ED, _t04EF);
      z04E9 = +0017<$[]> (z04E9, _t04F0);
      vec4 z1075A;
      vec4 _t075B;
      vec4 _t075C = (vec4)z104D8;
      _t075B = _t075C;
      vec4 _t075D;
      vec4 _t075E = (vec4)q103F4;
      _t075D = _t075E;
      vec4 _t075F = +0017<$[4]> (_t075B, _t075D);
      vec4 result0760;
      vec4 _t0761 = (vec4)_t075F;
      result0760 = _t0761;
      z1075A = result0760;
      z104D8 = z1075A;
    }
    string _t04F1 = " ";
    string _t04F2 = " ";
    vec4 _t04F3;
    vec4 _t0759 = (vec4)z104D8;
    _t04F3 = _t0759;
    string _t04F4 = " ";
    string _t04F5 = "\n";
    print (q04E2, _t04F1, z04E9, _t04F2, _t04F3, _t04F4, frm04DF, _t04F5);
    stabilize;
  }
}
grid(1) {
  int _t04F6 = 0;
  int _t04F7 = 1;
  int[] _t04F8 = $range01B9 (_t04F6, _t04F7);
  foreach i04F9 in _t04F8 {
    new f (i04F9);
  }
}
/* Program end */
/usr/bin/clang++ -fPIC -m64 -c -Wreturn-type -Wuninitialized -march=native -O3 -DNDEBUG -mavx2 -msse4.2 -I/home/teocollin/gitcode/diderot/include -I/home/teocollin/installs/teem/teem-build/include -o test/umm.o test/umm.cxx
/usr/bin/clang++ -fPIC -m64 -o test/umm test/umm.o /home/teocollin/gitcode/diderot/lib/diderot-rt-seq.o -Wl,-rpath=/home/teocollin/installs/teem/teem-build/lib -L/home/teocollin/installs/teem/teem-build/lib -lteem -lm
                                       Phase                                         Exclusive    Total  
  compiler ..........................................................................   0.000     0.835
    front end .......................................................................   0.085     0.123
      parser ........................................................................   0.032     0.032
      typechecker ...................................................................   0.007     0.007
      simplify ......................................................................   0.000     0.000
    translate .......................................................................   0.005     0.005
    High IR optimization ............................................................   0.000     0.009
      High IR value numbering .......................................................   0.003     0.003
      High IR normalization .........................................................   0.006     0.006
      High IR checking ..............................................................   0.000     0.000
    High to Mid translation .........................................................   0.005     0.005
    Mid IR optimization .............................................................   0.000     0.003
      Mid IR contraction ............................................................   0.000     0.000
      Mid IR value numbering ........................................................   0.002     0.002
      Mid IR border control .........................................................   0.000     0.000
      Mid IR checking ...............................................................   0.000     0.000
    Mid to Low translation ..........................................................   0.002     0.002
    Low IR optimization .............................................................   0.000     0.003
      Low IR contraction ............................................................   0.001     0.001
      Low IR value numbering ........................................................   0.002     0.002
      Low IR checking ...............................................................   0.000     0.000
    Low to Tree translation .........................................................   0.002     0.002
    Tree IR optimization ............................................................   0.000     0.000
      Tree IR contraction ...........................................................   0.000     0.000
      Tree IR checking ..............................................................   0.000     0.000
    code generation .................................................................   0.008     0.682
      C compiler ....................................................................   0.674     0.674
